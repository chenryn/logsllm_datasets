漏洞补丁：
[Commit](https://github.com/apache/shiro/commit/b15ab927709ca18ea4a02538be01919a19ab65af)  
参考 ： [su18师傅](https://su18.org/post/shiro-2/#cve-2016-6802)
### 漏洞详解
本漏洞类似 `CVE-2010-3863`，依旧是路径标准化导致的问题，不过之前是在 `RequestURI` 上，本漏洞是在 `ContextPath`
上。  
之前提到，`Shiro` 调用 `WebUtils.getPathWithinApplication()` 方法获取请求路径。逻辑如下：
    public String getPathWithinApplication(HttpServletRequest request) {
        String contextPath = this.getContextPath(request);
        String requestUri = this.getRequestUri(request);
        String path = this.getRemainingPath(requestUri, contextPath, true);
        if (path != null) {
            return StringUtils.hasText(path) ? path : "/";
        } else {
            return requestUri;
        }
    }
其中调用 `getContextPath()` 方法，获取 `contextPath` ；调用 `getRequestUri()` 方法，获取 `uri`
；
在`getContextPath()` 方法调用 `decodeRequestString` 进行 `URLDecode`。  
由于获取的 `ContextPath` 没有标准化处理，如果出现一些特殊字符使`ContextPath`与实际不符，都会导致在
`StringUtils.startsWithIgnoreCase()` 方法判断时失效，直接返回完整的`RequestURI`。
#### 复现
登录账户`lonestarr`，该账户对页面`remoting.jsp`没有访问权限，在跟路径前加任意路径，再加`../`即可实现绕过  
### 漏洞修复
`Shiro` 在 `1.3.2` 版本的
[Commit](https://github.com/apache/shiro/commit/b15ab927709ca18ea4a02538be01919a19ab65af)
中对此漏洞进行了修复。  
通过代码可以看出，在 `WebUtils.getContextPath` 方法进行了更新，使用了修复 `CVE-2010-3863` 时更新的路径标准化方法
`normalize` 来处理 `ContextPath` 之后再返回。
## CVE-2019-12422
### 漏洞信息
漏洞编号：[CVE-2019-12422](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12422) /
[CNVD-2016-07814](https://www.cnvd.org.cn/flaw/show/CNVD-2019-42574)
/[SHIRO-721](https://issues.apache.org/jira/browse/SHIRO-721)  
影响版本：`shiro < 1.4.2`  
漏洞描述：`RememberMe`默认通过 `AES-128-CBC` 模式加密，易受`Padding Oracle Attack`攻击  
漏洞补丁：[Commit](https://github.com/apache/shiro/commit/a8018783373ff5e5210225069c9919e071597d5e)  
参考：[padding oracles](https://blog.skullsecurity.org/2016/12) [Padding oracle
attack](https://skysec.top/2017/12/13/padding-oracle%E5%92%8Ccbc%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/) [PaddingOracleAttack-Shiro-721代码分析](https://www.anquanke.com/post/id/203869)
### 漏洞分析
本次漏洞实际并不是针对 `shiro` 代码逻辑的漏洞，而是针对 `shiro` 使用的 `AES-128-CBC`
加密模式的攻击，首先了解一下这种加密方式。
#### AES-128-CBC
`AES-128-CBC` 模式就代表使用 `AES` 密钥长度为 `128 bit`，使用 `CBC` 分组算法的加密模式。
  * `AES`是对称、分组加密算法，分组长度固定为 `128bit`，密钥 `key` 的长度可以为 `128 bit`（`16`字节）、`192 bit`（`24`字节）、`256 bit`（`32`字节），如果数据块及密钥长度不足时，会补齐。
  * `CBC`，全称 `Cipher Block Chaining` (密文分组链接模式)，简单来说，是一种使用前一个密文组与当前明文组 `XOR` 后再进行加密的模式。`CBC`主要是引入一个初始化向量`（Initialization Vector，IV）`来加强密文的随机性，保证相同明文通过相同的密钥加密的结果不一样。
`CBC` 模式下，存在以下填充方式，用于在分组数据不足时，在结尾进行填充，用于补齐：
  * `NoPadding`：不填充，明文长度必须是 `16 Bytes` 的倍数。
  * `PKCS5Padding`：`PKCS7Padding`跟`PKCS5Padding`的区别就在于数据填充方式，`PKCS7Padding`是缺几个字节就补几个字节的`0`，而`PKCS5Padding`是缺几个字节就补充几个字节的几，比如缺`6`个字节，就补充`6`个字节的`6`，如果不缺字节，就需要再加一个字节块。
  * `ISO10126Padding`：以随机字节填充 , 最后一个字节为填充字节的个数。
`Shiro` 中使用的是 `PKCS5Padding`，也就是说，可能出现的 `padding byte` 值只可能为：
    1 个字节的 padding 为 0x01
    2 个字节的 padding 为 0x02,0x02
    3 个字节的 padding 为 0x03,0x03,0x03
    4 个字节的 padding 为 0x04,0x04,0x04,0x04
    ...
当待加密的数据长度刚好满足分组长度的倍数时，仍然需要填充一个分组长度，也就是说，明文长度如果是 `16n`，加密后的数据长度为 `16(n+1)` 。  
加密过程：
  * 明文经过填充后，分为不同的组`block`，以组的方式对数据进行处理
  * 初始化向量（`IV`）首先和第一组明文进行`XOR`（异或）操作，得到”中间值“
  * 采用密钥对中间值进行块加密，删除第一组加密的密文 （加密过程涉及复杂的变换、移位等）
  * 第一组加密的密文作为第二组的初始向量（`IV`），参与第二组明文的异或操作
  * 依次执行块加密，最后将每一块的密文拼接成密文
  * `IV`经常会被放在密文的前面，解密时先获取前面的`IV`，再对后面的密文进行解密
解密过程
  * 会将密文进行分组（按照加密采用的分组大小），前面的第一组是初始化向量，从第二组开始才是真正的密文
  * 使用加密密钥对密文的第一组进行解密，得到中间值
  * 将中间值和初始化向量进行异或，得到该组的明文
  * 前一块密文是后一块密文的`IV`，通过异或中间值，得到明文
  * 块全部解密完成后，拼接得到明文，密码算法校验明文的格式（填充格式是否正确）
  * 校验通过得到明文，校验失败得到密文
#### Padding Oracle Attack 原理
这个攻击的根源是明文分组和填充，同时应用程序对于填充异常的响应可以作为反馈。首先明确以下两点
  1. 解密之后的最后一个数据块，其结尾应该包含正确的填充序列。如果这点没有满足，那么加/解密程序就会抛出一个填充异常。`Padding Oracle Attack`的关键就是利用程序是否抛出异常来判断`padding`是否正确。
  2. 解密时将密文分组，第一组是初始化向量，后面才是真正的密文。密文传过去后先解密得到中间值，中间值与初始向量异或得到明文片段。
比如我们的明文为`admin`，则需要被填充为
`admin\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b`，一共`11`个`\x0b`  
如果我们输入一个错误的`IV`，依旧是可以解密的，但是中间值`middle`和我们输入的`IV`经过异或后得到的填充值可能出现错误这样就出现验证错误的情况。  
比如本来应该是`admin\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b`  
而我们错误的得到`admin\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x2b`  
这样解密程序往往会抛出异常(`Padding Error`)，应用在`web`里的时候，往往是`302`或是`500`报错，而正常解密的时候是`200`  
所以这时，我们可以根据服务器的反应来判断我们输入的`IV`是否正确
##### 举例解释
这里使用[参考链接](https://skysec.top/2017/12/13/padding-oracle%E5%92%8Ccbc%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/)中的数据进行举例说明
我们假设正确的`IV`为
    0x6d 0x36 0x70 0x76 0x03 0x6e 0x22 0x39
`middle`中间值为(为了方便，这里按`8`位分组来阐述)
    0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d
解密后正确的明文为：
    TEST0x040x040x040x04
以攻击者的角度来看，我们可以知道`IV`的值和服务器的状态，不知道中间值和解密后明文的值，所以我们可以根据输入的`IV`值和服务器的状态去判断出解密后明文的值，这里的攻击即叫做`Padding
Oracle Attack`攻击  
首先输入`IV`
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
一起传到服务器后，服务器对`IV`后面的加密数据进行解密，得到中间值，然后`IV`与中间值进行异或，得到明文：
    0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d
此时程序会校验最后一位`padding`字节是否正确。由于是按8位进行分组，所以正确的`padding`的值应该只有`0x01~0x08`，这里是`0x3d`，显然是错误的，所以程序会抛出`500`  
知道这一点后，我们可以通过遍历最后一位`IV`，从而使这个`IV`和`middle`值异或后的最后一位是我们需要`0x01`，这时候有`256`种可能。  
这时问题来了，我们为什么要使最后一位是`0x01`呢？因为此时我们像知道`plain[8]`的值，只计算最后一位就可以了，只计算最后一位的话只有`0x01`时服务器才会通过验证，我们才能计算下面的公式。  
此时`IV`的值为：
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x3c
`IV`和`Middle`异或后得到的是：
    0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x01
这时候程序校验最后一位，发现是`0x01`，即可通过校验，服务器返回`200`  
然后我们有公式：
    Middle[8]^原IV[8] = plain[8]
    Middle[8]^现IV[8] = 0x01
所以，我们可以算出
    middle[8] = 0x01^现IV[8]
然后可以计算得到：
    plain[8] = 0x01^现IV[8]^原IV[8] = 0x01^0x3c^0x39=0x04
和我们之前解密成功的明文一致（最后4位为填充），下面我们需要获取`plain[7]`。  
因为这次我们需要的明文是`2`个`0x02`，而非之前的一个`0x01`，所以需要将`IV`更新
    现IV[8] = middle[8]^0x02
为什么是`现在的IV[8] = middle[8]^0x02`？  
因为`现在的IV[8]^middle[8]=服务器校验的值`，而我们遍历倒数第二位，应该是`2`个`0x02`，所以服务器希望得到的是`0x02`，所以
    现IV[8]^middle[8]=0x02
然后再继续遍历现在的`IV[7]`  
方法还是和上面一样，遍历后可以得到  
`IV`:
    0x00 0x00 0x00 0x00 0x00 0x00 0x24 0x3f
`IV`和`middle`异或得到的是
    0x39 0x73 0x23 0x22 0x07 0x6a 0x02 0x02
此时真正的明文值：
    plain[7]=现IV[7]^原IV[7]^0x02
所以`plain[7] = 0x02^0x24^0x22=0x04`  
和我们之前解密成功的明文一致（最后4位为填充）  
最后遍历循环，即可得到完整的`plain`
#### CBC翻转攻击过程
这个实际上和`padding oracle`攻击差不多，还是关注这个解密过程。但这时，我们是已知明文，想利用`IV`去改变解密后的明文  
比如我们知道明文解密后是`1dmin`，我们想构造一个`IV`，让他解密后变成`admin`。  
还是原来的思路
    原IV[1]^middle[1]=plain[1]
而此时，我们想要有如下等式
    构造的IV[1]^mddle[1]=’a’
所以我们可以得到
    middle[1]=原IV[1]^plain[1]
    构造的IV[1] = middle[1]^’a’
    构造的IV[1]= 原IV[1]^plain[1]^’a’
我们可以用这个式子，遍历明文，构造出`IV`，让程序解密出我们想要的明文
#### Shiro中的攻击