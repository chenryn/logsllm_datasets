执行完成后，会生成一个 demo.pyz 文件，可直接执行它。
具体演示过程如下
2.23 快速打印函数的调用栈
在使用pdb时，手动打印调用栈
import traceback
traceback.print_stack(file=sys.stdout)
或者直接使用 where （更简单的直接一个 w ）：https://www.codenong.com/1156023/
(Pdb) where
/usr/lib/python2.7/site-packages/eventlet/greenpool.py(82)_spawn_n_impl()
-> func(*args, **kwargs)
/usr/lib/python2.7/site-packages/eventlet/wsgi.py(719)process_request()
-> proto.__init__(sock, address, self)
/usr/lib64/python2.7/SocketServer.py(649)__init__()
-> self.handle()
/usr/lib64/python2.7/BaseHTTPServer.py(340)handle()
-> self.handle_one_request()
/usr/lib/python2.7/site-packages/eventlet/wsgi.py(384)handle_one_request()
-> self.handle_one_response()
/usr/lib/python2.7/site-packages/eventlet/wsgi.py(481)handle_one_response()
第三章：炫技魔法操作
3.1 八种连接列表的方式
1、最直观的相加
使用 + 对多个列表进行相加，你应该懂，不多说了。
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>> list03 = [7,8,9]
>>>
>>> list01 + list02 + list03
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>>
2、借助 itertools
itertools 在 Python 里有一个非常强大的内置模块，它专门用于操作可迭代对象。
在前面的文章中也介绍过，使用 itertools.chain() 函数先可迭代对象（在这里指的是列表）串
联起来，组成一个更大的可迭代对象。
最后你再利用 list 将其转化为 列表。
>>> from itertools import chain
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>> list03 = [7,8,9]
>>>
>>> list(chain(list01, list02, list03))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>>
3、使用 * 解包
使用 * 可以解包列表，解包后再合并。
示例如下：
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>>
>>> [*list01, *list02]
[1, 2, 3, 4, 5, 6]
>>>
4、使用 extend
在字典中，使用 update 可实现原地更新，而在列表中，使用 extend 可实现列表的自我扩展。
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>>
>>> list01.extend(list02)
>>> list01
[1, 2, 3, 4, 5, 6]
5、使用列表推导式
Python 里对于生成列表、集合、字典，有一套非常 Pythonnic 的写法。
那就是列表解析式，集合解析式和字典解析式，通常是 Python 发烧友的最爱，那么今天的主题：
列表合并，列表推导式还能否胜任呢？
当然可以，具体示例代码如下：
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>> list03 = [7,8,9]
>>>
>>> [x for l in (list01, list02, list03) for x in l]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>>
6、使用 heapq
heapq 是 Python 的一个标准模块，它提供了堆排序算法的实现。
该模块里有一个 merge 方法，可以用于合并多个列表，如下所示
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>> list03 = [7,8,9]
>>>
>>> from heapq import merge
>>>
>>> list(merge(list01, list02, list03))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>>
要注意的是，heapq.merge 除了合并多个列表外，它还会将合并后的最终的列表进行排序。
>>> list01 = [2,5,3]
>>> list02 = [1,4,6]
>>> list03 = [7,9,8]
>>>
>>> from heapq import merge
>>>
>>> list(merge(list01, list02, list03))
[1, 2, 4, 5, 3, 6, 7, 9, 8]
>>>
它的效果等价于下面这行代码：
sorted(itertools.chain(*iterables))
如果你希望得到一个始终有序的列表，那请第一时间想到 heapq.merge，因为它采用堆排序，效率
非常高。但若你不希望得到一个排过序的列表，就不要使用它了。
7、借助魔法方法
有一个魔法方法叫 __add__ ，当我们使用第一种方法 list01 + list02 的时候，内部实际上是作用在
__add__ 这个魔法方法上的。
所以以下两种方法其实是等价的
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>>
>>> list01 + list02
[1, 2, 3, 4, 5, 6]
>>>
>>>
>>> list01.__add__(list02)
[1, 2, 3, 4, 5, 6]
>>>
借用这个魔法特性，我们可以 reduce 这个方法来对多个列表进行合并，示例代码如下
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>> list03 = [7,8,9]
>>>
>>> from functools import reduce
>>> reduce(list.__add__, (list01, list02, list03))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>>
8. 使用 yield from
在 yield from 后可接一个可迭代对象，用于迭代并返回其中的每一个元素。
因此，我们可以像下面这样自定义一个合并列表的工具函数。
>>> list01 = [1,2,3]
>>> list02 = [4,5,6]
>>> list03 = [7,8,9]
>>>
>>> def merge(*lists):
... for l in lists:
... yield from l
...
>>> list(merge(list01, list02, list03))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>
3.2 合并字典的 8 种方法
1、最简单的原地更新
字典对象内置了一个 update 方法，用于把另一个字典更新到自己身上。
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> profile.update(ext_info)
>>> print(profile)
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
如果想使用 update 这种最简单、最地道原生的方法，但又不想更新到自己身上，而是生成一个新
的对象，那请使用深拷贝。
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> from copy import deepcopy
>>>
>>> full_profile = deepcopy(profile)
>>> full_profile.update(ext_info)
>>>
>>> print(full_profile)
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
>>> print(profile)
{"name": "xiaoming", "age": 27}
2、先解包再合并字典
使用 ** 可以解包字典，解包完后再使用 dict 或者 {} 就可以合并。
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> full_profile01 = {**profile, **ext_info}
>>> print(full_profile01)
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
>>>
>>> full_profile02 = dict(**profile, **ext_info)
>>> print(full_profile02)
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
若你不知道 dict(**profile, **ext_info) 做了啥，你可以将它等价于
>>> dict((("name", "xiaoming"), ("age", 27), ("gender", "male")))
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
3、借助 itertools
在 Python 里有一个非常强大的内置模块，它专门用于操作可迭代对象。
正好我们字典也是可迭代对象，自然就可以想到，可以使用 itertools.chain() 函数先将多个字
典（可迭代对象）串联起来，组成一个更大的可迭代对象，然后再使用 dict 转成字典。
>>> import itertools
>>>
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>>
>>> dict(itertools.chain(profile.items(), ext_info.items()))
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
4、借助 ChainMap
如果可以引入一个辅助包，那我就再提一个， ChainMap 也可以达到和 itertools 同样的效果。
>>> from collections import ChainMap
>>>
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> dict(ChainMap(profile, ext_info))
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
使用 ChainMap 有一点需要注意，当字典间有重复的键时，只会取第一个值，排在后面的键值并不
会更新掉前面的（使用 itertools 就不会有这个问题）。
>>> from collections import ChainMap
>>>
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info={"age": 30}
>>> dict(ChainMap(profile, ext_info))
{'name': 'xiaoming', 'age': 27}
5、使用dict.items() 合并
在 Python 3.9 之前，其实就已经有 | 操作符了，只不过它通常用于对集合（set）取并集。
利用这一点，也可以将它用于字典的合并，只不过得绕个弯子，有点不好理解。
你得先利用 items 方法将 dict 转成 dict_items，再对这两个 dict_items 取并集，最后利用 dict 函
数，转成字典。
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> full_profile = dict(profile.items() | ext_info.items())
>>> full_profile
{'gender': 'male', 'age': 27, 'name': 'xiaoming'}
当然了，你如果嫌这样太麻烦，也可以简单点，直接使用 list 函数再合并（示例为 Python 3.x ）
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> dict(list(profile.items()) + list(ext_info.items()))
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
若你在 Python 2.x 下，可以直接省去 list 函数。
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> dict(profile.items() + ext_info.items())
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
6、最酷炫的字典解析式
Python 里对于生成列表、集合、字典，有一套非常 Pythonnic 的写法。
那就是列表解析式，集合解析式和字典解析式，通常是 Python 发烧友的最爱，那么今天的主题：
字典合并，字典解析式还能否胜任呢？
当然可以，具体示例代码如下：
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> {k:v for d in [profile, ext_info] for k,v in d.items()}
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
7、Python 3.9 新特性
在 2 月份发布的 Python 3.9.04a 版本中，新增了一个抓眼球的新操作符操作符： | ， PEP584 将
它称之为合并操作符（Union Operator），用它可以很直观地合并多个字典。
>>> profile = {"name": "xiaoming", "age": 27}
>>> ext_info = {"gender": "male"}
>>>
>>> profile | ext_info
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
>>>
>>> ext_info | profile
{'gender': 'male', 'name': 'xiaoming', 'age': 27}
>>>
>>>
除了 | 操作符之外，还有另外一个操作符 |= ，类似于原地更新。
>>> ext_info |= profile
>>> ext_info
{'gender': 'male', 'name': 'xiaoming', 'age': 27}
>>>
>>>
>>> profile |= ext_info
>>> profile
{'name': 'xiaoming', 'age': 27, 'gender': 'male'}
看到这里，有没有涨姿势了，学了这么久的 Python ，没想到合并字典还有这么多的方法。本篇文
章的主旨，并不在于让你全部掌握这 7 种合并字典的方法，实际在工作中，你只要选用一种最顺手
的方式即可，但是在协同工作中，或者在阅读他人代码时，你不可避免地会碰到各式各样的写法，
这时候你能下意识的知道这是在做合并字典的操作，那这篇文章就是有意义的。
3.3 花式导包的八种方法
1. 直接 import
人尽皆知的方法，直接导入即可
>>> import os
>>> os.getcwd()
'/home/wangbm'
与此类似的还有，不再细讲
import ...
import ... as ...
from ... import ...
from ... import ... as ...
一般情况下，使用 import 语句导入模块已经够用的。
但是在一些特殊场景中，可能还需要其他的导入方式。
下面我会一一地给你介绍。
2. 使用 __import__
__import__ 函数可用于导入模块，import 语句也会调用函数。其定义为：
__import__(name[, globals[, locals[, fromlist[, level]]]])
参数介绍：
name (required): 被加载 module 的名称
globals (optional): 包含全局变量的字典，该选项很少使用，采用默认值 global()
locals (optional): 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 - local()
fromlist (Optional): 被导入的 submodule 名称
level (Optional): 导入路径选项，Python 2 中默认为 -1，表示同时支持 absolute import 和
relative import。Python 3 中默认为 0，表示仅支持 absolute import。如果大于 0，则表示相对
导入的父目录的级数，即 1 类似于 '.'，2 类似于 '..'。
使用示例如下：
>>> os = __import__('os')
>>> os.getcwd()
'/home/wangbm'
如果要实现 import xx as yy 的效果，只要修改左值即可
如下示例，等价于 import os as myos ：
>>> myos = __import__('os')
>>> myos.getcwd()
'/home/wangbm'
上面说过的 __import__ 是一个内建函数，既然是内建函数的话，那么这个内建函数必将存在于
__buildins__ 中，因此我们还可以这样导入 os 的模块：
>>> __builtins__.__dict__['__import__']('os').getcwd()
'/home/wangbm'
3. 使用 importlib 模块
importlib 是 Python 中的一个标准库，importlib 能提供的功能非常全面。
它的简单示例：
>>> import importlib
>>> os=importlib.import_module("os")
>>> os.getcwd()
'/home/wangbm'
如果要实现 import xx as yy 效果，可以这样
>>> import importlib
>>>
>>> myos = importlib.import_module("os")