由于Flash文件如此危险，所以在实现XSSFilter时，一般都会禁用、
等标签。后者甚至可以加载ActiveX控件，能够产生更为严重的后果。
如果网站的应用一定要使用Flash怎么办？一般来说，如果仅仅是视频文件，则要
求转码为“flv文件”。flv文件是静态文件，不会产生安全隐患。如果是带动态脚本的
Flash，则可以通过Flash的配置参数进行限制。
常见的嵌入Flash的代码如下：
限制Flash动态脚本的最重要的参数是“al-lowScriptAccess”，这个参数定义了Flash
能否与HTML页面进行通信。它有三个可选值：
always，对与HTML的通信也就是执行JavaScript不做任何限制；
sameDomain，只允许来自于本域的Flash与Html通信，这是默认值；
never，绝对禁止Flash与页面通信。
使用always是非常危险的，一般推荐使用never。如果值为sameDomain的话，请务
必确保Flash文件不是用户传上来的。
除了“allowScriptAccess”外，“allowNet-working”也非常关键，这个参数能控制
Flash与外部网络进行通信。它有三个可选值： ?all，允许使用所有的网络通信，也是默
认值； ?internal，Flash不能与浏览器通信如navi-gateToURL，但是可以调用其他的
API； ?none，禁止任何的网络通信。
一般建议此值设置为none或者internal。设置为all可能带来安全问题。
除了用户的Flash文件能够实施脚本攻击外，一些Flash也可能会产生XSS漏洞。看
如下Ac-tionScript代码：
on (release) {
getURL (_root.clickTAG, "_blank");
}
这段代码经常出现在广告的Flash中，用于控制用户点击后的URL。但是这段代码
缺乏输入验证，可以被XSS攻击：
http://url/to/flash-file.swf?
clickTAG=javascript:alert('xss')
安全研究者Stefano Di Paola曾经写了一个叫“SWFIntruder”的工具来检测产生在
Flash里的XSS漏洞，通过这个工具可以检测出很多注入Flash变量导致的XSS问题。
SWFIntruder的界面
要修补本例中的漏洞，可以使用输入检查的方法：
on (release) {
if (_root.clickTAG.substring(0,5)== "http:"
||
_root.clickTAG.substring(0,6)== "https:" ||
_root.clickTAG.substring(0,1)== "/") {
getURL (_root.clickTAG, "_blank");
}
}
Flash XSS往往被开发者所忽视。注入Flash变量的XSS，因为其问题出现在编译后
的Flash文件中，一般的扫描工具或者代码审计工具都难以检查，常常使其成为漏网之
鱼。
OWASP为Flash安全研究设立了一个Wiki页面，有兴趣的读者可以参考。
3.2.9 真的高枕无忧吗：JavaScript
开发框架
在Web前端开发中，一些JavaScript开发框架深受开发者欢迎。利用JavaScript开
发框架中的各种强大功能，可以快速而简洁地完成前端开发。
一般来说，成熟的JavaScript开发框架都会注意自身的安全问题。但是代码是人写
的，高手偶尔也会犯错。一些JavaScript开发框架也曾暴露过一些XSS漏洞。
Dojo
Dojo是一个流行的JavaScript开发框架，它曾被发现存在XSS漏洞。在Dojo 1.4.1
中，存在两个“DOM Based XSS”：
File: dojo-release-1.4.1-src\dojo-
release-1.4.1-src\dijit\tests\_testCommon.js
用户输入由theme参数传入，然后被赋值给变量themeCss，最终被document.write
到页面里：
Line 25:
var str =
window.location.href.substr(window.location.h
ref.indexOf("?")+1).split(/#/);
Line 54:
..snip..
var themeCss =
d.moduleUrl("dijit.themes",theme+"/"+theme
+".css");
var themeCssRtl =
d.moduleUrl("dijit.themes",theme+"/"+theme
+"_rtl.css");
document.write('');
document.write('');
所以凡是引用了_testCommon.js的文件，都受影响。POC如下：
http://WebApp/dijit/tests/form/
test_Button.html?theme="/>
类似的问题还存在于：
File: dojo-release-1.4.1-src\dojo-
release-1.4.1-src\util\doh\runner.html
它也是从window.location传入了用户能够控制的数据，最终被document.write到页
面：
Line 40:
var qstr = window.location.search.substr(1);
..snip..
Line 64:
document.write("");
..snip..
document.write("");
POC如下：
http://WebApp/util/doh/runner.html?dojoUrl='/
>foo' +
fqstate + ';
最后被写入到页面导致脚本执行。YUI的修补方案是对变量进行了htmlEscape。
jQuery
jQuery可能是目前最流行的JavaScript框架。它本身出现的XSS漏洞很少。但是开
发者应该记住的是，JavaScript框架只是对JavaScript语言本身的封装，并不能解决代
码逻辑上产生的问题。所以开发者的意识才是安全编码的关键所在。
在jQuery中有一个html()方法。这个方法如果没有参数，就是读取一个DOM节点的
inner-HTML；如果有参数，则会把参数值写入该DOM节点的innerHTML中。这个过程
中有可能产生“DOM Based XSS”：
$('div.demo-container').html("");
如上，如果用户能够控制输入，则必然会产生XSS。在开发过程中需要注意这些问
题。
使用JavaScript框架并不能让开发者高枕无忧，同样可能存在安全问题。除了需要
关注框架本的安全外，开发者还要提高安全意识，理解并正确地使用开发框架。
3.3 XSS的防御
XSS的防御是复杂的。
流行的浏览器都内置了一些对抗XSS的措施，比如Firefox的CSP、Noscript扩展，
IE 8内置的XSS Filter等。而对于网站来说，也应该寻找优秀的解决方案，保护用户不
被XSS攻击。在本书中，主要把精力放在如何为网站设计安全的XSS解决方案上。
3.3.1 四两拨千斤：HttpOnly
HttpOnly最早是由微软提出，并在IE 6中实现的，至今已经逐渐成为一个标准。浏
览器将禁止页面的JavaScript访问带有HttpOnly属性的Cookie。
以下浏览器开始支持HttpOnly：
Microsoft IE 6 SP1+
Mozilla Firefox 2.0.0.5+
Mozilla Firefox 3.0.0.6+
Google Chrome
Apple Safari 4.0+
Opera 9.5+
严格地说，HttpOnly并非为了对抗XSS——HttpOnly解决的是XSS后的Cookie劫持
攻击。
在“初探XSS Payload”一节中，曾演示过“如何使用XSS窃取用户的Cookie，然后登
录进该用户的账户”。但如果该Cookie设置了HttpOnly，则这种攻击会失败，因为
JavaScript读取不到Cookie的值。
一个Cookie的使用过程如下。
Step1：浏览器向服务器发起请求，这时候没有Cookie。
Step2：服务器返回时发送Set-Cookie头，向客户端浏览器写入Cookie。
Step3：在该Cookie到期前，浏览器访问该域下的所有页面，都将发送该Cookie。
HttpOnly是在Set-Cookie时标记的：
Set-Cookie: =[; =]
[; expires=][; domain=]
[; path=][; secure][; HttpOnly]
需要注意的是，服务器可能会设置多个Cookie（多个key-value对），而HttpOnly可
以有选择性地加在任何一个Cookie值上。
在某些时候，应用可能需要JavaScript访问某几项Cookie，这种Cookie可以不设置
HttpOnly标记；而仅把HttpOnly标记给用于认证的关键Cookie。
HttpOnly的使用非常灵活。如下是一个使用HttpOnly的过程。
在这段代码中，cookie1没有HttpOnly，cookie2被标记为HttpOnly。两个Cookie均
被写入浏览器：
测试页面的HTTP响应头
浏览器确实接收了两个Cookie：
浏览器接收到两个Cookie
但是只有cookie1被JavaScript读取到：
cookie1被JavaScript读取
HttpOnly起到了应有的作用。
在不同的语言中，给Cookie添加HttpOnly的代码如下：
Java EE
response.setHeader("Set-Cookie",
"cookiename=value;
Path=/;Domain=domainvalue;Max-Ag
e=seconds;HTTPOnly");
C#
HttpCookie myCookie = new
HttpCookie("myCookie");
myCookie.HttpOnly = true;
Response.AppendCookie(myCookie);
VB.NET
Dim myCookie As HttpCookie = new
HttpCookie("myCookie")
myCookie.HttpOnly = True
Response.AppendCookie(myCookie)
但是在.NET 1.1中需要手动添加：
$ telnet foo.com 80
Trying 127.0.0.1...
Connected to foo.bar.
Escape character is ‘^]’.
TRACE / HTTP/1.1
Host: foo.bar
X-Header: test
HTTP/1.1 200 OK
Date: Mon, 02 Dec 2002 19:24:51 GMT
Server: Apache/2.0.40 (Unix)
Content-Type: message/http
TRACE / HTTP/1.1
Host: foo.bar
X-Header: test
Response.Cookies[cookie].Path += ";HTTPOnly";
PHP 4
header("Set-Cookie: hidden=value; httpOnly");
PHP 5
setcookie("abc", "test", NULL, NULL, NULL,
NULL, TRUE);
最后一个参数为HttpOnly属性。
添加HttpOnly的过程简单，效果明显，有如四两拨千斤。但是在部署时需要注意，
如果业务非常复杂，则需要在所有Set-Cookie的地方，给关键Cookie都加上HttpOnly。
漏掉了一个地方，都可能使得这个方案失效。
在过去几年中，曾经出现过一些能够绕过HttpOnly的攻击方法。
Apache支持的一个Header是TRACE。TRACE一般用于调试，它会将请求头作为
HTTPResponse Body返回。
$ telnet foo.com 80
Trying 127.0.0.1...
Connected to foo.bar.