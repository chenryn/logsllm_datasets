    4      9
    5      11
    ```
2.  固定 vCPU 线程后，您还可以将与指定虚拟机关联的 QEMU
    进程线程固定到特定的主机 CPU 或 CPU 范围。例如：以下命令将
    [*testguest6*]{.emphasis} 的 QEMU 进程线程 固定到 CPU 13 和
    15，确认成功：
    ``` literallayout
    # virsh emulatorpin testguest6 13,15
    # virsh emulatorpin testguest6
    emulator: CPU Affinity
    ----------------------------------
           *: 13,15
    ```
3.  最后，您也可以指定将哪些主机 NUMA
    节点专门分配给特定的虚拟机。这可提高虚拟机 vCPU
    的主机内存用量。例如，以下命令将 [*testguest6*]{.emphasis}
    设置为使用主机 NUMA 节点 3 到 5，确认成功：
    ``` literallayout
    # virsh numatune testguest6 --nodeset 3-5
    # virsh numatune testguest6
    ```
:::
::: itemizedlist
**其它资源**
-   请注意，为了获得最佳性能结果，建议您使用以上列出的所有手动调优方法。有关此类配置的示例，请参阅
    ["vCPU
    性能调整场景示例"一节](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#sample-vcpu-performance-tuning-scenario_optimizing-virtual-machine-cpu-performance "vCPU 性能调整场景示例"){.xref}。
-   要查看系统当前的 NUMA 配置，您可以使用 `numastat`{.literal}
    实用程序。有关使用 `numastat`{.literal} 的详情，请参考
    ["虚拟机性能监控工具"一节](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.xref}。
-   目前无法在 IBM Z 主机上执行 NUMA 调整。有关详情请参考 ["IBM Z
    上的虚拟化与 AMD64 和 Intel 64
    有什么不同"一节](#getting-started-with-virtualization-in-rhel-8-on-ibm-z_configuring-and-managing-virtualization.html#how-virtualization-on-ibm-z-differs-from-amd64-and-intel64_getting-started-with-virtualization-in-rhel-8-on-ibm-z "IBM Z 上的虚拟化与 AMD64 和 Intel 64 有什么不同"){.xref}。
:::
:::
::: section
::: titlepage
## []{#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#sample-vcpu-performance-tuning-scenario_optimizing-virtual-machine-cpu-performance}vCPU 性能调整场景示例 {.title}
:::
为了获得最佳 vCPU 性能，红帽建议您搭配手动
`vcpupin`{.literal}、`emulatorpin`{.literal} 和 `numatune`{.literal}
设置，如以下场景中所示：
::: itemizedlist
**起始场景**
-   您的主机有以下与硬件相关的信息：
    ::: itemizedlist
    -   2 个 NUMA 节点
    -   每个节点上的 3 个 CPU 内核
    -   每个内核有 2 个线程
    :::
    此类机器 `virsh nodeinfo`{.literal} 的输出类似于：
    ``` literallayout
    # virsh nodeinfo
    CPU model:           x86_64
    CPU(s):              12
    CPU frequency:       3661 MHz
    CPU socket(s):       2
    Core(s) per socket:  3
    Thread(s) per core:  2
    NUMA cell(s):        2
    Memory size:         31248692 KiB
    ```
-   您打算将现有虚拟机修改为具有 8 个 vCPU，这意味着它不适用于单个 NUMA
    节点。
    因此，您应该在每个 NUMA 节点上分发 4 个 vCPU，并使 vCPU
    拓扑尽可能与主机拓扑相似。这意味着，作为给定物理 CPU
    的同级线程运行的 vCPU
    应该固定到同一内核中的主机线程。详情请查看以下[*解决方案*]{.emphasis}:
:::
::: orderedlist
**解决方案**
1.  获取主机拓扑的信息：
    ``` literallayout
    # virsh capabilities
    ```
    输出应包含类似如下的部分：
    ``` programlisting
          15624346
          3906086
          0
          0
          15624346
          3906086
          0
          0
    ```
2.  [**可选：**]{.strong} 使用
    [适用的工具和实用程序](#optimizing-virtual-machine-performance-in-rhel_configuring-and-managing-virtualization.html#virtual-machine-performance-monitoring-tools_optimizing-virtual-machine-performance-in-rhel "虚拟机性能监控工具"){.link}
    测试虚拟机的性能。
3.  在主机上设置并挂载 1 GiB 巨页：
    ::: orderedlist
    1.  在主机的内核命令行中添加以下行：
        ``` literallayout
        default_hugepagesz=1G hugepagesz=1G
        ```
    2.  使用以下内容创建
        `/etc/systemd/system/hugetlb-gigantic-pages.service`{.literal}
        文件：
        ``` literallayout
        [Unit]
        Description=HugeTLB Gigantic Pages Reservation
        DefaultDependencies=no
        Before=dev-hugepages.mount
        ConditionPathExists=/sys/devices/system/node
        ConditionKernelCommandLine=hugepagesz=1G
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/etc/systemd/hugetlb-reserve-pages.sh
        [Install]
        WantedBy=sysinit.target
        ```
    3.  使用以下内容创建
        `/etc/systemd/hugetlb-reserve-pages.sh`{.literal} 文件：
        ``` literallayout
        #!/bin/sh
        nodes_path=/sys/devices/system/node/
        if [ ! -d $nodes_path ]; then
        	echo "ERROR: $nodes_path does not exist"
        	exit 1
        fi
        reserve_pages()
        {
        	echo $1 > $nodes_path/$2/hugepages/hugepages-1048576kB/nr_hugepages
        }
        reserve_pages 4 node1
        reserve_pages 4 node2
        ```
        这会从 [*node1*]{.emphasis} 保留 4 个 1GiB 巨页，并在
        [*node2*]{.emphasis} 中保留 4 个 1GiB 巨页。
    4.  使在上一步中创建的脚本可执行：
        ``` literallayout
        # chmod +x /etc/systemd/hugetlb-reserve-pages.sh
        ```
    5.  在引导时启用巨页保留：
        ``` literallayout
        # systemctl enable hugetlb-gigantic-pages
        ```
    :::
4.  使用 `virsh edit`{.literal} 命令来编辑您要优化的虚拟机的 XML
    配置，在本例中为 [*super-VM*]{.emphasis} ：
    ``` literallayout
    # virsh edit super-vm
    ```
5.  用以下方法调整虚拟机的 XML 配置：
    ::: orderedlist
    1.  将虚拟机设置为使用 8 个静态 vCPU。使用 ``{.literal}
        元素来执行此操作。
    2.  将每个 vCPU 线程固定到拓扑中镜像的对应主机 CPU
        线程。为此，请使用 ` 部分中的 `{.literal}
        元素``{=html}。
        请注意，如上面的 `virsh 功能`{.literal} 实用程序所示，主机 CPU
        线程不会在各自的内核中按顺序排序。此外，vCPU 线程应固定到同一
        NUMA 节点上提供的最高可用主机核心集合。有关表插图，请参见下面
        [**的附加资源**]{.strong} 部分。
        步骤 a. 和 b. 的 XML 配置类似：
        ``` programlisting
        ```
    3.  将虚拟机设置为使用 1 GiB 巨页：
        ``` programlisting
        ```
    4.  配置虚拟机的 NUMA 节点，使其使用主机上对应的 NUMA
        节点的内存。要做到这一点，使用
        ` 部分中的 ``{=html}
        元素：
        ``` programlisting
        ```
    5.  确定将 CPU 模式设置为 `host-passthrough`{.literal}，且 CPU 以
        `passthrough`{.literal} 模式使用缓存：
        ``` programlisting
        ```
    :::
:::
::: orderedlist
**验证**
1.  确认生成的虚拟机 XML 配置包含类似如下的部分：
    ``` programlisting
    [...]
      8