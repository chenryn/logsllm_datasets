USENIX Association
27th USENIX Security Symposium    1443
50, 61, 70, 71, 80] can mitigate cache side channels by
preventing the attacker from evicting the victim’s cache
lines. However, existing work assumes an unprivileged
user-space attacker [70, 71, 80] or a virtual machine at-
tacking its neighbors [35,44,50,61,80] and relies on priv-
ileged code to conﬁgure and manage the partitioning.
These defenses are ineffective against a compromised
OS kernel. A compromised OS kernel can assign the
same page color to the attacker and the victim or con-
ﬁgure the hardware so that the attacker and the victim
share the same cache partition. The OS kernel could even
launch cache side-channel attacks itself. Therefore, our
cache partitioning defenses must prevent malicious priv-
ileged code from manipulating cache partitions as well
as from sharing partitions with protected applications.
Instruction Tracing Side Channels
3.3
We have so far presented side-channel attacks that at-
tempt to infer data memory accesses. However, the in-
struction sequence executed by a program may also leak
information about application secrets if there is a con-
trol dependence on data that the application wishes to
keep secret i.e., an implicit ﬂow [32]. A compromised
OS could exploit side channels to trace instruction ex-
ecution in a number of ways.
If the shielding system
neglects to hide an application’s saved program counter
when an interrupt, trap, or system call occurs, the OS
could conﬁgure the processor timer to mimic single-step
execution [38] and read the program counter as each in-
struction is executed. If that is not possible, the OS could
use a page fault or cache side-channel attack on applica-
tion code memory instead of (or in addition to) appli-
cation data memory. Previous work has used page fault
side channels [73] to infer when instructions are executed
and, from that, to infer secret data from an application.
4 Virtual Ghost Improvements
Apparition extends Virtual Ghost. As Figure 1 shows,
Virtual Ghost [26] is a compiler-based virtual machine,
built from SVA [28], interposed between the software
stack and the hardware. We present Virtual Ghost’s de-
sign and then describe two performance improvements
we made to Virtual Ghost that are present in Apparition.
4.1 Design
The OS kernel on a Virtual Ghost system is compiled to
a virtual instruction set (V-ISA) [26]. The Virtual Ghost
Virtual Machine translates virtual instructions to the na-
tive instruction set (N-ISA) for execution. Virtual Ghost
can sign and cache native code translations to provide
Figure 1: Virtual Ghost Architecture
ahead-of-time compilation, or it can translate code at sys-
tem install time, boot time, or just-in-time. Virtual Ghost
forces all OS kernel code to be in V-ISA form. Applica-
tion code can be in either V-ISA or N-ISA form.
The V-ISA consists of two sets of instructions [26].
The SVA-Core instructions are based on the LLVM Inter-
mediate Representation (IR) [47], which uses static sin-
gle assignment (SSA) form [30] to enable efﬁcient static
analysis of code. However, the original LLVM IR cannot
support a complete OS kernel, so SVA provides a sec-
ond set of instructions, SVA-OS [29], which allows the
OS kernel to conﬁgure privileged hardware state, e.g.,
the MMU, and manipulate program state, e.g., context
switching. The SVA V-ISA enables Virtual Ghost [26]
to use compiler techniques to enforce security policies.
Virtual Ghost can add run-time checks while translat-
ing code from the V-ISA to the N-ISA; the SVA-OS in-
structions can help enforce security policies by restrict-
ing hardware conﬁguration and state manipulation.
Via compiler instrumentation and run-time checks,
Virtual Ghost can provide applications with the func-
tionality they need to protect themselves from a compro-
mised OS kernel [26]. One such feature is ghost memory.
For each process, Virtual Ghost divides the virtual ad-
dress space into four regions as Figure 2 depicts. There
is user-space memory that an application and the OS ker-
nel can use to communicate; both can read and modify
it. There is also kernel memory, which the OS kernel can
read and write. Unlike existing systems, Virtual Ghost
prevents user-space memory and kernel memory from
being executable; they do not contain executable native
code. Virtual Ghost adds a new ghost memory region that
only the application can read and modify and can there-
fore use to hold sensitive data. Finally, there is the Vir-
tual Ghost VM memory region in which Virtual Ghost
stores its own data structures, the native code transla-
tions it creates for V-ISA code, and the code segments
of N-ISA application code. Pages containing native code
are mapped as execute-only while all other Virtual Ghost
VM memory regions are inaccessible to applications and
the kernel.
With these features, programmers can write ghosting
applications for Virtual Ghost systems that actively pro-
tect themselves from the OS kernel: applications can
1444    27th USENIX Security Symposium
USENIX Association
Figure 2: Virtual Ghost Address Space Layout
Figure 3: Address Space Layout Seen by Intel MPX
store all their data and encryption keys inside ghost mem-
ory to prevent theft and tampering, and they can use en-
cryption and digital signatures to maintain data conﬁden-
tiality and integrity when sending data into or receiving
data from the operating system’s I/O systems [26]. Since
Virtual Ghost generates all the native code that is exe-
cuted on the system [26], it can place that code into the
Virtual Ghost VM memory and protect its integrity from
both the OS kernel and errant applications.
Virtual Ghost employs SFI [68] to protect the con-
ﬁdentiality and integrity of ghost memory and Virtual
Ghost VM memory [26].
It adds a set of bit-masking
and predicated instructions before every load and store
within the OS code to ensure that every pointer used in a
load or store operation points into either user- or kernel-
space memory. Additionally, by placing interrupted pro-
gram state in the Virtual Ghost VM memory during in-
terrupt, trap, and system call dispatch, Virtual Ghost can
protect saved processor state using SFI. However, as Vir-
tual Ghost allows the OS kernel to read page tables, it
does not place them in Virtual Ghost VM memory. In-
stead, it maps page table pages as read-only memory by
the OS and makes the OS use SVA-OS instructions to
modify them, thereby preserving the integrity of the page
table pages. Finally, Virtual Ghost employs control ﬂow
integrity (CFI) [7] to ensure that the SFI instrumentation
is not bypassed.
We have enhanced the performance of Virtual Ghost
with two new optimizations, which we include in Ap-
parition. First, our prototype uses the Intel MPX bounds
checking instructions [4] to implement faster SFI. Sec-
ond, we refactored how Virtual Ghost protects page table
pages to reduce the number of serializing instructions.
Intel Memory Protection Extensions
4.2
Intel’s MPX [4] was originally designed to accelerate
memory safety enforcement via hardware support. MPX
enhances the processor with four bounds registers, each
of which maintains the lower and upper bounds of a sin-
gle memory object. Bounds checking instructions check
a virtual address against either the lower or upper bound
of the speciﬁed bounds register and generate a trap if the
virtual address does not reside within the bounds.
Virtual Ghost uses SFI to ensure that the kernel does
not access ghost memory and VM memory regions while
allowing access to user- and kernel-memory regions. To
implement SFI using MPX, we treat the combined user-
and kernel-space regions as a single large memory ob-
ject; the Virtual Ghost VM can then replace SFI’s bit-
masking and predicated instructions before every load
and store within the kernel with MPX bounds checking
instructions.
One challenge with efﬁciently using MPX is that the
user- and kernel-memory regions are not contiguous.
Furthermore, since their current placement enables the
compiler to use more efﬁcient addressing modes on x86-
64, moving them to make them contiguous could nega-
tively impact performance.
To address this issue, each run-time check before
a load or store ﬁrst subtracts the length of user-space
memory (denoted gstart) from the address that is to be
checked. This makes the user- and kernel-space regions
appear contiguous (as Figure 3 shows). MPX bounds
checks can then be used by setting the base and bound
registers to the remapped values of the start of kernel-
space and the end of user-space memory. If the access
is outside of kernel and user space, the processor gener-
ates a trap into the Virtual Ghost VM which handles the
out-of-bounds error.
4.3 SVA Internal Direct Map
A direct map is a range of virtual pages that are mapped
to consecutive physical addresses, i.e., the ﬁrst page to
the ﬁrst physical frame of memory, the second page to
the second physical frame, and so forth. With a strate-
gically placed direct map, an OS kernel can quickly ﬁnd
a virtual address mapped to a speciﬁc physical address
by applying a simple bitwise OR operation to the phys-
ical address [15]. Operating systems such as Linux and
FreeBSD use the direct map to write to page table pages.
Since Virtual Ghost must control how the processor’s
MMU is conﬁgured [26], it originally mapped page ta-
ble pages in the OS kernel’s direct map for read-only ac-
cess, and when an SVA-OS instruction needed to update
the page tables, it temporarily cleared the x86 CR0.WP
bit to disable the MMU’s enforcement of write protec-
tion, thereby allowing the Virtual Ghost VM to modify
the page table.
We have found that this method incurs signiﬁcant
overhead as ﬂipping CR0.WP is a serializing operation
that interferes with instruction-level parallelism [4]. This
caused Virtual Ghost’s page table updates to be much
USENIX Association
27th USENIX Security Symposium    1445
slower than those of a conventional OS kernel, decreas-
ing the speed of process creation and termination, de-
mand paging, and the execution of new programs.
Apparition eliminates
the need for modifying
CR0.WP by placing a direct map of physical memory
within the Virtual Ghost VM memory that provides write
access to all physical frames, including page table pages.
When Virtual Ghost needs to update a PTE, it simply
modiﬁes the entry via its internal direct map instead of
ﬂipping CR0.WP to toggle the write protection on the
OS kernel’s direct map. Since this internal direct map
is within Virtual Ghost VM memory, the existing SFI
mechanism prevents the OS kernel from altering it.
5 Side-Channel Mitigations
We now present our design for mitigating page table,
LLC, and instruction tracing side-channel attacks.
5.1 Page Table Side Channels
To mitigate the page table side-channel attacks described
in Section 3.1, a system must protect both the conﬁden-
tiality and integrity of the page table pages. Apparition
must therefore enforce several restrictions.
Page Table Restrictions Apparition must prevent the
OS from modifying PTEs that map ghost memory. Oth-
erwise, the OS can unmap ghost memory to track the
program’s memory accesses via page faults. Likewise,
Apparition must ensure that page frames used for ghost
memory are not mapped into virtual memory regions that
the OS can access; Virtual Ghost already enforces these
constraints [26].
Apparition must additionally prevent the OS from
reading PTEs (and therefore the corresponding page ta-
ble pages) that map ghost memory. This prevents the OS
from observing updates to PTEs caused by ghost mem-
ory allocation, deallocation, and swapping and from in-
ferring information when the processor sets the accessed
or dirty bits in PTEs for ghost memory.
To enforce these restrictions, we exploit the hier-
archical, tree-like structure of x86 page tables. Vir-
tual Ghost allows the OS kernel to directly read all
PTEs but forces the kernel to modify PTEs with the
sva update mapping() SVA-OS instruction [26]. This
ensures that the OS does not gain access to ghost mem-
ory by altering the page table. Apparition disables all
OS accesses to the subtree of the page table that maps
ghost memory by removing read/write permission to the
page table pages in this subtree from the OS’s direct
map; only the Apparition MMU instructions can read
and write PTEs mapping ghost memory via the new SVA
internal direct map described in Section 4.3. This ensures
the integrity and conﬁdentiality of ghost memory.
Swapping Apparition’s ghost memory swapping in-
structions must prevent the OS from selecting which
ghost memory pages to swap out and in. Instead, the se-
cure swap-out instruction should randomly select a page
to encrypt and swap out. The secure swap-in instruc-
tion should swap in all the pages that have been swapped
out for that process (as opposed to swapping in a sin-
gle page). This prevents the OS from learning which
pages the process accesses. However, it also restricts
the size of any single application’s ghost memory to a
fraction of physical memory; otherwise, it may be im-
possible to swap in all swapped-out ghost pages, caus-
ing the process to fail to make forward progress. Since
the OS retains control over user-space memory, it should
swap that memory out ﬁrst before swapping out ghost
memory; swapping out user-space memory imposes no
restrictions on the OS.
5.2 Page Allocation Side Channels
By protecting the conﬁdentiality and integrity of page ta-
ble pages, our Apparition design protects applications
from side channels that ﬂow through the page table
pages. However, in addition to these protections, our Ap-
parition design must ensure that the application does not
leak information through its ghost memory allocation be-
havior. Otherwise, a compromised OS can use this new
side channel in lieu of existing page table side channels.
Virtual Ghost [26] requires the OS to provide a call-
back function that the Virtual Ghost VM can use to re-
quest physical frames from the OS kernel. This design
decouples resource management from protection: the OS
decides how much physical memory each process uses
while Virtual Ghost protects the integrity and conﬁden-
tiality of the memory. However, Virtual Ghost imposes
no restrictions on when the Virtual Ghost VM requests
physical memory from the OS. As a result, a compro-
mised OS kernel can use the physical memory callback
like a paging side channel. For example, if the Virtual
Ghost VM lazily maps physical memory to ghost vir-
tual addresses on demand and requests a single memory
frame from the OS when it needs to map a ghost page,
then the OS can infer the application’s paging behavior.
To mitigate this side channel, in Apparition we dis-
able demand paging on ghost memory. By doing so, we
convert this side channel into a memory allocation side
channel from which the OS can only infer memory al-
location size; this leaks much less information about an
application’s secret data. To the best of our knowledge,
no existing work exploits such memory allocation side
1446    27th USENIX Security Symposium
USENIX Association
Name
void allocmem(int num, uintptr t frames[])
void freemem(int num, uintptr t frames[])
Description
Allocate num physical memory frames and store the addresses to them in
the speciﬁed array.
Free num physical memory frames whose addresses are stored within the
speciﬁed array.
Table 1: Physical Memory Allocation Callbacks
channels. To obfuscate the memory allocation size in-
formation, we redesign the physical memory allocation
callback and impose new restrictions on how Apparition
uses it. Table 1 shows the new design. The Apparition
VM calls allocmem() to request a speciﬁed number of
frames and freemem() to free frames. In our design, the