Start: 19 End:21 bab
Start: 21 End:23 bab
Match count: 6
Be careful with capturing groups inside a
lookahead or lookbehind atomic group
You learned to use capturing groups inside lookahead or lookbehind patterns in the
preceding examples. However, you must remember that lookaround expressions are zero-
width atomic groups. The regex engine exits from these groups as soon as an assertion is
evaluated to true or false. Due to this fact, there is no backtracking inside these groups.
Consider the following three regular expressions. The first one is without any lookahead or
atomic group, the second regex uses a lookahead expression, and the third regex uses an
atomic group. Note that in each of the regex patterns, we use a capturing group to match
and capture zero or more word characters inside the outer group:
#(?:(\w*))\w*_\1
#(?=(\w*))\w*_\1
#(?>(\w*))\w*_\1
[ 107 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
Suppose that we apply the preceding three regex patterns against the following input:
#abc_abc
The first regex, #(?:(\w+)).*_\1, will find a successful match with group 1 as "abc".
Next, it matches _ and back-references \1 to complete the match. Since the capturing group
(\w*) initially matches the complete input, "abc_abc", the regex engine backtracks
multiple times to make this a successful match.
The second regex will fail to match because (\w+) inside the lookahead will match and
capture "abc_abc", and when the regex engine exits the lookahead group, it is not able to
find a match with .*_\1, as there is no further input and the engine won't backtrack to
complete the match like it does in the first regex.
The third regex with an atomic group will also fail to match due to the same reason; the
regex engine won't backtrack after matching the string inside an atomic group.
Lookbehind limitations in Java regular expressions
Like many other regular expression engines, the Java regex engine does not allow a
variable-length text without an obvious maximum length match in the lookbehind regex
pattern. This means that we cannot use the * or + quantifiers in a lookbehind pattern.
However, the Java regex engine allows for limited or finite repetition in a lookbehind regex.
This gives us a workaround for doing so in Java regular expressions by using limiting
quantifiers in lookbehind expressions.
This means that we cannot use the following lookbehind regex to check filenames ending
with extensions:
(?<=\w\.\w+)$
However, we could change the preceding pattern to the following with a finite repetition,
and now this pattern will be allowed by the Java regex engine:
(?<=\w\.\w{1,99})$
However, it limits the number of word characters in the lookbehind after the dot to be from
1 to 99 instead of open-ended one or more word characters, as is the case with the +
quantifier. However, you should use such a feature with caution and check the performance
of the resulting regular expression. The Java lookbehind implementation also had quite a
few bugs in the earlier versions. Some of these bugs have been resolved but one can still get
unexpected results while using complex lookbehind regular expressions in Java.
[ 108 ]
Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups
Java 9, however, allows regex patterns without an obvious maximum-length restriction in
lookbehind assertions. This will allow programmers to use the lookbehind regex patterns
without any maximum length match, such as the following regex in the previous example:
(?<=\w\.\w+)$
Summary
In this chapter, we learned zero-width assertions and how they are crucial for solving some
important matching problems. We discussed the boundary matcher, \G, and its usefulness
in solving some problems. We discovered the idea behind atomic groups and understood
how they can improve the overall regex performance. Then, we covered all the important
lookahead and lookbehind patterns. We covered some interesting matching, validation, and
splitting problems that are solved using lookarounds.
In the next chapter, we will continue to learn advanced concepts of Java regular
expressions, such as union and intersection within character classes, and negated character
classes.
[ 109 ]
7
Understanding the Union,
Intersection, and Subtraction of
Character Classes
Some regular expression engines allow composite character classes, or character classes
inside other character classes. The Java regular expression engine also supports many of
these features, and we will discuss these features in this chapter.
We will cover the following topics in this chapter:
The union of character classes
The intersection of character classes
The subtraction of character classes
The advantages of using composite character classes
The union of character classes
The union of character classes will match a character that would be matched by any of the
composing character classes. Essentially, this is the definition of the union operation in
general. In regular expressions, it is possible to create unions of character classes by simply
writing a character class inside another.
You may remember that character classes open with the [ character and close with the ]
character, and we can list characters and character ranges between the opening and closing
brackets.
Understanding the Union, Intersection, and Subtraction of Character Classes
In addition to those, we can use other character sets inside the brackets, and the resulting
set will be the union of all these character classes. This way, there is no union operator to
create the composition of these character classes; we just simply write them inside each
other.
For example, consider the following composite character class:
[A-D[PQR]]
This matches any character in the range of A to D or any single character P, Q, or R. This
regular expression can also be written as follows:
[A-DPQR]
We can also create a union of more than two character classes, such as as in the following
regular expression:
[A-D[P-S][X-Z]]
This matches any character in the range of A to D, any character in the range of P to S, or any
character in the range from X to Z. This regular expression can also be written as follows:
[A-DP-SX-Z]
The union of character classes can also be used with a negated inner character class, and this
is where character class unions really start to shine and give us extra value. We get to see a
good use of the union operation only when we use the union of various character classes
with a negated character class.
Let's consider, for example, the following code listing on the union with a negated character
class:
package example.regex;
import java.util.regex.*;
public class UnionExample
{
public static void main(String[] args)
{
final String re = "[#@.[^\\p{Punct}\\s]]";
final String[] arr = new String[] {
"A", "#", "@", "1", "5", " ", "\n", ":", ".", "a", "%", "-", "3"
};
for (String s: arr)
{
System.out.printf("[%s] %s%n", s,
(s.matches(re) ? "matches" : "does not match"));
[ 111 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
}
}
}
This regex has the following negated character class:
[^\\p{Punct}\\s]
The preceding negated character class allows any character that is not a punctuation and
not a space character. Now, suppose that we want to allow a few selected punctuation
characters, @, #, and ., or in other words, the [@#.] character class. In this scenario, the
union comes handy. We make a composite character class that uses a union of both these
cases, as follows:
[#@.[^\\p{Punct}\\s]]
Now, this composite character class will allow the [@#.] characters, or any character that is
not a punctuation and not a space character.
Once we compile and run the preceding code, we'll get the following output:
[A] matches
[#] matches
[@] matches
[1] matches
[5] matches
[ ] does not match
[
] does not match
[:] does not match
[.] matches
[a] matches
[%] does not match
[-] does not match
[3] matches
You can see the output of "matches" for all the character sets that are not included inside
our negated character class or allowed by the [#@.] character class. It returns "does not
match" for all other cases.
[ 112 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
The intersection of character classes
The intersection operation on character classes results in a composite class that contains
every character allowed by all of its operand (inner) classes or, in other words, matches
characters that belong to all the character classes in the composite character class pattern.
The intersection operator is as follows:
&&
For example, consider the following composite character class using the && operator:
[A-Z&&[PQR]]
This matches any character that is in the range of A to Z and is one of the single P, Q, or R
characters. However, the preceding regular expression can also be simply written as
follows:
[PQR]
The following composite character class using intersection matches the digits, 5 and 6, since
only these two digits belong to all the three character classes:
[1-7&&[3-6]&&[5-8]]
To see this regex in action, let's use this complete code:
package example.regex;
import java.util.regex.*;
public class IntersectionExample
{
public static void main(String[] args)
{
final Pattern p = Pattern.compile("[1-7&&[3-6]&&[5-8]]");
for (int i=0; i<10; i++)
{
String s = String.valueOf(i);
Matcher m = p.matcher(s);
System.out.printf("[%s] %s%n", s,
(m.matches() ? "matches" : "does not match"));
}
}
}
[ 113 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
When we compile and run the preceding code, we will see the following output:
[0] does not match
[1] does not match
[2] does not match
[3] does not match
[4] does not match
[5] matches
[6] matches
[7] does not match
[8] does not match
[9] does not match
As you can see, it shows "matches" only for the digits, 5 and 6.
Let's take another example, which involves matching a non-whitespace character that is not
a Unicode letter. We know we can use the following regex using a positive lookahead:
(?=\S)\P{L}
We can also use an intersection operation to write this example, as follows:
[\\S&&[\\P{L}]]
Due to the use of the && operator here, it matches a character that satisfies both the
properties, \S (non-whitespace) and \P{L} (non-letters).
Note that the inner square brackets are optional when not using a negated character class in
an intersection operation. Hence, the preceding regex can also be written as follows:
[\\S&&\\P{L}]
Similarly, to match an uppercase Greek letter, we can use the intersection of the following
two classes:
\p{InGreek}: This matches a character in the Greek block
\p{Lu}: This matches an uppercase Unicode letter
By combining these two character classes with intersection, we can make a single composite
character class, as follows:
[\p{InGreek}&&[\p{Lu}]]
[ 114 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
To test the preceding regex, let's pick some Greek letters and write a simple Java code, such
as the following, to test our regex against the selected Greek letters:
package example.regex;
import java.util.regex.*;
public class UppercaseGreekIntersectionExample
{
public static void main(String[] args)
{
final Pattern p = Pattern.compile("[\\p{InGreek}&&[\\p{Lu}]]");
final String[] arr = new String[] {
"Γ", "Δ", "Θ", "Ξ", "Π", "Σ", "Φ", "α", "β", "γ", "δ", "ε", "A", "P",
"e", "r"
};
for (String s: arr)
{
Matcher m = p.matcher(s);
System.out.printf("[%s] %s%n", s,
(m.matches() ? "matches" : "does not match"));
}
}
}
When we run the preceding class, it prints the following output:
[Γ] matches
[Δ] matches
[Θ] matches
[Ξ] matches
[Π] matches
[Σ] matches
[Φ] matches
[α] does not match
[β] does not match
[γ] does not match
[δ] does not match
[ε] does not match
[A] does not match
[P] does not match
[e] does not match
[r] does not match
As you can see, "matches" is only printed for the uppercase Greek letters. For all the other
letters, it prints "does not match".
[ 115 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
The subtraction of character classes
Suppose we have to match characters that belong to one class but not to another in a
composite character class pattern. There is no separate operator for the subtraction
operation. Subtraction is performed by using the intersection operator, &&, and a negated
inner character class.
A regular expression is usually more readable if we write the larger set in
front and the one we want to subtract from it after the && operator.
For example, consider the following composite character class:
[0-9&&[^3-6]]
It will match the digits, 0 to 9, except the digits, 3 to 6. This character class can also be
written as a union of two character classes:
[[0-2][7-9]]
We can also just use a simple character class, as follows:
[0-27-9]
In order to match all the English consonant uppercase letters, we can subtract five vowels
from uppercase letters, such as in the following regex:
[A-Z&&[^AEIOU]]
We can also reverse the order of the two sets used in the preceding regex and use the
following regex:
[[^AEIOU]&&A-Z]
Suppose we want to match all punctuation characters except four basic math operators: +, -,
*, and /. We can use the following composite character class using the subtraction
operation:
[\p{Punct}&&[^+*/-]]
[ 116 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
Here is a test class that tests the preceding subtraction character class:
package example.regex;
import java.util.regex.*;
public class SubtractionExample
{
public static void main(String[] args)
{
final Pattern p = Pattern.compile("[\\p{Punct}&&[^+*/-]]");
final String[] arr = new String[] {
"!", "@", "#", "$", "%", "+", "-", "*", "/", "1", "M", "d"
};
for (String s: arr)
{
Matcher m = p.matcher(s);
System.out.printf("[%s] %s%n", s,
(m.matches() ? "matches" : "does not match"));
}
}
}
This program produces the following output when we run it after compilation:
[!] matches
[@] matches
[#] matches
[$] matches
[%] matches
[+] does not match
[-] does not match
[*] does not match
[/] does not match
[1] does not match
[M] does not match
[d] does not match
As is evident from this output, it allows all the punctuation characters except the four listed
math operators.
[ 117 ]
Understanding the Union, Intersection, and Subtraction of Character Classes
Why should you use composite character
classes?
We should use composite character classes for the following reasons:
To create new custom character classes from predefined Unicode blocks. For
example, to match all the letters in an Arabic Unicode block, we can use the
following:
[\p{InArabic}&&\p{L}]
To avoid potentially slower lookahead or lookbehind patterns by using the
intersection or subtraction operation on multiple character classes.
To enhance the readability of the regular expression.
Summary
In this chapter, we discussed composite and inner character classes. We found out how we
can use the union, intersection, and subtraction operations to combine simple character
classes and make a completely different character class to suit our requirements. You
learned some good usage patterns of composite character classes for solving tricky
problems. Note how we could avoid more complex lookahead and lookbehind assertions