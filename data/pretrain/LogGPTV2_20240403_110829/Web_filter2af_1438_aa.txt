# 手把手教你打造Web应用静态安全测试工具
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：飞蝠@阿里安全
利用漏洞清除债务，盗取数据，一键获取XX游戏的所有账户登陆权限，这些看似爽文里的“骚操作”其实早就在现实中上演。
2013年，一个自称RedHack的黑客小组利用土耳其政府网站的Web漏洞，清除了相关人员在政府机构的债务数据。2015年，某安全研究人员公开称，可以通过特定的注入漏洞攻破某知名汽车的网站，获得管理权限，并窃取用户数据。2019年，拥有超过3.5亿用户的在线游戏“XX垒之夜”被爆出一个SQL注入漏洞，可以让攻击者访问所有用户帐户。
这些都是Web应用程序的漏洞，Web应用程序已经广泛应用社交网络、网上支付等各个领域，真正影响人们的生活，因此Web应用中存在的各种安全漏洞越来越引起人们的重视。
为赶在恶意人员之前发现并修复Web应用程序中的安全漏洞，安全人员需要利用各种安全测试技术识别并修复Web应用程序中的缺陷。静态应用安全测试（Static
Application Security Testing
,SAST）由于不需要运行被测程序，具有覆盖率高、自动化程度高、可以在开发生命周期早期使用等特点，是目前被业界广泛采用的应用安全测试技术之一。但是静态应用安全测试作为一种针对应用安全缺陷的自动化检测方法，本质上处理的是一个不可判定问题，理论上不可能同时做到没有误报也没有漏报。
大量的误报会使人对分析工具失去信心，而漏报会造成程序具有较高安全水位的假象，很多情况下减少误报和减少漏报就是一对矛盾体。为尽量减少不必要的漏报和误报，往往需要运用更复杂的分析技术，意味着更高的复杂度，因此分析的精度与分析的速度往往也是一对不可兼得的矛盾体。实用的静态应用安全测试工具需要根据分析目标和应用场景在误报、漏报、效率、易用性、可扩展性之间达到一个合理的平衡。
## 哪些缺陷类型需要“关心”
程序分析工具都有其针对的“分析目标程序属性”（target program
properties），通俗地来说“分析目标程序属性”就是分析工具“关心哪些缺陷类型”。当前许多通用的静态缺陷检测工具往往强调“大而全”，强调能够适应不同的扫描场景，强调能够覆盖更多的缺陷类型，实际上这里存在误区。实际中的程序千变万化，对不同类型的程序,在不同的场景下,人们关注的程序属性不一样，对分析工具的各项要求也不一样。静态分析都会引入某种程度上的抽象，最有效的抽象方法需要充分利用分析目标程序属性本身的特点。明确应用场景和分析目标程序属性（target
program properties）是设计真正实用分析工具的首要任务。
Web应用静态安全测试的主要应用场景在开发阶段而不是开发完成之后，它的重要优势是能够在早期就检测出源码中的安全漏洞，从而大大降低修复安全问题成本，成熟的大型软件开发组织通常将其融入DevSecOps流程中。这更加要求分析工具能够在漏报、误报和效率之间达到合理的平衡，避免不必要地打扰和减缓正常开发流程。
Web应用静态安全测试的分析目标程序属性是常见的Web应用程序安全风险，核心关注的就是OWASP Top 10中列出的安全风险。下图是最新发布的OWASP
Top 10Web应用安全风险：
Web应用程序安全风险和空指针解引用、数组越界、资源泄漏、数值溢出等内存安全程序属性有显著区别。Web应用程序安全风险从程序语义上看更加高层（更加靠近应用层），内存安全则更加底层，更加关注程序中变量的具体取值情况。为了开发真正实用的分析工具，需要充分利用“分析目标程序属性”的特点，选择能够达到最佳平衡的分析算法和策略。
## Web应用安全风险程序属性建模
为了保证静态应用安全测试工具能够无二义性地识别和分析目标缺陷类型，我们将目标缺陷类型的分析配置描述为静态应用安全测试工具能够识别的“规则”。易用且可扩展性好的Web应用静态安全测试工具都应该做到规则和引擎分离。规则描述结构设计的过程本质上是对Web应用程序安全风险知识进行建模的过程。OWASP
Top
10列表中的Web应用安全风险可分为两类：一类是和非正常数据流相关的安全风险，如注入、敏感信息泄露、XML外部实体、跨站脚本和不安全的反序列化。一类是和非正常控制流或状态相关的安全风险，如失效的身份认证、失效的访问控制、安全配置错误、使用含有已知漏洞的组件不足的日志和监控。我们采用两种不同的规则描述模型来支持上述两类Web应用安全风险：污染传播模型和状态机模型。
### 污染传播分析
污染传播分析又被称作信息流分析（information-flow
analysis），它是用于追踪程序中特定数据传播和依赖的一种数据流分析技术。污染传播分析是Web应用安全缺陷检测的主要方法之一，其基本思想是通过对不可信的源头（source）引入的数据进行污染标记，跟踪被标记的污染数据在程序中的传播，若污染数据在进入敏感操作（sink）前未经过恰当的净化操作（sanitizer），则表明存在潜在的安全缺陷。
污染传播规则中的配置包括source、sanitizer、sink、安全类型等。安全类型指的是对于当前目标程序属性来说认为肯定不会污染的类型，例如对于注入类安全风险可以认为所有的枚举类型、布尔类型、日期类型、浮点类型等都是安全的。
对于常见的web注入安全风险，我们的解法是，提供统一的“安全方法”给开发人员调用，这些“安全方法”也是静态分析工具能够识别的统一的净化操作。污染传播分析沿控制流在每个程序位置上计算当前污染变量集合，并在污染变量间建立污染传播依赖关系。
### 状态机分析
理论上来说，Web应用安全缺陷检测所检查的缺陷类型都属于时序安全属性（temporal safety