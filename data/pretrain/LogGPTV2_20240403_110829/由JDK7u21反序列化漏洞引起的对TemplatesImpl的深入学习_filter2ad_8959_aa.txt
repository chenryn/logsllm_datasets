# 由JDK7u21反序列化漏洞引起的对TemplatesImpl的深入学习
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近在分析JDK7u21反序列化漏洞，对命令执行载体`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`的利用点不太明白。除了JDK7u21，`TemplatesImpl`在很多反序列化漏洞中都被利用了，所以想要深入探究下它到底是做什么用的，有什么特性被利用。接下来本文将从这两个问题进行探索学习。
## 一、了解TemplatesImpl
###  1、XSLT
**在开始前首先了解下[XSLT](https://www.runoob.com/xsl/xsl-transformation.html)：**
XSL 指扩展样式表语言（EXtensible Stylesheet Language）, 它是一个 XML 文档的样式表语言，类似CSS之于HTML；  
XSLT（Extensible Stylesheet Language Transformations）是XSL转换语言，它是XSL的一部分，用于转换
XML 文档，可将一种 XML 文档转换为另外一种 XML 文档，如XHTML；
**简化版[XSLT实例](https://www.runoob.com/try/tryxslt.php?xmlfile=cdcatalog&xsltfile=cdcatalog_ex1)：**
我们从一个例子来了解下XSLT，将XML转为HTML格式展示。  
XML：cdcatalog.xml，保存了文章数据包括文章标题、作者等。
     -->
        Empire Burlesque
        Bob Dylan
        USA
        Columbia
        10.90
        1985
        Hide your heart
        Bonnie Tyler
        UK
        CBS Records
        9.90
        1988
XSL：cdcatalog.xsl  
XSL 样式表的根元素是 `` 或 ``；  
``元素定义了输出文档的格式；  
XSL 样式表由一个或多个被称为模板（template）的规则组成， 元素用于构建模板。
                    My CD Collection
                            Title
                            Artist
转换结果如下，读取xml的元素并展示为html格式：
Title | Artist  
---|---  
Empire Burlesque | Bob Dylan  
Hide your heart | Bonnie Tyler  
###  2、javax.xml.transform.Templates
TemplatesImpl实现了`javax.xml.transform.Templates`接口，`javax.xml.transform`属于JAXP（Java
API for
XMLProcessing，提供解析和验证XML文档的能力），是一个处理XSL转换（XSLT）的包，定义了用于处理转换指令以及执行从源到结果的转换的API。`javax.xml.transform.Templates`是用来处理XSLT模板的，它只定义了两个方法：
Modifier and Type | Method and Description  
---|---  
`Properties` |  `getOutputProperties()` 获取xsl:output元素相对应的属性。  
`Transformer` |  `newTransformer()` 为此Templates对象创建一个新的转换上下文。  
###  3、XSLTC和Translets
TemplatesImpl在`com.sun.org.apache.xalan.internal.xsltc`包下，xalan是Apache的一个项目，是XSLT处理器。
XSLTC指xslt compiler或xslt
compiling，可以把XSLT文件编译成一个或者多个Java的class文件，通过这种方式可以加速xsl的转换速度。
**这些class或者class的集合被称为Translets，他们被转换时自动会继承AbstractTranslet。**  
利用Xalan命令行工具（注意使用jdk1.8以前版本）将XSLT文件转为class：
    java com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile cdcatalog.xsl
执行命令后会在文件夹下生成一个class文件：
###  4、TemplatesImpl类解读
TemplatesImpl主要是通过获取Translet的Class或字节码来创建 XSLTC
模板对象。根据上面第3点的学习这里不难理解，XSLTC生成的Translets，需要转为模板对象，可以用TemplatesImpl定义和处理。
    public final class TemplatesImpl implements Templates, Serializable
####  4.1、静态内部类TransletClassLoader：
TemplatesImpl通过获取Translet的Class或字节码来创建 XSLTC
模板对象，需要在运行时加载class，因此其在内部自定义了一个静态类TransletClassLoader用来加载Translet的Class对象，并且重载了loadClass和defineClass方法。
我们知道ClassLoader的loadClass通过一个类名全称返回一个Class类的实例；  
而defineClass通过接收一组字节，然后将其具体化为一个Class类的实例，它一般从磁盘上加载一个文件，然后将文件的字节码传递给JVM，通过JVM（native
方法）对于Class的定义将其实例化为一个Class类的实例。
    static final class TransletClassLoader extends ClassLoader {
        private final Map _loadedExternalExtensionFunctions;
         TransletClassLoader(ClassLoader parent) {
             super(parent);
            _loadedExternalExtensionFunctions = null;
        }
        TransletClassLoader(ClassLoader parent,Map mapEF) {
            super(parent);
            _loadedExternalExtensionFunctions = mapEF;
        }
        public Class loadClass(String name) throws ClassNotFoundException {
            Class ret = null;
            // 当SecurityManager未设置且FSP关闭时，_loaddexternalextensionfunctions将为空
            if (_loadedExternalExtensionFunctions != null) {
                ret = _loadedExternalExtensionFunctions.get(name);
            }
            if (ret == null) {
                // 调用super.loadClass，通过类全称获取Class类实例
                ret = super.loadClass(name);
            }
            return ret;
         }
        // 从外部类访问protected修饰的父类方法。
        Class defineClass(final byte[] b) {
            // 调用super.defineClass，通过字节码来获取Class类实例
            return defineClass(null, b, 0, b.length);
        }
    }
####  4.2、属性说明：
修饰及类型 | 属性名、属性值及说明  
---|---  
public final static String | DESERIALIZE_TRANSLET =
“jdk.xml.enableTemplatesImplDeserialization”  
private static String | ABSTRACT_TRANSLET =
“com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet”
所有translets的超类名。这里的Translet类都需要继承AbstractTranslet  
private String | _name = null 主类的名称或默认名称(如果未知)  
private byte[][] | _bytecodes = null 包含Translet类和任何辅助类的实际类定义的字节码  
private Class[] | _class = null 包含Translet类定义。这些是在创建模板或从磁盘读取模板时创建的  
private int | _transletIndex = -1 主Translet类在数组_class[]和_bytecodes中的索引  
private transient Map> | _auxClasses = null 包含辅助类定义的列表  
private Properties | _outputProperties translet的output属性  
private int | _indentNumber 要为输出缩进添加的空格数  
private transient URIResolver | _uriResolver = null
URIResolver被传递给所有的transformer  
private transient | ThreadLocal _sdom = new ThreadLocal();  
private transient | TransformerFactoryImpl _tfactory = null
该模板对象所属的TransformerFactory的引用  
private transient boolean | _overrideDefaultParser 确定系统默认解析器是否可以被重写的标志  
private transient String | _accessExternalStylesheet =
XalanConstants.EXTERNAL_ACCESS_DEFAULT 协议允许样式表处理指令、Import和Include元素设置外部引用  
####  4.3、构造方法解析：
TemplatesImpl提供了两个有参构造方法都是protected，如果TemplatesImpl要实例化，需要通过内部方法进行调用。
构造方法1：通过字节码创建template对象，必须提供translet和辅助类的字节码，以及主translet类的名称。
    protected TemplatesImpl(byte[][] bytecodes, String transletName, Properties outputProperties, int indentNumber, TransformerFactoryImpl tfactory)
    {
        _bytecodes = bytecodes;
        init(transletName, outputProperties, indentNumber, tfactory);
    }
构造方法2：通过translet类创建XSLTC模板对象。
    protected TemplatesImpl(Class[] transletClasses, String transletName, Properties outputProperties, int indentNumber, TransformerFactoryImpl tfactory)
    {
        _class     = transletClasses;
        _transletIndex = 0;
        init(transletName, outputProperties, indentNumber, tfactory);
    }
####  4.4、Templates接口方法实现：
首先是Templates接口的两个方法：newTransformer和getOutputProperties，newTransformer会调用TransformerImpl有参构造方法。
    // 实现JAXP's Templates.newTransformer()
    public synchronized Transformer newTransformer()
        throws TransformerConfigurationException
    {
        TransformerImpl transformer;
        //调用TransformerImpl构造函数创建一个TransformerImpl实例
        transformer = new TransformerImpl(getTransletInstance(), _outputProperties,
            _indentNumber, _tfactory);
        if (_uriResolver != null) {
            transformer.setURIResolver(_uriResolver);
        }
        if (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) {
            transformer.setSecureProcessing(true);
        }
        return transformer;
    }
    // 实现了JAXP的Templates.getOutputProperties()。需要实例化一个translet以获得输出属性，因此我们可以实例化一个Transformer来调用它。
    public synchronized Properties getOutputProperties() {
        try {