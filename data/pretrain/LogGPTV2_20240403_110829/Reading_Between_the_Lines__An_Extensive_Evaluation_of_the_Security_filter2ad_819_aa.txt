title:Reading Between the Lines: An Extensive Evaluation of the Security
and Privacy Implications of EPUB Reading Systems
author:Gertjan Franken and
Tom van Goethem and
Wouter Joosen
2021 IEEE Symposium on Security and Privacy (SP)
An Extensive Evaluation of the Security and Privacy Implications
Reading Between the Lines:
of EPUB Reading Systems
Gertjan Franken
imec-DistriNet, KU Leuven
3001 Leuven, Belgium
Tom Van Goethem
imec-DistriNet, KU Leuven
3001 Leuven, Belgium
Wouter Joosen
imec-DistriNet, KU Leuven
3001 Leuven, Belgium
5
1
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract—In recent years, e-books have proven to be a very
appealing alternative to physical books; nowadays, almost every
written book is published in an electronic format next to its
physical copy. In an attempt to promote consensus and to offer
an alternative to emerging proprietary e-book formats, the Open
eBook format was introduced, now known as the EPUB format.
Building on existing web functionalities, this open format relies
primarily on XHTML and CSS to construct e-books. As such,
browser engines are often employed to render the contents of
EPUBs. However, this implies that reading systems may face
similar vulnerabilities as web browsers.
In this paper, we report on a semi-automated evaluation
of the security and privacy aspects of EPUB reading systems.
This evaluation, which was performed on 97 EPUB reading
systems covering seven platforms and ﬁve physical reading
devices, revealed that almost none of the JavaScript-supporting
reading systems sufﬁciently adhere to the EPUB speciﬁcation’s
security recommendations. Furthermore, our results indicate that
16 reading systems even allow an EPUB to leak information about
the user’s ﬁle system, and in eight cases extract ﬁle contents. In
addition to the semi-automated evaluation, we demonstrate that
an attacker can launch even more potent attacks that may lead
to a full compromise of a user’s system, by exploiting aspects
speciﬁc to the implementation of reading systems used by millions
of users. Finally, we investigate the root cause of the identiﬁed
security and privacy issues, uncovering several ﬂaws in both the
implementation of EPUB reading system, as well as shortcomings
of the EPUB speciﬁcation.
I. INTRODUCTION
In the last decade, digital books have gained signiﬁcantly
in popularity, and experts argue they are here to stay [52],
[62]. Today, almost every newly published book or magazine
is made available in a digital format, in addition to their
physical copy. EPUB e-book creation is considered fairly
straightforward, which combined with the possibility to publish
without any vendor interposition, explains in particular its
popularity among self-publishing authors and within open
license communities such as Project Gutenberg1. EPUBs
primarily consist of XHTML documents and CSS stylesheets,
bearing close resemblance to web pages. Consequently, browser
engines are often employed by reading systems to render
EPUB content. Next to static content, the EPUB standard
also allows for media such as audio or video, and dynamic
content leveraging JavaScript.
Because EPUB reading systems are closely related to web
they are prone to similar security and privacy
browsers,
1https://www.gutenberg.org/
issues. A malicious EPUB could leverage the reading system’s
capabilities to mount attacks against the user, much like the
dynamics between a malicious website and a browser. For
instance, since the introduction of EPUB3, several blogs and
articles have voiced concern about the capabilities associated
with supporting JavaScript in EPUB reading systems [18],
[19], [30], [35], [48]. The EPUB speciﬁcation acknowledges
these concerns by dedicating one of its sections to security
recommendations for EPUB reading system developers [2].
However, these recommendations are very lenient and lack
strict enforcement.
The EPUB speciﬁcation deﬁnes a large number of (optional)
capabilities, several of which are questionable from a security
perspective, such as access to the local ﬁlesystem, especially
when considered in combination with access to remote end-
points. Consequently, since most EPUB reading systems are not
well-documented, this makes it difﬁcult for the user to assess
what privileges the reading system provides to an opened EPUB.
Moreover, there is no indication whether a reading system is
compliant to the EPUB speciﬁcation, nor are we aware of any
study evaluating their capabilities and compliance.
In this paper, we present the ﬁrst extensive evaluation of
EPUB reading systems, addressing their capabilities, com-
pliance to the EPUB speciﬁcation, and security and privacy
implications. To this end, we crafted an extensive testbed that
covers a wide range of the threat surface, consisting of EPUBs
which are loaded in EPUB reading systems to perform a semi-
automated evaluation. As soon as such an EPUB is opened
by a reading system, the embedded experiments are executed,
after which the resulting data is rendered or sent to a server.
This way, we evaluated 97 of the most popular EPUB reading
systems, covering seven different platforms and ﬁve physical
e-reader devices. Our evaluation uncovered that almost all
reading systems that execute embedded JavaScript do not fully
respect the speciﬁcation’s security recommendations, of which
16 can be abused by malicious EPUBs to leak information
about the local ﬁlesystem. We reached out to all vendors in
order to report the identiﬁed issues.
Moreover, to complement our semi-automated evaluation, we
manually inspected three widely used EPUB reading systems
for implementational ﬂaws, revealing several severe security
vulnerabilities. We discovered a universal XSS affecting two
browser extensions (≈300,000 browser installations), and the
ability to leak documents residing in the user’s library as soon
© 2021, Gertjan Franken. Under license to IEEE.
DOI 10.1109/SP40001.2021.00015
1730
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
as a malicious e-book is opened on a Kindle (the most widely
used physical e-reader [27]). These ﬁndings indicate that the
results of our semi-automated evaluation should be considered
as a lower bound, and that in fact EPUB reading systems
may face even more security issues that are implementation-
speciﬁc. We argue that by limiting the capabilities of the reader
application and the employed rendering engine to a minimum,
the threat surface can be signiﬁcantly reduced. For instance,
iOS reading systems can only access ﬁles within the application
by design, and thus none could be abused to leak sensitive ﬁles.
Furthermore, we explored the presence of real-world abuse by
analyzing more than 9,000 EPUBs obtained from ﬁve online
e-book stores and two ﬁle-sharing platforms. We did not ﬁnd
any evidence of ongoing abuse, allowing EPUB reading system
developers to adopt adequate security measures before users
are actively being exploited. Finally, we show that four out of
six evaluated self-publishing EPUB services do not adequately
vet submitted manuscripts, which could lead to the distribution
of malicious EPUBs through legitimate channels.
We make the following contributions:
• We developed a testbed of numerous EPUBs to assess the
security and privacy impact of various aspects of EPUB
reading systems and the rendering engine they employ.
• By applying this testbed in a semi-automated analysis, we
evaluated a total of 97 EPUB reading systems, of which 92
were freely available as applications on desktop (Windows,
macOS and Ubuntu) and mobile (iOS and Android), or as
a browser extension (Chrome and Firefox), and of which
ﬁve were physical e-reader devices.
• The result of this analysis shows that many reading
applications can be abused, either by leaking ﬁle contents,
or by violating the user’s privacy expectations.
• To explore both ongoing and potential abuse in the EPUB
ecosystem, we downloaded over 9,000 EPUBs from two
torrent sites and ﬁve online e-book stores, and assessed
the vetting process of six popular self-publishing services.
• Lastly, based on the identiﬁed issues and their root
cause, we propose to make the EPUB speciﬁcation more
strict. Moreover, to encourage consumers and developers
to measure the security and privacy impact of their
reading systems, we have released the EPUBs used in our
evaluation along with the source code to craft them.
II. BACKGROUND
In May 2019, W3C issued EPUB 3.2, the most recent
version of the EPUB standard at the time of writing [1]. In the
remainder of this paper, we refer to this particular version when
discussing the EPUB standard, unless speciﬁed otherwise.
A. EPUB Technical Standard
The EPUB standard consists of ﬁve sub-speciﬁcations, each
deﬁning complementary core features and functionality. For
reasons of brevity, we will not describe each sub-speciﬁcation,
instead we will discuss the standard as a whole.
The EPUB format and the internal structure of a compliant
EPUB ﬁle, or a so-called EPUB Container, are visualized
Fig. 1. On the left a visual representation of the EPUB format, and on the
right the internal ﬁle structure of a compliant EPUB archive.
least one Rendition,
in Figure 1. An EPUB is a single-ﬁle container with the
.epub extension, of which the included content is com-
pressed in a ZIP archive. The mimetype ﬁle indicates
the EPUB Open Container format (OCF) media-type, with
application/epub+zip as the two-part identiﬁer [17].
An EPUB Publication, included in the Container, must
consist of at
the speciﬁc rendering
of the EPUB’s content. A Rendition is represented by an
EPUB Package, which consists of the Package Document
(package.opf), the Navigation Document and all Publi-
cation Resources used to build the Rendition. The Package
Document conveys various types of information such as the
title and authors of the EPUB Publication. Moreover, it also
deﬁnes the sequence in which the Content Documents are
rendered, called the spine.
Publication Resources characterize the actual content and
layout of the EPUB Rendition. The standard makes a distinction
between Core Media Type Resources and Foreign Resources.
The former are resources of media types that are deemed
supported by all Reading Systems. This set of media types
consists of Content Documents (XHTML or SVG media type
ﬁles), CSS stylesheets, and various image and audio formats.
The latter are resources of which support is not mandatory and
therefore require fallback mechanisms to Core Media Type
Resources, in case the Reading System does not offer support.
is also used to assign special
properties to particular Content Documents. An interesting
example is the scripted property, which indicates that the
referred Content Document contains executable JavaScript.
EPUB Containers are allowed to contain such Scripted Content
Documents, however, EPUB Reading Systems are not obligated
to support script execution. As such, the EPUB standard
states that Scripted Content Documents should retain their
integrity when scripting support is disabled, without any loss
of information or legibility.
The Package Document
B. EPUB Reading Systems
EPUB Reading Systems are applications that
interpret
and render EPUB ﬁles according to the EPUB speciﬁcation.
They come pre-installed on physical e-book reading devices
(e.g. e-ink readers), but are also available on smartphones,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1731
EPUB ContainerEPUB PublicationEPUB RenditionsNavigation DocumentPackage DocumentPublication Resourcestablets, desktop computers, and even in the form of browser
extensions. Nearly all applications are free (some with in-app
advertisements) and often provide support for various other
e-book formats.
The EPUB speciﬁcation dictates the minimal requirements
that should be met by an EPUB Reading System. These
requirements are mostly related to rendering and presenting the
content that is the EPUB Publication. Only a few paragraphs
of the standard are dedicated to security considerations, with
special attention to providing support for scripting [2]. Here,
Reading System developers are provided with several attack
vectors that should be considered, and with recommendations
on how to deal with security-related issues concerning scripted
content execution.
One of the recommendations states that the Reading System
should behave as if a unique domain were allocated to each
Content Document, consequently isolating documents from
each other. This isolation is enforced by the Same-Origin
Policy, which dictates that one origin cannot access resources
from another. Reading Systems that allow scripting and network
access should also notify the user whether any network activity
is occurring, and ideally provide functionality for the user to
disable it.
According to its speciﬁcation, EPUB Reading Systems may
allow an EPUB to store persistent data (e.g. LocalStorage). This
data is recommended to be considered sensitive, and therefore
this data should not be accessible by other documents.
C. Same-Origin Policy
Modern browsers employ a wide range of policies to
protect users against malicious websites, among which the
highly essential Same-Origin Policy (SOP) [46]. This policy in
particular is used to isolate documents and scripts located on
different origins, to prevent one website to perform undesirable
actions on, or steal sensitive user information from another
website. Two URLs share the same origin if their scheme,
host and port are identical. For example, when the origin
https://attacker.com tries to extract information from
https://bank.com, this would be prevented by the SOP.
Not only documents and scripts are protected by the SOP,
but also any information stored by the LocalStorage API [33].
Although cookies are not subjected to the SOP, they can only
be accessed by associated domains. As an extension to the
SOP, websites cannot instruct the browser to render or access
ﬁles located on the user’s ﬁle system. For example, when a
website leverages an iframe to render a ﬁle by referring to
file:///etc/passwd or employs the XMLHttpRequest
or Fetch API to access its content, the browser will refuse.
III. MOTIVATION
While e-books have grown to be a multi-billion dollar
industry [52], [62] and countless EPUB reading systems are
available on essentially every platform, the reading system
ecosystem has never been subjected to a comprehensive security
or privacy assessment. In the following subsections, we argue
why such an assessment is imperative.
A. Intransparency
Most EPUB reading systems rely on browser engines to
render e-book content. Over the last few years, there has
been an extensive growth in the number of features that these
browser engines support, signiﬁcantly increasing their threat
surface [57]. Scripting in e-books, which was already suggested
as an optional functionality in the 1999 OEBPS speciﬁcation,
could be used to launch a variety of attacks to circumvent the
same-origin policy, or even to attack the underlying operating
system. As such, opening an e-book could introduce the user
to a plethora of attacks, which have not been extensively
explored to this date. In face of these threats, the more recent
editions of the EPUB standard now include a section on security
considerations for EPUB reading system developers.
However, we argue that these considerations lack binding
requirements and are insufﬁciently concrete. In that regard,
even if an EPUB reading system is compliant with the ofﬁcial
speciﬁcation, users do not have any guarantee that their security
and privacy will be safeguarded. For instance, a compliant
reading system might allow an EPUB to freely access the user’s
ﬁle system and send a copy of it to a remote server. Moreover,
countless curated lists only recommend reading systems based
on usability features and supported e-book formats, making it
nearly impossible for users to verify whether an application is
sufﬁciently secure.
We argue that the more features are being added to the speci-
ﬁcation, the more it will cripple the transparency of security and
privacy factors in EPUB reading systems as long as no clear
compulsory considerations are included. However, even when
these are included, still, there is no straightforward way to verify
compliance of a reading system. This uncertainty is one of the
reasons why we deem a comprehensive evaluation of EPUB
reading systems imperative. We aim to improve this much-
needed transparency by evaluating the most popular EPUB
reading systems, leveraging a semi-automated analysis. In the
following subsections, we discuss two attacker models which
aim to abuse EPUB reading system capabilities, impacting the
user’s security and privacy.
B. Malicious EPUBs
Nowadays, tens of thousands of EPUBs are made available
online for free, either legally or illegally. Whereas EPUB
submissions to the Gutenberg Project are subjected to exami-
nation by volunteers [53], various other channels omit third-
party validation and share the EPUB as-is (e.g. torrent sites,
social media). A study of the UK government’s Intellectual
Property Ofﬁce ﬁnds that approximately 17% of e-books are
illegally consumed online, accounting for around four million
e-books [34]. As such, users may face various threats when
accessing an e-book obtained either from a publisher who does
not sufﬁciently sanitize or verify the published books, from a
malicious website directly, or from a ﬁle-sharing platform.
The attacker could conﬁgure the EPUB such that upon
opening, a malicious JavaScript payload is executed. Depending
on the capabilities and vulnerabilities of the reading system, the
attacker could try to either extract sensitive system ﬁles, such
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:25 UTC from IEEE Xplore.  Restrictions apply. 
1732
as the browser’s cookie store, and then send the contents of
these ﬁles to an online web server. Furthermore, if the browser
engine used by the reading system is outdated, it might contain
publicly known vulnerabilities that can then be exploited by
the malicious e-book in order to compromise the system.
In an explorative experiment using Chrome and Firefox,
we assessed whether a website could automatically cause a
malicious EPUB to be loaded in an installed reading system. In
both browsers (on desktop and mobile), this requires at least one
user interaction. Although a website can instruct the browser to
download an EPUB (e.g. clicking a URL through JavaScript),
still one user click is required to actually open it. However, an
EPUB reading system installed as a browser extension could
intercept the download and automatically render the EPUB.
C. Tracking EPUBs
E-books in a proprietary format are usually distributed
through the associated vendor’s online bookstore, which is
often embedded within the vendor’s own reading system (e.g.
physical e-reader devices or applications). Leveraging their own
proprietary formats and reading systems, vendors are known
to harvest user data based on interactions with their reading
system [5], [31], [36].
Although EPUB is an open format and not afﬁliated to any
speciﬁc vendor, distributors of EPUBs might still be able to
track users. To supplement their recommendation system, the
distributor might try to ﬁgure what other books make up the
user’s library. This can be accomplished if the user’s reading
system allows EPUBs to render local ﬁles located within the
directory where the unpacked EPUBs are stored. Then, to scan
the contents of the library, each distributed EPUB could include
a list of popular EPUBs, and code to test their presence on the
system. Even when the targeted EPUB reading system does not
allow rendering local ﬁles, timing attacks can prove as a suitable
alternative. The distributor could be even more intrusive by
scanning for other information, such as installed applications
and browsing history, in the same way. Moreover, a tracking-
enabled EPUB might try to associate the user with an online
browsing session, e.g. by ﬁngerprinting the installed fonts. The
EPUB might even try to obtain an even more intrusive device
ﬁngerprint, e.g. by detecting the presence of speciﬁc ﬁles on
the system, which in most cases can also reveal the username.
IV. METHODOLOGY
To evaluate the potential threats posed by opening an EPUB
ﬁle, we conduct a series of experiments. In this section we
describe our experimental setup through which we test a wide
variety of EPUB reading systems for different primitives that
could be used to launch attacks.
A. Experimental design
Our experiments aim to document the capabilities entrusted
to EPUBs by the reading systems, and to detect related security
and privacy issues. Because most reading systems are closed-