# Reading Between the Lines: An Extensive Evaluation of the Security and Privacy Implications of EPUB Reading Systems

**Authors:** Gertjan Franken, Tom van Goethem, Wouter Joosen  
**Affiliation:** imec-DistriNet, KU Leuven, 3001 Leuven, Belgium  
**Conference:** 2021 IEEE Symposium on Security and Privacy (SP)  
**DOI:** 10.1109/SP40001.2021.00015  
**IEEE Xplore:** [Link](https://ieeexplore.ieee.org/document/9488726)

## Abstract
In recent years, e-books have become a popular alternative to physical books, with almost every written book now available in electronic format. The Open eBook format, now known as EPUB, was introduced to promote consensus and offer an open alternative to proprietary e-book formats. EPUB relies on XHTML and CSS, often using browser engines for rendering, which can introduce similar vulnerabilities as web browsers. This paper presents a semi-automated evaluation of the security and privacy aspects of 97 EPUB reading systems across seven platforms and five physical devices. Our findings reveal that most JavaScript-supporting reading systems do not adhere to the EPUB specification's security recommendations. Specifically, 16 systems allow EPUBs to leak information about the user's file system, and eight systems can extract file contents. We also demonstrate more potent attacks, such as universal cross-site scripting (XSS) affecting two browser extensions (≈300,000 installations) and the ability to leak documents from a Kindle. Additionally, we investigate the root causes of these issues, identifying flaws in both the implementation of EPUB reading systems and the EPUB specification itself.

## 1. Introduction
Digital books have gained significant popularity over the past decade, with experts predicting their continued growth. Today, almost every newly published book or magazine is available in digital format, alongside its physical counterpart. The EPUB format, which primarily consists of XHTML documents and CSS stylesheets, is straightforward to create and publish without vendor interposition, making it popular among self-publishing authors and open license communities like Project Gutenberg. EPUBs can include media and dynamic content via JavaScript, and they are rendered using browser engines, which can expose them to similar security and privacy issues as web browsers.

### 1.1 Background
EPUB reading systems are closely related to web browsers, and thus they are prone to similar security and privacy issues. A malicious EPUB could leverage the capabilities of the reading system to mount attacks against the user. Since the introduction of EPUB3, concerns have been raised about the security implications of supporting JavaScript in EPUB reading systems. The EPUB specification includes security recommendations, but these are lenient and lack strict enforcement. The specification defines many optional capabilities, some of which, such as access to the local file system, are questionable from a security perspective.

### 1.2 Motivation
Despite the widespread use of EPUB reading systems, there has been no comprehensive security or privacy assessment of these systems. This lack of transparency and the potential for abuse make a thorough evaluation imperative. We aim to improve this transparency by evaluating the most popular EPUB reading systems and leveraging a semi-automated analysis. We also discuss two attacker models: malicious EPUBs and tracking EPUBs, which can impact the user’s security and privacy.

## 2. Methodology
To evaluate the potential threats posed by opening an EPUB file, we conducted a series of experiments. Our experimental design aims to document the capabilities entrusted to EPUBs by the reading systems and to detect related security and privacy issues.

### 2.1 Experimental Design
Our experiments involve a testbed of numerous EPUBs designed to assess the security and privacy impact of various aspects of EPUB reading systems and the rendering engines they employ. We applied this testbed in a semi-automated analysis to evaluate 97 EPUB reading systems, including 92 freely available applications on desktop and mobile platforms, and five physical e-reader devices. Our results show that many reading applications can be abused, either by leaking file contents or by violating the user’s privacy expectations.

### 2.2 Real-World Abuse
To explore ongoing and potential abuse in the EPUB ecosystem, we downloaded over 9,000 EPUBs from two torrent sites and five online e-book stores. We also assessed the vetting process of six popular self-publishing services. Our findings indicate that four out of six evaluated self-publishing EPUB services do not adequately vet submitted manuscripts, which could lead to the distribution of malicious EPUBs through legitimate channels.

## 3. Contributions
- **Testbed Development:** We developed a testbed of numerous EPUBs to assess the security and privacy impact of various aspects of EPUB reading systems and the rendering engine they employ.
- **Semi-Automated Analysis:** By applying this testbed, we evaluated a total of 97 EPUB reading systems, revealing that many can be abused to leak file contents or violate user privacy.
- **Real-World Abuse Exploration:** We downloaded over 9,000 EPUBs from various sources and assessed the vetting process of six self-publishing services.
- **Recommendations:** Based on our findings, we propose stricter EPUB specifications and encourage consumers and developers to measure the security and privacy impact of their reading systems. We have released the EPUBs used in our evaluation along with the source code to craft them.

## 4. Background
The EPUB standard, issued by W3C in May 2019, consists of five sub-specifications defining core features and functionality. An EPUB is a single-file container with the .epub extension, compressed in a ZIP archive. The EPUB Publication must consist of at least one Rendition, which is represented by an EPUB Package. The Package Document conveys information such as the title and authors of the EPUB Publication and defines the sequence in which the Content Documents are rendered.

### 4.1 EPUB Reading Systems
EPUB Reading Systems are applications that interpret and render EPUB files according to the EPUB specification. They are available on various platforms, including physical e-readers, smartphones, tablets, desktop computers, and browser extensions. The EPUB specification dictates minimal requirements for rendering and presenting content, with limited attention to security considerations, particularly regarding scripting.

### 4.2 Same-Origin Policy
Modern browsers employ the Same-Origin Policy (SOP) to protect users against malicious websites. The SOP isolates documents and scripts located on different origins, preventing one website from performing undesirable actions on another. EPUB Reading Systems may allow an EPUB to store persistent data, which should be considered sensitive and not accessible by other documents.

## 5. Motivation
While e-books have become a multi-billion dollar industry, the security and privacy of EPUB reading systems have not been comprehensively assessed. We argue that the lack of binding requirements and insufficiently concrete security considerations in the EPUB specification make it difficult for users to verify the security and privacy of reading systems. We aim to improve this transparency by evaluating the most popular EPUB reading systems and discussing two attacker models: malicious EPUBs and tracking EPUBs.

### 5.1 Intransparency
Most EPUB reading systems rely on browser engines, which support a growing number of features, increasing their threat surface. Scripting in e-books can be used to launch attacks, and the EPUB standard's security considerations lack binding requirements. This makes it nearly impossible for users to verify the security and privacy of reading systems.

### 5.2 Malicious EPUBs
Tens of thousands of EPUBs are available online, and many are shared without third-party validation. Users may face various threats when accessing e-books from publishers who do not sufficiently sanitize or verify the published books, from malicious websites, or from file-sharing platforms. A malicious EPUB could execute a JavaScript payload to extract sensitive system files or exploit vulnerabilities in outdated browser engines.

### 5.3 Tracking EPUBs
E-book distributors might track users by including code in EPUBs to scan the user's library or perform timing attacks. Even if the reading system does not allow rendering local files, tracking-enabled EPUBs can still collect user data, such as installed applications and browsing history, and even device fingerprints.

## 6. Conclusion
This paper presents the first extensive evaluation of the security and privacy implications of EPUB reading systems. Our semi-automated analysis of 97 reading systems reveals that many do not adhere to the EPUB specification's security recommendations, leading to potential vulnerabilities. We also demonstrate more potent attacks and identify flaws in both the implementation of EPUB reading systems and the EPUB specification. Based on our findings, we propose stricter EPUB specifications and encourage the release of tools to measure the security and privacy impact of reading systems.