Frontend
NIC
Driver
QEMU Network 
Device Model
Network 
Driver
Xen Hypervisor
Xen Hypervisor
VM Exit & 
VM Enter
NIC
Physical Hardware
NIC
Physical Hardware
Paravirtualized domain
Fully virtualized domain
Fig. 1. Xen networking architecture
Second, we expect that attacks do not alter the ordering or length of ﬁelds in
aggregate data structures. Our ﬁrewall is preprogrammed with type information
about kernel structures, and an attack that alters the structure types would
cause our system to read incorrect information from kernel memory. Successfully
executing this attack without kernel recompilation appears to be complex, as all
kernel code that accesses structure ﬁelds would need to be altered to use the
attacker’s structure layout. As a result, we believe that relying upon known
structure deﬁnitions is not a limiting factor to our design.
3.2 Virtual Machine Introspection
Our design makes use of virtual machine technology to provide isolation be-
tween malicious code and our security software. We use Xen [2], an open source
hypervisor that runs directly on the physical hardware of a computer. The vir-
tual machines running atop Xen are of two types: unprivileged domains, called
domU or guest domains, and a single fully-privileged domain, called dom0. We
run normal, possibly vulnerable software in domU and deploy our application-
level ﬁrewall in the isolated dom0.
Xen virtualizes the network input and output of the system. Dom0 is the de-
vice driver domain that runs the native network interface card driver software.
Unprivileged virtual machines cannot directly access the physical network card,
so Xen provides them with a virtualized network interface (VNI). The driver do-
main receives all the incoming and outgoing packets for all domU VMs executing
on the physical system. Dom0 provides an Ethernet bridge connecting the phys-
ical network card to all virtual network devices provided by Xen to the domU
VMs. (Xen oﬀers other networking modes, such as network address translation,
that are not used in our work and will not be considered further.) Dom0 uses its
virtual bridge to multiplex and demultiplex packets between the physical net-
work interface and each unprivileged virtual machine’s VNI. Figure 1 shows the
Xen networking architecture when the virtual machines’ network interfaces are
Tamper-Resistant, Application-Aware Blocking of Malicious Network
45
connected through a virtual Ethernet bridge. The guest VMs send and receive
packets via either an I/O channel to dom0 or emulated virtual devices.
The strong isolation provided by a hypervisor between dom0 and the guest
domains complicates the ability to correlate network ﬂows with software execut-
ing in a guest domain. Yet, dom0 has complete access to the entire state of the
guest operating systems running in untrusted virtual machines. Virtual machine
introspection (VMI) [10] is a technique by which dom0 can determine execution
properties of guest VMs by monitoring their runtime state, generally through di-
rect memory inspection. VMI allows security software to remain protected from
direct attack by malicious software executing in a guest VM while still able to
observe critical system state.
Xen oﬀers low-level APIs to allow dom0 to map arbitrary memory pages
of domU as shared memory. XenAccess [31] is a dom0 userspace introspection
library developed for Xen that builds onto the low-level functionality provided by
Xen. VMwall uses XenAccess APIs to map raw memory pages of domU’s kernel
inside dom0. It then builds higher-level memory abstractions, such as aggregate
structures and linked data types, from the contents of raw memory pages by
using the known coding semantics of the guest operating system’s kernel. Our
application-level ﬁrewall inspects these meaningful, higher-level abstractions to
determine how applications executing in the guest VM use network resources.
4 Tamper Resistant Architecture of VMwall
VMwall is our application-level ﬁrewall designed to resist the direct attacks pos-
sible in our threat model. The architecture of VMwall is driven by the following
three goals:
– Tamper Resistance: VMwall should continue to function reliably and ver-
ify all network connections even if an attacker gains entry into the monitored
system. In particular, the design should not rely on components installed in
the monitored host as processes or kernel modules, as these have been points
of direct attack in previous application-level ﬁrewalls.
– Independence: VMwall should work without any cooperation from the
monitored system. In fact, the system may not be aware of the presence of
the ﬁrewall.
– Lightweight Veriﬁcation: Our intent is to use VMwall for online veriﬁ-
cation of network connections to real systems. The design should allow for
eﬃcient monitoring of network traﬃc and correlation to applications sending
and receiving that traﬃc.
Our ﬁrewall design satisﬁes these goals by leveraging virtual machine iso-
lation and virtual machine introspection. Its entire software runs within the
privileged dom0 VM, and it hooks into Xen’s virtual network interface to col-
lect and ﬁlter all guest domains’ network packets. Since the hypervisor provides
strong isolation among the virtual machines, this design achieves the ﬁrst goal
of tamper-resistance.
46
A. Srivastava and J. Giﬃn
Dom0 Virtual Machine
VMwall
User Component
3
User Space
Kernel Space
2
4
VMwall
Kernel Component
Xen
1
5
Physical
Hardware
Network
Fig. 2. VMwall’s high-level architecture. (1) Packets inbound to and outbound from a
guest domain are processed by dom0. (2) The VMwall kernel component intercepts the
packets and passes them to a user-space component for analysis. (3) The user-space
component uses virtual machine introspection to identify software in a guest domain
processing the data. (4) The user-space component instructs the kernel component
to either allow or block the connection. (5) Packets from allowed connections will be
placed on the network.
In order to provide application-level ﬁrewalling, VMwall must identify the pro-
cess that is sending or receiving packets inside domU. VMwall correlates packet
and process information by directly inspecting the domU virtual machine’s mem-
ory via virtual machine introspection. It looks into the kernel’s memory and
traverses the data structures to map process and network information. This
achieves our second design goal of independence, as there are no components of
VMwall inside domU. Our introspection procedure rapidly analyzes the kernel’s
data structures, satisfying the third goal of lightweight veriﬁcation.
The high-level design of VMwall has two components: a kernel module and
user agent, both in dom0 (Fig. 2). The VMwall kernel component enforces a
per-packet policy given by the user agent and either allows or drops each packet.
The user agent determines policy by performing introspection to extract infor-
mation about processes executing in guest VMs and evaluating the legitimacy
of those processes. Sections 4.1 and 4.2 present detailed information about the
two components.
4.1 Kernel Component
VMwall’s kernel component is a module loaded inside the dom0 Linux kernel.
It intercepts all network packets to or from untrusted virtual machines and uses
security policies to decide whether each packet should be allowed or dropped.
Interception occurs by hooking into Xen’s network bridge between the physical
interface card and virtual network interface. When the kernel component inter-
cepts a packet, it checks a rule table to see if a ﬁrewall rule already exists for
the packet, as determined by the local endpoint IP address and port. If so, it
takes the allow or block action speciﬁed in the rule. If there is no rule, then it
Tamper-Resistant, Application-Aware Blocking of Malicious Network
47
Fig. 3. VMwall’s kernel module architecture. (1) Packets inbound to and outbound
from a guest domain are intercepted and passed to the kernel module. (2) The module
receives each packet and looks into its rule table to ﬁnd the rule for the packet. (3) The
kernel module queues the packet if there is no rule present. (4) VMwall sends an
introspection request to the user agent and, after the agent completes, receives the
dynamically generated rule for the packet. (5) The kernel module adds the rule into its
rule table to process future packets from the same connection. (6) The kernel module
decides based on the action of the rule either to accept the packet by reinjecting it into
the network or to drop it from the queue.
invokes the VMwall user agent to analyze the packet and create a rule. The user
agent performs introspection, generates a rule for the packet, and sends this rule
back to the kernel module. The kernel module adds this new rule to its policy
table and processes the packet. Further packets from the same connection are
processed using the rule present in the kernel component without invoking the
user agent and without performing introspection.
As kernel code, the kernel component cannot block and must take action on a
packet before the user agent completes introspection. VMwall solves this problem
for packets of unknown legitimacy by queuing the packets while waiting for the
user agent’s reply. When the user agent sends a reply, the module adds a rule
for the connection. If the rule’s action is to block the connection, then it drops
all the packets that are queued. Otherwise, it re-injects all the packets into the
network.
Figure 3 presents the kernel module’s complete architecture. It illustrates the
steps involved in processing the packet inside the kernel. It shows the queue
architecture, where packets are stored inside the kernel during introspection.
4.2 User Agent
The VMwall user agent uses virtual machine introspection to correlate network
packets and processes. It receives introspection requests from the kernel com-
ponent containing network information such as source port, source IP address,
48
A. Srivastava and J. Giﬃn
Dom0 Virtual Machine
DomU Virtual Machine
Whitelist
System.map
5
2
VMwall
User
Agent
Shared
Memory
3
User Space
Kernel Space
1
6
User Space
Kernel Space
CR3
Page Directory
3
3
Page Table
4
3
Kernel
Data
Structures
Xen Hypervisor
Fig. 4. VMwall’s user agent architecture. (1) The VMwall user agent receives the
introspection request. (2) The user agent reads the System.map ﬁle to extract the
kernel virtual addresses corresponding to known kernel symbols. (3) The user agent
uses Xen to map the domU kernel memory pages containing process and network data
structures. (4) VMwall traverses the data structures to correlate network and process
activity. (5) The agent searches for the recovered process name in the whitelist. (6) The
user agent sends a ﬁltering rule for the connection to the VMwall kernel module.
destination port, destination IP address, and protocol. It ﬁrst uses the packet’s
source (or destination) IP address to identify the VM that is sending (or receiv-
ing) the packet. When it ﬁnds the VM, it then tries to ﬁnd the process that is
bound to the source (or destination) port.
VMwall’s user agent maps a network port to the domU process that is bound
to the port, shown in Fig. 4. As needed, it maps domU kernel data structures
into dom0 memory. Process and network information is likely not available in a
single data structure but instead is scattered over many data structures. VMwall
works in steps by ﬁrst identifying the domU kernel data structures that store IP
address and port information. Then, VMwall identiﬁes the process handling this
network connection by iterating over the list of running processes and checking
each process to see if it is bound to the port. When it ﬁnds the process bound
to the port, it extracts the process’ identiﬁer, its name, and the full path to its
executable. If the user agent does not ﬁnd any process bound to the port, it
considers this to be an anomaly and will block the network connection.
VMwall uses information about the process to create a ﬁrewall rule enforceable
by the kernel component. The user agent maintains a whitelist of processes that
are allowed to make network connections. When the user agent extracts the name
of a process corresponding to the network packet, it searches the whitelist for
the same name. VMwall allows the connection if it ﬁnds a match and blocks the
connection otherwise. It then generates a rule for this connection that it passes
to the VMwall kernel component. This rule contains the network connection
information and either an allow or block action. The kernel component then
uses this rule to ﬁlter subsequent packets in this attempted connection.
5 Implementation
We have implemented a prototype of VMwall using the Xen hypervisor and
a Linux guest operating system. VMwall supports both paravirtualized and
Tamper-Resistant, Application-Aware Blocking of Malicious Network
49
fully-virtualized (HVM) Linux guest operating systems. Its implementation con-
sists of two parts corresponding to the two pieces described in the previous
section: the kernel module and the user agent. The following sections describe
speciﬁc details aﬀecting implementation of the two architectural components.
5.1 Extending Ebtables
Our kernel module uses a modiﬁed ebtables packet ﬁlter to intercept all pack-
ets sent to or from a guest domain. Ebtables [7] is an open source utility that
ﬁlters packets at an Ethernet bridge. VMwall supplements the existing coarse-
grained ﬁrewall provided by ebtables. Whenever ebtables accepts packets based