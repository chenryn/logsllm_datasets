\[root@server0 \~\]# sed \'1r b.txt\' a.txt
#在a.txt文件的第1行插入b.txt里面的内容
aaa
111
222
333
bbb
ccc
\[root@server0 \~\]# cat a.txt #原文件内容未变化
aaa
bbb
ccc
\[root@server0 \~\]# cat b.txt #原文件内容未变化
111
222
333
\[root@server0 \~\]# sed \'2w c.txt\' a.txt
#复制a.txt里面的第二行写入到c.txt
aaa
bbb
ccc
\[root@server0 \~\]# cat c.txt #查看c.txt(事先未创建)
bbb
\[root@server0 \~\]# sed \'2w c.txt\' b.txt
#再复制b.txt里面的第二行写入到c.txt
111
222
333
\[root@server0 \~\]# cat c.txt #再查看c.txt 之前的内容被覆盖
222
## sed复制剪切
基本动作:
H:模式空间\--\[追加\]\--\>保持空间 追加复制
h:模式空间\--\[覆盖\]\--\>保持空间 覆盖复制
G:保持空间\--\[追加\]\--\>模式空间 追加粘贴
g:保持空间\--\[覆盖\]\--\>模式空间 覆盖粘贴
\[root@server0 \~\]# sed \'1H;\$G\' a.txt
#追加复制第一行到剪切板,在末尾追加粘贴
aaa
bbb
ccc
#追加粘贴到这末尾 空行:剪切板中默认第一行是空行
aaa #复制粘贴到这里
\[root@server0 \~\]# sed \'1h;\$G\' a.txt #覆盖复制第一行,在末尾追加粘贴
aaa
bbb
ccc
aaa #追加粘贴到这末尾 空行:剪切板中的空行被覆盖
Sed '1h;2g' a.txt
Sed '1h;2G' a.txt
# NSD SHELL DAY06
案例1：使用awk提取文本
案例2：awk处理条件
案例3：awk综合脚本应用
案例4：awk流程控制
案例5：awk扩展应用
awk编程语言工具概述:
由三个人研发出来(Aho Weiberger Kernighan)
grep 模糊查找, awk 精确查找,
# 步骤一：awk文本过滤的基本用法
1）基本操作方法
格式一: 前置命令 \| awk \[选项\] \'\[条件\]{指令}\' 文件
格式二：awk \[选项\] \'\[条件\]{指令}\' 文件
选项 -F 可指定分隔符,不指定，默认为空格（包括tab）
print：是最常用的编辑指令，若有多条编辑指令，可用分号分隔。
\[root@server0 \~\]# cat test.txt
hello the world
welcome to beijing
\[root@server0 \~\]# awk \'{print}\' test.txt
  #未加-F选项以默认的空格为分隔符
hello the world
welcome to beijing
\[root@server0 \~\]# awk \'{print \$1}\' test.txt
  #\$1表示第一列，不是位置变量
hello
welcome
\[root@server0 \~\]# awk \'{print \$3}\' test.txt
world
beijing
\[root@server0 \~\]# head -1 /etc/passwd
root:x:0:0:root:/root:/bin/bash
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print \$1};{print
\$7}\'
root
/bin/bash
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print \$1 888
\$7}\'
root888/bin/bash
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print
\$1,\$7}\'   
root /bin/bash
 以上都是以：号为分隔符
**步骤二：利用awk提取本机的网络流量、根分区剩余容量、获取远程失败的IP地址**
\[root@server0 \~\]# df -h
文件系统 容量 已用 可用 已用% 挂载点
/dev/vda1 10G 3.1G 7.0G 31% /
devtmpfs 906M 0 906M 0% /dev
tmpfs 921M 80K 921M 1% /dev/shm
tmpfs 921M 17M 904M 2% /run
tmpfs 921M 0 921M 0% /sys/fs/cgroup
\[root@server0 \~\]# df -h \| awk \'{print \$1,\$4}\'
文件系统 可用
/dev/vda1 7.0G
devtmpfs 906M
tmpfs 921M
tmpfs 904M
tmpfs 921M
**awk 常用内置变量:**
\$0 文本当前行的全部内容
\$1 文本的第1列
\$2 文件的第2列
\$3 文件的第3列，依此类推
NR 文件当前行的行号
NF 文件当前行的列数（有几列）
**常量需要双引号**
\[root@server0 \~\]# head -1 /etc/passwd #测试内容
root:x:0:0:root:/root:/bin/bash
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print \$0}\'
root:x:0:0:root:/root:/bin/bash
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print \$1}\'
root
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print \$2}\'
x
\[root@server0 \~\]# head -3 /etc/passwd \| awk -F: \'{print NR}\'
1
2
3
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F\[:/\] \'{print NF}\'
10
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print \"NR\"}\'
#常量需要双引号
NR
\[root@server0 \~\]# head -1 /etc/passwd \| awk -F: \'{print
\$1,\"的解释器\"\$7}\'
root 的解释器/bin/bash
\[root@server0 \~\]# df -h
文件系统 容量 已用 可用 已用% 挂载点
/dev/vda1 10G 3.1G 7.0G 31% /
devtmpfs 906M 0 906M 0% /dev
tmpfs 921M 80K 921M 1% /dev/shm
tmpfs 921M 17M 904M 2% /run
tmpfs 921M 0 921M 0% /sys/fs/cgroup
题目:显示 /分区的剩余容量是:\*\*
\[root@server0 \~\]# df -h \| awk \'/vda1/{print
\$6,\"分区的剩余容量是:\"\$4}\' 查找
/ 分区的剩余容量是:7.0G
\[root@server0 \~\]# df -h \| awk \'/ \\ /\$/{print
\$6,\"分区的剩余容量是:\"\$4}\'
/ 分区的剩余容量是:7.0G
\[root@server0 \~\]# ifconfig eth0
eth0: flags=4163\ mtu 1500
inet 172.25.0.11 netmask 255.255.255.0 broadcast 172.25.0.255
inet6 fe80::5054:ff:fe00:b prefixlen 64 scopeid 0x20\
ether 52:54:00:00:00:0b txqueuelen 1000 (Ethernet)
RX packets 14611 bytes 1031558 (1007.3 KiB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 3567 bytes 395826 (386.5 KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
\[root@server0 \~\]# ifconfig eth0 \|grep \"RX p\"\|awk -F\[\\(\\)\]
\'{print \"当前主机接受 的网络数据是:\",\$2}\'
当前主机接受的网络数据是: 1016.2 KiB
\[root@server0 \~\]# ifconfig eth0 \|awk -F\[\\(\\)\] \'/RX p/{print
\"当前主机接受的网络 数据是:\",\$2}\'
当前主机接受的网络数据是: 765.0 KiB
3）根据/var/log/secure日志文件，过滤远程连接密码失败的IP地址
?
?
> **步骤三：格式化输出/etc/passwd文件**
>
> **1）awk处理的时机**
>
> awk会逐行处理文本，支持在处理第一行之前做一些准备工作，以及在处理完最后一行之后做一些总结性质的工作。在命令格式上分别体现如下：
1.  awk \[选项\] \'\[条件\]{指令}\' 文件
2.  awk \[选项\] \' BEGIN{指令} \[条件\]{指令} END{指令}\' 文件
BEGIN{指令}行前处理，读取文件内容前执行，指令执行1次
条件{指令} 逐行处理，读取文件过程中执行，指令执行n次
END{指令} 行后处理，读取文件结束后执行，指令执行1次
例子:统计系统中使用bash作为登录Shell的用户总个数
> a.预处理时赋值变量x=0
>
> b.然后逐行读入/etc/passwd文件，如果发现登录Shell是/bin/bash则x加1
>
> c.全部处理完毕后，输出x的值即可。相关操作及结果如下：
\[root@server0 \~\]# awk \'BEGIN{x=0}/bash\$/{x++}END{print x}\'
/etc/passwd
17
2.  **格式化输出/etc/passwd文件**
> **\\t:插入TAB,常量需要 "\\t"**
>
> 要求:
> 格式化输出passwd文件内容时，要求第一行为列表标题，中间打印用户的名称、UID、家目录信息，最后一行提示一共已处理文本的总行数，如图-1所示。
\[root@room9pc01 \~\]# head -5 /etc/passwd \|awk -F: \'BEGIN{print
\"User\\tUID\\tHome\"}{print \$1\"\\t\"\$6\"\\t\"\$7}END{print
\"Total\",NR,\"lines.\"}\'
User UID Home
root /root /bin/bash
bin /bin /sbin/nologin
daemon /sbin /sbin/nologin
adm /var/adm /sbin/nologin
lp /var/spool/lpd /sbin/nologin
Total 5 lines.
\[root@room9pc01 \~\]#
> **步骤一：认识awk处理条件的设置**
格式二：awk \[选项\] \'\[条件\]{指令}\' 文件
> 1）使用正则设置条件
\[root@server0 \~\]# awk -F: \'/root/\' /etc/passwd #默认含有{print}
root:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/root:/sbin/nologin
\[root@server0 \~\]# awk -F: \'/root/{print}\' /etc/passwd
#{print}可省略
root:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/root:/sbin/nologin
**输出root或adm账户的用户名和UID信息：**
\[root@server0 \~\]# awk -F: \'/\^root\|\^adm/\' /etc/passwd #方法一
root:x:0:0:root:/root:/bin/bash
adm:x:3:4:adm:/var/adm:/sbin/nologin
\[root@server0 \~\]# awk -F: \'/\^(root\|adm)/\' /etc/passwd #方法二
root:x:0:0:root:/root:/bin/bash
adm:x:3:4:adm:/var/adm:/sbin/nologin
**输出账户名称包含root的基本信息（第1列包含root）：**
\[root@server0 \~\]# awk -F: \'\$1\~/root/\' /etc/passwd
root:x:0:0:root:/root:/bin/bash
**输出其中登录Shell不以nologin结尾（对第7个字段做!\~反向匹配）的用户名、登录Shell信息：**
\[root@server0 \~\]# awk -F: \'\$7!\~/nologin\$/\' /etc/passwd
\[root@server0 \~\]# cat a.txt
abc 123 xyz
xyz abc
123
456
aaa
\[root@server0 \~\]# awk \'\$1\~/abc/\' a.txt #查找第1列为abc的行 \~匹配
abc 123 xyz
\[root@server0 \~\]# awk \'\$2\~/abc/\' a.txt #查找第2列为abc的行
xyz abc
\[root@server0 \~\]# awk \'\$2!\~/abc/\' a.txt
#查找除了第2列为abc其他的所有行
abc 123 xyz
123
456
aaa
> 2）使用数值/字符串比较设置条件
>
> 比较符号：==(等于) !=（不等于） \>（大于）
>
> \>=（大于等于） \=1000{print \$1,\$3}\' /etc/passwd
\[root@server0 \~\]# awk -F: \'\$3\<10{print \$1,\$3}\' /etc/passwd
#输出第三列小于10的
root 0
bin 1
\[root@server0 \~\]# awk -F: \'\$1==\"root\"\' /etc/passwd
#输出第一列等于root的行
root:x:0:0:root:/root:/bin/bash
第三列的值大于10和小于20的