Support shared-world intuition by making content
publicly visible
Source
HoloLens Developer Guidelines [43]
HoloLens Developer Guidelines [43]
HoloLens Developer Guidelines [43]
Support?
(cid:88)*
(cid:88)*
(cid:88)
HoloLens Developer Guidelines [43]
HoloLens Developer Guidelines [43]
HoloLens Developer Guidelines [43]
HoloLens Hologram Stability Guide-
lines [42]
Meta Developer Guidelines [40]
Meta Developer Guidelines [40]
Meta Developer Guidelines [40]
(cid:88)*
(cid:88)
(cid:88)*
(cid:88)*
(cid:88)*
(cid:88)
(cid:88)*
Table 5: Summary of ShareAR’s compatibility with existing multi-user AR design guidelines. For the check marks with a * appended, see
Appendix B for additional details.
of users, and number of objects — for 2 warm-up trials and 5
measured trials, reporting the mean and standard deviation.
Basic proﬁle of operations. We begin by considering
ShareAR’s operations with a single pair of users (n = 2) shar-
ing a single object (h = 1).
line operations where present (shown with a dashed line for
Create, Update Location, Delete). More detailed per-
formance data is in Appendix C.
The overall operation completion time is between approx-
imately 70 ms and 250 ms, depending on the operation and
conﬁguration. This overall time is signiﬁcantly dominated
by factors external to the ShareAR module, and that any
multi-user sharing solution would encounter:
i.e., the net-
work latency and the HoloToolkit Sharing library on either
end of it. The overhead speciﬁc to ShareAR is minimal: we
ﬁnd that Create and Change Permissions operations are
most expensive on average, still taking less than 5 ms in the
worst case for the computation on each device; all other oper-
ations take less than 1 ms on each device. For the operations
that we can compare directly with Unity baselines, we also
ﬁnd that ShareAR’s overhead is minimal: the operations stay
within 2.5 ms of the baseline in the worst case.
Scaling with the number of users. Next, we consider how
ShareAR scales as the number of users increases.
In terms of network trafﬁc, a user sharing an object needs
to send object create and update messages to n − 1 others;
additionally, once a user accepts a sharing offer, their device
sends an acceptance message back to the sharer and an in-
formational message to all other n− 2 users to stay in sync.
The total number of messages in the interaction thus scales
quadratically. For updates to already-shared objects (loca-
tion change, deletion), the sharing user sends one message
per other user, and no replies or additional messages are sent
(overall scaling linearly with users).
In terms of timing, all operations under all test condi-
tions took less than 5 ms. For all but Create and Change
Permission,
the operations on average remained under
1 ms. These overheads are reasonable, especially given their
small additional overhead beyond to the corresponding base-
In terms of scaling, Create and Change Permission
scale approximately linearly with the number of users; all
other operations remain approximately constant. Different
conﬁgurations for an operation (e.g., location coupled ver-
sus decoupled sharing, or different object deletion modes)
may slightly affect performance (as reﬂected in the differ-
ently colored lines in the graphs), typically taking longer for
location-decoupled objects due to the overhead of processing
multiple instantiations of the same object.
Scaling with the number of objects. Finally, we measure
ShareAR with increasing numbers of AR objects.
In terms of network trafﬁc, we observe that it scales lin-
early with the number of objects, as each operation and as-
sociated message is independent per object.
In terms of timing, all operations took less than 3 ms
(and often less than 1 ms). These overheads are reasonable,
especially given their relation to the corresponding base-
line operations where present. (For the module operations
for which a baseline Unity operation is plotted — Create,
Update Location and Delete — the relevant module op-
eration timing is very close to that of the baseline Unity op-
eration.) Additional details are in Appendix C.
In terms of scaling, for all operations, the time taken is
approximately constant per object as the number of objects
scales: in other words, an operation on one object registered
with the module is independent of how many other objects
are also registered with the module. Some operations exhibit
a slight slope downward, suggesting caching beneﬁts.
Performance evaluation summary. From our measure-
ments, we see that object creation and permission changes
are the most computationally expensive operations. How-
ever, we anticipate that in practice these operations will only
occur during a small fraction of the frame updates in an app.
USENIX Association
28th USENIX Security Symposium    153
Even so, the greatest observed time taken for an operation
was under 5 ms, and most measurements remained under
1 ms. Furthermore, since these measurements were of our
unoptimized research prototype, continued code optimiza-
tion may bring the performance overhead down even further.
7 Discussion
This work presents the ﬁrst systematic investigation of multi-
user sharing control for AR apps. We propose a module that
is ﬂexible enough to support many different decisions by app
developers. Below we discuss several examples of future
directions enabled by our work.
Execute permissions. Although multi-user AR systems are
still primitive, we envision that future systems will support
not only read and write but also execute permissions. One
possible manifestation may be to allow a user to execute
predeﬁned actions on another user’s object without having
full edit control. For instance, an app may allow other users
to make a virtual dog wag its tail without allowing them to
make the dog arbitrarily large. Our module can be extended
to include additional permissions, including this one.
Asynchronous sharing. Our design exploration assumes
that both users are online when a sharing action occurs; ex-
tensions of our work could explore removing this assump-
tion. For example, consider a user who places publicly vis-
ible virtual decorations outside their home. We may want
(1) the objects to still be visible to a passerby when the user
is not home, but (2) the passerby’s device to only become no-
tiﬁed of the objects’ existence and public visibility when the
passerby is physically proximate to the home. Such a design
may require an alternate network architecture than peer-to-
peer; our module’s network agnosticism would support this.
Minimizing developer errors. We emphasize that one con-
sequence of our module’s ﬂexibility is that developers must
be cautious to use it in a way that supports their app use case.
Some potential user-to-user threats may be subtle: for exam-
ple, if app developers chose to share ghost objects automat-
ically with no way to refuse or delete them, one user might
intentionally or accidentally clutter another user’s view with
ghost objects (an example of a denial-of-service attack). Or,
if an app developer implements a personal space policy that
makes AR objects invisible to all users but does not provide
a way to interact with or retrieve an invisible object, then a
malicious user could walk up to others’ objects to force them
to become invisible and non-interactible. Still other pitfalls
may depend on app semantics: for instance, if the developer
of an app such as Community Art does not put limits on users,
a user could monopolize a common space and prevent other
users from placing objects there. Future work, then, may
explore ways to support app developers in using the features
from our system that are most suitable for their overall goals.
Analysis in the wild. More broadly, our work lays a founda-
tion for future empirical studies on how developers use our
module’s components in practice and how users respond to
concrete usage of these components. Such an evaluation is
nontrivial since evaluating the usability of a single app does
not generalize well to the usability of others [45], for the
same reason described in Section 2 that a sharing control
module cannot be one-size-ﬁts-all. However, we note the im-
portance of follow-up studies considering user perceptions
when making speciﬁc design decisions, and we encourage
future work to leverage our technical foundation to examine
under which circumstances certain sharing mechanisms are
appropriate.
Location privacy. Much multi-user app functionality, in-
cluding our design, requires that users share their location
with the app: sharing at least where one is within a physical
space is necessary for location-synchronized virtual content.
Some users may not anticipate or agree with such location
sharing, even for trustworthy apps, though such sharing may
be fundamental to the design of location-based AR apps. Ad-
ditional location privacy concerns could be introduced by
app developers, if app developers mishandle and acciden-
tally or intentionally expose a user’s location to other users.
This threat, however, is dependent upon app-level semantics,
and is neither unique to nor preventable by the underlying
sharing framework. We encourage future work to explore
this point further.
Inherently conﬂicting goals. Finally, we conjecture that
there may be fundamental tensions in some aspects of se-
cure and private content sharing between users. For exam-
ple, consider the case of a shared space in which one user
owns a publicly visible ball object and another user owns a
private wall object. When the public ball is thrown at the pri-
vate wall, it is not obvious which user(s) should see the ball
rebound. If the ball rebounds for both users, then the ball
owner gains information about the presence of the wall; if
the ball does not rebound for either user, then the wall owner
sees the ball go through the wall, defying physics; if only
the wall owner sees the ball rebound, then the two users no
longer have a synchronized view of the shared space. De-
termining how physics-obeying virtual objects should inter-
act to minimize information leakage via this side channel
while maximizing physical intuition is a subtle area for fu-
ture work, and we conjecture that no content sharing solution
can simultaneously achieve both goals perfectly.
8 Related Work
Although AR has a long history (e.g., [61]), the computer
security community has only recently begun examining the
space [13, 52]. Prior efforts on AR security and privacy in-
clude ﬁltering raw real-world input [12, 28, 49, 54, 65] and
regulating untrusted AR output [32, 34]. These efforts focus
on the case of a single user interacting with an AR device.
Literature on multi-user AR security and privacy is just be-
ginning to emerge. Some prior work has proposed methods
154    28th USENIX Security Symposium
USENIX Association
for secure device pairing via out-of-band channels [19, 60];
our work is complementary. Other prior work has proposed
speciﬁc multi-user interaction modalities, such as location-
based interfaces for making virtual content private and au-
diting content visibility [8, 9], mediating shared experiences
with remote collaborators [50], and using personal tablets in
shared spaces to separate private and public content [62,72].
While these works present speciﬁc multi-user AR systems,
our work is the ﬁrst to systematically and broadly consider
the design space for AR sharing control and our module
could be leveraged when implementing these prior ideas.
There is a rich literature on access control (see, e.g., [7] for
an overview). Our work does not assume what access control
model is best for a particular app. Our implementation lever-
ages an access control matrix [30] as a simple and ﬂexible
model for per-user and per-object permissions; we intend for
other established access control models in speciﬁc app con-
texts (e.g., [17, 68]) to be layered on top of our toolkit, and
we instead focus on the challenges of managing the implica-
tions of access control in the 3D physical AR setting.
Work in AR user experience has surfaced security- and
privacy-relevant themes for multi-user contexts. Lebeck et
al. [35] surface multi-user concerns such as physiological at-
tacks, virtual clutter, and the obscurity of other users’ ac-
tions. Poretski et al. [48] examine normative tensions in AR,
emphasizing enforcing personal space and designing for user
control. Olsson et al. [46,47] identify user needs such as con-
trol over privacy, socially appropriate ways to interact with
devices, and solutions for abuse of public content by other
users. These studies shed light on desired system properties
and user concerns but do not directly address system design;
our work builds concretely on these ﬁndings.
Multi-user digital interactions that take place in a physical
space have also been studied in the context of tabletop inter-
faces and large computerized displays [44, 57–59, 71]. Our
work addresses similar needs for and tensions around public
versus private content arising in the AR setting, where im-
mersive 3D content can be situated anywhere in the physical
world rather than constrained to a shared display.
9 Conclusion
Multi-user AR technologies hold much promise, but also
raise security and privacy risks in the potentially undesir-
able interactions between human users. These risks should
be addressed while AR ecosystems are being actively devel-
oped rather than after sub-optimal ad hoc conventions have
taken root. To that end, we are the ﬁrst to systematically
develop a set of security and functionality goals for multi-
user AR. We present the design of a sharing control module
for AR content, which we envision as an app-level library or
OS interface that can be leveraged by app developers. Our
work identiﬁes and addresses key challenges that stem from
AR’s tight integration into the physical world. Our proto-
type, ShareAR,4 for the Microsoft HoloLens demonstrates
the feasibility of our design, and our evaluation suggests that
it meets our design goals and imposes minimal performance
overhead. By addressing multi-user AR sharing control sys-
tematically now, we are taking steps toward securing the
fully ﬂedged multi-user AR applications of the future.
Acknowledgments
We thank Ivan Evtimov, Earlence Fernandes, Kiron Lebeck,
Lucy Simko, and Anna Kornfeld Simpson for valuable dis-
cussions and feedback on previous drafts; we thank James
Fogarty for his advice on tabletop interface related work.
This work was supported in part by the National Science
Foundation under awards CNS-1513584, CNS-1565252, and
CNS-1651230, and by the Washington Research Foundation.
References
[1] J. Alexander. ‘Ugandan Knuckles’ is overtaking VRChat, Jan.
2018. https://www.polygon.com/2018/1/8/16863932/
ugandan-knuckles-meme-vrchat.
[2] R. Alp G¨uler, N. Neverova, and I. Kokkinos. DensePose:
Dense human pose estimation in the wild. In CVPR, 2018.
[3] E. Alvarez.
Facebook’s next big augmented real-
https:
ity push is multiplayer games, Sept. 2018.
//www.engadget.com/2018/09/07/facebook-ar-
games-multiplayer-first-look/.
[4] ARCore. https://developers.google.com/ar/.
[5] ARKit. https://developer.apple.com/arkit/.
[6] AR Studio.
https://developers.facebook.com/
products/camera-effects/ar-studio/.
[7] M. Bishop. Computer Security: Art and Science. Addison-
Wesley Professional, 2nd edition, 2018.
[8] A. Butz, C. Beshers, and S. Feiner. Of vampire mirrors and
privacy lamps: Privacy management in multi-user augmented
environments. In ACM UIST, 1998.
[9] A. Butz, T. H¨ollerer, S. Feiner, B. MacIntyre, and C. Besh-
ers. Enveloping users and computers in a collaborative 3D
augmented reality. In IEEE/ACM International Workshop on
Augmented Reality, 1999.
[10] J. T. Chiang, J. J. Haas, and Y.-C. Hu. Secure and precise lo-
cation veriﬁcation using distance bounding and simultaneous
multilateration. In WiSec, 2009.
[11] S. Curtis.
Sex pests are using Apple AirDrop to
send explicit pictures to unsuspecting commuters, Aug.
2017.
https://www.mirror.co.uk/tech/sex-pests-
using-apple-airdrop-10987968.
[12] L. D’Antoni, A. Dunn, S. Jana, T. Kohno, B. Livshits, D. Mol-
nar, A. Moshchuk, E. Ofek, F. Roesner, S. Saponas, et al.
Operating system support for augmented reality applications.
HotOS, 2013.
[13] J. A. de Guzman, K. Thilakarathna, and A. Seneviratne. Se-
curity and privacy approaches in mixed reality: A literature
survey, 2018. http://arxiv.org/abs/1802.05797.
4See arsharing.cs.washington.edu or arsharingtoolkit.com
USENIX Association
28th USENIX Security Symposium    155
[14] T. Denning, Z. Dehlawi, and T. Kohno. In situ with bystanders
of augmented reality glasses: Perspectives on recording and
privacy-mediating technologies. In CHI, 2014.
[15] Digi-Capital.
Ubiquitous $90 billion AR to dom-
$15
2018.