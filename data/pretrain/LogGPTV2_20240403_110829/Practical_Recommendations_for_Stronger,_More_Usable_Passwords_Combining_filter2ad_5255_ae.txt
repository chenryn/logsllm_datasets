longer and contain more character classes than required; this was
more pronounced in our experiments than in previous studies. In
Appendix C, we examine passwords from studies conducted from
2010 to 2019 and observe that in more recent studies, and in those
with a password meter, users were more likely to exceed length
and character-class requirements. Second, password guessing has
improved over time, and more so for passwords containing three
or four character classes than for passwords containing one or two
classes. We describe this in more detail in Appendix D.
5.2 Blocklist requirements
Blocklists can be useful, but only if carefully configured. Both the
wordlist and matching algorithm can significantly affect password
strength and usability. Our experiments show that some blocklist
configurations are much more likely than others to make password
creation a frustrating and time-consuming experience. Given a
blocklist composed of passwords that appear at least four times
in public password leaks, a blocklist policy configured to reject
passwords that contain a five-character substring of any blocklisted
password will strengthen resulting passwords, but with a severe
7We assume passwords are created with feedback that includes a strength meter and
text feedback, similar to our study.
impact on usability. We also find blocklist configurations that do not
offer sufficient strength protections. Full-string matching against a
list of roughly 105 commonly leaked passwords leads to a negligible
improvement in defense against guessing attacks. However, a more
fuzzy matching algorithm such as one that performs the same check
ignoring non-alphabetic characters can improve password strength
without requiring a larger set of leaked passwords to check against.
We recommend that policies containing blocklist requirements
should not additionally require passwords to contain a minimum
number of character classes, especially if the blocklist check is
based on rejecting any password exactly matching one that has
been previously compromised in a public leak. Although further
research is needed to confirm this, our results suggests that pass-
words subjected to such a blocklist check may actually be weaker if
additionally required to contain all four character classes. One ex-
planation for this is that easily-guessed 4c8 passwords may be less
likely to appear in public leaks than easily-guessed 1c8 passwords
and so are less likely to be included in blocklists.
Two 1c8 blocklist configurations we tested performed well with
respect to both security and usability: the Xato wordlist combined
with strip-cifs matching and the Pwned blocklist combined with fs
matching. The Pwned-fs blocklist configuration may be stronger
against online attacks than the Xato-strip-cifs blocklist. Although
the two configurations have similar usability in general, the higher
dropout rate in Experiment 2 for 1c8+Pwned-fs suggests that that
policy may be more frustrating for some users. Unlike the easily-
embedded Xato-strip-cifs blocklist, the Pwned-fs blocklist is less
useful for fully client-side password checking.
System administrators incorporating a blocklist check should
check for password-policy compliance remotely on the server, since
clients collecting passwords can misbehave or lie. Password checks
against externally controlled databases of leaked passwords in-
volve some security risk, even if mitigated by transmitting partial
password hashes. Concerned organizations can perform leaked-
password checks locally, either against a large set of leaked pass-
words (30 GB uncompressed for a comprehensive set [10]) or against
a Bloom filter, which substantially reduce storage space require-
ments at the expense of false positives (1.1 GB for a Bloom filter
with a false positive rate of 0.1% for the same set). If using a large
blocklist with a Bloom filter or a smaller blocklist with a strip-cifs
matching, it may be useful to also check for policy compliance lo-
cally to facilitate real-time requirements feedback without network
latency introduced by remote checks.
5.3 Minimum-strength requirements
Our results confirm that minimum-strength requirements can effec-
tively guide users toward stronger passwords without significantly
inhibiting password memorability or ease of password creation.
The choice of minimum-strength threshold depends on security
requirements; too low a threshold may not provide enough defense
(particularly against online attacks) and too high a threshold may
unacceptably inhibit usability.
When online attacks are a concern, we recommend setting the
minimum-strength threshold to at least 106. We recommend us-
ing minimum-strength requirements alongside minimum-length
requirements, but without blocklists or character-class require-
ments. While our results suggest that, when combined with a
minimum-strength requirement, policies that require multiple char-
acter classes improve resistance against offline attacks, similar im-
provement can be achieved with less impact on password-creation
usability by increasing the minimum-strength threshold or the
minimum required length. For example, 1c8+NN12 had similar us-
ability to 3c8+NN6 but led to much stronger passwords (post-hoc
comparison, see Table 6 in Appendix).
Increasing the minimum-strength threshold improves the se-
curity of passwords, but too high a threshold can make creating
passwords difficult and annoying. For example, for online services
that prioritize a seamless user experience, usability impacts from a
1c8+NN12 policy may be unacceptable.
One might question why minimum-strength thresholds above
106 guesses but below 1014 guesses are useful; a 106 threshold will
help avoid the most predictable passwords that might be guessed in
an online attack, and in scenarios where attackers can make more
than 106 guesses, any threshold below 1014 will not be enough
to prevent account compromise in an offline guessing attack on a
hashed and salted database of passwords [7]. Although resistance
to guessing attacks between feasible online (106) and extensive
offline (1014) attacks may not always prevent account compromise,
we note that policies with minimum-strength thresholds between
106 and 1014 resulted in significantly higher resistance to offline
guessing attacks at a 1014 cutoff; a NN8 minimum-strength policy
not only prevents the most predictable 108 passwords, but also
increases the proportion of created passwords with guess numbers
above 1014 relative a NN6 policy. In addition, the use of tunable,
slow hashing algorithms and increased computational resources
for guessing attacks over time means that guessing thresholds
other than 106 and 1014 (including 108 and 1010) can be relevant to
protect against. As demonstrated in Experiment 2, by combining
minimum-strength requirements with specific minimum-length
requirements, we can achieve this benefit of increased resistance
to offline guessing without incurring substantial negative impact
on the ease of password creation.
In general, increasing length requirements for a given minimum-
strength policy strengthened passwords produced under that policy
against offline attacks, while maintaining strength against online
attacks. Since we didn’t find any significant usability differences
between length variants of the 1c8 and 1c10 minimum-strength
policies that we tested, this suggests that the longer-length ver-
sions of these policies should be preferred for their security benefits.
However, we note that longer minimum-length requirements for a
given minimum-strength requirement do not always come without
a usability hit; in Experiment 1, 1c16+NN6 led to noticeably higher
levels of reported annoyance and difficulty during password cre-
ation than did 1c8+NN6. This illustrates the importance of testing
specific combinations of minimum-length and minimum-strength
requirements before their deployment in a password policy.
Synthesizing these results, we recommend a password policy
of 1c12+NN10 for security settings that need protection against
offline attacks while still providing reasonable usability. Similar
to blocklists, system administrators using a minimum-strength
requirement should check that the requirement is met at both the
client and at the remote server.
5.4 Blocklists vs. minimum-strength policies
A main goal of our study was to compare blocklist and minimum-
strength policies while considering both security and usability.
We find that both types of policies can protect well against 106
online attacks without unduly harming usability: both the 1c8+Xato-
strip-cifs and 1c8+Pwned-fs blocklist policies achieve these goals,
as does the minimum-strength 1c8+NN6 policy. However, we also
find that minimum-strength policies can provide better protection
than top-performing blocklist policies against offline attacks, while
improving usability.
Why use minimum-strength policies if blocklists are adequate
as a defense against online attacks and easy to deploy? Prior work
has also suggested that protecting against guessing attacks beyond
the threshold of effort possible in online attacks may be wasted
effort, e.g., users suffer through a more painful password-creation
process for no practical security gain [7]. We believe minimum-
strength policies are a good alternative, for a few reasons. First,
we believe minimum-strength policies can be deployed just as
easily—if not more easily—than blocklist policies, particularly as
the smaller blocklists we tested were not adequately effective. Our
results are based on a client-side NN model that could be pre-
trained and distributed to system administrators. Second, users
often reuse passwords, including between high-value and low-value
accounts [22, 32]. Even if an organization is not concerned about of-
fline attacks, e.g., due to sophisticated hashing, its users may reuse
their passwords on less secure systems. In this case, resistance to
offline attacks would still be relevant. Third, we showed that using
minimum-strength policies can increase password strength without
noticeable negative impact on user experience.
6 CONCLUSION
We explored in depth three types of requirements enforced in pass-
word policies: composition requirements, blocklists, and neural-
network-driven minimum-strength requirements. Using two large-
scale, experimentally designed user studies, we examined the se-
curity and usability of each type of requirement, and their combi-
nations, when deployed in a modern password meter. Our results
lead to concrete recommendations for configuring blocklist require-
ments. We recommend that blocklist requirements either check
candidate passwords against a list of about 105 commonly leaked
passwords using a fuzzy matching algorithm or perform a full-string
check against a large list consisting of all known leaked passwords.
Password policies incorporating blocklist requirements should not
impose character-class requirements. We also find that minimum-
strength policies, which we believe our work to be the first to
closely investigate in a user study, can improve upon blocklist poli-
cies by increasing resilience to offline attacks without degrading
usability. We recommend a 1c12+NN10 minimum-strength policy
for organizations that wish to protect high-value accounts without
a substantial negative usability impact.
ACKNOWLEDGMENTS
The authors thank Billy Melicher, Blase Ur, Maggie Oates, Hana
Habib, Kentrell Owens, our shepherd Daniel Zappala, and the
anonymous reviewers. This project was funded in part by gifts
from Microsoft Research, Google, and NVIDIA.
A NEURAL NETWORK TRAINING
Here we present additional tables and plots related to the training
and evaluation of the PGS3 NN models used in our user studies.
Prior to conducting our user study, we trained neural network
models for predicting password strength. Our models were created
using code based on prior work by Melicher et al. [16]. Similar
to their work, we trained a large Tensorflow-based Keras model
containing three recurrent layers and two densely connected layers.
Each recurrent layer contained 512 LSTM units and each dense
layer contained 1,000 units. Our models used a vocabulary of 96
characters, including lowercase, uppercase, digits, and symbols.
The minimum and maximum lengths of passwords predicted by
our model were 8 and 30 characters, and the context length was
10 characters wide. We did not apply rare character or lettercase
optimizations, nor dropout. Our base 1c8 model was trained using
two NVIDIA Tesla P100 GPUs and a batch size of 1024 samples for
20 epochs over a period of 11 days. For each large Keras model,
we also trained a smaller version containing 200 units in both the
LSTM and dense network layers. We then created a model that
could be included in a client-side password meter by converting
the smaller Keras model into a TensorflowJS model. While the size
of the large NN models were around 100MB, each TensorflowJS
NN model was approximately 4.7MB uncompressed, including the
precomputed probability-to-guess-number mapping file.
Policy
1c8
1c16
2c12
3c8
3c12
4c8
PGS++ (old)
73.4 million
2.5 million
13.3 million
13.6 million
4.1 million
311 thousand
PGS3 (new)
32.8 million
1.5 million
5.4 million
5.7 million
1.8 million
599 thousand
Table 4: Training data used for PGS3 and PGS++ [16] NN
models. Each PGS3 model other than the 1c8 model was
trained using transfer learning, initialized according to
model weights for a superset policy (e.g., the 3c8 model was
trained starting from the trained 1c8 model).
We experimented with transfer learning in order to train policy-
specific NN models, which prior work had found improved 1c16
guessing performance, particularly for large guess numbers [16].8
A primary difference between the PGS++ NN models used in
prior work [16] and our PGS3 models is that our models contained
a character-level embedding layer. The embedding size was set
to eight dimensions. Another difference between the prior PGS++
models and our PGS3 models is the training data used for each set
of models, which consisted of of PGS-compliant passwords in the
LinkedIn, Mate1, RockYou, and 000webhost datasets. As shown in
Table 4, our training data contains many fewer 1c8 passwords, but
slightly more 4c8 passwords.
We compared the guessing effectiveness of our PGS3 NN models
and the prior PGS++ model for 1c8, 3c8, and 4c8 passwords collected
in Experiment 1. As demonstrated in Figure 6, the PGS3 models
guessed passwords from each of these policies more effectively than
8We only trained composition-requirements-specific NN models for Experiment 1.
These models were also used for Experiment 2.
Figure 6: Guessing performance of the PGS++ and PGS3 NN
models for passwords collected in Experiment 1. In contrast
to the previous PGS++ model, the PGS3 model guesses 1c8,
3c8, and 4c8 passwords at similar rates.
the PGS++ model. Furthermore, we find that the improvement in
guessing performance is largest for 4c8, followed by 3c8, and then
by 1c8. While we do notice a small increase in guessing performance
for 1c8 passwords, this increase was not statistically significant. For
3c8 and 4c8 passwords, the increase was statistically significant (PP;
3c8: 𝜒=11.9, p=.001; 4c8: 𝜒=18.2, p<.001). We experimented with
many model variations in order to understand which differences
between the PGS3 and PGS++ models led to these results. We found
that the majority of the guessing improvement of PGS3 over PGS++
could be attributed to the inclusion of the embedding layer in the
PGS3 model. On the other hand, the PGS3 training data and the
application of policy-specific transfer learning produced only slight
improvements in guessing performance.
B MINIMUM-STRENGTH-REQUIREMENT
ATTACKERS
For a minimum-strength policy, the underlying NN used to estimate
password strength and allow or reject passwords can be leveraged
by attackers to improve guessing effectiveness. As a rough analysis
of how much benefit this kind of attacker knowledge provides, we
plot and compare guess curves for both situations. To simplify anal-
ysis, we plot the password guessability under each policy according
to browser-NN guess numbers. These guess numbers are similar to
PGS3-NN guess numbers that we primarily report, modulo artifacts
introduced during NN compression.
As illustrated in Figure 7, a minimum-strength-aware attacker
does gain a noticeable increase in guessing effectiveness, equivalent
to those passwords able to be guessed in the head start afforded by
skipping minimum-strength-rejected passwords (e.g., skipping 106
passwords for a NN6 policy). However, this benefit quickly fades
within an order of magnitude or fewer guesses.
C HOW HAVE PASSWORDS CHANGED?
Results from our experiments related to the impact of character-
class requirements on password guessability differed from those
reported in prior work. Prior work has found that policies requir-
ing more character classes tend to produce overall stronger pass-
words. In contrast, in our study participants assigned to 1c8, 3c8,
0%20%40%34567891011121314log neural guess numberCumulative % guessed3c8,PGS34c8,PGS31c8,PGS33c8,PGS++4c8,PGS++1c8,PGS++study collected using a meter (similar to ours), we see a 13% jump
in the percentage of passwords containing four classes. We also
find increases in the number of character classes contained in pass-
words over time that are not attributable to use of a meter. As
shown in Table 5, 2016 passwords collected without a meter had
27% fewer passwords containing exactly one class and 15% more
passwords containing four classes compared to 2010 passwords
collected without a meter. Similarly, 1c8 passwords collected in
our study contained 16% more passwords containing four classes
compared to passwords collected in 2016 using the same meter.
Figure 8: Length distribution for 1c8 passwords collected in
studies over time.
Besides containing more character classes, we find that pass-
words have become longer over time. As illustrated in Figure 8, both
the year of the study and the use of a password meter appear to be
associated with this change. For example, 1c8 passwords collected
without a meter in 2016 had roughly 15% fewer passwords that were
exactly eight characters long compared to passwords collected with-
out a meter in 2010. We also see evidence that the password meter
played a role in lengthening passwords; 2016 passwords collected
with a meter had approximately 10% fewer passwords that were ex-
actly eight characters long compared to passwords collected in the
same study without a meter. We observe similar password-length
distributions for passwords collected in 2016 and 2019 using the
same password meter.
D CHARACTER CLASSES AND
GUESSABILITY
In our study we find that character-class requirements are not only
annoying, but provide little security benefit in terms of defending
against guessing attacks. As mentioned in Appendix C, this result
applies to character-class requirements in a policy deployed using
a password meter similar to the one we use. Here we show sup-
port that a rough relationship still exists between the number of
character classes actually contained in a password and password
guessability, for passwords collected via a 1c8 policy.
In Figure 9 we plot guess curves for passwords containing an ex-
act number of character classes.9 We see that the PGS3 NN guesses
9We chose to subset passwords created under different policies, rather than subset
only 1c8 passwords, in order to focus on passwords created by participants who may
tend to satisfy minimum requirements only. If we had performed a similar analysis on
only 1c8 passwords, then comparisons between passwords containing exactly one class
versus four classes might also implicitly compare passwords created by participants
who naturally put different levels of effort into creating strong passwords.
Figure 7: Password guessability against minimum-strength-
aware and minimum-strength-oblivious attackers. Both
types of attackers order password guesses from most
probable to least probable. The minimum-strength-aware
attacker additionally avoids making guesses that
the
minimum-strength requirement would have rejected. The
NN8 and NN10 conditions are from Experiment 2. This plot
shows browser-NN guess numbers.
and 4c8 policies created passwords that did not significantly differ
in strength. As noted in Section 5.1, this change appeared to be in
part due to the fact that participants in our study were more likely
to exceed composition requirements than participants from prior
work. To investigate further, we compared how password lengths
and character-class compositions have changed across both prior
work and in our study.
We focused our comparisons to passwords collected in three sep-
arate studies under a 1c8 policy with no other restrictions, which