# 【技术分享】利用硬件防御ROP：HA-CFI技术浅析

**译文声明**
本文为翻译文章，原文来源于安全客。译文仅供参考，具体内容和含义以原文为准。

**作者**: [bind0g](http://bobao.360.cn/member/contribute?uid=2777870006)

**稿费**: 500 RMB（欢迎投稿！）

**投稿方式**: 发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 前言
随着漏洞缓解技术的不断进步，传统的漏洞利用手段如ROP变得越来越困难。ENDGAME公司的Cody Pierce在其博客中表示，新的漏洞缓解技术将有效应对未知威胁，并宣布他们实现了一种全新的基于硬件辅助的控制流完整性（HA-CFI）防御机制。然而，这种观点总是存在争议，因为总有新的漏洞利用方法出现，黑客的创造力不可小觑。例如，Flash推出的一系列漏洞缓解机制中仍存在漏洞（如CVE-2016-4249），这表明现有防护措施并非无懈可击。只有深入了解这些新的漏洞缓解机制，才能更好地绕过它们，从而对未来的新防御机制有所启发。

## 控制流完整性 (CFI)
控制流完整性是一种由加州大学和微软公司于2005年提出的安全机制，旨在防御控制流劫持攻击。该机制通过监视程序运行过程中的控制流转移，确保其始终处于合法范围内。具体做法是分析程序的控制流图，重点关注间接转移指令（如间接跳转、间接调用和函数返回等），并生成相应的白名单。在程序运行过程中，对这些间接转移指令的目标地址进行检查，如果目标不在白名单内，则立即阻断，从而保障系统安全。

控制流完整性通常分为细粒度和粗粒度两种实现方式。细粒度CFI严格检查每一个间接转移指令的目标地址，但会严重影响程序执行效率；而粗粒度CFI则将一组或相近类型的目标归类进行检查，在一定程度上降低了开销，但也牺牲了部分安全性。

## 基于硬件的CFI
早期的CFI实现主要依赖于二进制插桩技术，即在每条控制流转移指令前插入验证代码来判断目标地址的合法性。然而，这种方法的性能开销巨大，难以实际部署。因此，研究人员提出了一些改进方法，放宽了检查条件，但实质上仍是粗粒度CFI，容易被攻击者绕过。

为了提高效率，可以考虑引入硬件机制。Intel提供了一系列用于优化应用程序性能的硬件支持，包括LBR（Last Branch Record）、BTS（Branch Trace Store）和PMU（Performance Monitoring Unit）。以下是对这些技术的简要介绍：

### LBR
LBR是一组循环寄存器，用于记录和追踪程序最近的若干次跳转信息。寄存器数量取决于处理器架构，例如Haswell架构中有16个寄存器，Skylake架构中有32个。LBR的强大之处在于其高度可定制性，能够过滤掉不重要的跳转指令，保留关键信息。

### BTS
BTS用于记录程序分支信息，与LBR不同的是，它将跳转指令信息存储到CAR（cache-as-RAM）或系统DRAM中，没有条数限制，但时间开销较高。

### PMU
PMU用于记录处理器事件，包含数百个详细的事件类型，如指令计数、浮点运算指令计数等。其中，分支预测失败事件对于HA-CFI尤为重要。

## HA-CFI基本思路
现代处理器采用流水线技术执行指令，分支预测是保证高效执行的关键技术之一。当处理器遇到分支指令时，若无法确定下一条指令，会导致流水线中断。分支预测通过预测可能的分支路径，使处理器继续执行而无需等待。若预测成功，则继续执行；若失败，则需要回退到分支位置重新执行。

无论使用何种分支预测策略，攻击者劫持指令流后，目标地址显然无法被处理器预测到，会产生一个分支预测失败的PMU事件。HA-CFI通过检测这类事件来识别潜在的攻击行为。为了精确定位被劫持的位置，还需要借助LBR的帮助。当PMU报告分支预测失败事件时，ISR从LBR中获取最新的间接跳转指令，并核对其目标地址是否在白名单中。如果不在白名单内，则及时阻断。

此外，为了进一步提高HA-CFI的效率，可以根据当前进程的重要性选择性地开启或关闭PMU。例如，对于IE或Firefox浏览器等高风险进程，开启PMU；而对于低风险进程（如Calc.exe），则关闭PMU。

## 效果与展望
Cody Pierce等人选取了多个经典CVE漏洞，与EMET进行了比较，结果显示HA-CFI具有显著的优势。未来，随着对抗技术的不断升级，漏洞利用的门槛将越来越高，与防御机制的较量也将成为常态。

除了EMET，Intel在今年6月发布了一份关于CET（Control-flow Enforcement Technology）的技术前瞻，准备从硬件层面防止ROP和JOP攻击。通过引入shadow stack专门存储返回地址，每次函数调用时，除了向当前线程栈压入返回地址外，还要向shadow stack压入返回地址。返回时，检查两个栈中的返回地址是否一致，如果不一致，则说明线程栈可能遭到破坏，程序中止。此外，shadow stack受到严密保护，普通代码无法修改。

尽管CET和HA-CFI都具有很高的潜力，但总有绕过的方法。未来的防御机制需要不断进化，以应对新的威胁。

**参考资料**
- [Capturing 0day Exploits with PERFectly Placed Hardware Traps](https://www.endgame.com/blog/capturing-0day-exploits-perfectly-placed-hardware-traps)
- [What are Intel LBR, BTS, and AET?](http://blog.asset-intertech.com/test_data_out/2013/11/what-are-intel-lbr-bts-and-aet.html)
- [Advanced usage of last branch records](https://lwn.net/Articles/680996/)
- [Intel® Microarchitecture Codename Nehalem Performance Monitoring Unit Programming Guide](https://software.intel.com/sites/default/files/m/5/2/c/f/1/30320-Nehalem-PMU-Programming-Guide-Core.pdf)
- [浅谈分支预测、流水线与条件转移](http://www.cnblogs.com/yangecnu/p/4196026.html)