title:Detecting Conflicts in a Role-Based Delegation Model
author:Andreas Schaad
Detecting Conﬂicts in a Role-based Delegation Model
Andreas Schaad
University of York
Department of Computer Science
YO10 5DD, York, U.K.
PI:EMAIL
Abstract
2 Outline
The RBAC96 access control model has been the basis
for extensive work on role-based constraint speciﬁcation
and role-based delegation. However, these practical exten-
sions can also lead to conﬂicts at compile and run-time. We
demonstrate, following a rule-based, declarative approach,
how conﬂicts between speciﬁed Separation of Duty con-
straints and delegation activities can be detected. This ap-
proach also demonstrates the general suitability of Prolog
as an executable speciﬁcation language for the simulation
and analysis of role-based systems. Using an extended deﬁ-
nition of a role we show how at least one of the conﬂicts can
be resolved and discuss the impacts of this extension on the
speciﬁed constraints.
1 Introduction
Signiﬁcant work has been done on role-based access
control models, most of which has been presented in
the ACM workshops on role-based access control. The
RBAC96 model [14] and its extensions are the result of
these discussions.
Two signiﬁcant areas of extensions to the RBAC96
model have been proposed, one concentrating on the speci-
ﬁcation of constraints [3, 1], the others describing a frame-
work for role-based delegation [2, 8]. However, these two
extensions create a new range of problems within a role-
based access control model such as RBAC96. The main
concern is that speciﬁed Separation of Duty constraints can
conﬂict with a model allowing for the delegation of author-
ity through role transfer.
A simple example is that two roles r1 and r2 are de-
clared as mutually exclusive. A valid Separation of Duty
constraint is that a user must not be assigned to the two ex-
clusive roles at the same time. Assuming that a user u1
already holds r1, a delegation of r2 to user u1 would result
in a conﬂict with the separation constraint.
We give an initial motivation for the integration of role-
based constraints and delegation mechanisms into a single
system (Section 3), and discuss related work (Section 4). A
rule-based approach to detect possible conﬂicts at compile
and at run-time, using Prolog as a general constraint speci-
ﬁcation and implementation language, is presented (Section
5). Using the example of a department processing cheques,
we apply these rules to detect conﬂicts and analyse in which
cases the delegation of roles causes additional violation of
constraints (Sections 6 and 7). This is followed by a brief
discussion on the necessity of conﬂict analysis and the tech-
nical suitability of Prolog for such a task (Section 8). We
then discuss how a different deﬁnition of a role could help
us to resolve at least one of the previously detected conﬂicts
(Section 9 and 10) and ﬁnally provide a summary, conclu-
sion and discussion of future work (Section 11).
3 Motivation
We discussed the role-based access control system of a
European bank in [17]. This clearly showed that there are
real world applications which require support for role-based
delegation.
A trivial but highly realistic example is that of an em-
ployee being ill. On a short-term basis his roles might have
to be delegated to another employee so that he can cover
his ill colleague for a day. However, making a formal re-
quest to the system administrator, and asking for the re-
quired changes to be performed immediately, is often not
feasible due to the lack of resources. Instead it would be
more efﬁcient to allow for a delegation of authority between
peers without any speciﬁc administrative power.
This example also presents us with an environment in
which the enforcement of Separation of Duty constraints
and implementation of conﬂict detection mechanisms are
of major importance with respect to the overall criticality of
the company’s operations.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
4 Related Work
5 Role-based Conﬂict Analysis
The seminal work on role-based access control mod-
els was the introduction of the RBAC96 model family
by Sandhu et al. [14], hereafter simply referred to as the
RBAC96 model. It has served as the basis for a signiﬁcant
part of the role-based access control research and is likely
to become a NIST standard [15].
In the RBAC96 model
family, the central notion is that permissions are associated
with roles, and users are made members of appropriate roles
thereby acquiring the roles’ permissions.
RH
Role Hierarchy
UA
User
Assigment
PA
Permission
Assigment
P
Permissions
R
Roles
U
Users
user
roles
S
Sessions
Constraints
Figure 1. The RBAC96 model family
Several extensions have been proposed to the RBAC96
model, one of which is the RCL2000 language for con-
straint speciﬁcation [1] and the other the RBDM0 delega-
tion model [2]. The RCL2000 language provides a frame-
work for the speciﬁcation of Separation of Duty constraints
within the RBAC96 model. The constraints that are de-
scribed are partially based on previous work on separation
of duties, here mainly [4, 12, 11, 18, 7]. Although the del-
egation of authority has been subject to intensive research
before [10, 19, 13], the RBDM0 model was the ﬁrst to de-
scribe delegation between regular roles within the RBAC96
role context. A notable extension and formalisation of the
RBDM0 model is presented in the rule-based approach of
Longhua et al. [8].
As far as we are aware of, no work on conﬂict detection
exists within the scope of the RBAC96 model. Other role-
based frameworks [9] and description languages [6] address
this topic, but the proposed detection and resolution mech-
anisms heavily depend on their speciﬁc deﬁnition of roles
and policies and cannot be directly applied within RBAC96-
type models.
5.1 Using Prolog as a declarative language
Prolog is a declarative language based on facts, rules and
questions with built-in support for backtracking. Strings be-
ginning with an upper case letter indicate the use of a vari-
able. Strings beginning with a lower case are constants. For
a more thorough introduction to Prolog and its backtrack-
ing mechanism we refer to [5]. Facts are represented as n-
ary relations of the form fact(x1,x2,...,xn), always
followed by a fullstop. So a valid set of facts to express that
supervisor is a role, andreas is a user and andreas holds or
is assigned to the role of a supervisor would be:
role(supervisor).
user(andreas).
holds(andreas, supervisor).
Rules take the form of the form Head:-Body, where
the body is a conjunction of facts or other rules, all of which
need to be satisﬁed such that the head of the rule can suc-
ceed. So the following rule would express that a role R1
can be delegated by a user U1 to a user U2 if role(R1),
user(U1), user(U2) can all be inferred from the facts
given to the system, and the rule holds(U1,R1) evalu-
ates to true:
can_delegate(R1, U1, U2):-
role(R1),
user(U1),
user(U2),
holds(U1, R1).
Prolog also allows us to ask questions. So in order to de-
termine all the users with their assigned roles in our system,
we ask:
| ?- holds(User, Role).
and would receive an answer such as:
User = andreas, Role = supervisor;
User = jonathan, Role = accountant;
User = james, Role = clerk;
This indicates that andreas holds the role of a supervisor,
jonathan that of an accountant and james that of a clerk in
the current system conﬁguration. Asking the system a ques-
tion such as ”is ’clerk’ a valid role in our system?” could be
asked by typing
| ?- role(clerk).
and would result in yes as an answer, assuming that the
fact role(clerk) is part of the fact base.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
5.2 Specifying Role-based access control in Prolog
The basis for our simulation and later analysis is the
RBAC96 access control model and the RBDM0 delegation
model. A summary of the formal RBAC96 elements, the
RBDM0 delegation extensions and our corresponding Pro-
log code can be found in Table 1.
Translating the RBAC96 model
into Prolog clauses
The basic many-to-many user-role
is straightforward.
and role-permission relations are expressed in the clauses
holds(User, Role) and cando(Role, Permis-
sion). The concept of sessions is captured using the
simpliﬁed relation plays(User, Role) to express ac-
tivation of a role. Role hierarchies are presented as a
binary relation between roles using the predicate supe-
rior(Role1, Role2). RBAC96 functions such as
Users:(cid:1) (cid:1) (cid:2) (cid:1), which delivers the set of users assigned
to a role, had to be expressed in more complex rules and are
not explained in more detail here. However, the full Pro-
log translation and the facts we used for describing our later
scenario are also described in the Appendix.
The RBDM0 model deﬁnes the ability of a user to au-
thorize another user to become a member of a delegated
role. So unlike the decentralised administration and del-
egation of authority through deﬁned administrative roles
[13], a user can now make delegation decisions by him-
self and delegate roles he was originally assigned with to
other users. Thus, a role can be assigned with original
members and delegated members, a property deﬁned by
the RBDM0 functions Users O(r) and Users D(r) respec-
tively. This is modeled in Prolog extending the user-role as-
signment relation, using the predicates holds o(User,
Role) and holds d(User, Role). So in order to de-
termine which roles a user is generally assigned to we spec-
iﬁed the following rules:
holds(User, Role):-
holds_o(User, Role).
holds(User, Role):-
holds_d(User, Role).
Delegation in the RBDM0 model is further based on the
following assumptions:
(cid:2) No delegation between members in the same role.
(cid:2) Delegation is only allowed between the original holder
of a role and a delegate who does not possess that role
so far (One-step property).
(cid:2) Delegation is total and all permissions associated with
a role are delegated.
In Prolog, these assumptions are either implemented as
speciﬁc rules or can be inferred from the given facts. Al-
though the RBDM0 model speciﬁes role revocation and
timing properties we do not discuss these in this context
and they are not part of the implementation.
5.3 Adding constraints to our speciﬁcation
We implemented Separation of Duty constraints as a set
of Prolog rules and used them for asking questions to our
system. However, the rules could also be triggered by spec-
iﬁed events such as administrative actions. In this case any
administrative action would be checked against the speci-
ﬁed constraints. Ideally conﬂicts should be detected even
before the operation is fully carried out.
The constraints we implemented are a subset (Table 2) of
the static and dynamic Separation of Duty constraints pro-
posed in the taxonomy of Simon and Zurko [18] . Mutu-
ally exclusive roles as described in [7] are added as facts to
the Prolog fact base. Thus, declaring the two roles of ac-
countant and clerk to be exclusive would be speciﬁed as the
symmetric relation:
mutex(accountant, clerk).
The Static Separation of Duty (SSoD) constraint deﬁnes
that two roles are strongly exclusive, if no person is ever
allowed to hold both of them at the same time. Two ex-
clusive roles have thus no common assigned user. The
dynamic Separation of Duty constraints we implemented
are the Simple Dynamic Separation of Duty (SDSoD), the
Object-based Separation of Duty (ObjSoD) and the Opera-
tional Separation of Duty (OpSoD).
SDSoD requires that any two exclusive roles must not be
activated at the same time by the same user. ObjSoD allows
for simultaneous activation, but a user must not use any of
his exclusive roles to act upon an object he has acted upon
before in another of his exclusive roles. Preserving OpSoD
means that all permissions a user has through his exclusive
roles should not allow him to perform all the actions re-
quired for the completion of a critical process.
When specifying these Prolog conﬂict detection rules,
we tried to keep our speciﬁcation as simple as possible us-
ing pure Prolog. However, at certain points we had to make
use of standard built-in predicates such as setof/3, as
they would allow us to perform more complex operations
such as determining the set of assigned roles for a user.
Static conﬂict detection is solely based on the facts given to
our system at compile-time. Dynamic conﬂict detection re-
quired the simulation of user behaviour at run-time. We had
to use the assert/1 and retract/1 database manipu-
lation features of Prolog to insert and delete new or obsolete
facts to or from the database.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:10:28 UTC from IEEE Xplore.  Restrictions apply. 
An example for such a dynamic manipulation would be
the insertion of the fact that user andreas activated his su-
pervisor role, which would be expressed as:
assert(plays(andreas, supervisor)).
This adds the fact plays(andreas, supervi-
sor) to our fact base and is from the time of insertion used
for any search by the Prolog inference engine.
6 A cheque processing scenario
We use the standard simpliﬁed example of an accoun-
tancy department processing cheques as a basis for the sim-
ulation of Separation of Duty conﬂicts and their further
analysis. Issuing a cheque is a sensitive process. Separa-
tion of Duty constraints are used in order to prevent a single
user from preparing, signing and dispatching a cheque all
by himself. In our scenario preparing a cheque means that
the details are ﬁlled in by an accountant. The supervisor
then signs the cheque, as he alone has the legally required
signature authority over the account from which the money
is drawn. A clerk ﬁnally dispatches the cheque to the re-
cipient. We assume that in this case the role of the supervi-
sor will be assigned with the permission to print a signature
onto the cheque, thus giving any member of the supervisor
role the ability to sign the cheque, although he might not
necessarily be legally entitled to do so. The initial conﬁg-
uration of our system is deﬁned as follows (See Appendix
and Figure 2): User andreas is assigned to the role of the su-
pervisor, user jonathan is assigned to the role of the accoun-
tant and clerk, and the users jeremy and james are assigned
to the role of a clerk. The accountant can prepare cheques,
the supervisor can sign cheques, and the clerk can only dis-
patch cheques. The roles of the supervisor and accountant
and the roles of the accountant and clerk are mutually ex-
clusive. Mutual exclusiveness is non-transitive.
andreas
supervisor
sign_cheque
mutex
Separation of Duties conﬂict for user jonathan in his role as
an accountant and clerk when posed with the query:
| ?- staticsod(User, Role1, Role2).
User = jonathan ,
Role1 = accountant ,
Role2 = clerk ;
We can imagine this constraint to be relaxed in order
to allow the accountant to prepare and dispatch cheques
in times of limited processing capacities due to staff short-
age. Now the users activate all their roles, simulated by as-
serting facts such as assert(plays(jonathan, ac-
countant)) into the database. As expected, the simple
dynamic Separation of Duties constraint is broken for user