# AFL源码分析（Ex.1）——附录（Part 1）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0\. 写在前面
此文章主要是对`AFL`仓库中`doc`目录下的所有文档进行翻译。
  * [x] env_variables.txt(环境变量手册) —— 本文
  * [ ] historical_notes.txt(历史记录)
  * [ ] INSTALL(安装说明)
  * [x] life_pro_tips.txt(使用技巧) —— 本文
  * [ ] notes_for_asan.txt
  * [ ] parallel_fuzzing.txt
  * [ ] perf_tips.txt
  * [ ] QuickStartGuide.txt
  * [ ] sister_projects.txt
  * [ ] status_screen.txt
  * [ ] technical_details.txt
后续附录将继续翻译以上列表中的文章。
## 1\. life_pro_tips.txt(使用技巧)
  1. 此文档是为那些了解基础知识但又懒得阅读或记住`AFL` 的所有其他文档的人提供的小建议。
  2. 通过使用模糊字典获得更多的有效测试结果。请参阅`dictionaries/README.dictionaries`了解如何操作。
  3. 为了充分使用电脑的硬件资源，可以使用`AFL`的并行作业模式(多进程模式)。(详见`docs/parallel_fuzzing.txt`了解如何操作)
  4. 通过使用`libdislocator.so`获得更多的有关内存损坏的测试结果。请参阅`libdislocator/README.dislocator`了解如何操作。
  5. 如果您想了解`fuzz`器是如何解析输入样本的，请使用`afl-analyze`工具，此工具将通过彩色输出的方式为您展示。
  6. 您可以直观的监控`fuzz`测试的进度，请使用`afl-plot`工具，此工具将生成浏览器友好的监控GUI。
  7. 您也可以通过编程的方式来监控`fuzz`测试的进度，请使用`afl-whatsup`工具或者直接操作`AFL`输出目录中的`fuzzer_stats`文件。
  8. 对`AFL`实时结果中显示为红色或紫色的重要信息感到困惑，请查阅`docs/status_screen.txt`获取进一步解释！
  9. 您可以将您的测试目标转换为持续模式以获得巨大的性能提升！请参阅`llvm_mode/README.llvm`中的第`5`部分以获取提示。
  10. 如果您使用`clang`语言，查看`llvm_mode/`下的文件以获取`afl-gcc`的更快替代方案！
  11. 您知道`AFL`可以对闭源代码、黑/灰盒文件、跨平台/跨架构文件进行模糊测试吗？查看`qemu_mode/README.qemu`了解更多信息。
  12. 您知道`afl-fuzz`可以帮您将任何测试用例最小化吗？试试随`AFL`项目提供的`afl-tmin`工具，他能帮您快速获得小型目标文件！
  13. 不确定`fuzz`出的导致样例`crash`的输入样本是否可利用？`AFL`可以帮助您解决问题。指定`-C`以启用崩溃探索模式。有关更多信息，请参阅自述文件中的第 10 节。
  14. Trouble dealing with a machine uprising? Relax, we’ve all been there.Find essential survival tips at .译者注：此条`Tips`总感觉像是`AFL`项目组开的一个小玩笑，翻译过来是如何应对关于机器毁灭人类的问题，由于此条`Tip`过于无厘头，因此不做翻译，直接附上原文，喜欢科幻的读者可以随便看看(？
  15. `AFL`生成的语料库可用于为其他测试过程提供参考。请参阅`README`文件中的第`2`节以获取灵感 – 这往往会产生意料外的结果！
  16. 想要自动化的发现不会导致崩溃的内存处理错误？尝试通过`ASAN`、`MSAN`或`Valgrind`运行`AFL`生成的语料库。
  17. 正确选择输入文件对于成功的模糊测试工作至关重要。如果需要此方面的专业提示，请参阅自述文件(或`docs/perf_tips.txt`)中的第`5`部分。
  18. 您可以手动设置相关选项以提高`AFL`自动化发现堆栈损坏问题的几率，您可以在环境中指定`AFL_HARDEN=1`以启用强化标志。
  19. 遇到了不可重现的崩溃问题？此类问题往往会发生，但通常不难诊断。如果您想获得有关提示，请参阅自述文件中的第`7`节。
  20. 模糊测试不仅仅可以找到关于代码库中的内存损坏问题。您可以添加一些健全性检查，例如`assert()/abort()` 语句以轻松捕获逻辑错误。
  21. 如果你想弄清楚`AFL`是如何真正运作的，查看`docs/technical_details.txt`以了解所有细节！
  22. 有大量旨在与`AFL`配合使用的第三方帮助工具！在编写自己的第三方工具之前，请务必查看`docs/sister_projects.txt`。
  23. 需要对特定程序的命令行参数进行模糊测试？您可以在`Experiment/argv_fuzzing`中找到一个简单的解决方案。
  24. 您的测试目标使用校验和的格式？删除校验和检查代码或使用后处理器！有关更多信息，请参阅`experimental/post_library/`。
  25. 处理一个非常缓慢的目标但是希望立即获得结果？调用`afl-fuzz`时指定`-d`！
  26. 
## 2\. env_variables.txt(环境变量手册)
本文档讨论了`American Fuzzy
Lop`使用的环境变量，这些变量可以帮助高级用户或需要进行某些类型的自定义模糊测试的用户，这些环境变量可以用于影响`fuzz`器的函数行为。有关一般说明手册，请参阅自述文件。
### 2.1. `afl-gcc`、 `afl-clang`、 `afl-as`相关的设置
因为它们不能直接接受命令行选项，所以编译时这三个工具相当广泛地使用了环境变量：
  * `AFL_HARDEN`：实际调用下游编译工具时，设置此环境变量将会自动添加代码安全性强化选项。目前包括`-D_FORTIFY_SOURCE=2`和`-fstack-protector-all`。该设置对于捕获不会导致程序崩溃的内存错误很有用，但代价是非常轻微(低于`5%`)的性能损失。译者注：下游编译工具指实际调用的编译工具，例如`afl-gcc`最后实际调用的下游编译工具是`gcc`。
  * `AFL_DONT_OPTIMIZE`：默认情况下，`AFL`将附加`-O3`以优化构建。在极少数情况下，这会导致使用`-Werror`构建的程序出现问题。`-O3`可以进行更彻底的代码分析，并且可以产生额外的警告。要禁用优化，请设置此环境变量。译者注：为了使`FORTIFY`生效，必须同时设置`-O2`以上优化，因此，同时设置以上两个环境变量将有可能导致`FORTIFY`机制失效。
  * `AFL_USE_ASAN`：设置此环境变量会自动启用`ASAN`机制，前提是编译器支持该功能。请注意，使用`ASAN`进行模糊测试具有一定的挑战性 – 请参阅`notes_for_asan.txt`。(您也可以通过`AFL_USE_MSAN`启用`MSAN`；`ASAN`和`MSAN`具有相同的问题；这两种模式是互斥的。`UBSAN`和其他的检测程序尚未得到官方支持，但很容易手动调试并整合进`AFL`)译者注：`MSAN`、`ASAN`、`UBSAN`均是通过代码插桩等方式进行漏洞检测的选项。
  * `AFL_CC`、`AFL_CXX`、`AFL_AS`：设置这些环境变量可让您使用备用的下游编译工具，而不是`$PATH`中的默认`clang`、`gcc`或`as`二进制文件。
  * `AFL_PATH`：此环境变量可用于为`afl-gcc`指定一个`afl-as`的备用位置。一种可能的用途是`experimental/clang_asm_normalize/`，这将允许您在编译`clang`代码时通过将规范化器插入链中来检测手写的汇编码。 (`GCC`中没有类似的功能）
  * `AFL_INST_RATIO`：将此环境变量设置为`0%`到`100%`之间的百分比可控制检测每个分支的概率。这在处理使输出位图饱和的异常复杂的程序时很有用(尽管这种情况很少)。示例包括`v8`、`ffmpeg`和`perl`。(如果发生这种情况，`afl-fuzz`会通过以火红色显示“位图密度”字段来提前警告您。)将`AFL_INST_RATIO`设置为`0`是一个不错的选择。这将只检测函数入口点之间的转换，而不是单个程序分支。
  * `AFL_NO_BUILTIN`：此环境变量使编译器生成适合与`libtokencap.so`一起使用的代码(但运行速度可能比没有此环境变量时慢一些)。
  * `TMPDIR`：此环境变量被`afl-as`用于存放临时文件；如果未设置此变量，则默认为`/tmp`。
  * `AFL_KEEP_ASSEMBLY`：当此环境变量被设置，`afl-as`将保留其生成的中间文件。这有助于解决问题或了解该工具的工作原理。要将它们置于可获取的位置，请尝试以下操作： 
        mkdir assembly_here
    TMPDIR=$PWD/assembly_here AFL_KEEP_ASSEMBLY=1 make clean all
  * `AFL_QUIET`：当此环境变量被设置，`afl-cc`和`afl-as`的`banner`将不在编译期间显示，以防您被它们分散注意力。
### 2.2. `afl-clang-fast`相关的设置