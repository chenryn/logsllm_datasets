lookup times increase the smaller |R| is relative to |S|; when
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
e
z
S
i
r
e
t
l
i
F
l
t
a
o
T
d
e
t
c
e
p
x
E
226
224
222
220
218
100MB
10MB
1MB
100KB
10KB
1KB
210
216
214
212
100B
35M total provisioned items
215
210
Full Provisioned Occupancy (|R| + |S|)
220
225
230
r
o
f
s
e
h
s
a
H
#
d
e
t
c
e
p
x
E
R
m
o
r
f
s
m
e
t
I
f
o
s
p
u
k
o
o
L
 30
 25
 20
 15
 10
 5
 0
35M total provisioned items
210 212 214 216 218 220 222 224 226
215
210
Full Provisioned Occupancy (|R| + |S|)
220
225
230
r
o
f
s
e
h
s
a
H
#
d
e
t
c
e
p
x
E
S
m
o
r
f
s
m
e
t
I
f
o
s
p
u
k
o
o
L
 30
 25
 20
 15
 10
 5
 0
35M total provisioned items
210 212 214 216 218 220 222 224 226
215
210
Full Provisioned Occupancy (|R| + |S|)
220
225
230
(a) Expected size of a ﬁlter cascade when
ﬁlled to provisioned occupancy.
(b) Expected number of hashes when looking
up an element from R.
(c) Expected number of hashes when looking
up an element from S.
Fig. 3: Simulation results of a ﬁlter cascade. The size and expected lookup time are functions of the occupancy of both the
stored set (R) and its complement (S). Numbers annotating lines represent |R|.
there are 35M total provisioned items, it takes ∼19 hashes to
look up an element of R when |R| = 1,024, but only ∼5 hashes
√
when |R| =|S|. This is because p1 = r
p/s and therefore the
number of hash functions in the ﬁrst ﬁlter is proportional to
log s/r. Second, it takes fewer expected lookups for elements
of S than for R: typically 1.5–3.1 fewer hashes in expectation.
This is because elements of S can be ruled out in the ﬁrst level,
with a smaller false positive rate (p1), while every element of
R must be checked in the ﬁrst two levels, at least.
Broadly, these empirical results demonstrate how promising
ﬁlter cascades are for certiﬁcate revocation: Their size is
determined predominantly by R, and therefore will not grow
considerably with the more prevalent, non-revoked certiﬁcates
S. Moreover,
lookup times for elements of S are faster,
which is encouraging because non-revoked certiﬁcates are
encountered more frequently.
IV. SYSTEM DESIGN
In this section, we present the design of CRLite. This sys-
tem applies recent advances in Certiﬁcate Transparency [45],
along with ﬁlter cascades, to achieve complete and universal
dissemination of certiﬁcate revocation information. At a high
level, we aggregate all revocation information for every known
certiﬁcate, compactly represent them in a ﬁlter cascade, and
provide a means by which clients can publicly audit us.
We begin this section by describing our goals, assumptions,
and threat model. Then, we discuss the CRLite protocol
from the perspective of the server and client, respectively. In
subsequent sections, we describe the implementation, analysis,
and empirical evaluation of CRLite that collectively show that
it is effective and practical to deploy today.
A. Goals
Our primary objective is to develop a system that quickly
and efﬁciently pushes all available revocations to web
browsers. To make widespread adoption possible and desir-
able, our system must:
• Not require changes to CAs, certiﬁcates, or websites.
• Be incrementally deployable and incur minimal changes
to clients.
• Protect client privacy.
• Offer security guarantees that are no worse (and hopefully
much stronger) than existing revocation schemes.
• Not increase (and ideally reduce) page-load times and
bandwidth consumption as compared to existing revoca-
tion checking schemes.
We are far from the ﬁrst to propose these goals, but prior
efforts have been unable to achieve all of these properties
in tandem (see § II). As we will demonstrate, the advent of
CT [45] puts them within grasp, at last.
B. Threat Model and Assumptions
Fundamentally, an attack against CRLite seeks at least one
of three outcomes: (1) to make a valid certiﬁcate appear
revoked, (2) to make a revoked certiﬁcate to appear valid, or
(3) to harm client’s user experience by delaying or halting a
user’s ability to obtain revocation information.
We operate within a set of assumptions that are standard
in today’s web. We assume an active attacker that is able to
manipulate a victim’s web trafﬁc, e.g., via a man-in-the-middle
(MitM) attack or blocking trafﬁc. However, we make standard
cryptographic assumptions: particularly that the attacker is
unable to forge signatures without access to a principal’s
private key. Additionally, we make two assumptions that are
standard in the web’s PKI: First, we assume that clients trust
a common set of root certiﬁcates [58] to be benign and
uncompromised. Second, we assume that clients’ clocks are
loosely synchronized, so that they may check the expiration
dates of certiﬁcates and of the data we disseminate, to within
the order of about a day. Finally, like with the OCSP Must-
Staple option [33], we assume that each CA’s revocation
information is available to our aggregation server at least once
every 12 hours to ensure that clients are up-to-date to within
a 24-hour period.
Our design uses a logically centralized aggregator that is re-
sponsible for obtaining all certiﬁcates (e.g., from CT logs) and
546
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
Raw Certificates
from 3rd Parties
Univ. of Mich.
IPv4 Scans (67M)
Rapid7
IPv4 Scans (78M)
Cert. Transparency
Logs (50M)
Validation and Extraction
Crawling
Multi-Level Filter Construction
CRLite Aggregator
Unique, Valid
Certificates (30M)
Unique CRLs
(10K URLs)
{Serial, OCSP URL}
Tuples (12M tuples)
CRLs
OCSP
Responses
Level 1
Level 2
...
Level i
12.7M Revocations
Client Files
Daily Filter (10.08 MB)
Delta Update (0.58 MB)
Yesterday’s Filter
Audit Log (200 GB)
Fig. 4: Server-side pipeline of CRLite. Each day, this process constructs a new ﬁlter cascade, delta update to the previous day’s
ﬁlter cascade, and an audit log. Example statistics are given as of January 30, 2017.
their corresponding revocation information. We assume CT
servers and scanning techniques like ZMap [21] to be trusted,
i.e., that they distribute full views of the HTTPS ecosystem
to the best of their ability. We assume that aggregators can
misbehave by asserting that a valid certiﬁcate is revoked or
that a revoked certiﬁcate is valid. We describe in this section
a public audit procedure that involves no participation from
an aggregator but results in a proof of misbehavior.
C. Server-Side Operation
The server-side aggregator is responsible for collecting raw
data and producing ﬁlters and auditable logs for clients. We
present an overview of the aggregator’s operation in Figure 4.
Obtaining Raw Certiﬁcates.
To create the ﬁlter of revoked
certiﬁcates, CRLite ﬁrst needs a list of all valid certiﬁcates.
VanderSloot et al. [73] show that >99% coverage of all TLS
certiﬁcates known to exist on the web can be obtained by
using two sources of certiﬁcates: full IPv4 scans on port 443,
and Google’s CT logs. Thus, we adopt these data sources for
CRLite. In the future, if CRLite becomes popular, it would
be trivial to extend our certiﬁcate dataset by allowing CAs or
other interested parties to submit missing certiﬁcates, similar
to Google’s CT logs [45]. Indeed, a logical place to deploy an
aggregator would be at a popular CT site.
As shown in Figure 4, CRLite takes as input certiﬁcates
from University of Michigan’s IPv4 scans (covering October
2013 to February 2014) [71], Rapid7’s IPv4 scans (covering
February 2014 to January 2017) [60], and Google’s CT log
(from the Pilot server) [45]. Rapid7 conducts new scans on
a roughly weekly basis, which CRLite automatically down-
loads and adds to its database. Similarly, CRLite mirrors the
transparency log on a daily basis. In total, these data sources
contain 184M unique certiﬁcates (though as we will show,
most of these are invalid [15]).
Validating Certiﬁcates.
The next step in our pipeline
is cleaning the certiﬁcate data. Speciﬁcally, CRLite validates
all certiﬁcates by looking for non-expired, well-formed leaf
and intermediate certiﬁcates that cryptographically chain to a