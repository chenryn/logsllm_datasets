### Lookup Times and Filter Cascade Performance

Lookup times increase as the size of set \( |R| \) decreases relative to \( |S| \). For instance, when there are 35 million total provisioned items, it takes approximately 19 hashes to look up an element in \( R \) when \( |R| = 1,024 \), but only about 5 hashes when \( |R| = |S| \). This is because the probability \( p_1 = \sqrt{\frac{r}{s}} \), and thus the number of hash functions in the first filter is proportional to \( \log \frac{s}{r} \).

Additionally, elements in \( S \) generally require fewer expected lookups than those in \( R \): typically 1.5 to 3.1 fewer hashes. This is due to the fact that elements in \( S \) can be ruled out at the first level with a smaller false positive rate \( p_1 \), while every element in \( R \) must be checked in the first two levels, at a minimum.

These empirical results demonstrate the potential of filter cascades for certificate revocation. The size of the filter cascade is primarily determined by \( R \), so it does not grow significantly with the more prevalent non-revoked certificates \( S \). Furthermore, lookup times for elements in \( S \) are faster, which is beneficial since non-revoked certificates are encountered more frequently.

### System Design: CRLite

#### Overview

In this section, we present the design of CRLite, a system that leverages recent advances in Certificate Transparency (CT) and filter cascades to achieve complete and universal dissemination of certificate revocation information. We aggregate all revocation information for known certificates, represent them compactly in a filter cascade, and provide a means for clients to publicly audit the system.

#### Goals

Our primary objective is to develop a system that efficiently pushes all available revocations to web browsers. To ensure widespread adoption, our system must:

- Not require changes to Certificate Authorities (CAs), certificates, or websites.
- Be incrementally deployable with minimal changes to clients.
- Protect client privacy.
- Offer security guarantees that are at least as strong as, and ideally stronger than, existing revocation schemes.
- Not increase, and ideally reduce, page-load times and bandwidth consumption compared to existing revocation checking schemes.

While these goals are not new, prior efforts have been unable to achieve all of them simultaneously. The advent of CT makes these goals achievable.

#### Threat Model and Assumptions

An attack on CRLite aims to:

1. Make a valid certificate appear revoked.
2. Make a revoked certificate appear valid.
3. Harm the user experience by delaying or halting access to revocation information.

We assume an active attacker capable of manipulating web traffic via man-in-the-middle (MitM) attacks or blocking traffic. However, we make standard cryptographic assumptions, such as the attacker's inability to forge signatures without the private key. We also assume:

- Clients trust a common set of root certificates.
- Clients' clocks are loosely synchronized, allowing checks on expiration dates within a day.
- Each CA's revocation information is available to our aggregation server at least once every 12 hours.

#### Server-Side Operation

The server-side aggregator collects raw data and produces filters and auditable logs for clients. Here is an overview of the process:

1. **Obtaining Raw Certificates:**
   - CRLite needs a list of all valid certificates. VanderSloot et al. [73] show that >99% coverage can be achieved using full IPv4 scans on port 443 and Google’s CT logs.
   - CRLite uses certificates from University of Michigan’s IPv4 scans, Rapid7’s IPv4 scans, and Google’s CT log. These sources contain 184 million unique certificates, though many are invalid.

2. **Validating Certificates:**
   - CRLite validates all certificates, looking for non-expired, well-formed leaf and intermediate certificates that cryptographically chain to a trusted root.

This pipeline ensures that the system has a comprehensive and up-to-date dataset of valid and revoked certificates, enabling efficient and secure revocation checks.