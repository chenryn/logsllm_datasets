VRT cells (AVI) per 15-minute period is 4.5 per DIMM. We
repeat the experiments 100K times and report the average value
of system failure probability (the spread around the average
value is extremely narrow). Figure 12 shows the probability
that the system with Agnos does not have an uncorrectable
error for systems based on the AVP parameters derived from
Module A (Sys-A), Module B (Sys-B), and Module C (Sys-C).
The Agnos system is expected to encounter an uncorrectable
error once every few months. For example, there is a 50%
probability that an error will happen within 6 months for Sys-
B and 8 months for Sys-A. Such a high rate of data loss is
unacceptable in practice.
)
r
o
r
r
E
e
l
b
a
t
c
e
r
r
o
c
n
U
o
N
(
b
o
r
P
1.00
0.75
0.50
0.25
0.00
0.1
 8 months
 6 months
Sys-A
Sys-B
Sys-C
1.0
Number of Months (log 10 scale)
10.0
100.0
Fig. 12.
ECC, Agnos encounters an uncorrectable error once every few months.
Failure rate of Agnos, VRT-Agnostic multirate refresh. Even with
433433
VI. AVATAR: A VRT-AWARE MULTIRATE REFRESH
The problem with Agnos is that it uses ECC to correct
VRT-related errors in a way similar to how ECC is used
to correct soft errors. Unfortunately, while a soft error goes
away once it is corrected, a VRT-cell can continue to remain
vulnerable for several hours. At any time, several hundreds of
cells can exhibit VRT, so using ECC to continuously correct
these persisting errors means that the ECC for the word can no
longer correct any new error in those words. Therefore, instead
of the VRT-agnostic approach of treating VRT similarly to soft
errors, we propose AVATAR, a Variable-Retention-Time Aware
multirate Refresh.
A. Design
Figure 13 shows the design of AVATAR. Similar to mul-
tirate refresh, AVATAR performs an initial retention time
testing to populate the Row Refresh Table (RRT) leveraging
the proﬁling mechanisms described in [19, 29]. Like Agnos,
AVATAR also employs ECC DIMMs to detect and correct
errors due to VRT. Detection and correction happens only
when the line in memory gets accessed (either due to a read
or a write operation). The key insight of AVATAR is to break
the formation of a large pool of Active-VRT cells. AVATAR
does so by upgrading a row to use Fast Refresh, as soon as any
word within the row encounters an ECC error ( 2 ). This means
the vulnerable row gets protected from any further retention
failures and no longer participates in the Active-VRT pool.6
Typically ECC check happens only when the data item
is accessed from memory, which means parts of the memory
region that have low activity can still be vulnerable due to
accumulation of VRT-related errors. AVATAR addresses this
problem by proactively applying a memory scrub ( 3 ), which
periodically checks all the memory for potential data errors.
We employ a scrub once every time period (15 minutes in our
studies). We assume that the scrub operation identiﬁes all the
VRT-related data errors that happen during the scrub interval.
AVATAR upgrades the row to use Fast Refresh on every
ECC correction, regardless of whether such correction happens
due to a regular data access or due to a scrub operation. Thus,
the total number of rows using Fast Refresh tends to grow over
time, albeit very slowly. The effectiveness of AVATAR can be
6ECC correction can also get invoked due to a soft error strike. However,
the frequency of soft errors is very small compared to that of VRT errors
(e.g., the soft error rate is 54-2700x lower than the VRT error rate for an 8GB
DIMM). Thus, we can conservatively assume that an error happens mainly
due to VRT, and the row containing the error is upgraded to use Fast Refresh
although less than 0.05%-2% of the total upgrades may still occur due to
a soft error. Note that an even lower rate of soft errors would improve the
efﬁcacy of our mechanism.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:50 UTC from IEEE Xplore.  Restrictions apply. 
Multirate Refresh
C. Incorporating Failures Due to Soft Errors
1
Retention Testing
(Once a year)
Memory
Data
ECC
3
Scrub
2
Upgrade Row on ECC error
RowID
0: SlowRefresh
1: FastRefresh
0
1
0
0
1
0
0
1
RRT
Fig. 13. Design of AVATAR.
improved by infrequent retention testing ( 1 ) (e.g., once a year;
see analysis in Section VI-E).
B. Failure Rate Analysis
As AVATAR instantly upgrades any row with an ECC error
to use Fast Refresh, the number of Active-VRT cells in any
time period is equal to (or less than) the number of newly
injected errors since the last scrub operation. Thus, the pool of
Active-VRT cells is equal to the rate at which new (previously
undiscovered) cells become VRT cells. To avoid data errors,
we want all the newly injected cells to map to different words.
Let there be W words in an ECC DIMM, where each word
is protected by SECDED (we ignore the words belonging to
the rows identiﬁed as weak rows during the initial testing of
multirate refresh). In each time period, let K unique cells
in memory become Active-VRT cells. We assume that the
new errors come from random locations in memory. In each
time period, the probability that all K errors map to different
locations in memory is given by Equation (4).
P rob(DIMM has no uncorrectable error) =
(1 −
1
W
) × (1 −
2
W
) × . . . × (1 −
K − 1
W
)
(4)
Given that K is very small compared to the number of
words in the DIMM (few tens versus millions), we simplify
the above equation using the approximation e−x ≈ (1 − x),
which degenerates Equation (4) into Equation (5).
P rob(DIMM has no uncorrectable error) = e −K
2W
2
(5)
After T time intervals, the probability that the DIMM does
not have any uncorrectable error is given by Equation (6).
P rob(DIMM has no uncorrectable error) = e −T K
2W
2
(6)
For a system with D DIMMs, the probability that the
system does not have an uncorrectable error after T time
periods is given by Equation (7).
P rob(System has no uncorrectable error) = e −DT K
2W
2
(7)
434434
Thus far, we have assumed that the failure in memory
happens only due to a VRT-related retention error. However,
failures can also happen due to a soft error. We note that
the rate of soft errors is much lower than the rate of VRT-
related errors we consider, so the relative contribution of soft
errors to the overall failure rate is negligible. For example,
the reported soft-error rate from prior studies [1, 5, 27] ranges
from 200 to 5000 FIT per Mbit, which is equivalent to one
failure every 3-75 hours for an 8GB DIMM. In our analysis, we
assume that the error rate related to VRT is 4.5 per 15 minutes,
which is equivalently 54-2700x higher than the error rate of
soft errors. Nonetheless, our model can simply be extended to
accommodate for soft errors by modulating the rate at which
new errors are encountered in memory (i.e., the AVI rate).
For example, to accommodate a soft error rate of 5000 FIT
per Mbit, we would increase the AVI from 4.5 to 4.6 per 15
minutes.
D. Failure Rate Results
We use Equation (7) to assess the failure rate of AVATAR
for our system with 32GB memory consisting of four 8GB
ECC DIMMs. The reliability of AVATAR is dependent only
on the rate of discovering new VRT cells (the AVI rate).
Figure 14 shows the probability that a system with AVATAR
has no uncorrectable error for three rates of AVI, a nominal
rate derived from our experiments (4.6 errors per 15 minutes
per DIMM, including 0.1 errors per 15 minutes for soft errors),
a doubled AVI rate, and a quadrupled AVI rate.7
)
r
o
r
r
E
e
l
b
a
t
c
e
r
r
o
c
n
U
o
N
(
b
o
r
P
1.00
0.75
0.50
0.25
0.00
0.1
AVI=4.6(1x+SE)
AVI=9.1(2x+SE)
AVI=18.1(4x+SE)
 32 Years
 128 Years
 500 Years
1.0
Number of Years (log 10 scale)
100.0
10.0
1000.0
Fig. 14.
The time to uncorrectable error with AVATAR is 500 years with
nominal AVI, and 32 years with a 4x higher AVI Rate. We include a 0.1 AVI
for soft error (SE).
For the nominal rate, even in the presence of a high soft-
error rate, the time to failure with AVATAR is 500 years. When
the AVI rate is doubled, the time to failure is more than 128
years. Even for a quadrupled AVI rate, the time to failure is
32 years. Thus, AVATAR enhances the reliability of multirate
refresh by approximately a thousand times compared to Agnos,
making it feasible to deploy multirate refresh reliably. Except
for the negligible hardware for scrubbing, AVATAR requires
no extra hardware than what is required for multirate refresh
(Section II-C) and ECC DIMM.
7We analyze doubled and quadrupled AVI rates to account for potential
increases in AVI rate, e.g., due to changes in environmental conditions during
system operation.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:50 UTC from IEEE Xplore.  Restrictions apply. 
E. Effective Refresh Savings
TABLE I.
PERFORMANCE AND ENERGY OVERHEAD OF SCRUB
AVATAR conservatively upgrades any row that encounters
an ECC error so that the number of rows refreshed with Fast
Refresh grows over time. Figure 15 compares the reduction in
refresh operations of AVATAR with that of an ideal multirate
refresh scheme that does not suffer from VRT (Agnos, without
VRT errors). For AVATAR, we assume an AVI rate of 4.6.
AVATAR saves 72% of refreshes on a day after testing for
the retention time proﬁle. This is similar to other multirate
refresh schemes such as RAIDR [28]. However,
the prior
multirate refresh schemes provide this refresh savings while
compromising data integrity. Even after 12 months of con-
tinuous operation, the refresh savings with AVATAR are still
high (62.4%). Thus, AVATAR improves reliability of multirate
refresh while maintaining most of the refresh savings. To make
AVATAR even more effective, we recommend that the system
invoke retention testing once a year, which retains the refresh
savings of AVATAR back at 72%.8
)
%
(
h
s
e
r
f
e
R
n
i
n
o
i
t
c
u
d
e
R
100
90
80
70
60
50
40
30
20
10
0
0
1
2
Agnos (No-VRT)
AVATAR 
4
3
Number of Months Since Testing
5
8
6
7
9
10 11 12
Fig. 15. Refresh savings of Agnos and AVATAR. AVATAR maintains most
of the refresh savings of a VRT-Agnostic scheme while avoiding data errors.
F. Overheads of Scrubbing
We assume a default scrub interval of 15 minutes. Frequent
scrubbing enhances the reliability of AVATAR as it allows
fewer undetected Active-VRT cells to stay in memory. If
a system desires even higher reliability than we report, the
system can perform scrubbing at a shorter interval. However,
scrubbing has the overheads of performance (as memory
becomes unavailable) and energy (to perform memory reads).
1) Performance Overhead of Scrubbing: To estimate the
performance overhead, we assume that scrubbing is done at a
row granularity. The time to scrub one row would be equal
to the sum of the time to open a row (tRCD, 14ns), the
time to stream out the row buffer (256ns for 8KB), and the
time to close the row (tRP, 14ns), a total time of 284ns [15].
We estimate the total time required to scrub the 8GB DIMM
(284ns ×220 rows) to be 298ms. This time is spread over
several minutes. Hence, the memory unavailability due to scrub
is negligible. Table I shows the memory throughput loss as the
scrub interval varies. For the 15-minute scrub interval we use,
the memory throughput loss is negligible (0.03%).
8Periodic testing once every few days or months does not have a signiﬁcant
effect on the reliability of the Agnos scheme. Shortly after testing, a pool
of Active-VRT cells would get formed, reverting the system to the same
vulnerable state. Similarly, periodic scrubbing does not have a signiﬁcant
impact on the reliability of Agnos as the VRT cells fail again soon.
435435
Scrub Interval Mem Throughput
(minutes)
4
8
15
30