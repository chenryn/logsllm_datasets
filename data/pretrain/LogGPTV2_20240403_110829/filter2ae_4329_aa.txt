**作者：天融信阿尔法实验室**  
**原文链接：**
## 一、前言
在`JDK7u21`中反序列化漏洞修补方式是在`AnnotationInvocationHandler`类对type属性做了校验,原来的payload就会执行失败,在8u20中使用`BeanContextSupport`类对这个修补方式进行了绕过。
## 二、Java序列化过程及数据分析
在8u20的POC中需要直接操作序列化文件结构,需要对Java序列化数据写入过程、数据结构和数据格式有所了解。
先看一段代码
    import java.io.Serializable;
    public class B implements Serializable {
        public String name = "jack";
        public int age = 100;
        public B() {
        }
    }
    import java.io.*;
    public class A extends B implements Serializable {
        private static final long serialVersionUID = 1L;
        public String name = "tom";
        public int age = 50;
        public A() {
        }
        public static void main(String[] args) throws IOException {
            A a = new A();
            serialize(a, "./a.ser");
        }
        public static void serialize(Object object, String file) throws IOException {
            File f = new File(file);
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
            out.writeObject(object);
            out.flush();
            out.close();
        }
    }
运行A类main方法会生成a.ser文件,以16进制的方式打开看下a.ser文件内容
    0000000 ac ed 00 05 73 72 00 01 41 00 00 00 00 00 00 00
    0000010 01 02 00 02 49 00 03 61 67 65 4c 00 04 6e 61 6d
    0000020 65 74 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53
    0000030 74 72 69 6e 67 3b 78 72 00 01 42 bf 30 15 78 75
    0000040 7d f1 2f 02 00 02 49 00 03 61 67 65 4c 00 04 6e
    0000050 61 6d 65 71 00 7e 00 01 78 70 00 00 00 64 74 00
    0000060 04 6a 61 63 6b 00 00 00 32 74 00 03 74 6f 6d   
    000006f
跟下ObjectOutputStream类,来一步步分析下这些代码的含义
java.io.ObjectOutputStream#writeStreamHeader 写入头信息
java.io.ObjectStreamConstants 看下具体值
`STREAM_MAGIC`
16进制的aced固定值,是这个流的魔数写入在文件的开始位置,可以理解成标识符,程序根据这几个字节的内容就可以确定该文件的类型。
`STREAM_VERSION` 这个是流的版本号,当前版本号是5。
在看下`out.writeObject(object)`是怎么写入数据的,会先解析class结构,然后判断是否实现了Serializable接口,然后执行`java.io.ObjectOutputStream#writeOrdinaryObject`方法
1426行写入`TC_OBJECT,`常量`TC_OBJECT`的值是`(byte)0x73`,1427行调用`writeClassDesc`方法,然后会调用到`java.io.ObjectOutputStream#writeNonProxyDesc`方法
`TC_CLASSDESC`的值是(byte)0x72,在调用`java.io.ObjectStreamClass#writeNonProxy`方法。
721行先写入对象的类名,然后写入`serialVersionUID`的值,看下`java.io.ObjectStreamClass#getSerialVersionUID`方法
默认使用对象的`serialVersionUID`值,如果对象`serialVersionUID`的值为空则会计算出一个`serialVersionUID`的值。
接着调用`out.writeByte(flags)`写入`classDescFlags`,可以看见上面判断了如果是实现了`serializable`则取常量`SC_SERIALIZABLE`
的0x02值。然后调用`out.writeShort(fields.length)`写入成员的长度。在调用`out.writeByte`和`out.writeUTF`方法写入属性的类型和名称。
然后调用`bout.writeByte(TC_ENDBLOCKDATA)`方法表示一个Java对象的描述结束。`TC_ENDBLOCKDATA`常量的值是(byte)0x78。在调用`writeClassDesc(desc.getSuperDesc(),
false)`写入父类的结构信息。
接着调用`writeSerialData(obj,
desc)`写入对象属性的值,调用`java.io.ObjectOutputStream#writeSerialData`
可以看见`slots`变量的值是父类在前面,这里会先写入的是父类的值。
`java.io.ObjectOutputStream#defaultWriteFields`
这里可以总结下,在序列化对象时,先序列化该对象类的信息和该类的成员属性,再序列化父类的类信息和成员属性,然后序列化对象数据信息时,先序列化父类的数据信息,再序列化子类的数据信息,两部分数据生成的顺序刚好相反。
分析Java序列化文件,使用`SerializationDumper`工具可以帮助我们理解,这里使用`SerializationDumper`查看这个序列化文件看下
    STREAM_MAGIC - 0xac ed
    STREAM_VERSION - 0x00 05
    Contents
      TC_OBJECT - 0x73
        TC_CLASSDESC - 0x72
          className
            Length - 1 - 0x00 01
            Value - A - 0x41
          serialVersionUID - 0x00 00 00 00 00 00 00 01
          newHandle 0x00 7e 00 00
          classDescFlags - 0x02 - SC_SERIALIZABLE
          fieldCount - 2 - 0x00 02
          Fields
            0:
              Int - I - 0x49
              fieldName
                Length - 3 - 0x00 03
                Value - age - 0x616765
            1:
              Object - L - 0x4c
              fieldName
                Length - 4 - 0x00 04
                Value - name - 0x6e616d65
              className1
                TC_STRING - 0x74
                  newHandle 0x00 7e 00 01
                  Length - 18 - 0x00 12
                  Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b
          classAnnotations
            TC_ENDBLOCKDATA - 0x78
          superClassDesc
            TC_CLASSDESC - 0x72
              className
                Length - 1 - 0x00 01
                Value - B - 0x42
              serialVersionUID - 0xbf 30 15 78 75 7d f1 2f
              newHandle 0x00 7e 00 02
              classDescFlags - 0x02 - SC_SERIALIZABLE
              fieldCount - 2 - 0x00 02
              Fields
                0:
                  Int - I - 0x49
                  fieldName
                    Length - 3 - 0x00 03
                    Value - age - 0x616765
                1:
                  Object - L - 0x4c
                  fieldName
                    Length - 4 - 0x00 04
                    Value - name - 0x6e616d65
                  className1
                    TC_REFERENCE - 0x71
                      Handle - 8257537 - 0x00 7e 00 01
              classAnnotations
                TC_ENDBLOCKDATA - 0x78
              superClassDesc
                TC_NULL - 0x70
        newHandle 0x00 7e 00 03
        classdata
          B
            values
              age
                (int)100 - 0x00 00 00 64
              name
                (object)
                  TC_STRING - 0x74
                    newHandle 0x00 7e 00 04
                    Length - 4 - 0x00 04
                    Value - jack - 0x6a61636b
          A
            values
              age
                (int)50 - 0x00 00 00 32
              name
                (object)
                  TC_STRING - 0x74
                    newHandle 0x00 7e 00 05
                    Length - 3 - 0x00 03
                    Value - tom - 0x746f6d
## 三、漏洞分析及POC解读
8u20是基于7u21的绕过,不熟悉7u21的可以先看[这篇](https://mp.weixin.qq.com/s/qlg3IzyIc79GABSSUyt-OQ)文章了解下,看下7u21漏洞的修补方式。
`sun.reflect.annotation.AnnotationInvocationHandler#readObject`
        private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
            var1.defaultReadObject();
            AnnotationType var2 = null;
            try {
                var2 = AnnotationType.getInstance(this.type);
            } catch (IllegalArgumentException var9) {
                throw new InvalidObjectException("Non-annotation type in annotation serial stream");
            }