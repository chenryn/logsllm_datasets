.br csin (3),
.br sincos (3),
.br tan (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1991 the regents of the university of california.
.\" all rights reserved.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     @(#)exec.3	6.4 (berkeley) 4/19/91
.\"
.\" converted for linux, mon nov 29 11:12:48 1993, PI:EMAIL
.\" updated more for linux, tue jul 15 11:54:18 1997, PI:EMAIL
.\" modified, 24 jun 2004, michael kerrisk 
.\"     added note on casting null
.\"
.th exec 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
execl, execlp, execle, execv, execvp, execvpe \- execute a file
.sh synopsis
.nf
.b #include 
.pp
.b extern char **environ;
.pp
.bi "int execl(const char *" pathname ", const char *" arg ", ..."
.b  "                /*, (char *) null */);"
.bi "int execlp(const char *" file ", const char *" arg ", ..."
.b  "                /*, (char *) null */);"
.bi "int execle(const char *" pathname ", const char *" arg ", ..."
.bi "                /*, (char *) null, char *const " envp "[] */);"
.bi "int execv(const char *" pathname ", char *const " argv "[]);"
.bi "int execvp(const char *" file ", char *const " argv "[]);"
.bi "int execvpe(const char *" file ", char *const " argv \
"[], char *const " envp "[]);"
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br execvpe ():
.nf
    _gnu_source
.fi
.sh description
the
.br exec ()
family of functions replaces the current process image with a new process
image.
the functions described in this manual page are layered on top of
.br execve (2).
(see the manual page for
.br execve (2)
for further details about the replacement of the current process image.)
.pp
the initial argument for these functions is the name of a file that is
to be executed.
.pp
the functions can be grouped based on the letters following the "exec" prefix.
.\"
.ss l - execl(), execlp(), execle()
the
.i "const char\ *arg"
and subsequent ellipses can be thought of as
.ir arg0 ,
.ir arg1 ,
\&...,
.ir argn .
together they describe a list of one or more pointers to null-terminated
strings that represent the argument list available to the executed program.
the first argument, by convention, should point to the filename associated
with the file being executed.
the list of arguments
.i must
be terminated by a null pointer,
and, since these are variadic functions, this pointer must be cast
.ir "(char\ *) null" .
.pp
by contrast with the 'l' functions, the 'v' functions (below) specify the
command-line arguments of the executed program as a vector.
.\"
.ss v - execv(), execvp(), execvpe()
the
.i "char\ *const argv[]"
argument is an array of pointers to null-terminated strings that
represent the argument list available to the new program.
the first argument, by convention, should point to the filename
associated with the file being executed.
the array of pointers
.i must
be terminated by a null pointer.
.ss e - execle(), execvpe()
the environment of the new process image is specified via the argument
.ir envp .
the
.i envp
argument is an array of pointers to null-terminated strings and
.i must
be terminated by a null pointer.
.pp
all other
.br exec ()
functions (which do not include 'e' in the suffix)
take the environment for the new process
image from the external variable
.i environ
in the calling process.
.ss p - execlp(), execvp(), execvpe()
these functions duplicate the actions of the shell in
searching for an executable file
if the specified filename does not contain a slash (/) character.
the file is sought in the colon-separated list of directory pathnames
specified in the
.b path
environment variable.
if this variable isn't defined, the path list defaults to
a list that includes the directories returned by
.ir confstr(_cs_path)
(which typically returns the value "/bin:/usr/bin")
and possibly also the current working directory;
see notes for further details.
.pp
.br execvpe ()
searches for the program using the value of
.b path
from the caller's environment, not from the
.i envp
argument.
.pp
if the specified filename includes a slash character, then
.b path
is ignored, and the file at the specified pathname is executed.
.pp
in addition, certain errors are treated specially.
.pp
if permission is denied for a file (the attempted
.br execve (2)
failed with the error
.br eacces ),
these functions will continue searching the rest of the search path.
if no other file is found, however,
they will return with
.i errno
set to
.br eacces .
.pp
if the header of a file isn't recognized (the attempted
.br execve (2)
failed with the error
.br enoexec ),
these functions will execute the shell
.ri ( /bin/sh )
with the path of the file as its first argument.
(if this attempt fails, no further searching is done.)
.pp
all other
.br exec ()
functions (which do not include 'p' in the suffix)
take as their first argument a (relative or absolute) pathname
that identifies the program to be executed.
.sh return value
the
.br exec ()
functions return only if an error has occurred.
the return value is \-1, and
.i errno
is set to indicate the error.
.sh errors
all of these functions may fail and set
.i errno
for any of the errors specified for
.br execve (2).
.sh versions
the
.br execvpe ()
function first appeared in glibc 2.11.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br execl (),
.br execle (),
.br execv ()
t}	thread safety	mt-safe
t{
.br execlp (),
.br execvp (),
.br execvpe ()
t}	thread safety	mt-safe env
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.pp
the
.br execvpe ()
function is a gnu extension.
.sh notes
the default search path (used when the environment
does not contain the variable \fbpath\fr)
shows some variation across systems.
it generally includes
.i /bin
and
.ir /usr/bin
(in that order) and may also include the current working directory.
on some other systems, the current working is included after
.i /bin
and
.ir /usr/bin ,
as an anti-trojan-horse measure.
the glibc implementation long followed the traditional default where
the current working directory is included at the start of the search path.
however, some code refactoring during the development of glibc 2.24
.\" glibc commit 1eb8930608705702d5746e5491bab4e4429fcb83
caused the current working directory to be dropped altogether
from the default search path.
this accidental behavior change is considered mildly beneficial,
and won't be reverted.
.pp
the behavior of
.br execlp ()
and
.br execvp ()
when errors occur while attempting to execute the file is historic
practice, but has not traditionally been documented and is not specified by
the posix standard.
bsd (and possibly other systems) do an automatic
sleep and retry if
.b etxtbsy
is encountered.
linux treats it as a hard
error and returns immediately.
.pp
traditionally, the functions
.br execlp ()
and
.br execvp ()
ignored all errors except for the ones described above and
.b enomem
and
.br e2big ,
upon which they returned.
they now return if any error other than the ones
described above occurs.
.sh bugs
before glibc 2.24,
.br execl ()
and
.br execle ()
employed
.br realloc (3)
internally and were consequently not async-signal-safe,
in violation of the requirements of posix.1.
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=19534
this was fixed in glibc 2.24.
.\"
.ss architecture-specific details
on sparc and sparc64,
.br execv ()
is provided as a system call by the kernel
(with the prototype shown above)
for compatibility with sunos.
this function is
.i not
employed by the
.br execv ()
wrapper function on those architectures.
.sh see also
.br sh (1),
.br execve (2),
.br execveat (2),
.br fork (2),
.br ptrace (2),
.br fexecve (3),
.br system (3),
.br environ (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/clog10.3
.so man3/rcmd.3
.so man3/atoi.3
.\" copyright (c) 2003 andries brouwer (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th cfree 3 2021-03-22  "" "linux programmer's manual"
.sh name
cfree \- free allocated memory
.sh synopsis
.nf
.pp
.b "#include "
.pp
/* in sunos 4 */
.bi "int cfree(void *" ptr );
.pp
/* in glibc or freebsd libcompat */
.bi "void cfree(void *" ptr );
.pp
/* in sco openserver */
.bi "void cfree(char *" ptr ", unsigned int " num ", unsigned int " size );
.pp
/* in solaris watchmalloc.so.1 */
.bi "void cfree(void *" ptr ", size_t " nelem ", size_t " elsize );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br cfree ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _bsd_source || _svid_source
.fi
.sh description
this function should never be used.
use
.br free (3)
instead.
starting with version 2.26, it has been removed from glibc.
.ss 1-arg cfree
in glibc, the function
.br cfree ()
is a synonym for
.br free (3),
"added for compatibility with sunos".
.pp
other systems have other functions with this name.
the declaration is sometimes in
.i 
and sometimes in
.ir  .
.ss 3-arg cfree
some sco and solaris versions have malloc libraries with a 3-argument
.br cfree (),
apparently as an analog to
.br calloc (3).
.pp
if you need it while porting something, add
.pp
.in +4n
.ex
#define cfree(p, n, s) free((p))
.ee
.in
.pp
to your file.
.pp
a frequently asked question is "can i use
.br free (3)
to free memory allocated with
.br calloc (3),
or do i need
.br cfree ()?"
answer: use
.br free (3).
.pp
an sco manual writes: "the cfree routine is provided for compliance
to the ibcse2 standard and simply calls free.
the num and size
arguments to cfree are not used."
.sh return value
the sunos version of
.br cfree ()
(which is a synonym for
.br free (3))
returns 1 on success and 0 on failure.
in case of error,
.i errno
is set to
.br einval :
the value of
.i ptr
was not a pointer to a block previously allocated by
one of the routines in the
.br malloc (3)
family.
.sh versions
the
.br cfree ()
function was removed
.\" commit 025b33ae84bb8f15b2748a1d8605dca453fce112
from glibc in version 2.26.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br cfree ()
t}	thread safety	mt-safe /* in glibc */
.te
.hy
.ad
.sp 1
.sh conforming to
the 3-argument version of
.br cfree ()
as used by sco conforms to the ibcse2 standard:
intel386 binary compatibility specification, edition 2.
.sh see also
.br malloc (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2008, linux foundation, written by michael kerrisk
.\"	
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th getnetent_r 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
getnetent_r, getnetbyname_r, getnetbyaddr_r \- get
network entry (reentrant)
.sh synopsis
.nf
.b #include 
.pp
.bi "int getnetent_r(struct netent *restrict " result_buf ,
.bi "                char *restrict " buf ", size_t " buflen ,
.bi "                struct netent **restrict " result ,
.bi "                int *restrict " h_errnop );
.bi "int getnetbyname_r(const char *restrict " name ,
.bi "                struct netent *restrict " result_buf ,
.bi "                char *restrict " buf ", size_t " buflen ,
.bi "                struct netent **restrict " result ,
.bi "                int *restrict " h_errnop );
.bi "int getnetbyaddr_r(uint32_t " net ", int " type ,
.bi "                struct netent *restrict " result_buf ,
.bi "                char *restrict " buf ", size_t " buflen ,
.bi "                struct netent **restrict " result ,
.bi "                int *restrict " h_errnop );
.pp
.fi
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br getnetent_r (),