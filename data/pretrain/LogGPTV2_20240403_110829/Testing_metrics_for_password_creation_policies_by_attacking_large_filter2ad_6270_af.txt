mangling rules for the password to be accepted. 
This  is  merely  a  suggestion  though,  and  much  more  research, 
(such as actual use case studies), needs to be done before such a 
password  creation  policy  can  be  considered  secure.  The  main 
point though, and the reason why we put forward this idea, is to 
highlight the fact that there are other approaches that can be taken 
to  strengthen  the  security  of  user  generated  passwords  besides 
forcing the users to create longer passwords with more character 
requirements. 
6. 
Our  experiments  categorically show  that  the  notion  of  password 
entropy, as put forward in the NIST SP800-63 document, does not 
provide  a  valid  metric  for  measuring  the  security  provided  by 
password creation policies. This is not to cast  dispersions at the 
rest of the SP800-63 document which is otherwise of the highest 
quality.  Furthermore,  we  validated  the  findings  in  [7],  using 
empirical evidence, that there is no way to convert the notion of 
Shannon entropy into the guessing entropy of password creation 
policies. 
Moving on from that, we then proceeded to evaluate the security 
that  common  password  creation  policies,  such  as  minimum 
password  length,  and  character  set  requirements  provide  against 
online attacks. Our findings were that absent an external password 
creation policy where the system manually adds randomness to a 
user’s  password,  or  an  implicit  policy  where  a  reject  function 
disallows  weak  passwords,  most  common  password  creation 
policies  remains  vulnerable  to  online  attack.  This  is  due  to  a 
subset  of  the  users  picking  easy  to  guess  passwords  that  still 
comply  with  the  password  creation  policy  in  place,  for example 
“Password!1”.  Whether  such  online  attacks  are  feasible  or  cost 
effective depends on other factors, such as lockout policy, value 
of  the  target,  user  training  etc.  By  conducting  our  experiments 
using real life sets of disclosed passwords though, this provides a 
much  greater  insight  on  how  people  create  passwords  and  the 
vulnerability of those passwords to attack. 
Finally  we  put  forward  several  other  methods  for  password 
creation policies, including our proposed method to evaluate the 
probability  of  a  human  generated  password  by  parsing  it  with  a 
grammar  trained  on  previously  disclosed  password  lists.  This 
allows  us  to  build  a  more  robust  reject  function  compared  to  a 
simple  blacklist,  while  attempting  to  provide  the  most  user 
freedom  possible,  given  the  security  constraints  of  the  system, 
when selecting their passwords. 
More  work  remains  to  be  done  on  this  topic,  as  there  still  are 
multiple  issues  that  remain  unresolved.  For  example,  how  do 
passwords  people  use  on  high  value  targets,  such  as  corporate 
networks or bank accounts, compare with the passwords collected 
from  various  other  websites?  It  is  a  mixed  blessing  that  the 
opportunities  for  this  research  to  be  performed  in  the  future  are 
only  growing  as  more  sites  are  compromised  and  more  datasets 
become  public.  It  is  our  hope  that  this  paper  will  expand  the 
discussion  on  using  empirical  data  collected  from  non-standard 
sources  to  evaluate  the  security  that  different  policies  and 
technologies provide us. 
7. 
This work was supported in part by the U.S. National Institute of Justice 
under Grant 2006-DN-BX-K007. Also, we would like to acknowledge the 
Acknowledgements 
173contributions  that  Breno  de  Medeiros  and  Bill  Glodek  made  in  the 
development of the password cracking grammar described in this paper. 
8. 
[1]  W. Burr, D. Dodson, R. Perlner, W. Polk, S. Gupta, E. 
References 
Nabbus, “NIST Special Publication 800-63-1 Electronic 
Authentication Guideline”,  Computer Security Division, 
Information Technology Laboratory, National Institute of 
Standards and Technology, Gaithersburg, MD, April, 2006 
[2]  Office of Management and Budget, “Draft Agency 
Implementation, Guidance for Homeland Security, 
Presidential Directive 12”, August 2004. 
[3]  P. Bowen, A. Johnson, J. Hash, C. Dancy Smith, D. 
Steinberg, “NIST Special Publication 800-66 An 
Introductory Resource Guide for Implementing the Health 
Insurance Portability and Accountability Act (HIPAA) 
Security Rule”, Computer Security Division, Information 
Technology Laboratory, National Institute of Standards and 
Technology, Gaithersburg, MD. 
[4]  C.E. Shannon, "A Mathematical Theory of Communication", 
Bell System Technical Journal, vol. 27, pp. 379-423, 623-
656, July, October, 1948. 
[5]  C. Herley, “So Long and No Thanks for the Externalities: 
The Rationl Rejection of Security Advice by Users.” NSPW 
09, September 8-11 2009 Oxford, United Kingdom. 
[6]  A. Vance, “If Your Password is 123456 Just Make it 
HackMe” New York Times, January 20th, 2010. Page A1. 
[7]  E. R. Verheul. “Selecting secure passwords”, CT-RSA 2007, 
Proceedings Volume 4377 of Lecture Notes in Computer 
Science, pages 49–66. Springer Verlag, Berlin, 2007. 
[8]  J.L. Massey, “Guessing and Entropy,” Proc. 1994 IEEE 
International Symposium on Information Theory, 1995, 
p.329. 
[9]  The OpenWall Group, [Software] John the Ripper password 
cracker, [Online Document] [cited 2-19-2010] Available 
HTTP http://www.openwall.com 
[10] A list of popular password cracking wordlists, 2005, [Online 
Document] [cited 2010 January 14] Available HTTP 
http://www.outpost9.com/files/WordLists.html 
[11] M. Weir and S. Aggarwal. “Cracking 400,000 Passwords or 
How to Explain to Your Roommate why the Power-Bill is a 
Little High”, Defcon 17, Las Vegas, NV, August 2009 
[12] J. Leversund “The Password Meta Policy” [Online 
Document] [cited 2010 April 16] Available HTTP 
http://securitynirvana.blogspot.com/2010/02/password-meta-
policy.html 
[13] G. Bard, “Spelling-Error Tolerant, Order Independent Pass-
Phrases via the Damerau-Levenshtein String-Edit Distance 
Metric” Fifth Australasian Symposium on ACSW Frontiers - 
Volume 68 (Ballarat, Australia, January 30 - February 02, 
2007), 117-124. 
Symposium on Usable Privacy and Security (SOUPS) 2008, 
July 23–25, 2008, Pittsburgh, PA USA. 
[15] B. Schneier, “Write Down Your Password”, June 17, 2005 
[Online Document] [cited 2010 April 16] Available HTTP 
http://www.schneier.com/blog/archives/2005/06/write_down
_your.html 
[16] Various Authors, “Faithwriters.com hacked message posts” 
[Online Document] [cited 2010 April 16] Available HTTP 
http://forums.crosswalk.com/m_4252083/mpage_1/tm.htm 
[17] B. Ryan, “The Hacking of the http://db.singles.org” [Online 
Document] [cited 2010 April 16] Available HTTP 
http://msmvps.com/blogs/williamryan/archive/2009/02/22/th
e-hacking-of-http-db-singles-org.aspx 
[18] M. Weir, Sudhir Aggarwal, Breno de Medeiros, Bill Glodek, 
“Password Cracking Using Probabilistic Context Free 
Grammars,” Proceedings of the 30th IEEE Symposium on 
Security and Privacy, May 2009. 
[19] R. Morris and K. Thompson. “Password security: a case 
history” Communications. ACM, 22(11):594–597, 1979. 
[20] A. Narayanan and V. Shmatikov, Fast Dictionary Attacks on 
Passwords Using Time-Space Tradeoff, CCS’05, November 
7–11, 2005, Alexandria, Virginia 
[21] J. Yan, A. Blackwell, R. Anderson, and A. Grant. Password 
Memorability and Security: Empirical Results. IEEE 
Security and Privacy Magazine, Volume 2, Number 5, pages 
25-31, 2004. 
[22] T. Wu, "A real-world analysis of kerberos password 
security," in 1999 Network and Distributed System Security 
Symposium, February 1999. 
[23] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. 
Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna, "Your 
botnet is my botnet: Analysis of a botnet takeover," Tech. 
Rep., April 2009. 
[24] Sophos, “Security at risk as one third of surfers admit they 
use the same password for all websites”, [Online Document] 
[cited 2010 July 14] Available HTTP 
http://www.sophos.com/pressoffice/news/articles/2009/03/pa
ssword-security.html  
[25] L. Clair, L. Johansen, W. Enck, M. Pirretti, P. Traynor, P. 
McDaniel and T. Jaeger, “Password Exhaustion: Predicting 
the End of Password Usefulness” ICISS, volume 4332 of 
Lecture Notes in Computer Science, pages 37-55, 2006. 
[26] J. Bonneau, S. Preibusch, “The Password Thicket: Technical 
and Market Failures in Human Authentication on the Web”, 
The Ninth Workshop on the Economics of Information 
Security, WEIS 2010. 
[27] K. Zetter, “Weak Password Brings ‘Happiness’ to Twitter 
Hacker” [Online Document] [cited 10`0 July 19] Available 
HTTP http://www.wired.com/threatlevel/2009/01/professed-
twitt/ 
[14] A. Forget, S. Chiasson, P.C. van Oorschot, R. Biddle, 
“Improving Text Passwords through Persuasion.” 
174Appendix 1: Information about the Password Lists 
The RockYou.com List: 
This list was originally obtained by a hacker via a SQL injection against the RockYou.com website [6]. The actual exploit code was first 
disclosed on the darkc0de.com blackhat message board, where multiple hackers took advantage of it. One of them later publicly posted the 
list and it is now widely available. Theoretically the RockYou website has a password creation policy requiring passwords to be between 8 
and 14 characters long and to NOT include any special characters. This may have been implemented after the attack since the actual list 
contains  many  passwords  that  do  not  meet  those  requirements.  The  RockYou  list  also  includes  multiple  passwords  for  various  social 
networking  sites  such  as  Facebook,  MySpace  and  Friendster.  The  list  we  managed  to  obtain  did  not  include  any  usernames  or  e-mail 
addresses. 
The FaithWriters.com List: 
It is unknown how this site was broken into, but most likely it was due to an SQL injection attack [16]. In the list we obtained, both the e-
mail address and the password were included. The FaithWriters website was primarily composed of Christian writers. It is suspected that 
the  attacker  who  hacked  the  site  was  associated  with  the  4chan.org  or  Ebaumsworld  message  boards.  The  faithwriters  website  had  a 
minimum password length requirement of six characters long, and except for six passwords in the list, all of the passwords complied with 
it. 
The Singles.org List 
The singles.org site was broken into via query string injection, (aka all authentication was done via URLs) [17]. The site advertised itself as 
a dating website for Christian singles. The news of the hack quickly spread to the 4chan.org and ebaumsworld message boards where users 
there quickly exploited the vulnerability to gain access to all of the passwords on singles.org. In many cases, the malicious attackers then 
used those passwords to log into other accounts belonging to the users of singles.org. Since many people choose the same password for all 
of their online accounts, this lead to several serious compromises of Facebook accounts, webmail accounts, Amazon.com accounts, Paypal 
accounts, etc. The password creation policy of the site required all passwords to be eight or less characters long. This list we obtained 
contained e-mail addresses and passwords. 
The Neopets.com List 
It is unknown how this list was originally obtained, but there is a high probability it was done via a phishing attack. Researchers first 
became aware of this list when it was posted publicly on the pastebin.com website. While it is possible that this list is not associated with 
the Neopets site, that is unlikely due to the large number of passwords that correspond to common neopets terminology. Neopets.com is 
website game where users raise electronic pets and battle each other. The game itself is primarily targeted to a younger audience. The 
password list contained e-mail addresses and passwords. 
The PhpBB.com List 
The PhpBB list was originally obtained by a hacker who exploited a flaw in a 3rd party plug-in associated with the phpbb bulletin board 
software  [11].  This  is  ironic  since  the  site  itself  is  the  main  development  website  for  that  bulletin  board.  The  site  did  not  store  user 
passwords in plain text. Instead all of the passwords were hashed using either one round of MD5, or using a salted hash, (consisting of 
several thousand rounds of MD5). The reason for these two hashing algorithms was that the site had upgraded their forum software, but 
until a user logged in, they were not converted to the new password hashing scheme. The attacker had attempted to crack a subset of the 
passwords using an online password cracking program, and managed to crack only 24% of the passwords they targeted. The attacker then 
proceeded to publish online all of the password hashes, the passwords they managed to crack, along with a write-up of their attack. Since 
then we have managed to independently crack 97% of all the MD5 hashed passwords from this set using two desktop computers. The 
PhpBB site did not enforce any password creation policy. 
Appendix 2: Statistical Breakdown of the Password Lists 
Number of Passwords 
Average Password Length 
% that Contain Uppercase 
% that Contain Digits 
% that Contain Special Chars 
% that Only Contain 
Lowercase Letters and Digits 
% that are 7+ Chars Long, and 
Contain Uppercase, 
Lowercase, Digits + Special 
*The RockYou password statistics are taken from the RockYou32 training list which contained 1 million randomly selected passwords 
**The Phpbb statistics only include the 97% of passwords we managed to crack 
FaithWriters.com 
6,193 
7.69 characters 
9.43 
43.54 
0.14 
RockYou.com* 
32,603,388 total 
7.88 characters 
5.95 
54.08 
3.45 
Singles.org 
24,870 
6.62 characters 
8.51 
32.88 
0.20 
Phpbb.com** 
259,424 
7.27 characters 
7.21 
45.77 
1.33 
Neopets.com 
11,732 
6.68 characters 
2.53 
57.19 
1.78 
90.50 
0.03 
91.55 
0.11 
90.76 
0.14 
91.31 
0 
95.61 
0 
175