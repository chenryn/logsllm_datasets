### Apple Wireless Chips and Communication Protocols

#### Overview
Apple's wireless chips, such as those used in audioOS, implement specific protocols to communicate with the Bluetooth chip. For example, the audioOS AOP (Always-on Processor) uses `marconi-bluetooth` and `aop-marconi-bt-control` for Bluetooth communication.

#### RTBuddy
RTKit-based chips use an RTBuddy for logging and other tasks. The IOKit framework is used to manage these interactions between user space and kernel space.

#### Nearbyd and IOKit
The `nearbyd` service interacts with RTKit-based drivers through IOKit. Here is an example of the I/O registry output showing the dependencies:

```plaintext
# ioreg -rtc IOUserClient
+-o Root  
  +-o N104AP  
    +-o AppleARMPE  
      +-o arm-io@10F00000  
      …        +-o RTBuddyV2  
                  +-o AOPEndpoint17  
                    +-o AppleSPU@10000014  
                      +-o rose  
                        +-o AppleSPURoseDriver  
                          +-o AppleSPURoseDriverUserClient  
                              {
                                "IOUserClientCreator" = "pid 549, nearbyd"
                              }
… 
                   +-o AppleSPU@10000020  
                      +-o rose-supervisor  
                        +-o AppleSPUUserClient  
                            {
                              "IOUserClientCreator" = "pid 549, nearbyd"
                              "IOUserClientDefaultLocking" = Yes
                            }
```

For more detailed `ioreg` outputs from current devices, refer to [this GitHub repository](https://github.com/robre/ioreg-archive).

#### Sending Commands Directly to Rose
Commands can be sent directly to the Rose driver using the `IOConnectCallMethod` function. Here is the call stack for a typical command:

```plaintext
User Space
nearbyd
   IOConnectCallMethod(port, 5, …)
Kernel Space
   extRoseTx
   AppleSPURoseDriverUserClient::extRoseTx(‘0504…’)
   AppleSPURoseDriver::performCommand(…)
   AppleSPUInterface::PerformCommand(…)
   AppleSPUInterface::spuPerformCommand(…)
```

The raw command `0x4005` is reversed to `0x0504` before being processed. The command is then forwarded through the following steps:

```c
hsi_cmd()
case 0x4005:
…
```

#### Always-on Processor (AOP) and U1 Application Processor
The AOP and U1 Application Processor support various commands, including:

- `extRoseLoadFirmware`
- `extRoseGetInfo`
- `extRoseReset`
- `extRoseEnterCommandMode`
- `extRosePing`
- `extRoseTx`
- `extRoseTimeSync`
- `extRoseGetSyncedTime`
- `extRoseGetProperty`
- `extRoseSetProperty`
- `extRosePerformInternalCommand`
- `extRoseCacheFirmwareLogs`
- `extRoseDequeueFirmwareLogs`
- `extRoseTriggerCoredump`
- `extRoseDequeueCoredump`
- `extRoseCoredumpInfo`
- `extRosePowerOn`
- `extRoseReadPowerState`
- `extRoseConfigureFirmwareLogCache`

#### Sending Commands via the AOP to Rose
Commands can also be sent via the AOP to the Rose driver. Here is the call stack for setting a property:

```plaintext
User Space
nearbyd
   IOConnectCallMethod(port, 1, …)
Kernel Space
   extSetPropertyMethod
   AppleSPUUserClient
   AOPRoseSupervisor::setProperty
   AOPRoseServiceHandle::SendCommandFIFO
(0x4012, mac_addr, … )
mac_cmd()
case 0x4012:
…
```

The IOKit SPUUserClient sets states and properties in the AOP. Certain state changes also apply commands to the U1 chip.

#### Example: Setting a Property
Here is an example of setting the `R1MacAddress` property:

```c
AppleSPUUserClient::extSetPropertyMethod(211, ‘0000’ + bd_addr)
   AppleSPUInterface::spuPerformCommand(…)
```

#### Available Properties
- `R1MacAddress`: Concatenated from the Bluetooth Address
- `SPMISettings`
- `UWBCommsRoute`
- `BeaconWhiteList`
- `AllowR1Sleep`
- `CalDataPushed`
- `CmdQueueClearAllow`
- `LogVerbose`
- `RoseAOPHello`

#### Sending Commands via the AOP to Rose
Commands can also be sent to initiate secure ranging:

```plaintext
User Space
nearbyd
   IOConnectCallMethod(port, 3, …)
Kernel Space
   extPerformCommandMethod
   AppleSPUUserClient
   AOPRoseServiceHandle::AOPGeneralizedRangingJob
mac_cmd()
case 0x4025:
…
```

Example of initiating a new service request:

```c
AppleSPUUserClient::extPerformCommandMethod(‘!’, parameters)
   AppleSPUInterface::spuPerformCommand(…)
```

#### GR Packet to Initiate Secure Ranging
Here is an example of a GR packet to initiate secure ranging:

```plaintext
nearbyd[1184] : RoseScheduler::handleNewServiceRequestInternal
nearbyd[1184] : [AP Scheduler] Servicing dequeued service request.
Passing message to AOP scheduler.
nearbyd[1184] : Request: [Role]: Initiator, [MacMode]: GR
nearbyd[1184] : Built GR packet: {
                  ses_role: 0
                 , tx_ant_mask : 2
                 , rx_ant_mask : 11
                 , rx_sync_search_ant_mask : 2
                 , tx_preamble: 3
                 , rx_preamble: 3
                 , tx_pkt_type: 0
                 , rx_pkt_type: 0
                 , tx_mslot_sz_250us: 12
                 , rx_mslot_sz_250us: 12
                 , interval_min_ms: 30
                 , naccess_slots_min: 1
                 , naccess_slots_max: 32
                 , access_slot_idx: 0
                 , start_channel: 1
                 , alternate_channel: 0
                 , channel_hop_pattern_mask: 8
                 , debug_flags: 7
                 , start_time: 0
                 , start_time_uncertainty: 0
                 , interval_max_ms: 5000
                 , local_addr: 0x0
                 , peer_addr: 0x0
                 , sts_blob: 1281711291571851042031941281011261981431306684
     }
```

#### Firmware Extraction and Segments
The U1 firmware is contained in every iOS/audioOS IPSW, watchOS OTA image, or AirTag firmware image. The ftab format is used for firmware, and it can be split using [this script](https://gist.github.com/matteyeux/c1018765a51bcac838e26f8e49c6e9ce).

#### Triggering Error Handling
Error handling can be triggered by sending specific commands. For example, switching the implementation of `SystemOff` with `TriggerFatalErrorHandling` can provide crash logs and packet logs.

#### Conclusion
- **Bluetooth and Ultra Wideband** are tightly coupled on iOS.
- **RTKit-based wireless chips** have an interesting architecture with security features like secure boot and ASLR.
- **Many features** in the chip can be instrumented from user space.

#### Q&A
For further questions and discussions, contact us at:
- GitHub: [seemoo-lab](https://github.com/seemoo-lab)
- Twitter: [@naehrdine](https://twitter.com/naehrdine), [@Sn0wfreeze](https://twitter.com/Sn0wfreeze)
- Email: [jclassen|aheinrich]@seemoo.de