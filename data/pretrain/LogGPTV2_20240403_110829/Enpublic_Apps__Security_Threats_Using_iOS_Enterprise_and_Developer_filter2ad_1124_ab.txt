ming interfaces of the iOS frameworks and they are prohib-
ited by the App Store’s review process. These private APIs
are methods of framework classes which have no declaration
in class header ﬁles. Apple emphasized that these private
APIs should only be used by the class internally or the iOS
system apps [2]. However, when third-party apps use these
private APIs, they have enhanced capabilities (e.g., post-
ing tweets, sending emails, and sending SMS without user’s
consent on iOS [35].) In addition, because there is no ap-
plication review process in iOS enterprise/developer apps,
anyone can distribute their private API apps through this
channel.
4.2 Private APIs list
Since the private APIs are the methods of frameworks
which have no declaration in the class header ﬁles, one can
use the following methodology to extract them:
• We ﬁrst download and install the speciﬁc iOS SDK
(e.g., iOS 7.1) from Apple’s development website[13].
• Then we extract all the frameworks from iOS SDK, for
example, UIKit framework can be found at /Applica-
tions/Xcode.app/Contents/Developer/ Platforms/i-
PhoneSimulator.platform/Developer/ SDKs/iPhoneS-
imulator7.1.sdk/ System/Library/Frameworks/
UIKit.framework/UIKit. All of the iOS frameworks
are Mach–O ﬁle format [18]. By using class–dump[7],
which is a command–line tool for extracting the Objective-
C information stored in Mach-O ﬁles, one can retrieve
all the method names and parameters from these Mach–
O ﬁles. Note that these methods are the API calls,
which include both public and private API calls in iOS
frameworks.
• Based on Apple’s oﬃcial documents[1], we obtain all
the public API calls of a speciﬁc SDK version.
• Once we have obtained all private and public APIs call
set from Step 2 and public API calls set from Step 3,
we can extract the private API calls set of the speciﬁc
SDK version.
4.3 iOS Private APIs Detector
For iOS private API detection, we use both static and
Static Analysis
dynamic methodologies to analyze the iOS enpublic apps.
4.3.1
We built a static analysis tool on top of CCTool[5]. CC-
Tool is an open source project of Apple for analyzing Mach-
O format ﬁles. This project contains several tools such as
otool, nm and strings. However, for private API detection,
these tools are not compact and readable. They can on-
ly retrieve the basic information of the Mach-O format ﬁle
Ipa CrawleriOS Private APIsDetectorApp VulnerabilityDetectorAnalysis Reportand do not have the logic of detecting private APIs. There-
fore, we enhance CC-Tool by adding several new features
(e.g., private API detection and dynamic loading behavior
detection), then build our static analysis of iOS private API
detector on top of these modules.
The static analysis process works in the following steps:
• iOS Private APIs Detector can analyze the framework/li-
brary loading and determine which framework/library
contains private API calls.
• For suspicious framework/library, iOS private API de-
tector will analyze the method symbols and then com-
pare with the private APIs list. If the detector ﬁnds
private API calls, it will generate a report for the user.
• If the detector ﬁnds dynamic loading behavior (e.g.,
methods which call NSBundle and dlopen()) of the
app, we use the dynamic analysis of iOS private API
Detector.
For example, an enterprise app, “com.tongbu.tui”, stati-
cally loads several sensitive frameworks:
/System/Library/PrivateFrameworks/
SpringBoardServices.framework
/System/Library/PrivateFrameworks/
MobileInstallation.framework
/System/Library/Frameworks/IOKit.framework
...
SpringBoardServices and MobileInstallation are private
frameworks which contain spring board information and in-
stalled package information. As long as an app uses APIs
in these two frameworks, they are private APIs. Although
IOKit framework does not belong to the private frameworks,
there is no public API calls in this framework. Therefore,
any API calls in this framework also belong to private APIs.
Another example is “net.qihoo.360msafeenterprise”. This
app does not load any private frameworks. However, some
public frameworks also have private APIs. For instance:
“net.qihoo.360msafeenterprise” uses _CTTelephonyCen-
terAddObserver API call of /System/Library/Framework-
s/CoreTelephony.framework to monitor the incoming tele-
phone calls and SMS messages.
4.3.2 Dynamic Analysis
Because there is no app review process, enpublic apps can
use any dynamic loading techniques at runtime. For exam-
ple, NSBundle is a dynamic loading class in Objective-C. It
is similar to Java reﬂection [15] which can dynamically load
other frameworks. Another dynamic loading technique is to
use private C functions, such as dlopen() and dlsym(), to
dynamically load and execute methods of iOS frameworks.
For these apps with dynamic loading behavior, we use Cydia
Substrate[9] (a hooking framework) to hook the low level
library call _dlopen() method and _dlsym() method on an
jailbroken iOS device. Because the low level implementa-
tion of NSBundle also uses _dlopen() method and _dlsym()
method, there is no need to hook the related methods of
NSBundle. To illustrate, the logic of _dlopen() hooking is
shown below:
//declare the origional funciton of dlopen
void * (*_dlopenHook)(const char * __path, int __mode);
//implement the replaced dlopen function
void * $dlopenHook(const char * __path, int __mode)
{
NSLog(@"iAnalytics:␣Loading␣%s␣framework", __path);
return _dlopenHook(__path,__mode); //call orig
}
//do hooking
%ctor {
MSHookFunction((void *)MSFindSymbol(NULL,"_dlopen"),
(void *)$dlopenHook, (void **)&_dlopenHook);
}
We ﬁrst obtain a declaration of the original hooked func-
tion and implement the function used to replace the original
one accordingly. We then use “MSFindSymbol” to obtain
the address of hooked function and use “MSHookFunction”
to replace the hooked function.
In the implementation of
replaced function, the app outputs the loading methods and
frameworks to the system log. We collect the related log
information from “/var/log/syslog”. This way, the iAna-
lytics can detect invocations of private APIs.
5. APP VULNERABILITY DETECTION
Since enpublic apps can use private APIs, they are more
powerful, and potentially more damaging, as compared with
apps in App Store. In this situation, once plagued by vulner-
abilities, enpublic apps become severe threats to iOS users.
Attackers may leverage such vulnerabilities to craft danger-
ous attacks. In this section, we examine two vulnerabilities
found in iOS enpublic apps and show how to detect them.
5.1 URL Scheme Vulnerability Detection
A URL scheme vulnerability arises when an app has an
unsafe URL scheme logic design and the hacker could send
malicious URL requests to the devices. A URL scheme vul-
nerability may cause memory corruption or malicious action-
s without user’s authorization. In this part, we ﬁrst brieﬂy
explain what URL scheme vulnerability is and present our
URL scheme vulnerability detector.
5.1.1
By using URL schemes, web pages running in Safari or
iOS apps can integrate with system apps or third–party app-
s. For example, the tel:// scheme can be used to launch
the telephone app. For instance, a website may contain the
following HTML script and a user browses it using Safari on
iOS:
Introduction to URL Scheme Vulnerability
When fed with the URL scheme of telephone app, Safari
will launch the telephone app with the “123456789” as the
parameter. After launching, the telephone app requests for
user’s authorization to make a call. This is a correct log-
ic design from a security perspective, because a malicious
website should not be able to initiate a phone call without
notifying the user. However, if the app does not perform
the authorization check for the URL scheme, it causes secu-
rity problems. For example, [25] reported that if the website
contains the following HTML script:
bility detection in the paragraphs below:
The older version of Skype will automatically start a call
when the user browses a malicious website using the Safari
browser. Therefore, developers need to pay attention to the
logic design of URL scheme. Otherwise, attackers may use
the vulnerability of URL scheme to implement attacks.
5.1.2 Detection Methodology
We describe our methodology for URL Scheme vulnera-
• We parse Plist to obtain the URL scheme informa-
tion from the Info.plist ﬁle of the .ipa package.
In the Info.plist ﬁle, the URL scheme information
is stored in the CFBundleURLTypes array. By parsing
this array, we can extract CFBundleURLName and CF-
BundleURLSchemes.
• If an iOS app has the CFBundleURLSchemes, it will call
the [application:handleOpenURL] method in the ap-
plication delegate class. We disassemble the app
and then perform a recursive search from the [appli-
cation:handleOpenURL] method. If the app invokes
any private API calls, we catch it. Then security ana-
lysts can analyze this potential vulnerable app.
• iAnalytics performs fuzzy testing for iOS apps with
URL schemes. After obtaining the CFBundleURLSchemes
from Info.plist ﬁle, our system generates random
strings or customized fuzz templates with correspond-
ing URL schemes. Then we test these URL schemes
through libimobiledevice on an iOS device with the
installed apps. We then record the system log (e.g.,
crash report) for analysts.
We have performed the analysis above and discovered sev-
eral apps with URL Scheme vulnerabilities. We will further
describe our ﬁndings in Sec. 6.
5.2 Sensitive Information Leakage Detection
Apps may transmit or store personal identiﬁable informa-
tion like device ID, user name, password, phone number,
address and location information to third party companies.
It is very dangerous that the sensitive information is trans-
formed or stored by plain text, because attackers can easily
obtain it by sniﬃng the network or through USB connec-
tion. In addition, because enpublic apps can obtain more
sensitive personal data by using private APIs, they are more
dangerous than normal apps. For personal information leak-
age detection, iAnalytics focuses on HTTP and local data
storage.
5.2.1 Sensitive Information Leakage on HTTP
For analyzing HTTP packets, we set the tested device’s
HTTP proxy to our system. Then iAnalytics uses libi-
mobiledevice library to launch the tested apps and sends
random user events to the tested apps.
If the tested app
generates HTTP connection, the HTTP packets will be sent
to our system for analysis. After getting the data, iAna-
lytics searches string patterns of system information (e.g.,
UDID, MAC address, IMEI and IMSI) and personal infor-
mation (e.g., telephone number, location information and
password) from the HTTP packets. If the system ﬁnds any-
thing related to sensitive information, it will report it to
analysts.
Figure 6: USB connection veri(cid:12)cation
5.2.2
Sensitive Information Leakage on Local Data
Storage
iOS RPC communications library (e.g., libimobiledevice)
can be used to obtain apps’ data through an USB connec-
tion. Although apps in iOS are seperated by sandbox me-
chinism, the mechinism has no eﬀect for iOS RPC com-
munications library. An PC based application can extract
all of apps’ data without any permission and user’s knowl-
edge. Using iAnalytics, we discovered a bug in the iOS RPC
communications: in iOS 7.0, Apple added a new feature to
prevent untrusted USB connection (see Fig. 6). However, it
only has eﬀect on iTunes software. Other applications can
still use iOS RPC communications library to obtain the app
data even if the user choose “Don’t Trust”. Therefore, our
system uses libimobiledevice library to extract the apps’
data from the iOS devices and then search for sensitive in-
formation from the apps’ data. If the system ﬁnds anything
related to sensitive information, it will generate a report to
a security analyst.
6. EVALUATION
We crawled 1408 enpublic apps from the Internet. We
obtained the “Development Region” by parsing apps’ In-
fo.plist ﬁles. The “Development Region” indicates the ge-
ographic location of the apps development. Most enpublic
apps are from United States, China, England and France,
as shown in Tab .2.
In this section, we report the statis-
tics of private API usage and app vulnerabilities found in
these apps. We also provide case studies of representative
enpublic apps.
Country
United States
China
England
France
Others
All
# of apps
660
361
223
62
102
1408
Table 2: Statistics of Development Region
6.1 Private API Statistics and Case Studies
Within the 1,408 enpublic apps we crawled, 844 (60%) use
private APIs. For example, some enpublic apps use the pri-
vate APIs of CoreTelephony.framework to monitor phone
call and SMS messages. After obtaining the sensitve infor-
mation, enpublic apps can send them to the hacker’s sever
in the background. Some iOS 3rd-party market (non-App s-
tore markets) apps use the private APIs of MobileInstalla-
tion.framework and SpringBoardServices.framework to
manage and install 3rd-party iOS apps on iOS devices. In
addition, enpublic apps are able to remotely install other
apps to the devices without user’s knowledge. Many en-
public apps use the private APIs of Message.framework to
get the IMSI (International mobile Subscriber Identity) and
IMEI (International Mobile Station Equipment Identity) of
the device. Because these IDs are globally unique, after ob-
taining these IDs, hackers are able to link it to a real-world
identity [33] so users’ privacy will be compromised. Tab. 3
summarizes the private API usages list found in our crawled
apps1. Note that we have found 22 new dangerous private
APIs which are not mentioned in [35] and [27]. These APIs
are crucial and security sensitive on iOS 6/7/8 devices. If
users do not pay any attention to them, their personal infor-
mation can be easily leaked to the hacker. To demonstrate
how dangerous the private APIs are, we present several case
studies below.
6.1.1 Phone Call & SMS Message Monitoring and
Blocking
As mentioned in Sec. 1, Qihoo released their “enterprise”
apps to the public. Apple halted Qihoo by revoking the “en-
terprise” certiﬁcates [3]. Qihoo implemented some functions
that rely on private APIs, which is prohibited from distri-
bution on App Store. Note that one can still ﬁnd Qihoo’s
“enterprise” app from the Internet today. Although the cer-
tiﬁcate became invalid, we can resign the app with our own
certiﬁcate, then install it on the iOS devices and analyze it.
Qihoo’s enterprise app is called “MobileSafeEnterprise”
and the package name is “net.qihoo.360msafeenterprise”. This
app uses both static and dynamic approaches to invoke pri-
vate APIs. First, “MobileSafeEnterprise” can monitor and
block incoming phone calls and SMS messages. The method-
ology is using the private API, CTTelephonyCenterAddOb-
server() method of coreTelephony.framework to register
a call back method of the TelephonyCenter. When the
phone receives a phone call, ”MobileSafeEnterprise” will get
a “kCTCallIdentiﬁcationChangeNotiﬁcation” call back.
In
this call back, ”MobileSafeEnterprise” uses CTCallCopyAd-
dress() method to obtain the telephone number of the caller
and then use CTCallDisconnect() method to hang up the
phone call. For incoming SMS messages, “MobileSafeEn-
terprise” will receive a “kCTMessageReceivedNotiﬁcation”
call back.
In this call back, “MobileSafeEnterprise” uses
[[CTMessageCenter sharedMessageCenter] incoming
MessageWithId: result] method to obtain the sender’s
telephone number and the text of SMS messages.
Note that some private API invocations in “MobileSafeEn-
terprise” used dynamic loading techniques and our system
detects such behaviors successfully. We also ﬁnd that even
in the latest iOS 7.1, developers or attackers can still use
private APIs to monitor incoming phone calls and SMS mes-
sages. We have notiﬁed Apple about this security problem
and Apple Inc. has been working on a ﬁx which is to be
released in future updates.
6.1.2 Collecting the Information of Installed Apps
For the network traﬃc monitoring, “MobileSafeEnterprise”
uses private APIs of UIKit.framework and SpringBoard-
1Starting May 1, 2013, the App Store will no longer accept
new apps or app updates that access UDIDs. [22]
Services.framework to get the names and bundle IDs of
running apps. The methodology is using SBSSpringBoard-
ServerPort() method of UIKit.framework to get the serv-
er port of the SpringBoard. Then it uses SBSCopyAppli-
cationDisplayIdentifiers() method of SpringBoardSer-
vices.framework to get the array of current running app
bundle IDs. By using this private API, the app can record
the running time and frequency of other apps. In addition,
by analyzing the SDK of iOS 7.X and 8.X, we have found