    ```
* New: Change log level of a dependency.
    ```python
    caplog.set_level(logging.WARNING, logger="urllib3")
    ```
* New: [Show logging messages on the test run.](pytest.md#show-logging-messages-on-the-test-run)
    Add to your `pyproject.toml`:
    ```toml
    [tool.pytest.ini_options]
       log_cli = true
       log_cli_level = 10
    ```
    Or run it in the command itself `pytest -o log_cli=true --log-cli-level=10
    func.py`.
    Remember you can change the log level of the different components in case it's too verbose.
* New: [The tmp_path fixture.](pytest.md#the-tmp_path-fixture)
    You can use the `tmp_path` fixture which will provide a temporary directory
    unique to the test invocation, created in the base temporary directory.
    `tmp_path` is a `pathlib.Path` object. Here is an example test usage:
    ```python
    def test_create_file(tmp_path):
        d = tmp_path / "sub"
        d.mkdir()
        p = d / "hello.txt"
        p.write_text(CONTENT)
        assert p.read_text() == CONTENT
        assert len(list(tmp_path.iterdir())) == 1
        assert 0
    ```
* Correction: [Deprecate the tmpdir fixture.](pytest.md#the-tmpdir-fixture)
    Warning: Don't use `tmpdir` use `tmp_path` instead because `tmpdir` uses `py`
    which is unmaintained and has unpatched vulnerabilities.
* Correction: Remove warning that `pytest-random-order` can't be used with `pytest-xdist`.
    The issue was fixed
### [Gettext](python_internationalization.md)
* New: Introduce gettext.
    [Gettext](https://docs.python.org/3/library/gettext.html) is the defacto
    universal solution for [internationalization](python_internationalization.md)
    (I18N) and localization (L10N), offering a set of tools that provides
    a framework to help other packages produce multi-lingual messages. It gives an
    opinionated way of how programs should be written to support translated message
    strings and a directory and file naming organisation for the messages that need
    to be translated.
* New: Introduce Python Internationalization.
    To make your code accessible to more people, you may want to support more than
    one language. It's not as easy as it looks as it's not enough to translate it
    but also it must look and feel local. The answer is internationalization.
    Internationalization (numeronymed as i18n) can be defined as the design process
    that ensures a program can be adapted to various languages and regions without
    requiring engineering changes to the source code.
    Common internationalization tasks include:
    * Facilitating compliance with Unicode.
    * Minimizing the use of concatenated strings.
    * Accommodating support for double-byte languages (e.g. Japanese) and
        right-to-left languages (for example, Hebrew).
    * Avoiding hard-coded text.
    * Designing for independence from cultural conventions (e. g., date and time
        displays), limiting language, and character sets.
    Localization (l10n) refers to the adaptation of your program, once
    internationalized, to the local language and cultural habits. In theory it looks
    simple to implement. In practice though, it takes time and effort to provide the
    best Internationalization and Localization experience for your global audience.
    In Python, there is a specific bundled module for that and itâ€™s called
    [gettext](gettext.md), which consists of a public API and a set of tools that
    help extract and generate message catalogs from the source code.
### [Python Snippets](python_snippets.md)
* New: [How to raise a warning.](python_snippets.md#how-to-raise-a-warning)
    Warning messages are typically issued in situations where it is useful to alert
    the user of some condition in a program, where that condition (normally) doesnâ€™t
    warrant raising an exception and terminating the program. For example, one might
    want to issue a warning when a program uses an obsolete module.
    ```python
    import warnings
    def f():
        warnings.warn('Message', DeprecationWarning)
    ```
    To test the function with pytest you can use
    [`pytest.warns`](https://docs.pytest.org/en/stable/how-to/capture-warnings.html#warns):
    ```python
    import warnings
    import pytest
    def test_warning():
        with pytest.warns(UserWarning, match='my warning'):
            warnings.warn("my warning", UserWarning)
    ```
* New: [Parse XML file with beautifulsoup.](python_snippets.md#parse-xml-file-with-beautifulsoup)
    You need both `beautifulsoup4` and `lxml`:
    ```python
    bs = BeautifulSoup(requests.get(url), "lxml")
    ```
* New: [Get a traceback from an exception.](python_snippets.md#get-a-traceback-from-an-exception)
    ```python
    import traceback
    traceback_str = ''.join(traceback.format_tb(e.__traceback__))
    ```
* New: [Add the Warning categories.](python_snippets.md#warning-categories)
    | Class                     | Description                                                                     |
    | ---                       | ---                                                                             |
    | Warning                   | This is the base class of all warning category classes.                         |
    | UserWarning               | The default category for warn().                                                |
    | DeprecationWarning        | Warn other developers about deprecated features.                                |
    | FutureWarning             | Warn other end users of applications about deprecated features.                 |
    | SyntaxWarning             | Warn about dubious syntactic features.                                          |
    | RuntimeWarning            | Warn about dubious runtime features.                                            |
    | PendingDeprecationWarning | Warn about features that will be deprecated in the future (ignored by default). |
    | ImportWarning             | Warn triggered during the process of importing a module (ignored by default).   |
    | UnicodeWarning            | Warn related to Unicode.                                                        |
    | BytesWarning              | Warn related to bytes and bytearray.                                            |
    | ResourceWarning           | Warn related to resource usage (ignored by default).                            |
* New: [How to Find Duplicates in a List in Python.](python_snippets.md#how-to-find-duplicates-in-a-list-in-python)
    ```python
    numbers = [1, 2, 3, 2, 5, 3, 3, 5, 6, 3, 4, 5, 7]
    duplicates = [number for number in numbers if numbers.count(number) > 1]
    unique_duplicates = list(set(duplicates))
    ```
    If you want to count the number of occurrences of each duplicate, you can use:
    ```python
    from collections import Counter
    numbers = [1, 2, 3, 2, 5, 3, 3, 5, 6, 3, 4, 5, 7]
    counts = dict(Counter(numbers))
    duplicates = {key:value for key, value in counts.items() if value > 1}
    ```
    To remove the duplicates use a combination of `list` and `set`:
    ```python
    unique = list(set(numbers))
    ```
* New: [How to decompress a gz file.](python_snippets.md#how-to-decompress-a-gz-file)
    ```python
    import gzip
    import shutil
    with gzip.open('file.txt.gz', 'rb') as f_in:
        with open('file.txt', 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)
    ```
* New: [How to compress/decompress a tar file.](python_snippets.md#how-to-compress/decompress-a-tar-file)
    ```python
    def compress(tar_file, members):
        """
        Adds files (`members`) to a tar_file and compress it
        """
        tar = tarfile.open(tar_file, mode="w:gz")
        for member in members:
            tar.add(member)
        tar.close()
    def decompress(tar_file, path, members=None):
        """
        Extracts `tar_file` and puts the `members` to `path`.
        If members is None, all members on `tar_file` will be extracted.
        """
        tar = tarfile.open(tar_file, mode="r:gz")
        if members is None:
            members = tar.getmembers()
        for member in members:
            tar.extract(member, path=path)
        tar.close()
    ```
* New: [Get the attribute of an attribute when sorting.](python_snippets.md#get-the-attribute-of-an-attribute)
    To sort the list in place:
    ```python
    ut.sort(key=lambda x: x.count, reverse=True)
    ```
    To return a new list, use the `sorted()` built-in function:
    ```python
    newlist = sorted(ut, key=lambda x: x.body.id_, reverse=True)
    ```
* New: [How to extend a dictionary.](python_snippets.md#how-to-extend-a-dictionary)
    ```python
    a.update(b)
    ```
* New: [How to close a subprocess process.](python_snippets.md#how-to-close-a-subprocess-process)
    ```python
    subprocess.terminate()
    ```
* New: [Define a property of a class.](python_snippets.md#define-a-property-of-a-class)
    If you're using Python 3.9 or above you can directly use the decorators:
    ```python
    class G:
        @classmethod
        @property
        def __doc__(cls):
            return f'A doc for {cls.__name__!r}'
    ```
    If you're not, the solutions are not that good.
* New: [Fix SIM113 Use enumerate.](python_snippets.md#fix-sim113-use-enumerate)
    Use `enumerate` to get a running number over an iterable.
    ```python
    idx = 0
    for el in iterable:
        ...
        idx += 1
    for idx, el in enumerate(iterable):
        ...
    ```
* New: [Parse an RFC2822 date.](python_snippets.md#parse-an-rfc2822-date)
    Interesting to test the accepted format of [RSS dates](https://www.rssboard.org/rss-validator/docs/error/InvalidRFC2822Date.html).
    ```python
    >>> from email.utils import parsedate_to_datetime
    >>> datestr = 'Sun, 09 Mar 1997 13:45:00 -0500'
    >>> parsedate_to_datetime(datestr)
    datetime.datetime(1997, 3, 9, 13, 45, tzinfo=datetime.timezone(datetime.timedelta(-1, 68400)))
    ```
* New: [Convert a datetime to RFC2822.](python_snippets.md#convert-a-datetime-to-rfc2822)
    Interesting as it's the accepted format of [RSS dates](https://www.rssboard.org/rss-validator/docs/error/InvalidRFC2822Date.html).
    ```python
    >>> import datetime
    >>> from email import utils
    >>> nowdt = datetime.datetime.now()
    >>> utils.format_datetime(nowdt)
    'Tue, 10 Feb 2020 10:06:53 -0000'
    ```
* New: [Encode url.](python_snippets.md#encode-url)
    ```python
    import urllib.parse
    from pydantic import AnyHttpUrl
    def _normalize_url(url: str) -> AnyHttpUrl:
        """Encode url to make it compatible with AnyHttpUrl."""
        return typing.cast(
            AnyHttpUrl,
            urllib.parse.quote(url, ":/"),
        )
    ```
    The `:/` is needed when you try to parse urls that have the protocol, otherwise
    `https://www.` gets transformed into `https%3A//www.`.
* New: [Initialize a dataclass with kwargs.](python_snippets.md#initialize-a-dataclass-with-kwargs)
    If you care about accessing attributes by name, or if you can't distinguish
    between known and unknown arguments during initialisation, then your last resort
    without rewriting `__init__` (which pretty much defeats the purpose of using
    dataclasses in the first place) is writing a `@classmethod`:
    ```python
    from dataclasses import dataclass
    from inspect import signature
    @dataclass
    class Container:
        user_id: int
        body: str
        @classmethod
        def from_kwargs(cls, **kwargs):
            # fetch the constructor's signature
            cls_fields = {field for field in signature(cls).parameters}
            # split the kwargs into native ones and new ones
            native_args, new_args = {}, {}
            for key, value in kwargs.items():
                if key in cls_fields:
                    native_args[key] = value
                else:
                    new_args[key] = value
            # use the native ones to create the class ...
            ret = cls(**native_args)
            # ... and add the new ones by hand
            for new_key, new_value in new_args.items():
                setattr(ret, new_key, new_value)
            return ret
    ```
    Usage:
    ```python
    params = {'user_id': 1, 'body': 'foo', 'bar': 'baz', 'amount': 10}
    Container(**params)  # still doesn't work, raises a TypeError
    c = Container.from_kwargs(**params)
    print(c.bar)  # prints: 'baz'
    ```
* New: [Replace a substring of a string.](python_snippets.md#replace-a-substring-of-a-string)
    ```python
    txt = "I like bananas"
    x = txt.replace("bananas", "apples")
    ```
* New: [Create random number.](python_snippets.md#create-random-number)
    ```python
    import random
    a=random.randint(1,10)
    ```
* New: [Check if local port is available or in use.](python_snippets.md#check-if-local-port-is-available-or-in-use)
    Create a temporary socket and then try to bind to the port to see if it's
    available. Close the socket after validating that the port is available.
    ```python
    def port_in_use(port):
        """Test if a local port is used."""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        with suppress(OSError):
            sock.bind(("0.0.0.0", port))
            return True
        sock.close()
        return False
    ```
* New: [Fix R1728: Consider using a generator.](python_snippets.md#fix-r1728:-consider-using-a-generator)
    Removing `[]` inside calls that can use containers or generators should be
    considered for performance reasons since a generator will have an upfront cost
    to pay. The performance will be better if you are working with long lists or
    sets.
    Problematic code:
    ```python
    list([0 for y in list(range(10))])  # [consider-using-generator]
    tuple([0 for y in list(range(10))])  # [consider-using-generator]
    sum([y**2 for y in list(range(10))])  # [consider-using-generator]
    max([y**2 for y in list(range(10))])  # [consider-using-generator]
    min([y**2 for y in list(range(10))])  # [consider-using-generator]
    ```