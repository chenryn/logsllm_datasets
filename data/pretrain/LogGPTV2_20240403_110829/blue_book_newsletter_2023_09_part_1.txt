# Life Management
## Task Management
### [Org Mode](orgmode.md)
* New: Refile from the capture window.
    If you refile from the capture window, [until this issue is solved](https://github.com/joaomsa/telescope-orgmode.nvim/issues/4), your task will be refiled but the capture window won't be closed.
    Be careful that it only refiles the first task there is, so you need to close the capture before refiling the next
# Coding
## Languages
### [Bash snippets](bash_snippets.md)
* New: [How to deal with HostContextSwitching alertmanager alert.](bash_snippets.md#how-to-deal-with-hostcontextswitching-alertmanager-alert)
    A context switch is described as the kernel suspending execution of one process on the CPU and resuming execution of some other process that had previously been suspended. A context switch is required for every interrupt and every task that the scheduler picks.
    Context switching can be due to multitasking, Interrupt handling , user & kernel mode switching. The interrupt rate will naturally go high, if there is higher network traffic, or higher disk traffic. Also it is dependent on the application which every now and then invoking system calls.
    If the cores/CPU's are not sufficient to handle load of threads created by application will also result in context switching.
    It is not a cause of concern until performance breaks down. This is expected that CPU will do context switching. One shouldn't verify these data at first place since there are many statistical data which should be analyzed prior to looking into kernel activities. Verify the CPU, memory and network usage during this time.
    You can see which process is causing issue with the next command:
    ```bash
    10:15:24 AM     UID     PID     cswch/s         nvcswch/s       Command
    10:15:27 AM     0       1       162656.7        16656.7         systemd
    10:15:27 AM     0       9       165451.04       15451.04        ksoftirqd/0
    10:15:27 AM     0       10      158628.87       15828.87        rcu_sched
    10:15:27 AM     0       11      156147.47       15647.47        migration/0
    10:15:27 AM     0       17      150135.71       15035.71        ksoftirqd/1
    10:15:27 AM     0       23      129769.61       12979.61        ksoftirqd/2
    10:15:27 AM     0       29      2238.38         238.38          ksoftirqd/3
    10:15:27 AM     0       43      1753            753             khugepaged
    10:15:27 AM     0       443     1659            165             usb-storage
    10:15:27 AM     0       456     1956.12         156.12          i915/signal:0
    10:15:27 AM     0       465     29550           29550           kworker/3:1H-xfs-log/dm-3
    10:15:27 AM     0       490     164700          14700           kworker/0:1H-kblockd
    10:15:27 AM     0       506     163741.24       16741.24        kworker/1:1H-xfs-log/dm-3
    10:15:27 AM     0       594     154742          154742          dmcrypt_write/2
    10:15:27 AM     0       629     162021.65       16021.65        kworker/2:1H-kblockd
    10:15:27 AM     0       715     147852.48       14852.48        xfsaild/dm-1
    10:15:27 AM     0       886     150706.86       15706.86        irq/131-iwlwifi
    10:15:27 AM     0       966     135597.92       13597.92        xfsaild/dm-3
    10:15:27 AM     81      1037    2325.25         225.25          dbus-daemon
    10:15:27 AM     998     1052    118755.1        11755.1         polkitd
    10:15:27 AM     70      1056    158248.51       15848.51        avahi-daemon
    10:15:27 AM     0       1061    133512.12       455.12          rngd
    10:15:27 AM     0       1110    156230          16230           cupsd
    10:15:27 AM     0       1192    152298.02       1598.02         sssd_nss
    10:15:27 AM     0       1247    166132.99       16632.99        systemd-logind
    10:15:27 AM     0       1265    165311.34       16511.34        cups-browsed
    10:15:27 AM     0       1408    10556.57        1556.57         wpa_supplicant
    10:15:27 AM     0       1687    3835            3835            splunkd
    10:15:27 AM     42      1773    3728            3728            Xorg
    10:15:27 AM     42      1996    3266.67         266.67          gsd-color
    10:15:27 AM     0       3166    32036.36        3036.36         sssd_kcm
    10:15:27 AM     119349  3194    151763.64       11763.64        dbus-daemon
    10:15:27 AM     119349  3199    158306          18306           Xorg
    10:15:27 AM     119349  3242    15.28           5.8             gnome-shell
    pidstat -wt 3 10  > /tmp/pidstat-t.out
    Linux 4.18.0-80.11.2.el8_0.x86_64 (hostname)    09/08/2020  _x86_64_    (4 CPU)
    10:15:15 AM   UID      TGID       TID   cswch/s   nvcswch/s  Command
    10:15:19 AM     0         1         -   152656.7   16656.7   systemd
    10:15:19 AM     0         -         1   152656.7   16656.7   |__systemd
    10:15:19 AM     0         9         -   165451.04  15451.04  ksoftirqd/0
    10:15:19 AM     0         -         9   165451.04  15451.04  |__ksoftirqd/0
    10:15:19 AM     0        10         -   158628.87  15828.87  rcu_sched
    10:15:19 AM     0         -        10   158628.87  15828.87  |__rcu_sched
    10:15:19 AM     0        23         -   129769.61  12979.61  ksoftirqd/2
    10:15:19 AM     0         -        23   129769.61  12979.33  |__ksoftirqd/2
    10:15:19 AM     0        29         -   32424.5    2445      ksoftirqd/3
    10:15:19 AM     0         -        29   32424.5    2445      |__ksoftirqd/3
    10:15:19 AM     0        43         -   334        34        khugepaged
    10:15:19 AM     0         -        43   334        34        |__khugepaged
    10:15:19 AM     0       443         -   11465      566       usb-storage
    10:15:19 AM     0         -       443   6433       93        |__usb-storage
    10:15:19 AM     0       456         -   15.41      0.00      i915/signal:0
    10:15:19 AM     0         -       456   15.41      0.00      |__i915/signal:0
    10:15:19 AM     0       715         -   19.34      0.00      xfsaild/dm-1
    10:15:19 AM     0         -       715   19.34      0.00      |__xfsaild/dm-1
    10:15:19 AM     0       886         -   23.28      0.00      irq/131-iwlwifi
    10:15:19 AM     0         -       886   23.28      0.00      |__irq/131-iwlwifi
    10:15:19 AM     0       966         -   19.67      0.00      xfsaild/dm-3
    10:15:19 AM     0         -       966   19.67      0.00      |__xfsaild/dm-3
    10:15:19 AM    81      1037         -   6.89       0.33      dbus-daemon
    10:15:19 AM    81         -      1037   6.89       0.33      |__dbus-daemon
    10:15:19 AM     0      1038         -   11567.31   4436      NetworkManager
    10:15:19 AM     0         -      1038   1.31       0.00      |__NetworkManager
    10:15:19 AM     0         -      1088   0.33       0.00      |__gmain
    10:15:19 AM     0         -      1094   1340.66    0.00      |__gdbus
    10:15:19 AM   998      1052         -   118755.1   11755.1   polkitd
    10:15:19 AM   998         -      1052   32420.66   25545     |__polkitd
    10:15:19 AM   998         -      1132   0.66       0.00      |__gdbus
    ```
    Then with help of PID which is causing issue, one can get all system calls details:
    Raw
    ```bash
    ```
    Let this command run for a few minutes while the load/context switch rates are high. It is safe to run this on a production system so you could run it on a good system as well to provide a comparative baseline. Through strace, one can debug & troubleshoot the issue, by looking at system calls the process has made.
* New: [Redirect stderr of all subsequent commands of a script to a file.](bash_snippets.md#redirect-stderr-of-all-subsequent-commands-of-a-script-to-a-file)
    ```bash
    {
        somecommand
        somecommand2
        somecommand3
    } 2>&1 | tee -a $DEBUGLOG
    ```
### [Libraries](python_gnupg.md)
* New: Receive keys from a keyserver.
    ```python
    import_result = gpg.recv_keys('server-name', 'keyid1', 'keyid2', ...)
    ```
### [BeautifulSoup](docker.md)
* New: [Searching by attribute and value.](beautifulsoup.md#searching-by-attribute-and-value)
    ```python
    soup = BeautifulSoup(html)
    results = soup.findAll("td", {"valign" : "top"})
    ```
* New: [Install a specific version of Docker.](docker.md#installation)
    Follow [these instructions](https://docs.docker.com/engine/install/debian/)
    If that doesn't install the version of `docker-compose` that you want use [the next snippet](https://stackoverflow.com/questions/49839028/how-to-upgrade-docker-compose-to-latest-version):
    ```bash
    VERSION=$(curl --silent https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*\d')
    DESTINATION=/usr/local/bin/docker-compose
    sudo curl -L https://github.com/docker/compose/releases/download/${VERSION}/docker-compose-$(uname -s)-$(uname -m) -o $DESTINATION
    sudo chmod 755 $DESTINATION
    ```
    If you don't want the latest version set the `VERSION` variable.
### [Python Snippets](python_snippets.md)
* New: [Read file with Pathlib.](python_snippets.md#read-file-with-pathlib)
    ```python
    file_ = Path('/to/some/file')
    file_.read_text()
    ```
* New: [Get changed time of a file.](python_snippets.md#get-changed-time-of-a-file)
    ```python
    import os
    os.path.getmtime(path)
    ```
### [Pydantic](pydantic.md)
* Correction: [Initialize attributes at object creation.](pydantic.md#initialize-attributes-at-object-creation)
    `pydantic` recommends [using root validators](pydantic.md#using-root-validators), but it's difficult to undestand how to do it and to debug the errors. You also don't have easy access to the default values of the model. I'd rather use the [overwriting the `__init__` method](pydantic.md#overwriting-the-__init__-method).
    ```python
    class fish(BaseModel):
        name: str
        color: str
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            print("Fish initialization successful!")
            self.color=complex_function()
    ```
### [questionary](questionary.md)
* New: [Autocomplete answers.](questionary.md#autocomplete-answers)
    If you want autocomplete with fuzzy finding use:
    ```python
    import questionary
    from prompt_toolkit.completion import FuzzyWordCompleter
    questionary.autocomplete(
        "Save to (q to cancel): ",
        choices=destination_directories,
        completer=FuzzyWordCompleter(destination_directories),
    ).ask()
    ```
# DevOps
## Infrastructure as Code
### [Ansible Snippets](ansible_snippets.md)
* New: [Ansible condition that uses a regexp.](ansible_snippets.md#ansible-condition-that-uses-a-regexp)
    ```yaml
    - name: Check if an instance name or hostname matches a regex pattern
      when: inventory_hostname is not match('molecule-.*')
      fail:
        msg: "not a molecule instance"
    ```
* New: [Ansible-lint doesn't find requirements.](ansible_snippets.md#ansible-lint-doesn't-find-requirements)
    It may be because you're using `requirements.yaml` instead of `requirements.yml`. Create a temporal link from one file to the other, run the command and then remove the link.
    It will work from then on even if you remove the link. `¯\(°_o)/¯`
* New: [Run task only once.](ansible_snippets.md#run-task-only-once)
    Add `run_once: true` on the task definition:
    ```yaml
    - name: Do a thing on the first host in a group.
      debug:
        msg: "Yay only prints once"
      run_once: true
    ```
* New: [Ansible add a sleep.](ansible_snippets.md#ansible-add-a-sleep)
    ```yaml
    - name: Pause for 5 minutes to build app cache
      ansible.builtin.pause:
        minutes: 5
    ```
### [Gitea](molecule.md)
* Correction: [Using `paths-filter` custom action to skip job actions.](gitea.md#using-`paths-filter`-custom-action)
    ```
    jobs:
      test:
        if: "!startsWith(github.event.head_commit.message, 'bump:')"
        name: Test
        runs-on: ubuntu-latest
        steps:
          - name: Checkout the codebase
            uses: https://github.com/actions/checkout@v3
          - name: Check if we need to run the molecule tests
            uses: https://github.com/dorny/paths-filter@v2
            id: filter
            with:
              filters: |
                molecule:
                  - 'defaults/**'
                  - 'tasks/**'
                  - 'handlers/**'
                  - 'tasks/**'
                  - 'templates/**'
                  - 'molecule/**'
                  - 'requirements.yaml'
                  - '.github/workflows/tests.yaml'
          - name: Run Molecule tests
            if: steps.filter.outputs.molecule == 'true'
            run: make molecule
    ```
    You can find more examples on how to use `paths-filter` [here](https://github.com/dorny/paths-filter#examples ).
* New: [Get variables from the environment.](molecule.md#get-variables-from-the-environment)
    You can configure your `molecule.yaml` file to read variables from the environment with:
    ```yaml
    provisioner:
      name: ansible
      inventory:
        group_vars:
          all:
            my_secret: ${MY_SECRET}
    ```
    It's useful to have a task that checks if this secret exists:
    ```yaml
    - name: Verify that the secret is set
      fail:
        msg: 'Please export my_secret: export MY_SECRET=$(pass show my_secret)'
      run_once: true
      when: my_secret == None
    ```
    In the CI you can set it as a secret in the repository.
## Infrastructure Solutions
### [AWS Snippets](aws_snippets.md)
* New: [Remove the lock screen in ubuntu.](aws_snippets.md#invalidate-a-cloudfront-distribution
```bash
aws-cloudfront-create-invalidation---paths-"/pages/about"---distribution-id-my-distribution-id
```