title:POSTER: Euclidean Distance Based Encryption: How to Embed Fuzziness
in Biometric Based Encryption
author:Fuchun Guo and
Willy Susilo and
Yi Mu
POSTER: Euclidean Distance Based Encryption: How to
Embed Fuzziness in Biometric Based Encryption
Fuchun Guo
University of Wollongong
PI:EMAIL
NSW, Australia
Willy Susilo
University of Wollongong
PI:EMAIL
NSW, Australia
Yi Mu
University of Wollongong
PI:EMAIL
NSW, Australia
ABSTRACT
We introduce a new encryption notion called Euclidean Distance
based Encryption (EDE). In this notion, a ciphertext encrypted
with a vector and a threshold value can be decrypted with a pri-
vate key of another vector, if and only if the Euclidean distance
between these two vectors is less than or equal to the threshold
value. Euclidean distance is the underlying technique in the pattern
recognition and image processing community for image recogni-
tion. The primary application of this encryption notion is to en-
able an identity-based encryption that incorporates biometric iden-
tiﬁers, such as ﬁngerprint, face, hand geometry, vein and iris. In
that application, usually the input biometric will not be exactly the
same during the enrollment and encryption phases. In this poster,
we propose this new encryption notion and study its construction.
We show how to generically and efﬁciently construct an EDE from
an inner-product encryption (IPE) with reasonable size of private
keys and ciphertexts. We also propose a new IPE scheme that is
equipped with a speciﬁc characteristic to build EDE, namely the
need for short private key. Our IPE scheme achieves the short-
est private key compared to existing IPE schemes in the literature,
where our private key is composed of two group elements only.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public Key Cryptosystems
General Terms
Security, Algorithms
Keywords
Identity-based Encryption, Biometrics, Euclidean Distance
1.
INTRODUCTION
Identity-based encryption (IBE) system is a public key encryp-
tion in which any identity information of a user can be set as the
user’s public key. In the literature, the most commonly used iden-
tity information is an arbitrary string, such as name, email address
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
Copyright 20XX ACM X-XXXXX-XX-X/XX/XX ...$10.00.
or social security number. The arbitrary string can be seen as a
text-based identity that comprises a combination of alphabet and
numbers in various orders.
Text-based approach is quite commonly used in the real world
applications to represent an identity. Nevertheless, there are some
limitations with a text-based approach, and it is merely impractical
in some situations. Biometric traits such as ﬁngerprint, face, iris
and vein can be also used to represent the identities of users due to
their unique features. In contrast to traditional text-based identities,
people do not need to remember their biometrics information. With
the advance of technology, biometrics readers have been rapidly
developed and deployed.
Figure 1: Text-based identities vs biometric identities.
It is widely accepted that biometric identities offer many inter-
esting features, and therefore in this work we are motivated to in-
corporate the biometric identities as identities in an identity-based
encryption notion. Therefore, our main question is: Can we use
biometrics in an identity-based encryption? More precisely, ﬁrst a
user acquires a private key of his/her biometric, which is gathered
during the key generation phase (which is part of the enrollment
phase). Subsequently, the user’s biometric will be captured again
during the encryption phase to produce the ciphertext. We aim to
enable the decryption of the ciphertext, if and only if the biomet-
ric trait gathered during the key generation phase and the biometric
trait used during the encryption phase belong to the same user, i.e.,
the two biometric traits are “close" to each other.
To tackle the fuzziness of the biometric measurements, it is widely
accepted to utilize an image processing technique (or pattern recog-
nition). The idea of “distance" is fundamental to image processing
and pattern recognition. Euclidean distance is a very useful dis-
tance measurement that has been adopted for a variety of image
recognition (see [1]). Given two biometrics represented with two
images, the image recognition algorithm ﬁrstly processes images
into vectors. Then, it calculates the Euclidean distance of these two
vectors, and compares the distance with a threshold value. If the
distance is less than or equal to the threshold value, the algorithm
outputs the “Match" result to indicate that the two biometrics are
considered to be from the same user. Otherwise, it returns “Mis-
match" to claim the two biometrics are from different users.
In cryptography research community, the use of biometric in
identity-based encryption system (IBE) was ﬁrst mentioned by Sa-
hai and Waters [2]. They formalized the notion called Fuzzy IBE,
which allows error-tolerance property of a private key of a bio-
metric to decrypt a ciphertext encrypted with a slightly different
biometric. This work eventually evolved to the development of
attribute-based encryption, which has been used to develop many
interesting applications. We note that it is unfortunate that the no-
tion of fuzzy IBE only considers a simple set overlap distance in
judging the similarity of two biometrics, which are treated as sets of
descriptive attributes. We note that this test (recognition) approach
is not the widely accepted technique to measure the difference of
biometrics in the pattern recognition and image processing commu-
nity. Hence, although fuzzy IBE has been claimed to incorporate
biometric in IBE system, unfortunately this is not the approach that
is used in practice.
1.1 Our Contributions
We introduce Euclidean Distance based Encryption (EDE). In
this encryption notion, a private key of vector (cid:126)y can decrypt a ci-
phertext encrypted with another vector (cid:126)x and a threshold value t, if
and only if the Euclidean distance between (cid:126)x and (cid:126)y is less than or
equal to t. The primary motivation of this work is to bride the gap
between biometric based encryption and pattern recognition.
In this poster, we propose this encryption notion and study its
construction. The adopted Euclidean distance measurement is called
weighted squared Euclidean distance, which is a generalization of
(squared) Euclidean distance. We show how to generically and ef-
ﬁciently construct an EDE from an inner-product encryption (IPE)
with reasonable size of private keys and ciphertexts. Given any in-
teger k0 deﬁned by the system generator, each EDE key has k0 + 1
(cid:101) numbers
numbers of IPE keys and each EDE ciphertext has (cid:100) t
of IPE ciphertexts. A proper k0 can be selected to balance the
size between private keys and ciphertexts. We also propose a new
IPE scheme equipped with a speciﬁc characteristic to build EDE,
namely the need for a short private key. The private key of our
IPE scheme comprises of two group elements only, compared to
the best efﬁcient IPE scheme in the literature with nine group ele-
ments [3]. The EDE instantiation from our IPE will therefore save
more than 75% secure memory for private key storage. We prove
the security of our IPE scheme with payload security in the se-
lective security model under the Decision Bilinear Difﬁe-Hellman
assumption.
k0
2. DEFINITION OF EDE
Let (cid:126)x = (x1, x2,··· , xn) and (cid:126)y = (y1, y2,··· , yn) be two n-
length vector, where all values are from the real number space R.
Let fi ∈ R be the normalization factor for the ith value. The Eu-
clidean distance dE((cid:126)x, (cid:126)y) and weighted squared Euclidean distance
dW ((cid:126)x, (cid:126)y) are deﬁned as follows.
dE((cid:126)x, (cid:126)y) =
(xi − yi)2, dW ((cid:126)x, (cid:126)y) =
fi(xi − yi)2.
i=1
i=1
In this work, we adopt the weighted squared Euclidean distance
in the EDE construction, which is a generalization of (weighted
squared) Euclidean distance. Throughout the rest of this poster,
we use d((cid:126)x, (cid:126)y) to denote the weighted squared Euclidean distance
between (cid:126)x and (cid:126)y.
To be able to embed all values in vectors to the exponents, we
need to adjust all values to integers. For example, suppose xi, yi ∈
[0, 1) and each is a decimal number represented with three digits.
(cid:118)(cid:117)(cid:117)(cid:116) n(cid:88)
n(cid:88)
We can multiply each value with integer 1,000 to change all deci-
mals into integers. In this poster, we directly assume S, F ⊆ Zp for
some prime number p of a group order.
The EDE comprises of the following four algorithms.
Setup. The setup algorithm takes as input the security parameter
λ and distance parameters (n, f1, f2,··· , fn). It returns a master
public/secret key pair (mpk, msk).
KeyGen. The key generation algorithm takes as input msk and an
n-length vector (cid:126)y. It returns a private key sk(cid:126)y for (cid:126)y.
Encryption. The encryption algorithm takes as input mpk, an n-
length vector (cid:126)x, a threshold value t and a message M. It outputs a
ciphertext CT = Enc[(cid:126)x, t, M ].
Decryption. The decryption algorithm takes as input a ciphertext
CT for ((cid:126)x, t), the master public key mpk and the private key sk(cid:126)y
of (cid:126)y. It attempts to decrypt the ciphertext and outputs the message
if d((cid:126)x, (cid:126)y) ≤ t. Otherwise, it simply returns the symbol ⊥.
Consider all (mpk, msk, n, f1, f2, ··· , fn, (cid:126)x, t)
Correctness
and ((cid:126)y, sk(cid:126)y). Suppose CT = Enc[(cid:126)x, t, M ]. If d((cid:126)x, (cid:126)y) ≤ t, we
have the decryption on CT using sk(cid:126)y will output the message M.
Security Without a valid private key sk(cid:126)y for any vector (cid:126)y satisfy-
ing d((cid:126)x, (cid:126)y) ≤ t, it requires that an adversary cannot distinguish the
message in CT = Enc[(cid:126)x, t, M ].
The security model (semantic security) for EDE is similar to the
fuzzy IBE. Let (cid:126)x∗ be the challenge vector and t∗ be the challenge
threshold value. An adversary can only query private keys for (cid:126)y