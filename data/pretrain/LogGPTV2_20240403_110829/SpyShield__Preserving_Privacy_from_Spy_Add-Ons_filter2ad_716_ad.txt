and the communication went through CPC. The results are the averages of the delays
recorded in these experiments.
The average latency of CPC observed in the experiments is 177.3μs, almost 1327
times as much as that of in-process communication which is merely 0.1336μs. This
result was echoed by a previous study [6]. Apparently, such a huge overhead could
greatly affect the performance of the plug-ins running in a separate process, and there-
fore put the practicality of our approach in doubt. A close look at the time necessary for
a plug-in to accomplish its missions, however, reveals that communication only plays
a very small role. This suggests that the CPC overhead introduced by SpyShield could
be overshadowed by plug-ins’ other delays, which is conﬁrmed by our studies on cross-
process function calls and web navigation.
Cross-process Function Calls. We evaluated the performance of COM function calls
both within a process and across the process boundary. Our experiments involved ﬁve
COM functions extensively used by BHOs and toolbars, which include Invoke and
SetSite on the plug-ins’ side, and get LocationURL, get LocationName,
get Document and Navigate2 on the browser’s side. We used our proxy as a sub-
stitute for IE to invoke a BHO’s function, so as to measure the time for completing that
call. The delays of the calls on the reverse direction, from a plug-in to IE, were tracked
by the BHO. Our experiments were conducted under both the one-process setting for in-
process function calls and the two-process setting for cross-process calls. Figure 3.(A)
describes the experimental results which were averaged over 10 experiments.
From the ﬁgure, we can see that the overheads of cross-process calls are not terrible:
the processing time of most of them was between 21.5% and 35.8% longer than that
of their in-process counterparts. The exceptions are SetSite and get Document.
SetSite sends the IUnknown pointer to a plug-in, which involves few other activ-
ities than communicating through the COM interface. Therefore, it is subject to the
strong inﬂuence of CPC. Fortunately, the function is only invoked once during a plug-
in’s initialization and does not affect its runtime performance. Instead of CPC, the over-
head for calling get Document mainly comes from the delay for creating a substitute
for an IE object in the proxy (Section 3.2). It is also one-time cost in most cases, as our
proxy can re-use the substitute for subsequent calls to the function.
Web Navigation. The overhead of SpyShield is usually perceived by the user from
the delay in receiving services from plug-ins. Most of such services require retrieving
312
Z. Li, X. Wang, and J.Y. Choi
)
s
(
e
m
i
t
i
g
n
s
s
e
c
o
r
P
8.92E-03
6.78E-03
5.02E-03
1.00E-02
9.00E-03
8.00E-03
7.00E-03
6.00E-03
5.00E-03
4.00E-03
3.00E-03
2.00E-03
1.00E-03
In-Process
Cross-Process
5.34E-03
2.60E-03
2.14E-03
1.01E-04
5.37E-04
3.95E-04
1.07E-03
8.22E-04
4.16E-04
0.5997
0.4987
0.4906
)
s
(
y
c
n
e
t
a
L
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0.00E+00
Invoke()
SetSite()
get_LocationURL()
get_LocationName()
get_Document()
Navigate2()
Cross-process 
SpyShield
In-process 
SpyShield
Without 
SpyShield
(A) The processing time of function calls in SpyShield
(B) The latency of webpage navigation
Fig. 3. The overheads of function calls and web navigation
documents from the Internet. As an example, our study shows that web navigation is
involved in at least 80% features of Google Toolbar and 8 out of 9 features of Yahoo!
Toolbar. Therefore, it is important to measure the latency of such a web activity in order
to understand the performance of SpyShield.
In our research, we studied the delay caused by web navigation. Our experiment
was carried out under the following three settings: (1) the BHO directly attached to an
IE browser, (2) the BHO connected to the proxy within the browser’s process and (3)
the BHO and the add-on manager running in a separate process. In all these settings,
the BHO directed the browser to the website http://www.bbc.co.uk by calling
the function Navigate2, and recorded the time between the invocation of that func-
tion and the occurrence of the event DISPID DOCUMENTCOMPLETE which indicates
the completion of the navigation (i.e., all documents in the webpage have been down-
loaded). We repeated the experiment for 6 times under each setting to get the average
latencies reported in Figure 3.(B): the navigation overhead was only 1.65% for the one-
process solution and 22.25% for the two process solution. We believe such overheads
are reasonable given the protection provided by our approach.
Memory Overheads. We also measured the memory overhead introduced by the two-
process solution. The reference controller increased an IE browser’s memory usage by
1MB. The size of the memory allocated to the add-on manager varied with different
plug-ins, which was around 18MB for the google toolbar and 14MB for the Yahoo!
toolbar. On the other hand, we found that a google toolbar directly attached to IE
added 4.8MB to a browser’s process memory. This became 3.3MB for the Yahoo!
toolbar. Therefore, the memory overhead of our prototype ranged from 11MB to 15MB.
Such an overhead is for a single browser window. As we discussed in Section 3.2, the
add-on manager running in a separate process can provide services to multiple browser
windows by spawning service threads. In our experiment, we observed that launching a
new IE window only cost the add-on manager 0.1 to 0.5MB, depending on the plug-
in being requested. This is much lower than the memory cost of creating a new plug-in
instance, which is necessary if the plug-in is directly attached to IE instead of the proxy.
5 Discussions
In this section, we discuss the limitations of the current design and implementation of
SpyShield, and the potential improvement.
SpyShield: Preserving Privacy from Spy Add-Ons
313
Limitations of Design. The current design of SpyShield is speciﬁc to the containment
of spy add-ons. The user’s interactions with sensitive data are still subject to the surveil-
lance of keyloggers which intercept keystroke inputs, and screen grabbers which snoop
on screen outputs. To defeat these attacks, we need to extend SpyShield to include
system-wide security policies and an enforcement mechanism which prevents sensitive
information from ﬂowing into untrusted objects. Development of such a technique is
part of our future research.
Although SpyShield can prevent spyware from being loaded into the kernel through
system calls, it is unable to fend off the attacks through a kernel driver’s vulnerabilities,
for example, buffer overrun. When this happens, we rely on other techniques [16] to
protect the kernel.
Limitations of Implementation. The current implementation of SpyShield applies the
same security policies to the whole window object. This becomes problematic when a
frame object is displaying multiple web pages in different zones within one window. A
quick solution is to enforce the strictest policies of these zones. A better approach, how-
ever, should work on individual web page and treat them differently. Such functionality
is expected in the future improvement of the prototype.
For simplicity, we only wrapped the COM interfaces requested by all the toolbars
and BHOs used in our experiments. A thorough implementation needs to create all
documented interfaces both in the reference controller and the add-on manager to ac-
commodate different kinds of plug-ins.
6 Related Work
Existing defense against spyware infections mainly relies on detection techniques. These
techniques are either based on signatures or behaviors, which we survey as follows.
Signature-based approaches analyze binary executables to identify spyware compo-
nents or scan network trafﬁcs to detect spyware’s communications with the perpetra-
tor [2,10,23]. These approaches are fast, but can only detect known spyware. They can
also be easily evaded [24]. Behavior-based approaches detect spyware according to its
behaviors. Siren [13] and NetSpy [28] analyze the difference between the network traf-
ﬁc from an infected system and that of a clean system to identify spyware’s networking
activities. Web Tap [12] runs an network-based anomaly detector to capture spyware’s
network trafﬁc. Gatekeeper [29] monitors the changes of Windows auto-start extensi-
bility points for detecting spyware. GhostBuster [30] exposes rootkits by comparing a
view of a clean system with that of an infected system. Recently, Kirda, et al proposed
a technique [19] which applies dynamic analysis to detect suspicious communications
between an IE browser and its plug-ins, and then analyzes the binaries of suspicious
plug-ins to identify the library calls which may lead to leakage of sensitive informa-
tion. SpyShield complements these techniques by adding an additional layer of defense
which protects the user’s privacy even after the detection mechanisms have been com-
promised.
Most of the existing proposals for spyware containment have been limited to protect-
ing conﬁdential inputs such as passwords from keyloggers. Bump in the Ether [21] of-
fers a mechanism which bypasses common avenues of attack through a trusted
314
Z. Li, X. Wang, and J.Y. Choi
tunnel implemented using a mobile device. SpyBlock [17] evades the surveillance of
the keyloggers inside a virtual machine by directly injecting users’ passwords into the
network trafﬁc intercepted by the host. These approaches are not very effective to spy-
ware add-ons which are already part of their host application and can not only directly
access its sensitive inputs but also snoop on its sensitive outputs such as the bank ac-
count displayed in a browser. In addition, they need either additional hardware (mobile
device) or heavyweight software (a virtual machine). Microsoft’s Next-Generation Se-
cure Computing Base proposes encrypting keyboard, mouse input, and video output [8].
Though a promising approach, it signiﬁcantly modiﬁes current operating systems and
its practicality is yet to see. By comparison, SpyShield is fully compatible with existing
systems and can be easily installed and removed.
Similar to the two-process solution of SpyShield, privilege separation [25] parti-
tions a program into a monitor to handle privileged operations, and a slave to perform
unprivileged operations. Program partition is traditionally done manually over source
code. Recent research, however, has made an impressive progress on automating this
step [14]. While apparently assuming the same architecture, SpyShield actually aims at
a different goal, inhibiting sensitive information from ﬂowing into untrusted add-ons.
To this end, it needs not only to segregate the privileged part of the program from the
unprivileged part, but also to enforce security policies to their communication chan-
nel, the add-on interfaces, so as to regulate the information exchange between them. In
addition, SpyShield separates a binary executable from its binary add-ons along their
interfaces while privilege separation usually works on source code.
Another proposal which also employs the two-process architecture for privacy pro-
tection is data sandboxing [18]. The approach partitions a program into a private part
which is allowed to access local ﬁles but forbidden to make network connections, and
a public part which is permitted to perform networking activities but disallowed to read
local data. Such a policy is enforced through system-call interposition [18]. In con-
trast, SpyShield aims at control of the communications through add-on interfaces, a
task which system calls may not have sufﬁcient granularity to handle.
Information ﬂow analysis started with the famous Bell-LaPadula model which con-
trols the interactions between processes and ﬁles [11]. More recent work [22,32] fo-
cused on tracing data ﬂows within a program. By comparison, SpyShield does not work
on such instruction-level tracing, which incurs large performance overheads in absence
of source code, and instead manages the information ﬂows across the boundary between
add-ons and their host application.
7 Conclusions and Future Work
In this paper, we propose SpyShield, a novel spyware containment technique, which can
automatically block the visions of untrusted programs in the presence of sensitive infor-
mation. Such a technique can also defeat the surveillance of new strains of spyware. As
a ﬁrst step, our approach offers general protection against spy add-ons which constitute
a signiﬁcant portion of existing spyware infections. SpyShield enforces security poli-
cies to add-on interfaces and other channels used by add-ons to interact with their host
applications, so as to prevent sensitive information from ﬂowing into untrusted add-ons.
SpyShield: Preserving Privacy from Spy Add-Ons
315
It can also defend itself against a variety of attacks. We implemented a prototype for
protecting Internet Explorer and empirically evaluated its efﬁcacy. Our experimental
studies show that this technique can effectively mitigate the threats of spyware surveil-
lance and also introduces a small overhead.
References
1. Browser extensions, http://msdn.microsoft.com/workshop/browser/ext/extensions. asp
2. The home of spybot search & destroy, http://www.safer-networking.org/
3. Mozillazine: Extension development,
http://kb.mozillazine.org/Dev_:_Extensions
4. State of Spyware Q2 2006: Consumer Report,
http://www.webroot.com/resources/stateofspyware/excerpt.html
5. Wireshark, http://www.wireshark.org/
6. DCOM technical overview (1996),
http://msdn2.microsoft.com/en-us/library/ms809340.aspx
7. XPCOM Part 1: An introduction to XPCOM (1996), http://www-128.ibm.com/
developerworks/webservices/library/co-xpcom.html
8. Microsoft Next-Generation Secure Computing Base - Technical FAQ (July 2003),
http://www.microsoft.com/technet/archive/security/news/ngscb.
mspx?mfr=true
9. Ucmore toolbar, the search accelerator (2007), http://www.ucmore.com/
10. Snort developed by sourceﬁre (January 2006), http://www.snort.org/
11. Bell, D.E., LaPadula, L.J.: Secure computer systems: Uniﬁed exposition and multics inter-
pretation. MTR-2997, available as NTIS AD-A023 588, MITRE Corporation (1976)
12. Borders, K., Prakash, A.: Web tap: detecting covert web trafﬁc. In: Proceedings of the 11th
ACM conference on Computer and communications security, pp. 110–120. ACM Press, New
York (2004)
13. Borders, K., Zhao, X., Prakash, A.: Siren: Catching evasive malware (short paper). In: IEEE
S&P, pp. 78–85. IEEE Computer Society Press, Los Alamitos (2006)
14. Brumley, D., Song, D.X.: Privtrans: Automatically partitioning programs for privilege sepa-
ration. In: USENIX Security Symposium, pp. 57–72 (2004)
15. Egele, M., Kruegel, C., Kirda, E., Yin, H., Song, D.: Dynamic Spyware Analysis. In: Usenix
Annual Technical Conference, USA (June 2007)
16. Garﬁnkel, T., Rosenblum, M.: A virtual machine introspection based architecture for intru-
sion detection. In: NDSS (2003)
17. Jackson, C., Boneh, D., Mitchell, J.C.: Stronger password authentication using virtual ma-
chines. Stanford University (submission, 2006)
18. Khatiwala, T., Swaminathan, R., Venkatakrishnan, V.: Data sandboxing: A technique for
enforcing conﬁdentiality policies. In: ACSAC (December 2006)
19. Kirda, E., Kruegel, C., Banks, G., Vigna, G., Kemmerer, R.: Behavior-based spyware detec-
tion. In: Proceedings of 15th USENIX Security Symposium (August 2006)
20. Mani, V.: Cross Process Subclassing (2003),
http://www.codeproject.com/dll/subhook.asp
21. McCune, J.M., Perrig, A., Reiter, M.K.: Bump in the ether: A framework for securing sen-
sitive user input. In: Proceedings of the USENIX Annual Technical Conference, June 2006,
pp. 185–198 (2006)
22. Newsome, J., Song, D.X.: Dynamic taint analysis for automatic detection, analysis, and sig-
nature generation of exploits on commodity software. In: NDSS (2005)
316
Z. Li, X. Wang, and J.Y. Choi
23. Paxson, V.: Bro: a system for detecting network intruders in real-time. Computer Net-
works 31(23-24), 2435–2463 (1999)
24. Rubin, S., Jha, S., Miller, B.P.: Automatic generation and analysis of nids attacks. In: AC-
SAC, pp. 28–38 (2004)
25. Saltzer, J.H.: Protection and the control of information sharing in miltics. Communications
of the ACM 17(7), 388–402 (1974)
26. Schreiber, S.B.: Undocumented Windows 2000 Secret: a programmers cookbook, May 2001.
Addison-Wesley, Reading (2001)
27. von Ahn, L., Blum, M., Hopper, N.J., Langford, J.: CAPTCHA: Using Hard AI Problems
for Security. In: Biham, E. (ed.) Advances in Cryptology – EUROCRPYT 2003. LNCS,
vol. 2656, pp. 294–311. Springer, Heidelberg (2003)
28. Wang, H., Jha, S., Ganapathy, V.: NetSpy: Automatic Generation of Spyware Signatures for
NIDS. In: Jesshope, C., Egan, C. (eds.) ACSAC 2006. LNCS, vol. 4186, Springer, Heidelberg
(2006)
29. Wang, Y.-M., Roussev, R., Verbowski, C., Johnson, A., Wu, M.-W., Huang, Y., Kuo, S.-Y.:
Gatekeeper: Monitoring Auto-Start Extensibility Points (ASEPs) for Spyware Management.
In: USENIX LISA 2004 (2004)
30. Wang, Y.-M., Vo, B., Roussev, R., Verbowski, C., Johnson, A.: Strider ghostbuster: Why it’s
a bad idea for stealth software to hide ﬁles. Technical Report MSR-TR-2004-71, Microsoft
Research (2004)
31. Willliams, S., Kindel, C.: The component object model: A technical overview (October
1994), http://msdn2.microsoft.com/en-us/library/ms809980.aspx
32. Xu, W., Bhatkar, S., Sekar, R.: Taint-enhanced policy enforcement: A practical approach to
defeat a wide range of attacks. In: Proceedings of the 15th USENIX Security Symposium,
Vancouver, BC, Canada (August 2006)