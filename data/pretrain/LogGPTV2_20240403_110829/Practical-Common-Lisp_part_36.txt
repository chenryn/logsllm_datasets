传递一个实现相关的、值为真的关键字参数:directories，那么它将返回子目录。对于CLISP
SBCL、CMUCL和LispWorks可以返回子目录。OpenMCL默认不会这样做，但如果为DIRECTORY
慎处理另外一些实现间的区别。其中一点是，并非所有实现都返回给定目录中的子目录。Alegro、
被读取要么被跳过；同样，在#+clisp之后，NIL要么被读取要么被跳过。
注意每一个读取期条件是怎样在单个表达式层面上操作的。在#-clisp之后，表达式:wild要么
组件的路径名，而在CLISP中该类型组件为NIL。
适当的通配符，它通过使用读取期条件化在除CLISP之外的所有实现里生成一个带有:wild类型
directory-wildcard，其接受一个目录形式或文件形式的路径名，并返回一个给定实现下的
非:wild，DIRECTORY将不会返回那些没有扩展名的文件。因此，你可以定义一个函数
多亏了CLISP的DIRECTORY实现中的一个怪癖。在CLISP中，除非通配符中的类型组件是NIL而
MAKE-PATHNAME，来生成一个通配路径名并传给DIRECTORY。不幸的是，事情没有那么简单，
一旦你知道如何使每一个实现做到你想要的事,那么实际编写list-αirectory就只是简单
一旦所有实现都返回目录了，你会发现它们返回的目录名有些是目录形式的，有些是文件形
(defun list-directory (dirname)
使用上述定义，该函数在SBCL、CMUCL和LispWorks中正常工作。不幸的是，你还需要谨
现在你可以首次看到list-directory函数了：
(defun list-directory (dirname)
(defun directory-wildcard (dirname)
现在看起来似乎可以通过在由pathname-as-directory返回的目录形式名字上调用
(when (wild-pathname-p dirname)
(directory (directory-wildcard dirname)))
(when(wild-pathn
:defaults (pathname-as-directory dirname)))
(make-pathname
(error
pathname)))
:defaults pathname)
:type
:name
"Can
only
nil
nil
list
 concrete directory names."))
(list (file-namestring pathname)))
lame)
www.TopSage.com
15.3列目录
161
---
## Page 179
目录形式将名字传给PROBE-FILE。如果文件存在并且是一个目录，它将返回目录形式的名字。
它一-个非目录的名字，它会返回NIL。因此对于这些实现，为了得到想要的行为，你可以首先以
会返回目录形式的路径名，而只是简单地返回传给它的参数。幸运的是，如果以目录形式传递给
有实现的PROBE-FILE都具有相同的行为。
SBCL、LispWorks和OpenMCL里，PROBE-FILE已经提供了file-exists-p的行为，但并非所
还是目录名。
名。这将允许你使用file-exists-p和directory-pathname-p来测试任意一个名字是文件名
或文件形式的目录名，但如果该文件存在并且是一个目录，那么它应当总是返回目录形式的路径
15.4
式是整个DEFUN，因此整个函数定义是否被包含将取决于cliSp是否存在于*FEATURES*中。
不需要它，因而可以将其定义放在一个读取期条件之后。在这种情况下，由于跟在#+后面的表达
Allgro和CMUCL的PROBE-FILE函数接近于你想要的行为一
从理论上讲，file-existS-p和标准函数PROBE-FILE非常相似。确实，在一些实现，即
162
为了替换PROBE-FILE，你可以定义一个称为file-exists-p的函数。它应当接受一个路径
(defun clisp-subdirectories-wildcard (wildcard)
#+clisp 
函数clisp-subdirectories-wildcard事实上并非是CLISP相关的，由于任何其他实现
测试文件的存在
:directory (append (pathname-directory wildcard) (list :wild))
(make-pathname
:defaults wildcard))
:type nil
:name nil
#-(or sbcl cmu lispworks openmcl allegro clisp)
#+clisp
(directory wildcard :directories-are-files nil)
#+allegro 
(directory wildcard :directories t)
#+openmcl
(directory
#+(or sbcl cmu lispworks)
(error "Can only list concrete directory names."})
(@irectory (clisp-subdirectories-wildcard wildcard)})
(directory wildcard)
(nconc
第15章实践：可移植路径名库
wildcard)
www.TopSage.com
一接受任何形式的目录名但不
---
## Page 180
但它通常很有用，因此我们为所有实现定义它并使其成为该库的一部分。
directory的逆函数，它返回等价于其参数的文件形式的路径名。尽管该函数只有CLISP用到，
IGNORE-ERRORS中来实现想要的语义。
年
字，或者目录形式的名字而刚好该名字是一个文件时报错。唯一的区别在于，当命名的目录存在
probe-directory.（在ext包中）。这几乎就是PROBE-FILE的镜像：它将在传递文件形式的名
名字实际上是一个目录的名字时报错。为了测试一个目录是否存在，CLISP提供了它自己的函数
时立即报错，无论该名字所代表的文件或目录是否存在。它也会在以文件形式传递一个名字且该
如果该调用返回NIL，那么你可以用文件形式的名字再试一次。
①这个方法稍微有一点问题，例如，PROBE-FILE可能因为其他原因报错，这时代码将错误地解释它。不幸的是，
CLISP版本的file-exists-p用到的函数pathname-as-file，是前面定义的pathname-as-
就算在CLISP中，你也可以通过将对PROBE-FILE和probe-directory的调用包装在
它返回T而不是路径名。
CLISP文档并未指定PROBE-FILE和probe-directory可能报错的类型，并且从经验来看，在多数出错情况下
(defun pathname-as-file(name)
它们将会报出simple-file-error。
#+(or allegro cmu)
(defun file-exists-p (pathname)
(let((pathname(pathname name)))
(error "list-directory not implemented"))
#-(or sbcl cmu lispworks openmcl allegro clisp)
(or(ignore-errors
#+clisp
(or
(when(wild-pathname-ppathname)
(let*（(directory
(error "Can't reliably convert wild pathnames."))
(probe-filepathname))
(probe-file
(make-pathname
(probe-file(pathname-as-file pathname)))
type
(when (ext:probe-directorydirectory-form)
directory-form))))
(pathname-typename-and-type)
(pathname-as-directory pathname))
www.TopSage.com
---
## Page 181
下面向对象。
MP3文件的目录树中将会艰难前行，但在我们到达那里之前，我还需要在接下来的两章中谈论一
节里将会很有用，尤其是第23章和第27章，在那里你将使用walk-directory在含有垃圾信息和
用标准函数CONSTANTLY而生成的。
有当测试参数返回真时才会被调用。：test参数的默认值是一个总是返回真的函数，它是通过调
有：test参数，它指定另一个函数，在调用主函数之前在每一个路径名上调用该函数，主函数只
和:test。当:directories为真时，它将在所有目录的路径名和正规文件上调用该函数。如果
并在该目录下所有文件的路径名上递归地调用该函数。它还接受两个关键字参数：：directories
数。尽管如此，该函数很有用，你将在后续几章里多次用到它。它接受一个目录的名字和一个函数，
函数不同，这个函数不需要做任何事情来消除实现间的区别，它只需要用到你已经定义的那些函
15.5
最后，为了完成这个库，你可以实现一个称为walk-directory的函数。与前面定义的那些
164
现在你有了一个用于处理路径名的有用的函数库。正如我提到的那样，这些函数在后面的章
(defun walk-directory (dirname fn &key directories (test (constantly t)))
(labels
遍历目录树
(walk (pathname-as-directory dirname))))
第15章实践：可移植路径名库
((walk (name)
(cond
:defaults pathname))
((funcail test name)
((directory-pathname-p name)
(when (and directories (funcail test name))
{funcall
(list-directory name)) (walk x)))
fn name))
www.TopSage.com
(funcall fn name)))))
---
## Page 182
方式令一门语言支持面向对象。“如果你几乎没有面向对象编程经验，那么也应当不难理解这里
一语言，那么你可能会发现CommonLisp的观点多少有些另类。你应当试图避免假设只存在一种
现这些思想时所采用的强大和通用的方式。另一方面，如果你的面向对象经历很大程度上来自单
向对象的原则。如果你能够深刻理解面向对象背后的基本思想，那么将会感谢Common Lisp在实
下一章里，我将描述其中最常用的特性，并给出关于Common Lisp对象的概述。
为语言的构造工具”这一哲学的具体表现。本书无法对所有这些特性全部加以介绍，但在本章和
合并到了语言之中，因此单独提及CLOS就不再有任何实际意义了。
中的一些被合成在一起，以Common Lisp Object System（即CLOS）的名义出现。ANSI标准将CLOS
Smalltalk中所展现的）合并到Lisp中的方式。作为Common Lisp标准化过程的一部分，这些实验
开发于面向对象还是一个崭新思想的年代，而那时有许多实验在探索将面向对象的思想（尤其是
②有些人反对将CommonLisp作为面向对象语言。特别是那些将严格数据封装视为面向对象关键特征的人们，通常
①现在，Simula通常被认为是第一个面向对象的语言，其发明于20世纪60年代早期，只比McCarthy的第一个Lisp晚
你应当从一开始就注意到，Common Lisp的对象系统体现了与许多其他语言中相当不同的面
CLOS为CommonLisp贡献的特性既有那些必不可少的，也有那些相对难懂的Lisp的“语言作
一原来CommonLisp竟是一门非常彻底的面向对象语言。CommonLisp之前的几个Lisp语言
其面向广义函数的设计提供了纯消息传递所无法提供的自由度。
那些将消息传递视为面向对象关键特征的人们也不会很高兴，因为CommonLisp在声称自己是面向对象的同时，
按照那样的定义，就算是Smaltalk这种无可争议的最早的和最纯粹的面向对象语言也不再是面向对象的了。另外，
是诸如C++、Eiffel或Java这类相对静态语言的拥护者，他们不认为CommonLisp是真正面向对象的。当然，如果
对象（objectoriented），而我可以告诉你C++并不是我头脑里所想的东西。”
性而已，并不属于面向对象的核心内容。事实上，据说Smaltalk的发明者AlanKay就曾说过：“我发明了术语面向
例如严格的数据封装是面向对象的关键特征。不过来自Smalltalk阵营的人们则认为C++的许多特性只是C++的特
这种早期的分道扬导致了许多关于面向对象的定义的困惑。来自C++阵营的人们倾向于认为C++的特定方面，
态的面向对象语言，C++则组合了Simula和C一—另一种相当静态的语言，从而得到了一个静态的面向对象语言，
以后C++才得以发布。Smalltak从Lisp那里获得了许多灵感，并将它与来自Simula的思想组合起来，产生出一种动
了几年。尽管如此，直到20世纪80年代Smalltak的第一个广泛使用的版本发布以后，面向对象才真正起飞，几年
isp的发明比面向对象编程的兴起早了几十年°，新的Lisp程序员们有时会惊奇地发现,
第16章
一一
重新审视面向对象
广义函数
www.TopSage.com
---
## Page 183
意义上的方法调用应写成
息。尽管如此，这种方式并不完全令人满意，因为它使得方法调用不同于正常的函数调用。句法
于一个给定名字都有它自己的方法，因此发送相同的消息到不同的对象可以调用不同的方法。
任何参数。该对象随后使用其类来查找与该消息中的名字所关联的方法并运行它。由于每个类对
统中，方法调用开始于向被调用方法所操作的对象发送一个消息，其中含有需要运行的方法名和
称为消息传递（message passing），这是来自Smaltalk的术语。从概念上来讲，在一个消息传递系
在一个特定对象上调用一个方法，然后该对象所属的类决定运行什么代码。这种方法调用的模型
行为由属于一个特定类的方法（method）或成员函数（member function）定义。在这些语言里，
个实例。?Common Lisp也支持多继承（multiple inheritance），即单一的类可以拥有多个直接基类。
根，即类T，它是其他类的所有直接或间接基类。这样，CommonLisp中的每一个数据都是T的一
部分，而一个类的实例也被认为是其基类的实例。在CommonLisp中，类的层次关系带有一个单
类（subclass），后者称为它的基类（superclass）。一个类从它的基类中继承（inherit）其定义的一
由称为槽（slot）的命名部分组成。
只能通过管理这些类型的标准函数来访问;而用户自定义类的实例,如同你将在下一章里看到的
列
性操作，诸如绘制一个对象，可以带有许多不同的具体形式。
面向对象风格称为“多义性”，源自希腊语polymorphism，意思是“多种形式”，因为单一的概念
新的版本可以被定义来绘制其他图形，而无需修改调用方或是任何其他draw实现的代码。这一
三角形或矩形，具体取决于draw操作所应用到的对象类型。draw的不同实现被分别定义，并且
操作。draw操作的不同实现可用于绘制圆、三角形和矩形，而对draw的调用将实际绘制出圆、
类型。所有关于面向对象的介绍中使用的经典例子，是可应用于代表各种几何图形的对象的draw
类型上。特别是，你希望产生一种操作并让其确切行为取决于该操作所涉及的一个或多个对象的
16.1
的解释，不过文中偶尔比较其他语言做同样事情的方式的内容，你就只好跳过不看了。
在Lisp家族之外，几乎所有的面向对象语言都遵循了由Simula建立的基本模式：类所关联的