אתגר Check Point –
2018
מאת
Dvd848
הקדמה
חברת צ'ק פוינט פרסמה
סדרה של אתגרים במסגרת מסע הפרסום של &quot;האקדמיה הראשונה לסייבר מבית צ’ק פוינט&quot;.
האתגרים הגיעו ממספר תחומים, ביניהם Web, Reversing, Programming, Networking ו-Logic.
&nbsp;
אתגר 1 – Return
of the Robots (קטגוריית Web, 10 נקודות)
&nbsp;
הוראות האתגר:
```
Return of the Robots
Robots are cool, but trust me: their access should be limited!
```
לפסקה צורף קישור
לאתר עם טקסט על היסטוריית הרובוטיקה:
&nbsp;
מה שהטקסט נמנע
מלהזכיר הוא כמובן שבעולם ה-Web, המונח Robots מיד מקפיץ אסוציאציה של הקובץ  robots.txt, או בשמו הרשמי יותר &quot;פרוטוקול אי הכללת רובוטים&quot;. 
זהו פרוטוקול שמאפשר
לבעלי אתרים לבקש מבוטים של מנועי חיפוש שסורקים את האינטרנט להימנע מלכלול דפים
מסוימים של האתר בתוצאות מנוע החיפוש. כאשר מנוע החיפוש מגיע לאתר, הוא אמור לבדוק
את התוכן של הקובץ robots.txt בתיקיית השורש של האתר. אם קובץ כזה קיים, מנוע החיפוש לא אמור
לאנדקס כתובות שמצוינות בקובץ (כמובן שזוהי מוסכמה ושום דבר לא מונע ממנוע חיפוש
לאנדקס מה שהוא רוצה, כל עוד יש לו גישה לדף).
כלומר, אם קיימים
דפים שמנהל האתר לא מעוניין לחשוף באופן פומבי, הוא יכול לכלול אותם בקובץ הזה. אולם,
זה מייצר בעיה אחרת, מעצם העובדה שהקובץ הזה חייב להיות פומבי: הוא כולל רשימה
ממוקדת ונגישה של כל הדפים שאין להם עניין ציבורי.
אם ננסה לקרוא את
הקובץ מהשרת של האתגר, נמצא את התוכן הבא:
```
User-agent: *
Disallow: /secret_login.html
```
ניגש לדף ונראה:
קוד המקור של הדף
נראה כך:
```html
  function r(n) {
    for (var r=0, o=0, e="", t=0; t
  No Robots Allowed
  Password: 
```
&nbsp;
אפשר לראות
שפונקציית auth משווה את
הסיסמא שהתקבלה מהמשתמש אל ערך קבוע (מקודד ב-Base64, כפי שאפשר לראות בין השאר מהשימוש בפונקציית btoa שמקודדת מחרוזת ב-Base64). נשתמש בפונקציית atob לפענוח הקידוד
ונקבל את הסיסמא:
```javascript
>> atob("SzMzcFQjM1IwYjB0JDB1dA==")
"K33pT#3R0b0t$0ut"
```
בתגובה, הדף יקפיץ
את הדגל:
&nbsp;
אתגר 2 – Diego's
Gallery (קטגוריית Web, 20 נקודות)
&nbsp;
הוראות האתגר:
```
Diego's Gallery
Recently I've been developing a platform to manage my cat's photos and keep my flag.txt safe. Please check out my beta
To avoid security loop holes such as SQL injections I developed my own scheme.
Every line in my DB look's like this:
> START|||username|||password|||role|||END
So for example:
> START|||diego|||catnip|||admin|||END
> START|||joe|||1234567|||user|||END
```
&nbsp;
האתר מכיל טופס
התחברות פשוט:
כמו ב-SQL Injection בסיסי, נרצה להכניס
קלט באחד השדות שישפיע על התחביר במקום רק על הנתונים.
למשל, אם במקום הסיסמא,
נכניס:
some_password|||admin|||END
התחביר הסופי יהיה:
START|||some_username|||some_password|||admin|||END|||user|||END
וכך נצליח לגרום
לקוד לחשוב שהמשתמש שלנו הוא מנהל, ונקבל גישה לדף הניהול:
&nbsp;
כפתורי הניהול לא
עושים שום דבר מעניין, אך שימו לב לשורת הכתובות:
http://35.194.63.219/csa_2018/diegos_gallery/_trpyyxfhoszl/admin-panel/index.php?view=log.txt
הקובץ index.php מקבל כפרמטר שם של
קובץ ומציג את התוכן שלו. 
מה יקרה אם במקום log.txt נבקש קובץ אחר,
למשל flag.txt?
<span lang=HE dir=RTL style='font-size:11.0pt;line-height:107%;font-family: