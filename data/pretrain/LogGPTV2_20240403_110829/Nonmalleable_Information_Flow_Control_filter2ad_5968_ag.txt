Γ; pc ⊢ e : τi
Γ; pc ⊢ inji e : (τ1 + τ2)
Γ; pc ⊢ e : (τ1 + τ2)
⊢ pc ⊑ τ
Γ, x :τ1; pc ⊢ e1 : τ
Γ, x :τ2; pc ⊢ e2 : τ
Γ; pc ⊢ case e of inj1 (x ).e1 | inj2 (x ).e2 : τ
pc ⊑ ℓ
Γ; pc ⊢ e : τ
Γ; pc ⊢ (ηℓ e ) : ℓ says τ
[VUnitM]
Γ; pc ⊢ v : τ
Γ; pc ⊢ (η ℓ v ) : ℓ says τ
⊢ ℓ ⊑ τ
Γ; pc ⊢ e : ℓ says τ ′
Γ, x :τ ′; pc ⊔ ℓ ⊢ e′ : τ
Γ; pc ⊢ bind x = e in e′ : τ
′ says τ
′→ ⊑ ℓ
←
′← = ℓ
Γ; pc ⊢ e : ℓ
←
′ ⊔ pc)
)
ℓ
Γ; pc ⊢ decl e to ℓ : ℓ says τ
→
′→ = ℓ
′ ⊔ pc)
→
Γ; pc ⊢ e : ℓ
ℓ
′ says τ
′← ⊑ ℓ
ℓ
← ⊔ ∇((ℓ
ℓ
→ ⊔ ∆((ℓ
)
Γ; pc ⊢ endorse e to ℓ : ℓ says τ
pc ⊑ ℓ
pc ⊑ ℓ
Figure 20: Typing rules for full NMIFC language.
[Bot] p ≽ ⊥
[Top] ⊤ ≽ p
[Refl] p ≽ p
[Proj]
p ≽ q
p π ≽ qπ
[ProjR] p ≽ p π
[ConjL]
p1 ≽ q
p2 ≽ q
p1 ∨ p2 ≽ q
[DisL]
[DisR]
pi ≽ q
i ∈ {1, 2}
p1 ∧ p2 ≽ q
p ≽ qi
i ∈ {1, 2}
p ≽ q1 ∨ q2
[ConjR]
p ≽ q1
p ≽ q2
p ≽ q1 ∧ q2
[Trans]
p ≽ q
q ≽ r
p ≽ r
Figure 21: Principal lattice rules
downgrading events that can cause traces to differ arbitrarily. To
accomplish this goal, we use brackets that serve only the second
purpose: they track restricted information but not multiple execu-
tions.
As in previous formalizations, NMIFC’s brackets are defined
with respect to a notion of “high” labels, in this case a high set.
The high set restricts the type of the expression inside the bracket
as well as the pc at which it must type, thereby restricting the
effects it can create. For the more complex theorems we must track
Syntax extensions
New contexts
E
B
Evaluation extensions
[B-Expand]
[B-DeclL]
[B-DeclH]
[B-EndorseL]
[B-EndorseH]
Typing extensions
[Bracket]
Bracket projection
⌊e′⌋
⌊e⌋ =
::=
::=
v
e
::=
::=
· · ·
· · ·
ℓ (cid:60) H
(cid:12)(cid:12)(cid:12) (cid:76) v(cid:77)H
(cid:12)(cid:12)(cid:12) (cid:76) e(cid:77)H
(cid:12)(cid:12)(cid:12) (cid:76) E(cid:77)H
(cid:12)(cid:12)(cid:12) bind x = [·] in e
· · ·
proji [·]
B[(cid:76) v(cid:77)H ] −→(cid:76) B[v](cid:77)H
decl(cid:76) v(cid:77)H to ℓ −→ decl v to ℓ
decl(cid:76) v(cid:77)H to ℓ −→(cid:76) decl v to ℓ(cid:77)H
endorse(cid:76) v(cid:77)H to ℓ −→ endorse v to ℓ
endorse(cid:76) v(cid:77)H to ℓ −→(cid:76) endorse v to ℓ(cid:77)H
Γ; pc′ ⊢ e : τ
pc′ ∈ H
Γ; pc ⊢(cid:76) e(cid:77)H : τ
if e =(cid:76) e′(cid:77)H
H is upward closed
pc ⊑ pc′
⊢ τ prot H
ℓ ∈ H
ℓ ∈ H
ℓ (cid:60) H
recursively project all sub-expressions otherwise
Figure 22: NMIFC language extensions.
data with multiple different high labels within the same program
execution, so we parameterize the brackets themselves with the
high set. We present the extended syntax, semantics, and typing
rules in Figure 22.
B ATTACKER PROPERTIES
Recall that we defined an attacker as a set of principals A = {ℓ ∈
L | n1 ∧ · · · ∧ nk ≽ ℓ} for some non-empty finite set of atomic
principals {n1, . . . , nk} ⊆ N .
Definition B.1 (Attacker properties). Let A be an attacker and let
Aπ = {p ∈ L | ∃q ∈ L such that pπ ∧ qπ′ ∈ A}. The following
properties hold:
(1) for all a1, a2 ∈ Aπ , a1 ∧ a2 ∈ Aπ (Attacking principals may
(2) for all a ∈ Aπ and b ∈ L, a ∨ b ∈ Aπ (Attackers may
(3) for all b1, b2 (cid:60) Aπ , b1 ∨ b2 (cid:60) Aπ (Combining public in-
formation in a public context yields public information and
combining trusted information in a trusted context yields
trusted information)
(4) for all a ∈ L and b (cid:60) Aπ , a∧b (cid:60) Aπ (Attackers cannot com-
promise policies requiring permission from non-attacking
principals)
attenuate their power)
collude)
(5) for all a ∈ A, ∇(a→) ∧ ∆(a←) ∈ A. (Attackers have the
same power in confidentiality and integrity)
The theorems proved in this paper hold for any attacker satisfy-
ing these properties, so for generality we can take the properties in
Definition B.1 as defining an attacker.
We now prove that our original definition of an attacker satisfies
Definition B.1.
Proof. Conditions 1 and 2 of Definition B.1 follow directly from
the definition of A and ConjR and DisR, respectively. Condition 5
holds by the symmetry of the lattice.
Since we are only examining one of confidentiality and integrity
at a time, for the following conditions we assume without loss of
generality that all principals in each expression have only the π
projection and the other component is ⊥. In particular, this means
we can assume Proj and ProjR are not used in any derivation, and
any application of the conjunction or disjunction derivation rules
split in a meaningful way with respect to the π projection (i.e.,
neither principal in the side being divided is ⊤ or ⊥).
We now show Condition 4 holds by contradiction. Assume a ∈ L
and b (cid:60) Aπ , but a ∧ b ∈ Aπ . This means (n1 ∧ · · · ∧ nk )π ≽
a ∧ b. We prove by induction on k that a, b ∈ Aπ . If k = 1, then
the only possible rule to derive this result is ConjL and we are
finished. If k > 1, then the derivation of this relation must be
due to either ConjL or ConjR. If it is due to ConjR, then this
again achieves the desired contradiction. If it is due to ConjL, then
the same statement holds for a subset of the atomic principals
n′
1, . . . , n′
k′ )π ≽ bπ ,
and by Trans, (n1 ∧ . . . ∧ nk )π ≽ bπ which also contradicts our
assumption.
Finally, we also show Condition 3 holds by contradiction. We
assume b1, b2 (cid:60) Aπ but b1 ∨ b2 ∈ Aπ and again prove a contra-
diction by induction on k. If k = 1, then the derivation showing
1 ≽ (b1 ∨ b2)π must end with DisR which contradicts the as-
nπ
sumption that b1, b2 (cid:60) Aπ . If k > 1, the derivation either ends with
DisR, resulting in the same contradiction, or with ConjL. In this
second case, the same argument as above holds: there is a strict
subset of the principals n1, . . . , nk that act for either b1 or b2 and
thus by Trans we acquire the desired contradiction.
□
k′, where k′ < k, so by induction, (n′
1 ∧ · · · ∧ n′
C GENERALIZATION
Definition 6.9 (and correspondingly Theorem 6.10) might appear
relatively narrow; they only speak directly to programs with a
single untrusted value and a single secret value. However, because
the language has first-class functions and pair types, the theorem
as stated is equivalent to one that allows insertion of secret and
untrusted code into multiple points in the program, as long as that
code types in an appropriately restrictive pc.
To define this formally, we first need a means to allow for inser-
tion of arbitrary code. We follow previous work [27] by extending
the language to include holes. A program expression may contain
an ordered set of holes. These holes may be replaced with arbitrary
expressions, under restrictions requiring that the holes be treated
as sufficiently secret or untrusted. Specifically, the type system is
extended with the following rule:
Using this definition, we can state NMIF in a more traditional
bind y
[Hole]
pc ∈ H
⊢ τ prot H
Γ; pc ⊢ [•]H : τ
H is a high set
form.
Definition C.1 (General NMIF). We say that a program e[⃗•]H
enforces general NMIF if the following holds for all attackers A
inducing high sets U and S. Let T = L \ U, P = L \ S and
W = T ∩ S. If H ⊆ U, then for all values v1, v2 and all attacks
vij , tij(cid:69)
.
For all indices nij such that t
(1) If ti1
(cid:11) −→→ ∗(cid:68)
⃗a1 and ⃗a2, let(cid:10)e[⃗ai]H [⃗x (cid:55)→ ⃗vi], ⃗vi
(cid:48)W •
(cid:17)
(cid:17)
..ni1−1 ≈⋆T ti2
rel←
A,e (w1) and t11
..ni2−1 for i = 1, 2, then
..n1j−1 ≈⋆P t
..n11 ≈⋆P t21
(2) Similarly, if t
(cid:16)
(cid:16)
ij
ni j
..n21
1j
rel→
A,e (v1) and t11
..n11 ≈⋆T t12
..n12
=⇒ t12
..n12 ≈⋆P t22
..n22 .
2j
..n2j−1 for j = 1, 2, then
=⇒ t21
..n21 ≈⋆T t22
..n22 .
For NMIFC, this definition is equivalent to Definition 6.9. We
prove this fact to prove the following theorem.
Theorem C.2 (General NMIF). Given a program e[⃗•]H such
that Γ, ⃗x :⃗τ; pc ⊢ e[⃗•]H : τ ′, then e[⃗•]H enforces general NMIF.
Proof. We prove this by reducing Definition C.1 to Defini-
tion 6.9 in two steps. We assume that no two variables in the original
expression e[⃗•]H have the same name as this can be enforced by
α-renaming.
The first step handles expressions that only substitute values (and
have no holes), but allow any number of both secret and untrusted
values. An expression of the form in this corollary is easily rewritten
as such a substitution as follows. For each hole [•]H , we note that
Γ′; pc′ ⊢ [•]H : τ ′′ where Γ, ⃗x : ⃗τ ⊆ Γ′ and pc′ ∈ H . We replace
the hole with a function application inside a bind. Specifically, the
hole becomes
(cid:1)
′
z1 · · · zk
′ = y in(cid:0)y
(cid:32)
′′(cid:33)
(cid:17)
in for y the value
w = ηpc′
(cid:16)
where y and y′ are fresh variables and the zis are every variable in
Γ′ \ Γ (including every element of ⃗x). Let
τy = pc′ says
pc′−−→ · · · pc′−−→ τzk
pc′−−→ τ
τz1
and include y :τy as the type of an untrusted value to substitute in.
Instead of inserting the expression a into that hole, we substitute
λ(z1 :τz1 )[pc′]. · · · λ(zk :τzk )[pc′]. a
.
By Hole we know that pc′ ∈ H and ⊢ τ ′′ prot H , so the type
has the proper protection, and by construction Γ; pc ⊢ w : τy.
Moreover, while it has an extra value at the beginning of the trace
(the function), the rest of the traces are necessarily the same.
As a second step, we reduce the rest of the way to the expressions
used in Definition 6.9. To get from our intermediate step to these
single-value expressions, if we wish to substitute ks secret values
and ku untrusted values, we instead substitute a single list of ks
secret values and a single list of ku untrusted values. These lists are
constructed in the usual way out of pairs, meaning the protection
relations continue to hold as required. Finally, whenever a variable
is referenced in the unsubstituted expression, we instead select
the appropriate element out of the substituted list using nested
projections.
□
We also note that the same result holds if we allow for insertion
of secret code and untrusted values, as the argument is exactly dual.
Such a situation, however, makes less sense, so we do not present
it explicitly.