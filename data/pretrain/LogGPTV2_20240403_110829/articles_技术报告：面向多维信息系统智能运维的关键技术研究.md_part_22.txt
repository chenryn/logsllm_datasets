-   数据特征要求
接入方需要提供指标周期特征（四选一）供训练参考：
1、指标按天进行周期波动；
2、指标按周进行周期波动；
3、指标按月进行周期波动；
4、指标无规律波动。
##### **算法**
-   算法描述
1.  KDE
> Kernel density
> estimation(KDE)：适用于业务具有不同阶段的周期指标，但是不同阶段内特征无规律或具有突变（比如固定时间的活动办理，固定时间的业务办理情况）
![](media/image69.png){width="4.949305555555555in"
height="1.6229166666666666in"}
2.  MA
> Moving
> Average：擅长处理与时间不相关的异常，正常数据在一定范围内波动，异常数据有较大波动的数据：（如进程健康度场景的错误数，内存使用率，线程占用率，集群负载场景的负载占比等指标）
![](media/image71.png){width="4.231944444444444in"
height="1.7534722222222223in"}
-   算法优势
目前大部分算法对于本项目不同场景下的不同数据特征数据都有比较强的拟合度，如MA算法，在对于内存使用率，错误数，负载占比等抖动小，且长期稳定在某个值的数据，训练的模型能够有较好的检测效果，KDE算法，能够适应如单进程业务量数据，具有周期性，但是在月初月尾特征变化不明显，算法会充分考虑历史数据，训练出比较切合该数据规律的模型。Data
cluster算法，也是针对业务特征，对KDE算法的升级版本，能够对业务场景下，月初月尾的变化特征，对月初月尾进行聚类处理，从而在检测中考虑月初月尾的数据波动，减少误报。
-   模型训练
1)  迭代周期
模型可周期性自动进行迭代训练。在迭代训练时，上一次训练所用到的数据也会参与当次训练，但由于它们离当前时刻较远，会在训练中被赋予较低的权重。同时，由于模型的训练模式和测试灵敏度等配置会影响迭代训练的模型之间性能的比较，迭代训练时会使用前一模型同样的配置进行训练，并计算几个模型评价指标进行比较。由于异常点的识别受到灵敏度的影响，故前一模型识别出的异常点仍会参与下一轮迭代训练。训练方式如下：
1、指标尚无模型且满足最低要求10080点，会自动进行训练，训练的算法以及参数会识别训练数据进行选择。
2、指标周期性自动训练，会根据设置时间，把上一周期数据以及新周期的数据进行训练，算法以及参数会继承。
2)  遇到的问题
```{=html}
```
1.  需要提供标准数据或通过平台格式化
2.  不同特征的数据与算法的拟合需要一定周期的迭代甚至敏感度调整
```{=html}
```
3.  实现功能
```{=html}
```
1.  通过清洗模型，把采集的log4x
    trace以及metric原始数据清洗成基础数据，其中基础数据涵盖众多特征，例如所属业务、中心、集群、进程、ip等等，实现数据采集功能。
2.  利用SPL语法将基础数据进行二次加工，逻辑是以中心、集群、进程为维度进行业务的统计，时间粒度为1分钟，形成原始内存使用率指标数据，实现数据处理功能。
3.  基础指标数据通过数据工厂，进行格式化处理，形成基础内存使用率指标数据，实现数据格式化功能。
4.  基础指标累计数量达10080个会进行自动训练，当然训练的周期可根据累计实际数量重新训练，10080个指标是最低标准，实现指标手动&自动训练功能。
5.  训练生成的模型会自动应用，针对后续形成的内存使用率指标进行实时检测，实现指标检测功能。
6.  关于内存使用率指标，通过历史数据特征构建的模型，且适配指标特征，针对内存使用率指标上升的阶段状态进行检测，忽略下滑状态带来的影响，实现针对指标特性检测功能。
内存使用率指标同时具有周期性以及无规律性质，使用固定阈值无法适合进程所有时间段的监控，通过KDE算法适配部分有周期性的内存使用率指标，学习历史规律，针对无规律性质的内存使用率指标，则使用MA算法，适配内存使用率突增情况，两者都是实现动态预警功能。
![C:\\Users\\Administrator\\Pictures\\能力清单\\内存.png](media/image90.png){width="5.763888888888889in"
height="1.3916666666666666in"}
图 54 内存使用率指标
###  场景落地效果
####  指标训练检测展示
指标异常检测可无人工干预进行全流程全过程无人工干预的机器学习算法对进程指标进行训练，使用训练生成的模型对进程指标进行故障异常检测。将数据采集后自动清洗、自动训练、智能算法选择，并周期性自动训练算法以及自动评估算法准确性，实现全自动化机器学习算法故障检测，并周期性自动迭代，不断提升算法检测能力。
指标异常检测算法效果演示：
![](media/image91.png){width="5.768055555555556in"
height="1.3020833333333333in"}
图 55 业务量指标异常检测结果图
![](media/image92.png){width="5.768055555555556in" height="1.0in"}
图 56 错误数指标异常检测结果图
![](media/image93.png){width="5.768055555555556in"
height="1.0166666666666666in"}
图 57 平均耗时指标异常检测结果图
采集调用链进程的关键指标，利用机器学习算法故障检测下沉到进程级别，可以提升运维的精细化程度，针对每个进程的故障进行快速定位和分析，进行业务趋势分析，缩短运维排障时间。
####  **仪表盘AI检测结果展示**
![](media/image94.png){width="5.768055555555556in"
height="1.9222222222222223in"}
图 58 AI检测异常全剧概览图
![](media/image95.png){width="5.768055555555556in"
height="2.2618055555555556in"}
图 59 AI异常点趋势图
![](media/image48.png){width="5.768055555555556in"
height="2.3513888888888888in"}
图 60 AI告警结合箱线图模型告警列表
仪表盘具备钻取功能，可对每条告警进行细化分析：
![](media/image96.png){width="5.763888888888889in"
height="1.1734580052493437in"}
图 61 调用服务耗时趋势分析
![](media/image97.png){width="5.763888888888889in"
height="1.2441732283464566in"}
图 62 调用服务失败量分析
![](media/image98.png){width="5.763888888888889in"
height="1.0140179352580927in"}
图 63 新增调用服务失败分析
![](media/image99.png){width="5.763888888888889in"
height="1.5603860454943133in"}
图 64 调用服务失败报错详细列表
通过进程下服务报错，耗时，是否新增以及报错的详情，在故障发生前后，对问题分析起到辅助作用。
##  负载均衡异常检测
1.  **应用背景**
负载均衡服务覆盖应用每个层级，覆盖面广、复杂度高，通过人工难快速发现异常，作为全局性的类业务黄金指标能够自上而下提供服务非常重要，在没有实现负载均衡的异常检测的时候，往往到了业务报错的那一刻才会发现某个应用或者某个实例的错误，不能很好的实现提前发现异常。通过建立负载均衡的智能检测，能够从全局角度提前发现系统故障，为故障处理留足时间，保障业务稳定性。
2.  **实现方案**
基于清洗模型以及数据工厂，对大量历史负载均衡数据进行数据处理，形成网络设备核心指标。根据指标数据特征自动选择合适的异常检测算法和参数，从历史性能数据中学习数据特征训练生成指标模型。应用训练成功的指标检测模型，对时序指标数据进行实时检测，检测结果经过二次算法分析及时发现指标异常情况并产生告警。
![](media/image100.png){width="5.216666666666667in"
height="1.5180555555555555in"}
图 65 实现流程图
3.  **落地效果**