edu. 172800 IN NS H3.NSTLD.COM. 
edu. 172800 IN NS L3.NSTLD.COM. 
edu. 172800 IN NS M3.NSTLD.COM. 
edu. 172800 IN NS C.GTLD-SERVERS.NET. 
Among all returned edu DNS servers, we send a query to the first one. 
dig +norecurse @E.GTLD-SERVERS.NET any gaia.cs.umass.edu 
umass.edu. 172800 IN NS ns1.umass.edu.
umass.edu. 172800 IN NS ns2.umass.edu. 
umass.edu. 172800 IN NS ns3.umass.edu. 
Among all three returned authoritative DNS servers, we send a query to the first one.
dig +norecurse @ns1.umass.edu any gaia.cs.umass.edu 
gaia.cs.umass.edu. 21600 IN A 128.119.245.12 
b) The answer for google.com could be: 
a.root-servers.net 
E.GTLD-SERVERS.NET 
ns1.google.com(authoritative) 
P20、我们可以定期拍摄本地DNS服务器中DNS缓存的快照。该组织在DNS缓存中出现最频繁的Web服务器是最流行的服务器。这是因为如果更多的用户对Web服务器感兴趣，那么DNS请求就会对此感兴趣服务器更频繁地由用户发送。因此，该Web服务器将出现在DNS中缓存更频繁。
关于完整的测量研究，见： Craig E.Wills，Mikhail Mikhailov，郝尚 “通过主动查询DNS传递互联网应用的相对普及性” “缓存”，2003年10月27日至29日，IMC03，美国佛罗里达州迈阿密海滩。
P21、是的，我们可以在本地DNS服务器中使用DIG查询该网站。例如，“digCNN.com”将返回查找CNN.com的查询时间。如果CNN.com几秒钟前刚刚被访问，那么CNN.com的条目将缓存在本地DNS缓存中，因此查询时间为0毫秒。否则，查询时间很长。
P22、在计算客户端-服务器分发的最小分发时间时，我们使用以下公式：
$d_{cs}=max\{NF/u_s，F/d_{min}\}$。
同样地，在计算P2P分发的最小分发时间时，我们使用以下公式：
$D_{p2p}=max\{F/u_s，F/d_{min}，NF/(u_s+\sum_{i=1}^{N}u_i)\}$
其中F=15Gbit=15*1024Mbit 
u_s=30 Mbps 
$d_{min}=d_i$=2 Mbps，
其中300 Kbps=300/1024 Mbps。
Client Server 
N 
10 100 1000 
u 
300 Kbps 7680 51200 512000 
700 Kbps 7680 51200 512000 
2 Mbps 7680 51200 512000 
Peer to Peer 
N 
10 100 1000 
u 
300 Kbps 7680 25904 47559 
700 Kbps 7680 15616 21525 
2 Mbps 7680 7680 7680 
P23、
a)考虑一种分发方案，其中服务器以$u_s/N$的速率并行地向每个客户端发送文件，注意此速率低于客户端的每个下载速率，因为假设我们$u_s/N≤d_{min}$。因此，每个客户端也可以以$u_s/N$的速率接收，因为每个客户端以$u_s/N$的速率接收，每个客户端接收整个文件的时间是$F/(u_s/N)=NF/u_s$。由于所有客户端都在$NF/u_s$中接收文件，所以总的分发时间也是$NF/u_s$。
b)考虑一种分发方案，其中服务器并行地向每个客户端发送文件，速率为$d_{min}$。注意，聚合速率N $d_{min}$小于服务器的链接速率我们，因为假设我们$u_s/N≥d_{min}$。由于每个客户端以$d_{min}$的速率接收，每个客户端接收整个文件的时间是$F/d_{min}$。因为所有客户端都在这段时间内接收文件，所以整个分发时间也是$F/d_{min}$。
c)从2.6条我们知道
$D_{CS}>=max\{NF/u_s,F/d_{min}\}$
假设$u_s/N=NF/u_s$
但是我们从（a）可以得到$D_{CS}=d_{min}$
P24、
a)定义u=u1+u2+....+uN。假设$u_si}{r_j}=u_s$
因此，每个对等点接收$F/u_s$中的文件。
b)定义u=u1+u2+....+uN。假设$u_s>=(u_s+u)/N$
定义$r_i=u_i/(N-1)$
$r_{N+1}=(u_s-u/(N-1))/N$
在此分发方案中，文件被分成N+1个部分。服务器发送位从第i部分到第i个对等点(i＝1，....N)在速率$r_i$。每个对等i转发该比特以速率$r_i$到达其它N-1对等体中的每一个。此外，服务器发送位来自$(N+1)^{st}$部分以速率$r_{N+1}$到达N个对等端中的每一个。对等端不转发来自$(n+1)^{st}$部分。
服务器的聚合发送速率
$r_1+…+r_N+Nr_{N+1}=u/(N-1)+u_s–u/(N-1)=u_s$
因此，服务器的发送速率不超过其链路速率。第一对等点的总发送速率为$N-1)r_i=u_i$
因此，每个对等点的发送速率不超过其链路速率。在此分配方案中，对等点i以合计速率接收比特。
$r_i+r_{N+1}+\sum_{j<>i}{rj}=u/(N-1)+(u_s-u/(N-1))/N=(u_s+u)/N$
因此，每个对等端接收$NF/(u_s+u)$中的文件。
(为了简单起见，我们忽略了为i=1，...，n1。我们现在在这里提供了。假设$\delta=(u_s+u)/N$为分配时间。对于i=1，...,n,第i个文件部分是$F_i＝r_i \delta$比特。$(N+1)^{st}$文件部分是$F_{N+1}＝r_{N+1} \delta$(比特)。它是直接显示$F_1+...F_{N+1}=F.）
c)本部的解决办法与第17(C)条的解决办法相似。我们从2.6节中得知
$D_{p2p}>=max\{F/u_s，NF/(u_s+u)\}$
结合了a)和b)给出了预期的结果。
P25、在覆盖网络中存在N个节点。n(n-1)/2边。
P26、是的。只要有足够的对等人留在蜂群中，他的第一个索赔就可能是可能的。足够长的时间。Bob可以总是通过乐观的非阻塞来接收数据对等端。
他的第二次索赔也是真实的。他可以在每个主机上运行客户端，让每个客户端“免费乘坐，”并将收集的chunks从不同的主机合并为单个文件。他甚至可以编写一个小的调度程序，使不同的主机请求不同的chunks文件。这实际上是P2P网络中的一种Sybil攻击。
P27、
a)n文件，假设我们通过将视频版本与音频版本按质量和速率的顺序配对来进行一对一的匹配。
b)2N个文件。
P28、
a)如果首先运行TCPClient，则客户端将尝试与TCP连接不存在的服务器进程。将不进行TCP连接。
b)UDPClient不与服务器建立TCP连接。因此，一切如果第一次运行udpClient，则应正常工作，然后运行udpServer，然后键入一些输入键盘。
c)如果使用不同的端口号，则客户端将尝试建立TCP连接错误的进程或不存在的进程。会出现错误。
P29、在原始程序中，UDPClient在创建端口时未指定端口号插座。在这种情况下，代码允许底层操作系统选择端口号。使用附加行，在执行UDPClient时，使用端口创建UDP套接字5432号。
UDPServer需要知道客户端端口号，以便它可以将数据包发回给正确的客户端套接字。查看UDPServer，我们看到客户端端口号不“硬连线”进入服务器代码；相反，UDPServer确定客户端端口号通过解开从客户端接收的数据报。因此，UDP服务器将与任何客户端端口号，包括5432。因此,UDPServer不需要已修改。
前：
客户端套接字=X（由OS选择）
服务器套接字=9876
在以下情况下：
客户端套接字=5432
P30、是的，您可以配置许多浏览器来打开到网站的多个同时连接。优点是您可以更快地下载该文件。缺点是您可能占用了带宽，从而大大减缓了共享相同物理链接的其他用户的下载速度。
P31、对于远程登录(telnet和ssh)之类的应用程序，面向字节流的协议是非常自然的，因为应用程序中没有消息边界的概念。当用户键入一个字符时，我们只需将该字符放到TCP连接中即可。在其他应用程序中，我们可能会发送一系列在它们之间具有固有边界的消息。例如，当一个SMTP邮件服务器向另一个SMTP邮件服务器连续发送多个电子邮件时。由于TCP没有指示边界的机制，所以应用程序必须自己添加指示，以便应用程序的接收方能够区分一条消息和另一条消息。如果将每条消息放入一个不同的udp段中，则接收端将能够在没有任何指示的情况下，区分各种讯息、申请。
P32、要创建Web服务器，我们需要在主机上运行Web服务器软件。许多供应商出售Web服务器软件。然而，当今最流行的Web服务器软件是Apache，它是开放的源并且是自由的。多年来，它一直受到开源社区的高度优化。
[Back to Index](#目录)
# 第三章
## 复习题3
R1、
a)将此协议称为简单传输协议(STP)。在发送方，STP从发送进程接受不超过1196字节的数据块、目标主机地址和目标端口号。STP在每个块中添加一个4字节的头，并将目标进程的端口号放在这个标头中。然后，STP将目标主机地址和结果段提供给网络层。网络层将段传送到目标主机上的STP。STP然后检查段中的端口号，从段中提取数据，并将数据传递给由端口号标识的进程。
b)段现在有两个头字段：源端口字段和目标端口字段。在发送方，STP接受不超过1192字节的数据块、目标主机地址、源端口号和目标端口号。STP创建一个段，其中包含应用程序数据、源端口号和目标端口号。然后，它将段和目标主机地址提供给网络层。在接收到段后，接收主机上的STP给出应用程序的应用程序数据和源端口号。
c)不，传输层不需要在核心中做任何事情；传输层“生命”在最终系统中。
R2、
a)在寄信时，家庭成员必须将信件本身、目的地住所的地址和收件人的姓名交给代表。委托将收件人的姓名清楚地写在信函的顶部。然后，委托将信放入信封中，并在信封上写入目标住宅的地址。然后，代表将这封信交给地球的邮件服务部门。在接收方，委托收到来自邮件服务的信函，从信封中取出信件，并记下在信件顶部写的收件人姓名。然后，代表将这封信交给具有此名称的家庭成员。
b).不，邮件服务部门不必打开信封；它只检查信封上的地址。
R3、源端口号y和目标端口号x。
R4、应用程序开发人员可能不希望其应用程序使用TCP的拥塞控制，这会在拥塞时限制应用程序的发送速率。通常，IP电话和IP视频会议应用程序的设计者选择在UDP上运行他们的应用程序，因为他们希望避免TCP的拥塞控制。另外，有些应用程序不需要TCP提供的可靠数据传输。
R5、由于大多数防火墙都被配置为阻止UDP通信，因此使用TCP进行视频和语音通信可以让通信通过防火墙。
R6、是的。应用程序开发人员可以将可靠的数据传输放到应用层中协议。然而，这需要大量的工作和调试。
R7、是的，两个段将指向同一个套接字。对于每个接收到的段，在套接字接口上，操作系统将为进程提供IP地址，以确定各个段的来源。
R8、对于每个持久连接，Web服务器创建一个单独的“”连接插座“”。每个连接套接字被标识为具有四个元组:(源IP地址,源端口号、目标IP地址、目标端口号）。当主机C接收和IP数据报，它检查数据报/段中的这四个字段确定哪个套接字应该通过TCP段的有效负载。因此,来自A和B的请求通过不同的套接字。这两个参数的标识符用于目标端口的套接字具有80；但是，这些套接字的标识符源IP地址的不同值。与UDP不同，传输层通过时TCP段对应用程序进程的有效负载，它不指定源IP地址，因为这是由套接字标识符隐式指定的。