title:A Simple Generic Attack on Text Captchas
author:Haichang Gao and
Jeff Yan and
Fang Cao and
Zhengya Zhang and
Lei Lei and
Mengyun Tang and
Ping Zhang and
Xin Zhou and
Xuqin Wang and
Jiawei Li
A Simple Generic Attack on Text Captchas
Haichang Gao1*, Jeff Yan2*, Fang Cao1, Zhengya Zhang1, Lei Lei1, Mengyun Tang1,
Ping Zhang1, Xin Zhou1, Xuqin Wang1 and Jiawei Li1
1. Institute of Software Engineering, Xidian University, Xi’an, Shaanxi, 710071, P.R. China
2. Security Lancaster & School of Computing and Communications, Lancaster University, UK
∗Corresponding authors: PI:EMAIL, PI:EMAIL
Abstract—Text-based Captchas have been widely deployed
across the Internet to defend against undesirable or malicious
bot programs. Many attacks have been proposed; these ﬁne prior
art advanced the scientiﬁc understanding of Captcha robustness,
but most of them have a limited applicability. In this paper,
we report a simple, low-cost but powerful attack that effectively
breaks a wide range of text Captchas with distinct design features,
including those deployed by Google, Microsoft, Yahoo!, Amazon
and other Internet giants. For all the schemes, our attack achieved
a success rate ranging from 5% to 77%, and achieved an
average speed of solving a puzzle in less than 15 seconds on
a standard desktop computer (with a 3.3GHz Intel Core i3 CPU
and 2 GB RAM). This is to date the simplest generic attack
on text Captchas. Our attack is based on Log-Gabor ﬁlters; a
famed application of Gabor ﬁlters in computer security is John
Daugman’s iris recognition algorithm. Our work is the ﬁrst to
apply Gabor ﬁlters for breaking Captchas.
I.
INTRODUCTION
Captcha allows websites to automatically distinguish com-
puters from humans. This technology, in particular text-based
Captchas, has been widely deployed on the Internet to curb
abuses introduced by automated computer programs mas-
querading as human beings. Although many text Captchas
have been broken, the most recent studies, such as one by
a UC Berkeley team [21] and one by Stanford and Google
[6], suggest that Captchas are still an effective security tool.
Captcha has had many failure modes. Designers typically
learn from previous failures to design better schemes. Current
Captchas are much more sophisticated than the earliest gener-
ation designed at Carnegie Mellon. As predicated in [25], this
technology has been going through a process of evolutionary
development, like cryptography, digital watermarking and the
like, with an iterative process in which successful attacks lead
to the development of more robust systems.
The robustness of text Captchas has been an active ﬁeld in
the research communities. Many attacks have been proposed.
For examples, in 2003, Mori and Malik used sophisticated
object recognition algorithms to break two early designs: EZ-
Gimpy and GIMPY [18]. In 2005, Chellapilla and Simard
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23154
attacked many early Captchas deployed on the Internet [19].
Yan and El Ahmad broke most visual schemes provided at
Captchaservice.org in 2006 [24], published a segmentation
attack on Captchas deployed by Microsoft and Yahoo! [25]
in 2008, and broke the Megaupload scheme with a method
of identifying and merging character components in 2010 [1].
In 2011, Bursztein et al. showed that 13 Captchas on pop-
ular websites were vulnerable to automated attacks, but they
achieved zero success on harder schemes such as reCAPTCHA
and Google’s own scheme [5]. In the same year, Yan’s team
published an effective attack on both of these schemes [2]. At
CCS’13, Gao’s team and Yan jointly published a successful
attack on a family of hollow schemes [13]. The latest attack
on Captchas [4] was published in August 2014.
As a side note, other notable attacks include [14, 17, 20,
23, 27]. But they studied alternative Captcha designs such as
animation, image and audio schemes, rather than text ones.
Therefore, we will not look into the details.
These ﬁne prior art advanced the scientiﬁc understanding
of Captcha robustness, but most of them have a limited
applicability. Many of them broke speciﬁc schemes, and only
a few broke a security mechanism as a whole. We quote the
following from a well-cited paper [25].
The relatively wide applicability of our attack
on the MSN scheme is encouraging. However, we
doubt that there is a universal segmentation attack
that is applicable to all text Captchas, given that
hundreds of design variations exist. Instead, a more
realistically expectation is to create a toolbox (i.e. a
collection of algorithms and attacks, ideally organ-
ised in a composable way) for evaluating the strength
of Captchas.
This toolbox approach has been a common practice (with
a few exceptions) in the Captcha research community, as
evidenced by papers published afterwards. Decaptcha [5], was
a well conceived tool for analysing Captcha robustness and
was considered to be a generic attack, but it followed such a
toolbox approach, as we will explain in details later.
In this paper, we propose a simple but effective attack that
breaks a wide range of text Captchas. Our attack is based on
Log-Gabor ﬁlters, a versatile signal processing technique. A
key innovation of John Daugman’s iris recognition algorithm
was to encode iris patterns into binary bits using 2D Gabor
ﬁlters [10]. Our attack uses 2D Log-Gabor, a variant of Gabor
ﬁlters. By convolving a Captcha image with Log-Gabor ﬁlters
of four different orientations (i.e. directions) respectively, we
extract character components along each orientation. Then, we
use a recognition engine to combine adjacent components in
different ways to form individual characters. The most likely
combination is output as our recognition result.
We have tested our attack on Captchas deployed by top 20
most popular websites according to Alexa ranking [3]. These
real-world Captchas include Google’s new reCAPTCHA, hol-
low schemes, and conventional designs; they represent a wide
range of design features. We have also tested our attack on
much harder Captchas such as an old version of reCAPTCHA
and two other designs. Our attack is designed to aim for sim-
plicity and general applicability, rather than high success rates
for breaking individual schemes. However, it has successfully
broken all the schemes we tested, judged by both criteria
commonly used in the Captcha community [5, 7]. For most
of the schemes, it has achieved a good success rate.
Novelty and signiﬁcance. Our attack uses a single segmen-
tation and recognition strategy, and it is to date the best in
terms of simplicity, power and general applicability. Breaking
some Captchas is rarely news, but breaking all the Captchas
with a single method that is so simple is surprising (even to
ourselves). Although we have had much experience in breaking
various Captchas, we did not expect at the beginning that our
method would work so well.
Our attack might suggest that the current common practice
of text Captcha designs is doomed, but it does not pronounce
a death sentence to the idea of text Captcha altogether. It’s
highly likely that new text Captchas will be invented. We are
experimenting some new ideas, for example.
On the other hand, another important value of our attack
is that it can be used as a standard test: any new design that
cannot pass this test should not be deployed. Moreover, for
people working in security economics, this work also suggests
the possibility that adversaries can launch concerted automated
attacks on Captchas to reduce their cost.
We organise this paper as follows. Section II brieﬂy intro-
duces the essence of Log-Gabor ﬁlters. Section III describes
popular real-world Captchas we collected from top 20 web
sites. Section IV presents technical details of our attack. Sec-
tion V evaluates our attack empirically and compares it with
prior art. Section VI examines various design alternatives and
shows that our attack is optimal among these design choices.
In Section VII, we argue that common countermeasures only
provide a partial defence against our attack. Section VIII
discusses our attack’s implications and concludes the paper.
II. GABOR FILTERS
Gabor ﬁlters are powerful signal processing algorithms, and
they offer the best localization of spatial and frequency in-
formation simultaneously. Nobel Physics Prize winner Dennis
Gabor laid their theoretical foundations in 1946. A complex
Gabor ﬁlter is deﬁned as the product of a Gaussian kernel and
a complex sinusoid. The temporal (1-D) Gabor ﬁlter can serve
as excellent band-pass ﬁlters for unidimensional signals (e.g.,
speech). John Daugman extended Gabor’s work to invented
the Spatial (2-D) Gabor Filter [9].
octave. If the bandwidth is larger, a non-zero DC component
will exist. If a wide spectrum is needed, Gabor ﬁlters are not
optimal.
Proposed by David Field in 1987, Log-Gabor ﬁlters [11]
improve normal Gabor ﬁlters in the following sense. Log-
Gabor’s transfer function is a Gaussian on a logarithmic
frequency axis. Normal Gabor ﬁlters often over-represent the
low frequencies, but it is not the case for the Log-Gabor. Log-
Gabor ﬁlters allow arbitrary bandwidth and the bandwidth can
be optimised to produce a ﬁlter with minimal spatial extent.
Field suggested that Log-Gabor ﬁlters encode natural images
more efﬁciently than ordinary Gabor functions, and that the
former are consistent with measurements of mammalian visual
systems which indicate we human beings have cell responses
that are symmetric on the log frequency scale.
Mathematically, 2D Log-Gabor ﬁlters are constructed in
the polar coordinate system of frequency domain as follows.
G(f, θ) = G(f ) · G(θ)
G(f ) = exp {−[log (f /f0)]2/[log (σ/f0)]2}
G(θ) = exp [−(θ − θ0)2/2σ2
θ ]
(1)
(2)
(3)
f and θ represent the radial and angle coordinate, respec-
tively. f0 and θ0 represent center frequency and direction of
the ﬁlter, respectively. σ and σθ represent radial bandwidth and
directional bandwidth of the ﬁlter.
G(f ) is the radial component that controls the bandwidth
of the ﬁlter, and G(θ) is the angle component that controls the
choice of ﬁlter orientations. G(f, θ) deﬁnes a complete 2D
Log-Gabor function. By deﬁnition, Log-Gabor ﬁlters always
have no DC component.
Gabor ﬁlters were used before in the context of computer
security, but mainly in the ﬁeld of biometrics. The most famous
application of Gabor ﬁlters in computer security is Daugman’s
iris recognition [10]. Our work is the ﬁrst application of Gabor
ﬁlters to analyse Captcha robustness. A study [8] proposed to
construct Captchas using Gabor sub-space, but its contribution
is entirely orthogonal to ours.
III. REAL WORLD POPULAR CAPTCHAS
We aim to use a wide range of real-world Captchas,
each with distinct design features,
to evaluate the effec-
tiveness of our attack. We choose those used by the top
20 most popular web sites (including Google, Facebook,
Youtube, Linkedin, Twitter, Blogspot, Wordpress, Yahoo!,
Baidu, Hao123, Wikipedia, QQ, Microsoft, Amazon, Taobao,
Sina and Ebay), since they all use popular text-based Captchas.
Some of the websites use the same Captcha scheme. For
example, Google, Youtube, Facebook, Linkedin, Blogspot,
Wordpress and Twitter all use reCAPTCHA. We have collected
in total 10 Captcha schemes, as summarized in Table I. With
regard to the reCAPTCHA scheme, we are interested only in
control words, i.e. the right part of each challenge. The left
part is not a text scheme, but involves with a different image
recognition task.
Gabor ﬁlters have two main limitations. The maximum
bandwidth of a Gabor ﬁlter is limited, approximately about one
According to font styles and positional relationships be-
tween adjacent characters, current text-based Captchas can
2
Scheme
Website
Sample Captcha
TABLE I.
TARGET CAPTCHA SCHEMES.
reCAPTCHA
Yahoo!
Baidu
google, facebook, youtube,
linkedin, twitter, blogspot,
wordpress, google.co.in
yahoo.com,
yahoo.co.jp
baidu.com
hao123.com
Wikipedia
wikipedia.org
QQ
Microsoft
qq.com
live.com
bing.com
Amazon
amazon.com
Taobao
taobao.com
Sina
Ebay
sina.com.cn
ebay.com
Characteristics
CCT scheme,
only digits used, rotation used,
varied font sizes, varied Captcha lengths.
hollow scheme, varied fonts,
rotation and distortion used,
varied Captcha lengths
CCT scheme, rotation used
Character isolated scheme,
varied Captcha lengths,
no digits used
Hollow scheme, rotation used,
overlap used, varied font sizes
Character isolated scheme,
varied Captcha lengths,
varied font sizes, rotation used
CCT scheme, constant font,
rotation used
CCT scheme, rotation used,
large alphabet set
CCT scheme, background clutter,
noise arcs used
CCT scheme, varied font sizes,
rotation used
be classiﬁed into three categories: character isolated schemes,
hollow character schemes and ‘crowding characters together’
(CCT) schemes. Clearly, our target schemes cover all these
categories. For example, there are character isolated schemes
(e.g. Microsoft and Wikipedia), hollow schemes (e.g. Yahoo!
and QQ) and CCT schemes (e.g. reCAPTCHA and Baidu).
Moreover, some schemes are with noise arcs (e.g. Sina),
but some without (e.g. Taobao and Ebay). Some schemes use
a ﬁxed string length (e.g. Amazon and Taobao), but some with
a varied string length (e.g. reCAPTCHA and Yahoo!). Some
schemes use rotation, and some do not. Fonts used vary across
different schemes, too.
Overall, these schemes represent a wide spectrum of de-
signs, each with distinctive features.
representatives of the three design categories, namely character
isolated schemes, hollow character schemes and CCT schemes.
filter
(0)
binarize
((cid:652)/4)
((cid:652)/2)
(3(cid:652)/4)
Gabor 
filters
Fig. 1. Extracting character components.
A. Extracting Components
IV. OUR ATTACK
Our attack includes two main steps:
1) Extracting components. Log-Gabor ﬁlters are used to
extract character components from Captcha images along four
directions, respectively. In contrast to previous attacks such
as [4, 13], preprocessing is unnecessary for our attack, and
Log-Gabor ﬁlters are applied directly to the images.
2) Partition and recognition. A recognition engine is used
to try different combinations of adjacent components, and then
the most likely combination (or partition) is chosen as the
correct recognition result. We choose k-Nearest Neighbours
(KNN) as our recognition engine, because KNN is a top
performer in text recognition [16].
In the following, we explain the detail of our attack, using
Microsoft, QQ and Baidu Captchas as examples. They are
This step uses Log-Gabor ﬁlters to extract character infor-
mation, as shown in Figure 1. We set θ to four different angles,
0, π/4, π/2, and 3π/4. That is, we extract character information
along the four directions by convolving a Captcha image with
each of the ﬁlters respectively. We set f0 to 1.414, an empirical
setting that makes extracted components clearly visible. We set
σθ to π/8, σ/f0 to 0.55, resulting in a bandwidth of roughly
2 octaves, which achieve a good balance between retaining
texture structure and removing noise. These conﬁgurations
remain the same for all our target Captchas.
This ﬁltering operation is directly applied to gray-scale
images, and then the resulting images are binarised to get
character components in black and white.
Table II shows for each of the schemes our extraction result
along each of the four directions. Each character component
is extracted out along the direction that is closest to it. Among
3
the four directions, it is possible that no component is extracted
at all at some directions, but this is not an issue of concern. In
fact, we discard small components extracted, with little impact
on our follow-up recognition. For the purpose of illustration,
Table II also shows a superposition of character components
extracted from all four orientations.
TABLE II.
EXTRACTION RESULTS.
Microsoft
QQ
Baidu
Angle
0
π/4
π/2
3π/4
+
Note: in this paper, extracted character components are
shown in different colors so that readers can easily distinguish
them from each other.
B. Partition and Recognition
After extracting components, we try to ﬁnd the most likely
correct combination of adjacent components to form individual
characters. Typically,
the number of components is larger
than the number of characters to be formed. Therefore, there
will be many possible combinations (or partitions). We use
a systematic and efﬁcient algorithm to achieve partition and
recognition simultaneously as follows. (Due to page limit, the
Baidu scheme is used to explain key techniques in this step,
but key details of attacking Microsoft and QQ schemes are
shown in Appendix.)
Step 1. Component sorting. Extracted components are
stored in no more than four separate images of the same
dimension. We apply Color Filling Segmentation (CFS) [25]
to pick up all the components from each image, and we record
the coordinates (x, y) of each component’s top-left pixel. All
the components are then sorted by these coordinates, and the
rules for ranking order are the following: x-coordinate has
a higher priority than y-coordinate; the smaller x-coordinate
(i.e. more left), the higher rank; the smaller y-coordinate (i.e.
more upper), the higher rank. The sorted components are then
numerically ordered, starting with 1 meaning the highest rank.
Figure 2 shows an example, where component 1 has the
leftmost pixel among all components and thus is rank-ordered