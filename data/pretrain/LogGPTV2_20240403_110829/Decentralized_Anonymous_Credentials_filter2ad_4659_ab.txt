pool their credentials), the establishment of pseudonyms, and a
long set of extensions built upon anonymous credentials. Last
but not least, we need to formally deﬁne and prove the security
of a distributed anonymous credential scheme and provide some
model for the distributed ledger. Our instantiation requires a
single trusted setup phase, after which the trusted party is no
longer required.4
B. Outline of This Work
The remainder of this work is organized as follows. In
the next section we discuss how to get a distributed bulletin
board. In §III we discuss speciﬁc applications for decentralized
anonymous credentials and argue that these systems can be
used to solve a variety of problems in peer-to-peer networks.
In §IV we deﬁne the notion of a decentralized anonymous
credential scheme and provide an ideal-world security deﬁnition.
In §V we describe the cryptographic building blocks of our
construction, and in §VI we provide an overview of our basic
construction as well as a speciﬁc instantiation based on the
Discrete Logarithm and Strong RSA assumptions. In §VII
we extend our basic construction to add a variety of useful
features, including k-show credentials, stateful credentials, and
credentials with hidden attributes. In §VIII we describe the
implementation and performance of a prototype library realizing
our credential system. Finally, in §IX, we show how to use our
library to build a distributed version of anonymous attestation.
II. REAL-WORLD BULLETIN BOARDS AND
DECENTRALIZED BULLETIN BOARDS
A core component of our system is an append-only bulletin
board we can use to post issued credentials. The board must
provide two strong security guarantees: (1) that credentials
must not be tampered with once added to the board and (2)
all parties will share a consistent view of the board. For the
distributed instantiation we additionally require (3) no party
can control the addition of credentials to the board. We detail
ways to achieve both distributed and centralized versions of
such a bulletin board here.
A. Bitcoin
Bitcoin is a distributed currency system [39], which has
grown since 2009 to handle between $2–$5 million USD/day
in transaction volume in a highly adversarial environment. The
heart of Bitcoin is the block chain, which serves as an append-
only bulletin board maintained in a distributed fashion by the
Bitcoin peers. The block chain consists of a series of blocks
connected in a hash chain.5 Every Bitcoin block memorializes
a set of transactions (containing an amount of bitcoin, a sender,
and a recipient) that are collected from the Bitcoin broadcast
network. Thus the network maintains a consensus about what
transactions have occurred and how much money each user
has.
Bitcoin peers, who are free to enter and leave the network,
compete to generate the next block by trying to calculate
4In §VII we discuss techniques for removing this trusted setup requirement.
5For efﬁciency reasons, the hash chain is actually a Merkle Tree.
H(block || nonce) < t where H is a secure hash function and
t is an adjustable parameter. This process is known as mining,
and the difﬁculty level t is adjusted so that a block is created
on average every 10 minutes. When a block is generated, it
is broadcast to the network and, if valid, accepted as the next
entry in the block chain. Bitcoin and related systems provide
two incentives to miners: (1) mining a block (i.e., completing
the proof of work) entitles them to a reward6 and (2) nodes
can collect fees from every transaction in a block they mine.
While Bitcoin uses the hash chain for the speciﬁc purpose
of implementing an electronic currency, the usefulness of the
Bitcoin bulletin board has already been recognized by several
related applications. One spinoff of the Bitcoin concept is
Namecoin [40], a fork of Bitcoin that uses the block chain to
maintain key–value mappings. Namecoin is currently being used
to implement an experimental DNS replacement, dotBIT [29].
Users pay a small fee to register a key–value pair along with
a controlling public key. They can then make updates to the
pair provided (1) the updates are signed by that key and (2) if
necessary, they pay a transaction fee.7 Due to this ﬂexibility
we use the Namecoin software in our implementations, but we
stress that the same techniques can be used with nearly any
hash chain based network, including mature deployments such
as Bitcoin.
Because of the way Bitcoin’s block chain is constructed, re-
cently added blocks maybe be removed, and, more importantly,
it is possible to introduce short-term forks in the block chain
that could be used to convince a single party that a poisoned-
pill credential was issued and hence identify them (see §IV-C
for more details). One solution, which is commonly used in
Bitcoin, is to wait until a block has several blocks on top of it
(known as conﬁrmations) before using it. Typically, waiting six
blocks, or roughly 60 minutes, is sufﬁcient. Of course, peers
are free to show credentials based off blocks sooner than that
as doing so does not make the show less secure. However it
comes at an increased privacy risk.
B. A Central Ledger
An alternative to using Bitcoin’s block chain technology
is to simply use a central service to maintain an append-only
ledger. This service must be trusted to give a consistent view
of the credential ledger to all parties. The most effective way
to do this is with trusted hardware (e.g., TPM attestations)
that ensures that (1) the list is append only and (2) the same
version of the list is shown to everyone for a given time period.
For lower security systems, it may be possible to simply
run a service that signs the list and have users audit the
system by periodically comparing the list they received. Similar
mechanisms exist for auditing SSL authorities (e.g., Google’s
Certiﬁcate Transparency project). Tampering would not only be
readily apparent but, due to the signature on the list, provable.
This, however, only acts as a deterrent to tampering as it
would not be detected until the next such comparison. As such
tampering can identify users when they authenticate, we only
6For Bitcoin this reward is set at 25 BTC but will eventually diminish and
be eliminated.
7Currently, neither Namecoin nor Bitcoin require signiﬁcant transaction fees.
recommend this approach when either the consequences of such
a privacy breach are low or loss of reputation to an authority
when its malfeasance is subsequently detected is prohibitively
high.
C. A Hybrid Approach
A third approach is to use some reliable storage mechanism
(e.g., a central server or a robust DHT) to store credential
requests and insert checkpoints into Bitcoin’s actual block
chain to ensure the ledger is append only. This can be done
without any modiﬁcation to Bitcoin. We can achieve this by
periodically (e.g., every 10 minutes) inserting the digest of the
ledger into the Bitcoin block chain. One way to accomplish
this is by using CommitCoin [23] which encodes information
into the keys used for transactions without destroying funds.8
Our one last technical challenge is to actually mark these
transactions as checkpoints for anyone to see. To accomplish
this we propose leveraging multi–sig transactions9 where one
key encodes the checkpoint with CommitCoin’s techniques
and another is a marker address that designates a checkpoint.
For a distributed storage service, this requires that the network
elect a node or set of nodes to hold the marker key and insert
checkpoints and elect a new set of nodes with a fresh marker
if the current set either fails to insert checkpoints or inserts
too many (either case is a denial of service attack and will not
compromise the integrity or anonymity of credentials).
III. APPLICATIONS
In this section we discuss several of the applications
facilitated by decentralized anonymous credentials. While we
believe that these credential systems may have applications in
a variety of environments, we focus speciﬁcally on settings
where trusting a central credential issuer is not an option or
where issued credentials must be publicly audited.
Mitigating Sybil attacks in ad hoc networks. Impersonation
attacks can have grave consequences for both the security and
resource allocation capabilities of ad hoc networks. A variety
of solutions have been proposed to address this problem. One
common approach is to require that clients solve computational
puzzles [7]. For example, for a challenge c and a difﬁculty
target t, ﬁnd a nonce n such that H(c||n) < t. Solving such a
puzzle takes a meaningful amount of effort — thus deterring
Sybil attacks — and, as anyone can hash n and c, is publicly
veriﬁable. For a centralized service, this proof can be done once
per client on registration. In a peer-to-peer system, however,
far more complex mechanisms are needed to avoid having to
provide a proof of work per each pair of interacting peers [7].
We stress that the issue with distributed approaches is not the
lack of publicly veriﬁable puzzles but the number of puzzles
and who they are sent to. This is even more difﬁcult if we
require the system to be anonymous.
8The naive approach replaces the public key specifying the recipient with
the hash of the data, making it impossible to retrieve the funds. CommitCoin
ﬁxes this.
9Transactions that require signatures from multiple parties to redeem.
4
Our solution to this problem is to use k-show anonymous
credentials. In this approach, peers establish a single credential
by solving a proof of work (similar to using a central service).
This allows the peer to obtain a credential that can be used a
limited number of times or a limited number of times within a
given time period. When a peer exceeds the k-use threshold
(e.g., by cloning the credential for a Sybil attack), the credential
can be identiﬁed and revoked. We note that this proposal is
a distributed variant of the anonymous subscription service
concept, which was ﬁrst explored by Damgård et al. [26] and
Camenisch et al. [13].
Managing resource usage. In networks where peers both con-
tribute and consume resources, ensuring fair resource utilization
can be challenging. For example, a storage network might wish
to ensure peers provide as much storage as they consume [42] or
ensure that peers fairly use network bandwith [43]. This can be
problematic in networks that provide anonymity services (e.g.,
Tor), where peers may be reluctant to identify which trafﬁc
they originated. An anonymous credential system allows peers
to identify their contributions to routing trafﬁc in exchange
for a credential which they can then use to originate trafﬁc.
Of course, we are restricted to issuing credentials on metrics
which peers can publicly establish. Thankfully this is a fairly
expressive set. Eigenspeed [50] allows peer-to-peer networks
to form accurate bandwidth estimates for all peers even in
the presence of active attackers. Similarly, there exist publicly
veriﬁable proofs of retrievability that can be used to verify
storage of a ﬁle [49]. Both of these are effective metrics for
resource management.
IV. DECENTRALIZED ANONYMOUS CREDENTIALS
A traditional anonymous credential system has two types
of participants: users and organizations. Users, who each have
a secret key sk U, are known by pseudonyms both to each other
and organizations. Nym O
A, for example, is the pseudonym of
user A to organization O. Decentralized anonymous credentials
have no single party representing the organization. Instead, this
party is replaced with a quorum of users who enforce a speciﬁc
credential issuing policy and collaboratively maintain a list of
credentials thus far issued. For consistency with prior work,
we retain the term “organization” for this group.
A distributed anonymous credential system consists of a global
transaction ledger, a set of transaction semantics, as well as
the following (possibly probabilistic) algorithms:
secret key.
• Setup(1 ) ! params. Generates the system parameters.
• KeyGen(params) ! sk U. Run by a user to generate her
• FormNym(params, U, E, sk U ) ! (Nym E
).
U , sk Nym E
U and an
between a user U and some
Run by a user to generate a pseudonym Nym E
authentication key sk Nym E
entity (either a user or an organization) E.
U , sk Nym O
, attrs, aux)
! (c, skc,⇡ M ). Run by a user to generate a request for
a credential from organization O. The request consists
of a candidate credential c containing public attributes
attrs; the user’s key sk U; auxiliary data aux justifying
• MintCred(params, sk U, Nym O
U
U
U
the granting of the credential; and a proof ⇡M that (1)
Nym O
U was issued to the same sk U and (2) the credential
embeds attrs.
U , aux,⇡ M ) !{ 0, 1}. Run
by nodes in the organization to validate a credential.
Returns 1 if ⇡M is valid, 0 otherwise.
• MintVerify(params, c, Nym O
U , sk Nym V
• Show(params, sk U , Nym V
, c, skc, CO) ! ⇡S.
Run by a user to non-interactively prove that a given
set of attributes are in a credential c in the set of issued
credentials CO and that c was issued to the same person
who owns Nym V
• ShowVerify(params, Nym V
U ,⇡ S, CO) !{ 0, 1}. Run by
a veriﬁer to validate a shown credential. Return 1 if ⇡S
is valid for Nym V
U . Generates and returns a proof ⇡S.
U , 0 otherwise.
U
We now describe how these algorithms are used in the
context of an anonymous credential system.
A. Overview of the Protocol Semantics
To realize the full anonymous credential system, we
integrate the above algorithms with a decentralized hash chain
based bulletin board as follows. We assume a bulletin board
such as Namecoin that provides a means for storing arbitrary
key–value pairs.10 We provide a concrete realization of our
protocols in §VI and §VIII.
Formulating a pseudonym. Prior to requesting a new credential,
the user executes the KeyGen algorithm to obtain sk U and then
runs the FormNym algorithm to obtain a pseudonym for use
with this organization. This requires no interaction with the
bulletin board, hence the user can perform these actions ofﬂine.
Obtaining a credential. To obtain a credential, the user places
the organization name and some public identity assertion — for
example, a TPM attestation and AIK certiﬁcate chain — into
the auxiliary data ﬁeld aux, then executes the MintCred routine
to obtain a credential and a signature of knowledge on that
information. She then formulates a transaction including both
the resulting credential and the auxiliary data and broadcasts it
into the hash chain network, along with (optionally) some sum
of digital currency to pay for the transaction fees. She retains
the secret portion of the credential.
Once received by the network, all parties can verify the
correctness of the credential and the identity assertion using the