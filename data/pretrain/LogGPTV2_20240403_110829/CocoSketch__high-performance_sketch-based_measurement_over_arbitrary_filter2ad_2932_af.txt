Libkin, editors, ICDT 2005, Lecture Notes in Computer Science. Springer, 2005.
[22] Anukool Lakhina, Mark Crovella, and Christiphe Diot. Characterization of
[24] Graham Cormode and S. Muthukrishnan. An improved data stream summary:
[25] Moses Charikar, Kevin C. Chen, and Martin Farach-Colton. Finding frequent
[29] Yuliang Li, Rui Miao, Changhoon Kim, and Minlan Yu. Flowradar: A better
the count-min sketch and its applications. J. Algorithms, 2005.
items in data streams. Theor. Comput. Sci., 2004.
[26] Rob Harrison, Qizhe Cai, Arpit Gupta, and Jennifer Rexford. Network-wide heavy
hitter detection with commodity switches. In Proceedings of the Symposium on
SDN Research, pages 1–7, 2018.
[27] Abhishek Kumar, Minho Sung, Jun (Jim) Xu, and Jia Wang. Data streaming
algorithms for efficient and accurate estimation of flow size distribution.
In
SIGMETRICS 2004. ACM, 2004.
[28] Robert T. Schweller, Ashish Gupta, Elliot Parsons, and Yan Chen. Reversible
sketches for efficient and accurate change detection over network data streams.
In Alfio Lombardo and James F. Kurose, editors, IMC 2004. ACM, 2004.
netflow for data centers. In NSDI 2016. USENIX Association, 2016.
[30] Tong Yang, Jie Jiang, Peng Liu, Qun Huang, Junzhi Gong, Yang Zhou, Rui Miao,
Xiaoming Li, and Steve Uhlig. Elastic sketch: adaptive and fast network-wide
measurements. In SIGCOMM 2018. ACM, 2018.
[31] Zaoxing Liu, Ran Ben-Basat, Gil Einziger, Yaron Kassner, Vladimir Braverman,
Roy Friedman, and Vyas Sekar. Nitrosketch: robust and general sketch-based
monitoring in software switches. In SIGCOMM 2019. ACM, 2019.
[32] Xiaoqi Chen, Shir Landau Feibish, Mark Braverman, and Jennifer Rexford. Beau-
coup: Answering many network traffic queries, one memory update at a time. In
SIGCOMM ’20. ACM, 2020.
[33] Zaoxing Liu, Antonis Manousis, Gregory Vorsanger, Vyas Sekar, and Vladimir
Braverman. One sketch to rule them all: Rethinking network flow monitoring
with univmon. In SIGCOMM 2016. ACM, 2016.
[34] Qun Huang, Patrick P. C. Lee, and Yungang Bao. Sketchlearn: relieving user
burdens in approximate measurement with automated statistical inference. In
SIGCOMM 2018. ACM, 2018.
[35] Qun Huang, Xin Jin, Patrick P. C. Lee, Runhui Li, Lu Tang, Yi-Chao Chen, and
Gong Zhang. Sketchvisor: Robust network measurement for software packet
processing. In SIGCOMM 2017. ACM, 2017.
[36] Yinda Zhang, Jinyang Li, Yutian Lei, Tong Yang, Zhetao Li, Gong Zhang, and
Bin Cui. On-off sketch: A fast and accurate sketch on persistence. Proc. VLDB
Endow., 2021.
[37] Xiangyang Gou, Long He, Yinda Zhang, Ke Wang, Xilai Liu, Tong Yang, Yi Wang,
and Bin Cui. Sliding sketches: A framework using time zones for data stream
processing in sliding windows. In KDD ’20. ACM, 2020.
[38] Jizhou Li, Zikun Li, Yifei Xu, Shiqi Jiang, Tong Yang, Bin Cui, Yafei Dai, and Gong
Zhang. Wavingsketch: An unbiased and generic sketch for finding top-k items
in data streams. In KDD ’20, pages 1574–1584. ACM, 2020.
[39] Ran Ben-Basat, Gil Einziger, Roy Friedman, Marcelo Caggiani Luizelli, and Erez
Waisbard. Constant time updates in hierarchical heavy hitters. In SIGCOMM
2017. ACM, 2017.
[40] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat. SCREAM:
sketch resource allocation for software-defined measurement. In CoNEXT 2015,
pages 14:1–14:13. ACM, 2015.
[41] Omid Alipourfard, Masoud Moshref, and Minlan Yu. Re-evaluating measurement
algorithms in software. In Proceedings of the 14th ACM Workshop on Hot Topics
in Networks, 2015.
[42] David Moore, Vern Paxson, Stefan Savage, Colleen Shannon, Stuart Staniford-
Chen, and Nicholas Weaver. Inside the slammer worm. IEEE Secur. Priv., 2003.
[43] Vyas Sekar, Nick G Duffield, Oliver Spatscheck, Jacobus E van der Merwe, and
Hui Zhang. Lads: Large-scale automated ddos detection system. In USENIX
Annual Technical Conference, General Track, 2006.
[44] Behnaz Arzani, Selim Ciraci, Luiz Chamon, Yibo Zhu, Hongqiang Harry Liu, Jitu
Padhye, Boon Thau Loo, and Geoff Outhred. 007: Democratically finding the
cause of packet drops. In NSDI 18, 2018.
[45] Phillipa Gill, Navendu Jain, and Nachiappan Nagappan. Understanding network
failures in data centers: measurement, analysis, and implications. In Proceedings
of the ACM SIGCOMM 2011 conference, pages 350–361, 2011.
[46] Nikhil Handigol, Brandon Heller, Vimalkumar Jeyakumar, David Mazières, and
Nick McKeown. I know what your packet did last hop: Using packet histories to
troubleshoot networks. In NSDI 14, 2014.
[47] Philipp Richter, Ramakrishna Padmanabhan, Neil Spring, Arthur Berger, and
David Clark. Advancing the art of internet edge outage detection. In Proceedings
of the Internet Measurement Conference 2018, pages 350–363, 2018.
[48] Thomas Holterbach, Emile Aben, Cristel Pelsser, Randy Bush, and Laurent Van-
bever. Measurement vantage point selection using a similarity metric. In Pro-
ceedings of the Applied Networking Research Workshop, pages 1–3, 2017.
[49] Barefoot tofino: World’s fastest p4-programmable ethernet switch asics. https:
//barefootnetworks.com/products/brief-tofino/.
[50] Ben Pfaff, Justin Pettit, Teemu Koponen, Ethan J. Jackson, Andy Zhou, Jarno
Rajahalme, Jesse Gross, Alex Wang, Joe Stringer, Pravin Shelar, Keith Amidon,
and Martín Casado. The design and implementation of open vswitch. In NSDI 15.
USENIX Association, 2015.
[51] Alveo u280 data center accelerator card. https://www.xilinx.com/products/
[78] Source code related to elastic sketch.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
boards-and-kits/alveo/u280.html.
[52] Minlan Yu, Lavanya Jose, and Rui Miao. Software defined traffic measurement
with opensketch. In Nick Feamster and Jeffrey C. Mogul, editors, NSDI 2013.
USENIX Association, 2013.
[53] Daniel Ting. Data sketches for disaggregated subset sum and frequent item
estimation. In Gautam Das, Christopher M. Jermaine, and Philip A. Bernstein,
editors, SIGMOD 2018. ACM, 2018.
estimation of arbitrary subset sums. J. ACM, 2007.
[55] Jianning Mai, Chen-Nee Chuah, Ashwin Sridharan, Tao Ye, and Hui Zang. Is
sampled data sufficient for anomaly detection? In Proceedings of the 6th ACM
SIGCOMM conference on Internet measurement, pages 165–176, 2006.
[56] Inmon corporation’s sflow: A method for monitoring traffic in switched and
routed networks. https://tools.ietf.org/html/rfc3176.
[54] Nick G. Duffield, Carsten Lund, and Mikkel Thorup. Priority sampling for
[57] Pavlos Nikolopoulos, Christos Pappas, Katerina Argyraki, and Adrian Perrig.
Retroactive packet sampling for traffic receipts. Proceedings of the ACM on
Measurement and Analysis of Computing Systems, 2019.
[58] Sajad Shirali-Shahreza and Yashar Ganjali. Flexam: flexible sampling extension
for monitoring and security applications in openflow. In Proceedings of the second
ACM SIGCOMM workshop on Hot topics in software defined networking, 2013.
[59] Vibhaalakshmi Sivaraman, Srinivas Narayana, Ori Rottenstreich, S. Muthukrish-
nan, and Jennifer Rexford. Heavy-hitter detection entirely in the data plane. In
SOSR 2017. ACM, 2017.
[60] Cristian Estan, George Varghese, and Mike Fisk. Bitmap algorithms for counting
In Proceedings of the 3rd ACM SIGCOMM
active flows on high speed links.
conference on Internet measurement, 2003.
[61] Balachander Krishnamurthy, Subhabrata Sen, Yin Zhang, and Yan Chen. Sketch-
based change detection: methods, evaluation, and applications. In Proceedings of
the 3rd ACM SIGCOMM conference on Internet measurement, 2003.
[62] Ashwin Lall, Vyas Sekar, Mitsunori Ogihara, Jun (Jim) Xu, and Hui Zhang. Data
streaming algorithms for estimating entropy of network traffic. In SIGMETRICS
2006, pages 145–156. ACM, 2006.
[63] Arno Wagner and Bernhard Plattner. Entropy based worm and anomaly detection
in fast ip networks. In 14th IEEE International Workshops on Enabling Technologies:
Infrastructure for Collaborative Enterprise, 2005.
[64] Anukool Lakhina, Mark Crovella, and Christophe Diot. Mining anomalies using
traffic feature distributions. In ACM SIGCOMM, 2005.
[65] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat. Trumpet:
Timely and precise triggers in data centers. In SIGCOMM 2016, pages 129–143.
ACM, 2016.
[66] Masoud Moshref, Minlan Yu, Abhishek B. Sharma, and Ramesh Govindan. Scal-
able rule management for data centers. In NSDI 2013, pages 157–170. USENIX
Association, 2013.
[67] Mosharaf Chowdhury and Ion Stoica. Efficient coflow scheduling without prior
knowledge. In SIGCOMM 2015, pages 393–406. ACM, 2015.
[68] Alok Kumar, Sushant Jain, Uday Naik, Anand Raghuraman, Nikhil Kasinad-
huni, Enrique Cauich Zermeno, C. Stephen Gunn, Jing Ai, Björn Carlin, Mihai
Amarandei-Stavila, Mathieu Robin, Aspi Siganporia, Stephen Stuart, and Amin
Vahdat. Bwe: Flexible, hierarchical bandwidth allocation for WAN distributed
computing. In SIGCOMM 2015, pages 1–14. ACM, 2015.
[69] Zhuolong Yu, Yiwen Zhang, Vladimir Braverman, Mosharaf Chowdhury, and Xin
Jin. Netlock: Fast, centralized lock management using programmable switches.
In Proceedings of the Annual conference of the ACM Special Interest Group on Data
Communication on the applications, technologies, architectures, and protocols for
computer communication, 2020.
[70] Hun Namkung, Zaoxing Liu, Daehyeok Kim, Vyas Sekar, and Peter Steenkiste.
Sketchlib: Enabling efficient sketch-based monitoring on programmable switches.
In NSDI, 2022.
[71] Zaoxing Liu, Hun Namkung, Georgios Nikolaidis, Jeongkeun Lee, Changhoon
Kim, Xin Jin, Vladimir Braverman, Minlan Yu, and Vyas Sekar. Jaqen: A high-
performance switch-native approach for detecting and mitigating volumetric
ddos attacks with programmable switches. In USENIX Security, 2021.
[72] Mu He, Andreas Blenk, Wolfgang Kellerer, and Stefan Schmid. Toward consis-
tent state management of adaptive programmable networks based on p4. In
Proceedings of the ACM SIGCOMM 2019 Workshop on Networking for Emerging
Applications and Technologies, pages 29–35, 2019.
[73] Vishal Shrivastav. Fast, scalable, and programmable packet scheduler in hardware.
In SIGCOMM 2019. ACM, 2019.
[74] Pat Bosshart, Glen Gibb, Hun-Seok Kim, George Varghese, Nick McKeown, Martin
Izzard, Fernando Mujica, and Mark Horowitz. Forwarding metamorphosis: Fast
programmable match-action processing in hardware for sdn. ACM SIGCOMM
Computer Communication Review, 43(4):99–110, 2013.
[75] Source code related to CocoSketch. https://github.com/yindazhang/CocoSketch.
[76] The caida anonymized 2016 internet traces.
http://www.caida.org/data/
overview/.
[77] MAWI Working Group Traffic Archive. http://mawi.wide.ad.jp/mawi/.
Y. Zhang et al.
https://github.com/BlockLiu/
ElasticSketchCode.
[79] Vivado design suite. https://www.xilinx.com/products/design-tools/vivado.html.
[80] Zaoxing Liu, Samson Zhou, Ori Rottenstreich, Vladimir Braverman, and Jennifer
Rexford. Memory-efficient performance monitoring on programmable switches
with lean algorithms. SIAM APOCS, 2020.
[81] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat. DREAM: dy-
namic resource allocation for software-defined measurement. In ACM SIGCOMM
2014, pages 419–430. ACM, 2014.
[82] Anup Agarwal, Zaoxing Liu, and Srinivasan Seshan. Heterosketch: Coordinating
network-wide monitoring in heterogeneous and dynamic networks. In NSDI,
2022.
[83] Hash website. http://burtleburtle.net/bob/hash/evahash.html.
A PROOFS
A.1 Stochastic Variance Minimization
In this section, we prove Theorem 1 and 2 shown in §5.1.
Theorem 1. The solution to optimize Eq. (2) is
𝑤
𝑓𝑗 + 𝑤
𝑓𝑗
𝑓𝑗 + 𝑤
(𝑒𝑖, 𝑓𝑗 + 𝑤), w.p.
(𝑒 𝑗 , 𝑓𝑗 + 𝑤), w.p.
(𝑒′, 𝑓 ′) =
Proof. Remind that the incoming packet is (𝑒𝑖, 𝑤), and it is
mapped to the bucket recording key value pair (𝑒 𝑗 , 𝑓𝑗). Then we
should update the mapped bucket to (𝑒′, 𝑓 ′) to optimize Eq. (2).
Note that we only change the estimated size of full key 𝑒𝑖 and 𝑒 𝑗,
so the variance increments of all other full keys are 0. If a full key
is not recorded, its estimated size is 0. Otherwise, its estimated size
is the corresponding value in the bucket. Obviously, if 𝑒𝑖 = 𝑒 𝑗, we
can directly update the mapped bucket to (𝑒 𝑗 , 𝑓𝑗 + 𝑤), and there is
no increment of variance. If 𝑒𝑖 ≠ 𝑒 𝑗, to keep unbiasedness, suppose
that we will set (𝑒′, 𝑓 ′) = (𝑒𝑖, 𝑤/𝑝) with probability 𝑝, and set
(𝑒′, 𝑓 ′) = (𝑒 𝑗 , 𝑓𝑗/(1 − 𝑝)) with probability 1 − 𝑝. The increment of
variance is that
Δ(cid:16)𝑓 (𝑒) −(cid:98)𝑓 (𝑒)(cid:17)2
𝑒
= 𝑝 ·
(cid:32)(cid:18) 𝑤
(cid:19)2
(cid:33)
+ 𝑓 2
𝑗
𝑝
− 𝑤
(cid:32)
(cid:18)
𝑤2 +
− 𝑤2 + 𝑓 2
1 − 𝑝
𝑗
𝑓𝑗
1 − 𝑝
− 𝑓 2
𝑗
+ (1 − 𝑝) ·
𝑤2
𝑝
=
(cid:19)2(cid:33)
− 𝑓𝑗
Then, we can get that we achieve the minimum when 𝑝 = 𝑤/(𝑓𝑗+𝑤).
Based on the formula of 𝑝, we can get the result Eq. (3).
□
Theorem 2. The minimum increment of variance sum to update
(cid:26) 2𝑤 𝑓𝑗 ,
0,
=
𝑒𝑖 ≠ 𝑒 𝑗
𝑒𝑖 = 𝑒 𝑗
the bucket (𝑒 𝑗 , 𝑓𝑗) is
Δ(cid:16)𝑓 (𝑒) −(cid:98)𝑓 (𝑒)(cid:17)2
Δ(cid:16)𝑓 (𝑒) −(cid:98)𝑓 (𝑒)(cid:17)2
𝑒

𝑒
Proof. Based on the proof of Theorem 1, we can get that if
𝑒𝑖 = 𝑒 𝑗, the variance increment is 0. If 𝑒𝑖 ≠ 𝑒 𝑗,
− 𝑤2 + 𝑓 2