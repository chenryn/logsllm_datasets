other platforms such as mobile and HTML5 plat-
forms.
7 Related Work
Researchers proposed to force branch outcomes for
patching software failures in [51]. Hardware support was
proposed to facilitate path forcing in [31]. Both require
source code and concrete program inputs. Branch out-
comes are forced to explore paths of binary programs
in [48] to construct control ﬂow graphs. The technique
does not model any heap behavior. Moreover, it skips all
library calls. Similar techniques are proposed to expose
hidden behavior in Android apps [22, 45]. These tech-
niques randomly determine each branch’s outcome, pos-
ing the challenge of excessive infeasible paths. Forced
execution was also proposed to identify kernel-level
rootkits [46]. It completely disregards branch outcomes
during execution and performs simple depth-ﬁrst search.
None of these techniques performs exception recovery
and instead simply terminates executions when excep-
tions arise. Constraint solving was used in exploring
execution paths to expose malware behavior in [33, 6].
They require concrete inputs to begin with and then mu-
tate such inputs to explore different paths.
X-Force is related to static binary analysis [21, 3, 25,
42, 41], dynamic binary analysis [30, 39, 24] and sym-
bolic binary analysis [10, 40]. We have discussed their
differences from X-Force in Section 6, which are also
supported by our empirical results in Section 5. X-Force
is also related to failure oblivious computing [36] and
on-the-ﬂy exception recovery [34], which are used for
failure tolerance and debugging and require source code.
8 Conclusion
We develop a novel binary analysis engine X-Force,
which forces a binary to execute without any inputs or the
needed environment. It systematically forces the branch
outcomes at a small number of predicates to explore dif-
ferent paths. It can recover from exceptions by allocat-
ing memory on-demand and ﬁxing correlated pointers
accordingly. Our experiments on three security applica-
tions show that X-Force has similar precision as dynamic
analysis but much better coverage due to the capability of
exploring many paths with any inputs.
Acknowledgements
part by the earlier research of Dr. Vinod Yegneswaran
on brute-force malware execution and analysis. His in-
ﬂuence and support is gratefully acknowledged. This
research has been supported, in part, by DARPA under
Contract 12011593 and by a gift from Cisco Systems.
Any opinions, ﬁndings, and conclusions in this paper are
those of the authors only and do not necessarily reﬂect
the views of the sponsors.
References
[1] Exposing the password secrets of internet ex-
http://securityxploded.com/
plorer.
iepasswordsecrets.php.
[2] G. Balakrishnan, R. Gruian, T. Reps, and T. Teit-
elbaum. Codesurfer/x86–a platform for analyzing
x86 executables.
In Proceedings of International
Conference on Compiler Construction (CC), 2005.
[3] G. Balakrishnan and T. Reps. Analyzing mem-
ory accesses in x86 executables. In Proceedings of
Intenational Conference on Compiler Construction
(CC), 2004.
[4] D. Balzarotti, M. Cova, C. Karlberger, E. Kirda,
C. Kruegel, and G. Vigna. Efﬁcient detection of
split personalities in malware.
In Proceedings of
Network and Distributed System Security Sympo-
sium (NDSS), 2010.
[5] R. R. Branco, G. N. Barbosa, and P. D. Neto. Scien-
tiﬁc but not academical overview of malware anti-
debugging, anti-disassembly and anti-vm technolo-
gies. Blackhat USA’12.
[6] D. Brumley, C. Hartwig, Z. Liang, J. Newsome,
D. Song, and H. Yin. Automatically identifying
trigger-based behavior in malware. In Botnet De-
tection. 2008.
[7] J. Caballero and D. Song. Polyglot: Automatic ex-
traction of protocol format using dynamic binary
analysis. In Proceedings of the 14th ACM Confer-
ence on Computer and and Communications Secu-
rity (CCS), 2007.
[8] C. Cadar, D. Dunbar, and D. Engler. Klee: unas-
sisted and automatic generation of high-coverage
tests for complex systems programs.
In Proceed-
ings of the 8th USENIX conference on Operating
systems design and implementation (OSDI), 2008.
We would like to thank the anonymous reviewers for
their insightful comments. This work was motivated in
[9] M. I. Center. Apt1: Exposing one of chinas cyber
espionage units. Technical report, 2013.
842  23rd USENIX Security Symposium 
USENIX Association
[10] V. Chipounov, V. Kuznetsov, and G. Candea. S2e: a
platform for in-vivo multi-path analysis of software
systems. In Proceedings of the 16th international
conference on Architectural support for program-
ming languages and operating systems (ASPLOS),
2011.
[11] C. Csallner and Y. Smaragdakis. DSD-Crasher: A
hybrid analysis tool for bug ﬁnding.
In Proceed-
ings of International Symposium on Software Test-
ing and Analysis (ISSTA), pages 245–254, 2006.
[12] W. Cui, J. Kannan, and H. J. Wang. Discoverer:
Automatic protocol reverse engineering from net-
work traces.
In Proceedings of the 16th USENIX
Security Symposium (Security), 2007.
[13] W. Cui, M. Peinado, K. Chen, H. J. Wang, and
L. Irun-Briz. Tupni: Automatic reverse engineering
of input formats. In Proceedings of the 15th ACM
Conference on Computer and Communications Se-
curity (CCS), 2008.
[14] Z. Deng, X. Zhang, and D. Xu. Bistro: Bi-
nary component extraction and embedding for soft-
ware security applications. In 18th European Sym-
posium on Research in Computer Security (ES-
ORICS), 2013.
[15] A. Dinaburg, P. Royal, M. Sharif, and W. Lee.
Ether: malware analysis via hardware virtualiza-
tion extensions.
In Proceedings of the 15th ACM
conference on Computer and Communications Se-
curity (CCS), 2008.
[16] N. Falliere, L. Murchu, and E. Chien. W32. stuxnet
dossier. White paper, Symantec Corp., Security Re-
sponse, 2011.
[17] P. Ferrie. Attacks on virtual machine emulators.
Symantec Advanced Threat Research, 2006.
[18] P. Ferrie. Attacks on more virtual machine emula-
tors. Symantec Technology Exchange, 2007.
[19] FireEye. Advanced targeted attacks: How to pro-
tect against the new generation of cyber attacks. In
White Paper, 2013.
[20] P. Godefroid, N. Klarlund, and K. Sen. Dart: Di-
rected automated random testing.
In Proceedings
of the ACM SIGPLAN 1991 Conference on Pro-
gramming Language Design and Implementation
(PLDI), 2005.
[21] Hex-Rays.
Ida pro disassembler. http://www.
hex-rays.com/products/ida/index.shtml.
[22] R. Johnson and A. Stavrou. Forced-path execution
for android applications on x86 platforms. Tech-
nical report, Technical Report, Computer Science
Department, George Mason University, 2013.
[23] C. Kolbitsch, P. M. Comparetti, C. Kruegel,
E. Kirda, X. Zhou, and X. Wang. Effective and
efﬁcient malware detection at the end host. In Pro-
ceedings of the 18th USENIX Security Symposium
(Security), 2009.
[24] C. Kolbitsch, T. Holz, C. Kruegel, and E. Kirda.
Inspector gadget: Automated extraction of propri-
etary gadgets from malware binaries. In 2010 IEEE
Symposium on Security and Privacy (SP), pages
29–44, 2010.
[25] J. Lee, T. Avgerinos, and D. Brumley. Tie: Prin-
cipled reverse engineering of types in binary pro-
grams. In Proceedings of the Annual Network and
Distributed System Security Symposium (NDSS),
2011.
[26] F. Li. A detailed analysis of an advanced persistent
threat malware. SANS Institute, 2011.
[27] J. Lim, T. Reps, and B. Liblit. Extracting ﬁle
formats from executables.
In Proceedings of the
13th Working Conference on Reverse Engineering
(WCRE), 2006.
[28] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Auto-
matic protocol format reverse engineering through
context-aware monitored execution.
In Proceed-
ings of the 15th Annual Network and Distributed
System Security Symposium (NDSS), 2008.
[29] Z. Lin and X. Zhang. Deriving input syntactic
structure from execution.
In Proceedings of the
16th ACM SIGSOFT International Symposium on
Foundations of Software Engineering (FSE), 2008.
[30] Z. Lin, X. Zhang, and D. Xu. Automatic reverse en-
gineering of data structures from binary execution.
In Proceedings of the 17th Annual Network and
Distributed System Security Symposium (NDSS),
2010.
[31] S. Lu, P. Zhou, W. Liu, Y. Zhou, and J. Torrellas.
Pathexpander: Architectural support for increasing
the path coverage of dynamic bug detection. In Pro-
ceedings of the 39th Annual IEEE/ACM Interna-
tional Symposium on Micro-architecture (MICRO),
2006.
[32] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and
G. M. Voelker. Unexpected means of protocol in-
ference. In Proceedings of the 6th ACM SIGCOMM
USENIX Association  
23rd USENIX Security Symposium  843
on Internet measurement (IMC), pages 313–326,
2006.
[33] A. Moser, C. Kruegel, and E. Kirda. Exploring mul-
tiple execution paths for malware analysis. In Pro-
ceedings of the 2007 IEEE Symposium on Security
and Privacy (SP), pages 231–245, 2007.
[34] F. Qin, J. Tucek, Y. Zhou, and J. Sundaresan. Rx:
Treating bugs as allergies a safe method to survive
software failures. ACM Transactions on Computer
Systems, 25(3), 2007.
[35] T. Raffetseder, C. Kr¨ugel, and E. Kirda. Detecting
system emulators. In Proceedings of the 10th inter-
national conference on Information Security (ISC).
2007.
[36] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy,
T. Leu, and W. S. Beebee, Jr. Enhancing server
availability and security through failure-oblivious
computing.
In Proceedings of the 6th conference
on Symposium on Opearting Systems Design & Im-
plementation (OSDI), 2004.
[37] N. Riva and F. Falc´on. Dynamic binary instrumen-
tation frameworks: I know you’re there spying on
me. In RECON Conference, 2012.
[38] K. Sen, D. Marinov, and G. Agha. Cute: A con-
colic unit testing engine for c.
In Proceedings of
the 10th European Software Engineering Confer-
ence held jointly with 13th ACM SIGSOFT Interna-
tional Symposium on Foundations of Software En-
gineering (ESEC/FSE-13), 2005.
[39] A. Slowinska, T. Stancescu, and H. Bos. Howard:
A dynamic excavator for reverse engineering data
structures. In Proceedings of the 17th Annual Net-
work and Distributed System Security Symposium
(NDSS), 2011.
[40] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager,
M. G. Kang, Z. Liang, J. Newsome, P. Poosankam,
and P. Saxena. Bitblaze: A new approach to com-
puter security via binary analysis. In Proceedings
of the 4th International Conference on Information
Systems Security (ICISS), 2008.
[41] B. D. Sutter, B. D. Bus, K. D. Bosschere, P. Keyng-
naert, and B. Demoen. On the static analysis of in-
direct control transfers in binaries. In Proceedings
of Parallel and Distributed Processing Techniques
and Applications (PDPTA), 2000.
[42] H. Theiling. Extracting safe and precise control
ﬂow from binaries.
In Proceedings of the Sev-
enth International Conference on Real-Time Sys-
tems and Applications (RTCSA), 2000.
[43] A. Vasudevan and R. Yerraballi. Cobra: Fine-
grained malware analysis using stealth localized-
executions. In 2006 IEEE Symposium on Security
and Privacy (SP), 2006.
[44] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace.
Reformat: Automatic reverse engineering of en-
crypted messages.
In Proceedings of 14th Euro-
pean Symposium on Research in Computer Security
(ESORICS), 2009.
[45] Z. Wang, R. Johnson, R. Murmuria, and A. Stavrou.
Exposing security risks for commercial mobile de-
vices. In Proceedings of the 6th international con-
ference on Mathematical Methods, Models and Ar-
chitectures for Computer Network Security: com-
puter network security (MMM-ACNS), pages 3–21,
2012.
[46] J. Wilhelm and T.-c. Chiueh. A forced sampled
execution approach to kernel rootkit identiﬁcation.
In Proceedings of the 10th international conference
on Recent advances in intrusion detection (RAID),
pages 219–235, 2007.
[47] G. Wondracek, P. Milani, C. Kruegel, and E. Kirda.
Automatic network protocol analysis. In Proceed-
ings of the 15th Annual Network and Distributed
System Security Symposium (NDSS), 2008.
[48] L. Xu, F. Sun, and Z. Su. Constructing precise
control ﬂow graphs from binaries. Technical re-
port, Technical Report CSE-2009-27, Department
of Computer Science, UC Davis, 2009.
[49] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin.
V2e: Combing hardware virtualization and soft-
ware emulation for transparent and extensible mal-
ware analysis.
In 8th Annual International Con-
ference on Virtual Execution Environments (VEE),
2012.
[50] H. Yin, D. Song, M. Egele, C. Kruegel, and
E. Kirda. Panorama: capturing system-wide infor-
mation ﬂow for malware detection and analysis. In
Proceedings of the 14th ACM conference on Com-
puter and communications security (CCS), 2007.
[51] X. Zhang, N. Gupta, and R. Gupta. Locating faults
through automated predicate switching.
In Pro-
ceedings of ACM/IEEE International Conference
on Software Engineering (ICSE), 2006.
844  23rd USENIX Security Symposium 
USENIX Association