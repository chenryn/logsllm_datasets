[18] Simon Greiner and Daniel Grahl. 2016.
Declassification in Component-Based Systems. In CSF.
Non-interference with What-
[19] Weijia He, Maximilian Golla, Roshni Padhi, Jordan Ofek, Markus Dürmuth, Ear-
lence Fernandes, and Blase Ur. 2018. Rethinking Access Control and Authentica-
tion for the Home Internet of Things (IoT). In 27th USENIX Security Symposium
(USENIX Security 18). USENIX Association, Baltimore, MD.
[20] Daniel Hedin, Luciano Bello, and Andrei Sabelfeld. 2016.
Information-flow
security for JavaScript and its APIs. J. Comp. Sec. (2016).
[21] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. 2014. JSFlow: Tracking Infor-
mation Flow in JavaScript and its APIs. In SAC.
[22] Justin Huang and Maya Cakmak. 2015. Supporting Mental Model Accuracy in
Trigger-action Programming. In Proceedings of the 2015 ACM International Joint
Conference on Pervasive and Ubiquitous Computing (UbiComp ’15). 215–225.
In IEEE S&P.
(2018).
[23] iBaby via IFTTT. 2018. Email me when temperature drops below threshold in the
baby’s room. https://ifttt.com/applets/UFcy5hZP-email-me-when-temperature-
drops-below-threshold-in-the-baby-s-room. (2018).
[24] IFTTT. 2016. How people use IFTTT today. https://ifttt.com/blog/2016/11/
connected-life-of-an-ifttt-user. (2016).
[25] IFTTT. 2017. 550 apps and devices now work with IFTTT. https://ifttt.com/blog/
2017/09/550-apps-and-devices-now-on-ifttt-infographic. (2017).
[26] IFTTT 2017. IFTTT: IF This Then That. https://ifttt.com. (2017).
[27] IFTTT 2018. IFTTT service categories. https://ifttt.com/search. (2018).
[28] IFTTT. 2018. Share your Applet ideas with us! https://www.surveymonkey.com/
r/2XZ7D27. (2018).
[29] IFTTT. 2018. URL Shortening in IFTTT. https://help.ifttt.com/hc/en-us/articles/
115010361648-Do-all-Applets-run-through-the-ift-tt-url-shortener-. (2018).
[30] Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis Mavrommatis, Niels
Provos, Moheeb Abu Rajab, and Kurt Thomas. 2015. Trends and Lessons from
Three Years Fighting Malicious Extensions. In USENIX Security Symposium.
USENIX Association, 579–593.
[31] jayreddin via IFTTT. 2018. Google Contacts saved to Google Drive Spread-
sheet. https://ifttt.com/applets/nyRJVwYa-google-contacts-saved-to-google-
drive-spreadsheet. (2018).
[32] jsonl 2018. The JSON Query Language. http://www.jsoniq.org/. (2018).
[33] jsonsimple 2018. json-simple. https://code.google.com/archive/p/json-simple/.
[34] Eunsuk Kang, Aleksandar Milicevic, and Daniel Jackson. 2016. Multi-
representational Security Analysis. In Proceedings of the 2016 24th ACM SIG-
SOFT International Symposium on Foundations of Software Engineering (FSE 2016).
181–192.
[35] Manything via IFTTT. 2018. When you leave home, start recording on your
Manything security camera. https://ifttt.com/applets/187215p-when-you-leave-
home-start-recording-on-your-manything-security-camera. (2018).
[36] Xianghang Mi, Feng Qian, Ying Zhang, and XiaoFeng Wang. 2017. An empirical
characterization of IFTTT: ecosystem, usage, and performance. In Proceedings
of the 2017 Internet Measurement Conference, IMC 2017, London, United Kingdom,
November 1-3, 2017. 398–404.
[37] Toby C. Murray, Robert Sison, Edward Pierzchalski, and Christine Rizkallah. 2016.
Compositional Verification and Refinement of Concurrent Value-Dependent
Noninterference. In CSF.
[38] Chandrakana Nandi and Michael D. Ernst. 2016. Automatic Trigger Genera-
tion for Rule-based Smart Homes. In Proceedings of the 2016 ACM Workshop on
Programming Languages and Analysis for Security (PLAS ’16). 97–102.
[39] Mark W. Newman, Ame Elliott, and Trevor F. Smith. 2008. Providing an Integrated
User Experience of Networked Media, Devices, and Services through End-User
Composition. In Pervasive Computing, 6th International Conference, Pervasive
2008, Sydney, Australia, May 19-22, 2008, Proceedings. 213–227.
[40] oauth 2018. OAuth 2.0. https://oauth.net/2/. (2018).
[41] Damian Poddebniak, Jens Müller, Christian Dresen, Fabian Ising, Sebastian
Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk. 2018. Efail:
Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels.
In USENIX Security.
[42] Andrei Sabelfeld and David Sands. 2001. A Per Model of Secure Information
Flow in Sequential Programs. Higher-Order and Symbolic Computation (2001).
[43] Shayak Sen, Saikat Guha, Anupam Datta, Sriram K. Rajamani, Janice Y. Tsai,
and Jeannette M. Wing. 2014. Bootstrapping Privacy Compliance in Big Data
Systems. In IEEE S&P.
[44] sparksoniq 2018. Sparksoniq. http://sparksoniq.org/. (2018).
[45] Milijana Surbatovich, Jassim Aljuraidan, Lujo Bauer, Anupam Das, and Limin
Jia. 2017. Some Recipes Can Do More Than Spoil Your Appetite: Analyzing the
Security and Privacy Risks of IFTTT Recipes. In WWW.
[46] thegrowthguy via IFTTT. 2017. Automatically log new Stripe payments to a
Google Spreadsheet. https://ifttt.com/applets/264933p-automatically-log-new-
stripe-payments-to-a-google-spreadsheet. (2017).
[47] Blase Ur, Melwyn Pak Yong Ho, Stephen Brawner, Jiyun Lee, Sarah Mennicken,
Noah Picard, Diane Schulze, and Michael L. Littman. 2016. Trigger-Action Pro-
gramming in the Wild: An Analysis of 200, 000 IFTTT Recipes. In Proceedings of
the 2016 CHI Conference on Human Factors in Computing Systems, San Jose, CA,
USA, May 7-12, 2016. 3227–3231.
[48] Blase Ur, Elyse McManus, Melwyn Pak Yong Ho, and Michael L. Littman. 2014.
Practical trigger-action programming in the smart home. In CHI Conference on
Human Factors in Computing Systems, CHI’14, Toronto, ON, Canada - April 26 -
May 01, 2014. 803–812.
[49] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher
Krügel, and Giovanni Vigna. 2007. Cross Site Scripting Prevention with Dynamic
Data Tainting and Static Analysis. In NDSS.
[50] Rui Wang, Luyi Xing, XiaoFeng Wang, and Shuo Chen. 2013. Unauthorized
origin crossing on mobile platforms: threats and mitigation. In ACM Conference
on Computer and Communications Security. ACM, 635–646.
[51] Xiao-yong Zhou, Soteris Demetriou, Dongjing He, Muhammad Naveed, Xiaorui
Pan, XiaoFeng Wang, Carl A. Gunter, and Klara Nahrstedt. 2013. Identity, location,
disease and more: inferring your secrets from android public resources. In ACM
Conference on Computer and Communications Security. ACM, 1017–1028.
A SEMANTIC RULES
Γ(s) = L
Γ(e1 + e2) = Γ(e1) ⊔ Γ(e2)
Γ(b) = L, b ∈ B
Γ(w ) = H, w (cid:60) B
Γ( f (e)) = Γ(e)
Γ(source) = H
Γ(link(e)) = Γ(e)
Figure 15: Expression typing
Expression evaluation:
⟨s, m, Γ⟩pc ⇓ s
⟨l, m, Γ⟩pc ⇓ m(l )
⟨ei , m, Γ⟩pc ⇓ si
i = 1, 2
⟨e1 + e2, m, Γ⟩pc ⇓ s1 + s2
⟨e, m, Γ⟩pc ⇓ s
⟨f (e), m, Γ⟩pc ⇓ ¯f (s)
Command evaluation:
assign
⟨l = e, m, S, Γ⟩pc →1 ⟨stop, m[l (cid:55)→ m(e)], S, Γ[l (cid:55)→ pc ⊔ Γ(e)]⟩
pc ⊑ Γ(l )
seq⟨c1, m, S, Γ⟩pc →n1 ⟨stop, m1, S1, Γ1⟩
⟨c2, m1, S1, Γ1⟩pc →n2 ⟨stop, m2, S2, Γ2⟩
⟨c1; c2, m, S, Γ⟩pc →n1+n2 ⟨c2, m2, S2, Γ2⟩
′⟩
, Γ
′
′
, S
′⟩
if
m(e) = '' ⇒ j = 2
m(e) (cid:44) '' ⇒ j = 1
⟨cj , m, S, Γ⟩pc⊔Γ(e ) →n ⟨stop, m
′
′
, S
, Γ
⟨if e then c1 else c2, m, S, Γ⟩pc →n ⟨stop, m
while-true
⟨c, m, S, Γ⟩pc⊔Γ(e ) →n1 ⟨stop, m1, S1, Γ⟩
m(e) (cid:44) ''
⟨while e do c, m1, S1, Γ⟩pc →n2 ⟨stop, m2, S2, Γ⟩
⟨while e do c, m, S, Γ⟩pc →n1+n2 ⟨stop, m2, S, Γ⟩
while-false
⟨while e do c, m, S, Γ⟩pc →1 ⟨stop, m, S, Γ⟩
m(e) = ''
Figure 16: Monitor semantics (Remaining rules)
B SOUNDNESS
then ∀l . Γ′(l ) = L ⇒ m(l ) = m′(l ).
Lemma B.1 (Confinement). If ⟨c, m, S, Γ⟩H →∗ ⟨stop, m′, S′, Γ′⟩
and ⟨c[i2/x], m2, S, Γ⟩pc →∗ ⟨stop, m′
Proof. Γ′(l ) = L means that c contains no assignments to l. If
c updated l, then the label of l in Γ′ would be H, according to rule
assign.
□
1, S1, Γ1⟩
2, S2, Γ2⟩ and m1 ∼Γ m2 then
Lemma B.2 (Helper). If⟨c[i1/x], m1, S, Γ⟩pc →∗ ⟨stop, m′
(i) S1 = S2
(ii) Γ1 = Γ2, and
(iii) m′
1 ∼Γ1 m′
2
Proof. By induction on the derivation ⟨c[i1/x], m1, S⟩pc →∗
1, S1⟩ and case analysis on the last rule used in that deriva-
⟨stop, m′
tion.
1 =
(cid:55)→ tt] = S2, and m′
1 ∼Γ1 m′
2.
Case skip. Then Γ1 = Γ = Γ2, S1 = S[oj
m1 ∼Γ m2 = m′
2.
Case assign. Then S1 = S2 = S. We distinguish two cases:
(1) Γ(e) = L
Then m1 (e) = m2 (e) and Γ1 (l ) = Γ2 (l ) = pc. Hence Γ1 = Γ2 and
m′
1 ∼Γ1 m′
2.
(2) Γ(e) = H
Then Γ1 (l ) = Γ2 (l ) = H and m1 (e) ∼H m2 (e). Hence Γ1 = Γ2 and
1 ∼Γ1 m′
m′
2.
Case seq. Follows trivially from IH.
Case if. We distinguish two cases:
(1) Γ(e) = L
Hence m1 (e) = m2 (e) and the same branch is taken in both execu-
tions. The result follows from IH.
(2) Γ(e) = H
Consider the more interesting case when the two executions follow
different branches of the conditional, e.g., c1 executes in m1 and c2
executes in m2.
From confinement lemma (Lemma B.1) it follows that no assign-
ments to low variables are performed in high contexts: ∀l . Γ1 (l ) =
L ⇒ mi (l ) = m′
i (l ) and Γ1 (l ) = Γ2 (l ) = Γ(l ). Also, no downgrades
take place in high contexts, thus Γ1 = Γ2 = Γ.
∀l . Γ(l ) = L ⇒ m′
2 (l ). Hence m′
1 (l ) ∼Γ1 (l ) m′
From rule skip it follows that no changes to the skip set are per-
formed in high contexts. Hence S1 = S2 = S.
Case while. We distinguish two cases:
(1) Γ(e) = L
Hence m1 (e) = m2 (e) and either rule while-true, or while-false
is taken in both executions. The result follows from i.h.
(2) Γ(e) = H
Consider the more interesting case when c executes in m1 according
to while-true, and c executes in m2 according to while-false.
From rule while-false it follows that m2 = m and Γ2 = Γ.
From confinement lemma (Lemma B.1) it follows that no assign-
ments of low variables are performed in high contexts and no down-
grades take place in high contexts. Hence Γ1 = Γ. Thus Γ1 = Γ2 and
m′
1 ∼Γ m′
2.
From rule skip it follows that no changes to the skip set are per-
formed in high contexts. Hence S1 = S2 = S.
Case sink. Then S1 = S2 = S. We distinguish two cases:
(1) Γ(e) = L
Then m1 (e) = m2 (e) and Γ1 (outj ) = Γ2 (outj ) = pc.
(2) Γ(e) = H
If the sinkj statement corresponds to a skipped action (S (oj ) = tt),
then the memories and typing environments remain unchanged, i.e.
m′
1 ∼Γ1 m′
2.
i
If the sinkj statement does not correspond to a skipped action
(S (oj ) = ff ), then m′
= mi[outj (cid:55)→ m(e)] and Γi = Γ[outj (cid:55)→ H],
for i = 1, 2. Then Γ1 = Γ2 and, since m′
1 ∼Γ1
m′
□
2.
⟨stop, m′, S, Γ′⟩ then
Lemma B.3. If ⟨sink(e), m, S, Γ⟩H →∗
m′(out)|B = ∅.
= mi and Γi = Γ, for i = 1, 2. Hence Γ1 = Γ2 = Γ and m′
1 (outj ) ∼H m′
2 (outj ), m′
i
Proof. The only construct that allows the attacker to make any
observations is linkL, i.e. only blacklisted URLs inside the linkL
Table 1: Popular third-party applets susceptible to privacy violations
Title of applet on IFTTT
Tweet your Instagrams as native photos on Twitter
Sync all your new iOS Contacts to a Google Spreadsheet
Save photos you’re tagged in on Facebook to a Dropbox folder
Back up photos you’re tagged in on Facebook to an iOS Photos album
Track your work hours in Google Calendar
Get an email whenever a new Craigslist post matches your search
Maker
djuiceman
mcb
pavelbinar
devin
rothgar
mckenziec
danamerrick Press a button to track work hours in Google Drive
Automatically share your Instagrams to Facebook
rsms
Log how much time you spend at home/work/etc.
ktavangari
Tweet your Facebook status updates
djuiceman
Twitter
Google Sheets
Dropbox
iOs Photos
Google Calendar
Email
Trigger service Action service
Instagram
iOS Contacts
Facebook
Facebook
Location
Classifieds
Button Widget Google Sheets
Instagram
Location
Facebook
Facebook
Google Sheet
Twitter
Users (May’17 – Aug’18)
500k – 540k
270k – 270k
160k – 160k
150k – 160k
150k – 160k
140k – 150k
130k – 130k
110k – 140k
99k – 100k
88k – 100k
Table 2: Popular third-party IoT applets susceptible to integrity/availability violations
Trigger service
Nest Protect
Action service Users (May’17 – Aug’18)
Philipps Hue
4.8k – 6.3k
Maker
anticipate
Title of applet on IFTTT
Turn your lights to red if your Nest Protect detects a carbon monoxide
emergency
Nest & Hue Smoke emergency
dmrudy
sharonwu0220 If Arlo detects motion, call my phone
brandxe
awgeorge
dmrudy
apurvjoshi
meinuelzen
skausky
hotfirenet
If Nest Protect detects smoke send notification to Xfinity X1 TVs
If smoke emergency, set lights to alert color
Nest & Hue Co2 Emergency alert
Get a phone call when Nest cam detects motion
Turn all HUE lights to red color if smoke alarm emergency in bedroom
While I’m not home, let me know if any motion is detected in my house WeMo Motion
MyFox SMS alert Intrusion
Nest Protect
Arlo
Nest Protect
Nest Protect
Nest Protect
Nest Cam
Nest Protect
Philipps Hue
Phone Call
Comcast Labs
Philipps Hue
Philipps Hue
Phone Call
Philipps Hue
SMS
1.1k – 1.7k
570 – 620
410 – 590
410 – 420
400 – 520
400 – 870
390 – 410
210 – 210
190 – 240
Myfox HomeControl Android SMS
construct can increase the attacker’s knowledge. However, the
monitor disallows evaluating linkL in high contexts.
□
Theorem 2 (Soundness). Given command c, input i1, memory
m1, typing environment Γ, skip set S, and URL blacklist B such that
⟨c[i1/x], m1, S, Γ⟩pc →∗ ⟨stop, m′
1, S1, Γ1⟩, for any i2 and m2 such
that i1 ≈ i2, m1 ∼Γ m2, m1 (outj ) ∼B m2 (outj ) ∀1 ≤ j ≤ |S| such
that S (oj ) = ff , and ⟨c[i2/x], m2, S, Γ⟩pc →∗ ⟨stop, m′