title:SmartDiet: offloading popular apps to save energy
author:Aki Saarinen and
Matti Siekkinen and
Yu Xiao and
Jukka K. Nurminen and
Matti Kemppainen and
Pan Hui
SmartDiet: Ofﬂoading Popular Apps to Save Energy
Aki Saarinen, Matti Siekkinen, Yu Xiao, Jukka K. Nurminen, Matti Kemppainen
aki@akisaarinen.ﬁ, {matti.siekkinen, yu.xiao, jukka.k.nurminen}@aalto.ﬁ,
Aalto University, School of Science, Finland
matti.kemppainen@iki.ﬁ
Pan Hui
Deutsche Telekom Labs, Berlin, Germany
PI:EMAIL
ABSTRACT
Oﬄoading computation to cloud has been widely used for
extending battery life of mobile devices. However, little ef-
fort has been invested in applying the oﬄoading techniques
to communication-related tasks. We propose SmartDiet, a
toolkit to identify the constraints that reduce oﬄoading op-
portunities and to calculate the energy-saving potential of
oﬄoading communication-related tasks. SmartDiet traces
the method-level application execution and estimates the
allocation of communication energy cost from traﬃc traces.
We discuss key features of SmartDiet and show some pre-
liminary results using a prototype implementation.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distributed
Systems—Distributed Applications; D.2.8 [Software Engi-
neering]: Metrics—performance measures
Keywords
Oﬄoading, energy consumption, constraint analysis
1.
INTRODUCTION
A seemingly straightforward way to conserve battery life
of a mobile device is to reduce workload by migrating the
whole or part of the application execution to a more powerful
machine called surrogate. This method is called oﬄoading
or sometimes cyber foraging. Several frameworks including
MAUI [3], Cuckoo [4], CloneCloud [2], ThinkAir [5], and
Scavenger [6] have been used for implementing computation
oﬄoading that aims at reducing energy cost by CPU and
memory. Although most popular apps today involve inten-
sive communications that consume a signiﬁcant part of the
overall energy consumption on mobile devices, little eﬀort
has been put on oﬄoading communication-related tasks and
it is unclear whether and in which way such oﬄoading can
save energy. To address this issue, we investigate the feasi-
bility of such oﬄoading in this work, taking a set of open
source applications as examples. We refer to such oﬄoading
as communication oﬄoading.
There are two means by which energy savings could be
achieved from communication oﬄoading. First is to reduce
the amount of the network traﬃc that needs to be handled
Copyright is held by the author/owner(s).
SIGCOMM’12, August 13–17, 2012, Helsinki, Finland.
ACM 978-1-4503-1419-0/12/08.
by the mobile device. For example, signaling traﬃc such
as keep-alive messages can be partly suppressed. Second is
to optimize the pattern shown in the traﬃc and to improve
the overall latency and/or throughput. For instance, packet
interval pattern and throughput have a signiﬁcant impact
on communication energy cost[9].
In this study we take the ﬁrst look into the feasibility
of communication oﬄoading through case studies. We use
a speciﬁc method-level application partitioning framework
called ThinkAir [5].
In general, existing frameworks for
method-level application partitioning provide APIs for spec-
ifying which methods can be possibly oﬄoaded, while requir-
ing programmers with expert knowledge to manually anno-
tate these methods. To better utilize these frameworks, tools
that can automatic the partitioning are desperately needed.
The methods that can be marked as oﬄoadable should
ﬁrst be suitable for remote execution. In practice, there are
many constraints that limit the remote execution of certain
methods. These constraints are non-trivial and laborous to
identify manually. Based on case studies of open source
apps, we summarize the constraints into three types and
develop a toolkit called SmartDiet for identifying such con-
straints automatically. Our toolkit also provides suggestion
of code modiﬁcations for releasing certain constraints such as
serialization issue in method-level oﬄoading. Furthermore,
as communication cost is heavily depedent on traﬃc pattern,
traﬃc pattern can be shaped through code reconstruction in
order to reduce communication cost. To assist developers in
making such improvement, our toolkit provides energy esti-
mation at method level. It can be used for evaluating the
energy-eﬃciency and performance of code reconstruction at
development stage, and can therefore guide programmers
to improve application implementation for better energy-
eﬃciency.
2. SMARTDIET
Based on our experiences in oﬄoading open-sourced pop-
ular apps, described in [8], we conclude that for oﬄoading
to be feasible in practice, further assistance for developers
in proﬁling and modifying existing programs is needed. We
share many concerns that Balan et al. have presented in [1].
Their goal was to enable rapid modiﬁcation of applications
for cyber foraging so that the developer ﬁrst creates a so-
called tactics ﬁle corresponding to the program being mod-
iﬁed, after which the actual program code is modiﬁed. This
is still a pretty laboursome process. Our approach is to pro-
vide the SmartDiet toolkit to help developers who are using
297Table 1: Constraint statistics for methods within 16
open source apps.
with minor
Statistic
Number of methods
Directly migratable
Migratable
changes
Hardware access constraints
Potential unexpected behav-
ior because of access to ﬁle
system
Median Min
121
431
0.00% 3.70%
0.17%
15.7%
0.00% 46.8%
Max
4411
14.2%
10.7%
2.28% 41.3%
0.00% 30.3%
highly automated oﬄoading frameworks such as ThinkAir
and MAUI. SmartDiet comprises two tools: energy proﬁling
and constraint identiﬁcation. We have designed and imple-
mented prototypes of both. Detailed descriptions are in [8].
Energy proﬁling tool: This tool ﬁnds and visualizes
parts of application code that could yield energy savings if
oﬄoaded. The tool collects two kinds of information while
the program is running: the traﬃc trace, and a trace of the
program execution ﬂow to later produce class and method
level statistics for the developer. We use statistical meth-
ods to match each collected network packet into one single
method call in the program. We apply power models [9] to
get detailed time series of energy consumption of the wireless
network interface in use. Similar to Eprof [7], the models we
use take tail power state into account. Moreover, our power
models account for the impact of power consumption dif-
ferences in each active state during the data transmission.
Program execution in each thread can be viewed as a hierar-
chical call tree, where a method calls another method which
calls another and so on. Our tool reconstructs this tree, car-
rying along the information of the detected network usage.
It then aggregates the traﬃc of the nodes up in the tree,
so that the root method, where the execution starts, gets
associated with all packets that have been sent or received
within each thread.
Constraint identiﬁcation tool: This tool identiﬁes oﬀ-
loading constraints through static analysis of the source code,
determines which methods can be oﬄoaded as such and
points out trouble spots in the code. The developer would
apply this tool after ﬁrst proﬁling the energy consumption
of the app to identify the candidate methods for oﬄoading.
For each method of the application, it points out problems
that can prevent oﬄoading unless the code is modiﬁed. The
tool currently uses heuristics that identify problems asso-
ciated with Android platform and Java Serialization API
which is used to implement the remote execution of meth-
ods. Similar heuristics can be crafted to other remote exe-
cution mechanisms, e.g., the Android Parcelable mechanism
or .NET serialization.
Hardware constraints: The ﬁrst set of constrained meth-
ods are those that require access to the hardware of the
local device. We currently identify method as having this
constraint if it tries to show, for instance, notiﬁcations to
the user, update anything on the screen, vibrate the phone,
access the Bluetooth, wiﬁ or usb subsystem, and so on. We
identiﬁed 20 constrained subsystems while going through
Android system APIs.
We ran our constraint analysis tool with a set of programs
that are non-trivial in size and include either communication
or non-trivial computation. Results are shown in Table 1.
Maximum of 3% of methods are directly migratable. Smart-
Diet can improve the situation by pointing trouble spots in
the source code. If all of these issues were ﬁxed, it would
enable the migration of 15% to 47% of methods. SmartDiet
can also guide the developer into ﬁxing the issues regarding
hardware or ﬁle system access. The results show that typical
existing apps are heavily constrained in terms of what can
be oﬄoaded but with a little assistance, developers could
leverage oﬄoading much more in practice.
3. CONCLUSIONS AND FUTURE WORK
SmartDiet has shown promising results in helping the de-
velopment of oﬄoadable code, although some challenges still
remain to complete all the features we believe would be use-
ful. We will integrate energy estimator of CPU usage to
the same toolkit using existing models. We also study ways
to statistically analyze the dependencies between execution
of multiple threads and to track packet ﬂow inside a pro-
gram. Programming styles and application structures are
also interesting topics for future work.
4. ACKNOWLEDGMENTS
This work was supported by the Academy of Finland,
grant number 253860.
5. REFERENCES
[1] R. K. Balan, D. Gergle, M. Satyanarayanan, and
J. Herbsleb. Simplifying cyber foraging for mobile
devices. In MobiSys 2007, pages 272–285.
[2] B.-G. Chun, S. Ihm, P. Maniatis, M. Naik, and
A. Patti. Clonecloud: elastic execution between mobile
device and cloud. In EuroSys 2011, pages 301–314.
[3] E. Cuervo, A. Balasubramanian, D.-k. Cho,
A. Wolman, S. Saroiu, R. Chandra, and P. Bahl. Maui:
making smartphones last longer with code oﬄoad. In
MobiSys 2010, pages 49–62.
[4] R. Kemp, N. Palmer, T. Kielmann, and H. Bal.
Cuckoo: A computation oﬄoading framework for
smartphones. In Mobile Computing, Applications, and
Services, volume 76, pages 59–79. Springer Berlin
Heidelberg, 2012.
[5] S. Kosta, A. Aucinas, P. Hui, R. Mortier, and
X. Zhang. Thinkair: Dynamic resource allocation and
parallel execution in the cloud for mobile code
oﬄoading. In INFOCOM 2012, pages 945–953.
[6] M. Kristensen. Scavenger: Transparent development of
eﬃcient cyber foraging applications. In PerCom 2010,
pages 217–226.
[7] A. Pathak, Y. C. Hu, and M. Zhang. Where is the
energy spent inside my app?: ﬁne grained energy
accounting on smartphones with eprof. In EuroSys
2012, pages 29–42.
[8] A. Saarinen, M. Siekkinen, Y. Xiao, J. K. Nurminen,
M. Kemppainen, and P. Hui. Oﬄoadable apps using
smartdiet: Towards an analysis toolkit for mobile
application developers. CoRR, abs/1111.3806, 2011.
[9] Y. Xiao, P. Savolainen, A. Karppanen, M. Siekkinen,
and A. Yl¨a-J¨a¨aski. Practical power modeling of data
transmission over 802.11g for wireless applications. In
e-Energy 2010, pages 75–84.
298