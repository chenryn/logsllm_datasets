Swing中，也都实现了观察者模式。现在，你已经具备足够的能力来自行探索这
些API，但是我们还是在此稍微提一个简单的Swing例子，让你感受一下其中的
如果你对avaBeans里的观察者
乐趣。
模式感到好奇，可以壹一下
背景介绍.·.
PropertyChangelistener接。
让我们看看一个简单的SwingAPI：JButton。如果你观察一下JButton的超类
AbstractButton，会看到许多增加与删除倾听者（listener）的方法，这些方法可
以让观察者感应到Swing组件的不同类型事件。比方说：ActionListeneri让你“倾
听”可能发生在按钮上的动作，例如按下按钮。你可以在SwingAPI中找到许多不
同类型的倾听者。
一个小的、改变生活的程序
我们的程序很简单，你有一个按钮，上面写着“ShouldIdoit？”（我该做吗？）。
当你按下按钮，倾听者（观察者）必须回答此问题。我们实现了两个倾听者，一
个是天使（AngelListener），一个是恶魔（DevilListener）。程序的行为如下：
000
这是我们一个很炫的接口。
Should I do it?
这是点按银后所得到的输出。
java SwingobserverExample
Come on,do it！
Dontdoit,you mightregretit!
天使的答复
72
第2章
---
## Page 109
观察者模式
代码是这样的····
这个改变生活的程序需要的代码很短。我们只需要建立一个JButton对象，把
它加到JFrame，然后设置好倾听者就行了。我们打算用内部类（innerclass）
作为倾听者类（这样的技巧在Swing中很常见）。如果你对内部类或Swing不
熟悉，可以读一读《HeadFirstJava》中的并于“获得GUI”的章节。
简单的Swins应用：建立一个
public class SwingobserverExample {
Frame，然后放上一个按钮。
JFrame frame;
public static void main(String[] args)(
SwingObserverExample example = new SwingObserverExample();
example.go();
public void go(）{
frame = new JFrame();
制造出两个倾听者（观
察老），一个天使，一
JButton button = new JButton("Should I do it?");
button.addActionListener(new AngelListener());
个恶魔。
button.addActionListener (new DevilListener());
frame.getContentPane().add(BorderLayout.CENTER,
.button);
//在这里设置frame属性
class AngelListener implements ActionListener {
public void actionPerformed(ActionEvent event)
System.out.println("Don't do it, you might regret it!");
这是观察者的类定义
定义成内部类（你也可
class DevilListener implements ActionListener {
以不这么做）。
public void actionPerformed(ActionEvent event)(
System.out.println("Come on, do it!");
T
当主题（3Button）的状态
改变时，在本例中，不是
调用update(）.而是调用
actionPertormed()。
你现在的位置
73
---
## Page 110
你的设计工具箱
设计箱内的工具
要点
观察者模式定义了对象之间一
欢迎来到第2章的结尾，你的对象
对多的关系。
工具箱内又多了一些东西
主题（也就是可观察者）用一
个共同的接口来更新观察者
00基础
观察者和可观察者之间用松
耦合方式结合（loosecoupl-
抽象
ing），可观察者不知道观察
者的细节，只知道观察者实现
00原则
了观察者接口。
封装变化
·使用此模式时，你可从被观察
者处推（push）或拉（pull）
多用组合，少用继承
数据（然而，推的方式被认为
更“正确”）。
针对接口编程，不针对实现
这是你的新原则。请牢
编程
记，松耦合设计更有弹
■有多个观察者时，不可以依赖
性，更能应对变化。
特定的通知次序。
为交互对象之间的松耦合设
·Java有多种观察者模式的实
计而努力
现，包括了通用的java.util.
Observable。
要注意java.util.Observable实
00模式
现上所带来的一些问题。
策略
·如果有必要的话，可以实现自
来，
观察者模式—在对象之间定义一
己的Observable，这并不难，
让算
对多的依赖，这样一来，当一个对象改
不要害怕。
变状态，依赖它的对象都会收到通知，
Swing大量使用观察者模式，
并自动更新。
许多GUI框架也是如此。
■此模式也被应用在许多地方，
个新的模式，以松耦合方式在一系列对象
例如：JavaBeans、RMI。
之间沟通状态。我们目前还没看到观察老模
式的代表人物——MVC.以后就会看到了。
74
第2章
---
## Page 111
观察者模式
习
挑战设计原则
对于每一个设计原则，请描述观察者模式如何遵循此原
则。
设计原则
找出程序中会变化的方面，然后将其和固定不
变的方面相分离。
设计原则
针对接口编程，不针对实现编程
这一个比较难回答。给一点暗示：想想看观察老和主
题是如何搭配工作的。
设计原则
多用组合，少用继承
你现在的位置，
75
---
## Page 112
填字游戏
再次为你的右脑找些事情做吧！
这次所有的词都来自第2章。
横排提示：
竖排提示：
1. Observable is a
not an interface
2. Ron was both an Observer and a
3. Devil and Angel are
to the button
3. You want to keep your coupling
4. Implement this method to get notified
7. He says you should go for it
5. Jill got one of her own
`6
canmanageyour observersforyou
6.CurrentConditionsDisplay implements this
10.Java framework with lots of Observers
interface
11. Weather-O-Rama's CEO named after this
8. How to get yourself off the Observer list
kind of storm
12. You forgot this if you're not getting notified
13. Observers like to be
when
when you think you should be
something new happens
15. One Subject likes to talk to
observers
14. The WeatherData class
the
18. Don't count on this for notification
Subject interface
19. Temperature, humidity and
16. He didn’t want any more ints, so he removed
20. Observers are
on the Subject
himself
17. CEO almost forgot the
index display
DD
21. Program to an
not an
implementation
19. Subject initially wanted to
all the data
22. A Subject is similar to a
to Observer
76
第2章
---
## Page 113
观察者模式
习题
在我们的第一个实现中，下列哪种说法正确？（多选）
解答
A
我们是针对具体实现编程，而非
口
D.布告板没有实现一个共同的接
针对接口。
口。
B.对于每个新的布告板，我们都得
E.我们尚未封装改变的部分。
修改代码。
C.我们无法在运行时动态地增加或
口F.我们侵犯了WeatherData类的
删除布告板。
封装。
挑战
设计
原则
在观察考横式中，含改变的是主题的状态，以及观
察老的数0和类型。用这个模式，惊可以改定依赖
设计原则
于主延状态的对象，却不必改变主题。这就提前
规划
找出程序中会变化的方面，然后将其和固定
不变的方面相分离。
主题免观察老都使用接口，呢察老利用主题的提口
向主延注册，而主题利用观察老播口通知观察老。
设计原则
这样可以让两老之阅运行正常，又同时具有松属合
的优点
针对接口编程，不针对实现编程。
中。对象之间的这神关系不是逐过继承户生的，两
设计原则
是在运行时利用通会物方式而户生的，
多用组合，少用继承。
你现在的位置
77
---
## Page 114
习题解答
代码帖
习题解答
inport java.uti1.observabie)
import java-uti1.obsezver!
pub1lc class ForecastDisplay inplements
private float currentPressure - 29.92f;
private float lastPressorej
public ForecastDlsplay10
observable)
WeatherData
veatherData
ver (thIs))
object arg)
currentPxessote.:
entPress
rei]:
r()fedsT
gb1ic
//在这望星示代码
voLd d1sp1ay()
78
第2章
---
## Page 115
3装饰者模式
装饰对象
我曾经以为男子汉应该用继承处理一
切。后来我领数到运行时扩展，远
比编泽时期的继永威力大。意意我
现在光采的样子！
本章可以称为“给爱用继承的人一个全新的设计眼
界”。我们即将再度探讨典型的继承滥用问题。你将在本章学到如何使
用对象组合的方式，做到在运行时装饰类。为什么呢？一且你熟悉了装饰的
技巧，你将能够在不修改任何底层代码的情况下，给你的（或别人的）对象赋
PDG
予新的职责。
这是新的一章
79
---
## Page 116
星巴兹的故事
欢迎来到星巴兹咖啡
星巴兹（Starbuzz）是以扩张速度最快而闻名的咖啡连锁店。如果
你在街角看到它的店，在对面街上肯定还会看到另一家。
因为扩张速度实在太快了，他们准备更新订单系统，以合乎他们
的饮料供应要求。
他们原先的类设计是这样的
Bevetase（钦科）是一个抽象
类.店内所提供的饮科都必
须继承自此类。
这个名为desctiption（叙述）的实例
Beverage
变量，由每个子类设置，用来描述伙
description
科.例如“超优深培（DatkRoust）
咖啡量“。
cost()方法是抽象的
getDescription()
子类必须定义自己的
cost()
利用setDesctiptiox(）方法返回此叙述。
实现。
I其他有用的方法
HouseBlend
DarkRoast
Decaf
Espresso
cost()
cost()
cost()
cost()
每个子类实现cost(）来返回饮科的价钱。
PDG
80
第3章
---
## Page 117
装饰者模式
购买咖啡时，也可以要求在其中加入各种调料，例如：蒸奶（SteamedMilk）、豆浆（Soy）、
摩卡（Mocha，也就是巧克力风味）或覆盖奶泡。星巴兹会根据所加人的调料收取不同的费
用。所以订单系统必须考虑到这些调料部分。
这是他们的第一个尝试
哇塞！这简直是
每个cost方法将计算出如啡加
爆炸”
上订单上各种调科的价钱。
PDG
你现在的位置
81
---
## Page 118
违反设计原则
BRAIN
UPOWER
很明显，星巴兹为自己制造了一个维护恶梦。如果牛奶的价钱上扬，怎么
办？新增一种焦糖调料风味时，怎么办？
造成这种维护上的困难，究竞违反了我们之前提过的哪种设计原则？
暗示：违反了两个原则，而且很严重！
笨透了！于嘛设计这么多类
呀？利用实例变量和继承，就可以
追踪达些调料呀！
好吧！就来试试看。先从Beverage基类下手，加上
实例变量代表是否加上调料（牛奶、豆浆、摩卡、
奶泡...
Beverage
各种调科的新的布
description
milk
尔值
soy
mocha