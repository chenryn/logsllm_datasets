这是内核漏洞挖掘技术系列的第十二篇。  
第一篇：[内核漏洞挖掘技术系列(1)——trinity](https://xz.aliyun.com/t/4760
"内核漏洞挖掘技术系列\(1\)——trinity")  
第二篇：[内核漏洞挖掘技术系列(2)——bochspwn](https://xz.aliyun.com/t/4800
"内核漏洞挖掘技术系列\(2\)——bochspwn")  
第三篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(1)](https://xz.aliyun.com/t/4921
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(1\)")  
第四篇：[内核漏洞挖掘技术系列(3)——bochspwn-reloaded(2)](https://xz.aliyun.com/t/4932
"内核漏洞挖掘技术系列\(3\)——bochspwn-reloaded\(2\)")  
第五篇：[内核漏洞挖掘技术系列(4)——syzkaller(1)](https://xz.aliyun.com/t/5079
"内核漏洞挖掘技术系列\(4\)——syzkaller\(1\)")  
第六篇：[内核漏洞挖掘技术系列(4)——syzkaller(2)](https://xz.aliyun.com/t/5098
"内核漏洞挖掘技术系列\(4\)——syzkaller\(2\)")  
第七篇：[内核漏洞挖掘技术系列(4)——syzkaller(3)](https://xz.aliyun.com/t/5154
"内核漏洞挖掘技术系列\(4\)——syzkaller\(3\)")  
第八篇：[内核漏洞挖掘技术系列(4)——syzkaller(4)](https://xz.aliyun.com/t/5223
"内核漏洞挖掘技术系列\(4\)——syzkaller\(4\)")  
第九篇：[内核漏洞挖掘技术系列(4)——syzkaller(5)](https://xz.aliyun.com/t/5401
"内核漏洞挖掘技术系列\(4\)——syzkaller\(5\)")  
第十篇：[内核漏洞挖掘技术系列(5)——KernelFuzzer](https://xz.aliyun.com/t/5443
"内核漏洞挖掘技术系列\(5\)——KernelFuzzer")  
第十一篇：[内核漏洞挖掘技术系列(6)——使用AFL进行内核漏洞挖掘(1)](https://xz.aliyun.com/t/5521
"内核漏洞挖掘技术系列\(6\)——使用AFL进行内核漏洞挖掘\(1\)")
## 前言
之前在本系列的第二篇文章：[内核漏洞挖掘技术系列(2)——bochspwn](https://xz.aliyun.com/t/4800
"内核漏洞挖掘技术系列\(2\)——bochspwn")中和大家分享了double fetch漏洞原理和2013年Project
Zero的j00ru开源的用bochs的插桩API实现的挖掘内核double
fetch漏洞的工具bochspwn()。USENIX
Security 2017上的一篇论文采用静态模式匹配的方法从Linux内核中发掘了6个未知的double
fetch漏洞，这篇文章就和大家分享这篇论文中的内容。  
源代码：  
论文地址：
## 整体架构
github上的源代码含有三个文件夹。
  * text-filter：文本过滤方法的源代码
  * cocci：基于coccinelle引擎的模式匹配方法的源代码
  * auto_fix：基于coccinelle引擎的double fetch漏洞修补工具的源代码
重点是cocci目录。cocci目录下有testdir，startcocci_linux.sh，startcocci_freebsd.sh，pattern_match_linux.cocci，pattern_match_freebsd.cocci，copy_files.py这些文件或目录。
  * testdir：保存要解析的文件的目录
  * startcocci_linux.sh\startcocci_freebsd.sh：启动解析的shell脚本，这个脚本将删除上次解析剩下的文件，并调用相应的cocci脚本(pattern_match_linux.cocci\pattern_match_fressbsd.cocci)来解析源文件
  * pattern_match_linux.cocci\pattern_match_fressbsd.cocci：coccinelle脚本文件，它存储了我们为模式匹配添加的规则，日志记录到result.txt中
  * copy_files.py：将可能存在漏洞的源代码文件复制到outcome目录，以便于人工分析
先apt-get install
coccinelle安装coccinelle，然后将待解析的文件拷贝到testdir目录，运行startcocci_linux.sh或者startcocci_freebsd.sh，检查result.txt中的结果，在outcome目录下查看对应的源代码文件。
## double fetch漏洞分类
在论文中，作者把double fetch漏洞分为3类：type selection，size checking和shallow copy。  
将数据从用户态拷贝到内核态通常只需要调用一次转移函数。然而，如果数据含有可变的类型或者长度时就没有这么简单了。这样的数据通常由header和body两个部分组成。在接下来的部分中我们把这样的数据称为消息(message)。在拷贝消息时很容易产生double
fetch漏洞。  
### type selection
当消息头用于类型选择时，可能会出现double
fetch。在此场景中，一般会首先获取消息头来识别消息类型，然后根据消息类型获取和处理整个消息。在linux内核中，一个驱动程序中的一个函数被设计成使用switch语句结构来处理多种类型的消息是非常常见的。第一次fetch的结果(消息类型)用于switch语句的条件，在switch语句的每个case中消息都通过第二次fetch复制到特定类型的本地缓冲区中进行处理。  
我们来看linux内核中的一个例子。cxgb_extension_ioctl函数从指向用户态的指针useraddr中获取消息类型cmd，在switch中根据cmd将整个消息拷贝到对应的结构体中。在获取整个消息时消息类型会被第二次获取(第2149/2292/2355行)。不过因为在接下来的代码中没有用到消息类型，所以这里并不会造成漏洞。  
### size checking
当消息头用于标识消息大小时，可能会出现double
fetch。在此场景中，一般会首先将消息头复制到内核中获取消息的大小，检查它的有效性，并分配一个必要大小的本地缓冲区，然后将整个消息(也包括消息头)复制到分配的缓冲区中。如果只使用第一次获取的消息的大小而不从第二次获取的消息中检索就不会产生漏洞。但是，如果从第二次获取的消息中检索大小并使用它就有可能产生漏洞，因为恶意用户可能已经更改了它。  
我们来看linux内核中的一个例子(CVE-2016-6480)。ioctl_send_fib函数在第81行和第116行通过arg指针两次获取了用户态的数据。第一次用来计算缓冲区的大小，第二次通过计算出的大小获取整个消息。在获取整个消息之后使用了消息头中的多个元素(第121行和第129行)，还使用了消息头中的Size(第130行)，用户可能在两次fetch之间修改了Size的值。  
### shallow copy
当将用户空间中的缓冲区(第一个缓冲区)复制到内核空间，并且该缓冲区包含指向用户空间中的另一个缓冲区(第二个缓冲区)的指针时，就会发生用户空间和内核空间之间的浅拷贝。传递函数只复制第一个缓冲区，而第二个缓冲区必须通过第二次调用传递函数来复制。有时需要将数据从用户空间复制到内核空间，对数据进行操作，然后将数据复制回用户空间。此类数据通常包含在用户空间中的第二个缓冲区中，包含其它数据的用户空间中的第一个缓冲区中的指针指向它。使用只执行浅拷贝的传递函数执行深拷贝的复杂性可能会导致程序员引入漏洞。  
我们来看linux内核中的一个例子(CVE-2016-6130)。sclp_ctl_ioctl_sccb函数在第61行将user_area指向的数据拷贝到ctl_sccb中，然后在第68行将ctl_sccb.sccb指向的消息头拷贝到sccb。经过第72行的检查之后在第74行将整个消息基于sccb->length拷贝到sccb。最后在第81行拷贝回用户态。第74行和第81行虽然都用的是sccb->length，但是第81行的sccb->length来源于第74行的拷贝。在第68行到第74行之间用户可能修改了sccb->length的值。不过在这里触发这个漏洞只会导致系统调用在第82行结束。  