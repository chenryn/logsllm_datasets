netfilter is a massively complex topic to cover in a small section, so reading up on its impacts and configuration settings is highly recommended before changing these numbers. To get an idea of each of the settings, you can visit [https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt](https://www.kernel.org/doc/Documentation/networking/nf_conntrack-sysctl.txt) and read up about it.
对于桶数，需要直接更改`nf_conntrack` `hashsize`内核模块参数:
```
echo '131072' | sudo tee /sys/module/nf_conntrack/parameters/hashsize
```
最后，为了确保在加载 netfilter 模块时遵循正确的顺序，以便这些值正确保持，您可能还需要在`/etc/modules`的末尾添加以下内容:
```
nf_conntrack_ipv4
nf_conntrack_ipv6
```
如果一切都做得正确，您的下一次重新启动应该已经设置了我们谈到的所有 netfilter 设置。
# 多服务容器
多服务容器是一个特别棘手的话题，因为 Docker 的整个概念和推荐使用是，您只在容器中运行单进程服务。正因为如此，不涉及这个主题有相当大的隐性压力，因为它很容易被不理解强烈反对这种做法的原因的开发人员误用和滥用。
然而，尽管如此，还是会有需要在一个紧密的逻辑分组中运行多个进程的时候，在这种情况下，多容器解决方案没有意义或者过于混乱，这就是为什么这个主题仍然很重要。说了这么多，我再怎么强调也不为过，你应该把这种服务搭配作为最后的手段。
在我们甚至写一行代码之前，我们必须讨论一个在同一个容器中运行多个进程的架构问题，这被称为`PID 1`问题。这个问题的关键是 Docker 容器运行在一个孤立的环境中，在获取孤立的子进程时，它们不会从主机的`init`进程中获得帮助。考虑一个示例进程`Parent Process`，这是一个基本的可执行文件，它启动了另一个进程`Child Process`，但是在此之后的某个时间点，如果相关的`Parent Process`退出或者被杀死，你将会留下僵尸`Child Process`在你的容器中游荡，因为`Parent Process`已经不在了，并且在容器沙箱中没有其他孤儿收割进程在运行。如果容器退出，那么僵尸进程将被清理，因为它们都被包装在一个名称空间中，但是对于长时间运行的任务来说，在单个映像中运行多个进程会带来严重的问题。
Terminology here might be confusing, but what was meant in simple terms is that every process is supposed be removed (also known as `reaped`) from the process table after it exits, either by the parent process or some other designated process (usually `init`) in the hierarchy that will take ownership of of it in order to finalize it. A process that does not have a running parent process in this context is called an orphan process.
有些工具有能力收割这些僵尸进程(比如 Bash 和其他几个 shells)，但即使是它们也不足以初始化我们的容器的进程，因为它们没有将`SIGKILL`、`SIGINT`等信号传递给其他子进程，所以停止容器或者在 Terminal 中按下 *Ctrl* + *C* 等东西都没有用，也不会终止容器。如果您真的想在容器中运行多个进程，那么您的启动进程必须进行孤儿收割，并将信号传递给孩子。因为我们不想从容器中使用像`systemd`这样的完整的初始化系统，这里有两个选择，但是在 Docker 的最新版本中，我们现在有了`--init`标志，它可以用一个真正的初始化运行程序运行我们的容器。
让我们看到这一点，并尝试退出一个启动过程为`bash`的程序:
```
$ # Let's try to run 'sleep' and exit with -C
$ docker run -it \
 ubuntu \
 bash -c 'sleep 5000'
^C^C^C^C^C^C^C^C^C^C
$ # On second terminal
$ docker ps
CONTAINER ID IMAGE  COMMAND                CREATED            STATUS 
c7b69001271d ubuntu "bash -c 'sleep 5000'" About a minute ago Up About a minute
$ # Can we stop it?
$ docker stop c7b69001271d
^C
$ # Last resort - kill the container!
$ docker kill c7b69001271d
c7b69001271d
```
这一次，我们将运行带有`--init`标志的容器:
```
$ docker run -it \
 --init \
 ubuntu \
 bash -c 'sleep 5000'
^C
$ # -C worked just fine!
```
如您所见，`--init`能够接收我们的信号，并将其传递给所有正在侦听的子进程，它作为孤儿进程收割器运行良好，尽管后者很难在基本容器中显示。有了这个标志和它的功能，您现在应该能够用一个 shell(比如 Bash)运行多个进程，或者升级到一个完整的进程管理工具(比如`supervisord`([【http://supervisord.org/】](http://supervisord.org/))而没有任何问题。
# 零停机部署
对于每个集群部署，在某个时候，您需要考虑代码重新部署，同时最大限度地减少对用户的影响。对于小型部署，您可能会有一个维护期，在此期间，您可以关闭一切，重建新映像，并重新启动服务，但这种部署方式实际上不是管理大中型集群的方式，因为您希望最大限度地减少维护集群所需的任何和所有直接工作。事实上，即使对于小型集群来说，以无缝方式处理代码和配置升级对于提高工作效率也是非常宝贵的。
# 滚动服务重新启动
如果新的服务代码没有改变它与其他服务(输入和输出)交互的基本方式，通常唯一需要的是重建(或替换)容器映像，然后将其放入 Docker 注册表，然后以有序和交错的方式重新启动服务。通过交错重启，总是至少有一个任务可以处理可用的服务请求，从外部角度来看，这种转换应该是完全无缝的。如果您更改或更新服务的任何设置，大多数编排工具都会自动为您执行此操作，但是由于它们非常特定于实现，我们将在示例中重点介绍 Docker Swarm:
```
$ # Create a new swarm
$ docker swarm init
Swarm initialized: current node (j4p08hdfou1tyrdqj3eclnfb6) is now a manager.
$ # Create a service based on mainline NGINX and update-delay
$ # of 15 seconds
$ docker service create \
 --detach=true \
 --replicas 4 \
 --name nginx_update \
 --update-delay 15s \
 nginx:mainline
s9f44kn9a4g6sf3ve449fychv
$ # Let's see what we have
$ docker service ps nginx_update
ID            NAME            IMAGE           DESIRED STATE  CURRENT STATE
rbvv37cg85ms  nginx_update.1  nginx:mainline  Running        Running 56 seconds ago
y4l76ld41olf  nginx_update.2  nginx:mainline  Running        Running 56 seconds ago
gza13g9ar7jx  nginx_update.3  nginx:mainline  Running        Running 56 seconds ago
z7dhy6zu4jt5  nginx_update.4  nginx:mainline  Running        Running 56 seconds ago
$ # Update our service to use the stable NGINX branch
$ docker service update \
 --detach=true \
 --image nginx:stable \
 nginx_update
nginx_update
$ # After a minute, we can now see the new service status
$ docker service ps nginx_update
ID            NAME               IMAGE           DESIRED STATE  CURRENT STATE
qa7evkjvdml5  nginx_update.1     nginx:stable    Running        Running about a minute ago
rbvv37cg85ms  \_ nginx_update.1  nginx:mainline  Shutdown       Shutdown about a minute ago
qbg0hsd4nxyz  nginx_update.2     nginx:stable    Running        Running about a minute ago
y4l76ld41olf  \_ nginx_update.2  nginx:mainline  Shutdown       Shutdown about a minute ago
nj5gcf541fgj  nginx_update.3     nginx:stable    Running        Running 30 seconds ago
gza13g9ar7jx  \_ nginx_update.3  nginx:mainline  Shutdown       Shutdown 31 seconds ago
433461xm4roq  nginx_update.4     nginx:stable    Running        Running 47 seconds ago
z7dhy6zu4jt5  \_ nginx_update.4  nginx:mainline  Shutdown       Shutdown 48 seconds ago
$ # All our services now are using the new image
$ # and were started staggered!
$ # Clean up
$ docker service rm nginx_update 
nginx_update 
$ docker swarm leave --force 
Node left the swarm.
```
正如您所看到的，它应该足够简单，可以在不停机的情况下对您自己的代码进行同样的更改！
If you want to be able to restart multiple tasks instead of one at a time, Docker Swarm has an `--update-parallelism ` flag as well that can be set on a service. When using this flag, `--update-delay` is still observed but instead of a single task being restarted, they are done in batches of `` size.
# 蓝绿色部署
滚动重启很好，但有时您需要应用的更改是在主机本身上，并且需要对集群中的每个 Docker Engine 节点进行更改，例如，如果您需要升级到较新的编排版本或升级操作系统版本。在这些情况下，在没有大型团队支持的情况下，通常采用被称为**蓝绿色部署**的方式。它首先部署一个与当前运行的集群并行的辅助集群，可能绑定到同一个数据存储后端，然后在最合适的时候将入口路由切换到指向新集群。一旦原始集群上的所有处理都停止，它就会被删除，新集群将成为主要的处理组。如果做得好，对用户的影响应该是察觉不到的，并且整个底层基础设施已经在这个过程中发生了变化。
该过程从创建辅助群集开始。此时，除了测试新集群的行为是否符合预期之外，没有任何有效的更改:
![](img/bc9f8944-013e-45a1-be98-0f8beb0edb12.png)
辅助群集运行后，路由器交换端点，处理继续在新群集上进行:
![](img/1f6e468b-02a2-44e9-9c3d-a8351da4aa00.png)
进行交换后，在完成所有处理后，原始群集将退出使用(或作为紧急备份):
![](img/e98613c3-c6e8-4033-a3cc-a4f22be65fb4.png)
但是这种部署模式在完整集群上的应用并不是它的唯一用途——在某些情况下，可以在同一个集群内的服务级别上这样做，使用相同的模式来交换一个更新的组件，但是有一个更好的系统来实现这一点，我们接下来将介绍它。
# 蓝绿色部署
随着代码的部署，事情变得有点棘手，因为在输入或输出端或者数据库模式上改变 API 会对具有分散版本代码的集群造成严重破坏。为了解决这个问题，有一个修改后的蓝绿色部署模式，称为**蓝绿色部署**，在这个模式下，代码试图与所有运行的版本保持兼容，直到部署了新代码，之后通过删除 compat 代码再次更新服务。
这里的过程非常简单:
1.  使用应用编程接口版本`x`的服务被同时支持应用编程接口版本`x`和应用编程接口版本`(x+1)`的新版本服务所取代。从用户的角度来看，这提供了零停机时间，但创建了一个具有更新的应用编程接口支持的新服务。
2.  一切更新后，具有旧 API 版本`x`的服务将从代码库中移除。
3.  另一个滚动重启是在服务上完成的，以消除不推荐使用的应用编程接口的痕迹，因此只剩下应用编程接口版本`(x+1)`支持。
当您正在使用的服务需要持久可用时，这种方法非常有价值，在许多情况下，如果您的集群基于队列，您可以很容易地用消息队列格式替换 API 版本。转换是平稳的，但是与硬交换的单次修改相比，需要两次修改服务会有开销，但是这是一个不错的折衷。当正在使用的服务处理可能需要迁移的数据库时，这种方法也非常有价值，因此当其他方法不够好时，您可能应该使用这种方法。
# 摘要
在这一章中，我们介绍了当您在简单原型之外增加基础设施规模时，您将需要的各种工具和技术。到目前为止，我们应该已经学会了如何限制对主机资源的服务访问，轻松处理最常见的陷阱，在单个容器中运行多个服务，以及处理零宕机部署和配置更改。
在下一章中，我们将利用迄今为止学到的许多东西，花时间部署我们自己的迷你版**平台即服务** ( **PAAS** )。