.Bl -hang -offset indent
.It Em Hanged
labels appear similar to tagged lists when the
label is smaller than the label width.
.It Em Longer hanged list labels
blend in to the paragraph unlike
tagged paragraph labels.
.El
.Pp
它们的 源文本为:
.Bd -literal -offset indent
\&.Bl -hang -offset indent
\&.It Em Hanged
\&labels appear similar to tagged lists when the
\&label is smaller than the label width.
\&.It Em Longer hanged list labels
\&blend in to the paragraph unlike
\&tagged paragraph labels.
\&.El
.Ed
.Pp
带有 可选 宽度项的 标记列表 可以 控制 标记的 宽度.
.Pp
.Bl -tag -width "PAGEIN" -compact -offset indent
.It SL
sleep time of the process (seconds blocked)
.It PAGEIN
number of disk
.Tn I/O Ns 's
resulting from references
by the process to pages not loaded in core.
.It UID
numerical user-id of process owner
.It PPID
numerical id of parent of process process priority
(non-positive when in non-interruptible wait)
.El
.Pp
源文本是:
.Bd -literal -offset indent
\&.Bl -tag -width "PAGEIN" -compact -offset indent
\&.It SL
\&sleep time of the process (seconds blocked)
\&.It PAGEIN
\&number of disk
\&.Tn I/O Ns 's
\&resulting from references
\&by the process to pages not loaded in core.
\&.It UID
\&numerical user-id of process owner
\&.It PPID
\&numerical id of parent of process process priority
\&(non-positive when in non-interruptible wait)
\&.El
.Ed
.Pp
可接受的 宽度说明:
.Bl -tag -width Ar -offset indent
.It Fl width Ar "\&Fl"
把 宽度 设置为 标志 (flag) 的 缺省 宽度. 所有 可调用的 宏 都有
一个 缺省 宽度值. 目前
.Ql \&.Fl 
的 值 设为 十个 字符宽度, 大约 5/6 英寸.
.It Fl width Ar "24n"
设置 宽度 为 24 个 字符宽度, 大约 两英寸. 要使 比例 调整正常, 字母
.Ql n
必不可少
.It Fl width Ar "ENAMETOOLONG"
设置 宽度为 所给串的 长度.
.It Fl width  Ar "\\*qint mkfifo\\*q"
同样, 设置 宽度为 所给串的 长度.
.El
.Pp
如果 没有 为 标记列表类型 指定 宽度, 第一次 调用
.Ql \&.It
的 时候, 格式化软件 试图 决定 适当的宽度. 如果
.Ql ".It"
的 第一个 参数 是 可调用宏, 就 使用 这个宏的 缺省宽度, 就像 把 宏名 当做宽度.
可是 如果 列表中 的 其他表项 得到 另一个 可调用宏, 则 认为 它是 新的, 
嵌套的 列表.
.Sh 预定义串 PREDEFINED STRINGS
下面的串 是 预定义的, 可以 用在 troff 的 串翻译序列
.Ql \&\e*(xx
中, 这里的
.Em xx
就是 定义的 串名; 以及 串翻译序列
.Ql \&\e*x ,
这里的
.Em x
是串名. 翻译序列 可以 用在 文本 的 任何地方.
.Pp
.Bl -column "String " "Nroff " "Troff " -offset indent
.It Sy "String	Nroff	Troff"
.It Li "=" Ta \&>\&= Ta \*(>=
.It Li "Rq" Ta "''" Ta \*(Rq
.It Li "Lq" Ta "``" Ta \*(Lq
.It Li "ua" Ta ^ Ta \*(ua
.It Li "aa" Ta ' Ta \*(aa
.It Li "ga" Ta \` Ta \*(ga
.\" .It Li "sL" Ta ` Ta \*(sL
.\" .It Li "sR" Ta ' Ta \*(sR
.It Li "q" Ta \&" Ta \*q
.It Li "Pi" Ta pi Ta \*(Pi
.It Li "Ne" Ta != Ta \*(Ne
.It Li "Le" Ta = Ta \*(Ge
.It Li "Lt" Ta  Ta \*(Lt
.It Li "Pm" Ta +- Ta \*(Pm
.It Li "If" Ta infinity Ta \*(If
.It Li "Na" Ta \fINaN\fP Ta \*(Na
.It Li "Ba" Ta \fR\&|\fP Ta \*(Ba
.El
.Pp
.Sy 注意 :
那个 名为
.Ql q
的 串 应该 写成
.Ql \e*q ,
因为 它 只有 一个字符.
.Sh 诊断 DIAGNOSTICS
.Nm \-mdoc
的 除错系统 比较 有限, 但是 可以 帮助你 检测出 微妙的 错误,
例如 参数名 和 内部寄存器 或 宏名 冲突. (是什么?) 寄存器 是
.Xr troff
的 算术存储类, 用 一到二个字符 命名.
.Nm \-mdoc
对
.Xr troff
和
.Xr ditroff
而言, 所有
.Nm \-mdoc
的 内部寄存器 由 两个字符 组成, 格式是   如
.Ql \&Ar ,
  如
.Ql \&aR
或   如
.Ql \&C\&1 .
作为 乱上加乱,
.Xr troff
有 它 自己的 内部寄存器, 由 两个 小写字母 组成, 或者 是 一个点 加上 
一个字母, 或者 是 转义字符 (meta-character) 和 字符. 已经 介绍过的 
示例中 展示过 怎样用 转义序列
.Ql \e& 
防止 解释宏. 这办法 同样 适用于 内部寄存器名.
.Pp
.\" Every callable macro name has a corresponding register
.\" of the same name ().
.\" There are also specific registers which have
.\" been used for stacks and arrays and are listed in the
.\" .Sx Appendix .
.\" .Bd -ragged -offset 4n
.\" [A-Z][a-z]	registers corresponding to macro names (example ``Ar'')
.\" [a-z][A-Z]	registers corresponding to macro names (example ``aR'')
.\" C[0-9]		argument types (example C1)
.\" O[0-9]		offset stack (displays)
.\" h[0-9]		horizontal spacing stack (lists)
.\" o[0-9]		offset (stack) (lists)
.\" t[0-9]		tag stack (lists)
.\" v[0-9]		vertical spacing stack (lists)
.\" w[0-9]		width tag/label stack
.\" .Ed
.\" .Pp
如果 未经转义的 寄存器名 出现在 宏请求的 参数列表 中, 其 后果 不可预测.
一般说来, 如果 大段的文字 没有 出现在 该出现的 地方, 或者 短句, 如标签, 
消失了, 多半是 这个地方 误解了 参数列表中的 参数类型.
既然 你的母亲 都 没打算 让你 记住 那些 乱七八糟的 东西, 那就 用 一种办法
来 找出 参数 是否 有效: 
.Ql \&.Db
(debug) 宏 可以 显示出 对 大多数宏 的 参数列表的 解释.
诸如
.Ql \&.Pp
之类 的 宏 不包含 调试信息, 但是 所有 可调用宏 包含, 我们 强烈建议 一旦
有 疑点, 打开
.Ql \&.Db
宏.
.Pp
.Dl Usage: \&.Db [on | off]
.Pp
在 这个 示例中, 我们把 介于 debug 宏 之间 的 文本 故意 弄出点 错误 (标志参数
.Ql \&aC
应该 写成
.Ql \e&aC
):
.Bd -literal -offset indent
\&.Db on
\&.Op Fl aC Ar file )
\&.Db off
.Ed
.Pp
结果输出为:
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(argv) MACRO: `.Op'  Line #: 2
	Argc: 1  Argv: `Fl'  Length: 2
	Space: `'  Class: Executable
	Argc: 2  Argv: `aC'  Length: 2
	Space: `'  Class: Executable
	Argc: 3  Argv: `Ar'  Length: 2
	Space: `'  Class: Executable
	Argc: 4  Argv: `file'  Length: 4
	Space: ` '  Class: String
	Argc: 5  Argv: `)'  Length: 1
	Space: ` '  Class: Closing Punctuation or suffix
	MACRO REQUEST: .Op Fl aC Ar file )
DEBUGGING OFF
.Ed
.Pp
调试信息的 第一行 是 调用的 宏名, 这里是
.Ql \&.Op 
和 它 所在的 行号. 如果 涉及了 一个 或 多个 文件 (特别是 其他文件 
包含进来), 行号有可能失灵. 但如果 只有 一个文件, 它 应该是 准的.
第二行 给出了 参数计数, 参数
.Pq Ql \&Fl
和 它的长度. 如果 参数的长度 是 两个字符, 将会 测试 看它 能否 执行 
(不幸的是,含有 非零值 的 寄存器 看上去 都能执行).
第三行 给出 分配给类的 空间, 以及 类的类型. 这里的 问题是, 参数 aC 
不应该 可执行. 类的 四种类型是 字符串, 可执行类, 结束标点, 和开始标点.
最后一行 显示了 读入的 完整 参数行. 下个例子里, 惹祸的
.Ql \&aC
被转义了:
.Bd -literal -offset indent
\&.Db on
\&.Em An escaped \e&aC
\&.Db off
.Ed
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(fargv) MACRO: `.Em'  Line #: 2
	Argc: 1  Argv: `An'  Length: 2
	Space: ` '  Class: String
	Argc: 2  Argv: `escaped'  Length: 7
	Space: ` '  Class: String
	Argc: 3  Argv: `aC'  Length: 2
	Space: ` '  Class: String
	MACRO REQUEST: .Em An escaped &aC
DEBUGGING OFF
.Ed
.Pp
参数
.Ql \e&aC
表现出 同样的 长度2, 这是 因为
.Ql \e&
序列的 长度 为零, 但是 不存在 叫做
.Ql \e&aC
的 寄存器, 因此 它的类型 是 字符串.
.Pp
其他 诊断内容 是 使用报告等, 能够 自我解释的.
.Sh GROFF, TROFF AND NROFF
The
.Nm \-mdoc
宏包 不需要 和
.Xr groff 
的 兼容模式.
.Pp
为了 便于 在线阅读, 这个宏包 阻止了 分页, 页头, 页脚 之类 常常在
.Xr nroff 
中 出现的 中断. 此时 即使在 手册页 尾,
.Xr groff
(和参数
.Fl T Ns Ar ascii
) 也 不会 提示 什么. 对 分页的 阻止 使得
.Xr nroff Ns 'd
文件 不适合 硬拷贝 (hardcopy). 有一个 名为
.Ql \&cR
的 寄存器 可以 通过 在 文件
.Pa /usr/src/share/tmac/doc-nroff
(依赖于宿主系统) 中置零, 恢复 传统风格.
.Sh 相关文件 FILES
.Bl -tag -width /usr/share/man0/template.doc -compact
.It Pa /usr/share/tmac/tmac.doc
手册宏包
.It Pa /usr/share/misc/mdoc.template
编写 手册 的 模板
.It Pa /usr/share/examples/mdoc/*
一些 手册页 的 例子
.El
.Sh 另见 SEE ALSO
.Xr man 1 ,
.Xr troff 1 ,
.Xr mdoc 7
.Sh BUGS
仍然 没有 解决 在 标志参数中的 连字符, 在
.Sx 描述 DESCRIPTION
小节 偶尔 会 出点麻烦 (在 连字符处 断行).
.Pp
文档中 没有 声明 预定义串.
.Pp
还没有 把 3f 小节 加进 头例程 (header routine) 中.
.Pp
.Ql \&.Nm
字体 不应当在
.Sx NAME
小节 中 改变.
.Pp
应该 检查
.Ql \&.Fn
防止 行 太短 的 时候 断行.
偶然 它会 断开 反括弧, 而 有时候 如果 某行 已满时, 看上去 会 很可笑.
.Pp
当 使用 nroff 格式化 文档 时, 防止 页头和页脚 (不是 初始的 头和脚) 断开 的 方法
有可能 偶尔 在 页的底部 产生 一个 不可见的 部分填满的 行 (空行).
.Pp
列表和显示宏不做任何保存, 显然它应该做的.
.\" Note what happens if the parameter list overlaps a newline
.\" boundary.
.\" to make sure a line boundary is crossed:
.\" .Bd -literal
.\" \&.Fn struct\e\ dictionarytable\e\ *dictionarylookup struct\e\ dictionarytable\e\ *tab[]
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" nudge
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] .
.\" .Pp
.\" If double quotes are used, for example:
.\" .Bd -literal
.\" \&.Fn \*qstruct dictionarytable *dictionarylookup\*q \*qchar *h\*q \*qstruct dictionarytable *tab[]\*q
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" .
.\" .Pp
.\" Not a pretty sight...
.\" In a paragraph, a long parameter containing unpaddable spaces as
.\" in the former example will cause
.\" .Xr troff
.\" to break the line and spread
.\" the remaining words out.
.\" The latter example will adjust nicely to
.\" justified margins, but may break in between an argument and its
.\" declaration.
.\" In
.\" .Xr nroff
.\" the right margin adjustment is normally ragged and the problem is
.\" not as severe.
.Sh "[中文版维护人]"
.Sy 徐明 
.Sh "[中文版最新更新]"
.Sy 2003/05/13
.Sh "《中国Linux论坛man手册页翻译计划》"
.Sy http://cmpp.linuxforum.net