• 
fileicon set WebScreenShot -/Documents/icons/eyewitness . png
• 
fileicon set GalleryX Tool -/Documents/icons/gallery. png
• fileicon set HTTrack -/Documents/icons/httrack.png
• fileicon set InstagramX Tool -/Documents/icons/ins tagram.png
• fileicon set InternetX Archive -/Documents/icons/internetarchive.png
• fileicon set Metadata -/Documents/icons/metadata.png
• fileicon set Metagoofil -/Documents/icons/metagoofil.png
• fileicon set OSINTX Tools -/Documents/icons/tools.png
• fileicon set Recon-NG -/Documents/icons/recon-ng.png
• fileicon set RedditX Tool -/Documents/icons/reddit .png
• fileicon set Spiderfoot -/Documents/icons/spiderfoot .png
• fileicon set Updates -/Documents/icons/updates.png
• fileicon set UsernameX Tool -/Documents/icons/usertool .png
• fileicon set VideoX DownloadX Tool ~/Documents/icons/youtube-dl.png
• fileicon set VideoX StreamX Tool -/Documents/icons/streamlink.png
• fileicon set VideoX Utilities -/Documents/icons/f fmpeg .png
If you are copying these commands from the "mac.txt" file on my website, you should be able to copy an entire 
section and paste it all into Terminal at once. Striking enter on your keyboard should execute each command 
individually. This can be very convenient once you are comfortable with this process, but I believe each line 
should be submitted manually as you become familiar with the actions. To be safe, restart the machine after 
these steps. Next, I like to make some graphical adjustments to my Mac OSINT build. First, I embed the same 
icons used for the Linux VM into the Mac Scripts. The following commands replicate my process. However, 
the "mac.txt" file in your downloads includes a single command which conducts all of these steps at once.
cd sherloq/gui && sudo -H python3 -m pip install -r
cd -/Downloads/Programs
git clone https://github.com/opsdisk/metagoofil.git
cd metagoofil && sudo -H python3 -m pip install -r :
cd -/Downloads/Programs
git clone https: //github. com/MalloyDelacroix/DownloaderForReddit.git
cd DownloaderForReddit && sudo -H python3 -m pip install -r 
requirements.txt -I
cd -/Downloads/Programs
git clone https://github.com/lanmaster53/recon-ng.git
cd recon-ng && sudo -H python3 -m pip install -r REQUIREMENTS -I
cd -/Downloads/Programs
git clone https://github.com/smicallef/spiderfoot.git
cd spiderfoot && sudo -H python3 -m pip install
cd -/Downloads/Programs
git clone https://github.com/AmIJesse/Elasticsearch-Crawler.git
cd -/Downloads && h8mail -g
sed -i '' ,s/\;leak\-lookup\__pub/leak\-lookup\_pub/g' h8mail_config.ini 
cd -/Downloads/Programs
git clone https://github.com/mxrch/ghunt
cd ghunt && sudo -H python3 -m pip install -r requirements.txt -I
sudo -H python3 -m pip list —outdated —format=freeze I grep -v ’A\-e*
I cut -d = -f 1 | xargs -nl sudo -H python3 -m pip install -U 
sudo shutdown -r now
In -s -/Documents/scripts/ /Applications/
Single Install Command (Mac)
Issues
Mac & Windows Hosts 103
defaults write com.apple.dock persistent-apps -array-add 'tile-datafile-data_CFURLString 
/Applications/scripts/Domain Tool _ 
CFURLStringTypeO'
The command to place the scripts within the Dock is too long to place here. It would have taken three pages to 
display in the book. The following would copy only the Domain Tool script.
You should now see your Mac scripts with custom names and icons. However, you likely cannot launch any of 
them by simply double-clicking the files. This is due to Apples Gatekeeper security rules. Since my simple scripts 
are not registered with Apple and none of them possess security certificates, they are blocked by default. There 
are two ways to bypass this. You could double-click a script; acknowledge the block; open your security settings; 
enter your password; choose the option to allow the script to run; and repeat for each file. This is quite time 
consuming. I prefer to right-click on each file; select "Open"; then confirm the security exception. You only 
need to do this once per file. This is a one-time nuisance, but the protection is beneficial for digital security.
The long single command included within your "mac.txt” file places shortcuts to every program and script 
present within the Linux VM into your Dock. Look for the section titled "Add Programs To Dock And Modify 
Size". Warning: It overrides all settings of your current Dock.
You should now possess a Mac machine which replicates practically every aspect of the Ubuntu OSINT VM. 
Figure 6.01 displays the final result with all applications visible. You may be expecting a simple command which 
will replicate all of these steps as was presented with the Linux VM chapter. If so, you will be disappointed. I 
exclude a single install command for a few reasons.
If you applied the Mac build steps presented within the previous edition of this book, you may see many errors 
while executing the steps presented here. This is mostly due to the presence of this software already on your 
system. There is no concern. Simply go through these steps, ignore any errors, and be sure to run the update 
script when complete. If your Terminal session asks you to override any files, confirm this option. You might 
be presented with an option to enter "A" in order to allow overwriting of all files. Either way, allow your system 
to replace any previous software and you should be caught up to this version of all software, scripts, and tools. 
If you find many of the Terminal applications installed within Brew to be missing, you may have an issue with 
your "PATH". Execute "brew doctor" within Terminal and follow the advice presented on the screen.
First, the Linux section assumes that you have created a virtual machine which can be easily deleted and rebuilt. 
Making these changes to your Mac computer should be very intentional and deliberate. I don’t want to offer a 
script which could make drastic changes to your host computer which could impact other installed applications. 
Next, replicating the Linux steps is not the same as on a Mac due to security restrictions within the operating 
system. There are a few steps which require manual execution which cannot be properly replicated within 
Terminal. As an example, I can easily launch and close Firefox within Terminal on Linux, but it can be difficult 
to do on a Mac. You must also manually launch the custom programs during first use in order to allow them to 
run on your host. I cannot replicate that in Terminal. For these reasons, 1 ask you to apply these steps manually.
Next, I want to add my custom scripts to the Dock at the bottom of my screen and within my Applications 
folder. I also want to decrease the size of the icons; remove all standard Apple applications from the Dock; and 
place my programs in the exact same order as the Linux VM. The command to add the scripts to your 
Applications folder is as follows.
O "n.«w
Lr*j1 Xl£vw«
e ctrBQQoo e®3Q, eo p
□!•>)« •■ c
Figure 6.01: A final macOS OSINT machine.
Updates
104 Chapter 6
•Of’
Ixu *>» * 1«Jj
_  
________________________ 
■
7
See
=g77
^■ 1”
=®=
:: o t
7 ESS7
“^-SKMSE-
Finally, I want the ability to update all of these programs whenever desired. The following can be entered 
manually, or you can simply click on the custom "Updates" icon now in your Dock. That script simply executes 
each line presented here automatically. All of these commands are also available at the bottom of the "mac.txt" 
file on my website. If (when) tilings change, I will update die information there, and you can apply it to your 
own Updates script if desired.
• brew update
• brew upgrade
• brew upgrade —greedy
• brew autoremove
• brew cleanup -s
• rm -rf "$(brew —cache)"
• brew doctor
• brew missing
• sudo -H python3 -m pip list —outdated —format=freeze I grep 
cut -d = -f 1 | xargs -nl sudo -H python3 -m pip install -U
• cd -/Downloads/Programs/sherlock
• git pull https://github. com/sherlock-project/sherlock. git
• cd -/Downloads/Programs/WhatsMyName
• git pull https://github.com/WebBreacher/WhatsMyName.git
• cd ~/Downloads/Programs/Sublist3r
• git pull https://github.com/aboul31a/Sublist3r.git
• cd -/Downloads/Programs/Photon
• git pull https://github.com/s0md3v/Photon.git
• cd ~/Downloads/Programs/theHarvester
• git pull https://github.com/laramies/theHarvester.git
• cd ~/Downloads/Programs/Carbonl4
Reverse All Changes (Mac)
requirements.txt -y
requirements.txt -y
requirements.txt -y
requirements.txt -y
requirements.txt -y
REQUIREMENTS -y
requirements.txt -y
Mac & Windows Hosts 105
• git pull https://github.com/Lazza/Carbonl4
• 
cd -/Downloads/Programs/metagoofil
• 
git pull https://github.com/opsdisk/metagoofil.git
• cd -/Downloads/Programs/sherloq
• git pull https://github.com/GuidoBartoli/sherloq.git
• cd ~/Downloads/Programs/recon-ng
• git pull https://github.com/lanmaster53/recon-ng.git
• cd -/Downloads/Programs/spiderfoot
• git pull https://github.com/smicallef/spiderfoot.git
• cd -/Downloads/Programs/Elasticsearch-Crawler
• git pull https://github.com/AmIJesse/Elasticsearch-Crawler.git
• cd ~/Downloads/Programs/ghunt
• git pull https://github.com/mxrch/ghunt.git
sudo -H python3 -m pip uninstall ■ 
cd -/Downloads/Programs/Sublist3r 
sudo -H python3 -m pip uninstall - 
cd -/Downloads/Programs/Photon 
sudo -H python3 -m pip uninstall ■
requirements.txt -y
cd ~/Downloads/Programs/email2phonenumber
requirements.txt -y
requirements.txt -y 
cd -/Downloads/Programs/theHarvester
requirements.txt -y
Assume you completed this tutorial and you have regret You made substantial changes to your host operating 
system and you simply want to reverse the steps taken within this section. Maybe your supervisor is questioning 
your decision to modify an employer-owned computer and you are in the hot seat. Simply conduct the following 
within Terminal. Note that this removes all custom settings applied within these programs, but should not 
remove any pre-installed applications or unrelated modifications.
sudo -H python3 -m pip uninstall youtube-tool Instaloader toutatis nested- 
lookup webscreenshot redditsfinder socialscan holehe waybackpy gallery-dl 
xeuledoc bdfr search-that-hash h8mail -y 
cd -/Downloads/Programs/Osintgram 
sudo -H python3 -m pip uninstall -r 
cd -/Downloads/Programs/sherlock 
sudo -H python3 -m pip uninstall -r 
cd -/Downloads/Programs/WhatsMyName 
sudo -H python3 -m pip uninstall -r
• sudo -H python3 -m pip uninstall -r
• cd -/Downloads/Programs/Carbonl4
• sudo -H python3 -m pip uninstall -r
• cd -/Downloads/Programs/sherloq/gui
• sudo -H python3 -m pip uninstall -r
• cd -/Downloads/Programs/metagoofil
• sudo -H python3 -m pip uninstall -r requirements.txt -y
• cd ~/Downloads/Programs/bulk-downloader-for-reddit
• sudo -H python3 -m pip uninstall -r requirements.txt -y
• cd -/Downloads/Programs/recon-ng
• sudo -H python3 -m pip uninstall -:
• cd -/Downloads/Programs/spiderfoot
• sudo -H python3 -m pip uninstall
• cd -/Downloads/Programs/ghunt
requirements.txt -y
Windows OSINT Host
106 Chapter 6
• /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/ 
Homebrew/install/master/uninstall. sh) "
-/Documents/scripts
-/Documents/icons
Some readers may wonder why I recommend the lengthy steps on the previous pages when this single command 
should wipe out everything installed with Brew. In my experience, deleting the Brew application does not fully 
remove apps installed with Brew. Deleting Brew apps, such as Python3, does not remove the dependencies we 
installed with the various "pip" commands. Replicating all of these commands eliminates much more data than 
removing Brew alone. If you are using the "mac.txt" file to copy and paste the commands as recommended, you 
could copy them all at once and let it go. Note that you will likely be asked to enter your password at least once.
All of these commands are at the end of your "mac.txt" file for easy copy and paste. You may receive an error 
about permissions for a few Brew apps. This is usually due to files which are actively in use by the operating 
system. That is fine, as we will remove those in the next step. The final phase is to remove the Brew application 
completely with the following command. Note that this is one command displayed within multiple lines.
When I first started thinking about creating a Windows OSINT machine, I considered using the Windows 
Subsystem for Linux (WSL). This feature allows native use of Linux commands and applications within a virtual 
space directly in Windows. However, this presented many issues. Some versions of Windows rely on WSL 1 
while others support WSL 2. The file storage within WSL and execution of programs can present complications, 
and I eventually abandoned the idea of using WSL for our needs. I then focused on Power Shell. This command 
line utility is very similar to the native Windows Command Prompt but with added features. I found it to be 
overkill for our needs. Therefore, I settled on traditional batch files executed through Command Prompt.
• 
sudo -H python3 -m pip uninstall
• 
sudo rm
• 
sudo rm
• 
sudo rm -r -/Downloads/Programs
• 
sudo rm -r /Applications/scripts
• 
sudo rm /usr/local/bin/xvfb-run
• 
brew uninstall zenity youtube-dl yt-dlp ffmpeg pipenv mat2 httrack 
exiftool internetarchive ripgrep instalooter fileicon wget streamlink 
libmagic amass firefox google-chrome vic tor-browser google-earth-pro 
keepassxc mediainfo phantomjs xquartz
• 
brew remove —force $(brew list)
• 
brew cleanup -s
• 
defaults delete com.apple.dock && killall Dock
Your Mac operating system should be back the way it was before replicating the methods in this chapter. If you 
executed any of the apps and conducted queries, you may see that data within your Desktop or Documents 
folders. These can be deleted manually. There will still be evidence of these installations within your standard 
operating system file structure. However, the applications and all visual clues should now be gone. All of the 
scripts and Python dependencies will no longer be present. Next, let’s tackle Microsoft Windows as an OSINT 
environment.
I have been creating batch files since the 90's. These small text files are very similar to the Bash scripts which 
we created previously within Linux. I believe Windows batch files are actually simpler to create and more 
straight-forward in design. The menus are not as pretty as what we saw with Linux and Mac. However, the 
function will be identical. Let's take a look at the difference. Figure 6.02 (left) displays the Video Download Tool 
within the Linux VM. Figure 6.02 (right) displays the Video Utilities Tool available within the Windows OSINT 
machine. The left is a pop-up menu while the right is a script within a traditional Command Prompt display. 
Some may prefer the simplicity of the Windows option (1 do).
©
OK
Figure 6.02: A comparison of Linux and Windows script execution.
Sherlock
Exit
Mac & Windows Hosts 107
X
Select
task:
Type option:
Choose Option
Choose Option
Best Quality 
Maximum 720p 
Export YT Comments 
Export YT Playlist 
Export YT Info
:1
set Zp url=Target Username:
cd ouserprofile%\Downloads\Programs\sherlock\sherlock
py sherlock.py %url% > %userprof ile?d\Documents\%url%-Sherlock. txt 
start "" Suserprofile%\Documents\%url%-Sherlock.txt 
goto home
set /p url=Target Username:
socialscan %url% > %userprof ile?d\Documents\%url%-SocialScan. txt 
start "" %userprofile%\Documents\iourl%-SocialScan.txt
goto 2 
goto 3 
if "%web%"=="4" goto 4 
if "%web%"=="5" goto 5 
if ,,%web%"=="6" exit
Next, we should compare the scripts. The previous Linux ".sh" files were explained in Chapter Four and were 
used during the Mac option presented within this chapter. The ".bat" files included within the "scripts" folder 
at https://inteltechniques.com/osintbook9/windows-files.zip are pre-configured to replicate all of the Python 
scripts inside Windows. During the upcoming tutorials to build your Windows OSINT machine, I present die 