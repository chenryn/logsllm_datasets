argv++;
C
if
(strncnp(*argv.*
O_RDONLY*,8）== 01 open_node =O_RDONLY;
if
(strncnp(*argv,
‘O_WRONLY',8) = O) open_node
=O_WRONLY;
if(argv)(
argv++;
if(strncnpi*argv,
if
(strncnpI*argv,
“O_RDONLY",8}==0）open_node|=O_RDONLY;
if(strncmp(*argv.*O_NONBLOCK*. 10）==0）open_mode|O_NONBLOCK;
（0==（8-xINONM0
open_mode|* O_WRONLY;
3）现在检查这个FIFO文件是否存在，如有必要就创建它。接下来打开这个FIFO文件。如果
程序“捉住了四十大盗”—操作成功，就给出相应的输出。最后，关闭这个FIFO文件。
it(access(FIFO_NAME,F_OK)zs·1){
if (res != 0) {
fprintf(stderr.*Could not create fifo $s\n", FiFO_NAME):
exit (EXIT_FAILURB) ;
printf(*Process &d opening FIFO\n*. getpid(11:
printt(*Process ad result ed\n*, getpid[). res] ;
res = open(FIFO_NAME, open_mode) :
if (res 1= -11 {void)close(res);
sleep(5) :
printE(*Process d finished\n*, getpid(1]:
exit (EXIT_SUCCESS) :
操作注释：
这个程序允许我们在命令行1设定我们准备使用的O_RDONLY、O_WRONLY和
O_NONBLOCK标志的组合。它会把命令行参数与程序中的常数字符串进行比较，如果二者匹配，
就（用“！”操作符）设置上相应的标志：程序用access函数检查FIFO文件是否存在，如果不存
在就创建它
我们在程序的最后没有删除这个FIFO文件，因为我们不知道是否有其他程序正在使用它。不
管怎么说，我们手里现在有自已的测试程序了，所以我们对以下几种标志组合情况进行逐个分析：
·O_RDONLY和O_WRONLY，都不带O_NONBLOCK标志：
S.fifo2 O_RDONLY&
Process 152 opening PIFO
[11152
S./f1fo2O_WRONLY
Process
:152 f1nished
153
result3
Process 153 finished
Ptocesf
这可能是命名管道最常见的用法了。它允许读进程启动，在open调用里等待；当第二个程
序打开FIFO文件的时候，两个程序都将开始继续执行。注意，读进程和写进程是在open调用处
得到尚步的。
当一个UNIX进程被阻塞的时候，它不消耗CPU的资源，所以这种进程同步方法从
CPU的角度看是非常有姓率的。
加入java编程群：524621833
---
## Page 387
第12章进程间通信：营道
369
·带O_NONBLOCK标志的O_RDONLY和不带该标志的O_WRONLY
$./fifO2O_RDONLY O_NONBLOCK&
Process 160 opening PIFO
[11  160
.fifo2O_wROLY
Process 161 opening FIFO
Process 160 result3
Process 160 finished
Process 161 finished
[3]+Done
ffo2 O_RDCNLY O_NONBLOCK
这一次，读进程通过了open调用，即使写进程没有出现它也会立刻继续执行。写进程也立
刻通过了open调用，因为那个FIFO文件已经以读方式打开过了。
这两个例子可能是Open模式的最常见组合、你还可以使用一些程序示例来试试其他组合
情况。
2.对FIFO文件进行读写
使用O_NONBLOCK模式会影响到FIFO文件上的readud和write调用。
空白且阻塞（即打开时使用了O.NONBLOCK标志）的FIFO文件上的read调用将等到有数据
可读时才能继续执行。而没有任何数据的非阻塞FIFO文件上的read调用将返回“0”字节。
个完全阻塞的FIFO文件上的write调用将等到有数据可写才能继续执行。如果FIFO文件不
能接受写人数据的全部字节，它上面的write调用将按下面的规则执行：
·如果请求写人的数据其长度等于或小于PIPE_BUF个字节，调用将失败，数据不能写人。
·如果请求写人的数据其长度大于PIPE_BUF个字节，将写人部分数据，返回值是实际写人
的字节数，它可以是零。
FIFO文件的长度是一个很重要的因素。系统对任一时间一个FIFO文件里所能够“保存”的
数据长度是有限制的。这是一个用“#define”语句定义的常数，一般可以在头文件limits.h里查
到。在Linux和许多其他的UNIX系统上，这个常数经常是4096个字节，但在某些系统上它可能
会小到S12个字节。系统规定：在一个以O_WRONLY方式（即阻塞模式）打开的FIFO文件.上，
如果写人的数据长度等于或小于PIPE_BUF个字节，那就会或者写人全部字节，或者一个字节都
不写。
如果只有一个FIFO写进程和一个FIFO读进程，这个限制就没有多么重要。但只使用一
个FIFO文件却允许多个不同的程序向只有一个的FIFO读进程发送请求的情况是很多见的。
如果几个不同的程序同时试图写这个FIFO文件，能否保证来自不同程序的数据块不会交织在
一起就非常关键了一也就是说，每一个写操作都必须是“原子化”的。怎样才能做到这一
点呢？
是这样的，如果你能够保证你的写请求是对一个阻塞FIFO文件进行的操作，并且数据的长
度等于或小于PIPE_BUF个字节，系统就能够确保数据不会交织在一起。在一般情况下，把通过
FFO文件传输的数据限制为-个个PIPE_BUF个字节的数据块是个很好的办法，除非你只使用着
一个写进程和-个读进程。
为了演示不相关的程序如何使用命名管道进行通信，我们需要用到独立的两个程序，fifo3.c
和fifo4.c
加入jaVa编程群：524621833
---
## Page 388
370
Linux程序设计
动手试试：利用FIFO文件实现进程间通信
1）首先是我们的“数据加工厂”程序。它会在必要时创建出管道来，并且会尽快地向管道
写人数据。
注意，出于演示的目的，我们不关心那都是些什么数据，所以我们也没有对缓冲区bufer进
行初始化。在这两个程序清单里，与fifo2.c不一样的地方都加上了阴影，而对命令行参数进行处
理的那部分代码都省略掉了。
include 
ihclude 
include 
finclude 
#include 
include 
#include 
#include 
define FIFO_NAMz -/cmp/my_fifo*
idefine BUFFER_SIZE PIPE_BUP
int main()
int pipe_fd;
int res;
int
open_node x O_WRONLY;
int bytes_aent=0;
char buffer{BUFrER_SIzE + 1]:
if (access(FIFO_NAME, F_OK) = -1){
res =mkfifo(FIFO_NAMz, 0777):
if (res != 0)(
fprintf(stderr.*Could not create fifo s`n*, FIFo_NAME):
exit(EXIT_FAILURE):
printf(*Process d opening FIFo O_wRONLY`n*,getpid()):
printf(*Process td result ad\n*, getpidt), pipe_fd):
if (pipe_fd 1x -1){
while（bytes_sent 
#include 
#include 
#include 
ninclude
include 
#include 
#include
define FIFO_NAME ·/tmp/my_fifo*
#define BUFFER_SIZE PIPE_BUF
int main()
int pipe_fd;
int open_node =O_RDONLY;
int res:
char buffer(BUFFER_SIZE + 1]:
int bytes_read = 0;
menset(buffer,*\o′, sizeof (buffer));
printf (*Precess d opening FIFO O_RDoNLY\n*,getpid());
pipe_fd = open(FIFO_NAME, open_mode};
printf(*Process d result d\n*,getpid(). pipe_fd);
if (pipe_fd 1= -1)(
do{
res = read(pipe_fd. buffer. aUFFER_SIZE);
}while（res >0）;
(void)close(pipe_fd);
else {
exit (EXIT_FAILURB):
printf(*Process ed finished, td bytes read\s*, getpid(), bytes_read);
exit (EXIT_SUCCESS1;
我们在运行这两个程序的同时用time命令对读进程进行计时。我们将看到如下所示的输出情
况（为简洁起见做了一些删节）：
S./fifo3 
Precess 375 opening FIFO O_WRONLY
[1] 375
Stime./tifol
Process 377 opening FIFO O_RDONLY
Process 375 result 3
Process 377 result 3
Process 377 finished, 10485760 bytes read
Process 375 finished
0inputs+0outputs (80major+9minor)pagefaults 0swaps
[1]+Done
fifo3
操作注释：
两个程序使用的都是阻塞模式的FIFO文件。我们先启动fifo3（写进程/数据加工厂）.它将
阻塞并等待有读进程打开这个FIFO文件。当fifo4（数据消费者）启动的时候，写进程解除阻塞
状态，并开始向管道写数据。同时，读进程也开始从管道读取数据。
UNIX会为这两个进程安排好它们的时间分配情况，使它们在能够运行的时候运行，
加入iava编程群：524621833
---
## Page 390
372
Linur程序设计
在不能运行的时候阻塞。因此，写进程将在管道满的时候阻塞，而读进程将在管道空的
时候阻塞。
time命令的输出告诉我们读进程只运行了不到0.1秒的时间，读取了10兆字节的数据。这说
明管道，至少在作者使用的Linux版本里，是一种在程序间传输数据的高效办法
12.6高级论题：以FIFO文件为基础的客户/服务器架构
作为对FIFO文件学习效果的检验，我们来看看怎样才能通过FIFO文件编写出一个非常简单
的客户/服务器应用软件。我们想只用·个服务器进程来接受请求、对它们进行处理，再把处理
后的结果数据返回给提出请求的另一方，客户。
我们想让多个客户进程都能够向服务器发送数据。为了使问题简单化，我们将假设将被处
理的数据都可以拆分成一个个的数据块，每个数据块的长度都小于PIPE_BUF个字节。当然，要
想实现这个系统可以有多种办法，但我们将只考虑能够体现出命名管道使用方法的办法。
因为服务器每次只能对一个数据块进行处理，所以只使用-个让服务器进程读、让每一个
客户写的FIFO文件应该是合乎逻辑的：只要以阻塞模式打开了FIFO文件，服务器和客户就会根
据具体情况自动被阻塞。
向客户发送处理后的数据稍微棘手一些.我们需要为每个客户安排-个第二管道来发送经
过处理的数据。我们的做法是：在最先传递给服务器的数据里加上客户的进程标识符（即它的
PID），这样双方就可以用这个PID值为用来返回数据的管道生成一个独一无二的名字了。
动手试试：一个客户/服务器软件示例
1)首先，我们来编写一个头文件cliserv.h。它的作用是定义客户程序和服务器程序都会用到
数据。为了方便其他程序的编写，它还包括上了必要的系统头文件。
#include 
#include 
include 
#include 
#include 
include 
#include 
#define SERVER_FIFO_NAME*/tnp/serv_fifo*
#define CLIENT_FIFO_NAME */tmp/cli_ad_fifo
#define BUFFER_SI2E 20
struct data_to_pass_st(
pid_t client_pid:
char
sone_data{BUPPER_SIZE -1];
2)现在轮到服务器程序server.c。我们在这一部分创建并打开了服务器管道。它被设置为只
读的阻塞模式。在稍做体眠（这是出于演示的目的）之后，服务器开始读取客户们发送来的数
据，这些数据是按data_to_pass_st结构组织的。
加入jaVa编程群：524621833