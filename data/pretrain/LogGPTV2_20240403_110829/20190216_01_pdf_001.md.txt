### DBKDA 2015: The Seventh International Conference on Advances in Databases, Knowledge, and Data Applications

#### Extending PostgreSQL with Column Store Indexes
**Authors:** Minoru Nakamura, Tsugichika Tabaru, Yoshifumi Ujibashi, Takushi Hashida, Motoyuki Kawaba, Lilian Harada  
**Affiliation:** Computer Systems Laboratories, Fujitsu Laboratories Ltd., Kawasaki, Japan  
**Emails:** {nminoru, tabaru, ujibashi, hashida, kawaba, harada.lilian}@jp.fujitsu.com

**Abstract:**
The importance of database systems that support mixed online transaction processing (OLTP) and online analytical processing (OLAP) workloads, known as OLXP workloads, has gained significant attention recently. Several research projects and commercial database systems have emerged to address OLXP. In this paper, we present our work on extending the open-source PostgreSQL database system to efficiently handle OLXP workloads. Our approach introduces a new column store index that is fully synchronized with row data for any insertions, updates, or deletions, without restrictions on data size or updatability. To the best of our knowledge, this is the first extension of the PostgreSQL OSS database to support OLXP. Section II describes the data storage and query execution using the proposed column store index. Section III presents preliminary evaluation results, and Section IV concludes the paper.

**Keywords:** PostgreSQL, columnar data, OLTP, OLAP, OLXP

---

### I. Introduction

Historically, database systems were primarily used for online transaction processing (OLTP), where transactions access and process only a few rows of data tables. Over time, a new usage emerged where queries access substantial portions of data tables to aggregate a few columns, leading to the development of online analytical processing (OLAP). However, executing OLAP queries often led to resource contentions and negatively impacted mission-critical OLTP operations. As a result, a data staging architecture was adopted, where a dedicated OLTP database system's changes were extracted, transformed, and loaded into a separate OLAP database system. 

Recently, real-time and operational business intelligence applications have required OLAP queries on the current, up-to-date state of transactional OLTP data, leading to the need for OLXP workloads. Some approaches use columnar data stores for both OLTP and OLAP, but their effectiveness for mission-critical OLTP applications remains unproven. Other hybrid approaches allow a data table to be represented simultaneously in both row and columnar formats, but with constraints on columnar data size and synchronization with row data.

In this paper, we propose a new approach to enhance PostgreSQL by adding a column store index that can handle OLXP workloads without any constraints on data sizes or updatability. We describe how data are stored and queries are executed using the proposed column store index in Section II, present some preliminary evaluation results in Section III, and conclude with future work in Section IV.

---

### II. Column Store Index

#### A. Data Storage

Updates to PostgreSQL’s row data store must be immediately reflected in the column store index without degrading the performance of OLTP transactions. Previous works have adopted the Write-Optimized-Storage (WOS) / Read-Optimized-Storage (ROS) approach, where updates are first buffered in WOS in row format and then asynchronously transferred to ROS in columnar format. Unlike these approaches, we only write PostgreSQL’s original Tuple Identifiers (TIDs) into the Insert List (InsL). When transferring data from InsL to ROS, the columnar data values identified by the TIDs are used. For performance reasons, deletions are not performed in-place; instead, a Deletion List (DelL) and a ROS delete-vector are used to immediately hide data that will be physically deleted later. Data in ROS are grouped into units called extents for efficient data management.

We use the same Multi-Version Concurrency Control (MVCC) mechanism used in PostgreSQL to ensure data consistency when transferring data from InsL to ROS, and to handle uncommitted transactions. Only committed transactions' insertions, updates, and deletions are reflected in ROS.

#### B. Query Execution

When the Query Optimizer chooses to execute a query/subquery using the columnar data instead of the traditional row data, the execution is handled by our new columnar data engine. For each query, the necessary portion of data in InsL is temporarily converted to a columnar data format (called Local ROS) and merged with the ROS data for processing, as shown in Figure 2.

The extents are processed in parallel by PostgreSQL’s Dynamic Background Workers. To enable efficient parallel processing, a mechanism that allows sharing of data containing pointers among multiple processes is necessary. However, PostgreSQL’s Dynamic Shared Memory does not support straightforward sharing of pointers due to different mapping locations between processes. To address this, we designed a new shared memory mechanism called Shared Memory Context (SMC). SMC is compatible with PostgreSQL’s memory context interface, allowing pre-existing PostgreSQL routines to be called and newly allocated memory within those routines to be mapped to SMC space. As illustrated in Figure 3, using SMC, the Backend Process and the Dynamic Background Workers can share the necessary data for efficient parallel query processing.

---

### III. Performance Evaluation

Although our evaluation is at a preliminary stage using the DBT-3 benchmark, the results are promising. For example, for query 1 of DBT-3, a speed-up ratio of 50 was achieved when using the column store index compared to PostgreSQL’s original row data, on the same server (a 2-CPU machine with 16 cores).

---

### IV. Conclusion and Future Work

In this paper, we have briefly presented our work in progress on extending the PostgreSQL OSS database system with a column store index to handle OLXP workloads. We introduced new mechanisms to efficiently synchronize inserts, updates, and deletes of row data with the column store indexes and to process them in parallel using a new shared memory mechanism that is fully compatible with PostgreSQL’s memory context interface.

We plan to further evaluate our extensions to PostgreSQL using the CH-benCHmark and some real-world applications.

---

### References

[1] S. Chaudhuri and U. Dayal, “An Overview of Data Warehousing and OLAP Technology,” Proc. VLDB, 1997, pp. 65-74.  
[2] A. Kemper and T. Neumann, “Hyper: A Hybrid OLTP&OLAP Main Memory Database System Based on Virtual Memory Snapshots,” Proc. IEEE ICDE, 2011, pp. 195-206.  
[3] H. Plattner, “The Impact of Columnar In-Memory Databases on Enterprise Systems,” Proc. VLDB, 2014, pp. 1722-1729.  
[4] V. Sikka, F. Färber, W. Lehner, S. K. Cha, T. Peh, and C. Bornhövd, “Efficient Transaction Processing in SAP HANA Database: The End of a Column Store Myth,” Proc. ACM SIGMOD, 2012, pp. 731-741.  
[5] “Oracle Database In-Memory,” Oracle White Paper, October 2014, Available from: http://www.oracle.com/technetwork/database/in-memory/overview/twp-oracle-database-in-memory-2245633.html [retrieved: March, 2015].  
[6] P. Larson, et al., “Enhancements to SQL Server Column Stores,” Proc. ACM SIGMOD, 2013, pp. 1159-1168.  
[7] “PostgreSQL,” Available from: http://www.postgresql.org/ [retrieved: March, 2015].  
[8] K. Knizhnik, “In-Memory Columnar Store extension for PostgreSQL,” Available from: http://www.pgcon.org/2014/schedule/events/643.en.html [retrieved: March, 2015].  
[9] “PostgreSQL Columnar Store for Analytics Workloads,” Citusdata, Available from: http://www.citusdata.com/blog/76-postgresql-columnar-store-for-analytics.  
[10] M. Stonebraker, et al., “C-store: a column-oriented DBMS,” Proc. VLDB, 2005, pp. 553-564.  
[11] Database Test Suite, Available from: http://sourceforge.net/projects/osdldbt/files/dbt3 [retrieved: March, 2015].  
[12] R. Cole, et al., “The mixed workload CH-bencCHmark,” Proc. DBTest, 2011, article no. 8.

---

**Copyright (c) IARIA, 2015. ISBN: 978-1-61208-408-4 52**