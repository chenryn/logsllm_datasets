2. ~/.bash_login
3. ~/.profile
其实 bash 的 login shell 设置只会读取上面三个文件的其中一个， 而读取的顺序则是依照上面的顺序。也就是说，如果 ~/.bash_profile
存在，那么其他两个文件不论有无存在，都不会被读取。 如果 ~/.bash_profile 不存在才会去读取 ~/.bash_login，而前两者都不存在才会读取
~/.profile 的意思。 会有这么多的文件，其实是因应其他 shell 转换过来的使用者的习惯而已。 先让我们来看一下 dmtsai 的
/home/dmtsai/.bash_profile 的内容是怎样呢？
[dmtsai@study ~]$ cat ~/.bash_profile
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then ; eol2 = ;
swtch = ; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V;
flush = ^O; min = 1; time = 0;
....（以下省略）....
我们可以利用 stty -a 来列出目前环境中所有的按键列表，在上头的列表当中，需要注意的是特殊字体那几个， 此外，如果出现 ^ 表示
[Ctrl] 那个按键的意思。举例来说， intr = ^C 表示利用 [ctrl] + c 来达成的。几个重要的代表意义是：
intr : 送出一个 interrupt （中断） 的讯号给目前正在 run 的程序 （就是终止啰！）；
quit : 送出一个 quit 的讯号给目前正在 run 的程序；
erase : 向后删除字符，
kill : 删除在目前指令列上的所有文字；
eof : End of file 的意思，代表“结束输入”。
start : 在某个程序停止后，重新启动他的 output
stop : 停止目前屏幕的输出；
susp : 送出一个 terminal stop 的讯号给正在 run 的程序。
记不记得我们在第四章讲过几个 Linux 热键啊？没错！ 就是这个 stty 设置值内的 intr（[ctrl]+c） / eof（[ctrl]+d） 啰～至于删除字符，就
是 erase 那个设置值啦！ 如果你想要用 [ctrl]+h 来进行字符的删除，那么可以下达：
[dmtsai@study ~]$ stty erase ^h # 这个设置看看就好，不必真的实做！不然还要改回来！
那么从此之后，你的删除字符就得要使用 [ctrl]+h 啰，按下 [backspace] 则会出现 ^? 字样呢！ 如果想要回复利用 [backspace] ，就下达
stty erase ^? 即可啊！ 至于更多的 stty 说明，记得参考一下 man stty 的内容喔！
问：
因为鸟哥的工作经常在 Windows/Linux 之间切换，在 windows 下面，很多软件默认的储存快捷按钮是 [crtl]+s ，所以鸟哥习惯
按这个按钮来处理。 不过，在 Linux 下面使用 vim 时，却也经常不小心就按下 [crtl]+s ！问题来了，按下这个组合钮之后，整个
vim 就不能动了 （整个画面锁死）！ 请问鸟哥该如何处置？
答：
参考一下 stty -a 的输出中，有个 stop 的项目就是按下 [crtl]+s 的！那么恢复成 start 就是 [crtl]+q 啊！因此， 尝试按下 [crtl]+q 应
该就可以让整个画面重新恢复正常咯！
除了 stty 之外，其实我们的 bash 还有自己的一些终端机设置值呢！那就是利用 set 来设置的！ 我们之前提到一些变量时，可以利用 set
来显示，除此之外，其实 set 还可以帮我们设置整个指令输出/输入的环境。 例如记录历史命令、显示错误内容等等。
[dmtsai@study ~]$ set [-uvCHhmBx]
选项与参数：
-u ：默认不启用。若启用后，当使用未设置变量时，会显示错误讯息；
-v ：默认不启用。若启用后，在讯息被输出前，会先显示讯息的原始内容；
-x ：默认不启用。若启用后，在指令被执行前，会显示指令内容（前面有 ++ 符号）
-h ：默认启用。与历史命令有关；
-H ：默认启用。与历史命令有关；