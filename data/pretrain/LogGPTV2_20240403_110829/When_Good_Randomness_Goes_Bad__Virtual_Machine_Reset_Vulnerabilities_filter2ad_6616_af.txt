Figure 9. Comparison of asymmetric cryptographic operations without hedging (“Plain”) and with
hedging (“Hedged”). All values are time in microseconds measured over 1,000 repetitions. “Ratio”
is the median hedged time divided by median plain time.
Plain time (µs)
Hedged time (µs)
Operation
AES128-SHA
DHE-RSA-AES128-SHA
DHE-DSS-AES128-SHA
Median (Min,Mean,Max,Std. Dev) Median (Min,Mean,Max,Std. Dev)
6941 (6875,6989,8380,231)
6968 (6890,7310,11334,920)
52030 (51756,52120,63388,470)
50907 (50567,50959,64224,471)
52828 (51150,52618,62841,735)
51067 (50011,51010,62020,673)
Figure 10. Measuring TLS connection time without hedging (“Plain”) and with hedging (“Hedged”).
Measurements were performed on the client over 1,000 executions. The server had 1024(cid:173)bit RSA and
DSA keys.
erations that consume this randomness are fragile in the face
of the ensuing randomness reuse.
Our second contribution was dealing with this latter
problem, the endemic fragility of routine cryptographic op-
erations when given bad randomness. We developed a gen-
eral framework for hedging cryptographic operations. Our
hedging approach is simple and incrementally deployable,
and it provides provably better resistance to RNG failures
for important primitives. As our implementation within
OpenSSL indicates, hedging is fast.
Moreover, we feel that hedging is needed. Generating
randomness is inherently complex, as indicated by a long
history of RNG failures. Future RNG problems will almost
certainly arise, and, as we exempliﬁed by our results on VM
reset vulnerabilities, new technologies create new problems.
Ensuring that cryptography is built to provide as much se-
curity as possible for any given quality of randomness will
effectively limit the damage done by future RNG failures.
systems running httperf [6] and administered them using the
autobench tool [4]. For each rate httperf attempted 3,000
connections with a timeout of 1 second. As can be seen
in the graphs, the server was quickly saturated both when
performing RSA signing with DHE and DSA signing with
DHE. The former became saturated slightly sooner than the
latter, perhaps due to RSA’s more expensive signing opera-
tion. In both cases the hedged server performed as well as
the plain server. Note that the server in this experiment was
entirely unoptimized, and so this experiment may not be in-
dicative of a performance gap on a fully optimized server.
Nevertheless it reveals that for an “out-of-the-box” TLS de-
ployment there is no signiﬁcant overhead when hedging.
8. Conclusions
This paper had two main contributions. First, we re-
vealed the ﬁrst virtual machine reset vulnerabilities affect-
ing deployed software. Given repeated use of a VM snap-
shot, we showed how attackers can compromise TLS ses-
sions or even extract a server’s secret DSA authentication
key. The vulnerabilities stem from a combination of fac-
tors. First, applications cache to-be-used randomness long
before consumption or do not add enough new entropy to
their RNGs right before use. Second, the cryptographic op-
Plain
Hedged
)
s
/
n
n
o
c
(
t
u
p
h
g
u
o
r
h
T
35
30
25
20
15
10
5
0
Plain
Hedged
)
s
/
n
n
o
c
(
t
u
p
h
g
u
o
r
h
T
35
30
25
20
15
10
5
0
0
10
20
30
40
50
0
10
20
30
40
50
Agg. offered load (conn/s)
Agg. offered load (conn/s)
Figure 11. Saturating an Apache 2 server (in default conﬁguration) with HTTPS requests when using
plain mod ssl and hedged mod ssl. (Left) Using RSA signing with ephemeral Difﬁe(cid:173)Hellman (DHE(cid:173)
RSA(cid:173)AES128(cid:173)SHA). (Right) Using DSA signing with ephemeral Difﬁe(cid:173)Hellman (DHE(cid:173)DSA(cid:173)AES128(cid:173)
SHA).
Acknowledgements
Thomas Ristenpart
is supported by Mihir Bellare’s
NSF grant CNS–0627779 and a gift from Intel Corpora-
tion. Scott Yilek is supported by Daniele Micciancio’s
NSF grant CNS–0831536 and Mihir Bellare’s NSF grant
CNS–0627779.
References
[1] http://www.rackspacecloud.com/.
[2] http://csrc.nist.gov/groups/ST/hash/
sha-3/index.html.
[3] Amazon EC2. http://aws.amazon.com/ec2/.
[4] Autobench.
http://www.xenoclast.org/
autobench/.
[5] CLOC. http://cloc.sourceforge.net/.
[6] httperf.
http://www.hpl.hp.com/research/
linux/httperf/.
[7] Microsoft azue.
http://www.microsoft.com/
azure/.
[8] The TLS Protocol, Version 1.0. http://www.ietf.
org/rfc/rfc2246.txt.
[9] The TLS Protocol, Version 1.2. http://tools.ietf.
org/html/rfc5246.
[10] VirtualBox. http://www.virtualbox.org/.
[11] VirtualPC.
http://www.microsoft.com/
windows/virtual-pc/.
[12] VMWare. http://www.vmware.com.
[13] Vulnerability note vu925211: Debian and ubuntu openssl
packages contain a predictable random number generator.
https://www.kb.cert.org/vuls/id/925211.
[14] FIPS PUB 186-3.
Digital signature standard (DSS).
http://csrc.nist.gov/publications/fips/
fips186-3/fips_186-3.pdf, 2009.
[15] ISO/IEC 9797. Data cryptographic techniques – data in-
tegrity mechanism using a cryptographic check function em-
ploying a block cipher algorithm, 1989.
[16] Paolo Abeni, Luciano Bello, and Maximiliano Bertacchini.
Exploiting DSA-1571: How to break PFS in SSL with EDH,
July 2008. http://www.lucianobello.com.ar/
exploiting_DSA-1571/index.html.
[17] Andrew Becherer, Alex Stamos, and Nathan Wilcox.
trendy
BlackHat USA 2009, Slides available
http://www.slideshare.net/astamos/
Cloud computer
new parade.
from
cloud-computing-security.
security:
Raining on the
[18] Mihir Bellare. New proofs for nmac and hmac: Security
In CRYPTO 2006. Springer,
without collision-resistance.
2006.
[19] Mihir Bellare, Zvika Brakerski, Moni Naor, Thomas Risten-
part, Gil Segev, Hovav Shacham, and Scott Yilek. Hedge
public-key encryption: How to protect against bad random-
ness. In ASIACRYPT 2009. Springer, 2009. To Appear.
[20] Mihir Bellare, Ran Canetti, and Hugo Krawczyk. Key-
ing hash functions for message authentication. In CRYPTO
1996, pages 1–15. Springer, 1996.
[21] Mihir Bellare, Shaﬁ Goldwasser, and Daniele Micciancio.
“pseudo-random” number generation within cryptographic
algorithms: The dss case. In CRYPTO 1997. Springer, 1997.
[22] Mihir Bellare and Tadayoshi Kohno. A theoretical treatment
of related-key attacks: Rka-prps, rka-prfs, and applications.
In EUROCRYPT 2003, pages 491–506. Springer, 2003.
[23] Mihir Bellare and Phillip Rogaway. Random oracles are
practical: A paradigm for designing efﬁcient protocols. In
ACM Conference on Computer and Communications Secu-
rity – CCS 1993, pages 62–73. ACM, 1993.
[24] Mihir Bellare and Phillip Rogaway. Entity authentication
In CRYPTO 1993, pages 232–249.
and key distribution.
Springer, 1994.
[25] Mihir Bellare and Phillip Rogaway. Code-based game-
playing proofs and the security of triple encryption. In EU-
ROCRYPT 2006. Springer, 2006.
[26] Daniele R.L. Brown. A weak randomizer attack on RSA-
OAEP with e=3. IACR ePrint Archive, 2005.
[27] Ran Canetti and Hugo Krawczyk. Analysis of key-exchange
protocols and their use for building secure channels. In EU-
ROCRYPT 2001, pages 453–474, 2001.
[28] Leo Dorrendorf, Zvi Gutterman, and Benny Pinkas. Crypt-
analysis of the windows random number generator. In CCS
2007. ACM, 2007.
[29] Amos Fiat and Adi Shamir. How to prove yourself: Prac-
In
tical solutions to identiﬁcation and signature problems.
CRYPTO 1986, pages 186–194. Springer, 1986.
[30] Taher El Gamal. A public key cryptosystem and a signa-
ture scheme based on discrete logarithms. In CRYPTO 1984,
pages 10–18. Springer, 1985.
[31] Tal Garﬁnkel and Mendel Rosenblum. When virtual is harder
than real: Security challenges in virtual machine based com-
puting environments. In Proceedings of the 10th Workshop
on Hot Topics in Operating Systems – HotOS-X, May 2005.
[32] Ian Goldberg and David Wagner. Randomness and the
netscape browser. Dr. Dobb’s Journal, January 1996.
[33] Shaﬁ Goldwasser and Silvio Micali. Probabilistic encryp-
tion. Journal of Computer and System Sciences, 28(2):270–
299, 1984.
[34] Shaﬁ Goldwasser, Silvio Micali, and Ron Rivest. A digital
signature scheme secure against adaptive chosen-message at-
tacks. SIAM J. Computing, 17(2):281–308, 1988.
[35] Zvi Gutterman and Dahlia Malkhi. Hold your sessions:
In CT-RSA 2005.
An attack on java session-id generation.
Springer, 2005.
[36] Zvi Gutterman, Benny Pinkas, and Tzachy Reinman. Analy-
sis of the linux random number generator. In Symposium on
Security and Privacy 2006. IEEE, 2006.
[37] Seny Kamara and Jonathan Katz. How to encrypt with a
malicious random number generator. In FSE 2008. Springer,
2008.
[38] Jonathan Katz and Nan Wang. Efﬁciency improvements for
In CCS
signature schemes with tight security reductions.
2003. ACM.
[39] Brian A. LaMacchia, Kristin Lauter, and Anton Mityagin.
Stronger security of authenticated key exchange. In ProvSec
2007, pages 1–16. Springer, 2007.
[40] David A. McGrew and John Viega. The security and per-
formance of the galois/counter mode (gcm) of operation. In
INDOCRYPT 2004, pages 343–355. Springer, 2004.
[41] B. Moeller. Security of cbc ciphersuites in ssl/tls: Prob-
http://www.openssl.
lems and countermeasures.
org/˜bodo/tls-cbc.txt.
[42] Markus Mueller. Debian OpenSSL predictable PRNG brute-
force SSH exploit, May 2008. http://milw0rm.com/
exploits/5622.
[43] Mark R.V. Murray. An implementation of the yarrow prng
for freebsd. In BSDCon 2002. USENIX, 2002.
[44] NIST. Recommendations for block cipher modes of op-
eration. http://csrc.nist.gov/publications/
nistpubs/800-38a/sp800-38a.pdf, 2001.
[45] Khaled Ouaﬁ and Serge Vaudenay. Smashing SQUASH-0.
In EUROCRYPT 2009. Springer, 2009.
[46] Phillip Rogaway. Nonce-based symmetric encryption.
FSE 2004, volume 3017, pages 348–359. Springer, 2004.
In
[47] Phillip Rogaway, Mihir Bellare, and John Black. Ocb: A
block-cipher mode of operation for efﬁcient authenticated
encryption. ACM Trans. Inf. Syst. Secur., 6(3):365–403,
2003.
[48] Phillip Rogaway and Thomas Shrimpton. Deterministic
authenticated-encryption: A provable-security treatment of
the key-wrap problem.
In EUROCRYPT 2006. Springer,
2006.
[49] Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu. Finding
In CRYPTO 2005. Springer,
collisions in the full SHA-1.
2005.
[50] M. Wegman and L. Carter. New hash functions and their use
in authentication and set equality. J. of Comp. and System
Sciences, 22:265–279, 1981.
[51] Robert Woolley, Mark Murray, Maxim Dounin, and Ruslan
arc4random predictable sequence vulnerability.
Ermilov.
http://security.freebsd.org/advisories/
FreeBSD-SA-08:11.arc4random.asc, 2008.
[52] Scott Yilek. Resettable public-key encryption: How to en-
crypt on a virtual machine. In Topics in Cryptology – CT-RSA
2010. Springer, 2010. To Appear.
[53] Scott Yilek, Eric Rescorla, Hovav Shacham, Brandon En-
right, and Stefan Savage. When Private Keys are Public: Re-
sults from the 2008 Debian OpenSSL Vulnerability. In IMC
2009, pages 15–27. ACM, 2009.
A. DSA Key Recovery Attacks
We review the Digital Signature Algorithm (DSA) [14].
For simplicity, we focus on the 1024-bit case. Let p be a
1024-bit prime, q a 160-bit prime that divides p − 1, and g
an integer with order q mod p. These are the parameters.
The private key is chosen as a random x ∈ Zq, and the
public key is y = gx mod p.
To sign a message M , ﬁrst hash M into a 160-bit value
H(M ). Then choose a random value k ∈ Zq and compute
r = (gk mod p) mod q and s = (k−1(H(M ) + xr))
mod q. The signature is (r, s), a pair of at most 160-bit val-
ues. We omit the description of the veriﬁcation algorithm.
DSA is believed to be a secure signature scheme, how-
ever it is well-known that if the randomness k is known or
even generated by some types of weak RNGs, then an ad-
versary can extract the signer’s secret key [21].
It is also the case that if an adversary sees two signatures
that use the same k for different messages, then he can efﬁ-
ciently extract the secret key. To see this, consider two sig-
natures (r, s) and (r, s′) over messages M and M ′ hashing
to distinct values H(M ) and H(M ′), respectively. An ad-
versary can then compute k = (H(M )−H(M ′))(s−s′)−1
mod q.