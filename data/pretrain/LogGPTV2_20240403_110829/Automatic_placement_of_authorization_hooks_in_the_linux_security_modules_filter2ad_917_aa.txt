# Automatic Placement of Authorization Hooks in the Linux Security Modules Framework

**Authors:**
- Vinod Ganapathy, University of Wisconsin
- Trent Jaeger, Pennsylvania State University
- Somesh Jha, University of Wisconsin

## Abstract
We introduce a technique for the automatic placement of authorization hooks within the Linux Security Modules (LSM) framework. LSM is a generic framework that enables diverse authorization policies to be enforced by the Linux kernel. It consists of a kernel module that encapsulates an authorization policy and hooks placed at appropriate locations in the Linux kernel. The kernel enforces the authorization policy using these hook calls. Currently, hooks are manually placed in the kernel, which is both tedious and prone to security vulnerabilities.

Our technique uses static analysis of the Linux kernel and the kernel module to automate the placement of hooks. Given a non-hook-placed version of the Linux kernel and a kernel module implementing an authorization policy, our method infers the set of operations authorized by each hook and the set of operations performed by each function in the kernel. This information is used to determine the set of hooks required to guard each kernel function. We describe the design and implementation of a prototype tool called TAHOE (Tool for Authorization Hook Placement) that utilizes this technique. We demonstrate the effectiveness of TAHOE by applying it to the LSM implementation of security-enhanced Linux (SELinux). Although our focus is on hook placement for LSM, our technique can be extended to other LSM-like architectures.

**Categories and Subject Descriptors:**
- D.4.6 [Operating Systems]: Security and Protectionâ€”Access Controls

**General Terms:**
- Algorithms, Security

**Keywords:**
- Hook placement, static analysis, LSM, SELinux

## 1. Introduction
The Linux Security Modules (LSM) framework [22] is a generic framework that allows various authorization policies to be enforced by the Linux kernel. Its goal is to ensure that security-sensitive operations are only performed by authorized users. LSM consists of a reference monitor, which encapsulates the authorization policy, and hooks that define the interface presented by the reference monitor. These hooks are placed at multiple locations within the Linux kernel to mediate security-sensitive operations. Each hook call results in an authorization query to the reference monitor, and the operation is performed only if the query succeeds.

Figure 1 illustrates a hook placed in the Linux kernel in the LSM implementation of security-enhanced Linux (SELinux) [15], a popular mandatory access control (MAC) based authorization policy. The security-sensitive operation, directory removal, is accomplished by the function call `dir->i_op->rmdir` on line (V5). The hook on line (V3), `selinux_inode_rmdir`, checks whether the process requesting the directory removal is authorized by the SELinux policy. If the hook call succeeds (by returning 0), the directory removal proceeds; otherwise, it fails. Proper placement of the hook is crucial to prevent unauthorized operations.

```c
(V1) int vfs_rmdir(struct inode *dir, struct dentry *dentry) {
(V2) ...
(V3) err = selinux_inode_rmdir(dir, dentry);
(V4) if (!err) { ...
(V5) }...
(V6) dir->i_op->rmdir(dir, dentry);
}
```

**Figure 1: A hook placed in the Linux kernel in the LSM implementation of SELinux.**

The LSM architecture ensures a clean separation between the kernel and the policy-specific reference monitor code, implemented as a loadable kernel module. This modularity and extensibility allow developers to enforce new security policies by writing new reference monitors and placing hooks appropriately. LSM also supports coexistence of different reference monitors within the kernel, enabling the enforcement of multiple security policies. These features have made LSM the preferred framework for implementing MAC-based authorization policies such as SELinux and Domain and Type Enforcement [2]. LSM has been integrated into the mainstream Linux kernel (version 2.6 onwards).

There is growing interest in extending LSM-like reference monitoring to user-level applications. Many applications, such as X Windows, web servers, and database servers, support multiple users simultaneously. For example, an X server allows multiple users with different security levels to display clients. Hooks placed in the operating system may be insufficient to enforce application-level policies. For instance, a policy that "a cut-and-paste operation from a high-security client to a low-security client is disallowed" is better enforced by the X server than the operating system. Efforts are underway [12] to secure X Windows by placing hooks to an LSM-like reference monitor within the X server. Java's security architecture, which places calls to check access permissions to security-sensitive objects, is similar to LSM. Thus, enforcing authorization policies by placing reference monitor hooks in user-level applications is becoming common practice.

Currently, hook placement is often done informally and manually, leading to several drawbacks:

1. **Security Holes:** Inadvertent bugs due to improper hook placement can result in security-sensitive operations being performed without proper authorization. Research has shown that inadequate hook placement can lead to exploitable security holes [23, 10].
   
2. **Inextensibility to New Policies:** Manual reasoning is required to place hooks for each new security policy, making the process cumbersome and error-prone.
   
3. **Inextensibility to Emerging Applications:** Recent proposals for developing MAC authorization policies for user-level applications [12, 21] also require manual effort to determine hook placement.

While static and runtime verification techniques [10, 23] address some of these issues, they do not solve the problems of inextensibility to new policies and emerging applications.

In this paper, we present a technique for the automatic placement of authorization hooks. Our exposition and evaluation focus on the placement of LSM authorization hooks in the kernel, but the concepts extend to any system/reference monitor pair that conforms to an LSM-like architecture. Our technique requires two inputs: the Linux kernel and the reference monitor (the kernel module that implements it). It analyzes these inputs to identify locations in the kernel where hooks must be placed to correctly authorize security-sensitive operations.

The key idea behind our technique is to leverage semantic information embedded in the source code of the hooks and the Linux kernel. Static analysis determines the set of operations authorized by each hook and the set of operations performed by each kernel function. The results are then combined to construct an authorization graph, which relates each kernel function to the set of hooks that must protect it. With the authorization graph, hook placement is straightforward: insert the necessary hooks at each location in the kernel where a kernel function is called.

This technique addresses the aforementioned problems. First, it ensures correctness by construction, as it uses the set of operations performed by a kernel function to determine the set of hooks that must guard it. Second, the general-purpose nature of the analysis makes it easily extensible to new security policies and emerging applications.

**Contributions:**
- A technique for the automatic placement of authorization hooks in the Linux kernel.
- The design and implementation of a prototype tool, TAHOE, that uses this technique.
- Demonstration of the efficacy of our technique by applying TAHOE to the LSM implementation of SELinux.
- Evaluation of the hook placement generated by TAHOE against the existing hook placement in the LSM implementation of SELinux.

**Paper Organization:**
- Section 2 introduces the conceptual operations used throughout the paper.
- Section 3 presents the algorithms used by TAHOE.
- Section 4 discusses our experience with TAHOE.
- Section 5 reviews related research.
- Section 6 concludes the paper.

## 2. Conceptual Operations
The LSM framework aims to ensure that security-sensitive operations on resources are only performed by authorized entities. It achieves this by placing hooks before kernel functions that perform such operations. For example, in Figure 1, the security-sensitive operation being authorized is directory removal, and the affected resources are the inodes of the directory being removed and the directory from which it is being removed.

TAHOE works with the source code of a kernel module containing the source code of authorization hooks, such as the SELinux hooks, and a non-hook-placed version of the kernel. It analyzes these inputs independently and correlates the results to determine hook placement. The unifying theme is security-sensitive operations: a hook authorizes such operations, and the kernel performs them. To combine the results of hook analysis and kernel analysis, it suffices to determine the security-sensitive operations authorized by each hook and the security-sensitive operations performed by each kernel function. We refer to these operations as "conceptual operations."

The analyses described in the rest of the paper assume that the set of conceptual operations is known. We used the set of conceptual operations used by the LSM implementations of popular MAC policies, including SELinux and Domain and Type Enforcement [2]. This set (of size 504) is comprehensive and includes generic operations on resources, such as reading from, writing to, or executing a file. Conceptual operations are depicted using suggestive names, such as `FILE_WRITE`, `FILE_READ`, and `FILE_EXECUTE`. The analyses used by TAHOE are parameterized by the set of conceptual operations, and more operations can be added as needed. Changes to the set of conceptual operations do not affect the algorithms presented in the paper.

## 3. Authorization Hook Placement Using Static Analysis
Figure 2 shows the architecture of TAHOE. It analyzes the source code of the Linux kernel (with no hooks placed) and the kernel module containing the source code of hooks, and outputs a hook-placed kernel. To achieve this, it combines the results of hook analysis and kernel analysis.