title:Automatic placement of authorization hooks in the linux security modules
framework
author:Vinod Ganapathy and
Trent Jaeger and
Somesh Jha
Automatic Placement of Authorization Hooks
in the Linux Security Modules Framework
Vinod Ganapathy
University of Wisconsin
PI:EMAIL
Trent Jaeger
Pennsylvania State University
PI:EMAIL
Somesh Jha
University of Wisconsin
PI:EMAIL
ABSTRACT
We present a technique for automatic placement of authorization
hooks, and apply it to the Linux security modules (LSM) frame-
work. LSM is a generic framework which allows diverse autho-
rization policies to be enforced by the Linux kernel. It consists of
a kernel module which encapsulates an authorization policy, and
hooks into the kernel module placed at appropriate locations in the
Linux kernel. The kernel enforces the authorization policy using
hook calls. In current practice, hooks are placed manually in the
kernel. This approach is tedious, and as prior work has shown, is
prone to security holes.
Our technique uses static analysis of the Linux kernel and the
kernel module to automate hook placement. Given a non-hook-
placed version of the Linux kernel, and a kernel module that imple-
ments an authorization policy, our technique infers the set of opera-
tions authorized by each hook, and the set of operations performed
by each function in the kernel. It uses this information to infer the
set of hooks that must guard each kernel function. We describe the
design and implementation of a prototype tool called TAHOE (Tool
for Authorization Hook Placement) that uses this technique. We
demonstrate the effectiveness of TAHOE by using it with the LSM
implementation of security-enhanced Linux (SELinux). While our
exposition in this paper focuses on hook placement for LSM, our
technique can be used to place hooks in other LSM-like architec-
tures as well.
Categories and Subject Descriptors: D.4.6 [Operating Systems]:
Security and Protection—Access Controls
General Terms: Algorithms, Security
Keywords: Hook placement, static analysis, LSM, SELinux
1.
INTRODUCTION
The Linux security modules (LSM) framework [22] is a generic
framework which allows diverse authorization policies to be en-
forced by the Linux kernel.
Its goal is to ensure that security-
sensitive operations are only performed by users who are autho-
rized to do so. It consists of a reference monitor [1], which encap-
sulates an authorization policy to be enforced, and hooks, which
deﬁne the interface that the reference monitor presents. Calls to
Supported by ONR contracts N00014-01-1-0796 and N00014-01-1-0708.
This work was done when Trent Jaeger was at IBM Research.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’05, November 7–11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.
these hooks are placed at several locations within the Linux kernel,
so that they mediate security-sensitive operations performed by the
kernel. Each hook call results in an authorization query to the refer-
ence monitor. The kernel performs the security-sensitive operation
only if the authorization query succeeds.
Figure 1 shows a hook placed in the Linux kernel in the LSM
implementation of security-enhanced Linux (SELinux) [15], a pop-
ular mandatory access control (MAC) based [16] authorization pol-
icy. The security-sensitive operation, directory removal, is accom-
plished by the function call dir->i op->rmdir on line (V5). The
hook placed on line (V3), selinux inode rmdir, checks that the
process that requests the directory removal is authorized to do so
by the SELinux policy; directory removal succeeds only if the hook
call succeeds, in this case, by returning 0. Observe that it is crucial
that the hook be placed at line (V3); in the absence of this hook,
directory removal will succeed even for processes that are not au-
thorized to do so by the SELinux policy.1
(V1)int vfs rmdir(struct inode *dir,
struct dentry *dentry) {
(V2)
(V3)
(V4)
(V5)
(V6)
...
err=selinux inode rmdir(dir,dentry);
if (!err) { ...
}...}
dir->i op->rmdir(dir,dentry);
Figure 1: A hook placed in the Linux kernel in the LSM imple-
mentation of SELinux.
The architecture of LSM ensures a clean separation between the
kernel and the policy-speciﬁc reference monitor code, which is im-
plemented as a loadable kernel module. It also offers the advantage
of being modular and extensible: to enforce a new security pol-
icy, a developer writes a new reference monitor and ensures that
hooks are placed properly within the kernel. Finally, it allows ref-
erence monitors implementing different policies to co-exist within
the kernel: the kernel enforces a security policy by loading the ker-
nel module that implements the corresponding reference monitor.
These features have lead LSM to become the vehicle-of-choice for
the implementation of several popular MAC-based authorization
policies, such as SELinux and Domain and Type enforcement [2].
It has also been incorporated into the mainstream Linux kernel (ver-
sion 2.6 onwards).
There is emerging interest to enable LSM-like reference mon-
itoring in user-level applications as well. The reason is that sev-
eral applications, such as X Windows, web-servers and database-
servers, support multiple users at the same time. For example,
1While the code fragment shown in Figure 1 itself is not atomic, the code that invokes
vfs rmdir obtains a semaphore that prevents other processes from modifying the
resources pointed to by dir and dentry. This ensures that the security-sensitive
operation dir->i op->rmdir is performed on the same resources which were au-
thorized by selinux inode rmdir.
an X server allows multiple users, possibly with different security-
levels, to display clients simultaneously. Hooks placed in the oper-
ating system are often insufﬁcient to enforce authorization policies
at the application-level. For example, the policy that “a cut-and-
paste operation from a high-security client to a low-security client
is disallowed” is better enforced by the X server than the operating
system, because the operating system is unaware of the cut-and-
paste operation, which is speciﬁc to X Windows. In fact, efforts are
underway [12] to secure X Windows by placing hooks to an LSM-
like reference monitor within the X server. The recent release of
a policy management infrastructure for user-level processes [21] is
intended to enable the development of reference monitors for any
application that would beneﬁt. We also note that Java’s security
architecture is akin to LSM, where calls are placed to check access
permissions to security-sensitive objects [7]. Thus, enforcement of
authorization policies by placing reference monitor hooks in user-
level applications is becoming common practice.
In current practice, the decision on where to place hooks is of-
ten made informally, and hooks are placed manually at locations
deemed appropriate in the Linux kernel or user-level application.
This process suffers from several drawbacks:
1. Inadvertent bugs, leading to security holes. Prior research has
shown security holes due to improper hook placement in the
Linux kernel. In particular, Zhang et al. [23] demonstrate that
inadequate placement of hooks results in security-sensitive op-
erations being performed without the appropriate authorization
query being posed to the reference monitor. Jaeger et al. [10]
also demonstrate similar bugs by comparing the consistency of
hook placements along different paths in the kernel. These bugs
lead to potentially exploitable security holes.
2. Inextensibility to new security policies. Manual reasoning is
needed to place hooks for each new security policy developed.
The Linux-2.6 kernel somewhat ameliorates the effort needed
by placing hooks to a dummy reference monitor at pre-deﬁned
locations in the kernel. The idea is that developers can tailor the
code for hooks to suit speciﬁc security policies. However, this
approach is still problematic. First, care is required to ensure
that each hook call indeed authorizes the security-sensitive op-
erations that its pre-deﬁned placement intends to. Second, it is
fairly common practice to add new hooks to implement security
policies for which pre-deﬁned hook placement does not sufﬁce.
Manual reasoning is required to determine placement points for
each new hook.
3. Inextensibility to emerging applications. As mentioned earlier,
recent proposals [12, 21] for developing MAC authorization poli-
cies for user-level applications are also based upon LSM-like ar-
chitectures. As with LSM, these proposals require manual effort
to determine hook placement.
While static and runtime veriﬁcation techniques [10, 23] have
been proposed to solve the ﬁrst problem mentioned above, they do
not solve the second and third problems.
In this paper, we demonstrate a technique for automatic place-
ment of authorization hooks (i.e., hooks to a reference monitor that
encapsulates an authorization policy). While our exposition and
evaluation in this paper is restricted to placement of LSM autho-
rization hooks in the kernel, the concepts we present extend nat-
urally to any system/reference monitor pair that conforms to an
LSM-like architecture. Our technique requires two inputs:
the
Linux kernel, and the reference monitor (i.e., the kernel module
that implements it) which contains the source code for authoriza-
tion hooks. It analyzes them and identiﬁes locations in the kernel
where hooks must be placed so that security-sensitive operations
are authorized correctly.
The key idea behind our technique is to leverage semantic infor-
mation embedded in the source code of the hooks and the Linux
kernel. It uses static analysis to determine the set of operations au-
thorized by each hook. A similar analysis on the kernel-side deter-
mines the set of operations performed by each kernel function. The
results of hook analysis and kernel analysis are then merged to con-
struct an authorization graph. An authorization graph relates each
kernel function to the set of hooks that must protect it. With the
authorization graph in hand, hook placement is straightforward: at
each location in the kernel where a kernel function is called, insert
hooks (as determined by the authorization graph) that must protect
the function. This technique addresses all the problems discussed
above. First, because we use the set of operations performed by a
kernel function to obtain the set of hooks that must guard it, we en-
sure correctness by construction. Second, because our analysis is
general-purpose and analyzes both hook and kernel code, it extends
easily to new security policies and emerging applications alike.
Contributions: In summary, the main contribution of this paper
is a technique for automatic placement of authorization hooks in
the Linux kernel. We present the design and implementation of a
prototype tool called TAHOE that uses this technique. We demon-
strate the efﬁcacy of our technique by using TAHOE with the im-
plementation of hooks from the LSM implementation of SELinux.
In particular, we show how TAHOE precisely recovers the set of op-
erations authorized by each hook from the above implementation,
and the set of operations authorized by the Linux kernel. It uses this
information to place hooks in the Linux kernel by constructing the
authorization graph. We evaluate the hook placement that TAHOE
generates by comparing it against the existing hook placement in
the LSM implementation of SELinux.
Paper Organization: In the following section, we introduce some
concepts used throughout the paper. We then present the algo-
rithms used by TAHOE in Section 3, and discuss our experience
with TAHOE in Section 4. We review related research in Section 5
and conclude in Section 6.
2. CONCEPTUAL OPERATIONS
The goal of the LSM framework is to ensure that security-sensitive
operations on resources are only performed by entities who are au-
thorized to do so. It achieves this by placing hooks, which pose
authorization queries to a reference monitor, before kernel func-
tions that perform such security-sensitive operations. For instance,
in Figure 1, the security sensitive operation being authorized is di-
rectory removal, and the resources affected by this operation are
the inodes of the directory being removed, and the directory from
which it is being removed.
Because TAHOE seeks to place hooks, it works with the source
code of a kernel module containing the source code of authorization
hooks, such as the kernel module implementing SELinux hooks,
and a non-hook-placed version of the kernel. As discussed earlier,
TAHOE analyzes each of these inputs independently, and correlates
the results to determine hook placement. Observe that security-
sensitive operations are a unifying theme of both inputs—a hook
authorizes security-sensitive operations, and the kernel performs
them. Thus, to combine the results of hook analysis and kernel
analysis, it sufﬁces to determine the security-sensitive operations
authorized by each hook, and the security-sensitive operations per-
formed by each kernel function. We use the term conceptual oper-
ations to refer to such security-sensitive operations.
The analyses described in the rest of this paper assume that the
set of conceptual operations is known. For the analyses described
here, we used the set of conceptual operations used by the LSM
implementations of popular MAC policies, including SELinux and
Domain and Type Enforcement [2]. This set (of size 504) is fairly
comprehensive, and includes generic operations on resources, such
as reading from, writing to, or executing a ﬁle. We expect that
this set will ﬁnd use in the analysis of other LSM-like architectures
as well. Conceptual operations are depicted in the rest of this pa-
per using suggestive names, such as FILE WRITE, FILE READ and
FILE EXECUTE, corresponding, respectively to writing to, reading
from and executing a ﬁle. We note that the analyses used by TAHOE
are parameterized by the set of conceptual operations, and more
conceptual operations can be added as the need arises. Changes to
the set of conceptual operations does not change any of the algo-
rithms that we present in the paper.
3. AUTHORIZATION HOOK PLACEMENT
USING STATIC ANALYSIS
Figure 2 shows the architecture of TAHOE. It analyzes the source
code of the Linux kernel (with no hooks placed), and the kernel
module containing source code of hooks, and outputs a hook-placed
kernel. To do so, it combines the results of hook analysis and ker-