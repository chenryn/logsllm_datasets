then there exist (Ps,C)
then (Psσ
(P(cid:2)
(Σ(cid:2)
trc = trsΣ(cid:2) and Φ(cid:2) = Φ(C(cid:2))σ
Completeness : if (Σ, σ) ∈ Sol (C) and (Psσ, Φ(C)σ) trc=⇒c
s,C(cid:2)) and
= P(cid:2)
(cid:2),
sσ
trs=⇒s (P(cid:2)
(cid:2)) ∈ Sol (C(cid:2)) such that Σ ⊆ Σ(cid:2), P(cid:2)
s,C(cid:2)) and (Σ(cid:2)
c, Φ(cid:2)),
, σ
(cid:2)
, σ
, Φ(C(cid:2))σ
(cid:2)
, Φ(C)σ
(cid:2)↓
c
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
ε−→s (P ∪ {{Q1}}, (Φ, D, E1 ∧ σ))
(P ∪ {{if u = v then Q1 else Q2}}, (Φ, D, E1))
(P ∪ {{u(x).Q}}, (Φ, D, E1)) Y (X)−−−→s (P ∪ {{Q}}, (Φ, D ∧ X (cid:20)? x ∧ Y (cid:20)? y, E1 ∧ σ))
(P ∪ {{u(cid:5)t(cid:6).Q}}, (Φ, D, E1)) Y (cid:4)axn(cid:5)
if σ ∈ mguR(uμ↓ =? vμ↓)
if σ ∈ mguR(y =? uμ↓) and X, Y ∈ X 2
:|Φ|
−−−−→s (P ∪ {{Q}}, (Φ ∪ {axn (cid:9)→ tσ↓}, D ∧ Y (cid:20)? y, E1 ∧ σ))
if σ ∈ mguR(y =? uμ↓, tμ↓ =? tμ↓), y is fresh, Y ∈ X 2
:n and n = |Φ| + 1
Figure 4: Some rules of the symbolic semantics (where μ = mgu(E1|=))
(S-THEN)
(S-IN)
(S-OUT)
b}}
Pb,0 = {{P
Φb,0 = ∅
Db,0 = ∅
b,0 = ∅
E
(cid:2)(cid:2)
1
Y (X)
(cid:3)(cid:3)
if proj2(x) = b then c(cid:4)0(cid:5)
else c(cid:4)proj2(x)(cid:5)
x ∧ Y (cid:10)?
c
y
Pb,1 =
Φb,1 = ∅
Db,1 = X (cid:10)?
b,1 = y =?
E
1
ε
Pb,2 = {{c(cid:4)0(cid:5)}}
Φb,2 = ∅
Db,2 = Db,1
E
1
1
b,2 = E
b,1 ∧ x =? (cid:4)x1, b(cid:5)
ε
Pb,3 = {{c(cid:4)proj2(x)(cid:5)}}
Φb,3 = ∅
Db,3 = Db,1
E
1
b,3 = E
1
b,1 ∧ ∀x1.x (cid:15)=? (cid:4)x1, b(cid:5)
Z(cid:4)ax1(cid:5)
Pb,4 = {{0}}
Φb,4 = {ax1 (cid:12)→ 0}
Db,4 = Db,2 ∧ Z (cid:10)?
b,2 ∧ z =?
1
b,4 = E
E
Z(cid:4)ax1(cid:5)
Pb,5 = {{0}}
Φb,5 = {ax1 (cid:12)→ x3}
Db,5 = Db,3 ∧ Z (cid:10)?
z
b,3 ∧ z =?
1
b,5 = E
E
c
∧ x =? (cid:4)x2, x3(cid:5)
Figure 5: Symbolic execution tree of P b, b ∈ {0, 1}
z
c
1
1
5. Complexity upper bounds
As non-equivalence is not a simple structural property,
symbolic trees alone are not sufﬁcient to decide dynamic
equivalences. This is the motivation of our novel proof tool,
partition trees. Our proof scenario is the following:
1) we show that equivalence of two processes rephrases
to a simple condition on their partition tree T ;
2) we construct T so that its nodes—which contain sym-
bolic processes—have solutions of exponential size.
1 and 2 justify that, whenever two processes are not equiv-
alent, there exists a concrete witness of non-equivalence
of exponential size. This naturally leads to a coNEXP
procedure for trace equivalence and labelled bisimilarity.
5.1. Most general solutions
Similarly to mgu’s, we deﬁne mgs’—most general
solutions—of a constraint system, acting as solutions of
minimal size. For that, if π is a predicate on second-order
substitutions stable under domain extension—meaning that
π(Σ) and Σ ⊆ Σ(cid:2) entails π(Σ(cid:2))—we consider the set of
solutions of a constraint system C satisfying π:
Sol π(C) = {(Σ, σ) ∈ Sol (C) | π(Σ)}
537
Deﬁnition 11. The most general solutions of C satisfying
π, denoted mgsπ(C), is the set of substitutions Σ such that:
1) img(Σ) ⊆ T (F,Npub ∪ AX ∪ X 2) and dom(Σ) ⊆
vars(C) ∩ X 2;
2) instantiating by fresh public names yields a solution:
for all bijective mapping Σ(cid:2) from the second-order vari-
ables of vars(C, Σ) (cid:2) dom(Σ) to fresh public names,
there exists σ such that (ΣΣ(cid:2)|
vars(C), σ) ∈ Sol π(C)
3) all solutions are instances of a mgs:
for all (Σ, σ) ∈ Sol π(C), there exist Σ(cid:2) ∈ mgsπ(C)
and Σ(cid:2)(cid:2) such that Σ = Σ(cid:2)Σ(cid:2)(cid:2)|
We suppose that all substitutions in mgsπ(C) are distinct
vars(C).
modulo renaming of variables.
This notion is very natural in that it follows in the
steps of the deﬁnition of mgu’s. The computation of mgs’ is
however more involved—it is in the same vein, though more
general than other work on constraint solving for security
protocols [14], [22]. The approach is twofold:
1) constraint systems C are extended, in particular with
a set of second-order constraints E2(C). This set is
completely analogous to E1 but gathers (dis)equalities
on second-order terms;
2) we use a (terminating) constraint-solving relation →
over extended constraint systems.
A dedicated notation ⊥ is used to denote a constraint
system without solution. mgs(C) is then obtained by taking
the second-order mgu’s of solved systems reachable from C:
(cid:3)
mgu(E
2(C(cid:2))|=)
(cid:19)(cid:19)(cid:19)(cid:19) C →(cid:3) C(cid:2)
C(cid:2) irreducible
, C(cid:2) (cid:15)= ⊥,
(cid:4)
mgs(C) =
Because of lack of space we omit the description of this
constraint solving procedure. The details can be found in
the technical report [2] but are not necessary to understand
the overall decision procedure.
5.2. Partition tree
Partition trees are key to our decision procedure. Struc-
turally speaking, a partition tree is similar to a symbolic
execution tree where children of each node are reﬁned
to guide the decision of dynamic equivalences. Typically
its nodes—so-called conﬁgurations—contain symbolic pro-
cesses sharing statically-equivalent solutions:
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2).
(cid:2), (Σ, σ
Deﬁnition 12. A conﬁguration is a triple (Γ, π, (cid:3)) where Γ
is a set of symbolic processes, (cid:3) ∈ As ∪ {ε} and π is a
predicate on second-order solutions. We also assume that,
for all (P,C) ∈ Γ:
1) Sol π(C) (cid:15)= ∅ and |mgsπ(C)| = 1;
2) if (Σ, σ) ∈ Sol π(C) and (P(cid:2)
,C(cid:2)) ∈ Γ, then for some
(cid:2)) ∈ Sol π(C(cid:2)) and Φ(C)σ ∼ Φ(C(cid:2))σ
σ
When a node n of a partition tree is labelled by (Γ, π, (cid:3))
we denote by Γ(n), π(n), and (cid:3)(n) the corresponding ele-
ments of the conﬁguration. Note an important consequence
of the deﬁnition: all constraint systems in Γ(n) have a
unique mgs (by point 1) and this mgs is common to all
of them (by point 2). We denote it mgs(n). The deﬁnition
of partition trees is then the following:
Deﬁnition 13. Let P1 and P2 be two closed plain processes.
A partition tree T of P1 and P2 is a ﬁnite tree whose nodes
are labelled by conﬁgurations. It also veriﬁes, for all nodes
n and (P,C) ∈ Γ(n):
1) the initial processes are in the root:
if n is the root of the tree then (cid:3)(n) = ε, π(n) = (cid:25)
and Γ(n) contains ({{P1}},C∅) and ({{P2}},C∅);
In this example, second-order predicates π are described
by second-order formulas ϕ2 (casting the satisﬁability rela-
tion of our ﬁrst-order logic in the natural way).
A criterion for equivalence. Each branch a partition tree
T intuitively encompasses equivalent trace scenarios. Typ-
ically, trace equivalence will be interpreted as a simple
condition on these branches. Assuming (P,C) a=⇒s (Pc,Cc),
a ∈ As ∪ {ε}, we write (P,C), n a−→T (Pc,Cc), nc when
n, nc are nodes of T with nc is a child of n (if a ∈ As) or
n = nc (if a = ε), (P,C) ∈ Γ(n) and (Pc,Cc) ∈ Γ(nc). It
is extended into the closure tr=⇒T as usual. The core of our
procedure for trace equivalence is then stated by:
Lemma 7. Let P1, P2 be two ground plain processes, a
partition tree T ∈ PTree(P1, P2) and n0 the root of T .
({{P1}},∅) (cid:16)t ({{P2}},∅)
iff
for all reductions ({{P1}},C∅), n0
there exists a reduction ({{P2}},C∅), n0
tr=⇒T (P,C), n
tr=⇒T (P(cid:2)
,C(cid:2)), n
2) nodes are closed under ε-transition:
(P(cid:2)
,C(cid:2)) and Sol π(n)(C(cid:2)) (cid:15)= ∅ then
if (P,C)
(P(cid:2)
ε=⇒s
,C(cid:2)) ∈ Γ;
3) completeness of the partition tree:
(cid:2)(nc)
(cid:2)), (cid:3)(n
(cid:2) child of n s.t. (P(cid:2)
if (P,C)
there exists n
and (Σ(cid:2)
(cid:2)=⇒s (P(cid:2)
, σ) ∈ Sol π(n
,C(cid:2)) and (Σ, σ) ∈ Sol π(n)(C(cid:2)) then
(cid:2)) = (cid:3)
Besides, if nc is a child node of n and (Pc,Cc) ∈ Γ(nc):
4) predicates are reﬁned along branches: π(nc) ⊆ π(n);
5) soundness of the partition tree:
,C(cid:2)) ∈ Γ(n
(cid:2))(C(cid:2)) for some Σ(cid:2);
partition trees of P1 and P2.
===⇒s (P(cid:2)
(cid:2) such that (Σc, σ
,C(cid:2)) and Φ(Cc)σc ∼ Φ(C(cid:2))σ
if (Σ, σ) ∈ Sol π(n)(C), (Σc, σc) ∈ Sol π(nc)(Cc) and
Σ ⊆ Σc, then Γ(nc) contains all (P(cid:2)
,C(cid:2)) such that
(P,C)
(cid:2) for
(cid:2)) ∈ Sol (C(cid:2)).
some σ
We denote by PTree(P1, P2) the (inﬁnite) set of all
The nodes of T ∈ PTree(P1, P2) gather statically-
equivalent processes, while second-order predicates π de-
scribe the recipes the attacker has to use to reach a given
node. Symbolic traces are then embedded into the tree
as edges (item 3) and the edge relation encompasses all
symbolic traces leading to statically-equivalent processes
(item 5). Typically, trace equivalence of P1 and P2 will be
stated as a condition on the branches of T .
Example 8. Two partition trees are presented in ﬁg. 6. They
use notations of ﬁg. 5, E b
)),
E b
Cf = (Φf , Df , E
Φf = {ax1 (cid:9)→ x2}
= ({{0}},Cf ) with
y, Z (cid:20)?
c, x = (cid:5)x1, x2(cid:6)}
= (c(cid:5)proj2(x)(cid:6),Cb,1) and E f
) Df = {X (cid:20)?
= {y =?
= ({{Pb,i}}, (Φb,i, Db,i, E1
x, Y (cid:20)?
c, z =?
z}
1
f
b,i
Q
Q
i
1
E
f
(P(cid:2)
2,C(cid:2)
2,C(cid:2)
(cid:2)
1), n
(cid:2)
2), n
2), (P2,C2), n tr=⇒T(cid:15)
Proof (sketch). We prove both directions separately.
(⇒) We proceed by contraposition. The key argument is
the following claim ((cid:13)), provable by induction on |tr|:
Let n node of T and (P1,C1), (P2,C2) ∈ Γ(n). If
• (P1,C1), n tr=⇒T (P(cid:2)
1,C(cid:2)
• for all (P(cid:2)
(cid:2))(C(cid:2)
• (Σ, σ1) ∈ Sol π(n
1)
• (Σ, σ2) ∈ Sol (C2)
1)σ1 (cid:15)∼ Φ for all concrete reductions
then we have Φ(C(cid:2)
(P2σ2, Φ(C2)σ2↓) trΣ(cid:2)
==⇒c (P, Φ) s.t. Σ ⊆ Σ(cid:2).
tr=⇒T (P,C), n and, for
Then, assume ({{P1}},C∅), n0
all (P(cid:2)
tr=⇒T(cid:15)
(P(cid:2)
,C(cid:2)), n. We know
by soundness of the symbolic semantics (theorem 6) that
({{P1}},∅) trΣ==⇒c (Pσ, Φ(C)σ↓) for an arbitrary (Σ, σ) ∈
Sol π(n)(C). We thus obtain ({{P1}},∅) (cid:15)(cid:16)t ({{P2}},∅) by
((cid:13)) with P1 = {{P1}}, P2 = {{P2}} and C1 = C2 = C∅.
(⇐) Suppose ({{P1}},∅) trc=⇒c (P1, Φ1). We have to show
that there exists (P2, Φ2) s.t. ({{P2}},∅) trc=⇒c (P2, Φ2)
and Φ1 ∼ Φ2. By completeness of the symbolic se-
mantics (theorem 6), we have tr, n, (P,C) ∈ Γ(n) and
(Σ, σ) ∈ Sol (CA) s.t. Φ = Φ(C)σ↓, trc = trΣ and
,C(cid:2)), ({{P2}},C∅), n0
tr=⇒T (P,C), n
({{P1}},C∅), n0
there exists