symbolic variable is unconstrained. To handle these cases, the
Execution Engine must duplicate the state and follow one or both
branches, depending on the state’s constraints. The results of this
duplication process are new execution states, which follow different
execution paths and eventually explore the macro’s entire behavior.
Since these execution paths are independent of each other,
every state contains its own copy of the memory, environment
configuration, and constraints:
1) The memory holds the values and formulas contained in
cells, the information regarding cells’ properties (e.g., font
information), and the defined names.
2) The environment contains accessory information that is not
directly stored in a workbook. For example, the window height
and the current operating system version are both environment
variables. Malware authors use environment variables for
sandbox detection and evasion. Therefore, depending on the
environment, the same malware sample can show different
behaviors. For this reason, we associate a symbolic variable
to each of these environment variables, allowing us to explore
every possible malware behavior.
3) The constraints characterize the malware behavior and
are propagated from one state to its successors during
the execution. For example, a possible constraint
is
GET.WORKSPACE(14)>390, which constrains the symbolic
variable representing the window height to be greater than 390.
Function Handlers. The function handlers replicate the original
behavior of a formula. The handlers can thus modify the execution
state by updating the memory, accessing the environment, and
adding new constraints:
1) Updating the memory: After executing an XL4 formula,
SYMBEXCEL updates the memory of the state to store the
formula’s result and to reflect any side-effects in the state’s
context. For example, the formula in cell A1 of Figure 1, updates
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1070
[A1] =FORMULA((GET.WORKSPACE(14)>390)+84, B1)
[A2] =FORMULA("=HAL" & CHAR(B1) & "()", C1)
[A3] =GOTO(C1)
Fig. 4: Execution of a symbolic expression (stored in cell C1).
Summary. The Execution Engine is the core component of our
system: it parses each formula during the execution, generates the
corresponding AST, and invokes the function handlers to reproduce
the original formula’s behavior. When one of the AST nodes is
symbolic (i.e., refers to an environment variable), the function
handlers will propagate this symbolic value and generate a new
symbolic expression.
C. Solver Backend
The final component in our architecture is the Solver Backend,
which is a custom wrapper around the Z3 SMT solver [26]. This
component allows SYMBEXCEL to accumulate the constraints
associated with an execution state, check their satisfiability, and
concretize symbolic expressions.
SYMBEXCEL can concretize the path constraints to allow multi-
path exploration, as well as the symbolic memory addresses and
formulas to enable the analysis of self-modifying macros. Take as an
example the formula =FORMULA(..., C1) from Figure 4, cell
A2. The FORMULA function will evaluate the expression specified
as the first argument and write its result into the destination cell,
specified as the second argument. In this case, the corresponding
handler will concatenate the string "=HAL" with the symbolic
character stored in cell B1, append the string "()", and finally write
the result into cell C1. The formula =GOTO(C1) will then redirect
the execution to cell C1, which contains a symbolic expression.
Since a symbolic expression can have multiple possible concrete
values, SYMBEXCEL will concretize the symbolic expression and
generate a set of concrete solutions that our symbolic execution
engine can execute. Translating an expression from the symbolic
domain to the concrete domain allows us to continue executing the
malware sample, exploring all its possible behaviors.
As mentioned before, there are often multiple concrete solutions
to a symbolic expression. The expression used in cell A1 of Figure 4
is a symbolic expression based on the environment variable returned
by GET.WORKSPACE(14). However, such variable is a symbolic
integer variable with 232 concrete solutions. Therefore, after execut-
ing cell A3 and transferring the execution to the symbolic expression
stored in cell C1, a na¨ıve concretization strategy would fork 232
execution states, overloading our symbolic execution engine. For this
reason, we implement two optimizations that make our concretiza-
tion strategy more efficient: Observers and Smart Concretization.
Observers. To make constraint solving more practical, we introduce
additional symbolic variables during the symbolic exploration.
An observer variable is an intermediate variable that represents a
symbolic sub-expression. In particular, when we execute a symbolic
comparison operation, a symbolic boolean operation, or when
handling an IS_NUMBER formula on a symbolic string index
(e.g., ISNUMBER(SEARCH(...))), we represent the resulting
Boolean expression with a freshly created symbolic variable. This
process is crucial when our system has to concretize a symbolic
formula, since it dramatically reduces the concretization space.
Fig. 3: Number of functions observed over time.
the value in cell K1 (when executing the SET.VALUE macro)
and writes either TRUE or FALSE in cell A1, depending on
which branch is executed.
2) Accessing the environment: As mentioned, XL4 malware
samples use the environment values for sandbox detection
and fingerprinting. For example, when executing the formula
=FORMULA(DAY(NOW())+K1, K2) from our running ex-
ample (Figure 1, cell A4), SYMBEXCEL starts by calculating
the result of the expression DAY(NOW())+K1. Thus, the NOW
function will access the environment to read from the execution
state’s context the symbolic value associated with the current
time. Finally, the FORMULA function will write the expression’s
value to the destination cell K2. As a result, the symbolic variable
is propagated from the environment to memory and will be used
later in the execution for further computation.
3) Generating new constraints: As previously explained, when
executing a conditional instruction with a symbolic operand,
SYMBEXCEL will fork the execution state, update the states’
contexts, and generate the correct guarding constraints. For
example,
the formula =IF(K1=2, which will be added to the respective states.
Delegations. In order to make our approach more resilient, we
implement an additional mechanism that allows SYMBEXCEL to
delegate the execution of an XL4 formula to Excel. The Excel
4.0 function reference [58] contains hundreds of functions, and
implementing each of them inside SYMBEXCEL would basically
require reproducing the entire Excel formula engine. Moreover,
as seen in Figure 3, the number of functions used by the malware
authors increases dramatically over time. For this reason, when our
system tries to execute a function that is not implemented in our
engine, we offload the execution to the COM server. In particular,
SYMBEXCEL uses the COM functionality to communicate with a
running instance of Microsoft Excel, and it synchronizes the current
state context, which includes the content of the spreadsheets, macro
sheets, and the defined names. It then executes the target formula,
and finally, it fetches the resulting context back into our execution
engine. This delegation mechanism allows our approach to scale
even when some of the Excel functions used by a sample are not
implemented in our execution engine.
Currently, SYMBEXCEL can only delegate instructions with
concrete arguments. However, since only a subset of the formulas
used in current malware samples has symbolic arguments, this
technique dramatically reduces the implementation overhead when
threat actors start using a new formula.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1071
      2013Q22015Q22017Q22019Q2                 2021Q2Quarter20406080100Number of FunctionsCumulative DistributionNumber of New Functionsour
solver
For example, we assume that SYMBEXCEL needs to retrieve
all possible concrete models associated with the symbolic
expression in cell C1. When concretizing the symbolic expression
(GET.WORKSPACE(14)>390)+84,
backend
recognizes that this expression uses a symbolic integer variable.
As a result, the number of possible models is 232—i.e., all the
possible values associated with the symbolic integer variable
GET.WORKSPACE(14). On the other hand, if we strategically
introduce a symbolic Boolean variable OBSERVER_1 to represent
the expression GET.WORKSPACE(14)>390, then the symbolic
expression becomes OBSERVER_1+84. As a result, this expression
can have only two concrete solutions, 84 and 85, and our solver
backend can concretize the expression without additional overhead.
Smart Concretization. Even after introducing one or more ob-
server variables, it is possible to have many concrete solutions asso-
ciated with a symbolic expression. To limit the number of generated
states, SYMBEXCEL uses the XL4 grammar to decide whether a con-
crete string is a valid formula or not. In other words, after retrieving
every concrete model of a symbolic expression, we use this grammar
as an oracle to filter any invalid formula. In the previous example in
Figure 4, the two possible concretizations of the string stored in cell
C1 are "=HALT()" and "=HALU()". While the first concretiza-
tion represents a valid XL4 formula, the second one is invalid and
thus is discarded by SYMBEXCEL. This smart concretization strategy
is without loss of generality, since Excel also aborts the execution
when it encounters an invalid formula. In other words, malware
authors cannot deceive our system into discarding their otherwise
legitimate payload by intentionally using an invalid formula.
V. EVALUATION
We combine two different datasets of malicious Excel 4.0 macros
to evaluate our approach. The first one, which we will refer to as
the public dataset, is a collection of 5,697 samples retrieved from
VirusTotal (VT). The second dataset, which we will refer to as the
private dataset, contains instead 18,840 samples that are not publicly
available and that were collected by a security vendor. Overall, these
two datasets contain 24,537 malicious samples. Using the submis-
sion date, we estimate that our dataset covers more than eight years,
since the earliest observed sample was submitted to VT in March
2013 and the latest observed sample was submitted in July 2021.
In the following sections, we describe the ecosystem behind
Excel 4.0 malware, how it evolved over time, and how malicious
actors continuously find new ways to hinder the analysis of XL4
macros. In particular:
• We present the results of our comparison with other publicly
available tools. Specifically, we compare SYMBEXCEL with
XLMMacroDeobfuscator [53], the state-of-the-art open-source
concrete analysis tool for Excel 4.0 macros.
• We study the mechanisms used to trigger the execution of
Excel 4.0 macros, and the most common evasion techniques
that malware samples use to prevent the parsing of Excel files.
• We study the security-relevant formulas used by malware
samples to execute malicious payloads, and the IoCs extracted
from these formulas.
• We study the evolution of Excel 4.0 malware samples over
eight years and present the results of our temporal study.
A. Approach Comparison
To assess the effectiveness of our approach, we compare
our system with the state-of-the-art concrete deobfuscation tool
XLMMacroDeobfuscator (version 2.0, released in November 2021).
The results of this comparison are presented in Table I where,
for each tool, we report the number of samples that are successfully
analyzed. We consider a sample to be successfully analyzed when
the macro executes at least one of the following three functions:
EXEC, CALL, or REGISTER. Malicious XL4 macros typically
use these functions to implement the malware behaviors, such as
calling a WinAPI function to download a file from a remote server,
or to execute an external program. When one of these functions
is encountered, we assume that the deobfuscation stages have been
successfully executed and that the environment configuration is
adequate to reveal the malicious behavior.
In Table I, we have divided the samples into two categories,
Concrete and Symbolic, depending on whether or not a sample
reads any information from the environment that is represented with
a symbolic variable (e.g., the size of the window or the current day).
This allows us to show the difference in the analysis results based
on whether the execution of a sample relies on external inputs.
We also run SYMBEXCEL with two different configurations: one
where the malicious documents are parsed with an improved version
of the xlrd2 static parser (SYMBEXCELSTATIC), and one where
this task is offloaded to our COM Server (SYMBEXCELCOM). The
results for SYMBEXCEL reported in the top part of the table show the
union of the results for these two configurations. For our experiment,
we also group similar samples together by using the sequence of
executed formulas as an equivalence metric and presenting the
results in terms of structurally distinct samples (right side of Table I).
The first key result presented in Table I is that SYMBEXCEL—in
either configuration— deobfuscates significantly more samples
than XLMMacroDeobfuscator (23,931 compared to 12,375
samples). Our better results are due to a number of factors. The
first difference between the two approaches is that SYMBEXCEL’s
execution engine currently implements 103 function handlers, while
XLMMacroDeobfuscator supports 73 functions. Moreover, using
the COM server to load and parse the samples allows SYMBEXCEL
to sidestep some of the evasion techniques that are used to interfere
with the static parsers, as we will discuss in-depth in the Evasion
Techniques section. Finally, SYMBEXCEL can infer additional entry
points from the VBA code included in the Excel documents, which
can be used to trigger the malicious XL4 functionality.
However, the most interesting results emerge from the analysis
of the subset of samples that make heavy use of obfuscation and
environment-specific variables. For this subset of symbolic samples,
XLMMacroDeobfuscator can only deobfuscate 410 samples.
It is interesting to understand why XLMMacroDeobfuscator
manages to analyze any symbolic samples at all. We find that the
analysis can be successful either because the concrete environment
values used by the tool happen to satisfy the values expected
by the malware sample, or because the sample uses only the
value returned by the function DAY to deobfuscate the payload.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:02 UTC from IEEE Xplore.  Restrictions apply. 
1072
Tool
XLMMacroDeobfuscator
SYMBEXCEL
SYMBEXCELSTATIC
SYMBEXCELCOM
Concrete
11,965
16,692
16,644
16,660
All Samples (24,537)
Symbolic
410
7,239
7,231
7,236
Structurally Distinct Samples (2,265)
All
12,375
23,931
23,875
23,896
Concrete
Symbolic
225
1,020
1,014
1,018
363
1,081
1,078
1,079
All
588
2,101
2,092
2,097
TABLE I: Comparison of the number of samples deobfuscated correctly by SYMBEXCEL and XLMMacroDeobfuscator.
Interestingly, XLMMacroDeobfuscator implements a brute-force
strategy specifically for the return value of this function. On
the other hand, SYMBEXCEL can automatically find the correct
environment configuration and deobfuscate 7,239 samples. In this
case, the performance difference is primarily due to the symbolic
implementation of the function handlers, which allows SYMBEXCEL
to accumulate constraints and solve them when executing a symbolic
formula to infer the correct environment configuration.
In our experiments, we use a 60-minute timeout, and none of the
samples exceed this timeout. Overall, the median analysis time is
12s per sample for SYMBEXCELSTATIC, 32s for SYMBEXCELCOM,
and 1s for XLMMacroDeobfuscator.
Triggering Mechanisms. As previously discussed in Section IV-A,
malware authors can leverage different ways to start their malicious
macros. Figure 5 presents an overview of the triggering functionality
we observed in our dataset. The vast majority of documents (15,020
samples) use the Auto Open built-in name to start the execution,
while only a few of them leverage instead Auto Close (384) and
Auto Activate (6). On the other hand, Figure 5 shows that VBA code