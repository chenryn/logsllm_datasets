case b >= KB:
return fmt.Sprintf("%.2fKB", b/KB)
}
return fmt.Sprintf("%.2fB", b)
}
The expression YB prints as 1.00YB, while ByteSize(1e13) prints as 9.09TB.
60
初始化
表达式 YB 会打印出 1.00YB，而 ByteSize(1e13) 则会打印出 9.09。
The use here of Sprintf to implement ByteSize's String method is safe (avoids recurring
indefinitely) not because of a conversion but because it calls Sprintf with %f, which is not a
string format: Sprintf will only call the String method when it wants a string, and %f wants a
floating-point value.
在这里用 Sprintf 实现 ByteSize 的 String 方法很安全（不会无限递归），这倒不是因为类型
转换，而是它以 %f 调用了 Sprintf，它并不是一种字符串格式：Sprintf 只会在它需要字符串
时才调用 String 方法，而 %f 需要一个浮点数值。
Variables
变量
Variables can be initialized just like constants but the initializer can be a general expression
computed at run time.
变量的初始化与常量类似，但其初始值也可以是在运行时才被计算的一般表达式。
var (
home = os.Getenv("HOME")
user = os.Getenv("USER")
gopath = os.Getenv("GOPATH")
)
The init function
init 函数
Finally, each source file can define its own niladic init function to set up whatever state is
required. (Actually each file can have multiple init functions.) And finally means finally: init is
called after all the variable declarations in the package have evaluated their initializers, and
those are evaluated only after all the imported packages have been initialized.
最后，每个源文件都可以通过定义自己的无参数 init 函数来设置一些必要的状态。 （其实每
个文件都可以拥有多个 init 函数。）而它的结束就意味着初始化结束： 只有该包中的所有变
量声明都通过它们的初始化器求值后 init 才会被调用， 而那些 init 只有在所有已导入的包都
被初始化后才会被求值。
Besides initializations that cannot be expressed as declarations, a common use of init
functions is to verify or repair correctness of the program state before real execution begins.
61
初始化
除了那些不能被表示成声明的初始化外，init 函数还常被用在程序真正开始执行前，检验或校
正程序的状态。
func init() {
if user == "" {
log.Fatal("$USER not set")
}
if home == "" {
home = "/home/" + user
}
if gopath == "" {
gopath = home + "/go"
}
// gopath may be overridden by --gopath flag on command line.
flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")
}
func init() {
if user == "" {
log.Fatal("$USER not set")
}
if home == "" {
home = "/home/" + user
}
if gopath == "" {
gopath = home + "/go"
}
// gopath 可通过命令行中的 --gopath 标记覆盖掉。
flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")
}
62
方法
Methods
方法
Pointers vs. Values
指针 vs. 值
As we saw with ByteSize, methods can be defined for any named type (except a pointer or
an interface); the receiver does not have to be a struct.
正如 ByteSize 那样，我们可以为任何已命名的类型（除了指针或接口）定义方法； 接收者可
不必为结构体。
In the discussion of slices above, we wrote an Append function. We can define it as a
method on slices instead. To do this, we first declare a named type to which we can bind the
method, and then make the receiver for the method a value of that type.
在之前讨论切片时，我们编写了一个 Append 函数。 我们也可将其定义为切片的方法。为
此，我们首先要声明一个已命名的类型来绑定该方法， 然后使该方法的接收者成为该类型的
值。
type ByteSlice []byte
func (slice ByteSlice) Append(data []byte) []byte {
// Body exactly the same as above
}
type ByteSlice []byte
func (slice ByteSlice) Append(data []byte) []byte {
// 主体和前面相同。
}
This still requires the method to return the updated slice. We can eliminate that clumsiness
by redefining the method to take a pointer to a ByteSlice as its receiver, so the method can
overwrite the caller's slice.
我们仍然需要该方法返回更新后的切片。为了消除这种不便，我们可通过重新定义该方法，
将一个指向 ByteSlice 的指针作为该方法的接收者， 这样该方法就能重写调用者提供的切片
了。
63
方法
func (p *ByteSlice) Append(data []byte) {
slice := *p
// Body as above, without the return.
*p = slice
}
func (p *ByteSlice) Append(data []byte) {
slice := *p
// 主体和前面相同，但没有 return。
*p = slice
}
In fact, we can do even better. If we modify our function so it looks like a standard Write
method, like this,
其实我们做得更好。若我们将函数修改为与标准 Write 类似的方法，就像这样，
func (p *ByteSlice) Write(data []byte) (n int, err error) {
slice := *p
// Again as above.
*p = slice
return len(data), nil
}
func (p *ByteSlice) Write(data []byte) (n int, err error) {
slice := *p
// 依旧和前面相同。
*p = slice
return len(data), nil
}
then the type *ByteSlice satisfies the standard interface io.Writer, which is handy. For
instance, we can print into one.
那么类型 *ByteSlice 就满足了标准的 io.Writer 接口，这将非常实用。 例如，我们可以通过
打印将内容写入。
var b ByteSlice
fmt.Fprintf(&b, "This hour has %d days\n", 7)
We pass the address of a ByteSlice because only *ByteSlice satisfies io.Writer. The rule
about pointers vs. values for receivers is that value methods can be invoked on pointers and
values, but pointer methods can only be invoked on pointers.
64
方法
我们将 ByteSlice 的地址传入，因为只有 *ByteSlice 才满足 io.Writer。以指针或值为接收者
的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。
This rule arises because pointer methods can modify the receiver; invoking them on a value
would cause the method to receive a copy of the value, so any modifications would be
discarded. The language therefore disallows this mistake. There is a handy exception,
though. When the value is addressable, the language takes care of the common case of
invoking a pointer method on a value by inserting the address operator automatically. In our
example, the variable b is addressable, so we can call its Write method with just b.Write.
The compiler will rewrite that to (&b).Write for us.
之所以会有这条规则是因为指针方法可以修改接收者；通过值调用它们会导致方法接收到该
值的副本， 因此任何修改都将被丢弃，因此该语言不允许这种错误。不过有个方便的例外：
若该值是可寻址的， 那么该语言就会自动插入取址操作符来对付一般的通过值调用的指针方
法。在我们的例子中，变量 b 是可寻址的，因此我们只需通过 b.Write 来调用它的 Write 方
法，编译器会将它重写为 (&b).Write。
By the way, the idea of using Write on a slice of bytes is central to the implementation of
bytes.Buffer.
顺便一提，在字节切片上使用 Write 的想法已被 bytes.Buffer 所实现。
65
接口和其他类型
Interfaces and other types
接口与其它类型
接口
Interfaces in Go provide a way to specify the behavior of an object: if something can do this,
then it can be used here. We've seen a couple of simple examples already; custom printers
can be implemented by a String method while Fprintf can generate output to anything with a
Write method. Interfaces with only one or two methods are common in Go code, and are
usually given a name derived from the method, such as io.Writer for something that
implements Write.
Go 中的接口为指定对象的行为提供了一种方法：如果某样东西可以完成这个， 那么它就可以
用在这里。我们已经见过许多简单的示例了；通过实现 String 方法，我们可以自定义打印函
数，而通过 Write 方法，Fprintf 则能对任何对象产生输出。在 Go 代码中， 仅包含一两种方
法的接口很常见，且其名称通常来自于实现它的方法， 如 io.Writer 就是实现了 Write 的一类
对象。
A type can implement multiple interfaces. For instance, a collection can be sorted by the
routines in package sort if it implements sort.Interface, which contains Len(), Less(i, j int)
bool, and Swap(i, j int), and it could also have a custom formatter. In this contrived example
Sequence satisfies both.
每种类型都能实现多个接口。例如一个实现了 sort.Interface 接口的集合就可通过 sort 包中的
例程进行排序。该接口包括 Len()、Less(i, j int) bool 以及 Swap(i, j int)，另外，该集合仍然可
以有一个自定义的格式化器。 以下特意构建的例子 Sequence 就同时满足这两种情况。
66
接口和其他类型
type Sequence []int
// Methods required by sort.Interface.
// sort.Interface 所需的方法。
func (s Sequence) Len() int {
return len(s)
}
func (s Sequence) Less(i, j int) bool {
return s[i]  0 {
str += " "
}
str += fmt.Sprint(elem)
}
return str + "]"
}
Conversions
类型转换
The String method of Sequence is recreating the work that Sprint already does for slices.
We can share the effort if we convert the Sequence to a plain []int before calling Sprint.
Sequence 的 String 方法重新实现了 Sprint 为切片实现的功能。若我们在调用 Sprint 之前将
Sequence 转换为纯粹的 []int，就能共享已实现的功能。
func (s Sequence) String() string {
sort.Sort(s)
return fmt.Sprint([]int(s))
}
This method is another example of the conversion technique for calling Sprintf safely from a
String method. Because the two types (Sequence and []int) are the same if we ignore the
type name, it's legal to convert between them. The conversion doesn't create a new value, it
67
接口和其他类型
just temporarily acts as though the existing value has a new type. (There are other legal
conversions, such as from integer to floating point, that do create a new value.)
该方法是通过类型转换技术，在 String 方法中安全调用 Sprintf 的另个一例子。若我们忽略类
型名的话，这两种类型（Sequence 和 []int）其实是相同的，因此在二者之间进行转换是合法
的。 转换过程并不会创建新值，它只是值暂让现有的时看起来有个新类型而已。 （还有些合
法转换则会创建新值，如从整数转换为浮点数等。）
It's an idiom in Go programs to convert the type of an expression to access a different set of
methods. As an example, we could use the existing type sort.IntSlice to reduce the entire
example to this:
在 Go 程序中，为访问不同的方法集而进行类型转换的情况非常常见。 例如，我们可使用现
有的 sort.IntSlice 类型来简化整个示例：
type Sequence []int
// Method for printing - sorts the elements before printing
func (s Sequence) String() string {
sort.IntSlice(s).Sort()
return fmt.Sprint([]int(s))
}
type Sequence []int
// // 用于打印的方法 - 在打印前对元素进行排序。
func (s Sequence) String() string {
sort.IntSlice(s).Sort()
return fmt.Sprint([]int(s))
}
Now, instead of having Sequence implement multiple interfaces (sorting and printing), we're
using the ability of a data item to be converted to multiple types (Sequence, sort.IntSlice and
[]int), each of which does some part of the job. That's more unusual in practice but can be
effective.
现在，不必让 Sequence 实现多个接口（排序和打印）， 我们可通过将数据条目转换为多种
类型（Sequence、sort.IntSlice 和 []int）来使用相应的功能，每次转换都完成一部分工作。
这在实践中虽然有些不同寻常，但往往却很有效。
Interface conversions and type assertions
接口转换与类型断言
68
接口和其他类型
Type switches are a form of conversion: they take an interface and, for each case in the
switch, in a sense convert it to the type of that case. Here's a simplified version of how the
code under fmt.Printf turns a value into a string using a type switch. If it's already a string,
we want the actual string value held by the interface, while if it has a String method we want
the result of calling the method.