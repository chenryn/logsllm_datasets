Mobile Devices, pages 3–14. ACM, 2015.
[39] Jing Tian, Nolen Scaife, Deepak Kumar, Michael Bailey,
Adam Bates, and Kevin Butler. SoK: “Plug & Pray”
Today – Understanding USB insecurity in versions 1
through C. In 2018 IEEE Symposium on Security and
Privacy (SP), pages 1032–1047. IEEE, 2018.
[40] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, and P. G.
Bringas. SoK: Deep packer inspection: A longitudinal
study of the complexity of run-time packers. In 2015
IEEE Symposium on Security and Privacy, pages 659–
673, May 2015.
[41] Zhaohui Wang and Angelos Stavrou. Exploiting smart-
phone usb connectivity for fun and proﬁt. In Proceed-
ings of the 26th Annual Computer Security Applications
Conference, pages 357–366. ACM, 2010.
[42] Thomas G Weiser, Alex B Haynes, Angela Lashoher,
Gerald Dziekan, Daniel J Boorman, William R Berry,
and Atul A Gawande. Perspectives in quality: designing
the who surgical safety checklist. International journal
for quality in health care, 22(5):365–370, 2010.
[43] Delanie Woodlock. The abuse of technology in do-
mestic violence and stalking. Violence against women,
23(5):584–602, 2017.
[25] Stevens Le Blond, Adina Uritesc, Cédric Gilbert,
Zheng Leong Chua, Prateek Saxena, and Engin Kirda.
A look at targeted attacks through the lens of an ngo. In
USENIX Security Symposium, pages 543–558, 2014.
[26] William R Marczak, John Scott-Railton, Morgan
Marquis-Boire, and Vern Paxson. When governments
hack opponents: A look at actors and technology. In
USENIX Security Symposium, pages 511–525, 2014.
[27] Tara Matthews, Kathleen O’Leary, Anna Turner, Manya
Sleeper, Jill Palzkill Woelfer, Martin Shelton, Cori Man-
thorne, Elizabeth F Churchill, and Sunny Consolvo. Sto-
ries from survivors: Privacy & security practices when
coping with intimate partner abuse. In Proceedings of
the 2017 CHI Conference on Human Factors in Com-
puting Systems, pages 2189–2201. ACM, 2017.
[28] APA Work Group on Psychiatric Evaluation. Practice
Guidelines for the Psychiatric Evaluation of Adults. The
American Psychiatric Association, third edition, 2016.
[29] Daniela Retelny, Sébastien Robaszkiewicz, Alexandra
To, Walter S. Lasecki, Jay Patel, Negar Rahmati, Tulsee
Doshi, Melissa Valentine, and Michael S. Bernstein.
Expert crowdsourcing with ﬂash teams. In Proceedings
of the 27th Annual ACM Symposium on User Interface
Software and Technology, UIST ’14, pages 75–85, New
York, NY, USA, 2014. ACM.
[30] Deborah L Rhode. Cultures of commitment: Pro bono
for lawyers and law students. Fordham L. Rev., 67:2415,
1998.
[31] Carl R Rogers. Signiﬁcant aspects of client-centered
therapy. American Psychologist, 1(10):415–422, 1946.
[32] Sharon G Smith, Kathleen C Basile, Leah K Gilbert,
Melissa T Merrick, Nimesh Patel, Margie Walling, and
Anurag Jain. The national intimate partner and sexual
violence survey (NISVS): 2010-2012 state report. 2017.
[33] Peter Snyder, Periwinkle Doerﬂer, Chris Kanich, and
Damon McCoy. Fifteen minutes of unwanted fame:
Detecting and characterizing doxing. In Proceedings of
the 2017 Internet Measurement Conference, IMC ’17,
pages 432–444, New York, NY, USA, 2017. ACM.
[34] Cindy Southworth, Shawndell Dawson, Cynthia Fraser,
and Sarah Tucker. A high-tech twist on abuse: Technol-
ogy, intimate partner stalking, and advocacy. Violence
Against Women, 2005.
[35] Cynthia Southworth, Jerry Finn, Shawndell Dawson,
Cynthia Fraser, and Sarah Tucker.
Intimate partner
violence, technology, and stalking. Violence against
women, 13(8):842–856, 2007.
USENIX Association
28th USENIX Security Symposium    119
A More Details about ISDi
How ISDi works. ISDi uses the libimobiledevice tool [4]
for iOS or Android Debug Bridge (adb) [5] for Android to
programmatically access the connected device. On Android,
the device must be conﬁgured to allow USB debugging, which
is done by enabling developer mode for the scan and revoking
it again after the scan is complete. When a scan is initiated,
ISDi pairs with the connected device and queries it for a list
of all installed apps, including those that are hidden from the
app drawer on Android (c.f., [8]). ISDi then runs additional
queries on the device to obtain the OS version, hardware
model, and manufacturer. It also performs heuristic checks
to infer if the device is jailbroken (iOS) or rooted (Android).
ISDi displays information about the outcome of these checks
via the tool’s UI, along with a list of all installed apps with
potentially dangerous apps listed ﬁrst. We compute each app’s
threat score by combining several heuristics.
First, we created a blacklist of potential IPV spyware and
dual-use apps using techniques from Chatterjee et al. [8]. To
ensure the list was not stale, we re-ran their measurements
several times and added the results to the blacklist. We ap-
plied the machine learning classiﬁer used in [8] to remove
the obviously irrelevant apps. However, we did not manually
prune the list further to reduce the falsely ﬂagged apps, as
during consultation a consultant can check those apps and
ignore if not relevant for IPV. The most recent update was
shortly before we initiated meetings with clients. Our cur-
rent blacklist contains over 500 iOS and 5,000 Android apps.
A second heuristic is a set of regular expressions that app
names are checked for, including substrings such as “spy” or
“track”. Lastly, on Android, ISDi checks whether any apps
were installed outside of the Play Store. A threat score is
then computed for each app so that the apps can be listed in
decreasing order of potential risk.
Clicking on an app name in ISDi’s UI displays more infor-
mation about that app, including installation date, developer
description of the app, requested permissions, and when per-
missions were last invoked (on Android). ISDi is also capable
of uninstalling apps (after appropriate safety planning) via
its interface, which is especially useful for hidden apps on
Android that cannot be located using the device’s UI.
ISDi is not perfect and may have both false positives and
false negatives. The former are less dangerous, and in our
experience were easily dealt with by the consultant in the
ﬁeld. False negatives are of course potentially dangerous, and
so we purposefully designed ISDi to have a low false negative
rate by allowing for more false positives.
ISDi collects the following information of each app: the
app ID, permissions, installation date (Android only), and
package ﬁles (Android only). ISDi also generates and stores
a keyed cryptographic hash of the device’s serial number. The
latter is useful to ensure we can determine if we scan the same
device twice, since clients may have multiple consultations,
without explicitly storing the device identiﬁer. Collected data
is linked to a random client identiﬁer. Storing a list of apps is
helpful not only for our research, but also because it allows us
to further examine, via followup if necessary, any suspicious
apps discovered during a consultation. In addition, whenever
we update the blacklist, we retroactively scan the apps from
past consultations to ensure that no newly found IPV spyware
apps were on a previously scanned devices. (Fortunately, we
have not yet detected any spyware retroactively.) All data is
stored securely and accessible only to our team.
Detecting potential IPV spyware. A core feature of ISDi is
its detection of IPV spyware apps (either overt or dual-use)
on iOS or Android devices. To do so, ISDi integrates various
heuristics into a rank-ordered list of apps by an internal threat
score. After querying the device for a list of installed apps,
ISDi assigns a threat score to each app, that score derived
from summing the weights of heuristics.
The main heuristic is two blacklists of app IDs, one for
overt spyware apps and one for dual-use apps. The black-
lists deployed with ISDi was seeded with the list of apps
discovered in [8], but then updated by using their snowball
searching techniques on the Google Play store and iTunes
store. Note that Google Play occasionally bans apps and re-
portedly banned some in response to the results of [8]. We
do not remove apps from a blacklist should they be removed
from the play store — they could have been downloaded and
installed by an abuser before removal. We additionally in-
cluded any apps we discovered via manual searches or that we
discovered in any other way. Following [8], we aggressively
added apps to a blacklist, at risk of creating false positives.
This favors having a low false negative rate, and we built
into our protocol the ability for consultants to handle false
positives when they arose. To help with ordering, we kept a
separate blacklist of overt spyware, with other apps appearing
on the dual-use blacklist.
In addition to blacklists, ISDi uses a few other heuristics.
First are regular expressions applied to application names,
as described in Section 5. Second was that we marked any
off-store app as potentially dangerous. Third was whether the
device is a system app, meaning it was pre-installed on the
device by the cellular provider or OS vendor.
We then gave a weighted score to each app according to
the values shown in Figure 4. The score of an app is equal
to the sum of the weights for the set of heuristics that apply
to the app. A higher score denotes being potentially more
dangerous. The weights are admittedly somewhat arbitrary,
but roughly correspond to our perception of the danger each
heuristic indicates. In practice, the number of apps on a device
that were assigned risk signals by ISDi were sufﬁciently small
that our choice of weights and rank-ordering did not make
much of a difference during consultations.
App detection accuracy. While ISDi lists all apps on the
device, and the consultant is encouraged to visually inspect
120    28th USENIX Security Symposium
USENIX Association
Heuristic
Overt spyware blacklist
Dual-use blacklist
Weight
1.0
0.8
Offstore app
Regex match
System app
0.8
0.3
-0.1
Description
Known, overt spyware
Legitimate uses, but possi-
bly harmful in certain situ-
ations
Not installed through an of-
ﬁcial app marketplace
App name or ID contains
‘spy’, ‘track’, etc.
Pre-installed by device
vendor
Figure 4: The ISDi heuristics for ordering apps. Each app
is assigned a score that is the sum of the weights for each
heuristic that applies to it.
the entire list, we would still consider it a false negative if a
dangerous app was not ﬂagged by one of the four heuristics
(excluding the system app heuristic).
As discussed in Section 5, ISDi’s accuracy depends in part
on labor intensive web crawling and manual pruning. Our
blacklist of dual-use apps included all 2,474 seed apps from
Chatterjee et al. [8], as well as 3,263 new apps from our own
periodic crawls since May 2018 and ﬁltering using the ML
classiﬁer given in [8]. Unlike in [8], we do not manually prune
the 3,263 apps we added to the blacklist to further remove
apps falsely ﬂagged by the machine learning classiﬁer. During
consultation, the consultant ignores apps that are not relevant,
which was not a problem during our consultations.
Most overt spyware apps we have encountered (and cer-
tainly all dual-use apps we have inspected) do not try to hide
their presence from a programmatic scan. However, for a few
of the overt spyware apps we have observed that they chose
innocuous-looking app IDs (such as “com.android.system”).
This reiterates the need for programmatic scans, which are
not fooled by this. However, if apps change their app IDs
frequently to avoid detection, our blacklists may not cover
the full set of app IDs associated with a spyware. We have
observed that one overt offstore spyware app, mSpy, has pub-
lished versions of its Android APK with different app IDs:
sys.framework and core.framework, while others such as Spy-
ToApp, FlexiSpy, and SpyZie have not changed their app
IDs to our knowledge (we re-downloaded them in September
2018 and in February 2019). We have found no evidence that
onstore dual-use apps change their app IDs, though Trackview
has published their app twice on the Google Play Store, as
both net.cybrook.trackview and app.cybrook.trackview under
different developer IDs. We have added all of the changed
app IDs to our blacklist as we have discovered them.
Finally we note that ISDi is not designed to detect more so-
phisticated malware, such as that used by national intelligence
agencies. We believe such malware is unlikely to arise in IPV
settings, since it requires special access to obtain it. For a
client for which it is plausible that her abuser might have ac-
cess to such capabilities (e.g., the abuser works as a computer
security expert), a discussion about potential remediations,
such as obtaining new devices, would be appropriate.
App reports. Upon clicking on an app, ISDi gives a number
of details about the app. This includes a developer description
(if available), when the app was installed (Android only),
the permissions the app has requested, and the time of all
the permissions recently used by the app (Android only),
including dangerous permissions such as microphone, camera,
or GPS. It also provides a link to a Google search on the app
ID, which allows the consultant to quickly attempt to look up
more information about the app should it be unfamiliar.
Detecting jailbroken or rooted phones. ISDi attempts to
determine if the scanned device is jailbroken (iOS) or rooted
(Android), since such devices are at much greater risk for
installation of powerful spyware. For example, most spy-
ware vendors enable for sophisticated features if the device
is jailbroken/rooted. Moreover, it is unlikely that a client
purposefully jailbreaks or roots their phone.
Thus ISDi uses a set of heuristics to determine whether
a device is jailbroken/rooted. If any heuristic comes back
positive, ISDi considers the device to be jailbroken or rooted
and indicates this along with the results of the scan. Detecting
jailbroken/rooted devices is under active discussion for both
Android and iOS because app developer communities want
to prevent their apps from being illegitimately being used on
a jailbroken/rooted device. We therefore collected different
heuristics from such community forums. For both iOS and
Android, ISDi checks whether common jailbreak/rooting ap-
plications are installed on the device [3]. On Android devices,
ISDi checks whether or not the su tool is installed on the sys-
tem “shell” application [38]. On iOS devices, ISDi attempts
to mount the ﬁlesystem at the root directory.
To the best of our understanding, ISDi will detect any jail-
broken or rooted device. However, it is possible that a device
could evade detection by ISDi using techniques that are not
publicly known. We regularly look into app developer forums
for new heuristics and update ISDi accordingly.
Possible attack vectors on ISDi. We have considered that
spyware installed by an abuser on a client’s phone may at-
tempt to use its USB connection to ISDi as a possible attack
vector [39, 41]. We are not aware of any overt spyware apps
that try to misuse USB connections to a host computer. We
ensured that all commands used by ISDi to communicate with
iOS and Android devices, over libimobiledevice and adb, re-
spectively, were run over least privilege (i.e., without sudo).
USENIX Association
28th USENIX Security Symposium    121
Figure 5: The current version of the Technology Assessment Questionnaire (TAQ).
122    28th USENIX Security Symposium
USENIX Association