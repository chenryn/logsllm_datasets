1
tls指纹
具体可参考这个 
go默认使⽤的client hello配置是固定不变的，导致特征也是固定的，所以需要做改动。 
go默认ja3指纹89be98bbd4f065fe510fca4893cf8d9b 
chromeja3指纹cd08e31494f9531f560d64c695473da9 
⼀共分为五个部分 
SSLVersion,Cipher-Suites,SSLExtension,EllipticCurve,EllipticCurvePointFormat 
为了尽量模拟浏览器的client hello，我们先⽐下go和chrome的tls指纹组成 
go：
chrome： 
SSLVersion⼀致 
可以修改Cipher-Suites 
在pkg/transport/tls.go，tls.Config⽀持CipherSuites修改，如下 
ja3 
此处为语雀内容卡⽚，点击链接查看：https://www.yuque.com/go/doc/61846405?view=doc_embed
771,49199-49200-49195-49196-52392-52393-49171-49161-49172-49162-156-157-47-
53-49170-10-4865-4867-4866,5-10-11-13-65281-18-43-51,29-23-24-25,0
1
XML
复制代码
771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-
47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513-21,29-23-24,0
1
XML
复制代码
2
SSLExtension,扩展列表这个实在不好改，go的官⽅tls库⽐chrome少了不少参数，所以这个就先别做修
改了。 
EllipticCurve 
椭圆曲线密码，刚好也⽀持这个选项配置，就做调整 
EllipticCurvePointFormat 
最后⼀项椭圆曲线格式，默认均为0，所以不做改动。 
总⽽⾔之，⼀共只需要修改两处 
修改后，指纹也就变化了，可以区别于默认go程序的指纹，但还⽆法做到和浏览器⼀致，后续需要魔改
官⽅tls库来兼容更多的extension才能实现完全模拟。 
base.CipherSuites = []uint16{4865,4866,4867,49195,49199,49196,49200,52393,5
2392,49171,49172,156,157,47,53}
1
XML
复制代码
base.CurvePreferences = []tls.CurveID{tls.X25519, tls.CurveP256, tls.CurveP
384}
1
XML
复制代码
3
⽂章 
https://mp.weixin.qq.com/s/og2IKo8lcydh8PROUPD7jQ 
https://segmentfault.com/a/1190000041699815 
库 
https://github.com/refraction-networking/utls 
这个库是基于crypto/tls进⾏开发的，可以模拟绝⼤部分情况下的ja3指纹。 
和官⽅库差不多的⽤法，如下在封装时除了conn连接和config配置以外，需要传
⼊  ClientHelloID ，这个ID是有⼀些内置的指纹可以直接调⽤，或者也可以⾃定义。 
这是官⽅库 
u_common.go，如下有⾮常全的现成指纹信息可以⽤。 
实现 
conn, _ := net.DialTimeout("tcp", "121.14.77.201:443", 10*time.Second)
uConn := tls.UClient(conn, &tls.Config{ServerName: "www.qq.com", Insecu
reSkipVerify: true}, tls.HelloChrome_102)
uConn.Write([]byte("aaa"))
1
2
3
Go
复制代码
4
这些ID最终对应到这个函数  utlsIdToSpec ⾥ 
5
后续可参考这边编写实现⾃⼰的。 
6
并且该库还⽀持解析数据包中的client hello信息，来⾃动化构建⼀个⾃定义参数，实现模拟各种ja3指纹 
浏览器访问，然后抓包找到client hello包，选中tls层的数据，然后复制成hex stream即可。 
7
将tls的hex数据粘贴到以下位置，通过  fingerprinter.FingerprintClientHello 即可解析⽣
成⼀个⾃定义spec，封装到tlsConn⾥直接使⽤。 
要注意的是  ClientHelloID 还设置成  HelloCustom 即⾃定义 
8
可以看到完全⼀致（wireshark好像3.6以上就⽀持ja3的指纹⽣成了） 
PS: 要注意⼀点，SNI也会参与计算，如果ServerName为空会不插⼊Extension⾥，导致ja3指纹计算结
果不⼀样 
conn, _ := net.DialTimeout("tcp", "121.14.77.201:443", 10*time.Second)
rawCapturedClientHelloBytes, _ := hex.DecodeString("1603010200010001fc
03037741eebedfb7afbcfcd0f49f9b59d7a9c13eb3ccd8f207b8c692ffb1b9b9f5c22017bd
40c3ec96ca8c21df97de564ce5e4e88bc945ca902d7d4260f77fb980631400221a1a130113
0213021303c02bc02fc02cc030cca9cca8c013c014009c009d002f0035010001918a8a0000
00000012001000000d7370312e62616964752e636f6d00170000ff01000100000a000a0008
dada001d00170018000b00020100002300a00efd73f80bf561e25ea122de025cb65678ebfc
d201e8c49325fbabe586918cdb8cfdeaac64d4798b351295c62d94aa3c48a8f4181bee25d4
202025cbf7eaf074233d576018c8adfe0d4527daa496e1b05162c0490a00fb108522a31e0b
f369482a97a77d62f147f1657e927b45223545e7ad54f99239d820ed81b41c172a15dc3762
f5d8fd1d333e082f55daca4e38ae11456fa4caf6be4419b56e5ed36a08580010000e000c02
683208687474702f312e31000500050100000000000d001200100403080404010503080505
0108060601001200000033002b0029dada000100001d0020ecb49f62fef0dc89ff3e6084d9
9e39b27820e68d9c4d8bf24b6d367e286ce05a002d00020101002b000706baba0304030300
1b0003020002446900050003026832caca0001000015002800000000000000000000000000
000000000000000000000000000000000000000000000000000000")
uConn := tls.UClient(conn, &tls.Config{ServerName: "www.qq.com", Insec
ureSkipVerify: true}, tls.HelloCustom)
fingerprinter := &tls.Fingerprinter{}
generatedSpec, err := fingerprinter.FingerprintClientHello(rawCaptured
ClientHelloBytes)
if err != nil {
t.Fatalf("fingerprinting failed: %v", err)
}
if err := uConn.ApplyPreset(generatedSpec); err != nil {
t.Fatalf("applying generated spec failed: %v", err)
}
uConn.Write([]byte("aaa"))
1
2
3
4
5
6
7
8
9
10
11
12
Go
复制代码
9
这个库还有些其他玩法，可以⾃⾏参考⽂档或者他的  example.go  
存在⼩bug，如果⾃动握⼿，可能会出现握⼿失败的问题，建议⼿动握⼿
utls bug 
10
uConn := tls.UClient(c, tlsConfig, tls.HelloChrome_Auto)
// 错误姿势，如此可能会报错
uConn.Write([]byte("a"))
// 正确姿势
err := uConn.Handshake()
1
2
3
4
5
Go
复制代码