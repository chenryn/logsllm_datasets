title:FabZK: Supporting Privacy-Preserving, Auditable Smart Contracts in
Hyperledger Fabric
author:Hui Kang and
Ting Dai and
Nerla Jean-Louis and
Shu Tao and
Xiaohui Gu
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
FabZK: Supporting Privacy-Preserving, Auditable Smart Contracts
in Hyperledger Fabric
Hui Kang∗
IBM Research
PI:EMAIL
Ting Dai∗†
NC State University
PI:EMAIL
Nerla Jean-Louis
IBM Research
Shu Tao
IBM Research
PI:EMAIL
PI:EMAIL
Xiaohui Gu
NC State University
PI:EMAIL
Abstract—On a Blockchain network, transaction data are
exposed to all participants. To preserve privacy and conﬁden-
tiality in transactions, while still maintaining data immutability,
we design and implement FabZK. FabZK conceals transac-
tion details on a shared ledger by storing only encrypted
data from each transaction (e.g., payment amount), and by
anonymizing the transactional relationship (e.g., payer and
payee) between members in a Blockchain network. It achieves
both privacy and auditability by supporting veriﬁable Pedersen
commitments and constructing zero-knowledge proofs. FabZK
is implemented as an extension to the open source Hyperledger
Fabric. It provides APIs to easily enable data privacy in
both client code and chaincode. It also supports on-demand,
automated auditing based on encrypted data. Our evaluation
shows that FabZK offers strong privacy-preserving capabilities,
while delivering reasonable performance for the applications
developed based on its framework.
Keywords-Blockchain; privacy; auditability; zero-knowledge
proofs
I. INTRODUCTION
As distributed and immutable digital ledger, Blockchain
offers signiﬁcant business beneﬁts, such as greater trans-
parency, enhanced security, improved traceability and ef-
ﬁciency in business settlement. While these beneﬁts have
motivated a myriad of Blockchain applications, a signiﬁcant
subset of these application scenarios require Blockchain
systems to provide additional guarantees on data privacy and
conﬁdentiality. Several recent data breach incidents [1], [2],
[3], [4], [5], [6], exempliﬁed the importance of meeting such
requirements. In addition, many applications also demand
auditability of transactions in the underlying Blockchain
systems, so that transactions on a Blockchain network can
be audited without infringing data privacy. For example, in
a stock exchange market, sellers and buyers may not want
to reveal trading details to others, yet auditors need to be
able to independently verify all transactions.
Blockchain networks can be permissioned or permission-
less. Both types of systems can preserve data privacy to some
extent. Some permissionless systems, such as Bitcoin [7],
Ripple [8], Digital Asset [9], and Stellar [10], preserve
privacy by keeping the hashes of transaction data on chain,
∗Ting Dai and Hui Kang contributed equally to this work.
†Part of the work was done during an internship at IBM Research.
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00061
543
while storing plain transaction data off chain. Lacking sup-
port of auditing on-chain data, these systems have to allow
external auditor to access their private off-chain data and
risk exposing sensitive information. Other permissionless
systems, such as Zcash [11], [12], Ethereum [13], and Conﬁ-
dential Transactions and Assets [14], [15] use cryptographic
commitment schemes to obscure transaction information.
However, these systems either require a trusted setup or
reveal the transaction graph (sending and receiving parties
in a transaction) to all network members. In general, none
of the existing permissionless blockchain systems preserves
full data privacy and support auditability at the same time.
Permissioned blockchains, such as Hyperledger Fab-
ric [16] and Quorum [17], preserve data conﬁdentiality and
privacy via private channels (or peer networks) by enforcing
access control, so that only admitted channel participants
can access its resources (e.g., chaincodes, transactions, and
ledger states). Such private channels do not support privacy-
preserving audit by default.
Auditable privacy-preserving transaction, also known as
zero-knowledge asset transfer [18], is a model designed for
the aforementioned application scenarios. It allows members
to exchange assets and to record transactions in the shared
ledger, without revealing the fact that they are transacting,
with whom they are transacting, or the transaction amount.
With zero-knowledge asset transfer, each user can assign
auditors to access all of their transactions. An auditor can
validate the legitimacy of the user’s transactions, without
violating the user’s privacy.
Existing solutions to this problem, such as Solidus [19]
and zkLedger [20], support auditability by using either
publicly-veriﬁable oblivious RAM machines (PVORM) or
audit
tokens. Solidus only works in bank-intermediated
systems where a modest number of banks maintain a large
number of user accounts. It exposes the transaction graph
between users and their afﬁliated banks, as well as the trans-
action graph among the banks. Moreover, Solidus enables
public auditing by revealing all keys used in the system to
an auditor, therefore it does not fully protect user privacy.
zkLedger supports private auditing, but in an inefﬁcient
manner: it requires auditors and all participants to actively
validate and commit each transaction sequentially, which
signiﬁcantly reduces the overall throughput of transaction.
In this paper, we present FabZK, an extension to the
Hyperledger Fabric that enables complete protection of
data integrity, privacy, and conﬁdentiality. FabZK realizes
efﬁcient, privately auditable, and privacy-preserving peer-to-
peer transactions by designing a set of Non-Interactive Zero-
Knowledge (NIZK) proofs on Pedersen commitments [21].
To improve throughput, we introduce a two-step validation
approach to support concurrent transactions. In FabZK, each
participant conducts active and lightweight auto-validation,
when a transaction is appended to the public ledger. An
auditor periodically monitors ledger activities and validates
transactions based only on the encrypted data and proofs.
Our work makes the following contributions:
• We develop a theoretical model via Pedersen com-
mitments and reﬁned NIZK proofs (Section III). The
augmented NIZK proofs provide strong transaction
privacy, public veriﬁability, and provable auditing.
• We design an application development framework, in-
cluding APIs, on top of Fabric (Section IV). This allows
application developers to easily create auditable and
privacy-preserving blockchain applications.
• We implement the proposed model into a real-world so-
lution, i.e., FabZK, and introduce various optimizations
to achieve reasonable performance (Section V).
• We compare FabZK with state-of-the-art approaches
such as zk-SNARKs, native Fabric, and zkLedger
(Section VI). Our evaluation shows that FabZK of-
fers superior performance trade-offs. FabZK is more
efﬁcient than zk-SNARKs in generating and verifying
proofs. Compared to the native Fabric system, it enables
auditable privacy-preserving transactions at the cost of
3% to 32% throughput loss and less than 10% latency
increase. Compared to zkLedger, FabZK’s throughput
is up to 180× higher.
We discuss background in Section II, present related work
in Section VII, and ﬁnally conclude in Section VIII.
II. BACKGROUND
In this section, we provide some background of the Hyper-
ledger Fabric, and discuss the key concepts in FabZK design,
i.e., conﬁdential transactions and anonymity schemes.
A. Hyperledger Fabric
Hyperledger Fabric is a permissioned blockchain system
for recording transactions between organizations. In Fabric,
organizations form consortia and transact with each other on
private channels. Fabric provides access control mechanism,
so that the data and resources on a private channel can only
be accessed by admitted organizations.
Business logic shared by a consortium of organizations
is programed as chaincode, also known as smart contract.
Chaincode enables different parties to automate tasks that
(cid:3)(cid:15)(cid:8)(cid:1)(cid:21)(cid:19)(cid:9)(cid:18)
(cid:2)(cid:13)(cid:12)(cid:9)(cid:15)(cid:20)(cid:1)(cid:7)(cid:16)(cid:8)(cid:9)
(cid:2)(cid:11)(cid:6)(cid:12)(cid:15)(cid:7)(cid:16)(cid:8)(cid:9)
(cid:9)(cid:23)(cid:9)(cid:7)(cid:21)(cid:20)(cid:12)(cid:16)(cid:15)
(cid:4)(cid:18)(cid:8)(cid:9)(cid:18)(cid:12)(cid:15)(cid:10)(cid:1)
(cid:19)(cid:9)(cid:18)(cid:22)(cid:12)(cid:7)(cid:9)
(cid:5)(cid:6)(cid:13)(cid:12)(cid:8)(cid:6)(cid:20)(cid:9)(cid:1)(cid:24)(cid:1)
(cid:21)(cid:17)(cid:8)(cid:6)(cid:20)(cid:9)(cid:1)(cid:19)(cid:20)(cid:6)(cid:20)(cid:9)
(cid:2)(cid:13)(cid:12)(cid:9)(cid:15)(cid:20)
(cid:3)(cid:15)(cid:8)(cid:16)(cid:18)(cid:19)(cid:9)(cid:18)
(cid:4)(cid:18)(cid:8)(cid:9)(cid:18)(cid:9)(cid:18)
(cid:2)(cid:16)(cid:14)(cid:14)(cid:12)(cid:20)(cid:20)(cid:9)(cid:18)
Figure 1: Components and data ﬂow in Hyperledger Fabric.
are traditionally performed through an external intermedi-
ary [22]. Organizations in the same consortium execute
identical chaincode to process transactions, produce and
store data on an immutable shared ledger.
Unlike the traditional order-execute architecture adopted
in systems such as Tendermint [23] and Chain [24], Fabric
introduces the execute-order-validate blockchain architec-
ture. This architecture supports concurrent execution and
post-ordering determinism through pluggable consensus al-
gorithms [25], [26]. Speciﬁcally, transaction data are com-
puted by peers concurrently, forwarded to the ordering
service, disseminated to all other peers and appended to their
immutable ledgers. Figure 1 illustrates the above data ﬂow,
along with following key components in a Fabric network:
invokes chaincode execution by submitting a
transaction proposal
then
collects the signed endorsements in the proposal, as-
sembles a transaction, and broadcasts it to the orderer.
A client can subscribe to a channel to receive updates
from the ledger (e.g., a new transaction block being
committed).
to the endorser nodes. It
• Client
• Endorser runs chaincode and creates transaction en-
dorsement, which includes a write set with state updates
produced by simulating the transaction proposal, a read
set capturing the version dependencies of the proposal
simulation, and the endorser’s signature.
• Orderer establishes the total order of transactions in
a channel, batches transactions into blocks, and dis-
tributes them to all committers in the channel.
• Committer validates each transaction in a block by
checking its compliance to endorsement policy and any
read-write conﬂicts. Then it appends the transaction to
the ledger.
Since the endorser, orderer, and committer are deployed
on the Fabric platform, they are considered on-chain com-
ponents. In contrast, the client is not part of the deployment
and is thus running off chain. Client code interacts with the
Fabric platform through its SDK [27], [28], [29]. The shared
ledger is replicated on each peer node which can contain an
endorser, a committer, or both.
Although the consortium-based Fabric contains a certain
degree of knowledge about each user, member organizations
may still want to keep the actual transactions private, due to
business or privacy concerns. This underlies the necessity to
enable conﬁdential transactions in Fabric with anonymity.
544
B. Conﬁdential Transaction and Anonymity Schemes
A. NIZK Proofs
On a private channel, transaction details are visible to
all members, regardless of their involvement in the transac-
tion. We aim to develop schemes to prevent non-involving
organizations (which we call hereafter non-transactional
organizations) from accessing transaction details, such as
transaction amount and transactional organizations (i.e.,
sender and receiver), from the ledger. Meanwhile, we also
need these schemes to be auditable. To achieve this goal,
we adopt and extend three existing techniques in FabZK:
tabular structured ledger [20], Pedersen commitments [21],
and NIZK proofs [30].
A tabular structured ledger is an anonymity scheme pro-
posed in zkLedger [20] to conceal the transaction graph
and to prevent an organization from hiding assets on the
ledger. It maintains a two-dimensional table, where each row
represents a single transaction and each column represents
the transaction history of an organization. For example, a
tabular structured ledger for an N-organization channel has
N columns, and has M rows if M transactions in total have
occurred on this channel.
To hide the transaction amount u, a Pedersen commit-
ment [21] is computed for u with a random number r by
Com = com(u, r) = g
u
r
,
h
(1)
where g and h are two random generators of a cyclic
group G with s = |G| elements and prime order p,
Zp = {0, 1, . . . , s − 1}, u ∈ Zp, and r ∈ Zp.
An outsider cannot tell the transaction amount from a Ped-
ersen commitment, or whether it is positive, negative, or 0.
In addition, as long as Pedersen commitments are computed
for both transactional and non-transactional organizations,
it is impossible to identify the sender and receiver of a
transaction, so that the transaction graph is also concealed.
To support audit, an audit token is assigned to a Pedersen
commitment com(u, r):
Token = pkr
,
(2)
where pk is the public key of an organization, pk = hsk, sk
is the private key of the organization, r and h are the same
as in Equation (1).
With transactions encrypted as Pedersen commitments,
our system need to allow validation and auditing over the
encrypted data. This is achieved by a set of NIZK proofs.
We describe these proofs in detail in Section III.
III. PRELIMINARIES
In this section, we design NIZK proofs required for au-
diting encrypted transaction data, and introduce their usage
in private and public ledgers, in our FabZK system.
In FabZK,
the spending organization (i.e., sender) is
responsible for creating commitments, tokens, and NIZK
proofs for other organizations or an auditor to verify. With-
out loss of generality, we assume that each transaction has
one spending and one receiving organization throughout the
paper.1
Proof of Balance is a known method for verifying the
i=1 ui = 0
overall balance in a single transaction row, i.e.,
(N is the number of columns). It validates the commitments
in a row by leveraging the homomorphism of Pedersen
i=1 ri ). The
commitment, i.e.,
i=1 ri = 0 to generate the
prover chooses ri that satisﬁes
commitments in Equation (1). The veriﬁer checks whether
i=1 Comi = 1 in that row. If this condition holds, then the
i=1 Comi = (g
i=1 ui )·(h
(cid:2)N
(cid:2)N
(cid:3)N
(cid:2)N
(cid:2)N
(cid:3)N
ledger is proved to be balanced.
Proof of Correctness prevents an organization from making
an incorrect or fraudulent transaction to steal assets from
others.
To verify the correctness of the amount of a transfer txm
(m is the index of current transaction), each organization
uses the audit token to check if
Tokenm · gsk·um = (Comm)sk
,
(3)
where sk is the organization’s private key and um is its trans-
action amount. For non-transactional organizations, they are
aware of the existence of txm, but are not involved in txm,
thus their transaction amount is 0. If any organization fails