title:Keeping data secret under full compromise using porter devices
author:Christina P&quot;opper and
David A. Basin and
Srdjan Capkun and
Cas J. F. Cremers
Keeping Data Secret under Full Compromise
using Porter Devices
Christina Pöpper
System Security Group
Computer Science
ETH Zurich
PI:EMAIL
Srdjan ˇCapkun
Computer Science
System Security Group
ETH Zurich
PI:EMAIL
David Basin
Information Security Group
Computer Science
PI:EMAIL
ETH Zurich
Cas Cremers
Information Security Group
Computer Science
ETH Zurich
PI:EMAIL
ABSTRACT
We address the problem of conﬁdentiality in scenarios where the
attacker is not only able to observe the communication between
principals, but can also fully compromise the communicating par-
ties (their devices, not only their long term secrets) after the con-
ﬁdential data has been exchanged. We formalize this problem and
explore solutions that provide conﬁdentiality after the full compro-
mise of devices and user passwords. We propose two new solutions
that use explicit key deletion and forward-secret protocols com-
bined with key storage on porter devices. Our solutions provide the
users with control over their privacy. We analyze the proposed so-
lutions using an automatic veriﬁcation tool. We also implement a
prototype using a mobile phone as a porter device to illustrate how
the solution can be realized on modern platforms.
Categories and Subject Descriptors
C.2 [Computer Systems Organization]: Computer-Communication
Networks; K.6.5 [Management of Computing and Information
Systems]: Security and Protection—Unauthorized access
General Terms
Design, Security
Keywords
Security Protocol, System Security, Full Compromise
1.
INTRODUCTION
Conﬁdential communication is a basic security requirement for
modern communication systems. Solutions to this problem pre-
vent an attacker that observes the communication between two par-
ties from accessing the exchanged data. We address a related, but
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
harder, problem in a scenario where the attacker is not only able to
observe the communication between the parties, but can also fully
compromise these parties at some time after the conﬁdential data
has been exchanged. If a protocol preserves conﬁdentiality under
such attacks, we say that it provides forward secrecy under full
compromise. This is a stronger notion than forward secrecy [18],
which guarantees conﬁdentiality when participants’ long-term se-
crets (but not their devices or passwords) are compromised. For
example, a subpoena is issued and the communication parties must
relinquish their devices and secrets after (e. g., e-mail) communica-
tion took place. In this scenario, the parties would like to guarantee
that the authorities cannot access the exchanged information, even
when given full access to devices, backups, user passwords, and
keys, including all session keys stored on the devices.
Assuming public communication channels, any solution to the
above problem must ensure that the communication is encrypted to
prevent eavesdropping. The challenge in solving this problem is the
appropriate management and deletion of the keys used to encrypt
the data. Several solutions to this problem have been proposed.
First, the Ephemerizer system [28] stores the encryption keys on a
physically separate, trusted server accessible by all communicating
parties. A drawback of this approach is that trust is placed in one
entity, whose compromise would be disastrous for all parties using
its services (e. g., companies and individuals). To address this con-
cern, [21] proposes using Distributed Hash Table (DHT) networks
for key storage and deletion, thereby removing trust from a cen-
tral entity. This system, however, only provides probabilistic key
deletion without guarantees on the deletion times of stored keys.
Furthermore, researchers have shown how to attack this prototype
implementation using Sybil attacks on DHTs, which enabled the at-
tackers to reconstruct keys [36]. This attack highlights the problem
of delegating key deletion to arbitrarily selected, untrusted nodes.
In this work, we formalize the problem of forward secrecy under
full compromise and explore new solutions that provide conﬁden-
tially after the compromise of devices and user passwords. Our so-
lutions rely on the existence of trusted, reliable porter devices that
manage encryption keys. We do not require that the principals trust
one central server but enable the receivers to select their own key
storage devices (based on their trust). We thus enable users to con-
trol their own privacy. Although it might seem that – given trusted
porter devices – solutions to this problem would be simple, they
turn out to be surprisingly complex. This complexity stems from
(i) the need to ensure that the protocols do not allow key reconstruc-
Figure 1: Timeline for time-limited data. Data can be accessed until its expiration time te + ∆max, where te relates to the sender’s clock
and ∆max is the maximal clock difference of the receiver with respect to the sender. After time te + ∆max, data must be inaccessible to all
parties, even under full system compromise.
tion under full compromise and (ii) the need to provide guarantees
on the key deletion. Abstractly, our solutions use forward-secret
subprotocols, session keys with different lifetimes, and timed, ex-
plicit key deletion as building blocks to achieve forward secrecy
under full compromise. This prevents data access by all parties,
including attackers, after a well-deﬁned time. The requirement of
guaranteed deletion motivates our use of porter devices: they en-
able timely key deletion even if the communication devices (e. g.,
PCs, laptops) cannot be guaranteed to be active.
Our main contributions are as follows. First, we formalize the
concept of forward secrecy under full compromise. Second, we
present two practical solutions to achieve it. Third, we formally
analyze the presented solutions using an automatic veriﬁcation tool
[15]. Finally, we analyze their practical feasibility with a prototype
implementation, using a mobile phone as porter device. We thus
illustrate how the solution can be realized on modern platforms and
how practical considerations can be handled.
The remainder of this paper is organized as follows. In Section 2,
we specify the system requirements and our system and attacker
models. In Section 3, we motivate our solution. We present our
solution and formally analyze its properties in Section 4. In Sec-
tion 5, we examine possible realizations and describe our prototype
implementation. We discuss related work in Section 6 and draw
conclusions in Section 7.
2. SYSTEM SPECIFICATION
2.1 Requirement Speciﬁcation
Our goal is to design a system that provides data access only
during a deﬁned time period and afterward prevents access for all
parties. We ﬁrst introduce some key notions, which are illustrated
in Figure 1.
Deﬁnition 1. The sender speciﬁes data as time-limited by as-
signing a time after which the data must be inaccessible to the
sender, the receiver, and any other party. We denote this time by
te, also called the expiration time.
We note that te is relative to the sender’s local clock.
Deﬁnition 2. During the lifetime of time-limited data, autho-
rized access is granted only to parties that the sender selects as
authorized to access the data.
Our system shall meet the following security requirement:
R1 Time-dependent access control: The time-limited data is
inaccessible outside of the lifetime period speciﬁed by the
sender.
(a) During the data lifetime, only authorized access shall
be granted.
(b) After the data lifetime, no data access is possible for
any party. This includes the sender, the receiver, and
any compromised party.
We also deﬁne a functional requirement:
R2 Data availability: Given the successful communication be-
tween the sender and an authorized receiver (i. e., messages
reach the intended recipient), the receiver can access the data
during its lifetime.
2.2 System model
We consider the setting where a sender wants to transfer time-
limited data to one or more receivers (the authorized recipients).
The transfer may use any communication medium and include dif-
ferent applications, e. g., email exchange or server upload and down-
load. A special case is the local storage of time-limited data as a
form of self-communication involving only the sender. We make
the following four assumptions:
Trusted communication partners. Communication partners,
also called principals, follow the protocol. In particular, their de-
vices timely and safely delete1 data and they do not reveal time-
limited data or keys in ways not speciﬁed by the protocol. Princi-
pals may shut down their communication devices and resume com-
munication later, i. e., their devices need not be online at all times.
Authenticated communication. The sender and the receiver
can communicate authentically. This may be achieved using pre-
shared secret keys or authentic, pre-distributed (long-term) public
keys. Pre-shared secrets are used to generate and verify message
authentication codes (MACs) whereas long-term public keys are
used for signature veriﬁcation.
Trusted storage device. There exists a reliable device with an
independent clock used for data (key) storage. Typical instances of
such devices are built-in Trusted Platform Modules (TPMs), Hard-
ware Security Modules (HSMs), or any external device, such as
mobile phones, PDAs, or (e-banking) smartcards with readers (see
also Section 5). Throughout this paper, we call this device a porter
and denote it P . In our solution, the porter must be trusted in three
ways: (i) P supports authentic communication, e. g., using authen-
tic public keys or a physically secure channel, (ii) P supports the
conﬁdential storage and retrieval of data (in our protocols by the re-
ceiver), and (iii) P is regularly active and can provide autonomous,
permanent erasure of stored data at speciﬁed times (or its inacces-
sibility after speciﬁed times).
In general, the simpler the porter
1We assume that the principals use secure deletion [24,33] prevent-
ing data restoration.
dataaccessperioddataaccessimpos-tdatalifetimesibleforallpartiesThreatmodel:FullcompromiseattackerDolev-Yao(network)attackerreceiverRsenderStR:receivergetsdatate+∆maxtS:sendersendsdatate:expirationtimeforauthorizedpartiesdevice, the less complex its key deletion operation will be. At the
same time, simple porter devices are, in general, more controllable
and less error-prone than complex, general-purpose devices. We
thus envision TPMs or dedicated smartcards as porters for corpo-
rate use and mobile phones or PDAs for (less critical) private use.
Loose time synchronization. The sender S, the receiver R, and
the porter P are loosely time-synchronized. The local clock dif-
ferences between the sender and the other principals at the data
expiration time do not exceed ∆max: when S’s clock hits te, R’s
and P ’s clocks are between te− ∆max and te + ∆max. The princi-
pals’ devices are not required to remain synchronized within ∆max
throughout the lifetime of the data but just at the expiration time.
Time-limited data should be accessible at least until te−∆max and
be inaccessible after te + ∆max.
2.3 Attacker model
We consider a two-phased attacker model. Our main aim is to
model attackers capable of full compromise (introduced below),
which models for example court orders or subpoenas. If such an
attacker is present during the data access period, all protocols that
require the data to be in the (accessible) device’s memory are triv-
ially insecure. We therefore design our protocols to provide secu-
rity guarantees with respect to a two-phase attacker model (Fig-
ure 1): (i) before and during the data access period (deﬁned by the
sender), we consider a strong network (Dolev-Yao [19] type) at-
tacker, and (ii) after the data access period, we consider an even
stronger attacker capable of full compromise. Let U be the set of
users authorized to access the transmitted data before its expiration
time te.
Attacker model for t ≤ te + ∆max: Active external attacker.
The attacker controls the network and may eavesdrop, intercept,
inject, and block messages, but she has no control over the de-
vices of users from the set U. Users not in U may collude with
the attacker and deviate from the protocol description. This at-
tacker model corresponds to the standard Dolev-Yao model and is
applicable to communication systems comprising ISPs, web mail
providers, proxies, relay nodes, etc.
Attacker model for t > te + ∆max: Full Compromise. In ad-
dition to controlling the network, the attacker completely controls
the users’ devices, including porter devices, and can compromise
users’ passwords and passphrases. The attacker can access and
change all data stored on the devices and backups, possibly sup-
ported by court orders or subpoenas that oblige users to disclose
data. In particular, she may compromise the principals’ keys, in-
cluding long-term and ephemeral secret keys, and she can coerce
users to reveal the passwords used to secure decryption keys. We
refer to this model as full compromise. This model is stronger than
the Dolev-Yao model in that it allows the compromise of all data
on the devices, including the data protected by user-selected pass-
words.
This two-phase attacker model is very strong. In many practical
settings, the ﬁrst-phase attacker will be weaker than a Dolev-Yao
attacker. For example, it may be reasonable to assume that even
in case of a subpoena after te + ∆max, only communication logs
were recorded in the phase before te + ∆max (e. g., by web mail or
internet service providers), but no active attack was mounted. In-
deed, such attacks often make evidence inadmissible. The concept
of a phased attacker model also allows us to deﬁne other attackers
that are stronger than the Dolev-Yao attacker in the ﬁrst phase. In
some scenarios the attacker might use a cryptographic attack to ac-
cess principals’ long-term secrets before getting full access to the
devices at te + ∆max. Although this is not part of our core attacker
model, our solution even resists some attacks of this nature.
3. SOLUTION SPACE
In this section, we explore the space of possible systems that
meet the requirements given in Section 2. We also introduce and
categorize related work and motivate our solution.
Data transmitted over an open network cannot, in general, be ex-
plicitly deleted since the sender does not have access to (and may
not even be aware of) all existing copies. Hence the sender must
encrypt data before transmission to protect its conﬁdentiality. Since
an attacker (as deﬁned in Section 2.3) may have full access to all de-
vices after the data expiration time, data must also never be stored
in plaintext on any device where it could possibly still reside after
the time te + ∆max. As principals can communicate authentically,
they can use public-key cryptography to establish secret (session)
keys over open networks and use the resulting keys to secure sub-
sequent communication. The solution space therefore amounts to
different ways of creating, managing, and deleting decryption keys.
Intuitive Approaches. We ﬁrst look at two approaches for key
management and deletion that appear intuitive but are inappropriate
as solutions.
(1) The sender and receiver delete the established key imme-
diately after the encryption and decryption phases, respec-
tively.
This approach does not fulﬁll requirement R1.b (Section 2) if the
encrypted data sent by the sender S arrives at receiver R after te +
∆max or if it never arrives at R (e. g., due to message blocking or
delay attacks, transmission failures, or R being ofﬂine / inactive).
In this case, the pre-agreed key K remains stored on R because the
receiver never starts the decryption phase. This reveals the time-
limited data under full compromise after te + ∆max.
(2) The sender and receiver delete the key at its lifetime expira-
tion te, e. g., using a job or task scheduler such as Cron.
This does not guarantee requirement R1.b because these automated
tasks are not guaranteed to succeed. For example, users’ personal
computers usually have periods of inactivity during which they
are turned off or they may have to be handed in for repair.
In
such cases, R may be turned off at the expiration time and sys-
tem processes cannot erase expired keys from the device memory
and disks.
From the above considerations, we conclude that the key K used
to encrypt the time-limited data cannot be stored on either S or R.
Hence it must be stored externally.
Related Work. We brieﬂy review selected related work to il-