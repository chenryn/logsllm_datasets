investigation.
Acknowledgements
The authors gratefully acknowledge helpful discussions with Tibor Jager.
References
[1] M. R. Albrecht, K. G. Paterson, and G. J. Watson. Plaintext recovery attacks against SSH.
In 2009 IEEE Symposium on Security and Privacy, pages 16–26. IEEE Computer Society
Press, May 2009.
[2] J. Alves-Foss. Multi-protocol attacks and the public key infrastructure. In Proc. 21st
National Information Systems Security Conference, pages 566–576, October 1998.
[3] R. J. Anderson and R. M. Needham. Robustness principles for public key protocols. In
D. Coppersmith, editor, CRYPTO’95, volume 963 of LNCS, pages 236–247. Springer, Aug.
1995.
[4] S. Andova, C. Cremers, K. Gjøsteen, S. Mauw, S. F. Mjølsnes, and S. Radomirovi´c. A
framework for compositional veriﬁcation of security protocols. Information and Computation,
206:425–459, 2008.
[5] G. Bela and I. Ignat. Verifying the independence of security protocols. In Proc. 2007 IEEE
International Conference on Intelligent Computer Communication and Processing, pages
155–162. IEEE, 2007.
[6] M. Bellare, T. Kohno, and C. Namprempre. Breaking and provably repairing the SSH
authenticated encryption scheme: A case study of the encode-then-encrypt-and-MAC
30
paradigm. ACM Transactions on Information and System Security, 7(2):206–241, May
2004. Extended abstract published in ACM CCS 2002.
[7] M. Bellare and P. Rogaway. Entity authentication and key distribution. In D. R. Stinson,
editor, CRYPTO’93, volume 773 of LNCS, pages 232–249. Springer, Aug. 1993.
[8] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P.-Y. Strub. Implementing TLS
with veriﬁed cryptographic security. In 2013 IEEE Symposium on Security and Privacy,
pages 445–459. IEEE Computer Society Press, May 2013.
[9] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and S. Zanella B´eguelin.
Proving the TLS handshake secure (as it is). In J. A. Garay and R. Gennaro, editors,
CRYPTO 2014, Part II, volume 8617 of LNCS, pages 235–255. Springer, Aug. 2014.
[10] C. Brzuska, M. Fischlin, N. P. Smart, B. Warinschi, and S. C. Williams. Less is more: Relaxed
yet composable security notions for key exchange. International Journal of Information
Security, 12(4):267–297, August 2013.
[11] R. Canetti. Universally composable security: A new paradigm for cryptographic protocols.
In 42nd FOCS, pages 136–145. IEEE Computer Society Press, Oct. 2001.
[12] R. Canetti and H. Krawczyk. Analysis of key-exchange protocols and their use for building
secure channels. In B. Pﬁtzmann, editor, EUROCRYPT 2001, volume 2045 of LNCS, pages
453–474. Springer, May 2001.
[13] R. Canetti, C. Meadows, and P. Syverson. Environmental requirements for authentication
protocols. In M. Okada, B. C. Pierce, A. Scedrov, H. Tokuda, and A. Yonezawa, editors,
Proc. Mext-NSF-JSPS Internaional Symposium on Software Security (ISSS) – Theories
and Systems, Part 9, volume 2609 of LNCS, pages 339–355. Springer, 2002.
[14] C. J. F. Cremers. Feasibility of multi-protocol attacks. In Proc. 1st International Conference
on Availability, Reliability, and Security (ARES) 2006, pages 287–294. IEEE, 2006.
[15] A. Datta, A. Derek, J. C. Mitchell, and D. Pavlovic. Secure protocol composition. Electronic
Notes in Theoretical Computer Science, 83(15), 2004.
[16] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC
5246 (Proposed Standard), Aug. 2008. Updated by RFCs 5746, 5878, 6176.
[17] F. Giesen, F. Kohlar, and D. Stebila. On the security of TLS renegotiation. In A.-R.
Sadeghi, V. D. Gligor, and M. Yung, editors, ACM CCS 13, pages 387–398. ACM Press,
Nov. 2013.
[18] J. D. Guttman and F. J. Thayer Fabrega. Protocol independence through disjoint encryption.
In Proceedings 13th IEEE Computer Security Foundations Workshop (CSFW-13), pages
24–34. IEEE, 2000.
[19] B. Harris. RSA Key Exchange for the Secure Shell (SSH) Transport Layer Protocol. RFC
4432 (Proposed Standard), Mar. 2006.
[20] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk. On the security of TLS-DHE in the
standard model. In R. Safavi-Naini and R. Canetti, editors, CRYPTO 2012, volume 7417
of LNCS, pages 273–293. Springer, Aug. 2012.
[21] T. Jager, K. G. Paterson, and J. Somorovsky. One bad apple: Backwards compatibility
attacks on state-of-the-art cryptography. In Proc. Internet Society Network and Distributed
System Security Symposium (NDSS) 2013, 2013.
31
[22] J. Jonsson and B. S. Kaliski Jr. On the security of RSA encryption in TLS. In M. Yung,
editor, CRYPTO 2002, volume 2442 of LNCS, pages 127–142. Springer, Aug. 2002.
[23] J. Kelsey, B. Schneier, and D. Wagner. Protocol interactions and the chosen protocol attack.
In B. Christianson, B. Crispo, M. Lomas, and M. Roe, editors, Proc. 5th International
Workshop on Security Protocols, volume 1361 of LNCS, pages 91–104. Springer, 1997.
[24] F. Kohlar, S. Sch¨age, and J. Schwenk. On the security of TLS-DH and TLS-RSA in the
standard model. Cryptology ePrint Archive, Report 2013/367, 2013. http://eprint.iacr.
org/2013/367.
[25] H. Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme. In T. Rabin,
editor, CRYPTO 2010, volume 6223 of LNCS, pages 631–648. Springer, Aug. 2010.
[26] H. Krawczyk, K. G. Paterson, and H. Wee. On the security of the TLS protocol: A
systematic analysis. In R. Canetti and J. A. Garay, editors, CRYPTO 2013, Part I, volume
8042 of LNCS, pages 429–448. Springer, Aug. 2013.
[27] B. A. LaMacchia, K. Lauter, and A. Mityagin. Stronger security of authenticated key
exchange. In W. Susilo, J. K. Liu, and Y. Mu, editors, ProvSec 2007, volume 4784 of LNCS,
pages 1–16. Springer, Nov. 2007.
[28] N. Mavrogiannopoulos, F. Vercauteren, V. Velichkov, and B. Preneel. A cross-protocol
attack on the TLS protocol. In T. Yu, G. Danezis, and V. D. Gligor, editors, ACM CCS 12,
pages 62–72. ACM Press, Oct. 2012.
[29] P. Morrissey, N. P. Smart, and B. Warinschi. A modular security analysis of the TLS
handshake protocol. In J. Pieprzyk, editor, ASIACRYPT 2008, volume 5350 of LNCS,
pages 55–73. Springer, Dec. 2008.
[30] K. G. Paterson, T. Ristenpart, and T. Shrimpton. Tag size does matter: Attacks and
proofs for the TLS record protocol. In D. H. Lee and X. Wang, editors, ASIACRYPT 2011,
volume 7073 of LNCS, pages 372–389. Springer, Dec. 2011.
[31] K. G. Paterson and G. J. Watson. Plaintext-dependent decryption: A formal security
treatment of SSH-CTR. In H. Gilbert, editor, EUROCRYPT 2010, volume 6110 of LNCS,
pages 345–361. Springer, May 2010.
[32] D. Stebila and J. Green. Elliptic Curve Algorithm Integration in the Secure Shell Transport
Layer. RFC 5656 (Proposed Standard), Dec. 2009.
[33] F. J. Thayer Fabrega, J. Herzog, and J. D. Guttman. Mixed strand spaces. In Proceedings
12th IEEE Computer Security Foundations Workshop (CSFW-12), pages 72–82, 1999.
[34] W.-G. Tzeng and C.-M. Hu. Inter-protocol interleaving attacks on some authentication and
key distribution protocols. Information Processing Letters, 69(6):297–302, March 1999.
[35] D. Wagner and B. Schneier. Analysis of the SSL 3.0 protocol. In Proc. 2nd USENIX
Workshop on Electronic Commerce, 1996.
[36] S. C. Williams. Analysis of the SSH key exchange protocol. Cryptology ePrint Archive,
Report 2011/276, 2011. http://eprint.iacr.org/2011/276.
[37] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Authentication Protocol. RFC 4252
(Proposed Standard), Jan. 2006.
[38] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Connection Protocol. RFC 4254
(Proposed Standard), Jan. 2006.
32
[39] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Protocol Architecture. RFC 4251
(Proposed Standard), Jan. 2006.
[40] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Transport Layer Protocol. RFC 4253
(Proposed Standard), Jan. 2006. Updated by RFC 6668.
A Protocol description for SSH signed-Diﬃe–Hellman cipher-
suite
This description complements Figure 1 and 4.
A.1 Negotiation
The ﬁrst two messages exchanged negotiate the ciphersuite.
1. Init → Resp: KEXINIT. The initiator is activated with a list (cid:126)spC of ciphersuite preferences,
picks a random nonce rC, generates its KEXINIT message and updates the per-session variables.
$← {0, 1}µ
1. rC
2. KEXINIT ← (rC, (cid:126)spC)
3. π.ρ ← init
4. π.α ← in-progress
2. Resp → Init: KEXREPLY. The responder picks a random nonce rS, generates its KEXREPLY
message, negotiates the optimal ciphersuite and updates the per-session variables.
$← {0, 1}µ
1. rS
2. KEXREPLY ← (rS, (cid:126)spS)
3. π.ρ ← resp
4. π.α ← in-progress
5. π.c ← neg( (cid:126)spC, (cid:126)spS);
3. Init. Upon receiving KEXREPLY, the initiator records the negotiated ciphersuite based on its
(cid:126)spC and the (cid:126)spS received from the responder:
1. π.c ← neg( (cid:126)spC, (cid:126)spS)
A.2 Signed-DH sub-protocol—all authentication modes
We deﬁne and name the i-th sub-protocol algorithm for the sub-protocol π.c that updates the
per-session variables and sends the appropriate message as according to protocol speciﬁcation as
SPπ.c.AlgIi or SPπ.c.AlgRi for the initiator and responder respectively.
4.
protocol, SPπ.c. The initiator generates and sends an ephemeral Diﬃe–Hellman key.
Init → Resp: SPπ.c.AlgI1 → KEXDH INIT. The initiator now starts the negotiated sub-
1. x $← Zqπ.c
2. e ← gx
3. KEXDH INIT ← e
π.c
5. Resp → Init: SPπ.c.AlgR1 → KEXDH REPLY and NEWKEYS. The responder generates its
ephemeral Diﬃe–Hellman key, computing a session identiﬁer and session keys, and signing a
hash of the session identiﬁer to provide authentication.
1. y $← Zqπ.c
33
π.c
2. f ← gy
3. K ← ey
4. (π.sid, π.k) ← PRFπ.c(K, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f )
5. σS ← SIGπ.c.Sign(skS,π.c, π.sid)
6. KEXDH REPLY ← (f, pkS,π.c, σS)
where PRFπ.c(K, sid) is as deﬁned in Figure 5 and (skS,π.c, pkS,π.c) denotes the server’s long-term
key pair in this sub-protocol.
The responder now also sends a distinguished message NEWKEYS indicating that all following
communication sent by the responder will be over the auth-enc channel, using StEπ.c.Enc.
6. Init → Resp : SPπ.c.AlgI2 → NEWKEYS. The initiator computes the session key and veriﬁes
server authentication. We note that this algorithm combines verifying the server authentication
(found below) with sending the appropriate authentication message AUTHREQUEST.
1. K ← f x
2. (π.sid, π.k) ← PRFπ.c(K, VC(cid:107)VS(cid:107)KEXINIT(cid:107)KEXREPLY(cid:107)pkπ.c(cid:107)e(cid:107)f )
3. If SIGπ.c.Vfy(pkS,π.c, σS, π.sid) = 0, then set π.α ← reject and terminate.
4. π.pid ← S, where PS is the party with public key pkS,π.c
The initiator also sends a distinguished message NEWKEYS indicating that all following
communication sent by the initiator will be over the auth-enc channel.
A.3 Sub-protocol—no client authentication
7. Init → Resp: SPπ.c.AlgI2 → AUTHREQUEST.
In server-only authentication mode, the client
does not perform public key authentication. It still sends a message (now over the auth-enc
channel) indicating its username and a request for access without public key authentication.
1. AUTHREQUEST ← username(cid:107)service(cid:107)none
8. Resp → Init: SPπ.c.AlgR2 → AUTHSUCCESS or AUTHFAILURE.
If username is allowed
access to service without authentication, the responder sets π.α ← accept; otherwise, it
sets π.α ← reject. Note that even if the server accepts, it leaves π.pid = ⊥ to indicate an
unauthenticated peer.
1. If π.α = accept, send AUTHSUCCESS.
2. If π.α = reject, send AUTHFAILURE and terminate.
If the initiator receives AUTHFAILURE over the auth-enc channel, it sets
11. Init: SPπ.c.AlgI3.
π.α ← reject and terminates. If it receives AUTHSUCCESS, it sets π.α ← accept.
12. Init ↔ Resp: Application data. The initiator and responder can now exchange applica-
tion data over the auth-enc channel.
A.4 Sub-protocol—password client authentication
7. Init → Resp: SPπ.c.AlgI2 → AUTHREQUEST.
the client sends its password pw over the auth-enc channel.
1. AUTHREQUEST ← username(cid:107)service(cid:107)pw(cid:107)pw
In mutual authentication mode using a password,
8. Resp → Init: SPπ.c.AlgR2 → AUTHSUCCESS or AUTHFAILURE.
If username is allowed to
access service based on password pw, the responder sets π.α ← accept; otherwise, it sets
π.α ← reject. Note that if the server accepts, it sets π.pid = C, where PC is username.
The server responds with a status message, sent over the auth-enc channel.
34
1. If π.α = accept, send AUTHSUCCESS.
2. If π.α = reject, send AUTHFAILURE and terminate.
If the initiator receives AUTHFAILURE over the auth-enc channel, it sets
11. Init: SPπ.c.AlgI3.
π.α ← reject and terminates. If it receives AUTHSUCCESS, it sets π.α ← accept.
12. Init ↔ Resp: Application data. The initiator and responder can now exchange applica-
tion data over the auth-enc channel.
A.5 Sub-protocol—public-key client authentication
SSH in the case of mutual authentication diﬀers from the server-only mode after the server sends
its Diﬃe–Hellman key exchange message KEXDH REPLY, namely, from message 5 onwards.
Init → Resp: SPπ.c.AlgI2 → AUTHREQUEST.
7.
In mutual authentication mode using public
keys, the initiator sends (over the auth-enc channel) an authentication request message asking to
perform client authentication using a given public key; the client does not demonstrate possession
of the corresponding private key at this point.
1. AUTHREQUEST ← username(cid:107)service(cid:107)public-key(cid:107)0(cid:107)alg(cid:107)pkC,π.c where alg is the name of
the public key algorithm (RSA, DSA, ECDSA) and pkC,π.c is the client’s public key for
this ciphersuite.
8. Resp → Init: SPπ.c.AlgR2 → AUTHOK or AUTHFAILURE.
to service by public-key authentication, it sets π.α ← reject.
If username is not allowed access
The server responds with a status message, sent over the auth-enc channel.
1. If π.α = in-progress, send AUTHOK ← alg(cid:107)pkC,π.c.
2. If π.α = reject, send AUTHFAILURE and terminate.
Init → Resp: SPπ.c.AlgI3 → AUTHREPLY. The client computes its signature of session
9.
identiﬁer and authentication information and sends it to the server over the auth-enc channel.
1. A ← username(cid:107)service(cid:107)public-key(cid:107)1(cid:107)alg(cid:107)pkC,π.c
2. σC ← SIGπ.c.Sign(skC,π.c, π.sid, A)
3. AUTHREPLY ← A(cid:107)σC
10. Resp → Init: SPπ.c.AlgR3 → AUTHSUCCESS. The responder recomputes its own A(cid:48) value to
see if it matches A, then veriﬁes the client’s signature; if these checks pass, the server accepts
and sends a success method.
1. A(cid:48) ← username(cid:107)service(cid:107)public-key(cid:107)1(cid:107)alg(cid:107)pkC,π.c
2. If A(cid:48) (cid:54)= A, then π.α ← reject.
3. If SIGπ.c.Vfy(pkC,π.c, σC, π.sid, A) = 0, then π.α ← reject.
4. If π.α = in-progress, then π.α ← accept.
5. If π.α = accept, send AUTHSUCCESS.
6. If π.α = reject, send AUTHFAILURE and terminate.
If the initiator receives AUTHFAILURE over the auth-enc channel, it sets
11. Init: SPπ.c.AlgI4.
π.α ← reject and terminates. If it receives AUTHSUCCESS, it sets π.α ← accept.
12. Init ↔ Resp: Application data. The initiator and responder can now exchange applica-
tion data over the auth-enc channel.
35