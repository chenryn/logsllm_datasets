# GitHub Security
## n|u - The Open Security Community
### Chennai Meet
- **Presenter:** Vinothkumar
- **Date:** 27/04/2019

### About Me
- Application Security Engineer at Freshworks, Inc.
- Blogger: [https://tutorgeeks.blogspot.com](https://tutorgeeks.blogspot.com)
- Twitter: [@vinothpkumar](https://twitter.com/vinothpkumar)
- GitHub: [https://github.com/tutorgeeks](https://github.com/tutorgeeks)

### Agenda for the Session
1. What is GitHub?
2. Using GitHub and GitHub Gist Search for Bug Bounty Hunting
3. Securing Wiki
4. Securing Forked Repositories
5. Security Audit Log
6. Post-Commit Security Check Using Gitrob
7. Pre-Commit Security Check Using Git Secrets
8. GitHub Security Best Practices

### 1. What is GitHub?
- **GitHub** is a code hosting platform that supports collaboration and version control.
- It allows users to work together on projects.
- With 28 million users and 57 million repositories, it is the largest host of source code in the world.
- **Parent Company:** Microsoft (since 2018)
- **Language:** Ruby

### 2. Using GitHub Search for Bug Bounty Hunting
GitHub is an excellent resource for finding credentials and private API keys. Here are some search terms to find sensitive information about your target:
- `"example.com" API_key`
- `"example.com" secret_key`
- `"example.com" aws_key`
- `"example.com" Password`
- `"example.com" FTP`
- `"example.com" login`
- `"example.com" github_token`

#### Examples:
- **PayTM:**
  - **Search Term:** `"paytm.com" "password"`
  - **Bounty Awarded:** Rs. 21,200
  - **Status:** Fixed
  - **Reference:** [Twitter](https://twitter.com/s4thi5h_infosec/status/1067004873663639552)

- **Snapchat:**
  - **Bounty Hunter:** Th3G3nt3lman
  - **Bounty Awarded:** $15,000
  - **Details:** Discovered and reported a sensitive auth token accidentally posted by a Snapchat software engineer.
  - **Reference:** [Medium](https://medium.com/@cosmobugbounty/bounty-of-the-week-15-000-snapchat-leak-af38f882d3ac)

#### Searching GitHub Gists (Often Overlooked)
- **GitHub Gist** is used to instantly share code, notes, and snippets.
- It allows the creation of public and secret gists.
- **Secret Gists:** Protected only by a token. Be cautious when creating secret gists, as developers might inadvertently make them public along with the token.
- **Search Example:** `site:gist.github.com "companyname"`

#### Case Study: Zomato - Mandate 2FA
- **Incident:** Zomato's GitHub organization was compromised using a leaked password from 000webhost.
- **Attack Details:** The attacker used the credentials to log into the Zomato GitHub account (2FA not implemented at the time) and found a Remote Code Execution (RCE) vulnerability, which they exploited.
- **Lesson Learned:** Implementing 2FA could have prevented this issue.
- **Recommendation:** Avoid using the same credentials across multiple websites.
- **Reference:** [Zomato Blog](https://www.zomato.com/blog/security-update-what-really-happened-and-what)

### 3. Securing Wiki
- **Issue:** GitHub organization accounts may contain world-editable wiki pages.
- **Solution:** Use a Python script to check GitHub accounts for world-editable wiki pages.
- **Script Reference:** [GitHub-Wiki-Auditor](https://github.com/SmeegeSec/GitHub-Wiki-Auditor)
- **Blog Reference:** [Smeegesec](https://www.smeegesec.com/2019/03/auditing-github-repo-wikis-for-fun-and.html)

### 4. Securing Forked Repositories
- **Forking:** A fork is a copy of a repository, allowing you to experiment with changes without affecting the original project.
- **Default Setting:** Forked repositories are public by default.
- **Risk:** Sensitive Personally Identifiable Information (PII) can be exposed in commits or pull requests.
- **Recommendation:** Instead of forking, create a private repository with the contents of the forked repository.

### 5. Security Audit Log
- **Purpose:** The audit log helps organization admins review actions performed by members, including who performed the action, what the action was, and when it was performed.
- **Usefulness:** Useful for debugging and internal and external compliance.
- **Reference:** [GitHub Help](https://help.github.com/en/articles/reviewing-the-audit-log-for-your-organization)

### 6. Gitrob (Post-Commit Checks)
- **Description:** A reconnaissance tool for GitHub organizations.
- **Functionality:** Helps find potentially sensitive files pushed to public repositories on GitHub.
- **Process:** Clones repositories to a configurable depth, iterates through commit history, and flags files matching signatures for potentially sensitive files.
- **Presentation:** Findings are presented through a web interface for easy browsing and analysis.
- **Reference:** [Gitrob on GitHub](https://github.com/michenriksen/gitrob)
- **Demo:**

### 7. Git Secrets (Pre-Commit Checks)
- **Description:** Prevents committing secrets and credentials into Git repositories.
- **Commands:**
  - `git secrets --scan [-r|--recursive] [--cached] [--no-index] [--untracked] [...]`
  - `git secrets --scan-history`
  - `git secrets --install [-f|--force] []`
  - `git secrets --list [--global]`
  - `git secrets --add [-a|--allowed] [-l|--literal] [--global] [...]`
  - `git secrets --add-provider [--global] [...] [arguments...]`
  - `git secrets --register-aws [--global]`
  - `git secrets --aws-provider [...]`
- **Reference:** [Git Secrets on GitHub](https://github.com/awslabs/git-secrets)
- **Demo:**

### 8. GitHub Security Best Practices
1. **Never Store Credentials in Code/Config Files on GitHub.**
2. **Remove Sensitive Data from Files and GitHub History.**
3. **Tightly Control Access.**
4. **Add a `SECURITY.md` File.**
5. **Validate Your GitHub Applications Carefully.**
6. **Add Security Testing to Pull Requests (PRs).**
7. **Use the Right GitHub Offering for Your Security Needs.**
8. **Rotate SSH Keys and Personal Access Tokens.**
9. **Create New Projects with Security in Mind.**
10. **Audit the Code/Apps You Use in GitHub.**

**Reference:** [Snyk Blog](https://snyk.io/blog/ten-git-hub-security-best-practices/)