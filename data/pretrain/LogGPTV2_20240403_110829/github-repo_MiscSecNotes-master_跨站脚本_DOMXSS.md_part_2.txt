```
依据相关规范，在浏览器中不同域下的Cookie有隔离措施，即在google.com下是不能向qq.com下设置cookie的，可以说cookie这个来源相对来说较为可靠。但万事总是不是绝对的，由于过分相信cookie这个来源，除了直接从cookie中取值作为判断用户身份的依据造成任意用户账户登录的的高危逻辑缺陷外，不安全的cookie操作方式也产生了大量的DOM-XSS。  
示例缺陷代码[1]，直接从cookie中取值写入页面或动态执行，原理基本同从URL中的取参数值写入页面或动态执行，只是换了一个取值来源而已，相信各位已经有了大概了解。但同时我们注意到，还有一种较为特殊的业务场景，同示例缺陷代码[2]：取cookie键值，动态拼接要页面引入前端资源的URL。在此场景下，工程师已经对HTML常见的特殊字符做了过滤，是不是就安全了呢？并不。一般情况下，进行转义的HTML的特殊字符如下：  
![domxss_5e](../pictures/domxss_5.png)   
在上面这个案例中，如果window.isp取到的值为 `www.attacker.com/`，最终拼接出来的静态资源URL路径为：`http://www.attacker.com/qzs.qq.com`，因为`.`和`/`都不在转义范围内，导致攻击者可以向页面引入自己站点下的恶意js文件，进而实施DOM-XSS攻击。  
常见缺陷3：从localStorage、Referer、Window name、SessionStorage中的取参数值写入页面或动态执行  
示例缺陷代码：  
``` javascript
   var payload = window.name;
      setTimeout(function() {
            trigger(window.name);
      }, 1);
      var div = document.createElement('div');
      document.documentElement.appendChild(div);
      div.innerHTML = payload;
      function trigger(payload) {
            div.innerHTML = payload;
      };
```
从localStorage、Referer、Window name、SessionStorage数据源中取数据，也时常是栽跟头的高发地。上面这段示例代码中，就首先取window.name的值，最后直接innerHTML到页面中。一般情况下，页面的window.name攻击者不可控，故往往会被认为来源相对可信。但借助iframe的name属性，攻击者可以将页面的window.name设置为攻击代码，仍然可以通过下面这段Payload，构造DOM-XSS：  
`'>`  
修复技巧  
*  写入页面前先转义。在取值写入页面或动态执行的业务场景下，在将各种来源获取到的参数值传入JavaScript“三姐妹”函数（innerHTML、document.write、eval）处理前，对传入数据中的HTML特殊字符进行转义处理能防止大部分DOM-XSS的产生。此外，根据不同业务的真实情况，还应使用正则表达式，针对传入的数据做更严格的过滤限制，才能保证万无一失。  
``` javascript
function htmlEscape(str) {
    return str
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(//g, '&gt;');
}
  Value = htmlEscape(value);
  div.innerHTML = value;
```
* 慎用危险的“eval”。需要强调的是，由于JavaScript中的eval函数十分灵活，能够支持执行的字符串编码纷繁复杂。强烈建议，不到万不得已，不要使用eval函数处理不可控的外部数据。  
``` html
在JavaScript 中可以直接通过eval 执行的字符串有八进制和十六进制 两种编码方式
另外，虽然十进制不能直接通过 eval 来执行，但可以用 String.fromCharCode 函数先对数值进行解码，然后传递给 eval 执行
``` 
### 三、 使用HTML5 postMessage进行跨域通讯  
示例缺陷代码：  
``` html
```
HTML5引入的postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。其本意是方便Web前端开发者实现跨域通讯，由于浏览器遵循同源策略（Same Origin Policy），所以如下跨域向页面写入内容的操作将会被阻断：  
``` html
```
但借助postMessage()方法，Web前端开发者就能实现跨域从site-a.net向site-b.net下页面写入内容。然而，开发者享受便利的同时，也却往往疏忽大意，忘记对postMessage的来源event.origin进行限制，导致任意域名下的页面只要通过如下代码，就可以与存在缺陷的页面进行跨域交互通讯，也再次落入DOM-XSS的深坑：  
``` html
Send Attack
```
修复技巧：  
``` javascript
window.addEventListener('message', writeMessage, false);
function writeMessage(event) {
    if (event.origin == "http://site-a.com") {
        document.getElementById("message").innerHTML = event.data;
    } else {
        return;
    }
}
```
修复此类漏洞的方法简单直接，只要在页面进行innerHTML操作前做一次even.origin的判断。当然，在innerHTML前，将event.data的数据进行一次HTML特殊字符转义，将会锦上添花，确保万无一失。 
这里是使用innerHTML 将data 写入页面，还有比如 使用 eval('var _str_json='+data); 达到 str2json 的效果，也是存在问题的。 
在查找此类漏洞时，可以chrome F12 看Element tab 右边的 Event Listeners 看是否有监听message 的事件，进一步追溯。  
### 四、使用存在缺陷的第三方库或通用组件
常见缺陷1：jQuery低版本（1.9.0以下）存在DOMXSS漏洞可导致用户身份被盗用  
![domxss_6](../pictures/domxss_6.png)  
(图：漏洞利用代码传入$()函数执行可触发漏洞)  
jQuery 是一个非常流行的JavaScript 库，但低版本的jQeury存在设计缺陷，导致引入低版本的jQuery文件之后，若对用户传入的参数值没有进行处理即传入$()函数中执行，且参数值中存在html标签，即$(‘``’)，jQuery会自动生成该html标签并加载在页面中，可导致DOMXSS漏洞。  
## 0x02 DOM-XSS通用编码方法
在"$var" 输出到&lt;script&gt; 时，应该执行一次 javascriptEncode(\xXX, \uUUUU)；其次，在document.write 输出到页面 html 页面时，要分具体情况对待：如果是输出到事件或者脚本，则要再做一次 javascriptEncode；如果是输出到 html 内容或者属性，则要再做一次 HtmlEncode。  
如下情况属于后者，即 htmlencode(jsencode($var))
``` html
var x = "$var";
document.write("test");
```
## 0x03 测试tips 分享
1)、只有使用合规的完整闭合的HTML区块对每个innerHTML节点进行赋值，因为这样才不会改变被重写段落之外的文档层级结构。如果格式不对，在重写发生之前输入的数据会先按照规定的语法进行强制转换。即通过DOM操作HTML时，可以使用`alert(/xss/)`来代替``，因为DOM会自动补全。  
2)、innerHTML只能使用类似 ``这种方式来触发JS。而不能以``来触发，因为这种压根不会执行``之间的内容。  
3)、不论怎么样，因为最终javascript都会通过document.write或innerHTML将内容输出到网页中，所以我们总是有办法看到输出到哪里，要么直接 inspect dom element，要么直接看 js 源码中哪里调用了 url 的 key Value。  
4)、有时候我们的输出，最终并没有流向innerHTML或document.write，而是与eval发生了邂逅，搜索源代码和调试工具都看不到任何东西，这时可以在请求后面跟一些特殊符号如 `\`, `"`, `'` 等，看 console 报什么错误，点击定位到具体 出错的 js 代码，进一步观察。  
5)、有时候，输出还会出现在 `` 。 iframe 的 src属性本来应该是一个网址，但是iframe之善变，使得它同样可以执行javascript，而且可以用不同的方式法来执行。iframe payload 变形如下：  
``` html
1.1 最好懂的，onload执行js
1.2 src 执行javascript代码
1.3 IE下vbscript执行代码，vbscript里 ' 单引号表示注释，类似JS里的//
1.4 Chrome下data协议执行代码
 Chrome
1.5 上面的变体
1.6 Chrome下srcdoc属性
```
6)、jsonp。``
假如 id 参数可以由我们 的 A 请求输入的参数 b 传递进来，且js在取参数时有urldecode的操作，那么我们可以传递   
`id=%26callback=alert(1)`，这样请求的 是 `http://otherdomain.com/xx?callback=aa&id=&callback=alert(1)`，
即callback 的定义被覆盖掉。  
7)、自动化扫描方面，可以直接带入 payload访问，借助 qtwebkit 引擎解析 dom 树，看解析完成的页面中是否含有 payload 中希望写入的特定标签字符串，注意先把不需要人工触发的 js 执行完，每次触发一些功能（如加关注等），就要判断一次渲染后的页面是否多出一些可疑标签。 
## Reference
[驱散前端安全梦魇——DOMXSS典型场景分析与修复指南](https://security.tencent.com/index.php/blog/msg/107) 