object called `      $user     ` [ 2 ]{.CodeAnnotation
aria-label="annotation2"} . It sets the `      $username     ` attribute
of `      $user     ` to `      'vickie'     ` [ 3 ]{.CodeAnnotation
aria-label="annotation3"} and its `      $status     ` attribute to
`      'not admin'     ` [ 4 ]{.CodeAnnotation aria-label="annotation4"}
. Then, it serializes the `      $user     ` object and prints out the
string representing the serialized object [ 5 ]{.CodeAnnotation
aria-label="annotation5"} .
这段PHP代码声明了一个名为 User 的类。每个 User 对象都包含一个 \$username
和一个 \$status 属性 1。接着，它创建了一个名为 \$user 的新的 User 对象
2。它将 \$user 的 \$username 属性设置为 \'vickie\' 3，并将其 \$status
属性设置为 \'not admin\' 4。然后，将 \$user
对象序列化并打印代表序列化对象的字符串 5。
Store this code snippet as a file named *serialize_test.php* and run it
using the command `      php serialize_test.php     ` . You should get
the serialized string that represents the `      user     ` object:
将此代码片段保存为名为serialize_test.php的文件，并使用命令php
serialize_test.php运行它。您应该会得到表示用户对象的序列化字符串：
    O:4:"User":2:{s:8:"username";s:6:"vickie";s:6:"status";s:9:"not admin";}
Let's break down this serialized string. The basic structure of a PHP
serialized string is `      data type     `{.variable} `      :     `
`      data     `{.variable} . In terms of data types, `      b     `
represents a Boolean, `      i     ` represents an integer,
`      d     ` represents a float, `      s     ` represents a string,
`      a     ` represents an array, and `      O     ` represents an
object instance of a particular class. Some of these types get followed
by additional information about the data, as described here:
让我们分解这个序列化字符串。PHP序列化字符串的基本结构是数据类型:data。在数据类型方面，b表示布尔值，i表示整数，d表示浮点数，s表示字符串，a表示数组，O表示特定类的对象实例。其中一些类型后面跟随有关数据的其他信息，如下所述：
    b:THE_BOOLEAN;
    i:THE_INTEGER;
    d:THE_FLOAT;
    s:LENGTH_OF_STRING:"ACTUAL_STRING";
    a:NUMBER_OF_ELEMENTS:{ELEMENTS}
    O:LENGTH_OF_NAME:"CLASS_NAME":NUMBER_OF_PROPERTIES:{PROPERTIES}
[ ]{#c14.xhtml#Page_234 .pagebreak title="234"} Using this reference as
a guide, we can see that our serialized string represents an object of
the class `      User     ` . It has two properties. The first property
has the name `      username     ` and the value `      vickie     ` .
The second property has the name `      status     ` and the value
`      not admin     ` . The names and values are all strings.
使用此参考作为指南，我们可以看到我们的序列化字符串表示一个User类的对象。它有两个属性。第一个属性名称为username，值为vickie。第二个属性名称为status，值为not
admin。名称和值都是字符串。
When you're ready to operate on the object again, you can deserialize
the string with `      unserialize()     ` :
当您再次准备对该对象进行操作时，您可以使用 unserialize()
将字符串反序列化：
    username = 'vickie';
      $user->status = 'not admin';
      $serialized_string = serialize($user);
    2 $unserialized_data = unserialize($serialized_string);
    3 var_dump($unserialized_data);
      var_dump($unserialized_data["status"]);
    ?>
The first few lines of this code snippet create a user object, serialize
it, and store the serialized string into a variable called
`      $serialized_string     ` [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . Then, it unserializes the string and stores
the restored object into the variable `      $unserialized_data     ` [
2 ]{.CodeAnnotation aria-label="annotation2"} . The
`      var_dump()     ` PHP function displays the value of a variable.
The last two lines display the value of the unserialized object
`      $unserialized_data     ` and its status property [ 3
]{.CodeAnnotation aria-label="annotation3"} .
这个代码片段的前几行创建了一个用户对象，并对其进行序列化，将序列化后的字符串存储在变量\$serialized_string中1。然后，它对字符串进行反序列化，并将恢复的对象存储在变量\$unserialized_data中2。var_dump（）PHP函数显示变量的值。最后两行显示未序列化对象\$unserialized_data及其状态属性的值3。
Most object-oriented programming languages have similar interfaces for
serializing and deserializing program objects, but the format of their
serialized objects are different. Some programming languages also allow
developers to serialize into other standardized formats, such as JSON
and YAML.
大多数面向对象编程语言具有类似的接口，用于序列化和反序列化程序对象，但其序列化对象的格式是不同的。一些编程语言还允许开发人员将其序列化为其他标准格式，比如JSON和YAML。
#### Controlling Variable Values {#c14.xhtml#h3-123456c14-0001}
You might have already noticed something fishy here. If the serialized
object isn't encrypted or signed, can anyone create a `      User     `
object? The answer is yes! This is a common way insecure deserialization
endangers applications.
如果序列化对象没有加密或签名，任何人都可以创建一个用户对象，这是一个不安全的反序列化危害应用程序的常见方式。
One possible way of exploiting a PHP object injection vulnerability is
by manipulating variables in the object. Some applications simply pass
in a serialized object as a method of authentication without encrypting
or signing it, thinking the serialization alone will stop users from
tampering with the values. If that's the case, you can mess with the
values encoded in the serialized string:
利用 PHP
对象注入漏洞的一种可能方法是通过操纵对象中的变量。有些应用程序为了验证身份，仅仅传递一个序列化的对象作为认证方法，而没有加密或签名它，认为仅使用序列化就足以防止用户篡改值。如果是这种情况，你可以操纵编码在序列化字符串中的值：
    username = 'vickie';
    1 $user->status = 'admin';
      echo serialize($user);
    ?>
In this example of the `      User     ` object we created earlier, you
change the `      status     ` to `      admin     ` by modifying your
PHP script [ 1 ]{.CodeAnnotation aria-label="annotation1"} . Then you
can intercept the outgoing request in your proxy and insert the new
object in place of the old one to see if the application grants you
admin privileges.
在之前我们创建的用户对象的示例中，您可以通过修改 PHP 脚本 1
中的状态来将其更改为管理者。然后，您可以拦截代理中的输出请求，并插入新对象替换旧对象，以查看应用程序是否授予您管理员权限。
You can also change your serialized string directly:
您也可以直接更改您的序列化字符串：
    O:4:"User":2:{s:8:"username";s:6:"vickie";s:6:"status";s:9:"admin";}
If you're tampering with the serialized string directly, remember to
change the string's length marker as well, since the length of your
`      status     ` string has changed:
如果直接更改序列化的字符串，请记得同时修改字符串的长度标记，因为你的状态字符串的长度已经发生了改变：
    O:4:"User":2:{s:8:"username";s:6:"vickie";s:6:"status";s:5:"admin";}
#### unserialize() Under the Hood {#c14.xhtml#h3-123456c14-0002}
To understand how `      unserialize()     ` can `     ` lead to RCEs,
let's take a look at how PHP creates and destroys objects.
了解 unserialize() 如何导致 RCE，让我们来看看 PHP 如何创建和销毁对象。
*PHP magic methods* are method names in PHP that have special
properties. If the serialized object's class implements any method with
a magic name, these methods will have magic properties, such as being
automatically run during certain points of execution, or when certain
conditions are met. Two of these magic methods are
`      __wakeup()     ` and `      __destruct()     ` .
PHP 魔法方法是 PHP
中具有特殊属性的方法名。如果序列化对象的类实现了任何具有魔法名称的方法，则这些方法将具有魔法属性，例如在执行的某些点自动运行，或者在满足某些条件时自动运行。其中两个魔法方法是
\_\_wakeup() 和 \_\_destruct()。
The `      __wakeup()     ` method is used during instantiation when the
program creates an instance of a class in memory, which is what
`      unserialize()     ` does; it takes the serialized string, which
specifies the class and the properties of that object, and uses that
data to create a copy of the originally serialized object. It then
searches for the `      __wakeup()     ` method and executes code in it.
The `      __wakeup()     ` method is usually used to reconstruct any
resources that the object may have, reestablish any database connections
that were lost during serialization, and perform other reinitialization
tasks. It's often useful during a PHP object injection attack because it
provides a convenient entry point to the server's database or other
functions in the program.
\_\_wakeup()方法在实例化期间使用，当程序在内存中创建一个类的实例时使用，这就是unserialize()的作用；它接受序列化字符串，该字符串指定该对象的类和属性，并使用该数据创建原始序列化对象的副本。然后搜索\_\_wakeup()方法并执行其中的代码。\_\_wakeup()方法通常用于重建对象可能具有的任何资源，重新建立在序列化期间丢失的任何数据库连接，并执行其他重新初始化任务。它通常在PHP对象注入攻击中非常有用，因为它提供了方便的入口点到服务器的数据库或程序中的其他功能。
The program then operates on the object and uses it to perform other
actions. When no references to the deserialized object exist, the
program calls the `      __destruct()     ` function to clean up the
object. This method often contains useful code in terms of exploitation.
For example, if a `      __destruct()     ` method contains code that
deletes and cleans up files associated with the object, the attacker
might be able to mess with the integrity of the filesystem by
controlling the input passed into those functions.
程序然后操作该对象并使用它执行其他动作。当没有对反序列化对象的引用时，程序调用\_\_destruct()函数清理对象。该方法通常包含有关利用的有用代码。例如，如果\_\_destruct()方法包含删除和清理与对象相关的文件的代码，攻击者可能能够通过控制传递给这些函数的输入来干扰文件系统的完整性。
#### [ ]{#c14.xhtml#Page_236 .pagebreak title="236"} Achieving RCE {#c14.xhtml#h3-123456c14-0003}
When you control a serialized object passed into
`      unserialize()     ` , you control the properties of the created
object. You might also be able to control the values passed into
automatically executed methods like `      __wakeup()     ` or
`      __destruct()     ` . If you can do that, you can potentially
achieve RCE.
当您控制一个传入 unserialize()
的序列化对象时，您就可以控制创建的对象的属性。您还可能能够控制传入自动执行方法（如\_\_wakeup()或\_\_destruct()）的值。如果您能够做到这一点，您有可能实现远程代码执行（RCE）。
For example, consider this vulnerable code example, taken from
[https://www.owasp.org/index.php/PHP_Object_Injection](https://www.owasp.org/index.php/PHP_Object_Injection){.LinkURL}
:
例如，考虑这个脆弱的代码示例，从
https://www.owasp.org/index.php/PHP_Object_Injection 中取得：
    1 class Example2
      {
        private $hook;
        function __construct(){
            // some PHP code...
        }
        function __wakeup(){
          2 if (isset($this->hook)) eval($this->hook);
        }
      }
      // some PHP code...
    3 $user_data = unserialize($_COOKIE['data']);
The code declares a class called `      Example2     ` . It has a
`      $hook     ` attribute and two methods: `      __construct()     `
and `      __wakeup()     ` [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . The `      __wakeup()     ` function
executes the string stored in `      $hook     ` as PHP code if
`      $hook     ` is not empty [ 2 ]{.CodeAnnotation
aria-label="annotation2"} . The PHP `      eval()     ` function takes
in a string and runs the content of the string as PHP code. Then, the
program runs `      unserialize()     ` on a user-supplied cookie named
`      data     ` [ 3 ]{.CodeAnnotation aria-label="annotation3"} .
该代码声明了一个名为Example2的类。它有一个\$hook属性和两个方法：\_\_construct()和\_\_wakeup()。1.如果\$hook非空，\_\_wakeup()函数会执行存储在\$hook中的字符串作为PHP代码。2.PHP
eval()函数接受一个字符串，并将字符串的内容作为PHP代码运行。然后，该程序在名为data的用户提供的cookie上运行unserialize()。
Here, you can achieve RCE because the code passes a user-provided object
into `      unserialize()     ` , and there is an object class,
`      Example2     ` , with a magic method that automatically runs
`      eval()     ` on user-provided input when the object is
instantiated.
在这里，您可以实现RCE，因为代码将用户提供的对象传递给unserialize()，并且有一个名为Example2的对象类，其中有一个魔术方法，在实例化对象时自动针对用户提供的输入运行eval()。
To exploit this RCE, you'd set your `      data     ` cookie to a
serialized `      Example2     ` object, and the `      hook     `
property to whatever PHP code you want to execute. You can generate the
serialized object by using the following code snippet:
要利用这个RCE，您需要将数据 cookie 设置为序列化的 Example2 对象，将 hook
属性设置为您想要执行的任何 PHP
代码。您可以使用以下代码片段生成序列化对象：
    class Example2
    {
       private $hook = "phpinfo();";
    }
    print 1 urlencode(serialize(new Example2));
Before we print the object, we need to URL-encode it [ 1
]{.CodeAnnotation aria-label="annotation1"} , since we'll be injecting
the object via a cookie. Passing the string generated by this code into