# CVE-2022-33891: 命令注入漏洞分析 - Apache Spark

### 译文声明
本文为翻译文章，具体表达和含义以原文为准。

## 漏洞描述
2022年7月18日，Apache发布了一则安全公告，修复了存在于Apache Spark中的一个命令注入漏洞。该漏洞编号为CVE-2022-33891，威胁等级被评定为高危。在启用访问控制列表（ACL）的情况下，Apache Spark UI允许通过配置选项`spark.acls.enable`来启用ACL功能。使用身份验证过滤器时，会检查用户是否具有查看或修改应用程序的权限。如果启用了ACL，`HttpSecurityFilter`中的代码路径可能会允许攻击者通过提供任意用户名来执行模拟。恶意用户可能能够利用权限检查功能，根据他们的输入构建并执行Unix shell命令，从而导致任意shell命令执行。

## 相关介绍
Apache Spark是由美国阿帕奇软件基金会开发的一款大规模数据处理引擎，支持非循环数据流和内存计算。Spark特别适用于需要迭代的数据挖掘与机器学习算法等场景。

## 受影响版本
- Spark Core – Apache <= 3.0.3
- 3.1.1 <= Spark Core – Apache <= 3.1.2
- 3.2.0 <= Spark Core – Apache <= 3.2.1

## 漏洞分析
### 环境搭建
从官网（https://archive.apache.org/dist/spark）下载Apache Spark 3.2.1版本用于漏洞复现分析。触发此漏洞的关键在于是否启用了ACL以及使用了身份验证过滤器。启用ACL可以通过以下两种方式之一实现：
1. 设置选项 `spark.acls.enable`。
2. 运行`spark-shell`时通过`-c`参数启动。

为了便于分析，在运行`spark-shell`之前，需进行远程调试配置：
```bash
export SPARK_SUBMIT_OPTS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
```
配置完成后，运行以下命令启动`spark-shell`并开启ACL：
```bash
./spark-shell --conf spark.acls.enable=true
```

### 漏洞原理
根据GitHub上的diff文件（https://github.com/apache/spark/pull/36315/files），可以看出问题出在命令拼接且未对输入做任何处理。修复后的版本直接删除了`ShellBasedGroupsMappingProvider`函数中对bash的调用。

### 动态分析
理解了漏洞原理之后，下一步是考虑如何触发它。当Apache Spark启用了ACL后，会通过`HttpSecurityFilter`这个过滤器来进行权限校验。首先在`org.apache.spark.ui.HttpSecurityFilter#doFilter`函数处设置断点。进入`doFilter`函数后，系统会提取参数`doAs`的值，并将其赋给`effectiveUser`变量，然后进入`org.apache.spark.SecurityManager#checkUIViewPermissions`函数进行进一步处理。最终，在`org.apache.spark.security.ShellBasedGroupsMappingProvider#getUnixGroups`函数中，由于我们传入的`username`参数是可控的，因此可以形成命令注入。后续将通过`executeAndGetOutput`函数直接执行传入的命令，导致命令执行。

### 漏洞复现
通过反单引号和参数`doAs`成功实现了命令注入。

## 修复建议
建议受影响的用户升级到以下安全版本之一：Apache Spark 3.1.3、3.2.2 或 3.3.0 及以上版本。

## 参考材料
1. [Apache邮件列表](https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc)
2. [Apache Spark存档](https://archive.apache.org/dist/spark/)
3. [GitHub Pull Request](https://github.com/apache/spark/pull/36315/files)