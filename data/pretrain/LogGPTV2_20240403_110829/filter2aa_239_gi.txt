Y
Y
RepeatableRead
N
N
Y
Serializable
Y
Y
Y
37.6 小结
本章介绍了ADO.NET的核心基础。首先介绍的SqlConnection对象打开一个到SQL
Server的连接。讨论了如何从配置文件中检索连接字符串。
接着阐述了如何正确地进行连接，这样稀缺的资源就可以尽可能早地关闭。所有连接
类都实现IDisposable接口，在对象放在using子句中时调用该接口。如果本章只有一件值得
注意的事，那就是尽早关闭数据库连接的重要性。
对于命令，传递参数，就得到一个返回值，使用SqlDataReader检索记录。还论述了
如何使用SqlCommand对象调用存储过程。
类似于框架的其他部分，处理可能要花一些时间，ADO.NET实现了基于任务的异步
模式。还看到了如何通过ADO.NET创建和使用事务。
下一章讨论ADO.NET Entity Framework，它提供了关系数据库和对象层次结构之间的
映射，从而提供了抽象的数据访问，访问关系数据库时，在后台使用ADO.NET类。
第38章
Entity Framework Core
本章要点
● Entity Framework Core 1.0简介
● 使用依赖项注入和Entity Framework
● 用关系创建模型
● 使用Migrations、.NET CLI工具和MSBuild
● 对象跟踪
● 更新对象和对象树
● 用更新处理冲突
● 使用事务
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● 图书示例
● 图书示例和DI
● 菜单示例
● 菜单和数据注释
● 冲突处理示例
● 事务示例
38.1 Entity Framework简史
Entity Framework是一个提供了实体-关系映射的架构，通过它，可以创建映射到数据
库表的类型，使用LINQ创建数据库查询，创建和更新对象，把它们写入数据库。
Entity 
Framework经过多年的改变，最新的版本完全重写了。下面看看Entity
Framework的历史，了解改写的原因。
● Entity Framework 1——Entity Framework的第一个版本没有准备用于.NET 3.5，但不
久它就可用于.NET 3.5 SP1。另一个产品是LINQ to SQL，它提供了类似的功能，
可用于.NET 3.5。从广义上看，LINQ to SQL和Entity Framework提供了类似的功
能。然而，LINQ 
to 
SQL使用起来更简单，但只用于访问SQL 
Server。Entity
Framework是基于提供程序的，可以访问几种不同的关系数据库。它包含了更多
的功能，比如多对多映射，不需要映射对象，可以进行n到n映射。Entity
Framework的一个缺点是，它要求模型类型派生自EntityObject基类。使用一个包
含XML的EDMX文件，把对象映射到关系上。所包含的XML用三种模式定义：概
念模式定义（CSD）定义对象类型及其属性和关联；存储模式定义（SSD）定义
了数据库表、列和关系；映射模式语言（MSL）定义了CSD和SSD如何彼此映
射。
● Entity Framework 4——Entity Framework 4可用于.NET 4，进行了重大改进，许多想
法都来自LINQ to SQL。因为改动较大，跳过了版本2和3。在这个版本中，增加
了延迟加载，在访问属性时获取关系。设计模型后，可以使用SQL数据定义语言
（DDL）创建数据库。使用Entity Framework的两个模型现在是Database First或
Model First。添加的最重要特性是支持Plain Old CLR Objects （POCO），所以不
再需要派生自基类EntityObject。
在后来的更新（如Entity Framework 4.1、4.2）中，用NuGet包添加了额外的特性。这
允许更快地增加功能。Entity Framework 4.1提供了Code First模型，其中不再使用定义映射
的EDMX文件。相反，所有的映射都使用C#代码定义——使用特性或流利的API定义使用
代码的映射。
Entity Framework 4.3添加了对迁移的支持。有了迁移，可以使用C#代码定义对数据库
中模式的更新。数据库更新可以自动应用到使用数据库的应用程序上。
● Entity Framework 5——Entity Framework 5的NuGet包支持.NET 4.5和.NET 4应用程
序。然而，Entity Framework 5的许多功能可用于.NET 4.5。Entity Framework仍然
基于安装在系统上的类型和.NET 4.5。在这个版本中，新增了性能改进，支持新
的SQL Server功能，如空间数据类型。
● Entity Framework 6——Entity Framework 6解决了Entity Framework 5的一些问题，
其部分原因是，该框架的一部分安装在系统上，一部分通过NuGet扩展获得。现
在，Entity Framework的完整代码都移动到NuGet包上。为了不出现冲突，使用了
一个新的名称空间。将应用程序移植到新版本上，必须改变名称空间。
本书介绍了Entity Framework的最新版本：Entity Framework Core 1.0。这个版本完全
重写了，删除旧的行为。这个版本不支持XML文件映射与CSDL、SSDL和MSL。只支持
Code First——用Entity Framework 4.1添加的模型。Code First并不意味着数据库不存在。
可以先创建数据库，或纯粹从代码中定义数据库；这两种选择都是可能的。
  注意： 名称Code First有些误导。在Code First中，代码或者数据库都可以先
创建。在最初Code First的beta版本中，名字是Code Only。因为其他模型选项在名字中
包含First，所以名称Code Only也改变了。
完整重写的Entity Framework，不仅支持关系数据库，也支持NoSql数据库——只需要
一个提供程序。目前，在撰写本书时，提供程序支持是有限的，但随着时间的推移，提供
程序会增加。
Entity Framework的新版本基于.NET Core，因此可以在Linux和Mac系统上使用这个框
架。
Entity Framework Core 1.0不支持Entity Framework 6提供的所有特性。但随着时间的
推移，新版本的Entity 
Framework会提供更多的特性。只需要注意使用什么版本的Entity
Framework。始终使用Entity Framework 6有许多有效的理由，但在非Windows平台上使用
ASP.NET Core 1.0，使用Entity Framework与通用Windows平台，使用非关系数据存储，都
需要使用Entity Framework Core 1.0。
本章介绍Entity Framework Core 1.0。它始于一个简单的模型读写来自SQL Server的信
息。后来，添加了关系，在写入数据库时介绍变更追踪器和冲突的处理。使用迁移创建和
修改数据库模式是本章的另一个重要组成部分。
 注意： 
本章使用Books数据库。这个数据库包含在代码下载示例
www.wrox.com/go/professionalcsharp6中。
38.2 Entity Framework简介
第一个例子使用了一个Book类型，把这种类型映射到SQL 
Server数据库中的Books
表。把记录写到数据库，然后读取、更新和删除它们。
在第一个示例中，首先创建数据库。为此，可以使用Visual 
Studio 
2015中的SQL
Server Object Explorer。选择数据库实例（localdb）\ MSSQLLocalDB（随Visual Studio一
起安装），单击树视图中的Databases节点，然后选择Add New Database。示例数据库只有
一个表Books。
为了创建Books表，可以在Books数据库内选择Tables节点，然后选择Add 
New
Table。使用如图38-1所示的设计器，或者在T-SQL编辑器中输入SQL 
DDL语句，就可以
创建Books表。下面的代码片段显示了创建表的T-SQL代码。单击Update按钮，就可以将
更改提交到数据库。
    CREATE TABLE [dbo].[Books]
    (
      [BookId] INT NOT NULL PRIMARY KEY IDENTITY,
      [Title] NVARCHAR(50) NOT NULL,
      [Publisher] NVARCHAR(25) NOT NULL
    )
图38-1
38.2.1 创建模型
访问Books数据库的BookSample示例应用程序是一个控制台应用程序（包）。这个示
例使用以下依赖项和名称空间：
依赖项
    NETStandard.Library
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.SqlServer
名称空间
    Microsoft.EntityFrameworkCore
    System.ComponentModel.DataAnnotations.Schema
    System
    System.Linq
    System.Threading.Tasks
    static System.Console
Book类是一个简单的实体类型，定义了三个属性。BookId属性映射到表的主键，
Title属性映射到Title列，Publisher属性映射到Publisher列。为了把类型映射到Books表，
Table特性应用于类型（代码文件BooksSample / Book.cs）：
    [Table("Books")]
    public class Book
    {
      public int BookId { get; set; }
      public string Title { get; set; }
      public string Publisher { get; set; }
    }
38.2.2 创建上下文
通过创建BooksContext类，就实现了Book表与数据库的关系。这个类派生自基类
DbContext。BooksContext类定义了DbSet类型的Books属性。这个类型允许创建查
询，添加Book实例，存储在数据库中。要定义连接字符串，可以重写DbContext的
OnConfiguring方法。在这里，UseSqlServer扩展方法将上下文映射到SQL 
Server数据库
（代码文件BooksSample / BooksContext.cs）：
    public class BooksContext: DbContext
    {
      private const string ConnectionString =
        @"server=(localdb)\MSSQLLocalDb; database=Books; trusted_connection=true"
;
      public DbSet Books { get; set; }
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilde
r)
      {
        base.OnConfiguring(optionsBuilder);
        optionsBuilder.UseSqlServer(ConnectionString);
      }
    }
定义连接字符串的另一种选择是使用依赖注入，参见本章后面的内容。
38.2.3 写入数据库
创建带有Books表的数据库；定义模型和上下文类，现在就可以用数据填充表了。创
建AddBookAsync方法，把Book对象添加到数据库中。首先，实例化BooksContext对象。
使用using语句确保数据库连接是关闭的。使用Add方法将对象添加到上下文后，调用
SaveChangesAsync把实体写入数据库（代码文件BooksSample / Program.cs）：
    private async Task AddBookAsync(string title, string publisher)
    {
      using (var context = new BooksContext()
)
      {
        var book = new Book
        {
        Title = title,
        Publisher = publisher
        };
        context.Add(book);
        int records = await context.SaveChangesAsync();
        WriteLine($"{records} record added");
      }
      WriteLine();
    }
为了添加一组图书，可以使用AddRange方法（代码文件BooksSample 
/
Program.cs）：
    private async Task AddBooksAsync()
    {
      using (var context = new BooksContext())
      {
        var b1 = new Book
        {
        Title = "Professional C# 5 and .NET 4.5.1",
        Publisher = "Wrox Press"
        };
        var b2 = new Book
        {
        Title = "Professional C# 2012 and .NET 4.5",
        Publisher = "Wrox Press"
        };
        var b3 = new Book
        {
        Title = "JavaScript for Kids",
        Publisher = "Wrox Press"
        };
        var b4 = new Book
        {
        Title = "Web Design with HTML and CSS",
        Publisher = "For Dummies"
        };
        context.AddRange(b1, b2, b3, b4);
        int records = await context.SaveChangesAsync()
;
        WriteLine($"{records} records added");
      }
      WriteLine();
    }
运行应用程序，调用这些方法，就可以使用SQL Server Object Explorer查看写入数据
库的数据。
38.2.4 读取数据库
为了在C#代码中读取数据，只需要调用BooksContext，访问Books属性。访问该属性
会创建一个SQL语句，从数据库中检索所有的书（代码文件BooksSample / Program.cs）：
    private void ReadBooks()
    {
      using (var context = new BooksContext())
      {
        var books = context.Books;
        foreach (var b in books)
        {
        WriteLine($"{b.Title} {b.Publisher}");
        }
      }
      WriteLine();
    }
在调试期间打开IntelliTrace Events窗口，就可以看到发送到数据库的SQL语句（这需
要Visual Studio企业版）：
    SELECT [b].[BookId], [b].[Publisher], [b].[Title]
    FROM [Books] AS [b]
Entity 
Framework提供了一个LINQ提供程序。使用它可以创建LINQ查询来访问数据
库。也可以使用方法语法，如下所示：
    private void QueryBooks()
    {
      using (var context = new BooksContext())
      {
        var wroxBooks = context.Books.Where(b => b.Publisher == "Wrox Press");
        foreach (var b in wroxBooks)
        {
          WriteLine($"{b.Title} {b.Publisher}");
        }
      }
      WriteLine();
    }
或使用声明性的LINQ查询语法：
    var wroxBooks = from b in context.Books
                    where b.Publisher == "Wrox Press"
                    select b;
使用两个语法变体，将这个SQL语句发送到数据库：
    SELECT [b].[BookId], [b].[Publisher], [b].[Title]
    FROM [Books] AS [b]
    WHERE [b].[Publisher] = 'Wrox Press'
  注意： LINQ参见第13章。
38.2.5 更新记录
更新记录很容易实现：修改用上下文加载的对象，并调用SaveChangesAsync（代码文
件BooksSample / Program. cs）：
    private async Task UpdateBookAsync()
    {
      using (var context = new BooksContext())
      {
        int records = 0;
        var book = context.Books.Where(b => b.Title == "Professional C# 6")
        .FirstOrDefault();
        if (book ! = null)
        {
        book.Title = "Professional C# 6 and .NET Core 5";