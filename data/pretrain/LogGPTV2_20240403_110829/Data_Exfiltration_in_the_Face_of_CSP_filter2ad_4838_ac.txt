### Web Page Online: HTTP or HTTPS

When developing a web page, the developer has several options to consider:

1. **Protocol for Serving the Web Page**: The web page can be served over either HTTP or HTTPS.
2. **Automatic DNS Prefetching Policy**: This policy can be set through an HTTP response header or via an HTML `<meta>` tag, potentially added using JavaScript.
3. **Default or Custom DNS Prefetching Policy**: If not set to the default value, the automatic DNS prefetching policy can be customized.

To maximize the attacker’s chances, we assume that the attacker will always try to enable automatic DNS prefetching, as it may facilitate the exfiltration of information. The attacker has several methods to carry out this attack:

1. **Injection of the `X-DNS-Prefetch-Control` Header**: This can be done by injecting plain HTML or using JavaScript methods such as `document.write()` or `appendChild()`.
2. **HTML Elements for Information Leakage**: The attacker can use elements like `<link>` with specific `rel` attributes (e.g., "dns-prefetch", "prefetch", "prerender", "preconnect", "preload", "subresource", "next", or "prev").
3. **Injection of Leaky HTML Elements**: These elements can be injected through plain HTML or JavaScript methods like `document.write()` or `appendChild()`.

For each possible combination of these scenario options, a web page is automatically generated to test whether the victim's browser will leak information. The information to be exfiltrated is unique for each combination of parameters. The web page is loaded into the victim’s browser and displayed for five seconds, during which the attacker monitors DNS and web traffic to their servers. After five seconds, the web page redirects the victim’s browser to the next set of scenario parameters.

If the unique identifier for a scenario is observed at the attacker's side, the attack is considered successful, indicating that the Content Security Policy (CSP) was unable to prevent data exfiltration through that specific combination of parameters.

### Browsers Tested

The experiment included the most popular desktop and mobile browsers according to StatCounter. These browsers are listed in Table 1.

### Results

Table 1 summarizes the results, indicating which HTML elements allow an attacker to leak information through DNS requests or HTTP requests. The results were processed using the WEKA machine learning tool.

- **DNS and HTTP Leaks**: We differentiate between leaks that were always observed (indicated by •) and those that occur under certain circumstances (indicated by ◦).
- **Automatic DNS Prefetching**: This does not always leak information because it can be disabled by the web developer through the `X-DNS-Prefetch-Control` HTTP header.
- **Forced DNS Prefetching**: A `<link>` element with `rel="dns-prefetch"` can force DNS prefetching. Most browsers ignore the `X-DNS-Prefetch-Control` header when this link element is present, except for Mozilla Firefox, which respects the header.
- **MSIE and MS Edge**: These browsers only perform forced DNS prefetching if the link element is present in the original HTML code, not when added by JavaScript.
- **Firefox Behavior**: Firefox performs DNS prefetching and resource prefetching for other relationships, but not if they are added using `appendChild()`.

### Specific Observations

- **`rel=prefetch`**: MSIE and Edge leak DNS and HTTP requests only when the parent web page is served over HTTPS.
- **`rel=prerender`**: Document pre-rendering leaks DNS and HTTP requests in Chrome, Chrome Mobile, and MSIE.
- **`rel=subresource`**: Chrome Mobile and Opera Mobile only prefetch resources when the parent web page is served over HTTP.
- **`rel=next`**: Only Firefox leaks through this relationship.
- **No Leaks**: No browser leaked through "preconnect", "preload", or "prev".

### Discussion

Table 1 shows that all tested browsers allow an attacker to exfiltrate information from a web page through DNS or resource prefetching, despite the strict CSP policy.

- **Impact of the Attack**: The impact depends on the browser used and the type of information the attacker can inject.
- **URL Injection**: Chrome, Firefox, Safari, Chrome Mobile, and Safari Mobile leak DNS requests through automatic DNS prefetching, allowing an attacker to determine if a victim has visited a web page containing the attacker’s URL.
- **HTML Injection**: All tested browsers, except UCBrowser, allow an attacker to leak information through DNS requests to an attacker-controlled DNS server. Additionally, all browsers except Safari and Safari Mobile allow leakage through HTTP requests via resource prefetching.
- **JavaScript Injection**: MSIE, MSIE Mobile, and UCBrowser do not support CSP, making them vulnerable to any HTML element used for exfiltration.

### Conclusion

The results highlight the vulnerabilities in various browsers and the need for robust security measures to prevent data exfiltration through DNS and resource prefetching. Developers should be aware of these risks and implement appropriate security policies.