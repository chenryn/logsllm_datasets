          jumpi
          invalid
        tag_7:
    ... */  /* "test.sol":88:215  function add(uint value) returns (bool, uint){
          swap2
          pop
          swap2
          jump  // out
        auxdata: 0xa165627a7a7230582067679f8912e58ada2d533ca0231adcedf3a04f22189b53c93c3d88280bb0e2670029
    }
回顾第一章我们得知，智能合约编译生成的汇编指令分为三部分：EVM
assembly标签下的汇编指令对应的是部署代码；sub_0标签下的汇编指令对应的是runtime代码，是智能合约部署后真正运行的代码。
**2.2.2 分析汇编代码**
接下来我们从sub_0标签的入口开始,一步步地进行分析：
  1. 最开始处执行mstore(0x40, 0x80)指令,把0x80存放在内存的0x40处。
  2. 第二步执行jumpi指令，在跳转之前要先通过calldatasize指令用来获取本次交易的input字段的值的长度。如果该长度小于4字节则是一个非法调用，程序会跳转到tag_1标签下。如果该长度大于4字节则顺序向下执行。
  3. 接下来是获取交易的input字段中的函数签名。如果input字段中的函数签名等于“0x1003e2d2”，则EVM跳转到tag_2标签下执行,否则不跳转，顺序向下执行tag_1。ps:使用web3.sha3(“add(uint256)”)可以计算智能合约中add函数的签名，计算结果为0x1003e2d21e48445eba32f76cea1db2f704e754da30edaf8608ddc0f67abca5d0,之后取前四字节“0x1003e2d2”作为add函数的签名。
  4. 在tag_2标签中，首先执行callvalue指令,该指令获取交易中的转账金额，如果金额是0，则执行接下来的jumpi指令，就会跳转到tag_3标签。ps:因为add函数没有payable修饰，导致该函数不能接受转账，所以在调用该函数时会先判断交易中的转账金额是不是0。
  5. 在tag_3标签中，会把tag_4标签压入栈，作为函数调用完成后的返回地址，同时calldataload(0x4)指令会把交易的input字段中第4字节之后的32字节入栈，之后跳转到tag_5标签中继续执行。
  6. 在tag_5标签中，会执行add函数中的所有代码，包括对变量sellerBalance进行赋值以及比较变量sellerBalance和函数参数的大小。如果变量sellerBalance的值大于函数参数，接下来会执行jumpi指令跳转到tag_7标签中，否则执行invalid,程序出错。
  7. 在tag_7标签中，执行两次swap2和一次pop指令后，此时的栈顶是tag_4标签，即函数调用完成后的返回地址。接下来的jump指令会跳转到tag_4标签中执行，add函数的调用就执行完毕了。
###  2.3 智能合约字节码的反编译
在第一章中，我们介绍了go-ethereum的安装，安装完成后我们在命令行中就可以使用evm命令了。下面我们使用evm命令对智能合约字节码进行反编译。
需要注意的是，由于智能合约编译后的字节码分为部署代码、runtime代码和auxdata三部分，但是部署后真正执行的是runtime代码，所以我们只需要反编译runtime代码即可。还是以本章开始处的智能合约为例，执行solc
–asm –optimize test.sol 命令，截取字节码中的runtime代码部分：
608060405260043610603e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631003e2d281146043575b600080fd5b348015604e57600080fd5b5060586004356073565b60408051921515835260208301919091528051918290030190f35b6000805482018082558190831115608657fe5b9150915600
把这段代码保存在某个文件中，比如保存在test.bytecode中。
接下来执行反编译命令：evm disasm test.bytecode
得到的结果如下：
    00000: PUSH1 0x80
    00002: PUSH1 0x40
    00004: MSTORE
    00005: PUSH1 0x04
    00007: CALLDATASIZE
    00008: LT
    00009: PUSH1 0x3e
    0000b: JUMPI
    0000c: PUSH4 0xffffffff
    00011: PUSH29 0x0100000000000000000000000000000000000000000000000000000000
    0002f: PUSH1 0x00
    00031: CALLDATALOAD
    00032: DIV
    00033: AND
    00034: PUSH4 0x1003e2d2
    00039: DUP2
    0003a: EQ
    0003b: PUSH1 0x43
    0003d: JUMPI
    0003e: JUMPDEST
    0003f: PUSH1 0x00
    00041: DUP1
    00042: REVERT
    00043: JUMPDEST
    00044: CALLVALUE
    00045: DUP1
    00046: ISZERO
    00047: PUSH1 0x4e
    00049: JUMPI
    0004a: PUSH1 0x00
    0004c: DUP1
    0004d: REVERT
    0004e: JUMPDEST
    0004f: POP
    00050: PUSH1 0x58
    00052: PUSH1 0x04
    00054: CALLDATALOAD
    00055: PUSH1 0x73
    00057: JUMP
    00058: JUMPDEST
    00059: PUSH1 0x40
    0005b: DUP1
    0005c: MLOAD
    0005d: SWAP3
    0005e: ISZERO
    0005f: ISZERO
    00060: DUP4
    00061: MSTORE
    00062: PUSH1 0x20
    00064: DUP4
    00065: ADD
    00066: SWAP2
    00067: SWAP1
    00068: SWAP2
    00069: MSTORE
    0006a: DUP1
    0006b: MLOAD
    0006c: SWAP2
    0006d: DUP3
    0006e: SWAP1
    0006f: SUB
    00070: ADD
    00071: SWAP1
    00072: RETURN
    00073: JUMPDEST
    00074: PUSH1 0x00
    00076: DUP1
    00077: SLOAD
    00078: DUP3
    00079: ADD
    0007a: DUP1
    0007b: DUP3
    0007c: SSTORE
    0007d: DUP2
    0007e: SWAP1
    0007f: DUP4
    00080: GT
    00081: ISZERO
    00082: PUSH1 0x86
    00084: JUMPI
    00085: Missing opcode 0xfe
    00086: JUMPDEST
    00087: SWAP2
    00088: POP
    00089: SWAP2
    0008a: JUMP
    0008b: STOP
接下来我们把上面的反编译代码和2.1节中生成的汇编代码进行对比分析。
2.3.1 **分析反编译代码**
  1. 反编译代码的00000到0003d行，对应的是汇编代码中sub_0标签到tag_1标签之间的代码。MSTORE指令把0x80存放在内存地址0x40地址处。接下来的LT指令判断交易的input字段的值的长度是否小于4，如果小于4，则之后的JUMPI指令就会跳转到0x3e地址处。对比本章第二节中生成的汇编代码不难发现，0x3e就是tag_1标签的地址。接下来的指令获取input字段中的函数签名，如果等于0x1003e2d2则跳转到0x43地址处。0x43就是汇编代码中tag_2标签的地址。
  2. 反编译代码的0003e到00042行，对应的是汇编代码中tag_1标签内的代码。
  3. 反编译代码的00043到0004d行，对应的是汇编代码中tag_2标签内的代码。0x43地址对应的指令是JUMPDEST,该指令没有实际意义，只是起到占位的作用。接下来的CALLVALUE指令获取交易中的转账金额,如果金额是0，则执行接下来的JUMPI指令，跳转到0x4e地址处。0x4e就是汇编代码中tag_3标签的地址。
  4. 反编译代码的0004e到00057行，对应的是汇编代码中tag_3标签内的代码。0x4e地址对应的指令是JUMPDEST。接下来的PUSH1 0x58指令，把0x58压入栈，作为函数调用完成后的返回地址。之后的JUMP指令跳转到0x73地址处。0x73就是汇编代码中tag_5标签的地址。
  5. 反编译代码的00058到00072行，对应的是汇编代码中tag_4标签内的代码。
  6. 反编译代码的00073到00085行，对应的是汇编代码中tag_5标签内的代码。0x73地址对应的指令是JUMPDEST,之后的指令会执行add函数中的所有代码。如果变量sellerBalance的值大于函数参数，接下来会执行JUMPI指令跳转到0x86地址处，否则顺序向下执行到0x85地址处。这里有个需要注意的地方，在汇编代码中此处显示invalid,但在反编译代码中，此处显示Missing opcode 0xfe。
  7. 反编译代码的00086到0008a行，对应的是汇编代码中tag_7标签内的代码。
  8. 0008b行对应的指令是STOP,执行到此处时整个流程结束。
###  2.4 总结
本章首先介绍了EVM的存储结构和以太坊中常用的汇编指令。之后逐行分析了智能合约编译后的汇编代码，最后反编译了智能合约的字节码，把反编译的代码和汇编代码做了对比分析。相信读完本章之后，大家基本上能够看懂智能合约的汇编代码和反编译后的代码。在下一章中，我们将介绍如何从智能合约的反编译代码中生成控制流图(control
flow graph)。
## 第三章 从反编译代码构建控制流图
本章是智能合约静态分析的第三章，第二章中我们生成了反编译代码，本章我们将从这些反编译代码出发，一步一步的构建控制流图。
###  3.1 控制流图的概念
3.1.1 **基本块(basic** block)
基本块是一个最大化的指令序列，程序执行只能从这个序列的第一条指令进入，从这个序列的最后一条指令退出。
构建基本块的三个原则： 1. 遇到程序、子程序的第一条指令或语句，结束当前基本块，并将该语句作为一个新块的第一条语句。 2.
遇到跳转语句、分支语句、循环语句，将该语句作为当前块的最后一条语句，并结束当前块。 3. 遇到其他语句直接将其加入到当前基本块。
3.1.2 **控制流图(control** flow graph)
控制流图是以基本块为结点的有向图G=(N,
E)，其中N是结点集合，表示程序中的基本块；E是结点之间边的集合。如果从基本块P的出口转向基本块块Q，则从P到Q有一条有向边P->Q，表示从结点P到Q存在一条可执行路径，P为Q的前驱结点，Q为P的后继结点。也就代表在执行完结点P中的代码语句后，有可能顺序执行结点Q中的代码语句[[2]](http://cc.jlu.edu.cn/G2S/Template/View.aspx?courseId=644&topMenuId=131469&action=view&curfolid=135637)。
###  3.2 构建基本块
控制流图是由基本块和基本块之间的边构成，所以构建基本块是控制流图的前提。接下来我们以反编译代码作为输入，分析如何构建基本块。
第二章中的反编译代码如下：
    00000: PUSH1 0x80
    00002: PUSH1 0x40
    00004: MSTORE
    00005: PUSH1 0x04
    00007: CALLDATASIZE
    00008: LT
    00009: PUSH1 0x3e
    0000b: JUMPI
    0000c: PUSH4 0xffffffff
    00011: PUSH29 0x0100000000000000000000000000000000000000000000000000000000
    0002f: PUSH1 0x00
    00031: CALLDATALOAD
    00032: DIV
    00033: AND
    00034: PUSH4 0x1003e2d2
    00039: DUP2
    0003a: EQ
    0003b: PUSH1 0x43
    0003d: JUMPI
    0003e: JUMPDEST
    0003f: PUSH1 0x00
    00041: DUP1