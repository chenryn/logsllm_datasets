to OEncaps, we have:
Kℓ⋆ = [sj]T + e([a]1, (Xi6=i⋆
ti) · [cj]2) = [abcj]T + e([a]1, (Xi6=i⋆
ti) · [cj]2)
ti) · [cj]2) = e([a]1, [bcj]2 + (Xi6=i⋆
ti) · [cj]2)
ti) · [cj]2) = e(H(ℓ⋆), cj · T2)
= e([a]1, [bcj]2) + e([a]1, (Xi6=i⋆
= e([a]1, (b +Xi6=i⋆
ti) · [cj]2) = e([a]1, (Xi
where Cℓ⋆ = [cj]2. When given as input a a random qEnc-fold DBDH challenge, the simulation
corresponds to the case b = 1. Finally, we conclude using the fact that the guess ρ is correct
with probability exactly
1
qH+1.
Strengthening the Security of MCFE Using SSE
We now show how we can enhance the security of any MCFE for any set of functionality
{Fn}n∈N, using a Secret Sharing Layer as deﬁned in Section 6.3. Namely, we show that the
construction from Figure 6.8 is xx-AD-IND secure if the underlying MCFE is xx-AD-IND
secure, for any xx ∈ {one,many}, thereby removing the complete-ciphertext restriction. We
stress our transformation is not restricted to MCFE for inner product, but works for any
functionality.
Generic construction of xx-AD-IND security for MCFE
We present an xx-AD-IND secure MCFE, where xx ∈ {one,many}, for the set of functionalities
{Fn}n∈N, from any xx-AD-IND-weak secure MCFE for {Fn}n∈N, 1-label-IND secure SSE, and
symmetric encryption scheme. The generic construction is presented in Figure 6.8.
134
Chapter 6. Multi-Client Inner Product Functional Encryption
Setup(1λ, Fn):
(pk′, msk′, (ek′
pk := (pk′, pksse), msk := msk′, and for all i ∈ [n], eki := (ek′
Return (pk, msk, (eki)i∈[n]).
i)i∈[n]) ← Setup′(1λ, Fn), (pksse, (eksse,i)i∈[n]) ← SSE.Setup(1λ).
i, eksse,i).
Enc(pk, eki, xi, ℓ):
ℓ,i ← Enc′(pk′, ek′
C ′
Return the ciphertext Cℓ,i := (Dℓ,i := SEnc(Kℓ, C ′
i, xi, ℓ), (Cℓ, Kℓ) ← SSE.Encaps(pksse, ℓ), Sℓ,i ← SSE.Share(pksse, eksse,i, ℓ).
ℓ,i), Cℓ, Sℓ,i).
KeyGen(pk, msk, k):
Return KeyGen′(msk′, k).
Dec(cid:0)pk, dkk,{Cℓ,i}i∈[n], ℓ):
For all i ∈ [n], parse Cℓ,i = (Dℓ,i, Cℓ, Sℓ,i). Compute Kℓ ← SSE.Decaps(pksse, (Sℓ,i)i∈[n], ℓ, Cℓ). For
all i ∈ [n], computes C ′
Return Dec′(pk′, dkk,{C ′
ℓ,i ← SDec(Kℓ, Dℓ,i).
ℓ,i}i∈[n]).
Figure 6.8: MCFE with xx-AD-IND security from any 1-label-xx-IND secure MCFE MCFE ′
:=
(Setup′, Enc′, KeyGen′, Dec′), SSE scheme SSE := (SSE.Setup, SSE.Encaps, SSE.Share, SSE.Decaps), and
symmetric encryption SKE := (SEnc, SDec). Here, xx ∈ {one,many}. Recall that the algorithm
SSE.Encaps is randomized, thus, diﬀerent invocation of SSE.Encaps(pksse, ℓ) on the same input will
produce diﬀerent outputs.
follows straightforwardly from the correctness of the underlying MCFE ′, SSE
Correctness:
and SKE.
Security proof.
Theorem 18: Security
The MCFE from Figure 6.8 is xx-AD-IND secure assuming MCFE ′ is xx-AD-IND-weak
secure, SSE is 1-label-IND secure, and SKE is one-time secure.
We stress that this security result keeps all the properties of MCFE ′ and SSE:
• if MCFE ′ and SSE are both secure against adaptive corruptions, then, so is MCFE;
• if MCFE ′ is many time secure (xx = many), then, so is MCFE.
Proof of Theorem 18. The proof uses a hybrid argument that goes over all the labels ℓ1, . . . , ℓL
used as input to the queries A makes to the oracle OEnc. We deﬁne the hybrid games Gρ,
for all ρ ∈ {0, . . . , L} in Figure 6.9. For any hybrid game Gρ, we denote by AdvGρ(A) the
probability that the game Gρ outputs 1 when interacting with A. Note that Advxx-AD-IND
MCFE,A (λ) =
|AdvG0(A) − AdvGL(A)|. Lemma 42 states that for all i ∈ [L], |AdvGi−1(A) − AdvGi(A)| is
negligible, which concludes the proof.
6.4 Strengthening the Security of MCFE Using SSE
135
Games Gρ, G⋆
ρ, Hρ,β , for all ρ ∈ {0, . . . , L}:
i⋆ ←R {0, . . . , n} , (pk′, msk′, (ek′
pk := (pk′, pksse), msk := msk′, and for all i ∈ [n], eki := (ek′
α ← AOEnc(·,·,·),OKeygen(·),OCorrupt(·)(pk)
Return
Condition
from
if
1
i, eksse,i).
i)i∈[n]) ← Setup′(1λ, Fn), (pksse, (eksse,i)i∈[n]) ← SSE.Setup(1λ),
α
satisﬁed,
(i⋆ 6= 0 is never queried to OCorrupt and (ℓρ+1, i⋆) is never part of a query to OEnc) OR
(i⋆ = 0 and OEnc is queried on all slots i ∈ HS for label ℓρ+1)
Deﬁnition
25
is
;
and:
0 otherwise.
i ), ℓj):
i , x1
ℓj ,i ← Enc′(pk′, ek′
OEnc(i, (x0
ℓj ,i ← Enc′(pk′, ek′
If j ≤ ρ, C ′
(Cℓj , Kℓj ) ← SSE.Encaps(pksse, ℓj), Sℓj ,i ← SSE.Share(pksse, eksse,i).
ℓj ,i ← Enc′(pk′, ek′
If j = ρ, C ′
Return (Dℓj ,i := SEnc(Kℓj , C ′
i , ℓj). If j > ρ, C ′
i , ℓj), Kℓj ←R K .
i, xβ
ℓj ,i), Cℓj , Sℓj ,i).
i, x1
i, x0
i , ℓj).
OKeygen(k): return KeyGen(msk, k)
OCorrupt(i): return eki
Figure 6.9: Games for the proof of Theorem 18. Here, HS := [n] \ CS, the set of honest slots,
where CS is the set of slots queried to OCorrupt. Recall that the algorithm SSE.Encaps is
randomized, thus, diﬀerent invocation of SSE.Encaps(pksse, ℓj) on the same input will produce
diﬀerent outputs.
136
Chapter 6. Multi-Client Inner Product Functional Encryption
Lemma 42: From game Gρ−1 to game Gρ
For any PPT adversary A, for all ρ ∈ [L], there exist PPT adversaries Bρ, B′
such that:
|AdvGρ−1(A) − AdvGρ(A)| ≤ (n + 1) ·  Advxx-AD-IND-weak
2 · Adv1-label-IND
(λ)+
(λ) + qe · AdvOT
MCFE,Bρ
SKE,B′′
ρ
SSE,B′
ρ
ρ
ρ, and B′′
(λ) ! ,
where qe denotes the number of queries to OEnc.
Proof of Lemma 42. Two cases can happen between games Gρ−1 and Gρ, for each ρ ∈ [L]:
either all the challenge ciphertexts are generated under ℓρ or not all of them. We ﬁrst make
the guess, and then deal with the two cases: if they are all generated (for honest slots, that
is, slots that are not queried to OCorrupt), we use the xx-AD-IND-weak security of MCFE ′,
otherwise there is an honest slot i⋆ for which the ciphertext has not been generated, and we
use the 1-label-IND security of SSE, together with the one-time security of the symmetric
encryption scheme.
Guess of the Case for the ℓρ: We deﬁne a new sequence of hybrid games G⋆
ρ for all
ρ ∈ {0, . . . , L}, which is exactly as Gρ, except that a guess for the missing honest-slot ciphertext
i⋆ under ℓρ is performed (i⋆ = 0 means that all the honest-client ciphertexts are expected to
be generated under ℓρ). Recall that a slot is called honest if it is not queried to OCorrupt.
The games are presented in Figure 6.9. Since G⋆
ρ and Gρ are the same unless the guess is
incorrect, which happens with probability exactly 1/(n + 1), for any adversary A: AdvGρ(A) =
(n + 1) · AdvG⋆
All the ciphertexts are generated under ℓρ: We build a PPT adversary Bρ against the
xx-AD-IND-weak security of MCFE ′ such that
ρ(A).
|AdvG⋆
ρ−1
(A ∧ i⋆ = 0) − AdvG⋆
ρ(A ∧ i⋆ = 0)| ≤ Advxx-AD-IND-weak
MCF E ′
(Bρ).
The adversary Bρ simulates A’s view as follows:
• First, it obtains pk′ from its own xx-AD-IND-weak security game for MCFE ′, samples
(pksse, (eksse,i)i∈[n]) ← SSE.Setup(1λ) and returns pk = (pk′, pksse) to the adversary A.
if j  ρ, it uses its own encryption oracle OEnc′ to get C ←
OEnc′(i, (x0, x0), ℓj);
if j = ρ, then it uses its own encryption oracle to get C ←
OEnc′(i, (x0, x1), ℓρ). Then, it computes (Cℓj , Kℓj ) ← SSE.Encaps(pksse, ℓj), and Sℓj ,i
← SSE.Share(eksse,i, ℓj). Finally, it computes and returns the ciphertext (SEnc(Kℓj , C),
Cℓj , Sℓj ,i).
• OKeygen(k): it uses its own oracle to get dk′
• OCorrupt(i):
it uses its own corruption oracle to get ek′
eki = (ek′
i, eksse,i).
k ← OKeygen′(k), which it returns to A.
i ← OCorrupt′(i), and returns
• Finally, Bρ checks that OEnc is queried on all slots i ∈ HS for label ℓρ. If this is the case,
it forwards the output α from A. Otherwise, it returns 0 to its own experiment.
First, note that when simulating A’s view, Bρ only queries its encryption oracle on input
(x0, x1) with x0 6= x1 for a unique label ℓρ. Moreover, when the guess i⋆ = 0 is correct, then the
extra condition from Deﬁnition 25 is satisﬁed: OEnc is queried for label ℓρ on all slots i ∈ HS
6.4 Strengthening the Security of MCFE Using SSE
137
(that is, all slots which are not queried to OCorrupt). Thus, we can use the xx-AD-IND-weak
security of MCFE ′ to switch Enc′(pk′, ek′
i, x1, ℓρ), as
in game G⋆
ρ.
i, x0, ℓρ), as in game G⋆
ρ−1 to Enc′(pk′, ek′
Some ciphertexts are missing under ℓρ: For β ∈ {0, 1}, we deﬁne the games Hρ,β for all
ρ ∈ {0, . . . , L}, and β ∈ {0, 1}, as G⋆
ρ, except that OEnc(i, (x0, x1), ℓρ) computes the encryption
of xβ, and samples Kℓρ ←R K instead of using (Cℓρ, Kℓρ) ← SSE.Encaps(pksse, ℓ). These games
are described in Figure 6.9.
Now, we build PPT adversaries Bρ,0 and Bρ,1 against the 1-label-IND security of SSE such
that:
ρ−1
|AdvG⋆
|AdvG⋆
(A ∧ i⋆ 6= 0) − AdvHρ,0(A ∧ i⋆ 6= 0)| ≤ Adv1-label-IND
ρ(A ∧ i⋆ 6= 0) − AdvHρ,1(A ∧ i⋆ 6= 0)| ≤ Adv1-label-IND
SSE,Bρ,1
SSE,Bρ,0
(λ);
(λ).
Let β ∈ {0, 1}. We proceed to describe Bρ,β. First, Bρ,β samples the guess i⋆ ←R {0, . . . , n}. If
i⋆ = 0, then Bρ,β behaves exactly as the game G⋆
ρ−1+β. Otherwise, it does the following, using
the 1-label-IND security game against SSE:
• First, it generates (pk′, msk′, (ek′
i)i∈[n]) ← Setup′(1λ), and sends i⋆ to receive pksse from
its own experiment. It returns pk = (pk′, pksse) to the adversary A.
• OEnc(i, (x0, x1), ℓj): if j  ρ, it computes
C = Enc′(pk′, ek′
i, x0, ℓj); and if j = ρ, it computes C = Enc′(pk′, eki, xβ, ℓj). Then it
If j 6= ρ, it computes (Cℓj , Kℓj ) ←
calls its own oracle to get Sℓj ,i = OShare(i, ℓj).
SSE.Encaps(pksse, ℓj), if j = ρ it calls (Cℓρ, Kℓρ) ← OEncaps(ℓρ). Finally, it returns the
ciphertext (SEnc(Kℓj , C), Cℓj , Sℓj ,i).
• OKeygen(k): it returns KeyGen′(msk′, k).
• OCorrupt(i): it uses its own corruption oracle to get eksse,i ← OCorrupt(i), and returns
eki = (ek′
i, eksse,i).
• Finally, Bρ,β forwards A’s output α to its own experiment.
Game G⋆
ρ, which encrypts x1 under ℓρ just diﬀers from Hρ,1 with real vs. random keys Kℓρ, as
emulated by Bρ,1, according to the real-or-random behavior of the 1-label-IND game for SSE.
Game G⋆
ρ−1, which encrypts x0 under ℓρ just diﬀers from Hρ,0 with real vs. random keys Kℓρ,
as emulated by Bρ,0, according to the real-or-random behavior of the 1-label-IND game for
SSE. Note that if adversary A makes queries that satisfy condition 1 and that the guess i⋆
is correct, and diﬀerent from 0, then the queries of Bρ,β satisfy the conditions required by the
1-label-IND security game for SSE, namely, OEncaps is only queried on one label ℓρ, OCorrupt
is never queried on i⋆, and OShare is never queried on (i⋆, ℓρ).
Since the encapsulation keys Kℓρ are uniformly random in games Hρ,0 and Hρ,1, we can use
the one-time security of SKE, for each ciphertext for the label ℓρ, to obtain a PPT adversary
B′′
ρ such that:
SKE,B′′
ρ
where qe denotes maximum number of ciphertexts generated under a label.
|AdvHρ,0(A ∧ i⋆ 6= 0) − AdvHρ,1(A ∧ i⋆ 6= 0)| ≤ qe · AdvOT
(λ),
Putting everything together, for the case i⋆ 6= 0, we obtain PPT adversaries B′
ρ and B′′
ρ
such that:
|AdvG⋆
(A ∧ i⋆ 6= 0) − AdvG⋆
ρ(A ∧ i⋆ 6= 0)| ≤ 2 · Adv1-label-IND
SSE
(B′
ρ) + qe · AdvOT
SKE(B′′
ρ))
ρ−1
Since for any game G and any adversary A, AdvG(A) = AdvG(A ∧ i⋆ = 0) + AdvG(A ∧ i⋆ 6= 0),
this concludes the proof of Lemma 42.
138
Chapter 6. Multi-Client Inner Product Functional Encryption
Decentralizing MCFE
In decentralized MCFE, the master secret key msk is split into [n] secret keys ski, on for each
client and the generation of the functional decryption keys is distributed among the clients.
We focus on non-interactive protocols to generate the decryption keys, namely, clients can ﬁrst
run independently an algorithm KeyGenShare that only requires the secret key eki, and that
generates a partial key. Then, all these partial decryption keys can be combined via KeyComb,
that only requires the public key. This way, there is no need for diﬀerent clients to interact
with each other. The master secret key is only used during the setup. See Deﬁnition 26 for
further details.
The correctness property essentially states the combined key corresponds to the functional
decryption key. The security model is quite similar to the one for MCFE, except that
• for the KeyGen protocol: the adversary has access to transcripts of the communications,
thus modeled by a query OKeyShare(i, f) that executes KeyGenShare(ski, f).
• corruption queries additionally reveal the secret keys ski;
• the distributed key generation must guarantee that without all the shares, no information
is known about the functional decryption key.
Distributed Sum
In the MCFE for inner product from Section 6.1 the functional decryption keys are of the form
i yi(cid:17), and msk = {Si}i∈[n]. We split the master secret key into ski := Si for
dky = (cid:16)y,Pi S⊤
all i ∈ [n], and we use a non-interactive prototol to compute the sum of all the S⊤
which can be computed by each client i ∈ [n] independently.