title:Combating Click Fraud via Premium Clicks
author:Ari Juels and
Sid Stamm and
Markus Jakobsson
Combating Click Fraud via Premium Clicks
Ari Juels
RSA Laboratories1
PI:EMAIL
Sid Stamm
Indiana University, Bloomington
PI:EMAIL
Indiana University, Bloomington and RavenWhite Inc.
Markus Jakobsson
PI:EMAIL
Abstract
We propose new techniques to combat the problem of
click fraud in pay-per-click (PPC) systems. Rather than
adopting the common approach of ﬁltering out seem-
ingly fraudulent clicks, we consider instead an afﬁrma-
tive approach that only accepts legitimate clicks, namely
those validated through client authentication. Our sys-
tem supports a new advertising model in which “pre-
mium” validated clicks assume higher value than ordi-
nary clicks of more uncertain authenticity. Click valida-
tion in our system relies upon sites sharing evidence of
the legitimacy of users (distinguishing them from bots,
scripts, or fraudsters). As cross-site user tracking raises
privacy concerns among many users, we propose ways
to make the process of authentication anonymous. Our
premium-click scheme is transparent to users. It requires
no client-side changes and imposes minimal overhead on
participating Web sites.
Key words: authentication, click-fraud
Introduction
1
Pay-per-click (PPC) metering is a popular payment
model for advertising on the Internet. The model in-
volves an advertiser who contracts with a specialized en-
tity, which we refer to as a syndicator, to distribute tex-
tual or graphical banner advertisements to publishers of
content. These banner ads point to the advertiser’s Web
site: When a user clicks on the banner ad on the pub-
lisher’s webpage, she is directed to the site to which it
points. Search engines such as Google and Yahoo are
the most popular syndicators, and create the largest por-
tion of pay-per-click trafﬁc on the Internet today. These
sites display advertisements on their own search pages in
response to the search terms entered by users and charge
advertisers for clicks on these links (thereby acting as
their own publishers) or, increasingly, outsource adver-
tisements to third-party publishers. Advertisers pay syn-
dicators per referral, and the syndicators pass on a por-
tion of the payments to the publishers.
A syndicator or publisher’s server observes a “click”
simply as a browser request for a URL associated with
a particular ad. The server has no way to determine if
a human initiated the action—and, if a human was in-
volved, whether she acted knowingly and with honest
intent. Syndicators typically seek to ﬁlter fraudulent or
spurious clicks based on information such as the type of
advertisement that was requested, the cost of the associ-
ated keyword, the IP address of the request and the recent
number of requests from this address. In this paper, we
propose an alternative approach. Rather than seeking to
detect and eliminate fraudulent clicks, i.e., ﬁltering out
seemingly bad clicks, we consider ways of authenticat-
ing valid clicks, i.e., admitting only veriﬁably good ones.
We refer to such validated clicks as premium clicks.
Our scheme involves a new entity, referred to as
an attestor, that provides cryptographic credentials for
clients that perform qualifying actions, such as pur-
chases. These credentials allow the syndicator to distin-
guish premium clicks–corresponding to relatively low-
risk clients–from other, general click trafﬁc. Such classi-
ﬁcation of clicks strengthens a syndicator’s heuristic iso-
lation of fraud risks.
The premium-click techniques that we describe in this
paper are complementary to existing, ﬁlter-based tools
for validating clicks: The two approaches can can oper-
ate side by side.
Organization. We begin with a problem statement and
a description of the the related work in section 2, fol-
lowed by a structural overview of our approach in sec-
tion 3.
In section 4, we outline our scheme and de-
tail its technical foundations. We describe a prototype
implementation of our scheme in section 5 and discuss
user privacy in section 6, proposing several privacy-
enhancing techniques. We provide a brief security analy-
sis in section 7, and conclude in section 8. The paper ap-
pendix describes design choices for premium-click sys-
tems with multiple attestors.
USENIX Association
16th USENIX Security Symposium
17
2 Problem Overview and Related Work
Click-fraud is a type of abuse that exploits the lack of
veriﬁable human engagement in PPC requests in order to
fabricate ad trafﬁc. It can take a number of forms. One
virulent, automated type of click fraud involves a client
that fraudulently simulates a click by means of a script
or bot—or as the result of infection by a virus or Tro-
jan. Such malware typically resides on the computer of
the user from which the click will be generated, but can
also in principle reside on access points and consumer
routers [8, 9, 7]. Some click-fraud relies on real clicks,
whether intentional or not. An example of the former is
a so-called click-farm, which is a term denoting a group
of low-wage workers who click for a living; another ex-
ample involves deceiving or convincing users to click on
advertisements. An example of an unintentional click is
one generated by a malicious cursor-following script that
places the banner right under the mouse cursor [6]. This
can be done in a very small window to avoid detection.
When the user clicks, the click would be interpreted as
a click on the banner, and cause revenue generation to
the attacker. A related abuse is manifested in an attack
where publishers manipulate web pages such that hon-
est visitors inadvertently trigger clicks [4]. This can be
done for many common PPC schemes, and simply relies
on the inclusion of a JavaScript component on the pub-
lisher’s webpage, where the script reads the banner and
performs a get request that corresponds to what would be
performed if a user had initiated a click.
Click fraud can beneﬁt a fraudster in at least three
known ways: First of all, a fraudster can use click-fraud
to inﬂate the revenue of a publisher. Second, a fraudster
can employ click-fraud to inﬂate advertising costs for a
commercial competitor. As advertisers generally specify
caps on their daily advertising expenses, such fraud is es-
sentially a denial-of-service attack. Third, a fraudster can
modify the ranking of advertisements by a combination
of impressions and clicks. An impression is the viewing
of the banner, with no click; this causes the ranking of the
associated advertisement to go down. This can be done
to beneﬁt own advertising programs at the cost of those
of competitors, and to manipulate the price paid per click
for selected keywords.
Syndicators can in principle derive ﬁnancial beneﬁt
from click fraud in the short term, as they receive revenue
for whatever clicks they deem “valid.” In the long term,
however, as customers become sensitive to losses, and
syndicators rely on third-party auditors to lend credibility
to their operations, click fraud can jeopardize syndicator-
adverstiser relationships. Thus syndicators ultimately
have a strong incentive to eliminate fraudulent clicks.
Today they employ a battery of ﬁlters to weed out sus-
picious clicks. These ﬁlters are trade secrets, as their dis-
closure might prompt new forms of fraud [10]. To give
one example, though, it is likely that syndicators use IP
tracing to determine if an implausible number of clicks
is originating from a single source. While heuristic ﬁl-
ters are fairly effective, they are of limited utility against
sophisticated fraudsters, and subject to degraded perfor-
mance as fraudsters learn to defeat them.
3 Structural Overview
Authentication. Our premium-click scheme is based
on authentication of requests via cryptographic attesta-
tions on client behavior. We refer to these attestations as
coupons. While a coupon could be realized straightfor-
wardly using traditional third-party cookies, such cook-
ies are so commonly blocked by consumers that their use
is often impractical. Our scheme could alternatively in-
volve traditional ﬁrst-party cookies dispensed and har-
vested by a central authority. This architectural ap-
proach, however, presents limitations that we explain in
depth in section 4.1. As we explain, we instead focus in
this paper on the alternative mechanism of cache cookies.
Our premium-click scheme has two distinctive as-
pects:
1. Pedigree: Our scheme relies on designated Web
sites called attestors to identify and label clients that
appear to be operated by legitimate users—as op-
posed to bots or fraudsters. For example, an attestor
might be a retail Web site that classiﬁes as legiti-
mate any client that has made at least $50 of pur-
chases.
(Financial commitment here corroborates
legitimate user behavior.) We refer to such clients,
the producers of premium clicks in our scheme, as
premium clients. In a loose sense, we propose the
creation of an implicit reputation network to com-
bat click-fraud, much like the seller reputation on
eBay [3].
2. Trafﬁc caps: Our scheme supports validation of
clicks from clients that have not produced an ex-
cessive degree of click-trafﬁc and thereby indicated
possible malicious activity.
In our approach, a
click is only regarded as valid if accompanied by
a coupon. Thus, we can detect multiple requests
from the same origin by keeping track of coupon
presentation. In the standard approach in which at-
testations like coupons do not play a role, detection
of same-source trafﬁc is more challenging, and of-
ten depends upon coarser origination data, such as
IP addresses, or more fragile markers of continuity,
such as session identiﬁers.
18
16th USENIX Security Symposium
USENIX Association
Architecture.
In a traditional scheme, as a user clicks
on a banner placed on the site of a publisher, the cor-
responding advertisement is downloaded from the ad-
vertiser and the transaction recorded by the syndicator.
Later, the syndicator bills the advertiser and pays the
publisher.
Under the model of premium clicks, there are addi-
tional tasks carried out: As a user performs a qualiﬁed
action (such as a purchase), the corresponding attestation
is embedded in his browser by an attestor. This attesta-
tion is released to the syndicator when the user clicks
on a banner. The release can be initiated either by the
syndicator or the advertiser.
(Our prototype relies on
syndicator triggering of coupon release.) The syndica-
tor can pay attestors for their participation in a number
of ways, ranging from a ﬂat fee per time period to a pay-
ment that depends on the number of associated attesta-
tions that were recorded in a time interval. To avoid a
situation where dishonest attestors issue larger number
of attestations than the protocol prescribes (which would
increase the earnings of the dishonest attestors), it is pos-
sible to appeal to standard auditing techniques.
Challenges. Our approach to premium clicks gives rise
to two technical challenges. First, we must securely vali-
date premium clients and their associated clicks. In other
words, we must ensure that adversaries cannot imperson-
ate premium clients or forge premium clicks. For this
purpose, we apply basic cryptographic tools for data in-
tegrity. Second, we must protect the privacy of clients.
While we do want syndicators to be able to authenticate
clients, we do not want syndicators to be able to track
them, learn their identities, or harvest side information
about their browsing patterns. Toward this end, we pro-
pose ways in which coupons may be created as essen-
tially anonymous credentials.
Of course, our techniques do not prevent misuse of
coupons by clients that are “good,” i.e., controlled by
honest users, and then turn “bad,” e.g., become infected
with malware. By identifying the sources of clicks, how-
ever, and making trafﬁc caps more effective, coupons in
our scheme still offer some protection against fraud even
in such cases.
It is important to observe that existing ﬁltering meth-
ods cannot in general employ cookies/coupons to detect
fraudulent clicks. That is because ﬁltering is an exclu-
sionary process: It seeks to identify and eliminate “bad”
clicks. If a cookie were used to mark and exclude certain
types of “bad” users, fraudsters could simply remove the
cookies from their browsers.
In contrast, because our
premium-click scheme is distinguishing, i.e., it only ac-
cepts “good” clicks, it can beneﬁt from the use of cook-
ies/coupons. Cookies serve to mark “good” users.
4 A Premium-Click Scheme
In a world of perfect transparency, in which a syndica-
tor knew the (real-world) identity of all users clicking on
ads, click fraud would be much more manageable.
In
such a world, it would be easier to identify misbehavior
by a real user—e.g., implausibly many clicks—as well
as clicks initiated by bogus users or bots. A syndica-
tor could go further, and reference databases containing
proﬁles on the users who clicked on its published ads.
The syndicator could even create a highly reﬁned pricing
structure based on a user’s predicted value as a potential
consumer, with differential compensation for publishers.
Our premium-click protocol diverges from this ideal in
two senses:
• Partial knowledge: Given the fragmented nature
of databases on user behavior and the privacy con-
cerns attendant on user proﬁling, our overall pro-
ﬁling goal is modest. We would like to enable a
syndicator only to determine that a click originates
with a true human user with probable honest intent.
We do not mainly focus on stronger differentiation
among users, although our protocols could support
this goal.
• The browser as carrier: Rather than relying on a
central data repository, we rely on users’ browsers
to convey information among participating sites.
This approach helps eliminate engineering com-
plexity and protect user privacy.
We design our premium-click scheme to support out-
sourced PPC advertising.
It can equally well secure
against click fraud when ads are published directly on
search engines: We need simply treat the syndicator and
publisher as the same entity. The steps in our scheme are
as follows and are illustrated in Figure 1. For simplic-
ity, we assume a single syndicator S and attestor A. (We
discuss the case of multiple attestors in the appendix.)
1. Marking: Based on its criteria for user validation,
the attestor identiﬁes a visiting client as legitimate.
The attestor then “marks” the client. It does so by
caching in the client’s browser a coupon γ, a kind
of cryptographic token.
2. Click / coupon release: When a user clicks on a
publisher’s advertisement in a browser, the user’s
browser is directed to a URL on the syndicator’s
site. This URL includes the publisher’s identity
IDpub and the identity of the advertisement that was
clicked with IDad. The syndicator then causes the
browser to release its coupon γ simultaneously with
IDpub and IDad.2 We let C = (γ, IDpub, IDad)
USENIX Association
16th USENIX Security Symposium
19
denote the released triple. We shall henceforth re-
fer to γ or C alternately as a “coupon,” according to
context.
3. Coupon checking: On receiving a triple C =
(γ, IDpub, IDad), the syndicator checks that γ is a
(cryptographically) well formed coupon, as we de-
scribe in depth later. The syndicator also checks that
the coupon has not been over-used, i.e., that C has
not been submitted an excessive number of times in
the recent past. (What constitutes “excessive” sub-
mission is a policy decision.)
4. Reward: If the syndicator successfully veriﬁes that
C represents a valid premium click, then the syndi-
cator pays the publisher accordingly.
Of course, the publisher might embed additional in-
formation in C, e.g., a timestamp, etc. Moreover, a
user’s browser might in fact contain multiple coupons
γ1, γ2, . . . from different attestors, a possibility that we
discuss below. A single computer may have multiple
users, of course.
If they each maintain a separate ac-
count, then their individual browser instantiations will
carry user-speciﬁc coupons. When users share a browser,
the browser may carry coupons if at least one of the users
is validated by an attestor. While validation is not user-
speciﬁc in this case, it is still helpful: A shared machine
with a valid user is considerably more likely to see honest
use than one without.
We now detail
the technical foundations of our
scheme. We assume here that the browser of a given
user carries at most one coupon. We address the case
of multiple coupons in the appendix.
4.1 Coupon caching
Our ﬁrst technical design choice is the transport medium
for coupons. To ensure its correct association with the
browser that created it, a coupon is best communicated
as a cached browser value (rather than through a back
channel). At the same time, it is important to ensure that
coupons be set such that only the syndicator can retrieve
them, and fraudsters cannot easily harvest them.
Third-party cookies are the most obvious way to in-
stantiate coupons. A third-party cookie is one set for a
domain other than the one being visited by the user; thus,
a coupon could be set as a third-party cookie. Because
third-party cookies have a history of abusive application,
however, users regularly block them. First-party cook-
ies are an alternative mechanism. If an attestor redirects
users to the site of a syndicator and provides user-speciﬁc
or session-speciﬁc information in the redirection, then
the syndicator can implant a coupon in the form of a
ﬁrst-party cookie for its own, later use. Redirection of
this kind, however, can be cumbersome, particularly if
an attestor has relationships with multiple syndicators.
Cache cookies [5], particularly the TIF-based variety,
offer an attractive alternative. An attestor can embed a
coupon in a cache-cookie that is tagged for the site of
a syndicator, i.e., exclusively readable by the syndica-
tor. In their ability to be set for third-party sites, cache
cookies are similar in functionality to third-party cook-
ies. Cache cookies have a special, useful quirk, though:
Any Web site visited by a user can cause them to be re-
leased to the site for which they are tagged. (Thus, as
we shall see, it is important to authenticate the site initi-
ating their release from a user’s browser.) Cache cook-
ies, moreover, function even in browsers where ordinary
cookies have been blocked. Cache cookies are therefore
our preferred medium for coupons.
Brieﬂy, a TIF-based cache cookie works as follows.
Suppose we wish to set a cache cookie bearing value γ
for release to Web site www.S.com. The cache cookie,
then, assumes the form of an HTML page ABC.html that
requests a resource from www.S.com bearing the value
γ. For example, ABC.html might display a GIF image
of the form http://www.S.com/γ.gif. Observe that any
Web site can create ABC.html and plant it in a visit-
ing user’s browser. Similarly any Web site that knows
the name of the page/cache-cookie ABC.html can ref-
erence it, causing www.S.com to receive a request for
γ.gif. Only www.S.com, however, can receive the cache
cookie, i.e., the value γ, when it is released from the
browser.
4.2 Coupon authentication
Ensuring against fraudulent creation or use of coupons
is a key challenge in our scheme. Only attestors should
be able to construct valid coupons. Coupons must there-
fore carry a form of cryptographic authentication. While
digital signatures can in principle offer a ﬂexible way to
authenticate coupons, their computational costs are prob-
ably prohibitively expensive for a high-trafﬁc, potentially
multi-site scheme of the type we propose here. Message-
authentication codes (MACs), a symmetric-key analog of
digital signatures, are a more practical alternative.3
Suppose that the attestor A and syndicator S share a
symmetric key k. (This key may be established out of
band or using existing secure channels.) Let M ACk(m)
represent a strong message authentication code, e.g.,
HMAC [2], computed on a suitably formed message m.
It is infeasible for any third party, e.g., an adversary, to
generate a fresh MAC on any message m. Consequently,
if a coupon assumes the form γ = m k M ACk(m) for a
bitstring m that is unique to the visit of a client to the site
of an attestor, then the coupon can be copied, but cannot
20
16th USENIX Security Symposium
USENIX Association
$$$
$$$$$$
1
1