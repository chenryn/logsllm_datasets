近期对nmap的`操作系统识别`功能造了个轮子，用golang实现了一遍，想未来能用于扫描器，资产发现/管理系统，网络空间引擎中。
造轮子也是一次深入理解它原理的过程，造完轮子后感觉到所有代码尽在我掌握之中，之后大规模扫描测试就可以
以最有效率，发最小包，绕过防火墙的方式进行集成，也能轻易的进行扩展。
成果图，实现了对一个主机在5s内能够识别出其操作系统，能预测开机时间(部分系统有误差),用无状态扫描技术去识别大量主机的操作系统时，平均时间会更低。
造轮子其实是非常不容易的，虽然nmap是开源项目，但与操作系统识别有关的代码就超过6000行，nmap官网有文档专门有一节讲述了nmap操作系统指纹的技术实现
 ，它们都不太容易看懂，我是文档和源码交互着看了几十遍才大概明白整个流程。
## 基本原理
> Nmap OS 指纹识别通过向目标机器的Open和Close 端口 发送多达 16 个 TCP、UDP 和 ICMP 探针来工作
其中 TCP探针13个，UDP探针 1 个，ICMP探针2个。
这些探针是根据RFC协议 中的各种歧义来设计的。然后 Nmap 监听响应。分析响应中的数十个属性以生成`124`
个指纹，并和nmap[内置的指纹库](https://raw.githubusercontent.com/nmap/nmap/master/nmap-os-db "内置的指纹库")进行对比。
nmap对操作系统识别的代码大多集中在 `osscan.cc` `osscan2.cc`中。
  * osscan.cc：主要负责os指纹的解析、对比函数，可直接看如下的函数定义。
    /* Parses a single fingerprint from the memory region given.  If a
     non-null fingerprint is returned, the user is in charge of freeing it
     when done.  This function does not require the fingerprint to be 100%
     complete since it is used by scripts such as scripts/fingerwatch for
     which some partial fingerprints are OK. */
    FingerPrint *parse_single_fingerprint(const char *fprint_orig);
    /* These functions take a file/db name and open+parse it, returning an
       (allocated) FingerPrintDB containing the results.  They exit with
       an error message in the case of error. */
    FingerPrintDB *parse_fingerprint_file(const char *fname);
    /* Compares 2 fingerprints -- a referenceFP (can have expression
       attributes) with an observed fingerprint (no expressions).  If
       verbose is nonzero, differences will be printed.  The comparison
       accuracy (between 0 and 1) is returned).  MatchPoints is
       a special "fingerprints" which tells how many points each test is worth. */
    double compare_fingerprints(const FingerPrint *referenceFP, const FingerPrint *observedFP,
                                const FingerPrintDef *MatchPoints, int verbose);
  * osscan2.cc：主要负责发送探针以及根据返回内容生成指纹，下面是定义的一些主要函数，send开头为相关探针的发送函数，process为中间处理指纹函数，make为最终生成指纹函数。
    /* Probe send functions. */
      void sendTSeqProbe(HostOsScanStats *hss, int probeNo);
      void sendTOpsProbe(HostOsScanStats *hss, int probeNo);
      void sendTEcnProbe(HostOsScanStats *hss);
      void sendT1_7Probe(HostOsScanStats *hss, int probeNo);
      void sendTUdpProbe(HostOsScanStats *hss, int probeNo);
      void sendTIcmpProbe(HostOsScanStats *hss, int probeNo);
      /* Response process functions. */
      bool processTSeqResp(HostOsScanStats *hss, const struct ip *ip, int replyNo);
      bool processTOpsResp(HostOsScanStats *hss, const struct tcp_hdr *tcp, int replyNo);
      bool processTWinResp(HostOsScanStats *hss, const struct tcp_hdr *tcp, int replyNo);
      bool processTEcnResp(HostOsScanStats *hss, const struct ip *ip);
      bool processT1_7Resp(HostOsScanStats *hss, const struct ip *ip, int replyNo);
      bool processTUdpResp(HostOsScanStats *hss, const struct ip *ip);
      bool processTIcmpResp(HostOsScanStats *hss, const struct ip *ip, int replyNo);
      /* Generic sending functions used by the above probe functions. */
      int send_tcp_probe(HostOsScanStats *hss,
                         int ttl, bool df, u8* ipopt, int ipoptlen,
                         u16 sport, u16 dport, u32 seq, u32 ack,
                         u8 reserved, u8 flags, u16 window, u16 urp,
                         u8 *options, int optlen,
                         char *data, u16 datalen);
      int send_icmp_echo_probe(HostOsScanStats *hss,
                               u8 tos, bool df, u8 pcode,
                               unsigned short id, u16 seq, u16 datalen);
      int send_closedudp_probe(HostOsScanStats *hss,
                               int ttl, u16 sport, u16 dport);
      void makeTSeqFP(HostOsScanStats *hss);
      void makeTOpsFP(HostOsScanStats *hss);
      void makeTWinFP(HostOsScanStats *hss);
nmap将指纹分为以下几类
  * SEQ：基于探针进行序列分析的指纹结果
  * OPS：基于探针接受到的TCP选项
  * WIN：基于探针接受到的响应窗口大小 (TCP Windows Size)
  * T系列：基于探针响应的TCP数据包各种测试值的结果
  * ECN：ECN探针返回结果
ECN 是一种通过允许路由器在开始不得不丢弃数据包之前发出拥塞问题信号来提高 Internet 性能的方法。它记录在[RFC
3168中](http://www.rfc-editor.org/rfc/rfc3168.txt "RFC 3168中").
当生成许多包通过路由器时会导致其负载变大，这称之为拥塞。其结果就是系统会变慢以降低拥堵，以便路由器不会发生丢包。这个包仅为了得到目标系统的响应而发送。因为不同的操作系统以不同的方式处理这个包，所以返回的特定值可以用来判断操作系统。
  * IE：ICMP响应的数据包测试值结果
  * U1：UDP响应的数据包测试值结果
nmap OS探测时，会向目标主机的一个Open状态TCP端口，一个Close状态TCP端口，一个关闭的UDP端口 发送数据包，以及一个ICMP数据包。
nmap发包函数是`os_scan_ipv4`,可以通过源码看发包流程
    /* Performs the OS detection for IPv4 hosts. This method should not be called
     * directly. os_scan() should be used instead, as it handles chunking so
     * you don't do too many targets in parallel */
    int OSScan::os_scan_ipv4(std::vector &Targets) {
      ...
      /* Initialize the pcap session handler in HOS */
      begin_sniffer(&HOS, Targets);
      ...
      // 准备测试，删除旧信息，初始化变量
      startRound(&OSI, &HOS, itry);
      // 执行顺序产生测试（发送6个TCP探测包，每隔100ms一个）
      doSeqTests(&OSI, &HOS);
      // 执行TCP、UDP、ICMP探测包测试
      doTUITests(&OSI, &HOS);
      // 对结果做指纹对比，获取OS扫描信息
      endRound(&OSI, &HOS, itry);
      // 将超时未匹配的主机移动
      expireUnmatchedHosts(&OSI, &unMatchedHosts);
      }
## TCP探针
TCP将发送13个数据包，这些数据包分为三类，一类是对tcp option的测试，一类是对tcp/ip 其他字段的测试，最后是ECN测试。
可以直接看nmap构造tcp option数据包源码
    /* 8 options:
     *  0~5: six options for SEQ/OPS/WIN/T1 probes.
     *  6:   ECN probe.
     *  7-12:   T2~T7 probes.
     *
     * option 0: WScale (10), Nop, MSS (1460), Timestamp, SackP
     * option 1: MSS (1400), WScale (0), SackP, T(0xFFFFFFFF,0x0), EOL
     * option 2: T(0xFFFFFFFF, 0x0), Nop, Nop, WScale (5), Nop, MSS (640)
     * option 3: SackP, T(0xFFFFFFFF,0x0), WScale (10), EOL
     * option 4: MSS (536), SackP, T(0xFFFFFFFF,0x0), WScale (10), EOL
     * option 5: MSS (265), SackP, T(0xFFFFFFFF,0x0)
     * option 6: WScale (10), Nop, MSS (1460), SackP, Nop, Nop
     * option 7-11: WScale (10), Nop, MSS (265), T(0xFFFFFFFF,0x0), SackP
     * option 12: WScale (15), Nop, MSS (265), T(0xFFFFFFFF,0x0), SackP
     */
    static struct {
      u8* val;
      int len;
    } prbOpts[] = {
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x05\xb4\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20},
      {(u8*) "\x02\x04\x05\x78\x03\x03\x00\x04\x02\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x00", 20},
      {(u8*) "\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x01\x01\x03\x03\x05\x01\x02\x04\x02\x80", 20},
      {(u8*) "\x04\x02\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x03\x03\x0A\x00", 16},
      {(u8*) "\x02\x04\x02\x18\x04\x02\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x03\x03\x0A\x00", 20},
      {(u8*) "\x02\x04\x01\x09\x04\x02\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00", 16},
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x05\xb4\x04\x02\x01\x01", 12},
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x01\x09\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20},
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x01\x09\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20},
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x01\x09\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20},
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x01\x09\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20},
      {(u8*) "\x03\x03\x0A\x01\x02\x04\x01\x09\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20},
      {(u8*) "\x03\x03\x0f\x01\x02\x04\x01\x09\x08\x0A\xff\xff\xff\xff\x00\x00\x00\x00\x04\x02", 20}
    };
发包每次的TCP Windows窗口大小也不一样
    /* TCP Window sizes. Numbering is the same as for prbOpts[] */
    u16 prbWindowSz[] = { 1, 63, 4, 4, 16, 512, 3, 128, 256, 1024, 31337, 32768, 65535 };
前六个数据包为 SEQ/OPS/WIN/T1 探针，第7个为ECN探针，后面的是T探针。
SEQ/OPS/WIN探针发SYN包，ECN探针发
`TH_CWR|TH_ECE|TH_SYN`，`Urgent`为63477，T探针发包flag如下，发包端口前四个为开放的tcp端口，后三个为关闭的TCP端口。
如果nmap未找到关闭的TCP端口，将随机取值
    closedTCPPort = (get_random_uint() % 14781) + 30000;
T | flag | Dst Port  
---|---|---  
T1 | TH_SYN | openTCPPort  
T2 | 0 | openTCPPort  
T3 | TH_SYN\ | TH_FIN\ | TH_URG\ | TH_PUSH | openTCPPort  
T4 | TH_ACK | openTCPPort  
T5 | TH_SYN | closedTCPPort  
T6 | TH_ACK | closedTCPPort  
T7 | TH_FIN\ | TH_PUSH\ | TH_URG | closedTCPPort  
## ICMP探针
发送两个 ICMP 探针。
第一个设置 IP协议 DF 位，TOS 为零，ICMP Code字段为 9（即`ICMPv4CodeNetAdminProhibited`），Seq为
295，payload 120 字节的 `0x00`。
第二个 探针类似ping 查询，除了 TOS设置为`IP_TOS_RELIABILITY`，ICMP Code为0(ICMPv4CodeNet)，发送
150 字节的数据。
## UDP探针
向一个关闭的UDP端口发包，IP协议的ID设置为`0x1042`,payload为300字节的`0x43`
如果nmap未找到关闭的UDP端口，将随机取值
    closedUDPPort = (get_random_uint() % 14781) + 30000;
## 指纹生成
这是造轮子过程中最麻烦的部分，需要将这些指纹结果一一实现。
#### TCP ISN 最大公约数 ( `GCD`)
tcp前六个探测包中，tcp seq数值的差值作为一个数组，这个数组及有5个元素。取这个数组的最大公约数。
#### TCP ISN 计数器速率 ( `ISR`)
取探针返回包 SEQ的差 除以 发送时间的毫秒差 即 SEQ的发送速率，再得出探针每个速率的平均值即seq_rate，最后通过一个公式得出最后的值即ISR。
    seq_rate = log(seq_rate) / log(2.0);
    seq_rate = (unsigned int) (seq_rate * 8 + 0.5);
#### TCP ISN 序列可预测性指数 ( `SP`)
代码和文档都难懂，弄一个简化版的代码就看懂了
    seq_stddev = 0
    for i =0;i<responseNum -1;i++{
      seq_stddev += （（SEQ[i]的发送速率 - SEQ平均速率）  / GCD 最大公约数）的平方
    }
    seq_stddev  /= responseNum-2
    seq_stddev = sqrt(seq_stddev);
    seq_stddev = log(seq_stddev) / log(2.0);
    sp = (int) (seq_stddev * 8 + 0.5);
以我仅学过的线性代数，这个可以弄成一个公式的，但是我不会在markdown上展示，算了~
#### IP ID序列生成算法( `TI`, `CI`, `II`)
从TCP Open端口，Tcp Close端口，ICMP协议中，计算ip id的生成算法
  1. 如果所有 ID 号均为零，则测试值为`Z`。
  2. 如果 IP ID 序列至少增加 20,000，则该值为`RD`（随机）。这个结果是不可能的，`II`因为没有足够的样本来支持它。
  3. 如果所有 IP ID 都相同，则测试设置为该十六进制值。
  4. 如果两个连续 ID 之间的任何差异超过 1,000，并且不能被 256 整除，则测试的值为 `RI`（随机正增量）。如果差异可以被 256 整除，则它必须至少为 256,000 才能导致此 `RI`结果。
  5. 如果所有差异都可以被 256 整除且不大于 5,120，则测试设置为`BI`（中断增量）。 这种情况发生在 Microsoft Windows 等系统上，其中 IP ID 以主机字节顺序而不是网络字节顺序发送。它工作正常并且没有任何类型的 RFC 违规，尽管它确实泄露了对攻击者有用的主机架构细节。
  6. 如果所有差异都小于十，则该值为`I`（增量）。我们在这里允许最多 10 个差异（而不是要求按顺序排列），因为来自其他主机的流量会导致序列间隙。
  7. 如果前面的步骤都没有识别生成算法，则从指纹中省略测试。
#### 共享 IP ID 序列布尔值 ( `SS`)
根据前面推测出的IP ID增长方式，记录目标是否在 TCP 和 ICMP 协议之间共享其 IP ID 序列。
    /* SS: Shared IP ID sequence boolean */
      if ((tcp_ipid_seqclass == IPID_SEQ_INCR ||
            tcp_ipid_seqclass == IPID_SEQ_BROKEN_INCR ||
            tcp_ipid_seqclass == IPID_SEQ_RPI) &&
           (icmp_ipid_seqclass == IPID_SEQ_INCR ||
            icmp_ipid_seqclass == IPID_SEQ_BROKEN_INCR ||
            icmp_ipid_seqclass == IPID_SEQ_RPI)) {