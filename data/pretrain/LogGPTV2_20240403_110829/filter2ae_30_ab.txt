的库，这个库在进程初始化的时候会读取一些 Preferences 信息，也就在 cfprefsd 留下了访问记录。接着 WebKit 调用
sandbox_init_with_paramaters 进入锁定状态并加载网页。这时候攻击者通过渲染引擎漏洞获得了在 sandbox
内执行任意代码的能力，访问 Preferences API。cfprefsd 仍然认为渲染器是一个正常进程，允许读写任意路径的 plist
文件，除非对应路径需要 root 权限。
到这一步其实已经可以通过修改 plist 在 sandbox 外触发代码执行了。macOS 在开机时会加载 ~/Library/LaunchAgents
当中的启动项，使用这个漏洞添加启动项便可同时实现逃逸沙箱和持久化。但是缺点显而易见，就是需要一次注销或者重启。
借助跨进程 XSS，我们找到了一种立即执行任意命令的方法。
macOS 曾经有一个叫 Dashboard 的功能，在一个独立的桌面上运行一些 HTML 编写的小组件（widget）。这个功能在 10.15
当中被删除，由桌面右侧的“今天”视图（Today Widgets）替代。
回到当时的系统中。
Dashboard Widgets 保存在如下路径：
· /Library/Widgets 系统预装
· ~/Library/Widgets 用户下载安装
一个 widget 是一个包（bundle），也就是带有特定结构的目录，目录的扩展名为 .wdgt。它由元数据 Info.plist、图标和至少一个
HTML 文件作为主体。WebContent 进程沙箱提供了一个可以写入文件的临时目录，可以释放一个完整的 wdgt 包。再通过前面提到的cfprefsd
漏洞篡改 com.apple.dashboard 域下的设置，从而让 Dashboard 加载来自临时路径的恶意 widget，实现从 WebKit 沙箱到
Dashboard 的跨进程 xss。
Dashboard 的 WebView 是一个典型的遗留组件，没有沙箱隔离，因此任何一个非 JIT 的漏洞都可以直接利用后拿到
shell。但当我们可以注入任意小插件的时候，事情变得更简单了。在 .wdgt 的 Info.plist 当中有一个 AllowSystem
属性，一旦设置为 true，js 的上下文中便会提供一个 window.widget.system 的函数。顾名思义，就是执行任意系统命令：
    window.onload = function () {
      widget.onshow = function () {
        widget.system('/usr/bin/open -a Calculator');
      }
    }
接下来还有一些问题亟待解决。假如系统把 Dashboard 关闭了怎么办？还有在通过漏洞安装了任意 widget 之后，如何才能激活代码执行的事件？
通过分析 WebContent 沙箱，我们发现这样一个系统服务允许访问：
    (global-name "com.apple.dock.server")
这个 Dock 服务正好通过 MIG 提供了启用 Dashboard 和切换桌面的功能。更方便的是，在 HIServices.framework
当中提供了一些私有函数，可以帮助构造并发送具体的 Mach Message。
使用如下两行代码便可以强制开启 Dashboard（即使之前被系统设置禁用），然后模拟用户手势滑动到 Dashboard 的桌面：
    CoreDockSetPreferences((__bridge CFDictionaryRef) @{@"enabledState" : @2});
    CoreDockSendNotification(CFSTR("com.apple.dashboard.awake"));
## 4.HelpViewer 的又一次陷落
这个案例的发现颇有一些喜剧色彩。
在距离 2019 年的天府杯还有一个多月，笔者突然发现 mac 10.15
开发者测试版中将准备好的沙箱逃逸漏洞的其中一环修补掉了（这个利用链条将在稍后分析），只能在极短时间内再争取一个新的方案。
这时笔者盯上了 Project Zero 之前的一个经典案例 CVE-2017-2361。在 issue 1040 中，lokihardt 通过特殊的
URL scheme 打开本地预装应用 HelpViewer，触发一个反射型 xss，从而得到特权上下文中执行 Apple Script 的能力，只用一个
xss 实现了完整的远程代码执行。这个漏洞当时也由 redrain 独立发现，被撞掉了。
既然时间所剩无几，不如看看有没有找到变种的机会。
Safari 在跳转本地应用的时候需要弹窗确认。但通过逆向发现，浏览器内部维护了一个信任名单列表：
    @"itms-books",@"itms-bookss", @"ibooks", @"macappstore", @"macappstores",
      @"radr", @"radar", @"udoc", @"ts", @"st", @"x-radar", @"icloud-sharing",
      @"help", @"x-apple-helpbasic" count:19];
只要目标 URL 的 scheme 在其中，而且数字签名来自 Apple，就不会询问用户而直接跳转过去。其中的 x-apple-helpbasic
引起了笔者的注意。这个 URL 仍然链接到 HelpViewer，由函数 -[HVBasicURLHandler process:] 处理。
    if ([url.scheme isEqualToString:@"x-apple-helpbasic"] &&
      [url.host hasSuffix:@".apple.com"] &&
      [HelpApplication
    sharedApplication].isOnline)
只要 URL 的域名满足 *.apple.com，就会打开对应的 https 页面。例如x-apple-helpbasic://www.apple.com/aaa，将访问 
由于用到了加密，我们无法通过 Wi-Fi 劫持的方式篡改返回的内容，从而寄希望于真正意义上的 xss 或者 open redirection
问题。在找到这段代码的时候距离比赛仅有不到一星期，凭着碰运气的心态开始手工挖掘 Web 漏洞。
苹果官网有一个叫 Apple web server notifications
的页面，罗列了服务端相关的修复公告和致谢，包括具体的域名。这其实给前期的信息收集带来了很大方便。运气爆棚的是，笔者仅靠 Google Dork 和 F12
的原始办法，不到一天时间便找到了一个符合要求的 DOM xss。
通过这个客户端和服务端结合的问题，我们从浏览器直接跳转到了 HelpViewer 应用当中。很可惜，正如这个 URL
名字所暗示的那样，这是一个仅具备基本功能的界面，此前的 Apple Script 功能并不能使用。其实到这一步已经结束了，沙箱确实没了。只要再来一个 DOM
浏览器漏洞，即可实现 fullchain exploit。
那么逻辑的方式还有没有做其他事的可能？
在 -[HVBasicWindowController
webView:decidePolicyForNewWindowAction:request:newFrameName:decisionListener:]
里，遇到无法处理的 URL，就会调用 -[NSWorkspace openURL:] 打开文件，也就相当于运行本地程序。很可惜一开始注入 xss 的页面是
https:// 协议，按照 WebKit 的同源策略限制，是不允许直接跳转到 file:/// 域下的，否则我们就可以直接将 location 指向
Calculator.app 直接运行计算器了。不过弹其他的 URL 没有限制，例如 ssh:/// 可以打开一个终端应用尝试连接远程服务器。
**另外在 HelpViewer 当中实现了数个 NSURLProtocol 的子类：**
· HVHelpTopicsURLProtocol (x-help-topics:)
· HVHelpContentURLProtocol (apple-help-content:)
· HVHelpURLProtocol (help:)
请不要和之前提到的应用跳转 URL 混淆。虽然都是 help: 开头，但这里的 URL 是用来处理资源加载，调用对应的 URLProtocol
类当中的方法，将 HTTP 响应内容替换成自定义的返回值。在方法 -[HVHelpURLProtocol startLoading] 当中，会将 URL 的
pathname 转换成本地的路径，直接读取文件进行返回。例如 help://anything/etc/passwd 会替换成对 /etc/passwd
的访问。
之前提到我们不能跳转到 file:/// 域下，而 help:// 就没有这个限制。可以结合其他条件，让 macOS
将远程文件挂在到一个本地可预测的路径，通过访问这个 help://anything/some/path.html，即可获得全盘文件读取的能力。在 macOS
<= 10.14 的系统上可以用 /net/hostname/pathname 这样的路径自动挂载远程服务器上的
NFS，完成利用。正是因为这个特性的安全风险，mac 在 10.15 之后默认注释掉了 /etc/auto_master 当中挂载 NFS 的能力。
笔者做了另一种尝试。之前提到这个 WebView 可以不受限制地打开除 file:/// 之外的本地 URL scheme，可以使用
smb://user:passwd@host/path 让 Finder 加载一个远程 samba 资源。假设成功后，会使用 /Volumes/path
作为挂载点，也就完成了从 https:// 到 help:// 域的转换，从而读取全盘本地文件。不过实际操作过程中 Finder