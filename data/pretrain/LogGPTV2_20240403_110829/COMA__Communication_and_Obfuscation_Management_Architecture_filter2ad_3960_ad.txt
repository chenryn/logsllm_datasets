mode. In DCC mode, it gives an attacker control over the
input to the AEAD, increasing the chances of SCA on the
cryptography engine. NIST standard SP 800-90B [12] dic-
tates that continuous health testing must be performed on
the TRNG. These tests include repetition counting to detect
catastrophic failure and adaptive proportion testing to detect
loss of entropy. Removal of the TRNG would be detected as
this would result in insufﬁcient entropy to satisfy the health
test, assuming the test is implemented on the trusted chip.
Removal of COMA architectural modules makes the chip
non-functional as COMA is not a wrapper architecture, but a
fused one. Complete removal of COMA requires successful
RE. Removing the PUF can be made challenging by using a
strong PUF, with a large number of challenge-response pairs.
Replacing such a PUF with a deterministic function is chal-
lenging as such functions are likely to have a substantially
different area and power, making them detectable.
Table 1: Main features of the two proposed COMA variants.
Feature
COMA1
COMA2
AEAD
PRNG
BUS Width
Pins used for Communication
CSN-RCSN Size
Trusted Memory
C f ix: initialization overhead (cycles)
Cbyte: cycles needed for encrypting each byte
PRNGper f : Throughput of generating PRN
AES-GCM
AES-CTR
8
8
64
4 Kbits
10,492
72
ACORN
Trivium
8
8
64
4 Kbits
20,452
17
128bit/10cycles
64bit/cycle
5 COMA Implementation Results
For evaluation, all designs have been implemented in VHDL
and synthesized for both FPGA and ASIC. For ASIC
implementation we used Synopsys generic 32nm educa-
tional libraries. For FPGA veriﬁcation, we targeted a small
FPGA board, Digilent Nexys-4 DDR with Xilinx Artix-7
(XC7A100T-1CSG324).
5.1 COMA Area Overhead
We implemented two variants of COMA architecture: a NIST
compliant solution (denoted by COMA1) and a lightweight
solution (denoted by COMA2). The AEAD and PRNG in
COMA1 is based on AES-GCM and AES-CTR respectively.
The COMA2 is implemented by using ACORN for AEAD
0    2k    4k    6k     8k   10k  12k  14k403020100-10-20-30-40t-valuetime domain0   2k    4k    6k   8k  10k  12k  14k  16k403020100-10-20-30-40t-valuetime domain0    2k   4k   6k   8k   10k  12k  14k403020100-10-20-30-40t-valuetime domain0    2k   4k   6k    8k  10k  12k  14k403020100-10-20-30-40t-valuetime domainUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 189Table 2: Resource Utilization of the COMA Architecture for
NIST-compliant and lightweight solution.
Table 4: Optimized results of COMA Architecture for NIST-
compliant and lightweight solution.
Name
AES-GCM+AES-CTR
ACORN+Trivium
Slice
LUT
FF
Slice
LUT
FF
AEAD_EXT
RNG
CSN
Others
AEAD_EXT
RNG
RCSN
ECC
PUF [48]
Others
1,336
712
257
149
1,336
738
252
563
177
209
TRUSTED
4,432
618
739
144
UNTRUSTED
4,432
628
737
1161
—
257
3,804
2,226
540
345
3,804
2,352
607
1569
—
359
On Xilinx Artix-7 (XC7A100T-1CSG324) FPGA.
333
215
257
149
333
241
252
563
177
209
1,067
601
540
345
1,067
683
607
1569
—
359
591
450
739
144
591
460
737
1161
—
257
Table 3: Resource Utilization for ASIC implementation of
NIST-compliant and lightweight COMA.
Name
AES-GCM+AES-CTR
ACORN+Trivium
Cells Areaum2 Tclkns PowermW Cells Areaum2 Tclkns PowermW
25338
0.046
0.84
1.62
8681
0.11
1.97
1.18
COMA
(cid:46) RNG
5684
(cid:46) CSN/RCSN 1749
(cid:46) AEAD
(cid:46) ECC
13675
3278
0.025
0.008
0.061
0.016
1.43
0.08
1.67
1.34
0.431
0.11
0.704
0.321
1267
1749
2257
3278
0.007
0.008
0.013
0.016
0.27
0.08
0.97
1.34
0.144
0.11
0.251
0.321
Using Synopsys generic 32nm libraries.
and Trivium for PRNG, The details of these two variants are
summarized in Table 1. The breakdown of area (in terms of
Slices, LUTs, and FFs) for these solutions for an FPGA imple-
mentation in Xilinx Artix-7 (using Minerva [14]) is reported
in Table 2. The breakdown of area (in terms of Cells and um2),
critical path, and power consumption for an ASIC implemen-
tation is reported in Table 3. Note that the 2.5D-COMA needs
both the trusted and untrusted parts of the architecture, while
the R-COMA only requires the untrusted part. Table 4 reports
optimized area and frequency results on FPGA for top-level
of trusted and untrusted sides. As illustrated, the total area
of lightweight solution is around 1/3 of the NIST-compliant
solution. The reported numbers in Table 2 include the over-
head of all sub-modules including AEAD, CSN-RCSN, RNG,
ECC, etc. Due to the optimization on the boundaries among
the units, resource utilization in Tables 4 is less than the sum
of row values in Table 2.
5.2 COMA Performance
Fig. 7 compares the performance of two solutions in DCC and
LCC mode. As illustrated, for small data sizes, the COMA1
outperforms the COMA2 solution. However, as the size of
data increases, the COMA2 outperforms the COMA1 solu-
tion. It is due to the fact that stream ciphers such as ACORN
have a long initialization phase, making them inefﬁcient for
small data size. In addition, our AES-GCM implementation
Name
AES-GCM+AES-CTR
ACORN+Trivium
Slice
LUT
FF
Freq[MHz]
Slice
LUT
FF
Freq[MHz]
Trusted
2,297
7,094
5,892
Untrusted
2,818
8,781
7,169
103
109
1,030
2,901
1,924
1451
4,182
3,156
121
120
On Xilinx Artix-7 (XC7A100T-1CSG324) FPGA.
Figure 7: Total execution time in number of clock cycles for
(AES-GCM + AES-CTR) and (ACORN + Trivium).
beneﬁts from an 8-bit datapath, but the ACORN is realized
by a 1-bit serial implementation. The total latency in terms
of the number of clock cycles for COMA1 and COMA2 im-
plementations can be calculated using equation (1), in which
the number of cycles for the initialization and ﬁnalization
is ﬁxed and is given in Table 1. The Cbyte is the number of
cycles needed for encrypting each input message byte, which
is 17 and 72 for COMA2 and COMA1, respectively. Hence,
in spite of longer initialization, the COMA2 outperforms the
COMA1 for message sizes larger than 128 Bytes.
Tcomm = Cf ix + Messagesize ×Cbyte
(1)