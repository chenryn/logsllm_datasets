of data is 2d−1 = 4 and the third data can be inserted normally.
In order to keep the consistency of the DFHMT structure, when
the tree is ﬁrst extended, a root node ρ1 is set above the unique
leaf node, and each time the tree is extended, a new root node
is set on the original root node, and the right subtree of the new
root node is empty.
Fig. 3. DFHMT under diﬀerent scale
(2) µ extension
With the continuous appending of data, the scale of DFHMT
is becoming larger and larger, and the redundancy caused by
the extension of scale is also increased. As shown in Fig. 4, at
d = 100, the amount of the data that Merkle tree can hold is
299, when inserting the 299 + 1 dataneed to extend the scale of
the tree, and the depth of the tree is 101 and the data capacity
increased to 2100, but not so much data to insert at this time, in
which case there will be O(2d−1) space redundancy. Therefore,
can not continue to use the double extension method to extend
the scale of the tree.
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT579392136N1_2N4_4211792N1_1N3_3N2_2N3_4N1_4=N1_2×W1_2(cid:711)N3_4×W3_4W4_4W1_1W2_2W3_3W1_2W3_4N3_4=N3_3×W3_3(cid:711)N4_4×W4_4N1_2=N1_1×W1_1(cid:711)N2_2×W2_2:N1_4t1t2t3t4(cid:85)2136(2)(cid:72)(1)(cid:72)(9)(cid:72)(1)(cid:72)(7)(cid:72)(2)(cid:72)(1)(cid:72)(9)(cid:72)(2)(cid:72)(57)(cid:72)(6)(cid:72)(3)(cid:72)(39)(cid:72)1_41_21_23_43_4()()()()()NNWNW(cid:72)(cid:72)(cid:72)(cid:72)(cid:72)(cid:32)(cid:133)(cid:134)(cid:133)1_21_11_12_22_2()()()()()NNWNW(cid:72)(cid:72)(cid:72)(cid:72)(cid:72)(cid:32)(cid:133)(cid:134)(cid:133)3_43_33_34_44_4()()()()()NNWNW(cid:72)(cid:72)(cid:72)(cid:72)(cid:72)(cid:32)(cid:133)(cid:134)(cid:133)2(cid:85)1(cid:85)1(cid:85)2(cid:85)3(cid:85)d= 1capacity = 1d= 2capacity = 2d= 3capacity = 41(cid:85)(1)(cid:72)(2)(cid:72)(1)(cid:72)(7)(cid:72)(2)(cid:72)(2)(cid:72)(1)(cid:72)(1)(cid:72)(7)(cid:72)(9)(cid:72)(2)(cid:72)(0)(cid:72)(1)(cid:72)(2)(cid:72)(1)(cid:72)/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
4
threshold τ, when capacity < τ , uses the strategy that extend-
ing to a full binary tree at one time, that is, the depth is in-
creased by 1 when capcacity increases 1 times each time; when
capacity ≥ τ, weights are generated in batches, only the part
of the tree is extended, and a full binary tree is formed after
being extended several times. In this case, the extension does
not increase the depth of the tree each time and capcacity is not
increased by 1 times, but gradually increases at a ﬁxed value.
When the size of the tree has not reached the threshold τ , uses
double extension, the resulting redundancy is acceptable, so can
select capcacity for the last double extension as the value of µ,
that is τ = 2µ. In the meantime, the structure of the Merkle tree
remains the same before and after extension of the scale, with
no much changes. This consistency allows DFHMT to generate
shorter authentication paths when processing queries.
While plaintext weights used by clients do not take up too
much storage space, a large amount of weight can create un-
acceptable storage cost when the amount of data reaches a cer-
tain size. In practice, consider using a pseudorandom function
(PRF) to generate weights, so that the client does not have to
store all the weights and recomputes the weights when needed.
3. Formal Deﬁnition
Before giving the deﬁnition of DFHMT, we ﬁrst describe the
symbols used, as shown in Table 1
Table 1. Description of Symbols
Symbol
Veriﬁer
Meaning
Veriﬁer (client)
Symbol Meaning
Prover
Fig. 4. The redundancy after the tree expansion
When the size of the DFHMT reaches the threshold tau, can
only extend the necessary branches with each appending of
data. For example, when inserting the 299 + 1 data, only ex-
tending the branch from the root node of the tree to the node
appending, 101 weights need to be generated. When inserting
the 299 + 2 data, only one weight needs to be generated because
it shares some weight with the 299+1 data. And so on, in the fol-
lowing 299 data that can be inserted, the total number of weight
generated is 2100, then generates 2 weights on average for each
insert of data, and half of the data needs to generate only one
weight. This approach adjusts the structure of the tree every
time the data is inserted, increasing the complexity of the insert
operation. Therefore, can use batch processing idea, selects a
number µ that represents the weights needed to insert µ data
each time, that is, after each extension of the tree, µ data can be
continued to insert. This is a compromise approach that avoids
the redundancy of the space while reducing the impact on the
insert operation µ needs to be chosen based on the performance
of the algorithm and the actual acceptable redundancy. When
selecting µ also needs to meet certain conditions: after several
extension, the tree must achieve full binary tree state. Suppose
τ = 16, µ = 4, when size =capacity and capacity = τ, after ex-
tending the scale, the tree shown in Fig. 5, the depth of the tree
is increased by 1, while capacity is not increased by 1 times,
but increased by a ﬁxed value: µ. Generates a new root node,
the original root node is left child node of the new root node,
and then extends the part of the branch of the tree to continue
to insert µ data. After that, each extension can continue to in-
sert µ data, the depth of the tree increases as the case may be,
and after a total of 2d−2/µ times extends, DFHMT achieves full
binary tree.
VeriﬁerTree Merkle tree of
veriﬁer
ProverTree Merkle tree of
DS
λ
i, j
datai
basis
data
weights
n
authi
prover
Streaming data
storage
Security param-
eter
Serial number of
the streaming
data series
Data returned by
signal
element
query
Prover (server)
Evidence
in-
formation (root
node)
stored by veriﬁer
Original data
Set of plaintext
weight
Set of ciphertext
weight
The current total
amount of data
Authentication
path returned by
signal
element
query
Authentication
path returned by
range query
Fig. 5. Extend scale of tree with ﬁxed value µ
datai, j
Data returned by
range query
authi, j
Based on the above analysis, DFHMT can dynamically ex-
tend the scale of the tree according to the needs. Based on the
4
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT...(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)(cid:17)Redundancy2(cid:85)1(cid:85)99(cid:85)99d = 100capacity = 2100d = 101capacity = 2100(cid:85)101(cid:85)(2)(cid:72)(1)(cid:72)(3)(cid:72)(6)(cid:72)(9)(cid:72)(2)(cid:72)(7)(cid:72)(1)(cid:72)(2)(cid:72)(1)(cid:72)(39)(cid:72)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)()(cid:72)(cid:16)/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
5
For a DFHMT, if for any λ ∈ (cid:3) , a public/private key pair
(hpk, hsk) is generated by calling genKey once, Veri f ierTree
is generated by calling initVeriﬁer once, proverTree is generated
by calling initPorver once, and calls polynomial times append-
Verifer, appendProver, extendVeriﬁer and extendProver, for all
i ≤ n, j ≤ n, i < j, there is:
(1) If (datai, authi) ← singleQuery(i),
(2) If (datai, j, authi, j) ← rangeQuery(i, j),
then 1 ← singleVeri f y(hsk, i, datai, authi) holds;
then 1 ← rangeVeri f y(hsk, i, j, datai, j, authi, j) holds;
Then DFHMT can be considered as correct.
Deﬁnition 3. The security of DFHMT.
If a DFHMT satisﬁes the following properties:
A malicious or prover controlled by adversary, can not re-
place, modify the node in DFHMT, or construct node by itself.
That is, if it returns error response for the query submitted by
veriﬁer, the result can not pass the veriﬁcation of veriﬁer.
Then consider DFHMT is secure.
The following is a description of the security of the DFHMT
through an interactive game between challenger and adversary.
The challenger generates the public/private key pair of FHE
(hpk, hsk) , and then sends public key hpk to adversary Adv .
Adversary Adv can access the original streaming data, can send
poly(λ) data (data1, data2, . . . , datapoly(λ)) to challenger adap-
tively. Then the challenger inserts the data to DFHMT, re-
turns the authentication paths (auth1, auth2, . . . , authpoly(λ)) cor-
responding to these data. Adversary Adv attempts to destroy
the structure of DFHMT, that is to modify or replace the nodes
of the DFHMT and to output a authentication path of data that
does not actually exist in the DFHMT. The formal description
is as follows:
Setup: The challenger executes genKey(1λ) to generate pub-
lic/private key pair (hpk,hsk), and sends public key hpk
to adversary Adv.
Deﬁnition 1. DFHMT can be described as a tuple of PPT al-
gorithms:
DFHMT = (getKey, initVeri f ier, initProver,
appendVeri f ier, appendProver,
extendVeri f ier, extendProver,
singleQuery, singleVeri f y,
rangeQuery, rangeVeri f y)
The algorithms in DFHMT are described as follows:
(1) key generation algorithm getKey(1λ): Input security pa-
rameter λ, use the key generation algorithm of FHE to gen-
erate the public/private key pair (hpk, hsk) ← getKeyε(1λ),
return hpk and hsk
(2) Initialization algorithm of veriﬁer initVeriﬁer(): Initialize
VeriﬁerTree and basis to empty.
(3) Initialization algorithm of prover initProver():
ProverTree and DS to empty.
Initialize
(4) data appending algorithm of veriﬁer appendVeriﬁer(data0:
Input data as a parameter, use the weights in VeriﬁerTree,
and update evidence information basis with use numerical
multiplication and addition.
(5) data appending algorithm of prover appendProver(data,
hpk): Use hpk to encrypt data, update ProverTree with FHE
ciphertext operations evaluateε{addε, multε} , and append
data to DS.
(6) tree extension algorithm of veriﬁer extendVeriﬁer(weights):
When VeriﬁerTree reaches the maximum capacity, need to
extend the scale of the tree to accommodate more data. In-
put weights as a parameter, extend VeriﬁerTree , recompute
and update basis.
(7) tree extension algorithm of prover extendProver
([eights]FHE): Use parameter
[eights]FHE to extend
ProverTree according to FHE ciphertext operations
evaluateε{addε, multε}.
(8) signal element query algorithm singleQuery(i): query ith
If querying is successful, return the data datai
element.
and the corresponding authentication path suthi; otherwise
returns NULL.
(9) signal element veriﬁcation algorithm singleVer f y(hsk, i,
datai, authi): verify datai whether it is the ith element us-
ing hsk and authentication path suthi. If the veriﬁcation is
successful, then output 1; otherwise output 0.
(10) range query algorithm rangeQuery(i, j): query the ele-
ments from ith to jth.
If querying is successful, return
all the data datai, j whose positions are from i to j and the
corresponding authentication path authi, j ; otherwise return
NULL .
(11) Range veriﬁcation algorithm rangeVeri f y(hsk, i, j, datai, j,
authi, j) : verify datai, j whether they are the elements from
ith to jth using hsk and authentication path authi, j. If the
veriﬁcation is successful, then output 1; otherwise output
0.
Deﬁnition 2. The Correctness of DFHMT.
to challenger,
inserts
the data to DFHMT,
Update: The adversary adaptively selects poly(λ) data data
(data1, data2, . . . , datapoly(λ))
chal-
lenger executes appendVeriﬁer and appendProver
,
then executes
(datai, data j) ← singleQuery(i) to generate the au-
thentication paths (auth1, auth2, . . . , authpoly(λ)) corre-
sponding to each data element, and sends them to Adv
. The response sequence Adv obtained is expressed as
Auth := {(data1, auth1), (data2, auth2), . . . , (datapoly(λ),
authpoly(λ))}.
the
(datai∗ , i∗, authi∗),
single-
if
Veri f y(hsk, i∗, (datai∗ , authi∗) → 1 , then the adversary
wins.
(datai∗ , i∗, authi∗)
adversary
output
(cid:60)
Auth,
and
Forge: Finally
Deﬁne Pr as the probability that the adversary Adv will
win. For any poly(λ), if the probability Pr that adversary Adv
wins with any polynomial-time algorithm is negligible, then
DFHMT is secure.
5
MANUSCRIPT ACCEPTEDACCEPTED MANUSCRIPT/ Jurnal of Network and Computer Applicaion 00 (2018) 1–15
6
4. Construction
The construction of DFHMT is slightly diﬀerent from that
of the general Merkle tree, the reason is the diﬀerence in data
structure between two tree. The diﬀerences are mainly two
points: DFHMT does not need to predetermine the scale of the
Merkle tree in the initialization phase, and it will dynamically
extends the scale as needed when appending data; in addition,
DFHMT uses numeric multiplication and addition instead of
hash. Therefore, in addition to storing the root node, veriﬁer
also needs to maintain a tree of weights. So, the algorithms