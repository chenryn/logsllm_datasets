# Migrating Oracle Queries to PostgreSQL

## Presentation Overview
- **Event:** PGConf.EU 2012
- **Location:** Prague, Czech Republic
- **Date:** October 26th, 2012
- **Presenter:** Alexey Klyukin, Command Prompt, Inc.
- **Photo Credit:** Nils Rinaldi (http://www.flickr.com/people/nilsrinaldi/)

## Why Migrate from Oracle to PostgreSQL?
1. **Unsupported and Outdated Oracle Version:**
   - The current Oracle version is no longer supported and is outdated.
2. **PostgreSQL Maturity:**
   - PostgreSQL is a mature and reliable database system.
3. **Cost-Effective:**
   - PostgreSQL offers significant cost savings compared to Oracle.
4. **Ease of Query Conversion:**
   - In theory, query conversion is straightforward, but it can be more complex in practice.

### Specific Context:
- **Oracle Version:** 8i (8.1.6)
- **PostgreSQL Version:** 9.1
- **Database Size:** 500GB financial database
- **Challenges:**
  - Oracle-specific queries and data types
  - No triggers or stored procedures
  - Automated QA for the conversion process

## Migration Process
### Steps Involved:
1. **Data Migration:**
   - CSV dump
   - Ora2Pg tool
   - Oracle Foreign Data Wrapper (FDW)
   - Cross-database replication
2. **Query Migration:**
   - Handling Oracle-style outer joins
   - Pseudocolumns (e.g., ROWNUM)
   - `START WITH ... CONNECT BY` clauses
   - Oracle-specific functions
3. **Reports:**
   - Generating reports in PostgreSQL
4. **Results Comparison:**
   - Comparing results between Oracle and PostgreSQL

### Data Migration
- **CSV Dump:**
  - Export data to CSV files and import into PostgreSQL.
- **Ora2Pg:**
  - A powerful tool for converting Oracle databases to PostgreSQL.
- **Oracle Foreign Data Wrapper (FDW):**
  - Allows querying Oracle data directly from PostgreSQL.
- **Cross-Database Replication:**
  - Set up replication to keep data synchronized during migration.

### Query Conversion
#### Outer Joins
- **Oracle (+) Syntax:**
  - Denotes the nullable side in an outer join.
- **FULL OUTER JOINS:**
  - Not natively supported in Oracle 8i; requires a workaround.
- **ANSI Style Joins:**
  - Introduced in Oracle 9i, but not available in 8i.

##### Left Outer Join
- **Oracle:**
  ```sql
  SELECT * FROM foo, bar WHERE foo.baz = bar.baz (+)
  ```
- **PostgreSQL:**
  ```sql
  SELECT * FROM foo LEFT OUTER JOIN bar ON (baz)
  ```

##### Right Outer Join
- **Oracle:**
  ```sql
  SELECT * FROM foo, bar, baz WHERE foo.id = bar.id (+) AND foo.id (+) = baz.id
  ```
- **PostgreSQL:**
  ```sql
  SELECT * FROM foo LEFT OUTER JOIN bar ON (foo.id = bar.id) RIGHT OUTER JOIN baz ON (foo.id = baz.id)
  ```

##### Full Outer Join
- **Oracle:**
  ```sql
  SELECT * FROM foo, bar WHERE foo.id = bar.id (+)
  UNION ALL
  SELECT * FROM foo, bar WHERE foo.id (+) = bar.id AND foo.id = NULL
  ```
- **PostgreSQL:**
  ```sql
  SELECT * FROM foo FULL OUTER JOIN bar ON (foo.id = bar.id)
  ```

#### Pseudocolumns
- **ROWID and ROWNUM:**
  - Oracle-specific pseudocolumns.
- **CURRVAL and NEXTVAL:**
  - Sequence values.
- **LEVEL:**
  - Used in hierarchical queries.

##### Oracle ROWNUM
- **Limiting Rows:**
  - Limits the number of rows returned by a query.
- **Enumerating Rows:**
  - Assigns a unique number to each row.

##### ROWNUM vs. LIMIT
- **Oracle:**
  ```sql
  SELECT * FROM foo ORDER BY id WHERE ROWNUM <= 10
  ```
- **PostgreSQL:**
  ```sql
  SELECT * FROM foo ORDER BY id LIMIT 10
  ```

##### Enumerating Rows
- **Oracle:**
  ```sql
  SELECT ROWNUM, id FROM foo;
  UPDATE foo SET bar = bar || '# ' || ROWNUM
  ```
- **PostgreSQL:**
  - Use window functions (available in PostgreSQL 8.4 and above).
  ```sql
  SELECT row_number() OVER (ORDER BY id) as rownum, foo FROM bar ORDER BY id
  ```

#### Row Physical Address
- **Oracle ROWID:**
  - Format: `OOOOOO.FFF.BBBBBB.RRR` (OBJECT.FILE.BLOCK.ROW)
- **PostgreSQL CTID:**
  - Format: (block no, tuple index)
  - Identifies rows uniquely but is not persistent and not usable as a key.

##### ROWID vs. CTID
- **Oracle:**
  ```sql
  DELETE FROM duplicates WHERE ROWID = (SELECT min(ROWID) FROM duplicates)
  ```
- **PostgreSQL:**
  ```sql
  DELETE FROM duplicates WHERE ctid = (SELECT min(ctid) FROM duplicates)
  ```

#### Hierarchical Queries
- **CONNECT BY:**
  - Traverses hierarchical data.
  - Supports advanced features like cycle detection.
  - Oracle-specific.

##### Example: `CONNECT BY`
- **Oracle:**
  ```sql
  CREATE TABLE staff (id NUMBER PRIMARY KEY, name VARCHAR2(100), manager_id NUMBER);
  SELECT name FROM staff START WITH name = 'John' CONNECT BY manager_id = PRIOR id
  ```

##### Recursive Common Table Expressions (CTEs)
- **WITH RECURSIVE:**
  - Supported since PostgreSQL 8.4.
  - SQL-compliant way of dealing with hierarchical data.
  - Very powerful.

##### Example: Recursive CTE
- **PostgreSQL:**
  ```sql
  WITH RECURSIVE st (id, name, manager_id) AS (
    SELECT id, name, manager_id FROM staff WHERE name = 'John'
    UNION ALL
    SELECT id, name, manager_id FROM staff cur, st prev WHERE cur.manager_id = prev.id
  )
  SELECT * FROM st
  ```

This presentation provides a comprehensive guide to migrating Oracle queries to PostgreSQL, covering the reasons for migration, the steps involved, and specific examples of query conversions.