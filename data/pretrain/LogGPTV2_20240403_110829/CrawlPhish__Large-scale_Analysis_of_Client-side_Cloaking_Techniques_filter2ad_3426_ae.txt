### Optimized Text

**Period of Analysis (September to December 2019), as Detected by CrawlPhish**

The table below presents the distribution of JavaScript cloaking techniques across different time periods. The percentages under the "2018," "2019," and "Total" columns represent the share of each category of JavaScript cloaking technique implementation in the respective time period. The "Share" column indicates the percentage of each type of cloaking technique among all detected cloaked phishing websites. We categorized the cloaking types from both the APWG Dataset and the Public Dataset.

**Table V: Distribution of Cloaking Techniques in the APWG Dataset**

| Category          | 2018 (%) | 2019 (%) | Total (%) |
|-------------------|----------|----------|-----------|
| User Interaction  | 40.11%   | 61.23%   |           |
| Fingerprinting    |          |          |           |
| Bot Behavior      | 40.29%   | 21.14%   |           |

As shown in Table V, the User Interaction cloaking category was the most frequently implemented in the APWG Dataset. In 2018, 2,416 phishing websites (40.11%) used User Interaction cloaking, which increased to 61.23% in 2019. The usage ratio for Fingerprinting remained relatively stable over the two years. However, the usage ratio for Bot Behavior cloaking significantly decreased from 40.29% to 21.14%. This suggests that phishing websites increasingly rely on User Interaction cloaking, likely because it is more challenging for anti-phishing crawlers to mimic human behavior than to bypass other types of cloaking.

**Table VI: Usage of Cloaking Techniques in the Public Dataset**

Similar to the 2019 portion of the APWG Dataset, the User Interaction category was also the most frequently implemented in the Public Dataset.

**Brand Distribution**

Among the 6,024 cloaked phishing sites in 2018, LinkedIn and PayPal were the most frequently impersonated brands, as shown in Table VII. In 2019, Apple and Bank of America became the most prevalent targets. Despite some changes, four of the top five brands in 2018 remained in the top five in 2019. However, the relative distribution of cloaking phishing websites may be skewed due to changes in the phishing landscape between the two years.

**Table VII: Top Brands Targeted by Cloaked Phishing Websites in the APWG Dataset**

| Year | Targeted Brand | Count | Share (%) |
|------|----------------|-------|-----------|
| 2018 | LinkedIn       | 2,317 | 38.46%    |
| 2018 | PayPal         | 1,104 | 18.33%    |
| 2018 | Microsoft      | 646   | 10.72%    |
| 2018 | Bank of America| 309   | 5.13%     |
| 2018 | Apple          | 153   | 2.54%     |
| 2019 | Apple          | 6,298 | 21.69%    |
| 2019 | Bank of America| 3,572 | 12.30%    |
| 2019 | Facebook       | 2,230 | 7.68%     |
| 2019 | PayPal         | 1,841 | 6.34%     |
| 2019 | Microsoft      | 987   | 3.40%     |

### Evaluation: Impact of Cloaking Techniques

We have demonstrated that phishing websites extensively use client-side cloaking techniques. To show that this cloaking represents a significant threat, we conducted two experiments to verify that these techniques can evade detection by anti-phishing systems and do not discourage victim visits, thus increasing attackers' return-on-investment.

**A. Effectiveness Against Anti-Phishing Systems**

We evaluated the effectiveness of client-side cloaking techniques against real-world anti-phishing systems. Using a testbed for measuring anti-phishing blacklists, we deployed 150 carefully controlled artificial PayPal-branded phishing websites with new and previously unseen domain names: 50 for each of the top three User Interaction cloaking types (Notification, Click Through with a fake CAPTCHA, and Mouse Detection). We then reported the URLs to key anti-phishing entities (Google Safe Browsing, PhishTank, Netcraft, APWG, PayPal, and US CERT) and monitored the detection status in major web browsers (Google Chrome, Opera, and Microsoft Edge) over seven days.

At the conclusion of the experiments, none of our phishing websites were blacklisted in any browser, except for 21 (42%) Click Through websites, which were blocked in Microsoft Edge after a median of 3 hours. This detection occurred because Microsoft SmartScreen classified the obfuscation in the JavaScript source code as malware, not because it could bypass the cloaking technique itself. The fact that many of our websites remained undetected after seven days shows that client-side evasion methods are effective at evading modern anti-phishing systems.

**B. Impact on Victim User Traffic**

To verify that User Interaction cloaking techniques do not significantly prevent users from being exposed to phishing content, we conducted an IRB-approved user study through Amazon Mechanical Turk. We generated three websites, each using one of the three cloaking types (Notification, Click Through with a fake CAPTCHA, and Mouse Detection), but instead of hiding phishing content, we hid the text "Hello World." By default, a blank page would be shown. We hired 1,000 workers and requested them to report what they saw after visiting each of the three websites.

**Table VIII: Experimental Results on the Effect of Cloaking Techniques on Usersâ€™ Ability to See Phishing Content**

| Cloaking Type        | Can See | Cannot See |
|----------------------|---------|------------|
| Mouse Detection      | 879 (100.00%) | 0 (0.00%) |
| Click Through        | 859 (97.72%)  | 20 (2.28%) |
| Notification Window  | 374 (42.55%)  | 505 (57.45%) |

Out of the 1,000 workers, 121 could not view the websites due to a technical issue. For the Mouse Detection technique, 100% of the workers saw the "Hello World" text. For the Click Through technique, 97.72% saw the text, indicating its effectiveness. However, only 42.55% of the users saw the text with the Notification Window technique, with 94.94% of those who did not see the text opting to deny notifications. Although two of the cloaking techniques did not significantly prevent users from viewing the content, the Notification Window technique had a negative impact on phishing success rates. However, if users were successfully deceived by a phishing lure, they might be more likely to allow notifications. Given that websites with this cloaking technique were not detectable by the anti-phishing ecosystem, we believe it remains viable overall.

### Responsible Disclosure

After establishing that the cloaking techniques discovered by CrawlPhish could evade anti-phishing systems while remaining effective against human victims, we disclosed our findings and the corresponding JavaScript code to major anti-phishing blacklist operators (Google, Microsoft, and Opera). All companies acknowledged receipt of our disclosure. Google followed up by requesting more information on the semantics and prevalence of the cloaking techniques and concurred that such techniques could potentially bypass detection by current automated anti-phishing systems.

### Countering Client-Side Cloaking Techniques

Phishers make extensive use of sophisticated evasion techniques in their attacks. Client-side cloaking techniques require visitors to interact with the website or browser, such as through a button click or mouse movement. Phishers adopt these strategies because they believe victims will exhibit these behaviors when visiting a website. If the website is rendering and shows a blank page, people tend to move their mouse subconsciously. Similarly, out of habit, users will click a button from a pop-up or notification window to make web page content appear. As phishers' sophistication grows, the ecosystem must ensure that existing detection and mitigation systems can adapt to such evasion techniques.

To detect advanced phishing websites with client-side cloaking, anti-phishing crawlers should mimic human behaviors like mouse movement and button clicks. Automated browsers can emulate these behaviors. Additionally, the Notification Window technique exploits the lack of support for web notifications by current automated browsers. It is crucial for anti-phishing systems to close this gap and ensure that the browsers used for detection support the same features as those used by potential victims.

CrawlPhish can be directly incorporated into existing anti-phishing crawlers. With the hidden web page content revealed by CrawlPhish alongside traditional attributes like URLs, current anti-phishing systems could identify malicious websites that would otherwise evade detection. Furthermore, implementing CrawlPhish analysis would help classify and fingerprint new variants of evasion techniques or discover entirely new types of cloaking, particularly useful for countering phishing websites that cannot currently be classified with high confidence.

### Limitations

Despite CrawlPhish uncovering a diverse array of sophisticated client-side evasion techniques, our findings should be considered with certain limitations.

**A. CrawlPhish Deployment**

- **Data Sources:** CrawlPhish is not a phishing classification system but detects and classifies cloaking within known phishing websites. It requires a curated feed of phishing URLs detected by existing anti-phishing systems. Our framework could be adapted for use on unconfirmed phishing URLs with targeted additions to the visual similarity check.
- **Data Collection:** Due to infrastructure limitations, we crawled live phishing websites over 14 months from June to December 2018 and May to November 2019, with a 4-month gap. Differences in brand distribution between the two years may skew our findings. We mitigated this by evaluating CrawlPhish on a public dataset of 100,000 phishing websites from 2019 and analyzing distinct implementations of each cloaking technique.
- **Phishing Websites:** These may leverage server-side cloaking with varying degrees of sophistication. Although we sought to defeat simple IP and geolocation cloaking, other techniques may have evaded our crawler, resulting in missing client-side source code in our dataset.
- **Semantic Cloaking Categorization:** When querying the CrawlPhish database, we set fixed similarity thresholds for different classes of cloaking techniques. This approach may misclassify evasion code combining multiple techniques or fail to trigger manual analysis of novel cloaking techniques. However, our evaluation did not observe such failures.

**B. Cloaking Detection**

- **Execution Time:** Forced execution of a small percentage (1.75%) of websites in our dataset could not be completed within a reasonably short time, resulting in false-negative detections of cloaking. We chose a 195-second idle timeout, allowing 98% of websites to finish. A future implementation could ensure all paths of a code snippet are examined.
- **Execution Environment:** We force-executed JavaScript using the WebKitGTK+ web browser. Malicious JavaScript targeting specific browsers may have been missed. Websites marked as uncloaked could be force-executed in additional environments.
- **Asynchronous Content Delivery:** CrawlPhish does not consider cases where asynchronous web requests (AJAX) submit data about the client to the server to determine whether phishing content should be sent back. There was no evidence in our dataset that client-side cloaking is combined with AJAX and server-side cloaking by phishing websites. However, CrawlPhish could be enhanced to analyze the malicious use of asynchronous content delivery.