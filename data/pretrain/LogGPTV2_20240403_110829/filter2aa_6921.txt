/**
 * Generator for text printing Malbolge programs.
 * 2012, 2015 Matthias Ernst.
 * Please visit 
 *
 * To the extent possible under law, the author has dedicated all copyright
 * and related and neighboring rights to this software to the public domain 
 * worldwide. This software is distributed without any warranty.
 *
 * See .
 */
#include 
#include 
#include 
#define MB_OUT 5
#define MB_ROT 39
#define MB_OPR 62
#define MB_NOP 68
#define MB_HALT 81
const char* translation = "5z]&gqtyfr$(we4{WP)H-Zn,[%\\3dL+Q;>U!pJS72FhOA1CB6v^=I_0/8|jsb9m= 98) {
		memory_runtime[position] = translation[memory[position]-33];
	} else {
		memory_runtime[position] = memory[position];
	}
}
int opr(int a, int d){
	int crz[] = {1,0,0,1,0,2,2,2,1};
	int position = 0;
	int output = 0;
	while (position  1){
		int total_length = 0; // total length of command line arguments
		int pos = 0;
		for (i=1;i0)
			pos--;
		out_s[pos]=0;
	}else{
		// If no command line arguments are given, read from STDIN.
		// Read 59.000 characters at most.
		int pos = 0;
		int result = 0;
		out_s = (char*)malloc(59001*sizeof(char));
		if (stdin == 0){
			printf("Cannot access STDIN.\n");
			return -1;
		}
		while (!feof(stdin) && pos  cause a jump to address 98 which will be encrypted first
	memory_runtime[0] = memory[0] = 'b';
	// fill skipped memory cells with NOPs
	for (i=1;i 59047){
			C=59047;
			break;
		}else{
			// print A register
			create_malbolge_command(MB_OUT, C);
			C++;
		}
	}
	if (C > 59047){
		C=59047;
	}
	// halt
	create_malbolge_command(MB_HALT, C);
	C++;
	for (i=0;i= 154 && (unsigned char)goal = 0){
					create_malbolge_command(MB_ROT, C+rotPos);
					cur_A_val = rotateR(memory_runtime[C+rotPos-98]);
				}
				for (i=C+rotPos+1;i<C+inner_opr_pos;i++){
					create_malbolge_command(MB_NOP, i);
				}
				if (inner_opr_pos < window_size-1) {
					create_malbolge_command(MB_OPR, C+inner_opr_pos);
					cur_A_val = opr(cur_A_val,memory_runtime[C+inner_opr_pos-98]);
					for (i=C+inner_opr_pos+1;i<C+window_size;i++){
						create_malbolge_command(MB_NOP, i);
					}
				}
				if (rotPos < window_size-1){
					create_malbolge_command(MB_OPR, C+window_size-1);
					cur_A_val = opr(cur_A_val, memory_runtime[C+window_size-1-98]);
				}
				if ((char)cur_A_val == goal){
					// Success.
					// Update last_A_val and return length of Malbolge code sequence.
					last_A_val = cur_A_val;
					return window_size;
				}
				inner_opr_pos++;
			}while (inner_opr_pos < window_size);
			rotPos++;
		}while (rotPos < window_size);
		window_size++; // increase size of search window
	}
	// Malbolge program size or search space exceeded. Return -1 (no success).
	return -1;
}