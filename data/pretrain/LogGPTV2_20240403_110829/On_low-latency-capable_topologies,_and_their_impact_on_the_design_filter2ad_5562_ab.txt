addition, the 32 orbital planes will need to be oriented so
they cross the equator at evenly spaced longitudes. For us
to calculate the satellites relative positions, we also need to
know the phase offset between satellites in consecutive orbital
planes. This information is not in the SpaceX filings.
The phase offset between orbital planes is a number be-
tween zero and one indicating when satellites in consecutive
orbits cross the equator. If it is zero, satellite n in orbital plane
p crosses the equator at the same time as satellite n in orbital
plane p +1. If it is one, satellite n in orbital plane p crosses the
equator at the same time as satellite n + 1 in plane p + 1. To
achieve a uniform constellation with 32 orbital planes, phase
offset must be a multiple of 1/32.
The initial 1,600 satellites are all in 1,150 km altitude orbits
with an inclination of 53°. The other key constraint, then, is
that the satellites in different orbital places do not collide
as the orbital planes cross. We simulated the 32 different
possible phase offsets for orbits of this inclination. With all
even multiples of 1/32 as phase offset, satellites collide. The
simulated minimum distances between satellites for the odd
phase offsets are shown in the top graph in Figure 1. To
minimize the probability of collision if station-keeping is not
perfect, we conclude that the phase offset should be 5/32.
Figure 2 shows the orbital planes and positions of the 1,600
satellites positions at one instant in time. A video of our
 0 10 20 30 40 5053 degree orbital inclinationMinimum dist (km) 0 10 20 30 40 50 60 705101520253053 degree orbital inclination53.8 degree orbital inclinationMinimum dist (km)Phase oﬀset (multiples of 1/32)Figure 2: Phase 1 Satellite orbits
Figure 3: Phase 2 Satellite orbits
south extents of their ground track, in any one region, half the
satellites are traveling on a northeasterly track and half are on
a southeasterly track1. All are traveling at ≈7.3km/s. A NE-
bound satellite will not remain in range of a SE-bound satellite
for long, so a laser between the two must track rapidly as the
orbits cross, and must rapidly switch to a new satellite as the
old one moves away. ESA’s EDRS can bring up its optical
link in under a minute[13]. Starlink may be quicker, given the
shorter distances, but connections will not be instant.
From the point of view of any one satellite, two neighbors
always remain in the same locations: the next one ahead on
the same orbital plane, and the one behind on that orbital
plane. Laser links to these neighbors only need to fine-tune
their orientation, so these are the obvious candidates for the
first two laser links. To form a network, we also need to link
between different orbital planes. There are many options for
how to do this. However, only the satellites in the neighboring
orbital planes remain consistently in range, so connecting to
these is the next priority so as to form a network where most
of the links have high uptime.
Routing forwards and backwards along the orbital planes
already provides good SW↔NE and NW↔SE connectivity,
so it makes most sense to use the next pair of lasers to connect
between the orbital planes in as orthogonal a direction as
possible: either north-south or east-west. With a phase offset
between orbital planes of 5/32, connecting satellite n on orbital
plane p to the nearest satellites (n +1 on orbital plane p +1 and
satellite n − 1 on plane p − 1) is not the best solution, as these
links nearly parallel those of the crossing orbital plane paths.
Rather, connecting satellite n on orbital plane p to satellite n
on plane p + 1 and also to satellite n on plane p − 1 provides
very good east-west connectivity, while the 5/32 phase offset
ensures than the links are slightly offset from running exactly
east-west, providing very direct paths in a wider range of
nearly east-west directions.
It is also possible to provide reasonable north-south con-
nectivity, but as most of the world’s population in developed
nations that are more likely to be willing to pay for latency are
clustered in a band from 30°to 55°North, providing east-west
connectivity seems to be the higher priority for phase 1.
1Such satellites launch eastwards to take advantage of Earth’s rotation
Figure 4: Lasers of one NE-bound sat.
The network resulting from this use of each satellite’s first
four laser links provides a good mesh network, but in any one
region their are two distinct meshes - one moving generally
northeast and the other moving southeast, with no local con-
nectivity between the two without going the long way round
the planet. Our simulations show that most traffic can route
without switching between the two meshes, but using the final
laser to provide inter-mesh links improves the routing options
significantly, even if such lasers are down frequently, while
they re-align from one crossing satellite to another.
This way of aligning the lasers is shown from the point
of view of one satellite traveling northeast in Figure 4. The
forward and backwards links remain in a constant orientation;
the side links track very slowly as the satellite orbits, but
always connect to the same neighboring satellite and always
point close to an east-west orientation; the final link tracks
crossing satellites very rapidly indeed. Figure 5 shows how
the side laser links used this way provide good east-west
connectivity; Figure 6 shows all the lasers.
4 ROUTING
How well does the network above provide low-latency routes?
The simplest way to route is for each groundstation to connect
to the satellite that is most directly overhead. This has the
advantage of providing the best RF signal strength for uplinks
and downlinks. We can then run Dijkstra’s algorithm[5] over
the satellite network using link latencies as metrics to provide
the lowest latency paths.
Of course, the network is not static; the satellite most di-
rectly overhead changes frequently, the laser links between
NE- and SE-bound satellites change frequently, and link la-
tencies for links that are up change constantly. We can, how-
ever, run Dijkstra on this topology for all traffic sourced by a
groundstation to all destinations, and do so every 10 ms with
no difficulty, even on laptop-grade CPUs. In addition, all the
link changes are completely predictable. If we run Dijkstra
every 50 ms, for the network as it will be 200 ms in the future,
and cache the results, we can then see whether packets we
send will traverse a link that will no longer be there when the
packets arrive. In this way, each sending groundstation can
source-route traffic that will always find links up by the time
Figure 5: Phase 1 network showing
just side links.
Figure 6: Phase 1 network showing all
links.
Figure 7: NYC to London RTTs via
overhead satellites.
the packet arrives at the relevant satellite.2
How, then does the latency change as the network evolves?
Figure 7 shows how the RTT from New York to London
evolves over three minutes. Discontinuities are due to route
changes within the satellite network, or a change of the satel-
lite overhead the source or destination city. For comparison,
the minimum possible RTT via optical fiber that follows a
great circle path is 55ms, while the actual Internet RTT be-
tween two well connected sites in these cities is 76ms. The
satellite RTT is, on average, fairly low. It certainly beats the
current Internet RTT, and that 55ms great-cicle RTT is not
realistic as it is not possible to lay fiber continuously on the
most direct path. However, the large delay spike between 70
and 95 seconds is certainly undesirable.
Further analysis shows that these spikes are caused when
the satellites directly overhead the two cities are on differ-
ent parts of the constellation - either one is on a NE-bound
satellite and the other on a SE-bound satellite, or vice versa.
Although the fifth laser link on each satellite connects the two
parts of the constellation, the path is not always very direct,
and these links do not stay up for long as the satellites move.
Even if both satellites are on the same part of the constella-
tion, routing vertically upwards to a satellite then horizontally
then vertically downwards takes a longer path than necessary.
Lower latency can be achieved by using a satellite lower in
the sky in the direction of the destination. This is, of course,
at the expense of 3dB lower RF signal strength[12], likely
resulting in lower achievable bitrate.
Routing Both RF and Lasers To achieve the lowest delay,
we need to include all possible RF up and down links into
the network map that we run Dijkstra over. In this way, we
always choose the best matched satellite pair for the uplink
and downlink, and we use satellites that are in the correct
direction. This usually results in using satellites that are fairly
close to 40°from the vertical.
Figure 8 shows how the latency between New York and
2If each satellite makes instantaneous local routing decisions, as with greedy
schemes such as GPSR[10], the latency distribution has a long tail, as packets
find a previously good onward path has become unavailable part way.
Figure 8: Latency using laser and RF co-routing.
Figure 9: London-Johannesburg RTT.
London, San Francisco and London, and London and Sin-
gapore varies over three minutes when RF and laser links
are co-routed in this manner. The y-axis shows the latency
via satellite for that city pair, normalized by the latency via
optical fiber laid tight along the great circle route. A value
of one therefore shows an unattainable lower bound for opti-
cal fiber communication for that city pair. In all three cases,
the satellite RTT is significantly less than this lower bound.
For comparison, latencies of current Internet paths between
well-connected sites in these cities are also shown.
We deliberately optimized laser paths for East-West traffic.
The latitudes of San Francisco, New York, London, and Sin-
gapore are 37.7°N, 40.8°N, 51.5°N and 1.4°N, so although
paths between then do not directly travel East-West, there is a
large East-West component. What about North-South routes?
The red curve in Figure 9 shows the London-Johannesburg
route. The satellite path has almost half the 182 ms latency
of the best Internet path via fiber off the west coast of Africa.
However, the satellite path is nowhere near optimal, as it has
 57 58 59 60 61 62 63 64 65 66 0 20 40 60 80 100 120 140 160 180 200RTT (ms)Time (s) 0.6 0.8 1 1.2 1.4 1.6020406080100120140160Time (s)Path RTT/Great Circle RTTNY-Lon via satellitesNYC-LON, InternetSF-Lon via satellitesSFO-LON, InternetLON-SIN via satellitesLON-SIN, Internet 60 65 70 75 80 85 90 95 100020406080100120140160Time (s)RTT (ms)Phase 1: JNB-LON via satellites, best pathPhase 2: JNB-LON via satellites, path 1Phase 2: JNB-LON via satellites, path 2JNB-LON, great circle ﬁberremaining graph. This indicates that latency in such a network
is not critically dependent on any one satellite or link.
Multipath While the biggest advantage to a dense LEO
constellation is likely to be very low latency, the bandwidth
of a single satellite path is likely to be insufficient to impact
the business of long distance fiber networks. However a LEO
constellation can provide many paths between the same city
pair; with Starlink there may be 60 satellites within coverage
range for latitudes close to 50°N. How does the latency of
these additional paths compare with the best path?
Generally, the longer the distance, the more paths will be
available that have lower latency than the best theoretical
fiber path. New York and London are relatively close, so
the potential satellite gain is lower. Both are major financial
centers, so there is a great deal of latency-sensitive traffic. In
Figure 11 we show the RTT over three minutes for the best
20 disjoint paths between them. This is calculated iteratively;
first we run Dijkstra to calculate the best path, then we remove
all the RF uplinks and laser links used by that path from the
network graph. We then re-run Dijkstra to find the next best
path, eliminate those links, and iterate. With this formulation,
no satellite overhead either city can provide more than one up
or downlink, and no intermediate satellite can be used by more
than two paths. This implicitly assumes that laser links and
RF links have the same capacity - this is unlikely in reality;
whichever turns out to be the bottleneck, a real network will
allow more paths than this, so the figure effectively shows an
upper bound on path latency.