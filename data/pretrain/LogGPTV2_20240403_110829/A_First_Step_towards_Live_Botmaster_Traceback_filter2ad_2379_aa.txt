title:A First Step towards Live Botmaster Traceback
author:Daniel Ramsbrock and
Xinyuan Wang and
Xuxian Jiang
A First Step towards Live Botmaster Traceback
Daniel Ramsbrock1, Xinyuan Wang1, and Xuxian Jiang2
1 Department of Computer Science
George Mason University Fairfax, VA 22030, USA
{dramsbro,xwangc}@gmu.edu
2 Department of Computer Science
North Carolina State University, Raleigh,
NC 27606, USA
PI:EMAIL
Abstract. Despite the increasing botnet threat, research in the area
of botmaster traceback is limited. The four main obstacles are 1) the
low-traﬃc nature of the bot-to-botmaster link; 2) chains of “stepping
stones;” 3) the use of encryption along these chains; and 4) mixing with
traﬃc from other bots. Most existing traceback approaches can address
one or two of these issues, but no single approach can overcome all of
them. We present a novel ﬂow watermarking technique to address all four
obstacles simultaneously. Our approach allows us to uniquely identify
and trace any IRC-based botnet ﬂow even if 1) it is encrypted (e.g.,
via SSL/TLS); 2) it passes multiple intermediate stepping stones (e.g.,
IRC server, SOCKs); and 3) it is mixed with other botnet traﬃc. Our
watermarking scheme relies on adding padding characters to outgoing
botnet C&C messages at the application layer. This produces speciﬁc
diﬀerences in lengths between randomly chosen pairs of messages in a
network ﬂow. As a result, our watermarking technique can be used to
trace any interactive botnet C&C traﬃc and it only requires a few dozen
packets to be eﬀective. To the best of our knowledge, this is the ﬁrst
approach that has the potential to allow real-time botmaster traceback
across the Internet.
We have empirically validated the eﬀectiveness of our botnet ﬂow
watermarking approach with live experiments on PlanetLab nodes and
public IRC servers on diﬀerent continents. We achieved virtually a 100%
detection rate of watermarked (encrypted and unencrypted) IRC traﬃc
with a false positive rate on the order of 10−5. Due to the message
queuing and throttling functionality of IRC servers, mixing chaﬀ with
the watermarked ﬂow does not signiﬁcantly impact the eﬀectiveness of
our watermarking approach.
1 Introduction
Botnets are currently one of the most serious threats to computers connected
to the Internet. Recent media coverage has revealed many large-scale botnets
worldwide. One botnet [22, 23] has reportedly compromised and controlled over
400,000 computers – including computers at the Weapons Division of the U.S.
Naval Air Warfare Center, U.S. Department of Defense Information Systems
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 59–77, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
60
D. Ramsbrock, X. Wang, and X. Jiang
Agency. Another recently discovered botnet is suspected to have controlled 1.5
million computers around the globe [9]. It has been estimated [20] that more than
5 percent of all computers connected to the Internet have been compromised and
used as bots. Currently, botnets are responsible for most spam, adware, spyware,
phishing, identity theft, online fraud and DDoS attacks on the Internet.
The botnet problem has recently received signiﬁcant attention from the re-
search community. Most existing work on botnet defense [1, 2, 3, 6, 11, 14, 15, 18]
has focused on the detection and removal of command and control (C&C) servers
and individual bots. While such a capability is a useful start in mitigating the
botnet problem, it does not address the root cause: the botmaster. For exam-
ple, existing botnet defense mechanisms can detect and dismantle botnets, but
they usually cannot determine the identity and location of the botmaster. As a
result, the botmaster is free to create and operate another botnet by compro-
mising other vulnerable hosts. Botmasters can currently operate with impunity
due to a lack of reliable traceback mechanisms. However, if the botmaster’s risk
of being caught is increased, he would be hesitant to create and operate botnets.
Therefore, even an imperfect botmaster traceback capability could eﬀectively
deter botmasters. Unfortunately, current botmasters have all the potential gains
from operating botnets with minimum risk of being caught. Therefore, the bot-
net problem cannot be solved until we develop a reliable method for identifying
and locating botmasters across the Internet. This paper presents a substantial
ﬁrst step towards achieving the goal of botmaster traceback.
Tracking and locating the botmaster of a discovered botnet is very challenging.
First, the botmaster only needs to be online brieﬂy to issue commands or check
the bots’ status. As a result, any botmaster traceback has to occur in real-
time. Second, the botmaster usually does not directly connect to the botnet
C&C server and he can easily launder his connection through various stepping
stones. Third, the botmaster can protect his C&C traﬃc with strong encryption.
For example, Agobot has built-in SSL/TLS support. Finally, the C&C traﬃc
from the botmaster is typically low-volume. As a result, a successful botmaster
traceback approach must be eﬀective on low-volume, encrypted traﬃc across
multiple stepping stones.
To the best of our knowledge, no existing traceback methods can eﬀectively
track a botmaster across the Internet in real-time. For example, methods [33,
32, 8, 31, 4, 29, 30] have been shown to be able to trace encrypted traﬃc across
various stepping stones and proxies, but they need a large amount of traﬃc (at
least hundreds of packets) to be eﬀective. During a typical session, each bot
exchanges only a few dozen packets with the botmaster. Due to this low traﬃc
volume, the above techniques are not suitable for botmaster traceback.
In this paper, we address the botmaster traceback problem with a novel packet
ﬂow watermarking technique. Our goal is to develop a practical solution that can
be used to trace low-volume botnet C&C traﬃc in real-time even if it is encrypted
and laundered through multiple intermediate hosts (e.g., IRC servers, stepping
stones, proxies). We assume that the tracer has control of a single rogue bot in
the target botnet, and this bot can send messages in response to a the query from
A First Step towards Live Botmaster Traceback
61
the botmaster. To trace the response traﬃc back to the botmaster, the rogue bot
transparently injects a unique watermark into its response. If the injected wa-
termark can survive the various transformations (e.g., encryption/decryption,
proxying) of the botnet C&C traﬃc, we can trace the watermark and locate
the botmaster via monitoring nodes across the Internet. To embed the water-
mark, we adjust the lengths of randomly selected pairs of packets such that
the length diﬀerence between each packet pair will fall within a certain range.
To track encrypted botnet traﬃc that mixes messages from multiple bots, we
developed a hybrid length-timing watermarking method. Compared to previous
approaches [31,29,30], our two proposed methods require far less traﬃc volume
to encode high-entropy watermarks. We empirically validated the eﬀectiveness
of our watermarking algorithms using real-time experiments on live IRC traf-
ﬁc through PlanetLab nodes and public IRC servers across diﬀerent continents.
Both of our watermarking approaches achieved a virtually 100% watermark de-
tection rate and a 10−5 false positive rate with only a few dozen packets. To the
best of our knowledge, this is the ﬁrst approach that has the potential to allow
real-time botmaster traceback across the Internet.
The remainder of the paper is structured as follows: Section 2 introduces
the botmaster traceback model. Section 3 presents the design and analysis of
our ﬂow watermarking schemes. Section 4 describes our experiments and their
results, while section 5 discusses limitations and future work. Finally, Section 6
surveys related literature and Section 7 summarizes our ﬁndings.
2 Botmaster Traceback Model
According to [17, 21, 28], most botnets currently in the wild are IRC-based.
Therefore, we will focus on tracing the botmaster in the context of IRC-based
botnets. Nevertheless, our ﬂow watermarking trace approach is applicable to any
interactive botnet traﬃc.
2.1 Botnets and Stepping Stones
Bots have been covered extensively in the existing literature, for example [2,6,7,
16,21] provide good overviews. The typical bot lifecycle starts with exploitation,
followed by download and installation of the bot software. At this point, the bot
contacts the central C&C server run by the botmaster, where he can execute
commands and receive responses from his botnet.
Botmasters rarely connect directly to their C&C servers since this would reveal
their true IP address and approximate location. Instead, they use a chain of
stepping stone proxies that anonymously relay traﬃc. Popular proxy software
used for this purpose is SSH, SOCKS, and IRC BNCs (such as psyBNC). Since
the stepping stones are controlled by the attacker, they do not have an audit
trail in place or other means of tracing the true source of traﬃc. However, there
are two properties of stepping stones that can be exploited for tracing purposes:
1) the content of the message (the application-layer payload) is never modiﬁed
62
D. Ramsbrock, X. Wang, and X. Jiang
and 2) messages are passed on immediately due to the interactive nature of IRC.
Consequently, the relative lengths of messages and their timings are preserved,
even if encryption is used. In the case of encryption, the message lengths are
rounded up to the nearest multiple of the block size. This inherent length and
timing preservation is the foundation of our botmaster traceback approach.
2.2 Tracking the Botmaster by Watermarking Botnet Traﬃc
Our botmaster traceback approach exploits the fact that the communication
between the IRC-based bots and the botmaster is bidirectional and interactive.
Whenever the botmaster issues commands to a bot, the response traﬃc will
eventually return to the botmaster after being laundered and possibly trans-
formed. Therefore, if we can watermark the response traﬃc from a bot to the
botmaster, we can eventually trace and locate the botmaster. Since the response
traﬃc we are tracking may be mixed with other IRC traﬃc, we need to be able
to isolate the target traﬃc. With unencrypted traﬃc, this can be achieved by
content inspection, but encrypted traﬃc presents a challenge which we address
with our hybrid length-timing algorithm.
Fig. 1. Botmaster traceback by watermarking the botnet response traﬃc
Figure 1 shows the overall watermarking traceback model. We assume that we
control a rogue bot, which could be a honeypot host that has been compromised
and has joined a botnet. The rogue bot watermarks its outgoing PRIVMSG
traﬃc in response to commands from the botmaster. As with any traceback ap-
proach, our watermark tracing scheme needs support from the network. Speciﬁ-
cally, we assume there are cooperating monitor nodes across the Internet, which
will inspect the passing traﬃc for the speciﬁed watermark and report back to us
whenever they ﬁnd it. Note that our approach does not require a global moni-
toring capability. If there are uncooperative or unmonitored areas, we would lose
one or more links along the traceback path. However, we can pick up the trail
again once the watermarked traﬃc re-enters a monitored area. In general, this
A First Step towards Live Botmaster Traceback
63
appears to be the best possible approach in the absence of a global monitoring
capability. We assume that the tracer can securely share the desired watermark
with all monitor nodes prior to sending the watermarked traﬃc. This enables the
monitors to report ‘sightings’ of the watermark in real-time and requires only a
single watermarked ﬂow to complete the trace.
3 Length-Based Watermarking Scheme
Our watermarking scheme was speciﬁcally designed for a low-traﬃc, text-based
channel such as the one between a bot and its botmaster. This section describes
the design and analysis of both the length-only (unencrypted traﬃc) and the
length-timing hybrid algorithms (encrypted traﬃc). We describe the encoding
and decoding formulas for both algorithms and address the issue of false positives
and false negatives.
The terms ‘message’ and ‘packet’ are used interchangeably since a typical botnet
C&C message is usually small (less than 512 bytes) and ﬁts into a single packet).
3.1 Basic Length-Based Watermarking Scheme
(cid:4), and we use (cid:3)ri, ei, k(cid:4) to represent that packet pair (cid:3)Pri, Pei
To encode the watermark bit wk into packet pair (cid:3)Pri, Pei
Watermark Bit Encoding. Given a packet ﬂow f of n packets P1, . . . , Pn, we
want to encode an l-bit watermark W = w0, . . . , wl−1 using 2l ≤ n packets. We
ﬁrst use a pseudo-random number generator (PRNG) with seed s to randomly
choose 2l distinct packets from P1, . . . , Pn, we then use them to randomly form
l packet pairs: (cid:3)Pri, Pei
(cid:4) (i = 0, . . . , l − 1) such that ri ≤ ei. We call packet
Pri a reference packet and packet Pei an encoding packet. We further use the
PRNG to randomly assign watermark bit wk (0 ≤ k ≤ l− 1) to packet pair (cid:3)Pri,
(cid:4) is assigned to
Pei
encode watermark bit wk.
(cid:4), we modify the
length of the encoding packet Pei by adding padding characters to achieve a
speciﬁc length diﬀerence to its corresponding reference packet Pri. The padding
characters could be invisible (such as whitespace) or visible characters and they
can be inserted in random locations within the message. This would make it
diﬃcult for the adversary to detect the existence of the padding. Let le and lr be
the packet lengths of the watermark encoding and reference packets respectively,
Z = le − lr be the length diﬀerence, and L > 0 be the bucket size. We deﬁne the
watermark bit encoding function as
e(lr, le, L, w) = le + [(0.5 + w)L − (le − lr)] mod 2L
(1)
which returns the increased length of watermark encoding packet given the
length of the reference packet lr, the length of the encoding packet le, the bucket
size L, and the watermark bit to be encoded w.