Regards,  
Amul  
```  
社区讨论后，这个架构改成了这样的，架构更优雅一些。  
```  
• pg_background_launch : 这个接口只是用来fork一个后台进程，并返回PID  
• pg_background_run : 根据提供的PID，让这个后台进程执行提供的SQL。  
• pg_background_result : 根据提供的PID，获取执行SQL的结果。  
• pg_background_detach : 关闭后台进程与会话。  
```  
讨论细节如下  
```  
Hi all,  
As we have discussed previously, we need to rework this patch as a client of  
Peter Eisentraut's background sessions code[1].  
Attaching trial version patch to discussed possible design and api.  
We could have following APIs :  
• pg_background_launch : This function start and stores new background  
session, and returns the process id of background worker.  
• pg_background_run : This API takes the process id and SQL command as  
input parameter. Using this process id, stored worker's session is  
retrieved and give SQL command is executed under it.  
• pg_background_result : This API takes the process id as input  
parameter and returns the result of command executed thought the  
background worker session.  Same as it was before but now result can  
be fetch in LIFO order i.e. result of last executed query using  
pg_background_run will be fetched first.  
• pg_background_detach : This API takes the process id and detach the  
background process. Stored worker's session is not dropped until this  
called.  
• TBC : API to discard result of last query or discard altogether?  
• TBC : How about having one more api to see all existing sessions ?  
Kindly share your thoughts/suggestions.  Note that attach patch is WIP  
version, code, comments & behaviour could be vague.  
------------------  
Quick demo:  
------------------  
Apply attach patch to the top of Peter Eisentraut's  
0001-Add-background-sessions.patch[1]  
postgres=# select pg_background_launch();  
 pg_background_launch  
----------------------  
                21004  
(1 row)  
postgres=# select pg_background_run(21004, 'vacuum verbose foo');  
 pg_background_run  
-------------------  
(1 row)  
postgres=# select * from pg_background_result(21004) as (x text);  
INFO:  vacuuming "public.foo"  
INFO:  "foo": found 0 removable, 5 nonremovable row versions in 1 out of 1 pages  
DETAIL:  0 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
Skipped 0 pages due to buffer pins.  
0 pages are entirely empty.  
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.  
   x  
--------  
 VACUUM  
(1 row)  
postgres=# select pg_background_run(21004, 'select * from foo');  
 pg_background_run  
-------------------  
(1 row)  
postgres=# select * from pg_background_result(21004) as (x int);  
 x  
---  
 1  
 2  
 3  
 4  
 5  
(5 rows)  
postgres=# select pg_background_detach(21004);  
 pg_background_detach  
----------------------  
(1 row)  
References :  
[1] https://www.postgresql.org/message-id/e1c2d331-ee6a-432d-e9f5-dcf85cffaf29%402ndquadrant.com.  
Regards,  
Amul Sul  
```  
后面的讨论又改成了这样，还是朝着优雅的方向在改进  
```  
The following review has been posted through the commitfest application:  
make installcheck-world:  tested, passed  
Implements feature:       tested, passed  
Spec compliant:           tested, passed  
Documentation:            tested, failed  
I’ll summarize here my thoughts as a reviewer on the current state of the pg_background:  
1. Current version of a code [1] is fine, from my point of view. I have no suggestions on improving it. There is no documentation, but code is commented.  
2. Patch is dependent on background sessions from the same commitfest.  
3. There can exist more features, but for v1 there is surely enough features.  
4. There is some controversy on where implemented feature shall be: in separate extension (as in this patch), in db_link, in some PL API, in FDW or somewhere else.   
I think that new extension is an appropriate place for the feature. But I’m not certain.  
Summarizing these points, appropriate statuses of the patch are ‘Ready for committer’ or ‘Rejected’.   
Between these two I choose ‘Ready for committer’, I think patch is committable (after bg sessions).  
Best regards, Andrey Borodin.  
The new status of this patch is: Ready for Committer  
```  
这个patch在commit前，还有一些变数，比如可能将这个功能合并到dblink里面。而不是新开一个extension插件.  
这个patch的讨论，详见邮件组，本文末尾URL。    
PostgreSQL社区的作风非常严谨，一个patch可能在邮件组中讨论几个月甚至几年，根据大家的意见反复的修正，patch合并到master已经非常成熟，所以PostgreSQL的稳定性也是远近闻名的。    
## 参考    
https://commitfest.postgresql.org/13/893/  
https://www.postgresql.org/message-id/flat/CAAJ_b97FRO+PI:EMAIL#CAAJ_b97FRO+PI:EMAIL  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")