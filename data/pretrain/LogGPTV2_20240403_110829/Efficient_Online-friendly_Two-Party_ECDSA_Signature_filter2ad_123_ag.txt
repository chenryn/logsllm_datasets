publicly computable.
𝑛
• Phase 4: Each player 𝑃𝑖 proves in zero-knowledge that it
𝑥 =𝑛
knows 𝑣𝑖, the discrete logarithm of 𝑉𝑖. Each player sets 𝑄 =
𝑖=1 𝑋𝑖 to be the public key, otherwise aborts. Note that
𝑖=1 𝑢𝑖 mod 𝑞 be the secret key.
Assuming that 𝑃𝑖 and 𝑃 𝑗 are the two parties to sign 𝑚, they could
compute 𝛬𝑖𝑣𝑖, 𝛬𝑗 𝑣 𝑗 respectively (such that 𝑥 = 𝛬𝑖𝑣𝑖 + 𝛬𝑗 𝑣 𝑗), where
𝛬𝑖 and 𝛬𝑗 are Lagrange coefficients.
𝑗=1 𝑥 ( 𝑗)
𝑖
B PROOF OF THE MAIN THEOREM
Here is the proof of Theorem 3.1.
The simulator S could only access to an ideal functionality
FECDSA for computing ECDSA signatures. All S learns in the ideal
world is the public key 𝑄 generated in the key generation phase
and several signatures for messages of its choice in the signature
phase. In the real world, the adversary, having either corrupted
𝑃1 or 𝑃2 will also see all the interactions with the non-corrupted
party. Thus S must be able to simulate the adversary’s view of
these interactions, while only knowing the expected output. The
proof proceeds in two cases: the adversary corrupts 𝑃1, and the
adversary corrupts 𝑃2.
S simulates 𝑃2- Corrupted 𝑃1. We first show that if adversary A
corrupts 𝑃1, there exists simulator S such that the output distribu-
tion of S is indistinguishable from A’s view in the real execution
of the protocol.
Simulator S maintains a hash list 𝐿ℎ for H. On any query 𝑦 to
H, if ∃(𝑦, ℎ𝑦) ∈ 𝐿ℎ, return ℎ𝑦, else return ℎ𝑦 ← {0, 1}𝜅 and add
(𝑦, ℎ𝑦) to 𝐿𝑓 .
Key Generation Phase.
and receives back the public key 𝑄.
(1) Given input KeygenG, 𝑃, 𝑞),S sends KeygenG, 𝑃, 𝑞) to FECDSA
(2) S invokes A upon input KeygenG, 𝑃, 𝑞) and receives f1.
• if there exists (𝑄1||nizk1, f1) ∈ 𝐿ℎ, check Verifzk(nizk1).
If Verifzk(nizk1) = 1, extract 𝑥1 with Ext. If 𝑄1 = 𝑥1 · 𝑃,
compute 𝑄2 = 𝑄 − 𝑄1.
• otherwise, choose random 𝑄2.
With the help of zero knowledge simulator Sim, S computes
nizk2, the non-interactive proof of knowledge for the discrete
log of 𝑄2.
(3) S sends 𝑄2, nizk2 to A.
(4) S receives 𝑄1, nizk1 from A. If (𝑄1||nizk1, f1) ∉ 𝐿ℎ, abort.
S simulates 𝑃2 aborting if Verifzk(nizk1) = 0 or 𝑄1 ≠ 𝑥1 · 𝑃.
(5) S sends continue to FECDSA for 𝑃2 to receive output and
stores (𝑄, 𝑥1, 𝑄1, 𝑄2).
To pass the check of f1 = H(𝑄1, nizk1), A must have queried
(𝑄1, nizk1) to the random oracle. Thus, the difference between
the real execution and the ideal execution simulated by S is the
generation of 𝑄2 and nizk2. In the real execution, 𝑄2 = 𝑥2 · 𝑃 where
𝑥2 ← Z𝑞, and nizk2 = nizkPoK(𝑄2, 𝑥2), while in the later 𝑄2 =
𝑄 − 𝑄1 and nizk2 ← Sim(𝑄2, 𝑃) where 𝑄 is returned by FECDSA.
Ext extracts 𝑥1 with knowledge error 1/𝑞. Since FECDSA samples 𝑄
uniformly at random from G, conditional on the extraction of 𝑥1,
the distribution of 𝑄2 in both cases is identical. Since Sim perfectly
simulate the proof, the distribution of nizk2 is also identical.
Signing Phase.
• Given input Sign(sid, 𝑚), S sends Sign(sid, 𝑚) to FECDSA
and receives signature (𝑟, 𝑠).
• Using the verification procedure, S recovers 𝑅 from (𝑟, 𝑠).
(1) Commitment: S invokes A with input Sign(sid, 𝑚) and
sends a random string f2 ← {0, 1}𝜅 to A.
(2) MtA and consistency check:
• S interacts with A on behave of FMtA and in doing so
receives A’s input 𝑥′1 and output shares 𝑡𝐴.
• On receiving 𝑄′1, 𝑟1, 𝑐𝑐 from A, S checks the consistency
?
by verifying 𝑄′1
= 𝑡𝐴 + 𝑥′1𝑟1 − 𝑥1 mod 𝑞,
and simulates 𝑃2 aborting if these equations do not hold.
• Upon receiving (𝑅1, nizk4) from A, S simulates 𝑃2 abort-
ing if Verifzk(nizk4) = 0. Else S extracts 𝑘1 utilizing Ext
algorithm.
• S computes 𝑅2 = 𝑘−1
1 · 𝑅−𝑟1 · 𝑃, generates nizk3 by query-
ing zero knowledge simulator Sim, and adds (𝑅2||nizk3, f2)
to the hash list 𝐿ℎ.
(4) Online Signature: S computes 𝑠2 = 𝑘1𝑠 − 𝑥′1𝑟 mod 𝑞 where
𝑥′1 and 𝑘1 are extracted from nizk1 and nizk4 respectively,
and sends 𝑅2, nizk3, 𝑠2 to A.
?
= 𝑥′1 · 𝑃 and 𝑐𝑐
(3) Nonce key exchange:
The difference between a real execution and the simulation is
how 𝑅2 and 𝑠2 are computed, and the consistency of 𝑄′1 and 𝑥′1
is check. In the simulation, 𝑅2 is 𝑘−1
· 𝑅 − 𝑟1 · 𝑃 whereas in the
1
real execution 𝑅2 = 𝑘2 · 𝑃 where 𝑘2 ← Z𝑞. Since FECDSA samples
𝑅 uniformly at random from G, the distribution in both cases is
identical. Ext extracts 𝑘1 with knowledge error 1/𝑞. Conditional on
the correctness of 𝑘1, in the simulation
𝑠2 = 𝑘1𝑠 − 𝑥′1𝑟 = (𝑟1 + 𝑘2)−1(𝐻(𝑚) + 𝑟𝑥′2) mod 𝑞
which is identical to that in the real execution. Conditions 𝑄′1 = 𝑥′1·𝑃
and 𝑐𝑐 = 𝑡𝐴 + 𝑥′1𝑟1 − 𝑥1 mod 𝑞 in the simulation are equivalent to
(𝑡𝐵 + 𝑐𝑐) · 𝑃 = (𝑟1 + 𝑘2) · 𝑄′1 − 𝑄1 in the real game.
This implies that the view of a corrupted 𝑃1 in the real execution
is indistinguishable from that of the simulation, i.e., the advantage of
any PPT adversary who corrupts 𝑃1 to distinguish the real execution
and simulated execution given by S is negligible.
S simulates 𝑃1- Corrupted 𝑃2. We show that if an adversary
A corrupts 𝑃2, there exists a simulator S such that the output
distribution of S is indistinguishable with A’s view in the real
execution of the protocol. Simulator S maintains a hash list 𝐿ℎ for
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea570H. On any query 𝑦 to H, if ∃(𝑦, ℎ𝑦) ∈ 𝐿ℎ, return ℎ𝑦, else return
ℎ𝑦 ← {0, 1}𝜅 and add (𝑦, ℎ𝑦) to 𝐿ℎ.
Key Generation Phase.
(1) Given input KeygenG, 𝑃, 𝑞),S sends KeygenG, 𝑃, 𝑞) to FECDSA
and receives back the public key 𝑄.
(2) S invokes A with input KeygenG, 𝑃, 𝑞) and sends a random
string f1 ← {0, 1}𝜅 to A.
(3) Upon receiving (𝑄2, nizk2) from A, S computes 𝑄1 = 𝑄 −
𝑄2 and generates nizk1 with the help of zero knowledge
simulator Sim.
(4) S adds (𝑄1||nizk1, f1) to the hash list 𝐿ℎ.
(5) S sends 𝑄1, nizk1 to A and stores (𝑥2, 𝑄, 𝑄1, 𝑄2).
The difference between real execution and ideal execution simu-
lated by S is the generation of 𝑄1 and nizk1. In the real execution,
𝑄1 = 𝑥1 · 𝑃 where 𝑥1 ← Z𝑞, and nizk1 = nizkPoK(𝑄1, 𝑥1), while
in the later 𝑄1 = 𝑄 − 𝑄2 and nizk1 ← Sim(𝑄1, 𝑃) where 𝑄 is re-
turned by FECDSA. Ext extracts 𝑥2 with knowledge error 1/𝑞. Since
FECDSA samples 𝑄 uniformly at random from G, conditional on
the extraction of 𝑥2, the distribution of 𝑄1 in both cases is identical.
Since Sim perfectly simulate the proof, the distribution of nizk1 is
also identical.
Signing Phase.
• Given input Sign(sid, 𝑚), S sends Sign(sid, 𝑚) to FECDSA
and receives signature (𝑟, 𝑠).
• Using the verification procedure, S recovers 𝑅 from (𝑟, 𝑠).
(1) Commitment: S invokes A with input Sign(sid, 𝑚) and re-
ceives f2 from A.
• if ∃(𝑅2||nizk3, f2) ∈ 𝐿ℎ, S extracts 𝑘2 such that 𝑅2 = 𝑘2 · 𝑃
with the help of knowledge extractor (if the proof is ac-
cepted). Then S samples a random 𝑟1 ← Z𝑞 and computes
𝑅1 = (𝑟1 + 𝑘2)−1 · 𝑅.
• otherwise, samples a random 𝑟1 ← Z𝑞 and a random point
𝑅1 and generates nizk4 with the help of zero knowledge
simulator Sim
(2) MtA and consistency check:
• S interacts with A on behave of FMtA and in doing so
receives its input 𝑘′2 and output shares 𝑡𝐵.
• S samples a random 𝑐𝑐 ← Z𝑞, computes
𝑄′1 = (𝑘′2 + 𝑟1)−1[(𝑡𝐵 + 𝑐𝑐) · 𝑃 + 𝑄1],
and sends (𝑄′1, 𝑟1, 𝑐𝑐) to A.
(3) Nonce key exchange: S computes 𝑅1 = (𝑟1 +𝑘2)−1 · 𝑅, gener-
ates nizk4 by querying zero knowledge simulator Sim, and
sends them to A.
(4) Online signature: Upon receiving 𝑅2, nizk3, 𝑠2 from A, S
checks the proof of nizk3, and whether f2 = H(𝑅2, nizk3)
and
𝑠2 · (𝑟1 · 𝑃 + 𝑅2)
?
= ℎ · 𝑃 + 𝑟 · (𝑥2 − 𝑡𝐵 − 𝑐𝑐) · 𝑃 .
If the checks pass, S returns (𝑟, 𝑠) as the final signature, else
aborts.
The difference between a real execution and the simulation is
how 𝑅1 and 𝑄′1 are computed, and the condition that (𝑟, 𝑠) is output
or not.
Since
In the simulation, 𝑅1 is 𝑅1 = (𝑟1 + 𝑘2)−1 · 𝑅 whereas in the
real execution 𝑅1 = 𝑘1 · 𝑃 where 𝑘1 ← Z𝑞. Since FECDSA samples
𝑅 uniformly at random from G, the distribution in both cases is
identical. In the simulation, 𝑄′1 is (𝑘′2 + 𝑟1)−1[(𝑡𝐵 + 𝑐𝑐) · 𝑃 + 𝑄1]
whereas in the real execution 𝑄′1 = 𝑥′1 · 𝑃 for 𝑥′1 ← Z𝑞. Since 𝑟1 and
𝑐𝑐 are sampled randomly and the consistency check always passes,
the distribution in both cases is identical.
In the real execution, the Verify algorithm checks that 𝑠 · 𝑅
ℎ · 𝑃 + 𝑟 · 𝑄, i.e., implicitly checks
𝑠2(𝑟1 + 𝑘2)
?
= ℎ + 𝑟(𝑥2 − 𝑡𝐵 − 𝑐𝑐) mod 𝑞.
?
=
(4)
(5)
𝑠2 · (𝑟1 · 𝑃 + 𝑅2) = ℎ · 𝑃 + 𝑟(𝑥2 − 𝑡𝐵 − 𝑐𝑐) · 𝑃
holds if and only if Equation 4 is correct, the condition to output
(𝑟, 𝑠) in both the real and simulated case is identical.
This implies that the view of a corrupted 𝑃2 in the real execution
is indistinguishable with that of the simulation, i.e., the advantage of
any PPT adversary who corrupts 𝑃2 to distinguish the real execution
and simulated execution given by S is negligible.
C MTA FROM OBLIVIOUS TRANSFER
We recall the MtA from OT proposed in [15].
Let F ℓ
OTe be the Correlated OT-extension functionality that al-
lows arbitrarily many Correlated OT instances to be executed in
batches of size ℓ. The input of the receiver is a vector of choice bits
while the sender’s input is a vector of correlated elements. The func-
tionality samples ℓ random pads and sends them to the sender. To
the receiver, it sends the pads if the sender’s corresponding choice
bits were 0, otherwise the sum of the pads and their corresponding
correlations. Please refer to [15, Sec. IV and Appendix A] for the
concrete definition and instantiation.
The OT-based MtA is constructed in the F ℓ
OTe hybrid model. It
is parameterized by the statistical security parameter 𝑠, the curve
order 𝑞, and 𝜅 = |𝑞|. Let g = gG||gR be a coefficient vector where
𝑖 = 2𝑖−1, and gR is a public random vector. Assume
gG satisfies gG
the input of Alice and Bob is 𝑎, 𝑏 ∈ Z𝑞 respectively, they execute
the following protocol to export 𝛼, 𝛽 such that 𝛼 + 𝛽 = 𝑎𝑏.
Encoding:
Multiplication:
• Bob samples 𝛾 ← {0, 1}𝜅+2𝑠, and encodes its input as b =
Bits(𝑏 − ⟨gR, 𝛾⟩)||𝛾.
• Alice samples ˆ𝑎 ← Z𝑞 and sets a = {𝑎|| ˆ𝑎} 𝑗 ∈[1,2𝜅+2𝑠].
• Alice who plays as sender and Bob as receiver, invokes func-
tionality F ℓ
OTe with their encoded input where ℓ = 2𝜅 + 2𝑠.
They receive as outputs, respectively, {t𝐴𝑗||ˆt𝐴𝑗} 𝑗 ∈[1,2𝜅+2𝑠]
and {t𝐵 𝑗||ˆt𝐵 𝑗} 𝑗 ∈[1,2𝜅+2𝑠]
• Alice and Bob generate two shared random values by calling
the random oracle, i.e., (𝜒, ˆ𝜒) ← RO(transcript).
• Alice computes and sends r = {𝜒t𝐴𝑗 + ˆ𝜒ˆt𝐴𝑗} 𝑗 ∈[1,2𝜅+2𝑠], 𝑢 =