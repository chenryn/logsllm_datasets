title:A Practical Congestion Attack on Tor Using Long Paths
author:Nathan S. Evans and
Roger Dingledine and
Christian Grothoff
A Practical Congestion Attack on Tor Using Long Paths
Nathan S. Evans
Colorado Research Institute
for Security and Privacy
University of Denver
Email: PI:EMAIL
Roger Dingledine
The Tor Project
Email: PI:EMAIL
Christian Grothoff
Colorado Research Institute
for Security and Privacy
University of Denver
Email: PI:EMAIL
Abstract
In 2005, Murdoch and Danezis demonstrated the ﬁrst
practical congestion attack against a deployed anonymity
network. They could identify which relays were on a
target Tor user’s path by building paths one at a time
through every Tor relay and introducing congestion.
However, the original attack was performed on only 13
Tor relays on the nascent and lightly loaded Tor network.
We show that the attack from their paper is no longer
practical on today’s 1500-relay heavily loaded Tor net-
work. The attack doesn’t scale because a) the attacker
needs a tremendous amount of bandwidth to measure
enough relays during the attack window, and b) there are
too many false positives now that many other users are
adding congestion at the same time as the attacks.
We then strengthen the original congestion attack by
combining it with a novel bandwidth ampliﬁcation at-
tack based on a ﬂaw in the Tor design that lets us build
long circuits that loop back on themselves. We show that
this new combination attack is practical and effective by
demonstrating a working attack on today’s deployed Tor
network. By coming up with a model to better under-
stand Tor’s routing behavior under congestion, we fur-
ther provide a statistical analysis characterizing how ef-
fective our attack is in each case.
Introduction
1
This paper presents an attack which exploits a weakness
in Tor’s circuit construction protocol to implement an im-
proved variant of Murdoch and Danezis’s congestion at-
tack [26, 27]. Tor [12] is an anonymizing peer-to-peer
network that provides users with the ability to establish
low-latency TCP tunnels, called circuits, through a net-
work of relays provided by the peers in the network. In
2005, Murdoch and Danezis were able to determine the
path that messages take through the Tor network by caus-
ing congestion in the network and then observing the
changes in the trafﬁc patterns.
While Murdoch and Danezis’s work popularized the
idea proposed in [1] of an adversary perturbing trafﬁc
patterns of a low-latency network to deanonymize its
users, the original attack no longer works on the mod-
ern Tor network. In a network with thousands of relays,
too many relays share similar latency characteristics and
the amount of congestion that was detectable in 2005 is
no longer signiﬁcant; thus, the trafﬁc of a single normal
user does not leave an easily distinguishable signature in
the signiﬁcantly larger volume of data routed by today’s
Tor network.
We address the original attack’s weaknesses by com-
bining JavaScript injection with a selective and asymmet-
ric denial-of-service (DoS) attack to obtain speciﬁc infor-
mation about the path selected by the victim. As a result,
we are able to identify the entire path for a user of today’s
Tor network. Because our attack magniﬁes the conges-
tion effects of the original attack, it requires little band-
width on the part of the attacker. We also provide an im-
proved method for evaluating the statistical signiﬁcance
of the obtained data, based on Tor’s message scheduling
algorithm. As a result, we are not only able to determine
which relays make up the circuit with high probability,
we can also quantify the extent to which the attack suc-
ceeds. This paper presents the attack and experimental
results obtained from the actual Tor network.
We propose some non-trivial modiﬁcations to the cur-
rent Tor protocol and implementation which would raise
the cost of the attack. However, we emphasize that a full
defense against our attack is still not known.
Just as Murdoch and Danezis’s work applied to other
systems such as MorphMix [24] or Tarzan [36], our im-
proved attack and suggested partial defense can also be
generalized to other networks using onion routing. Also,
in contrast to previously proposed solutions to conges-
tion attacks [18,22–24,28,30,35,36], our proposed modi-
ﬁcations do not impact the performance of the anonymiz-
ing network.
2 Related Work
Chaum’s mixes [3] are a common method for achiev-
ing anonymity. Multiple encrypted messages are sent
to a mix from different sources and each is forwarded
by the mix to its respective destination. Combinations
of artiﬁcial delays, changes in message order, message
batching, uniform message formats (after encryption),
and chaining of multiple mixes are used to further mask
the correspondence between input and output ﬂows in
various variations of the design [5,7,8,17,21,25,32,33].
Onion routing [16] is essentially the process of using
an initiator-selected chain of low-latency mixes for the
transmission of encrypted streams of messages in such a
way that each mix only knows the previous and the next
mix in the chain, thus providing initiator-anonymity even
if some of the mixes are controlled by the adversary.
2.1 Tor
Tor [12] is a distributed anonymizing network that uses
onion routing to provide anonymity for its users. Most
Tor users access the Tor network via a local proxy pro-
gram such as Privoxy [20] to tunnel the HTTP requests
of their browser through the Tor network. The goal is to
make it difﬁcult for web servers to ascertain the IP ad-
dress of the browsing user. Tor provides anonymity by
utilizing a large number of distributed volunteer-run re-
lays (or routers). The Tor client software retrieves a list
of participating relays, randomly chooses some number
of them, and creates a circuit (a chain of relays) through
the network. The circuit setup involves establishing a
session key with each router in the circuit, so that data
sent can be encrypted in multiple layers that are peeled
off as the data travels through the network. The client
encrypts the data once for each relay, and then sends it to
the ﬁrst relay in the circuit; each relay successively peels
off one encryption layer and forwards the trafﬁc to the
next link in the chain until it reaches the ﬁnal node, the
exit router of the circuit, which sends the trafﬁc out to the
destination on the Internet.
Data that passes through the Tor network is packaged
into ﬁxed-sized cells, which are queued upon receipt for
processing and forwarding. For each circuit that a Tor
router is a part of, the router maintains a separate queue
and processes these queues in a round-robin fashion. If
a queue for a circuit is empty it is skipped. Other than
using this fairness scheme, Tor does not intentionally in-
troduce any latency when forwarding cells.
The Tor threat model differs from the usual model for
anonymity schemes [12]. The traditional threat model
is that of a global passive adversary: one that can ob-
serve all trafﬁc on the network between any two links.
In contrast, Tor assumes a non-global adversary which
can only observe some subset of the connections and
can control only a subset of Tor nodes. Well-known at-
tack strategies such as blending attacks [34] require more
powerful attackers than those permitted by Tor’s attacker
model. Tor’s model is still valuable, as the resulting
design achieves a level of anonymity that is sufﬁcient
for many users while providing reasonable performance.
Unlike the aforementioned strategies, the adversary used
in this paper operates within the limits set by Tor’s at-
tacker model. Speciﬁcally, our adversary is simply able
to run a Tor exit node and access the Tor network with
resources similar to those of a normal Tor user.
2.2 Attacks on Tor and other Mixes
Many different attacks on low-latency mix networks and
other anonymization schemes exist, and a fair number of
these are speciﬁcally aimed at the Tor network. These
attacks can be broadly grouped into three categories:
path selection attacks, passive attacks, and active attacks.
Path selection attacks attempt to invalidate the assump-
tion that selecting relays at random will usually result in
a safe circuit. Passive attacks are those where the adver-
sary in large part simply observes the network in order to
reduce the anonymity of users. Active attacks are those
where the adversary uses its resources to modify the be-
havior of the network; we’ll focus here on a class of ac-
tive attacks known as congestion or interference attacks.
2.2.1 Path Selection Attacks
Path selection is crucial for the security of Tor users; in
order to retain anonymity, the initiator needs to choose a
path such that the ﬁrst and last relay in the circuit won’t
collude. By selecting relays at random during circuit cre-
ation, it could be assumed that the probability of ﬁnd-
ing at least one non-malicious relay would increase with
longer paths. However, this reasoning ignores the pos-
sibility that malicious Tor routers might choose only to
facilitate connections with other adversary-controlled re-
lays and discard all other connections [2]; thus the initia-
tor either constructs a fully malicious circuit upon ran-
domly selecting a malicious node, or fails that circuit and
tries again. This type of attack suggests that longer cir-
cuits do not guarantee stronger anonymity.
A variant of this attack called “packet spinning” [30]
attempts to force users to select malicious routers by
causing legitimate routers to time out. Here the at-
tacker builds circular paths throughout the Tor network
and transmits large amounts of data through those paths
in order to keep legitimate relays busy. The attacker
then runs another set of (malicious) servers which would
eventually be selected by users because of the attacker-
generated load on all legitimate mixes. The attack is suc-
cessful if, as a result, the initiator chooses only malicious
servers for its circuit, making deanonymization trivial.
2
2.2.2 Passive Attacks
Several passive attacks on mix systems were proposed
by Back et al. [1]. The ﬁrst of these attacks is a “packet
counting” attack, where a global passive adversary sim-
ply monitors the initiator’s output to discover the number
of packets sent to the ﬁrst mix, then observes the ﬁrst mix
to watch for the same number of packets going to some
other destination. In this way, a global passive adversary
could correlate trafﬁc to a speciﬁc user. As described
by Levine et al. [23], the main method of defeating such
attacks is to pad the links between mixes with cover traf-
ﬁc. This defense is costly and may not solve the problem
when faced with an active attacker with signiﬁcant re-
sources; an adversary with enough bandwidth can deal
with cover trafﬁc by using up as much of the allotted
trafﬁc between two nodes as possible with adversary-
generated trafﬁc [4]. As a result, no remaining band-
width is available for legitimate cover trafﬁc and the ad-
versary can still deduce the amount of legitimate trafﬁc
that is being processed by the mix. This attack (as well
as others described in this context) requires the adversary
to have signiﬁcant bandwidth. It should be noted that in
contrast, the adversary described by our attack requires
only the resources of an average mix operator.
Low-latency anonymity systems are also vulnerable
to more active timing analysis variations. The attack
presented in [23] is based on an adversary’s ability to
track speciﬁc data through the network by making mi-
nor timing modiﬁcations to it. The attack assumes that
the adversary controls the ﬁrst and last nodes in the path
through the network, with the goal of discovering which
destination the initiator is communicating with. The au-
thors discuss both correlating trafﬁc “as is” as well as al-
tering the trafﬁc pattern at the ﬁrst node in order to make
correlation easier at the last node. For this second corre-
lation attack, they describe a packet dropping technique
which creates holes in the trafﬁc; these holes then per-
colate through the network to the last router in the path.
The analysis showed that without cover trafﬁc (as em-
ployed in Tarzan [14, 15]) or defensive dropping [23],
it is relatively easy to correlate communications through
mix networks. Even with “normal” cover trafﬁc where
all packets between nodes look the same, Shmatikov and
Wang show that the trafﬁc analysis attacks are still vi-
able [35]. Their proposed solution is to add cover trafﬁc
that mimics trafﬁc ﬂows from the initiator’s application.
A major limitation of all of the attacks described so
far is that while they work well for small networks, they
do not scale and may fail to produce reliable results for
larger anonymizing networks. For example, Back’s ac-
tive latency measuring attack [1] describes measuring
the latencies of circuits and then trying to determine the
nodes that were being utilized from the latency of a spe-
ciﬁc circuit. As the number of nodes grows, this attack
becomes more difﬁcult (due to an increased number of
possible circuits), especially as more and more circuits
have similar latencies.
2.2.3 Congestion Attacks
A more powerful relative of the described timing attacks
is the clogging or congestion attack. In a clogging attack,
the adversary not only monitors the connection between
two nodes but also creates paths through other nodes and
tries to use all of their available capacity [1]; if one of the
nodes in the target path is clogged by the attacker, the ob-
served speed of the victim’s connection should change.
In 2005, Murdoch and Danezis described an attack on
Tor [27] in which they could reveal all of the routers in-
volved in a Tor circuit. They achieved this result using a
combination of a circuit clogging attack and timing anal-
ysis. By measuring the load of each node in the network
and then subsequently congesting nodes, they were able
to discover which nodes were participating in a particu-
lar circuit. This result is signiﬁcant, as it reduces Tor’s
security during a successful attack to that of a collection
of one hop proxies. This particular attack worked well on
the ﬂedgling Tor network with approximately ﬁfty nodes;
the authors experienced a high success rate and no false
positives. However, their clogging attack no longer pro-
duces a signal that stands out on the current Tor network
with thousands of nodes. Because today’s Tor network
is more heavily used, circuits are created and destroyed
more frequently, so the addition of a single clogging cir-
cuit has less impact. Also, the increased trafﬁc transmit-
ted through the routers leads to false positives or false