plements TLS extensions, and so forth. The daemon uses
administrator conﬁguration to choose which TLS ver-
sions, cipher suites, and extensions to support. It should
be noted that while modern TLS libraries are compli-
cated and difﬁcult to use, libraries like OpenSSL have a
strong deployment base and a large history of testing and
bug ﬁxing that are difﬁcult to rival. Our prototype imple-
mentation leverages this by calling the OpenSSL library
on behalf of applications. Writing TLS functionality in
kernel code (i.e. not user space) is an undertaking outside
the scope of this work, and one which should involve ex-
tensive participation from the security community.
6.1 Basic Operation
The Linux kernel allows the same network system calls
to handle different protocols by storing pointers to the
kernel functions associated with a given protocol inside
generalized socket objects. The kernel component of
our SSA implementation supplies its own functions for
TLS behavior, using the kernel to associate these func-
tions with all sockets created using IPPROTO TLS. The
supplied functions are then invoked when a user appli-
cation invokes a corresponding POSIX socket call on a
TLS socket, through the system call interface.
When an SSA-using application invokes an I/O opera-
tion on a TLS socket, the kernel component transfers the
810    27th USENIX Security Symposium
USENIX Association
Network ApplicaonUserspacePOSIX Socket APISystem Call BoundaryKernelNetworkNetwork SubsystemTCPUDPRAWTLSEncrypon DaemonSecurity LibraryAdmin ConﬁgUserspacesockets. For example, if the daemon fails to connect to
a speciﬁed remote host, the corresponding error code is
sent back to the application, and the kernel does not con-
nect the internal socket to the the daemon, maintaining
both sockets in an unconnected state and informing the
application of real errors.
When the daemon receives a certiﬁcate from a remote
peer, it validates that certiﬁcate based on administrator
preferences. The administrator can employ traditional
certiﬁcate validation checks using a certiﬁcate trust store
and the hostname provided by the application through
TLS REMOTE HOSTNAME. Remote TLS client connections
are authenticated using the trusted peer certiﬁcates, op-
tionally supplied by a server application, as a trust store.
In addition to, or replacement of these methods, adminis-
trators can defer validation to TrustBase [18], which of-
fers multiple coexisting certiﬁcate validation strategies.
Creating an internal socket between applications and
the daemon provides natural support for existing socket
I/O and polling operations. Read and write operations
can use their existing kernel implementations with no
modiﬁcation, and event notiﬁcations from the kernel
through the use of select, poll, and epoll are han-
dled automatically.
6.2 Performance
We performed stress tests to ensure that the encryption
daemon could feasibly act as an encryption proxy for
numerous applications simultaneously. We wrote two
client applications, one using the SSA and the other using
OpenSSL, that download a 1MB ﬁle over HTTPS using
identical TLS parameters. We created multiple simul-
taneous instances of these applications and recorded the
time required for all of them to receive a remote ﬁle over
HTTPS, repeating this for increasing numbers of con-
current processes. We show the results of running these
tests for 1-100 concurrent processes in Figure 4. Each
test was run against both local and remote webservers
and averaged over ten trials. The machine hosting the
applications was a 6-core, hyperthreaded system with 16
GB of RAM, running Fedora 26.
In the local and remote server cases, we ﬁnd that the
SSA and OpenSSL trendlines overlap each other consis-
tently. We use multiple regression to determine the dif-
ferences between the SSA and OpenSSL timings in both
cases. We ﬁnd no statistically signiﬁcant difference for
local connections (p = 0.08) but do ﬁnd a difference for
remote ones (p = 0.0001). For the remote case we ﬁnd
that, on average, the SSA actually improves latency by
between 0.1 ms and 0.4 ms per process.
Figure 4: Time to transfer 1MB over LAN and WAN via
HTTPS for applications using OpenSSL and the SSA,
with varying numbers of simultaneous processes.
7 Coercing Existing Applications
In an effort to further support administrators wishing to
control how TLS is used on their systems, we explored
the ability to dynamically coerce TLS applications us-
ing security libraries to use the SSA instead. We focused
our efforts on overriding applications that dynamically
link with OpenSSL for TLS functionality. Bates et al. [3]
found that 94% of popular TLS-using Ubuntu packages
are dynamically linked with their security libraries, indi-
cating that handling the dynamic linking case would be a
signiﬁcant beneﬁt.
We supply replacement OpenSSL functions through
a shared library for dynamically linked applications to
override normal behavior (usable via LD PRELOAD, drop-
in library replacement, etc.). This allows us to intercept
library function calls and translate them to their related
SSA functionality. Under OpenSSL, an application may
invoke a variety of functions to control and use TLS.
Supplying true replacements for each of these 504 sym-
bols is both cumbersome and unnecessary. Instead, we
need only to hook OpenSSL functions which perform op-
erations on ﬁle descriptors, and those which provide in-
formation necessary for the SSA to perform the TLS op-
erations properly (e.g., setting hostnames, private keys,
and certiﬁcates). By hooking functions that operate on
ﬁle descriptors, we isolate an application’s socket behav-
ior from the OpenSSL library, allowing the SSA to con-
trol network interaction exclusively.
OpenSSL uses an SSL structure to maintain all TLS
conﬁguration for a given connection, including the cer-
tiﬁcates, keys, TLS method (server or client), etc., that
the application has chosen to associate with the given
TLS connection (which is done through other function
USENIX Association
27th USENIX Security Symposium    811
020406080100Number of Processes0.00.20.40.60.81.0Time ElapsedSSA (local)OpenSSL (local)SSA (remote)OpenSSL (remote)calls). Our tool obtains the information needed to per-
form a TLS connection from this SSL structure.
When a connection is made on an SSL-associated
socket, our tool silently closes this socket, creates a re-
placement SSA TLS socket, and then uses dup2 to make
the new socket use the old ﬁle descriptor. Using the as-
sociated SSL structure, the tool performs the appropri-
ate SSA setsockopt calls and then performs a POSIX
connect on the socket. All socket-using OpenSSL func-
tion, such as SSL read and SSL write, are replaced
with normal POSIX equivalents (e.g., recv and send),
thereby allowing the SSA to perform encryption and de-
cryption. Since these functions and others have different
error code semantics, we also make hooks to change the
SSL get error function to make appropriate OpenSSL
errors based on their POSIX counterparts.
During the lifetime of the connection, OpenSSL op-
tions set and retrieved by the application are translated to
relevant setsockopt and getsockopt functions, if nec-
essary. For example, the SSL get peer certificate
function was overridden to use getsockopt with a spe-
cial TLS PEER CERTIFICATE CHAIN option to provide
applications with X509 certiﬁcates to enable custom val-
idation (many applications use this function to validate
the hostname of certiﬁcates).
Network applications can also create and connect
(or accept) a socket before associating them with an
SSL structure. This is typical for applications that use
STARTTLS, such as SMTP. To handle this scenario, the
tool passes ownership of a connected descriptor to the
SSA encryption daemon. The daemon uses this descrip-
tor as its external socket for the brokered TLS connec-
tion, and the SSA provides a new TLS socket descriptor
to the application for interaction with the daemon.
We abstracted this functionality and added it to our
Linux implementation in the kernel component, provid-
ing the developer with a TCP TLS UPGRADE option to
upgrade a TCP socket to use TLS via the SSA after it
has been connected. This enables applications to use
STARTTLS when they ﬁnd that a remote endpoint sup-
ports opportunistic TLS.
In our experimentation with this tool, we successfully
forced wget, irssi, curl, and lighttpd to use the
SSA for TLS dynamically, bringing the TLS behavior of
these applications under admin control.
8 Discussion
Our work is an exploration of how a TLS API could con-
form to the POSIX socket API. We reﬂect now on the
general beneﬁts of this approach and the speciﬁc beneﬁts
of our implementation. We also discuss SSA conﬁgura-
tion under different deployment scenarios and offer some
security considerations.
8.1 General Beneﬁts
By conforming to the POSIX API, using TLS becomes
a matter of simply specifying TLS rather than TCP dur-
ing socket creation and setting a small number of options
through setsockopt. All other networking calls (e.g.
bind, connect, send, recv) remain the same, allow-
ing developers to work with a familiar API. Porting in-
secure applications to use the SSA takes minutes, and
refactoring secure applications to use the SSA instead
of OpenSSL takes a few hours and removes thousands
of lines of code. This simpliﬁed TLS interface allows
developers to focus on the application logic that makes
their work unique, rather than spending time implement-
ing standard network security with complex APIs.
Because our SSA design moves all TLS functional-
ity to a centralized service, administrators gain the abil-
ity to conﬁgure TLS behavior on a system-wide level,
and tailor settings of individual applications to their spe-
ciﬁc needs. Default conﬁgurations can be maintained
and updated by OS vendors, similar to Fedora’s Cryp-
toPolicy [16]. For example, administrators can set pref-
erences for or veto speciﬁc TLS versions, cipher suites,
and extensions, or automatically upgrade applications to
TLS 1.3 without developer patches. We have also found
that by leveraging dynamic linking, as in Bates et al. [3],
applications that currently employ their own TLS usage
can be coerced to use the SSA and thereby conform to
local security policies. This can also protect vulnerable
applications currently using OpenSSL incorrectly, or us-
ing outdated conﬁgurations.
8.2
Implementation Beneﬁts
By implementing the SSA with a kernel module, devel-
opers who wish to use it do not have to link with any ad-
ditional userspace libraries. With small additions to libc
headers, applications in C/C++ can use the new constants
deﬁned for the IPPROTO TLS protocol. Other languages
can be easily modiﬁed to use the SSA, as demonstrated
with our efforts to add support to Go, Python, and PHP.
Adding TLS to the Linux kernel as an Internet pro-
tocol allows the SSA to leverage the existing separation
of the system call boundary. Due to this, privilege sep-
aration in TLS usage can be naturally achieved. For ex-
ample, administrators can store private keys in a secure
location inaccessible to applications. When applications
provide paths to these keys using setsockopt (or use
them from the SSA conﬁguration), the SSA can read
these keys with its elevated privilege. If the application
becomes compromised, the key data (and master secret)
remain safely outside the address space of the applica-
tion, inaccessible to malicious parties (getsockopt for
TLS PRIVATE KEY is unimplemented). This is similar in
812    27th USENIX Security Symposium
USENIX Association
spirit to Mavrogiannopoulos et al.’s kernel module that
decouples keys from applications [16].
Finally, the loadable nature of the kernel module al-
lows administrators to quickly adopt the SSA and pro-
vides an easy avenue for alternative implementations.
This is in line with previous Linux kernel security work.
The Linux Security Module framework, for example,
was created to provide a shared kernel API to access con-
trol modules, which allowed administrators to pick the
best solution for their needs (e.g., SELinux, AppArmor,
Tomoyo Linux, etc.). In a similar fashion, our approach
in registering a new TLS protocol allows different kernel
modules to hook relevant POSIX socket endpoints for
TLS connections and provide unique implementations.
8.3 Conﬁguration Considerations
The SSA enables administrators and power users to
custom-tailor TLS to their local security policies. Enter-
prise administrators likely have a ﬁrm grasp of various
policies and their associated implications. However, typ-
ical users do not have strong security backgrounds and
often rely on their OS vendors for security. With this in
mind, Microsoft, RedHat, Canonical, and other vendors
could ship their systems with strong default global SSA
conﬁgurations. These could then be periodically updated
according to modern best practices. Some vendors, such
as Canonical, already ship application-speciﬁc security
proﬁles in addition to global ones [24]. SSA conﬁgu-
ration proﬁles would ﬁt nicely into this model, and also
mesh nicely with efforts to centralize security policies,
such as Redhat’s Fedora CryptoPolicy [15]. Microsoft
and Apple could likewise supply global SSA conﬁgura-
tions to users of Windows and MacOS, and allow power
users to further customize these using the settings UI of
these systems. In the mobile space, sometimes operating
system updates for devices arrive at rates far less frequent
than application updates, as with Android. In such cases,
it may be advisable for a vendor, such as Google, to pro-
vide SSA conﬁguration (or even the SSA itself) as a sys-
tem application, where it can be independently updated
from the core OS and granted special permissions.
8.4 Alternative Implementations
POSIX is a set of standards that deﬁnes an OS API –
the implementation details are left to system designers.
Accordingly, our presentation of the SSA with its exten-
sions to the existing POSIX socket standard and related
options is separate from the presented implementation.
While our implementation leveraged a userspace encryp-
tion daemon, other architectures are possible. We outline
two of these:
• Userspace only: The SSA could be implemented as
a userspace library that is either statically or dynam-
ically linked with an application, wrapping the na-
tive socket API. Under this model the library could
request administrator conﬁguration from default sys-
tem locations, to retain administrator control of TLS
parameters. While such a system sacriﬁces the inher-
ent privilege separation of the system call boundary
and language portability, it would not require that the
OS kernel explicitly support the API.
• Kernel only: Alternatively, an implementation could
build all TLS functionality directly into the kernel,
resulting a pure kernel solution. This idea has been
proposed within the Linux community [7] and gained
some traction in the form of patches that implement
individual cryptographic components. Some perfor-
mance gains in TLS are also possible in this space.
Such an implementation would provide a backend for
SSA functionality that required no userspace encryp-
tion daemon.
System designers are free to use any of these or other
architectures in accordance with their desired practices.
The beneﬁt to developers is that they can write code for
the same API for all implementations and can pass the
burden of TLS complexity to another party.
8.5 Security Analysis
Our prototype implementation of the SSA centralizes se-
curity in the kernel and daemon processes. As such, any
vulnerabilities present are a threat to all applications uti-
lizing the SSA. Such risks are part of operating system
services in general, as they constitute single points of
failure. On the other hand, centralization allows a com-
munity to focus on hardening a single design, and secu-
rity patches to the system affect all SSA-using applica-
tions immediately. Given the swift response and incen-
tives OS vendors typically have in responding to CVEs,
patches to security systems in the OS will likely be dis-