件的数量。团队滑入Ops模式的情况通常发生在面临巨大外界压力时，不管这些压力是
SRE团队陷入Ops模式的原因是过分关注如何快速解决紧急事件而不是如何减少紧急事
确定最大的压力来源
100QPS的服务可能在一年内变成一个10.000QPS的服务。
另一方面，如果该服务的增长刚刚开始，我们应该关注于对爆发式增长的准备。某个
善服务可靠性的部分。时刻记住，你的工作是保证服务正常运转，而不是避免警报发生。
或者并不复杂），那么我们应该关注于改进团队现在的工作方式，找到那些阻碍他们改
如果该服务中最主要的组件的商业价值很高但是部署规模实际很小（只需要很少的资源
们接下来的策略。
可以通过参与一次on-call轮值来确定这种判断是否正确，因为可扩展性的确会影响到我
处于Ops模式的团队可能认为可扩展性对于他们来说并不重要（“我的服务很小"）。这
目前还可以自动化或者进一步简化同样重要。
试引导团队建立健康的工作习惯，这样能够减少花费在工单上的时间。这与指出该服务
的SRE来处理。SRE模型的目标是仅仅在系统复杂度上升的时候才增加新人。你应该尝
务的可扩展性有利或者有的原因。你应该提醒该团队，日益增加的工单不应需要更多
在嵌入团队的过程中，你的主要工作是清楚地表达团队目前的流程和工作习惯对于该服
服务所需的人数不会与服务的负载同步增加。
他们通过编写软件系统或者消除系统瓶颈的方法来解决这个问题。这样运维一个
机。在Ops模式下的团队通过增加更多的管理员来解决这个问题，SRE则恰恰相反，
各种工作项目也在增加。例如，某个服务随着规模的扩大，需要管理更多的虚拟
Ops模式（Ops mode）指的是一种维持服务运行的特定方法。随着服务规模的扩大
第30章通过嵌入SRE的方式帮助团队从运维过载中恢复
Ops模式与非线性扩展
了解上下文
---
## Page 407
在了解团队内部动态和找到痛点之后，你应该通过建立一些最佳实践来为改善状况做准
第二阶段：分享背景知识
现有的SRE以“我们什么也不知道，开发者才明白”来应对的关键组件
存不足了。”
任何一个容量规划都是“增加更多的服务器”的服务：“我们的服务器昨天晚上内
任何有客户投诉，并且缺乏一个正式的SLI/SLO/SLA的服务
开发团队和SRE都视而不见的警报
对“未来的一件大事”的过度依赖
SRE直接参与开发的功能变得越来越重要
知识代沟
的形式出现的。其他的来源包括：
况。大部分时候，即将发生的紧急情况是以一个新的、没有被设计成自我管理的子系统
为了能对某个组件提供合理的on-call支持，我们至少应该了解当它罢工的时候会造
参考第4章关于SLI、SLO和SLA的讨论。
例如，“将流超时改回到60s”，而不是“弄明白为什么有时需要60s来获取我们的
那么通过一个负载测试（在上一次运行中显示了1.99GB内存使用量）并不一定意
容量规划必须具有足够的前瞻性。如果你的系统模型预测到服务器需要2GB内存，
细地将此类警报调查清楚，要么就修改警报规则让它们不再出现。
这样的警报经常被定性为暂时性的，但是这些警报仍然会让团队成员分心。要么仔
解决方案能够解决该问题，临时措施没有意义。
团队成员有时会忽略某种问题长达几个月的时间，因为他们相信“马上上线”的新
他们更小并且当时至少有一位SRE支持。
这些服务通常没有得到和一般的新功能上线所需的同等水平的关注，因为在规模上
其他团队成员缺乏只有他才了解的关键系统的知识。
on-call时就会由于缺乏广泛的知识而需要帮助。同时，他的过度专业化反而会导致
在大型团队中，团队成员可能会过度专业化。
成什么样的后果以及需要多快解决。
宣传视频的第一个MB。”
味着你的系统容量是足够的。
。当一个团队成员过于专业化时，他在
第二阶段：分享背景知识
365
420
---
## Page 408
366
作。
清晰地解释哪些紧急事件应该被自动化，而其他的紧急事件则是运维服务必须承担的工
你应该将团队遇到的紧急事件分为琐事的和非琐事的。最后，将这个列表交给团队并且
在我们简化的模型中有两种紧急事件：
将紧急事件按类型排序
现系统在哪里误导了你，以及过程中什么地方对人的认知能力要求过高。”
正确的决定。我想要你写下在这段时间里每一个时间点你所想的事情，这样我们就能发
综复杂的系统中，错误是不可避免的。我相信，在当时你利用了最正确的信息做出了最
的错误之处。说服其他工程师书写事后总结最有效的措辞是：“在任何一个交互关系错
行业中，都有明确的证据来证明，参见文献[Dek14]。你应该向团队成员指出这个理论
坏苹果理论已经被实践证明是错误的，在很多行业中，包括那些对安全极为重视的航空
统工作良好，如果我们摆脱所有的坏苹果以及它们所犯的错误，系统将会一直运行良好，
如同前文提到的那样，你可能会遇到“为什么是我？”这样的回复。这种回复恰恰说明
减少事故对团队成员的时间的影响。
释他们是如何通过永久性修复根源问题而受益的。永久性地修复根源问题长期来看可以
callSRE合作书写一个非常好的、对事不对人的事后总结。这个文档可以用来向团队解
作过程中，肯定会有至少一次事故发生。如果你当时不是on-call工程师，就应该与on-
不要尝试改正之前的错误，而是应该亲自负责下一次事后总结的书写。在你和团队的工
行为可能会推动团队进入防御模式。
顾之前的事后总结，并且给它们一一评论，这样做其实对团队并没有帮助。相反，这种
些团队成员可能会把书写事后总结看作是一种惩罚，甚至是无用的。虽然你可能很想回
事后总结体现了团队的集体推理能力，不健康的团队进行的事后总结往往是无效的。一
书写一个好的事后总结作为示范
备。例如，建立书写事后总结的机制，辨别琐事的来源，确定每个琐事的最佳解决方案等。
了该团队相信事后总结过程是报复性的。这一态度来源于对坏苹果理论的认同：整个系
·其他的紧急事件可能会让on-call成员感到压力巨大，又或者会使他愤怒地敲击
·不应该存在的紧急事件。这些紧急事件会导致那些一般被称作Ops工作和琐事（参
键盘。这类紧急事件实际上是日常工作的一部分，团队需要通过构建对应的工具
见第5章）的发生。
来控制压力。
第30章通过嵌入SRE的方式帮助团队从运维过载中恢复
---
## Page 409
面临最后期限压力时的第一个受害者）。一定要坚持解释你的逻辑推理过程，强调良好
扬“做改变是别人的事”这种想法。相反，请采取以下步骤：
获取团队成员的帮助
团队目前没有SLO，那么请首先阅读第4章，然后召集技术负责人和管理层会议，讨论
如果研发团队与SRE团队没有达成这个共识，那本章的其他建议就都帮不上忙了。如果
对于事故的后果提供了量化分析的依据，同时它也提供了某个流程改变的重要性的依据。
你的第一个目标应该是为团队制定一个服务等级目标（SLO）。SLO非常重要，因为它
第1章和第6章中概述的原则开始。
流程或者文化让他们自己感到不爽。我们不应该试着去一一解决这些问题，而是应该从
无法区分SRE与传统的Ops模型的团队，通常也不能清晰地描述为什么该团队的代码、
从基础开始
心理模型。
问题。为了确保团队在未来可以进行自我调节，我们需要帮助他们建立一个良好的SRE
保持团队健康是一个持续的过程。正因为此，这不是你可以通过个人英雄主义来解决的
第三阶段
见。这样既可以做到信息共享，又可以鼓励其他团队成员编写文档。（书写文档常常是
在发现其他问题时，应该将其写入一个错误报告或一个团队的文档，让团队成员提供意
你可能非常着急，
和确定SLO。
一个SLO可能是该团队从Ops模式转向一个健康的、长期的SRE模式的最重要的工具
4.在两到三个问题上重复这个过程。
3.自己亲自作为代码更改和文档修订的评审者。
2.清晰地解释这项工作是如何以一个永久的方式解决事后总结中出现的问题的。就
1.找到一个可以由某个团队成员完成的有价值的工作。
算是一个健康的团队有时候也是比较短视的。
正确的初始条件，同时需要传授给他们做出健康选择所必须依赖的简单原则。
人类非常善于在环境改变时保持心态不变，所以我们应该关注于创建（或恢复）
设：主导改变
，想要直接修复你所发现的问题，请一定要克制。因为这样做就是在宣
第三阶段：主导改变
422
---
## Page 410
423
368
应该提出引导性问题，而非指责性的问题。当你和SRE团队交流时，试着用一种可以鼓
提出引导性问题
的根源。”
什么东西违反了这一规则。如果这种情况经常发生，我们应该找到和消除造成这种变化
为我们这里的一个简化假设是全部的改变都通过自动化进行，这种情况的发生说明了有
和之前的例子一样，这一决策可能是正确的，但是是不充分的。相反，尝试“...]因
慢回滚的速度的问题。”
为在该代码中的一个错误会导致其他服务同时受到影响，同时额外的代码也可能带来减
道你心中所想，所以他们很可能模拟你这种不良行为。相反，尝试“[不安全，因
这一决策可能是正确的，但是分析论证上是很薄弱的（也没有详细解释）。团队无法知
对于某项决策不充分的解释的例子：
对某项决策进行充分解释的例子：
分，就可能会造成团队也形成这种懒情的风气。所以一定要避免。
那些基础理念。这样做有助于建立团队的心理模型。在你离开团队后，团队应该能够预
绕过这个问题，
如果不够幸运，没有人会要求你做出解释。这时，你应该通过直接解释你的所有决定来
似于“现在，马上解释为什么要这么做。就现在，在每周的生产会议当中。”
维过载的日常决策中去。做好准备接受团队成员的反对。幸运的话，这种反对可能是类
随着团队逐渐复原，逐渐接受你提出的改变之后，你应该转移注意力到解决那些造成运
解释你的逻辑推理过程
的文档会确保团队在一个新的情况中不会重复旧的错误。
知你对某个设计或者某个更改的评论。如果你不解释逻辑推理过程，或者解释得不够充
·“自动化机制在遇到部署不一致的情况时应该放弃进行。”
●“我不认为每一个服务器自己生成自身的路由配置是安全的，因为我不信。”
·“我反对最新版本的原因不是因为测试结果有问题，而是因为我们对发布所制定
均恢复时间必须非常短，这样在回退之前进行深入的现场调查是不现实的。”
“发布需要能够安全回退，因为我们的SLO非常高。要想达到SLO的要求，平
的错误预算已经耗尽了。”
第30章通过嵌入SRE的方式帮助团队从运维过载中恢复
不管是否有人要求你这样做。当做出解释时，记得要引用你的建议中的
---
## Page 411
注1原文中采用的是post-vitam，拉丁文。
规划能力、紧急事件处理能力和部署发布过程。
审和代码评审。在未来几个月中持续关注这个团队，确保他们正在慢慢提高自己的容量
大部分的工作现在已经完成了。虽然你的嵌入式工作正式结束，但仍然应该参与设计评
该将报告组织成一份检查报告准1，解释成功路上的每一个重要的决策。
同时，该报告应该向团队提供一些待办事项，来保证他们会实践你所传授的东西。你应
你的最后一个任务是书写一份报告。报告中应该重申你的观点、例子和逻辑推理过程。
你应该将以下这些本章中列出的宗旨提供给该SRE团队。
小结
引导性问题的反例：
引导性问题的例子：
释了对于不同政策问题的理论推理之后，其实就使得该团队更深刻地理解了SRE的哲学。
为，按照定义，处于Ops模型中的团队会天生拒绝这种逻辑推理。当你花费一定时间解
励别人思考基本理念的方式来提出问题。这对于你建立这种模型而言是格外有价值的，因
·提供以可伸缩的方式来解决崭新情况所必需的核心理念
·从技术角度，最好是量化的角度指出团队需要改变的原因。
“这些旧的、停滞的发布是什么情况？“
）“我看到任务失败的警报经常发生，但是on-call工程师通常什么都不做。这样会
解释SRE经常采用的“常识”背后的逻辑推理过程。
提供一个详细、具体的“改变”作为例子。
“为什么某个组件要做这么多的事情？