title:Distributed application tamper detection via continuous software updates
author:Christian S. Collberg and
Sam Martin and
Jonathan Myers and
Jasvir Nagra
Distributed Application Tamper Detection Via Continuous
Software Updates
Christian Collberg
University of Arizona
PI:EMAIL
Jonathan Myers
University of Arizona
PI:EMAIL
ABSTRACT
We present a new general technique for protecting clients in dis-
tributed systems against Remote Man-at-the-end (R-MATE) attacks.
Such attacks occur in settings where an adversary has physical ac-
cess to an untrusted client device and can obtain an advantage from
tampering with the hardware itself or the software it contains.
In our system, the trusted server overwhelms the analytical abil-
ities of the untrusted client by continuously and automatically gen-
erating and pushing to him diverse client code variants. The diver-
sity subsystem employs a set of primitive code transformations that
provide an ever-changing attack target for the adversary, making
tampering difﬁcult without this being detected by the server.
Categories and Subject Descriptors
K.6.5 [Security and Protection]
General Terms
Renewability, Defense-in-depth, Diversity, Obfuscation, Tamper-
prooﬁng
Keywords
Distributed Systems, Security, Software Protection
1.
INTRODUCTION
Man-at-the-end (MATE) attacks occur in settings where an ad-
versary has physical access to a device and compromises it by tam-
pering with its hardware or software. Remote man-at-the-end (R-
MATE) attacks occur in distributed systems where untrusted clients
are in frequent communication with trusted servers over a network,
and malicious users can get an advantage by compromising an un-
trusted device.
To illustrate the ubiquity of R-MATE vulnerabilities, consider
the following four scenarios. First, in the Advanced Metering In-
frastructure (AMI) for controlling the electrical power grid, net-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
Sam Martin
University of Arizona
PI:EMAIL
Jasvir Nagra
Google Inc.
PI:EMAIL
worked devices (“smart meters”) are installed at individual house-
holds to allow two-way communication with control servers of the
utility company. In an R-MATE attack against the AMI, a mali-
cious consumer tampers with the meter to emulate an imminent
blackout, or to trick a control server to send disconnect commands
to other customers [7, 22]. Second, massive multiplayer online
games are susceptible to R-MATE attacks since a malicious player
who tampers with the game client can get an advantage over other
players [17]. Third, wireless sensors are often deployed in unse-
cured environments (such as theaters of war) where they are vulner-
able to tampering attempts. A compromised sensor could be forced
into supplying the wrong observations to a base station, causing
real-world damage. Finally, while electronic health records (EHR)
are typically protected by encryption while stored in databases and
in transit to doctors’ ofﬁces, they are vulnerable to R-MATE attack
if an individual doctor’s client machine is compromised.
1.1 Overview
In each of the scenarios above, the adversary’s goal is to tamper
with the client code and data under his control. The trusted server’s
goal is to detect any such integrity violations, after which counter-
measures (such as severing connections, legal remedies, etc.) can
be launched.
Security mechanisms. In this paper we present a system that
achieves protection against R-MATE attacks through the extensive
use of code diversity and continuous code replacement. In our sys-
tem, the trusted server continuously and automatically generates
diverse variants of client code, pushes these code updates to the
untrusted clients, and installs them as the client is running. The
intention is to force the client to constantly analyze and re-analyze
incoming code variants, thereby overwhelming his analytical abili-
ties, and making it difﬁcult for him to tamper with the continuously
changing code without this being detected by the trusted server.
Limitations. Our system speciﬁcally targets distributed applica-
tions which have frequent client-server communication, since client
tampering can only be detected at client-server interaction events.
Furthermore, while our use of code diversity can delay an attack,
it cannot completely prevent it. Our goal is therefore the rapid de-
tection of attacks; applications which need to completely prevent
any tampering of client code, for even the shortest length of time,
are not suitable targets for our system. To see this, consider the fol-
lowing timeline in the history of a distributed application running
under our system:
319
t1: client
tampers
t2: server
detects
t3: server
responds
e1
e2
e3
I1
e4
I2
e5
e6
e7
The ei’s are interaction events, points in time when clients com-
municate with servers either to exchange application data or to per-
form code updates. At time t1 the client tampers with the code
under his control. Until the next interaction event, during interval
I1, the client runs autonomously, and the server cannot detect the
attack. At time t2, after an interval I2 consisting of a few interac-
tion events, the client’s tampering has caused it to display anoma-
lous behavior, perhaps through the use of an outdated communica-
tion protocol, and the server detects this. At time t3, ﬁnally, the
server issues a response, perhaps by shutting down future interac-
tions. Programs in which the client does not need to frequently
communicate with the server are not suitable to our system.
Adversarial model. We place very few limiting assumptions on
the adversary’s abilities. First of all, we expect that, through reverse
engineering, he has achieved a complete understanding of our sys-
tem. We also expect him to have at his disposal all the common
static and dynamic analysis techniques that would be helpful in an-
alyzing and tampering with the code under his control, including
debuggers, tracers, disassemblers, decompilers, control- and data-
ﬂow analyses, code slicers, etc. The level of protection against
tampering that our system affords thus does not rely on security-
by-obscurity but rather on the server’s ability to deliver to the client
a steady stream of random code mutations, at a rate that exceeds
the client’s ability to reverse engineer. To ensure this, all of our
transformations are randomized, and many are based on hard static
analysis problems, such as the need to perform pointer analysis.
Security vs. performance trade-offs. Some of our code trans-
formations incur much overhead on the client side (we can, for
example, transform a function by applying multiple levels of ran-
domized interpretation), and some incur overhead on the server
side (generating streams of code variants for multiple clients). Our
system is therefore completely conﬁgurable, allowing the server to
trade-off between its ability to detect client tampering, client per-
formance, and server performance.
2. BACKGROUND AND RELATED WORK
Fred Cohen was the ﬁrst to suggest that code transformations
could be used to create a diverse set of programs which would be
less vulnerable to attack [8]. The intuition is that if every installa-
tion of, say, an operating system, is different, adversaries (human
intruders as well as automated malware) will ﬁnd it more difﬁcult
to reuse an attack that was successful against one variant when
attacking another. Fritz Hohl may have been the ﬁrst to suggest
(in the context of protecting mobile agents) time-limited protection
against MATE attacks [18]. The intuition is that an adversary who
is in complete control over his attack target may still be kept at
bay if his window of opportunity is sufﬁciently short; i.e.
if the
time needed to analyze and tamper with the target is strictly longer
than the time the target is of value to the attacker. In this paper we
combine these two ideas: we protect vulnerable code running on
an untrusted client in a distributed system by diversifying the code
and, by continuously and automatically replacing that code, we en-
sure that the client has a short time window to analyze and tamper
with it.
Code diversity. Since Cohen’s original paper, several systems
have been developed to randomize various aspects of computer
320
systems to protect against attacks: opcodes can be randomized
and then executed under emulation/interpretation [5, 1]; modules,
stacks, and heaps can be placed in random location in memory (Ad-
dress Space Layout Randomization, ASLR [31]); and code can be
reordered and stack frame layouts can be randomized [15]. Other
than ASLR, these ideas have not found their way into production
systems. The reasons are many, but include unacceptable perfor-
mance overhead and challenging software engineering problems,
such as how one would approach software testing, error reporting,
and perform updates on widely divergent programs.
Various forms of code randomization have also been used to
protect programs against MATE attacks, i.e.
to make programs
more difﬁcult to reverse engineer, tamper with, and redistribute il-
legally [9]. Common techniques include obfuscating code trans-
formations that reorder code to make it difﬁcult to analyze, tam-
perprooﬁng transformations that reorder code at runtime to make it
difﬁcult to modify [4], and software watermarking techniques that
embed unique identiﬁers in code, using compilers that randomize
code-generation choices [2]. Such MATE protection techniques
have mainly found applications in intellectual property protection
of computer programs and digital media.
MATE attack models. The fundamental difference between
MATE and other computer security scenarios is that a true MATE
adversarial model cannot assume an unassailable root-of-trust. Be-
cause the adversary has physical access to the software and hard-
ware of the device he tampers with, we have to assume that, given
enough time, all defenses will be compromised. This is true even if
the device is equipped with tamper-resistant hardware—experience
has shown that such devices are eminently vulnerable to invasive as
well as non-invasive attacks [3, 12]. This makes the problem of de-
fending against MATE attacks signiﬁcantly more challenging than
for more traditional security scenarios.
In analogy with Kerckhoffs’s principles for cryptography, in de-
signing defenses against MATE attacks we must assume every-
thing about our system is available to the attacker for study, includ-
ing primitive code transformations, strategies for combining such
transformations, and in fact, the source code of the entire system.
What is not available to the attacker, however, and the only leverage
we as defenders have, are the actual randomization seeds used in a
particular run of the system. This means that the attacker cannot
easily predict the order in which transformations are applied or the
location in the code where they are applied.
R-MATE defense strategies. The Trusted Platform Module
(TPM) chip has been suggested as a solution to the R-MATE prob-
lem, by ensuring that the untrusted client’s software and hardware
are approved and untampered [23]. This solution, however, has
been shown to be impractical, requiring comprehensive white-lists
of trusted software to be kept up-to-date at all times.
The CodeBender system [6] is the most closely related to our
work, in that it uses code updates for security. Unlike our sys-
tem, however, they rely on a single code transformation and require
clients and servers to both be completely shut down and restarted
for every update. For many distributed applications this is unac-
ceptable.
Also related to the work presented here is the work of Stoyle et
al. [29] who do run-time code updates, but in their case for servers,
not clients, and not for security. Haeberlen et al. [16] also detect
code tampering in distributed scenarios, but with a much more sig-
niﬁcant time delay until detection. The Pioneer system by Seshadri
et al. [27] detects code tampering in a system where exact sys-
tem speciﬁcations and latency of the network must be fully known,
whereas our system works on general systems and networks such
as the Internet.
// client.c
int __attribute((level(0))) g;
void foo() __attribute((level(9)));
void foo() {g++; RPC(2,g);}
int main() {foo();}
Primitives
interpret(...)
flatten(...)
opaque(...)
RPC_encode(...)
var_encode(...)
merge(...)
split(...)
rnd_args(...)
Diversity Graph
main
p
0
main
i
0,0
foo
p
0
foo
i
0,0
foo
i
0,1
p
0
g
CIL
Blocks
main0,0
g0
foo0,0
foo0,1
Server
gcc
Code
transformer
Diversity
scheduler
Strategies
temporal diversity
spatial diversity
semantic diversity
profile
foo 78%
main 22%
Block
scheduler
// server.c
for(;;){
recv(&rpc);
if (!verify(...))
punish();
switch (rcp.id){
case 1: ...
case 2: ...
}
}
④
22.so
global variables
level-0 functions
void init(){...}
void exec(){...}
②
RPC(2,42)
①
Client
Block
request/
receive
Block Bag
12.so
23.so
99.so
42.so
long gNew;
void init(){gNew=g+1;}
③
Overseer
Figure 1: Overview of the diversity system.
The work by Scandariato et al. [24] also attempts to solve the is-
sue of remote tamper-detection via software. They generate proofs
that the code has been untampered, potentially by checksums. Their
work doesn’t make modiﬁcations to the code of the target applica-
tion and obfucsations are not utilized. Falcarin et al. [14] break
a program into pieces and send each over individually when the
target requires them. The program is loaded into random memory
locations, but no obfuscation is done at the function level.
3. CORE MECHANISMS
Our system (shown in Figure 1) consists of a trusted server and
(one or more) untrusted clients. The input to the server is the code
to be executed on the client side (client.c), the server code it-
self that services requests from the client (server.c), and pro-
ﬁling data for the client. The server contains a set of code and
data blocks extracted from client.c, a set of primitives (block
transformations), a set of diversity strategies for combining such
primitives, and a diversity graph that expresses the relationships
between every generated block variant. The system can easily be
extended with new primitives.
The client holds (a subset of) the blocks that make up client.c
in its block bag. The adversary’s intent is to analyze and modify
some of the blocks in the bag to meet his attack goal. The server’s
intent is to detect when it happens, and then to punish the client
accordingly. The server’s strategy is to accomplish this by making
the block bag change continuously at runtime, forcing the client to
invalidate old block variants and add new ones, thereby stressing
his analytical ability.
Over the course of execution the client’s block bag will be ﬁlled
with a sequence of block working sets, (cid:2)w0, w1, . . .(cid:3). Each wi =
{. . . , fj,k, . . .} is a set of blocks which, taken together, forms a
complete variant of the original client.c. A block fj,k is a
variant of a function f with protocol version number j and imple-
mentation version number k. At any one point in time, the client
may only see a subset of the current working set, namely the set of
blocks it actually needs for execution. Moving from working set
wi to wi+1 normally only changes a subset of the blocks, i.e.
it
is the result of applying a few primitive code transformations to a
few of the blocks in wi. In Figure 1, for example, it appears that an
initial working set was w0 = {main0,0, foo0,0, g0} followed by a
transformation of foo, yielding a second generation working set
w1 = {main0,0, foo0,1, g0}.
There are three concurrent tasks occurring at runtime. The ﬁrst
task (① in Figure 1), is the “normal” client-server interaction that
would occur in an unprotected distributed application, where the
client executes code out if its block bag and makes remote pro-
cedure calls (RPC) to the server whenever this is needed in order
to make progress. The code in server.c continuously listens
for and services such requests. In the second task (②), the server’s
block scheduler supplies the client with blocks it requests or pushes
blocks to the client that it predicts the client may need.
In the
third task (③), ﬁnally, the server’s diversity scheduler informs the
client’s overseer process that a new update cycle is about to begin,
the client returns its current state (blocks on the current call stack,
which we will refer to as the active set) to the server and suspends
itself. The server then generates new block variants by selecting
appropriate primitives and strategies, invokes the code transformer
to apply these transformations, and, once done, wakes up the client
to inform it of invalidated blocks.
The code transformer and the primitives are built on top of the
CIL [20] system for C code transformations. CIL’s facilities for