Conﬁdentiality guarantees are stated as predicates over
the global
trace that describe the conditions in which a
protocol secret may become part of the attacker’s knowledge.
Suppose that each Noise participant A triggers an event
ConfSent A sid B sid’ M L before sending a fresh random secret
message M at conﬁdentiality level L to B, where sid and sid’
are the session indexes at A and B (note that sid’ is retrieved
from B’s ephemeral key by mean of a ghost function - an
abstract function that can only be used in speciﬁcations). Then,
the conﬁdentiality level C4 is written as the following:
1 ∀i j sid sid’ A B M.
2
3
4
5
6
7
(event at i ConfSent A sid B sid’ M 4 ∧
attacker knows at j M ∧ i ≤ j) =⇒
(∃ k. k < i ∧ (corrupt principal k A ∨
corrupt principal k B)) ∨
(∃ l. l ≤ j ∧ (corrupt session l A sid ∨
corrupt session l B sid’)
This predicate says that if a secret message M sent at time
i (and conﬁdentiality level C4) from a session sid at A to a
session sid’ at B, and M subsequently becomes known to the
adversary at time j, then either the static key of A or the static
key of B was compromised before the message was sent at i
or else one of the two ephemeral protocol session states (sid,
sid’) was compromised before j.
The strongest variant of forward secrecy provided by Noise
(C5) limits static key compromise to the recipient; that is, we
drop the disjunct on line 4 (corrupt principal k A) allowing the
sender A’s static key to be compromised at any time without
affecting the conﬁdentiality of M.
The trace properties for levels C1-C3 provide weaker forward
secrecy guarantees than C4 by restricting the compromise
scenarios in which conﬁdentiality is guaranteed. Their deﬁnition
is presented in the long version [36]. C0 provides no guarantees.
The overall security goal for our Noise speciﬁcation is to
prove that every global execution trace for every Noise protocol
satisﬁes the 7 trace properties corresponding to A1-A2 and C1-
C5. Hence, for each payload in a Noise protocol, we can look up
the conﬁdentiality and authentication level (from Appendix B)
and map it to the corresponding trace property to obtain the
precise security guarantee at sender and recipient.
Our way of encoding security goals as trace properties
(sometimes called correspondence assertions [37]) is similar
to how these goals are usually stated in protocol veriﬁcation
tools like ProVerif and Tamarin. Notably, these trace properties
are deﬁned independently of a speciﬁc Noise protocol or its
F* code and only refer to events triggered during protocol
execution. This allows our security goals to be independently
audited and compared with other formulations. Indeed, the
corresponding ProVerif query for authentication level A2 in
prior work [22] (see Section II-C) is almost identical (modulo
syntax) to our trace property. However, the ProVerif queries
for forward secrecy (C2-C5) look different from our trace
properties since they use phases (instead of timestamps) to
enforce an order between messages and compromise events.
Security Labels and Authentication Predicates. Having
stated our (trusted) security goals by mapping levels to trace
properties, the next step is to prove that our security-oriented
speciﬁcation preserves a global trace invariant that implies
these trace properties. This symbolic security proof in DY*
relies on two kinds of (untrusted) annotations: secrecy labels
and authentication predicates. These must be provided by the
programmer and are then veriﬁed by typechecking. Note that
labels are not the same as the levels previously introduced.
Each bytestring used in the protocol is annotated with a
secrecy label that indicates which sessions of which prin-
cipals can read these bytestrings. For example, the label
CanRead[P”alice”] means any session from Alice can read this
data; CanRead[S ”alice” sid] means only session sid at Alice
can read this data. Labels support union ((cid:116)) and intersection
operations ((cid:117)). The relation can ﬂow i l1 l2 indicates that at
timestamp i, l2 is stronger (more restrictive) than l1.
The labeled APIs of DY* impose a discipline guaranteeing
that secret data never ﬂows to public locations; for example,
AEAD encryption requires that the label of the encryption
key must be at least as strong as the label of the payload.
By relying on this discipline, a generic secrecy lemma
provided by DY* states that a Noise payload labeled at (say)
CanRead[S ”alice” sid; S ”bob” sid’] can only be known to the
attacker at timestamp i if the (ephemeral) session sid of ”alice”
or session sid’ of ”bob” was compromised before i, which
implies the level C5 strong forward secrecy invariant.
DY* also deﬁnes a set of authentication predicates that can
be instantiated for each protocol to enable the propagation of
security invariants through cryptographic calls and events. For
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
117
example, AEAD encryption has a pre-condition ae pred that
is intended to specify the conditions under which a message
is allowed to be encrypted; this predicate becomes a post-
condition for AEAD decryption. For Noise, we instantiate
ae pred to require that the sender must have triggered the
AuthSent and ConfSent events, and consequently obtain the
corresponding authentication guarantee at the recipient. Simi-
larly, an event predicate event pred states when an event may
be triggered; we instantiate it to encode our authentication
goals, requiring that
the event AuthReceived can only be
triggered if the corresponding authentication property holds.
By instantiating these predicates and verifying that our protocol
code still satisﬁes the resulting preconditions, we link protocol
session state invariants with cryptographic guarantees to prove
the target trace invariants for our Noise speciﬁcation.
Structure of the Proof. We structure the symbolic security
proof for our Noise speciﬁcation in several steps:
• Security Levels to Trace Invariants: we write a generic
function that maps any step of any Noise pattern to its cor-
responding level, as described in Figure 2, the full version
of which is in Appendix B. We then extend the global
trace invariant with the corresponding authentication or
conﬁdentiality trace properties for every Noise message
sent and received at each level.
• Security Levels to Key Secrecy Labels: we map each
payload security level to a predicate over the secrecy
label of the AEAD key used to encrypt the payload. We
show that, for each conﬁdentiality and authentication
level, the AEAD key secrecy label, the properties of
AEAD encryption, and the generic secrecy lemmas of
DY* together imply the global trace invariant.
• Handshake State Invariant: to each state of the hand-
shake, we associate a label and we prove that in all runs
of the protocol code, the resulting state matches its target
label. We then prove that the label of the handshake state
at a given protocol stage is always stronger than the target
key secrecy label for that stage of the protocol.
• High-Level API security: our high-level API always
preserves the handshake state invariant. In combination
with the above sequence of proof steps, this allows us
to prove that all reachable traces of our Noise protocol
speciﬁcation satisfy the level-based authentication and
conﬁdentiality guarantees of Noise. In particular, we prove
that these security guarantees are correctly propagated all
the way up to the user-facing API where they are exposed
as understandable security guarantees.
To achieve the proof above, we build a new security-oriented
speciﬁcation of Noise that is provably equivalent to our original
speciﬁcation, but is annotated with labels and logical invariants
that enable us to prove our security goals. The full proof
development is in F*; we describe key elements in [36].
VI. EVALUATION AND COMPARISON WITH RELATED WORK
Size of the Codebase. Figure 3 measures the size of the F*
codebase for our Noise protocol implementation. This covers
Component
Core Protocol (§III)
Device Management (§IV)
Session API (§IV)
F* spec
1,095
315
1,106
Low* code
15,506
6,410
13,184
DY* proof
1,792
475
3,681
Fig. 3. Size of the Noise* codebase, excluding whitespace and comments.
The total size of the codebase is 43kLOC.
Custom Cacophony
Pattern
X
NX
XX
IK
IKpsk2
Noise*
6677
5385
3917
3143
3138
N/A
N/A
N/A
N/A
3756
2272
2392
1593
1357
1194
NoiseExpl.
4955
4046
3149
2459
2431
Noise-C
5603
5065
3577
2822
N/A
Performance Comparison, in handshakes / second. Benchmark
Fig. 4.
performed on a Dell XPS13 laptop (Intel Core i7-10510U) with Ubuntu 18.04.
everything described in this paper. The core protocol code
contains the Noise messaging functions. Device management
includes long-term key storage and validation, including the
encrypted storage and veriﬁed in-memory data structures, such
as a linked list and an imperative map. Session API includes the
two successive state machines and the high-level user-facing
API code. For each component, we list the size of the high-
level speciﬁcation, the Low* code, and the DY* proof. All of
the code listed here was written for the purposes of this paper.
The total size is 43kLOC excluding whitespace and comments.
As a point of comparison, HACL* itself is 97kLOC, making
Noise* the second largest F* project in the literature. All this
code is open-sourced [33].
The Compiled C Library. Using the Noise* compiler, we
compile several specialized C implementations for each of the
59 Noise protocols. Representative code sizes are: 6,400 lines
of C code for IKpsk2, 5,900 LoC for XX, and 4,900 LoC
for X. Each Noise Protocol admits several implementations,
depending on the choice of primitives (e.g., SHA2-256 vs.
Blake2b), and the degree of optimization (e.g., Blake2b-portable
vs. Blake2-AVX2). As a proof of concept, we ran a batch job
that produced 472 implementations, out of several thousand
possible choices [33]; the result totals 3.2M lines of C code.
In practice, a typical user would choose a Noise protocol,
a set of primitives and a choice of optimization level, then
would download the corresponding C implementation from
Noise*, along with a custom distribution of HACL* containing
the relevant cryptographic primitives for the target platform,
to obtain a small high-performance protocol implementation.
Advanced users can extend our code-base and compile it in
different ways, to obtain any combination of Noise patterns.
Proof Overhead. A popular way of measuring the human
effort of veriﬁcation is the proof-to-code ratio: how many lines
of Low* code did we write for each line of C that we produced.
If we were to consider all 59 Noise patterns, this ratio would
drop to 0.2, without even taking into account all the ciphersuite
specializations we support. Conversely, if we only ever wanted
generated code for a single Noise protocol, then the ratio jumps
to nearly 7. A more realistic estimate is a proof-to-code ratio
of 1, based on the 44kLOC of C code produced for the ﬁve
patterns we actively test and benchmark. This is on par with (or
even better than) mature F* veriﬁcation projects like HACL*.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
118
Feature Comparison. We compare other Noise implementa-
tions in Figure 5.Noise* generates specialized code, and is a
compiler (C). WireGuard and Brontide are specialized, built-in
(B) implementations for the purposes of a single application.
Other implementations are interpreted (I). We count all patterns,
even those that do not appear in the Noise Protocol Framework.
An implementation offers a Lean API if it establishes a
clear abstraction boundary that strives to prevent user mistakes.
Details vary; here, the presence of a state machine with abstract
send and receive functions is enough to qualify as a “Lean
API”. WireGuard and Brontide are omitted, since they use
a single Noise protocol and therefore leverage that fact to
traverse abstraction boundaries.An implementation successfully
handles Early Data if it allows the user to use early message
payloads, while preventing conﬁdentiality issues one way or
another. WireGuard uses a custom scheme that has been
carefully audited; Brontide prevents sending payloads altogether
before the handshake is ﬁnished.An implementation with Key
Validation provides a way of validating keys upon receiving
them, e.g., by calling a user-provided function. Finally, an API
with Key Storage provides a long-term, secure way of storing
and retrieving preshared or remote static keys.
Code sizes vary according to the feature set and the
language used. For Noise*, we list the average size of a
single, specialized C implementation. Noise* is larger than
e.g., Cacophony or Noise Explorer, because of a more verbose
language (C) and a larger feature set. Noise* is smaller than
Noise-C or Noise Java. Our choice of generating C code will,
we hope, facilitate integration in existing codebases. We remark
that not all implementations support the same cipher suites;
this depends on the choice of the underlying cryptographic
library. We are here limited by e.g., the absence of Curve448
in HACL*; fortunately, none of the applications we studied
require it (this includes WhatsApp, not counted in this table).
Performance comparison. We compare the speed of our code
with other Noise implementations in Figure 4. We compiled
the C code for Noise-C and Noise* using gcc 7.5.0. We used
QEMU to run WireGuard for benchmarking, the Criterion
0.3.3 crate to benchmark the Rust code and the Criterion
1.5.9.0 package to benchmark the Haskell code. We observe
that our Noise* implementations beat all other general Noise
libraries for handshakes per second. Of these, Noise-C is the
closest in speed to Noise* and the performance difference is
dominated by DH computations. The IKpsk2 implementation
from WireGuard, which also uses HACL* for DH, incorporates
careful kernel-level optimizations and is consequently 20%
faster than the user-space Noise* code.
Security Analysis Comparison. Figure 6 compares our
symbolic security analysis with prior formal proofs of Noise
protocols. The closest related works are Noise Explorer and
Vacarme, which both analyze (almost all) Noise protocols
against Dolev-Yao attackers. Noise Explorer [22] compiles
each handshake pattern to a ProVerif model and veriﬁes it
against a series of reachability queries corresponding to the
different Noise secrecy and authenticity levels. The analysis of
Language
Patterns
Data
Valid.
API
St.
Early
Lean
Key
Key
Y
Y
Y
N
N
Y
Y
N
N
N
Y
-
N
N
N
N
N
Y
N
N
-
N
N
N
Y
N
N
-
N
N
-
N
Implementation
Noise*
Cacophony
Noise-C
WireGuard
Snow
Noise Explorer
Brontide
Noise Java
˜5000
˜1800
˜9000
˜2700
˜3400
˜900
˜750
˜8000
Fig. 5. Noise Implementations Comparison. For Type: C = compiler, I =
interpreter, B = builtin, i.e., a custom implementation.
C
Haskell
C
C
Rust
Rust/Go
Go
Java
Type
C
I
I
B
I
I
B
I
59
59
40
1
59
50
1
40
Size
Code
Verif.
Y
N
N
N
N
N
N
N
Project
Noise*
Vacarme [21]
Noise Explorer [22]
fACCE [23]
Dowling et al. [38]
WireGuard-CV [9]
Model
Tool
F*
S
Tamarin
S
S
ProVerif
C Manual
C Manual
C
CryptoVerif
#
59
53
57
8
1
1
Size
Gen
Patterns
Model
Code
Y