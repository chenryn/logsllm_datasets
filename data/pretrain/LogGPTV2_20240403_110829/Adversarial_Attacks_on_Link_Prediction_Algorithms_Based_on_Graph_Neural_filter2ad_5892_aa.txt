title:Adversarial Attacks on Link Prediction Algorithms Based on Graph Neural
Networks
author:Wanyu Lin and
Shengxiang Ji and
Baochun Li
Adversarial Attacks on Link Prediction Algorithms
Based on Graph Neural Networks
Wanyu Lin
University of Toronto
PI:EMAIL
Shengxiang Ji
University of Toronto
PI:EMAIL
Baochun Li
University of Toronto
PI:EMAIL
ABSTRACT
Link prediction is one of the fundamental problems for graph-
structured data. However, a number of applications of link predic-
tion, such as predicting commercial ties or memberships within a
criminal organization, are adversarial, with another party aiming
to minimize its effectiveness by manipulating observed informa-
tion about the graph. In this paper, we focus on the feasibility of
mounting adversarial attacks against link prediction algorithms
based on graph neural networks. We first propose a greedy heuris-
tic that exploits incremental computation to find attacks against
a state-of-the-art link prediction algorithm, called SEAL. We then
design an efficient variant of this algorithm that incorporates the
link formation mechanism and Œ•-decaying heuristic theory to de-
sign more effective adversarial attacks. We used real-world datasets
and performed an extensive array of experiments to show that the
performance of SEAL is negatively affected by a significant margin.
More importantly, our experimental results have shown that our ad-
versarial attacks mounted based on SEAL can be readily transferred
to several existing link prediction heuristics in the literature.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Network security.
KEYWORDS
Adversarial Attacks; Graph Neural Networks; Link Prediction
ACM Reference Format:
Wanyu Lin, Shengxiang Ji, and Baochun Li. 2020. Adversarial Attacks on
Link Prediction Algorithms Based on Graph Neural Networks. In Proceedings
of the 15th ACM Asia Conference on Computer and Communications Security
(ASIA CCS ‚Äô20), October 5‚Äì9, 2020, Taipei, Taiwan. ACM, Taipei, Taiwan,
11 pages. https://doi.org/10.1145/3320269.3384750
1 INTRODUCTION
Link prediction refers to the problem of identifying the existence
of a link between two nodes in a network [22]. It is an important
problem with practical applications in a diverse set of research
This research was supported in part by the NSERC Discovery Research Program.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ‚Äô20, October 5‚Äì9, 2020, Taipei, Taiwan
¬© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/06...$15.00.
https://doi.org/10.1145/3320269.3384750
fields, including friend recommendation in social networks [14],
prediction and ranking algorithms in complex networks (e.g., co-
authorship graphs) [25], and criminal networks [7]. In criminal
networks, for example, links between entities indicate that po-
tential connections between these entities exist, such as having
commercial ties or memberships in the same criminal organization.
These potential links provide useful underlying information about
network structures, and may be readily detected by link prediction
algorithms.
A large number of link prediction algorithms have been intro-
duced in the literature. Existing approaches can be categorized into
two classes. The first is heuristic methods which use predefined
similarity functions to measure the likelihood of links [2, 17, 19, 22].
Although they worked well in practice, these heuristics make strong
assumptions on when links may exist, and none of them performs
consistently well across all complex networks [22]. The second
is learning-based methods, which automatically learn a mapping
function from the network [3, 31, 33, 34]. Specifically designed
for graph-structured data, graph neural networks have shown to
achieve state-of-the-art performance when solving link prediction
problems [34].
However, as effective as they may be, recent studies have shown
that neural networks, in general, are vulnerable to malicious adver-
saries, who are able to craft specific sets of adversarial examples so
that neural network models will generate desired outputs of their
choice. Typically, these selected adversarial inputs are derived from
regular inputs by introducing minor ‚Äî yet carefully selected ‚Äî per-
turbations. Such adversarial attacks have been widely demonstrated
with high success rates in the contexts of image recognition [8] and
malware detection [15]. Interestingly, it remains unclear how effec-
tive such adversarial attacks may be for link prediction algorithms
based on graph neural networks.
Adversarial perturbations on the graphs underlying complex
networks, especially on social networks, are easily conceivable and
quite common in practice. As link prediction may reveal connec-
tions which associated parties prefer to keep hidden ‚Äì either for
the sake of profit, or to evade the law enforcement. For example,
in online recommendation systems, fraudsters frequently manip-
ulate online reviews to affect reader opinion in recommendation
networks [12]. In a criminal network, criminals may try to hide
their links to bypass the detection of criminal groups [7, 23].
In order to systematically study the ability of an ‚Äúadversary"
to manipulate link prediction, we mount adversarial attacks on
link prediction via applying existing evasion attacks in adversarial
machine learning. For this purpose, we first formulate the problem
of crafting adversarial examples to deceive GNN-based link predic-
tion models as an optimization problem. In particular, we focus on
evasion attacks against a state-of-the-art link prediction algorithm,
called SEAL [34], which learns missing/unobserved links from lo-
cal enclosing subgraphs. Essentially, SEAL is proposed based on
a Œ•-decaying heuristic theory, which shows that graph structure
features can be well approximated from the local subgraphs and
is able to unify a wide range of heuristics in a single framework.
In this regard, we can envision that the mounted attacks may be
transferred to the heuristics which can be well incorporated into
the Œ•-decaying heuristic framework.
Attacking the graph in a complex network effectively involves
several non-trivial challenges. First, due to the inherent learning
characteristics of SEAL, our problem of crafting perturbations on
graph data contains dependent variables as the adjacency matrix
and node information matrix are coupled, and existing solutions
of gradient-based approaches are not applicable. Second, unlike
existing adversarial attacks in the domain of image recognition [8]
consisting of continuous data, graph-structured data are typically
discrete. With the data‚Äôs discreteness and the large number of model
parameters of SEAL, solving the optimization problem for a com-
plex network graph is highly challenging. Finally, adversarial per-
turbations ‚Äî such as adversarial images in the context of image
recognition ‚Äî should not be noticeable by humans in general. Yet,
in complex network graphs, the notion of ‚Äúunnoticeable changes‚Äù
needs to be clearly defined first.
Inspired by Zugner et al. [37], we first propose a greedy heuristic
that perturbs the network graph incrementally by manipulating
the graph structure. We then propose an efficient variant that uti-
lizes the link formation mechanism and the Œ•-decaying heuristic
theory. To validate the effectiveness of our crafted attacks, we use
real-world datasets to perform an extensive array of experiments.
Our results have shown convincing evidence that the performance
of link prediction in SEAL has been negatively affected by a signifi-
cant margin using our adversarial attack, even with very limited
knowledge of complex network graphs. More importantly, our ex-
perimental results have also shown that our adversarial attack can
be readily transferred to several link prediction heuristics in the
literature.
The remainder of this paper is organized as follows. We first
present some preliminary background in Sec. 2. Our attack model
and problem formulation are introduced in Sec. 3. In Sec. 4, we
present the details of our algorithm designed to craft adversarial
examples for link prediction effectively and efficiently. In Sec. 5,
we present an extensive array of experimental results to evaluate
the performance of our approach. Sec. 6 discusses related work and
Sec. 7 concludes this paper.
for (ùë•, ùë¶) is the subgraph that induced from G by the set of nodes
Œì‚Ñé(ùë•) ‚à™ Œì‚Ñé(ùë¶).
Given a graph containing a set of observed links, the goal of link
prediction is to learn a function ùêπ : V √ó V ‚Üí C that maps the link
existence between two given nodes (ùë•, ùë¶) ‚àà V √ó V to a class ùëê in
C = {0, 1}, where ùëê = 0 implies that the link does not exist (called a
negative link), and ùëê = 1 implies that the link exists (called a positive
link). For clarity, the link to be predicted is called the target link
throughout this paper.
2.1 Heuristics for Link Prediction
A large category of link prediction algorithms is based on some
heuristics that compute the proximity between nodes to predict
whether they are likely to have a link. In this category, each heuristic
is predefined and has a strong assumption on when two nodes are
likely to have a link. Popular heuristics including common neigh-
bors (CN), Jaccard [20], preference attachment (PA) [4], Adam-Adar
(AA) [2], resource allocation (RA) [36], Katz index [19], PAGER-
ANK [6], and SimRank [17]. Table 1 summarizes eight popular
heuristics and associated heuristic formula, which will be used to
analyze the transferability of our mechanisms. Note that due to
the large literature, we could not analyze to every heuristic, but to
some popular ones.
Table 1: Popular Heuristics for Link Prediction
Algorithm
Heuristic Formula
|Œì(ùë•) ‚à© Œì(ùë¶) |
|Œì(ùë•)‚à©Œì(ùë¶)|
|Œì(ùë•)‚à™Œì(ùë¶)|
common neighbors (CN)
Jaccard [20]
preference attachment (PA) [4]
Adam-Adar (AA) [2]
resource allocation (RA) [36]
Katz index [19]
PAGERANK [6]
SimRank [17]
ùõæ
|Œì(ùë•) | √ó |Œì(ùë¶) |
1
ùëß‚ààŒì(ùë•)‚à©Œì(ùë¶)
ùëß‚àà{Œì(ùë•)‚à©Œì(ùë¶)}
‚àû
log |Œì(ùëß)|
|Œì(ùëß)|
ùëô=1 ùõΩùëô |ùëùùëéùë°‚Ñé(ùë•, ùë¶) = ùëô |
ùëé‚ààŒì(ùë•)ùëè‚ààŒì(ùë¶) ùë†ùëêùëúùëüùëí(ùëé,ùëè)
ùëûùë• ùë¶ + ùëûùë¶ùë•
|Œì(ùë•)|√ó|Œì(ùë¶)|
1
Note: Œì(ùë•) and Œì(ùë¶) denote the sets of ùë• and ùë¶‚Äôs one-
hop neighboring nodes, respectively; ùõΩ is a damping factor;
|ùëùùëéùë°‚Ñé(ùë•, ùë¶) = ùëô | represents the number of length-ùëô paths
between nodes ùë• and ùë¶; ùëûùë• ùë¶ is the station probability dis-
tribution of ùë¶ under the random walk from ùë•.
2 PRELIMINARIES
Throughout this paper, we consider link prediction task in a single
large graph. Formally, let G = (V, E) be an undirected graph,
where V = {ùë£1, ùë£2, ¬∑ ¬∑ ¬∑ , ùë£ùëÅ } is the set of nodes, and E ‚äÜ V √ó V
is the set of observed links/edges. Its observed global adjacency
matrix is A, where Aùëñ,ùëó = 1 if (ùëñ, ùëó) ‚àà E and Aùëñ,ùëó = 0 otherwise.
For any nodes ùë•, ùë¶ ‚àà V, let Œì(ùë•) be the 1-hop neighbors of ùë•, Œìùëë(ùë•)
be the set of nodes whose distance to ùë• is shorter than or equal to
ùëë, ùëë = 1, 2, ¬∑ ¬∑ ¬∑ and ùëë(ùë•, ùë¶) be the shortest path distance between ùë•
and ùë¶. Given two nodes ùë•, ùë¶ ‚àà V, the ‚Ñé-hop enclosing subgraph
2.2 Graph Neural Networks
Graph neural networks (GNNs) represent a new type of neural
networks that are capable of learning from graphs. A graph neural
network for graph classification typically consists of two main com-
ponents: graph convolutional layers that extract local substructure
features for individual nodes, and a graph aggregation layer that
aggregates node-level features into a graph-level feature vector.
Deep graph neural networks (DGNN) are GNNs equipped with
propagation-based graph convolution layers. They have been shown
to achieve state-of-the-art graph classification performance on var-
ious benchmark datasets [35]. The aggregation layer in a DGNN
is a SortPooling layer, which sorts the final node states to obtain
an isomorphism invariant node ordering, and enables a traditional
1-D convolutional neural network on the node sequence. Its last
layer is a fully-connected layer followed by a log-softmax layer.
2.3 The SEAL Framework
In this paper, we focus on the problem of crafting adversarial exam-
ples for link prediction based on graph neural networks. In particu-
lar, we consider a state-of-the-art link prediction framework, called
SEAL [34], which learns heuristics from local enclosing subgraphs
using a graph neural network. The foundation of this framework
is a Œ•-decaying heuristic theory, which shows that local enclosing
subgraphs reserve rich information for link existence prediction.
Particularly in [34], Zhang et al. proposed a Œ•-decaying heuristic
theory that is able to unify a wide range of heuristics in a single
framework, and proved that several existing heuristics, including
Katz index [19], PAGERANK [6], and SimRank [17] can be well ap-
proximated from local enclosing subgraphs. The Œ•-decaying heuris-
tic for (ùë•, ùë¶) has the following form:
‚àû
ùëô=1
H(ùë•, ùë¶) = ùúÇ
Œ•ùëô ùëì (ùë•, ùë¶, ùëô)
(1)
where Œ• ‚àà (0, 1) is a decaying factor, ùúÇ > 0 is either a constant or
a function of Œ• bounded by a constant, ùëì is a nonnegative function
under the given network.
The Œ•-decaying heuristic theory for link prediction: Given
a Œ•-decaying heuristic, if ùëì (ùë•, ùë¶, ùëô) satisfies the following two con-
ditions:
‚Ä¢ ùëì (ùë•, ùë¶, ùëô) ‚â§ ùúÜùëô where ùúÜ  0.
Then the Œ•-decaying heuristic for (ùë•, ùë¶) can be approximated
from the ‚Ñé-hop enclosing subgraph of (ùë•, ùë¶) and the approximation
error decreases at least exponentially with ‚Ñé.
Following this theory, as illustrated in [34], several existing
heuristics inherently share the same Œ•-decaying heuristic form,
which implies that from the small enclosing subgraphs extracted
around links, it is able to approximate a wide range of heuristics
with small errors.
In this regard, the SEAL framework is designed to automatically
learn a ‚Äòheuristic‚Äô function that maps local enclosing subgraph pat-
terns to link existence instead of using predefined ones. It contains
three stages: extracting an ‚Ñé-hop local subgraph, either for a train-
ing or a testing link; constructing the node information matrix (ùëã)
for each link, and then learning with a graph neural network. The
input of the graph neural network consists of (ùê¥, ùëã) tuples, where
ùê¥ represents the adjacency matrix of the subgraph, and the output
of the graph neural network consists of link labels ùëê. The optimal
model parameters ùëä are learned by minimizing the cross-entropy
on the output of the training links. At test time, the link existence