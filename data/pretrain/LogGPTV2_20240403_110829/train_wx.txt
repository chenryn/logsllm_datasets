.br epoll_create ()
was added to the kernel in version 2.6.
library support is provided in glibc starting with version 2.3.2.
.pp
.\" to be precise: kernel 2.5.44.
.\" the interface should be finalized by linux kernel 2.5.66.
.br epoll_create1 ()
was added to the kernel in version 2.6.27.
library support is provided in glibc starting with version 2.9.
.sh conforming to
.br epoll_create ()
and
.br epoll_create1 ()
are linux-specific.
.sh notes
in the initial
.br epoll_create ()
implementation, the
.i size
argument informed the kernel of the number of file descriptors
that the caller expected to add to the
.b epoll
instance.
the kernel used this information as a hint for the amount of
space to initially allocate in internal data structures describing events.
(if necessary, the kernel would allocate more space
if the caller's usage exceeded the hint given in
.ir size .)
nowadays,
this hint is no longer required
(the kernel dynamically sizes the required data structures
without needing the hint), but
.i size
must still be greater than zero,
in order to ensure backward compatibility when new
.b epoll
applications are run on older kernels.
.sh see also
.br close (2),
.br epoll_ctl (2),
.br epoll_wait (2),
.br epoll (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/catanh.3
.\" copyright 2005, 2012, 2016 michael kerrisk 
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under the gpl.
.\" %%%license_end
.\"
.\" 2008-12-04, petr baudis : document open_wmemstream()
.\"
.th open_memstream 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
open_memstream, open_wmemstream \-  open a dynamic memory buffer stream
.sh synopsis
.nf
.b #include 
.pp
.bi "file *open_memstream(char **" ptr ", size_t *" sizeloc );
.pp
.b #include 
.pp
.bi "file *open_wmemstream(wchar_t **" ptr ", size_t *" sizeloc );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br open_memstream (),
.br open_wmemstream ():
.nf
    since glibc 2.10:
        _posix_c_source >= 200809l
    before glibc 2.10:
        _gnu_source
.fi
.sh description
the
.br open_memstream ()
function opens a stream for writing to a memory buffer.
the function dynamically allocates the buffer,
and the buffer automatically grows as needed.
initially, the buffer has a size of zero.
after closing the stream, the caller should
.br free (3)
this buffer.
.pp
the locations pointed to by
.ir ptr
and
.i sizeloc
are used to report, respectively,
the current location and the size of the buffer.
the locations referred to by these pointers are updated
each time the stream is flushed
.rb ( fflush (3))
and when the stream is closed
.rb ( fclose (3)).
these values remain valid only as long as the caller
performs no further output on the stream.
if further output is performed, then the stream
must again be flushed before trying to access these values.
.pp
a null byte is maintained at the end of the buffer.
this byte is
.i not
included in the size value stored at
.ir sizeloc .
.pp
the stream maintains the notion of a current position,
which is initially zero (the start of the buffer).
each write operation implicitly adjusts the buffer position.
the stream's buffer position can be explicitly changed with
.br fseek (3)
or
.br fseeko (3).
moving the buffer position past the end
of the data already written fills the intervening space with
null characters.
.pp
the
.br open_wmemstream ()
is similar to
.br open_memstream (),
but operates on wide characters instead of bytes.
.sh return value
upon successful completion,
.br open_memstream ()
and
.br open_wmemstream ()
return a
.i file
pointer.
otherwise, null is returned and
.i errno
is set to indicate the error.
.sh versions
.br open_memstream ()
was already available in glibc 1.0.x.
.br open_wmemstream ()
is available since glibc 2.4.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br open_memstream (),
.br open_wmemstream ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2008.
these functions are not specified in posix.1-2001,
and are not widely available on other systems.
.sh notes
there is no file descriptor associated with the file stream
returned by these functions
(i.e.,
.br fileno (3)
will return an error if called on the returned stream).
.sh bugs
in glibc before version 2.7, seeking past the end of a stream created by
.br open_memstream ()
does not enlarge the buffer; instead the
.br fseek (3)
call fails, returning \-1.
.\" http://sourceware.org/bugzilla/show_bug.cgi?id=1996
.sh examples
see
.br fmemopen (3).
.sh see also
.br fmemopen (3),
.br fopen (3),
.br setbuf (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/strchr.3
.so man3/unlocked_stdio.3
.so man3/unlocked_stdio.3
.\" copyright 2003 walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.th putgrent 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
putgrent \- write a group database entry to a file
.sh synopsis
.nf
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int putgrent(const struct group *restrict " grp \
", file *restrict " stream );
.fi
.sh description
the
.br putgrent ()
function is the counterpart for
.br fgetgrent (3).
the function writes the content of the provided
.ir "struct group"
into the
.ir stream .
the list of group members must be null-terminated or null-initialized.
.pp
the
.ir "struct group"
is defined as follows:
.pp
.in +4n
.ex
struct group {
    char   *gr_name;      /* group name */
    char   *gr_passwd;    /* group password */
    gid_t   gr_gid;       /* group id */
    char  **gr_mem;       /* group members */
};
.ee
.in
.sh return value
the function returns zero on success, and a nonzero value on error.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br putgrent ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
this function is a gnu extension.
.sh see also
.br fgetgrent (3),
.br getgrent (3),
.br group (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/gethostbyname.3
.\" copyright (c) 2014, theodore ts'o 
.\" copyright (c) 2014,2015 heinrich schuchardt 
.\" copyright (c) 2015, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  the author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th getrandom 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
getrandom \- obtain a series of random bytes
.sh synopsis
.nf
.b #include 
.pp
.bi "ssize_t getrandom(void *"buf ", size_t " buflen ", unsigned int " flags );
.fi
.sh description
the
.br getrandom ()
system call fills the buffer pointed to by
.i buf
with up to
.i buflen
random bytes.
these bytes can be used to seed user-space random number generators
or for cryptographic purposes.
.pp
by default,
.br getrandom ()
draws entropy from the
.i urandom
source (i.e., the same source as the
.ir /dev/urandom
device).
this behavior can be changed via the
.i flags
argument.
.pp
if the
.i urandom
source has been initialized,
reads of up to 256 bytes will always return as many bytes as
requested and will not be interrupted by signals.
no such guarantees apply for larger buffer sizes.
for example, if the call is interrupted by a signal handler,
it may return a partially filled buffer, or fail with the error
.br eintr .
.pp
if the
.i urandom
source has not yet been initialized, then
.br getrandom ()
will block, unless
.b grnd_nonblock
is specified in
.ir flags .
.pp
the
.i flags
argument is a bit mask that can contain zero or more of the following values
ored together:
.tp
.b grnd_random
if this bit is set, then random bytes are drawn from the
.i random
source
(i.e., the same source as the
.ir /dev/random
device)
instead of the
.i urandom
source.
the
.i random
source is limited based on the entropy that can be obtained from environmental
noise.
if the number of available bytes in the
.i random
source is less than requested in
.ir buflen ,
the call returns just the available random bytes.
if no random bytes are available, the behavior depends on the presence of
.b grnd_nonblock
in the
.i flags
argument.
.tp
.b grnd_nonblock
by default, when reading from the
.ir random
source,
.br getrandom ()
blocks if no random bytes are available,
and when reading from the
.ir urandom
source, it blocks if the entropy pool has not yet been initialized.
if the
.b grnd_nonblock
flag is set, then
.br getrandom ()
does not block in these cases, but instead immediately returns \-1 with
.i errno
set to
.br eagain .
.sh return value
on success,
.br getrandom ()
returns the number of bytes that were copied to the buffer
.ir buf .
this may be less than the number of bytes requested via
.i buflen
if either
.br grnd_random
was specified in
.ir flags
and insufficient entropy was present in the
.ir random
source or the system call was interrupted by a signal.
.pp
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eagain
the requested entropy was not available, and
.br getrandom ()
would have blocked if the
.b grnd_nonblock
flag was not set.
.tp
.b efault
the address referred to by
.i buf
is outside the accessible address space.
.tp
.b eintr
the call was interrupted by a signal
handler; see the description of how interrupted
.br read (2)
calls on "slow" devices are handled with and without the
.b sa_restart
flag in the
.br signal (7)
man page.
.tp
.b einval
an invalid flag was specified in
.ir flags .
.tp
.b enosys
the glibc wrapper function for
.br getrandom ()
determined that the underlying kernel does not implement this system call.
.sh versions
.br getrandom ()
was introduced in version 3.17 of the linux kernel.
support was added to glibc in version 2.25.
.sh conforming to
this system call is linux-specific.
.sh notes
for an overview and comparison of the various interfaces that
can be used to obtain randomness, see
.br random (7).
.pp
unlike
.ir /dev/random
and
.ir /dev/urandom ,
.br getrandom ()
does not involve the use of pathnames or file descriptors.
thus,
.br getrandom ()
can be useful in cases where
.br chroot (2)
makes
.i /dev
pathnames invisible,
and where an application (e.g., a daemon during start-up)
closes a file descriptor for one of these files
that was opened by a library.
.\"
.ss maximum number of bytes returned
as of linux 3.19 the following limits apply:
.ip * 3
when reading from the
.ir urandom
source, a maximum of 33554431 bytes is returned by a single call to
.br getrandom ()
on systems where
.i int
has a size of 32 bits.
.ip *
when reading from the
.ir random
source, a maximum of 512 bytes is returned.
.ss interruption by a signal handler
when reading from the
.i urandom
source
.rb ( grnd_random
is not set),
.br getrandom ()
will block until the entropy pool has been initialized
(unless the
.br grnd_nonblock
flag was specified).
if a request is made to read a large number of bytes (more than 256),
.br getrandom ()
will block until those bytes have been generated and transferred
from kernel memory to
.ir buf .
when reading from the
.i random
source
.rb ( grnd_random
is set),
.br getrandom ()
will block until some random bytes become available
(unless the
.br grnd_nonblock
flag was specified).
.pp
the behavior when a call to
.br getrandom ()
that is blocked while reading from the
.i urandom
source is interrupted by a signal handler
depends on the initialization state of the entropy buffer
and on the request size,
.ir buflen .
if the entropy is not yet initialized, then the call fails with the
.b eintr
error.
if the entropy pool has been initialized
and the request size is large
.ri ( buflen "\ >\ 256),"
the call either succeeds, returning a partially filled buffer,
or fails with the error
.br eintr .
if the entropy pool has been initialized and the request size is small
.ri ( buflen "\ <=\ 256),"
then
.br getrandom ()
will not fail with