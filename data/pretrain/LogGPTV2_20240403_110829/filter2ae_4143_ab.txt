        public Wrapper wrapper = null;
        public boolean jspWildCard = false;
    }
所以我们可以通过反射对`development`的属性修改，下面代码参考[Tomcat容器攻防笔记之JSP金蝉脱壳](https://www.anquanke.com/post/id/224698)
既然已经分析好了，我们做一个测试， **当我们第二次请求我们的脚本**`development`  
**的属性值已经被改为false,即使我们删除对应的**`jsp\java\Class` **文件，仍然还可以还可以正常请求shell。**
**那么经过修改后会不会导致后来上传的jsp文件都无法执行的问题呢？**
不会，因为每一个JSP文件，只有已经编译并且注册为Servlet后，`mustCompile`属性才会为False，默认为True，并且`mustCompile`也是由`volatile`修饰并且在`synchronized`加锁的代码块中，只有同一个`jspServletWrapper`的`mustCompile`的修改在下次请求时还有效。当然也不是说完全没有影响，  
**如果我们想修改一个已经加载为**`Servlet` **的JSP文件，即使修改了也不会生效。**
    if (options.getDevelopment() || mustCompile) {
                    synchronized (this) {
                        if (options.getDevelopment() || mustCompile) {
                            ctxt.compile();
                            mustCompile = false;
                        }
                    }
### 绕过方法二
下一个我们有机会绕过的点在compile中，如果我们能让`isOutDated`返回false，也可以达到绕过的目的。
    public void compile() throws JasperException, FileNotFoundException {
            createCompiler();
            if (jspCompiler.isOutDated()) {
             ...
            }
        }
注意看下面的代码,在`isOutDated`中，当满足下面的条件则会返回false。`jsw`中保存的是`jspServletWarpper`对象，所以是不为null的，并且`modificationTestInterval`默认值是4也满足条件，所以我们现在要做的就是让`modificationTestInterval*1000`大于`System.currentTimeMillis()`,所以  
**只要将**`**modificationTestInterval**` **修改为一个比较大的值也可以达到绕过的目的。**
    public boolean isOutDated(boolean checkClass) {
            if (jsw != null
                    && (ctxt.getOptions().getModificationTestInterval() > 0)) {
                if (jsw.getLastModificationTest()
                        + (ctxt.getOptions().getModificationTestInterval() * 1000) > System.currentTimeMillis()) {
                    return false;
                }
            }
`modificationTestInterval`也保存在`options`属性中，所以修改的方法和方法一类似，就不罗列代码了。
    public final class EmbeddedServletOptions implements Options {
    ...
       private int modificationTestInterval = 4;
        ...
    }
## 查杀情况分析
### tomcat-memshell-scanner
这款工具会Dump出所有保存在`servletMappings`中的`Servlet`的信息，不过我们的JSPServlet并没有保存在`servletMappings`中，而是在`JspRuntimeContext#jsps`字段中，因此根本查不到。
### copagent
JSP本质上也就是`Servlet`，编译好的Class继承了`HttpJspBase`，类图如下所示。
#### copagent流程分析
`copagent`首先获取所有已经加载的类，并创建了几个数组。
  * `riskSuperClassesName`中保存了`HttpServlet`，用于获取Servlet，因为我们注册的Servlet会直接或者间接继承`HttpServlet`
  * `riskPackage`保存了一些恶意的包名，比如冰蝎的包名为`net.rebeyond`，使用冰蝎连接webshell时会将自己的恶意类加载到内存，而这个恶意类也是以`net.rebeyond`为包名的
  * `riskAnnotations`保存了SpringMVC中注解注册Controller的类型，显然是为了抓出所有SpringMVC中通过注解注册的Controller
    private static synchronized void catchThief(String name, Instrumentation ins){
       ...
            List> resultClasses = new ArrayList>();
            // 获得所有已加载的类及类名
            Class[] loadedClasses = ins.getAllLoadedClasses();
            LogUtils.logit("Found All Loaded Classes    : " + loadedClasses.length);
            List loadedClassesNames = new ArrayList();
            for(Class cls: loadedClasses){
                loadedClassesNames.add(cls.getName());
            }
       ...
            // 实现的可能具有 web shell 功能的父类名
            List riskSuperClassesName = new ArrayList();
            riskSuperClassesName.add("javax.servlet.http.HttpServlet");
            // 黑名单拦截
            List riskPackage = new ArrayList();
            riskPackage.add("net.rebeyond.");
            riskPackage.add("com.metasploit.");
            // 风险注解
            List riskAnnotations = new ArrayList();
            riskAnnotations.add("org.springframework.stereotype.Controller");
          riskAnnotations.add("org.springframework.web.bind.annotation.RestController");      riskAnnotations.add("org.springframework.web.bind.annotation.RequestMapping");
            riskAnnotations.add("org.springframework.web.bind.annotation.GetMapping");
            riskAnnotations.add("org.springframework.web.bind.annotation.PostMapping");
            riskAnnotations.add("org.springframework.web.bind.annotation.PatchMapping");
            riskAnnotations.add("org.springframework.web.bind.annotation.PutMapping");
            riskAnnotations.add("org.springframework.web.bind.annotation.Mapping");
        ...
下面代码完成主要的检测逻辑，首先会检测包名和SpringMVC注解的类，检测到则添加到`resultClasses`中，并且修改`not_found`标志位为False，表示不检测`Servelt/Filter/Listener`类型的shell。
    for(Class clazz: loadedClasses){
                    Class target = clazz;
                    boolean not_found = true;
          //检测包名是否为恶意包名，如果是则设置not_found为false，代表已经被shell连接过了，跳过后面Servlet和Filter内存马部分的检测并Dump出恶意类的信息。
                    for(String packageName: riskPackage){
                        if(clazz.getName().startsWith(packageName)){
                            resultClasses.add(clazz);
                            not_found = false;
                            ClassUtils.dumpClass(ins, clazz.getName(), false, Integer.toHexString(target.getClassLoader().hashCode()));
                            break;
                        }
                    }
        //判断是否使用SpringMVC的注解注册Controller，如果是则Dump出使用注解的Controller的类的信息
                    if(ClassUtils.isUseAnnotations(clazz, riskAnnotations)){
                        resultClasses.add(clazz);
                        not_found = false;
                        ClassUtils.dumpClass(ins, clazz.getName(), false, Integer.toHexString(target.getClassLoader().hashCode()));
                    }
          //检测Servelt/Filter/Listener类型Webshell
          if(not_found){
                        // 递归查找
                        while (target != null && !target.getName().equals("java.lang.Object")){
                            // 每次都重新获得目标类实现的所有接口
                            interfaces = new ArrayList();
                            for(Class cls: target.getInterfaces()){
                                interfaces.add(cls.getName());
                            }
                            if( // 继承危险父类的目标类
                                    (target.getSuperclass() != null && riskSuperClassesName.contains(target.getSuperclass().getName())) ||
                                            // 实现特殊接口的目标类
                                            target.getName().equals("org.springframework.web.servlet.handler.AbstractHandlerMapping") ||
                                            interfaces.contains("javax.servlet.Filter") ||
                                            interfaces.contains("javax.servlet.Servlet") ||
                                            interfaces.contains("javax.servlet.ServletRequestListener")
                            )
                            {
         ...
                                if(loadedClassesNames.contains(clazz.getName())){
                                    resultClasses.add(clazz);
                                    ClassUtils.dumpClass(ins, clazz.getName(), false, Integer.toHexString(clazz.getClassLoader().hashCode()));
                                }else{
                                   ...
                                }
                                break;
                            }
                            target = target.getSuperclass();
                        }
                    }
我们主要关注`Servlet`的检测，首先获取当前Class的实现接口，如果Class的父类不为空并且父类不是`HttpServlet`，并且没有实现`Serlvet\Filter\ServletRequestListener`等接口则不会被添加到`resultClasses`但会递归的去检查父类。由于JSP文件实际继承了`HttpJspBase`，相当于间接继承了`HttpServlet`，所以是绕不过这里的检查的，不过没关系，这一步只是检查是否是Servlet，并不代表被检测出来了。
    while (target != null && !target.getName().equals("java.lang.Object")){
                            // 每次都重新获得目标类实现的所有接口
                            interfaces = new ArrayList();
                            for(Class cls: target.getInterfaces()){
                                interfaces.add(cls.getName());
                            }
                            if( // 继承危险父类的目标类
                                    (target.getSuperclass() != null && riskSuperClassesName.contains(target.getSuperclass().getName())) ||
                                            // 实现特殊接口的目标类
                                            target.getName().equals("org.springframework.web.servlet.handler.AbstractHandlerMapping") ||interfaces.contains("javax.servlet.Filter") ||interfaces.contains("javax.servlet.Servlet") ||interfaces.contains("javax.servlet.ServletRequestListener")
                            )
                            {
                                if(loadedClassesNames.contains(clazz.getName())){
                                    resultClasses.add(clazz);
                                    ClassUtils.dumpClass(ins, clazz.getName(), false, Integer.toHexString(clazz.getClassLoader().hashCode()));
                                }else{
                                    LogUtils.logit("cannot find " + clazz.getName() + " classes in instrumentation");
                                }
                                break;
                          ...
                            }
                            target = target.getSuperclass();
                        }
下面是判断是否为恶意内容的核心，只有当`resultClasses`中包含了关键下面的关键字才会被标记为high，这里如果我们使用自定义马的话也是可以绕过的，但是如果要使用冰蝎,一定会被`javax.crypto.`加密包的规则检测到，如果是自定义加密算法也是可以绕过的。
    List riskKeyword = new ArrayList();
            riskKeyword.add("javax.crypto.");
            riskKeyword.add("ProcessBuilder");
            riskKeyword.add("getRuntime");
            riskKeyword.add("shell");
    ...
            for(Class clazz: resultClasses){
                File dumpPath = PathUtils.getStorePath(clazz, false);
                String level = "normal";
                String content = PathUtils.getFileContent(dumpPath);
                for(String keyword: riskKeyword){
                    if(content.contains(keyword)){
                        level = "high";
                        break;
                    }
                }
## 自删除
上面只是分析了如何让我们的JSP在删除了`JSP\java\Class`文件后还能访问，下面我们分析如何在`JSP`中实现删除`JSP\java\Class`文件，在`JspCompilationContext`保存着JSP编译的上下文信息，我们可以从中拿到`java/class`的绝对路径。
而`JspCompilationContext`对象保存在`JspServletWrapper`中，所以要先获取`JspServletWrapper`。
    public JspServletWrapper(ServletConfig config, Options options,
                String jspUri, JspRuntimeContext rctxt) {
            ...
            ctxt = new JspCompilationContext(jspUri, options,
                                             config.getServletContext(),
                                             this, rctxt);
        }
`request.request.getMappingData().wrapper.instance.rctxt.jsps.get("/jsp.jsp")`
下面是代码实现
最后有个不兼容的小BUG，tomcat7和8/9的`MappingData`类包名发生了变化
    tomcat7:
    tomcat8/9:
## 总结
虽然不能使用冰蝎等webshell绕过这两款工具的检测，但是当我们了解了查杀原理，将自己的webshell稍微改一下，也是可以绕过的，最后这篇文章来自于参考[Tomcat容器攻防笔记之JSP金蝉脱壳](https://www.anquanke.com/post/id/224698)文章的实践，感谢前辈。