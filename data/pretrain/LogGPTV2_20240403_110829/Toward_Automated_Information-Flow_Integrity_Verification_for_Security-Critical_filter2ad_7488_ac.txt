Reiner Sailer
TowardAutomatedInformation-FlowIntegrityVeriﬁcationforSecurity-CriticalApplicationsUmeshShankarushankar@cs.berkeley.eduUniversityofCaliforniaatBerkeleyTrentJaegertjaeger@cse.psu.eduPennsylvaniaStateUniversityReinerSailersailer@us.ibm.comIBMT.J.WatsonResearchCenterAbstractWeprovidealargelyautomatedsystemforverifyingClark-Wilsoninterprocessinformation-ﬂowintegrity.Information-ﬂowintegritypropertiesareessentialtoisolatetrustedprocessesfromuntrustedones,butsystemmisconﬁgurationcaneasilycreatein-securedependences.Forexample,anuntrusteduserprocessmaybeabletowritetosshdconfigviaacronscript.Ausefulno-tionofintegrityistheClark-Wilsonintegritymodel[7],whichal-lowstrustedprocessestoacceptnecessaryuntrustedinputs(e.g.,networkdataorprintjobs)viaﬁlteringinterfacesthatsanitizethedata.However,Clark-Wilsonhastherequirementthatpro-gramsundergoformalsemanticveriﬁcation;inpractice,thiskindofburdenhasmeantthatnoinformation-ﬂowintegritypropertyisveriﬁedonmostwidely-usedsystems.Wedeﬁneaweakerver-sionofClark-Wilsonintegrity,calledCW-Lite,whichhasthesameinterprocessinformation-ﬂowguarantees,butwhichrequireslessﬁltering,onlysmallchangestoexistingapplications,andwhichwecancheckusingautomatedtools.WemodifytheSELinuxuserlibraryandkernelmoduleinordertosupportCW-Liteintegrityveriﬁcationanddevelopnewsoftwaretoolstoaiddevelopersinﬁndingandenablingﬁlteringinterfaces.Usingourtoolset,wefoundandﬁxedseveralintegrity-violatingconﬁgurationerrorsinthedefaultSELinuxpoliciesforOpenSSHandvsftpd.1Introduction1.1MotivationandGoalsWhileoperatingsystemsprovideisolationthroughsepa-ratememoryspaces,processesstillinteractviaﬁles,pipes,networkconnections,sharedmemory,andothermecha-nisms.WesaythatthereisaninformationﬂowbetweenaprocessAandaprocessBifAcanwritetosomeresource(e.g.,aﬁleorpipe)onwhichBdepends.(Wedonotcon-siderside-channelattacksinthispaper.)Theinformation-ﬂowintegrityveriﬁcationproblemistoprovethatasecurity-critical,orhighintegrity,processdoesnotdependoninfor-mationﬂowsfromuntrusted,orlowintegrity,processes.Letusconsideranexample.IfanuntrustedusercanwritetothetrustedOpenSSHconﬁgurationﬁle,sshdconfig,thatisaviolationofinformation-ﬂowin-tegrityandaclearsecuritybreach.Transitiveﬂowsmustalsobechecked:ifanuntrustedusercanrunacronjobthatwritessshdconfig,thereisobviouslystillanin-tegrityviolation.Merelysettingﬁlepermissionsdoesnotpreventattacksthatoperatevia,say,pipesorsharedmem-ory:wemustconsiderallkindsofinputs.Ingeneral,ifatrustedprogramdependsonuntrustedinputs,anattackermaybeabletogainescalatedprivilegeorcompromisethesystem.Tomaintaininformation-ﬂowintegrity,asystemmustbeproperlyconﬁgured,i.e.,itssetofpermissionsmustbesuchthatillegalﬂowsfromuntrustedprocessestotrustedonesarenotpossible.SuchistheapproachtakenbytheBiba[2]model,wherethetrustedprocessissaidtodependonaresourcemerelybyreadingit.Thatis,nountrustedinputswereallowedtotrustedprocesses.Thispictureiscomplicatedbythefactthatmanytrustedprocessesmustacceptsomeuntrustedinputtofunction.Wesaythateachopen()call(orequivalent,suchasconnect()oraccept)intheprogramconstitutesanin-putinterface,orsimplyaninterface.Networkdaemonsmustacceptsomeinput,suchasHTTPrequestsorses-sionlogins,fromthenetwork.Inputtonetworkinterfacesmaybecontrolledbyanattacker.Theprogramsrunningonsystemmustperformsanitizationorﬁlteringofinputsthatcomefromuntrustedsources.Byusingﬁlteringinterfaces,theprogramcanreadfromanuntrustedresource,whilecon-trollingtheextenttowhichitdependsonthatresource.Inshort,information-ﬂowintegrityrequiresacombina-tionoftwoelements:(1)properconﬁguration,whichen-suresthatinputsthataprogramtrusts(likeconﬁgﬁles)can-notbewrittenbyuntrustedusers,and(2)ﬁlteringcode,whichensuresthatinputsthataprogramdoesnottrust(likenetworkinput)arecheckedforwell-formednessandapplication-speciﬁcrestrictions.Withouttheabilitytocom-municatewithtrustedprocessesexceptbyverynarrowin-terfaces,untrustedusers’attackoptions,andthereforepo-tentialexploits,arelimited.TheClark-Wilsonintegritymodel[7]coversbothas-pectsandisagoodmatchforcurrenttrustedprocesses,requiringthatallofprocesses’inputsbeﬁlteredorsan-itized.However,Clark-Wilsonis,likeBiba,relativelyheavyweight,requiringformalveriﬁcationforprograms.Theseandotherintegritymodelsweredevelopedatatimewhendeep,completeprogramanalysisforsecuritywasthoughttobecominginthenearfuture.Thatvisionhasnotbeenrealizedand,asaresult,mostsystemsinwidespreaduseoperatewithoutanykindofinformation-ﬂowintegrityveriﬁcation:thislong-identiﬁedproblemisnotsolvedinpractice.Ourgoalinthispaperistochangethat;todoso,wedeﬁnealighter-weightversionofClark-Wilsonintegrity,whichwetermCW-Lite,thatretainsthesameinterpro-cessdependencysemanticsbutomitstherequirementthatprogramsundergofullformalveriﬁcation.Wethenshowhowacombinationofnewandexistingtoolsallowsprac-ticalveriﬁcationofCW-Lite.Thesetoolsaddressbothas-pectsofintegrityveriﬁcation:theyhelpadministratorstoﬁndandﬁxconﬁgurationerrors,andapplicationdeveloperstoﬁndandannotateinterfacesthatrequireinputsanitiza-tion.VerifyingCW-Liteislargelyautomated:administra-torsmustonlymakemanualdecisionswhenviolationsarefound,anddevelopersmustonlyannotateuntrustedinputinterfaces,whichareidentiﬁedwithourtools,withasim-plemacro.Naturally,developersmustimplementﬁlteringcodeontheseinterfacesinanycase;theannotationservestoallowstaticveriﬁcationofCW-Lite.Ratherthanhaveatoolthatsimplysaysthatasystemhasviolations,wehavetriedwherepossibletomakeresolv-ingtheproblemseasieraswell.Wedemonstratetheeffec-tivenessofourtools—andthus,thefeasibilityofachiev-ingClark-Wilson-styleinformation-ﬂowguarantees—byapplyingthemtoprivilege-separatedOpenSSH,whichin-teractswithmanysystemobjects,andhasthechallengeofcontainingtrustedanduntrustedcomponentswithinoneapplication.Wealsoanalyzevsftpdtoillustratethegen-eralapplicabilityofourapproach.Wefoundseveralsecu-ritypolicyconﬁgurationerrorsthatpermittedunnecessary,possiblyinsecureﬂows.Wealsodeterminedthatcertainotherprograms,suchasrlogindandxdm,causedinse-cureﬂows,andshouldnotberunonsystemsthatdesireinformation-ﬂowintegrityguarantees.Indeed,oneofthebeneﬁtsofcheckinginformationﬂowsonasystemisthatitmakestheformerlyimplicitTCBofthesystemexplicit,andhighlightsprogramswhosepresenceonthesystemcancauseinsecureﬂows.Althoughnoteveryinsecureinfor-mationﬂowleadstoanexploitablehole,byeliminatingallsuchﬂows,weeliminateallrelatedexploitsaswell.1.2ContributionsInthiswork,wemakethefollowingcontributions:•Wedevelopaninformation-ﬂowintegrityproperty,CW-Lite,whichcapturestheinterprocessdependencysemanticsofClark-Wilsonintegrity,butisveriﬁableonrealsystemsusingtoolsandonlyamodestamountofmanualeffort;•WedevelopasuiteoftoolsaswellasmodiﬁcationstoSELinuxtosupportCW-Liteenforcement;•WeapplyourapproachtoOpenSSHandvsftpd,andﬁndseveralintegrity-violatingpermissionsintheirde-faultSELinuxpolicies;•Inshort,wehavedemonstratedpracticalveriﬁcationofClark-Wilsoninterprocessinformation-ﬂowintegrity.1.3RoadmapSection2containsahigh-leveloverviewoftheCW-Litemodelanditsveriﬁcationprocess.InSection3,wedeﬁneCW-Liteformally,startingwiththeClark-Wilsonmodelandweakeningcertainrequirements.Section4describesoursystemmodiﬁcationsandthealgorithmusedtoverifytheCW-Liteofatrustedapplication.InSection5weap-plyourapproachtoOpenSSHandvsftpdonLinuxwithSELinux,describinghowweusedourtoolsto(1)identifyﬁlteringinterfacesnecessarytohandlelowintegrityinputs;and(2)resolvepotentiallyharmfulinformationﬂowsthatwouldnotbeﬁltered.WediscussrelatedworkinSection6andsummarizeourﬁndingsandfutureworkinSection7.2OverviewofCW-LiteanditsVeriﬁcationTherearetwomotivatingobservationsbehindCW-Lite.TheﬁrstisthatbecausetheClark-Wilsonmodelcontainsaformalveriﬁcationrequirementinadditiontoaninterpro-cessdataﬂowmodel,ithasproventooheavyweightforwidespreaduse.However,thetwogoalsareseparable,andwemayproﬁtablytrytosolvethelattergoalindependently.ThesecondobservationisthatClark-Wilsonrequiresﬁlter-ingofallinterfaces,butmosttrustedprogramsonlyneedtoopenuntrustedinterfacesatasmallnumberoflocations.TheﬁrstobservationledustofocusourworkhereonaconcretesolutiontotheﬁrstClark-Wilsongoal:securingin-terprocessinformationﬂowsinanapplication-independentway.Accordingly,CW-Liteduplicatestheinterprocessinformation-ﬂowsemanticsofClark-Wilson.Fullformalveriﬁcationoftheprogramsthemselvesisaseparateanddifﬁcultproblem;also,verifyingsemanticcorrectnessisanapplication-speciﬁctask.Obviouslythiskindofveriﬁca-tionisveryusefulandcanpreventotherkindsofintegritycompromises(e.g.,thoseresultingfrombufferoverﬂows),butwebelievethatseparatingthetwoproblemswillallowsimpler,moreﬂexiblesolutionstoeach.VerifyingCW-Litemeansensuringthatnounﬁlteredin-formationﬂowsexistfromuntrustedprocessestotrustedones.Todothis,wemustﬁrstidentifyallpossibleinter-processinformationﬂows.Wedosobyusingamandatoryaccess-control(MAC)systemthatinterposesaccesschecksonallinterprocessﬂows;withaﬁne-grainedMAC,wecanmakemeaningfulstatementsaboutwhichﬂowsareandarenotpossible.Inthispaper,weusetheSELinux[23]moduleforLinux,aﬁne-grainedMACsystemforLinuxthatimple-mentsRole-BasedAccessControlwithTypeEnforcement.SELinuxisnowastandardpartofFedoraCoreLinuxandisbeingintegratedintomanyotherLinuxdistributions.OursecondobservationledustoextendtheMACsys-tem,sodeveloperswouldnothavetoﬁlterontrustedin-puts.Inordertoenforceleastprivilegeforbothtrusted(non-ﬁltering)interfacesanduntrusted(ﬁltering)interfacesinoneprocess,theMACmustdistinguishbetweenthetwokindsofinterfaces,allowingonlytrustedﬂowstotrustedinterfacesbutallowingadditional,untrusted,inputstotheothers.BymodifyingSELinuxtoassociatetwosecuritycontexts,orsubjecttypes,witheachprocessinsteadofone,wecanallowonlyinputsfromtrustedprocessesbydefault,whileenablingaspecialcontext,aﬁlteringsubjecttype,forﬁlteringinterfacesthatallowsnecessarykindsofuntrustedinputsaswell.Thisseparationreducestheburdenonthede-veloperrelativetoClark-Wilsonbyrequiringﬁlteringonlyofuntrustedinputs,whichtheymustdoinanycase.Theonlyrequirementsarethatdeveloperannotateﬁlteringinter-faceswithasimplemacroandputrelevantpermissionsintheﬁlteringsubjecttype.Tofacilitatethisprocess,wealsodevelopedatoolthatenablesdeveloperstoidentifywhichinputsshouldbeannotatedﬁlteringinterfaces,basedontheextrapermissionstheyneed.ThesesmallchangestothedevelopmentprocessandSELinuxarealsowhatenableau-tomaticveriﬁcationbyadministratorsonendsystems.Nowthatwehaveisolatedthetrustedinterfacesintoaseparatesubjecttype,weneedawayforadministratorstodetectillegalﬂowstoitfromuntrustedsources,i.e.,verifytheCW-Litepropertyontheirsystems.Inpreviouswork,wedevelopedtheGokyotool[14,15],whichcandeter-mineinformationﬂowsfromanSELinuxpolicybylook-ingatread-typeandwrite-typepermissions,thenﬂagillegaloneswhensuppliedwiththesystem’sTCB(assumingotherkindsofprocessesareuntrusted).WeleverageGokyoherebyhavingitignoreﬂowstotheﬁlteringsubjecttypeforthetargetapplication,reportinginformation-ﬂowviolationsonlyforthebasesubjecttype.3CW-LiteInthissection,westatetheCW-Litemodelmorefor-mally.Aswenotedpreviously,CW-Liteisaweakenedver-sionoftheClark-Wilson[7]integritymodel,butthefocusisoncontrollinginterprocessinformationﬂows,ratherthanformalveriﬁcationoftheprogramsthemselves(whichisaseparate,importantproblem).Inparticular,wedonotdis-cusstheapplication-speciﬁctaskofverifyingthesemanticcorrectnessofﬁlteringinterfacesinthispaper.Thatis,weseektoprovideassurancethatﬁlteringcodehasnotbeenomitted,butnotassuranceofthatcode’ssemanticcorrect-ness.3.1BasicInformation-FlowIntegrityInbasicinformation-ﬂowintegritymodels,dependenceonlowintegritydataisdeﬁnedintermsofinformationﬂows.Suchmodelsrequirethatnolowintegrityinforma-tionﬂowsmaybeinputtoahighintegritysubject.Westartwithadeﬁnitionofinformationﬂowbasedontwostandardoperators,modifyandobservewhere:(1)mod(s,o)isthemodifyoperatorwhereasubject(e.g.,aprocessoruser)withsubjectlabelswritestoanobject(e.g.,aﬁleorsocket)withobjectlabeloand(2)obs(s,o)istheobserveoperatorwhereasubjectofsubjectlabelsreadsfromanentityofobjectlabelo.WeuseStorefertothesetofallsubjects.Deﬁnition1(Basicinformationﬂow)flow(s1,s2)spec-iﬁesthatinformationﬂowsfromsubjects1tosubjects2.flow(s1,s2):=∃o:mod(s1,o)∧obs(s2,o)Next,theoperatorint(x)deﬁnestheintegritylevelofxwhereitmaybeeitherasubjectoranobject.Ininforma-tionﬂowintegritymodels,integritylevelsarerelatedbyalattice[8]whereint(x)>int(y)meansthatymaydependonx,butnotviceversa.Forourpurposes,thismeansthattrustedprocessesmaynotdependonuntrustedones.Deﬁnition2(Bibaintegrity)Bibaintegrity[2]ispre-servedforasubjectsif(1)allhighintegrityobjectsmeetintegrityrequirementsinitiallyand(2)allinformationﬂowstosbefromsubjectsofequalorhigherintegrity:∀si∈S,flow(si,s)⇒(int(si)≥int(s)).Someinformation-ﬂowbasedintegritymodels,suchasLOMAC[12],operatedifferentlybuthavethesameinformation-ﬂowintegritysemanticsasBiba.Anoteontransitivity.Wenotethatwhileinformationﬂowistransitiveingeneral,onlyintransitiveinformationﬂowsneedtobeexaminedtodetectaBibaintegrityvio-lation.SupposethatAandBareuntrustedandXandYaretrusted.IfwehaveatransitiveinformationﬂowfromA→B→X→Y,onlytheﬂowfromBtoXisneededtotriggeraBibaintegrityviolation,i.e.,thereisalwayssomeﬂowthatcrossesboundarybetweenuntrustedandtrusted.ItdoesnotimpactBibaintegrityfurtherthatinformationcanﬂowfromAtoB.WhileweﬁndBibatoorestrictive,wewanttopreservetheneedonlytocheckﬂowsindepen-dently.3.2Clark-WilsonIntegrityTheClark-Wilsonintegritymodel[7]providesadiffer-entviewofdependence.Security-criticalprocessesmayacceptlowintegrityinformationﬂows(unconstraineddataitemsorUDIs),buttheprogrammusteitherdiscardorup-gradeallthelowintegritydatafromallinputinterfaces.Thekeytoeliminatingdependenceonlowintegrityinforma-tionﬂowsisthepresenceofﬁlteringinterfacesthatimple-mentthediscardingorupgradingoflowintegritydata.TheClark-Wilsonintegritymodeldoesnotdistinguishamongprograminterfaces,buttreatstheentiresecurity-criticalprogramasahighlyassuredblackbox.Asaresult,allin-terfacesmustbeﬁlteringinterfaces.IntheoriginalClark-Wilsonmodel,trustedprocessesareknownastransformationprocedures(TPs),typicallyoper-ateonCDIs(trustedinputs),butmayalsoacceptUDIsifitisassuredtoﬁlterallitsinputs.Thus,ournotionoftrustedapplicationsmapscloselytoClark-Wilson’stransformationprocedures.Clark-Wilsonalsodeﬁnedspecialtrustedpro-cesses,calledintegrityveriﬁcationprocedures(IVPs),thatchecktheintegrityofCDIsbyperformingappropriatein-tegritychecksoneachdataitem.Theseareusedtoestab-lishsystemwideintegrityatthestartofoperation;wedonotspeciﬁcallyconsidersuchprogramsinourmodel.Wenowdeﬁneinformationﬂowintermsofaconnec-tionbetweensubjectlabelsandtheirprograminterfaces.Forthisweneedamorepreciseobsoperator:obs(s,I,o)meansthatthesubjectsreadsanobjectoftypeooninter-faceI.Aninterfaceforasubjectisadistinctinputinforma-tionchannel,andiscreatedby,e.g.,aparticularopen()callinaprogram.Deﬁnition3(Interfaceinformationﬂow)flow(si,s,I)speciﬁesthatinformationﬂowsfromsubjectsitosubjectsthroughaninterfaceIinaprogramrunningassubjects.flow(si,s,I):=mod(si,o)∧obs(s,I,o)Wealsodeﬁnethepredicatefilter(s,I)tomeanthatasubjectsﬁltersorsanitizesinputonaninterfaceI.WearenowreadytostatetheClark-Wilsonproperty.Deﬁnition4(Clark-Wilsonintegrity)Clark-Wilsonin-tegrityispreservedforasubjectsif(1)allhighintegrityobjectsmeetintegrityrequirementsinitially;(2)thebehav-ioroftheprogramsofsubjectSareassuredtobecorrect;and(3)allinterfacesﬁlter(i.e.,upgradeordiscard)lowintegrityinformationﬂows:∀si∈S,flow(si,s,I)⇒filter(s,I).WhiletheClark-Wilsonmodeldoesnotrequireseparatemulti-levelsecureprocessesforupgrading,asdoesBiba,itrequiresasigniﬁcantassuranceeffort.AnimportantpointtonoteisthatsinceaClark-Wilsonapplicationprogrammerdoesnotknowthesystem’sinformationﬂowsinadvance,allinterfacesmustbeassuredtobeﬁlteringinterfaces.Inpractice,oftenonlyasmallnumberofinterfacesactuallyneedtocapableofﬁlteringinthecontextofarealsystem.Thissetcanbederivedfromanalyzingthesystem’ssecuritypolicy;thatis,byusingsystemknowledgeinapplicationdevelopment(sincethedevelopercanshipasecuritypolicywiththeapplication),wecanreducetheﬁlteringburdenonthedeveloper.WeusethisobservationindevelopingCW-Lite.3.3CW-LiteDeﬁnition5(CW-Lite)CW-Liteispreservedforasubjectsif:(1)allhighintegrityobjectsmeetintegrityrequire-mentsinitially;(2)alltrustedcodeisidentiﬁableashighintegrity(e.g.,fromitshashvalueasforNGSCB[11]);and(3)allinformationﬂowsarefromsubjectsofequalorhigherintegrityunlesstheyareﬁltered:flow(si,s,I)∧¬filter(s,I)→(int(si)≥int(s))Thatis,CW-Literequiresthattheapplication’sinfor-mationﬂowseitheradheretoclassicalintegrityorthatun-trusted(low-integrity)inputsarehandledbyaﬁlteringinter-face.NotethatthisprovidesequivalentintegritytoClark-Wilson,sincetheonlyﬂowsnotbeingﬁlteredcomefromtrustedsources.RecallthatCW-Litealsodoesnotprovideforformalveriﬁcationofﬁlteringinterfaces;itsimplyre-quiresthedevelopertomarkthemassuchsotheycanbehandledcorrectlybytheMACsystem.4DevelopingCW-Lite-CompliantSystemsInthissection,wetackletheCW-Litetasksimpliedbytheprevioussection.RecallthattheCW-Litepropertyisonethatisveriﬁedforaparticulartargetapplicationrun-ningonaparticularsystem.Applicationdevelopersmustenableveriﬁcationwithsmallchangestotheirprogramsandsecuritypolicies,whiletheadministratorsperformtheac-tualveriﬁcationontheirsystems.(SeeFigures1and2forIdentify filtering interfaces(may use settraceonerror())Add DO_FILTER() annotationto filtering interfacesAdd filtering subject typeto default security policy;policy ships with applicationFigure1.Applicationdevelopertasksre-quiredtoenableCW-Liteveriﬁcation.Fil-teringinterfacesarethosethatacceptin-putsfromuntrustedsources,andmustsanitize,orﬁltertheinput.Aninterfaceismarkedbyadistinctcalltoopen(),accept(),orothercallthatenablesdatainput.TheDOFILTER()annotationonaninterfacetellstheaccess-controlsys-temtograntadditionalpermissionsal-lowedbytheﬁlteringsubjecttypetothatinterface.Thedefaultsubjecttype,usedonallotherinputinterfaces,onlyallowsinputsfromthethesystemTCB.ConfigErrors?YesDoneChoose a TCB(one time for all apps)Run Gokyo on app security policy (from developer)Fix Errors: remove permsor increase TCBNoFigure2.SystemAdministratortasksre-quiredtoverifyCW-Lite.Thesystemad-ministratordecidesonasystemTCBini-tially.Then,whenshewantstoverifyCW-Liteforaparticulartrustedapplica-tion,sherunsGokyoonitssecuritypol-icy.Ifnoerrorsarereported,CW-Liteintegrityisveriﬁed.Ifitreportsanillegalﬂows,theoffendingpermissionsmustberemoved,ortheTCBexpandedtoincludethesourceoftheillegalﬂows.ﬂowchartsofthesetasks.)Forourdiscussion,weusethetermTCB(trustedcomputingbase)toindicatethesetofsubjectsthatmustbetrustedonthesysteminordertotrustthesetoftargetapplications(e.g.,sshd,Apache,bind).Anapplicationdevelopermust:1.AssumingsomeTCBandapplicationconﬁguration,identifyuntrustedinputstotheprogramandimple-mentﬁlteringinterfacesforeach.ThismaybedoneusingtheprocessinSection4.4.2.AnnotatethoseinterfaceswiththeDOFILTER()an-notation.TheseannotationsareusedbytheaccesscontrolsystemasdescribedinSection4.2.3.(Possiblyinconjunctionwithadistributionmain-tainer:)Constructadefaultsecuritypolicyfortheap-plicationthathastwosubjecttypes:thedefaultonlyallowsinputsfromtheTCB,andtheother,forﬁlteringinterfaces,allowsrequiredtypesofuntrustedinputsaswell.Sinceapplicationdevelopersshouldbesanitizingtheirun-trustedinputsanyway,thisrepresentsonlyasmallamountofadditionalworktoenablesystem-levelintegrityveriﬁca-tion.Asystemadministratormust:•Onetimeonly,chooseasystemTCB.(ATCBmaybechosenper-applicationforamultileveltrustmodel,butthisisnotnecessaryorcommon.Inthisscenario,eachtargetappwouldbeassociatedwithonlythesetofsubjectsonwhichitdepended,independentofotherapplications.)•Runthesecuritypolicyanalysistoolforthetargetap-plicationasdescribedinSection4.3.•Ifnointegrity-violatingpermissionsaredetected,thenskipthenextstep.•Classifyeachintegrity-violatingpermissionfoundbythetooltodecidehowtoremovetheillegalﬂow.SeeSection4.5fordetailsonhowtodothis.NotethatverifyingtheCW-Litepropertyisdoneautomat-icallyusingGokyo;itisonlyresolutionofproblemsthatrequiresmanualintervention.Inaddition,ourapproachal-lowseachsysadmintodecidewhichapplicationstrustonhersystem.Shecanevaluatetheriskofrunningaparticularapplicationintermsofwhatmustbetrustedinordertorunit.Intheremainderofthissection,wewillﬁrstdescribetheSELinuxaccesscontrolsystem,thenshowhowwemodi-ﬁedSELinuxtosupportﬁlteringinterfacesand,therefore,CW-Liteveriﬁcation.Wecontinuebyaddressingthedevel-operandsysadmintasksabove,includingperformingpolicyanalysisandﬁndingﬁlteringinterfaces.4.1SELinuxTheSELinuxmodule[23]isaLinuxSecurityMod-ule(LSM)[26]thatprovidesﬁne-grained,comprehen-siveMACenforcement.ItshipsstandardwithFedoraLinux,amongothers,anditisquicklybecomingstandardtoincludeattendantSELinuxpolicieswithapplications.SELinuximplementsanextendedformofTypeEnforce-ment(TE)[4]withdomaintransitionsthatenablesexpres-sionofpoliciescoveringover30differentkindsofobjectswithabout10operationseach.SELinuxiscomprehen-sivebecauseitaimstocontrolallprograms’accessestoallsecurity-relevantsystemobjects.Inthispaper,wedonotexamineverifyingthattheSELinux/LSMimplementa-tionisacorrectreferencemonitor.PreviousworkveriﬁedtheLSMreferencemonitorinterface[27],butverifyingthecorrectnessoftheSELinuximplementationpropertiesre-mains.KeynotionsinSELinuxarethoseofsubjecttypesandobjecttypes.Aprocess’securitycontextisdeterminedbyitssubjecttype,muchasthesecuritycontextofanor-dinaryUNIXprocessisdeterminedbyitseffectiveUID.Likewise,non-processobjectslikeﬁlesareassociatedwithanobjecttype.Permissionsareattachedtoasubjecttypeinpolicyﬁles;ifanApacheprocesshasthesubjecttypeapachet,anditsconﬁgurationﬁlehasobjecttypeapacheconfigt,wemightsaysomethinglikeallowapache_tapache_config_t:file{statread}toallowApachetocallstat()onorreadfromitsconﬁg-urationﬁle.SELinuxdoesnotincludea“deny”operation;allpermissionsaredeniedbydefault.AlthoughthereareseveralaccesscontrolconceptsintheSELinuxpolicymodelbesidesallowpermissionsbysub-jectsonobjects,onlyoneotherisrelevanttoinformationﬂow.Therelabeloperations1enableasubjecttochange1Asubjectneedstherelabelfromandrelabeltopermissionstoimple-mentarelabel.theobjectlabelofanobject.Thisenablesinformationﬂowfromtheoldobjectlabeltothenewone.Whileitallowsusgreatcontrolandﬂexibility,suchﬁne-grained,comprehensivecontrolresultsinverylargeandcomplexaccesscontrolpolicies.FrankMayerdescribestheSELinuxpolicymodelasan“assemblerlevel”policy.IntheAugust19,2004release,thedefaultbuildresultsina500KBcompiledpolicyﬁle.Thereareover5,000per-missionassignment(allow)rulesinthepolicyitself(intheﬁlepolicy.conf).Notethatthispolicycontainsjustthebasesubjects;thecompletepolicy,includingpoliciesforallship-pingapplications,isabouttentimesgreaterinsize.Asare-sult,understandingthehigher-levelpropertiesthatapolicyimplies,suchasinformationﬂow,cannotbedonemanually.4.2SupportingﬁlteringinterfacesintheMACPolicySELinuxcannotdistinguishamonginputinterfacesinasingleprocess.Someinterfacesmayonlyhavetoprocesshighintegritydata,suchastheinterfacethatreadsaconﬁg-urationﬁle.Othershavetobeabletovalidateandupgradecertaintypesoflow-integritydatasuchasnetworkinput:theseareﬁlteringinterfaces.Inordertosupportﬁlteringin-terfaces(andthereforetocheckCW-Lite),wemodiﬁedtheSELinuxuserspacelibraryandkernelmoduletosupporttwosubjecttypesperprocessinsteadofone.Thedefaultsubjecttypeisusedforordinaryoperationandallowsinputsonlyfromsubjectsintheapplication’sTCB;thisisenforcedbytheGokyopolicyanalysisinSection4.3.Thenewﬁlter-ingsubjecttype,withadditionalpermissions,isusedforinterfaceswiththeappropriateDOFILTER()sourcecodeannotation.DO_FILTER(interfacecreationcode):=use_filtering_subject_type();interfacecreationcodeuse_default_subject_type();Theannotationservesasacontractwiththeprogrammer,whostipulatesthatinputfromtheinterfaceisﬁltered.Ourmacro-likeapproachisdeliberate,todiscouragerunningalargeamountofcodewithhigherprivilege.Typically,onlyasingleopen()-typecallrequiresthepermissions.Anexampleoftherequiredchangestotheprogramandthese-curitypolicyforﬁlteringinterfacesisgiveninFigure4.2.Notethattheaccept()systemcallisstillconstrainedbytheMACpolicyfortheﬁlteringsubjecttype.Forexam-ple,theﬁlteringsubjecttypepermissionsfortheapplicationmightallowacceptingconnectionsfromonenetworkcard,butnotanother.BeforeAfterSourceCodeSourceCodeconn=accept()DOFILTER(conn=accept())//accept()fails//accept()succeedsgethttprequestsanitized(conn)gethttprequestsanitized(conn)SecurityPolicy(defaultDENY)SecurityPolicy(defaultDENY)Apache:ALLOWreadhttpd.confApache:ALLOWreadhttpd.conf//Problem:network(∈TCB!//networkofficially(∈TCBApache:ALLOWacceptApache-filter:ALLOWacceptFigure3.Supportingﬁlteringinterfaces.Initially,theprogramaboveisnotallowedtoacceptnetworkinput,becausethenetworkisnotintheTCB.Inordertoacceptsuchinput,thesourcecodemustﬁlteritandtheprogrammermustsupplyanannotationindicatingthattheinterfaceisﬁltered.Thenthepolicymustbemodiﬁedtoallowthenetworkinputonlyfortheﬁlteringinterface.TheDOFILTER()macrotellstheMACsystemtousetheﬁlteringsubjecttypepermissionsfortheenclosedoperations.Weannotateaccept()(whichimpliesaread/writesocket),ratherthansubsequentsocketread/writeoperations,becausethatiswheretheMACsystemperformsaccesschecks.Thisisanalogoustohowﬁleaccesschecks,includingread/writepermissionchecks,areperformedonceonopen(),notforeveryread()orwrite()call.4.3MACPolicyAnalysisOncethetargetapplication’suntrustedinputshavebeenisolatedintoitsﬁlteringsubjecttypes,weneedonlycheckthattherearenountrustedinputstotheapplication’sdefaultsubjecttypes.WeemploytheGokyotooltocomputeinformationﬂowsfromanSELinuxpolicy[14].Gokyorepresentsaccesscon-trolpoliciesasgraphswherethenodesaretheSELinuxsub-jecttypesandpermissions,andtheedgesareassignmentsofpermissionstosubjecttypes.Basedonwhethertheper-missionallowsamodoperation,anobsoperation,orboth,Gokyocomputesallinformationﬂowstos.Thatis,itcom-putesthesetofsubjecttypesF={s!:mod(s!,o)∧obs(s,o),oisanobjecttype}.Gokyoalsocorrectlyhandlesﬂowsimpliedbyobjectrela-beling;seetheAppendixfordetails.Someofthenon-targetsubjectsmaybedesignatedastrustedsubjects,andtheyformthesystem’sTCB.TheTCBincludessubjectssuchasthosethatbootstrapthesys-tem(e.g.,kernelandinit),deﬁnetheMACpolicy(e.g.,loadpolicy),anddoadministration(e.g.,sysadm).GiventhesetofinformationﬂowsandtheTCB,theun-trustedsubjectswithﬂowstosaregivenbyU=F∩¬TCB.Ifthissetisempty,thenCW-Liteholdsforthetargetappli-cation.Ifnot,Gokyooutputsthesetofpermissionassign-mentsPthatneedtobeexamined,i.e.,thosethatallowtheoffendingmodandobsoperations:P={p:flow(u,s),p⇒mod(u,o)∨p⇒obs(s,o)}wherepisapermissionassignment,u∈U,andoissomeobjecttype.4.4FindingﬁlteringinterfacesAlthoughwemodiﬁedSELinuxtosupportmediationforﬁlteringinterfacesseparatelyfromotherinterfaces(Sec-tion4.2,above),thedeveloperstillneedstomakeannota-tionstotellSELinuxwhetheragiveninterfaceperformsﬁl-teringornot.Aspartofthisprocess,thedeveloperneedstodeterminewhichinterfacesrequireﬁltering.Somemaybeobvious,buttheremaybepermissionstoaccessuntrusteddatathatareusedinasubtleway.Thedevelopercanﬁndthesebyrunningthesecuritypolicyanalysisonthedefaultpolicyandanalyzingallintegrity-violatingpermissionsfortheapplication.Theproblemofdeterminingwhereinaprogramaper-missionisusedisoutsidethescopeofSELinux’sgoals,soweimplementedourownmechanism.WedeﬁnedanewoperationinSELinuxcalledsettraceonerrorus-ingthesysfsinterfaceandmadeappropriatechangestobothSELinux’suserlibraryanditskernelmodule.Whensettraceonerror(true)iscalledfromuserspace,ourmodiﬁedSELinuxkernelmodulesignalstheprocesswheneveraviolationoftheSELinuxpolicyisfound.Theuserlibrarycatchesthesignalandtrapstheprocessintoaseparatextermdebugger(gdb).Iftheprocessforks,addi-tionalxtermwindowswithdebuggersonthechildprocessesarelaunched.Onceinthedebugger,itismucheasier,usingstacktracesanddatainspection,todeterminewhereandwhyapermissionerroroccurredandtakeappropriateac-tion,eitherremovingtheoffendingoperationorimplement-ingaﬁlteringinterface.Ifthepermissionisneveractuallyneeded,thenitcansimplyberemovedfromthepolicy.Someﬁlteringinterfacesmaynotneedtoactuallyﬁl-tertheincomingdatacontents,sincesomeinterfacesdonotinterprettheincomingdata.Forexample,logrotateen-ablesautomaticrotationoflogﬁles,butdoesnotdependonthedataintheﬁles.Likewise,thecputilitycopiesﬁles,butdoesnotconsidertheircontents.Inthesecases,aDOFILTER()annotationisstillappropriate,ratherthanallowingtheprogramtoacceptallinputs.Thisisbecause(1)ﬁlteringbasedonmetainformation(likeinputlength)maystillbeneeded;and(2)thekindsofinputsmayneedtoberestricted(forexample,disallowingcopiesfromnamedpipes).Naturally,iftheprogramsemanticschangelatertoincludeinterpretationoftheuntrusteddata,theprogrammershouldimplementadditionalﬁlteringcode.Onemaywonderwhyweuseadynamicapproachtoﬁndingﬁlteringinterfaces.Asimpleexampleisrevealing:considertheinterfacefd=open(filename).Inor-dertodecidestaticallyifﬁlteringisrequired,wewouldneedtoknowthevalueoffilename.Thismaybepar-tiallyaddressedwithaprogramanalysis,thoughofcourseitisundecidableandmaycomefromdynamicdata,sayfromthesystem’sconﬁguration.Themappingofﬁlenametoob-jecttype(whichiswhatmattersforintegrity)isalsosystemdependent,andeachadministratormaykeepﬁlesindiffer-entlocations.Ourapproachworkswellenoughinpractice,sincethenumberofﬁlteringinterfacesisusuallyrelativelysmall;whileitmayhavethecoverageproblemofdynamicanalysis,itdoesnothavethescalabilityanddecidabilityproblemsofstaticanalysis.4.5HandlingillegalinformationﬂowsIfasysadmin’sinvocationofthepolicyanalysistoolde-tectsillegalinformationﬂowsimpliedbyasetofpermis-sions,oneofafewactionsisrequired.Somesuchper-missionsaresimplyunneededandmayberemoved.Someinformationﬂowsmaybegeneratedbyprogramsthatareuntrusted,butoptionaltothesystem.Aneasywaytore-movethisinformationﬂowistoexcludetheoffendingcodeandsubjecttypesfromthesystem.Somepermissionsareneededbyoptionalcomponentsofthetargetapp;theop-tionsmaybedisabled,andthepermissionsremoved.Ifthepermissionisusedbythecoreapplication,theneitherthesysadminmaybeassumingasmallerTCBthanthedevel-operorthedeveloperhasnotaddedaDOFILTER()an-notation.Thesysadmincaneithernotrunthetargetappli-cationorgetthedevelopertowriteandannotateadditionalﬁlteringinterfaces.5Example:CW-LiteIntegrityVeriﬁcation5.1GoalSofar,wehavedeﬁnedCW-Liteandshowningen-eralhowapplicationscanbeconstructedtosatisfyitsre-quirements.WehaveseveralgoalsinapplyingCW-Litetoourprimaryexampleapplication,OpenSSH,andtovsftpd.First,wewanttoseehoweasyitistobuildapplicationstomeetCW-Liteinpractice.SinceOpenSSHisaverypop-ular,complex,andsecurity-criticalprogramthathasbeenarchitectedtopreservetheintegrityofitsprivilegedcompo-nents,verifyingausefulintegritypropertycanbeofvaluetoofmillionsofsystemsandvalidatethesecurityeffortsofitsdevelopers.vsftpdisasomewhatsimplerexample,andillustrativeofacommoncase.Second,wewanttoseehowclosethedefaultSELinuxpolicyistoenablingsatisfactionofCW-Lite.Third,ifeitherapplication(withthestandardshippingpolicy)doesnotinitiallymeetCW-Liteintegrity,wewanttoseewhyitfailsandhowdifﬁcultitismodifytheapplicationorpolicytoenablesuccess.5.2SetupProvosetal.decomposedtheserver-sidedaemonofOpenSSHintoprivilegedandunprivilegedcomponentsinordertominimizetheamountofcodethatneedstorunwithprivilege.Theprivilegedcomponentexportsanarrowinterfacetotheunprivilegedcomponents,suchthatonlyspeciﬁcoperationsinaspeciﬁcordermayberequested,whichreducestheriskoftheprivilegedcomponentbe-ingcompromisedbyahijackedunprivilegedcomponent.Privilege-separationhasbeenaddedasanoptiontothemainOpenSSHdistribution.Theprocessgraphforprivilege-separatedOpenSSHisshowninFigure4.Oneprivilegedcomponent,listen,lis-tensfornewconnectionsviaport22andforksanewprivilegedcomponent,priv,perconnection.ThisprivcomponentperformstheprivilegedoperationsrequiredbyOpenSSH:authenticationoftheremoteuser,creationofpseudo-terminals,andtransitiontoaparticular,authenti-cateduserid.Theprivcomponentinturnspawnsunpriv-ilegedcomponentstohandlevarioustypesofuserinterac-tion.Thenetcomponentisusedtoperformtheremotein-teractionpartoftheauthenticationphase,whichhasinthepastbeensubjecttocompromise;itusestheprivcompo-nentasaprivilegedservertohandlesecretdataoperations.Aftersuccessfulauthentication,privspawnsashellorotherprocessrequestedbytheuserinthatuser’ssecuritycontext.Figure4.ProcessstructureofprivilegeseparatedOpenSSH.Thelistenprocesssimplyprocessesnewconnectionrequests,forkingaprivprocesstohandleeachone.Theprivprocessforksanetprocesstoperformthenetworkportionofuserauthentication,providinganarrowinterfacetoprivilegedoperationsnecessarytocompleteauthentication.Afternetcompletesitstask,privspawnstheauthenticateduser’srequestedprocess,inourexampleabashshell.vsftpdistheFTPserverincludedwithFedoraCoreLinux.Ittooemploysseparatetrustedanduntrustedpro-cesses,thoughitspolicytreatsboththesame.Wedonotdiscussitsanalysisinasmuchdetail,butgiveasummaryoftheanalysisandtheresults.Fortesting,weusedOpenSSH3.6andvsftpd2.1.3onanIntelx86platformwiththeLinux2.6kernelinstalled.WeuseSELinux(seeSection4.1)asourMACsystem,usingthestrict(nottargeted)policyconﬁgurationforFedoraCore4.5.3RoadmapforOpenSSHTheproblemofverifyingCW-Liteforprivilege-separatedOpenSSHisaddressedbyensuringthatallinfor-mationﬂowsintotheprivilegedcomponents(listenorpriv)eithercontainonlyhighintegritydataordiscard/upgradethedataviadeclaredﬁlteringinterfaces.EnablingOpenSSHtosatisfyCW-LiterequiresworkbytheapplicationdevelopertomodifyOpenSSHtoﬁndwhereﬁlteringinterfacesarenecessary,buildacceptableﬁlteringinterfaces,anddeclarethepresenceoftheﬁlteringinter-facestoSELinux.Then,theadministratoroftheSELinuxsystemneedstoconﬁgureanSELinuxpolicythatenablessatisfactionofCW-Lite.Recallthatthispolicywillhaveabasesetofpermissions(subjecttype)allowingonlytrustedinputfornormalinterfacesandadditionalsubjecttypetoacceptrequirestypesofuntrustedinputattheﬁlteringin-terfaces.TheﬁrststepistousetheGokyopolicyanalysistooltoidentifytheillegalinformationﬂowstoprivandlisten.Thenexttaskistodeterminewhethertheremaininglowintegrityﬂowscanbehandledbyﬁlteringinterfaces.Weuseourtools(seeSection4.4)toﬁndtheinterfacesthatacceptlowintegritydataintheprivilegedcomponentsandaddtheDOFILTER()annotation.5.4Inter-processFlowAnalysisGiventhenewSELinuxpolicyfortheOpenSSHcom-ponentsandtheremainderoftheSELinuxexamplepolicyfortherestofthesystem,wearereadytouseGokyotoﬁndlowintegrityinformationﬂowstotheprivilegedOpenSSHcomponentsprivandlistenandrevisethepolicytoremoveanyunnecessaryﬂows.GokyocomputestheinformationﬂowsintheSELinuxpolicythatviolatethepolicyanalysisconstraintsgiventhesetsoftrustedsubjects,excludedsub-jects,andﬁlterrules.AshortintroductiontoGokyoisinSection4.3.WedeﬁneaTCBincludingthesystembootstrapcom-ponents,suchasbootloader,kernelandinit,andcompo-nentsthatmodifytheSELinuxpolicyitself(e.g.,checkpol-icy,loadpolicy,setﬁles,etc.)orotherobjectsuponwhichthesystemintegritydepends(e.g.,administrativesubjectssysadm,staff,rpm,etc.).WethenrunGokyoandidentifyseveralinformationﬂowconﬂictsshowninTable1.Thetableshowseachinstancewherethetargetsubjects(privand/orlisten)haveareadpermissiononanobjectthatmaybemodiﬁedbyuntrustedsourcesubjects(write-upsubjects);someobjectsmaybewrittentobymanywrite-upsubjects.Theproblemthenistoﬁndaresolutionthatpreventsthetargetsubjectsfrombeingdependentonthewrite-upsubjects.Foreachentry,oneoftheseresolutionsisappliedinthefollowingorderofprecedence:(1)wecanEXCLUDEthewrite-upsub-jectfromthesystemifitisnotrequiredonthesystem(2)wecanidentifythatthepermissiondoesnotactuallyresultinadatadependency(FILTERNODEP),whichrequiresalightweightﬁlteringinterfacethatpreventsonlymetainfor-mationattackslikebufferoverﬂows;(3)wecanFILTERtheTargetPermissionSourceSubjectsResolutionSubject(object:class)(namesorcount)Resolutionsrequiringprimarilysystemknowledgepriv,listen,ftpddevlog:sockprivlogFILTERNODEPprivlastlog:ﬁle6FILTERNODEPpriv,ftpdetcruntime:ﬁlexdm,hotplugEXCLUDElisteninitrcvarrun:ﬁle7(includesrlogind)EXCLUDElisten,ftpdnetconf:ﬁledhcpcEXCLUDEpriv,ftpdwtmp:ﬁle7(includesrlogin)EXCLUDEResolutionsrequiringapplicationknowledgelistensshdlisten:tcp(accept())[network]FILTERlistenuserpty:chrﬁle7FILTERprivsshdpriv:unixsshdnetFILTERftpdftpportt:tcp(accept())[network]FILTERlistensshdlisten:tcp(read())[network]REMOVEprivxserverport:tcp165REMOVEpriv,listendevtty:chrﬁle200REMOVE(Thisrowusedforasamplewalkthrough.)priv,listenporttype:tcp[network]REMOVElistensshdlisten:unixunprivuserdomainREMOVElistensshdlistendevpts:chrﬁle5REMOVEprivsshdtmp:ﬁle(staff/sysadm/user)sshREMOVEprivsshdtmp:lnk(staff/sysadm/user)sshREMOVEprivsshdtmp:sock(staff/sysadm/user)sshREMOVEprivsshdtmp:ﬁfo(staff/sysadm/user)sshREMOVEprivsystemchkpwd:fd27REMOVEpriv,listenunprivdomain:fd33REMOVEftpdftpportt:tcp(read())[network]REMOVE*ftpdnfst/cifst:ﬁle27REMOVE*ftpduserhome:ﬁle4REMOVE*FILTER=Thepermissionisnecessary,butrequiresaﬁlteringinterface.Itshouldbeputintheﬁlteringsubjecttype.FILTERNODEP=Necessarypermissionsthatrequiresaﬁlteringinterface,butnosemanticﬁlteringisneededsincetheinputisnotinterpreted.Theﬁlteringsubjecttypeisstillneededtoproperlyhandlemetainformationandenforceleastprivilegeforothertrustedinputs.EXCLUDE=ExcludethesourcesubjectfromtheSELinuxpolicy,asitcausesinsecureﬂows;anyassociatedprogramsmustnotberunonthesystem.Thisisajudgmentcall;sysadminsmayinsteaddecidetoaddthesourcesubjecttotheTCB.REMOVE=Removethepermissionassignmentfromthetargetsubject,breakingtheinformationﬂow.*=Thevsftpdpolicydidnotfullyreﬂectitsprocessstructure;seeSection5.6fordetails.Walkthoughforshadedrow:“priv,listen”indicatesthattheillegalﬂowswereinputstoboththeprivandlistencomponentsofOpenSSH.Theobjectthattheyhavepermissiontoreadfromisdevtty:chrﬁle,thatis,aTTYfrom/dev/tty.Twohundreduntrustedsubjectshavepermissiontowritetothatobject.Theillegalﬂowsarebrokenbyremovingthereadpermissions,sincetheyarenotnecessary:theTTYisactuallyreadonlybythenetcomponent,whichhandlesremoteuserinput.Table1.Informationﬂowstoourtargetsubjects(privandlistenforOpenSSHandftpdforvsftpd)thatmayleadtointegrityproblems.ThepermissionsleadingtotheseﬂowswereidentiﬁedbytheGokyotool.Thetophalfofthetableindicatesconﬂictsresolvedbasedonsystemknowledge.ThebottomhalfrequiredexaminingthebehaviorofthetargetapplicationusingthetoolsdescribedinSection4.4.Eachtargetsubjectwasanalyzedindependently.useofthepermissionviaaﬁlteringinterface;or(4)wecanREMOVEthepermissionassignmentfromthetargetsub-jectorthewrite-upsubjectifnotrequiredbythesubject.Thetablegroupstheresolutionsintotwocategories:(1)resolutionsbasedoninformationﬂowonlyand(2)reso-lutionsbasedonapplicationconﬁgurationandinformationﬂow.Thedecisionbetweenremovalofpermissionassign-mentsandﬁlteringgenerallyrequiresapplicationknowl-edge;somepermissionsareneededtosupportoptionalcomponentsoftheapplicationandsomeareneededforcoreoperation.Anadministratorwouldneedtodecidewhichoptionswererequiredonhersystemandtrustthecorre-spondinginputs.14ofthe20conﬂictsrequiresomeun-derstandingoftheneedsoftheOpenSSHapplication.Next,werecognizethattheuseofdevlogandlastlogdoesnotresultinanyformofdependence.Theymanipulatelogdatawhichisnotinterpreted,forexamplebyrotatinglogﬁles.Finally,weexcludeafewwrite-upsubjectsfromthesys-temiftheycauseillegalﬂowstoOpenSSH.Thisisajudg-mentcall;asysadminmaydecidetotrustthesesubjectsinstead.Iftheyaretrusted,thentheymustimplementap-propriateﬁlteringinterfaces.dhcpcisanexampleofthisassomevulnerabilitieshavebeenfoundforit.Dynamicsystemextensionviahotplugisnotnecessaryinourenvi-ronment,soourjudgmentistosimplifyadministrationandexcludeit.Wealsoeliminatetheuntrustedsubjectsthatwritetotheloginrecordsofwtmp,suchasrlogind.Only3ofthe15remainingread-typepermissionsareactuallyneededinourOpenSSHconﬁguration:theper-missionsidentiﬁedbyProvosetalforcreatingthepseudo-terminal;initiatingOpenSSHconnections(bylisten);andprocessingusercommandsviathesocketfromnettopriv.Weremovethe10unnecessarypermissionassignments.Wenotethattheporttype:tcppermissionwhichpermitsaccesstomostsystemssocketsismuchcoarser-grainedthannec-essary.listenonlyneedsaccesstosshdlisten:tcponport22.Wenotethatthereplicationofsomepermissionsforlistenandprivwasunnecessary.Forexample,thereisnoneedforlistentoacceptrequestsfromnet.Figure1showshowchallengingitcanbetogettheper-missionassignmentscorrectforagivensystem.Thehand-constructedSELinuxpolicyshippedwithFedoraCore4containedseveralpermissionsthatneededtoberemoved.(Ourhand-distributionofOpenSSHpermissionstonet,priv,andlistendidnotimpactthese.)Some,suchasforsshdtmp,enableactionsthatwedonotwantinourconﬁg-uration(e.g.,useradministration).Others,though,aresim-plymistakesthatenableinformationﬂowsthatcouldcom-promisetheintegrityofourprivilegedcomponents.Whileinvestigatingthesourceoftheseerrors,wefoundthat,of-ten,largeblocksofpermissionassignmentsweremadeus-ingSELinuxconveniencemacroswhenonlyasubsetwereactuallyneeded.SELinuxpoliciesonlyallowassignmentofpermissions,nottheirremoval,soweurgepolicywriterstobecarefulintheiruseofsuchmacros.5.5OpenSSHFilteringInterfacesWenowdescribehowweidentiﬁedwhichpermissionassignmentstoclassifyasFILTER.First,theOpenSSHap-plicationdeveloperneedstoﬁndwhereﬁlteringinterfacesarenecessary.Aﬁlteringinterfaceisnecessarywherelowintegritydatamaybeinput.ForOpenSSH,theinterfaceswherelistenreceivesconnectionrequestsfromthenetworkandwhereprivreceivescommandsfromnetarethetwoob-viouscases.However,otherinterfacesmayalsorequireﬁl-teringinOpenSSH.Toﬁndallﬁlteringinterfaces,ananaly-sisoftheSELinuxpolicyisnecessarytoseeiflowintegrityinputsmaybeusedbyotherOpenSSHinterfaces.WeusethesettraceonerrormechanismdescribedinSection4.4totestourconﬁgurationagainstthedefaultSELinuxpolicytodetermineifotherinterfacesbesidesthetwoaboverequireﬁlteringinterfaces.Welocatedone:theuserptypseudoterminalusedbyprivtocommunicatewiththeusershellprocess.Next,theapplicationdevelopermustconstructeffectiveﬁlteringinterfaces.Itistheapplicationdeveloper’stasktobuildtheﬁlteringinterfacesandproveeffectivenesstothecommunity.ForOpenSSH,theconstructionofaﬁlter-inginterfaceforprivtoreadcommandsfromnetisoneofthemaintasksintheprivilege-separationdonebyProvosetal[21].Theinterfacetoacceptconnectionsinlistendoesnothaveanyspecialﬁlteringperse,astheconnectionisnotinterpretedbylisten.Also,theuserptypseudoterminalinprivisonlyusedtopassdatatotheremoteuserfromtheshellprocesswithanencryptionstep;thecontentsarenotexamined.Finally,onceﬁlteringinterfacesarefound,theymustbedeclaredtoSELinuxinordertousethelowintegrityper-missions.WeusetheDOFILTER()annotationtodeclaresuchinterfacesasdescribedinSection4.2.5.6VerifyingvsftpdWeappliedthesameapproachtoverifyingvsftpd;theresultsareinTable1.OnedifferenceisthattheSELinuxpolicydidnotreﬂectthenatureoftheFTPdaemon,whichforksper-connectionhelperprocessesinamannerverysim-ilartoOpenSSH.Instead,therewasonesubjecttypeforallprocesses.ThechildprocessesdodropLinuxprivileges(versusthanSELinuxones),sotheyarestilllargelycon-ﬁned(ifapermissionisdeniedineithermodel,itisde-niedtotheprocess).Thethreestarredpermissionsinthetablearethosethatshouldbelongtotheunprivilegedchildprocessesonly,nottothetrustedserverprocess,whichiswhywespecifytheirdispositionvis-a-visthetrustedsub-jecttypeas“REMOVE”.Theinterfacebetweenthetwoisaﬁltereddomainsocket.Theadditionalviolatingpermis-sionswereeliminatedbyexcludingsomeofthesameex-cludedsubjectsasforOpenSSH,likerlogindandxdm.6RelatedWork6.1IntegrityModelsSystemintegrityhasbeenadifﬁcultproblemforsecu-rityresearchersovertheyears.Mostworkonintegrityhasfocusedoninformationﬂowmodels,supplementedbyhighassurance(i.e.,formal,validationofprogramcorrectness,suchasCommonCriteriaEAL7evaluation).TheBibaintegritymodel[2]isessentiallyadualoftheBell-LaPadulasecrecymodel[1],whereinformationﬂowsfromlowintegritysubjectstohighintegritysubjectsareprohibited.LikeBell-LaPadula,highassurancecompo-nentsarerequiredtoovercomerestrictions,butunlikethecaseforsecrecy,illegal(low-to-high)integrityinformationﬂowsarecommon(e.g.,userrequests).Attemptsinsubsequentmodelshavenotgrappledwiththefundamentalproblemthatlow-to-highintegrityﬂowsarecommon.Denning’sworkonsecureinformationﬂowmodels[8]modelsinformationﬂowsbetweensubjectsofdifferentlabelsasalattice,butmodelsillegalﬂowsasanyﬂowthatviolatesthelatticestructure.TheLOMAC(lowwatermark)integritymodelalsopreventshighintegritysub-jectsfromactingonlowintegrityinformationﬂows,inthiscasebydowngradingthelevelofahighintegritysubjectuponreceiptofalowintegrityinformationﬂow[12].TheClark-Wilsonmodelacknowledgesthatinterfacesarere-quiredthatcansanitize(ordiscard)lowintegritydata,butallinterfacesmustbecapableofsanitization(ordiscard)andthebasisfortrustingtheseinterfacesisstillhighas-surance[7].WearesigniﬁcantlyinﬂuencedbytheClark-Wilsonmodel’sviewofrequirementsoninterfacesofhighintegrityprocesses,though.Lastly,therecentCaernarvonmodelallowssubjectstospanmultipleintegritylevelssuchthatasubject(i.e.,processrunningwithanintegritylabelrange)maybeabletoreadfromlowerintegritydatawithinitsintegrityrangesecurelywhilewritingtohigherintegritydatawithinitsintegrityrange[22].Unfortunately,thein-tegrityrangesmustbejustiﬁedbyassurance,wheresignif-icantlybroadrangeswillstillrequirehighassurance.Evenafter25years,wecannotescapetherequirementforhighassurance,whichplacestoohighaburdenontoomanyap-plicationstobepractical.MorerecentworkbyLiandZdancewic[18]presentaformaltypesystemthatcapturesintraprogramlabeledin-formationﬂow,withprovisionsfordowngradingofdata;type-checkingmaybeusedtoensureinformation-ﬂowse-curity.Onemayimagineapplyingtheirmethodtointerpro-cessﬂow,whichiscontrolledbyasecuritypolicyratherthanprogramsource.TheDOFILTER()primitivewepresentmaybeseenasadowngradingoperationinthiscon-text.6.2StaticAnalysisSeveralaccesscontrolpolicyanalysistoolshaveemerged,particularlyinthecontextofSELinux.Whiletheearlytoolsmainlysupportedqueryhandling,recenttools,suchasGokyo[14],SLAT[13],andApol[25],nowsup-portdifferentkindsofinformationﬂowanalysis.Forex-ample,SLATenableveriﬁcationofparticularinformationﬂowpolicies,andGokyoidentiﬁesandenablesresolutionofillegalinformationﬂows[16].Understandinginforma-tionﬂowsiskeytoachievingCW-Liteintegrity.Staticanalysishasalsobeenusedtoseparatetrustedanduntrustedcodeinotherways.ThePrivtranssystem[5]usessourcecodeanalysistotrytoautomateprivilegeseparation,dividingaprogramintotrustedanduntrustedprocesses.6.3Whole-systemAnalysisWhilethereiswidespreadagreementthatwhole-systemanalysisisdesirable,therehavebeenrelativelyfeweffortsthatactuallydosoonwidely-usedoperatingsystems.Re-cently,Chowetal.usedhardware-levelsimulationonavir-tualmachineinordertoperformadynamiccross-processtaintanalysis[6].Bycontrast,ourworkfocusesonstaticanalysistoprovecertainpropertiesaboutapplications’in-formationﬂowratherthaninferthemdynamically.Thus,weseeourapproachascomplementarytotheirs.7ConclusionandFutureWorkMaintaininginformation-ﬂowintegrityisanoldandim-portantproblem,butasyetanunsolvedoneinpractice:mostadministratorshavenotveriﬁedthatuntrusteduserscannotcompromiseinputstotrustedprogramsontheirsys-tems.Inthispaper,wehavedevelopedawaytoautomati-callyverifyameaningfulinformation-ﬂowintegrityprop-ertywithverysmallchangestoexistingtrustedapplica-tions.WecallthispropertyCW-Lite,sinceithasthesameinterprocessdependencysemanticsasthewell-establishedClark-Wilsonmodel,butdoesnotaddressClark-Wilson’swhole-programformalveriﬁcationrequirement.CW-Literequiresﬁlteringonlyforuntrustedinputinterfaces,asde-terminedbythesystem’ssecuritypolicy,andjustsimpleannotationstoexistingapplicationstoenableleast-privilegeenforcementandautomaticveriﬁcation.Onlyconﬂictreso-lutionrequiresmanualeffortbythesysadmin.WemodiﬁedtheSELinuxaccesscontrolsystemtoenforceCW-Liteanddevelopedtoolsthatsupporttheimplementationofcompat-ibleprogram.Weveriﬁedthepracticalityofourtoolsbyanalyzingprivilege-separatedOpenSSHandvsftpd,ﬁndingandﬁxingseveralintegrity-violatingconﬁgurationerrorsintheshippingSELinuxpolicy.ThemainfutureworkistoextendCW-Litetotheentiresoftwaretrustedcomputingbaseofthesystem.Inaddition,anaturalextensiontoourmodelwouldbeawaytoprovestaticallythatﬁlteringinterfaces’upgrade/discardoperationissemanticallycorrect,anapplication-speciﬁccheckthatmaybetractableifthetypesofallowedﬁlteringarere-stricted.AcknowledgementsDavidWagner,RobJohnson,NaveenSastry,MonicaChew,AJShankar,DavidMolnar,andChrisKarlofpro-videdvaluabletechnicalandstylisticfeedbackonthispa-per.References[1]D.BellandL.LaPadula.SecureComputerSystems:MathematicalFoundations(Volume1).TechnicalRe-portESD-TR-73-278,MitreCorporation,1973.[2]K.J.Biba.Integrityconsiderationsforsecurecom-putersystems.TechnicalReportMTR-3153,MitreCorporation,MitreCorp,BedfordMA,June1975.[3]P.Broadwell,M.Harren,andN.Sastry.Scrash:Asystemforgeneratingsecurecrashinformation.InProceedingsofthe11thUSENIXSecuritySymposium,August2003[4]W.E.BoebertandR.Y.Kain.Apracticalalterna-tivetohierarchicalintegritypolicies.InProceedingsofthe8thNationalComputerSecurityConference,Gaithersburg,Maryland,1985.[5]D.BrumleyandD.Song.Privtrans:Automaticallypartitioningprogramsforprivilegeseparation.InPro-ceedingsofthe13thUSENIXSecuritySymposium,August2004.[6]J.Chow,B.Pfaff,T.Garﬁnkel,K.Christopher,andM.Rosenblum.Understandingdatalifetimeviawholesystemsimulation.InProceedingsofthe13thUSENIXSecuritySymposium,August2004.[7]D..ClarkandD.R.Wilson.Acomparisonofcom-mercialandmilitarycomputersecuritypolicies.InProceedingsofthe1987IEEESymposiumonSecurityandPrivacy,May1987.[8]D.EDenning.ALatticeModelofSecureInformationFlow.InCommunicationsoftheACM,vol.19,no.5(May1976),pp.236-243.[9]J.Dyer,M.Lindemann,R.Perez,R.Sailer,S.W.Smith,L.vanDoorn,andS.Weingart.BuildingtheIBM4758securecoprocessor.IEEEComputer,(34)10:57-66,October2001.[10]D.EvansandD.Larochelle.Improvingsecurityusingextensiblelightweightstaticanalysis.IEEESoftware,Jan/Feb2002.[11]P.England,B.Lampson,J.Manferdelli,M.Peinado,andB.Willman.Atrustedopenplatform.IEEECom-puter,pp.55-62,July2003.[12]T.Fraser.LOMAC:LowWater-Markintegritypro-tectionforCOTSenvironments.InProceedingsofthe2000IEEESymposiumonSecurityandPrivacy,May2000.[13]J.Guttman,A.Herzog,andJ.Ramsdell.Informationﬂowinoperatingsystems:Eagerformalmethods.InWorkshoponIssuesintheTheoryofSecurity(WITS),2003.[14]T.JaegerandA.EdwardsandX.Zhang.Policyman-agementusingaccesscontrolspaces.ACMTransac-tionsonInformationandSystemSecurity(TISSEC),6(3),August2003.[15]T.Jaeger,R.Sailer,andX.Zhang.AnalyzingintegrityprotectionintheSELinuxexamplepolicy.InProceed-ingsofthe12thUSENIXSecuritySymposium,August2003.[16]T.Jaeger,R.Sailer,andX.Zhang.Resolvingcon-straintconﬂicts.InProceedingsofthe9thACMSym-posiumonAccessControlModelsandTechnologies,June2004.[17]D.Kilpatrick.Privman:Alibraryforpartitioningapplications.InProceedingsoftheUSENIX2003AnnualTechnicalConference,FREENIXTrack,April2003.[18]P.LiandS.Zdancewic.“DowngradingPoliciesandRelaxedNoninterference”.InProceedingsofthe2005SymposiumonPrinciplesofProgrammingLan-guages,January2005.[19]A.C.MyersandB.Liskov.Complete,safeinforma-tionﬂowwithdecentralizedlabels.InProceedingsofthe1998IEEESymposiumonSecurityandPrivacy,May1998.[20]NIST,ComputerSecurityDivision.Commoncrite-riaforITsecurityevaluation.Availablefromcsrc.nist.gov/cc/,2004.[21]N.Provos,M.FriedlandP.Honeyman.Prevent-ingprivilegeescalation.InProceedingsofthe12thUSENIXSecuritySymposium,August2003.[22]G.Schellhorn,W.Reif,A.Schairer,P.Karger,V.Aus-tel,D.Toll.Veriﬁcationofaformalsecuritymodelformultiapplicativesmartcards.InProceedingsofthe6thEuropeanSymposiumonResearchinComputerSecu-rity(ESORICS),2000.[23]NationalSecurityAgency.Security-EnhancedLinux(SELinux).http://www.nsa.gov/selinux,2001.[24]S.Smith.Outboundauthenticationforprogrammablesecurecoprocessors.InProceedingsofthe8thEu-ropeanSymposiumonResearchinComputerSecurity(ESORICS),2002.[25]TresysTechnology.Security-EnhancedLinuxre-search.www.tresys.com/selinux.html,2004.[26]C.Wright,C.Cowan,S.Smalley,J.Morris,andG.Kroah-Hartman.LinuxSecurityModules:Gen-eralsecuritysupportfortheLinuxkernel.InProceed-ingsofthe11thUSENIXSecuritySymposium,August2002.[27]X.Zhang,A.Edwards,andT.Jaeger.UsingCQUALforstaticanalysisofauthorizationhookplacement.InProceedingsofthe11thUSENIXSecuritySymposium,August2002.Appendix:GokyosupportforSELinuxobjectrelabelingBecausetheSELinuxpolicymodelalsopermitsobjectrelabeling,wemustconsiderinformationﬂowscausedbymodifyinganobjectandrelabelingittoanotherobjecttype.Therelabel(s,obj,o,o!)operationenablessubjectstochangeanobjectobj’slabelfromotoo!.Sincerelabelingdoesnotchangethecontentsofanobject,wedonotreallycarewhodoestherelabel,justthatitcanoccur.Also,itdoesnotmatterwhichspeciﬁcobjectcanberelabeled,sinceallobjectsofthesameobjecttypeareequivalentfromaninfor-mationﬂowperspective.Thus,weuseareﬁnedpredicaterelabel(o,o!).Next,weconsidersuccessiverelabelingoperationso1→o2→...→oi.Thetransitiveclosureoftherelabeloper-ationisdeﬁnedbyrelabel(o1,oi).Therelabelinformationﬂowrulestatesthatmod(s1,o1)∧relabel(o1,oi)∧obs(si,I,oi)→flow(s1,si,I).Gokyoaccountsforinformationﬂowsduetoarbitraryrela-beling.