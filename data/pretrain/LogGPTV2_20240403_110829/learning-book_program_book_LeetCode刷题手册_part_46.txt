的)。
·第i天如果是sell，那么这天能获得的最大收益是buy[i-1]+price[i-1]，因为只有
buy了才能sell。如果这一天是cooldown，那么这天能获得的最大收益还是sell[i-1]。所以
sel[] 的状态转移方程se11[i]=max(buy[i-1]+price[i-1]，se11[i-
1]）。se11[o]=0代表第一天就卖了，由于第一天不持有股票，所以sel[0]=0。se11[1]=
max（sel1[o]，buy[0]+prices[1]）代表第一天卖了，和第一天不卖，第二天卖做对比，钱多
的保存至sell[1]。
天是cooldown。如果这一天是cooldown，那么这天能获得的最大收益还是buy[i-1]。所以
buy[] 的状态转移方程buy[i]=max(se11[i-2]-price[i-1]，buy[i-
---
## Page 420
1]）。buy[o]=-prices[0]代表第一天就买入，所以金钱变成了负的。buy[1]=
max（buy[0]，-prices[1]）代表第一天不买入，第二天再买入。
代码
package leetcode
import(
"math"
//解法一DP
func maxProfit309(prices []int) int {
if 1en(prices)= 0; i-- {
if nums[i] == minNum {
res[i]  = 0
st.UpdateCount(nums [i])
continue
}
St. UpdateCount (nums [1])
res[i] = st.Query(minNum, nums[i]-1)
return res
318.MaximumProductofWordLengths
题目
Given a string array words , find the maximum value of 1length(word[i])≈ 1ength(word[j])
where the two words do not share common letters. You may assume that each word will contain
only lower case letters. If no such two wordls exist, return 0.
---
## Page 423
Example 1:
Input: ["abcw", "baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:
Input: ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:
Input: ["a","aa","aaa","aaaa"]
Output:0
Explanation: No such pair of words.
题目大意
给定一个字符串数组words，找到length(word[ij])*length(word[ij])的最大值，并且这两个单词不含
有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回0。
解题思路
·在字符串数组中找到2个没有公共字符的字符串，并且这两个字符串的长度乘积要是最大的，求
这个最大的乘积。
·这里需要利用位运算&运算的性质，如果X&Y=0，说明×和Y完全不相同。那么我们将字
符串都编码成二进制数，进行&运算即可分出没有公共字符的字符串，最后动态维护长度乘积最
大值即可。将字符串编码成二进制数的规则比较简单，每个字符相对于'a的距离，根据这个距离
将1左移多少位。
a 1->1
b 2=>10
C 4=>100
ab 3=>11
ac 5->101
abc 7->111
T0000000000000000000000000000020
代码
package leetcode
---
## Page 424
func maxProduct318(words []string) int {
if words == nil 11 len(words) == 0 {
return 0
1ength, value, maxProduct := len(words), make([]int, len(words)), 0
for i:= 0;i
maxProduct){
maxProduct = 1en(words[i])  1en(words[j])
return maxProduct
322.CoinChange
题目
You are given coins of different denominations and a total amount of money amount. Write a
function to compute the fewest number of coins that you need to make up that amount. If that
amount of money cannot be made up by any combination of the coins, return -1 .
Example 1:
Input: coins = [1, 2, 5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:
Input: coins = [2], amount = 3
output: -1
Note:
You may assume that you have an infinite number of each kind of coin.
---
## Page 425
题目大意
给定不同面额的硬币coins和一个总金额amount。编写一个函数来计算可以凑成总金额所需的最少的
硬币个数。如果没有任何一种硬币组合能组成总金额，返回-1。
解题思路
·给出一些硬币和一个总数，问组成这个总数的硬币数最少是多少个？
·这一题是经典的硬币问题，利用DP求解。不过这一题的测试用例有一个很大的值，这样开DP数
组会比较浪费空间。例如[1,1000000000,500000]有这样的硬币种类，要求组成
2389412493027523这样的总数。那么按照下面的解题方法，数组会开的很大，非常浪费空间。
这个时候用DFS解题会节约一点空间。
代码
package leetcode
func coinchange(coins []int，amount int) int {
dp := make([]int, amount+1)
dp[0] = 0
for i := l; i  amount {
return -1
return dp[amount]
324.WiggleSort ll
题目
Given an unsorted array nums, reorder it such that nums[0]  nums[2]  nums[3]..
Example 1:
---
## Page 426
Input: nums = [1, 5, 1, 1, 6, 4]
Output: 0ne possible answer is [1, 4, 1, 5, 1, 6].
Example 2:
Input: nums = [1, 3, 2, 2, 3, 1]
Output: 0ne possible answer is [2, 3, 1, 3, 1, 2].
Note:
You may assume all input has valid answer.
Follow up:
Can you do it in O(n) time and/or in-place with O(1) extra space?
题目大意
给定一个数组，要求给它进行"摆动排序”，“摆动排序*即：nums[0]nums[2]5,所以可以把6放在第1个奇数位的位置。left和i同时右
移。
Step 2:
original idx: 0
1
Mapped idx:
3
Array:
13
6
Left
i
Right
nums[3]=5=5,5可以放在下标为3的位置，由于5已经和中间数相等了，所以只后移1。
Step 3:
original idx: 0
Mapped idx:
1
0
Array:
13
6
Left
i
Right
nums[5]=25,由于13比中位数大，所以可以把13放在第2个奇数位的位置，并移动left和i。
Step Fina1:
Originalidx:0
Mapped idx:
5
Array:
b
A
1.3
Left
i
Right
1>Right,退出循环，最终摆动排序的结果是5641325。
具体时间见代码，时间复杂度O（n）和空间复杂度O（1)。
代码
---
## Page 429
package leetcode
import(
"sort"
//解法一
func wigglesort(nums []int) {
if 1en(nums) median {
nums[indexMap(left, n)], nums[indexMap(i, n)] = nums[indexMap(i, n)],
nums [indexMap(1eft, n)]
left++
i++
}else if nums[indexMap(i, n)]< median {
nums[indexMap(right, n)], nums [indexMap(i, n)] = nums[indexMap(i, n)],
nums [indexMap(right, n)]
right--
}else{
i++
func indexMap(index,n int) int {
return (1+2*index) %(n11)
func findkthLargest324(nums []int, k int) int {
if 1en(nums)== 0 {
return 0
return selection324(nums, 0, 1en(nums)-1, 1en(nums)-k)