title:BAF: An Efficient Publicly Verifiable Secure Audit Logging Scheme
for Distributed Systems
author:Attila Altay Yavuz and
Peng Ning
2009 Annual Computer Security Applications Conference
BAF: An Efﬁcient Publicly Veriﬁable Secure Audit
Logging Scheme for Distributed Systems
Attila A. Yavuz and Peng Ning
Department of Computer Science
North Carolina State University
{aayavuz, pning}@ncsu.edu
Raleigh, USA
Abstract—Audit logs, providing information about the current
and past states of systems, are one of the most important parts
of modern computer systems. Providing security for audit logs
on an untrusted machine in a large distributed system is a
challenging task, especially in the presence of active adversaries.
In such a system, it is critical to have forward security such
that when an adversary compromises a machine, she cannot
modify or forge the log entries accumulated before the compro-
mise. Unfortunately, existing secure audit logging schemes have
signiﬁcant limitations that make them impractical for real-life
applications: Existing Public Key Cryptography (PKC) based
schemes are computationally expensive for logging in task inten-
sive or resource-constrained systems, while existing symmetric
schemes are not publicly veriﬁable and incur signiﬁcant storage
and communication overheads.
In this paper, we propose a novel forward secure and aggregate
logging scheme called Blind-Aggregate-Forward (BAF) logging
scheme, which is suitable for large distributed systems. BAF
can produce publicly veriﬁable forward secure and aggregate
signatures with near-zero computational, storage, and communi-
cation costs for the loggers, without requiring any online Trusted
Third Party (TTP) support. We prove that BAF is secure under
appropriate computational assumptions, and demonstrate that
BAF is signiﬁcantly more efﬁcient and scalable than the previous
schemes. Therefore, BAF is an ideal solution for secure logging
in both task intensive and resource-constrained systems.
Keywords-Applied cryptography; secure audit logging; digital
forensics; forward security; signature aggregation.
I. INTRODUCTION
Audit logs are a fundamental digital forensic mechanism
for providing security in computer systems. They are used to
keep track of important events about the system activities such
as program executions/crashes, data modiﬁcations, and user
activities. Providing information about the current and past
states of systems, audit logs are invaluable parts of system
security. The forensic value of audit logs makes them an
attractive target for attackers, who aim to erase the traces of
their malicious activities recorded by logs. Indeed, the ﬁrst
target of an experienced attacker is generally the audit logs
[1], [2].
Some naive audit log protection techniques include using
a bug-free tamper-resistant hardware (to prevent the attacker
This work is supported by the U.S. National Science Foundation under
grants CAREER-0447761 and 0910767, and the U.S. Army Research Ofﬁce
under grant W911NF-08-1-0105 managed by NCSU Secure Open Systems
Initiative (SOSI). The contents of this paper do not necessarily reﬂect the
position or the policies of the U.S. Government.
from reaching audit logs), and maintaining a continuous and
secure communication channel between each logger and re-
mote trusted entity(ies) (to upload logs to a trusted entity in
real-time before the attack occurs). However, as pointed out
by some recent studies (e.g., [1], [3]–[5]), these techniques are
impractical for modern computer systems. In large distributed
systems (e.g., virtual computing cloud), it is impractical to
assume a continuous end-to-end real-time communication be-
tween a trusted center and a logger [6]. Similarly, assuming a
tamper-resistant hardware being “bug free” and guaranteeing
its presence on all types of platforms are equally impractical
(e.g.,
implantable devices [7] and
wireless sensors [8]).
logging in smart cards,
To address the above problems, a set of cryptographic
countermeasures have been proposed to enable secure logging
on untrusted machines, without assuming a tamper-resistant
hardware or continuous real-time log veriﬁers (e.g., [1]–[3],
[5], [9]). In the setting where there is no tamper resistant
hardware nor continuous real-time communication, the un-
trusted machine has to accumulate audit log entries when the
log veriﬁers are not available. After the attacker compromises
the system, no cryptographic technique can prevent her from
manipulating the post-attack log entries (due to her control
over the system). However, it is critical to prevent the attacker
from manipulating the log entries previously accumulated
before the compromise. Such a security property is referred to
as forward security [1], [3], [4].
One group of these schemes rely on symmetric cryptogra-
phy to provide forward security in a computationally efﬁcient
way by using forward-secure Message Authentication Codes
(MACs), Pseudo Random Number Generators (PRNGs) (e.g.,
[4], [5], [10]), and one-way hash chains (e.g., [2], [5], [8]).
Despite their simplicity and computational efﬁciency, these
schemes have signiﬁcant limitations: (i) Due to their symmet-
ric nature, these schemes cannot achieve public veriﬁability.
As a result, they either require full symmetric key distribution
(e.g., FssAgg-MAC [8]) or online TTP support (e.g., [2],
[4], [5], [10]). While full symmetric key distribution incurs
the online
signiﬁcant storage overhead to system entities,
TTP requirement brings architectural difﬁculties,
increases
communication overhead, and makes the system vulnerable to
certain attacks (e.g., truncation and delayed detection attacks
[1], [3]). (ii) All the above schemes incur high storage and
communication overheads to the loggers, since they require
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.28
219
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
storing and transmitting an authentication tag for each log
entry (or logging period) (e.g., [2], [4], [5], [10]).
The other group of schemes rely on Public Key Cryp-
tography (PKC). The scheme in [11] extends the forward-
secure MAC strategy to the PKC domain to achieve public
veriﬁability. However, it still incurs signiﬁcant storage and
communication overheads due to the requirements of storing
and transmitting an authentication tag for each log entry or log-
ging period. Recently, a series of studies have been proposed
to reduce storage and communication overheads via forward
secure and aggregate schemes (e.g., FssAgg-BLS [8], FssAgg-
BM and FssAgg-AR [1], [3], [9]). These schemes require
only one authentication tag for all the accumulated log entries
(due to the ability of aggregating individual authentication
tags into a single compact tag), and therefore are storage
and bandwidth efﬁcient. Unfortunately, all these PKC-based
schemes are computationally expensive for the logger and even
more for the log veriﬁer. These costs make them impractical
for logging in task-intensive or resource constrained systems.
The above discussion indicates that an efﬁcient audit log-
ging mechanism refrained from all the above limitations is
solely needed. In order to fulﬁll this requirement, we propose a
novel forward secure and aggregate logging scheme for secure
audit logging in distributed systems, which we call Blind-
Aggregate-Forward (BAF) logging scheme. BAF can address
all the aforementioned limitations of the existing approaches
simultaneously. We summarize the properties of BAF below:
1) Efﬁcient Log Generation: In BAF, the computational
cost of logging a single data item is only three crypto-
graphic hash operations. This is as efﬁcient as existing
symmetric schemes (e.g., [2], [4], [5], [8], [10]), and
is much more efﬁcient
than all existing PKC-based
schemes (e.g., [1], [3], [8], [9], [11]).
2) Logger Storage/Bandwidth Efﬁciency: BAF introduces
near zero storage and communication overheads to the
logger. That is, independent from the number of time
periods or data items to be signed, the storage over-
head of the logger is always constant and so is the
size of the resulting signature (which is equal
to a
single compact signature). Thus, our scheme is much
more storage/bandwidth efﬁcient than existing symmet-
ric schemes (e.g., linear overhead on the logger [2], [4],
[5], [8], [10]).
3) Efﬁcient Log Veriﬁcation: In BAF, the computational
cost of verifying a single log entry is only a single
ECC scalar multiplication, which is more efﬁcient than
existing PKC-based schemes (e.g., [1], [3], [8], [9],
[11]).
4) Public Veriﬁability: BAF produces publicly veriﬁable
signatures (which implies no full symmetric key dis-
tribution), and therefore is much more scalable for
distributed systems than symmetric schemes (e.g., [2],
[4], [5], [8], [10]).
5) Ofﬂine TTP and Immediate Veriﬁcation: Unlike some
previous schemes (e.g., [2], [5]), BAF does not need
online TTP support to enable log veriﬁcation. Hence, it
eliminates the bandwidth overhead that stems from the
frequent communication between log veriﬁers and the
TTP. This also makes BAF more scalable and reliable
due to the simple architectural design and being free
of single point of failures. Last, since BAF achieves
immediate veriﬁcation, it is secure to delayed detection
attacks [1]1.
The above properties make BAF a perfect choice for secure
audit logging in large distributed systems even for highly
resource constrained environments such as smart cards, im-
plantable devices [7] and wireless sensors [8].
The remainder of this paper is organized as follows. Section
II provides the BAF syntax and security model. Section III
describes BAF in detail. Section IV gives detailed security
analysis of BAF. Section V presents performance analysis and
compares BAF with previous approaches. Section VI brieﬂy
discusses the related work. Section VII concludes this paper.
II. SYNTAX AND SECURITY MODEL
We ﬁrst give notation and assumptions used in our scheme.
We then give the BAF syntax to clarify generic BAF algo-
rithms, following the example of [8], [9], [12], [13]. Such a
syntax enables us to formally deﬁne the security model, in
which BAF is analyzed for the forward secure and aggregate
unforgeability against adaptive chosen plaintext attacks. The
actual algorithms are presented in Section III, while the
analysis of BAF security model is provided in Section IV.
A. Syntax
Notation. G is a generator of group G deﬁned on an Elliptic
Curve (EC) E(Fp) over a prime ﬁeld Fp, where p is a large
prime number and q is the order of G. kG, where k is an
integer, denotes a scalar multiplication. x R← Fp denotes that
x is selected uniformly from Fp. Operators || and |x| denote
the concatenation operation and the bit length of variable x,
respectively. H1 and H2 are two distinct Full Domain Hash
(FDH) functions [14], which are deﬁned as H1 : {0, 1}|sk| →
{0, 1}|p| and H2 : {0, 1}∗ → {0, 1}|p|, respectively, where
sk R← Fp.
Assumption 1 The cryptographic primitives used in our
scheme possess all
the required semantic security proper-
ties [15]: H1/H2 are strong collision-free and secure FDHs
[14], producing indistinguishable outputs from the random
uniform distribution (i.e., behaves as a Random Oracle [16]).
Elliptic Curve Discrete Logarithm Problem (ECDLP) [17] is
intractable with appropriate parameters. That is, for a given
random point Q ∈ E(Fp), it is computationally infeasible to
determine an integer k such that Q = kG, where G ∈ G.
BAF is an integrated scheme that achieves both forward
security and sequential signature aggregation simultaneously.
Hence, BAF has a Key Update algorithm that follows the
1Delayed detection attack occurs if the log protection mechanism cannot
achieve immediate veriﬁcation (due to the lack of online TTP support). In
this case, log veriﬁers cannot detect whether the log entries are manipulated
until the TTP provides necessary keying information to them. Details of this
problem is discussed in Section IV.
220
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
“evolve-and-delete strategy” to achieve forward security sim-
ilar to generic forward secure signatures (e.g., [18]). More-
over, it has Key Generation, Aggregate Signature Generation,
Aggregate Signature Veriﬁcation algorithms similar to the
aggregate signatures (e.g., [8], [12], [13], [19], [20]).
Deﬁnition 1 BAF is four-tuple of algorithms BAF =
(Kg, U pd, ASig, AV er) that behave as follows:
• BAF.Kg: BAF.Kg is the key generation algorithm, which
takes the maximum number of key updates L and identity
of signer i (IDi) as the input and returns L public keys
(pk0, . . . , pkL−1), initial secret key sk0, and index n R←
Fp for IDi as the output.
• BAF.Upd: BAF.U pd is the key update algorithm, which
takes the current secret key skj where j ≤ L − 1 as the
input, and returns the next secret key skj+1 as the output.
BAF.U pd also deletes skj from the memory.
• BAF.ASig: BAF.ASig is the aggregate signature genera-
tion algorithm, which takes skj, data item Dj ∈ {0, 1}∗
to be signed, and an aggregate signature σ0,j−1 (for
previously accumulated data items) as the input. It returns
an aggregate signature σ0,j by folding the individual
signature of Dj (i.e., σj) into σ0,j−1.
• BAF.AVer: BAF.AV er is the aggregate signature veriﬁ-
cation algorithm, which takes (D0, . . . , Dj) ∈ {0, 1}∗, its
associated aggregate signature σ0,j, index n and public
keys (pk0, . . . , pkj) of IDi as the input. If the signature
is successfully veriﬁed, BAF.AV er returns success. Oth-
erwise, it returns failure. We require that any σ generated
by BAF.ASig is accepted by BAF.AV er.
Deﬁnition 2 BAF deﬁnes two key update models for the
accumulated data: Per-data item and per-time interval models.
In per-data item model, each collected data item is signed
and aggregated as soon as it is received. In per-time interval
model, in a given time interval tw, the signer accumulates
each collected data item and signs them once at the end
of tw as one large data item. These two models are the
same from the perspective of the “evolve-and-delete” strategy;
however, they allow a security-storage trade-off that can be
decided according to application requirements. The per-data
item model guarantees forward security of each individual log
entry, but imposes higher storage overhead on the veriﬁer side.
In contrast, the per-time interval model guarantees forward
security for across time intervals, but
incurs less storage
overhead. That is, if the attacker compromises the system
in tw, she can forge the log entries accumulated from the
beginning of tw. However, she cannot forge the log entries
accumulated before tw.
BAF behaves according to the same-signer-distinct-message
model similar to existing forward secure and aggregate logging
schemes (e.g, [1], [3], [8], [9]). In this model,
the same
logger computes aggregate signatures of distinct audit logs
accumulated-so-far. This model is an ideal option for secure
audit logging applications (e.g., [1]–[3], [5], [9], [21]), since
each logger is only responsible for her own audit
logs.
Note that some aggregate signature schemes (e.g., [12], [13],
[19]) use the different-signer-distinct-message model (e.g., for
secure routing purposes), which is not necessary for secure
audit logging.
B. Security Model
The security of BAF is deﬁned as the non-existence of a
capable adversary A, conﬁned with certain games, existen-
tially forging a BAF signature even under the exposure of
the current keying material. Since BAF aims to achieve both
secure sequential signature aggregation and forward security
simultaneously, we develop our security model based on the
security model of aggregate signatures in [12], [13], [19], [20],
generic forward secure signature model in [18], and hybrid
security model of FssAgg schemes in [8], [9]. The security
model of BAF is deﬁned below:
Deﬁnition 3 BAF is an existentially unforgeable forward se-
cure and aggregate signature scheme against adaptive chosen
message attacks in the random oracle model [16],
if no
Probabilistic Polynomial Time (PPT) bounded adversary A
can win the following game with a non-negligible probability.
1) Setup. A is provided with a challenge public key pkc
and parameters L and n.
2) Queries. Beginning from j = 0, proceeding adap-
tively, A is provided with a BAF signing oracle
O under secret key skj. For each query, A sup-
plies a valid BAF signature σ0,j−1 on some mes-
sages D0 ∈ {0, 1}∗
, . . . , Dj−1 ∈ {0, 1}∗ signed un-
der sk0, . . . , skj−1, where both messages and keys are
of her choice. A also queries an additional message
Dj ∈ {0, 1}∗ of her choice once, which is signed by
O under skj. A then proceeds into the next time period
and is provided with oracle O under skj+1. The adaptive
queries continue, until A “breaks-in”.
3) Break-in. When A decides to break-in in time period tT ,
4) Forgery. Eventually, A halts and outputs an aggregate
t . A
∗
signature σ
∗
wins the game, if (i) t < T , (ii) σ
0,t is veriﬁed by
∗
BAF.AV er successfully, and (iii) σ
0,t is non-trivial
(i.e., A did not ask a signature on D
∗
t for time period t
in the query phase).
she is allowed to access secret key skT .
∗
0,t on D
∗
0, . . . , D
∗
t under sk
∗
0, . . . , sk
III. THE PROPOSED SCHEME
In this section, we present our proposed BAF scheme. We
ﬁrst give an overview of the proposed scheme and then give
the detailed description.
A. Overview
The objective of BAF is to achieve six seemingly conﬂicting
goals at the same time to compute and verify forward secure
and aggregate signatures for secure audit logging purposes,