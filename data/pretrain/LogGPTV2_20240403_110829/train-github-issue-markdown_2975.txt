Hello,
I want to propose to you to extend router url_parser in angular, to make it
smarter.
On a big projects, I have to deal with complex routes which have optional
params and I want to work only with one route and also keep it simple and
clean, also I don't want duplicated urls or empty segments in them or
something like that.
For example, if I have a pagination on the page `/cars`, I can access the same
page via `/cars` or `/cars/page-2`. Also I don't want to have url like
`/cars/page-1` because it is the same as `/cars`.
To avoid this kind of problems, I made for my backend framework a smarter
routes which resolve all issues which I described above, and I will be happy
if you will implement it too in the standard angular router to make all the
community happier.
I have made them in that way:
  1. `{?:|}?` \- You can define a parameter which may be optional, with a default value and restrict it by regex, or just add "?" symbol at the end of `paramName`, to make it greedy(for example `{systemName?}` is equal to `(.+?)`, `{systemName?}?` is equal to `(.+?)?`).
  2. `[]` \- You can define an optional part of the route if it would not be valid in the segment from the inside. This syntax goes recursively. For example `[/engine/{engineName}[/year/{engineYear}]/v/{engineVersion}]`
For example I have a route with syntax
`/cars[/category/{categoryName?}][/page/{page:1|[1-9][0-9]*}]`.
`categoryName` is greedy and required in his segment and could be any symbol.
If it does't exists, all the segment will disappear. Why greedy? Because it
has an optional segment after, which will match if you will not set the
greedy.  
`page` is also required in his segment, has a default value and could be any
number which starts from `1`.
It will be valid via next urls:
  1. If i call it with no params or with `{page: 1}`, i will get `/cars`, because it doesn't have `categoryName` and the `page` value is the same as default value.
  2. If i call it with `{page: 2}`, i will get `/cars/page/2`.
  3. If i call it with `{categoryName: 'supercar'}` or with `{categoryName: 'supercar', page: 1}`, I will get `/cars/category/supercar`.
  4. If i call it with `{categoryName: 'supercar', page: 2}`, I will get `/cars/category/supercar/page/2`.
You get the idea how smart can they be? And this is a big plus for the seo.
Cheers.