[56] H. D. T. Nguyen, D. Qi, A. Roychoudhury, and S. Chandra, “Semﬁx:
Program repair via semantic analysis,” in Proceedings of the IEEE/ACM
International Conference on Software Engineering (ICSE), 2013.
[57] “Nps,” https://wiki.paparazziuav.org/wiki/NPS, 2021.
[58] “Paparazzi parameter list xml,” https://tinyurl.com/np2e6v2r, 2021.
[59] “Paparazzi uas,” https://github.com/paparazzi/paparazzi/, 2021.
[60] “Paparazzi chat channel,” https://gitter.im/paparazzi/discuss, 2021.
[61] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin,
C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan et al., “Automatically
patching errors in deployed software,” in Proceedings of the ACM
Symposium on Operating Systems Principles (SOSP), 2009.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
151840
[62] E. Plaku, L. E. Kavraki, and M. Y. Vardi, “Falsiﬁcation of ltl safety
properties in hybrid systems,” in Proceedings of
the International
Conference on Tools and Algorithms for the Construction and Analysis
of Systems (TACAS), 2009.
[63] “Pprzlink,” https://github.com/paparazzi/pprzlink, 2021.
[64] “Px4 drone autopilot,” https://github.com/PX4/PX4-Autopilot, 2021.
[65] “Px4 parameter list xml,” https://tinyurl.com/5fhcuydx, 2021.
[66] “Px4 blog,” https://discuss.px4.io, 2021.
[67] “Px4 chat channel,” https://gitter.im/PX4/Firmware, 2021.
[68] “Px4-documentation,” https://docs.px4.io/master/en/, 2021.
[69] “Pymavlink,” https://github.com/ArduPilot/pymavlink, 2021.
[70] “Pyparsing,” https://github.com/pyparsing/pyparsing, 2021.
[71] Z. Qi, F. Long, S. Achour, and M. Rinard, “An analysis of patch
plausibility and correctness for generate-and-validate patch generation
systems,” in Proceedings of the International Symposium on Software
Testing and Analysis (ISSTA), 2015.
[72] C. Ragkhitwetsagul, J. Krinke, M. Paixao, G. Bianco, and R. Oliveto,
“Toxic code snippets on stack overﬂow,” IEEE Transactions on Software
Engineering (TSE), 2019.
[73] N. M. Rodday, R. d. O. Schmidt, and A. Pras, “Exploring security
vulnerabilities of unmanned aerial vehicles,” in Proceedings of the
IEEE/IFIP Network Operations and Management Symposium (NOMS),
2016.
[74] S. Schechter, “Common pitfalls in writing about security and privacy
human subjects experiments, and how to avoid them,” Microsoft, 2013.
[75] M. Shahzad, M. Z. Shaﬁq, and A. X. Liu, “A large scale exploratory
analysis of software vulnerability life cycles,” in Proceedings of the
IEEE/ACM International Conference on Software Engineering (ICSE),
2012.
[76] “Tau labs,” https://github.com/TauLabs/TauLabs, 2021.
[77] “Tilt-bug,” https://tinyurl.com/6yj5bx4v, 2021.
[78] “Update math functions,” https://tinyurl.com/eaez8sjn, 2021.
[79] W. Weimer, S. Forrest, C. Le Goues, and T. Nguyen, “Automatic program
repair with evolutionary computation,” Communications of the ACM,
2010.
[80] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest, “Automatically
ﬁnding patches using genetic programming,” in Proceedings of the
IEEE/ACM International Conference on Software Engineering (ICSE),
2009.
[81] K. C. Zeng, S. Liu, Y. Shu, D. Wang, H. Li, Y. Dou, G. Wang, and
Y. Yang, “All your gps are belong to us: Towards stealthy manipulation
of road navigation systems,” in Proceedings of the USENIX Security
Symposium (USENIX SEC), 2018.
[82] L. Zhang, W. He, J. Martinez, N. Brackenbury, S. Lu, and B. Ur, “Autotap:
synthesizing and repairing trigger-action programs using ltl properties,”
in Proceedings of the IEEE/ACM International Conference on Software
Engineering (ICSE), 2019.
[83] L. Zhang, W. He, O. Morkved, V. Zhao, M. L. Littman, S. Lu, and
B. Ur, “Trace2tap: Synthesizing trigger-action programs from traces of
behavior,” The ACM on Interactive, Mobile, Wearable and Ubiquitous
Technologies, 2020.
A. Analysis of Bug Types
APPENDIX
We collected 1,554 patches (called Pset) from 2014 to 2021
on their GitHub repositories [8], [64]. Two authors of this paper
reviewed and classiﬁed each patch into one of three types: (1)
ﬁxing a logic bug, (2) patching a memory bug, and (3) minor
issues. Here, the minor issues cannot negatively change an
RV’s behavior, e.g., updating comments and code refactoring.
We concluded that Pset ﬁxed 1,234 logic bugs, 23 memory
bugs, and 297 minor issues. We excluded the 297 minor issues
from Pset because they are not ﬁxing bugs. Then, we noticed
that 98.2% (1,234/1,257) and 1.8% (23/1,257) of bugs are
logic and memory bugs, respectively.
B. Automatically Extracting Policies
Previous works have proﬁled the normal behaviors of (1)
programs from values of memory locations [61], and (2) IoT
Formula: If statei is true, then actionj is on
Bug: {(statei = false),  (actionj = on)}
No
(cid:91)
POST is not  
triggered
No
(cid:90)
POST is triggered 
regardless of PRE
Yes
UPDATE
REUSE
Yes
Yes
DISABLE
Yes
Other
Patch types
CHECK
Violated formula and RV’s states
Yes
- COM_POS_FS_DELAY = -1
- Valid range: 1 - 100
(cid:89)
Parameter has an 
abnormal value
No
(cid:88)
RV changes
a constant state
If Mode is LAND,
then Tiltt is Tiltt-1
No
(cid:92)
POST is not triggered 
after a flight stage
ADD
No
Fig. 12: Flow diagram of PGPATCH’ patch type analyzer. POST
and PRE denote post-conditions and preconditions of a PPL
formula, respectively.
if i = j then
for i < α; i + + do
for j < α; j + + do
(cid:2) j-th input will be Inputbug
(cid:2) Main
(cid:2) Mutate a test case Testset
Testset(j) ← inputbug
end if
Testset(j) ← Missionset(j)
end for
C ← CHECK_POLICY(Testset, β)
Algorithm 1 Patch Type Analyzer for ADD and REUSE
Input: A set of default mission plans Missionset, a size of Missionset α,
a set of inputs to trigger a logic bug Inputbug, a size of Missionset and
Inputbug β, a simulator SIM, PPL formulas φ
Output: A patch type P
1: function INFER_TYPE(Missionset, α)
2:
3:
4:
5:
6:
7:
8:
9:
end for
10:
P ← PATCH_TYPE(C)
11:
return P
12:
13: end function
14: function CHECK_POLICY(Testset, β)
while V = /0 or k < β do
15:
input ← Testset(k)
16:
S ← SIM.execute(input)
17:
V ← POLICY_CHECK(φ, S)
18:
k = k + 1
19:
if V (cid:3)= /0 then
20:
21:
end if
22:
end while
23:
24: end function
(cid:2) Get an input
(cid:2) Collect RV’s states (S) from SIM
(cid:2) Check policy violations
(cid:2) Pick a patch type based on C
(cid:2) Assign a next ﬂight state
return (cid:4)V, S, k(cid:5)
(cid:2) Get bug context (C)
systems and industrial control systems from actuator and sensor
traces [26], [83]. One may consider using these methods for
proﬁling the correct behavior of RVs to generate PPL formulas
for PGPATCH. Yet, since RVs operate in dynamic outdoor
environments, an RV’s correct behavior is inﬂuenced by many
different factors (including user commands and environmental
conditions, such as wind, other vehicles, and obstacles). For
this reason, proﬁling complete normal behaviors from the huge
input space of RVs is not scalable because it requires testing
each user input combination under all possible environmental
conditions.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
161841
RV
software
Bug
type
# of
ﬁxed bugs
Removed
feature Misimplementation Unimplementation
Root cause
Incorrect valid
range check
Crash
on the ground
Physical effect
Unstable
attitude/position
Performance
degradation
ArduPilot
PX4
Paparazzi
Logic
Memory
Logic
Memory
Logic
Memory
Total
20
120
24
0
17
0
181
0
0
0
0
0
0
0
4
0
3
0
0
0
7
0
0
0
0
0
0
0
16
120
21
0
17
0
174
7
120
0
0
0
0
127
9
0
23
0
17
0
49
0
0
0
0
0
0
0
TABLE VI: Summary of the ﬁxed 181 bugs that were discovered by PGFuzz.
RV
software
Bug
type
# of
ﬁxed bugs
Removed
feature Misimplementation Unimplementation
Root cause
Incorrect valid
range check
Crash
on the ground
Physical effect
Unstable
attitude/position
Performance
degradation
ArduPilot
PX4
Paparazzi
Logic
Memory
Logic
Memory
Logic
Memory
Total
31
1
24
0
19
2
77
TABLE VII: Summary of the ﬁxed 77 bugs that are reported in GitHub repositories.
16
1
20
0
15
1
53
13
0
0
0
0
0
13
2
1
1
0
5
2
11
12
0
14
0
9
0
35
2
0
0
0
2
0
4
0
0
4
0
2
1
7
5
0
0
0
2
0
7
Incorrect
state
4
0
1
0
0
0
5
Incorrect
state
12
0
9
0
3
0
24
C. Details of the Fixed Bugs
In our evaluation (Section VII), PGPATCH succeeded in
patching a total of 258 out of 297 logic bugs. We present the
bug types, their root cause, and physical effects in Table VI
and Table VII.
Root Causes of Bugs. We group the root causes of the