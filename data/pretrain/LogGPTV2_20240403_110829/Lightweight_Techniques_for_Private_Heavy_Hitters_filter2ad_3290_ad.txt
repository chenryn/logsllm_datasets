clients in our setting. The problem is that if the servers only
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
768
This gives the servers a way to check for client misbehavior:
the servers can just check that their DPF keys have identical public
parts and then conclude that the keys must represent shares of a
vector that contains a “1” at a single relevant index, at most.
The technical idea. Working in the random-oracle model [6],
where the underlying PRG is a truly random function, we show
that any cheating strategy by a client in Gen is restricted in the
following sense. Let k0, k1 denote the private parts of DPF keys
and pp the public part. With high probability, a malicious client
1, pp∗), and is limited in the number
that generates DPF keys (k∗
of calls it makes to the random oracle, can ﬁnd at most one string
x such that Eval(k∗
1, pp∗, x) = 1. In contrast,
the client can easily generate keys and multiple strings x such
that Eval(k∗
1, pp∗, x) = 0, as in a valid key, or
Eval(k∗
1, pp∗, x) is a random value in the (large)
output space. However, ﬁnding two pairs of keys whose outputs
evaluate to “1” in two diﬀerent known locations is infeasible.
Intuitively, the structure of the keys enables the client to fully
control a non-zero value at only one location x.
0, pp∗, x) + Eval(k∗
0, pp∗, x) + Eval(k∗
0, pp∗, x) + Eval(k∗
0, k∗
sketch the client-provided DPF keys on the strings in the subset S,
a cheating client can potentially gain undue inﬂuence by having
its DPF keys evaluate to 1 on many diﬀerent strings in {0, 1}n.
The client will evade detection as long as the client’s keys evaluate
to 1 on only a single point in the subset S.
We address this second problem by giving a reﬁned analysis
of our DPF construction, which is based on the state-of-the-art
DPF construction of [11]. In that construction, each DPF key
has a “public part”—which is identical for both keys—and a
“private part”—which diﬀers between the two DPF keys. In
the full version of this paper [8], we prove that using this DPF
construction, when instantiated in the random-oracle model, and
with a large output space, it is computationally infeasible for a
client to ﬁnd malformed DPF keys that (a) have the same public
part and (b) represent the sharing of a vector that is 1 at more
than one position known to the client. Moreover, it is possible to
eﬃciently extract the position of 1 from the oracle queries made
by a malicious client. We term this strengthened type of DPF an
“extractable DPF.”
When used in combination with the sketching approach of
Section 4.2, this fact essentially implies a complete defense
against malicious clients. Indeed, uniqueness of the “1” location
means that only this speciﬁc vote can be counted, since other
nonzero locations will either be caught by the sketching or will
not be part of S and therefore not inﬂuence the output.
Overall, combining the malicious-secure sketching technique
of Section 4.2 with extractable DPFs gives a protocol for private
subset histograms that defends privacy against a malicious server
and correctness against a malicious client. We note that a similar
combination can be useful for other applications of DPF in
which the DPF is only evaluated on a strict subset of the input
domain. Such applications include private information retrieval
by keywords, private distributed storage, and more [11].
The following deﬁnition formalizes this notion of extractable
DPF in the random-oracle model. Since we envision other
applications, we consider here a general (Abelian) output group
G, rather than a ﬁnite ﬁeld F. Syntactically, an extractable DPF
769
scheme is a DPF scheme (Gen, Eval) with the modiﬁcation that
the Gen algorithm has an additional output pp (public parameters)
that the Eval algorithm takes as an additional input. Our analysis
assumes that the input length n, group G, and target nonzero
payload β∗ (β∗ = 1 by default) are chosen independently of the
random oracle.
Deﬁnition 1 (Extractable DPF, Simpliﬁed). We say that a DPF
scheme in the random-oracle model is extractable if there is an
eﬃcient extractor E, such that every eﬃcient adversary A wins
the following game with negligible probability in the security
parameter λ, taken over the choice of a random oracle G and the
secret random coins of A.
• (1n,G, β∗) ← A(1λ), where G is an Abelian group of size
|G| ≥ 2λ and β∗ is a nonzero group element.
• (k∗
1, pp∗, x∗) ← AG(1λ, 1n,G, β∗), where x∗ ∈ {0, 1}n,
0, k∗
and G is a random oracle. We assume that pp∗ includes the
public values (1λ, 1n,G).
• x ← E(k∗
1, pp∗, β∗,T), where x ∈ {0, 1}n and T =
{q1, . . . , qt} is the transcript of A’s t oracle queries.
0, pp∗, x∗) +
We say that A wins the game if x∗ (cid:44) x and EvalG(k∗
EvalG(k∗
1, pp∗, x∗) = β∗.
0, k∗
Note that in the above deﬁnition, the goal of the extractor E is
to ﬁnd the only input x known to A on which the output is β∗.
If A could ﬁnd two or more such inputs, it could win the game
with high probability by picking x∗ at random from this list. In
the full version of this work [8], we deﬁne a more general notion
of extractability, which applies to incremental DPFs (Section 6)
and prove the following claim.
bounded by A = (cid:0)4t2 + 2nt + 1(cid:1) /2λ, where n and t are the
Lemma 4.1 (Informal). The public-parameter variant of the
DPF from [11] is an extractable DPF with winning probability
length of x∗ output by A and number of oracle calls made by A,
respectively, and λ is the security parameter. The same holds for
the Incremental DPF we construct in Section 6.
5 Private heavy hitters
We now turn to the problem of collecting t-heavy hitters in a
privacy-preserving way (Task II of Section 2.1). As before, there
are C clients and each client i holds a string αi ∈ {0, 1}n. Now,
for a parameter t ∈ N, the servers want to learn every string that
appears in the list (α1, . . . , αC) at least t times.
We ﬁrst show in Section 5.1, following prior work [3,16,17,48],
that the servers can eﬃciently ﬁnd all t-heavy hitters by making
what we call “preﬁx-count queries” to the list of client strings
(α1, . . . , αC). Next, in Section 5.2, we show how each client i
can give the servers a secret-shared encoding of its string αi that
enables the servers to very eﬃciently make preﬁx-count queries
to the list of client strings (α1, . . . , αC).
The resulting protocol is lightweight: the client sends roughly
n PRG keys to each server. When conﬁgured to search for t-heavy
hitters for t = τC, the protocol requires server-to-server commu-
nication O(λnC/τ) and server-to-server computation dominated
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
w = 3
w0 = 1
w1 = 2
w00 = 1
w01 = 0
w10 = 1
w11 = 1
w000 = 0
w001 = 1
w010 = 0
w011 = 0
w100 = 0
w101 = 1
w110 = 0
w111 = 1
α1 = 001
α3 = 111
Figure 2: An example preﬁx tree on strings (α1, α2, α3) of length n = 3.
The weight wp of a preﬁx p ∈ {0, 1}∗ is the number of strings in the
tree that have p as a preﬁx.
α2 = 101
by O(nC/τ) PRG operations. The protocol requires O(n) rounds
of communication.
5.1 Heavy hitters via preﬁx-count queries
As a ﬁrst step to understand our approach, imagine that, for any
string p ∈ {0, 1}∗, the servers can make queries of the form:
How many of the clients’ input strings α1, . . . , αC ∈
{0, 1}n start with the preﬁx p?
We call these “preﬁx-count queries.” For example, suppose there
are three clients with strings (α1, α2, α3) = (001, 101, 111). The
answer to the query “p = ” (where  is the empty string) would
be “3,” the answer to the query “p = 1” would be “2,” the answer
to the query “p = 10” would be “1,” the answer to the query
“p = 101” would be “1,” and the answer to the query “p = 01”
would be “0.”
We ﬁrst show that if the servers can get the answers to such
queries, then they can use a simple algorithm to eﬃciently
enumerate all t-heavy hitters among the list of all clients’ input
strings. This is a classic observation from the literature on
streaming algorithms for heavy hitters [16,17], which also appears
in recent work on heavy hitters in the local model of diﬀerential
privacy [3] and in the context of federated learning [48].
This algorithm corresponds to a breadth-ﬁrst-search of the
preﬁx tree corresponding to the set of strings (Figure 2), in which
the search algorithm prunes nodes of weight less than t. To
give some intuition for how the algorithm works: let us say that
a preﬁx string p ∈ {0, 1}∗ is a “heavy” if at least t strings in
α1, . . . , αC ∈ {0, 1}n start with p. Then we have the following
observations:
• The empty string  is always heavy.
• If a string p is not heavy, then p(cid:107)0 and p(cid:107)1 are not heavy.
• If a string p is heavy and p is n characters long (i.e., |p| = n),
then p is a t-heavy hitter.
These three observations immediately give rise to Algorithm 3.
For each preﬁx length (cid:96) ∈ {0, . . . , n}, we construct the set H(cid:96) of
heavy strings of length (cid:96). The set H0 consists of the empty string
, since  is always heavy (assuming, without loss of generality
that t ≤ C). We construct the set H(cid:96) by appending 0 and 1 to
each element of H(cid:96)−1 and checking whether the resulting string
is heavy. And ﬁnally, Hn consists of all of the t-heavy hitters.
Eﬃciency. The clients have C strings total. Then, for for any
string length (cid:96) ∈ {0, . . . , n}, there are at most C/t heavy strings
770
Algorithm 3: t-heavy hitters from preﬁx-count queries. The
algorithm is parameterized by a string length n ∈ {0, 1} and a
threshold t ∈ N.
Input: The algorithm has no explicit input, but it has access to a
. For any string p ∈ {0, 1}∗, the
“preﬁx-count” oracle Oα1,...,αC
oracle Oα1,...,αC(p) returns the number of strings in (α1, . . . , αC)
that begin with preﬁx p.
Output: The set of all t-heavy hitters in (α1, . . . , αC).
Algorithm.
• Let H0 ← {} (a set containing the empty string).
• Let w ← C.
• For each preﬁx length (cid:96) = 1, . . . , n:
– Let H(cid:96) ← ∅.
– For each preﬁx p ∈ H(cid:96)−1:
∗ wp(cid:107)0 ← Oα1,...,αC(p(cid:107)0), and
∗ wp(cid:107)1 ← wp − wp(cid:107)0 ∈ Z.
Then:
∗ If wp(cid:107)0 ≥ t, add p(cid:107)0 to H(cid:96).
∗ If wp(cid:107)1 ≥ t, add p(cid:107)1 to H(cid:96).
• Return Hn.
of length (cid:96). At each level (cid:96), the algorithm of Algorithm 3 makes
at most one oracle query for each heavy string. The algorithm
thus makes at most n · C/t preﬁx-count-oracle queries total. If
we are looking strings that more than a constant fraction of all
clients hold (e.g., t = 0.001C), then the number of queries will
be independent of the number of clients.
Security and leakage. While searching for the heavy hitters, the
servers will learn more information than just the t-heavy hitters
themselves. In particular, the servers will learn:
(a) the set of all heavy strings and
(b) for every heavy string p, the number of strings in(α1, . . . , αn)
that begin with p.
As we discuss in Section 7, it is possible to apply ideas from
diﬀerential privacy to limit the damage that either type of the
leakage can cause.
5.2
Implementing private preﬁx-count queries
via incremental DPFs
Given the techniques of Section 5.1, we now just need to explain
how the servers can compute the answers to preﬁx-count queries
over the set of client-held strings without learning anything else
about the clients’ input strings.
We do this using incremental distributed point functions, a
new cryptographic primitives that builds on standard distributed
point functions (DPFs, introduced in Section 3). Using standard
DPFs for our application would also work, but would be more
expensive, both asymptotically and concretely. If each client
holds an n-bit string, with plain DPFs, the client computation
and communication costs would grow as n2. With incremental
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:14 UTC from IEEE Xplore.  Restrictions apply. 
v0
v1
v00
v01
v10
v11
+
v(cid:48)
0
v(cid:48)
1
v(cid:48)
00
v(cid:48)
01
v(cid:48)
10
v(cid:48)
11
=
0
β1
0
0
β2
0
v000 v001 v010 v011 v100 v101 v110 v111
v(cid:48)
000 v(cid:48)
001 v(cid:48)
010 v(cid:48)
011 v(cid:48)
100 v(cid:48)
101 v(cid:48)
110 v(cid:48)
111
0 0 0 0 0
0 0
β3
Eval(k0,·)
Eval(k1,·)
Sum of Eval outputs
Figure 4: Incremental DPFs give concise secret-sharing of the values on
the nodes of a tree, such that the tree contains a single non-zero path. In
this example, the depth n = 3, the special point α = 101, the values on
the path are β1 ∈ G1, β2 ∈ G2, β3 ∈ G3 for some ﬁnite groups G1, G2,
and G3, and the keys are generated as Gen(α, β1, β2, β3) → (k0, k1).
DPFs, this cost falls to linear in n. For our applications, n ≈ 256,
so this factor-of-n performance improvement is substantial. We
get similar performance improvements on the server side.
We ﬁrst deﬁne incremental DPFs, then use them to solve the
heavy-hitters problem, and ﬁnally explain how to construct them.
New tool: Incremental DPF. A standard distributed point func-
tion gives a way to succinctly secret share a vector of dimension
2n that is non-zero at a single point. By analogy, we can think
of an incremental DPF as a secret-shared representation of the
values on the nodes of a binary tree with 2n leaves, where there
is a single non-zero path in the tree whose nodes have non-zero
values (Figure 4).
More precisely, an incremental DPF scheme, parameterized