properties speciﬁed in Section II, namely it allows a client to
securely and efﬁciently check the correctness of an arbitrary
code execution. We now describe the main steps.
The client begins the protocol by submitting a service
request to the UTP. It includes in the request a reference to the
service input in plus a nonce N. The UTP then starts running
the ﬁrst PAL p1 by providing the client’s input, the nonce
and the identity table, i.e.,  (Lines 2-3). Notice
that this is the only entry point of non-authenticated (and thus
untrusted) data. However, the correctness of such data will be
eventually veriﬁed by the client before accepting the reply.
The ﬁrst PAL is run with the input and produces an inter-
mediate state out (Lines 9-10). Before returning, it prepares
the data to be forwarded to the next PAL: the output, a hash of
the input, the nonce and the identity table (Line 11). The hash
is used as an optimization to minimize the information to be
transferred to subsequent PALs. This data is secured through
auth put, specifying the identity of the PAL that should follow
= Tab[2] 2). The PAL terminates by
in the execution ﬂow (p2
providing to the UTP the secured intermediate state, and the
identity of the current and the next PAL (Line 13).
The execution of the subsequent intermediate PALs pro-
ceeds similarly. They use auth get to obtain the previous
intermediate state (Line 15), whose validity derives from the
properties of the secure channel. They execute their service
code and propagate the result according to the expected control
ﬂow (Lines 17-19). Notice that values  are
simply left unchanged by each intermediate PAL as a way to
propagate them to the ﬁnal PAL (pn
= Tab[n]).
pn prepares the output for the client. After it retrieves the
intermediate result from secure storage, it executes the code
(Lines 21-22) and performs an attestation that binds together
pn’s identity, the nonce, the client’s request input, the identity
table and the ﬁnal output (Lines 23-24). When pn terminates, it
releases the ﬁnal output and the report to the UTP (Line 25).
The UTP forwards the output to the client for veriﬁcation
(Line 7). At this point, the client has the following information:
pn’s identity and h(Tab) that were outsourced by the authors of
the code; the originally created request (input) and the fresh
nonce; the ﬁnal output and the attestation as issued by pn;
the trusted TCC’s public key (see assumptions in Section III).
The client can thus verify the attestation, and so the execution
correctness, and trust the service output (Line 8).
Discussion. The protocol ensures that the properties in Sec-
tion II-C are achieved as follows:
1) Secure proof of execution. The proof is unforgeable
because it is conveyed by an attestation, i.e., a digital
signature over the input, the output, the identity table
(over secure hashes of these values). The signature is
through a
linked to the TCC hardware root of trust
chain of digital certiﬁcates, whose ultimate root
is a
Certiﬁcation Authority trusted by the client. The proof is
unambiguous because of the attested identity of the last
PAL pn and Tab, and it is unique due to the inclusion of
the nonce N. The execution ﬂow cannot be tampered with,
since only the correct PAL’s can be run in the expected
order. This last point is ensured through the novel storage
primitive (and the identity table Tab) that prevents invalid
PALs from accessing and tampering with the output of the
intermediate states.
2) Veriﬁcation efﬁciency. The client only has to perform
2Notice that ”2” actually corresponds to the index of the next PAL in the
execution ﬂow that is hard-coded in p1. The index is used for the lookup
operation in Tab. We use this simpliﬁcation in the description for brevity.
425
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
a constant number of hashes and check one digital sig-
nature to validate the result. Such veriﬁcation effort is
independent from the number of executed PALs.
3) Communication efﬁciency. The client
interacts only
once with the UTP to send the input in and receive the
output out of the service. Also, the client provides and
receives a constant additional amount of data, i.e., the
nonce N and report.
4) Low TCC resource usage. Throughout the protocol,
only the PALs that are required to serve the client request
are loaded, identiﬁed and run. Furthermore, public key
cryptography usage is limited to one attestation, while
symmetric cryptography is used for fast key derivation on
the TCC. Hence, the protocol consumes TCC resources
efﬁciently and proportionally to what is actually executed.
5) TCC-agnostic execution. The execution protocol only
uses the TCC abstraction. As the interface can be imple-
mented on different trusted components, the protocol is
not restricted to any speciﬁc architecture, so it is general.
The next section explains one possible implementation.
Amortizing the attestation cost. Reducing the number of
attestations provides beneﬁts both to the UTP and to the client.
However, as we show in our evaluation, a single attestation
can still be computationally expensive when the client has to
verify multiple requests. It is common practice to avoid this
overhead by setting up a secure session, between the trusted
environment and the client, based on a symmetric secret key.
We sketch a possible solution using our protocol.
The code base can be enriched with another PAL, pC,
that establishes the secure channel. pC receives the client’s
fresh public key pkC as input at the beginning of the com-
putation. It assigns the identity idC = h(pkC) to the client; it
uses kget sndr (§IV-D) to retrieve the identity-dependent key
KpC−C (to be) shared with the client; it encrypts KpC−C with
pkC. The attestation of the result and the encrypted data are
sent back to the client. The client veriﬁes the attestation and
retrieves KpC−C. In subsequent requests, the client authenticates
(or encrypts) messages with KpC−C and attaches idC. The
client’s identity allows pC to recompute KpC−C without main-
taining any session state. pC can thus authenticate the message
and forward it to the ﬁrst PAL in the original execution ﬂow.
Similarly, pC should receive the computed reply from the last
PAL so to build an authenticated message for the client.
V. EXPERIMENTAL ANALYSIS
This section focuses on the implementation and evaluation
of our protocol when applied to a real-world service. The
protocol is used to securely link together code modules of the
widely-deployed SQLite database engine. A formal veriﬁcation
of the correctness is carried out with Scyther. Our results
show that the code identiﬁcation overhead can be signiﬁcantly
reduced without trading off security and functionality.
A. Implementation
Trusted component. We implemented the TCC using
XMHF/TrustVisor [32, 46], which is based on a hardware
TPM, and whose code is open-source and easy to customize.
XMHF/TrustVisor is a security hypervisor that can perform
trusted executions on-demand. Brieﬂy, a trusted execution
involves three steps, all initiated from the untrusted environ-
ment, where the OS and other services run. The hypervisor
426
it protects the memory
performs the following operations:
regions of a PAL from external access and measures its code
(PAL registration step); it executes the PAL and handles the
marshaling of I/O parameters between the trusted and the
untrusted environment (PAL execution and termination step); it
clears the PAL’s state and makes it accessible in the untrusted
environment (PAL unregistration step).
In order
to implement our protocol, we modiﬁed
XMHF/TrustVisor by adding three hypercalls. The ﬁrst makes
memory available to a PAL in its address space. This avoids
allocating memory in the untrusted environment, then transfer-
ring it to the trusted environment and making it accessible to a
PAL as dynamic memory. Consequently, such memory space
is neither part of a PAL’s identity, nor of a PAL’s input data,
and it can be provided more efﬁciently. The second hypercall is
kget sndr, which is used in the auth put primitive to retrieve
a shared key to secure some data for a known receiver PAL. As
the TCC only computes a secret key, this allows a developer
to choose and implement the security technique that is most
suitable for the application (e.g., message authentication codes
or authenticated encryption). The third hypercall is kget rcpt,
which is used in the auth get primitive to retrieve a shared key
to validate some data that was previously secured by a known
sender PAL. The TCC-speciﬁc key used for identity-dependent
key derivation is initialized inside XMHF/TrustVisor when the
platform boots.
Platform. We used a Dell PowerEdge R420 Server, with a
2.2GHz Intel Xeon E5-2407 CPU, 3GB of memory, a TPM
v1.2, and running Ubuntu 12.04 with a Linux kernel 3.2.0-27.
The resources were fully dedicated to our experiments.
Application. Our protocol was applied to the SQLite database
engine [40], which has a code base of about 88K lines of
source code. SQLite is open-source and widely deployed, e.g.,
on Android [4], iCloud [5] and other operating systems [3].
A multi-PAL SQLite engine was created with a small per-
operation code footprint. Different PALs were built to handle
speciﬁc queries. Each one was handcrafted by trimming the
unused code off the original code base. Then, our protocol is
used to securely link these PALs together.
Our current multi-PAL SQLite engine consists of 4 PALs
that
implement some of the most representative SQL op-
erations. We emphasize that additional operations can be
included by following the same approach—see Section VII—
so to match the functionality of the original database engine.
P AL0 is the ﬁrst one called from the untrusted environment on
the UTP and it receives the input data from the client. P AL0
parses the client’s request to recognize the type of query,
and then forwards it to a specialized PAL for the execution
by means of our secure channels. Select queries are passed
to P ALSEL. Insert queries are sent to P ALIN S. Delete
queries are passed to P ALDEL. The last executed PAL builds
the reply that is released to the UTP’s untrusted environment,
from which it is then forwarded to the client.
We compare multi-PAL SQLite against a baseline imple-
mentation of the full SQLite database engine. We implemented
it as a monolithic P ALSQLIT E that can execute any query.
We perform end-to-end experiments, where a client per-
forms select, insert and delete queries on the server that
maintains a database. Queries are received through a Ze-
roMQ [50] socket at the UTP, and delivered to P AL0 for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
initial processing. The experiments were based on a small
size database because it highlights the overhead due to code
identiﬁcation, which is the focus of this paper.
Execution Flows.
In multi-PAL SQLite,
requests from
the client follow the following execution ﬂows: P AL0 →
P ALSEL, P AL0 → P ALIN S, or P AL0 → P ALDEL. Any
other query is currently discarded by P AL0 and the trusted
execution terminates. However, additional operations could be
easily using the same procedure.


!
!


"
"
$
$










%
%






































#"
"
#"
"
  ""!
  ""!
1085
1085
12
12




135
135






90
90




155
155










Fig. 8: Size of each PAL’s code in our SQLite code base.
B. Correctness
We veriﬁed the correctness of the f vT E protocol applied
to SQLite using Scyther [14, 15], a public tool for the formal
veriﬁcation of security protocols. We chose Scyther as it
supports unbounded veriﬁcation of security properties or their
violation by providing feasible attacks.
Protocol Modeling.
is performed
among the following entities: the client, the 4 PALs and the
TCC. The UTP is untrusted and it is modeled by Scyther as
an adversary that is able to forge and replay messages. We
describe the execution veriﬁcation of a select query (but it
will be evident that it can be adapted to other executions in a
straightforward manner).