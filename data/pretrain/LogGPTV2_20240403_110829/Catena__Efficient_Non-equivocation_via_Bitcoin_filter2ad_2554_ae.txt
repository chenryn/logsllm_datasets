should be negligible.
Catena clients expose an onStatementAppended(s) API
that notiﬁes the higher level application of newly issued
statements that have sufﬁcient conﬁrmations. Applications
are notiﬁed about statements in the order they were issued,
making it easy to verify each statement for application-
speciﬁc invariants (see §VII-3). If the Catena log is caught
equivocating, the Catena client notiﬁes the application via an
(cid:2)
onEquivocation(s, s
) API that includes signatures on the two
inconsistent statements s and s(cid:2) and thus offers a publicly-
veriﬁable non-repudiable proof of equivocation.
Certain applications might want to be made aware about
the stability of Bitcoin’s consensus. For this, we provide an
onReorganize() API that notiﬁes applications about blockchain
reorganizations with information about forks and the number
of orphaned blocks. Applications can use this information to
infer whether the Bitcoin network is under attack, but we leave
this to future work.
If bigger accidental or malicious forks should occur, they
might unconﬁrm previously-conﬁrmed Catena transactions.
Even though such events are outside of our threat model,
Catena still notiﬁes applications about statements that were
unconﬁrmed via an onStatementWithdrawn(s) API so they
can decide how to proceed.
C. Costs and Overheads
In this subsection, we discuss the ﬁnancial cost of running a
Catena server, the overheads involved for clients and servers,
and Catena’s scalability.
1) Transaction Fees: Transaction fees in Bitcoin vary with
contention for space in the blockchain (see Figure 6) and so
far have not been prohibitive for Bitcoin users. For instance,
Bitcoin transactions currently pay a fee of 70 satoshis per byte
to get included in the blockchain within the next block [82] (1
−8 BTC). For a 235-byte Catena transaction that
satoshi = 10
commits a statement consisting of a 256-bit SHA-256 hash, the
fee would be 16,450 satoshis or 12 US cents per statement (on
November 2016, 1 BTC = $706.54). If a statement is issued
every 10 minutes, the cost per day would be less than 17.5
USD, which we believe is reasonable. For example, this cost
is not much higher than Keybase’s cost [14], which issues
statements less often (every 6 hours), paying a smaller fee of
10,000 satoshis or 7 US cents per transaction [83].
2) Overheads: Catena’s CPU overhead is insigniﬁcant. A
Catena log server can issue at most one statement per Bitcoin
block, so it only has to perform one signature every 10
403
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 6. This graphs shows the minimum transaction fee (in satoshi/kB) that guarantees a transaction will be included in the blockchain within k blocks (for
k = 1, 2, 3, 6) with 90% probability (modeled using Feesim [81]). Fees tend to increase with contention for space in the Bitcoin “mempool” of unconﬁrmed
transactions and transactions with higher fees get included in the blockchain faster. 1 satoshi = 0.00000001 BTC = 10−8 BTC and 1 kB = 103 bytes.
minutes. Similarly, Catena clients only verify a transaction
every 10 minutes for each log they audit, which adds virtually
no overhead. Finally, verifying the proof-of-work in block
headers adds insigniﬁcant overhead.
Catena clients need a small, constant amount of storage
to recompute the Bitcoin difﬁculty and handle blockchain
reorganizations. To recompute the difﬁculty every 2016 blocks,
Catena clients and servers need to store the last 2016 block
headers of the blockchain, which are 80 bytes each. To prevent
equivocation about withdrawn statements during blockchain
reorganizations (see §IV-D), Catena clients remember the past
100 statements issued by the server (no more than 80 bytes
each due to OP_RETURN limits; see §II-B5). Here we assume
that no Bitcoin fork, whether accidental or malicious, will be
longer than 100 blocks. Thus, Catena’s storage cost for both
clients and servers is smaller than 200 KB.
Catena demands a small amount of bandwidth from clients
and a larger amount from servers who have to serve statements
to clients. First, servers and clients pay an initial cost to sync
all the blockchain headers (currently 35 MB). Servers and
clients need to download all the headers so as to ensure the
chain is sufﬁciently “heavy” and is thus the correct chain (see
§II-B3). Once this is done, Catena clients need to sporadically
connect to the header relay network to check for new block
headers and connect to the log server to fetch new statements.
The required bandwidth for clients is less than 1 KB every 10
minutes: 600 bytes for statements and Merkle proofs and 80
bytes for each block header, possibly requested from multiple
HRN nodes. In contrast, the server needs bandwidth linear in
the number of Catena clients, since it serves every statement
to each client.
3) Scalability: We believe Catena can scale easily if the
header relay network distributes block headers and the Catena
log server distributes statements and proofs. However, our
current implementation based on Bitcoin’s P2P network will
not scale beyond tens of thousands of Catena clients without
putting signiﬁcant stress on Bitcoin. As discussed in §IV-B,
there simply aren’t enough connections available in the Bitcoin
network to support a large number of Catena clients. In
addition, our current implementation relies on disk-intensive
Bloom ﬁltering (see §II-B6). We stress that these are current,
surmountable limitations of Bitcoin that all thin blockchain-
based applications need to deal with, not just Catena.
D. Preventing Equivocation in CONIKS
To demonstrate Catena’s applicability to key transparency
schemes, we modiﬁed CONIKS [2] to publish directory digests
in a Catena log so as to prevent a malicious provider from
equivocating about
its public-key directory. Our modiﬁed
CONIKS is as hard to fork as Bitcoin, which we believe
makes CONIKS more resilient to attacks. Our changes to
CONIKS are minimal, consisting of 66 new lines of code for
the CONIKS server and 89 new lines of code for the CONIKS
test client. (We changed Java source ﬁles, project ﬁles and
conﬁguration ﬁles.)
A typical CONIKS provider advertises the root hash of
a preﬁx Merkle tree periodically to CONIKS clients. This
root hash is signed and is referred to as a Signed Tree Root
(STR). To prevent impersonation, clients have to gossip STRs
amongst themselves or with different providers. Our modiﬁca-
tion of CONIKS removes the need for gossiping by witnessing
STRs in the Bitcoin blockchain using a Catena log. This allows
all CONIKS clients to agree on the same history of STRs. We
lowered the frequency at which providers publish STRs from
once per minute to once per ten minutes to coincide with the
frequency of Bitcoin blocks. We also modiﬁed the CONIKS
test client
to listen for Bitcoin-witnessed STRs. However,
because the provided test client is not fully implemented to
keep track of STRs, more changes to CONIKS, not Catena,
are needed to actually prevent equivocation.
Catena does not change CONIKS’s public-key distribution
assumptions. CONIKS assumes that clients have a way of
obtaining the public keys of providers. Similarly, our Bitcoin-
witnessed CONIKS assumes that clients have a way of ob-
404
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
taining the “public keys” for the Catena logs of providers.
Speciﬁcally, our “public key” is the log’s genesis transaction
(see §IV-A1). We commit the old public key of the provider
in the auxiliary data of the genesis transaction (see §III-B).
CONIKS clients need this public key to verify CONIKS server
replies to their queries.
VII. DISCUSSION AND FUTURE WORK
1) Building Catena on Top of Bitcoin: We chose to design
Catena on top of Bitcoin because of Bitcoin’s resilient proof-
of-work consensus [42] and its real-world deployment. This
makes Catena-enabled applications easy to deploy (no need
to wait for trustworthy parties to come into existence) and
expensive to attack (adversaries have to double spend in
Bitcoin). Still, it’s important to note that Bitcoin’s security as
a “black box” consensus protocol remains an open problem.
For example, it can be difﬁcult to dismiss externally-motivated
adversaries who are well-incentivized to maliciously mine and
double spend. Finally, we note that Catena could also be built
on top of other blockchains such as Ethereum [84], but we
believe Bitcoin’s security currently outmatches the security of
all other blockchains.
In particular, we avoided Ethereum for a few reasons.
First, we believe Bitcoin is a more mature ecosystem to base
applications on, given the many blockchain-based apps built
on top of it [14], [15], [85]–[87]. Second, Ethereum plans
on transitioning to a proof-of-stake consensus algorithm [88]
called Casper [89] that could change the trust assumptions
behind thin nodes. For instance, an additional assumption
in Casper is that clients who are ofﬂine for too long can
authenticate a list of “bonded” validators out-of-band [89].
Third, recent work shows that rational Ethereum miners have
an incentive to skip verifying “expensive” blocks that other
miners constructed maliciously [61]. In Bitcoin, such attacks
are less practical since block veriﬁcation does not involve
executing arbitrarily complex smart contracts.
depends
on
liveness
2) Censorship: Catena’s
the
censorship-resistance of
the Bitcoin network. Malicious
miners can censor Catena transactions and exclude them
from the Bitcoin blockchain, which reduces the liveness of a
Catena log. We stress, however, that Bitcoin’s decentralized
consensus does provide some degree of censorship-resistance
by allowing any honest miner to join the protocol, eventually
resulting in an honest, non-censoring, majority. We also
stress that censorship attacks have not been observed in
practice and we leave a more careful analysis of Bitcoin’s
censorship-resistance to future work.
3) Historical Consistency: Catena is application-agnostic
and does not guarantee application-speciﬁc internal consis-
tency [20] of statements, which needs to be checked at the
application layer. Instead, Catena only guarantees historical
consistency [20] of statements, enabling applications to later
check the correct semantics of statements. As an example,
Catena ensures that all clients of a key transparency scheme
such as Certiﬁcate Transparency (CT) [10] see the same
history of signed tree heads (STHs). However, clients still
405
have to check the internal consistency of the STHs to detect
impersonation. For instance, Bob’s client will want to make
sure that across all STHs, his public key has not been changed
maliciously, and thus he hasn’t been impersonated.
It is important to understand that without historical consis-
tency, any guarantees of internal consistency are meaningless.
This is exactly why we designed Catena. For instance, a
malicious CT log server [10] can equivocate, giving Alice
a signed tree head (STH) with her real public key and a
fake public key for Bob, while giving Bob a different STH
with his real public key and a fake public key for Alice.
Alice and Bob both verify their own STHs as being internally
consistent and believe they were not impersonated. However,
because Alice and Bob have no historical consistency, they
are looking at different STHs, which means the internal
consistency guarantees they have are essentially useless. In
this case, Alice and Bob are being impersonated even though
internal consistency tells them they are not.
VIII. RELATED WORK
Tamper-evident logging [20] allows auditors to ensure a
log’s correct behavior. A history tree is used to store events
in the log, check their membership and prove that a new
version of the log is consistent with a past version (i.e., no past
events have been removed or modiﬁed). Unfortunately, tamper-
evident logging does not address equivocation attacks, assum-
ing auditors can gossip to detect forks. Catena offers the same
semantics as tamper-evident logging (i.e., membership proofs,
consistency proofs) but also prevents equivocation. However,
because the Bitcoin blockchain is implemented as a hash-
chain, Catena’s membership and consistency proofs are linear,
not logarithmic, in the log’s size. In practice, a Catena log can
commit root hashes of a history tree and prevent equivocation
about the tree, while preserving logarithmic membership with
respect to a root hash and logarithmic consistency proofs
between two consecutive root hashes.
Proofs of proofs of work (PPOW) [90] enable thin clients
to verify the “weight” of a blockchain (see §II-B3) by down-
loading only O(log n) rather than all n block headers. Should
Bitcoin adopt this interesting technique, Catena clients could
leverage it to download fewer block headers from the HRN.
First, we can leverage PPOWs to decrease the bootstrapping
bandwidth of Catena clients from O(n) to O(log n) when
initially syncing with a blockchain of n blocks. Second, we
can leverage PPOWs to skip downloading some of the block
headers between two statements si and si+1, should there
be a large number of blocks between consecutive statements.
However, we cannot leverage PPOWs to skip downloading
Catena transactions and their corresponding block headers.
This is because Catena clients need to verify that all Catena
transactions are chained correctly (see §IV-C).
Peter Todd’s uniquebits [91] allows users to publish signed
hashes of arbitrary data in the Bitcoin blockchain for later
auditing. At a high level, the scheme commits the signed
data d and PGP ﬁngerprint information about the signer by
leveraging both “Pay-to-Script Hash” (P2SH) transactions [50]
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
and “fake” public keys (see §II-B5). Unfortunately, uniquebits
does not address the equivocation problem: the scheme cannot
efﬁciently prevent a signer from publishing two pieces of data
d and d(cid:2) and equivocating to thin clients about which piece was
signed. Similarly, CommitCoin [59] uses the Bitcoin block-
chain to “timestamp” commitments and prove they were made
at a certain time, but cannot efﬁciently prevent equivocation.
Concomitant with the publication of our online version of
Catena [92], Peter Todd independently proposed a Bitcoin-
based log that prevents equivocation using single-use seals
[93]. Single-use seals generalize the concept of spending a
transaction output in Bitcoin while committing some arbitrary
data in the process. The transaction output waiting to be spent
is the identiﬁer of the single-use seal, while the transaction
that spends that output and commits some arbitrary data
(see §II-B5) is known as the closing transaction. Importantly,
when a seal is “closed” by spending its output via a closing
transaction, another seal can be speciﬁed as the arbitrary
data in that transaction. This is similar to how, in Catena, a
new transaction spends the previous transaction’s continuation
output (equivalent to “closing a seal”) and creates a new
continuation output (equivalent to specifying a new seal).
As opposed to Catena, single-use seals provide a certain
degree of censorship-resistance because the identiﬁer of the
next seal can be hidden from miners by committing to it
in the closing transaction. In contrast, with Catena, the next
continuation output (see §IV-A2) is always public and known
by miners, so they can censor transactions that try to spend it.
However, Catena is more efﬁcient than single-use seals, since
each statement requires a single transaction to be posted on
the blockchain, while single-use seals require two transactions
(one transaction for the seal’s identiﬁer plus another closing
transaction). Furthermore, although thin client veriﬁcation of
a log would be possible with single-use seals, the details of
this are never considered in depth [93], a contribution that
Catena makes. Finally, to the best of our knowledge, single-
use seals have not been implemented yet, making Catena the