User: Write a simple TCP/IP server in C language to realize basic data transmission functions.
Assistant: To implement a simple TCP/IP server, you need to understand Socket programming, you can use the following steps: 1. Import the header file ```c #include <stdio.h> #include <stdlib.h> #include <string.h> # include <sys/socket.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> ``` 2. Create Socket ```c int sockfd = socket(AF_INET , SOCK_STREAM, 0); if (sockfd == -1) { perror("socket failed"); exit(EXIT_FAILURE); } ``` 3. Bind address```c struct sockaddr_in server_addr; memset(&server_addr, 0 , sizeof(server_addr)); server_addr.sin_family = AF_INET; server_addr.sin_port = htons(port); server_addr.sin_addr.s_addr = inet_addr(ip); // ip is a self-defined IP address int ret = bind(sockfd, ( struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror("bind failed"); exit(EXIT_FAILURE); } ``` 4. Listening port```c int backlog = 10 ; ret = listen(sockfd, backlog); if (ret == -1) { perror("listen failed"); exit(EXIT_FAILURE); } ``` 5. Receive client connection```c struct sockaddr_in client_addr; SOCKLEN_T Client_Addr_len = SIZEOF (Client_addr); int Connfd = Accept (SOCKFD, (Struct Sockaddr*) & Client_addr, & Client_LEN); if (connf d == -1) {Perror ("Accept Failed"); exit (exit_failure);} `` `` `` `6. Receive the data sent by the client```c char buffer[1024]; memset(buffer, 0, sizeof(buffer)); ret = recv(connfd, buffer, sizeof(buffer), 0); if (ret == -1) { perror("recv failed"); exit(EXIT_FAILURE); } printf("Received message: %s\n", buffer); ``` 7. Send data to the client```c char * send_buffer = "Hello, client!"; ret = send(connfd, send_buffer, strlen(send_buffer), 0); if (ret == -1) { perror("send failed"); exit(EXIT_FAILURE); } ` `` 8. Close the Socket connection```c close(connfd); close(sockfd); ``` The complete code is as follows: ```c #include <stdio.h> #include <stdlib.h> #include <string .h> #include <sys/socket.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> int main() { const int port = 8080; const char * ip = "127.0.0.1"; // Create Socket int sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd == -1) { perror("socket failed"); exit(EXIT_FAILURE); } // Bind address struct sockaddr_in server_addr; memset(&server_addr, 0, sizeof(server_addr)); server_addr.sin_family = AF_INET; server_addr.sin_port = htons(port); server_addr.sin_addr.s_addr = inet_addr(ip); int ret = bind( sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)); if (ret == -1) { perror("bind failed"); exit(EXIT_FAILURE); } // listening port int backlog = 10; ret = listen (sockfd, backlog); if (ret == -1) { perror("listen failed"); exit(EXIT_FAILURE); } // Receive client connection struct sockaddr_in client_addr; socklen_t client_addr_len = sizeof(client_addr); int connfd = accept(sockfd, (struct sockaddr*)&client_addr, &client_addr_len); if (connfd == -1) { perror("accept failed"); exit(EXIT_FAILURE); } // Receive the data sent by the client char buffer[1024] ; memset(buffer, 0, sizeof(buffer)); ret = recv(connfd, buffer, sizeof(buffer), 0); if (ret == -1) { perror("recv failed"); exit(EXIT_FAILURE) ; } printf("Received message: %s\n", buffer); // Send data to client char* send_buffer = "Hello, client!"; ret = send(connfd, send_buffer, strlen(send_buffer), 0) ; if (ret == -1) { perror("send failed"); exit(EXIT_FAILURE); } // close the Socket connection close(connfd); close(sockfd); return 0; } ``` Notes: 1 . On the Windows platform, you need to add the header file "winsock2.h", and call the WSAStartup and WSACleanup functions to initialize and release the Winsock library. Exit normally.