资料是资讯时代的决定性特征。网际网路，资料储存，处理和软体驱动的自动化正在对全球经济和人类社会产生重大影响。我们的日常生活与社会组织在过去十年中发生了变化，而且在未来的十年中可能会继续发生根本性的变化，所以我们会想到与工业革命对比【87,96】。
工业革命是透过重大的技术与农业进步实现的，它带来了持续的经济增长，长期的生活水平显著提高。然而它也带来了一些严重的问题：空气污染（由于烟雾和化学过程）和水污染（工业垃圾和人类垃圾）是可怖的。工厂老板生活在纷奢之中，而城市工人经常居住在非常糟糕的住房中，并且在恶劣的条件下长时间工作。童工很常见，甚至包括矿井中危险而低薪的工作。
制定保护措施花费了很长的时间，例如环境保护条例、工作场所安全条例、宣布使用童工非法以及食品卫生检查。毫无疑问，生产成本增加了，因为工厂再也不能把废物倒入河流、销售污染的食物或者剥削工人。但是整个社会都从中受益良多，我们中很少会有人想回到这些管制条例之前的日子【87】。
就像工业革命有著黑暗面需要应对一样，我们转向资讯时代的过程中，也有需要应对与解决的重大问题。我相信资料的收集与使用就是其中一个问题。用 Bruce Schneier 的话来说【96】：
> 资料是资讯时代的污染问题，保护隐私是环境挑战。几乎所有的电脑都能生产资讯。它堆积在周围，开始溃烂。我们如何处理它 —— 我们如何控制它，以及如何摆脱它 —— 是资讯经济健康发展的核心议题。正如我们今天回顾工业时代的早期年代，并想知道我们的祖先在忙于建设工业世界的过程时怎么能忽略污染问题；我们的孙辈在回望资讯时代的早期年代时，将会就我们如何应对资料收集和滥用的挑战来评断我们。
>
> 我们应该设法让他们感到骄傲。
#### 立法与自律
资料保护法可能有助于维护个人的权利。例如，1995 年的 “欧洲资料保护指示” 规定，个人资料必须 “为特定的、明确的和合法的目的收集，而不是以与这些目的不相符的方式进一步处理”，并且资料必须 “就收集的目的而言适当、相关、不过分。”【107】。
但是，这个立法在今天的网际网路环境下是否有效还是有疑问的【108】。这些规则直接否定了大资料的哲学，即最大限度地收集资料，将其与其他资料集结合起来进行试验和探索，以便产生新的洞察。探索意味著将资料用于未曾预期的目的，这与使用者同意的 “特定和明确” 目的相反（如果我们可以有意义地表示同意的话）【109】。更新的规章正在制定中【89】。
那些收集了大量有关人的资料的公司反对监管，认为这是创新的负担与阻碍。在某种程度上，这种反对是有道理的。例如，分享医疗资料时，存在明显的隐私风险，但也有潜在的机遇：如果资料分析能够帮助我们实现更好的诊断或找到更好的治疗方法，能够阻止多少人的死亡【110】？过度监管可能会阻止这种突破。在这种潜在机会与风险之间找出平衡是很困难的【105】。
从根本上说，我认为我们需要科技行业在个人资料方面的文化转变。我们应该停止将使用者视作待最佳化的指标资料，并记住他们是值得尊重、有尊严和能动性的人。我们应当在资料收集和实际处理中自我约束，以建立和维持依赖我们软体的人们的信任【111】。我们应当将教育终端使用者视为己任，告诉他们我们是如何使用他们的资料的，而不是将他们蒙在鼓里。
我们应该允许每个人保留自己的隐私 —— 即，对自己资料的控制 —— 而不是透过监视来窃取这种控制权。我们控制自己资料的个体权利就像是国家公园的自然环境：如果我们不去明确地保护它、关心它，它就会被破坏。这将是公地的悲剧，我们都会因此而变得更糟。无所不在的监视并非不可避免的 —— 我们现在仍然能阻止它。
我们究竟能做到哪一步，是一个开放的问题。首先，我们不应该永久保留资料，而是一旦不再需要就立即清除资料【111,112】。清除资料与不变性的想法背道而驰（请参阅 “[不变性的局限性](ch11.md#不变性的局限性)”），但这是可以解决的问题。我所看到的一种很有前景的方法是透过加密协议来实施访问控制，而不仅仅是透过策略【113,114】。总的来说，文化与态度的改变是必要的。
## 本章小结
在本章中，我们讨论了设计资料系统的新方式，而且也包括了我的个人观点，以及对未来的猜测。我们从这样一种观察开始：没有单种工具能高效服务所有可能的用例，因此应用必须组合使用几种不同的软体才能实现其目标。我们讨论了如何使用批处理与事件流来解决这一 **资料整合（data integration）** 问题，以便让资料变更在不同系统之间流动。
在这种方法中，某些系统被指定为记录系统，而其他资料则透过转换衍生自记录系统。透过这种方式，我们可以维护索引、物化检视、机器学习模型、统计摘要等等。透过使这些衍生和转换操作非同步且松散耦合，能够防止一个区域中的问题扩散到系统中不相关部分，从而增加整个系统的稳健性与容错性。
将资料流表示为从一个数据集到另一个数据集的转换也有助于演化应用程式：如果你想变更其中一个处理步骤，例如变更索引或快取的结构，则可以在整个输入资料集上重新执行新的转换程式码，以便重新衍生输出。同样，出现问题时，你也可以修复程式码并重新处理资料以便恢复。
这些过程与资料库内部已经完成的过程非常类似，因此我们将资料流应用的概念重新改写为，**分拆（unbundling）** 资料库元件，并透过组合这些松散耦合的元件来构建应用程式。
衍生状态可以透过观察底层资料的变更来更新。此外，衍生状态本身可以进一步被下游消费者观察。我们甚至可以将这种资料流一路传送至显示资料的终端使用者装置，从而构建可动态更新以反映资料变更，并在离线时能继续工作的使用者介面。
接下来，我们讨论了如何确保所有这些处理在出现故障时保持正确。我们看到可伸缩的强完整性保证可以透过非同步事件处理来实现，透过使用端到端操作识别符号使操作幂等，以及透过非同步检查约束。客户端可以等到检查透过，或者不等待继续前进，但是可能会冒有违反约束需要道歉的风险。这种方法比使用分散式事务的传统方法更具可伸缩性与可靠性，并且在实践中适用于很多业务流程。
透过围绕资料流构建应用，并非同步检查约束，我们可以避免绝大多数的协调工作，建立保证完整性且效能仍然表现良好的系统，即使在地理散布的情况下与出现故障时亦然。然后，我们对使用审计来验证资料完整性，以及损坏检测进行了一些讨论。
最后，我们退后一步，审视了构建资料密集型应用的一些道德问题。我们看到，虽然资料可以用来做好事，但它也可能造成很大伤害：作出严重影响人们生活的决定却难以申诉，导致歧视与剥削、监视常态化、曝光私密资讯。我们也冒著资料被泄露的风险，并且可能会发现，即使是善意地使用资料也可能会导致意想不到的后果。
由于软体和资料对世界产生了如此巨大的影响，我们工程师们必须牢记，我们有责任为我们想要的那种世界而努力：一个尊重人们，尊重人性的世界。我希望我们能够一起为实现这一目标而努力。
## 参考文献
1.  Rachid Belaid: “[Postgres Full-Text Search is Good Enough!](http://rachbelaid.com/postgres-full-text-search-is-good-enough/),” *rachbelaid.com*, July 13, 2015.
1.  Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: “[Challenges to Adopting Stronger Consistency at Scale](https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-ajoux.pdf),” at *15th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2015.
1.  Pat Helland and Dave Campbell: “[Building on Quicksand](https://database.cs.wisc.edu/cidr/cidr2009/Paper_133.pdf),” at *4th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2009.
1.  Jessica Kerr:  “[Provenance   and Causality in Distributed Systems](http://blog.jessitron.com/2016/09/provenance-and-causality-in-distributed.html),” *blog.jessitron.com*, September 25, 2016.
1.  Kostas Tzoumas: “[Batch Is a Special Case of Streaming](http://data-artisans.com/batch-is-a-special-case-of-streaming/),” *data-artisans.com*, September 15, 2015.
1.  Shinji Kim and Robert Blafford: “[Stream Windowing Performance Analysis: Concord and Spark Streaming](http://concord.io/posts/windowing_performance_analysis_w_spark_streaming),” *concord.io*, July 6, 2016.