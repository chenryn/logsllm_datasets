This appears to be a defect that is specific to Intel's Math Kernel Library
and the resolution will likely require changes therein. I'm submitting here as
I believe the NumPy team has some relationships/connections with the Intel
team and there have been some efforts to make MKL work well with NumPy (and
SciPy). I am using Python 3.6.4, built from source on OSX 10.13.4 and Linux
16.04 (WSL). NumPy is built from source using gcc 7.1.0 on Mac and gcc 7.2 on
Linux.
When executed with python3 this script will hang the terminal on OSX and
Linux. No tests have been performed on Win64. If the size of the vector, x, is
reduced by a factor of 10 to 1000, no hang is observed and the script executes
correctly. The hang is specific to the call to linalg.norm. It is likely
caused by multi-threaded execution of the norm() method using MKL's
infrastructure, leaving the system in a state that interferes with Python
execution of subprocess.run(). I also get a hang when using Python's
Multiprocessing module process creation in place of subprocess.run().
This is important for a few reasons 1) Jupyter QtConsole & Notebook and
IPython use subprocess.run() to execute certain os commands (such as ls).
Hence we get a hang when working in all these applications. 2) If you want to
spawn or fork to subprocesses to execute cpu intensive tasks you'll get a hang
if you've previously called np.linalg.norm() with a sufficiently large vector
(and perhaps many other NumPy and SciPy calls).
### Reproducing code example:
    import numpy as np
    import subprocess
    x = np.arange(10000) # 1000 shows no hang.
    xnorm = np.linalg.norm(x)
    subprocess.run('ls')
### Error message:
No error message, just a hang.
### Numpy/Python version information:
NumPy 1.14.3  
Python 3.6.4  
MKL: l_mkl_2018.3.222, m_mkl_2018.3.185