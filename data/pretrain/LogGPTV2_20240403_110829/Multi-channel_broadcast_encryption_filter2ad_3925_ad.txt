Let now assume that A asks for a valid decryption query (S(cid:48)
1 = A.
Since C(cid:48)
3)1/t, which breaks
the CDH assumption. Succind(A) − Succ1(A) ≤ Succcdh(B).
Game 2: We now assume there exists a selective adversary A that breaks the semantic security of
our scheme while decryption queries with the same C1 as in the challenge are answered by ⊥. We
build an algorithm B that has twice the advantage in deciding the DBDHE in G. As said above, the
programmability of the random oracle will help simulating the encryption queries, and the dummy set
will help answering the decryption queries. In game 2.1, the algorithm B is deﬁned as follows:
Init. Algorithm B ﬁrst takes as input a DBDHE instance (g, G, g1, . . . , gn, gn+2, . . . , g2n, T ) where
T = e(gn+1, G). It implicitly deﬁnes α: gi = gαi. B then runs A to receive m∗ sets S∗
m∗ and
an index k∗ that A wishes to be challenged on. Note that n /∈ S∗
k∗ because the decryption key dn
is public. B makes use of a random oracle H which output is a random element in G, and a hash
List is initially set empty list, to store all the query-answer, with additional information, when
possible. Namely, for a query q, with answer Y = gy, the tuple (q, Y, y) is stored. Sometimes, y
will not be known, and thus replaced by ⊥.
Setup. B needs to generate the public global parameters and decryption keys di, i /∈ S∗
1 , . . . , S∗
1, . . . , S(cid:48)
= (C(cid:48)
k∗: it chooses
a random u ∈ Zp and sets v def= gu/(cid:81)
j∈S∗
k∗ gn+1−j. It then computes
(cid:89)
j∈S∗
k∗
 (cid:89)
j∈S∗
k∗
−αi
di
def= gu
i /
gn+1−j+i = gu·αi ·
gn+1−j
= vαi
Eventually, B gives A the public global parameters (g1, . . . , gn, gn+2, . . . , g2n, dn).
Phase 1. Since we now allow encryption and decryption queries, let show how they can be answered.
We ﬁrst start by the hash queries:
1. There are two kinds of useful hash queries, (j, u) ∈ Zp × G or (u1, u2) ∈ G2. But for any query
q, if it has already been asked, the same answer is sent back. Otherwise, B chooses a random
scalar y $← Zp and sets H(q) = gy. It appends the appropriate tuple (q, gy, y) to the hash List.
2. For an encryption query (S1, S2, . . . , Sm), B makes the ciphertext as follows: it ﬁrst chooses a
random scalar r ∈ Zp and sets Sm+1 = {n}, and Yi = H(i, gr) = gyi for i = 1, . . . , m + 1: yi is
obtained from the hash List. To generate Hdr = (C1, C2, C3), B sets C1 = gr, and computes
v · (cid:89)
j∈Si
m+1(cid:89)
i=1
r+yi
C2 =
gn+1−j
C3 = H(C1, C2)r
3. For a decryption query (S1, . . . , Sm+1, Hdr, i, k) in the name of user i ∈ Sk, B decrypts as
k∗, and
and Ki = e(gn, g1)r+yi, for i = 1, . . . , m + 1.
follows: it ﬁrst checks whether Sk ⊆ S∗
using dj it can decrypt as the decryption oracle would do; in the positive case
k∗ or not. In the negative case, it ﬁnds j ∈ Sk\S∗
12
– B uses dn to decrypt, using the decryption oracle, and obtain Km+1 = e(gn+1, g)r+ym+1;
– B extracts, from the hash List for H(m + 1, C1), the value ym+1, and computes
L =
Km+1
e(gn+1, g)ym+1
= e(gn, g1)r
– B extracts, from the hash List for H(k, C1), the value yk, and computes the session key
Challenge. The challenge has to be generated on the target sets S∗
m∗, with the index k∗ for
Kk = L × e(gn, g1)yk = e(gn+1, g)r+yk
1 , . . . , S∗
, and hi = gr∗
k∗ = G/gz∗
i
the indistinguishability of the key:
– B ﬁrst chooses a random scalar r∗ ∈ Zp and sets h = gr∗
– it chooses a random scalar z∗ ∈ Zp and sets H(k∗, h) = Y ∗
k∗ = gy∗
k∗ for an unknown y∗
k∗. The tuple ((k∗, h), Y ∗
Y ∗
– B asks for the other values Y ∗
i = H(i, h) = gy∗
m∗+1 = {n}, then B generates Hdr∗ = (C∗
Note that S∗
H(C∗
2 )r∗
, where
(cid:16)
1 , C∗
C∗
2 =
hu · (Y ∗
for i = 1, . . . , n;
k∗,⊥) is appended to the hash List;
i , for i = 1, . . . , k∗ − 1, k∗ + 1, . . . , m∗ + 1
1 = h and C∗
1 , C∗
, which is the value
3 =
(cid:96)
hn+1−j
k∗ hn+1−j
(cid:33)v
(cid:33)r∗(cid:89)
(cid:89)
j∈S∗
j∈S∗
gn+1−j
y∗
(cid:89)
2 , C∗
3 ) by setting C∗
(cid:89)
r∗v
(cid:89)
j∈S∗
gn+1−j
r∗v
y∗
gn+1−j
gn+1−j
(cid:96)
(cid:96)
(cid:96)
(cid:96)
j∈S∗
(cid:96)
j∈S∗
(cid:96)
y∗
(cid:96)
gn+1−j
j∈S∗
j∈S∗
(cid:96)
(cid:96)=1
(cid:96)(cid:54)=k∗
(cid:32)(cid:81)
(cid:81)
hu ·
k∗)u(cid:17) (cid:96)=m∗(cid:89)
(cid:32)
k∗ · (cid:96)=m∗(cid:89)
(cid:81)
r∗+y∗
(cid:96)=m∗(cid:89)
r∗+y∗
(cid:89)
gn+1−j
gn+1−j
j∈S∗
(cid:96)(cid:54)=k∗
(cid:96)(cid:54)=k∗
k∗
(cid:96)=1
(cid:96)=1
(cid:96)
gu
k∗ gn+1−j
v
= (gu)r∗+y∗
v
(cid:96)=m∗(cid:89)
(cid:89)
v
j∈S∗
k∗
=
=
(cid:96)=1
j∈S∗
(cid:96)
To generate the session keys, B ﬁrst computes
K∗
i = e(gn, g1)y∗
i · e(gn, h1) = e(gn+1, g)r∗+y∗
i ,
i (cid:54)= k∗.
It then randomly chooses a bit b ∈ {0, 1}, picks a random K∗
k∗,1−b in G and sets
K∗
k∗,b =
It gives (Hdr∗, K∗
k∗−1, Kk∗+1, . . . , K∗
Note that since T = e(gn+1, G), with G = Y ∗
1 , . . . , K∗
m∗+1, K∗
k∗gz∗
,
T · e(gn, h1)
e(gn+1, gz∗
)
k∗,1) as the challenge to A.
k∗,0, K∗
K∗
k∗,b =
e(gn+1, Y ∗
) · e(gn, h1)
k∗gz∗
e(gn+1, gz∗
)
= e(gn+1, g)y∗
k∗ · e(gn+1, g)r∗
= e(gn+1, g)r∗+y∗
k∗
Phase 2. B responds as in the ﬁrst phase. Note that, if A asks a decryption query with C1 = C∗
simply answers ⊥.
13
1 , B
In this game 2.1, the advantage of A is unchanged, except in case of problem during the program-
mation of H, which is required once only, and the query has already been asked with probabil-
ity 1/p: Succ1(A) − Succ2.1(A) ≤ 1/p. In a game 2.2, we replace T by a random element in G:
Succ2.2(A) = 1/2, whereas Succ2.1(A) − Succ2.2(A) ≤ Advdbdhe(B).
As a consequence,
Succs−ind(A) ≤ Succcdh(B1) + Advdbdhe(B2) + 1/p + 1/2,
where Bi denotes the simulator B in Game i.
(cid:117)(cid:116)
6 Conclusion
We initiate the new research line on multi-channel broadcast encryption and propose two eﬃcient
schemes with constant-size ciphertexts, while computationally similar to the original BGW scheme in
the single-channel setting. We leave some challenging open problems:
– While privacy concerns imply independent keys for all the channels a user subscribed to, this
however also leads to large decryption keys for users (linear in the number of channels). One could
prefer to have shorter or even constant size keys, sacriﬁcing on privacy, contrary to our priority
goal.
– Our ﬁrst scheme achieves the basic selective security level in the standard model while our second
scheme achieves the strong selective security level, which resists to both CPA and CCA, but in
the random oracle model. Ruling out the random oracle seems quite challenging because of the
implicit relations between session keys.
References
1. M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing eﬃcient protocols. In V. Ashby,
editor, ACM CCS 93: 1st Conference on Computer and Communications Security, pages 62–73. ACM Press, Nov.
1993.
2. D. Boneh, C. Gentry, and B. Waters. Collusion resistant broadcast encryption with short ciphertexts and private
keys. In V. Shoup, editor, Advances in Cryptology – CRYPTO 2005, volume 3621 of Lecture Notes in Computer
Science, pages 258–275. Springer, Aug. 2005.
3. C. Delerabl´ee. Identity-based broadcast encryption with constant size ciphertexts and private keys. In K. Kurosawa,
editor, Advances in Cryptology – ASIACRYPT 2007, volume 4833 of Lecture Notes in Computer Science, pages
200–215. Springer, Dec. 2007.
4. Y. Dodis and N. Fazio. Public key trace and revoke scheme secure against adaptive chosen ciphertext attack. In
Y. Desmedt, editor, PKC 2003: 6th International Workshop on Theory and Practice in Public Key Cryptography,
volume 2567 of Lecture Notes in Computer Science, pages 100–115. Springer, Jan. 2003.
5. A. Fiat and M. Naor. Broadcast encryption. In D. R. Stinson, editor, Advances in Cryptology – CRYPTO’93, volume
773 of Lecture Notes in Computer Science, pages 480–491. Springer, Aug. 1994.
6. C. Gentry and B. Waters. Adaptive security in broadcast encryption systems (with short ciphertexts). In A. Joux,
editor, Advances in Cryptology – EUROCRYPT 2009, volume 5479 of Lecture Notes in Computer Science, pages
171–188. Springer, Apr. 2009.
7. A. B. Lewko, A. Sahai, and B. Waters. Revocation systems with very small private keys. In 2010 IEEE Symposium
on Security and Privacy, pages 273–285. IEEE Computer Society Press, May 2010.
14
8. D. Naor, M. Naor, and J. Lotspiech. Revocation and tracing schemes for stateless receivers. In J. Kilian, editor,
Advances in Cryptology – CRYPTO 2001, volume 2139 of Lecture Notes in Computer Science, pages 41–62. Springer,
Aug. 2001.
9. D. H. Phan, D. Pointcheval, S. F. Shahandashti, and M. Streﬂer. Adaptive CCA broadcast encryption with constant-
size secret keys and ciphertexts. IACR Cryptology ePrint Archive 2012: 216, 2012. http://eprint.iacr.org/2012/
216.pdf.
10. D. H. Phan, D. Pointcheval, and M. Streﬂer. Security notions for broadcast encryption. In J. Lopez and G. Tsudik,
editors, ACNS 11: 9th International Conference on Applied Cryptography and Network Security, volume 6715 of
Lecture Notes in Computer Science, pages 377–394. Springer, June 2011.
11. B. Waters. Dual system encryption: Realizing fully secure IBE and HIBE under simple assumptions. In S. Halevi,
editor, Advances in Cryptology – CRYPTO 2009, volume 5677 of Lecture Notes in Computer Science, pages 619–636.
Springer, Aug. 2009.