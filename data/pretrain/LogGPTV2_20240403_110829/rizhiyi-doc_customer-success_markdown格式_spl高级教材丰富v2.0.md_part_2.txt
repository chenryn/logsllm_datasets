starttime=\"-13d/d\" endtime=\"+1d/d\" \*
\|timechart span=1d count() as cnt
\|timewrap 1w series=short
\|where formatdate(\_time,\"E\")==\"Mon\"
\|rename cnt_s1 as \'上周一交易量\',cnt_s0 as \'本周一交易量\'
![图片包含 屏幕截图
描述已自动生成](media/image13.png){width="5.763888888888889in"
height="1.9819444444444445in"}
**chart 非时序数据绘图**
#### 作用
timechart命令可直接得到时序图的预期绘图效果，如绘制饼图、柱状图等。但非时序图有些场合也需要进行绘图，此时就可用chart命令。
使用统计函数计算并绘制维度图形，主要对非时序数据进行绘图，按照over字段分桶后进行统计。
#### 语法
chart \[\\]\* \
\[\\]\* \[over \ \\*\]
\[by \ \\*\]
必要参数：\: 即用于统计的函数
rendertype:可选值，用于指定绘图的类型
非必要参数：\
> bins=\ 默认值100，表示最多有多少个桶
>
> span=\
> 表示分桶间隔，格式为数字或数字+单位，与bucket指令span参数的格式相同
>
> startindex=\
> 默认值为0，表示从所有桶中的第几个桶开始取，前面的桶对应被舍弃
>
> endindex=\
> 默认值无穷大，表示取到所有桶中的第几个桶，后面的桶对应被舍弃
>
> by \: 表示分列字段
>
> \：\[bins=\\] \| \[span=\\] \|
> \[startindex=\\] \| \[endindex=\\]
#### 场景
非时序数据需要进行统计或可视化的需要。如我们需要看一下Oracle数据库实例在一定时间内的状态占比，有的可能还是多个实例。除此，也可以想到统计不同部门人员数量的占比等。
#### 示例
示例1、统计Oracle数据库实例的状态
appname:oracle
\| chart rendertype=\"pie\" count(INSTANCE_NAME) over STATUS by
INSTANCE_NAME ![](media/image14.png){width="5.763888888888889in"
height="2.609027777777778in"}
示例2、 作一个旭日图
\| makeresults count=10
\| eval app=\"ops\" \| eval tag=\"soc\"
\| append \[\[ \| makeresults count=25 \| eval app=\"dev\" \| eval
tag=\"siem\"\]\]
\| chart rendertype=\"sunburst\" count() over tag by app
![](media/image15.png){width="5.763888888888889in"
height="2.7840277777777778in"}
示例3、 复杂一点的chart语句
字段分割符为\*\*，组合顺序为byfield值+分隔符+统计字段，限制byfield值为5个进行组合，桶最大个数
为10个，分桶为1小时一个，按照agent_send_timestamp进行分组后的结
果，collector_recv_timestamp分组间隔为50，最多分为20个桶，取第四到第六个桶值；
\* \| chart sep=\",\" format=\"\$VAL\*\*\$AGG\" limit=4 cont=true
count() over agent_send_timestamp bins=10 span=\"1h\" by
collector_recv_timestamp span=\"50\" bins=20 startindex=4 endindex=7
![](media/image16.png){width="5.763888888888889in"
height="4.113194444444445in"}
# 统计类命令
### rollingstd 移动平均
#### 命令研发背景
计算移动标准差，移动标准差属于统计学与科学计算的基本概念之一，表示样本数据的离散程度。
#### 作用
计算移动标准差。
#### 语法
rollingstd \\[,\\] \[as \\] \[by
\\]
必要参数：
> \ \ 需要计算移动标准差的字段
可选参数：
> \ \
> 移动窗口的大小，对于序号小于window的事件，将根据前面实际的事件进行计算
>
> \：\,\...分组字段，在分组内进行移动标准差的计算
#### 场景
计算移动平均值，利用移动平均值进行数值区间划分，如upper区间，lower区间。譬如某支股票的下跌的支撑点位可以当作是lower区间，上涨的压力点位是upper区间。或者在告警方面，如果cpu利用率或内存占用率超过upper阈值，则触发告警。如果是虚机方面，如果硬盘使用率低于lower阈值，则考虑是否释放资源。
#### 示例
利用移动平均值计算upper区间与lower区间。
\*
\| bucket timestamp span=3h as ts
\| stats count(appname) as count\_ by ts
\| movingavg count\_,5 as ma
\| rollingstd count\_,5 as rs
\| eval lower=ma-3\*rs
\| eval upper=ma+3\*rs
\| eval outlier=if(count\_\>upper\|\|count\_\\]\* \[\\]+ \[by
\\]
stats-func-as 参数
avg() \| min() \| max() \| sum() \| count() \| dc() \| first() last() \|
earliest() \| latest() \| list() \| values() \[as \\]
  ------------------------------------------------------------------------------------------------------
  **参数(必要参数)**                                     **说明**
  ------------------------------------------------------ -----------------------------------------------
  avg() \| min() \| max() \| sum() \| count() \| dc() \| 统计使用的函数,支持使用as参数命名为一个新字段
  first() last() \| earliest() \| latest() \| list() \|  
  values() \[as \\]                              
  ------------------------------------------------------------------------------------------------------
streamstats-params参数
\[reset_on_change=\\] \| \[reset_before=\"\\"\]
\| \[reset_after=\"\\" \] \| \[current=\\] \|
\[window=\\] \| \[time_window=\\] \|
\[global=\\] \| \[allnum=\\] \| \[timefield=\\]
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **参数(可选参数)**   **说明**
  -------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  reset_on_change      当group by字段的值改变时 是否将累计的统计值重置。只有遇到包含所有group by 字段的事件才会触发这一操作，只有一部分group by 字段的事件会被忽略。当此参数与window一起使用时，window也会被重置。\
                       默认值：false
  reset_before         在生成对某一事件的统计值之前重置统计。当此参数与window一起使用时，window也会被重置。\
                       \请参考\[#搜索命令函数\]
  reset_after          在生成对某一事件的统计值之后重置统计。当此参数与window一起使用时，window也会被重置。\
                       \请参考\[#搜索命令函数\]
  current              统计是否包含当前event\
                       默认值:true
  window               事件数窗口大小\
                       默认值: 0(所有事件)
  time_windo           时间窗口的大小。当time_window和window一起使用时，time_window规定的是一个window内部的时间窗口大小。无论是window还是time_window其实影响的都是在某一窗口中命中的事件数\[使用time_window参数的前提是时间必须是按时间字段排序的\]
  global               只有在指定window时生效，决定是否使用单一window还是使用由by字段决定的多个window\
                       默认值:true
  allnum               聚合字段截止目前是否全部为数值。当allnum为false时，遇到聚合字段为非数值型会跳过此条日志进行统计，即当前这条日志的统计结果为空；allnum为true时，遇到聚合字段为非数值型时会将此条及以后所有日志的统计值均置为空。
  timefield            指定日志中的时间字段名称\
                       默认值:timestamp
  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#### 示例
示例1：给spl统计结果增加行号，可进行后续的钻取
\| makeresults count=14
\| streamstats count() as cnt by timestamp
说明：
makeresults count=14
\# 构造14个结果集
streamstats count() as cnt by timestamp
给14个结果集进行生成行号，cnt的值表示行号
![https://i.loli.net/2020/03/09/uypcToA54PCRvHz.png](media/image18.png){width="5.763888888888889in"
height="3.7381944444444444in"}
示例2：对行字段值进行累积求和
\| makeresults count=10
\| streamstats window=10 count() as cnt by timestamp
\| streamstats sum(cnt) as a
说明：
在这里是对cnt进行逐行求和的
既：第一行时，cnt为1，那么a为1
第二行时，cnt为2，这个时候a为3(1+2)
以此类推
![https://i.loli.net/2020/03/09/hGX6CY4qvxgDjbc.png](media/image19.png){width="5.763888888888889in"
height="3.3152777777777778in"}
示例3：这是模拟一个连续统计告警，在30分钟内，按照5分钟分桶，统计json.pid值连续多少次值超过3400
appname:top_info_proc_stats
\|eval json.pid=todouble(json.pid)
\|bucket timestamp span=5m as ts
\|stats avg(json.pid) as a by ts
\|eval o=if(a\>3400,1,0)
\|eval o=tolong(o)
\|streamstats sum(o) as \_sum
说明：
json.pid字段 ，30分钟内分6桶的平均值，连续超过 3400阈值的次数
![https://i.loli.net/2020/03/09/83hOYLNiW5MFQwS.png](media/image20.png){width="5.763888888888889in"
height="2.5430555555555556in"}
最后排下序就能拿到连续几次超过3400阈值
![https://i.loli.net/2020/03/09/H4nZXTFmd87kstB.png](media/image21.png){width="5.763888888888889in"
height="1.49375in"}
### geostats 经纬度统计
#### 作用
按照经纬度划区对日志信息进行统计；
#### 语法
geostats \[\\]\* \ \[统计函数\]\* \[by
\\] geostats-parmas：\[latfield=\\]：纬度字，lat；
\[longfield=\\]：经度字段，lon；\[outputlatfield=\\]：结果中中纬度分桶后的字段，latitute；
\[outputlongfield=\\]：结果中中经度分桶后的字段名，默认longitute；
\[binspanlat=\\]：维度分桶间隔，默认22.5；
\[binspanlong=\\]：经度分桶间隔，默认45.0；
\[maxzoomlevel=\\]：最大缩放级别，默认9；
by-field：分组依据字段名称；
#### 场景
可以按照经纬度来统计日志数据。
#### 示例
appname:vendors
\|geostats
latfield=vendors.VendorLatitude longfield=vendors.VendorLongitude
outputlatfield=ccc
outputlongfield=ddd binspanlat=35.5 binspanlong=40.65
maxzoomlevel=8 count() as cnt by hostname
![](media/image22.png){width="5.763888888888889in" height="0.575in"}
**movingavg 计算近期平均线反映未来走势**
#### 命令研发场景
股市中经常需要用移动平均线去获知、预测股票当前的位置以及未来的走势，日志中也同样需要它来预测未来的交易量、商品价格等趋势。
#### 作用
movingavg命令可以很方便地计算出数据的近5天、近15天、近60天移动平均线值。
#### 语法
movingavg \\[,window\] \[as \\] \[by
\\]
**必要参数：**
\：
语法：\
描述：需要计算移动平均值的字段
**可选参数：**
\：
语法：number
描述：移动窗口的大小，对于序号小于window的事件，将根据前面实际的事件进行计算
\：
语法：\
描述：移动平均值的输出字段名
默认值：\_\_moving_avg
\