According to [1], HTTP accounts for over 50% of traffic at a major
European IXP and, according to our scans, we can successfully
exchange data with ≈ 48.3 M hosts on port 80. For the same reasons,
HTTP was used in prior works to infer the IW size, e.g., Padhye and
Floyd [18] or Medina et al. [15]. Both works can only ensure large
enough responses that fill the IW by providing URL lists defining
an appropriate request for each probed host. However, an extensive
assessment of the entire IPv4 space is not feasible by relying on prior
knowledge. We therefore propose an extended approach that allows
inferring the IW of HTTP servers without any prior knowledge
such as precompiled URL lists triggering large responses.
Our proposed approach is as follows; we initially request the /
page hoping that it contains enough payload to fill the IW. As we
have no prior knowledge of the host, we can only include the IP in
the mandatory HTTP Host header. Many (virtualized) servers will
reply with a 301 Moved Permanently error, thus we can extract a
valid URI from the Location header in the error response. In these
cases, the extracted URI will redirect us to a valid page. We can
further provide a valid Host header, if the host’s common name
is included in the URI. These information enables to again issue a
request that hopefully results in a larger response. So, we send a
RST to quickly end the connection and issue another request on a
new connection following the redirect.
If redirecting fails, we increase the response size by bloating
possible error pages. This approach is motivated by an initial ob-
servation (not shown) that a substantial number of servers replies
with 404 Not Found pages that include the URI that could not
be found. Thus, enlarging the request URI will enlarge the error
response. We therefore request a long URI indicating the nature of
Figure 2: CCDF of certificate chain length of 36.5M hosts
from censys.io data. TCP payload sizes covered with several
IWs using MSS of 64 and a typical MSS of 1336 B.1
the scan, anticipating a long enough response. We choose the URI
to fill up the MTU of our connection, thus transmitting more bytes
than we announced we would be capable of in the MSS.
In addition to acknowledging segments to look for more data,
we additionally infer if the IW was actually exhausted by exploiting
HTTP characteristics. Concretely, we request that the remote end
closes the connection upon finishing the transmission by including
the Connection: close HTTP header. This should lead to a FIN
once the remote end has transmitted all data. However, if the remote
end has still data after it filled the IW, it cannot send the FIN as it
still has data in its transmit queue. By receiving the FIN, we infer
that the IW was not reached (in the absence of packet loss).
3.3 TLS-based IW Inference
Rising security and privacy concerns contributed to an increasing
use of HTTPS, the TLS tunneled version of HTTP [17]. After port
scans of the default HTTPS TCP port 443, we were able to suc-
cessfully exchange data with ≈ 42.6 M hosts. This share is further
expected to grow. Not only traditional services (e.g., banking or
e-commerce) are using TLS also big players such as Facebook or
Google have started to secure all of their traffic, further motivating
others to switch. This trend is also manifested in HTTP/2 [6]—even
though not mandated by the standard, practically all current imple-
mentations enforce TLS. Given this increasing relevance, we next
detail a TLS-based inference method.
Our IW inference utilizes the TLS handshake in which a large
response is sent by the server. In TLS, the handshake is initiated
with a client hello, indicating, e.g., cipher suites or extensions.
Upon reception, the server replies with a server hello choosing
a cipher and depending on that, key material. Most importantly,
the server continues to transmit its certificate chain that is required
to validate its trust. Certificates typically dominate the server’s
answer in the number of bytes.
We analyzed TLS handshakes using the data provided at cen-
sys.io. Figure 2 shows the complementary CDF of server certificate
chain length of 36.5 M hosts. On average, the certificate chain length
was 2186 B (minimum 36 B and maximum 65 kB). For our scan to
succeed, the remote host needs to send us at least IW · MSS bytes.
Assuming an MSS of 64 B and IW 10, we only need 640 B of certifi-
cates which are supplied by more than 86% of the hosts. We can
still reach 50% of the hosts even if they would use IW 34. These cal-
culations neglect the actual size of the server hello and possible
extensions that follow, yielding even more payload to rely on.
To scan a host, we initiate the TLS handshake after completing
the TCP handshake. Since completing the TLS handshake relies on
012345678SizeinkB0.00.20.40.60.81.0CCDFCertificateChainLengthMSS64,IW1/2/4/10MSS1336,IW1/2/4IMC ’17, November 1–3, 2017, London, United Kingdom
Rüth et al.
the offered cipher suites by the client, we compiled a list of 40 TLS
ciphers announced by Safari, Firefox, and Chrome and enriched the
list with ciphers that we extracted from the censys.io data that were
not already announced by the three browsers. To generate even
more data, we included extensions for requesting OCSP stapling.
We rely on our acknowledging method to determine if the IW
was filled or not. Yet in contrast to HTTP, we could have inspected
the TLS length fields and use these to determine if we can still
expect more data to be available. However, looking into payloads
requires that we have no packet loss and it further complicates the
implementation and we found no advantage doing so.
3.4 ZMap-based Implementation
Our ability to probe the entire IPv4 space in less than a day is based
on ZMap [10]. ZMap is designed for a single packet exchange with
the target to probe for open ports. Since this optimized port scan
design is not capable of exchanging multiple packets with the target
(as needed for TCP), we added this functionality in a lightweight
fashion. We added a probe module to establish TCP connections
and keep track of various per-connection properties such as the
length of each segment and connection state. This design still al-
lows us to perform fast scans, e.g., at a moderate scan rate of only
150 k packets/s, our HTTP-based IW scan only needs 7.5 hours to
probe the entire IPv4 address space. An unmodified ZMap scanner
performs a port scan at the same rate in only 6.8 hours—recall that
the unmodified scanner performs only a single packet exchange
with the host, instead of full TCP connections with subsequent
exchanges. This highlights the efficiency of our scan method.
3.5 Validation
We manually validated our IW estimation approach in two con-
trolled testbed experiments by running different versions of Linux
and Windows. Each OS ran (TLS)-web servers, serving different
files to trigger both cases of having i) enough and ii) insufficient
data available (i.e., less than the IW) and captured packet traces. In
the first experiment, we compared our estimator against ground
truth by comparing against the true IW value configured in each OS.
When enough data was available, the estimator provided the correct
IW in all tested cases. In a second experiment, we added packet
loss using NetEM to check its influence on the estimation accuracy.
We restrict this experiment to only probe a single recent Linux and
manually inspected each packet trace. All obtained IW estimates
were correct in the absence of tail loss. Only instances with tail loss
would lead to an underestimation of the IW. We argue that multiple
scans per host can limit the likelihood of underestimated IWs.
4 RESULTS: IW DISTRIBUTIONS
Scan setup. To evaluate the IW distribution on the Internet, we
operate a scanner within our University’s network. This operation
is closely coordinated with the University’s IT Center to properly
react to abuse emails and to have unfiltered access to the Internet
(e.g., without transparent web proxies). We followed the guidelines
in [10] and set up reverse DNS entries and a web page explaining the
1We implemented an ZMap based ICMP path discovery following RFC 1191 estimating
typical MSS values, highlighting the IW requirements of TLS. We found 99% (80%) of
all hosts support an MSS of 1336 B (1436 B).
Scan Reachable
48.3 M
HTTP
TLS
42.6 M
Success
50.8%
85.6%
Few Data Error
1.6%
1.1%
47.6%
13.3%
Table 1: Scan data set overview (rounded) scanned with MSS
64. Reachable meaning data exchange is possible.
nature of the scans together with an opt-out mechanism. Unroutable
or blacklisted IPs were not scanned.
Dataset. The presented results are based on two scans performed
in the second and third week of August 2017 and are summarized
in Table 1. We declare a success, if we are able to estimate the IW,
we mark a scan as few data if we cannot be certain that the IW was
actually exhausted, error marks all other cases (e.g., connection
reset). For our measurements we decided to probe each host three
times to account for tail loss and count it successful if at least two
out of three probes yield the same result and as tail loss may occur,
we require them to be the maximum of all three probes. To further
test if hosts adjust their IW based on the announced MSS (recall
that the standard also defines a byte limit), i.e., to always transmit
a certain amount of bytes in contrast to segments, we scan with an
MSS of 64 B and 128 B. To ensure no temporal changes at the host,
all six probes (three for each MSS) are sent after each other.
HTTP Scan Ethics. Our HTTP probing methodology is arguably
more intrusive than TLS-based probing. The reason is that HTTP
probing is requesting actual web (error) pages and thus generates
entries in server access logs. These entries triggered a significantly
higher number of abuse e-mail than our TLS-based probing. As
discussed in Section 4.1, the Internet-wide probing footprint can be
drastically reduced by only probing a random sample of IPs to get
stable IW distributions: currently, probing 1% IPs suffices.
Success rates. In total, we successfully probed 60.9 M distinct IPs,
of which 7 M offered both services. Table 1 shows that TLS yields
higher success rates than HTTP. HTTP probing of unknown hosts
mainly suffers from not generating sufficient response data for IW
inference. We tried to mitigate this by expanding error pages with
long URLs, yet we found that, e.g., Akamai changed their default
error page during our scans to not include the URL anymore. In
contrast to HTTP, TLS returns more data (e.g., due to certificates)
and is less intrusive. Still, around 13% of hosts return insufficient
data. We attribute this to missing Server Name Indication informa-
tion since connections are closed when no (forward) DNS names
are presented, which are unavailable when only enumerating IPs.
4.1 Overall IW Distribution
We start by exploring the overall distribution of IW sizes for both
HTTP and TLS. The reported results are based on successful IW
estimations (see Table 1) with an MSS of 64 bytes. Figure 3 shows
dominant IWs, i.e., observed at more than 0.1% of the hosts. We
see that both scans are dominated by the IWs of 1, 2, 4, and 10
segments. These IWs are present at more than 97% of all scanned
HTTP or TLS hosts. This finding is in line with recommendations
in various RFCs. Out of 7 M IPs that appear for both HTTP and
TLS, 6.2 M agree in their IW estimate and 858 k IPs yield different
IW estimates for HTTP and TLS. Interestingly, we find that the
TLS scan and the HTTP scan differ in the distribution of IW4 and
IW10: we find more TLS hosts with IW 4 than HTTP. In contrast
Large-Scale Scanning of TCP’s Initial Window
IMC ’17, November 1–3, 2017, London, United Kingdom
Figure 3: IW distribution in IPv4 of HTTP and TLS for IWs
used by at least 0.1% of the hosts, probed with an MSS = 64 B.
IW7
IW8
IW4
IW5
IW6
IW3
IW1
IW2
Scan NoData
HTTP
TLS
IW9
4.8% 16.5% 7.1% 7.2% 2.9% 3.6% 2.0% 45.0% 2.7% 1.1%
17.8% 56.3% 5.6% 0.7% 1.9% 2.8% 2.4%
2.4% 3.4% 0.4%
IW10
0.9%
0.8%
Table 2: Lower bounds of IWs for hosts that did not send
enough data and the MSS observed in the connection.
to the measurement by Medina et al. [15] from 2005, we observe
that IWs of 4 and 10 segments have gained the highest relative
growth. When analyzing non-standard IWs, we observe two peaks,
one at 25 (TLS) and one at 64 segments (HTTP). However, the low
overall deployment of IW 10, especially on TLS-enabled host, is
notable, given its standardization in RFC 6928 is already four years
old and its implementation, released in the Linux kernel 2.6.39 from
May 2011, is even older.
Lower IW bound for hosts with insufficient data. As indicated
by our success rate, we are roughly missing half of the HTTP
(and 13.3% TLS) hosts by not having enough data available for IW
probing (see “Few Data” in Table 1). To better understand these
hosts, Table 2 shows their minimum supported IW, i.e., before they
run out of data. The picture is different for HTTP and TLS. For
HTTP, we find that 45.0% of probed hosts run out of data after
having transmitted data worth of an IW of 7. Given the current
standards, it is very likely that these hosts are actually configured
to use an IW of 10. For TLS, 17.8% do not sent any data (i.e., 4×
more than for HTTP) and 56.3% run out of data after an IW of 1.
This is likely caused by hosts not supporting our cipher suits or TLS
versions offered by our probing module. Here, we are not receiving
any certificates but only TLS error messages. In these cases, no
speculations on likely IW configurations can be made.
Scanning 1% is enough! We next investigate if the Internet-wide
scan footprint can be reduced by limiting IW probing to a smaller
subset of hosts. We thus extracted a random subset of 50%, 30% and
1% of all successfully probed IPs for both the HTTP and the TLS scan
and show their IW distributions in Figure 3. For the 1% sample we
additionally show the mean of 30 random subsamples and the 99%-
quantile in red (which is small and hardly visible). We observe stable
distribution for any sample size. This indicates that only probing
1% of all IPs already yields a stable distribution—even for IWs only