title:CORSICA: Cross-Origin Web Service Identification
author:Christian Dresen and
Fabian Ising and
Damian Poddebniak and
Tobias Kappert and
Thorsten Holz and
Sebastian Schinzel
CORSICA: Cross-Origin Web Service Identification
Christian Dresen
Fabian Ising
Damian Poddebniak
PI:EMAIL
Münster University of Applied
Sciences
PI:EMAIL
Münster University of Applied
Sciences
PI:EMAIL
Münster University of Applied
Sciences
0
2
0
2
r
p
A
2
]
R
C
.
s
c
[
1
v
9
3
9
0
0
.
4
0
0
2
:
v
i
X
r
a
Tobias Kappert
PI:EMAIL
Münster University of Applied
Sciences
Thorsten Holz
PI:EMAIL
Ruhr-University Bochum
Sebastian Schinzel
PI:EMAIL
Münster University of Applied
Sciences
ABSTRACT
Vulnerabilities in private networks are difficult to detect for attack-
ers outside of the network. While there are known methods for
port scanning internal hosts that work by luring unwitting internal
users to an external web page that hosts malicious JavaScript code,
no such method for detailed and precise service identification is
known. The reason is that the Same Origin Policy (SOP) prevents
access to HTTP responses of other origins by default.
We perform a structured analysis of loopholes in the SOP that can
be used to identify web applications across network boundaries. For
this, we analyze HTML5, CSS, and JavaScript features of standard-
compliant web browsers that may leak sensitive information about
cross-origin content. The results reveal several novel techniques,
including leaking JavaScript function names or styles of cross-origin
requests that are available in all common browsers.
We implement and test these techniques in a tool called COR-
SICA. It can successfully identify 31 of 42 (74%) of web services
running on different IoT devices as well as the version numbers of
the four most widely used content management systems WordPress,
Drupal, Joomla, and TYPO3. CORSICA can also determine the patch
level on average down to three versions (WordPress), six versions
(Drupal), two versions (Joomla), and four versions (TYPO3) with
only ten requests on average. Furthermore, CORSICA is able to
identify 48 WordPress plugins containing 65 vulnerabilities.
Finally, we analyze mitigation strategies and show that the pro-
posed but not yet implemented strategies Cross-Origin Resource
Policy (CORP) and Sec-Metadata would prevent our identification
techniques.
CCS CONCEPTS
• Security and privacy → Web application security; Network
security; Browser security; • Computer systems organization
→ Embedded systems; Redundancy; Robotics; • Networks →
Network reliability.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3372196
KEYWORDS
SOP; JavaScript; Service Identification; Fingerprinting; Web Secu-
rity; Perimeter Security
ACM Reference Format:
Christian Dresen, Fabian Ising, Damian Poddebniak, Tobias Kappert, Thorsten
Holz, and Sebastian Schinzel. 2020. CORSICA: Cross-Origin Web Service
Identification. In Proceedings of the 15th ACM Asia Conference on Computer
and Communications Security (ASIA CCS ’20), October 5–9, 2020, Taipei, Tai-
wan. ACM, New York, NY, USA, 11 pages. https://doi.org/10.1145/3320269.
3372196
1 INTRODUCTION
Network segregation remains a cornerstone of Internet security
as it often separates insecure services within private networks (In-
tranet) from the public Internet. For example, a firewall acts as
a network perimeter that filters packets between both networks,
often in a way that outgoing connections are allowed and incom-
ing connections blocked. Setups with network address translation
(NAT) commonly show this behavior. Administrators focus on se-
curing Internet-facing services but often treat Intranet applications
with minor importance. In consequence, Intranet applications are
often not patched with the latest security updates or use insecure
configuration settings. This leads to situations where Intranet ap-
plications may contain well-known vulnerabilities that are easy to
exploit using common attack frameworks [27, 33]. Exploits against
web applications play a unique role here because attacks like Cross-
Site Request Forgery (CSRF), Cross-Site Scripting, or SQL Injection
can be used to cross perimeters. For example, a web attacker can
create an Internet website containing exploits and lure unsuspecting
users within the private network to visit that page. The victim’s
browser then attacks a target within the private network.
From a web attacker’s viewpoint, she has the problem of learning
detailed information about the victim’s network in order to perform
such an attack successfully. At which IP/port within the private
network runs a vulnerable web application with known exploits?
There are known attacks that randomly try known exploits
against IP addresses in private networks [18, 22], which is effec-
tive for compromising many random hosts but is not suitable for
targeted attacks. While it is known to be possible to perform port
scans in a cross-origin fashion using JavaScript [10], there is no
such method to learn detailed information about web applications
like type and version. Existing web service identification tools do
Figure 1: Simplified STUN process: A client behind a NAT sends a STUN request to a STUN server and receives its Internet-
facing IP address in response.
not work from browsers and across origins. This information short-
age about the victim’s network makes targeted attacks against web
applications in private networks difficult.
This leads to our main research question: Is it possible to perform
precise web service identification across network perimeters that use
standard browser functionality and that work across origins?
We perform a structured analysis of standard-conforming CSS,
HTML5, and JavaScript functionality and introduce several tech-
niques that can be used to create unique identifiers of web appli-
cations and that work across origins. These identifiers are used to
query a database of known identifiers to learn the type and version
of web applications.
We implemented the proposed techniques in a tool called COR-
SICA1 and measured its effectiveness against a testbed of widely
used web services and different IoT services. The analysis shows
that CORSICA can successfully detect the type and version of web
applications running on 250 IoT devices, 122 different versions
of content management systems, and 48 WordPress plugins with
known, remotely exploitable vulnerabilities.
In summary, we make the following contributions in this paper:
• We present novel techniques that allow identifying web-
based services using standard browser features and that
work cross-origin (Section 4).
• We describe a method to automatically learn feature vectors
• We implement the techniques in a tool called CORSICA and
show that it can successfully identify 154 out of 250 tested
IoT systems running web applications. It can identify patch
level versions of content management systems on average
down to three versions (WordPress), six versions (Drupal),
two versions (Joomla), and four versions (TYPO3) as well as
48 out of 600 WordPress plugins containing known remotely
exploitable vulnerabilities (Section 6).
• Finally, we discuss possible strategies that prevent the pre-
for identifying a web-based service (Section 5).
sented identification techniques (Section 7).
2 BACKGROUND AND RELATED WORK
In its current state, the Internet is not a single large network of
devices, it rather is a collection of multiple smaller networks and
devices. Smaller networks are often encapsulated and cannot be
directly reached from the outside. However, collaboration in the
form of resource sharing between services on different devices and
networks is a desired feature of the Internet. While these features
1https://github.com/FHMS-ITS/CORSICA
are commonly used by many web services for collaboration, they
allow a non-negligible attack surface if implemented insecurely.
2.1 Perimeter Security
Today, services on private and corporate networks are usually hid-
den behind a perimeter in the form of firewalls or Network Address
Translators (NATs). While firewalls actively protect services from
external access by blocking specific ports and traffic, NATs usually
provides the same feature passively.
NAT was standardized in the 1990s by the IETF [9] in response to
concerns about the exhaustion of the available IPv4 address space.
While the Internet was initially designed with the assumption that
every device with access to the Internet has its own IP address, NAT
enables the reuse of specific address blocks for internal networks.
NAT boxes enable this reuse by translating internal IP addresses
to a single Internet-facing IP address, effectively blocking direct
access to devices on the internal networks from the Internet.
Nevertheless, it is possible to learn certain information about the
network using JavaScript inside a browser in a NAT environment.
For example, a malicious website can perform network scans re-
vealing available hosts as well as, to a certain extent, open ports. An
example of this is pingjs by Jonathan Frederic [10] that uses onload
and onerror events inside JavaScript to discover hosts inside the
network. Furthermore, as NAT breaks desired functionality of the
Internet (e.g., peer-to-peer connections between clients on different
networks), several workarounds, called NAT traversal strategies,
have been proposed. One of these proposals are the Session Traver-
sal Utilities for NAT (STUN, see Figure 1). STUN requires a STUN
server outside of the internal network of a client. First, the client
sends a STUN request to the server. As the client is located behind
NAT, its internal IP address is translated to the Internet-facing IP
address before it reaches the STUN server. The STUN server then re-
turns a STUN response containing the contacting public IP address
to the client [28]. Additionally, if STUN is used from JavaScript,
the browser will provide the internal IP address to the JavaScript
context.
2.2 Same-Origin Policy in Browsers
The Same-Origin Policy (SOP) restricts the interactions of scripts
between different origins. This means that the resource access
between these origins is restricted [23]. Examples for resources are
images, scripts, styles, or frames. Netscape introduced the SOP in
1995 alongside JavaScript and the Document Object Model (DOM)
[40]. Interaction of web resources from multiple origins is also
called cross-origin access. In general, the SOP allows to request and
Browser192.168.0.5203.0.113.42(1) STUN Request(2) STUN Response(2) STUN Response203.0.113.42(3) ICE Event(192.168.0.5, 203.0.113.42)203.0.113.42NATSTUN Server192.168.0.0/24(1) STUN Requestembed resources from other origins. However, it forbids read access
to, and interaction with the content received from another origin.
Even though the SOP has been a staple of web security for many
years, to this day, it is not formally defined and not implemented
consistently in different browsers [29].
As described above, embedding resources like images, style
sheets, and even whole pages into a website is typically allowed.
For websites, it is necessary to access some information about the
embedded cross-origin resource to place them correctly inside their
DOM. Therefore some information must be made available. For
example, a script running in the origin attacker.org can request a
picture from the origin target.org. Therefore attacker.org can embed
it into her own DOM and can read the dimensions of the image to
format the website accordingly. However, it cannot interact with
the actual contents of the response, including access to any pixel
data of the image [23].
2.3 Cross-Site Request Forgery
Cross-Site Request Forgery (CSRF) is a type of attack against web
applications that exists since the 1990s but got its name in 2001 from
Peter Watkins. CSRF attacks trick a user into performing actions of
an attacker’s choosing by leveraging the victim’s browser [8]. For
example, an unassuming user’s browser that is lured onto a website
controlled by an attacker could be tricked into making a request
to their webmail provider trying to install a filter to forward all
e-mails to the attacker. Assuming the victim is logged into their