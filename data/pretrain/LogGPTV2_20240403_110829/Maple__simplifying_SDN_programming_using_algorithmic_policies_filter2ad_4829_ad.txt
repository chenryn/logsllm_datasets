and port pair, then all paths using the switch/port pair (i.e., link)
will be invalidated. This topology invalidation is typically invoked
by a Maple event listener that receives Openﬂow control events.
Maple also contains an API to update the trace tree to implement
fast-routing. This is out of scope of this paper.
4.3 Rule & Priority Optimization
Motivation: With the basic algorithms covered, we now present
optimizations. We start by revisiting the example that illustrates
BUILDFT at the end of Section 4.1. Let FTB denote the example FT
generated. Consider the following FT, which we refer as FTO:
[ (1, tcp_dst_port=22
, drop),
(0, eth_dst==4 && eth_src==6, port 30),
(0, eth_dst==2
One can verify that the two FTs produce the same result. In other
words, the example shows that BUILDFT has two problems: (1) it
may generate more ﬂow table rules than necessary, since the barrier
rule in FTB is unnecessary; and (2) it may use more priority levels
than necessary, since FTB has 4 priorities, while FTO has only 2.
, drop)]
Reducing the number of rules generated for an FT is desirable,
because rules are often implemented in TCAMs where rule space
is limited. Reducing the number of priority levels is also beneﬁ-
cial, because TCAM update algorithms often have time complexity
linear in the number of priority levels needed in a ﬂow table [18].
Barrier elimination: We start with eliminating unnecessary bar-
rier rules. BUILDFT outputs a barrier rule for each T node t. How-
ever, if the rules emitted from the positive branch t+ of t is com-
plete (i.e., every packet matching t+’s match condition is handled
by t+’s rules), then there is no need to generate a barrier rule for
t, as the rules for t+ already match all packets that the barrier rule
would match. One can verify that checking this condition elimi-
nates the extra barrier rule in FTB.
Deﬁne a general predicate isComplete(t) for an arbitrary tree
node t: for an L node, isComplete(t) = true, since a BUILDFT
derived compiler will generate a rule for the leaf to handle exactly
the packets with the match condition; for a V node, isComplete(t) =
true if both |subtrees t| = |dom(attr t)| and isComplete(subtree v)
for each v ∈ keys(subtrees t); otherwise isComplete(t) = false
for the V node. For a T node t, isComplete(t) = isComplete(t−).
We deﬁne needsBarrier (t) at a T node t to be true if t+ is not
complete and t− is not Ω, false otherwise.
Priority minimization: Minimizing the number of priorities is
more involved. But as we will show, there is a simple, efﬁcient
algorithm achieving the goal, without the need to increase priority
after outputting every single rule, as BUILDFT does.
Consider the following insight: since rules generated from dif-
ferent branches of a V node are disjoint, there is no need to use
priority levels to distinguish them. Hence, the priority increment
from 0 to 1 by BUILDFT for the example at the end of Section 4.1
is unnecessary. The preceding insight is a special case of the gen-
eral insight: one can assign arbitrary ordering to two rules if their
match conditions are disjoint.
Combining the preceding general insight with the ordering con-
straints shown in Equation (1) in Section 4.1, we deﬁne the minimal
priority assignment problem as choosing a priority assignment P to
rules with the minimal number of distinct priority values:
minimize
P
subject to
|P|
(ri → rj ) ∧ (ri, rj overlap) : P (ri)  a
2, ipDst:101.1.0.0/16
--> c
1, ipDst:101.23.0.0/16 --> b
--> d
1, ipDst:101.0.0.0/13
0, *
--> e
4.4 Efﬁcient Insertion and Invalidation
We now adapt the algorithms of the preceding sections to be-
come incremental algorithms, which typically update rules by ex-
amining only a small portion of a trace tree, rather than compiling
the entire trace tree “from scratch”. Maple allows efﬁcient updates
because of information maintained in Go, which we call node an-
notations of the tree.
First consider augmenting a trace tree with a new trace. We mod-
ify AUGMENTTT to accumulate the identities of T nodes when the
trace follows the negative branch. After attaching the new trace, we
build rules starting with the priority stored at the attachment point.
Since building rules for the new trace may increase the priorities of
some of the T nodes accumulated above, we modify augmentation
to backtrack towards the root and rebuild any positive sub-branches
of those T nodes along this path whose priorities have increased.
Note that the method avoids recompiling branches at V nodes other
than the branch being augmented. It also avoids recompiling nega-
tive branches of positive T ancestors of the augmentation point.
94Algorithm 6: ROUTEAGGREGATION(ft)
1 Safe elimination of rules in ft that have action ToController;
2 for each destination d mentioned in ft do
3
act = action of lowest priority rule in ft overlapping
destination d ;
p = priority of highest priority rule that overlaps packets
to d and agrees with act and such that all lower priority
rules overlapping with packets to d agree with act ;
Delete rules at priority ≤ p matching on destination d
from ft;
emitRule(p, matchForDest(d), act);
4
5
6
Invalidation is also simple, because the node annotations pro-
vide sufﬁcient information to reconstruct the ﬂow rules generated
through a series of updates, even if a full compilation would assign
priorities differently. Hence the invalidation of a part of a tree sim-
ply involves obtaining the previously-generated rules for that part,
leaving all other parts of the tree intact.
4.5 Optimization for Distributed Flow Tables
Maple further optimizes ﬂow table usage through network-wide
optimizations, by considering network properties. Below we spec-
ify two such optimizations that Maple conducts automatically.
Elimination of ToController at network core: To motivate the
idea, consider converting the global trace tree in Figure 2 to switch
trace trees. Consider the trace tree for a switch s4, which is not
on the path from host 6 to 4. If a packet from 6 to 4 does arrive at
switch s4, a general, safe action should be ToController, to handle
the exception (e.g., due to host mobility). Now Maple uses network
topology to know that switch s4 is a core switch (i.e., it does not
have any connection to end hosts). Then Maple is assured that the
exception will never happen, and hence there is no need to generate
the ToController rule for switch s4. This is an example of the
general case that core switches do not see “decision misses”, which
are seen only by edge switches. Hence, Maple does not install
ToController rules on core switches and still achieves correctness.
Maple can conduct further analysis on network topologies and the
trace trees of neighboring switches to remove unnecessary rules
from a switch.
Route aggregation: The preceding step prepares Maple to con-
duct more effectively a second optimization which we call route
aggregation. Speciﬁcally, a common case is that routing is only
destination based (e.g., Ethernet, IP or IP preﬁx). Hence, when the