title:Pathlet routing
author:Brighten Godfrey and
Igor Ganichev and
Scott Shenker and
Ion Stoica
Pathlet Routing
P. Brighten Godfrey†, Igor Ganichev‡, Scott Shenker‡§, and Ion Stoica‡∗
§ICSI
†University of Illinois at Urbana-Champaign
‡UC Berkeley
PI:EMAIL, {igor,shenker,istoica}@cs.berkeley.edu
ABSTRACT
We present a new routing protocol, pathlet routing, in which
networks advertise fragments of paths, called pathlets, that
sources concatenate into end-to-end source routes.
Intu-
itively, the pathlet is a highly ﬂexible building block, captur-
ing policy constraints as well as enabling an exponentially
large number of path choices. In particular, we show that
pathlet routing can emulate the policies of BGP, source rout-
ing, and several recent multipath proposals.
This ﬂexibility lets us address two major challenges for
Internet routing: scalability and source-controlled routing.
When a router’s routing policy has only “local” constraints,
it can be represented using a small number of pathlets, lead-
ing to very small forwarding tables and many choices of
routes for senders. Crucially, pathlet routing does not im-
pose a global requirement on what style of policy is used, but
rather allows multiple styles to coexist. The protocol thus
supports complex routing policies while enabling and incen-
tivizing the adoption of policies that yield small forwarding
plane state and a high degree of path choice.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Packet-switching
networks; C.2.2 [Network Protocols]: Routing Protocols;
C.2.6 [Internetworking]: Routers
General Terms
Design, Experimentation, Performance, Reliability
1.
INTRODUCTION
Challenges for interdomain routing. Interdomain rout-
ing faces several fundamental challenges. One is scalabil-
ity: routers running the Internet’s interdomain routing pro-
tocol, Border Gateway Protocol (BGP) [25], require state
∗The ﬁrst and fourth authors were supported in part by a
Cisco Collaborative Research Initiative grant.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’09, August 17–21, 2009, Barcelona, Spain.
Copyright 2009 ACM 978-1-60558-594-9/09/08 ...$10.00.
that scales linearly in the number of IP preﬁxes advertised
in the Internet. This is particularly a concern in the data
plane where the router stores the routing table, or forward-
ing information base (FIB). Because it has to operate at
high speeds and often uses SRAM rather than commodity
DRAM, FIB memory is arguably more constrained and ex-
pensive than other resources in a router [22]. Moreover, the
number of IP preﬁxes is increasing at an increasing rate [15],
leading to the need for expensive hardware and upgrades.
The Internet Architecture Board Workshop on Routing and
Addressing recently identiﬁed FIB growth as one of the key
concerns for future scalability of the routing system [22].
A second challenge for interdomain routing is to provide
multipath routing, in which a packet’s source (an end host or
edge router) selects its path from among multiple options.
For network users, multipath routing is a solution to two
important deﬁciencies of BGP: poor reliability [1, 14, 17]
and suboptimal path quality, in terms of metrics such as la-
tency, throughput, or loss rate [1, 27]. Sources can observe
end-to-end failures and path quality and their eﬀect on the
particular application in use. If multiple paths are exposed,
the end-hosts could react to these observations by switching
paths much more quickly and in a more informed way than
BGP’s control plane, which takes minutes or tens of minutes
to converge [19, 21]. For network providers, multipath rout-
ing represents a new service that can be sold. In fact, route
control products exist today which dynamically select paths
based on availability, performance, and cost for multi-homed
edge networks [3]; exposing more ﬂexibility in route selection
could improve their eﬀectiveness. Greater choice in routes
may bring other beneﬁts as well, such as enabling competi-
tion and encouraging “tussles” between diﬀerent parties to
be resolved within the protocol [6].
But providing multiple paths while respecting network
owners’ policies is nontrivial. BGP provides no multipath
service; it selects a single path for each destination, which
it installs in its FIB and advertises to its neighbors. Several
multipath routing protocols have been proposed, but these
have tradeoﬀs such as not supporting all of BGP’s routing
policies [32, 30], exposing only a limited number of addi-
tional paths [28], making it diﬃcult to know which paths
will be used [31, 23], or increase the size of the FIB [28, 31,
23], which would exacerbate the scalability challenge.
Our contributions. This paper addresses the challenges
of scalability and multipath routing with a novel protocol
called pathlet routing.
In pathlet routing, each network
advertises pathlets—fragments of paths represented as se-
quences of virtual nodes (vnodes) along which the network
111is willing to route. A sender concatenates its selection of
pathlets into a full end-to-end source route.
From this architecture come three key ideas. First, path-
lets and vnodes are highly ﬂexible building blocks, able to
express many kinds of policies as well as enabling a dra-
matic amount of path choice in a clean protocol. Intuitively,
like path vector routing (i.e. BGP), pathlets can be used to
constrain how a packet transits an autonomous system (AS)
and where it goes after it leaves. But like source routing,
pathlets may be concatenated in exponentially many ways.
In fact, we show that pathlet routing’s data plane can em-
ulate the routing policies of BGP, loose and strict source
routing, and three recent multipath proposals: NIRA [30],
MIRO [28], and LISP [9]. We are not aware of any protocol
which can emulate pathlet routing’s policies, although there
are several that pathlet routing cannot emulate [32, 31, 23].
The second key idea is that an AS whose policies have only
“local” constraints can represent its policies using a small
number of pathlets, leading to small FIBs and many allowed
paths. We suggest a new class of policies of this type, lo-
cal transit (LT) policies, that allow networks to control the
portions of routes which transit across their own networks,
but otherwise expose the full ﬂexibility of the Internet’s AS-
level routes to sources. A special case of LT policies are
valley-free routes, the common export policy used in BGP.
We show that this kind of LT policy has a large amount of
path choice which signiﬁcantly improves reliability, and has
FIBs whose size scales with the number of neighbors of a
router, rather than with the number of destinations—thus
reducing the average number of FIB entries for the Internet
AS topology by more than 10, 000× compared with BGP.
The third key idea is that pathlet routing does not impose
a global requirement on what style of policy is used. It cleanly
allows multiple styles to coexist, for example with BGP-style
policies at some ASes, and LT-style policies at others. A
convenient consequence of our architecture is that regardless
of what the other ASes choose, the LT routers obtain the
entire beneﬁt of small FIBs, and part of the improved path
choice.
Intuitively, a router needs space in its forwarding
table only for the pathlets that it constructs.
We conﬁrm these results in experiments with an imple-
mentation of pathlet routing. Our implementation also shows
that while our protocol can have greater messaging and con-
trol plane memory overhead than path vector protocols like
BGP, the overhead is small in Internet-like topologies.
Thus, pathlet routing supports complex BGP-style poli-
cies while enabling the adoption of policies that yield small
forwarding plane state and a high degree of path choice.
Paper outline. We introduce the core of the protocol in
Sec. 2, and the scheme for disseminating pathlets in Sec. 3.
Sec. 4 discusses new uses of pathlet routing, including LT
and mixed policies. In Sec. 5 we show pathlet routing can
emulate the policies of several other protocols. Sec. 6 de-
scribes and evaluates our implementation of pathlet routing.
We discuss related work in Sec. 7 and conclude in Sec. 8.
2. THE PATHLET ROUTING PROTOCOL
This section begins with a simple example (§2.1). We
then describe the core pathlet routing protocol: its building
blocks of vnodes and pathlets (§2.2), how pathlets are built
(§2.3), how packets are forwarded (§2.4), and how the sender
picks its route from the pathlets it knows (§2.5).
Figure 1: A pathlet routing example.
Besides this core protocol, we must specify how path-
lets are disseminated throughout the network. This is a
largely separable component of the design, because (unlike
BGP) route policy is enforced by what pathlets are con-
structed, rather than by how they are announced. For now,
the reader may assume “telepathic” routers which know ev-
ery constructed pathlet. We will present out dissemination
protocol in Section 3.
2.1 Example
Before deﬁning the protocol in detail, we give a simple
example to illustrate the pathlet mechanism. Consider the
topology in Fig. 1 with routers A, B, C, D, E, each of which
has one vnode (a, b, c, d, e, respectively). Initially, the routers
learn the vnodes of their neighbors. They can then construct
one-hop pathlets to their neighbors, as A, C, and D have
done. A pathlet is given a forwarding identiﬁer (FID) which
identiﬁes it in the routing table of its ﬁrst vnode. For ex-
ample, entry 7 in the routing table of vnode c instructs the
router to forward the packet to D.
A sender determines its destination by ﬁnding a vnode
tagged with the appropriate IP preﬁx, such as e in the ex-
ample. It speciﬁes a route as a list of FIDs in the packet
header. A packet starting at c with route (7, 1) will have its
ﬁrst FID popped oﬀ and will be forwarded to d with route
(1) in the header, whereupon the next FID is popped oﬀ
and the packet is forwarded to e with the empty route (),
indicating that it has reached its destination.
After one-hop pathlets are constructed, multihop pathlets
can be built using them. Here, B builds a pathlet b →
c → d → e. It picks FID 2, and sets the forwarding table
instructions to push (7, 1) onto the front of the packet’s route
and then forward it to C. A packet beginning at a can now
reach e using route (3, 2), as shown at the bottom of Fig. 1.
Note that the routers in this example have used diﬀerent
styles of routing policy. A, C, and D have policies that are
“local”, i.e., they depend only on their neighbors. B has a
BGP-like policy which depends on the destination: it allows
transit from B to C only when the ultimate destination is
E. We will see these two styles again in Sec. 4.
In the rest of Sec. 2, we give a more detailed description
of the pathlet routing protocol.
2.2 Building blocks
Pathlet routing can be seen as source routing over a vir-
tual topology whose nodes are vnodes and whose edges are
pathlets. We describe these two building blocks next.
vnodepathlet(labeled with FID)Arouter3aaABCDE3271bcde3,227,11Route in packet header arriving at each hop:12.34.56.0 / 24112Vnodes. A vnode is a virtual node created by an AS to
represent the structure of routes within its own network.
Vnodes can be used in many ways (some of which we will
see later), but the simplest case is that each router has one
vnode.
An AS creates a vnode by setting up a routing table for
the vnode at one or more routers. Initially, each router is
conﬁgured with at least one vnode. When a router X opens
a control plane connection to a neighbor Y , it designates an
ingress vnode for Y : it sends Y a globally-unique vnode
identiﬁer v, indicating that every packet X receives from Y
will be directed to v. The ingress vnode can be diﬀerent
for each of X’s neighbors, thus allowing X to control routes
based on a packet’s previous hop. For example, in Sec. 4.1
we will construct vnodes representing ingress from neighbors
grouped into classes according to customer, provider, and
peer business relationships.
Routers learn most vnodes implicitly, when they are men-
tioned as part of a pathlet’s path. Additionally, a vnode can
be tagged with a destination IP preﬁx, as in e in Fig. 1. Tag
announcements are handled with the same dissemination al-
gorithm as pathlets (see Sec. 3).
Pathlets. A pathlet represents a sequence of vnodes v1 →
··· → vn along which the AS X that originated the an-
nouncement is willing to route. The ﬁrst vnode v1 is in X,
but the others may be in X or other ASes.
A pathlet is identiﬁed by a forwarding identiﬁer, or
FID, f . To routers other than the pathlet’s creator, f is
simply an opaque variable-length string of bits with the se-
mantics that if a packet arrives at v1 and the packet’s source
route begins with f , then it will be forwarded along the path
v1 → ··· → vn, arriving at vn with f popped oﬀ the front of
the source route. The sender of a packet will place a series
of FIDs in the packet to indicate the full route.
To the router or routers on which v1 is instantiated, f is
used as an index into the vnode’s forwarding table. Thus, f
must uniquely identify the pathlet among all pathlets begin-
ning at v1—but importantly, f need not be globally unique
like the identiﬁers in IP source routing, or even unique within
an AS. The result is very compact FIDs. For example, in
Fig. 1, it would actually have been possible to give all path-
lets the same FID since they originate at diﬀerent vnodes.