take four proof-of-concept root exploits (with source
code) that we can ﬁnd on github [38, 36, 34, 33], and em-
bed them in a testing Android app we build, that simply
roots a phone upon touching a button. We ﬁrst check the
effectiveness of current anti-virus programs against the
“malware” we built containing publicly available PoCs.
We scan the app using the virusTotal API [70] which con-
tains 57 anti-virus programs (e.g., Trend Micro) capable
of scanning Android apps . Table 2 shows the detection
rates for the case where we compiled the source code
with all the debug options on and without any obfus-
cation, while Table 3 shows the results when the com-
piled binaries are obfuscated using the O-LLVM obfus-
cator [47] and packed using UPX [67] (both are off-the-
shelf tools).
In brief, without obfuscation, all four exploits can be
detected by at least one antivirus. However, with sim-
ple obfuscation, only exynos (CVE-2012-6422) [30] and
towelroot (CVE-2014-3153) [31] can be successfully de-
tected and that too by only one antivirus. On the other
hand, RootExplorer, by preparing the right preconditions
and observing the exploit behaviors at runtime, can de-
tect every exploit regardless of the obfuscation and pack-
ing methods.
Detecting GODLESS: GODLESS [55] is a family
of malware that employs multiple root exploits, and has
caused havoc in the wild since mid-2016. RootExplorer
is extremely effective in detecting the exploits in the
GODLESS malware family.
Its source code is largely
based on the open source repository on github [32].
Speciﬁcally, GODLESS checks the device type against a
predeﬁned, populated database of supported exploitable
devices. Depending on which device it is running on,
it invokes a corresponding, appropriate exploit. The pro-
cess is iterative. It begins with exploit acdb and checks if
the device is in the database, and only if so, will continue
with the actual exploit. Upon failure, it moves on to next
exploit which is hdcp, and so on until it has tested the last
exploit viz., diag. We run GODLESS against 5 different
emulated devices to showcase that RootExplorer is effec-
tive in properly stimulating the right exploit for a device.
Table 4 shows the results (with the emulated devices).
The exploits with code name msm camera, put user
and fb mem can be caught using any emulated device;
this is because these exploits affect a large number of de-
vices and seemingly, the author of GODLESS does not
even know the complete list of devices they affect. In-
stead, GODLESS simply always tries to execute them
without checking the actual device type. Of course, if
a target device does not have the vulnerable device ﬁle
such as /dev/msm camera, the exploit will simply abort
and the next exploit is attempted. Since RootExplorer is
trained to prepare the preconditions for all the exploits at
all times including msm camera, it deploys the decoy ﬁle
/dev/msm camera on demand when GODLESS tries to
open it, and can therefore always trigger and detect its
complete malicious behavior with respect to this exploit.
Detecting Malware in the Antivirus malware
dataset and 3rd-party Android Markets: For each
app from the 1497 malware samples we received from
an anti-virus company and the 2000 apps downloaded
from four third-party Android markets, we apply Roo-
tExplorer for 10 minutes using Droidbot with an emu-
lated Samsung S3 device; the kernel version, build ID,
and the model of the device are set to 3.0.31-1083875,
JZO54K, and GT-I9300 respectively. Upon booting the
emulated device, Droidbot launches the main activity of
each app and generates random touch events and system
events such as BOOT COMPLETED every second. Mean-
while, our tool runs in the background and analyzes all
the system calls that the app uses. To measure the num-
ber of false positives and false negatives, we scan those
apps with VirusTotal. Among all the apps, RootExplorer
detected two true positives (and has no false positive).
the
root
[77]
exploit
pingpong
The ﬁrst
app is named Wiﬁ Analyzer
from
[6], which was discovered to
the MoboMarket
(md5
contain
ea1118c2c0e81c2d9f4bd0f6bd707538). At
the time
of writing, the app is still alive on the market. After
consulting with VirusTotal and an antivirus company, we
conﬁrmed that it is an instance of the rootnik malware
family [57]. We have reported to the market and are
waiting for the app to be removed.
is
app
Another
detected
from the Antivirus malware dataset,
the camera-isp root exploit.
of
app
containing
It has an md5
1365ECD2665D5035F3AB52A4E698052D.
Flashlight
a
1140    26th USENIX Security Symposium
USENIX Association
acdb
hdcp
msm camera
put user
fb mem
perf swevent
diag
HTC J Butterﬂy
Fujitsu Arrows Z Fujitsu Arrows X Galaxy Note LTE Samsung S3



































Table 4: Emulated devices and corresponding exploits caught by RootExplorer in GODLESS malware.
it
the app tries
the ﬁles
Upon starting,
to access
Root-
/system/xbin/su and /system/bin/su.
Explorer returns the appropriate errors to make the
app believe that
is running on an un-rooted de-
vice.
Interestingly, only when DroidBot delivers the
BOOT COMPLETED event to the app, the root exploit is
triggered. In the beginning, it opens and reads the ﬁle
/proc/kallsyms four times to retrieve the address of
certain kernel symbols. After that, it opens the vulner-
able /dev/camera-isp device ﬁle3.
It subsequently
invokes two different ioctl() system calls with request
types 0xC0086B03 and 0xC0186201 that effectively
compromise the driver. As expected, RootExplorer de-
ploys the decoy ﬁle /dev/camera-isp which returns a
real ﬁle descriptor for open(), and success for ioctl()
(to trick the exploit into believing that it has succeeded).
Finally, the exploit performs a setresuid(0,0,0) to
get root access. At that point, RootExplorer successfully
ﬁnds the root exploit and stops the execution of the app.
In addition to the above two malware samples, Virus-
Total also reports three additional malware samples that
carry root exploits. We analyzed these cases manually
and found that they in fact attempt to download the ex-
ploits from a speciﬁc URL which is no longer valid. In
other words, the exploits are never executed even though
the malware may have done it in the past.
ability [16]. To address this issue, a different behavior
graph thus needs to be learned.
Second, an attacker with knowledge of RootExplorer
can potentially counter our analysis environment. For
instance, without obtaining an actual copy of a device
driver (e.g., camera), it is impossible to answer all possi-
ble queries from an application. Malware can therefore
potentially tell if they are interacting with a real device
driver or not. However, we argue that it is also challeng-
ing for the malware authors to understand the complete
behaviors of a device driver.
Third, since we use syscall-based signatures to model
the exploits, RootExplorer is also vulnerable to special-
ized evasion techniques. For example, Ma et al. [54]
have demonstrated that by splitting the malicious behav-
iors into pieces that are executed in multiple processes, it
is possible to bypass signatures that target a single pro-
cess. Despite being more difﬁcult, such an attack strat-
egy may also be applicable to certain root exploits and
may thus bypass RootExplorer’s detection.
We plan to further improve RootExplorer’s detection
by addressing these problems in the future.
10 Conclusions
9 Limitations and Discussion
Although RootExplorer is effective in practice, in the-
ory it has some limitations that would allow attackers to
bypass its detection. One obvious limitation is analysis
environment evasion (e.g., ﬁngerprinting Android emu-
lator or real phones) which was already discussed in §2.
We consider this a general problem for any analysis en-
vironment and that this is orthogonal to our research.
There are other limitations speciﬁc to our work. First,
the signatures that we use are extracted from existing ex-
ploits instead of vulnerable code; therefore capable at-
tackers (e.g.,, state-sponsored attackers) may be able to
ﬁnd alternative attack paths to exploit the same vulner-
3Note that in this case, the exploit targets a different vulnerability
in the same device driver from the example in Section 5.
In this paper, we tackle the challenging problem of de-
tecting the presence of embedded root exploits in mal-
ware. We build a system RootExplorer, that learns from
commercial-grade root exploits used for benign reasons
and backed by large companies such as Baidu and Ten-
cent, and detects such embedded root exploits. Speciﬁ-
cally, it carefully analyzes these to determine what envi-
ronments root exploits expect, and what pre-conditions
are to be satisﬁed in order to trigger them. It uses this in-
formation to construct proper analysis environments for
malware and can effectively detect the presence of root
exploits. Our extensive evaluations shows that it can de-
tect all known malware samples carrying root exploits,
and has no false positives. We are also able to detect a
root exploit in a malware that seems to have bypassed
current vetting procedures, and is available on an An-
droid market.
USENIX Association
26th USENIX Security Symposium    1141
11 Acknowledgments
This research was partially sponsored by the Army Re-
search Laboratory and was accomplished under Coop-
erative Agreement Number W911NF-13-2-0045 (ARL
Cyber Security CRA). The views and conclusions con-
tained in this document are those of the authors and
should not be interpreted as representing the ofﬁcial poli-
cies, either expressed or implied, of the Army Research
Laboratory or the U.S. Government. The U.S. Govern-
ment is authorized to reproduce and distribute reprints
for Government purposes notwithstanding any copyright
notation here on. The work was also partially supported
by NSF Award 1617481.
References
[1] Android device inventory. https://www.androiddevice.info/.
[2] Android
security
bulletin — january
2017,
2018.
https://source.android.com/security/bulletin/2017-01-01.html.
[3] 3RD-PARTY ANDROID MARKET.
https://goo.gl/iMi4Bo.
[4] 3RD-PARTY ANDROID MARKET.
https://goo.gl/hAov2G.
[5] 3RD-PARTY ANDROID MARKET.
https://goo.gl/FB0ykP.
[6] 3RD-PARTY ANDROID MARKET.
https://goo.gl/tzpjY7.
7723 market, 2017.
Android life, 2017.
Eoemarket,
2017.
Mobomarket,
2017.
[7] AAFER, Y., ZHANG, X., AND DU, W. Harvesting inconsistent
security conﬁgurations in custom android roms via differential
analysis. In USENIX SECURITY (2016).
[8] AFONSO, V., BIANCHI, A., FRATANTONIO, Y., DOUP ´E, A.,
POLINO, M., DE GEUS, P., KRUEGEL, C., AND VIGNA, G.
Going native: Using a large-scale analysis of android apps to cre-
ate a practical native-code sandboxing policy. In Annual Network
and Distributed System Security Symposium (NDSS) (2016).
[9] ANDROGUARD. Androguard, a full python tool to play with an-
droid ﬁles, 2017. https://goo.gl/edcClw.
[10] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL,