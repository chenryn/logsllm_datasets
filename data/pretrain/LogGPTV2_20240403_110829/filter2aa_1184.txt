- 1 - 
Limitations of 
OAS-Based 
Blocking 
- 1 - 
Table of Contents 
Executive Summary 
2 
APIs - the attack is also the route to protection 
3 
Using OAS for Security 
3 
Limitations of OAS-Based Blocking 
4 
Summary 
8 
- 2 - 
Executive Summary 
The OpenAPI Specification (OAS) (fka Swagger) helps developers and security teams alike catalog, 
document, and describe REST APIs. However, OAS-based security tools alone address only a small 
fraction of the risk created with APIs and cannot help you prevent API breaches or data loss. When 
implemented in a more stringent mode, OAS-based security tools will block legitimate traffic, 
negatively impacting your customers, partners, and business operations, including revenue streams. 
The following summaries capture the risks of depending on OAS for securing your APIs as well as 
the ways in which the Salt Security solution provides comprehensive protection. 
OAS Cannot Protect Against the Most Common and Critical API Threats 
§ 
OAS lacks understanding of API logic, and organizations cannot create an OAS policy 
to prevent attacks targeting API logic such as the top threats defined in the OWASP 
API Security Top 10. 
§ 
Salt Security uses big data and patented AI to establish a granular understanding of 
the unique logic for each API and stops attacks with full coverage of the OWASP API 
Security Top 10.  
OAS Can Be Tricked and Bypassed 
§ 
OAS lacks context of overall attacker activity and therefore can block only a specific 
API call, not the attacker, allowing attackers to make endless attempts to bypass OAS 
schema validation. 
§ 
Salt Security correlates all attack activity from the same user, allowing security teams 
to pinpoint and block attackers early during their reconnaissance before attacks are 
successful. 
OAS Risks Blocking Legitimate Traffic or Missing Attacks 
§ 
OAS supports different validation techniques, each of which presents a challenge: 
■ Using Strict Validation blocks any abnormal API call, including a parameter 
value pattern mismatch, unknown parameters, or unknown endpoints, which 
can result in blocking legitimate traffic when APIs are improperly documented. 
■ Using Loose Validation with a generic and very broad contract, such as having 
no pattern definitions or using generic data types such as “string,” will allow 
many malicious API calls to pass through validation. 
§ 
Salt Security does not depend on OAS or any other documentation but instead uses 
big data and patented AI to analyze API traffic, establish a granular baseline of 
legitimate behavior, and differentiate between legitimate abnormal users and 
attackers who are performing reconnaissance. 
סדב 
 - 3 - 
OAS is Often Incomplete or Lacks Needed Details 
§ 
OAS often has missing or inaccurate information including Shadow APIs, Shadow 
Endpoints, Shadow Parameters, and Parameter Definition Discrepancies and 
therefore lacks the details needed for enforcement.  
§ 
Salt Security automatically discovers all public, private, or partner-facing APIs with 
granular details down to the parameter level. This approach not only verifies the 
accuracy of manual inventory efforts but also eliminates the risk of missing or 
inaccurate information while improving visibility of your complete API attack surface.
APIs - the Attack Is Also the Route to Protection  
Unlike with other security vectors such as OS vulnerabilities, attackers cannot find API vulnerabilities 
through research or in their lab. APIs are a black box – no one aside from the developer has the 
code. To look for opportunities to hack into data or accounts via an API, attackers must perform real-
time trial-and-error efforts, called reconnaissance, to find a route in. This process of reconnaissance 
can take days or weeks, because attackers don’t have the code and must probe to learn your API 
while trying to stay under the radar.  
The goal of the defender is to stop attackers early during reconnaissance, before they find a 
vulnerability, and to do so without blocking legitimate API calls. 
Using OAS for Security 
The OpenAPI Specification (OAS) (fka Swagger) is a useful way to describe REST APIs, and an OAS 
file can be valuable to both development and security teams. In the context of security, OAS can be 
used as a schema to define and validate API input. Expected input is defined in the OAS, and 
traditional security tools will use it to ensure the API input conforms. For example, a developer may 
define a given parameter as a string with a specific length limit and types of characters. Any input 
that falls outside that definition will be blocked.  
Depending solely on OAS for security will cover only a small percentage of the risk created with APIs 
and therefore will not prevent API breaches or data loss. Relying on OAS can also negatively impact 
your customers, partners, and business operations, including revenue streams, by blocking 
legitimate traffic. 
סדב 
 - 4 - 
Limitations of OAS-Based Blocking 
OAS-based blocking suffers from a number of limitations, including: 
OAS Cannot Protect Against the Most Common and Critical API Threats 
OAS-based schema blocking will not protect against the most common and most critical API threats 
as outlined in the OWASP API Security Top 10, which includes Broken Object Level Authorization 
(BOLA) (API1:2019) as the number one threat to APIs. Other threats include Broken User 
Authentication (API2:2019) and Lack of Resources & Rate Limiting (API4:2019).  
Preventing attacks targeting these types of vulnerabilities requires a deep understanding of API 
logic, such as who should have access, to which data, and the acceptable rate of access. OAS lacks 
this level of API logic understanding, so attacks targeting API logic will pass any API call schema 
validation. In addition, since OAS does not understand the logic of your APIs, you cannot create a 
policy to prevent these types of attacks.  
Also consider that many API attacks consist of a string of events. Identifying and blocking these types 
of attacks requires correlation across these events to gain the full context, another capability not 
possible with OAS. 
OAS Can Be Tricked and Bypassed 
OAS-based security approaches look to block a specific API call, not the attacker. As a result, 
attackers have an endless number of attempts, so they can continue to look for ways to bypass OAS 
schema-based validation by using various techniques such as encoding the malicious values, 
parameter pollution, and more. Read about the Paypal RCE parameter pollution example for more 
information on bypassing input validation.  
OAS approaches lack the context needed to stitch together overall attacker activity and build a 
profile to pinpoint and block the attacker. OAS-based blocking might slow down attackers during 
reconnaissance, but it will not stop them from eventually finding a vulnerability and exploiting it. 
OAS Risks blocking Legitimate Traffic or Missing Attacks 
Users have two options for validating API calls based on OAS: strict and loose. 
1. Strict Validation - “Strict validation” results in blocking any API call that does not exactly 
match the OAS. Such “misses” might include a mismatch in the parameter value pattern, 
using unknown parameters, reaching unknown endpoints, or other anomalies.  
Legitimate abnormal API calls are part of every API by design and can originate from old 
client versions (e.g., web or mobile apps), different devices, browsers, and user types (e.g., 
admin vs. user), edge cases of normal values (e.g., very long name), and, most importantly, 
any small change such as adding a new parameter to an API call.  
All of these cases might represent a small percentage of total API traffic, but when 
considering millions of monthly API calls, many abnormal but legitimate API calls will be 
blocked, resulting in impact to revenue and your business.  
Salt Security has found, in many cases, the most important customers and partners have 
customized capabilities in APIs, making them likely to generate abnormal API calls. These 
users and calls are often the most important not to block. 
סדב 
 - 5 - 
2. Loose Validation - Unfortunately not all of these legitimate but abnormal API calls can be 
realistically covered in pre-production testing. Rather than risk blocking legitimate traffic, 
many organizations instead opt to leverage “loose validation” in OAS. In this approach, teams 
define the API contract in generic and very broad terms. So for example, the OAS will contain 
no pattern definitions and will include generic data types such as “String.” Unfortunately, 
applying this validation fails to achieve the main goal of protecting APIs, because it allows 
many malicious API calls to pass, leaving your APIs vulnerable. 
OAS is Often Incomplete or Lacks Needed Details 
OAS-based blocking comes with risks based on availability, completeness, and accuracy. If the OAS 
contains missing or inaccurate information, the needed details are unknown and can’t be used for 
enforcement. Also consider that an OAS needs to be kept up to date with new versions and changes 
to APIs, something that is often missed or lags behind the development and release cycle. 
Salt Security has found gaps of up to 40% between what’s documented in OAS files and what is 
present in the product APIs. These gaps fall into the following three categories: 
1. Shadow API Endpoints – API endpoints that are missing from the OAS. In the following 
example, Salt Security research found an additional 54 endpoints that were not included in 
the Swager/OAS documentation, and 12 of those undocumented endpoints were exposing 
sensitive PII data. 
סדב 
 - 6 - 
2. Shadow Parameters – API endpoints known to exist but whose documentation is missing 
many parameters. As a result, the documentation does not cover the majority of the attack 
surface – in this research, documentation listed three parameters, but the Salt Security 
platform identified 102 parameters. 
3. Parameter Definition Discrepancies – in addition to many missing parameters, data types 
that lack needed details such as “String” instead of “UUID” or “DateTime” will make APIs 
vulnerable, since any input will be processed 
- 7 - 
Blocking Attacks Without Blocking Legitimate Traffic 
Focus on the Attacker - Preventing attackers from finding a vulnerability depends on analyzing all 
API activity and correlating and isolating attacker activity and identity. To launch attacks via APIs, 
attackers must perform reconnaissance, where they probe the API to learn its logic and uncover its 
vulnerabilities. Watching all API activity reveals user intent. Identifying the actions that do not 
conform to typical API traffic patterns, and correlating atypical activity back to a single attacker, 
enables solutions to detect and stop attackers early in their process, before they are successful.  
Consider the analogy of the credit score. To compute a credit score, systems assess an individual, 
identified by a social security number (SSN), across multiple financial activities and over a period of 
time – not by looking at just a single transaction. As a result, a lender can assess risk and make a 
decision about loaning money to an individual with complete context. If a system attempted to 
assess the risk of a specific transaction, without any knowledge of the individual’s transactional 
history, it would be unable to know whether it should approve or deny a transaction. The same 
concept applies to users and their API calls. 
Block the Source of the Attack - Salt Security leverages big data and patented artificial intelligence 
(AI) to create a baseline of normal activity for your APIs. Much like a credit score, our big data-based 
approach creates a profile for all individual users in real time to determine if they are legitimately 
abnormal – that is, have perpetrated an isolated abnormality – or are instead a malicious attacker 
performing reconnaissance. This full-context approach enables the identification of attackers with 
close to zero false positives and supports blocking with confidence before attackers find a 
vulnerability. 
Salt Security uses many identifiers that it correlates and uses to pinpoint and block attackers. 
Examples of identifiers include tokens, user IDs, decoded JWT parameters, device IDs, and other 
data. 
Is Input Validation Bad? 
Input validation and sanitization are good practices. However, they do not provide the full answer to 
API security.  
1. Input validation covers a fraction of the problem – input validation provides a basic step 
that eliminates only a small percentage of the overall API attack surface. 
2. It’s not all or nothing – validation that is too strict is theoretical and impractical. Customers 
that have tried this approach have dropped legitimate traffic, harming their business 
transactions. They must then switch to a detection mode and then find themselves flooded 
with false positive alerts for every API call that does not match their OAS schema. 
Effective Prevention with Salt Security 
Being a big data and AI solution, Salt Security uncovers the full context of activity for every user. This 
approach provides several crucial advantages: 
1. Block only malicious traffic and malicious attackers – Salt Security can differentiate 
between legitimate abnormal users and attackers who are performing reconnaissance. As a 
result, you can identify and stop attackers early in their process, before their attacks are 
successful. 
2. Block top API attacks that cannot be stopped by OAS schema-based validation – Salt 
Security provides full coverage of all API attacks, including protecting against the threats 
identified in the OWASP API Security Top 10. Attacks targeting these vulnerabilities cannot 
- 8 - 
Request a demo today!
info@salt.security
www.salt.security
Salt Security protects the APIs that are at the core of every modern application. The 
company's API Protection Platform is the industry’s first patented solution to prevent 
the next generation of API attacks, using behavioral protection. Deployed in minutes, 
the AI-powered solution automatically and continuously discovers and learns the 
3. be prevented unless a solution has a granular understanding of the uniqueness of every API 
to stop attackers based on behavior when a schema is just too basic.  
4. Leverage automated and error-free API discovery for more strict validation – Most OASs 
are far from being accurate and fail to cover all cases. Salt Security supports OAS ingestion 
and analysis as part of your CI/CD, and we will automatically update your OAS to increase 
accuracy based on our real-time and dynamic understanding of your environments. As a 
result, you can apply more strict validation for your sensitive API calls across various 
programming language frameworks without the need to deploy an OAS-based validation 
tool such as an in-line proxy. 
Summary 
OAS documentation is useful for both development and security teams, but OAS-based security 
tools have inherent shortcomings that limit protection to only a small percentage API risk and 
therefore will not prevent API breaches or data loss.  
Salt Security provides complete API security, using big data and AI to uncover the full context of 
activity for every user and pinpoint attackers. Salt Security leverages this context to protect APIs from 
all 10 OWASP API Security threats, most of which OAS-based tools miss. The Salt Security approach 
also eliminates the risk of blocking legitimate traffic and increases the accuracy of your OAS efforts. 
Visit https://salt.security/demo/ to see how the Salt Security API Protection Platform can improve 
your API security.