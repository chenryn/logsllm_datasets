θ = minW
w=1 minT
t=1
(cid:1)7
x=1
(cid:1)7
min(Aw,x,t , L)
x=1 Aw,x,t
Thus, θ is reported as the minimum resource access probability
received any week for any of the T slots per day. Furthermore,
we deﬁne a CoS constraint as the combination of a required
value for θ and a deadline s such that those demands that are
not satisﬁed are satisﬁed within the deadline. Let L(cid:1)
be the
required capacity for an attribute to support a CoS constraint.
is the smallest capacity value, L(cid:1) ≤ L,
A required capacity L(cid:1)
such that θ(cid:1) ≥ θ and those demands
to offer a probability θ(cid:1)
that are not satisﬁed upon request, Aw,x,t − L(cid:1) > 0, are
satisﬁed within the deadline. We express the deadline as an
integer number of slots s.
V. PARTITIONING APPLICATION DEMANDS ACROSS TWO
CLASSES OF SERVICE
We now describe our technique for mapping an application’s
workload demands across two CoS to realize its application
QoS objectives. Our method takes as input a characterization
of an application’s workload demands on the resource, the re-
source access QoS commitments for resources in the resource
pool, and the application-level QoS requirements (expressed
using a range for the burst factor that corresponds to U low and
U high). As output, it describes how the application’s workload
demands should be partitioned across the pool’s two classes
of service (i.e., workload manager allocation priorities).
The proposed method is motivated by portfolio theory [7]
which aims to construct a portfolio of investments, each having
its own level of risk,
to offer maximum expected returns
for a given level of risk tolerance for the portfolio as a
whole. The analogy is as follows. The resource access QoS
commitments quantify expected risks of resource sharing for
the two CoS. These CoS correspond to potential investments
with the lower CoS having a greater return because the
resource pool operator can provide a lower cost service when
permitted to increase overbooking. The application demands
represent investment amounts. They are partitioned across the
CoS so that application QoS remains in the tolerated range,
which corresponds to the risk tolerance for the portfolio as
a whole. By making greatest use of the lower CoS we offer
the resource pool operator the greatest opportunity to share
resources and hence lower the cost to the application owner.
We present the approach in three steps:
1) ﬁrst, we describe how to partition an application’s work-
load demands across two classes of service to support
acceptable performance [13];
2) second, we extend the partitioning method for the case
where M degr% of measurements can experience de-
graded performance;
3) ﬁnally, we describe how to partition an application’s
workload demands across two classes of service to
support time-limited performance degradation.
1). First, we describe how to partition an application’s
workload demands across two classes of service, CoS1 and
CoS2, to ensure that an application’s utilization of allocation
U alloc remains within the acceptable performance range:
U low ≤ U alloc ≤ U high
CoS1 offers guaranteed access to capacity. By associating part
of the demands with CoS1, we limit the resource access risk
to the demands associated with CoS2. The resource access
probability θ of CoS2 is chosen by the resource pool operator.
Consider three operating scenarios for a resource: (i) it has
sufﬁcient capacity to meet its current demands; (ii) demand
exceeds supply but the resource is satisfying its resource access
constraint; and (iii) demand exceeds supply and the resource
is not satisfying its resource access constraint. We consider
the ﬁrst two scenarios here and rely on workload placement
techniques to avoid and react to the third scenario [12].
When the system has sufﬁcient capacity, each application
workload gets access to all the capacity it needs. In this case,
the application’s resource needs will all be satisﬁed and the
application’s utilization of allocation will be ideal., i.e. less
than or equal to U low.
In the case where demands exceed supply, the allocations as-
sociated with CoS1 are all guaranteed to be satisﬁed. However,
the allocations associated with CoS2 are not guaranteed and
will be offered with at worst the operator-speciﬁed resource ac-
cess probability θ. We aim to divide workload demands across
these two classes of services while ensuring that the utilization
of allocation remains in the acceptable range (Ulow, Uhigh)
deﬁned above to satisfy the application’s QoS requirements.
Let p be a fraction of peak demand Dmax for the CPU
attribute for the application workload that is associated with
CoS1. The value p × Dmax gives a breakpoint for the
application workload such that all demand less than or equal
to this value is placed in CoS1 and the remaining demand is
placed in CoS2.
Aideal = Dmax × 1
The range of acceptable allocations must be between
U low and Aok = Dmax × 1
So the allocation for the lower but acceptable QoS offered
U high .
to the application is:
Aok = Aideal × p + Aideal × (1 − p) × θ.
Solving this equation for p, we get:
− θ
p =
U low
U high
1 − θ
where 1 ≥ θ > 0.
(1)
If U low
U high
≤ θ then p = 0, i.e., all the demand can be associ-
ated with class CoS2. This provides desirable performance for
utilization of allocation in the acceptable range (Ulow, Uhigh).
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:28:03 UTC from IEEE Xplore.  Restrictions apply. 
Thus, breakpoint p is computed using the three basic pa-
rameters: bounds for acceptable utilization of allocation Ulow,
Uhigh, and resource access probability θ for the second class
of service CoS2.
Then, applying breakpoint p to the workload peak demand
Dmax, we compute the maximum portion of demand that
should be assigned to CoS1:
Dmax
CoS1
= p × Dmax
Consider demand Dcur from the workload trace. We partition
Dcur across two classes of services: CoS1 and CoS2 as
follows:
• if Dcur ≤ Dmax
• if Dcur > Dmax
CoS1 then it is assigned entirely to CoS1;
CoS1 then demand Dcur is split across two
classes:
using CoS1,
– a fraction of demand equal to Dmax
– the remaining part (Dcur − Dmax
CoS1
the second class of service CoS2.
CoS1 is satisﬁed
) is satisﬁed using
2). Now, let us consider more complex application QoS re-
quirements that have a description of acceptable and degraded
performance:
• acceptable performance: for at least M % of measure-
ments, utilization of allocation U alloc should be within
the desirable range, i.e., U low ≤ U alloc ≤ U high;
• degraded application performance: for the remaining
measurements M degr = 100% − M% the utilization of
allocation should not exceed U degr.
Let DM% be a demand that corresponds to M -th percentile of
the workload demands. For many workloads, DM% is much
smaller than D100% for M% 
Dnew max, demand Dnew max is enforcing a limiting
=
cap on the maximum allocation, and Dmin degr
Dnew max − p × Dnew max.
CoS2
CoS2
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:28:03 UTC from IEEE Xplore.  Restrictions apply. 
Sensitivity of Breakpoint and Max Allocation  to  θ
Breakpoint  Trend
Max Allocation Trend
 1
 0.8
 0.6
 0.4
 0.2
d
n
a
m
e
D
U
P
C
d
e
z
i
l
a
m
r
o
N
 0
 0.5  0.55  0.6  0.65  0.7  0.75  0.8  0.85  0.9  0.95
 1
Resource Access Probability θ  for CoS2 
Fig. 3. Sensitivity of breakpoint p and maximum allocation to θ for
CoS2, where (Ulow, Uhigh) = (0.5, 0.66).
This way, the overall allocation Amin degr provided for de-
mand Dmin degr is computed in the following way:
× θ) × 1
Ulow
Amin degr = (Dmin degr
+ Dmin degr
CoS1
CoS2
(8)
We use Amin degr to recompute a value for Dnew max, such
that the utilization of a new allocation for Dmin degr, based
on this recomputed Dnew max, is less or equal to U high:
Uhigh =
Dmin degr
Amin degr
(9)
By replacing Amin degr in this equation with formula 8,
and by replacing Dmin degr
using formu-
las 6 and 7, we have:
and Dmin degr
CoS2
CoS1
Dmin degr × Ulow
Uhigh =
p × Dnew max + (Dnew max − p × Dnew max) × θ
By solving this equation relative to Dnew max, we ﬁnd:
Dnew max =
Dmin degr × Ulow
Uhigh × (p × (1 − θ) + θ)
(10)
This trace analysis continues iteratively until we ﬁnd a new
Dnew max that satisﬁes the additional time-limiting constraint
on degraded performance for the entire workload.
Note that if p > 0 then equation 10 has a very simple
outcome (once p us replaced using Formula 1):
Dnew max = Dmin degr.
If p = 0, i.e., all the demand is associated with class of
service CoS2, then equation 10 can be transformed as follows:
Dnew max =
Dmin degr × Ulow
Uhigh × θ
(11)
Suppose the values Ulow and Uhigh are ﬁxed. The outcome
of formula 10 strongly depends on resource access probability
θ for CoS2. Higher values of θ lead to a smaller Dnew max
because the higher values of θ imply a lower risk for class of
service CoS2. Since Dnew max limits and controls the maxi-