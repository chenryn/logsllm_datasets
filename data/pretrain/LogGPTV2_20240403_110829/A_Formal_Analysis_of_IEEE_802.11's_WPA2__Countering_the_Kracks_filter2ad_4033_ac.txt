of a group-key handshake. The following rule shows a simpli-
ﬁed encoding of such a transition for the authenticator, who
USENIX Association
29th USENIX Security Symposium    7
GTK_INITSETKEYSDONESETKEYSStart group-key handshake with each clientthat is not in WNM sleep modeAll clients handledGTK RekeyGTK RekeyGenerate new GTKInstall GTKInit GTK and associated dataIDLEREKEYNEGOTIATINGInstall GTK + NonceGTKSend M2 (confirmation)Receive M1 (GTK + NonceGTK)MIC and replay counter are validIDLEREKEYNEGOTIATINGKEYERRORSend GTK + NonceGTKPMK = preshared secretGenerate ANonceDeauthenticate ClientTimeoutREKEYESTABLISHEDNumber of timeouts > NReceive response with valid MICGUpdateStationKeys = trueGUpdateStationKeys = falsecan transition from the state ‘FT-PTK-INIT-DONE’ to the
state ’REKEYNEGOTIATING’ in our model:
(cid:2) AuthState(~authThreadID,’PTK_INIT_DONE’, . . . ) (cid:3)
(cid:3)→(cid:2) AuthState(~authThreadID,’REKEYNEGOTIATING’, . . . ) (cid:3)
—(cid:2)
According to the group-key state machine, the authentica-
tor would usually enter the state ‘REKEYNEGOTIATING’
from the state ‘IDLE’. Thus, the ‘FT-PTK-INIT-DONE’ state
basically takes on the role of the ‘IDLE’ state here. The con-
sequence of this is that in our model group-key handshakes
and four-way handshakes cannot be performed in parallel. We
believe that this is in line with the standard, which says that,
“an Authenticator shall do a 4-way handshake before a group
key handshake if both are required to be done.” ([1] p. 2040);
moreover, the replay counters used in handshake messages are
speciﬁed relative to the replay counter of the ﬁrst message of
the respective handshake ([1], e.g., on p. 2030), which serves
as another indication that group-key handshakes and four-way
handshakes should not be performed in parallel.
3.3 WNM Sleep Mode
The WNM sleep mode allows a supplicant to save energy
by going to sleep and thus excluding itself from group-key
handshakes. If a supplicant wants to enter WNM sleep mode,
it has to send a request to the authenticator. The authenticator
can then, in a second message, accept the request, after which
the supplicant ﬁnally goes to sleep. If the supplicant later
decides it’s time to wake up again, it ﬁrst sends a message
to the authenticator, asking for permission to wake up. If the
authenticator accepts the request, it forwards the current group
key and the corresponding nonce to the supplicant. This is
necessary because the supplicant didn’t participate in group-
key handshakes while asleep. Figure 6 depicts the message
exchange that happens when a supplicant goes to sleep and
wakes up again.
In our formal model, we have dedicated state machines for
the supplicant and the authenticator that allow them to per-
form this message exchange. In particular, we start these state
Figure 6: WNM Sleep Mode: Typical Message Exchange.
machines (both on the supplicant side and on the authentica-
tor side) as soon as the supplicant and the authenticator have
established a pairwise transient key (before, it wouldn’t make
sense since WNM-related messages have to be encrypted).
To make our model as general as possible, we also decided
to allow WNM-related communication to be performed in
parallel to the state machines for the four-way handshake and
the group-key handshake.
3.4 Encryption Layer / Message Queue
As already mentioned, messages of the ﬁrst four-way hand-
shake between an authenticator and a supplicant are not en-
crypted, but later handshakes—after the ﬁrst installation of
the pairwise transient key—are. Moreover, while the state-
machines in the standard suggest that messages are sent in-
stantly, in reality, they might be pushed into a queue and
possibly sent at a later point in time.
To deal with this, we modeled a message queue that al-
lows a sender to enqueue messages that can later be dequeued
and sent to the network. Intuitively, whenever a message is
dequeued, we take the currently installed pairwise transient
key and encrypt the message with this key. With this queue,
our model can cover cases in which a message is enqueued
at some timepoint t1 but sent—and thus encrypted with the
then installed key—at a later timepoint t2. This allows us to
prove the absence of attacks caused by the sleep-ﬂag mecha-
nism [30].
Our basic modeling construct underlying the message
queue is the so-called OutEnc fact. Usually, message trans-
mission in Tamarin is modeled with the Out fact. For example,
if we want the supplicant to send a simple message contain-
ing the string ’TEST’ over the network, we could deﬁne a
multiset-rewriting rule that produces an Out fact as follows:
(cid:2) SuppState(~suppThreadID, . . . ) (cid:3)
—(cid:2)
(cid:3)→(cid:2) SuppState(~suppThreadID, . . . ),
Out(’TEST’) (cid:3)
Here, the fact Out(’TEST’) models that the message ’TEST’
is sent to the network. With the OutEnc fact, we add an addi-
tional layer: If a sender wants to send a message, it produces
an OutEnc fact that gets as parameter the ID of the sender as
well as a fresh message ID. Moreover, it generates an action
fact Enqueue as follows:
(cid:2) SuppState(~suppThreadID, . . . ), Fr(~messageID) (cid:3)
—(cid:2) Enqueue(~suppThreadID,~messageID) (cid:3)→
(cid:2) SuppState(~suppThreadID, . . . ),
OutEnc(’TEST’,~suppThreadID,~messageID) (cid:3)
The generation of the OutEnc fact does not yet denote
that a message is actually sent to the network; instead, the
message is only put into the message queue. A second rule
8    29th USENIX Security Symposium
USENIX Association
AuthenticatorSupplicantSleep RequestUninstall GTKSleepWake-Up RequestSleep AcceptWake-Up Accept + GTK + NonceGTK Install GTK with NonceGTKWake    Upthen takes care of actually sending the message to the network.
In addition to the OutEnc fact, this rule also takes as input the
currently installed pairwise transient key to then encrypt the
message with this key and a nonce and send it to the network.
Note that in our model, every thread has its own independent
message queue. This is a liberal interpretation of the standard,
and implementations might choose a more restrictive single
queue per device. Our proofs hold for both cases, because any
attack on a more restrictive queue implementation would also
manifest itself in our more general model.
To model the encryption with nonces, we introduced the
ternary function symbol snenc and the binary function symbol
sndec (in contrast to the usual binary senc and sdec). We de-
ﬁned the semantics of these function symbols by the equation
sndec(snenc(message,key,nonce),key) = message.
The resulting rule for sending encrypted messages then
looks as follows (note that the let/in part is used in Tamarin
to deﬁne macros)
let nonce = (cid:104)N(n),~sID(cid:105)
newNonce = (cid:104)N(n + ’1’),~sID(cid:105)
in(cid:2) OutEnc(message,~sThreadID,~messageID)
SenderPTK(~ptkID,~sThreadID,~sID,PTK,nonce) (cid:3)
—(cid:2) SendMessage(~sThreadID,~messageID) (cid:3)→
(cid:2) Out(snenc(message,PTK,newNonce)),
SenderPTK(~ptkID,~sThreadID,~sID,PTK,newNonce) (cid:3)
Notice the following:
(1) The rule gets the current pairwise transient key
(SenderPTK) together with the current nonce. It then
increments the nonce and uses it for symmetric encryp-
tion with the PTK and an increased nonce (newNonce).
The result is sent to the network using a normal Out fact.
(2) The rule produces a SendMessage action fact. This fact is
used together with the earlier Enqueue fact (at the place
where an OutEnc fact is generated) to ensure that the
queue actually follows the ﬁrst-in-ﬁrst-out principle. We
achieve this by adding the following restriction to our
Tamarin model:
∀ senderThreadID msgID1 msgID2 t1 t2 t3 t4. (t1 < t2 ∧
EnqueueMessage(senderThreadID,msgID1)@t1 ∧
EnqueueMessage(senderThreadID,msgID2)@t2 ∧
SendMessage(senderThreadID,msgID1)@t3 ∧
SendMessage(senderThreadID,msgID2)@t4)
⇒ t3 < t4
Intuitively, this restriction says that if a sender puts message 1
into the message queue before message 2, then message 1 has
to be sent before message 2. Now the only thing that’s missing
is the case where a sender hasn’t yet installed a pairwise
transient key. This is handled by the following simple rule:
(cid:2) OutEnc(message,~senderThreadID,~msgID) (cid:3)
—(cid:2) SendMessage(~senderThreadID,~msgID) (cid:3)→
(cid:2) Out(message) (cid:3)
Note that this rule allows the supplicant and the authenticator
to send plain messages, even after the installation of a key,
which could potentially lead to security violations that do not
apply to the actual WPA2 protocol. However, as our analysis
shows, this is not the case.
The message queue and the corresponding encryption are
closely intertwined with the replay-counter mechanism, which
we explain in the following.
3.5 Replay Counters
The replay counter speciﬁcation in the standard can be confus-
ing at ﬁrst because there are different types of replay counters:
• The replay counters/nonces used by the authenticated
encryption scheme.
• The replay counters used as core message components
within handshake messages.
The replay counters used by the authenticated encryption
scheme are analogous to initialization vectors in counter-
mode encryption: They are initialized with a certain value
in the beginning and then incremented for every encrypted
message. Note that authenticated encryption is used both for
messages encrypted with the pairwise transient key and for
messages encrypted with the group temporal key.
In our model, we used the multiset feature of Tamarin to
encode how these replay counters are incremented. A counter
is seen as a multiset consisting of 1s and every increment of
the counter adds another 1, like in the following rule:
(cid:2) OutEnc(message,~senderThreadID,~msgID),
SenderPTK(~ptkID,PTK,nonce) (cid:3)
—(cid:2)
(cid:3)→(cid:2) Out(snenc(message,PTK,nonce + ’1’)),
SenderPTK(~ptkID,PTK,nonce + ’1’) (cid:3)
On the receiver side, we model the replay-counter check
with a restriction saying that whenever a message encrypted
with a particular key is received, it must have a greater replay
counter than any previously received message encrypted with
the same key:
∀ keyID receiverID key nonce1 nonce2 t1 t2. (t1 < t2 ∧
SeesNonce(keyID,receiverID,key,nonce1)@t1 ∧
SeesNonce(keyID,receiverID,key,nonce2)@t2)
⇒ ∃ x. nonce1 + x = nonce2”
USENIX Association
29th USENIX Security Symposium    9
Finally, we want to highlight that in our model, the nonces
of messages sent during the four-way handshake or the group-
way handshake are different from the nonces of WNM mes-
sages, which is in line with the IEEE 802.11 standard.
For the other type of replay counters, used in handshake
messages (independently of encryption), the replay-counter
mechanism works as follows: The authenticator appends a
replay counter to a message. The supplicant is supposed to
answer a particular message with the same replay counter
it received. On the side of the authenticator, the standard
speciﬁes two different kinds of checks, depending on the
message received:
• For message 2, the authenticator only accepts the replay
counter if it equals the replay counter it used when send-
ing message 1.
• For all other handshake messages, the authenticator ac-
cepts the replay counter if it is one of the replay counters
it used in the same handshake (four-way handshake or
group-key handshake).
Due to space reasons, we do not discuss here how exactly we
modeled these replay counters. For details, we refer to the
website corresponding to this paper [14].
3.6 Modeling Nonce Reuse
To model nonce reuse as explained in Section 2.2, we in-
troduced a dedicated multiset-rewriting rule that allows the
attacker to reveal an encryption key if it can obtain two dif-
ferent ciphertexts that were both encrypted with that key and
with the same nonce:
let encrypted_m1 = snenc(m1,key,nonce)
encrypted_m2 = snenc(m2,key,nonce)
in(cid:2) In((cid:104)encrypted_m1,encrypted_m2(cid:105)) (cid:3)
—(cid:2) Neq(m1,m2), NonceReuse(key,nonce) (cid:3)→
(cid:2) Out(key) (cid:3)
3.7 Summary of Underlying Assumptions
The following is a summary of the assumptions made in our
formal model:
(1) A single thread (of an authenticator or supplicant) cannot
perform a four-way handshake and a group-key hand-
shake in parallel.
(2) A single thread (of an authenticator or supplicant)
can only start sending WNM-related messages after it
has installed an initial pairwise-transient key (because
WNM-related messages are encrypted with the pairwise-
transient key).
(3) A single thread (of an authenticator or supplicant) can
perform WNM-related communication in parallel to four-
way handshakes and group-key handshakes.
(4) Every thread (of both authenticators and supplicants) has
its own message queue (i.e., message queues are not per-
device but per-thread).
(5) Messages that are put into a message queue are sent in
the same order they were enqueued.
(6) A supplicant thread only keeps track of the latest received
group key and not of multiple group keys (keeping track
of multiple group keys might be required to avoid group-
key reinstallations on the receiver side, which we didn’t
consider in our analysis; see Section 5.2 for details).
4 Analysis
After discussing the core components of our formal model,
we now present details of our formal analysis. We prove the
following properties for the case that countermeasures against
key-reinstallation attacks are in place:
• Secrecy of the pairwise master key
• Secrecy of the pairwise transient key
• Secrecy of group temporal keys
This rule models the worst case in which any reuse of a
nonce immediately allows the attacker to obtain the key and
thus decrypt all messages sent with the same key. Note that
the introduction of this rule is more general than just proving
that there is no nonce reuse for a particular key: Suppose that,
instead of adding this rule, we only proved that there is no
nonce reuse for a particular key, then we wouldn’t allow the
attacker to exploit the possible nonce reuse of other keys to
mount attacks on the protocol. By including this rule into our
model, we thus make sure that our security properties are not
violated by a strong attacker who can exploit nonce reuse in
all possible ways.
• Authentication for the four-way handshake
We prove the latter three properties from the perspectives
of both the supplicant and the authenticator. The reason for
considering different perspectives is that it helps us talk about
the knowledge of particular protocol participants. For instance,
key secrecy from the perspective of the supplicant means
something of the form, if the supplicant has installed a key
and if some other conditions hold, then the key is secret. This
means that if a supplicant knows that it installed the key and if
it knows that the other conditions hold, then it can be sure that
its key is secret. As the pairwise master key is not installed
10    29th USENIX Security Symposium
USENIX Association
over the course of the protocol (but shared before), we prove
its secrecy independent of any party’s perspective.
Note that due to the ability of the attacker to exploit the
reuse of nonces, we need to prove the absence of nonce reuse
for the relevant encryption keys in our protocol. Moreover,
due to the complexity of WPA2 and our corresponding model,
it is impossible to prove any of the main properties directly.
In fact, our whole analysis consists of around 70 lemmas
(including the main properties). We provide more details
about their types and intuition in Appendix A.
4.1 Secrecy of the Pairwise Master Key
Secrecy of the pairwise master key is one of the most funda-
mental properties within WPA2. The reason is that knowledge
of a pairwise master key would allow the attacker to learn
also the pairwise transient key and the group temporal keys
corresponding to this pairwise master key, which would allow
it to control all encrypted communication between supplicant
and authenticator as well as group trafﬁc to all supplicants
associated with the authenticator.
To see how the attacker can learn the other two keys once
it has a pairwise master key, consider the following: if the at-
tacker observes the initial (unencrypted) four-way handshake,
it can learn the corresponding SNonce and the ANonce. Thus,
if it also learns the pairwise master key, PMK, it can derive the