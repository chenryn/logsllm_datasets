过 sys.moudle 变量才可以使用的。它是一个字典，其中键（key）是模块名字，对应的值
一子系统的内部机理。
10
在Python2.3版本实现的新的带入钩子机制。
Hy是Python上的Lisp实现，会在9.1节介绍。
模块查找器对象必须有一个返回加载器对象的 find_module(fullname，path=None)
顾名思义，导入钩子机制是由PEP302（http://www.python.org/dev/peps/pep-0302/）定义
也可以通过自定义的导入器（importer）对导入机制进行扩展。Hy?正是利用的这种技
导入模块时，Python 会依赖一个路径列表。这个列表存储在 sys.path 变量中，并且告诉
Sys 模块包含许多关于 Python 导入系统的信息。首先，当前可导入的模块列表都是通
.导入系统是相当复杂的，不过你可能已经了解了一些基本知识。这里会介绍一些关于这
在 sys·path 中顺序很重要，因为需要遍历这个列表来寻找请求的模块。
True
>>> '/foo/bar' in sys.path
>>> import sys
$ PYTHONPATH=/foo/bar python
>>> sys.path.append('/foo/bar') 
>>>import sys
>>> sys.modules['os']
第2章模块和库
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 18
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例2.1Hy模块导入器
件的方法，见示例2.1。
方法。
为了进一步说明，下面给出了 Hy 利用自定义的导入器导入.hy 而不是.py 结尾的源文
class MetaLoader(object) :
Hy模块加载器
一旦路径被确定是有效的且指向了一个模块，就会返回一个 MetaLoader 对象。
sys.meta path.append (MetaImporter())
class MetaImporter(object) :
def init_(self, path):
 def find_on_path(self, fullname):
dirpath = "/".join(fullname.split("."))
self.path = path
 path = self.find _on_path(fullname)
for pth in sys.path:
if path:
for pth in sys.path: 
dirpath = "/".join(fuilname.split("."))
Auuu/]=s
pth = os.path.abspath(pth)
if os.path.exists(composed_path):
composed _path = "%s/%s/_init.hy" % (pth, dirpath)
return MetaLoader(path)
pth = os.path.abspath (pth)
for fp in fls:
return True
if os.path.exists(composed_path) :
composed_path = fp % ("%s/%s" % (pth, dirpath)) 
 return composed_path
本电子书仅限学习交流使用，请勿用于商业用途
2.1导入系统
二
---
## Page 19
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①它在Python 3.3中又被加了回来。
求。很多 Python 的初学者习惯于自己写代码实现一些基本的功能，然后会惊奇地发现很多
2.2
过在编译前删除字符串的前缀u来确保在2.x和3.x之间的兼容性。
子。Python 3.0到3.2并没有像 Python 2中用来表示 Unicode字符串的u前缀?，这个模块通
● import_file_to_module 读取一个 Hy 源文件，将其编译成Python 代码，并返回一个Python 模块对象。
12
Python 本身内置的巨大标准库提供了丰富的工具和功能，可以满足你能想到的任何需
标准库
第2章
def load_module(self, fullname):
return mod
sys.modules [fullname] = mod
else:
if ispkg:
mod._loader
mod.file
ispkg = self.is_package(fullname)
mod = import_file_to_module(fullname, self.path)
if not self.path:
if fullname in sys.modules:
sys.modules [fullname].= None
return False
模块和库
mod.package_
mod.path
return
return sys.modules[fullname]
本电子书仅限学习交流使用，请勿用于商业用途
= fullname
= self.path
=self
=门
= fullname.rpartition('.') [0]
=fullname
---
## Page 20
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
库模块。
大概浏览一遍标准库，这样下次再需要一个函数时就能知道是否可以利用标准库中已有的函数了。
功能已经内置了，直接就可以使用。
·os 提供对基本的操作系统函数的访问。
·operator提供实现基本的Python运算符功能的函数，可以使用这些函数而不是自己
·multiprocessing可以在应用程序中运行多个子进程，而且提供API让这些子进程看
·logging 提供对 Python 内置的日志功能的访问。
·1o提供用于处理 I/O 流的函数。在Python3中，它还包含 StringIO（在Python 2中有
·csv 提供用于读写 CSV文件的函数。
后续章节会讨论其中的一些模块，如 functools 和 itertools，下面是一些必须了解的标准
任何时候想要自己写函数处理一些简单的工作时，请停下来先看看标准库。我的建议是至少
·json 提供用来读写 JSON 格式数据的函数。
·glob 提供用于匹配Unix 风格路径模式的函数。
●fnmatch 提供用于匹配Unix风格文件名模式的函数。
●datetime 提供用于处理日期和时间的类。
·copy 提供复制数据的函数。
collections 提供一组有用的数据结构。
argparse 提供解析命令行参数的函数。
bisect 为可排序列表提供二分查找算法（参见10.3节）。
atexit 允许注册在程序退出时调用的函数。
写lambda表达式（参见8.3节）。
上去像线程一样。
同名的模块)，可以像处理文件一样处理字符串。
codecs 提供编解码数据的函数。
calendar提供一组与日期相关的函数。
本电子书仅限学习交流使用，请勿用于商业用途
2.2标准库
13
---
## Page 21
熊猫爱中国www.xiongmaoi.com
熊猫爱中
用它，从而可以保证在你想使用它时肯定不会遇到麻烦。而且，就算万一出了问题，也能确
这并不是说有些事情是根本无法用 Python 实现的，这只是表明有些事情可能需要使用外部库。
本。关键在于，即使拥有所有的扩展功能，仍然有许多功能是Python 标准库没有涵盖的。不过，
大多数人也不想去处理一个几个GB的文件下载，即使可能只是需要写一个重命名文件的快速脚
了Python，就拥有了完成任何功能所需的一切条件。
的人忘了买电池？Python的“内置电池”哲学让你作为程序员不会遇到这类问题，只要安装
2.3
提示
分就更好了。花在查找标准库上的时间越少，意味着写实际代码的时间就越多。
学一些有用的东西。
需打开代码自己一探究竟。尽管文档中已经包含了你想知道的一切，但总还是有机会让你
14
整个标准库都是用 Python 写的，所以可以直接查看它模块和函数的源代码。有疑问时只
Python 标准库是安全且范围明确的：模块文档化程度很高，并且有足够多的人在经常使
然而，Python 标准库的开发者并不能预测你要实现的“任何”功能到底是什么。即使可以，
你是否有过这样的经历，收到一件不错的生日礼物或圣诞礼物，但是打开后却发现送你
这个模块清单可以作为一个快速参考，帮助你了解各个库模块的作用。如果能记住一部
●uuid 可以生成全局唯一标识符（Universally Unique Identifiers，UUID）。
●urllib（以及Python 2.x中的 urllib2和urlparse）提供处理和解析URL的函数。
·threading提供对处理高级线程功能的访问。
●random提供生成伪随机数的函数。
第2章模块和库
tempfile提供用于创建临时文件和目录的函数。
外部库
signal提供用于处理POSIX 信号的函数。
shutil提供对高级文件处理函数的访问。
select提供对函数select()和pollO的访问，用于创建事件循环。
re提供正则表达式功能。
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 22
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
但是，在OpenStack 中我们使用下列检查表来根据需要给出建议（我建议你也这么做）。
法保证。程序员也是人，没什么办法可以确保目前维护良好的库在几个月后仍然维护良好。
切换到其他替代方案。截止到作者写作时，OpenStack正准备升级到Alembic
明 sqlalchemy-migrate要支持 Python 3。因此，显然 sqlalchemy-migrate 已经死了，我们需要
且没有好转的迹象。而且，OpenStack在当时是想要支持 Python3的，然而没有任何迹象表
来处理数据库模式的升级。一切运行良好，直到有一天它们不行了，开始出现大量bug，并
（https://pypi.python.org/pypi/alembic），虽然也有一些工作要做，但好在不是那么痛苦。
所以 OpenStack 还使用了 sqlalchemy-migrate（https://code.google.com/p/sqlalchemy-migrate/)
一个Python数据库开发工具包。如果了解 SQL 的话会知道，数据库的结构是会发生变化的，
库提供的功能，但是需要谨记使用这些外部库可能带来的风险。
缺少文档，功能有 bug，更新较少或根本不更新。任何正式的项目都可能用到一些只有外部
保在短时间内有人解决。但是，外部库就像是地图上标着“熊出没，请注意”的部分：可能
尽管可能工作量巨大，但这一检查表对于依赖同样适用。如果知道应用程序会大量依赖
·API兼容保证。没有比你的软件因为一个它依赖的库发生了变化而使整个API崩溃
●开发活跃。GitHub（http://github.com）和Ohloh（http://www.ohloh.net/）通常提供足
●Python3兼容。尽管现在你可能并不准备支持Python3，但很可能早晚会涉及，所以
下面是来自一线的案例。OpenStack 使用了 SQLAlchemy（http://www.sqlalchemy.org/)，,
）维护活跃。尽管一个库可能是“结束”状态（即功能完备，不会再加入新功能），但
更糟的了。你一定很想知道选择的库在过去是否发生过类似的事件。
与各个操作系统发行版打包在一起。如果一个库被打包在主流的Linux 发行版内，
够的信息来判断一个库是否有维护者仍然在工作。
经在终端用户的机器上安装了，显然分发你的软件会更容易。
如果打算公开发布你的软件，那么这项检查也是很有用的。因为如果软件的依赖已
说明有其他项目依赖它，所以，如果真有什么问题，至少你不是唯一一个抱怨的。
者对bug 的反应是否迅速。
应该有维护者仍然在工作，以确保没有 bug。可以通过查看项目的跟踪系统来看维护
确认选择的库是 Python3兼容的并且承诺保持兼容是明智的。
本电子书仅限学习交流使用，请勿用于商业用途
2.3外部库
15
---
## Page 23
熊猫爱中国www.xiongmaoi.com
熊猫爱中
某些部分设计成可以根据需要切换的模块。
_4.7.3节将会涉及如何使用入口点构建驱动系统（driver system），这个系统让你可以将项目的
因此，在决定使用某个框架前需要把这些都考虑在内。
框架有很多好处，如快速构建原型并开发，但也有一些明显的缺点，如锁定（lock-in）问题。
的代码搭好架子，只需要通过某种方式完善这个架子就行了，尽管这可能是把双刃剑。使用
不是反过来。而外部库更像是对代码的扩展，赋予你的代码更多额外的能力，而框架会为你
（http://twistedmatrix.com/）或者 Circuits（https://bitbucket.org/prologic/circuits/）等。
或者Plone（http://plone.org/）。如果你正在找事件驱动的框架，可以使用Twisted
(http://turbogears.org/)、Tornado (http://www.tornadoweb.org/)、Zope (http://www.zope.org/)
Django (https://www.djangoproject.com/)、Pylons (http://www.pylonsproject.org/)、TurboGears
2.4
题，因此很容易隔离。
核心代码。也许会有例外，但应该不会太多。大部分库都被设计成只专注解决一定范围的问
的库？只需要修改包装器就可以了。只要它仍然提供同样的功能，那么完全不需要修改任何
自己的程序无需知道用了什么外部库，只要知道API提供了哪些功能即可。想要换一个不同
更好的办法是写自己的API，用一个包装器对外部库进行封装，将其与自己的源代码隔离。
码耦合过于紧密。否则，如果出了问题，你就需要切换库，这很可能需要重写大量的代码。
东西，仅在需要的时候才拿出来？
能意外地损坏屋子里的东西，还是会把它放在工具架上或者车库里，远离那些贵重而易碎的
严重的损害。尽管不常发生，但问问你自己：如果你有一把锤子，你会拿着它满屋跑因而可
一个特定的库，那么至少应该对这个库的每一个依赖使用这个检查表。
16
框架和外部库的主要不同在于，应用程序是建立在框架之上的，代码对框架进行扩展而
对于外部库道理是一样的，不管它们多么有用，都需要注意避免让这些库和实际的源代
不管最终使用哪个库，都要像其他工具一样对待，因为即使是有用的工具也可能会造成
这里推荐的为Python 应用选择框架的方法很大程度上类似于前面介绍过的外部库的选
有许多不同的 Python 框架可用于开发不同的Python 应用。如果是Web 应用，可以使用
第2章模块和库
框架
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 24
熊猫爱中国www.xiongmaoi.com
有什么不同？
心开发人员。我曾经咨询过 Doug 关于标准库以及库的设计与应用等方面的问题。
Example（http://doughellmann.com/python-standard-library-by-example），同时他也是Python 的核
the Week（http://pymotw.com/），也出版过一本很有名的Pyhton书The Python Standard Library By
2.5
升级至其他框架是极其艰巨的任务，就算 Python 再强大，对于这类问题也没有什么好办法。
个功能的库。愿意处理哪种场景取决于个人的选择，但需慎重选择。当问题出现时从一个框架
个功能同时也是另一个需要去解决的问题，要么自己写，要么再千挑万选去找另一个能提供这
功能，而Flask 则没有。一个框架提供的功能越少，将来遇到问题的越少。然而，框架缺少的每
用另一个框架或者有人最终为Twisted 提供了Python3的升级支持。
于Twisted的程序在几年之后想要支持Python 3，那么你将非常不幸，除非全部重写代码选
写你的应用程序。举例说明，前面提及的 Twisted 框架还不能完全支持Python 3。如果你基
代码之后更换外部库是十分痛苦的，但更换框架比这还要难受一千倍，因为通常需要完全重
运行以及部署应用的工具，但这并不影响你采用的标准。前面已经提到过，在已经写了大量
择方法，适用于框架是通过一组Python库来进行分发的情况。有时它们还包含用于创建、
有些框架与其他框架相比更加轻量级。
当你从头开发一个Python应用时，如何迈出第一步呢？它和开发一个已有的应用程序
我曾经有幸和 Doug Hellmann一起工作过数月。他在 DreamHost 是一位非常资深的软件开
Doug Hellmann 访谈
本电子书仅限学习交流使用，请勿用于商业用途
一个简单的比较就是，Django 提供了内置的ORM
2.5Doug Hellmann 访谈
二