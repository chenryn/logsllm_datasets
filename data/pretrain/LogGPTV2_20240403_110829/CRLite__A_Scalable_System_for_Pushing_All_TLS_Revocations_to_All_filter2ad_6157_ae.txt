trusted root from the macOS key store. This process is incre-
mental, i.e., CRLite performs full cryptographic validation on
new certiﬁcates gathered during the last 24 hours, and clears
recently expired certiﬁcates from its database. As of January
2017, our database contains 30M valid certiﬁcates.
Obtaining All Revocations.
To collect revocations, CRLite
extracts CRL and OCSP responders from all valid certiﬁ-
cates. To obtain revocation information for all certiﬁcates as
efﬁciently as possible, we adopt the following approach: if
a certiﬁcate has a CRL URL, we extract it; otherwise, we
extract its OCSP responder and serial number. As of January
2017, 10K unique CRLs cover 18M of the valid certiﬁcates,
leaving 12M certiﬁcates for which CRLite must query an
OCSP responder.7 Note that 99% of the OCSP-only certiﬁcates
are issued by Let’s Encrypt [46].8
CRLite downloads all extracted CRLs and queries respective
OCSP responders for the revocation status of the OCSP-
only certiﬁcates. As of January 30, 2017, there are 12.7M
revoked certiﬁcates in our database. Finally, CRLite constructs
the set of non-revoked certiﬁcates by subtracting the revoked
certiﬁcates from the set of valid certiﬁcates.
Filter Cascade Construction.
The next step is to construct
a ﬁlter cascade. Recall from § III that this data structure stores
some set R in a way that any query from the set R ∪ S will
result in a deﬁnitive, accurate answer (i.e., without any false
positives or negatives). In CRLite’s scenario, R is the set of
revoked certiﬁcates and S the set of non-revoked certiﬁcates.
In practice, the sets of revoked and valid certiﬁcates change
over time: new certiﬁcates are added, while existing certiﬁcates
can expire or be revoked. CRLite produces a fresh ﬁlter
cascade each day that incorporates these changes. However,
we also observe that the certiﬁcate universe is expanding over
time, as HTTPS becomes more widely adopted. To account for
this, we provision the ﬁlter cascade to hold δr ·|R| and δs ·|S|
certiﬁcates, for some δr, δs > 1, but only perform insertions
for certiﬁcates in R and S. We choose δr, and δs based on
the estimated growth rate of R and S over some reasonable
time frame, so that the we only need to reparameterize the
ﬁlter periodically (monthly in our case). This simpliﬁes the
7Note that 163 valid certiﬁcates exist in our database that contain neither
a CRL nor an OCSP responder; these certiﬁcates are particularly dangerous,
as they can never be revoked.
8We obtained permission from the Let’s Encrypt operators to send such a
high volume of OCSP requests to their servers.
547
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
production of delta updates, which we describe next. As we
show in § VII-A, the size for the full ﬁlter is only 10 MB.
Delta Updates.
Although the size of our ﬁlter cascade is
quite reasonable (see § VII-A), it would still be onerous for
clients if they had to download fresh copies of the entire ﬁlter
each day (especially clients subject to data caps). Furthermore,
as we show in § VII-B, |R| and |S| only ﬂuctuate by a few
percent day-to-day under typical conditions (the exception
being events like Heartbleed), meaning that relatively few bits
in the ﬁlter are changing.
To address this issue and exploit the common-case dynamics
of the certiﬁcate ecosystem, CRLite produces delta updates
that allow clients to incrementally update their copy of the
ﬁlter. As shown in Figure 4, CRLite compares each day’s
ﬁlter to the previous day’s ﬁlter to produce the delta update;
conceptually, we can think of this as a bitwise XOR of the
Bloom ﬁlters at each level (in practice we use the efﬁcient
bsdiﬀ tool, which is essentially diﬀ optimized for binary data).
We demonstrate empirically in § VII-B that these deltas tend to
be sparse (a small percentage of certiﬁcates change on a daily
basis). Finally, the server signs the delta update and makes
it available to clients. Clients that are d days out-of-date can
simply download and apply the most recent d delta updates to
their ﬁlter (or the latest full ﬁlter, whichever is smaller). As we
show in § VII-B, the mean size for delta updates is 580 KB.
Audit Log.
The last ﬁle produced by CRLite is an audit log.
The audit log is designed to address the issue of trust, i.e., how
can clients be sure that the CRLite server is constructing ﬁlters
correctly? The audit log contains (1) copies of all CRLs and
OCSP responses that were used to construct the corresponding
ﬁlter cascade, and (2) copies of all certiﬁcates included in
the whitelist. Recall
that each CRL, OCSP response, and
certiﬁcate is signed by its CA, and the audit log as a whole is
signed by the CRLite server. Using this data, a third-party can
cryptographically verify the integrity of the inputs for a given
ﬁlter, build a local copy of the ﬁlter cascade, and then compare
it to the ﬁlter provided by the server. If the ﬁlters do not
match, then the CRLite server incorrectly omitted or inserted
a revocation into the ﬁlter. Furthermore, the third-party can
verify that all (serial number, URL) tuples in the whitelist are
not revoked in the corresponding CRLs/OCSP responses. In
§ VIII, we describe an alternate design that shows with modest
CA participation, we can remove the need for audits.
Hosting.
CRLite makes ﬁlters, delta updates, and audit
logs available to clients via a standard web server. In practice,
these ﬁles could easily be hosted on a cloud-storage service
like Amazon S3 or on a Content Delivery Network (CDN), as
is common with CRL and OCSP servers today. After several
weeks, the system automatically deletes stale ﬁles.
We emphasize that none of the server operations described
here require participation from CAs, websites, or CT servers.
As a result, anyone could run a CRLite aggregator today.
That said, we believe that those who operate CT servers are a
logical place for deployment; they already have (virtually) all
certiﬁcates [73] and they are already subject to audits.
D. Client-Side Operation
The client-side component of CRLite is responsible for
downloading the ﬁlter, updating it daily, and performing
revocation checks for observed certiﬁcates against the ﬁlter.
False Positives.
CRLite uses ﬁlter cascades which do
not suffer from false positives yet remain compact. This
addresses one of the primary concerns that drove the design of
CRLSet [40] and the reluctance to incorporate Bloom ﬁlters
in Chrome [39], [42].
However,
there are two corner cases that require more
attention. First, certiﬁcates created and deployed between
updates to the ﬁlter cascade may result in a false positive
(if they are valid) or a false negative (if they are created and
revoked in this small window). This can be easily remedied
with the timestamps already present in X.509 certiﬁcates: the
NotBefore date in a certiﬁcate denotes the day and time at
which clients should consider the certiﬁcate valid. So long
as CAs set this correctly, then a client could know not to
apply ﬁlter cascade, and to instead fall back on traditional
methods (or request a delta update). Although falling back to
CRL/OCSP may seem to obviate the beneﬁts of CRLite, we
note that only 0.005% of certiﬁcates in our dataset are created
in any given 24-hour window.
Second, enterprise clients are sometimes conﬁgured with
private root certiﬁcates that are used to issue internal certiﬁ-
cates. CRLite’s client-side component only checks a leaf cer-
tiﬁcate in the ﬁlter cascade if the certiﬁcate’s chain terminates
in a root used by CRLite. This behavior is appropriate, as
when constructing the ﬁlter cascade, CRLite would not have
considered an internal certiﬁcate to be in U (since it would be
invalid from CRLite’s perspective).
E. Summary
At this point, CRLite fulﬁlls three of the goals in § IV-A:
• CRLite requires no active participation from CAs or
websites, and no modiﬁcation to certiﬁcates.
• CRLite operates as a browser plugin, thereby requiring
only minor, incremental modiﬁcations to clients.
• In CRLite, almost all revocation checks are local, which
preserves users’ privacy.
With regard to the ﬁnal two goals: in § V, we show how
CRLite is resilient to attacks that are the root causes for poor
revocation checking today [49]. Similarly, in § VII, we evalu-
ate CRLite and show that it offers dramatically lower latency
revocation checks than online mechanisms, while consuming
bandwidth that is comparable to today’s best schemes.
V. SECURITY ANALYSIS
We analyze CRLite’s security against various attacks.
MitM.
CRLite signs and timestamps all ﬁles that are
made available to clients, which prevents MitM attackers from
serving falsiﬁed or stale ﬁlters or delta updates to clients.
We assume that CRLite’s public key is securely distributed to
clients through out-of-band mechanisms, such as via browser
extension repositories and app stores.
548
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
Forcing Fail-open.
Consider an alternative form of MitM
attack wherein a user joins an adversarial network, such as
at a coffee shop with a shared access point. An attacker can
perform ARP spooﬁng or DNS injection to force a client’s
traditional revocation checks (e.g., OCSP) to fail to connect.
In this setting, today’s browsers will fail-open, i.e., they will
assume that certiﬁcates are not revoked. In fact, it is because
of this perceived necessity to fail-open that has led to very low
rates of revocation checking in modern browsers [41], [49].
The primary beneﬁt of CRLite from the client’s perspective
is that it can obtain and cache the day’s revocations while in a
safe network, such as at home or work. Later, in an adversarial
network, an attacker’s attempts to block access to OCSP and
CRL servers has no effect, since the revocation information is
already resident on the user’s machine. In other words, with
CRLite, clients can adopt a fail-closed security posture.
The sole exception to this scenario occurs if there is a
certiﬁcate that is issued, compromised, and revoked within
24-hours after the daily ﬁlter is produced. In this case, CRLite
clients will fall-back to traditional online revocation checks,
because the certiﬁcate is newborn. However, the preconditions
for mounting this attack (identifying a newborn cert, compro-
mising it, and mounting a MiTM attack within 24-hours) make
it challenging to execute.
DoS.
In practice, CRLite ﬁlters should be hosted on DoS-
resilient infrastructure, like a CDN. This makes it extremely
difﬁcult for an attacker to prevent clients from updating their
ﬁlters by DoS-ing the hosting provider.
However, assume that a powerful attacker could block
access to the ﬁlter hosting provider by DoSing it. In this case,
all clients’ ﬁlters will slowly become stale. OCSP and CRL
servers (and HTTPS websites themselves) are also susceptible
to such attacks; CRLite is at no greater risk. In fact, CRLite
offers stronger security than traditional revocation mechanisms
because of clients’ ability to cache all historical revocations.
As a result, clients would only miss the delta updates during
the time of the attack; because CRLite clients update roughly
once per day, the DoS attack would have to be prolonged to
have profound impact (by comparison, the recent massive at-
tacks on the root DNS servers lasted less than two hours [53]).
Backdated Certiﬁcate.
It is possible for a CA to issue
a certiﬁcate c on day d but not release it publicly until day
d(cid:4), where d(cid:4) (cid:13) d. If a CRLite client observes c on day d(cid:4), it
will erroneously believe that c should be present in the ﬁlter,
since its Not Before date is in the past. However, since c was
unknown to the aggregator at the time of ﬁlter construction, c
could generate a false positive against the ﬁlter. Additionally,
if c were revoked prior to d(cid:4), it would generate a false negative.
In essence,
the
universe of certiﬁcates U known to the aggregator is complete.
In practice, this eventuality is unlikely to happen to today,
and will be impossible in the future, thanks to CT. As we
mention in § II-A, Chrome will require all new certiﬁcates
to contain SCT records [66] signed by a well-known CT log
as of October 2017. Crucially, to obtain an SCT for a new
this scenario violates our assumption that
certiﬁcate, the issuing CA must submit it to a CT log and then
wait 24 hours for the log to incorporate the new certiﬁcate [45].
In effect, the requirement that certiﬁcates be present in CT
logs for 24 hours before browsers will validate them precludes
the backdated certiﬁcate scenario outlined above. VanderSloot
et al. have shown that 90.5% of all known valid certiﬁcates
are already present in CT logs [73], and Chrome’s validation
requirements ensure that this will reach 100% soon.
Rogue Aggregator.
In theory, a buggy or malicious
CRLite aggregator could produce ﬁlters that omit revocations
or falsely claim that valid certiﬁcates are revoked. To prevent
this, CRLite produces signed audit logs that allow distrusting
third-parties to recreate the ﬁlters from scratch, and compare
them to the ﬁlters produced by the server. Auditing allows an
investigator to detect the following types of rogue behaviors:
• Omit a CRL or OCSP response. All known, valid
certiﬁcates must be covered by a CRL or OCSP response
in the audit log.
• Modify a certiﬁcate, CRL, or OCSP response. All three
objects are signed by their respective CAs, which can be
independently validated by clients.
• Equivocate. Filters and their associated audit logs are
timestamped and signed by the aggregator. If two clients
receive ﬁlters with the same timestamp that are different,
then one of the ﬁlters must be incorrect (which one can
be determined using the audit log).
The only portion of the audit
log that requires external
information to verify is the list of valid certiﬁcates. In theory, a
rogue aggregator could pretend that a target revoked certiﬁcate
does not exist and not include its revocation information in the
log.9 This would lead CRLite clients to believe that the target
certiﬁcate is not revoked. Fortunately, CRLite uses public
information to construct the list of valid certiﬁcates, meaning
that auditors can also collect this data and independently verify
the set of valid certiﬁcates present in an audit log. We expect
the process of verifying the list of valid certiﬁcates to become
easier over time as more CAs adopt Certiﬁcate Transparency.
In practice, we envision that most CRLite clients will not
audit ﬁlters since it is an expensive process (the auditor must
download the audit log, obtain the universe of valid certiﬁcates,
and then perform computations that take 10 minutes or more
on a 32-core server). Instead, the goal of the audit log is
to allow researchers, CAs, and companies (e.g., Google and
Mozilla) to act as a check against misbehaving or malicious
CRLite servers. CRLite’s audit log is a signiﬁcant improve-
ment over existing schemes like CRLSet and OneCRL that are
not auditable.
VI. IMPLEMENTATION
We have developed a prototype implementation of CRLite
that produces new ﬁlters, delta updates, and audit logs once
per day on a 12-node Apache Spark cluster. Raw certiﬁcate
9Note that this omission attack is only possible if the target certiﬁcate is
OCSP-only or uses a unique CRL. If other certiﬁcates reference the target’s
CRL, then it will be included in the log.
549
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:56 UTC from IEEE Xplore.  Restrictions apply. 
Full Daily Filters
Daily Delta Updates
10 MB
e
z
S
i
1 MB
100 KB
Measured Deltas
Fit (MB): 118.28x + 0.32
10 MB
e
z
S
i
1 MB
100 KB
11/17/16
12/01/16
12/15/16
12/29/16
01/12/17
01/26/17
0.0001
0.001
0.01