y
t
i
s
n
e
d
y
t
i
l
i
b
a
b
o
r
p
3
0
.
2
0
.
1
0
.
0
0
.
0
5
10
15
20
25
0
5
distance
10
distance
15
20
25
/ 5
/ 10
/ 15
/ 20
length
/ 25
/ 30
Fig. 19: Preﬁx distances (class A).
Fig. 20: Preﬁx distances (class B).
Fig. 21: Preﬁx length (A-CIDR).
than 3% of the preﬁxes are larger than 24 and more than
54% of the preﬁxes have length 24. Preﬁxes from class
B are mostly /16s or /24s with some preﬁx length in be-
tween. Class B is the only address block where another
preﬁx length, in this case /16, is more prevalent than /24.
For class C we observe mostly /24s with some number of
/19s and /20s and a smaller number of preﬁxes between 20
and 24. Class A and A-CIDR (e.g., see Figure 21) preﬁxes
have relatively speaking the smallest number of /24s and the
largest number of /19s, /20s and /21s−23s. For example the
peak at /19 reﬂects a common ﬁlter policy, some ISPs ﬁlter
preﬁxes with more speciﬁc preﬁx mask than /19. This forces
others to allocate at least a /19 address range to be visible
in the whole Internet.
The characteristics of the preﬁx length and the depth of
a preﬁx signiﬁcantly inﬂuences the distribution of the dis-
tances between preﬁxes. Figure 18 shows the density of
the distributions of the distances for the various ad-
dress blocks. As expected the distance 8 dominates the
distribution with more than 20% of the total. While overall
distances of less than 8 are very frequent, 1, 2, 3 with roughly
5% and 4, 5, 6, 7 with roughly 8% each, are the most promi-
nent distances for class A (class A-CIDR) preﬁxes are 16 (12
and 14) reﬂecting the diﬀerent policies.
With regards to the fanout we have observed (not shown)
that A-CIDR has the largest fanout followed by class C and
A. Class B preﬁxes in general have smaller fanout than other
preﬁxes. Overall the tails of the fanout distributions are
consistent with heavy-tailed distributions such as the Pareto
distribution. This indicates that the density distribution
might be biased by a few providers using a large fanout.
Naturally, each of the forest metrics does not just depend
on the address block of the preﬁx, but also on the depth of
the preﬁx in the tree. For example, Figures 19 and 20, show
the density of the distance of the class A and class
B preﬁxes for each preﬁx depth. While the distribu-
tions for the preﬁxes at depth 3 are similar, the distribution
of distances for depth 1 and 2 are quite distinct. For both
classes depth 1 is dominated by /16 or rather /8, which
brings us to /24 preﬁxes, the most speciﬁc preﬁxes that are
allowed by most ISPs. The diﬀerences are most likely re-
sults of folks with class A preﬁxes taking more advantage of
the available address space and using intermediary aggrega-
tion levels. This is reﬂected by Figure 17 which shows that
preﬁxes in class A are more likely to be at higher depth.
At the beginning the results for class B and depth 2 seem
counterintuitive. But the peek at distance 11 is the result
of classless routing even within the class B address block.
Otherwise the distribution at depth 2 reﬂects the ﬂexibility
of sub-netting within class A/B networks.
While the dependencies between the metrics, especially
on the depth of a preﬁx can be signiﬁcant, e.g., for the
fanout, each metric behaves diﬀerently. For example Fig-
ure 21 shows the density of the preﬁx length for class
A-CIDR for each depth. Here we observe the artifacts
of the class A network at depth 0. But the preﬁx length
distributions at other depths are very similar to each other.
Actually, it is remarkable how little diﬀerence there is for
depth 1 − 4 given the diﬀerences in the preﬁx distance dis-
tributions.
4.4 AS path
Instead of trying to understand the AS-graph level In-
ternet topology, we need to characterize the AS path with
respect to the ingredients for our BGP workload model. Ac-
cordingly we consider the AS-graph from the view point of
the peer, a BGP DAG, and capture the position of each AS
by the distribution of the distances of ASes from the peer.
In addition we need to consider the number of originated
and transiting preﬁxes7. Furthermore we explore some of
the basic characteristics of the AS path, e.g., the length of
the AS path, the number of unique ASes on the AS path, the
positions of replicated AS on the AS path, and the number
of replicated AS entries. This results in a characterization
of the AS path according to the metrics shown in Table 3.
Since session resets are a prevalent reason for routing up-
dates we need to understand how many preﬁxes are transit-
ing or are originated by an AS. Figure 22 plots8 the den-
sity of the logarithm of the number of preﬁxes orig-
inated/transiting an AS for the data sets RRC:2 and
LISP:2. It is not surprising that the distributions from dif-
ferent peers are almost equal, because default-free routing
tables contain most of the preﬁxes of the Internet. A much
larger number of ASes are providing connectivity to only a
very small number of preﬁxes. Well connected peers, closer
to the center of the topology, provide connectivity for a lot
of other preﬁxes and ASes. This is reﬂected in the tails of
the distributions which are consistent with heavy-tailed dis-
tributions (not shown). Still, for a workload ingredient, the
shape of the body of the distribution is at least as important
as the tail of the distribution. Note that the distribution of
the transiting ASes reﬂects the coalescing of AS paths at
intermediary routers.
As argued above we do not care about the exact sequence
7A preﬁx is transiting an AS if an entry/update for this
preﬁx uses this AS on its AS path.
8The dip in the originating curve is due to discretization
eﬀects.
40y
t
i
s
n
e
d
y
t
i
l
i
b
a
b
o
r
p
6
0
.
5
0
.
4
0
.
.
3
0
.
2
0
1
0
.
0
0
.
RRC:2 transiting
RRC:2 originating
LISP:2 transiting
LISP:2 originating
y
t
i
s
n
e
d
y
t
i
l
i
b
a
b
o
r
p
5
.
0
4
.
0
3
.
0
2
.
0
1
.
0
0
.
0
AS path
unique AS path
Replications AS path
Position replications
RRC:2−B
RRC:2−C
RRC:2−D
RRC:2−A
0
0
0
0
5
,
0
0
0
0
3
,
t
n
u
o
c
0
0
0
0
1
,
0
1
10
100
1,000 10,000 100,000
number of prefixes
2
4
number of ASes
6
8
10
Fig. 22: Distribution of preﬁxes per
AS.
Fig. 23: Distance of AS from
peering point.
0
5
10
15
20
number of ASes
Fig. 24: Length of AS path.
of ASes on the AS path, only about locating an AS at ap-
proximately the right distance from the peer.
(Note the
distance inﬂuences the routing update latencies via interme-
diary ASes, the richness of the connectivity, etc.) Therefore
we, for every AS, calculate the mean distance of this AS
to the BGP peer in numbers of unique AS hops on the AS
path of the preﬁx9. While this distance does not have to be
non-ambiguous, we observed, that it is non-ambiguous for
85% of the ASes. The standard deviation of the ones that
are ambiguous is usually less than 0.5 and the standard de-
viation relative to all ASes is less than 0.01, a rather small
value. Figure 23 plots the relative frequency of the dis-
tances for all ASes for four of the data sets RRC:2. For
some peers the curves appear to be shifted by one or two.
For others the distributions are more bell-shaped. This in-
dicates that connectivity characteristics depend very much
on the location of the peering point in the Internet hierar-
chy. This is due to the diﬀerent distances to the “core of the
Internet”, e.g., tier-1 providers. If a tier-1 provider is reach-
able within a short distance then most of the ASes will be
reachable within a slightly larger distance due to the huge
connectivity of tier-1s [57, 38].
In terms of general characteristics we ﬁnd that while most
paths are short (93.5% are less than 6 AS hops) some are
sizeable (0.75% are greater than 10 AS hops). Figures 24
shows the histogram of the number of ASes on the
AS path. Eliminating replicated ASes from the AS path
reduces the average AS path length from 3.5 to 3.2 aﬀecting
10.5% of the AS paths. The median length of the replicas
is 3. There are many short replications of 2 or 3 replicas
but also some rather long ones with 8, 10, or 11 replications.
The position of the replications on the AS path is rather
early (not shown). Almost all duplications appear between
position 2 and 5, indicating that this instrument is mainly
used in the center of the Internet. On the other hand most
replications appear closer to the originator of the preﬁx in-
dicating that the instrument is applied close to the edge of
the network.
To understand the correlation between the location of a
preﬁx in the preﬁx forest and its AS path we consider the
similarities between the AS paths of parent and sons. We
ﬁnd that 26.5% of all nested preﬁxes have the same AS
paths as their fathers. Furthermore 20.6% of the AS paths
of nested preﬁxes just contain additional ASes. For example
this happens if the AS number of a multihomed AS is added
to the AS path. But 52.9% of all nested preﬁxes have a
9Note, that replicated ASes are eliminated from the AS
path, before this metric is calculated.
diﬀerent AS path than their parent preﬁx (e.g., multihomed
ASes with other upstream ISPs than the one responsible for
their address space or an AS that has switched from one
provider to another while keeping its address space). De-
pending on the routing table data structure such common
parts can be used to optimize memory usage. This in turn
explains some of the dependencies between router memory
requirements and preﬁx forest characteristics.
4.5 Summary
Our results conﬁrm that it is possible to characterize the
proposed ingredients of a workload model via empirical prob-
ability distributions according to the metrics outlined in Ta-
bles 1, 2 and 3. We ﬁnd that some of these cannot be easily
captured by simple, one or two parameter, distributions.
Therefore, at least for the moment, we propose to either
rely on experimentally derived probability distributions or
manually edited probability distributions to instantiate the
workload. In addition, we have identiﬁed some important
dependencies between the ingredients, e.g., the fanout distri-
bution is dependent on the depth in the preﬁx tree. In such
a case we propose to use combined probability distributions
for both.
5. RTG: ROUTING TABLE GENERATOR
Having identiﬁed and characterized key ingredients of BGP
traﬃc we can, in this Section, turn to a proposal for generat-
ing realistic BGP traﬃc and its prototype implementation,
RTG. The main idea is the possibility of generating rout-
ing updates oﬀ-line, storing them in a ﬁle, and then feeding
them to the system, e.g., a router under test, using a simple
program that is capable of maintaining BGP sessions and
sending BGP updates (see Figure 25). Accordingly the tool
consists of two independent pieces: (a) a routing table gen-
erator (RTG) which generates routing tables and updates and
(b) sbgp from the Merit toolkit MRTd [58] for feeding the
updates to the system under test. Each entry generated by
RTG is characterized by a timestamp, the originating peer,
the preﬁx and its attributes. The timestamp speciﬁes when
the update is supposed to be issued by sbgp.
RTG itself consists of three parts. The ﬁrst part is re-
sponsible for building a routing table and is parameterized
in terms of size of routing table and characteristics (pre-
ﬁx length distribution, depth and fanout via conﬁguration
ﬁles). The second part of RTG associates each preﬁx of the
routing table with a set of attributes. (This process is again
driven by conﬁguration ﬁles.) The output of the ﬁrst two
parts is used to instantiate the initial routing table. The
41DUT
MRTd
Peer A
MRTd
Peer B
Output File
Peer A
R TG
Output File
Peer B
Fig. 25: Example: RTG scenario.
third part of RTG is responsible for generating the actual
routing updates and is again driven by conﬁguration ﬁles.
RTG preﬁx structure: The table generation piece is emu-
lating the address allocation strategy in the Internet. The
instantiation of the routing table proceeds top down, from
the root of each tree in the forest to the leaves. The gen-
eration process starts by picking how many trees should be
generated. The process of generating a tree starts by picking
a preﬁx length l, followed by a network preﬁx of this length
P/l. The requirement for the preﬁx is that it does not con-
ﬂict with any previously chosen preﬁxes. This means that
P/l is a more speciﬁc preﬁx only within the current subtree.
The subtrees of P/l are generated recursively. The diﬀer-
ence is that the new preﬁx lengths have to be larger than
l and that the address range is limited by P/l. The preﬁx
length and the fanout are chosen according to various empir-
ical probability distributions for each level. At the ﬁrst level
the preﬁx is selected according to the distribution of routes
within the former classful address ranges and uniformly at
random for all other levels.
RTG attributes: Once a preﬁx has been chosen RTG selects
attributes for it. The degree of choice depends on the at-
tribute. For some there is none since it only depends on
the physical test-bed setup, others are selected according
to empirical distributions, e.g., community, while another
attribute, the AS path, requires more care. The AS path
attribute is essential for building the updates, since it ap-
proximates the underlying topology. We ﬁrst generate an
AS path pattern which speciﬁes the length of the path, the
number of duplicated ASes on the path, and the location
of these duplications. This is constructed out of the proba-
bility distributions for the AS path length for the peer, the
number of duplications and the position of duplicates. In a
next step this AS path pattern is ﬁlled with ASes based on
a probability distribution (transiting and originating ASes
are constructed separately).
If the preﬁx is nested within
another the attribute values are either copied, modiﬁed, or
newly constructed, based on a probability distribution spec-
iﬁed in the conﬁguration ﬁle.
RTG updates: The various kinds of routing updates are gen-
erated in two steps. First an event log speciﬁes which events
are created by the instability creators. Possible events for an
AS instability creator are BGP session resets for some (ran-
dom) AS, BGP session resets at some (random) AS path
distance. Possible events for an preﬁx instability creator are
update bursts for some (random) preﬁx, or single changes
for some (random) preﬁx. Note that this ﬁle can be auto-
matically generated based on the distribution of interarrival
times of session resets and update bursts. Based upon the
event log we construct a detailed list of updates. Each ses-
sion reset implies that some fraction (chosen according to a