# Geometry Types and Functions (gS, b, 2D, N, tN)

Copyright © 2007 Open Geospatial Consortium, Inc. All Rights Reserved.

## Annex B: Comparison of Simple Feature Access/SQL and SQL/MM – Spatial

### Overview
This annex provides a comparison between Simple Feature Access/SQL (SFA-SQL) and SQL/MM – Spatial. The following table summarizes the differences in geometry types and operations.

### Table B.1: Comparison of SFA-SQL and SQL/MM: Spatial

| **Geometry Type** | **SFA-SQL** | **SQL/MM-Spatial** |
|-------------------|-------------|--------------------|
| Point             | `ST_Point`   | `ST_Point`          |
| Curve             | `ST_Curve`   | -                  |
| Linestring        | `ST_Linestring` | `ST_Linestring`    |
| Circularstring    | `ST_Circularstring` | -                |
| CompoundCurve     | `ST_CompoundCurve` | -                |
| Surface           | `ST_Surface` | `ST_Surface`        |
| CurvePolygon      | `ST_CurvePolygon` | -                |
| Polygon           | `ST_Polygon` | `ST_Polygon`        |
| PolyhedralSurface | `ST_PolyhedralSurface` | -              |
| GeomCollection    | `ST_Collection` | -                  |
| Multipoint        | `ST_Multipoint` | `ST_Multipoint`    |
| Multicurve        | `ST_MultiCurve` | -                  |
| Multilinestring   | `ST_Multilinestring` | -              |
| Multisurface      | `ST_Multisurface` | -                |
| Multipolygon      | `ST_Multipolygon` | `ST_Multipolygon` |

**Note:** The type `ST_PolyhedralSurface` is not currently included in SQL/MM but is proposed for inclusion based on this document.

### Storage Types
- **Binary Type**
- **Text Type**
- **Object Type**

### Operations
| **Operation** | **SFA-SQL** | **SQL/MM-Spatial** |
|---------------|-------------|--------------------|
| Equals        | `ST_Equals`  | -                  |
| Disjoint      | `ST_Disjoint` | -                  |
| Touches       | `ST_Touches` | -                  |
| Within        | `ST_Within`  | -                  |
| Overlaps     | `ST_Overlaps` | -                  |
| Crosses       | `ST_Crosses` | -                  |
| Intersects    | `ST_Intersects` | -                |
| Contains      | `ST_Contains` | -                  |
| Relate        | `ST_Relate`  | -                  |

### Functions
| **Function** | **SFA-SQL** | **Description** |
|--------------|-------------|-----------------|
| Point        | `ST_Point()` | Returns the Point |
| X            | `ST_X()`    | Returns the X-coordinate of the point |
| Y            | `ST_Y()`    | Returns the Y-coordinate of the point |
| Z            | `ST_Z()`    | Returns the Z-coordinate of the point |
| M            | `ST_M()`    | Returns the M-coordinate of the point |
| ExplicitPoint| `ST_ExplicitPoint()` | -             |

### Curve Functions
| **Function** | **SFA-SQL** | **Description** |
|--------------|-------------|-----------------|
| Length       | `ST_Length()` | Returns the length of the curve |
| StartPoint   | `ST_StartPoint()` | Returns the first Point of the curve |
| EndPoint     | `ST_EndPoint()` | Returns the last Point of the curve |
| IsClosed     | `ST_IsClosed()` | Checks whether the curve is closed |
| IsRing       | `ST_IsRing()` | Checks whether the curve is closed and simple |
| CurveToLine  | `ST_CurveToLine()` | Transforms the curve to a LineString |
| LineString   | `ST_LineString()` | Returns the LineString |
| Points       | `ST_Points()` | Returns a collection of points |
| NumPoints    | `ST_NumPoints()` | Returns the number of points |
| PointN       | `ST_PointN()` | Returns a Point containing the nth point of the LineString |

## Annex C: Conformance Tests from Version 1.1

### C.1 Purpose of this Annex
This conformance test is for an earlier 2D version of the standard and has been replaced by an Abstract Test Suite that will define a more complete set of conformance tests for the various options in the current version.

To conform to this standard for feature collections, an implementation must satisfy the requirements of one of the following three conformance classes:
1. **SQL Implementation of Feature Tables Based on Predefined Data Types:**
   - Using numeric SQL types for geometry storage and SQL/CLI access.
   - Using binary SQL types for geometry storage and SQL/CLI access.
2. **SQL with Geometry Types Implementation of Feature Tables:**
   - Supporting both textual and binary SQL/CLI access to geometry.

### C.2 Test Data
#### C.2.1 Test Data Semantics
The test data is a synthetic dataset developed to exercise the functionality of the standard. It represents a map of a fictional location called Blue Lake. The following features are included:
- A rectangle of the Earth in UTM coordinates.
- Blue Lake with an island named Goose Island.
- A watercourse (Cam Stream) flowing from north to south.
- An area place named Ashton.
- A State Forest including the lake and part of Ashton.
- Route 5, which is two or four lanes wide.
- Route 75, a major divided highway.
- Cam Bridge, a point feature where the road crosses Cam Stream.
- Main Street, which shares some pavement with Route 5.
- Two buildings along Main Street.
- A one-lane road forming part of the State Forest boundary.
- Two fish ponds, seen as a multi-polygon.

#### C.2.2 Test Data Points and Coordinates
Figure C.2 depicts the points used to represent the map, and Table C.1 lists the coordinates associated with each point.

### C.3 Conformance Tests
#### C.3.1 Normalized Geometry Schema
##### C.3.1.1 Conformance Test Overview
The scope of this test is to determine that the test data, once inserted, is accessible via the schema defined in the standard. The following queries are used to verify this:

| **ID** | **Functionality Tested** | **Query Description** | **Answer** |
|--------|--------------------------|-----------------------|------------|
| N1     | GEOMETRY_COLUMNS table/view is created/updated | Check if all feature tables are properly represented | lakes, road_segments, divided_routes, buildings, forests, bridges, named_places, streams, ponds, map_neatlines |
| N2     | GEOMETRY_COLUMNS table/view is created/updated | Check if all geometry tables are properly represented | lake_geom, road_segment_geom, divided_route_geom, forest_geom, bridge_geom, stream_geom, building_pt_geom, building_area_geom, pond_geom, named_place_geom, map_neatline_geom |
| N3     | GEOMETRY_COLUMNS table/view is created/updated | Check if the correct storage type for the streams table is represented | 0 |
| N4     | GEOMETRY_COLUMNS table/view is created/updated | Check if the correct geometry type for the streams table is represented | 3 (corresponds to 'LINESTRING') |
| N5     | GEOMETRY_COLUMNS table/view is created/updated | Check if the correct coordinate dimension for the streams table is represented | 2 |
| N6     | GEOMETRY_COLUMNS table/view is created/updated | Check if the correct value of max_ppr for the streams table is represented | 3 |
| N7     | GEOMETRY_COLUMNS table/view is created/updated | Check if the correct value of srid for the streams table is represented | 101 |
| N8     | SPATIAL_REF_SYS table/view is created/updated | Check if the correct value of srtext is represented | 'PROJCS["UTM_ZONE_14N", GEOGCS["World Geodetic System 72", DATUM["WGS_72", ELLIPSOID["NWL_10D", 6378135, 298.26]], PRIMEM["Greenwich", 0], UNIT["Meter", 1.0]], PROJECTION["Transverse_Mercator"], PARAMETER["False_Easting", 500000.0], PARAMETER["False_Northing", 0.0], PARAMETER["Central_Meridian", -99.0], PARAMETER["Scale_Factor", 0.9996], PARAMETER["Latitude_of_origin", 0.0], UNIT["Meter", 1.0]]' |

##### C.3.1.2 Normalized Geometry Schema Construction
```sql
-- CREATE SPATIAL_REF_SYS METADATA TABLE
CREATE TABLE spatial_ref_sys (
    srid INTEGER NOT NULL PRIMARY KEY,
    auth_name CHARACTER VARYING,
    auth_srid INTEGER,
    srtext CHARACTER VARYING(2048)
);

-- CREATE GEOMETRY_COLUMNS METADATA TABLE
CREATE TABLE geometry_columns (
    f_catalog_name CHARACTER VARYING,
    f_table_schema CHARACTER VARYING,
    f_table_name CHARACTER VARYING,
    f_geometry_column CHARACTER VARYING,
    g_catalog_name CHARACTER VARYING,
    g_table_schema CHARACTER VARYING,
    g_table_name CHARACTER VARYING,
    storage_type INTEGER,
    geometry_type INTEGER,
    coord_dimension INTEGER,
    max_ppr INTEGER,
    srid INTEGER REFERENCES spatial_ref_sys,
    CONSTRAINT gc_pk PRIMARY KEY (f_catalog_name, f_table_schema, f_table_name, f_geometry_column)
);

-- Create geometry tables
-- Lake Geometry
CREATE TABLE lake_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    x4 INTEGER,
    y4 INTEGER,
    x5 INTEGER,
    y5 INTEGER,
    CONSTRAINT l_gid_pk PRIMARY KEY (gid, eseq, seq)
);

-- Road Segment Geometry
CREATE TABLE road_segment_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    CONSTRAINT rs_gid_pk PRIMARY KEY (gid, eseq, seq)
);

-- Divided Route Geometry
CREATE TABLE divided_route_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    CONSTRAINT dr_gid_pk PRIMARY KEY (gid, eseq, seq)
);

-- Forest Geometry
CREATE TABLE forest_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    x3 INTEGER,
    y3 INTEGER,
    x4 INTEGER,
    y4 INTEGER,
    x5 INTEGER,
    y5 INTEGER,
    CONSTRAINT f_gid_pk PRIMARY KEY (gid, eseq, seq)
);

-- Bridge Geometry
CREATE TABLE bridge_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    CONSTRAINT b_gid_pk PRIMARY KEY (gid, eseq, seq)
);

-- Stream Geometry
CREATE TABLE stream_geom (
    gid INTEGER NOT NULL,
    eseq INTEGER NOT NULL,
    etype INTEGER NOT NULL,
    seq INTEGER NOT NULL,
    x1 INTEGER,
    y1 INTEGER,
    x2 INTEGER,
    y2 INTEGER,
    CONSTRAINT s_gid_pk PRIMARY KEY (gid, eseq, seq)
);
```

---

This optimized version aims to provide a clear, coherent, and professional presentation of the original text.