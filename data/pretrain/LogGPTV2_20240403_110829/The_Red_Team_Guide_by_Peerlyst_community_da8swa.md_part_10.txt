![](media/image96.jpeg)The 5 stages of a
[malware](https://www.peerlyst.com/tags/malware) attack; courtesy of
[\@tesrex](https://twitter.com/tesrex)
Once an attacker has made it through the previous stages of a Red Team
operation or that is otherwise called a 'malware attack,' the final step
of [exfiltration](https://www.peerlyst.com/tags/exfiltration) and
corruption is relatively easy. Whether attempting to exfiltrate
sensitive data from a [standard](https://www.peerlyst.com/tags/standard)
computer client, server, or some type of 'sensitive' asset, there are
multiple methods of accomplishing this feat. Attackers can use Windows
Secure Copy, a [freeware](https://www.peerlyst.com/tags/freeware) tool
to perform sensitive [data
exfiltration](https://www.peerlyst.com/tags/data-exfiltration) by
transferring files to and from a compromised system.
![](media/image97.jpeg)Using Windows Secure Copy to exfil data; courtesy
of [WinSCP](https://winscp.net/eng/docs/scripting)
> Data can be exfiltrated and anonymously leaked via different channels
> such as *[Pastebin](https://pastebin.com/),
> [Peerlyst](https://www.peerlyst.com/secure-drop?trk=site_footer)
> [Secure Drop](https://www.peerlyst.com/secure-drop?trk=site_footer),
> [Github](https://github.com/freedomofpress/securedrop), [Google
> Drive](https://www.google.com/drive/),
> [Dropbox](https://www.dropbox.com/),* or email to name a few methods.
> If none of these options are available, then it may be necessary to
> use a side-channel attack method such as
[digital](https://www.peerlyst.com/tags/digital)
[steganography](https://www.peerlyst.com/tags/steganography) to
exfiltrate the data without detection. For instance, an attacker could
use Martin Fiedler's *[tcsteg.py](http://keyj.emphy.de/files/tcsteg.py)*
to hide a [TrueCrypt](https://www.peerlyst.com/tags/truecrypt)
[encrypted](https://www.peerlyst.com/tags/encrypted) container that is
[embedded](https://www.peerlyst.com/tags/embedded) within a larger file
type such as a .mp4 movie file to exfiltrate a large amount of data.
*[OpenStego](https://www.openstego.com/)* is another potential option
for uploading hidden data in the form of a
[video](https://www.peerlyst.com/tags/video) file to an
[Internet](https://www.peerlyst.com/tags/internet) [Service
Provider](https://www.peerlyst.com/tags/service-provider) (ISP) such as
YouTube. There are many different methods for [exfiltrating
data](https://www.peerlyst.com/tags/exfiltrating-data), some methods
will naturally be less noisy than others and the attacker will need to
select the method based on the particular circumstances of the target
environment.
![](media/image98.jpeg)Using [OpenStego](https://www.openstego.com/) to
exfil data
Depending on how sophisticated the physical and [network
security](https://www.peerlyst.com/tags/network-security) of a target
organization facility is, physical exfiltration of data may be possible.
Exfiltration of data using an external USB drive, CD/DVDs, or perhaps
shoving an [HDD](https://www.peerlyst.com/tags/hdd) or laptop in a
backpack or briefcase and walking out of the facility might actually
work assuming the HDD doesn't have [Full
Disk](https://www.peerlyst.com/tags/full-disk-encryption-1)
[Encryption](https://www.peerlyst.com/tags/full-disk-encryption-1) (FDE)
and there aren't detectors or security guards checking bags. It may also
be possible to [exploit](https://www.peerlyst.com/tags/exploit)
[air-gapped](https://www.peerlyst.com/tags/air-gapped) computer systems
via electromagnetic [frequency](https://www.peerlyst.com/tags/frequency)
spectrum
[vulnerabilities](https://www.peerlyst.com/tags/vulnerabilities) that
emanate from [WiFi](https://www.peerlyst.com/tags/wifi), electrical
power lines, computer [tower](https://www.peerlyst.com/tags/tower) fan
[noise](https://www.peerlyst.com/tags/noise),
[monitor](https://www.peerlyst.com/tags/monitor) display refresh rate,
[PC speakers/microphones, LED, or
Bluetooth](https://www.pentestpartners.com/security-blog/data-exfiltration-techniques/)
signal. It is beyond the scope of this chapter to get too far down into
the weeds on how these types of
[attacks](https://www.peerlyst.com/tags/attacks) work and it may also
seem like a long-shot that requires special equipment and advanced
skills/knowledge, but
the Israelis have truly made an art form out of these types of
covert-channel attacks.
## Long-Term Persistence via 'Living-off-the-Land'
Let's face it, just as many
[hackers](https://www.peerlyst.com/tags/hackers) prefer to use Linux and
the command line because it is so much faster than point-and-click GUIs,
most of the computers in the world run some version of the Windows OS
which is why Windows is the most heavily attacked OS in history. There
are
far greater numbers of exploits for Windows than other OS because it is
the predominant OS and attackers have concentrated their efforts
accordingly for maximum effect.
![](media/image99.jpeg)Like digital steganography, it is very difficult
to detect [malicious
activity](https://www.peerlyst.com/tags/malicious-activity) that is
disguised as normal [network
traffic](https://www.peerlyst.com/tags/network-traffic) or normal OS
functions and tool activity. 'Living off the land' refers to a tactic
that attackers have migrated to as result of
[sandboxing](https://www.peerlyst.com/tags/sandboxing) technologies
discovering [fileless](https://www.peerlyst.com/tags/fileless-malware)
[malware](https://www.peerlyst.com/tags/fileless-malware), and instead
attackers are using the organic tools that are already built-into the OS
such as [PowerShell to propagate malware-like
functions](https://www.smokescreen.io/wp-content/uploads/2016/08/Top-20-Lateral-Movement-Tactics.pdf).
Example of PowerShell used in conjunction w/ BITSAdmin tool to
[download](https://www.peerlyst.com/tags/download) files; courtesy of
[Matt's DFIR
blog](https://mgreen27.github.io/posts/2018/02/18/Sharing_my_BITS.html)
Formally introduced by
[Microsoft](https://www.peerlyst.com/tags/microsoft) in 2006,
*PowerShell* was initially a command line interpreter (CLI) application
known as *Monad*, or *Microsoft Shell- MSH*, derived from a long history
of tools like *MS-DOS, netsh, and WMIC that* was designed to allow the
[automation](https://www.peerlyst.com/tags/automation) of a full
complement of core administrative tasks. All modern versions of Windows
come with PowerShell installed and unless it's been locked down and
continuously monitored, it can be a nightmare for the IT department to
defend against. *PowerShell* is a very powerful tool and can be used to
slurp up plaintext passwords, hashes, [PIN
codes](https://www.peerlyst.com/tags/pin-codes), and Kerberos tickets
that are temporarily stored in the system's volatile
[memory](https://www.peerlyst.com/tags/memory) when combined with other
traditional [hacking tools](https://www.peerlyst.com/tags/hacking-tools)
such as *[Mimikatz](https://github.com/gentilkiwi/mimikatz).* PowerShell
can also be used to modify system configuration, and even laterally hop
from one system to another (poppin' shells like a boss).
![](media/image100.jpeg)Example of using Mimikatz to retrieve plaintext
login passwords from volatile memory; credits [bytes \>
bombs](https://bytesoverbombs.io/quickie-mimikatz-e20e84d1aed0)
If Red Teamers already have a *cmd.exe* shell but no way to download
files to a [victim](https://www.peerlyst.com/tags/victim) Windows
machine, the *BITSadmin.exe* is a good alternative if worried that
running [PowerShell
scripts](https://www.peerlyst.com/tags/powershell-scripts) might trip
[detection](https://www.peerlyst.com/tags/detection) alarms.
![](media/image101.jpeg)Example of Windows command line downloading the
BITSAdmin tool; image courtesy of
[bytes](https://bytesoverbombs.io/living-off-the-land-windows-command-line-downloading-without-powershell-6b3a2b8acd97)
[\>
bombs](https://bytesoverbombs.io/living-off-the-land-windows-command-line-downloading-without-powershell-6b3a2b8acd97)
![](media/image102.jpeg)Other innate Windows double-edged tools can also
be misused such as
[PsExec](http://techgenix.com/psexec-nasty-things-it-can-do/) to launch
remote system processes or elevate privilege on accounts. A common
technique Red Teamers will use is to take passwords stolen using
*Mimikatz* and combine them with
[PsExec](https://www.peerlyst.com/tags/psexec) to move laterally and log
into other systems.
Changing a user's password by elevating PsExec's privileges; credits
[Chris Sanders](http://techgenix.com/psexec-nasty-things-it-can-do/)
![](media/image103.jpeg)A malicious
[executable](https://www.peerlyst.com/tags/executable) being launched
remotely; credits [Chris
Sanders](http://techgenix.com/psexec-nasty-things-it-can-do/)
![](media/image104.jpeg)[Also, Windows Management
Instrumentation](https://www.peerlyst.com/tags/windows-management-instrumentation)
(WMI) allows an attacker to execute code on another Windows
[host](https://www.peerlyst.com/tags/host) machine. Using *PowerShell*
with other tools such as
*[PowerLurk](https://github.com/Sw4mpf0x/PowerLurk)* enables an attacker
to build malicious [WMI](https://www.peerlyst.com/tags/wmi) Event
[Subscriptions](https://www.peerlyst.com/tags/subscriptions) making Red
Team engagements easier. To use *PowerLurk*, the *PowerLurk.ps1* module
must first be imported into your instance of *PowerShell*.
Using PowerLurk to build malicious WMI Event Subscriptions; credits
[KitPloit](https://www.kitploit.com/2016/10/powerlurk-malicious-wmi-events-using.html)
It is worth noting that with long-term persistence, the goal is nearly
always to remain low-key and behave like a normal user on the network
whenever possible to avoid discovery. Performing administrator
functions, however, an attacker chooses to execute them, is bound to
draw adversarial attention if anyone is paying attention on the opposite
end. Maintaining stealth, therefore, is critical to continued network
domination and persistence.
## Nasty Afterthoughts
So, what happens if you hack into a machine and determine that someone
else has beat you to it? The chances are that if you are a Red Teamer,
then it is of no concern to you and
[business](https://www.peerlyst.com/tags/business) goes on. However, in
real life, an attacker that discovered the presence of another
[hacker](https://www.peerlyst.com/tags/hacker) on a system would likely
want to [patch](https://www.peerlyst.com/tags/patch) the machine to
prevent other attackers from regaining access to the target system and
then plant their own backdoor for continued persistence.
Some of other 'tricks' of the trade that experienced hackers sometimes
exhibit are using [Tor](https://www.peerlyst.com/tags/tor) or other
[proxies](https://www.peerlyst.com/tags/proxies) for anonymous
connections to a victim host to reduce traceability. Some experienced
hackers rent out the infrastructure they use to launch attacks from
paying for this with some variant of stolen
[cryptocurrency](https://www.peerlyst.com/tags/cryptocurrency) funds to
reduce the likelihood of it all being traced back to them. When it's all
said and done, the gloves are removed and there is no 'sticky' residue
that can be forensically-traced linking them back to the crime. At that
point, [forensic](https://www.peerlyst.com/tags/forensic)
[investigators](https://www.peerlyst.com/tags/investigators) are just
chasing bits in [the Cloud](https://www.peerlyst.com/tags/the-cloud) and
.onion land.
> Chapter 11
>
> **Evasion & Obfuscation Techniques**
>
> Contributor: Ian Barwise
>
> ![](media/image105.jpeg)
Close Quarters Combat covert
[tools](https://www.peerlyst.com/tags/tools) for covert
[operators](https://www.peerlyst.com/tags/operators); image courtesy of
[Vinjatek](https://www.flickr.com/photos/sixvaser/33131360072)
> *"Subtle and insubstantial, the expert leaves no trace; divinely
> mysterious, he is inaudible. Thus he is the master of his enemy's
> fate." \~Sun Tzu, The Art of War*
## Evasion Techniques
Congratulations are in order, "You're in." All of the tedious
reconnaissance enumeration prep work paid off and successful
[access](https://www.peerlyst.com/tags/access) to the network or system
was achieved. Success was really
only ever a matter of time and persistence on the part of the
[attacker](https://www.peerlyst.com/tags/attacker) anyway. After all,
the [defender](https://www.peerlyst.com/tags/defender) has the nearly
impossible task of being right every time whereas the attacker only has
to get lucky one time. Popping a shell was just the beginning though,
now comes the difficult part. How do
[hackers](https://www.peerlyst.com/tags/hackers) remain undetected on a
system to carry out further exploitation? It is much more difficult than
it may seem. Maintaining
[stealth](https://www.peerlyst.com/tags/stealth) is of utmost importance
with the primary goal of avoiding discovery by remaining as quiet as
possible on the system. Evasion and
[obfuscation](https://www.peerlyst.com/tags/obfuscation) are about
treading silently and invisibly to the greatest extent possible to avoid
suspicion and detection.
> ***Evasion** is bypassing an [information
> security](https://www.peerlyst.com/tags/information-security) device
> (e.g., [firewall](https://www.peerlyst.com/tags/firewall) or
> [intrusion](https://www.peerlyst.com/tags/intrusion)
> detection/prevention systems) in order to deliver an
> [exploit](https://www.peerlyst.com/tags/exploit),
> [attack](https://www.peerlyst.com/tags/attack), or other form of
> [malware](https://www.peerlyst.com/tags/malware) to a target network
> or system, without detection.*
There are numerous methods and tools that attackers can use to evade
network and system-level detection. The concepts discussed in this
chapter are not meant to be an exhaustive compilation, but rather
potential starting points to consider during [Red
Team](https://www.peerlyst.com/tags/red-team) ops. It is always best to
assume the worst and hope for the best so that the
[team](https://www.peerlyst.com/tags/team) is prepared for any
eventuality. That said, it's best to assume the
[compromised](https://www.peerlyst.com/tags/compromised) system
environment is hostile with active system write once read many (worm)
event [logging](https://www.peerlyst.com/tags/logging) that is remotely
backed up, an [IDS](https://www.peerlyst.com/tags/ids) or
[IPS](https://www.peerlyst.com/tags/ips), anti-virus/malware software
[scanning](https://www.peerlyst.com/tags/scanning), and skilled [network
security](https://www.peerlyst.com/tags/network-security)
[administrators](https://www.peerlyst.com/tags/administrators) that are
actively [monitoring](https://www.peerlyst.com/tags/monitoring) and
hunting for [threats](https://www.peerlyst.com/tags/threats) on the
network despite the fact that the target system may not have any of that
stuff. Thinking this way forces an attacker to expend all means
necessary to remain undetected and avoids sloppy mistakes that are
easily traceable. Let's look at some methods attackers may use to
exploit [systems](https://www.peerlyst.com/tags/systems) and remain
relatively quiet and undetectable to the naked eye.
## Bypassing Intrusion Detection/Prevention Systems (IDS/IPS)
![](media/image106.jpeg)Typical [Network
Traffic](https://www.peerlyst.com/tags/network-traffic) Flow
[Diagram](https://www.peerlyst.com/tags/diagram); image courtesy of
[Juniper
Networks](https://www.juniper.net/us/en/products-services/what-is/ids-ips/)
First, imagine a scenario in which no
[backdoor](https://www.peerlyst.com/tags/backdoor) exists and the
attacker is attempting to gain system access in stealth mode. The
attacker will need to contend with the firewall and possibly also an IDS
or IPS. Like most [security
products](https://www.peerlyst.com/tags/security-products), IDS
solutions are not without vulnerabilities. A network IDS or
[NIDS](https://www.peerlyst.com/tags/nids), performs in-depth [packet
analysis](https://www.peerlyst.com/tags/packet-analysis) looking for
[patterns](https://www.peerlyst.com/tags/patterns) and anomalies against
known malware [signature](https://www.peerlyst.com/tags/signature)
databases.
One method of evading IDS/IPS
[detection](https://www.peerlyst.com/tags/detection) is to perform
[session](https://www.peerlyst.com/tags/session) splicing also known as
**fragmenting** [TCP](https://www.peerlyst.com/tags/tcp) packets through
the firewall and IDS by custom-crafting the packets into packet
[protocols](https://www.peerlyst.com/tags/protocols) where it is not
likely to be discovered, but that can be reassembled after successfully
passing through the firewall and IDS. Doing this forces the NIDS to use
more computer [resources in](https://www.peerlyst.com/tags/resources) an
attempt to reconstruct the fragments, a task that it will not always be
able to perform successfully. An attacker might attempt a series of
quiet (i.e., signal-to-noise ratio)
[attacks](https://www.peerlyst.com/tags/attacks) that involve
fragmenting packets only. Or, an attacker could fragment a packet with
overwriting. Another option is to initiate an attack followed by many
false attacks and then finishing the initial attack to confuse the IDS
by breaking up the packet strings. A bit of subterfuge...
There are several freely available packet crafting tools that work with
the [Linux](https://www.peerlyst.com/tags/linux), [Mac OS
X](https://www.peerlyst.com/tags/mac-osx), and
[Windows](https://www.peerlyst.com/tags/windows) [operating
systems](https://www.peerlyst.com/tags/operating-systems) such as
[Scapy](https://scapy.readthedocs.io/en/latest/),
[Hping](http://www.hping.org/),
[SoCat](http://www.dest-unreach.org/socat/), [Nmap](https://nmap.org/),
and [Wireshark](https://www.wireshark.org/download.html). As a
[pentester](https://www.peerlyst.com/tags/pentester) and Red Team
member, find tools that suit your needs and learn what special
[features](https://www.peerlyst.com/tags/features) each comes equipped
with. It is up to you to build your own toolkit. Every
[hacker](https://www.peerlyst.com/tags/hacker) has their own preferences
as well as certain Tactics,
[techniques](https://www.peerlyst.com/tags/techniques), and Protocols
(TTPs) that can be used to identify them. Additionally, not all [hacking
tools](https://www.peerlyst.com/tags/hacking-tools) are created equally.
Just as some tools might be
a bit noisier than others in terms of detection. Why use a sledgehammer
when you can use a precision scalpel? An attacker has several options
once they gain system access. They may attempt some type of [privilege
escalation](https://www.peerlyst.com/tags/privilege-escalation) perhaps
using a User [Account
Control](https://www.peerlyst.com/tags/account-control) (UAC)
[bypass](https://www.peerlyst.com/tags/bypass) technique and then 'burn
it all down' or [wipe](https://www.peerlyst.com/tags/wipe) everything
(i.e., the sledgehammer approach). The stealthier option, however, would
be for the attacker to plant a
[Trojan](https://www.peerlyst.com/tags/trojan) backdoor to quietly
access the system as desired. Perhaps the target system will yield
further valuable Intel or data at a later time, and it could prove
valuable as a lateral attack
[platform](https://www.peerlyst.com/tags/platform) to obfuscate the
evidence trail.
![](media/image107.jpeg)Example of Packet Crafting using
[Hping](https://www.peerlyst.com/tags/hping)
[tool](https://www.peerlyst.com/tags/tool); image courtesy of [InfoSec
Institute](https://resources.infosecinstitute.com/packet-crafting-a-serious-crime/)
[Nmap](https://www.peerlyst.com/tags/nmap) is another essential scanning
tool that allows an attacker to perform fragmented scans using the -f
(fragmented packets) command; or the \--mtu (maximum transmission unit)
command which is typically defaulted at 1,500 octets (8-bit bytes). If
an attacker wanted to
fragment a packet at less than the default MTU size (must be in
multiples of 8), then it will likely stand a better chance of succeeding
without detection depending on how the firewall is configured. Another
option is to use the command: 'send -eth' to bypass the
[Internet](https://www.peerlyst.com/tags/internet)
[Protocol](https://www.peerlyst.com/tags/protocol) (IP) layer and send
raw Ethernet frames instead. Capabilities with Nmap and other packet
crafting tools are limited depending what the user is attempting to
perform. A full Nmap [OS](https://www.peerlyst.com/tags/os) or Xmas
[scan](https://www.peerlyst.com/tags/scan), for example, does not
support fragmentation and would be far too 'noisy' in terms of remaining
undetected on the system.
**TCP un-sync** is another method attackers can use to bypass the
IDS/IPS by [injecting](https://www.peerlyst.com/tags/injecting) packets
that contain a bad TCP checksum.