**作者：小黑猪（朱文哲）@银河安全实验室  
公众号：[银河安全实验室](https://mp.weixin.qq.com/s/QcGd746CkQVIxx847Zp8Jg "银河安全实验室")**
之前在[《开源工控安全研究框架ISF介绍》](https://mp.weixin.qq.com/s/Ddf0O8zXxj54zCoZJM_D9A
"《开源工控安全研究框架ISF介绍》")这篇文章中，提到了可以利用ISF中的工控协议模块对设备进行进行Fuzz测试，这篇文章将介绍如何具体的使用KittyFuzzer框架来实现。
由于文章主要描述的是如何利用Kitty框架结合ISF中的工控协议组件进行Fuzz，因此不会对Kitty框架本身进行过多的说明，如果对Kitty框架的参数及如何使用存在困惑的可以参考一下[Kitty的官方文档](https://kitty.readthedocs.io/en/latest/)
### 1\. 工具介绍
#### 1.1 kittyFuzzer
Kitty是一个用python编写的模块化及可扩展的开源fuzzing框架，其设计灵感来自OpenRCE的Sulley和Michael
Eddington的Peach Fuzzer(现在是Deja Vu Security的)。
Kitty的设计之初是用于帮助我们fuzz一些非常规的目标(例如一些复杂的非TCP/IP通讯的协议)时不用每次都重复的实现一些基础的功能。因此Kitty被设计成一个通用的抽象的框架，Kitty本身包含了我们所能想到的每个Fuzz测试过程中的公共功能，并且允许用户根据他们特定的目标轻松的进行扩展。
#### 1.2 ISF
ISF是我之前从事工业控制设备漏洞挖掘工作时积累的工控协议和POC代码等内容进行整合后的产物，后来将其中的一部分内容进行了开源，项目的地址是https://github.com/dark-lbp/isf。
[ISF](Industrial Exploitation
Framework)，是一款基于python编写的类似[Metasploit]的工控漏洞利用框架。
ISF基于开源项目[routersploit]修改而来，在routersploit基础框架上针对工控设备增加了工控协议的客户端、工控协议模块等功能。
### 2\. Fuzz Modbus协议
Modbus协议是在工业控制领域使用的非常广泛的一个基础协议，其协议格式也较为简单，没有复杂的协议状态机。下面会对如何利将Kitty框架与ISF框架中的工控协议组件相结合对Modbus-TCP协议执行fuzzing测试进行说明。
#### 2.1. 导入需要的python库
在进行Fuzzing测试之前我们需要使用Kitty框架来构造测试用例，首先我们需要导入一下基础的库。
    # 从Kitty中导入Template等一系列基础组件
    from kitty.model import Template
    from kitty.interfaces import WebInterface
    from kitty.fuzzers import ServerFuzzer
    from kitty.model import GraphModel
    # 从Kitty扩展库katnip中导入TcpTarget用于Fuzz TCP目标
    from katnip.targets.tcp import TcpTarget
    # 从Kitty扩展库katnip中导入scapy模块用于直接使用Scapy的数据结构
    from katnip.model.low_level.scapy import *
    # 从ISF中导入modbus_tcp相关的数据包结构
    from icssploit.protocols.modbus_tcp import *
#### 2.2. 定义基础参数及数据结构
在导入了需要的模块后，还需要对目标Fuzzing测试对象的IP地址，通讯端口等一些基础参数进行设置。
    # 定义目标Fuzz对象的IP地址
    TARGET_IP = '172.16.22.131'
    # 定义目标Fuzz对象的通讯端口
    TARGET_PORT = 502
    # 定义随机数种子
    RANDSEED = int(RandShort())
在Modbus-TCP Fuzzing的例子中，我们将使用Modbus-TCP协议中的ReadCoilsRequest请求进行测试，下图是一个典型的Modbus Read Coils请求数据包。
![
](https://images.seebug.org/content/images/2018/12/418c6e75-3a81-4922-8799-f56d3f7b94df.jpg-w331s)
下面的代码将介绍如何利用ScapyField将ISF框架中Modbus-TCP协议的ReadCoilsRequest数据包结构直接应用于Kitty中的例子。
    # 根据ISF中Modbus-tcp协议的数据结构构造测试数据包,下面例子中将使用RandShort对请求的地址及bit位长度进行测试。
    read_coils_request_packet = ModbusHeaderRequest(func_code=0x01)/ReadCoilsRequest(ReferenceNumber=RandShort(), BitCount=RandShort())
    # 使用ScapyField直接将Scapy的数据包结构应用于Kitty框架中。
    read_coils_request_template = Template(name='Read Coils Request', fields=[
        ScapyField(read_coils_request_packet,
                   name='read_coils_request_packet',  # 定义这个Field的名字，用于在报告中显示
                   fuzzable=True,  # 定义这个Field是否需要Fuzz
                   seed=RANDSEED,  # 定义用于变异的随机数
                   fuzz_count=2000  # 这个数据结构的fuzz次数
                   ),
    ])
    # 使用GraphModel进行Fuzz
    model = GraphModel()
    # 在使用GraphModel中注册第一个节点，由于Modbus的Read Coils请求是单次的请求/回答形式，因此这里只要注册简单的一个节点即可。
    model.connect(read_coils_request_packet)
#### 2.3. 进行Fuzz模式配置
在完成了基础的定义后，还需要对Fuzz的模式等进行如下配置。
    # 定义一个目标Target, 设置IP、端口及连接超时时间。
    modbus_target = TcpTarget(name='modbus target', host=TARGET_IP, port=TARGET_PORT, timeout=2)
    # 定义是需要等待Target返回响应，如果设置为True Target不返回数据包则会被识别成异常进行记录。
    modbus_target.set_expect_response(True)
    # 定义使用ServerFuzzer的方式进行Fuzz测试
    fuzzer = ServerFuzzer()
    # 定义fuzzer使用的交互界面为web界面
    fuzzer.set_interface(WebInterface(port=26001))
    # 在fuzzer中定义使用GraphModel
    fuzzer.set_model(model)
    # 在fuzzer中定义target为modbus_target
    fuzzer.set_target(modbus_target)
    # 定义每个测试用例发送之间的延迟
    fuzzer.set_delay_between_tests(0.1)
    # 开始执行Fuzz
    fuzzer.start()
完成上述的设置后即可使用python命令执行这个脚本对目标进行测试了，运行后将会在命令行终端看到如下图所示的输出。
![
](https://images.seebug.org/content/images/2018/12/696eb05e-7c62-48d6-bb11-ce58bbd14b5a.jpg-w331s)
此时也可以通过开启的web管理界面来查看Fuzzing测试的状态。
![
](https://images.seebug.org/content/images/2018/12/65bfb107-3c55-4693-984b-93265e244131.jpg-w331s)
上面介绍的是最基础的直接使用ISF中的数据结构来对协议进行Fuzzing的例子，如果想针对性的测试Modbus不同的功能码，那么就需要修改数据结构定义的部分，下面是Fuzzing写线圈数据包的例子。
    write_coils_request_packet = ModbusHeaderRequest(func_code=0x05)/WriteSingleCoilRequest(ReferenceNumber=RandShort(), Value=RandShort())
    # 使用ScapyField直接将Scapy的数据包结构应用于Kitty框架中
    write_coils_request_packet_template = Template(name='Write Coils Request', fields=[
        ScapyField(write_coils_request_packet,
                   name='wrire_coils_request_packet',  # 定义这个Field的名字，用于在报告中显示
                   fuzzable=True,  # 定义这个Field是否需要Fuzz
                   seed=RANDSEED,  # 定义用于变异的随机数
                   fuzz_count=2000  # 这个数据结构的fuzz次数
                   ),
    ])
    model.connect(write_coils_request_packet_template)
#### 2.4. 完整代码
完整Fuzzing测试用例代码如下。
    # !/usr/bin/env python2
    # coding=utf-8
    from kitty.model import Template
    from kitty.interfaces import WebInterface
    from kitty.fuzzers import ServerFuzzer
    from kitty.model import GraphModel
    from katnip.targets.tcp import TcpTarget
    from katnip.model.low_level.scapy import *
    from icssploit.protocols.modbus_tcp import *
    TARGET_IP = '172.16.22.131'
    TARGET_PORT = 502
    RANDSEED = int(RandShort())
    # 根据ISF中Modbus-tcp协议的数据结构构造测试数据包,下面例子中将使用RandShort对请求的地址及写入的值进行变异测试。
    write_coils_request_packet = ModbusHeaderRequest(func_code=0x05)/WriteSingleCoilRequest(ReferenceNumber=RandShort(), Value=RandShort())
    # 使用ScapyField直接将Scapy的数据包结构应用于Kitty框架中
    write_coils_request_packet_template = Template(name='Write Coils Request', fields=[
        ScapyField(write_coils_request_packet,
                   name='wrire_coils_request_packet',  # 定义这个Field的名字，用于在报告中显示
                   fuzzable=True,  # 定义这个Field是否需要Fuzz
                   seed=RANDSEED,  # 定义用于变异的随机数
                   fuzz_count=2000  # 这个数据结构的fuzz次数
                   ),
    ])
    # 使用GraphModel进行Fuzz
    model = GraphModel()
    # 在使用GraphModel中注册第一个节点。
    model.connect(write_coils_request_packet_template)
    # 定义一个目标Target, 设置IP、端口及连接超时时间。
    modbus_target = TcpTarget(name='modbus target', host=TARGET_IP, port=TARGET_PORT, timeout=2)
    # 定义是需要等待Target返回响应，如果设置为True Target不返回数据包则会被识别成异常进行记录。
    modbus_target.set_expect_response(True)
    # 定义使用基础的ServerFuzzer进行Fuzz测试
    fuzzer = ServerFuzzer()
    # 定义fuzzer使用的交互界面为web界面
    fuzzer.set_interface(WebInterface(port=26001))
    # 在fuzzer中定义使用GraphModel
    fuzzer.set_model(model)
    # 在fuzzer中定义target为modbus_target
    fuzzer.set_target(modbus_target)
    # 定义每个测试用例发送之间的延迟
    fuzzer.set_delay_between_tests(0.1)
    # 开始执行Fuzz
    fuzzer.start()
### 3\. Fuzz 西门子s7comm协议
西门子s7comm协议是大部分西门子S7-300/400系列PLC默认使用的通讯协议，s7comm协议与Modbus-TCP协议有所不同，s7comm协议由TPKT协议及ISO-COTP协议封装后进行传输，且发送实际控制指令前必须先经过建立COTP连接及配置s7comm通讯参数这两个步骤。下面会对如何解决这些问题，对西门子S7comm协议执行Fuzzing测试进行说明。
#### 3.1. 导入需要的python库
此处的操作和进行Modbus-TCP Fuzzing测试时基本相同，只需要额外引入S7comm的协议数据结构即可。
    from kitty.model import Template
    from kitty.interfaces import WebInterface
    from kitty.fuzzers import ServerFuzzer
    from kitty.model import GraphModel
    from katnip.targets.tcp import TcpTarget
    from katnip.model.low_level.scapy import *
    # 从ISF中导入s7comm相关的数据包结构