    if(global_list_count > MAX_ENTRIES) 
        return -1; 
    for(list = global_list; list->next; list = list->next); 
    list->next = element; 
    element->next = NULL; 
    global_list_count++; 
    return 0; 
} 
For this example, assume that there is a list_init() function that initializes the list 
with a single member, so that a NULL pointer dereference doesn't occur in the 
list_add() function. This function adds an element to the list as it should, but it's not 
a reentrant function. If it's interrupted by another running thread that calls list_add() 
as well, both instances of the function simultaneously modify the global_list and 
global_list_count variables, which produces unpredictable results. For a function to 
be reentrant, it must not modify any global variables or shared resources without 
adequate locking mechanisms in place. Here's another example of a function that 
handles global data in a non-reentrant manner: 
struct CONNECTION 
{ 
    int sock; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
773 
    unsigned char *buffer; 
    size_t bytes_available, bytes_allocated; 
} client; 
size_t bytes_available(void) 
{ 
    return client->bytes_available; 
} 
int retrieve_data(char *buffer, size_t length) 
{ 
    if(length buffer, length); 
    else 
        memcpy(buffer, client->buffer, bytes_available()); 
    return 0; 
} 
The retrieve_data() function reads some data from a global structure into a 
destination buffer. To make sure it doesn't overflow the destination buffer, the length 
parameter is validated against how many bytes are available in the data buffer 
received from a client. The code is fine in a single uninterruptible context, but what 
happens if you interrupt this function with another thread that changes the state of 
the client CONNECTION structure? Specifically, you could make it so that 
bytes_available() returned a value less than length initially, and then interrupt it 
before the memcpy() operation with a function that changes client->bytes_available 
to be larger than length. Therefore, when program execution returned to 
retrieve_data(), it would copy an incorrect number of bytes into the buffer, resulting 
in an overflow. 
As you can see, synchronization issues can be quite subtle, and even code that 
appears safe at a glance can suddenly become unsafe when it's placed in an 
interruptible environment such as a multithreaded application. This chapter covers 
several vulnerability types that are a direct result of using non-reentrant functions 
when reentrancy is required. 
Race Conditions 
A program is said to contain a race condition if the outcome of an operation is 
successful only if certain resources are acted on in an expected order. If the resources 
aren't used in this specific order, program behavior is altered and the result becomes 
undefined. To understand this problem, consider a program that contains several 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
774 
threadsa producer thread that adds objects to a queue and multiple consumers that 
take objects from the queue and process them, as shown in the following code: 
struct element *queue; 
int queueThread(void) 
{ 
    struct element *new_obj, *tmp; 
    for(;;) 
    { 
        wait_for_request(); 
        new_obj = get_request(); 
        if(queue == NULL) 
        { 
            queue = new_obj; 
            continue; 
        } 
        for(tmp = queue; tmp->next; tmp = tmp->next) 
            ; 
        tmp->next = new_obj; 
    } 
} 
int dequeueThread(void) 
{ 
    for(;;) 
    { 
        struct element *elem; 
        if(queue == NULL) 
            continue; 
        elem = queue; 
        queue = queue->next; 
        .. process element .. 
    } 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
775 
The problem with this code is it modifies a shared structure without any locking to 
ensure that other threads don't also modify or access the same structure 
simultaneously. Imagine, for example, that dequeueThread() is running in one thread, 
and executes the following instruction: 
elem = queue; 
The structure is in an inconsistent state if the thread is interrupted after this code runs 
but before updating the queue variable to point to the next element. This state results 
in two threads de-queuing the same element and simultaneously attempting to 
operate on it. 
Starvation and Deadlocks 
Starvation can happen when a thread or set of threads never receives ownership of 
a synchronization object for some reason, so the threads are prevented from doing 
the work they're supposed to do. Starvation can be the result of a thread waiting to 
acquire ownership of too many objects or other threads with a higher priority 
constantly hogging the CPU, thus not allowing the lower priority thread to ever be 
scheduled for execution. 
Deadlocks are another problem encountered frequently in concurrent programming. 
They occur when two or more threads are using multiple synchronization objects at 
once but in a different order. In this situation, a lock is used to avoid a race condition, 
but the locks are acquired in an unexpected order, such that two threads of execution 
are waiting for locks that can never be released because it's owned by the other 
thread. The following code shows a simple example: 
Int thread1(void) 
{ 
    lock(mutex1); 
    .. code .. 
    lock(mutex2); 
    .. more code .. 
    unlock(mutex2); 
    unlock(mutex1); 
    return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
776 
int thread2(void) 
{ 
    lock(mutex2); 
    .. code .. 
    lock(mutex1); 
    .. more code .. 
    unlock(mutex2); 
    unlock(mutex1); 
    return 0; 
} 
This example has two threads that use mutex1 and mutex2 but in a different order, and 
both threads lock them simultaneously. This is a recipe for disaster! The problem can 
be best understood by playing out a sample scenario: 
1. thread1 locks mutex1. 
2. thread2 interrupts and locks mutex2. 
3. thread2 TRies to lock mutex1, but it's held by thread1, so tHRead2 blocks. 
4. tHRead1 resumes running and attempts to lock mutex2, but thread2 holds it, so 
tHRead1 blocks. 
Both threads are now unable to continue because they are waiting on a condition that 
can never be satisfied. For a deadlock to be possible, four conditions need to exist: 
Mutual exclusion The program needs to require exclusive access to a resource. 
Hold and wait A thread or process needs to lock one resource and then wait for 
another. 
No preemption An external entity can't force a thread or process to relinquish 
ownership of a resource. 
Circular wait Threads or processes wait on synchronization objects in a circular 
fashion. That is, thread1 might wait on a resource from thread2, which is 
waiting on a resource from thread3, which is waiting on a resource from 
thread1. 
If all four conditions exist in a program, there's the possibility for deadlock. Deadlock 
might also occur if a thread or process neglects to release a resource when it's 
supposed to because of a programming error. 
7.9.3 Process Synchronization 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
777 
Concurrent programming requires the use of process synchronization services the 
kernel exposes to userland applications. Both UNIX and Windows provide these 
services; however, they differ greatly in their implementation and semantics. The 
following sections present both the UNIX and Windows synchronization APIs and their 
fundamental synchronization primitives. 
System V Process Synchronization 
Chapter 10(? [????.]), "UNIX II: Processes," introduced the System V IPC 
mechanisms available in most UNIX OSs, which includes three objects that are visible 
in the kernel namespace and can be used by unrelated processes to interact with each 
other: semaphores, message queues, and shared memory segments. This discussion 
focuses on semaphores, as they are most relevant in discussions of synchronization. 
Note 
Shared memory segments have some relevance in synchronization, as processes 
sharing a memory segment must ensure that mutually exclusive access is achieved 
correctly so that the shared memory segment isn't accessed when it's in an 
inconsistent state. However, the issue of synchronization isn't the shared memory 
itself, but the mechanisms put in place to access that object (as is the case for any 
other shared resource). Therefore, shared memory isn't discussed further in this 
section. 
Semaphores 
A semaphore is a locking device that uses a counter to limit the number of instances 
that can be acquired. This counter is decremented every time the semaphore is 
acquired and incremented every time a semaphore is released. When the count is 
zero, any attempts to acquire the semaphore cause the caller to block. 
Semaphores are represented by IDs in the System V IPC API. System V also allows 
semaphores to be manipulated in sets, which are arrays of semaphores that 
programmers create to group related semaphores into one unit. The functions for 
manipulating semaphores and semaphore sets are described in the following 
paragraphs. 
The semget() function creates a new semaphore set or obtains an existing semaphore 
set: 
int semget(key_t key, int nsems, int semflg) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
778 
A new semaphore set is created if the value of key is IPC_PRIVATE or if the IPC_CREAT 
flag is set in semflg. An existing semaphore set is accessed by supplying the 
corresponding key for the first parameter; an error is returned if the key does not 
match an existing semaphore. If both the IPC_CREAT and IPC_EXCL flags are set and a 
semaphore with the same key already exists, an error is returned instead of a new 
semaphore being created. 
The nsems parameter indicates how many semaphores should exist in the specified set; 
if a single semaphore is used, a value of 1 is supplied. The semflg parameter is used 
to indicate what access permissions the semaphore set should have, as well as the 
following arguments: 
IPC_CREAT Create a new set if one doesn't exist already. 
IPC_EXCL Create a new semaphore set, or return an error if one already exists. 
IPC_NOWAIT Return with an error if the request is required to wait for the 
resource. 
The low nine bits of semflg provide a standard UNIX permission mask for owner, 
group, and world. The read permission allows semaphore access, write provides alter 
permission, and execute is not used. 
The semop() function performs an operation on selected semaphores in the 
semaphore set referenced by semid: 
int semop(int semid, struct sembuf *sops, unsigned nsops) 
The sops array contains a series of sembuf structures that describe operations to be 
performed on specific semaphores in the set. This function is used primarily to wait on 
or signal a semaphore, depending on the value of sem_op in each structure. The value 
of sem_op has the following effects: 
If the sem_op parameter is greater than 0, it is added to the internal integer in 
the semaphore structure, which is effectively the same as issuing multiple 
signals on the semaphore. 
If the sem_op value is equal to 0, the process waits (is put to sleep) until the 
semaphore value becomes 0. 
If the sem_op value is less than 0, that value is added to the internal integer in 
the semaphore structure. Because sem_op is negative, the operation is really a 
subtraction. This operation is like issuing multiple waits on the semaphore and 
may put the process to sleep. 
The semctl() function is used to perform a control operation on the semaphore 
referenced by semid: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
779 
int semctl(int semid, int semnum, int cmd, ...) 
The cmd value can be one of the following: 
IPC_STAT Copy the semaphore structure stored in the kernel to a user space 
buffer. It requires read privileges to the semaphore. 
IPC_SET Update the UID, GID, or mode of the semaphore set. It requires the 
caller to be a super-user or the creator of the set. 
IPC_RMID Remove the semaphore set. It requires super-user privileges or for 
the caller to be the creator of the set. 
SETALL Set the integer value in all semaphores in the set to be a specific value. 
SETVAL Set a specific semaphore in the semaphore set to be a specific value. 
A number of other operations can be performed, but they aren't relevant to this 
discussion. Interested readers can refer to the semctl() man page. 
Windows Process Synchronization 
The Win32 API provides objects that can synchronize a number of threads in a single 
process, as well as objects that can be used for synchronizing processes on a system. 
There are four interprocess synchronization objects: mutexes (Mutex or Mutant), 
events (Event), semaphores (Semaphore), and waitable timers (WaitableTimer). Each 
object has a signaled state in which it can be acquired and an unsignaled state in 
which an attempt to acquire it will force the caller to wait on a corresponding release. 
Sychronization objects can be created as named or unnamed objects and, as with all 
securable objects, are referenced with the HANDLE data type. 
Note 
Windows uses a single namespace for all mutexes, events, semaphores, waitable 
timers, jobs, and file-mappings. So no instances of these six object types can share 
the same name. For example, an attempt to create a mutex named MySync fails if a 
semaphore named MySync already exists. 
Wait Functions 
All windows synchronization objects are acquired (waited on) by the same set of 
functions. These functions put the calling process to sleep until the waited-on object 
is signaled. Some objects may also be modified by a call to a wait function. For 
example, with a mutex, the caller gains ownership of the object after successful 
completion of a wait function. Because the wait functions are common to all 
synchronization objects, it's best to discuss them before the objects themselves. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
780 
The WaitForSingleObject() function waits on a synchronization object specified by 
hHandle for a maximum period of time specified by dwMilliseconds: 
DWORD WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds) 
The following function works the same way as WaitForSingleObject(), except it has 
an additional parameter, bAlertable: 
DWORD WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, 
                              BOOL bAlertable) 
This parameter indicates that the process is alertable (that is, an I/O completion 
routine or asynchronous procedure call (APC) can be run after successful return 
from this function). This parameter is irrelevant for the purposes of this discussion. 
Note 
APCs are a common Windows idiom in I/O and IPC routines. At the most basic level, 
they are callback routines that can be scheduled to run at the earliest convenient time 
for the process. The earliest convenient time is when the process is alertable (waiting 
on an object) and is running userland-level code (i.e., it isn't in the middle of 
performing a system call). For more information on APCs, see Microsoft Windows 
Internals 4th Edition by Mark Russinovich and David Solomon (Microsoft Press, 2004(? 
[????.])). 
The following function is similar to the WaitForSingleObject() function, except it waits 
on multiple objects that are specified as an array of handles (lpHandles) with nCount 
elements: 
DWORD WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles, 
                               BOOL bWaitAll, 
                               DWORD dwMilliseconds) 
If bWaitAll is set to TRUE, this function waits for all objects specified in the lpHandles 
array to be signaled; otherwise, it waits for just one of the objects to be signaled 
before returning. Like WaitForSingleObject(), the dwMilliseconds parameter defines 
the maximum amount of time the function should wait before returning. 
The following function works the same way as WaitForMultipleObjects(), except it 
has an additional parameter, bAlertable: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
781 
DWORD WaitForMultipleObjectsEx(DWORD nCount, const HANDLE *lpHandles, 
                                 BOOL bWaitAll, 
                                 DWORD dwMilliseconds, 
                                 BOOL bAlertable) 
As with WaitForSingleObjectEx(), this parameter indicates that an I/O completion 
routine or APC can be run after successful return from this function. 
Mutex Objects 
Windows provides an implementation of the standard mutex synchronization 
primitive. When a thread locks a mutex, other threads that attempt to lock the mutex 
are put to sleep until it is released. After it has been released, one of the waiting 
threads will be awakened and acquire the mutex. There are three API functions 