UPDATEDB.Buddy
UPDATEDB.SmsCount
UPDATE DB.BOSSOperation
UPDATE DB.Dynamic
然后用下面这条命令分析，找出写操作频繁的表：
UPDATEDB.OrderHistory
UPDATEDB.User
UPDATEDB.Dynamic
INSERTDB.Buddy
DELIMITER/*!*/;
/*150003SET@OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=O*/;
/*140019SET@@session.max_insert_delayed_threads=0*/;
UPDATEDB.Quota
UPDATEDB.User
#at4
DELIMITER/*I*/;
UPDATEDB.Quota
at4
194160
9892
12318
12507
30103
62767
192587
10024
10919
18235
19767
24482
24938
54834
133971
第3章故障诊断·89
---
## Page 104
90·第二部分故障诊断与性能优化篇
况下会转化为ROW格式，见手册：
所示。
3.3.4
在下一节会有介绍。
者binlog_format 的格式为ROW。如果读者没有看明白什么是隔离级别或者binlog 的格式，
5.2.4.3.Mixed Binary Logging Format
第一种情况：NDB引擎，表的DML操作增、删、改会以 ROW 格式记录。
在二进制日志里，MIXED默认还是采用STATEMENT格式记录的，但在下面这6种情
ROW在二进制日志里记录的不是简单的SQL语句，而是实际行的变更，如图3-25
STATEMENT在二进制日志里，记录的是实际的 SQL语句，如图3-24所示。
binlog_format有三种格式，STATEMENT、ROW和MIXED。
谨慎设置binlog_format=MIXED
图3-24STATEMENT格式
When a DML statement updates an NDBCLUSTER table.
Thisis true whether or not any temporary tables 
When a call to aUDF is involved.
When any INSERT DELAYED is executed.
When a function contains UUID ().
For more information,seeSection 16.4.1.1,“Replication and AUTO_INCREMEN”
ndI
lv
sare actually logged
cat
If0 0
图3-25ROW格式
i--
atsessig
---
## Page 105
会有什么问题。
了MIXED格式，而且使用的默认隔离级别为REPEATABLE-READ，我们来看看这样设置
下面我们来看一个实例，在该实例中，主从都是 MySQL5.5，binlog_format被设置为
你说slave上会报错吗？答案是：NO，不会报错，没有任何提示。不信吗？各位可按
那么我在master上执行如下命令
8
首先来看看master上的数据，
接着看看slave上的数据，如下所示：
第五种情况：使用了用户定义函数（UDF）。
第四种情况：包含了INSERTDELAYED语句。
第三种情况：自
.8
6
.6
第六种情况：使用了临时表。
第二种情况：SQL语句里包含了UUIDO函数。
11.5rowsinset(0.00sec)
6
7
Query OK,1row affected (0.01 sec)
mysql>updatet2setid=99whereid=9;
10rows in set (0.00 sec)
mysql>select*fromt2;
+.
mysql>select*fromt2;
++
|id1
+----+
| id |
6
8
5
2
7
9
5
3
2
二
4
3
---+
自增长字段被更新了。
如下所示：
第3章故障诊断91
---
## Page 106
92·第二部分故障诊断与性能优化篇
示一下，表里的数据如图3-28所示。
binlog_row_image=minimal加以解决，如图3-27所示。
ROW格式对主从复制来说是很安全的参数。
ROW的效果是一样的，binlog记录的格式都是ROW，很神奇吧？你去试试就知道了，
ROW。如果是READ-COMMITTED隔离级别，binlog_format=MIXED和binlog_format=
过采用ROW格式解决了这个问题。
不一致的情况，而且MySQL并不会发出任何报警信息。在MySQL5.1以后的版本中，通
主从复制进程并不会中断。但是在这种情况下，主从数据是很不安全的，很容易出现数据
这条 SQL在 slave 机器上执行后，由于没有发现id=7的这条记录，影响的行数为空，因此
录，所以我们查看binlog会发现记录的是一条update t2 set id=99where id=9的SQL语句，
式，但默认还是采用的STATEMENT格式记录的，只有几种特殊情况才会以ROW格式记
照上面的内容测试一下。那为啥不会报错呢？因为在二进制日志里虽然采用的是MIXED 格
看，若以15000转希捷硬盘做RAID10，每秒写操作在200个/秒还是没有问题的。
是一把双刃剑，看你如何取舍了，你是要安全稳定性，还是要性能？就我管理的机器上来
式大很多，而且主从复制是通过binlog来传输的，binlog的增大也增加了网络开销，这就
就会很大了，再一个就是写日志所带来的I/O问题是否也要考虑进来呢？
不过，在MySQL5.6里，针对这位网友提出的这个问题进行了优化，可以通过设置
之前有个网友问我，如果binlog_format为row格式，那么数据量很大的时候，日志量
也就是说，binlog里只记录影响后的行，从而减少了binlog 的增长量大小。下面来演
这个问题问得相当好，没错，如果设置为row格式，binlog文件会比 STATEMENT格
注意，我的 binlog_row_image 是默认的 FULL，下面执行一条更新语句，如图3-29所示。
如果你采用的是默认隔离级别REPEATABLE-READ，那么建议设置binlog_format
在改为binlog_format=ROW格式后，再次执行刚才的语句，就会报错，如下所示：
执行结果如图3-26所示。
Rows matched:1 Changed:1Warnings:0
mysql>updatet2 set id=99 where id=9;
Query OK,1row affected(0.00 sec)
IVmeta0 ml lsbl-nl
0n1aha=0日-0
COMPLETIOXIYPE
图3-26同步报错
---
## Page 107
介绍。
影响的那一行记录。
置为minimal，再执行一条更新语句，如图3-31所示。
至于REPEATABLE-READ和READ-COMMITTED有什么区别，将在优化那一章加以
如果你仔细和上面的图3-30和图3-32进行对比，就会发现区别，没错，这里只记录了
然后再到binlog里去查看，如图3-32所示。
可以看到，在binlog里会把所有影响的行都给记录下来。下面把binlog_row_image设
然后再到binlog里去查看，如图3-30所示。
采用MySQL5.6，或binlog-row-imaeg=minimal
MySQL5.6之前或binlog-row-imaeg=full
主键
映像前
映像前
mte
图3-27binlog_row_image
图3-30binlog信息
IGW
图3-29更新
hevmvzol'where id-
Warnings:0
映像后
映像后
更改的列
第3章故障诊断·93
---
## Page 108
94
·第二部分故障诊断与性能优化篇
swap，所以内存被耗尽后，主机仍旧会被Hang 死了。
性能有突起波动。但是如此设置后似乎并没有解决问题，还是存在主机被Hang死的情况。
有建立 swap分区，这样做是考虑到将分配给MySQL 的地址空间映射到 swap上，会导致
候，操作系统就会把 MySQL所拥有的一部分地址空间映射到swap上去。
48GB，但在机器正常的情况下，使用free-m命令查看，会发现InnoDB_Buffer_Pool内存
人工去重启那台被 Hang 死的机器，才能正常切换。
Hang 死，当时的情况是主机可以 ping通，但 ssh 却连接不上，导致 cluster 无法切换，只有
内存，比如，cp一个大文件，或者在主库上mysqldump 数据库等，当物理内存不够用的时
已经超过了48GB，为什么会出现这种情况？这是因为其他程序或者系统模块需要额外的
3.3.5
这是一个真实的案例，在2009年和2010年的时候，我负责管理的一个主机多次被
在百思不得其解的情况下，后来参考了淘宝《MySQL如何避免使用swap》这篇文
该主机内存是72 GB，其中MySQL（Innodb_Buffer_Pool）内存缓冲池所用的内存为
1）增加2GB的swap分区，避免内存耗尽时机器死机，
找到原因后，解决起来也简单，我们后来的解决方案是：
未设置swap分区导致内存耗尽，
@=ARSRING{30）mea=30nullable=nu1]-0 *
图3-31binlog_row_image设置为MINIMAL
18:160 s1 02
mysql>show variables like *binlog_row_ima
Variable_nane
binlog_row_image
OK.
图3-32binlog信息
MINIMAI.
Value
，主机死机
1
645RC3000844821
，可以给予些缓冲，重启前端程
---
## Page 109
环境下非常实用。不过，在使用这个功能之前必须确保event_scheduler已开启，可执行
而且MySQL的事件调度器可以实现每秒钟执行一个任务，这在一些对实时性要求较高的
3.3.6
死机（内存Nagios 监控脚本会在监控章节介绍）。
如图3-33所示的命令。
可以作为定时任务调度器，取代部分原先只能用操作系统任务调度器才能完成的定时功能。
序释放MySQL压力。
2）增加内存监控，
该问题的发现者是笔者的前同事李冉，本人对其进行了校验与测试。
先来普及下基础知识：事件调度器（event）是在MySQL5.1中新增的另一个特色功能
MySQL>show createevent'insert'\G;
使用 slave进行同步，结果是这样的，注意粗斜体字：
collation_connection:utf8_general_ci
sql_mode:
mysql> show create event'insert\G;
在主从架构中，在master 创建一个event，如下所示：
下面针对事件调度器在主从切换时具体会有什么影响，做了一个测试：
1rowinset(0.02sec)
character_set_client:utf8
END
insertinto t3(name)values('aa');
ONCOMPLETIONPRESERVEENABLEDOBEGIN
ONSCHEDULEEVERY1MINUTESTARTS'2012-11-2016:10:09
CreateEvent:CREATEDEFINER=root'@localhost'EVENTinsert
Database Collation:utf8_general_ci
time_zone:SYSTEM
Event:insert
Event:insert
MySQL故障切换之事件调度器注意事项
，当内存使用率达到90%，
row in set (0.00 sec)
Variable _name
aql>show variableg like 'event_scheduler
event_scheduler
图3-33事件调度器开启
set
global
Value
ON
event_scheduler=
，通过重启 MySQL来释放内存，避免机器
第3章故障诊断·95
---
## Page 110
96·第二部分故障诊断与性能优化篇
ENABLED，这样就会造成切换以后，事件无法执行。所以，需要人工重新开启事件状态。
(注意粗斜体内容)。
命令如下所示：
新的master。但这时，事件的状态还是维持着slaveSIDE_DISABLED，并不是也改成了
步复制就会坏掉。当主从故障切换之后，VIP 漂移到了以前的 slave上，此时 slave就成了
Status:The event status.One ofENABLED,DISABLED,or SLAVESIDE_DISABLED.
也就是说，事件只能在master上触发，在 slave上不能触发，如果 slave上触发了，同
附上事件状态截图，如图3-36所示。
参考手册：
mysql>alter event'insert'enable;
再回过头来看一下事件状态，
1row in set(0.02sec)
collation_connection:utf8_general_ci
ON SCHEDULEEVERY1MINUTESTARTS'2012-11-2016:10:09'
CreateEvent:CREATEDEFINER='root'@localhost'EVENT'insert'
sq_mode:
QueryOK,0rowsaffected(0.07sec)
Database Collation:utf8_general_ci
character_set_client:utf8
END
insert into t3(name)values(aa);
ONCOMPLETIONPRESERVEDISABLEONsIaVeDOBEGIN
time_zone:SYSTEM
图3-34在master上的事件状态
=
terval
Exec
09
ilue
ENABLED
2012-11-2016:10:09
MINUTE
ert
，在master和 slave上的事件状态如图3-34和图3-35所示
图3-35在slave上的事件状态
Ori
Execute
zone,
ame
lue
1
家*本***水1.
SLAVESIDE_DISABLED
utfS
2012-11-2016:10:09
MINUTE
tfs
nsert
URRING
localhest
---
## Page 111
mysqld进程杀死，否则没法挽救。
那还好，如果是单机呢？如何恢复？
ib_logfile（redo log 重做事务日志文件），结果导致了悲剧的发生。如果有做主从复制同步，
3.3.7
接下来，先找到mysqld 的进程pid，如下所示：
常在群里看到，有人因为不熟悉InnoDB引擎，而误删了InnoDB ibdata（数据文件）和
之后要执行很关键的一步，输人如下命令，
#netstat-ntlp|grepmysqld
若此时你发现数据库还可以正常工作，数据照样可以写人，切记，这时千万别把
2）使用rm-fib*删除数据文件和重做日志文件。
下面就来模拟生产环境下，人为误删除数据文件和重做日志文件，是如何恢复的。
Irwx---1 root root649月2416:5111->/u2/mysql/data/ib_logfile2
lrwx--1rootroot649月2416:5110->/u2/mysql/data/ib_logfile1
#l/proc/30426/fd|egrepib_libdata'
这里是30426。
tcp000.0.0.0:33060.0.0.0:*LISTEN
下面就来具体看看如何恢复。
--mysql-socket=/tmp/mysql.sockrun
-mysql-password=123456
sysbench --test=oltp
1）用Sysbench模拟数据的写人，如下所示：
-oltp-table-name=uncompressed
-mysql-db=test
-mysql-user=admin
-mysql-port=3306
-mysql-host=192.168.110.140
-num-threads=90
-max-requests=10000
--oltp-table-size=10000000
-mysql-table-engine=innodb
人工误删除InnoDBibdata数据文件，如何恢复
询问
DELIMITER:
insertx+
图3-36事件SQL
30426/mysqld
，并查看结果：
第3章故障诊断·97
---