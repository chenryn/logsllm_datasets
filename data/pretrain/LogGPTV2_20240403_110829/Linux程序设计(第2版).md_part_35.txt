int delch(void);
int deleteln(void);
int beep (void) :
int flash(void);
curses有自己的字符类型chtype，它可以比标准char类型有更多的二进制位数。比如说，
add..系列函数在光标的当前位置添加给定的字符或字符串。printw函数按与printf同样的
方法对一个字符申进行格式化，然后把它添加到光标的当前位置。refresb函数的作用是刷新
物理屏幕，成功时返回“OK"，出错时返回“ERR”。box函数的作用是让用户图着当前窗口
画一个框子。在标准的curses函数库里，用户只能使用“普通”的水平线字符和垂直线字符画
框子。
加入jaVa编程群：524621833
---
## Page 182
164Linux程序设计
在扩展curses函数里，用户可以利用ACS_VLINE和ACS_HLINE这两个定义画出更
好看的框子。用户的终端需要支持画线字符，现如今它已经相当标准了。
insch函数插人一个字符，把现有字符向右移，但在行尾执行这个操作会产生什么样的结果
并没有定义，具体情况取决于用户使用的终端。insertln函数的作用是插人一个空行，把现有的
行依次向下移一行。那两个delete函数与两个insert函数的作用正好相反。
调用beep函数可以发出声音。有很少一部分终端不能产生任何声音，所以有些curses设置会
在调用beep的时候使屏幕闪烁。如果读者是在一个比较繁忙的办公室上班的话，蜂鸣可能会从
各种机器设备上产生，这时，你可能会喜欢屏幕闪烁这种方式。正如大家已经猜到的那样，
flash函数的作用就是使屏幕产生闪烁，但如果无法产生闪烁效果的话，这个函数会尝试在终端
上发出声音来。
6.5从屏幕读取输入数据
虽然这一功能并不经常使用，但我们确实可以从屏幕上读取字符。下面这些函数可以做到
这一点：
#inciude 
chtype inch(void) :
int instr (char *string) ;
int innstr char *string. int number_of_characters);
inch函数永远是可用的，但instr和inndtr函数就不总是被支持的了。inch函数返回光标在当前
屏幕位置处的那个字符及其属性。需要注意的是inch返回的并不是一个字符，面是一个chtype，
而instr和innstr返回的是一个char字符数组。
6.6清除屏幕
要想清除屏幕上的某个区域，主要有四种办法，它们是：
#include 
int erase (void) :
int clear(void);
int clrtobot (void) ;
int clrtoeol (void);
erase函数在每一个屏幕位置写上空白字符。clear函数的功能类似于erase，也是清屏；但还
会通过调用clearok(强制进行一次原文重现操作。clearok强制进行清屏操作，但在下～个refresh
调用使会进行原文重现操作。
clear函数的一般做法是用一条终端命令来清除整个屏幕，而不是简单地尝试清除当前屏幕
加入jaVa编程群：524621833
---
## Page 183
第6章curses函数库165
上每一个有内容的坐标点。所以clear函数的清屏操作既可靠又彻底。clear后面紧跟refresh这样
的组合操作提供了一个有效的重新绘制屏幕的手段。
clrtobot清除从当前光标位置到屏幕右下角之间的所有内容；clrtoeol从当前光标位置删除到
这一行的结尾。
6.7移动光标
移动光标只需要一个函数，还有一个辅助函数用来控制刷新屏幕后curses应该把光标放在什
么地方：
#inciude 
int move(int new_y. int new_x);
int leaveok(WINDOw *window_ptr. bool leave_flag);
move函数的作用就是把逻辑光标的位置移动到指定的地点。记住，解幕坐标是以左上角为
(0.0）的。curses的大多数版本里都用来确定物理屏蒋尺寸的两个extern整数LINES和COLUMNS，
它们可以用来确定new_y和new_x的最大可取值。调用move本身并不会使物理光标发生移动，它
只改变逻辑屏幕上的光标位置，下一个输出就将出现在新位置处。如果我们想让光标位置在调
用move函数之后立刻发生变化，就必须在它的后面立刻跟上一个refresh调用。
在一-次屏幕刷新过后，curses需要把物理光标放在某个位置上，控制这一位置的标志就是由
leaveok函数设置的。在缺省的情况下，这个标志是“false”，在剧新过后，硬件光标将停留在屏
幕上逻辑光标所在的地点。如果这个标志被设置为“true”，硬件光标会被随机放置在屏幕上的
任意地点。一般说来，人们更喜欢使用缺省选项。
6.8字符的属性
每个curscs字符都可以有特定的属性，属性控制着这个字符在屏幕上的显示方式，当然前提
是显示设备硬件能够支持要求的属性。预定义的属性有：A_BLINK、A_BOLD、A_DIM、
A_REVERSE、A_STANDOUT和A_UNDERLINE。下面这些函数可以用来设置一个属性或多个
属性。
#include 
int attron{chtype attribute);
int attroff(chtype attribute);
int attrset(chtype attribute);
int standout (void) :
int standend(void):
attrset函数的作用是对curses属性进行设置，attron和attroff的作用是在不影响其他属性的前
提下开启或关闭指定的属性；面standout和standend则提供了一种比较通用的“突出”模式一
加入jaVa编程群：524621833
---
## Page 184
166
Linux程序设计
在大多数终端上，它通常被映射为反显（高亮度或加黑）。
到这里我们已经把屏幕处理方面的内容介绍得差不多了。现在，我们来分析一个比较复杂
的程序示例：moveadd.c。为让大家更清楚地理解这个程序的功用，我们在程序里增加了几个
refresh和isleep调用，好计大家能够看到每一阶段屏募的显示情况。一般情况下，curses程序会尽
可能少地刷新屏幕，因为这并不是一个很有效率的操作。这里给出的代码更多地考虑到演示显
示效果的目的。
动手试试：移动光标，暂入字符和属性
1）我们在程序的开始列出必要的头文件，再定义了儿个字符数组和一个指向这些数组的指
针，然后对curses结构进行了初始化。
#include 
vinclude 
#include 
int main()
const char witch_one[]=* First witch
conet char witch_two[] = * Second witch *:
initscr(1 ;
2)现在是最初要显示在屏幕上几组文字。请注意文本属性标志的开关状态。
attron(A_BOLD);
move(5. 15) ;
printw[*&s*,*Macbeth*):
attroff(A_BOLD);
sleep(1):
refresh():
nove(8, 15);
printv(*s*,*Thunder and Lightning*):
attron(A_DIN) :
attroff(A_DIM):
refresh(}:
sleep(11;
nove(10, 10) ;
printw('ks",
*When shall we three meet again*):
printw{*&s*,*In thunder,lightning.or in rain ?"]:
move(11.23);
move(13, 10):
printw('ks",
move(14,23) :
“When the hurlyburly′s done,*1;
refresh(1;
printw(*$s*,
*When the battle's Ilost and won.*1:
sleep(1) :
3）最后，确定演员的出场顺序，把他们的名字以一次-个字符的方式插人到指定位置。在
main函数的末尾我们加上了重置函数endwin、
scan_ptr = witch_one + strlen(witch_onel:
attron(A_DIM):
while(scan_ptr != witch_one)(
insch(*scan_ptr--) ;
nove{10,10} ;
加入jaVva编程群：524621833
---
## Page 185
第6章curses函数库
167
scan_ptr = witch_two + strlen(witch_two):
move(13,10）;
insch(*scan_ptr--}:
attroff (A_DIM) :
refresh() :
sleep(1) ;
exit(EXIT_SUCCESS):
endwin() ;
当我们运行这个程序的时候，最终的屏幕如图6-3所示。
Maciet:
Thurder rd Lightnire
Bdh
lost and uor
围6-3
6.9键盘
curses不仅提供了控制屏幕显示效果的简便手段，还为我们准备了一个控制键盘的简单办法。
6.9.1键盘的工作模式
读键盘例程是由它的工作模式控制的。对工作模式进行设置的函数如下所示：
1nclude 
int echo(void):
int cbreak[void):
int noecho|void);
int raw(void);
int
int noraw(void);
两个echo函数简单地开启或者关闭输人字符的回显功能。其余四个函数调用控制着在终端
上输人的字符将如何被送人curses程序。
要想解释清楚cbreak，我们需要先弄明白缺省的输人模式。当一个curses程序以initscr调用
开始运行的时候，输人模式被设置为“预处理模式”。这意味着所有处理都是以文本行为单位的，
也就是说，输人数据只有在用户按下回车键之后才回被送人程序。键盘特殊字符都处于被激活
加入jaVa编程群：524621833
---
## Page 186
168
Linux程序设计
状态，所以敲击适当的按键序列就能在程序里产生--个信号。流（flow）控制也处于被激活状
态。程序可以通过调用cbreak把输人模式设置为“字符中止模式”，即字符一经敲人就被立刻送
往程序的模式。与预处理模式一样，键盘特殊键也处于被激活状态，但简单的按键（比如
Backspace）会被直接送人程序去进行处理。所以如果读者还想让Backspace有原先的功能，就必
须自己来编程。
raw调用的作用是关闭特殊键的处理功能，再想通过敲击特殊字符序列的办法来产生信号或
流控制就不可能了。调用nocbreak把输人模式设置回预处理模式，但特殊字符处理功能保持不
变：调用noraw等于恢复预处理模式和特殊字符处理功能
6.9.2键盘输入
读键盘的操作很简单。主要函数有：
include 
int getch (void) ;
int getstr(char *string):
int getnstr(char *string. int number_of_characters):
int scanw(char *format,...):
这些函数的行为与它们的非curses对等函数getchar、gets和scanf都非常相似。需要注意的是：
getstr对它返回的字符申长度没有限制，所以在使用这个函数时必须多加小心。如果你的curses
函数库版本支持getnstr—它允许你对读取的字符个数加以限制，就应该尽可能用它来代
getst。它们与我们在第3章介绍的gets和fgets的行为相类似。
下面这个ipmode.c示例程序演示了如何对键盘进行处理。
动手试试：键盘模式和输入
1)首先，对程序的初始化curses调用进行设置。
include 
include 
#include 
#include 
define PW_LEN 25
#define NAMB_LEN 256
int nain{)(
char password[Pw_LEN];
char name [NAME_LEN] :
char *real_password 。*xyzzy*:
int i = 0;
initscr():
move(5, 10);
move(7, 10) ;
printw[*ts*,
:1.:aueu zesn.
getstr(nane) :
printw(*ts*.*Password:*):
move(9, 10) :
refresh():
加入jaVa编程群：524621833
---
## Page 187
第6章curses函数库
691
2）用户输人口令字的时候，我们不能让口令字问显在屏幕上。然后检查口令字是否等于
"xyzzy"
chreak () :
noecho [} ;
menset (password.*\0*,sizeof(password)) ;
while (i< PW_LEN){
password[i] = getchi};
(..pe
nove(9,20 +1）;
f(password{1]==\n')break;
reftesh(1 :
if(strcnp[passvord. real_password) ** 0] break;
i+* :
3）最后，重新激活键盘的间显功能并给出口令字检验是否成功的执行结果
echo (1 ;
nocbreak ();
if (strcsp(password, real_password)  0) printw(*ks*,*Correct*):
move(11, 10) ;
else printwi*ks',*Krong*1;
refresh() :
exit(EXIT_SOCCESS):