以下是优化后的文本，以使其更加清晰、连贯和专业：

---

## 第6章 curses函数库

### 1. 常用的curses函数
以下是一些常用的curses函数及其功能说明：
- `int delch(void);`：删除当前光标位置的字符。
- `int deleteln(void);`：删除当前行。
- `int beep(void);`：发出蜂鸣声。
- `int flash(void);`：使屏幕闪烁。

curses库定义了自有的字符类型`chtype`，它比标准`char`类型具有更多的二进制位。例如，`addch`系列函数在光标的当前位置添加指定的字符或字符串。`printw`函数则按照与`printf`相同的方式格式化字符串，并将其输出到光标的当前位置。`refresh`函数用于刷新物理屏幕，成功时返回`OK`，出错时返回`ERR`。`box`函数用于在当前窗口绘制一个边框。在标准的curses库中，用户仅能使用普通的水平线和垂直线字符来绘制边框。

### 2. 扩展的curses功能
扩展的curses库允许用户通过`ACS_VLINE`和`ACS_HLINE`宏定义更美观的边框。这要求终端支持绘图字符，而如今大多数终端都已支持。

- `insch`函数在当前光标位置插入一个字符，并将现有字符向右移动。如果在行尾执行此操作，结果未定义，具体取决于终端。
- `insertln`函数插入一个空行，并将现有的行向下移动一行。`delete`函数则与其相反。

### 3. 屏幕输入与输出
#### 3.1 从屏幕读取数据
尽管不常用，但可以从屏幕上读取字符。相关函数包括：
- `#include <curses.h>`
- `chtype inch(void);`：返回光标所在位置的字符及其属性。
- `int instr(char *string);`：读取当前光标位置的字符串。
- `int innstr(char *string, int number_of_characters);`：读取指定数量的字符。

需要注意的是，`inch`函数返回的是`chtype`类型，而`instr`和`innstr`返回的是`char`数组。

#### 3.2 清除屏幕
清除屏幕区域的方法有以下几种：
- `#include <curses.h>`
- `int erase(void);`：将每个屏幕位置写入空白字符。
- `int clear(void);`：清屏并调用`clearok`强制进行一次刷新。
- `int clrtobot(void);`：清除从当前光标位置到屏幕右下角的所有内容。
- `int clrtoeol(void);`：清除从当前光标位置到行尾的所有内容。

`clear`函数通常会使用一条终端命令来清除整个屏幕，而不是逐个清除每个坐标点的内容，因此它的清屏操作既可靠又彻底。

### 4. 光标移动
- `#include <curses.h>`
- `int move(int new_y, int new_x);`：将逻辑光标移动到指定位置。
- `int leaveok(WINDOW *window_ptr, bool leave_flag);`：设置刷新屏幕后光标的位置标志。

`move`函数只改变逻辑光标位置，要使物理光标立即变化，需在其后调用`refresh`。`leaveok`函数控制刷新后硬件光标的位置，默认情况下，光标停留在逻辑光标位置；若设置为`true`，光标将随机放置。

### 5. 字符属性
每个curses字符可以有特定的属性，如`A_BLINK`、`A_BOLD`、`A_DIM`、`A_REVERSE`、`A_STANDOUT`和`A_UNDERLINE`。相关函数包括：
- `#include <curses.h>`
- `int attron(chtype attribute);`：开启指定属性。
- `int attroff(chtype attribute);`：关闭指定属性。
- `int attrset(chtype attribute);`：设置属性。
- `int standout(void);`：启用突出显示模式。
- `int standend(void);`：结束突出显示模式。

### 6. 示例程序
以下是一个复杂的示例程序`moveadd.c`，展示了如何移动光标、插入字符和设置属性。为了演示效果，增加了多个`refresh`和`sleep`调用。

```c
#include <curses.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    const char witch_one[] = "First witch";
    const char witch_two[] = "Second witch";

    initscr();

    // 设置粗体属性
    attron(A_BOLD);
    move(5, 15);
    printw("%s", "Macbeth");
    attroff(A_BOLD);
    sleep(1);
    refresh();

    // 显示更多文本
    move(8, 15);
    printw("%s", "Thunder and Lightning");
    attron(A_DIM);
    attroff(A_DIM);
    refresh();
    sleep(1);

    move(10, 10);
    printw("%s", "When shall we three meet again");
    printw("%s", "In thunder, lightning, or in rain?");
    move(11, 23);
    printw("%s", "When the hurlyburly's done,");
    move(14, 23);
    printw("%s", "When the battle's lost and won.");
    refresh();
    sleep(1);

    // 插入字符
    char *scan_ptr = witch_one + strlen(witch_one);
    attron(A_DIM);
    while (scan_ptr != witch_one) {
        insch(*scan_ptr--);
        move(10, 10);
    }

    scan_ptr = witch_two + strlen(witch_two);
    move(13, 10);
    while (scan_ptr != witch_two) {
        insch(*scan_ptr--);
    }
    attroff(A_DIM);
    refresh();
    sleep(1);

    endwin();
    exit(EXIT_SUCCESS);
}
```

### 7. 键盘处理
curses不仅提供了控制屏幕显示的简便手段，还提供了一种简单的键盘控制方法。

#### 7.1 键盘工作模式
- `#include <curses.h>`
- `int echo(void);`：开启字符回显。
- `int cbreak(void);`：设置为字符中断模式。
- `int noecho(void);`：关闭字符回显。
- `int raw(void);`：关闭特殊键处理。
- `int noraw(void);`：恢复预处理模式和特殊键处理。

#### 7.2 键盘输入
- `#include <curses.h>`
- `int getch(void);`：读取单个字符。
- `int getstr(char *string);`：读取字符串。
- `int getnstr(char *string, int number_of_characters);`：读取指定数量的字符。
- `int scanw(char *format, ...);`：格式化读取输入。

这些函数的行为类似于`getchar`、`gets`和`scanf`。需要注意的是，`getstr`对返回的字符串长度没有限制，建议使用`getnstr`来限制读取的字符数。

### 示例程序：键盘模式和输入
以下是一个示例程序`ipmode.c`，演示了如何处理键盘输入。

```c
#include <curses.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#define PW_LEN 25
#define NAME_LEN 256

int main() {
    char password[PW_LEN];
    char name[NAME_LEN];
    const char *real_password = "xyzzy";
    int i = 0;

    initscr();
    move(5, 10);
    printw("Name: ");
    getstr(name);

    move(7, 10);
    printw("Password: ");
    move(9, 10);
    refresh();

    cbreak();
    noecho();
    memset(password, '\0', sizeof(password));

    while (i < PW_LEN) {
        password[i] = getch();
        move(9, 20 + i);
        if (password[i] == '\n') break;
        refresh();
        i++;
    }

    echo();
    nocbreak();
    if (strcmp(password, real_password) == 0) {
        printw("Correct");
    } else {
        printw("Wrong");
    }

    move(11, 10);
    refresh();
    endwin();
    exit(EXIT_SUCCESS);
}
```

这个示例程序演示了如何获取用户名和密码，并验证密码是否正确。密码输入时不回显，以确保安全性。

---

希望这些优化后的文本对你有所帮助！如果有任何进一步的问题，请随时告诉我。