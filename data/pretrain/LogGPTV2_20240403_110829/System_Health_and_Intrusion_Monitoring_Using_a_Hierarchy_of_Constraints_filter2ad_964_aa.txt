title:System Health and Intrusion Monitoring Using a Hierarchy of Constraints
author:Calvin Ko and
Paul Brutch and
Jeff Rowe and
Guy Tsafnat and
Karl N. Levitt
System Health and Intrusion Monitoring Using
a Hierarchy of Constraints(cid:1)
Calvin Ko1, Paul Brutch1, Jeﬀ Rowe2, Guy Tsafnat1, and Karl Levitt2
1 NAI Labs, Network Associates Inc., Santa Clara, CA
{Calvin Ko, Paul Brutch, Guy Tsafnat}@nai.com
2 Computer Security Laboratory, University of California, Davis
{rowe, levitt}@cs.ucdavis.edu
Abstract. This paper presents a new approach to run-time security
monitoring that can detect system abnormalities including attacks,
faults, or operational errors. The approach, System Health and Intru-
sion Monitoring (SHIM), employs a hierarchy of constraints to describe
correct operation of a system at various levels of abstraction. The con-
straints capture static behavior, dynamic behavior, and time-critical be-
havior of a system. A system in execution will be monitored for violation
of the constraints, which may indicate potential security problems in the
system. SHIM is based on speciﬁcation-based intrusion detection, but it
attempts to provide a systematic framework for developing the speciﬁ-
cations/constraints. SHIM does not detect directly the intrusive actions
in an attack, but their manifestations as violations of constraints. In this
paper, we describe the constraint model and the methodology for de-
veloping the constraints. In addition, we present preliminary results on
the constraints developed for host programs and network protocols. By
bounding the behavior of various system components at diﬀerent levels
of abstraction, SHIM has a high chance of detecting diﬀerent types of
attacks and their variants.
1 Introduction
In a large mission-critical system, an advanced monitoring system that can con-
tinuously assess the health and status of a system is highly desirable. Such
monitoring system should provide operators with prompt alerts on system ab-
normalities (e.g., intrusions, faults, or operator errors) that could lead to system
failures so that appropriate actions can be performed to avert emerging prob-
lems. This paper presents an approach to health monitoring of computer systems
focusing on security aspects. The approach employs a hierarchy of constraints
that models the valid (or correct) behavior of a system at various levels of ab-
straction. The approach can detect intrusions or errors that could cause security
failures.
(cid:1) This research is supported by Defense Advanced Research Project Agency (DARPA)
under contract F30602-00-C-0210.
W. Lee, L. M´e, and A. Wespi (Eds.): RAID 2001, LNCS 2212, pp. 190–203, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001
System Health and Intrusion Monitoring Using a Hierarchy of Constraints
191
Traditionally, automatic detection of intrusions is done following one of two
methods. First, intrusions can be recognized by looking for features that match
a pattern associated with malicious behavior [1,2]. One collects, in advance,
the signatures of suspicious events and monitors for them. While this method
can detect attacks with fairly low false alarms, it has the disadvantage of not
being able to handle previously unseen types of attacks. In the second method,
a statistical proﬁle of normal behavior is accumulated over time. Then, alerts
are generated for every unusual event not consistent with the proﬁle [3]. While
this method can potentially detect new and previously unseen attacks, it triggers
indiscriminately on any new behavior, malicious or not, resulting in unacceptably
high false alarm rates [4].
A third approach is a speciﬁcation-based approach in which the correct, al-
lowed behavior of a system is speciﬁed and events not matching the speciﬁcation
generate an alert. New attacks will be detected, and unusual, but perfectly cor-
rect behavior will not generate spurious false alarms. Previously, speciﬁcation-
based techniques mostly focus on monitoring of programs [5,6,7].
Our approach extends existing speciﬁcation-based techniques to constrain
behavior of various components in a distributed system. In particular, we create
constraints at various levels of abstraction and on diﬀerent entities in a system,
including programs, protocols, hosts, system services, network services, as well
as the whole enclave. The constraints capture static behavior, dynamic behav-
ior, and time-critical behavior of the components. The constraints are devel-
oped systematically from a high-level system policy, system semantics, security
principles, historical behavior of the system, and generic knowledge of intru-
sions/vulnerabilities. The constraints will be checked at run time for unexpected
behavior. The constraints also provide hints on the possible consequences (e.g.,
object damaged) if the constraints are violated. Our approach does not detect
directly the intrusive actions in an attack, but it detects their manifestations
as violations of constraints. Just as hardware faults or software bugs manifest
themselves as errors in applications or operating systems, intrusive actions of-
ten cause security violations in the forms of invalid uses or changes to critical
data, invalid program behavior, invalid protocol transactions, and invalid re-
source usage. By imposing constraints on the system behavior at various levels
of abstraction, SHIM has a high chance of detecting attacks.
In Section 2, we provide some motivation of our approach by describing some
attacks and their possible variants. It also provides some insight into accurate
detection of these attacks. Section 3 describes the constraint model and the
methodology for developing the constraints. Next, we present some preliminary
results on the developed constraints in Section 4. Last, we provide conclusions
and suggest possible future work in Section 5.
2 Detecting the Variants and the Unknown
One of the most diﬃcult problems in intrusion detection is accurate detection
of all possible variations of known attacks and new types of attacks. Given a
192
C. Ko et al.
speciﬁc attack scenario or an attack script, it is relatively easy to develop the
signatures/rules that can catch the particular attack. While the rules can detect
novice attackers who run the script directly, experienced attackers usually twist
the steps to evade detection by intrusion detection systems. In this section, we
discuss several existing attacks and their possible variants.
2.1 Attacks on FTP Servers
The ﬁrst attack is related to a vulnerability in the wu-ftp 2.42 FTP daemon [8].
In this attack, the intruder establishes a connection to a machine that has the
speciﬁc FTP daemon running and sends a carefully crafted message containing
the attacker’s code to overﬂow a buﬀer, causing the daemon to execute a shell
(/bin/sh) for the attacker.
This attack is observable at diﬀerent levels. At the network level, there are
network packets that being transmitted from the attacking machine to the victim
machine. At the host level, one could observe one or more read() system calls
that read the attacker’s message. Also, one could observe some change in the
behavior of the FTP daemon after it has been tricked to execute the injected
code.
One could easily detect such attack by monitoring the network. Shown below
are the rules for SNORT [9] for detecting such attack. Basically, the rules look
for the sequence of bytes (highlighted) in the network packets associated with
the speciﬁed connection.
alert tcp !$HOME NET any -> $HOME NET 21
(msg:"OVERFLOW-FTP-x86linux-adm";flags:PA; content:"|
31 c0 31 db b0 17 cd 80 31 c0 b0 17 cd 80|";)
alert udp !$HOME NET any -> $HOME NET any
(msg:"IDS181 - OVERFLOW-NOOP-X86"; content:"|9090 9090
9090 9090 9090 9090 9090 9090|";)
alert tcp !$HOME NET any -> $HOME NET any
(msg:"OVERFLOW-LinuxCommonTCP";flags:PA; content:"|90
90 90 e8 c0 ff ff ff|/bin/sh";)
The ﬁrst signature is crafted to detect the use of a publicized exploit script
(ADMwuftp.c) for the vulnerability. It looks for a speciﬁc byte sequence (Hex-
code 31 c0 ...) that is presented in the message sent by the exploit script to
ﬁll up the buﬀer in the FTP daemon. The second signature looks for a pat-
tern (a sequence of 0x90 characters that represent the NOP operations for the
Intel CPUs) that usually presents in a buﬀer-overﬂow exploitation. The third
signature looks for a common character sequence (for executing a shell such as
/bin/sh) in the code injected by attackers.
System Health and Intrusion Monitoring Using a Hierarchy of Constraints
193
It is very easy to create stealthy attacks to escape detection by these SNORT
rules. Several techniques, such as changing the order of the instructions, using
diﬀerent instructions for the same objective, using diﬀerent registers in instruc-
tions, or even encrypting part of the message, can be used to twist the attack
[10]. It is very diﬃcult to write SNORT rules to detect all possible attack vari-
ants that exploit the vulnerability. Nevertheless, the chance of detection could be
improved by monitoring the activity at the network level, the host level, and the
application level, as advocated by our approach. For example, the constraints
presented in Section 4 can detect diﬀerent attacks to the FTP daemon using
host audit trails.
2.2 Attacks on Privileged Programs
This subsection describes a vulnerability in the 4.2 BSD UNIX mail program
located in the /bin directory (hereafter binmail) and several related intrusions
that exploit this and similar vulnerabilities [1]. Binmail is the back-end mailer
program in the mail subsystem used for delivery of mail messages. To deliver a
message to a user, binmail appends the message directly to a user’s mail-box ﬁle,
located in the mail spool directory. After that, binmail changes the ownership
of the mail-box ﬁle to the user to ensure that the ﬁle is accessible by the user.
Table 1. An Example of an Intrusion Expoliting /bin/mail.
Step
1.
2.
3.
4.
5.
6.
Command
cp /bin/csh /var/spool/mail/root
chmod 4755 /var/spool/mail/root
touch x
mail root ”,
which should be owned by “username” and readable and writeable only by the
owner. The attacker can do that only when there is no unread mail of root so that
the mail-box ﬁle of root does not exist.
194
C. Ko et al.
It is straightforward to encode this sequence of operations as expert rules in
a rule-based misuse detection system. However, it is not trivial to identify all
variants of this intrusion.
Table 2 and Table 3 present variations of the intrusion, both of which create
a counterfeit root’s mail-box ﬁle that is publicly executable and has the setuid
bit on before the mail utility is invoked to deliver a mail message to root. In
Table 2, the attacker creates a copy of csh and names it after root’s mailbox ﬁle
(/var/spool/mail/root) in step 1. In step 2, the attacker creates an alias of the
mail-box ﬁle by making a symbolic link pointing to the ﬁle. In step 3, instead
of changing the permission mode of the counterfeit mail-box ﬁle directly, the
attacker invokes chmod with the symbolic link as parameters, in eﬀect changing
the permission mode of the mail-box ﬁle to setuid and publicly executable. In
step 4, the attacker invokes mail and interactively keys in an empty message.
Table 2. First Variant of an Intrusion Exploiting /bin/mail.
Command
Comment
cp /bin/csh /varr/spool/mail/root
ln -s /tmp/mroot /var/spool/mail/root Create an alias of the mail ﬁle
chmod 4777 /tmp/mroot
mail root < x
Create a counterfeit root’s mail ﬁle
root and give input non-
Make the mail ﬁle setuid
Mail
interactively
Execute setuid-to-root shell
Prompt of root shell
Step
1.
2.
3.
4.
5.
6.