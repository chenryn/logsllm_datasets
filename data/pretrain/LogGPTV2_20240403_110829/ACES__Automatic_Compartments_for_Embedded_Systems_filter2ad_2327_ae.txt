and measure receiving 1,000 packets. This enables an
accurate proﬁling of ACES’ overhead, omitting the ini-
tialization of the board, which performs many compart-
ment transitions.
The performance results for the three policies are
shown in Figure 5.
It shows the total overhead, along
with the breakdown of portion of time spent executing
compartment entries, compartment exits, and emulating
instructions. Perhaps unintuitive, the time spend exe-
cuting these components does not always contribute to
a proportional increase in total execution time. This is
because the programs block on IO. ACES changes what
it does while blocking, but not how long it blocks. This
is particularly evident on PinLock which has no measur-
able increase in total execution time for any policy, yet
executes over 12,000 compartment entries and exits with
the Na¨ıve and Optimized Filename policies. This is be-
cause the small percentage of the time it spends execut-
ing compartment switches is hidden by the time spent
waiting to receive data on the relatively slow serial port.
The other applications wait on the Ethernet, uSD card, or
LCD. In some cases, the overhead is not all attributed to
compartment entries, exits or emulated instructions, this
is because our instrumentation causes a small amount of
overhead (about 60 instructions) on each event. In the
case of LCD-uSD with the Na¨ıve policy which executes
over 6.8 million compartment entries, exits, and emula-
tor calls this causes signiﬁcant overhead.
Looking across the policies and applications we see
that the Na¨ıve Filename policy has the largest impact on
execution. This is because the programs are written us-
ing many levels of abstraction. Consider TCP-Echo: it
is written as an application on top of the Lightweight IP
76    27th USENIX Security Symposium
USENIX Association
Library (LwIP) implementation of the TCP/IP stack [19]
and the boards HAL. LwIP uses multiple ﬁles to imple-
ment each layer of the TCP stack and the HAL uses a
separate ﬁle to abstract the Ethernet peripheral. Thus,
while the application simply moves a received buffer to a
transmit buffer, these function calls cause frequent com-
partment transitions, resulting in high overhead. The
Optimized Filename policy improves the performance
of all applications by reducing the number of compart-
ment transitions and emulated instructions. This is ex-
pected as it optimizes the Na¨ıve policy by moving func-
tions to compartments in which it has high connectiv-
ity, thus reducing the number of compartment transi-
tions. This also forms larger compartments, increasing
the likelihood that needed data is also available in the
compartment reducing the number of emulated calls. Fi-
nally, the Peripheral policy gives the best performance,
as its control-ﬂow aware compartmentalization creates
long call chains within the same compartment. This re-
duces the number of compartment transitions. The stark
difference in runtime increase between policies high-
lights the need to explore the interactions between poli-
cies and applications, which ACES enables.
6.4 Memory Overhead
In addition to runtime overhead, compartmentalization
increases memory requirements by:
including ACES’s
runtime library (compartment switcher, and micro-
emulator), adding metadata, adding code to invoke com-
partment switches, and losing memory to fragmentation
caused by the alignment requirements of the MPU. We
measure the increase in ﬂash, shown in Figure 6, and
RAM, show in Figure 7, for the test applications com-
piled with ACES and compare to the baseline breaking
out the overhead contributions of each component.
ACES increases the ﬂash required for the runtime li-
brary by 4,216 bytes for all applications and policies.
LCD-uSD
Animation
TCP-Echo
Baseline
Frag
Code
Runtime
Metadata
FatFs-uSD
PinLock
B
K
160
140
120
100
80
60
40
20
0
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
(1) Naive Filename     (2) Filename     (3) Peripheral
Figure 6: Flash usage of ACES for test applications
TCP-Echo
Baseline
Frag
Runtime
LCD-uSD
Animation
B
K
50
40
30
20
10
0
FatFs-uSD
PinLock
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
)
1
(
)
2
(
)
3
(
(1) Naive Filename     (2) Filename     (3) Peripheral
Figure 7: RAM usage of ACES for test applications
Fragmentation accounts for a signiﬁcant amount of the
increase in ﬂash usage ranging from 26% of the baseline
on Optimize Filename LCD-uSD to 70% on Peripheral
PinLock. Fragmentation can also cause a large increase
in RAM usage. This suggests that compartmentalization
policies may need to optimize for fragmentation when
creating compartments to reduce its impact. The MPU
in the ARMv8-M architecture only requires regions be a
multiple of 32 bytes and aligned on a 32 byte boundary.
This will nearly eliminate memory lost to fragmentation
on this architecture. For example, Peripheral TCP-Echo
would only lose 490 bytes of ﬂash and 104 bytes of RAM
to padding versus 38,286 bytes and 17,300 bytes to frag-
mentation. Metadata and switching code increase are the
next largest components, and are application and policy
dependent. They increase with the number of compart-
ment transitions and size of emulator white-lists.
Figure 7 shows the increase in RAM usage caused
by ACES. Its only contributors to overhead are the run-
time library and fragmentation. The runtime library
consists of a few global variables (e.g., compartment
stack pointer), the compartment stack, and the emulator
stack. The compartment stack—ranges from 96 bytes
(Peripheral PinLock) to 224 bytes (Optimized Filename
Animation)—and the emulator stack uses 400 bytes on
all applications. Like ﬂash, fragmentation can also cause
a signiﬁcant increase in RAM usage.
6.5 Comparison to Mbed µVisor
To understand how ACES compares to the state-of-the-
art compartmentalization technique for bare-metal sys-
tems, we use the Mbed µVisor from ARM [39]. Mbed
µVisor is a hypervisor designed to provide secure data
and peripheral isolation between different compartments
in the application (the equivalent term to compartment
that µVisor uses is “box”).
It is linked as a library to
Mbed OS [38] and initialized at startup.
USENIX Association
27th USENIX Security Symposium    77
Table 3: Comparison of security properties between
ACES and Mbed µVisor
Tool
Technique
DEP
Compartmentalization Type
Code
Data
Peripheral
ACES
Automatic
X
Mbed µVisor
Manual
✗(Heap)
X
✗
X
X
X
X
Table 3 shows a comparison of security protections
provided by ACES and Mbed µVisor. Mbed µVisor re-
quires manual annotation and speciﬁc µVisor APIs to be
used to provide its protections, while ACES is automatic.
Additionally, Mbed µVisor does not enforce code iso-
lation, as all code is placed in one memory region that
is accessible by all compartments. Furthermore, Mbed
µVisor does not enforce DEP on the heap. Both en-
force data and peripheral isolation among compartments.
ACES enforces ﬁne-grained compartmentalization by al-
lowing code and data to be isolated within a thread, while
Mbed µVisor requires a thread for each compartment
with no isolation within a thread. Another advantage
of ACES over Mbed µVisor is its compartments are not
hard-coded into the application, enabling them to be au-
tomatically determined from high-level policies.
We compare ACES and Mbed µVisor by porting Pin-
Lock to Mbed µVisor. With µVisor, we used two com-
partments, which logically follows the structure of the
application—one compartment handles the IO commu-
nication with the serial port and the other handles the
computation, i.e., the authentication of the pincode read
from the serial port. The ﬁrst has exclusive access to
the serial port reading the user’s pincode. The second
compartment cannot access the serial port but can only
request the entered pin from the ﬁrst compartment. The
authenticator then computes the hash and replies to the
ﬁrst compartment with the result. Mbed µVisor requires
speciﬁc APIs and a main thread for each compartment,
thus there is signiﬁcant porting effort to get this (and any
other application) to execute with µVisor. Table 4 shows
a comparison between ACES and Mbed µVisor for Flash
usage, RAM usage, runtime, and number of ROP gad-
gets. Since Mbed µVisor requires an OS, Flash and
memory usage will be inherently larger. It allocates gen-
erous amounts of memory to the heap and stacks, which
can be tuned to the application. For our comparison, we
dynamically measure the size of the stacks and ignore
heap size, thus under-reporting µVisor memory size. Av-
eraged across all policies, ACES reduces the Flash usage
by 58.6% and RAM usage by 83.9%, primarily because
it does not require an OS.
ACES runtime is comparable (5.0% increase), thus
ACES provides automated protection, increased com-
partmentalization, and reduced memory overhead with
little impact on performance.
We investigate the security implications of having
Table 4: Comparison of memory usage, runtime, and
the number of ROP gadgets between ACES and Mbed
µVisor for the PinLock application.
Policy
Flash RAM Runtime
# ROP Gadgets
# Cycles Total Maximum
Average
ACES-Na¨ıve Filename 33,504
4,712
4,640
33,008
ACES-Opt. Filename
ACES-Peripheral
34,856
5,136
Mbed µVisor
81,604 30,004
234 (36.0%)
526M 525
247 (32.4%)
525M 671
525M 645
204 (31.3%)
501M 5,997 5,997 (100%) 5,997 (100%)
345 (53.2%)
341 (44.8%)
345 (47.2%)
code compartmentalization by analyzing the number of
ROP gadgets using the ROPgadget compiler [46]. With-
out code compartmentalization, a memory corruption
vulnerability allows an attacker to leverage all ROP gad-
gets available in the application—the “Total” column
in Table 4. Code compartmentalization conﬁnes an at-
tacker to ROP gadgets available only in the current com-
partment. Averaged across all policies, ACES reduces
the maximum number of ROP gadgets by 94.3% over
µVisor.
7 Related Work
Micro-kernels: Micro-kernels [35, 28] implement least
privileges for kernels by reducing the kernel to the min-
imal set of functionality and then implement additional
functions as user space “servers”. Micro-kernels like
L4 [35] have been successfully used in embedded sys-
tems [20]. They rely on careful development or for-
mal veriﬁcation [28] of the kernel and associated servers
to maintain the principle of least privilege. ACES cre-
ates compartments within a single process, while micro-
kernels break a monolithic kernel into many processes.
In addition, the process of creating micro-kernels is man-
ual while ACES’ compartments are automatic.
Software Fault Isolation and Control-ﬂow Integrity:
Software fault isolation [50, 51] uses checks or pointer
masking to restrict access of untrusted modules of a
program to a speciﬁc region. SFI has been proposed
for ARM devices using both software (ARMor) [55],
and hardware features (ARMlock) [56]. ARMlock uses
memory domains which are not available on Cortex-M
devices. ACES works on micro-controllers and uses the
MPU to ensure that code and data writes are constrained
to a compartment without requiring pointer instrumenta-
tion. It also enables ﬂexible deﬁnitions of what should be
placed in each compartment whereas SFI assumes com-
partments are identiﬁed a priori.
Code Pointer Integrity [31] prevents memory corrup-
tions from performing control ﬂow hijacks by ensur-
ing the integrity of code pointers. Control-ﬂow in-
tegrity [1, 34, 53, 54, 41, 10] restricts the targets of in-
direct jumps to a set of authorized targets. This restricts
the ability of an attacker to perform arbitrary execution,
however arbitrary execution is still possible if a sufﬁ-
78    27th USENIX Security Symposium
USENIX Association
ciently large number of targets are available to an at-
tacker. ACES enforces control-ﬂow integrity on control
edges that transition between compartments. It also re-
stricts the code and data available in each compartment,
thus limiting the exposed targets at any given time.
Kernel and Application Compartmentalization: There
has been signiﬁcant work to isolate components of
monolithic kernels using an MMU [57, 52, 18]. ACES