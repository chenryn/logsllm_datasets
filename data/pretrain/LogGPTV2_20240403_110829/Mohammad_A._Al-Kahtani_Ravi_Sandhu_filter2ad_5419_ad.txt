to 
A change in u’s attributes or in the authorization rules 
may make u no more able to satisfy rulek, and thus, u is no 
more authorized  to  ¬rh.  Also,  u  could  become  unable  to 
satisfy  rulek  either  because  it  was  modified  or  deleted. 
This  results  in  changing  his  state  from  N  back  to  P,  or 
from R to D. 
  Enforcement  Requirements. Enforcing 
the 
4.3.6 
negative  authorization  requires  that  the  system  which 
to  all 
implements  RB-RBAC  has  access 
relevant 
attributes.  This  requirement  affects 
the  architectural 
options that can be used to enforce RB-RBAC-ve since the 
system  must  either  have  these  attributes  under  its  control 
or be granted access to them when needed. If this is not the 
case, then users may evade the model. Consider rules rule2
and rule3 in Figure 4. If these rules were in public domain 
or  were  somehow  unconcealed, 
then  users  whose 
attributes  satisfy  both  ae2  and  ae3  can  avoid  rule3  simply 
by  not  providing  the  attributes  necessary  to  satisfy  ae3.
Though  this  may  not  be  a  problem  under  PTP  policy,  it 
amounts  to  a  security  breach  under  DTP  policy.  If  RB-
RBAC  has  access  to  users’  attributes,  DTP  policy  can  be 
enforced.  
4.3.7 Monotonicity. RB-RBAC-ve permits specifying the 
rules such that the set of roles that a user is authorized to 
decreases  as  the  number  of  rules  he  satisfies  increases. 
Suppose  that  we  have  ((cid:329)rg) ∈ RHS(aei)  and  {rg ,  rh} ⊆
RHS(aej). If a user u satisfies rulej, then he is authorized to 
rg and  rh.  In  case  of  DTP,  if  u satisfies  both  rules,  he  is 
authorized to rh only. The above shows that RB-RBAC-ve 
is non-monotonic.  
5. Discussion and Future Work 
We  have  shown  how  to  modify  RB-RBAC  so  that  it 
allows  negative  authorization.  Negative  authorization  in 
the context of RBAC is a novel concept. RB-RBAC-ve is 
the  first  RBAC  model  that  provides  detailed  analysis  of 
different  aspects  of  negative  authorization  in  an  RBAC 
context. This analysis includes providing semantics for the 
negative  authorization  in  this  new  territory,  identifying 
cases  of  conflict,  suggesting  several  new  conflict 
resolution  policies  and  analyzing  the  impact  of  negative 
authorization  on 
IRH,  GRH  and  any  RB-RBAC 
enforcement architecture.  
The  conflict  resolution  policies  presented  requires 
further  analysis.  For  example,  in  the  Labeled  Roles 
resolution policy, there are some subtle issues that need to 
be  analyzed  further.  Suppose  we  have  two  roles  rg  and  rh
such  that  rg (cid:149)  rh.  Suppose  also  that  we  assign  the  labels 
DTP  and  PTP  to  rg  and  rh  respectively.  If  u  satisfies 
authorization rules such  that  he has conflict in both roles, 
then  based  on  the  labels  assigned  to  the  roles,  u  is 
authorized  to  rh  but  not  to  rg.  This  reduces  the  privileges 
available to u, which is not problematic since senior roles 
are  naturally  assigned  more  permission  and,  as  thus,  it  is 
wise  to  err  on  the  side  of  denial  in  case  of  conflict. 
However, assume that the labels were reversed and that u
has conflict in both roles. The resolution will be such that 
u  is  authorized  to  rg  but  not  to  rh,  which  is  very 
problematic  since  rh’s  permissions  are  a  subset  of  rg’s 
permissions.  To  follow  this  policy  strictly,  we  need  to 
suspend  this  subset  of  permissions,  which  may  render  rg
deficient  or  even  meaningless.  We  have  not  found  any 
practical example in which this scenario is applicable. So, 
when  assigning  labels  to  roles,  we  require  that  the  roles 
higher  in  the  hierarchy  receive  labels  of  equal  or  higher 
level  than  their  juniors.  We  assume  that  DTP  label  is 
higher 
is 
reasonable  since  senior  roles  are  naturally  assigned  more 
permission, so they need more protection. 
than  PTP.  We  believe 
this  requirement 
Another  candidate  for  future  work  is  introducing  the 
concept  of  parameterized  roles  to  RB-RBAC  family  and 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
8
analyzing  its  impact  on  different  aspects  of  the  models 
such as user authorization, IRH. 
6. References 
[1]  R.  Sandhu,  E.  Coyne,  H.  Feinstein  and  C.  Youman,  “Role-
Based Access Control Model”, IEEE Computer, 29(2), 
Feb. 1996.
 [2] R. Sandhu, D. Ferraiolo, and R. Kuhn, “The NIST Model for 
Role-Based  Access  Control:  Towards  a  Unified 
Standard”,  In  Proceedings  of  the  fifth  ACM  workshop 
on Role-based access control table of contents, Berlin, 
Germany,  2000, Pages: 47 - 63.  
[3] D. Ferraiolo, R. Sandhu, S. Gavrila , and R. Kuhn, “Proposed 
NIST Standard for role-based access control: towards a 
unified standard”, In ACM Transaction on Information 
and  System  Security  (TISSEC),  Vol.  4,  Number  3,
August 2001.
 [4] D. Ferraiolo, J. Barkley, and R. Kuhn, “A Role Based Access 
Control Model and Reference Implementation Within a 
Corporate Intranet”, ACM Transactions on Information 
and Systems Security, 2(1):34-64, February 1999. 
[5] J. Park, R. Sandhu and G. Ahn, “Role-based Access Control 
on  the  Web”,  In    ACM  Transactions  on  Information 
and System Security, Vol. 4, No 1, 2001.  
[6]  Joon  S.  Park,  Ravi  Sandhu,  and  SreeLatha  Ghanta.  “RBAC 
on the Web by Secure Cookies” In Proceedings of the 
IFIP  WG11.3  Workshop  on  Database  Security,
Chapman & Hall, July, 1999. 
 [7]  A.  Kern,  A.  Schaad  and  J.  Moffett,  “An  Administration 
Concept for the Enterprise Role-Based Access Control 
Model”, SACMAT’03, June 1-4, Como, Italy.
 [8] C. Ramaswamy and R. Sandhu, “Role-Based Access Control 
in  Commercial  Database  Management 
Features 
Systems”, NISSC 1998.  
[9]  A.  Kern,  “Advanced  Features  for  Enterprise-Wide  Role-
Based  Access  Control”,  In  Proceedings  of  the  18th 
Annual  Computer  Security  Applications  Conference,
Las Vegas, Nevada, USA, December, 2002, pages 333-
342. 
 [10]  M.  Al-Kahtani  and  R.  Sandhu,  “A  Model  for  Attribute-
Based  User-Role  Assignment”,  In  Proceedings  of  the 
18th  Annual  Computer 
Security  Applications 
Conference,  Las  Vegas,  Nevada,  December  9-13, 
2002.  
[11] M. Al-Kahtani and R. Sandhu, “Induced Role Hierarchies 
with  Attribute-Based  RBAC”, In  Proceedings  of  the 
8th  ACM  Symposium  on  Access  Control  Models  and 
Technologies  (SACMAT),  Villa  Gallia,  Como,  Italy, 
June 2-3, 2003. 
[12] S. Jajodia,  P. Samarati, M. Sapino and V. 
Subrahmanian, ‘‘Flexible support for Multiple 
Access Control Policies’’ , In ACM Transactions on 
Database Systems, Vol. 26, No. 2, June 2001. 
 [13] E. Bertino, P. Samarati, and S. Jajodia, ‘‘An Extended 
Authorization  Model  for  Relational  Databases”,  In 
IEEE  Transactions  On  Knowledge  and  Data 
Engineering, Vol. 9, No. 1, January-February 1997. 
 [14]  E.  Bertino,  P.  Samarati, 
and  S. 
in 
Jajodia,  
‘‘Authorizations 
Database 
Management  Systems’’, In Proceedings of the 1st 
ACM  Conference  on  Computer  and 
Communications Security  (Fairfax,  VA.Nov.  3---5). 
ACM, New York, pp. 130---139. 
Relational 
 [15] S. Jajodia, P. Samarati and V.S. Subrahmanian, “A logical 
In 
Language 
Proceedings of the 1997 IEEE Symposium on Security 
and Privacy, 1997. 
for  Expressing  Authorizations”, 
 [16] M. Al-Kahtani, “A Family of Models for Rule-Based User-
Role  assignment”,  A  Ph.D.  dissertation  submitted  to  
George Mason University, 2004.
[17]  R.  Sandhu,  V.  Bhamidipati,  and  Q.  Munawer,  “The 
ARBAC97  Model  for  Role-based  Administration  of 
Roles”,      ACM  Transactions  on  Information  and 
System  Security.  Vol.2,  No.1,  Feb.  1999,  pages  105-
135. 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
9
Appendix A: Relevant Definitions from RB-RBAC
U, R, and P, imported from RBAC96, are the sets of users, roles, and permissions respectively.  In addition RB-RBAC 
Model A has the following components. 
2. A  set  of  attribute  expressions  AE.    Elements  of  AE  are  denoted  as  ae ∈  AE  (See  the  language  in  section 
3.2.5.1). 
3. A  set  of  authorization  rules  where  each  rule  rulei  is  written  as:  aei (cid:159)RHS  where  (cid:159)  is  read  “generates”  or 
“yields” and RHS ⊆ R. 
Function RHS(aei) = RHS returns the set of roles that user u who satisfies aei is authorized to activate. 
4.
5. U_AE = {(u, aei)| (u, aei) ∈U×AE ∧ u satisfies aei}, (u, aei) ∈U_AE means that u is authorized to RHS(aei).
6.
IR is the set of roles produced by all authorization rules:  
IR = { rg | (∃aei) [aei
∈ AE ∧ rg
∈ RHS(aei)}
7. URAuth = {(u,r)| (∃rulei)[(u, aei) ∈U_AE ∧ r ∈RHS(aei)}. For the sake of convenience, we will call the right 
hand side of this definition as "A". We will refer to it in future definitions to simplify the relation of different 
models to each other. 
The concept of session and the functions sessions and user are imported from RBAC96:   
8.
9.
10.
11.
12.
sessions : U →2S, a function mapping each user ui to a set of sessions  
user : S → U, a function mapping each session si to the single user user(si) (constant for the session's lifetime)  
URA ⊆ URAuth, URA = {(u,r)| (u, r) ∈ URAuth ∧ u is currently activate wrt r } 
URD ⊆ URAuth, URD = {(u,r)| (u, r) ∈ URAuth, ∧ u has activated r at least once but is not currently active 
wrt r } 
URP ⊆ URAuth, URP = {(u,r)| (u, r) ∈ URAuth ∧ u has never activated r}
URAuth = URA ∪ URD ∪ URP 
URA ∩ URD = ∅
URA ∩ URP = ∅
URD ∩ URP = ∅
URN ⊆ U×AE, URN = {(u,r)| (u, r) ∉ URAuth ∧ u has not activated r in the past} 
URR ⊆ U×AE, URR = {(u,r)| (u, r) ∉ URAuth ∧ u had activated r at least once in the past } 
13.
14.
15. User_State(u, r) = 
(u, r) ∈ URP: User_State(u, r) = P. 
(u, r) ∈ URA: User_State(u, r) = Act 
(u, r) ∈ URD: User_State(u, r) = D. 
(u, r) ∈ URR: User_State(u, r) = R. 
(u, r) ∈ URN: User_State(u, r) = N. 
Case:
a.
b.
c.
d.
e.
f. Del: u is deleted by SSO. 
These states are mutually exclusive.  The state Del is a terminal state. 
roles : S → 2R, a function mapping each session si to a set of roles roles(si) ⊆ {r | (user(si), r) ∈ URAuth} 
16.
(which can change with time) 
17.
18.
19.
20.
can_assume relation: Specification is provided in [16] 
URAuthwith can_assume = {(u,r)| (∃rulei)[(u, aei) ∈U_AE ∧ r ∈RHS(aei)
∨  (∃rulej)  [    (u,  aej)∈  U_AE  ∧ r’ ∈RHS(aej) ∧ can_assume(r’, r, t, d  )  ∧ can_assume  has  not 
expired ] )} 
Let's call the second term in the right hand side B, and hence we say: 
URAuthwith can_assume = A ∨ B 
≥ rulej) ↔ (aei (cid:314) aej).
(rulei
 IRH ⊆ IR x IR is a relation such that rg is senior to rh ( (rg, rh) ∈ IRH is also written as rg
IRH= {(rg ,rh) | (∀rulei) [(aei(cid:159) rg) → (∃rulej) [rulei
Intuitively, this means rg is senior to rh in IRH if every rule that produces rg is senior to a rule that produces rh.
IRH = {(rg ,rh) | (u, rg) ∈URAuth  → (u, rh) ∈URAuth} 
21.
22. IR  is the set of  equivalence classes that results from defining relation “mutually senior to one another” on IR 
such that:  
≥ rulej (cid:513) aej(cid:159) rh]]} 
≥ rh ):
23.
[ri] = { rj | ri and rj are mutually senior to one another} 
IRH  = {([rg] ,[rh]) | ∀u∀rg
∈[rh] [((u,rg) ∈ URAuth → (u,rh) ∈ URAuth)  
∈[rg]∀rh
∧ ((u,rh) ∈ URAuth → (u,rg) ∈ URAuth)]} 
24.
IRH and GRH are the sets of roles in IRH and GRH respectively.  
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
10
Appendix B: Syntax Diagrams of ASLA Language 
Rule
Attribute Expression
Role
Attribute Expression
Term
¬
Attribute_Expression
Attribute_Expression
∧
Attribute_Expression
(
Attribute_Expression
∧
Attribute_Expression
)
Term
Attribute
Relation_Operator
Attribute_Value
IN
Enumerated_Set
Roles
Role
{
Role
}
,
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:08:40 UTC from IEEE Xplore.  Restrictions apply. 
11