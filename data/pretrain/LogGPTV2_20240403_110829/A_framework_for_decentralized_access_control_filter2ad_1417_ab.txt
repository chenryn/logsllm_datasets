### D. Implementation

We implemented the policy structure and the access request signing and verification in Go. The current version of the code supports the creation and updates of policies and rules, as well as the functionality to sign and verify both single and multi-signature requests. Additionally, we developed a parser to evaluate expressions using logical operators AND, OR, and NOT. The implementation also includes support for signing with path selection by the requester. The source code is available on GitHub [6]. It is important to note that we did not integrate the access control system with the skipchain architecture in this project.

### IV. Evaluation

After implementing the system, we conducted two types of tests using the Go testing and benchmarking modules. First, we performed unit tests to ensure that all implemented functionalities were correct and worked as expected. Then, we conducted benchmark tests to evaluate the system's performance. We focus on these benchmark tests in this section.

#### A. Single Signature Request Verification

We benchmarked the request verification time for single signature requests. The request verification time is the sum of the signature verification time and the time taken to find the path from the target policy to the requester. We varied the depth of the requester, which refers to the distance between the target policy in the request and the parent policy of the requester. This depth represents the number of levels of checks a verifier must perform to find the path. We varied the depth to investigate its impact on the request verification time.

Figure 7 shows the variation in request verification time with the depth of the requester. Since we use a log scale, the lowest value is set to a value close to zero (0.01). Interestingly, most of the request verification time is spent on signature verification, which takes approximately 385 microseconds and accounts for 92.04% to 99.94% of the total time. Even at a depth of 200, a relatively high scenario for a real-life access control system, path finding takes only about 35 microseconds.

**Figure 7: Benchmarking result for single signature request verification.**

#### B. Multi-Signature Request Verification

Since signature verification is the major factor contributing to request verification time, it significantly impacts multi-signature requests. We measured the verification rate for multi-signature requests, defined as the number of requests verified per second. We created requests with varying numbers of signatures. Figure 8 shows the verification rate for requests with different numbers of signatures, with results for a requester depth of 2 and 10.

We observed a significant reduction in the number of requests that can be verified as the number of signatures increases. This is expected since the signature verification step must be performed for each signature. The depth of the requester does not play a notable role in the verification rate.

**Figure 8: Benchmarking result for multi-signature request verification. Verification rate vs. Number of signatures in request.**

#### C. Signing with Path Selection

In our final benchmark test, we considered the case of a multi-path requester that signs with path selection. Since the path selection process must find all possible paths and return them to the requester, we are interested in determining the time taken for this process. We created a requester with multiple paths from the target policy and performed a path check during signing. We varied the number of paths and examined its impact on the signing rate, defined as the number of requests signed per second.

Figure 9 shows the results for a requester at depths of 2 and 10. The depth value is the same for all paths in this experiment.

We observed that the signing rate decreases rapidly with an increase in the number of paths, from approximately 320,000 at 2 paths to approximately 530 at 500 paths (depth = 2). This is likely due to the need to discover and store all possible paths. The depth also affects the signing rate, possibly due to the overhead of searching and storing paths.

We do not display the verification time here since it is dominated by the signature verification and is similar to the single signature verification case (one signature is verified and one path is searched).

**Figure 9: Benchmarking result in signing with path selection. Signing rate vs. Number of paths of the requester.**

### V. Related Work

Kokoris-Kogias et al. [4] describe a system where a set of trusted servers act as an authority (termed cothority) and manage blockchains that store identity information for users (such as SSH keys). These blockchains, called Identity-Blockchains, have forward and backward links. While backward links are used for ordering between blocks, forward links provide a method for easy verification of changes to the user’s identification data. CISC (CISC Identity Skipchains) [7] is an implementation of the concept described in [4].

Chaniac [5] introduces the concept of skipchains, a combination of skiplists and blockchains, which enables efficient traversal. We use these concepts in designing how our policies can evolve over time.

Maesa et al. [8] outline a blockchain-based access control system that uses the Bitcoin blockchain and XACML policies. In this system, policies are stored on the blockchain in a shorter XACML format, and access rights are transferred via transactions. Policy enforcement follows the XACML standard. FairAccess [9] is an access control framework that aims to provide a blockchain-based access control system for IoT devices. It uses authorization tokens, a scripting language, and the Bitcoin blockchain. Zyskind et al. [10] discuss the possibility of using a blockchain as an access control manager while using off-blockchain storage systems for data. This is further expanded in Enigma [11], a decentralized computation platform. Enigma provides functionality for users to store and run computations on data with privacy guarantees. It uses a blockchain for identity management, access control, and logging.

### VI. Conclusion

In this project, we designed, implemented, and performed basic testing of a policy-based access control model. We introduced functionality for policy creation and updates, access request creation, signing, and verification. Our system allows for easy management of policies, organization of users into groups, and both access control and identity management. The code and API are available on GitHub [6].

#### Future Work

We highlight a few avenues for possible exploration and improvement:

- **Alternatives to the ‘one skipchain per policy’ architecture**: Currently, we consider the one skipchain per policy design. This might not be the most appropriate, especially when the number of policies is large, as maintaining skipchains for many policy objects can be cumbersome. We should explore alternate designs, such as using a skipchain for groups of related policies rather than individual policies, or using collections to group policies.
- **THR operator**: Currently, we only use AND, OR, and NOT operators in expressions. A consideration for a third operator would be THR, a threshold operator of the form {THR: [thrval, S1, S2, S3, ...]}, where thrval is a positive integer. The operation means that a threshold of signatures >= thrval needs to be obtained for the expression to be valid. This is useful for voting on policy updates, where admin subjects must agree on a change to the policy. A more complex expression can be created by introducing the concept of weights, such as {THR: [thrval, S1, weight1, S2, weight2, S3, weight3]}, where weight1 is the weight of subject S1, and so on. Votes for a change would be the sum of the weights of the subjects that agreed to the change.
- **Extensions of attributes**: Currently, the policy model is kept simple to be general and tailored based on the application. However, it might be interesting to explore adding more features to this general model, such as an Environment variable in a Rule to provide a richer set of conditions than can be provided by expressions.
- **Sub-policies and linking to other policies**: In this version of the architecture, policies are relatively simple and consist of a list of rules. We can explore a more advanced architecture where policies can have sub-policies, which then consist of rules. Additionally, it would be interesting to link policies/sub-policies from other policies/sub-policies. Currently, we link policies through the Subject field in a Rule, but it would be feasible to have a policy that contains a list of other policies rather than rules.
- **Versioning and Consistency**: The current implementation of the policies has not been integrated with the skipchain architecture. This is planned for the On-Chain Secrets project. While integration would solve the issue of versioning, we still need to consider the problem of consistency—ensuring that all parties in the system work on the same version of a particular policy. Exploring how consistency can be achieved with different policy versions and access requests/verification is an interesting option.

### References

[1] Pierangela Samarati and Sabrina Capitani de Vimercati. Access control: Policies, models, and mechanisms. In International School on Foundations of Security Analysis and Design, pages 137–196. Springer, 2000.

[2] Vincent C Hu, D Richard Kuhn, and David F Ferraiolo. Attribute-based access control. Computer, 48(2):85–88, 2015.

[3] Sabrina De Capitani di Vimercati, Pierangela Samarati, and Sushil Jajodia. Policies, models, and languages for access control. In International Workshop on Databases in Networked Information Systems, pages 225–237. Springer, 2005.

[4] Lefteris Kokoris-Kogias, Linus Gasser, Ismail Khoffi, Philipp Jovanovic, Nicolas Gailly, and Bryan Ford. Managing identities using blockchains and cosi. In 9th Workshop on Hot Topics in Privacy Enhancing Technologies (HotPETs 2016), 2016.

[5] Kirill Nikitin, Eleftherios Kokoris-Kogias, Philipp Jovanovic, Nicolas Gailly, Linus Gasser, Ismail Khoffi, Justin Cappos, and Bryan Ford. Chainiac: Proactive software-update transparency via collectively signed skipchains and verified builds. In 26th USENIX Security Symposium (USENIX Security 17), pages 1271–1287, 2017.

[6] Sandra Siby. Decentralized Identity Access Control. https://github.com/sandrasiby/cothority-template, 2017.

[7] DEDIS. CISC: Decentralized Identity Skipchains. https://github.com/dedis/cothority/tree/master/cisc, 2017.

[8] Damiano Di Francesco Maesa, Paolo Mori, and Laura Ricci. Blockchain based access control. In IFIP International Conference on Distributed Applications and Interoperable Systems, pages 206–220. Springer, 2017.

[9] Aafaf Ouaddah, Anas Abou Elkalam, and Abdellah Ait Ouahman. FairAccess: A new blockchain-based access control framework for the Internet of Things. Security and Communication Networks, 9(18):5943–5964, 2016.

[10] Guy Zyskind, Oz Nathan, et al. Decentralizing privacy: Using blockchain to protect personal data. In Security and Privacy Workshops (SPW), 2015 IEEE, pages 180–184. IEEE, 2015.

[11] Guy Zyskind, Oz Nathan, and Alex Pentland. Enigma: Decentralized computation platform with guaranteed privacy. arXiv preprint arXiv:1506.03471, 2015.