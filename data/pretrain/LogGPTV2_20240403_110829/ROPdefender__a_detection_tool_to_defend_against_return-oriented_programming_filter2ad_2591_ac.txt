inspection routines Ins IsCall(INS ins) and Ins IsRet(INS
ins) provided by the Pin API to determine if the tail in-
struction of the current basic block is a call or a return
instruction. If the instruction is a call instruction, then we
invoke an analysis routine (step 2a) that pushes the return
address onto the appropriate shadow stack. Otherwise, if
the instruction is a return instruction, then a second anal-
ysis routine checks if the return address the program wants
to use equals to the address at the top of the corresponding
shadow stack (step 3a).
4.2 Handling Exceptions
As mentioned in Section 3, the common calling conven-
tion assumes that an invoked function will always return
to the address pushed onto the stack by the calling func-
tion. However, our experiments have shown that there are
a few exceptions violating this calling convention. These
exceptions can be categorized into three classes: (Class 1)
A called function does not return, i.e., the control is trans-
ferred out of the function before its return instruction has
been reached. (Class 2) A function is invoked without ex-
plicitly using a call instruction. (Class 3) A diﬀerent return
address is computed while the function is running.
Due to all these exceptions, developing an eﬃcient and
also practical return address protection tool is not straight-
forward. Although many proposals address the ﬁrst class of
exceptions (e.g., [15, 16, 29, 55, 37]), there exists no proposal
addressing Class 2 and 3.
In contrast, our ROPdefender
handles all above mentioned classes of exceptions. Note that
the exceptions described below are the most well-known ones
(for instance, ROPdefender does not raise any false positive
for a whole SPEC CPU benchmark run), and there may be
further exceptions in practice which may raise false positives.
However, we believe that additional exception handling can
be easily integrated into ROPdefender based on the tech-
niques discussed below.
Class 1: Setjmp/Longjmp.
For the ﬁrst class consider a chain of various function
calls: A calls B, B calls C, and C calls D. According to
the calling convention, all functions must return explicitly
after completing their task: D returns to C, C to B, and B
to A. However, the system calls setjmp and longjmp allow
to bypass multiple stack frames, which means that before
the return instruction of D has been reached, execution is
redirected back to A, although B, C, and D have not yet
returned. Hence, ROPdefender expects the return of D, but
the program issues the return of A. To avoid a false positive,
ROPdefender uses a strategy similar to RAD [15] popping
continuously return addresses oﬀ the shadow stack until a
match is found or until the shadow stack is empty. The
latter case would indicate a ROP attack.
Class 2: Unix signals and lazy binding.
A typical example for the second class are Unix signals.
Generally, signals are used in Unix-based systems to no-
tify a process that a particular event (e.g., segmentation
fault, arithmetic exception, illegal instruction, etc.) have
occurred. Once a signal has been received, the program
invokes a signal handler. If such a signal handler is imple-
mented through the signal function, then execution is redi-
rected to the handler function without a call instruction.
Hence, if the signal handler returns, ROPdefender would
raise a false positive, because the return address of the han-
dler function has not been pushed onto the shadow stack.
However, the relevant return address is on top of the pro-
gram stack before the signal handler is executed. To avoid a
false positive, we use a signal detector (provided by the Pin
API) in order to copy the return address from the program
stack onto our shadow stack when a signal is received.
Another typical example for Class 2 is lazy binding which
“misuses” a return instruction to enforce a jump to a called
function. Lazy binding is enabled by default on UNIX-based
systems. It decreases the load-time of an application by de-
laying the resolving of function start addresses until they are
invoked for the ﬁrst time. Otherwise, the dynamic linker has
to resolve all functions at load-time, although they may be
never called. On our tested Ubuntu system, lazy binding is
enforced by a combination of the functions dl rtld di serinfo
and dl make stackexecutable, which are both part of the dy-
namic linker library linux-ld.so. After dl rtld di serinfo re-
solves the function’s address, it transfers control to the code
of dl make stackexecutable by a jump instruction. Note
that dl make stackexecutable is not explicitly called. How-
ever, dl make stackexecutable redirects execution to the re-
solved function through a return instruction (rather than
through a jump/call). To avoid a false positive, we push
the resolved function address onto our shadow stack before
the return of dl make stackexecutable occurs. Our experi-
ments have shown that the resolved address is stored into the
%eax register after dl rtld di serinfo returns. Hence, we let
ROPdefender push the %eax register onto our shadow stack
when dl rtld di serinfo returns legally.
Class 3: C++ Exceptions.
Another type of exceptions are those where the return ad-
dress is computed while the function executes, whereas the
computed return address completely diﬀers from the return
address pushed by the call instruction. A typical example
for this are GNU C++ exceptions6 with stack unwinding.
Basically, C++ exceptions are used in C++ applications to
catch runtime errors (e.g., division by zero) and other ex-
ceptions (e.g., ﬁle not found). A false positive would arise
if the exception occurs in a function that cannot handle the
6Although we focus on the implementation of C++ excep-
tions with the GNU compiler, we believe that our solution
can be also adopted to operating systems using a diﬀerent
compiler.
exception. In such case, the aﬀected function forwards the
exception to its calling function. This procedure is repeated
until a function is found which is able to handle the ex-
ception. Otherwise the default exception handler is called.
The invoked exception handler is responsible for calling ap-
propriate destructors7 for all created objects. This process
is referred to as stack unwinding and is mainly performed
through the GNU unwind functions Unwind Resume and
Unwind RaiseException. These functions make a call to
Unwind RaiseException Phase2 that computes the return
address and loads it at memory position -0xc8(%ebp), i.e.,
the %ebp register minus 200 (0xc8) Bytes points to the re-
turn address.
In order to push the computed return ad-
dress onto our shadow stack, ROPdefender copies the re-
turn address at -0xc8(%ebp) after Unwind RaiseExcep-
tion Phase2 returns legally.
5. EVALUATION
In this section we evaluate the performance of ROPde-
fender , show how it detects a recent exploit, and ﬁnally, we
discuss ROP attacks without returns.
5.1 Performance
To evaluate the overall performance, we have measured
the CPU time of ROPdefender . We compare our results to
normal program execution and to execution with Pin but
without instrumentation. Our testing environment was a
3.0 GHz Intel Core2 Duo E6850 machine running Ubuntu
10.04 (i386) with Linux kernel 2.6.28-11 and Pin version 2.8-
33586. We ran the integer and ﬂoating-point benchmarks
from the SPEC CPU2006 Suite [58] using the reference in-
puts. Figure 6(b) and 6(a) depict our benchmark results.
Pin without Instrumentation.
The Pin framework itself induces an average slowdown
of 1.58x for integer computations and of 1.15x for ﬂoating
point computations. The slowdown for integer computations
ranges from 1.01x to 2.35x. In contrast, for ﬂoating point
computations the slowdown ranges from 1.00x to 1.64x.
Pin with ROPdefender.
Applications under protection of our ROPdefender run
on average 2.17x for integer and 1.49x for ﬂoating point
computations slower than applications running without Pin.
The slowdown for the integer benchmarks ranges from 1.01x
to 3.54x, and for the ﬂoating point from 1.00x to 3.60x.
ROPdefender adds a performance overhead of 1.49x for in-
teger and 1.24x for ﬂoating point computations in average
compared to applications running under Pin but without
instrumentation. We compared ROPdefender with other
known tools such as the dynamic taint analysis systems DY-
TAN [17] (also based on Pin) or TaintCheck [47] (based on
Valgrind). According to the results in [17, 47], applications
running under these tools are from 30x to 50x times slower
which is enormously higher compared to ROPdefender . Also
DROP [13] causes an average slowdown of 5.3x.
To increase the performance of ROPdefender , we can ei-
ther improve the Pin framework or optimize the ROPde-
fender detection unit. The Pin developers are mainly con-
cerned to optimize their framework in order to achieve bet-
7Destructors free the memory and resources for class objects
and members.
ter performance. Hence, we believe that performance of Pin
will be continuously improved. Our detection unit avoids
to check whether each instruction issued is a call/return by
using trace instrumentation (see Section 4). Hence, we only
check if the tail instruction of the current basic block is a
call or return.
Our experiments also show that it is possible to apply
ROPdefender to large applications used in everyday life such
as Mozilla Firefox. We were able to browse websites and
watch Internet videos with an acceptable time delay with-
out ROPdefender raising a false positive. Moreover, we
compared ROPdefender (running in the user space) to the
kernel-level instrumentation tool DTrace [10]. Tracing sys-
tem calls with DTrace induced such a high overhead that
the Mozilla Firefox browser was not usable anymore.
5.2 Case Study
ROPdefender is able to detect and prevent available real-
world ROP exploits. As a use-case, we apply it to a recent
Adobe Reader exploit [36]. Generally, the attack in [36] ex-
ploits an integer overﬂow in the libtiﬀ library, which is used
for rendering TIFF images. The attack works as follows: By
means of ROP it allocates new memory marked as writable
and executable in order to bypass W ⊕ X. Afterwards, the
memcpy function is called to copy malicious code (stored
in the PDF ﬁle itself) into the new memory area. Finally,
execution is redirected to the malicious code, which could,
for instance, launch a remote shell to the adversary. The ex-
ploit could not be recognized by virus scanners because its
signature was not yet available. Since ROPdefender does
not rely on such side information, it can immediately detect
the attack.
In practice, an adversary will send the malicious PDF ﬁle
to the victim user via an e-mail. The user opens the PDF
ﬁle and thus, a remote shell is launched to the adversary.
In order to apply ROPdefender , we adapted it to Windows.
Instead of opening the ﬁle directly, we opened the ﬁle un-
der the control of ROPdefender . Since the attack triggers
an integer overﬂow and afterwards uses ROP instruction se-
quences (ending in returns), ROPdefender successfully de-
tects the attack at the moment the ﬁrst sequence issues a
return. Afterwards ROPdefender immediately terminates
the application and informs the user.
In total, it takes 31 seconds until ROPdefender detects
the attack. Table 1 shows a snapshot of ROPdefender ’s
output when it is applied to the exploit. The function from
where the return instruction originated and the value of the
instruction pointer (%eip) are shown in column 1 and 2.
Sometimes Pin is not able to identify the precise function
name. In such case, the default function name .text is as-
signed. The expected return address (placed on top of the
shadow stack) and the malicious return address (used by
the adversary) are shown in column 3 and 4. The ﬁrst re-
turn address mismatch occurs at address 0x070072F7. The
expected return address at that time is 0x7C921E29. How-
ever, Adobe Reader aims to return to address 0x20CB5955.
ROPdefender now has to check if either a return address
attack or a setjmp/longjmp exception (see Section 4) oc-
curred. Hence, ROPdefender pops continuously return ad-
dresses from the shadow stack until a match is found. Since
the malicious return address 0x20CB5955 is not part of our
shadow stack, ROPdefender will report the return address
attack (see ﬁrst row in Table 1). To show that ROPdefender
(a) Floating Point Benchmarks
(b) Integer Benchmarks
Figure 6: SPEC CPU2006 Benchmark Results
Function Name
.text
unnamedImageEntryPoint
.text
.text
.text
unnamedImageEntryPoint
.text
BIBLockSmithAssert
NoLocksImpl
. . .
Instruction Expected Malicious
Pointer
Return
Return
0x070072F7
0x070015BB
0x0700154D
0x070015BB
0x07007FB2
0x070072F7
0x070015BB
0x0700A8AC
0x7C921E29
NULL
NULL
NULL
NULL
NULL
NULL
NULL
0x20CB5955
0x070072F8
0x070015BC
0x0700154F
0x070015BC
0x07007FB4