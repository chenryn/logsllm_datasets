title:Blank digital signatures
author:Christian Hanser and
Daniel Slamanig
Blank Digital Signatures(cid:63)
Christian Hanser and Daniel Slamanig
Institute for Applied Information Processing and Communications (IAIK),
Graz University of Technology (TUG), Inﬀeldgasse 16a, 8010 Graz, Austria
{christian.hanser|PI:EMAIL}
Abstract. In this paper we present a novel type of digital signatures, which we call blank
digital signatures. The basic idea behind this scheme is that an originator can deﬁne and
sign a message template, describing ﬁxed parts of a message as well as multiple choices for
exchangeable parts of a message. One may think of a form with blank ﬁelds, where for such
ﬁelds the originator speciﬁes all the allowed strings to choose from. Then, a proxy is given the
power to sign an instantiation of the template signed by the originator by using some secret
information. By an instantiation, the proxy commits to one allowed choice per blank ﬁeld in
the template. The resulting message signature can be publicly veriﬁed under the originator’s
and the proxy’s signature veriﬁcation keys. Thereby, no verifying party except the originator
and the proxy learn anything about the “unused” choices from the message template given a
message signature. Consequently, the template is hidden from veriﬁers.
We discuss several applications, provide a formal deﬁnition of blank digital signature schemes
and introduce a security model. Furthermore, we provide an eﬃcient construction of such
a blank digital signature scheme from any secure digital signature scheme, pairing-friendly
elliptic curves and polynomial commitments, which we prove secure in our model. Finally, we
outline several open issues and extensions for future work.
Keywords: Digital signature scheme, blank digital signatures, elliptic curves, pairings, polynomial
commitments
1 Changes to the AsiaCCS’13 Proceedings Version
– The construction of the BDSS has been greatly simpliﬁed. This makes the construction much
more intuitive, enhances the performance signiﬁcantly, reduces the size of the public parameters
and allows the use of an indistinguishability notion for the privacy property.
– The privacy property has been restated to an indistinguishability style security game.
– This version incorporates full security proofs and uses explicit reductions in the security proofs
(whenever appropriate).
2 Introduction
Digital signatures provide the means to achieve source authentication and data integrity for digital
messages in a publicly veriﬁable way meaning that at signing time a signer commits himself to a
concrete message. In this paper, we propose the novel concept of a blank digital signature scheme.
Here, an originator can deﬁne and sign a message template, describing ﬁxed parts of a message as
well as several choices for exchangeable parts of a message (one may think of a form with blank ﬁelds,
where for such ﬁelds the originator speciﬁes all the allowed strings to choose from), for which he can
delegate signing permissions to a proxy. This proxy is given the power to sign template instantiations
of the template given by the originator by using some secret information. The resulting message
signature can be publicly veriﬁed under the originator’s and the proxy’s signature veriﬁcation keys.
Thereby, no verifying party except the originator and the proxy learn anything about the “unused”
choices from the message template and, consequently, about the template when given a message
(cid:63) This is a major revision of the version of the AsiaCCS’13 paper.
signature. In order to construct such a scheme it is helpful to look at existing variants of digital
signature schemes to ﬁgure out, whether they can be used to instantiate blank digital signatures.
Conventional digital signatures require the signer to be available during signature creation, e.g.,
when a contract is signed. To overcome this limitation, the concept of proxy signatures [14] has
been introduced. Basically, a proxy signature scheme allows an entity (the delegator) to delegate
his signing capabilities to another entity (the proxy) that can then construct signatures on behalf of
the delegator. This concept has seen a considerable amount of interest since then [5]. Surprisingly,
only quite recently a suitable security model for proxy signatures has been introduced [4], and been
extended to multi-level and identity-based proxy signature schemes later on [17]. Since in a practical
application, the delegator may not want to give the proxy the power to sign any message on behalf
of the signer, the delegation by warrant [14] approach was proposed. Here, a signed warrant is used
to describe the delegation. Thereby, any type of security policy may be included in the warrant to
describe the restrictions under which the delegation is valid. This approach seems to be particularly
attractive and received the most attention, since the designator can deﬁne a message space for which
he delegates his signing rights. In state of the art schemes [17,5], a warrant consists of the description
ω of the message space for which signing is being delegated, together with a “certiﬁcate”, which is
a signature on ω under the delegators private signing key. We are given a similar requirement and,
consequently, could ask whether proxy signatures can be used in this setting. In proxy signatures,
this warrant is an abstract description, which could, for instance, be a context-free grammar, a
regular expression, or as in [4], the description of a polynomial-time Turing machine computing the
characteristic function of all potential messages, i.e., given a message to decide, whether the message
is covered by ω or not. However, in proxy signatures the proxy is allowed to sign arbitrary messages
from this abstract message space with the downside that the veriﬁer learns the entire message space.
Consequently, our requirement that the proxy can sign instantiations of a template without a veriﬁer
learning the corresponding template can not be realized by using existing proxy signature schemes.
Conventional digital signature schemes do not allow alterations of a signed document without
invalidating the signature. Since it may be valuable to have the possibility to replace or remove
(speciﬁed) parts of a message after signature creation such that the original signature stays valid (and
no interaction with the original signer is required), redactable [19,11] as well as sanitizable signature
schemes [1] have been introduced. Signature schemes, which allow removal of content (replacement by
some special symbol ⊥) by any party are called redactable [19,11], while signature schemes allowing
(arbitrary) replacements of admissible parts by a designated party are called sanitizable signature
schemes [1], cf. [16] for a comparison. As in our setting, the proxy should be allowed to choose
from a list of predeﬁned replacements for designated parts of the message, one could ask whether
redactable or sanitizable signatures can be used in this setting. Since in redactable signature schemes
any party is allowed to modify signed messages by removing message parts, such signature schemes
are obviously not compatible with our requirements. The original concept of sanitizable signatures [1]
allows designated sanitizers to replace designated parts of a message. However, here the sanitizer
does not have the role of a proxy meaning that it does not sign the modiﬁed message. Furthermore,
a sanitizer can replace the designated parts with arbitrary strings, which is clearly not meeting our
requirements. The concept of sanitizable signatures was later on extended to allow only permitted
replacements [13], yet, the Bloom ﬁlter [3] based construction does not meet cryptographic security
requirements and the cryptographic accumulator [2] based approach [13,7] allows to securely restrict
replacements. Yet, both approaches are not designed and also do not support the hiding of the set
of accumulated values (allowed replacements) and, thus, are not suitable for our construction.
To sum this up, our concept has more in common with proxy signatures than with sanitizable
signatures. This is due to our requirements that the signature of the originator is not publicly
veriﬁable as it is the case in sanitizable signatures and only instantiations can be publicly veriﬁed
as it is the case for proxy signatures.
2.1 Contribution
Since, however, none of the existing concepts covers all our requirements, we propose the novel
concept of a blank digital signature scheme. Here, an originator, i.e., the signer delegating signing
permissions, can deﬁne and sign a message template, describing ﬁxed parts of a message as well as
several choices for exchangeable parts of a message. One may think of a form with blank ﬁelds, where
for such ﬁelds the originator speciﬁes all the allowed strings to choose from. Then, a proxy is given
the power to sign template instantiations of the template given by the originator by using some
secret information. The resulting message signature can be publicly veriﬁed under the originator’s
and the proxy’s signature veriﬁcation keys. Thereby, no verifying party except the originator and
the proxy learn anything about the “unused” choices from the message template and, consequently,
about the template given a message signature. Since this setting is quite diﬀerent from the security
requirements of proxy signatures and sanitizable signatures, most importantly, the template should
be hidden from veriﬁers, we deﬁne a novel type of signature scheme along with a suitable security
model. Similar to proxy signatures and sanitizable signatures, we require a public key infrastructure
meaning that the originator and proxy are in possession of authentic signing keys. Moreover, since
we use polynomial commitments in our construction, we need the parameters to be generated by a
trusted third party.
A naive approach to realize blank digital signatures is that the originator produces n signatures
for all n possible instantiations together with the public key of the proxy using a standard digital
signature scheme, whereas the proxy simply signs the originator’s signature for the chosen instanti-
ations. However, the number of signatures issued by the originator would then be O(n), which gets
impractical very soon with increasing number of choices in exchangeable parts. By using randomized
Merkle hash trees [15] as in redactable signatures, the number of signatures of the originator could
be reduced to O(1), whereas the signature of the proxy would then, however, be of size O(log n).
At ﬁrst glance, this may seem attractive, yet in Section 6.3 we illustrate that this approach also
becomes soon impractical with an increasing number of choices. In our construction, the number of
signatures of the originator is O(1), whereas the size of both signatures, of the originator and the
proxy, are also O(1) and, in particular, very small and constant. Clearly, this is far more appealing
than the aforementioned naive approaches.
2.2 Outline
In Section 3, we sketch some application scenarios for blank digital signatures. Section 4 discusses
the mathematical and cryptographic preliminaries. Then, in Section 5 we introduce the notion of
blank digital signatures and the corresponding security model. A construction of a blank digital
signature scheme along with its security proof and a comparison to the naive approaches are given
in Section 6. Finally, Section 7 concludes the paper and lists open issues for future work.
3 Applications
Here, we sketch some application scenarios which we envision for this novel type of digital signatures.
Partially blank signed contracts: Suppose a person is willing to sign a contract under certain
predeﬁned conditions, e.g., set of potential prices, range of possible contract dates, but is not able
to sign the contract in person. Then, this person can elegantly delegate this task to another semi-
trusted party, e.g., his attorney, by using blank digital signatures. The third party is then able to
conclude the contract on behalf of his client. The client can do so by deﬁning a contract template
thereby leaving certain positions “blank”, i.e., deﬁning certain potential choices for the position
without committing to one, and signing the template. Then, at a later point in time, the attorney is
able to “ﬁll in the gaps” by choosing from predeﬁned choices, whereas the original signature of the
client remains valid, and then signing the resulting contract as a proxy.
“Sanitizable” signatures: We may interpret exchangeable parts of message templates as replace-
ments (with a potentially empty string) and, thus, can achieve a scheme with similar capabilities,
but diﬀerent meaning and strength as a non-interactive publicly accountable sanitizable signature
scheme [6]1, which supports controlled replacements [7,13]. Note that such a sanitizable signature
scheme does not yet exist. However, there are some key diﬀerences. In contrast to sanitizable signa-
tures, our template signature is not intended to be publicly veriﬁable, i.e., can only be veriﬁed by
the proxy and, thus, the originator does not commit to a concrete instantiation of the template. Fur-
thermore, in blank digital signatures, the allowed replacements are hidden, which is not supported
by sanitizable signatures allowing such replacements [7,13]. Consequently, blank digital signatures
may be seen as signature schemes supporting sanitizing capabilities, but are a diﬀerent concept as
it is clear from the diﬀerences mentioned above.
4 Preliminaries
In this section we ﬁrstly provide an overview of required mathematical and cryptographic prelimi-
naries.
4.1 Mathematical Background
An elliptic curve over the ﬁnite ﬁeld Fq is a plane, smooth curve described by the Weierstrass
equation:
E : Y 2 + a1XY + a3Y = X 3 + a2X 2 + a4X + a6,
(1)
where a1, a2, a3, a4, a6 ∈ Fq. The set E(Fq) of points (x, y) ∈ F2
q satisfying Equation (1) plus the
point at inﬁnity ∞, which is the neutral element, forms an additive Abelian group, whereas the
group law is determined by the chord-and-tangent method [18].
Let G be a cyclic group and p be a divisor of its group order, then there exists a subgroup of
order p, which we subsequently denote by G[p].
Deﬁnition 1 (Bilinear Map). Let G1, G2 and GT be three cyclic groups of the same prime order p,
where G1, G2 are additive groups and GT is a multiplicative group. We call the map e : G1×G2 → GT
a bilinear map or pairing, if the following conditions hold:
Bilinearity: For all P1, P2 ∈ G1 and P (cid:48)
2 ∈ G2 we have:
1, P (cid:48)
– e(P1 + P2, P (cid:48)) = e(P1, P (cid:48)) · e(P2, P (cid:48)) for all P (cid:48) ∈ G2,
1) · e(P, P (cid:48)
2) for all P ∈ G1.
– e(P, P (cid:48)
2) = e(P, P (cid:48)
of GT , i.e., e(P, P (cid:48)) (cid:54)= 1GT .
Non-degeneracy: If P is a generator of G1 and P (cid:48) a generator of G2, then e(P, P (cid:48)) is a generator
1 + P (cid:48)
Eﬃciently computable: e can be computed eﬃciently.
If G1 = G2, then e is called symmetric and asymmetric otherwise. The former type is also called
Type-1 pairing, whereas in case of the latter we distinguish between Type-2 and Type-3 pairings.
For Type-2 pairings there is an eﬃciently computable isomorphism Ψ : G2 → G1 [8] and for Type-3
pairings such an eﬃciently computable isomorphism does not exist. In our setting, G1 and G2 are
p-order elliptic curve group over Fq and GT = F∗
qk . Note that
k, the so called embedding degree, is deﬁned as k = min{(cid:96) ∈ N : p | q(cid:96) − 1}.
A function  : N → R+ is called negligible if for all c > 0 there is a k0 such that e(k)  k0. In the remainder of this paper, we use  to denote such a negligible function.
Deﬁnition 2 (Discrete Logaritm Problem (DLP)). Let p be a prime of bitlength κ, G be a
group of order p and α ∈R Z∗
p. Then, for every PPT adversary A
Pr (A(P, αP ) = α) ≤ (κ).
1 In such a sanitizable signature scheme, when given a signature anybody can verify, whether a modiﬁcation
has been conducted by the original signer or the sanitizer without interacting with any party.
If G is an elliptic curve group, we call the corresponding DLP elliptic curve discrete logarithm problem
(ECDLP).
Deﬁnition 3 (t-Strong Diﬃe Hellman Assumption (t-SDH)). Let p be a prime of bitlength
κ, G be a group of order p, α ∈R Z∗
p and let (P, αP, α2P, . . . , αtP ) ∈ Gt+1 for some t > 0. Then, for
every PPT adversary A
(cid:18)
(cid:19)(cid:19)
A(P, αP, α2P, . . . , αtP ) =
c,
1
α + c
P
≤ (κ)
(cid:18)
Pr
for any c ∈ Zp \ {−α}.
4.2 Digital Signatures
Here, we brieﬂy recall the deﬁnition of a standard digital signature scheme.
outputs a private (signing) key dsk and a public (veriﬁcation) key dpk.
Deﬁnition 4 (Digital Signature Scheme). A digital signature scheme DSS is a tuple (DKeyGen,
DSign, DVerify) of polynomial-time algorithms:
DKeyGen(κ) : Is a key generation algorithm that takes as input a security parameter κ ∈ N and
DSign(M, dsk) : Is a (probabilistic) algorithm taking input a message M ∈ {0, 1}∗, a private key dsk
and outputs a signature σ.
DVerify(σ, M, dpk) : Is a deterministic algorithm taking input a signature σ, a message M ∈ {0, 1}∗,
a public key dpk and outputs a single bit b ∈ {true, false} indicating whether σ is a valid
signature for M .