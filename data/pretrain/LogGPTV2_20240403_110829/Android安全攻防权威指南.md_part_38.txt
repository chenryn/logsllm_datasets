153
在启动Chrome之前，首先清空系统日志，代码如下：
54
subprocess.Popen([‘adb’,*logcat′,*-c′1).wait()+清空目志
与之前一样，我们使用Python函数subprocess.Popen来执行adb命令。这里我们使用
logcat命令，传人-c参数来清空日志。
接下来，打开浏览器访问HTTP服务器后，我们给测览器留一些时间来处理生成的输入。这
里我们使用Python的 time.sleep函数：
65
time.sleep(60)给设务留一些时网、市望能够胆发的清
我们给了Chrome足够长的时间来处理我们构造的输人。我们故意设置60秒这样一个很长的
时间，因为浏览器处理类型数组可能会很耗时，尤其是对于性能较低的设备面言。
下一步就是检查系统日志，看看是否发生了什么。我们再次使用adb1ogct命令：
68
1og - subprocess.Popen([ *adb*, *logcat*, *-d* 1, = dump
69
stdout=subproces8.PIFB,
stderr=subprocess .STpouT) .communicate () [0]
这次我们传入-d参数来通过1ogcat获取系统日志的内容。我们设置了subprocess.Popen
函数当中 stdout和 stderr的选项，并使用conmmunicate 函数来把命令的输出传入1og变量。
最后，我们用下面的代码来检查日志内容：
72
if log.find('sIGSBGv*) 1= -1:
74
73
crashfn = os-path.join(*crashes', tmpuri)
print ·
Crashi1 Saving page/log to ts* $ crashfn
75
76
vith open(crashfn, *vb*) as f:
f.vrite(self.server,page)
78
77
f.write (1og)
从内存破坏漏洞的角度来看，段错误（segmentation violation）是最吸引人的，这种情况下。
系统日志中会包含字符串SIGSEGV。如果我们在系统日志中没有找到这一字符串，我们忽略这
一输人，继续尝试。如果我们找到了这一字符串，那么我们就可以确定，在模翻测试过程中发生
了一个段错误类型的崩溃。
监测到崩溃后，我们把系统日志信息和造成崩溃的输入存到本地，用于后续分析，这样我们
就能够让模糊测试工具继续不间断地运行。
为了验证这个模翻测试工具的有效性，我们将它运行了7天。基本测试设备是搭载Android4.4
系统的2012版Nexus7，并且使用Pwn2Own2013中所使用的Chrome版本。这个版本的获取方
法是，打开GooglePlay商店，依次选择Setings（设置）>Apps（应用）选项，卸载应用的更新
并且禁用更新。版本信息如下：
/google-breakpad (12273) : Chrome bui1d fingerprint :
/google-breakpad(12273) : 30.0.1599 .105
w/google-breakpad(12273): 1599105
/googlebreakpad(12273) : ca1917fb-f257-4e63b7a0c3c1bc24f1da
在模翻测试过程中，将系统日志显示在另外的窗口中，这样可以监视测试的过程。我们观察
---
## Page 170
154第6章使用模糊测试来挖摄漏洞
到，一些类型数组的类型在Android版的Chrome中是不支持的，相应的输出如下：
1s not Gefined*, source: http://10.0.10.10:31337/fuzzyou?id=1384731354 (10)
I/chromium( 1690) : [INPO:CONsoLB(10)] *ReferenceError: ArrayBufferViev
I/chromium( 1690) : [INFo:CousoLE(10)] *ReferenceError: StringViev i8 not
[-·· ]
defined*, source: http://10 .0.10.10 :31337/fuzzyou?id=1384731406 (10)
注释掉这些不支持的类型会提高模糊测试的效率。如果不去监视系统日志，我们就会忽略这
一点，从而会对测试周期造成不必要的浪费。
在测试过程中产生了上百个崩溃，大多数崩溃是空指针引用错误，还有一些是内存不足错误。
其中一个崩溃的输出如下：
Bui1d fingerprint : *google/nakas1/grouper:4.4/KRT16O/907817:user/release-
Revision: *0*
keys'
pid: 28335, tid: 28349, nane: Chi1dProcessMai >>>
8ignal 11 (SIGSEGV), code 1 (S8GV_MAPERR). fault addr 00000000
com.android.chrome:sandboxed_process3 cc>>
com.android.chrone:sandboxed_process10 >>
signa1 11 (SIGSEGV), code 1 (SBGV_MAPERR), fau1t addr 93623000
com.android.chrome:sandboxed_process11 <<<
r0 6d708091
r7 6d708091
r3 6ecfe008
r4 24924927
r8 6d747a09r9 93623000
r5 049249ff
0sl 5a3bb014fp 6ac01f84
r6 6ac01f64
ip 6d8080ac sp 6ac01f701r 3dd657e8 pc 3dd63db4cpsr 600e0010
这种崩溃与JonButler的概念验证代码所产生的前溃极其相似。
这个模期测试工具展示了模糊测试是多么快速和简单。虽然只有一两百行Python代码，但
BrowserFuzz能够很好地测试Chrome中的TypedArrays 功能，不仅重新发现了Pinkie Pie赢得
Pwn2Own移动终端竞赛时所使用的严重漏洞，面且还发现了一些不那么严重的bug。这个工具
同时也说明，把精力专注于测试少部分的功能可以提高效率，从而更有可能找到漏洞。
BrowserFuzz也提供了一个模测试框架，相信读者可以很容易地用它测试浏览器的其他功能。
---
## Page 171
6.5对USB攻击面进行模糊测试155
6.5对USB攻击面进行模糊测试
第5章讨论了Android设备的USB接口暴露了很多不同的功能。其实，每个功能本身就代表
着一个攻击面。尽管使用这些功能需要实际接触设备，但是如果底层代码有漏洞，就可以绕过一
些安全机制，如锁屏、受保护的ADB接口等。从USB接口发起攻击的可能影响包括从设备中读
取数据、往设备中写人数据、任意代码执行，以及重写设备固件的某些部分等。这些风险使得
USB接口的攻击面成为一个吸引人的模糊测试对象。
USB设备主要分为两类：主机和设备。除了少数例外情况，Android设备一般不能作为主机。
当一个Android设备被当做主机的时候，经常会用一根OTG（On-the-Go）线，这种模式称为
主机模式。由于过去Android设备对主机模式的支持变化无常，本节主要对设备模式的服务进行
测试。
6.5.1对USB进行模糊测试的挑战
与其他模棚测试一样，USB设备的测试有其自身的挑战。USB对输入的处理一部分在内核
中，也有一部分在用户空间中。如果内核在处理时产生了问题，那么内核会报错，并且会让设备
重启或中止运行。面如果用户空间中实现某项功能的程序出错，那么很可能会导致程序崩溃。
USB设备在发生错误时会发送一个总线重置信号，即设备会从主机断开连接，并将自身重置回默
认设置。遗憾的是，重置设备会断开所有正在使用的USB功能，包括用来监视日志的ADB会话。
因此，如果要实现自动化测试，就需要额外的检测和处理这些可能发生的问题。
幸好Android在多数情况下十分健壮，服务通常会自动重启。为了在系统内核出错或中止时
能够重启，Android设备使用了看门狗。因此大部分情况下，我们只需要等待设备返回到之前的
状态就够了。如果系统并没有恢复，发送一个总线重置信号一般就可以解决问题了。不过，在非
常罕见的情况下，需要物理重新连接或者给设备重新上电来清除错误。当然，这种任务也能完全
自动化，但需要一些特殊的硬件，如支持软件控制或自定义电源控制的USB集线器。这些方法
不在本章所讨论的范围内。
虽然对USB设备进行模糊测试有其自身的挑战，但大体上的步骤与其他模糊测试是一样的。
相比同时测试USB的所有功能，一次对一个功能进行模期测试会得到更好的结果。正如应用可
以在两台计算机之间通过网络进行通信那样，使用USB传输的应用也有自己的通信协议。
6.5.2选定目标模式
USB接口可以处于很多不同的模式，从中选择一种来进行模期测试并不容易。另外，Android
设备处于不同的模式时，所暴露的功能是不同的，换句话说，一种模式暴露一个功能集合，面另
一种模式则暴露另一个功能集合。把设备接入USB主机的时候我们就很容易看到这一点。刚接
人时会弹出一条消息，显示出当前的模式，并引导用户去点击更改选项。具体支持哪些功能因设
备的不同面不同。图6-3显示了搭载Android4.4系统的Nexus4接入USB主机时的提示消息。
---
## Page 172
156第6章使用模潮测试来挖掘漏洞
图6-3连接USB时的提示消息
点击提示消息之后，用户被引导至图6-4所示的界面
uSBcompu
CONNECT AS
Media device (MTP)
Les yos
图6-4USB模式选择
单从图6-4来看，Nexus4的默认模式似乎并不多，但实际上，很多其他功能（如USB网络
共享等）系统也是支持的，只是需要在一些特殊的启动中显式地打开或设置。图6-4中的设备处
于默认的配置状态，多媒体设备（MTP）是Android设备出厂时的默认功能，因此这是一个极为
吸引人的模糊测试对象。
6.5.3生成输入
选定了要测试的USB功能后，下一步就是了解尽可能多的相关信息。目前为止，我们只知
道Android设备把这个功能称为“多媒体设备”（MTP）。查阅MTP这个缩写可以发现它代表多
媒体传输协议（MediaTransferProtocol），进一步调研得知，MTP是一个基于图片传输协议（PTP）
的协议。再进一步搜索“MTPfuzzing"，就能找到对MTP进行模糊测试的公开工具。OlleSegerdahl
开发了这个工具，并在2012年于芬兰举行的T2Infosec大会上发布。这个工具可以从https://github.
com/ollseg/usb-device-fuzzing.git下载到。本节余下部分将介绍这个工具如何生成输入并处理输人。
深人分析Olle的USB设备模糊测试工具后发现，它使用流行的Scapy包生成工具来构建生
成策略。这是一个很好的策略，因为Scapy提供了很多用来生成输人数据包的接口，这样就能够
让开发者专注于协议。当然，Olle必须告诉Scapy的是MTP数据包的结构以及协议的流程。另
外，他也必须实现一些非标准的处理，如数据和长度字段的关系。
生成数据包的代码在USBFuzz/MTPpy文件中。代码的一开始包含了必要的Scapy组件，然
后Olle定义了两个字典来保存MTP当中的操作和响应码。接着，Olle定义了一个Container
类和两个MTP的事务阶段（Transaction Phase）。为了让MTP服务知道如何去解析数据，所有的
MTP事务都以容器作为前缓。Container类在PTP规范中有描述，相关代码如下：
---
## Page 173
6.5对USB攻击面进行模糊测试
157
98 class Container(Packet):
66
name = *PTP/MTP Container *
100
101
_Types = (*Undefined′:0, *Operation*:1, *Data*:2, *Response*:3,
102
*Event*:4)
103
104