title:The Tangled Genealogy of IoT Malware
author:Emanuele Cozzi and
Pierre-Antoine Vervier and
Matteo Dell'Amico and
Yun Shen and
Leyla Bilge and
Davide Balzarotti
The Tangled Genealogy of IoT Malware
Emanuele Cozzi
PI:EMAIL
EURECOM
Sophia Antipolis, France
Yun Shen
PI:EMAIL
NortonLifeLock, Inc.
Reading, United Kingdom
Pierre-Antoine Vervier
France
Matteo Dell’Amico
PI:EMAIL
France
Leyla Bilge
PI:EMAIL
NortonLifeLock, Inc.
Sophia Antipolis, France
Davide Balzarotti
PI:EMAIL
EURECOM
Sophia Antipolis, France
ABSTRACT
The recent emergence of consumer off-the-shelf embedded (IoT)
devices and the rise of large-scale IoT botnets has dramatically in-
creased the volume and sophistication of Linux malware observed
in the wild. The security community has put a lot of effort to docu-
ment these threats but analysts mostly rely on manual work, which
makes it difficult to scale and hard to regularly maintain. Moreover,
the vast amount of code reuse that characterizes IoT malware calls
for an automated approach to detect similarities and identify the
phylogenetic tree of each family.
In this paper we present the largest measurement of IoT malware
to date. We systematically reconstruct – through the use of binary
code similarity – the lineage of IoT malware families, and track
their relationships, evolution, and variants. We apply our technique
on a dataset of more than 93k samples submitted to VirusTotal over
a period of 3.5 years. We discuss the findings of our analysis and
present several case studies to highlight the tangled relationships
of IoT malware.
CCS CONCEPTS
• Security and privacy → Software and application security; Mal-
ware and its mitigation.
KEYWORDS
Malware, IoT, Classification, Measurement, Lineage
ACM Reference Format:
Emanuele Cozzi, Pierre-Antoine Vervier, Matteo Dell’Amico, Yun Shen,
Leyla Bilge, and Davide Balzarotti. 2020. The Tangled Genealogy of IoT
Malware. In Annual Computer Security Applications Conference (ACSAC
2020), December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3427228.3427256
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427256
1 INTRODUCTION
Over the last few years we have witnessed an increase in both the
volume and sophistication of malware targeting IoT systems. Tra-
ditional botnets and DDoS tools now cohabit with crypto-mining,
spyware, ransomware, and targeted samples designed to conduct
cyber espionage. To make things worse, the public availability of
the source code associated with some of the main IoT malware
families have paved the way for myriads of variants and tangled
relationships of similarities and code reuse. To make sense of this
complex evolution, the security community has devoted a consider-
able effort to analyze and document these emerging threats, mostly
through a number of blog posts and the definitions of Indicators of
Compromise [7, 8, 36, 44]. However, while the insights gained from
these reports are invaluable, they provide a very scattered view of
the IoT malware ecosystem.
On the academic side, Cozzi et al. [12] provided the first large-
scale study of Linux malware by relying on a combination of static
and dynamic analyses. The authors studied the behavior of 10K
samples collected between November 2016 and November 2017,
with the goal of documenting the sophistication of IoT malware
(in terms of persistence mechanisms, anti-analysis tricks, packing,
etc.). Antonakakis et al. [3] instead dissected the Mirai botnet and
provided a thorough investigation into its operations, while Pa et
al. [35] and Vervier et al. [45] used IoT honeypots to measure the
infection and monetization mechanisms of IoT malware.
Despite this effort, little is still known about the dynamics behind
the emergence of new malware strains and today IoT malware is
still classified based on the labels assigned by AV vendors. Unfor-
tunately, these labels are often very coarse-grained, and therefore
unable to capture the continuous evolution and code sharing that
characterize IoT malware. For instance, it is still unclear how many
variants of the Mirai botnet have been observed in the wild, and
what makes each group different from the others. We also have a
poor understanding of the inner relationships that link together
popular families, such as the Mirai and Gafgyt botnets and the
infamous VPNFilter malware.
This paper aims at filling this gap by proposing a systematic
way to compare IoT malware samples and display their evolution
in a set of easy-to-understand lineage graphs. While there exists a
large corpus of works that focused on the clustering of traditional
malware [5, 6, 25, 29, 38] and exploring their lineage [15, 24, 26, 28,
31, 33] proving the complexity of these problems, in this paper we
show that the peculiarities of IoT malware require the adoption of
ACSAC 2020, December 7–11, 2020, Austin, USA
Cozzi, et al.
customized techniques. On the other hand, to our advantage, the
current number of samples and the general lack of code obfuscation
make possible, for the first time, to draw a complete picture that
covers the entire ecosystem of IoT malware.
Our main contribution is twofold. First, we present an approach
to reconstruct the lineage of IoT malware families and track their
evolution. This technique allows identifying various variants of
each family and also the intra-family relationships that occur due
to the code-reuse among them. Second, we report on the insights
gained by applying our approach on the largest dataset of IoT mal-
ware ever assembled to date, which include all malicious samples
collected by VirusTotal between January 2015 and August 20181.
Our lineage graphs enabled us to quickly discover over a hundred
mislabeled samples and to assign the proper name to those for
which AV products did not reach a consensus. Overall, we identified
and validated over 200 variants in the top families alone, we show
the speed at which new variants were released, and we measured
for how long new samples belonging to each variant appeared on
VirusTotal. By looking at changes in the functions, we also identify
a constant evolution of thousands of small variations within each
malware variant. Finally, our experiments also emphasize how the
frequent code reuse and the tangled relationship among all IoT
families complicate the problems of assigning a name to a given
sample, and to clearly separate the end of a family and the beginning
of another.
We make the full dataset and the raw results available to re-
searchers 2. We also share the high resolution figures of the lineage
graphs made by architecture for ease of exploration.
1.1 Why this Study Matters
IoT malware is an important emerging phenomenon [35], not just
because of its recent development but also because IoT devices
might not be able to run anti-malware solutions comparable to
those we use today to protect desktop computers. However, to
be able to design new solutions, it is important for the security
community to precisely understand the characteristics of the cur-
rent threat landscape. This need prompted researchers to conduct
several measurement studies, focused for instance on the impact
of the Mirai botnet [3] or on the techniques used by Linux-based
malicious samples [12].
This work follows the same direction, but it is over one order of
magnitude larger than previous studies and includes all malicious
samples submitted to VirusTotal over a period of 3.5 years. A conse-
quence of the scale of the measurement is that the manual analysis
used in previous studies had to be replaced with fully automated
comparison and clustering techniques.
Our findings are not just curiosities, but carry important conse-
quences for future research in this field. For example, static analysis
was the preferred choice for program analysis, until researchers
showed that the widespread use of packing and obfuscation made it
unsuitable in the malware domain [34]. Our work shows that this is
not yet the case in the IoT space, and that today static code analysis
provides more accurate results than looking at dynamic sandbox
1As explained in Section 2, we included in our analysis only samples detected as
malicious by at least five AV systems.
2Dataset and figures: https://github.com/eurecom-s3/tangled_iot/
reports or static features. The fragmentation of IoT families also
casts some doubts on the ability of AV labels to characterize the
complex and tangled evolution of IoT samples.
Finally, while not our main contribution, our work also reports
on the largest clustering experiments conducted to date on dynamic
features extracted from malicious samples [5, 6, 25].
2 DATASET
To study the genealogy of IoT malware, our first goal was to collect
a large and representative dataset of malware samples. For this
purpose, we downloaded all ELF binaries that have been submitted
to VirusTotal [2] over a period of almost four years (from January
2015 to August 2018) and that had been flagged as malicious by at
least five anti-virus (AV) vendors. Since our goal is to analyze mal-
ware that targets IoT devices, we purposely discarded all Android
applications and shared libraries. Furthermore, we also removed
samples compiled for the Intel and AMD architectures because it is
very difficult to distinguish the binaries for embedded devices from
the binaries for Linux desktop systems. This selection criteria re-
sulted in a dataset of 93,652 samples, one order of magnitude larger
than any other study conducted on Linux-based malware. As a com-
parison, the largest measurement study to date was performed on
10,548 Linux binaries [12], of which a considerable fraction (64.56%)
were malware targeting x86 desktop computers. Moreover the pur-
pose of this dataset was to study the general behavior of modern
Linux malware and not the tangled relationships between them.
We could have easily extended our dataset to Linux malware
for desktops and servers. On the other hand, we preferred to focus
specifically on IoT malware, given their high infection rate on real
devices and the variety of the underlying hardware architectures.
This possibly requires platform customizations implemented as
ad-hoc malware variants. Moreover, less known architectures are
more likely to show those small bits which tend to be ignored on
more comfortable and extensively studied counterparts e.g., x86.
Figure 1 shows the volume of samples in our dataset submitted to
VirusTotal over the data collection period and the dramatic increase
in the number of IoT malware samples after the outbreak of the
infamous Mirai botnet in October 2016. Before that, the number
of malicious IoT binaries was very low. For instance, only 363
of our 93K samples were observed in that period. This number
progressively increased to reach an average of 7.8k new malicious
binaries per month in 2018. This trend can be attributed to several
factors, including the evolving IoT threat landscape [27, 42, 43, 45],
the source code availability of several popular families [27], and the
proliferation of IoT honeypots that allowed researchers to rapidly
collect a large number of samples spreading in the wild [45].
Table 1 reports the compilation details of the samples in our
dataset. The first two architectures, ARM 32-bit and MIPS I, account
together for two thirds of all samples. This can be explained by
the large popularity of these processor architectures for popular
consumer IoT devices commonly targeted by these malware, such
as home routers, IP cameras, printers, and NAS devices. Another
interesting aspect is the fact that almost 95% of the ELF files in
our dataset were statically linked. Additionally, as already noted
by Cozzi et al. [12], a large fraction of them (roughly 50% in our
dataset) have not been stripped from their symbols.
The Tangled Genealogy of IoT Malware
ACSAC 2020, December 7–11, 2020, Austin, USA
Table 1: Breakdown of samples per architecture.
CPU Architecture
Samples No. (%)
ARM 32-bit
MIPS I
PowerPC 32-bit
SPARC
Hitachi SH
Motorola 68000
Tilera TILE-Gx
ARC International ARCompact
Interim Value tba
SPARC Version 9
PowerPC 64-bit
Others
Total
36,574 (39.05)
25,201 (26.91)
10,916 (11.66)
8,412 (8.98)
6,477 (6.92)
5,982 (6.39)
27 (0.03)
27 (0.03)
9 (0.01)
8 (0.01)
6 (0.01)
13 (0.01)
93,652
Dynamically Linked
Stripped Unstripped
645
345
258
119
107
82
1
2
7
6
4
8
1,584
3,012
325
100
100
63
52
0
16
2
1
1
4
3,676
Total
3,657
670
358
219
170
134
1
18
9
7
5
12
5,260
Statically Linked
Stripped Unstripped
16,868
11,817
5,378
4,704
4,117
3,718
0
2
0
0
0
0
46,604
16,049
12,714
5,180
3,489
2,190
2,130
26
7
0