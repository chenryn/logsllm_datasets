router. As shown in Figure 11, HTTP downloading ﬂows going
through the 1Mbps bottleneck link exhibit ﬂow clock around 12ms,
10Samples in VPN are too few to draw conﬁdent conclusion.
11Many IPs are from CDN servers, so we cannot infer their sources.
Figure 12: (a) Distribution of ﬂow clocks (b) Distribution of
RTT based clocks vs. non-RTT based clocks for DSL
which equals to the inter-packet time regardless of RTT. Finally, in
Figure 12(b), 7% of ﬂows with clocks larger than 1 second appear
to be video streaming applications sending at constant bit rate.
Our next observation relates to the consistency of ﬂight size. Re-
call that in §4.3, given that a ﬂow has its clock, we separate the
ﬂow into ﬂights, each of which consists of a train of packets sent
within one clock. We ﬁnd that, ﬂows with large non-RTT based
ﬂow clock tend to have more consistent ﬂight size. To quantify
the consistency of ﬂight sizes, we deﬁne a ﬂow’s ﬂight entropy
as: EF = −Pk
Nk
N log“ Nk
N ” (N: total number of ﬂights, Nk:
the number of ﬂights containing k packets). Intuitively, a smaller
EF indicates that the ﬂight sizes are more consistent (in all seven
datasets, packet count and ﬂow size are highly correlated with cor-
relation coefﬁcient higher than 0.99). The scatter plot in Figure 13
illustrates a trend that the ﬂight entropy tends to decrease as ﬂow
clock increases, given that the ﬂow clock is greater than 100ms. In
each dataset, for ﬂows with clock greater than 100ms, the correla-
tion coefﬁcients between ﬂow clock and ﬂight entropy lie between
-0.5 and -0.3, since as ﬂow clock increases, the proportion non-RTT
based clock increases correspondingly, causing the decrease in the
average ﬂight entropy.
We further observe that ﬂows with non-RTT based clocks are
more likely to transfer data with an inappropriately large conges-
tion window after a long idle period. Based on RFC2581 [6], if a
TCP has no transmission for more than one retransmission timeout
87y
p
o
r
t
n
E
t
h
g
i
l
F
5
4
3
2
1
0
0
0.5
1
Flow Clock (sec)
1.5
Figure 13: Correlation between ﬂow clock and ﬂight entropy
for BU
i
e
v
s
s
e
r
g
g
A
f
o
o
i
t
a
R
t
s
t
r
a
S
e
d
l
I
1
0.8
0.6
0.4
0.2
0
0
0.2
0.4
0.6
0.8
Flow Clock (sec)
RTT
based Clk
Non−RTT
based Clk
1
1.2
Figure 14: Scatter plot of ﬂow clock and aggressive idle starts
(RTO), it should reduce the congestion window to no more than the
restart window, which equals to initial congestion window, before
next transmissions. The standard way to compute RTO is deﬁned in
RFC 2988 [30] as RT O = RT Tmean +4×RT Tstd, then rounded
up to 1 second if needed12. To test whether the idle start behavior of
a ﬂow conforms to [6] and [30], we count the number of aggressive
idle starts (i.e., the server does not perform slow start after RTO),
which is then divided by the total number of idle starts observed in
the ﬂow to get an aggressive ratio.
We selected 288 ﬂows from DSL datasets where there exists at
least 10 idle starts and the RTT can be estimated from TCP hand-
shake. We calculate the aggressive ratio for each ﬂow, based on an
overestimation of RTO as max{5 ∗ RT T, 1.1sec}. The scatter plot
of ﬂow clocks and aggressive ratios is shown in Figure 14. On one
hand, ﬂows with non-RTT based clocks are more likely to perform
aggressive idle start. In particular, among ﬂows with aggressive ra-
tio higher than 0.8, 75% have non-RTT based clocks. On the other
hand, non-RTT based clocks with high aggressive ratio are mostly
large, as 87% have clocks greater than 0.95sec, forming a cluster at
upper-right corner of Figure 14. Most ﬂows in the cluster originate
from multimedia streaming servers. For ﬂows with large non-RTT
based clocks, a clear motivation to use a longer RTO is to keep the
constant sending rate by avoiding slow start. However, by doing
so, TCP can potentially send a large burst into the network after an
idle period.
12Based on RFC 2988, exceptional cases include: RTO should be
set to 3 seconds before ﬁrst RTT is estimated, and RTO must be
doubled when retransmission timer expires due to packet loss.
6.4 Summary of Results
We summarize our ﬁndings as follows. (i) The majority of the
ﬂows have ICW of 2*MSS. However, from 2.3% to 15.8% ﬂows
in our data have a large ICW violating RFC 3390. Almost all ag-
gressive ﬂows are from two open source OSes: Linux 2.6.x and
FreeBSD 6/7. (ii) Among ﬂows with high retransmission rate (higher
than 10%), 5% exhibit irregular retransmission behavior, which is
observed to have two main causes: abnormal retransmission not
conforming to RFC-compliant TCP speciﬁcations, and under-utilization
of the congestion window. (iii) Less than half of our ﬂows have
distinguishable ﬂow clocks. Among ﬂows with a measurable ﬂow
clock, up to 60% have clocks originated by non-RTT factors. In
particular, we observe several clusters of clocks such as 100ms and
18ms differing signiﬁcantly from RTT values. We found that be-
sides RTT, many factors such as user interaction, application de-
ﬁned software clocks, periodical OS events (e.g., keyboard scan-
ning), or “retiming” effects of a bottleneck link may shape or blur
the ﬂow clock. (iv) Flows with large non-RTT based ﬂow clock
tend to have more consistent ﬂight size. Also, ﬂows with non-RTT
based clocks are more likely to transfer data with an inappropriately
large congestion window due to a larger RTO. Both observations
are motivated by keeping constant sending rate at the application
layer.
7. CONCLUSION
Given the critical importance of the TCP protocol for shaping
the trafﬁc characteristics on the Internet, our work reexamines key
properties of TCP behavior observed on the Internet today, using
traces collected at multiple vantage points from a tier-1 ISP. We
reveal the evolution of TCP’s characteristics by comparing with
two previous studies conducted 6 to 8 years ago. Furthermore, we
go beyond the basic characterization to study within-ﬂow packet
dynamics.
In particular, we studied three problems: how to de-
termine the initial congestion windows of TCP senders; how to
capture sender’s change in sending rate in response to packet re-
transmission; how to accurately obtain TCP ﬂow clocks. To answer
these questions, we have designed several novel methodologies, es-
pecially addressing the challenges of analyzing passively collected
unidirectional TCP ﬂows. By applying our methods on long-lived
ﬂows in our datasets, we characterized the popular TCP behavior,
and identiﬁed unexpected ﬂows not conforming to TCP speciﬁca-
tions as well. Our ﬁndings also suggest that the popularity of TCP’s
use for streaming and gaming applications would greatly change
the trafﬁc dynamics especially because most ﬂows with non-RTT
based ﬂow clocks are found to belong to this application class. Our
study is an important step towards better understanding Internet
trafﬁc dynamics, ensuring protocol conformance, and understand-
ing the interaction between the transport layer and the application
layer.
8. REFERENCES
[1] Detours, Binary Interception of Win32 Functions.
http://research.microsoft.com/en-us/
projects/detours/.
[2] Nmap, Free Security Scanner for Network Exploration and
Security Audits. http://nmap.org/.
[3] p0f, a Versatile OS Fingerprinting Tool.
http://lcamtuf.coredump.cx/p0f.shtml.
[4] N. Agrawal, W. J. Bolosky, J. R. Douceur, and J. R. Lorch. A
Five-Year Study of File-System Metadata. In Proc. of
USENIX Conference on File and Storage Technologies
(FAST), 2007.
88[5] M. Allman, S. Floyd, and C. Partridge. Increasing TCP’s
Initial Window. RFC 3390, 2002.
[6] M. Allman, V. Paxson, and W. R. Stevens. TCP Congestion
Control. RFC 2581, 1999.
[7] S. Bhattacharyya, C. Diot, J. Jetcheva, and N. Taft. Pop-level
and Access-link-level Trafﬁc Dynamics in a Tier-1 POP. In
Proc. of Internet Measurement Workshop, 2001.
[8] V. Cerf, Y. Dalal, and C. Sunshine. Speciﬁcation of Internet
Transmission Control Program. RFC 675, 1974.
[9] C. Chambers, W. chang Feng, S. Sahu, and D. Saha.
Measurement-based Characterization of a Collection of
On-line Games. In Proc. of Internet Measurement
Conference (IMC), 2005.
[10] K. chan Lan and J. Heidemann. Measurement Study of
Correlations of Internet Flow Characteristics. Computer
Networks, 50, 2006.
[11] M. Dischinger, A. Haeberlen, K. P. Gummadi, and S. Saroiu.
Characterizing Residential Broadband Networks. In Proc. of
Internet Measurement Conference (IMC), 2007.
[12] C. Estan, S. Savage, and G. Varghese. Automatically
Inferring Patterns of Resource Consumption in Network
Trafﬁc. In Proc. of ACM SIGCOMM, 2003.
[13] C. Estan and G. Varghese. New Directions in Trafﬁc
Measurement and Accounting: Focusing on the Elephants,
Ignoring the Mice. In ACM Transactions on Computer
Systems (TOCS), 2003.
[14] K. Fall and S. Floyd. Simulation-based Comparisons of
Tahoe, Reno, and SACK TCP. In ACM Computer
Communication Review, 1996.
[15] S. Floyd. HighSpeed TCP for Large Congestion Windows.
RFC 3649, 2003.
[16] S. Ha, I. Rhee, and L. Xu. CUBIC: A new TCP-friendly
high-speed TCP variant. In Proceedings of the third
PFLDNet Workshop, 2008.
[17] S. Jaiswal. Measurements-in-the-Middle: Inferring end-end
path properties and characteristics of TCP connections
through passive measurements. PhD thesis, University of
Massachusetts Amherst, 2005.
[18] S. Jaiswal, G. Iannaccone, C. Diot, J. Kurose, and
D. Towsley. Inferring TCP Connection Characteristics
through Passive Measurements. In Proc. of IEEE
INFOCOM, 2004.
[19] H. Jiang and C. Dovrolis. Passive Estimation of TCP
RoundTrip Times. In ACM Computer Communication
Review, 2002.
[20] A. W. Leung, S. Pasupathy, G. Goodson, and E. L. Miller.
Measurement and Analysis of Large-Scale Network File
System Workloads. In USENIX Annual Technical
Conference, 2008.
[21] G. Lu and X. Li. On the Correspondency between TCP
Acknowledgment Packet and Data Packet. In Proc. of
Internet Measurement Conference (IMC), 2003.
[22] R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson,
and S. Shenker. Controlling High Bandwidth Aggregates in
the Network. In ACM Computer Communication Review,
2002.
[23] A. P. Markopoulou, F. A. Tobagi, and M. J. Karam.
Assessment of VoIP Quality over Internet Backbones. In
Proc. of IEEE INFOCOM, 2002.
[24] A. Medina, M. Allman, and S. Floyd. Measuring Interactions
Between Transport Protocols and Middleboxes. In Proc. of
Internet Measurement Conference (IMC), 2004.
[25] A. V. Oppenheim, R. W. Schafer, and J. R. Buck.
Discrete-Time Signal Processing (2nd Edition). Prentice
Hall, 1999.
[26] J. Padhye and S. Floyd. Identifying the TCP Behavior of
Web Servers. In Proc. of ACM SIGCOMM, 2001.
[27] V. Paxson. Automated Packet Trace Analysis of TCP
Implementations. In ACM Computer Communication
Review, 1997.
[28] V. Paxson. Automated Packet Trace Analysis of TCP
Implementations. In Proc. of ACM SIGCOMM, 1997.
[29] V. Paxson. End-to-end Internet Packet Dynamics. In ACM
Computer Communication Review, 1997.
[30] V. Paxson and ark Allman. Computing TCP’s
Retransmission Timer. RFC 2988, 2000.
[31] A. Shaikh, J. Rexford, and K. Shin. Load Sensitive Routing
of Long-lived IP Flows. In Proc. of ACM SIGCOMM, 1999.
[32] K. Thompson, G. J. Miller, and R. Wilder. Wide-area
Internet Trafﬁc Patterns and Characteristics. In IEEE
Network Magazine, 1997.
[33] B. Veal, K. Li, and D. Lowenthal. New Methods for Passive
Estimation of TCP Round-Trip Times. In Proc. of Passive
and Active Measurement conference (PAM), 2005.
[34] D. X. Wei, C. Jin, S. H. Low, and S. Hegde. FAST TCP:
motivation, architecture, algorithms, performance. In Proc.
of IEEE INFOCOM, 2004.
[35] Y. Zhang, L. Breslau, V. Paxson, and S. Shenker. On the
Characteristics and Origins of Internet Flow Rates. In Proc.
of ACM SIGCOMM, 2002.
[36] Y. Zhang and Z. Lei. Estimate Round-Trip Time of TCP in a
Passive Way. In Proc. of International Conference on Signal
Processing (ICSP), 2004.
89