title:A Systematic Characterization of IM Threats using Honeypots
author:Iasonas Polakis and
Thanasis Petsas and
Evangelos P. Markatos and
Spyros Antonatos
A Systematic Characterization of IM Threats Using Honeypots
Spiros Antonatos, Iasonas Polakis, Thanasis Petsas and Evangelos P. Markatos
Institute of Computer Science,
Foundation for Research and Technology Hellas
{antonat, polakis, petsas, markatos}@ics.forth.gr
Abstract
The popularity of instant messaging (IM) services has
recently attracted the interest of attackers that try to send
malicious URLs or ﬁles to the contact lists of compro-
mised instant messaging accounts or clients. This work
focuses on a systematic characterization of IM threats
based on the information collected by HoneyBuddy, a
honeypot-like infrastructure for detecting malicious ac-
tivities in IM networks. HoneyBuddy ﬁnds and adds
contacts to its honeypot messengers by querying pop-
ular search engines for IM contacts or by advertising
its accounts on contact ﬁnder sites. Our deployment
has shown that with over six thousand contacts we can
gather between 50 and 110 malicious URLs per day as
well as executables. Our experiments show that 21% of
our collected executable samples were not gathered by
other malware collection infrastructures, while 93% of
the identiﬁed IM phishing domains were not recorded by
popular blacklist mechanisms. Furthermore, our ﬁnd-
ings show that the malicious domains are hosted by
a limited number of hosts that remain practically un-
changed throughout time.
1 Introduction
Instant messaging is one of the most popular Internet
activities. According to an older survey [7], more than
82 million people in Europe and 69 million people in
North America use an instant messenger. A more recent
study by Leskovec et al. [29] reveals that the number of
MSN messenger (the most popular IM client) users has
reached 240 million, with 7 billion exchanged messages
per day. Reports estimate over 400 million registered
Skype users [18], and 2.1 billion instant messages sent
per day by AIM users[2].
This large user-base and the fact that IM is a near real-
time form of communication, in contrast to other forms
such as e-mail, make IM networks an attractive platform
for attackers to launch their campaigns. Attackers either
exploit vulnerabilities of the IM client software, or steal
account information through phishing schemes. Once a
user account has been compromised, the attack propa-
gates by targeting the victim’s contacts. The attack vec-
tors are either ﬁle transfers or instant messages that con-
tain URLs of websites controlled by the attacker. As
users tend to trust content sent from their contacts, the
probability of users accepting the transfer or clicking the
URL is higher than in the case of traditional phishing
campaigns or malicious websites.
This work focuses on the characterization and detec-
tion of attacks against IM users. Our proposed archi-
tecture, called HoneyBuddy, is based on the concept of
honeypots. Honeypots are closely monitored decoy ma-
chines that are not used by a human operator but rather
wait to be attacked [35]. In a similar fashion, we have
deployed IM honeypots: decoy IM accounts with hun-
dreds of contacts on their friend list, that wait for com-
promised IM accounts to send them malicious URLs or
ﬁles. Unlike traditional honeypots which wait for at-
tackers passively, HoneyBuddy follows a more active
approach. By crawling the web or by advertising the
accounts on several sites, we have managed to ﬁnd ac-
counts of real users and invite them to be our friends.
Our decoy accounts have over six thousand users in their
contact lists and receive between 50 and 110 unsolicited
URLs per day.
In this paper, our main goal is to present an in-depth
analysis and characterization of the collected URLs and
malware. Our results show that 93% of the phishing
URLs caught by HoneyBuddy are not present in other
popular existinging blacklist mechanisms, such as the
Google blacklist. Additionally, as much as 87% of all
malicious URLs collected by our infrastructure is incor-
rectly ﬂagged as safe by commercial anti-phishing prod-
ucts, such as Norton Safe Web. We also cross-reference
the malware caught by our system with other collec-
tion infrastructures and ﬁnd that 21% of our samples
are zero-day malware instances. During our analysis
of the top-level domains that host malicious URLs we
trace the phishing domains back to a small number of IP
addresses, revealing a large network of collaborating at-
tackers. We also found that 10 of those domains belong
to fast-ﬂux networks. Our study reveals that scams that
propagate through IM networks are speciﬁcally crafted
for this communication channel and are different from
those found in email spam.
We provide an attacker proﬁle based on our ﬁndings
and describe two different strategies for deploying spam
campaigns. We argue that different technical aspects
of the IM attacks lead to radically different spamming
strategies. Next, we examine the effectiveness of IM at-
tack campaigns based on the launching of our own (be-
nign) attack campaigns. This experiment reveals that
12% of the users visit URLs sent to them by our dummy
accounts, and 4% are willing to run an executable of
unknown origin. Finally, we deploy the prototype im-
plementation of our myMSNhoneypot service, an early
detection service that can inform users if their accounts
or IM clients have been compromised.
The remainder of the paper is structured as follows.
In section 2, an overview of related work is presented.
Section 3 describes the various attacks that target IM
users. Section 4 provides a detailed description of the
HoneyBuddy architecture, while sections 5 and 6 are an
analysis of the data collected by our infrastructure. In
section 7 we provide an attacker proﬁle based on our
ﬁndings, and in section 8 we describe our own benign
campaign and present the results. In section 9 we pro-
pose defenses against IM attack campaigns. Finally, we
summarize and conclude in section 10.
2 Related Work
Xie et al. propose HoneyIM [39], a system that uses
decoy accounts in users’ contact lists, to detect content
sent by IM malware. HoneyIM can be deployed in a en-
terprise network and alert network administrators of ma-
licious content, provide attack information, and perform
network-wide blocking. HoneyIM has a limited view
of the IM attack landscape due to its passive architec-
ture and enterprise deployment. To overcome these dis-
advantages, HoneyBuddy is an active architecture that
constantly adds new “buddies” to its decoy accounts,
transcending the narrow conﬁnes of an enterprise level
deployment, and monitors a variety of instant messaging
users for signs of contamination. Furthermore, the use
of pidgin [15] prevents their system from detecting at-
tacks that exploit vulnerabilities in dominating instant
messaging software such as the MSN live messenger
[11].
Trivedi et al. address the problem of instant messag-
ing spam (spim) and how to utilize honeypots to extract
network and content characteristics of spim[37]. They
set up an open SOCKS proxy that only allows outbound
connections to IM servers. The analysis of the collected
data reveals several characteristics of spim campaigns.
An interesting result is that advertised URLs lead to a
small number of websites, something that is conﬁrmed
by our ﬁndings. However, there are several major dif-
ferences with our work. While they focus on spim cam-
paigns, our honeypot detects all types of instant messag-
ing threats mentioned in section 3, and also handles ma-
licious ﬁle transfers. Furthermore, they propose a pas-
sive architecture that waits for spimmers to connect to
their open proxy while our system actively broadens its
view by connecting with a diverse and wide-spread set
of IM users. Finally, their approach will not work with
encrypted instant messaging trafﬁc, such as Skype traf-
ﬁc.
Mannan et al.
conduct a survey and provide an
overview of threats against instant messaging users and
existing security measures[33]. Several scenarios of at-
tacks against IM users are presented, as well as the
weaknesses of default security and privacy features pro-
vided by IM client software. They conclude that ex-
isting public and enterprise IM systems fail to provide
sufﬁcient security and protect users from existing IM
threats. Hindocha[28] provides an overview of several
IM clients and protocols, threats to instant messaging
like worms and trojans, and issues regarding IM block-
ing.
Liu et al.
[31] propose an architecture, for detect-
ing and ﬁltering spim, that incorporates widely deployed
spam-ﬁltering techniques and new techniques speciﬁc to
spim based on the analysis of spim characteristics. In
follow-up publications [32, 30], the authors focus on in-
stant messaging worms.
In [32] worm propagation is
modeled and traced through multicast event tree trac-
ing, while in [30] a formal IM worm modeling based on
branching process is presented. Williamson et al. [38]
apply virus throttling as a mitigation measure against
viruses and worms that spread through instant messag-
ing. They explore how several throttle parameters delay
propagation without interfering with normal trafﬁc.
Provos et al. [36] follow a different approach than
ours for locating URLs that distribute malicious content.
They actively scan a large number of URLs to locate ma-
licious actions and focus only on drive-by downloads,
while we passively collect URLs from spam messages
in IM trafﬁc. A very interesting fact is that their ﬁnd-
ings show that there is a difference between the domains
of the frontend servers that contain URLs that exploit
vulnerabilities in users’ browsers or plugins, and the do-
mains of the backend servers that distribute the malware.
However, our results based on URLs collected by the
HoneyBuddy infrastructure do not reveal any such fron-
tend servers. All malware samples were downloaded
from the same domain without redirection to a different
domain. This highlights a different approach to malware
distribution between drive-by downloads and phishing
campaigns.
3 Attacks on Instant Messaging networks
The high population of IM networks makes them an
attractive target for attackers that try to exploit them
for malicious purposes, such as spreading malware and
scamming. We identify four different scenarios of at-
tacks on IM networks.
Malware infection. Recent malware instances [27]
can attach to a victim’s instant messaging client and
start sending URLs that point to malicious websites, or
spread themselves by sending executables. In the most
common case the malware instance logs in to the IM net-
work, randomly selects users from the victim’s contact
list, sends the malicious URLs or ﬁles and then immedi-
ately logs out. In order to be more appealing to potential
victims, the URLs point to domains whose name con-
tains the username of the recipient, for example http:
//contact_username.party-pics.com . The
vast majority of the attack campaigns we have detected
send messages in English. However, we believe that at-
tackers will soon shift towards localized messages, as is
the case with one localized phishing site that we have
detected.
Compromised accounts. Attackers can also use
compromised credentials to log in as several different
users and ﬂood the victims’ contact lists. Many ser-
vices, like MSN, use uniﬁed credentials for e-mail and
instant messaging, making life easier for attackers. At-
tackers can harvest IM accounts by setting up phishing
sites for the service, by planting key-loggers or through
social engineering. A relatively known attack campaign
is that of websites advertising a service that can reveal
to users if someone has blocked them. If the user en-
ters her IM credentials in the website, she is redirected
to a page from another domain where nothing happens.
Figure 1. Screenshot from an MSN phish(cid:173)
ing site.
Later on, the phishing site owner logs in as the user and
sends messages to the victim’s contact list. A screenshot
of such a phishing site is displayed in Figure 1. A study
of the phishing domains is presented in section 5.
Exploiting weak privacy settings. Even in the ab-
sence of malware infection or stolen credentials, some
messengers provide the option to allow incoming mes-
sages from people who are not in the user’s contact list.
We tested the latest client versions of the most popular
IM services: MSN live messenger (version 14.0.8089),
Skype (version 4.1), Yahoo (version 10) and AIM (ver-
sion 7.1). MSN live messenger is the only IM client
we tested that has a privacy setting enabled by default
that blocks messages from accounts not contained in the
contact list. Skype, Yahoo and AIM by default allow
anyone to send instant messages to our account, but this
setting can be opted-out. Attackers exploit these settings
to send unsolicited messages to IM users.
Exploiting client software. IM client software suf-
fers from the problem of monocultures. Once an exploit
is discovered, then automatically millions of clients can
be infected immediately [26]. While in the case of mal-
ware infection exploits take advantage of the IM client to
spread, this case involves the attack where the IM client
is used to infect the rest of the machine.
4 Design and implementation
HoneyBuddy was designed taking into consideration
the four attack scenarios described in section 3. In con-
trast to previous work[39], HoneyBuddy does not use
modiﬁed versions of open source alternatives. It rather
uses the latest version of the original clients, the same
software most users install. The main reason for this
choice is that direct attacks on IM client software will
be detected. The basic concept behind HoneyBuddy is
to add random accounts to a decoy IM account and mon-
itor the incoming connections. As HoneyBuddy is in
fact a honeypot, any incoming communication is by de-
fault suspicious. For our prototype we chose the MSN
service due to its popularity. However, the design of
HoneyBuddy is generic enough to allow the fast imple-
mentation of other services as well, like AIM, Skype and
Yahoo messengers. Furthermore, MSN live messenger
2009 inter-operates with Yahoo, and is planned to intro-
duce interoperability with Google Talk, AIM and other
services, rendering our architecture deployable for all
major instant messaging services1. All deployed mes-
sengers run in a fully patched Windows XP SP3 system.
4.1 Architecture
HoneyBuddy has three main components; a harvest-
ing module, a script-based engine that handles the MSN
messenger clients and the inspection module.
The harvesting module is responsible for gathering
accounts that will later be added to the decoy accounts.
All harvested accounts are inserted in CTT ﬁles (MSN
contact ﬁles) that are imported in the messengers and
all accounts listed are automatically invited. Another
way is to search for e-mail addresses that belong to the
@hotmail.com and @live.com domains. Other poten-
tial sources are sites where users advertise their MSN
account, such as [10]. A more advanced method is to
harvest account names from popular social networking
sites.
The script-based engine starts the messengers and in-
vites all contacts gathered from the harvesting module.
Based on the AutoIt software [3] , we can automatically
start the application, import CTT ﬁles and invite other
accounts to our friend list. The AutoIT software allows
the manipulation of the windows of an application the
same way a user would manually click, monitor the sta-
tus of the application and check for new windows (in
order to check for incoming messages). After encoun-
tering an attacker that waited for a reply to his initial
message before sending the malicious URL, we modi-
ﬁed our system to send a random automated response
to each incoming message. When an incoming mes-
sage comes and includes a request for a ﬁle transfer,
the engine automatically accepts the transfer. As each
1An experimental deployment of Skype and Yahoo honeypots col-
lected too few URLs to extract any conclusions.
messenger can only have a limited number of friends
in its contact list, it is preferable to run multiple mes-
sengers. For resource efﬁciency reasons, we used MSN
Polygamy [12] in order to run multiple MSN messen-
gers on a single platform without the need of additional
virtual machines.
The inspection module monitors the logs of the mes-
sengers for malicious URLs. It additionally checks the
default download folder for new ﬁle transfers. An inter-
esting ﬁnding is that we received URLs and malware in
the Hotmail inboxes of our accounts. Thus, we extended
the inspection module to also fetch and analyze e-mails,
so as to extract URLs and executable attachments. All
malicious URLs are stored in a database and are queried
every one hour to check their uptime status.
4.2 Contact sources
We used two major sources for ﬁnding and adding
contacts. The ﬁrst one was queries for contact ﬁles
and e-mail accounts belonging to the @hotmail.com and
@live.com domains. Simple queries like “ﬁletype:ctt
msn” or “inurl:’@hotmail.com” were able to provide us
with thousands of contacts. We also harvested e-mail
accounts from other popular sites like buddyfetch.
com[4], from which we extracted 38,000 hotmail ad-
dresses. Overall, we have invited 14,912 contacts to be-
come friends with our accounts. 3,012 of those (20%)
accepted our invitation. The exact number of invitations
and acceptances per decoy account is displayed in Fig-
ure 2. The ﬁve decoy accounts denoted in Figure 2 as de-
coy accounts 14 to 18, sent a thousand invitations each,
to addresses extracted from buddyfetch.com. We
plan on adding the remaining accounts to our system in
the near future. More advanced methods of harvesting
[17] can be based on popular social networking sites like
Facebook. By crawling such networks, one can collect
IM accounts from accessible proﬁle pages.
Other potential sources are sites where users adver-
tise their MSN account, such as messengerfinder
[10]. The messengerfinder site contains more than
25,000 active messenger contacts that are advertised by
their owners for social networking purposes. We adver-
tised our accounts on this site and instructed our honey-
pot messengers to accept any friend request. So far, we
have added 3,505 contacts while this number increases
daily. The exact number of contacts per decoy account
is shown in Figure 3.
4.3 Hardening against direct attacks
HoneyBuddy runs the latest version of the original
s
t
c
a
n
o
C
t
1100
1000
900
800
700
600
500
400
300
200
100
0
i
d
e
v
e
c
e
r
s
n
o
i
t
a
t
i
v
n
I
1200