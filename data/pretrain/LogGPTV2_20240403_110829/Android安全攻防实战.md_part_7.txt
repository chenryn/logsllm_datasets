2.4验证app的签名
在上一节中，我们一步步地学习了app是如何签名的，以及怎样生成密钥，以便
任务是很重要的。因为这不光能让你洞悉验证机制是如何工作的，也给了你一个深
入探究app安全加密方式的机会。
准备工作
为了能完成本次实验，你需要：
• JDK:
。一个已经签好名的app样本，我们将验证其中的签名。
以上就是本次实验所需的材料，我们开始！
怎么做…
要验证app的签名，你需要执行下列操作。
1.Java JDK中有一个名叫“jarsigncr”的工具，我们可以用它来搞定这个苦差
事。你要做的就是执行下面这条命令：
2.现在，你要做的就是查看屏幕上输出的jar验证字符串。它表示这个app的
签名已经被验证了。
2.5探索AndroidManifest.xml文件
对于Androidapp安全专家来说，最重要的信息源应用也许非manifest莫属了。
Manifest 中含有与app的权限以及组成app的各个部分的组件相关的所有信息。而且
它还能向你提供相当一部分关于在你的平台上，这些组件都能与其他app做哪些交互
操作的细节。我将把本次实验作为一个讨论 app 的 manifest、它的结构，以及样例
manifest 中各个组件所代表的含义的好机会。
准备工作
在开始之前，你需要准备一些软件、
•Windows 版的 WinZip
37
---
## Page 56
Android安全攻防实战
* Java JDK
·一个称手的文本编辑器，Vi/Vim 就很不错，Emacs，Notepad++和Notepad
也很酷。对这我们没什么讲究。
·Android SDK。（毫不奇怪吧！）
你可能也需要去下载一个名为apktool的工具。用它可以相当方便地解析
AndroidManifest.xml中的内容。好吧，实际上这个工具所做的也不过就是把另一个
Android SDK中的另一个工具的输出重新排了一下版而已。安装它很容易。你要做的
也就是下面这几步。
1.下载这个工具，你可以在 http://android-apktool.googlecode.com/files/apktool1.
5.2.tar.bz2 下载。
如果你已经装好了Android SDK，你只要把apktool解压到 SDK中的
"platforms-tools”目录中即可。具体来说就是：
C:\\[你的 sdk 安策路径]\sdk\platform-tools\
在Linux 机器上，该路径为：
/[你的 sdk 安第鸡径]/sdk/platform-tools/
请注意，一定要把apktool.jar和其他apktool脚本都放在这个目录下，而不能
给它们单独开一个子目录！
2.如果你还没下载过Android SDK，那你还需要去下载一些依赖文件。它们的
下载地址是：
http://code.google.com/p/android-apktool/downloads/list
即，如果你使用的是Windows 计算机，你应该去http:/android-apktool.
googlecode.com/files/apktool-install-windowsr05-ibot.tar.bz2 下 载 apktoo1。
如果你使用的是Linux Debian 系统，你应该去http://android-apktool
googlecode.com/files/apktool-install-linux-r05-ibot.tar.bz2 下载。
和上面一样，一定要把所有下载的文件放在同一个目录下。
3.搞定之后，运行下面这条命令测试一下。
Windows系统中：
C:\[apktoo1 所在目录]\apktoo1help
Debian Linux系统中：
8
---
## Page 57
第2章实践app安全
/[apktoo1所在目录] /apktoo1-he1p
如果都搞好了，请接着读下一步，我们将正式开始分析一个
AndroidManifest.xml 文件。
怎么做.….
要从一个给定的app 的apk 包里提取出 AndroidManifest.xml 文件，需要执行下列操作。
1.把apktool 应用到你的 APK 文件上。这次我们还是使用上几次实验中从
Android 虚拟设备中提取出来的 Contacts.apk这个app。在命令行提示符下输
入下列命令，并确保你的工作目录一也就是你的终端/命令行提示符当前所
在的目录—是你打算存放apktool解压结果的那个目录。
在Debian Linux 系统中：
在Windows 系统中：
例如，如果你用Contacts.apk这个app做例子，你想要把提取出来的所有文
件都放到一个名为“decoded”的文件夹里，在Linux系统中，你可以输入下
面这条命令，如图2.13所示。
~/adt-bundle-1inux-x86_64/sdk/platform-tools/apktool d f -s
Contacts .apk decoded*
muckLab/toolsapk-toat/apal4-f-s
ng.apk d
Andro1dManifest.asl y1h resr3179sokan/gktoo1/1ra
zk/1.apk
 2.13
2.现在你可以去查看app的manifest了。它应该就在上一步中，你指定的提取
目录中的一个名为“AndroidManifest.xml”的文件中。只需使用你喜欢用的
文本编辑器（对于Linux用户面言，系统自带的就有好多种文本编辑工具），
打开AndroidManifest.xml文件，就能查看其中的内容。
①原文如此。尽管和下面这个图例中使用的示例APK不一样，但这并不影响阅读和理解。—译者注
39
---
## Page 58
Android安全攻防实战
Linux系统下：
vi [path-to-your-decoded-data] /AndroidMani.fest.xm]
或者，你也可以用下面这条命令，把它的内容直接显示在终端上：
cat [path-to-your-decoded-data]/AndroidManifest.xm]
Windows 系统下：
C: \Windows\System32\notepad. exe [pathto- decodeddata] \AndroidMani.fest .xem]
3.你应该能在你的终端窗口上（如果你用的是Linux计算机），或者因打开
manifest 而弹出的记事本窗口中看到 manifest 的内容，如图 2.14所示。有些
人可能还不理解屏幕上这些乱七八糟的符号都是些什么意思，或者这些信息
的价值如何。这也是为什么我们会在下一个实验中向你解释app的manifest
的结构中所有重要组成部分的原因。
图 2.14
好了，你可能正在看AndroidManifest.xml文件中列出来的这一堆信息。它们
表示的是什么意思？为什么说这很重要？这些都会在下一个实验中予以阐
述。它向我们提供了关于一些元素（element）及其属性的工作方式的一个很
好的背景知识。我们将只讨论那些与安全和app安全评估相关的最重要的元
素的背景知识。
工作方式
为了帮助理解app的 manifest，我列出了manifest的结构，并解释其中最重要部
分的含义。如果想要进一步学习Androidmanifest语言，可以参考本实验的“拓展阅
读”部分。
Manifest的结构如下所示。
40
---
## Page 59
第2章实践app安全
Cuses=8dk />Cuses=
configuration/>
CapplicatLon>
Cactivity-alias>
.
.
.
. 
Cmeta=dat:a/>
Cneta-data />
下载随书代码
可以用你自己的账号，在 htp/www.packtpub.com网站上下载所
有你已经购买过的书的随书代码。如果你已经买了本书，可以访
问http:/www.packtpub.com/support，用—个电子邮箱注册—个账
号。
41
---
## Page 60
Android安全攻防实战
那么，这些东西到底表示的是什么意思呢？好，让我们开始的旅程。第一行中
是文件类型和Androidmanifest 类型的相关信息。几乎不表示任何做什么或要做什么
的信息。如果你不能从扩展名xml中得出些什么结论的话，那么第一行的信息告诉
你，它是一个可扩展标记语言（eXtensible MarkupLanguage，XML）文件。也就是
说，Android的manifest是一种XML语言。XML是一种主要用来标记你想要使用的
任何语言的格式。一些生产商直接把它描述成一种可以定义被标记的语言的语言。
XML被设计成一个可以描述任何事物的规则的集合！
所以，当你看到如下代码时，你就知道这行下面是一个遵循XML1.0版规范的
XML文件，使用的是UTF-8编码。
我们再来看Android 特有的部分。
该元素是app的 manifest登记项（entry）的开始标记（opening tag）。它标记了
开始的位置，被称为一个XML文档的根（root）元素。下一个标记声明这个app 需
要被赋予一个权限。
在安装app时，根据它所需的权限，屏幕上会显示出一些字符串。“android:name”
这个属性（attribute）就是用来指定应用所需权限的名称的。因此，比如你的app 需
要使用设备的照相服务，在它的manifest中就应该有下面这行代码。
Cuses=permission android:name="android,pernission, CAMERA*>
下一个元素的类型如下所示。
元素中定义了该权限），那么该应用将自动获得这个权
限。
“signatureOrSystcm”：如果之前已经有一个用与该app一样的证书签名的
app获得了这一权限，那么该app将自动获得这个权限。
你，特别是那些需要对app进行专业评估的人士，应该密切注意“protectionLevel”
这个属性的值，尽量验证开发者指定的保护等级是否恰当。你需要能够确保与这些
权限对应的安全风险能够明确地提示给用户。
“protectionLevel”的重要性还在于—它决定了app在安装之前，哪些权限会显
示给用户。那些被标为“dangerous”保护等级的权限肯定会被提示给用户，而只有
①原文如此，谷取官方的开发文档（http://developer.android.com/guide/topics/manifest/permission
element.html)，这一权限应表述为：如果该app是Android系统镜像内的 app，或之前已经有一个
用与该app一样的证书签名的应用获得了这一权限，那么该app将自动获得这个权限。—译者
43
---
## Page 62
Android安全攻防实战
在用户明确要求的情况下，被标为“normal”保护等级的权限才会被提示给用户。换
前是不会被提示给用户的。这就是说，即便app将会使用一个安全风险很大的权限，
相应的警告。当你检查某一个app的manifest时，请考虑这一因素。因为它可以帮助
你判断这个app是如何把安全风险信息告知用户的。接下来看下一个元素类型！
(applicat.ion>
该元素被用来定义一个app的开头。在安全人士眼中，该元素的重要之处在于：
它的属性以及它们是如何对定义在该元素内的组件产生影响的。由于篇幅所限，属
性的定义我就不多扯了，你可以参考http://developer.android.com/guide/topics/manifest/
application-element.html的官方文档了解详情。
“application”元素的一个重要性质是：如果元素中的一些属性只是被定义了默认
值，且该值被元素中定义的组件中相应的属性所继承，那么这些组件将能够重载
（override即重新定义）相关属性。这些能被重载的属性中一个比较出名的元素就是
“permission”——这个属性声明了其他app 要与之交互所需的权限。也就是说，如果
一个app给这个元素设定了某个权限，而它的某个组件在它的属性中又设置了一个不
同的权限，那么最终起作用的将是组件中设定的权限。如果一个正常的app中的某个
组件重载了一个危险的权限，那就将会引入可观的安全风险。
其他一些属性不能被它们的组件重载。这时属性中的值将被应用到每个单独的
组件（的相应的属性）上去。组件拥有下列属性。