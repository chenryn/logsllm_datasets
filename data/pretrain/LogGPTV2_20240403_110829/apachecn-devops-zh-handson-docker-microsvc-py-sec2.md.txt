# 第二部分：设计和运行单一服务——创建 Docker 容器
本节在三章中介绍了单个微服务的创建。它首先展示了一个用 Python 实现的独立 REST 服务，然后继续执行所有必要的步骤，将服务实现为一个独立的 Docker 容器，并创建一个管道来确保服务始终符合高质量标准。
本节的第一章按照第一节中给出的示例描述了单个服务的实现。它描述了要实现的应用编程接口，并使用 Python 生成了一个成熟的微服务，使用 Flask 和 SQLAlchemy 等工具来提高开发的便利性。该服务包括测试策略。
本节的第二章展示了如何将微服务封装在 Docker 容器中，以便代码可以在软件生命周期中不变地执行。介绍了 Docker 的基本用法，如构建和运行容器、使用环境变量以及如何执行测试。还描述了共享并入公共注册中心的容器的过程。
本节的第三章深入研究自动检查容器中引入的任何新代码是否遵循基本的质量准则，包括通过所有测试。它展示了持续的集成实践，并演示了如何使用 Travis CI 在云中创建一个管道，该管道将被集成到 GitHub 存储库中。本章还介绍了如何将生成的容器自动推入注册表。
本节包括以下章节:
*   [第 2 章](02.html)，*用 Python 创建 REST 服务*
*   [第 3 章](03.html)、*使用 Docker* 构建、运行和测试您的服务
*   [第 4 章](04.html)、*创建管道和工作流*