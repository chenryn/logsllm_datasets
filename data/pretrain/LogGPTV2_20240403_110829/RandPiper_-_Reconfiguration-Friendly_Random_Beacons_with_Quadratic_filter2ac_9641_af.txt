must have received missing shares corresponding to the blame mes-
sages it received and forwarded (which includes share for 𝑝𝑖). Thus,
all the honest nodes shares to reconstruct the proposed secrets.
We note that both eVSS and iVSS schemes guarantee secrecy
(see Definition 2.4) only when the dealer is honest. If 𝑡 Byzantine
nodes send a blame message, then an honest but curious node can
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3510commitment VSS.C to the secret 𝑠 on the bulletin board.
bulletin board, each node 𝑝𝑖 ∈ P does the following:
Let VSS be the VSS scheme being used. Let VSS.pp be the public VSS parameters. Let 𝐿 be a dealer with secret 𝑠. Assuming the existence of a
1. Post commitment. If 𝑝𝑖 is 𝐿, then generate shares for every node by running (VSS.(cid:174)𝑆, VSS. (cid:174)𝑊 , VSS.C) ← VSS.ShGen(𝑠), and post the
2. Send shares. If 𝑝𝑖 is 𝐿, then send shares VSS.s𝑗 ∈ VSS.(cid:174)𝑆 and witness VSS.𝜋 𝑗 ∈ VSS. (cid:174)𝑊 over the confidential channel to all nodes 𝑝 𝑗 ∈ P.
3. Send blames. Post
if
4. Open shares. For all blames ⟨blame, 𝐿⟩𝑖, if 𝑝𝑖 is 𝐿, post their shares VSS.s𝑗 and witnesses VSS.𝜋 𝑗 on the bulletin board.
5. Decide. If the published share and witness satisfies VSS.ShVrfy(VSS.s𝑘, VSS.𝜋𝑘, VSS.C) = 1 for every blame, and there are only up to
⟨blame, 𝐿⟩𝑖 on the bulletin board,
VSS.ShVrfy(VSS.s𝑖, VSS.𝜋𝑖, VSS.C) = 0.
𝑓 ≤ 𝑡 blames on the bulletin board, then commit VSS.s𝑗. Otherwise, abort, i.e., output ⊥.
complaints
if no valid share is
received privately or
Figure 5: eVSS [32] protocol description. This scheme is to secret share one secret.
Let VSS be the VSS scheme being used. Let VSS.pp be the public VSS parameters. Let 𝐿 be a dealer with 𝑛 secrets 𝑆 := {𝑠1, . . . , 𝑠𝑛} it wishes to secret share
with nodes P. Assuming the existence of a bulletin board, each node 𝑝𝑖 ∈ P does the following:
is 𝐿, run (VSS.(cid:174)𝑆𝑖, VSS. (cid:174)𝑊𝑖, VSS.C𝑖) ← VSS.ShGen(𝑠𝑖) for all 𝑠𝑖
∈ 𝑆. Build the commitment vector VSS. (cid:174)𝐶 :=
1. Post commitment. If 𝑝𝑖
{VSS.C1, . . . , VSS.C𝑛} which contain commitments VSS.C𝑖 for 𝑠𝑖. Post VSS. (cid:174)𝐶 on the bulletin board.
2. Send shares. If 𝑝𝑖 is 𝐿, collect shares and witnesses (VSS.s𝑗 , VSS.𝜋 𝑗) for every node 𝑝 𝑗 ∈ P, and secret 𝑠𝑖 ∈ 𝑆, and build VSS.(cid:174)𝑆 𝑗 , VSS. (cid:174)𝑊𝑗 . Send
(VSS.(cid:174)𝑆 𝑗 , VSS. (cid:174)𝑊𝑗) to node 𝑝 𝑗 ∈ P.
If 𝑝𝑖 ∈ P is not the dealer 𝐿, then wait to obtain (VSS.(cid:174)𝑆𝑖, VSS. (cid:174)𝑊𝑖) from the dealer 𝐿, and ensure that VSS.ShVrfy(VSS.s𝑗 , VSS.𝜋 𝑗 , VSS. (cid:174)𝐶 𝑗) = 1 holds for
VSS.s𝑗 ∈ VSS.(cid:174)𝑆𝑖, and VSS.𝜋 𝑗 ∈ VSS. (cid:174)𝑊𝑖.
3. Send blames. If invalid/no shares are received from the dealer 𝐿, then send ⟨blame, 𝐿⟩𝑖 to all the nodes. Collect similar blames from other nodes.
4. Private open. Send all the collected blames to the dealer 𝐿. If 𝑝𝑖 is the leader, then for every blame ⟨blame, 𝐿⟩𝑘 received from node 𝑝 𝑗 , send
5. Ack and decide. If 𝑝𝑖 received ≤ 𝑡 blames and the leader responded with valid shares (VSS.(cid:174)𝑆 𝑗 , VSS. (cid:174)𝑊𝑗) for every ⟨blame, 𝐿⟩𝑗 it forwarded, then send an
(VSS.(cid:174)𝑆𝑘, VSS. (cid:174)𝑊𝑘) to node 𝑝 𝑗 .
If 𝑝𝑖 is not 𝐿, then ensure that VSS.ShVrfy(VSS.s𝑗 , VSS.𝜋 𝑗 , VSS. (cid:174)𝐶 𝑗) = 1 for every ⟨blame, 𝐿⟩𝑗 , VSS.s𝑗 ∈ VSS.(cid:174)𝑆 𝑗 , and VSS.𝜋 𝑗 ∈ VSS. (cid:174)𝑊𝑗 .
ack message to the dealer 𝐿.
If 𝑝𝑖 is 𝐿, then post ack certificate (denoted by AC(VSS. (cid:174)𝐶)) on the bulletin board.
If there is an ack certificate AC(VSS. (cid:174)𝐶) on the bulletin board, commit VSS. (cid:174)𝐶, and send (VSS.(cid:174)𝑆 𝑗 , VSS. (cid:174)𝑊𝑗), if received from 𝐿.
6. Reconstruction. Each node 𝑝𝑖 ∈ P does the following:
(a) If there is a share VSS.s𝑖, VSS.𝜋𝑖, send the share and witness to all the nodes.
(b) On receiving 𝑡 + 1 valid shares in VSS.(cid:174)𝑆, reconstruct the secret 𝑠 using 𝑠 ← VSS.Recon(VSS.(cid:174)𝑆). Send 𝑠 to all the nodes.
(c) On receiving an opened secret 𝑠, ensure that VSS.ComVrfy(VSS.C, 𝑠) = 1 and output 𝑠.
On receiving a share and witness (VSS.s𝑗 , VSS.𝜋 𝑗) from 𝑝 𝑗 , ensure that VSS.ShVrfy(VSS.s𝑗 , VSS.𝜋 𝑗 , VSS.C) = 1.
Figure 6: iVSS - Improved eVSS protocol description
violate secrecy, however this was also possible in the bulletin board
based protocol and can be easily solved by assuming an additional
honest node, i.e., 𝑛 > 2𝑡 + 1.
4.2.2 Random Beacon for BRandPiper. In this section, we instanti-
ate bulletin boards using our SMR protocol (Section 3) and present a
random beacon protocol, we call BRandPiper, using the iVSS scheme.
If we use our SMR protocol with rotating leaders, we can commit
blocks of size 𝑂(𝜅𝑛) within 𝑡 +1 epochs while incurring 𝑂(𝜅𝑛2) bits
of communication per epoch. To obtain 1-absolute unpredictability,
we need to reconstruct at least 𝑡 + 1 secrets from distinct nodes in
each epoch. For simplicity, we reconstruct one secret from all nodes
that have not been removed. Using the round-robin leader selection
rule, every node can share secrets at least once every 𝑛 epochs. If in
every epoch, the leader proposes commitments to 𝑛 secrets using
SMR protocol, we can use these secrets for the next 𝑛 epochs in
the reconstruction. Our beacon output step can take advantage of
the homomorphic properties of the underlying VSS scheme VSS to
combine secret shares for multiple secrets from different nodes into
an 𝑂(𝜅)-sized share which can be efficiently broadcast to all nodes.
Honest nodes collect 𝑡 + 1 homomorphic shares to reconstruct the
common randomness 𝑅𝑒. Such reconstructed randomness is guar-
anteed to be unbiasable since an adversary cannot know the secrets
of honest nodes until reconstructed, and an adversary cannot pre-
vent reconstruction. For the same reason, our BRandPiper protocol
ensures 1-absolute unpredictability, even for a rushing adaptive
adversary.
Protocol Details. Leader selection. We employ a round robin leader
selection policy. If an epoch leader 𝑝𝑖 fails to commit within 𝑡 + 1
epochs, it is added to the set of removed nodes P𝑟 and is prevented
from being a future leader. The remaining nodes P \ P𝑟 propose in
a round robin manner.
Setup. During the setup phase, all the nodes are provided with
VSS parameters VSS.pp required for using the VSS scheme VSS.
Each node maintains 𝑛 queues Q(𝑝𝑖), for 𝑝𝑖 ∈ P. Each queue
Q(𝑝𝑖) holds tuples with each tuple containing a secret share, its
witness and commitment proposed by node 𝑝𝑖 when node 𝑝𝑖 was
an epoch leader. During the setup phase, each queue Q(𝑝𝑖) is filled
with 𝑚 = 𝑛 + 𝑡 tuples containing secret shares, witnesses and
commitments for 𝑚 secrets. This ensures that all honest nodes have
common secret shares in Q(𝑝𝑛) and can perform Dequeue(Q(𝑝𝑛))
10
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3511up to epoch 𝑛 + 𝑡 even if 𝑝𝑛 does not propose in epoch 𝑛. This is
because honest nodes perform Dequeue(Q(𝑝𝑛)) (explained later)
in each epoch unless node 𝑝𝑛 has been removed. If node 𝑝𝑛 does
not propose in epoch 𝑛, it is removed only in epoch 𝑛 + 𝑡.
Buffer 𝑡 + 1 shares
𝑝1
𝑝2
𝑝3
𝑝4
𝑝5
𝑣1,1
𝑣2,1
𝑣3,1
𝑣4,1
𝑣5,1
· · · 𝑣1,3
· · · 𝑣2,3
· · · 𝑣3,3
· · · 𝑣4,3
· · · 𝑣5,3
𝑣1,4
𝑣2,4 𝑣2,5
𝑣3,4 𝑣3,5 𝑣3,6
← Q(3)
𝑣4,4 𝑣4,5 𝑣4,6 𝑣4,7
𝑣5,1
← 𝑣5,4 𝑣5,5 𝑣5,6 𝑣5,7 𝑣5,8
Figure 7: An example illustration of BRandPiper for 𝑛 = 5 and 𝑡 = 2
in epoch 𝑒 = 5. The region marked in red are the shares that will be
homomorphically combined in every epoch for reconstruction. In
general, in every epoch, shares from the left-most column will be
used for reconstruction. The region marked in yellow is the addition
of 𝑛 new shares by the leader 𝐿𝑒 = 𝑝5.
Example. Consider an example scenario as shown in Figure 7. In
epoch 5, 𝑝5 proposes and adds 𝑛 VSS shares to the system which
will be committed within 𝑡 + 1 = 3 epochs. If 𝑝5 is Byzantine, by the
end of epoch 8, all the nodes will remove 𝑝5 from future proposals,
thus guaranteeing outputs for every epoch. Until epoch 8 observe
that we have shares for 𝑝5.
Block validation protocol. BRandPiper uses a block validation
protocol to generate valid blocks for use in the SMR. A valid block
in BRandPiper is a vector of VSS commitments VSS. (cid:174)𝐶 along with
acks from 𝑡 +1 nodes. The block validation protocol is essentially an
instance of iVSS where the leader ends up with 𝑡 + 1 votes for a VSS
commitment vector VSS. (cid:174)𝐶. The commitment and ack certificate
is then input to the SMR protocol to ensure that all honest nodes
agree on a single commitment vector. During the SMR protocol,
the honest nodes vote only if a valid block is produced via the
block validation protocol. The block validation protocol guarantees
that if a block is certified, then all the honest nodes have sharings
for all the secrets committed in VSS. (cid:174)𝐶. When these commitments
are committed via SMR, all the honest nodes use the secret shares
in the commitments in different epochs to generate the common
randomness.
The block validation protocol (refer Figure 8) is executed in par-
allel with SMR protocol. The leader 𝐿𝑒 of epoch 𝑒 executes the
block validation protocol while in epoch 𝑒 − 1 to generate an ack
certificate for commitments to be proposed in epoch 𝑒. The protocol
consists of following steps:
Distribute. Leader 𝐿𝑒 creates 𝑛 commitments VSS. (cid:174)𝐶 correspond-
ing to 𝑛 secrets {𝑠1, . . . , 𝑠𝑛} it wishes to share using VSS.ShGen
algorithm for secrets {𝑠𝑖|∀1 ≤ 𝑖 ≤ 𝑛}, along with shares VSS.(cid:174)𝑆 𝑗
:= {VSS.𝜋1,𝑗 ,
. . . , VSS.𝜋𝑛,𝑗}, for all 𝑝 𝑗 ∈ P. We define a block containing 𝑛 com-
mitments VSS. (cid:174)𝐶 as 𝑆𝐵 := ⟨Commitment, VSS. (cid:174)𝐶, 𝑒, 𝑧𝑠𝑒⟩𝐿𝑒 . The leader
:= (cid:8)VSS.s1,𝑗 , . . . , VSS.s𝑛,𝑗(cid:9) and witnesses VSS. (cid:174)𝑊𝑗
𝐿𝑒 sends VSS.(cid:174)𝑆 𝑗, VSS. (cid:174)𝑊𝑗, and 𝑆𝐵 to node 𝑝 𝑗, for all 𝑝 𝑗 ∈ P. Simi-
lar to the SMR protocol, the leader signs the tuple ⟨Commitment,
𝐻(VSS. (cid:174)𝐶)), 𝑒, 𝑧𝑠𝑒⟩ and sends VSS. (cid:174)𝐶 separately to facilitate efficient
equivocation checks. It is important to note that commitment VSS. (cid:174)𝐶,
shares VSS.(cid:174)𝑆 𝑗, and witness VSS. (cid:174)𝑊𝑗 are 𝑂(𝑛)-sized and the shares
VSS.s𝑗 are only sent to node 𝑝 𝑗. Sending only the required shares
to designated nodes reduces communication complexity.
Blame/Forward. If a node 𝑝𝑖 receives a valid secret share VSS.(cid:174)𝑆𝑖,
witness VSS. (cid:174)𝑊𝑖, and sharing block 𝑆𝐵 := ⟨Commitment, VSS. (cid:174)𝐶,
𝑒, 𝑧𝑠𝑒⟩𝐿𝑒 within 3Δ time in epoch 𝑒 − 1, it then calls the function-
ality Deliver(Commitment, 𝑆𝐵, 𝑧𝑠𝑒, 𝑒). The valid share must satisfy
VSS.ShVrfy(VSS.s𝑗 , VSS.𝜋 𝑗 ,
VSS. (cid:174)𝐶 𝑗) = 1, ∀𝑗 ∈ [𝑛]. Otherwise, node 𝑝𝑖 broadcasts ⟨blame, 𝑒⟩𝑖
to all nodes.
Request open. Node 𝑝𝑖 waits for 6Δ time in epoch 𝑒 − 1 to collect
any blames sent by other nodes. If no blames or equivocation by
𝐿𝑒 has been detected within that time, 𝑝𝑖 sends ⟨ack, 𝐻(𝑆𝐵), 𝑒⟩𝑖 to
𝐿𝑒. If up to 𝑡 blames are received, 𝑝𝑖 forwards the blames to 𝐿𝑒.
Private open. If 𝐿𝑒 receives any blames from node 𝑝𝑖, it sends valid
VSS.(cid:174)𝑆 𝑗, witness VSS. (cid:174)𝑊𝑗 for every blame ⟨blame, 𝑒⟩𝑗 received from
node 𝑝𝑖.
Ack. If node 𝑝𝑖 forwarded any blames and received valid secret
shares VSS.(cid:174)𝑆 𝑗 and witness VSS. (cid:174)𝑊𝑗 for every blame ⟨blame, 𝑒⟩𝑗 it
forwarded and detects no equivocation, node 𝑝𝑖 sends a signed ack
⟨ack, 𝐻(𝑆𝐵), 𝑒⟩𝑖 to 𝐿𝑒. In addition, node 𝑝𝑖 forwards secret shares
VSS.(cid:174)𝑆 𝑗 and witness VSS. (cid:174)𝑊𝑗 for every blame ⟨blame, 𝑒⟩𝑗 it received.
Thus, if an honest node sends an ack for the sharing block 𝑆𝐵, then
all honest nodes have their respective secret shares corresponding
to sharing block 𝑆𝐵 (more details in Lemma B.17).
Equivocation. At any time in epoch 𝑒 − 1, if a node 𝑝𝑖 detects an
equivocation, it broadcasts equivocating hashes signed by 𝐿𝑒 and
stops participating in epoch 𝑒 − 1 block validation protocol.
Beacon protocol. We now present the beacon protocol (refer Fig-
ure 9) in BRandPiper. It consists of the following rules for an epoch
𝑒. Here, an epoch corresponds to an epoch in SMR protocol.
Generate Blocks. The leader 𝐿𝑒 of an epoch 𝑒 chooses 𝑛 secrets uni-
formly at random and invokes the block validation protocol while
in epoch 𝑒 −1 to obtain an ack certificate (denoted by AC𝑒(𝑆𝐵)), to
generate a valid block 𝑆𝐵 corresponding to the 𝑛 secrets. In epoch 𝑒,
the leader proposes block 𝐵ℎ with 𝑏ℎ := (𝐻(𝑆𝐵), AC𝑒(𝑆𝐵)) where
AC𝑒(𝑆𝐵) is an ack certificate for commitment 𝑆𝐵 using the SMR
protocol obtained from the block validation protocol. We redefine
valid blocks for the SMR protocol with an additional constraint to
contain an ack certificate created in epoch 𝑒 − 15 and all honest
nodes vote in the SMR protocol as long as the proposed block meets
this additional constraint. As mentioned before, an ack certificate
for a sharing block 𝑆𝐵 implies all honest nodes have secret shares
required to reconstruct the secrets corresponding to commitments
in 𝑆𝐵. Thus, it is safe for honest nodes to vote in the SMR protocol
although they sent blame during the block validation phase.
Update. At the end of epoch 𝑒, node 𝑝𝑖 updates Q(𝐿𝑒−𝑡) as follows.
If 𝐿𝑒−𝑡 proposed a valid block 𝐵𝑙 in epoch 𝑒 − 𝑡 and 𝐵𝑙 has been
committed by epoch 𝑒, node 𝑝𝑖 replaces the contents of Q(𝐿𝑒−𝑡)
with 𝑛 tuples with each tuple containing secret shares, witnesses
5For the first epoch, an ack certificate can be created during the setup phase.
11
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3512This protocol is executed in parallel with BFT SMR protocol in Figure 1 using the round-robin leader selection. Let 𝐿𝑒 be the leader of epoch 𝑒 and the current
epoch be 𝑒 − 1. Node 𝑝𝑖 performs following operations while in epoch 𝑒 − 1:
(cid:8)VSS.𝜋𝑖,1, . . . , VSS.𝜋𝑖,𝑛(cid:9).
:= (cid:8)VSS.s𝑖,1, . . . , VSS.s𝑖,𝑛(cid:9), and VSS. (cid:174)𝑊𝑖
1. Distribute. 𝐿𝑒 waits for Δ time after entering epoch 𝑒 − 1 and then does the following:
• Let {𝑠1, . . . , 𝑠𝑛} be 𝑛 random numbers chosen uniformly from the input space of VSS.