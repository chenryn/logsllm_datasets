    fffff800`01e17f3c e86f657705      call    srvnet!SmbCompressionDecompress (fffff800`0758e4b0)
    3: kd> dd rdx   //压缩数据
    ffffb283`210dfdf0  02460cc0 424d53fe 00030040 004d0009
    ffffb283`210dfe00  18050000 ff000100 010000fe 00190038
    ffffb283`210dfe10  0018f800 31150007 00007000 ffffff10
    ffffb283`210dfe20  070040df 00183e00 00390179 00060007
    ffffb283`210dfe30  00000000 00000000 00000000 00000000
    ffffb283`210dfe40  00000000 00000000 00000000 00000000
    ffffb283`210dfe50  00000000 00000000 00000000 00000000
    ffffb283`210dfe60  00000000 00000000 00000000 00000000
    3: kd> db ffffb283`1fe23050 l1070  //解压后数据
    ffffb283`1fe23050  fe 53 4d 42 40 00 00 00-00 00 00 00 09 00 40 00  .SMB@.........@.
    ffffb283`1fe23060  00 00 00 00 00 00 00 00-05 00 00 00 00 00 00 00  ................
    ffffb283`1fe23070  ff fe 00 00 01 00 00 00-01 00 00 00 00 f8 00 00  ................
    ffffb283`1fe23080  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffb283`1fe23090  31 00 70 00 00 10 00 00-00 00 00 00 00 00 00 00  1.p.............
    ffffb283`1fe230a0  00 00 00 00 3e 00 00 00-01 00 00 00 3e 00 00 00  ....>.......>...
    ffffb283`1fe230b0  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffb283`1fe230c0  4d 53 53 50 00 03 00 00-00 18 00 18 00 a8 00 00  MSSP............
    ffffb283`1fe230d0  00 1c 01 1c 01 c0 00 00-00 1e 00 1e 00 58 00 00  .............X..
    ffffb283`1fe230e0  00 14 00 14 00 76 00 00-00 1e 00 1e 00 8a 00 00  .....v..........
    ffffb283`1fe230f0  00 10 00 10 00 dc 01 00-00 15 82 88 e2 0a 00 ba  ................
    ffffb283`1fe23100  47 00 00 00 0f 42 75 7d-f2 d2 46 fe 0f 4b 14 e0  G....Bu}..F..K..
    ffffb283`1fe23110  c5 8f fc cd 0a 44 00 45-00 53 00 4b 00 54 00 4f  .....D.E.S.K.T.O
    ffffb283`1fe23120  00 50 00 2d 00 43 00 32-00 43 00 39 00 32 00 43  .P.-.C.2.C.9.2.C
    ffffb283`1fe23130  00 36 00 73 00 74 00 72-00 61 00 77 00 62 00 65  .6.s.t.r.a.w.b.e
    ffffb283`1fe23140  00 72 00 72 00 79 00 44-00 45 00 53 00 4b 00 54  .r.r.y.D.E.S.K.T
    ffffb283`1fe23150  00 4f 00 50 00 2d 00 43-00 32 00 43 00 39 00 32  .O.P.-.C.2.C.9.2
    ffffb283`1fe23160  00 43 00 36 00 00 00 00-00 00 00 00 00 00 00 00  .C.6............
    ffffb283`1fe23170  00 00 00 00 00 00 00 00-00 00 00 00 00 21 52 f2  .............!R.
    ffffb283`1fe23180  53 be ee d2 a8 01 46 1d-69 9c 78 f5 90 01 01 00  S.....F.i.x.....
    ffffb283`1fe23190  00 00 00 00 00 43 c5 71-42 a7 43 d6 01 d9 a8 02  .....C.qB.C.....
    ffffb283`1fe231a0  16 83 a3 24 75 00 00 00-00 02 00 1e 00 44 00 45  ...$u........D.E
    ffffb283`1fe231b0  00 53 00 4b 00 54 00 4f-00 50 00 2d 00 43 00 32  .S.K.T.O.P.-.C.2
    ffffb283`1fe231c0  00 43 00 39 00 32 00 43-00 36 00 01 00 1e 00 44  .C.9.2.C.6.....D
    ffffb283`1fe231d0  00 45 00 53 00 4b 00 54-00 4f 00 50 00 2d 00 43  .E.S.K.T.O.P.-.C
    ffffb283`1fe231e0  00 32 00 43 00 39 00 32-00 43 00 36 00 04 00 1e  .2.C.9.2.C.6....
    ffffb283`1fe231f0  00 44 00 45 00 53 00 4b-00 54 00 4f 00 50 00 2d  .D.E.S.K.T.O.P.-    ffffb283`1fe23200  00 43 00 32 00 43 00 39-00 32 00 43 00 36 00 03  .C.2.C.9.2.C.6..
    ffffb283`1fe23210  00 1e 00 44 00 45 00 53-00 4b 00 54 00 4f 00 50  ...D.E.S.K.T.O.P
    ffffb283`1fe23220  00 2d 00 43 00 32 00 43-00 39 00 32 00 43 00 36  .-.C.2.C.9.2.C.6
    ffffb283`1fe23230  00 07 00 08 00 43 c5 71-42 a7 43 d6 01 06 00 04  .....C.qB.C.....
    ffffb283`1fe23240  00 02 00 00 00 08 00 30-00 30 00 00 00 00 00 00  .......0.0......
    ffffb283`1fe23250  00 01 00 00 00 00 20 00-00 6f 26 f2 a8 d5 ab cf  ...... ..o&.....
    ffffb283`1fe23260  14 7d a9 e2 e9 5a 37 0e-94 56 6d 23 d4 42 bf ba  .}...Z7..Vm#.B..
    ffffb283`1fe23270  1c 3d 9b 38 91 d3 b4 0f-cd 0a 00 10 00 00 00 00  .=.8............
    ffffb283`1fe23280  00 00 00 00 00 00 00 00-00 00 00 00 00 09 00 00  ................
    ffffb283`1fe23290  00 00 00 00 00 00 00 00-00 1e a8 6f 1d 2e 86 e2  ...........o....
    ffffb283`1fe232a0  6b b9 6b 8b e6 21 f6 de-7f a3 12 04 10 01 00 00  k.k..!..........
    ffffb283`1fe232b0  00 9d 20 ee a2 a7 b3 6e-67 00 00 00 00 00 00 00  .. ....ng.......
SMB2 WRITE部分结构如下（了解这些就够了吧）： _**StructureSize（2个字节）：**
客户端必须将此字段设置为49（0x31），表示请求结构的大小，不包括SMB头部。 _ **DataOffset（2个字节）：**
指明要写入的数据相对于SMB头部的偏移量（以字节为单位）。 _**长度（4个字节）：** 要写入的数据的长度，以字节为单位。要写入的数据长度可以为0。 _
**偏移量（8个字节）：** 将数据写入目标文件的位置的偏移量（以字节为 **单位）**
。如果在管道上执行写操作，则客户端必须将其设置为0，服务器必须忽略该字段。 *
**FILEID（16个字节）：**[SMB2_FILEID](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/f1d9b40d-e335-45fc-9d0b-199a31ede4c3)
文件句柄。 ……
所以根据以上信息可知，DataOffset为0x70，数据长度为0x1000，从文件偏移0的位置开始写入。查看本次泄露的数据，可以发现正好就是SMB头偏移0x70处的0x1000长度的数据。
所以，前面的UserBufferSizeUsed起了什么样的作用呢？在Srv2PlainTextReceiveHandler函数中会将其复制到v3偏移
0x154处。然后在Smb2ExecuteWriteReal函数（Smb2ExecuteWrite函数调用）中会判断之前复制的那个双字节值是否小于SMB2
WRITE结构中的DataOffset和长度之和，如果小于的话就会出错（不能写入数据）。POC中将这两个字段分别设置为0x70和0x1000，相加后正好等于0x1070，如果将长度字段设置的稍小一些，那么相应的，泄露的数据长度也会变小。也就是说，OriginalCompressedSegmentSize字段设置了泄露的上限（OriginalCompressedSegmentSize
- DataOffset），具体泄露的数据长度还是要看SMB2
WRITE结构中的长度。在这里不得不佩服作者的脑洞，但这种思路需要目标系统共享文件夹以及获取权限，还是有些局限的。
    //Srv2PlainTextReceiveHandler
      v2 = a2;
      v3 = a1;
      v4 = Smb2ValidateMessageIdAndCommand(
             a1,
             *(_QWORD *)(*(_QWORD *)(a1 + 0xF0) + 0x18i64),    //UserBuffer
             *(_DWORD *)(*(_QWORD *)(a1 + 0xF0) + 0x24i64));   //UserBufferSizeUsed
      if ( (v4 & 0x80000000) == 0 )
      {
        v6 = *(_QWORD *)(v3 + 0xF0);
        *(_DWORD *)(v3 + 0x158) = *(_DWORD *)(v6 + 0x24);
        v7 = Srv2CheckMessageSize(*(_DWORD *)(v6 + 0x24), *(_DWORD *)(v6 + 0x24), *(_QWORD *)(v6 + 0x18));    //UserBufferSizeUsed or *(int *)(UserBuffer+0x14)
        v9 = v7;
        if ( v7 == (_DWORD)v8 || (result = Srv2PlainTextCompoundReceiveHandler(v3, v7), (int)result >= 0) )
        {
          *(_DWORD *)(v3 + 0x150) = v9;
          *(_DWORD *)(v3 + 0x154) = v9;    //上层结构，没有好好分析
          *(_BYTE *)(v3 + 0x198) = 1;
    //Smb2ExecuteWriteReal
    3: kd> g
    Breakpoint 5 hit
    srv2!Smb2ExecuteWriteReal+0xc9:
    fffff800`01e4f949 0f82e94f0100    jb      srv2!Smb2ExecuteWriteReal+0x150b8 (fffff800`01e64938)
    3: kd> ub rip
    srv2!Smb2ExecuteWriteReal+0xa5:
    fffff800`01e4f925 85c0            test    eax,eax
    fffff800`01e4f927 0f88b94f0100    js      srv2!Smb2ExecuteWriteReal+0x15066 (fffff800`01e648e6)
    fffff800`01e4f92d 4c39bbb8000000  cmp     qword ptr [rbx+0B8h],r15
    fffff800`01e4f934 0f85d34f0100    jne     srv2!Smb2ExecuteWriteReal+0x1508d (fffff800`01e6490d)
    fffff800`01e4f93a 0fb74f42        movzx   ecx,word ptr [rdi+42h]
    fffff800`01e4f93e 8bc1            mov     eax,ecx
    fffff800`01e4f940 034744          add     eax,dword ptr [rdi+44h]
    fffff800`01e4f943 398654010000    cmp     dword ptr [rsi+154h],eax
    3: kd> dd rdi
    ffffb283`1fe25050  424d53fe 00000040 00000000 00400009
    ffffb283`1fe25060  00000000 00000000 00000005 00000000
    ffffb283`1fe25070  0000feff 00000001 00000001 0000f800
    ffffb283`1fe25080  00000000 00000000 00000000 00000000
    ffffb283`1fe25090  00700031 00001000 00000000 00000000
    ffffb283`1fe250a0  00000000 0000003e 00000001 0000003e
    ffffb283`1fe250b0  00000000 00000000 00000000 00000000
    ffffb283`1fe250c0  00000000 00000000 00000020 00000000
# 物理地址读&&SMBGhost远程代码执行
在进行复现前，对一些结构进行分析，如Lookaside、SRVNET BUFFER HDR、MDL等等，以便更好地理解这种利用方式。
### Lookaside 初始化
SrvNetAllocateBuffer函数会从SrvNetBufferLookasides表中获取大小合适的缓冲区，如下所示，SrvNetAllocateBuffer第一个参数为数据的长度，这里为还原的数据的长度（解压+无需解压的数据），第二个参数为SRVNET_BUFFER_HDR结构体指针或0。如果传入的长度在[
0x1100 , 0x100100 ] 区间，会进入以下流程。
    //SrvNetAllocateBuffer(unsigned __int64 a1, __int64 a2)
    //a1: OriginalCompressedSegmentSize + Offset
    //a2: 0
    v3 = 0;
    ......
      else
      {
        if ( a1 > 0x1100 )                          // 这里这里
        {
          v13 = a1 - 0x100;
          _BitScanReverse64((unsigned __int64 *)&v14, v13);// 从高到低扫描，找到第一个1，v14存放比特位
          _BitScanForward64((unsigned __int64 *)&v15, v13);// 从低到高扫描，找到第一个1，v15存放比特位
          if ( (_DWORD)v14 == (_DWORD)v15 )         // 说明只有一个1
            v3 = v14 - 0xC; 
          else
            v3 = v14 - 0xB;
        }
        v6 = SrvNetBufferLookasides[v3];
上述代码的逻辑为，分别找到length -0x100中1的最高比特位和最低比特位，如果相等的话，用最高比特位索引减0xC，否则用最高比特位索引减0xB。最高比特位x可确定长度的大致范围[1<>i)
+ 0x100的值，也就是length，第三行为 i - 0xc，表示SrvNetBufferLookasides中相应的索引。
比特位 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20  
---|---|---|---|---|---|---|---|---|---  
长度 | 0x1100 | 0x2100 | 0x4100 | 0x8100 | 0x10100 | 0x20100 | 0x40100 | 0x80100
| 0x100100  
索引 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8  
后面的流程为根据索引从SrvNetBufferLookasides中取出相应结构体X的指针，取其第一项（核心数加1的值），v2为KPCR结构偏移0x1A4处的核心号。然后从结构体X偏移0x20处获取结构v9，v7（v8）表示当前核心要处理的数据在v9结构体中的索引（核心号加1），然后通过v8索引获取结构v10，综上：v10
= _(_QWORD_ )( _(_QWORD_ )（SrvNetBufferLookasides[index] + 0x20）+ 8*（Core
number +
1）），如果v10偏移0x70处不为0（表示结构已分配），就取出v10偏移8处的结构（SRVNET_BUFFER_HDR）。如果没分配，就调用PplpLazyInitializeLookasideList函数。
     v2 = __readgsdword(0x1A4u);
     ......
        v6 = SrvNetBufferLookasides[v3];
        v7 = *(_DWORD *)v6 - 1;
        if ( (unsigned int)v2 + 1 < *(_DWORD *)v6 )
          v7 = v2 + 1;
        v8 = v7;
        v9 = *(_QWORD *)(v6 + 0x20);
        v10 = *(_QWORD *)(v9 + 8 * v8);
        if ( !*(_BYTE *)(v10 + 0x70) )
          PplpLazyInitializeLookasideList(v6, *(_QWORD *)(v9 + 8 * v8));