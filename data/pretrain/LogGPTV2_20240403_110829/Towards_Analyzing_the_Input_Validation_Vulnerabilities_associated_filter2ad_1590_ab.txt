Problem 1: To which extent system service code misses
input validation?
Problem 2: How to develop a cost-eﬀective vulnerability
scanner to ﬁnd the vulnerability caused by invalid input?
3. SOLVING PROBLEM 1
The attack surface for Android system services consists of
so many attack vectors. Thus, if the system service does not
verify the input adequately, such as the example depicted in
section 2.2, an attacker could fake the input and make the
device functionality unavailable. We manually inspected the
interface methods in the system services to ﬁnd how many
methods perform the input validation in their function body.
We deﬁne that the method doing the input validation should
satisfy one of the following requirements: a) this method
veriﬁes at least one argument, or b) this method requires
that the app satisﬁes a certain condition. We put b) as a
requirement because if the app does not satisﬁes a certain
condition, such as having certain permissions, the incoming
arguments would be ignored. Furthermore, if a method does
not do input validation in its own function body and directly
invoke another method which checks the input arguments
of the ﬁrst method, we think it has done input validation.
Figure 2 illustrates the ratio between the methods doing
input validation and the methods missing input validation.
For the methods with no arguments, we regarded them as an
individual category. Moreover, towards the method whose
function body is empty, whose arguments are not used or
just returning useless values, we classiﬁed it into the same
category. According to ﬁgure 2, the number of methods
doing input validation is much larger than the number of
methods missing input validation.
It seems that Android system services do well in input
validation. For example, plenty of methods receive a pack-
age name string as an argument and they check the incom-
ing string’s validity.
If the string is not a package name
string, these methods return back error messages. Further-
363
into the system. Our solution was to leverage Android log
system and we made buzzer generate as many log messages
as possible. Then there were two choices to analyze these
log messages: inside Android system or outside Android sys-
tem. We thought that if log messages were analyzed inside
Android system, this would burden the system. Hence, log
messages were analyzed outside Android system.
Figure 3 shows buzzer’s architecture. It consists of four
parts: Service Modules, Service Chooser, Request sender
and logger, and Log Analyzer.
1
One service module in buzzer corresponds with one sys-
tem service in Android system. It generates all the input ar-
guments that these interface methods of one system service
receive. Moreover, each module provides a uniﬁed interface
to the service chooser.
One service module has two parts: Arguments Generator
and Request Data Wrapper. Arguments generator produces
all the arguments the system service methods need and ex-
ports them to request data wrapper. If some arguments are
needed by many system services, these arguments’ gener-
ated methods would be gathered and put into one uniﬁed
module. After request data wrapper receives the arguments,
it packages the arguments into a parcel object which could
be forwarded to Request Sender.
Service chooser acts as a manager in buzzer. It is re-
sponsible for choosing which service module to use. Besides,
the number of fuzzed system service methods is also deter-
mined by service chooser and the number is generated at
random.
Request sender is used to send requests to the system
services through the binder driver. As the request’s data
has been wrapped into a uniform data format in request data
wrapper, request sender doesn’t need to handle it diﬀerently
for diﬀerent system service methods.
Request logger leverages Android logger system.
It
records the entire log, including the system’s state etc. Re-
quest logger also prints the content of the reply from the
system service method.
Log analyzer is oﬄine, i.e., it works outside Android
system after the fuzzing process ﬁnishes. At present, log
analyzer is semi-automatic. It just handles some simple ﬁlter
work and needs manual inspection.
4.3 Implementation
We have implemented buzzer as an Android app in An-
droid 5.0.1 system which was the latest version when we did
the work. There are some challenges in the implementation
process which were solved.
4.3.1 Arguments generating
One of buzzer’s advantages is to eﬀectively produce the
arguments to pass the preliminary check done by the target
system service method. For example, some methods check
whether the incoming arguments are null. If the arguments
are null, these methods just throw exceptions. The eﬀec-
tiveness is achieved by manually inspecting the source code
of the system service methods and recording the arguments
the methods need, especially the arguments which could pass
the initial check.
For the arguments whose types are primitive, buzzer uses
the class java.util.Random to generate these arguments.
1
If we don’t point it out, buzzer refers to the mobile app in
Android system.
Although the type String is not a primitive type, numerous
arguments’ type is String. Except some special strings such
as package name, ﬁle path and so on, buzzer generates a
string whose length is limited in 100 × 1024 randomly, as
strings which are too long would make buzzer crash.
For the arguments of the other types, buzzer generates as
many values as possible, such as android.location.Criteria.
The class android.location.Criteria has nine ﬁelds to be
initialized. Each ﬁeld has diﬀerent value range. Buzzer gen-
erates the argument of this type by traversing all the value
ranges of each ﬁeld. However, some types are too compli-
cated to be generated. For example, buzzer generates the
arguments of the type Intent by an empirical method ac-
cording to the Android documentation.
In Android system, lots of classes are not exposed to the
third-party apps. These classes are called hidden classes.
For instance, an interface method in the system service loca-
tion receives an argument and its type is android.location-
.LocationRequest which is a hidden class. There are two
ways to invoke the hidden classes. The ﬁrst way is to use
Java Reﬂection. The second way is to compile Android
source code and replace Android SDK’s library with self-
compiled one which contains the hidden classes. Because the
ﬁrst method needs more Java code than the second method
does, buzzer uses the second way.
With regard to the arguments which cannot be generated,
null values are used. In addition, if some arguments sent
to some interface methods are not null, these methods may
need the app to have certain permissions. However, the
third-party app may not be authorized to have them. Thus,
towards the arguments of these methods, null values are
also used.
4.3.2 Request handling
Buzzer sends requests to the system services through the
binder driver. It borrows ideas from an Android command,
service. This command could be used to list and check sys-
tem services. It could also call system service methods with
naive arguments by sending requests to the system services.
The parcel object in the request is assembled in the native
code space.
Then there are two problems that should be solved. The
ﬁrst problem is how to pass the parcel object in java space
to the native code space. This problem is solved by man-
ually checking Android source code and learning from the
code. In Android system, when a parcel object is created in
java space, the ﬁeld mNativePtr is initialized by the value
created in the native code space. This speciﬁc value is a
long value cast from a pointer pointing to a native parcel
object. When invoking any methods, the java parcel object
passes this value to the native space. Namely, any oper-
ation in java space is actually done by the native parcel
object. Hence, buzzer creates a native parcel object with-
out initialization. When a java parcel object is ﬁlled with
the arguments, the value of this parcel object’s ﬁeld mNa-
tivePtr is assigned to buzzer’s native parcel object. Then
the parcel object is wrapped into the request which is sent
to the system service through the binder driver. Further-
more, as the reply is also a native parcel object, buzzer could
print the memory layout of this object’s data. The second
problem is how to compile buzzer. Since buzzer heavily de-
pends on the native code which contains lots of private APIs,
such as the native parcel class, normal Android NDK can-
364
Figure 3: Buzzer’s Architecture
not compile buzzer. We solved this problem by compiling
Android’s source code and extracting the necessary libraries
and header ﬁles to conﬁgure the target version’s libraries
including libandroid runtime.so, libbinder.so, etc. To sum-
marize, buzzer uses Android’s native private APIs to send
requests and we deployed a unique building environment for
buzzer.
Additionally, buzzer could send malformed requests to the
special system service servicemanager. Each system service
has a related object with an abstract 32-bit integer token
value in the binder driver. System services must be reg-
istered in servicemanager. Any app that wants to send
request to the system service must obtain the target ser-
vice’s handler from servicemanager which contains the token
value. Servicemanager is a special system service whose to-
ken value is 0. Generally, all requests sent to servicemanager
must be packaged in speciﬁc functions according to the strict
data format. Buzzer bypasses these functions in two steps.
Firstly, buzzer obtains an arbitrary system service’s handler
from servicemanager in native space. Secondly, buzzer sets
the token of this system service’s handler to 0 and uses this
malformed object to invoke the API transact(...).
4.3.3 Too many interface methods
Android 5.0.1 has 96 services and there are 1972 inter-
face methods which could receive requests. If all the meth-
ods are evaluated, lots of time is wasted as some methods
just return error messages. We reﬁned buzzer and made
it more eﬀective in two ways. Firstly, numerous methods
in the system services need the app to have some speciﬁc
permissions. However, third-party apps cannot be autho-
rized to have many permissions.
In other words, buzzer
cannot gain these permissions either. Therefore, buzzer ig-
nores 703 methods of this kind. Secondly, many methods in
the system services don’t have function body or return null
directly, such as the interface method ConnectivitySer-
vice.pendingListenForNetwork(). So buzzer also ignores
these methods and the number is 8. All the omitted meth-
ods were found by hand. Namely, we manually inspected
all 1972 methods to mark certain methods which could be
skipped. In summary, buzzer cuts away the methods which
cannot be fuzzed or have no meaningful function body.
4.4 Findings
Before introducing the ﬁndings, we ﬁrst describe the test-
ing environment. In our study, we ran buzzer on two smart-
phones, a Google Nexus 6 and a Google Nexus 9. Nexus 6
is 32-bit and Nexus 9 is 64-bit. Both of them run Android
5.0.1.
With buzzer, we identiﬁed 16 vulnerabilities classiﬁed into
ﬁve kinds. A few defects were also found.
4.4.1 Vulnerabilities caused by the generated code
Some system service methods receive an argument whose
type is an interface. This kind of interface is generated by
the AIDL (Android Interface Deﬁnition Language) system
[1] of Android SDK. There is a vulnerability in the generated
Java code. Let’s take the IPackageManager interface as an
example. The code in Listing 1 is generated based on the
ﬁle IPackageManager.aidl.
Listing 1: The code generated by the AIDL system
1 public s t a t i c a n d r o i d . c o n t e n t . pm .
IPackageManager a s I n t e r f a c e ( a n d r o i d . o s .
I B i n d e r o b j )
( ( o b j==n u l l ) ) {
2 {
3 i f
4 return n u l l ;
5 }
6 a n d r o i d . o s . I I n t e r f a c e
i i n = o b j .
7 i f
q u e r y L o c a l I n t e r f a c e (DESCRIPTOR) ;
( ( ( i i n != n u l l )&&( i i n instanceof a n d r o i d .
c o n t e n t . pm . IPackageManager ) ) ) {
) ;
8 return ( ( a n d r o i d . c o n t e n t . pm . IPackageManager ) i i n
9 }
10 return new a n d r o i d . c o n t e n t . pm . IPackageManager .
11 }
Stub . Proxy ( o b j ) ;
As shown in the listing, the function asInterface takes an
IBinder object as its argument. A not-null IBinder object
would be cast into an android.content.pm.IPackageManager
interface if it could pass the check. Otherwise, an IPack-
ageManager proxy would be generated by encapsulating the
IBinder object. Namely, the function asInterface would
always return an IPacakgeManager interface if the IBinder
object is not null. Here is the vulnerability. It allows an at-
tacker to forge the target interface with an arbitrary not-null
IBinder object.
A few system service methods receive an interface as their
argument, and they do not verify the interface adequately.
With this vulnerability mentioned above, a malicious app
could fabricate an interface with a fake object (such as an
IBinder object representing system service X from service-
manager) and send it to the system service A. When the
method of system service A invokes this interface, this ser-
vice would crash if the SecurityException is not handled.
365
could crash the system service and its hosting process.
4.4.2 Vulnerability in Servicemanager
Servicemanager is a special system service whose token
number is zero. It must receive the request whose ﬂags value
is zero, i.e., servicemanager return a reply to the app. How-
ever, if servicemanager receives a request whose ﬂags value
is one, servicemanager would exit and restart.
Servicemanager runs in the process /system/bin/service-
manager which is a core process launched by the process init.
Its restart would cause several processes to restart including
healthd, zygote, media, surfaceﬂinger and drm [2, 3]. Zygote
is also a signiﬁcant process so that its restart would lead
to the exit of all the apps and only the system apps would
restart. Furthermore, servicemanager’s restart has no inﬂu-
ence upon the process /system/bin/keystore. This leads to
a following severe problem. Before elaborating this prob-
lem, we ﬁrst explain the reason why servicemanager cannot
receive a request whose ﬂags value is one.
When servicemanager receives the request whose ﬂags value
is one, its related binder_thread’s transaction_stack in
the binder driver would be NULL. Then the binder_thread’s
return_error would be set BR_FAILED_REPLY when service-
manager replies to this request. When the method binder_t-