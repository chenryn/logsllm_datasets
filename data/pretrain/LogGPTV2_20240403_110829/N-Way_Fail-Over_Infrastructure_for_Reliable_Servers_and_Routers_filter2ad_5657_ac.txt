### Completion and Reconfiguration
Wackamole reconfigures without the need for additional routing information transfer. This setup is similar to the one described in Section [specific section number]. In both scenarios, our solution offers the advantage of allowing a heterogeneous set of physical routers to collaborate in forming a virtual router. By using a variety of architectures and operating systems for the routers, we provide increased protection against security exploits that may target specific platforms.

### Performance Results
To evaluate Wackamole's performance, the most relevant metric is the duration of service interruption experienced by a client when the server it is communicating with becomes unavailable due to a fault. We report the average availability interruption time when a computer running Wackamole fails and its virtual addresses must be reallocated to another computer, as measured from the client's perspective.

In our experiment, we placed a simple server process on each computer using Wackamole. The server responds to UDP packets by sending a packet containing its hostname. A client process on another computer continuously accesses a specific virtual address by sending UDP request packets at a specified interval and records the hostname of the responding server along with the time since the last response was received. For our experiments, we used a 10ms interval between requests, which is the smallest practical value, determined by Linux context-switch times.

When a fault is induced by disconnecting the network interface, the client stops receiving responses. Once Wackamole completes the IP address reallocation and the client's ARP cache is updated, the client resumes receiving responses from the new server. The time elapsed between the last response from the disabled computer and the first response from the new server is the availability interruption time from the client's point of view. While there is a small possibility for error due to the request interval and network fluctuations, our measurements represent an upper bound on the actual interruption time.

Wackamole depends on the Spread group communication toolkit for membership change notifications. Therefore, the availability interruption time includes four actions: Spread's detection of membership changes, Spread's daemon and process group membership installation, Wackamole's state transfer and virtual address reallocation, and Wackamole's ARP spoofing.

Given this dependency, we conducted two sets of experiments. The first set uses the default Spread settings, designed to perform adequately on most networks. The second set uses a fine-tuned version of Spread, adjusted specifically for Wackamole and our network setup. Both experiments were run on a 100Mbit Ethernet LAN cluster, maintaining 10 virtual IP addresses and varying the number of servers from 2 to 12.

Table 1 shows the differences between the two experiment setups. The timeouts cover the major components of the time it takes for Spread to notify Wackamole of network faults. The distributed heartbeat timeout specifies an interval after which a Spread daemon notifies other daemons that it is still operational. The fault-detection timeout begins at approximately the same time; if a daemon has not specified that it is operating after the fault-detection timeout expires, Spread assumes a fault and attempts to reconfigure. The discovery timeout is the time spent determining the available set of Spread daemons and installing this configuration view at each daemon. Thus, the time it takes for the default Spread to notify Wackamole of a failure ranges from 10 to 12 seconds, while for the tuned Spread, it ranges from 2 to 2.4 seconds.

Figure 5 displays the average availability interruption time when varying the cluster size for each version of Spread. The results show that the Spread timeouts account for the majority of the recorded interruption time.

These results were obtained using a cluster of servers under low average load. Both Wackamole and Spread can be used in production on highly-loaded machines, but it is recommended to run both daemon processes with high priority (real-time priority under Linux) to avoid false-positive errors. This has no adverse impact on cluster performance as Spread and Wackamole consume minimal resources in this application.

The availability interruption time when a Wackamole daemon leaves voluntarily is also relevant. This occurs when Wackamole daemons are taken offline for administrative or policy reasons. However, this time interval is difficult to measure precisely due to context switch times and other low-level fluctuations. Our measurements suggest a conservative upper bound of 250 milliseconds of availability interruption on our experimental cluster, with most measurements recording an interruption time as small as 10ms.

### Related Work
Wackamole has evolved from an idea first introduced in [1]. It benefits from extensive research in group communication and distributed algorithms. Various techniques have been employed to provide availability for critical services, and our IP fail-over solution is often used with load-balancing mechanisms. Wackamole is frequently used with the mod-backhand load-balancing module for web servers. We do not further address the coupling between Wackamole and load-balancing techniques as it is outside the scope of this paper.

Research in group communication has led to the implementation of several systems providing properties similar to those required by Wackamole, such as Horus [21], Ensemble [10], and Totem [2]. Wackamole uses a design similar to the state machine approach for maintaining consistent state in distributed systems [19, 16].

Wackamole is designed to preserve the IP presence of a service. The Virtual Router Redundancy Protocol (VRRP) performs a similar task for routers, specifying an election protocol that dynamically assigns responsibility for a virtual router to one of the VRRP routers on a local area network. VRRP is chaired by an IETF working group and formalized into an Internet Standard RFC 2338 [22]. A similar protocol is the Hot Standby Router Protocol (HSRP) developed by Cisco [11], which elects one router to be the active router and another to be the standby router. HSRP routers send hello messages, and the standby router takes over if the active router faults. Routers may be assigned priorities, and the router with the highest priority becomes the active router after initialization. By default, hello messages are sent every 3 seconds, and the Active and Standby timeouts are set to 10 seconds.

Front-end high-availability and load-balancing devices are often used to provide uninterrupted service in the event of a system failure. These devices perform application-level checks and present a virtual IP address to which clients connect. They are commonly used today to support large Internet sites and are provided by various vendors, including Cisco’s Arrowpoint [4], Foundry’s ServerIron [12], F5’s BIG/ip [5], Coyote-Point’s Equalizer [7], and Linux Virtual Server [13].

While these components may provide more than just high-availability, they themselves must be made highly available. Each vendor has its own method, but an application-independent protocol such as VRRP or Wackamole could be used to accomplish this. Many services need high availability and only remedial load-balancing techniques such as multiple DNS A records. Using an IP fail-over protocol directly on the machine providing the service reduces the need for complicated, expensive, and unnecessary high-availability/load-balancing components.

The Linux Fake project [8] provides IP fail-over through service-probing and ARP-spooﬁng. The availability of the main server is probed regularly, and upon failure detection, a backup server instantiates a virtual IP interface and sends a gratuitous ARP request to accelerate the transition.

PolyServe Matrix HA [17] provides a service similar to Wackamole. Until recently, the Polyserve solution only offered pairwise fail-over, where every server is covered by one other specific server. The latest version uses the Spread Toolkit and provides N:M, N:N, and N:1 IP failover.

In their presentation of the Raincore Distributed Session Service infrastructure [9], the authors mention a Virtual IP Manager application that, like Wackamole, exploits underlying group communication guarantees to provide fail-over for servers and indicate that the technology can be applied to firewalls or routers.

### Conclusions
This paper presents a software-based distributed solution for providing high availability for clusters and routers at the IP addressing level. The core algorithm relies on a group communication service to monitor the currently connected membership and reallocate virtual IP addresses accessible to client machines between available servers. We presented the algorithm, discussed its correctness, and provided experimental performance results.

Wackamole has been available as an open-source tool since August 2001 (www.wackamole.org). Over the past 20 months, the system has been downloaded more than 1000 times and is actively used in production environments for both web-cluster and router availability applications. This work demonstrates how sound academic research can make a significant impact in production environments.

### Acknowledgements
We thank Jim Burns, Brian Coan, Gary Levin, and Sanjai Narain from Telcordia Technologies for their insightful discussions and suggestions.

### References
[1] Y. Amir, Y. Gu, T. Schlossnagle, and J. Stanton. Practical cluster applications of group communication. In Proceedings of the IEEE International Conference on Dependable Systems and Networks, New York, NY, 2000.
[2] Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella. Fast message ordering and membership using a logical token-passing ring. In Proceedings of the 13th IEEE International Conference on Distributed Computing Systems, May 1993.
[3] Y. Amir and J. Stanton. The spread wide area group communication system. Technical Report CNDS 98-4, Johns Hopkins University, Center for Networking and Distributed Systems, 1998.
[4] Cisco/arrowpoint. http://www.cisco.com/en/US/products/hw/contnetw/ps792/index.html.
[5] BIG/ip. http://www.f5.com/f5products/bigip/.
[6] K. P. Birman and T. A. Joseph. Exploiting virtual synchrony in distributed systems. In Proceedings of the ACM Symposium on OS Principles, pages 123–138, 1987.
[7] Equalizer. http://www.coyotepoint.com/equalizer.htm.
[8] The Linux Fake Project. http://www.vergenet.net/linux/fake.
[9] C. Fan and J. Bruck. The raincore distributed session service for networking elements. In Workshop on Communication Architecture for Clusters. International Parallel and Distributed Processing Symposium, 2001.
[10] M. Hayden. The Ensemble System. PhD thesis, Cornell University, 1998.
[11] Hot Standby Router Protocol. http://www.cisco.com/univercd/cc/td/doc/cisintwk/ics/cs009.htm.
[12] Foundry/ServerIron. http://www.foundrynet.com/products/webswitches/serveriron/.
[13] Linux Virtual Server. http://www.linuxvirtualserver.org/.
[14] L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. Extended virtual synchrony. In International Conference on Distributed Computing Systems, pages 56–65, 1994.
[15] Open Shortest Path First. http://www.ietf.org/html.charters/ospf-charter.html.
[16] F. Pedone. The Database State Machine and Group Communication Issues. PhD thesis, École Polytechnique Fédérale de Lausanne, Switzerland, 1999.
[17] Polyserver Matrix HA. http://polyserve.com/.
[18] Routing Information Protocol. http://www.ietf.org/html.charters/rip-charter.html.
[19] F. B. Schneider. Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys, 22(4):299–319, Dec. 1990.
[20] The Spread Toolkit. http://www.spread.org.
[21] R. van Renesse, K. P. Birman, and S. Maffeis. Horus: A flexible group communication system. Communications of the ACM, 39(4):76–83, Apr. 1996.
[22] Virtual Router Redundancy Protocol. http://www.ietf.org/html.charters/vrrp-charter.html.
[23] Wackamole. http://www.wackamole.org.