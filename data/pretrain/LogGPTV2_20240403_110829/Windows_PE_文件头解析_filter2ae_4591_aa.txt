# Windows PE 文件头解析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 PE文件基本介绍
PE文件的全称是Portable
Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件，PE文件是微软Windows操作系统上的程序文件（来自百度百科）。包括DOS头、PE头、节表、导入表和导出表。
本文主要介绍DOS头、NT头、标准PE头、可选PE头和节表。
在介绍前先了解几个概念：
**虚拟地址（Virtual Address，VA）：**
在windows系统中，PE文件被系统加载器映射到内存中。每个程序都有自己的虚拟空间，这个虚拟空间的内存地址称为虚拟地址。
**相对虚拟地址（Relative Virtual Address，RVA）：**
RVA是PE文件被装在到内存中，某个数据位置相对于装入地址的偏移量。假设一个程序从400000h处装入，代码开始与401000h，于是RVA =
401000h – 400000h，为1000h
虚拟地址（RV）= 基地址（ImageBase）+ 相对虚拟地址（RVA）
有关ImageBase的内容后面会介绍到。
**下图为PE文件的基本结构：**
## 0x02 DOS头
本文使用32位程序做演示。
**DOS头（IMAGE_DOS_HEADER）的大小为40H（64字节）**
**DOS头的基本结构如下：**
struct _IMAGE_DOS_HEADER {
0x00 WORD e_magic; * //5A 4D MZ标记，用来判断是否为可执行文件
0x02 WORD e_cblp; //00 90
0x04 WORD e_cp; //00 03
0x06 WORD e_crlc; //00 00
0x08 WORD e_cparhdr; //00 04
0x0a WORD e_minalloc; //00 00
0x0c WORD e_maxalloc; //FF FF
0x0e WORD e_ss; //00 00
0x10 WORD e_sp; //00 B8
0x12 WORD e_csum; //00 00
0x14 WORD e_ip; //00 00
0x16 WORD e_cs; //00 00
0x18 WORD e_lfarlc; //00 40
0x1a WORD e_ovno; //00 00
0x1c WORD e_res[4]; //00 00 00 00
0x24 WORD e_oemid; //00 00
0x26 WORD e_oeminfo; //00 00
0x28 WORD e_res2[10]; //00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00
0x3c DWORD e_lfanew; * //00 00 00 E8 PE头相对于文件的偏移，用于定位PE文件
};
**在DOS头中比较重要的两个参数：**
`e_magic`：在DOS头开始的位置，大小为2字节，存储的内容一般为`5A 4D`，也就是’MZ’的十六进制，’MZ’是MS-DOS的创建者之一Mark
Zbikowski名字的缩写，通常用来判断文件是否为可执行文件。
`e_lfanew`：在DOS头结束的位置，大小为4字节，是PE头相对于文件的偏移，用于定位PE文件头的位置。
可以通过`e_lfanew`中存储的数据找到PE文件头的位置，图中`e_lfanew`存储的内容为`00 00 00
F0`（小端存储），所以可以定位到PE文件头的位置在F0H。
在`e_lfanew`到PE文件头的这段空间，是由编译器生成，用来存储一些程序运行的信息，可以随意更改，对程序没有影响。
## 0x03 PE文件头
PE文件头是PE相关结构NT映像头的简称，其中包含许多PE装载器能用到的重要字段，在NT头中除了存放了4个字节的PE文件头标识以外还有标准PE头和可选PE头。
**NT头（IMAGE_NT_HEADERS）的基本结构如下：**
struct _IMAGE_NT_HEADERS {
0x00 DWORD Signature; //00 00 45 50 PE文件标识，PE文件头的开始
0x04 _IMAGE_FILE_HEADER FileHeader; //标准PE头
0x18 _IMAGE_OPTIONAL_HEADER OptionalHeader; //可选PE头
};
可以看到在NT头的开始处是一个32位的标志信息，`PE\0\0`，DOS头中的`e_lfanew`指向该位置
### 1、标准PE头
**标准PE头（IMAGE_FILE_HEADER）的大小为12H（20字节）**
**标准PE头的基本结构如下：**
struct _IMAGE_FILE_HEADER {
0x00 WORD Machine; * //01 4C 程序运行的cpu型号：0x0任何处理器 386即后续处理器
0x02 WORD NumberOfSections; * //00 04 文件中存在的节的总数，如果要新增节或者合并节，就需要修改这个值
0x04 DWORD TimeDateStamp; * //4B 67 34 C3 时间戳：文件创建的时间（编译器填写）
0x08 DWORD PointerToSymbolTable; //00 00 00 00 指向符号表（用于调试）
0x0c DWORD NumberOfSymbols; //00 00 00 00 符号表中符号的个数（用于调试）
0x10 WORD SizeOfOptionalHeader; * //00 E0 可选PE头的大小，32位PE文件默认0xE0，64位PE文件默认0xF0
0x12 WORD Characteristics; * //01 22 文件属性 每一位的含义不同
};
**在标准PE头中比较重要的几个参数：**
`Machine`：存储了程序运行的cpu型号，2字节大小，一般0x14C遇见的比较多，这是在网上找到的winnt.h中各个值对应的信息。
#define IMAGE_FILE_MACHINE_UNKNOWN 0
#define IMAGE_FILE_MACHINE_TARGET_HOST 0x0001 // Useful for indicating we want
to interact with the host and not a WoW guest.
#define IMAGE_FILE_MACHINE_I386 0x014c // Intel 386.
#define IMAGE_FILE_MACHINE_R3000 0x0162 // MIPS little-endian, 0x160 big-endian
#define IMAGE_FILE_MACHINE_R4000 0x0166 // MIPS little-endian
#define IMAGE_FILE_MACHINE_R10000 0x0168 // MIPS little-endian
#define IMAGE_FILE_MACHINE_WCEMIPSV2 0x0169 // MIPS little-endian WCE v2
#define IMAGE_FILE_MACHINE_ALPHA 0x0184 // Alpha_AXP
#define IMAGE_FILE_MACHINE_SH3 0x01a2 // SH3 little-endian
#define IMAGE_FILE_MACHINE_SH3DSP 0x01a3
#define IMAGE_FILE_MACHINE_SH3E 0x01a4 // SH3E little-endian
#define IMAGE_FILE_MACHINE_SH4 0x01a6 // SH4 little-endian
#define IMAGE_FILE_MACHINE_SH5 0x01a8 // SH5
#define IMAGE_FILE_MACHINE_ARM 0x01c0 // ARM Little-Endian
#define IMAGE_FILE_MACHINE_THUMB 0x01c2 // ARM Thumb/Thumb-2 Little-Endian
#define IMAGE_FILE_MACHINE_ARMNT 0x01c4 // ARM Thumb-2 Little-Endian
#define IMAGE_FILE_MACHINE_AM33 0x01d3
#define IMAGE_FILE_MACHINE_POWERPC 0x01F0 // IBM PowerPC Little-Endian
#define IMAGE_FILE_MACHINE_POWERPCFP 0x01f1
#define IMAGE_FILE_MACHINE_IA64 0x0200 // Intel 64
#define IMAGE_FILE_MACHINE_MIPS16 0x0266 // MIPS
#define IMAGE_FILE_MACHINE_ALPHA64 0x0284 // ALPHA64
#define IMAGE_FILE_MACHINE_MIPSFPU 0x0366 // MIPS
#define IMAGE_FILE_MACHINE_MIPSFPU16 0x0466 // MIPS
#define IMAGE_FILE_MACHINE_AXP64 IMAGE_FILE_MACHINE_ALPHA64
#define IMAGE_FILE_MACHINE_TRICORE 0x0520 // Infineon
#define IMAGE_FILE_MACHINE_CEF 0x0CEF
#define IMAGE_FILE_MACHINE_EBC 0x0EBC // EFI Byte Code
#define IMAGE_FILE_MACHINE_AMD64 0x8664 // AMD64 (K8)
#define IMAGE_FILE_MACHINE_M32R 0x9041 // M32R little-endian
#define IMAGE_FILE_MACHINE_ARM64 0xAA64 // ARM64 Little-Endian
#define IMAGE_FILE_MACHINE_CEE 0xC0EE
`NumberOfSections`：存储了文件中节的总数，2字节大小，不同的可执行文件节的总数是不一样的，可以通过NumberOfSections得知当前文件节的总数，对节的内容进行遍历，如果要增加或者删除节，也是修改此参数。
`TimeDateStamp`：存储了文件创建的时间，4字节大小，是由编译器写入的。
`SizeOfOptionalHeader`：存储了可选PE头的大小，2字节大小，可选PE头的大小一般是不固定的，通常情况下32位程序为0xE0，64位程序为0xF0，此值可以自定义。
`Characteristics`：存放了文件属性，2字节大小，它的每一位的含义都不同，当前程序的值为`0x0122`，所以换算成二进制就是`0000
0001 0010 0010`，对应的属性如下图所示
**标准PE头在程序中的位置：**
### 2、可选PE头
在标准PE头后面就是可选PE头（IMAGE_OPTIONAL_HEADER），32位程序和64位程序可选PE头大小分别是0xE0和0xF0，在内容上也略有不同。
**32位可选PE头的基本结构如下：**
struct _IMAGE_OPTIONAL_HEADER32 {
0x00 WORD Magic; * //01 0B 说明文件是ROM镜像（0107h），还是普通的可执行的镜像（010Bh）
0x02 BYTE MajorLinkerVersion; //0A 链接程序的主版本号
0x03 BYTE MinorLinkerVersion; //00 链接程序的次版本号
0x04 DWORD SizeOfCode; * //00 06 22 00 所有代码节的和，必须为FileAlignment的整数倍，编译器填写
0x08 DWORD SizeOfInitializedData; * //00 03 16 00
已初始化数据大小的和，必须为FileAlignment的整数倍
0x0c DWORD SizeOfUninitializedData; * //00 00 00 00
未初始化数据大小的和，必须为FileAlignment的整数倍
0x10 DWORD AddressOfEntryPoint; * //00 05 8C 77 程序入口
0x14 DWORD BaseOfCode; * //00 00 10 00 代码开始的基址，编译器填写
0x18 DWORD BaseOfData; * //00 06 40 00 数据开始的基址，编译器填写
0x1c DWORD ImageBase; * //01 00 00 00 内存镜像基址
0x20 DWORD SectionAlignment; * //00 00 10 00 内存对齐
0x24 DWORD FileAlignment; * //00 00 02 00 文件对齐
0x28 WORD MajorOperatingSystemVersion; //00 06 要求操作系统的最低版本号的主版本号
0x2a WORD MinorOperatingSystemVersion; //00 01 要求操作系统的最低版本号的次版本号
0x2c WORD MajorImageVersion; //00 06 该可执行文件的主版本号
0x2e WORD MinorImageVersion; //00 01 该可执行文件的次版本号
0x30 WORD MajorSubsystemVersion; //00 05 要求最低子系统版本的主版本号
0x32 WORD MinorSubsystemVersion; //00 00 要求最低子系统版本的次版本号
0x34 DWORD Win32VersionValue; //00 00 00 00 从来不用的字段，通常设置为0
0x38 DWORD SizeOfImage; * //00 09 70 00 内存中整个PE文件的映射的尺寸
0x3c DWORD SizeOfHeaders; * //00 00 04 00 所有头+节表按照文件对齐后的大小，必须是正确的，否则加载会出错
0x40 DWORD CheckSum; * //00 08 F0 A9 校验和，用来判断文件是否被修改
0x44 WORD Subsystem; //00 02 表明可执行文件所期望的子系统的枚举值
0x46 WORD DllCharacteristics; //81 40 DllMain（）函数何时被调用，默认为0
0x48 DWORD SizeOfStackReserve; * //00 04 00 00 初始化时保留的堆栈大小
0x4c DWORD SizeOfStackCommit; * //00 00 20 00 初始化时实际提交的大小
0x50 DWORD SizeOfHeapReserve; * //00 10 00 00 初始化时保留的堆的大小
0x54 DWORD SizeOfHeapCommit; * //00 00 10 00 初始化时实际提交的大小
0x58 DWORD LoaderFlags; //00 00 00 00 与调试有关，默认为0
0x5c DWORD NumberOfRvaAndSizes; * //00 00 00 10 目录项数目
0x60 _IMAGE_DATA_DIRECTORY DataDirectory[16];
};
**在32位程序中如下图所示：**
`IMAGE_OPTIONAL_HEADER64`和`IMAGE_OPTIONAL_HEADER32`不同的是`IMAGE_OPTIONAL_HEADER64`没有`BaseOfData`参数，并且`ImageBase、SizeOfStackReserve、SizeOfStackCommit、SizeOfHeapReserve、SizeOfHeapCommit`的大小为ULONGLONG，也就是64位8个字节。
**64位可选PE头的基本结构如下：**
struct _IMAGE_OPTIONAL_HEADER {
0x00 WORD Magic; * //02 0B 说明文件是ROM镜像（0107h），还是普通的可执行的镜像（010Bh）
0x02 BYTE MajorLinkerVersion; //0B 链接程序的主版本号
0x03 BYTE MinorLinkerVersion; //00 链接程序的次版本号
0x04 DWORD SizeOfCode; * //00 01 82 00 所有代码节的和，必须为FileAlignment的整数倍，编译器填写
0x08 DWORD SizeOfInitializedData; * //00 01 EE 00
已初始化数据大小的和，必须为FileAlignment的整数倍
0x0c DWORD SizeOfUninitializedData; * //00 00 00 00
未初始化数据大小的和，必须为FileAlignment的整数倍
0x10 DWORD AddressOfEntryPoint; * //00 00 2C 80 程序入口
0x14 DWORD BaseOfCode; * //00 00 10 00 代码开始的基址，编译器填写