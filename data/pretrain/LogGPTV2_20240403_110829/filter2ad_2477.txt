title:POSTER: PsychoRithm: A Framework for Studying How Human Traits
Affect User Response to Security Situations
author:Subhojeet Mukherjee and
Sachini S. Weerawardhana and
Chancey Dunn and
Indrajit Ray and
Adele E. Howe
POSTER: PsychoRithm: A Framework for Studying How
Human Traits Affect User Response to Security Situations
Subhojeet Mukherjee
Sachini Weerawardhana
Chancey Dunn
Indrajit Ray
Computer Science Department, Colorado State University
{mukherje, sachini, cedunn, indrajit, howe}@cs.colostate.edu
Adele Howe
ABSTRACT
User studies to investigate which human traits aﬀect a user’s
response to cyber security related situations are typically
conducted via self-reported surveys. However, it has been
observed that factors such as peer perception, socially desir-
able responding, and responder bias etc. frequently impact
the results, which then do not necessarily reﬂect the actual
behavior of the user when subjected to real world security in-
cidents. To mitigate such biases, we developed PsychoRithm
– a software system that presents diﬀerent real-world secu-
rity scenarios for the subjects and records their real-time
reactions to these scenarios. This paper describes the archi-
tecture of PsychoRithm, the design choices we had to make,
and the challenges we faced in the design process.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security
and protection; H.1.2 [User/Machine Systems]: Human
factors
General Terms
Security, Human factors
Keywords
Security, user reactions, psychological studies
1.
INTRODUCTION
To design eﬀective security tools tailored to the end user,
we need knowledge of how a user perceives cyber security
risks, what factors inﬂuence a user’s decisions about security,
and what risk versus beneﬁt tradeoﬀs a user makes in her/his
decisions. Numerous studies have tried to answer these ques-
tions (e.g., [3, 4, 1]). However, as observed by Howe et al.
[2], most such studies involved self-reported surveys that suf-
fered from issues such as respondent bias, socially desirable
responding and peer perception. The authors posited that
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the Owner/Author(s). Copyright is held by the
owner/author(s).
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
ACM 978-1-4503-3832-5/15/10.
DOI: http://dx.doi.org/10.1145/2810103.2810125.
“experiments based on simulations – where the participant is
put in the actual situation and monitored, can not only help
to reduce such issues but can further be leveraged to assess
emotional reactions of users to interventions and warnings.”
Assuming this hypothesis, we have developed PsychoRithm,
a software system that simulates common computer security
scenarios to study human behavior in situ.
PsychoRithm creates an environment where the subject
is put in real-world situations that resemble a home com-
puter user’s typical computer usage such as emailing, Web-
browsing, social networking, on-line shopping, etc. As the
subject performs these activities in the study, diﬀerent events
happen that can trigger threats of interest in real life. These
events may include asking the user to register with a login
name and a password, to provide sensitive information to
gain access to a site, to respond to pop-ups asking the user
to download a software, etc. PsychoRithm records the user
responses to these actions, including user clicks and time
taken for response. It then cleans up the data and stores
it in a safe location. Currently, PsychoRithm allows us to
study two speciﬁc traits – self-eﬃcacy, that is an individual’s
conﬁdence in her/his ability to perform a security enabling
task on the computer, and cues to action, that is an indi-
viduals’s response to external triggers. However, it can be
easily modiﬁed to study other human characteristics. In this
work, we discuss the design of PsychoRithm. We outline the
major design choices we made and the challenges we faced
in building the system in a Windows desktop environment.
2. MAJOR DESIGN DECISIONS
Our ﬁrst design choice was made in establishing the phys-
ical setup for the experiments. Our experiments were in-
tended to study the home computer user. Microsoft Win-
dows is, even today, one of the most widely used computing
platforms for this group and is a natural choice. The second
decision was whether to use live workstations, sandboxed
environment or simulated environment. We wanted a sys-
tem that could be easily moved to a user location to run
experiments. (For example, if we wanted to study mature
adults, we would could take the setup to a senior center and
conduct the experiments from there.) The possibility of in-
fecting study machines with experiments gone awry is very
real. Even if the experiments are conducted in sand-boxed
environments, it requires considerable system administra-
tion skill and privileges to create security situations and/or
set-up machines to perform the experiment on a useful scale.
Under such circumstances, we decided to create a fully sim-
ulated environment that would mimic the behavior of real
1662Figure 1: The PsychoRithm Component Interaction Diagram
world cyber interaction without making any changes to the
underlying operating system. For example, if a pop-up asked
the user to click on a button to download a software, the user
would be able to click on the button, a download progress
bar would show the changes, and ﬁnally a ﬁle icon would
be placed in a mocked up ﬁle system browser to give the
appearance that an actual ﬁle has been downloaded.
Our third design decision involved how and where to store
the experiment data that was captured. IRB regulations re-
quire us to store subject data in a safe and secure manner.
Moreover, to run enough subjects, we needed to allow mul-
tiple subjects to participate simultaneously. Consequently,
we created a secure remote server that hosted a few aspects
of the experimental environment and also stored experiment
data in a safe manner. In order to prevent the subjects from
accessing any of the underlying system controls, the desktop
side software was designed to run in a kiosk mode.
The environment was instantiated to create three diﬀerent
scenarios. The ﬁrst scenario required users to select, down-
load, install, conﬁgure and run anti-virus software. Self-
eﬃcacy of the users was measured in terms of what steps
they took in completing the actions and how long they took
to perform this operation. To evaluate cues to action, diﬀer-
ent prompts such as appearance of the software, quality of
the web-pages and details about the software were provided.
The second and third scenarios were designed to study user
response to phishing attacks in two separate scenarios, one
depicting a phishing message via social networks (Twitter)
and the second via email. Self-eﬃcacy was evaluated in
terms of whether they succumbed to the phishing attempts
and how much time was spent in performing each task.
To support these scenarios, the platform required a web
browser, and a simulated desktop environment. All of the
required services were simulated using tailored web-pages
served by a web-server and, in one case, an email server.
The simulated web-sites, including their URLS, needed to
closely resemble their original counterparts.
3. SYSTEM ARCHITECTURE
The PsychoRithm software was designed to operate as a
kiosk. Major components of the system and their interac-
tions are shown in Fig. 1. The software generates a Simu-
lated Local Environment on the desktop from which the sub-
ject participates, while services like social media and email
are provided from a diﬀerent machine (the Server Side). The
applications are shown in boxes. Shaded ones represent the
ones with login enabled.
The goal of the local environment is to enable the user
to download, install and run applications. To do so, the
user primarily interacts with the Desktop application. The
Desktop provides application icons, e.g., a web-browser and
a ﬁle-browser. Users can click these icons to launch the cor-
responding applications (shown by dotted lines emanating
from the Launch Application node). One of the anti-virus
applications requires installation. After installation, it no-
tiﬁes the Desktop, which then creates an icon to launch the
application. The Desktop and all applications are supported
by Taskbar. Its primary role in the system is to provide easy
access to all opened applications. The desktop and taskbar
provide an easy interface so that the user can manage the
experiment tasks. At the start of the experiment, the user
validates his experiment username with the Desktop, and
the desktop creates a folder speciﬁcally for that user. Once
the experiment is complete, the Desktop process sends over
all captured data to the server side using sftp/scp, cleans all
of the local storage and kills any process that was initiated
by the system. The desktop system logs the start and stop
of the experiment with timestamps.
The Web-browser component allows the user to browse
the content served from the Server Side. This includes the
anti-virus software websites and the social media and web-
mail services. To make the download process realistic, the
web-browser makes a call to the User Alert Dialog, which
then alerts the user, creates a 0 byte ﬁle in the Downloads
folder and notiﬁes the FileBrowser. The Filebrowser on
startup or being notiﬁed checks the Downloads folder for
new downloaded applications and creates icons for them.
Two anti-virus applications were created using Java’s Swing
Platform. The idea was to create one application which
looks more authentic than the other, and record the choices
made by the users in selecting the applications. Both ap-
plications were equipped with simulated system scanning
capabilities. Fig. 2 shows the view presented to the subject
when the user started scanning one of the anti-cirus soft-
ware. Clicks made on these applications (buttons, widgets,
windows, etc.) were recorded and logged for analysis.
1663the PsychoRithm Desktop. When users double-clicked on
the Firefox icon, the Firefox window was brought above the
Desktop window giving the illusion that a new application
has been launched. A custom designed Firefox extension
allowed users to minimize this window, but not quit it.
File Browsing.
PsychoRithm was built as a package that contained empty
folders like the Downloads and Login data.
It was placed
under the C:\Users\\Documents directory (to
avoid conﬂict with system directories) and identiﬁed with
login name on the ﬂy to create the absolute path to the
package. However, since the path was created dynamically,
we could not conﬁgure the exact location of the Downloads
folder into Firefox and hence used the User Alert Dialog.
A Win32 window with an underlying list-view was used as
the File-Brower for the Download folder. On start-up or on
receiving a notiﬁcation from the User Alert Dialog the File
Browser checked the Downloads folder for any new down-
loaded application and displayed its icon if found.
5. DISCUSSION AND FUTURE WORK
In this paper, we described the design of PsychoRithm,
a software platform to support human behavior studies re-
lated to cyber security. We also highlighted some of the
design challenges we faced in the process of creating this ap-
plication. PsychoRithm has been used to two characteristics
of typical home computer users in three security scenarios.
However, PsychoRithm can be easily adapted for other sce-
narios and other subject characteristics.
Acknowledgment
This material is based upon work supported by the National
Science Foundation under Grant No. 0905232. Any opinions,
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect those of the National Science Foundation.
6. REFERENCES
[1] J. B. Gross and M. B. Rosson. Looking for Trouble:
Understanding End-user Security Management. In
Proceedings of the 2007 Symposium on Computer
Human Interaction for the Management of Information
Technology, Cambridge, Massachusetts, 2007.
[2] A. Howe, I. Ray, M. Robert, M. Urbanska, and
Z. Byrne. The Psychology of Security for the Home
Computer User. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy, San Francisco,
California, May 2012.
[3] B. Y. Ng and M. A. Rahim. A Socio-Behavioral Study
of Home Computer Users’ Intention to Practice
Security. In Proceedings of the 9th Paciﬁc Asia
Conference on Information Systems, Bangkok,
Thailand, July 2005.
[4] M. Pattinson and G. Anderson. Risk communication,
risk perception and information security. In Security
Management, Integrity, and Internal Control in
Information Systems IFIP TC-11 WG 11.1 & WG 11.5
Joint Working Conference, volume 193, pages 175–184,
Fairfax, Virginia, December 2006.
Figure 2: Anti Virus Software Installation Mockup
4. THE CHALLENGES
PsychoRithm needs to be as close to a real world expe-
rience as possible, which presents several implementation
challenges. Many of those had to do with our unwillingness
or inability to make Windows kernel level changes. This
section describes some of the more important challenges.
The Desktop and Taskbar.
To make the Desktop resemble a real desktop we imple-
mented it as the topmost Win32 ToolWindow spanning the
working area of the desktop.
Icons were introduced sepa-
rately via a child list-view window. Inter-process communi-
cation was performed using custom deﬁned messages with
application speciﬁc WPARAM values. Our initial idea of
creating a transparent window over the Windows taskbar
failed because simulating single click messages was slow and
users were exposed to the Start button and Tray icons.
As a result, we implemented our own opaque taskbar as
a Win32 Toolbar that maps a zero-based incremental index
to the launched applications. This index was used to track
buttons/window-handles and close/rearrange them when ap-
plications were closed.
Simulating the Browsing Experience.
We used FireFox version 34.0.5. To create the illusion
that applications were downloaded from a speciﬁc URL and
not our own server, we disabled the Firefox warning dia-
log by editing the mimeTypes.rdf which led to Firefox call-
ing theUser Alert Dialog. Similarly, to make web-sites like
Twitter appear to be served from twitter.com, we decided
to remove the URL bars from the existing Firefox applica-
tion and introduce a custom php stub (enabled with java
script navigation functions) which emulated a URL bar and
allowed users to navigate/reload pages in same browser ses-
sion. Since Firefox does not allow altering URLs, we intro-
duced this stub on all web-pages. Action login was facil-
itated by php session variables and AJAX event handlers.
Users were allowed to perform a task only when the previous
task was complete (we used an incremental session variable
to implement this). Application installation could not be
skipped as users were required to post a veriﬁcation code,
which they obtained after running the applications.
All widgets were disabled using a FireFox extension. To
prevent the Windows taskbar from surfacing above the Desk-
top whenever Firefox started, we started Firefox just before
launching PsychoRithm and hid its main window behind
1664