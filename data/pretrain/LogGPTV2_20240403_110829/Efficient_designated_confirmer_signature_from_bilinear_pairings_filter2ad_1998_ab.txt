3.2 Adversarial Model
The only assumption in the LVS scheme is that the limited veriﬁer will try
his best to preserve the signer’s privacy unless the signer violates some rules
or an emergency occurs. But the limited veriﬁer should never be able to forge
a signature of the signer to frame him. Therefore, “unforgeability” is the basic
cryptographic requirement of LVS scheme. There are three kind of forgers in LVS
scheme: “limited veriﬁer”, “outsiders” and “colluders”. In the proposed schemes,
we only consider the strongest adversarial model for unforgeability: an adversary
can collude with the limited veriﬁer.
140
X. Chen, F. Zhang, and K. Kim
On the other hand, an adversary should not be able to forge a proof to
convince any other party that the signer indeed generated a signature. “Non-
transferability” is another basic cryptographic requirement in LVS scheme. Sim-
ilarly, we think the adversary can collude with the Judge. Also, we suppose the
adversary can also eavesdrop all the information between the limited veriﬁer
and signer. This is the strongest adversarial model for non-transferability. In
this case, the adversary should not collude with the limited veriﬁer anymore
because the limited veriﬁer wants to convince only the Judge of the fact.
3.3 Security Requirements
3.3.1 Unforgeability
Similar to universal designated veriﬁer signature scheme, there are two type of
unforgeability in LVS scheme. The ﬁrst is identical to the usual existential un-
forgeability notion under the chosen message attack. This prevents an adversary
to frame the signer by “generating” a signature of the signer. The second requires
that it is diﬃcult for an adversary (usually the limited veriﬁer) to forge a proof,
which can be used to convince a third party (usually a Judge) that the signer
generated a signature for a message. Because LVS scheme should be converted
into an ordinary one for public veriﬁcation when necessary, the limited veriﬁer
only forges a proof to frame a signer is meaningless even he can.2 In this sense,
we only consider the ﬁrst unforgeability in LVS scheme.
Deﬁnition 1. A LVS scheme is said to secure against an existential forgery
for adaptive chosen message attack if no polynomial bounded adversary A win
the following game with a non-negligible advantage.
1. The challenger C runs the System Parameter Generation algorithm with a
security parameter k and sends the system parameters SP to the adversary A.
2. The limited veriﬁer V runs the Key Generation algorithm to generate his key
pair (pkV , skV) and publishes pkV. Also, the adversary A is allowed to access
the secret key skV.
3. The adversary A performs a polynomial bounded number of queries to
challenger C.
4. Finally, the adversary A outputs a valid message-signature pair (m, s). We
said that A wins the game if m is never queried by A in step 3.
3.3.2 Non-transferability
The property of non-transferability in LVS scheme can be automatically reduced
from universal designated veriﬁer signature scheme.
2 This is diﬀerent from universal designated veriﬁer signature scheme, where it is
enough for the third party to be convinced by such a proof.
Limited Veriﬁer Signature from Bilinear Pairings
141
Deﬁnition 2. Let P (V,J ) be a protocol between the limited veriﬁer V and a
Judge J . The outputs of P (V,J ) is a proof P presented by V which can convince
J the truth of a statement Θ. We said the proof is non-transferable if J is
fully able to generate an indistinguishable proof P(cid:3). In this case, no one can be
convinced of the truth of a statement Θ even if J would like to reveal his secret
key skJ .
4 Our Proposed LVS Schemes from Bilinear Pairings
In this section, we propose two eﬃcient LVS schemes from bilinear pairings
based on the power of diﬀerent adversaries. Furthermore, we present a general
construction of LVS scheme.
4.1 Our Scheme (I)
– System Parameters Generation: Let G1 be a gap Diﬃe-Hellman group
generated by P , whose order is a prime q, and G2 be a cyclic multiplicative
group of the same order q. A bilinear pairing is a map e : G1 × G1 → G2.
Deﬁne two cryptographic hash functions H1 : {0, 1}l → G1, H2 : G2 → Zq
and h : {0, 1}l×G2 → Zq, where l denotes a bound on the message bit-length.
The system parameters are SP = {G1, G2, e, q, P, H1, H2, h, l}.
– Key Generation: The user U randomly chooses rU ∈R Z
∗
q as the secret
key and computes the public key rU P .
– Limited Veriﬁer Signing: Suppose Alice wants to sign the message m for
– Conﬁrmation Protocol: When Alice does not obey some rules, only Bob
can provide a proof to convince a Judge that Alice indeed signed a message
with a conﬁrmation protocol.3 However, the Judge cannot transfer this proof
to convince any other party.
• Bob computes a = e(s, rJ P ).
• Bob sends (a, d) and the message m to Judge.
• Let k = h(m, d). Judge computes l = (drJ /a)k−1 and accepts the proof
if and only if l = e(H1(m), rAP )rJ .
3 Note that any adversary cannot compute s without the information of rB even he
can eavesdrop all the information between Bob and Alice and Judge unless he can
solve CDHP in G2.
Bob. She does as follows:
• Randomly choose a point Q ∈R G1 and compute c = e(Q, rAP ).
• Compute s = Q − rAkH1(m), where k = h(m, e(Q, P )).
• Compute t = H2(e(rAQ, rBP ))−1s.
The signature for message m is the pair S = (c, k, t).
– Limited Veriﬁer Veriﬁcation: On receiving the limited veriﬁer signature
S, Bob computes:
• s = H2(crB )t.
• d = e(s, P )e(H1(m), rAP )k.
• Output “accept” if and only if k = h(m, d).
142
X. Chen, F. Zhang, and K. Kim
Actually, l = e(rAH1(m), rJ P ), which is a universal designated veriﬁer sig-
nature for the message m [26]. Therefore, the Judge will be convinced that
Alice signed the message while he cannot transfer this proof to convince any
other party.
We explain this in more details. The Judge can simulate Bob to generate an
indistinguishable pair (a, d) for any message m as follows:
• He randomly chooses an element d ∈ G2, and computes k = h(m, d).
• He computes l = (e(H1(m), rAP )rJ .
• He computes a = drJ /lk, and outputs (a, d).
– Convertible Limited Veriﬁer Signing: In some situations, the limited
veriﬁer signature should be converted into an ordinary signature for public
veriﬁcation. In Araiki et al.’s scheme, the conversion of the signature requires
the cooperation of the original signer. However, it might be unworkable if
the signer is unwilling or inconvenient to cooperate. In our scheme, both the
signer and limited veriﬁer can convert a limited veriﬁer signature into an
ordinary one:
• Alice (or Bob) publishes the message m and the pair (k, s).
– Public Veriﬁcation: Anyone can be convinced that the signer indeed gen-
erated the the signature for the message m:
• The veriﬁer computes d = e(s, P )e(H1(m), rAP )k.
• Output “accept” if and only if k = h(m, d).
4.2 Our Scheme (II)
In some situations, the message m, e.g., an oﬃcial document, also should be
conﬁdential. Signcryption, ﬁrstly introduced by Zheng [29], provides simultane-
ously both message conﬁdentiality and unforgeablity at a lower computational
and communication overhead compare to Encrypt-and-Sign method. Signcryp-
tion protocol usually should satisfy the property of public veriﬁability, i.e., if
a recipient Bob can recover the signer Alice’s signature, anyone can verify the
signature based on a given signature scheme.4 However, in the limited veriﬁer
signcryption algorithm, the signature can only be veriﬁed by himself even af-
ter the recipient recovered the message-signature pair. Also, it should satisfy the
property of non-transferability, i.e., the recipient can provide a proof to convince
a third party that the signer generated a signature while the third party cannot
transfer the proof to convince any other party. Therefore, the signature on the
message must be invisible in the ciphertext because the adversary can eavesdrop
all the information between the recipient and others. If the adversary knows the
signature, the message and the proof, he can convince any party that the signer
indeed generated the signature. We will explain this later in more details.
We construct limited veriﬁer signature protocol based on “Sign-then-
Encrypt” methodology [6]. Without loss of generality, let Alice is the signer
and Bob is the recipient (limited veriﬁer).
4 Shin et al. [25] deﬁned this “SIG-veriﬁability”.
Limited Veriﬁer Signature from Bilinear Pairings
143
– System Parameters Generation: Let G1 be a gap Diﬃe-Hellman group
generated by P , whose order is a prime q, and G2 be a cyclic multiplicative
group of the same order q. A bilinear pairing is a map e : G1 × G1 → G2.
Deﬁne ﬁve cryptographic hash functions H1 : {0, 1}l → G1, H2 : G2 → Zq,
H3 : Zq → G1, H4 : G1 → {0, 1}l, and h : {0, 1}l × Zq → Zq, where
l denotes a bound on the message bit-length. The system parameters are
SP = {G1, G2, e, q, P, H1, H2, H3, H4, h, l}.
– Key Generation: The user U randomly chooses rU ∈R Z
∗
q as his secret
key and computes the public key rU P .
– Limited Veriﬁer Signing (Signcryption): Suppose Alice wants to sign
the message m for Bob. She does as follows:
• Randomly choose an integer c ∈R Zq and compute S = crAH1(m).
• Compute k = h(m, c).
• Compute U = H2(e(rAP, rBP )k) ⊕ c.
• Compute V = H3(c) ⊕ S.
• Compute W = H4(S) ⊕ m.
The signature for message m is the ciphertext C = (kP, U, V, W ).
– Limited Veriﬁer Veriﬁcation (Unsigncryption): On receiving the lim-
ited veriﬁer signature C, Bob computes:
• c = U ⊕ H2(e(rAP, kP )rB ).
• S = V ⊕ H3(c).
• m = W ⊕ H4(S).
• Verify that kP = h(m, c)P . If not, output “reject”.
• Output “accept” if and only if e(S, P )c−1 = e(H1(m), rAP ).
– Conﬁrmation Protocol: Bob can convince a Judge that Alice indeed
signed a message with the following conﬁrmation protocol.5 From the prop-
erty of universal designated veriﬁer signature, the Judge cannot transfer this
proof to convince any other party.
• Bob computes a = e(S, rJ P )c−1.
• Bob sends a and the message m to Judge.
• Judge outputs “accept” if and only if a = e(H1(m), rAP )rJ .
Note that the Judge is fully able to generate the indistinguishable proof
e(H1(m), rAP )rJ . Therefore, he cannot use this proof to convince any other
party.
– Convertible Limited Veriﬁer Signing: Both the signer and limited ver-
iﬁer can convert a limited veriﬁer signature into an ordinary one:
• Alice (or Bob) publishes the message m and the signature T = c
−1S.
– Public Veriﬁcation: Anyone can be convinced that the signer indeed gen-
erated the the signature for the message m:
• Outputs “accept” if and only if e(T, P ) = e(H1(m), rAP ).
5 Any adversary cannot compute c to recover rAH1(m) without the information of rB
even he can eavesdrop all the information between Bob and Alice and Judge unless
he can solve BDHP in G1.
144
X. Chen, F. Zhang, and K. Kim
4.3 Generalization
Our Scheme (II) can be extended to design a general construction of (convertible)
limited veriﬁer signature.6 The signer generates a universal designated veriﬁer
signature s on the message m and then encrypts the concatenation of m and s
with the limited veriﬁer’s public key P Kv by using a semantically secure prob-
abilistic encryption algorithm ENC. The ciphertext C = ENCP Kv(m||s) is the
limited veriﬁer signature for the message m.
The limited veriﬁer decrypts the ciphertext with his secret key and can then
designate it to any Judge as in the universal designated veriﬁer signature scheme.
For public veriﬁcation, the limited veriﬁer (or the signer) publishes m and s, and
anyone can be convinced that the signer generated the the signature s for the
message m.
Recently, Steinfeld et al. [27] extended standard Schnorr/RSA signatures
into universal designated veriﬁer signatures. Therefore, we can use the general
construction to design (convertible) limited veriﬁer signature scheme without
pairings.
5 Analysis of the Proposed Schemes
5.1 Security
Lemma 1. Under the strongest adversarial model, if an adversary A in scheme
(I) can forge a valid signature (m, c, k, t) with the advantage ε within time T ,
then he can forge the valid signature (m, c, k, s) with the same advantage ε within
time T , and vice versa.
Proof. Suppose the adversary A can forge a valid signature (m, c, k, t) with the
advantage ε within time T , then he can compute s = H2(crB )t since he can
access the secret key rB of the limited veriﬁer Bob, i.e., he can forge the valid
signature (m, c, k, s) with the same advantage ε within time T , and vice versa.(cid:6)(cid:7)
(cid:3) ≥ /n within a time T
Theorem 1. In the random oracle, if there exists an adversary A that can suc-
ceed in an existential forgery against the proposed LVS scheme (I) with an ad-
vantage  within a time T and when performing n queries on signature oracle
and hash oracles h and H1, then there exists an algorithm C can solve the CDHP
in G1 with an advantage 
Proof. Let P is a generator of G1, the following algorithm C can be used to
compute abP for a randomly given triple (P, aP, bP ). Deﬁne the public key of
the signer is aP .