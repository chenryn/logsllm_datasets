    BigDecimal b = new BigDecimal("0.9"); 
    BigDecimal c = new BigDecimal("0.8"); 
    BigDecimal x = a.subtract(b); 
    BigDecimal y = b.subtract(c); 
    if (x.equals(y)) { 
        System.out.println("true"); 
    } 
9. 【强制】定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。 
正例：数据库字段的 bigint 必须与类属性的 Long 类型相对应。 
反例：某个案例的数据库表 id 字段定义类型 bigint unsigned，实际类对象属性为 Integer，随着 id 越来
越大，超过 Integer 的表示范围而溢出成为负数。 
10. 【强制】为了防止精度损失，禁止使用构造方法 BigDecimal(double)的方式把 double 值转
化为 BigDecimal 对象。 
说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。
如：BigDecimal g = new BigDecimal(0.1f); 实际的存储值为：0.10000000149 
正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了
Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。 
Java 开发手册 
  9/44 
  BigDecimal recommend1 = new BigDecimal("0.1"); 
    BigDecimal recommend2 = BigDecimal.valueOf(0.1); 
11. 关于基本数据类型与包装数据类型的使用标准如下： 
 1） 【强制】所有的 POJO 类属性必须使用包装数据类型。 
 2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。 
 3） 【推荐】所有的局部变量使用基本数据类型。 
说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或
者入库检查，都由使用者来保证。 
正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。 
反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，
返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能
够表示额外的信息，如：远程调用失败，异常退出。 
12. 【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。 
反例：POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在
更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。 
13. 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果
完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。 
说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。 
14. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。 
15. 【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source> generate toString
时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。 
说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。 
16. 【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx()和 getXxx()方法。 
说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到。 
17. 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内
容的检查，否则会有抛 IndexOutOfBoundsException 的风险。 
说明： 
String str = "a,b,c,,";  
String[] ary = str.split(",");  
// 预期大于 3，结果是 3 
System.out.println(ary.length);  
18. 【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，
便于阅读，此条规则优先于下一条。 
19. 【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 > 私有方法 > getter / setter 
方法。 
说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可
Java 开发手册 
  10/44 
能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载
的信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最后。 
20. 【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在
getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。 
反例： 
public Integer getData() {      
if (condition) {  
return this.data + 100;  
} else { 
return this.data - 100; 
}  
}  
21. 【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。 
说明：下例中，反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行
append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。 
反例： 
String str = "start";      
for (int i = 0; i  list = new ArrayList<>(2); 
list.add("guan"); 
list.add("bao"); 
String[] array = list.toArray(new String[0]); 
    说明：使用 toArray 带参方法，数组空间大小的 length： 
1） 等于 0，动态创建与 size 相同的数组，性能最好。 
2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。 
Java 开发手册 
  12/44 
3） 等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与上相同。 
4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。 
7. 【强制】在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行
NPE 判断。 
说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果
为 null，则直接抛出异常。 
8. 【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方
法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。 
说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适
配器模式，只是转换接口，后台的数据仍是数组。 
    String[] str = new String[] { "yang", "hao" }; 
    List list = Arrays.asList(str); 
第一种情况：list.add("yangguanbao"); 运行时异常。 
第二种情况：str[0] = "changed"; 也会随之修改，反之亦然。 
9. 【强制】泛型通配符来接收返回的数据，此写法的泛型集合不能使用 add 方
法，而不能使用 get 方法，作为接口调用赋值时易出错。 
说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合
用。第二、经常往里插入的，适合用 
10. 【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行
instanceof 判断，避免抛出 ClassCastException 异常。 
说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。 
反例： 
List generics = null; 
List notGenerics = new ArrayList(10); 
notGenerics.add(new Object()); 
notGenerics.add(new Integer(1)); 
generics = notGenerics; 
// 此处抛出 ClassCastException 异常 
String string = generics.get(0); 
11. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用
Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。 
正例： 
List list = new ArrayList<>();      
list.add("1");      
list.add("2");    
Iterator iterator = list.iterator();  
while (iterator.hasNext()) {              
String item = iterator.next();                       
if (删除元素的条件) {                              
Java 开发手册 
  13/44 
iterator.remove();                 
}      
} 
反例： 
for (String item : list) {          
if ("1".equals(item)) {              
list.remove(item);          
}      
}  
说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？ 