any Error detection (WAE), (2) Write back After Persistent
error detection (WAP), and (3) Write back After errors reach
a Threshold (WAT). The main advantage of these policies
is that they avoid the unnecessary write backs based on the
observation that it is unlikely that every user read operation
will induce a disturbance, thereby they signiﬁcantly reduce
both the energy overhead and memory bandwidth overhead
caused by the unnecessary system writes in WAR.
The key idea of WAE is to write back data only when
ECC detects errors. It leverages ECCk during the user read
operation to detect and correct up to k errors of the data block.
When errors are corrected, the corrected data is written back.
219
The ﬂowchart in Fig. 5a pictorially depicts the process of
reading a data block using WAE. It is composed of ﬁve steps:
• The controller ﬁrst reads the data block from memory x.
• It then applies ECCk y to the block.
• If no errors are detected, the reading succeeds z.
• Else, if the number of detected errors lies within the range
of the ECC capability, the data block is written back {.
• Else, the reading fails because the data cannot be correctly
retrieved |.
WAE writes back the data block after an error is detected,
even if this error is due to a false read rather than a read
disturbance. The key idea of WAP is to ﬁlter out false
reads when ECC detects errors by reading the data block
again (a second read). Speciﬁcally, when errors are detected
during the user read operation, WAP corrects the read data by
ECC provided that the number of errors is within the ECC
capability. Then, the policy performs a second read (termed a
system read since it is not requested by the user) and compares
the read value with the corrected data block. A write back of
the corrected block is performed if the comparison reveals a
discrepancy.
Fig. 5b pictorially depicts the process of reading a data
block using WAP. Speciﬁcally,
• The ﬁrst three steps of WAP are the same as WAE, except
that a copy of the corrected data is kept if errors are detected
and are within the ECC capability.
• The fourth step reads data again { if ECC detects cor-
rectable errors during the previous read. Then, the data
blocks of the previous (corrected) and current reads are
compared.
• If the two blocks are identical, the reading succeeds |.
• Else, the correct data is written back }. Note that cells that
may be newly disturbed in the second read will be corrected
due to the write back operation.
The choice between WAE and WAP depends on the read
and write energy cost and the proportion of the user read
to the user write. When read disturbance is dominant, WAP
utilizes additional reads increasing its energy overhead relative
to WAE. On the other hand, when read disturbance is not
dominant, WAP reduces the number of system write backs
thus reducing the energy overhead and the memory bandwidth
relative to WAE. This advantage increases when the cost
of write operations increases relative to the cost of read
operations.
Clearly, WAP reduces the number of write backs over WAE
by introducing more reads. It is possible, however, to reduce
the number of write backs without the additional reads if some
detected faults are explicitly left behind. This, of course, can
only be done if an ECCk is used with k > 1. For example,
if an ECC2 is used, then it is possible to avoid the write
back operation when one error is detected. This will avoid
unnecessary write backs when false reads occur but do not
correct read disturbances unless a second error is detected. We
call this policy of leaving cells with incorrect data behind up
to a threshold which is less than the ECC capability “WAT”.
The main rationale behind the design of WAT is that when
the false read error rate is high and the dominant errors are
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:18 UTC from IEEE Xplore.  Restrictions apply. 



Fig. 5: (a) Write after any error detection, (b) Second read after error detection, (c) Leave z errors behind, z < k.
not destructive, most errors are transient and hence cells do
not have to be refreshed after detecting errors. Accordingly,
WAT leaves read disturbances and write faults behind and
ignores false reads up to a threshold, z, that is within the ECC
capability (i.e. z < k). Therefore, the only difference between
WAT and WAR is that it postpones the system write back until
the number of errors in the data block reaches z. This reduces
the energy overhead compared to the other approaches. Fig. 5c
depicts WAT which includes the following steps:
• The ﬁrst two steps are the same as the previous policies.
• In the third step z, three different cases can occur: 1) if the
number of errors is less than or equal to z, the policy leaves
cells with incorrect data behind and the reading succeeds,
2) if the number of errors is greater than z and less or equal
to k, the policy writes back the data, 3) if the number of
errors is more than k, the reading fails.
For different policies, the ECC capability plays a signiﬁcant
role in determining the conditions for a failed read operation.
The more powerful ECC schemes allow the policies to increase
the expected number of reads before failure, which leads to
smaller UBER, and fewer write back and read operations.
Considering the ECC with k error correction capability, we
constructed Markov models of WAE, WAP and WAT. They
are composed of k + 4, k + 6 and k + 4 states, respectively.
In the next section, we describe, in some details, the Markov
models for the three policies, WAE, WAP and WAT, when k
is 1, 1 and 2, respectively.
VI. RELIABILITY ANALYSIS OF THE DIFFERENT SCHEMES
VIA MARKOV MODELS
We use Markov models to determine the reliability of the
policies described in Section V and quantify, on average, the
number of write backs and second reads for each policy.
For simplicity, we assume in this section only user read
operations (no user write) and no write error during the write
back process for the different policies. Similar to what was
explained for Fig. 3b, the user write operations and the effect
of pw can be added to each model and will be considered in
the experimental results.
A. Write back After Error detection (WAE)
First, we discuss the Markov model of WAE that leverages
ECC1. Fig. 6a illustrates that model where each edge is
labeled by the probability of transition between states, which
is based on the type and number of errors occurring during the
user read operations or system write back operations. Note that
a cell affected by a read disturbance during a read will only
cause an error during the next read. The interpretation of states
is illustrated in Table II. As shown in Fig. 6a, initially, before
any read operation, the block is in the error-free state, S1.
After a read operation, the block stays in the same state, S1,
in case of no read error or read disturbance, but transitions to
another state according to the number and nature of the error.
Speciﬁcally,
• If a false read occurs in one cell, it is detected by ECC1
and the system writes back the block. This is shown by the
transition to S2 (a temporary state) with probability P (Rf
1 )
followed by a transition back to S1 with probability 1. Note
that we made the assumption that there is no write errors
during write backs (pw = 0).
• If false reads occur in more than one cell, ECC1 cannot
correct the errors and the process transitions to S5, the
Failure state.
• If no false reads occur but a read disturbance occurs in one
cell, the process transitions to S3 (denoting one cell affected
by a read disturbance). Then, in the following read operation
either (1) no read errors occur and the ECC1 will detect
the disturbance error and force a write back after correcting
the error (the process transition to S2 and then to S1 with
probability 1), or (2) some false reads occur, thus exceeding
the correction capability of ECC1 and transitioning the
process to the failure state.
• If no false reads occur but read disturbances occur in more
than one cell, the process transitions to S4 (denoting more
than one cell affected by read disturbance). In this case,
ECC1 will not be able to correct the disturbance errors in
the next read operation, taking the process to the Failing
state.
The standard Markov analysis can be used to compute the
number of times every edge in the model is traversed before
220
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:18 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: The interpretation of states for three different schemes.
State WAE
S1
S2
S3
S4
S5
S6
S7
No error/disturbance
One error
One undetected disturbance
At least two undetected disturbances
At least two errors
-
-
WAP
No error/disturbance
One error
At least one error in the second read
One undetected disturbance
At least one undetected disturbance
At least two undetected disturbances
At least two errors
WAT
At most one error
Two errors
One disturbance (either detected or undetected)
At most one error and two undetected disturbances
At most one error and at least three undetected disturbances
At least three errors
-
P (R
f
P (R
1&Rd
0)
f
0 &Rd
0)
S1
start
f
0 &Rd
0)
P
(
Rf
0
&
Rd
≥
2)
P
(
R
f
0
&
)
d
1
& R
f≤1
(R
P
R
d
≥
2
)
P (R
f
0 &Rd
0)
S3
P (R
f≤1&Rd
0)
start
S1
)
f2
R
(
P
1
S2
f
)
1
( R
P
P(R
f
0&Rd
1)
P
(
R
f
≤
1
&
R
d
2
)
P
(
R
f
0
)
P(Rf
0 &Rd
0)
)
d1
& R
f 0
(R
P
start
S1
P
(
R
f1
)
1
S2
)
P ( R f
0
S3

P
(
Rf
≥
1)
S5
1
P
(
R
f
0
&
R
d
≥
2
D
)
S4
P
(
R
f≥
2
f
)
1
S2
)
d1
R
&
f0
R
(
P
S4

P (R
Rf
≥
1)
P(
)
1
d
R
&
0
f
( R
P
P (R
f
0 )
P(
Rf
≥
1)
P
(
R
f1
&
R
d≥
1
)
1
S3
1
S5
1
S7
1
P
(
R
f≥
2
)
S6
P
(
R
≤
f
1
&
R
d≥
3
)