***************  
Now joining: T[T]#1  
***************  
NL Join （一）  
Outer table: Card: 99.00 Cost: 2.01 Resp: 2.01 Degree: 1 Bytes: 17  
Access path analysis for T  
Inner table: T Alias: T  
Access Path: TableScan  
NL Join: Cost: 3082.41 Resp: 3082.41 Degree: 1  
Cost_io: 3034.00 Cost_cpu: 1543578772  
Resp_io: 3034.00 Resp_cpu: 1543578772  
Access Path: index (index (FFS))  
Index: IDX_T  
resc_io: 44.43 resc_cpu: 13734996  
ix_sel: 0.000000 ix_sel_with_filters: 1.000000  
Inner table: T Alias: T  
Access Path: index (FFS)  
NL Join: Cost: 4443.65 Resp: 4443.65 Degree: 1  
Cost_io: 4401.00 Cost_cpu: 1359980643  
Resp_io: 4401.00 Resp_cpu: 1359980643  
kkofmx: index filter:"T"."ID" best plan cost  
***********************  
2中关联方式统计如下：  
T1关联T  
nested join： 101.03 resc_cpu: 1029945  
sort merge join：6.01 resc_cpu: 64077698  
Hash join：4.51 resc_cpu: 16217089  
T关联T1  
nested join：57.67resc_cpu: 21420508  
nested join：5.01resc_cpu: 32163982  
nested join：4.51resc_cpu: 16217089  
下面是最终关联计算开销的结果Best join order: 1，从上面的结果看出2种关联中最优的都是Hash join，碰巧这个两个hash join开销一样，oracle选择第一种关联方式  
Number of join permutations tried: 2  
*********************************  
Consider using bloom filter between T1[T1] and T[T]  
kkoBloomFilter: join (lcdn:99 rcdn:99 jcdn:98 limit:4901)  
Computing bloom ndv for creator:T1[T1] ccdn:99.0 and user:T[T] ucdn:99.0  
kkopqComputeBloomNdv: predicate (bndv:73924 ndv:100) and (bndv:999 ndv:99)  
kkopqComputeBloomNdv: pred cnt:2 ndv:99 reduction:1  
kkoBloomFilter: join ndv:0 reduction:0.999986 (limit:0.500000) rejected because distinct value ratio  
(newjo-save) [0 1 ]  
Trying or-Expansion on query block SEL$1 (#0)  
Transfer Optimizer annotations for query block SEL$1 (#0)  
id=0 frofand predicate="T1"."ID"<100  
id=0 frofkksm[i] (sort-merge/hash) predicate="T"."ID"="T1"."ID"  
id=0 frosand (sort-merge/hash) predicate="T"."ID"="T1"."ID"  
id=0 frofkke[i] (index stop key) predicate="T"."ID"<100  
Final cost for query block SEL$1 (#0) - All Rows Plan:  
Best join order: 1  
Cost: 4.5086 Degree: 1 Card: 98.0000 Bytes: 2156  
Resc: 4.5086 Resc_io: 4.0000 Resc_cpu: 16217089  
Resp: 4.5086 Resp_io: 4.0000 Resc_cpu: 16217089  
kkoqbc-subheap (delete addr=0x7ff58e2dfa50, in-use=29224, alloc=41296)  
kkoqbc-end:  
:  
call(in-use=19752, alloc=82024), compile(in-use=67328, alloc=68488), execution(in-use=89616, alloc=93504)  
kkoqbc: finish optimizing query block SEL$1 (#0)  
下面是最终算出的执行计划结果  
============  
Plan Table  
============  
--------------------------------------+-----------------------------------+  
| Id | Operation | Name | Rows | Bytes | Cost | Time |  
--------------------------------------+-----------------------------------+  
| 0 | SELECT STATEMENT | | | | 5 | |  
| 1 | HASH JOIN | | 98 | 2156 | 5 | 00:00:01 |  
| 2 | TABLE ACCESS FULL | T1 | 99 | 1683 | 2 | 00:00:01 |  
| 3 | INDEX RANGE SCAN | IDX_T | 99 | 495 | 2 | 00:00:01 |  
--------------------------------------+-----------------------------------+  
Predicate Information:  
----------------------  
1 - access("T"."ID"="T1"."ID")  
2 - filter("T1"."ID"<100)  