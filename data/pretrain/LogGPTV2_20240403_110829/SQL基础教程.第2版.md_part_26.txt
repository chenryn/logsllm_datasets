SELECT CURRENT TIMESTAMP,
EXTRACT(YEAR FROM CURRENT TIMESTAMP) AS year,
EXTRACT(MONTH FROM CURRENT TIMESTAMP) AS month,
EXTRACT(DAY FROM CURRENT TIMESTAMP) AS day,
EXTRACT(HOUR FROM CURRENT TIMESTAMP) AS hour,
EXTRACT(MINUTE FROM CURRENT TIMESTAMP) AS minute,
EXTRACT(SECOND FROM CURRENT TIMESTAMP) AS second
FROM SYSIBM.SYSDUMMY1;
转换函数
KEYWORD 最后将要给大家介绍一类比较特殊的函数——转换函数。虽说有些
●转换函数
特殊，但是由于这些函数的语法和之前介绍的函数类似，数量也比较少，
因此很容易记忆。
6-1 各种各样的函数 195 ●
KEYWORD “转换”这个词的含义非常广泛，在SQL中主要有两层意思：一是数
●类型转换
据类型的转换，简称为类型转换，在英语中称为castA；另一层意思是值
●cast
的转换。
■CAST——类型转换
注A
语法6-14 CAST函数
类型转换在一般的编程语言中也
会使用，因此并不是SQL特有的
功能。 CAST（转换前的值 AS 想要转换的数据类型）
KEYWORD 进行类型转换需要使用CAST函数。
●CAST函数
之所以需要进行类型转换，是因为可能会插入与表中数据类型不匹配
的数据，或者在进行运算时由于数据类型不一致发生了错误，又或者是进
行自动类型转换会造成处理速度低下。这些时候都需要事前进行数据类型
转换（代码清单6-17、代码清单6-18）。
代码清单6-17 将字符串类型转换为数值类型
SQL Server PostgreSQL
SELECT CAST('0001' AS INTEGER) AS int_col;
MySQL
SELECT CAST('0001' AS SIGNED INTEGER) AS int_col;
Oracle
SELECT CAST('0001' AS INTEGER) AS int_col
FROM DUAL;
DB2
SELECT CAST('0001' AS INTEGER) AS int_col
FROM SYSIBM.SYSDUMMY1;
执行结果
int_col
---------
1
代码清单6-18 将字符串类型转换为日期类型
SQL Server PostgreSQL MySQL
SELECT CAST('2009-12-14' AS DATE) AS date_col;
Oracle
SELECT CAST('2009-12-14' AS DATE) AS date_col
FROM DUAL;
● 196 第6章 函数、谓词、CASE表达式
DB2
SELECT CAST('2009-12-14' AS DATE) AS date_col
FROM SYSIBM.SYSDUMMY1;
执行结果
date_col
------------
2009-12-14
从上述结果可以看到，将字符串类型转换为整数类型时，前面的
“000”消失了，能够切实感到发生了转换。但是，将字符串转换为日期
类型时，从结果上并不能看出数据发生了什么变化，理解起来也比较困难。
从这一点我们也可以看出，类型转换其实并不是为了方便用户使用而开发
的功能，而是为了方便DBMS内部处理而开发的功能。
■COALESCE——将NULL转换为其他值
语法6-15 COALESCE函数
COALESCE(数据1，数据2，数据3……)
KEYWORD COALESCE是SQL特有的函数。该函数会返回可变参数A中左侧开
●COALESCE函数
始第1个不是NULL的值。参数个数是可变的，因此可以根据需要无限增加。
注A 其实转换函数的使用还是非常频繁的。在SQL语句中将NULL转换
参数的个数并不固定，可以自由
为其他值时就会用到转换函数（代码清单6-19、代码清单6-20）。就像之
设定个数的参数。
前我们学习的那样，运算或者函数中含有NULL时，结果全都会变为
NULL。能够避免这种结果的函数就是COALESCE。
代码清单6-19 将NULL转换为其他值
SQL Server PostgreSQL MySQL
SELECT COALESCE(NULL, 1) AS col_1,
COALESCE(NULL, 'test', NULL) AS col_2,
COALESCE(NULL, NULL, '2009-11-01') AS col_3;
Oracle
SELECT COALESCE(NULL, 1) AS col_1,
COALESCE(NULL, 'test', NULL) AS col_2,
COALESCE(NULL, NULL, '2009-11-01') AS col_3
FROM DUAL;
6-1 各种各样的函数 197 ●
DB2
SELECT COALESCE(NULL, 1) AS col_1,
COALESCE(NULL, 'test', NULL) AS col_2,
COALESCE(NULL, NULL, '2009-11-01') AS col_3
FROM SYSIBM.SYSDUMMY1;
执行结果
col_1 | col_2 | col_3
-------+-------+-----------
1 | test | 2009-11-01
代码清单6-20 使用SampleStr表中的列作为例子
SELECT COALESCE(str2, 'NULL')
FROM SampleStr;
执行结果
coalesce
----------
rt
def
太郎
'NULL'
aaa
'NULL'
'NULL'
'NULL'
abc
abc
i
这样，即使包含NULL的列，也可以通过COALESCE函数转换为其
他值之后再应用到函数或者运算当中，这样结果就不再是NULL了。
此外，多数DBMS中都提供了特有的COALESCE的简化版函数（如
Oracle中的NVL等），但由于这些函数都依存于各自的DBMS，因此还是
推荐大家使用通用的COALESCE函数。
● 198 第6章 函数、谓词、CASE表达式
第6章 函数、谓词、CASE表达式
6-2
谓词
● 谓词就是返回值为真值的函数。
学习重点
● 掌握LIKE的三种使用方法（前方一致、中间一致、后方一致）。
● 需要注意BETWEEN包含三个参数。
● 想要取得NULL数据时必须使用IS NULL。
● 可以将子查询作为IN和EXISTS的参数。
什么是谓词
KEYWORD 本节将会和大家一起学习SQL的抽出条件中不可或缺的工具——谓
●谓词
词（predicate）。虽然之前我们没有提及谓词这个该念，但其实大家已经使
用过了。例如，=、、<>等比较运算符，其正式的名称就是比较谓词。
通俗来讲谓词就是6-1节中介绍的函数中的一种，是需要满足特定条
件的函数，该条件就是返回值是真值。对通常的函数来说，返回值有可能
是数字、字符串或者日期等，但是谓词的返回值全都是真值（TRUE/
FALSE/UNKNOWN）。这也是谓词和函数的最大区别。
本节将会介绍以下谓词。
● LIKE
● BETWEEN
● IS NULL、IS NOT NULL
● IN
● EXISTS
谓词——字符串的部分一致查询
LIKE
截至目前，我们使用字符串作为查询条件的例子中使用的都是=。这
KEYWORD
里的=只有在字符串完全一致时才为真。与之相反，LIKE谓词更加模糊
●LIKE谓词
6-2 谓词 199 ●
KEYWORD 一些，当需要进行字符串的部分一致查询时需要使用该谓词。
●部分一致查询
部分一致大体可以分为前方一致、中间一致和后方一致三种类型。接
下来就让我们来看一看具体示例吧。
首先我们来创建一张表6-1那样的只有1列的表。
表6-1 SampleLike表
strcol（字符串）
abcddd
dddabc
abdddc
abcdd
ddabc
abddc
创建上表以及向其中插入数据的SQL语句请参考代码清单6-21。
代码清单6-21 创建SampleLike表
-- DDL：创建表
CREATE TABLE SampleLike
( strcol VARCHAR(6) NOT NULL,
PRIMARY KEY (strcol));
SQL Server PostgreSQL
-- DML：插入数据
BEGIN TRANSACTION; ①
INSERT INTO SampleLike (strcol) VALUES ('abcddd');
INSERT INTO SampleLike (strcol) VALUES ('dddabc');
INSERT INTO SampleLike (strcol) VALUES ('abdddc');
INSERT INTO SampleLike (strcol) VALUES ('abcdd');
INSERT INTO SampleLike (strcol) VALUES ('ddabc');
INSERT INTO SampleLike (strcol) VALUES ('abddc');
COMMIT;
特定的SQL
不同的DBMS事务处理的语法也不尽相同。代码清单6-21中的DML语句在
MySQL中执行时，需要将①部分更改为“START TRANSACTION;”，在Oracle和DB2
中执行时，无需用到①的部分（请删除）。
详细内容请大家参考4-4节中的“创建事务”。
想要从该表中读取出包含字符串“ddd”的记录时，可能会得到前方
● 200 第6章 函数、谓词、CASE表达式
一致、中间一致和后方一致等不同的结果。
●前方一致：选取出“dddabc”
KEYWORD 所谓前方一致，就是选取出作为查询条件的字符串（这里是“ddd”）
●前方一致
与查询对象字符串起始部分相同的记录的查询方法。
●中间一致
●后方一致
●中间一致：选取出“abcddd”“dddabc”“abdddc”
所谓中间一致，就是选取出查询对象字符串中含有作为查询条件的字
符串（这里是“ddd”）的记录的查询方法。无论该字符串出现在对象字
符串的最后还是中间都没有关系。
●后方一致：选取出“abcddd”
后方一致与前方一致相反，也就是选取出作为查询条件的字符串（这
里是“ddd”）与查询对象字符串的末尾部分相同的记录的查询方法。
从本例中我们可以看出，查询条件最宽松，也就是能够取得最多记录
的是中间一致。这是因为它同时包含前方一致和后方一致的查询结果。
像这样不使用“=”来指定条件字符串，而以字符串中是否包含该条
件（本例中是“包含ddd”）的规则为基础的查询称为模式匹配，其中的
KEYWORD 模式也就是前面提到的“规则”。
●模式匹配
●模式
■前方一致查询
下面让我们来实际操作一下，对SampleLike表进行前方一致查
询（代码清单6-22）。
代码清单6-22 使用LIKE进行前方一致查询
SELECT *
FROM SampleLike
WHERE strcol LIKE 'ddd%';
执行结果
strcol
--------
dddabc
KEYWORD 其中的%是代表“0字符以上的任意字符串”的特殊符号，本例中代
●%
表“以ddd开头的所有字符串”。
6-2 谓词 201 ●
这样我们就可以使用LIKE和模式匹配来进行查询了。
■中间一致查询
接下来让我们看一个中间一致查询的例子，查询出包含字符串“ddd”
的记录（代码清单6-23）。
代码清单6-23 使用LIKE进行中间一致查询
SELECT *
FROM SampleLike
WHERE strcol LIKE '%ddd%';
执行结果
strcol
--------
abcddd
dddabc
abdddc
在字符串的起始和结束位置加上%，就能取出“包含ddd的字
符串”了。
■后方一致查询
最后我们来看一下后方一致查询，选取出以字符串“ddd”结尾的记
录（代码清单6-24）。
代码清单6-24 使用LIKE进行后方一致查询
SELECT *
FROM SampleLike
WHERE strcol LIKE '%ddd';
执行结果
strcol
--------
abcddd
大家可以看到上述结果与前方一致正好相反。
KEYWORD 此外，我们还可以使用_（下划线）来代替%，与%不同的是，它代
●_
表了“任意1个字符”。下面就让我们来尝试一下吧。
使用代码清单6-25选取出strcol列的值为“abc +任意2个字符”
的记录。
● 202 第6章 函数、谓词、CASE表达式
代码清单6-25 使用LIKE和_（下划线）进行后方一致查询