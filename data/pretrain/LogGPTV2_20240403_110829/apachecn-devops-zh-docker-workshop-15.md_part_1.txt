# 十五、使用插件扩展 Docker
概观
在本章中，您将学习如何通过创建和安装插件来扩展 Docker Engine 的功能。您将看到如何在使用 Docker 容器时实现您的高级和定制需求。到本章结束时，您将能够确定扩展 Docker 的基础。您还将能够安装和配置不同的 Docker 插件。接下来，您将使用 Docker 插件 API 开发自定义插件，并使用各种 Docker 插件来扩展 Docker 中的卷、网络和授权功能。
# 简介
在前几章中，您使用 **Docker Compose** 和 **Docker Swarm** 运行了多个 Docker 容器。此外，您还从容器中监控指标并收集日志。Docker 允许您管理容器的整个生命周期，包括网络、卷和进程隔离。如果您想要自定义 Docker 的操作以与您的自定义存储、网络提供商或认证服务器一起工作，您需要扩展 Docker 的功能。
例如，如果您有一个定制的基于云的存储系统，并且您想要将其装载到您的 Docker 容器中，您可以实现一个存储插件。同样，您可以使用授权插件从您的企业用户管理系统中验证您的用户，并允许他们使用 Docker 容器。
在本章中，您将学习如何用插件扩展 Docker。您将从插件管理和 API 开始，接下来是最高级和请求的插件类型:授权、网络和卷。下一节将介绍 Docker 中插件的安装和操作。
# 插件管理
Docker 中的插件是独立于 Docker 引擎运行的外部进程。这意味着 Docker 引擎不依赖插件，反之亦然。我们只需要通知 Docker 引擎插件的位置和它的功能。Docker 提供了以下 CLI 命令来管理插件的生命周期:
*   `docker plugin create`:这个命令创建一个新的插件及其配置。
*   `docker plugin enable/disable`:这些命令启用或禁用插件。
*   `docker plugin install`:这个命令安装一个插件。
*   `docker plugin upgrade`:此命令将现有插件升级到新版本。
*   `docker plugin rm`:该命令通过从 Docker 引擎中移除插件的信息来移除插件。
*   `docker plugin ls`:该命令列出已安装的插件。
*   `docker plugin inspect`:该命令显示插件的详细信息。
在下一节中，你将学习插件如何在 Docker 中用插件 API 实现。
# 插件接口
Docker 维护一个插件 API 来帮助社区编写他们的插件。这意味着任何人都可以开发新的插件，只要他们按照插件应用编程接口实现它。这种方法使 Docker 成为一个开放和可扩展的平台。插件应用编程接口是一个通过超文本传输协议工作的**远程过程调用** ( **RPC** )风格的 JSON 应用编程接口。Docker 引擎向插件发送 HTTP POST 请求，并使用响应继续其操作。
Docker 还提供了一个官方开源 SDK，用于创建新的插件和**助手包**来扩展 Docker Engine。如果你想轻松地创建和运行新的插件，助手包是样板模板。目前，Go 中只有助手包，因为 Go 是 Docker 引擎本身的主要实现语言。它位于[https://github.com/docker/go-plugins-helpers](https://github.com/docker/go-plugins-helpers)，为 Docker 支持的各种插件提供助手:
![Figure 15.1: Go plugin helpers ](img/B15021_15_01.jpg)
图 15.1: Go 插件助手
您可以检查存储库中列出的每个文件夹，以便轻松创建和运行不同类型的插件。在本章中，您将通过几个实践练习来探索支持的插件类型，即授权、网络和批量插件。插件通过提供附加功能和默认的 Docker 功能，使 Docker 引擎能够实现定制的业务需求。
# 授权插件
Docker 授权基于两种模式:**各种动作被启用**或**各种动作被禁用**。换句话说，如果用户可以访问 Docker 守护程序，他们可以运行任何命令并使用 API 或 Docker 客户端命令。如果需要更细粒度的访问控制方法，需要在 Docker 中使用授权插件。授权插件增强了 Docker 引擎操作的认证和权限。它们支持更精细的访问，以控制谁可以在 Docker Engine 上采取特定操作。
授权插件使用请求上下文批准或拒绝 Docker 守护程序转发的请求。因此，插件应该实现以下两种方法:
*   `AuthZReq`:在 Docker 守护进程处理请求之前调用这个方法。
*   `AuthZRes`:在 Docker 守护进程向客户端返回响应之前，调用该方法。
在下面的练习中，您将学习如何配置和安装授权插件。您将安装由开放策略代理([https://www.openpolicyagent.org/](https://www.openpolicyagent.org/))创建和维护的**基于策略的授权**插件。**基于策略的访问**是基于基于一些规则授予用户访问权限的思想，即**策略**。该插件的源代码可在 GitHub 上的[https://github.com/open-policy-agent/opa-docker-authz](https://github.com/open-policy-agent/opa-docker-authz)获得，它与类似于以下的策略文件一起工作:
```
package docker.authz 
allow {
    input.Method = "GET"
}
```
策略文件存储在 Docker 守护程序可以读取的主机系统中。例如，这里显示的策略文件只允许`GET`作为请求的方法。它实际上通过禁止任何其他方法使 Docker 守护程序成为只读的，例如`POST`、`DELETE`或`UPDATE`。在下面的练习中，您将使用策略文件并配置 Docker 守护程序来与授权插件通信并限制一些请求。
注意
考虑到 Docker 守护程序的安装和配置，以下练习中的插件和命令在 Linux 环境中工作得最好。如果您正在使用自定义或工具箱 Docker 安装，您可能希望使用虚拟机完成本章中的练习。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 15.01:带有授权插件的只读 Docker 守护程序
在本练习中，您需要创建一个只读的 Docker 守护程序。如果您想要限制对生产环境的访问和更改，这是一种常见的方法。为了实现这一点，您将安装和配置带有策略文件的插件。
要完成练习，请执行以下步骤:
1.  Create a file located at `/etc/docker/policies/authz.rego` by running the following commands:
    ```
    mkdir -p /etc/docker/policies
    touch /etc/docker/policies/authz.rego
    ls /etc/docker/policies
    ```
    这些命令创建一个位于`/etc/docker/policies`的文件:
    ```
    authz.rego
    ```
2.  Open the file with an editor and insert the following data:
    ```
    package docker.authz 
    allow {
        input.Method = "GET"
    }
    ```
    您可以使用以下命令将内容写入文件:
    ```
    cat > /etc/docker/policies/authz.rego << EOF
    package docker.authz 
    allow {
        input.Method = "GET"
    }
    EOF
    cat /etc/docker/policies/authz.rego
    ```
    注意
    `cat`命令用于使文件内容在终端可编辑。除非您在无头模式下运行 Ubuntu，否则您可以跳过使用基于命令行界面的命令来编辑文件内容。
    策略文件只允许 Docker 守护程序中的`GET`方法；换句话说，它使 Docker 守护程序成为只读的。
3.  Install the plugin by running the following command in your terminal and enter *y* when it prompts for permissions:
    ```
    docker plugin install --alias opa-docker-authz:readonly \
    openpolicyagent/opa-docker-authz-v2:0.5 \
    opa-args="-policy-file /opa/policies/authz.rego"
    ```
    该命令安装别名为`opa-docker-authz:readonly`的位于`openpolicyagent/opa-docker-authz-v2:0.5`的插件。另外*第 1 步*的策略文件作为`opa-args`传递:
    ![Figure 15.2: Plugin installation ](img/B15021_15_02.jpg)
    图 15.2:插件安装
4.  Check for the installed plugins using the following command:
    ```
    docker plugin ls
    ```
    该命令列出了插件:
    ![Figure 15.3: Plugin listing ](img/B15021_15_03.jpg)
    图 15.3:插件列表
5.  Edit the Docker daemon configuration at `/etc/docker/daemon.json` with the following edition:
    ```
    {
        "authorization-plugins": ["opa-docker-authz:readonly"]
    }
    ```
    可以用`cat /etc/docker/daemon.json`命令检查文件内容。
6.  Reload the Docker daemon with the following command:
    ```
    sudo kill -HUP $(pidof dockerd)
    ```
    该命令通过用`pidof`命令获取进程标识来终止`dockerd`进程。此外，它发送`HUP`信号，这是发送给 Linux 进程更新其配置的信号。简而言之，您正在用新的授权插件配置重新加载 Docker 守护程序。运行以下 listing 命令检查是否允许列表操作:
    ```
    docker ps
    ```
    该命令列出了正在运行的容器，并显示允许列表操作:
    ```
    CONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES
    ```
7.  Run the following command to check whether creating new containers is permitted:
    ```
    docker run ubuntu
    ```
    该命令创建并运行一个容器；但是，由于该操作不是只读的，因此不允许:
    ```
    Error response from daemon: authorization denied by plugin 
    opa-docker-authz:readonly: request rejected by administrative policy.