如果varnish cache程序没有运行，在这里可以启动这个进程。
stats
显示简要的统计信息。
所有的数据是服务器启动后开始统计，更好的观察方式是使用varnishstat
工具。
status
检查varnish cache进程的状态。
stop
停止varnish cache进程
url.purge regexp
弃用，使用purge.url代替。
vcl.discard configname
38
www.linuxidc.com
丢弃指定的VCL配置文件。
vcl.inline configname vcl
创建一个vcl配置文件，configname是配置文件的名字，vcl 是配置文件
的VCL代码。
vcl.list
显示当前可用的vcl列表，active表示当前使用的配置文件。
vcl.load configname filename
创建一个新的配置文件，configname是配置的名字，filename是vcl配置
文件的路径和名字。
vcl.show config
显示vcl配置文件的源代码。
vcl.use configname
对所有新的请求指定vcl配置文件，已经存在的请求使用抵达时的配置文
件。
Run-Time Parameters(运行时的参数)
运行参数有速记标志，避免重复出现相同的文件，该标志的含义：
experimental
对这个参数，我们没有固定的值来说明好不好，欢迎观察和反馈这个值。
delayed
这个值可以在不工作的时候改变，但是不会立即生效。
restart
工作进程会被停止，并且重新启动。
reload
VCL程序会被重新装载。
下面是参数列表，目前是我们最后一次更新指南。下面的列表和CLI管理接口
的param.show 命令产生的列表相同，如果某些描述在这里找不到，你可以在CLI
使用命令找到相关描述。
下面是在一个32位的系统上的默认值，比如sess_workspace（=16K）和
thread_pool_stack（=64K），可以减少这些值保持虚拟内存空间。
acceptor_sleep_decay
Default：0.900 Flags：experimental
如果我们的文件描述，或者工作线程等资源耗尽，接收器在接收两次接收
间隔中会休眠，这个参数减少成功接收的休眠时间。（ie：0.9 = reduce by 10%）
acceptor_sleep_incr
Units：s default：0.001 flags：experimental
如果我们的文件描述，或者工作线程等资源耗尽，接收器在两次接收
间隔中会休眠，这个参数控制休眠的时间。
acceptor_sleep_max
Units:s default:0.050 flags:xperimental
如果我们的文件描述，或者工作线程等资源耗尽，接收器在接收两次接收
间隔中会休眠，这个参数娴熟最长的休眠时间。
auto_restart
Units：bool default：on
39
www.linuxidc.com
如果子进程宕了，自动重启。
ban_lurker_sleep
Units：s default：0.0
How long time does the ban lurker thread sleeps between successfull
attempts to push the last item up the purge list. It always sleeps a second when
nothing can be done. A value of zero disables the ban lurker.
between_bytes_timeout
Units：s Default：60
在接收数据是，两个字节之间的超时时间，如果值是0，就表示用不超时，
VCL配置文件的值可以覆盖这里的值，这个参数在pipe模式中无效。
cache_vbe_conns
Units：bool Default：off Flags：experimental
Cache vb_conn依耐于malloc，这是一个问题。
cc_command
Default：exec cc –fpic –shared –Wl，–x –o %o %s Flags：must_reload
编译c源代码的参数，%s将替换源文件名字，,%o将替换输出的文件名字。
cli_buffer
Units：bytes Default：8192
CLI输入的缓冲区大小，如果你有一个很大VCL文件或者使用vcl.inline命
令，那么就需要增大这个值，注意必须使用-p，让所有的生效。
cli_timeout
Units：seconds Default：10
管理员对CLI的请求超时时间。
clock_skew
Units：s Default：10
在后端服务器和varnish之间，多少时差愿意接受。
connect_timeout
Units：s Default：0.4
连接后端服务器默认的连接超时时间，VCL的配置可以覆盖这个选项。
default_grace
Default:10Seconds Flags:delayed
定义grace宽度，我们会递交一个之前的内容，在其他线程想要新的拷贝。
default_ttl
Units：seconds Default：120
如果backend和VCL都没有给目标分配TTL，那么这个参数将会生效，已
经存在于缓存中的目标在他们从新从后端获取前不受影响，强制他们生效可以
使用“purge.url”刷新cache。
diag_bitmap
Units：bitmap default：0 bitmap controlling diagnostics code：
0x00000001 - CNT_Session states.
0x00000002 - workspace debugging.
0x00000004 - kqueue debugging.
0x00000008 - mutex logging.
0x00000010 - mutex contests.
40
www.linuxidc.com
0x00000020 - waiting list.
0x00000040 - object workspace.
0x00001000 - do not core-dump child process.
0x00002000 - only short panic message.
0x00004000 - panic to stderr.
0x00008000 - panic to abort2().
0x00010000 - synchronize shmlog.
0x00020000 - synchronous start of persistence.
0x80000000 - do edge-detection on digest.
err_ttl
Units：seconds Default：0
TTl分配给错误页面。
Esi_syntax
Units：bitmap Default：0 bitmap controlling ESI parsing code：
0x00000001 - Don't check if it looks like XML
0x00000002 - Ignore non-esi elements
0x00000004 - Emit parsing debug records
fetch_chunksize
Units：kilobytes Default：128flags：experimental
Fetcher使用默认的chunksize，这个值应该比多数目标大，而且TTLS更短，
first_byte_timeout
Units: s default:60
定义从后端服务器收到第一个数据的超时时间，我们只等待这个时间，如
果超过，就放弃。如果值是0，那么久永不放弃。VCL的配置可以覆盖这个值，
此值在pipe模式中无效。
group
Default：…. Flags：must_restart
使用哪个没有特权的组运行此进程。
http_headers
Units：header lines default：64
可以处理的最大数目的HTTP头
listen_address
Default：80 flags：must_restart
可以使使用的表达方式 host，host：port，port
listen_depth
Units：connections default：1024 flags：must_restart
监听队列深度。
log_hashstring
Units：bool default：off
日志是否记录共享内存里的hash字符
log_local_address
Units：bool default：off
是否记录本地IP的tcp连接。
lru_interval
41
www.linuxidc.com
Units：seconds default：2 flags:experimental
在目标从LRU表移除的前的宽限时间
max_esi_includes
Units：includes default：5
最大数量的Esi进程。
max_restarts
Units：restarts default：4
一个请求重试次数的最大限制，应该意识到重试次数会影响命中率，所以
不要轻易改变这个值。
overflow_max
Units：% default：100 flags：experimental
允许溢出队列长度的百分比。
这个设置排队请求工作的线程，超过上面的值就会丢弃。
ping_interval
Units：seconds default：3 flags：must_restart
子进程ping主进程的间隔。0就是禁止ping。
pipe_timeout
Units：seconds default：60
PIPE会话的空闲超时时间，如果他们之间在此值期间没有数据收发，那么
就会关闭session。
prefer_ipv6
Units：bool default：off
当后端服务器支持IPV4和IPV6，在连接后端服务器的时候更喜欢IPv6地
址。
purge_dups
Units：bool default：on
发现和消除重复的purges。
rush_exponent
Units：requests per request default：3 flags：experimental
How many parked request we start for each completed request on the object.
NB: Even with the implict delay of delivery, this parameter controls an exponential
increase in number of worker threads.
Purge expressions
一个purge表达包含一个或者多个条件，一个条件包含一个字段，一个运算符，一
个内容条件可以使用“&&”符号连接起来。
一个字段可以包含任何VCL的变量，例如 req.url，req.http.host或者obj.set-cookie。
运算符包括“==”直接比较，“~”正则表达式匹配，和“>”“ 10MB
42
www.linuxidc.com
例子：purge所有提供服务主机名字为“example.com”和www.example.com，以及
所有从后端服务器中收到的头信息Set-Cookie的值为“USERID=1663”的文件：
req.http.host ~ "^(www\.)example.com$" && obj.set-cookie ~ "USERID=1663"
SEE ALSO
* varnishlog(1)
* varnishhist(1)
* varnishncsa(1)
* varnishstat(1)
* varnishtop(1)
* vcl(7)
HISTORY
The varnishd daemon was developed by Poul-Henning Kamp in cooperation with
Verdens Gang AS, Linpro AS and Varnish Software.
This manual page was written by Dag-Erling Smørgrav with updates by Stig Sandbeck
Mathisen ⟨PI:EMAIL⟩
COPYRIGHT
这个文档的版权和varnish自身的版权一样，请看LICENCE。
* Copyright (c) 2007-2008 Linpro AS
* Copyright (c) 2008-2010 Redpill Linpro AS
* Copyright (c) 2010 Varnish Software AS
● varnishhist（varnish 请求图）
Author: Dag-Erling Smørgrav
Date: 2010-05-31
Version: 1.0
Manual section: 1
Varnish request histogram（varnish请求柱状图）
SYNOPSIS
varnishhist [-b] [-C] [-c] [-d] [-I regex] [-i tag] [-n varnish_name] [-r file] [-V] [-w delay]
[-X regex] [-x tag]
DESCRIPTION
Varnishhist工具读取varnishd（1）的共享内存日志，生成一个连续不断更新的柱状
图显示最后N个请求的分布。N的值取决于左上角垂直刻度的高度。水平标尺是对数。
如果命中，则使用“|”表示，如果没有命中，使用“#”表示。
下面的选项是可用的：
-b 分析指定后端服务器的日志，如果没有使用-b和-c参数，varnish就充当
他们。
-C 忽略正则表达式的大小写。
-c 分析指定客户端的日志。
-d 在启动过程中处理旧的日志，一般情况下，varnishhist只会在进程写入日
志后启动。
-I regex 匹配正则表达式的日志，如果没有使用-i或者-I，那么所有的日志都
43
www.linuxidc.com
会匹配。
-i tag 匹配指定的tag，如果没有使用-i或者-I，那么所有的日志都会被匹配。
-n 指定varnish实例的名字，用来获取日志，如果没有指定，默认使用主机
名。
-r file 读入日志文件，代替共享内存。
-V 显示版本号，然后退出。
-w delay 等待更新的延迟时间，默认是1秒。
-X regex 导入匹配表达式的日志。
-x tag 导入匹配tag的日志。
SEE ALSO
* varnishd(1)
* varnishlog(1)
* varnishncsa(1)
* varnishstat(1)
* varnishtop(1)
HISTORY
The varnishhist utility was developed by Poul-Henning Kamp in cooperation with
Verdens Gang AS and Linpro AS. This manual page was written by Dag-Erling Smørgrav.
COPYRIGHT
这个文档的版权和varnish自身的版权一样，请看LICENCE。
* Copyright (c) 2006 Verdens Gang AS
* Copyright (c) 2006-2008 Linpro AS
* Copyright (c) 2008-2010 Redpill Linpro AS
* Copyright (c) 2010 Varnish Software AS
● varnishlog（varnish 日志）
Author: Dag-Erling Smørgrav
Author: Per Buer
Date: 2010-05-31
Version: 0.2
Manual section: 1
Display varnish logs
SYNOPSIS
varnishlog [-a] [-b] [-C] [-c] [-D] [-d] [-I regex] [-i tag] [-k keep] [-n varnish_name] [-o] [-P
file] [-r file] [-s num] [-u] [-V] [-w file] [-X regex] [-x tag] [tag regex]
DESCRIPTION
varnishlog工具读取和显示共享内存的日志。
下面的选项是可用的：
-a 当把日志写到文件里时，使用附加，而不是覆盖。
-b 只显示varnishd和后端服务器的日志。
-C 匹配正则表达式的时候，忽略大小写差异。
-c 只显示varnishd和客户端的日志。
44
www.linuxidc.com
-D 以进程方式运行
-d 在启动过程中处理旧的日志，一般情况下，varnishhist只会在进程写入日
志后启动。
-I regex 匹配正则表达式的日志，如果没有使用-i或者-I，那么所有的日志都
会匹配。
-i tag 匹配指定的tag，如果没有使用-i或者-I，那么所有的日志都会被匹配。
-k num 只显示开始的num个日志记录。
-n 指定varnish实例的名字，用来获取日志，如果没有指定，默认使用主机
名。
-o 以请求ID给日志分组，这个功能没多大用。如果要写到一个文件里使用
-w选项。
-P file 记录PID号的文件
-r file 从一个文件读取日志，而不是从共享内存读取。
-s sum 跳过开始的num条日志。
-u 无缓冲的输出。
-V 显示版本，然后退出。
-w file 把日志写到一个文件里代替显示他们，如果不是用-a参数就会发生覆盖，
如果varnishlog在写日志时，接收到一个SIGHUP信号，他会创建一个新的文件，
老的文件可以移走。
-X regex 排除匹配正则表达式的日志。
-x tag 排除匹配tag的日志。
如果-o选项被指定，需要使用正则表达式和tag来制定需要的日志。
TAGS
下面的日志tag是正确定义的：