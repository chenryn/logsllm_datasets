## Page 11
### Chapter 1. 超经典MySQL练习50题
#### Python数据之道
##### 1.5 题目4
###### 1.5.1 题目要求
查询平均成绩小于60分的同学的学生编号、学生姓名和平均成绩（包括有成绩的和无成绩的）。

###### 1.5.2 SQL实现
**方法1：使用两种情况连接**

```sql
-- 查询平均分小于60分的学生信息
SELECT 
    b.s_id, 
    b.s_name, 
    ROUND(AVG(a.s_score), 2) AS avg_score
FROM 
    Student b
JOIN 
    Score a ON b.s_id = a.s_id
GROUP BY 
    b.s_id
HAVING 
    AVG(a.s_score) < 60;
```

**方法2：使用IFNULL函数判断**

```sql
-- 使用IFNULL函数处理没有成绩的情况
SELECT 
    S.s_id, 
    S.s_name, 
    ROUND(AVG(IFNULL(C.s_score, 0)), 2) AS avg_score
FROM 
    Student S
LEFT JOIN 
    Score C ON S.s_id = C.s_id
GROUP BY 
    S.s_id
HAVING 
    AVG(IFNULL(C.s_score, 0)) < 60;
```

**示例数据**

- **Student表**
  ```sql
  SELECT * FROM Student;
  +------+--------+------------+------+
  | s_id | s_name | s_birth    | s_sex|
  +------+--------+------------+------+
  | 01   | 赵雷   | 1990-01-01 | 男   |
  | 02   | 钱电   | 1990-12-21 | 男   |
  | 03   | 孙风   | 1990-05-20 | 男   |
  | 04   | 李云   | 1990-08-06 | 男   |
  | 05   | 周梅   | 1991-12-01 | 女   |
  | 06   | 吴兰   | 1992-03-01 | 女   |
  | 07   | 郑竹   | 1989-07-02 | 女   |
  | 08   | 王菊   | 1990-01-20 | 女   |
  +------+--------+------------+------+
  ```

- **Score表**
  ```sql
  SELECT * FROM Score;
  +------+-----+---------+
  | s_id | c_id| s_score  |
  +------+-----+---------+
  | 01   | 01  | 80      |
  | 01   | 02  | 90      |
  | 01   | 03  | 96      |
  | 02   | 01  | 70      |
  | 02   | 02  | 60      |
  | 02   | 03  | 80      |
  | 03   | 01  | 80      |
  | 03   | 02  | 81      |
  | 03   | 03  | 85      |
  | 04   | 01  | 50      |
  | 04   | 02  | 40      |
  | 04   | 03  | 30      |
  | 05   | 01  | 76      |
  | 05   | 02  | 87      |
  | 06   | 01  | 43      |
  | 06   | 03  | 56      |
  | 07   | 02  | 89      |
  | 07   | 03  | 94      |
  +------+-----+---------+
  ```

## Page 17
### Chapter 1. 超经典MySQL练习50题
#### Python数据之道
##### 1.7 题目6
###### 1.7.1 题目需求
查询“李”姓老师的数量。

###### 1.7.2 SQL实现

```sql
-- 查询姓“李”的老师数量
SELECT COUNT(t_name) 
FROM Teacher 
WHERE t_name LIKE '李%';
```

**示例数据**

- **Teacher表**
  ```sql
  SELECT * FROM Teacher;
  +------+--------+
  | t_id | t_name |
  +------+--------+
  | 01   | 张三   |
  | 02   | 李四   |
  | 03   | 王五   |
  +------+--------+
  ```

**执行结果**

```sql
mysql> SELECT COUNT(t_name) FROM Teacher WHERE t_name LIKE '李%';
+-----------------+
| COUNT(t_name)   |
+-----------------+
| 1               |
+-----------------+
```

## Page 18
### Chapter 1. 超经典MySQL练习50题
#### Python数据之道
##### 1.8 题目7
###### 1.8.1 题目需求
查询学过张三老师授课的同学的信息。

###### 1.8.2 SQL实现
**方法1：通过张三老师的课程来查找**

```sql
-- 通过张三老师的课程来查找学生信息
SELECT *
FROM Student
WHERE s_id IN (
    SELECT s_id
    FROM Score
    JOIN Course C ON Score.c_id = C.c_id
    WHERE C.t_id = (SELECT t_id FROM Teacher WHERE t_name = '张三')
);
```

**方法2：通过张三老师的课程来查询**

```sql
-- 通过张三老师的课程来查询学生信息
SELECT s1.*
FROM Student s1
JOIN Score s2 ON s1.s_id = s2.s_id
WHERE s2.c_id IN (
    SELECT c_id 
    FROM Course c 
    WHERE c.t_id = (SELECT t_id FROM Teacher WHERE t_name = '张三')
);
```

**方法3：通过多表左连接查询**

```sql
-- 通过多表左连接查询学生信息
SELECT s.*
FROM Teacher t
LEFT JOIN Course c ON t.t_id = c.t_id
LEFT JOIN Score sc ON c.c_id = sc.c_id
LEFT JOIN Student s ON s.s_id = sc.s_id
WHERE t.t_name = '张三';
```

**示例数据**

- **Student表**
  ```sql
  SELECT * FROM Student;
  +------+--------+------------+------+
  | s_id | s_name | s_birth    | s_sex|
  +------+--------+------------+------+
  | 01   | 赵雷   | 1990-01-01 | 男   |
  | 02   | 钱电   | 1990-12-21 | 男   |
  | 03   | 孙风   | 1990-05-20 | 男   |
  | 04   | 李云   | 1990-08-06 | 男   |
  | 05   | 周梅   | 1991-12-01 | 女   |
  | 06   | 吴兰   | 1992-03-01 | 女   |
  | 07   | 郑竹   | 1989-07-02 | 女   |
  | 08   | 王菊   | 1990-01-20 | 女   |
  +------+--------+------------+------+
  ```

- **Course表**
  ```sql
  SELECT * FROM Course;
  +------+-----+------+
  | c_id | c_name | t_id |
  +------+-----+------+
  | 01   | 课程1   | 01   |
  | 02   | 课程2   | 02   |
  | 03   | 课程3   | 03   |
  +------+-----+------+
  ```

- **Score表**
  ```sql
  SELECT * FROM Score;
  +------+-----+---------+
  | s_id | c_id| s_score  |
  +------+-----+---------+
  | 01   | 01  | 80      |
  | 01   | 02  | 90      |
  | 01   | 03  | 96      |
  | 02   | 01  | 70      |
  | 02   | 02  | 60      |
  | 02   | 03  | 80      |
  | 03   | 01  | 80      |
  | 03   | 02  | 81      |
  | 03   | 03  | 85      |
  | 04   | 01  | 50      |
  | 04   | 02  | 40      |
  | 04   | 03  | 30      |
  | 05   | 01  | 76      |
  | 05   | 02  | 87      |
  | 06   | 01  | 43      |
  | 06   | 03  | 56      |
  | 07   | 02  | 89      |
  | 07   | 03  | 94      |
  +------+-----+---------+
  ```

- **Teacher表**
  ```sql
  SELECT * FROM Teacher;
  +------+--------+
  | t_id | t_name |
  +------+--------+
  | 01   | 张三   |
  | 02   | 李四   |
  | 03   | 王五   |
  +------+--------+
  ```

## Page 19
### Chapter 1. 超经典MySQL练习50题
#### Python数据之道
##### 1.9 题目8
###### 1.9.1 题目需求
找出没有学过张三老师课程的学生。

###### 1.9.2 SQL实现
**方法1：通过NOT IN子查询**

```sql
-- 找出没有学过张三老师课程的学生
SELECT *
FROM Student
WHERE s_id NOT IN (
    SELECT s_id
    FROM Score S
    JOIN Course C ON S.c_id = C.c_id
    WHERE C.t_id = (SELECT t_id FROM Teacher WHERE t_name = '张三')
);
```

**方法2：通过NOT IN子查询**

```sql
-- 找出没有学过张三老师课程的学生
SELECT *
FROM Student s1
WHERE s1.s_id NOT IN (
    SELECT s2.s_id 
    FROM Student s2 
    JOIN Score s3 ON s2.s_id = s3.s_id 
    WHERE s3.c_id IN (
        SELECT c.c_id 
        FROM Course c 
        JOIN Teacher t ON c.t_id = t.t_id 
        WHERE t.t_name = '张三'
    )
);
```

**方法3：通过多表左连接查询**

```sql
-- 通过多表左连接查询没有学过张三老师课程的学生
SELECT s1.*
FROM Student s1
JOIN Score s2 ON s1.s_id = s2.s_id
WHERE s2.c_id NOT IN (
    SELECT c_id 
    FROM Course c 
    WHERE c.t_id = (SELECT t_id FROM Teacher WHERE t_name = '张三')
);
```

**示例数据**

- **Student表**
  ```sql
  SELECT * FROM Student;
  +------+--------+------------+------+
  | s_id | s_name | s_birth    | s_sex|
  +------+--------+------------+------+
  | 01   | 赵雷   | 1990-01-01 | 男   |
  | 02   | 钱电   | 1990-12-21 | 男   |
  | 03   | 孙风   | 1990-05-20 | 男   |
  | 04   | 李云   | 1990-08-06 | 男   |
  | 05   | 周梅   | 1991-12-01 | 女   |
  | 06   | 吴兰   | 1992-03-01 | 女   |
  | 07   | 郑竹   | 1989-07-02 | 女   |
  | 08   | 王菊   | 1990-01-20 | 女   |
  +------+--------+------------+------+
  ```

- **Course表**
  ```sql
  SELECT * FROM Course;
  +------+-----+------+
  | c_id | c_name | t_id |
  +------+-----+------+
  | 01   | 课程1   | 01   |
  | 02   | 课程2   | 02   |
  | 03   | 课程3   | 03   |
  +------+-----+------+
  ```

- **Score表**
  ```sql
  SELECT * FROM Score;
  +------+-----+---------+
  | s_id | c_id| s_score  |
  +------+-----+---------+
  | 01   | 01  | 80      |
  | 01   | 02  | 90      |
  | 01   | 03  | 96      |
  | 02   | 01  | 70      |
  | 02   | 02  | 60      |
  | 02   | 03  | 80      |
  | 03   | 01  | 80      |
  | 03   | 02  | 81      |
  | 03   | 03  | 85      |
  | 04   | 01  | 50      |
  | 04   | 02  | 40      |
  | 04   | 03  | 30      |
  | 05   | 01  | 76      |
  | 05   | 02  | 87      |
  | 06   | 01  | 43      |
  | 06   | 03  | 56      |
  | 07   | 02  | 89      |
  | 07   | 03  | 94      |
  +------+-----+---------+
  ```

- **Teacher表**
  ```sql
  SELECT * FROM Teacher;
  +------+--------+
  | t_id | t_name |
  +------+--------+
  | 01   | 张三   |
  | 02   | 李四   |
  | 03   | 王五   |
  +------+--------+
  ```

## Page 21
### Chapter 1. 超经典MySQL练习50题
#### Python数据之道
##### 1.10 题目9
###### 1.10.1 题目需求
查询学过编号为01并且学过编号为02课程的学生信息。

###### 1.10.2 SQL实现
**方法1：通过自连接实现**

```sql
-- 通过自连接查询学过编号为01并且学过编号为02课程的学生信息
SELECT s1.*
FROM Student s1
WHERE s_id IN (
    SELECT s2.s_id 
    FROM Score s2
    JOIN Score s3 ON s2.s_id = s3.s_id
    WHERE s2.c_id = '01' AND s3.c_id = '02'
);
```

**方法2：直接通过WHERE语句实现**

```sql
-- 直接通过WHERE语句查询学过编号为01并且学过编号为02课程的学生信息
SELECT s1.*
FROM Student s1, Score s2, Score s3
WHERE s1.s_id = s2.s_id
  AND s1.s_id = s3.s_id
  AND s2.c_id = '01' 
  AND s3.c_id = '02';
```

**方法3：通过两个子查询实现**

```sql
-- 通过两个子查询查询学过编号为01并且学过编号为02课程的学生信息
-- 1. 先查出学号
SELECT scl.s_id
FROM (SELECT * FROM Score s1 WHERE s1.c_id = '01') scl,
     (SELECT * FROM Score s2 WHERE s2.c_id = '02') sc2
WHERE scl.s_id = sc2.s_id;

-- 2. 找出学生信息
SELECT *
FROM Student
WHERE s_id IN (
    SELECT scl.s_id
    FROM (SELECT * FROM Score s1 WHERE s1.c_id = '01') scl,
         (SELECT * FROM Score s2 WHERE s2.c_id = '02') sc2
    WHERE scl.s_id = sc2.s_id
);
```

**示例数据**

- **Student表**
  ```sql
  SELECT * FROM Student;
  +------+--------+------------+------+
  | s_id | s_name | s_birth    | s_sex|
  +------+--------+------------+------+
  | 01   | 赵雷   | 1990-01-01 | 男   |
  | 02   | 钱电   | 1990-12-21 | 男   |
  | 03   | 孙风   | 1990-05-20 | 男   |
  | 04   | 李云   | 1990-08-06 | 男   |
  | 05   | 周梅   | 1991-12-01 | 女   |
  | 06   | 吴兰   | 1992-03-01 | 女   |
  | 07   | 郑竹   | 1989-07-02 | 女   |
  | 08   | 王菊   | 1990-01-20 | 女   |
  +------+--------+------------+------+
  ```

- **Score表**
  ```sql
  SELECT * FROM Score;
  +------+-----+---------+
  | s_id | c_id| s_score  |
  +------+-----+---------+
  | 01   | 01  | 80      |
  | 01   | 02  | 90      |
  | 01   | 03  | 96      |
  | 02   | 01  | 70      |
  | 02   | 02  | 60      |
  | 02   | 03  | 80      |
  | 03   | 01  | 80      |
  | 03   | 02  | 81      |
  | 03   | 03  | 85      |
  | 04   | 01  | 50      |
  | 04   | 02  | 40      |
  | 04   | 03  | 30      |
  | 05   | 01  | 76      |
  | 05   | 02  | 87      |
  | 06   | 01  | 43      |
  | 06   | 03  | 56      |
  | 07   | 02  | 89      |
  | 07   | 03  | 94      |
  +------+-----+---------+
  ```

希望这些优化后的SQL查询和说明能帮助你更好地理解和使用。