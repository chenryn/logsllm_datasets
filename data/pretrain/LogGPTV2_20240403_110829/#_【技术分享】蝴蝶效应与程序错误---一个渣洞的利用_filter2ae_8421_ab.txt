Space后的内存区间是被映射的内存并且是可写的。New
Space的内存范围是不连续的，它的基本块的大小为1MB，最大可以达到16MB，所以越界写时可以选择写过任意一个基本块的边界。我们需要通过地址空间布局将我们需要被覆盖的内容被映射到一个New
Space基本块之后。将一个Large Space[7]的基本块映射到NewSpace基本块之后是一个比较好的选择，这样可以能覆盖Large
Space中的堆对象。不过这里有个障碍，我们应该记得，当第一个参数为NULL时，mmap映射内存是总是返回mm->mmap_base到TASK_SIZE
之间能够满足映射大小范围的最高地址，也就是说一般多次mmap时返回的地址应该是连续的，这样的特性很有利于操纵内存空间布局，但很不幸的是，chrome在分配堆的基本块时，第一个参数给的是随机值，如下代码所示[9]：
这使得New Space和Large Space分配的基本块总是随机的，Large Space的基本块刚好位于New
Space之后后几率很小。我们采取了两个技巧来保证Large Space基本块刚好分配在New Space基本块之后。
第一个技巧是使用web worker绕开不能进行地址空间布局的情形；New
Space起始保留地址是1MB，为一个基本块，随着分配的对象的增加，最大可以增加到16MB，这16个基本块是不连续的，但一旦增加到16MB，它的地址范围就已经确定了，不能再修改，如果此时New
Space的内存布局如下图所示：
即每一个New Space的基本块后都映射了一个只读的内存空间，这样无论怎样进行地址空间布局都不能在New Space之后映射Large
Space，我们采用了web worker来避免产生这种状态，因为web worker是一个单独的JS实例，每一个web worker的New
Space的地址空间都不一样，如果当前web worker处于上图所示状态，我们将结束此次利用，重新启动一个新的webworker来进行利用，期望新的web
worker内存布局处于以下状态，至少有一个New Space基本块之后是没有映射的内存地址空间：
现在使用第二个技巧，我将它称为暴力风水，这与堆喷射不太一样，堆喷是指将地址空间喷满，但chrome对喷射有一定的限制，它对分配的v8对象和dom对象的总内存大小有限制，往往是还没将地址空间喷满，chrome就已经自动崩溃退出了。暴力风水的方法如下：先得到16个New
Space 基本块的地址，然后触发映射一个Large Space基本块，我们通过分配一个超长字符串来分配一个Large Space基本块；判断此Large
Space基本块是否位于某一New Space基本块之后，若不是，则释放此Large Space基本块，重新分配一个Large
Space基本块进行判断，直到条件满足，记住满足条件的Large Space基本块之上的New Space基本块的地址，在此New
Space基本块中触发越界写，覆盖紧随其后的Large Space基本块。
当在v8中分配一个特别大（大于[kMaxRegularHeapObjectSize](https://cs.chromium.org/chromium/src/v8/src/globals.h?l=229&gs=cpp%3Av8%3A%3Ainternal%3A%3AkMaxRegularHeapObjectSize%40chromium%2F..%2F..%2Fv8%2Fsrc%2Fglobals.h%7Cdef&gsn=kMaxRegularHeapObjectSize&ct=xref_usages)==507136）的JS对象时，这个对象会分配在Large
Space中，在Large
Space基本块中，分配的v8对象离基本块的首地址的偏移是0x8100，基本块的前0x8100个字节是基本块的头，要实现任意地址读写，我们只需要将Large
Space中的超长字符串对象修改成JSArrayBuffer对象即可，但在改写前需要保存基本块的头，在改写后恢复，这样才能保证改写只修改了对象，没有破坏基本块的元数据。要精确的覆盖Large
Space基本块中的超长字符串，根据unescape的解码规则有个较复杂的数学计算，下图是执行unescap前的内存示意图：
假设Large Space基本块的起始地址为border address，border address 之上是New Space,之下是Large
Space,
需要被覆盖的超长字符串对象位于border+0x8100位置，我们构造一个越界串，它的起始地址为border-0x40000,结束地址为border-0x2018,其中border-0x40000到border-0x20000范围是已分配并已初始化的内存，存储了编码后的JSArrayBuffer对象和辅助填充数据”a”,
border-0x20000到border-0x2018是未分配内存，存取的数据为堆喷后的残留数据” a”,
整个越界串的内容都是以”%xxy”的形式存在，y不是字符%,整个越界串的长度为(0x40000-0x2018)，所以unescape代码片段3中第一步计算出的目的字符串的长度为(0x40000-0x2018)/2,起始地址为border-0x20000，执行完unescape后的内存示意图如下：
在执行完代码片段3第二步后，Write
Point指向border-0x20000+0xc，因为NewRawOneByteString创建的对象的起始地址为border-0x20000,对象头为12个字节。
我们将代码片段3的第三步人为地再分成三步，第一步，解码从border-0x40000到border-0x20000的内容，因为此区间的内容为”%xxy”形式，所以解码后长度会减半，解码后写的地址范围为border-0x20000+0xc到border-0x10000+0xc，解码后的JSArrayBuffer位于此区间的border-0x17f18；第二步，解码从border-0x20000到border-0x10000的内容，因为此时此区间不含%号，所以解码只是简单拷贝，解码后长度不变，解码后写的地址范围为border-0x10000+0xc到border+0xc，解码后的JSArrayBuffer位于此区间的border-0x7f0c，第三步，解码从border-0x10000到border-0x2018(越界串的边界)的内容，这步解码还是简单拷贝，解码后写的地址范围为border+0xc到border+0xdfe8，解码后的JSArrayBuffer正好位于border+0x8100，覆盖了在Large
Space中的超长字符串对象。在JavaScript空间引用此字符串其实是引用了一个恶意构造的JSArrayBuffer对象，通过这个JSArrayBuffer对象可以很容易实现任意地址读写,就不再赘述。
**7.任意地址读写到任意代码执行**
现在已经有了任意地址读写的能力，要将这种能力转为任意代码执行非常容易，这一步也是所有步骤中最容易的一步。Chrome中的JIT代码所在的页具有rwx属性，我们只需找到这样的页，覆盖JIT代码即可以执行ShellCode。找到JIT代码也很容易，下图是JSFunction对象的内存布局，其中kCodeEnryOffset所指的地址既是JSFucntion对象的JIT代码的地址。
**8.总结**
这篇文章从一个微小的逻辑漏洞出发，详细介绍了如何克服重重阻碍，利用这个漏洞实现稳定的任意代码执行。文中所述的将一个越界读漏洞转换为越界写漏洞的思路，应该也可以被一些其他的信息泄露漏洞所使用，希望对大家有所帮助。
对于漏洞的具体利用，此文中还有很多细节没有提及，真正的利用流程远比文中所述复杂，感兴趣的可以去看这个漏洞的详细利用[10]。
**引用**
[1]
[2][https://github.com/secmob/cansecwest2016/blob/master/Pwn a Nexus device
with a single
vulnerability.pdf](https://github.com/secmob/cansecwest2016/blob/master/Pwn%20a%20Nexus%20device%20with%20a%20single%20vulnerability.pdf)
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]