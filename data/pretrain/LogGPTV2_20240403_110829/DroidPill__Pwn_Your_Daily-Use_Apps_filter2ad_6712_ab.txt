designed to virtualize any non-system app, and it can create
a workspace to manage and execute multiple guest apps at
the same time. Whereas, in an exclusive app virtualization
system, the sandbox app is exclusively constructed for vir-
tualizing a predeﬁned group of guest apps. It cannot work
with any app outside the group.
For inclusive app virtualization, the sandbox app needs to
emulate several core system services (e.g., PackageManager,
and ActivityManager), which facilitate the tasks of man-
aging multiple guest apps (e.g., IPC communications be-
tween guest apps or their components). App Object Trans-
lation (AOT) is used to achieve the virtualization. Specif-
ically, when the sandbox app is installed, it registers a list
of dummy app objects (e.g., components) via the Android-
Manifest ﬁle. Afterwards, when a guest app is started within
the sandbox app, the latter creates an app object map that
associates app objects of the guest app with the registered
dummy ones, which have not been mapped yet. When the
guest app is actually executed, the sandbox app uses the
app object map to perform object translation between dif-
ferent components. Once the guest app is killed, the cor-
responding dummy app objects are freed and available for
the use by other guest apps. On the contrary, an exclu-
sive virtualization system does not need to emulate any core
system service, and the sandbox app and its guest apps are
installed simultaneously. Although it also uses AOT to im-
plement virtualization logic, the app object maps are gener-
ated at creation of the sandbox apps, and remain unchanged
at runtime. Table 2 compares the two app virtualizations.
2.2.2 Existing Solutions
Boxify [22] and NJAS [23] are two existing app virtualiza-
tion systems that sandbox unmodiﬁed and untrusted apps
in stock Android. In their implementations, a sandbox app
contains at least two functional components: sandbox ser-
vice and broker. While the former is mainly responsible
for virtual context setup and initialization (e.g., install the
hooking code), the latter performs virtualization logic and
enforces security policies.
Boxify is an inclusive virtualization system that leverages
the “isolated process” feature to create a tamper-proof app
sandboxing system. In Android, an app running in an iso-
lated process cannot conduct any operation which requires
Android permissions (e.g., access data on SD card). In Box-
ify, the sandbox app’s broker runs in a normal process, and
680Figure 1: System Architecture (Boxify)
Figure 2: System Architecture (NJAS)
the guest apps run in diﬀerent isolated processes along with
the sandbox service. At start time, the sandbox service in-
stalls the GOT2 hooks, called Shim, that can redirect the
Binder IPC and the guest app’s system-level calls to the
broker. After the guest app is loaded, the broker monitors
references and performs virtualization logic. Figure 1 dis-
plays the system architecture of Boxify.
NJAS is an exclusive virtualization system that builds its
sandbox system on top of the ptrace mechanism. Unlike
Boxify, NJAS sets up the broker and a guest app in sepa-
rated processes that have the same app privileges. It relies
on the ptrace system call to ensure that the broker can in-
tercept and inspect system calls made by the guest app,
including adverse ptrace calls’ prevention. NJAS suﬀers two
limitations, that lead to an unﬂedged app virtualization sys-
tem: First, its sandbox app can only run one guest app; Sec-
ond, it does not have suﬃcient AOT and misses translating
a number of app object types. Figure 2 depicts the system
architecture of NJAS.
3. DESIGN AND IMPLEMENTATION
3.1 Design Rationale
DroidPill, as an oﬀense system, has distinct security re-
quirements from Boxify and NJAS, which are designed for
defensive purposes. First, Boxify and NJAS must strictly
adhere to the “reference monitor” properties (i.e., complete
mediation and tamper proof [24]), which are not mandatory
for DroidPill. Second, DroidPill should meet the UI In-
tegrity requirement, under which a user cannot visually tell
whether a guest app runs in the native or virtual execution
context.
Without worrying about the security requirements of ref-
erence monitors, we decide to move the sandbox app’s broker
into the same process space as the guest app. By hooking
DVM and patching native libraries’ GOTs, the broker can
mediate both application-level and system-level API calls
made by the guest app. In addition, the broker can access
the abundant Java API semantics to overcome semantic gap
between the system-level view and the application-level view
for app data [25] and enable more ﬂexible attacks.
Ideally, DroidPill should use inclusive app virtualization,
which permits a sandbox app to virtualize non-system apps.
However, inclusive app virtualization breaks the UI Integrity
requirement for the majority of Android devices. Android
overview screen is the system-level UI that displays running
2Global Oﬀset Table
activities and tasks on a device. Users often use it to switch
or kill running apps by clicking or swiping out the app icons.
For Android 4.4 and older versions, which still account for
about 47% of the total Android devices using Google play
store as of October 2016 [26], an activity’s icon and label
deﬁned in AndroidManifest are registered at app installa-
tion, and they cannot be changed at runtime. For those
devices, a dummy activity is always displayed with a ﬁxed
icon and label on the overview screen, which is not visually
aligned with the mapped activity of a guest app. This is
not acceptable to DroidPill, because a user can easily detect
the visual anomaly of a virtual guest app on the overview
screen. Another design concern about inclusive app virtual-
ization is that a sandbox app needs to acquire a large num-
ber of Android permissions in order to work with a variety of
guest apps, which instantly exposes the DroidPill malware
to scrutiny by security scanners on devices or at app stores
[27].
Therefore, DroidPill adopts exclusive app virtualization,
since sandbox apps are built based on the APK ﬁles of prede-
ﬁned guest apps, and original icons of the guest apps can be
added to the sandbox apps and statically registered to An-
droid at app installation. Unlike NJAS, DroidPill is able to
virtualize multiple guest apps simultaneously. As a result,
one DroidPill malware can reliably mount attacks against
multiple benign apps on a device.
3.2 System Architecture
In DroidPill, a sandbox app consists of three parts: bait,
constructor and broker. Bait is mainly used for luring users
to install and execute sandbox apps (malware), and it should
provide the functionalities as advertised to users. In addi-
tion, bait contains attack vectors that hijack guest apps’
launch sequences. Similar to Boxify’s sandbox service, con-
structor is responsible for installing broker and loading guest
apps. Broker is in charge of virtualization and attacks
against guest apps by mediating communications between
a guest app and the OS (i.e., kernel and system services).
The constructor and the broker work together to build a
virtual execution context for loading and running a guest
app. Figure 3 shows the system architecture of DroidPill, in
which we exclude the bait and the constructor to compare
with Boxify and NJAS.
DroidPill enforces the process segmentation of guest apps.
Each guest app runs inside its own process space along with
the constructor and the broker, and the bait has its own
standalone process. The design is motivated by the Chrome
681Figure 3: System Architecture (DroidPill)
browser, in which tabs are executed in separated processes,
and the exception of one tab does not crash other tabs. Like-
wise, the process segmentation assures that a guest app is
protected from crashes incurred by errors from another guest
app. We solve this problem by taking advantage of the An-
droid feature that allows an app to customize the process
name for each component. Speciﬁcally, a custom process
name for a component can be deﬁned in the “process” at-
tribute of the component tag in AndroidManifest. When the
ﬁrst app component of a process is to be executed, the activ-
ity manager spawns a new process from the zygote process
and names it using the process name deﬁned in Android-
Manifest. In DroidPill, the AndroidManifest ﬁle of a sand-
box app contains not only a set of the bait’s components
but also the sets of dummy components corresponding to
the guest apps. By manipulating the “process” attributes of
the component tags, we can assign the bait and the guest
apps to diﬀerent processes at runtime.
Further, when a new process of the sandbox app is created,
it can use process names to determine whether to execute
the bait or a correspondings guest app, and load the app
code to the process’ memory space. In implementation, we
build a custom android.app.Application class and deﬁne it
in a sandbox app’s manifest ﬁle. Android ensures this cus-
tom Application class is initialized ahead of any other app
code at runtime. Each time a sandbox app’s new process
is started, the initialization function of this custom Appli-
cation class selects an app and loads its code based on the
current process name. Unlike NJAS that only supports vir-
tualization for a single guest app in a sandbox app, DroidPill
has two additional features (i.e., process segmentation, and
selective app loading process).
3.3 Constructor
The constructor’s task is to install the broker and load
guest apps, which is mainly implemented in the initialization
function of the custom Application class. The constructor
can load the native library where the broker is encapsulated
via calling System.loadLibrary(). Here we will explain how
to load a guest app into the virtual execution context.
3.3.1 Guest App Loading
According to [28], Android allows an app to load the
code and data of another app in its own process space
via the Context.createPackageContext() framework API,
even though they come from diﬀerent developers. Note
this API only works for free apps, because the apk
ﬁles of paid apps are not readable from a non-paid one.
Figure 4: Virtual Execution Context for Guest Apps
In DroidPill, the constructor invokes this API at run-
time with the CONTEXT INCLUDE CODE and CON-
TEXT IGNORE SECURITY ﬂags to load a guest app,
without containing any data and resources from guest apps
in the sandbox app.
Among them,
3.3.2 Virtual Execution Context
Android provides a variety of framework classes to weave
the execution contexts for apps.
two
classes are critical (i.e., android.app.LoadedApk and an-
droid.app.ContextImpl ). When a new app process is gen-
erated and its apk ﬁle is load, a LoadedApk object is cre-
ated to store the metadata for the apk, which includes
package name, code loader, resource, and app data paths.
During this process, both app code and data (e.g., refer-
ences) are loaded to the memory, and they are referenced by
the code loader object (i.e., java.lang.ClassLoader ) and re-
source objects (e.g., android.content.res.Resources and an-
droid.content.res.AssetManager ). Therefore, the app data
and resources of the apk ﬁle can be accessed via the host-
ing LoadedApk object. Moreover, ContextImpl provides the
major interface for an app to interact with the rest of world.
Through this interface, the app can connect to the Android
system services, launch the activities and services, and visit
the package data. To build the execution context for a new
app component, Android creates a new ContextImpl object,
and attaches the object to the component. As the Con-
textImpl object includes a LoadedApk object, the compo-
nent can retrieve the app resources via the resource objects
inside the LoadedApk object. Here, each component has its
own ContextImpl object, but the app has only one Load-
edApk object.
In DroidPill, the virtual execution context of a guest app
and its components is composed of two layers (i.e., the native
layer and the virtualization layer). The guest app is directly
run over the native layer, and the virtualization layer dwells
underneath. The native layer is the native execution con-
text of the guest app, and it contains the ContextImpl and
the LoadedApk objects of the guest app, which are created
when the constructor calls Context.createPackageContext()
to load the guest app. The virtualization layer intervenes
the data transferred between the native layer and the OS,
and carries out the virtualization logic. The virtualization
layer is generated when the constructor loads the broker’s
682native library to the memory. Figure 4 depicts a guest app’s
virtualization execution context.
3.4 Broker
The broker intercepts the guest apps’ application-level and
system-level API calls by instrumenting DVM and native
system libraries, which empowers DroidPill to perform vir-
tualization logic.
3.4.1 Public App Objects
In Android, apps should claim and use the system-wide
unique IDs for some app objects at installation or runtime
(e.g., components whose ID is the combination of the app
name and component name). This assists the system ser-
vices (e.g., ActivityManager) in mediating the inter-app and
inter-component communication, and also centrally manag-
ing the global resources (e.g., online account credentials).
If an app violates this rule and attempts to use the dupli-
cate object IDs, it can result in the installation’s rejection or
broken functionality. For example, an authority is used for
uniquely identifying the data store associated with a content
provider, and its value should be globally distinctive. The
Android installer automatically rejects any app that declares
a duplicate authority in the manifest ﬁle.
While we refer to an app object that must have a system-
wide unique ID as a public app object, ﬁve types of public app
objects (i.e., Component, Authority, Account Type, Custom
Permission, and Intent Action) are identiﬁed. These public
app objects are deﬁned in AndroidManifest or an xml re-
source ﬁle and registered to the package manager or other
system services for handling the runtime operations related
to the apps. Table 3 displays a list of public app object
types that includes their names, deﬁnitions in AndroidMan-
ifest and duplication penalties.
In addition to Component and Authority, we give a brief
explanation of the other public app objects. (1) The Android
account manager uses Account Type provided by an app to
uniquely represent an online account service, and to help
the app perform authentication with backend servers. The
account manager always rejects a duplicate Account Type,
leading to an app’s malfunction. (2) Custom Permissions
are app-deﬁned permissions that guide system services to
enforce the ﬁne-grained access control over app data. If two
apps from diﬀerent developers deﬁne an identical signature-
level permission, then the late-installed app may not have
the permission granted and may lose the access to its app
data.
(3) Intent Actions are deﬁned in the intent ﬁlters
by either system or user apps. When receiving an implicit
intent without a component name, activity manager uses
its intent action to decide which app to send.
If multiple
apps register this intent action for their activities, activity
manager displays a picker dialogue that shows all apps that
accept this intent action, and the user needs to manually
choose the one to process the intent. With DroidPill, a user
may see the duplicate component icons and labels, one from
the guest app and the other from the sandbox app, in the
picker dialogue, which breaks the UI Integrity requirement
in an event of duplicate actions.
Intent Actions in other
components do not have this issue.
3.4.2 Virtualization Logic
Droidpill fulﬁlls OS service virtualization in two steps. (1)
A sandbox app creates the virtual names for public app
Table 3: Public App Objects
Type
Component
Declaration
 -
“package” attribute &
component -
“android:name”
Penalty
Installation
Reﬂection
Authority
 -
“android:authorities”
Installation
Reﬂection
Account
Type
Custom
Permission
Any in Authenticator
and SyncAdapter’s
conﬁg.xml ﬁles -
“android:accountType”
 and
 -
“android:name” & Any
- “android:permission”
Broken
Functionality