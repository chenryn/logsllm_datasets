by g, 1 be the identity element of G and G∗ denote G\{1}.
2.1 Assumptions
q-SDH Assumption [11]. Given (g, gx, . . . , gxq
Z∗
p, it is hard to output a pair(cid:0)c, g1/(x+c)(cid:1) for c ∈ Zp\{−x}.
) for x $←
A labeled NIZK should satisfy soundness and unbounded
zero-knowledge, where the former requires that no adversary
can prove any false statement, and the latter means that
there exists a simulator which is able to simulate any proof
for any statement x and any label (cid:96) without knowing the
witness w. If a labeled NIZK also provides simulation-sound
extractability, then it is called a labeled simulation-sound
extractable non-interactive zero-knowledge proof (SE-NIZK)
[36], where there exists an online extractor [34] works even if
the adversary sees simulated proofs and information about
previously extracted values. In this paper, we consider la-
beled SE-NIZKs in the random oracle model (ROM) [6], and
refer to [9] for a formal deﬁnition.
We adopt the notations of [20] to abstract labeled NIZKs.
Let Σ ← SPK{(witness) : statement}((cid:96)) denote a labeled
SE-NIZK on a label (cid:96), π ← NIZK{(witness) : statement}
be an NIZK. We write VerifySPK(statement, Σ, (cid:96)) for the pro-
cedure that veriﬁes a labeled SE-NIZK proof Σ, and write
VerifyNIZK(statement, π) for verifying an NIZK proof π.
2.3 Algebraic MAC
Following [24], an algebraic MAC scheme MAC is deﬁned
as a triple of algorithms MAC = (KeyGen, MAC, Verify) with
associated message space Mc and tag space T .
• KeyGen(1λ) : On input a security parameter 1λ, the key
generation algorithm outputs a secret key sk and a set of
parameters parmac which is an implicit input in the follow-
ing algorithms.
• MAC(sk, m) : On input the secret key sk and a message
m, the MAC algorithm outputs an authentication tag σ.
• Verify(sk, m, σ) : On input the secret key sk, a message
m and a tag σ, the deterministic veriﬁcation algorithm
outputs 1 if σ is valid on m under sk and 0 otherwise.
We assume that the key generation algorithm KeyGen satis-
ﬁes the key-parameter consistency [24], meaning that there
does not exist two keys sk and sk(cid:48) such that (parmac, sk) ∈
KeyGen(1λ), (parmac, sk(cid:48)) ∈ KeyGen(1λ) and sk (cid:54)= sk(cid:48).
Given the parameters parmac and a message-tag pair (m, σ),
we assume that there exists a proof system NIZK{(sk) :
Verify(sk, m, σ) = 1∧(parmac, sk) ∈ KeyGen(1λ)} proving that
σ is a valid tag on m under sk associated with parmac.
Unforgeability. Based on the security notions of algebra-
ic MACs [29, 24], we deﬁne a security notion of algebraic
MACs, i.e., strongly existentially unforgeable under random
message and chosen veriﬁcation queries attack (suf-rmva).
Deﬁnition 1. An algebraic MAC scheme MAC is said to
be suf-rmva secure if for any probabilistic polynomial time
0500100015002000250010B1KB10KB100KBECDHE1ECDHE2ECDHE3ECDHE4Connections per secondHTTP payloadsize1181(PPT) adversary A, there exists a negligible function ν such
that Advsuf-rmvaMAC
(A) def=
 (parmac, sk) ← KeyGen(1λ);
(m∗, σ∗) ← Amac(sk),verify(sk,·,·)(parmac) :
(m∗, σ∗) /∈ Q ∧ Verify(sk, m∗, σ∗) = 1
 ≤ ν(λ),
Pr
• Encpw(M ): On input a password pw ∈ D and a mes-
sage M ∈ Me, the encryption algorithm outputs a
ciphertext C ∈ C, which is also denoted by [M ]pw.
• Decpw(C): On input pw and a ciphertext C ∈ C, the
decryption algorithm outputs a plaintext M for C.
where for each query mac returns m $← Mc and σ ←
MAC(sk, m) and adds (m, σ) to the set Q which is initially
empty, for each query (m, σ) verify returns Verify(sk, m, σ).
We deﬁne a security notion of password-based encryption
called indistinguishability under equality test (IND-ET), where
an equality test oracle is used to model an adversary’s ability
deciding whether an online password guess is correct.
Weak pseudorandomness. Based on the deﬁnition of
weak pseudorandom functions (wPRFs) [46], we deﬁne a no-
tion of weak pseudorandomness of algebraic MACs. For sim-
plicity, we assume that the size of Mc is super-polynomial.
Deﬁnition 2. An algebraic MAC scheme MAC is said to
be weak pseudorandom if for any PPT adversary A, there
exists a negligible function ν, such that AdvwprMAC(A) def=
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) (parmac, sk) ← KeyGen(1λ); b $← {0, 1};
m $← Mc; σ0 ← MAC(sk, m); σ1
b(cid:48) ← Amac(sk)(parmac, m, σb)
$← T ;
 − 1
b = b
(cid:48)
2 Pr
≤ ν(λ), where for each query, the mac oracle returns a ran-
dom m ∈ Mc and σ ← MAC(sk, m).
Credential Presentation. A tag σ is used as a creden-
tial in this paper. The credential presentation consisting
of (Show, ShowVerify) algorithms, is a procedure of proving
possession of a valid message-tag pair (m, σ), and is gener-
ally constructed via the randomize-then-prove paradigm.
In the randomize-stage, there are two algorithms Rerand
and Derand such that Rerand(σ) returns a randomized cre-
dential T and a randomness a, and Derand(T, a) returns σ.
For algebraic MACs, both a prover and a veriﬁer can com-
pute the same value V = fp(parmac, T, m, a) = fv(T, sk) us-
ing (m, a) and sk respectively, where fp and fv are eﬃciently
computable functions speciﬁed by a concrete mechanism.
In the prove-stage, the prover proves knowledge of (m, a)
such that fp(parmac, T, m, a) = V using a labeled SE-NIZK.
• Show(parmac, m, σ, (cid:96)) : On input parmac, a message-tag pair
(m, σ) and a label (cid:96) ∈ {0, 1}∗, the Show algorithm runs
(T, a) ← Rerand(σ), then computes V ← fp(parmac, T, m, a),
and executes Σ ← SPK{(m, a) : fp(parmac, T, m, a) = V }((cid:96)).
Finally, it outputs a presentation proof σC ← (T, V, Σ).
• ShowVerify(parmac, σC , (cid:96), sk) : On input parmac, a presen-
tation proof σC = (T, V, Σ), a label (cid:96) and the secret key
sk, algorithm ShowVerify computes ˜V ← fv(T, sk). If T
is correctly formed and VerifySPK((parmac, T, V ), Σ, (cid:96)) = 1
and V = ˜V , then ShowVerify returns 1, else it returns 0.
We say that the tag-randomization is simulatable, if there ex-
ists an eﬃcient algorithm TVSim that takes as input parmac,
and returns a pair (T (cid:48), V (cid:48)) such that V (cid:48) = fv(T (cid:48), sk) and T (cid:48)
has the same distribution as T produced by Rerand(σ).
2.4 Password-based Encryption
Let Me be a message space of super-polynomial size, C
be a ciphertext space. A password-based encryption scheme
PE with a password pw drawn uniformly at random from a
dictionary D, is deﬁned as PE = (Enc, Dec).
− 1
(cid:48)
(cid:34)
(cid:35)
b = b
Deﬁnition 3. A password-based encryption scheme PE is
said to be IND-ET secure, if for any PPT adversary A, there
exists a negligible function ν, we have Advind-etPE,D(A) def=
$← C;
C1 ← Encpw(M ); b(cid:48) ← AOet(M,·)(Cb)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) b $← {0, 1}; pw $← D; M $← Me; C0
2 Pr
≤ qet/|D| + ν(λ),
where Oet(M,·) takes as input a M(cid:48) ∈ Me and outputs 1 if
M = M(cid:48) and 0 otherwise, qet is the number of oracle queries.
2.5 Digital Signature
A digital signature scheme DS is deﬁned as a triple of
algorithms DS = (Gen, Sign, Ver). The key generation algo-
rithm Gen(1λ) returns the public and secret keys (pk, sk).
The signing algorithm Sign(sk, M ) returns a signature σ on
a message M . The veriﬁcation algorithm Ver(pk, M, σ) re-
turns 1 if σ is valid on M under pk and 0 otherwise.
The security notion of digital signatures is existential un-
forgeability under adaptive chosen message attacks (EUF-
CMA) [35], which states that for any PPT adversary A,
(A)
there exists a negligible function ν, such that Adveuf-cma
(cid:20) (pk, sk) ← Gen(1λ); (M∗, σ∗) ← ASign(sk,·)(pk) :
Ver(pk, M∗, σ∗) = 1 ∧ M∗ /∈ Q
def= Pr
≤ ν(λ), where for each query M , Sign returns a signature
σ on M and adds M to the set Q which is initially empty.
(cid:21)
DS
3. SECURITY MODEL
We formalise a security model for APAKE protocols in
the extra-storage setting, meaning that a client needs to
memorize a password and store a password-wrapped cre-
dential on some extra storage. The deﬁnitions of authen-
ticated key exchange (AKE) security and client authentica-
tion combine the security model for PAKE protocols by Bel-
lare, Pointcheval and Rogaway [4] and the model for anony-
mous authentication by Lindell [45]. The security model for
anonymity is based on indistinguishability-based deﬁnition
of anonymity for group signatures [3].
3.1 AKE Security and Client Authentication
Protocol participants. The participants of an APAKE
protocol P involve a set of clients C = {C1,··· , CN} and a
set of servers S. For simplicity, we assume that C is ﬁxed
and S contains only one server S, i.e., S = {S}.
Long-lived keys. The server S holds a long-term secret
SK for issuing credentials and authenticating himself and
publishes the system parameters params which are publicly
available for all parties. Each client Ci ∈ C holds a pass-
word pwi that is drawn independently and uniformly from
1182a dictionary D, and a password-protected credential credCi
generated by wrapping a credential issued by S with pwi.
Protocol execution. Each participant U ∈ C ∪ S is mod-
eled as a PPT Turing machine, and the δ-th instance of U is
denoted by U δ. An adversary A is given a set of password-
protected credentials Cred = {credi}i∈C and params, and is
assumed to have full control of the communication network.
Adversary A is a PPT algorithm with a distinguished query
tape. Queries written on this tape are answered according
to the description of P. The allowed queries are as below:
• Send(U, δ, M ): causes message M to be sent to instance
U δ for U ∈ C ∪ S. The instance U δ computes what the
protocol says to, and sends back the computation result
to A. If this query causes U δ to accept or terminate, it
will also be made visible to A.
• Execute(Ci, ρ, S, δ): carries out an honest execution of P
between a client instance C ρ
i and a server instance Sδ
and outputs the transcript of the execution. Although
this queries could be simulated with Send queries, sepa-
rate Execute queries are essential for dealing with oﬀ-line
dictionary attacks [4].
• Reveal(U, δ): returns the session key held by instance U δ.
• Test(U, δ): If instance U δ for U ∈ C ∪ S has accepted
and holds a session key skδ
U , the following happens. A bit
b ∈ {0, 1} is picked uniformly at random. If b = 1, skδ
is returned to A. Otherwise, a string picked at random
U
from the space of session keys is returned. Adversary A
is allowed to ask the Test query only once.
U , a session identiﬁer sidδ
Partnering. Since the anonymity property implies that
the server can only know that a client is a legitimate entity
from a group C, a partner identiﬁer of the server is the group
C. An instance U δ that accepts, holds a partner identiﬁer
pidδ
U (which is the transcript of the
whole protocol) and a session key skδ
U . A client instance
C ρ
i and a server instance Sδ are said to be partnered if both
accept, they hold (pidρ
S, skδ
S)
Ci
respectively, with sidρ
= S,
Ci
S = C and Ci ∈ C, and no other instance accepts with
pidδ
session identiﬁer equal to sidρ
Ci
S, sidδ
S, pidρ
Ci
, sidρ
Ci
= sidδ
, skρ
Ci
S, skρ
Ci
) and (pidδ
= skδ
.
Freshness. An instance U δ is said to be fresh unless either
a Reveal(U, δ) query occurs or a Reveal(V, ρ) query occurs,
where V ρ is the partner of U δ (if exists).
AKE security. Let SuccAKEP,D (A) be the event that A makes
a single Test(U, δ) query such that the instance U δ has ter-
minated and is fresh, and eventually outputs a bit b(cid:48) such
that b = b(cid:48), where b is chosen in the Test query. A protocol
P is said to be AKE secure, if for any PPT adversary A,
there exists a negligible function ν such that
AdvAKEP,D (A) def= 2 Pr[SuccAKEP,D (A)] − 1 ≤ qse/|D| + ν(λ),
where qse is the number of Send(S,·,·) queries.
Client authentication. Due to the anonymity require-
ment, an adversary against client authentication is declared
successful if it impersonates any client in the group C to the
server while the server fails to detect.
To capture the security of client authentication, A is pro-
vided the same information and abilities as that in the AKE
experiment, except that the Test query is ignored. Let
SuccC2SP,D(A) be the event that some server instance Sδ ac-
cepts but has no partner instance. We say that a protocol
P achieves clients-to-server authentication if for any PPT
adversary A, there exists a negligible function ν such that
AdvC2SP,D(A) def= Pr[SuccC2SP,D(A)] ≤ qse/|D| + ν(λ),
where qse is the number of Send(S,·,·) queries.
3.2 Anonymity
The anonymity property requires that the server cannot
determine whether two key exchange transactions are made
by the same client. To model anonymity against the server,
an adversary is given the server’s secret key as in [24].1 A Reg
oracle is also provided to model the registration protocol.
Protocol participants. The participants of a protocol P
consist of a set of clients C = {C1,··· , CN} and a server S.
Long-lived keys. An adversary A impersonating as the
server S is given the system parameters params and the se-
cret key SK . Each client Ci ∈ C holds a password pwi. Her
password-protected credential credCi is initiated as ⊥ and
will be generated in the execution of the protocol.
Protocol execution. At the beginning of the protocol, a
random bit b is chosen. A is provided the following queries:
• Reg(U, M ): If U ∈ C and credU = ⊥, the following hap-
pens. Message M is sent to client U , and the client com-
putes what the registration protocol says to and send-
s back the computation result to A.
If U accepts, a
password-protected credential is generated by U and as-
signed to credU which is sent to A.
• Send(U, δ, M ): causes message M to be sent to instance