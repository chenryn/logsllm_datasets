40.2.3 JavaScript和TypeScript
并不是所有的平台和浏览器都能使用.NET代码，但几乎所有的浏览器都能理解
JavaScript。对JavaScript的一个常见误解是它与Java相关。实际上，它们只是名称相似，
因为Netscape（JavaScript的发起者）与Sun（Sun发明了Java）达成了协议，允许在名称中
使用Java。如今，这两个公司不再存在。Sun被Oracle收购，现在Oracle持有Java的商标。
Java和JavaScript有相同的根（C编程语言）, C#也是这样。JavaScript是一种函数式编
程语言，不是面向对象的，但它添加了面向对象功能。
JavaScript允许从HTML页面访问DOM，因此可以在客户端动态改变元素。
ECMAScript是一个标准，它定义了JavaScript语言的当前和未来功能。因为其他公司
在其语言实现中不允许使用Java这个词，所以该标准的名称是ECMAScript。Microsoft的
JavaScript实现被命名为JScript。访问http://www.ecmascript.org，可了解JavaScript语言的当
前状态和未来的变化。
尽管许多浏览器不支持最新的ECMAScript版本，但仍然可以编写ECMAScript 
5代
码。不是编写JavaScript代码，而是可以使用TypeScript。TypeScript语法基于
ECMAScript，但是它有一些改进，如强类型代码和注解。C#和TypeScript有很多相似的地
方。因为TypeScript编译器编译成JavaScript，所以TypeScript可以用在需要JavaScript的所
有地方。有关TypeScript的更多信息可访问http://www.typescriptlang.org。
40.2.4 脚本库
除了JavaScript编程语言之外，还需要脚本库简化编程工作。
● jQuery（http://www.jquery.org）是一个库，它抽象出了访问DOM元素和响应事件时
的浏览器的差异。
● Angular（http://angularjs.org）是一个基于MVC模式的库，用单页面的Web应用程序
简化了开发和测试（与ASP.NET MVC不同，Angular提供了MVC模式与客户端代
码）。
ASP.NET Web项目模板包括jQuery库和Bootstrap。Visual Studio 2015支持智能感知和
对JavaScript代码的调试。
 注意： 
本书未涉及指定Web应用程序的样式和编写JavaScript代码。关于
HTML和样式，可以参阅John Ducket编著的《HTML & CSS设计与构建网站》；进而阅
读Nicholas C.Zakas编著的Professional JavaScript for Web Developers （Wrox,2012）。
40.3 ASP.NET Web项目
首先创建一个空的ASP.NET Core 1.0 Web Application，命名为WebSampleApp（参见
图40-1）。从空模板开始，在阅读本章的过程中添加功能。
图40-1
  注意： 在本章的下载示例代码中，需要在Startup类中取消特定代码块的注
释，来激活所讨论的特性。还可以从头开始创建项目。不需要编写很多代码，就能运
行所有的功能。
创建了这个项目后，会看到一个解决方案和一个项目文件WebSampleApp，其中包括
一些文件和文件夹（参见图40-2）。
图40-2
解决方案包括global.json配置文件。这个文件列出了解决方案的目录。在下面的代码
片段中，可以看到它和projects键的值。src目录包含解决方案的所有项目和源代码。test目
录用于定义单元测试，但目前它们还不存在。sdk设置定义了使用的SDK的版本号（代码
文件global.json）。
    {
      "projects": [ "src", "test" ],
      "sdk": {
        "version": "1.0.0-0"
      }
    }
在项目结构中，用浏览器打开文件Project_Readme.html，会看到ASP.NET Core 1.0的
一些整体信息。项目文件夹中有一个References文件夹。这包含所有引用的NuGet包。在
空的ASP.NET 
Web 
Application项目中，引用的包只有
Microsoft.AspNetCore.IISPlatformHandler和Microsoft.AspNetCore.Server.Kestrel。
IISPlatformHandler包含IIS的一个模块，它把IIS基础架构映射到ASP NET Core 1.0
上。Kestrel是一个用于ASP.NET Core 1.0的新Web服务器，也可以在Linux平台上使用。
在project.json文件中还可以找到NuGet包的引用（在下面的代码片段中，它们在
dependencies部分）。frameworks部分列出了支持的.NET框架，如net452（.NET 4.5.2）和
netstandard1.0（.NET Core 1.0）。可以删除不需要驻留的框架。exclude部分列出了不应该
用于编译应用程序的文件和目录。publishExclude部分列出了不应该发布的文件和文件夹
（代码文件WebSampleApp/project.json）：
    {
      "version": "1.0.0-＊",
      "compilationOptions": {
        "emitEntryPoint": true
      },
      "dependencies": {
        "NETStandard.Library": "1.0.0-＊",
        "Microsoft.AspNetCore.IISPlatformHandler": "1.0.0-＊",
        "Microsoft.AspNetCore.Server.Kestrel": "1.0.0-＊"
      },
      "frameworks": {
        "net452": { },
        "netstandard1.0": {
        "dependencies": {
          "NETStandard.Library": "1.0.0-＊"
        }
        }
      },
      "content": [ "hosting.json" ]
      "exclude": [
        "wwwroot",
        "node_modules"
      ],
      "publishExclude": [
        "＊＊.user",
        "＊＊.vspscc"
      ]
    }
在Project设置的Debug选项中可以配置用Visual Studio开发时使用的Web服务器（参见
图40-3）。默认情况下，在Debug设置中，用指定的端口号配置IIS Express。IIS Express来
源于IIS，提供了IIS的所有核心特性。所以在以后托管Web应用程序的环境中，很容易开
发该应用程序（假设使用IIS托管）。
图40-3
用Kestrel服务器运行应用程序时，可以使用Debug Project设置选择Web配置文件。在
Profile选项中通过列表列出的选项是project.json中列出的命令。
用Visual Studio项目设置改变的设置会影响launchSettings.json文件的配置。通过这个
文件可以定义一些额外的配置，例如命令行参数（代码文件
WebSampleApp/Properties/launchsettings.json）：
    {
      "iisSettings": {
        "windowsAuthentication": false,
        "anonymousAuthentication": true,
        "iisExpress": {
        "applicationUrl": "http://localhost:19879/",
        "sslPort": 0
        }
      },
      "profiles": {
        "IIS Express": {
        "commandName": "IISExpress",
        "launchBrowser": true,
        "environmentVariables": {
          "Hosting:Environment": "Development"
        }
        },
        "web": {
        "commandName": "web",
        "launchBrowser": true,
        "launchUrl": "http://localhost:5000/",
        "commandLineArgs": "Environment=Development",
        "environmentVariables": {
          "Hosting:Environment": "Development"
        }
        }
      }
    }
在Solution 
Explorer中，项目结构中的Dependencies文件夹显示了JavaScript库的依赖
项。创建空项目时，这个文件夹是空的。本章后面的40.5节会添加依赖项。
wwwroot文件夹是需要发布到服务器的静态文件的文件夹。目前，这个文件夹是空
的，但是在阅读本章的过程中，会添加HTML和CSS文件以及JavaScript库。
C#源文件Startup.cs也包含在空项目中。这个文件在下面讨论。
在创建项目时，需要如下依赖项和名称空间：
依赖项
    Microsoft.AspNetCore.Http.Abstractions
    Microsoft.AspNetCore.IISPlatformHandler
    Microsoft.AspNetCore.Server.Kestrel
    Microsoft.AspNetCore.StaticFiles
    Microsoft.AspNetCore.Session
    Microsoft.Extensions.Configuration
    Microsoft.Extensions.Configuration.UserSecrets
    Microsoft.Extensions.Logging
    Microsoft.Extensions.Logging.Console
    Microsoft.Extensions.Logging.Debug
    Microsoft.Extensions.PlatformAbstractions
    Newtonsoft.Json
    System.Globalization
    System.Text.Encodings.Web
    System.Runtime
名称空间
    Microsoft.AspNetCore.Builder;
    Microsoft.AspNetCore.Hosting;
    Microsoft.AspNetCore.Http;
    Microsoft.Extensions.Configuration
    Microsoft.Extensions.DependencyInjection
    Microsoft.Extensions.Logging
    Microsoft.Extensions.PlatformAbstractions
    Newtonsoft.Json
    System
    System.Globalization
    System.Linq
    System.Text
    System.Text.Encodings.Web
    System.Threading.Tasks
40.4 启动
下面开始建立Web应用程序的一些功能。为了获得有关客户端的信息并返回一个响
应，需要编写对HttpContext的响应。
使用空的ASP.NET 
Web应用程序模板创建一个Startup类，其中包含以下代码（代码
文件WebSampleApp/Startup.cs）：
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.DependencyInjection;
    // etc.
    namespace WebSampleApp
    {
      public class Startup
      {
        public void ConfigureServices(IServiceCollection services)
        {
        }
        public void Configure(IApplicationBuilder app, ILoggerFactory loggerFacto
ry)
        {
        app.UseIISPlatformHandler();
        // etc.
        app.Run(async(context) =>
        {
          await context.Response.WriteAsync("Hello World! ");
        });
        }
        public static void Main(string[] args)
        {
        var host = new WebHostBuilder()
          .UseDefaultConfiguration(args)
          .UseStartup()
          .Build();
        host.Run();
        }
      }
    }
Web应用程序的入口点是Main方法。通过project.json配置文件中的emitEntryPoint配
置，可以定义是否应该使用Main方法。本书创建的.NET 
Core控制台应用程序也定义了
Main方法。只有库不需要Main方法。
对于从Visual 
Studio模板中生成的默认实现，Web应用程序使用WebHostBuilder实例
配置。使用WebHostBuilder调用UseDefaultConfiguration方法。这个方法接收命令行参数，
并创建一个配置，其中包括可选的托管文件（hosting.json），增加环境变量，并将命令行
参数添加到配置中。UseStartup方法定义为使用Startup类，该类调用ConfigureServices和
Configure方法。最后一个用WebApp-licationBuilder调用的方法是Build，它返回一个实现
IWebApplication接口的对象。对于返回的应用程序对象，调用Run方法，这会启动托管引
擎；现在服务器在监听和等待请求。
hosting.json文件用于配置服务器（代码文件WebSampleApp/hosting.json）：
    {
      "server": "Microsoft.AspNetCore.Server.Kestrel",
      "server.urls": "http://localhost:5000"
    }
因为Startup类通过一个泛型模板参数被传递给UseStartup方法，所以接着调用
ConfigureServices和Configure方法。
Configure方法通过实现IApplicationBuilder接口的依赖注入，接收一个内部应用程序
构建器类型。此接口用于定义应用程序使用的服务。调用这个接口的Use方法，可以构建
HTTP请求管道，来定义响应请求时应该做什么。Run方法是IApplicationBuilder接口的一
个扩展方法；它调用Use方法。这个方法通过程序集
Microsoft.AspNetCore.Http.Abstractions和名称空间Microsoft.AspNet-Core.Builder中的
RunExtensions扩展类来实现。
Run方法的参数是一个RequestDelegate类型的委托。这个类型接收一个HttpContext作
为参数，返回一个Task。使用HttpContext（代码片段中的context变量），可以在浏览器中
访问请求信息（HTTP标题、cookie和表单数据），并且可以发送一个响应。代码片段给
客户端返回一个简单的字符串Hello, World !，如图40-4所示。
图40-4
  注意： 如果使用Microsoft Edge测试Web应用程序，就需要启用localhost。在
URL框中输入about:flags，启用Allow localhost loopback选项（参见图40-5）。除了使用
Microsoft 
Edge内置的用户界面设置此选项之外，还可以使用命令行选项：实用工具
CheckNetIsolation。命令：
            CheckNetIsolation LoopbackExempt -a -n=Microsoft.MicrosoftEdge_8wek
yb3d8bbwe
图40-5
可以启用localhost，类似于使用Microsoft 
Edge的更友好的用户界面。如果想配置其他
Windows应用程序以启用localhost，也可以使用实用程序CheckNetIsolation。
给Web应用程序添加日志信息是非常有用的，可以获得当前状态的更多信息。为此，
Startup类的Configure方法接收一个ILoggerFactory对象。通过这个接口，可以使用
AddProvider方法添加日志记录器提供程序，并使用CreateLogger方法创建一个实现ILogger
接口的日志记录器。如下面的代码片段所示，AddConsole和AddDebug是添加不同提供程
序的扩展方法。AddConsole方法添加的提供程序把日志信息写到控制台，AddDebug方法
添加的提供程序把日志信息写到调试器。使用这两个方法但不传递参数值，就可以把默认
值用于配置日志消息。默认值指定写入信息类型（和更高类型）的日志消息。可以使用不
同的重载版本来指定日志的其他过滤器，也可以使用配置文件来配置日志记录（代码文件
WebSampleApp/Startup.cs）：
    public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
    {
      // etc.
      loggerFactory.AddConsole();
      loggerFactory.AddDebug();
      // etc.
    }
通过ILogger接口，可以使用Log方法写入自定义日志信息。
40.5 添加静态内容
通常不希望只把简单的字符串发送给客户端。默认情况下，不能发送简单的HTML文
件和其他静态内容。ASP.NET 5会尽可能减少开销。如果没有启用，即使是静态文件也不
能从服务器返回。
要在Web服务器上处理静态文件，可以添加扩展方法UseStaticFiles（给之前创建的
Run方法添加注释）：
    public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
    {
      app.UseiISPlatformHandler();
      app.UseStaticFiles();
      //etc.
    }
一旦给Configure方法添加大小写相同的此代码行，编辑器中的智能标记就会提供添
加NuGet包Microsoft.AspNet.StaticFiles的选项。选择它，下载NuGet包，并列在project.json
中：
      "dependencies": {
        "Microsoft.AspNetCore.IISPlatformHandler": "1.0.0-＊",
        "Microsoft.AspNetCore.Server.Kestrel": "1.0.0-＊",
        "Microsoft.AspNetCore.StaticFiles": "1.0.0-＊"
      },
添加静态文件的文件夹是项目内的wwwroot文件夹。在project.json文件中可以使用
webroot设置配置文件夹的名称。如果没有配置文件夹，文件夹就是wwwroot。进行了配
置并添加了NuGet包后，就可以将HTML文件添加到wwwroot文件夹中（代码文件