### Manual Inspection of False Positives

Manual inspection reveals that false positives (FPs) are mainly caused by the following limitations. First, not all identified sinks through in-image analysis are significant; we applied several heuristics to reduce insensitive sinks, but some cases remain unimportant. Second, some of our modeled checks might occasionally serve a non-security purpose. For example, a user's restriction list might be consulted before adding a new entry to it. Third, some user checks reflect specific customization needs. For instance, Samsung adds additional user checks like `UserId == 100` and `UserId == 200` for implementing custom components. Similarly, HTC and LG add custom user-based checks to enforce device administration. Through cross-vendor analysis, AceDroid cannot recognize these custom checks.

### Improving Kratos in In-Image Analysis

In this section, we aim to demonstrate how normalization can enhance the state-of-the-art system Kratos. We simulate the results of Kratos since the tool is not publicly available. Please note that our simulation of Kratos (SimKratos) is our best effort to replicate its functionality, though it may not produce exact results (e.g., we might miss non-explicit package-based checks that the authors annotate manually). Recall that Kratos considers the set of explicit checks for an access as the protection for the access, without normalization or considering their relations. We report the results in column 4 of Table IV (inc*). In contrast, we conduct AceDroid's in-image analysis, perform our proposed modeling and normalization, and report the detected inconsistencies in column 2 of Table IV (inc*). Our reported true positives (TPs) are the set of cases that are only semantically different (i.e., with different protections).

As shown in Table IV, SimKratos reports a larger number of inconsistencies, with an average of 22% being actual inconsistencies. In comparison, AceDroid detects more TPs, with an average increase of 63%. Additionally, by suppressing semantically equivalent checks, we reduce SimKratos' FPs by 65%. This highlights the importance of our technique.

### Findings

We analyzed the reported consistencies and found 73 actual inconsistencies. We selected instances for which we had the physical device and confirmed 27 actual vulnerabilities that can be exploited to conduct various attacks. Table V summarizes some of the confirmed vulnerabilities. We reported high-profile attacks discovered through our analysis to the corresponding vendors (Samsung, LG, HTC, Sony). More than 20 of our reported vulnerabilities have been acknowledged and are being investigated by the vendors. Due to space limitations, we discuss seven attacks, two of which are ranked as critical by the corresponding vendors.

#### Triggering a System Shutdown in Sony

AceDroid discovered several inconsistencies in Sony devices, where a system shutdown operation, typically reserved for system/preloaded apps, can be triggered by non-privileged apps. A notable inconsistency, depicted in Figure 7, involves the `DevicePolicyManager.reboot()` method in Sony Xperia XA. The caller needs to satisfy three UID checks (1000, 1001, etc.) or possess the `MANAGE_USERS` permission. However, a new public entry point introduces a vulnerability, allowing a non-privileged app to trigger a system shutdown.

#### Bypassing and Tampering with User Restrictions

Interestingly, our analysis revealed that user restrictions, employed to restrict user capabilities, can be manipulated by a non-privileged caller in several Samsung devices. Specifically, the internal API for updating user restrictions can be reached through multiple entry points with different security checks. One entry point verifies whether the caller is the System UID, root UID, or has the `MANAGE_USERS` permission. Another entry point, added by Samsung, invokes the internal API without any security checks, enabling a non-privileged app to maliciously manipulate the restrictions. An attacker can exploit this to bypass existing restrictions set by the device owner or administrator (e.g., setting `DISALLOW_SMS` to false to access restricted SMS operations). More dangerously, the vulnerability can cause a major denial of service by disabling all operations controlled through the user restrictions list (e.g., disallowing outgoing calls, configuring system-wide settings, etc.). The attacking app can even prevent its uninstallation by setting `DISALLOW_UNINSTALL_APPS` and `DISALLOW_SAFE_BOOT` to true.

#### Forging Premium SMS Messages

The SMS Manager allows sending SMS messages through the exposed `sendText()` API. As illustrated in Figure 8, once an app invokes `sendText()`, the service verifies that the calling app has the `SEND_SMS` permission and that the calling user does not have any restrictions on sending SMS messages (i.e., `DISALLOW_SMS`). It then calls the internal `sendText()` in `SMSDispatcher`. AceDroid discovered that Samsung S6 Edge (6.0) registers a new broadcast receiver in the same class, allowing any app to invoke the internal `SendText()` API without the required `SEND_SMS` permission. This enables users to bypass the `DISALLOW_SMS` restriction and send premium SMS messages without user confirmation. If the destination number is a premium short code, the service verifies whether the caller has the `SEND_RESPOND_VIA_MESSAGE` permission, otherwise, it sends the message.