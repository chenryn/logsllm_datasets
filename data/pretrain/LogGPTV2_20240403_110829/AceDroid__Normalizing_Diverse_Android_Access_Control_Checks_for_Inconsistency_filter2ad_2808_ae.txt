123
221
38/47
27/37
21/28
36/64
212
289
338
403
331
268
284
410
35/45
24/35
18/26
12/16
30/53
314
305
378
298
243
252
389
39/51
34/38
32/40
26/33
29/35
39/68
468
313
325
366
369
491
manual inspection reveals that the FPs are mainly caused by
the following limitations. First, not all identiﬁed sinks through
the in-image analysis are privileged; We followed several
heuristics to reduce insensitive sinks; still, there are cases
that are not important. Second, some of our modeled checks
might seldom serve a non-security purpose. For example, the
user’s restriction list might be consulted before attempting
to add a new entry to it. Third, some user checks reﬂect
speciﬁc customization needs. For example, Samsung adds
additional user checks UserId == 100, UserId == 200
for implementing a custom component. Similarly, HTC and
LG add custom user-based checks to enforce their device ad-
ministration. Through cross-vendor analysis, AceDroid cannot
recognize those custom checks.
F.
the tool’s analysis and might not
Improving Kratos in In-Image Analysis
In this section, we aim to show how normalization can
improve the state-of-the-art system Kratos. We simulate the
results of Kratos since the tool is not public. Please note
that our simulation of Kratos (SimKratos) is our best effort
to conduct
lead to the
exact results (e.g., we might miss non-explicit package-based
checks that the authors annotate manually). Recall that Kratos
considers the set of explicit checks for an access as the
protection for the access, without normalization or considering
their relations. We report the results in column 4 in Table IV
inc*. In contrast, we conduct AceDroid ’s in-image analysis,
perform our proposed modeling and normalization and report
the detected inconsistencies in column 2 in Table IV inc*.
Our reported TP is the set of cases that are only semantically
different (i.e., with different protections).
As shown in Table IV, SimKratos reports a larger number
of inconsistencies, where on average 22% are actual inconsis-
tencies. In comparison, AceDroid detects more TPs, an average
increase of 63%. Besides, by suppressing the semantically
equivalent checks, we reduce SimKratos’ FP by 65%. This
illustrates the importance of our technique.
VII. FINDINGS
We analyzed the reported consistencies and found 73 actual
inconsistencies. We picked the instances for which we had
the physical device and conﬁrmed 27 actual vulnerabilities
that can be exploited to conduct different attacks. Table V
summarizes some of the conﬁrmed vulnerabilities. We reported
the high proﬁle attacks discovered through our analysis to the
corresponding vendors (Samsung, LG, HTC, Sony). More than
20 of our reported vulnerabilities have been acknowledged
12
LG G3
5.0.2
7/9
20/26
24/28
40/51
34/48
43/51
23/41
215
233
274
274
305
6.0
28/36
15/19
21/28
35/48
31/46
35/52
19/26
28/41
401
333
340
238
HTC M8
5.0.2
9/12
22/28
24/31
37/49
34/47
37/49
13/17
28/37
30/47
264
271
294
HTC M8
6.0
24/32
11/15
15/22
26/40
22/37
26/40
31/41
26/32
23/33
29/46
312
213
Sony Xperia
XA 6.0
26/35
13/18
19/27
28/43
23/39
28/43
28/39
23/32
21/31
26/41
32/48
247
Sony Xperia
XZ 7.0
36/53
33/47
19/36
36/52
31/46
36/52
33/43
28/36
35/46
24/32
16/21
34/54
TABLE IV.
COMPARISON WITH SIMKRATOS
Simkratos
# Inc* TP
AceDroid
Image
# Inc* TP
32
Nexus 5.0.2
29
Nexus 6.0
26
Nexus 6.0.1
S6 Edge 6.0.1
64
Tab S 8.4 6.0.1 53
68
S7 Edge 7.0
41
LG G3 5.0.2
LG G4 6.0
41
47
HTC M8 5.0.2
46
HTC M8 6.0
48
Xperia XA 6.0
Xperia XZ 7.0
54
21 ( 65.6 %) 53
15 ( 51.7 %) 47
12 ( 46.2 %) 45
36 ( 57.8 %) 98
30 ( 56.6 %) 92
103
39 ( 57 %)
23 ( 57 %)
71
28 ( 63.3 %) 71
30 ( 63.8 %) 71
68
29 ( 63 %)
69
32 ( 66 %)
34 ( 62 %)
75
TP FP
%↑ %↓
73
13 ( 24.5 %) 62
114 65
7 ( 14.9 %)
63
7 ( 15.6 %)
71
63
26 ( 26.5 %) 42
68
21 ( 22.8 %) 43
74
18 ( 17.5 %) 56
68
16 ( 22.1 %) 44
17 ( 23.6 %) 43
64
68
18 ( 25.4 %) 67
66
18 ( 26.5 %) 61
69
18 ( 26.1 %) 72
20 ( 26.7 %) 70
64
TABLE V.
CONFIRMED ATTACKS
Description
Victim Device(s)
Security Impact
Privilege Escalation
Privilege Escalation
Privilege Escalation
DoS
Eavesdropping on input events
such as screen taps
Intercepting and injecting input events
such as screen taps
Sending SMS messages
including premium messages
Denying receiving of SMS
messages
Privilege Escalation
Privilege Escalation
Privilege Escalation Bypassing and Forging User Restrictions
Enabling Bluetooth Quietly
Persist Bluetooth Settings
Injecting Hard Key Events
Privilege Escalation
such as Volume Up, Power Off, Screen Off
Privilege Escalation Rebooting the phone into Recovery Mode
Privilege Escalation
Privilege Escalation
Turning Radio On / Off
Phone Shutdown
DoS
DoS
DoS
Privilege Escalation
Unmounting SD Card persistently
Turning-Off Wiﬁ persistently
Turning-Off Bluetooth persistently
Manipulating Network Firewall Rules
LG G4 6.0
LG G4 6.0
S6 Edge 6.0.1
S6 Edge (6.0.1)
HTC M8 6.0
S6 Edge (6.0.1)
LG G4 6.0
LG G4
S6 Edge 6.0.1
S7 Edge (7.0)
Sony Xperia 6.0
Sony Xperia 6.0
Sony Xperia XA 6.0
LG G3 5.0.2
HTC M8 6.0
HTC M8 6.0
LG G3 5.0.2
Xperia XA 6.0
allowing
exploitable
to
trigger
and reproduced by the vendors. Other cases are still being
investigated by the vendors. Due to space limitations, we
discuss 7 attacks, where 2 are ranked as Critical by the
corresponding vendors.
Triggering a System Shutdown in Sony. AceDroid
discovered several
in Sony
devices
an
operation always reserved to the system/ preloaded apps.
A notable inconsistency discovered through comparing two
7. As illustrated
Sony devices is depicted in Figure
(on
in Sony Xperia XA’s
the
entry
DevicePolicyManager.reboot())
point
caller needs
enforcing disjoint privilege
(1000,
of
to
1001,..)
the
permission
checks: The
three UID checks
normal
simpliﬁed program paths
system shutdown;
a new public
inconsistencies
the vendor
introduces
possess
satisfy
either
one
left),
level
(i.e.,
or
a
Bypassing and Tampering with User Restrictions. Interest-
ingly, we discovered through our analysis that the user restric-
tions (employed to restrict user capabilities as discussed in
Section III-C3) can be manipulated by a non-privileged caller
in several Samsung devices. Speciﬁcally, our inconsistency re-
sults for the UserManagerService shows that the internal
API for updating the user restrictions can be reached through
multiple entry points enforcing different security checks. One
entry point veriﬁes whether the caller is System UID, root UID,
or has the the signature permission MANAGE_USERS before
updating the user restrictions. The second entry point, added
by Samsung, invokes the internal API without enforcing any
security checks, enabling a non-privileged app to maliciously
manipulate the restrictions. First, an attacker can exploit the
new entry point
to bypass existing restrictions set by the
device owner or administrator (e.g. access restricted SMS
operations through setting DISALLOW_SMS to false). More
dangerously, the vulnerability can cause a major denial of
service by disabling all operations that can be controlled
through the user restrictions list (e.g., disallowing to perform
outgoing calls, to conﬁgure system wide settings, etc). The
attacking app can even prevent
its uninstallation through
setting the restrictions DISALLOW_UNINSTALL_APPS and
DISALLOW_SAFE_BOOT to true.
Forging Premium SMS messages. The SMS Manager
allows sending SMS messages through the exposed API
sendText(). Figure 8 shows the ﬂow of this API’s imple-
mentation. As illustrated, once an app invokes sendText(),
the service veriﬁes that
the calling app is granted the
SEND_SMS permission and that the calling user does not have
any restrictions on sending SMS messages (i.e., restriction
DISALLOW_SMS). It then calls the internal sendText()
in SMSDispatcher. AceDroid discovered that Samsung S6
edge (6.0) registers a new broadcast receiver in the same class,
allowing to invoke the internal SendText() API. Surpris-
ingly, this broadcast receiver is not protected, enabling any
app to send SMS messages without the required SEND_SMS
permission and allowing users to bypass the DISALLOW_SMS
restriction. Even worse, this receiver can be further exploited
to send premium SMS messages without requiring user con-
ﬁrmation. Once the request is received, the service inspects
the destination phone number of the SMS message before
invoking sendSMS() that performs the actual sending of
the SMS. If the destination number is a premium short
code, the service veriﬁes whether the caller has the system
permission SEND_RESPOND_VIA_MESSAGE, otherwise it