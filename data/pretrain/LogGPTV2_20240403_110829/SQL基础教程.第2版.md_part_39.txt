Windows 8/8.1之前的版本
1. 鼠标右键点击命令提示符窗口，
在弹出的菜单中选择“属性”，进 要想把复制的字符串粘贴到命令提示符画面中，需要使用鼠标右键点击命令
入命令提示符的属性画面。
提示符的标题栏，在弹出的菜单中选择“编辑（E）”→“粘贴（P）”（图A）。
2. 在属性画面的“选项”标签下的
编辑选项中选择“启用Ctrl快
图A 将字符串粘贴到命令提示符画面中
捷键”。
要想在命令提示符中进行复制，需要选择“编辑（E）”→“范围指定（K）”，
然后拖动鼠标选定想要复制的范围，再选择“编辑（E）”→“复制（C）”。
经常需要接触命令提示符的读者，如果记住了这些操作，就不用每次都输入
冗长的命令名了。
● 298 第9章 通过应用程序连接数据库
第9章 通过应用程序连接数据库
9-3
通过Java连接PostgreSQL
● 可以使用Java程序，通过驱动来执行各种各样的SQL语句。
学习重点
● 通过数据库将SELECT语句的结果传递给Java程序之后，只能逐条循环
访问。这就是可以同时操作多条数据的数据库世界和每次只能操作一条数
据的程序世界的区别。
执行SQL语句的Java程序
前面我们已经了解了Java程序的编译和执行方法，接下来就让我们
真刀真枪地演练一次吧。具体来说，就是连接数据库并操作保存在表中的
数据。
首先，我们编写一段程序，用它来执行一条非常简单的SELECT语
句“SELECT 1 AS col_1”，然后把执行结果显示在画面上。这条
SQL语句就是把常量1作为1行1列的结果返回的简单SELECT语句，
并没有FROM子句及其之后的子句。像这样只选择常量的情况下，只用
SELECT语句也能写出SQL语句A。
注A
请参考2-2节的专栏。 执行上述SQL语句的Java源代码如下所示。
代码清单9-4 执行SQL语句的Java程序
import java.sql.*;
public class DBConnect1 {
public static void main(String[] args) throws Exception {
/* 1) PostgreSQL的连接信息 */
Connection con;
Statement st;
ResultSet rs;
①
String url = "jdbc:postgresql://localhost:5432/postgres";
String user = "postgres";
String password = "test";
/* 2) 定义JDBC驱动 */
Class.forName("org.postgresql.Driver"); ②
9-3 通过Java连接PostgreSQL 299 ●
/* 3) 连接PostgreSQL */
con = DriverManager.getConnection(url, user, password);
③
st = con.createStatement();
/* 4) 执行SELECT语句 */
rs = st.executeQuery("SELECT 1 AS col_1"); ④
/* 5) 在画面中显示结果 */
rs.next();
System.out.print(rs.getInt("col_1")); ⑤
/* 6) 切断与PostgreSQL的连接 */
rs.close();
st.close(); ⑥
con.close();
}
}
由于增加了处理内容，源代码也变长了。下面就让我们逐行来说明吧。
我们可以像SQL语句那样使用／* *／进行注释，注释中可以使用全角
字符（当然这对执行结果没有任何影响）。
Java是如何从数据库中获取数据的呢
首先来看第1行中的“import java.sql.*;”，它声明了连接数
据库执行SQL语句所需要的Java功能。如果没有这条声明，那么下面将
要讲解的Connection和Statement这些类就无法使用了。
接下来我们看一下①处，这里声明了连接数据库所需的信息（数据库
的用户名和密码）以及所需的对象。下面这3个对象是使用Java连接数
据库时必须要用到的，大家不妨记住它们3个往往是一起使用的。其他语
言中也会使用名称不同但作用相似的对象。
Connection：连接，负责连接数据库
Statement：声明，负责存储和执行SQL语句
ResultSet：结果集，负责保存SQL语句的执行结果
此外，①处还定义了url、user和password这3个字符串。user
和password是连接数据库时使用的用户名和密码，这个很容易理解。
● 300 第9章 通过应用程序连接数据库
不过url可能理解起来就有些困难了。大家可以把它理解为数据库的“地
址”，类似Web网站的URL，书写时也使用斜线/作为分隔符。
从左往右看“，jdbc:Postgresql://”表示连接协议，也就是“使
用JDBC来连接PostgreSQL”的意思，跟Web网站的“http://”类似。
接下来的“localhost”指定了执行PostgreSQL操作的机器。由
于我们现在使用的是本地电脑，因此使用“localhost”字符串来指定。
这里使用IP地址“127.0.0.1”也可以实现相同的效果。在实际的系统
开发中，运行Java程序的机器和运行数据库的机器通常是分开的，这时
“localhost”就需要替换成运行数据库的机器的IP地址或者主机名。
接下来的“5432”表示PostgreSQL的端口号。端口号就像是在机器
上运行的程序的门牌号。如果把IP地址或者主机名比作机器的名称，那
么端口号就类似于房间号码。如果安装PostgreSQL时没有改变默认设置，
那么指定成“5432”就可以了。
最后的“postgres”是PostgreSQL内部的数据库名称。其实我们
可以在PostgreSQL内部创建多个数据库，不过在刚刚完成安装之后只有
一个名为“postgres”的数据库，因此我们要连接的就是这个数据库。
接下来的②处定义了JDBC驱动，这里指明了连接时使用什么样的驱
动。“org.postgresql.Driver”是PostgreSQL的JDBC驱动的类名。
如果要使用其他驱动，或者使用其他DBMS，这里的字符串也需要相应地
进行修改。
然后在③处实际使用用户名和密码来连接PostgreSQL，在④处执行
SELECT语句，在⑤处在画面上显示执行结果。程序执行成功之后，命
令提示符中会显示“1”。
最后在⑥处切断（关闭）与数据库的连接。之所以要切断与数据库的
连接，是因为连接数据库需要占用少量内存资源，如果操作结束之后不断
注A 开连接，那么随着“残留下来”的连接不断增加，所占用的内存资源会越
Java对内存的管理是非常周到的，
来越多，引发性能方面的问题。像这种由于忘记断开连接而造成的内存占
还自带了“垃圾回收”功能。该功
能可以自动释放掉无用连接以及对 用现象，称为“内存泄漏”（memory leak）。这类问题在短时间内是很难察
象占用的内存，防止发生内存不足
的问题，并且它在Java程序运行时 觉的，一旦发生，想追查原因就很困难A。
会自动执行。不过，该功能还是无
法百分之百地防止内存泄漏，因此
显式地进行编码还是非常重要的。
9-3 通过Java连接PostgreSQL 301 ●
执行连接数据库的程序
下面就让我们来编译并执行一下这段源代码吧。编译的命令没有
变，把源代码文件命名为“DBConnectl.java”，保存在“C:\
PostgresSQL\java\src”文件夹下，然后在命令提示符中执行如
下javac命令，就可以进行编译了。
编译
C:\PostgresSQL\java\jdk\bin\javac DBConnectl.java
编译时同样必须在命令提示符中移动到源代码所在的文件夹之下，不
然就会发生9-2节中讲到的“命令或文件名错误”。
编译成功后，源代码所在的文件夹内会生成一个名为“DBConnectl.
class”的文件。与最初的示例程序一样，该文件可以通过java命令
来执行。不过这次的命令中需要增加一个参数选项。
指定JDBC驱动文件并执行
C:\PostgresSQL\java\jdk\bin\java -cpC:\PostgresSQL\jdbc\*;.DBConnectl
这次我们在java命令和类名“DBConnectl”之间插入了“-cp
C:\PostgresSQL\jdbc\*;.”这样一个字符串，这是在告诉Java
保存JDBC驱动文件“postgresql-9.4.1208.jar”的路径。“cp”
是“类路径（classpath）”的缩写，也就是“类文件保存位置”的意思A。
注A
类路径也可以通过在环境变量 大家可能会注意到：“怎么驱动文件的扩展名不是class，而是jar呢？”
CLASSPATH中进行设置，来省去
输入操作。 其实jar文件就是多个class文件的集合，jar文件的位置也是通过
类路径来指定的。“C:\PostgresSQL\jdbc\*”表示包含了“C:\
PostgresSQL\jdbc”文件夹下的所有文件。“*”在Windows中是“全
部字符串”的意思，就像“SELECT *”表示全部列一样。最后的“;.”
中，“;”是包含多个路径时的分隔符，“.”代表的是当前文件夹，用在这
里就是包含“DBConnectl.class”所在文件夹的意思。
执行上述命令后，如果命令提示符中显示“1”，就代表执行成功了。
● 302 第9章 通过应用程序连接数据库
选取表中的数据
下面我们来编写一个从包含多条数据的表中选取数据，并且显示在画
面中的程序。我们使用代码清单1-2中创建的商品表（Product）作为
示例用表。请大家在第0章创建的学习用的数据库shop中创建该表，我
们假定使用代码清单1-6中的INSERT语句来插入数据，最终结果如下
所示。
Product表
product_id | product_name | product_type | sale_price | purchase_price | regist_date
----------+------------+------------+----------+--------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-09-20
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-09-11
0003 | 运动T恤 | 衣服 | 4000 | 2800 |
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2009-09-20
0005 | 高压锅 | 厨房用具 | 6800 | 5000 | 2009-01-15
0006 | 叉子 | 厨房用具 | 500 | | 2009-09-20
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2008-04-28
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-11-11
为了以防万一，我们再来介绍一下上述数据的生成步骤（代码清单
9-5）。如果数据已经存在，那么再执行下面的SQL语句就会发生错误，请
大家注意。
代码清单9-5 创建Product表的SQL语句
--创建数据库shop
CREATE DATABASE shop;
--使用“\q”暂时从psql登出，再次通过命令提示符连接数据库shop
C:\PostgreSQL\9.5\bin\psql.exe -U postgres -d shop
--创建Product表
CREATE TABLE Product
(product_id CHAR(4) NOT NULL,
product_name VARCHAR(100) NOT NULL,
product_type VARCHAR(32) NOT NULL,
sale_price INTEGER ,
purchase_price INTEGER ,
regist_date DATE ,
PRIMARY KEY (product_id));
--插入商品数据
BEGIN TRANSACTION;
INSERT INTO Product VALUES ('0001', 'T恤衫', '衣服', 1000, 500, 
'2009-09-20');
INSERT INTO Product VALUES ('0002', '打孔器', '办公用品', 500, 
320, '2009-09-11');
9-3 通过Java连接PostgreSQL 303 ●
INSERT INTO Product VALUES ('0003', '运动T恤', '衣服', 4000, 
2800, NULL);
INSERT INTO Product VALUES ('0004', '菜刀', '厨房用具', 3000, 
2800, '2009-09-20');
INSERT INTO Product VALUES ('0005', '高压锅', '厨房用具', 6800, 
5000, '2009-01-15');
INSERT INTO Product VALUES ('0006', '叉子', '厨房用具', 500, 
NULL, '2009-09-20');
INSERT INTO Product VALUES ('0007', '擦菜板', '厨房用具', 880, 
790, '2008-04-28');
INSERT INTO Product VALUES ('0008', '圆珠笔', '办公用品', 100, 
NULL, '2009-11-11');
COMMIT;
表示下一行接续本行，只是由于版面所限而换行。
下面我们来尝试从这个表中选取product_id和product_
name这两列的全部数据。源代码如代码清单9-6所示，源文件名为
“DBConnect2.java”。
代码清单9-6 从 Product表中选取product_id和product_name这两列
全部数据的Java程序
import java.sql.*;
public class DBConnect2{
public static void main(String[] args) throws Exception {
/* 1) PostgreSQL的连接信息 */
Connection con;
Statement st;
ResultSet rs;
①
String url = "jdbc:postgresql://localhost:5432/shop";
String user = "postgres";
String password = "test";
/* 2) 定义JDBC驱动 */
Class.forName("org.postgresql.Driver"); ②
/* 3) 连接PostgreSQL */
con = DriverManager.getConnection(url, user, password);
st = con.createStatement(); ③
/* 4) 执行SELECT语句 */
rs = st.executeQuery("SELECT product_id, product_name 
FROM Product"); ④
/* 5) 在画面中显示结果 */
while(rs.next()) {
System.out.print(rs.getString("product_id") + ", ");
System.out.println(rs.getString("product_name")); ⑤
}
● 304 第9章 通过应用程序连接数据库
/* 6) 切断与PostgreSQL的连接 */
rs.close();
st.close(); ⑥
con.close();
}
}
表示下一行接续本行，只是由于版面所限而换行。
编译并执行上述源代码之后，命令提示符中会显示如下结果。
执行结果
0001, T恤衫
0002, 打孔器
0003, 运动T恤
0004, 菜刀
0005, 高压锅
0006, 叉子
0007, 擦菜板
0008, 圆珠笔
编译和执行的命令如下所示。
编译
C:\PostgreSQL\java\jdk\bin\javac DBConnect2.java
执行
C:\PostgreSQL\java\jdk\bin\java –cp C:\PostgreSQL\jdbc\*;. DBConnect2
注意，这里在①处把表示连接信息的字符串url的值从“postgres”
变成了“shop”。登录PostgreSQL的用户名仍然是之前使用的“postgres”，
JDBC驱动文件没有变化，因此②和③处无需改动。
接下来的④处对SELECT语句做了改动。需要大家特别注意的是⑤
处。由于需要显示多行结果，因此需要使用while语句逐行循环取得。
rs就是ResultSet（结果集）对象，用来保存SELECT语句的执
行结果。大家可以把结果集想象成图9-11那样的二元表。不过，对Java