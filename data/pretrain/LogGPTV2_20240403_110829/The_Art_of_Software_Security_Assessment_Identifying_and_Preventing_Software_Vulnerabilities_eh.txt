        return NULL; 
    if((payload = (struct _payload *)calloc(1, 
                   sizeof(struct _payload))) == NULL) 
        return NULL; 
    payload->type = type; 
    payload->length = ntohs(*(unsigned short *)(srcptr+2)); 
    *nexttype = *(unsigned char *)srcptr; 
    if((payload->data = 
        (unsigned char *)mymalloc(length)) == NULL){ 
        free(payload); 
        return NULL; 
    } 
    memcpy(payload->data, srcptr+4, payload->length); 
    return payload; 
} 
The payload_read() function is vulnerable to a 16-bit integer overflow in the mymalloc() 
call but only because mymalloc() takes a 16-bit argument now (as opposed to a 32-bit 
size_t argument in the previous example). Although possible, it's unlikely that 
developers code allocation routines to deal with only 16-bit values. Still, it does 
happen from time to time and is worth keeping an eye out for. 
Similar to the ISAKMP packet length, payload lengths might underflow if they're 
assumed to be a certain size. Specifically, because the payload size includes the size 
of the payload header (four bytes), code might assume the specified payload length 
is at least four bytes. This assumption might lead to memory corruption, most likely 
a negative memcpy() error. In fact, the CheckPoint VPN-1 ISAKMP implementation had 
two such vulnerabilities when processing ID and certificate payloads. Listing 16-2 
shows the vulnerable portion of the certificate payload-handling code. For this 
example, assume the payload length of the certificate payload is stored in eax and a 
pointer to the payload data is in esi. 
Listing 16-2. Certificate Payload Integer Underflow in CheckPoint ISAKMP 
.text:0042B17A           add   eax, 0FFFFFFFBh 
.text:0042B17D           push   eax 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
963 
.text:0042B17E           push   [ebp+arg_C] 
.text:0042B181           add    esi, 5 
.text:0042B184           push   esi 
.text:0042B185           mov    [edi], eax 
.text:0042B187           call   ebx ; __imp_bcopy 
As you can see, no check is done to ensure that the payload length is greater than or 
equal to five before five is subtracted from it. A payload length of four or less results 
in an integer underflow condition, and the result is passed to bcopy(). 
Another issue to watch out for with payload length is the relationship it shares with 
the original length value in the ISAKMP header. Specifically, the following must be 
true: 
Amt of bytes already processed + current payload length length; 
        length -= payload->length; 
    } 
} 
Assume the same payload_read() function from the previous examples is being used. 
The payload_read() function in this code simply scans through the ISAKMP packet, 
breaking it up into its constituent payloads, which are placed in a linked list. The 
payload_read() function from previous examples never verifies the length variable 
against the real length of the packet, so it reads data out of bounds. This little error 
causes additional problems during payload_process(). Because length is 
decremented by a value that's too large, it underflows, and length becomes a very 
large number. As a result, this program will probably keep trying to interpret random 
heap data as ISAKMP payloads until it runs off the end of the heap. 
Payload Types 
ISAKMP packets are composed of a series of payloads. Data in each payload is 
interpreted according to its type, as described in the following sections. 
Security Association Payload 
The security association (SA) payload is used in the initial phases of a negotiation 
to specify a domain of interpretation (DOI) and a situation. Figure 16-3 shows the 
structure of the SA payload header: 
Figure 16-3. ISAKMP security association payload header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
965 
The DOI field describes how the situation data should be interpreted. Currently, there 
are only two DOI values you need to know: 0 and 1. The 0 value specifies a generic 
security association (one that can be used with any protocol), whereas a 1 value 
means an IPsec situation, and the negotiations are for establishing an IPsec key. 
The situation field is composed of a number of encapsulated proposal payloads 
(explained in the next section). SA payloads don't have too many issues (apart from 
dealing with unknown DOIs incorrectly), but an SA payload containing embedded 
proposal payloads establishes a relationship between the length of the SA payload 
and the size of the embedded proposal payloads. These issues are discussed in the 
next section. 
Proposal Payload 
The proposal payload appears inside an SA payload and is used to communicate a 
series of security mechanisms the sender supports. The proposal payload header is 
shown in Figure 16-4. 
Figure 16-4. ISAKMP proposal payload header 
The first issue is the payload length field. In addition to the standard problems in 
parsing payloads (as discussed in the "Payloads" section), the proposal payload 
length field must be checked against the SA payload length containing it. Because the 
proposal payload field is encapsulated inside the SA, a proposal payload that's larger 
than its containing SA payload can cause problems, as shown in the following 
example: 
unsigned short process_proposal(unsigned char *packet) 
{ 
    unsigned char next, res; 
    unsigned short length; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
966 
    next = *packet++; 
    res = *packet++; 
    length = get16(packet); 
    ... process proposal ... 
} 
int process_sa_payload(unsigned char *packet, size_t length) 
{ 
    unsigned char next, res; 
    unsigned short payload_length, prop_length; 
    unsigned long doi; 
    if(length  length) 
        return 1; 
    for(payload_length -= 4; payload_length; 
        payload_length -= prop_length){ 
        prop_length = process_proposal(packet); 
        if(trans_length == 0) 
           return -1; 
    } 
    return 0; 
} 
This code has some obvious flaws. The process_proposal() function doesn't take a 
length argument! Consequently, the length field in the proposal payload isn't 
validated, and it could point past the end of the SA payload that's supposed to contain 
it. If this happened, the payload_length value in process_sa_payload() would 
underflow, resulting in the program evaluating the SA payload's size incorrectly. This 
error might lead to denial of service or exploitable memory corruption vulnerabilities. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
967 
The proposal payload contains an 8-bit SPI (Security Parameter Index) size field that 
indicates the length of the SPI that follows. In ISAKMP, the SPI size is usually 0 or 16 
(because the SPI for ISKAMP is the initiator and responder cookies in the ISAKMP 
header). The SPI size in this context is interesting. Applications that parse proposals 
can be vulnerable to incorrectly sign-extending the SPI size or suffer from memory 
corruption issues caused by failure to validate the SPI size against the payload length 
field to ensure that the SPI size is smaller. The SPI size field appears in numerous 
payloads; these issues are discussed in "Notification Payload" later in this chapter. 
Transform Payload 
Transform payloads are encapsulated inside proposal payloads and consist of a 
series of SA attributes that combine to describe a transform (also referred to as a 
"security mechanism"). The structure of a transform payload is shown in Figure 16-5. 
Figure 16-5. ISAKMP transform payload header 
Like the proposal payload, problems can happen when processing the payload length 
if it's not validated correctly because this payload appears only encapsulated in 
another. 
Key Exchange Payload 
The key exchange payload has a simple structure shown in Figure 16-6. 
Figure 16-6. ISAKMP key exchange payload header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
968 
The key exchange field contains only one more element than the generic payload: the 
key exchange data field, which contains information required to generate a session 
key. The contents of key exchange data depend on the key exchange algorithm 
selected earlier in the negotiations. There are no parsing complexities in dealing with 
the key exchange payload because keys are usually a precise size for an algorithm. 
However, an unusually large key might result in a buffer overflow if no checks are 
made to ensure that a provided key is the correct size. Take a look at this simple 
example: 
struct _session { 
    int key_type; 
    union { 
        unsigned char rsa_key[RSA_KEY_MAX_SIZE]; 
        unsigned char dsa_key[DSA_KEY_MAX_SIZE]; 
    } key; 
    ... other stuff ... 
}; 
int process_key_payload(struct _session *session, 
                        unsigned char *packet, size_t length) 
{ 
    unsigned char next, res; 
    unsigned short payload_length; 
    if(length key_type){ 
        case RSA: 
            memcpy(session->key.rsa_key, packet, 
                   payload_length); 
            do_rsa_stuff(session); 
            break; 
        case DSA: 
            memcpy(session->key.dsa_key, packet, 
                   payload_length); 
            do_dsa_stuff(session); 
            break; 
        default: 
            return 1; 
    } 
    return 0; 
} 
This code carelessly neglects to verify that the specified key isn't larger than 
RSA_KEY_MAX_SIZE or DSA_KEY_MAX_SIZE. If an attacker specified a key larger than 
either size, other structure members could be corrupted as well as the program heap. 
Identification Payload 
The identification payload, shown in Figure 16-7, uniquely identifies the entity 
wanting to authenticate itself to the other party in the communication. 
Figure 16-7. ISAKMP identification payload header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
970 
Identification can be expressed in numerous ways. The identification data in this 
payload has different meanings depending on the specified DOI and ID type. In IPsec 
DOI, the following forms of identification are possible: 
IP address (IPv4 or IPv6) 
Fully qualified domain name (FQDN) 
User FQDN 
IP subnet (IPv4 or IPv6) 
IP address range (IPv4 or IPv6) 
DER-encoded X.500 distinguished name (DN) 
DER-encoded X.500 general name (GN) 
Key ID 
Because there's a range of choices for identification, parsing this payload is usually 
involved and has more opportunities for things to go wrong. Most of the ID 
representations are quite simple, but a few issues can occur. First, making 
assumptions about fixed-length fields might lead to simple buffer overflows. In the 
following example, an IP address is being used for identification: 
int parse_identification_payload(unsigned char *packet, 
                                 size_t length) 
{ 
    unsigned short payload_length, port; 
    unsigned char next, res; 
    unsigned char type, id; 
    unsigned char ip_address[4]; 
    if(length < IDENT_MINSIZE) 
        return 1; 
    next = *packet++; 
    res = *packet++; 
    payload_length = get16(packet); 
    packet += 2; 
    if(payload_length < IDENT_MINSIZE) 
        return 1; 
    type = *packet++; 
    id = *packet++; 
    port = get16(packet); 
    packet += 2; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
971 
    payload_length -= IDENT_MINSIZE; 
    switch(type){ 
        case IPV4_ADDR: 
            if(payload_length < 4) 
                return 1; 
            memcpy(ip_address, packet, payload_length); 
            break; 
    ... other stuff ... 
} 
This code has a simple buffer overflow because it's expecting the specified IP address 
to be only four bytes, but there are no length checks to enforce this size. 
A few other fields also involve parsing strings into constituent elements, primarily the 
FQDN method (takes hostnames, such as my.host.com) and user FQDNs (takes 
names and hosts in the form PI:EMAIL). The material from Chapter 7(? 
[????.]) is particularly relevant; simple buffer overflows, pointer arithmetic errors, 
off-by-one errors, and incrementing a pointer past a NUL byte are a few things that 
can happen when trying to interpret these fields. 
DER-encoded mechanisms, a binary encoding format discussed in "Distinguished 
Encoding Rules(? [????.])" later in this chapter, have had a host of problems recently, 
mostly integer-related issues. 
Certificate Payload 
As the name suggests, the certificate payload contains certificate data used to 
authenticate one participant in the connection setup to another (usually client to 
server, but it works both ways). Figure 16-8 shows the certificate payload header. 
Figure 16-8. ISAKMP certificate payload header 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
972 
The certificate-encoding byte specifies how to interpret the certificate data trailing it. 
RFC 2408 defines these encodings for a certificate: 
None 
PKCS#7 wrapped X.509 certificate 
PGP certificate 
X.509 certificatesignature 
X.509 certificatekey exchange 
Kerberos tokens 
Certificate Revocation List (CRL) 
Authority Revocation List (ARL) 
SPKI certificate 
X.509 certificateattribute 
What's interesting about the certificate payload is that a certificate can be supplied in 
a multitude of formats, provided the participant supports them. The variety of 