### 39th Annual ACM Southeast Conference, Athens, Georgia, USA, March 16-17, 2001

**Title: Survivability Architecture for Workflow Management Systems**

**Authors:**
- Jorge Cardoso
- Zongwei Luo
- John Miller
- Amit Sheth
- Krys Kochut

**Affiliation:**
LSDIS Lab, Computer Science Department, University of Georgia, Athens, GA 30602, USA

**Contact:**
- Email: {luo, amit, jam, kochut}@cs.uga.edu

**Abstract:**
The survivability of critical infrastructure systems has become an increasing concern in the industry. The research area of survivability focuses on ensuring that infrastructure systems continue to provide pre-established service levels to users despite disruptions and can adapt to changes in the environment. Workflow management systems (WfMS) are used in a wide range of applications, from enhancing existing processes to managing critical infrastructure. These systems must be highly dependable and should not allow process instances to be interrupted or aborted due to failures. Additionally, they need to support dynamic changes to reflect modifications in the environment. This paper describes the work done to increase the survivability of the METEOR WfMS. We define an architecture that outlines the key technologies enabling survivability in WfMS and describe two implemented modules: a dynamic change module and an adaptation module.

### 1. Introduction

The increasing dependence of infrastructure systems on fragile information systems poses a significant risk of catastrophic failure. Threats to these systems can arise from various sources, including human error, application faults, security breaches, network failures, and natural disasters. To ensure the continued operation of these systems, diagnostic, corrective, and reconfiguration procedures must be in place. The concept of survivability is defined as the ability of a system to complete its mission in a timely manner, even if significant portions are incapacitated by attacks or accidents [2]. Based on this definition, we describe workflow survivability as the capability of a WfMS to maintain a pre-established acceptable running mode and behavior after unexpected errors, accidents, failures, or attacks, and to allow the adaptation and evolution of supported processes in response to environmental changes.

### 2. METEOR - Workflow Management System

A Workflow Management System (WfMS) is a system or set of tools that defines, manages, and executes process schemas (workflows) through the execution of software, driven by a computer representation of the workflow logic [12]. The introduction of a WfMS in an organization allows for the re-engineering and streamlining of existing processes, providing a competitive advantage. At the LSDIS Lab, in collaboration with the Naval Research Laboratory, we have developed the METEOR WfMS. METEOR's architecture includes design, monitoring, a workflow repository, and an enactment system. Two enactment services, ORBWork [22] and WEBWork [7], have been developed to meet different organizational needs. ORBWork is a CORBA-based system designed for mission-critical enterprise applications, while WEBWork relies on web technology and is suitable for static business processes with limited data exchange.

### 3. Survivability Architecture for Workflow Management Systems

#### 3.1 Four-Level Architecture for WfMS

To address the complex issue of survivability, especially in distributed systems, it is essential to have a clear understanding of the system's architecture. We classify failures in WfMS into four layers (Figure 1):

- **Instance Level:** Issues related to the execution of workflow instances.
- **Schema Level:** Concerns the definitions of workflow schemas.
- **Workflow Level:** Involves the modules that compose the WfMS.
- **Infrastructure Level:** Includes the underlying components such as CORBA servers, operating systems, communication protocols, and hardware.

Each layer has specific classes of problems that need to be handled appropriately to ensure the system's survivability.

#### 3.2 Survivability Components

Survivability is a multidisciplinary research area. In our proposed architecture, we have identified seven main areas that require special attention: evolution, adaptation, scalability, mobility, fault-tolerance, recovery, and security. For each layer of a WfMS, these domains need to be considered.

In this paper, we focus on adaptation at the instance level, describing the work done in this domain. Two major issues addressed are dynamic change and adaptation. The dynamic change interface allows the modification of running workflow instances, providing a necessary building block for adaptation and evolution. We also provide a user interface for administrators to manually modify workflow instances in execution. Supporting dynamic changes significantly increases the flexibility and robustness of the WfMS to handle unplanned events during the execution of business processes.

At the adaptation level, we have implemented a sophisticated exception handling mechanism that allows the system to adapt, either automatically or through human involvement, in response to environmental changes [18].

### 4. Dynamic Changes

Traditional WfMSs are adequate for supporting business processes with a defined structure and no need for ad hoc deviations or dynamic extensions at runtime [8]. However, there is an increasing demand for WfMSs with dynamic capabilities, particularly at the workflow instance level. Most business processes are not static and may require continuous repair or improvement during execution [2].

We have implemented a layer in the ORBWork system that permits the realization of dynamic changes in a consistent manner [6]. The implemented module ensures that all consistency constraints are maintained before and after the changes.

#### 4.1 Classification of Dynamic Changes

Before implementing the dynamic change extensions, we classified the different types of changes that can be applied to a workflow instance (Table 1). Changes are categorized into primitive and composite changes. Primitive changes are "atomic" and can be applied entirely or not at all. They can be further divided into immediate and incremental changes. Immediate changes can be introduced in one step without losing the correctness and consistency of the workflow enactment system. Incremental changes, on the other hand, deal with situations where changes cannot be applied in a single step.

| **Change Type** | **Status** |
|-----------------|------------|
| AND to OR Join Change | Implemented |
| OR to AND Join Change | Implemented |
| Split Change | Implemented |
| Addition of an AND Transition | Implemented |
| Addition of an OR Transition | Implemented |
| Deletion of a Transition | Implemented |
| Data Object Transfer Addition | Implemented |
| Data Object Transfer Deletion | Implemented |
| Parameter Mapping Change | Implemented |
| Insertion of a Task | Implemented |

### Conclusion

In this paper, we have described a survivability architecture for WfMS, focusing on the dynamic change and adaptation modules implemented in the METEOR WfMS. These modules significantly enhance the system's ability to handle unexpected disruptions and adapt to environmental changes, ensuring the continued and reliable operation of business processes.

**References:**
[1] Reference 1
[2] Reference 2
...
[29] Reference 29

---

This version of the text is more structured, concise, and professional, making it easier to read and understand.