    messy statement, because "alignment" is a constant expression, the compiler can
    do a reasonable job of optimizing, especially if the value of "alignment" is a
    power of two. I checked this with -O2, and gcc did very well, compiling it to 4
    instructions on a Sparc (alignment = 8). */
    if (size % alignment != 0) size += alignment - (size % alignment);
    /* If there isn't room in the current block, get a new one. The minimum
    size is STORE_BLOCK_SIZE, and we would expect this to be the norm, since
    these functions are mostly called for small amounts of store. */
    if (size > yield_length[store_pool])
      {
      int length = (size next)
         && newblock->length next = NULL;
        newblock->length = length;
        if (!chainbase[store_pool])
          chainbase[store_pool] = newblock;
        else
          current_block[store_pool]->next = newblock;
        }
      current_block[store_pool] = newblock;
      yield_length[store_pool] = newblock->length;
      next_yield[store_pool] =
        (void *)(CS current_block[store_pool] + ALIGNED_SIZEOF_STOREBLOCK);
      (void) VALGRIND_MAKE_MEM_NOACCESS(next_yield[store_pool], yield_length[store_pool]);
      }
    /* There's (now) enough room in the current block; the yield is the next
    pointer. */
    store_last_get[store_pool] = next_yield[store_pool];
    /* Cut out the debugging stuff for utilities, but stop picky compilers from
    giving warnings. */
    #ifdef COMPILE_UTILITY
    filename = filename;
    linenumber = linenumber;
    #else
    DEBUG(D_memory)
      {
      if (running_in_test_harness)
        debug_printf("---%d Get %5d\n", store_pool, size);
      else
        debug_printf("---%d Get %6p %5d %-14s %4d\n", store_pool,
          store_last_get[store_pool], size, filename, linenumber);
      }
    #endif  /* COMPILE_UTILITY */
    (void) VALGRIND_MAKE_MEM_UNDEFINED(store_last_get[store_pool], size);
    /* Update next pointer and number of bytes left in the current block. */
    next_yield[store_pool] = (void *)(CS next_yield[store_pool] + size);
    yield_length[store_pool] -= size;
    return store_last_get[store_pool];
    }
    BOOL
    store_extend_3(void *ptr, int oldsize, int newsize, const char *filename,
      int linenumber)
    {
    int inc = newsize - oldsize;
    int rounded_oldsize = oldsize;
    if (rounded_oldsize % alignment != 0)
      rounded_oldsize += alignment - (rounded_oldsize % alignment);
    if (CS ptr + rounded_oldsize != CS (next_yield[store_pool]) ||
        inc > yield_length[store_pool] + rounded_oldsize - oldsize)
      return FALSE;
    /* Cut out the debugging stuff for utilities, but stop picky compilers from
    giving warnings. */
    #ifdef COMPILE_UTILITY
    filename = filename;
    linenumber = linenumber;
    #else
    DEBUG(D_memory)
      {
      if (running_in_test_harness)
        debug_printf("---%d Ext %5d\n", store_pool, newsize);
      else
        debug_printf("---%d Ext %6p %5d %-14s %4d\n", store_pool, ptr, newsize,
          filename, linenumber);
      }
    #endif  /* COMPILE_UTILITY */
    if (newsize % alignment != 0) newsize += alignment - (newsize % alignment);
    next_yield[store_pool] = CS ptr + newsize;
    yield_length[store_pool] -= newsize - rounded_oldsize;
    (void) VALGRIND_MAKE_MEM_UNDEFINED(ptr + oldsize, inc);
    return TRUE;
    }
    void
    store_release_3(void *block, const char *filename, int linenumber)
    {
    storeblock *b;
    /* It will never be the first block, so no need to check that. */
    for (b = chainbase[store_pool]; b != NULL; b = b->next)
      {
      storeblock *bb = b->next;
      if (bb != NULL && CS block == CS bb + ALIGNED_SIZEOF_STOREBLOCK)
        {
        b->next = bb->next;
        pool_malloc -= bb->length + ALIGNED_SIZEOF_STOREBLOCK;
        /* Cut out the debugging stuff for utilities, but stop picky compilers
        from giving warnings. */
        #ifdef COMPILE_UTILITY
        filename = filename;
        linenumber = linenumber;
        #else
        DEBUG(D_memory)
          {
          if (running_in_test_harness)
            debug_printf("-Release       %d\n", pool_malloc);
          else
            debug_printf("-Release %6p %-20s %4d %d\n", (void *)bb, filename,
              linenumber, pool_malloc);
          }
        if (running_in_test_harness)
          memset(bb, 0xF0, bb->length+ALIGNED_SIZEOF_STOREBLOCK);
        #endif  /* COMPILE_UTILITY */
        free(bb);
        return;
        }
      }
    }
Key functions involved in UAF vulnerabilities:
  * store_get_3 heap allocation
  * store_extend_3 heap extension
  * store_release_3 heap release
There are also 4 important global variables:
  * chainbase 
  * next_yield 
  * current_block 
  * yield_length 
###### First step
Send a bunch of unknown commands to adjust the value of `yield_length` to less
than 0x100.
`yield_length` indicates the remaining length of the heap. Use [src/receive.c]
(https://github.com/Exim/exim/blob/ef9da2ee969c27824fcd5aed6a59ac4cd217587b/src/src/receive.
c#L1617) `receive_msg` function to process the command.
When the function processes the command, use `next->text` to store the input
and initialize it on line 1709:
    1625 int header_size = 256;
    ......
    1709 next->text = store_get(header_size);
At line 1709, if `0x100 > yield_length` then the program will excute `newblock
= store_malloc(mlength);`. Use glibc's malloc to apply for a block of memory
clled heap1.
According to the code in `store_get_3`, this time:
  * current_block->next = heap1 (because block==chainbaseï¼Œand this means hainbase->next = heap1)
  * current_block = heap1
  * yield_length = 0x2000
  * next_yield = heap1+0x10
  * return next_yield
  * next_yield = next_yield+0x100 = heap1+0x110
  * yield_length = yield_length - 0x100 = 0x1f00
###### Second Step
Send `BDAT 1`, enter the `receive_msg` function, and make `receive_getc`
become `bdat_getc`.
###### Third Step
Send `BDAT \x7f`.
The `bdat_getc` function in [src/smtp_in.c]
(https://github.com/Exim/exim/blob/b488395f4d99d44a950073a64b35ec8729102782/src/src/smtp_in.c):
    int
    bdat_getc(unsigned lim)
    {
    uschar * user_msg = NULL;
    uschar * log_msg;
    for(;;)
      {
    #ifndef DISABLE_DKIM
      BOOL dkim_save;
    #endif
      if (chunking_data_left > 0)
        return lwr_receive_getc(chunking_data_left--);
      receive_getc = lwr_receive_getc;
      receive_getbuf = lwr_receive_getbuf;
      receive_ungetc = lwr_receive_ungetc;
    #ifndef DISABLE_DKIM
      dkim_save = dkim_collect_input;
      dkim_collect_input = FALSE;
    #endif
      /* Unless PIPELINING was offered, there should be no next command
      until after we ack that chunk */
      if (!pipelining_advertised && !check_sync())
        {
        unsigned n = smtp_inend - smtp_inptr;
        if (n > 32) n = 32;
        incomplete_transaction_log(US"sync failure");
        log_write(0, LOG_MAIN|LOG_REJECT, "SMTP protocol synchronization error "
          "(next input sent too soon: pipelining was not advertised): "
          "rejected \"%s\" %s next input=\"%s\"%s",
          smtp_cmd_buffer, host_and_ident(TRUE),
          string_printing(string_copyn(smtp_inptr, n)),
          smtp_inend - smtp_inptr > n ? "..." : "");
        (void) synprot_error(L_smtp_protocol_error, 554, NULL,
          US"SMTP synchronization error");
        goto repeat_until_rset;
        }
      /* If not the last, ack the received chunk.  The last response is delayed
      until after the data ACL decides on it */
      if (chunking_state == CHUNKING_LAST)
        {
    #ifndef DISABLE_DKIM
        dkim_exim_verify_feed(NULL, 0); /* notify EOD */
    #endif
        return EOD;
        }
      smtp_printf("250 %u byte chunk received\r\n", FALSE, chunking_datasize);
      chunking_state = CHUNKING_OFFERED;
      DEBUG(D_receive) debug_printf("chunking state %d\n", (int)chunking_state);
      /* Expect another BDAT cmd from input. RFC 3030 says nothing about
      QUIT, RSET or NOOP but handling them seems obvious */
    next_cmd:
      switch(smtp_read_command(TRUE, 1))
        {
        default:
          (void) synprot_error(L_smtp_protocol_error, 503, NULL,
        US"only BDAT permissible after non-LAST BDAT");
      repeat_until_rset:
          switch(smtp_read_command(TRUE, 1))
        {
        case QUIT_CMD:  smtp_quit_handler(&user_msg, &log_msg); /*FALLTHROUGH */
        case EOF_CMD:   return EOF;
        case RSET_CMD:  smtp_rset_handler(); return ERR;
        default:    if (synprot_error(L_smtp_protocol_error, 503, NULL,
                          US"only RSET accepted now") > 0)
                  return EOF;
                goto repeat_until_rset;
        }
        case QUIT_CMD:
          smtp_quit_handler(&user_msg, &log_msg);
          /*FALLTHROUGH*/
        case EOF_CMD:
          return EOF;
        case RSET_CMD:
          smtp_rset_handler();
          return ERR;
        case NOOP_CMD:
          HAD(SCH_NOOP);
          smtp_printf("250 OK\r\n", FALSE);
          goto next_cmd;
        case BDAT_CMD:
          {
          int n;