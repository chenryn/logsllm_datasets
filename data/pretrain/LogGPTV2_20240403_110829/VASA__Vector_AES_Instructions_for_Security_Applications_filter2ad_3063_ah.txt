exec_times ] [ ands ] [ index ] [ 1 ] ^ GTM[ exec_times ] [ ands
] [ index ] ;
i + 2 ] ] = GT[
ands ++;
29
30
31
32
33
34
35
}
B DETAILED MEASUREMENTS
We present the detailed performance measurements for ABY (cf.
§ 5.2) in Table 8 from which the summary in Table 4 was computed.
Additionally, we present the detailed performance measurements
for CrypTFlow2 (cf. § 5.5) in Table 9 from which the summary in
Table 7 was computed.
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
20
21
22
23
24
25
26
27
28
counter = _mm512_add_epi64 ( counter , FULL_OFFSET ) ;
// match the left * operations with right * ones
// use a combiner , e.g., left shift + XOR
l e f t D a t a [w] = mix_keys ( l e f t K e y s [w] , l e f t D a t a [w] ) ;
l e f t K e y s [w] = l e f t D a t a [w] ;
l e f t D a t a [w]= _mm512_xor_si512 ( l e f t D a t a [w] , keys [ 0 ] ) ;
}
for ( size_t r = 1 ;
r  g a t e s [4 ∗
3 int mask_indices [ ONLINE_BATCH_SIZE ] ;
4 block l e f t s [ ONLINE_BATCH_SIZE ] , r i g h t s [ ONLINE_BATCH_SIZE ] ;
5 block H[ ONLINE_BATCH_SIZE ] [ 2 ] ;
6 for ( size_t i i = 0 ;
// preprocessing
7
int i = i n d i c e s [ i i ] ;
8
int index = 2 ∗ mask_input [ cf −> g a t e s [4 ∗
9
mask_indices [ i i ] = index ;
l e f t s [ i i ] = l a b e l s [ exec_times ] [ cf −> g a t e s [4 ∗
r i g h t s [ i i ] = l a b e l s [ exec_times ] [ cf −> g a t e s [4 ∗
10
11
12
13
14 // AES processing
15 Hash (H,
16 for ( size_t i i = 0 ;
// postprocessing
17
int i = i n d i c e s [ i i ] ;
18
int index = 2 ∗ mask_input [ cf −> g a t e s [4 ∗
19
GT[ exec_times ] [ ands ] [ index ] [ 0 ] = GT[ exec_times ] [ ands ] [
i n d i c e s , mask_indices , num_gates ) ;
i i  g a t e s [4 ∗
index ] [ 0 ] ^ H[ i i ] [ 0 ] ;
i + 1 ] ] ;
i + 1 ] ] ;
r i g h t s ,
l e f t s ,
i ] ] +
{
}
index ] [ 1 ] ^ H[ i i ] [ 1 ] ;
GT[ exec_times ] [ ands ] [ index ] [ 1 ] = GT[ exec_times ] [ ands ] [
block t t t = GTK[ exec_times ] [ ands ] [ index ] ^ fpre −>Delta ;
t t t = t t t & MASK;
GTK[ exec_times ] [ ands ] [ index ] = GTK[ exec_times ] [ ands ] [
index ] & MASK;
index ] [ 0 ] & MASK;
GT[ exec_times ] [ ands ] [ index ] [ 0 ] = GT[ exec_times ] [ ands ] [
if ( cmpBlock (&GT[ exec_times ] [ ands ] [ index ] [ 0 ] , &GTK[
exec_times ] [ ands ] [ index ] , 1 ) )
mask_input [ cf −> g a t e s [4 ∗
else if ( cmpBlock (&GT[ exec_times ] [ ands ] [ index ] [ 0 ] , &t t t
i + 2 ] ] = false ;
,
1 ) )
143ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Jean-Pierre Münch, Thomas Schneider, and Hossein Yalame
Table 8: Run-times in milliseconds of ABY [25] for the evaluation of AES, SHA-1, SCS-PSI, and Phasing-PSI with the detailed
parameters as described in § 5.2. “Ref” indicates the reference ABY implementation, AES-NI indicates the batched one using
AES-NI and VAES the one using VAES. Improv% shows the performance improvement of VAES over AES-NI based PRGs and
ECB implementations. Garbling scheme names are as introduced in § 4.3. Lower run-times are better.
ACSAC’21,December6–10,2021,VirtualEvent,USAJean-PierreMünch,ThomasSchneider,andHosseinYalameTable8:Run-timesinmillisecondsofABY[25]fortheevaluationofAES,SHA-1,SCS-PSI,andPhasing-PSIwiththedetailedparametersasdescribedin§5.2.“Ref”indicatesthereferenceABYimplementation,AES-NIindicatesthebatchedoneusingAES-NIandVAEStheoneusingVAES.Improv%showstheperformanceimprovementofVAESoverAES-NIbasedPRGsandECBimplementations.Garblingschemenamesareasintroducedin§4.3.Lowerrun-timesarebetter.GarblingSchemeOperationCircuitPRPMICIRCPRFAESRef[25]47.3———AES-NI20.527.631.398.5VAES16.619.020.866.2Improv%23.4%45.4%50.4%48.6%SHA1Ref[25]236.7———AES-NI95.4118.6145.7576.2VAES69.879.387.9378.3Improv%36.6%49.6%65.8%52.3%SCS-PSIRef[25]153.0———AES-NI75.398.9112.3288.1VAES63.974.279.7192.7Improv%17.8%33.3%40.9%49.5%PSI-PhasingRef[25]87.3———AES-NI33.442.652.792.9VAES25.326.130.759.6GarblingImprov%31.8%63.2%71.6%55.8%AESRef[25]23.0———AES-NI12.523.115.647.9VAES8.611.710.225.1Improv%45.0%97.1%53.4%91.1%SHA1Ref[25]108.8———AES-NI56.0139.780.9261.7VAES38.251.552.3151.3Improv%46.5%171.5%54.7%73.0%SCS-PSIRef[25]76.2———AES-NI41.992.557.3135.7VAES33.143.541.978.0Improv%26.5%112.7%36.8%74.1%PSI-PhasingRef[25]53.2———AES-NI31.942.740.166.9VAES25.028.431.141.0EvaluationImprov%27.5%50.5%28.7%62.9%144VASA: Vector AES Instructions for Security Applications
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 9: Run-times in seconds for CrypTFlow2 [82] (§ 5.5) inference using the SqueezeNetImgNet (SqzImg), SqueezeNetCI-
FAR (SqzCIFAR), ResNet50, and DenseNet121 networks. Ring32-OT denotes the 32-bit ring-based implementation using OT.
Ref indicates the reference implementation (using AES-NI) and VAES indicates the version using VAES. Improv% shows the
performance improvement of VAES over AES-NI. Lower run-times are better.
VASA:VectorAESInstructionsforSecurityApplicationsACSAC’21,December6–10,2021,VirtualEvent,USATable9:Run-timesinsecondsforCrypTFlow2[82](§5.5)inferenceusingtheSqueezeNetImgNet(SqzImg),SqueezeNetCI-FAR(SqzCIFAR),ResNet50,andDenseNet121networks.Ring32-OTdenotesthe32-bitring-basedimplementationusingOT.Refindicatesthereferenceimplementation(usingAES-NI)andVAESindicatestheversionusingVAES.Improv%showstheperformanceimprovementofVAESoverAES-NI.Lowerrun-timesarebetter.Sub-OperationTypeNetworkImplConvolutionTruncationReLUMatMulBatchNormalizationMaxPoolTotalSqzImgRef[82]28.1—4.027.2—4.739.0VAES28.0—2.926.9—3.135.6Improv%0.6%—36.7%0.9%—53.0%9.6%SqzCIFARRef[82]28.0—4.027.0—4.438.5VAES28.2—2.927.2—3.235.8Improv%−0.8%—38.9%−0.9%—37.1%7.5%ResNetRef[82]439.730.818.7436.112.73.2513.3VAES448.220.912.7444.511.22.1503.1Improv%−1.9%47.5%46.5%−1.9%13.2%52.1%2.0%DenseNetRef[82]250.130.628.6244.319.22.7335.6VAES250.021.120.5243.916.21.9313.8Ring32-OTImprov%0.1%45.5%39.5%0.2%18.6%46.6%6.9%145