   Name   |   Owner    | Encoding | Collate | Ctype | Access privileges |  Size   | Tablespace |                Description                   
----------+------------+----------+---------+-------+-------------------+---------+------------+--------------------------------------------  
 postgres | pg13011779 | UTF8     | C       | C     |                   | 7629 kB | pg_default | default administrative connection database  
(1 row)  
```  
6、安装PG 10，安装插件(你在RDS中用了哪些插件，本地也要安装)。  
https://www.postgresql.org/ftp/source/v10.7/  
```  
[root@pg11-test ~]# useradd pg10  
[root@pg11-test ~]# su - pg10  
[pg10@pg11-test ~]$ wget https://ftp.postgresql.org/pub/source/v10.7/postgresql-10.7.tar.bz2  
[pg10@pg11-test ~]$ tar -jxvf postgresql-10.7.tar.bz2   
[pg10@pg11-test ~]$ cd postgresql-10.7/  
[pg10@pg11-test postgresql-10.7]$ ./configure --prefix=/home/pg10/pg10.7  
[pg10@pg11-test postgresql-10.7]$ make world  
[pg10@pg11-test postgresql-10.7]$ make install-world  
```  
```  
[pg10@pg11-test postgresql-10.7]$ vi ~/.bash_profile  
export PS1="$USER@`/bin/hostname -s`-> "  
export PGPORT=4001  
export PGDATA=/data01/pg10/pg_root$PGPORT  
export LANG=en_US.utf8  
export PGHOME=/home/pg10/pg10.7  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH   
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGHOST=$PGDATA  
export PGUSER=sup  
export PGDATABASE=postgres  
alias rm='rm -i'  
alias ll='ls -lh'  
unalias vi  
```  
7、足够大的目录（放下主实例数据文件）  
```  
[pg10@pg11-test ~]$ exit  
logout  
[root@pg11-test ~]# mkdir /data01/pg10  
[root@pg11-test ~]# chown pg10:pg10 /data01/pg10  
```  
8、创建从库(采用rds的超级账号)  
```  
su - pg10  
pg10@pg11-test-> pg_basebackup -D $PGDATA -F p -c fast -X stream -h pgm-uf643v6342lmkqt1to.pg.rds.aliyuncs.com -p 3433 -U sup   
Password:   
WARNING:  skipping special file "./.s.PGSQL.3002"  
```  
9、配置recovery.conf  
```  
pg10@pg11-test-> cd $PGDATA  
pg10@pg11-test-> cp /home/pg10/pg10.7/share/postgresql/recovery.conf.sample ./  
pg10@pg11-test-> mv recovery.conf.sample recovery.conf  
vi recovery.conf  
recovery_target_timeline = 'latest'  
standby_mode = on  
primary_conninfo = 'host=pgm-uf643v6342lmkqt1to.pg.rds.aliyuncs.com port=3433 user=sup password=密码'  
```  
10、配置postgresql.conf  
```  
vi postgresql.conf  
#  
#Mon Mar 04 17:06:37 CST 2019  
# 注释几个参数  
#auth_delay.milliseconds='3000'  
#shared_preload_libraries='pg_stat_statements,auth_delay,auto_explain,zhparser,pg_pathman'  
#rds.rds_max_non_super_conns=100  
#log_line_prefix='\1\n\t%p\t%r\t%u\t%d\t%t\t%e\t%T\t%S\t%U\t%E\t\t'  
#rds.rds_max_super_conns=100  
#log_filename='postgresql-%Y-%m-%d_%H%M%S.log'  
#rds.rds_max_non_super_wal_snd=10  
# 修改几个参数  
port=4001  
log_statement='ddl'  
log_destination='csvlog'  
log_checkpoints=on   
```  
11、启动从库  
```  
pg10@pg11-test-> pg_ctl start  
waiting for server to start....2019-03-26 06:41:50.843 UTC [45301] LOG:  listening on IPv4 address "0.0.0.0", port 4001  
2019-03-26 06:41:50.843 UTC [45301] LOG:  listening on IPv6 address "::", port 4001  
2019-03-26 06:41:50.843 UTC [45301] LOG:  listening on Unix socket "./.s.PGSQL.4001"  
2019-03-26 06:41:50.866 UTC [45301] LOG:  redirecting log output to logging collector process  
2019-03-26 06:41:50.866 UTC [45301] HINT:  Future log output will appear in directory "pg_log".  
 done  
server started  
```  
12、连接到主库，查看从库的连接状态，延迟状态  
```  
pg10@pg11-test-> psql -h pgm-uf643v6342lmkqt1to.pg.rds.aliyuncs.com -p 3433 -U sup postgres  
Password for user sup:   
psql (10.7, server 10.6)  
Type "help" for help.  
postgres=> select * from pg_stat_replication ;  
-[ RECORD 1 ]----+-----------------------------  
pid              | 20987  
usesysid         | 16385  
usename          | sup  
application_name | walreceiver  
client_addr      | 47.99.87.236  
client_hostname  |   
client_port      | 49794  
backend_start    | 2019-03-26 14:41:50.88186+08  
backend_xmin     |   
state            | streaming  
sent_lsn         | 0/31000060  
write_lsn        | 0/31000060  
flush_lsn        | 0/31000060  
replay_lsn       | 0/31000060  
write_lag        |   
flush_lag        |   
replay_lag       |   
sync_priority    | 0  
sync_state       | async  
```  
13、主库写压力测试  
```  
postgres=> \dt  
Did not find any relations.  
postgres=> create table test (id int, info text, crt_time timestamp);  
CREATE TABLE  
postgres=> insert into test select generate_series(1,100000), md5(random()::text), now();  
INSERT 0 100000  
postgres=> \timing  
Timing is on.  
postgres=> insert into test select generate_series(1,100000), md5(random()::text), now();  
INSERT 0 100000  
Time: 385.658 ms  
postgres=> insert into test select generate_series(1,100000), md5(random()::text), now();  
INSERT 0 100000  
Time: 260.957 ms  
postgres=> select * from pg_stat_replication ;  
-[ RECORD 1 ]----+-----------------------------  
pid              | 20987  
usesysid         | 16385  
usename          | sup  
application_name | walreceiver  
client_addr      | 47.99.87.236  
client_hostname  |   
client_port      | 49794  
backend_start    | 2019-03-26 14:41:50.88186+08  
backend_xmin     |   
state            | streaming  
sent_lsn         | 0/32DFEE80  
write_lsn        | 0/32DFEE80  
flush_lsn        | 0/32DFEE80  
replay_lsn       | 0/32DFEE80  
write_lag        | 00:00:00.006496  
flush_lag        | 00:00:00.006554  
replay_lag       | 00:00:00.006644  
sync_priority    | 0  
sync_state       | async  
Time: 5.774 ms  
postgres=> \q  
```  
14、连接从库，检查是否已同步  
```  
pg10@pg11-test-> psql -U sup  
psql (10.7)  
Type "help" for help.  
postgres=> select count(*) from test;  
 count    
--------  
 300000  
(1 row)  
```  
**注意**  
如果从库与主库网络不好，或者长时间无法正常的接收WAL日志，那么主库的WAL可能会被清除导致从库永远无法获得同步（此时必须重建从库），建议设置主实例的wal_keep_segments参数，确保有一定的保留余量，会增加主实例的空间使用量。   
例如设置为1024，可能增加16GB的空间占用(wal日志)。  
**如果您已购买阿里云RDS PG 10 HA版 8核以上独占规格实例，可以直接购买只读实例（只读实例本身也是自带HA的，所以可用性比自建更高），省去自建只读实例的麻烦。**   
![pic](20160301_01_pic_005.jpg)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")