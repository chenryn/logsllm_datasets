    RUN apt-get update && apt-get install apache2 -y
    VOLUME ["/var/log/apache2"]
    ```
    这个`Dockerfile`从定义 Ubuntu 映像为父映像开始。接下来，您将执行`apt-get update`命令来更新包列表，并执行`apt-get install apache2 -y`命令来安装 Apache 网络服务器。最后，使用`VOLUME`指令设置`/var/log/apache2`目录的挂载点。
6.  Now, build the Docker image:
    ```
    $ docker image build -t volume .
    ```
    输出应如下所示:
    ![Figure 2.9: Building the volume Docker image ](img/B15021_02_09.jpg)
    图 2.9:构建卷 Docker 映像
7.  Execute the docker container run command to start a new container from the Docker image that you built in the previous step. Note that you are using the `--interactive` and `--tty` flags to open an interactive bash session so that you can execute commands from the bash shell of the Docker container. You have also used the `--name` flag to define the container name as `volume-container`:
    ```
    $ docker container run --interactive --tty --name volume-container volume /bin/bash
    ```
    您的 bash shell 将按如下方式打开:
    ```
    root@bc61d46de960: /#
    ```
8.  From the Docker container command line, change directory to the `/var/log/apache2/` directory:
    ```
    # cd /var/log/apache2/
    ```
    这将产生以下输出:
    ```
    root@bc61d46de960: /var/log/apache2#
    ```
9.  Now, list the available files in the directory:
    ```
    # ls -l
    ```
    输出应如下所示:
    ![Figure 2.10: Listing files of the /var/log/apache2 directory ](img/B15021_02_10.jpg)
    图 2.10:列出/var/log/apache2 目录的文件
    这些是 Apache 在运行进程时创建的日志文件。检查该卷的主机装载后，应该可以使用相同的文件。
10.  现在，退出容器来检查主机文件系统:
    ```
    # exit
    ```
11.  Inspect `volume-container` to view the mount information:
    ```
    $ docker container inspect volume-container
    ```
    在“`Mounts`”键下，可以看到与坐骑相关的信息:
    ![Figure 2.11: Inspecting the Docker container ](img/B15021_02_11.jpg)
    图 2.11:检查 Docker 容器
12.  Inspect the volume with the `docker volume inspect ` command. `` can be identified by the `Name` field of the preceding output:
    ```
    $ docker volume inspect 354d188e0761d82e1e7d9f3d5c6ee644782b7150f51cead8f140556e5d334bd5
    ```
    您应该会得到类似如下的输出:
    ![Figure 2.12: Inspecting the Docker volume ](img/B15021_02_12.jpg)
    图 2.12:检查 Docker 卷
    我们可以看到容器被安装到`"/var/lib/docker/volumes/354d188e0761d82e1e7d9f3d5c6ee644782b 7150f51cead8f140556e5d334bd5/_data"`的主机路径上，这在前面的输出中被定义为`Mountpoint`字段。
13.  List the files available in the host file path. The host file path can be identified with the `"Mountpoint`" field of the preceding output:
    ```
    $ sudo ls -l /var/lib/docker/volumes/354d188e0761d82e1e7d9f3d5c6ee644782b7150f51cead8f14 0556e5d334bd5/_data
    ```
    在下面的输出中，您可以看到容器的`/var/log/apache2`目录中的日志文件被装载到主机上:
    ![Figure 2.13: Listing files in the mount point directory ](img/B15021_02_13.jpg)
图 2.13:列出装载点目录中的文件
在本练习中，我们观察了如何使用`VOLUME`指令将 Apache 网络服务器的日志路径挂载到主机文件系统。在下一节中，我们将了解`EXPOSE`指令。
## 暴露指令
`EXPOSE`指令用于通知 Docker 容器正在运行时监听指定的端口。我们可以使用`EXPOSE`指令通过 TCP 或 UDP 协议来公开端口。`EXPOSE`指令有以下格式:
```
EXPOSE 
```
但是，通过`EXPOSE`指令暴露的端口只能从其他 Docker 容器中访问。要在 Docker 容器之外公开这些端口，我们可以使用`docker container run`命令发布带有`-p`标志的端口:
```
docker container run -p : 
```
举个例子，假设我们有两个容器。一个是 NodeJS web app 容器，应该通过端口`80`从外部访问。第二个是 MySQL 容器，应该通过端口`3306`从节点 app 容器访问。在这种情况下，我们必须使用`EXPOSE`指令公开 NodeJS 应用的端口`80`，并使用带有`docker container run`命令的`-p`标志将其对外公开。但是，对于 MySQL 容器，我们在运行容器时只能使用没有`-p`标志的`EXPOSE`指令，因为`3306`应该只能从节点 app 容器访问。
总之，以下语句定义了该指令:
*   如果我们同时指定`EXPOSE`指令和`-p`标志，暴露的端口将可以从其他容器和外部访问。
*   如果我们在没有`-p`标志的情况下指定`EXPOSE`，暴露的端口将只能从其他容器访问，而不能从外部访问。
您将在下一节了解`HEALTHCHECK`指令。
## 健康检查指令
Docker 中使用健康检查来检查容器是否健康运行。例如，我们可以使用运行状况检查来确保应用在 Docker 容器中运行。除非指定了健康检查，否则 Docker 无法判断容器是否健康。如果您在生产环境中运行 Docker 容器，这一点非常重要。`HEALTHCHECK`指令的格式如下:
```
HEALTHCHECK [OPTIONS] CMD command
```
一个`Dockerfile`中只能有一个`HEALTHCHECK`指令。如果有多个`HEALTHCHECK`指令，只有最后一个才会生效。
例如，我们可以使用以下指令来确保容器可以在`http://localhost/`端点上接收流量:
```
HEALTHCHECK CMD curl -f http://localhost/ || exit 1
```
前面命令末尾的退出代码用于指定容器的健康状态。`0`和`1`是该字段的有效值。0 表示健康容器，`1`表示不健康容器。
除了该命令，我们还可以用`HEALTHCHECK`指令指定其他几个参数，如下所示:
*   `--interval`:指定每次健康检查的间隔时间(默认为 30s)。
*   `--timeout`:如果在此期间没有收到成功响应，则认为健康检查失败(默认为 30s)。
*   `--start-period`:运行第一次运行状况检查之前等待的持续时间。这用于给出容器的启动时间(默认值为 0)。
*   `--retries`:如果健康检查在给定的重试次数内连续失败，容器将被视为不健康(默认值为 3)。
在下面的示例中，我们通过向自定义值提供`HEALTHCHECK`指令来覆盖默认值:
```
HEALTHCHECK --interval=1m --timeout=2s --start-period=2m --retries=3 \    CMD curl -f http://localhost/ || exit 1
```
我们可以使用`docker container list`命令检查容器的健康状态。这将在`STATUS`栏下列出健康状态:
```
CONTAINER ID  IMAGE     COMMAND                  CREATED
  STATUS                        PORTS                NAMES
d4e627acf6ec  sample    "apache2ctl -D FOREG…"   About a minute ago
  Up About a minute (healthy)   0.0.0.0:80->80/tcp   upbeat_banach
```
一旦我们启动容器，健康状态将是健康:启动。成功执行`HEALTHCHECK`命令后，状态将变为`healthy`。
在下一个练习中，我们将使用`EXPOSE`和`HEALTHCHECK`指令创建一个带有 Apache web 服务器的 Docker 容器，并为其定义健康检查。
## 练习 2.07:在 Dockerfile 中使用 EXPOSE 和 HEALTHCHECK 指令
您的经理要求您将 Apache 网络服务器归档，以便从网络浏览器访问 Apache 主页。此外，他要求您配置运行状况检查，以确定 Apache 网络服务器的运行状况。在本练习中，您将使用`EXPOSE`和`HEALTHCHECK`指令来实现这一目标:
1.  创建一个名为`expose-healthcheck` :
    ```
    mkdir expose-healthcheck
    ```
    的新目录
2.  导航至新创建的`expose-healthcheck`目录:
    ```
    cd expose-healthcheck
    ```
3.  在`expose-healthcheck`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
5.  Add the following content to the `Dockerfile`, save it, and exit from the `Dockerfile`:
    ```
    # EXPOSE & HEALTHCHECK example
    FROM ubuntu
    RUN apt-get update && apt-get install apache2 curl -y 
    HEALTHCHECK CMD curl -f http://localhost/ || exit 1
    EXPOSE 80
    ENTRYPOINT ["apache2ctl", "-D", "FOREGROUND"]
    ```
    这个`Dockerfile`首先将 ubuntu 映像定义为父映像。接下来，我们执行`apt-get update`命令来更新包列表，执行`apt-get install apache2 curl -y`命令来安装 Apache web 服务器和 curl 工具。`Curl`需要执行`HEALTHCHECK`命令。接下来，我们定义卷曲到`http://localhost/`端点的`HEALTHCHECK`指令。然后，我们公开了 Apache 网络服务器的端口`80`，这样我们就可以从我们的网络浏览器访问主页。最后，我们用`ENTRYPOINT`指令启动 Apache 网络服务器。
6.  Now, build the Docker image:
    ```
    $ docker image build -t expose-healthcheck.
    ```
    您应该会得到以下输出:
    ![Figure 2.14: Building the expose-healthcheck Docker image ](img/B15021_02_14.jpg)
    图 2.14:构建曝光健康检查 Docker 映像
7.  执行 docker 容器运行命令，从上一步构建的 Docker 映像中启动一个新容器。请注意，您正在使用`-p`标志将主机的端口`80`重定向到容器的端口`80`。此外，您还使用了`--name`标志将容器名称指定为`expose-healthcheck-container`，使用`-d`标志以分离模式运行容器(这将在后台运行容器):
    ```
    $ docker container run -p 80:80 --name expose-healthcheck-container -d expose-healthcheck
    ```
8.  List the running containers with the `docker container list` command:
    ```
    $ docker container list
    ```
    在下面的输出中，可以看到`expose-healthcheck-container`的`STATUS`是健康的:
    ![Figure 2.15: List of running containers ](img/B15021_02_15.jpg)
    图 2.15:运行容器列表
9.  Now, you should be able to view the Apache home page. Go to the `http://127.0.0.1` endpoint from your favorite web browser:
    ![Figure 2.16: Apache home page  ](img/B15021_02_16.jpg)
    图 2.16: Apache 主页
10.  现在，清理容器。首先，使用`docker container stop`命令停止 Docker 容器:
    ```
    $ docker container stop expose-healthcheck-container
    ```
11.  最后，用`docker container rm`命令
    ```
    $ docker container rm expose-healthcheck-container
    ```
    移除 Docker 容器
在本练习中，您使用`EXPOSE`指令将 Apache 网络服务器公开为 Docker 容器，并使用`HEALTHCHECK`指令定义健康检查以验证 Docker 容器的健康状态。
在下一节中，我们将了解`ONBUILD`指令。
## 英国建筑指令