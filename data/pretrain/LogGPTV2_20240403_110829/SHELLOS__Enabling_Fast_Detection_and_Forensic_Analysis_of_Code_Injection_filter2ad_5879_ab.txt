Figure 1: Sample instruction sequence
In the latter case, consider the sequence shown in Fig-
ure 1. The ﬁrst execution chain ends after a single priv-
ileged instruction. The second execution chain executes
instructions 2 to 5 before ending due to a conditional
jump to a privileged instruction. Now, since instructions
3, 4, and 5 were already executed in the second execu-
tion chain they are skipped (as a beginning offset) as a
performance optimization. The third execution chain be-
gins at instruction 6 with an access to the Thread Envi-
ronment Block (TEB) data structure to the offset speci-
ﬁed by ebx. Had the execution chain beginning at in-
struction 3 not been skipped, ebx would be loaded with
0x30. Instead, ebx is now loaded with a random value
set by the emulator at the beginning of each execution
chain. Thus, if detecting an access to the memory loca-
tion at fs:[0x30] is critical to detecting injected code,
the attack will be missed.
4 Our Approach: SHELLOS
Unlike prior approaches, we take advantage of the ob-
servation that the most widely used heuristics for shell-
code detection exploit the fact that, to be successful, the
injected shellcode typically needs to read from memory
(e.g., from addresses where the payload has been mapped
in memory, or from addresses in the Process Environ-
ment Block (PEB)), write the payload to some memory
area (especially in the case of polymorphic shellcode),
or transfer ﬂow to newly created code [16, 22, 23, 25–
28, 41, 43]. For instance, the execution of shellcode of-
ten results in the resolution of shared libraries (DLLs)
through the PEB. Rather than tracing each instruction
and checking whether its memory operands can be clas-
siﬁed as “PEB reads,” we allow instruction sequences to
execute directly on the CPU using hardware virtualiza-
tion, and only trace speciﬁc memory reads, writes, and
executions through hardware-supported paging mecha-
nisms.
Our design for enabling hardware-support of code in-
jection attacks is built upon a virtualization solution [12]
known as Kernel-based Virtual Machine (KVM). We use
the KVM hypervisor to abstract Intel VT and AMD-V
hardware virtualization support. At a high level, the
KVM hypervisor is composed of a privileged domain
and a virtual machine monitor (VMM). The privileged
domain is used to provide device support to unprivileged
guests. The VMM, on the other hand, manages the phys-
ical CPU and memory and provides the guest with a vir-
tualized view of the system resources.
In a hardware virtualized platform, the VMM only
mediates processor events (e.g., via instructions such
as VMEntry and VMExit on the Intel platform) that
would cause a change in the entire system state, such as
physical device IO, modifying CPU control registers, etc.
Therefore, it no longer emulates guest instruction execu-
tions as with software-based CPU emulation; execution
happens directly on the processor, without an interme-
diary instruction translation. We take advantage of this
design to build a new kernel, called ShellOS, that runs
as a guest OS using KVM and whose sole task is to de-
tect and analyze code injection attacks. The high-level
architecture is depicted in Figure 2.
4.1 The SHELLOS Interface
ShellOS can be viewed as a black box, wherein a buffer
is supplied to ShellOS by the privileged domain for in-
spection via an API call. ShellOS performs the anal-
ysis and reports (1) if injected code was found, (2) the
location in the buffer where the shellcode was found, and
(3) a log of the actions performed by the shellcode.
A library within the privileged domain provides the
ShellOS API call, which handles the sequence of ac-
tions required to initialize guest mode via the KVM
ioctl interface. One notable feature of initializing
guest mode in KVM is the assignment of guest phys-
ical memory from a userspace-allocated buffer. We
use this feature to satisfy a critical requirement — that
is, efﬁciently moving buffers into ShellOS for analy-
sis. Since offset zero of the userspace-allocated mem-
ory region corresponds to the guest physical address of
0x0, we can reserve a ﬁxed memory range within the
guest address space where the privileged domain library
writes the buffers to be analyzed. These buffers are then
directly accessible to the ShellOS guest at the pre-
deﬁned physical address.
The privileged domain library also optionally allows
the user to specify a process snapshot for ShellOS to
use as the default environment. The details about this
snapshot are given later in §4.5, but for now it is suf-
ﬁcient to note that the intention is to allow the user to
analyze buffers in an environment as similar as possible
to what the injected code would expect. For example,
a user analyzing buffers extracted from a PDF process
may provide an Acrobat Reader snapshot, while one an-
alyzing Flash objects might supply an Internet Explorer
snapshot. While malicious code detection may typically
occur without this extra data, it provides a realistic envi-
ronment for our post facto diagnostics.
When
privileged
domain ﬁrst
the
initializes
ShellOS,
it completes its boot sequence (detailed
next) and issues a VMExit. When the ShellOS API
is called to analyze a buffer, it is copied to the ﬁxed
shared region before a VMEnter is issued. ShellOS
completes its analysis and writes the result to the shared
region before issuing another VMExit, signaling that
the kernel is ready for another buffer. Finally, we build
a thread pool into the library where-in each buffer to be
analyzed is added to a work queue and one of n workers
dequeues the job and analyzes the buffer in a unique
instance of ShellOS.
4.2 The SHELLOS Kernel
To set up our execution environment, we initialize the
Global Descriptor Table (GDT) to mimic a Windows en-
vironment. More speciﬁcally, code and data entries are
added for user and kernel modes using a ﬂat 4GB mem-
ory model, a Task State Segment (TSS) entry is added
that denies all usermode IO access, and a special en-
try that maps to the virtual address of the Thread En-
vironment Block (TEB) is added. We set the auxiliary
FS segment register to select the TEB entry, as done by
the Windows kernel. Therefore, regardless of where the
TEB is mapped into memory, code (albeit benign or ma-
licious) can always access the data structure at FS:[0].
This “feature” is commonly used by injected code to ﬁnd
shared library locations, and indeed, access to this region
of memory has been used as a heuristic for identifying
injected code [28].
Virtual memory is implemented with paging, and mir-
rors that of a Windows process. Virtual addresses above
Figure 2: Architecture for detecting code injection attacks. The ShellOS platform includes the ShellOS operating
system and host-side interface for providing buffers and extending ShellOS with custom memory snapshots and run-
time detection heuristics. As shown, buffers are analyzed from reassembled TCP connections collected on a network
tap; however ShellOS may be used as a component in any framework that requires analysis of injected code.
3GB are reserved for the ShellOS kernel. The ker-
nel supports loading arbitrary snapshots created using
the minidump format [20] (e.g., used in tools such as
WinDBG). The minidump structure contains the neces-
sary information to recreate the state of the running pro-
cess at the time the snapshot was taken. Once all regions
in the snapshot have been mapped, we adjust the TEB en-
try in the Global Descriptor Table to point to the actual
TEB location in the snapshot.
Control Loop Recall that ShellOS’ primary goal is
to enable fast and accurate detection of input contain-
ing shellcode. To do so, we must support the ability to
execute the instruction sequences starting at every off-
set in the inspected input. Execution from each offset
is required since the ﬁrst instruction of the shellcode is
unknown. The control loop in ShellOS is responsi-
ble for this task. Once ShellOS is signaled to begin
analysis, the fpu,mmx, xmm, and general purpose reg-
isters are randomized to thwart injection attacks that try
to hinder analysis by guessing ﬁxed register values (set
by ShellOS) and end execution early upon detection
of these conditions. The program counter is set to the
address of the buffer being analyzed. Buffer execution
begins when ShellOS transitions to usermode with the
iret instruction. At this point, instructions are executed
directly on the CPU in usermode until execution is inter-
rupted by a fault, trap, or timeout. The control loop is
therefore completely interrupt driven.
We deﬁne a fault as an unrecoverable error in the in-
struction stream, such as attempting to execute a privi-
leged instruction (e.g., the in al, 0x7 instruction in
Figure 2), or encountering an invalid opcode. The kernel
is notiﬁed of a fault through one of 32 interrupt vectors
indicating a processor exception. The Interrupt Descrip-
tor Table (IDT) points all fault-generating interrupts to a
generic assembly-level routine that resets usermode state
before attempting the next execution chain.3
We deﬁne a trap, on the other hand, as a recoverable
exception in the instruction stream (e.g., a page fault re-
sulting from a needed, but not yet paged-in, virtual ad-
dress), and once handled appropriately, the instruction
stream continues execution. Traps provide an opportu-
ShellOS (Guest)Host OSBufferHost-Guest Shared MemoryGDTIDTVMemExecute BufferZero-CopyCoarse-grained TracingTry Next PositionBuffer0xC70xA4mov eax, fs:300x46push ebxjmp $0x77mov ebx,00x9F0x60dec edi0xFF0x29in al,0x70xB2Hypervisor (KVM)RequestShellcode AnalysisResultPreprocessBuffersTimerBootShellOS...PEB...SEHRuntime HeuristicsFaultTimeoutTrapWindowsProcess......Memory SnapshotNetworkTapnity to coarsely trace some actions of the executing code,
such as reading an entry in the TEB. To deal with in-
struction sequences that result in inﬁnite loops, we cur-
rently use a rudimentary approach wherein ShellOS
instructs the programmable interval timer (PIT) to gen-
erate an interrupt at a ﬁxed frequency. When this timer
ﬁres twice in the current execution chain (guaranteeing
at least 1 tick interval of execution time), the chain is
aborted. Since the PIT is not directly accessible in guest
mode, KVM emulates the PIT timer via privileged do-
main timer events implemented with hrtimer, which
in turn uses the High Precision Event Timer (HPET) de-
vice as the underlying hardware timer. This level of indi-
rection imposes an unavoidable performance penalty be-
cause external interrupts (e.g. ticks from a timer) cause a
VMExit.
Furthermore, the guest must signal that each inter-
rupt has been handled via an End-of-Interrupt (EOI). The
problem here is that EOI is implemented as a physical de-
vice IO instruction which requires a second VMExit for
each tick. The obvious trade-off is that while a higher
frequency timer would allow us to exit inﬁnite loops
quickly, it also increases the overhead associated with en-
tering and exiting guest mode (due to the increased num-
ber of VMExits). To alleviate some of this overhead, we
place the KVM-emulated PIT in what is known as Auto-
EOI mode. This mode allows new timeout interrupts to
be received without requiring a device IO instruction to
acknowledge the previous interrupt. In this way, we ef-
fectively cut the overhead in half. We return later to a
discussion on setting appropriate timer frequencies, and
its implications for run-time performance.
The complete ShellOS kernel is composed of 2471
custom lines of C and assembly code.
4.3 Detection
The ShellOS kernel provides an efﬁcient means to ex-
ecute arbitrary buffers of code or data, but we also need a
mechanism for determining if these execution sequences
represent injected code. One of our primary contribu-
tions in this paper is the ability to modularly use exist-
ing runtime heuristics in an efﬁcient and accurate frame-
work that does not require tracing every machine-level
instruction, or performing unsafe optimizations. A key
insight towards this goal is the observation that existing
reliable detection heuristics really do not require ﬁne-
grained instruction-level tracing, rather, coarsely tracing
memory accesses to speciﬁc locations is sufﬁcient.
Towards this goal, a handful of approaches are readily
available for efﬁciently tracing memory accesses; e.g.,
using hardware supported debug registers, or exploring
virtual memory based techniques. Hardware debug reg-
isters are limited in that only a few memory locations
may be traced at one time. Our approach, based on
virtual memory, is similar in implementation to stealth
breakpoints [40] and allows for an unlimited number
of memory traps to be set to support multiple runtime
heuristics deﬁned by an analyst.
Recall that an instruction stream will be interrupted
with a trap upon accessing a memory location that gen-
erates a page fault. We may therefore force a trap to oc-
cur on access to an arbitrary virtual address by clearing
the present bit of the page entry mapping for that ad-
dress. For each address that requires tracing we clear the
corresponding present bit and set the OS reserved
ﬁeld to indicate that the kernel should trace accesses
to this entry. When a page fault occurs, the interrupt
descriptor table (IDT) directs execution to an interrupt
handler that checks these ﬁelds. If the OS reserved
ﬁeld indicates tracing is not requested, then the page
fault is handled according to the region mappings de-
ﬁned in the process’ snapshot. Regardless of where the
analyzed buffers originate from (e.g., a network packet
or a heap object) a Windows process snapshot is always
loaded in ShellOS in order to populate OS data struc-
tures (e.g., the TEB), and to load data commonly present
(e.g., shared libraries) when injected code executes.
When a page entry does indicate that tracing should
occur, and the faulting address (accessible via the CR2
register) is in a list of desired address traps (provided, for
example, by an analyst), the page fault must be logged
and appropriately handled. In handling a page fault re-
sulting from a trap, we must ﬁrst allow the page to be
accessed by the usermode code, then reset the trap im-
mediately to ensure trapping future accesses to that page.
To achieve this, the handler sets the present bit in the
page entry (enabling access to the page) and the TRAP
bit in the flags register, then returns to the usermode
instruction stream. As a result, the instruction that origi-
nally caused the page fault is now successfully executed
before the TRAP bit forces an interrupt. The IDT then
forwards the interrupt to another handler that unsets the
TRAP and present bits so that the next access to that
location can be traced. Our approach allows for tracing
of any virtual address access (read,write, execute), with-
out a predeﬁned limit on the number of addresses to trap.
Detection Heuristics ShellOS, by design, is not tied
to any speciﬁc set of behavioral heuristics. Any heuris-
tic based on memory reads, writes, or executions can
be supported with coarse-grained tracing. To highlight
the strengths of ShellOS, we chose to implement the
PEB heuristic proposed by Polychronakis et al. [28].
That particular heuristic was chosen for its simplicity,
as well as the fact that it has already been shown to be
successful in detecting a wide array of Windows shell-
code. This heuristic detects injected code that parses
the process-level TEB and PEB data structures in order
to locate the base address of shared libraries loaded in
memory. The TEB contains a pointer to the PEB (ad-
dress FS:[0x30]), which contains a pointer to yet an-
other data structure (i.e., LDR DATA) containing several
linked lists of shared library information.
The detection approach given in [28] checks if
accesses are being made to the PEB pointer,