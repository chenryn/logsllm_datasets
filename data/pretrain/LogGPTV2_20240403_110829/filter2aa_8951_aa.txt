# IO
---
- https://www.kancloud.cn/imxieke/ruby-base/107305
---
IO 类的主要作用就是让程序与外部进行数据的输入（input）/ 输出（output）操作。
# 输入 / 输出的种类
**标准输入 / 输出**
程序在启动后会预先分配 3 个 IO 对象。
- 标准输入
    标准输入可以获取从键盘输入的内容。通过预定义常量 `STDIN` 可调用操作标准输入的 IO 对象。另外，用全局变量 `$stdin` 也可以引用标准输入的 IO 对象。不指定接收者的 `gets` 方法等都会默认从标准输入中获取数据。
- 标准输出
    向标准输出写入的数据会显示在屏幕中。通过预定义常量 `STDOUT` 可调用操作标准输出的 IO 对象。另外，用全局变量 `$stdout` 也可以引用标准输出的 IO 对象。不指定接收者的 `puts`、`print`、`printf` 等方法会默认将数据写入到标准输出。
- 标准错误输出
    向标准错误输出写入的数据会显示在屏幕中。通过预定义常量 `STDERR` 可调用操作标准错误输出的 IO 对象。另外，用全局变量 `$stderr` 也可以引用标准错误输出的 IO 对象。
    标准错误输出原本是用于输出错误信息的，但实际上，除输出警告或者错误之外，在希望与程序正常输出的信息做出区别时也可以使用它
    ```ruby
    $stdout.print "Output to $stdout.\n"  # 标准输出
    $stderr.print "Output to $stderr.\n"  # 标准错误输出
    ```
    执行示例
    ```
    > ruby out.rb
    Output to $stdout.
    Output to $stderr.
    ```
    将输出结果重定向到文件时，标准输出的内容会被写入到文件，只有标准错误输出的内容被输出到屏幕中。
    ```
    执行示例
    > ruby out.rb > log.txt
    Output to $stderr.
    ```
    在执行程序时，在命令后加上 `>` 文件名，就可以将程序执行时的输出结果保存到文件中。我们把这个控制台的功能称为“重定向”。通过这个功能，不仅 ruby 命令，程序的输出内容也都可以保存在文件中。
根据需要灵活使用标准输出与标准错误输出，可以使我们很方便地分开获取正常信息与错误信息。
> 备注 ruby 命令的错误信息也会被输出到标准错误输出。
通常标准输入、标准输出、标准错误输出都是与控制台关联的。但是将命令的输出重定向到文件，或者使用管道（pipe）将结果传递给其他程序时则与控制台没有关系。根据实际的使用情况，程序的输入 `/` 输出状态也各异。IO 对象是否与控制台关联，我们可以通过 `tty?` 方法判断。
一个检查标准输入是否为屏幕的例子
```ruby
if $stdin.tty?
  print "Stdin is a TTY.\n"
else
  print "Stdin is not a TTY.\n"
end
```
下面我们用不同的方式调用这个程序，看看有何不同。首先是普通调用。
执行示例
```
> ruby tty.rb
Stdin is a TTY.
```
将命令的输出结果传给管道，或者通过文件输入内容时，程序的结果会不一样。
执行示例
```
> echo | ruby tty.rb
Stdin is not a TTY.
> ruby tty.rb  TTY 是 TeleTYpe 的缩写。
**文件输入 / 输出**
通过 `IO` 类的子类 `File` 类可以进行文件的输入 `/` `输出处理。File` 类中封装了文件删除、文件属性变更等文件专用的功能，而一些基本的输入 `/` 输出处理则使用继承自 `IO` 类的方法。
- **io= File.open(file, mode)**
- **io = open(file, mode)**
    通过 `File.open` 方法或 `open` 方法打开文件并获取新的 `IO` 对象。
    模式（mode）会指定以何种目的打开文件。缺省模式为只读模式（`"r"`）。在 Windows 环境下，在各模式后加上 `b`、通过 `"rb"`、`"rb+"` 等这样的形式即可表示二进制模式（后述）。
    模式 | 意义
    -   | -
    r   | 用只读模式打开文件。
    r+  | 用读写模式打开文件。
    w   | 用只写模式打开文件。文件不存在则创建新的文件；文件已存在则清空文件，即将文件大小设置为0。
    w+  | 读写模式，其余同 "w" 。
    a   | 用追加模式打开文件。文件不存在则创建新的文件。
    a+  | 用读取/ 追加模式打开文件。文件不存在则创建新的文件。
- **io.close**
    使用 `close` 方法关闭已打开的文件。
    1 个程序中同时打开文件的数量是有限制的，因此使用完的文件应该尽快关闭。如果打开多个文件而不进行关闭操作，程序就很可能会在使用 `open` 方法时突然产生异常。
    `File.open` 方法如果使用块，则文件会在使用完毕后自动关闭。这种情况下，`IO` 对象会被作为块变量传递给块。块执行完毕后，块变量引用的 `IO` 对象也会自动关闭。这种写法会使输入 `/` 输出的操作范围更加清晰。
    ```ruby
    File.open("foo.txt") do |io|
    while line = io.gets
        ┊
    end
    end
    ```
- **io.close?**
    用 `close?` 方法可以检查 `IO` 对象是否关闭了。
    ```ruby
    io = File.open("foo.txt")
    io.close
    p io.closed?    #=> true
    ```
- **File.read(file)**
    使用类方法 `read` 可以一次性读取文件 `file` 的内容。
    ```ruby
    data = File.read("foo.txt")
    ```
    > 在 Windows 中不能使用 `File.read` 方法读取像图像数据等二进制数据。`File.read` 方法使用文本模式打开文件时，会对换行符等进行转换，因此无法得到正确的结果。
# 基本的输入 / 输出操作
输入 / 输出操作的数据为字符串，也就是所谓的 `String` 对象。执行输入操作后，会从头到尾按顺序读取数据，执行输出操作后，则会按写入顺序不断追加数据。
**输入操作**
- **io.gets(rs)**
- **io.each(rs)**
- **io.each_line(rs)**
- **io.readlines(rs)**
    从 `IO` 类的对象 `io` 中读取一行数据。用参数 `rs` 的字符串分行。省略 `rs` 时则用预定义变量 `$/`（默认值为 `"\n"`）。
    这些方法返回的字符串中包含行末尾的换行符。用 `chmop!` 方法可以很方便地删除字符串末尾的换行符。
    输入完毕后再尝试获取数据时，`gets` 方法会返回 `nil`。另外，我们还可以使用 `eof?` 方法检查输入是否已经完毕。
    ```ruby
    while line = io.gets
    line.chomp!
        ┊        # 对line 进行的操作
    end
    p io.eof?     #=> true
    ```
    `while` 条件表达式中同时进行了变量赋值与条件判断的操作。将 `gets` 方法的返回值复制给 `line`，并将该值作为 `while` 语句的条件来判断。上面是 `gets` 方法的经典用法，大家应该尽快掌握这种写法。
    用 `each_line` 方法也可以实现同样的效果。
    ```ruby
    io.each_line do |line|
    line.chomp!
        ┊        # 对line 进行的操作
    end
    ```
    另外，用 `readlines` 方法可以一次性地读取所有数据，并返回将每行数据作为元素封装的数组。
    ```ruby
    ary = io.readlines
    ary.each_line do |line|
    line.chomp!
        ┊        # 对line 进行的操作
    end
    ```
    > gets 方法与 puts 方法，分别是“get string”、“put string”的意思。
- **io.lineno**
- **io.lineno=(number)**
    使用 `gets` 方法、`each_line` 方法逐行读取数据时，会自动记录读取的行数。这个行数可以通过 `lineno` 方法取得。此外，通过 `lineno=` 方法也可以改变这个值，但值的改变并不会对文件指针（后述）有影响。
    在下面的例子中，逐行读取标准输入的数据，并在行首添加行编号。
    ```ruby
    $stdin.each_line do |line|
    printf("%3d %s", $stdin.lineno, line)
    end
    ```
- **io.each_char**
    逐个字符地读取 `io` 中的数据并执行块。将得到的字符（`String` 对象）作为块变量传递。
- **io.getc**
    只读取 `io` 中的一个字符。根据文件编码的不同，有时一个字符会由多个字节组成，但这个方法只会读取一个字符，然后返回其字符串对象。数据全部读取完后再读取时会返回 `nil`。
    ```ruby
    while ch = io.getc
    ┊       # 对line 进行的操作
    end
    ```
- **io.ungetc(ch)**
    将参数 `ch` 指定的字符退回到 `io` 的输入缓冲中。
    ```ruby
    # hello.txt 中的内容为“Hello, Ruby.\n”
    File.open("hello.txt") do |io|
    p io.getc  #=> "H"
    io.ungetc(72)
    p io.gets  #=> "Hello, Ruby.\n"
    end
    ```
    指定一个字符大小的字符串对象。对可退回的字符数没有限制。
- **io.getbyte**
    只读取 `io` 中的一个字节，返回得到的字节转换为 `ASCII` 码后的整数对象。数据全部读取完后再读取时会返回 `nil`。
- **io.ungetbyte(byte)**
    将参数 `byte` 指定的一个字节退回到输入缓冲中。参数为整数时，将该整数除以 256 后的余数作为 ASCII 码字符返回一个字节；参数为字符串时，只返回字符串的第一个字节。
- **io.read(size)**
    读取参数 `size` 指定的大小的数据。不指定大小时，则一次性读取全部数据并返回。
    ```ruby
    # hello.txt 中的内容为"Hello, Ruby.\n"
    File.open("hello.txt") do |io|
    p io.read(5)  #=> "Hello"
    p io.read     #=> ",Ruby.\n"
    end
    ```
**输出操作**
- **io.puts(str0, str1, …)**
    对字符串末尾添加换行符后输出。指定多个参数时，会分别添加换行符。如果参数为 `Sting` 类以外的对象，则会调用 `to_s` 方法，将其转换为字符串后再输出。
    ```ruby
    $stdout.puts "foo", "bar", "baz"
    ```
    执行示例
    ```
    > ruby stdout_put.rb
    foo
    bar
    baz
    ```
- **io.putc(ch)**
    输出参数 `ch` 指定的字符编码所对应的字符。参数为字符串时输出首字符。
    ```ruby
    $stdout.putc(82)  # 82 是R 的ASCII 码
    $stdout.putc("Ruby")
    $stdout.putc("\n")
    ```
    执行示例
    ```
    > ruby stdout_putc.rb
    RR
    ```
- **io.print(str0, str1, …)**
    输出参数指定的字符串。参数可指定多个字符串。参数为 `String` 以外的对象时会自动将其转换为字符串。
- **io.printf(fmt, arg0, arg1, …)**
    按照指定的格式输出字符串。格式 `fmt` 的用法与 `printf` 方法一样