# 请参见
*   `docker network create`命令的`help`选项:
```
$ docker network create -help
```
*   `dig`命令的`h`选项:
```
$ dig -h
```
*   Docker 网站上的文档:
[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)
[https://docs.docker.com/engine/userguide/networking/default_network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)
# 使用卷保存数据
正如我们所知，容器的读写层是临时的，当容器被移除时就会被破坏。但是，在一些用例中，您必须在容器的生命周期之外保存应用数据。例如，一个 Docker 注册表容器保存所有被推送到它的映像。如果这个容器被删除，那么我们将丢失它保存的所有映像。也许，我们可以借助容器的提交流来保存数据，但是这会使映像膨胀，并使容器部署过程复杂化。推荐的替代方法是使用卷或绑定装载将应用数据保存在容器的文件系统之外。我们将在下一个食谱中讨论绑定坐骑。
Docker 卷是 Docker 主机中的一个特殊目录，由 Docker 自己创建和管理。我们可以将这些卷装载到容器中，并让应用将其数据存储到卷中。Docker 卷要么是命名的，要么是匿名的。在功能上，匿名卷与命名卷相同；但是，匿名卷名是随机生成的。Docker 还支持`volume`插件来解决高级存储需求，这超出了本书的范围。
在本食谱中，我们将使用一个命名卷和两个容器来演示数据持久性。
# 准备好
在我们开始之前，请确保 Docker 守护程序正在运行。
# 怎么做...
执行以下步骤:
1.  让我们首先使用`docker volume create `命令创建一个命名卷，如下面的代码所示:
```
 $ docker volume create datavol 
 datavol
```
2.  使用`docker volume ls`命令列出音量，如下代码所示:
```
 $ docker volume create ls 
 DRIVER  VOLUME NAME 
 local   datavol
```
3.  使用`docker container run`命令和`-v`选项启动交互式容器，将`datavol`卷装入容器，如下代码所示:
```
 $ docker container run -it --rm -v datavol:/data alpine / #
```
4.  现在，让我们在容器的`/data`目录下创建一个新文件，并向其中写入一些文本:
```
/ # echo "This is a named volume demo" > /data/demo.txt / #
```
5.  退出前面的容器，并使用 docker container `rm`命令移除容器。
6.  现在，通过再次安装`datavol `卷来启动一个新的容器，并打印`demo.txt`的内容，如下代码所示。在这里，我们有意选择一个`ubuntu`映像，只是为了强调 Docker 卷的功能是相同的，与创建容器的 Docker 映像无关:
```
$ docker container run --rm \ -v datavol:/data ubuntu cat /data/demo.txt 
```
这是一个命名的卷演示。显然，我们从第一个容器中写入的文本被保存在`datavol`卷中，然后被第二个容器检索。
# 它是如何工作的...
默认的`docker volume create`命令在 Docker 主机的`/var/lib/docker/volumes/`目录下为卷创建一个目录。例如，在本食谱中，在`/var/lib/docker/volumes/`下创建了一个`datavol `目录。此外，Docker 在为卷创建的目录下为每个卷再创建一个名为`_data`的目录。我们可以通过运行`docker volume inspect`命令来确认目录路径，如下图所示:
![](img/8d0e992b-15e5-4d3d-89b6-6ba9cec04e83.png)
当我们将卷装入容器时，Docker 内部绑定将卷的`_data`目录装入容器。
我们将在下一个食谱中了解更多关于装订机的知识。
在当前配方中，`/var/lib/docker/volumes/datavol/_data`目录在启动容器时被绑定装载，并且卷上的任何文件操作都保留在该目录中，如下面的`tree`输出所示:
![](img/e58c5911-31c9-4ea6-9c38-9a91674c39ea.png)
因为文件操作是从容器外部化的，所以卷的生命周期是从容器中分离出来的。
# 还有更多...
Docker 允许我们与多个容器共享卷，因此卷也可以用作容器之间共享数据的有效工具。
# 请参见
*   `docker volume create`命令的`help`选项:
```
$ docker volume create -help
```
*   `docker volume ls `命令的`help`选项:
```
$ docker volume ls -help
```
*   `docker volume inspect`命令的`help`选项:
```
$ docker volume inspect -help
```
*   Docker 网站上的文档:
[https://docs . docker . com/engine/admin/volumes/volumes/](https://docs.docker.com/engine/admin/volumes/volumes/)
[https://docs . docker . com/engine/reference/command line/volume _ create/](https://docs.docker.com/engine/reference/commandline/volume_create/)
[https://docs . docker . com/engine/reference/command line/volume _ ls/](https://docs.docker.com/engine/reference/commandline/volume_ls/)
[https://docs . docker . com/engine/reference/command line/volume _ inspect/](https://docs.docker.com/engine/reference/commandline/volume_inspect/)
# 在主机和容器之间共享数据
在前面的方法中，我们使用了一个命名卷来保存应用数据。我们还了解到命名卷可用于在容器之间共享数据。在这个方法中，我们将使用绑定装载将 Docker 主机目录装载到容器，然后使用该装载点在 Docker 主机和容器之间共享数据。
# 准备好
在我们开始之前，请确保 Docker 守护程序正在运行。
# 怎么做...
请执行以下步骤:
1.  让我们从在主目录中创建一个名为`data_share`的新目录开始，如以下代码所示:
```
 $ mkdir $HOME/data_share
```
2.  在 Docker 主机的`$HOME/data_share`目录中创建新文件，并在其中写入一些文本:
```
$ echo "data sharing demo" > $HOME/data_share/demo.txt
```
3.  现在，通过挂载`$HOME/data_share`目录启动一个容器，然后打印`demo.txt`的内容:
```
$ docker container run --rm \ 
 -v $(HOME)/data_share:/data \ 
 ubuntu cat /data/demo.txt 
data sharing demo
```
在这个配方中，我们有效地从 Docker 主机向容器共享了一个文件。虽然这是一个非常简单的例子，但它是一个非常强大的机制来共享您的应用配置以及其他细节。
# 它是如何工作的...
当使用`-v :`选项启动容器时，Docker 引擎绑定将主机路径装入指定容器路径上的容器文件系统。绑定挂载是一种 Linux 功能，用于获取现有的目录结构并将其映射到不同的位置。
# 还有更多...
在这个配方中，我们在容器中安装了一个目录。同样，我们也可以将单个文件装载到容器中，如下面的代码所示:
```
$ docker container run --rm \
          -v $(HOME)/data_share/demo.txt:/demo.txt \
          ubuntu cat /demo.txt 
data sharing demo
```
默认情况下，当我们将目录或文件装入容器时，它会以读写模式装入，这样容器就可以更改装入的目录或文件的内容。我们可以使用`ro`标志防止容器修改挂载的目录或文件的内容，如下面的代码所示:
```
$ touch file 
$ docker container run -rm \ 
 -v ${PWD}/file:/file:rw \ 
 ubuntu sh -c "echo rw mode >> /file" 
$ cat file rw mode 
$ docker container run -rm \ 
 -v ${PWD}/file:/file:rw \                    ubuntu sh -c "echo ro >> /file" 
sh: 1: cannot create /file: Read-only file system
```
显然，当我们以只读方式装载文件时，`write`操作失败。
# 请参见
*   `docker container run`命令的`help`选项:
```
$ docker container run -help
```
*   Docker 网站上的文档:
[https://docs . docker . com/engine/admin/volumes/volumes/](https://docs.docker.com/engine/admin/volumes/volumes/)