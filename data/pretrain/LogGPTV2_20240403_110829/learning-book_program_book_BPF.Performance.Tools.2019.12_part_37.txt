---
## Page 297
260
Chapter 7 Memory
1473 bytes in 51 allocations fcon stack
xna11oc+0x18 [bash]
make_env_array_fron_vae_1ist+0xc8 [bash]
make_va_export_axray+Dx3d [bash]
maybe_make_export_env+0x12b [bash]
execute_sisple_corman.d+0x269 [bash]
execute_comnand_in.teroa]+0x862 [bash]
execute_connect.ion+0x109 [ba.sh]
execute_comnand_internal+0xc18 [ba.sh]
execute_comnand+0x6b [bash]
reader_loop+0x286 [bash]
[seq] 696x0+uTeu
_1ibc_start_main+0xe7 [1ibc=2.27-so]
[unknovn ]
[ . - - ]
By default it prints output every five seconds, showing the allocation stacks and total bytes yet
to be freed. The last stack shows that 1473 bytes were allocated via execute_command() and
make_env_array_from_var_list().
memleak(8) alone cannot tell you whether these allocations are a genuine memory leak (that is,
allocated memory with no references and which will never be freed), or memory growth, or just
a long-term allocation. To differentiate between them, the code paths need to be studied and
understood.
Without a p PID provided, memleak(8) traces kernel allocations:
+nemleak
Attaching to kernel allocators, Ctrl+C to quit.
[...]
suotaeootte futpueaeyno (atn sxoeas 0t dos[0e=6t+60]
[...]
15384576 bytes in 3T56 allocations fron stack
_a1loc_pages_nodemask+0x209 [kernel]
[teuxex] sx+ems"sebedootTe
handle_pte_fault+0×3bf [kermel]
_handle_m_fau1t+0x4Te [kerme1]
handle_mm_fault+0xb1 [kerne1]
_do_page_fault+0x25o [kernel]
do_page_fault+0x2e [kernel]
page_fault+0xas [keznel]
[+ . -]
For process targets, memleak(8) works by tracing the user-level allocation functions: malloc(),
calloc0), free(), and so on. For the kernel, it uses the kmem tracepoints: kmem:kmalloc,
kmem:kfree, and so on.
---
## Page 298
7.3  BPF Tools
261
Command line usage:
nenleak[optLons][=p  PID][=c  COMAND]  [1ntexval[count]]
Options include:
=s RATE: Samples one in every RATE allocations to lower overhead
■ -o OLDER: Prunes allocations younger than OLDER, in milliseconds
Allocations, especially user-level allocations, can be extremely frequentmillions of times per
second. This can slow the target application by as much as 10x or more, depending on how busy
it is. For now, this means memleak(8) is more of a troubleshooting or debugging tool than an
everyday production analysis tool. As mentioned earlier, this will be the case until the perfor-
mance of uprobes is greatly improved.
7.3.3
mmapsnoop
mmapsnoop(8)d traces the mmap(2) syscall system-wide and prints details of the requested
mappings. This is useful for general debugging of memory mapping usage. Example output:
Kd·doousdeua 
PID
CONX
PROT KAP
OFFS (KB) SIZE (KB) FILE
6015
.d-doousdsue
S---
0
260
snapsnsp-PY
[perf_event]
6015
KK-
S---
260
[pexf_event]
[. . - ]
6315
Java
R-E
-P-=
2222
11bava.s0
6315
Java
RK-
-PF-
168
8
libjava, 50
6315
Java
R--
-P--
43
1d.s0.cache
6315
Javs
R-E
-P--
0
2081
libnss_compat=2.23.so
6315
Java
RK-
-PF-
2 B
8
1lbnss_compat2.23. so
6315
Java
R-E
-P--
0
2146
1ibns12 .23.s0
6315
Java
-PF-
84
8
11bns1-2 .23.s0
6315
Javs
R--
-P=
0
43
1d.so.cache
6315
Java
R-E
P--
2093
11bnss_nia-2.23.so
6315
Javs
-XX
-PF-
40
8
libnss_nis-2.23.so
6315
java
R-E
P--
0
2117
1lbnss_f11es2.23.s0
6315
Javs
RK-
-PF-
40
8
1ibnss_fi1es=2.23.s0
6315
Java
R=-
2
passvd
[...]
4 Origin: 1 first created this as r
8p.d 1or 0fes
ce: Dymamic Tracing In Orac/
e So/aris, Mec 0S X and FreeBSD in 201.0
[Gregg 11], and 1 created this BCC version for this book on 3HFeb-201.9
---
## Page 299
262
Chapter 7 Memory
This output begins with mappings to the perf_event ring buffers that this BCC tool uses for
fetching event output. Then java mappings can be seen for a new process startup, along with the
protection and mapping flags.
Protection flags (PROT):
· R: PROT_READ
 W: PROT_WRITE
* E: PROT_EXEC
Map flags (MAP):
* S: MAP_SHARED
 P: MAP_PRIVATE
* F: MAP_FIXED
A: MAP_ANON
uunjoo aug e Sugupd 1og uogdo  e sμoddns (g)doousdeuu
This tool works by instrumenting the syscalls:sys_enter_mmap tracepoint. The overhead of this
tool should be negligible as the rate of new mappings should be relatively low.
Chapter 8 continues the analysis of memory-mapped files and includes the mmapfiles(8) and
fmapfaults(8) tools.
7.3.4 brkstack
The usual memory store for application data is the heap, which grows via calls to the brk(2) syscall.
It can be useful to trace brk(2) and show the user-level stack trace that led to this growth. There is
also an sbrk(2) variant, but on Linux, sbrk(2) is implemented as a library call that calls brk(2).
brk(2) can be traced with the syscalls:syscall_enter_brk tracepoint, and stacks for this tracepoint
 'unoo Aouanbaj e 1og (s)qunooes pue μndno juaa-ad 1og (g)aoen s,g Stsn umotqs aq ue
bpftrace one-liner, and also perf(1). Examples using BCC tools:
trace -U t:syscal1s:sys_enter_bzk
+stackcount -P0 t:sysca11s :sys_enter_brk
For example:
+stackcount -P0 t:syscalls:sys_enter_bzk
Tracing 1 functlons for *t:syacalls:sys_enter_brk*... Hit Ctzl-C to end.
C
[.--]
brk
_sbrk
---
## Page 300
7.3 BPF Tools 263
_default_norecore
sysna11oc
_int_ma11oc
tcache_in1t
_libc_nalloc
na11oc_hook_1n1
_libc_mal1oc
JLI_MenA11oc
JI_List_nex
nain
_libc_start_nain
_start
[56ce]eae(
1
[unknovn]
cron [8385]
Z
“0maus"rmf tuoug 'ssaoosd _eael, e urog oes (z)xpq e smogs sndno pageounn s
JLI_MemAlloc0, and via sbrk(3): it looks as if a list object triggered a heap expansion. The
second stack trace from cron is broken. For the java stack to work, I had to use a libc version
with frame pointers. This is discussed further in Section 13.2.9 in Chapter 13.
brk(2) growths are infrequent, and the stack trace may reveal a large and unusual allocation
that needed more space than was available, or a normal code path that happened to need one
byte more than was available. The code path needs to be studied to determine which is the case.
Because these growths are infrequent, the overhead of tracing them is negligible, making brk
tracing an inexpensive technique for finding some clues about memory growth. In comparison,
tracing the much more frequent memory allocation functions directly (e.g., malloc0) can be so
expensive to instrument that the overhead is prohibitive. Another low-overhead tool for analyz
ing memory growth is faults(8), covered in Section 7.3.6, which traces page faults.
It can be easier to remember and find tools by their filename than to remember one-liners, so here
is this important functionality implemented as a bpftrace tool, brkstack(8)*:
+1 /usr/ local/bin/bpf trace
tracepointisyscallsisys_enter_brk
8 [ustack,  corn] = count () :
I hase published brk(2) flame graphs [82).
---
## Page 301
264
Chapter 7 Memory
7.3.5
shmsnoop
shmsnoop(8)° is a BCC tool that traces System V shared memory syscall: shmget(2), shmat(2),
shmdt(2), and shmctl(2). It can be used for debugging shared memory usage, For example, during
:uopeodde eaef e jo dnes
+ shmanoop
PID
COMX
SYS
RET ARGs
12520
java
SHMGET
5Bc000s key: 0x0, size: 65536, shnflg: 0x380 (IFC_CREATI0600)
12520
Java
SHNAT 7fde9c033000 shsld: 0x58c000a, shnaddz: 0x0, shnflg: 0x0
12520
Java
SHHCTL
0 shmid: 0x58c000s, cnd: 0, buf: 0x0
12520
java
SRNDT
0 shmaddx: 0x7fde9c033000
1863
Xorg
SHMAT 7f98cd3b9000 shmid: 0x58c000s, shmaddr: 0x0, shnflg: 0x1000
(SRN_RDONLY)
1863
B30X
SHMCTL
0 shmid: 0x58c000a, cnd: 2, buf: 0x7ffdddd9e240
1863
Xorg
SHNDT
0 shsaddx: 0x7f98cd3b9000
[..]
This output shows Java allocating shared memory using shmget(2), followed by various shared-
memory operations and their arguments. The return of shmget(2) is Ox58c000a, the identi-
fier, which is used in subsequent calls by both Java and Xorg; in other words, they are sharing
memory.
This tool works by tracing the shared memory syscalls, which should be infrequent enough that
the overhead of the tool is negligible.
Command line usage:
shnsnoop [options]
Options include:
• : Included timestamps
squo saoosd sua panseay :a1a d 
7.3.6 faults
Tracing page faults and their stack traces provides a particular view of memory usage: not the
ney aed e paua8gm pue a pasn psng ess sted apoo at snq 1otuatu pageoofe yeu sued apoo
These page faults cause RSS growth, so the stack traces can explain why a process is growing. As
with brk(0, it's possible to trace this event by using a one-liner with other tools, such as using BCC
and stackcount(8) to frequency-count page user and kernel page faults with stack traces:
stackcount -U t:exceptions:page_Eault_user
+stackcount t:exceptions:page_fault_kermel
6 0rigin: This wss created by Jiri 0lsa on 8-0et-2018
---
## Page 302
7.3 BPF Tools
265
Example output, with  for process details:
 stackcount -F0 t:exoeptions:page_fault_user
Tracing l functions for *tiexceptions:page_fault_user*... Hit Ctrl-C to end.
°C
[...]
PhaseIdealLoop: :Dominators ()
PhaseIdealLoop: :bu11d_and_opt.iml ze (Loop0pt.sMode)
Compile:optinize_loops (PhsseIterGVus, Loop0ptsMode)[clone -part,344]
Compile::0ptinize [)
Compilen:Compile lciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, Directiv..-
C2Conp1lex::conp1le_sethod (c1Env*, ciMethod*, 1nt., Direct.iveSet*)
CompileBroker::invoke_compiler_on_nethod (ConpileTask*)
Comp11eBzokex::conp11er_thread_1oop l)
JavaThreadi: =thread_nsin_inner ()
Thread: :ca11_run ()
thread_native_entry(Thread*)
pesxq1"xes
auoo
C2 Conp11exThxe [9124]
1824
_menset_avx2_erns
PhaseCFG::global_code_notlon ()
PhaseCFG::do_globsl_code_notion(1
Comp11e: : Code_Gen ()
Compile::Compile lciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, Directiv..*
C2Conpllex::conplle_sethod (c1Env*, ciMethod*, Int, Direct.iveSet*)
CompileBroker::invoke_compiler_on_nethod (ConpileTask*)
ComspileBzokex::conp1lez_thread_1oop 1)
JavaThread: :thread_nsin_inner ()
Thzead: :ca11_rus 11
thread_native_entry IThread*)
pesxq1xes
auoo
C2 Conp11exThre [9124]
2934
---
## Page 303
266
5Chapter 7 Memory
This output shows the start of a Java process and its C2 compiler thread faulting memory as it
compiled code to instruction text.
Page Fault Flame Graphs
introxduced in Chapter 2.) These instructions use my original flame graph software [37] and result
in a page fault flame graph, an area of which is shown in Figure 7-5:
Figure 7-5 Page fault flame graph
This zoomed area shows the code paths from the Java compiler thread that grew main memory
and triggered a page fault.
Netflix has automated page fault flame graph generation from Vector, an instance analysis tool, so
that Netflix developers can generate these graphs with the click of a button (see Chapter 17).
---
## Page 304
7.3 BPF Tools
267
bpftrace
For ease of use, here is a bpftrace tool, faults(8), for tracing page faults with stacks:
+1/usr/local/bin/bpftrace
softxare:page-faults:1
8 [ustack,  corn] =  count () :
This tool instruments the software event page faults with an overflow count of one: it runs
the BPF program for every page fault and frequency-counts the user-level stack trace and process
name.
7.3.7 ffaults
ffaults(8)* traces page faults by filename. For example, from a software build:
+ ffaults.bt
Attaching l pzobe..
[..-]
9L$+ :[9]6
[nake]: 7054
[1ibbfd2.26.1systen.so] : B325
e[1ibtinfo,so.5.9] : 8484
e[1ibd]2 .23.so] : 9137
[1ocale=azchive] : 21137
[cc1]: 23083
e[1d-2 .23.so] : 27558
[bash.] : 45236
[1ibopcodes-2.26.1-systen,so] : 46369
e[1ibc-2.23.so] : 84814
526.Es :116