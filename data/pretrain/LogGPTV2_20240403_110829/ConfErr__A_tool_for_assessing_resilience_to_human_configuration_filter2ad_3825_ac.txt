configuration files as a tree of directives and sections
(see Figure 2.b). Nested sections form subtrees.
This plugin implements omissions, insertions in the
wrong place, and duplication of configuration directives
(see §2.2). Omissions ofboth directives and sections are
described using the abstract delete template. Insertions
in the wrong place and duplications are expressed with
move and copy templates, respectively. The candidates
for the mutation depend on the type of error we want
to inject: e.g., for changing the order of directives in a
section, we restrict the candidates to be directives only,
and the destination ofthe move is restricted to the set of
sections containing the currently selected candidate di(cid:173)
rectives. This template-based approach allows ConfErr
to simulate human errors without having to simulate the
entire reasoning process that leads to the errors.
Note that, depending on the level of expressiveness
in the file format used by the SUT, it is possible that
some fault scenarios result in abstract representations
that cannot be expressed in the system configuration file
language. For instance, some systems do not support
nested sections. These situations are detected and re(cid:173)
ported by ConfErr when it tries to serialize the modified
configuration.
4.3. Semantic Errors Plugin
A semantic error plugin encodes mistakes that are
specific to a class of systems, and are usually based on
best practices documents (e.g., RFC-1912 defines a list
of common configuration errors for DNS servers). The
implementation of these domain-specific errors typi(cid:173)
cally require the definition of a system-independent but
domain-specific configuration representation; the errors
are then defined using abstract templates applied to this
representation. Section 5.4 will describe in detail a se(cid:173)
mantic error generator for DNS servers.
5. Case Studies
In this section we illustrate the use ofConfErr in as(cid:173)
sessing the resilience to configuration errors in widely(cid:173)
used systems:
the Postgres 8.2.5 database, MySQL
5.1.22 database, Apache 2.2.6 web server, and the ISC
BIND 9.4.2 and djbdns 1.05 domain name servers.
We find that configuration error injection can ex(cid:173)
pose serious bugs in production-quality software, and
that systematically checking the behavior of systems
against common configuration errors can highlight ar(cid:173)
eas where resilience can be improved. We also find that,
overall, Postgres is markedly more robust to configura(cid:173)
tion typos than MySQL; the generated resilience profile
reveals simple checks that could significantly improve
resilience. Undetected configuration errors often have
undesired latent effects, so the earlier they are flagged,
the better.
After describing our setup and methodology (§5.1),
we present results obtained with the three different plu(cid:173)
gins (§5.2, §5.3, and §5.4) and then show how ConfErr
can be used to objectively compare one system's re(cid:173)
silience to that of another.
5.1. Setup and Methodology
ConfErr requires three system-specific compo(cid:173)
nents: (a) initial configuration files, (b) parsers / serial(cid:173)
izers for configurations, and (c) scripts to set up the en(cid:173)
vironment, start/stop the system, and a diagnostic suite
to determine the outcome of the error injection. Com(cid:173)
bining these with the error generators, ConfErr auto(cid:173)
matically produces a resilience profile for the SUT.
We used the default configuration files that ship
with the target systems. For MySQL, Postgres, and
Apache, configuration files consist of sections, with
Apache additionally having nested sections and Post(cid:173)
gres having only one main section. Sections are made
up of lines, which can be empty or can contain a direc(cid:173)
tive. A typical directive consists of a name, a separator,
and a value; some directives may not have values. Post(cid:173)
gres's default configuration has 8 directives, MySQL's
has 14, and Apache's has 98. For the DNS server, we
carried out the error injection on zone files, that describe
the records published by the server; the initial configu(cid:173)
rations had one forward zone and one reverse zone.
Writing the parsers and transformers to/from
plugin-specific representations was trivial, given the
simple structure of the configurations.
The error generator plugins impose a hierarchy
over the fault space, allowing plugins to declaratively
specify broad fault classes and then select one element
ofeach class. Unlike choosing errors randomly over the
space of possible errors, ConfErr's approach is consid(cid:173)
erably more efficient at finding flaws-it introduces a
wide variety of errors while eliminating redundancy in
injection. For the case studies shown here, the represen(cid:173)
tatives of each fault class were chosen randomly within
the class. However, ifusing ConfErr for benchmarking,
the exact faultload could be determined a priori (e.g.,
based on direct surveys of administrator errors). Also,
the evaluation could be carried out with a uniform ran(cid:173)
dom distribution and the results processed a posteriori,
to reflect any biases that may occur in real life.
1-4244-2398-9/08/$20.00 ©2008 IEEE
162
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
ContErr uses the provided scripts to start/stop the
system and evaluate the effect of error injections. The
scripts correspond to simple functional tests akin to
what an administrator might do to check that a system
is OK. For MySQL and Postgres, the diagnosis script
creates a database, then creates a table, populates it, and
queries it. For Apache, the script performs an HTTP
GET operation to download a page from the web server.
In the case of DNS servers, the script checks that the
server is answering to requests both for the forward and
the reverse zone.
Depending on the type of error injected, we expect
different outcomes. When parameter values are mod(cid:173)
ified inappropriately, the SUT ought to detect them;
when we perform structural modifications that do not
change the semantics of the configuration,
the SUT
ought to operate correctly.
All results were obtained on a Dell Optiplex 745
workstation with an Intel Core2 Duo processor and 2
GB RAM, running Ubuntu Linux. The testing engine,
the SUT, and relevant clients were all hosted on the
same computer.
5.2. Resilience to Typos
Thoroughly checking configuration files for typos
is painstaking but intellectually trivial, so we would ex(cid:173)
pect systems-especially those destined for enterprise
use-to excel at it. We therefore set out to measure the
resilience ofMySQL, Postgres, and Apache to this type
of errors.
We injected three types of errors:
• Deletion of entire directives - mutate the default
configuration file to miss a given directive
• Typos in directive names - for each section in the
default file, randomly select 10 directives and in(cid:173)
troduce a typo in each one's name
• Typos in directive values - similar to those above,
but introduce typos in the directive value instead
Some errors are detected by the system upon
startup, others by the tests, and others not detected at
all. Each error injection experiment took on the order
of seconds (2.2 sec for MySQL, 6 sec for Postgres and
1.1 sec for Apache). Table 1 summarizes the results.
Table 1. Resilience to typos
# of Injected Errors
Detected
by system at startup
by functional tests
Ignored
MySQL
327
(100%)
270 (83%)
1
56 (17%)
Postgres
98
(100%)
76 (78%)
0
22 (22%)
Apache
120
(100%)
46 (38%)
6 (5%)
68 (57%)
Functional tests do not offer significant additional
detection power compared to startup-time detection,
with the exception of typos in listening ports (which is
why 5% of Apache errors were caught by functional
tests). Apache and Postgres ignore a large number of
the typos in part because their directive names are case~
insensitive.
The resilience profiles (not listed here, for brevity),
reveal several unexpected weaknesses in the SUTs.
For example, MySQL silently ignores values that
are out of bounds and chooses defaults instead (e.g.
key..buffer_size=l is accepted and ignored, although
the value has to be at least 8). Directives that specify
numeric values accept a suffix to indicate a multiplier
(i.e. K, M, G for Kilo, Mega, Giga, respectively); when
parsing such values, MySQL stops after the first multi(cid:173)
plier symbol. The result is that a value like"1MO" is
accepted as valid, whereas it is clearly an unintended
value (the operator likely meant "10M"). Numeric val(cid:173)
ues that start with one ofthe mentioned suffixes (and are
thus invalid) are also silently ignored and defaults are
used instead. Directives specified without a value are
also accepted and replaced with defaults by MySQL.
We believe all of these are obvious typos that could be
easily caught by MySQL's configuration file parser.
A design flaw in MySQL invites latent errors:
MySQL has a shared configuration file used for the DB
server as well as the various auxiliary tools, such as
backup. When starting the database daemon, only er(cid:173)
rors in the server-specific directives are detected, with
the rest of the file not being parsed at this time. This
means that, if an administrator inadvertently inserts an
error in one of the other sections, it will become appar(cid:173)
ent at the earliest on the next run of the corresponding
tool. This is dangerous, because some ofthese auxiliary
tools run unattended, launched by cronjobs during the
night, so the administrator does not have direct feedback
on the typos.
Apache's parser has weaknesses as well. For in(cid:173)
stance, directives related to MIME types (AddType
and Defaul tType) should take values in the format
"type/subtype", as defined in RFC-2045. Apache, how(cid:173)
ever, accepts freeform strings instead, without checking
conformance to this pattern. Another weakness is in
the ServerAdmin directive: according to the manual,
it should take a URL or an email address; just like in
the MIME case, freeform strings are readily accepted
here. Similarly, ServerName should only accept DNS
host names, but instead accepts anything. Such laxity
can prevent the system from functioning at a much later
date (e.g., the server administrator may not receive fail(cid:173)
ure notifications because of a malformed address entry).
An interesting feature of Postgres is that it en-
1-4244-2398-9/08/$20.00 ©2008 IEEE
163
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
For example,
forces constraints across directives.
a typo injected in the max_f sm_pages directive (re(cid:173)
placing 153600 with 15600) caused Postgres to im(cid:173)
mediately shutdown with an error message explain(cid:173)
ing that max_f sm_pages must be at
least 16 x
max_fsm_relations. Such constraint checking helps
to promptly correct typos that could have hard-to(cid:173)
diagnose implications if they went unnoticed.
5.3. Resilience to Structural Errors
Configuration files of different systems frequently
share a similar structure. This similarity invites oper(cid:173)
ators to reuse the mental model of a given system to
configure a different one. However, slight differences in
configuration methods can make such reuse error-prone.
An ideal system should accommodate as many
ways to express a configuration as possible, while en(cid:173)
suring that such flexibility does not impact the ability
of the system to detect wrong settings. This allows
the system to be resilient to minor changes in admin(cid:173)
istrators' mental models. ContErr automatically cre(cid:173)
ates variations of configuration files that can be used
by a developer to check the correctness of their imple(cid:173)
mentation, or be used by the end user to automatically
discover which classes of variations are supported by a
given system.
We would expect the following classes of varia(cid:173)
tions to be accommodated by Apache, MySQL, and
Postgres:
• Any ordering of sections is allowed
• Any ordering of directives is allowed within a sec(cid:173)
tion
• Directive and section names are case insensitive
• Redundant whitespace between directive names,
separators and values are ignored
• Directive names can be truncated, if this does not
generate a collision of names
We ran a set of experiments on the 3 SUTs to find
which of these variations are supported and whether
their implementation is correct. We created variations
of the same configuration files used in the experiments
of the previous section. For each class of variations, we
tested each system with 10 different configuration files.
Given that we knew the size of the configuration files,
we chose the number of configurations such that a ran(cid:173)
dom choice of modifications would yield a reasonable
coverage of the possible faults. When the size of the
input files is not known a priori, ConfErr can be asked
to automatically choose the number of faults depending
on the structure of the files. Table 2 summarizes the
results.
Table 2. Resilience to structural errors
MySQL
Postgres
Apache
Order of sections
Order of directives
Spaces near separators
Mixed-case directive names
Truncatable directive names
% of assumptions satisfied
Yes
Yes
Yes
No
Yes
80%
nla
Yes
Yes
Yes
No
75%
nla
Yes
Yes