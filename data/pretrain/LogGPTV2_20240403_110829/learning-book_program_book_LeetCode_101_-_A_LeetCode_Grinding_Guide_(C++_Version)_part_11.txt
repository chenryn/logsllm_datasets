出现一次的数字。
输人输出样例
输入是一个一维整数数组，输出是该数组内的一个整数。
Input: [4,1,2,1,2]
Output: 4
---
## Page 83
10.3二进制特性
78/143 
题解
我们可以利用xAx=0和xA0=x的特点，将数组内所有的数字进行按位异或。出现两次
的所有数字按位异或的结果是0，0与出现一次的数字异或可以得到这个数字本身。
int singlelumber(vector& nums){
int ans = 0;
for (const int & num: nums){
ans ^= nun;
return ans;
10.3
二进制特性
利用二进制的一些特性，我们可以把位运算使用到更多问题上。
例如，我们可以利用二进制和位运算输出一个数组的所有子集。假设我们有一个长度为n的
数组，我们可以生成长度为n的所有二进制，1表示选取该数字，0表示不选取。这样我们就获
得了2"个子集。
342.Power of Four (Easy)
题目描述
给定一个整数，判断它是否是4的次方。
输人输出样例
输入是一个整数，输出是一个布尔值，表示判断结果。
Input: 16
Output: true
在这个样例中，16是4的二次方，因此返回值为真。
题解
首先我们考虑一个数字是不是2的（整数）次方：如果一个数字n是2的整数次方，那么它
的二进制一定是0...010...0这样的形式；考虑到n-1的二进制是0..001..1，这两个数求按位与
的结果一定是0，因此如果n&（n-1)为0，那么这个数是2的次方。
如果这个数也是4的次方，那二进制表示中1的位置必须为奇数位。我们可以把n和二进制
的10101..101（即十进制下的1431655765）做按位与，如果结果不为0，那么说明这个数是4的
次方。
bool isPoverOfFour(int n) {
return n >0&k!(n &(n -1)) &&(n & 1431655765);
---
## Page 84
10.3二进制特性
79/143 -
318.MaximumProduct of Word Lengths(Medium)
题目描述
给定多个字母中，求其中任意两个字母半的长度乘积的最大值，且这两个字母申不能含有相
同字母。
输人输出样例
输人一个包含多个字母中的一维数组，输出一个整数，表示长度乘积的最大值。
Input : ["a*,"ab", "abe",*d",*cd","bcd*,"abcd"]
Dutput: 4
在这个样例中，一种最优的选择是“ab”和“cd"。
题解
怎样快速判断两个字母中是否含有重复数字呢？可以为每个字母申建立一个长度为26的二
进制数字，每个位置表示是否存在该字母。如果两个字母中含有重复数字，那它们的二进制表示
的按位与不为0。同时，我们可以建立一个哈希表来存储字母中（在数组的位置）到二进制数字
的映射关系，方便查找调用。
int maxProduct(vector& uords){
unordered_map hash;
int ans = 0;
for (const string & word: vords){
int mask = 0, size = word.size();
for （const char &c:word){
mask |= 1 >1]。
vector countBits(int num){
vector dp(num+1, 0);
for (int i = 1; i >1] ;
//等价于dp[]-dp[ik(i-1)] + 1;
return dp;
10.4练习
基础难度
268. Missing Number (Easy)
SingleNumber的变种题。除了利用二进制，也可以使用高斯求和公式。
693.Binary Number with Alternating Bits (Easy)
利用位运算判断一个数的二进制是否会出现连续的0和1。
476. Number Complement (Easy)
二进制翻转的变种题。
进阶难度
260. Single Number III (Medium)
SingleNumber的follow-up，需要认真思考如何运用位运算求解。
---
## Page 86
第11章妙用数据结构
内容提要
TS ++ 
双端队列
数组
哈希表
栈和队列
多重集合和映射
单调栈
前报和与积分图
优先队列
11.1 C++STL
在刷题时，我们几乎一定会用到各种数据结构来辅助我们解决问题，因此我们必须熟悉各种
数据结构的特点。C++STL提供的数据结构包括（实际底层细节可能因编译器而异）：
1.Sequence Containers：维持顺序的容器。
（a).vector：动态数组，是我们最常使用的数据结构之一，用于O(1）的随机读取。因为大
部分算法的时间复杂度都会大于O(n)，因此我们经常新建vector来存储各种数据或中
间变量。因为在尾部增删的复杂度是O(1)，我们也可以把它当作stack来用。
(b).list：双向链表，也可以当作 stack和 queue来使用。由于LeetCode 的题目多用Node来
表示链表，且链表不支持快速随机读取，因此我们很少用到这个数据结构。一个例外
是经典的LRU问题，我们需要利用链表的特性来解决，我们在后文会遇到这个问题。
(e).deque：双增队列，这是一个非常强大的数据结构，既支持O(1)随机读取，又支持O(1)
时间的头部增删和尾部增删，不过有一定的额外开销。
(d).array：固定大小的数组，一般在刷题时我们不使用。
(e).forward_list：单向链表，一般在刷题时我们不使用。
2.Container Adaptors：基于其它容器实现的数据结构。
（a).stack：后人先出（LIFO）的数据结构，默认基于deque实现。stack 常用于深度优先搜
索、一些字符中匹配问题以及单调栈问题。
（b).queue：先人先出（FIFO）的数据结构，默认基于deque实现。queue常用于广度优先
搜索。
(c)-priority_queue：最大值先出的数据结构，默认基于vector实现堆结构。它可以在O(nlogn)
的时间排序数组，O(logx)的时间插入任意值，O(1)的时间获得最大值，O(logn)的时
间删除最大值。priority_queue 常用于维护数据结构并快速获取最大或最小值。
3.Associative Containers：实现了排好序的数据结构。
（a).set：有序集合：元素不可重复，底层实现默认为红黑树，即一种特殊的二叉查找树
（BST）。它可以在O(nlogn）的时间排序数组，O(logn）的时间插人、删除、查找任
意值，O(logn)的时间获得最小或最大值。这里注意，set 和 priority_queue都可以用
于维护数据结构并快速获取最大最小值，但是它们的时间复杂度和功能略有区别，如
体使用哪个根据需求而定。
(b).multiset：支持重复元素的 set，
---
## Page 87
11.2数纽
82/143 -
（c).map：有序映射或有序表，在set的基础上加上映射关系，可以对每个元素key存一个
值value。
(d).multimap：支持重复元素的map。
4. Unordered Associative Containers：对每个Associative Containers实现了哈希版本。
（a).unordered_set：哈希集合，可以在O(1)的时间快速插入、查找、删除元素，常用于快
速的查询一个元素是否在这个容器内。
(b).unordered_multiset：支持重复元素的 unordered_set。
(c).unordered_map：哈希映射或哈希表，在unordered_set 的基础上加上映射关系，可以对
每一个元素key存一个值value。在某些情况下，如果key的范围已知且较小，我们也
可以用vector代替unordered_map，用位置表示key，用每个位置的值表示value。
(d).unordered_multimap：支持重复元素的 wnordered_map.
因为这并不是一本讲解C++原理的书，更多的STL细节请读者自行搜索。只有理解了这些
数据结构的原理和使用方法，才能够更加游刃有余地解决算法和数据结构问题。
11.2数组
448. Find All Numbers Disappeared in an Array (Easy)
题目描述
给定一个长度为n的数组，其中包含范围为1到n的整数，有些整数重复了多次，有些整数
没有出现，求1到n中没有出现过的整数。
输人输出样例
输入是一个一维整数数组，输出也是一个一维整数数组，表示输入数组内没出现过的数字。
Input: [4,3,2,7,8,2,3,1]
Output: [5,6]
题解
利用数组这种数据结构建立n个桶，把所有重复出现的位置进行标记，然后再遍历一遍数组，
即可找到没有出现过的数字。进一步地，我们可以直接对原数组进行标记：把重复出现的数字在
原数组出现的位置设为负数，最后仍然为正数的位置即为没有出现过的数。
vector findDisappearedumbers(vector& nums){
vector ans;
for (const int & nun: nums){
int pos = abs(num)
-1;
if (nums [pos]> 0) {
[sod]sumu- -[sod]sunu
for (int i = O; i  0){
ans.push_back(i + 1);
---
## Page 88
11.2数纽
83/143 -
return ans;
48.Rotate Image (Medium)
题目描述
给定一个nXn的矩阵，求它顺时针旋转90度的结果，且必须在原矩阵上修改（in-place）。
怎样能够尽量不创建额外储存空间呢？
输人输出样例
输入和输出都是一个二维整数矩阵。
Input:
[[1,2,3] ,
[4,5,6],
[7,8, 9]]
Output :
[[7,4,1] ,
[8,5,2],
[9,6,3]]
题解
每次只考虑四个间隔90度的位置，可以进行0（1）额外空间的旋转。
图11.1：题目48-O(1)空间旋转样例，相同额色代表四个互相交换的位置
void rotate(vector>& matrix){
int temp - 0, n = matrix.size()-1;
for (int i = 0; i >& matrix, int target) {
int m = matrix.size();
if (m == 0) {
return false;
int n = matrix[0] .size();
int i = 0,  = n - 1;
vhile (i = 0) {
if (matrix[][j]
== target){
return true;
}else if (matrix[i][j]> target) {
--j;
} else {
++i;
return false;
F
769.Max Chunks To Make Sorted (Medium)
题目描述
给定一个含有0到n整数的数组，每个整数只出现一次，求这个数组最多可以分割成多少个
子数组，使得对每个子数组进行增序排序后，原数组也是增序的。
---
## Page 90
11.3我和队列
85/143 -
输人输出样例
输入一个一维整数数组，输出一个整数，表示最多的分割数。
Input: [1,0,2,3,4]
Output: 4
在这个样例中，最多分割是[1,0],[2],[3],[4]。
题解
从左往右遍历，同时记录当前的最大值，每当当前最大值等于数组位置时，我们可以多一次
分割。
为什么可以通过这个算法解决问题呢？如果当前最大值大于数组位置，则说明右边一定有小
于数组位置的数字，需要把它也加入待排序的子数组；又因为数组只包含不重复的0到n，所以
当前最大值一定不会小于数组位置。所以每当当前最大值等于数组位置时，假设为P，我们可以
成功完成一次分割，并且其与上一次分割位置q之间的值一定是q+1到p的所有数字。
int maxChunksToSorted(vector& arr) {
int chunks = 0, cur_max = 0;
for (int i = 0; i < arr.size(); ++i) {
cur_max = max(cur_max, arr [i]);
if (cur_max == i) {
++chunks;
return chunks;
11.3栈和队列
232.Implement Queue using Stacks (Easy)
题目描述
尝试使用栈（stack）来实现队列（queue）。
输人输出样例
以下是数据结构的调用样例。
MyQueue queue = neu MyQueue() ;
queue.push(1);
queue .push (2);
queue.peek(); // returns 1
queue -pop() ;