### Performance Metrics
- **False Positive Rate (FPR)**: 
  - 0.061 (0.064)
  - 0.061 (0.088)
  - 0.031 (0.057)
  - 0.017 (0.035)

- **False Negative Rate (FNR)**:
  - 0.140 (0.118)
  - 0.026 (0.038)
  - 0.017 (0.044)
  - 0.015 (0.034)

### Adversary Scenarios
1. The adversary is using the terminal while the user is walking nearby.
2. The adversary is using the terminal while the user is writing nearby.
3. Mean (and standard deviation) FNR for all subjects, excluding Subject 1.

### Quickness
When the user changes (i.e., when the current user is different from the logged-in user), we aim to identify this change immediately to prevent any accidental or intentional misuse of the logged-in user’s account. We define quickness as how soon we can identify a changed user, which can be measured in time or windows, where a window represents a fixed number of interactions.

- **Metrics**:
  - **Duration of Attack Success**: This metric evaluates how quickly ZEBRA detects an adversary. A smaller duration is better as it provides a smaller attack window.
  - **Duration of Inappropriate Lockout**: This metric evaluates how often ZEBRA will lock out an authorized user due to misclassification. Extended periods without inappropriate lockouts are desirable to improve usability.

### Figure 8: Authorized User Recognition
Figure 8 shows the fraction of users recognized as authorized by ZEBRA at time \( t \) for grace periods (g) of 1 and 2 windows. This figure illustrates the first instance when ZEBRA misclassifies the user as an adversary and takes action according to the system/user policy, such as locking the terminal or logging out the user.

- **Example**: At 50 seconds, 95% of users were still recognized as authorized, meaning 5% were misclassified and may need to re-authenticate.
- **Grace Periods**:
  - For a grace period of 1 window, ZEBRA correctly recognized 85% of users throughout their session.
  - For a grace period of 2 windows, ZEBRA recognized 90% of users correctly.

### Figure 9: Adversary Recognition
Figure 9 shows the fraction of adversaries recognized as authorized by ZEBRA at time \( t \) for grace periods (g) of 1 and 2. This graph indicates how quickly ZEBRA can recognize an adversary and terminate their access to the logged-in user’s account.

- **Example**: At \( t = 0 \), all adversaries have access to the terminal. Within 5 seconds, only 40% of adversaries have access, indicating that ZEBRA identified 60% of adversaries as unauthorized within 5 seconds. By \( t = 11 \) seconds, ZEBRA identified all adversaries.

### Discussion
ZEBRA allows a small attack window before it can identify an unauthorized user. This window exists because ZEBRA identifies unauthorized users based on their inputs and needs enough inputs to make a decision with high probability. This attack window is common in passive continuous authentication schemes that use user inputs for authentication, such as keystroke and mouse biometrics.

- **Mitigation**: The effects of this attack window could be reduced with operating system (OS) support, such as buffering and rolling back actions if inputs fail to authenticate the user. Without ZEBRA, an adversary has unrestricted access until caught; with ZEBRA, they have unrestricted access for a short duration.

### Multi-User Input
Sometimes, two users may give input to a terminal, such as two users working together or a clinician asking for IT help. If the users give input one at a time, ZEBRA can be configured to authenticate both. However, if they give input simultaneously, ZEBRA cannot verify either user, and the user might temporarily disable ZEBRA to allow access to both.

### Deauthentication Response
ZEBRA is a method for continuous authentication, designed to automate deauthentication when a new person uses a terminal with another user logged in. The response to such situations is a matter of policy. Once ZEBRA determines that the terminal is being used by someone other than the logged-in user, the policy might dictate locking the screen or logging out the current user.

- **Graduated Response**: ZEBRA can output a probability indicating its confidence that the user input is from the logged-in user. As the probability drops, the screen may dim, darken, lock, or log out, offering the user opportunities to restore confidence in their authenticity.

### Application to Initial Authentication
ZEBRA complements initial authentication methods like passwords, biometrics, or hardware tokens. If the ZEBRA bracelet can be strongly tied to a specific user, such as through wrist biometrics, it could be used for initial authentication. Tasks such as typing displayed text, drawing a circle, or scrolling through a window can generate enough inputs for authentication.

### Automated Attacks
Experiment 3 explored the extent to which an adversary could defeat ZEBRA by mimicking the wearer of the bracelet. Results suggest it is difficult to use an open terminal while mimicking an individual. Sophisticated attacks, such as using a video camera and special hardware, are possible but more complex than necessary to beat passwords today.

### Extension
ZEBRA can be extended to mobile devices, though they present different challenges, such as less wrist movement and the need for energy efficiency. Mobile devices also offer opportunities, such as built-in motion sensors. ZEBRA could also be applied to other devices like TV remotes, game controllers, and medical devices, improving usability and security.

### Conclusion
Zero-Effort Bilateral Recurring Authentication (ZEBRA) is a novel mechanism for continuous authentication using a simple bracelet. It provides smart deauthentication in dense, dynamic workspaces. Our evaluation shows that ZEBRA can achieve high accuracy, correctly identifying 90% of users and locking out adversaries in less than 50 seconds. For stronger security, ZEBRA can lock out adversaries in less than 11 seconds with a small penalty in usability. ZEBRA complements nearly any initial authentication method and can drive a range of automatic deauthentication policies.