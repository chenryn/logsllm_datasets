the sequence space, so adding and removing shim packets requires
bumping and unbumping of sequence and acknowledgement num-
bers; for UDP it requires padding the datagrams with the respec-
tive shims.3 The request shim occupies 24 bytes and begins with a
preamble of 8 bytes containing a magic number (4 bytes), the mes-
sage length (2 bytes), a message type indicator (1 byte), and a shim
protocol version number (1 byte), followed by the original ﬂow’s
endpoint four-tuple (2 · 4 bytes plus 2 · 2 bytes), the VLAN ID of
the sending/receiving inmate (2 bytes) and a nonce port (2 bytes)
on which the gateway will expect a possible subsequent outbound
connection from the containment server, in case the latter needs to
rewrite the ﬂow continuously. The response shim can vary in length
and requires at least 56 bytes, consisting of a similar preamble (8
bytes), the resulting endpoint four-tuple (12 bytes), the contain-
ment verdict (FORWARD, LIMIT, DROP, REDIRECT, REFLECT,
or REWRITE as per Figure 2, possibly in combination when feasi-
ble) expressed as a numeric opcode (4 bytes), a name tag for the
resulting containment policy (32 bytes), and an optional annota-
tion string to clarify the context in which the containment server
decided the containment verdict.
We show an example of this containment procedure in Figure 5.
An inmate initiates the TCP handshake for an upcoming HTTP re-
quest (), which the gateway redirects to the containment server’s
ﬁxed address and port, synthesizing a full TCP handshake. Upon
completion, the gateway injects into the TCP stream the contain-
ment request shim (). The containment server in turn sends a con-
tainment response shim () including the containment verdict for
the ﬂow, in this case a REWRITE. To serve as a transparent proxy
rewriting the ﬂow content, it also establishes a second TCP con-
nection to the target via the gateway and the nonce port received
as part of the containment request shim. The gateway forwards
this TCP SYN to the target and relays the handshake between tar-
get and inmate (). The inmate completes its connection establish-
ment and sends the HTTP request, which the gateway relays on to
the containment server as part of the same connection that it used
to exchange containment information, bumping the sequence num-
3For large UDP datagrams, this can require fragmentation.
VLAN IDMagic numberLengthTypeVers.Resp. IPOrig. PortResp. PortOrig. IPNonce Port02468024816Containment VerdictMagic numberLengthTypeVers.Resp. IPOrig. PortResp. PortOrig. IP0246802481656Policy NameTextual Annotation402Figure 5: TCP packet ﬂow through gateway and containment server in a REWRITE containment. See § 5.4 for details.
ber accordingly (). The containment server rewrites the request
as needed (here changing the requested resource to another one)
and forwards it on to the target, via the gateway (). The target’s
response travels in the opposite direction and arrives at the contain-
ment server, which again rewrites it (here to create the illusion of
a non-existing resource) and relays it back to the inmate (). (For
brevity, we do not show the subsequent connection tear-downs in
the ﬁgure.)
Policy structure. We codify containment policies in Python
classes, which the containment server instantiates by keying on
VLAN ID ranges and applies on a per-ﬂow basis. We base endpoint
control upon the ﬂow’s four-tuple, and content control depends on
the actual data sent in a given ﬂow. Object-oriented implementa-
tion reuse and specialization lends itself well to the establishment
of a hierarchy of containment policies. From a base class imple-
menting a default-deny policy we derive classes for each endpoint
control verdict, and from these specialize further, for example to
a base class for spambots that reﬂects all outbound SMTP trafﬁc.
The containment server simply takes the name of the class imple-
menting the applicable containment policy into the response shim
(recall Figure 4(b)) in order to convey it to the gateway.
Conﬁguration. The codiﬁed containment policies are customiz-
able through a conﬁguration ﬁle. This ﬁle serves four purposes. It
speciﬁes: (i) the initial assignment of a policy to a given inmate’s
trafﬁc, (ii) the individual or set of malware binaries with which
we would like to infect a given inmate over the course of its life-
cycles,4 (iii) activity triggers (e.g., revert and reinfect the inmate
once the containment server has observed no outbound activity for
4As indicated earlier, we typically specify precisely which sample
to infect an inmate with. However, GQ equally supports traditional
TimeSYN-ACKACKREQ SHIM10.0.0.23:1234192.150.187.12:80VLAN 12, Nonce port 42RSP SHIM10.0.0.23:1234192.150.187.12:80REWRITE, Policy ID, AnnotationsACKSYN10.0.0.23:1234192.150.187.12:80SYN10.0.0.23:123410.3.0.1:6666GET bot.exe HTTP/1.1SYN-ACK10.0.0.23:1234192.150.187.12:80GET bot.exe HTTP/1.1SEQ += |REQ SHIM|10.0.0.23:123410.3.0.1:6666SYN10.4.0.1:4210.3.0.1:2345SYN10.0.0.23:1234192.150.187.12:80SYN-ACKACK10.4.0.1:4210.3.0.1:2345GET cleanup.exe HTTP/1.1SEQ -= |RSP SHIM|10.0.0.23:1234HTTP/1.1 200 OKSEQ += |REQ SHIM|10.4.0.1:4210.3.0.1:234510.0.0.23:123410.3.0.1:6666HTTP/1.1 404 NOT FOUND10.0.0.23:1234192.150.187.12:80HTTP/1.1 404 NOT FOUNDSEQ -= |RSP SHIM|403[VLAN 16-17]
Decider = Rustock
Infection = rustock.100921.*.exe
[VLAN 18-19]
Decider = Grum
Infection = grum.100818.*.exe
[VLAN 16-19]
Trigger = *:25/tcp / 30min  revert
[Autoinfect]
Address = 10.9.8.7
Port = 6543
[BannerSmtpSink]
Address = 10.3.1.4
Port = 2526
Figure 6: Example of a containment server conﬁguration ﬁle:
GQ will infect the inmates on VLAN IDs 16 and 17 iteratively
with binaries from the rustock.100921.*.exe batch, us-
ing the “Rustock” containment policy.
It will apply similar
policies to inmates with VLAN IDs 18 and 19, for Grum. On
all four VLAN IDs a lifecycle trigger reverts inmates to a clean
state whenever the number of ﬂows to TCP port 25 in 30 min-
utes hits zero. The last two sections specify the location in the
subfarm of an auto-infection server and of an SMTP sink, re-
spectively.
30 minutes) and (iv) IP addresses and port numbers of infrastruc-
ture services in a subfarm (e.g., where to ﬁnd a particular SMTP
sink or HTTP proxy). Figure 6 shows a sample conﬁguration snip-
pet.
6.3 Inmate controller & sinks
We structure the inmate controller as a simple message receiver
that interprets the life-cycle control instructions coming in from the
containment servers. We use a simple text-based message format to
convey the instructions. At startup, the controller scans the VMMs
deployed on the management network to assemble an inventory of
inmates and their VLAN IDs. We implement the controller in 470
lines of Python. The support scripts for managing inmate VMs and
raw iron machines abstract concrete virtualization platforms (such
as VMware’s ESX control scripts), in 2,000 lines of script code.
We likewise implement GQ’s sink servers in Python. Our simplest
catch-all server accepts arbitrary input and requires a mere 100
lines of code, while our most complex sink constitutes a ﬁdelity-
adjustable SMTP server that can grab greeting banners from the
actual target and randomly drop a conﬁgurable fraction of connec-
tions. It needs 800 lines, using the same pre-forked multithreaded
back-end as the containment server.
6.4 Raw iron management
Researchers have long known of the use of VM-detecting anti-
forensics capabilities in malware toolkits [8]. Using a variety of
techniques, the malware attempts to identify virtualized execution,
which it perceives as a tell-tale sign of attempted forensic analy-
sis. Rather than attempt to develop speciﬁc countermeasures (such
as renaming interfaces or hiding other VM artifacts), GQ bypasses
this problem by providing a group of identically conﬁgured small
form-factor x86 systems running on a network-controlled power
honeypot constellations in which dynamic circumstances (such as
a web drive-by) determine the nature of the infection.
sequencer to enable remote, OS-independent reboots. Like our
virtualized inmates, each raw iron system uses its own exclusive
VLAN. From the gateway’s viewpoint, the only difference in the
inmate hosting platform is the presence of an additional DHCP ser-
vice and a separate reimaging process, executed by a dedicated Raw
Iron Controller.
The raw iron systems’ boot conﬁguration alternates between
booting over the network (leading to a subsequent OS image trans-
fer and installation) and booting from local disk when network
booting fails (leading to normal inmate execution). The Raw Iron
Controller has a network interface on a VLAN trunk which includes
all raw iron VLAN IDs. The controller runs a separate Click con-
ﬁguration which creates a virtual network interface that multiplexes
and demultiplexes trafﬁc across the VLAN trunk, enabling unmod-
iﬁed Linux servers, including DHCP, TFTP, and NFS, to access the
raw iron VLANs transparently.
To reimage a system, we conﬁgure the controller’s DHCP server
to send PXE boot information in reply to DHCP requests from the
inmate. The power sequencer then reboots the inmate and the sub-
sequent network boot installs a small Linux boot image (we use
Trinity Rescue Kit [14]). This image, once booted, downloads
a compressed Windows image and writes it to disk using NTFS-
aware imaging tools. Next, the controller disables network-booting
in the DHCP server and again power-cycles the raw iron inmate.
The subsequent reboot yields a local booting of the locally installed
OS image. This process takes around 6 minutes per reimaging cy-
cle, which we ﬁnd sufﬁciently fast for hosting bots or other mal-
code. An alternate version restores the image from a hidden second
Linux partition on the system’s main disk. This version is slightly
slower (around 10 minutes) but supports efﬁcient reimaging of all
raw-iron systems simultaneously. We use a similar mechanism to
capture disk images from a suitably conﬁgured OS image.
6.5 Reporting
We implemented the reporting component using Bro [24]. We
developed an analyzer for the shimming protocol to keep track of
all containment activity on the inmate network, and track speciﬁc
additional classes of trafﬁc as needed (for example, we leverage
Bro’s SMTP analyzer to track attempted and succeeding message
delivery for our spambots). Bro’s log-rotation functionality then
initiates activity reports on an hourly and daily basis. The reports
break down activity by subfarm, inmate, and containment deci-
sion, allowing us to verify that the gateway enforces these deci-
sions as expected (for example, an unusual number of FORWARD
verdicts might indicate a bug in the policy, and absence of any
C&C REWRITEs would indicate lack of botnet activity). We also
pull in external information to help us verify containment (for ex-
ample, we check all global IP addresses currently used by inmates
against relevant IP blacklists). Figure 7 shows part of a report. The
reporting setup extracts all of the per-inmate textual information
from network activity.
6.6 Auto-infection & batch processing
Automating the infection (and re-infection, after a revert to clean
state) of inmates is a key ingredient for saving us time operating
GQ. We have implemented an auto-infection routine as follows.
We conﬁgured auto-infection inmate master images to run a custom
infection script at ﬁrst boot (subsequent reboots should not trigger
reinfection, as some malware intentionally triggers reboots itself).
This script then contacts an HTTP server at a preconﬁgured address
and port, requests the malware sample, and executes it, thus com-
pleting the infection. Note that we can realize the HTTP server as
a REWRITE containment, simplifying the implementation substan-
404Inmate Activity
===============
Active subfarms: Botfarm, Clickbots
Subfarm ’Botfarm’ [Containment server VLAN 11]
------------------------------------------------------
Grum [xxx.yyy.0.170/10.3.9.241, VLAN 18]
----------------------------------------------------
FORWARD
- C&C port
target
50.8.207.91.SteepHost.Net
#flows
682
port
http
REFLECT
- full SMTP containment
target
*.*.*.*
port
smtp
#flows
144997
REWRITE
- autoinfection 6f007d640b3d5786a84dedf026c1507c
target
10.9.8.7
port
6543
#flows
6
SMTP sessions
SMTP DATA transfers
93340
93112
Rustock [xxx.yyy.0.164/10.3.9.247, VLAN 7]
----------------------------------------------------
FORWARD
- C&C port
target
*.*.*.*
port
https
#flows
287
REFLECT
- simple SMTP containment
REWRITE
- C&C filtering
target
*.*.*.*
port
smtp
#flows
280620
target
*.*.*.*
port
http
#flows
788
- autoinfection 0740eb0e408ea0b6cfa95981273f89bb
target
10.9.8.7
port
6543
#flows
21
SMTP sessions
SMTP DATA transfers
182653
284765
Figure 7: Section of actual report generated by the monitor-
ing setup, for the “Botfarm” subfarm, for inmates contained
using the “Grum” and “Rustock” policies, respectively. The
REWRITEs show that the containment server employs auto-
infection (§ 6.6), along with the MD5 hashes of the actual exe-
cutables. The number of SMTP ﬂows REFLECTed differs from
the total number of SMTP sessions because we conﬁgured the
SMTP sink to drop connections probabilistically. (Global in-
mate IP addresses anonymized.)
tially: the containment server observes the attempted HTTP con-
nection anyway, and can thus proceed to impersonate the simple
HTTP server needed to serve the infection. We implement this as
a separate containment class that serves as a base class for all poli-
cies that operate using auto-infection. Again, VLAN IDs drive the
selection of a malware sample, as the conﬁguration in Figure 6 il-
lustrates. Processing batches of malware samples follows as a sim-
ple generalization: instead of serving the same sample repeatedly,
we maintain the batch as a list of ﬁles and serve them sequentially.
6.7 External network address space
In practice we operate GQ using a set of ﬁve /24 networks. We
use one network only to make externally available our experiments’
control infrastructure (at least each subfarm’s containment servers,
potentially also sink servers and other machinery), leaving four net-
works for our inmate population. The size of these allocations
forms an upper bound on the number of inmates we can accom-
modate at any given time, but so far has proved sufﬁcient: we ex-
perience no blacklisting of our inmates’ global IP addresses, and
thus no need to move inmates around in our address range to pre-
serve their functionality. This general absence (with rare excep-