### Table 1: Execution Times for AutoRationalPPE on Various PPE Circuit Testability Problems

| Time (s) |
|----------|
| 50.22    |
| 4.62     |
| 6.87     |
| 322.23   |
| 20.56    |
| 5.02     |
| 2.15     |
| 3.69     |
| 3.60     |
| 3.16     |
| 3.21     |
| 25.08    |
| 36.38    |
| 2.05     |
| 2.30     |
| 2.08     |
| 3.20     |
| 5.29     |
| 95.50    |
| 10.38    |
| 2.01     |
| 5.12     |
| 13.96    |
| 3.78     |
| 0.03     |
| 1.89     |
| 2.07     |
| 1.93     |
| 2.07     |
| 2.11     |
| 3.55     |

**Table 1:** The execution times (in seconds) of AutoRationalPPE on various PPE circuit testability problems. Here, \( \ell \) represents the number of delegation levels in a HIBE scheme, \( |H(id)| \) denotes the length of the hash of identity \( id \), \( B(H(id)) \) denotes the number of blocks in the hash of identity \( id \), \( B(msg) \) denotes the number of blocks in message \( msg \), \( |C(x)| \) denotes the length of encoding of input \( x \), \( |H(x)| \) denotes the length of encoding of input \( x \), and \( a \) denotes the number of attributes. The execution time is mentioned in seconds. "N/A" indicates that AutoCircuitPPE does not accept input with rational polynomials.

### Simplification of Rule 3a and 3b
In AutoCircuitPPE, we simplified the check for whether the constant \( d \) is relatively prime to \( p-1 \) in Rules 3a and 3b by checking if \( d \) is a small prime (\( d \in \{1, 3, 5, 7, 11\} \)). This simplification is based on the observation that real-world schemes do not typically use high-degree polynomials. Additionally, if a PPE is trivially true or false, we replace the PPE with the corresponding boolean value. For example, if the denominator polynomial \( h_k \) is a constant in Rule 3a, the circuit \( C \) is trivially true.

### Evaluation and Results
We evaluated our tool on various IBE, VRF, and signature schemes, summarizing the results for 35 schemes in Table 1. For IBE schemes, we computed a PPE circuit to test the well-formedness of a secret key for an identity given the master public key and the identity. For VRF schemes, we constructed a PPE circuit to test the validity of the VRF output and proof of pseudorandomness given the verification key and VRF input. For signature schemes, we generated a PPE circuit to act as a verification procedure that checks the well-formedness of a signature given the message and verification key. Each scheme was encoded into a PPE problem instance similar to [46] (see [46], Section 5.2 for more details). As in [46], we encoded the VRF bit string input of [35, 48, 50] schemes as a vector of \( \mathbb{Z}_p \) variables. We observed that the size of the polynomials in these schemes grows exponentially with respect to the length of the input encoding. Therefore, we tested these schemes only with short-length encodings.

### Flexibility and Performance
We demonstrated the flexibility of our tool by testing it on problem instances in all Type I, II, and III pairing settings. Our rules supersede those proposed by AutoCircuitPPE, ensuring that AutoRationalPPE outputs a PPE testing circuit for all problem instances where AutoCircuitPPE does so. Additionally, AutoRationalPPE outputs PPE testing circuits for many schemes that include rational polynomials, such as Boneh-Boyen IBE [25] and signatures [27], Gentry IBE [37], Le-Gabillon multisignatures [49], Dodis-Yampolskiy VRF [36], and other custom test cases. Despite the QSearch algorithm having exponential time complexity, it runs efficiently on many real-world schemes. After running the QSearch algorithm (Section 3.3), we optimized the output circuit to remove redundant operations. For example, if the same sub-circuit appears in two different places, we compute it only once. These optimizations are adapted from the AutoCircuitPPE tool. Table 1 displays the number of PPE gates and Boolean gates post-optimization.

### Custom Examples
We also tested our tool on several custom examples containing rational polynomials, some of which had more than 100 polynomials. In custom test case 6 (inspired by the DDHI problem), the trusted set contains the polynomial \( F_1 = a \) in the group \( G_1 \), and the untrusted set contains polynomials \( \{F_2 = a^2, \ldots, F_{101} = 1/a\} \) in the group \( G_1 \). The problem can be tested using the PPEs \( F_2 = e(F_1, F_1) \), \( e(F_3, g) = e(F_2, F_1) \), \(\ldots\), \( e(F_{101}, F_1) = e(g, g) \), \( e(F_{100}, F_{99}) = e(F_{101}, g) \). Additional logic is used to handle the case where \( a = 0 \) and the denominator of the polynomials is invalid. More details are provided in Appendix D.

### Open Problems
This work addresses a major open problem from [47] by solving the PPE circuit testability problem for schemes with rational polynomials. We now highlight a few exciting, open problems:

1. **Relaxed Verification**: All work on PPE automation to date, including this work, focuses on perfect verification, where each element is checked individually. Some applications, such as signatures, could benefit from a relaxed (and possibly more efficient) verification procedure where elements need only have a proper relationship to each other. Exploring this concept of sufficient verification is a useful and exciting future direction. See Appendix E for more details.
   
2. **Composite Order Groups**: Current PPE automation, including this work, focuses only on prime order groups, which are often preferred due to bandwidth and runtime differences. However, composite order settings, though more unwieldy, offer unique properties. Handling the constraints of different subgroups while properly managing identity and undefined elements in our framework is non-trivial.

3. **Optimal Solution Search**: The current implementation of our tool, like AutoCircuitPPE [47], outputs the first solution it finds rather than caching multiple solutions and selecting the most optimal one. Since PPE gates are the most costly, optimizing for the number of PPE gates is desirable. For example, our tool's solution for the Dodis VRF [35] uses 28 PPEs, while AutoCircuitPPE found a solution with only 25 PPEs. A "deep search" option, where the tool explores all promising branches of the search space and outputs the solution with the smallest number of PPE gates, could be considered. The challenge is to perform a deep search without incurring an exponential increase in running time.

### Acknowledgments
Susan Hohenberger was supported by NSF CNS-1908181, the Office of Naval Research N00014-19-1-2294, and a Packard Foundation Subaward via UT Austin. Satyanarayana Vusirikala was supported by a UT Austin Provost Fellowship, NSF CNS-1908611, and the Packard Foundation. The authors thank Brent Waters for helpful discussions and the ACM CCS anonymous reviewers for presentation feedback.

### References
[References are listed as in the original text.]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.