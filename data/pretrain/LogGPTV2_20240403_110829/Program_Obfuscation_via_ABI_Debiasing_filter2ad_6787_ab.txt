✓
✓
✓
✓
Techniques adopted
VTS
VTG
✓
✓
✓
OA
✓
✓
✓
✓
CC
✓
✓
✓
✓
(based on layout and mandatory fields), then a static analysis ap-
proach is employed to scan the read-only sections of the binary and
excavate VTables. Because the signatures are robust and guaran-
teed by the compiler, they are relatively easy to identify following
a set of heuristics. First, VTables contain sensitive data in the form
of function pointers, and so must not be altered by program code
during runtime. As such, they are always allocated in read-only
sections of the binary. Second, the layout of a VTable is fixed. It
always begins with an OTT, followed by an RTTI value, followed
by some number of function pointers, and then any number of
sub-VTables, which follow the same layout. Third, these values
all have patterns and restrictions on what they can be. The OTT
must be zero for the primary VTable, and must decrease in all the
following sub-VTables. The RTTI field must be a valid pointer or 0.
Worth noting is that it is not necessary to check the information
the RTTI entry points to - in fact this can be detrimental - as some
programs simply do not have this information available for use.
The function pointers must all point to the beginning of a function
or thunk in the executable sections of the program, and so cannot
point to data. In some edge cases (caused by pure virtual functions
and abstract classes), the function pointers may point to an entry
corresponding to __purevirtual exception handling mechanism
provided by the C++ runtime. Most VTable scanning techniques
account for these edge cases in their heuristics.
From the scanned and identified VTables, VTable grouping can
then identify complete-object VTables that uniquely represent a
polymorphic class. According to the Itanium ABI, the primary
VTable of the derived class is followed by the secondary VTables of
its base classes (non-virtual bases before virtual bases). vfGuard [23]
and DeClassifier [7] use this information to group the VTables as-
sociated to a class into the complete object VTable. This is done by
first sorting VTables in increasing order of VTable addresses, then
grouping a primary VTable (with zero offset-to-top value) with
succeeding zero or more secondary VTables (with a negative OTT
value). VTable grouping is useful to identify the distinct number of
classes present in the binary. This also helps to build a clear and
concise class hierarchy graph where each node is a complete object
VTable.
VTable Size. The ABI mandates that a derived class VTable con-
tains all entries of the base class VTable (with appropriate replace-
ments in case functions are overridden) along with additional en-
tries introduced by the derived class. Therefore, the size of a derived
class VTable is at least equal to the sum of the sizes of its base
class(es) VTables.
148ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
David Demicco, Rukayat Erinfolami, and Aravind Prakash
Itanium ABI [2] mandated the layout and ordering of VTables, or-
dering of function pointers in the VTables, sizes of VTables, etc. A
conformant compiler was forced to adhere to the ABI and therefore
incorporates the ABI bias that aids in reverse engineering. Even
after it was changed, this bias lingers in compilers because it was
fully backwards compatible. In the case of C++ programs, using the
VTable as a starting point, a reverse engineer can: (1) reconstruct
polymorphic classes, (2) establish polymorphic member function
association by examining the function pointers in the VTable, and
(3) identify inheritance relationship by either examining the con-
struction/destruction order etc.
Bias sensitivity. Some biases are sensitive to change, i.e., they play
a significant role in ensuring correct functioning, backward com-
patibility, and interoperability of binaries. For example, encrypting
the virtual function pointers in VTables will cause interoperability
issues. That is, classes in binaries that encrypt function pointers
can not inherit from classes in binaries that do not encrypt function
pointers, and vice versa.
However, some biases are insensitive to change, and eliminating
or disrupting them does not cause errors. For example, the Itanium
C++ ABI used to require that the primary and secondary VTables
of a complete-object VTable to be laid out one after the other in
successive order of inheritance. Because the derived object and
base class sub-objects contain pointers to their respective VTables,
collocation of primary and secondary VTables has no benefit other
than implementation convenience. Eliminating or disrupting such
insensitive biases can substantially hinder reverse engineering while
ensuring no side-effects on program execution. In this work, we iden-
tify and target two specific forms of insensitive biases – VTable
bias and Function Pointer bias – in the ABI that aid in reverse
engineering.
Lingering biases. The Itanium ABI [2] was modified to remove
some of the requirements that lead to the Biases we identify in the
following sections. This change has not been reflected in the LLVM
or GCC compilers default compilation options. Instead both of these
continue to follow the outdated requirements, because the new ABI
specifications does not require a change, and instead simply adds a
paragraph removing a guaranty [2] §2.5.2, last para. This results
in the bias remaining as a security problem, even after it could be
removed in an ABI compliant fashion.
Virtual Table Bias (VTB). The VTable bias is an insensitive bias
that manifests due to two specific ABI mandates. First, the ABI re-
quires that primary and secondary VTables be laid out in order of
inheritance. That is, if class A inherits from classes B, C and D in
that order, then:
addrV T able(A) = addrV T able(B−in−A) < addrV T able(C−in−A) <
addrV T able(D−in−A) Second, the ABI previously required that the
primary VTable in memory be immediately followed by the sec-
ondary VTable(s) in the order of inheritance, and modern compilers
stick to this in default compilation.
A reverse engineer (see vfGuard [23]) takes advantage of these
requirements by (1) extracting all the VTables in the memory using
a signature based approach comprising of the offset-to-top field,
RTTI field and function pointers, (2) examining the offset-to-top
Figure 2: Simple VTable layouts demonstrating their con-
tents and size.
For a clear example of how this works, consider the simplest
case shown in figure 2. The base class A has a total VTable size
of 24 bytes, containing the offset to top, RTTI, and the address
of function &A::F (F in A). However class B, derived from A, also
contains the address of the function &B::G (G in B) making its size
32 bytes. Should another class derive from B, it would also at least
contain B’s function pointers and A’s function pointer. Class C in
this case, does inherit from A, however it adds no function pointer
of its own, and so does not increase the size of the VTable, (this is
the case where the complete object VTable is equal in size to the
the base’s complete object VTable). Class D in Figure 3 has multiple
inheritance, and so has a sub-VTable as well as its primary VTable.
This sub-VTable makes the objects size 56 bytes, bigger than objects
of class A or B.
While the ABI does not specify that additional information can-
not be added to VTables, the implication is strong enough that
ROCK [18] and SmartDec [10] take advantage of VTable sizes to
assign direction of inheritance to related classes and to eliminate
impossible base classes respectively.
Constructor Analysis. The ABI specifies the object construction
process wherein base class sub-objects are recursively constructed
before constructing the derived object. It is a popular primitive
among past efforts (Table 1 column “CC") to infer inheritance order.
However, compilers are known to aggressively inline construc-
tors, and therefore constructor analysis is not a reliable source of
inheritance order.
3 ABI BIAS
Typical binary reverse-engineering work-flow emanates from re-
vealing factors that are discernible in the binary. For example, calls
to libc functions (e.g., strcpy) in a binary provide type information
regarding input variables to the function and therefore provide a
basis for further analysis (e.g., backward slicing). Similarly, in C++
reverse engineering, a complete-object VTable provides a clear and
unambiguous representation of a polymorphic class.
We define ABI Bias as an ABI property that results in unavoidable
revelation of forensically-relevant information by a binary due to
the very virtue of it adhering to an ABI. For example, until recently
149ABI Debiasing
ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
Figure 3: VTable layouts and contents before and after debiasing. The RTTI field is optional and contains a value 0 if the
program is compiled with the -fno-rtti flag.
field to identify primary VTables wherein offset-to-top == 0, and
finally (3) grouping all the subsequent secondary VTables wherein
offset-to-top (cid:44) 0.
Note that unlike VTable bias, offset-to-top being zero or non-zero
is a sensitive bias. Although offset-to-top does reveal information to
a reverse engineer, its integrity is essential for correct functioning
of the program, and therefore can not be changed.
Function-Pointer Bias (FPB). The function pointer bias is an in-
sensitive bias that manifests due to the ABI requirements on how
functions are laid out in the VTable. The ABI dictates the number of
function pointers in the VTable. Specifically, the number of function
pointer entries in a VTable is equal to the number of polymorphic
functions accessible by an object of the class to which the VTable
corresponds. This presents an inference point to a reverse engineer.
Past efforts (e.g., [10, 11]) have relied on the size primitive to infer
directionality of inheritance between classes. For example, given
two VTables for classes A and B, the ABI mandate guarantees that
B can only inherit from A if size of B’s VTable is larger than or
equal to the size of A’s VTable.
3.1 Debiasing
In this work, we aim to balance the playing field by eliminating
the lingering and insensitive VTB and FPB. We call this process
debiasing. We are guided by the following goals.
Goals.
• Program Obfuscation: Our primary goal is to debias program
binaries in order to hinder reverse engineering. Particularly,
we wish to eliminate VTable and function-pointer biases that
have proven crucial in C++ binary reverse engineering [12,
23, 25, 28].
• Zero false positives: Zero false positives is a necessary con-
dition for practical adoption of any solution. False posi-
tives arise when debiased binaries generate previously non-
existent faults. That is, our changes must ensure that the
process of eliminating bias does not interfere with the in-
tended use of the ABI or the program logic.
• Backward Compatibility and Interoperability: We wish for
our changes to be transparent to other binaries that interact
with the debiased binary. That is, binaries hardened using
our techniques must seamlessly inter-operate with other
binaries including binaries that are already deployed on a
system as long as they adhere to the same ABI.
• Near-Zero Performance Overhead: Our solution does not mod-
ify the program logic. As such, any overhead imposed by
our debiasing is a result of micro-architectural differences
that are outside our control. In any case, we aim to achieve
close-to-zero performance overhead in both binary size and
program speed.
Obfuscation and Debiasing. Broadly, debiasing is an obfuscation
technique that modifies a binary to make reverse engineering more
challenging. It differs from traditional obfuscation techniques in
two key ways. First, obfuscation primarily focuses on manipulating
code and in a binary to hide program logic, whereas debiasing is
not concerned with program logic, but rather the interfaces. Sec-
ond, obfuscators must obey the rules of ABI. Therefore, irrespective
of the amount or levels of obfuscation, ABI-centric reverse engi-
neering will always yield inference points that are a result of ABI
bias. Debiasing aims to identify the bias introduced by the ABI and
systematically eliminate them. These differences make debiasing a
class A {inta;virtualvoidvA1()=0;virtualvoidvA2(){}};class B{intb; virtual void vB1(){}virtual void vB2()=0};class C {intc;virtual void vC1(){}};class D: public A, B, C {intd; virtual void vD1(){}virtual void vD2(){}};+0     0+8     &RTTI(D)+16    pure_virt+24    &A::vA2+32    &D::vD1+40    &D::vD2+48    -16+56    &RTTI(D)+64    &B::vB1+72    pure_virt+80    -32+88    &RTTI(D)+96    &C::vC1+0     vptr(D, A-in-D)+8     a+16    vptr(B-in-D)+24    b+32    vptr(C-in-D)+40    c+48    dVTableof DObject D+0     0+8     &RTTI(D)+16    pure_virt+24    &A::vA2+32    &D::vD1+40    &D::vD2+0    -16+8   &RTTI(D)+16&B::vB1+24pure_virt+0    -32+8    &RTTI(D)+16    &C::vC1Vtableof B-in-D….….….Vtableof D, A-in-DVtableof C-in-D+0     0+8     &RTTI(D)+16    pure_virt+24    &A::vA2+32    &D::vD1+40    &D::vD2+48pure_virt+0    -16+8   &RTTI(D)+16&B::vB1+24pure_virt+32    pure_virt+40&F1+48    &F2+56    pure_virt+0    -32+8    &RTTI(D)+16    &C::vC1+24  pure_virt+32  &F3+40  pure_virtVtableof B-in-D….….….Vtableof C-in-DVtableof D, A-in-D….….….Before DebiasingAfter SplittingAfter Splitting + ExpandingObject Layout150ACSAC 21, December 06–10, 2021, Online, ACM, New York, NY USA
David Demicco, Rukayat Erinfolami, and Aravind Prakash
complementary and orthogonal technique to traditional obfusca-
tion approaches. Combining debiasing with traditional obfuscation
significantly increases reverse engineering challenges.
3.2 High-Level Approach
At a high level, our approach is comprised of two disjoint, orthogo-
nal phases. The VT Splitter phase is targeted at VT Bias and the VT
Expander phase is targeted at FP bias. An example of our approach
is presented in Figure 3. It contains a simple C++ inheritance struc-
ture where class D inherits from A, B and C. The object layout
for D where A-in-D sub-object shares the base with D and B-in-D
and C-in-D sub-objects are located at offsets base+16 and base+32
respectively. Notice how the complete object VTable for D contains
primary and secondary VTables that are collocated. There is no
logical basis to require collocation except for the ease of implemen-
tation.
VT Splitter. In the VT Splitter phase, a complete object VTable is
first split into primary and secondary sub-VTables, and these VTa-
bles are randomly distributed across the read only sections of the
binary. Because the vptrs in the object are the only legal reference
to the VTables, splitting and redistributing the VTables disrupts
reverse engineering. Particularly, VTable-grouping-based reverse
engineering approaches (e.g., vfGuard [23]) are disrupted while en-
suring correct functioning of the program including interoperability
and backward compatibility.
VTable grouping through object analysis: Because vptrs in the object
point to the respective secondary VTables, object analysis can be
applied to perform VTable grouping. However, it presents signif-
icant challenges. The vptrs are initialized in respective construc-
tors/destructors, and correct VTable grouping requires precise inter-
procedural static analysis, which can be hard. Moreover, construc-
tors are aggressively inlined by C++ compilers. So, distinguishing
between levels of inheritance can be hard. Specially in higher levels
of optimization, the compiler eliminates constructor calls that are
deemed trivial (e.g., default constructors). For example, the inlined
constructor sequences for example in Figure 3 and a case where
D inherits from A and B, and B inherits from X and C is indistin-
guishable. Whereas with collocated VTables, a reverse engineer
can clearly demarcate complete-object VTable boundaries. Finally,
some solutions [7] are known to rely on destructor analysis. But
destructor analysis is only reliable when destructors are virtual,
which may not be the case for all classes. Non virtual destructor
analysis is plagued by the same inlining and optimization problems
as constructor analysis.
VT Expander. This phase aims at disrupting FP bias where a
reverse engineer can rely on the size of a VTable (i.e., number of
function pointers in a VTable) in order to infer directionality of
inheritance. VT Expander adds additional unreachable function
pointer entries (i.e., dummy entries) into the VTable so as to ar-
tificially inflate the sizes of VTables. These function pointers are
added based on an expansion factor f that is designed to normalize