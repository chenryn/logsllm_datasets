# Communication Costs and Protocol Optimization

## Table 2: Communication per Party (Two Parties)
For the semi-honest protocol in [7], the cost is based on the use of the OT extension by Keller et al. [27]. This comparison is considered fair, as the sampling protocol is a major bottleneck and can be implemented using SilentOT. In our case, the underlying MPC engine for sampling also used the same OT extension.

| Scheme | κ | SH (GB) | ML (GB) |
|--------|---|---------|---------|
| [7]    | 1024 | 2.09    | 1020    |
| Ours   | 1024 | 4.34    | 68.8    |
| [7]    | 1536 | 6.24    | 4734    |
| Ours   | 1536 | 12.17   | 153.20  |
| [7]    | 2048 | 13.65   | 8100    |
| Ours   | 2048 | 25.23   | 281.91  |

## Per-Phase Cost for One Instance (Megabits)

| κ      | n | Sieving  | BP Test | Check  |
|--------|---|----------|---------|--------|
| 1024   | 2 | 0.36     | 0.004   | 46.14  |
| 1536   | 2 | 0.5      | 0.006   | 68.42  |
| 2048   | 2 | 0.68     | 0.008   | 93.4   |

## Expected Cost to Sample a Biprime (GBytes)

| κ      | E[Iter.] | E[Total] |
|--------|----------|----------|
| 1024   | 3607     | 68.8     |
| 1536   | 7251     | 153.2    |
| 2048   | 11832    | 281.91   |

## Table 4: Communication per Party (Malicious Case)
The GCD test is included in E[Total] as it is a one-time cost. The check step occurs σ times.

| κ      | n | Sieving  | BP Test | Check  |
|--------|---|----------|---------|--------|
| 1024   | 2 | 0.36     | 0.004   | 46.14  |
| 1536   | 2 | 0.5      | 0.006   | 68.42  |
| 2048   | 2 | 0.68     | 0.008   | 93.4   |

## Expected Cost to Sample a Biprime (GBytes)

| κ      | E[Iter.] | E[Total] |
|--------|----------|----------|
| 1024   | 3607     | 68.8     |
| 1536   | 7251     | 153.2    |
| 2048   | 11832    | 281.91   |

## Table 3: Communication per Party (Malicious Case, 16 Parties)
For [7], the cost of the semi-honest protocol is based on the use of the OT extension by Keller et al. [27].

| κ      | n | Sieving  | BP Test | Check  |
|--------|---|----------|---------|--------|
| 1024   | 2 | 0.36     | 0.004   | 46.14  |
| 1536   | 2 | 0.5      | 0.006   | 68.42  |
| 2048   | 2 | 0.68     | 0.008   | 93.4   |

## Per-Phase Cost for One Instance (Kilobits)

| κ      | n | Sieving  | BP Test | Check  |
|--------|---|----------|---------|--------|
| 1024   | 2 | 152.44   | 82.97   | 4.096  |
| 1536   | 2 | 118.10   | 6.144   | 13175  |
| 2048   | 2 | 9391     | 32      | 16784  |

## Expected Cost to Sample a Biprime (Megabytes)

We present the detailed per-phase cost for 2 and 16 parties, and for λ = {1024, 1536, 2048} in Table 4 for the malicious case, and in Table 5 for the semi-honest case.

## Reducing the Number of Input Calls in Generating Bounded Randomness
In the maBit protocol designed in [35], each random bit \( b \) produced in the main MPC engine producing randomness is later fed into other MPC engines by every party calling the Input command on a different sharing of \( b \). By plugging their method directly into our Rand2k protocol, generating \( nB \) shared bits with \( n \) parties across \( \ell \) engines will require \( nB \cdot n \) Input calls to each of the \( \ell \) 128-bit prime MPC engines.

We can reduce the number of input calls by a factor of approximately \( 128 - (\sigma + \log_2 m) \), where \( m \) is the batch size for generating maBits. The key insight is for parties to batch their bit shares instead of inputting them one by one. For example, if they want to batch 16 bits, they can compute \( \sum_{k=0}^{15} 2^k b_j \mod m_i \), where \( b_j \) is party \( P_j \)'s share of the \( k \)-th bit in the maBit protocol. We need to increase the random coefficients by 16 bits to ensure the security reduction. The proof of this optimization is straightforward, as it can be used as an oracle to solve the MSSP problem described in [35] by scaling the random coefficients. To fit everything in a 128-bit prime MPC engine, we pack 16 inputs together while maintaining a maBit batch of \( 2^{15} \) bits produced at once.

## Honest Majority Case with Active Security
Since our protocol works with any actively secure protocol where secret reconstruction is linear, we can instantiate it with the most efficient protocols for MPC for large field arithmetic [9]. The cost analysis of such an instantiation can be seen in Table 6.

## Table 5: Communication per Party (Semi-Honest Case)

| κ      | E[Iter.] | E[Total] |
|--------|----------|----------|
| 1024   | 3607     | 41.68    |
| 1536   | 7251     | 116.55   |
| 2048   | 11832    | 243.3    |

## Table 6: Communication per Party (Malicious Honest Majority Case, 3 Parties)

| κ      | Megabytes |
|--------|-----------|
| 1024   | 107.62    |
| 1536   | 227.41    |
| 2048   | 408.57    |

## Acknowledgements
We thank Ivan Damgård and Muthu Venkitasubramaniam for their helpful discussions and the anonymous reviewers for their comments and observations. This work has been supported in part by ERC Advanced Grant ERC-2015-AdG-IMPaCT, by the Defense Advanced Research Projects Agency (DARPA) under contract No. HR001120C0085, and by CyberSecurity Research Flanders with reference number VR20192203. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the ERC, DARPA, the U.S. Government, or Cyber Security Research Flanders. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright annotation therein.

## References
[1] Joy Algesheimer, Jan Camenisch, and Victor Shoup. 2002. Efficient Computation Modulo a Shared Secret with Application to the Generation of Shared Safe-Prime Products. In CRYPTO 2002 (LNCS, Vol. 2442), Moti Yung (Ed.). Springer, Heidelberg, Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea, 417–432. https://doi.org/10.1007/3-540-45708-9_27

[2] Toshinori Araki, Jun Furukawa, Yehuda Lindell, Ariel Nof, and Kazuma Ohara. 2016. High-Throughput Semi-Honest Secure Three-Party Computation with an Honest Majority. In ACM CCS 2016, Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi (Eds.). ACM Press, 805–817. https://doi.org/10.1145/2976749.2978331

[3] Carsten Baum, Daniele Cozzo, and Nigel P. Smart. 2019. Using TopGear in Overdrive: A More Efficient ZKPoK for SPDZ. In SAC 2019 (LNCS, Vol. 11959), Kenneth G. Paterson and Douglas Stebila (Eds.). Springer, Heidelberg, 274–302. https://doi.org/10.1007/978-3-030-38471-5_12

[4] Dan Boneh, Joseph Bonneau, Benedikt Bünz, and Ben Fisch. 2018. Verifiable Delay Functions. In CRYPTO 2018, Part I (LNCS, Vol. 10991), Hovav Shacham and Alexandra Boldyreva (Eds.). Springer, Heidelberg, 757–788. https://doi.org/10.1007/978-3-319-96884-1_25

[5] Dan Boneh and Matthew K. Franklin. 1997. Efficient Generation of Shared RSA Keys (Extended Abstract). In CRYPTO’97 (LNCS, Vol. 1294), Burton S. Kaliski Jr. (Ed.). Springer, Heidelberg, 425–439. https://doi.org/10.1007/BFb0052253

[6] Lennart Braun, Daniel Demmler, Thomas Schneider, and Oleksandr Tkachenko. 2020. MOTION - A Framework for Mixed-Protocol Multi-Party Computation. Cryptology ePrint Archive, Report 2020/1137. https://eprint.iacr.org/2020/1137

[7] Megan Chen, Ran Cohen, Jack Doerner, Yashvanth Kondi, Eysa Lee, Schuyler Rosefield, and abhi shelat. 2020. Multiparty Generation of an RSA Modulus. In CRYPTO 2020, Part III (LNCS, Vol. 12172), Daniele Micciancio and Thomas Ristenpart (Eds.). Springer, Heidelberg, 64–93. https://doi.org/10.1007/978-3-030-56877-1_3

[8] Megan Chen, Carmit Hazay, Yuval Ishai, Yuriy Kashnikov, Daniele Micciancio, Tarik Riviere, Abhi Shelat, Muthuramakrishnan Venkitasubramaniam, and Ruihan Wang. 2020. Diogenes: Lightweight Scalable RSA Modulus Generation with a Dishonest Majority. IACR Cryptol. ePrint Arch. 2020 (2020), 374.

[9] Koji Chida, Daniel Genkin, Koki Hamada, Dai Ikarashi, Ryo Kikuchi, Yehuda Lindell, and Ariel Nof. 2018. Fast Large-Scale Honest-Majority MPC for Malicious Adversaries. In CRYPTO 2018, Part III (LNCS, Vol. 10993), Hovav Shacham and Alexandra Boldyreva (Eds.). Springer, Heidelberg, 34–64. https://doi.org/10.1007/978-3-319-96878-0_2

[10] Anders P. K. Dalskov, Claudio Orlandi, Marcel Keller, Kris Shrishak, and Haya Shulman. 2020. Securing DNSSEC Keys via Threshold ECDSA from Generic MPC. In ESORICS 2020, Part II (LNCS, Vol. 12309), Liqun Chen, Ninghui Li, Kaitai Liang, and Steve A. Schneider (Eds.). Springer, Heidelberg, 654–673. https://doi.org/10.1007/978-3-030-59013-0_32

[11] Ivan Damgård, Marcel Keller, Enrique Larraia, Valerio Pastro, Peter Scholl, and Nigel P. Smart. 2013. Practical Covertly Secure MPC for Dishonest Majority - Or: Breaking the SPDZ Limits. In ESORICS 2013 (LNCS, Vol. 8134), Jason Crampton, Sushil Jajodia, and Keith Mayes (Eds.). Springer, Heidelberg, 1–18. https://doi.org/10.1007/978-3-642-40203-6_1