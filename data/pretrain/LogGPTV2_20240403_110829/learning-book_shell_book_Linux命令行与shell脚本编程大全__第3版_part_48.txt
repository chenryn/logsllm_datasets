while iteratlon: 2
Inside itezation number: 2
whlle iteratlon: 3
while iteratlon: 4
Inside iteration nunber: 3
InsiGe iteration number: 4
whlle iteratlon: 5
In.side itexation number :5
while iteratlon: 6
while iteratlon: 6
whlle iteratlon: 6
whlle iteratlon: 6
wh11e
iteratlon:
while iteratlon: 6
6
while iteratlon: 6
wh11e
iteratlon:
6
whlle iteratlon: 6
while iteratlon: 6
while iteratlon: 6
你得确保将脚本的输出重定向到了more命令，这样才能停止输出。在if-then的条件成立
之前，所有一切看起来都很正常，然后shell执行了continue命令。当shell执行continue命令时，
它跳过了while循环中余下的命令。不幸的是，被跳过的部分正是svar1计数变量增值的地方，
而这个变量又被用于while测试命令中。这意味着这个变量的值不会再变化了，从前面连续的输
出显示中你也可以看出来。
和break命令一样，continue命令也允许通过命令行参数指定要继续执行哪一级循环：
continue n
其中n定义了要继续的循环层级。下面是继续外部for循环的一个例子。
$ cat test22
#1/bin/bash
 continuing an outer loop
for (( a = 1 a  output,txt
f1
shell会将for命令的结果重定向到文件output.txt中，面不是显示在屏幕上。
考虑下面将for命令的输出重定向到文件的例子。
$ cat test23
#1/bin/bash
---
## Page 298
13.9实例
283
#redirecting the for output to a file
for [[ a = 1; a  cest23,txt
echo *The cormand ls flnished. *
The command La finished.
$-/teat23
The nunber
1s 1
The
nunber
The nunber
s2
nunber
α3
The nunber
The
:is 5
1.84
The
The nunber
nunber
:1s 7
1s6
The nunber
The nunber ia 9
1s8
shell创建了文件test23.txt并将for命令的输出重定向到这个文件。shel在for命令之后正常显
示了echo语句。
这种方法同样适用于将循环的结果管接给另一个命令。
$ cat test24
 piping a loop to another command
#1 /bin/ba.sh
for state in *North Dakota* Connecticut Illinoia Alabama Tennessee
do
echo *Satate is the next place to go*
echo *This conpletes our travels*
done l sort
Alabama la the next place to go
$./test24
Cornect.lcat le the next place to go
North Dakota la the sext place to go
I1linoia ia the next place to go
Tenneseee la the next place to go
Thls conpleten our travela
state值并没有在for命令列表中以特定次序列出。for命令的输出传给了sort命令，该命
令会改变for命令输出结果的顾序。运行这个脚本实际上说明了结果已经在脚本内部排好序了。
13.9实例
13
现在你已经看到了shell脚本中各种循环的使用方法，来看一些实际应用的例子吧。循环是对
系统数据进行选代的常用方法，无论是目录中的文件还是文件中的数据。下面的一些例子演示了
如何使用简单的循环来处理数据。
---
## Page 299
284
第13章更多的结构化命令
13.9.1查找可执行文件
当你从命令行中运行一个程序的时候，Linux系统会搜索一系列目录来查找对应的文件。这
些目录被定义在环境变量PATH中。如果你想找出系统中有哪些可执行文件可供使用，只需要扫
描PATH环境变量中所有的目录就行了。如果要徒手查找的话，就得花点时间了。不过我们可以
编写一个小小的脚本，轻面易举地搞定这件事。
首先是创建一个for循环，对环境变量PATH中的目录进行选代。处理的时候别忘了设置IFS
分隔符。
for folder in $PATH
IFS=1
do
现在你已经将各个目录存放在了变量sfolder中，可以使用另一个for循环来选代特定目录
中的所有文件。
for file in $folder/
do
最后一步是检查各个文件是否具有可执行权限，你可以使用if-then测试功能来实现。
if [ -x Sfile ]
then.
echo * $file*
fi
好了，搞定了！将这些代码片段组合成脚本就行了。
1/bin/bash
52189 113 $
finding flles ln the PATH
for folder 1n $PATH
IFS=:
dlo
echo *$folder:*
for file ln Sfolder/*
do
1f [ x Sfile 1
:hen
echo * srile*
f1
done
done
运行这段代码时，你会得到一个可以在命令行中使用的可执行文件的列表。
$./test2s 1 more
/ugr/Local/bin:
/usr/b1n:
/usr/bin/Mai1
/usx/bin/X
usx/bin/Thunar
---
## Page 300
13.9实例
285
/usr/bin/Xorg
/usx/bin/[
/usr/bin/abiword
/usr/bin/a2p
/usr/bin/ac
/usr/bin/a5dr211ne
/usr /bin/act IvatIon c1 Ient
输出显示了在环境变量PATH所包含的所有目录中找到的全部可执行文件，数量真是不少！
13.9.2创建多个用户账户
shell脚本的目标是让系统管理员过得更轻松。如果你碰巧工作在一个拥有大量用户的环境
中，最烦人的工作之一就是创建新用户账户。好在可以使用whi1e循环来降低工作的难度。
你不用为每个需要创建的新用户账户手动输人useradd命令，而是可以将需要添加的新用户
账户放在一个文本文件中，然后创建一个简单的脚本进行处理。这个文本文件的格式如下：
usexid,user name
第一个条目是你为新用户账户所选用的用户ID。第二个条目是用户的全名。两个值之间使用
逗号分隔，这样就形成了一种名为逗号分隔值的文件格式（或者是.csv）。这种文件格式在电子表
格中极其常见，所以你可以轻松地在电子表格程序中创建用户账户列表，然后将其保存成.csv格
式，以备shell脚本读取及处理。
要读取文件中的数据，得用上一点shell脚本编程技巧。我们将IFS分隔符设置成逗号，并将
其放人while语句的条件测试部分。然后使用reac命令读取文件中的各行。实现代码如下：
while IFS=′,* read -r userid nane
read命令会自动读取.csv文本文件的下一行内容，所以不需要专门再写一个循环来处理。当
read命令返回FALSE时（也就是读取完整个文件时），while命令就会退出。妙极了！
要想把数据从文件中送人while命令，只需在while命令尾部使用一个重定向符就可以了。
将各部分处理过程写成脚本如下。
$ cat teat26
#1/bin/bash
# process nev user accounta
input=*users, cav*
while IFS= *, * read -r uaerid nane
do
echo *adding Suserid*
pTxosns u- ,sueus. o- ppexesn
-anduf$。 > suop
13
Sinput变量指向数据文件，并且该变量被作为while命令的重定向数据。users.csv文件内容
如下。
---
## Page 301
286
第13章更多的结构化命令
$ cat users.csv
r1ch, R1chard Blun
chxiat Lne, ChxiatLne Bresnahan
t1m, Tinothy Bresnahan
barbara, BarbaraBlun.
必须作为root用户才能运行这个脚本，因为useradd命令需要root权限。
. /test26
adding chrlatine
adding rich
adding barbara
adding tin
#
来看一眼/etc/passwd文件，你会发现账户已经创建好了。
r1ch:x:1001 :1001 :R1chaxd B1um: /home/r1ch: /bin/ba.sh
chxiat Lne:x:1002 :1002 :Chr1atine Bresnahan: /hone/chx1atine: /bln/bash
t1m:×: 1004 : 1004 T1mot.by Breanahan :/home/℃1m: /b1n/bash
baxbara :x:1003 :1003:Baxbara B1um: /hone/barbara: /bin/bash
恭喜，你已经在添加用户账户这项任务上给自己省出了大量时间！
13.10小结
循环是编程的一部分。bash shell提供了三种可用于脚本中的循环命令。
for命令允许你遍历一系列的值，不管是在命令行里提供好的、包含在变量中的还是通过文
件扩展匹配获得的文件名和目录名。
while命令使用普通命令或测试命令提供了基于命令条件的循环。只有在命令（或条件）产
生退出状态码o时，while循环才会继续送代指定的一组命令。
unti1命令也提供了选代命令的一种方法，但它的选代是建立在命令（或条件）产生非零退
出状态码的基础上。这个特性允许你设置一个选代结束前都必须满足的条件。
可以在shell脚本中对循环进行组合，生成多层循环。bash shell提供了continue和break命
令，允许你根据循环内的不同值改变循环的正常流程。
bashshell还允许使用标准的命令重定向和管道来改变循环的输出。你可以使用重定向来将循
环的输出重定向到一个文件或是另一个命令。这就为控制shell脚本执行提供了丰富的功能。
下一章将会讨论如何和shell脚本用户交互。shell脚本通常并不完全是自成一体的。它们需要
在运行时被提供某些外部数据。下一章将讨论各种可用来向shell脚本提供实时数据的方法。
---
## Page 302
第14章
处理用户输入
本章内容
口传递参数
口跟踪参数
口移动变量
口处理选项
口将选项标准化
口获得用户输入
你编写的脚本还得能够与使用者进行交互。bash shell提供了一些不同的方法来从用户
处获得数据，包括命令行参数（添加在命令后的数据）、命令行选项（可修改命令行为的单个字
母）以及直接从键盘读取输人的能力。本章将会讨论如何在你的bashshel脚本运用这些方法来从
脚本用户处获得数据。
14.11