t
t
a
S
n
o
I
i
t
r
e
s
n
h
c
n
a
r
B
n
e
r
a
p
s
n
a
r
T
t
(c) Comparison between original JFlex and its obfuscated ones
(d) Comparison between JLex and different programs (JFlex and its obfuscated ones)
Figure 4. The resiliency and credibility of SCSSB system call birthmark.
compilers: GCC, TCC and Watcom. We used the three
compilers to generate executables for each of the three
programs (e.g., bzip2-gcc, bzip2-tcc) we used before. The
generated executables were executed with the same input and
a system call sequence is recorded for the each executable.
We compared the results of GCC to the results of TCC
and Watcom. While the system call sequences of TCC and
GCC (both with default optimization levels) are exactly the
same, the system call sequences of GCC and Watcom look
different. By checking the compilers, we found that the
differences were caused by different standard C libraries
used by the compilers. Both GCC and TCC use glibc while
Watcom uses its own implementation. Although the system
call sequences between GCC and Watcom looked different,
we found such differences can be removed by our system call
abstraction component. As such, our proposed birthmarks
can survive under different compilers.
C. SCSSB Experiment I: M1, M3, M4
To show the resiliency of birthmark SCSSB to obfuscation
techniques in whole program theft, we use JLex and JFlex.
JLex and JFlex, both written in Java, are two individual
programs that were written for the same purpose. They
understand the same input syntax, and generate very similar
lexical analyzers. The authors of each program claim that the
two projects do not share any code in common. We veriﬁed
this claim by manually comparing both programs using code
comparison features of SandMark.
Each of JLex and JFlex is compared to the obfuscated
versions of itself using SCSSB with 5-long system call
sequences. As a dynamic analysis, SCSSB may not reliably
justify (non-)theft based on a single high containment score.
Hence, in this experiment, we use 20 different inputs and
compute the average containment scores. The result is shown
in Figure 4, where the x-axis shows totally 34 obfuscation
techniques2, and the y-axis shows the containment scores.
From Figure4(a) and Figure4(c), we can observe that the
containment scores between a original program and its
obfuscated versions are more than 90%.
In order to verify the credibility of system call birthmarks
on independently developed but similar software, JLex is
compared to original/obfuscated JFlex while JFLex is also
compared to original/obfuscated JLex. In addition, we com-
pare JLex and JFlex to ﬁve totally different programs (grep,
gunzip, gzip, sort, and wc). From Figure4(b) and Figure4(d),
we can observe that the containment scores between JLex
and JFlex obfuscated versions or between JFLex and JLex
obfuscated versions are less than 67%, between JLex/JFlex
and other different programs are no more than 20%. Hence,
with appropriate detection thresholds, the detection system
based on SCSSB can accurately report the detection results.
We also notice that a code plagiarist may attempt to
hide by heavily transforming a stolen program through a
series of obfuscators. Therefore, evaluating resiliency of
SCSSB against multiple obfuscation techniques applied to
2We could not test all 39 obfuscators because some of them failed in
transforming JLex and JFlex
154
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
MULTIPLE OBFUSCATION TECHNIQUES APPLIED TO JLEX AND JFLEX
Table I
Obfuscators
Transparent Branch Insertion
Simple Opaque Predicates
Inliner
Insert Opaque Predicates
Dynamic Inliner
Interleave Methods
Method Merger
Opaque Branch Insertion
Reorder Instructions
(a) Control obfuscation
JLex
√
√
√
√
√
√
√
√
(b) Data obfuscation
JLex
√
√
√
√
√
√
√
Obfuscators
Array Splitter
Array Folder
Integer Array Splitter
String Encoder
Promote Primitive Registers
Variable Reassigner
Promote Primitive Types
Duplicate Registers
Boolean Splitter
Merge Local Integers
JFlex
√
√
√
√
√
√
√
JFlex
√
√
√
√
√
a single program is necessary. Although it is theoretically
possible for a series of multiple obfuscators to transform
a program, applying many obfuscators to a single program
raises practical issues of maintaining the correctness of a
target program and its efﬁciency. For example, we attempted
to apply all the 39 obfuscation techniques of SandMark to
each of JLex and JFlex, but, after trying several obfuscation
orders, only some of them could be successfully applied.
To address this problem, we selected obfuscation techniques
from two groups following the classiﬁcation of Collberg et
al. [7]: data obfuscation and control obfuscation. We created
four test programs by transforming JLex and JFlex through
the two groups of obfuscators. As shown in Table I, we could
apply eight control obfuscators and seven data obfuscators to
JLex and seven control obfuscators and ﬁve data obfuscators
to JFlex.
We compared the four multi-obfuscated JLex and JFlex
to their original programs. The containment scores of JLex
to control obfuscated JLex and data obfuscated JLex are
87.9% and 85.2%, respectively. The containment scores of
control and data obfuscated JFlex compared to original JFlex
are both 96%. This experiment shows that SCSSB is also
effective in detecting heavily obfuscated programs.
D. SCSSB Experiment II : M2
In this experiment, we demonstrate SCSSB’s ability to
detect stolen components, using the layout engines in web
browsers. A layout engine is a software component that
renders web contents (such as HTML, XML, image ﬁles,
etc.) combined with formatting information (such as CSS,
XSL, etc.) onto the display units or printers. It is not only the
core components of a web browser, but also used by many
applications that need to render and/or edit web documents.
Gecko [11] is an layout engine used in all Mozilla
software and its derivatives. We compute the containment
of Gecko in a number of browsers using both SCSSB
birthmarks with and without noise. These web browsers
include Epiphany, Firefox, Flock, Songbird, Kazehakase,
Amaya, Konqueror and Dillo. The ﬁrst ﬁve web browsers
are Gecko-based, and the other three are not. Table II(a)
shows their relation with the Gecko engine.
Table II
(a) The ﬁrst set of programs
Gecko Engine
(b) The second set of programs
Gecko Engine
Type
Program
Web Browser
Firefox 3.0.4
Flock 1.0.8
Web Browser
Epiphany 2.22.2
Web Browser
Kazehakase 0.5.2 Web Browser
Songbird 0.2.5
Media player
Web Browser
Konqueror 3.5.10 Web Browser
Web Browser
Web Browser
Amaya 10
Dillo 0.8.6
Evolution 2.22.3
Program
Opera 9.52
Gimp 2.4.5
Kile 2.0.0
Totem 2.22.1
Pdfedit 0.3.2
Open Ofﬁce 2.4.1
Type
Web Browser
Email Client
Graph Editor
Latex Editor
Movie Player
PDF Editor
Ofﬁce
Yes
Yes
Yes
Yes
Yes
No
No
No
No
No
No
No
No
No
No
To feed the web browsers the same input, we launch
a web browser, open the web site “http://en.wikipedia.org/
wiki/Rome”, and quit whenever we record the system call
sequence. For Firefox, we record the system call trace of
the target component (i.e., Gecko). For the other browsers,
we recorded their system call sequences through out entire
program. Fig5(a) shows the SCSSB containment scores of
Gecko, with the x-axis representing the lengths of system
call sequences. Although we can observe that the contain-
ment of Gecko in Gecko-based browsers is larger than
in non-Gecko browsers, the difference is not signiﬁcant
enough for us to draw any conclusion. This indicates that
two different programs may overlap signiﬁcantly in their
system call sequence sets. As a result, SCSSB is not a good
birthmark without removing noise here. Therefore, we must
eliminate noise in the system call sequence sets to obtain a
useful SCSSB.
To see the effect of noise removal, we use a set of
different programs (shown in Table II(b)) to prune, from the
system call sequence sets of the browsers we have tested,
the noisy system call sequences that are commonly found
in other programs. In this set of programs, only Opera is
a web browser and we generate its system call sequence
sets as before. For the other programs, we do the following:
launch the program, open a ﬁle and then quit. Their system
call traces are recorded during the operations. Figure 5(b)
shows the containment of Gecko in these browsers, using
SCSSB with noise removal. It shows signiﬁcant differences
155
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
 4
 6
 8
 10
 12
 14
 16
 18
The length of system call short sequences
(a) The containment score before noise removal
gecko-epiphany
gecko-flock
gecko-songbird
gecko-kazehakase
gecko-amaya
gecko-konqueror
gecko-dillo
Epiphany
Flock
Songbird
Kazehakase
Amaya
Konqueror
Dillo
 20
 20
dependent system call sequence birthmarks. First, we gen-
erate a system call sequence for an input. As the input
to each browser, we follow a simple scenario: launch the
web browser, visit the web site “http://en.wikipedia.org/wiki/
Germany”, and quit. To remove noise, we run the program
three times with the same input to ﬁnd the common subse-
quence of the three system call traces. Second, we generate a
system call sequence for another input “http://www.us.gov”.
The same method as in the ﬁrst step is used to remove noise.
Finally, the result from above two steps are compared. The
input dependent system call sequence birthmark is generated
by extracting system calls which appear only in the result
from the ﬁrst step.
We also generated IDSCSB for inputs “http://www.cnn.
com” and “http://www.msnbc.com”. The result shown in
Figure 6 indicates signiﬁcant differences between Gecko-
based browsers and non-Gecko browsers.
)
%
(
e
r
o
c
s
t
i
n
e
m
n
a
n
o
C
t
 100
 80
 60
 40
 20
 0
wikipedia/germany
cnn.com
Input
msnbc.com
Epiphany
Flock
Songbird
Kazehakase
Amaya
Konqueror
Dillo
between Gecko-based browsers and non-Gecko browsers.
We can also see that ﬁve is a good choice for the length of
short system call sequences in distinguishing Gecko-based
browsers from non-Gecko browsers.
)
%
(
i
e
n
g
n
e
o
k
c
e
G
e
h
t
f
o
t
n
e
m
n
a
i
t
n
o
c
e
h
T
)
%
(
i
e
n
g
n
e
o
k
c
e
G
e
h
t
f
o
t
n
e
m
n
a
i
t
n
o
c
e
h
T
 100
 80
 60
 40
 20
 0
 2
 100
 80
 60
 40
 20
 0
 2
 4
 6
 8
 10
 12
 14
 16
 18
The length of system call short sequences
(b) The containment score after noise removal
Figure 5. The containment of Gecko in the browsers.
E. IDSCSB Experiment I : M1, M3, M4
In the third experiment, we use JLex and JFlex again
to show the obfuscation resiliency of IDSCSB in whole
program plagiarism. Each of JLex and JFlex is compared
to the obfuscated versions of itself, using IDSCSB. The
containment scores between original and obfuscated JLex
are 100%. We also observed 100% containment with JFlex.
In order to verify the credibility of system call birthmarks,
we did the similar experiments using SCSSB. The contain-
ment scores between JLex and obfuscated JFlex or between
JFLex and obfuscated JLex are less than 46%, between
JLex/JFlex and other programs are no more than 7%. Hence,
with appropriate thresholds, the detection system based on
IDSCSB can accurately report plagiarism.
We also compared the four multi-obfuscated JLex and
JFlex (data obfuscated JLex, control obfuscated JLex, data
obfuscated JFlex, and control obfuscated JFlex) to their
original programs for IDSCSB. We observed containment
scores of the multi-obfuscated JLex/JFlex compared to cor-
responding original versions were all 100%. This experiment
shows that IDSCSB is very effective in detecting heavily
obfuscated plagiarisms, outperforming SCSSB.
F. IDSCSB Experiment II : M2
Next we evaluate IDSCSB on web browsers and their
layout engines. There are three steps to generate input
Figure 6. The containment of Gecko in the browsers.
V. DISCUSSION
A. Counterattacks
One of the possible counterattacks to our system call
based birthmarks is the system call injection attack. An
attacker may insert arbitrary system calls in the plagiarism
program to reduce the containment score of SCSSB without
compromising its original semantics. However, this attack
would not bypass the detection of IDSCSB. The containment
score of IDSCSB detection will not decrease because (1)
these injected system calls will likely be ﬁltered out in the
ﬁrst place, (2) we use longest common subsequence (LCS) to
identify similarity between two system call sequences, thus
IDSCSB is robust to noise injection attack by its nature.
Another type of possible attacks is the system call re-
ordering attack. An attacker may change the order of system
calls in the execution path to fool SCSSB and IDSCSB.
However, it has quite limited applicability to reorder system
calls without affecting the semantics of an original program,
due to many reasons including data and control dependencies
between the system calls. Moreover, reordering of system
calls often affects semantics of the machine instructions
surrounding the system calls, which makes the attack much
156
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
harder to be accomplished. We will study the feasibility of
such attacks in the future.
B. Limitations
Both SCSSB and IDSCSB bear the following fundamental
limitation. First, they do not apply if the program of interest
does not involve any system calls or has very few system
calls, for example, when there are only arithmetic operations
in the program. Second, they are not applicable to the pro-
grams which do not have unique system call behaviors. For
example, the only behavior of a sorting program is to read an
unsorted ﬁle and print the sorted data. This behavior, which
is common to other sorting programs or even irrelevant
programs, is not unique. As such, our tool should be used
with caution, especially for tiny common programs with
few system calls. Third, as a detection system, it bears the
same limitation of intrusion detection systems; that is, there
exists a fundamental tradeoff between false positives and
false negatives. The detection result of our tool depends on
the threshold a user deﬁnes. To have higher conﬁdence, one
should use a large threshold, thus it is likely to increase
false negative. In contrast, reducing the detection threshold
will increase false positive. Unfortunately, without many
real-world plagiarism samples, we are unable to show some
concrete results on such false rates although we have showed
system call birthmarks exist for all the programs we studied.
As such, rather than applying our tool to “prove” software
plagiarisms, in practice one may use it to collect some initial
evidences before taking further investigations, which often
involve nontechnical actions. More discussion can be found
in our follow-up work [17].
VI. RELATED WORK
We roughly group the literature into two categories:
software birthmark and clone detection.
Software Birthmark: There are four classes of software
birthmark.
Static source code based birthmark: Tamada [3] et al.
proposed four types of static birthmark: Constant Values
in Field Variables Birthmark (CVFV), Sequence of Method
Calls Birthmark (SMC), Inheritance Structure Birthmark
(IS) and Used Classes Birthmark (UC). All of the four types
are vulnerable to obfuscation techniques mentioned in [8].
In addition, they need to access source code and only work
for object-oriented programming language.
Static executable code based birthmark: Myles and Coll-
berg [8] proposed a opcode-level k-gram based static birth-
mark. Opcode sequences of length k are extracted from
a program and k-gram techniques which were used to
detect similarity of documents are exploited to the opcode
sequences. Although the k-gram static birthmark is more
robust than Tamadas birthmark, it is still strongly vulnerable
to some well-known obfuscations such as statement reorder-
ing, junk instruction insertion and other semantic-preserved
transformation techniques such as compiler optimization.
Dynamic WPP based birthmark: Myles and Collberg
[5] proposed a whole program path (WPP) based dynamic
birthmark. WPP is originally used to represent the dynamic
control ﬂow of a program. WPP birthmark is robust to some
control ﬂow obfuscations such as opaque prediction, but is
still vulnerable to many semantic-preserving transformation
such as loop unwinding. Moreover, WPP birthmark may not
work for large-scale programs due to overwhelming volume
of WPP traces.
Dynamic API based birthmark: Tamada et al. [6], [18]
also introduced two types of dynamic birthmark for Win-
dows applications: Sequence of API Function Calls Birth-
mark (EXESEQ) and Frequency of API Function Calls
Birthmark (EXEFREQ). In EXESEQ, the sequence of Win-
dows API calls are recorded during the execution of a
program. These sequences are directly compared to ﬁnd
similarity. In EXEFREQ, the frequency of each Windows
API calls are recorded during the execution of a program.
The frequency distribution is used as the birthmark. Schuler
et al. [4] proposed a dynamic birthmark for Java. The call
sequences to Java standard API are recorded and the short
sequences at object level are used as a birthmark. Their
experiments showed that API birthmarks are more robust to
obfuscation than WPP birthmark in their evaluation. Unlike
the Java or Windows API based birthmarks that are platform
dependent, system call birthmarks can be used on any
platform. In addition, system call birthmarks are more robust
to counter-attacks than API-based ones. To evade API-based
birthmarks, attackers may hide API calls by embedding
their own implementation of some API routines. However,
there are no easy ways to replace “system calls” without
recompiling the kernel because because system call is the
only way to gain privilege in modern operating systems.
More importantly, existing API-based birthmarks have not
been evaluated to protect core components theft.
Clone Detection: A close research ﬁeld to software birth-
mark is clone detection. Clone detection is a technique to
ﬁnd the duplicate code (“clones”) in a large-scale program.
Existing techniques for clone detection can be classiﬁed into
four categories: String-based [19], AST-based [20], [21],
Token-based [22]–[24] and PDG-based [25], [26]. String-
based: Each line of source code is considered as a string and
the whole program is considered as a sequence of strings.
A code fragment is labelled as clone if the corresponding
sequence of strings is the same as another code fragment
from original program. AST-based: The abstract syntax
trees (AST) are extracted from programs by analyzing their
syntax. Then the ASTs are directly compared. If there are
common subtrees, clone may exist. Token-based: A program
is ﬁrst parsed to a sequence of tokens. The sequences of
tokens are compared to ﬁnd clone. PDG-based: A program
157
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply. 
dependency graph is a graph which represents the control
ﬂow and data ﬂow relations between the statements in a
program procedure. To ﬁnd clone, two PDGs are extracted
from two programs (by some static analysis tools) and
compared to ﬁnd relaxed subgraph isomorphism.
Besides to be used to decrease code size and facilitate
maintenance, clone detection can be also be used to de-
tect software plagiarism. However, existing clone detection
techniques are not robust to code obfuscation. String-based
schemes are fragile even by simply renaming identiﬁers
in programs. AST-based schemes are resilient to identiﬁer
renaming, but weak against statement reordering and control
replacement. Token-based schemes are resilient to identi-
ﬁer renaming, but weak against junk code insertion and
statement reordering. Because PDGs contain semantic infor-
mation of programs, PDG-based schemes are more robust
than the other three types of existing schemes. However,
PDG-based is still vulnerable to many semantics-preserving
transformations such as inline and outline functions and
opaque predicates. Moreover, all clone detection techniques
need to access source code.
VII. CONCLUSION
In this paper, we propose two system call based software
birthmarks: SCSSB and IDSCSB. We evaluate them using
a set of real world programs. Our experiment results show
that all the plagiarisms obfuscated by the SandMark tool
are successfully discriminated. Unlike existing schemes that
are evaluated with small or toy software, we evaluate our
birthmarks (SCSSB and IDSCSB) with a set of large-scale
software (web browsers). The results show that SCSSB and
IDSCSB are effective and practical in detection of core
component theft of large-scale programs.
ACKNOWLEDGMENT
The authors would like to thank Jonas Maebe of Uni-
versity of Ghent for his help in compiling and using Loco
and Diablo; Semantic Designs, Inc. for donating C/C++
obfuscators.
REFERENCES
[1] C. Collberg and C. Thomborson, “Software watermarking:
Models and dynamic embeddings,” in Principles of Program-
ming Languages 1999, Jan. 1999.
[2] C. Collberg, E. Carter, S. Debray, A. Huntwork, C. Linn, and
M. Stepp, “Dynamic path-based software watermarking,” in
Proceedings of the Conference on Programming Language
Design and Implementation, 2004.
[3] H. Tamada, M. Nakamura, A. Monden, and K. ichi Mat-
sumoto, “Design and evaluation of birthmarks for detecting
theft of java programs,” in Proc. IASTED International Con-
ference on Software Engineering, 2004.
[4] D. Schuler, V. Dallmeier, and C. Lindig, “A dynamic birth-
mark for java,” in ASE ’07: Proc. of
the twenty-second
IEEE/ACM international conference on Automated software
engineering, 2007.
158
[5] G. Myles and C. Collberg, “Detecting software theft via
whole program path birthmarks,” in ISC, 2004, pp. 404–415.
[6] H. Tamada, K. Okamoto, M. Nakamura, and A. Monden,
“Dynamic software birthmarks to detect the theft of windows
applications,” in International Symposium on Future Software
Technology 2004 (ISFST 2004), 2004.
[7] C. Collberg, C. Thomborson, and D. Low, “A taxonomy of
obfuscating transformations,” The Univeristy of Auckland,
Tech. Rep. 148, Jul. 1997.
[8] G. Myles and C. S. Collberg, “K-gram based software birth-
marks,” in SAC, 2005.
[9] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kem-
merer, “Behavior-based spyware detection,” in Proceedings of
the 15th conference on USENIX Security Symposium, 2006.
[10] M. Christodorescu, S. Jha, and C. Kruegel, “Mining speciﬁ-
cations of malicious behavior,” in Proc. of ESEC/FSE, 2008.
[11] “Gecko,” http://en.wikipedia.org/wiki/Gecko layout engine.
[12] “KHTML,” http://en.wikipedia.org/wiki/KHTML.
[13] C. Collberg, G. Myles, and A. Huntwork, “Sandmark–a tool
for software protection research,” IEEE Security and Privacy,
vol. 1, no. 4, pp. 40–49, 2003.
[14] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff,
“A sense of self for Unix processes,” in Proceedinges of the
1996 IEEE Symposium on Research in Security and Privacy,
1996.
[15] N. Nethercote and J. Seward, “Valgrind: a framework for
heavyweight dynamic binary instrumentation,” in Proceedings
the 2007 ACM SIGPLAN conference on Programming
of
language design and implementation.
[16] “Elsa: An Elkhound-based C++ parser,” http://scottmcpeak.
com/elkhound/.
[17] X. Wang, Y.-C. Jhi, S. Zhu, and P. Liu, “Behavior based soft-
ware theft detection,” in Proc. of the 16th ACM Conference
on Computer and Communications Security (CCS’09), 2009.
[18] H. Tamada, K. Okamoto, M. Nakamura, A. Monden, and
K. ichi Matsumoto, “Design and evaluation of dynamic soft-
ware birthmarks based on api calls,” Nara Institute of Science
and Technology, Technical Report, 2007.
[19] B. S. Baker, “On ﬁnding duplication and near duplication in
large software systems.” in Proc. of 2nd Working Conf. on
Reverse Engineering, 1995.
[20] I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and L. Bier,
“Clone detection using abstract syntax trees.” in Int. Conf. on
Software Maintenance, 1998.
[21] K. Kontogiannis, M. Galler, and R. DeMori, “Detecting code
similarity using patterns.” in Working Notes of 3rd Workshop
on AI and Software Engineering, 1995.
[22] T. Kamiya, S. Kusumoto, and K. Inoue., “CCFinder: a mul-
tilinguistic token-based code clone detection system for large
scale source code.” IEEE Trans. Softw. Eng., vol. 28, no. 7,
2002.
[23] L. Prechelt, G. Malpohl, and M. Philippsen, “Finding pla-
giarisms among a set of programs with jplag,” Universal
Computer Science, 2000.
[24] S. Schleimer, D. S. Wilkerson, and A. Aiken, “Winnowing:
local algorithms for document ﬁngerprinting.” in Proc. of
ACM SIGMOD Int. Conf. on Management of Data, 2003.
[25] C. Liu, C. Chen, J. Han, and P. S. Yu, “Gplag: detection of
software plagiarism by program dependence graph analysis,”
in Proceedings of
the 12th ACM SIGKDD international
conference on Knowledge discovery and data mining, 2006.
[26] J. Krinke, “Identifying similar code with program dependence
graphs.” in Proc. of 8th Working Conf. on Reverse Engineer-
ing, 2001.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:20 UTC from IEEE Xplore.  Restrictions apply.