only runtime beneﬁt provided is the detection of illegal
modiﬁcations that utilize well-documented transitions or
interfaces where a measurement has explicitly been in-
serted before the malicious software was loaded. Un-
fortunately, attackers are frequently not limited to using
only these interfaces [33].
Haldar et al. have proposed a system known as “se-
mantic remote attestation” [14] in an attempt to extend
the types of information the verifying party can learn
about the attesting system. Their approach is to use a
language-based trusted virtual machine that allows the
measurement agent to perform detailed analysis of the
application rather than simple binary checksums. The
basic principle is that language-based analysis can pro-
vide much more semantic information about the proper-
ties of an application. Their approach does not extend
to semantic properties of the kernel and, since their VM
runs on top of a standard kernel, there is a requirement
for traditional attestation to bootstrap the system.
Veriﬁable code execution is a stronger property than
attestation whereby a veriﬁer can guarantee that a par-
ticular piece of code actually runs on a target plat-
form [33]. This contrasts traditional attestation, where
only the loading of a particular piece of software can
be guaranteed. Once that software is loaded however,
it could theoretically be compromised by an advanced
adversary. With veriﬁable code execution, such a modi-
ﬁcation should not be possible without detection by the
veriﬁer. Both hardware-based [5, 35] and, more recently,
software-based [33] systems have been proposed.
Veriﬁable code execution is a promising direction for
ensuring that the correct code is run on a potentially un-
trusted platform. As shown by Seshadri et al. [33], such
a system could be used as the foundation for a kernel in-
tegrity monitor. We therefore view veriﬁable code execu-
tion as a potential monitor extension for our architecture.
6.3 Speciﬁcation-Based Detection
Speciﬁcation-based intrusion detection is a technique
whereby the system policy is based on a speciﬁcation
that describes the correct operation of the monitored en-
tity [20]. This approach contrasts signature-based ap-
proaches that look for known threats and statistical ap-
proaches for modeling normalcy in an operational sys-
tem. Typically, speciﬁcation-based intrusion detection
has been used to describe program behavior [20, 21, 32]
rather than correct state, as we have used it [20, 21,
32]. More recently, speciﬁcations have been used for
network-based intrusion detection as well [36].
6.4 Data Structure Detection and Repair
We have already described Demsky and Rinard’s [7]
work towards data structure error detection and repair.
This work places one level of abstraction on top of the
historical 5ESS [16] and MVS [25] work: in those sys-
tems, the inconsistency detection and repair procedures
were coded manually. We have utilized the basic tech-
niques of Demsky and Rinard’s speciﬁcation system with
the necessary adaptations for operating system semantic
integrity. The environments are sufﬁciently different so
as to require signiﬁcant modiﬁcations. These differences
were discussed in Section 3.3.
In similar work, Nentwich and others [27] have devel-
oped xlinkit, a tool that detects inconsistencies between
distributed versions of collaboratively-developed docu-
ments structured in XML [4]. It does so based on con-
sistency constraints written manually in a speciﬁcation
language based on ﬁrst order logic and XPath [6] expres-
sions. These constraints deal with XML tags and val-
ues, such as “every item in this container should have a
unique name value.” In later work [28], they describe
a tool which analyzes these constraints and generates
a set of repair actions. Actions for the above exam-
ple might include deleting or renaming items with non-
unique names. Human intervention is required to prune
repair actions from the list and to pick the most appropri-
ate action from the list at repair time.
6.5 Semantic Integrity in Databases
There is a long history of concern for the correct and con-
sistent representation of data within databases. Hammer
and McLeod addressed the issue in the mid 1970’s as it
applies to data stored in a relational database [15]. The
concept of insuring transactional consistency on modiﬁ-
cations to a database is analogous to that of doing process
accounting within the operating system. The database,
like the operating system, assumes that data will be mod-
iﬁed only by authorized parties through pre-deﬁned inter-
faces. While the environments are very different, Ham-
mer and McLeod’s work provided excellent insight to us
regarding constraint veriﬁcation. Their system includes
a set of constraints over database relations that include
an assertion (a predicate like in our system), a validity
requirement (analogous to the guard in Demsky and Ri-
302
Security ’06: 15th USENIX Security Symposium
USENIX Association
nard’s model language), and a violation action, similar
to our response mechanism but which only applies to up-
dating the database. Hammer and McLeod argue that
assertions should not be general purpose predicates (like
ﬁrst-order logic), but should instead be well-deﬁned.
7 Future Work
Each part of the architecture described above provides
avenues for signiﬁcant impact and advancement in the
system. The three most promising areas are the extension
to other monitors, advancement in system responses, and
the analysis and automation of speciﬁcations.
We have designed the semantic integrity architecture
to be easily extended to other monitor platforms. Two
of the most promising such platforms include virtual
machine monitors [13, 12] and software-based monitors
achieved via veriﬁable code execution [33]. These sys-
tems provide the possibility for unique extensions such
as the inclusion of register state into speciﬁcations and
the beneﬁt of added assurance without the need for ex-
tra hardware. It is our intention to extend our work to at
least one such software-based monitor.
A second avenue of work we intend to pursue is that
of additional response vectors. Having an independent
monitor with access to system memory and a system
for easily interpreting that memory can provide a huge
amount of leverage for advanced response. Perhaps the
most signiﬁcant potential for work is the advancement of
automated runtime memory forensics.
Finally, as with all security systems, having a good
policy is very important for the success of the system.
Our current architecture requires experts with advanced
knowledge of kernel internals to write and verify speci-
ﬁcations. Developing tools to help automate the process,
including a number of kernel static analysis tools, could
signiﬁcantly improve this process. We intend to investi-
gate techniques for analyzing kernel properties automat-
ically, both statically and at runtime.
8 Conclusion
We have introduced a novel and general architecture for
deﬁning and monitoring semantic integrity constraints—
functionality required to defeat the latest generation of
kernel-tampering rootkit technology. For our initial pro-
totype implementation, we have adapted Demsky and Ri-
nard’s speciﬁcation languages for implementing internal
monitors for application data structures [7] to the task
of implementing external monitors for operating system
kernel data structures. This adaptation required adding
features to their speciﬁcation languages to overcome a
number of issues not present in the original application
problem domain, including managing memory transfer
overhead and providing for ﬂexible responses to detected
compromises.
Our general architecture is applicable to a variety of
low-level monitoring technologies,
including external
hardware monitors [29], software-based monitors [33]
and virtual machine introspection [13]. We believe our
approach is the ﬁrst to address the issue of monitoring
the integrity of dynamic kernel data in a comprehensive
way, and we believe it will provide an excellent comple-
ment to present state of the art binary integrity systems.
Acknowledgments
We would like to thank Trent Jaeger for his time and
feedback during the ﬁnal preparation of this work. We
would also like to thank the anonymous reviewers for
their helpful comments. This work was supported by
the National Science Foundation (NSF) under CAREER
award 0133092.
References
[1] The
Uniﬁed
Modeling
Language
(UML).
http://www.uml.org, 2005.
[2] Trusted
Computing
Group
(TCG).
http://www.trustedcomputinggroup.org,
2005.
[3] W. E. Boebert and R. Y. Kain. A Practical Alternative
to Hierarchical Integrity Policies. In Proceedings of the
8th National Computer Security Conference, pages 18–
27, Gaithersburg, Maryland, September 1985.
[4] T. Bray, J. Paoli, C. M. Sperberg-McQueen, and E. Maler.
Extensible Markup Language. Recommendation REC-
xml-20001006, World Wide Web Consortium, October
2000.
[5] B. Chen and R. Morris. Certifying Program Execution
with Secure Processors.
In 9th Workshop on Hot Top-
ics in Operating Systems (HotOS), Lihue, Hawaii, May
2003.
[6] J. Clark and S. Derose. XML Path Language (XPath)
Version 1.0. Recommendation REC-xpath-19991116,
World Wide Web Consortium, November 1999.
[7] B. Demsky and M. Rinard. Automatic Detection and
Repair of Errors in Data Structures.
In Proceedings of
the 18th Annual ACM SIGPLAN Conference on Object-
Oriented Programming, Systems, Languages, and Appli-
cations (OOPSLA), Anaheim, CA, October 2003.
[8] B. Demsky and M. Rinard. Static Speciﬁcation Analy-
sis for Termination of Speciﬁcation-Based Data Structure
Repair.
In Proceedings of the 14th International Sym-
posium on Software Reliability Engineering, November
2003.
[9] B. Demsky and M. Rinard. Data Structure Repair Using
Goal-Directed Reasoning. In Proceedings of the 27th In-
ternational Conference on Software Engineering (ICSE),
St. Louis, MO, May 2005.
[10] R. Droms. Dynamic host conﬁguration protocol. Techni-
cal Report RFC 2131, Bucknell University, March 1997.
USENIX Association
Security ’06: 15th USENIX Security Symposium
303
[11] D. Ferraiolo and R. Kuhn. Role-Based Access Controls.
In Proceedings of the 15th National Computer Security
Conference, pages 554–563, Baltimore, Maryland, Octo-
ber 1992.
[12] T. Garﬁnk el, B. Pfaff, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A Virtual-Machine Based Platform for
Trusted Computing. In 19th ACM Symposium on Operat-
ing Systems Principles (SOSP), Sagamore, NY, October
2003.
[13] T. Garﬁnk el and M. Rosenblum. A Virtual Machine In-
trospection Based Architecture for Intrusion Detection.
In The 10th Annual Symposium on Network and Dis-
tributed System Security (NDSS), San Diego, CA, Febru-
ary 2003.
[14] V. Haldar, D. Chandra, and M. Franz. Semantic re-
mote attestation – a virtual machine directed approach to
trusted computing.
In Proceedings of the 3rd USENIX
Virtual Machine Research & Technology Symposium,
May 2004.
[15] M. Hammer and D. McLeod. A Framework For Data
Base Semantic Integrity. In Proceedings of the 2nd In-
ternational Conference on Software Engineering (ICSE),
San Francisco, CA, October 1976.
[16] G. Haugk, F. Lax, R. Royer, and J. Williams. The
5ESS(TM) switching system: Maintenance capabilities.
AT & T Technical Journal, 64 part 2(6):1385 – 1416,
July-August 1985.
[17] D. Hollingworth and T. Redmond. Enhancing operat-
ing system resistance to information warfare.
In MIL-
COM 2000. 21st Century Military Communications Con-
ference Proceedings, volume 2, pages 1037–1041, Los
Angeles, CA, USA, October 2000.
[18] R. Kennell and L. H. Jamieson. Establishing the Gen-
uinity of Remote Computer Systems. In Proceedings of
the 12th USENIX Security Symposium, pages 295–310,
Washington, D.C., August 2003.
[19] G. H. Kim and E. H. Spafford. The Design and Imple-
mentation of Tripwire: A File System Integrity Checker.
In Proceedings of the 2nd ACM Conference on Com-
puter and Communications Security, pages 18–29, Fair-
fax, Virgina, November 1994.
[20] C. Ko, G. Fink, and K. Levitt. Automated Detection
of Vulnerabilities in Privileged Programs by Execution
Monitoring.
In Proceedings of the 10th Annual Com-
puter Security Applications Conference (ACSAC), Or-
lando, FL, 1994.
[21] C. Ko, M. Ruschitzka, and K. Levitt. Execution Monitor-
ing of Security-Critical Programs in Distributed Systems:
A Speciﬁcation-based Approach . In 1997 IEEE Sympo-
sium on Security and Privacy, Oakland, CA, May 1997.
[22] P. A. Loscocco and S. D. Smalley. Integrating Flexible
Support for Security Policies into the Linux Operating
System.
In Proceedings of the FREENIX Track: 2001
USENIX Annual Technical Conference, Boston, Mas-
sachusetts, June 2001.
[23] R. Love. Linux Kernel Development. Novell Press, sec-
ond edition, 2005.
[24] P. Mockapetris. Domain names—conceptsand facilities.
Technical Report RFC 1034, ISI, November 1987.
[25] S. Mourad and D. Andrews. On the Reliability of the
IBM MVS/XA Operating System. IEEE Transactions on
Software Engineering, 13(10):1135–1139, 1987.
[26] National Computer Security Center. Department of De-
fense Trusted Computer System Evaluation Criteria, De-
cember 1985.
[27] C. Nentwich, L. Capra, W. Emmerich, and A. Finkel-
stein. xlinkit: a Consistency Checking and Smart Link
Generation Service. ACM Transactions on Internet Tech-
nology, 2(2):151 – 185, May 2002.
[28] C. Nentwich, W. Emmerich, and A. Finkelstein. Consis-
tency management with repair actions. In Proceedings fo
the 25th International Conference on Software Engineer-
ing, May 2003.
[29] N. L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh.
Copilot – a Coprocessor-based Kernel Runtime Integrity
Monitor.
In 13th USENIX Security Symposium, San
Diego, CA, August 2004.
[30] R. Sailer, T. Jaeger, X. Zhang, and L. van Doorn.
Attestation-based Policy Enforcement for Remote Ac-
cess. In 11th ACM Conference on Computer and Com-
munications Security (CCS), Washington, DC, Novem-
ber 2004.
[31] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design
and Implementation of a TCG-based Integrity Measure-
ment Architecture. In 13th USENIX Security Symposium,
San Diego, CA, August 2004.
[32] R. Sekar and P. Uppuluri. Synthesizing fast intrusion pre-
vention/detection systems from high-level speciﬁcations.
In 8th USENIX Security Symposium, pages 63–78, Wash-
ington, D.C., August 1999.
[33] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and
P. Khosla. Pioneer: Verifying Code Integrity and Enforc-
ing Untampered Code Execution on Legacy Systems. In
Proceedings of the 20th ACM Symposium on Operating
Systems Principles (SOSP), Brighton, United Kingdom,
October 2005.
[34] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla.
SWATT: SoftWare-based ATTestation for Embedded De-
vices. In IEEE Symposium on Security and Privacy, Oak-
land, CA, May 2004.
[35] E. Shi, A. Perrig, and L. V. Doorn. BIND: A Fine-grained
In
Attestation Service for Secure Distributed Systems.
Proceedings of the 2005 IEEE Symposium on Security
and Privacy, Oakland, CA, May 2005.
[36] C. Tseng, P. Balasubramanyam, C. Ko, R. Limprasitti-
porn, J. Rowe, and K. Levitt. A speciﬁcation-based in-
strusion detection system for aodv. In 2003 ACM Work-
shop on security of Ad Hoc and Sensor Networks (SASN
’03), Fairfax, VA, October 2003.
[37] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and
R. Sailer. Secure Coprocessor-based Intrusion Detec-
tion.
In Proceedings of the Tenth ACM SIGOPS Euro-
pean Workshop, Saint-Emilion, France, September 2002.
304
Security ’06: 15th USENIX Security Symposium
USENIX Association