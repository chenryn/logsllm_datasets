speculation rely on this assumption. Our results for the
i9-9900K show the risk of relying on “spot” mitigations
in hardware; although the address-based page faults used
by Meltdown-style attacks have been mitigated in silicon,
RIDL attacks using other exceptions continue to work.
Furthermore, it demonstrates for the ﬁrst time a cross-
address space and cross-privilege attack that relies only
on in-ﬂight, CPU-internal data, demonstrating the latent
danger introduced by the related microptimizations.
(cid:18)(cid:17)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
IX. New Mitigations
X. Conclusion
The response to the disclosure of speculative execution
attacks has so far been the deployment of spot mitigations
in software before mitigations become available in hard-
ware [80]. For example, for Meltdown, the ﬁrst deployed
software mitigation (i.e., KPTI) was the separation of
address spaces between user space and kernel space by
the operating system. While eﬀective, on top of increasing
complexity in the kernel, KPTI has been shown to have
performance penalties under certain workloads [81]. We
now describe how this spot mitigation approach is not well-
suited for the LFB variant of RIDL presented in this paper.
Mitigating RIDL in software. Since sensitive infor-
mation can be leaked from sibling hardware threads, it
is clear that SMT must be disabled to mitigate RIDL.
However, it is still possible to leak sensitive information
from another privilege level within a single thread (as
some of our exploits demonstrated), including information
from internal CPU systems such as the MMU. To protect
sensitive information in the kernel or a diﬀerent address
space, the kernel needs to ﬂush the LFBs before returning
to userland similar to the L1 ﬂush in the Foreshadow
mitigation. Similarly, the hypervisor needs to ﬂush the
LFBs before switching to VM execution. In the case of
hardware-based components such as SGX or the MMU,
the LFB ﬂushing cannot be easily done in software.
Perhaps more importantly, while Intel could provide a
L1 ﬂush mechanism via a microcode update, it is not clear
whether it is possible to expose a similar mechanism for
ﬂushing the LFBs. Furthermore, even if such a mechanism
was possible, its cost will likely be even more expensive
than the L1 ﬂush on every context switch. Remember that
the entire L1 cache needs to be ﬂushed ﬁrst since the
entries go through the LFBs. After that, the mechanism
needs to wait until the LFBs are drained before safely
resuming the execution. We believe that such a mechanism
will be too expensive to be useful in practice.
Moving forward. In this paper, we focused on specu-
lation done on LFB entries. However, we believe there
are several other sources of in-ﬂight data—especially given
decades of performance optimizations in the CPU pipeline.
Furthermore, as discussed in this section, because these
optimizations are applied deeply in the CPU pipeline,
spot mitigations will likely be expensive. Moving forward,
we see two directions for mitigating RIDL: 1) As Intel
could release a microcode update that mitigated SSB
by completely disabling speculative store forwarding, we
believe it should make a similar mitigation possible for all
possible sources of speculation when applying micro-opti-
mizations. It will then be up to system software to decide
which optimizations to turn oﬀ until hardware mitigations
become available. 2) Finding all instances of RIDL will
likely take a long time due to the complexity of these
micro-optimizations. Hence, rather than spot mitigations
that are often ineﬀective against the next discovered at-
tack, we need to start the development and deployment of
more fundamental mitigations against the many possible
classes of speculative execution attacks.
We presented RIDL, a new class of speculative execu-
tion vulnerabilities able to leak arbitrary, address-agnostic
in-ﬂight data from normal execution (without branches
or errors), including sandboxed execution (JavaScript in
the browser). We showed RIDL can be used to perform
attacks across arbitrary security boundaries and presented
real-world process-, kernel-, VM-, and SGX-level exploits.
State-of-the-art mitigations against speculative execution
attacks (including the in-silicon mitigations in Intel’s re-
cent CPUs) are unable to stop RIDL, and new soft-
ware mitigations are at best non-trivial. RIDL puts into
question the current approach of “spot” mitigations for
individual speculative execution attacks. Moving forward,
we believe we should favor more fundamental “blanket”
mitigations over these per-variant mitigations, not just for
RIDL, but for speculative execution attacks in general.
Disclosure
The authors from VU Amsterdam (VUSec) submitted
PoC exploits for the RIDL class of vulnerabilities to Intel
on September 12, 2018. Intel immediately acknowledged
the vulnerability and rewarded RIDL with the Intel Bug
Bounty (Side Channel) Program. Since then, Intel led the
disclosure process, notifying all the aﬀected software ven-
dors and other hardware vendors potentially susceptible
to similar issues (see details below). VUSec submitted the
end-to-end analysis presented in this paper including all
the exploits (except the one in Section VI-D) to IEEE
Symposium on Security & Privacy on November 1, 2018.
Giorgi Maisuradze independently discovered the same
class of vulnerabilities in June 2018 as an intern in a
side-channel project at Microsoft Research. The ﬁndings
were reported to Intel via the Microsoft Security Response
Center. Section VI-D is entirely based on his ﬁndings.
Volodymyr Pikhur independently discovered and re-
ported a RIDL-class exploit (L1TF mitigation bypass over
uncached memory) to Intel on August 25, 2018. Dan Horea
Lutas’ team at Bitdefender reported an issue related to the
RIDL vulnerabilities to Intel on August 17, 2018.
Statements that we received from CPU vendors about
RIDL are available in Appendix A.
Acknowledgements
We would like to thank our shepherd, Hovav Shacham,
and the anonymous reviewers for their valuable feedback.
This work was supported by the European Union’s Horizon
2020 research and innovation programme under grant
agreements No. 786669 (ReAct) and No. 825377 (UNI-
CORE), by the United States Oﬃce of Naval Research
(ONR) under contracts N00014-17-1-2782 and N00014-
17-S-B010 “BinRec”, by Intel Corporation through the
Side Channel Vulnerability ISRA, and by the Netherlands
Organisation for Scientiﬁc Research through grants NWO
639.023.309 VICI “Dowsing”, NWO 639.021.753 VENI
“PantaRhei”, and NWO 016.Veni.192.262. This paper re-
ﬂects only the authors’ view. The funding agencies are
not responsible for any use that may be made of the
information it contains.
(cid:18)(cid:17)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
References
[1] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and
M. Hamburg, “Meltdown: Reading Kernel Memory from User
Space,” in USENIX Security’18.
[2] P. Kocher, J. Horn, A. Fogh, , D. Genkin, D. Gruss, W. Haas,
M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz,
and Y. Yarom, “Spectre Attacks: Exploiting Speculative Exe-
cution,” in S&P’19.
[3] J. V. Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci,
F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and
R. Strackx, “Foreshadow: Extracting the Keys to the Intel SGX
Kingdom with Transient Out-of-Order Execution,” in USENIX
Security’18.
[4] E. M. Koruyeh, K. N. Khasawneh, C. Song, and N. Abu-
Ghazaleh, “Spectre Returns! Speculation Attacks using the
Return Stack Buﬀer,” in USENIX WOOT’18.
[5] V. Kiriansky and C. Waldspurger, “Speculative buﬀer over-
ﬂows: Attacks and Defenses,” in arXiv’18.
[6] P. Turner, “Retpoline: a Software Construct for Preventing
Branch Target Injection,” https://support.google.com/faqs/
answer/7625886, Jan 2018.
[8]
Pizlo,
Spectre
“What
WebKit,”
and Meltdown Mean
https://webkit.org/blog/8048/
[7] F.
For
what-spectre-and-meltdown-mean-for-webkit/, Jan 2018.
“Linux: L1TF - L1 Terminal Fault,”
kernel.org/doc/html/latest/admin-guide/l1tf.html#
mitigation-control-kvm Retrieved 15.10.2018.
“KPTI - Linux Documentation,” https://www.kernel.org/doc/
Documentation/x86/pti.txt Retrieved 15.10.2018.
https://www.
[9]
[10] S. van Schaik, C. Giuﬀrida, H. Bos, and K. Razavi, “Malicious
Management Unit: Why Stopping Cache Attacks in Software
is Harder Than You Think,” in USENIX Security’18.
[11] D. Gullasch, E. Bangerter, and S. Krenn, “Cache Games–
Bringing Access-Based Cache Attacks on AES to Practice,” in
S&P’11.
[12] Y. Yarom and K. Falkner, “FLUSH + RELOAD: A High
Resolution, Low Noise, L3 Cache Side-Channel Attack.” in
USENIX Security’14.
[13] D. A. Osvik, A. Shamir, and E. Tromer, “Cache Attacks and
Countermeasures: the Case of AES,” in Cryptographers Track
at the RSA Conference. Springer, 2006, pp. 1–20.
[14] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A Shared
Cache Attack that Works Across Cores and Deﬁes VM
Sandboxing–and its Application to AES,” in S&P’15.
[15] M. Kayaalp, D. Ponomarev, N. Abu-Ghazaleh, and A. Jaleel,
“A High-Resolution Side-Channel Attack on Last-Level
Cache,” in DAC’16.
[16] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-Level
Cache Side-Channel Attacks are Practical,” in S&P’15.
[17] R. Tomasulo, “An Eﬃcient Algorithm for Exploiting Multiple
Arithmetic Units,” IBM Journal of Research and Development,
1967.
[18] M. E. Thomadakis, “The Architecture of the Nehalem Proces-
sor and Nehalem-EP SMP Platforms,” 2011.
[19] D. W. Clift, D. D. Boggs, and D. J. Sager, “Processor with
Registers Storing Committed/Speculative Data and a RAT
State History Recovery Mechanism with Retire Pointer,” Oct
2003, US Patent 6,633,970.
[20] D. D. Boggs, S. Weiss, and A. Kyker, “Branch Ordering Buﬀer,”
Sep 2004, US Patent 6,799,268.
[21] J. M. Abramson, D. B. Papworth, H. H. Akkary, A. F. Glew,
G. J. Hinton, K. G. Konigsfeld, and P. D. Madland, “Out-
Of-Order Processor With a Memory Subsystem Which Han-
dles Speculatively Dispatched Load Operations,” Oct 1995, US
Patent 5,751,983.
[22] G. N. Hammond and C. C. Scaﬁdi, “Utilizing an Advanced
Load Address Table for Memory Disambiguation in an Out of
Order Processor,” Dec 2003, US Patent 7,441,107.
(cid:18)(cid:17)(cid:19)
[23] H.-S. Kim, R. S. Chappell, C. Y. Soo, and S. T. Srinivasan,
“Store Address Prediction for Memory Disambiguation in a
Processing Device,” Sep 2013, US Patent 9,244,827.
[24] V. Mekkat, O. Margulis, J. M. Agron, E. Schuchman,
S. Winkel, Y. Wu, and G. Dankel, “Method and Apparatus for
Recovering From Bad Store-To-Load Forwarding in an Out-Of-
Order Processor,” Dec 2015, US Patent 9,996,356.
[25] T. Kurts, Z. Wayner, and T. Bojan, “Apparatus and Method for
Bus Signal Termination Compensation During Detected Quiet
Cycle,” Dec 2002, US Patent 6,842,035.
[26] A. Koker, T. A. Piazza, and M. Sundaresan, “Scatter/Gather
Capable System Coherent Cache,” May 2013, US Patent
9,471,492.
[27] A. Yoaz, M. Erez, R. Ronen, and S. Jourdan, “Speculation
Techniques for Improving Load Related Instruction Schedul-
ing,” in ISCA’99.
[28] H. Akkary, J. M. Abramson, A. F. Glew, G. J. Hinton,
K. G. Konigsfeld, P. D. Madland, M. S. Joshi, and B. E. Lince,
“Methods and Apparatus for Caching Data in a Non-Blocking
Manner Using a Plurality of Fill Buﬀers,” Oct 1996, US Patent
5,671,444.
[29] H. Akkary, J. M. Abramson, A. F. Glew, G. J. Hinton,
K. G. Konigsfeld, P. D. Madland, M. S. Joshi, and B. E. Lince,
“Cache Memory System Having Data and Tag Arrays and
Multi-Purpose Buﬀer Assembly With Multiple Line Buﬀers,”
Jul 1996, US Patent 5,680,572.
[30] S. Palanca, V. Pentkovski, S. Tsai, and S. Maiyuran, “Method
and Apparatus for Implementing Non-Temporal Stores,” Mar
1998, US Patent 6,205,520.
[31] S. Palanca, V. Pentkovski, and S. Tsai, “Method and Apparatus
for Implementing Non-Temporal Loads,” Mar 1998, US Patent
6,223,258.
[32] J. M. Abramson, H. Akkary, A. F. Glew, G. J. Hinton, K. G.
Koningsfeld, and P. D. Madland, “Method and Apparatus for
Performing Load Operations in a Computer System,” Dec 1997,
US Patent 5,694,574.
[33] M. Bodas, G. J. Hinton, and A. F. Glew, “Mechanism to
Improved Execution of Misaligned Loads,” Dec 1998, US Patent
5,854,914.
[34] J. M. Abramson, H. Akkary, A. F. Glew, G. J. Hinton,
K. G. Konigsfeld, and P. D. Madland, “Method and Apparatus
for Blocking Execution of and Storing Load Operations during
their Execution,” Mar 1999, US Patent 5,881,262.
[35] A. Glew, N. Sarangdhar, and M. Joshi, “Method and Apparatus
for Combining Uncacheable Write Data Into Cache-Line-Sized
Write Buﬀers,” Dec 1993, US Patent 5,561,780.
[36] M. S. Joshi, A. F. Glew, and N. V. Sarangdhar, “Write Combin-
ing Buﬀer for Sequentially Addressed Partial Line Operations
Originating From a Single Instruction,” May 1995, US Patent
5,630,075.
[37] S. Palanca, V. Pentkovski, N. L. Cooray, S. Maiyuran, and
A. Narang, “Method and System for Optimizing Write Com-
bining Performance in a Shared Buﬀer Structure,” Mar 1998,
US Patent 6,122,715.
[38] J. D. Dundas, “Repair of Mis-Predicted Load Values,” Mar
2002, US Patent 6,883,086.
[39] Y.-K. Chen, C. J. Hughes, and J. M. Tuck, III, “System and
Method for Cache Coherency in a Cache With Diﬀerent Cache
Location Lengths,” Dec 2004, US Patent 7,454,576.
[40] D. Kanter, “Intel’s Haswell CPU microarchitecture,” 2012.
[41]
Intel, “Intel 64 and IA-32 Architectures Optimization Reference
Manual,” Jun 2016.
Intel, “Write Combining Memory Implementation Guidelines,”
1998.
[42]
[43] A. F. Glew and G. J. Hinton, “Method and Apparatus for Pro-
cessing Memory-Type Information Within a Microprocessor,”
Dec 1996, US Patent 5,751,996.
Intel,
Store
3639
CVE-2018-
https://software.intel.
“Speculative
/
INTEL-SA-00115,”
Bypass
[44]
/
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
com/security-software-guidance/software-guidance/
speculative-store-bypass Retrieved 15.10.2018.
[67]
“Re-enable SharedArrayBuﬀer + Atomics,” https://bugs.
chromium.org/p/chromium/issues/detail?id=821270.
[45] S. Palanca, V. Pentkovski, S. Maiyuran, L. Hacking, R. A. Gol-
liver, and S. S. Thakkar, “Synchronization of Weakly Ordered
Write Combining Operations Using a Fencing Mechanism,”
Mar 1998, US Patent 6,073,210.
[46] S. Palanca, S. A. Fischer, S. Maiyuran, and S. Qawami,
“MFENCE and LFENCE Micro-Architectural Implementation
Method and System,” Jul 2002, US Patent 6,651,151.
[47] L. E. Hacking and D. Marr, “Synchronization of Load Opera-
tions Using Load Fence Instruction in Pre-Serialization/Post-
Serialization Mode,” Feb 2001, US Patent 6,862,679.
[48] L. E. Hacking and D. Marr, “Globally Observing Load Opera-
tions Prior to Fence Instruction and Post-Serialization Modes,”
Jan 2004, US Patent 7,249,245.
[49] A. Kivity, Y. Kamay, D. Laor, U. Lublin, and A. Liguori,
“KVM: the Linux Virtual Machine Monitor,” in Proceedings
of the Linux symposium, vol. 1. Dttawa, Dntorio, Canada,
2007, pp. 225–230.
[50] D. Hepkin, “Hyper-V HyperClear Mitigation for L1 Terminal
https://blogs.technet.microsoft.com/virtualization/
Fault,”
2018/08/14/hyper-v-hyperclear/, Aug 2018.
[51] V. van der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss,
C. Maurice, G. Vigna, H. Bos, K. Razavi, and C. Giuﬀrida,
“Drammer: Deterministic Rowhammer Attacks on Mobile Plat-
forms,” in CCS’16.
[52] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuﬀrida, and
H. Bos, “Flip Feng Shui: Hammering a Needle in the Software
Stack,” in SEC’16.
[53] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js:
A Remote Software-Induced Fault Attack in JavaScript,” in
DIMVA’16.
[54] E. Bosman, K. Razavi, H. Bos, and C. Giuﬀrida, “Dedup Est
Machina: Memory Deduplication as an Advanced Exploitation
Vector,” in SP’16.
[55] M. Seaborn and T. Dullien, “Exploiting the DRAM Rowham-
mer Bug to Gain Kernel Privileges,” in BHUS’15.
[56] P. Frigo, C. Giuﬀrida, H. Bos, and K. Razavi, “Grand Pwning
Unit: Accelerating Microarchitectural Attacks with the GPU,”
in S&P’18.
[57] L. Cojocar, K. Razavi, C. Giuﬀrida, and H. Bos, “Exploit-
ing Correcting Codes: On the Eﬀectiveness of ECC Memory
Against Rowhammer Attacks,” in S&P’19.
[58] A. Tatar, R. K. Konoth, E. Athanasopoulos, C. Giuﬀrida,
H. Bos, and K. Razavi, “Throwhammer: Rowhammer Attacks
over the Network and Defenses,” in USENIX ATC’16.
[59] A. Tatar, C. Giuﬀrida, H. Bos, and K. Razavi, “Defeating
Software Mitigations against Rowhammer: A Surgical Precision
Hammer,” in RAID’18.
[60] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuﬀrida,
“ASLR on the Line: Practical Cache Attacks on the MMU,”
in NDSS’17.
[61] J. Van Bulck, F. Piessens, and R. Strackx, “SGX-step: A Practi-
cal Attack Framework for Precise Enclave Execution Control,”
in SysTEX’17.
[62] T. C. Projects, “Mitigating Side-Channel Attacks,” https://
www.chromium.org/Home/chromium-security/ssca Retrieved
31.12.2018.
[63] M. Bynens, “Untrusted Code Mitigations,” https://v8.dev/
docs/untrusted-code-mitigations, Jan 2018.
[64] L. Wagner, “Mitigations Landing for New Class of Tim-
ing Attack,” Jan 2018, https://blog.mozilla.org/security/
2018/01/03/mitigations-landing-new-class-timing-attack/ Re-
trieved 31.12.2018.
[65] T. Ritter, “Firefox - Fuzzy Timers Changes,” Oct 2018, https:
//hg.mozilla.org/mozilla-central/rev/77626c8d6bee.
[66] D. Kohlbrenner and H. Shacham, “Trusted Browsers for Un-
certain Times.” in USENIX Security’16.
[68] R. Mcilroy, J. Sevcik, T. Tebbi, B. L. Titzer, and T. Verwaest,
“Spectre is Here to Stay: An Analysis of Side-Channels and
Speculative Execution.”
“Process
github.io/ﬁrefox-browser-architecture/text/
0012-process-isolation-in-ﬁrefox.html.
https://mozilla.
Firefox,”
Isolation
[69]
in
[70] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai,
“SGXPECTRE Attacks: Leaking Enclave Secrets via Specula-
tive Execution.”
[71] G. Maisuradze and C. Rossow, “ret2spec: Speculative Execu-
tion using Return Stack Buﬀers,” 2018.
[72] J. Horn, “Speculative Store Bypass,” https://bugs.chromium.
[73]
“Rogue
org/p/project-zero/issues/detail?id=1528, May 2018.
Intel,