title:PayBreak: Defense Against Cryptographic Ransomware
author:Eugene Kolodenker and
William Koch and
Gianluca Stringhini and
Manuel Egele
PayBreak : Defense Against Cryptographic Ransomware
Eugene Kolodenkerz⋆, William Koch⋆, Gianluca Stringhiniy, and Manuel Egele⋆
⋆Boston University, zMITRE, yUniversity College London
{eugenek, wfkoch, megele}@bu.edu, PI:EMAIL
ABSTRACT
Similar to criminals in the physical world, cyber-criminals
use a variety of illegal and immoral means to achieve mone-
tary gains. Recently, malware known as ransomware started
to leverage strong cryptographic primitives to hold victims’
computer (cid:12)les \hostage" until a ransom is paid. Victims,
with no way to defend themselves, are often advised to
simply pay. Existing defenses against ransomware rely on
ad-hoc mitigations that target the incorrect use of cryptog-
raphy rather than generic live protection. To (cid:12)ll this gap
in the defender’s arsenal, we describe the approach, proto-
type implementation, and evaluation of a novel, automated,
and most importantly proactive defense mechanism against
ransomware. Our prototype, called PayBreak, eﬀectively
combats ransomware, and keeps victims’ (cid:12)les safe.
PayBreak is based on the insight that secure (cid:12)le encryp-
tion relies on hybrid encryption where symmetric session
keys are used on the victim computer. PayBreak observes
the use of these keys, holds them in escrow, and thus, can
decrypt (cid:12)les that would otherwise only be recoverable by
paying the ransom. Our prototype leverages low overhead
dynamic hooking techniques and asymmetric encryption to
realize the key escrow mechanism which allows victims to
restore the (cid:12)les encrypted by ransomware. We evaluated
PayBreak for its eﬀectiveness against twenty hugely suc-
cessful families of real-world ransomware, and demonstrate
that our system can restore all (cid:12)les that are encrypted by
samples from twelve of these families, including the infa-
mous CryptoLocker, and more recent threats such as Locky
and SamSam. Finally, PayBreak performs its protection
task at negligible performance overhead for common oﬃce
workloads and is thus ideally suited as a proactive online
protection system.
Keywords
ransomware, malware, hybrid cryptosystem, key vault, cy-
ber crime
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c⃝ 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx:doi:org/10:1145/3052973:3053035
1.
INTRODUCTION
The goal of cyber-criminals, akin to real world criminals,
is commonly monetary gain. Thus, over recent years the
underground economy developed a multitude of approaches
that allow cyber-criminals to make money. Attackers sell
exploit kits [21] to infect victims via drive-by-download at-
tacks, they operate exploit-as-a-service schemes [30], estab-
lish and rent out botnets, and even oﬀer oﬀ-the-shelf so-
lutions to run spam campaigns including customer service.
Besides such established enterprises, so-called ransomware
(an amalgamation of the words ransom and malware) has
been established as another vector to enhance the pro(cid:12)ts of
cyber-criminals. Ransomware is malware that prevents the
victim user’s access to a valuable resource and extorts a ran-
som payment to reestablish access. Ransomware comes in
many forms and shapes. This includes, for example, mali-
cious screen lockers on mobile devices or crypto-based ran-
somware that encrypts the victim’s (cid:12)le with state-of-the-
art cryptographic algorithms.
It is this crypto-based ran-
somware that we target in this work. Hence, all subsequent
references to ransomware in this paper refer to the class
of ransomware that uses cryptography to encrypt user (cid:12)les
for ransom. As with many benign software projects, early
versions of crypto-based ransomware were unsuccessful be-
cause the malware authors decided to ignore the popular
adage of \don’t roll your own crypto." For example, weak
home-brew crypto was responsible for the short lifetime of
the (cid:12)rst wave of GPCode [38]. However, the malware au-
thors quickly learned their lesson and increasingly employ
strong cryptographic algorithms which lead the Federal Bu-
reau of Investigation to state that \To be honest, we often
advise people just to pay the ransom." [6].
Recently, ransomware has drawn the attention of the re-
search community and security vendors alike. However, all
existing systems that try to address the threat of ransomware
do so reactively. That is, provided a sample, existing sys-
tems can identify and protect from similar samples. For
example, Kharraz et al. [34] proposed a mechanism that ex-
ecutes malware in an instrumented environment and accu-
rately identi(cid:12)es ransomware. Unfortunately, the proposed
system only detects ransomware after the user’s (cid:12)les have
been encrypted. Thus, (cid:12)les that get encrypted before the
ransomware is identi(cid:12)ed as such remain inaccessible to the
user. Additionally, collaborations between law enforcement
and security vendors have resulted in tools that can reverse
the encryption performed by some ransomware samples [8].
While such eﬀorts deserve applause, they are inherently non-
scalable as demonstrated by the plethora of successful ran-
somware families.
We deem the existing techniques that address the threat
of ransomware reactively inadequate. Instead, we propose
a system that allows conscientious users to proactively de-
fend themselves from ransomware attacks. The key bene(cid:12)t
of our system is that it allows victims to recover from ran-
somware infections without paying the ransom. To this end,
we propose a key escrow mechanism that securely stores
cryptographic encryption keys in a key vault. Key escrow
systems are consistently rejected by the research community
for very good reasons. For example, government-mandated
key escrow would give government agencies access to the
cryptographic keys, and thus the ability to infringe on the
user’s privacy by decrypting data that is believed to be cryp-
tographically protected. The stark diﬀerence between such
key escrow systems and the scheme proposed in this work
is that in our system the user has exclusive access to the
cryptographic keys stored in escrow.
In an initial step, the user must generate an asymmet-
ric key pair and add the public key to the system. This
public key is used to encrypt keys that are placed in the
key vault. During normal operation, our system monitors
the programs that execute on a system and intercepts calls
to functions that implement cryptographic primitives. Fur-
thermore, the system captures symmetric encryption keys,
encrypts them with the public key, and stores the result in
the key vault. Once the user gets infected with ransomware
and learns that she should pay a ransom to get access to her
(cid:12)les, she can simply decrypt the key vault with her private
key and decrypt the (cid:12)les without making any payments.
We implemented PayBreak as a prototype of our ap-
proach for the common ransomware target, Windows 7, al-
though no special features of the Windows 7 operating sys-
tem are used in our system. Additionally, we evaluated its
eﬀectiveness against a set of 107 recent ransomware samples
from 20 distinct families. Furthermore, we performed mi-
cro benchmarks to measure the performance impact of our
instrumentation as well as macro benchmarks to measure
the activity that the key vault would receive during regular
oﬃce tasks. While the micro benchmarks result in signi(cid:12)-
cant overhead for symmetric crypto operations, the macro
benchmarks indicate that cryptographic operations are rare
enough that the overhead created by our system (4.1ms) is
below the human perception threshold.
In summary, this paper makes the following novel contri-
butions:
(cid:15) We identify salient characteristics that allow us to mit-
igate the threat of modern crypto-based ransomware
(x2).
(cid:15) We propose a key vault mechanism that pro-actively
protects against the threats posed by crypto-based ran-
somware (x3).
(cid:15) We implemented the proposed mechanism in a system
called PayBreak for the Windows 7 operating system
(x4).
(cid:15) We evaluate PayBreak by running 107 ransomware
samples in a controlled environment and demonstrate
that PayBreak successfully recovers all (cid:12)les encrypted
by any of twelve active and economically hugely suc-
cessful ransomware families (x5.2).
(cid:15) We also assess the performance impact of PayBreak
based on micro benchmarks that target our modi(cid:12)ca-
tions speci(cid:12)cally and macro benchmarks that capture
the impact of PayBreak on more realistic workloads
(x5.3).
2. BACKGROUND
In this section we (cid:12)rst discuss the typical (cid:13)ow of mod-
ern ransomware and the practical limitations that aﬀect the
design space for ransomware authors. We also discuss the
threat model that our system is designed to operate under.
2.1 Practical considerations for ransomware
The goal of ransomware is to deny victims access to their
data and extort a ransom payment in exchange of reestab-
lishing access. The authors of ransomware soon realized
that cryptography provides a reliable way to run such an
extortion racket. Broadly speaking, ransomware can choose
between symmetric (i.e., secret key) and asymmetric (i.e.,
public key) cryptography. Early versions relied on symmet-
ric encryption and the anti-malware community was quick
in reverse engineering the malware and providing decryp-
tion tools [41]. This was only possible because in symmetric
encryption schemes the same key must be used to encrypt
and decrypt data. That is, the attacker did not have an
advantage over the victim as the exact same key material
was available to the attacker and the victim (embedded in
the malware). However, early setbacks did not deter ran-
Instead they evolved and turned their
somware authors.
attention to asymmetric cryptography.
In an asymmetric
encryption setting the adversary encrypts the victim’s data
under a public key, but knowledge of this key does not allow
the victim to regain access to the data. Instead, the adver-
sary holds on to the private key and oﬀers the private key
to the victim in exchange for the ransom.
Modern ransomware borrows techniques from well estab-
lished benign cryptography suites such as OpenPGP [23] or
S/MIME [39] and employs so-called hybrid cryptosystems.
In a hybrid cryptosystem, the sender chooses a random sym-
metric key for each message (e.g., for each (cid:12)le that needs to
be encrypted) and encrypts each message (or (cid:12)le) under this
key. This one time symmetric key is commonly referred to
as a session key. Subsequently, a hybrid cryptosystem will
encrypt the symmetric message-speci(cid:12)c key with the (asym-
metric) public key of the recipient. Thus, the performance
hungry asymmetric cryptographic operations are only re-
quired to encrypt the small symmetric key regardless of the
size of the encrypted content. For example, AES, arguably
the most popular contemporary block cipher, supports key
sizes of 128, 192, and 256 bits which can be trivially en-
crypted with RSA. The encrypted symmetric key is then
combined with the encrypted content and transmitted to
the receiver. To decrypt the data, the receiver (cid:12)rst uses her
private key to decrypt the encrypted symmetric key. With
the symmetric key in hand, the recipient can then simply de-
crypt the cipher text of the data into its original plain text.
In a ransomware attack, the attacker generates the asym-
metric key pair on his command and control infrastructure.
On the victim’s machine, the malware generates (and more
importantly uses) a unique symmetric session key for each
(cid:12)le that is encrypted. The session key is encrypted with the
attacker’s public key and stored together with the encrypted
(cid:12)le contents. The attacker then oﬀers to sell the private key
for the stated ransom.
2.2 Hybrid Cryptography
AE = (K;E;D) consists of three algorithms where K is a key
generation algorithm, E is the encryption algorithm, and D
is a decryption algorithm. An asymmetric key pair consist-
ing of public key pk and private key sk is generated as
More formally, an asymmetric encryption scheme
(pk; sk) $  K
(1)
A plain text message M is encrypted into a cipher text
message C by an encryption algorithm E under public key
pk as
C = Epk(M )
(2)
while adhering to the above stated limitation that jMj <
jpkj1. Of course, to be considered correct, an asymmetric
encryption scheme must also correctly decrypt encrypted
messages and thus satisfy
Dsk(Epk(M )) = M
(3)
As explained above, a hybrid cryptosystem combines an
asymmetric encryption scheme AE = (K;E;D) and a sym-
metric encryption system SE = ( _K; _E; _D), such that for each
message M a new symmetric encryption key K $  _K is gen-
erated at random and
C′
= Epk(K)jj _EK (M )
(4)
As Equation 4 illustrates, the symmetric key K is pro-
tected (encrypted) with the public key pk. In a ransomware
setting the messages encrypted under the hybrid cryptosys-
tem are (cid:12)les on a victim’s computer. Thus, if the attacker
generates (pk; sk) according to Equation 1 on his command
and control infrastructure and only communicates pk to the
malware infecting the victim, the strength of the result-
ing ransomware racket is equal to the security of the hy-
brid cryptosystem. It is based on this observation that a-
posteriori rescue attempts of user (cid:12)les held ransom is chal-
lenging at best. Therefore, instead of simply detecting that
a victim computer is infected with ransomware, we provide
a protection mechanism that sidesteps the challenges of the
strong cryptographic primitives employed by modern ran-
somware samples.
To this end, we leverage the following insights. On the
victim’s machine we cannot observe the asymmetric key gen-
eration algorithm K. However, frequently we have access to
the symmetric key generation algorithm _K and, more im-
portantly, we can observe the use of the session key during
_EK (M ) which must be executed to form C′
in the algorithm
implementing Equation 4. These observations allow us to
capture the symmetric encryption keys that are used to en-
crypt the (cid:12)les and thus reverse the damage done by the
ransomware by trimming oﬀ E(K) from the ciphertext and
applying _DK to the remainder.
While the above discussion seems rather theoretic, mod-
ern ransomware families leverage exactly such hybrid cryp-
tosystems. Strong cryptography must persist through con-
sistent attacks [42]. Thus, many operating system distribu-
tions and platforms contain battle tested implementations
1The inequality for the RSA asymmetric encryption scheme
is slightly stricter: jMj < jpkj (cid:0) 11 bytes.
of cryptographic algorithms. On Windows, one such imple-
mentation is Microsoft’s CryptoAPI. The CryptoAPI is a
secure interface for cryptographic functionality that is guar-
anteed to be present on every Windows installation and thus
makes it trivial for ransomware authors to leverage the ex-
isting functionality.
Appendix A, provides ransomware pseudocode using Mi-
crosoft’s CryptoAPI. Note that both CryptoWall and Cryp-
toLocker, two of the most successful ransomware families,
use exactly the same APIs for their nefarious purposes.
2.3 Threat model
The threat model and assumptions for our proposed sys-
tem are captured in this section. A detailed discussion of
the assumptions and why we deem them realistic is deferred
to the discussion section in x6. Our threat model is based on
modern economically successful ransomware families. Thus,
the threat model considers an attacker who installs malware
on victim computers through an established malware distri-
bution channel. Furthermore, the operating system in our
threat model is trusted and updated. Thus, we assume that
the malware does not elevate privileges, as this would de-
feat any existing in-host protection mechanisms (e.g., anti-