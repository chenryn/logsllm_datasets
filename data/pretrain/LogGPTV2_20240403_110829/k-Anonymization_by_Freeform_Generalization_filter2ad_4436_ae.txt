tion in which its core routine can run at time no longer than Greedy,
since NH gains no beneﬁt by running on larger partitions than the
partitions of size from k to 2k − 1 it employs by default. Thus, we
stick with the partitions the algorithm inherently uses. However, it
would not be fair to assume that all such partitions can be processed
in parallel either; that would require far more machines than those
utilized by the other methods. Instead, we assume that NH can use
the same number of machines in parallel as Greedy, i.e.
the al-
gorithm that employs the largest size and hence smallest number of
partitions among the other three. In other words, we offer to NH the
same parallelism budget as Greedy. The runtime for NH is mea-
sured as the time for running its special partitioning scheme plus
0.11
0.1
0.09
P
C
G
0.08
0.07
0.06
0.05
1.6
1.4
e
m
i
t
NH
Greedy (250)
SortGreedy (150)
Hungarian (100)
30k
90k
60k
120k
dataset size (# of tuples)
(a) GCP vs. size, k = 30
150k
NH (250)
Greedy (250)
SortGreedy (150)
Hungarian (100)
P
C
G
0.13
0.12
0.11
0.1
0.09
0.08
0.07
0.06
2
1.8
e
m
i
t
1.6
NH
Greedy (250)
SortGreedy (150)
Hungarian (100)
30k
90k
60k
120k
dataset size (# of tuples)
(b) GCP vs. size, k = 40
150k
NH (250)
Greedy (250)
SortGreedy (150)
Hungarian (100)
0.14
0.13
0.12
P
C
G
0.11
0.1
0.09
0.08
0.07
2
1.8
e
m
i
t
1.6
NH
Greedy (250)
SortGreedy (150)
Hungarian (100)
30k
90k
60k
120k
dataset size (# of tuples)
(b) GCP vs. size, k = 50
150k
NH (250)
Greedy (250)
SortGreedy (150)
Hungarian (100)
H
N
f
o
1.2
H
N
f
o
1.4
H
N
f
o
1.4
o
i
t
a
r
1
0.8
60k 120k 180k 240k 300k 360k 420k 480k
dataset size (# of tuples)
(d) time vs. size, k = 30
1.2
o
i
t
a
r
1
0.8
60k 120k 180k 240k 300k 360k 420k 480k
dataset size (# of tuples)
(e) time vs. size, k = 40
1.2
o
i
t
a
r
1
0.8
Figure 6: Evaluation under partitioning
60k 120k 180k 240k 300k 360k 420k 480k
dataset size (# of tuples)
(f) time vs. size, k = 50
the time for processing as many tuples as in a single partition used
by Greedy, including assignment extraction by randomization.
We measure the achieved GCP and runtime, as deﬁned above,
for each algorithm. Figure 6 shows our results, as a function of
full data size, for three different values of k. As shown in the
legends, the employed partition size is 100 tuples for Hungarian,
150 for SortGreedy, and 250 for Greedy. Remarkably, under the
same time budget per partition, Greedy achieves better GCP than
SortGreedy, while both of them outperform Hungarian as k grows.
At the same time, Greedy achieves consistently lower GCP than
NH under the same parallelism budget. Figures 6d-f show the run-
time of all methods as a ratio of the runtime of NH. Interestingly,
our methods approach and eventually surpass the runtime of NH as
data size grows. This is due to the fact that NH employs a more de-
manding partitioning scheme, hence its runtime is eventually dom-
inated by the burden of initially partitioning the data set.
8.2 Comparison to optimal solution
We now examine data sets on which the CPLEX MIP solver can
run the optimal solution. This way, we have a chance to assess how
close our algorithms arrive to the optimal GCP . To our knowl-
edge, no such experiments have been performed in any preceding
experimental study on k-anonymization. We randomly select 100
different data sets of 14 tuples from the CENSUS data set of at-
tribute cardinality d = 8 and run all competing techniques for sev-
eral values of the privacy parameter k. We average the results over
the 100 runs. Figure 7a shows our results. The bar charts in the
ﬁgure show the fraction of the GCP difference between k−c (the
worst performer on average) and Optimal each method gains (that
is 1 for Optimal, 0 for k-c), vs. k. When a method achieves worse
GCP than k−c, its bar shows a negative value. Hungarian achieves
consistently the most near-optimal results, followed by SortGreedy
at a very close distance. The minCostFlow method achieves, as ex-
pected, the optimal result for k = 2, since, for this value of k,
minimizing the GCP metric is tantamount of minimizing the sum
of edge weights selected as the second assignment (the ﬁrst cho-
sen assignment being the self-assignment). However, as k grows,
minCostFlow progressively loses its advantage over other methods.
For k ≥ 6, it fares even worse than NH.
We also measure the average runtime, over 100 runs, as a func-
tion of the number of tuples, for k = 6. Figure 7b presents our
results on logarithmic time axes. * These results show that the run-
time of our three polynomial-time algorithms grows modestly as a
function of data size, while they are positioned between those of
NH and k−c; we will come back to this result later with much
larger data. On the other hand, the runtime of the CPLEX MIP
Solver grows inexorably, as shown in Figure 7b; running this solver
on larger data is a prohibitive task. Therefore, MIP will not be fea-
tured in our subsequent experiments. The usefulness of running
MIP was in leading us to the ﬁnding that our polynomial-time al-
gorithms provide near-optimal solutions indeed.
d=8
1
n
i
a
g
P
C
G
0.5
0
k-concealment
NH
Greedy
SortGreedy
Hungarian
minCostFlow
MIP
)
c
e
s
(
e
m
T
i
10000
100
1
0.01
0.0001
Hungarian
SortGreedy
Greedy
NH
minCostFlow
8
9
10
11
# tuples
12
13
14
(b) runtime vs. size, k = 6, d = 8
-0.5
4
3
2
8
(a) GCP Gain vs. k, d = 8
5
k
6
7
Figure 7: GCP Gain and Runtime on small data
8.3 Effect of k
Next, we study the effect of the k parameter on the compared
methods, on data sets of 1k and 10k tuples from the CENSUS data
set of dimensionality d = 8. Figure 8 presents our results, with k
ranging from 10 to 150. These results reconﬁrm the superior per-
formance of our methods in terms of information loss. Remarkably,
the GCP divergence between our methods and those of previous
works is widened as k grows (with up to 41% improvement), while
that between our two greedy methods and Hungarian is narrowed.
SortGreedy achieves practically the same GCP as Hungarian for
0.5
0.4
0.3
P
C
G
0.2
0.1
0
0.2
0.15
P
C
G
0.1
0.05
0
0.2
0.15
P
C
G
0.1
0.05
0
minCostFlow
k-concealment
NH
Greedy
SortGreedy
Hungarian
20
40
60
80 100 120 140
k
(a) GCP vs. k, 1K tuples
k-concealment
NH
Greedy
SortGreedy
Hungarian
2
3
4
6
7
8
5
d
(a) GCP vs. d, k = 30
k-concealment
NH
Greedy
SortGreedy
Hungarian
2
3
4
6
7
8
5
d
(d) GCP vs. d, k = 50
0.3
0.25
0.2
P
C
G
0.15
0.1
0.05
)
d
(
P
C
G
t
n
e
i
t
o
u
q
e
c
n
e
r
e
f
f
i
d
0.06
0.05
0.04
0.03
0.02
0.01
0