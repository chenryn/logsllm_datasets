## 未授权访问添加超级用户
那么在最上面,其实那个登录后台的地方还存在一个问题  
也就是说当我们如果说我们是在真实环境里面,我们是没有这个sql用户表的,那么更不可能去拿着我们的什么md5加密后的东西拿去解密了,那么这里我们还是来到我们的这个后台登录界面抓包看看:
这里我们发现抓取的数据包中并没有什么异常
这个时候我们有两个思路,第一个思路是看能不能修改后台管理员的账号密码,第二个思路就是看能不能自己创建一个拥有权限的用户,然后登录
这里我们在这个目录下:
    D:\phpstudy_pro\WWW\webfaka\web_faka\html\application\admin\controller\Index.php
发现了两个函数:  
1.第一个是pass函数:
    public function pass()
        {
            if (intval($this->request->request('id')) !== intval(session('user.id'))) {
                $this->error('只能修改当前用户的密码！');
            }
            if ($this->request->isGet()) {
                $this->assign('verify', true);
                return $this->_form('SystemUser', 'user/pass');
            }
            $data = $this->request->post();
            if ($data['password'] !== $data['repassword']) {
                $this->error('两次输入的密码不一致，请重新输入！');
            }
            $user = Db::name('SystemUser')->where('id', session('user.id'))->find();
            if (md5($data['oldpassword']) !== $user['password']) {
                $this->error('旧密码验证失败，请重新输入！');
            }
            if (DataService::save('SystemUser', ['id' => session('user.id'), 'password' => md5($data['password'])])) {
                $this->success('密码修改成功，下次请使用新密码登录！', '');
            }
            $this->error('密码修改失败，请稍候再试！');
        }
这个函数对应有一个未授权就可以访问的路由:
    /admin/index/pass
这里我们看到源代码发现要想修改我们的密码,我们必须还是要知道原来的密码,那么这里就行不通了
并且抓包也没有发现任何可更改数据
那么我们再往下看:
    public function info()
        {
            if (intval($this->request->request('id')) === intval(session('user.id'))) {
                return $this->_form('SystemUser', 'user/form');
            }
            $this->error('只能修改当前用户的资料！');
        }
这里还有一个这个info函数,那么我们去访问对应的路由:
发现同样可以访问到,这里也是一个未授权就可以访问到的路由,那么我们看这个路由的作用是用来添加我们用户的,那么这里我们随便添加一个试试看:
这里我们打算去添加一个admin用户
发现这里不可以添加的原因是因为已经有了一个admin用户了,那么我们去添加一个其他用户看看:
成功添加了一位用户,那么我们去登录一下:
这里成功登录了上去,说明我们添加用户成功
但是这里我们可以看到该用户的功能特别的少,那么这里我们应该知道是我们的身份(权限)不对,那么这里我们继续去审计源代码:
这里我们跟进这个_form函数:
    protected function _form($dbQuery = null, $tplFile = '', $pkField = '', $where = [], $extendData = [])
        {
            $db = is_null($dbQuery) ? Db::name($this->table) : (is_string($dbQuery) ? Db::name($dbQuery) : $dbQuery);
            $pk = empty($pkField) ? ($db->getPk() ? $db->getPk() : 'id') : $pkField;
            $pkValue = $this->request->request($pk, isset($where[$pk]) ? $where[$pk] : (isset($extendData[$pk]) ? $extendData[$pk] : null));
            // 非POST请求, 获取数据并显示表单页面
            if (!$this->request->isPost()) {
                $vo = ($pkValue !== null) ? array_merge((array)$db->where($pk, $pkValue)->where($where)->find(), $extendData) : $extendData;
                if (false !== $this->_callback('_form_filter', $vo)) {
                    empty($this->title) || $this->assign('title', $this->title);
                    return $this->fetch($tplFile, ['vo' => $vo]);
                }
                return $vo;
            }
            // POST请求, 数据自动存库
            $data = array_merge($this->request->post(), $extendData);
            if(isset($data['password'])){
                if( !empty($data['password'])) {
                    $data['password'] = md5($data['password']);
                }else{
                    unset($data['password']);
                }
            }
            if (false !== $this->_callback('_form_filter', $data)) {
                $result = DataService::save($db, $data, $pk, $where);
                if (false !== $this->_callback('_form_result', $result)) {
                    if ($result !== false) {
                        $this->success('恭喜, 数据保存成功!', '');
                    }
                    $this->error('数据保存失败, 请稍候再试!');
                }
            }
        }
前面没有什么特别的操作,主要是看到这里对我们含有密码的$data数组处理:
这里会将我们的data变量传入进我们的回调函数`_form_filter`中,那么我们跟进这个`_form_filter`函数看看:
这里我们全局搜索这个函数:
最终在这里找到了它:
    public function _form_filter(&$data)
        {
            if ($this->request->isPost()) {
                if (isset($data['authorize']) && is_array($data['authorize'])) {
                    $data['authorize'] = join(',', $data['authorize']);
                }
                if (isset($data['id'])) {
                    unset($data['username']);
                } elseif (Db::name($this->table)->where(['username' => $data['username']])->count() > 0) {
                    $this->error('用户账号已经存在，请使用其它账号！');
                }
            } else {
                $data['authorize'] = explode(',', isset($data['authorize']) ? $data['authorize'] : '');
                $this->assign('authorizes', Db::name('SystemAuth')->where(['status' => '1'])->select());
            }
        }
我们发现这里在我们的$data数组中还有一个authorize的键值,而根据在这个键值的意思这个应该是权限的意思,那么这里我们去看到我们admin用户的该值是多少:
我们可以看到是3,那么这里默认是没有设置这个值的,那么它就是一个普通用户,而我们需要在post的时候自带这个值:
那么我们放包之后 :
注册成功,我们去登录:
成功登录该用户,那么这样我们admin权限用户就伪造成功了
## 任意文件下载:
其实在这个时候,本来是打算已经结束审计的了,但是在功能点处又看到了这样的字样:
那么我们知道,备份一般会存在一个下载备份文件的这么一个操作,我们点进去看,发现果然可以下载我们的备份文件
我们点击下载后抓包:
**发现了一个我们熟悉的可能存在漏洞的形式:下载路径可控**
那么这里我们尝试着去测试一下:
我们成功下载了下来,改为txt格式尝试:
果然读取成功了  
到这里所发现的漏洞点已经全部审计完毕,这次审计也是一般的思路流程:  
后台--->功能点---->漏洞点