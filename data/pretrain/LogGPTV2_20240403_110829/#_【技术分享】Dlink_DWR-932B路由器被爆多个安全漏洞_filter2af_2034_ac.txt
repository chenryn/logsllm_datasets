    .text:0001B5C0                 MOV             R10, R5,LSR#3
    .text:0001B5C4                 LDR             R8, [SP,#0x40+var_38]
    .text:0001B5C8                 SUB             R6, R6, R9,LSL#1
    .text:0001B5CC                 SUB             R7, R7, R11,LSL#1
    .text:0001B5D0                 LDR             R9, [SP,#0x40+var_3C]
    .text:0001B5D4                 LDR             R11, [SP,#0x40+var_30]
    .text:0001B5D8                 ADD             R5, R10, R10,LSL#2
    .text:0001B5DC                 SUB             R5, R4, R5,LSL#1
    .text:0001B5E0                 LDR             R4, [SP,#0x40+var_2C]
    .text:0001B5E4                 MOV             R10, R8,LSR#3
    .text:0001B5E8                 MOV             R8, R9,LSR#3
    .text:0001B5EC                 MOV             R9, R11,LSR#3
    .text:0001B5F0                 ADD             R7, R7, R6
    .text:0001B5F4                 ADD             R10, R10, R10,LSL#2
    .text:0001B5F8                 ADD             R9, R9, R9,LSL#2
    .text:0001B5FC                 MOV             R11, R4,LSR#3
    .text:0001B600                 ADD             R8, R8, R8,LSL#2
    .text:0001B604                 ADD             R7, R7, R5
    .text:0001B608                 SUB             LR, LR, R10,LSL#1
    .text:0001B60C                 SUB             R5, R0, R9,LSL#1
    .text:0001B610                 SUB             R8, R12, R8,LSL#1
    .text:0001B614                 ADD             R11, R11, R11,LSL#2
    .text:0001B618                 ADD             R12, R7, LR
    .text:0001B61C                 SUB             R4, R2, R11,LSL#1
    .text:0001B620                 ADD             R8, R8, R5
    .text:0001B624                 ADD             R5, R8, R4
    .text:0001B628                 ADD             R0, R12, R12,LSL#1
    .text:0001B62C                 ADD             R4, R5, R0
    .text:0001B630                 UMULL           R5, R1, R4, R1
    .text:0001B634                 MOV             R2, R1,LSR#3
    .text:0001B638                 ADD             LR, R2, R2,LSL#2
    .text:0001B63C                 SUB             R8, R4, LR,LSL#1
    .text:0001B640                 LDR             R0, =0x66666667
    .text:0001B644                 RSB             R2, R8, #0xA
    .text:0001B648                 SMULL           R8, R0, R2, R0
    .text:0001B64C                 MOV             R12, R2,ASR#31
    .text:0001B650                 RSB             R1, R12, R0,ASR#2
    .text:0001B654                 ADD             LR, R1, R1,LSL#2
    .text:0001B658                 LDR             R12, =(aHostapd_conf_f - 0x1B670)
    .text:0001B65C                 SUB             R4, R2, LR,LSL#1
    .text:0001B660                 LDR             R2, =(aGet_wpspinI - 0x1B67C)
    .text:0001B664                 ADD             R4, R4, R3
    .text:0001B668                 ADD             R0, PC, R12 ; "hostapd_conf_file_gen"
    .text:0001B66C                 ADD             R0, R0, #0x3C
    .text:0001B670                 MOV             R1, #0x3B
    .text:0001B674                 ADD             R2, PC, R2 ; "Get_WpsPin:%in"
    .text:0001B678                 MOV             R3, R4
    .text:0001B67C                 BL              wifi_filelog
    .text:0001B680                 LDR             R1, =(a08lu - 0x1B690)
    .text:0001B684                 LDR             R0, [SP,#0x40+s] ; s
    .text:0001B688                 ADD             R1, PC, R1 ; "%08lu"
    .text:0001B68C                 MOV             R2, R4
    .text:0001B690                 ADD             SP, SP, #0x1C
    .text:0001B694                 LDMFD           SP!, {R4-R11,LR}
    .text:0001B698                 B               sprintf
    .text:0001B698 ; End of function generate_wlan_wps_enrollee_pin
**  
**
**漏洞细节分析－泄漏NO-IP账号（？）**
文件“/etc/inadyn-mt.conf”(针对dyndns客户端)中包含有一个用户名（alex_hung）和一个硬编码的密码：
    --log_file /usr/inadyn_srv.log
    --forced_update_period 6000
    --username alex_hung
    --password 641021
    --dyndns_system PI:EMAIL
    --alias test.no-ip.com
**漏洞细节分析－HTTP守护进程（qmiweb）中存在多个漏洞**
安全研究专家在测试过程中发现，HTTP守护进程（/bin/qmiweb）中还存在大量的安全漏洞。
各位同学可以参考我之前的分析报告，这个路由器模块使用的也是类似的固件。［[报告传送门](https://pierrekim.github.io/blog/2016-04-04-quanta-lte-routers-vulnerabilities.html)］
关于这些漏洞的利用方式我就不再进行赘述了，感兴趣的同学可以自己动手尝试一下，这部分内容就当作家庭作业啦！
**漏洞细节分析－远程FOTA**
路由器与FOTA服务器进行通信时的凭证数据硬编码在“/sbin/fotad”代码中，我们用IDA对代码进行了分析，具体如下图所示：
函数sub_CAAC中包含有凭证数据，（一个已采用base64进行编码的字符串），路由器需要通过这个凭证来从远程服务器获取固件。
值得注意的是，FOTA守护进程会使用HTTPS协议来尝试获取固件。但是在这篇报告发表时，https://qdp:PI:EMAIL/qdh/ispname/2031/appliance.xml
的SSL证书已经过期长达一年半之久了。
用户/密码如下所示：
    qdpc:qdpc
    qdpe:qdpe
    qdp:qdp
漏洞细节分析－安全实践方案存在缺陷
你可以从“/etc/init.d/start_appmgr”中看到很多奇怪的shell命令，这些命令全部都是以root权限执行的。具体如下所示：
    if [  -f /sbin/netcfg ]; then
            echo -n "chmod 777 netcfg"
            chmod 777 /sbin/netcfg
    fi
    if [  -f /bin/QNetCfg ]; then
            echo -n "chmod 777 QNetCfg"
            chmod 777 /bin/QNetCfg
    fi
“chmod 777”命令执行后，将会赋予相应文件完整的读/写/执行权限，所以我不太明白制造商为什么要对“/bin/”目录下的文件进行这样的操作。
**漏洞细节分析－UPnP安全问题**
UPnP允许用户动态添加防火墙规则。因为这种做法会带来一定的安全风险，因此设备通常都会对这种操作进行限制，以避免不受信任的客户端添加不安全的防火墙规则。
IPnP的不安全性早在2006年就已经是众所周知的事情了。而该路由器中UPnP程序的安全等级仍然非常的低，处于局域网内的攻击者可以随意修改路由器的端口转发规则。
文件“/var/miniupnpd.conf”是由“/bin/appmgr”程序生成的：
该程序会生成“/var/miniupnpd.conf”：
    ext_ifname=rmnet0
    listening_ip=bridge0
    port=2869
    enable_natpmp=yes
    enable_upnp=yes
    bitrate_up=14000000
    bitrate_down=14000000
    secure_mode=no      # "secure" mode : when enabled, UPnP client are allowed to add mappings only to their IP.
    presentation_url=http://192.168.1.1
    system_uptime=yes
    notify_interval=30
    upnp_forward_chain=MINIUPNPD
    upnp_nat_chain=MINIUPNPD
在配置文件中，并没有对UPnP权限规则进行任何限制。在普通的配置文件中，一般只允许端口号在1024以上的端口进行重定向操作。
    # UPnP permission rules
    # (allow|deny) (external port range) ip/mask (internal port range)
    # A port range is - or  if there is only
    # one port in the range.
    # ip/mask format must be nn.nn.nn.nn/nn
    # it is advised to only allow redirection of port above 1024
    # and to finish the rule set with "deny 0-65535 0.0.0.0/0 0-65535"
    allow 1024-65535 192.168.0.0/24 1024-65535
    deny 0-65535 0.0.0.0/0 0-65535
**总结**
在测试过程中，我们还可以利用一个自定义固件（带有后门）来重写路由器设备的初始固件。如果各位同学感兴趣的话，可以自己动手尝试生成一个带有后门的路由固件。但是由于路由器的默认固件中存在如此之多的安全漏洞，我觉得其实也没必要自己再去制作一个带有后门的自定义固件了。
**参考资料**
－
－
－