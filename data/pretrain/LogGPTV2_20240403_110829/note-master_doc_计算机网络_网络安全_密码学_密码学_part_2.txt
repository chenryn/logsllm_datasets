- 密钥长度为64 bits，有8 bits奇偶校验，有效密钥长度为56 bits。
**安全性**
DES的密钥长度可能会对安全性产生威胁
- 3DES
  - 多重DES就是使用多个密钥利用DES对明文进行多次加密。使用多重DES可以增加密钥量，从而大大提高抵抗穷举密钥搜索攻击的能力
#### 工作模式
根据不同的数据格式和安全性要求, 以一个具体的分组密码算法为基础构造一个分组密码系统的方法
#### AES
- 明文分组可变，128、192、256比特
- 密钥长度可变，各自可独立指定为128、192、256比特。
ECB模式：
将明文分成固定长度的块，每个块都使用相同的密钥独立加密，各个块直接不会链接，如果使用相同的密钥加密相同的明文块，则得到的密文块也将相同。攻击者可以通过重复发送相同的密文块来模拟合法用户的身份，从而执行一些恶意操作，称为分组重放攻击。这种模式的好处在于易于实现，并且可以并行处理，也不需要维护状态，可以在任何时候加密或解密任何数据块
CBC模式：在加密前需要先对明文进行填充，并且每个块的加密都要使用前一个块的密文进行异或操作，所以需要一个公开的初始向量来加密第一个块。异或运算可以保证运算的时间与复杂度只跟数据的长度有关，而跟具体的数据内容无关。由于异或一次改变的是一位数据，通过构造明文分组或者密文分组，一次改变一位数据，然后把数据交给加密运算或者解密运算来处理，通过观察加密或者解密的结果来推断出明文。如果运算时间复杂度跟数据内容有关，很容易导致计时攻击，这是一种边信道攻击，通过观察运算时间来破解密码。例如Java的字符串默认的equals函数在遍历时发现不一致就直接返回了，这就为攻击带来了机会，安全的比较方式是java.security.MessageDigest#isEqual
利用解密端进行攻击：攻击者利用了填充过程中的漏洞。攻击者在向目标系统发送加密请求时，篡改其中的密文块，观察目标系统对密文块的处理方式，填充过程是可预测的，攻击者可以通过不断尝试篡改密文块并观察错误返回信息，为了避免这种攻击，要避免使用可预测的填充方式、避免消息被穿篡改、同时避免解密过程的错误暴露给客户端。
BEAST 攻击：通过构造大量的明文，观察加密结果，由于块加密模式中相同的明文会被加密成相同的密文块，从而推断出其中的密文内容
#### SM4
是一个分组密码算法，分组长度和密钥长度均为128比特。加密算法与密钥扩展算法都采用32轮非线性迭代结构
## 公钥密码
密钥依据性质划分，将其中的一个向外界公开，称为公钥；另一个则自己保留，称为私钥。公钥(Public key)常用于数据加密（用对方公钥加密）或签名验证（用对方公钥解密），私钥(Private key)常用于数据解密（发送方用接收方公钥加密）或数字签名（用自己私钥加密）
**优点**
难破解
**缺点**
加密速度慢
### RSA
- 密钥生成
选择两个大素数P，q。(例如:每个1024位)
计算n= Pq:，z=(p-1)(q- 1)。
随机选取e (其中e
## 数字签名
- 接收者能够核实发送者对文档的签名；
- 发送者事后不能否认对文档的签名；
- 不能伪造对文档的签名
### RSA签名
使用私钥签名，公钥进行验证
### ElGamal签名
### DSS签名
## 密钥协议
### Diffie-Hellman密钥交换协议
![批注 2020-06-17 090149](/assets/批注%202020-06-17%20090149.png)
### Shamir秘密共享
## 国密算法
- 国密SM1 算法保密 想要使用需要通过特定的安全设备
- 国密SM2 算法公开 基于椭圆曲线问题设计的，属于国家标准，算法公开，加密强度和国际标准的 ECC 相当
- 国密SM4 算法公开 对称加密
## 随机数
真正的随机数通过收集硬件及环境信息来产生，但这会导致使用一次随机数的成本很高，为了降低这个成本，通过引入随机数发生器，也就是随机数种子，可以使用单向散列函数，传入一个私密的信息（种子） + 不会重复的信息（序列数）来得到一个随机数
两类常见的随机数算法：
- Hash-DRBG
- HMAC-DRBG