### Feature Request

#### Current Behavior
When a service is not defined in a module, the following error is thrown:

```
zone.js:522 Unhandled Promise rejection: No provider for XService! ; Zone:  ; Task: Promise.then ; Value: 
Error
    at Error.ZoneAwareError (http://localhost:3000/polyfills.bundle.js:3588:33)
    at ZoneAwareError (http://localhost:3000/polyfills.bundle.js:3585:35)
    at injectionError (http://localhost:3000/vendor.bundle.js:3087:86)
    at noProviderError (http://localhost:3000/vendor.bundle.js:3125:12)
    at ReflectiveInjector_._throwOrNull (http://localhost:3000/vendor.bundle.js:4627:19)
    at ReflectiveInjector_._getByKeyDefault (http://localhost:3000/vendor.bundle.js:4666:25)
    at ReflectiveInjector_._getByKey (http://localhost:3000/vendor.bundle.js:4598:25)
    at ReflectiveInjector_.get (http://localhost:3000/vendor.bundle.js:4467:21)
    at AppModuleInjector.get (ng:///AppModule/module.ngfactory.js:180:107)
    at AppModuleInjector.getInternal (ng:///AppModule/module.ngfactory.js:295:53)
    at AppModuleInjector.NgModuleInjector.get (http://localhost:3000/vendor.bundle.js:5431:44)
    at resolveDep (http://localhost:3000/vendor.bundle.js:12836:45)
    at createClass (http://localhost:3000/vendor.bundle.js:12699:91)
    at createDirectiveInstance (http://localhost:3000/vendor.bundle.js:12530:37)
    at createViewNodes (http://localhost:3000/vendor.bundle.js:13879:49)
```

#### Expected Behavior
I would like the error message to include the class from which the error originated. Specifically, I want to know which class is trying to inject `XService`.

#### Motivation / Use Case for Changing the Behavior
When a module is installed via `npm install`, it can be challenging to debug which `NgModule` is throwing the error. Providing more context about the originating class would significantly improve the debugging experience.

#### Additional Information
- **Angular version:** 4.0.0
- **Language:** TypeScript 2

By including the class name in the error message, developers can more easily identify and resolve the issue, leading to a more efficient development process.