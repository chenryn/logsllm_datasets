Continuously attempts to read a 
message from the server.
Uses the parseMessage procedure defined in the 
protocol module to parse the received message.
Displays the message 
together with the username 
of the message sender.
The initial readLine call has been 
moved out of the while loop.
The isReady procedure determines whether 
reading the value from messageFlowVar will block.
Licensed to   
97
Transferring data using sockets
let message = createMessage("Anonymous", ^messageFlowVar)
asyncCheck socket.send(message)
messageFlowVar = spawn stdin.readLine()
asyncdispatch.poll()
The readLine spawn call has been modified to prevent the readLine procedure from
being executed multiple times in hundreds of threads. This would happen if the
spawn call was placed inside the while statement because the messageFlowVar would
no longer be read synchronously. Now, there is only ever one readLine running in a
separate thread at one time.
 The while loop uses the isReady procedure to check whether the readLine proce-
dure returned a newly read value from the standard input stream. If so, the message is
sent to the server, and the readLine procedure is spawned again. See figure 3.17,
which shows the execution of both the main thread and the readLine thread. Com-
pare it to figure 3.10, which you saw earlier.
 Waiting on the standard input no longer blocks the main thread, allowing the
event loop the time to check for events by calling the poll procedure.
Sends the message to the server. In this case, 
createMessage adds the separator for you.
Uses the createMessage procedure defined in the 
protocol module to create a new message. Getting 
the user’s name is left as an exercise for you.
Calls the event loop 
manually using the 
poll procedure
Spawns readLine in 
another thread, as 
the last one has 
returned with data
Figure 3.17
The nonblocking parallel execution of client.nim)
Data fully read 
readLine Thread 
return message 
spawn
isReady
false
true
send(message)
Process IO events for up to 500ms 
Thread
Blocked
spawn
Main Thread
poll()
Licensed to   
98
CHAPTER 3
Writing a chat application
For completeness, here’s the full code listing for client.nim. The changes made in this
section are shown in bold. 
import os, threadpool, asyncdispatch, asyncnet
import protocol
proc connect(socket: AsyncSocket, serverAddr: string) {.async.} =
echo("Connecting to ", serverAddr)
await socket.connect(serverAddr, 7687.Port)
echo("Connected!")
while true:
let line = await socket.recvLine()
let parsed = parseMessage(line)
echo(parsed.username, " said ", parsed.message)
echo("Chat application started")
if paramCount() == 0:
quit("Please specify the server address, e.g. ./client localhost")
let serverAddr = paramStr(1)
var socket = newAsyncSocket()
asyncCheck connect(socket, serverAddr)
var messageFlowVar = spawn stdin.readLine()
while true:
if messageFlowVar.isReady():
let message = createMessage("Anonymous", ^messageFlowVar)
asyncCheck socket.send(message)
messageFlowVar = spawn stdin.readLine()
asyncdispatch.poll()
THE FINAL RESULTS
That’s all there is to it! You can now compile both the server and the client, and then
run the server and multiple clients. If you send a message from one client, it should dis-
play in the server window but also in the other clients that are connected to the server.
 There’s one small feature missing, and that’s the user names. Currently, the user
name for each client is hardcoded as "Anonymous". Changing this shouldn’t take too
much work, so I’ll leave it as an optional challenge for you.
 Let’s look back at the original use case: asking John and Grace about Game of
Thrones. The discussion looks like this.
Dominik said: What did you guys think about the latest Game of Thrones
episode?
Grace said: I thought Tyrion was really great in it!
John said: I agree with Grace. Tyrion deserves an Emmy for his performance.
After this discussion takes place, each person’s screen should show the same output,
except that each person’s own messages won’t be prefixed by  said where
 is their name.
Listing 3.26
The final client implementation
Listing 3.27
Conversation between John, Grace, and me about Game of Thrones
Licensed to   
99
Transferring data using sockets
To see it in action, try this scenario out for yourself. Set up three clients and send the
messages. The server should display the information in figure 3.18 after this exchange.
 Each client should show a screen similar to the one in figure 3.19.
 If you got lost somewhere along the way, or if you just couldn’t get the code to com-
pile for some reason, take a look at the book’s code examples on GitHub:
https://github.com/dom96/nim-in-action-code.
You can now even send the client binary to one of your friends and have them chat
with you. You may need to do it over your LAN or forward ports on your router for it to
work, though.
 There’s a lot of room for improvement, such as making sure that the clients are
still connected by sending special “ping” messages, or adding the ability to kick users
off the server. I’m sure you’ll come up with other ideas, too. 
Figure 3.18
The server’s output
Figure 3.19
The client’s output
Licensed to   
100
CHAPTER 3
Writing a chat application
3.6
Summary
 The recommended Nim project directory consists of the src, bin, and tests
directories, storing the source code, the executables, and the tests, respectively.
 Command-line arguments can be retrieved using the paramStr procedure and
counted using the paramCount procedure.
 Standard input, accessed via the stdin global variable, can be read using the
readLine procedure.
 Reading from the standard input stream is a blocking operation, which means
the application can’t do any work while it waits for the data to be read.
 A new thread can be used to perform work while another thread is blocked.
 New threads can be created by using spawn.
JSON can be generated and parsed using the json module.
 The doAssert procedure is a simple and easy way to create tests.
 A socket allows data to be transferred over the internet, with asynchronous
sockets ensuring that the application doesn’t become blocked.
 Asynchronous procedures can be created using an async pragma.
 A future is an object that holds a value that will be available at some point in the
future.
 The await keyword can be used to wait for the completion of a future without
blocking.
Licensed to   
101
A tour through
the standard library
Every programming language supports the notion of a library. A library is a collec-
tion of prewritten software that implements a set of behaviors. These behaviors can
be accessed by other libraries or applications via a library-defined interface.
 For example, a music-playback library such as libogg might define play and
stop procedures that start music playing and stop it. The libogg library’s interface
can be said to consist of those two procedures.
 A library such as libogg can be reused by multiple applications, so that the behav-
iors the library implements don’t have to be reimplemented for each application.
 A standard library is one that’s always available as part of a programming lan-
guage. A standard library typically includes definitions of common algorithms, data
structures, and mechanisms for interacting with the OS.
This chapter covers
 Understanding the standard library
 Examining modules in depth
 Getting to know the modules in Nim’s standard 
library
 Using Nim’s standard library modules
Licensed to   
102
CHAPTER 4
A tour through the standard library
 The design of a standard library differs between languages. Python’s standard
library rather famously follows the “batteries included” philosophy, embracing an
inclusive design. C’s standard library, on the other hand, takes a more conservative
approach. As such, in Python you’ll find packages that allow you to process XML, send
email messages, and make use of the SQLite library, whereas in C, you won’t.
 The Nim standard library also follows the “batteries included” philosophy. It’s sim-
ilar to Python in that regard, because it also contains packages for processing XML,
sending email messages, and making use of the SQLite library, amongst a wide range
of other modules. This chapter is dedicated to Nim’s standard library and will show
you some of its most useful parts. In addition to describing what each part of the stan-
dard library does, this chapter presents examples of how each module in the standard
library can be used.
 Figures 4.1 and 4.2 show some of the most useful modules in Nim’s standard
library. The difference between pure and impure modules is explained in section 4.2.
system
Core  
threads
channels
locks
threadpool
macros
Some useful pure modules 
Collections and
algorithms
algorithm
tables
sets
sequtils
String handling
strutils
parseutils
strtabs
unicode
pegs
Operating
system services
os
osproc
times
asyncfile
Parsers  
parseopt
parsecfg
json
xmlparser
htmlparser
Internet
protocols  
httpclient
asynchttpserver
uri
asyncnet
net
Other modules
math
hashes
md5
colors
future
logging
unittest
marshal
Figure 4.1
The most useful pure modules
Licensed to   
103
A closer look at modules
Let’s begin by looking in more detail at what a module is and how modules can be
imported.
4.1
A closer look at modules
The Nim standard library is made up of modules. A module in Nim is a file containing
Nim code, and by default the code inside a module is isolated from all other code.
This isolation restricts which types, procedures, variables, and other definitions are
accessible to code defined in a different module.
 When a new definition is made inside a module, it’s not visible to any other mod-
ules by default. It’s private. But a definition can be made public, which means that it’s
visible to other modules, using the * character. The following example.nim module
defines a moduleVersion variable that’s made public by the * character.
var moduleVersion* = "0.12.0"
var randomNumber* = 42
You might remember the * character from the previous chapter, where I introduced
the * access modifier and used it to export identifiers from the protocol module.
Let’s now take a look at the different ways that modules can be imported.
 You should remember the basic import keyword, which can be used to import the
example.nim module like so.
import example
echo(moduleVersion)
The import keyword does something very straightforward—it imports all the public
definitions from a specified module. But what might not be immediately obvious is
how it finds the specified module.
 The Nim compiler has a configurable list of directories that it searches for modules.
This list is configured in a configuration file normally named nim.cfg. The compiler
may use multiple configuration files, but there’s one defined by the compiler that’s
always used. It usually resides in $nimDir/config, where $nimDir is the path to the Nim
compiler. Listing 4.3 shows what a small part of the default Nim configuration looks
Listing 4.1
Module example.nim
Listing 4.2
Module main.nim
Some useful impure modules 
re
db_mysql
db_sqlite
db_postgres
Figure 4.2
The most useful impure modules
The .nim extension must not be specified.
After importing the example module, you can access 
the moduleVersion variable because it’s public.
Licensed to   
104
CHAPTER 4
A tour through the standard library
like. In the listing, each line specifies a directory that the Nim compiler will look at
when searching for modules.
path="$lib/pure"
path="$lib/impure"
path="$lib/arch"
path="$lib/core"
...
PROJECT CONFIG FILES
You can create a configuration file that’s specific to
your project and use it to customize the behavior of the compiler when com-
piling your project. Create a main.nims file, where main.nim is the name of
the file you’re compiling. The config file must be placed beside your Nim
source code file. You can then place any flags you’d pass on the command
line verbatim in that file, such as --threads:on.
When a module is imported using the import statement, the Nim compiler searches
for files alongside the module that’s doing the importing. If the module isn’t found
there, it searches each of the directories defined in the configuration file. This means
that for the main.nim module in listing 4.2 to compile, the example.nim module in
listing 4.1 should be placed alongside the main.nim module. Figure 4.3 shows how the
compiler searches for modules.
When compiling main.nim, the local example module
and the standard library system module need to be
compiled first, so the compiler will search for those
modules first and compile them automatically.
 Modules can also be placed in subdirectories. For
example, consider the directory structure shown in
figure 4.4.
 With the example module in the misc directory,
the main module needs to be modified as follows.
Listing 4.3
Some of the directories in Nim’s configuration file
$lib is expanded by the Nim compiler to a full path that leads to 
the location where Nim’s standard library has been installed.
The configuration file contains many more options. 
You may wish to take a look at it to see which bits 
of the compiler can be configured.
import foobar 
main.nim
example.nim
Project directory 
Stdlib directory 
...
impure
pure
Not found 
Not found 
Not found 
Figure 4.3
The compiler searches for modules starting in the project’s directory.
main.nim
example.nim
Project directory 
misc
Figure 4.4
The example.nim file 
has been moved into the misc 
directory.
Licensed to   
105
A closer look at modules
import misc/example
echo(moduleVersion)
The misc directory simply needs to be added to the import statement.
4.1.1
Namespacing
Namespaces are common in many programming languages. They act as a context for
identifiers, allowing the same identifier to be used in two different contexts. Language
support for namespaces varies widely. C doesn’t support them, C++ contains an
explicit keyword for defining them, and Python uses the module name as the name-
space. Just like in Python, namespaces in Nim are defined by individual modules.
 To get a better idea of what namespacing is used for, let’s look at an example use
case. Assume that you wish to load images of two separate formats: PNG and BMP. Also
assume that there are two libraries for reading the two types of files: one called libpng
and the other called libbmp. Both libraries define a load procedure that loads the
image for you, so if you want to use both libraries at the same time, how do you distin-
guish between the two load procedures?
 If those libraries are written in C, they would need to emulate namespaces. They’d
do this by prefixing the procedure names with the name of the library, so the proce-
dures would be named png_load and bmp_load to avoid conflicts. C++ versions of
those libraries might define namespaces such as png and bmp, and the load proce-
dures could then be invoked via png::load and bmp::load. Python versions of those
libraries don’t need to explicitly define a namespace—the module name is the name-
space. In Python, if the PNG and BMP libraries define their load procedures in png
and bmp modules, respectively, the load procedures can be invoked via png.load and
bmp.load.
 In Nim, when a module is imported, all of its public definitions are placed in the
namespace of the importing module. You can still specify the fully qualified name, but
doing so isn’t required. This is in contrast to how the Python module system works.
import example
echo(example.moduleVersion)
The module namespace only needs to be specified when the same definition has been
imported from two different modules. Let’s say a new module called example2.nim
was imported, and example2.nim also defines a public moduleVersion variable. In
that case, the code will need to explicitly specify the module name.
var moduleVersion* = "10.23"
Listing 4.4
Importing from a subdirectory
Listing 4.5
Module example2.nim
Specify the module namespace explicitly by writing 
the module name followed by a dot character.
Licensed to   
106
CHAPTER 4
A tour through the standard library
import example, example2
echo("Example's version: ", example.moduleVersion)
echo("Example 2's version: ", example2.moduleVersion)
Compiling and running the code in listing 4.6 will result in the following output:
Example's version: 0.12.0
Example 2's version: 10.23
But suppose you attempt to display the value of moduleVersion without qualifying it.
import example, example2
echo(moduleVersion)
In that case, you’ll receive an error:
main.nim(2,6) Error: ambiguous identifier: 'moduleVersion' -- use a qualifier
You can prevent all the definitions from being imported into the importing module’s
namespace by using a special import syntax.
from example import nil
echo(moduleVersion)
echo(example.moduleVersion)
When you use the from statement, the specific definitions that you want imported can
be listed after the import keyword.
from example import moduleVersion
echo(moduleVersion)
echo(example.randomNumber)
Listing 4.6
Disambiguating identifiers
Listing 4.7
Importing modules into their own namespace
Listing 4.8
Importing only some of the definitions from a module
An import statement can 
import multiple modules. 
You just need to separate 
them with a comma.
Imports the example module 
without importing any of its 
definitions into this file’s namespace
This will no longer work 
because moduleVersion 