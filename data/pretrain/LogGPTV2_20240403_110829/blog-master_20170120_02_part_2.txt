"----->>>---->>>  用户连接数限制: "  
"----->>>---->>>  数据库连接限制: "  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"|                     数据库性能分析                      |"  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"----->>>---->>>  TOP 5 SQL : total_cpu_time "  
"----->>>---->>>  索引数超过4并且SIZE大于10MB的表: "  
"----->>>---->>>  上次巡检以来未使用或使用较少的索引: "  
"----->>>---->>>  数据库统计信息, 回滚比例, 命中比例, 数据块读写时间, 死锁, 复制冲突: "  
"----->>>---->>>  检查点, bgwriter 统计信息: "  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"|                     数据库垃圾分析                      |"  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"----->>>---->>>  表引膨胀检查: "  
"----->>>---->>>  索引膨胀检查: "  
"----->>>---->>>  垃圾数据: "  
"----->>>---->>>  未引用的大对象: "  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"|                     数据库年龄分析                      |"  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"----->>>---->>>  数据库年龄: "  
"----->>>---->>>  表年龄: "  
"----->>>---->>>  长事务, 2PC: "  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"|               数据库XLOG, 流复制状态分析                |"  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"----->>>---->>>  是否开启归档, 自动垃圾回收: "  
"----->>>---->>>  归档统计信息: "  
"----->>>---->>>  流复制统计信息: "  
"----->>>---->>>  流复制插槽: "  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"|                数据库安全或潜在风险分析                 |"  
"|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"  
"----->>>---->>>  密码泄露检查: "  
"----->>>---->>>  简单密码检查: "  
"----->>>---->>>  用户密码到期时间: "  
"----->>>---->>>  SQL注入风险分析: "  
"----->>>---->>>  普通用户对象上的规则安全检查: "  
"----->>>---->>>  普通用户自定义函数安全检查: "  
"----->>>---->>>  unlogged table 和 哈希索引: "  
"----->>>---->>>  剩余可使用次数不足1000万次的序列检查: "  
"----->>>---->>>  触发器, 事件触发器: "  
"----->>>---->>>  检查是否使用了a-z 0-9 _ 以外的字母作为对象名: "  
"----->>>---->>>  锁等待: "  
"----->>>---->>>  继承关系检查: "  
```  
如果数据库系统特别多，应该有重点的进行关注，1、核心业务数据库，2、本身就排在负载TOP的数据库系统。  
[《Use PostgreSQL collect and analyze Operation System statistics》](../201202/20120214_01.md)  
2\. 对可预知的业务数据库、（当然还包括应用服务器等）进行扩容，这个是很有必要的，通常许多业务会在节假日时迎接高峰，例如游戏类业务、社交类业务、电商类业务等。  
3\. 预备一批硬件standby，以便应对春节的即时需要  
4\. 封网，停止变更，通常需要提前数天停止变更，减少因为变更带来的潜在问题。  
例如应用程序变更后，可能新增了一些SQL语句，这些SQL语句本身可能没有优化好，又或者无法预知业务对这些SQL语句的请求量并发量等，导致数据库在重大节假日存在潜在的炸弹。  
5\. 排班。安排好值日，做到7*24小时有DBA可以响应，保持手机畅通，同时确保值班的童鞋可以连接网络。  
6\. 通常值日生在节假日期间一个人要负责的业务比平时负责的业务更广泛，所以对值日生进行值班内容、业务的培训也是很有必要的。  
因此平时的DBA轮岗机制也是很重要的，要绝对避免这样的现象：一个业务只有一位DBA熟悉。  
7\. 宣导，向公司业务方敲锣打鼓的宣导，要进入封网期间了，请大家遵循封网规则，不要在封网期间做越界的事情（比如变更、发布）。  
虽然在制度上和某些IT手段上控制了封网期间的行为，但是难免有漏网之鱼，所以宣导也是很重要的。  
8\. 应急响应还需要包括问题分级手册，常见问题处理方法手册，每个问题需要包含问题现象描述，常见原因描述，处理方法，故障等级预估，责任人，通知流程，响应流程。  
9\. 数据库系统应该按业务系统分级，例如分为核心业务系统、业务保障支撑系统、非关键业务系统等。   
### 3 重大节假日中篇 
1\. 值班，通常分为在线和离线值班，在线和上班差不多，可能要随时关注一些NOC平台的指标，间歇性的填写一些值班报告。  
离线值班指被动的接收告警短信，邮件，发生问题时上线处理。  
2\. 交接班，交接班是非常重要的，通常上一个班的同事会发现一些异常，交代给下一位值班的同事，如果真的遇到问题响应速度和判断效率也更高。  
### 4 重大节假日后篇  
封网结束后，一切又回归正常了。但是有一件很重要的事情别忘记了。  
1\. 复盘  
复盘通常指对封网期间的系统状态进行回顾，要达到几个目的  
1\.1 扩容预估是否合理，同时建议反馈给业务方相应的数据  
1\.2 是否有故障，什么原因导致的，将来如何避免  
1\.3 监控系统是否存在疏漏，将来如何避免  
1\.4 是否有违规变更、发布，将来如何避免  
## 小结  
相信很多公司都有类似的制度，DBA一族加油。  
如果有哪些写得不对或者不够完善，也感谢指出。  
小象Pi吉(PostgreSQL) 和 大象吉Pi(GPDB) 预祝大伙新年快乐。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")