title:StatSym: Vulnerable Path Discovery through Statistics-Guided Symbolic
Execution
author:Fan Yao and
Yongbo Li and
Yurong Chen and
Hongfa Xue and
Tian Lan and
Guru Venkataramani
StatSym: Vulnerable Path Discovery through Statistics-Guided
Symbolic Execution
Fan Yao, Yongbo Li, Yurong Chen, Hongfa Xue, Tian Lan and Guru Venkataramani
Department of Electrical and Computer Engineering
Email: {albertyao, lib, gabrielchen, hongfaxue, tlan, guruv}@gwu.edu
The George Washington University
Abstract—Identifying vulnerabilities in software systems is cru-
cial to minimizing the damages that result from malicious exploits
and software failures. This often requires proper identiﬁcation of
vulnerable execution paths that contain program vulnerabilities
or bugs. However, with rapid rise in software complexity, it has
become notoriously difﬁcult to identify such vulnerable paths
through exhaustively searching the entire program execution
space. In this paper, we propose StatSym, a novel, automated
Statistics-Guided Symbolic Execution framework that integrates
the swiftness of statistical
inference and the rigorousness of
symbolic execution techniques to achieve precision, agility and
scalability in vulnerable program path discovery. Our solution
ﬁrst leverages statistical analysis of program runtime information
to construct predicates that are indicative of potential vulnera-
bility in programs. These statistically identiﬁed paths, along with
the associated predicates, effectively drive a symbolic execution
engine to verify the presence of vulnerable paths and reduce
their time to solution. We evaluate StatSym on four real-world
applications including polymorph, CTree, Grep and thttpd that
come from diverse domains. Results show that StatSym is able to
assist the symbolic executor, KLEE, in identifying the vulnerable
paths for all of the four cases, whereas pure symbolic execution
fails in three out of four applications due to memory space
overrun.
I. INTRODUCTION
Securing software systems has become very challenging
due to the growing software complexity. Prior studies have
shown that there are about 5 to 20 bugs per 1,000 lines of
software code [1]. Exploitation of such bugs and program
vulnerabilities has been a major threat to computer security
and user data safety. Solution approaches,
that effectively
address such threats, need to be aware of program paths
containing vulnerabilities.
Note that various parts of the software code are likely
developed by different programmers over time, and as such,
identifying vulnerable program paths can be difﬁcult. Ad-
ditionally, attackers have become very adept at exploiting
vulnerabilities as soon as they are exposed to them [2]. These
considerations call for an efﬁcient and scalable approach to
analyzing vulnerable program paths in a swift and rigorous
manner.
Prior work on program vulnerable path analysis can be
broadly classiﬁed into three categories [3]: 1. Record and
Replay systems that perform an exact reproduction of the
execution path leading to a certain vulnerability [4], [5],
[6], [7]; 2. Techniques that use random testing (e.g., fuzzing
and statistical methods [8], [9], [10], [11], [12]) relying on
sampling of runtime program states and probabilistic rep-
resentations of knowledge base; 3. Techniques that utilize
formal methods (e.g. symbolic execution and dynamic tainting
analysis [13], [14], [15], [16], [17], [18]) relying on program
models, semantics and logical structures to construct knowl-
edge base.
Unfortunately, all of these prior techniques have some
fundamental limitations. As instances, 1. Record and Replay
requires capturing all program inputs and execution states
and incurs high performance overhead (for logging). Plus,
there is a considerable deployment cost (to monitor various
system components from different vendors), and imprecision
due to data unavailability in certain cases (where users do not
wish to reveal personal details) [19], [20], [21], [22]. 2. Pure
statistical methods rely on probabilistic inference and often
fail to guarantee complete accuracy. Any conclusions derived
from sampling the runtime program states can offer only
limited visibility, and are prone to false alarms [9]. As a result,
considerable human effort is still required to verify the results
from statistical analysis. 3. Formal methods require exhaustive
analysis along all paths in the application code, that can be
prohibitively expensive in terms of time and resources. As
such, strict symbolic execution methods can be less effective
in analyzing software at-scale.
it
In this paper, we propose StatSym, a framework for vul-
nerable path identiﬁcation through Statistics-Guided Symbolic
Execution. StatSym’s efﬁciency stems from a novel integra-
tion of statistical analysis and symbolic execution techniques.
First,
leverages statistical analysis to construct program
predicates (e.g. conditions and assertions of program states that
are indicative of program vulnerability), and then employs a
path construction algorithm to select (and rank) the most likely
execution path responsible for vulnerability. The suspicious
execution path and its associated predicates provide inference
to a symbolic execution module, which will perform statistics-
guided path exploration in a pruned search space (where higher
priorities are assigned to the candidate paths and their close
neighbors) to validate the presence of vulnerable paths.
StatSym harnesses the advantages of both statistical anal-
ysis and symbolic execution techniques to perform rigorous
path detection while maintaining scalability and swiftness. To
the best of our knowledge, this is the ﬁrst work that integrates
statistical analysis and symbolic execution to expedite the
vulnerable path identiﬁcation. We evaluate StatSym using
real-world software code and demonstrate the usefulness of
Fig. 1: Conceptual model of software failure. System failure
may denote security exploitation or program crash.
our approach in terms of both efﬁciency and accuracy in
identifying the actual vulnerable program paths.
Identifying the execution paths and constraint sets that lead
to vulnerable program states has several useful applications
such as (i) automatically patching the buggy code through
hardening of vulnerable paths, (ii) preemptive input ﬁlter-
ing/checking to prevent the program from reaching vulnerable
states that lead to malicious exploitation or termination, and
(iii) providing useful
insights to the programmers during
debugging phases of code development. In real-world software
systems such as web servers (like thttpd [23]), vulnerable
inputs can lead to program crashes or undesired information
outﬂows. Identifying the conditions on program variables
and/or execution paths that can lead to such vulnerable system
states, is helpful to track and mitigate the malicious effects of
such exploits.
In summary, the contributions of this paper are:
1) We design and implement StatSym, a novel automated
framework for vulnerable path identiﬁcation by integrating
statistical analysis and symbolic execution, ultimately reducing
the time to solution.
2) StatSym employs a new vulnerable path construction
algorithm that leverages statistical inference to construct vul-
nerable paths with partial execution logs (typical of most real-
world situations). The suspicious execution paths identiﬁed
by statistical analysis guide symbolic execution to search
vulnerable paths efﬁciently.
3) We evaluate the proposed StatSym using real-world
applications from diverse domains: polymorph [24], CTree,
Grep [25] and thttpd [23]. From our experiments, we observe
that StatSym is able to identify the vulnerable paths in all
the four programs. In polymorph, StatSym speeds up the
vulnerable path discovery by about 15× over pure symbolic
executor, KLEE [13].
4) We perform sensitivity studies on how different program
logging and sampling impact the performance of StatSym.
Our results show that StatSym is able to identify vulnerable
paths and achieve signiﬁcant speedup even at relatively low
sampling rate of 20%.
II. MOTIVATION
Consider the system failure model shown in Figure 1.
During vulnerable path analysis, there are two important points
in the execution path: the fault point and the failure point [26].
Fault point is the root cause of failure (e.g. location where
Program
polymorph
CTree
Grep
thttpd
SLOC
506
3011
6660
7939
Ext. Call
29
50
143
114
Inter. Call
16
52
532
145
G.V.
36
188
718
545
Params.
253
1568
15760
7420
TABLE I: Program source statistics: Source Lines of Code
(SLOC), External Calls (Ext. Call), Internal user-level calls
(Inter. Call), Global Variables (G.V.) and Function parameters
(Params.).
(b) Pure Symbolic Execution
(a) Sample source code
(c) Statistics-Guided Symbolic Execution
Fig. 2: Illustration showing pure symbolic execution’s search
space being reduced greatly through statistics-guided symbolic
execution in StatSym.
a strcpy is performed without checking the length of target
string buffer). Failure point is the point of undesired program
outcome (e.g., program crash or a manifested malicious attack
such as sensitive information exﬁltration). In actual software
systems, these two points can be far away from each other.
For instance, in the case of return-oriented programming [27],
consider a function F with a string P. The fault point can
be a statement in function F that ﬁlls the memory pointed by
P using an adversary’s malicious inputs. The payload injected
by the adversary would only be executed when returning from
function F (e.g., the failure point).
In fact, there are several documented evidences of bugs in
real-world applications that have led to security attacks. In
this paper, we consider four buggy applications: polymorph, a
utility tool for ﬁle name conversion; CTree, a GNU tool for
displaying ﬁle system hierarchy; Grep, a command-line utility
for plain-text search and thttpd, an open source web server.
Thttpd, the server-class application with several thousand
fault pointroot cause......failure pointattack/crashstart pointBareDemoofIEEEtran.clsforConferencesMichaelShellSchoolofElectricalandComputerEngineeringGeorgiaInstituteofTechnologyAtlanta,Georgia30332–0250Email:http://www.michaelshell.org/contact.htmlHomerSimpsonTwentiethCenturyFoxSpringﬁeld,USAEmail:homer@thesimpsons.comJamesKirkandMontgomeryScottStarﬂeetAcademySanFrancisco,California96678-2391Telephone:(800)555–1212Fax:(888)555–1212Abstract—Theabstractgoeshere.I.INTRODUCTIONThisdemoﬁleisintendedtoserveasa“starterﬁle”forIEEEconferencepapersproducedunderLATEXusingIEEE-tran.clsversion1.7andlater.Iwishyouthebestofsuccess.mdsJanuary11,2007A.SubsectionHeadingHereSubsectiontexthere.1)SubsubsectionHeadingHere:Subsubsectiontexthere.II.CONCLUSIONTheconclusiongoeshere.1voidvul_func(inta){2//...3if(a>=3)4assert(0);5}67voidf1(intx){8if(x>=1000||x<0){9//...10}11else{12inti=0;13while(i<x){14vul_func(i);15i++;16}17printf("%d\n",i);18}19}2021voidmain(){22intm;23//setmassymbolic24make_symbolic(&m,25sizeof(m),"sym_m");2627//passmtof128f1(m);29}ACKNOWLEDGMENTTheauthorswouldliketothank...REFERENCES[1]H.KopkaandP.W.Daly,AGuidetoLATEX,3rded.Harlow,England:Addison-Wesley,1999.79121714:114:214:3x≥	1x	≥	2x	≥	31717x≥	0	&&	x	<	100071214:114:214:3x	≥	3lines of code, has numerous documented bugs. Reports from
CVE [28] show that several security vulnerabilities exist in
the release 2.25b that allow remote code execution. Examples
include string replacement buffer overﬂow vulnerability in
a function named defang [28]. CTree and Grep from the
[25], with thousands of lines of code
STONESOUP project
(not
libraries) and several
thousands of
variables and function parameters, have various types of
vulnerabilities including memory corruption and integer over-
ﬂows. polymorph from Bugbench [24], contains a stack buffer
overrun vulnerability.
including external
Identifying vulnerable paths in applications using pure sym-
bolic execution may be impossible due to path explosion prob-
lem. As the scale of the programs become large, the number
of possible exploration paths can quickly grow exponentially
depending on the number of intervening branches, loops and
recursive functions embedded in the program source code.
This would quickly exhaust both computation and storage re-
sources in computer systems, limiting its capability to identify
vulnerable program paths. Table I shows statistics from various
applications in terms of lines of code, number of function calls,
variables and function parameters.
In contrast to symbolic execution, statistical testing meth-
ods rely on logging of program states for analysis. Global
variables, function parameters, return values, and occasionally,
certain local variables are components of such program states.
To keep performance overheads acceptable, existing statistical
methods generally advocate for partial logging through sam-
pling [9]. However, an adverse side-effect of partial/incom-
plete logging is that, it becomes extremely hard for statisti-
cal methods alone to accurately identify the predicates and
program paths that lead to vulnerable execution, resulting in
one or both of the following undesirable outcomes: 1. missed
vulnerable paths (false negatives) due to inadequate statistical
proﬁle data, or 2. weak or wrong predicates due to imperfect
statistical data. Consequently, manual reviews and debugging
of statistical output are still required for further veriﬁcation.
In summary, we note that, a good solution approach to pro-
gram vulnerability analysis requires two qualities: efﬁciency
or effectiveness. Efﬁciency is the ability for a solution to make
swift inference, while Effectiveness deﬁnes the rigorousness
and accuracy of vulnerable path identiﬁcation. We note that
statistical methods are efﬁcient (performance-wise) but are
less effective in locating the exact vulnerable program paths.
On the contrary, pure symbolic execution methods are more
effective with their rigorous analysis and rule-based models,
but the performance overheads are prohibitively high. This
motivates our design of StatSym framework, which pushes
the envelope for vulnerable path identiﬁcation through a
novel
integration of the symbolic execution and statistical
approaches. More precisely, the statistical analysis module
of StatSym constructs predicates and candidate vulnerable
paths that are indicative of program vulnerability and guides
the symbolic execution module through pruning its search