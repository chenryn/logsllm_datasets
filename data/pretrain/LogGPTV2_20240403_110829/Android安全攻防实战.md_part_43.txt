AppPolicyReceiver,class) /
Intent activateDeviceAdminIntent = new Intent (
DevicePo1icyManager ACTION_ADD_DEVICE_ADMIN) :
activateDeviceAdminIntent.putExtra (
DevicePo1LcyManager ,EXTRA_DEVICE_ADMIN,
appPol1cyRece1ver) 
// include optional explanation message
activateDeviceAdminIntent -putExtra (
DevicePo1icyManager ,EXTRA_ADD_EXPLANATIOs,
context getString (R, string devi.ce_admin_activation_
 ( (obessou
return activateDeviceAdminIntent
public Intent getEnableDeviceEncryptionIntent ()(
return new Intent (DevicePolicyManager -ACTIoN_START_
ENCRYPTION) :
5.现在，我们在AppPolicyController中，定义一个强制实施超时锁屏的方法。
我们随意地把超时锁屏最大时间设为3分钟，不过实际操作中，应根据企业
的安全策略对它进行调整。
private static final 1ong MAX_TIME_TILL_LoCK = 3 · 60 * 1000;
public void enforceTimeToLock (Context context) {
DevicePolicyManager devicePolicyManager =
(DevicePolicyManager)  context.
- getSystemServIce (Context DEVICE_POLICY_SERVICE) 
296
---
## Page 315
第9章加密与在开发时使用设备管理策略
ComponentName appPo1icyReceiver = nev Compo
hentName (context,
AppPolicyRecelver, class) :
devLcePolicyManager , setMaximumTimeToLock (appPolicyReceiver,
MAX_TIME_TILL_LOCK) ;
6.根据设备硬件和扩展存储卡的大小，加密设备所需的时间长短也各不相同。
作为强制执行设备加密策略的一部分，我们要用一个方法来检查设备是否已
经被加密了或正在进行加密。
public boolean shouldPromptToEnableDeviceEncryption (Context
context)(
DevicePolicyManagez devicePolicyManager =
(DevicePolicyManager) context
 getSyatemService (Context , DEVICE_POLICY_SERVICE) :
int currentStatus - devicePolicyManager,
getStorageEncryptionStatus () :
1f (currentStatus = DevicePolicyManager,ENCRYPTION_STATUS_
INACTIVE) (
return true>
return false,
7.我们定义一个示例activity，用它展示如何整合AppPolicyController，并帮助
用户按提示操作，启用系统设置并处理响应。
public class AppPolicyDemoActivity extends Activity {
private static final int ENABL&_DEVICE_ADMIN_REQUEST_CODE = 11/
private Static final Int ENABL&_DEVICE_ENCRYPr_REQUEST_CODE =
12;
private AppPolicyController controller:
private TextViev mStatusTextViev,
public void onCreate (Bundle savedInstanceState){
super,onCreate (savedInstanceState) 
setContentView (R. 1ayout , activity_aPP_policy) 
mStatusTextView = (TextView) findViewById (R.。
id.deviceAdminStatus) :
contro1ler = new AppPolicyController () :
297
---
## Page 316
Android安全攻防实战
if (1contro11er, 1sDeviceAdminActive (getApplicat.ionContext ()))
// Launch the activity to have the user enable our admin.
startActivityForResult (
contro1ler
getEnableDeviceAdminIntent (getApplicationConte
×t ()) ,
ENABLE_DEVICE_ADMIN_REQUEST_CODE) /
}else (
mStatusTextViev.setText (*Device admin enabled, yay!");
// admin is already activated so ensure policies are set
controller,enforceTimeToLock (getAppl1cat1onContext ()) :
I.f(controller,shouldPromptToEnableDeviceEncrpytion (this))(
startActivityForResult (
contro1ler- getEnableDeviceEncrpytionIntent () 
ENABL&_DEVICE_ENCRYPT_REQUEST_CODE) /
8.在这里，我们实现了activity 的onActivityResult（..)方法，用以在启动设备管
理和加密时，处理来自系统activity的结果。
Boverride
protected void onActivityResult (int requestCode, int resultCode,
Intent data){
super,onActivityResult (requestCode, resultCode, data) ;
if (requestCode == ENABLE_DEVICE_ADMIN_REQUEST_CODE) [
if (resultCode 1= R&SULT_OK) {
handleDevLcePollcyNotActive () :
)else {
mStatusTextViev,setText (*Device admin enabled*) :
if(controller shouldPromptToEnableDeviceEncrpytion (this))
startActivityForResult(
cont.ro1ler getEnableDeviceEncryptionIntent () ,
&NABLE_DEVICE_ENCRYPT_REQUEST_CODE) :
1 else 1f (requestCode -= ENABLE_DEVICE_ENCRYPT_RSQUEST_CODE
6& resu1tCode != RESULT_OK) (
handleDevicePo1icyttotAct ive () :
298
---
## Page 317
第9章加密与在开发时使用设备管理策略
9.最后，我们添加一个方法，用以处理用户选择不激活这个app作为设备管理
器的情况。在这个例子里，我们只是发布一个消息，但是，你也有可能想阻
止app在未执行企业安全策略的设备上运行。
private void handleDevioePo1icyNotAct.ive ()(
Toast ,makeText (this, R,string.devioe_admin_policy_breach_
message,
Toast .LENGTH_SHORT) show () /
工作原理
AppPolicyDemoActivity展示了一个处理用户交互，并在onActivityResult（..)里
根据启用设备管理的系统activity，回调相应的方法的例子。
AppPolicyController 封装了与DevicePolicyManager之间的交互，并含有用以实
现这些策略的代码。你可以把这些代码放在你的activity里，或者分散地放在多个不
同的地方，不过更好的做法还是保持它的独立性。
定义策略只要在device-admin文件①里的~uses-policies>元素中定义它们就行
了。下面给出的就是在Android manifest 中一个名为“AppPolicyReceiver”的元素里
的 metadata 元素中指定相对应的 device-admin 文件的例子。
尽管app提升了权限而成了设备管理员，但出于安全防范的考虑，app 却不能作
为设备的管理员安装。这个权限是在app安装完毕之后通过使用一个带特定的action
的intent，从一个系统内置的系统activity那里获得的，具体方法如之前
AppPolicyController.getEnableDeviceAdminlntent中的代码所示。这个activity是在
startActivityForResultO中启动的。它会向onActivityResult（...)返回一个回调函数，在
这里，用户可以选择激活或取消。如果设备管理未被激活，则可视为违反了企业安
全策略，因此，如果用户不激活它的话，阻止用户使用app直到他激活设备管理，应
该是最简单的办法了。
①这个device-admin 文件就是指我们在第一步中创建的那个 xml 文件。因为其中的内容总是*..。 i#否
299
---
## Page 318
Android安全攻防实战
我们使用DevicePolicyManager.isActive（..)方法来检查app是不是已经激活为设
备管理员了。通常，这一检查应该放在app的入口点，比如第一个activity中执行。
AppPolicyReceiver的工作是监听与设备管理相关的系统事件。要接收这些事件，
首先必须编写DeviceAdminReceiver的子类，并在Android manifest文件中定义一个
receiver元素。我们用回调函数OnEnabledO来强制执行超时锁屏，因为它不需要用户
额外输入些什么。但是启用设备加密是需要用户确认的。因此，我们就必须要在一
个activity中初始化它。
在用户不让该app继续作为设备管理员时，AppPolicyReceiver 也会收到
onDisabled 事件。当用户禁止 app继续作为设备管理员时，该作何反应，是根据 app
的不同面不同的，就像之前曾说过的，这取决于企业的安全策略。这里也提供了一
个名为“onDisableRcquested”的回调函数，它使我们能向用户显示一条特定的信息，
详细介绍不让app作为设备管理员会引起的后果。在这个例子中，如果执意不许app
继续作为设备管理员的话，我们会擦除app的SharedPreferences，以确保其中的数据
不会被泄露。
进一步说明..
除了在这个实验中使用的策略外，设备管理员还可以执行以下操作：
·强制使用密码：
·规定密码的复杂度（3.0及后续版本中增加了更多的控制）：
·3.0及后续版本中，记录用户曾经输入过的口令：
·恢复出厂设置前密码验证失败的最大次数；
·擦除设备（恢复出厂设置）：
·锁定设备（Lock device）：
·禁用锁屏小部件（4.2以上版本）：
·禁用摄像头（4.0以上版本）。
用户是无法卸载作为设备管理员的 app的。要卸载它，就必须先终止该app继续
作为设备管理员的授权，然后再行卸载。这使你可以在DeviceAdminReceiver.
onDisabled()上执行任何必要的操作，比如，向远端服务器报告事件等。
Android 4.4中引入了新的功能，允许在app的manifest.xml文件中的
标签中指定app需要使用的，可选的设备管理特性。这也使谷歌应用商
店能正确地执行基于特性的过滤。
300
---
## Page 319
第9章加密与在开发时使用设备管理策略
禁用设备摄像头
Android4.0中添加了一个有趣的特性—能够禁用掉摄像头。这一功能对于希
望防止数据泄露的组织是非常有用的。下面这个代码片段演示了如何使用这一策略，
让app禁用掉摄像头。
拓展阅读
。Android开发者参考指南中的设备管理API在https://developer.android.com/
guide/ topics/admin/device-admin.html 中 。
●设备管理示例 app 在https:/developer.android.com/guide/topics/admin/device-
admin.html#sample 中。
·Android开发者培训指南中加强安全与设备管理策略网页在https:/
developer.android.com/training/enterprise/device-management-policy.html 中 
·Android 开发者参考指南中的 FEATURE_DEVICE_ADMIN 在 https://developer.
android.com/reference/android/content/pm/PackageManager.html#FEATURE_DE
VICE_ADMIN 中。
301
---
## Page 320
电子工业出版社
Broadview
博文视点·1T出版旗舰品牌
名
《C++Primer（中文版）（第5版））、《淘宝技术这十年）、《代码大全）
《Windows内核情景分析》、《加密与解密）、《编程之美）、《VC++深人详
为
解）、《SEO实战密码》、《PPT演义）
“圣经”级图书光耀夺目，被无数读者朋友奉为案头手册传世经典。
定
潘爱民、毛德操、张亚勤、张宏江、普辉Zac、李刚、曹江华
专业地
“明星”级作者济济一堂，他们的名字熠熠生辉，与IT业的蓬勃发展紧密相连。
十年的开拓、探索和励精图治，成就博古通今、文画质方、视角独特、点石成金之
计算机图书的风向标杆：博文视点。
品
佳
“风翔于千仍兮，非梧不柄”，博文视点欢迎更多才华横溢、锐意创新的作
者朋友加盟，与大师并列于IT专业出版之藏。
英雄帖
·专业的作者服务。
博文视点自成立以来一直专注于IT专业技术图书的出
江湖风云起，代有才人出。
版，拥有丰富的与技术图书作者合作的经验，并参照IT技术
T界群雄并起，逐鹿中原。
图书的特点，打造了一支高效运转、富有服务意识的编辑出版
博文视点诚道天下技术英豪加入，
团队，我们始终坚持：
指点江山，激扬文字
善待作者—我们会把出版流程整理得清晰简明，为作
传播信息技术，分享T心得
者提供优厚的稿酬服务，解除作者的顾虑，安心写作，展现出最
好的作品。
尊重作者
一我们尊重每一位作者的技术实力和生活习惯，并会参照作者实际的工作、生活节类，
量身制定写作计划，确保合作顺利进行。
提升作者
一我们打造精品图书，更要打造知名作者。博文视点致力于通过图书提升作者的个人品
牌和技术影响力，为作者的事业开拓带来更多的机会。
SEO
PPT
联系我们
博文祝点官网：http:/wwww.broadvew.com.cn
CSDN官方博客：http:blog.csdin.netbroedview2006/
投稿电话：010-5126088888254368
投稿邮箱：PI:EMAIL
请文点日
可
关于本书用纸的温馨提示
亲爱的读者期友：您所拿到的这本书使用的是环保轻型纸！
环保轻型纸在制造过程中添加化学漂白剂较少，颜色更接近于自然状态，具有纸质轻柔、光反射率低、保护读者
视力等优点，其成本略高于胶版纸。为给您带来更好的阅读体验并与读者共同支持环保，我们在没有提高图书定价的
前提下，使用这种纸张。愿我们共同分享纸质图书的阅读乐题！
电子工业出版社博文视点
---
## Page 321
Broadview
博文视点·IT出版旗靓品牌
技术凝聚实力·专业创新出版
本书可以作为初学者熟悉Android系统攻防的快速入门教程，其中的大量操作实例也可以为高手们提供一些
值得借鉴的做法。
赵泽光，2014和2015届Pwn2own黑客大赛winner，Team509创始人之
Pwn2own是全球公认级别最高的黑客大赛
本书针对典型的Android安全攻-防场景，讨论了Androidapp和操作系统中常见的漏润和安全相关缺陷，
并通过实验来说明Android安全技术原理。作者在各个实验中给出了大量攻防示例代码和实用建议，读者可以
直接把它们用在自己项目中解决问题。实用性是本书最大的特色。除了常规工具外，作者还介绍了开源的
Android安全评估框架“drozer”，利用这个工具，你不仅可以“敲一、两个命令“就能完成以前要花很大代价才
能搞定的活，有经验的安全研究人员还能为自己定制开发一些针对特定问题的插件，让自己活得更滋润些。而
且，由于这个框架能够暴露出Androidapp内部实现的许多细节，随着你越来越熟练地掌握这一工具，你对
Android的理解也一定会越来越深入。
对于想要寻找代码加固方案的程序员来说，书中更是针对常见的攻击方法，提供了详细目极富操作性的代码加
固建议，其中不光有系统中自带的库或新增的特性的使用方法，也介绍了不少开源的库，通过对它们的使用，能
把你的软件的安全性提高到一个新的级别。
手把手教会你
安装Android开发工具及相关框架
分析Androidapp及设备的安全性，以及利用Androidapp和Android操作系统中常见漏洞的方法
使用Android安全评估框架，编写定制的漏洞评估工具
利用、逐一列举和分析常见的app级的漏洞
逆向Android应用程序，以寻找安全漏润
用最新的加固技术保护你的Androidapp
·用SSL/TLS保护你的app的网络通信安全
原生应用程序则全部译为“应用”请读者在阅读时注意此区别。
上架建议：网络安全
欢迎投稿
策划编辑：刘皎
电话：010-88254395
邮箱：
Ljiao@phe
om.cn
封面设计：吴海蒸
责佳编辑：
徐津率
新浪微博：@皎丫子
定价：79.00元
---