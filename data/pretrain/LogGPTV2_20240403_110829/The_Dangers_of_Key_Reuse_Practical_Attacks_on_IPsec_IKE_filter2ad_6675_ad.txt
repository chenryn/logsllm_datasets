For 112 bytes, the chance of getting a Case 1 answer is
slightly lower. Now, all padding length byte values above
111 and zero will make the device not respond due to
the padding error. With this choice, the Bleichenbacher
oracle has an additional false negative rate of 56.64 %.
However, this choice eliminates the chance of hitting the
crash condition with 122 bytes. Therefore, we recom-
mend a length of 112 bytes for cIDI , which favors relia-
bility of the attack over speed.
8
Implementing Bleichenbacher Attacks
For our proof-of-concept attack, we focused on our Cisco
test device due to the high false negative rate of the
Huawei oracle.
In order to keep the required time for
an attack below the limits, we built a highly parallelized
Bleichenbacher attacker using Java (cf. Figure 10). This
tool pipelines all steps of the attack through IN and OUT
queues and keeps track of used and unused SAs.
SA States. There is a global limit of 900 Phase 1 SAs
under negotiation per Cisco device in the default con-
ﬁguration. If this number is exceeded, one is blocked.
Thus, one cannot start individual handshakes for each
Bleichenbacher request to issue.
Instead, SAs have to
be reused as long as their error counter allows.
For that, we are pooling SAs and tracking their states.
This is necessary since for example receiving a message
m2 can have three meanings: (1.) The SA has been cre-
576    27th USENIX Security Symposium
USENIX Association
00message0400000000message060000000000ated as a response to a message m1, (2.) a Bleichenbacher
request was not successful and message m2 was a retrans-
mission after one second, or (3.) the SA was not recently
used for a request and message m2 was a retransmission
after ten seconds.
When preparing a Bleichenbacher request, an SA is
taken from the unused SA pool and put into the used SA
pool to ensure that SAs are not mixed up. In a parallel
attack, constant SA state checks at all processing steps
are required. After receiving a response to a Bleichen-
bacher request, we return the corresponding SA to the
unused SA pool.
In our Bleichenbacher attacker, an SA can only be in
one out of eight states. The life of an SA starts with
the generation of an initiator cookie cI. With it, the ﬁrst
message m1 is send and the state of the SA is set to
PRESTART. When we receive a corresponding message
m2, we store the responder cookie value for that SA and
update its state to FRESH. From now on, every time we
receive a message m2 for that SA, we increment its state
from FIRST to FIFTH. After the FIFTH state is reached
and another timeout or Bleichenbacher response is re-
ceived, we set the state to EXHAUSTED and remove the
SA from the unused SA pool.
Packet and Network Pool. For a fast attack, we re-
quire an efﬁcient packet builder and analyzer. The for-
mer only creates either ﬁrst messages (m1) for SA gen-
eration or third messages (m3) for Bleichenbacher re-
quests. The latter analyzes the responses from the Blei-
chenbacher oracle. Our packet builder uses static bytes
sequences for the messages updating only the cookie val-
ues and encrypted nonce payloads. We omit the iden-
tity payload cIDI from m3 in order to save an unnec-
essary public key decryption. The analyzer only needs
the length of a received message and the values of two
bytes at speciﬁc positions in order to distinguish Blei-
chenbacher responses from timeout packets.
For sending and receiving packets with multiple
threads, we use Java NIO DatagramChannels and NIO
Selectors.
Bleichenbacher Producer and Consumer. A spe-
cial producer thread executes the Bleichenbacher attack
against a target and distributes the computations to con-
sumers. We implemented two distribution mechanism
(multiple and single interval) in order to address the dif-
ferent steps in Bleichenbacher’s attack.
The consumers do the expensive computations for the
Bleichenbacher attack.
In order to address the differ-
ent computations in the two attack variants (standard and
optimized), the consumers are provided with a task de-
scription of whether a multiplication or a division of the
ciphertext is required. Other consumers are used to ver-
ify the results from the packet analyzer and to notify the
producer in case a valid padding was found.
Cisco Oracle Simulator.
In order to accelerate our
evaluation process, we ﬁrst queried our test device with
different valid and invalid PKCS #1 v1.5 messages. Af-
ter that, we analyzed its responses and reimplemented
its behavior as a local multi-threaded simulator. Thus,
the speed of ﬁnding valid PKCS #1 v1.5 messages is
only limited by the hardware resources of the attackers’
systems.
8.1 Evaluation of
the Bleichenbacher
IKEv1 Decryption Attack
For the decryption attack from subsection 4.2 on Cisco’s
IKEv1 responder, we need to ﬁnish the Bleichen-
bacher attack in 60 seconds.
If the public key of our
ASR 1001-X router is 1024 bits long, we measured an
average of 850 responses to Bleichenbacher requests per
second. Therefore, an attack must succeed with at most
51,000 Bleichenbacher requests.
Based on this result, we used our Cisco oracle sim-
ulator to measure the percentage of attacks that would
succeed before the time runs out. These results can be
found in Figure 11.
Standard Bleichenbacher.
In total, we executed 990
decryption attacks with a 1024-bit public key and differ-
ent encrypted nonces. On average, a decryption using
Bleichenbacher’s original algorithm requires 303,134 re-
quests. However, in 78 simulations, we needed less than
51,000 request to decrypt the nonce and thus could have
impersonated the router.
Optimized Bleichenbacher. For the optimized Blei-
chenbacher algorithm, we executed 200 attacks against
our Cisco oracle simulator with different nonces and a
1024-bit key. On average, we gained a reduction for
requests by approximately 18 % (247,283) using 3,000
trimmers for each attack. The amount of attacks that re-
quire less than 51,000 requests increases from 7.88 % to
26.20 %.
Real Cisco Hardware. For an attack against the real
hardware, the limitations of Cisco’s IKEv1 state machine
are signiﬁcant. The main obstacle is the SA manage-
ment: Once the attackers negotiate several thousand SAs
with the router, its SA handling becomes very slow.
We managed to perform a successful decryption at-
tack against our ASR 1001-X router with approximately
USENIX Association
27th USENIX Security Symposium    577
Figure 10: Design of our highly parallelized Bleichenbacher attacker.
204,000 Bleichenbacher requests (on average 508,520).
Thus, 22 % of our attack simulations would have been
fast enough to allow attackers to impersonate a Cisco
router. Note that due to the increased time limit, attack-
ing IKEv2 with a forged signature has a higher success
rate than the same attack on IKEv1.
9 Ofﬂine Dictionary Attack against Weak
PSKs
PSKs as authentication method are often found in sce-
narios where users authenticate against services such as
websites and computer logins. Other applications in-
clude interconnecting devices like with Bluetooth, Wi-Fi,
or IKE. In the case of IKE, knowing the PSK allows
attackers to impersonate any of the peers of an IPsec
connection. We will show in the following section how
to mount ofﬂine dictionary attacks against IKEv1 and
IKEv2.
IKEv1 with Weak Pre-Shared Keys
9.1
It is well known that the PSK based mode of authen-
tication is vulnerable to an ofﬂine dictionary attack
when used together with the aggressive mode of IKEv1
Phase 1. This has actually been exploited in the past [5].
For the main mode however, only an online attack against
PSK authentication was thought to be feasible. This re-
quired attackers to initiate many handshake attempts to
try all different passwords making it likely to be detected.
We present an attack that only requires a single hand-
shake in which attackers simulate a responder. With it,
the attackers learn enough information to mount an of-
ﬂine dictionary attack. Thus, they can learn the PSK and
can thus impersonate any party or act as a Man in the
Middle.
On the network, the attackers wait for the victim to
initiate a handshake with a responder. If victim and re-
sponder already have an active connection, the attackers
Figure 11: Statistics of 990 standard decryption, 439
optimized decryption, and 542 signature-forgery attacks
against our Cisco Bleichenbacher oracle simulator.
19,000 Bleichenbacher requests. However, due to the
necessary SA negotiations, the attack took 13 minutes.
Note that a too slow Bleichenbacher attack does not
permanently lock out attackers. If a timeout occurs, they
can just start over with a new attack using fresh values
hoping to require fewer requests. If the victim has de-
ployed multiple responders sharing one key pair (e. g. for
load balancing), this could also be leveraged to speed up
an attack.
8.2 Evaluation of
the Bleichenbacher
IKEv2 Signature Forgery Attack
For our attack with forged signatures, we have 240 sec-
onds time. Therefore, we may issue 204,000 Bleichen-
bacher requests before the time runs out. The timeout
limits of IKEv1 are irrelevant for this attack; the IKEv1
handshake is only used to forge the signature we need for
message m5 in IKEv2 (cf. Figure 7).
Like with the decryption attack, we used our Cisco
oracle simulator in order to speed up the evaluation.
We simulated 542 attacks with a 1024-bit key and ran-
dom messages padded as PKCS #1 v1.5 for signatures.
From these attacks, 121 signatures needed less than
578    27th USENIX Security Symposium
USENIX Association
11526.20%32473.80%787.88%91292.12%12122.32%42177.68%01002003004005006007008009001000with requests under limitwith requests over limitwith requests under limitwith requests over limitwith requests under limitwith requests over limitOptimizeddecryptionattack(#439 total)Standarddecryption attack(#990 total)Standardsignature-forgeattack (#542 total)Cisco Bleichenbacher attack statisticIKEv2
9.2
In general, IKEv2 is perceived to be more secure than
IKEv1. However, the attack described above works simi-
larly against IKEv2. The current standard RFC 5996 [23]
mentions that it is generally not smart to rely only on
a user chosen password and recommends to use IKEv2
together with EAP (Extensible Authentication Protocol)
protocols. However, in practice IKEv2 is usually used
without EAP.
Instead of using IKEv2 together with some EAP-TLS
variant (like EAP-TTLS with EAP-MD5), one could
also switch to OpenVPN and thus reduce the overhead
from tunneling TLS in IKEv2. Moreover, the advice
from RFC 5996 is misleading since some EAP modes
like EAP-MD5 or EAP-MSCHAPv2 also do not pre-
vent ofﬂine dictionary attacks, they just require the at-
tackers to shift from IKE to attacking EAP. Ultimately,
our research indicates that implementations only support
IKEv2 with EAP for remote access of a user to a net-
work. Site-to-site scenarios are not covered by this con-
struction and therefore remain vulnerable to the attack.
10 Related Work
IPsec and IKE For some time, real-world crypto-
graphic research in the area of IPsec concentrated on the
encryption layer. Thus, the security of ESP is well un-
derstood today, thanks to major contributions from Pa-
terson et al.
in 2006–2007. Their work shows vul-
nerabilities affecting encryption-only conﬁgurations of
ESP due to ﬂaws in the standard and its implementa-
tions [14, 28]. These ﬂaws can be resolved by integrity
protection. However, in 2010 they also showed that
a particular integrity protection – namely a MAC-then-
encrypt conﬁguration – also leads to a plaintext-recovery
attack [15].
Research paid only little attention to IKE. The Log-
jam paper [5] discovered that some of the most used DH
groups standardized for IKE offer an attack surface if
the attackers are able to perform costly precomputations.
Another contribution by Checkoway et al. shows that the
random number generator used by VPN devices from Ju-
niper Networks was manipulated leading to a passive de-
cryption vulnerability [11]. However, both these ﬁndings
do not target IKE itself, but rather the parameters of un-
derlying cryptographic building blocks.
Bleichenbacher Attacks. Even though the seminal
work by Bleichenbacher dates back to 1998 [9],
Bleichenbacher vulnerabilities are discovered regularly.
Though the vulnerability is not protocol-related, the ma-
jority of vulnerabilities have been found in TLS imple-
mentations. A paper by Meyer et al. found Bleichen-
Figure 12: IKEv1 in Phase 1 using main mode with PSK
based authentication. Differences to Figure 3 are high-
lighted.
may enforce a new handshake by dropping all packets of
the already established connection, which will eventually
lead to a new handshake.
During this handshake, the attackers do not forward
the packets to the responder but rather simulate to be the
responder (e. g. by spooﬁng its IP address). The attackers
act as normal responder performing the Phase 1 proto-
col and record all messages exchanged until they receive
message m5.
With message m5, the attackers receive IDI and MACI,
encrypted with ke (cf. Figure 12). Of all the values
that m5 is generated from, the attackers only lack knowl-
edge of IDI and the key k.
IDI is easy to guess, as
often it is just the IP address of the initiator. The key
k = PRFPSK(nI,nR) is directly derived from the PSK the
attackers want to learn.
This allows an ofﬂine dictionary attack against the
PSK. To check whether the guessed PSK is correct, the
attackers can derive k and the other three keys.
If the
attackers’ candidate for ke is capable of decrypting mes-
sage m5, the attack is successful and the attackers learn
the PSK. This is possible since the plaintext of message
m5 has a known structure beginning with the known IDI.
Evaluation, Impact and Countermeasure. To verify
the attack, we implemented and tested it against the open
source IKE implementation strongSwan in version 5.5.1.
Since the attack solely relies on the protocol speciﬁcation
and does not depend on any implementation error, we be-
lieve every RFC-compliant implementation of IKEv1 to
be vulnerable. Therefore, the main mode PSK authenti-
cation has to be considered as insecure as the aggressive
mode one. The only available countermeasure against
this attack is choosing a cryptographically strong PSK
that resists dictionary attacks.
USENIX Association
27th USENIX Security Symposium    579
Initiator(IDI,PSK)Responder(IDR,PSK)m1:=(proposals)−cI,0,m1−−−−−−−−−−−→m2:=(proposal)←−cI,cR,m2−−−−−−−−−−−m3:=(gx,nI)−cI,cR,m3−−−−−−−−−−−→m4:=(gy,nR)←−cI,cR,m4−−−−−−−−−−−k:=PRFPSK(nI,nR)Derivekd,ka,kefromkk:=PRFPSK(nI,nR)Derivekd,ka,kefromkComputeMACIusingkm5:=Encke(IDI,MACI)−cI,cR,m5−−−−−−−−−−−→ComputeMACRusingkm6:=Encke(IDR,MACR)←−cI,cR,m6−−−−−−−−−−−ComputeMACRandcomparetom6ComputeMACIandcomparetom5bacher vulnerabilities in OpenSSL, JSSE (Java Secure
Socket Extension), and a TLS hardware accelerator chip
[27]. Somorovsky showed that MatrixSSL was also af-
fected [29]. Recently, the ROBOT survey showed that
thousands of domains on the Internet were running Blei-
chenbacher vulnerable servers, among them Facebook
and PayPal [10].
Cross Protocol Attacks. VPNs have already been tar-
get of cross protocol attacks. One has been found in
PPTP (Point-to-Point Tunneling Protocol) VPNs [17].
Another famous cross protocol attack is DROWN [6],
which exploits the broken SSL 2.0 to break the current