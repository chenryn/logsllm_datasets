GC [62, 63]
This work
GC [62, 63]
This work
GC [62, 63]
This work
Comm. (bits)
8𝜆ℓ − 4𝜆
< 𝜆ℓ + 18ℓ
18𝜆𝜂 − 6𝜆
2 𝜆(𝜂 + 1) + 31𝜂
< 3
2
Rounds
log ℓ + 2
log 𝜂 + 4
2
32256
3298
72960
5288
2
7
2
9
Table 2: Comparison of communication with garbled cir-
cuits for ReLU. We define 𝜂 = ⌈log 𝑛⌉. For concrete bits of
communication we use 𝜆 = 128.
Layer
Avgpool𝑑
Avgpool𝑑
Z2ℓ
Z𝑛
Protocol
GC [62, 63]
This work
GC [62, 63]
This work
GC [62, 63]
This work
GC [62, 63]
This work
Comm. (bits)
2𝜆(ℓ2 + 5ℓ − 3)
< (𝜆 + 21) · (ℓ + 3𝛿)
2𝜆(𝜂2 + 9𝜂 − 3)
2 𝜆 + 34) · (𝜂 + 2𝛿)
< ( 3
2
Rounds
log(ℓ𝛿) + 4
log(𝜂𝛿) + 6
2
302336
5570
335104
7796
Avgpool49
Z2ℓ , ℓ = 32
Avgpool49
Z𝑛, 𝜂 = 32
Table 3: Comparison of communication with garbled cir-
cuits for Avgpool𝑑. We define 𝜂 = ⌈log 𝑛⌉ and 𝛿 = ⌈log(6 · 𝑑)⌉.
For concrete bits of communication we use 𝜆 = 128. Choice
of 𝑑 = 49 corresponds to average pool filter of size 7 × 7.
2
10
2
14
𝑥 < 𝑦 is the same as checking if either 𝑥1 < 𝑦1 or 𝑥1 = 𝑦1 and
𝑥0 < 𝑦0. Now, the original problem is reduced to computing two
millionaires’ instances over smaller length strings (𝑥1 < 𝑦1 and
𝑥0 < 𝑦0) and one equality test (𝑥1 = 𝑦1). By continuing recursively,
one could build a tree all the way where the leaves are individual
bits, at which point one could use 1-out-of-2 OT-based protocols
to perform the comparison/equality. However, the communication
complexity of this protocol is still quite large. We make several
important modifications to this approach. First, we modify the tree
so that the recursion is done log(ℓ/𝑚) times to obtain leaves with
strings of size 𝑚, for a parameter 𝑚. We then use 1-out-of-2𝑚 OT
to compute the comparison/equality at the leaves, employing the
lookup-table based approach of [25]. Second, we observe that by
carefully setting up the receiver’s and sender’s messages in the
OT protocols for leaf comparisons and equality, multiple 1-out-
of-2𝑚 OT instances can be combined to reduce communication.
Next, recursing up from the leaves to the root, requires securely
computing the AND functionality6 that uses Beaver bit triples [8].
We observe that the same secret value is used in 2 AND instances.
Hence, we construct correlated pairs of bit triples using 1-out-of-8
OT protocols [44] to reduce this cost to 𝜆 + 8 bits (amortized) per
triple, where 𝜆 is the security parameter and typically 128. Some
more work is needed for the above technique to work efficiently for
the general case when 𝑚 does not divide ℓ or ℓ/𝑚 is not a power
of 2. Finally, by picking 𝑚 appropriately, we obtain a protocol for
millionaires’ whose concrete communication (in bits) is nearly 5
times better than prior work.
0, 𝑎′
0 + 𝑎′
1 ≥ 2ℓ−1, where 𝑎′
DReLU. Let 𝑎 be additively secret shared as 𝑎0, 𝑎1 over the ap-
propriate ring. DReLU(𝑎) is 1 if 𝑎 ≥ 0 and 0 otherwise; note that
𝑎 ≥ 0 is defined differently for ℓ−bit integers and general rings.
Over Z𝐿, where values are encoded using 2’s complement notation,
DReLU(𝑎) = 1 ⊕ MSB(𝑎), where MSB(𝑎) is the most significant
bit of 𝑎. Moreover, MSB(𝑎) = MSB(𝑎0) ⊕ MSB(𝑎1) ⊕ carry. Here,
carry = 1 if 𝑎′
1 denotes the integer repre-
sented by the lower ℓ − 1 bits of 𝑎0, 𝑎1. We compute this carry bit
using a call to our millionaires’ protocol. Over Z𝑛, DReLU(𝑎) = 1
if 𝑎 ∈ [0, ⌈𝑛/2⌉). Given the secret shares 𝑎0, 𝑎1, this is equivalent to
(𝑎0 + 𝑎1) ∈ [0, ⌈𝑛/2⌉) ∪ [𝑛, ⌈3𝑛/2⌉) over integers. While this can be
naïvely computed by making 3 calls to the millionaires’ protocol,
we show that by carefully selecting the inputs to the millionaires’
protocol, one can do this with only 2 calls. Finally, we set things
up so that the two calls to millionaires’ have correlated inputs that
reduces the overall cost to ≈ 1.5 instances of millionaires’ over Z𝑛.
Division and Truncation. As a technical result, we provide a cor-
rect decomposition of division of a secret ring element in Z𝐿 or Z𝑛
by a public integer into division of secret shares by the same public
integer and correction terms (Theorem 4.1). These correction terms
consist of multiple inequalities on secret values. As a corollary, we
also get a much simpler expression for the special case of trunca-
tion, i.e., dividing ℓ-bit integers by a power-of-2 (Corollary 4.2). We
believe that the general theorem as well as the corollary can be
of independent interest. Next, we give efficient protocols for both
general division (used for Avgpool, Table 3) as well as division by a
power-of-2 (used for multiplication in fixed-point arithmetic). The
inequalities in the correction term are computed using our new
protocol for millionaires’ and the division of shares can be done
locally by the respective parties. Our technical theorem is the key
to obtaining secure implementation of DNN inference tasks that
are bitwise equivalent to cleartext fixed-point execution.
1.3 Other Related Work
Perhaps the first work to consider the secure computation of ma-
chine learning inference algorithms was that of [14]. SecureML [51]
was the first to consider secure neural network inference and train-
ing. Apart from the works mentioned earlier, other works include
6This functionality takes as input shares of bits 𝑥, 𝑦 from the two parties and outputs
shares of 𝑥 AND 𝑦 to both parties.
3
those that considered malicious adversaries [20, 36, 64] (for sim-
pler ML models like linear models, regression, and polynomials)
as well as specialized DNNs with 1 or 2 bit weights [4, 55, 57]. Re-
cently, [26] gave protocols for faithful truncation (but not division)
over ℓ-bit integers and prime fields in various adversarial settings.
For 2-party semi-honest setting, our protocols have up to 20× less
communication for the truncations required in our evaluation.
1.4 Organisation
We begin with the details on security and cryptographic primi-
tives used in Section 2 on preliminaries. In Section 3 we provide our
protocols for millionaires’ (Section 3.1) and DReLU (Section 3.2, 3.3),
over both Z𝐿 and general ring Z𝑛. In Section 4, we present our
protocols for division and truncation. We describe the various com-
ponents of DNN inference in Section 5 and show how to construct
secure protocols for all these components given our protocols from
Sections 3 and 4. We present our implementation details in Section 6
and our experiments in Section 7. Finally, we conclude and discuss
future work in Section 8.
2 PRELIMINARIES
Notation. For a set W, 𝑤 $← W denotes sampling an element
𝑤, uniformly at random from W. [ℓ] denotes the set of integers
{0, · · · , ℓ −1}. Let 1{𝑏} denote the indicator function that is 1 when
𝑏 is true and 0 when 𝑏 is false.
2.1 Threat Model and Security
We provide security in the simulation paradigm [18, 32, 47]
against a static semi-honest probabilistic polynomial time (PPT)
adversary A. That is, a computationally bounded adversary A cor-
rupts either 𝑃0 or 𝑃1 at the beginning of the protocol and follows
the protocol specification honestly. Security is modeled by defin-
ing two interactions: a real interaction where 𝑃0 and 𝑃1 execute
the protocol in the presence of A and the environment Z and an
ideal interaction where the parties send their inputs to a trusted
functionality that performs the computation faithfully. Security
requires that for every adversary A in the real interaction, there
is an adversary S (called the simulator) in the ideal interaction,
such that no environment Z can distinguish between real and ideal
interactions. Many of our protocols invoke multiple sub-protocols
and we describe these using the hybrid model. This is similar to a
real interaction, except that sub-protocols are replaced by the in-
vocations of instances of corresponding functionalities. A protocol
invoking a functionality F is said to be in “F -hybrid model.”
2.2 Cryptographic Primitives
Secret Sharing Schemes. Throughout this work, we use 2-out-
2.2.1
of-2 additive secret sharing schemes over different rings [11, 59].
The 3 specific rings that we consider are the field Z2, the ring Z𝐿,
where 𝐿 = 2ℓ (ℓ = 32, typically), and the ring Z𝑛, for a positive
integer 𝑛 (this last ring includes the special case of prime fields used
in the works of [43, 49]). We let Share𝐿(𝑥) denote the algorithm
that takes as input an element 𝑥 in Z𝐿 and outputs shares over
Z𝐿, denoted by ⟨𝑥⟩𝐿
1 . Shares are generated by sampling
random ring elements ⟨𝑥⟩𝐿
1 , with the only constraint that
1 = 𝑥 (where + denotes addition in Z𝐿). Additive secret
⟨𝑥⟩𝐿
0 and ⟨𝑥⟩𝐿
0 and ⟨𝑥⟩𝐿
0 + ⟨𝑥⟩𝐿
4
1
1
sharing schemes are perfectly hiding, i.e., given a share ⟨𝑥⟩𝐿
0 or ⟨𝑥⟩𝐿
1 ,
the value 𝑥 is completely hidden. The reconstruction algorithm
Reconst𝐿(⟨𝑥⟩𝐿
1 ) takes as input the two shares and outputs
0 , ⟨𝑥⟩𝐿
𝑥 = ⟨𝑥⟩𝐿
0 + ⟨𝑥⟩𝐿
1 . Shares (along with their corresponding Share()
and Reconst() algorithms) are defined in a similar manner for Z2
and Z𝑛 with superscripts 𝐵 and 𝑛, respectively. We sometimes refer
to shares over Z𝐿 and Z𝑛 as arithmetic shares and shares over Z2
as boolean shares.
(cid:1)-OTℓ denote the 1-out-of-𝑘 Obliv-
2.2.2 Oblivious Transfer. Let(cid:0)𝑘
ious Transfer (OT) functionality [16] (which generalizes 1-out-of-2
OT [27, 54]). The sender’s inputs to the functionality are the 𝑘
strings 𝑚0, · · · , 𝑚𝑘−1, each of length ℓ and the receiver’s input is
a value 𝑖 ∈ [𝑘]. The receiver obtains 𝑚𝑖 from the functionality
and the sender receives no output. We use the protocols from [44],
which are an optimized and generalized version of the OT exten-
sion framework proposed in [9, 41]. This framework allows the
sender and receiver, to “reduce” 𝜆𝑐 number of oblivious transfers
to 𝜆 “base” OTs. We also use the notion of correlated 1-out-of-2
OT [5], denoted by(cid:0)2
depending on 𝑏. The protocols for(cid:0)𝑘
𝜆 + ℓ, respectively. Moreover, simpler(cid:0)2
(cid:1)-COTℓ. In our context, this is a functionality
(cid:1)-OTℓ [44] and(cid:0)2
(cid:1)-COTℓ [5]
(cid:1)-OTℓ has a communication
where the sender’s input is a ring element 𝑥 and the receiver’s
input is a choice bit 𝑏. The sender receives a random ring element
𝑟 as output and the receiver obtains either 𝑟 or 𝑥 + 𝑟 as output
execute in 2 rounds and have total communication7 of 2𝜆 + 𝑘ℓ and
of 𝜆 + 2ℓ bits [5, 41].
2.2.3 Multiplexer and B2A conversion. The functionality F 𝑛
MUX
takes as input arithmetic shares of 𝑎 over 𝑛 and boolean shares of
choice bit 𝑐 from 𝑃0, 𝑃1, and returns shares of 𝑎 if 𝑐 = 1, else returns
shares of 0 over the same ring. A protocol for F 𝑛
MUX can easily be im-
complexity is 2(𝜆 + 2𝜂), where 𝜂 = ⌈log 𝑛⌉.
plemented by 2 simultaneous calls to(cid:0)2
via one call to(cid:0)2
(cid:1)-OT𝜂 and communication
(cid:1)-COT𝜂 and hence, its communication is 𝜆 + 𝜂. For
B2A (for boolean to arithmetic conversion)
takes boolean (i.e., over Z2) shares as input and gives out arithmetic
(i.e., over Z𝑛) shares of the same value as output. It can be realized
completeness, we provide the protocols realizing F 𝑛
F 𝑛
B2A formally in Appendix A.3 and Appendix A.4, respectively.
2.2.4 Homomorphic Encryption. A homomorphic encryption of 𝑥
allows computing encryption of 𝑓 (𝑥) without the knowledge of the
decryption key. In this work, we require an additively homomorphic
encryption scheme that supports addition and scalar multiplication,
i.e. multiplication of a ciphertext with a plaintext. We use the addi-
tively homomorphic scheme of BFV [15, 28] (the scheme used in the
recent works of Gazelle [43] and Delphi [49]) and use the optimized
algorithms of Gazelle for homomorphic matrix-vector products and
homomorphic convolutions. The BFV scheme uses the batching
optimization [46, 60] that enables operation on plaintext vectors
over the field Z𝑛, where 𝑛 is a prime plaintext modulus of the form
2𝐾𝑁 + 1, 𝐾 is some positive integer and 𝑁 is scheme parameter
7The protocol of(cid:0)𝑘
that is a power-of-2.
(cid:1)-COTℓ . In concrete terms, therefore, we write the cost as 2𝜆 + 𝑘ℓ.
(cid:0)2
(cid:1)-OTℓ [44] incurs a communication cost of 𝜆 + 𝑘ℓ. However, to
achieve the same level of security, their security parameter needs to be twice that of
1
The functionality F 𝑛
MUX as well as
1