sider the mapping of real customers to entries on LiabList. Each
real customer should have an entry in LiabList (i.e., the mapping
is a function) and no distinct customers should be given the same
entry (i.e., the mapping should be injective). Perhaps it would be
ideal if all entries would correspond to customers (i.e., the mapping
were surjective) however this property cannot be enforced—E can
724To veriﬁably compute its liabilities, E does:
1. For each customer Ci : 1 ď i ď c:
(a) Represent each Ci’s balance Balancei as an m-bit binary number (where m “ rlg2 MaxBTCs):
BinBalancei “ xxi,0, xi,1, . . . , xi,m´1y ,
(then Balancei “
ř
k“0 xi,k ¨ 2k)
m´1
(b) Compute and publish a Pedersen commitment to each xi,k in the group G using generators g and h:
(c) Compute a non-interactive proof of knowledge Πi of all ri,k and xi,k, and that every xi,k is binary (see [11]).
(d) Compute a commitment to Ci’s balance as yi “
Then yi is a Pedersen commitment to Balancei because yi “ gbalancei hri where ri “
ř
k“0 ri,k ¨ 2k.
m´1
(e) Compute a fresh customer identiﬁer CIDi by picking a random nonce ni and committing Ci’s username: CIDi
$Ð
commitpusernamei, niq
$ÐÝ Zq
ri,k
yi,k “ gxi,k hri,k ,
ś
k“0 pyi,kqp2kq P G.
m´1
2. Homomorphically add the commitments to all customers balance into a single commitment to the total liabilities:
ZLiabilities “ cź
yi
i“1
3. Publish the commitment to total liabilities ZLiabilities and the list LiabList of all customers’ tuples:
LiabList “ xCIDi, yi,0, . . . , yi,m´1, Πiy for i “ 1, . . . , c.
and locates it in LiabList. The client then veriﬁes that its balance is included as follows:
4. Every client Ci, upon login, is privately given usernamei, ri and a string n1
usernamei “ open
CIDi, n1
(a) compute yi “
k“0 pyi,kqp2kq and verify that yi “ gbalancei hri,
m´1
(b) verify that ZLiabilities “
i“1 yi, and
(c) verify the proof Πi for i “ 1, . . . , c.
Note that steps (b) and (c) can be carried out by any public auditor and need not be done by every client.
c
i to open the commitment CIDi. The client veriﬁes that
`
ś
˘
ś
i
Protocol 2: Privacy-preserving proof of liabilities
always add fake users to the list, but we ensure that doing so can
only increase E’s apparent liabilities.9
If two users have the same balance, a malicious E might try to
point both users to the same entry—in the voting literature, this is
called a clash attack [28]. To ensure an injective mapping, cus-
tomers are provided an ID in line 1e which commits10 to unique in-
formation about the customer usernamei (which may include their
username, email address, and/or account number). The commit-
ment is binding, preventing the exchange from opening a CID to
distinct data for different users. It is also hiding, preventing an ad-
versary who knows the email address of a potential customer from
determining if that customer is in LiabList (or if a user is known to
be a customer, which CID they correspond to).
The exchange can add arbitrary accounts to the list. However, as
long as accounts can only add to the total liabilities (e.g., E cannot
commit to a negative balance and assign it to a fake user account),
adding accounts is detrimental to a malicious E’s goal as it could
only increase its apparent liabilities. Since negative numbers do
9It might be in E’s interest to include fake users with a zero (or
tiny) balance to obscure the total number of customers it truly has.
10Unlike the other commitments used in Provisions, the commit-
ment scheme used to produce CIDi need only be binding and hid-
ing, not additively homomorphic. We use a simpler hash-based
commitment scheme instead of Pedersen commitments.
not technically exist in modular arithmetic, the precise requirement
is that when added together, the sum will never cause a reduction
mod q where q « 2256 for our group G “secp256k1.
To enforce this, E provides a range proof (adapted from [19])
for each committed balance showing it is from a ‘small’ interval
between 0 and MaxBTC “ 251. This makes it easy to ensure a
modular reduction will never occur, as long as the exchange has
fewer than 2205 accounts.
The range proof works by providing a bit-by-bit commitment of
the account balance in binary representation, proving each bit is a
0 or 1 (using the proof of knowledge, mentioned above, twice with
conjunctive logic [10]), and showing how many bits the number
contains (an upper-bound on its maximum value). This committed
binary representation is homomorphically converted into an integer
and homomorphically summed.
In the full version of the paper [11], we prove the following the-
orem:
Theorem 2. Protocol 2 is a honest-veriﬁer zero knowledge proof
of knowledge of quantities Liabilities and
pxi,k P t0, 1u, ri,k P Zqq for i P r1, cs and k P r0, m ´ 1s
725ZAssets to its total assets.
1. E runs Protocol 1 to veriﬁably generate a commitment
2. E runs Run Protocol 2 to veriﬁably generate a commit-
ment ZLiabilities to its total assets and a list LiabList of its
liabilities.
3. E computes ZAssets ¨ ZLiabilities
4. E proves in zero-knowledge that ZAssets´Liabilities is a
´1 “ ZAssets´Liabilities.
commitment to the value 0.
Protocol 3: Complete privacy-preserving proof of solvency
that satisfy the condition
ZLiabilities “ cź
yi “ cź
i“1
i“1
k“0
for all i P r1, cs and k P r0, m ´ 1s.
m´1ź
pyi,kqp2kq “ cź
i“1
m´1ź
pgxi,k hri,kqp2kq
k“0
This step leads to the bulk of the proof size (see Section 10). In
the full version of the paper [11], we discuss an alternate version of
this protocol using zero-knowledge succinct non-interactive argu-
ments of knowledge (zk-SNARKs) [3]. The proof generated by this
protocol is signiﬁcantly shorter (constant in the number of users) at
the expense of a large common reference string, the use of heavier
cryptographic tools and a trusted setup step.
5.1 Customer veriﬁcation
We assume that customers each verify LiabList to conﬁrm the
existence of their accounts and the correctness of their balances
yi and ID commitments CIDi. A malicious E which omits some
customers will only be detected if at least one of those customers
checks, although this is an inherent limitation given our privacy
goals which require that only customers themselves can tell if their
balance has been included or not. This limit applies equally, for
example, to Maxwell’s protocol.
The required checks from individual customers are fortunately
Each customer Ci receives from E their
quite lightweight.
usernamei, ri and ni. They then locate in LiabList, with a hint
from E, their tuple:
xCIDi, yi,0, . . . , yi,m´1, Πiy
Using ni, they can open their commitment CIDi and verify that it
commits to usernamei. Next, using ri the customer checks that
yi is indeed a commitment to their true account balance Balancei.
This is shown in Step (4a) and is a simple calculation.
The other two veriﬁcation steps, (4b) and (4c), can be carried
out by any party—we assume a public auditor will do so on behalf
of most customers, so that individuals will typically not verify the
entire proof (though they are free do to so). We discuss the cost of
verifying the entire proof further in Section 10.
6. PROOF OF SOLVENCY
Protocol 3 speciﬁes how E can complete the proof of solvency
given commitments to total assets and liabilities from Protocols 1
and 2. The proof that ZAssets´Liabilities is a commitment to 0 (line 4)
is a simple Schnorr ZK proof of knowledge of the discrete log of
ZAssets´Liabilities to the base h, since ZAssets´Liabilities “ g0hk for a
value k known to the exchange and if ZAssets´Liabilities were a com-
mitment to any other value then computing its discrete log to the
base h would reveal the discrete log of h relative to g.
Variation for exchanges with a surplus.
If the exchange is actually running a surplus (total assets are
greater than total liabilities), this can easily be handled with a sim-
ple modiﬁcation—the exchange can create a commitment to its sur-
plus, ZSurplus, and apply the same range proof used for customer
balances to prove that this is a small positive number. It then re-
places line 3 in Protocol 3 with:
ZAssets ¨ ZLiabilities
´1 ¨ ZSurplus
´1
This approach reveals that a surplus exists. The exchange can also
prove the magnitude of its surplus if desired by opening the com-
mitment ZSurplus. Alternatively, to hide even the existence of any
surplus, the exchange could simply move its surplus into a separate
address which is not included in the addresses S used in its proof
of assets, or include the value of the surplus in a number of fake
customers’ accounts which will add to its apparent liabilities.
Variation for fractional-reserve exchanges.
Fractional reserve banking, in which an exchange promises to
keep assets equal to only a fraction ρ of its total liabilities instead of
all of them, has been frowned upon by many in the Bitcoin commu-
nity and not seen signiﬁcant deployment. However if this approach
becomes more popular in the future, it is easy to modify Provi-
sions to handle this case by modifying Protocol 3 to commit to a
modiﬁed balance fipBalanceiq instead of the customer’s true bal-
ance Balancei. Each user can then check during veriﬁcation that
fi was computed correctly on their true balance. Simple fractional
reserves could be implemented by deﬁning fipxq “ ρ ¨ x for all
users. It would also be straightforward to deﬁne fipxq “ ρi¨x with
a different ρi for each user if, for example, some users’ accounts
are fully-guaranteed (ρi “ 1) while others are only fractionally-
guaranteed (ρi ă 1). Arbitrary other functions are possible, with
a natural example from traditional ﬁnance being guaranteeing a
user’s assets up to some maximum value.
Finally, an exchange can also prove that it is running a surplus
of proportion ρ by setting fipxq “ p1 ` ρq ¨ x, with a “fractional
surplus” effectively being the inverse of a fractional reserve.
7. PROOF OF NON-COLLUSION
Recall from Section 2.3.2 that the privacy guarantees of Provi-
sions introduce the risk that a cabal of insolvent exchanges col-
luding by covering each exchanges’ individual liabilities with their
collective assets. In effect, the assets of a single Bitcoin address
can be used in the proof of solvency for multiple exchanges. This
can be done by having the exchanges contribute to a set of joint
NIZKPs of their keys (e.g., using divertable ZK [1]).
The simplest defense is for each exchange to choose an
anonymity set PK which is smaller than the set of all public keys
and where each exchange’s set is disjoint from the anonymity set of
all other exchanges. This ensures that each exchange is proving sol-
vency using assets it owns and without the help of other exchanges.
The difﬁculty with this approach is that there may not be sufﬁ-
ciently many addresses on the Bitcoin blockchain to accommodate
strong privacy for all the exchanges. In the long run, if exchanges
come to collectively control the majority of all bitcoins, we would
like them to be able to use each other as an anonymity set.
Extension to Proof of Assets.
We can obtain a stronger defense by extending Protocol 1 with a
few additional steps. Our goal is to ensure that the assets of every
Bitcoin address is used in at most one proof of solvency. Recall that
the exchange has a set of Bitcoin signing keys PK “ ty1, . . . , ynu
726where yi “ gxi for i P r1, ns . The exchange knows the secret keys
xi for some subset of these public keys. We use indicator variables
s1, . . . , sn P t0, 1u such that si “ 1 when the exchange knows the
secret key xi and si “ 0 otherwise.
We extend Protocol 1 to force every exchange to also compute
the list L “ thˆxi “ hxi¨si for i P r1, nsu which is randomly per-
muted and published. Note that when si “ 1 the corresponding
element in L is hxi and when si “ 0 the corresponding element
is simply 1 P G, the identity element. Thus L is a random permu-
tation of the exchange’s Bitcoin public keys, but using the base h
instead of g.
We require the exchange to prove that L is correctly constructed
(i.e., a permutation of hˆx1 , . . . , hˆxn) using a zero knowledge proof
used as a component of the Neff mix net [24]. That zero-knowledge
proof is used to prove that a given list (cid:96)2 “ thz1 , . . . , hznu
is a permutation and base change of another given list (cid:96)1 “
tgz1 , . . . , gznu. This Neff proof thus proves that the published list
L is constructed correctly. It is a simple and efﬁcient proof, re-
quiring 8n group elements (8 for each account) and 4n additional
exponentiations during construction and veriﬁcation.
We show below that the list L reveals no information about the
E’s Bitcoin addresses beyond the number of addresses ν controlled
by E. Note that ν is not revealed by the basic protocol (Protocol 1).
We’ll return to the implications of making this information public
in Section 9.1 but this is one reason (in addition to added complex-
ity) why we present this as an optional protocol extension.
Now, suppose two exchanges collude and use the same Bitcoin
address y “ gx in their proof of solvency. Then hx will appear in
the L list of both exchanges. In other words, the L lists of these
two exchanges will have a non-trivial intersection.
Since every exchange is required to publish its list L, an auditor
can simply check that these lists are mutually disjoint (ignoring the
elements 1 P G). If so, then the auditor is assured that every Bitcoin
address is used in at most one proof of solvency and this holds even
if all the exchanges use the same anonymity set PK.
An important security requirement is that all exchanges run the
extension at the same time—barring this, a simple attack is for ex-
changes to move bitcoins from one address to another in between
runs of the protocol so that the same funds can be used but with
a different value for hˆxi “ hxi¨si in each L (since xi will have
changed). Fortunately, the blockchain already provides an easy
method of synchronization. Exchanges simply need to agree on
a common block number (say, every 240th block to run the protocol
daily) and all run the protocol based on the state of the blockchain
up to that block. No further synchronization is required; all ex-
changes can run the protocol and publish their proofs independently
and any assets used by more than one exchange will be detectable.
It remains to argue that the list L reveals no information about
the exchange’s Bitcoin addresses beyond the number of addresses.
This follows directly from the Decision Difﬁe-Hellman (DDH) as-
sumption which is believed to hold in the secp256k1 group. DDH
states that given the tuple xg, h, hxy, the quantity gx is compu-
tationally indistinguishable from a random element of G. There-
fore, given the list L it is not possible to distinguish the n-bit string
ps1, . . . , snq P t0, 1un from a random bit string of the same length.
8. SECURITY DEFINITION & PROOF
We now present a general (not speciﬁc to Provisions) deﬁnition
of a privacy-preserving proof of solvency. We say a function νpkq
is negligible if for all positive polynomials pp¨q, there is a sufﬁ-
ciently large k such that νpkq ă 1{ppkq.
Let A and A1 denote mappings py “ gxq ÞÑ balpyq where
A Ď A1, y is the public key corresponding to a Bitcoin address
with private key x and balpyq is the amount of currency, or assets,
observably spendable by this key on the blockchain.
Let L denote a mapping ID ÞÑ (cid:96) where (cid:96) is the amount of cur-
rency, or liabilities, owed by the exchange to each user identiﬁed
by the unique identity ID.
Deﬁnition 1 (Valid Pair). We say that A and L are a valid pair
with respect to a positive integer MaxBTC iff @ID P L ,
ř
yPA Arys ´
1.
2. 0 ď LrIDs ď MaxBTC
Consider an interactive protocol ProveSolvency run between an
ř
IDPL LrIDs ě 0 and
exchange E and user U such that
1. outputProveSolvency
E
2. outputProveSolvency
tACCEPT, REJECTu
U
p1k, MaxBTC,A,L,A1q “ ø
p1k, MaxBTC,A1, ID, (cid:96)q
P
For brevity, we refer to these as outE and outU respectively.
Deﬁnition 2 (Privacy-Preserving Proof of Solvency). A privacy-