### Dereference
```c
int myAge = 43; // variable declaration
int*ptr = &myAge; // pointer declaration
// Reference: output myAge with a pointer
// memory address (0x7ffe5367e044)
printf("%p\n", ptr);
// dereference: output the value of myAge with a pointer (43)
printf("%d\n", *ptr);
```
Operators
---
### Arithmetic Operators
```c
int myNum = 100 + 50;
int sum1 = 100 + 50; // 150 (100 + 50)
int sum2 = sum1 + 250; // 400 (150 + 250)
int sum3 = sum2 + sum2; // 800 (400 + 400)
```
----
| Operator | Name      | Example |
|----------|-----------|---------|
| `+`      | Add       | `x + y` |
| `-`      | Subtract  | `x - y`  |
| `*`      | Multiply  | `x * y`  |
| `/`      | Divide    | `x / y`  |
| `%`      | Modulo    | `x % y` |
| `++`     | Increment | `++x`    |
| `--`     | Decrement | `--x`   |
### Assignment operator
| example   | as             |
|-----------|----------------|
| x `=` 5   | x `=` 5        |
| x `+=` 3  | x `=` x `+` 3  |
| x `-=` 3  | x `=` x `-` 3  |
| x `*=` 3  | x `=` x `*` 3  |
| x `/=` 3  | x `=` x `/` 3  |
| x `%=` 3  | x `=` x `%` 3  |
| x `&=` 3  | x `=` x `&` 3  |
| x `|=` 3 | x `=` x `|` 3 |
| x `^=` 3  | x `=` x `^` 3  |
| x `>>=` 3 | x `=` x `>>` 3 |
| x ` y);
// returns 1 (true) because 5 is greater than 3
```
----
| Symbol | Name | Example |
| --------| -------| -------|
| `==` | equals | x `==` y |
| `!=` | not equal to | x `!=` y |
| `>` | greater than | x `>` y |
| `=` | greater than or equal to | x `>=` y |
| `> 2; /*15 = 0000 1111 */
printf("Line 6 -The value of c is %d\n", c);
```
### Bitwise operators {.col-span-2}
operator | description | instance
:-|:-|:-
`&` | Bitwise AND operation, "AND" operation by binary digits | `(A & B)` will get `12` which is 0000 1100
`|` | Bitwise OR operator, "or" operation by binary digit | `(A | B)` will get `61` which is 0011 1101
`^` | XOR operator, perform "XOR" operation by binary digits | `(A ^ B)` will get `49` which is 0011 0001
`~` | Inversion operator, perform "inversion" operation by binary bit | `(~A)` will get `-61` which is 1100 0011
`>` | binary right shift operator | `A >> 2` will get `15` which is 0000 1111
Data Types
---
### Basic data types {.col-span-2}
| Data Type | Size Size | Range Range | Description Description |
| -----| -----| -----| -----|
| `char` | 1 byte | `−128` ~ `127` | single character/alphanumeric/ASCII |
| `signed char` | 1 byte | `−128` ~ `127` | -|
| `unsigned char` | 1 byte | `0` ~ `255` | -|
| `int` | `2` to `4` bytes | `−32,768` ~ `32,767` | store integers |
| `signed int` | 2 bytes | `−32,768` ~ `32,767` | |
| `unsigned int` | 2 bytes | `0` ~ `65,535` | |
| `short int` | 2 bytes | `−32,768` ~ `32,767` | |
| `signed short int` | 2 bytes | `−32,768` ~ `32,767` | |
| `unsigned short int` | 2 bytes | `0` ~ `65,535` | |
| `long int` | 4 bytes | `-2,147,483,648` ~ `2,147,483,647` | |
| `signed long int` | 4 bytes | `-2,147,483,648` ~ `2,147,483,647` | |
| `unsigned long int` | 4 bytes | `0` ~ `4,294,967,295` | |
| `float` | 4 bytes | `3.4E-38` ~ `3.4E+38` | |
| `double` | 8 bytes | `1.7E-308` ~ `1.7E+308` | |
| `long double` | 10 bytes | `3.4E-4932` ~ `1.1E+4932` | |
### Data types
```c
// create variables
int myNum = 5; // integer
float myFloatNum = 5.99; // floating point number
char myLetter = 'D'; // string
// High precision floating point data or numbers
double myDouble = 3.2325467;
// print output variables
printf("%d\n", myNum);
printf("%f\n", myFloatNum);
printf("%c\n", myLetter);
printf("%lf\n", myDouble);
```
----
Data Type | Description
:-| :-
`char` | character type
`short` | short integer
`int` | integer type
`long` | long integer
`float` | single-precision floating-point type
`double` | double-precision floating-point type
`void` | no type
### Basic format specifiers
| format specifier | data type |
| -----| -----|
| `%d` or `%i` | `int` integer |
| `%f` | `float` single-precision decimal type |
| `%lf` | `double` high precision floating point data or number |
| `%c` | `char` character |
| `%s` | for `strings` strings |
### Basic format specifiers
| | short | int | long |
| ----| ----| ----| ----|
| Octal | `%ho` | `%o` | `%lo` |
| Decimal | `%hd` | `%d` | `%ld` |
| Hexadecimal | `%hx` /`%hX` | `%x` /`%X` | `%lx` /`%lX` |
### Data format example
```c
int myNum = 5;
float myFloatNum = 5.99; // floating point number
char myLetter = 'D';     // string
// print output variables
printf("%d\n", myNum);
printf("%f\n", myFloatNum);
printf("%c\n", myLetter);
```
C Preprocessor
---
### Preprocessor Directives {.row-span-2}
command | description
----| ----
`#define` | define a macro
`#include` | include a source code file
`#undef` | undefined macro
`#ifdef` | Returns true if the macro is defined
`#ifndef` | Returns true if the macro is not defined
`#if` | Compile the following code if the given condition is true
`#else` | Alternative to `#if`
`#elif` | If the `#if` condition is false, the current condition is `true`
`#endif` | End a `#if...#else` conditional compilation block
`#error` | Print an error message when standard error is encountered
`#pragma` | Issue special commands to the compiler using the standardized method
```c
// replace all MAX_ARRAY_LENGTH with 20
#define MAX_ARRAY_LENGTH 20
// Get stdio.h from the system library
#include 
// Get myheader.h in the local directory
#include "myheader.h"
#undef FILE_SIZE
#define FILE_SIZE 42 // undefine and define to 42
```
### Predefined macros {.row-span-2}
macro | description
----| ----
`__DATE__` | The current date, a character constant in the format "MMM DD YYYY"
`__TIME__` | The current time, a character constant in the format "HH:MM:SS"
`__FILE__` | This will contain the current filename, a string constant
`__LINE__` | This will contain the current line number, a decimal constant
`__STDC__` | Defined as `1` when the compiler compiles against the `ANSI` standard
`ANSI C` defines a number of macros that you can use, but you cannot directly modify these predefined macros
#### Predefined macro example
```c
#include 
int main() {
  printf("File :%s\n", __FILE__);
  printf("Date :%s\n", __DATE__);
  printf("Time :%s\n", __TIME__);
  printf("Line :%d\n", __LINE__);
  printf("ANSI :%d\n", __STDC__);
}
```
### Macro continuation operator (\)
A macro is usually written on a single line.
```c
#define message_for(a, b) \
    printf(#a " and " #b ": We love you!\n")
```
If the macro is too long to fit on a single line, use the macro continuation operator `\`
### String Constantization Operator (#)
```c
#include 
#define message_for(a, b) \
  printf(#a " and " #b ": We love you!\n")
int main(void) {
  message_for(Carole, Debra);
  return 0;
}
```
When the above code is compiled and executed, it produces the following result:
```
Carole and Debra: We love you!
```
When you need to convert a macro parameter to a string constant, use the string constant operator `#`
### tag paste operator (##)
```c
#include 
#define tokenpaster(n) printf ("token" #n " = %d", token##n)
int main(void) {
  int token34 = 40;
  tokenpaster(34);
  return 0;
}
```
### defined() operator
```c
#include 
#if !defined (MESSAGE)
   #define MESSAGE "You wish!"
#endif
int main(void) {
  printf("Here is the message: %s\n", MESSAGE);
  return 0;
}
```
### Parameterized macros
```c
int square(int x) {
  return x * x;
}
```
The macro rewrites the above code as follows:
```c
#define square(x) ( (x) * (x) )
```
No spaces are allowed between the macro name and the opening parenthesis
```c
#include 
#define MAX(x,y) ( (x) > (y) ? (x) : (y) )
int main(void) {
  printf("Max between 20 and 10 is %d\n", MAX(10, 20));
  return 0;
}
```
C Function
----
### Function declaration and definition {.row-span-2}
```c
int main(void) {
  printf("Hello World!");
  return 0;
}
```
The function consists of two parts
```c
void myFunction() { // declaration declaration
  // function body (code to be executed) (definition)
}
```
----
- `Declaration` declares the function name, return type and parameters _(if any)_
- `Definition` function body _(code to execute)_
----
```c
// function declaration
void myFunction();
// main method
int main() {
  myFunction(); // --> call the function
  return 0;
}
void myFunction() {// Function definition
  printf("Good evening!");
}
```
### Call function
```c
// create function
void myFunction() {
  printf("Good evening!");
}
int main() {
  myFunction(); // call the function
  myFunction(); // can be called multiple times
  return 0;
}
// Output -> "Good evening!"
// Output -> "Good evening!"
```
### Function parameters
```c
void myFunction(char name[]) {
  printf("Hello %s\n", name);
}
int main() {
  myFunction("Liam");
  myFunction("Jenny");
  return 0;
}
// Hello Liam
// Hello Jenny
```
### Multiple parameters
```c
void myFunction(char name[], int age) {
  printf("Hi %s, you are %d years old.\n",name,age);
}
int main() {
  myFunction("Liam", 3);
  myFunction("Jenny", 14);
  return 0;