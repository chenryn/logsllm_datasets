of our constraints are shift constraints, we can adapt the polyno-
mial that the verifier must compute. Our adapted polynomial can
be computed using a small number of field operations, thus the
signature of correct computation is not required (otherwise we
would be using a signature of computation to build a signature of
computation).
B.1 Polynomial Encoding of Constraints
We follow the principles of our main argument by encoding the
constraint system into a single equation in formal indeterminate Y.
cn+1 − 1 + (cn − c2n+1)Y +
2n+1
i =1
(aibi − ci)Y i +1 = 0
(4)
17
We design a polynomial t(X , Y) for which the left hand side of
Equation 4 is the constant term.
Y n+1(cid:17)
r(X , Y)
s(X , Y)
(cid:16)2n+1
r′(X , Y) = 2n+2
= 2n+2
= 1 +2n+1
i =1 ai X iY i + c−1
n X n+1
= Y
Y − X
= X n+2 + X n+1
2n+2
i =1 bi X−i
i =1 ci X−i−1 + X−1
Y
i =1 ciY i +1
k(Y)
t(X , Y)
= (r(X , Y) + s(X , Y))r′(X , Y) − k(Y)
If we have that Equation 4 is satisfied then at all y we have that
tj(X , y) has a constant term of zero. Otherwise, it has a nonzero con-
stant term at most y and so also at random y with high probability,
given a large enough field.
B.2 Protocol for the Grand-Product Argument
Our protocol for a grand product argument is given in Figure 10. It
begins by asking the prover to provide the commitments
(cid:110)
C = дα2n+1
i =1 ci x i
c−1
n
,
(cid:111)M
j=1
for which the prover must show that C has no negative exponents
$←− Fp and asks the prover
of X. The verifier samples challenge y
to commit to
T = дαt(x,y)
$←− Fp and asks the helper to open
The verifier now samples z
.
дαc−1
n x n+1
UV x n+1 at yz to va C at z−1 to vc
T at z to t .
C at y to vk
Given these evaluations, the verifier can compute
r(z, y) = yva
s(z, y) = zn+2 + zn+1
′(z, y) = vcz
−1
−1 + z
k(y) = vky + 1
r
y − z
2n+2
y
and we have
t(z, y) = (r(z, y) + s(z, y))r
′(z, y) − k(y).
The verifier can now check that t = t(z, y), demonstrating that
the earlier commitment to t(X , y) was computed correctly with
respect to UV x n+1 and C, and that it has a constant term of zero,
completing the argument.
Lemma B.1. The grand-product argument in Figure 10 is sound
when instantiated with a secure polynomial commitment scheme and
a sound well-formedness argument (see Section B.3).
Proof. By the extractability of the polynomial commitment
scheme, there exists an algebraic extractor that outputs polynomi-
als a(X), c(X), t(X) such that va = a(yz), vc = c(z−1), vk = c(y)
and t = t(z). By the well-formedness argument, c(X) cannot have
negative powers. By the well-formedness argument, U and V have
algebraic representations with powers between 1 and n. The pairing
equation gives us that
a(X) = c
−1
n X n+1 + u(X) + xn+1
The verifier computes s(z, y) for itself. The verifier also learns that
the coefficients of vc and vk are consistent, otherwise an adversary
v(X).
could open the same commitment to two different polynomial eval-
uations and break evaluation binding. Thus r′ and k are calculated
correct. Further, because the prover opens T to
t = a(b + s) − k(y)
t(X) cannot have a non-zero X
0 coefficient (otherwise an adversary
could break the bounded property of the polynomial commitment
scheme).
Suppose this holds for 2n + 4 different challenges y ∈ Zp. Then
we have equality of polynomials in Appendix B.1 since a non-zero
polynomial of degree 2n + 4 cannot have 2n + 3 roots i.e.
(r(X , Y) + s(X , Y))r
′(X , Y) − k(Y)
has no constant term. This implies that u(X) and v(X) define a valid
opening.
□
B.3 Well-formedness Argument
Our techniques for the grand-product argument require us to en-
sure that a number of elements computed during the protocol are
commitments to polynomials of the form
n
i =1
f (X) =
ai X i
for some n-length vector a. If we have that
the prover sends
F = дα f (x)
= дx−d f (x)
L
R = дx d−n f (x)
which the verifier can check with the pairings
e(F , h)
= e(L, hα x d )
e(F , h) = e(R, hα x n−d )
C BATCHING ARGUMENTS FOR IMPROVED
EFFICIENCY
The unhelped Sonic protocol uses 3 +7M polynomial commitments,
where M is the number of permutations required to represent the
computation. Assuming M = 3, this means there are 24 polynomial
commitment arguments. By having the prover batch some of these
arguments together, we can reduce the total number of polynomial
commitments to 7 + 3M. As a result, the proofs for our unhelped
Sonic protocol have 20 elements in G1 and 16 elements in Fp. As-
suming a group size and field size of 256 bits, this means the proof
sizes are approximately 1kB.
C.1 Batching Polynomial Commitments
Suppose that the prover is required to open commitments
F1, . . . , Fk
with maximum degree max1, . . . , maxk at the same randomly cho-
sen point z. To avoid encountering the same costs k times, the
prover first engages with the verifier, as shown below.
18
n
UV x n+1
$←− Fp
y − z
2n+2
y
i =1 ai +n+1x i
gprodV3((va,Wa),(vc ,Wc),(vk ,Wk),Wt) (cid:55)→ 0/1:
r ← yva
s ← zn+2 + zn+1
r′ ← vcz−1
k ← vky + 1
t ← (r + s)r′ − k
check e(A, h) = e(дα an+1x n+1
U , h)e(V , hx n+1)
check pcV(bp, srs, A, d, yz,(va,Wa))
check pcV(bp, srs, C, d, z−1
,(vc ,Wc))
check pcV(bp, srs, C, d, y,(vk ,Wk))
check pcV(bp, srs,T , d,(t,Wt))
check wformV(bp, srs, 2n + 1, C, Cw)
check wformV(bp, srs, n, U , Uw)
check wformV(bp, srs, n, V , Vw)
return 1 if all checks pass, else return 0
, V = дαn
info = bp, srs, U , V , e(дx n+1
(a, b, c) such that U = дαn
, hα)
Common input:
Prover’s input:
i =1 ai x i
gprodP1(info,(a1, . . . , a2n+1)) (cid:55)→ (A, C, Cw , Uw , Uv , c−1
n ):
an+1 ← c−1
A ← дan+1α x n+1
C ← Commit(bp, srs, d, c(X))
Cw ← wformP(bp, srs, 2n + 1, C, c)
Uw ← wformP(bp, srs, n, U ,(a1, . . . , an))
Uv ← wformP(bp, srs, n, V ,(an+2, . . . , a2n+1))
send (A, C, Cw , Uw , Uv , c−1
n )
gprodV1(info,(A, C, Cw , Uw , Uv , c−1
send y
gprod2(y) (cid:55)→ T :
T ← Commit(bp, srs, d, t(X , y))
send T
gprodV2(T) (cid:55)→ gprodP:
send z
gprod3(z) (cid:55)→ ((va,Wa),(vc ,Wc),(vk ,Wk),Wt):
(va,Wa) ← Open(A, yz, a(X))
(vc ,Wc) ← Open(C, z−1
, c(X))
(vk ,Wk) ← Open(C, y, c(X))
(t,Wt) ← Open(T , z, t(X))
return ((va,Wa),(vc ,Wc),(vk ,Wk),Wt)
n )) (cid:55)→ gprodP:
$←− Fp
Figure 10: The grand-product argument.
19
3
2
γ
t3(X , y) and sets T ← Commit(bp, srs, d, t(X , y)).
• The prover computes t(X , y) ← γt1(X , y) + γ
• The verifier sends z as in the grand-product argument.
• The prover opens va,i , vc,i , vk,i as per the grand-product
• The verifier checks that t =m
argument. However they open T at z to t only once.
i γ i − kiγ i
i =1(ri + si)r′
t2(X , y) +
Observe that the probability that at random γ,
M
i =1
M
i =1
tiγ i =
(ri + si)r
′
i γ i − kiγ i
but at some i
′
i − ki
is negligible in a sufficiently large field.
ti (cid:44) (ri + si)r
P (cid:55)→ V :
The prover sends F1, . . . , Fk.
V (cid:55)→ P :
The verifier sends random z to the prover.
P (cid:55)→ V :
The prover sends v1, . . . , vk
It claims these are the correct openings at z.
V (cid:55)→ P :
The verifier sends random γ to the prover.
P (cid:55)→ V :
The prover sets w(X) =
They return дw(x).
V (cid:55)→ P :
k
The verifier sets FT =k
They set v =k
k
They check e(W , hα x)e(дvW z , hα) = F.
i =1 γ i(fi(X)−fi(z))
i =1 viγ i.
k
i =1 e(F
X−z
γ i
i
.
fi(z)γ i
, hα x−d +maxi ).
viγ i =
i =1
i =1
vi (cid:44) fi(z)
Observe that the probability that at random γ,
but at some i
containsk
is negligible in a sufficiently large field. Further observe that FT
i =1 fi(x)γ i in the target group. This can be proven secure
using a similar argument to that in Theorem 6.3.
C.2 Batching Grand-Product Arguments
The prover is required to show that
( ¯S1, ¯P1), . . . ,( ¯SM , ¯PM)
all satisfy a grand-product argument. Thus they know
such that
for all 1 ≤ i ≤ M and
(¯s1(X), ¯p1(X)), . . . ,(¯sM(X), ¯pM(X))

¯si, j =
j
j
¯pi, j
¯Si = дα ¯si(x) and ¯Pi = дα ¯pi(x)
.
Each grand-product argument requires three well-formedness ar-
gument and four polynomial commitments. To avoid encountering
these costs M times, the prover batches the well-formedness argu-
ments and the commitment to T = Commit(bp, srs, d, t(X , y)) (the
most expensive polynomial). Batching the commitment to T works
as follows.
• The prover sends (A1, C1), . . . ,(AM , CM).
• The verifier sends random y as in the grand-product argu-
ment in addition to γ to the prover.
20