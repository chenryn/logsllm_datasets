# 十六、附录
# 1。运行我的第一个 Docker 容器
## 活动 1.01:从 Docker Hub 中提取并运行 PostgreSQL 容器映像
**解决方案**:
1.  To start the Postgres Docker container, first determine what environment variables are required to set the default username and password credentials for the database. Reading through the official Docker Hub page, you can see that you have configuration options for the `POSTGRES_USER` and `POSTGRES_PASSWORD` environment variables. Pass the environment variables using the `-e` flag. The final command to start our Postgres Docker container will be as follows:
    ```
    docker run -itd -e "POSTGRES_USER=panoramic" -e "POSTGRES_PASSWORD=trekking" postgres:12
    ```
    运行此命令将启动容器。
2.  Execute the `docker ps` command to verify that it is running and healthy:
    ```
    $ docker ps
    ```
    该命令应该返回如下输出:
    ```
    CONTAINER ID  IMAGE         COMMAND                 CREATED
      STATUS              PORTS               NAMES
    29f115af8cdd  postgres:12   "docker-entrypoint.s…"  4 seconds ago
      Up 2 seconds        5432/tcp            blissful_kapitsa
    ```
    从前面的输出可以看出，ID 为`29f115af8cdd`的容器已经启动并运行。
在本练习中，您已经成功启动了一个 PostgreSQL 版本 12 容器，它是全景徒步应用的一部分，将在本书的过程中构建。
## 活动 1.02:访问全景徒步应用数据库
**解决方案**:
1.  Log in to the database instance using `docker exec` to start the PSQL shell inside the container, passing in the `--username` flag and leaving the `--password` flag empty:
    ```
    $ docker exec -it  psql --username panoramic --password
    ```
    这应该会提示您输入密码，并启动一个 PSQL shell。
2.  Use the `\l` command to list all the databases:
    ```
    psql (12.2 (Debian 12.2-2.pgdg100+1))
    Type "help" for help.
    panoramic=# \l
    ```
    将返回容器中运行的数据库列表:
    ![Figure 1.4: List of databases ](img/B15021_01_04.jpg)
    图 1.4:数据库列表
3.  最后，使用`\q`快捷键退出外壳。
4.  使用`docker stop`和`docker rm`命令停止并清理容器实例。
在本活动中，您通过使用在*活动 1.01* 、*中设置的凭据登录并从 Docker Hub* 中提取和运行 PostgreSQL 容器映像来访问容器中运行的数据库。您还列出了容器中运行的数据库。该活动让您亲身体验了如何使用 PSQL shell 访问在任何容器中运行的数据库。
# 2。Dockerfiles 入门
## 活动 2.01:在 Docker 容器上运行一个 PHP 应用
**解决方案**:
1.  为此活动创建一个名为`activity-02-01`的新目录:
    ```
    mkdir activity-02-01
    ```
2.  导航至新创建的`activity-02-01`目录:
    ```
    cd activity-02-01
    ```
3.  在`activity-02-01`目录下，创建一个名为`welcome.php` :
    ```
    touch welcome.php 
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim welcome.php 
    ```
5.  用活动开始时提供的内容创建`welcome.php`文件，然后保存并退出`welcome.php`文件:
    ```
     11 && $hourOfDay  17){
        $message = «Good Evening»;
    }
    echo $message;
    ?>
    ```
6.  在`activity-02-01`目录下，创建一个名为`Dockerfile` :
    ```
    touch Dockerfile
    ```
    的文件
7.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
8.  Add the following content to the `Dockerfile`, and then save and exit from the `Dockerfile`:
    ```
    # Start with Ubuntu base image
    FROM ubuntu:18.04
    # Set labels
    LABEL maintainer=sathsara
    LABEL version=1.0 
    # Set environment variables
    ENV DEBIAN_FRONTEND=noninteractive
    # Install Apache, PHP, and other packages
    RUN apt-get update && \
        apt-get -y install apache2 \
        php \ 
        curl
    # Copy all php files to the Docker image
    COPY *.php /var/www/html
    # Set working directory
    WORKDIR /var/www/html
    # Create health check
    HEALTHCHECK --interval=5s --timeout=3s --retries=3 CMD curl -f   http://localhost || exit 1
    # Expose Apache
    EXPOSE 80
    # Start Apache
    ENTRYPOINT ["apache2ctl", "-D", "FOREGROUND"]
    ```
    我们使用`ubuntu`基础映像开始这个`Dockerfile`，然后设置几个标签。接下来，`DEBIAN_FRONTEND`环境变量被设置为`noninteractive`以使软件包安装非交互。然后安装`apache2`、`php`、`curl`包，将 PHP 文件复制到`/var/www/html`目录。接下来，配置健康检查并暴露端口`80`。最后，使用`apache2ctl`命令启动 Apache 网络服务器。
9.  Now, build the Docker image:
    ```
    $ docker image build -t activity-02-01 .
    ```
    运行`build`命令后，应该会得到如下输出:
    ![Figure 2.22: Building the activity-02-01 Docker image ](img/B15021_02_22.jpg)
    图 2.22:构建活动-02-01 Docker 映像
10.  Execute the `docker container run` command to start a new container from the Docker image that you built in the previous step:
    ```
    $ docker container run -p 80:80 --name activity-02-01-container -d activity-02-01
    ```
    由于您是在分离模式下启动 Docker 容器的(带有`-d`标志)，前面的命令将输出结果 Docker 容器的 ID。
11.  Now, you should be able to view the Apache home page. Go to the `http://127.0.0.1/welcome.php` endpoint from your favorite web browser:
    ![Figure 2.23: PHP application page  ](img/B15021_02_23.jpg)
    图 2.23: PHP 应用页面
    注意，默认的 Apache 主页是可见的。在前面的输出中，您收到的输出为`Good Morning`。该输出可能会有所不同，根据运行该容器的时间，显示为`Good Afternoon`或`Good Evening`。
12.  现在，清理容器。首先，用 docker 容器停止命令停止 Docker 容器:
    ```
    $ docker container stop activity-02-01-container
    ```
13.  最后，用`docker container rm`命令
    ```
    $ docker container rm activity-02-01-container
    ```
    移除 Docker 容器
在本练习中，我们学习了如何使用本章中所学的`Dockerfile`指令来记录一个示例 PHP 应用。我们使用了多个`Dockerfile`指令，包括`FROM`、`LABEL`、`ENV`、`RUN`、`COPY`、`WORKDIR`、`HEALTHCHECK`、`EXPOSE`和`ENTRYPOINT`。
# 3。管理您的 Docker 映像
## 活动 3.01:使用 Git 哈希版本控制构建脚本
**解决方案**:
您可以通过多种方式完成本活动。这里有一个例子:
1.  创建新的构建脚本。第一行显示设置`–ex`命令，将每一步打印到屏幕上，如果任何一步失败，脚本将失败。*第 3 行*和*第 4 行*设置注册表和服务名称的变量:
    ```
    1 set -ex
    2
    3 REGISTRY=dev.docker.local:5000
    4 SERVICENAME=postgresql
    ```
2.  在*第 6 行*中，将`GIT_VERSION`变量设置为指向您的短 Git 提交散列。构建脚本然后将该值打印到*第 7 行* :
    ```
    6 GIT_VERSION=`git log -1 --format=%h`
    7 echo "version: $GIT_VERSION "
    ```
    中的屏幕上
3.  Use the `docker build` command in *line 9* to create your new image and add the `docker push` command in *line 11* to push the image to your local Docker registry:
    ```
    9 docker build -t $REGISTRY/$SERVICENAME:$GIT_VERSION .
    10
    11 docker push $REGISTRY/$SERVICENAME:$GIT_VERSION
    ```
    脚本文件如下所示:
    ```
    1 set -ex
    2
    3 REGISTRY=dev.docker.local:5000
    4 SERVICENAME= postgresql
    5
    6 GIT_VERSION=`git log -1 --format=%h`
    7 echo "version: $GIT_VERSION "
    8
    9 docker build -t $REGISTRY/$SERVICENAME:$GIT_VERSION .
    10
    11 docker push $REGISTRY/$SERVICENAME:$GIT_VERSION
    ```
4.  Run the following command to ensure that the script has been built and runs successfully:
    ```
    ./build.sh
    ```
    您应该得到如下输出:
    ```
    ./BuildScript.sh 
    ++ REGISTRY=dev.docker.local:5000
    ++ SERVICENAME=basic-app
    +++ git log -1 --format=%h
    ++ GIT_VERSION=49d3a10
    ++ echo 'version: 49d3a10 '
    version: 49d3a10 
    ++ docker build -t dev.docker.local:5000/basic-app:49d3a10 .
    Sending build context to Docker daemon  3.072kB
    Step 1/1 : FROM postgres
     ---> 873ed24f782e
    Successfully built 873ed24f782e
    Successfully tagged dev.docker.local:5000/basic-app:49d3a10
    ++ docker push dev.docker.local:5000/basic-app:49d3a10
    The push refers to repository [dev.docker.local:5000/basic-app]
    ```
## 活动 3.02:配置您的本地 Docker 注册表存储
**解决方案**:
以下步骤描述了实现活动目标的方法之一:
1.  在你的主目录中创建`test_registry`目录:
    ```
    mkdir /home/vincesesto/test_registry/
    ```
2.  运行本地注册表，但在这种情况下，包括`-v`选项，该选项将您在上一步中创建的目录连接到`/var/lib/registry`的容器目录。另外，使用`:rw`选项确保您可以读写目录:
    ```
    docker run -d -p 5000:5000 --restart=always --name registry -v /home/vincesesto/test_registry/registry:/var/lib/registry:rw registry
    ```
3.  现在，像平常一样将映像推送到新安装的注册表中:
    ```
    docker push dev.docker.local:5000/basic-app:ver1
    ```
4.  To verify that the images are now being stored in your newly mounted directory, list the files in the `registry/docker/registry/v2/repositories/` directory.
    ```
    ls  ~/test_registry/registry/docker/registry/v2/repositories/
    ```
    您应该会看到您在上一步中刚刚推送的新映像:
    ```
    basic-app
    ```
这项活动让我们开始使用一些更高级的 Docker 选项。不要担心，在运行容器时，将有更多的章节专门帮助您理解卷装载和存储。
# 4。多阶段 Docker 文件
## 活动 4.01:部署具有多阶段 Docker 构建的 Golang HTTP 服务器
**解决方案**:
1.  为此活动创建一个名为`activity-04-01`的新目录:
    ```
    mkdir activity-04-01
    ```
2.  导航至新创建的`activity-04-01`目录:
    ```
    cd activity-04-01
    ```
3.  在`activity-04-01`目录下，创建一个名为`main.go` :
    ```
    $ touch main.go
    ```
    的文件
4.  现在，使用您最喜欢的文本编辑器打开`main.go`文件:
    ```
    $ vim main.go
    ```
5.  将以下内容添加到`main.go`文件，然后保存并退出该文件:
    ```
    package main