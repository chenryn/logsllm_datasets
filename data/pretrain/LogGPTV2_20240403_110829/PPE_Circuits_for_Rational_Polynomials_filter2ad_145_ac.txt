problem Π as input and either outputs a PPE testing circuit Q or the
special symbol unknown. In the former case, the problem Π is circuit
testable. In contrast, in the latter case, we cannot determine whether
Π is PPE circuit testable or not. Therefore, the algorithm has one-
sided correctness. If the algorithm outputs that Π has testing circuit
Q, this will be true.
Following the prior works [46, 47], our algorithm proceeds in a
sequence of steps. In each step, the algorithm (attempts to) “reduce
the complexity” of its input by adding a rational polynomial fi /hi to
the set Trusted and simultaneously modifying the testing circuit Q.
The prior works define a set of rules to determine which polynomial
is supposed to be added to Trusted and how to modify the testing
circuit Q at each step. In the end, if we can obtain Trusted = [1, m],
then we will have found a testing circuit. If, at any point, Trusted (cid:44)
[1, m] but none of the movement rules can be applied, the algorithm
terminates and outputs unknown. As the earlier works consider
only regular polynomials, we extend the rules to the case where
the PPE problem contains rational polynomials.
Reception List
Input: Pairing information G, Lengths |t1|, |t2|, |tT |
Output: Reception lists l1, l2, lT
(1) for each i ∈ {1, 2, T }, initialize li with |ti | number of
fresh variables, i.e., let li = {wi,1, · · · , wi,|li |}
(2) If an isomorphism ψ : G1 → G2 exists, then l2 := l2 ∪ l1.
If an isomorphism ϕ : G2 → G1 exists, then l1 := l1 ∪ l2
(3) lT := lT ∪ {β1β2 : β1 ∈ l1, β2 ∈ l2}
Figure 1: Algorithm to find reception list of a list of polyno-
mials
3.1 Completion Lists for a List of Polynomials
In the section, we review the concept of completion lists in the
pairing setting as described by Barthe et al. [19]. Consider any list
r = [f1/h1, . . . , fk /hk] of polynomials. Let the ith entry belongs to
, where αi ∈ I = {1, 2,T} for all i ≤ k. For any group
the group Gαi
Gi, let ti be all the polynomials in the group i.e., ti = { fj /hj : αj =
i}. We now recall the notion of completion CL(r) = {s1, s2, sT }
of the list r of polynomials with respect to a group setting [19].
Intuitively, CL(r) is the list of all polynomials that can be computed
by an adversary by applying pairing and isomorphism operations,
when he has access to the elements in the list r.
The algorithm to compute the completion CL(r) proceeds in two
steps. In the first step, it computes the reception lists {li}i∈I as
shown in Figure 1. The elements of the reception lists are mono-
mials over variables wi, j for i ∈ I, j ∈ |ti|. The monomials
characterize which products of elements in t the adversary can
compute by applying pairing operations. The result of the first
step is independent of the elements in the lists t and only de-
pends on the lengths of the lists. In the second step, the algo-
rithm computes the actual polynomials from the reception lists
as si = [m1 (t), . . . , m|li | (t)] for [m1, . . . , m|li |] = li , where every
mk is a monomial over the variables wi, j and mk (t) denotes the
result of evaluating the monomial mk by substituting wi, j with
ti[j] for i ∈ I and j ∈ |ti|. When evaluating these monomials, we
do not cancel out any common factor in the numerator and the
denominator of the result.
3.2 Rules for Moving Polynomials into the
Trusted Set
We now describe four rules for reducing the complexity of a PPE
instance. We mean reducing the number of elements represented
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2742by the rational polynomials, not in the set Trusted. We derive the
rules closely based on the rules proposed in [46, 47] that were
designed for non-rational polynomials. From now on, we assume
the formal variables R1, R2,· · · , Rm represent group elements of
any PPE challenge corresponding to Π. These formal variables also
represent the input wires of the PPE circuit C being constructed.
3.2.1 Rule 1: Simple move of a rational polynomial with all
InTrusted variables to Trusted set. In this section, we show how
to simplify the given PPE problem by moving a rational polynomial
not in Trusted to Trusted. Given a PPE problem Π = (G,n, m, r,
u, α ,Trusted) and an index k ∈ [m], rule 1 can possibly be applied
if k (cid:60) Trusted and the polynomial fk /hk ∈ r consists only of
variables ui ∈ InTrusted (these conditions are necessary, but not
sufficient). The rule 1, which is shown in Figure 2 is adapted from
Rule 1 in [46, 47]. These works for non-rational polynomials express
the untrusted polynomial fk in terms of polynomials in Trusted.
Such an expression gives rise to a pairing product equation that can
verify the well-formedness of the kth element in any PPE challenge.
In this paper, we adopt Rule 1 to rational polynomials. Here, we
additionally express the denominator hk in terms of the Trusted
polynomials and add a pairing production equation to the final
PPE circuit to verify that the denominator hk does not evaluate to
0. We now formally describe our Rule 1 in Figure 2 and prove its
correctness property in Lemma 3.1.
Lemma 3.1 (Correctness of Rule 1). Let Π = (G, n, m, r, u,
α , Trusted) be a PPE problem instance as in Definition 2.1 and let
k ∈ [m]. Suppose ⊥(cid:44) (C, Π′) = Rule1(Π, k ). Then, for every testing
circuit C′ for Π′, it holds that C AND C′ is a testing circuit for Π.
Proof. The proof of this lemma appears in Appendix C.1.
Description of Rule 1
Input: A PPE problem Π = (G, n, m, r, u, α , Trusted) and an
integer k ∈ [1, m].
Output: A PPE circuit C and a circuit PPE problem Π′, or the
symbol ⊥ (meaning could not apply rule).
Steps of Rule1(Π, k ):
(1) If k ∈ Trusted or rk = fk /hk ∈ r has variables not in
InTrusted, abort and output ⊥.
(2) Compute completion lists {s1, s2, sT } = CL(rTrusted). For
any i ∈ I and j ≤ |si |, let si [j] = f i [j]/hi [j], Si [j] =
дsi [j]
, and let Ui [j] be the pairing product term comput-
αi
ing Si [j] in terms of formal variables R1, · · · , Rm.
(3) For each i ∈ I, let Hi be a least common multiple of the
polynomials {hi [j]}j∈|si |, and let the polynomial ˆfi [j]
be such that ˆfi [j]/Hi ≡ f i [j]/hi [j].
(4) Check if there exist and index i ∈ I and constant vectors
a = (a1, · · · , a|sT | ) and b = (b1, · · · , b|si | ) with entries
|sT |(cid:88)
in Zp s.t.
aj · ˆfT [j]
rk ≡ fk
|si |(cid:88)
hk
bj · ˆfi [j]
|sT |(cid:88)
aj · sT [j] ≡
|si |(cid:88)
j =1
hk ≡
HT
j =1
(1)
(2)
≡
Hi
j =1
These equations can also be expressed as
fk · HT ≡ hk ·
j =1
bj · si [j] ≡
|sT |(cid:88)
aj · ˆfT [j]
|si |(cid:88)
j =1
bj · ˆfi [j]
j =1
hk · Hi ≡
(3)
(4)
respectively. Computing such coefficient vectors reduces
to checking if the polynomial 0 belongs to the span of all
the polynomials in the left hand side and the right hand
side of the above equation.
(5) If such a, b exists, define the PPEs
|sT |(cid:89)
j =1
A :=
UT [j]aj =
Rk
e (Rk, д2)
e (д1, Rk )
|si |(cid:89)
j =1
B :=
if αk = T
if αk = 1
if αk = 2
Ui [j]bj = Ii
is the identity element in group Gi . Now
where Ii
define PPE circuit C as MakeCircuit(G, m, α , A)
(NOT MakeCircuit(G, m, α , B)). Output
AND
the circuit C along with PPE problem Π′
(G, n, m, r, u, α , Trusted∪{k }). If such a, b do not exist,
output ⊥.
=
Figure 2: Procedure for moving certain rational polynomi-
als rk = fk /hk with all InTrusted variables to Trusted
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2743Description of SubstituteZero Algorithm
Input: A PPE Problem Π = (G, n, m, r, u, α , Trusted) and poly-
nomial h.
Output: A PPE Problem Π′ or ⊥.
• Construct vector r′ of m rational polynomials as follows.
For each k ∈ [m], let rk = fk /hk .
– If fk = Poly1 · h + Poly2 for some polynomials Poly1
and Poly2, such that (1) Poly2 does not have h as a
factor, and (2) the number of monomials in Poly2 is
less than fk when expressed in canonical form, then
set numk = Poly2. Otherwise, set numk = fk .
– If hk = Poly3 · h + Poly4 for some polynomials Poly3
and Poly4, such that (1) Poly3 does not have h as a
factor, and (2) the number of monomials in Poly4 is
less than hk when expressed in canonical form, then
set denomk = Poly4. Otherwise, set denomk = hk .
– r′
• If denomk = 0 for any k, then output ⊥. Otherwise,
k
output Π′ = (G, n, m, r′, u, α , Trusted).
= numk /denomk .
Figure 3: Algorithm for updating a PPE problem instance
when a specified polynomial h is set to 0.
3.2.2 Rule 2: More general move of a rational polynomial
with all InTrusted variables to Trusted set. In this section, we
show a more general way to move a rational polynomial not in
Trusted to Trusted. Given a PPE problem Π = (G,n, m, r, u, α ,Trusted)
and an index k ∈ [m], rule 2 can possibly be applied if k (cid:60) Trusted
and the polynomial fk /hk ∈ r consists only of variables ui ∈
InTrusted (these conditions are necessary, but not sufficient). In
Rule 1, we expressed the untrusted polynomial fk /hk in terms of
polynomials in Trusted. However, in the expression, we didn’t allow
fk /hk to be multiplied by any factor. In rule 2, we consider more
general way to express fk /hk in terms of polynomials in Trusted,
by allowing expressions of the form
( fk /hk ) · (some combination of trusted polynomials)
= (some other combination of trusted polynomials).
Once we obtain such an expression, we move fk /hk to the trusted
set and add a PPE corresponding to the expression to our final
PPE circuit. This PPE is supposed to verify well-formedness of kth
untrusted element in any PPE challenge.
However, there is one issue here. Suppose the factor that is
multiplied to fk /hk in the above expression evaluates to 0 on a
given PPE challenge. In that case, the PPE does not verify the well-
formedness of fk /hk as the PPE might be trivially satisfied. To
solve the issue, we adopt the approach proposed by [46, 47] in
their Rule 3. We break the scenario into 2 cases. (1) The factor that
is multiplied to fk /hk in the above expression does not evaluate
to 0. (2) The factor evaluates to 0. In the former case, the above
PPE validates the well-formedness of the untrusted element. In the
latter case, we try to apply other rules. As earlier, we additionally
express the denominator hk in terms of the Trusted polynomials
and add a pairing production equation to the final PPE circuit to
verify that the denominator hk does not evaluate to 0. We now
formally describe our Rule 2 in Figure 4 and prove its correctness
property in Lemma 3.2.
Lemma 3.2 (Correctness of Rule 2). Let Π = (G, n, m, r, u,
α , Trusted) be a PPE problem instance as in Definition 2.1 and let
k ∈ [m]. Suppose ⊥(cid:44) (IsIdentity, C, Π′, Π′′) = Rule2(Π, k ).
• If Π′′ (cid:44)⊥, for every pair of testing circuits C′ and C′′ for Π′
and Π′′ respectively, the PPE circuit
Z := ((NOT IsIdentity) AND C AND C′
is a testing circuit for Π.
• If Π′′ =⊥, for every testing circuit C′ for Π′,
Z := ((NOT IsIdentity) AND C AND C
) OR (IsIdentity AND C′′
′
)
)
is a testing circuit for Π.
Proof. The proof of this lemma appears in Appendix C.2.
3.2.3 Rule 3a: General move of a rational polynomial rk =
fk /hk with multiple non-InTrusted variables to the Trusted
set. We now describe a way to move a rational polynomial not
in Trusted to Trusted when the polynomial is allowed to have
non-InTrusted variables7 in the numerator. Given a PPE problem
Π = (G,n, m, r, u, α ,Trusted) and an index k ∈ [m], rule 3a can
possibly be applied if k (cid:60) Trusted, the polynomial hk ∈ r consists
only of variables ui ∈ InTrusted, and fk contains one or more
non-InTrusted variables (these conditions are necessary, but not
sufficient). In Figure 5, we formally describe the Rule 3a, which is
an extension of Rule 4 in [46, 47]. We prove its correctness property
in Lemma 3.3.
Lemma 3.3 (Correctness of Rule 3a). Let Π = (G, n, m, r, u,
α , Trusted) be a PPE problem instance as in Definition 2.1, j ∈ [n]
and k ∈ [m]. Suppose ⊥(cid:44) (IsIdentity, C, Π′, Π′′) = Rule3a(Π, j, k ).
• If Π′′ (cid:44)⊥, for every pair of testing circuits C′ and C′′ for Π′
and Π′′ respectively, the PPE circuit
Z := ((NOT IsIdentity) AND C AND C′
is a testing circuit for Π.
• If Π′′ =⊥, for every testing circuit C′ for Π′,
Z := ((NOT IsIdentity) AND C AND C
) OR (IsIdentity AND C′′
′
)
)
is a testing circuit for Π.