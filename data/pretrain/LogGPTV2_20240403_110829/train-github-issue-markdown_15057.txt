I would like to implement a feature where data entered into an AutoComplete component is stored in a list. When the user types text into the AutoComplete component and clicks the "Add" button, the data should be added to the list, and the AutoComplete input field should then be cleared. However, it appears that there is no built-in method or property to clear the input of the AutoComplete component in version 0.15.0.

### Requirements:
1. **Data Storage**: Store the data entered by the user in a list.
2. **Clear Input**: Clear the AutoComplete input field after adding the data to the list.

### Current Issue:
- The AutoComplete component in version 0.15.0 does not provide a direct method or property to clear its input value.

### Potential Solutions:
1. **Manual Input Clearing**:
   - You can manually set the value of the AutoComplete component to an empty string after adding the data to the list. This can typically be done by accessing the `value` or `inputValue` property of the AutoComplete component and setting it to an empty string.

2. **Custom Component**:
   - If the above solution is not feasible, you may need to create a custom AutoComplete component that includes a method to clear the input.

### Example Code (Pseudo-code):
```javascript
// Assuming you have a reference to the AutoComplete component
const [dataList, setDataList] = useState([]);

const handleAdd = () => {
  const inputValue = autoCompleteRef.current.value; // Get the current value of the AutoComplete

  if (inputValue) {
    // Add the input value to the list
    setDataList([...dataList, inputValue]);

    // Clear the input value
    autoCompleteRef.current.value = '';
  }
};

return (
  <div>
    <AutoComplete ref={autoCompleteRef} />
    <button onClick={handleAdd}>Add</button>
    <ul>
      {dataList.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </ul>
  </div>
);
```

### Notes:
- Ensure that the `autoCompleteRef` is correctly set up to reference the AutoComplete component.
- The exact implementation may vary depending on the specific library or framework you are using for the AutoComplete component.

If you have any further questions or need more specific guidance, please let me know!