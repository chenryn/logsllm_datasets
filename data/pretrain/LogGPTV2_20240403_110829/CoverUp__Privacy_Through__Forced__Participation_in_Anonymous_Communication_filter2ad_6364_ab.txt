data feed (in the spirit of a broadcast), which is suited
to send information for which a user does not want to
be caught reading it (e.g., sensitive medical information,
leaked documents, or a leaked e-mail list of an incrim-
inating web service). Our system tolerates a global yet
remote network-level attacker (all connections are TLS-
secured) that controls all parts of the system (depicted
by the red devils in Figure 1a) except for the computer
of some the voluntary participants. Additionally, we as-
sume that the content of the feed is signed by an external
party for which the external application has the veriﬁca-
tion key. This external party is also trusted. We defend
against a global attacker’s trafﬁc correlation capabilities
by producing trafﬁc at a constant rate.
We cryptographically protect involuntary participants
from accidentally storing parts of the feed’s potentially
controversial content on their disc by cryptographically
ensuring (via an all-or-nothing scheme [53]) that invol-
untary participants – without actively trying to – do not
have sufﬁcient information from which the content of the
feed can potentially be reconstructed. This protection is
important from a legal perspective (see Section 9).
uni-directional channel and the feed application.
1. A voluntary or involuntary participant requests a web-
site from an entry server.
2. The entry server delivers a web-page that contains
an iframe-request for the CoverUp server.
The
CoverUp server serves the iframe which in turn con-
tains CoverUp’s JavaScript snippet. This code gets
executed by the participant’s web browser.
3. This JavaScript code asks the mix server to deliver
a droplet data packet from a randomly chosen foun-
tain or a fountain details list containing description
of fountains at the mix server, depending on the page
context of the entry server. The mix server delivers
a droplet or fountain table depending on the request
of the previous step. The script saves the response
packet to the web browser’s cache database ﬁle.
The involuntary participant does not execute any opera-
tion beyond this.
4. The voluntary participant installs the external applica-
tion (received out of band) which periodically checks
for a new feed data, i.e., droplet data in the web
browser persistent cache, and copies the data into it’s
own local storage.
Dataﬂow of the uni-directional channel. Figure 1a
depicts a high level system design and data ﬂow of the
5. After accumulating a sufﬁcient amount of droplets,
the external application assembles the entire feed ci-
4
entry server...mix serverCoverUp server1. connectsto3. forwardsvia JS codetobrowserexternal application5. extractfeedcontent2. forcesclientstoconnecttobrowserexternal application5. extractfeedcontentinvoluntary participantsvoluntary participants4. sendsfeedtoentry server...involuntary participantsmix serverCoverUp servervoluntary participants3. connectclientsvia JS to2. forcesclientstoconnectto4. relayschatmessagestoexternal application5. extract& injectchatmessagesbrowserextension+external application5. extract& injectchatmessagesbrowserextension+1. connectstochatchatpher text which is encrypted by an all-or-nothing
scheme. The external decrypts the message and ver-
ify digital signature signed by the mix server to check
data authenticity.
3.2 Bi-directional channel (chat)
Based on this uni-directional channel, we construct a bi-
directional channel, which enables a voluntary partici-
pants to additionally send data over CoverUp. As de-
picted in Figure 1b, the bi-directional channel requires
a browser extension (assumed to be retrieved out of
band) that modiﬁes the outgoing messages (Step 5), pro-
duced by the JavaScript code snippet in the participants’
browser. With this bi-directional channel, we implement
a chat application, where the mix server relays chat mes-
sages between voluntary participants. For this applica-
tion, it is crucial that the voluntary participants send mes-
sages when the unmodiﬁed JavaScript (JS) code snippet
has been sent by the CoverUp server.
Concerning the trust assumptions, we need to trust
the integrity check for the JS code snippet, since oth-
erwise an attacker could introduce malicious modiﬁca-
tions into the JS code that would enable it to identify
voluntary participants. To enable the browser extension
to efﬁciently check the integrity of the JavaScript snipped
(which is crucial to prevent timing leakage), we trust the
CoverUp server in this application. The browser exten-
sion simply checks whether the origin of the JavaScript
code snippet is as expected. Alternatively, we can tol-
erate a malicious CoverUp server if we check the in-
tegrity of the JavaScript code byte for byte, which pro-
duces a signiﬁcant delay. We did not choose this alter-
native, since – as we show in Section 4.2 and 7 – the ef-
ﬁciency of CoverUp directly correlates with the privacy
that CoverUp achieves.
To gain efﬁciency, the voluntary participants sends to
the mix server the recipient in plaintext. The mix server
then relays the chat message to the corresponding re-
ceiver. Thus, we trust the mix server. Alternatively (and
not done in the prototype), CoverUp could implement
a bi-directional broadcast channel, where the messages
sent by the voluntary participants for the CoverUp server
are indistinguishable from the messages of the involun-
tary participants. This variation vastly reduces uplink
bandwidth but can tolerate a malicious mix server (see
Section 6 for a thorough discussion).
Dataﬂow of the bi-directional channel.
1. The voluntary participant composes an interactive re-
quest x on the external application. x also contains a
unique marker to indicate that it is a request for bi-
directional communication.
Figure 2: A snapshot of Bi-directional channel from a vol-
untary participants perspective. The application sends a bi-
directional request (encrypted chat) via the CoverUp extension
to the mix server and receives a response (response chat).
2. The application sends x to the browser extension.
3. The browser extension sets x to the JavaScript snippet
to send it as the request payload to the mix server.
4. The snippet sends a request droplet to the mix server
with x as the payload. Prior to that, the snippet estab-
lishes a TLS session with the mix server.
5. Upon receiving x, mix server responds with a bi-
directional data r,
6. The JavaScript snippet stores the response r to the
browser’s persistent storage.
7. The external application polls the persistent storage in
regular intervals.
8. The external application displays r to the voluntary
participant on it’s interface.
Apart from chat, we also implement interactive brows-
ing mechanism using the bi-directional channel which
can be viewed as an enhancement over the feed.
CoverUp implements a communication infrastructure
on top of HTTP communication that is secure against
trafﬁc correlation attacks and even hides whether a user
intended to participate, which in turn implies strong pri-
vacy properties (see Section 6 for detailed discussion).
4 CoverUp’s implementation
This section explains the design choices in and the details
of the implementation of the prototype (Section 4.1) and
discusses the overhead and performance of the CoverUp
prototype (Section 4.2).
4.1 CoverUp’s implementation
We implemented a prototype and made it available under
http://coverup.tech. The CoverUp implementation
consists of ﬁve components: a CoverUp server, a mix
server, an external application, a browser extension, and
a short JavaScript code snippet. The CoverUp server and
5
Mix serverexternal applicationbrowserJavaScriptextensionbi-directionalresponse8localstoragebi-directionalrequest1736254wwwand privacy and the amount of trafﬁc overhead cause and
bandwidth (i.e., throughput) of the system.
As a next step, we describe the implementation of the
applications of our case studies: feed and chat.
4.1.1 Feed
A voluntary user would install an external application,
which polls from the ﬁrefox local storage cache ﬁle. We
use fountain codes to deliver the feed data. The mix
server keeps such droplets on disk and dispatch them as
soon as it receives a request(from both voluntary and in-
voluntary participants). The cache ﬁle contains both the
table of fountains and the droplets. The CoverUp exter-
nal application reassembles droplets on regular basis and
show them when they are ready.
4.1.2 Chat
The messaging protocol is an application on top of the
bi-directional channel. The implementation involves in-
dexing the messages as POP (post ofﬁce protocol [20])
where the indexing is done by the public addresses of
the clients. This public address is derived from the
curve25519 public keys (ﬁrst 48 bits of hashed public
key). The chat application assumes that the user added
all long term public keys of all his trusted peers. For
the cryptographic protection for the messages, the appli-
cation computes a shared secret from the long term key
pairs, e.g., for a prime group generator g, a secret key
a of the user and the public key gb of the recipient the
shared secret would be (gb)a = gab. While this prototype,
in particular, does not achieve forward secrecy, there is
conceptually no problem with including a forward-secret
key exchange scheme into the chat.
Whenever a new message arrives from a source ad-
dress, the mix server keeps the message to the index of
the destination address. When a uni-directional or a bi-
directional request arrives from the destination address,
the mix server delivers the message as the response and
removes the message from the previously kept index lo-
cation.
4.2 Overhead, latency, & bandwidth
We estimate CoverUp’s overhead, latency, and band-
width to demonstrate that it can perform reasonably well
in a real world scenario, is feasible for deployment in
large scale, and does nothing incur an intolerable over-
head. CoverUp has four adjustable system parameters:
request payload size, response payload size, the average
request frequency, and the average loading time.
A
lower request and loading time leaves room for more ar-
tiﬁcial noise and thus increases privacy.
Figure 3: Mix server data ﬂow for bi-directional (chat) channel
request. The state denotes to a unique value which corresponds
to a speciﬁc voluntary user.
the mix server is implemented as a JAVA Servlet, run-
ning on an Apache Tomcat web server. The external
application is written in JAVA. The browser extension
is implemented for Firefox using the JavaScript WebEx-
tensions API. The JavaScript code snippet which fetches
feed/interactive data is kept at the CoverUp server. The
external application and the server implementation con-
sists of about 11 KLOC and the browser extension of
about 200 LOC.
We make the following four assumptions about the
browser, which are in line with Firefox’s explicitly stated
security policies. First, iframes are isolated, which we
need for the code integrity of CoverUp’s JavaScript snip-
pet. Once we checked whether an iframe is loaded from
the correct source and the source is in another domain
than the parent page, there should not be any way that
the parent page of the iframe can change the code, ex-
cept by changing the source of the iframe [41]. Second,
a JS code that is supplied from an arbitrary source is not
able to read from or write to another context of a dif-
ferent domain source without its consent. Third, the JS
code can only access the browser’s localStorage cache
and store a limited amount of data. Fourth, the JS code
cannot read or write data created by another JavaScript
code which originates from a different origin. This prop-
erty is known as the “same-origin-policy” [42], and all
modern browsers publicly claim to enforce this policy.
The system is parametric in the payload size and the
droplet request rate. The payload size and request rate is
the same, irrespective of the response type (be it a feed,
a browsing, or a chat request or response). Our proto-
type implementation uses a payload size of 75 KB and
droplet request rate of once a minute. Section 4.2 evalu-
ates our choices for these system parameters. Increasing
the payload increases the trafﬁc overhead, in particular of
involuntary user’s, and reducing the request rate reduces
the latency but decreases the privacy (see Section 7.5).
Hence, there is a natural trade-off between the latency
6
bi-directionalcreate/update statestate existsbroadcastupdate statebi-directionalrequestnonoyesyesresponseIn our prototype implementation the request/response
payload size is 75 KB, the average droplet request fre-
quency is 30 seconds, and the average loading time is
20 seconds for a sub-system that only contains the feed
application (and no browser extension), and 5 minutes
for the deployment of the full system with chat and feed.
Due to the browser extension’s high leakage (see Fig-
ure 4), we increased the loading time to cover that leak-
age with noise (see Section 7).
4.2.1 Overhead
We discuss the communication load on the entry server
and the involuntary participants. The entry server’s traf-
ﬁc overhead is minimal:
the size of the iframe tag in
its html code. The involuntary participants’ trafﬁc over-
head depends on the system parameters. To ﬁnd suit-
able values for the system parameters, we looked at the
Alexa top 15 news sites, in particular since the privacy
improvements of CoverUp’s “forced” participation ap-
proach depends on the entry server’s regular number of
visitors. The average main-page load-size of the Alexa
Top 15 news sites is around 2.2 MB. A few examples
are CNN with 5.6 MB, NYTimes with 2.4 MB, Hufﬁng-
tonPost with 6.1 MB, TheGuardian with 1.8 MB, Forbes
with 5.5 MB, BBC with 1.1 MB and Reddit with 0.8
MB,.
Assume an involuntary participants that keeps each
working day 10 tabs of the entry server open and each
one for 10 minutes. This participants would have 7.5
MB (= 10 · 5 · 2 · 75 KB) of data per day and 165 MB
(= 22∗ 7.5 MB) per month. For landline data ﬂat-rates
(i.e., for non-mobile visitors), 165 MB is not signiﬁcant,
e.g., in comparison to the trafﬁc caused by streaming
videos. Even a heavier usage of 80 hours per day, re-
sulting in 1.65 GB of monthly overhead, would for many
users be dominated by their video streaming trafﬁc.
We envision a deployment of CoverUp not to in-
clude mobile users.
In the future, however, the band-
width budget of mobile users is increasing. For mobile
phone contracts where customers have a limited budget
for high-speed bandwidth and an unbounded budget for
low-speed bandwidth, mobile network providers start in-
creasing the low-speed bandwidth from 64 Kbit/s to 1
Mbit/s [6]. We believe this trend will continue in the
following years and, thus, the bandwidth overhead will in
the future not even be an issue for mobile users. Exclud-
ing mobile users from any overhead could additionally
exclude involuntary participants from structurally weak
areas.
The computational overhead for involuntary partici-
pants is insigniﬁcant, for non-mobile visitors. Section 8
further discusses the ethical aspects of using the involun-
tary participants’ resources.
Type
feed (chat disabled) downlink
expected goodput per session
feed + chat uplink/downlink
expected goodput per session
Type
feed (chat disabled)
feed + chat
Type
feed (chat disabled)
feed + chat
chat (best case)
Session Bandwidth
20 Kbits/s
11.6 Mbit
20 Kbits/s
6 Mbit
First Request Delay
20 s + RT T
300 s + RT T
Latency During Session
36.55 s + RT T
36.55 s + RT T
4.5 s
Table 1: CoverUp’s payload bandwidth per session, delay of
the ﬁrst request and latency after the ﬁrst request. A session
starts after ﬁrst request is sent. We assume that each tab is
open for 10 minutes, thus a session length of 10 minutes minus
the ﬁrst request delay. The latency is given for the duration of
the session. 6.55 seconds is added by the communication with
CoverUp’s external application.