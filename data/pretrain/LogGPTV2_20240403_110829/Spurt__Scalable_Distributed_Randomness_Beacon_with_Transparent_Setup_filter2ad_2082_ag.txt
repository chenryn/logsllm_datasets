ness beacons in ethereum,” IEEE Security and Privacy on the blockchain
(IEEE S&B), 2017.
[21] C. Cachin, K. Kursawe, and V. Shoup, “Random oracles in constantino-
ple: Practical asynchronous byzantine agreement using cryptography,”
Journal of Cryptology, vol. 18, no. 3, pp. 219–246, 2005.
[22] C. Cachin and S. Tessaro, “Asynchronous veriﬁable information dis-
persal,” in 24th IEEE Symposium on Reliable Distributed Systems
(SRDS’05).
IEEE, 2005, pp. 191–201.
[23] J.
Camenisch, M. Drijvers,
and D. Williams,
V. Shoup,
https://eprint.iacr.org/2021/632, 2021.
T. Hanke, Y.-A.
“Internet
computer
Pignolet,
consensus,”
[24] R. Canetti and T. Rabin, “Fast asynchronous byzantine agreement with
the twenty-ﬁfth annual ACM
optimal resilience,” in Proceedings of
symposium on Theory of computing, 1993, pp. 42–51.
[25] I. Cascudo and B. David, “Scrape: Scalable randomness attested by
public entities,” in International Conference on Applied Cryptography
and Network Security. Springer, 2017, pp. 537–556.
[26] ——, “Albatross: publicly attestable batched randomness based on secret
sharing,” in International Conference on the Theory and Application of
Cryptology and Information Security. Springer, 2020, pp. 311–341.
[27] M. Castro, B. Liskov et al., “Practical byzantine fault tolerance,” in
Proceedings of the Third Symposium on Operating Systems Design and
Implementation, 1999, p. 173–186.
[28] D. Chaum and T. P. Pedersen, “Wallet databases with observers,” in
Annual International Cryptology Conference. Springer, 1992, pp. 89–
105.
[29] A. Cherniaeva, I. Shirobokov, and O. Shlomovits, “Homomorphic en-
cryption random beacon.” 2019.
[30] I. Damgård, “On σ-protocols,” Lecture Notes, University of Aarhus,
Department for Computer Science, 2002.
[31] S. Das, V. J. Ribeiro, and A. Anand, “Yoda: Enabling computationally
intensive contracts on blockchains with byzantine and selﬁsh nodes,” in
Proceedings of the 26th Annual Network and Distributed System Security
Symposium, 2019.
[32] B. David, P. Gaži, A. Kiayias, and A. Russell, “Ouroboros praos:
An adaptively-secure, semi-synchronous proof-of-stake blockchain,” in
Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 66–98.
[33] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-
generation onion router,” Naval Research Lab Washington DC, Tech.
Rep., 2004.
[34] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the presence
of partial synchrony,” Journal of the ACM (JACM), vol. 35, no. 2, pp.
288–323, 1988.
[35] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to
identiﬁcation and signature problems,” in Conference on the theory and
application of cryptographic techniques. Springer, 1986, pp. 186–194.
[36] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility of
distributed consensus with one faulty process,” Journal of the ACM
(JACM), vol. 32, no. 2, pp. 374–382, 1985.
[37] A. G ˛agol, D. Le´sniak, D. Straszak, and M. ´Swi˛etek, “Aleph: Efﬁcient
atomic broadcast in asynchronous networks with byzantine nodes,” in
Proceedings of the 1st ACM Conference on Advances in Financial
Technologies, 2019, pp. 214–228.
[38] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Secure distributed
key generation for discrete-log based cryptosystems,” Journal of Cryp-
tology, vol. 20, no. 1, pp. 51–83, 2007.
[39] M. Ghosh, M. Richardson, B. Ford, and R. Jansen, “A torpath to
torcoin: Proof-of-bandwidth altcoins for compensating relays,” NAVAL
RESEARCH LAB WASHINGTON DC, Tech. Rep., 2014.
[40] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand:
Scaling byzantine agreements for cryptocurrencies,” in Proceedings of
the 26th Symposium on Operating Systems Principles, 2017, pp. 51–68.
[41] S. Goel, M. Robson, M. Polte, and E. Sirer, “Herbivore: A scalable and
efﬁcient protocol for anonymous communication,” Cornell University,
Tech. Rep., 2003.
[42] D. Goulet and G. Kadianakis, “Random number generation during tor
voting,” Tor’s protocol speciﬁcations-Proposal, vol. 250, 2015.
[43] J. Groth, “Non-interactive distributed key generation and key resharing.”
IACR Cryptol. ePrint Arch., vol. 2021, p. 339, 2021.
[44] K. Gurkan, P. Jovanovic, M. Maller, S. Meiklejohn, G. Stern, and
A. Tomescu, “Aggregatable distributed key generation,” in Annual Inter-
national Conference on the Theory and Applications of Cryptographic
Techniques. Springer, 2021, pp. 147–176.
[45] M. Haahr, “Random. org: True random number service,” School of Com-
puter Science and Statistics, Trinity College, Dublin, Ireland. Website
(http://www. random. org). Accessed, vol. 10, 2010.
[46] S. Heidarvand and J. L. Villar, “Public veriﬁability from pairings in
secret sharing schemes,” in International Workshop on Selected Areas
in Cryptography. Springer, 2008, pp. 294–308.
[47] M. P. Jhanwar, “A practical (non-interactive) publicly veriﬁable secret
sharing scheme,” in International Conference on Information Security
Practice and Experience. Springer, 2011, pp. 273–287.
[48] M. P. Jhanwar, A. Venkateswarlu, and R. Safavi-Naini, “Paillier-based
publicly veriﬁable (non-interactive) secret sharing,” Designs, codes and
Cryptography, vol. 73, no. 2, pp. 529–546, 2014.
[49] A. Jivsov, “Compact representation of an elliptic curve point,” Internet
Engineering Task Force, 2014.
[50] J. Kelsey, L. T. Brandão, R. Peralta, and H. Booth, “A reference for
randomness beacons: Format and protocol version 2,” National Institute
of Standards and Technology, Tech. Rep., 2019.
[51] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Annual Interna-
tional Cryptology Conference. Springer, 2017, pp. 357–388.
[52] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and
B. Ford, “Omniledger: A secure, scale-out, decentralized ledger via
sharding,” in 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 2018, pp. 583–598.
[53] A. K. Lenstra and B. Wesolowski, “A random zoo: sloth, unicorn, and
trx.” 2015.
[54] B. Libert and D. Vergnaud, “Unidirectional chosen-ciphertext secure
proxy re-encryption,” in International Workshop on Public Key Cryp-
tography. Springer, 2008, pp. 360–379.
[55] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena,
“A secure sharding protocol for open blockchains,” in Proceedings of
the 2016 ACM SIGSAC Conference on Computer and Communications
Security, 2016, pp. 17–30.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
142515
[56] R. J. McEliece and D. V. Sarwate, “On sharing secrets and reed-solomon
codes,” Communications of the ACM, vol. 24, no. 9, pp. 583–584, 1981.
[57] B. Möller, “Algorithms for multi-exponentiation,” in International Work-
shop on Selected Areas in Cryptography. Springer, 2001, pp. 165–180.
[58] S. Nakamoto et al., “Bitcoin: A peer-to-peer electronic cash system,”
2008.
[59] P. Paillier, “Public-key cryptosystems based on composite degree residu-
osity classes,” in International conference on the theory and applications
of cryptographic techniques. Springer, 1999, pp. 223–238.
[60] R. Pass and E. Shi, “Hybrid consensus: Efﬁcient consensus in the
permissionless model,” in 31st International Symposium on Distributed
Computing (DISC 2017).
Schloss Dagstuhl-Leibniz-Zentrum fuer
Informatik, 2017.
[61] D. Pointcheval and J. Stern, “Security proofs for signature schemes,”
in International Conference on the Theory and Applications of Crypto-
graphic Techniques. Springer, 1996, pp. 387–398.
[62] I. S. Reed and G. Solomon, “Polynomial codes over certain ﬁnite ﬁelds,”
Journal of the society for industrial and applied mathematics, vol. 8,
no. 2, pp. 300–304, 1960.
[63] A. Ruiz and J. L. Villar, “Publicly veriﬁable secret sharing from
paillier’s cryptosystem,” in WEWoRC 2005–Western European Workshop
on Research in Cryptology. Gesellschaft für Informatik eV, 2005.
[64] P. Schindler, A. Judmayer, M. Hittmeir, N. Stifter, and E. Weippl,
“Randrunner: Distributed randomness from trapdoor vdfs with strong
uniqueness,” in Proceedings of the 29th Annual Network and Distributed
System Security Symposium, 2021.
[65] P. Schindler, A. Judmayer, N. Stifter, and E. Weippl, “Hydrand: Prac-
tical continuous distributed randomness,” in 2015 IEEE Symposium on
Security and Privacy.
IEEE, 2020.
[66] B. Schoenmakers, “A simple publicly veriﬁable secret sharing scheme
and its application to electronic voting,” in Annual International Cryp-
tology Conference. Springer, 1999, pp. 148–164.
[67] A. Shamir, “How to share a secret,” Communications of the ACM,
vol. 22, no. 11, pp. 612–613, 1979.
[68] N. Starr, “Nonrandom risk: The 1970 draft lottery,” Journal of Statistics
Education, vol. 5, no. 2, 1997.
[69] E. Syta, P. Jovanovic, E. K. Kogias, N. Gailly, L. Gasser, I. Khofﬁ, M. J.
Fischer, and B. Ford, “Scalable bias-resistant distributed randomness,”
in 2017 IEEE Symposium on Security and Privacy (SP).
Ieee, 2017,
pp. 444–460.
[70] J. Van Den Hooff, D. Lazar, M. Zaharia, and N. Zeldovich, “Vuvuzela:
Scalable private messaging resistant to trafﬁc analysis,” in Proceedings
of the 25th Symposium on Operating Systems Principles, 2015, pp. 137–
152.
[71] D. I. Wolinsky, H. Corrigan-Gibbs, B. Ford, and A. Johnson, “Dissent
in numbers: Making strong anonymity scale,” in Presented as part
of the 10th {USENIX} Symposium on Operating Systems Design and
Implementation ({OSDI} 12), 2012, pp. 179–182.
[72] M. Yin, D. Malkhi, M. K. Reiter, G. G. Gueta, and I. Abraham, “Hot-
stuff: Bft consensus with linearity and responsiveness,” in Proceedings
of the 2019 ACM Symposium on Principles of Distributed Computing.
ACM, 2019, pp. 347–356.
[73] M. Zamani, M. Movahedi, and M. Raykova, “Rapidchain: Scaling
blockchain via full sharding,” in ACM Conference on Computer and
Communications Security, 2018, pp. 931–948.
APPENDIX A
PVSS: DEFITIONS AND SECURITY
We adopt the general model for PVSS from [66], and the
security deﬁnitions from [54], [63]. Given a set of n nodes, a
dealer L seeks to share a randomly chosen secret s among the
nodes using an (n, t+1) threshold access-structure. Informally,
the property we seek from PVSS is that any subset of t or
fewer shares do not reveal any information about the secret s
but any subset of t + 1 or more shares recover the secret
s. Additionally, any external veriﬁer V should be able to
check that the dealer L acted honestly without learning any
information about the shares or the secret, hence the name
publicly veriﬁable.
As mentioned in §IV, a PVSS protocol has four steps: Setup,
Share, Verify, and Reconstruct.
– Setup: The setup algorithm generates and publishes the
parameters of the scheme. Every node i publishes a public
key pki and keeps the corresponding secret key ski private.
– Share: The dealer L creates shares s1, ..., sn for a randomly
chosen secret s. It then encrypts each share si with the
public key pki of node i to obtain ci. It then publishes these
ci’s along with proofs πi’s that these are indeed encryptions
of valid shares of some secret.
– Verify: In this step, any external V (not necessarily a
participant in the protocol) can verify non-interactively that
ci are encryptions of valid shares of some secret.
– Reconstruct: In this step, node i decrypts ci using its secret
key ski to get ˜si and publishes si together with a (non-
interactive) zero-knowledge proof ˜πi
is indeed a
correct decryption of ci. An external veriﬁer V validates the
decrypted shares. If there are at least t + 1 valid decrypted
shares, V applies a reconstruction procedure to recover the
original secret s shared by the dealer.
A PVSS scheme must provide the following three security
that ˜si
guarantees: Correctness, Veriﬁability, and IND1-Secrecy.
– Correctness: If the dealer is honest, then all veriﬁcation
checks in all steps pass and the secret can be reconstructed.
– Veriﬁability: If the checks in the veriﬁcation step pass,
then except for negligible probability,
the values ci are
encryptions of a valid shares of some secret. If the check
in the reconstruction step passes, then the communicated
values si are the shares created by the dealer.
– IND1-Secret: Prior to the reconstruction step, the published
information together with the secret keys of any t nodes
gives no information about the secret. This can be formal-
ized by the following indistinguishability deﬁnition adapted
from [25], [54], [63].
Deﬁnition 4. (IND1-Secret) A (n, t + 1) PVSS is said to be
IND1-secret if for any probabilistic polynomial time adversary
A corrupting at most t parties, if A has negligible advantage
in the following game played against an challenger.
1) The challenger runs the Setup step of the PVSS and
sends all public information to A. Moreover, it creates
secret and public keys for all honest nodes, and sends
the corresponding public keys to A.
2) A sends the public keys of the corrupted nodes to the
challenger.
3) The challenger chooses values s0 and s1 at random in the
space of secrets. It then chooses b ← {0, 1} uniformly at
random and runs the Sharing step of the protocol with s0
as secret. It sends A all public information generated in
the Sharing step, together with sb.
4) A makes a guess b(cid:48).
The advantage of A is deﬁned as | Pr[b = b(cid:48)] − 1/2|.
The correctness of ΠDBDH follows trivially from the proper-
ties of bilinear pairing and the fact that every code word u in a
code C is orthogonal to all code words in C⊥. The following
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
152516
i
i
0
1 , gα
0 , gsi
= pkp(i)
p(0) = α and p(i) = si for i = 1, ..., t. Note that ADBDH
1 , and gsi
does not know α, but it does know gα
for 1 ≤ i ≤ t, so it can use the Lagrange interpolation
in the exponent to compute the adequate vi and wi. For
t + 1 ≤ i ≤ n, it also sets ci = wui
. Note that ci =
gui·p(i)
. Finally, it sends all these values together
0
with z (which plays the role of xb in the IND-Secret game)
to Apriv.
If b(cid:48) = 0, ADBDH guesses that z = e(g0, g1)αβγ; otherwise
the information Apriv receives in step 3) is
distributed exactly like a sharing phase of the value e(hα
0 , h1)
with the PVSS. Since h0 = gβ and h1 = gγ
0 , h1) =
e(g0, g1)αβγ. It is now easy to see that the guessing advantage
of ADBDH is the same as the advantage of Apriv.
4) Apriv makes a guess b(cid:48).
ADBDH guesses that z is a random element in GT .
Note that
1 , e(hα
theorem ensures that ΠDBDH guarantees veriﬁability. Recall
from §IV, q is the order of the groups in our PVSS scheme.
Theorem 4 (Veriﬁability). If the checks in the veriﬁcation step
is successful, then except for probability 1/q the ci are correct
encryptions of shares of each node. Furthermore, during the
reconstruction step, honest nodes only accept si
that are
correct decryption of ci.
Proof. From Lemma 1, except with probability 1/q the poly-
nomial committed by the dealer is a degree t polynomial.
Since e(ci, g1) = e(pki, vi) holds for every i ∈ {1, 2. . . . , n},
this implies logg1 vi = logpki ci for each i. Otherwise, if
a = logg1 vi (cid:54)= logpki ci = b for some i, then e(ci, g1) =
e(pki, g1)b (cid:54)= e(pki, ga
1 )a = e(pki, v1) and the check would
fail.
Furthermore, during the reconstruction step, for every in-
valid decryption, the veriﬁcation would fail with probability
0 for some a (cid:54)= si, then e(h0, vi) =
1, because when ˜si = ha
e(h0, g1)si (cid:54)= e(˜si, g1) = e(ha
0, g1). This implies honest nodes
only accept valid decryption of ci.
The IND1-Secret property of ΠDBDH assumes the hardness
of the Decisional Bilinear Difﬁe-Hellman problem below.
Deﬁnition 5 (Decisional Bilinear Difﬁe-Hellman (DBDH)).
Given pairing groups G0, G1, target group GT , each of size q,
let e : G0×G1 → GT be the efﬁcient bilinear pairing map. For
generators g0 ∈ G0, g1 ∈ G1, random values α, β, γ, δ ← Zq
and u0 ← gα
1 , the following
distributions D0 and D1 are computationally indistinguishable
0 , w1 ← gγ
0 , u1 ← gα
1 , v0 ← gβ
D0 =(cid:0)u0, u1, v0, w1, e(g0, g1)αβγ(cid:1)
D1 =(cid:0)u0, u1, v0, w1, e(g0, g1)δ(cid:1)
0 , gα
0 , gγ
1 , gβ
Theorem 5. Under the Decisional Bilinear Difﬁe-Hellman
assumption, the protocol ΠDBDH is IND1-secret against a
static PPT adversary.
Proof. We show that, if there exists an adversary Apriv that
can break the IND1-secrecy of ΠDBDH then there exists an
adversary ADBDH which can use Apriv to break Bilinear De-
cisional Difﬁe-Hellman assumption with the same advantage.
Without loss of generality, Apriv corrupts the ﬁrst t nodes.
Let g0 ∈ G0 and g1 ∈ G1 be generators of the groups.
1 , z) be an instance of the DBDH problem.
Let (gα
ADBDH upon given the DBDH instance, plays the role of the
challenger for Apriv and simulates the IND1 game to Apriv
as follows.
1) The challenger sets h0 = gβ
1 and runs the Setup
step of ΠDBDH. For t < i ≤ n, ADBDH selects uniformly
random values ui ← Zp (these can be thought of implicitly
0 to Apriv.
deﬁning ski as ski = ui/β) and sends pki = gui
2) For 1 ≤ i ≤ t, Apriv sends the public keys pki to the
challenger.
3) For 1 ≤ i ≤ t, the challenger chooses uniformly random
values si ∈ Zq and set vi = gsi
0 and ci = pksi
i .
For t + 1 ≤ i ≤ n, it sets vi = gp(i)
0 where
p(x) is the polynomial of degree at most t determined by
and wi = gp(i)
1 , wi = gsi
0 , h1 = gγ
1
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
162517