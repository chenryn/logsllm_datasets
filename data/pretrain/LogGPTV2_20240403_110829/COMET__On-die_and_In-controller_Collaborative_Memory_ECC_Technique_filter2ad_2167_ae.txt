extra parity bits as compared to SECDED. In some high
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
133
Table III: Comparison of different COMET schemes with past works
On-die ECC check bits
per 128b dataword
In-controller ECC check bits
per 64b dataword
Two codes designed
independently
Memory protocol
unchanged
Free of SDC
caused by DBE
DBE correction
per 64-bit of data
SBE correction in DRAM
transparent to the system
On-die SEC + in-controller SECDED
SEC-COMET
SECDED-COMET
SEC-COMET-DBC
XED [28]
DUO VRT [15]
DUO SDDC [15]
Minimal Aliasing SEC [32]
8
8
8
8
16
-
-
8
8
8
8
8
8
4
12
-
Yes
Yes
No
Yes
Yes
-
-
-
Yes
Yes
Yes
Special command
Yes
Extra bursts per access
Extra bursts per access
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No (Reduced)
No
No
No
Yes (99.9997%)
Yes
One per 512b access
Yes
No
Yes
Yes
Yes
Yes
No
No
No
Yes
performance, high-reliability expensive systems today, single
symbol correcting, double symbol detecting (SSCDSD, also
known as Chipkill) coding is used to tolerate upto single chip
failures. However, the standard 4-bit symbol Chipkill code
used today can support only x4 DRAM chips [28]. In order
to use x8 DRAM, one data access will have to be split into
two, which will have a signiﬁcant impact on performance.
Entire chip failures are very rare and, therefore, Chipkill
is considered an overkill in most systems today [28].
D. Comparison with Past Works
Several past works have proposed stronger memory re-
liability but most of them either do not improve on-die
ECC or incur overheads and require changes to the standard
protocol. Table III compares the COMET schemes with
some of the related works. XED [28] proposes using error
detection within each DRAM die and then exposing the
detection result to the in-controller code for correction. But
they assume that on-die codes implemented in today’s DRAM
have guaranteed double-error detection capability while in
most known cases [4], the on-die code only guarantees single-
error correction. Using the same code for multi-bit error
detection will not be effective as the code would miscorrect.
Besides, it does not support silent SBE correction within
DRAMs which is desired by DRAM vendors. Similarly,
DUO [15] also gets rid of on-die SBE correction and uses
those additional bits for stronger in-controller protection.
Thus, DRAM vendors cannot use DUO to improve yield.
Besides, it requires non-negligible changes to the existing
memory protocols. A recent work [32] highlights the aliasing
problem in SEC codes and provides a construction technique
that would result in minimal aliasing. However, their code
would still result in SDCs (average ∼5 percentage points
reduction in SDC probability when compared against 20
random SEC codes) when paired with in-controller SECDED
unlike COMET that completely gets rid of SDCs by carefully
steering the miscorrected bit. PAIR [21] uses on-die SECDED
that requires N on-die ECC decoding cycles for xN DRAM.
It ensures that each DQ bit comes from a separate codeword.
This incurs a signiﬁcant latency overhead and is not feasible
for larger data width (x16/x32). Besides, it requires an
additional signal to transfer the multi-bit error detection infor-
mation. Other proposed reliability techniques like Bamboo-
ECC [24] uses large ECC symbols and codewords to provide
stronger protection while incurring performance overhead.
ArchShield [29] provides protection against single-bit scaling
induced errors but requires storing of fault maps within the
DRAMs that would need to be updated in-ﬁeld that requires
running full array testing using a Built-In Self Test (BIST)
engine. CiDRA [36] proposes using on-die ECC to provide
protection against multi-bit failures. However, it requires
large SRAM overheads that makes its usage prohibitive.
E. Accommodating Wider Data Widths
As mentioned previously in Sections IV-A and V-A,
with 8-bits of parity for 128-bits of dataword, SEC-COMET
(SEC-COMET-DBC) construction works upto per-chip beat
width of 64 (16) bits. For wider interfaces, COMET cannot
avoid SDCs or correct DBEs. To enable COMET, the 64-bit
SECDED dataword has to be formed using multiple 128-bit
SEC datawords. Therefore, within the DRAM chip, every
16-bits of the 64-bit data transferred needs to be a part of
a different 128-bit SEC dataword. Thus, a single write or
read command would require multiple rounds of on-die
SEC encoding and decoding. Typically, during a read/write
operation, an entire DRAM row gets activated into the
row buffer. The size of a DRAM row is usually few kBs
and therefore, contains multiple SEC datawords. Hence, to
enable COMET for wider per chip beat widths, the multiple
on-chip encoding and decoding can be done in parallel and
would not require multiple activations of DRAM rows.
VIII. CONCLUSION
Aggressive technology scaling in modern DRAMs is
leading to a rapid increase in single-cell DRAM error rates.
As a result, DRAM manufacturers have started adopting on-
die ECC mechanism in order to achieve reasonable yields.
The commonly used on-die SEC ECC scheme interacts with
in memory controller SECDED ECC, to unfortunately cause
silent data corruption in >25% of double-bit-error cases. To
prevent silent data corruption from happening, we introduce
COllaborative Memory ECC Technique (COMET), a mech-
anism to efﬁciently design the on-die SEC ECC or the in-
controller SECDED ECC that steers the miscorrection to guar-
antee that no silent data corruption happens when a DBE oc-
curs inside the DRAM. Further, we develop the SEC-COMET-
DBC on-die ECC code and a collaborative correction mech-
anism between the on-die and in-controller ECC decoders
that allow us to correct the majority of the DBEs within the
DRAM array without adding any additional redundancy bits
to either of the two codes. Overall, COMET can eliminate all
double-bit error induced SDCs and correct 99.9997% of all
DBEs with negligible area, power and performance impact.
ACKNOWLEDGMENT
The authors thank the DSN’22 program committee and
the anonymous reviewers for their detailed and constructive
feedback. The authors thank Professor Onur Mutlu for being
the shepherd of the paper and taking out time to review and
provide valuable feedback.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
134
REFERENCES
[1] “SPEC releases major new CPU benchmark suite.” [Online].
Available: https://www.spec.org/cpu2017/press/release.html
[2] “Zen+ - Microarchitectures
- AMD.”
[Online]. Available:
https://en.wikichip.org/wiki/amd/microarchitectures/zen%2B
[3] “Zen 3 - Microarchitectures
- AMD.”
[Online]. Available:
https://en.wikichip.org/wiki/amd/microarchitectures/zen 3
[4] “ECC Brings Reliability and Power Efﬁciency to Mobile Devices,”
Micron technology, Inc., Tech. Rep., 2017.
[5] S. Beamer, K. Asanovic, and D. A. Patterson, “The GAP benchmark
[Online]. Available:
suite,” CoRR, vol. abs/1508.03619, 2015.
http://arxiv.org/abs/1508.03619
[6] C. Bienia, “Benchmarking modern multiprocessors,” Ph.D. dissertation,
Princeton University, January 2011.
[7] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu,
J. Hestness, D. R. Hower, T. Krishna, S. Sardashti, R. Sen, K. Sewell,
M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, “The gem5
simulator,” SIGARCH Comput. Archit. News, vol. 39, no. 2, p. 1–7, Aug.
2011. [Online]. Available: https://doi.org/10.1145/2024716.2024718
[8] S. Cha, O. Seongil, H. Shin, S. Hwang, K. Park, S. J. Jang, J. S.
Choi, G. Y. Jin, Y. H. Son, H. Cho, J. H. Ahn, and N. S. Kim,
“Defect analysis and cost-effective resilience architecture for future
dram devices,” in 2017 IEEE International Symposium on High
Performance Computer Architecture (HPCA), 2017, pp. 61–72.
[9] K. K. Chang, D. Lee, Z. Chishti, A. R. Alameldeen, C. Wilkerson,
Y. Kim, and O. Mutlu, “Improving dram performance by parallelizing
refreshes with accesses,” in 2014 IEEE 20th International Symposium
on High Performance Computer Architecture (HPCA), 2014, pp.
356–367.
[10] K. K. Chang, A. Kashyap, H. Hassan, S. Ghose, K. Hsieh, D. Lee,
T. Li, G. Pekhimenko, S. Khan, and O. Mutlu, “Understanding
latency variation in modern dram chips: Experimental characterization,
analysis, and optimization,” in Proceedings of
the 2016 ACM
SIGMETRICS International Conference on Measurement and
Modeling of Computer Science, ser. SIGMETRICS ’16. New York,
NY, USA: Association for Computing Machinery, 2016, p. 323–336.
[Online]. Available: https://doi.org/10.1145/2896377.2901453
[11] J. Chung, I. Lee, M. Sullivan, J. H. Ryoo, D. W. Kim, D. H. Yoon,
L. Kaplan, and M. Erez, “Containment domains: A scalable, efﬁcient,
and ﬂexible resilience scheme for exascale systems,” in SC ’12:
Proceedings of the International Conference on High Performance
Computing, Networking, Storage and Analysis, 2012, pp. 1–11.
[12] I. Corporation, “8th and 9th Generation Intel Core Processor
Families and Intel Xeon E Processor Families.” [Online]. Available:
https://www.intel.com/content/dam/www/public/us/en/documents/
datasheets/8th-gen-core-family-datasheet-vol-1.pdf
[13] S. Electronics, “Mobile DRAM Stack Speciﬁcation.”
[14] S.-L. Gong, J. Kim, and M. Erez, “Dram scaling error evaluation
model using various retention time,” in 2017 47th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks
Workshops (DSN-W), 2017, pp. 177–183.
[15] S.-L. Gong, J. Kim, S. Lym, M. Sullivan, H. David, and M. Erez, “Duo:
Exposing on-chip redundancy to rank-level ecc for high reliability,” in
2018 IEEE International Symposium on High Performance Computer
Architecture (HPCA), 2018, pp. 683–695.
[16] R. W. Hamming, “Error detecting and error correcting codes,” The
Bell System Technical Journal, vol. 29, no. 2, pp. 147–160, 1950.
[17] M. Horiguchi and K. Itoh, Nanoscale Memory Repair. New York:
Springer SBM, 2011.
[18] M. Y. Hsiao, “A Class of Optimal Minimum Odd-Weight-Column
SEC-DED Codes,” IBM Journal of Research and Development,
vol. 14, no. 4, pp. 395–401, 1970.
[19] JEDEC, “DDR4 SDRAM Specication,” 2012.
[20] JEDEC, “Low Power Double Data Rate 4 (LPDDR4) SDRAM
Specication,” 2014.
[21] S. Jeong, S. Kang, and J.-S. Yang, “Pair: Pin-aligned in-dram ecc
architecture using expandability of reed-solomon code,” in 2020 57th
ACM/IEEE Design Automation Conference (DAC), 2020, pp. 1–6.
[22] M. Jung, C. Weis, N. Wehn, M. Sadri, and L. Benini, “Optimized
active and power-down mode refresh control in 3d-drams,” in 2014
22nd International Conference on Very Large Scale Integration
(VLSI-SoC), 2014, pp. 1–6.
[23] U. Kang, H. soo Yu, C. Park, H. Zheng, J. Halbert, K. Bains, S.-J.
Jang, and J. Choi, “Co-architecting controllers and dram to enhance
dram process scaling,” in The Memory Forum, 2014.
[24] J. Kim, M. Sullivan, and M. Erez, “Bamboo ecc: Strong, safe, and
ﬂexible codes for reliable computer memory,” in 2015 IEEE 21st
International Symposium on High Performance Computer Architecture
(HPCA), 2015, pp. 101–112.
[25] Y. Kim, V. Seshadri, D. Lee, J. Liu, and O. Mutlu, “A case for
exploiting subarray-level parallelism (salp) in dram,” in 2012 39th
Annual International Symposium on Computer Architecture (ISCA),
2012, pp. 368–379.
Implications for
[26] J. Liu, B. Jaiyen, Y. Kim, C. Wilkerson, and O. Mutlu, “An
experimental study of data retention behavior in modern dram
devices:
retention time proﬁling mechanisms,”
in Proceedings of the 40th Annual International Symposium on
Computer Architecture, ser. ISCA ’13. New York, NY, USA:
Association for Computing Machinery, 2013, p. 60–71. [Online].
Available: https://doi.org/10.1145/2485922.2485928
[27] I. Micron Technology, “8Gb: x4, x8, x16 DDR4 SDRAM.”
[28] P. J. Nair, V. Sridharan, and M. K. Qureshi, “Xed: Exposing on-die
error detection information for strong memory reliability,” in 2016
ACM/IEEE 43rd Annual International Symposium on Computer
Architecture (ISCA), 2016, pp. 341–353.
[29] P. J. Nair, D.-H. Kim, and M. K. Qureshi, “Archshield: Architectural
framework for assisting dram scaling by tolerating high error rates,”
in Proceedings of the 40th Annual International Symposium on
Computer Architecture, ser. ISCA ’13. New York, NY, USA:
Association for Computing Machinery, 2013, p. 72–83. [Online].
Available: https://doi.org/10.1145/2485922.2485929
[30] Q.
Nguyen,
ISA
Simulator, Tests) – git commit 816a252.” [Online]. Available:
https://github.com/riscv/riscv-tools
Toolchain,
“RISC-V
(GNU
Tools
[31] T.-Y. Oh, H. Chung, Y.-C. Cho, J.-W. Ryu, K. Lee, C. Lee, J.-I. Lee,
H.-J. Kim, M. S. Jang, G.-H. Han, K. Kim, D. Moon, S. Bae, J.-Y. Park,
K.-S. Ha, J. Lee, S.-Y. Doo, J.-B. Shin, C.-H. Shin, K. Oh, D. Hwang,
T. Jang, C. Park, K. Park, J.-B. Lee, and J. S. Choi, “25.1 a 3.2gb/s/pin
8gb 1.0v lpddr4 sdram with integrated ecc engine for sub-1v dram core
operation,” in 2014 IEEE International Solid-State Circuits Conference
Digest of Technical Papers (ISSCC), 2014, pp. 430–431.
[32] S.-I. Pae, V. Kozhikkottu, D. Somasekar, W. Wu, S. G.
Ramasubramanian, M. Dadual, H. Cho, and K.-W. Kwon, “Minimal
aliasing single-error-correction codes for dram reliability improvement,”
IEEE Access, vol. 9, pp. 29 862–29 869, 2021.
[33] M. Patel, J. S. Kim, H. Hassan, and O. Mutlu, “Understanding and mod-
eling on-die error correction in modern dram: An experimental study
using real devices,” in 2019 49th Annual IEEE/IFIP International Con-
ference on Dependable Systems and Networks (DSN), 2019, pp. 13–25.
[34] M. Patel, J. S. Kim, T. Shahroodi, H. Hassan, and O. Mutlu, “Bit-exact
ecc recovery (beer): Determining dram on-die ecc functions by
exploiting dram data retention characteristics,” in 2020 53rd Annual
IEEE/ACM International Symposium on Microarchitecture (MICRO),
2020, pp. 282–297.
[35] Sanghyuk Kwon, Young Hoon Son, and Jung Ho Ahn, “Understanding
ddr4 in pursuit of in-dram ecc,” in 2014 International SoC Design
Conference (ISOCC), 2014, pp. 276–277.
[36] Y. H. Son, S. Lee, O. Seongil, S. Kwon, N. S. Kim, and J. H.
Ahn, “Cidra: A cache-inspired dram resilience architecture,” in 2015
IEEE 21st International Symposium on High Performance Computer
Architecture (HPCA), 2015, pp. 502–513.
[37] V. Sridharan and D. Liberty, “A study of dram failures in the ﬁeld,” in
SC ’12: Proceedings of the International Conference on High Perfor-
mance Computing, Networking, Storage and Analysis, 2012, pp. 1–11.
[38] D. Tiwari, S. Gupta, and S. S. Vazhkudai, “Lazy Checkpointing:
Exploiting Temporal Locality in Failures to Mitigate Checkpointing
Overheads on Extreme-Scale Systems,” in Proceedings of
the
IEEE/IFIP International Conference on Dependable Systems and
Networks (DSN), 2014.
[39] A. N. Udipi, N. Muralimanohar, N. Chatterjee, R. Balasubramonian,
A. Davis, and N. P. Jouppi, “Rethinking dram design and organization
for energy-constrained multi-cores,” in Proceedings of the 37th Annual
International Symposium on Computer Architecture, ser. ISCA ’10.
New York, NY, USA: Association for Computing Machinery, 2010, p.
175–186. [Online]. Available: https://doi.org/10.1145/1815961.1815983
[40] S. Wang, H. Hu, H. Zheng, and P. Gupta, “Memres: A fast memory
system reliability simulator,” IEEE Transactions on Reliability, vol. 65,
no. 4, pp. 1783–1797, 2016.
[41] A. Waterman, “RISC-V Proxy Kernel – git commit 85ae17a.”
[Online]. Available: https://github.com/riscv/riscv-pk/commit/85ae17a
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
135
[42] A. Waterman and Y. Lee, “Spike, a RISC-V ISA Simulator – git commit
3bfc00e.” [Online]. Available: https://github.com/riscv/riscv-isa-sim
[43] A. Waterman, Y. Lee, D. Patterson, and K. Asanovic, “The RISC-V
Instruction Set Manual Volume I: User-Level ISA Version 2.0,” 2014.
[Online]. Available: https://riscv.org
[44] A. Yazdanbakhsh, D. Mahajan, H. Esmaeilzadeh, and P. Lotﬁ-Kamran,
“AxBench: A Multiplatform Benchmark Suite for Approximate
Computing,” IEEE Design & Test, vol. 34, no. 2, pp. 60–68, 2017.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:36 UTC from IEEE Xplore.  Restrictions apply. 
136