# WASM的安全性问题--Part 2
原文地址:
Translated by : Processor  
Special thanks for : Swing , Anciety
## 4\. 一些新的利用方式
虽然在WebAssembly中无法实现与本地环境相关的许多利用技术和可能性，但是在网页中运行的本地代码中出现了新技术和可能性。一个特别有趣的新利用是通过Emscripten
API向开发人员提供对DOM的引用。在某些情况下，不安全的C/C++代码可以让攻击者能够为DOM注入精心设计的输入。在安全领域，这称为跨站点脚本攻击(XXS)。
### 4.1 Buffer Over ow -> XXS
WebAssembly中的数据存储在线性内存中。Emscripten为WebAssembly提供线性内存的方法与GCC等编译器利用虚拟内存的方式大致相同。局部变量和全局变量存储在线性寄存器中的索引处。但是，与GCC不同的是，GCC不受解释环境的影响，因此Emscripten不会在此内存中存储返回地址，保存的基本指针或Canary。仅存储本地和全局变量等数据。从安全角度来看，这可以被视为一把双刃剑。一方面，溢出不会影响实际的指令地址。另一方面，存储在线性寄存器中的任何变量都有可能被覆盖，包括本地和全局变量。以下示例显示了这一点。
    extern void bof(char *p1, char *p2)
    { 
        char bof1[16];
        char bof2[16]; 
        strcpy(bof1,p1); 
        strcpy(bof2,p2); 
        EM_ASM({
            document.getElementById("XXS").innerHTML =(Pointer_stringify($0,$1)); 
            }, bof1,strlen(bof1));
    }
在这个场景中，假设p1是一个硬编码的静态字符串，由JavaScript定义，p2是从GET或POST请求输入的。因为p1是静态的，所以开发人员不需要执行任何清理或编码，只需将该变量映射到DOM即可。但是，因为bof2容易受到缓冲区的影响并且与bo1连续存储，所以假定为静态的字符串可以被覆盖，用户输入将被写入DOM。这可能允许跨站点脚本攻击。
### 4.2 Indirect function calls -> XSS
作为SDK，Emscripten提供了一个C/C++
API，其中提供了JavaScript互操作性。emscripten.h中提供了这些有用的函数定义和宏的集合。Emscripten文档重点介绍了函数emscripten_run_script()以及用于从C或C++中调用JavaScript的宏EM_JS()和EM_ASM()。由于跨站点脚本消除了在受影响的JavaScript中运行的任何WebAssembly程序的安全性，因此保护这些函数和宏不被滥用等同于在传统环境下保护本机软件免于任意代码执行。可以首先检查emscripten_run_script()函数。
    extern void emscripten_run_script(const char *script);
Emscripten
C代码不包含此函数的实现，extern关键字表示它可能是从JavaScript导入的。检查Emscripten生成的JavaScript“glue
code”确实验证了这种情况:
    # emscripten_run_script()的JavaScript实现和C / C ++的导入
    function _emscripten_run_script(ptr) 
    { 
        eval(Pointer_stringify(ptr));
    } 
    [...]
    Module.asmLibraryArg = 
    { 
        "abort": abort, 
        "assert": assert,
        "enlargeMemory": enlargeMemory, 
        "getTotalMemory": getTotalMemory, 
        "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
        "abortStackOverflow": abortStackOverflow, 
        "nullFunc_ii": nullFunc_ii,   
        "nullFunc_iiii": nullFunc_iiii, 
        "nullFunc_vi": nullFunc_vi, 
        "invoke_ii":invoke_ii, 
        "invoke_iiii": invoke_iiii, 
        "invoke_vi": invoke_vi, 
        "___lock": ___lock, 
        "___setErrNo": ___setErrNo, 
        "___syscall140": ___syscall140,
        "___syscall146": ___syscall146, 
        "___syscall54": ___syscall54,
        "___syscall6": ___syscall6, 
        "___unlock": ___unlock, 
        "_abort": _abort,   
        "_emscripten_memcpy_big": _emscripten_memcpy_big,
        "_emscripten_run_script": _emscripten_run_script,
        "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, 
        "DYNAMICTOP_PTR": DYNAMICTOP_PTR, 
        "tempDoublePtr": tempDoublePtr, 
        "ABORT": ABORT, 
        "STACKTOP": STACKTOP, 
        "STACK_MAX": STACK_MAX 
    };
这是一个简单地获取script字符串并在实例化WebAssembly应用程序的呈现网页中运行它的函数。因此，如果在浏览器中作为WebAssembly模块运行，以下简短的C程序将呈现JavaScript的alert:
    #include 
    int main() 
    {
        emscripten_run_script("alert('Hello, world!');"); 
        return 0;
    }
如果攻击者可以控制传递给emscripten_run_script()的字符串，他们可以进行跨站点脚本攻击。但是，这不是利用此函数的唯一方法。回想一下，攻击者控制的函数指针可用于代码重用攻击。如果攻击者可以覆盖用于访问具有匹配函数名的函数的函数指针，并且还能够控制该函数所涉及的参数，则可以通过调用emscripten_run_script实现跨站点脚本攻击。
此攻击情形类似于覆盖函数指针调用system()以在传统libc环境中实现任意系统命令执行。
以下事例演示了emscripten生成的WebAssembly环境中的攻击：
    #include 
    #include 
    #include 
    #include  
    /* Represents a message and an output channel */
    typedef struct Comms {
        char msg[64];
        uint16_t msg_len;
        void (*out)(const char *);
    } Comms;
    /* Conduct the communication by calling the function pointer with message. */
    void trigger(Comms *comms) {
        comms->out(comms->msg);
    }
    void communicate(const char *msg) {
        printf("%s", msg);
    }
    int main(void) {
        Comms comms;
        comms.out = &communicate;
        printf("&communicate: %p\n", &communicate);
        printf("&emscripten_run_script: %p\n", &emscripten_run_script); // 0x5
        char *payload = "alert('XSS');// " // 16 bytes; "//" lets eval work
                        "                " // + 16
                        "                " // + 16
                        "                " // + 16 to fill .msg = 64
                        "  "               // + 2 for alignment = 66
                        "\x40\x00"         // + 2 bytes to fill .msg_len = 68
                        "\x05\x00\x00\x00";// + 4 bytes to overwrite .out= 72
        memcpy(comms.msg, payload, 72);
        emscripten_run_script("console.log('Porting my program to WASM!');");
        trigger(&comms);
        return 0;
    }
使用emcc -o fn_ptr_xss.html fn_ptr_xss.c编译程序，它将生成les
fn_ptr_xss.html，fn_ptr_xss.js和fn_ptr_xss.wasm。
使用本地Web服务器托管这些文件并访问fn_ptr_xss.html以查看是否调用了JavaScript的alert。
此示例提供了一个通信API，其中64字节消息及其通道在结构中表示。可以使用trigger()API函数触发通信。
如果驱动程序应用程序(在此示例中由main()表示)遇到缓冲区溢出，使得消息Comms.msg溢出到函数指针Comms.out中，则攻击者将能够调用任何可用的匹配函数名并提供任意字符串的函数。
函数main()演示了一个攻击者控制72字节数据(char * payload)通过不安全的memcpy()写入到通信结构中。 Payload由几部分组成:
  * 一个良好的JavaScript alert()调用，表示成功执行
  * 启动JavaScript行注释(//)以指示eval()忽略行中的其余字符，因为eval()否则会拒绝在其余有效Payload中找到的字节，从而无法执行
  * ASCII空格字符贯穿并超过可用于消息的预期64字节空间的末尾，包括两个额外的空格来计算内存中的struct成员对齐
  * 写入.msg_len的0x0040或64的小端表示(不是绝对必要的，但是这个例子想象一个使用消息长度而不是NUL终止字符串的API)
  * 0x00000005的小端表示，攻击者首选函数emscripten_-run_script()的索引，它覆盖.out原始函数指针值
Comms.out函数指针在WebAssembly二进制文件中表示一个指向接收const char
_参数的void函数的指针，并由运行时环境强制执行，在调用时仍然为true。由于接收const char_
参数的void函数值被重写为emscripten_run_script()的索引时，签名匹配条件仍然为真，Runtime
check不检测修改的间接函数调用并允许它继续运行。因此，当调用comms-> out(comms->
msg)时，导致emscripten_run_script(comms->
msg)，最终致使JavaScript通过eval()执行我们的payload而没有产生错误信息。
有几个因素可以削弱此攻击的可利用性。已经讨论了第一个:
攻击者必须控制函数指针值，指向函数必须具有与目标JavaScript互操作函数匹配的签名，并且它们必须使用它们的参数调用解除引用的函数，对函数施加足够的控制。这些条件的影响是现存的，但在WebAssembly程序中不太可能发生。还有另外两个要满足的条件，进一步降低了可能性:
目标JavaScript互操作性函数必须由C/C++代码调用，否则它们将在.wasm二进制文件中进行优化，而.wasm二进制文件必须通过LLVM控件流完整性检测。研究这些条件的限制和可用行，以通过函数指针来提高跨站点脚本攻击的可行性。
### 4.2.1 更多攻击方式
emscripten_run_script()有几个相近函数，他们有不同的功能。
与emscripten_run_script()一样，它们很可能不会被WebAssembly程序导入，除非它们被主动使用或明确配置为被包含在内。这些函数是:
  * int emscripten_run_script_int(const char *script)
  * char _emscripten_run_script_string(const char_ script)
  * void emscripten_async_run_script(const char *script, int millis)
  * void emscripten_async_load_script(const char *script, 
        em_callback_func onload,
                                  em_callback_func onerror)
如前所述，Emscripten提供了几种从C/C++调用JavaScript的方法。调用任意JavaScript的推荐方法是使用“内联JavaScript”和emscripten.h提供的EM_ASM
*系列宏。之前的“hello world”示例可以重写为: