     src io.ReadWriter
     dst io.ReadWriter
    }
在较新的版本中，这是通过使用gostream包来抽象的。
传入连接的对等方在模块的逻辑中不需要相同，但它们都被称为（并在DDB中标记）代理后端。根据我们对IPStorm
Bot的观察，代理模块在启动后不久就会收到连接请求。连接源是作为代理后端的同一节点（Qmeb3X55MaoKhZfYsUHFgkZWAz3ZFtQCQz6qiaEqamo7a2）。我们假设这是由于代理检查机制造成的，并且没有调查代理是否最终接收到真实的流量。
#### Filetransfer
IPStorm以分布式方式托管恶意软件二进制文件，每个Bot“seeding”一个或多个样本。这个功能在filetransfer包中实现。Bot定期检查更新：它从DDB或通过webapi检索最新版本号。如果有一个新版本可用，它将被下载，然后使用新的二进制文件杀死并重新生成bot。这个过程将生成一个新的密钥对。当与本机体系结构和操作系统匹配的示例存储在文件系统中时，其他示例存储在RAM中。根据可用的RAM，许多其他示例被下载并在本地HTTP服务器上提供服务。此服务器在Bot启动时在随机端口上打开，并在DDB中公布。对于每个托管的示例，条目“seeder:”+checksum和“seeder
http:”+checksum被格式化为Bot的对等ID或其外部IP和端口分别是HTTP服务的。在较新的版本中，这被替换为向2WebAPI发布等效数据端点。
下载样本的过程有几个步骤：
  * 检索特定CPU架构和操作系统的最新示例的校验和
  * 为具有该校验和的文件查找种子生成器
  * 通过HTTP或IPFS（protocol/sfst/1.0.0）连接到对等机并下载示例
  * 验证校验和
[statik](https://github.com/rakyll/statik
"statik")模块用于将zip文件存储到内存中，从中可以单独检索文件。档案包含：
第一个脚本，linux/install.sh，在SSH感染中用作主负载的下载器/dropper。这个脚本是由bot-adhoc定制的，添加了一个变量，其中包含了有效负载的最新“seeders”。当Bot更新时，storm_android中的脚本用于重新配置android设备上的持久性。
#### WebAPI
自从0.1.92a版本的IPStorm开始从PubSub模型过渡到更集中的设计。机器人将不再协调使用其他机器人发布的消息。相反，所有信息由一个或多个C2节点聚合，这些节点公开了一个Web
API。
P2P协议采用了LibGo的[HTTP分层连接包](https://github.com/libp2p/go-libp2p-http
"HTTP分层连接包")。IPStorm代码中称为“web API后端”的服务由其对等id寻址，并使用对等发现机制进行发现。
这种转变的原因尚不清楚。一些可能的解释是，开发人员已经意识到当事方可以读取并可能干扰主题并希望获得更多控制权，或者同步不可靠。后者可以解释为什么我们看到多个Bot使用旧的恶意软件版本而被卡住，尽管代码设计为自动更新到最新的可用版本。
除了确保p2p同步由bot-herder控制的节点监督外，消息保持身份验证，并使用与DDB相同的可信密钥集强制授权。
以下API公开了以下终结点：
### 僵尸网络映射
在我们监控僵尸网络的过程中，我们使用了来自多个来源的数据：
  * 公开的“peer info”（ID、公钥、地址和版本信息）
  * 发布主题信息：DDB主题、信息主题
  * 在DHT中查询属于僵尸网络的对等方
在第一种方法中，我们使用IPFS爬虫收集的对等信息数据库。属于僵尸网络的节点很容易通过它们的代理版本来识别，这类似于HTTP协议中的用户代理。
对于使用go-libp2p构建的应用程序，AgentVersion默认设置为主包的名称。IPStorm节点的AgentVersion设置为storm。此属性使我们能够找到不在其他频道（如info主题）上声明自己的节点。
其次，我们使用相同的机制，使IPStorm Bot能够找到对等点：在DHT中查询僵尸网络中不同类别节点（常规节点或具有特殊角色的节点）提供的特定内容id。
有关Bots的id的信息也可以在info主题和DDB主题中找到。我们使用DDB主题中的数据来跟踪由威胁参与者控制的对等方的版本和角色。信息主题中的数据提供了按国家、设备类型和操作系统划分的受害者分布情况。
在估计僵尸网络的规模时，我们面临的问题是，没有明确的方法来区分两个节点id是否代表同一个受感染的设备。可以通过版本ID更新或重新感染。外部IP也不是一个好的标识符，因为它会随着时间而变化，或者因为多个节点可能在NAT之后。
我们根据一周内不同的网络规模，平均数周内看到的僵尸数量大约有9000台设备。绝大多数人的操作系统是Android，约1%使用Linux。
根据他们在信息主题上发布的消息，仍然有许多设备运行IPStorm
0.1*之前的版本，并将Windows作为其操作系统。由于新的活动只关注Unix系统，因此，值得注意的是，自2019年以来，这些Bot一直在这些设备上运行。
虽然指纹不包含有关设备型号的特定信息，但可以从操作系统，内核版本，有时还有主机名和用户名。基于此，我们确定了路由器、NAS设备、UHD接收器和多功能板和微控制器（如Raspberry
Pi），它们可能属于物联网设备。
以下数字是由外部IP确定的受害者的地理分布。他们大多数在亚洲。
僵尸网络总共影响了98个国家，就其扫描互联网的能力而言，它似乎很强大，但是通过对攻击媒介的选择，攻击目标是在某些国家更普遍的设备类别。我们的蜜罐平均每天收到3500次来自这个僵尸网络的攻击，相当于流量的很大一部分。
按国家分类的IPStorm受害者分布情况：
IPStorm受害者的精确位置分布：
### 基础设施
虽然我们没有设法从管理基础设施中获得大量二进制文件，但它们很可能是在同一个项目中开发的，我们可以在Bot二进制文件中找到一些与它们相关的线索。管理节点使用相同的AgentVersion，这是基于主包的路径设置的，这一事实支持了这一假设。
包中有一些附加的包，其中没有代码（除了一些初始化函数）：
    storm/commander/web_app/router
    storm/proxy/checker
    storm/util/storm_runtime
这些包可能与管理受害者的web界面和代理可用性的自动检查器相对应。
据我们所知，从管理基础设施分配给节点的特殊角色是：
  * proxy backend
  * proxy checker
  * reque manager
  * web API backend
  * trusted node
  * development node
观察到以下节点：
  * ID: QmW1ptn27xSAgZqBvJwhaGWmJunjzqAGt1oAj4LdVAm9vM  
Roles: trusted, web API backend  
Addresses: /ip4/212.x.x.100/tcp/444, /ip4/212.x.x.100/tcp/5554,
/ip4/88.x.x.34/tcp/444
  * ID: QmddMf2PfNXu6KVKp63rcLhWpNqQdaQdPZzP649dRXS6et  
Roles: unknown  
Addresses: /ip4/212.x.x.100/tcp/443
  * ID: Qmeb3X55MaoKhZfYsUHFgkZWAz3ZFtQCQz6qiaEqamo7a2  
Roles: trusted, web API backend, reque manager, proxy backend, proxy checker  
Addresses: /ip4/54.x.x.216/tcp/444, /ip4/54.x.x.216/tcp/5554,
/ip4/101.x.x.240/tcp/443, /ip4/101.x.x.222/  
tcp/443, /ip4/111.x.x.85/tcp/443
  * ID: QmViHGaXaG5JzbvH2Xs1Ro19fvoKG1KqpPGMYWLc4ckEAV  
Roles: proxy backend, reque manager  
Addresses: /ip4/54.x.x.216/tcp/443, /ip4/54.x.x.216/tcp/5555
  * ID: QmShLAfGGVDD32Gsx5Q2YbuhdDm1uHAmV8aozV6uRKAZdW  
Roles: trusted  
Addresses: unknown
  * ID: QmNWL3UTHbfCxhKA8Lu9aL2XpPGGYQmN4dihXsaCapiyNx  
Roles: trusted  
Addresses: unknown
  * ID: QmV7UYLoDmUv3XViiN1GqrsC6t8WLPGmCKTMAJ544x2pbA  
Roles: proxy backend  
Addresses: /ip4/45.x.x.194/tcp/443
  * ID: QmdACwNe1JdkD2N45LRbcFthPpEVQVtfBvuHFHQ4cFMcAz  
Roles: development  
Addresses: unknown (External IP: 163.172.x.x)
  * ID: QmNoV8qAgLTEo1nQN8wmusi9U9kmArUjVNsKY4TdYS1wvT  
Roles: development  
Addresses: unknown
随着时间的推移，其中一些节点已经改变了它们的地址和角色。所列信息来源于最近几个月收集的可公开获取的信息。我们只包含外部IP和端口的多地址。对于某些节点，我们的数据只包含中继电路地址，因此它们的地址被列为未知。
有趣的是，一个由7个节点组成的组出现在2020年9月17日，宣布自己是web API CID的提供者：
    QmNeV49LPkgQENkpSmg6q8nB1jypY74jhtWxP9rANUQubd
    QmRG9bwpWumxkNwGbceiMXmikAeNDw48kiTRaJSt8rSmzp
    QmXPUhUy4e2jg6dqjfsTnseC5m5KHgZvqMr6AwVutdcQGL
    QmYmDUkGJJ5K2BQ6JYuJeN2SJB3wfDg2N78th6tMEmHgSF
    QmbNwkGiHrK9XcP6n2vMZh9sZMoicvcrhaTbtXMzoC8rp1
    QmbcbZb8Jq8u44oCqna5h2ZBjSpRT42dNLDDNCyuSfGu3L
    Qmek3KNuJY3eRbSGZ9zm2M8yYLb7bMeA28gMswQXarhbmW
我们无法确定它们的来源和目的。一种理论认为，它们可能属于试图用[Sybil](https://en.wikipedia.org/wiki/Sybil_attack
"Sybil")攻击摧毁僵尸网络：Bot试图到达虚假的Web API节点，而依赖于该模块的功能受到阻碍。
### 结论
我们相信Interplanetary
Storm僵尸网络不仅有能力作为租用基础设施的匿名代理，而且具有高度活跃的开发周期。僵尸网络的主要目的似乎是财务上的，因为代码经过了大量的修改，以创建一个可靠和稳定的代理基础设施。
* * *