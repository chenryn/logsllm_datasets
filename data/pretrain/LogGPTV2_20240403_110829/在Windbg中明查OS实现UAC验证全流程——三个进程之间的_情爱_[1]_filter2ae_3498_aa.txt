# 在Windbg中明查OS实现UAC验证全流程——三个进程之间的"情爱"[1]
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0、引言
讲解UAC提权的文章有很多，其提权方法更是数不胜数，目前不完全统计大概有65种方法，但很少或者说几乎没有文章谈及OS是如何完成UAC验证的，本文基于作者之前的一些小小调试分析，记录下有关的细节，与大家共同学习交流。整个系列涉及到的知识：
0、Windbg调试及相关技巧；
1、OS中的白名单及白名单列表的窥探；
2、OS中的受信目录及受信目录列表的查询；
3、窗口绘制[对,你没看错,提权窗口就涉及到绘制]；
4、程序内嵌的程序的Manifest；
5、服务程序的调试；
## 1、进程之间的父子关系图
首先必须明确下接下来要涉及到的几个进程的关系，大致会涉及到四个进程，但待创建的目标进程对于我们这里分析的内部验证机制不太重要，只需要它的一些静态信息，所以着重分析三个进程之间的关系，但为了不失一般性，还是把他挂到图谱上去。
场景1是这样的，在任务栏右键，启动任务管理器，直至Taskmgr进程起来，期间涉及的进程如下：
explorer.exe——>这个进程只负责调用CreateProcess()发起一个创建进程的请求出去；
AIS———————>负责完成各种校验，校验通过了，它负责创建指定的进程；
有两个问题请读者思考下：
1)通过procexp.exe或者自己code可知，待创建的进程的父进程是explorer，而我这里说是AIS创建的，是不是说错了，如果没说错，原因是什么？  
2)explorer明明是meduim完整性级别，为什么被创建的进程就是High完整性级别了？
场景2是这样的，双击桌面上的应用程序[这个应用程序需要管理员权限才能启动的那种，通常带个盾牌]，直至弹出框框出来，这一些列的操作涉及：
explorer.exe—>这个进程只负责调用CreateProcess()发起一个创建进程的请求出去；  
AIS—————>负责完成各种校验，校验通过了，它负责创建指定的进程；  
consent.exe—>仅仅是画一个界面，谈一个框，跟用户确认是否要提权，然后把结果通知给AIS；
有一个问题请读者思考下：
1)既然consent.exe弹出一个框，让用户确认是否提权，那我们是否可以通过模拟鼠标或键盘操作的方式，来模拟点击进行提权呢？
场景3是这样的，右键桌面上的应用程序，以管理员程序执行，直至弹出框框来，这一系列的操作涉及：
explorer.exe—>这个进程只负责调用CreateProcess()发起一个创建进程的请求出去；  
AIS—————>负责完成各种校验，校验通过了，它负责创建指定的进程；  
consent.exe—>仅仅是画一个界面，谈一个框，跟用户确认是否要提权，然后把结果通知给AIS；
好了，下边给出图谱，如下：
## 2、Manifest与盾牌的恩怨
###  2.1 完整性级别
关于Manifest是何方神圣，请自行百度解决，今天要讨论的是其与”提权“相关的部分，当Windows在桌面上绘图exe的图标时，它怎么知道哪些需要加一个盾牌，哪些不需要加的呢？一种常规的做法便是查看他的Manifest文件，并探查关键字段；当然不常规的做发就是看看它的导入表，是否调用了哪些特权API，诸如此类；下边来看一下这个Manifset文件，以两个exe举例说明，一个是Taskmgr.exe，另一个是一个普通的exe文件；查看exe中Manifest文件的方法有多个，这里列举两种方法：  
方法1 ：mt.exe工具，演示如下：
    mt.exe -inputresource:C:\Users\Administrator\Desktop\Taskmgr.exe
    -out:C:\Users\Administrator\Desktop\Taskmgr.manifest
会在指定的目录下生成一个Taskmgr.manifest文件，打开内容如下：
比较重要的两个已经红框框出，简单解释如下：
1)requestedExecutionLevel表明你的程序需要怎样的权限，通常设置的值如下：
    asInvoker
    requireAdministrator
    highestAvailable
asInvoker：父进程是什么权限级别，那么此应用程序作为子进程运行时就是什么权限级别。  
requireAdministrator：此程序需要以管理员权限运行。在资源管理器中可以看到这样的程序图标的右下角会有一个盾牌图标。  
highestAvailable：此程序将以当前用户能获取的最高权限来运行。
如果你指定为 highestAvailable：
1、当你在管理员账户下运行此程序，就会要求权限提升。资源管理器上会出现盾牌图标，双击启动此程序会弹出 UAC 提示框。  
2、当你在标准账户下运行此程序，此账户的最高权限就是标准账户。受限访问令牌（Limited Access Token）就是当前账户下的最高令牌了，于是
highestAvailable 已经达到了要求。资源管理器上不会出现盾牌图标，双击启动此程序也不会出现 UAC
提示框，此程序将以受限权限执行。显然这里看见的是 highestAvailable，而我当前的账户是管理员账户，如下：
###  2.2 autoElevate
autoElevate字段用以表明该EXE是一个自动提权的程序，所谓的自动提权就是不需要弹出框让用户进行确认的提权操作。这往往出现在OS自带的需要提权的那些EXE中。需要说明的是，并不是有了autoElevate就能自动提权，他只是第一步，告知创建进程的API，待创建的子进程有这个意愿，至于能不能成，另说。
## 3、看看带头大哥explorer的动作——场景1
借助于调试利器——Windbg，来走一遍大哥是如何将创建的动作一步一步派发的。思路是这样的，在进程创建的关键API处下断点，拦截关键点。如下：
这么多，一个一个来bp的话也行，但有快速的“批量”下断的方法，即模糊匹配，如下：
    0:256> bm ntdll!*Create*Process*  1: 00007ffc`f25a6ed0 
    @!"ntdll!RtlCreateUserProcessEx"  2: 00007ffc`f256b3f0 
    @!"ntdll!RtlCreateProcessParametersEx"  3: 00007ffc`f25a6f90 
    @!"ntdll!RtlpCreateUserProcess"  4: 00007ffc`f25bb330 @!"ntdll!NtCreateProcessEx"  5: 
    00007ffc`f25fbb50 @!"ntdll!RtlCreateUserProcess"breakpoint 4 redefined  4: 
    00007ffc`f25bb330 @!"ntdll!ZwCreateProcessEx"  6: 00007ffc`f25f0b60 
    @!"ntdll!RtlCreateProcessReflection"  7: 00007ffc`f25bc1c0 
    @!"ntdll!ZwCreateUserProcess"breakpoint 7 redefined  7: 00007ffc`f25bc1c0 
    @!"ntdll!NtCreateUserProcess"  8: 00007ffc`f2554d10 
    @!"ntdll!RtlpCreateProcessRegistryInfo"  9: 00007ffc`f25f1860 
    @!"ntdll!RtlCreateProcessParameters"  10: 00007ffc`f25bc000 
    @!"ntdll!ZwCreateProcess"breakpoint 10 redefined  10: 00007ffc`f25bc000 
    @!"ntdll!NtCreateProcess"
ok了，下边坐看钓鱼台，愿者上钩吧。任务栏右键启动任务管理器。断点命中，如下：
    Breakpoint 8 hit
    ntdll!RtlpCreateProcessRegistryInfo:
    00007ffc`f2554d10 48895c2408      mov     qword ptr [rsp+8],rbx 
    ss:00000000`036fdbc0=0000000000000001
    0:003> k# Child-SP          RetAddr           Call Site00 00000000`036fdbb8 
    00007ffc`f2554b78 ntdll!RtlpCreateProcessRegistryInfo01 00000000`036fdbc0 
    00007ffc`f2553f89 ntdll!LdrpSetThreadPreferredLangList+0x4c02 00000000`036fdbf0 
    00007ffc`f2552f24 ntdll!LdrpLoadResourceFromAlternativeModule+0xd103 
    00000000`036fdd50 00007ffc`f2552d7e ntdll!LdrpSearchResourceSection_U+0x17004 
    00000000`036fde90 00007ffc`ee970e39 ntdll!LdrFindResource_U+0x5e05 
    00000000`036fdee0 00007ffc`f05725a0 KERNELBASE!FindResourceExW+0x8906 
    00000000`036fdf50 00007ffc`f09f9d35 user32!LoadMenuW+0x2007 
    00000000`036fdf90 00007ffc`cc5c964b shlwapi!SHLoadMenuPopup+0x1508 
    00000000`036fdfc0 00007ffc`cc5a2741 explorerframe!CBandSite::_OnContextMenu+0xcb09 00000000`036fe350 
    00007ff6`340e67d5 explorerframe!CBandSite::OnWinEvent+0x635710a 
    00000000`036fe3b0 00007ff6`340896db Explorer!CTrayBandSite::HandleMessage+0x890b 00000000`036fe420 
    00007ff6`340c9c9e Explorer!BandSite_HandleMessage+0x730c 00000000`036fe460 
    00007ff6`340c689f Explorer!TrayUI::WndProc+0x7de0d 00000000`036fe860 
    00007ff6`340c47a2 Explorer!CTray::v_WndProc+0xccf0e 00000000`036fedb0 
    00007ffc`f0566d41 Explorer!CImpWndProc::s_WndProc+0xf20f 00000000`036fee00 
    00007ffc`f056634e user32!UserCallWinProcCheckWow+0x2c110 00000000`036fef90 
    00007ffc`f0564ec8 user32!SendMessageWorker+0x21e11 00000000`036ff020 
    00007ffc`f05643e8 user32!RealDefWindowProcWorker+0x98812 00000000`036ff120 
    00007ff6`340c68db user32!DefWindowProcW+0x19813 00000000`036ff190 