### .nim File

The `renderTimeline` procedure, shown next, is relatively straightforward despite taking two parameters. Add this procedure to the bottom of `general.nim`, and ensure that you also import `../database` and `user` at the top of the file.

```nim
# general.nim

# Import necessary modules
import "../database"
import user
import xmltree

# Define the renderTimeline procedure
proc renderTimeline*(username: string, messages: seq[Message]): string =
  result = ""
  result.add "<h1>${$!username}'s timeline</h1>"
  result.add "<p>New message</p>"
  result.add renderMessages(messages)
```

The implementation of `renderTimeline` is fairly simple. It first creates an `<h1>` tag that holds the title, then a `<p>` tag that allows the user to tweet a new message. Finally, it calls the `renderMessages` procedure defined in the `user` module.

For completeness, here’s the full `general.nim` code:

```nim
#? stdtmpl(subsChar = '$', metaChar = '#')
import "../database"
import user
import xmltree

# Escape text for HTML
proc `$!`(text: string): string = escape(text)

# Render the main page
proc renderMain*(body: string): string =
  result = ""
  result.add "<html><head><title>Tweeter written in Nim</title></head><body>"
  result.add body
  result.add "</body></html>"

# Render the login page
proc renderLogin*(): string =
  result = ""
  result.add "<h1>Login</h1>"
  result.add "<p>Please type in your username...</p>"

# Render the timeline
proc renderTimeline*(username: string, messages: seq[Message]): string =
  result = ""
  result.add "<h1>${$!username}'s timeline</h1>"
  result.add "<p>New message</p>"
  result.add renderMessages(messages)
```

With that, the view components are complete, and Tweeter is very close to being finished. All that’s left is the component that ties the database and views together.

### 7.5 Developing the Controller

The controller will tie the database module and the two different views together. Compared to the three modules you’ve already implemented, the controller will be much smaller. The bulk of the work is now essentially behind you.

You’ve already created a file, `tweeter.nim`, that implements the controller. Open this file now, so that you can begin editing it.

This file currently contains one route: the `/` route. You’ll need to modify this route so that it responds with the HTML for the login page. To do so, start by importing the different modules that you implemented in the previous section: `database`, `views/user`, and `views/general`. You can use the following code to import these modules:

```nim
import database, views/user, views/general
```

Once you’ve done that, you can modify the `/` route so that it sends the login page to the user’s web browser:

```nim
get "/":
  resp renderMain(renderLogin())
```

Save your newly modified `tweeter.nim` file, and then compile and run it. Open a new web browser tab and navigate to `http://localhost:5000`. You should see a login form, albeit a very plain one. It might look similar to Figure 7.17.

Let’s add some CSS style to this page. If you’re familiar with CSS and are confident in your web design abilities, I encourage you to write some CSS yourself to create a nice design for Tweeter’s login page.

**SHARE YOUR CSS**
If you do end up designing your own Tweeter, please share what you come up with on Twitter with the hashtag #NimInActionTweeter. I’d love to see what you come up with. If you don’t have Twitter, you can also post it on the Nim forums or the Manning forums at http://forum.nim-lang.org and https://forums.manning.com/forums/nim-in-action, respectively.

If you’re more like myself and don’t have any web design abilities whatsoever, you can use the CSS available at the following URL: https://github.com/dom96/nim-in-action-code/blob/master/Chapter7/Tweeter/public/style.css.

The CSS file should be placed in a directory named `public`. Create this directory now, and save your CSS file as `style.css`. When a page is requested, Jester will check the `public` directory for any files that match the page requested. If the requested page exists in the `public` directory, Jester will send that page to the browser.

**STATIC FILE DIRECTORY**
The `public` directory is known as the static file directory. This directory is set to `public` by default, but it can be configured using the `setStaticDir` procedure or in a settings block. For more information on static file configuration in Jester, see the documentation on GitHub: https://github.com/dom96/jester#static-files.

Once you’ve placed the CSS file in the `public` directory, refresh the page. You should see that the login page is now styled. It should look something like the screen in Figure 7.18 (or it may look better if you wrote your own CSS).

Type in a username, and click the Login button. You’ll see an error message reading “404 Not Found.” Take a look at your terminal and see what Jester displayed there. You should see something similar to Figure 7.19.

Note the last line, which reads as follows:
```
DEBUG post /login
DEBUG
404 Not Found {Content-type: text/html;charset=utf-8, Content-Length: 178}
```
This specifies that an HTTP POST request was made to the `/login` page. A route for the `/login` page hasn’t yet been created, so Jester responds with a “404 Not Found” error.

### 7.5.1 Implementing the `/login` Route

Let’s implement the `/login` route now. Its implementation is short.

```nim
post "/login":
  setCookie("username", @"username", getTime().getGMTime() + 2.hours)
  redirect("/")
```

Add the code in Listing 7.26 to `tweeter.nim`, and make sure it’s indented just like the other route. You’ll also need to import the `times` module. The preceding code may seem a bit magical, so let me explain it in more detail.

The code does two simple things: it sets a cookie and then redirects the user to the front page of Tweeter.

A cookie is a piece of data stored in a user’s browser. It’s composed of a key, a value, and an expiration date. The cookie created in this route stores the username that was typed in by the user just before the Login button was clicked. This username was sent together with the HTTP request when the Login button was clicked. It’s referred to by `"username"` because that’s the name of the `<input>` tag that was created in the `renderLogin` procedure. The value of `"username"` is accessed in Jester using the `@` operator.

The expiration date of the cookie is calculated using a special `+` operator that adds a `TimeInterval` to a `TimeInfo` object. In this case, it creates a date that’s 2 hours in the future. At the end of the code, the route finishes by redirecting the user to the front page.

Recompile `tweeter.nim`, run it, and test it out. You should now be able to type in a new username, click Login, and see the web browser navigate to the front page automatically. Notice what’s happening in your terminal, and particularly the following line:
```
DEBUG post /login
DEBUG
303 See Other {Set-Cookie: username=test; Expires=Wed, 02 Mar 2016 21:57:29 UTC, Content-Length: 0, Location: /}
```
The last line is actually the response that Jester sent, together with the HTTP headers, which include a `Set-Cookie` header. Figure 7.20 shows this in action. The cookie is set, but the user is redirected back to the front page.

### 7.5.2 Extending the `/` Route

The cookie is set, but the user is still shown the front page without actually being logged in. Let’s fix that. The following listing shows a modified version of the `/` route that fixes this problem.

```nim
let db = newDatabase()

routes:
  get "/":
    if request.cookies.hasKey("username"):
      var user: User
      if not db.findUser(request.cookies["username"], user):
        user = User(username: request.cookies["username"], following: @[])
        db.create(user)
      let messages = db.findMessages(user.following & user.username)
      resp renderMain(renderTimeline(user.username, messages))
    else:
      resp renderMain(renderLogin())
```

Modify `tweeter.nim` by replacing the `/` route with the code in Listing 7.27. Then recompile and run Tweeter again. Navigate to `http://localhost:5000`, type `test` into the Login text box, and click Login. You should now be able to see `test`'s timeline, which should look similar to the screenshot in Figure 7.21.

Congratulations, you’ve almost created your very own Twitter clone!

### 7.5.3 Implementing the `/createMessage` Route

Let’s keep going. The next step is to implement the tweeting functionality. Clicking the Tweet button will try to take you to the `/createMessage` route, resulting in another 404 error.

The following listing shows how the `/createMessage` route can be implemented.

```nim
post "/createMessage":
  let message = Message(
    username: @"username",
    time: getTime(),
    msg: @"message"
  )
  db.post(message)
  redirect("/")
```

This route initializes a new `Message` and uses the `post` procedure defined in the `database` module to save the message in the database. It then redirects the browser to the front page.

Add this code to the bottom of your routes. Then recompile, run Tweeter, and navigate to `http://localhost:5000`. After logging in, you should be able to start tweeting. Unfortunately, you’ll quickly notice that the tweets you create aren’t appearing. This is because your username isn’t passed to the `findMessages` procedure in the `/` route.

To fix this problem, change `let messages = db.findMessages(user.following)` to `let messages = db.findMessages(user.following & user.username)`. Recompile and run Tweeter again. You should now be able to see the messages you’ve created. Figure 7.22 shows an example of what that will look like.

### 7.5.4 Implementing the User Route

The username in the message is clickable; it takes you to the user page for that specific username. In this example, clicking the `test` username should take you to `http://localhost:5000/test`, which will result in a 404 error because a route for `/test` hasn’t yet been created.

This route is a bit different, because it should accept any username, not just `test`. Jester features patterns in route paths to support such use cases. The following listing shows how a route that shows any user’s timeline can be implemented.

```nim
get "/@name":
  cond '.' notin @"name"
  var user: User
  if not db.findUser(@"name", user):
    halt "User not found"
  let messages = db.findMessages(@[user.username])
  resp renderMain(renderUser(user) & renderMessages(messages))
```

Add the route in Listing 7.29 into `tweeter.nim`, recompile, run Tweeter again, and navigate to the front page: `http://localhost:5000/`.

You’ll note that the page no longer has any style associated with it. What happened? Unfortunately, the route you’ve just added also matches `/style.css`, and because a user with that name doesn’t exist, a 404 error is returned.

This is easy to fix. Jester provides a procedure called `cond` that takes a Boolean parameter, and if that parameter is false, the route is skipped. Simply add `cond '.' notin @"name"` at the top of the route to skip the route if a period (`.`) is inside the value of the `name` variable. This will skip the route when `/style.css` is accessed, and it will fall back to responding with the static file.

Test this by recompiling `tweeter.nim` and running it again. You should see that the stylesheet has been restored when you navigate to `http://localhost:5000/`. Log in using the `test` username, and click on the username in your message again. You should see something resembling Figure 7.23.

### 7.5.5 Adding the Follow Button

There’s one important feature missing from the user’s timeline page. That’s the Follow button, without which users can’t follow each other. Thankfully, the user view already contains support for it. The route just needs to check the cookies to see if a user is logged in.

This operation to check if a user is logged in is becoming common—the `/` route also performs it. It would make sense to put this code into a procedure so that it’s reusable. Let’s create this procedure now. Add the following `userLogin` procedure above your routes and outside the `routes` block, inside the `tweeter.nim` file.

```nim
proc userLogin(db: Database, request: Request, user: var User): bool =
  if request.cookies.hasKey("username"):
    if not db.findUser(request.cookies["username"], user):
      user = User(username: request.cookies["username"], following: @[])
      db.create(user)
    return true
  else:
    return false
```

The `userLogin` procedure checks the cookies for a `username` key. If one exists, it reads the value and attempts to retrieve the user from the database. If no such user exists, the user will be created. The procedure performs the same actions as the `/` route.

The new implementations of the `/` and `user` routes are fairly easy. The following listing shows the new implementation of the two routes.

```nim
get "/":
  var user: User
  if db.userLogin(request, user):
    let messages = db.findMessages(user.following & user.username)
    resp renderMain(renderTimeline(user.username, messages))
  else:
    resp renderMain(renderLogin())

get "/@name":
  cond '.' notin @"name"
  var user: User
  if not db.findUser(@"name", user):
    halt "User not found"
  let messages = db.findMessages(@[user.username])
  var currentUser: User
  if db.userLogin(request, currentUser):
    resp renderMain(renderUser(user, currentUser) & renderMessages(messages))
  else:
    resp renderMain(renderUser(user) & renderMessages(messages))
```

Now the Follow button should appear when you navigate to a user’s page, but clicking it will again result in a 404 error.

### 7.5.6 Implementing the `/follow` Route

Let’s fix that error by implementing the `/follow` route. All that this route needs to do is call the `follow` procedure defined in the `database` module. The following listing shows how the `/follow` route can be implemented.

```nim
post "/follow":
  var follower: User
  var target: User
  if not db.findUser(@"follower", follower):
    halt "Follower not found"
  if not db.findUser(@"target", target):
    halt "Follow target not found"
  db.follow(follower, target)
  redirect(uri("/" & @"target"))
```

Add the code in Listing 7.32 to `tweeter.nim`, and make sure it’s indented just like the other routes. You’ll also need to import the `uri` module. The preceding code may seem a bit magical, so let me explain it in more detail.

The code does two simple things: it finds the follower and target users, and then calls the `follow` procedure defined in the `database` module to add the target to the follower’s list of followed users. It then redirects the browser to the target user’s page.

Recompile `tweeter.nim`, run it, and test it out. You should now be able to follow other users by clicking the Follow button on their pages.