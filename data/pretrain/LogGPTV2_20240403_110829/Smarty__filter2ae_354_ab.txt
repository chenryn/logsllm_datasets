可以看到这里的
$this->write($_template,$_template->compiler->compileTemplate($_template))
调用，就在下面
调用了 writeFile 函数，跟进，在 SmartyInternalRuntime_WriteFile 类中
这里利用了 fileputcontents 来写文件，可以看到我们的 SMARTYCOMPILEDIR
可以看到我们生成了 php 文件，生成文件的内容在 smarty_internal_runtime_codeframe 类中的 create
决定，我们可以从
$this->write($_template,$_template->compiler->compileTemplate($_template)) 中的
compileTemplate 跟进到
文件中有一部分注释内容，我们可以左右闭合，将我们的 php 代码插入到里面
这里的 php 文件甚至不用我们手动包含，在 process 方法中有一处 loadCompiledTemplate
跟进可以看到
eval(“?>”.file_get_contents($this->filepath)) 相当于一个远程文件包含，这里调用了 include
，我们之前写入缓存的php文件也就被包含进而执行了
而在高版本中，这里新增了一个 str_replace，将多行注释的符号用一个空格分隔开了
**CVE-2021-29454**
这个 CVE 在刚刚结束不久的 红明谷2022 中刚露完脸，是由于 math 标签中的 eval 导致的任意代码执行。
我们可以通过 PHP 中的一系列绕过操作实现命令执行的目的，能够达到目的的代码样式很多。
比如我们可以通过取字符的方式来进行构造，这里利用到了 再次赋值 的手法来进行构造（这里是看的 Rayi 师傅的
payload，正常情况下的取值构造还是比较麻烦的，字母的限制比较大。
利用未限制的数学函数能构造出来个 exec，不过 exec 没有回显，命令啥的也要继续使用几个数学函数构造，比较麻烦。
`"(\'exp\'[0].\'exp\'[1].\'exp\'[0].\'cos\'[0])"`
或者比较容易理解的这种
这里涉及到了 PHP 对进制的识别的机制，比如 \120这种格式就会被默认的识别为八进制，我们这里就是利用了数字和 \
都存在的情况下对八进制的解析构造了任意的字符串
而 \x70 就会被默认识别为十六进制
根据下面对正则的分析我想到，甚至我们直接使用无数字字母 RCE 也可以绕过
**具体分析**
在 Smarty 中与 math 标签相关的部分位于 plugins 目录下的 function.math.php
在其中用类似白名单的方式将数学函数写进了数组，只允许这些方法通过，同时还严格过滤了 $，以及反引号
结合正则过滤了我们在 equation 中的输入
包括十六进制的格式，后面的 [a-zA-Z _\x7f-\xff][a-zA-Z0-9_ \x7f-\xff]* 表示的是PHP
中的变量，根据变量的命名规则，一个有效的变量名由字母或者下划线开头，后面跟上任意数量的字母，数字，或者下划线。按照正常的正则表达式它被写成上面这个样子。
然后就会被送进 eval 了
不过显然我们是可以进行绕过的，比如上面写的几种
例题：[红明谷 2022] Smarty calculator
## 沙箱逃逸
###  基础沙箱逃逸
沙箱，或者叫沙盒，在英语中为
sandbox，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。
沙箱逃逸，就是在一个代码执行环境下，脱离种种过滤和限制，最终成功拿到shell权限的过程。
在一个 Smarty 模板中，我们可以用 enableSecurity 来开启安全模式，也就相当于开启了沙箱
`enableSecurity();  
$smarty->display($_GET['poc']);`
通过设置 Smarty_Security 实例的一系列的参数我们可以获得更加严格的沙箱，官方文档中的实例如下
`php_functions = null;  
// remove PHP tags  
$my_security_policy->php_handling = Smarty::PHP_REMOVE;  
// allow everthing as modifier  
$my_security_policy->$modifiers = array();  
// enable security  
$smarty->enableSecurity($my_security_policy);  
?>`
或者更严格的例子：
`php_functions = null;  
$my_security_policy->php_handling = Smarty::PHP_REMOVE;  
$my_security_policy->php_modifiers = null;  
$my_security_policy->static_classes = null;  
$my_security_policy->allow_super_globals = false;  
$my_security_policy->allow_constants = false;  
$my_security_policy->allow_php_tag = false;  
$my_security_policy->streams = null;  
$my_security_policy->php_modifiers = null;  
$smarty->enableSecurity($my_security_policy);  
$smarty->display($_GET['poc']);`
最后我们的参数被传入
display，而从上面的内容可以想到，这里我们是可以进行模板注入的，而如果我们的注入的内容能够帮助我们很好地绕过这里的安全沙箱，也就是沙箱逃逸了。
**CVE-2021-26120**
CVE-2021-26120 为 SmartyInternalRuntime_TplFunction 沙箱逃逸漏洞，所利用 POC 如下：
`string:{function+name='rce(){};system("id");function+'}{/function}`
我们可以先利用 简单的 function 标签来进行一下测试
{functionname=’test’}{/function} ，可以看到生成的缓存文件如下
我们只要将前后闭合，将我们要执行的代码插入到闭合两端的中间就可以借助缓存文件执行。
**CVE-2021-26119**
CVE-2021-26119 为 Smarty template_object 沙箱逃逸 PHP 代码注入漏洞，所利用 POC 如下：
`string:{$s=$smarty.template_object->smarty}{$fp=$smarty.template_object->compiled->filepath}{Smarty_Internal_Runtime_WriteFile::writeFile($fp,"smarty 和 $smarty.template_object->compiled->filepath
两处调用。
具体的分析可以参照这篇文章（[https://www.anquanke.com/post/id/235505#h3-4）](https://www.anquanke.com/post/id/235505#h3-4%EF%BC%89)
我认为依照这种思路是可以去寻找更多的静态方法和参数来实现更多操作的。
## 总结
关于 PHP 语言的模板引擎我们可以对其 PHP 源码进行更加深入的审计，就和挖掘 CMS
中的漏洞一样重点关注包含可控变量的函数，再结合对模板本身的功能的跟踪与动调，我们就可以实现 SSTI 漏洞的挖掘了。
Smarty 引擎的模板注入到这里我们就基本上总结完毕了，在 Smarty
本身所提供的安全模式下我们存在可以进行沙箱逃逸的方式，在未开启安全模式的情况下我们甚至可以借助一些基本的标签实现命令执行。
这也就要求我们要尽早更新 Smarty 版本，对安全模式的功能进行更严格的设置等，以避免模板注入的危害。
###  参考链接
HackTricks