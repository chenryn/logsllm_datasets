signing query. Note that the (l + 2)-th equation is
meaningless when c = 0 since then ω(cid:48) = ω. How-
ever, even if c (cid:54)= 0 the information that A can infer
about (av1 , . . . , av(cid:96) , aw, bv1 , . . . , bv(cid:96) , bw) ∈ Z2(cid:96)+2
during
the game amounts to the ﬁrst (cid:96) + 2 equations of the sys-
tem which is of full rank. It means that this vector is
unpredictable since all the solutions of this linear system
live in a sub-space of dimension at least one (actually
(cid:96) = (2(cid:96) + 2) − ((cid:96) + 2)). Finally, as long as s1 (cid:54)= 0, the
right value s0 can only be guessed with probability 1/p
since the last row of the matrix is independent of the
others as soon as (m1, . . . , m(cid:96)) (cid:54)= (m(cid:63)
To conclude the proof, since B is able the tell apart the
type of the forgery, if A’s probability to output a forgery
of some Type in Game k− 1 (i.e. c = 0) was signiﬁcantly
diﬀerent than in Game k (i.e. c (cid:54)= 0) then B would be
able to solve the DDH problem with non-negligible.
(cid:96) ) (cid:54)= 0.
1, . . . , m(cid:63)
Lemma 5. In Game 2.Q, a PPT adversary out-
putting a type A(cid:48) forgery would contradict the DDH as-
sumption in G: Pr[S2.Q ∧ E2.Q] ≤ AdvDDHG
(λ) .
Proof. We will build an algorithm B for solving the
Computational Diﬃe Hellman problem (CDH) which is
at least as hard as the DDH problem. The reduction
B takes as input a tuple (g, h, Ω = hω) and computes
R←
gω. To generate pk, B picks ˆg R← ˆG, av1 , . . . , av(cid:96) , aw
Zp and computes v1 = gav1 ,
. . . , v(cid:96) = gav(cid:96) , and
w = gaw . Then B generates tk = {χi}2(cid:96)+4
i=1 , crs =
({zj}(cid:96)+2
i=1 ) as in step 3-4 of the key generation
algorithm, then sends the public key pk =(cid:0)g, h, ˆg, v, Ω =
hω, crs(cid:1) to A.
j=1, ˆgz,{ˆgi}2(cid:96)+4
B also retains tk = {χi}2(cid:96)+4
to handle signing queries.
We recall that during the game, signing queries are an-
swered by returning a Type B signature so that, us-
ing tk, B can answer all queries without knowing the
ω = logh(Ω) which is part of the CDH challenge.
The results of Lemma 4 implies that even if A only
obtains Type B signatures, it will necessarily output a
Type A(cid:48) forgery σ(cid:63) = (σ(cid:63)
3 , π(cid:63)) unless the DDH
(cid:63)−aw−(cid:80)(cid:96)
assumption does not hold in G. This event thus allows B
to compute gω = σ(cid:63)
, which contra-
dicts the DDH assumption in G.
i=1 avi m(cid:63)
1 · σ
1 , σ(cid:63)
2 , σ(cid:63)
i=1
2
i
B. DEFINITIONS
FOR
GROUP SIGNATURES
DYNAMIC
In the setting of dynamic groups, the syntax of group
signatures includes an interactive protocol which allows
users to register as new members of the group at any
time. The syntax and the security model are those de-
ﬁned by Kiayias and Yung (KY) [36]. Like the very simi-
lar Bellare-Shi-Zhang model [11], the KY model assumes
an interactive join protocol whereby a prospective user
becomes a group member by interacting with the group
manager. This protocol provides the user with a mem-
bership certiﬁcate and a membership secret.
We denote by N ∈ poly(λ) the maximal number of
group members. A dynamic group signature scheme con-
sists of the following algorithms or protocols.
Setup: given a security parameter λ and a maximal num-
ber of group members N ∈ N, this algorithm is run
by a trusted party to generate a group public key
Y, the group manager’s private key SGM and the
opening authority’s private key SOA. Each key is
given to the appropriate authority while Y is made
public. The algorithm also initializes a public state
St comprising a set data structure Stusers = ∅ and a
string data structure Sttrans = .
Join: is an interactive protocol between the group man-
ager GM and a user Ui where the latter becomes
a group member. The protocol involves two in-
teractive Turing machines Juser and JGM that both
take Y as input.
The execution, denoted as
[Juser(λ,Y), JGM(λ, St,Y,SGM)], ends with user Ui
obtaining a membership secret seci, that no one else
knows, and a membership certiﬁcate certi.
If the
protocol is successful, the group manager updates
the public state St by setting Stusers := Stusers ∪ {i}
as well as Sttrans := Sttrans||(cid:104)i, transcripti(cid:105).
Sign: given a membership certiﬁcate certi, a membership
secret seci, a message M , it outputs a signature σ.
Verify: given a signature σ, a message M and a group
public key Y, this algorithm returns either 0 or 1.
Open: takes as input a message M , a valid signature σ
w.r.t. Y , the opening authority’s private key SOA
and the public state St. It outputs i ∈ Stusers ∪{⊥},
which is the identity of a group member or a symbol
indicating an opening failure.
Each membership certiﬁcate contains a unique tag that
identiﬁes the user.
Correctness for Dynamic Group Signatures. Fol-
lowing the terminology of [36], a public state St is valid
if it can be reached from St = (∅, ) by a Turing machine
having oracle access to JGM. Also, a state St(cid:48) is said to
extend another state St if it is within reach from St.
As
in [36],
seci, means
that
there
exists coin tosses  for JGM and Juser
such that,
for some valid public state St(cid:48),
the execution of
[Juser(λ,Y), JGM(λ, St(cid:48),Y,SGM)]() provides Juser with
(cid:104)i, seci, certi(cid:105).
certi (cid:11)Y
Deﬁnition 4. A dynamic group signature scheme is
correct if the following conditions are all satisﬁed:
1. In a valid state St, |Stusers| = |Sttrans| always holds
and two distinct entries of Sttrans always contain cer-
tiﬁcates with distinct tag.
2. If [Juser(λ,Y), JGM(λ, St,Y,SGM)] is run by two hon-
est parties following the protocol and (cid:104)i, certi, seci(cid:105)
is obtained by Juser, then it holds that certi (cid:11)Y seci.
3. For each (cid:104)i, certi, seci(cid:105) such that certi (cid:11)Y seci,
that
Verify(cid:0)Sign(Y, certi, seci, M ), M,Y(cid:1) = 1.
satisfying condition 2,
it always holds
4. For
(cid:104)i, certi, seci(cid:105)
outcome
the
[Juser(., .), JGM(., St, ., .)]
if σ = Sign(Y, certi, seci, M ),
any
teraction
valid St,
Open(M, σ,SOA,Y, St(cid:48)) = i.
for
of
in-
some
then
The Kiayias-Yung model [36] considers three security
notions: security against mis-identiﬁcation attacks, non
frameability and (full) anonymity. These notions are for-
malized through experiments where the adversary inter-
acts with a stateful interface I that maintains the fol-
lowing variables:
• stateI:
is a data structure representing the state
of the interface as the adversary invokes the ora-
cles available in the attack games. It is initialized
as stateI = (St,Y,SGM,SOA) ← Setup(λ, N ). It in-
cludes the (initially empty) set Stusers of group mem-
bers and a database Sttrans storing the transcripts of
previously executed join protocols.
• n = |Stusers| < N is the current group cardinality.
• Sigs: is a database of signatures created by the sign-
ing oracle. Each entry consists of a triple (i, M, σ)
indicating that message M was signed by user i.
• U a: is the set of users that were introduced by the
adversary in the system in an execution of Join.
• U b:
is the set of honest users that the adversary
introduces, acting as a dishonest group manager.
When mounting attacks, adversaries will be granted
access to the following oracles.
• Qpub, QkeyGM and QkeyOA: when these oracles are in-
voked, the interface looks up stateI and returns the
group public key Y, the GM’s private key SGM and
the opening authority’s private key SOA respectively.
authority (via oracles QkeyGM and QkeyOA, respectively).
He can also introduce honest group members (via Qb-join-
queries), observe the system while these users sign mes-
sages and create dummy users using Qwrite. The adver-
sary eventually aims at framing an honest group member.
Deﬁnition 6. A dynamic group signature scheme is
secure against framing attacks if, for any PPT adver-
sary A involved in the experiment below, it holds that
AdvfraA (λ) = Pr(cid:2) ExpfraA (λ) = 1(cid:3) ∈ negl(λ).
Experiment ExpfraA (λ)
A(Qpub, QkeyGM, QkeyOA, Qb-join, Qsig, Qread, Qwrite);
1. stateI = (St,Y,SGM,SOA) ← Setup(λ, N );
2. (M (cid:63), σ(cid:63)) ←
3. If Verify(σ(cid:63), M (cid:63),Y) = 0, return 0;
4. If i = Open(M (cid:63), σ(cid:63),SOA,Y, St(cid:48)) (cid:54)∈ U b, return 0;
j∈U b s.t. j=i (j, M (cid:63),∗) (cid:54)∈ Sigs(cid:1) return 1;
5. If(cid:0)(cid:86)
6. Return 0;
Full Anonymity. Anonymity is formalized via a game
involving a two-stage adversary. The ﬁrst stage allows
the adversary A to modify stateI via Qwrite-queries and
open arbitrary signatures by probing Qopen. Then, A
chooses a message M (cid:63) as well as two pairs (sec(cid:63)
0, cert(cid:63)
0)
and (sec(cid:63)
1), consisting of a valid membership certiﬁ-
cate and a corresponding membership secret. The chal-
lenger ﬂips a coin d ← {0, 1} and computes a challenge
d), which is given σ(cid:63) to A
signature σ(cid:63) using (sec(cid:63)
who is allowed further oracle queries throughout the sec-
ond stage, but is restricted not to query Qopen for the
challenge message-signature pair (M (cid:63), σ(cid:63)).
d, cert(cid:63)
1, cert(cid:63)
Deﬁnition 7. A dynamic group signature scheme
for any PPT adversary A,
is fully anonymous if,
AdvanonA (λ) := |Pr [ ExpanonA (λ) = 1] − 1/2| ∈ negl(λ).
Experiment ExpanonA (λ)
1. stateI = (St,Y,SGM,SOA) ← Setup(λ);
2. (cid:0)aux, M (cid:63), (sec(cid:63)
1)(cid:1)
0), (sec(cid:63)
0, cert(cid:63)
1, cert(cid:63)
b
0 = cert(cid:63)
(cid:11)Y sec(cid:63)
← A(play; Qpub, QkeyGM, Qopen, Qread, Qwrite);
b ) for b ∈ {0, 1}, return 0;
σ(cid:63) ← Sign(Y, cert(cid:63)
3. If ¬(cert(cid:63)
4. If cert(cid:63)
1, return 0;
5. Picks random d ← {0, 1};
6. d(cid:48) ← A(guess; σ(cid:63), aux, Qpub, QkeyGM,
¬{(M (cid:63),σ(cid:63))}
, Qread, Qwrite);
open
7. If d(cid:48) = d then return 1;
8. Return 0;
d, M (cid:63));
d, sec(cid:63)
Q
• Qa-join: allows the adversary A to introduce users
under his control in the group. On behalf of the
GM, the interface runs JGM in interaction with
the Juser-executing adversary who plays the role
of the prospective user in the join protocol.
If
this protocol successfully ends, the interface incre-
ments n, updates St by inserting the new user n
in both sets Stusers and U a.
It also sets Sttrans :=
Sttrans||(cid:104)n, transcriptn(cid:105).
• Qb-join: allows A, acting as a corrupted group man-
ager, to introduce new honest group members. The
interface triggers an execution of [Juser, JGM] and runs
Juser in interaction with A who runs JGM.
If the
protocol successfully completes, the interface incre-
ments n, adds user n to Stusers and U b and sets
Sttrans := Sttrans||(cid:104)n, transcriptn(cid:105). It stores the mem-
bership certiﬁcate certn and the membership secret
secn in a private part of stateI.
• Qsig: given M , an index i, the interface checks if the
private area of stateI contains a certiﬁcate certi and
a membership secret seci. If no such (certi, seci) ex-
ist or if i (cid:54)∈ U b, the interface returns ⊥. Otherwise,
it outputs a signature σ on behalf of user i and also
updates Sigs := Sigs||(i, M, σ).
• Qopen: when this oracle is invoked on input of a valid
pair (M, σ), the interface runs algorithm Open using
the current state St. When S is a set of pairs of the
form (M, σ), Q¬S
open denotes a restricted oracle that
only applies the opening algorithm to pairs (M, σ)
which are not in the set S.
• Qread and Qwrite: are used by A to read/write the
content of stateI. At each invocation, Qread outputs
the whole stateI but the public/private keys and the
private part of stateI where membership secrets are
stored after Qb-join-queries. By using Qwrite, A can
modify stateI at will as long as it does not remove
or alter elements of Stusers, Sttrans or invalidate the
for example, A is allowed to cre-
public state St:
ate dummy users as long as he/she does not re-use
already existing certiﬁcate tags.
Security Against Mis-identification Attacks. In a
mis-identiﬁcation attack, the adversary is able to corrupt
the opening authority using the QkeyOA oracle. Moreover,
he can also introduce malicious users in the group via
Qa-join-queries. His purpose is to come up with a valid
signature σ(cid:63) that does not open to any adversarially-
controlled user.
Deﬁnition 5. A dynamic group signature scheme is se-
cure against mis-identiﬁcation attacks if, for any PPT
adversary A involved in the experiment hereunder, we
have Advmis-idA
(λ) = Pr(cid:2) Expmis-idA
(λ) = 1(cid:3) ∈ negl(λ).
Experiment Expmis-idA
(λ)
1. stateI = (St,Y,SGM,SOA) ← Setup(λ, N );
2. (M (cid:63), σ(cid:63)) ← A(Qpub, Qa-join, Qrevoke, Qread, QkeyOA);
3. If Verify(σ(cid:63), M (cid:63),Y) = 0, return 0;
4. i = Open(M (cid:63), σ(cid:63),SOA,Y, St(cid:48));
5. If i (cid:54)∈ U a return 1; Otherwise return 0;
Non-Frameability. In framing attacks, the entire sys-
tem is colluding against some honest user. The adversary
can corrupt the group manager as well as the opening