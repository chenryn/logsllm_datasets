load and consequently battery consumption under PA that
was unexpected. We investigated further by proﬁling the
tracer to identify its “expensive” functions, and list the top
ﬁve functions in Table 1. We see that compression (per-
formed by deﬂate slow) consumes only 7.62% of the tracer’s
execution time, and no cryptographic function is even re-
ported in the top results. On the other hand, a bit more
than 65% is spent in ptrace and waitpid. The latter is called
continuously to retrieve events from the kernel. Every time a
traced process enters or exits a system call, it is blocked and
such an event is delivered to the tracer through waitpid. Ad-
ditionally, we use ptrace at least once for every event to re-
trieve additional information (e.g., the system call number).
These two calls cause a large number of context switches
between the tracer, traced processes, and the kernel, and
incur the larger part of the overhead we observe. Similarly,
pread64 is used to copy data from the memory of traced
processes (such as data returned by a system call).
We are conﬁdent that moving event reception and the ini-
tial part of event handling of PA in the kernel, would greatly
improve performance. This is supported by what we see in
Figure 6. Even when tracing a single system call like read,
using ptrace incurs a huge overhead when compared with
3Products that oﬀer data proxying are already available for
devices like BlackBerry smartphones [3].
Instances102030405060708090100CPU utilisation (%) on the smartphone0255075100Dual−Core NotebookQuad−Core DesktopEC2 Extra−Large Instanceread() duration (msec)0.10.20.30.40.50.60.70.8System call tracingNoneKernelUser spacenative execution. On the contrary, tracing the same system
call, including copying the returned data, within the kernel
imposes no observable overhead. Future work on PA will
focus on moving part of the implementation in the kernel.
5. RELATED WORK
The idea of decoupling security from execution has been
explored previously in a diﬀerent context. Malkhi et al. [22]
explored the execution of Java applets on a remote server
as a way to protect end hosts. The code is executed at the
remote server instead of the end host, and the design fo-
cuses on transparently linking the end host browser to the
remotely executing applet. Although similar at the con-
ceptual level, one major diﬀerence is that PA is replicating
rather than moving the actual execution, and the interaction
with the operating environment is more intense and requires
additional engineering.
Ripley [40] is another system that proposes the replication
of an application in a server to automatically preserve its in-
tegrity. Unlike PA, it focuses on distributed web 2.0 appli-
cations, and particularly AJAX based applications. Attacks
are detected by comparing the results of the replica with the
client’s. A discrepancy indicates an attack, so Ripley is in
fact investing on the two executions deviating. Furthermore,
it does not apply to a broad range attacks like PA, and it is
not transparent to the application.
The idea of oﬀ-loading execution from smartphones to the
cloud was ﬁrst proposed in CloneCloud [6]. The main focus
of this work is the acceleration of CPU intensive and low
interaction applications. While the authors recognize its po-
tential use for decoupling security from phones, they do not
investigate the eﬀects of disconnected operation on security
(i.e., the need for secure storage), nor do they investigate
the cost of replication for the phone and the server. Finally,
CloneCloud is not always transparent to applications.
Decoupling security from smartphones was ﬁrst explored
in SmartSiren [4], albeit with a more traditional anti-virus
ﬁle-scanning security model in mind. As such, synchronisa-
tion and replay is less of an issue compared to PA. Oberheide
et al. [30] explore a design that is similar to SmartSiren, fo-
cusing more on the scale and complexity of the cloud back-
end for supporting mobile phone ﬁle scanning, and sketching
out some of the design challenges in terms of synchronisa-
tion. Some of these challenges are common in the design of
PA, and we show that such a design is feasible and useful.
However, both these approaches can only protect against a
limited set of attack vectors.
Other work on smartphone security includes VirusMeter
by Liu et al. [21]. This work also identiﬁes that traditional
defences do not perform as well on smartphones due their
limited resources. They propose using power consumption
levels to identify potentially malicious software operating on
a smartphone. Their solution uses very little resources, but
it may incur false positives. Enck et al. address the issue
of malicious applications downloaded on smartphones with
Kirin [13]. They propose a system that can automatically
analyse applications submitted to application stores (e.g.,
Google’s Marketplace and Apple’s Apple Store) for poten-
tially malicious behaviour. Kirin is orthogonal to our sys-
tem, and could in fact be used in combination.
Our architecture also bears some similarities to BugNet [26]
which consists of a memory-backed FIFO queue eﬀectively
decoupled from the monitored applications, but with data
periodically ﬂushed to the replica rather than to disk. We
store signiﬁcantly less information than BugNet, as the iden-
tical replica contains most of the necessary state.
6. CONCLUSION
In this paper, we have discussed a new model for protect-
ing mobile phones. These devices are increasingly complex,
increasingly vulnerable, and increasingly attractive targets
for attackers because of their broad application domain. The
need for strong protection is apparent, preferably using mul-
tiple and diverse attack detection measures. Our security
model performs attack detection on a remote server in the
cloud where the execution of the software on the phone is
mirrored in a virtual machine. In principle, there is no limit
on the number of attack detection techniques that we can
apply in parallel. Rather than running the security mea-
sures locally, the phone records a minimal execution trace,
and transmits it to the security server, which faithfully re-
plays the original execution.
The evaluation of a user space implementation of our ar-
chitecture Paranoid Android, shows that transmission over-
head can be kept well below 2.5KiBps even during periods
of high activity (browsing, audio playback), and to virtually
nothing during idle periods. Battery life is reduced by about
30%, but we show that it can be signiﬁcantly improved by
implementing the tracer within the kernel. We conclude that
our architecture is suitable for protection of mobile phones.
Moreover, it oﬀers more comprehensive security than possi-
ble with alternative models.
Acknowledgments
This work has been supported by the European Commis-
sion through projects FP7-ICT-216026-WOMBAT and FP7-
ICT-257007 SYSSEC. Also, with the support of the Preven-
tion, Preparedness and Consequence Management of Terror-
ism and other Security-related Risks Programme European
Commission - Directorate-General Home Aﬀairs. This pub-
lication reﬂects the views only of the author, and the Com-
mission cannot be held responsible for any use which may
be made of the information contained therein.
7. REFERENCES
[1] F. Bellard. QEMU, a fast and portable dynamic
translator. In Proc. of USENIX’05, April 2005.
[2] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash
functions for message authentication. In Proc. of
Crypto’96, pages 1–15, August 1996.
[3] BlackBerry, Inc. BlackBerry Enterprise Server.
http://na.blackberry.com/eng/services/
business/server/full/.
[4] J. Cheng, S. H. Wong, H. Yang, and S. Lu.
SmartSiren: virus detection and alert for smartphones.
In Proc. of MobiSys’07, pages 258–271, June 2007.
[5] J. Chow, T. Garﬁnkel, and P. M. Chen. Decoupling
dynamic program analysis from execution in virtual
environments. In Proc. of USENIX’08, pages 1–14,
June 2008.
[6] B.-G. Chun and P. Maniatis. Augmented smartphone
applications through clone cloud execution. In Proc. of
HotOS XII, May 2009.
[7] A. T. W. I. company. Top 500 global sites.
http://www.alexa.com/topsites.
[8] M. Costa, J. Crowcroft, M. Castro, A. Rowstron,
L. Zhou, L. Zhang, and P. Barham. Vigilante:
End-to-end containment of internet worm epidemics.
In Proc. of SOSP’05, October 2005.
[9] P. J. Courtois, F. Heymans, and D. L. Parnas.
Concurrent control with “readers” and “writers”.
Commun. ACM, 14(10):667–668, 1971.
[10] D. E. Denning. A lattice model of secure information
ﬂow. Commun. ACM, 19(5):236–243, 1976.
[11] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai,
and P. M. Chen. Revirt: Enabling intrusion analysis
through virtual-machine logging and replay. In Proc.
of OSDI’02, pages 211–224, December 2002.
[12] G. W. Dunlap, D. G. Lucchetti, M. A. Fetterman, and
P. M. Chen. Execution replay of multiprocessor
virtual machines. In Proc. of VEE ’08, pages 121–130,
March 2008.
[13] W. Enck, M. Ongtang, and P. McDaniel. On
lightweight mobile phone application certiﬁcation. In
Proc. of CCS, pages 235–245, 2009.
[14] F-Secure. ”sexy view” trojan on symbian s60 3rd
edition. http://www.f-secure.com/weblog/
archives/00001609.html, February 2008.
[15] J. Giﬃn, S. Jha, and B. Miller. Eﬃcient
context-sensitive intrusion detection. In Proc of
NDSS’04, February 2004.
[16] Z. Guo, X. Wang, J. Tang, X. Liu, Z. Xu, M. Wu,
M. F. Kaashoek, and Z. Zhang. R2: An
application-level kernel for record and replay. In Proc.
of OSDI, 2008.
[17] L. Hatton. Reexamining the fault density component
size connection. Software, IEEE, 14(2):89–97, 1997.
[18] V. Kiriansky, D. Bruening, and S. P. Amarasinghe.
Secure execution via program shepherding. In Proc. of
the 11th USENIX Security Symposium, pages 191–206,
August 2002.
[19] T. Leblanc and J. Mellor-Crummey. Debugging
parallel programs with instant replay. IEEE
Transactions on Computers, 36(4):471–482, 1987.
[20] G. Legg. The bluejacking, bluesnarﬁng, bluebugging
blues: Bluetooth faces perception of vulnerability.
http://www.wirelessnetdesignline.com/
192200279?printableArticle=true, August 2005.
[21] L. Liu, G. Yan, X. Zhang, and S. Chen. VirusMeter:
Preventing your cellphone from spies. In Proc. of
RAID, pages 244–264, 2009.
[22] D. Malkhi and M. K. Reiter. Secure execution of java
applets using a remote playground. IEEE Trans.
Softw. Eng., 26(12):1197–1209, 2000.
[23] P. Montesinos, M. Hicks, S. T. King, and J. Torrellas.
Capo: a software-hardware interface for practical
deterministic multiprocessor replay. In Proc. of
ASPLOS ’09, pages 73–84, March 2009.
[24] H. Moore. Cracking the iPhone (part 1).
http://blog.metasploit.com/2007/10/
cracking-iphone-part-1.html, October 2007.
[25] R. Naraine. Google Android vulnerable to drive-by
browser exploit.
http: // blogs. zdnet. com/ security/ ?p= 2067 ,
October 2008.
[26] S. Narayanasamy, G. Pokam, and B. Calder. BugNet:
Continuously recording program execution for
deterministic replay debugging. SIGARCH Comput.
Archit. News, 33(2):284–295, 2005.
[27] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature
generation of exploits on commodity software. In Proc.
of NDSS’05, February 2005.
[28] Niacin and Dre. The iPhone/iTouch tif exploit is now
oﬃcially released. Available at
http://toc2rta.com/?q=node/23, October 2007.
[29] J. Oberheide, E. Cooke, and F. Jahanian. CloudAV:
N-version antivirus in the network cloud. In Proc. of
the 17th USENIX Security Symposium, San Jose, CA,
July 2008.
[30] J. Oberheide, K. Veeraraghavan, E. Cooke, J. Flinn,
and F. Jahanian. Virtualized in-cloud security services
for mobile devices. In Proc. of MobiVirt ’08, pages
31–35, June 2008.
[31] oCERT. CVE-2009-0475: OpenCORE insuﬃcient
boundary checking during MP3 decoding. http:
//www.ocert.org/advisories/ocert-2009-002.html,
January 2009.
[32] A. Ozment and S. E. Schechter. Milk or wine: Does
software security improve with age? In Proc. of the
15th USENIX Security Symposium, July 2006.
[33] I. PalmSource. OpenBinder.
http://www.angryredplanet.com/~hackbod/
openbinder/docs/html/index.html, 2005.
[34] G. Portokalidis, P. Homburg, K. Anagnostakis, and
H. Bos. Paranoid Android: Zero-day protection for
smartphones using the cloud. Technical report, Vrije
Universiteit Amsterdam, 2010.
[35] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an
emulator for ﬁngerprinting zero-day attacks. In Proc.
of ACM EuroSys, April 2006.
[36] N. Provos. Improving host security with system call
policies. In Proc. of the 12th USENIX Security
Symposium, August 2003.
[37] M. Ronsse and K. De Bosschere. RecPlay: a fully
integrated practical record/replay system. ACM
Trans. Comput. Syst., 17(2):133–152, 1999.
[38] M. Russinovich and B. Cogswell. Replay for
concurrent non-deterministic shared-memory
applications. In Proc. of PLDI ’96, pages 258–266,
May 1996.
[39] V3.co.uk. BlackBerry ’kill pill’ vital for IT security.
http://www.v3.co.uk/vnunet/news/2159105/
blackberry-kill-pill-vital.
[40] K. Vikram, A. Prateek, and B. Livshits. Ripley:
automatically securing web 2.0 applications through
replicated execution. In Proc. of CCS, pages 173–186,
2009.
[41] J. Xu and N. Nakka. Defeating memory corruption
attacks via pointer taintedness detection. In Proc. of
DSN ’05, pages 378–387, June 2005.
[42] M. Xu, R. Bodik, and M. D. Hill. A ”ﬂight data
recorder” for enabling full-system multiprocessor
deterministic replay. SIGARCH Comput. Archit.
News, 31(2):122–135, 2003.