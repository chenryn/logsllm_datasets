DH-component X = gx), where b; y; x ← Z
∗
q . For presentation simplicity, such protocol mechanism is
referred to as JP OK(b; y). Moreover, we look for solutions of JP OK(b;y) such that JP OK(b;y) can be
eﬃciently computed with one single exponentiation by the knowledge prover. Note that the tag for a
complete session of JP OK(b;y) is ( ˆA; ˆB; B; X; Y ). Throughout this work, unless otherwise speciﬁed, we
use a hash function h : {0; 1}∗ → {0; 1}l \ {0} ⊆ Z
∗
q (in the unlikely case that h(x) = 0 for some x, the
\ {0; 1}l), which is modeled as a random
∗
output of h(x) can be deﬁned by default to be a value in Z
q
oracle, and we denote by the output length, i.e., l, of h as the security parameter.
Our starting point is the JPOK mechanism proposed in [68] for deniable Internet key-exchange
(IKE): JP OK(b;y) = h( ˆA; A; ˆB; B; Y; X; X b; X y) w.r.t. a random DH-component challenge X from ˆA.
This JPOK mechanism is shown to be sound in the RO model [68], but is less eﬃcient and has no
way to be used for IA-DHKE. In order to further improve its eﬃciency toward a building tool for IA-
DHKE, one naive solution is to just set JP OK(b;y) = X b · X y = X b+y. But, such a naive solution is
totally insecure, for example, an adversary A can easily impersonate the prover ˆB and pre-determine
−1. The underlying reason is: A can malleate B and Y into X y+b
JP OK(b;y) to be 1G, by setting Y = B
by maliciously correlating the exponents of y and b, but actually without knowing either of them. A
further remedy of this situation is to mask the exponents b and y by some random values. In this case,
the proof is denoted as JP OK(b;y) = X db+ey, where d and e are random values (e.g., d = h(X; ˆB) and
e = h(Y; ˆA)). The intuition with this remedy solution is: since d and e are random values, db and ey are
also random and independent. This intuition however turns out also to be wrong in general. With the
values d = h(B; ˆA) and e = h(X; ˆB) as an illustrative example, after receiving X an adversary A can
−d=e, and in this case JP OK(b;y) = X db+ey = 1G. This shows that masking b
generate and send Y = B
and y by random values is also not suﬃcient for ensuring the non-malleability of JP OK(b;y). The key
point here is that the values db and ey are not necessarily independent, and thus a malicious prover can
still make the values db and ey correlated. Thus, one key principle is to ensure the values db and ey to be
“computationally independent”, no matter what a malicious prover does, which is referred to as inside
non-malleability.
In addition, as JPOK may be composed with other protocols in practice, another
principle is that the JPOK provided by one party in a session should be bounded to that session, in the
sense that the JPOK should not be malleated into or from other sessions, which is referred to as outside
non-malleability. This is captured by the tag-based self-seal (TBSS) deﬁnition (see Deﬁnition C.2), by
4
requiring the complete session-tag to be committed to JPOK. Informally speaking, we say a JPOK
protocol is non-malleable joint proof-of-knowledge (NMJPOK), if it enjoys both inside non-malleability
and outside non-malleability.
This line of investigations bring us to the following two candidates for NMJPOK of both b and y
w.r.t. random challenge X, under the preference of on-line eﬃciency and minimal use of hashing. More
details are referred to Appendix C.
• NMJPOK: N M JP OK(b;y) = X db+ey, where d = h(B; X) and e = h(X; Y );
• Single-hash NMJPOK (sNMJPOK): sN M JP OK(b;y) = X db+ey, where d = 1 and e = h(B; X; Y ).
Below, we provide some informal justiﬁcations of N M JP OK and sN M JP OK, by avoiding intro-
ducing and employing some cumbersome terminologies for easier interpretation. Formal treatments are
referred to Appendix C. Informally speaking, the underlying rationale of N M JP OK(b;y) is: given a
random challenge X, no matter how a malicious ˆB chooses the values Y = gy and B = gb (where y
and b can be arbitrarily correlated), it actually has no control over the values db and ey in the RO
model. That is, by the birthday paradox, it is infeasible for a malicious ˆB to set db (resp., ey) to some
predetermined value, which may be determined by ey (resp., db) via some predetermined polynomial-
time computable relation R, in the RO model in order to make the values db and ey correlated with
non-negligible probability. Thus, given a random challenge X, it is infeasible for a malicious ˆB to
output B = gb and Y = gy such that the values db and ey satisfy some predetermined relation R with
non-negligible probability in the RO model.
The situation with sN M JP OK(b;y) is a bit diﬀerent. Though as in N M JP OK(b;y), the malicious
ˆB is infeasible to set ey to some predetermined value, ˆB can always set the value db = b at its wish as
d = 1 for sN M JP OK(b;y). But, ˆB is still infeasible to set the value b correlated to ey = h(B; X; Y )y,
particularly because the value B is put into the input of (i.e., committed to) e. Speciﬁcally, for any
value B = gb set by ˆB, with the goal of making b and ey correlated, the probability that the values
ey = h(B; X; Y )y and b satisfy some predetermined polynomial-time computable relation R is negligible
in the RO model. In particular, by the birthday paradox, the probability that Pr[b = f (ey)] or Pr[f (b) =
ey], where f is some predetermined polynomial-time computable function (that is in turn determined
by the predetermined relation R), is negligible in the RO model, no matter how the malicious ˆB does.
Note that N M JP OK(b;y) = X db+ey = (BdY e)x, where d = h(B; X) and e = h(X; Y ), actually can
be used to demonstrate the knowledge of x. The key observation now is: in order for ˆA to additionally
prove the knowledge of its secret-key a, we can multiply X db+ey by another POK Y ca for c = h(A; Y ).
This yields K ^A = BdxY ca+ex = AcyX db+ey = K ^B, where K ^A (resp., K ^B) is computed by ˆA (resp., ˆB)
respectively. As we aim for secure DHKE protocols in concurrent settings like the Internet, in order to
ensure outside non-malleability in accordance with the TBSS deﬁnition discussed in Appendix C, we let
the values K ^A and K ^B commit to the complete session tag by putting users’ identities into the inputs of
d and/or e, which particularly ensures the key-control property of [45] for DHKE. The variant derived
from sNMJPOK is referred to as single-hash OAKE (sOAKE). Robust OAKE (rOAKE) is derived from
OAKE by additionally multiplying the value gab into the shared DH-secret K ^A = K ^B, which is guided
by the analysis of HMQV for the need of removing the additional non-standard KEA assumption for
rOAKE. All these three protocols are depicted in Figure 1.
Note that the output length of h, i.e., l, is set to be |q|=2 in (H)MQV, but approximately |q| in
(s,r)OAKEs. In particular, with the OAKE protocol family, h and HK (that is used for deriving the
session-key K) can be identical. Also note that, for OAKE and sOAKE, referred to as (s)OAKE for
simplicity, ˆA (resp., ˆB) can oﬄine pre-compute X and Bdx (resp., Y and Acy), while for rOAKE ˆA
(resp., ˆB) can oﬄine pre-compute X and Ba+dx (resp., Y and Ab+cy). Some more variants of (s,r)OAKE
are given in Appendix D. Here, we also highlight the TBSS property of (s,r)OAKE in the RO model:
given any complete session tag ( ˆA; A; ˆB; B; X; Y ) and any (cid:11) ∈ G\ 1G, Pr[K ^A = K ^B = (cid:11)] ≤ 1
2l−1 , where
the probability is taken over the choice of the random function of h (see more discussions on TBSS in
Appendix C).3
3Actually, if h is modeled to be an RO from {0; 1}∗
q , K ^A = K ^B is distributed uniformly at random over G\{1G}.
∗
to Z
5
Figure 1: Speciﬁcations of (H)MQV and (s,r)OAKE
On embedded subgroup tests in (s,r)OAKE. The basic technique to check the DH-component,
e.g. X, is in G is to verify X q = 1G (and X ∈ G
= Z
; (2). X t ̸= 1G. In general, checking X ∈ G
′
′
′\1G) that needs performing one modular exponentiation.
∗
′
But, if the cofactor t is small, e.g., G
N such that N = 2q+1 or G is the subgroup of an elliptic curve
over a ﬁnite ﬁeld (in this case the cofactor t is usually a small constant), the subgroup test of X can
be essentially reduced to: (1) check X ∈ G
and X t ̸= 1G
′
guarantees that X is not in a (small) subgroup of G
with the order that is a factor of t, but it does not
fully guarantee X ∈ G (e.g., considering that X = −gx). This leads to the following (s,r)OAKE variant
with embedded subgroup tests, in which the values K ^A; K ^B are set to be: K ^A = Baf t+dxtY cat+ext
and K ^B = Abf t+cytX dbt+eyt, where f = 0 for (s)OAKE and f = 1 for rOAKE. The subgroup test is
performed as follows: each player ﬁrst veriﬁes that its peer’s DH-component is in G
, and then acts in
accordance with one of the following two cases.
Case-1. If Baf t+dxt and Y cat+ext (resp., Abf t+cyt and X dbt+eyt) are computed separately, particularly
when Baf t+dxt (resp., Abf t+cyt) is oﬄine pre-computed by ˆA (resp., ˆB), ˆA (resp., ˆB) checks that
Y cat+ext ̸= 1G (resp., X dbt+eyt ̸= 1G);
̸= 1G). Note
̸= 1G, as done in MQV, does not fully guarantee X t ̸= 1G
̸= 1G and K ^B
̸= 1G (resp., K ^B
that the checking of K ^A
or Y t ̸= 1G, but it still provides reasonable assurance in the elliptic curve setting.
Case-2. In case of no separate computation, ˆA (resp., ˆB) veriﬁes K ^A
′
We remark that the embedded subgroup test in Case-1, well supported by (s,r)OAKE, provides stronger
security guarantee than that in Case-2 as done in (H)MQV. Note that (H)MQV cannot oﬄine pre-
compute the values Be and Ad to ease the more robust Case-1 embedded subgroup test. We note that
the damage caused by ignoring the subgroup test of peer’s DH-component (but still with the supergroup
G
membership check) can be much relieved (and even waived), if the ephemeral private values generated
within the protocol run are well-protected. More notes on the subgroup test, and on the ephemeral
private values that can be exposed to adversary, are referred to Appendix E.
′
4 Discussions on Advantageous Features and Security
Eﬃciency advantages. The online computational complexity of (s,r)OAKE can be only 1 expo-
nentiation at each player side (with embedded subgroup test), which is optimal for DHKE and is
important for deploying a DHKE protocol with power-limited devices like smart-cards,
mobile-phones, etc). Speciﬁcally, the value Bf a+dx (resp., Af b+cy) can be oﬄine pre-computed by ˆA
(resp., ˆB). In comparison, (H)MQV cannot oﬄine pre-compute the values Be and Ad to improve online
6
PK^A:A=gaSK^A:aPK^B:B=gbSK^B:bˆB;B;Y=gyˆA;A;X=gx(H)MQV:K^A=(YBe)x+da;K^B=(XAd)y+eb;K=HK(K^A)=HK(ˆB)MQV:d=2l+(Xmod2l);e=2l+(Ymod2l);l=|q|=2HMQV:d=h(X;ˆB);e=h(Y;ˆA);l=|q|=2(s,r)OAKE:K^A=Bfa+dxYca+ex,K^B=Afb+cyXdb+ey,K=HK(K^A)=HK(K^B)OAKE:c=h(ˆA;A;Y),d=h(ˆB;B;X),e=h(X;Y),f=0,l≈|q|sOAKE:c=d=1,e=h(ˆA;A;ˆB;B;X;Y),f=0,l≈|q|rOAKE:c=h(ˆA;A;Y),d=h(ˆB;B;X),e=h(X;Y),f=1,l≈|q|eﬃciency, and thus the online eﬃciency of (H)MQV is about 1.3 exponentiations by the simultaneous
exponentiation techniques [49, 33, 24].
The total computational complexity of (s,r)OAKE is essentially the same as that of (H)MQV, with
sOAKE being still slightly more eﬃcient than HMQV. In particular, by the simultaneous exponentiation
techniques [49, 33, 24], each player in (H)MQV and (s,r)OAKE performs about 1.3 exponentiations
in computing K ^A or K ^B. But, the computation of K ^A (resp., K ^B) of HMQV is still slightly more
ineﬃcient than that of sOAKE with a single hash. For example, to compute K ^A, besides the same
other operations needed for simultaneous exponentiations, HMQV (resp., sOAKE) needs to compute
{d; e; x + da; e(x + da)} (resp., only {e; a + xe}). To the best of our knowledge, the sOAKE protocol is
the most eﬃcient provably secure IA-DHKE protocol to date. As mentioned, due to the state-of-the-art
nature and highly intensive study of (H)MQV, even slight eﬃciency improvement can be challenging.
On the same subgroup order q, (s,r)OAKE ensures more robust resistance to collision attacks against
the hash function h than HMQV, as the output length of h, i.e., l, is set to be |q|=2 for HMQV but
|q| for (s,r)OAKE. To strengthen the resistance to birthday-type collision attacks against h (in case
of pre-computed DH-components exposed prior to the sessions involving them and a large number of
sessions), HMQV needs some changes (as speciﬁed in [42] and also discussed in Appendix G), and
some standards mandate larger subgroups (e.g., |q| = 255 in [57]) to use for HMQV. However, in
memory-restricted environments (like smart-cards or other portable electronic tokens), subgroup size is
an inﬂuential parameter in favor of a given algorithmic solution.
Reasonable deniability. For key-exchange protocols, both security and privacy are desired, which
would also have been being one of the major criteria underlying the evolution of a list of important
industrial standards of KE protocols (e.g., Internet key-exchange). Among privacy concerns, deniability
is an essential privacy property, and has always been a central concern in personal and business commu-
nications, with oﬀ-the-record communication serving as an essential social and political tool [21, 22, 25].
The reader is referred to [21, 22, 25] for a list of scenarios where deniability is desirable. (Needless to
say, there are special applications where non-repudiable communication is essential, but this is not the
case for most of our nowaday communications over Internet [21, 22, 25] where deniable authentication
is much more desirable than non-repudiable authentication.)
A 2-round implicitly authenticated DHKE protocol is deﬁned to be of reasonable deniability, if the
session-key can be computed merely from the ephemeral DH-exponents without involving any player’s
static secret-key. Note that we cannot count on implicitly authenticated DHKE, like (H)MQV and
(s,r)OAKE, to enjoy full-ﬂedged deniability (zero-knowledge). It is clear that (s)OAKE enjoys reason-
able deniability, as the session-key of (s)OAKE can be computed merely from the DH-exponents x and
y, which is useful to preserve privacy for both protocol players. Note that (H)MQV and also the rOAKE
protocol are not reasonably deniable, as the value gab is involved in the session-key computation, and
thus the use of the session-key of (H)MQV and rOAKE can be traced back to the group of the two
participating players.
Modular, parallel and post-ID computability. First note that Bf a+dx, Y ca+ex and the explicit
sub-group test Y q by ˆA (resp., Af b+cy, X db+ey and X q by ˆB) can be computed in a parallel, modular
and post-ID way, which allows for various trade-oﬀs among security, privacy and eﬃciency for the
deployment of (s,r)OAKE in practice. Speciﬁcally, the oﬄine pre-computability of Bf a+dx and Af b+cy
eases more eﬃcient explicit subgroup test by computing Y ca+ex and Y q (resp., X db+ey and X q) in
parallel that amounts to about 1.2 exponentiations. Also, as clariﬁed, oﬄine pre-computability of
Af b+cy (resp., Bf a+dx) allows the above more robust Case-1 embedded subgroup test of X dbt+ext (resp.,
Y cat+ext). Further observe that, for OAKE and rOAKE ((r)OAKE, in short), Y ca+ex (resp., X db+ey) can
be computed before learning peer’s identity and public-key information. Such a post-ID computability,
as desired with IKEv2 [40, 41], is useful for privacy preservation [16]. (H)MQV does not support such
oﬄine pre-computability and post-ID computability.
Security with public computation. The work [44] proposed the public computation model for
KE protocols, where an entity (performing a run of KE-protocol) is split into two parts: a trusted
authentication device (which enforces the conﬁdentiality of the authentication data), and an untrusted
computing device (in which some computing operations are publicly carried out). This allows to use
7
an authentication device with little computing power, and to make computing devices independent
from users [44]. Some concrete applications suggested in [44] are: (1) Mobile phones include smart
cards which store the user authentication data; the handsets themselves are the computing devices.
(2) PCs (corresponding to the computing device) equipped with a crypto token (corresponding to the
authentication device) have a lot more computing power than the token itself, but may be plagued by
spyware or virus. (H)MQV does not support deployment with such public computation as shown in
[44], while (s,r)OAKE well supports deployment in this model (see details in Appendix H).
Speciﬁcally, the natural split of authentication computation and public computation for (s,r)OAKE
is as follows, with the computation of ˆB as an example: (1) The authentication device generates (y; Y )