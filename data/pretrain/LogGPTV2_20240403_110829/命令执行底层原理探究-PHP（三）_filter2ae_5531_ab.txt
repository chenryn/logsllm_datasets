    /* }}} */
    #else /* Unix */
    CWD_API FILE *virtual_popen(const char *command, const char *type) /* {{{ */
    {
        size_t command_length;
        int dir_length, extra = 0;
        char *command_line;
        char *ptr, *dir;
        FILE *retval;
        command_length = strlen(command);
        dir_length = CWDG(cwd).cwd_length;
        dir = CWDG(cwd).cwd;
        while (dir_length > 0) {
            if (*dir == '\'') extra+=3;
            dir++;
            dir_length--;
        }
        dir_length = CWDG(cwd).cwd_length;
        dir = CWDG(cwd).cwd;
        ptr = command_line = (char *) emalloc(command_length + sizeof("cd '' ; ") + dir_length + extra+1+1);
        memcpy(ptr, "cd ", sizeof("cd ")-1);
        ptr += sizeof("cd ")-1;
        if (CWDG(cwd).cwd_length == 0) {
            *ptr++ = DEFAULT_SLASH;
        } else {
            *ptr++ = '\'';
            while (dir_length > 0) {
                switch (*dir) {
                case '\'':
                    *ptr++ = '\'';
                    *ptr++ = '\\';
                    *ptr++ = '\'';
                    /* fall-through */
                default:
                    *ptr++ = *dir;
                }
                dir++;
                dir_length--;
            }
            *ptr++ = '\'';
        }
        *ptr++ = ' ';
        *ptr++ = ';';
        *ptr++ = ' ';
        memcpy(ptr, command, command_length+1);
        retval = popen(command_line, type);
        efree(command_line);
        return retval;
    }
    /* }}} */
    #endif
不难发现，针对`virtual_popen()`函数实现，也存在于不同平台，这里主要分析Windows平台，针对Unix平台在下面`PHP for
Linux`部分会详细讲述。
针对`Windows`平台，`virtual_popen()`函数实现非常简单，直接调用`popen_ex()`函数进行返回。
进入`popen_ex()`函数实现：`TSRM\tsrm_win32.c:473`
    TSRM_API FILE *popen_ex(const char *command, const char *type, const char *cwd, char *env)
    {/*{{{*/
        FILE *stream = NULL;
        int fno, type_len, read, mode;
        STARTUPINFOW startup;
        PROCESS_INFORMATION process;
        SECURITY_ATTRIBUTES security;
        HANDLE in, out;
        DWORD dwCreateFlags = 0;
        BOOL res;
        process_pair *proc;
        char *cmd = NULL;
        wchar_t *cmdw = NULL, *cwdw = NULL, *envw = NULL;
        int i;
        char *ptype = (char *)type;
        HANDLE thread_token = NULL;
        HANDLE token_user = NULL;
        BOOL asuser = TRUE;
        if (!type) {
            return NULL;
        }
        /*The following two checks can be removed once we drop XP support */
        type_len = (int)strlen(type);
        if (type_len  2) {
            return NULL;
        }
        for (i=0; i prochnd = process.hProcess;
        proc->stream = stream;
        return stream;
    }/*}}}*/
从`TSRM\tsrm_win32.c`文件不难发现，由`virtual_popen()`函数不同平台到`popen_ex()`函数可知，`virtual_popen()`函数是作为不同平台的分割点，此时的调用链已经到了仅和windows平台有联系。
接着对`*popen_ex()`函数进行分析，参数：`command`为指令参数、`cwd`为当前工作目录、`env`为环境变量信息。
为cmd变量动态分配空间：这里不得不说把cmd变量的空间分配的刚刚好
    cmd = (char*)malloc(strlen(command)+strlen(TWG(comspec))+sizeof(" /c ")+2);
分配空间后，为cmd变量赋值
    sprintf(cmd, "%s /c \"%s\"", TWG(comspec), command);
    => cmd = "cmd.exe /c whoami"
这部分其实在PHP官方手册的[可执行函数](https://www.php.net/function.exec)中也有说明
到这里也就会发现`system、exec、passthru、shell_exec`这类命令执行函数底层都会调用系统终端`cmd.exe`来执行传入的指令参数。那么既然会调用系统cmd，就要将cmd进程启动起来。
继续向后分析`*popen_ex()`函数，会找到相关Windows系统API来启动`cmd.exe`进程，然后由cmd进程执行指令参数(内部|外部指令)。
        if (asuser) {
            res = CreateProcessAsUserW(token_user, NULL, cmdw, &security, &security, security.bInheritHandle, dwCreateFlags, envw, cwdw, &startup, &process);
            CloseHandle(token_user);
        } else {
            res = CreateProcessW(NULL, cmdw, &security, &security, security.bInheritHandle, dwCreateFlags, envw, cwdw, &startup, &process);
        }
> 在 Windows 平台上，创建进程有
> `WinExec`，`system`，`_spawn/_wspawn`，`CreateProcess`，`ShellExecute`
> 等多种途径，但上述函数基本上还是由 `CreateProcess Family` 封装的。在 Windows 使用 `C/C++` 创建进程应当优先使用
> `CreateProcess`，`CreateProcess`有三个变体，主要是为了支持以其他权限启动进程， `CreateProcess`
> 及其变体如下：
Function | Feature | Details  
---|---|---  
CreateProcessW/A | 创建常规进程，权限继承父进程权限 |  
CreateProcessAsUserW/A | 使用主 Token 创建进程，子进程权限与 Token 限定一致 | 必须开启
`SE_INCREASE_QUOTA_NAME`  
CreateProcessWithTokenW | 使用主 Token 创建进程，子进程权限与 Token 限定一致 | 必须开启
`SE_IMPERSONATE_NAME`  
CreateProcessWithLogonW/A | 使用指定用户凭据启动进程  
PS：有关Windows系统API的调用情况，一般编程语言启动某个可执行程序的进程，都会调用`CreateProcessW`系统API，而不使用`CreateProcessAsUserW`系统API。同时在cmd终端进程下，启动外部指令程序所调用的系统API一般为`CreateProcessInternalW`。
接着将进程运行的结果信息以流的形式返回，最终完成PHP命令执行函数的整个调用过程。
        if (read) {
            fno = _open_osfhandle((tsrm_intptr_t)in, _O_RDONLY | mode);
            CloseHandle(out);
        } else {
            fno = _open_osfhandle((tsrm_intptr_t)out, _O_WRONLY | mode);
            CloseHandle(in);
        }
        stream = _fdopen(fno, type);
        proc->prochnd = process.hProcess;
        proc->stream = stream;
        return stream;
同理，按照上述整个审计思路，可整理出PHP常见命令执行函数在Windows平台下的底层调用链
####  动态审计
有了上面`静态审计`部分的分析，后续进行动态调试会很方便。这里同样以`system()`函数执行`whoami`指令为例来进行动态调试，其它函数调试原理类似。
    // test.php
在`ext/standard/exec.c:265`中对system()函数实现入口处下断点，F5启动调试，运行至断点处
F11步入函数`php_exec_ex(INTERNAL_FUNCTION_PARAM_PASSTHRU,
1)`内部：`ext\standard\exec.c:209`
`php_exec_ex()`对cmd参数初始化处理后调用`php_exec(mode, cmd, NULL, return_value)`函数
F11步入`php_exec()`函数：`ext\standard\exec.c:97`，`php_exec()`函数会传入cmd指令调用`VCWD_POPEN()`函数
F11步入`VCWD_POPEN()`函数实现：
    #define VCWD_POPEN(command, type) virtual_popen(command, type)
    Zend\zend_virtual_cwd.h:269
由于`VCWD_POPEN`函数为`virtual_popen`实现，直接进入`virtual_popen()`函数实现：`Zend\zend_virtual_cwd.c:1831`
`virtual_popen()`函数将cmd指令、当前工作空间等参数传给`popen_ex(command, type, CWDG(cwd).cwd,
NULL)`函数执行返回。
F11步入`popen_ex()`函数实现：`TSRM\tsrm_win32.c:473`
跟进`popen_ex()`函数，对cmd进行动态分配空间及赋值
从cmd赋值的结果上来看，命令执行函数执行命令由底层调用cmd.exe来执行相应系统指令(内部|外部)。
后续调用`CreateProcessW()`系统API来启动cmd.exe进程，执行相应的指令即可。
查看函数之间的调用栈
如果单纯的是想知道某个命令执行函数是否调用cmd.exe终端去执行系统指令的话，可以在php脚本里面写一个循环，然后观察进程创建情况即可：简单、粗暴。
## 参考链接
  * [Build your own PHP on Windows](https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2)
  * [Visual Studio docs](https://visualstudio.microsoft.com/zh-hans/vs/)
  * [Visual Studio Code docs](https://code.visualstudio.com/docs)
  * [《PHP 7底层设计与源码实现+PHP7内核剖析》](https://item.jd.com/28435383700.html)
  * [深入理解 PHP 内核](https://www.bookstack.cn/books/php-internals)
  * [WINDOWS下用VSCODE调试PHP7源代码](https://www.jianshu.com/p/29bc0443b586)
  * [调式PHP源码](https://gywbd.github.io/posts/2016/2/debug-php-source-code.html)
  * [用vscode调试php源码](https://blog.csdn.net/Dont_talk/article/details/107719466)
  * [GDB: The GNU Project Debugger](http://www.gnu.org/software/gdb)
  * [CreateProcessW function](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw)
  * [命令注入成因小谈](https://xz.aliyun.com/t/6542)
  * [浅谈从PHP内核层面防范PHP WebShell](https://paper.seebug.org/papers/old_sebug_paper/pst_WebZine/pst_WebZine_0x05/0x07_%E6%B5%85%E8%B0%88%E4%BB%8EPHP%E5%86%85%E6%A0%B8%E5%B1%82%E9%9D%A2%E9%98%B2%E8%8C%83PHP_WebShell.html)
  * [Program execution Functions](https://www.php.net/manual/en/ref.exec.php)
  * [linux系统调用](http://huhaipeng.top/2019/04/20/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/)
  * [system calls](https://fedora.juszkiewicz.com.pl/syscalls.html)