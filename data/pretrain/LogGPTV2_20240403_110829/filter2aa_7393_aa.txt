'\" t
.TH "SYSTEMD" "1" "" "systemd 231" "systemd"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd, init \- systemd 系统与服务管理器
.SH "SYNOPSIS"
.HP \w'\fBsystemd\ \fR\fB[OPTIONS...]\fR\ 'u
\fBsystemd \fR\fB[OPTIONS...]\fR
.HP \w'\fBinit\ \fR\fB[OPTIONS...]\fR\fB\ \fR\fB{COMMAND}\fR\ 'u
\fBinit \fR\fB[OPTIONS...]\fR\fB \fR\fB{COMMAND}\fR
.SH "描述"
.PP
systemd 是一个专用于 Linux 操作系统的系统与服务管理器。 当作为启动进程(PID=1)运行时，它将作为初始化系统运行， 也就是启动并维护各种用户空间的服务。
.PP
为了与传统的 SysV 兼容，如果将 systemd 以
\fBinit\fR
名称启动，并且"PID≠1"，那么它将执行
\fBtelinit\fR
命令并将所有命令行参数原封不动的传递过去。 这样对于普通的登陆会话来说，无论是调用
\fBinit\fR
还是调用
\fBtelinit\fR
都是等价的。 详见
\fBtelinit\fR(8)
手册。
.PP
当作为系统实例运行时， systemd 将会按照
system\&.conf
配置文件 以及
system\&.conf\&.d
配置目录中的指令工作； 当作为用户实例运行时，systemd 将会按照
user\&.conf
配置文件 以及
user\&.conf\&.d
配置目录中的指令工作。详见
\fBsystemd-system.conf\fR(5)
手册。
.SH "选项"
.PP
能够识别的命令行选项如下：
.PP
\fB\-\-test\fR
.RS 4
检测并输出启动序列，然后退出。 仅用于调试目的。
.RE
.PP
\fB\-\-dump\-configuration\-items\fR
.RS 4
输出一个单元(unit)列表。 此列表简明且完整的列出了 所有单元文件中定义的"unit"。
.RE
.PP
\fB\-\-unit=\fR
.RS 4
设置启动时默认启动的单元(unit)。 默认值是
default\&.target
.RE
.PP
\fB\-\-system\fR, \fB\-\-user\fR
.RS 4
\fB\-\-system\fR
表示强制作为系统实例运行(即使"PID≠1")，
\fB\-\-user\fR
表示强制作为用户实例运行(即使"PID=1")。 通常不应该使用此选项。 此选项仅用于调试目的， 而且
\fB\-\-system\fR
仅在与
\fB\-\-test\fR
一起使用时才有实际意义。
.RE
.PP
\fB\-\-dump\-core\fR
.RS 4
在崩溃时进行内核转储。 当作为用户实例运行时，此选项没有实际意义。 此选项还可以通过内核引导选项
\fIsystemd\&.dump_core=\fR
开启 (参见"内核引导选项"小节)。
.RE
.PP
\fB\-\-crash\-vt=\fR\fIVT\fR
.RS 4
在崩溃时切换到指定的虚拟控制台(VT)。 当作为用户实例运行时，此选项没有实际意义。 可以设为一个 1\(en63 之间的整数或布尔值。 若设为整数则切换到指定编号的虚拟控制台； 若设为
\fByes\fR
则表示使用内核消息所使用的虚拟控制台； 若设为
\fBno\fR
则表示不切换到任何虚拟控制台。 此选项还可以通过内核引导选项
\fIsystemd\&.crash_vt=\fR
设置 (参见"内核引导选项"小节)。
.RE
.PP
\fB\-\-crash\-shell\fR
.RS 4
在崩溃时启动一个 shell 。 当作为用户实例运行时，此选项没有实际意义。 此选项还可以通过内核引导选项
\fIsystemd\&.crash_shell=\fR
开启 (参见"内核引导选项"小节)。
.RE
.PP
\fB\-\-crash\-reboot\fR
.RS 4
在崩溃时自动重启系统。 当作为用户实例运行时，此选项没有实际意义。 此选项还可以通过内核引导选项
\fIsystemd\&.crash_reboot=\fR
开启 (参见"内核引导选项"小节)。
.RE
.PP
\fB\-\-confirm\-spawn\fR
.RS 4
在派生新进程时进行确认提示。 当作为用户实例运行时，此选项没有实际意义。
.RE
.PP
\fB\-\-show\-status=\fR
.RS 4
在系统启动过程中显示简明的服务状态信息。 当作为用户实例运行时，此选项没有实际意义。 其参数必须是一个表示真假的布尔值， 如果未指定则相当于设为
\fByes\fR
.RE
.PP
\fB\-\-log\-target=\fR
.RS 4
设置日志的目标，其参数必须是
\fBconsole\fR,
\fBjournal\fR,
\fBkmsg\fR,
\fBjournal\-or\-kmsg\fR,
\fBnull\fR
之一(小写)。
.RE
.PP
\fB\-\-log\-level=\fR
.RS 4
设置日志的等级， 其参数必须是一个数字或者 符合
\fBsyslog\fR(3)
习惯的
\fBemerg\fR,
\fBalert\fR,
\fBcrit\fR,
\fBerr\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR
之一(小写)。
.RE
.PP
\fB\-\-log\-color=\fR
.RS 4
高亮重要的日志信息，其参数必须是一个表示真假的布尔值， 若未指定则相当于设为
\fByes\fR
.RE
.PP
\fB\-\-log\-location=\fR
.RS 4
在日志中包含代码的位置， 其参数必须是一个表示真假的布尔值， 若未指定则相当于设为
\fByes\fR
。仅用于调试目的。
.RE
.PP
\fB\-\-default\-standard\-output=\fR, \fB\-\-default\-standard\-error=\fR
.RS 4
为所有的 service 与 socket 设置默认的标准输出与标准错误， 相当于设置
\fBStandardOutput=\fR
与
\fBStandardError=\fR
指令的值(参见
\fBsystemd.exec\fR(5)
手册)。其参数必须是
\fBinherit\fR,
\fBnull\fR,
\fBtty\fR,
\fBjournal\fR,
\fBjournal+console\fR,
\fBsyslog\fR,
\fBsyslog+console\fR,
\fBkmsg\fR,
\fBkmsg+console\fR
之一(小写)。
\fB\-\-default\-standard\-output=\fR
的默认值是
\fBjournal\fR
；而
\fB\-\-default\-standard\-error=\fR
的默认值是
\fBinherit\fR
.RE
.PP
\fB\-\-machine\-id=\fR
.RS 4
覆盖文件系统上的 machine\-id 设置， 常用于网络启动或容器。 禁止设为全零的值。
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
显示简短的帮助信息并退出。
.RE
.PP
\fB\-\-version\fR
.RS 4
显示简短的版本信息并退出。
.RE
.SH "概念"
.PP
systemd 将各种系统启动和运行相关的对象， 表示为各种不同类型的单元(unit)， 并提供了处理不同单元之间依赖关系的能力。 大部分单元都静态的定义在单元文件中 (参见
\fBsystemd.unit\fR(5)
手册)， 但是有少部分单元则是动态自动生成的： 其中一部分来自于其他传统的配置文件(为了兼容性)， 而另一部分则动态的来自于系统状态或可编程的运行时状态。 单元既可以处于活动(active)状态也可以处于停止(inactive)状态， 当然也可以处于启动中(activating)或停止中(deactivating)的状态。 还有一个特殊的失败(failed)状态， 意思是单元以某种方式失败了 (进程崩溃了、或者触碰启动频率限制、或者退出时返回了错误代码、或者遇到了操作超时之类的故障)。 当进入失败(failed)状态时， 导致故障的原因将被记录到日志中以方便日后排查。 需要注意的是， 不同的单元可能还会有各自不同的"子状态"， 但它们都被映射到上述五种状态之一。
.PP
各种不同的单元类型如下：
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
service 单元。用于封装一个后台服务进程。 参见
\fBsystemd.service\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
socket 单元。 用于封装一个系统套接字(UNIX)或互联网套接字(INET/INET6)或FIFO管道。 相应的服务在第一个"连接"进入套接字时才会被启动。 有关套接字单元的详情，参见
\fBsystemd.socket\fR(5)
手册；有关基于套接字或其他方式的启动，参见
\fBdaemon\fR(7)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
target 单元。 用于将多个单元在逻辑上组合在一起。参见
\fBsystemd.target\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
device 单元。用于封装一个设备文件，可用于基于设备的启动。 并非每一个设备文件都需要一个 device 单元， 但是每一个被 udev 规则标记的设备都必须作为一个 device 单元出现。参见
\fBsystemd.device\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
mount 单元。 用于封装一个文件系统挂载点(也向后兼容传统的 /etc/fstab 文件)。参见
\fBsystemd.mount\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
automount 单元。 用于封装一个文件系统自动挂载点，也就是仅在挂载点确实被访问的情况下才进行挂载。 它取代了传统的 autofs 服务。参见
\fBsystemd.automount\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
timer 单元。 用于封装一个基于时间触发的动作。它取代了传统的 atd, crond 等任务计划服务。参见
\fBsystemd.timer\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
swap 单元。 用于封装一个交换分区或者交换文件。 它与 mount 单元非常类似。参见
\fBsystemd.swap\fR(5)
手册。
.RE
.sp
.RS 4
.ie n \{\