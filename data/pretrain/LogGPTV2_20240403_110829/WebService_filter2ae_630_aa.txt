# 浅析接口安全之WebService
## 0x0 前言
关于这类型漏洞很少有人发表相关学习资料，最近笔者遇到了这种漏洞，并根据了网上寥寥无几的文章思路安装了工具来测试，结果却发现工具没办法成功攻击，但是漏洞真实存在，所以笔者就以此为基础展开了关于WebServices的学习，去了解相关的构造原理，改进工具化测试的不足。
## 0x1 WebService的架构
笔者查阅了挺多的相关资料，提到了非常多很陌生的技术，这里我对其进行了自我总结，如有不对，欢迎师傅们指出改正。
**什么是WebService?**
> Web
> Service是一个[平台](https://baike.baidu.com/item/平台/1064049)独立的，低耦合的，自包含的、基于可[编程](https://baike.baidu.com/item/编程)的web的应用程序，可使用开放的[XML](https://baike.baidu.com/item/XML)（[标准通用标记语言](https://baike.baidu.com/item/标准通用标记语言/6805073)下的一个子集）[标准](https://baike.baidu.com/item/标准/219665)来[描述](https://baike.baidu.com/item/描述/8928757)、发布、发现、协调和配置这些应用程序，用于开发分布式的交互操作的[应用程序](https://baike.baidu.com/item/应用程序/5985445)。
总结:
> Web服务(WebService)是一种跨语言和跨平台的远程调用(RPC)技术
>
>
> 所谓跨编程语言和跨操作平台，就是说服务端程序采用java编写，客户端程序则可以采用其他编程语言编写，反之亦然！跨操作系统平台则是指服务端程序和客户端程序可以在不同的操作系统上运行。  
>  所谓远程调用，就是一台计算机a上 的一个程序可以调用到另外一台计算机b上的一个对象的方法。
ps.WebService思想有点跟微服务很像，是一种比较"重"和“老”的Web接口技术，目前大部分应用于金融机构的历史应用和比较老的应中，在内网里面遇到的机会还是挺多的。
**WebService的工作流程**
>
> 服务端应用程序首先向外界暴露出一个能通过Web进行调用的API,为了实现跨平台和跨语言，那么与这个API交互的时候，就需要有一套标准的类型系统来描述WebService这个接口，让用户通过这个标准来解析怎么调用这个接口，然后用户将解析结果封装上自己的数据发送到客户端，服务端统一采用这一套标准进行解析和返回。
**WebService的技术实现与支持**
1.SOAP(Simple Object Access Protocol, 简单对象访问协议)
> SOAP协议 由特定的HTTP信息头和XML内容格式组成
>
> SOAP = http协议 + XML数据格式
2.WSDL(Web Services Description Language, 网络服务描述语言)
> 给出了SOAP型Web
> Service的基本定义,WSDL基于XML语言，描述了与服务交互的基本元素，比如函数、数据类型、功能等，少数情况下，WSDL也可以用来描述REST型Web
> Service。
>
> WSDL文件保存在Web服务器上，通过一个url地址就可以访问到他。客户端要调用WebService服务之前，要知道该服务的WSDL文件的地址。
3.REST(Representational State Transfer, 表征性状态转移)
> REST型Web
> Service允许我们使用JSON格式（也可以使用XML格式）与服务器进行通信。与HTTP类似，该类型服务支持GET、POST、PUT、DELETE方法。
4.WADL(Web Application Description Language, 网络应用描述语言)
> WSDL的REST版，一般用于REST型Web Service，描述与Web Service进行交互的基本元素。
PS.笔者目前接触的比较多就是第1.2种,所以就以经典SOAP协议的WebService作为学习目标了。
**应用场景**
webservice
经常使用在异构系统中，比如一个JAVA开发的OA系统与一个C#开发的CRM系统进行系统交互的时候就可以利用WebService来统一交互标准，当然也可以在同构系统中整合该服务，统一系统交互的标准。这就好比我们经常使用API接口使用JSON封装数据，但是JSON有点缺陷，emmm不算缺陷，是因为其自身的跨域性特点有可能会导致jsonp攻击。
## 0x2 编写WebService服务
这里笔者介绍两种最常见WebService开发环境。
### 0x2.1 JAVA下的CXF框架编写
**简单介绍下CXF框架:**
> CXF(Celtix + XFire)
>
> 一个apache用于开发WebService服务端和客户端的框架。
1.安装CXF的依赖包
    proxychains4 wget https://mirror-hk.koddos.net/apache/cxf/3.3.6/apache-cxf-3.3.6.tar.gz
2.创建一个项目,导入CXF lib下的依赖包
(1)ICalculator 接口类
    package com.xq17.cxf;
    import javax.jws.WebService;
    @WebService
    public interface ICalculator {
            int add(int a, int b);
            String concat(String a, String b);
    }
(2)CalculatorImpl 接口实现类
    package com.xq17.cxf;
    import javax.jws.WebService;
    @WebService(endpointInterface="com.xq17.cxf.ICalculator", serviceName="Calcutator")
    public class CalculatorImpl implements ICalculator{
        @Override
        public int add(int a, int b) {
            return a + b;
        }
        @Override
        public String concat(String a, String b) {
            return a + b;
        }
    }
(3) WebService服务端类
    package com.xq17.cxf;
    import javax.xml.ws.Endpoint;
    public class WebService {
        public static void main(String[] args) {
            // TODO Auto-generated method stub
            System.out.println("Web Service Start!");
            CalculatorImpl implementor = new CalculatorImpl();
            String address  = "http://127.0.0.1:8081/calculator";
            Endpoint.publish(address, implementor);
            // 这里就能加载已经定义为WebService接口的CalculatorImpl对象和发布网址
            System.out.println("web service started");
        }
    }
(4) Run
(4) 访问URL
可以看到成功输出了相应的信息。
### 0x2.2 ASP.NET下编写简单的WebService
1.在空白窗体新建一个web服务`WebService.asmx`
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web;
    using System.Web.Services;
    /// 
    /// WebService 的摘要说明
    /// 
    [WebService(Namespace = "http://localhost/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。 
    [System.Web.Script.Services.ScriptService]
    public class WebService : System.Web.Services.WebService
    {
        public WebService()
        {
            //如果使用设计的组件，请取消注释以下行 
            //InitializeComponent(); 
        }
        [WebMethod]
        public string HelloWorld()
        {
            return "Hello World";
        }
        [WebMethod]
        public int Power(int num)
        {
            return num * num;
        }
    }
这里我们写了一个Power函数
2.然后发布到IIS,访问URL
当我们点击服务说明的时候跳转到:
返回的就是WSDL,说明这个接口怎么使用。
访问`http://localhost:8089/WebService.asmx?op=Power`可以在浏览器直接调用,这里给出发出的协议，及其返回结果的例子,方便我们写对应的程序来进行调用该服务。
**1.SOP1.1**
    POST /WebService.asmx HTTP/1.1
    Host: localhost
    Content-Type: text/xml; charset=utf-8
    Content-Length: length
    SOAPAction: "http://localhost/Power"
          int
    HTTP/1.1 200 OK
    Content-Type: text/xml; charset=utf-8
    Content-Length: length
          int