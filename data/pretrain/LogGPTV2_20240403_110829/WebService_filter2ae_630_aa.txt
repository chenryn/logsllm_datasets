# 浅析接口安全之 WebService

## 0x0 前言
关于此类漏洞的学习资料较少。最近，笔者在实际工作中遇到了这种漏洞，并尝试根据网上有限的资源安装工具进行测试。然而，尽管漏洞确实存在，但工具却未能成功攻击。基于此，笔者决定深入研究 WebServices 的构造原理，并改进现有的工具化测试方法。

## 0x1 WebService 的架构

### 什么是 WebService？
WebService 是一种平台独立、低耦合且自包含的应用程序，它使用开放的 XML 标准来描述、发布、发现、协调和配置应用程序，以实现分布式交互操作。简而言之，Web服务是一种跨语言和跨平台的远程调用（RPC）技术。例如，服务端程序可以用 Java 编写，而客户端则可以使用其他编程语言，如 C# 或 Python。此外，这些程序可以在不同的操作系统上运行。

**总结：**
- Web 服务是一种跨语言和跨平台的远程调用 (RPC) 技术。
- 客户端和服务端可以在不同的操作系统和编程语言环境下运行。
- 远程调用意味着一台计算机上的程序可以调用另一台计算机上的对象方法。

### WebService 的工作流程
1. **服务端暴露 API**：服务端向外界提供一个可通过 Web 调用的 API。
2. **标准类型系统**：为了实现跨平台和跨语言，需要一套标准的类型系统来描述 WebService 接口。
3. **数据交换**：用户通过这套标准解析如何调用接口，并将数据封装后发送到服务端。服务端也采用同一套标准进行解析和响应。

### WebService 的技术实现与支持
1. **SOAP (简单对象访问协议)**
   - SOAP 协议由特定的 HTTP 信息头和 XML 内容格式组成。
   - SOAP = HTTP 协议 + XML 数据格式

2. **WSDL (网络服务描述语言)**
   - WSDL 描述了与 SOAP 型 WebService 交互的基本元素，如函数、数据类型等。
   - WSDL 文件保存在 Web 服务器上，客户端需要知道该文件的 URL 才能调用服务。

3. **REST (表征性状态转移)**
   - REST 型 WebService 支持 JSON 和 XML 格式的数据交换。
   - 支持 HTTP 方法，如 GET、POST、PUT 和 DELETE。

4. **WADL (网络应用描述语言)**
   - WADL 类似于 WSDL，但主要用于 REST 型 WebService，描述与服务交互的基本元素。

### 应用场景
WebService 常用于异构系统的集成。例如，一个用 Java 开发的 OA 系统与一个用 C# 开发的 CRM 系统可以通过 WebService 进行交互。即使在同构系统中，也可以使用 WebService 来统一交互标准。虽然 JSON 也是一种常见的数据交换格式，但由于其跨域特性，可能会导致 JSONP 攻击等问题。

## 0x2 编写 WebService 服务

### 0x2.1 使用 JAVA 下的 CXF 框架编写
#### CXF 框架简介
CXF (Celtix + XFire) 是一个 Apache 项目，用于开发 WebService 服务端和客户端。

1. **安装依赖包**
   ```bash
   proxychains4 wget https://mirror-hk.koddos.net/apache/cxf/3.3.6/apache-cxf-3.3.6.tar.gz
   ```

2. **创建项目并导入依赖包**

   **ICalculator 接口类**
   ```java
   package com.xq17.cxf;
   import javax.jws.WebService;

   @WebService
   public interface ICalculator {
       int add(int a, int b);
       String concat(String a, String b);
   }
   ```

   **CalculatorImpl 实现类**
   ```java
   package com.xq17.cxf;
   import javax.jws.WebService;

   @WebService(endpointInterface="com.xq17.cxf.ICalculator", serviceName="Calcutator")
   public class CalculatorImpl implements ICalculator {
       @Override
       public int add(int a, int b) {
           return a + b;
       }

       @Override
       public String concat(String a, String b) {
           return a + b;
       }
   }
   ```

   **WebService 服务端类**
   ```java
   package com.xq17.cxf;
   import javax.xml.ws.Endpoint;

   public class WebService {
       public static void main(String[] args) {
           System.out.println("Web Service Start!");
           CalculatorImpl implementor = new CalculatorImpl();
           String address = "http://127.0.0.1:8081/calculator";
           Endpoint.publish(address, implementor);
           System.out.println("Web service started");
       }
   }
   ```

   **运行并访问 URL**
   成功运行后，可以通过浏览器访问指定的 URL 查看输出结果。

### 0x2.2 使用 ASP.NET 编写简单的 WebService
1. **新建 Web 服务 `WebService.asmx`**
   ```csharp
   using System;
   using System.Web.Services;

   [WebService(Namespace = "http://localhost/")]
   [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
   public class WebService : System.Web.Services.WebService {
       public WebService() {}

       [WebMethod]
       public string HelloWorld() {
           return "Hello World";
       }

       [WebMethod]
       public int Power(int num) {
           return num * num;
       }
   }
   ```

2. **发布到 IIS 并访问 URL**
   发布到 IIS 后，访问 `http://localhost:8089/WebService.asmx` 可以查看服务说明。点击服务说明会跳转到 WSDL 页面，展示如何使用该接口。

   访问 `http://localhost:8089/WebService.asmx?op=Power` 可以直接在浏览器中调用服务。以下是一个示例请求及其响应：

   **请求**
   ```http
   POST /WebService.asmx HTTP/1.1
   Host: localhost
   Content-Type: text/xml; charset=utf-8
   Content-Length: length
   SOAPAction: "http://localhost/Power"

   <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
     <soap:Body>
       <Power xmlns="http://localhost/">
         <num>5</num>
       </Power>
     </soap:Body>
   </soap:Envelope>
   ```

   **响应**
   ```http
   HTTP/1.1 200 OK
   Content-Type: text/xml; charset=utf-8
   Content-Length: length

   <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
     <soap:Body>
       <PowerResponse xmlns="http://localhost/">
         <PowerResult>25</PowerResult>
       </PowerResponse>
     </soap:Body>
   </soap:Envelope>
   ```

以上是关于 WebService 的基本介绍和编写示例。希望对您有所帮助！