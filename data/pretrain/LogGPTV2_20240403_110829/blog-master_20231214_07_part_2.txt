  tag int,       -- 标签      
  score float4,  -- 标签权重      
  limits int     -- 用这个标签获取多少条VID      
);      
```      
3、用户表     
```    
create unlogged table users (    
  uid int8 primary key,  -- 用户ID      
  lid int,  -- 用户所在的地区ID      
  tag_scores1 tag_score[],    -- 标签、权重、对应标签获取多少条. 也可以使用jsonb存储        
  tag_scores2 tag_score[],    -- 标签、权重、对应标签获取多少条 limit = 0的放这个字段. 业务更新tag_scores根据两个字段的结果来计算. 主要是减少PG计算量.       
  readlist jsonb  -- 已读VID, 和分区索引的分区数匹配, 用jsonb数组表示. jsonb[0]表示 abs(mod(hashint8(vid),64))=0 的vid数组      
  -- PS: 这个地方也可以使用hll或roaringbitmap数组类型代替JSONB, 可以压缩空间, 同时提升性能.
  -- 不用担心存不下, Jsonb可以存储1GiB内容, 而且支持压缩(Pglz, lz4...)  
);      
```    
写入数据: 1000万条记录      
- 1000万个用户,     
- 每个用户20个标签 (标签取值空间`1 ~ 100`),     
- limit大于0 的 标签5个(和为100, 也就是说每次请求推荐100条未读视频).     
- vid 已读列表 (vid `1 ~ 300万` 取值空间, 对应前面写入的300万个视频).   
    - 重度用户, 每个用户36.5万个已观看视频. userid号段: `1 ~ 1w` 
    - 中度用户, 每个用户1万个已观看视频. userid号段: `1w ~ 100w` 
    - 一般用户, 每个用户2千个已观看视频. userid号段: `100w ~ 1000w` 
- lid (用户所处的地区码) 取值空间对应前面的 `1 ~ 360`      
```      
insert into users   
-- 重度用户, userid号段: `1 ~ 1w` 
-- 每个用户的已观看视频都是36.5万个. 
select generate_series(1,10000), ceil(random()*360),      
-- 每个用户20个标签 (标签取值空间`1 ~ 100`), limit大于0的标签5个(和为100, 也就是说每次请求推荐100条未读视频).      
array(      
  select row(ceil(random()*100), random()*10, 40)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 20)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 15)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 15)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 10)::tag_score       
),      
-- limit = 0的标签15个      
array (      
  select row(ceil(random()*100), random()*10, 0)::tag_score from generate_series(1,15)      
),     
-- 重度用户
-- 每个用户的已观看视频都是36.5万个. (vid 取值空间 `1 ~ 300万`, 对应前面写入的300万个视频).     
-- 聚合为jsonb数组, 每个vids列表代表 mod(x,64)=i 的vids.  对应partial index, 用于减少已读的cpu过滤, 提升搜索性能.      
(    
select jsonb_agg(x) as readlist from    
  (      
    select array (select x from     
                     (select ceil(random()*3000000)::int8 x from generate_series(1,365000)) t     
                   where abs(mod(hashint8(x),64)) = i     
                 ) x     
    from generate_series(0,63) i     
  ) t    
) ;  
insert into users    
-- 中度用户, userid号段: `1w ~ 100w`  
-- 每个用户的已观看视频都是1万个. 
select generate_series(10001, 1000000), ceil(random()*360),      
-- 每个用户20个标签 (标签取值空间`1 ~ 100`), limit大于0的标签5个(和为100, 也就是说每次请求推荐100条未读视频).      
array(      
  select row(ceil(random()*100), random()*10, 40)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 20)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 15)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 15)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 10)::tag_score       
),      
-- limit = 0的标签15个      
array (      
  select row(ceil(random()*100), random()*10, 0)::tag_score from generate_series(1,15)      
),     
-- 中度用户
-- 每个用户的已观看视频都是1万个. (vid 取值空间 `1 ~ 300万`, 对应前面写入的300万个视频).     
-- 聚合为jsonb数组, 每个vids列表代表 mod(x,64)=i 的vids.  对应partial index, 用于减少已读的cpu过滤, 提升搜索性能.      
(    
select jsonb_agg(x) as readlist from    
  (      
    select array (select x from     
                     (select ceil(random()*3000000)::int8 x from generate_series(1,10000)) t     
                   where abs(mod(hashint8(x),64)) = i     
                 ) x     
    from generate_series(0,63) i     
  ) t    
) ;  
insert into users    
-- 一般用户, userid号段: `100w ~ 1000w` 
-- 每个用户的已观看视频都是2000个. 
select generate_series(1000001, 10000000), ceil(random()*360),      
-- 每个用户20个标签 (标签取值空间`1 ~ 100`), limit大于0的标签5个(和为100, 也就是说每次请求推荐100条未读视频).      
array(      
  select row(ceil(random()*100), random()*10, 40)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 20)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 15)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 15)::tag_score       
  union all      
  select row(ceil(random()*100), random()*10, 10)::tag_score       
),      
-- limit = 0的标签15个      
array (      
  select row(ceil(random()*100), random()*10, 0)::tag_score from generate_series(1,15)      
),     
-- 一般用户
-- 每个用户的已观看视频都是2000个. (vid 取值空间 `1 ~ 300万`, 对应前面写入的300万个视频).     
-- 聚合为jsonb数组, 每个vids列表代表 mod(x,64)=i 的vids.  对应partial index, 用于减少已读的cpu过滤, 提升搜索性能.      
(    
select jsonb_agg(x) as readlist from    
  (      
    select array (select x from     
                     (select ceil(random()*3000000)::int8 x from generate_series(1,2000)) t     
                   where abs(mod(hashint8(x),64)) = i     
                 ) x     
    from generate_series(0,63) i     
  ) t    
) ;  
```
以上导入的数据, 相当于平台已经拥有 315.5 亿次有效视频观看, 仅流量广告费就 315.5 亿.  
- 315.5 = `36.5*1 + 1*99 + 0.2*900` 
- 参考知乎的信息: 目前某音信息流广告的一个CPC的价格最低为1元，即如果广告被点击1000次，则需要花费1000元
    - https://www.zhihu.com/question/319130381   
存储空间占用情况如下, 190GB:      
```
postgres=# \l+
List of databases
-[ RECORD 1 ]-----+-------------------------------------------
Name              | postgres
Owner             | postgres
Encoding          | UTF8
Collate           | C
Ctype             | en_US.UTF8
Access privileges | 
Size              | 190 GB
Tablespace        | pg_default
Description       | default administrative connection database
postgres=# \dt+
                                          List of relations
 Schema |        Name         | Type  |  Owner   | Persistence | Access method |  Size  | Description 
--------+---------------------+-------+----------+-------------+---------------+--------+-------------
 public | t_videos_local_pool | table | postgres | unlogged    | heap          | 470 MB | 
 public | t_videos_top_pool   | table | postgres | unlogged    | heap          | 404 MB | 
 public | t_videos_vip_pool   | table | postgres | unlogged    | heap          | 404 MB | 
 public | users               | table | postgres | unlogged    | heap          | 187 GB | 
(4 rows)
```    
4、根据用户的喜好标签, 从本地池、全国池、VIP池 推荐相关视频      
根据用户的有效权重标签(tag_scores1), 按推荐指数倒序提取 未读视频100条 (其中从全国池取50%, 本地池取30%, VIP池取20%) 。     
以 uid=1 , 搜索partian index 0号分区为例. (注意JSONB数组的下标从0开始, 但是array类型的下标是从1开始的. 很容易搞混). SQL:      
```      
select       
  (      
    select array_agg(vid) from       
    (      
      -- 全国视频池     
      select vid from t_videos_top_pool t1       
      -- 取出与用户喜爱的标签匹配的视频     
      where t1.tag=t.tag       
      -- 过滤已读VID , 使用partian index 0号分区.
      -- 注意JSONB数组的下标从0开始, 但是array类型的下标是从1开始的. 很容易搞混.       
      and t1.vid not in (select jsonb_array_elements_text( readlist[0] )::int8 from users where uid=1)      
      -- 使用partian index 0号分区      
      and abs(mod(hashint8(vid),64)) = 0      
      -- 按视频推荐权重逆序取出视频      
      order by t1.score desc       
      -- limit 条数来自tag_scores1.limits, 其中全国池占比 50%      
      limit ceil(t.limits*0.5)        
    ) x   -- 全国池limit占比 50%      
  ) as top_pool,         
  (      
    select array_agg(vid) from       
    (      
      -- 本地视频池    
      select vid from t_videos_local_pool t1       
      where t1.tag=t.tag       
      -- 本地池, 增加一个查询条件: 查询与本地用户地域匹配的视频      
      and t1.lid = (select lid from users where uid=1)      
      and t1.vid not in (select jsonb_array_elements_text( readlist[0] )::int8 from users where uid=1)      
      and abs(mod(hashint8(vid),64)) = 0      
      order by t1.score desc       
      limit ceil(t.limits*0.3)      
    ) x   -- 本地池limit占比 30%       