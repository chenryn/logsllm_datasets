easiest to ﬁnd better overlay routes for paths across the Asia and
Europe clusters.
• Delay spaces derived from existing Internet topology models are
dramatically different from the Internet delay space. Understand-
ing these differences can help practitioners to design better evalua-
tion methodologies, more correctly interpret their results, and avoid
drawing incorrect conclusions.
4.
INTERNET DELAY SPACE MODELING
Using measured Internet delay data to drive distributed system
simulations allows system designers to evaluate their solutions un-
der realistic conditions. However, there are two potential concerns.
First of all, our ability to measure a large portion of the Internet de-
lay space is limited by the time required and the difﬁculty of dealing
with network outages, measurement errors and accidentally trig-
gered intrusion alerts. The second concern is that the O(N 2) stor-
age requirement of a measured delay matrix representation does not
scale.
To address these concerns, we develop techniques to model a
measured Internet delay space. This model adequately preserves
the relevant properties of the measured data, and it has only O(N )
storage overhead. Later in this paper, we will also present tech-
niques to synthesize realistic delay data for a much larger delay
space than can be measured in practice so as to enable realistic
large-scale simulations.
4.1 Building Block Techniques
Technique 1: Low-dimensional Euclidean embedding - The ﬁrst
technique we use is to model an Internet delay space using a low-
dimensional Euclidean embedding. That is, we compute Euclidean
coordinates for each node and use Euclidean distances to model
the delays in the delay space. Such a Euclidean map has a scalable
O(N ) representation.
Although several techniques exist to compute a Euclidean em-
bedding robustly [24, 7, 35, 6, 19, 43, 40, 39], and previous studies
have shown that an Internet delay space can be overall well approx-
imated by a Euclidean embedding with as little as 5 dimensions,
such an embedding tends to inﬂate the small values (
30ms, the procedure terminates. Otherwise, the coordinates of
node m and n are adjusted so that ˆdmn becomes identical to dmn.
Then, (m, n) is removed from S and the procedure repeats. The
effect of this procedure is that small values in the measured delay
space that are mildly distorted in the initial Vivaldi 5D Euclidean
embedding are well preserved by the ﬁnal set of adjusted Euclidean
coordinates. These adjusted Euclidean coordinates serve as the
starting point for our model.
n
o
i
t
i
u
b
i
r
t
s
D
e
v
i
t
l
a
u
m
u
C
1
0.8
0.6
0.4
0.2
0
0
Measured 800
Measured 1600
Measured 2400
Measured 3200
20
40
60
80
Average Type 1 Violation Ratio (%)
n
o
i
t
i
u
b
i
r
t
s
D
e
v
i
t
l
a
u
m
u
C
1
0.8
0.6
0.4
0.2
0
Measured 800
Measured 1600
Measured 2400
Measured 3200
200
Average Type 2 Violation Ratio (%)
400
600
800
(a)
(b)
Figure 6: Triangle inequality violation ratio distributions. (a) Type 1 violations. (b) Type 2 violations.
Measured
5D
5D no missing
x 10−3
5
4
3
2
1
y
t
i
l
i
b
a
b
o
r
P
0
0
200
400
600
Delay (ms)
800
1000
Figure 7: Delay distribution of the 5D Euclidean map.
Cluster 2
j
150ms
Cluster 3
i
Cluster 1
Euclidean model
Hcluster 1&2,150ms
Type-1
150ms
P 1+ P 3(P 1/(P 1+ P 2) -1)
1-P1-P2+P3 No global distortion, return 150ms
P
2+P
3(P
2/(P
1+P
2) -1)
Hcluster 1&2,150ms
Type-2
P1 = Pcluster 1&2, 150ms
P2 = Pcluster 1&2, 150ms
P3 = Pcluster 1&2, 150ms
Type-1
Type-2
Type-1&2
150ms
Figure 8: Global distortion technique.
Figure 7 shows the delay distributions for (1) the measured data,
(2) all the delays in the 5D Euclidean map, including the modeled
values for the missing data, and (3) the delays in the 5D Euclidean
map corresponding to the available measured data. We can see that
the 5D Euclidean map preserves the distribution of the measured
delay values well. In addition, the modeled values for the missing
data do not skew the overall distribution.
However, a Euclidean embedding cannot preserve triangle in-
equality violations. The Euclidean map also fails to preserve the
high in-degree of some nodes in the nearest neighbor directed graph.
This is because a node cannot have a high number of nearest neigh-
bors in a low-dimensional Euclidean space. Speciﬁcally, the maxi-
mal in-degree is 12 in the measured delay space, and only 5 in the
5D map. To address these limitations of the basic 5D Euclidean
model, we use two additional techniques in order to preserve the
properties lost as a result of the Euclidean embedding.
Technique 2: Global distortion - The basic technique to create tri-
angle inequality violations in the 5D Euclidean model is to distort
the delays computed from the 5D embedding. Since the frequency
of triangle inequality violations in the measured data is relatively
small, it sufﬁces to distort only a small subset of node pairs or
edges.
The idea is to take into consideration that edges between differ-
ent pairs of global clusters have very different triangle inequality
violation behavior (as can be seen in Figure 5), identify the edges
in each pair of clusters that cause violations above a certain sever-
ity threshold, characterize the distortion distribution for these edges
when they are mapped into the 5D Euclidean model, then use this
same distortion distribution to introduce distortions when delays
are generated from the 5D embedding. To ensure that the model
always produces the same delay for a given pair of nodes, it uses
the node identiﬁers to generate deterministic pseudo-random dis-
tortions. By choosing different severity thresholds, we can vary the
number of edges that get distorted in the model and experimentally
determine the threshold that best matches the empirical data. An
overview of the technique is illustrated in Figure 8.
dij
dij
> 1
|dik−dkj|
We deﬁne a violation severity threshold R. A violation caused
by an edge ij is severe if for some node k, dik+dkj
< R (called
R (called Type 2 violation).
Type 1 violation), or if
For each global cluster pair g, all edges with the same 5D Eu-
clidean model delay l (rounded down to the nearest 1ms) form a
subgroup. For each subgroup (g, l), we compute the fraction of
edges in this subgroup that are involved in severe Type 1 viola-
, and a histogram H T ype−1
tions in the measured data, P T ype−1
to characterize the real delay distribution of those severe violation
edges. Similarly, for Type 2 violations, we compute the fraction
P T ype−2
. We also compute the frac-
tion of edges that incur severe Type 1 and Type 2 violations simul-
taneously, P T ype−1&2
. This extra statistical information incurs an
additional constant storage overhead for the model.
and the histogram H T ype−2
g,l
g,l
g,l
g,l
g,l
(
g,lij
g,lij
g,lij
P T ype−1
g,lij
, P T ype−2
, P T ype−1&2
With these statistics, the delay between node i and j is then com-
puted from the model as follows. Draw a pseudo-random number
ρ in [0,1] based on the IDs of i and j. Let the Euclidean dis-
tance between i and j be lij and the cluster-cluster group be g.
Based on P T ype−1
, and using ρ as a ran-
dom variable, decide whether the edge ij should be treated as a
·
severe Type 1 violation (with probability P T ype−1
+ P T ype−1&2
− 1)), or a severe Type 2 violation (with prob-
P T ype−1
g,lij
− 1)), or to
ability P T ype−2
return the value lij without distortion. If the edge ij is treated as a
severe Type 1 violation, then we use the histogram H T ype−1
and ρ
to draw a value from the histogram and return that value. Similarly,
if the edge is treated as a severe Type 2 violation, then we use the
histogram H T ype−2
+ P T ype−1&2
P T ype−2
g,lij
P T ype−1
g,lij
+P T ype−2
+P T ype−2
instead.
· (
g,lij
g,lij
g,lij
g,lij
g,lij
g,lij
g,lij
By experimenting with different threshold values R, we have de-
termined that a value of 0.85 produces Type 1 and Type 2 violation
g,Dij
ri
ti
Local cluster center i, size = 6
Member of 6-nearest neighbor
set, Xi
Delay to node i gets distorted
to ti
bin1
bin2
bin3
First half of data
Second half of data
First intensity component C1
Support S1 = {bin2}
Remaining support R1 = {bin2}
R1 covers 75% of second half
Weight p1 = 0.75
Second intensity component C2
Support S2 = {bin1, bin2, bin3}
Remaining support R2 = {bin1, bin3}
R2 covers 25% of second half
Weight p2 = 0.25
C1
bin2=4x0.
75
C2
bin1=1x0.25
C2
bin2=2x0.25
C2
bin3=1x0.25
Sum of component intensities
Intensitybin1 = 0.25
Intensitybin2 = 3.5
Intensitybin3 = 0.25
Figure 9: Local distortion technique.
Figure 11: Computing intensities in Euclidean map synthesis
technique.
distributions similar to those observed in the measured data. This
is also the threshold we use in the remainder of this paper.
Technique 3: Local distortion - To preserve the local clustering
properties, we introduce additional local distortion. The idea is to
simply pull some nodes within a radius around a local cluster cen-
ter closer to create the needed in-degree, as illustrated in Figure 9.
From the nearest neighbor directed graph analysis on the measured
data, we identify local cluster centers and note their sizes. Sup-
pose a local cluster center node i has a cluster size of si in the
original data. We identify the set of its si nearest neighbors, Xi,
in the model after global distortion. Then, we compute a radius
(djk) − .
ri as maxj∈Xi
Currently,  is set to 0.01 · minj,k∈Xi
(djk). Then we associate the
values ri and ti with node i in the model. ri is essentially the radius
within which distortion may be necessary. ti is the delay needed to
beat the smallest delay among the nodes in Xi. This additional
information adds a constant storage overhead.
(dij), and a threshold ti as minj,k∈Xi
The delay between node i and j is then computed as follows.
Suppose the delay for the edge ij after global distortion is lij. If
neither i nor j is a local cluster center, lij is returned. Suppose
i is a local cluster center and j is not, then if lij ≤ ri, we re-
turn min(ti, lij ); otherwise, we return lij. The ti threshold is used
to ensure that the nodes in Xi cannot choose one another as their
nearest neighbors. After the distortion, they will choose i as their
nearest neighbor unless there is a closer node outside of the radius
ri. If both i and j are local cluster centers, we pick the one with the
smaller node identiﬁer as the center and perform the above steps.
4.2 Modeling Framework
Based on the basic techniques described above, the overall frame-
work for modeling a measured Internet delay space is as follows:
Step 1. Perform global clustering on the measured data to assign
nodes to major clusters. Perform nearest neighbor directed graph
analysis to identify local cluster centers and their sizes. Step 2.
Compute a 5D Euclidean embedding of the measured data using a
robust method. Then, adjust coordinates to preserve small values.
Step 3. For each cluster-cluster group g and Euclidean model de-
lay l, compute the global distortion statistics P T ype−1
, P T ype−2
,
P T ype−1&2
using a severe violation thresh-
old R. For each local cluster center i, compute the local distortion
statistics ri and ti. Step 4. At this point, the original measured data
is no longer needed. To compute the model delay between node i
and j, ﬁrst compute the Euclidean model delay, then apply global
distortion if necessary, and ﬁnally apply local distortion if neces-
sary. Return ﬁnal value. The total storage overhead of the model
is O(N ) and calculating the delay of an edge at run time is simple
and has constant cost.
, H T ype−1
g,l
, H T ype−2
g,l
g,l
g,l
g,l
4.3 Evaluating the Model
We evaluate the effectiveness of our modeling framework by
comparing the properties found in the measured data against prop-
erties in the resulting model. Figure 10 presents our results. Over-
all, we can see that the model preserves all the characteristics of
the delay space that we had identiﬁed. As expected, there are some
small discrepancies. As we will show in the rest of this paper, these
small discrepancies do not negatively impact the ability to synthe-
size realistic artiﬁcial delay spaces.
5.
INTERNET DELAY SPACE SYNTHESIS
In this section, we build upon our empirical understanding of
the Internet delay space and our delay space modeling techniques
and investigate additional techniques to enable artiﬁcial synthesis
of a realistic delay space. The goal is to allow synthesis of de-
lay spaces at scales that exceed our capability to measure Internet
delays. Such a tool is valuable for distributed system design and
evaluation.
5.1 Building Block Techniques
The new techniques introduced in this section exploit the scaling
properties found in the measured Internet delay space to enable the
synthesis of a larger delay space.
Technique 4: Euclidean map synthesis - Given a 5D Euclidean
map of an Internet delay space, we seek to capture its locality and
growth characteristics so that we can synthesize an artiﬁcial map
based on these characteristics and create realistic structure in the
synthesized delay space.
A simple idea is to divide the Euclidean space into equal sized
hyper-cubes, count the number of points in each hyper-cube, and
use these counts as relative intensities. With appropriate scaling of
the relative intensities, one can synthesize an artiﬁcial map of a cer-
tain size by generating random points in each hyper-cube accord-
ing to the intensities using an inhomogeneous Poisson point pro-
cess [20, 31]1. Indeed, this simple method can mimic the point dis-
tribution of the original map and generate a realistic overall delay
distribution and global clustering structure. However, this method
ignores the growth characteristics in the data. As a result, synthetic
points can only appear in hyper-cubes where points were originally
found.
To incorporate growth characteristics, the idea is to introduce
uncertainties in the locations of each point and compute intensities
that predict growth. The idea is best explained with a simple ex-
ample illustrated in Figure 11. In the example, there are 8 points in
1The number of points lying in any two disjoint sets in space are
independent random numbers distributed according to a Poisson
law with mean given by the intensity.