# shell 编程
---
**shell 和 shell 脚本的区别**
- shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。
- shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但是，shell 和 shell script 是两个不同的概念。
**常见问题**
-  Linux 下运行 bash 脚本显示": /usr/bin/env: "bash\r": 没有那个文件或目录
	这主要是因为 bash 后面多了 \r 这个字符的原因.在 linux 终端下,输出 \r 会什么都不显示,只是把光标移到行首.于是终端虽然输出了 /usr/bin/env bash,但是碰到\r后,光标会被移到行首,接着输出了:No such file or directory 把前面的覆盖掉了.于是出现了那个莫名其妙的出错信息了
	一般来说这是下载在 windows 下载 github 脚本后会遇到的问题,下载压缩包,在 linux 中解压,或直接使用 linux 下载
	或者用 vim 打开 sh 脚本文件, 重新设置文件的格式
    ```vim
	:set ff=unix
   :wq!
	```
- linux 运行 shell 出现未预期的符号 `$'do\r'' 附近有语法错误
	看上面应该是语法错误,但无论怎么改还是报错,经过一番探索发现,自己的文件是从 windows 里面拷贝到 linux 的,可能是两种系统格式不一样.
	解决方法如下:
	1. 打开 notepad++ 编辑 .sh 文件
   2. notepad++ 右下角将 windows 模式改为 linux 模式
**source 命令与 `.` 的区别**
- source 命令是 bash shell 的内置命令,从 C Shell 而来.
- source 命令的另一种写法是点符号,用法和 source 相同,从 Bourne Shell 而来.
- source 命令可以强行让一个脚本去立即影响当前的环境.
- source 命令会强制执行脚本中的全部命令,而忽略文件的权限.
- source 命令通常用于重新执行刚修改的初始化文件,如 .bash_profile 和 .profile 等等.
- source 命令可以影响执行脚本的父 shell 的环境,而 export 则只能影响其子 shell 的环境.
- source a.sh 同直接执行 ./a.sh 有什么不同呢,比如你在一个脚本里 `export $KKK=111` ,如果你用 ./a.sh 执行该脚本,执行完毕后,你运行 `echo $KKK` ,发现没有值,如果你用 `source` 来执行 ,然后再 `echo` ,就会发现 KKK=111.因为调用 ./a.sh 来执行 shell 是在一个子 shell 里运行的,所以执行后,结果并没有反应到父 shell 里,不过 source 不同,他就是在本 shell 中执行的,所以能看到结果.
**sast 工具**
- https://github.com/koalaman/shellcheck
**资源教程**
- [dylanaraps/pure-bash-bible](https://github.com/dylanaraps/pure-bash-bible#get-the-username-of-the-current-user)
- [wangdoc/bash-tutorial](https://github.com/wangdoc/bash-tutorial) - Bash 教程
- [穷佐罗的Linux书](https://zorrozou.github.io/)
**相关文章**
- [10分钟学会Bash调试](https://mp.weixin.qq.com/s/MQjqu55BN6LqSsIAvevRQA)
- [如何并发执行Linux命令](https://mp.weixin.qq.com/s/L3u2e-GKl_yL3saJMMFazA)
- [终于知道 Shell 中单引号双引号的区别了](https://mp.weixin.qq.com/s/tyHIlRsg1rYjw-E_h-C2rA)
- [Bash编程基础知识](https://mp.weixin.qq.com/s/tSWnoO3IAET3C7iYY7ns6Q)
- [SHELL编程之执行过程](https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-zhi-xing-guo-cheng.html)
- [SHELL编程之语法基础](https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-yu-fa-ji-chu.html)
- [SHELL编程之执行环境](https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-zhi-xing-huan-jing.html)
- [SHELL编程之特殊符号](https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-te-shu-fu-hao.html)
- [SHELL编程之内建命令](https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-nei-jian-ming-ling.html)
- [SHELL编程之常用技巧](https://zorrozou.github.io/docs/books/shellbian-cheng-zhi-chang-yong-ji-qiao.html)
---
## 大纲
* **[编译](#编译)**
* **[示例](#示例)**
* **[变量](#变量)**
* **[字符串](#字符串)**
* **[数组](#数组)**
* **[传递参数](#传递参数)**
* **[基本运算符](#基本运算符)**
* **[基础命令](#基础命令)**
   * [echo命令](#echo命令)
   * [printf命令](#printf命令)
   * [test命令](#test命令)
* **[流程控制](#流程控制)**
   * [if](#if)
   * [for](#for)
   * [while](#while)
   * [until](#until)
   * [case](#case)
   * [跳出循环](#跳出循环)
* **[函数](#函数)**
* **[输入输出重定向](#输入输出重定向)**
* **[文件包含](#文件包含)**
---
## 编译
```bash
mount -t tmpfs tmpfs ~/build -o size=1G		# 把文件放到内存上做编译
make -j		# 并行编译
ccache		# 把编译的中间结果进行缓存,以便在再次编译的时候可以节省时间.
# 在 /usr/local/bin 下建立 gcc,g++,c++,cc的 symbolic link,链到 /usr/bin/ccache 上.总之确认系统在调用 gcc 等命令时会调用到 ccache 就可以了(通常情况下 /usr/local /bin 会在 PATH 中排在 /usr/bin 前面).
```
**distcc**
使用多台机器一起编译
```bash
/usr/bin/distccd  --daemon --allow 10.64.0.0/16 # 默认的 3632 端口允许来自同一个网络的 distcc 连接.
export DISTCC_HOSTS="localhost 10.64.25.1 10.64.25.2 10.64.25.3"
# 把 g++,gcc 等常用的命令链接到 /usr/bin/distcc 上
make -j4		# 在 make 的时候,也必须用 -j 参数,一般是参数可以用所有参用编译的计算机 CPU 内核总数的两倍做为并行的任务数.
distccmon-text	# 查看编译任务的分配情况.
```
---
## 示例
```sh
#!/bin/sh                   # 第1行：指定脚本解释器，这里是用 /bin/sh 做解释器的
cd ~                        # 第2行：切换到当前用户的 home 目录
mkdir shell_tut             # 第3行：创建一个目录 shell_tut
cd shell_tut                # 第4行：切换到 shell_tut 目录
for ((i=0; i 注意，赋值号 = 的周围不能有空格!!!!!!!!!!!!!!!!!!!!!!!!!!
定义变量时，变量名不加美元符号（$），如：
```sh
name=test123    # 赋值
echo $name      # 引用
echo ${name}    # 变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界,推荐给所有变量加上花括号，这是个好的编程习惯。
```
使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。
```sh
#!/bin/bash
name=test123
readonly name
name=test321    # name: readonly variable
```
使用 unset 命令可以删除变量。
```sh
name=test123
unset name
echo $name
```
**变量类型**
运行 shell 时，会同时存在三种变量：
1. 局部变量 : 局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。
2. 环境变量 : 所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
3. shell 变量 : 由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行
**注释**
以“#”开头的行就是注释，会被解释器忽略，sh 里没有多行注释，只能每一行加一个 # 号。就像这样：
```sh
#1
##2
###3
####4
```
---
## 字符串
字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟 PHP 类似。
**单引号**
```sh
str='this is a string'
```
单引号字符串的限制：
- 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的
- 单引号字串中不能出现单引号（对单引号使用转义符后也不行）
**双引号**
```sh
your_name='bog'
str="Hello, I know your are \"$your_name\"! \n"
echo -e $str
```
双引号的优点：
- 双引号里可以有变量
- 双引号里可以出现转义字符
**字符串操作**
- **拼接字符串**
    ```sh
    your_name="bog"
    # 使用双引号拼接
    greeting="hello, "$your_name" !"
    greeting_1="hello, ${your_name} !"
    echo $greeting  $greeting_1
    # 使用单引号拼接
    greeting_2='hello, '$your_name' !'
    greeting_3='hello, ${your_name} !'
    echo $greeting_2  $greeting_3
    ```
- **获取字符串长度**
    ```sh
    string="abcd"
    echo ${#string}     # 输出：4
    ```
- **提取子字符串**
    ```sh
    string="github.com is a great website"
    echo ${string:1:4}  # 输出：ithu
    ```
- **查找子字符串**
    ```sh
    string="github.com is a great website"
    echo `expr index "$string" is`  # 输出：2，这个语句的意思是：找出字符串is在这段话中的位置
    ```
---
## 数组
bash 支持一维数组（不支持多维数组），并且没有限定数组的大小。
类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。
**定义数组**
在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
```
数组名=(值1 值2 ... 值n)
```
例如
```sh
array_name=(value0 value1 value2 value3)
# 还可以单独定义数组的各个分量
array_name[0]=value0
array_name[1]=value1
array_name[n]=valuen
# 可以不使用连续的下标，而且下标的范围没有限制。
```
**读取数组**
读取数组元素值的一般格式是
```
${数组名[下标]}
```
例如
```sh
valuen=${array_name[n]}
# 使用 @ 符号可以获取数组中的所有元素
echo ${array_name[@]}
```
**获取数组的长度**
获取数组长度的方法与获取字符串长度的方法相同
```sh
# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}
```
---
## 传递参数
我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名：
```sh
#!/bin/bash
echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";
```
```bash
chmod +x test.sh
./test.sh 1 2 3
Shell 传递参数实例！
第一个参数为：1
参数个数为：3
传递的参数作为一个字符串显示：1 2 3
```
特殊字符用来处理参数
- `$#` : 传递到脚本的参数个数
- `$*` : 以一个单字符串显示所有向脚本传递的参数。 如"$*"用“"”括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
- `$$` : 脚本运行的当前进程 ID 号
- `$!` : 后台运行的最后一个进程的 ID 号
- `$@` : 与 $* 相同，但是使用时加引号，并在引号中返回每个参数。 如"$@"用“"”括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
- `$-` : 显示 Shell 使用的当前选项，与 set 命令功能相同。
- `$?` : 显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。
```sh
#!/bin/bash
echo "Shell 传递参数实例！";
echo "第一个参数为：$1";
echo "参数个数为：$#";
echo "传递的参数作为一个字符串显示：$*";
```
```bash
chmod +x test.sh
./test.sh 1 2 3
Shell 传递参数实例！
第一个参数为：1
参数个数为：3
传递的参数作为一个字符串显示：1 2 3
```
传递的参数中如果包含空格，应该使用单引号或者双引号将该参数括起来，以便于脚本将这个参数作为整体来接收。
**`$*` 与 `$@` 区别**
- 相同点：都是引用所有参数。
- 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。
```sh
#!/bin/bash
echo "-- \$* 演示 ---"
for i in "$*"; do
    echo $i
done
echo "-- \$@ 演示 ---"
for i in "$@"; do
    echo $i
done
```
```
$ chmod +x test.sh
$ ./test.sh 1 2 3