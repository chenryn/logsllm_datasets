the per-process limit on the number of open file descriptors has been reached.
.tp
.b enametoolong
the length of
.i name
exceeds
.br path_max .
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.b enoent
an attempt was made to
.br shm_open ()
a
.i name
that did not exist, and
.b o_creat
was not specified.
.tp
.b enoent
an attempt was to made to
.br shm_unlink ()
a
.i name
that does not exist.
.sh versions
these functions are provided in glibc 2.2 and later.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br shm_open (),
.br shm_unlink ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.pp
posix.1-2001 says that the group ownership of a newly created shared
memory object is set to either the calling process's effective group id
or "a system default group id".
posix.1-2008 says that the group ownership
may be set to either the calling process's effective group id
or, if the object is visible in the filesystem,
the group id of the parent directory.
.sh notes
posix leaves the behavior of the combination of
.b o_rdonly
and
.b o_trunc
unspecified.
on linux, this will successfully truncate an existing
shared memory object\(emthis may not be so on other unix systems.
.pp
the posix shared memory object implementation on linux makes use
of a dedicated
.br tmpfs (5)
filesystem that is normally mounted under
.ir /dev/shm .
.sh examples
the programs below employ posix shared memory and posix unnamed semaphores
to exchange a piece of data.
the "bounce" program (which must be run first) raises the case
of a string that is placed into the shared memory by the "send" program.
once the data has been modified, the "send" program then prints
the contents of the modified shared memory.
an example execution of the two programs is the following:
.pp
.in +4n
.ex
$ \fb./pshm_ucase_bounce /myshm &\fp
[1] 270171
$ \fb./pshm_ucase_send /myshm hello\fp
hello
.ee
.in
.pp
further detail about these programs is provided below.
.\"
.ss program source: pshm_ucase.h
the following header file is included by both programs below.
its primary purpose is to define a structure that will be imposed
on the memory object that is shared between the two programs.
.pp
.in +4n
.ex
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define errexit(msg)    do { perror(msg); exit(exit_failure); \e
                        } while (0)
#define buf_size 1024   /* maximum size for exchanged string */
/* define a structure that will be imposed on the shared
   memory object */
struct shmbuf {
    sem_t  sem1;            /* posix unnamed semaphore */
    sem_t  sem2;            /* posix unnamed semaphore */
    size_t cnt;             /* number of bytes used in \(aqbuf\(aq */
    char   buf[buf_size];   /* data being transferred */
};
.ee
.in
.\"
.ss program source: pshm_ucase_bounce.c
the "bounce" program creates a new shared memory object with the name
given in its command-line argument and sizes the object to
match the size of the
.i shmbuf
structure defined in the header file.
it then maps the object into the process's address space,
and initializes two posix semaphores inside the object to 0.
.pp
after the "send" program has posted the first of the semaphores,
the "bounce" program upper cases the data that has been placed
in the memory by the "send" program and then posts the second semaphore
to tell the "send" program that it may now access the shared memory.
.pp
.in +4n
.ex
/* pshm_ucase_bounce.c
   licensed under gnu general public license v2 or later.
*/
#include 
#include "pshm_ucase.h"
int
main(int argc, char *argv[])
{
    if (argc != 2) {
        fprintf(stderr, "usage: %s /shm\-path\en", argv[0]);
        exit(exit_failure);
    }
    char *shmpath = argv[1];
    /* create shared memory object and set its size to the size
       of our structure. */
    int fd = shm_open(shmpath, o_creat | o_excl | o_rdwr,
                      s_irusr | s_iwusr);
    if (fd == \-1)
        errexit("shm_open");
    if (ftruncate(fd, sizeof(struct shmbuf)) == \-1)
        errexit("ftruncate");
    /* map the object into the caller\(aqs address space. */
    struct shmbuf *shmp = mmap(null, sizeof(*shmp),
                               prot_read | prot_write,
                               map_shared, fd, 0);
    if (shmp == map_failed)
        errexit("mmap");
    /* initialize semaphores as process\-shared, with value 0. */
    if (sem_init(&shmp\->sem1, 1, 0) == \-1)
        errexit("sem_init\-sem1");
    if (sem_init(&shmp\->sem2, 1, 0) == \-1)
        errexit("sem_init\-sem2");
    /* wait for \(aqsem1\(aq to be posted by peer before touching
       shared memory. */
    if (sem_wait(&shmp\->sem1) == \-1)
        errexit("sem_wait");
    /* convert data in shared memory into upper case. */
    for (int j = 0; j cnt; j++)
        shmp\->buf[j] = toupper((unsigned char) shmp\->buf[j]);
    /* post \(aqsem2\(aq to tell the peer that it can now
       access the modified data in shared memory. */
    if (sem_post(&shmp\->sem2) == \-1)
        errexit("sem_post");
    /* unlink the shared memory object. even if the peer process
       is still using the object, this is okay. the object will
       be removed only after all open references are closed. */
    shm_unlink(shmpath);
    exit(exit_success);
}
.ee
.in
.\"
.ss program source: pshm_ucase_send.c
the "send" program takes two command-line arguments:
the pathname of a shared memory object previously created by the "bounce"
program and a string that is to be copied into that object.
.pp
the program opens the shared memory object
and maps the object into its address space.
it then copies the data specified in its second argument
into the shared memory,
and posts the first semaphore,
which tells the "bounce" program that it can now access that data.
after the "bounce" program posts the second semaphore,
the "send" program prints the contents of the shared memory
on standard output.
.pp
.in +4n
.ex
/* pshm_ucase_send.c
   licensed under gnu general public license v2 or later.
*/
#include 
#include "pshm_ucase.h"
int
main(int argc, char *argv[])
{
    if (argc != 3) {
        fprintf(stderr, "usage: %s /shm\-path string\en", argv[0]);
        exit(exit_failure);
    }
    char *shmpath = argv[1];
    char *string = argv[2];
    size_t len = strlen(string);
    if (len > buf_size) {
        fprintf(stderr, "string is too long\en");
        exit(exit_failure);
    }
    /* open the existing shared memory object and map it
       into the caller\(aqs address space. */
    int fd = shm_open(shmpath, o_rdwr, 0);
    if (fd == \-1)
        errexit("shm_open");
    struct shmbuf *shmp = mmap(null, sizeof(*shmp),
                               prot_read | prot_write,
                               map_shared, fd, 0);
    if (shmp == map_failed)
        errexit("mmap");
    /* copy data into the shared memory object. */
    shmp\->cnt = len;
    memcpy(&shmp\->buf, string, len);
    /* tell peer that it can now access shared memory. */
    if (sem_post(&shmp\->sem1) == \-1)
        errexit("sem_post");
    /* wait until peer says that it has finished accessing
       the shared memory. */
    if (sem_wait(&shmp\->sem2) == \-1)
        errexit("sem_wait");
    /* write modified data in shared memory to standard output. */
    write(stdout_fileno, &shmp\->buf, len);
    write(stdout_fileno, "\en", 1);
    exit(exit_success);
}
.ee
.in
.sh see also
.br close (2),
.br fchmod (2),
.br fchown (2),
.br fcntl (2),
.br fstat (2),
.br ftruncate (2),
.br memfd_create (2),
.br mmap (2),
.br open (2),
.br umask (2),
.br shm_overview (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/ether_aton.3
.so man3/strtod.3
.\" copyright (c) 2006 red hat, inc. all rights reserved.
.\" and copyright (c) 2013 michael kerrisk 
.\" written by ivana varekova 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th perfmonctl 2 2021-03-22 linux "linux programmer's manual"
.sh name
perfmonctl \- interface to ia-64 performance monitoring unit
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "long perfmonctl(int " fd ", int " cmd ", void *" arg ", int " narg ");"
.fi
.pp
.ir note :
there is no glibc wrapper for this system call; see notes.
.sh description
the ia-64-specific
.br perfmonctl ()
system call provides an interface to the
pmu (performance monitoring unit).
the pmu consists of pmd (performance monitoring data) registers and
pmc (performance monitoring control) registers,
which gather hardware statistics.
.pp
.br perfmonctl ()
applies the operation
.i cmd
to the input arguments specified by
.ir arg .
the number of arguments is defined by \finarg\fr.
the
.i fd
argument specifies the perfmon context to operate on.
.pp
supported values for
.i cmd
are:
.tp
.b pfm_create_context
.nf
.bi  "perfmonctl(int " fd ", pfm_create_context, pfarg_context_t *" ctxt ", 1);"
.fi
set up a context.
.ip
the
.i fd
parameter is ignored.
a new perfmon context is created as specified in
.i ctxt
and its file descriptor is returned in \fictxt->ctx_fd\fr.
.ip
the file descriptor can be used in subsequent calls to
.br perfmonctl ()
and can be used to read event notifications (type
.ir pfm_msg_t )
using
.br read (2).
the file descriptor is pollable using
.br select (2),
.br poll (2),
and
.br epoll (7).
.ip
the context can be destroyed by calling
.br close (2)
on the file descriptor.
.tp
.b pfm_write_pmcs
.\" pfm_write_pmcs()
.nf
.bi  "perfmonctl(int " fd ", pfm_write_pmcs, pfarg_reg_t *" pmcs ", n);"
.fi
set pmc registers.
.tp
.b pfm_write_pmds
.nf
.bi  "perfmonctl(int " fd ", pfm_write_pmds, pfarg_reg_t *" pmds ", n);"
.fi
.\" pfm_write_pmds()
set pmd registers.
.tp
.b pfm_read_pmds
.\" pfm_read_pmds()
.nf
.bi  "perfmonctl(int " fd ", pfm_read_pmds, pfarg_reg_t *" pmds ", n);"
.fi
read pmd registers.
.tp
.b pfm_start
.\" pfm_start()
.nf
.\" .bi  "perfmonctl(int " fd ", pfm_start, arg, 1);
.bi  "perfmonctl(int " fd ", pfm_start, null, 0);"
.fi
start monitoring.
.tp
.b pfm_stop
.\" pfm_stop()
.nf
.bi  "perfmonctl(int " fd ", pfm_stop, null, 0);"
.fi
stop monitoring.
.tp
.b pfm_load_context
.\" pfm_context_load()
.nf
.bi  "perfmonctl(int " fd ", pfm_load_context, pfarg_load_t *" largs ", 1);"
.fi
attach the context to a thread.
.tp
.b pfm_unload_context
.\" pfm_context_unload()
.nf
.bi  "perfmonctl(int " fd ", pfm_unload_context, null, 0);"
.fi
detach the context from a thread.
.tp
.b pfm_restart
.\" pfm_restart()
.nf
.bi  "perfmonctl(int " fd ", pfm_restart, null, 0);"
.fi
restart monitoring after receiving an overflow notification.
.tp
.b pfm_get_features
.\" pfm_get_features()
.nf
.bi  "perfmonctl(int " fd ", pfm_get_features, pfarg_features_t *" arg ", 1);"
.fi
.tp
.b pfm_debug
.\" pfm_debug()
.nf
.bi  "perfmonctl(int " fd ", pfm_debug, " val ", 0);"
.fi
if
.i val
is nonzero, enable debugging mode, otherwise disable.
.tp
.b pfm_get_pmc_reset_val
.\" pfm_get_pmc_reset()
.nf
.bi  "perfmonctl(int " fd ", pfm_get_pmc_reset_val, pfarg_reg_t *" req  ", n);"
.fi
reset pmc registers to default values.
.\"
.\"
.\" .tp
.\" .b pfm_create_evtsets
.\"
.\" create or modify event sets
.\" .nf
.\" .bi  "perfmonctl(int " fd ", pfm_create_evtsets, pfarg_setdesc_t *desc , n);
.\" .fi
.\" .tp
.\" .b pfm_delete_evtsets
.\" delete event sets
.\" .nf
.\" .bi  "perfmonctl(int " fd ", pfm_delete_evtset, pfarg_setdesc_t *desc , n);
.\" .fi
.\" .tp
.\" .b pfm_getinfo_evtsets
.\" get information about event sets
.\" .nf
.\" .bi  "perfmonctl(int " fd ", pfm_getinfo_evtsets, pfarg_setinfo_t *info, n);
.\" .fi
.sh return value
.br perfmonctl ()
returns zero when the operation is successful.
on error, \-1 is returned and
.i errno
is set to indicate the error.
.sh versions
.br perfmonctl ()
was added in linux 2.4;
.\" commit ecf5b72d5f66af843f189dfe9ce31598c3e48ad7
it was removed in linux 5.10.
.sh conforming to
.br perfmonctl ()
is linux-specific and is available only on the ia-64 architecture.
.sh notes
this system call was broken for many years,
and ultimately removed in linux 5.10.
.pp
glibc does not provide a wrapper for this system call;
on kernels where it exists, call it using
.br syscall (2).
.sh see also
.br gprof (1)
.pp
the perfmon2 interface specification
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/random.3
.so man2/sched_setscheduler.2
.so man2/statfs.2
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted: