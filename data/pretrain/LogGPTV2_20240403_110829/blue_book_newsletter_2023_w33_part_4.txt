    - `:DiffviewOpen`
    - `:DiffviewOpen HEAD~2`
    - `:DiffviewOpen HEAD~4..HEAD~2`
    - `:DiffviewOpen d4a7b0d`
    - `:DiffviewOpen d4a7b0d^!`
    - `:DiffviewOpen d4a7b0d..519b30e`
    - `:DiffviewOpen origin/main...HEAD`
    You can also provide additional paths to narrow down what files are shown `:DiffviewOpen HEAD~2 -- lua/diffview plugin`.
    Additional commands for convenience:
    - `:DiffviewClose`: Close the current diffview. You can also use `:tabclose`.
    - `:DiffviewToggleFiles`: Toggle the file panel.
    - `:DiffviewFocusFiles`: Bring focus to the file panel.
    - `:DiffviewRefresh`: Update stats and entries in the file list of the current Diffview.
    With a Diffview open and the default key bindings, you can:
    - Cycle through changed files with `` and ``
    - You can stage changes with `-`
    - Restore a file with `X`
    - Refresh the diffs with `R`
    - Go to the file panel with `e`
### [Beets](beets.md)
* New: Guide on how to start using it.
    You’ll want to set a few basic options before you start using beets. The [configuration](https://beets.readthedocs.io/en/stable/reference/config.html) is stored in a text file. You can show its location by running `beet config -p`, though it may not exist yet. Run `beet config -e` to edit the configuration in your favorite text editor. The file will start out empty, but here’s good place to start:
    ```yaml
    directory: ~/music
    library: ~/data/musiclibrary.db
    ```
    The default configuration assumes you want to start a new organized music folder (that directory above) and that you’ll copy cleaned-up music into that empty folder using beets’ `import` command. But you can configure beets to behave many other ways:
    - Start with a new empty directory, but move new music in instead of copying it (saving disk space). Put this in your config file:
        ```yaml
        import:
            move: yes
        ```
    - Keep your current directory structure; importing should never move or copy files but instead just correct the tags on music. Put the line `copy: no` under the `import:` heading in your config file to disable any copying or renaming. Make sure to point `directory` at the place where your music is currently stored.
    - Keep your current directory structure and do not correct files’ tags: leave files completely unmodified on your disk. (Corrected tags will still be stored in beets’ database, and you can use them to do renaming or tag changes later.) Put this in your config file:
        ```yaml
        import:
            copy: no
            write: no
        ```
        to disable renaming and tag-writing.
* New: [Importing your library.](beets.md#importing-your-library)
    The next step is to import your music files into the beets library database. Because this can involve modifying files and moving them around, data loss is always a possibility, so now would be a good time to make sure you have a recent backup of all your music. We’ll wait.
    There are two good ways to bring your existing library into beets. You can either: (a) quickly bring all your files with all their current metadata into beets’ database, or (b) use beets’ highly-refined autotagger to find canonical metadata for every album you import. Option (a) is really fast, but option (b) makes sure all your songs’ tags are exactly right from the get-go. The point about speed bears repeating: using the autotagger on a large library can take a very long time, and it’s an interactive process. So set aside a good chunk of time if you’re going to go that route.
    If you’ve got time and want to tag all your music right once and for all, do this:
    ```bash
    beet import /path/to/my/music
    ```
    (Note that by default, this command will copy music into the directory you specified above. If you want to use your current directory structure, set the import.copy config option.) To take the fast, un-autotagged path, just say:
    ```bash
    beet import -A /my/huge/mp3/library
    ```
    Note that you just need to add `-A` for “don’t autotag”.
### [Gotify](gotify.md)
* New: Introduce gotify.
    [Gotify](https://github.com/gotify/server) is a simple server for sending and receiving messages in real-time per WebSocket.
    Not there yet:
    - [Reactions on the notifications](https://github.com/gotify/server/issues/494)
### [Grafana](grafana.md)
* New: Introduce grafana.
    [Grafana](https://grafana.com/grafana) is a web application to create dashboards.
    [Installation](https://grafana.com/docs/grafana/latest/setup-grafana/installation/docker/#run-grafana-via-docker-compose): We're going to install it with docker-compose and connect it to [Authentik](authentik.md).
    [Create the Authentik connection](https://goauthentik.io/integrations/services/grafana/):
    Assuming that you have [the terraform authentik provider configured](authentik.md), use the next terraform code:
    ```hcl
    variable "grafana_name" {
      type        = string
      description = "The name shown in the Grafana application."
      default     = "Grafana"
    }
    variable "grafana_redirect_uri" {
      type        = string
      description = "The redirect url configured on Grafana."
    }
    variable "grafana_icon" {
      type        = string
      description = "The icon shown in the Grafana application"
      default     = "/application-icons/grafana.svg"
    }
    resource "authentik_application" "grafana" {
      name              = var.grafana_name
      slug              = "grafana"
      protocol_provider = authentik_provider_oauth2.grafana.id
      meta_icon         = var.grafana_icon
      lifecycle {
        ignore_changes = [
          # The terraform provider is continuously changing the attribute even though it's set
          meta_icon,
        ]
      }
    }
    resource "authentik_provider_oauth2" "grafana" {
      name               = var.grafana_name
      client_id          = "grafana"
      authorization_flow = data.authentik_flow.default-authorization-flow.id
      property_mappings = [
        data.authentik_scope_mapping.email.id,
        data.authentik_scope_mapping.openid.id,
        data.authentik_scope_mapping.profile.id,
      ]
      redirect_uris = [
        var.grafana_redirect_uri,
      ]
      signing_key = data.authentik_certificate_key_pair.default.id
      access_token_validity = "minutes=120"
    }
    data "authentik_certificate_key_pair" "default" {
      name = "authentik Self-signed Certificate"
    }
    data "authentik_flow" "default-authorization-flow" {
      slug = "default-provider-authorization-implicit-consent"
    }
    output "grafana_oauth_id" {
      value = authentik_provider_oauth2.grafana.client_id
    }
    output "grafana_oauth_secret" {
      value = authentik_provider_oauth2.grafana.client_secret
    }
    ```
### [Jellyfin](jellyfin.md)
* New: [Introduce Jellyfin Desktop.](jellyfin.md#jellyfin-desktop)
    - Download the latest deb package from the [releases page](https://github.com/jellyfin/jellyfin-media-player/releases)
    - Install the dependencies
    - Run `dpkg -i`
    If you're on a TV you may want to [enable the TV mode](https://github.com/jellyfin/jellyfin-media-player/issues/11) so that the remote keys work as expected. The play/pause/next/prev won't work until [this issue is solved](https://github.com/jellyfin/jellyfin-media-player/issues/3), but it's not that bad to use the "Ok" and then navigate with the arrow keys.
* New: [Introduce Jellycon.](jellyfin.md#jellycon)
    JellyCon is a lightweight Kodi add-on that lets you browse and play media files directly from your Jellyfin server within the Kodi interface. It can be thought of as a thin frontend for a Jellyfin server.
    It's not very pleasant to use though.
### [Kodi](kodi.md)
* New: Introduce Kodi.
    [Kodi](https://kodi.tv/) is a entertainment center software. It basically converts your device into a smart tv
### [Koel](koel.md)
* New: Introduce Koel.
    [koel](https://koel.dev/) is a personal music streaming server.
    Note: Use [`mopidy`](mopidy.md) instead
    There are [docker-compose files](https://github.com/koel/docker) to host the service. Although they behave a little bit weird
    For example, you need to [specify the DB_PORT](https://github.com/koel/docker/issues/168). It has had several PR to fix it but weren't merged [1](https://github.com/koel/docker/pull/165/files), [2](https://github.com/koel/docker/pull/162/files).
    The API is [not very well documented](https://github.com/koel/koel/issues/535):
    - [Here you can see how to authenticate](https://github.com/X-Ryl669/kutr/wiki/Communication-API#authentication)
    - [Here are the api docs](https://github.com/koel/koel/blob/master/api-docs/api.yaml#L763)
### [Mediatracker](mediatracker.md)
* New: Introduce MediaTracker.
    [MediaTracker](https://github.com/bonukai/MediaTracker) is a self hosted media tracker for movies, tv shows, video games, books and audiobooks
    [Installation](https://github.com/bonukai/MediaTracker#installation):
    With docker compose:
    ```yaml
    version: "3"
    services:
      mediatracker:
        container_name: mediatracker
        ports:
          - 7481:7481
        volumes:
          - /home/YOUR_HOME_DIRECTORY/.config/mediatracker/data:/storage
          - assetsVolume:/assets
        environment:
          SERVER_LANG: en
          TMDB_LANG: en
          AUDIBLE_LANG: us
          TZ: Europe/London
        image: bonukai/mediatracker:latest
    volumes:
      assetsVolume: null
    ```
    If you attach more than one docker network the container becomes unreachable :S.
    Install the jellyfin plugin:
    They created a [Jellyfin plugin](https://github.com/bonukai/jellyfin-plugin-mediatracker) so that all scrobs are sent automatically to the mediatracker
    - Add new Repository in Jellyfin (Dashboard -> Plugins -> Repositories -> +) from url `https://raw.githubusercontent.com/bonukai/jellyfin-plugin-mediatracker/main/manifest.json`
    - Install MediaTracker plugin from Catalogue (Dashboard -> Plugins -> Catalogue)
    Some tips on usage:
    - Add the shows you want to watch to the watchlist so that it's easier to find them
    - When you're ending an episode, click on the episode number on the watchlist element and then rate the episode itself.
    - You can create public lists to share with the rest of the users, the way to share it though [is a bit archaic so far](https://github.com/bonukai/MediaTracker/issues/527), it's only through the list link, in the interface they won't be able to see it.
### [Vim](vim.md)
* New: [Run a command when opening vim.](vim.md#run-a-command-when-opening-vim)
    ```bash
    nvim -c ':DiffViewOpen'
    ```
# Arts
## Video Gaming
### [Age of Empires](age_of_empires.md)
* New: Add guides on how to play.
    - [Fast castle boom](https://www.youtube.com/watch?v=JsTNM7j6fs4&t=119)
    - How to play Arena: [Hera's guide](https://piped.video/watch?v=8gXI4XGMPzQ&t=0), [Tatoh game in arena](https://www.youtube.com/watch?v=3qg4Xwm8CAo&t=1211)
    - [How to play Hideout](https://www.youtube.com/watch?v=DdK8QveBegw&t=652)
    - [How to play Blackforest](https://www.youtube.com/watch?v=1V_jsU9PF8Y)
    - Inside the mind of a pro player: [Episode 1](https://www.youtube.com/watch?v=54hRmrdzO-I), [Episode 2](https://www.youtube.com/watch?v=sZCs6dwH5qk&t=1727)
* New: [Strategies against civilisations.](age_of_empires.md#-strategies-against-civilisations)
    I'm using only the mongols, and so far I've seen/heard from the pros the next strategies:
    - Aztecs:
        - Steppe lancers good against eagle warriors
        - Heavy scorpions against eagle warriors and skirms
    - Cumans:
        - [Scout, if it drops two TCs in feudal, tower rush into archers](https://www.youtube.com/watch?v=H9QUNtFII1g&t=0)
        - [Put initial pressure](https://www.youtube.com/watch?v=R9qaFZzZgBY&t=1925): Nice initial pressure
    - Incas:
        - Steppe lancers good against eagle warriors
        - Heavy scorpions against eagle warriors and skirms
    - Khmer: boom, map control, monks and albadiers
    - Mayans:
        - Steppe lancers good against eagle warriors
        - Heavy scorpions against eagle warriors and skirms
    - Romans:
        - [Hera guide on how to beat them](https://www.youtube.com/watch?v=SA44-Y3XUy0&t=842)
    - Tartars: heavy scorpions
    - Turks:
        - [How to defend against them in Arena](https://www.youtube.com/watch?v=AI_JRA_nCpw&t=3710)
* New: [Nice games.](age_of_empires.md#nice-games)
    Tournaments:
    - 2023 Masters of Arena 7 Final Tatoh vs Vinchester:
        - [Casted by T90](https://www.youtube.com/watch?v=3qg4Xwm8CAo&t=1211s)
        - [Pov by Tatoh](https://www.youtube.com/watch?v=AI_JRA_nCpw&t=8854)
    Showmatches:
    - [Hera vs TheViper | Battlegrounds 3 | BO5](https://www.youtube.com/watch?v=AlKMRQNMVzo&t=4306)
    - [The Viper VS Tatoh PA7](https://www.youtube.com/watch?v=5_p3TXasBHY&t=5319)
    1vs1 games:
    - [Hindustanis vs Portuguese | Arabia | Hera vs Yo](https://www.youtube.com/watch?v=iZ7eWLLbh34)
    - [Dravidians vs Turks | African Clearing | Hera vs Yo](https://www.youtube.com/watch?v=tZyVLDwBfd4)