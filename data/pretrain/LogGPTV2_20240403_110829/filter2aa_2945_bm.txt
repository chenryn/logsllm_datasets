    private static int rangeCheckedX(int x)
    {
        if (x  1279)
        {
            throw new ArgumentOutOfRangeException("X");
        }
        return x;
    }
    private static int rangeCheckedY(int y)
    {
        if (y  1023)
        {
            throw new ArgumentOutOfRangeException("Y");
        }
        return y;
    }
}
One problem with this structure is that it does not follow the golden rule
of encapsulation—that is, it does not keep its data private. Public data is often
a bad idea because the class cannot control the values that an application
specifies. For example, the ScreenPosition constructor checks its parameters
to ensure that they are in a specified range, but no such check can be done on
the “raw” access to the public fields. Sooner or later (probably sooner), an
Download from finelybook PI:EMAIL
512
error or misunderstanding on the part of a developer using this class in an
application can cause either X or Y to stray out of this range:
Click here to view code image
ScreenPosition origin = new ScreenPosition(0, 0);
...
int xpos = origin.X;
origin.Y = -100; // oops
The common way to solve this problem is to make the fields private and
add an accessor method and a modifier method to read and write the value of
each private field respectively. The modifier methods can then check the
range for new field values. For example, the code that follows contains an
accessor (GetX) and a modifier (SetX) for the X field. Notice that SetX checks
the parameter passed in.
Click here to view code image
struct ScreenPosition
{
    ...
    public int GetX()
    {
        return this.x;
    }
    public void SetX(int newX)
    {
       this.x = rangeCheckedX(newX);
    }
    ...
    private static int rangeCheckedX(int x) { ... }
    private static int rangeCheckedY(int y) { ... }
    private int x, y;
}
The code now successfully enforces the range constraints, which is good.
However, there is a price to pay for this valuable guarantee—ScreenPosition
no longer has a natural field-like syntax; it uses awkward method-based
syntax instead. The example that follows increases the value of X by 10. To
do so, it has to read the value of X by using the GetX accessor method and
then write the value of X by using the SetX modifier method.
Click here to view code image
int xpos = origin.GetX();
origin.SetX(xpos + 10);
Download from finelybook PI:EMAIL
513
Compare this with the equivalent code if the X field were public:
origin.X += 10;
There is no doubt that, in this case, using public fields is syntactically
cleaner, shorter, and easier. Unfortunately, using public fields breaks
encapsulation. By using properties, you can combine the best of both worlds
(fields and methods) to retain encapsulation while providing a field-like
syntax.
What are properties?
A property is a cross between a field and a method—it looks like a field but
acts as a method. You access a property by using the same syntax that you
use to access a field. However, the compiler automatically translates this
field-like syntax into calls to accessor methods (sometimes referred to as
property getters and property setters).
The syntax for a property declaration looks like this:
Click here to view code image
AccessModifier Type PropertyName
{
    get
    {
        // read accessor code
    }
    set
    {
        // write accessor code
    }
}
A property can contain two blocks of code, starting with the get and set
keywords. The get block contains statements that execute when the property
is read, and the set block contains statements that run upon writing to the
property. The type of the property specifies the type of data read and written
by the get and set accessors.
The next code example shows the ScreenPosition structure rewritten by
using properties. When looking at this code, notice the following:
Download from finelybook PI:EMAIL
514
Lowercase _x and _y are private fields.
Uppercase X and Y are public properties.
All set accessors are passed the data to be written by using a hidden,
built-in parameter named value.
Click here to view code image
struct ScreenPosition
{
    private int _x, _y;
    public ScreenPosition(int X, int Y)
    {
        this._x = rangeCheckedX(X);
        this._y = rangeCheckedY(Y);
    }
    public int X
    {
        get { return this._x; }
        set { this._x = rangeCheckedX(value); }
    }
    public int Y
    {
        get { return this._y; }
        set { this._y = rangeCheckedY(value); }
    }
    private static int rangeCheckedX(int x) { ... }
    private static int rangeCheckedY(int y) { … }
}
In this example, a private field directly implements each property, but this
is only one way to implement a property. All that is required is for a get
accessor to return a value of the specified type. Such a value can easily be
calculated dynamically rather than being simply retrieved from stored data, in
which case there would be no need for a physical field.
Note Although the examples in this chapter show how to define
properties for a structure, they are equally applicable to classes; the
syntax is the same.
Download from finelybook PI:EMAIL
515
For simple properties, you can use expression-bodied members rather than
full-blown method syntax for get and set accessors. For example, you can
simplify the X and Y properties shown in the previous example like this:
Click here to view code image
public int X
{
    get => this._x;
    set => this._x = rangeCheckedX(value);
}
public int Y
{
    get => this._y;
    set => this._y = rangeCheckedY(value);
}
Notice that you don’t need to specify the return keyword for the get
accessor; you simply provide an expression that is evaluated every time the
property is read. This syntax is less verbose and arguably more natural,
although functionally the properties perform the same task. It is a matter of
personal preference which you should use, but for simple properties, I would
recommend adopting the expression-bodied syntax. Of course, you can mix
and match; you could implement a simple get accessor as an expression-
bodied member, but a more complex set accessor could still utilize the
method syntax.
Properties and field names: A warning
The section “Naming variables” in Chapter 2, “Working with variables,
operators, and expressions,” describes some recommendations for
naming variables. In particular, it states that you should avoid starting
an identifier with an underscore. However, you can see that the
ScreenPosition struct does not completely follow this guidance; it
contains fields named _x and _y. There is a good reason for this
anomaly. The sidebar “Naming and accessibility” in Chapter 7,
“Creating and managing classes and objects,” describes how it is
common to use identifiers that start with an uppercase letter for publicly
accessible methods and fields and to use identifiers that start with a
Download from finelybook PI:EMAIL
516
lowercase letter for private methods and fields. Taken together, these
two practices can cause you to give properties and private fields a name
that differs only in the case of the initial letter, and many organizations
do precisely this.
If your organization follows this approach, you should be aware of
one important drawback. Examine the following code, which
implements a class named Employee. The employeeID field is private,
but the EmployeeID property provides public access to this field.
Click here to view code image
class Employee
{
    private int employeeID;
    public int EmployeeID
    {
        get => this.EmployeeID;
        set => this.EmployeeID = value;
    }
}
This code will compile perfectly well, but it results in a program
raising a StackOverflow-Exception exception whenever the EmployeeID
property is accessed. The exception occurs because the get and set
accessors reference the property (uppercase E) rather than the private
field (lowercase e), which causes an endless recursive loop that
eventually causes the process to exhaust the available memory. This
type of bug is very difficult to spot! For this reason, the examples in this
book name the private fields used to provide the data for properties with
a leading underscore; it makes them much easier to distinguish from the
names of properties. All other private fields will continue to use
camelCase identifiers without a leading underscore.
Using properties
When you use a property in an expression, you can use it in a read context
(when you are retrieving its value) and in a write context (when you are
modifying its value). The following example shows how to read values from
Download from finelybook PI:EMAIL
517
the X and Y properties of the ScreenPosition structure:
Click here to view code image
ScreenPosition origin = new ScreenPosition(0, 0);
int xpos = origin.X;    // calls origin.X.get
int ypos = origin.Y;    // calls origin.Y.get
Notice that you access properties and fields by using identical syntax.
When you use a property in a read context, the compiler automatically
translates your field-like code into a call to the get accessor of that property.
Similarly, if you use a property in a write context, the compiler automatically
translates your field-like code into a call to the set accessor of that property.
Click here to view code image
origin.X = 40;      // calls origin.X.set, with value set to 40
origin.Y = 100;     // calls origin.Y.Set, with value set to 100
The values being assigned are passed into the set accessors by using the
value variable, as described in the preceding section. The runtime does this
automatically.
It’s also possible to use a property in a read/write context. In this case,
both the get accessor and the set accessor are used. For example, the compiler
automatically translates statements such as the following into calls to the get
and set accessors:
origin.X += 10;
Tip You can declare static properties in the same way that you can
declare static fields and methods. You can access static properties by
using the name of the class or structure rather than an instance of the
class or structure.
Read-only properties
You can declare a property that contains only a get accessor. In this case, you
Download from finelybook PI:EMAIL
518
can use the property only in a read context. For example, here’s the X
property of the ScreenPosition structure declared as a read-only property:
Click here to view code image
struct ScreenPosition
{
    private int _x;
    ...
    public int X
    {
        get => this._x;
    }
}
The X property does not contain a set accessor; therefore, any attempt to
use X in a write context will fail, as demonstrated in the following example:
origin.X = 140; // compile-time error
Write-only properties
Similarly, you can declare a property that contains only a set accessor. In this
case, you can use the property only in a write context. For example, here’s
the X property of the ScreenPosition structure declared as a write-only
property:
Click here to view code image
struct ScreenPosition
{
    private int _x;
    ...
    public int X
    {
        set => this._x = rangeCheckedX(value);
    }
}
The X property does not contain a get accessor; any attempt to use X in a
read context will fail, as illustrated here:
Click here to view code image
Console.WriteLine(origin.X);    // compile-time error
origin.X = 200;                  // compiles OK
origin.X += 10;                  // compile-time error
Download from finelybook PI:EMAIL
519
Note Write-only properties are useful for secure data such as
passwords. Ideally, an application that implements security should
allow you to set your password but never allow you to read it back.
When a user attempts to log on, the user can provide the password. The
logon method can compare this password with the stored password and
return only an indication of whether they match.
Property accessibility
You can specify the accessibility of a property (using the keywords public,
private, or protected) when you declare it. However, it is possible within the
property declaration to override the property accessibility for the get and set
accessors. For example, the version of the ScreenPosition structure shown in
the code that follows defines the set accessors of the X and Y properties as
private. (The get accessors are public because the properties are public.)
Click here to view code image
struct ScreenPosition
{
    private int _x, _y;
    ...
    public int X
    {
        get => this._x;
        private set => this._x = rangeCheckedX(value);
    }
    public int Y
    {
        get => this._y;
        private set => this._y = rangeCheckedY(value);
    }
    ...
}
You must observe some rules when defining accessors that have different
accessibility from one another:
Download from finelybook PI:EMAIL
520
You can change the accessibility of only one of the accessors when you
define it. It wouldn’t make much sense to define a property as public
only to change the accessibility of both accessors to private anyway.
The modifier must not specify an accessibility that is less restrictive
than that of the property. For example, if the property is declared to be
private, you cannot specify the read accessor as public. (Instead, you
would make the property public and make the write accessor private.)
Understanding the property restrictions
Properties look, act, and feel like fields when you read or write data by using
them. However, they are not true fields, and certain restrictions apply to
them:
You can assign a value through a property of a structure or class only
after the structure or class has been initialized. The following code
example is illegal because the location variable has not been initialized
(by using new):
Click here to view code image
ScreenPosition location;
location.X = 40; // compile-time error, location not assigned
Note This might seem trivial, but if X were a field rather than a
property, the code would be legal. For this reason, you should define
structures and classes from the beginning by using properties rather than
fields that you later migrate to properties. Code that uses your classes
and structures might no longer work after you change fields into
properties. You will return to this matter in the section “Generating
automatic properties” later in this chapter.
You can’t use a property as a ref or an out argument to a method
(although you can use a writable field as a ref or an out argument). This
Download from finelybook PI:EMAIL
521
makes sense because the property doesn’t really point to a memory
location; rather, it points to an accessor method, such as in the
following example:
Click here to view code image
MyMethod(ref location.X); // compile-time error
A property can contain at most one get accessor and one set accessor.
A property cannot contain other methods, fields, or properties.
The get and set accessors cannot take any parameters. The data being
assigned is passed to the set accessor automatically by using the value
variable.
You can’t declare properties by using const, such as is demonstrated
here:
Click here to view code image
const int X
{
get => ...
set => ...  
} // compile-time error
Using properties appropriately
Properties are a powerful feature and used correctly, they can help to
make code easier to understand and maintain. However, they are no
substitute for careful object-oriented design that focuses on the behavior
of objects rather than on the properties of objects. Accessing private
fields through regular methods or through properties does not, by itself,
make your code well designed. For example, a bank account holds a
balance indicating the funds available in the account. You might,
therefore, be tempted to create a Balance property on a BankAccount
class, like this:
Click here to view code image
class BankAccount
{
    private decimal _balance;
    ...
Download from finelybook PI:EMAIL
522
    public decimal Balance
    {
        get => this._balance;
        set => this._balance = value;
    }
}
This is a poor design because it fails to represent the functionality
required when someone withdraws money from or deposits money into
an account. (If you know of a bank that allows you to change the
balance of your account directly without physically putting money into
the account, please let me know!) When you’re programming, try to
express the problem you’re solving in the solution and don’t get lost in
a mass of low-level syntax. As the following example illustrates,
provide Deposit and Withdraw methods for the BankAccount class
rather than a property setter:
Click here to view code image
class BankAccount
{
    private decimal _balance;
    ...
    public decimal Balance { get => this._balance; }
    public void Deposit(decimal amount) { ... }
    public bool Withdraw(decimal amount) { ... }
}
Declaring interface properties
You encountered interfaces in Chapter 13, “Creating interfaces and defining
abstract classes.” Interfaces can define properties as well as methods. To do
this, you specify the get or set keyword or both, but you replace the body of
the get or set accessor with a semicolon, as shown here:
Click here to view code image
interface IScreenPosition
{
    int X { get; set; }
    int Y { get; set; }
}
Download from finelybook PI:EMAIL
523
Any class or structure that implements this interface must implement the X
and Y properties with get and set accessor methods (or expression-bodied
members).
Click here to view code image
struct ScreenPosition : IScreenPosition
{
    ...
    public int X
    {
        get { ... } // or get => ...
        set { ... } // or set => ...
    }
    public int Y
    {
        get { ... }
        set { ... }
    }