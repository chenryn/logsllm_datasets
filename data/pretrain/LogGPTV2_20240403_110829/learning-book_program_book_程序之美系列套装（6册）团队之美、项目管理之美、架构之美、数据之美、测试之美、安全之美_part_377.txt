eBox主要使用的技术是AJAX，并且大量用户行为是异步的。这些页
面没有完全重新加载整个页面，而是重新加载了页面的一部分结
构，并且Selenim也很难发现这些请求什么时候完成。为了解决这个
问题，eBox提供了一个嵌在AJAX的HTML代码中的标志。该标志的
值会在异步请求完成时改变。这样，Selenmium可以只需要监测这个标
志就可以知道什么时候请求完成，并允许下一步骤的安全执行。
当然最开始的标志状态需要通过运行一个eBoxSelenium模块提供的
JavaScript函数来手工重置。点击一个链接会引起一个AJAX请求，如
下所示：
dosu
2161
---
## Page 2163
startAjaxRequest()
waitForValue
ajax_request_cookie
1
click
flter
waitForValue
ajax_request_cookie
0
通过调用函数startAjaxRequest为标志ajax_request_cookie赋值1。然
后，我们要等到该变量真的变为1。一旦它变为1后，我们就可以点
击一个含有AJAX的链接，使得刚才那个标志变量的值再次变回0。
2162
---
## Page 2164
所有这些步骤仍然继续发生着，但一个Selenium的扩展已经形成。可
以让我们用下面这个片段取代所有的代码：
clickAjax
flter
另外一个贯穿eBox测试的通用任务是配置一个作为eBox的外部接
口。所谓外部接口，就是一个可以提供访问其他具有潜在危害的网
络接口，如互联网。eBox的服务通常只监听内部接口。外部接口的
防火墙设置是相当严格的。
在多数场景下，这个脚本应该很有用。只是在有些情况下需要配置
不同的外部接口。Selenium不支持将变量传递到脚本中去，但
ANSTE提供了一个简单的模板系统来做这件事情。变量可以用来生
成更灵活的脚本，从而使其在各种不同的场景下更易使用，就像下
面这样：
ConfgNetworkSetExternal
Sets the interface as external.
ebox-server
set-external
2163
---
## Page 2165
我们对所需要的接口命名为IFACE。ANSTE会在该脚本被调用之前
用适当的值替换掉该变量。这样在实际运行中就会使用合适的值。
在有了这些通用的配置脚本后，接下来就是实际的测试代理脚本。
它们通常是成对出现的。一个是通过Web应用程序设置一些配置，
并且由此来测试用户界面的正确性，另一个是测试eBox在保存了更
改后是否可如期望的一样工作。下一组脚本是：
ConfgProxyFilter
Confg the proxy with flter mode and forbid a host.
ebox-server
confg-proxy-flter
FilterAllowDownload
Try to download a flefrom an allowed host
test-client
test-allow
2164
---
## Page 2166
TestLogFilterAllowDownload
Tests if proxy logs works ok
ebox-server
s0-s]<>
第一个脚本执行两项工作。第一项是设置代理的普通过滤策略
这意味着每个发出的请求将被过滤。第二项则是增加一个新的域，
域名作为参数传递到脚本中。同时还设置了一个“始终拒绝”的策
略。
第二个脚本是基于命令行的，并且运行在一个名为test-client的机器
上。它将代理设置为eBox的机器，然后试图通过wget下载指定的
URL。然后，该脚本测试了它是否能够根据指定的URL下载文件。由
于该URL不属于被禁止的域，该脚本执行后将返回成功提示，反之
则提示失败。
最后一个脚本是一个运行在ebox-server的机器上的基于网络接口的
脚本。其目的是验证给定URL在日志中记录是否正确并且设置为
Accepted状态。由于这个脚本经常用来检查日志，它需要被参数化
已达到易于使用的目的。
代理测试套件包括了更多用来继续检查代理模块其他功能的脚本，
如拒绝来自被屏蔽的域的请求或内容过滤。
2165
---
## Page 2167
检查的Squid模块的功能性相对容易，但其他模块需要非常详细的测
试。例如，要检查Jabber模块是否工作正常，需要用Net:JabberPerl
模块来写一个小脚本。该脚本创建了一对Jabber的连接，检查身份验
证是否成功，并确使双方通信是通过Jabber服务器完成的。
大部分的eBox测试从头开发将是非常困难的，但幸运的是Limux系统
已有一整套库函数和命令。除了已提到的Net:Jabber，另外一些Perl
的函数库也被应用在测试中，如Mail:IMAPClient或者Net:SMTP。还
有就是一个小但方便的UNIX命令集，例如netcat、wget或者tracerout
也被用到了。
另一个较难验证功能的模块是OpenVPN。在这种情况下，复杂性来
自于该测试场景需要大量计算机。由于测试可以只影响一台机器，
不同的测试之间需要交互并且运行在不同的机器上。当然最终测试
也需要停止所有这些进程。
首先，机器之间需要建立网络。用一台机器运行eBox，它将作为一
个OpenVPN服务器：两个客户端会与eBox之间建立虚拟专用网
（VPN）：还有儿个连接客户端和服务器的路由器。
一旦计算机设置好，第一个测试会通过在eBox上的网络接口启动
OpenVPN。接下来的一步将用OpenVPN的客户端连接到eBox上，但
有些事情需要在此之前配置。
第一个问题是，客户端实际上不能直接连接到eBox的机器。我们需
要在路由器上设置一个重定向规则，目的是建立一个连接使得
OpenVPN的端口可以将连接自动指向eBox。这是通过执行一个辅助
测试达到的一—在每个主机的防火墙上增加一项规则。
接下来的一个问题，我们要处理的是客户端配置。eBox的OpenVPN
的模块提供的配置包，其中包括一个给定客户端的所有必需的文
件。不幸的是，Selenium不允许文件下载，因此我们必须另外想办
法。最后，这是通过一个辅助测试实现的：用eBox的API来创建服务
器的配置包，然后将它们挪到一个可以通过HTTP下载的地方。这样
它们就可以被下载到客户端上了。
现在，客户端可以连接了。首先，我们要检查客户端是否能够成功
连接到VPN服务器。于是我们在第一个客户端上启动了OpenVPN的
连接并检查是否建立成功。
2166
---
## Page 2168
启用客户端到客户端的通信是需要被测试的项目之一。该项目确定
了客户端和eBoxOpenVPN服务器之间是否可以通信。该项目默认情
况下被设为false。所以我们需要检查客户端是不是真的不能互相通
信。为了完成这个，我们运行一个测试，将OpenVPN的客户端在第
二台机器上启动并且尝试着与另外一个客户端相连。如果可以建立
一个成功的连接，测试则返回成功。由于想要的结果正好相反，我
们就必须在测试中添加一个配置的选项来颠倒结果。
下一步就是确保更改配置选项实际上改变了行为。为了做到这一
点，我们使用Selenium来修改项目，并开始停正VPN连接，以及重启
OpenVPN服务器。现在我们可以使用以前用过的相同的测试。这次
只是不需要颠倒这次的结果，因此验证了两个客户端实际上是可以
互相通信的。
其他项目如何受益于ANSTE
ANSTE是被明确用于帮助那些处于测试阶段且涉及有多台计算机相
连的网络的软件。任何符合这种描述的项目都可以很容易地使用
ANSTE来提高其自动化质量保证过程。
有一个项目可以很容易地利用ANSTE的优势来做测试，那就是
MySQL。MySQL是一种被广泛使用的开源数据库管理系统。该项目
已经拥有了一个了不起的测试框架，但是过度依赖于一台主机的
SQL测试。然而，MySQL有儿个部分需要数个MySQL服务器，如复
制和集群。
为了执行这些测试，该测试框架能够运行在同一台机器上的多个服
务器，但尽管这些测试可能涵盖了最常见的行为，它们仍然不能思
实地反映多台机器的真实情况。因为他们没有考虑到多台机器之间
建立连接可能会出现的失败一—而这也是一个非常重要的数据库集
群测试。
ANSTE已被成功地用于测试MySQL集群。由于ANSTE就是被设计用
来处理协调多机的，它可以更贴切地复制一个真正的集群测试场
景。例如，网络出现故障就能够很容易地通过脚本来关掉网络接口
模拟。它使得测试变得简单直接并且是全自动化的。
我们很容易发现更多受益于ANSTE的项目。没有必要把目光从eBox
上挪开，它的大部分测试实际上是通过底层守护程序实现的。像
2167