### Discovery of Candidate Artifacts

To discover candidate artifacts, follow these steps:
1. **Identify Access Sites**: Locate all distinct access sites for seed artifacts in all archived scripts.
2. **Find Candidate Feature Access Sites**: Identify all candidate feature access sites that are no more than 1,024 characters away from one of the located seed access sites.
3. **Extract Candidate Features**: Extract the set of all candidate features whose access sites meet the seed locality requirement.

From our initial set of 3 seed artifacts, this process yielded a set of 209 candidate artifacts (0.01% of the candidate pool) found near seed access sites in 7,528 distinct scripts, of which only 1,813 were lexically distinct.

### Modern Browser Artifacts

Next, we eliminated any artifacts found in current, major web browsers. We manually tested a total of nine browser variants:
- **Chrome**: v70 on Linux, v69 on macOS
- **Firefox**: v63 on Linux, v62 on macOS, v63 on macOS
- **Safari**: v12.0 on macOS
- **Edge**: v17 on Windows 10
- **Internet Explorer**: v8 on Windows 7, v11 on Windows 10

In total, 61 of the candidates were present on at least one tested browser, leaving 148 candidates that might be indicative of a distinctive bot platform. The only two artifacts present on all nine browsers were standard JavaScript (but not WebIDL-defined) features in the global object: `Object` and `Function`.

### Manual Classification

We classified the remaining 148 candidate artifacts manually. Intuitively, if every access site of a candidate artifact has a data flow to apparent data exfiltration or evasion logic, we consider it a true artifact. If there are benign or inconclusive examples, we conservatively assume the candidate is not a true artifact. (We also attempt to categorize false positives, but this often depends on subjective judgment of programmer intent.)

To assist this process, we classified artifact access sites into three categories:
- **Direct**: The feature name appears in the source code at the exact offset of the access site.
- **Indirect**: The name appears elsewhere in the code.
- **Hidden**: The name does not appear at all.

A candidate found in a small number of distinct scripts and accessed mostly via hidden, monomorphic access sites almost always proved to be a bot detection artifact. Conversely, candidates found widely and accessed mostly via direct or polymorphic sites usually proved not to be true bot artifacts.

**Table 4: Candidate Artifacts Classified**
| Category | Count |
|----------|-------|
| Seed Bot Artifact | 3 |
| New Bot Artifact | 46 |
| Device/Browser Fingerprint | 19 |
| Property Pollution/Iteration | 46 |
| Type Error/Misspelling | 8 |
| Missing Dependency | 5 |
| Other | 10 |

We identified a total of 49 artifacts (including our seeds) used exclusively for bot detection. We identified 10 more that were used for bot detection activity but not exclusively so. (To avoid false positives, we exclude these "maybe" artifacts from our aggregate results.) An additional 19 appeared to be known or suspected fingerprinting artifacts of specific browsers or devices (e.g., standard features with vendor prefixes like `moz-` and WebGL information query constants).

Almost all of the remaining candidate artifacts appear to be side-effects of JavaScript language quirks and sloppy programming. For example, extracted from a lightly obfuscated bot detection routine, some of the 46 artifacts we attribute to property pollution in iteration (Listing 5). This code iterates over an array of property names to check (in this case, all true bot artifacts). However, JavaScript arrays intermingle indexed values with named properties, and this code fails to exclude properties (e.g., `findAll`) inherited from the array's prototype. As a result, a single polymorphic access site within our clustering radius would access both true bot artifacts and unrelated array method names, bloating our initial candidate artifact pool with spurious features that had to be weeded out manually.

```javascript
/* originally obfuscated via string opaque concatenation */
var d = ["_phantom", "__nightmare", "_selenium", "callPhantom", "callSelenium", "_Selenium_IDE_Recorder"],
    e = window;
for (var l in d) {
    var v = d[l];
    if (e[v]) return v;
}
```

### Artifact Analysis Results

#### Across Visited Domains
Our trace logs recorded probes of at least one definite bot artifact during visits to 14,575 (29%) of the Alexa top 50k. This number includes artifact accesses from both monomorphic (sites accessing only one feature; 24%) and polymorphic access sites (those accessing more than one feature name; 5%). If we consider only monomorphic access sites, the number drops to 11,830 visited sites, which is under 24% of the top 50k. The modest size of that drop implies that most bot detection scripts, even if obfuscated, perform artifact probes on a one-by-one basis rather than through changing, loop-carried indirect member accesses.

**Table 5: Highest Ranked Visit Domains Probing Identified Bot Artifacts**
| Visit Domain | Alexa Rank |
|--------------|------------|
| youtube.com | 2 |
| yahoo.com | 6 |
| reddit.com | 7 |
| amazon.com | 11 |
| tmall.com | 13 |
| weibo.com | 21 |
| google.de | 23 |
| ebay.com | 45 |
| mail.ru | 50 |
| stackoverflow.com | 55 |

#### Across Security Origin Domains
When considering security origin domains as well as visit domains, we find that the majority (over 73%) of bot artifact accesses happen inside third-party sourced scripts, typical of advertisements, third-party widgets, and trackers. Here, "first-party" is defined as having a security origin domain containing the visit domain as a suffix, and "third-party" as everything else. Using a stricter, exact-match definition like the browser's Same-Origin Policy would result in an even higher third-to-first-party ratio.

**Table 6: Top Security Origin Domains Probing Bot Artifacts**
| Origin Domain | Visit Domains |
|---------------|---------------|
| tpc.googlesyndication.com | 10,291 |
| googleads.g.doubleclick.net | 3,980 |
| ad.doubleclick.net | 1,853 |
| secure.ace.advertising.com | 1,150 |
| www.youtube.com | 1,041 |
| nym1-ib.adnxs.com | 699 |
| media.netseer.com | 321 |
| adserver.juicyads.com | 175 |
| openload.co | 168 |
| aax-us-east.amazon-adsystem.com | 121 |

We found bot artifact probes in the contexts of 6,257 distinct security origin domains. Table 6 lists the top 10 origin domains for bot detection activity. Naturally, four of the top five are affiliated with Googleâ€™s advertising platform. Scripts running in the context of the top domain, `tpc.googlesyndication.com`, probed no less than 42 of our 49 confirmed artifacts (85%).

We believe most of these instances to be benign in intent. Advertisers have legitimate incentive to avoid paying for pointless ad impressions by blocking bots. However, large-scale (i.e., automated) web measurement accuracy may become collateral damage in this arms race. The future is not bright for naive, off-the-shelf web crawling infrastructure.

#### Popular Artifacts
**Table 7: Most-Probed Bot Artifacts**
| Artifact Feature Name | Visit Domains | Security Origins |
|-----------------------|---------------|------------------|
| HTMLDocument.$cdc_asdjflasutopfhvcZLmcfl_ | 11,409 | 887 |
| Window.domAutomationController | 11,032 | 2,317 |
| Window.callPhantom | 10,857 | 5,088 |
| Window._phantom | 10,696 | 5,052 |
| Window.awesomium | 10,650 | 203 |
| HTMLDocument.$wdc_ | 10,509 | 18 |
| Window.domAutomation | 7,013 | 2,674 |
| Window._WEBDRIVER_ELEM_CACHE | 6,123 | 1,803 |
| Window.webdriver | 2,756 | 1,832 |
| HTMLDocument.__webdriver_script_fn | 1,722 | 1,559 |
| Window.__phantomas | 1,526 | 1,390 |
| HTMLDocument.webdriver | 1,363 | 1,103 |
| Window.phantom | 1,244 | 529 |
| Window.__nightmare | 953 | 820 |
| Window.spawn | 909 | 628 |

Unsurprisingly, given our seed artifacts, most results appear associated with variants of Selenium and PhantomJS. Our locality search pattern also discovered artifacts of additional automation platforms: Awesomium, NightmareJS, and Rhino/HTMLUnit. The full list of discovered artifacts includes a superset of all the Selenium and PhantomJS artifacts tested for in the latest available version [54] of Fp-Scanner [55].

### Case Studies

#### Explicit Bot Identification
**Listing 6: Artifact Attribution in the Wild**
```javascript
detectExecEnv: function() {
    var e = "";
    if (window._phantom || /* more PhantomJS probes */) e += " phantomjs ";
    if (window.Buffer) e += " nodejs ";
    if (window.emit) e += " couchjs ";
    if (window.spawn) e += " rhino ";
    if (window.webdriver) e += " selenium ";
    if (window.domAutomation || window.domAutomationController) e += " chromium-based-automation-driver ";
    return e;
}
```
This script, loaded from `http://security.iqiyi.com/static/cook/v1/cooksdk.js`, was observed on visits to `iqiyi.com`, `qiyi.com`, `zol.com`, and `pps.tv`. The script, which appeared to be the result of automatically bundling many related library modules together, was minified but not obfuscated. It provides a rare example in which the attribution logic is fairly obvious: the presence of specific artifacts directly triggers what appears to be bot labeling via string concatenation. Note that this example uses `Window.Buffer`, one of our "possible" bot artifacts, which implies execution in the Node.js environment. Code locality strikes again: the code immediately adjacent to this excerpt includes functions that collect attributes of a containing `<iframe>` and detect the activation of "private browsing."

#### Evasive Action
**Listing 7: Bot Deflection in the Wild**
```javascript
/* Original obfuscated code excerpt */
_ = window;
if (u82222.w(u82222.O(/* ... */))) {}
else location[u82222.f(u82222.r(11) + /* ... */)]();

/* Deobfuscated version */
if (_["phantom"] || /* more PhantomJS probes */ 
    || _["Buffer"] || _["emit"] || _["spawn"]
    || _["webdriver"] || _["domAutomation"]
    || _["domAutomationController"]) {}
else location["reload"]();
```
This script, loaded exactly once from `http://www.school.kotar.co.il/`, shares the same lexical hash with 73 other scripts in our collection. These were loaded on visits to 10 different Alexa domains, including `https://www.payoneer.com/` and several `.il` domains. This script provides a clear example of artifact-based bot deflection. The obfuscation is distinctive, layering typical string garbling techniques behind a tangle of trivial functions performing simple operations.