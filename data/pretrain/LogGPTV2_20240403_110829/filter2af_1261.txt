# `unserialize` 函数的安全现状

由于恶意输入的存在，`unserialize` 函数的使用长期以来一直受到批评。利用该函数进行攻击是一种存在多年的漏洞。因此，许多内容管理系统（CMS）和框架已经禁止了其使用，转而推荐使用更为安全的 `json_decode()` 函数。尽管如此，在一些定制化网站中，这一漏洞仍然存在。对于渗透测试人员而言，若不了解目标系统的源代码，则难以有效利用此漏洞。

# 在未知环境中寻找gadget

当渗透测试人员发现了反序列化数据的方法后，接下来的任务就是找到合适的gadget。如果缺乏对应用源码的了解，那么可能需要转向二进制exploit，这通常会非常耗时。随着越来越多的Web开发者倾向于采用现成的开发框架而非从零开始编写所有代码（如Laravel、Symfony、Zend、CodeIgniter等），结合实际开发情况（例如PHP自动加载机制的广泛使用及通过composer.json管理文件依赖关系），即使在不了解具体环境的情况下，也有可能通过构建基于通用库的gadget来成功实施攻击。如果无法识别出应用程序所使用的框架或库，则逐一尝试不同的攻击载荷仍不失为一种方法。

# 构建gadget "军火库"

鉴于在未知环境中探索gadget链极为耗时，我们创建了一个类似于Java反序列化工具ysoserial的PHP gadget链库——[PHPGGC](https://github.com/ambionics/phpggc)。该项目专注于研究各大主流PHP框架，并为其构建了远程代码执行(RCE)或文件写入(file_write)类型的gadget链。

### 使用示例
- 列出现有gadget链：
  ```bash
  $ ./phpggc -l
  ```
- 生成特定版本框架下的攻击载荷：
  ```bash
  $ ./phpggc slim/rce1 'phpinfo();'
  ```

### 支持的框架与库
目前，我们已针对以下框架更新了最新的gadget链：
- Laravel
- Symfony
- SwiftMailer
- Monolog
- SlimPHP
- Doctrine
- Guzzle

更多选项及详细信息，请参考项目README文档。此外，我们也欢迎社区成员通过提交pull请求或GitHub issues来贡献新的gadget链或报告问题。

# 案例分析：利用Piwik中的对象注入漏洞

2017年8月初，Egidio Romano发现Piwik（版本低于2.16.0）中存在一个允许调用`unserialize()`函数的安全漏洞。虽然他没有提供具体的攻击载荷，但由于Piwik使用了Symfony、Zend以及Monolog等多个知名PHP库，故构建有效的攻击向量变得相对简单。本例中选择使用Monolog作为切入点。

# 参考资料
- [原文链接](https://www.ambionics.io/blog/php-generic-gadget-chains)
- [Return-Oriented Programming (ROP)](https://en.wikipedia.org/wiki/Return-oriented_programming#cite_note-2)
- [Introduction to Return-Oriented Programming (ROP)](http://codearcana.com/posts/2013/05/28/introduction-to-return-oriented-programming-rop.html)
- [ROP Attacks Overview](http://resources.infosecinstitute.com/return-oriented-programming-rop-attacks/#gref)

**Gadget定义**：指存在于目标系统内存中的可执行代码片段，攻击者可以劫持并利用这些代码片段以达成自己的目的。关于将"gadget"及其相关术语准确翻译成中文的问题，如果您有更好的建议，请随时联系我。