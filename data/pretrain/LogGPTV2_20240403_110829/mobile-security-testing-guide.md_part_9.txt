Protecting Keys in Memory
When memory dumping is part of your threat model, then keys can be accessed the moment they are actively used.
Memory dumping either requires root-access (e.g. a rooted device or jailbroken device) or it requires a patched
application with Frida (so you can use tools like Fridump). Therefore it is best to consider the following, if keys are still
needed at the device:
make sure that all cryptographic actions and the keys itself remain in the Trusted Execution Environment (e.g.
use Android Keystore) or Secure Enclave (e.g. use the Keychain and when you sign, use ECDHE).
If keys are necessary which are outside of the TEE / SE, make sure you obfuscate/encrypt them and only de-
obfuscate them during use. Always zero out keys before the memory is released, whether using native code or
not. This means: overwrite the memory structure (e.g. nullify the array) and know that most of the Immutable
types in Android (such as BigInteger and String ) stay in the heap.
Note: given the ease of memory dumping, never share the same key among accounts and/or devices, other than
public keys used for signature verification or encryption.
Protecting keys in Transport
When keys need to be transported from one device to another, or from the app to a back-end, make sure that proper
key protection is in place, by means of an transport keypair or another mechanism. Often, keys are shared with
obfuscation methods which can be easily reversed. Instead, make sure asymmetric cryptography or wrapping keys
are used.
Cryptographic APIs on Android and iOS
While same basic cryptographic principles apply independent of the particular OS, each operating system offers its
own implementation and APIs. Platform-specific cryptographic APIs for data storage are covered in greater detail in
the Testing Data Storage on Android and Testing Data Storage on iOS chapters. Encryption of network traffic,
especially Transport Layer Security (TLS), is covered in the Testing Network Communication chapter.
Cryptographic policy
In larger organizations, or when high risk applications are created, it can often be a good practice to have a
cryptographic policy, based on frameworks such as NIST Recommendation for Key Management. When basic errors
are found in the application of cryptography, it can be a good starting point of setting up a lessons learned /
cryptographic key management policy.
References
Cryptography References
PKCS #7: Cryptographic Message Syntax Version 1.5
Breaking RSA with Mangers Attack
NIST 800-38d
NIST 800-57Rev4
OWASP Mobile Top 10 2016
M5 - Insufficient Cryptography - https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-
Insufficient_Cryptography
67
Cryptography in Mobile Apps
OWASP MASVS
MSTG-ARCH-8: "There is an explicit policy for how cryptographic keys (if any) are managed, and the lifecycle of
cryptographic keys is enforced. Ideally, follow a key management standard such as NIST SP 800-57."
MSTG-CRYPTO-1: "The app does not rely on symmetric cryptography with hardcoded keys as a sole method of
encryption."
MSTG-CRYPTO-2: "The app uses proven implementations of cryptographic primitives."
MSTG-CRYPTO-3: "The app uses cryptographic primitives that are appropriate for the particular use-case,
configured with parameters that adhere to industry best practices."
MSTG-CRYPTO-4: "The app does not use cryptographic protocols or algorithms that are widely considered
depreciated for security purposes."
CWE
CWE-326 - Inadequate Encryption Strength
CWE-327 - Use of a Broken or Risky Cryptographic Algorithm
CWE-329 - Not Using a Random IV with CBC Mode
68
Testing Code Quality
Testing Code Quality
Mobile app developers use a wide variety of programming languages and frameworks. As such, common
vulnerabilities such as SQL injection, buffer overflows, and cross-site scripting (XSS), may manifest in apps when
neglecting secure programming practices.
The same programming flaws may affect both Android and iOS apps to some degree, so we'll provide an overview of
the most common vulnerability classes frequently in the general section of the guide. In later sections, we will cover
OS-specific instances and exploit mitigation features.
Injection Flaws (MSTG-ARCH-2 and MSTG-PLATFORM-2)
An injection flaw describes a class of security vulnerability occurring when user input is inserted into back-end queries
or commands. By injecting meta-characters, an attacker can execute malicious code that is inadvertently interpreted
as part of the command or query. For example, by manipulating a SQL query, an attacker could retrieve arbitrary
database records or manipulate the content of the back-end database.
Vulnerabilities of this class are most prevalent in server-side web services. Exploitable instances also exist within
mobile apps, but occurrences are less common, plus the attack surface is smaller.
For example, while an app might query a local SQLite database, such databases usually do not store sensitive data
(assuming the developer followed basic security practices). This makes SQL injection a non-viable attack vector.
Nevertheless, exploitable injection vulnerabilities sometimes occur, meaning proper input validation is a necessary
best practice for programmers.
SQL Injection
A SQL injection attack involves integrating SQL commands into input data, mimicking the syntax of a predefined SQL
command. A successful SQL injection attack allows the attacker to read or write to the database and possibly execute
administrative commands, depending on the permissions granted by the server.
Apps on both Android and iOS use SQLite databases as a means to control and organize local data storage. Assume
an Android app handles local user authentication by storing the user credentials in a local database (a poor
programming practice weâ€™ll overlook for the sake of this example). Upon login, the app queries the database to search
for a record with the username and password entered by the user:
SQLiteDatabase db;
String sql = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password +"'";
Cursor c = db.rawQuery( sql, null );
return c.getCount() != 0;
Let's further assume an attacker enters the following values into the "username" and "password" fields:
username = 1' or '1' = '1
password = 1' or '1' = '1
This results in the following query:
SELECT * FROM users WHERE username='1' OR '1' = '1' AND Password='1' OR '1' = '1'
69
Testing Code Quality
Because the condition '1' = '1' always evaluates as true, this query return all records in the database, causing the
login function to return true even though no valid user account was entered.
Ostorlab exploited the sort parameter of Yahoo's weather mobile application with adb using this SQL injection
payload.
Another real-world instance of client-side SQL injection was discovered by Mark Woods within the "Qnotes" and
"Qget" Android apps running on QNAP NAS storage appliances. These apps exported content providers vulnerable to
SQL injection, allowing an attacker to retrieve the credentials for the NAS device. A detailed description of this issue
can be found on the Nettitude Blog.
XML Injection
In a XML injection attack, the attacker injects XML meta-characters to structurally alter XML content. This can be used
to either compromise the logic of an XML-based application or service, as well as possibly allow an attacker to exploit
the operation of the XML parser processing the content.
A popular variant of this attack is XML eXternal Entity (XXE). Here, an attacker injects an external entity definition
containing an URI into the input XML. During parsing, the XML parser expands the attacker-defined entity by
accessing the resource specified by the URI. The integrity of the parsing application ultimately determines capabilities
afforded to the attacker, where the malicious user could do any (or all) of the following: access local files, trigger HTTP
requests to arbitrary hosts and ports, launch a cross-site request forgery (CSRF) attack, and cause a denial-of-service
condition. The OWASP web testing guide contains the following example for XXE:
]>&xxe;
In this example, the local file /dev/random is opened where an endless stream of bytes is returned, potentially
causing a denial-of-service.
The current trend in app development focuses mostly on REST/JSON-based services as XML is becoming less
common. However, in the rare cases where user-supplied or otherwise untrusted content is used to construct XML
queries, it could be interpreted by local XML parsers, such as NSXMLParser on iOS. As such, said input should
always be validated and meta-characters should be escaped.
Injection Attack Vectors
The attack surface of mobile apps is quite different from typical web and network applications. Mobile apps don't often
expose services on the network, and viable attack vectors on an app's user interface are rare. Injection attacks
against an app are most likely to occur through inter-process communication (IPC) interfaces, where a malicious app
attacks another app running on the device.
Locating a potential vulnerability begins by either:
Identifying possible entry points for untrusted input then tracing from those locations to see if the destination
contains potentially vulnerable functions.
Identifying known, dangerous library / API calls (e.g. SQL queries) and then checking whether unchecked input
successfully interfaces with respective queries.
During a manual security review, you should employ a combination of both techniques. In general, untrusted inputs
enter mobile apps through the following channels:
IPC calls
Custom URL schemes
70
Testing Code Quality
QR codes
Input files received via Bluetooth, NFC, or other means
Pasteboards
User interface
Verify that the following best practices have been followed:
Untrusted inputs are type-checked and/or validated using a white-list of acceptable values.
Prepared statements with variable binding (i.e. parameterized queries) are used when performing database
queries. If prepared statements are defined, user-supplied data and SQL code are automatically separated.
When parsing XML data, ensure the parser application is configured to reject resolution of external entities in
order to prevent XXE attack.
When working with x509 formatted certificate data, ensure that secure parsers are used. For instance Bouncy
Castle below version 1.6 allows for Remote Code Execution by means of unsafe reflection.
We will cover details related to input sources and potentially vulnerable APIs for each mobile OS in the OS-specific
testing guides.
Cross-Site Scripting Flaws (MSTG-ARCH-2 and MSTG-PLATFORM-2)
Cross-site scripting (XSS) issues allow attackers to inject client-side scripts into web pages viewed by users. This type
of vulnerability is prevalent in web applications. When a user views the injected script in a browser, the attacker gains
the ability to bypass the same origin policy, enabling a wide variety of exploits (e.g. stealing session cookies, logging
key presses, performing arbitrary actions, etc.).
In the context of native apps, XSS risks are far less prevalent for the simple reason these kinds of applications do not
rely on a web browser. However, apps using WebView components, such as WKWebView or the deprecated
UIWebView on iOS and WebView on Android, are potentially vulnerable to such attacks.
An older but well-known example is the local XSS issue in the Skype app for iOS, first identified by Phil Purviance.
The Skype app failed to properly encode the name of the message sender, allowing an attacker to inject malicious
JavaScript to be executed when a user views the message. In his proof-of-concept, Phil showed how to exploit the
issue and steal a user's address book.
Static Analysis
Take a close look at any WebViews present and investigate for untrusted input rendered by the app.
XSS issues may exist if the URL opened by WebView is partially determined by user input. The following example is
from an XSS issue in the Zoho Web Service, reported by Linus SÃ¤rud.
Java
webView.loadUrl("javascript:initialize(" + myNumber + ");");
Kotlin
webView.loadUrl("javascript:initialize($myNumber);")
Another example of XSS issues determined by user input is public overridden methods.
Java
@Override
public boolean shouldOverrideUrlLoading(WebView view, String url) {
71
Testing Code Quality
if (url.substring(0,6).equalsIgnoreCase("yourscheme:")) {
// parse the URL object and execute functions
}
}
Kotlin
fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
if (url.substring(0, 6).equals("yourscheme:", ignoreCase = true)) {
// parse the URL object and execute functions
}
}
Sergey Bobrov was able to take advantage of this in the following HackerOne report. Any input to the HTML
parameter would be trusted in Quora's ActionBarContentActivity. Payloads were successful using adb, clipboard data
via ModalContentActivity, and Intents from 3rd party applications.
ADB
$ adb shell
$ am start -n com.quora.android/com.quora.android.ActionBarContentActivity \
-e url 'http://test/test' -e html 'XSS'
Clipboard Data
$ am start -n com.quora.android/com.quora.android.ModalContentActivity \
-e url 'http://test/test' -e html \
''
3rd party Intent in Java or Kotlin:
Intent i = new Intent();
i.setComponent(new ComponentName("com.quora.android",
"com.quora.android.ActionBarContentActivity"));
i.putExtra("url","http://test/test");
i.putExtra("html","XSS PoC ");
view.getContext().startActivity(i);
val i = Intent()
i.component = ComponentName("com.quora.android",
"com.quora.android.ActionBarContentActivity")
i.putExtra("url", "http://test/test")
i.putExtra("html", "XSS PoC ")
view.context.startActivity(i)
If a WebView is used to display a remote website, the burden of escaping HTML shifts to the server side. If an XSS
flaw exists on the web server, this can be used to execute script in the context of the WebView. As such, it is
important to perform static analysis of the web application source code.
Verify that the following best practices have been followed:
No untrusted data is rendered in HTML, JavaScript or other interpreted contexts unless it is absolutely necessary.
Appropriate encoding is applied to escape characters, such as HTML entity encoding. Note: escaping rules
become complicated when HTML is nested within other code, for example, rendering a URL located inside a
JavaScript block.
72
Testing Code Quality
Consider how data will be rendered in a response. For example, if data is rendered in a HTML context, six control
characters that must be escaped:
Character Escaped
& &amp;
 &gt;
" &quot;
' &#x27;
/ &#x2F;
For a comprehensive list of escaping rules and other prevention measures, refer to the OWASP XSS Prevention
Cheat Sheet.
Dynamic Analysis
XSS issues can be best detected using manual and/or automated input fuzzing, i.e. injecting HTML tags and special
characters into all available input fields to verify the web application denies invalid inputs or escapes the HTML meta-
characters in its output.
A reflected XSS attack refers to an exploit where malicious code is injected via a malicious link. To test for these
attacks, automated input fuzzing is considered to be an effective method. For example, the BURP Scanner is highly
effective in identifying reflected XSS vulnerabilities. As always with automated analysis, ensure all input vectors are
covered with a manual review of testing parameters.
Memory Corruption Bugs (MSTG-CODE-8)
Memory corruption bugs are a popular mainstay with hackers. This class of bug results from a programming error that
causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on
this behavior to hijack the execution flow of the vulnerable program and execute arbitrary code. This kind of
vulnerability occurs in a number of ways:
Buffer overflows: This describes a programming error where an app writes beyond an allocated memory range for
a particular operation. An attacker can use this flaw to overwrite important control data located in adjacent
memory, such as function pointers. Buffer overflows were formerly the most common type of memory corruption
flaw, but have become less prevalent over the years due to a number of factors. Notably, awareness among
developers of the risks in using unsafe C library functions is now a common best practice plus, catching buffer
overflow bugs is relatively simple. However, it is still worth testing for such defects.
Out-of-bounds-access: Buggy pointer arithmetic may cause a pointer or index to reference a position beyond the
bounds of the intended memory structure (e.g. buffer or list). When an app attempts to write to an out-of-bounds
address, a crash or unintended behavior occurs. If the attacker can control the target offset and manipulate the
content written to some extent, code execution exploit is likely possible.
Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted or
deallocated, but the object pointer is not reset. If the program later uses the dangling pointer to call a virtual
function of the already deallocated object, it is possible to hijack execution by overwriting the original vtable
pointer. Alternatively, it is possible to read or write object variables or other memory structures referenced by a
dangling pointer.
73
Testing Code Quality
Use-after-free: This refers to a special case of dangling pointers referencing released (deallocated) memory. After
a memory address is cleared, all pointers referencing the location become invalid, causing the memory manager
to return the address to a pool of available memory. When this memory location is eventually re-allocated,
accessing the original pointer will read or write the data contained in the newly allocated memory. This usually
leads to data corruption and undefined behavior, but crafty attackers can set up the appropriate memory locations
to leverage control of the instruction pointer.
Integer overflows: When the result of an arithmetic operation exceeds the maximum value for the integer type
defined by the programmer, this results in the value "wrapping around" the maximum integer value, inevitably
resulting in a small value being stored. Conversely, when the result of an arithmetic operation is smaller than the
minimum value of the integer type, an integer underflow occurs where the result is larger than expected. Whether
a particular integer overflow/underflow bug is exploitable depends on how the integer is used â€“ for example, if the
integer type were to represent the length of a buffer, this could create a buffer overflow vulnerability.
Format string vulnerabilities: When unchecked user input is passed to the format string parameter of the printf
family of C functions, attackers may inject format tokens such as â€˜%câ€™ and â€˜%nâ€™ to access memory. Format string
bugs are convenient to exploit due to their flexibility. Should a program output the result of the string formatting
operation, the attacker can read and write to memory arbitrarily, thus bypassing protection features such as
ASLR.
The primary goal in exploiting memory corruption is usually to redirect program flow into a location where the attacker
has placed assembled machine instructions referred to as shellcode. On iOS, the data execution prevention feature
(as the name implies) prevents execution from memory defined as data segments. To bypass this protection,
attackers leverage return-oriented programming (ROP). This process involves chaining together small, pre-existing
code chunks ("gadgets") in the text segment where these gadgets may execute a function useful to the attacker or,
call mprotect to change memory protection settings for the location where the attacker stored the shellcode.
Android apps are, for the most part, implemented in Java which is inherently safe from memory corruption issues by
design. However, native apps utilizing JNI libraries are susceptible to this kind of bug. Similarly, iOS apps can wrap
C/C++ calls in Obj-C or Swift, making them susceptible to these kind of attacks.