近期各大CTF中出现过不少C++异常处理机制相关的赛题。本文将介绍GNUC++异常处理的基本机制、可执行文件中的异常处理帧结构、以及`__gxx_personality_seh0`对Language-specific handler data 数据的解析过程。
### CPP 异常处理概述
c++中，异常处理的实现主要是要处理两件事：
  1. 根据抛出的异常找到合适的异常处理代码（即，捕获对应类型异常的`catch` 块）。
  2. 当抛出异常的函数无法处理被抛出的异常时（如下面的`doThrow`函数），需要合理清理当前栈帧上的对象，回退栈帧到上一层函数（清理栈上对象可能需要返回到对应函数内执行一些 `cleanup` 块）。
并继续在上层函数内寻找异常处理代码。如此递归向上回滚栈帧直到栈帧为空或找到可以处理当前异常的`catch`块。
以下面的程序为例：
    // g++ -std=c++11 test.cc -o test.exe
    #include 
    #include 
    #include 
    using namespace std;
    struct ExceptionA : public exception
    {
      ExceptionA(int a, int b):a(a),b(b){}
      int a, b;
    };
    struct ExceptionB : public exception
    {
      ExceptionB(int a, int b) {}
    };
    struct ExceptionC : public exception
    {
      ExceptionC(int a, int b) {}
    };
    class Strobj {
     public:
      Strobj()=delete;
      Strobj(char *a) {
        int len = strlen(a);
        str_ = new char[len+1];
        strcpy(str_, a);
      }
      char *str_;
    };
    Strobj doThrow(bool doth) {
      int a = 1, b = 2;
      Strobj oops("123456");
      if (doth) 
        throw ExceptionA(a, b);
      return oops;
    }
    int main()
    {
      try
      {
        Strobj a = doThrow(true);
        std::cout  ### The Unwind Process
>
> The standard ABI exception handling / unwind process begins with the raising
> of an exception. This call specifies an exception object and an exception
> class.  
>  The runtime framework then starts a two-phase process:
>
>   * In the search phase, the framework repeatedly calls the personality
> routine, with the _UA_SEARCH_PHASE flag, first for the current PC and
> register state, and then unwinding a frame to a new PC at each step, until
> the personality routine reports either success (a handler found in
> thequeried frame) or failure (no handler) in all frames.  
>  It does not actually restore the unwound state,and the personality routine
> must access the state through the API. If the search phase reports failure,
> e.g. because no handler was found, it will call terminate() rather than
> commence phase 2.
>   * If the search phase reports success, the framework restarts in the
> cleanup phase.  
>  Again, it repeatedly calls the personality routine, with the
> _UA_CLEANUP_PHASE flag, first for the current PC and register state, and
> then unwinding a frame to a new PC at each step, until it gets to the frame
> with an identified handler.  
>  At that point, it restores the register state, and controlis transferred to
> the user landing pad code.
>
简单来说，异常处理流程就是向上搜索栈帧，找到相应异常处理函数，然后跳转过去的流程。它分为两个阶段，阶段一是只搜索栈帧，寻找是否存在能`catch`当前异常的处理代码，如果不存在，就调用
`terminate` 函数结束程序的运行。如果找到了，进入阶段二。在阶段二，开始真正回滚栈帧，调用 `cleanup` 块清理栈上局部对象，
直到回滚到存在相应异常处理代码的那个函数，跳转到对应的`catch`块。
### GNUC++ 异常对象的数据结构
    // Memory layout: 
    // +---------------------------+-----------------------------+---------------+
    // | __cxa_exception                _Unwind_Exception        | thrown object |
    // +---------------------------+-----------------------------+---------------+
    struct _Unwind_Exception {
        uint64 exception_class; // GNUC++下， = 0x434C4E47432B2B00 ("CLNGC++\0")
        _Unwind_Exception_Cleanup_Fn exception_cleanup;
        uint64 private_1;
        uint64 private_2;
    };
    struct __cxa_exception {
        std::type_info * exceptionType;
        void (*exceptionDestructor) (void *);
        unexpected_handler unexpectedHandler;
        terminate_handler terminateHandler;
        __cxa_exception * nextException;
        int handlerCount;
        int handlerSwitchValue;
        const char * actionRecord;
        const char * languageSpecificData;
        void * catchTemp;
        void * adjustedPtr;
        _Unwind_Exception unwindHeader;
    };
上面是一个 C++ 异常对象的内存布局示意图。其中，`thrown object` 部分为用户自定义的异常信息，如本文例子中 `ExceptionA`
对象。`__cxa_exception`和`_Unwind_Exception`分别是 libc++abi 和 libunwind 层定义的对象。创建一个
`ExceptionA` 异常处理对象需要如下两步：
第一步`cxa_allocate_exception`先申请 大小为 `sizeof(__cxa_exception) +
sizeof(ExceptionA)` 的内存空间（记为 `buf`），然后在`buf`前 `sizeof(__cxa_exception)`
大小的空间上初始化 `__cxa_exception` 对象，最后 `return buf + sizeof(__cxa_exception)`。
第二步调用`ExceptionA`的构造函数，在 `buf` 后 `sizeof(ExceptionA)` 大小的空间上初始化 `ExceptionA`
实例。
通过这样的内存布局，在知道`__cxa_exception`、`_Unwind_Exception`两个对象中任意一个对象地址的情况下，可以仅通过加减运算得到另外两个对象的地址。
注：上面的内存布局是简化版本的，实际上`_Unwind_Exception`长度是可变的（视`exception_class`成员值而定），通过`__cxa_exception`或`_Unwind_Exception`对象得到`thrown
object`的标准做法是读取`__cxa_exception`的`adjustedPtr`成员变量 ，而 `adjustedPtr` 的值在 C++
Runtime 代码中计算得到。
### 异常处理帧
这一部分内容与平台相关，比如Windows下的MSVC、Mingw-g++实现的是同一套格式。本节将对 Windows 下的 EXE
格式中的异常处理帧作一个简单的介绍。Linux平台下 ELF 文件的异常处理相关数据结构可以移步：[ **Linux Standard Base Core
Specification, Generic Part-Exception
Frames**](https://refspecs.linuxbase.org/LSB_5.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html)。
MSVC++或者Mingw-g++编译的 EXE 文件中一般会存在 `.pdata` 段，并且在段内有一个`Runtime_Function` 表。通过
`RUNTIME_FUNCTION` 结构，我们可以找到每个函数对应的 `UNWIND_INFO`
结构体对象。这个结构存储着对应函数异常处理相关的信息，包括函数中存在哪些`try`块，在这些`try`块中抛出异常后回滚栈帧需要调用的`cleanup`块们和可能可以处理异常的`catch`块们，以及函数序言中对栈做了哪些操作（回滚恢复到上层栈帧所需]）等。
`UNWIND_INFO` 结构体可以参考 [struct-unwind_info](https://docs.microsoft.com/en-us/cpp/build/exception-handling-x64?view=msvc-170#struct-unwind_info) 。
下面是本文例子中 `main` 函数的 `UNWIND_INFO` 的部分结构体：
其中，最关键的是 从 `0x4070C8` 开始的 `Exception Handler` 结构体，它有两个成员：
  1. `0x4070C8` 处的 `Address of exception handler` 和 
  2. `0x4070CC` 开始的 `Language-specific handler data (optional)`
我们看到本例中异常处理采用的 `personality` 函数是
`__gxx_personality_seh0`，这与GNUC++的实现一致。这是因为上图中的二进制文件由 mingw-g++ 编译，而
mingw-g++实现的是 GNUC++ 那一套ABI。而 `Language-specific handler data` 的具体结构还不得而知。
### Language-specific handler data 解析
在第二节中，我们提到 Runtime 中负责解析 异常处理相关的数据结构 的函数正是 `personality` 函数。可以通过阅读
`__gxx_personality_seh0` 函数的实现来帮助我们解析这里的 `Language-specific handler data` 。
在此之前，我们先来看看指向 `Language-specific handler data` 的指针是如何被传递给 `personality`
函数的，方便我们在 `personality` 函数的实现中找到对应的解析代码。首先是 `personality` 函数的声明：
    typedef EXCEPTION_DISPOSITION (*PEXCEPTION_ROUTINE) (
        IN PEXCEPTION_RECORD ExceptionRecord,
        IN ULONG64 EstablisherFrame,
        IN OUT PCONTEXT ContextRecord,
        IN OUT PDISPATCHER_CONTEXT DispatcherContext
    );
第四个参数是 `DispatcherContext` 结构体，这个结构体是这样的：
    typedef struct _DISPATCHER_CONTEXT {
        ULONG64 ControlPc;
        ULONG64 ImageBase;
        PRUNTIME_FUNCTION FunctionEntry;
        ULONG64 EstablisherFrame;
        ULONG64 TargetIp;
        PCONTEXT ContextRecord;
        PEXCEPTION_ROUTINE LanguageHandler;
        PVOID HandlerData;
    } DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;