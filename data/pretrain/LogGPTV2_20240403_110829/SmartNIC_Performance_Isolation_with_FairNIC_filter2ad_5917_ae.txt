with more sophisticated CPUs that support hardware-based cache
isolation techniques such as cache tagging.
Coprocessor isolation. FairNIC’s rate-limiting approach to copro-
cessor isolation is designed to be architecturally independent as it
models coprocessors based solely on their throughput characteris-
tics. While SmartNICs differ in the set of coprocessors they support,
each of these coprocessors can employ a rate-limiter customized
to its performance properties for isolating its tenant workloads.
Moreover, rate-limiting can be turned on or off separately for each
coprocessor, allowing for hardware designs where a subset of co-
processors employ their own scheduling in hardware while the rest
of them continue to use rate-limiting.
8 RELATED WORK
Cloud datacenter virtualization stacks have increasingly focused
on network performance isolation; the work is far too voluminous
to catalog here. We observe, however, that some operators—like
Google—seem focused on software mechanisms. PicNIC [30] uti-
lizes user-specified service-level agreements as criteria for sharing,
and CPU-enforced fair queuing for rate limiting. Others, like Ama-
zon and Microsoft, implement network virtualization functionality
in custom SmartNIC hardware [2, 16]. In all cases, however, they
Paper
Approx FairQ [46]
KV-Direct [32]
Floem [42]
ClickNP [33]
ClickNP [33]
AccelNet [16]
NBA [29]
E3 [36]
λ-NIC [11]
iPipe [35]
iPipe [35]
iPipe [35]
NetChain [25]
NetCache [26]
Program
Flow monitor
KV store
Top-N ranker
Rate limiter
Firewall
SDN stack
Router
Microservices
Microservices
KV store
Lock server
Analytics
Chain replication
KV store
Hardware
Switch
FPGA NIC
SoC NIC
FPGA NIC
FPGA NIC
FPGA NIC
GPU
SoC NIC
ASIC NIC
SoC NIC
SoC NIC
SoC NIC
Switch
Switch
Table 3: Some hardware-accelerated projects
do not currently address performance isolation of programmable
NIC resources found in SoC SmartNICs.
Recent research has shown significant benefits from offloading
certain functions from host CPUs to more targeted hardware. Ta-
ble 3 showcases the variety of these efforts. Most applications are
purpose-built for the particular platform under consideration, and
are not amenable to use in a multi-tenant environment. Moreover,
developers require intimate knowledge of the hardware [16].
In contrast, several recent efforts have focused on developing
programmer-friendly frameworks to facilitate offloading general-
purpose applications to SmartNICs. The authors of Floem [42] note
that state migration between host and SmartNIC is difficult for de-
velopers to reason about and provide an automatic framework for
state migration. Ipipe [35] authors further point out that reasoning
about performance is difficult, and propose automatic scheduling
and migration of tasks between host and NIC based on runtime
performance. Uno [31] identifies that chains of network functions
could behave poorly due to repeated PCIe crossings and provided
automatic support for network function placement. It would be in-
teresting to explore implementing FairNIC’s isolation mechanisms
in the context of one of them.
9 CONCLUSION
We take a first step towards enabling SoC SmartNIC use in multi-
tenant cloud environments. We identify key points of performance
contention such as packet ingress and egress, core assignment,
memory access, and coprocessor usage, and implement low-cost
isolation mechanisms. We show the effectiveness of our Cavium
prototype for two representative cloud applications. FairNIC is lim-
ited to performance isolation; security is beyond our scope. Yet, our
results suggest it may indeed be possible to maintain the perfor-
mance benefits of SmartNICs in a multi-tenant cloud environment.
Hence, complete SmartNIC virtualization remains an important
topic for future study; our work does not raise any ethical issues.
ACKNOWLEDGEMENTS
This work was supported in part by the National Science Founda-
tion (CNS-1564185) and the Advanced Research Projects Agency-
Energy. We are indebted to Shay Gal-On, Weishan Sun, Ugendresh-
war Kudupudi, Jim Ballingal, and others at Cavium/Marvell for
their generous support and assistance, and to Geoff Voelker, the
anonymous reviewers, and our shepherd Anirudh Sivaraman for
feedback on earlier drafts of this manuscript. Ming Liu and Dave
Andersen provided extensive help with their respective codebases.
692
SmartNIC Performance Isolation with FairNIC
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
REFERENCES
[1] Mohammad Alizadeh, Albert Greenberg, Dave Maltz, Jitu Padhye, Parveen Pate,
Balaji Prabhakar, Sudipta Sengupta, and Murari Sridharan. 2010. Data Center
TCP (DCTCP). In Proc. ACM SIGCOMM.
[2] Amazon. 2020. AWS Nitro System. https://aws.amazon.com/ec2/nitro/. (2020).
[3] Silas Boyd-Wickizer, Austin T. Clements, Yandong Mao, Aleksey Pesterev,
M. Frans Kaashoek, Robert Morris, and Nickolai Zeldovich. 2010. An Analysis of
Linux Scalability to Many Cores. In Proc. USENIX OSDI.
products/ethernet-connectivity/smartnic/ps225. (2019).
[4] Broadcom. 2019. Broadcom Stringray SmartNIC. https://www.broadcom.com/
[5] Josiah L. Carlson. 2013. Redis in Action. Manning Publications Co., USA.
[6] Cavium. 2017. Liquid IO II 10/25G Smart NIC Family. (2017).
[7] Cavium. 2017. LiquidIO OVS Software Architecture. (Dec. 2017). https://www.
marvell.com/documents/ocwqbcxlc2ir4o7n16rn/.
[8] Michael K. Chen, Xiao Feng Li, Ruiqi Lian, Jason H. Lin, Lixia Liu, Tao Liu, and
Roy Ju. 2005. Shangri-La: Achieving High Performance from Compiled Network
Applications while Enabling Ease of Programming. In Proceedings of the ACM
SIGPLAN Conference on Programming Language Design and Implementation.
[9] Peter M. Chen, Wee Teck Ng, Subhachandra Chandra, Christopher Aycock, Gu-
rushankar Rajamani, and David Lowell. 1996. The Rio File Cache: Surviving
Operating System Crashes. In Proceedings of the International Conference on Ar-
chitectural Support for Programming Languages and Operating Systems (ASPLOS).
[10] Dah-Ming Chiu and Raj Jain. 1989. Analysis of the Increase and Decrease Algo-
rithms for Congestion Avoidance in Computer Networks. Journal of Computer
Networks and ISDN Systems 17, 1 (June 1989).
[11] Sam Choi, Muhammad Shahbaz, Balaji Prabhakar, and Mendel Rosenblum. 2019.
λ-NIC: Interactive Serverless Compute on Programmable SmartNICs.
(Sept.
2019). http://arxiv.org/abs/1909.11958v1.
[12] Yaozu Dong, Xiaowei Yang, Xiaoyong Li, Jianhui Li, Kun Tian, and Haibing Guan.
2010. High performance network virtualization with SR-IOV. J. Parallel and
Distrib. Comput. 72, 1–10.
[13] Norbert Egi, Adam Greenhalgh, Mark Handley, Gianluca Iannaccone, Maziar
Manesh, Laurent Mathy, and Sylvia Ratnasamy. 2009. Improved Forwarding Ar-
chitecture and Resource Management for Multi-Core Software Routers. Network
and Parallel Computing Workshops, IFIP International Conference on 0, 117–124.
[14] Haggai Eran, Lior Zeno, Maroun Tork, Gabi Malka, and Mark Silberstein. 2019.
NICA: An Infrastructure for Inline Acceleration of Network Applications. In
2019 USENIX Annual Technical Conference (USENIX ATC 19). USENIX Association,
Renton, WA, 345–362.
[15] Bin Fan, David G. Andersen, and Michael Kaminsky. 2013. MemC3: Compact
and Concurrent MemCache with Dumber Caching and Smarter Hashing. In
Proceedings of the 10th USENIX Symposium on Networked Systems Design and
Implementation (NSDI). Lombard, IL, 371–384.
[16] Daniel Firestone, Andrew Putnam, Sambhrama Mundkur, Derek Chiou, Alireza
Dabagh, Mike Andrewartha, Hari Angepat, Vivek Bhanu, Adrian Caulfield, Eric
Chung, Harish Kumar Chandrappa, Somesh Chaturmohta, Matt Humphrey, Jack
Lavier, Norman Lam, Fengfen Liu, Kalin Ovtcharov, Jitu Padhye, Gautham Popuri,
Shachar Raindel, Tejas Sapre, Mark Shaw, Gabriel Silva, Madhan Sivakumar,
Nisheeth Srivastava, Anshuman Verma, Qasim Zuhair, Deepak Bansal, Doug
Burger, Kushagra Vaid, David A. Maltz, and Albert Greenberg. 2018. Azure
Accelerated Networking: SmartNICs in the Public Cloud. In Proceedings of the 15th
USENIX Symposium on Networked Systems Design and Implementation (NSDI).
[17] Brad Fitzpatrick. 2004. Distributed Caching with Memcached. Linux J. 2004, 124
(Aug. 2004), 5.
[18] Linux Foundation. 2015. Data Plane Development Kit (DPDK). (2015). http:
//www.dpdk.org
Accessed: 2020-01-31.
[19] Linux Foundation. 2020. Open vSwitch. https://www.openvswitch.org/. (2020).
[20] Ali Ghodsi, Vyas Sekar, Matei Zaharia, and Ion Stoica. 2012. Multi-Resource
Fair Queueing for Packet Processing. In Proceedings of the ACM SIGCOMM 2012
Conference on Applications, Technologies, Architectures, and Protocols for Computer
Communication (SIGCOMM ’12). Association for Computing Machinery, New
York, NY, USA, 1–12.
[21] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014.
Out of control: Overcoming control-flow integrity. In 2014 IEEE Symposium on
Security and Privacy. IEEE, 575–589.
[22] Irfan Habib. 2008. Virtualization with KVM. Linux J. 2008, 166, Article Article 8
(Feb. 2008), 1 pages.
[23] Intel. 2019. Netronome-Agilio-SmartNICs. (2019). Accessed: 2019-03-22.
[24] Vimalkumar Jeyakumar, Mohammad Alizadeh, David Mazières, Balaji Prabhakar,
Albert Greenberg, and Changhoon Kim. 2013. EyeQ: Practical Network Perfor-
mance Isolation at the Edge. In Presented as part of the 10th USENIX Symposium
on Networked Systems Design and Implementation (NSDI 13). USENIX, Lombard,
IL, 297–311.
[25] Xin Jin, Xiaozhou Li, Haoyu Zhang, Nate Foster, Jeongkeun Lee, Robert Soulé,
Changhoon Kim, and Ion Stoica. 2018. NetChain: Scale-Free Sub-RTT Coordina-
tion. In Proc. USENIX NSDI.
[26] Xin Jin, Xiaozhou Li, Haoyu Zhang, Robert Soulé, Jeongkeun Lee, Nate Foster,
Changhoon Kim, and Ion Stoica. 2017. NetCache: Balancing Key-Value Stores
with Fast In-Network Caching. In Proc. ACM SOSP.
[27] Anuj Kalia, Michael Kaminsky, and David G. Andersen. 2016. Design Guidelines
for High Performance RDMA Systems. In Proceedings of the USENIX Annual
Technical Conference (ATC).
[28] Ahmed Khawaja, Joshua Landgraf, Rohith Prakash, Michael Wei, Eric Schkufza,
and Christopher J. Rossbach. 2018. Sharing, Protection, and Compatibility for
Reconfigurable Fabric with AmorphOS. In Proceedings of the USENIX Symposium
on Operating Systems Design and Implementation (OSDI).
[29] Joongi Kim, Keon Jang, Keunhong Lee, Sangwook Ma, Junhyun Shim, and Sue
Moon. 2015. NBA (Network Balancing Act): A High-performance Packet Pro-
cessing Framework for Heterogeneous Processors. In Proc. ACM EuroSys.
[30] Praveen Kumar, Nandita Dukkipati, Nathan Lewis, Yi Cui, Yaogong Wang, Chong-
gang Li, Valas Valancius, Jake Adriaens, Steve Gribble, Nate Foster, and Amin
Vahdat. 2019. PicNIC: Predictable Virtualized NIC. In Proc. ACM SIGCOMM.
[31] Yanfang Le, Hyunseok Chang, Sarit Mukherjee, Limin Wang, Aditya Akella,
Michael M. Swift, and T. V. Lakshman. 2017. UNO: Uniflying Host and Smart
NIC Offload for Flexible Packet Processing. In Proc. ACM SoCC.
[32] Bojie Li, Zhenyuan Ruan, Wencong Xiao, Yuanwei Lu, Yongqiang Xiong, Andrew
Putnam, Enhong Chen, and Lintao Zhang. 2017. KV-Direct: High-Performance
In-Memory Key-Value Store with Programmable NIC. In Proc. ACM SOSP.
[33] Bojie Li, Kun Tan, Larry Luo, Renqian Luo, Yanqing Peng, Ningyi Xu, Yongqiang
Xiong, and Peng Cheng. 2016. ClickNP: Highly Flexible and High-performance
Network Processing with Reconfigurable Hardware. In Proceedings of the ACM
SIGCOMM Conference.
[34] Jiuxing Liu, Amith Mamidala, Abhinav Vishnn, and Dhabaleswar K. Panda. 2004.
Performance evaluation of InfiniBand with PCI Express. In Proceedings of Sympo-
sium on High Performance Interconnects.
[35] Ming Liu, Tianyi Cui, Henry Schuh, Arvind Krishnamurthy, Simon Peter, and
Karan Gupta. 2019. Offloading Distributed Applications onto SmartNICs using
iPipe. In Proceedings of the ACM SIGCOMM Conference.
[36] Ming Liu, Simon Peter, Arvind Krishnamurthy, and Phitchaya Mangpo
Phothilimthana. 2019.
E3: Energy-efficient Microservices on SmartNIC-
accelerated Servers. In Proceedings of the USENIX Annual Technical Conference.
[37] Michael Marty, Marc de Kruijf, Jacob Adriaens, Christopher Alfeld, Sean Bauer,
Carlo Contavalli, Michael Dalton, Nandita Dukkipati, William C. Evans, Steve
Gribble, Nicholas Kidd, Roman Kononov, Gautam Kumar, Carl Mauer, Emily
Musick, Lena Olson, Erik Rubow, Michael Ryan, Kevin Springborn, Paul Turner,
Valas Valancius, Xi Wang, and Amin Vahdat. 2019. Snap: A Microkernel Approach
to Host Networking. In Proceedings of the 27th ACM Symposium on Operating
Systems Principles (SOSP ’19). Association for Computing Machinery, New York,
NY, USA, 399–413.
[38] Mellanox. 2018. Mellanox BuleField SmartNIC. (Dec. 2018). http://www.mellanox.
com/page/products_dyn?product_family=275&mtag=bluefield_smart_nic.
[39] Soo-Jin Moon, Vyas Sekar, and Michael K. Reiter. 2015. Nomad: Mitigating
Arbitrary Cloud Side Channels via Provider-Assisted Migration. In Proceedings
of the ACM Conference on Computer and Communications Security.
[40] Rolf Neugebauer, Gianni Antichi, José Fernando Zazo, Yury Audzevich, Sergio
López-Buedo, and Andrew W. Moore. 2018. Understanding PCIe performance
for end host networking. In Proceedings of the ACM SIGCOMM Conference.
nism. (2005).
[41] D Page. 2005. Partitioned Cache Architecture as a Side-Channel Defence Mecha-
[42] Phitchaya Mangpo Phothilimthana, Ming Liu, Antoine Kaufmann, Simon Peter,
Rastislav Bodik, and Thomas Anderson. 2018. Floem: A Programming System
for NIC-Accelerated Network Applications. In Proceedings of USENIX Symposium
on Operating System Design and Implementation (OSDI).
[43] Barath Raghavan, Kashi Vishwanath, Sriram Ramabhadran, Kenneth Yocum,
and Alex C. Snoeren. 2007. Cloud Control with Distributed Rate Limiting. In
Proceedings of the ACM SIGCOMM Conference. Kyoto, Japan. Best student paper.
[44] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009. Hey,
You, Get Off of My Cloud: Exploring Information Leakage in Third-Party Compute
Clouds. In Proceedings of the ACM Conference on Computer and Communications
Security. Chicago, IL. Test of Time Award.
[45] Abraham Shacham, Bob Monsour, Roy Pereira, and Matt Thomas. 2001. IP Payload
Compression Protocol (IPComp). RFC 3173. Internet Engineering Task Force.
[46] Naveen Kr. Sharma, Ming Liu, Kishore Atreya, and Arvind Krishnamurthy. 2018.
Approximating Fair Queueing on Reconfigurable Switches. In Proc. USENIX NSDI.
[47] M. Shreedhar and G. Varghese. 1996. Efficient fair queuing using deficit round-
robin. IEEE/ACM Transactions on Networking 4, 3 (June 1996), 375–385.
[48] Brent Stephens, Aditya Akella, and Michael Swift. 2019. Loom: Flexible and
Efficient NIC Packet Scheduling. In 16th USENIX Symposium on Networked Systems
Design and Implementation (NSDI 19). USENIX Association, Boston, MA, 33–46.
[49] Brent Stephens, Aditya Akella, and Michael M. Swift. 2018. Your Programmable
NIC Should Be a Programmable Switch. In Proc. ACM HotNets.
in memory. In 2013 IEEE Symposium on Security and Privacy. IEEE, 48–62.
[50] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. Sok: Eternal war
693