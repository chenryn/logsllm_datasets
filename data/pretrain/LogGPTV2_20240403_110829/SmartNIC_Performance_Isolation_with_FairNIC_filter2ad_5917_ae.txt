### Enhanced CPU and Coprocessor Isolation Techniques

Modern CPUs are increasingly incorporating sophisticated hardware-based cache isolation techniques, such as cache tagging, to improve performance and security. Similarly, FairNIC employs a rate-limiting approach for coprocessor isolation that is designed to be architecturally independent. This method models coprocessors based solely on their throughput characteristics, allowing for flexibility across different SmartNICs.

#### Coprocessor Isolation with Rate-Limiting

FairNIC's rate-limiting approach is versatile and can be customized for each coprocessor based on its specific performance properties. This ensures that tenant workloads are effectively isolated. Additionally, the rate-limiting feature can be independently enabled or disabled for each coprocessor, providing the flexibility to use custom scheduling in hardware for some coprocessors while others continue to rely on rate-limiting.

### Related Work

Recent advancements in cloud datacenter virtualization have placed significant emphasis on network performance isolation. While a comprehensive review of all related work is beyond the scope of this paper, it is worth noting that major operators like Google, Amazon, and Microsoft have implemented various mechanisms to achieve this. For example, PicNIC [30] uses user-specified service-level agreements (SLAs) and CPU-enforced fair queuing for rate limiting. In contrast, Amazon and Microsoft have developed custom SmartNIC hardware [2, 16] to implement network virtualization functionality. However, these solutions do not currently address the performance isolation of programmable NIC resources found in SoC SmartNICs.

#### Hardware-Accelerated Projects

Table 3 highlights several hardware-accelerated projects, showcasing the variety of applications and the hardware platforms they use. Most of these applications are purpose-built for specific platforms and are not suitable for multi-tenant environments. Developers often need deep knowledge of the underlying hardware to effectively utilize these platforms [16].

| Paper | Approx FairQ [46] | KV-Direct [32] | Floem [42] | ClickNP [33] | ClickNP [33] | AccelNet [16] | NBA [29] | E3 [36] | Î»-NIC [11] | iPipe [35] | iPipe [35] | iPipe [35] | NetChain [25] | NetCache [26] |
|-------|-------------------|----------------|-------------|---------------|---------------|----------------|-----------|----------|--------------|-------------|-------------|-------------|----------------|----------------|
| Program | Flow monitor | KV store | Top-N ranker | Rate limiter | Firewall | SDN stack | Router | Microservices | Microservices | KV store | Lock server | Analytics | Chain replication | KV store |
| Hardware | Switch | FPGA NIC | SoC NIC | FPGA NIC | FPGA NIC | FPGA NIC | GPU | SoC NIC | ASIC NIC | SoC NIC | SoC NIC | SoC NIC | Switch | Switch |

#### Programmer-Friendly Frameworks

Several recent efforts have focused on developing frameworks that make it easier for developers to offload general-purpose applications to SmartNICs. For instance, Floem [42] provides an automatic framework for state migration between the host and SmartNIC, addressing the complexity of state management. iPipe [35] proposes automatic scheduling and migration of tasks based on runtime performance, simplifying the task of reasoning about performance. Uno [31] addresses the issue of repeated PCIe crossings by providing automatic support for network function placement. Exploring the integration of FairNIC's isolation mechanisms within these frameworks could be a promising direction for future research.

### Conclusion

This work represents a significant step towards enabling the use of SoC SmartNICs in multi-tenant cloud environments. We have identified key points of performance contention, such as packet ingress and egress, core assignment, memory access, and coprocessor usage, and implemented low-cost isolation mechanisms. Our prototype, tested with two representative cloud applications, demonstrates the effectiveness of our approach. While FairNIC focuses on performance isolation, it does not address security, which remains an important area for future study. Our results suggest that it is possible to maintain the performance benefits of SmartNICs in a multi-tenant environment, making complete SmartNIC virtualization an important topic for further research.

### Acknowledgements

This work was supported in part by the National Science Foundation (CNS-1564185) and the Advanced Research Projects Agency-Energy. We are grateful to Shay Gal-On, Weishan Sun, Ugendreshwar Kudupudi, Jim Ballingal, and others at Cavium/Marvell for their generous support and assistance. We also thank Geoff Voelker, the anonymous reviewers, and our shepherd Anirudh Sivaraman for their valuable feedback on earlier drafts of this manuscript. Ming Liu and Dave Andersen provided extensive help with their respective codebases.

### References

[References listed here, formatted and organized as per the original text]

---

This revised version aims to enhance clarity, coherence, and professionalism, making the content more accessible and structured.