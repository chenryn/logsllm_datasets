### 移动APP风险防护与安全测评
#### Android平台

**前言**
随着移动应用的普及，Android开发者面临着越来越多的安全挑战，如防破解、防二次打包等。为了应对这些威胁，越来越多的开发者开始寻求有效的安全保护方案。

**APP面临的安全威胁**
1. **盗版**
   - 代码修改（植入广告、移除功能）
   - 资源修改（替换界面、篡改链接）
   - 破解（解除付费限制）
   - 篡改应用数据（例如游戏金币篡改）
   - 挂马、添加恶意代码及病毒（隐私窃取、交易篡改）

2. **数据篡改**
   - 动态注入：监听、拦截、窃取和修改数据
   - 本地数据修改：篡改数据库文件
   - 服务器欺骗：发送虚假数据至服务器

3. **山寨**
   - 应用名称复制或模仿
   - 应用图标复制或模仿
   - 应用内容复制或模仿

**APP加固技术**
为了提高APP的安全性，许多开发者选择使用加固技术来防止二次打包（盗版）、数据篡改等风险。常见的加固服务包括：

- **防止逆向分析**：加密app代码，阻止反编译。
- **防止二次打包**：对app完整性进行校验，防止盗版。
- **防止调试及注入**：阻止动态调试注入，防止外挂、木马窃取账号密码，修改交易金额等。
- **防止应用数据窃取**：加密敏感数据，防止泄漏。
- **防止木马病毒**：监测设备环境，防止木马、病毒、恶意应用或钓鱼攻击。

**国内主要APP加固厂商**
目前，国内专业从事APP加固的厂商有：
- 爱加密
- 娜迦 (Nagain)
- 梆梆
- 通付盾

**APP加固技术原理及发展现状**
当前加固技术主要分为一代和二代：

- **一代(1.0)加固方案**：基于类加载的技术，通过对classes.dex文件进行完整加密并存入资源文件中，通过壳代码（壳dex）载入并解密运行。
- **二代(2.0)加固方案**：基于方法替换方式，将原dex中的所有方法提取出来进行加密，运行时动态劫持Dalvik虚拟机中解析方法的代码，将解密后的代码交给虚拟机执行引擎。

**各厂商APP加固技术**
| 加固技术 | 加固原理 | 加固厂商 |
| --- | --- | --- |
| 类加载技术 (1.0) | 对原classes.dex文件进行完整加密，另存为文件放入资源文件中，通过壳代码 (壳dex) 进行载入并解密运行 | 娜迦、爱加密、梆梆、网秦等 |
| 整体压缩加密 (1.0) | 对原dex文件整体压缩加密，保存在壳代理的dex文件尾部，加载到内存中解密运行 | 360 |
| 方法替换技术 (2.0) | 将原classes.dex中的所有方法的代码提取出来，单独加密,运行时动态劫持Dalvik虚拟机中解析方法的代码，将解密后的代码交给虚拟机执行引擎 | 娜迦、梆梆 |

**各厂商APP加固识别**
各加固厂商采用的加固保护核心库大致如下（存放在lib目录或assets目录）：

| 加固厂商 | 加固保护核心库 |
| --- | --- |
| 娜迦 | 1.0(libchaosvmp.so)、2.0(libddog.so、libfdog.so) |
| 爱加密 | libexec.so、libexecmain.so |
| 梆梆 | 1.0(libsecexe.so、libsecmain.so)、2.0(libDexHelper.so) |
| 360 | libprotectClass.so、libjiagu.so |
| 通付盾 | libegis.so |
| 网秦 | libnqshield.so |
| 百度 | libbaiduprotect.so |
| 腾讯 | libtup.so |
| 阿里 | libmobisec.so |

**APP加固必要性**
由于Android平台应用主要采用Java语言开发，而Java代码容易被反编译，反编译后的代码接近源代码级别，易读性极高。因此，对Java代码进行加密保护是非常必要的，即采用加固方案。

**APP加固 – 反编译保护**
- **JAVA层保护**：对classes.dex文件进行加密，防止反编译工具获取到完整的代码。
- **实例**：使用dex2jar (ApkToolkit) 和 jd-gui 等工具进行反编译，结果无法获取到原dex代码或完整的dex代码。

**APP加固 – 反汇编保护**
- **Native层保护**：对SO库进行加密，防止反汇编工具如IDA的逆向分析。
- **实例**：使用IDA打开SO库文件，无法正常分析。

**APP加固 – 防篡改保护**
- **防篡改原理**：采用完整性校验技术对安装包自身进行校验，一旦校验失败，客户端将被检测到并终止运行。
- **实例**：使用APK改之理、AndrlidKiller等工具进行篡改，结果无法正常运行。

**APP加固 – 反动态调试保护**
- **反调试保护原理**：通过双向ptrace保护技术、进程调试状态检查和信号处理机制，阻止附加调试。
- **实例**：使用IDA进行动态调试，结果无法正常调试。

**APP加固 – 反动态注入保护**
- **反注入原理**：通过双向ptrace保护技术，阻止其他注入行为对本进程进行注入操作。
- **实例**：使用inject libhooktest.so进行注入，结果无法注入。

通过以上技术和措施，可以有效提升移动应用的安全性，保障用户数据和应用的完整性。