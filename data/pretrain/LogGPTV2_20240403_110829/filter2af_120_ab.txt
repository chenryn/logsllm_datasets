    付钱的时候给你拦最后一道，黑卡、黑户等等支付出风险的，到此为止。
    最后所有风控策略已Pass，还等啥，发货呀。
看起来这个策略棒棒哒。我问你啊，一串4个英文字符的密码，你最多要猜几次才能猜对？区分大小写的情况下需要52的4次方约是700万次。那如果你每次猜1个字母，我就告诉你这个字母猜的对不对，那你要猜几次？52*4
= 208次，根本就不值一提啊。
（以扫雷为例，玩家不可能直接标记出所有地雷的位置，必须要通过局部的、小规模的不断测试来完成游戏）
好吧，我们经过自己优秀的风控策略，把羊毛党面临的指数阶的问题复杂度，通过分治算法给“优化”到了线性复杂度。不止数据结构课程的老师会感谢你啊，羊毛党们开着奔驰路虎在大别野里也感谢你好不好。
从企业自身角度看，业务链只有进行到关键逻辑节点的时候才会产生大量的成本，所以我们完全可以通过将风控决断移动到关键节点上，而暂时承受前面环节带来的“风险”。譬如，我们把上面的风控策略改成：
    在登录注册发现有问题的，打一个恶意注册/登录的标签就放行。
    在搜索、选购商品的时候发现是机器人的，也打一个机器人的标签放行。
    填完订单之后，对订单信息有问题的，再打一个异常订单的标签放行。
    付钱的时候，什么支付风险啊，先扣了钱再说并赠送一个支付异常标签后放行。
    最后对于有异常标签的订单，除非有什么985、211限时达什么的，不然先一本正经告诉你在配货，完了2天之后告诉你发货失败，订单有风险已被取消。
羊毛党看了就想哭，就很气。  
搞了2天，82年的茅台都开瓶了，别野大平层首付都付了，你告诉我订单取消？而且我前面明明已经做得很好了，你既没有警告也不报错，现在我裤子都脱了你给我取消了？
（对于黑盒的系统，只能通过反复调整输入观察输出才能很有限地“大致”知道盒子的功能是啥）
我们发现，整个流程下来羊毛党无法精确的确定之前到底哪个或哪几个环节出了问题。既然没有办法确定出问题的具体环节，那就有可能每个环节都有问题。所以，这样的风控策略极大增加了羊毛党的“作案”成本：一方面消耗了大量的时间，另一方面也消耗了大量的精力。  
风控决断节点的后移，除了给我们带来一些流量、计算成本外，并没有付出很高的代价。相反，我们如此一来便可以站在更完整的角度观察一个羊毛党的所有行为轨迹，从中抽象出之前没有发现的特征或特点，不断的修正自己的模型。我们不让别人学习，可从没说过不让自己学习哦。毕竟，学习才能成为更好的自己嘛。
我把这样在业务链中关键节点才作出决断的风控策略称为非即时反馈策略，它是对抗对手的第二步。
# 四、添加随机噪声
只应用非即时反馈策略是不够的，因为理论上我们还是没有斩断反馈链路。所以实际中羊毛党会尽可能去尝试发现识别他们的方式，甚至会在一些群里分享“绕过某某风控”的经验。最终，通过“多线程”或控制变量的实验方式，还是能把问题复杂度进一步降低。
这难道是说我们前面写得辣么多的东西都是废话咯？嘿嘿嘿，知道什么叫“风控策略测不准原则”么？不知道不要紧，我们可以创立这个“风控策略测不准原则”。
_我们期望，对于任意的风控策略，即使同时满足“所有特征和所有依据特征计算的策略规则已被知晓”的情况下，其输出结果是确定的，但无法预测。_
理论上这个原则是不成立的，原因是其违反了算法的确定性。即对于算法，如果确定输入，有且仅有一确定的输出。
那怎么办？改前提条件吧：  
_对于任意的风控策略，即使同时满足“所有【用户可控】特征和所有依据【用户可控】特征计算的策略规则已被知晓”的情况下，其输出结果是确定的，但无法预测。_
我们通过给风控策略增加一个脱离用户状态的“自变量”来增加整体策略的不确定性。在通常实践中，这个“自变量”为随机数。
回到上一节提到的业务链，我们在此前非即时反馈的风控策略中增加最后一项：  
初始化一个[0,99]随机整数，当随机数=99时，无论此前是否有标签，该商品强制发货。  
简而言之，1%的概率使得所有风控策略直接失效，1%使得当前订单强制失效。  
当然了，上面的策略比较粗暴，实际中可以结合其他用户状态，比如商品价格、用户活跃的时间、用户风险评分等综合设置阈值。
对于羊毛党来说，他会发现同样的薅羊毛策略有的会过，有的不会过。那么，他就不能确定他的薅羊毛策略调整是真的有效，还是单纯的看脸。整个风控系统变得如同女朋友的心一样难以琢磨——你究竟是爱我呢，还是不爱我了？
（薛定谔的女神：你猜我到底爱不爱你）
我们还可以举出很多类似的例子，例如在一些领券的活动中，绝对不要弹出“谢谢参与”这样让人忧伤的选项。大可以设置一些“玛莎拉蒂100元优惠券”、“满1001-1元”等兜底奖项来缓解这种尴尬，并机智的应用随机噪音干扰薅羊毛的视线。像某动物形象电商的砍价活动就做的十分讨巧（欠揍），你的每次点击价格可能会降，当然也有可能帮倒忙给加了回去，这TM怎么薅？
上帝是爱掷骰子的，我们的世界中或者人类自己本身就充满了大量的随机性，为何非要用正则化的思维来训练一个和人对抗的系统呢？
添加随机噪声的过程则干扰了大量正则化的判断，使得羊毛党需要排除的问题节点组合以指数阶的方式增加，在薅羊毛的路途上设下了不少障碍，对抗对手的最后一步就从这里开始。
# 五、局限
需要深知，这个方法是有局限的。  
显然，它只能应用在一个较长的业务链中。如果业务链极短，比如点击投票、搜索查词等，没有可供施展的空间。  
而且，它因为非即时反馈的特性，无法在某些即时业务中应用。类似于用户在发起转账、发起信贷等“无法撤回”的动作时，我们总不能先告诉用户申请信贷成功，然后用户消费完了再说不好意思，我要撤回授信。  
另外，它依赖于信息传递高度统一。我们把决断后移到了关键业务节点，如果在业务流程十分复杂，系统架构、开发环境混乱，则容易因为信息同步的不一致性造成“口子”开放，也就是风控系统的疏漏。
个人认为，风控系统牛逼程度不完全依赖于技术水平的高低，更多的是对业务的完整理解，和对用户（人性）的正确把握。因为你的对手不是机器，而是人。
一点愚见，还请各路大侠好汉多多海涵。