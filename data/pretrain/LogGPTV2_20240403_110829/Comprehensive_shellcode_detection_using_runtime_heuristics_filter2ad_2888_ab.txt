ory location (line 4 in Fig. 2) allows for strengthening further the
detection heuristic with a third condition.
Although this is the most well known [5,26,27], and widely used
technique for all Windows versions up to Windows Vista, it does
not work “as-is” for Windows 7. In that version, kernel32.dll
is found in the third instead of the second position in the modules
list [7]. A more generic and robust technique is to walk through the
list and check the actual name of each module until kernel32.dll
is found [7, 29]. In fact, the PEB_LDR_DATA structure contains
two more lists of the loaded modules that differ in the order of the
DLLs. All three lists are implemented as doubly linked lists, and
their corresponding LIST_ENTRY records contain two pointers to
the ﬁrst (Flink) and last (Blink) entry in the list.
Based on the above, and given that (i) kernel32.dll can
be resolved through any of the three lists, and (ii) list traversing
can be made in both directions, the third condition of the heuristic
can be speciﬁed as follows (P3): the linear address of any of the
Flink or Blink pointers in the InLoadOrderModuleList,
InMemoryOrderModuleList, or InInitializationOr-
derModuleList records of the PEB_LDR_DATA structure is
read.
3.1.2 Backwards Searching
An alternative technique for locating kernel32.dll is to ﬁnd
a pointer that points somewhere into the memory area where the
kernel32.dll has been loaded, and then search backwards un-
til the beginning of the DLL is located [27]. A reliable way to
obtain a pointer into the address space of kernel32.dll is to
take advantage of the Structured Exception Handling (SEH) mech-
anism of Windows [21], which provides a uniﬁed way of handling
hardware and software exceptions. When an exception occurs, the
exception dispatcher walks through a list of exception handlers for
the shellcode will inevitably perform several memory accesses to
the address space of kernel32.dll in order to check whether
each 64KB-aligned address corresponds to the base address of the
DLL. In our experiments with typical code injection attacks in Win-
dows XP, the shellcode performed at least four memory reads in
kernel32.dll. Thus, after the ﬁrst two conditions have been
met, we expect to encounter (B3): at least one memory read form
the address space of kernel32.dll.
3.2 Process Memory Scanning
Some memory corruption vulnerabilities allow only a limited
space for the injected code—usually not enough for a fully func-
tional shellcode. In most such exploits though the attacker can in-
ject a second, much larger payload which however will land at a
random, non-deterministic location, e.g., in a buffer allocated in the
heap. The ﬁrst-stage shellcode can then sweep the address space of
the process and search for the second-stage shellcode (also known
as the “egg”), which can be identiﬁed by a long-enough character-
istic byte sequence. This type of ﬁrst-stage payload is known as
“egg-hunt” shellcode [28].
Blindly searching the memory of a process in a reliable way re-
quires some method of determining whether a given memory page
is mapped into the address space of the process. In the rest of this
section, we describe two known memory scanning techniques and
the corresponding detection heuristics that can capture these behav-
iors, and thus, identify the execution of egg-hunt shellcode.
3.2.1 SEH
The ﬁrst memory scanning technique takes advantage of the struc-
tured exception handling mechanism and relies on installing a cus-
tom exception handler that is invoked in case of a memory access
violation.
Condition S1. As discussed in Sec. 3.1.2, the list of SEH frames
is stored on the stack, and the current SEH frame is always ac-
cessible through FS:[0]. The ﬁrst-stage shellcode can register a
custom exception handler that has priority over all previous han-
dlers in two ways: create a new SEH frame and adjust the current
SEH frame pointer of the TIB to point to it [28], or directly mod-
ify the Handler pointer of the current SEH frame to point to the
attacker’s handler routine. In the ﬁrst case, the shellcode must up-
date the SEH list head pointer at FS:[0], while in the second
case, it has to access the current SEH frame in order to modify
its Handler ﬁeld, which is only possible by reading the pointer
at FS:[0]. Thus, the ﬁrst condition of the SEH-based memory
scanning detection heuristic (SEH) is (S1): (i) the linear address
of FS:[0] is read or written, and (ii) the current or any previous
instruction involved the FS register.
Condition S2. Another mandatory operation that will be encoun-
tered during execution is that the Handler ﬁeld of the custom
SEH frame (irrespectively if its a new frame or an existing one)
should be modiﬁed to point to the custom exception handler rou-
tine. This operation is reﬂected by the second condition (S2): the
linear address of the Handler ﬁeld in the custom SEH frame is or
has been written. Note that in case of a newly created SEH frame,
the Handler pointer can be written before or after FS:[0] is
modiﬁed.
Condition S3. Although the above conditions are quite constrain-
ing, we can apply a third condition by exploiting the fact that upon
the registration of the custom SEH handler, the linked list of SEH
frames should be valid. In the risk of stack corruption, the excep-
tion dispatcher routine performs thorough checks on the integrity
of the SEH chain, e.g., ensuring that each SEH frame is dword-
Figure 3: A snapshot of the TIB and the stack memory areas
of a typical Windows process. The SEH chain consisting of two
nodes is highlighted.
the current thread and gives each handler the opportunity to handle
the exception or pass it on to the next handler. The list is stored
on the stack of each thread, and each node is a SEH frame that
consists of two pointers to the next frame and the actual handler
routine. Figure 3 shows a typical snapshot of the TIB and the stack
memory areas of a process with two SEH handlers. A pointer to the
current SEH frame exists in the ﬁrst ﬁeld of the Thread Information
Block and is always accessible through FS:[0].
At the end of the SEH chain (bottom of the stack) there is a de-
fault exception handler that is registered by the system for every
thread. The Handler pointer of this SEH record points to a rou-
tine that is located in kernel32.dll, as shown in Fig. 3. Thus,
the shellcode can start from FS:[0] and walk the SEH chain un-
til reaching the last SEH frame, and from there get a pointer into
kernel32.dll by reading its Handler ﬁeld.
Another technique to reach the last SEH frame, known as “TOP-
STACK” [27], uses the stack of the exploited thread. The default
exception handler is registered by the system during thread cre-
ation, making its relative location from the bottom of the stack
fairly stable. Although the absolute address of the stack may vary,
a pointer to the bottom of the stack is always found in the second
ﬁeld of the TIB at FS:[0x4]. The Handler pointer of the de-
fault SEH handler can then be found 0x1C bytes into the stack, as
shown in Fig. 3. In fact, the TIB contains a second pointer to the
top of the stack at FS:[0x8].
Condition B1. Based on the same approach as in the previous
section, the ﬁrst condition for the detection heuristic (BACKWD)
that matches the “backwards searching” method is the following
(B1): (i) any of the linear address between FS:[0]–FS:[0x8]
is read, and (ii) the current or any previous instruction involved the
FS register. The rationale is that a shellcode that uses the back-
wards searching technique should unavoidably read either i) the
memory location at FS:[0] for walking the SEH chain, or ii) one
of the locations at FS:[0x4] and FS:[0x8] for accessing the
stack directly.
Condition B2. In any case, the code will reach the default excep-
tion record on the stack and read its Handler pointer. Since this
is a mandatory operation for landing into kernel32.dll, we
can use this dependency as our second condition (B2): the linear
address of the Handler ﬁeld of the default SEH handler is read.
Condition B3. Finally, during the backwards searching phase,
1
2
3
4
5
6
push edx
push 0x8
eax
pop
0x2e
int
cmp
al, 0x05
edx
pop
; preserve edx across system call
; eax = NtAddAtom
; system call
; check for STATUS_ACCESS_VIOLATION
; restore edx
Figure 4: A typical system call invocation for checking if the
supplied address is valid.
aligned within the stack and is located higher than the previous
SEH frame [21]. Thus, the third condition requires that (S3): start-
ing from FS:[0], all SEH frames should reside on the stack, and
the Handler ﬁeld of the last frame should be set to 0xFFFFFFFF.
In essence, the above condition validates that the custom handler
registration has been performed correctly.
3.2.2 System Call
The extensive abuse of the SEH mechanism in various mem-
ory corruption vulnerabilities led to the introduction of SafeSEH, a
linker option that produces a table with all the legitimate exception
handlers of the image. In case the exploitation of some SafeSEH-
protected vulnerable application requires the use of egg-hunt shell-
code, an alternative but less reliable method for safely scanning
the process address space is to check whether a page is mapped—
before actually accessing it—using a system call [27, 28]. As al-
ready discussed, although the use of system calls in Windows shell-
code is not common, since they are prone to changes between OS
versions and do not provide crucial functionality such as network
access, they can prove useful for determining if a memory address
is accessible.
Some Windows system calls accept as an argument a pointer to
an input parameter. If the supplied pointer is invalid, the system call
returns with a return value of STATUS_ACCESS_VIOLATION.
Thus, the egg-hunt shellcode can check the return value of the sys-
tem call, and proceed accordingly by searching for the egg or mov-
ing on to the next address [28]. In Windows, a system call is ini-
tiated by generating a software interrupt through the int 0x2e
instruction.
Figure 4 shows a typical code that checks the address stored in
edx using the NtAddAtom system call. In Windows, a system
call is initiated by generating a software interrupt through the int
0x2e instruction (line 4). The actual system call that is going to be
executed is speciﬁed by the value stored in the eax register (line
3). Upon return from the system call, the code checks if the return
value equals the code for STATUS_ACCESS_VIOLATION. The
actual value of this code is 0xC0000005, but checking only the
lower byte is enough in return for more compact code (line 5).
Condition C1. System call execution has several constraints that
can be used for deriving a detection heuristic for this kind of egg-
hunt shellcode. First, the immediate operand of the int instruction
should be set to 0x2E. Looking just for the int 0x2e instruction
is clearly not enough since any two-byte instruction will be encoun-
tered roughly once every 64KB of arbitrary binary input. However,
when encountering an int 0x2e instruction that corresponds to
an actual system call execution, the ebx register should also have
been previously set to the proper system call number.
The publicly available egg-hunt shellcode implementations we
found (see Sec. 5.1) use one of the following system calls: NtAc-
cessCheckAndAuditAlarm (0x2), NtAddAtom (0x8), and
NtDisplayString (0x39 in Windows 2000, 0x43 in XP, 0x46
in 2003 Server, and 0x7F in Vista). The variability of the system
call number for NtDisplayString across the different Win-
dows versions is indicative of the complexity introduced in an ex-
ploit by the direct use of system calls. Based on the above, a nec-
essary condition during the execution of a system call in egg-hunt
shellcode is (C1): the execution of an int 0x2e instruction with
the eax register set to one of the following values: 0x2, 0x8, 0x39,
0x43, 0x46, 0x7F.
Condition C2. As shown in Sec. 5.2.2, condition C1 alone can
happen to hold true during the execution of random code, although
rarely. However, the heuristic can be strengthened based on the
following observation. The egg-hunt shellcode will have to scan a
large part of the address space until it ﬁnds the egg. Even when
assuming that the egg can be located only at the beginning of a
page [37], the shellcode will have to search hundreds or thousands
of addresses, e.g., by repeatedly calling the code in Fig. 4 in a loop.
Hence, condition C1 will hold several times. The detection heuris-
tic (SYSCALL) can then be deﬁned as a meta-condition (C{N}):
C1 holds true N times. As shown in Sec. 5.2.2, a value of N = 2
does not produce any false positives.
In case other system calls can be used for validating an arbitrary
address, they can easily be included in the above condition. Start-
ing from Windows XP, system calls can also be made using the
more efﬁcient sysenter instruction if it is supported by the sys-
tem’s processor. The above heuristic can easily be extended to also
support this type of system call invocation.
3.3 SEH-based GetPC Code
Before decrypting itself, polymorphic shellcode needs to ﬁrst
ﬁnd the absolute address at which it resides in the address space
of the vulnerable process. The most widely used types of GetPC
code for this purpose rely on some instruction from the call or
fstenv instruction groups [23]. These instructions push on the
stack the address of the following instruction, which can then be
used to calculate the absolute address of the encrypted code. How-
ever, this type of GetPC code cannot be used in purely alphanu-
meric shellcode [19], because the opcodes of the required instruc-
tions fall outside the range of allowed ASCII bytes. In such cases,
the attacker can follow a different approach and take advantage of
the SEH mechanism to get a handle to the absolute memory address
of the injected shellcode [30].
When an exception occurs, the system generates an exception
record that contains the necessary information for handling the ex-
ception, including a snapshot of the execution state of the thread,
which contains the value of the program counter at the time the
exception was triggered. This information is stored on the stack,
so the shellcode can register a custom exception handler, trigger
an exception, and then extract the absolute memory address of the
faulting instruction. By writing the handler routine on the heap,
this technique can work even in Windows XP SP3, bypassing any
SEH protection mechanisms [30].
In essence, the SEH-based memory scanning detection heuris-
tic described in Sec. 3.2.1 does not identify the scanning behavior
per se, but the proper registration of a custom exception handler.
Although this is an inherent operation of any SEH-based egg-hunt
shellcode, any shellcode that installs a custom exception handler
can be detected, including polymorphic shellcode that uses SEH-
based GetPC code.
4.
IMPLEMENTATION
We have implemented the proposed detection method in Gene, a
network-level attack detector that uses a custom IA-32 emulator to
identify the presence of shellcode in network streams. Gene scans
the client-initiated part of each TCP connection using the runtime
heuristics presented in this work. For evaluation purposes, a ﬁfth
GetPC-based self-decrypting shellcode similar to the one used in
existing detectors [9, 23, 38] can be enabled at will. Since the ex-
act location of the shellcode in the input data is not known in ad-
vance, the emulator repeats the execution multiple times, starting
from each and every position of the stream. In certain cases, how-
ever, the execution of some code paths can be skipped to optimize
runtime performance [24].
The heuristics used in Gene are mostly based on memory ac-
cesses to certain locations in the address space of a vulnerable Win-
dows process. To emulate correctly the execution of these accesses,
the virtual memory of the emulator is initialized with an image of
the complete address space of a typical Windows XP process taken
from a real system. The image consists of 971 pages (4KB each),
including the stack, heap, PEB/TIB, and loaded modules. All four
heuristics use the same memory image and thus can be evaluated in
parallel during execution.
Among other initializations before the beginning of a new exe-
cution [23], the segment register FS is set to the segment selector
corresponding to the base address of the Thread Information Block,
the stack pointer is set accordingly, while any changes to the origi-
nal process image from the previous execution are reverted.
The runtime evaluation of the heuristics requires keeping some
state about the occurrence of instructions with an operand that in-
volved the FS register, as well as about read and write accesses
to the memory locations speciﬁed in the heuristics. Regarding the
SEH-based memory scanning heuristic (Sec. 3.2.1), although SEH
chain validation is more complex compared to other instrumenta-
tion operations, it is triggered only if conditions S1 and S2 are true,
which in practice happens very rarely.
When an int 0x2e instruction is executed, the eax register
is checked for a value corresponding to one of the system calls
that can be used for memory scanning, as described in Sec. 3.2.2.
Although the actual functionality of the system call is not emulated,
the proper return value is stored in the eax register depending on
the validity of the supplied memory address.
In case of an egg-
hunt shellcode, this behavior allows the scanning loop to continue
normally, resulting to several system call invocations.
5. EXPERIMENTAL EVALUATION
5.1 Detection Effectiveness
We began our evaluation with the shellcodes contained in the
Metasploit Framework [2]. For Windows targets, Metasploit in-
cludes six basic payloads for downloading and executing a ﬁle,
spawning a shell, adding a user account, and so on, as well as nine
“stagers.” In contrast to an egg-hunt shellcode, which searches for
a second payload that has already been injected into the vulnera-
ble process along with the egg-hunt shellcode, a stager establishes
a channel between the attacking and the victim host for upload-
ing other second-stage payloads. We generated plain (i.e., non-
encrypted) instances of the above 15 shellcodes, as well as an-
other 15 polymorphic instances of the same shellcodes using the
ShikataGaNai encoder. As shown in Fig. 5, both Gene and the
GetPC-based heuristic detected the polymorphic versions of the
shellcodes. However, the original (plain) versions do not exhibit