OBD-II data cae n be accessed by anyone through aftermarket
dongles [25]. The OBD-II protocol uses the CAN bus at the physical
layer in all newer vehicles. It is a request-response protocol that
sends requests on CAN ID 0x7E0 and obtains responses on 0x7E8.
For instance, to obtain the vehicle speed, a dongle connected to
the OBD-II port sends a CAN message with ID 0x7E0 and payload
0x02010D5555555555. The first byte (0x02) indicates that 2 more
bytes will follow, the second byte (0x01) corresponds to the OBD
mode of getting live data, and 0x0D indicates vehicle speed. Unused
bytes are set to 0x55 (“dummy load”) and ignored. A complete
specification is available in Wikipedia [13].
Note that the OBD-II protocol is public and does not make any
use of DBC files at all. As stated in [13], only certain emission-
related sensors can be read. Body-related signals are not part of the
OBD-II specification. Nevertheless, signals in the aforementioned
specification are still available in the raw CAN protocol. However,
we would still like to locate the CAN IDs and signal positions of
emission-related signals on the CAN bus. For CAN injection attacks,
we need to know this information because the OBD-II protocol does
not allow writing arbitrary values to these sensors.
Since any node can tap into the unencrypted CAN bus and start
broadcasting data without prior authentication, a malicious entity
can gain access to the in-vehicle network by using an OBD-II dongle
as a CAN node and send messages (e.g., through a mobile app). If
the message semantics (i.e., the DBC file(s) or portions thereof)
are known to the attacker because they reverse-engineered the
CAN bus, they can cause the vehicle to misbehave by affecting the
operation of receiver ECUs. This can range from displaying false
information on the instrument cluster [33] to erroneously steering
the vehicle [40]. The latter impacts vehicle safety and, therefore,
poses greater risk. Furthermore, it is also possible to cause certain
ECUs to fail, possibly incurring operational/financial damage to
the vehicle.
Theoretically, it is possible to monitor the traffic on all in-vehicle
buses through the OBD-II interface. In practice, however, not all
buses are mirrored out by the central gateway, which is responsible
for routing CAN messages between buses or domains. This can be
justified as a security countermeasure, but the OBD-II connector
has only 16 pins, with some pins already assigned [14], and thus
only up to three CAN buses can be monitored through the OBD-II
port.
3 SYSTEM DESIGN
Fig. 4 provides an overview of LibreCAN’s system design, which
consists of three phases discussed below. Our system relies upon
the following three sets of signals as input:
• P: The set of IMU sensor data (called “motion sensors” in An-
droid), i.e., 3-dimensional accelerometer and 3-dimensional
gyroscope data collected from the smartphone (via the Torque
Pro app) while recording OBD-II data (V ).
• V : The set of OBD-II data. It consists of all OBD-II PIDs that
the vehicle supports. The sampling rate depends on the used
data collection dongle and vehicle. As a result, we resample
the data to 1 Hz. A full list of OBD-II PIDs can be found
in [13].
• R: The set of raw CAN data that we recorded with the
OpenXC dongle. It includes the entire trace of driving data
broadcasted on the CAN bus and is accessible through the
OBD-II port.
Data from sets P and V are only used in Phase 1. As shown in
Table 9, we have 9 IMU sensors ∈ P and 15 OBD-II PIDs ∈ V that
we are analyzing. As we will see later, OBD-II PIDs only cover less
than 2% of the possible signals that can be reverse-engineered on
each of our evaluation vehicles.
3.1 Phase 0: Signal Extraction
As described in Sec. 2.2, CAN messages can contain multiple signals,
and hence we need to extract the signals associated with each CAN
ID. We built the signal extraction mechanism in this phase on top
of the READ algorithm in [37].
Using the rate at which the value of each bit changes, READ
determines signal boundaries under the assumption that lower-
order bits in a signal will more likely change more frequently than
higher-order bits. READ then labels each extracted signal as either a
counter, a cyclic redundancy check (CRC), or a physical value based
upon other characteristics of the bit-change rate of the particular
signal. Counters are characterized by a decreasing bit-flip rate, with
the latter approximately doubling as the significance of the bit rises.
Meanwhile, CRCs are characterized by a bit-change magnitude of
approximately 0. Physical signals (PHYS) are those that do not fit
into any of the above two categories.
We further defined three special types of physical signals: UNUSED
(all bits set to 0), CONST (all bits constantly set to the same value
across messages, but with at least one bit set to 1), and MULTI (the
value of the signal is from a set of n possible values).
We also modified the mechanism the READ algorithm uses to
determine signal boundaries. The original READ algorithm marks a
signal boundary when the value of ⌈log10 Bitflip⌉ for a bit decreases
as compared to the previous bit. However, our implementation
of READ instead checks whether the bit-flip rate decreased by a
specific percentage from the previous bit – this value was set via
an input parameter to our algorithm, as discussed below. In this
original implementation, pairs of consecutive bits whose bit-flip
rates change from (>.1 to .01 to .001 to  Tp0,1 then
l_c ← l
reinserted ← f alse
delete l, c
break
if reinserted == f alse then
bits_that_dont_chanдe_label .append(UNUSED)
contains the final signal boundaries that are used in the rest of our
evaluations.
Stage 2: This stage evaluates all signal boundaries marked POSS and
determines the number of unique values they contain throughout
the trace. To achieve this, we parse through the trace to determine
the number of unique values that each extracted signals from Stage
1 is set to — if this number is less than a pre-determined threshold
(Tp0,3), the signal is not considered in future stages. Any remaining
POSS signals at the end of this stage are marked as MULTI values. The
output of this phase is a new signal labeling set, now additionally
containing signals labeled as MULTI.
Stage 3: This stage is also similar to the READ algorithm and eval-
uates any values still labeled as POSS to determine if their bit-flip
rates resemble a counter. If this is not the case, we label the signal
as a PHYS value.
Figure 6: Alignment of phone’s coordinate system (right)
with vehicular coordinate system (left)
Alignment: Phase 0 also encompasses phone alignment. As Fig. 6
shows, the vehicular coordinate system is not necessarily consis-
tent with the phone’s coordinate system, particularly if the user
moves their phone during the data-collection process. Therefore, it
may be necessary to align these coordinate systems using rotation
matrices, as discussed in [17]. In order to avoid this additional step,
we suggest that users pre-align their phone with the vehicular co-
ordinate system by mounting the phone inside their vehicle, e.g.,
in a phone/cup holder. Using the coordinate systems from Fig. 6,
the phone should be located on the center console, with the short
edge parallel to the direction of the vehicle’s motion.
3.2 Phase 1: Kinematic-related Data
The goal of this phase is to match the extracted signals from Phase
0 to openly available OBD-II PIDs (V ), as well as mobile sensor data
(P). The latter data can easily be collected using a smartphone.
The OBD-II PIDs (V ) and IMU sensors (P) that we consider from
our data collection with Torque Pro — making up the set S (see
Fig. 4) — are depicted in Table 9. The commonality between these
signals (i.e., V , P, and S) is that they are kinematic- or powertrain-
related, i.e., they are captured while the vehicle is in motion. The
OBD-II protocol was standardized for the purpose of capturing and
diagnosing emissions data, which is powertrain-related. The IMU
sensors capture the movement of the smartphone in the vehicle and
therefore the movement of the vehicle, if the phone is fixed within
the vehicle and properly aligned. These signals are also present on
the CAN bus since this data is generated by and exchanged between
ECUs, with a copy mirrored out to the OBD-II connector.
As mentioned in Eq. (2), CAN signals usually do not encode
an absolute value, but instead a value with a linear relationship
to the latter. As a result, comparing the temporal sequence of a
raw CAN signal from set R and a signal from set S should yield a
high cross-correlation value. Hence, for each signal d ∈ S, we run
normalized cross-correlation (xcorr) with all extracted signals r ∈ R,
which yields a list of cross-correlation values. We then arrange
them in a descending order with respect to the cross-correlation
value. Since multiple CAN signals r can match a signal d (e.g., the
four wheel speeds match the OBD speed), we need to define an
intelligent cut-off point that keeps those relevant signals d with a
high correlation value, but deletes those starting with a correlation
score that deviates significantly from the last signal d that we wish
to remain. For this purpose, we define a threshold Tp1. Alg. 2 de-
scribes how to set the cut-off point. We will experiment with Tp1
in Sec. 4.2 to achieve the best precision and recall for Phase 1.
Algorithm 2 Defining the Cut-Off Point
function Top_X(corr_result,Tp1)
runninд_sum, runninд_avд, cuto f f ← corr_result[0]
count ← 1
for val ∈ corr_result[1 :] do
break
if val  Tp2,0, are less likely to be as-
sociated with a single body-related event, especially because the
reference snippet R0 was recorded without any human interaction
in the vehicle that could have triggered body events.
Fig. 7 depicts an example of the filtering process in Phase 2. The
event snippet is shown in the TRACE section and the generated
reference state is shown in the REFERENCE section.
After generating the reference state, each event snippet Re was