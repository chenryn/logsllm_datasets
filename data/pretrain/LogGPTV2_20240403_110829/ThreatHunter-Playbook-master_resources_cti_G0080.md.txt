# G0080: Cobalt Group

## Description
The [Cobalt Group](https://attack.mitre.org/groups/G0080) is a financially motivated threat actor primarily targeting financial institutions. The group has conducted intrusions to steal money by compromising ATM systems, card processing, payment systems, and SWIFT systems. Their primary targets have been banks in Eastern Europe, Central Asia, and Southeast Asia. Despite the arrest of one of its alleged leaders in Spain in early 2018, the group remains active. Cobalt Group has also targeted organizations to gain access and subsequently compromise additional victims. (Citations: Talos Cobalt Group July 2018, PTSecurity Cobalt Group Aug 2017, PTSecurity Cobalt Dec 2016, Group IB Cobalt Aug 2017, Proofpoint Cobalt June 2017, RiskIQ Cobalt Nov 2017, RiskIQ Cobalt Jan 2018). Reports suggest potential links between Cobalt Group and the malware [Carbanak](https://attack.mitre.org/software/S0030) and the group [Carbanak](https://attack.mitre.org/groups/G0008) (Citation: Europol Cobalt Mar 2018).

## Tactics, Techniques, and Procedures (TTPs)

| Platform | Tactic | Technique | Description | Data Sources |
| --- | --- | --- | --- | --- |
| Windows | Defense Evasion, Execution | [Signed Binary Proxy Execution](https://attack.mitre.org/techniques/T1218/) | Cobalt Group used `odbcconf` to proxy the execution of malicious DLL files. | Process monitoring, Process command-line parameters |
| Linux, macOS, Windows | Execution | [Command-Line Interface](https://attack.mitre.org/techniques/T1059/) | Cobalt Group used a JavaScript backdoor capable of launching `cmd.exe` to execute shell commands. | Process monitoring, Process command-line parameters |
| macOS, Windows | Discovery | [Security Software Discovery](https://attack.mitre.org/techniques/T1063/) | Cobalt Group used a JavaScript backdoor to collect a list of security solutions installed on the victim's machine. | File monitoring, Process monitoring, Process command-line parameters |
| macOS, Windows | Lateral Movement, Persistence | [Logon Scripts](https://attack.mitre.org/techniques/T1037/) | Cobalt Group added persistence by registering the file name for the next stage malware under `UserInitMprLogonScript`. | File monitoring, Process monitoring |
| Linux, macOS, Windows | Command and Control, Lateral Movement | [Remote File Copy](https://attack.mitre.org/techniques/T1105/) | Cobalt Group used public sites like GitHub and SendSpace to upload and download files to victim computers. Their JavaScript backdoor can also download files. | File monitoring, Packet capture, Process use of network, Netflow/Enclave netflow, Network protocol analysis, Process monitoring |
| Linux, macOS, Windows | Defense Evasion | [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027/) | Cobalt Group obfuscated several scriptlets and code on the victim’s machine using XOR and RC4. | Network protocol analysis, Process use of network, File monitoring, Malware reverse engineering, Binary file metadata, Process command-line parameters, Environment variable, Process monitoring, Windows event logs, Network intrusion detection system, Email gateway, SSL/TLS inspection |
| Windows | Defense Evasion, Execution | [CMSTP](https://attack.mitre.org/techniques/T1191/) | Cobalt Group used `cmstp.exe /s /ns C:\Users\ADMINI~W\AppData\Local\Temp\XKNqbpzl.txt` to bypass AppLocker and launch a malicious script. | Process monitoring, Process command-line parameters, Process use of network, Windows event logs |
| Windows | Lateral Movement | [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1076/) | Cobalt Group used Remote Desktop Protocol for lateral movement. | Authentication logs, Netflow/Enclave netflow, Process monitoring |
| Linux, macOS, Windows, AWS, GCP, Azure, Office 365, SaaS, Azure AD | Defense Evasion, Persistence | [Redundant Access](https://attack.mitre.org/techniques/T1108/) | Cobalt Group used TeamViewer to maintain remote access if control via Cobalt Strike was lost. | Office 365 account logs, Azure activity logs, AWS CloudTrail logs, Stackdriver logs, Process monitoring, Process use of network, Packet capture, Network protocol analysis, File monitoring, Authentication logs, Binary file metadata |
| Linux, Windows, macOS | Execution | [User Execution](https://attack.mitre.org/techniques/T1204/) | Cobalt Group sent emails with malicious attachments or links that required users to execute a file or macro to infect the victim machine. | Anti-virus, Process command-line parameters, Process monitoring |
| Linux, Windows, macOS, AWS, GCP, Azure | Discovery | [Network Service Scanning](https://attack.mitre.org/techniques/T1046/) | Cobalt Group used SoftPerfect Network Scanner for network scanning. | Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process use of network |
| Windows | Persistence, Privilege Escalation | [New Service](https://attack.mitre.org/techniques/T1050/) | Cobalt Group created new services to establish persistence. | Windows Registry, Process monitoring, Process command-line parameters, Windows event logs |
| Linux, macOS, Windows | Command and Control | [Standard Application Layer Protocol](https://attack.mitre.org/techniques/T1071/) | Cobalt Group used HTTPS and DNS tunneling for C2, and Plink utility for SSH tunnels. | Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring |
| Windows, macOS, Linux, Office 365, SaaS | Initial Access | [Spearphishing Link](https://attack.mitre.org/techniques/T1192/) | Cobalt Group sent emails with URLs pointing to malicious documents. | Packet capture, Web proxy, Email gateway, Detonation chamber, SSL/TLS inspection, DNS records, Mail server |
| Windows | Defense Evasion, Privilege Escalation | [Bypass User Account Control](https://attack.mitre.org/techniques/T1088/) | Cobalt Group bypassed UAC. | System calls, Process monitoring, Authentication logs, Process command-line parameters |
| Windows | Execution, Persistence, Privilege Escalation | [Scheduled Task](https://attack.mitre.org/techniques/T1053/) | Cobalt Group created Windows tasks for persistence. | File monitoring, Process monitoring, Process command-line parameters, Windows event logs |
| Linux, macOS, Windows | Defense Evasion | [File Deletion](https://attack.mitre.org/techniques/T1107/) | Cobalt Group deleted the DLL dropper from the victim’s machine to cover their tracks. | File monitoring, Process command-line parameters, Binary file metadata |
| Linux, macOS, Windows | Privilege Escalation | [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068/) | Cobalt Group used exploits to increase their privileges. | Windows Error Reporting, Process monitoring, Application logs |
| Windows, macOS, Linux | Initial Access | [Spearphishing Attachment](https://attack.mitre.org/techniques/T1193/) | Cobalt Group sent spearphishing emails with various attachment types, including .rtf, .doc, .xls, archives containing LNK files, and password-protected archives with .exe and .scr executables. | File monitoring, Packet capture, Network intrusion detection system, Detonation chamber, Email gateway, Mail server |
| Windows | Persistence | [Registry Run Keys / Startup Folder](https://attack.mitre.org/techniques/T1060/) | Cobalt Group used Registry Run keys for persistence and set a Startup path to launch PowerShell and download Cobalt Strike. | Windows Registry, File monitoring |
| Windows | Defense Evasion, Execution | [Regsvr32](https://attack.mitre.org/techniques/T1117/) | Cobalt Group used `regsvr32.exe` to execute scripts. | Loaded DLLs, Process monitoring, Windows Registry, Process command-line parameters |
| Linux, macOS, Windows | Command and Control | [Standard Cryptographic Protocol](https://attack.mitre.org/techniques/T1032/) | Cobalt Group used Plink utility to create SSH tunnels. | Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring, SSL/TLS inspection |
| Linux, macOS, Windows | Defense Evasion, Execution | [Scripting](https://attack.mitre.org/techniques/T1064/) | Cobalt Group sent Word OLE compound documents with malicious obfuscated VBA macros and executed JavaScript scriptlets. They also used the Threadkit exploit toolkit to launch .bat files. | Process monitoring, File monitoring, Process command-line parameters |
| Windows | Execution | [PowerShell](https://attack.mitre.org/techniques/T1086/) | Cobalt Group used `powershell.exe` to download and execute scripts. | PowerShell logs, Loaded DLLs, DLL monitoring, Windows Registry, File monitoring, Process monitoring, Process command-line parameters |
| Linux, Windows, macOS | Command and Control | [Remote Access Tools](https://attack.mitre.org/techniques/T1219/) | Cobalt Group used Ammyy Admin and TeamViewer for remote access. | Network intrusion detection system, Network protocol analysis, Process use of network, Process monitoring |
| Linux, macOS, Windows | Defense Evasion, Privilege Escalation | [Process Injection](https://attack.mitre.org/techniques/T1055/) | Cobalt Group injected code into trusted processes. | API monitoring, Windows Registry, File monitoring, DLL monitoring, Process monitoring, Named Pipes |
| Windows | Execution | [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1173/) | Cobalt Group sent malicious Word OLE compound documents to victims. | API monitoring, DLL monitoring, Process monitoring, Windows Registry, Windows event logs |
| Linux, Windows, macOS | Execution | [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203/) | Cobalt Group exploited multiple vulnerabilities, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, CVE-2017-0199, and CVE-2017-8759. | Anti-virus, System calls, Process monitoring |
| Windows | Defense Evasion, Execution | [XSL Script Processing](https://attack.mitre.org/techniques/T1220/) | Cobalt Group used `msxsl.exe` to bypass AppLocker and invoke Jscript code from an XSL file. | Process monitoring, Process command-line parameters, Process use of network, DLL monitoring |