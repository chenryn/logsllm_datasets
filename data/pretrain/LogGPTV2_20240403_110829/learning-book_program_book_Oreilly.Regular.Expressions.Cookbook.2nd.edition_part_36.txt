an example:
b(1[0-2]0[1-9])/(3[01][12][0-9]|0[1-9])/[0-9]{4}\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
See Also
This chapter has several other recipes for matching dates and times. Recipe 4.5 shows
how to validate traditional date formats more accurately. Recipe 4.6 shows how to
validate traditional time formats. Recipe 4.7 shows how to validate date and time for-
mats according to the ISO 8601 standard.
Recipe 6.7 explains how you can create a regular expression to match a number in a
given range of numbers.
4.4 Validate Traditional Date Fermats | 259
---
## Page 276
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
4.5ValidateTraditionalDateFormats,ExcludingInvalidDates
Problem
You want to validate dates in the traditional formats mm/dd/yy, mm/dd/yyyy, dd/mm/
yy, and d/mm/yy, as shown in Recipe 4.4. But this time, you also want to weed out
invalid dates, such as February 31α.
Solution
C#
The first solution requires the month to be specified before the day. The regular ex-
pression works with a variety of flavors:
$（{}[6-0]({}[6-0]))/([6-0][-0]）/([6-0][-0]）
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10
This is the complete solution implemented in C#:
DateTine foundDate;
Match matchResult = Regex.Match(SubjectString,
"(?[0-3]?[0-9])/(?[0-3]?[0-9])/" +
"(?(?:[0-9]{2})²[0-9]{2})s");
1f (matchResult.Success)(
Int year = int , Parse(matchResult,Groups[“year*]. Value);
1f (year [0-3]?[0-9])/(?[0-3]?[0-9])/(?(?:[0-9]{2})?[0-9]{2})$
Regex options: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10
260 | Chapter 4: Validation and Formatting
---
## Page 277
The C# code is unchanged, except for the regular expression:
DateTine foundDate;
Natch matchResult = Regex.Match(SubjectString,
"(?[0-3]?[0-9])/(?[0-3]?[0-9])/" +
"(?(?:[0-9]{2})？[0-9]{2})s");
if (matchResult.Success)(
int year = 1nt Parse(matchResult,Groups[“year*]. Value);
1f (year = 1 8& $day = 1 && $month  Kep$ gg t == 1 8& $day = 1 && $month  Aep$ gg T =0?2)/(?[12][0-9]|o?[1-9])
# 30-day nonths
(?0?[469]|11)/(?30|[12][0-9]|o?[1-9])
# 31-day months
(?0?[13578]|1[02])/(?3[01]][12][0-9]|0?[1-9]]
# Year
/(?(?:[0-9]{2})?[0-9]{2})$
Regex options: Free-spacing
Regexflavers: .NET, Perl 5.10, Ruby 1.9
^(?:
# February (29 days every year)
(0?2)/([12][0-9]|0?[1-9])
# 30-day months
(0?[469]|11)/(30|[12][0-9]|0?[1-9])
# 31-day months
(0?[13578]|1[02]]/(3[01]][12][0-9]|0?[1-9])
262 | Chapter 4: Validation and Formatting
---
## Page 279
/((?:[0-9]{2})？[0-9]{2})$
# Year
Regex options: Free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
(?:(0?2)/([12][0-9]]0?[1-9])|(0?[469]|11)/(30|[12][0-9]|0?[1-9]]|
0?[13578]|1[02])/(3[01][12][0-9]0?[1-9]))/((?:[0-9]{2})?[0-9]{2})$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Day before month:
^(?:
# February (29 days every year)
(?[12][0-9]|o?[1-9])/(?0?2)
# 30-day nonths
(?30|[12][0-9]|o?[1-9])/(?0?[469]|11)
# 31-day months
(?3[01]∣[12][0-9]|0?[1-9])/(?0?[13578]|1[02]]
#Year
/(?(?:[0-9]{2})?[0-9]{2})$
Regex options: Free-spacing
Regexflarers: .NET, Perl 5.10, Ruby 1.9
^(?:
#February (29 days every year)
{[12][0-9]|0?[1-9])/(0?2)
# 30-day months
(30|[12][0-9]0?[1-9])/([469]|11)
# 31-day months
(3[01]][12][0-9]|0?[1-9])/(0?[13578]|1[02])
# Year
/((?:[0-9]{2})?[0-9]{2})$
Regex options: Free-spacing
Regexflarer: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
(?:([12][0-9]|0?[1-9])/(0?2)|(30|[12][0-9]|0?[1-9])/([469]|11]|
(3[01]][12][0-9]|0?[1-9])/(0?[13578]|1[02]))/((?:[0-9]{2})?[0-9]{2})$
Regexoptions: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
4.5 Validate Traditional Date Fermats, Excduding Invalid Dates | 263
---
## Page 280
Discussion
Regex with procedural code
There are essentially two ways to accurately validate dates with a regular expression.
One method is to use a simple regex that merely captures groups of numbersthat look
like a month/day/year combination, and then use procedural code to check whether
the date is correct.
The main benefit of this method is that you can easily add additional restrictions, such
as limiting dates to certain periods. Many programming languages provide specific
support for dealing with dates, The C# solution uses .NET's DateTine structure to
check whether the date is valid and rerum the date in a useful format, all in one step.
We used the first regex from Recipe 4.4 that allows any number between 0 and 39 for
the day and month. That makes it easy to change the format from mm/dd/yy to dd/
mm/yy by changing which capruring group is treated as the month. When we’re using
named caprure, that means changing the names of the capruring groups in the regular
expression. When we're using numbered caprure, that means changing the references
to the numbered groups in the procedural code.
Pure regular expression
The other method is to do everything with a regular expression. We can use the same
technique of spelling out the altermatives as we did for the more final solutions presented
in Recipe 4.4. The solution is manageable, if we take the liberty of treating every year
as a leap year, allowing the regex to match February 29th regardless of the year. Al-
lowing February 29th only on leap years would require us to spell out all the years that
are leap years, and allthe years that aren't.
The problem with using a single regular expression is that it no longer neatly capures
the day and month in a single capturing group. We now have three capruring groups
for the month, and three for the day. When the regex matches a date, only three of the
seven groups in the regex will actually caprure something. If the month is February,
groups 1 and 2 capture the month and day. If the month has 30 days, groups 3 and 4
returm the month and day. If the month has 31 days, groups 5 and 6 take action. Group
7 always caprures the year.
Perl 5.10, Ruby 1.9, and .NET help us in this situation. Their regex flavors allow mul-
tiple named capruring groups to share the same name. See the section “Groups with
the same name* on page 71 in Recipe 2.11 for details. We take advantage of this by
using the same names “month" and “day” in each of the alternatives. When the regex
finds a match, we can retrieve the text matched by the groups *month" and “day"
without worrying about how many days the month has.
264 IChapter 4: Validation and Formatting
---
## Page 281
For the otherregex flavors, we use numbered capruringgroups. When a match is found,
three different groups have to be checked to extract the day, and three other groups to
extract the month.
The pure regex solution s interesting only in situations where one regex is all you can
use, such as when you're using an application that offers one box to type in a regex.
When programming, make things easier with a bit of extra code. This will be particu-
larly helpful if you want to add extra checks on the date later.
Variations
To show how complicated the pure regex solution gets as you ad more requirements,
here’s a pure regex solution that matches any date between 2 May 2007 and 29 August
2008 in d/m/yy or dd/mm/yyyy format:
# 2 May 2007 ti11 29 August 2008
:)
# 2 May 2007 ti11 31 Decerber 2007
(?:
# 2 May ti11 31 May
(?3[01][12][0-9]|o?[2-9])/(?0?5)/(?2007)
#1 June ti11 31 Decenber
# 30-day months
(?30|[12][0-9]|o?[1-9])/(?0?[69]|11)
 31-day months
(?3[01]][12][0-9]|o?[1-9])/(?0?[78]|1[02]]
/(?2007)
#1 January 2008 ti1l 29 August 2008
(？:
# 1 August till 29 August
(?[12][0-9]o?[1-9])/(?0?8)/(?2008)
# 1 Janary ti11 30 June
(?:
# February
(?[12][0-9]|0?[1-9]]/(?0?2)
# 30-day months
(?30|[12][0-9]|o?[1-9]]/(?0?[46]]
 31-day months
(?3[01][12][0-9]|o?[1-9])/(?0?[1357])
4.5 Validate Traditional Date Fermats, Excduding Invalid Dates | 265
---
## Page 282
/(?2008)
$（
）
Regex options: Free-spacing
Regexflavers: .NET, Perl 5.10, Ruby 1.9
See Also
This chapter has several other recipes for matching dates and times. Recipe 4.5 shows
how to validate traditional date formats more simply, giving up some accuracy.
Recipe 4.6 shows how to validate traditional time formats. Recipe 4.7 shows how to
validate date and time formats according to the ISO 8601 standard.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
altermation. Recipe 2.9 explains grouping. Recipe 2.11 explains named capturing
groups. Recipe 2.12 explains repetition.
4.6ValidateTraditionalTimeFormats
Problem
You want to validate times in various traditional time formats, such as hh:mm and
hh:mm:ss in both 12-hour and 24-hour formats.
Solution
Hours and minutes, 12-hour clock:
(1[0-2]|0?[1-9]):([0-5]?[0-9])(=?[AP]m)?$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Hours and minutes, 24-hour clock:
(2[0-3]][01][0-9]):([0-5][0-9]]$
Regex options: None
Regexflarer: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Hours, minutes, and seconds, 12-hour clock:
(1[0-2]|0?[1-9]):([0-5]?[0-9]): ([0-5]?[0-9]}(?[AP])?$
Regex options: None
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
Hours, minutes, and seconds, 24-hour clock:
(2[0-3]][o1]?[0-9]):([0-5][0-9]]:([0-5]?[0-9]]$
Regex options: None
266 | Chapter 4: Validationand Formatting
---
## Page 283
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
The question marks in all of the preceding regular expressions make leading zeros
oprional. Remove the question marks to make leading zeros mandatory.
Discussion
Validating times is considerably easier than validating dates. Every hour has 60 minutes,
and every minute has 60 seconds. This means we don't need any complicated altema-
tions in the regex. For the minutes and seconds, we don’t use altermation at all. [o-5]?
[0-9] matches a digit berween 0 and 5, followed by a digit between 0 and 9. This
correcly matches any number between 0 and 59. The question mark after the first
character class makes it optional. This way, a single digit between 0 and 9 is also ac-
cepted as a valid minute or second. Remove the question mark if the first 10 minutes
and seconds should be written as 00 to 09. See Recipes 2.3 and 2.12 for details on
character classes and quantifiers such as the question mark.
For the hours, we do need to use alternation (see Recipe 2.8). The second digit allows
different ranges, depending on the first digit. On a 12-our clock, if the fist digit is 0,
the second digit allows all 10 digits, but if the first digit is 1, the second digit must be
x ano- eu [6-]0[0] se s a1m m uossx1enas  u 71o  °0
if the first digit is 0 or 1, the second digit allows all 10 digits, but if the first digit is 2,
the second digit must be between 0 and 3. In regex syntax, this can be expressed as