### Transmission and Host Migration Verification

Transmission can lead to the misclassification of first-hop traffic. To address this, we maintain a host-MAC alias map when we observe any flow rule that modifies the source MAC address.

Another purpose of maintaining a Host List is to verify the trustworthiness of a host migration. As mentioned in Section IV, a prerequisite for a host migration is that the OpenFlow controller receives a Port Down signal before the migration is complete. Upon detecting a port down, we set a SHUT DOWN FLAG for the hosts associated with the switch port. This flag is disabled when the Port Manager detects correlated host traffic from the port. Additionally, we validate the SHUT DOWN FLAG within the Host List to confirm the host migration.

#### Host Prober

To check the postcondition of a host migration, we use the Host Prober. The Host Prober verifies that the host is unreachable at its previous location after the migration. It sends an ICMP Echo Request to the former location and waits for a response within a reasonable timeout (currently set to 1 second). The Host Prober issues a Packet-Out message with a crafted ICMP packet and outputs it to a specific switch port. To ensure the successful delivery of the response, the Host Prober also installs a flow rule to direct the ICMP response back to the OpenFlow controller.

#### Topology Update Verification

The Topology Update Checker validates the correctness of topology updates, including host migrations and new link discoveries. When a host migration is detected, the checker references the Port Property to check the precondition and instructs the Host Prober to validate the postcondition. Notably, checking the postcondition takes more time than checking the precondition. To reduce overall overhead, we employ a roll-back technique: the Topology Update Checker updates the host location if the precondition is met (SHUT DOWN FLAG enabled) without waiting for the Host Prober's result. If the Host Prober indicates a malicious migration, the update is withdrawn, and an attack alert is raised.

#### Port Property Management

To ensure the validity of topology updates, we profile extra properties for each switch port in the OpenFlow controller, including Device Type, Host List, and SHUT DOWN FLAG. The Device Type indicates the type of device connected to a particular switch port (ANY, SWITCH, or HOST). Initially, the Device Type is set to ANY. It changes to SWITCH upon receiving LLDP packets or to HOST upon receiving first-hop host traffic. The Device Type reverts to ANY when a Port Down signal is received. If the Port Manager detects an LLDP packet from a HOST port or first-hop host traffic from a SWITCH port, it raises an attack alert and notifies the Topology Update Checker to prevent the relevant topology update.

One challenge is determining the Device Type as HOST. A common approach is to monitor Packet-In messages from the switch port to detect host-generated traffic (e.g., ARP, DNS). After detecting such traffic, the port is considered connected to a host, and the Device Type is updated accordingly.

#### Implementation

We have developed a prototype implementation of TopoGuard on the master version of Floodlight. The Topology Update Checker, including the Port Manager and Host Prober, operates as a Floodlight service and consists of approximately 700 lines of Java code. The Topology Update Checker implements IDeviceListener and ILinkDiscoveryListener to monitor topology update events, while the Port Manager implements IOFSwitchListener and IOFMessageListener to manage Port Properties.

To ensure the origin and integrity of LLDP packets, we use a keyed-hash message authentication code (HMAC) as an optional TLV. We utilize the javax.crypto package and select SHA-256 as the hash function, adding about 130 lines of Java code.

#### Evaluation

We evaluated the effectiveness and performance of our TopoGuard prototype in an OpenFlow network environment with the Floodlight controller.

**Effectiveness:**
- **Host Location Hijacking Detection:** An adversary spoofing a target host's identity to hijack its location information can be detected by TopoGuard. The controller fails to receive a Port Down message before the host move event and successfully probes the target host in its previous location.
- **Link Fabrication Prevention:** Falsified LLDP packets to create non-existent links between switches are efficiently prevented. The fortiÔ¨Åed LLDP handler detects and alerts on manipulated DPID or Port ID. For compromised hosts relaying LLDP packets, TopoGuard detects violations of the Device Type.

**Performance:**
- **Overhead on Normal Packet Processing:** The performance penalty mainly comes from the Link Discovery Module and Packet-In message processing. The average delay for TopoGuard in LLDP construction is 0.431 ms for the first round, accounting for 80.4% of the total time. Subsequent constructions incur only 0.005 ms, or 2.92% of the total time. The Port Manager incurs a negligible delay, with an average of 0.02 ms for LLDP packets and 0.032 ms for normal packets.

#### Discussion

Topology management is not included in the OpenFlow Specification, making it vendor-implementation-dependent. Most controllers and switch vendors follow conventions similar to NOX, leading to similar vulnerabilities. Our work aims to draw attention to these security concerns and encourage more robust specifications.

Our attacks focus on the data plane, but control plane security is also a concern. Many controllers and switch vendors lack full SSL/TLS implementation, allowing man-in-the-middle attacks. Extending message authentication to all OpenFlow messages could mitigate this risk.

Finally, the centralized nature of the OpenFlow controller handling layer 2 protocols introduces potential vulnerabilities, such as Denial of Service attacks targeting the Packet-In message handler. Designing a new security fuzzer for SDN controllers could help identify more vulnerabilities.

#### Related Work

Several verification approaches exist for debugging and checking network invariants, such as VeriFlow, NetPlumber, NICE, SOFT, and others. These solutions primarily focus on logic correctness rather than network topology exploitations. Our study highlights the need for real-time defensive solutions against Network Topology Poisoning Attacks.

In legacy networks, similar attacks include ARP Cache Poisoning and STP Mangling. However, these differ in scope and mitigation strategies. Our approach leverages OpenFlow-specific capabilities to dynamically verify host migrations and prevent topology poisoning.

This comprehensive approach ensures the security and reliability of the OpenFlow network, addressing both known and potential vulnerabilities.