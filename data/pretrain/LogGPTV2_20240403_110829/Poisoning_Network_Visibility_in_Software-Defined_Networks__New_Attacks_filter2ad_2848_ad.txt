transmission can cause misclassiﬁcation of ﬁrst-hop trafﬁc. For
this, we also maintain a host-MAC alias map when we observe
some ﬂow rule modifying the source MAC address.
Another purpose of keeping Host List is to verify the trust-
worthiness of a host migration. As we mentioned in Section IV,
the precondition for a host migration is that the OpenFlow con-
troller receives a Port Down signal before the host migration
ﬁnishes. At this point, we set SHUT DOWN FLAG for hosts in
the Host List of a switch port once detecting the port is down.
The SHUT DOWN FLAG can be disabled when Port Manager
receives correlated host trafﬁc from the port. Furthermore, we
can validate the SHUT DOWN FLAG inside Host List for the
veriﬁcation of the host migration.
Host Prober. As the counterpart to checking the precondi-
tion of a host migration, we can also leverage Host Prober
to verify the postcondition, i.e., the host is unreachable in
the previous location after the host migration completes. To
achieve this, the Host Prober issues a host probing packet,
e.g., ICMP Echo Request, to the former location of the host
and waits for a response within a reasonable timeout. The Host
Prober sends out a Packet-Out message with the payload of a
crafted ICMP packet and outputs it to a speciﬁc switch port. In
order to ensure the successful delivery of the response, the Host
Prober also installs a ﬂow rule to direct the ICMP response
back to the OpenFlow controller. Also, to lower the overhead,
in the current implementation, we set the response timeout as
1 second.
Topology Update Veriﬁcation. The Topology Update
Checker veriﬁes the correctness of a topology update including
a host migration and a new link discovery. When a host
migration is detected, the checker references Port Property to
check the precondition and instructs Host Prober to validate
the postcondition. We note that the time overhead of checking
the postcondition would be much higher than that of checking
the precondition. In order to reduce the overall overhead, we
can adopt a roll-back technique in Host Migration veriﬁcation.
That is, the Topology Update Checker updates a host location
if the precondition is passed (SHUT DOWN FLAG for that
Fig. 8: The Architecture of TopoGuard
Fig. 9: The Transition Graph of Device Type
the speciﬁc location of the OpenFlow network, which also
provides forensics to judge the host migration.
B. Design
Port Property Management. In order to reason about the
validness of a topology update, we proﬁle extra properties for
each switch port in an OpenFlow controller. These properties
include: Device Type, Host List and SHUT DOWN FLAG. The
Device Type depicts which type of device a particular switch
port connects to. The value could be ANY, SWITCH and
HOST. As illustrated in Figure 9, The initial value of Device
Type is ANY, which will turn to SWITCH or HOST based on
following trafﬁc. When Port Manager receives LLDP packets
from a switch port with Device Type of ANY, it changes its
type to SWITCH. Similarly, the Device Type of the switch
port is set to HOST when Port Manager receives any ﬁrst-
hop host trafﬁc, i.e., the host identity of the trafﬁc is detected
by the OpenFlow controller for the ﬁrst time. In contrast, the
HOST and SWITCH port are set back to ANY when receiving
a Port Down signal indicated in Port-Status messages. If Port
Manager detects an LLDP packet from a HOST port or a ﬁrst-
hop host packet from a SWITCH port, it raises an attack alert
and notiﬁes Topology Update Checker to prevent the relevant
topology update. The intuition behind this defense approach
is that an LLDP packet is only designed to traverse through
switch internal link ports in the data plane.
One challenge in port property management is how to
decide the Device Type of a port as HOST. An intuitive
solution in the OpenFlow networks is to monitor Packet-In
messages from the switch port to detect host-generated trafﬁc
(e.g., ARP and DNS). After detecting host-generated trafﬁc, we
consider the port is connected to a host and change its Device
10
HOSTSWITCHANYLLDP PacketFirst-Hop Host PacketAttackPort_DownSignalPort_DownSignalLLDP PacketFirst-Hop Host Packethost
is enabled in Port Property of the former location)
without waiting for the result of Host Prober. However, if the
response of Host Prober indicates a malicious host migration,
the Topology Update Checker withdraws the previous update
and raises an attack alert. In this case, the time overhead
for verifying the host migration only counts on validating the
precondition.
The Topology Update Checker also veriﬁes the link discov-
ery. The ﬁrst task is to ensure the LLDP integrity/origin. For
this sake, we place a signature TLV into an LLDP packet,
which is a cryptographic hash value of a DPID and Port
number. As soon as a new link is discovered, the Topology
Update Checker conducts extra veriﬁcation logic for the signed
hash TLV. Then, the Topology Update Checker detects if the
host lies on the path of the LLDP propagation. This task is
achieved by checking the Device Type of switch ports of the
new link. As a result, any internal link update involved in the
HOST port will be denied and trigger an attack alert.
C. Implementation
We have developed a prototype implementation of To-
poGuard on the master version of Floodlight. The Topology
Update Checker, including Port Manager and Host Prober,
works as a Floodlight service and is approximately 700 lines
of Java code. The Topology Update Checker implements IDe-
viceListener and ILinkDiscoveryListener to monitor an update
event of the topology instance inside Floodlight controller,
while the Port Manager implements IOFSwitchListener and
IOFMessageListener to initiate and maintain Port Property for
each switch port.
To ensure the origin and integrity of an LLDP packet, we
also use a keyed-hash message authentication code (HMAC)
as an optional TLV for LLDP packets. In particular, we utilize
javax.crypto package and select SHA-256 as the hash function
along with controller’s secret key. This adds about 130 lines
of code in Java.
D. Evaluation
We evaluated a prototype implementation of TopoGuard to
examine its effectiveness and performance.
1) Effectiveness: We ﬁrst measured the effectiveness of
our implementation against the Network Topology Poisoning
Attacks discussed in Section III. Our experiment is conducted
in the OpenFlow network environment including the Flood-
light controller with TopoGuard. We launched aforementioned
Network Topology Poisoning attacks in the environment and
testiﬁed the reactions of the fortiﬁed Floodlight controller by
observing the console output.
Detecting Host Location Hijacking. An adversary can
spoof the identity of a target host
to hijack its location
information inside OpenFlow controllers. Note that we assume
the target host is not compromised by the adversary. With
TopoGuard, the falsiﬁed host migration can be detected due
to dissatisfaction of the precondition and the postcondition.
Fig. 10: The Detection of Host Location Hijacking Attack
Fig. 11: The Detection of Link Fabrication Attack
That is, the Floodlight controller fails to receive a Port Down
message before receiving a host move event as shown in the
ﬁrst line in the red pane of Figure 10, and it succeeds in
probing the target host in the previous location after receiving
the host move event, as shown in the second line in the red
pane of Figure 10.
Preventing Link Fabrication. An adversary can also
falsify LLDP packets to fabricate non-existing links between
switches. Under the radar of TopoGuard,
the attempts to
exploit the poor origin check and the omitted integrity as-
surance of the LLDP packets can be efﬁciently prevented.
To ensure network dynamics, we do not manually block the
LLDP packets on switch ports, i.e., the adversary is allowed
to receive LLDP packets. However, once either a DPID or
Port ID is manipulated by the adversary, the fortiﬁed LLDP
handler can detect it and ﬁre an alert. Note that we disable
the port property veriﬁcation while checking the integrity of
LLDP packets because this LLDP falsiﬁcation is also launched
inside the data plane.
For another way of link fabrication, the adversary utilizes
compromised hosts to relay LLDP packets between two target
switches. When the compromised hosts start relaying LLDP
packets, TopoGuard detects the violation of Device Type of
particular ports, as shown in the red pane of Figure 11.
2) Performance: We further evaluated the performance of
TopoGuard on Floodlight about
the overhead over normal
packet processing. In this experiment, we leverage Java Sys-
tem.nanoTime API to measure the running time of program
snippets, which provides a precision of 1 nanosecond. Note
that the measurement is conducted after all modules of the
Floodlight controller are completely booted.
Impact on Performance The performance penalty im-
posed by TopoGuard mainly comes from the Link Discovery
Module and the Packet-In message processing. Table V shows
the average delay for TopoGuard added to the Floodlight
controller on link discovery snippets, i.e., different functional
blocks of Link Discovery Module. For the ﬁrst round of
11
Link Discovery Snippet
Impact of TopoGuard (Percentage)
Controller Overall Cost
LLDP Construction(First time with computing HMAC)
LLDP Construction
LLDP Veriﬁcation
0.431ms(80.4%)
0.005ms(2.92%)
0.005ms(1.64%)
0.536ms
0.171ms
0.304ms
TABLE V: HMAC Overhead on the Floodlight controller
the LLDP packets construction, the average overhead of To-
poGuard is 0.431 ms, which accounts for 80.4% of overall
LLDP construction time. However, we note that the following
cost of TopoGuard imposed on the LLDP construction is much
lower, which is about 0.005 ms and only accounts for 2.92% of
overall LLDP construction time. The signiﬁcant discrepancies
stem from our implementation strategy because TopoGuard
computes the HMAC value once and cache the computation
result for the future construction and veriﬁcation of LLDP
packets. The strategy also lowers the impact of TopoGuard
on the veriﬁcation phase of LLDP packets, which is only
about 0.005 ms. On the other hand, the Port Manager incurs
a delay over the normal packets processing because it sits in
the earlier stage in the OpenFlow message processing pipeline
of the Floodlight controller than the Shortest Path Routing
Service and the Link Discovery Service. Accordingly, we also
measure the time that the Port Manager spends on handling
LLDP packets and host-generated packets. The result shows
the average delay is 0.02 ms for the LLDP packets processing
in the Link Discovery Service and 0.032 ms for the normal
packets processing in the Shortest Path Routing Service. From
the above result, we conclude that the impact of TopoGuard is
negligible on the normal operation of Link Discovery Service
of the Floodlight controller.
VI. DISCUSSION
it
Topology management has never been included in the
OpenFlow Speciﬁcation [4]. In other words,
is vendor-
implementation-dependent although there is already some dis-
cussion about this issue in the community. However, most
of existing OpenFlow controllers and switch vendors follow
a certain convention for handling the topology management.
Since the ﬁrst reference OpenFlow controller implementation
(i.e., NOX [13]), almost all the implementations implicitly
follow its design,
including OpenFlow Discovery Protocol
(OFDP) and Host Tracking Service. This may be a root
cause for explaining that all the controllers expose the similar
vulnerabilities. We hope that our work can draw attention from
the SDN community and more security considerations will be
put into the further speciﬁcation.
Our attacks mainly focus on the data plane communication
channel, i.e., an adversary can launch Link Fabrication Attack
or Host Location Hijacking Attack on the top of compromised
hosts. In fact,
the security of OpenFlow control plane is
also a security concern. As discussed in [9], most OpenFlow
controllers and switch vendors lack full implementation of
SSL/TLS. Seizing this security deﬁciency, an adversary can
also launch man-in-the-middle attacks to manipulate control
trafﬁc between the controller and switches. We think that
the message authentication can be extended to all OpenFlow
messages to mitigate potential message falsiﬁcation.
Finally, the fact that the OpenFlow controller handles all
the layer 2 protocols on behalf of switches in OpenFlow
networks leaves a room for other potential vulnerabilities
from which the traditional network switches do not suffer.
For instance, a new kind of Denial of Service attack [31],
targeting at the Packet-In message handler, may saturate the
control channel of OpenFlow as well as overload OpenFlow
controllers. In order to systematically investigate the potential
security issues, designing a new security fuzzer for SDN
(controllers) may help us ﬁnd more vulnerabilities, which is
our future work.
VII. RELATED WORK
In this section, we investigate security research in the SDN
domain and related poisoning attacks in legacy networks.
Security Research for SDN networks. Several veriﬁca-
tion approaches are often used to debug and check network
invariants. VeriFlow [19] presents a layer between the control
plane and the data plane that monitors network state updates
and veriﬁes the violations of invariants dynamically at real
time. NetPlumber [18] introduces a realtime network-wide
policy checking tool using Header Space Analysis (HSA).
NICE [22] uses model checking and symbolic execution to
ﬁnd network software bugs in OpenFlow applications. SOFT
[21] introduces an approach for testing the interoperability
of OpenFlow switches with reference implementations. [14]
designs and presents the ﬁrst machine-veriﬁed SDN controller
based on NetCore [25]. [11] introduces a veriﬁcation tool that
takes the software program of a data plane as input and check
target properties. These veriﬁcation solutions only verify the
logic correctness of the control plane and data plane, however
fail to locate the network topology exploitations discussed in
this paper. One insight behind Network Topology Poisoning
Attacks stems from the centralized network visibility that
OpenFlow Controller offers to lessen onerous network man-
agement tasks. Unfortunately, our study in this paper shows
that this function could be exploited if not carefully designed,
thereby incurring serious security threats.
To date,
the security issues of SDN have been being
widely discussed in both academia and industry. FortNox [27]
introduces a SDN tunneling attack and presents two mecha-
nisms, role-based authorization and security constraint enforce-
ment, to solve corresponding security challenges. OF-RHM
12
[16] proposes OpenFlow Random Host Mutation to dynami-
cally mutates IP addresses of hosts inside an LAN network.
FRESCO [30] introduces an OpenFlow security application
development framework which provides modular composable
security services for application developers. SDN Scanner [29]
and Avant-Guard [31] show a new attack (which is called
data-to-control plane saturation attack) against SDN networks
and provide solutions to prevent such attacks. Different from
the previous work, this paper is the ﬁrst one to study the
network topology visibility exploitation in the SDN network.
Concurrently, SPHINX [23] proposes a uniﬁed approach to
use network ﬂow graphs to detect attacks that violate those
learned ﬂow graphs/modules. Different from their work, this
paper deeply investigates the vulnerabilities causing Network
Topology Poisoning Attacks, as well as a low-overhead real-
time defensive solution.
Related Poisoning Attacks in Legacy Networks. One
notorious counterpart to the Host Location Hijacking Attack
is the ARP Cache Poisoning attack in Ethernet networks. That
is, an adversary sends forged ARP messages to associate the
IP address of the target host with the MAC address of a
malicious host. By doing so, the adversary can hijack the entity
of the target host, which is normally a gateway. However, the
ARP Cache Poisoning attack has several differences from the
Host Location Hijacking Attack as shown in Table VI. First,
the attacking scope of the ARP Cache Poisoning is limited
to a broadcast domain, i.e., the adversary must stay within
the same broadcast domain with its target. By contrast, the
adversary can launch the Host Location Hijacking Attack at
any location of an OpenFlow network. Second, in addition
to ARP reply packets, the Host Location Hijacking Attack
can leverage almost all kinds of packets, e.g., ICMP echo,
UDP and TCP, to usurp the location of the target host. In this
point, the Host Location Hijacking Attack can be concealed in
normal trafﬁc to sidestep NIDS (Network Intrusion Detection
Systems). Also from the defense perspective, the traditional
mitigation strategies for ARP Cache Poisoning, such as the
static ARP entry, may not be appropriate to apply directly
to the SDN network since its static conﬁguration undermines
the dynamics handling capability of the OpenFlow network,
e.g., tracking host migration between various OpenFlow access
points [3]. To defend against the Host Location Hijacking
Attack along with tracking network dynamics, in this paper, we
leverage OpenFlow speciﬁc capabilities to dynamically verify
the host migration.
As illustrated in Table VII, an attack in legacy networks
similar to the spirit of the Link Fabrication Attack is the
STP Mangling (a.k.a, BPDU Falsiﬁcation) attack [26], i.e.,
an adversary falsiﬁes BPDUs with the smallest bridge ID to
preempt the root of Spanning Tree. After faking the root, the
adversary has potential to elaborate a Denial of Service or man-
in-the-middle attack. However, the STP Mangling attack only
disrupts the running of STP rather than injecting a fake link