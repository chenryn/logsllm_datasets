在这里，您可以使用默认网桥驱动程序快速添加网络。点击**高级设置**将带您进入更多选项的页面。这些包括使用其他驱动程序、定义子网、添加标签和限制外部网络访问。与其他部分一样，您也可以删除网络并检查现有网络。
# 卷
除了添加或删除卷，这里没有太多选项。添加卷时，您可以选择驱动程序，也可以填写传递给驱动程序的选项，这允许使用第三方驱动程序插件。除此之外，这里没有什么可看的，甚至没有检查选项。
# 事件
“事件”页面显示过去 24 小时内的所有事件；您还可以选择过滤结果，这意味着您可以快速找到您想要的信息:
![](img/1f6b826a-dd7c-437a-bd0b-4e03e23c0e74.png)
这相当于运行以下命令:
```
$ docker events --since '2018-09-27T16:30:00' --until '2018-09-28T16:30:00'
```
# 发动机
最后一个条目只是向您显示了以下内容的输出:
```
$ docker info
```
下面显示了命令的输出:
![](img/7322577c-78c1-4836-b290-5f95e5b3e4bd.png)
如果您以多个 Docker 实例端点为目标，并且需要端点运行环境的信息，这将非常有用。
此时，我们将继续关注在 Docker Swarm 上运行的 Portainer，因此现在是删除正在运行的容器以及首次启动 Portainer 时创建的卷的好时机，您可以使用以下方法删除该卷:
```
$ docker volume prune
```
# 搬运工和 Docker
在前一节中，我们研究了如何在独立的 Docker 实例上使用 Portainer。Portainer 还支持 Docker Swarm 集群，界面中的选项适应集群环境。我们应该考虑创建一个 Swarm，然后启动 Portainer 作为服务，看看会有什么变化。
# 创造蜂群
正如在 Docker Swarm 一章中，我们将使用 Docker Machine 在本地创建 Swarm；为此，请运行以下命令:
```
$ docker-machine create -d virtualbox swarm-manager
$ docker-machine create -d virtualbox swarm-worker01
$ docker-machine create -d virtualbox swarm-worker02
```
三个实例启动后，运行以下命令初始化 Swarm:
```
$ docker $(docker-machine config swarm-manager) swarm init \
 --advertise-addr $(docker-machine ip swarm-manager):2377 \
 --listen-addr $(docker-machine ip swarm-manager):2377
```
然后运行以下命令，插入您自己的令牌来添加工作节点:
```
$ SWARM_TOKEN=SWMTKN-1-45acey6bqteiro42ipt3gy6san3kec0f8dh6fb35pnv1xz291v-4l89ei7v6az2b85kb5jnf7nku
$ docker $(docker-machine config swarm-worker01) swarm join \
 --token $SWARM_TOKEN \
 $(docker-machine ip swarm-manager):2377
$ docker $(docker-machine config swarm-worker02) swarm join \
 --token $SWARM_TOKEN \
 $(docker-machine ip swarm-manager):2377
```
现在我们已经形成了集群，运行以下命令将本地 Docker 客户端指向管理器节点:
```
$ eval $(docker-machine env swarm-manager)
```
最后，使用以下命令检查 Swarm 的状态:
```
$ docker node ls
```
# Portainer 服务
现在我们有了一个 Docker Swarm 集群，并且我们的本地客户端被配置为与管理器节点通信，我们可以通过简单地运行以下命令来启动 Portainer 服务:
```
$ docker service create \
 --name portainer \
 --publish 9000:9000 \
 --constraint 'node.role == manager' \
 --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
 portainer/portainer \
 -H unix:///var/run/docker.sock
```
如您所见，这将在管理器节点上启动 Portainer 作为服务，并使该服务装载管理器节点套接字文件，以便它可以看到 Swarm 的其余部分。您可以使用以下命令检查服务是否已启动且没有任何错误:
```
$ docker service ls 
$ docker service inspect portainer --pretty
```
以下显示了输出:
![](img/53d7a673-1fe4-482c-9525-50f925aaf3c4.png)
现在服务已经启动，您可以在集群中的任何节点的 IP 地址上访问端口`9000`上的 Portainer，或者运行以下命令:
```
$ open http://$(docker-machine ip swarm-manager):9000
```
当页面打开时，您将再次被要求为管理员用户设置密码；设置完成后，您将收到登录提示。登录后，您将直接进入仪表板。这样做的原因是，我们这次启动 Portainer 时，给它传递了参数`-H unix:///var/run/docker.sock`，它告诉 Portainer 选择我们在单个主机上启动 Portainer 时手动选择的选项。
# 群体差异
如前所述，当连接到 Docker Swarm 集群时，Portainer 接口会有一些变化。在本节中，我们将介绍它们。如果没有提到接口的一部分，那么在单主机模式下运行 Portainer 没有区别。
# 端点
当您登录时，首先要做的是选择一个端点，从下面的屏幕中可以看到，有一个名为 **primary** 的端点:
![](img/f73d75d1-6f79-4794-a20e-6bebdce83c3b.png)
点击端点将带您进入**仪表盘**，我们将在本节末尾再次查看**端点**。
# 仪表板和群
您将注意到的第一个变化是仪表板现在显示了有关 Swarm 集群的信息，例如:
![](img/fd4d1e74-0ad4-4dbf-a2c3-5a34b91ee1bf.png)
请注意，中央处理器显示为 3，总内存为 3.1 GB，集群中的每个节点都有 1 GB 的内存和 1 个中央处理器，因此这些值是集群总数。
点击**转到集群 vizualizer** 将带您进入 Swam 页面，这为您提供了集群的可视化概述，其中当前唯一运行的服务是 Portainer:
![](img/a13868d7-88bf-40ae-9c9c-b01ba405b27d.png)
# 大量
左侧菜单中我们没有涉及的一个项目是**栈**，从这里您可以启动栈，就像我们在查看 Docker Swarm 时所做的那样。事实上，让我们以我们使用的 Docker Compose 文件为例，它看起来如下:
```
version: "3"
services:
   redis:
     image: redis:alpine
     volumes:
       - redis_data:/data
     restart: always
   mobycounter:
     depends_on:
       - redis
     image: russmckendrick/moby-counter
     ports:
       - "8080:80"
     restart: always
volumes:
    redis_data:
```
点击 **+添加栈**按钮，然后将上面的内容粘贴到网页编辑器中，输入名称`MobyCounter`，不要在名称中添加任何空格或特殊字符，因为这是 Docker 使用的，然后点击**部署栈**。
部署后，您将能够点击**移动计数器**并管理栈:
![](img/f6b6017d-3a92-44d3-8c19-2720e6115860.png)
Stacks 是服务的集合，接下来让我们看看它们。
# 服务
您可以在此页面创建和管理服务；它应该已经展示了包括 Portainer 在内的多项服务。为了不让运行的 Portainer 容器出现任何问题，我们将创建一个新的服务。为此，点击 **+添加服务**按钮。在加载的页面上，输入以下内容:
*   **名称**:T0
*   **映像** : `russmckendrick/cluster`
*   **调度模式** : **复制**
*   **复制品** : **1**
这次我们需要为主机上的端口`8000`添加一个端口映射，以将端口`80`映射到容器，这是因为我们在上一节中启动的栈已经在使用主机上的端口`8080`:
![](img/098c7993-08e7-4248-94de-46effda21158.png)
输入信息后，点击**创建服务**按钮。您将返回到服务列表，该列表现在应该包含我们刚刚添加的集群服务。您可能已经注意到，在计划模式列中，有一个缩放选项。点击它，将我们的**集群**服务的副本数量增加到 **6** 。
点击**名称**栏中的**集群**，我们将看到该服务的概述。如您所见，该服务有很多信息:
![](img/a9e27419-518a-475d-ba8b-0e4204160578.png)
您可以动态地对**服务**进行许多更改，包括放置约束、重启策略、添加服务标签等等。页面底部是与服务相关的任务列表:
![](img/e5341775-3d05-45d8-8f58-9cf92908c2fc.png)
如您所见，我们有六个正在运行的任务，三个节点各有两个。点击左侧菜单中的**容器**可能会显示与您预期不同的内容:
![](img/d60f20dd-8806-4bfd-bc7a-fa44f6973644.png)
这里只列出了三个容器，其中一个用于 Portainer 服务。为什么会这样？
好吧，如果你还记得在 Docker Swarm 一章中，我们了解到`docker container`命令只真正适用于运行它们的节点，并且由于 Portainer 只与我们的管理器节点对话，所以这是 Docker 容器命令执行的唯一节点。请记住，Portainer 只是 Docker API 的一个 web 界面，因此它反映了您在命令行上运行`docker container ls`时得到的相同结果。
# 添加端点
但是，我们可以将剩下的两个集群节点添加到 Portainer 中。为此，点击左侧菜单中的**端点**条目。
要添加端点，我们需要知道端点的网址，并有权访问证书，这样 Portainer 就可以针对节点上运行的 Docker 守护程序进行认证。幸运的是，当我们使用 Docker Machine 启动主机时，这是一个简单的任务。要获取端点 URL，请运行以下命令:
```
$ docker-machine ls
```
对我来说，两个端点 URL 分别是`192.168.99.101:2376`和`192.168.99.102:2376`；你的可能不一样。我们需要上传的证书可以在您机器上的`~/.docker/machine/certs/`文件夹中找到。我建议运行以下命令来打开 finder 中的文件夹:
```
$ cd ~/.docker/machine/certs/
$ open .
```
添加节点后，您可以使用**设置/端点**页面中的 **+添加端点**按钮来更改节点。
从这里输入以下信息:
*   **名称**:T0
*   **端点网址** : `192.168.99.101:2376`
*   **公共 IP:** `192.168.99.101`
*   **TLS** :开
*   **带服务器和客户端验证的 TLS**:勾选
*   从`~/.docker/machine/certs/`上传证书
然后点击 **+添加端点**按钮，点击**主页**将带您进入本章开头我们首次看到的端点概述屏幕。正如您从下面的截图中看到的，我们可以看到工作人员每个人运行三个容器，并且他们被标记为独立的，而不是 Swarm:
![](img/e367b2ca-bca4-4833-82c5-22682805ecce.png)
您还会注意到，除了端点中提到的 Swarm 之外，没有提到 Swarm 服务。同样，这是因为 Portainer 只知道与您的 Docker 节点一样多的信息，而 Swarm 模式只允许具有管理器角色的节点启动服务和任务，并与集群中的其他节点进行交互。
不要忘记运行以下命令来删除本地 Docker Swarm 集群:
```
$ docker-machine rm swarm-manager swarm-worker01 swarm-worker02
```
# 摘要
我们在 Portainer 的深度潜水到此结束。正如您所看到的，Portainer 非常强大，但使用起来很简单，并且随着功能的发布，它只会继续增长并集成更多的 Docker 生态系统。使用 Portainer，不仅可以对主机进行大量操作，还可以对运行在单个或集群主机上的容器和服务进行大量操作。
在下一章中，我们将了解如何保护您的 Docker 主机，以及如何对您的容器映像运行扫描。
# 问题
1.  在 macOS 或 Linux 机器上，挂载 Docker 套接字文件的路径是什么？
2.  Portainer 运行的默认端口是什么？
3.  对还是错:您可以使用 Docker 编写文件作为应用模板？
4.  真假:Portainer 显示的统计数据只是实时的，你不能查看历史数据？
# 进一步阅读
您可以在以下网址找到有关 Portainer 的更多信息:
*   主网站:[https://portainer.io/](https://portainer.io/)
*   inter Handel on github:https://github . com/porter/
*   最新文档:[https://portainer.readthedocs.io/en/latest/index.html](https://portainer.readthedocs.io/en/latest/index.html)
*   模板文档:[http://portainer.readthedocs.io/en/latest/templates.html](https://portainer.readthedocs.io/en/latest/templates.html)