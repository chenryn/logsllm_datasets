## Page 1282
: max('a','b')://calls max(by argument
deduction)
: max (7, 42): //calls the nontemplate for two ints
: max<> (7, 42): //calls max (by argument deduction)
: max (7, 42): //calls max (no argument
deduction)
: max ('a', 42.7): //calls the nontemplate for two ints
上
我们在main（）方法中可以看到，函数：max适用于实现了比较操
作符的所有类型。在C++中，这些类型可以是原生类型，也可以是
用户定义的类型。没有限制它一定要继承自某个特定的类。它可以
是任何类型，只要它在比较方面满足基本需求。隐含的类型定义
是：操作符void speak (T speaker)(
speaker.talk () ;
{
int main (){
Dog d:
1282
---
## Page 1284
Robot r:
speak (d);
speak (r) :
{
我们不能在Java中做同样的事情，因为下面的代码不能通过编译：
public class Communicate{
publicvoid speak (T speaker）(
speaker.talk () ;
令人困惑的是，下面的代码能够通过编译，因为在Java中，泛型类
型被悄悄转换成了Object的实例（这叫做擦除）：
public class Communicate {
publicvoid speak (T speaker)(
speaker.toString () : //object methods work!
F
所以我们必须像下面这样做：
interface Speaks(void speak ():
public class Communicate{
1283
---
## Page 1285
speaker.speak ():
但是这在很大程度上减少了泛型的好处，因为我们要通过Speak接
口来定义一个类型。缺乏一般性也体现在Java的原生类型不能使用
泛型机制。作为一种变通方案，Java提供了包装类，即与原生类型
对应的真正的对象类。在原生类型和包装类型之间的转换在Java编
程中曾是令人不快的工作。在该语言最近的版本中情况有所好转，
因为提供了自动装箱（auto-boxing）功能，在特定的环境下进行自
动的转换。尽管如此，我们可以写List，却不能写List。
潜在类型最近很流行，因为在Ruby编程语言中大量采用。术语“鸭
子定型”（ducktyping）是一种对归纳推理的半开玩笑的说法，源自
JamesWhitcombRiley，原文是这样的：
如果它走路像鸭子，而且叫起来像鸭子，我就会称之为鸭子。
要了解鸭子类型的重要性，让我们以面向对象编程的一项基本特征
一多态一为例。多态指的是在相同的上下文中使用不同的类型。实
现多态的一种方法是通过继承。子类可以用在（准确地说是"应该
能用在"，因为程序员可能不小心）所有可以使用超类的地方。鸭
子类型提供了另一种实现多态的方法：只要一个类型提供的方法适
用于某个上下文，它就可以用于该上下文。在前面用Python和
C++写的宠物和机器人的例子中，Dog和Robot没有共同的超类。
当然，你可以通过编程在只支持继承类型的多态的语言中变通地实
现鸭子类型。但是，如果程序员在解决面对的问题时可以使用更多
的工具，那他就更富有。只要工具的流行程度不是问题，他就可以
选择最合适当前情况的工具。关于这一点，BjarneStroustrup在
《TheDesignandEvolutionofC++》（1994）中表达得很漂亮：
我对计算机和编程语言的兴趣基本上是实用主义的。
1284
---
## Page 1286
我更习惯经验主义而不是理想主义......也就是说，我更喜欢亚里士
多德而不是柏拉图，更喜欢休谟而不是笛卡儿，对帕斯卡只能难过
地摇摇头。我发现一些完备的“系统”就像柏拉图和康德梦想的那
样，但基本上不能让我满意，因为它们离我的日常经验极其遥远，
也与个人的基本特点相去甚远。
我发现克尔凯郭尔对个人的狂热关注和敏锐的心理学洞见对我来说
更有吸引力，远甚于黑格尔或马克思对人性的崇高计划和关注。尊
重一个群体而不尊重群体中的个人，则根本不是尊重。许多C++的
设计决定的根源都在于我不喜欢强制人们用某种特定的方式来做事
情。从历史上看，许多最大的灾难都来自于理想主义者试图强道人
们“做对他们有好处的事情”。这种理想主义不仅会导致无辜的受害
者遭受痛苦，而且会导致理想主义者应用强制力时的幻觉和腐败。
我也发现理想主义者常常倾向于忽略经验和实验，这些经验和实验
不巧恰好与教义或理论相抵触。当理想发生冲突时，有时甚至是权
威们一致同意时，我倾向于提供支持，让程序员自行选择。
回到Smalltalk，请考虑遍历一个对象集合，对其中每个元素调用一
个方法，然后收集结果。实现如下：
collect: aBlock
"Evaluate aBlock with each of the receiver's elements as
the argument.
Collect the resulting values into a collection like the
receiver.Answer
the new collection. "
|newCollection|
self do: [: each|newCollection add: (aBlock value: each) ].
^newCollection
要理解这个方法，只要知道species方法要么返回消息接收者的类，
要么返回一个与之类似的类一这种区别很小，在这里对我们几乎没
1285
---
## Page 1287
有区别。有趣的是，要构造新的集合，我们只需要元素具有名为
value的选择器，我们将调用它。语句块确实有一个名为value的选择
器，所以所有的语句块都可以使用。但我们只是碰巧提到语句块：
任何实现了value选择器的类都可以。
所有返回一个值的东西在编程时具有足够的重要性，所以它们得到
了一个名称，被称为函数对象，它是C++STL算法的基本构成。从
传统来看，它是函数式编程的主要成分，通常称为map函数。在
Lisp中当然提供这个函数。在Python中也提供这个函数，让我们能
做这样的事：
def negate (x): return-x map (negate,range (1, 10))
在Perl中这样写：
map(-$_) (1..10)
C++STL能做同样的事（Josuttis1999，9.6.2）：
vectorcoll1;
listcoll2;
/ /initialize coll1
//negate all elements in coll1
transform (coll1.begin (), colll.end (), //source range
back_inserter (coll2),//destination range
negate () ) : //operation
也许我们这个时代的悲剧就是许多C++程序员只会写对数组循环的
代码。
1286
---
## Page 1288
鸭子定型可能会引起争论，它也确实引起了争论。在像C++这样的
静态类型语言中，编译器会检查包含潜在类型的表达式中使用的对
象是否确实提供了要求的接口。在像Smalltalk这样的动态类型语言
中，当运行出错时才会被发现。
这一点不能不考虑。强类型的语言防止了程序员的疏忽，这在大的
项目中特别有用，因为好的结构有助于维护。20世纪80年代，从传
统UNIXC转到ANSIC的最重要变化就是引入了更强的类型系统：C
有了规矩的原型，函数参数会在编译时进行检查。我们现在会对类
型间的转换觉得不舒服。简而言之，我们用一些自由换取了一些纪
律，或者说用一些混沌换取了一些有序。
在Smalltallk中，通常假定不会导致混沌，因为我们应该编写小的代
码片段，同时对它们进行测试。测试在Smalltalk中很容易。因为没
码片段，直接观察代码的行为。单元测试也很容易，我们可以在写
代码之前先编写单元测试，不必担心编译器会报错说有未声明的类
型或方法。给我们带来JUnit的社区与Smalltalk社区分享了很多经
验，这也许不是偶然的。我们可以通过一些Java脚本语言实现差不
多同样的东西，例如BeanShell或Groovy。实际上，强类型语言会带
给我们安全的错觉：
如果程序是以强静态类型的语言编译而成的，那么这仅仅说明它通
过了某些测试。这意味着语法保证是正确的......但是不能仅因为代