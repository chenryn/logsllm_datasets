title:SecureBus: towards application-transparent trusted computing with
mandatory access control
author:Xinwen Zhang and
Michael J. Covington and
Songqing Chen and
Ravi S. Sandhu
SecureBus: Towards Application-Transparent Trusted
Computing with Mandatory Access Control
Xinwen Zhang
George Mason University
∗
Fairfax, Virginia, USA
PI:EMAIL
Michael J. Covington
Intel Corporation
Hillsboro, Oregon, USA
PI:EMAIL
Songqing Chen
George Mason University
Fairfax, Virginia, USA
PI:EMAIL
Ravi Sandhu
George Mason University
and TriCipher Inc., USA
PI:EMAIL
ABSTRACT
The increasing number of software-based attacks has attracted sub-
stantial efforts to prevent applications from malicious interference.
For example, Trusted Computing (TC) technologies have been re-
cently proposed to provide strong isolation on application platforms.
On the other hand, today pervasively available computing cycles
and data resources have enabled various distributed applications
that require collaboration among different application processes.
These two conﬂicting trends grow in parallel. While much exist-
ing research focuses on one of these two aspects, a few authors
have considered simultaneously providing strong isolation as well
as collaboration convenience, particularly in the TC environment.
However, none of these schemes is transparent. That is, they re-
quire modiﬁcations either of legacy applications or the underlying
Operating System (OS).
In this paper, we propose the SecureBus (SB) architecture, aiming
to provide strong isolation and ﬂexible controlled information ﬂow
and communication between processes at runtime. Since SB is ap-
plication and OS transparent, existing applications can run without
changes to commodity OS’s. Furthermore, SB enables the enforce-
ment of general access control policies, which is required but difﬁ-
cult to achieve for typical legacy applications. To study its feasibil-
ity and performance overhead, we have implemented a prototype
system based on User-Mode Linux. Our experimental results show
that SB can effectively achieve its design goals.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access con-
trols; K.6.5 [Management of Computing and Information Sys-
∗Now at Samsung Information Systems America, San Jose, Cali-
fornia, USA.
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first page.
To copy otherwise, or republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
ASIACCS’07, March 20–22, 2007, Singapore.  
Copyright 2007 ACM 1-59593-574-6/07/0003…$5.00.
tems]: Security and Protection—Unauthorized access; H.4 [Information
Systems Applications]: Miscellaneous
General Terms
Security, Management
Keywords
SecureBus, Trusted Computing, Mandatory Access Control, Se-
cure Platform
INTRODUCTION
1.
Ever-increasing software-based attacks have demonstrated that ex-
isting Operating Systems (OS’s) cannot provide sufﬁcient isola-
tion for the security demands of legacy applications. Signiﬁcant
research effort has been made to strengthen isolation among pro-
cesses at runtime. For example, recently the emerging Trusted
Computing (TC) technologies have been developed to enforce strong
isolation between applications to preserve their integrity at runtime,
and provide veriﬁable trust to remote entities. In TC, the root of
trust is generally based on trusted hardware, such as a secure co-
processor [28] or trusted platform module (TPM) [3].
Despite the rapid growth of security threats, widely available com-
modity computing resources have enabled a large scope of dis-
tributed applications, such as Peer-to-Peer (P2P) and grid-based.
Such applications often demand collaborations among connected
computing nodes, where various processes need to communicate
with each other in order to exchange data and share resources on a
single platform or across different platforms via networking.
The increase of software-based attacks and the growth of collabo-
rative applications conﬂict in computing and system requirements.
To prevent attacks from outside, processes should be isolated and
integrity must be protected at runtime through isolation in memory.
For example, an email with an attachment is commonly used for
spreading viruses. If the email client and the process launched to
view/execute the attachment can be isolated so that the latter can-
not read or modify the former’s sensitive data, e.g. address book,
such attacks would have not succeeded. On the other hand, the
frequent and dynamic interactions required between processes in
many distributed applications make a running process susceptible
to easy compromise by direct interference from other processes, or
117
by fake/malicious input, or by unexpected data from sources with
lower integrity or sensitivity levels.
The majority of existing research focuses on either providing pro-
cess integrity assurances at runtime via various isolation mecha-
nisms, such as the TC technologies, or providing ﬂexible com-
munications, such as the design of Globus [14]. Only a few au-
thors have considered how to simultaneously provide strong iso-
lation with ﬂexible communication support. For example, in Mi-
crosoft’s Next Generation Secure Computing Base (NGSCB) [7], a
secure kernel, referred to as Nexus, provides separated runtime en-
vironments for individual application agents. Communication and
access control between agents are mediated by a trusted service
provider (TSP) in user space. Proper [20] is a user space applica-
tion that provides access control services for privileged operations
between application-level virtual machines (VMs) on a PlanetLab
node. In BIND [27], critical sections of a running process are iso-
lated and there is no runtime communication between the isolated
sections and outside.
Although these approaches could be efﬁcient under certain circum-
stances for achieving both strong isolation and ﬂexible collabora-
tions, a common problem of these schemes is that either applica-
tions need to be substantially modiﬁed to use the security services
provided by the underlying layers, or the underlying OS must be
customized or trusted. For example, in NGSCB, the secure kernel
and all supported services and applications are located in an area
called Nexus mode that is separated from the original OS and all
applications are developed speciﬁcally to run in this Nexus mode.
Existing applications can only run in the standard mode, where a
legacy OS is running. Thus they cannot use the security services
provided by the new design. Proper is dedicated for a speciﬁc
Linux distribution (Linux VServers) that is deployed on PlatnetLab
nodes, and it is difﬁcult for Proper to be applied in other environ-
ments. In BIND [27], critical sections of a process code have to be
identiﬁed and the invocation of the security functions provided by
the secure kernel needs to be inserted into these sections. This ap-
proach leads to a situation in which most existing applications and
OS’s cannot beneﬁt from the strong security provided by emerg-
ing TC technologies. Furthermore, typically these approaches only
support some speciﬁc collaboration modes. For example, BIND
does not permit input once a critical section of a process has been
isolated and it cannot provide information ﬂow control between
processes.
In this paper we propose a novel architecture called SecureBus
(SB), which can provide simultaneous strong isolation and trans-
parent access control enforcement between processes. Built on TC,
trusted hardware is leveraged to provide the root of trust and ex-
tend trust to a secure kernel (SK) and SB, in turn. The SB enhances
existing TC technologies and has the following features.
• Built on trusted hardware, SB provides strong runtime pro-
cess isolation by allocating and maintaining separated run-
time memory space for each process. The authenticity of
a process’s running code and its input and output data is
achieved by using digital signatures with the corresponding
usage contexts. Speciﬁcally, a process’s code is hashed by
SB before being loaded. The output data of the process is
signed by SB and concatenated with the hash values of the
process code and the input.
• By leveraging the trust chain from the trusted root of a plat-
form to SK and to applications, SB supports process-based
attestation to enable secure communications and collabora-
tions between processes. On a single platform, SB acts as
a trusted proxy of an isolated process to communicate with
other processes. In a distributed environment, SB on a plat-
form builds a trusted channel with its counterpart on another
platform through remote attestation.
• SB provides a reference monitor that implements ﬂexible
access control between isolated processes. Various access
control and integrity policies can be enforced, such as role-
based, history-based, and mandatory access control policies,
as well as application- and organization-speciﬁc policies.
Compared with existing approaches, SB is transparent to upper-
layer applications and the underlying OS. At the application level,
SB provides the same system call interface as the OS does and en-
forces authenticity veriﬁcation and access control policies transpar-
ently. Meanwhile, since SB invokes system calls on behalf of the
protected applications, our architecture does not require modiﬁca-
tions of the underlying OS. That is, existing applications can run
on top of SB without change, and existing OS can use SB to pro-
vide strong trusted computing and security services, such as iso-
lated runtime space and controlled accesses between processes, for
applications.
As SB is transparent but has trust relationship with applications,
common security functions such as authentication and authoriza-
tion can be implemented by SB for the purpose of conﬁdentiality
and integrity. Thus, our architecture enables the separation of func-
tionalities and security demands of applications, which reduces the
burden to application developers and provides ﬂexibility for secu-
rity conﬁgurations.
To verify the feasibility of our approach and study the performance
overhead of the SB architecture, we have implemented a prototype
based on User-Mode Linux [13]. As a proof-of-concept, we also
implemented the lattice-based Chinese Wall policy [26] to control
information ﬂow in the prototype. Experiments performed based
on the prototype system show that it is effective with reasonable
performance overhead.
The remainder of this paper is organized as follows. Section 2
presents our problem statement and an overview of the design space.
In Section 3, our proposed architecture and the primitive functions
of SB are introduced. Section 4 and Section 5 describe how to
achieve integrity and authenticity veriﬁcation, in addition to the ac-
cess control policy and its enforcement using SB. We present a pro-
totype implementation and some experimental results in Section 6.
Related work is reviewed in Section 7 and we make concluding
remarks in Section 8.
2. PROBLEM STATEMENT AND DESIGN
SPACE
Modern operating systems support process abstraction with isola-
tion, ﬂexible sharing (e.g., of ﬁle systems, OS resources, and hard-
ware), and inter-process communication (IPC). With an increasing
amount of loss and damage caused by various software-based at-
tacks, it has been realized that a commodity OS alone cannot pro-
vide a high-assurance environment for applications. Understand-
ing and using trust at the application layer has been studied for
a long time, such as in the Database Interpretation of the Orange
118
Book [12]. Recently a new approach called Trusted Computing
(TC) has been developed by leading industry vendors for this pur-
pose. A distinguishing aspect of TC is that it combines crypto-
graphic mechanisms with access control. Keys providing the root
of cryptographic trust are not only protected in a separate hardware
component but their use is also limited to approved software.
The Trusted Computing Group (TCG) has deﬁned a set of speci-
ﬁcations aiming at providing a hardware-based root of trust and a
set of primitive functions that allow trust to propagate to applica-
tion software. The root of trust in the TCG approach is a hardware
component on the platform called Trusted Platform Module (TPM).
Application-level trust requires strong integrity checks of binary
code for running processes and a mechanism that allows other en-
tities (applications or platforms) to verify the integrity. A TPM
has the capabilities to measure and report runtime conﬁgurations
of the platform, from BIOS to OS. TPM and TC-enhanced hard-
ware technologies such as Intel’s LaGrande Technology (LT) [1]
and AMD’s Secure Execution Mode (SEM) [6] generally allocate
isolated memory partitions to different application processes to pre-
vent software-based attacks at runtime.
Although isolation based on TC ensures the binary code’s integrity
of an application at runtime, it creates hurdles if the process needs
to communicate or share information with other isolated processes
on the same platform. For example, when processes are strongly
isolated in memory space at runtime, traditional IPC mechanisms,
such as shared memory, are no longer viable.
Moreover, even with strong isolation for runtime integrity warranty,
such isolation cannot guarantee the authenticity of the communi-
cating party and the data ﬂow (e.g., input and output) between ap-
plications, and cannot provide ﬂexible access control mechanisms
between applications. These two aspects are critical to preserve
the overall integrity of a system, which is not solely dependent on
its running code’s integrity. In the former case, a (receiving) pro-
cess needs to ensure that the data it is receiving is trusted, i.e., the
source process is genuine. Furthermore, the trust should be veriﬁ-
able. For the latter, sometimes even if a data-sending process can
be trusted, it may have lower integrity or higher conﬁdentiality than
that of the receiving process. Receiving such data may compromise
the integrity of its own data or conﬁdentiality of the sender’s data.
Therefore, access control should be enforced between processes to
satisfy certain security requirements deﬁned by the system admin-
istrator. Currently such interactions between applications heavily
depend on the underlying OS, which can easily cause illegal infor-
mation ﬂow and compromise the overall integrity and conﬁdential-