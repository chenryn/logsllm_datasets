V. MODELING INSTRUCTION-SDC-VOLATILITY
We ﬁrst explain how the overall SDC probability of a
program is calculated using TRIDENT, which we proposed
in our prior work [11]. We then describe VTRIDENT,
an extension of TRIDENT to predict INSTRUCTION-SDC-
VOLATILITY. The main difference between the two models
is that VTRIDENT simpliﬁes the modeling in TRIDENT
to improve running time, which is essential for processing
multiple inputs.
(a) Value Range
(b) Execution Path
(c) Size of Loop
Fig. 2: Patterns Leading to INSTRUCTION-SDC-VOLATILITY
A. TRIDENT
Case 2: Execution Paths and Branches
in Figure 2b,
Different program inputs may exercise different execution
paths of programs. For example,
there are
three branch directions labeled with T1, F1 and T2. Each
direction may lead to a different execution path. Assume that
the execution probabilities of T1, F1 and T2 are 60%, 70%
and 80% for some INPUT A. If a fault occurs at the BR
instruction and modiﬁes the direction of the branch from F1
to T1, the probability of this event is 70% as the execution
probability of F1 is 70%. In this case, the probability for
the fault to propagate to the STORE instruction under T2 is
70%*80%=56%. Assuming there is another INPUT B which
makes the execution probabilities of T1, F1 and T2, 10%, 90%
and 30% respectively. The probability for the same fault to
propagate to the STORE instruction becomes 90%*30%=27%.
Thus, the propagation probability of the fault decreases by 29%
from INPUT A to INPUT B, and thus the SDC volatility of
the BR instruction is 29%. In the nine benchmarks, we ﬁnd
that 43.28% of the branches on average exhibit variations of
branch probabilities across inputs, leading to variation of SDC
probability in instructions.
Case 3: Number of Iterations of Loops
The number of loop iterations can change when program
inputs are changed, causing volatility of error propagation. For
example, in Figure 2c, there is a loop whose termination is
controlled by the value of R2. The CMP instruction compares
R1 against R0 and stores it in R2. If the F branch is taken,
the loop will continue, whereas if T branch is taken, the loop
will terminate. Assume that under some INPUT A the value
of R0 is 4, and that in the second iteration of the loop, a fault
occurs at the CMP instruction and modiﬁes R2 to TRUE from
FALSE, causing the loop to terminate early. In this case, the
STORE instruction is only executed twice whereas it should be
executed 4 times in a correct execution. Because of the early
termination of the loop, there are 2 STORE executions missing.
Assume there is another INPUT B that makes R0 8, indicating
there are 8 iterations of the loop in a correct execution. Now
for the same fault in the second iteration, the loop terminates
resulting in only 2 executions of the STORE whereas it should
execute 8 times. 6 STORE executions are missing with INPUT
1) How TRIDENT works: TRIDENT [11] models error
propagation in a program using static and dynamic analyses
of the program. The model takes the code of the program
and executes it with a (single) program input provided to
analyze error propagation. It tracks error propagation at three
levels, namely static instruction sequence, control-ﬂow and
memory dependency in the program execution (see appendix
for details). The output of TRIDENT is the SDC probability
of each individual instruction and the overall SDC probability
of the program. TRIDENT requires a single program input for
its calculations, and consequently, the output of TRIDENT
is speciﬁc to the program input provided.
As mentioned in Section IV-B2, we identify three patterns
leading to INSTRUCTION-SDC-VOLATILITY in programs.
TRIDENT ﬁrst tracks error propagation in static instructions,
in which the propagation probability of each instruction is
computed based on the proﬁled values and the mechanism of
the instruction. The propagation probabilities of the instruc-
tions are used to compute the SDC probability of each straight-
line code sequence. Since the proﬁling phase is per input, Case
1 is captured and different values of instructions from different
inputs can be factored into the computation. After tracking
errors at the static instruction level, TRIDENT computes the
probability leading to memory corruption if any control-ﬂow
divergence occurs. At this phase, branch probabilities and loop
information are proﬁled for the computation, which are also
input speciﬁc. Therefore, Cases 2 and 3 are also captured by
TRIDENT when different inputs are used.
2) Drawbacks of TRIDENT: Even though TRIDENT
is orders of magnitude faster than FI and other models in
measuring SDC probabilities, it can sometimes take a long
time to execute depending on the program input. Further,
when we want to calculate the variation in SDC probabilities
across inputs, we need to execute TRIDENT once for each
input, which can be very time-consuming. For example, if
TRIDENT takes 30 minutes on average per input for a given
application (which is still considerably faster than FI), it would
take more than 2 days (50 hours) to process 100 inputs. This
is often unacceptable in practice. Further, because TRIDENT
tracks memory error propagation in a ﬁne-grained manner, it
needs to collect detailed memory traces. In a few cases, these
R1 = LOAD R2… ...R3 = CMP GT R1, R0BR R3, … ...BR R1, … ...STORET1F1… ...T2R2 = CMP GT R1, R0BR R2, … ...STORE, … ...… ...TFtraces are too big to ﬁt into memory, and hence we cannot run
TRIDENT at all. This motivates VTRIDENT, which does not
need detailed memory traces, and is hence much faster.
the example, we assume LOOP 4 and 5 execute two iterations
each for simplicity. Therefore, the fault leads to an SDC if the
fault propagates to the instruction.
B. VTRIDENT
As mentioned above, the majority of time spent in execut-
ing TRIDENT is in proﬁling and traversing memory depen-
dencies of the program, which is the bottleneck in scalability.
VTRIDENT extends TRIDENT by pruning any repeating
memory dependencies from the proﬁling, and keeping only
distinct memory dependencies for tracing error propagation.
The intuition is that if we equally apply the same pruning to
all inputs in each program, similar scales of losses in accuracy
will be experienced across the inputs. Therefore, the relative
SDC probabilities across inputs are preserved. Since volatility
depends only on the relative SDC probabilities across inputs,
the volatilities will also be preserved under pruning.
Fig. 3: Workﬂow of VTRIDENT
1) Workﬂow: Figure 3 shows the workﬂow of VTRI-
DENT. It is implemented as a set of LLVM compiler passes
which take the code of the program (compiled into LLVM IR)
and a set of inputs of the program. The output of VTRIDENT
is the INSTRUCTION-SDC-VOLATILITY and INSTRUCTION-
EXECUTION-VOLATILITY of the program across all the in-
puts provided, both at the aggregate level and per-instruction
level. Based on Equation 2, OVERALL-SDC-VOLATILITY
can be computed using INSTRUCTION-SDC-VOLATILITY and
INSTRUCTION-EXECUTION-VOLATILITY.
VTRIDENT executes the program with each input pro-
vided, and records the differences of SDC probabilities
predicted between inputs to generate INSTRUCTION-SDC-
VOLATILITY. During each execution, the program’s dynamic
footprint is also recorded for the calculation of INSTRUCTION-
EXECUTION-VOLATILITY. The entire process is fully auto-
mated and requires no intervention of the user. Further, no FIs
are needed in any part of the process.
2) Example: We use an example from Graph in Figure 4a
to illustrate the idea of VTRIDENT and its differences from
TRIDENT. We make minor modiﬁcations for clarity and
remove some irrelevant parts in the example. Although VTRI-
DENT works at the level of LLVM IR, we show the corre-
sponding C code for clarity. We ﬁrst explain how TRIDENT
works for the example, and then explain the differences with
VTRIDENT.
In Figure 4a,
the C code consists of three functions,
each of which contains a loop. In each loop, the same array
is manipulated symmetrically in iterations of the loops and
transferred between memory back and forth. So the load and
store instructions in the loops (LOOP 1, 2 and 3) are all
memory data-dependent. Therefore, if a fault contaminates any
of them, it may propagate through the memory dependencies
of the program. init() is called once at the beginning, then
Parcour() and Recher() are invoked respectively in LOOP 4
and 5. printf (INDEX 6) at the end is the program’s output. In
(a) Code Example
(b) Pruning in VTRIDENT
Fig. 4: Example of Memory Pruning
Fig. 5: Memory Dependency Pruning in TRIDENT
To model error propagation via memory dependencies of
the program, a similar memory dependency graph is created
in Figure 5. Each node represents either a dynamic load or
store instruction of which indices and loop positions of their
static instructions are marked on their right. In the ﬁgure,
each column of nodes indicates data-dependent executions of
the instructions - there is no data ﬂowing between columns
as the array of data are manipulated by LOOP 1, 2 and 3
symmetrically. In this case, TRIDENT ﬁnds the opportunity to
prune the repeated columns of nodes to speed up its modeling
time as error propagations are similar in the columns. The
pruned columns are drawn with dashed border in the ﬁgure,
and they indicate the pruning of the inner-most loops. TRI-
DENT applies this optimization for memory-level modeling,
vTrident●Program code (LLVM IR)●Program inputs●Instruction-SDC-Volatility●Instruction-Execution-Volatilityfunction init(...){for(...){LOOP 1...store …, R1; INDEX 1}}function Parcour(...){for(...){LOOP 2....R2 = load R1;INDEX 2…store R2, R1;INDEX 3}}function Recher(...){for(...){LOOP 3R3 = load R1;INDEX 4…storeR3, R1;INDEX 5}}init();while(...){LOOP 4Parcour();}while(...){LOOP 5Recher();}printf  *R1;INDEX 6SLSLSLSLSPINDEX 1INDEX 2INDEX 3INDEX 2INDEX 3INDEX 4INDEX 5INDEX 4INDEX 5INDEX 611110.50.80.50.8LOOP 2LOOP 2LOOP 3LOOP 3LOOP 1vTridentPruningINPUT AINPUT BLOOP 5LOOP 4… … INDEX 1    LOOP 1TridentPruningSSSSLLLLSSSSLLLLSSSSLLLLSSSSLLLLSSSSP… … INDEX 2… … INDEX 3… … INDEX 2… … INDEX 3… … INDEX 4… … INDEX 5… … INDEX 4… … INDEX 5… … INDEX 6LOOP 2LOOP 2LOOP 3LOOP 3LOOP 4LOOP 5resulting in signiﬁcant acceleration compared with previous
modeling techniques [11]. However, as mentioned, the graph
can still take signiﬁcant time to construct and process.
To address this issue, VTRIDENT further prunes memory
dependency by tracking error propagations only in distinct
dependencies to speed up the modeling. Figure 4b shows the
idea: The graph shown in the ﬁgure is pruned to the one by
TRIDENT in Figure 5. Arrows between nodes indicate prop-
agation probabilities in the straight-line code. Because there
could be instructions leading to crashes and error masking
in straight-line code, the propagation probabilities are not 1.
The propagation probabilities marked beside the arrows are
aggregated to compute SDC probabilities for INPUT A and
INPUT B respectively. For example, if a fault occurs at INDEX
1, the SDC probability for the fault to reach program output
(INDEX 6) is calculated as 1∗1∗0.5∗0.5 = 25% for INPUT A,
and 1∗1∗0.8∗0.8 = 64% for INPUT B. Thus, the variation of
the SDC probability is 39% for these two inputs. VTRIDENT
prunes the propagation by removing repeated dependencies
(their nodes are drawn in dashed border in Figure 4b). The
calculation of SDC probability for the fault that occurred at
INDEX 1 to INDEX 6 becomes 1*0.5 = 50% with INPUT A,
and 1*0.8 = 80% with INPUT B. The variation between the
two inputs thus becomes 30%, which is 9% lower than that
computed by TRIDENT (i.e., without any pruning).
We make two observations from the above discussion: (1)
If the propagation probabilities are 1 or 0, the pruning does
not result in loss of accuracy (e.g., LOOP 4 in Figure 4b).
(2) The difference with and without pruning will be higher if
the numbers of iterations become very large in the loops that
contain non-1 or non-0 propagation probabilities (i.e., LOOP
5 in Figure 4b). This is because more terms will be removed
from the calculation by VTRIDENT. We ﬁnd that about half
(55.39%) of all faults propagating in the straight-line code have
either all 1s or at least one 0 as the propagation probabilities,
and thus there is no loss in accuracy for these faults. Further,
the second case is rare because large iterations of aggregation
on non-1 or non-0 numbers will result in an extremely small
value of the overall SDC probability. This is not the case as
the average SDC probability is 10.74% across benchmarks.
Therefore, the pruning does not result in signiﬁcant accuracy
loss in VTRIDENT.
VI. EVALUATION OF VTRIDENT
In this section, we evaluate the accuracy and perfor-
mance of VTRIDENT in predicting INSTRUCTION-SDC-
VOLATILITY across multiple inputs. We use the same bench-
marks and experimental procedure as before in Section IV. The
code of VTRIDENT can be found in our GitHub repository.2
A. Accuracy
To evaluate the ability of VTRIDENT in identifying
INSTRUCTION-SDC-VOLATILITY, we ﬁrst classify all
the
instructions based on their INSTRUCTION-SDC-VOLATILITY
derived by FI and show their distributions – this serves as
the ground truth. We classify the differences of the SDC
probabilities of each measured instruction between inputs into
three categories based on their ranges of variance (20%), and calculate their distribution based
on their dynamic footprints. The results are shown in Fig-
ure 6. As can be seen in the ﬁgure, on average, only 3.53%
of instructions across benchmarks exhibit variance of more
than 20% in the SDC probabilities. Another 3.51% exhibit a
variance between 10% and 20%. The remaining 92.93% of the
instructions exhibit within 10% variance across inputs.
We then use VTRIDENT to predict the INSTRUCTION-
SDC-VOLATILITY for each instruction, and then compare
the predictions with ground truth. These results are also
shown in Figure 6. As can be seen, for instructions that
have INSTRUCTION-SDC-VOLATILITY less than 10%, VTRI-
DENT gives relatively accurate predictions across bench-
marks. On average, 97.11% of the instructions are predicted to
fall into this category by VTRIDENT, whereas FI measures
it as 92.93%. Since these constitute the vast majority of
instructions, VTRIDENT has high accuracy overall.
On the other hand, instructions that have INSTRUCTION-
SDC-VOLATILITY of more than 20% are signiﬁcantly un-
derestimated by VTRIDENT, as VTRIDENT predicts the
proportion of such instructions as 1.84% whereas FI measures
it as 3.53% (which is almost 2x more). With that said,
for individual benchmarks, VTRIDENT is able to distin-
guish the sensitivities of INSTRUCTION-SDC-VOLATILITY
in most of them. For example, in Pathﬁnder which has the
largest proportion of instructions that have INSTRUCTION-
SDC-VOLATILITY greater than 20%, VTRIDENT is able
to accurately identify that
this benchmark has the highest
proportion of such instructions relative to the other programs.
However, we ﬁnd VTRIDENT is not able to well identify the
variations that are greater than 20% as mentioned above. This
case can be found in Nw, Lulesh, Clomp and FFT. We discuss
the sources of inaccuracy in Section VIII-A. Since these
instructions are relatively few in terms of dynamic instructions
in the programs, this underprediction does not signiﬁcantly
affect the accuracy of VTRIDENT.
We then measure the overall accuracy of VTRIDENT in
identifying INSTRUCTION-SDC-VOLATILITY. The accuracy
is deﬁned as the number of correctly predicted variation
categories of instructions over the total number of instructions
being predicted. We show the accuracy of VTRIDENT in
Figure 7. As can be seen, the highest accuracy is achieved in
Streamcluster (99.17%), while the lowest accuracy is achieved
in Clomp (67.55%). The average accuracy across nine bench-
marks is 87.81%,
indicating that VTRIDENT is able to
identify most of the INSTRUCTION-SDC-VOLATILITY.
both