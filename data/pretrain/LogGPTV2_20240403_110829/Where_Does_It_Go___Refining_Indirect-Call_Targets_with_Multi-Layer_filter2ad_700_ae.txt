9.12
3.53
1.86
1-Layer
134
25.5
115
3-Layer
8.03
3.50
1.84
4-Layer
7.91
3.49
1.82
compared to pointer analysis–based approaches, we believe that
MLTA is able to find more accurate icall targets more efficiently.
7.3 False-Negative Analysis
To understand the false negatives of MLTA and to compare with
the FLTA, we empirically collect the icall traces of the Linux kernel
and the Firefox browser as the partial ground-truth.
7.3.1 Collecting Traces We first present how we use Intel PT (Pro-
cessor Tracing) and QEMU to accurately collect icall traces.
PT-based tracing. Intel PT is a hardware feature that records the
control-flow of the execution with nearly no overhead. We use
the most-recent feature of Intel PT ptwrite, to realize our trace
collection1. A ptwrite instruction can dump any value from its
operand into the trace, and Intel PT can generate another packet to
log the address of the instruction. We instrument the program to
insert a ptwrite before each icall, using the function pointer as the
operand. At runtime, ptwrite will dump the target into PT trace and
log the address of the ptwrite instruction, which is immediately
followed by the real icall. We implement the instrumentation as
an LLVM pass with 74 lines of C++ code, which can support any
programs compatible with the LLVM-compiler.
QEMU-based tracing. Unfortunately, the Linux kernel does not
fully support LLVM compilation, and collecting the PT trace for
the kernel requires modification of both userspace code and the
kernel [41]. Therefore, we instead modified QEMU to log the source
and target of each icall. We find that Linux kernel implements most
icall with thunks, where each thunk is a function containing only
one indirect jump instruction that uses one specific register as
the target, like __x86_indirect_thunk_rax. An icall instruction is
realized with a direct call to one thunk. This simplifies our logging
in QEMU, where we check whether the current code is within these
thunks. If so, we log the target address in the specific register and
the return address on the stack which immediately follows the
original icall instruction. We implemented the QEMU-based tracing
by adding 66 lines of code to the cpu-exec.c file of QEMU-2.9.0.
7.3.2 Results for False-Negative Analysis. We use the tracing tools
to collect icall traces for evaluating false negatives. Since the traces
include the source code information, the source file, and line num-
ber, we use such information for matching the callees. Specifically,
given a trace, we use the caller to query the global call-graph con-
structed by TypeDive and obtain the icall targets. If the callee in
the trace is contained in the icall targets, we say that TypeDive
correctly identified the callee; otherwise, it is a false negative.
1Without ptwrite, we can perform the same evaluation with Intel PT. However, in
that case, we have to sequentially decode all PT packages, which is time-consuming
and suffers the data-loss problem [22].
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1877Checking for Firefox. By manually searching google.com and
youtube.com in the Firefox browser, our tracing tool in total col-
lected 50k traces (i.e., indirect caller and caller pairs). However,
the majority of them are repeating, or the corresponding bitcode
files are not available with our experimental setup. After remov-
ing these cases, we finally obtained 1,595 unique icall traces. The
evaluation results show that TypeDive missed only one callee. Af-
ter investigating the cause, we found that a function pointer is
loaded from a type other than the one confining the callee. There-
fore, there is a cast between these two types. However, we could
not find the casting in the analysis code. That is, the bitcode file
that contains the type casting is not in our analysis scope. Thus,
TypeDive missed the callee. We believe, once the bitcode file is
included in the analysis, TypeDive will successfully catch it. As we
will discuss in §8, TypeDive requires all source code to be available
to comprehensively identify all type propagations.
Checking for Linux. To collect the traces for Linux, we run the
kernel on QEMU and employ kAFL [41] to explore paths. Similarly,
after removing cases that are repeating or do not have source code
in our analysis scope, we in total collected 3,566 unique traces.
Using the same way, we compared the traces with the icall tar-
gets reported by TypeDive. We found that TypeDive originally
missed five callees in the recorded traces. We then investigated
these cases. We found that these callees are missed by the first layer
type analysis—function type matching. Specifically, the general
types of parameters, such as long int and void *, are used in an
interleaving way. Out of the missed cases, one is caused by the
implicit casting between long int and char *, and four are caused
by the implicit casting between int and unsigned int. Since the
current implementation of TypeDive does not support the casting
between primitive types, these cases are missed. This is a tradi-
tional problem in CFI works [27, 35, 46]. Current works solve the
problem by equalizing certain primitive types, such as integers and
pointers. TypeDive can also solve this problem using the same ap-
proach. However, given the small number of type violations, we will
leave the integration of the approach for future work. The results
show that although existing function-type matching may have false
negatives, TypeDive does not introduce extra false negatives to it.
The empirical evaluation evidences that TypeDive does not in-
troduce more false negatives to existing FLTA. However, due to the
limited code coverage of dynamic executions, such evaluation can
never be used as a complete proof. Applying TypeDive to more
programs with diverse inputs (e.g., through fuzzing [18, 37, 41, 51]
or symbolic execution [7, 11, 43]) would improve the reliability of
the evaluation.
7.4 TypeDive for Semantic-Bug Detection
While the goal of TypeDive is to refine icall targets, we believe that
TypeDive is also useful for finding semantic bugs that otherwise
cannot be detected through shallow specifications such as no out-
of-bound access. Our insight is that the targets of icalls are often
peer functions that implement pre-defined interfaces, thus sharing
similar semantics. By cross-checking peer functions, we can detect
deviations or contradictions as potential bugs, which avoids the
challenging problem of understanding semantics.
Detection approach. We also employ TypeDive to detect two
classes of semantics errors, missing initialization and missing secu-
rity check. Since TypeDive identifies icall targets that are typically
semantically equivalent, we cross-check how parameters and func-
tions are used in these peer targets. For example, if a parameter from
an icall is commonly initialized in all peers except one function, we
report a potential missing-initialization bug in this function. Also, if
a function call or a parameter is commonly checked but not in one
peer function, we also report it as a potential missing-check bug.
We have realized the detection based on LLVM. In the detection,
we implemented an intra-procedural data-flow analysis to reason
about whether parameters are checked and initialized, and whether
return values of function calls are checked. We then statistically
rank the potential bug cases based on the ratio of the peers which
do not have the issues.
Detection results. We have applied our detection to the Linux
kernel. Since TypeDive reported thousands of ranked potential
bugs, we chose the top 50 cases for each class of bugs and manu-
ally confirmed them. In total, we have confirmed 10 new missing-
initialization bugs and 25 missing-check bugs. The details are shown
in Table 5 and Table 6. Each shaded line contains one icall, including
its location and the number of inferred targets by FLTA and MLTA.
As we can see, MLTA significantly reduces the number of targets,
which makes our bug detection efficient and reduces the manual
effort for confirming the bugs. The lines following each shaded
line show the bugs, including their subsystem, source file, function
name, and the affected variable. We also provide the impact of each
bug. For example, in Table 5 we show the number of bytes unini-
tialized (UI) or leaked (LK). The results confirm that TypeDive can
assist semantic-bug detection, as it accurately identifies icall targets
to allow effective cross-checking.
Existing detection methods on missing initialization [31] and
missing security checks [32] either do not handle indirect calls,
where they will miss all bugs we find here, or they use limited
type information to infer icall targets, where we can expect a much
higher false-positive rate. For example, to confirm the bugs shown
in Table 5, we have to manually check 518 targets when using
FLTA. However, the number is significantly reduced to 35 (6.8%)
when using MLTA, confirming the usefulness of TypeDive in bug
detection based on static analysis.
Case study: Bug hidden behind two indirect-calls. We use the
first missing-initialization bug to further demonstrate the benefit of
using MLTA for bug detection. This bug is an information leakage
bug in the Linux kernel. We manually checked it and confirmed
that it can leak a 4-byte memory region. To find this bug, one static
bug detector will reach an icall in line 511 of file oaktrail_crtc.c.
FLTA will identify 13 targets, and the bug-detector has to check
them one by one, which may analyze 13 functions to get a chance
to find this bug in the worst case. More importantly, if the detec-
tion employs cross-checking, including the 10 unrelated functions
will likely bury the true bug. In comparison, MLTA only reports 3
targets, saving 77% of the analysis effort. More than that, the buggy
function cdv_intel_find_dp_pl contains another icall, which the
bug-detector has to analyze to confirm the bug. For this new icall,
FLTA reports 54 targets while MLTA only permits only 3. By check-
ing the latter set of targets, we quickly confirm this information
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1878[Subsys] File
Function
Variable
Impact
clock
clock
clock
cdv_intel_find_dp_pll
mrst_sdvo_find_best_pll
mrst_lvds_find_best_pll
drivers/gpu/drm/gma500/oaktrail_crtc.c:511 [13->3]
[drm] cdv_intel_display.c
[drm] oaktrail_crtc.c
[drm] oaktrail_crtc.c
drivers/media/v4l2-core/v4l2-ioctl.c:1509 [438->5]
rcar_drif_g_fmt_sdr_cap
[media] rcar_drif.c
drivers/staging/rtl8188eu/core/rtw_security.c:229 [18->6]
wep
[crypto] lib80211_crypt_wep.c lib80211_wep_set_key
[staging] rtllib_crypt_wep.c
prism2_wep_set_key
wep
drivers/staging/media/davinci_vpfe/dm365_ipipe.c:1277 [36->18]
[staging] dm365_ipipe.c
[staging] dm365_ipipe.c
f
[staging] dm365_ipipe.c
ipipe_set_wb_params
ipipe_set_rgb2rgb_params
wbal
rgb2rgb_
defaults
ipipe_set_rgb2yuv_params rgb2yuv_
defaults
4B UI
16B LK
16B LK
24B UI
25B UI
25B UI
8B UI
12B UI
4B UI
crypto/af_alg.c:302 [13->3]
[crypto] algif_hash.c
hash_accept_parent_nokey ctx
680B UI
Table 5: New missing-initialization bugs found with TypeDive. Each
shaded line shows the location of the icall, followed by the number of targets
inferred by FLTA and MLTA. "UI" denotes that memory is not initialized
properly, and "LK" denotes that the uninitialization causes information
leakage, with "xB" indicates the size of the uninitialized memory.
leakage bug. Therefore, to find this bug, FLTA provides 702 possible
paths while MLTA reduces the number to merely 9. The problem
will be exaggerated when the paths include branches, leading to
path explosion.
8 Discussion
Indirect jumps. Our current prototype of TypeDive does not
identify indirect-jump targets. We observe that indirect jumps are
mainly used for switch statements, where the compiler usually
identifies all cases of the switch and puts them inside a read-only
jump table. Therefore, the targets have been resolved by existing
compilers, and we do not have to use MLTA to find them. Previous
work also skips indirect jumps with the similar reason [15, 22].
However, if an indirect jump is used intentionally, we can definitely
use the same algorithm (Algorithm 1) to find the function targets.
Complementing to data-flow analysis. Although MLTA is more
scalable than data-flow analysis, they are complementary to each
other rather than exclusive. In fact, MLTA can benefit from small-
scale data-flow analysis (e.g., without aliases involved). For example,
we can rely on taint analysis to find the multi-layer type for each
variable within the same function. On the other hand, a data-flow
analysis may use our MLTA to infer icall targets so that it can con-
tinue the analysis across function boundaries. A data-flow analysis
equipped with MLTA will also be more scalable.
Indirect-call in assembly or binary. MLTA assumes that each
function pointer has a well-defined type, which is violated in assem-
bly and binary code. Fortunately, previous works show that icalls
and jumps written in assembly code can be easily resolved with
manual effort, in both user-space and system programs [15, 35]. A
solution could be lifting assembly code into LLVM IR, and propagat-
ing the types of input operands and output operands. This solution
may also work for icalls in binary. Further, we can infer the type
information for each variable through reverse engineering tech-
niques [28, 30], and use the inferred type for MLTA. Supporting
MLTA in assembly or binary is out of the scope of this work.
Variable-argument functions. Variable-argument function re-
duces the accurate of type-based function matching. Our current
prototype of MLTA uses the hash of the function type string as
the function type, and therefore, it conservatively concludes a type
matching as long as the fixed part of the arguments matches. How-
ever, this is not a new problem introduced in MLTA, which stems
from function-type matching used in FLTA. Therefore, we leave
the study of the problem as future work.
Data-only attacks. TypeDive provides an accurate control-flow
graph (CFG) for CFI solutions to achieve stronger protections on
control-flow transfers. However, data-only attacks will survive all
CFI solutions, even the ones enhanced with TypeDive, as these
attacks do not change any control-flow [10]. Recent works have
shown that data-only attacks are expressive [21], and can be con-
structed automatically [20, 23, 38]. In fact, both attackers and de-
fenders of data-only attacks can get benefit from the accurate CFG
generated by TypeDive: while attackers can find reachable data-
oriented gadgets with less false positives [21], which will simplify
the attack construction process, defenders can calculate more ac-
curate data flows, which helps realize more efficient and stronger
data-flow integrity [9].
9 Related Work
Struct location vector. Li et al. propose FINE-CFI [29] which uses
structure location vector (SLV) to confine icalls. The idea of SLV is
to identify the location of function pointer in a struct, and to use
location information to match icall targets. Compared with MLTA,
SLV has two important limitations. First, when constructing the
vector, SLV only considers struct members that are also structs (i.e.,
nested structs), which does not include pointers of structs. This will
cause false negatives because struct objects in OS kernels typically
include an object as a field through pointers to avoid copying of the
object memory. Second, SLV does not handle type casting generally.
Instead, they treat these problems as corner-cases and try to find
the real-type before casting. However, as we show in the paper,
casting is a fundamental and common problem that will lead to
false negatives if not properly handled.
Taint analysis. Ge et al. propose to use taint analysis to find icall
targets for operating systems [15]. Their observation is that there
are no complicated operations on function pointers inside the ker-
nel and thus data-flow analysis will not face too many challenges.
One of the taint propagation rules is that once a function pointer is
assigned to a structure field, they taint the field for all memory ob-
jects of that structure’s type. This policy is similar to our MLTA but
is only applied to the first two layers: the function pointer and the
structure field. MLTA can capture such relationships between any
two layers. Moreover, [15] requires manual fixing when violations
are detected, like data pointers pointing to function pointers. MLTA
is elastic to automatically fall back to the inner layer to avoid false
negatives.
CFG construction. Researchers have spent a large amount of
effort in resolving icall targets for enforcing control-flow integrity
(CFI) [1]. If program source code is not available, icall targets are
conservatively set to all functions [53, 55]. That is, each icall is