title:Robust signatures for kernel data structures
author:Brendan Dolan-Gavitt and
Abhinav Srivastava and
Patrick Traynor and
Jonathon T. Giffin
Robust Signatures for Kernel Data Structures
Brendan Dolan-Gavitt Abhinav Srivastava Patrick Traynor
Jonathon Gifﬁn
School of Computer Science
Georgia Institute of Technology
{brendan,abhinav,traynor,gifﬁn}@cc.gatech.edu
ABSTRACT
Kernel-mode rootkits hide objects such as processes and threads
using a technique known as Direct Kernel Object Manipulation
(DKOM). Many forensic analysis tools attempt to detect these hid-
den objects by scanning kernel memory with handmade signatures;
however, such signatures are brittle and rely on non-essential fea-
tures of these data structures, making them easy to evade. In this
paper, we present an automated mechanism for generating signa-
tures for kernel data structures and show that these signatures are
robust: attempts to evade the signature by modifying the structure
contents will cause the OS to consider the object invalid. Using
dynamic analysis, we proﬁle the target data structure to determine
commonly used ﬁelds, and we then fuzz those ﬁelds to determine
which are essential to the correct operation of the OS. These ﬁelds
form the basis of a signature for the data structure. In our exper-
iments, our new signature matched the accuracy of existing scan-
ners for traditional malware and found processes hidden with our
prototype rootkit that all current signatures missed. Our techniques
signiﬁcantly increase the difﬁculty of hiding objects from signature
scanning.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection
General Terms
Design, Security
Keywords
Data structures, memory analysis, security
1.
INTRODUCTION
Many successful malware variants now employ kernel-mode root-
kits to hide their presence on an infected system. A number of large
botnets such as Storm, Srizbi, and Rustock have used rootkit tech-
niques to avoid detection. This has led to an arms race between
malware authors and security researchers, as each side attempts to
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
ﬁnd new methods of hiding and new detection techniques, respec-
tively. For example, the FU Rootkit [7] introduced a means of pro-
cess hiding known as Direct Kernel Object Manipulation (DKOM),
which unlinks the malicious process from the list of active pro-
cesses maintained by the system. In response, some forensic mem-
ory analysis tools [5, 36, 46] have started scanning kernel memory
using signatures for process data structures, and comparing the re-
sults with the standard process list. Because signature-based scan-
ning only requires access to physical memory, scanners are most
useful in an ofﬂine forensic context, but can be used for live analy-
sis as well.
However, a signature-based search can only be effective if it is
difﬁcult for an attacker to evade. As Walters and Petroni [47] note,
many current signatures for process data structures in particular can
easily be fooled by modifying a single bit in the process header.
Although this ﬁeld is normally constant, its value is irrelevant to
the correct operation of the process, and so an attacker with the
ability to write to kernel memory can easily modify it and evade
detection. This leads naturally to the question of which ﬁelds in a
given data structure are, in fact, essential to its function and would
therefore be good features on which to base a signature.
In this paper, we describe a principled, automated technique for
generating robust signatures for kernel data structures such as pro-
cesses. We employ a feature selection process that ensures that the
features chosen are those that cannot be controlled by an attacker—
attempting to evade the signature by modifying the features will
cause the operating system to crash or the functionality associated
with the object to fail. We use our methods to derive a signature for
EPROCESS, the data structure used to represent a running process
in Windows. By construction, an attacker attempting to evade the
signature by altering the ﬁelds of the process structure will harm the
functionality of the OS or process. In addition, we will show con-
clusively that current, manually generated signatures are trivially
evadable by attackers that can write to kernel memory.
Our feature selection mechanism uses two methods to determine
which portions of the data structure are critical to its function. First,
we monitor operating system execution and note which ﬁelds it
reads and writes in the target structure. The intuition is that ﬁelds
that are never accessed cannot cause a crash if modiﬁed by an at-
tacker and hence are poor features for robust signatures. Next, we
attempt to determine which ﬁelds can be modiﬁed by an attacker
without preventing the data structure from working correctly. This
stage of feature selection simulates the behavior of an attacker at-
tempting to evade a signature: if an attacker can arbitrarily modify a
ﬁeld, then any constraint we devise for that ﬁeld could be bypassed.
After robust features have been selected, we collect samples of
those features in the data structure from a large number of instances
in memory images. We then use a dynamic invariant detection tech-
566nique [12] to ﬁnd constraints on their values that can be used in a
signature. Our signature generator uses these constraints to create a
plugin for the Volatility memory analysis framework [46] that can
ﬁnd these data structures in memory.
We demonstrate the advantage of our automatically generated
signatures over existing solutions by creating a prototype rootkit
(based on FU [7]). This custom malware hides processes using
a combination of DKOM and signature evasion techniques. By
altering unused ﬁelds in the process structure that current signatures
depend on, the rootkit successfully evades existing signature-based
process scanners. We show that our scanner is capable of detecting
processes hidden using this method in Windows memory images.
We chose to apply our technique to the problem of ﬁnding pro-
cesses in Windows memory images for several reasons. Reliable
identiﬁcation of running programs is a basic security task that is a
prerequisite for many other types of analysis. In addition, process
hiding is common feature of kernel malware; a single rootkit may
be used to hide the presence of wide variety of user-level malware.
However, our techniques are general, and we will discuss the pos-
sible application of our techniques to other kernel data structures in
Section 7.
We make the following contributions: ﬁrst, we provide strong
empirical evidence that existing signatures are trivially evadable.
Second, we develop a systematic method for securely selecting fea-
tures from a data structure that can be used to create highly robust
signatures. Finally, we present a method for generating a signature
based on robust features, and use it to create a speciﬁc signature
for process objects on Windows that is as accurate as existing sig-
natures for current malicious and non-malicious processes, but is
resistant to evasion.
These results are of immediate importance to a number of secu-
rity tools which rely on being able to locate data structures in ker-
nel memory. The virtual machine-based “out-of-the-box” malware
detection system proposed by Jiang et al. [17], for example, uses
several invariant bytes found in the header of a process structure to
ﬁnd processes under Windows. Cross-view detection approaches
to detect hidden processes used by memory analysis tools such as
Volatility [46], memparser [5], and PTFinder [36] also make use of
signatures to locate key kernel structures. Finally, virtual machine
introspection libraries such as XenAccess [30] often use signature
scans of guest memory to identify processes and provide user-space
address translation. The ability to locate data structures such as pro-
cesses, independent of any operating system-level view, is critical
to the correct operation of these tools, and all of them would beneﬁt
from the use of more robust signatures.
2. RELATED WORK
Signature-based methods have repeatedly been proposed to iden-
tify particular classes of security threats, and, in general, these
methods have been found vulnerable to evasion in the face of ad-
versaries. In the area of virus detection, for example, the earliest
detectors (and, indeed, many modern commercial utilities) matched
byte strings found in viral code that were unlikely to occur in in-
nocuous programs. As the volume of viral code in the wild in-
creased, automated methods were developed to generate signatures
based on known viral samples [20]. These methods were thwarted
by the appearance of polymorphic and metamorphic [42] viruses;
with these techniques, virus creators could transform the malicious
code into a form that was functionally equivalent but had no mean-
ingful strings in common with the original code. As a complex-
ity theory problem, reliable detection of bounded length metamor-
phic viruses has been shown to be NP-complete [41]. Empirical
results have conﬁrmed the difﬁculty of the problem: by mutating
Visual Basic viruses found in the wild using techniques similar to
fuzzing [15,24,25] and random testing, Christodorescu and Jha [9]
found that most malware detectors are vulnerable to even simple
obfuscation techniques.
The response to network-based worms followed a similar path.
Initial attempts to detect network worms used simple, handmade
signatures for intrusion detection systems such as Snort [33] that
searched for static byte patterns in the network payload of the worm.
However, such manual processes did not scale to the large number
of worm variants that soon appeared, and numerous systems for
automatic signature generation were proposed [21, 22, 38]. These
too, however, were soon defeated by polymorphic shellcode that al-
tered the syntactic structure of the worm payload without affecting
its functionality [11]. Although later signature generation systems
[23,28] were able to create signatures based on invariant features in
certain classes of polymorphic shellcode, Gundy et al. [16] found
that there were some vulnerabilities that could not be captured by
such systems.
Indeed, further work by Song et al. [40] demon-
strated that the general problem of modeling polymorphic shell-
code was likely to be infeasible, and Fogla and Lee [14] found that
detecting polymorphic blending attacks is an NP-complete prob-
lem.
Although these results do not make the search for reliable kernel
data structure signatures look promising, there are key differences
that allow signature-based methods to be effective in this case. In
the case of viruses and shellcode, the syntax of the malicious input
is under the control of the attacker; only its semantics must remain
the same in order to produce an effective attack. By contrast, the
syntax of kernel data structures is controlled by the code of the
operating system; an attacker can only modify the data contained in
the structure to the extent that the operating system will continue to
treat it as a valid instance of the given type. By identifying portions
of these data structures that cannot be modiﬁed by the attacker, we
are able to generate signatures that resist evasion.
Our signature generation system uses dynamic analysis to pro-
ﬁle ﬁeld usage in kernel data structures. A similar technique is em-
ployed by Chilimbi et al. [8] for a different goal; their tool, bbcache,
analyzes ﬁeld access patterns in user-space data structures in order
to optimize cache performance. After the proﬁling step, we use a
technique similar to fuzzing [24] to identify unused ﬁelds in kernel
data structures. Fuzzing was also applied by Solar Eclipse [39] to
determine which ﬁelds in the Portable Executable (PE) ﬁle format
were required by the Windows loader, in order to develop ways of
decreasing the size of Windows executables. Finally, our system
ﬁnds invariants on the ﬁelds in the data structure and produces a
Python script that can be used to ﬁnd instances of the structure in
memory images.
Another system that makes use of data structure invariants is
Gibraltar by Baliga et al. [2]. Their system creates a graph of
all kernel objects in memory and records the values of those ob-
jects’ members as the system runs. The dynamic invariant detec-
tor Daikon [12] is then used to derive constraints on the objects’
data. Deviations from the inferred invariants are considered to be
attacks against kernel data. The goals and assumptions of our own
system, however, are substantially different: whereas Gibraltar as-
sumes that the locations of all kernel data structures can be found
a priori and then attempts to enforce constraints on those objects,
our system seeks to ﬁnd features of speciﬁc data structures in or-
der to locate them in memory. The two approaches can be seen as
complementary; once security-critical objects such as processes are
located using our signatures, techniques similar to Gibraltar may be
employed to detect and enforce invariants on the data.
A number of approaches to detect hidden processes have been
567Figure 1: A naïve signature for the EPROCESS data structure.
The constraints shown are a subset of those used in PTFinder’s
process signature. Because the Size ﬁeld is not used by the
operating system, an attacker can change its value, hiding the
process from a scanner using this signature.
Figure 2: A portion of the process list while a process hiding
attack is underway. The hidden process has been removed from
the doubly linked list, and its Size ﬁeld has been changed to
evade the signature above.
featured in other work. Antfarm [18] and Lycosid [19] track the
value of the CR3 register as a virtual machine executes to identify
unique virtual address spaces, which correspond to distinct pro-
cesses. Although this approach is quite useful in a live environ-
ment, it cannot be used for ofﬂine forensic analysis. Some ofﬂine
methods have been proposed as well: Klister [34], for example,
attempted to ﬁnd hidden processes by relying on the scheduler’s
thread list rather than the systemwide process list, which thwarts
some kinds of DKOM attacks. An evasion for this kind of detec-
tion has been demonstrated [1], however: an attacker can replace
the OS scheduler with a modiﬁed copy, bypassing any tool which
relies on the original list. Signature scanning is less vulnerable to
such attacks, as any changes an attacker makes to the layout of a
data structure must be reﬂected in any OS code that uses the struc-
ture.
Finally, other recent work has focused on ﬁnding data structures
in memory. Laika [10] infers the layout of data structures and at-
tempts to ﬁnd instances in memory using unsupervised Bayesian
learning. Because their system assumes that the data structures are
not known in advance, it may be useful in cases where data struc-
ture deﬁnitions are not available. This ﬂexibility comes the cost