(cid:46) Projected permissions of S(cid:48)
(cid:46) Projected permissions of s
Figure 8: An algorithm for detecting DoS conﬂicts.
level, the algorithm takes as input the security policies of
existing security namespaces and the new one, and try to
identify if the newly loaded security policy would intro-
duce additional access permissions for the subjects. Such
additional permissions are the root cause of an operation
being allowed by the new security namespace, but denied
by others. Speciﬁcally, the algorithm ﬁrst computes the
set of security namespaces whose security policies need
to be considered. This is based on the routing algorithm
discussed in previous section. Next, by analyzing the
policies, the algorithm computes two projected permis-
sion sets of each and every subject associated with the
new security namespace4, one based on security policies
of existing security namespaces and another based on the
newly loaded policy. The permission set of the new secu-
rity policy should always be a subset of the existing se-
curity policies, to ensure that no additional permissions
are introduced.
When conﬂicts are detected, the owner of a security
namespace are given two choices. She may revise her
security policy to avoid the conﬂicts, or loading the se-
curity policy anyway with the risk of her operations be-
ing denied unexpectedly. However, we should note that
even in the second case, she only risks DoS but no com-
promise of security as any operation denied by her own
policy will not be executed by the system.
6.2 Expectation Conﬂicts
When a security namespace loads its security policy,
if the policy could deny operations from other security
namespaces, we call it expectation conﬂicts. Expecta-
tion conﬂicts may lead to unexpected operation denials
to existing security namespaces, so the system will refuse
to load a security policy that may cause expectation con-
ﬂicts. As its name suggests, the expectation conﬂicts rep-
resent that the existing system cannot possibly meet the
security expectation of a new security namespace, there-
fore the owner of the new namespace should either revise
her policy, or abort using the system.
4This is a projection, as at the policy load time, there is often no sub-
ject or only a single subject of that security namespace actually created
on the system, depending on who loads the security policy.
In practice, there are two types of expectation con-
ﬂicts, both of which can be easily detected by the Policy
Engine using the object authority table. The ﬁrst type of
expectation conﬂicts is shown in Figure 7(c), where in its
security policy a security namespace declares authority
over an object but it does not have the capability to de-
clare the authority. In this case, the Policy Engine would
refuse to load the policy and render a lack of authority
error. This delivers an explicit message to the owner
of the security namespace that the system cannot meet
her security expectation, and she shall not run with the
false impression of security (e.g., a security namespace
believes a ﬁle is read-only ﬁle, but it is actually writable
to other security namespaces). The second type of expec-
tation conﬂicts is shown in Figure 7(d), where a security
namespace has the capability and declares authority over
an object. However, its policy over the object conﬂicts
with policies of existing security namespaces on the sys-
tem (i.e., it would deny an operation which was already
allowed by others). In this case, the Policy Engine would
refuse to load the policy as well, since loading the policy
may cause unexpected operation denials of other secu-
rity namespaces. Here the authority represents a right to
claim mandatory security over an object, but not a right
to override security decisions of others.
7
To demonstrate our design, we implemented security
namespace abstractions for two widely used kernel se-
curity frameworks, IMA and AppArmor. The modiﬁca-
tion to kernel is ∼1.1K and ∼1.5K LOC, respectively.
The IMA namespace implementation is already open
sourced5 and under review by the kernel community.
7.1
IMA namespace
Implementation
Operation Router. IMA protects the integrity of a sys-
tem by measuring and appraising what subjects on a sys-
tem may read or execute. It has a narrow focus on the
subject’s perspective of access control. This simpliﬁes
the implementation of the Operation Router. When a
subject reads or executes a ﬁle, the Operation Router
simply routes the operation to the IMA namespace asso-
ciated with the subject, and all its ancestor IMA names-
paces up to the native.
Measuring Files. Conceptually, each IMA namespace
would measure a ﬁle independently. However, this can
be both expensive (i.e., calculating hash of a ﬁle mul-
tiple times) and unnecessary.
Instead, we re-used the
measurement cache in our implementation and make it
a global data structure shared by all the IMA names-
paces. After the ﬁrst IMA namespace calculates a mea-
5https://git.kernel.org/pub/scm/linux/kernel/git/zohar/linux-
integrity.git/log/?h=next-namespacing-experimental
1432    27th USENIX Security Symposium
USENIX Association
surement of the ﬁle, the measurement is put on a global
measurement cache. Subsequent IMA namespaces will
check with the cache to detect the presence of the mea-
surement and only calculate if it is not present. However,
each IMA namespace would still maintain its own mea-
surement list and independently decide whether or not
to include the measurement on its list. To some extent,
we did not fully virtualize IMA. Instead, we only virtu-
alized the data structures and interfaces that are exposed
to userspace to make it appear that they have their own
isolated instance of IMA.
File Appraisal and Policy Engine.
IMA appraisal
prevents unauthorized ﬁle from being read or executed
by validating ﬁle signatures against pre-installed certiﬁ-
cates. The certiﬁcates are traditionally speciﬁed by the
system admin and are stored on the ima keyring6. To
support appraisal, we need to ﬁrst separate ima keyring
such that each IMA namespace can install their own set
of certiﬁcates to validate ﬁles independently. But un-
fortunately, the existing kernel keyring subsystem does
not support namespace abstraction. As a workaround,
we implemented a dynamic keyring renaming mecha-
nism. The idea is to allocate a keyring with a different
name (randomly generated) in the kernel every time an
IMA namespace is created. This keyring is associated
with the namespace for its entire life cycle. The names-
pace owner can thus load and update certiﬁcates for his
namespace using this keyring. To prevent one names-
pace from updating the keyring of another namespace,
we rely on the access control mechanisms in keyring sub-
system. A cleaner way to implement this is to provide a
namespace abstraction for the kernel keyring subsystem,
which is an ongoing effort of a working group. We will
integrate it with IMA namespace once it is done. Af-
ter separating the ima keyring, each IMA namespaces
could independently load its certiﬁcates. The certiﬁcates
are essentially whitelist policies deciding which ﬁle can
be read or executed by the namespace. To detect policy
conﬂicts at load time, the Policy Engine simply checks
if is the certiﬁcates loaded by a security namespace is a
subset of existing security namespaces.
7.2 AppArmor Namespace
Operation Router. AppArmor implements the targeted
security MAC policy, which tries to conﬁne privileged
subjects on a system. Its original focus is the subject. To
extend it with an object’s perspective, we made two mod-
iﬁcations. First, each AppArmor namespace is assigned
with a base proﬁle. In the base proﬁle, a security names-
pace can declare authority over objects. Other proﬁles
in the namespace will inherit the base proﬁle. Second,
we implemented a handler function in the kernel to de-
6Keyring is a kernel subsystem for retaining and caching keys.
tect any changes to the base proﬁle so that the Operation
Router can be notiﬁed to parse the base proﬁle and up-
date its object authority table accordingly.
Pathname Collision.
In AppArmor, subjects and
objects are identiﬁed using their pathnames.
This
becomes problematic when an AppArmor names-
pace needs to differentiate subjects or objects in
different namespaces. One way to address this is to
use absolute pathnames (e.g., /sbin/dhclient and
/var/lib/docker/instance-001/sbin/dhclient).
The downside of this approach is, however, there may
not always exist a valid absolute pathname. In our imple-
mentation, we leveraged the built-in proﬁle namespace
primitive of AppArmor policy. A proﬁle namespace
provides scoping for the pathnames. By creating a
proﬁle namespace per AppArmor namespace and as-
signing it an identiﬁer, we therefore enable AppArmor
namespaces to specify a policy using the combination of
proﬁle namespace identiﬁer and the relative pathnames
in the proﬁle.
Policy Engine. We construct our Policy Engine based on
the extended Hybrid Finite Automata (eHFA) [16] of Ap-
pArmor. The Policy Engine ﬁrst identiﬁes the set of pol-
icy proﬁles (including the base proﬁles) that may be asso-
ciated with the same subject. Then taking these proﬁles
as input, the Policy Engine tries to construct eHFA. Dur-
ing this process, the Policy Engine will sort and merges
rules from proﬁles, and detect conﬂicts if there are any.
7.3 Filesystem Interfaces
Both IMA and AppArmor accepts policies and exports
security states through securityfs interface. Ideally,
each security namespace should be able to mount its own
securityfs. However, currently this is not allowed
by the kernel. As a temporary ﬁx, we used the proc
ﬁlesystem instead. The idea is to place the security states
and policy ﬁles that correspond to a security namespace
under the directories of the processes that run within that
namespace. We are working with the kernel community
to ﬁx the permission issue for mounting securityfs
(e.g., using jump link).
7.4 Using Security Namespace
In order for userspace program to create an IMA or
AppArmor namespace, we extended the clone and un-
share system call. Taking clone system call for ex-
ample, we added a new constant CLONE NEWIMA and
CLONE NEWAPPARMOR that userspace program can
specify along with other namespace constants7. The re-
sult is that kernel will clone the process and run it within
7There are some debates in kernel community whether or not con-
stants for security namespaces should be on their own. This may affect
the interface in future.
USENIX Association
27th USENIX Security Symposium    1433
the new IMA or AppArmor namespace. The changes to
userspace program are minimal. In fact, to make IMA
and AppArmor available to Docker, we extended the lib-
container [29] by introducing less than 20 LOC.
8 Evaluation
In this section, we evaluate IMA and AppArmor names-
paces from their security effectiveness and performance.
8.1 Security Effectiveness
8.1.1 IMA Namespace
We evaluate the security effectiveness of IMA names-
pace from two perspectives: autonomous security con-
trol and security. To evaluate autonomous security con-
trol, we emulate a security setting identical to most com-
mercial container clouds where container host applies a
very lenient integrity policy (i.e., allow any immutable
ﬁles to be run within the containers). Containers, on
the other hand, apply a strict integrity policy using IMA
namespace (i.e., only code signed by container owner
may run in container). We created three types of mali-
cious code that an attacker may run within a container,
i.e., code that was not signed, code signed with unknown
key, and modiﬁed code with an invalid signature. The
IMA namespace of container successfully prevents all of
them from running. In addition, the individual measure-
ment list of IMA namespace enables the container to at-
test its integrity to a remote party independently. This
experiment demonstrates that IMA namespace enables
containers to have their autonomous integrity control, in-
dependent from the integrity policy that host system ap-
plies.
The second experiment evaluates security, by demon-
strating that containers cannot leverage IMA namespace
to violate the integrity policy of the host. In this experi-
ment, we emulate a scenario where the host system wants
to apply certain integrity control over its containers (e.g.,
prevent container from hosting malware by allowing only
code signed by Ubuntu to run). Containers, on the other
hand, try to break it by allowing anything to run in its
IMA namespace.
In this case, the Policy Engine suc-
cessfully detects the DoS conﬂict, and if the container
continues loading the policy, code in container that is not
signed by Ubuntu is prevented from being run by the na-
tive IMA namespace. This experiment shows that despite
enabling autonomous security control, IMA namespace
will not compromise the integrity of any principal.
Conﬂict Analysis.
IMA supports two sets of security
policies: one for measurement that determines which
ﬁles to measure, and one for appraisal that determines the
right measurements for each ﬁle. The measurement pol-
icy only affects which ﬁles each individual IMA names-
pace will measure, therefore there are no conﬂicts intro-
Table 2: Enforcing both system and container proﬁles
over applications.
Application Proﬁle
Conﬂicting Rules
Apache2
NTP
ﬁrefox
chrome
/proc/[pid]/attr/current rw
/dev/pps[0-9]* rw
/proc/ r
/proc/ r
MySQL, Perl, PHP5
OpenSSL, Samba, Ruby, Python
Subversion, BitTorrent, Bash
dhclient, dnsmasq, Squid
OpenLDAP(slapd), nmbd, Tor
None
duced because each IMA namespace has its independent
measurement list. In other words, integrity attestation of
individual containers are conﬂict-free. The appraisal pol-
icy may introduce conﬂicts since a measurement ”good”
for one IMA namespace may not be ”good” for another,
as evidenced by above examples.
To avoid appraisal policy conﬂicts, container owners
will have to ensure that the ﬁles they allow to load in
containers are a subset of the ﬁles allowed by the host
system. This, in our implementation, means that the cer-
tiﬁcates that a container owner may load on her ima
keyring will be a subset of the certiﬁcates that the host
system owner loads on the host system’s ima keyring.
In practice, conﬂicts are not common since container
clouds tend to have a lenient integrity policy (e.g., allow
any executable to run within container). However, in a
case where a container cloud does have certain integrity
requirements over containers, the cloud vendor will have
to explicitly inform its users of what they can or cannot
run inside their containers (i.e., by revealing the list of
host certiﬁcates), in order to assist container owners to
avoid conﬂicts.
8.1.2 AppArmor Namespace
According to the ofﬁcial Ubuntu LXC documenta-
tion [34]:
Programs in a container cannot be further
conﬁned — for instance, MySQL runs under
the container proﬁle (protecting the host) but
will not be able to enter the MySQL proﬁle (to
protect the container).