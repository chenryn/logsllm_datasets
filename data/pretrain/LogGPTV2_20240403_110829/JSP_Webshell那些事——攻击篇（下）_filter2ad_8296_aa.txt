# JSP Webshell那些事——攻击篇（下）
##### 译文声明
本文是翻译文章，文章原作者 阿里云云安全中心，文章来源：阿里云云安全中心
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
继[上一篇](https://mp.weixin.qq.com/s?__biz=MzIxMjEwNTc4NA==&mid=2652991066&idx=1&sn=603d2290830c4aeb88d011ec498b5ad0&scene=21#wechat_redirect)讨论了JSP的各种表达式和反射方法后，这篇我们继续深入我们的讨论，开始JSP
Webshell的下半篇的讨论。
## 内存马篇
内存马主要利用了Tomcat的部分组件会在内存中长期驻留的特性，只要将我们的恶意组件注入其中，就可以一直生效，直到容器重启。
本部分主要讲一讲三种Tomcat内存Webshell。
### 基础知识
#### Container – 容器组件
> 引用自：
>
> 
Tomcat 中有 4 类容器组件，从上至下依次是：
  1. Engine，实现类为 org.apache.catalina.core.StandardEngine
  2. Host，实现类为 org.apache.catalina.core.StandardHost
  3. Context，实现类为 org.apache.catalina.core.StandardContext
  4. Wrapper，实现类为 org.apache.catalina.core.StandardWrapper
“从上至下” 的意思是，它们之间是存在父子关系的。
  * Engine：最顶层容器组件，其下可以包含多个 Host。
  * Host：一个 Host 代表一个虚拟主机，其下可以包含多个 Context。
  * Context：一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper。
  * Wrapper：一个 Wrapper 代表一个 Servlet。
#### Filter Servlet Listener
  * Servlet：servlet是一种运行服务器端的java应用程序，具有独立于平台和协议的特性，并且可以动态的生成web页面，它工作在客户端请求与服务器响应的中间层。Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。
  * Filter：filter是一个可以复用的代码片段，可以用来转换HTTP请求、响应和头信息。Filter无法产生一个请求或者响应，它只能针对某一资源的请求或者响应进行修改。
  * Listener：通过listener可以监听web服务器中某一个执行动作，并根据其要求作出相应的响应。
#### 三者的生命周期
> 参考自
>
> [https://mp.weixin.qq.com/s/whOYVsI-> AkvUJTeeDWL5dA](https://mp.weixin.qq.com/s?__biz=MzI0NzEwOTM0MA==&mid=2652474966&idx=1&sn=1c75686865f7348a6b528b42789aeec8&scene=21#wechat_redirect)
Servlet ：Servlet
的生命周期开始于Web容器的启动时，它就会被载入到Web容器内存中，直到Web容器停止运行或者重新装入servlet时候结束。这里也就是说明，一旦Servlet被装入到Web容器之后，一般是会长久驻留在Web容器之中。
  * 装入：启动服务器时加载Servlet的实例
  * 初始化：web服务器启动时或web服务器接收到请求时，或者两者之间的某个时刻启动。初始化工作有init()方法负责执行完成
  * 调用：从第一次到以后的多次访问，都是只调用doGet()或doPost()方法
  * 销毁：停止服务器时调用destroy()方法，销毁实例
Filter：自定义Filter的实现，需要实现javax.servlet.Filter下的init()、doFilter()、destroy()三个方法。
  * 启动服务器时加载过滤器的实例，并调用init()方法来初始化实例；
  * 每一次请求时都只调用方法doFilter()进行处理；
  * 停止服务器时调用destroy()方法，销毁实例。
Listener：以ServletRequestListener为例，ServletRequestListener主要用于监听ServletRequest对象的创建和销毁,一个ServletRequest可以注册多个ServletRequestListener接口。
  * 每次请求创建时调用requestInitialized()。
  * 每次请求销毁时调用requestDestroyed()。
最后要注意的是，web.xml对于这三种组件的加载顺序是：listener -> filter ->
servlet，也就是说listener的优先级为三者中最高的。
#### ServletContext跟StandardContext的关系
Tomcat中的对应的ServletContext实现是ApplicationContext。在Web应用中获取的ServletContext实际上是ApplicationContextFacade对象，对ApplicationContext进行了封装，而ApplicationContext实例中又包含了StandardContext实例，以此来获取操作Tomcat容器内部的一些信息，例如Servlet的注册等。
通过下面的图可以很清晰的看到两者之间的关系
#### 如何获取StandardContext
  * 由ServletContext转StandardContext
如果可以直接获取到request对象的话可以用这种方法
  * 从线程中获取StandardContext
如果没有request对象的话可以从当前线程中获取
> 
  * 从MBean中获取
> 
### Filter型
#### 注册流程
首先我们看下正常的一个filter的注册流程是什么。先写一个filter，实现Filter接口。
    package com.yzddmr6;
    import javax.servlet.*;
    import java.io.IOException;
    public class filterDemo implements Filter {
        @Override
        public void init(FilterConfig filterConfig) throws ServletException {
            System.out.println("Filter初始化创建....");
        }
        @Override
        public void doFilter(ServletRequest request, ServletResponse response,
                             FilterChain chain) throws IOException, ServletException {
            System.out.println("进行过滤操作......");
            // 放行
            chain.doFilter(request, response);
        }
        @Override
        public void destroy() {
        }
    }
在web.xml中添加filter的配置
然后调试看一下堆栈信息，找到filterChain生效的过程
然后看看这个filterChain是怎么来的
查看org.apache.catalina.core.ApplicationFilterFactory#createFilterChain源代码
    ...
                filterChain.setServlet(servlet);
                filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());
                StandardContext context = (StandardContext)wrapper.getParent();
                FilterMap[] filterMaps = context.findFilterMaps();
                if (filterMaps != null && filterMaps.length != 0) {
                    DispatcherType dispatcher = (DispatcherType)request.getAttribute("org.apache.catalina.core.DISPATCHER_TYPE");
                    String requestPath = null;
                    Object attribute = request.getAttribute("org.apache.catalina.core.DISPATCHER_REQUEST_PATH");
                    if (attribute != null) {
                        requestPath = attribute.toString();
                    }
                    String servletName = wrapper.getName();
                    int i;
                    ApplicationFilterConfig filterConfig;
                    for(i = 0; i < filterMaps.length; ++i) {
                        if (matchDispatcher(filterMaps[i], dispatcher) && matchFiltersURL(filterMaps[i], requestPath)) {
                            filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());
                            if (filterConfig != null) {
                                filterChain.addFilter(filterConfig);
                            }
                        }
                    }
                    for(i = 0; i < filterMaps.length; ++i) {
                        if (matchDispatcher(filterMaps[i], dispatcher) && matchFiltersServlet(filterMaps[i], servletName)) {
                            filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMaps[i].getFilterName());
                            if (filterConfig != null) {
                                filterChain.addFilter(filterConfig);
                            }
                        }
                    }
                    return filterChain;
                } else {
                    return filterChain;
                }
            }
    ...
到这里就要掰扯一下这三个的关系：filterConfig、filterMaps跟filterDefs
#### filterConfig、filterMaps、filterDefs