Figure 1 shows the number of remote hosts for each num-
ber of distinct {local IP address, destination port} pairs that
figures/fig2.eps
Figure 1: Number of remote hosts vs.
the num-
ber of distinct {local IP address, destination port}
pairs that these remotes initiated failed connection
attempts to.
(y axis in log scale; best viewed in
color)
these remote hosts made unsuccessful connection attempts
to (y axis in log scale). Approximately 78% (5,092 out of
6,562) and 9% (2,351 out of 26,859) of the remote hosts
in the ﬁrst and second datasets respectively, that initiated
inbound connection attempts, made only successful connec-
tion attempts. Note that remote hosts which local hosts ini-
tiated outbound connection attempts to are excluded. The
percentage of remote hosts that made only one unsuccess-
ful connection attempt is approximately 14% (922 out of
6,562) and 88% (23,542 out of 26,859) in the ﬁrst and sec-
ond datasets respectively. In contrast, the percentage of re-
mote hosts that made two unsuccessful connection attempts
is only 1.6% and 2.3% in the ﬁrst and second datasets re-
spectively. While the decline in this percentage is sharp from
one to two unsuccessful connection attempts, it is minor for
more than two unsuccessful connection attempts. In fact,
the percentage of all remote hosts that made two or more
unsuccessful attempts is only 8.4% and 3.6% in the ﬁrst and
second datasets respectively. Note the two peaks at 64 and
128 in the x-axis, presumably due to scanners probing a
range of IP addresses.
To see the distribution of remote hosts that made two or
more unsuccessful connection attempts, Figure 2 plots the
cumulative distribution for the number of remote hosts over
the total number of distinct {local IP address, destination
port} pairs that these remote hosts initiated failed connec-
tion attempts to (x axis in log scale). Note that more than
91% and 96% of remote hosts made at most one failed con-
104
figures/fig1.eps
figures/fig3.eps
Figure 2: Cumulative distribution for the number
of remote hosts and the total number of distinct
{local IP address, destination port} pairs that these
remotes initiated failed connection attempts to. (x
axis in log scale; best viewed in color)
Figure 3: Cumulative distribution for the number of
remote hosts and the ratio of the number of distinct
{local IP address, destination port} pairs that each
of these remotes initiated failed connection attempts
to vs. the total number of distinct pairs the remote
contacted either successfully or unsuccessfully.
nection attempt in the ﬁrst and second datasets respectively.
However, while almost 93% did not make failed connection
attempts with more than three local IP addresses (including
those that made no failed connection attempts) in the ﬁrst
dataset, almost all remote hosts (> 99%) did not in the sec-
ond dataset. The variation between the two datasets in the
distribution of the number of unsuccessfully contacted {local
IP address, destination port} pairs for each remote host are
due to several factors including: (i) the volume of scanning
activity; (ii) the availability of oﬀered network services; and
(iii) the IP range of the monitored network.
Jung et al. [9] suggested using the ratio of the number
of local hosts that a remote host unsuccessfully attempted
to connect with vs. the total number of local hosts that the
remote host contacted (either successfully or unsuccessfully)
as a way to identify scanners. We deﬁne a similar ratio that
also takes into account the contacted port; i.e., the number
of distinct {local IP address, destination port} pairs that the
remote host initiated failed connection attempts to vs. the
total number of distinct pairs the remote contacted either
successfully or unsuccessfully.
Figure 3 plots the cumulative distribution of this ratio
for all remote hosts, excluding remote hosts that local hosts
initiated outbound connection attempts to. The ﬁrst obser-
vation is that the connection attempts for most remote hosts
are either all successful or all unsuccessful. While this might
seem a straightforward way to obtain a reference baseline in
the absence of ground truth, we must diﬀerentiate between
remote hosts that contact few or many local IP addresses.
For example, in the second dataset, 96% of the remote hosts
with a ratio of one (i.e., all their connection attempts failed)
made only one failed connection attempt.
We employ these observations to derive a ﬁne-grained clas-
siﬁcation of remote hosts based on the number of distinct
{IP address, destination port} pairs that a remote host un-
successfully contacted and the number of distinct {IP ad-
dress, destination port} pairs that the remote host success-
fully contacted. For a remote host R, the following notation
is used:
RinboundS
RinboundF
Routbound
the number of distinct {IP address,
destination port} pairs the remote host
initiated successful connection attempts to.
the number of distinct {IP address,
destination port} pairs the remote host
initiated failed connection attempts to.
the number of distinct {IP address,
destination port} pairs that initiated
connection attempts (whether successful or
unsuccessful) to R.
Rφ
RinboundF /(RinboundS + RinboundF )
Classiﬁcation Criteria:
benign:
likely benign:
scanner :
likely scanner :
unknown
(one failed):
unknown
(others):
((Routbound ≥ 1) ∨ (RinboundS ≥ 3)) ∧
(RinboundF ≤ 1)
(Rφ < 0.25)
(Routbound = 0) ∧ (RinboundF ≥ 3) ∧
(RinboundS = 0)
(Routbound <= 1) ∧ (Rφ ≥ 0.75) ∧
(RinboundF ≥ 2) ∧ (RinboundS ≤ 2)
(Routbound = 0) ∧ (RinboundF = 1) ∧
(RinboundS = 0)
the remainder of remote hosts
The benign rule requires that R makes successful connec-
tions with at least three distinct {IP address, destination
port} pairs and failed connection attempts with at most one
105
pair. The host will also be considered benign if both at least
one local host initiates an outbound connection attempt to R
and R does not make failed connection attempts with more
than one pair. R is classiﬁed as likely benign if it makes only
successful connection attempts with at least 75% of distinct
{IP address, destination port} pairs it contacts. This seems
reasonable since remote hosts’ traﬃc is monitored for a rel-
atively long time (the dataset duration). Note that these
rules are matched in order from benign to unknown such
that if a remote host matches one category it will not be
matched with the following rules.
The scanner rule applies to remote hosts that make only
failed connection attempts with at least three distinct pairs.
Also, there should be no outbound connections (whether
successful or unsuccessful) made to these remote hosts from
any local host. Such a strict heuristic is based on the as-
sumption that it is unlikely for a benign remote host to
make only failed connection attempts with three or more
services in the monitored network, given that there is no
outbound connections to the remote host. If R unsuccess-
fully contacts at least two distinct pairs and has a ratio of
at least 0.75, then it is considered a likely scanner, even if it
makes successful connections with up to two distinct pairs
or if there is at most one outbound connection attempt to
R (note that if RinboundS = 2, then RinboundF must be 6).
While the scanner heuristic captures the typical scanning
pattern of probing non-existing network services (including
stealthy scanners), the likely scanner heuristic captures for-
tuitous scanners that have found one or more active network
services or that have been contacted by local hosts.
The ﬁrst unknown rule is for remote hosts that make failed
connection attempts with only one {IP address, destination
port} pair and there is no outbound connections to them.
Those remote hosts are hard to classify since failed attempts
with one network service is not enough evidence of malicious
intent. Causes of such cases include: (i) misconﬁguration in
the remote host; (ii) local servers or network failures; or (iii)
very stealthy scanning (due, for example, the availability of
many IP addresses for the scanner to scan from). The last
unknown rule is for remote hosts that do not match any of
the previous rules. It also includes backscatter traﬃc (e.g.,
the connection attempt starts with a SYN-ACK or a RST
packet sent by the remote).
The probability of a scanner (with no prior knowledge of
the targeted network) initiating a successful connection re-
lies on the density of the oﬀered services in the monitored
network. Note that RinboundS thresholds rely on the as-
sumption that the density of the oﬀered services (i.e., the
number of open ports) in most of today’s networks is usually
very small with respect to the network’s IP address range
and the total number of possible services at each address
(as it is the case in both datasets we study). The more lo-
cal IP addresses oﬀering the same network service (i.e., the
same port number is open), the higher the probability of a
scanner of this port making successful connections. To ac-
curately evaluate successful inbound connection attempts in
this case, each successful connection attempt is assigned a
weight from 0 to 1 based on the density of the connection’s
destination port in the target network as follows:
weight = 1 − number of local hosts with the port open
number of local IP addresses
For example, if port 80 is open on 100 machines in a class C
Classiﬁcation
Benign
Likely Benign
Scanner
Likely Scanner
Unknown (one failed)
Unknown (others)
Total
Dataset I
Dataset II
(4.51%)
(72.34%)
(5.33%)
(2.93%)
(11.75%)
(3.14%)
317
5,086
375
206
826
221
7,031
(4.52%)
(8.13%)
(1.05%)
(1.6%)
(79.9%)
(4.79%)
1,308
2,351
304
464
23,109
1,386
28,922
Table 2: Classiﬁcation of remote hosts as a reference
baseline.
network, a successful connection attempt made to this port
is given a weight of 1-(100/254) ≈ 0.6.
Table 2 shows the classiﬁcation results of both datasets.
The variance between the two datasets in the percentages of
remote hosts in each category is due to several reasons in-
cluding: (i) the volume of scanning activities; (ii) the num-
ber of oﬀered network services; and (iii) the volume of in-
bound traﬃc.
2.3 Challenges in Real-Time Scan Detection
In our analysis in the previous section, we had access to
remote hosts’ traﬃc over a relatively long period of time and
there were no time or computational resources constraints.
In the following, we discuss challenges involved in detecting
scanners in real-time.
Detection Accuracy. The typical trade-oﬀ in intrusion
detection between the rate of false alarm and the rate of de-
tection is a challenging problem. The priority is to reduce
false alarms while maintaining an acceptable detection rate.
For a scan detector to have a reliable detection performance
in terms of false and true positive rates over various environ-
ments, properties of the monitored network that may impact
the detection must be considered by the scanning detection
algorithm.
It is also desirable to automate the process of
setting the algorithm parameters so that the network ad-
ministrator has minimal settings to manually conﬁgure.
Computational Resources. An accurate scan detection
algorithm that consumes considerable resources of the mon-
itoring system may not be applicable in practice. Therefore,
it is important that the detector requires reasonable compu-
tational resources in terms of memory, processing time, and
disk space. However, there is usually a trade-oﬀ between
eﬃcient use of monitoring system resources and reasonable
accuracy of the detection algorithm.
Fast Detection. Post-detection responses, in general, are
more eﬀective if scanners are detected early. This requires
making a decision upon observing a few number of failed
connection attempts. However, the fewer the number of
required observations of a host’s behaviour, the less evidence
of malicious intent is available. Hence, it is very challenging
to set an appropriate trade-oﬀ between the false alarm rate
and the number of connection attempts that scanners can
perform before being classiﬁed as scanners.
Detecting Stealthy Scanners. To detect stealthy scan-
ners [4], the state of external hosts must be kept for a
long period of time (e.g., few days) after which the state
is cleared, as long as there is no suﬃcient evidence to de-
clare the remote host as a scanner. Thus, the memory foot-
print of the scan detection algorithm can easily increase to
106
an unmanageable size. The challenge is to keep a state (of
external hosts contacting the monitored network) that is as
small as possible and to classify external hosts from as few
connection attempts as possible.
Immunity to Evasion and Gaming. It is essential that
the scan detection algorithm is as immune to evasion as pos-
sible, even for adversaries with a priori knowledge of the
monitored network. It is also important to be resistant to
DoS attacks where adversaries can manipulate the algorithm
to ﬂag innocent remote hosts as scanners.
3. LQS: ONLINE SCAN DETECTION
ALGORITHM
Here we present the LQS scan detection algorithm. A de-
scription of the algorithm design and the algorithm pseudo-
code are given.
3.1 Overview
The algorithm depends on failed connection attempts as
an indication of network scanning activity as discussed in
Section 2. The LQS algorithm uses the exposure maps tech-
nique [25] as a decision oracle to determine whether a new
connection attempt is potentially malicious.
In this tech-
nique, a table of the services oﬀered by a particular network
is built automatically based on how internal hosts respond to
incoming connection attempts. If a new connection attempt
is destined to an entry in the services table, the connection is