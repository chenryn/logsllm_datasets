([do]xes)dx = [do]xoes
}（0 0){
vars[substr($i, 1, length($i)-1)] = stack[top--]
}else{
printf("error: cannot evaluate s\n", $i)
top = 0
next
if (top == 1  $NF 1~ /\=$/)
（[--ox
else if (top > 1) (
top = 0
Exercise 6.13为calc2的标准值（例如π与e）添加内建变量.添加一个内建变量，用来表示最后一
个输入行的运算结果，添加两个核操作运算符，分别用来完成栈顶元素的复制，与交换栈顶的两个元素，
145
6.5中级计算器
到目前为止，本章所介绍的语言都拥有易于分析的语法规则，然而，大多数高级语言拥有大量不同优
先级的运算符，嵌套结构（比如括号与if-then-else语句)，以及其他复杂的构造，所有的这些都要求更强
大的解析技术，而不仅仅是字段分割与正则表达式匹配.使用awk处理高级语言是可能的，只要有一个
完全成熟的解析程序即可，而解析程序可以用任何一种语言来写，本节将开发一个对数学表达式进行求
值的程序，表达式使用人们通常所熟悉的中级表示法表示，以该程序为先导，我们会在下一节开发一个更
加复杂的解析程序。
带有运算符+，一，*和/的数学表达式语法，可以用我们在第五章讲过的方法来描述：
28 文,刃) It is posible to procesa such languages in awlk by writing a fiall-fledged parser, as one would in any language
---
## Page 150
第六章小型语言
142
expr
一
term
expr + term
expr - term
term
→
factor
term * factor
term / factor
factor→→
number
( expr )
该语法规则不仅描述了数学表达式的有效形式，还规定了运算符的优先级和结合性，例如，一个
expr是多个term的和或差，而一个term由多个factor组成，这确保了乘除在加减之前完成.
我们可以把解析过程画成一张语句图来帮助理解，这与第五章所描述的生成过程刚好相反，比如，
表达式1+2*3的解析过程是：
expr
+
expr
2—number
factor
term
tern
3—number
factor
为了开发中组计算器，我们需要一个表达式解析程序，只需要多花点精力，就可以利用语法规则来构
造解析器，除此之外，它还可以用来组织程序.为每一个非终结符写一个函数：程序使用函数expr处理
由加号或负号分隔的term，使用函数term处理由乘号或除号分隔的factor，最后，使用函数factor
来识别数字和被括号包围起来的expr.
在下面的程序里，每一个输入行都被当作一个单独的表达式，表达式被求值并打印出来，我们仍然要
146
求所有的运算符，操作数和括号都用空格分开.变量指向下一个待检验的字段（运算符或操作数）.
# calc3 - infix calculator
NF>0{
f = 1
e = expr()
if (f x( if (x == y+1）{
x = 1
y=x*2
}else
print x, z[x]
}
NR > 1
(print $1}
END
(print NR }
得到的C代码是
assign(x, num( (float)0));
assign(y, num( (float)1));
while (getrec())(
if (eval(">", field(num((float)1)), x)) {
if (eval("==", x, eval("+", y, num((float)1)))) {
assign(x, num( (float) 1)) ;
assign(y, eval("*", x, num((float)2)));
}else(
print(x, array(z, x));
{
}
if (eval(">",NR, num((float)1))){
print (field(num( (float) 1)) ) ;
print (NR) ;
如果要为某个语言处理程序设计前端，一个比较好的开始方式是为输入语言写一套语法规则，利用
5.1节介绍的表示法，我们可以这样描述awk子集的语法规则：
148
program
→
opt-begin pa-stats opt-end
opt-begin
→
BEGIN statlist I ""
opt-end
←
END statlist | "*
pa-stats
→
statlist|pattern I pattern statlist
pattern
←
expr
statlist
→
 stats }
stats
→
stat stats I ""
stat
→
print exprlist 1
---
## Page 153
第六章小型语言
145
if ( expr ) stat opt-else 1
while (expr ) stat 1
statlist|
ident = expr
opt-else
else stat 1"*
exprlist
→
expr | expr, exprlist
expr
number 丨 ident 1 $ expr I( expr )1
| adxa  udxa | udxa > adxa
expr + expr l expr - expr |
xdxa udxa |adxa/ udxa |udxa adxa
ident
→
name |name[expr]I name(exprlist )
记号表示空字符事，而1表示选择
递归下降语法分析器的关健部分在于它的一整套递归分析函数，它们负责识别由非终结符生成的字
符串，每一个函数都按照产生式规则调用其他函数，一直分析到终结符为止，到这时，输入中所含的词法
单元都被读取出来并加以分类，由于该方法的自顶向下与递归这两个特性，所以被称为“逼归下降语法
分析*
解析函数的结构紧紧依赖于语言的语法结构.例如，函数program搜索的语句，开头可能有BEGIN
动作，后面跟着一个模式-动作语旬列表，最后面可能还有END动作。
在我们的递如下降语法分析器中，词法分析由子例程advance完成，它搜索下一个词法单元，并把
它保存到变量tok中.每次识别到gtat时，就产生一个输出，下层函数返回的字符串会拼接成一个更长
的字符串，为了使输出更具有可读性，程序会会试在适当的地方加上制表符，嵌套的层次在变量nt中维
护
程序并不完整一它无法识别出awk的全部语法，也无法生成awk子集所需的所有C代码，而且程
序的健壮性还有待加强，但是作为一个示例，它足够说明整个过程是如何进行的，虽然分析的只是真实
语言的子集，但是这个子集处理起来并不简单，通过对该子集的分析，我们可以看到递归下降翻译器的基
本结构.
149
# awk.parser - recursive-descent translator for part of awk
#
#
output: C code to implement the awk program
BEGIN ( program() )
function advance()(
# lexical analyzer; returns next token
(go)。uxx((go).==xo) 
while (length(line) == 0)
if (getline line == 0)
return tok = "(eof)"
sub(/^[\t]+/,"", line)#remove white space
if (match(1ine, /^[A-Za-z_][A-Za-z_0-9]*/) I|# identifier
match(1ine, /^?([0-9]+\.?[09]*|\-[09]+)/) ||# number
---
## Page 154
第六章小型语言
146
11(/(|>)/ u)qoew
#relational
match(line,/^./)){
# everything else
tok = substr(line, 1, RLENGTH)
line = substr(1ine, RLENGTH+1)
return tok
}
function gen(s){
#print s with nt leading tabs
printf("&ss\n",substr("\t\t\t\t\t\t\t\t\t"，1，nt)，s)
function eat(s){
#read next token if s == tok
(xx。）(=x） 
advance ()
F
function nl(){
# absorb newlines and semicolons
while (tok == "\n" |l tok == ";")
advance()
x
function program(){
advance ()
if (tok ==
pastats ()
if (tok ==
if (tok 1= "(eof)") error(“program continues after END")
function pastats(){
++u()(()) )
（）（(）=x=x）
(()ua5 --u
function pastat(){
# pattern-action statement
if (tok == "{")
action only
statlist()
else {
# pattern-action
++u()（()uxed)）ub
()（）==x） 
else
# default action is print $0
---
## Page 155
第六章小型语言
147
(((o))uxd,)u
nt--; gen("}")
150
function pattern()( return expr()}
function statlist()(
eat("{"); nl(); while (tok 1= "}") stat(); eat(")"); nl()
function stat(){
（（(。()stxdx)uxd）uab(uad）e)(uad==xo）
else if (tok == "if") ifstat()
else if (tok == "while") whilestat()
()（==x）
else gen(simplestat() ";")
nl()
function ifstat(){
eat("if"); eat("("); gen("if (" expr() "){"); eat(")"); nl(); nt++
stat ()
if （tok == "else"）{
 optional else