title:Securing publish-subscribe overlay services with EventGuard
author:Mudhakar Srivatsa and
Ling Liu
Securing Publish›Subscribe Overlay Services with
EventGuard
Mudhakar Srivatsa and Ling Liu
College of Computing, Georgia Institute of Technology
Atlanta, GA, USA
PI:EMAIL, PI:EMAIL
ABSTRACT
A publish-subscribe overlay service is a wide-area communi-
cation infrastructure that enables information dissemination
across geographically scattered and potentially unlimited
number of publishers and subscribers. A wide-area publish-
subscribe (pub-sub) system is often implemented as a col-
lection of spatially disparate nodes communicating on top
of a peer to peer overlay network. Such a model presents
many inherent bene(cid:12)ts such as scalability and performance,
as well as potential challenges such as: (i) con(cid:12)dentiality
& integrity, (ii) authentication, and (iii) denial-of-service
(DoS) attacks.
In this paper we present EventGuard for
securing pub-sub overlay services. EventGuard comprises of
a suite of security guards that can be seamlessly plugged-
into a content-based pub-sub system. EventGuard mecha-
nisms aim at providing security guarantees while maintain-
ing the system’s overall simplicity, scalability and perfor-
mance metrics. We present an implementation which shows
that EventGuard is easily stackable on any content-based
pub-sub core. Finally, our experimental results show that
EventGuard can secure a pub-sub system with minimal per-
formance penalty.
Categories and Subject Descriptors
C.2.4 [Distributed Systems]: Distributed Applications;
C.4 [Performance of Systems]: Security, Reliability|
Publish-Subscribe Networks
General Terms
Security, Performance, Reliability
1.
INTRODUCTION
Emerging number Internet applications require informa-
tion dissemination across di(cid:11)erent organizational boundaries,
heterogeneous platforms, and a large, dynamic population
of publishers and subscribers. A publish-subscribe overlay
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for pro(cid:2)t or commercial advantage and that copies
bear this notice and the full citation on the (cid:2)rst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speci(cid:2)c
permission and/or a fee.
CCS’05, November 7(cid:150)11, 2005, Alexandria, Virginia, USA.
Copyright 2005 ACM 1›59593›226›7/05/0011 ...$5.00.
service is a wide-area communication infrastructure that en-
ables information dissemination across geographically scat-
tered and potentially unlimited number of publishers and
subscribers [5]. A wide-area publish-subscribe (pub-sub)
system is often implemented as a collection of spatially dis-
parate nodes communicating on top of a peer to peer overlay
network. In such an environment, publishers publish infor-
mation in the form of events and subscribers have the ability
to express their interests in an event or a pattern of events
by sending subscription (cid:12)lters to the pub-sub overlay net-
work. The pub-sub overlay network uses content-based rout-
ing schemes to dynamically match each publication against
all active subscriptions, and noti(cid:12)es the subscribers of an
event if and only if the event matches their registered inter-
est.
An important characteristic of pub-sub overlay services
is the decoupling of publishers and subscribers combined
with content-based routing protocols, enabling a many-to-
many communication model. Such a model presents many
inherent bene(cid:12)ts as well as potential risks. On one hand, of-
(cid:13)oading the information dissemination task to the pub-sub
network not only improves the scalability and the e(cid:11)ective-
ness of the pub-sub system, but also permits dynamic and
(cid:12)ne-grained subscriptions.
On the other hand, many security concerns exist in such
an environment regarding authenticity, con(cid:12)dentiality, in-
tegrity and availability. Unfortunately, most of the existing
secure event distribution protocols focus only on content
con(cid:12)dentiality [17, 14]. Very few have devoted to developing
a coherent security framework that can guard the pub-sub
system from multiple security problems inherent in them.
In this paper, we present EventGuard (cid:0) a dependable
framework and a set of defense mechanisms for securing a
pub-sub overlay service. EventGuard comprises of a suite of
security guards that can be seamlessly plugged-into a wide-
area content-based pub-sub system. We also present a pro-
totype implementation of EventGuard on top of Siena [5] to
show that EventGuard is easily stackable on any content-
based pub-sub core. Our experimental results show that
EventGuard can secure a pub-sub overlay service with min-
imal performance penalty.
The rest of this paper is organized as follows. Section 2
presents a formal pub-sub system model and a threat model.
Section 3 presents an overview of EventGuard architecture
followed by a detailed design of our security guards in Sec-
tion 4. We present a concrete evaluation of EventGuard in
Section 5. Section 6 discusses some related work followed
by the conclusion in Section 7.
section, we present our threat model and the trust assump-
tions that EventGuard makes on all these entities.
Publishers. EventGuard assumes that authorized publish-
ers are honest and publish only valid events. One could
build a feedback mechanism wherein the subscribers rank
the publishers periodically [20, 22]. Over a period of time,
subscribers would subscribe only to high quality publish-
ers and the low quality publishers would eventually run out
of business. However, unauthorized publishers may mas-
querade as an authorized publishers and spam or (cid:13)ood the
network and consequently the subscribers, with incorrect or
duplicate publications, advertisements or unadvertisements.
Subscribers. EventGuard assumes that authorized sub-
scribers are semi-honest. Concretely, we assume that an
authorized subscriber does not reveal publications to other
unauthorized subscribers (otherwise, this would be equiv-
alent to solving the digital copyrights problem). However,
unauthorized subscribers may be curious to obtain informa-
tion about publications to which they have not subscribed.
Also, subscribers may attempt to spam or (cid:13)ood the pub-sub
network with duplicate or fake subscriptions and unsubscrip-
tions.
Routing nodes. EventGuard assumes that the nodes on
the pub-sub network may be untrusted. However, we also
assume that a signi(cid:12)cant fraction of the pub-sub nodes are
non-malicious so as to ensure that the pub-sub network is
alive. A pub-sub network is alive if it can route messages
and maintaining its connectivity despite the presence of ma-
licious nodes. Malicious nodes may eavesdrop or corrupt
pub-sub messages routed through them. Malicious nodes
may also attempt to selectively or randomly drop pub-sub
messages. Further, malicious nodes may attempt to spam
or (cid:13)ood other nodes and subscribers.
Finally, EventGuard assumes that the underlying IP-network
may not guarantee con(cid:12)dentiality, integrity or authenticity.
However, we assume that the underlying domain name ser-
vice (DNS), the network routers, and the related networking
infrastructure is secure, and hence cannot be subverted by
an adversary.
Pub-sub systems support two levels of event matching {
topic-based and content-based.
In a topic-based matching
scheme [1], every event is marked with a topic and all (cid:12)l-
ters use only the equality operator (EQ). Content-based
matching schemes [5, 2, 3] are layered on top of topic-based
matching scheme and they allow more sophisticated event
matching and (cid:12)ltering, e.g., hstock price, GT , 100i. Due
to space constraints, in this paper we describe EventGuard
mechanisms in the context of a topic-based pub-sub sys-
tem. Interested readers may refer to [19] for a description of
EventGuard techniques for handling complex event (cid:12)ltering
conditions on numeric attributes and concept hierarchies.
3. EVENTGUARD OVERVIEW
3.1 Design Goals
EventGuard has fundamentally two sets of design goals:
security goals and performance goals.
Figure 1: Basic Pub-Sub System
2. PRELIMINARIES
2.1 Reference Pub›Sub Model
This section presents our reference pub-sub model that is
very similar to that used in a content-based pub-sub system
like Siena [5]. A pub-sub system implements (cid:12)ve important
primitives: subscribe, advertise, publish, unsubscribe and un-
advertise. Subscribers specify the events in which they are
interested using subscribe. Publishers advertise the type of
events they would publish using advertise. Publishers pub-
lish events via publish. A subscription remains in e(cid:11)ect until
it is canceled by a call to unsubscribe. An advertisement re-
mains in e(cid:11)ect until it is canceled by an unadvertise.
Consider the stock quote dissemination where an example
event consists of the following attributes: e = hh exchange,
NYSEi, hsymbol, IBMi, hprice, 122i, hvolume, 2500ii. An
example subscription consists of the following constraints:
f = hhsymbol, EQ, IBMi, hexchange, EQ, NYSEi, hprice,
GT , 100ii, where EQ denotes the equality operator and GT
denotes the greater than operator.
As illustrated in Figure 1, in a wide-area pub-sub system,
publishers and subscribers are usually outside the pub-sub
network. Typically, we have a relatively small set of known
and trusted publishers and a much larger set of subscribers.
A natural choice for the topology of a pub-sub network is
a hierarchical topology (see Figure 1). When a node n re-
ceives a subscription request subscribe(m; f ) from node m,
it registers (cid:12)lter f with the identity of node m. If (cid:12)lter f is
not covered by any previously subscribed (cid:12)lters at node n
then node n forwards subscribe(n; f ) to its parent node.
E(cid:11)ectively, for every publisher, a pub-sub dissemination
tree is constructed with the publisher as the root, the sub-
scribers as the leaves and the pub-sub routing nodes as the
intermediate nodes of the tree. The publications, advertise-
ments and unadvertisements (cid:13)ow from the root (publisher)
to the leaves (subscribers) of the tree. Similarly, subscrip-
tions and unsubscriptions are propagated from the leaves to
the root of the tree. Note that a node n in the pub-sub net-
work may belong to one or more dissemination trees. When
a node n receives a publication publish(e) for an event e,
it uses the pub-sub dissemination tree to identify all active
subscriptions whose (cid:12)lters ff1, f2, (cid:1) (cid:1) (cid:1) , fpg are matched by
the event e. Then, node n forwards event e only to those
children nodes fx1, x2, (cid:1) (cid:1) (cid:1) , xqg that have subscribed for
some (cid:12)lter fi (1 (cid:20) i (cid:20) p).
2.2 Threat Model
The pub-sub overlay service model comprises of three en-
In this
tities: publishers, subscribers and routing nodes.
Authentication. In a pub-sub system a publication (and
advertisement, unadvertisement) is sent from a publisher
(sender) to a subscriber (receiver) through the pub-sub net-
work (channel). It is important to make sure that all publi-
cations (and advertisements, unadvertisements) are authen-
tic in order to avoid spoofed publications. On the other
hand, subscriber authenticity is important when the appli-
cation requires that subscribers should receive only the pub-
lications to which they are authorized (paid) to access. In
addition, sender authentication within the pub-sub network
is critical when pub-sub nodes are compromised. A compro-
mised node can insert bogus messages, and route messages
to arbitrary destinations.
Con(cid:12)dentiality and Integrity. Con(cid:12)dentiality and in-
tegrity of a message sent by a publisher (sender) to a sub-
scriber (receiver) is de(cid:12)ned with respect to the pub-sub
nodes (channel). We require that the pub-sub network nodes
or any observer of the pub-sub network should neither be
able to gain knowledge about the messages routed through
them nor corrupt them in an undetectable manner. Con-
cretely, we need to guarantee three types of con(cid:12)dentiality
and integrity.
First, we need publication con(cid:12)dentiality to ensure only
authorized subscribers can read an event. We also need pub-
lication integrity to protect publications from unauthorized
modi(cid:12)cations.
Second, subscribers may wish to keep their subscriptions
private. Concretely, the subscriber would like the pub-sub
network to evaluate subscription (cid:12)lter f (pbl) with respect
to the publication pbl without revealing f to the pub-sub
nodes. Further, we need subscription integrity to safeguard
subscriptions from unauthorized modi(cid:12)cation when routing
them through the pub-sub overlay.
Third, we need the pub-sub network to perform content-
based routing without requiring the publishers and the sub-
scribers to trust the network with the content. Content
con(cid:12)dentiality is especially important when content being
published contains sensitive information, which the publish-
ers and the subscribers may wish to keep a secret from the
pub-sub nodes. Content integrity prevents messages in tran-
sit from unauthorized modi(cid:12)cation by pub-sub nodes.
Availability. Availability refers to the resilience of the
pub-sub system against Denial of Service (DoS) attacks.
There are three major types of DoS attacks possible on pub-
sub systems: (i) (cid:13)ooding based attacks attempt to (cid:13)ood
the pub-sub system with large amount of bogus and du-
plicate messages, (ii) fake unsubscribe (and unadvertise)
attack attempts to send spurious unsubscribe (and unad-
if a node x0 (6= x) sends
vertise) requests; for example,
unsubscribe(x; f ) to node x’s parent then it would deny x
of all events e that is covered by (cid:12)lter f , and (iii) selec-
tive or random dropping attack attempts to drop messages
either selectively (say, based on the publication’s topic) or
randomly.
In addition to the security goals, EventGuard has two im-
portant performance related goals.
Performance and Scalability. We require the Event-
Guard mechanisms to scale with the number of nodes in
the network. In addition, EventGuard should add minimal
performance overhead to a pub-sub system.
Ease of Use and Simplicity. We require that EventGuard
mechanisms be simple and easy to deploy, operate and ad-
minister.
Figure 2: EventGuard Architecture
In this paper, we propose EventGuard as a uni(cid:12)ed solution
to the security issues discussed above. EventGuard adds au-
thenticity, con(cid:12)dentiality, integrity, and availability in addi-
tion to preserving most of the performance properties of a
content-based pub-sub system.
3.2 System Architecture
EventGuard is designed to be completely modular and op-
erates entirely above a content-based pub-sub core. Figure
2 shows EventGuard’s architecture. EventGuard comprises
of a suite of security guards that guard the pub-sub system
from various security threats discussed in Section 2.2. We
use a light-weight trusted meta-service (MS) to provide sub-
scription and advertisement services to a pub-sub system.
Security Guards. EventGuard takes a uni(cid:12)ed approach to
secure a pub-sub network. Each security guard secures one
pub-sub operation against all potential attacks. Concretely,
EventGuard comprises of six guards, securing six critical
pub-sub operations: subscribe guard, advertise guard, pub-
lish guard, unsubscribe guard, unadvertise guard and rout-
ing guard. These guards are built on top of three important
building blocks: token, key and signature. We use tokens as
pseudo-names for topics to mitigate selective dropping at-
tacks at the pub-sub network level. We protect the con(cid:12)den-
tiality and integrity of publications from pub-sub nodes and
from unauthorized subscribers using cryptographic keys. We
protect the pub-sub service from spam, (cid:13)ooding based DoS
attacks and spoofed messages using signatures. We describe
the three basic building blocks in Section 4.1 and discuss
how to design security guards using these building blocks in
the rest of Section 4.
Trusted Meta-Service. EventGuard uses a thin trusted
meta-service (M S) to create tokens and keys for control-
ling con(cid:12)dentiality of topics and publications. It also cre-
ates signatures for authenticating subscribers and publishers
and guarding the pub-sub service from (cid:13)ooding-based DoS
attacks. Four of the (cid:12)ve types of pub-sub messages, sub-
scribe, unsubscribe, advertise, unadvertised, require M S to
generate tokens, keys and signatures. However, the most
common operations, publish and routing, do not require the
direct support from M S (see Figure 2). We design the M S
with the following three objectives in mind. First, we aim at
minimizing the amount of work assigned to the M S. Keep-
ing the M S simple enables one to ensure that the M S is
relatively bug-free and is thus well-protected from malicious
nodes. Second, we would like to limit the number of secrets
maintained by the M S to at most one small key. Having
to maintain only a few small keys secret enables the M S’s
administrator to a(cid:11)ord physical security for those keys in
the form of, say a smart card. Third, it should be possi-
ble to easily replicate M S; the MS replicas should be able
to function independently without having to interact with
one another. This enables meta-services to be created and
destroyed on demand to handle varying load.
The other potential bene(cid:12)ts of supporting a light-weight
M S in the pub-sub systems are accounting and audit ca-
pabilities. For instance, the pub-sub system may want to
impose a cost model on the pub-sub system to ensure that
subscribers pay the system for their subscriptions and pub-
lishers pay the system for their advertisements. Account-
ing and pricing can be a valuable means to reduce spam in
wide-area distributed systems, for e.g., many authors have