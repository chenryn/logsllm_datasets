### Theoretical Analysis and Security Properties

**Theorem 5.1.** If \( E \) is an AE-secure encryption scheme, then Scheme 2 satisfies tree-unlinkable confidentiality.

**Theorem 5.2.** Assuming the correctness of the MAC's blind presentation protocol [5] and the completeness of the zero-knowledge proof system, Scheme 2 satisfies accountability.

**Theorem 5.3.** Assuming that the MAC presentation and issuance protocols of [5] satisfy unforgeability, the proof of knowledge system satisfies a strong extractability property, and the discrete log problem is hard in \( G \), then Scheme 2 is unforgeable.

**Theorem 5.4.** Assuming that the El Gamal encryption scheme \( P \) is CPA-secure and \( E \) is deniable, Scheme 2 is deniable.

### Implementation and Evaluation

We implemented both our constructions in Rust, using the `double-ratchet` crate, which provides an implementation of Signal’s Double Ratchet protocol, as a baseline for a messaging scheme [38]. Our tree-linkable scheme relies on the `ed25519-dalek` crate for ed25519 signing and verification [20]. For the tree-unlinkable scheme, we used `curve25519-dalek`'s implementation of curve25519 [21] to implement the algebraic MAC of Chase et al. [5], El-Gamal encryption and verification, and the necessary zero-knowledge proofs, which we implemented using the `zkp` crate [9]. Since the `zkp` crate does not currently support proving disjunctions of statements, we modified the prover and verifier to support the OR-protocol for Schnorr proofs [2]. Only our tree-linkable implementation includes report metadata, set as a UNIX timestamp.

We evaluated our implementations with message lengths ranging from 10 to 8000 bytes. We found that increased message lengths had a negligible impact on runtime (less than 1% over this range). Therefore, we provide data only for 1KB messages. The evaluation was performed using Criterion on an Intel i7-6700 processor @ 3.40GHz running Ubuntu Linux. All estimates are computed from the average of at least 300 trials, with the number of iterations determined to achieve a margin of error of less than 1% (p = 0.05).

Our results indicate that the tree-linkable scheme does not significantly increase computation or communication costs compared to existing schemes that do not support source-tracking.

### Performance Comparison

Table 1 compares our schemes to a baseline messaging scheme without source-tracking. The times for server-side computation and reporting reflect the additional computations incurred by our scheme. We do not include a baseline time for a scheme with no tracking, as there are no server-side operations to support source-tracking in the baseline.

While our tree-linkable scheme results in increased client-side costs, the overall client-side cost remains on the same order of magnitude as a scheme without source-tracking, and costs remain very low. The server-side costs, where increases are more sensitive, are minimal. The majority of the cost of sending messages in this scheme is the necessary cost of delivering a message in the underlying messaging scheme. Note that we separately report receiving times for fresh and forwarded messages. The different times do not open a timing side channel, as the components of each protocol involving interaction with the server are identical. A constant-time implementation would incur the greater of the two costs for each message.

Our tree-unlinkable scheme has costs that are an order of magnitude higher than the linkable scheme, but concrete costs still remain on the order of milliseconds for each operation.

**Table 1: Computation time for using our constructions to send 1KB messages compared to a standard double ratchet end-to-end encrypted message.**

| Operation | No Tracking | Tree-Linkable | Tree-Unlinkable |
|-----------|-------------|---------------|-----------------|
| Send      | 175 μs      | 201 μs        | 2.7 ms          |
| Rec. (fresh) | 116 μs   | 181 μs        | 6.4 ms          |
| Rec. (forward) | 116 μs | 237 μs        | 6.3 ms          |
| Server    | N/A         | 20 μs         | 4.1 ms          |
| Report    | N/A         | 57 μs         | 2.6 ms          |

**Table 2: Additional communication incurred to send a message using our constructions compared to sending the message via a standard double ratchet end-to-end encrypted message.**

| Operation | Tree-Linkable | Tree-Unlinkable |
|-----------|---------------|-----------------|
| Send      | 256B          | 712B            |
| Rec.      | 320B          | 1688B           |
| Report    | 160B          | 648B            |

Although the greatest communication increase is in the process of receiving a message, the data that clients must keep to report a message is only 128 Bytes in the tree-linkable scheme and 136 Bytes in the tree-unlinkable scheme.

### Comparison to Prior Work

The only prior work that considers finding the source of a forwarded message is the traceback scheme of Tyagi et al. [32]. While their work aims to reveal all users who received a particular message, our goal is to prevent leaking this information. Despite the difference in security properties, it is worthwhile to compare our tree-linkable scheme to the path-traceback of Tyagi et al. (their more efficient scheme) to understand the performance trade-offs between the two approaches.

The traceback scheme incurs lower client overhead, requiring less than 8 μs overhead to send a message and less than 2 μs to receive one. Per-message communication costs for traceback are also lower, with 64 and 48 bytes of additional communication for sending and receiving, respectively, compared to 256 and 320 bytes for tree-linkable tracing. A report in the traceback scheme consists of only 16 additional bytes, while our tree-linkable scheme requires 160 additional bytes.

However, the lower client costs of the traceback scheme come at the expense of increased server-side storage and report verification costs. Finding the source of a reported message using traceback requires computation linear in the length of the forwarding chain, at approximately 90 μs per forward. This makes the report verification cost comparable to ours (57 μs on a slightly faster processor) for a fresh message but worse if a message is forwarded several times. In contrast, the time to find the source of a reported message in our schemes is constant, regardless of the number of forwards.

Moreover, the traceback scheme requires the server to store 36 Bytes per message sent. At the scale of a messaging system like WhatsApp, which delivers on the order of 100 billion messages a day [29], this requires an additional 3.6 Terabytes of storage per day. Our source-tracking schemes require no persistent server-side storage.

### Acknowledgments

This work was funded by NSF, DARPA, a grant from ONR, and the Simons Foundation. Opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA.

### References

[References listed here, formatted consistently with the original text.]