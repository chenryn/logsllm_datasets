γ =0
+
=
)γ ω
v − cA − Dω − E[rDω]
( δ
1 + r
)τ (p − cA − E[rDτ ])
(cid:19)
(cid:18) ω−1(cid:88)
τ =0
( δ
1 + r
)γ ω
( δ
1 + r
)τ (p − cA − E[rDω])
The following lemma simplifies this boundary condition.
Lemma 2. Comparing payoffs of desired as opposed to undesired
actions into the infinite horizon, with γ → ∞, is the same as
comparing the payoffs of these actions over a single cycle.
Proof. Inspection of (28) shows that the two sides of the equa-
tion are equal when the terms inside the summation operator (sum-
ming from γ = 0 to ∞) are equal.
□
Therefore the equation becomes
ω−1(cid:88)
v − cA − Dω − E[rDω] +
)t(p − cA − E[rDt ])
ω−1(cid:88)
t=0
=
( δ
1 + r
( δ
1 + r
)t(p − cA − E[rDω])
t =1
Which simplifies to:
v = p + Dω +
ω−1(cid:88)
t=1
( δ
1 + r
)t (E[rDt ] − E[rDω])
(29)
(30)
If we equate (24) and (26) we get the decision boundary for an
agent to perform a desired or undesired action. We express this
by the factor f . By (7), fm determines the deposit of a layer m in
relation to the base deposit Dbase.
Lemma 3.
Introducing Balance creates a sequential game in
which factors f determine the deposit at each layer. The factor of
the highest layer fω in a sequential game with at least two layers
can be set lower than f1 and still achieves a higher utility for a
desired action compared to an undesired action.
(28)
(cid:19)
v = fω Dbase +
When we equate v and Dbase, we imply the decision boundary
without Balance. We can then express fω in relative terms by
setting v = Dbase = 1, and rearranging for fω.
(cid:18)
1 −(cid:80)ω−1
1 −(cid:80)ω−1
t=1
t=1
(cid:19)t
(cid:19)t
δ
1+r
(cid:18)
δ
1+r
E[r ft ]
E[r]
fω =
(34)
From (34), we observe that if ft is smaller than 1, then fω would
become greater than 1. This would allow the agent to perform
undesired actions in the first layer at a positive utility since v would
become larger than D1 f1 − p. Therefore, the factor at the lowest
layer must be greater than 1. If we set any factor ft equal to 1, fω
becomes also 1. Consequently, allowing a factor ft to be greater
than 1 allows us to set a deposit factor fω smaller than f1.
□
Lemma 4 (Minimum deposit at the lowest layer). The deposit
factor at the lowest layer f1 must be greater than 1 to allow the
factor at the highest layer fω to be less than 1.
Proof. The proof follows from the proof of Theorem 3.
□
B.2 Linear factor adjustment
We assume a linear relationship between the smallest factor fω and
the other factors ft . Next, we assume that at D1 the factor f1 is > 1
and that at Dω the factor fω ≥ 1 is the lowest factor. From this, we
can calculate linear relation between f1 and fω as follows.
(cid:19)
(cid:18) f1 − fω
ω − 1
ft = f1 −
(t − 1)
(35)
We can then replace ft in (33) by (35) to express the term purely
in terms of fω. Further, we assume that the valuation v is lower
than the deposit D1, i.e. the deposit is higher than the desire for
performing an undesired action.
This leaves us with the following equation:
vω − v −(cid:80)ω−1
ω − 1 −(cid:80)ω−1
t=1
t=1
(cid:19)t
(cid:19)t
(cid:18)
(cid:18)
δ
1+r
δ
1+r
f ¯ω =
E[r f1(ω − t)]
E[r(ω − t)]
(36)
C XCLAIM
C.1 Currency fluctuations and valuations
ETH-BTC fluctuation. In order to determine the buffer for the
deposit to account for exchange rate fluctuations we collect the
daily high and low prices of BTC to USD and ETH to USD from a
period of one year (May 3, 2018 to May 3, 2019). The data is collected
from the Poloniex exchange API14. We are interested in the drop
of the exchange rate, i.e. from a the high price to the low price.
Therefore we calculate the drop as plow−phigh
. Using the exchange
phigh
data, we find that the highest drop within the year is 17.06% and the
average per day drop is 3.90% with a standard deviation of 2.73%.
The maximum daily exchange rate drop is visualised in Figure 7.
orientation to calculate the security buffer for the cross-currency
deposit.
We note several shortcomings of our approach. Orders placed
on an exchange may not reflect the honest valuation of the agent.
Agents might place extreme orders to influence the exchange rate
price instead of actually valuing the currency at that level, and
more generally market manipulation (such as front-running and
transaction re-ordering) is cause for concern [8] 16. Further, we did
not consider a weighted approach where the difference between
price and exchange rate also considers the size of the order. Further,
large difference can also be caused by human error when entering
the order.
C.2 Factor calculation
We can calculate the factors taking the highest deviations from
the exchange rate fluctuation and the valuation differences. We
define the highest exchange rate fluctuation as ∆ex = 0.1706 and
the highest valuation difference as ∆v = 0.7634. We calculate a
buffer bdeposit:
bdeposit = (1 + ∆ex ) ∗ (1 + ∆v)
(37)
We then determine the factor f1 by using a base deposit of 1:
f1 = 1∗ bdeposit = 2.06424. We assume r = 0.0517, δ = 0.9 18, ω = 12
and linear relationship between factors. Further, we apply the buffer
bdeposit to all subsequent factors f . We apply these assumptions
and results to (20). This yields fω = 1.85. Our results are visualised
in Figure 8.
Figure 7: Using daily data from the Poloniex exchange, this
figure plots the percentage decrease (in absolute terms) of
the low price relative to the high price for a given day.
ETH-BTC valuations. Agents can express a different preference
for cryptocurrencies. To quantitatively approximate this difference
we scanned the order books of the Binance exchange for bids and
asks for a period of one week from May 3 to May 9, 201915. We
calculated the valuation difference by comparing the bid/ask price
to the exchange rate at the time the order is placed. We note that
most agents place orders close to the actual exchange rate as the
mean difference between price and exchange rate is 0.64% with a
standard deviation of 2.73%. However, there are significant outliers
with up to 76.34% in this data. The valuation difference serves as an
14Taken from https://docs.poloniex.com/
15Taken from https://github.com/binance-exchange/binance-official-api-docs/blob/
master/rest-api.md
Figure 8: Boundary of fω for the initial factor of f1 = {2.06}
with an additional buffer for exchange rate fluctuations and
valuation differences. The function is the decision bound-
ary for an economically rational agent to decide between a
desired and undesired action given a number of time steps t.
Assuming r = 0.05, δ = 0.9, ω = 12.
C.3 Security arguments
We discuss possible effects on XCLAIM by integrating Balance.
16However, if the order is matched, an agent will need to fulfil it, providing a constraint
on behaviour
17A risk free rate of 5% approximates, for instance, the long term average rate on 10
year Treasuries of 6.14% [14]
18[15] supports a discount factor of 0.9
024681012t1.21.41.61.82.02.2fωω=12,r=0.05,δ=0.90f1=2.06D NOTATION AND SYMBOLS
Table 1: Overview of notation and symbols.
Symbol
π
P = {1, ..., n}
σ ∈ {Σd , Σu}
ui
vi
ci
r
E[..]
A = ⟨ϕ, p, D⟩
Dm
fm
δ
t
Definition
Cryptoeconomic protocol
Set of n agents
Desired and undesired action
Utility of agent i ∈ P
Private valuation agent i ∈ P attaches to
the realisation of a particular outcome
Costs for agent i ∈ P
Interest rate
Expected value
Agreements with specification ϕ, pay-
ment p, and set of deposits D
Cryptoeconomic protocol with Balance
Agreements with additional score s
Layer with a lower bound l, upper bound
u, and a deposit factor f for layer Lm ∈
L
Deposit at a specific layer Lm ∈ L, e.g.
D1 for layer 1
Deposit factor for layer Lm ∈ L
Discount factor
Time step
πBalance
A = ⟨ϕ, p, s, D⟩
L = {L1 ≺ ... ≺ Lω} An ordered list of ω layers
Lm = ⟨l, u, f ⟩
Vaults A take multiple roles to reduce their deposit. There is no
guarantee that A has an opportunity to perform a desired action
within a given period t. A would thus fall to a lower layer. To prevent
this, A could ensure a constant flow of redeem requests by creating
an artificial demand as A can act as CbA Requester, Vault, and
CbA Redeemer, called strategy Sboosting as described in Section 6.2.
Assuming that expected interest on the deposit E[r] ∗ Dlayer(A) is
higher than the cost cA(Sboosting), this would be a dominant strategy.
This lead to an issue: A could ensure that its actions reduce its
deposit and could perform the undesired action, i.e. not executing a
redeem request of B with a lower deposit and punishment. XCLAIM
can prevent this by requiring a maximum deposit per vault A. Given
an expected interest Er, the maximum allowed deposit is defined by
Dmax = cA(Sdemand)
. This also holds true under Sybil identities, since
deposit reductions are not transitive between multiple identities.
E[r]
Conflicting minimum and maximum deposits. XCLAIM suggests
to prevent Sybil attacks by either (i) requiring a minimum deposit
from vaults through the iSC, or (ii) a fee for issuing based on the
total amount and not per issue request. The minimum deposit
amount is in conflict with the Sybil resistance requirement for
Balance as defined in Section 6.2. Hence, XCLAIM would need to
adopt a fee model based on issue amounts rather than requiring a
minimum deposit per vault when integrating Balance. As such,
Sybil resistance in both XCLAIM and Balance is maintained.
Length of time period t motivates agents to delay actions by a vault.
Assuming that an agent can fulfil more than one desired action
within a time period t and A has already a high enough score to
progress to a higher layer or remain in the highest. In that case,
A can play a strategy Sdelay to delay performing redeem requests
(A2) and balancing its deposit (A3) until the next period (see also
Section 6.3). In XCLAIM’s case Sdelay is limited by enforcing time
limits on agreements A2,3,4. Thus, vaults do not delay their actions.
Artificial redeem requests. Since the score for the redeem request
A2 is positive, A might try to obtain i(b) to execute redeem requests
to maintain it’s ranking. This would require that the cost for redeem
is lower than the opportunity cost of remaining at a higher layer.
This argumentation is similar to Section 6.2 as a maximum deposit
will prevent a vault from having a higher gain in opportunity cost
compared to the cost of executing redeem requests.
Deposit adjustments to improve score. The score to resolve a state
where DA < ⌈DA⌉ is positive. As such, A has an incentive to let
its deposit fall below ⌈DA⌉ and resolve this state by adding more
deposit, expressed by strategy Sdeposit-bouncing. By having a posi-
tive score, Balance encourages Sdeposit-bouncing. However, we can
prevent the impact of this strategy by setting the score for such an
action to be below a lower bound of a given layer Lm. For example,
XCLAIM might allow A to improve its score with Sdeposit-bouncing,
but sets the score such that A is only able to reach a layer Lm ≺ Lω.
Thereby, it limits Sdeposit-bouncing but does not prevent it.