title:FLEX: A Flexible Code Authentication Framework for Delegating
Mobile App Customization
author:Gabriele Costa and
Paolo Gasti and
Alessio Merlo and
Shunt-Hsi Yu
FLEX: A Flexible Code Authentication Framework
for Delegating Mobile App Customization
Gabriele Costa†, Paolo Gasti‡, Alessio Merlo†, and Shung-Hsi Yu‡
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
† DIBRIS – University of Genoa (Italy)
‡ New York Institute of Technology (USA)
ABSTRACT
Mobile code distribution relies on digital signatures to guar-
antee code authenticity. Unfortunately, standard signature
schemes are not well suited for use in conjunction with pro-
gram transformation techniques, such as aspect-oriented pro-
gramming. With these techniques, code development is per-
formed in sequence by multiple teams of programmers. This
is fundamentally diﬀerent from traditional single-developer/
single-user models, where users can verify end-to-end (i.e.,
developer-to-user) authenticity of the code using digital sig-
natures. To address this limitation, we introduce FLEX, a
ﬂexible code authentication framework for mobile applica-
tions. FLEX allows semi-trusted intermediaries to modify
mobile code without invalidating the developer’s signature,
as long as the modiﬁcation complies with a “contract” issued
by the developer. We introduce formal deﬁnitions for secure
code modiﬁcation, and show that our instantiation of FLEX
is secure under these deﬁnitions. Although FLEX can be in-
stantiated using any language, we design AMJ—a novel pro-
gramming language that supports code annotations—and
implement a FLEX prototype based on our new language.
1.
INTRODUCTION
In recent years, software development has evolved from a
centralized to a distributed activity. Modern development
techniques and paradigms emphasize multiple code contrib-
utors, often working “in series” by adding further functionali-
ties, components, and reﬁnements to an application. Promi-
nent examples of distributed development paradigms include
Aspect Oriented Programming [15] (AOP), Reﬂection [24],
and Contract-driven development [18]. Because of the ﬂex-
ibility of these approaches, and because they ﬁt well within
the BYOD paradigm, the research community has started
to apply distributed development approaches to smartphone
software [2].
Smartphones have traditionally relied on closed market-
places for code distribution. This model involves three par-
ties: (i) one or more developers, who builds smartphone apps
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
© 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897887
in its entirety; (ii) the app marketplace (e.g., the Google Play
Store [12], the Apple App Store [1], and the Firefox Market-
place [9]), which distributes smartphone apps; and (iii) the
user who runs apps downloaded from the app marketplace.
As a prominent example of this model, the Google Play Store
guarantees app authenticity by requiring that all apps are
cryptographically signed by their respective developers [23].
This prevents code modiﬁcations, because it allows users to
verify end-to-end (i.e., developer-to-user) app authenticity.
Unfortunately, this approach to code authentication is not
well suited for distributed development processes. By hav-
ing multiple independent developers who contribute code at
diﬀerent points in time, each (legal) code modiﬁcation in-
validates all previously issued signatures.
Further, the current code authentication approach pre-
vents app marketplaces from implementing benign code mod-
iﬁcations. For instance, Armando et al. [2] introduced the
notion of meta-market—an entity that redistributes mobile
apps to a group of federated mobile devices. The meta-
market performs security analysis of apps and, if needed,
reﬁnes the apps’ code to neutralize possible vulnerabilities,
and to add code instrumentation. However, by modifying
the application’s code, the meta-market invalidates the de-
veloper’s signature.
Any modiﬁcation implemented by the meta-market re-
quires a new signature, which can be issued by either the
developer or the meta-market itself. We argue that neither
option is satisfactory. Clearly, requiring the developer to
review and sign potentially hundreds of diﬀerent modiﬁca-
tions is not sustainable. On the other hand, replacing the
developer’s signature with a new one from the meta-market
prevents the user from performing end-to-end app authen-
tication, and gives the developer no control on which mod-
iﬁcations are performed by the meta-market.
In addition
to security issues, this approach can potentially raise both
legal (e.g., does any modiﬁcations violate the developer’s li-
cense agreement?) as well as technical concerns (how can
modiﬁcations be implemented reliably when the app’s source
code is not available?).
To address these problems, in this paper we introduce
FLEX, a ﬂexible code authentication framework. FLEX al-
lows: (i) the developer to deﬁne constraints on modiﬁcations
of his mobile apps, (ii) a third party (e.g. the meta-market)
to perform targeted modiﬁcations and, (iii) the user to ver-
ify end-to-end app authenticity. In addition, it lets the user
check which modiﬁcations have been applied to an app.
As a proof of concept, and to provide formal proofs on the
framework’s properties, we developed a simple programming
language called Annotated Middleweight Java (AMJ), which
extends Middleweight Java [4]. At the core of AMJ there
are rewriting rules: the developer annotates the app’s source
code using these rules, which specify legal modiﬁcations that
can be implemented by the meta-market. Annotations have
no eﬀect on the semantics of the app at runtime, and are
ignored by the execution environment. We emphasize that
FLEX can be instantiated with languages other than AMJ.
In fact, rewriting rules equivalent to those presented in this
work can be developed for any languages that supports late
binding, including Java and C#.
In the rest of this paper, we denote the list of all anno-
tations in an app as contract. The developer signs the app
and the contract, and then sends the resulting package to
the app marketplace for distribution. The meta-market re-
trieves the app from the marketplace, and uses the contract
to determine which modiﬁcations can be implemented with-
out invalidating the developer’s signature. Once the meta-
market has implemented its modiﬁcations, it sends the app,
the contract, and the modiﬁcations to the user. Upon re-
ceipt, the user is able to verify the authenticity of the orig-
inal app, and that the modiﬁcations implemented by the
meta-market comply with the developer’s contract.
The proposed approach has the following beneﬁts: (i) de-
velopers can easily enforce restrictions on meta-market mod-
iﬁcations. The impact of those modiﬁcation on the develop-
ment of the app is limited; (ii) the meta-market can safely
implement modiﬁcations according to the speciﬁcations pro-
vided by the contract; (iii) users can verify the integrity of
the developer’s code, as well as the compliance of the modi-
ﬁcations carried out by the meta-market with the restriction
imposed by the developer. Moreover, because the original
code and the contract are signed by the developer, the user
and the meta-market can keep the developer accountable if
the application does not work properly; and (iv) FLEX in-
troduces no additional overhead during app execution: all
checks are performed by the user before installing the app.
Organization. The rest of the paper is organized as fol-
lows. Section 2 presents a case study. Section 3 reviews
related work. In Section 4 we introduce our system and ad-
versary model. Section 5 presents our programming model
and deﬁnes AMJ. We show how code and annotations are
signed and how AMJ is used to guarantee the validity of
applications in Section 6. Section 7 presents our prototype.
We conclude in Section 8.
2. UNIVERSAL REMOTE: A CASE STUDY
To highlight the beneﬁts of FLEX, we consider a universal
remote as a case study for our approach. A universal remote
is a smartphone app that can control a wide variety of de-
vices, including smart lights, HVAC, garage doors, smart
deadbolts, electric shades, and kitchen appliances. Example
of universal remotes include Google’s OpenHAB [21] and the
Wink app [27]. An important challenge when developing a
universal remote is to provide support for a large number of
protocols, required by diﬀerent classes of smart devices.1
These protocols vary, among other things, in their security
requirements. For example, a universal remote connected to
the same WiFi as a smart lightbulb should be allowed to
turn the light on or oﬀ. However, the same universal remote
1For example, OpenHAB includes support for tens of
protocols.http://www.openhab.org/features-tech.html
might not be authorized to unlock arbitrary smart deadbolts
on the same network.
Ideally, the developer of a universal remote app should not
be concerned with implementing each individual protocol.
Instead, vendors should be responsible for adding appliance-
speciﬁc code to the universal remote, without invalidating
the app signature.
In this section, we argue that FLEX is well suited to
securely enable this model. To do so we discuss how a
simpliﬁed universal remote, which supports only “on” and
“oﬀ” commands, can be implemented using our framework.
The following AMJ code represents a “toy” universal remote
class:2
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
class URemote {
Device d ;
// ...
void on () {
Message m , r in {
m = new Message ( true );
this . d . send ( m );
r = this . d . receive ();
if (! r . isACK ()) { this . prompt (...); }
}
}
}
Class URemote has a ﬁeld d that represents a device con-
nector, i.e., an object that is used to exchange messages
with the device. Among the methods included in URemote,
we highlight one that is used to turn on the device (void
on()), and another that is (possibly) invoked to request the
user PIN (Message askPIN()).
A generic interaction between the universal remote and
a device, implementing the protocol in Figure 1a, includes
the following steps. The remote creates a new Message ob-
ject that indicates that device d should be turned on (line
9). Then, the message is sent to the device (line 10), which
returns a message (r, line 11) that indicates whether the
command was executed successfully. Otherwise, the univer-
sal remote handles negative responses at line 12.
Because of the lack of authentication, this code is only
suitable for controlling non-security-critical devices. Fig-
ures 1b and 1c exemplify two of the many protocols suit-
able for devices that require authentication. The former is
based on a user-provided PIN, while the latter uses a crypto-
graphic challenge-response mechanism. Each smart device
will implement one of many variants of these or possibly
other protocols.
Allowing the manufacturer to provide a “plugin” or a “de-
vice driver”, which implements a device-speciﬁc protocol, ad-
dresses this issue only from a functionality standpoint. We
believe that this plug-in- or driver-based approach is far from
ideal in terms of security and vendor/developer accountabil-
ity. In fact, the driver provided by the device manufacturer
must be allowed to run together with (or in place of) the
app code, and therefore requires the user to trust both the
app developer and the manufacturer. Additionally, the de-
veloper might not be able to specify meaningful restrictions
on the driver’s behavior.
2The syntax of AMJ is formally introduced in Section 4.
However, for this example, the reader may assume a Java-
like syntax.
r:URemote
d:Device
PIN
u:User
r:URemote
d:Device
on
ack
PIN
ack
r:URemote
d:Device
on
nonce
Sign(nonce)
ack
(a) Simple non-authenticated proto-
col.
(b) PIN-based authenticated protocol.
(c) Challenge-response authenticated
protocol.
Figure 1: Three alternative protocols for the universal remote.
We believe that FLEX represents a satisfactory approach
for addressing both the functionality and security aspect of
this and other related use cases. With FLEX, the developer
annotates the code, marking not only which section can be
modiﬁed by the vendor (who in this context acts as meta-
market), but also which restrictions must be enforced on
the vendor’s code. Upon receiving the universal remote app
from the vendor, the user veriﬁes that the original app code
has not been illegally modiﬁed, and that the legal modiﬁ-
cations are valid according to the developer’s speciﬁcations.
We detail this approach in the rest of the paper, and com-
plete this use case in Section 6.
3. RELATED WORK
Proof-carrying Code.
Proof-carrying code [20] is a
method for augmenting an application with a formal proof
(either manually or automatically generated) that guaran-
tees that the app adheres to a set of rules. The proof can be
veriﬁed automatically, and therefore does not impact usabil-
ity. This makes proof-carrying code very useful, especially
when the security properties can be completely speciﬁed by
the user within the language supported by the proof frame-
work, and the application can function correctly within these
restrictions. Nevertheless, this approach has major limita-
tions in the scenario highlighted in this paper. It is in fact
very unlikely [22] that code producers and consumers will
agree on a speciﬁc set of properties. As a consequence, a
variant called model-carrying code [22] has been more suc-
cessful. Model-carrying code consists in instrumenting a
model of the application behavior instead of providing a
proof of compliance. Although this approach is more ﬂexible
than the one based on proof-carrying code, the parties must
still agree on the elements appearing in the model.
Secure Meta-Market. Secure meta-market is an applica-
tion distribution paradigm proposed by Armando et al. [2] to
enforce “Bring Your Own Device” (BYOD) security policies
on personal mobile devices. A meta-market stands between