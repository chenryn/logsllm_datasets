on the principle illustrated in their paper [22] for DroidBot.
We adopt the default conﬁguration of Stoat together with their
own random text input generation.
1) Experiment Setup: We now describe our dataset, i.e.,
40 Android apps in Table IV, used for comparing existing
exercisers. Here is how we select these apps. We choose
top 500 apps in terms of download amount from all
the
categories except for games from Google Play and form all
these apps into a dataset. Then, we randomly select 1,200
apps for our hint analysis in Table I—the rest
is further
ﬁltered to ensure that their required Android version is lower
than 4.3 so that they can be used in the sensitive behavior
detection in §V-B. Next, we apply Ella [35] to measure
code coverage of all the rest apps; if Ella cannot instruments
these apps, particularly Yippi and BlackWhiteMeet, we apply
miniTracing [36] instead. Note that both Ella and minTracing,
just like many other instrumentation tools, cannot cover and
instrument native code.
We then introduce our experiment environment, i.e., four
OnePlus 6T mobile phones with the same device conﬁgura-
tion (Android 9.0, System build number A6010 41 181115).
All devices are connected with servers, either a Windows
server 2018 or a Ubuntu 16.04, via Android Debug Bridge
(ADB) [37]. We choose the server platform based on the
corresponding tools’ requirement. Each experiment runs for
one hour, a reasonable exercising time that is also adopted by
prior work [19], [25], [33], and is repeated for three times
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1077
OVERVIEW OF THE INSTRUMENTED TOP APPS USED FOR TESTING EFFECTIVENESS OF MONKEY, STOAT, DROIDBOT AND TE X TEX E R C I S E R. THE
NUMBER OF INSTRUMENTED FUNCTIONS ARE LISTED IN THE COLUMN “#METHOD”, AND THE “#ACTIVITY” ARE CALCULATED BY EXTRACTING THE
ACTIVITY NAMES FROM THE AN D R O I DMA N I F E S T.X M L OF EACH APP. WE ALSO MANUALLY VERIFY WHETHER AND HOW AN APP SUPPORT LOGIN. (cid:35):
THIS APP DOESN’T SUPPORT LOGIN, (cid:71)(cid:35): THIS APP NEED SIGN UP BEFORE LOGIN (cid:72)(cid:35): THIS APP ONLY CAN LOGIN WITH 3RD PARTY ACCOUNTS LIKE
Category
Down.
Login
Table IV
#Activity
#Method
6
58
66
5
62
4
5
3
9
6
7
31
76
126
57
20
88
70
171
221
1,088
44,946
17,390
12,314
26,272
947
242
727
3,286
3,827
843
32,148
22,145
65,677
26,125
5,652
33,002
27,527
214,998
113,299
ID
App Name
AndSMB
AutoScout24
BeautifulHairstyle
CV-Library
EasyMobileRecharge
Eskimi
FiltersorSelﬁe
FloorPlanCreator
Hdr.Lite
InNote
LINECamera
OfﬁceSuite
Speedometer
Stock Watch
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15 Wakelockdetector
HeartRateMonitor
16
17
CurrencyConverter
StatusDownloader
18
BestHairstyles
19
20
Yandex
Category
Down.
Login
#Activity
#Method
ID
App Name
Atomy
DealDash
Cram
Unfollowers
FACEBOOK ACCOUNT. (cid:32): THIS APP CAN LOGIN WITH REGISTERED ACCOUNTS OR 3RD PARTY ACCOUNTS.
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:72)(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
21
22
23
24
25 Meet24
Schoolcalc
26
Callernamepro
27
28 MybabyPiano
29
30
31 Writeonimage
32
33
34
35
36
37
38
39
40
Business
Shopping
Education
Social
Dating
Education
Lifestyle
Parenting
Productivity
Education
Photography
Business
Health & Fitness
Communication
Travel & Local
Shopping
Events
News & Magazines
Social
Dating
Productivity
Vehicles
Beauty
Business
Shopping
Social
Beauty
Art
Photography
Tools
Photo
Business
Auto & Vehicles
Finance
Productivity
Health
Tools
Tools
Beauty
Shopping
17,410
104,044
3,715
24,603
13,187
31,855
2,884
8,848
13,807
7,915
83,215
283,841
17,031
2,606
669
786
253
2,849
5,704
3,5480
DocsToGo
Healthplus
Coco
SuperShuttle
Saviry
10times
Flipboard
Yippi
BlackWhiteMeet
1M+
10M+
1M+
500K+
1M+
1M+
1M+
5M+
1M+
1M+
100M+
100M+
1M+
1M+
1M+
1M+
1M+
1M+
5M+
10M+
1M+
5M+
1M+
1M+
5M+
1M+
1M+
5M+
1M+
1M+
1M+
50M+
1M+
10M+
500K+
100K+
100K+
500M+
500K+
100K+
17
40
7
22
42
7
8
13
23
5
64
117
11
33
8
5
2
8
4
26
Tapeatalk
Hanjahandwritingrecog
(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
to reduce randomness. After each experiment, we will revert
the app’s private data and modiﬁcations to shared resources,
e.g., SD card and data stored in system services. Note that
because ADB may be ofﬂine after a long time, our Xposed
module, which is responsible for validation code, will also
automatically reboot the Android system and reconnect the
ADB if this happens.
In the following, we measure the code coverage of An-
droid apps via two detailed metrics, i.e., method and activity
coverage. Method coverage refers to the number of methods
instrumented by Ella or miniTracing and triggered during
exercising, and activity coverage the number of triggered
activities on the stack during exercising, which are registered
in the AndroidManifest.xml.
2) Code Coverage of Popular Android apps: Table V
shows the results of method and activity coverage on 40 apps
achieved by three existing exercisers. On average, the code
coverage of TextExerciser is higher than or on par with
the default text exerciser, i.e., either random or predeﬁned.
Particularly, TextExerciser triggers 48.5% more activities
and 29.0% more methods for Monkey, 37.0% more activities
and 20.2% more methods for DroidBot, and 45.3% more
activities and 26.4% more methods for Stoat.
It is worth noting that the number of triggered methods
by Stoat+TextExerciser is sometimes smaller than the
one by Stoat+Random especially when the text inputs are
with less constraints and can be easily fulﬁlled. The reason
of such a slight decrease is that Stoat written in Ruby
needs to communicate with TextExerciser written in
Python via a slow, relatively-inefﬁcient command line pipe.
This unnecessary overhead will sometimes affect the code
coverage under our strictly one-hour testing. Particularly, we
ﬁnd that such an overhead of Stoat+TextExerciser is
8.3 mins for each app on average,
two times more
than the one of Monkey+TextExerciser (3.1 mins) and
DroidBot+TextExerciser (3.4 mins).
i.e.,
B. Improvement of Existing Dynamic Analysis
In this section, we answer RQ2 (can TextExerciser
improve existing dynamic analysis of Android apps?) by evalu-
ating TextExerciser on existing dynamic security analysis
such as sensitive behavior detection and privacy leak detec-
tion. We use TextExerciser to drive existing dynamic
analysis tools shown in Table XI and see whether we can
observe any improvement when compared with prior Android
exercisers. Particularly, we choose two open-source tools—
namely TaintDroid [11], a taint analysis of tracking dataﬂows
between sensitive APIs, and ReCon [23], a trafﬁc analysis
of detecting privacy information in network packets—out of
many existing dynamic analysis tools [9], [11], [23], [38].
We also implemented a keyword-based trafﬁc analysis that
searches for the existence of keywords in network packets for
privacy leaks—all the used keywords are shown in Table VI.
1) Experiment Setup: Our experiment is conducted on two
Android Nexus 4 phones with Android 4.3 systems because of
the requirement of TaintDroid and ReCon. Since DroidBot is
incompatible with this runtime environment, we only compare
TextExerciser with Monkey and Stoat. The apps are the
same as these popular ones in §V-A and the exercising time
limit is also one hour.
2) Results of Privacy Leak Detection: The results of pri-
vacy leak detection are shown in Figure 7. Note that we
removed all the redundant results and only kept privacy leaks
with unique source and sink for TaintDroid. A high-level
observation is that all dynamic analysis detects more privacy
leaks with the help of TextExerciser. We manually check
some of these found new privacy leaks, which are due to
two reasons. First, since TextExerciser can generate valid
inputs to satisfy the input restrictions during the exploration
of Android apps, TextExerciser can explore deep code
branches of Android apps, and trigger more critical app be-
haviors. Second, because many privacy leaks occur when users
input personal information to the app, TextExerciser can
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 