# Bundles of Joy: Subverting macOS via Application Bundles

## Presenter
- **@patrickwardle**
  - Tools, blog, and malware collection
  - "Objective by the Sea" (macOS security conference)
  - Book: "The Art of Mac Malware"

## Outline
1. **Background**
   - How Apple protects macOS users
2. **Protection and Detection**
   - macOS infection vectors
   - The growth of Mac malware
   - Appleâ€™s multi-layer defense
3. **The Flaw**
   - Root cause analysis
4. **Patch**

### Background
Apple employs various mechanisms to protect macOS users from malware. These include:

#### MAC INFECTION VECTORS
- **User Assistance Required**: Most infection vectors require user interaction.
  - Fake updates
  - Poisoned search results and infected sites
  - Pirated (trojaned) applications

#### THE GROWTH OF MAC MALWARE
- The number of Mac malware instances has increased, even surpassing Windows in some metrics.
- **Anti-Infection Mechanisms**:
  - **Notarization**: Ensures that downloaded items are verified by Apple.
  - **Gatekeeper**: Blocks unsigned applications.
  - **File Quarantine**: Adds a quarantine attribute to downloaded items, triggering anti-infection checks.

### File Quarantine
- **Quarantine Attribute**: Added to most downloaded items.
  - Example: `com.apple.quarantine`
  - Command: `xattr ~/Downloads/malware.app`

```bash
% xattr ~/Downloads/malware.app
com.apple.quarantine
% xattr -p com.apple.quarantine ~/Downloads/malware.app
0081;606ec805;Chrome;BCCEDD88-5E0C-4F6A-95B7-DBC0D2D645EC
```

- **Triggers Checks**:
  - Gatekeeper
  - Notarizations
  - File quarantine

#### File Quarantine (2007)
- **User Confirmation**: When launching a downloaded item, file quarantine prompts the user for explicit confirmation.
- **Shortcoming**: Can be bypassed with an "Open" action.

#### Gatekeeper (2012)
- **Block Unsigned Applications**: Built on top of File Quarantine, it checks the code signing information of downloaded items.
- **Shortcoming**: Can be bypassed with signed malware.

#### Notarization (2019)
- **Block Non-Verified Applications**: Ensures that only verified applications can run.
- **Shortcoming**: Bypassed if the application is not notarized.

### The Flaw
- **Discovered by Cedric Owens (@cedowens)**:
  - Shell script malware masqueraded as an `.app` bundle.
  - Downloaded and double-clicked, the shell script launched without any OS prompts.
  - Tested on a fully patched Big Sur system.

#### TRIAGE OF THE POC
- **Correctly Quarantined but Allowed**:
  - Command: `xattr ~/Downloads/PoC.app`
  - Output: `com.apple.quarantine`
  - Command: `xattr -p com.apple.quarantine ~/Downloads/PoC.app`
  - Output: `0081;606fefb9;Chrome;688DEB5F-E0DF-4681-B747-1EC74C61E8B6`
  - **Item Type**: Application
  - **Unsigned**: Thus, not notarized.

#### SO WHAT'S GOING ON?
- **Closer Look at PoC.app**:
  - Structure: `PoC.app/Contents/MacOS/PoC`
  - Command: `file PoC.app/Contents/MacOS/PoC`
  - Output: `PoC.app/Contents/MacOS/PoC: POSIX shell script text executable, ASCII text`
  - **No Info.plist File**: Missing metadata file describing the app.
  - **Appify Developer Script**: Unintentionally triggers this vulnerability.

#### BEHIND THE SCENES
- **Launch Process**:
  - Involves multiple user-mode applications, system daemons, and the kernel.

#### TO THE LOGS
- **Enable Private Data Logging**:
  - Profile installation required.
  - Command: `log stream --level debug`

#### STANDARD APP
- **Mach-O Binary + Info.plist File**:
  - Command: `log stream --level debug`
  - Output: `syspolicyd: [com.apple.syspolicy.exec:default] GK process assessment: /Volumes/MachOView 1/MachOView.app/Contents/MacOS/MachOView _isBundled);`

#### EVALUATION TYPE 0X2
- **Why is our POC not classified as a bundle?**:
  - Code snippet:
    ```c
    int sub_10001606c(arg0, arg1) { 
        BOOL isBundle = NO; 
        ... 
        if ( ((sub_100015829(rbx, @"Contents/Info.plist") != 0x0) ||  
              (sub_100015829(rbx, @"Versions/Current/Resources/Info.plist") != 0x0)) ||  
              (sub_100015829(rbx, @"Info.plist") != 0x0)) 
        { 
            isBundle = YES; 
        } 
        return isBundle;
    }
    ```

This presentation covers topics such as macOS internals, reverse engineering, malware analysis, and security tool development.