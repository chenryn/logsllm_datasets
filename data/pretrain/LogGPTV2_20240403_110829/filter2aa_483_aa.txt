Bundles of Joy
breaking macOS via subverted application bundles
@patrickwardle 
WHOIS
@patrickwardle   
tools, blog, & malware collection
"Objective by the Sea" 
(macOS security conference)
Book(s): 
"The Art of Mac Malware"
In the wild? 
OUTLINE
Background
Protection  
& detection
The flaw
Patch
Topics covered: os internals, reversing, 
malware analysis, & security tool development.
Background
how apple seeks to protect macOS users
MAC INFECTION VECTORS
…the vast majority, require user "assistance"
fake updates
poisoned search results 
& infected sites
infected :/
pirated (trojaned) applications
THE GROWTH OF MAC MALWARE
…and apple’s multi-layer defense 
more Mac Malware 
(credit: MalwareBytes)
more than  
Windows !? 
anti-infection mechanisms  
(applied to downloaded items)
Notarization
Gatekeeper
File quarantine 
aim to protect the user from 
infecting themselves
QUARANTINE ATTRIBUTE 
added to all (ok, most) downloaded items
A quarantine attribute is added to downloaded items. 
When launched, it signifies the item should be 
subjected to various anti-infection checks.
% xattr ~/Downloads/malware.app 
com.apple.quarantine 
% xattr -p com.apple.quarantine ~/Downloads/malware.app 
0081;606ec805;Chrome;BCCEDD88-5E0C-4F6A-95B7-DBC0D2D645EC
Triggers checks: 
q attr: com.apple.quarantine
xattr shows (quarantine) attributes
• gatekeeper 
• notarizations 
• file quarantine
FILE QUARANTINE (2007)
user confirmation when launching an application
file quarantine prompt 
(note: "is an app")
When a user opens a downloaded item, file quarantine 
displays a prompt that requires explicit user 
confirmation before allowing the file to execute.
a presentation  
...or is it malware? 
(it's OSX.WindTail)
Shortcoming:
Open
GATEKEEPER (2012)
block unsigned applications 
Built atop File Quarantine, Gatekeeper checks the 
code signing information of downloaded items and 
blocks those that do not adhere to system policies. 
Shortcoming: signed malware
not mozilla!
NOTARIZATION (2019)
block non-verified applications 
malware?
clean
not notarized? 
blocked!
"Ruined our whole  
op[eration]"
The Flaw
...and root cause analysis 
A BUG!?!
discovered by cedric owens (@cedowens)
"Wanted to get your 
thoughts... 
I am masquerading shell 
script malware as an.app 
I put it online. Then I 
download & dbl click the 
fake .app - the shell 
script launches. 
No prompts at all from 
the OS"
(at the time) 
fully patched Big Sur
TRIAGE OF THE POC
(correctly) quarantined, but unsigned and allowed!?
$ xattr ~/Downloads/PoC.app  
... 
com.apple.quarantine 
$ xattr -p com.apple.quarantine ~/Downloads/PoC.app  
0081;606fefb9;Chrome;688DEB5F-E0DF-4681-B747-1EC74C61E8B6
Item type: application
unsigned  
(thus not notarized)
An unsigned app, can bypass file quarantine, 
gatekeeper, and notarizations 
requirements !?!?
q attr is set! 
SO WHAT'S GOING ON
taking a closer look at PoC.app
% find PoC.app 
PoC.app/Contents 
PoC.app/Contents/MacOS 
PoC.app/Contents/MacOS/PoC 
% file PoC.app/Contents/MacOS/PoC  
PoC.app/Contents/MacOS/PoC: POSIX shell script text executable, ASCII text
An application:
executable, is a script
no Info.plist file 
(metadata file, describing the app) 
The "Appify" developer script on GitHub, will create such a 
bare-bones script-based application. 
...that unintentionally, would trigger this vulnerability!
always present in 'normal' apps
BEHIND THE SCENES
what goes on when you launch an app?
Behind the scenes 
("Gatekeeper Exposed; Come, See, Conquer")
When a user launches an app, no less than half a dozen user-
mode applications, system daemons and the kernel are involved!
}
TO THE LOGS
comparing the output of various apps vs. our PoC
Standard app 
(w/ Info.plist)
Script-based app  
(w/ Info.plist)
Bare-boned script-
based app (no 
Info.plist)
Let's launch various downloaded unsigned apps and our PoC and 
see what shows up in the system logs.
TO THE LOGS
first, enable 'private' data logging
  PayloadContent 
      PayloadDisplayName 
      ManagedClient logging 
      PayloadEnabled 
      PayloadIdentifier 
      com.apple.logging.ManagedClient.1 
      PayloadType 
      com.apple.system.logging 
      PayloadUUID 
      ED5DE307-A5FC-434F-AD88-187677F02222 
      PayloadVersion 
      1 
      System 
        Enable-Private-Data 
  … 
"Unified Logs:  
How to Enable Private Data" 
(www.cmdsec.com)
Private Data Logging 
(installed profile)
STANDARD APP
mach-o binary + Info.plist file
% log stream --level debug 
... 
syspolicyd: [com.apple.syspolicy.exec:default] GK process assessment: /Volumes/MachOView 1/MachOView.app/Contents/
MacOS/MachOView _isBundled); 
}
01 
02 
03 
04 
isBundled: method
where is 'isBundled' set?
evaluateCodeForUser: ... 
sets 'isBundle' flag, based on subroutine result
return value  
passed to `setIsBundled:"`
EVALUATION TYPE 0X2
why is our poc, not classified as bundle!?
int sub_10001606c(arg0, arg1) { 
BOOL isBundle = NO; 
... 
if ( ((sub_100015829(rbx, @"Contents/Info.plist") != 0x0) ||  
      (sub_100015829(rbx, @"Versions/Current/Resources/Info.plist") != 0x0)) ||  
      (sub_100015829(rbx, @"Info.plist") != 0x0)) 
{ 
   isBundle = YES; 
} 
return isBundle;
01 
02 
03 
04 
05 
06 
07 
08 
09 
10 