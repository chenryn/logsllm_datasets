they will be helpful in practice, for cryptographic engineers.
2. LEAKAGE-RESILIENT MESSAGE
AUTHENTICATION CODES
2.1 Security deﬁnition
Let us recollect the standard deﬁnition of a Message Authen-
tication Code. A MAC is a tuple of three polynomial time
algorithms MAC = (KeyGen, Mac, Vrfy) deﬁned as follows:
• the key generation algorithm KeyGen(1n) takes as
input the security parameter n and generates a shared
(master) secret key k to be used by both the tag gen-
erator and the veriﬁer,
• the MAC generation algorithm Mac(m, k; r) takes
as input the message m, the secret key k, and possibly
some randomness r, and then outputs a tag τ .
(In
the following, we omit mentioning the randomness in
contexts where it is not relevant.)
• the tag veriﬁcation algorithm Vrfy(m, τ, k) takes as
input a message m, the corresponding tag τ and the
secret key k. The algorithm outputs 1 (accept) if the
tag is valid for the message, else it outputs 0 (reject).
We require the usual correctness property to be satisﬁed
by the MAC, i.e., Vrfy(m, Mac(m, k; r), k) → 1 for every
message m and key k in the range of KeyGen. Informally, the
MAC is said to be existentially unforgeable in the presence
of leakage during tag generation (in short, LR-MAC) if the
adversary is unsuccessful in the following security game. As
usual, a key is selected as part of the experiment. We do not
consider leakages at this step, as the actual way of loading
the key into a device can vary quite a lot from one situation
to another, and will usually happen at manufacturing time,
out of reach of the adversary. Next, the adversary can ask for
tags on messages of its choice, computed with that key. This
time, a leakage corresponding to the each tag computation is
provided to the adversary together with the tag, this leakage
being computed through the leakage function L. We will of
course place some restrictions on this leakage function later
in the paper. Eventually the adversary will also have access
to the tag veriﬁcation oracle, but it will not get leakages
during veriﬁcation (which corresponds to the fact that we
only secure the tag generation against side-channel attacks,
not the tag veriﬁcation).2 The goal of the adversary is to
output a valid forgery on a message for which it has not
previously obtained a corresponding tag.
Formally, we consider the experiment Forgeeuf−cma
AL,MAC(n):
Forgeeuf−cma
AL,MAC(n):
k ← KeyGen(1n)
F ← ∅
(m, τ ) ← AL,OML(·),OV(·,·)(1n)
If m ∈ F, then Return b := 0
b ← Vrfy(m, τ, k)
Return b
Oracle OML(m):
r ← {0, 1}n
F ← F ∪ m
Return (Mac(m, k; r),
Oracle OV(m, τ ):
Return Vrfy(m, τ, k)
L(m, k; r))
Conceptually, we do not want to place unnecessary re-
strictions on the leakage function L. In particular, it is an
open problem to determine the complexity of such a func-
tion, and whether it can be computed eﬃciently. So, in
order to abstract the complexity of the leakage function, we
separate the process of obtaining a leakage, which is going
through a physical measurement, from the internal compu-
tation of the adversary. The possibility for an adversary A
to obtain leakages from a circuit is then expressed as an or-
acle access: AL. Furthermore, we talk about (s, t)-bounded
adversaries for adversaries who are able to perform s leak-
age queries and perform a computation bounded by running
time t. Note that those s leakage queries are quite diﬀer-
ent from the OML queries in the Forgeeuf−cma
AL,MAC(n) game: when
querying L, A must select the inputs (m, k) of the circuit
by himself, while the OML oracle provides A with leakages
about a key k that A is not expected to know. Those s
2 As mentioned in the introduction, preventing side-channel
attacks during the tag veriﬁcation will most likely be quite
challenging. Indeed, if the adversary can observe the leak-
age during veriﬁcation, it should be able to fully recover the
key by re-using it many times in the veriﬁcation phase. Be-
sides, this problem is not speciﬁc to symmetric primitives.
A similar (yet relaxed) restriction is also made in [23] for a
construction of a leakage-resilient MAC based on pairings.
In this case, the adversary gets the leakage during veriﬁca-
tion, but only once, for a given message and randomness
pair. Otherwise, the adversary will be able to leak a correct
tag bit-by-bit by repeatedly accessing the veriﬁcation oracle
with incorrect tags against the same message.
98queries actually correspond to a training phase that A can
perform as part of his attack of the circuit, a practice that
is common in (proﬁled) side-channel analyses.
Deﬁnition 1. [LR-MAC] MAC is said to be a (q, s, t, )
secure LR-MAC in the presence of leakage L, if  is a bound
on the the advantage of any (s, t)-bounded adversary AL
playing the experiment Forgeeuf−cma
AL,MAC(n) and making at most
q queries to the OML oracle, that is,
Pr[Forgeeuf−cma
AL,MAC(n) = 1] ≤ .
Remark 1. The notion of Strongly-Unforgeable LR-MAC
is a stronger security notion than that in Deﬁnition 1. This
distinction is analogous to the diﬀerence between strong un-
forgeability and basic unforgeability notions for MAC in the
traditional setting (without leakage). In the case of strongly-
unforgeable LR-MAC, it suﬃces for the adversary to output
a valid message-tag pair distinct from those pairs it received
in its interaction. Hence, it is not necessarily required to
output forgery on a distinct message. Otherwise, the secu-
rity game remains the same as that for LR-MAC.
2.2 Why CBC-MAC is not leakage-resilient
To motivate our following investigations, we start with a
brief explanation of why standard MAC constructions such
as CBC-MAC, are not leakage-resilient by default. For this
purpose, just look at the informal description of CBC-MAC
in Figure 1. Here, the master key k is used in every iteration
of the MAC (and kept constant among messages). So we are
exactly in the scenario where a standard side-channel key re-
covery attack is the most devastating. As a result, a natural
suggestion for improving the situation would be to combine
CBC-MAC with a leakage-resilient stream cipher so that ev-
ery message block would be processed with a diﬀerent key.
Yet, this would typically imply three block cipher executions
per message block. In the following section, we show that a
three times more eﬃcient solution can be obtained.
Figure 1: CBC-MAC.
2.3 Leakage-resilient tag generation
We next present a plausible construction of LR-MAC that is
a variant of the standard CBC-MAC. The scheme MAC1 =
(KeyGen1, Mac1, Vrfy1), depicted in Figure 2 and described
below, is a ﬁxed length MAC that takes as input (cid:96) blocks
of messages ((cid:96) ≥ 1), each block being n-bit long.3 The
construction requires two pseudorandom functions F and F∗
that we will typically instantiate with a block cipher. The
same block cipher could be used twice, but we distinguish
between the two functions because their implementations
3 For clarity, we stick to a ﬁxed-length MAC construction,
just as CBC-MAC. The adaptations of CBC-MAC to a vari-
able length MAC would apply here as well – see, e.g., [4].
Figure 2: Re-keying MAC.
will be quite diﬀerent: we demand F∗ for being essentially
leak-free (or strongly protected) and expect its implementa-
tion to be fairly ineﬃcient, while F is expected to be more
eﬃcient and require much less protection against leakages.
How to realize the leak-free function F∗ and to capture its
possible imperfections will be discussed in Section 4.
Description of MAC1:
• KeyGen1(1n): Choose a shared master secret key
k $← {0, 1}n.
• Mac1 (m, k): Parse m = (cid:104)m1, m2, . . . , m(cid:96)(cid:105). Choose
IV $← {0, 1}n. Compute the session key k(cid:48) := k1 =
F∗
k(IV ).
– for j = 2, . . . (cid:96)+1: compute kj = Fkj−1 (mj−1).
Return τ = (IV, k(cid:96)+1).
• Vrfy1 (m, τ, k): Parse τ = (IV, tg). Compute τ(cid:48) ←
Mac1 (m, k, IV ).
– If τ(cid:48) ?= τ , then return 1 (correct), else return
0 (incorrect).
Compared to CBC-MAC, one can directly see that this
scheme brings improved leakage-resilience, since a new ses-
sion key is used for every new message. Compared to the LR-
MAC of Schipper in [35], we have the additional advantage
that the key evolves for every message block, which allows
us to state our requirements on the leakage for a single iter-
ation of the scheme. We also exploit the block cipher quite
eﬃciently since this new stateful construction essentially re-
quires an execution of F per message block. Eventually, we
require a very minimum use of the leak-free component F∗
(depicted in dark grey on the ﬁgure):
it is only needed to
encrypt a single random IV under the master key k.
Remark 2. In the MAC1 construction above, a random
IV is chosen to compute every new tag on a message m.
Nevertheless, the security of the construction will not be
aﬀected even if we choose the IVs arbitrarily, as long as they
are distinct (cf. proof of Theorem 1). Hence, for instance,
we could use a counter mode (i.e., start with IV = 0, and
then successively increment it). This would only require the
MAC implementation to maintain a public state.
We now prove the LR-MAC security of our MAC1 con-
struction based on the pseudorandomness and the simulat-
able leakage assumption of the block cipher F, assuming that
the implementation of F∗ used to compute the session key
k(cid:48) from IV is leak-free. We ﬁrst recall these properties.
Deﬁnition 2. [Pseudorandom Function (PRF) [36, Deﬁ-
nition 2]] A block cipher F : {0, 1}n × {0, 1}n → {0, 1}n is a
99(s, t, prf ) PRF in the presence of leakage function L if, for
every (s, t)-bounded adversary AL(.,.), we have:
| Pr[AL(.,.),FK (·) = 1] − Pr[AL(.,.),R(·) = 1]| ≤ prf ,
where K $← {0, 1}n and R is a random function.
As discussed in [36], this deﬁnition would be exactly equiv-
alent to the standard notion of PRF if the leakage function
was polynomial time: indeed, in that case, A could emulate
L internally. However, as discussed above, we do not want
to make any such restriction, since it remains an open prob-
lem to determine the exact complexity of physical functions,
and since leakages generally result from a physical process
rather than a traditional computational process. This obser-
vation motivates the next q-simulatable leakage assumption
that is deﬁned via the following game and can be directly
challenged by hardware engineers, as detailed in [36].
Game q-sim(A, F, L,S, b) [36, Section 2.1].
The challenger selects two random keys k, k∗ $← {0, 1}n.
The output of the game is a bit b(cid:48) computed by AL based
on the challenger responses to a total of at most q adver-
sarial queries of the following type:
Query
Enc(x)
Response if b = 0 Response if b = 1
Fk(x), L(k, x)
Fk(x), S L(k∗, x, Fk(x))
and one query of the following type:
Query
Gen(z, x) S L(z, x, k)
S L(z, x, k∗)
Response if b = 0 Response if b = 1
It directly leads to the following deﬁnition of a block cipher
implementation with q-simulatable leakages.
Deﬁnition 3. [q-simulatable leakages [36, Defn. 1]] Let
F be a block cipher having leakage function L. Then F is
said to have (sS , tS , sA, tA, q-sim) q-simulatable leakages if
there is an (sS , tS )-bounded simulator S L such that, for ev-
ery (sS , tS )-bounded adversary AL, we have:
| Pr[q-sim(A, F, L,S L, 1) = 1]−
Pr[q-sim(A, F, L,S L, 0) = 1]| ≤ q-sim.
(cid:104)DL(cid:16)
(cid:12)(cid:12)(cid:12)Pr
(cid:104)DL(cid:16)
(cid:17)
(cid:105) −
(cid:105)(cid:12)(cid:12)(cid:12)
Eventually, the following lemma is a consequence of Deﬁni-
tion 2 and Deﬁnition 3 (for 2− simulatable leakages) [36].
Lemma 1. [2-simulatable ideal execution [36, Lemma 1]]
Let F : {0, 1}n × {0, 1}n → {0, 1}n be a (s, t, prf ) PRF in
the presence of leakage function L having (sS , tS , s, t, 2-sim)
2-simulatable leakages, and let S L be an appropriate (sS , tS )-
bounded leakage simulator. Then, for every k−, p0, p1, z ∈
{0, 1}n and every (s − 3sS , t − max(tprf , tsim))-bounded dis-
tinguisher DL, the following holds:
= 1
(cid:17)
y+, k+, L(k(cid:48), p0), L(k(cid:48), p1), SL(k−, z, k(cid:48))
y∗, k∗, SL(k(cid:48), p0, y∗), SL(k(cid:48), p1, k∗), SL(k−, z, k(cid:48))
Pr
= 1
≤ prf + 2-sim,
where k(cid:48), y∗, k∗ $← {0, 1}n, y+ = F(k(cid:48), p0), k+ = F(k(cid:48), p1).
Furthermore, tprf is equal to 3 · tS augmented with the time
needed to make 2 oracle queries to the PRF challenger and
select a uniformly random key in {0, 1}n, and tsim is the
time needed to relay the content of two Enc and one Gen
queries from and to a q-sim challenger.
Remark 3. We note that the output of the two Enc and
the Gen queries in Lemma 1 can be obtained adaptively.
More precisely, let (cid:104)d1, d2, d3, d4, d5(cid:105) denote the input re-
ceived by DL. The above indistinguishability result holds
even if DL adaptively obtains the input as (cid:104)d1, d3(cid:105), (cid:104)d2, d4(cid:105),
and d5, in any order of its choice. This observation will be
useful in the following security analysis of MAC1.
Remark 4. Note that besides the previously mentioned
simulatability, we need to assume that the blocks leak in-
dependently of each other. This actually corresponds to the
“only computation leaks” assumption (or “independent leak-
age” assumption) that is anyway required for any proof of
leakage-resilience to hold.
In the present case, we believe
that it is reasonable to have it satisﬁed in practice, since we
need it at the macroscopic level of fairly large blocks. That
is, as for [7] and follow up works, it seems unlikely that
our construction will be broken because of small deviations
from this assumption (which can possibly be reduced at the
hardware level, e.g. by shielding blocks with ground lines).
Security of MAC1.
2.3.1