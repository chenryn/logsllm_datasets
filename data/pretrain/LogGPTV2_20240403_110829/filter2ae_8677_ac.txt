##
##
## 构造weblogic 10和12 版本 filter 通用注入内存马
构造通用的payload时，10版本和12版本filter的流程没啥变化，只是不同版本去拿上下文对象的流程是有变化的。参考前面回显通用的部分，所以这里只贴结论：
  * 差异点在于通过当前weblogic线程类`getCurrentWork`函数拿到的类，是不同的。10版本拿到的是`ServletResquestImpl`类，12版本拿到的是`ContainerSupportProviderImpl`类。
  * 相同点是最后都拿到拿到`context`对象，来进行filter内存马后续的植入。
所以在拿到context之前，进行一个判断:
后续都是一样，对context对象中的classload字段进行获取，因为`classloader`字段可以返回`ChangeAwareClassLoader`这个类
最后加载恶意的字节码class即可:
如果class编译得版本高于目标服务器jdk版本，会报`Unsupported major.minor version
52.0`,jdk高版本能兼容低版本，但是低版本不能兼容高版本:
解决方法当然是注意编译内存马class文件使用的jdk版本。可以直接用1.7来编译。
##
## 实际问题中的xmldecoder打filter内存马的小问题
如上对通用`filter`内存马进行了构造，而其中这个注入filter会加载一个class文件，这个class文件就是马文件，蚁剑冰蝎之类的
这个最早我是搜到y4er :
先上传filter注入的类的jar包，再上传蚁剑类的class，最后通过漏洞去加载filter注入类，完成内存马的注入。
使用的是`URLClassLoader`来加载，支持对jar包加载：
打 **neo-ReGeorg** 正向代理也是，转换好了后同样的方法：
payload:
              file:///tmp/update.jar
          weblogicupdate
但是有两个小地方可以改进：
  * 1.实际测试是可用，但是实战中这样使用的话需要先上传一个打包好的jar包和一个蚁剑class，当时我遇到的问题是一个内网负载均衡，你传这两个文件需要打好多次来保证每台机器都上传成功，很累。稍微改一下就是把filter注入类和内存马类都转成字节数组来加载，一个包一步打通：
  * 2.因为如果如第一点拿点把蚁剑class字节码硬编码就不太灵活，不如加载的类也当作个接收参数，做到动态注入蚁剑、冰蝎、哥斯拉、reGerog等等
##
##
## 一个包动态打入蚁剑冰蝎内存马：
对filter注入类去加载的类改作传参，Hex2string方法是对传入的hex转字节数组，evilClass为你传入蚁剑字节数组的hex格式：
payload如下 第一段hex是filter注入类的hex，第二段hex是打入的蚁剑的hex：
     22222
                        com.qing.weblogic12_filterShell
    11111
打入：
**这样就能完成10版本和12版本通用，一个包打入动态注入蚁剑、冰蝎、reGeorg的内存马。**
##
##
# 0x06 结合weblogic servlet、listener类型内存马
因为前面对context的区别寻找方法都知道了，在构造通用的servlet、listener内存马
`servlet、listener`原理参考网上的`tomcat`内存马。
##
## weblogic servlet内存马
weblogic servlet内存马网上就两个文章，可能我理解能力不行，看不太明白，索性自己调下。
流程可以参考网上很多tomcat servlet内存马的文章，在tomcat servlet内存马种植流程中
核心找到负责管理`Servlet`的类。
其中注入成功的关键点就是 **如何获取到Context** ,以及如何在`servletMapping`添加`servlet`.
##
## 1.weblogic 哪里存储着Servlet的路径映射关系？
自己写个`servlet`，查看哪里去查询了这个路径映射关系，以 **weblogic10** 为例，调用栈如下:
明显看到weblogic.servlet.internal.WebAppServletContext.ServletInvocationAction#run存有我对自己定义的Servlet类和servlet名称:
然后在这里下断，慢慢往上去调试，一级一级下断，过程不贴了直接贴结果：
直到你下断到`weblogic.servlet.internal.WebAppServletContext#resolveRequest`这个函数时候，,调了你会发现在`URLMatchHelper
var2 =
(URLMatchHelper)this.servletMapping.get(var1);`这里var1为传入的uri，通过var1从`servletMapping`中匹配到合适的servlet
查看这个`servletMapping`，而`servletMapping`就正好存储着 **Servlet的路径映射**
，get方法会调用`getExactOrPathMatch`方法，`getExactOrPathMatch`方法就是去matchMap中去匹配，有兴趣的师傅可以跟下：
**重点是我们可以通过这个`servletMapping`的`put`方法，添加自己的`servlet`**。
##
## 2.weblogic 在哪里可以动态注册Servlet对象？
在第一个问题调试的时候，发现`weblogic.servlet.internal.WebAppServletContext`中就提供了`registerServlet`函数来注册Servlet。下断然后重启就能看到它自己调用registerServlet函数来注册,细节有兴趣师傅可以跟下这里不贴了:
综上weblogic10版本为例子，在`URLMatchHelper`的`servletMapping`中查询servlet的路径映射关系，在`WebAppServletContext`的`registerServlet`去注册servlet。
##
## 3.如何获得servletMapping并添加恶意servlet？
在第一个问题中说明了，`weblogic.servlet.internal.WebAppServletContext`中的`servletMapping`使用put方法可以添加我们想加的servlet，经查找发现WebAppServletContext提供了获得servletMapping的方法：
##
##
## 构造通用welogic servlet内存马
10版本和12版本拿到context的区别前面都有说，这里不贴了。后面就是对servlet的注册和添加。
上面提的 **2、3** 问题可以看出，注册servlet内存马有 **两个方法**
，一个是通过拿到`servletMapping`来添加恶意的`servlet`，另一个是通过调用`registerServlet`函数来注册恶意的`servlet`。
## 1.调用`registerServlet`函数来注册恶意的`servlet`
在拿到context后，只需要调用`registerServlet`函数即可:
##
## 2.反射拿到servletMapping字段，put方法恶意的`servlet`
这种要麻烦一些，我们先看调用这个`put`需要哪些东西。
直接在put下断，重启weblogic，看看它自己怎么加的:
我自己设置的servlet路径是`Funservlet`，你一直在这里F9会一直等不到自己设定servlet那个请求，下个条件断点：
其中传入的`URLMatchHelper` 如上，发现调用put第一个参数就是servlet路径，第二个是传入的`URLMatchHelper` 类。
第一个参数是取的`URLMatchHelper` 类的`pattern`字段，有兴趣的可以自己跟一下。
第二个参数是`URLMatchHelper`类实例，我们需要知道如何创建才方便反射构造：
`weblogic.servlet.internal.URLMatchHelper#URLMatchHelper`构造函数如下，`var1`为`servlet`路径，`var2`为`ServletStubImpl`对象：
所以现在问题变成如何实例化`ServletStubImpl`类对象，查看其构造函数。
`weblogic.servlet.internal.ServletStubImpl#ServletStubImpl`
var1为servlet路径，var2为添加的servlet名词, var3为`context`对象，如下：
所以到如上，我们就写了，因为var1，var2是字符串，var3为context对象，前面也说了如果通用去拿context。
所以流程就是
先用context获取到`servletMapping`，因为`servletMapping`的put方法需要servlet路径和URLMatchHepler实例，所以第二步为反射创建ServletStub，传入`URLMatchHepler`构造函数并创建其实例，第三步就是调用put方法：
把servlet内存马结合xmldecoder反序列化的步骤如前面一样，这样不再叙述。
##
##
## weblogic listener内存马
这个就不贴了，`context`中提供了注册`listener`函数:
实际调过在filter链中有封装了listener，和前面一样还是要去注册触发和注册的地方，这个就没继续弄了。
##
##
### Links