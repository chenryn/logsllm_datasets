## PostgreSQL性能优化综合案例讲解 - 1  
### 作者                                                             
digoal           
### 日期             
2012-03-13            
### 标签           
PostgreSQL , 性能优化 , 综合案例           
----          
## 背景          
备注  
部署部分可以请参考  
[《PostgreSQL on Linux 最佳部署手册》](../201611/20161121_01.md)  
## 【软件环境】   
```  
CentOS 5 x64  
PostgreSQL 9.1.3  
plproxy 2.3  
pgbouncer 1.4.2  
```  
## 【测试模型】  
设计一个包含INSERT, UPDATE, SELECT语句的业务模型用于本优化案例.  
业务逻辑 :   
![pic](20120313_01_pic_001.jpg)  
## 【测试表】  
```  
create table user_info  
(userid int,  
engname text,  
cnname text,  
occupation text,  
birthday date,  
signname text,  
email text,  
qq numeric,  
crt_time timestamp without time zone,  
mod_time timestamp without time zone  
);  
create table user_session  
(userid int,  
logintime timestamp(0) without time zone,  
login_count bigint default 0,  
logouttime timestamp(0) without time zone,  
online_interval interval default interval '0'  
);  
create table user_login_rec  
(userid int,  
login_time timestamp without time zone,  
ip inet  
);  
create table user_logout_rec  
(userid int,  
logout_time timestamp without time zone,  
ip inet  
);  
```  
## 【初始化数据】  
```  
insert into user_info (userid,engname,cnname,occupation,birthday,signname,email,qq,crt_time,mod_time)  
select generate_series(1,20000000),  
'digoal.zhou',  
'德哥',  
'DBA',  
'1970-01-01'  
,E'公益是一辈子的事, I\'m Digoal.Zhou, Just do it!',  
'PI:EMAIL',  
276732431,  
clock_timestamp(),  
NULL;  
insert into user_session (userid) select generate_series(1,20000000);  
set work_mem='2048MB';  
set maintenance_work_mem='2048MB';  
alter table user_info add constraint pk_user_info primary key (userid);  
alter table user_session add constraint pk_user_session primary key (userid);  
```  
## 【业务函数】  
模拟用户登录的函数  
```  
create or replace function f_user_login   
(i_userid int,  
OUT o_userid int,  
OUT o_engname text,  
OUT o_cnname text,  
OUT o_occupation text,  
OUT o_birthday date,  
OUT o_signname text,  
OUT o_email text,  
OUT o_qq numeric  
)  
as $BODY$  
declare  
begin  
select userid,engname,cnname,occupation,birthday,signname,email,qq  
into o_userid,o_engname,o_cnname,o_occupation,o_birthday,o_signname,o_email,o_qq  
from user_info where userid=i_userid;  
insert into user_login_rec (userid,login_time,ip) values (i_userid,now(),inet_client_addr());  
update user_session set logintime=now(),login_count=login_count+1 where userid=i_userid;  
return;  
end;  
$BODY$  
language plpgsql;  
```  
模拟用户退出的函数  
```  
create or replace function f_user_logout  
(i_userid int,  
OUT o_result int  
)  
as $BODY$  
declare  
begin  
insert into user_logout_rec (userid,logout_time,ip) values (i_userid,now(),inet_client_addr());  
update user_session set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=i_userid;  
o_result := 0;  
return;  
exception   
when others then  
o_result := 1;  
return;  
end;  
$BODY$  
language plpgsql;  
```  
## 【搭建测试模型】  
1\.  搭建环境, 安装PostgreSQL9.1.3数据库软件并初始化数据库(略).  
2\.  调整数据库postgresql.conf参数. 打开日志, SQL统计, 跟踪, 以及性能参数, 便于优化过程中取证.  
```  
监听IPv4的所有IP.  
listen_addresses = '0.0.0.0'  
最大允许1000个连接.  
max_connections = 1000  
为超级用户保留3个可用连接.  
superuser_reserved_connections = 3  
默认的unix socket文件放在/tmp, 修改为$PGDATA, 以确保安全.  
unix_socket_directory = '.'  
默认的访问权限是0777, 修改为0700更安全.  
unix_socket_permissions = 0700  
Linux下面默认是2小时.tcp的keepalives包发送间隔以及重试次数, 如果客户端没有响应, 将主动释放对应的SOCKET.  
tcp_keepalives_idle = 60  
tcp_keepalives_interval = 10  
tcp_keepalives_count = 6  
大的shared_buffers需要大的checkpoint_segments,同时需要申请更多的System V共享内存资源.  
这个值不需要设的太大, 因为PostgreSQL还依赖操作系统的cache来提高读性能, 另外, 写操作频繁的数据库这个设太大反而会增加checkpoint压力.  
shared_buffers = 512MB  
这个值越大, VACUUM, CREATE INDEX的操作越快, 当然大到一定程度瓶颈就不在内存了, 可能是CPU例如创建索引.  
这个值是一个操作的内存使用上限, 而不是一次性分配出去的. 并且需要注意如果开启了autovacuum, 最大可能有autovacuum_max_workers*maintenance_work_mem的内存被系统消耗掉.  
maintenance_work_mem = 512MB  
一般设置为比系统限制的略少,ulimit -a : stack size              (kbytes, -s) 10240  
max_stack_depth = 8MB  
手动执行vacuum操作时, 默认是没有停顿执行到底的, 为了防止VACUUM操作消耗太多数据库服务器硬件资源, 这个值是指vacuum在消耗多少资源后停顿多少时间,以便其他的操作可以使用更多的硬件资源.  
vacuum_cost_delay = 10ms  
#vacuum_cost_page_hit = 1               # 0-10000 credits  
#vacuum_cost_page_miss = 10             # 0-10000 credits  
#vacuum_cost_page_dirty = 20            # 0-10000 credits  
#vacuum_cost_limit = 200                # 1-10000 credits  
默认bgwriter进程执行一次后会停顿200ms再被唤醒执行下一次操作, 当数据库的写操作很频繁的时候, 200ms可能太长, 导致其他进程需要花费过多的时间来进行bgwriter的操作.  
bgwriter_delay = 10ms  
如果需要做数据库WAL日志备份的话至少需要设置成archive级别, 如果需要做hot_standby那么需要设置成hot_standby, 由于这个值修改需要重启数据库, 所以先设置成hot_standby比较好. 当然hot_standby意味着WAL记录得更详细, 如果没有打算做hot_standby设置得越低性能越好.  
wal_level = hot_standby  
wal buffers默认是-1 根据shared_buffers的设置自动调整shared_buffers*3% .最大限制是XLOG的segment_size.  
wal_buffers = 32MB  
多少个xlog file产生后开始checkpoint操作, 这个值越大, 允许shared_buffer中的被频繁访问的脏数据存储得更久. 一定程度上可以提高数据库性能. 但是太大的话会导致在数据库发生checkpoint的时候需要处理更多的脏数据带来长时间的IO开销. 太小的话会导致产生更多的WAL文件(因为full page writes=on,CHECKPOINT后的第一次块的改变要写全块, checkpoint越频繁, 越多的数据更新要写全块导致产生更多WAL).  
checkpoint_segments = 64  
这个和checkpoint_segments的效果是一样的, 只是触发的条件是时间条件.  
checkpoint_timeout = 5min  
归档参数的修改也需要重启数据库, 所以就先打开吧.  
archive_mode = on  
这个是归档调用的命令, 我这里用date代替, 所以归档的时候调用的是输出时间而不是拷贝wal文件.  
archive_command = '/bin/date'  
如果要做hot standby这个必须大于0, 并且修改之后要重启数据库所以先设置为32.  
max_wal_senders = 32  
这是个standby 数据库参数, 为了方便角色切换, 我一般是所有的数据库都把他设置为on 的.  
hot_standby = on  
这个参数是说数据库中随机的PAGE访问的开销占seq_page_cost的多少倍 , seq_page_cost默认是1. 其他的开销都是seq_page_cost的倍数. 这些都用于基于成本的执行计划选择.  
random_page_cost = 2.0  
和上一个参数一样, 用于基于成本的执行计划选择. 不是说会用多少cache, 它只是个度量值. 表示系统有多少内存可以作为操作系统的cache. 越大的话, 数据库越倾向使用index这种适合random访问的执行计划.  
effective_cache_size = 12000MB  
下面是日志输出的配置.  
log_destination = 'csvlog'  
logging_collector = on  
log_directory = '/var/applog/pg_log/digoal/1921'  
log_truncate_on_rotation = on  
log_rotation_age = 1d  
log_rotation_size = 10MB  
这个参数调整的是记录执行时间超过1秒的SQL到日志中, 一般用于跟踪哪些SQL执行时间长.  
log_min_duration_statement = 1000ms  
记录每一次checkpoint到日志中.  
log_checkpoints = on  
记录锁等待超过1秒的操作, 一般用于排查业务逻辑上的问题.  
log_lock_waits = on  
deadlock_timeout = 1s  
记录DDL语句, 一般用于跟踪数据库中的危险操作.  
log_statement = 'ddl'  
这个原本是1024表示跟踪的SQL在1024的地方截断, 超过1024将无法显示全SQL. 修改为2048会消耗更多的内存(基本可以忽略), 不过可以显示更长的SQL.   
track_activity_query_size = 2048  
默认autovacuum就是打开的, log_autovacuum_min_duration = 0记录所有的autovacuum操作.  
autovacuum = on  
log_autovacuum_min_duration = 0  
这个模块用于记录数据库中的最近的1000条SQL以及这些SQL的统计信息, 如执行了多少次, 总共耗时是多少. 一般用于发现业务上最频繁调用的SQL是什么, 有针对性的进行SQL优化.  
shared_preload_libraries = 'pg_stat_statements'  
custom_variable_classes = 'pg_stat_statements'  
pg_stat_statements.max = 1000  
pg_stat_statements.track = all  
```  
其他参数值默认.  
这些参数的详细解释如有疑问请参考PostgreSQL官方文档.  
3\. 新建数据库用户digoal, 库digoal. 并使用前面的测试模型新建表以及函数, 初始化数据.  
下面的测试过程中只测登陆部分, 未测试退出部分, 因为登陆过程已经包含了INSERT, UPDATE, SELECT. 基本上可以反映整个调优过程了.  
## 【调优阶段1】  
使用pgbench进行压力测试, 发现瓶颈并合理优化.  
1\. pgbench用到的登陆脚本  
```  
cat login.sql   
\setrandom userid 1 20000000  
select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;  
insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());  
update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;  
```  
2\. pgbench用到的退出脚本  
```  
cat logout.sql   
\setrandom userid 1 20000000  
insert into user_logout_rec (userid,logout_time,ip) values (:userid,now(),inet_client_addr());  
update user_session set logouttime=now(),online_interval=online_interval+(now()-logintime) where userid=:userid;  
```  
3\. 压力测试  
```  
pgbench -M simple -r -c 8 -f /home/postgres/test/login.sql -j 8 -n -T 180 -h 172.16.3.33 -p 1921 -U digoal digoal  
```  
4\. 压力测试结果  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: simple  
number of clients: 8  
number of threads: 8  
duration: 180 s  
number of transactions actually processed: 62675  
tps = 348.084647 (including connections establishing)  
tps = 348.100337 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.004577        \setrandom userid 1 20000000  
        12.963789       select userid,engname,cnname,occupation,birthday,signname,email,qq from user_info where userid=:userid;  
        5.540750        insert into user_login_rec (userid,login_time,ip) values (:userid,now(),inet_client_addr());  
        4.457834        update user_session set logintime=now(),login_count=login_count+1 where userid=:userid;  
```  
5\. 瓶颈分析与优化  
压力测试中查看数据库服务器的iostat -x  