**作者：沈沉舟  
原文链接：**
在HVV期间同事提出ionCube保护PHP源码比较结实，研究了一下。
ionCube
7.x处理过的some_enc.php不含原始some.php，只有混淆过的opcode。逆向工程技术路线必须分两步走，第一步还原zend_op_array，第二步反编译。
有个付费的反编译网站
可以只买一个月，10欧元，大约80人民币，PayPal付款。提交some_enc.php，若是反编译成功，返回some.php。easytoyou应该有一个强大的私有PHP反编译器。
ionCube
7.x确实很结实，作者应该与搞逆向工程的搏斗过多年，其实现很变态。但是，再变态，只要持续投入精力，总能搞定，无非是性价比的问题，后来成功获取还原后的zend_op_array。接下来就是将zend_op_array以PHP源码形式展现，也就是反编译。
Source Insight看PHP引擎源码是必不可少的。
    PHP 7 Virtual Machine - nikic [2017-04-14]
    https://www.npopov.com/2017/04/14/PHP-7-Virtual-machine.html
这篇简介了PHP 7引擎的内部机制，不必纠缠看不懂的部分，粗略过一遍即可。有兴趣者，等写完PHP 7反汇编器，再回头重看一遍试试。事实上，我都写完PHP
7反编译器了才回头重看了一遍，怎么说呢，有些鸡肋。
PHP基本上算解释型语言，编译后有一种中间语言形式，平时说Opcode，不严格地说，就是PHP的中间语言形式。可以用VLD感性化认识Opcode。
    VLD (Vulcan Logic Dumper)
    https://github.com/derickr/vld
    Understanding Opcodes - Sara Golemon [2008-01-19]
    http://blog.golemon.com/2008/01/understanding-opcodes.html
    (作者是位女性，同时是parsekit的作者)
    More source analysis with VLD - [2010-02-19]
    https://derickrethans.nl/more-source-analysis-with-vld.html
    (VLD作者对VLD输出内容的解释，比如*号表示不可达代码，如何转dot文件成png文件)
虽然我要对付PHP 7，但很多东西是一脉相承的，PHP 5的优质文档可以看看。
    深入理解Zend执行引擎(PHP5) - Gong Yong [2016-02-02]
    http://gywbd.github.io/posts/2016/2/zend-execution-engine.html
    (讲了Opcode、Zend VM、execute_ex()、zend_vm_gen.php，推荐阅读)
    使用vld查看OPCode - Gong Yong [2016-02-04]
    https://gywbd.github.io/posts/2016/2/vld-opcode.html
    (介绍VLD最详细，推荐阅读)
在研究Opcode过程中找到几篇OPcache相关的文档。
    Binary Webshell Through OPcache in PHP 7 - Ian Bouchard [2016-04-27]
    https://www.gosecure.net/blog/2016/04/27/binary-webshell-through-opcache-in-php-7/
    Detecting Hidden Backdoors in PHP OPcache - Ian Bouchard [2016-05-26]
    https://www.gosecure.net/blog/2016/05/26/detecting-hidden-backdoors-in-php-opcache/
    PHP OPcache Override
    https://github.com/GoSecure/php7-opcache-override
    https://github.com/GoSecure/php7-opcache-override/issues/6
    (有两个010Editor模板，还有opcache_disassembler.py)
    (提到construct 2.8的问题)
Zend VM OPcache生成的some.php.bin其格式是版本强相关的，随PHP版本不同需要不同的解析方式。010
Editor自带有一个.bt，但不适用于我当时看的版本。Ian Bouchard的.bt也不适用于我当时看的版本，起初我在Ian
Bouchard的.bt基础上小修小改对付着用，后来发现需要修改的地方比较多，也不太适应Ian
Bouchard的解析思路，后来就自己重写了一个匹配版本的解析模板。
之前从未完整写过.bt，突然写这么复杂的模板，碰上很多工程实践问题，后来分享过编写经验。
    《MISC系列(51)--010 Editor模板编写入门》
    http://scz.617.cn:8/misc/202103211820.txt
    https://www.52pojie.cn/thread-1398493-1-1.html
    https://www.52pojie.cn/thread-1402549-1-1.html
Ian Bouchard还提供了基于Python
Construct库的opcache_parser_64.py，对标.bt，用于解析some.php.bin。opcache_parser_64.py同样是PHP版本强相关的，它这个可能对应PHP
7.4。
opcache_disassembler.py利用opcache_parser_64.py的解析结果进行Opcode反汇编。
    $ python2 opcache_disassembler.py -n -a64 -c hello.php.bin
    [0] ECHO('Hello World\n', None);
    [1] RETURN(1, None);
我要对付的PHP版本不是7.4，不能直接用Ian
Bouchard的.py。此外，他用Construct2.8，现在Python3上是2.10或更高，2.8和2.10有不少差别，不想四处修修补补，所以跟.bt一样，最终重写了一个匹配版本的.py。
    Construct
    https://construct.readthedocs.io/en/latest/
    https://construct.readthedocs.io/en/latest/genindex.html
    https://github.com/construct/construct/
这是我第一次接触Python Construct库，这个库充满了神秘主义哲学，文档也很差。总共从头到尾看了两遍官方文档，感觉作者自嗨得不行。
写完.py后，与.bt做了些比较，各有千秋；.bt的好处是GUI展示，在调试开发阶段很有意义；.py更灵活。设若你要解析二进制数据，建议.bt、.py各整一套，磨刀不误砍柴功，这些都是生产力工具。
反汇编zend_op_array，需要对该数据结构有一定了解，重点是opcodes[]、vars[]、literals[]、arg_info[]这几个结构数组，反汇编时无需理会try_catch_array[]。对着PHP源码以及Ian
Bouchard的实现，拿hello.php.bin练手入门，再对付复杂的.bin。
    func_0( $argv );
    ?>
假设some.php如上，some.php.bin.asm如下(PHP 7):
    main()
    [0] (95) var_2 = NEW("TestClass",)
    [1] (95) = DO_FCALL(,)
    [2] (95) = ASSIGN($tc,var_2)
    [3] (96) = INIT_METHOD_CALL($tc,"func_0")
    [4] (96) = SEND_VAR_EX($argv,)
    [5] (96) = DO_FCALL(,)
    [6] (98) = RETURN(0x1,)
    ...
    func_default($m,$hint)
    [0] (86) $m = RECV(,)
    [1] (86) $hint = RECV(,)
    [2] (88) tmp_3 = CONCAT("\$mode=",$m)
    [3] (88) tmp_2 = CONCAT(tmp_3,$hint)
    [4] (88) = ECHO(tmp_2,)
    [5] (89) var_2 = NEW("Exception",)
    [6] (89) = SEND_VAL_EX("\$mode is invalid",)
    [7] (89) = DO_FCALL(,)
    [8] (89) = THROW(var_2,)
Ian Bouchard的反汇编器本质上能达到同样效果，修改.py自定义输出效果。
    Inspector
    https://github.com/krakjoe/inspector
    (A disassembler and debug kit for PHP7)
有个Inspector，看说明，反汇编输出类似VLD输出，我没测过。推荐Ian Bouchard的实现。
即使最终目的是PHP反编译器，也应该先实现一版PHP反汇编器，前者的开发、调试过程会高度依赖后者。
写反汇编器的难点主要是对zend_op_array结构成员的理解，没学《编译原理》也无所谓。但是，写反编译器的难度突然抬升，要我从头干这事，就我现在这岁数，早没心气劲陪它玩了。
遇到困难找警察，遇到问题找hume。我就问他，那些流控语句的反编译怎么下手，没时间翻大部头理论指导，就想听他忽悠我。hume当时原话是这么说的：“个人理解，通过控制流图分析识别出if-else、循环等基本的控制结构，再加上一点语言相关的模式匹配还原”。等我完成后回头看他这个回答，一点没有忽悠我。
DY、XYM找了个现有PHP 5反编译器实现。
    https://github.com/lighttpd/xcache/blob/master/lib/Decompiler.class.php
    还原ZendGuard处理后的php代码
    https://github.com/Tools2/Zend-Decoder
    (看这个)
    Decompiling and deobfuscating a Zend Guard protected code base - [2020-03-16]
    https://bartbroere.eu/2020/03/16/decompiling-zend-guard-php/
    (作者提供了一个Docker)
原始版本好像是俄罗斯程序员写的。该反编译器本身也是用PHP开发的，不能单独使用，得跟xcache结合着用。我理解xcache是OPcache出现之前的一种非官方Opcode缓存加速机制，可能不对，无所谓，确实没有细究xcache。
后来应该是一名中国程序员利用了初版反编译引擎，用于对付ZendGuard。作者应该做了版本升级适配，看说明，适用于PHP 5.6。
我不会PHP啊，反编译引擎这么复杂的代码逻辑，又是PHP写的，看得我头大。XYM搭了个环境，让我可以用VSCode动态调试前述反编译引擎，这就好多了。
就前述PHP 5反编译器而言，从此处看起
    function &dop_array($op_array, $isFunction = false)
这是负责反编译单个zend_op_array。PHP的中间代码是以zend_op_array为单位进行组织的，一个函数对应一个zend_op_array，main()也是一个函数。
    $this->fixOpCode($op_array['opcodes'], true, $isFunction ? null : 1);
这与反编译引擎本身无关，可能是对付ZendGuard的某些混淆手段？我没细跟。
    $this->buildJmpInfo($range);
这步主要识别分支跳转类指令，为它们打上特定标记，标记跳转目标。将来会有一个识别、切分block的过程，要依赖此处所打特定标记。所以，此处不打标记不成。
    $this->recognizeAndDecompileClosedBlocks($range);
这是根据buildJmpInfo()所打标记识别、切分block。若写过其他语言的反编译器，无需再解释。若无类似经验，就得加强理解了。IDA反汇编时，若用图块形式显示，那一个个方块就是识别、切分过的block。
    class TestClass
    {