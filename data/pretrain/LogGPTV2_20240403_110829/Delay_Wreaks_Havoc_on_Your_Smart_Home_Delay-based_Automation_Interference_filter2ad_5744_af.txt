0
0
1
1
2
0
1
1
1
1
0
1
1
2
1
0
1
1
1
0
2
1
1
0
Fri.
0
1
0
0
1
1
1
1
1
Sat.
1
0
0
2
0
3
1
2
1
Sun.
1
1
1
0
1
2
2
3
1
Success Rate
1.00
1.00
0.50
0.57
1.00
1.00
1.00
1.00
0.71
0
1
0
0
0
1
2
1
1
Number of Successful Attacks on Each Day
Tue. Wed.
Thu.
TABLE VII: Results of applying jamming techniques to replicate
the attacks in Table IV.
Testbed Victim Rules
Replicable?
Victim Rules
Replicable?
T1
T2
1 & 2
6 & 7
10 & 11
14 & 15
1 & 2
5 & 6
✓
✓
✗
✓
✗
✗
3 & 4
8 & 9
12 & 13
3 & 4
8 & 9
✗
✓
✓
✓
✗
(which triggers Rule 5) as much as until the user enters the
study room (which triggers Rule 6). Note that DAI attacks are
independent in general, unless two concurrent attacks require
different delays on the same event(s) or command(s). When an
attack fails, no TCP session is disconnected and the attacker
can make attempts to perform other attacks seamlessly.
In short, the results in Table VI show that the attacker has
sufficient opportunities to launch attacks, raising severe safety
and security concerns.
D. Comparison with Jamming Attacks
Jamming does not require the victim home’s WiFi password.
We thus evaluate whether jamming can be used to construct
DAI attacks. Two jamming techniques are investigated. The
first one is WiFi micro-jamming [53], which can slightly
delay the wireless communications by switching on and off
transmitting disruptive signals in high frequency. The test
result shows that the introduced delay (10 millisecond or so)
is too short to conduct effective attacks. Another technique
[54] jams wireless communication by cramming the wireless
medium with random frames. Following this technique, we use
an Alfa AWUS036NHA wireless adapter that is powered by the
open-source code [55] to jam WiFi frames. For each attack
listed in Table IV, we use jamming to discard (i.e., infinitely
delay) the events/commands listed in the Event/Command to
Delay? column and observe the consequences.
The results in Table VII show that jamming replicates some
of the attacks on the victim rule pairs (6 out of 11). This
indicates jamming, as a low-level attack method alternative
to TCP hijacking and ARP spoofing, can be used to attain
the same effect of some DAI attacks, which is alarming. The
differences of the two attack methods are as follows. First, the
TCP-hijacking based method only delays events/commands
but does not discard them, while jamming that discards
messages can only construct some of the attack types. For
example, if a trigger event is discarded (rather than delayed),
the subscribing rule will not be triggered. Second, general
jamming frequently causes TCP timeout and disconnection
alerts. We discuss reactive jamming that does not discard
messages or cause disconnection in Section VI-B.
VI. DISCUSSION
A. Countermeasures Against DAI Attacks
First,
the smart home end users can raise the bar for
attackers to intrude into the IoT network by using strong WiFi
passwords and setting up an isolated sub-network for IoT if
they share a WiFi network with other people. Also, vendors of
IoT devices/hubs and WiFi routers should enhance the security
of their products. For example, we find that many IoT devices
and home routers are not resistant to ARP spoofing (also
verified in the IoT Inspector project [50]), although effective
defenses against ARP spoofing exist. One possible reason that
explains the wide feasibility of ARP spoofing is that TLS gives
the illusion of “sufficient” protection under traffic hijacking
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
12296
attacks, while our work illustrates the contrary. We estimate
there is a long way to go to eliminate ARP spoofing attacks.
Second, device vendors and platform providers can reduce
the intervals of TLS-protected heartbeat (a.k.a., keep-alive)
messages and enforce two-way liveness checking of event
and command messages, which can significantly reduce the
allowed delays. However, this requires IoT vendors to modify
their protocols and device firmware. Plus, more frequent
heartbeat messages lead to a higher overhead, which should
be considered carefully in the IoT design.
Third, there are known synchronization and recovery tech-
niques for handling inconsistency and disorder issues in dis-
tributed systems [56], [57], [58]. A challenge to deploy such
techniques in IoT is the lack of a central entity that has a global
view and control on heterogeneous IoT devices and multiple
proprietary IoT platforms, or a mechanism for distributed
platforms to collaboratively synchronize correct observations
on devices in the fragmented IoT ecosystem.
Fourth, researchers can design approaches to detecting
potential DAI attacks. Various techniques in the state-of-
the-art works [6], [47], [26], [5] can be utilized to extract
deployment information (such as devices, rules, and platforms)
from a given smart home system. After incorporating the
extracted information into our formal model, the observation
equivalence based technique (described in Section IV-A and
Appendix C) can be used to detect potential DAI attacks
by verifying whether any pair of rules are not CRI-resistant
in the presence of delay attacks. The detection result can
be presented to the user, who can then re-configure the
rules. An alternative mitigation strategy is to enforce security
properties/goals, which prevent devices from transitioning into
unsafe states [8].
B. Other Approaches to Introduce Delay
TCP hijacking and ARP spoofing are not the only way
to introduce delays. A more sophisticated jamming, reactive
jamming, is another promising approach. A reactive jammer
can recognize events or commands from encrypted IEEE
802.11 traffic [29] and jam selective events/commands in a
smart manner, although it requires specific hardware; that is,
by exploiting the retransmission mechanism of TCP protocol,
the jammer could block the first N − 1 retransmissions of a
target event/command and let the N-th retransmission pass,
such that TCP timeout
triggered due to the failed
first N − 1 retransmissions but will be triggered if the N-
th retransmission also fails. Thus, a delay equal to the elapsed
time from the first to the N-th retransmission is injected to the
transmission process. Different from ARP spoofing, which can
be launched from an ordinary WiFi device, reactive jamming
needs dedicated hardware with high sensitivity and computa-
tion capability to recognize and jam the target event/command
before it is delivered to the receiver. We leave the reactive-
jamming based implementation as the future work.
is not
VII. RELATED WORK
A. Synchronization in IoT
Synchronization is critical in smart home IoT systems since
IoT devices, platforms and mobile apps interact closely with
each other in smart homes. Zhou et al. [59] identify that the
working state transitions of devices, mobile apps, and clouds
are not properly safeguarded. By triggering and exploiting the
out-of-synchronization bugs, attackers can remotely harm the
system, including taking over devices and replacing them with
fake ones. This paper studies a different topic: delaying the
transmission of IoT events/commands and the exploitation.
OConnor et al. [60] utilize the design flaws in the telemetry of
IoT devices to block the delivery of sensor measurements to
IoT servers or commands to actuators, causing synchronization
problems between devices and clouds. In contrast
to the
jamming or discarding-message based attacks [60], our work
exploits delays, and does not raise alarms at any layers of the
IoT protocol stack or rely on implementation bugs.
B. IoT Security and Privacy
IoT Security and privacy have been studied in various
aspects, such as platforms, apps, devices, and data. Fernandes
et al. [61] and Mi et al. [62] unveil the vulnerabilities on
prominent IoT platforms, SmartThings and IFTTT, respec-
tively. The IoT app-level security is intensively studied by
recent work [63], [38], [39], [64], [65]. Regarding IoT devices,
solutions are proposed to enhance the authentication [66], [67],
access control [68], [69], etc. Researchers also employ data-
driven techniques to detect device anomalies [70], [71], [72].
Fu et al. [72] design HAWatcher, which utilizes rich semantic
information to mine correlations in smart environments, and
achieves highly-accurate and explainable anomaly detection.
A number of approaches [73], [51], [74], [75] are designed
to protect privacy-sensitive IoT data. Chi et al. [51] propose
PFirewall, which enforces data-minimization policies to sig-
nificantly reduce the disclosure of IoT data and protect users’
privacy from IoT platforms, without changing IoT devices or
platforms. Despite the vast amount of work, little research
has been done to uncover the unique threats in multi-platform
systems. Yuan et al. [76] reported the flaws in IoT device
access delegation across multiple IoT clouds. We are the
first to study unique delay-derived security threats in multi-
platform systems.
C. Cross-Rule Interference Problems
Cross-Rule Interference (CRI) problems have attracted
much attention of IoT security researchers. A lot of works
are engaged to categorize [5], [9], understand [40] and de-
tect [5], [6], [7], [9], [77], [8], [10] the CRI problems. Our
prior work [4], [5] is the earliest one that comprehensively
categorizes and formally describes CRI threats. In these works,
CRI problems are caused by users who misconfigure the
automation rules for their own smart homes. However, all these
works only consider CRI in single-platform systems, implicitly
assuming consistent and order-preserving observations on the
device states. Although IoTGuard [8] and IoTIE [11] configure
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
13297
rules on two platforms, SmartThings and IFTTT, for evalua-
tion, they do not take multi-platform or its unique features into
consideration, while analyzing the CRI problems. Moreover,
both works convert IFTTT rules into equivalent SmartThings
apps, and use SmartThings to run all the rules; essentially, they
still make the same assumptions. Our work is the first that
studies CRI problems in more complex but realistic system
models, where multiple event/command transmission paths
and/or multiple platforms coexist. Our work is also the first
that introduces the delay factor into the investigation of the
CRI problem, and it reveals and demonstrates a family of new
attacks that are ignored by existing CRI detection solutions.
VIII. RESPONSIBLE DISCLOSURE
We have reported the event/command delay attacks and
possible exploits to IoT vendors: Google, SimpliSafe, Ap-
ple (HomeKit), Ring and SmartThings. Google, SimpliSafe
and Ring acknowledged the problem. Google and SimpliSafe
expressed they would conduct a bug/vulnerability fixing pro-
cedure with the product team. Ring said they had planned a
mitigation that make side channel attacks more difficult. Apple
regards the reported attacks as “expected behavior and working
as designed”, although Apple’s HomeKit allows the longest
delay window (tens of minutes or even longer).
IX. CONCLUSION
We studied unique cross-rule interference (CRI) problem
due to the inconsistency and disorder issues in single-platform
multi-path and multi-platform smart home systems. We un-
covered that selective messages delay attacks have detrimental
impacts on smart home automation, causing various CRI prob-
lems that cannot be detected by existing detectors. We revealed
seven categories of such attacks, referred to as Delay-based
Automation Interference (DAI) attacks, which were analyzed
and demonstrated using two smart homes. The evaluation
results show that DAI attacks of all the seven categories can
be launched, and an attacker can conduct DAI attacks with
a high success rate, without raising alerts in any layer of the
current IoT protocol stack.
ACKNOWLEDGEMENT
This work was supported in part by the US National
Science Foundation (NSF) under grants CNS-1828363, CNS-
2204785, CNS-2205868, CNS-1856380, CNS-2016415, and
CNS-2107093.
REFERENCES
[1] “Apple HomeKit,” https://www.apple.com/ios/home/, 2020.
[2] “SmartThings,” https://www.smartthings.com/, 2020.
[3] “Amazon Alexa,” https://developer.amazon.com/en-US/alexa/devices/
smart-home-devices, 2020.
[4] H. Chi, Q. Zeng, X. Du, and J. Yu, “Cross-app interference threats in
smart homes: Categorization, detection and handling,” arXiv preprint
arXiv:1808.02125, 2018.
[5] ——, “Cross-app interference threats in smart homes: Categorization,
detection and handling,” in 50th Annual IEEE/IFIP International Con-
ference on Dependable Systems and Networks (DSN), 2020.
[6] Z. B. Celik, P. McDaniel, and G. Tan, “Soteria: Automated iot safety
and security analysis,” in Usenix Security Symposium, 2018.
[7] D. T. Nguyen, C. Song, Z. Qian, S. V. Krishnamurthy, E. J. Colbert,