its parameters, computed over the entries as integrity check.
Only symmetric and private keys can be encrypted in BKS,
with Triple-DES in CBC mode. The key derivation schema is
taken from PKCS#12 v1.0, using SHA1 as hashing function,
a random number of iterations between 1024 and 2047 which
is stored for each entry and a 160 bit salt.
The integrity of the keystore is provided by an HMAC
using the same key derivation scheme used for encryption and
applied to the integrity password. For backward compatibil-
ity, the current version of BKS still allows to load objects
encrypted under a buggy PBE mechanism used in previous
versions of the keystore1. If the key is recovered using an old
mechanisms, it is immediately re-encrypted with the newer
PBE scheme.
UBER: UBER shares most of its codebase with BKS, thus
it supports the same types of entries and PBE. Additionally,
it provides an extra layer of encryption for the entire keystore
ﬁle, which means that all metadata around the keys and
certiﬁcates are encrypted as well. The PBE mechanism used
for encrypting the ﬁle is Twoﬁsh in CBC mode with a key size
of 256 bits. The KDF is PKCS#12 v1.0 with SHA1 using a
160 bits salt and a random number of iterations in the range
1024 and 2047.
The integrity of the keystore is checked after successful
decryption using the store password. The plaintext consists of
the keystore entries followed by their SHA1 checksum. UBER
recomputes the hash of the keystore and compares it with the
stored digest.
1https://github.com/bcgit/bc-java/blob/master/prov/src/main/java/org/
bouncycastle/jce/provider/BrokenPBE.java
BCFKS: BCFKS is a new FIPS-compliant [53] keystore
introduced in the version 1.56 of Bouncy Castle2 offering
similar features to UBER. This keystore provides support for
secret keys in addition to asymmetric keys and certiﬁcates.
The entire keystore contents is encrypted using AES in
CCM mode with a 256 bits key, so to provide protection
against introspection. After the encrypted blob, the ﬁle contains
a block with a HMAC-SHA512 computed over the encrypted
contents to ensure the keystore integrity. The store password
is used to derive the two keys for encryption and integrity.
All key derivation operations use PBKDF2 with HMAC-
SHA512 as pseudorandom function, 512 bits of salt and
1024 iterations. Each key entry is separately encrypted with
a different password using the same algorithm for the key-
store conﬁdentiality, while this possibility is not offered for
certiﬁcates.
BCPKCS12: The BCPKCS12 keystore aims to provide
a PKCS#12-compatible implementation. It shares the same
algorithms and default parameters for key derivation, crypto-
graphic schemes and ﬁle structure of the Oracle JDK version
detailed in Section IV-A. Compared to Oracle, the Bouncy
Castle implementation lacks support for symmetric keys and
the possibility to protect keys with different passwords, since
all the entries and certiﬁcates are encrypted under the store
password. The BC provider also offers a variant of the
PKCS#12 keystore that allows to encrypt certiﬁcates using the
same PBE of private keys, that is Triple-DES in CBC mode.
C. Keystores Adoption
We have analyzed 300 Java projects supporting keystores
that are hosted on Github to estimate the usage of the imple-
mentations examined in this paper. Applications range from
amateur software to well-established libraries developed by
Google, Apache and Eclipse.
We searched for occurrences of known patterns used to
instantiate keystores in the code of each project. We have found
that JKS is the most widespread keystore with over 70% of
the applications supporting it. PKCS12 is used in 32% of the
analyzed repositories, while JCEKS adoption is close to 10%.
The Bouncy Castle keystores UBER and BCPKCS12 are used
only in 3% of the projects, while BKS can be found in about
6% of the examined software. Finally, since BCFKS is a recent
addition to the Bouncy Castle library, none of the repositories
is supporting it.
D. Summary
In Table I we summarize the features and the algorithms
(rows) offered by the keystore implementations (columns)
analyzed in this section. Table Ia does not contain the row
“Store Encryption” since none of the JDK keystores provides
protection against introspection.
To exemplify, by reading Table Ia we understand that the
JCEKS keystore of the SunJCE provider relies on a custom
PBE mechanism based on MD5 using only 20 iterations to
derive the Triple-DES key for the encryption of keys. The
mark shows that the keystore supports secret keys, while
denotes that certiﬁcates cannot be encrypted.
2https://github.com/bcgit/bc-java/commit/80fd6825
6
TABLE I: Summary of the keystores.
(a) Oracle JDK 8u144 and below.
JKS
Sun
JCEKS
SunJCE
Provider
Support for secret keys
KDF
Salt
Iterations
Cipher
Key size
KDF
Salt
Iterations
Cipher
Key size
KDF
Salt
Iterations
Mechanism
Keys PBE
Certiﬁcates
PBE
Store
Integrity
* since Java 8
Custom (SHA1)
160b
-
Stream cipher
-
Custom (MD5)
64b
20
3DES (CBC)
192b
SHA1 with
password
SHA1 with
password
PKCS12
SunJSSE
*
PKCS12 (SHA1)
160b
1024
3DES (CBC)
192b
PKCS12 (SHA1)
160b
1024
RC2 (CBC)
40b
PKCS12 (SHA1)
160b
1024
HMAC (SHA1)
(b) Bouncy Castle 1.57 and below.
BKS
UBER
BCFKS
Provider
Bouncy Castle
Bouncy Castle
Bouncy Castle
Support for secret keys
BCPKCS12
Bouncy Castle
PKCS12 (SHA1)
160b
1024–2047
3DES (CBC)
192b
PKCS12 (SHA1)
160b
1024–2047
3DES (CBC)
192b
PBKDF2 (HMAC-SHA512)
512b
1024
AES (CCM)
256b
PKCS12 (SHA1)
160b
1024
3DES (CBC)
192b
PKCS12 (SHA1)
160b
1024–2047
Twoﬁsh (CBC)
256b
SHA1
decrypt
after
PBKDF2 (HMAC-SHA512)
512b
1024
AES (CCM)
256b
PBKDF2 (HMAC-SHA512)
512b
1024
HMAC (SHA512)
PKCS12 (SHA1)
160b
1024
RC2 / 3DES (CBC)
40b / 192b
PKCS12 (SHA1)
160b
1024
HMAC (SHA1)
KDF
Salt
Iterations
Cipher
Key size
KDF
Salt
Iterations
Cipher
Key size
KDF
Salt
Iterations
Cipher
Key size
Keys PBE
Certiﬁcates
PBE
Store
Encryption
Store
Integrity
KDF
Salt
Iterations
Mechanism
PKCS12 (SHA1)
160b
1024–2047
HMAC (SHA1)
V. ATTACKS
In the previous section, we have shown that the analyzed
keystores use very diverse key derivation functions and crypto-
graphic mechanisms and, in several cases, they do not adhere
to standards or use obsolete and ad-hoc mechanisms. We now
discuss how this weakens the overall security of the keystore
and enables or facilitates attacks. In particular, we show that
keystores using weak or ad-hoc implementations for password-
based encryption or integrity checks open the way to password
brute-forcing. During the in-depth analysis of keystores, we
have also found security ﬂaws that can be exploited in practice
to mount denial of service and code execution attacks.
Attacks in this section are organized according to the
security properties violated, as deﬁned in Section III-A. For
each attack we provide a detailed description discussing the
attacker settings and the rules that are not followed by the
keystore implementation (cf. Section III-B). We conclude with
some general security considerations that are not speciﬁc to
any particular attack.
Table II provides a high-level overview of the properties
which are guaranteed by the analyzed keystores with respect to
the attacks presented in this section. We consider versions of
Oracle JDK and Bouncy Castle before and after disclosing our
ﬁndings to the developers. Speciﬁcally, we refer to JDK 8u144
and 8u152 for Oracle, while version 1.57 of Bouncy Castle is
compared against the development repository as of November
28, 2017.3 We use the symbol ¨ to point out improvements in
newer versions. Details of the changes are listed in Section VII.
symbol denotes that a property is satisﬁed by the
The
keystore under any attacker setting and the implementation
adhere to the relevant design rules listed in Section III-B. We
3https://github.com/bcgit/bc-java/tree/8ed589d
7
known plaintext ← 0x30(cid:107) length(E)
test bytes ← known plaintext ⊕ E1
for password in passwords do
Algorithm 1 JKS 1-block Crack
1: procedure JKS 1BLOCKCRACK(Salt, E1..n, CK)
2:
3:
4:
5:
6:
7:
8:
9:
10:
return password
W1 ← SHA1(password(cid:107) Salt)
if W1 = test bytes then
K ← DECRYPT(Salt, E, password)
checksum ← SHA1(password(cid:107) K)
if CK = checksum then
use when no clear attack can be mounted but design rules are
not completely satisﬁed, e.g. a legacy cipher like Triple-DES is
used. The
symbol indicates that the property is broken under
the standard attacker model. When a property is broken only
under a speciﬁc setting Sx, we report it in the table as
Sx. If
a more powerful attack is enabled by additional settings, we
clarify in the footnotes.
As an example, consider the system integrity property (P3)
in the JCEKS keystore: up to JDK 8u144 included, write
capabilities (S1) allow to DoS the application loading the
keystore; when integrity and key conﬁdentiality passwords are
known (S2 and S3), the attacker can also achieve arbitrary
code execution on the system (cf. note 3 in the table). The