## PostgreSQL CSVLOG monitor script for nagios  
### 作者                       
digoal                        
### 日期                        
2013-02-22                                                  
### 标签    
PostgreSQL , 监控 , nagios , check_postgres , customize nagios script , csvlog                     
----    
## 背景                  
postgresql.conf配置 :   
```  
要求开启csvlog  
log_destination = 'csvlog'  
logging_collector = on  
log_directory = 'pg_log'  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'  
log_file_mode = 0600  
log_truncate_on_rotation = on  
log_rotation_age = 1d  
log_rotation_size = 10MB  
```  
脚本如下 :   
```  
vi /usr/local/nagios/libexec/check_pg_csvlog.sh  
#!/bin/bash  
# 环境变量  
export LANG=en_US.utf8  
export PGHOME=/opt/pgsql  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGPASSFILE=/etc/.pgpass  
if [ $# -ne 1 ]; then  
  echo "USE $0 summary|detail"  
  exit 0  
else  
  PAR1=$1  
  if [ $PAR1 != "summary" ] && [ $PAR1 != "detail" ]; then  
    echo "USE $0 summary|detail"  
    exit 0  
  fi  
fi  
create_csvlogtable() {  
echo $CONN_INFO  
VER=`psql -q -t $CONN_INFO -c "select '9' from (select substr(version(),12,1) as ver) t where ver::int>=9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
# PostgreSQL 9+  
IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
if [ $IS_STDBY -ge 1 ]; then  
  return 0  
fi  
psql -q -t $CONN_INFO =9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
  IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
  if [ $IS_STDBY -ge 1 ]; then  
    return 0  
  fi  
fi  
if [ $VER -ge 1 ]; then  
psql -q -t $CONN_INFO =9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
  IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
  if [ $IS_STDBY -ge 1 ]; then  
    return 0  
  fi  
fi  
CNT=`psql -q -t $CONN_INFO -c "select error_severity from postgres_log where error_severity<>'LOG' group by error_severity;"|grep -c -E "FATAL|ERROR"`  
if [ $CNT -ge 1 ]; then  
  result=2  
  if [ $PAR1 == "summary" ]; then  
    psql -q -t $CONN_INFO 'LOG'   
      group by inet_server_addr(),inet_server_port(),error_severity,sql_state_code   
      order by count(1) desc;  
EOF  
  fi  
  if [ $PAR1 == "detail" ]; then  
# detail的建议按照单库输出,否则太多  
    psql -x -q -t $CONN_INFO 'LOG'   
      order by log_time desc limit $OLINE;  
EOF  
  fi  
else  
  return 0  
fi  
}  
# global result  
result=0  
# set env  
. /usr/local/nagios/etc/check_pg_env.sh  
# monitor  
# detail监控输出最近20条详细信息.  
OLINE=20  
echo $OLINE  
for i in "HZ1_CHECK_PG_CSVLOG_1"  
do  
  eval CONN_INFO="$"$i  
  create_csvlogtable  
  load_csvlog  
  analyze_csvlog  
done  
# exit global proc  
exit $result  
```  
修改执行权限 :   
```  
chmod 555 /usr/local/nagios/libexec/check_pg_csvlog.sh  
```  
修改nagios配置 :   
```  
vi /usr/local/nagios/etc/nrpe.cfg  
command[check_pg_csvlog]=/usr/local/nagios/libexec/check_pg_csvlog.sh summary  
```  
重启xinetd服务 :   
```  
service xinetd restart  
```  
直接执行的结果如下 :   
```  
/usr/local/nagios/libexec/check_pg_csvlog.sh summary  
```  
## 其他  
1\. 由于数据需要从csvlog导入数据库表, 所以不推荐频繁调用这个脚本.  
2\. 对于9.1以上的系统, 可以考虑使用file_fdw创建外部表, 省去导入过程.  
3\. 所有8.4以上系统都支持的直接读取文件的函数, pg_read_file(text, bigint, bigint).   
4\. 这个脚本更偏向查看前一天的统计.  
如果要做成实时告警的方式, 需要调整一下策略.  
例如取最近1个小时的ERROR和FATAL记录数作为告警阈值.   
每个系统的频繁程度不一样, 阈值也不一样.  
修改后的nagios check脚本如下 :   
```  
#!/bin/bash  
# 环境变量  
export LANG=en_US.utf8  
export PGHOME=/opt/pgsql  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGPASSFILE=/etc/.pgpass  
if [ $# -ne 0 ]; then  
  echo "USE $0"  
  exit 0  
fi  
create_csvlogtable() {  
# debug  
# echo $CONN_INFO  
VER=`psql -q -t $CONN_INFO -c "select '9' from (select substr(version(),12,1) as ver) t where ver::int>=9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
# PostgreSQL 9+  
IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
if [ $IS_STDBY -ge 1 ]; then  
  return 0  
fi  
psql -q -t $CONN_INFO =9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
  IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
  if [ $IS_STDBY -ge 1 ]; then  
    return 0  
  fi  
fi  
if [ $VER -ge 1 ]; then  
psql -q -t $CONN_INFO = now() loop  
v_sql := \$_\$COPY postgres_log FROM '\$_\$||v_dir||'/'||v_filename||\$_\$' WITH csv\$_\$;  
raise notice '%', v_sql;  
execute v_sql;  
end loop;  
end;  
\$\$;  
EOF  
else  
# PostgreSQL 8.x 不支持do language, 这里忽略导入  
echo "PostgreSQL 8.x"  
fi  
}  
analyze_csvlog() {  
VER=`psql -q -t $CONN_INFO -c "select '9' from (select substr(version(),12,1) as ver) t where ver::int>=9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
  IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
  if [ $IS_STDBY -ge 1 ]; then  
    return 0  
  fi  
fi  
# 严重警告  
CNT=`psql -q -t $CONN_INFO -c "select 'GET_IT' from postgres_log where error_severity<>'LOG' having count(*) >= $CRIT_CNT;"|grep -c "GET_IT"`  
if [ $CNT -ge 1 ]; then  
  cresult=1  
    psql -F ',' -A -q -t $CONN_INFO 'LOG'   
      group by inet_server_addr(),inet_server_port(),error_severity,sql_state_code   
      order by count(1) desc;  
EOF  
return 0  
fi  
# 警告  
CNT=`psql -q -t $CONN_INFO -c "select 'GET_IT' from postgres_log where error_severity<>'LOG' having count(*) >= $WARN_CNT;"|grep -c "GET_IT"`  
if [ $CNT -ge 1 ]; then  
  wresult=1  
    psql -F ',' -A -q -t $CONN_INFO 'LOG'   
      group by inet_server_addr(),inet_server_port(),error_severity,sql_state_code   
      order by count(1) desc;  
EOF  
return 0  
fi  
}  