者应该试着再读一次（again）。这种行为方式称为轮询（Poll），调用者只是查询一下，而不是
表示本来应该阻塞在这里（would block，虚拟语气）
时没有数据可读就返回-1,
如果在open
是做了很多无用功。
例 28.3.非阻塞读终端
while(1)
while(1).
一个设备时指定了o_NoONBLock标志，read/write就不会阻塞。以read为例，
#define MSG_TRY "try again\n"
#include 
#include
#include
#include 
 设备1有数据到达时可能不能及时处理，
if（设备1有
以后要学习的select(2)函数可以阻塞地同时监视多个设备，还可以设定阻
，如果所有设备都一直没有数据到达，
处理数据；
处理数据；
同时置errno为EWOULDBLOCK（或者EAGAIN，
数据到
，目前我们学过的可能引起阻塞的设备只有终端，
 就不会做无用功了。在使用非阻塞I/O时，
 事实上并没有阻塞而是直接返回错误，调月
，读标准输入是阻塞的。我们可以重新打开
，最长需延迟n秒才能处理，而且反复查询
，调用者需要反复查询做无用功，如果
，而是每延迟等待一会儿来查询一下
这两个宏定义的值相同）
所以我们用终端来
如果设备暂
通常不
28
---
## Page 530
迟较小。
以下是用非阻塞IO实现等待超时的例子。既保证了超时退出的逻辑又保证了有数据到达时处理延
例 28.4.非阻塞读终端和等待超时
strlen(MSG_TRY));
#define
o#
#include
strlen(MSG_TRY));
int main(void)
#include
tryagain:
int main(void)
if(i==5)
P
5
char buf[10];
return 0;
write(STDOUT_FILENO,
char buf[10];
for(i=0;
(int
u
char buf[10];
= read(STDIN_FILENO， buf， 10);
Lags = 
int 
fcntl(STDIN_FILENO，F_GETFL);
cmd);
NONBLOCK;
全国嵌入式人才培训基地
第 28章文件与VO
write(STDOUT_FILENO, MSG_TRY,
sleep(1)
"fcntl")
goto tryagain;
6. fcntl
）：
，可以用fcnti函数改变一个已打开的文
而我们需要
533
下一
在
---
## Page 534
时并不知道标准输入被重定向了。
件描述符O（也就是标准输入）的File Status Flag，
Shell在执行a.out时将它的标准输入重定向到/dev/tty,
是o_RDONLY。注意，Shell的重定向语法不属于程序的命令行参数，
运行该程序的几种情况解释如下。
打开文件，然后用fcnti的F_GETFL命令取出File Status Flag并打印。
以下程序通过命令行的第一个参数指定一
read only
S
int main(int argc,
#include
#include
./a.out 0 
(val 
(argc
return 0;
write(STDOUT_FILENO, buf, n);
0;
printf(
&O_APPEND)
break;
exit(1);
printf(
exit(i);
fputs(
.h>
 char *argv[])
!(
("usage: a.out \n", stderr);
exit(l);
perror("read stdin");
.............
"fcntl
nonblocking");
 append");
 重定向由Shel解释，
一个文件描述符,
 mode\n", stderr);
并且是只读的。argv[1]是0，
 同时利用Shell的重定向功能在该描述符上
，在启动程序时已经生效，
，这个命行只有两个参
，atoi(argv[l]));
 程序在运行
结果
因此取出文
534
---
## Page 535
通过fcnti设置的都是当前进程如何访问设备或文件的访问控制属性，例如读、写、追加、非阻
除了F_GETFL和r_SETFL命令之外，fcnt1还有很多命令做其它操作，
准错误输出）也重定向到和标准输出（用&1标识）相同的文件，即/dev/nul1，如下图所示。
首先将某个命令command的标准输出重定向到/dev/null，然后将该命令可能产生的错误信息（标
以出现在重定向符号右边，例如：
我们看到一种新的Shel重定向语法，
述符5的File Status Flag，发现是可读可写的。
Shell在执行a.out时在它的文件描述符5上打开文件temp.foo，并且是可读可写的。程序取出文件描
出文件描述符2的File Status Flag，发现是只写和追加方式的。
Shell在执行a.out时将它的标准错误输出重定向到文件temp.foo，并且是只写和追加方式。程序取
符1的File Status Flag，
Shell在执行a.out时将它的标准输出重定向到文件temp.foo，并且是只写的。程序取出文件描述
在Shell脚本中很常见。
屏幕上没有任何输出，
/dev/nul1设备文件只有一个作用，
方式写入文件，
文件描述符上打开文件，
W
2
L
图 28.3.重定向之后的文件描述符表
S
S
write
S
S
command >
:/a.out 5 5<>temp.fo0
:/a.out 2 2>>temp.fo0
cat temp.foo
./a.out 1 > temp.foo
，注意2和>>之间不能有空格，否则2就被解释成命令行参数了。文件描述符数字还可
only
，既不打印正常信息也不打印错误信息，让命令安静地执行，
注意，
 /dev/null 2>&l
/dev/null
 发现是只写的，于是打印write only，但是打印不到屏幕上而是打印
 例如2>>temp.foo表示将标准错误输出重定向到文件temp.foo并且以追加
 文件描述符数字写在重定向符号右边需要加&号，否则就被解释成文
，往它里面写任何数据都被直接丢弃。因此保证了该命令执行时
，如果在、>>、
<>前面添一个数字，
 例如设置文件记录锁等。可以
，该数字就表示在哪个
这种写法 
535
---
## Page 536
个函数的作用。
介绍的iocti函数用于设置某些设备本身的属性，
塞、加锁等，但并不设置文件或设备本身的属性，
5. Iseek
全国嵌入式人才培训基地
起始页
上一级
 例如串口波特率、终端窗口大小，注意区分这两
 例如文件的读写权限、串口波特率等。
，下一节要
7. ioctl
下一页
---
## Page 537
在图形界面的终端里多次改变终端窗口的大小并运行该程序，观察结果。
以下程序使用TIOCGWINSZ命令获得终端设备的窗口大小。
d是某个设备的文件描述符。
通过read读取，而A/D转换的精度和工作频率通过iocti设置。
是I/O操作的主体，而iocti命令传送的是控制信息，其中的数据是辅助的数据。例如，在串口线
ioct1用于向设备发控制和配置命令，
7.ioctl 请点评
6. fcntl
收发数据通过read/write操作,
贝
int main(void)
#include 
#include
#include 
int ioctl(int d, int request,
#include 
return 0;
printf("%d rows, %d columns\n", size.ws_row, size.ws_col);
if (isatty(STDOUT_FILENO） == O)
struct winsize size;
，称为Out-of-band数据。也就是说，
exit(l);
 perror(
exit（l）i
request是iocti的命令,
，有些命令也需要读写一些数据，但这些数据是不能
全国嵌入式人才培训基地
全国嵌入式人才培训基地
第 28章文件与VO
···);
7. ioctl 
起始页
上一级
可变参数取决于request，
，read/write读写的数据是in-band数据，
 通常是一个指向变
8. mmap
下一页
下一页
---
## Page 538
prot参数有四种取值:
件的长度。off参数是从文件的什么位置开始映射，必须是页大小的整数倍（在32位体系统结构上
该函数各参数的作用图示如下:
件的读写可以直接用指针来做而不需要read/write函数。
mmap可以把磁盘文件的一部分直接映射到内存，这样文件中的位置直接就有对应的内存地址，对文
8. mmap 请点评
通常是4K）。filedes是代表该文件的描述符。
始映射。建立映射后,
如果addr参数为NULL，
返回地址
图28.4.mmap函数
则给内核一
off
#include 
int munmap(void *addr, size_t len);
len
 off);
一个提示，
内存地址空间
真正的映射首地址通过返回值可以得到。len参数是需要映射的那一部分文
内核会自己在进程地址空间中选择合适的地址建立映射。
 应该从什么地址开始映射，
磁盘文件
全国嵌入式人才培训基地
第28章文件与IVO
 8. mmap 
√
mmap映射的部分
，内核会选择addr之上的某个合适的地址开
len
。如果addr不
538
下一页
---
## Page 539
然后再查看这个文件的内容：
行读写）。
现在用如下程序操作这个文件（注意，把ra关掉并不影响该文件已建立的映射，仍然可以对文件进
下面做一个简单的实验。
内存会自动解除，
flag参数有很多种取值，这里只讲两种，其它取值可查看mmap(2）
·MAP_PRIVATE多个进程对同一个文件的映射不是共享的，
·MAP_SHARED多个进程对同一个文件的映射是共享的，
·PROT_NONE表示映射的这一段不可访问
·PROT_WRITE表示映射的这一段可写
·PROT_READ表示映射的这一段可读
·PROT_EXEC表示映射的这一段可执行，例如映射共享库
改，另一个进程并不会看到这种变化，也不会真的写到文件中去。
$ od -txl -tc hello
int main(void)
#include
#include
0000006
（编辑该文件的内容为"hello"）
Vi..
hell0
tx1
p[0]
也可以调用munmap解除映射。munmap成功返回0，
t
e
exit(1);
<0)
exit(1);
perror("open hello");
6c 6f 0a
6);