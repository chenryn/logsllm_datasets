fffff800`d05276e4 nt!CcDbgAdditionalPagesQueuedCount =  
fffff800`d0543370 nt!CcDbgFoundAsyncReadThreadListEmpty =  
fffff800`d054336c nt!CcDbgNumberOfCcUnmapInactiveViews =  
fffff800`d05276e0 nt!CcDbgSkippedReductions =  
fffff800`d0542e04 nt!CcDbgDisableDAX =  
... 
Some systems may show differences in variable names due to 32-bit versus 64-bit imple-
mentations. The exact variable names are irrelevant in this experiment—focus instead on the 
methodology that is explained. Using these variables and your knowledge of the VACB array 
header data structures, you can use the kernel debugger to list all the VACB array headers. 
EXPERIMENT: Looking at VACBs and VACB statistics
The cache manager internally keeps track of various values that are useful to developers and 
support engineers when debugging crash dumps. All these debugging variables start with the 
CcDbg prefix, which makes it easy to see the whole list, thanks to the x command:
1: kd> x nt!*ccdbg*
fffff800`d052741c nt!CcDbgNumberOfFailedWorkQueueEntryAllocations = 
fffff800`d05276ec nt!CcDbgNumberOfNoopedReadAheads = 
fffff800`d05276e8 nt!CcDbgLsnLargerThanHint = 
fffff800`d05276e4 nt!CcDbgAdditionalPagesQueuedCount = 
fffff800`d0543370 nt!CcDbgFoundAsyncReadThreadListEmpty = 
fffff800`d054336c nt!CcDbgNumberOfCcUnmapInactiveViews = 
fffff800`d05276e0 nt!CcDbgSkippedReductions = 
fffff800`d0542e04 nt!CcDbgDisableDAX = 
... 
Some systems may show differences in variable names due to 32-bit versus 64-bit imple-
mentations. The exact variable names are irrelevant in this experiment—focus instead on the 
methodology that is explained. Using these variables and your knowledge of the VACB array 
header data structures, you can use the kernel debugger to list all the VACB array headers. 
CHAPTER 11 Caching and file systems
579
The CcVacbArrays variable is an array of pointers to VACB array headers, which you dereference 
to dump the contents of the _VACB_ARRAY_HEADERs. First, obtain the highest array index:
1: kd> dd nt!CcVacbArraysHighestUsedIndex  l1 
fffff800`d0529c1c  00000000
And now you can dereference each index until the maximum index. On this system (and this is 
the norm), the highest index is 0, which means there’s only one header to dereference:
1: kd> ?? (*((nt!_VACB_ARRAY_HEADER***)@@(nt!CcVacbArrays)))[0] 
struct _VACB_ARRAY_HEADER * 0xffffc40d`221cb000 
+0x000 VacbArrayIndex   : 0 
+0x004 MappingCount     : 0x302 
+0x008 HighestMappedIndex : 0x301
+0x00c Reserved
: 0
If there were more, you could change the array index at the end of the command with a 
higher number, until you reach the highest used index. The output shows that the system has 
only one VACB array with 770 (0x302) active VACBs. 
Finally, the CcNumberOfFreeVacbs variable stores the number of VACBs on the free VACB list. 
Dumping this variable on the system used for the experiment results in 2,506 (0x9ca):
1: kd> dd nt!CcNumberOfFreeVacbs  l1 
fffff800`d0527318  000009ca
As expected, the sum of the free (0x9ca—2,506 decimal) and active VACBs (0x302—770 
decimal) on a 64-bit system with one VACB array equals 3,276, the number of VACBs in one VACB 
array. If the system were to run out of free VACBs, the cache manager would try to allocate a new 
VACB array. Because of the volatile nature of this experiment, your system may create and/or 
free additional VACBs between the two steps (dumping the active and then the free VACBs). This 
might cause your total of free and active VACBs to not match exactly 3,276. Try quickly repeating 
the experiment a couple of times if this happens, although you may never get stable numbers, 
especially if there is lots of file system activity on the system.
Per-file cache data structures
Each open handle to a file has a corresponding file object. (File objects are explained in detail in 
Chapter 6 of Part 1, “I/O system.”) If the file is cached, the file object points to a private cache map struc-
ture that contains the location of the last two reads so that the cache manager can perform intelligent 
read-ahead (described later, in the section “Intelligent read-ahead”). In addition, all the private cache 
maps for open instances of a file are linked together.
Each cached file (as opposed to file object) has a shared cache map structure that describes the state 
of the cached file, including the partition to which it belongs, its size, and its valid data length. (The 
function of the valid data length field is explained in the section “Write-back caching and lazy writing.”) 
The shared cache map also points to the section object (maintained by the memory manager and which 
describes the file’s mapping into virtual memory), the list of private cache maps associated with that 
The CcVacbArrays variable is an array of pointers to VACB array headers, which you dereference 
to dump the contents of the _VACB_ARRAY_HEADERs. First, obtain the highest array index:
1: kd> dd nt!CcVacbArraysHighestUsedIndex  l1
fffff800`d0529c1c  00000000
And now you can dereference each index until the maximum index. On this system (and this is 
the norm), the highest index is 0, which means there’s only one header to dereference:
1: kd> ?? (*((nt!_VACB_ARRAY_HEADER***)@@(nt!CcVacbArrays)))[0]
struct _VACB_ARRAY_HEADER * 0xffffc40d`221cb000
+0x000 VacbArrayIndex   : 0
+0x004 MappingCount     : 0x302
+0x008 HighestMappedIndex : 0x301
+0x00c Reserved
: 0
If there were more, you could change the array index at the end of the command with a 
higher number, until you reach the highest used index. The output shows that the system has 
only one VACB array with 770 (0x302) active VACBs. 
Finally, the CcNumberOfFreeVacbs variable stores the number of VACBs on the free VACB list. 
Dumping this variable on the system used for the experiment results in 2,506 (0x9ca):
1: kd> dd nt!CcNumberOfFreeVacbs  l1
fffff800`d0527318  000009ca
As expected, the sum of the free (0x9ca—2,506 decimal) and active VACBs (0x302—770 
decimal) on a 64-bit system with one VACB array equals 3,276, the number of VACBs in one VACB 
array. If the system were to run out of free VACBs, the cache manager would try to allocate a new 
VACB array. Because of the volatile nature of this experiment, your system may create and/or 
free additional VACBs between the two steps (dumping the active and then the free VACBs). This 
might cause your total of free and active VACBs to not match exactly 3,276. Try quickly repeating 
the experiment a couple of times if this happens, although you may never get stable numbers, 
especially if there is lots of file system activity on the system.
580 
CHAPTER 11 Caching and file systems
file, and any VACBs that describe currently mapped views of the file in the system cache. (See Chapter 
5 of Part 1 for more about section object pointers.) All the opened shared cache maps for different files 
are linked in a global linked list maintained in the cache manager’s partition data structure. The rela-
tionships among these per-file cache data structures are illustrated in Figure 11-8.
Shared cache map
Entry 3
List of private
cache maps
Open count
File size
Valid data length
Entry 0
Entry 1
Entry 2
Section object pointers
File object
File object
Private cache map
Read-ahead information
Pointer to 
additional VACB 
index array
Next private
cache map
for this file
Next shared
cache map
VACB
VACB index
array
VACB index array
FIGURE 11-8 Per-file cache data structures.
When asked to read from a particular file, the cache manager must determine the answers to 
two questions:
1.
Is the file in the cache?
2.
If so, which VACB, if any, refers to the requested location?
In other words, the cache manager must find out whether a view of the file at the desired address is 
mapped into the system cache. If no VACB contains the desired file offset, the requested data isn’t cur-
rently mapped into the system cache.
To keep track of which views for a given file are mapped into the system cache, the cache manager 
maintains an array of pointers to VACBs, which is known as the VACB index array. The first entry in the 
VACB index array refers to the first 256 KB of the file, the second entry to the second 256 KB, and so 
on. The diagram in Figure 11-9 shows four different sections from three different files that are currently 
mapped into the system cache.
CHAPTER 11 Caching and file systems
581
When a process accesses a particular file in a given location, the cache manager looks in the appro-
priate entry in the file’s VACB index array to see whether the requested data has been mapped into the 
cache. If the array entry is nonzero (and hence contains a pointer to a VACB), the area of the file being 
referenced is in the cache. The VACB, in turn, points to the location in the system cache where the view 
of the file is mapped. If the entry is zero, the cache manager must find a free slot in the system cache 
(and therefore a free VACB) to map the required view.
As a size optimization, the shared cache map contains a VACB index array that is four entries in size. 
Because each VACB describes 256 KB, the entries in this small, fixed-size index array can point to VACB 
array entries that together describe a file of up to 1 MB. If a file is larger than 1 MB, a separate VACB index 
array is allocated from nonpaged pool, based on the size of the file divided by 256 KB and rounded up 
in the case of a remainder. The shared cache map then points to this separate structure.
System cache
View n
View 0
View 1
View 2
View 3
View 4
View 5
View 6
View 7
View 8
System VACB array
VACB n
VACB 0
VACB 1
VACB 2
VACB 3
VACB 4
VACB 5
VACB 6
VACB 7
Section 0
Section 1
Section 0
Section 1
Section 2
Section 0
File A (500 KB)
File B (750 KB)
File C (100 KB)
Entry 0
Entry 1
File A VACB
Index array
Entry 2
Entry 3
Entry 0
Entry 1
File B VACB
Index array
Entry 2
Entry 3
Entry 0
Entry 1
File C VACB
Index array
Entry 2
Entry 3
FIGURE 11-9 VACB index arrays.
As a further optimization, the VACB index array allocated from nonpaged pool becomes a sparse 
multilevel index array if the file is larger than 32 MB, where each index array consists of 128 entries. You 
can calculate the number of levels required for a file with the following formula:
(Number of bits required to represent file size – 18) / 7
Round up the result of the equation to the next whole number. The value 18 in the equation comes 
from the fact that a VACB represents 256 KB, and 256 KB is 2^18. The value 7 comes from the fact that 
each level in the array has 128 entries and 2^7 is 128. Thus, a file that has a size that is the maximum that 
can be described with 63 bits (the largest size the cache manager supports) would require only seven 
levels. The array is sparse because the only branches that the cache manager allocates are ones for 
which there are active views at the lowest-level index array. Figure 11-10 shows an example of a multi-
level VACB array for a sparse file that is large enough to require three levels.
582 
CHAPTER 11 Caching and file systems
VACB
Shared
cache map
Pointer to
additional VACB 
index array
0
127
0
127
0
127
0
127
0
127
0
127
VACB
VACB
FIGURE 11-10 Multilevel VACB arrays.
This scheme is required to efficiently handle sparse files that might have extremely large file sizes 
with only a small fraction of valid data because only enough of the array is allocated to handle the 
currently mapped views of a file. For example, a 32-GB sparse file for which only 256 KB is mapped into 
the cache’s virtual address space would require a VACB array with three allocated index arrays because 
only one branch of the array has a mapping and a 32-GB file requires a three-level array. If the cache 
manager didn’t use the multilevel VACB index array optimization for this file, it would have to allocate 
a VACB index array with 128,000 entries, or the equivalent of 1,000 VACB index arrays.
File system interfaces
The first time a file’s data is accessed for a cached read or write operation, the file system driver is 
responsible for determining whether some part of the file is mapped in the system cache. If it’s not, 
the file system driver must call the CcInitializeCacheMap function to set up the per-file data structures 
described in the preceding section.
CHAPTER 11 Caching and file systems
583
Once a file is set up for cached access, the file system driver calls one of several functions to access 
the data in the file. There are three primary methods for accessing cached data, each intended for a 
specific situation:
I 
The copy method copies user data between cache buffers in system space and a process buffer
in user space.
I 
The mapping and pinning method uses virtual addresses to read and write data directly from
and to cache buffers.
I 
The physical memory access method uses physical addresses to read and write data directly
from and to cache buffers.
File system drivers must provide two versions of the file read operation—cached and noncached—
to prevent an infinite loop when the memory manager processes a page fault. When the memory 
manager resolves a page fault by calling the file system to retrieve data from the file (via the device 
driver, of course), it must specify this as a paging read operation by setting the “no cache” and “paging 
IO” flags in the IRP.
Figure 11-11 illustrates the typical interactions between the cache manager, the memory man-
ager, and file system drivers in response to user read or write file I/O. The cache manager is invoked 
by a file system through the copy interfaces (the CcCopyRead and CcCopyWrite paths). To process a 
CcFastCopyRead or CcCopyRead read, for example, the cache manager creates a view in the cache to 
map a portion of the file being read and reads the file data into the user buffer by copying from the 
view. The copy operation generates page faults as it accesses each previously invalid page in the view, 
and in response the memory manager initiates noncached I/O into the file system driver to retrieve the 
data corresponding to the part of the file mapped to the page that faulted.
MmFlushSection
File system
driver
Storage
device
driver
Cache
manager
Lazy writer
Read-ahead
Virtual
memory
manager
Page fault
handler
Modified and
mapped page