resolver and is often abbreviated in DNS nomenclature
as sport. Per RFC 768, this ﬁeld contains 16 bits, but
to avoid collision with other applications, not all source
ports can be used in practice. Servers implementing
Source Port Randomization (SPR) generally follow these
schemes:
(a) Without using the well known ports (i.e. 0 → 1023)
deﬁned by IANA [20], there are 216 − 1024 =
64, 512 available ports for a query.
(b) According to the list of port numbers updated on
2008-08-01 [20], 52, 209 UDP ports have been for-
mally assigned to various services by IANA. Since
the range for dynamic and/or private ports deﬁned
by IANA is from 49, 512 → 65, 535, the resolver
following this rule can only select a source port
from 16, 384 remaining candidates.
(c) Implementation faults in some operating sys-
tems/DNS allow the attacker to easily guess the
source port in a query. For example, some DNS
software uses ﬁxed source port (e.g. 53). Although
some DNS server will use a wide range of source
ports, the port used by a query is predictable (e.g.,
incrementing) or chosen from a small pool of ran-
dom ports selected at startup. Moreover, the ran-
dom number generator in some operating systems
is not strong enough to produce high-quality ran-
dom numbers [30].
(d) Most Kaminsky-class attack programs, e.g.,
[14,
21], assume recursive servers randomly select a
ﬁxed sport at start-up (e.g., as done in unpatched
BIND-9.4), with a value from the range 216 −
1024 = 64, 512. Since this port is ﬁxed for the at-
tack, this generation of tools are trivially remedied
by SPR.
3. N denotes a compound variable:
the product of the
number of authoritative nameservers and the number of
routable external IPs used by the recursive server. Many
DNS authority servers use multiple hosts (as recom-
mended, for example, by RFC 1912 [9]). A resolver can
randomly select one and send a query to it. Similarly,
a recursive server can use any number of source IP ad-
dresses, and select one at random to iteratively query au-
thority hosts. While this is less common, it does provide
some additional protection against poisoning attacks. As
discussed in [15] the variable N is the product of all IP
addresses (both authority and recursive) that can be used
in a DNS transaction.
The following parameters affect the probability of compro-
mise:
1. D denotes the set of equivalent outstanding queries sent
by the resolver. Equivalent queries mean that they have
the same qname. Let D be the number of queries in D.
It is determined by several factors:
(a) The number of original queries sent by the attacker.
(b) The resolver’s bandwidth.
(c) Adjustable parameters in DNS software (e.g. 200
in dnscache [11] or 1,000 in BIND 9 [22])
(d) The number of 0x20-bit capable characters in a
query.
Due to the weakness in the random number generator
used by a DNS server [3], it is possible that two equiv-
alent queries may also have identical qid, source port,
and destination IP address. In this case, we consider these
two queries the same. Therefore, we let D denote the
number of distinct queries in D. Although these queries
have the same qname, they are usually different in their
qid or source port or the destination IP address (if there
are more than one authority name servers, or ANS). Thus,
D = D. But we will consider both the case when D = D
and the case D  1.
2. W denotes window of opportunity in seconds. This is
the period of time during which a recursive server is an-
ticipating a response: the moment right after the resolver
sends a query, to the moment right before the authority
server’s response arrives. In general, as noted in [15],
this period of time is approximately 100 milliseconds, on
the average, though longer events (such as SERVFAIL
timeouts) can occur. In some cases, the attacker can ar-
range for the authority to be unreachable or lagged from
the recursive server’s network.
3. F denotes the set of spoofed responses sent by the at-
tacker. Let F be the number of responses in F. In theory,
it is possible that two responses have the same qid, desti-
nation port number, and source IP address because of the
ﬂaws in the attacker’s program, such as repeated random
numbers. Although an attacker can use many approaches
to make sure that such case will not happen, we still de-
ﬁne F as the number of distinct responses in F in order
to derive a comprehensive model.
4. Sres denotes the size of forged response packets. This pa-
rameter measures the number of bits in spoofed response
packets (to later express risk in terms of bandwidth).
5. R denotes the number of packets sent per second by the
attacker. This parameter is limited by the attacker’s band-
width. Note that with some attack platforms, such as
botnets, this parameter may be effectively unlimited, or
bounded only by the recursive server’s network-facing
transit.
6. R denotes the rate of attack trafﬁc in Mb/s (i.e.) R =
RSres.
7. A denotes the number of attack windows. The attacker
may continue the attack until the cache is poisoned. A
new attack window is opened anytime the attacker has
the recursive server make a unique outbound query.
3.2 The Probability of a Successful Attack
Note that the attack will succeed if at least one out of F
forged responses matches one out of D queries within a win-
dow of opportunity, W .
Let M = I ∗ P ∗ N. That is, M is the number of to-
tal possible choices that a recursive server can use for query.
We use Ps(M, F, D) and Pf (M, F, D) to denote the suc-
cess probability and the failure probability of an attack (i.e.
Ps(M, F, D) = 1 − Pf (M, F, D)).
According to the relationship between D and D and the
relationship between F and F , the general model consists of
four scenarios:
1. D = D and F = F : most cases fall into this scenario
where although all queries have the same qname they
are distinguishable according to their qid or source port
or the destination IP address if N > 1. Similarly, all
responses are different.
2. D  M. In other words, the spoofed responses will
match at least one query. This conclusion is suitable for all
scenarios.
3.2.1
If D = D and F = F
we have
(cid:181)
Pf (M, F, D) =
(cid:181)
(cid:182)
(1)
(cid:182)
M − D
F
M
F
The basic idea is that if F forged responses are selected
from the M − D possible responses, then a match between the
responses and the queries does not exist. According to [44],
Eqn(1) could be approximated by
Pf (M, F, D) ≈ (1 − 1
M
)DF
(2)
We will evaluate this approximation in Section 3.3.
3.2.2
If D < D and F = F
We ﬁrst compute the probability that there are i distinct
queries in D and denote it as P (D = i), 1 ≤ i ≤ D. The
key point here is to calculate the number of all possible map-
pings from D elements to i elements. We use the method of
enumerating subjections [34, 35], and obtain:
P (D = i) = i!S(D, i)
,
(3)
(cid:181)
(cid:182)
M
i
M D
(a)
(b)
Figure 3. (a) Comparison of the four models with D is ﬁxed at 1,000 outstanding queries (PsVU, PsCom,
and PsComAprox are occluded). (b) Comparison of the four models when F is ﬁxed at 10 million packets
(PsVU, PsCom, and PsComAprox are occluded).
1, by combining Eqn.(3), we get:
(cid:182)(cid:181)
(cid:182)
M
i
i!S(D, i)
(5)
3.3 Comparison to Other Models
as follows:
Pf (M, F, D) =
D(cid:88)
F(cid:88)
1
M F +D
i=1
j=1
(cid:161)
(cid:162)(cid:161)
(cid:162)
M
i
M − i
j
i!j!S(D, i)S(F , j)
(7)
Given the number of spoofed packets sent by an attacker
within a window of opportunity, we can compute the proba-
bility of compromise (i.e. Ps(M, F, D) = 1 − Pf (M, F, D)),
as well as the required data rate (i.e. R = F Sres
W ).
There are some existing models such as [2, 37, 40]. The
model in [40], (commonly known as the CERT advisory on
birthday attacks on DNS servers) could obtain the same result
as Eqn.(1). However, the authors in [40] only listed the com-
putation steps instead of giving an exact equation, and did not
consider the general case. We rephrase their conceptual model
using our symbols as follows:
where S(D, i) is the Stirling number of the second kind [36].
It can be computed according to the following recursive meth-
ods:
S(x, y) = S(x − 1, y − 1) + yS(x − 1, y),
(4)
where S(0, 0) = 1 and S(x, 0) = S(0, y) = 0 for x, k 6= 0.
Since the probability that selecting F elements from (M −
1A
0@ M − i
(cid:181)
D(cid:88)
F
M F
F !
i) elements is
Pf (M, F, D) =
F !
M − i
M F +D
i=1
F
3.2.3 If D = D and F < F
By using similar method as shown in Section (3.2.2), we can
easily compute the Pf (M, F, D) in this scenario as follows:
Pf (M, F, D) =
F(cid:88)
(cid:181)
(cid:182)(cid:181)
(cid:182)
M
j
M − j
D
D!
M F +D
j=1
3.2.4 If D < D and F < F
By combining the results in Section (3.2.1), (3.2.3), (3.2.2)
together, we can obtain the general equation for Pf (M, F, D)
1Please note that here we consider selection with replacement. For selec-
tion without replacement, the probability is
!
M − i
!
F
M
F
j!S(F , j)
(6)
Pf (M, F, D) =
(1 − D
M − k
)
(8)
F−1(cid:89)
k=0
To show the improvements offered by our model, we com-
pare the results obtained from the above steps with those de-
rived from our models (i.e. Eqn.(1), Eqn.(2)) and the model
suggested in [2], which can be formulated as:
Pf (M, F, D) = 1 − DF
M
(9)
In the following experiments, we set I = 65, 536, P =
16, 384 and N = 1. We ﬁrst ﬁx D = 1, 000 and vary F to
00.20.40.60.811.21.41.61.82x 10600.20.40.60.81Number of spoofed responses (i.e. F)Probability of compromise (i.e. Ps)M=1073741824; D=1000  PsVUPsComPsComAproxPsHubert02004006008001000120014001600180020000.650.70.750.80.850.90.951Number of equivalent queries (i.e. D)Probability of compromise (i.e. Ps)M=1073741824; F=10000000  PsVUPsComPsComAproxPsHubertobtain the results shown in Figure 3(a). Similarly, we then ﬁx
F = 10, 000, 000 and vary D resulting in Figure 3(b). The Y-
axis in both ﬁgures is the probability of compromise and the
X-axis indicates the number of spoofed responses (i.e. F ) in
Figure 3(a), and denotes the number of equivalent queries (i.e.
D) in Figure 3(b). In both ﬁgures, PsVU denotes the result
based on the model in [40], PsCom denotes the result from
Eqn.(1) above, PsComAprox denotes the result from Eqn.(2)
above, and PsHubert illustrates the results obtained from the
model in [2]. A ruby implementation of our model is provided
in Appendix A for others to experiment with.
Both ﬁgures illustrate that the results obtained from the
model in [2] deviate from the results of other models. We
use the result of the model in [40] as a baseline because it is
intuitive. We can easily see that the model in [2] overestimates
the results.
PsVU and PsCom obtain the same result. The average
differences between them observed in the experiments were
1.9414e − 014 and 7.2164e − 016 in Figures 3(a) and 3(b) re-
spectively, due to numerical precision errors. The average dif-
ference between PsComAprox and PsCom were 1.5392e−004
and 4.6596e− 005 in the two sub-ﬁgures respectively. Hence,
we regard Eqn.(2)) as a good approximation. We also provide
plots of these models in Figure 4 individually.
The author in [37] presented another approximation to
Eqn.(1) when D = F as follows:
Pf (M, F, D) ≈ (1 − 1
M
) D(D−1)
2
(10)
By comparing it with Eqn.(2), it is easy to see that it underes-
timates the probability of compromise.
4 Analysis
Our model of DNS poisoning is comprehensive and more
detailed than previous efforts. To motivate the need for this
model, we tracked the rate of DNS poisoning over time, dur-
ing the critical weeks before and after the August 8, 2008 an-
nouncement of a major DNS security ﬂaw. Our study showed
numerous instances of poisoning, combined with a large group
of resolvers that appear trivially poisonable. This ﬁnding mo-
tivated the second half of this section, which analyzed interim
improvements to DNS resolvers. In the course of our analysis,
we identiﬁed and patched weaknesses in DNS servers. While
falling short of cryptographic improvements to DNS resolu-
tion, our approach responds to the clear need for interim solu-
tions and transitional technologies.