e
m
o
t
e
n
g
a
M
n
e
e
w
t
e
b
e
c
n
e
r
e
f
f
i
0
500
1000 1500 2000
D
0
500
1000 1500 2000
Sequence
Sequence
Axis
x
y
z
Axis
x
y
z
Axis
x
y
z
Axis
x
y
z
(a) Type I
(b) Type II
(c) Type III
(d) Type IV
Fig. 5: Consecutive differences between raw magnetometer measurements for different devices
an attacker cannot achieve the same precision as is possible
with raw gyroscope data. In this case, the adversary also has
two choices:
• Option 1 (Clustering): the adversary can collect multiple
batches of gyroscope samples from the device and cal-
culate the estimated gain matrix
they can use the set of
compare it with records in the database using a clustering
algorithm. If the set of
one in the database, then it is likely that they are the same
device (the entropy of G is discussed in §V-A).
(cid:7)G for each batch. Then,
(cid:7)G as the device ﬁngerprint and
(cid:7)G shows the same pattern as the
• Option 2 (Rounding): the adversary can round values in
dps. Because
(cid:7)G to the nearest integer in units of 2−16
(cid:7)G may not
(cid:7)G by increasing or decreasing its value by a small integer.
(cid:7)G by the combination
there is a varying bias drift, the rounded
be equal to the rounded G. However, the adversary can
implement a grid search for each element in the rounded
Then, adversaries can update
that produces the minimum estimation error Ee
, and the
results will be passed to the Validity Check process for
further checking. In our experiments, we found that the
check will only pass if the device is almost stationary
(e.g., on a desk or held in hand) during sampling, and the
difference between values in the estimated
the rounded G is in ±1. If the device is under intense
movement, the algorithm will collect another batch of
data and keep trying until the device is nearly stationary.
(cid:7)G and that in
G. Fingerprinting Other Motion Sensors
We also investigated whether our approach can be applied to
recover the gain matrix of the accelerometer and magnetome-
ter. As a result, we found that our approach does not directly
apply to the accelerometer of iOS devices. However, we
discovered that the accelerometer in Google Pixel 2/3 devices
can be ﬁngerprinted (§V-D). In addition, the magnetometer in
iOS devices is also ﬁngerprintable. Similar to the gyroscope,
the raw readings from the magnetometer only have a resolution
of 2−16
μT (microtesla). As shown in Fig. 5, after subtracting
consecutive raw magnetometer measurements for every device
model in our dataset, we observed four types of pattern:
• Type I (different sensitivity, negligible ﬂuctuation): Type
I devices have a different but similar sensitivity for each
magnetometer axis. As shown in Fig. 5 (a), the sensitivity
of z axis is clearly lower than that of the x and y axes.
The ﬂuctuation within each cluster is negligible. In this
case, the nonorthogonality matrix N in Equation 1 is
nearly an identity matrix. However, the scale factor matrix
S may be different across devices, which could be used
as a ﬁngerprint.
• Type II (ﬁxed sensitivity, moderate ﬂuctuation): Type II
devices all have a same ﬁxed sensitivity (4915×2−16
μT)
for every axis. Therefore, the scale factor matrix S does
not provide us with any entropy. However, there is a
moderate ﬂuctuation within each cluster, which indicates
the existence of a non-identity nonorthogonality matrix
N. The nonorthogonality matrix N may be different
across devices, which could be used as a ﬁngerprint.
• Type III (different sensitivity, moderate ﬂuctuation): Type
III devices have different but similar sensitivity for each
axis and there is a moderate ﬂuctuation within each
cluster. Nevertheless, the quantization of the data is still
evident in this case.
• Type IV (different sensitivity, intense ﬂuctuation): Type
IV devices show an intense ﬂuctuation on the magne-
tometer output. In this case, the quantization of the data
is not as evident as in the other cases.
We summarize the magnetometer type of different
iOS
(cid:23)(cid:21)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Magnetometer type of different iOS device models
TABLE III: MAGID Fingerprinting Result
Type
Type I
Type II
Type III
Type IV
Model
Nominal Gain
Type
# Devices Group Size
# Groups
iPhone 4S/5/5C/5S/6/6 Plus
All iPad models
iPhone 6S/6S Plus/7/7 Plus/SE
iPhone 8/8 Plus
iPhone X/XS/XS Max
0.35/0.28/0.17∗
0.075
0.075
0.075
Type I
Type II
Type III
Type IV
213
434
96
52
1
2
1
1
1
193
10
434
96
52
∗ Type I devices have three possible nominal gain values.
device models and their estimated nominal gain in Table II.
Overall, the observation of the four patterns reveals the dif-
ferent underlying calibration procedures. For all four types of
devices, we can use the same approach described in §III-D to
obtain the magnetometer ﬁngerprint (i.e., MAGID). Although
the gain matrix of the magnetometer does not appear to be
stored at 2−16
μT resolution, adversaries can use the same
techniques discussed in §III-F to launch an attack by either
clustering or rounding.
Compared with the gyroscope, the raw magnetometer data
is not currently accessible in major browsers. Nevertheless, the
MAGID provides additional entropy to the GYROID. Thus, we
can combine them together when analyzing apps as a ﬁner-
grained ﬁngerprint. In this paper, we deﬁne the SENSORID
as a combination of distinctive sensor calibration ﬁngerprints.
In the case of iOS devices, the SENSORID includes both the
GYROID and MAGID.
IV. EVALUATION
We developed both a website4 and an iOS app to collect
sensor data. The iOS app collects raw data from the gyroscope
and magnetometer at 200 Hz and does not ask users to put
the device in any particular position. Additionally, it uses an
embedded webview to collect fused gyroscope data and a
standard iOS API call to record the current device model (e.g.,
“iPhone10,3”).
The website is only able to collect fused gyroscope data
and the device model. For both the app and website, we
use the Fingerprintjs2 [14] library in the default conﬁguration
to generate a browser ﬁngerprint for evaluation purposes. In
addition to volunteers, we recruited participants from both the
Amazon Mechanical Turk5 and Proliﬁc6 to download the app
and contribute sensor data. The public data collection exercise
has been approved by the ethics committee of the Department
of Computer Science and Technology in the University of
Cambridge.
The SENSORID app has collected data from 795 unique iOS
devices. In particular, 761 of them contain an M-series motion
coprocessor. In addition, the website has collected fused data
from another 75 devices. Some users chose to participate in
this study multiple times. Thus, there might be more than
one record for each unique device. For both the app and the
4https://sensorid.cl.cam.ac.uk/
5https://www.mturk.com
6https://proliﬁc.ac
website, we ask users to tell us whether they have submitted
the data from this device before.
A. Results
Using the raw gyroscope data collected from the 761 iOS
devices with an M-series coprocessor, we are able to recover
the gain matrix of their gyroscope exactly and generate the
GYROID. For the other 34 devices that do not contain an M-
series coprocessor, we use the rounding option in §III-F to
generate the GYROID due to the small sample size. Based on
the GYROID, we successfully identify multiple records that
are submitted by the same device. This is conﬁrmed by user-
supplied data about whether they have submitted samples from
this device before and the device IP address when they submit.
The GYROID of each device is distinct.
Since the website only collects fused gyroscope data, we
choose the rounding option in §III-F to generate the GYROID.
Then, we compare it with the GYROID of the 795 devices
that we recovered from the raw data. As a result, we identify
3 devices that submitted through both the website and the
app. The app also collects fused sensor data from the built-
in webview. For this data, we use the clustering approach to
generate a group of gain matrix estimates. Then, we apply
the Multivariate ANalysis Of VAriance (MANOVA) technique
to analyze these estimates and successfully identify all 795
unique devices in the dataset. In particular, we also identify
6 devices that submitted multiple times through the app. The
results are the same as we obtained from the raw data.
In addition, we apply the improved approach to ﬁngerprint
the magnetometer with the rounding option. After generating
the MAGID, we group devices by their MAGID and present
the results in Table III. In the table, the group size records
the number of different devices sharing the same MAGID.
Therefore, a group of size 1 means the device has a unique
MAGID in our dataset. In addition, Table III categorizes the
results based on the device type and presents the number of
unique devices in each category. As shown in the table, some
Type I devices share the same MAGID. It reveals that Type
I devices have a higher chance of collision on MAGID than
others. The reason is that the entropy of the MAGID for Type
I devices is only provided by the scale matrix (i.e., main-
diagonal elements in MAGID). Nevertheless, the MAGID is
orthogonal to the GYROID, and thus, they can be combined
together to provide additional entropy.
We also compare the GYROID and MAGID with the Fin-
gerprintjs2 ﬁngerprint, which utilizes font detection, canvas
(cid:23)(cid:21)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV: Comparison of Different Device Fingerprints
Fingerprintjs2
870
Fingerprint
GYROID
MAGID
# Devices
Group Size
# Groups
870
1
870
795
1
775
2
10
1
391
2
43
3
22
4
12
5
2
6
4
7
2
9
1
10
1
11
2
13
2
14
1
19
1
22
1
28
1
36
1
45
1
ﬁngerprint, WebGL ﬁngerprint, etc. Table IV shows that
both the GYROID and MAGID provide more entropy than
traditional browser ﬁngerprinting techniques. While GYROID
is unique for every device in our dataset, 45 out of 135 iPhone
7 devices have the same Fingerprintjs2 ﬁngerprint.
B. Proof of Concept
We have developed a proof of concept app for iOS devices
with an M-series motion coprocessor. The app implements the
improved approach (§III-D2) to generate the GYROID of the
test device. The code is written in Swift 4.1 and compiled by
XCode 9.4.1. The screenshots of the app are shown in Fig. 8
in Appendix C. After the user clicks the “Generate GyroID”
button (Fig. 8 (a)), the app collects 100 raw gyroscope samples
and attempts to generate the GYROID. If it fails (due to
intense shaking of the phone) the app automatically collects
another 100 raw samples and repeats the process. Fig. 8 (b)
shows the result from a handheld iPhone XS running iOS
12.1.1. As seen in the Figure, it takes about 0.5 seconds to
collect 100 gyroscope samples and the whole data processing
procedure ﬁnishes within 0.01 seconds. We have also tested
shaking the device during data collection. Vigorous movement
during extraction may require additional samples, but the task
nevertheless completes within a few hundred samples and
takes a few seconds. Regardless of the device movement and
CPU load, the generated GYROID always stays the same.
V. DISCUSSION
In this section, we discuss some possible threats that could
impair the validity of this research.
A. Is SENSORID unique?
The ﬁrst question to ask is whether SENSORID has enough
entropy to be used as a device ﬁngerprint. In other words, is
SENSORID likely to be unique? To answer this question, we
studied the GYROID of all iOS devices with an estimated
nominal gain of 61 mdps. Device models included in this
category can be found in Table I. We chose this category
for two reasons. First, all device models in this category are
modern devices which contain an M-series motion coprocessor
and this makes possible to extract their exact gain matrix. Sec-
ond, devices with different default gain may have a different
GYROID distribution, so we select the larger size group, which
contains 693 devices in total. Fig. 9 in Appendix D presents the
distribution of each element in GYROID for the 693 devices.
For simplicity, we denote the GYROID as D ∈ Z
in the
following analysis.
3×3
Normality Analysis. Through analyzing the GYROID of
the 693 devices, we ﬁnd that each element in D appears
to be normally distributed. To test for normality, we applied
both the Kolmogorov-Smirnov test and the Shapiro-Wilk test
of normality for each element in D. Results show that ele-
ments that are not in the the main diagonal of D, including
D12, D13, D21, D23, D31, D32, have a strong normality. Ele-
ments in the main diagonal (D11, D22, D33) are rejected by
both tests at the 0.05 signiﬁcance level. Fig. 10 in Appendix D
presents the Q-Q plot of each Dij ∈ D that gives an intuitive
view of the normality of each element.
The result implies that the non-diagonal elements are nor-
mally distributed, and we can use this to estimate their entropy.
In addition, it shows that we may need ﬁner-grained analysis to
calculate the entropy of diagonal elements. The elements in the
main diagonal of D are strongly affected by the default gain.
Although we only choose device models with an estimated
gain of 61 mdps, the actual default gain of each device model
may deviate from our estimation. Therefore, we need to do per-
device type analysis for each element in the main diagonal.
When we run a normality test on data from each per-device
type separately we ﬁnd that the diagonal elements appear to
be normally distributed.
Correlation Analysis. We also investigate whether elements
in D are strongly correlated with each other. For this purpose,
we run the Pearson correlation test on each Dij and ﬁnd
that D12 and D13 are correlated with D21 and D31 at the
0.01 signiﬁcance level, respectively. Based on this result, we
regard both D21 and D31 as dependent variables and do not
include them in our entropy calculation. An intuitive view of
the correlation between different elements in D is presented
in Fig. 11 in Appendix D.
Entropy Calculation. We ﬁrst calculate the entropy of
non-diagonal elements in D, excluding D21 and D31. For
each non-diagonal element, we estimate the parameters of
the normal distribution, including the mean μ and standard
deviation σ, from the dataset. Technically, it is not a strict
normal distribution since each element can only be an integer.
Nevertheless, the quantization is a result of rounding. Thus, we
can still apply the concept of normal distribution to estimate
the entropy.
In general, the entropy of a discrete random variable X,
which is denoted as H(X), can be calculated by:
(cid:9)
H(X) = −
P(xi) log2 P(xi)
(10)
xi∈X
where P(xi) is the probability of X being equal to xi. In
our case, we regard the element Dij as the variable X. Then,
we have xi ∈ {−65535, . . . , 65535} because of the 16-bit
(cid:23)(cid:21)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
TABLE V: Comparison of Different Device Fingerprints
Variable D11 D12 D13 D22 D23 D32 D33 D