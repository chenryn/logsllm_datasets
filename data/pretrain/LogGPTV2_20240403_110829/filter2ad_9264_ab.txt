默认情况下 forName的第一个参数是类名 第二个参数是是否初始化 第三个参数 是ClassLoader
ClassLoader 是什么呢 就是一个加载器 告诉Java虚拟机 如何加载这个类 java默认的ClassLoader就是根据类名来加载类
这个类名是类的完整路径 eg.`java.lang.Runtime`
在上面的代码中 这里传入的类为com.mysql.jdbc.Driver 我们找到他的源码
    public class Driver extends NonRegisteringDriver implements java.sql.Driver {
    static {
        try {
            java.sql.DriverManager.registerDriver(new Driver());
        } catch (SQLException E) {
            throw new RuntimeException("Can't register driver!");
        }
    }
        public Driver() throws SQLException {
        // Required for Class.forName().newInstance()
        }
    }
这个类被初始化后 静态代码块的内容会被执行 也就是说 我们的 Class.forName
和直接写DriverManager.registerDriver(new Driver())是等价的
#### 获取类对象的其他函数
forName 并不是获取类的唯一途径 我们有如下三种方式 获取一个类 的对象 也就是 `java.lang.Class` 类的对象 ：
`obj.getClass()` 如果上下文存在某个类的实例obj 我们可以直接通过 `obj.getClass()` 来获取他的类
    MyObject x;
    Class c1 = x.getClass();
`Test.class` 如果 已经加载了某个类 只是想获取到他的`java.lang.Class`对象 那么直接拿他的class属性即可 这个过程
实际上不属于反射
    Class cl1 = Manager.class;
    Class cl2 = int.class;
    Class cl3 = Double[].class;
最后一个 就是 上面我们讲到的Class.forName了
    Class c2=Class.forName("MyObject");
#### 初始化
    public class TrainPrint {
     {
     System.out.printf("Empty block initial %s\n", this.getClass());
     }
     static {
     System.out.printf("Static initial %s\n", TrainPrint.class);
     }
     public TrainPrint() {
     System.out.printf("Initial %s\n", this.getClass());
     }
    }
在上面是三种初始化的方式 那么 他们之间有什么区别呢
我们这里采用两种方法来输出一下
在类的实例化中 先调用的是static{} 其次是{} 最后是构造函数
类初始化中 仅调用static{} 而{}中的代码会放在构造函数的super()后面 但在 当前构造函数的前面
所以说 forName 中的initialize=true其实就是告诉 Java虚拟机是否实行类初始化
那么 当我们在加上父类的情况下 顺序又应该如何呢
具有父类的类的实例化：父类静态初始块->子类静态初始块->父类初始块->父类构造函数->子类初始块->子类构造函数  
具有父类的类的初始化：父类静态初始块->子类静态初始块
而在此处我们 提到了几个概念 在这里直接说明一下
##### 非静态初始化块（构造代码块）
其 **作用** 就是 给对象进行初始化 对象已建立就运行 且优先于构造函数的运行
**与构造函数的区别** 非静态初始化块给所有对象进行统一的初始化 而构造函数 只会给对应对象进行初始化
**应用：** 将所有构造函数共性的东西定义在构造代码块中。
  * 对于普通的类而言，可以放在初始化块中的初始化工作其实完全可以放到构造函数中进行，只不过有时会带来些许不便，如有多个构造器，就要在多个地方加上初始化函数完成初始化工作，而如果放到初始化块中的话则只要写一次即可。
  * 初始化块真正体现其独一无二的作用是在匿名内部类中。
  * 由于是匿名内部类，因而无法写构造方法，但是很多时候还是要完成相应的初始化工作，这时就需要用到初始化块了，特别是Android中大量地使用匿名内部类，初始化块的作用就十分突出
##### 静态初始化块
**作用** 给类进行初始化 随着类的加载而执行 且只能执行一次
**与构造代码块的区别**
1）构造代码块用于初始化对象，每创建一个对象就会被执行一次；静态代码块用于初始化类，随着类的加载而执行，不管创建几个对象，都只执行一次。  
2）静态代码块优先于构造代码块的执行  
3）都定义在类中，一个带static关键字，一个不带static
eg.
    static
       {
          Random generator = new Random();
          nextId = generator.nextInt(10000);
       }
在类中 用{}包裹 且前面有static关键词
##### 构造函数
1,构造函数就是一个普通的函数，创建方式和普通函数没有区别，
不同的是构造函数习惯上首字母大写.
2.构造函数和普通函数的区别就是调用方式的不同
普通函数是直接调用，而构造函数需要使用new关键字来调用.
##### 结论
1.类的初始化阶段，先执行最顶层的父类的静态初始化块，然后依次向下执行，直到执行当前类的静态初始化块
2.对象初始化阶段，先执行最顶层父类的初始化块，最顶层父类的构造器，然后依次向下，直到执行当前类的初始化块当前类的构造器。
3.当第二次创建对象时，由于这些类在第一次创建对象时已经被加载过了，因此静态初始化块只会执行一次。
#### 利用
假设存在这样一个函数，并且其中的参数 name 我们可控
    public void ref(String name) throws Exception {
        Class.forName(name);
    }
那么我们就可以编写一个恶意类，利用初始化来执行我们编写的恶意类中的 static 块中的恶意代码
    import java.lang.Runtime;
    import java.lang.Process;
    public class TouchFile {
         static {
             try {
                 Runtime rt = Runtime.getRuntime();
                 String[] commands = {"touch", "/tmp/success"};
                 Process pc = rt.exec(commands);
                 pc.waitFor();
             } catch (Exception e) {
                 // do nothing
             }
         }
    }
通过上面我们的研究 我们可以知道 当forName进行初始化的时候 会执行静态代码块中的代码 所以 如果将这个恶意类带入目标中 便可以 造成 恶意命令执行
#### forName 调用内部类
在正常情况下 除了系统类 如果 我们想要拿到一个类 需要先import才能使用 但是 使用 forName就不需要 这样 对于我们的攻击来说 就十分有利
我们可以加载任意类
另外 我们经常 在一些源码中可以看到 类名中包含$符号 比如 fastjson在checkAutoType的时候 会将$替换成.
$的作用是查找内部类
Java的普通类c1中支持编写内部类 c2 而在编译的时候 会生成 两个文件 c1.class 和 c1$c2.class 我们可以把它们看成两个无关的类
通过 `Class.forName(&quot;C1$C2")` 我们即可加载这个内部类
获得类之后 我们可以继续通过反射来获取这个类中的属性 方法 同时 也可以实例化这个类 并调用方法
### Class.newInstance
当然 这个方法就是 字如其名 比较好理解
在php的反序列化中 我们就常常使用new关键字来创建我们类的实例化 而这里也不例外 形式也十分相近
    Object obj = new Object();
但是 与new不同的是 newInstance 并不是一个关键字 而是反射框架中类对象创建新的实例化对象的方法
在这个过程中，是先取了这个类的不带参数的构造方法，然后调用构造方法 也就是无参构造函数 的 newInstance 来创建对象
这个函数 还有一个同名函数 在Constructor类中 也有一个newInstance 但是 二者不同之处在于Class中的这个函数
只能调用无参的构造函数 也就是 默认的构造函数 但是在Constructor中的此函数 可以根据其传入的参数 调用任意的构造函数
前者调用的构造函数必须是可键的（public） 但是后者在setAccessible(true)的条件下 可以调用私有的构造函数
class.newInstance 的作用就是调用这个类的 无参构造函数 不过 我们有时候 在写漏洞利用方法的时候 会发现使用newInstance
总是不成功 这时候原因可能是
  1. 你使用的类没有无参构造函数
  2. 你使用的类构造函数 是私有的
这两个原因 也就是上面 我们将Class中的newInstance 与 Constructor中的相对比时 的不同之处
最最常见的情况就是java.lang.Runtime 这个类我们构造命令执行payload时很常见 但是我们并不能直接这样来执行命令
在安全漫谈中 p牛举了这样一个例子
    Class clazz = Class.forName("java.lang.Runtime");
    clazz.getMethod("exec", String.class).invoke(clazz.newInstance(), "id");
会导致报错 原因是 Runtime类的构造方法 是私有 的
那么 为什么有的类的构造方法会是私有的呢 这便涉及到一个很常见的设计模式 单例模式
比如 对于一个Web应用来说 数据库连接 只需要建立一次 而并不需要每次用到数据库的时候 都去重新建立一个连接 此时 作为开发者
就可以将数据库连接使用的类的构造函数 设置为私有 然后 编写一个静态方法 来获取
    public class TrainDB {
    private static TrainDB instance = new TrainDB();
    public static TrainDB getInstance() {
    return instance;
    }
    private TrainDB() {
    // 建立连接的代码...
    }
    }
这样 只有类初始化的时候 会执行一次构造函数 后面只能通过getInstance 来获取这个对象 避免建立多个数据库连接
我们这里的Runtime类 就是 单例模式 我们只能通过 Runtime.getRuntime() 来获取到Runtime对象
我们将上述payload修改一下就可以正常执行命令了
    Class clazz = Class.forName("java.lang.Runtime");
    clazz.getMethod("exec",
    String.class).invoke(clazz.getMethod("getRuntime").invoke(clazz),
    "calc.exe");
这里用到`getMethod` 和 `invoke`方法
### getMethod
    Method Class.getMethod(String name, Class... parameterTypes)
第一个参数name 是要获得的方法的名字 第二个参数 parameterTypes 是按声明顺序标识该方法的形参类型
getMethod 的作用是 通过反射获取一个类的某个特定的公有方法 而且是通过Class实例获取所有Method信息 这些信息包含
  1. getName() 返回方法的名称
  2. getReturnType() 返回方法返回值类型 也是一个 Class实例比如 String.class
  3. getParameterTypes()：返回方法的参数类型，是一个 Class 数组，例如：{String.class, int.class}；
  4. getModifiers()：返回方法的修饰符，它是一个 int，不同的 bit 表示不同的含义
而Java中支持类的重载 我们不能仅通过函数名 来确定一个函数所以在调用getMethod 的时候 我们需要传给他你需要获取的函数的参数类型列表
比如 在Runtime.exec 方法中 有6个重载
我们使用第一个 仅有一个参数 类型是string 所以我们使用`getMethod("exec",string.class)`
来获取Runtime.exec 方法
### invoke
其属于Method类 作用就是对方法进行 调用 也比较好理解
`Object invoke(Object obj,Object...args)`，参数 obj 是实例化后的对象，args 为用于方法调用的参数
`invoke` 的作用是执行方法，它的第一个参数是：
如果这个方法是一个普通方法，那么第一个参数是类对象
如果这个方法是一个静态方法，那么第一个参数是类
这也比较好理解了 我们正常执行方法是`[1].method([2], [3], [4]...)` ，其实在反射里就是 `method.invoke([1],
[2], [3], [4]...)` 。
所以 我们将上述命令执行的payload分解一下就是
    Class clazz = Class.forName("java.lang.Runtime");
    Method execMethod = clazz.getMethod("exec", String.class);
    Method getRuntimeMethod = clazz.getMethod("getRuntime");