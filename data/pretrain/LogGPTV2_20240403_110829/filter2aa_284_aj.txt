### A5 - Security Misconfiguration

#### 1. Introduction to Frameworks and Security
Modern applications are often developed using frameworks, which handle much of the "housekeeping" tasks, allowing developers to focus on extending functionality. Understanding the specific framework and the language in which the application is implemented is crucial. Transactional functionality may be managed by "parent" classes, and code reviewers should be familiar with the underlying framework.

Web applications do not run in isolation; they are typically deployed within an application server, which runs on an operating system on a physical host, connected to a network. Secure operating system configuration (hardening) is generally outside the scope of code review. For more information, refer to the Center for Internet Security's operating system benchmarks.

Networks today include various components such as filtering switches, VLANs, firewalls, WAFs, and middle boxes, all of which provide critical security services when properly configured. This topic is extensive but beyond the scope of this guide. For a summary, see the SANS Institute's Critical Control 10: Secure Configurations for Network Devices.

Application server frameworks have many security-related capabilities, often configured in static files (e.g., XML) or through annotations in the code.

#### 2. Apache Struts
In Apache Struts, the `struts-config.xml` and `web.xml` files are essential for understanding the transactional functionality of an application. The `struts-config.xml` file contains action mappings for each HTTP request, while the `web.xml` file contains the deployment descriptor.

Struts includes a validator engine that uses regular expressions to validate input data. No additional code is needed for each form bean (a Java object that receives data from an HTTP request). The validator is not enabled by default; it must be defined in the `<plug-in>` section of `struts-config.xml`. The `validation.xml` and `validation-rules.xml` files define the custom validation rules and the actual rules, respectively.

Without a proper understanding of the Struts framework, simply auditing the Java code might miss the validation logic and the relationship between the defined rules and Java functions.

**Example:**
- When the URL contains `/login`, the `LoginAction` is called.
- Action mappings show the transactions performed when external input is received.

#### 3. Java Enterprise Edition Declarative Configuration
Java Enterprise Edition (JEE) provides a role-based security model, where access to application resources is granted based on security roles. These roles are logical groupings of authenticated entities (usually users), and access is declared via security constraints.

Security constraints and roles are expressed in deployment descriptors, such as `web.xml` for web components and `META-INF/ejb-jar.xml` for Enterprise JavaBeans (EJB) components. These descriptors define resources, authorized roles, and access constraints (e.g., GET vs. POST).

**Example:**
- The `web.xml` file defines a `Catalog` servlet, a `manager` role, and a `SalesInfo` resource accessible via GET and POST requests, restricted to users with the `manager` role, using SSL and HTTP basic authentication.

#### 4. JEE Annotations for Security
JEE provides several annotations for security, including:
- `@DeclareRoles`
- `@DenyAll` - no roles may invoke the method.
- `@PermitAll` - all roles may invoke the method.
- `@RolesAllowed` - specifies roles permitted to invoke the method.
- `@RunAs` - dynamically runs the method as a particular role.

**Example:**
- Employees and managers can add movies, anyone can list movies, but only managers can delete movies.

```java
public class Movies {
    private EntityManager entityManager;

    @RolesAllowed({"Employee", "Manager"})
    public void addMovie(Movie movie) throws Exception {
        entityManager.persist(movie);
    }

    @RolesAllowed({"Manager"})
    public void deleteMovie(Movie movie) throws Exception {
        entityManager.remove(movie);
    }

    @PermitAll
    public List<Movie> getMovies() throws Exception {
        Query query = entityManager.createQuery("SELECT m FROM Movie m");
        return query.getResultList();
    }
}
```

#### 5. Framework-Specific Configuration
##### Apache Tomcat
The `server.xml` file in Apache Tomcat should be reviewed to ensure security-related parameters are correctly configured. Key parameters include:
- Connectors: `maxPostSize`, `maxParameterCount`, `SSLEnabled`, `secure`, `ciphers`.
- Host and Context: `autoDeploy`, `deployOnStartup`, `deployXML`, `crossContext`, `privileged`, `allowLinking`.
- Filters: Various filters can be configured to process incoming requests.

##### Jetty
Jetty offers several security enhancements, such as limiting form content and obfuscating passwords. These can be configured in the `jetty-web.xml` file.

**Example:**
- Limiting form content size and number of form keys.

```xml
<Set name="maxFormContentSize">200000</Set>
<Set name="maxFormKeys">200</Set>
```

##### JBoss AS
JBoss Application Server supports password obfuscation (password masking) in its XML configuration files. After generating a masked password using the JBoss utility, replace plain text passwords with the masked version.

**Example:**
- Setting an obfuscated password for a JDBC Datasource.

```xml
<jdbc-connection-pool name="DSTest" driver-class="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:3306/foo" user="dbuser" password="OBF:1ri71v1r1v2n1ri71shq1ri71shs1ri7"/>
```

#### 6. Conclusion
When reviewing web application code, it is essential to consider the configuration of the underlying framework and the security settings in related XML files. Ensure that access controls, authentication methods, and other security parameters are correctly applied and consistent with the intended security policies.