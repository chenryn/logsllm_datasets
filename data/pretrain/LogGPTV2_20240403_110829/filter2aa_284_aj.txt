83
SECURITY MISCONFIGURATION
A5
Many modern applications are developed on frameworks. These frameworks provide the developer less work 
to do, as the framework does much of the “housekeeping”. The code developed will extend the functionality 
of the framework. It is here that the knowledge of a given framework, and language in which the application 
is implemented, is of paramount importance. Much of the transactional functionality may not be visible in the 
developer’s code and handled in “parent” classes. The reviewer should be aware and knowledgeable of the 
underlying framework.
Web applications do not execute in isolation, they typically are deployed within an application server frame-
work, running within an operating system on a physical host, within a network.
Secure operating system configuration (also called hardening) is not typically within the scope of code review. 
For more information, see the Center for Internet Security operating system benchmarks.
Networks today consist of much more than routers and switches providing transport services. Filtering switch-
es, VLANs (virtual LANs), firewalls, WAFs (Web Application Firewall), and various middle boxes (e.g. reverse 
proxies, intrusion detection and prevention systems) all provide critical security services when configured to 
do so. This is a big topic, but outside the scope of this web application code review guide. For a good summary, 
see the SANS (System Administration, Networking, and Security) Institute Critical Control 10: Secure Configu-
rations for Network Devices such as Firewalls, Routers, and Switches.
Application server frameworks have many security related capabilities. These capabilities are enabled and con-
figured in static configuration files, commonly in XML format, but may also be expressed as annotations within 
the code.
11.1 Apache Struts
In struts the struts-config.xml and the web.xml files are the core points to view the transactional functionality 
of an application.  The struts-config.xml file contains the action mappings for each HTTP request while the 
web.xml file contains the deployment descriptor.
The struts framework has a validator engine, which relies on regular expressions to validate the input data. 
The beauty of the validator is that no code has to be written for each form bean. (Form bean is the Java object 
which received the data from the HTTP request). The validator is not enabled by default in struts. To enable the 
validator, a plug-in must be defined in the  section of struts-config.xml. The property defined tells 
the struts framework where the custom validation rules are defined (validation.xml) and a definition of the 
actual rules themselves (validation-rules.xml).
Without a proper understanding of the struts framework, and by simply auditing the Java code, one would not 
see any validation being executed, and one does not see the relationship between the defined rules and the 
Java functions.
The action mappings define the action taken by the application upon receiving a request. Here, in sample 
11.1, we can see that when the URL contains “/login” the LoginAction shall be called. From the action map-
pings we can see the transactions the application performs when external input is received.
84
11.2 Java Enterprise Edition Declarative Configuration
Some security capabilities are accessible from within a Java program. Programmatic security is done within the 
web application using framework specific or standard Java Enterprise Edition (JEE) framework APIs. JEE has the 
JEE security model which, uses a role-based security model in which, access to application resources is granted 
based on the security role. The security role is a logical grouping of principals (authenticated entities, usually a 
user), and access is declared by specifying a security constraint on the role.
The constraints and roles are expressed as deployment descriptors expressed as XML elements. Different types 
of components use different formats, or schemas, for their deployment descriptors:
• Web components may use a web application deployment descriptor in the file web.xml
• Enterprise JavaBeans components may use an EJB deployment descriptor named META-INF/ejb-jar.xml
The deployment descriptor can define resources (e.g. servlets accessible via a specific URL), which roles are 
authorized to access the resource, and how access is constrained (e.g. via GET but not POST).
The example web component descriptor in sample 11.2, (included in the “web.xml” file) defines a Catalog 
servlet, a “manager” role, a SalesInfo resource within the servlet accessible via GET and POST requests, and 
specifies that only users with “manager” role, using SSL and successfully using HTTP basic authentication 
should be granted access.
A5 - Security Misconfiguration
Sample 11.1
85
A5 - Security Misconfiguration
    A Secure Application
      catalog
      com.mycorp.CatalogServlet
        catalog
        Spring
        MGR
        manager
      manager
      catalog
      /catalog/*
      SalesInfo
      /salesinfo/*
      GET
      POST
      manager
Sample 11.2
86
Security roles can also be declared for enterprise Java beans in the “ejb-jar.xml” file as seen in figure sample 11.3.
For beans, however, rather than specifying access to resources within servlets, access to bean methods is 
specified. The example in sample 11.4 illustrates several types of method access constraints for several beans.
      CONFIDENTIAL
      BASIC
      file
            The single application role
            TheApplicationRole
Sample 11.3
            The employee and temp-employee roles may access any
                method of the EmployeeService bean 
            employee
            temp-employee
                EmployeeService
                *
Sample 11.4
A5 - Security Misconfiguration
87
            The employee role may access the findByPrimaryKey,
                getEmployeeInfo, and the updateEmployeeInfo(String) method of
                the AardvarkPayroll bean 
            employee
                AardvarkPayroll
                findByPrimaryKey
                AardvarkPayroll
                getEmployeeInfo
                AardvarkPayroll
                updateEmployeeInfo
                    java.lang.String
            The admin role may access any method of the
                EmployeeServiceAdmin bean 
            admin
                EmployeeServiceAdmin
                *
            Any authenticated user may access any method of the
                EmployeeServiceHelp bean
                EmployeeServiceHelp
                *
            No fireTheCTO methods of the EmployeeFiring bean may be
                used in this deployment
                EmployeeFiring
                fireTheCTO
A5 - Security Misconfiguration
88
If XML deployment descriptors are used to secure the application, code review should include the “web.xml” 
and “ejb-jar.xml” files to ensure that access controls are properly applied to the correct roles, and authentica-
tion methods are as expected.
11.3 JEE Annotations
JEE annotations for security are defined in the Java Docs [2].  The available annotations are:
• @DeclareRoles
• @DenyAll - no roles may invoke the method.
• @PermitAll - all roles may invoke the method.
• @RolesAllowed - roles permitted to invoke the method.
• @RunAs - dynamically run the method as a particular role.
For example the code in sample 11.5 allows employees and managers to add movies to the persistent store, 
anyone to list movies, but only managers may delete movies.
Code review should look for such annotations. If present, ensure they reflect the correct roles and permissions, 
and are consistent with any declared role permissions in the “ejb-jar.xml” file.
public class Movies {
    private EntityManager entityManager;
    @RolesAllowed({“Employee”, “Manager”})
    public void addMovie(Movie movie) throws Exception {
        entityManager.persist(movie);
    }
    @RolesAllowed({“Manager”})
    public void deleteMovie(Movie movie) throws Exception {
        entityManager.remove(movie);
    }
    @PermitAll
    public List getMovies() throws Exception {
        Query query = entityManager.createQuery(“SELECT m from Movie as m”);
        return query.getResultList();
    }
}
Sample 11.5
A5 - Security Misconfiguration
89
11.4 Framework Specific Configuration
Apache Tomcat
The server.xml[3] file should be reviewed to ensure security related parameters are configured as expected. The tom-
cat server.xml file defines many security related parameters.
Filters are especially powerful, and a code review should validate they are used unless there is a compelling reason 
not to. 
Jetty
Jetty adds several security enhancements:
• Limiting form content
• Obfuscating passwords
The maximum form content size and number of form keys can be configured at server and web application level 
in the “jetty-web.xml” file.
  …
  200000
  200
  ...
    org.eclipse.jetty.server.Request.maxFormContentSize
    100000
    org.eclipse.jetty.server.Request.maxFormKeys
    2000
Sample 11.6
Parameter
Description
Server
This is the shutdown port.
Connectors
maxPostSize, maxParameterCount, server, SSLEnabled, secure, ciphers.
Host
Context
Filter
autoDeploy, deployOnStartup, deployXML
crossContext, privileged, allowLinking
Tomcat provides a number of filters which may be configured to incoming requests
Table 12: Apache Tomcat Security Parameters
A5 - Security Misconfiguration
90
Jetty also supports the use of obfuscated passwords in jetty XML files where a plain text password is usually 
needed. sample 11.7 shows example code setting the password for a JDBC Datasource with obfuscation (the 
obfuscated password is generated by Jetty org.eclipse.jetty.util.security.Password utility).
JBoss AS
JBoss Application Server, like Jetty, allows password obfuscation (called password masking in JBoss) in its XML 
configuration files. After using JBoss password utility to create password mask, replace any occurrence of a 
masked password in XML configuration files with the following annotation.
See Masking Passwords in XML Configuration in the JBoss Security Guide.
jdbc/DSTest
com.mysql.jdbc.Driver
jdbc:mysql://localhost:3306/foo
dbuser
OBF:1ri71v1r1v2n1ri71shq1ri71shs1ri71v1r1v2n1ri7 
5
50
5
30
Sample 11.7
@org.jboss.security.integration.password.Password
                     (securityDomain=MASK_NAME,methodName=setPROPERTY_NAME)
Sample 11.8
A5 - Security Misconfiguration
91
Oracle WebLogic