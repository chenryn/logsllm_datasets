logic running in VTL 1; these facilities are termed assists and are serviced by
the SgrmBroker user mode component or by an agent driver running in VTL
0 kernel mode (SgrmAgent.sys). The VTL 1 logic running in the enclave can
call out to these VTL 0 components with the goal of requesting assists that
provide a range of facilities, including NT kernel synchronize primitives,
page mapping capabilities, and so on.
As an example of how this mechanism works, SGRA is capable of
allowing the VTL 1 assertion engine to directly read VTL 0–owned physical
pages. The enclave requests a mapping of an arbitrary page via an assist. The
page would then be locked and mapped into the SgrmBroker VTL 0 address
space (making it resident). As VBS enclaves have direct access to the host
process address space, the secure logic can read directly from the mapped
virtual addresses. These reads must be synchronized with the VTL 0 kernel
itself. The VTL 0 resident broker agent (SgrmAgent.sys driver) is also used
to perform synchronization.
Assertion logic
As mentioned earlier, SGRA asserts system security properties at runtime.
These assertions are executed within the assertion engine hosted in the VBS-
based enclave. Signed Lua bytecode describing the assertion logic is provided
to the assertion engine during start up.
Assertions are run periodically. When a violation of an asserted property is
discovered (that is, when the assertion “fails”), the failure is recorded and
stored within the enclave. This failure will be exposed to a relying party in
the runtime report that is generated and signed (with the session certificate)
within the enclave.
An example of the assertion capabilities provided by SGRA are the asserts
surrounding various executive process object attributes—for example, the
periodic enumeration of running processes and the assertion of the state of a
process’s protection bits that govern protected process policies.
The flow for the assertion engine performing this check can be
approximated to the following steps:
1. 
The assertion engine running within VTL 1 calls into its VTL 0 host
process (SgrmBroker) to request that an executive process object be
referenced by the kernel.
2. 
The broker process forwards this request to the kernel mode agent
(SgrmAgent), which services the request by obtaining a reference to
the requested executive process object.
3. 
The agent notifies the broker that the request has been serviced and
passes any necessary metadata down to the broker.
4. 
The broker forwards this response to the requesting VTL 1 assertion
logic.
5. 
The logic can then elect to have the physical page backing the
referenced executive process object locked and mapped into its
accessible address space; this is done by calling out of the enclave
using a similar flow as steps 1 through 4.
6. 
Once the page is mapped, the VTL 1 engine can read it directly and
check the executive process object protection bit against its internally
held context.
7. 
The VTL 1 logic again calls out to VTL 0 to unwind the page
mapping and kernel object reference.
Reports and trust establishment
A WinRT-based API is exposed to allow relying parties to obtain the SGRA
session certificate and the signed session and runtime reports. This API is not
public and is available under NDA to vendors that are part of the Microsoft
Virus Initiative (note that Microsoft Defender Advanced Threat Protection is
currently the only in-box component that interfaces directly with SGRA via
this API).
The flow for obtaining a trusted statement from SGRA is as follows:
1. 
A session is created between the relying party and SGRA.
Establishment of the session requires a network connection. The
SgrmEnclave assertion engine (running in VTL-1) generates a public-
private key pair, and the SgrmBroker protected process retrieves the
TCG log and the VBS attestation report, sending them to Microsoft’s
System Guard attestation service with the public component of the
key generated in the previous step.
2. 
The attestation service verifies the TCG log (from the TPM) and the
VBS attestation report (as proof that the logic is running within a
VBS enclave) and generates a session report describing the attested
boot time properties of the device. It signs the public key with an
SGRA attestation service intermediate key to create a certificate that
will be used to verify runtime reports.
3. 
The session report and the certificate are returned to the relying party.
From this point, the relying party can verify the validity of the session
report and runtime certificate.
4. 
Periodically, the relying party can request a runtime report from
SGRA using the established session: the SgrmEnclave assertion
engine generates a runtime report describing the state of the assertions
that have been run. The report will be signed using the paired private
key generated during session creation and returned to the relying
party (the private key never leaves the enclave).
5. 
The relying party can verify the validity of the runtime report against
the runtime certificate obtained earlier and make a policy decision
based on both the contents of the session report (boot-time attested
state) and the runtime report (asserted state).
SGRA provides some API that relying parties can use to attest to the state
of the device at a point in time. The API returns a runtime report that details
the claims that Windows Defender System Guard runtime attestation makes
about the security posture of the system. These claims include assertions,
which are runtime measurements of sensitive system properties. For
example, an app could ask Windows Defender System Guard to measure the
security of the system from the hardware-backed enclave and return a report.
The details in this report can be used by the app to decide whether it
performs a sensitive financial transaction or displays personal information.
As discussed in the previous section, a VBS-based enclave can also expose
an enclave attestation report signed by a VBS-specific signing key. If
Windows Defender System Guard can obtain proof that the host system is
running with VSM active, it can use this proof with a signed session report to
ensure that the particular enclave is running. Establishing the trust necessary
to guarantee that the runtime report is authentic, therefore, requires the
following:
1. 
Attesting to the boot state of the machine; the OS, hypervisor, and
Secure Kernel (SK) binaries must be signed by Microsoft and
configured according to a secure policy.
2. 
Binding trust between the TPM and the health of the hypervisor to
allow trust in the Measured Boot Log.
3. 
Extracting the needed key (VSM IDKs) from the Measured Boot Log
and using these to verify the VBS enclave signature (see Chapter 12
for further details).
4. 
Signing of the public component of an ephemeral key-pair generated
within the enclave with a trusted Certificate Authority to issue a
session certificate.
5. 
Signing of the runtime report with the ephemeral private key.
Networking calls between the enclave and the Windows Defender System
Guard attestation service are made from VTL 0. However, the design of the
attestation protocol ensures that it is resilient against tampering even over
untrusted transport mechanisms.
Numerous underlying technologies are required before the chain of trust
described earlier can be sufficiently established. To inform a relying party of
the level of trust in the runtime report that they can expect on any particular
configuration, a security level is assigned to each Windows Defender System
Guard attestation service-signed session report. The security level reflects the
underlying technologies enabled on the platform and attributes a level of trust
based on the capabilities of the platform. Microsoft is mapping the
enablement of various security technologies to security levels and will share
this when the API is published for third-party use. The highest level of trust
is likely to require the following features, at the very least:
■    VBS-capable hardware and OEM configuration.
■    Dynamic root-of-trust measurements at boot.
■    Secure boot to verify hypervisor, NT, and SK images.
■    Secure policy ensuring Hypervisor Enforced Code Integrity (HVCI)
and kernel mode code integrity (KMCI), test-signing is disabled, and
kernel debugging is disabled.
■    The ELAM driver is present.
Conclusion
Windows is able to manage and run multiple virtual machines thanks to the
Hyper-V hypervisor and its virtualization stack, which, combined together,
support different operating systems running in a VM. Over the years, the two
components have evolved to provide more optimizations and advanced
features for the VMs, like nested virtualization, multiple schedulers for the
virtual processors, different types of virtual hardware support, VMBus, VA-
backed VMs, and so on.
Virtualization-based security provides to the root operating system a new
level of protection against malware and stealthy rootkits, which are no longer
able to steal private and confidential information from the root operating
system’s memory. The Secure Kernel uses the services supplied by the
Windows hypervisor to create a new execution environment (VTL 1) that is
protected and not accessible to the software running in the main OS.
Furthermore, the Secure Kernel delivers multiple services to the Windows
ecosystem that help to maintain a more secure environment.
The Secure Kernel also defines the Isolated User Mode, allowing user
mode code to be executed in the new protected environment through trustlets,
secure devices, and enclaves. The chapter ended with the analysis of System
Guard Runtime Attestation, a component that uses the services exposed by
the Secure Kernel to measure the workstation’s execution environment and to
provide strong guarantees about its integrity.
In the next chapter, we look at the management and diagnostics
components of Windows and discuss important mechanisms involved with
their infrastructure: the registry, services, Task scheduler, Windows
Management Instrumentation (WMI), kernel Event Tracing, and so on.
CHAPTER 10
Management, diagnostics, and
tracing
This chapter describes fundamental mechanisms in the Microsoft Windows
operating system that are critical to its management and configuration. In
particular, we describe the Windows registry, services, the Unified
Background process manager, and Windows Management Instrumentation
(WMI). The chapter also presents some fundamental components used for
diagnosis and tracing purposes like Event Tracing for Windows (ETW),
Windows Notification Facility (WNF), and Windows Error Reporting
(WER). A discussion on the Windows Global flags and a brief introduction
on the kernel and User Shim Engine conclude the chapter.
The registry
The registry plays a key role in the configuration and control of Windows
systems. It is the repository for both systemwide and per-user settings.
Although most people think of the registry as static data stored on the hard
disk, as you’ll see in this section, the registry is also a window into various
in-memory structures maintained by the Windows executive and kernel.
We’re starting by providing you with an overview of the registry structure,
a discussion of the data types it supports, and a brief tour of the key
information Windows maintains in the registry. Then we look inside the
internals of the configuration manager, the executive component responsible
for implementing the registry database. Among the topics we cover are the
internal on-disk structure of the registry, how Windows retrieves
configuration information when an application requests it, and what measures
are employed to protect this critical system database.
Viewing and changing the registry
In general, you should never have to edit the registry directly. Application
and system settings stored in the registry that require changes should have a
corresponding user interface to control their modification. However, as we
mention several times in this book, some advanced and debug settings have
no editing user interface. Therefore, both graphical user interface (GUI) and
command-line tools are included with Windows to enable you to view and
modify the registry.
Windows comes with one main GUI tool for editing the registry—
Regedit.exe—and several command-line registry tools. Reg.exe, for instance,
has the ability to import, export, back up, and restore keys, as well as to
compare, modify, and delete keys and values. It can also set or query flags
used in UAC virtualization. Regini.exe, on the other hand, allows you to
import registry data based on text files that contain ASCII or Unicode
configuration data.
The Windows Driver Kit (WDK) also supplies a redistributable
component, Offregs.dll, which hosts the Offline Registry Library. This
library allows loading registry hive files (covered in the “Hives” section later
in the chapter) in their binary format and applying operations on the files
themselves, bypassing the usual logical loading and mapping that Windows
requires for registry operations. Its use is primarily to assist in offline registry
access, such as for purposes of integrity checking and validation. It can also
provide performance benefits if the underlying data is not meant to be visible
by the system because the access is done through local file I/O instead of
registry system calls.
Registry usage
There are four principal times at which configuration data is read:
■    During the initial boot process, the boot loader reads configuration
data and the list of boot device drivers to load into memory before
initializing the kernel. Because the Boot Configuration Database
(BCD) is really stored in a registry hive, one could argue that registry
access happens even earlier, when the Boot Manager displays the list
of operating systems.
■    During the kernel boot process, the kernel reads settings that specify
which device drivers to load and how various system elements—such
as the memory manager and process manager—configure themselves
and tune system behavior.
■    During logon, Explorer and other Windows components read per-user
preferences from the registry, including network drive-letter
mappings, desktop wallpaper, screen saver, menu behavior, icon
placement, and, perhaps most importantly, which startup programs to
launch and which files were most recently accessed.
■    During their startup, applications read systemwide settings, such as a
list of optionally installed components and licensing data, as well as
per-user settings that might include menu and toolbar placement and a
list of most-recently accessed documents.
However, the registry can be read at other times as well, such as in
response to a modification of a registry value or key. Although the registry
provides asynchronous callbacks that are the preferred way to receive change
notifications, some applications constantly monitor their configuration
settings in the registry through polling and automatically take updated
settings into account. In general, however, on an idle system there should be
no registry activity and such applications violate best practices. (Process
Monitor, from Sysinternals, is a great tool for tracking down such activity
and the applications at fault.)
The registry is commonly modified in the following cases:
■    Although not a modification, the registry’s initial structure and many
default settings are defined by a prototype version of the registry that
ships on the Windows setup media that is copied onto a new
installation.
■    Application setup utilities create default application settings and
settings that reflect installation configuration choices.
■    During the installation of a device driver, the Plug and Play system
creates settings in the registry that tell the I/O manager how to start
the driver and creates other settings that configure the driver’s
operation. (See Chapter 6, “I/O system,” in Part 1 for more
information on how device drivers are installed.)
■    When you change application or system settings through user
interfaces, the changes are often stored in the registry.
Registry data types
The registry is a database whose structure is similar to that of a disk volume.
The registry contains keys, which are similar to a disk’s directories, and
values, which are comparable to files on a disk. A key is a container that can
consist of other keys (subkeys) or values. Values, on the other hand, store
data. Top-level keys are root keys. Throughout this section, we’ll use the
words subkey and key interchangeably.
Both keys and values borrow their naming convention from the file
system. Thus, you can uniquely identify a value with the name mark, which
is stored in a key called trade, with the name trade\mark. One exception to
this naming scheme is each key’s unnamed value. Regedit displays the
unnamed value as (Default).
Values store different kinds of data and can be one of the 12 types listed in
Table 10-1. The majority of registry values are REG_DWORD,
REG_BINARY, or REG_SZ. Values of type REG_DWORD can store
numbers or Booleans (true/false values); REG_BINARY values can store
numbers larger than 32 bits or raw data such as encrypted passwords;
REG_SZ values store strings (Unicode, of course) that can represent
elements such as names, file names, paths, and types.
Table 10-1 Registry value types
Value Type
Description
REG_NONE
No value type
REG_SZ
Fixed-length Unicode string
REG_EXPAND_SZ
Variable-length Unicode string that can 
have embedded environment variables
REG_BINARY
Arbitrary-length binary data
REG_DWORD
32-bit number
REG_DWORD_BIG_E
NDIAN
32-bit number, with high byte first
REG_LINK
Unicode symbolic link
REG_MULTI_SZ
Array of Unicode NULL-terminated strings
REG_RESOURCE_LIS
T
Hardware resource description
REG_FULL_RESOURC
E_DESCRIPTOR
Hardware resource description
REG_RESOURCE_REQ
UIREMENTS_LIST
Resource requirements
REG_QWORD
64-bit number
The REG_LINK type is particularly interesting because it lets a key
transparently point to another key. When you traverse the registry through a
link, the path searching continues at the target of the link. For example, if
\Root1\Link has a REG_LINK value of \Root2\RegKey and RegKey contains
the value RegValue, two paths identify RegValue: \Root1\Link\RegValue and
\Root2\RegKey\RegValue. As explained in the next section, Windows
prominently uses registry links: three of the six registry root keys are just
links to subkeys within the three nonlink root keys.
Registry logical structure
You can chart the organization of the registry via the data stored within it.
There are nine root keys (and you can’t add new root keys or delete existing
ones) that store information, as shown in Table 10-2.
Table 10-2 The nine root keys
Root Key
Description
HKEY_CURREN
T_USER
Stores data associated with the currently logged-on 
user
HKEY_CURREN
T_USER_LOCAL
_SETTINGS
Stores data associated with the currently logged-on 
user that are local to the machine and are excluded 
from a roaming user profile
HKEY_USERS
Stores information about all the accounts on the 
machine
HKEY_CLASSE
S_ROOT
Stores file association and Component Object 
Model (COM) object registration information
HKEY_LOCAL_
MACHINE
Stores system-related information
HKEY_PERFOR
MANCE_DATA
Stores performance information
HKEY_PERFOR
Stores text strings that describe performance 