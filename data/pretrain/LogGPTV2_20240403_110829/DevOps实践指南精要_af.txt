2012年年使⽤用的统计技术是异常值检测
⾸首先计算什什么是当前正确的状态
识别不不匹配的节点并移除
可以⾃自动标记错误⾏行行为的节点，
⽽而不不⽤用定义什什么是正确的⾏行行为
不不⽤用告知运维做什什么事情，⽽而是⾃自动处理理
使⽤用平均值和标准差探测潜在问题
解决报警疲劳的问题
提升信噪⽐比的⽐比率，聚焦在异常值
假如分析每天未授权的登录数，收集
的数据符合⾼高斯分布
设置超过三倍标准差则报警
只有0.3%的数据会触发报警
⾮非预期的结果则报警
分析之前服务故障（如30天），建⽴立遥测列列表，
哪些是可以提前和更更快发现或诊断问题
当遥测数据不不是⾼高斯分布
运维中有些数据是卡⽅方分布，会引发问题
Case：Auto-Scaling Capacity at 
Netﬂix (2012)
使⽤用反常探测技术
统计技术：smoothing
Fast Fourier Transforms, 
Kolmogorov-Smirnov test
Graphite and Grafana tool
Case：Advanced Anomaly 
Detection (2014)
16. 启动反馈，开发和
运维可以安全部署代码
仅仅⾃自动化部署流程是不不⾜足够的
还需要集成⽣生产遥测到部署⼯工作
建⽴立⽂文化规范，每个⼈人都对整个流⽔水线的健康负责
使⽤用遥测，让部署更更安全
为MTTR优化⽽而不不是MTBF
从错误快速恢复⽽而不不是试图防⽌止错误
⽬目标是部署流⽔水线在错误到达⽣生产之前捕获，但仍
然会有未发现的，需要通过⽣生产遥测快速恢复服务
关闭功能开关（⽆无需重新部署）
向前修复（代码修复并通过流⽔水线部署）
回滚（开关、蓝绿或⾦金金丝雀）
Etsy向前修复例例⼦子
开发与运维轮值共享寻呼
下游运维发现的问题，在上游开发被按低优
先级处理理，导致持续混乱和中断运维⼯工作
处理理办法：价值流中的每个⼈人共享
下游处理理运⾏行行事故的职责
开发，开发经理理，架构师轮值寻呼
每个⼈人获得上游所做的架构和代码决策的反馈
当半夜两点把开发叫醒，缺陷修复⽐比以前更更快
越来越少的公司有专职的on-call团队，⽽而是触及到⽣生
产代码和环境的每个⼈人，在服务故障时都能被联系到
让开发跟随下游⼯工作
⽤用户体验设计（UX）观察
让开发看到下游⼯工作如何影响产品，
最终运⾏行行到⽣生产环境
直接地看到客户的困难
做出更更好更更知情的决策
将⾮非功能需求加⼊入到backlog
让开发开始⾃自管理理他们的产品服务
Google让开发组⾃自管理理他们在⽣生产环境的
服务，直到符合集中的运维组管理理的资格
防⽌止有问题的⾃自管理理服务发布到⽣生产导
致⻛风险，需要定义必须达到的启动要求
运维⼯工程师是顾问⻆角⾊色，帮助服务具备
上⽣生产的条件
创建Launch guidance
Defect counts and severity
Type/frequency of pager alerts
Monitoring coverage
System architecture
解耦⽀支持⾼高频部署
Deployment process
可预测，确定的，充⾜足⾃自动化
Production hygiene
⾜足够的好的⽣生产习惯
同时要关注安全和合规⻛风险
服务退还机制
⽣生产服务变得脆弱，运维可以把产品
⽀支持职责交还给开发
Case：The Launch and Hand-oﬀ 
Readiness Review at Google (2010)
17. 集成假设驱动开发和A/B测试
A/B测试：在处理理（变更更功能、设计元素、背景颜⾊色）和
结果（转化率、平均订单⼤大⼩小）之间建⽴立因果关系
验证商业模型最低效的⽅方法就是构建整个产品，
看是否预期的需求真实存在
当软件部署和发布快速、安全，在线⽤用户
实验可以在⾼高负载和收益时段进⾏行行
微软分析和⽤用户体验组
只有1/3的实验，可以改进关键指标
2/3的实验⽆无影响，即使是合理理、好的想法
这些⽆无⽤用功能让代码复杂和增加维护成本
浪费了了机会成本
集成A/B测试到设计、执⾏行行、测试和部署功能
进⾏行行有意义的⽤用户研究和实验
集成A/B测试到发布
功能开关
Etsy A/B API，Optimizely, Google Analytics
集成A/B测试到功能计划
在客户获取漏漏⽃斗的上下⽂文中设计实验
Case： Doubling Revenue Growth through Fast Release 
Cycle Experimentation at Yahoo! Answers (2010)
18. 创建审查和协作流程，
增强当前⼯工作质量量
Case：Peer review 
process at GitHub
Pull request
增加质量量，让部署更更安全，集成在
每个⼈人⽇日常⼯工作流程中
GitHub Flow
创建叙述命名的分⽀支
提交代码到本地分⽀支，有规律律的push到服务器器上的分⽀支
需要反馈或帮助，或者准备好合并，打开⼀一个pull request
得到期望审核和必要的批准后，合并到master
push到master后，⼯工程师部署到⽣生产环境
2012年年执⾏行行12602次部署
8⽉月23⽇日563构建和175次⽣生产部署
变更更管理理流程的危险
过度控制的变更更
传统变更更控制，⻓长前置时间，
降低反馈的⼒力力量量和及时性
当变更更控制失败发⽣生
需要填写变更更请求表，回答更更多问题
需要更更多授权，更更⾼高管理理及审批
需要更更多前置时间审批
TPS：最接近问题的⼈人，⼀一般知道的更更多
做⼯工作的⼈人和决策⼯工作的⼈人离的越远，越差的结果
2014年年状态报告：⾼高绩效组织更更多依靠
peer review，更更少的外部变更更审批
协作和变更更排期
解耦的架构
聊天室通知变更更（同时做A/B测试），主动找到冲突
紧耦合的架构
谨慎安排变更更排期，每个团队代表在⼀一起排期和排序
基础架构变更更（⽹网络路路由等）
技术⼿手段：冗余、切换、模拟
变更更Peer review
开发code review，其实是任何变更更通⽤用的
近距离⼯工作的同事仔细观察发现错误
需要review的时点：代码提交到主⼲干前
⼩小批量量code review
变更更和潜在⻛风险⾮非线性关系
提交100⾏行行代码⽐比10⾏行行代码，错误⻛风险不不⽌止10倍
开发应该⼩小批量量增量量⼯工作，⽽而不不是⻓长分⽀支
Guidelines for code reviews
每个⼈人提交主⼲干前，要有其他⼈人review变更更
每个⼈人监控他们同组伙伴的提交流，
发现潜在冲突
定义哪些变更更是⾼高⻛风险，需要SME
审核（数据库变更更、安全敏敏感模块）
如果某⼈人提交过⼤大，让他拆分成多个
code review形式
结对编程
Over-the-shoulder
⾛走读代码
Email轮查
⼯工具辅助
Gerrit，Github pull request
Case：Code Reviews at Google (2010)
⼿手⼯工测试和冻结变更更的潜在危险
⼿手⼯工测试时间更更⻓长，更更少部署变更更
增⼤大了了部署批量量
变更更成功率下降
故障数和MTTR升⾼高
结对编程，改进变更更
结对编程
2000年年之前XP提出，两个⼯工程师在同⼀一台⼯工作站⼯工作
结对
⼀一个司机，⼀一个领航员
领航员也要考虑⼯工作战略略⽅方向，提出改进
司机专注完成战术上的任务
另外⼀一种结对增强TDD
⼀一个⼯工程师写⾃自动化测试
另外⼀一个⼯工程师写代码
2011年年数据调查
结对编程⽐比两个⼈人单独编码慢15%
⽆无错误代码从75%提升到85%
结对编程在组织中传播知识，增强团队信息流动
Case：Pair Programming 
Replacing Broken Code Review 
Processes at Pivotal Labs (2011)
评估pull request流程的有效性
不不好的pull request
没有充⾜足的上下⽂文
没有⽂文档，变更更想要做什什么
好的pull request
对变更更⾜足够细致的描述
怎么进⾏行行的变更更
潜在的⻛风险和对策
如果部署出现⾮非预期
增加到pull request
链接到相应的问题
不不是责备，⽽而是坦⽩白的谈话，
将来如何规避问题
⽆无谓的砍掉官僚僚流程
总结
⽣生机型的⽂文化的必要部分
让变更更实施⼈人完全拥有他们变更更的质量量
Part V:The Third Way, The Technical 
Practices of Learning
19. 注⼊入学习到⽇日常⼯工作
在复杂系统中⼯工作
Self-diagnostics and Self-improvement 
让解决⽅方案对整个组织可⽤用
创建动态系统