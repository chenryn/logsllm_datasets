### 2012年使用的统计技术：异常值检测

**概述**
- **目标**：识别和移除不匹配的节点，自动标记错误行为。
- **方法**：使用平均值和标准差来探测潜在问题，解决报警疲劳，提高信噪比。

**具体步骤**
1. **计算正确状态**：首先确定当前正确的状态。
2. **识别异常节点**：通过计算平均值和标准差，识别不符合正常状态的节点，并将其移除。
3. **自动标记错误行为**：无需定义什么是正确的行为，系统可以自动标记错误行为。
4. **自动处理**：系统自动处理异常，无需告知运维人员具体操作。

**应用案例**
- **每天未授权登录数分析**：数据符合高斯分布，设置超过三倍标准差则报警，只有0.3%的数据会触发报警。
- **服务故障分析**：收集过去30天的服务故障数据，建立遥测列表，提前发现和诊断问题。
- **非高斯分布数据**：某些运维数据（如卡方分布）可能会引发问题。

**案例研究**
- **Netflix (2012)**：使用反常探测技术，包括平滑处理、快速傅里叶变换、Kolmogorov-Smirnov检验等。工具包括Graphite和Grafana。
- **高级异常检测 (2014)**：启动反馈机制，使开发和运维能够安全地部署代码。自动化部署流程结合生产遥测，确保整个流水线的健康。

### 提升部署安全性

**关键措施**
1. **集成生产遥测**：将遥测数据集成到部署工作中，确保部署更安全。
2. **优化MTTR**：重点在于从错误中快速恢复，而不是试图防止所有错误。
3. **关闭功能开关**：无需重新部署即可关闭功能。
4. **向前修复**：通过代码修复并通过流水线部署。
5. **回滚**：使用开关、蓝绿或金丝雀策略进行回滚。

**案例**
- **Etsy**：开发与运维轮值共享寻呼，下游运维发现的问题在上游开发中得到优先处理，减少持续混乱和中断。

### 用户体验设计

**目标**
- **让开发看到影响**：通过用户体验设计观察，让开发人员直接看到他们的工作如何影响产品和服务。
- **做出更好决策**：基于客户的实际困难，做出更好的决策。

**实践**
- **将非功能需求加入backlog**：让开发团队自管理他们的产品服务。
- **Google**：开发组自管理他们在生产环境的服务，直到符合集中运维组管理的资格。运维工程师作为顾问角色，帮助服务具备上生产的条件。

### 集成假设驱动开发和A/B测试

**A/B测试**
- **定义**：在处理（变更功能、设计元素、背景颜色）和结果（转化率、平均订单大小）之间建立因果关系。
- **验证商业模型**：最高效的方法是通过A/B测试验证需求，而不是构建整个产品。

**案例**
- **微软**：只有三分之一的实验能改进关键指标，三分之二的实验无影响。
- **Yahoo! Answers (2010)**：通过快速发布周期实验，实现收入增长翻倍。

### 创建审查和协作流程

**GitHub Flow**
- **Pull Request**：增加质量，让部署更安全，集成到每个人的日常工作中。
- **步骤**：
  1. 创建命名分支。
  2. 提交代码到本地分支并定期推送到服务器上的分支。
  3. 打开一个pull request以获取反馈和批准。
  4. 合并到master后，工程师部署到生产环境。

**变更管理**
- **危险**：过度控制的变更会导致长前置时间，降低反馈的及时性和力量。
- **高绩效组织**：更多依靠同行评审，较少外部变更审批。

**结对编程**
- **定义**：两个工程师在同一台工作站工作，一个司机，一个领航员。
- **好处**：提高代码质量，传播知识，增强团队信息流动。

**评估Pull Request流程的有效性**
- **好的Pull Request**：详细描述变更，说明变更内容、潜在风险和对策。
- **不好的Pull Request**：缺乏上下文和文档，无法理解变更意图。

### 注入学习到日常工作中

**动态系统**
- **自我诊断和自我改进**：让解决方案在整个组织中可用。
- **创建生机勃勃的文化**：让变更实施者完全拥有他们变更的质量。

通过这些技术和实践，可以显著提升系统的可靠性和团队的协作效率。