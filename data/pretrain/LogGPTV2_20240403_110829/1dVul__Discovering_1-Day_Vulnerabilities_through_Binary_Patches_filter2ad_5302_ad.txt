### Decrease in Performance

**Table II: Composition of 22 Branches Reachable by Invoking 1dVul-Explorer**

| Category | Number of Branches |
| --- | --- |
| Only 1dVul | 7 |
| 1dVul ∩ Driller (only) | 11 |
| 1dVul ∩ AFLGo (only) | 1 |
| 1dVul ∩ Driller ∩ AFLGo | 3 |

**Table III: Further Analysis of 13 Branches Where 1dVul Outperformed Driller**

- **Directed Fuzzing**: 2 branches
- **Interaction of Directed Fuzzing and Directed Symbolic Execution**: 5 branches
- **Directed Symbolic Execution**: 6 branches

**Figure 4: Average Time Spent on Input Generation for ToIG**

- The blue bars represent the average time spent by 1dVul, Driller, and AFLGo on input generation for each target.
- The red bars indicate the average time for the 91 targets that all three approaches successfully generated inputs for.
- The red line shows the number of targets each approach successfully generated inputs for.

### Detailed Discussions

For the 130 target branches that 1dVul successfully generated inputs within the limited time budget, 108 branches could be reached by invoking only the directed fuzzing engine of 1dVul. The remaining 22 branches required interaction with the directed symbolic execution engine.

#### 1. Effectiveness of Directed Fuzzing

Among the 108 targets that can be handled by 1dVul's directed fuzzing engine alone, 88 could also be handled by AFLGo and Driller within the same time budget. Therefore, we focus on the remaining 20 targets to evaluate the effectiveness of our directed fuzzing strategy.

**Table I: Composition of 108 Branches Reachable by 1dVul-Fuzzer Only**

| Category | Number of Branches |
| --- | --- |
| Only 1dVul | 10 |
| 1dVul ∩ Driller (only) | 4 |
| 1dVul ∩ AFLGo (only) | 6 |
| 1dVul ∩ Driller ∩ AFLGo | 88 |

**Figure 5: Change in Distance Between Inputs and Targets Over Time for 20 Branches**

- The x-axis represents time in hours.
- The y-axis represents the normalized percentage value of the distances.
- For each approach, the average distance is plotted every 15 minutes to show the overall trend.

**Figure 6: Change in Distance Between Inputs and Targets Over Time for 14 Branches Using 1dVul**

#### 2. Example of Directed Symbolic Execution

Consider the application KPRCA_00019. To reach the target branch, `session_handle_packet()` must be called and return a non-zero value. 1dVul first uses directed fuzzing to find paths that can reach the condition in line 4. Then, it interacts with directed symbolic execution to generate an input that makes the function return a non-zero value.

**Listing 3: Example of Branch Selection Strategy**

```c
if (hdr.length + sizeof(hdr) == offset)
    offset = -1;
if (session_handle_packet() != 0)
    break;
```

#### 3. Limitations

There are 79 target branches that 1dVul failed to reach. These can be categorized as follows:

1. **Iteration-Dependent Triggers**: Some branches can only be triggered when a specific number of iterations is met.
2. **Conditional Triggers**: Some branches can only be triggered after other target branches in the same application have been covered.
3. **Unsupported Assembly Instructions**: Some branches involve assembly instructions not supported by 1dVul.

Although 1dVul generated inputs for more target branches than Driller and AFLGo, there was one target branch that 1dVul failed to reach but both Driller and AFLGo succeeded. Combining these approaches may achieve greater efficacy.

### Related Work

#### Techniques Based on Fuzzing

Traditional greybox fuzzers, such as AFL and LibFuzzer, are designed to maximize coverage without specifically targeting functions or branches. Recent works like AFLGo and Hawkeye propose directed greybox fuzzing to generate test seeds that can reach target sites and trigger crashes. While these techniques outperform AFL in ToIG, generating inputs that pass through complex condition checks remains challenging.

#### Techniques Based on Symbolic Execution

APEG leverages symbolic execution to generate exploits for vulnerabilities. It identifies a mix point, performs dynamic analysis to generate constraints, and uses static analysis to explore paths and constraints. APEG has generated exploits for 5 Microsoft programs but requires suitable inputs. Our approach does not rely on special inputs and combines directed greybox fuzzing to mitigate path explosion. Other works, such as eXpress, Directed Symbolic Execution, Symcretic Execution, and KATCH, use various heuristics to improve the efficiency of ToIG. Our directed symbolic execution engine uses dominator sequences for path exploration, which is more fine-grained and accurate.

#### Hybrid Techniques

Hybrid techniques, such as Driller, combine greybox fuzzing and symbolic execution. However, most are coverage-oriented. Our approach is the first to combine directed fuzzing and directed symbolic execution for ToIG.

#### Crash Reproduction and Test Suite Augmentation

Techniques like BugRedux, RECORE, and Star aim at crash reproduction and require an input that already reaches the target location. Approaches for test suite augmentation, such as those in [32, 33], generate inputs to execute different paths between two program versions but require sufficient test inputs to cover the original version, which is not always feasible.

### Conclusion

In this paper, we presented a new solution to improve the efficiency of ToIG using a distance-based directed fuzzing mechanism and a dominator-based directed symbolic execution mechanism. We implemented 1dVul, a tool for 1-day vulnerability discovery at the binary level, and evaluated it on binaries from the DARPA Cyber Grant Challenge Qualifying Event. 1dVul successfully generated inputs for 130 out of 209 patch targets, outperforming AFLGo and Driller. Additionally, 1dVul runs 2.2X and 3.6X faster than AFLGo and Driller, respectively, and confirmed 96 vulnerabilities in unpatched programs.

### Acknowledgment

We thank anonymous reviewers and our shepherd Miguel Correia for their helpful comments. This work is supported by the Chinese National Natural Science Foundation, National Key Research and Development Program of China, Strategic Priority Research Program of the CAS, Foundation of Science and Technology on Information Assurance Laboratory, National Top-notch Youth Talents Program of China, Youth Innovation Promotion Association CAS, Beijing Nova Program, Beijing Natural Science Foundation, and National Frontier Science and Technology Innovation Project.

### References

[References listed as provided in the original text]