decreases sharply.
TABLE II. Makeup of 22 branches that can be reached by additionally
invoking 1dVul-Explorer
only 1dVul
1dVul ∩ Driller
(only)
1dVul ∩ AFLGo
(only)
1dVul ∩ Driller
∩ AFLGo
7
11
1
3
TABLE III further looks into the 13 branches that 1dVul
outperformed Driller. As we can see, 2 of them beneﬁt
from directed fuzzing, 5 of them beneﬁt from interaction of
directed fuzzing and directed symbolic execution, while the
remaining 6 branches take advantage of our directed symbolic
Fig. 4. Average time spend for ToIG (The blue bars show the average time
1dVul, Driller and AFLGo spend respectively of input generation for each
target. The red bars show the average time for the 91 targets that all three
approaches successfully generate inputs for. The number of targets each
approach sucessfullt generated inputs for is shown by the red line.)
In the remainder of this section, we will discuss how each
directed strategy used in 1dVul contributes to the result and
the possible limitations of 1dVul.
C. Detailed Discussions
For the 130 target branches that 1dVul have successfully
generated inputs during the limited time budget, 108 of the
branches could be reached by invoking the directed fuzzing
engine of 1dVul only, and the remaining 22 requires interaction
with the directed symbolic execution engine.
1) Effectiveness of Directed Fuzzing: Among the 108 tar-
gets that can be handled by invoking 1dVul’s directed fuzzing
engine only, 88 of them could also be handled by AFLGo
and Driller during the limited time budget. Therefore, we only
consider the rest 20 targets when discussing the effectiveness
of our directed fuzzing strategy. Shown as TABLE I, 10 out
of the 20 targets could only be covered by 1dVul. For the
remaining 10 targets, 4 of them can be handled by 1dVul and
Driller, the other 6 can be reached by 1dVul and AFLGo.
TABLE I. Makeup of 108 branches that can be reached by invoking 1dVul-
Fuzzer only
only 1dVul
1dVul ∩ Driller
(only)
1dVul ∩ AFLGo
(only)
1dVul ∩ Driller
∩ AFLGo
10
4
6
88
Fig. 5 shows that for each of the 20 branches, how the
distance between the target branch and the fuzzing trace
changes over time when using the three different approaches.
The x-axis is the time in hours and the y-axis is the normalized
percentage value of the distances. In order to show the
overall trend of how the distances change over time, for each
approach, we draw the average of the distances in each 15
minutes.
613
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 5. The change of distances between inputs and targets over time for 20 branches by using 1dVul, Driller and AFLGo respectively.
Fig. 6. The change of distances between inputs and targets over time for 14 branches by using 1dVul.
execution strategy only. Take application KPRCA_00019 as an
example. As shown in Listing 3, to reach the target branch,
session_handle_packet() must be called and return a non-
zero value. To generate such a value, 1dVul invokes directed
fuzzing ﬁrst to ﬁnd paths that could reach the condition in line
4, and then generate an input that could make the function
return a non-zero value by interacting with directed symbolic
execution.
TABLE III. contribution of each part of 1dVul
Part
NumOfTargets
Directed Fuzzing
Interaction
Directed Symbolic Execution
2
5
6
i f
{
1
2
3
4
( hdr . l e n g t h + s i z e o f ( hdr ) == o f f s e t )
o f f s e t = −1;
i f
( s e s s i o n _ h a n d l e _ p a c k e t ( )
!= 0 )
5
6
}
break ;
Listing 3. Example of illustrate branch selection strategy.
3) Limitations: There are 79 target branches that 1dVul
failed to reach. Those target branches can be classiﬁed into
three categories: 1) some of them can only be triggered
when speciﬁed iteration times is met; 2) some can only be
triggered when other target branches in the same application
have already been covered; 3) others are related with assemble
instructions that are not supported by 1dVul.
Although 1dVul generate inputs for more target branches
than Driller and AFLGo, there is one target branch that 1dVul
failed but both Driller and AFLGo succeeded. Therefore,
combining the three approaches together may be able to
achieve more efﬁcacy.
614
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
VI. RELATED WORK
Techniques based on fuzzing Traditional greybox fuzzers
(such as AFL, LibFuzzer, etc.) are designed to be coverage
oriented, and do not care specially about target functions or
branches. Recent works propose directed greybox fuzzing to
generate test seed that could reach the target sites and further
trigger crashes. AFLGo [8] utilizes simulated annealing, and
assigns more opportunities for test
inputs that are closer
to the target during fuzzing. The diversity of opportunities
increases as temperature decreases. Hawkeye [9] improves the
measure of power function of AFLGo, and leverages adaptive
mutation and seed prioritization to achieve the goal of reaching
targets rapidly. Although both of them have been proved to
outperform AFL in ToIG, generating inputs that could go
through complex condition checks remain challenging for
these type of techniques. FairFuzz [23] considers rare executed
branches as targets that should be covered in order to increase
code coverage. Hitting any of these targets will achieve the
goal of coverage incrementing, while our approach aimes at
generating inputs for all speciﬁed targets, especially targets
that are guarded by elaborate condition checks.
Techniques based on symbolic execution APEG [4] lever-
ages symbolic execution to generate an exploit for vulnerabil-
(cid:2). Its key idea is to identify a mix point
ity in P but ﬁxed in P
ﬁrst. It then performs dynamic analysis to generate constraints
for the execution trace before the point, and uses static analysis
to explore paths and constraints after the point. Finally, it
combines all constraints and tries to generate inputs that make
them satisﬁable. Although APEG has automatically generated
exploits for 5 Microsoft programs, its requirement of suitable
inputs is too strong in practice. Our approach does not rely
on special inputs, and combines directed greybox fuzzing to
mitigate the path explosion problem. There are quite a few
works that utilize various heuristics on the basic of symbolic
execution in order to improve the efﬁciency of ToIG. eXpress
[24] prunes irrelevant branches which cannot reach the target
to optimize its path exploration strategy. Directed symbolic
execution [25] presents a shortest-distance strategy which pri-
oritizes the path with shortest distance during path exploration
and proposes a call-chain-backward symbolic execution as the
guidance of exploration. Symcretic execution [26] combines
concrete forward execution with symbolic backward execution
to overcome its obstacles, such as solving complicated arith-
metic constraints and handling external method calls. KATCH
[27] applies a greedy path exploration strategy that prioritizes
the closest path and proposes two approaches to solve the
path infeasible problem. Our directed symbolic execution
engine employs dominator sequence as the guidance of path
exploration, which is more ﬁne-grained and accurate than call-
chain. Moreover, we decompose the problem of ToIG into a
series of problems each of which looks for inputs that could
reach the next dominator, in order to balance overheads and
utilities of directed symbolic execution.
Hybrid techniques Hybrid techniques,
represented by
Driller [10, 28], combine greybox fuzzing and symbolic ex-
ecution. However, most of them are designed to be coverage
oriented. To the best of our knowledge, our approach is the ﬁrst
solution of ToIG that combines directed fuzzing and directed
symbolic execution.
Works and techniques that aim at crash reproduction or test
suite augmentation solve similar problem as our approach.
However, they cannot be directly used to resolve the ToIG
problem. Techniques focus on crash reproduction, such as
BugRedux [29], RECORE [30] and Star [31], require an input
that can already reach the target location, while approaches
solving the ToIG problem need to generate such an input
by themselves. Works presented for test suite augmentation,
such as [32, 33], resolve the problem of generating input that
can execute different paths between two program versions.
However, one of their prerequisites is that there are already
sufﬁcient test inputs that can fully cover the order version
program, which is too strong in our situation.
VII. CONCLUSION
In this paper, we presented a new solution to improve the
efﬁciency of ToIG which utilizes a distance-based directed
fuzzing mechanism and a dominator-based directed symbolic
execution mechanism. To demonstrate its efﬁciency, we de-
signed and implemented 1dVul, a tool for 1-day vulnerability
discovering at binary-level, based on the solution. We eval-
uated our tool on binaries from the DARPA Cyber Grant
Challenge Qualifying Event. For 130 out of 209 patch targets
identiﬁed from the binaries, 1dVul successfully generated
inputs that could reach the targets in the patched programs,
while the state-of-the-art solutions AFLGo and Driller could
only reach 99 and 107 targets, respectively, within the same
limited time budget. Furthermore, 1dVul runs 2.2X and 3.6X
faster than AFLGo and Driller, respectively, and has conﬁrmed
96 vulnerabilities from the unpatched programs.
ACKNOWLEDGMENT
We would like to thank anonymous reviewers and our
shepherd Miguel Correia for their helpful comments. The work
is supported in part by Chinese National Natural Science
Foundation (U1836209, 61602470, 61802394, U1836211,
61728209), National Key Research and Development Pro-
gram of China (2016QY071405), Strategic Priority Re-
search Program of the CAS (XDC02040100, XDC02030200,
XDC02020200), Foundation of Science and Technology on
Information Assurance Laboratory (No. KJ-17-110), National
Top-notch Youth Talents Program of China, Youth Innovation
Promotion Association CAS, Beijing Nova Program, Beijing
Natural Science Foundation (No. JQ18011) and National
Frontier Science and Technology Innovation Project (No.
YJKYYQ20170070).
REFERENCES
[1] Z. Xu, B. Chen, M. Chandramohan, Y. Liu, and F. Song, “Spain:
security patch analysis for binaries towards understanding the
pain and pills,” in ICSE, 2017, pp. 462–472.
[2] J. Oh, “Fight against 1-day exploits: Difﬁng binaries vs anti-
difﬁng binaries,” Black Hat, 2009.
615
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
[3] Zynamics, “BinDiff,” Oct. 2017. [Online]. Available: https:
//www.zynamics.com/bindiff.html
[4] D. Brumley, P. Poosankam, D. Song, and J. Zheng, “Automatic
patch-based exploit generation is possible: Techniques and
implications,” in S&P, 2008, pp. 143–157.
[5] M. Zalewski, “american fuzzy lop,” Sep. 2017.
Available: http://lcamtuf.coredump.cx/aﬂ/
[Online].
[6] M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based
greybox fuzzing as markov chain,” in CCS, 2016, pp. 1032–
1043.
[7] L.
team, “libFuzzer
- a library for coverage-guided fuzz
testing,” Jan. 2018. [Online]. Available: https://llvm.org/docs/
LibFuzzer.html
[8] M. Böhme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury,
“Directed greybox fuzzing,” in CCS, 2017, pp. 2329–2344.
[9] H. Chen, Y. Xue, Y. Li, B. Chen, X. Xie, X. Wu, and Y. Liu,
“Hawkeye: Towards a desired directed grey-box fuzzer,” in CCS,
2018.
[10] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Cor-
betta, and et al., “Driller: Augmenting fuzzing through selective
symbolic execution,” in NDSS, 2016.
[11] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and
H. Bos, “Vuzzer: Application-aware evolutionary fuzzing,” in
NDSS, 2017.
[12] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and
A. Tiu, “Steelix: program-state based binary fuzzing,” in Pro-
ceedings of the 2017 11th Joint Meeting on Foundations of
Software Engineering, 2017, pp. 627–637.
in ISSTA, 2011, pp. 1–11.
[25] K.-K. Ma, K. Y. Phang, J. S. Foster, and M. Hicks, “Directed
symbolic execution,” in International Static Analysis Sympo-
sium, 2011, pp. 95–111.
[26] P. Dinges and G. Agha, “Targeted test input generation using
symbolic-concrete backward execution,” in ASE, 2014, pp. 31–
36.
[27] P. D. Marinescu and C. Cadar, “Katch: high-coverage testing of
software patches,” in Proceedings of the 2013 9th Joint Meeting
on Foundations of Software Engineering, 2013, pp. 235–245.
[28] B. S. Pak, “Hybrid fuzz testing: Discovering software bugs via
fuzzing and symbolic execution,” 2012.
[29] W. Jin and A. Orso, “Bugredux: reproducing ﬁeld failures for
in-house debugging,” in ICSE, 2012, pp. 474–484.
[30] J. Rößler, A. Zeller, G. Fraser, C. Zamﬁr, and G. Candea,
“Reconstructing core dumps,” in ICST, 2013, pp. 114–123.
[31] N. Chen and S. Kim, “Star: Stack trace based automatic crash
reproduction via symbolic execution,” IEEE TSE, vol. 41, no. 2,
pp. 198–220, 2015.
[32] Z. Xu and G. Rothermel, “Directed test suite augmentation,” in
APSEC, 2009, pp. 406–413.
[33] Z. Xu, Y. Kim, M. Kim, and G. Rothermel, “A hybrid directed
test suite augmentation technique,” in ISSRE, 2011, pp. 150–
159.
[13] M. Zalewski,
[Online]. Available:
20interprocedural%20analysis.pdf
[14] “Harmonic mean,” Aug. 2017.
“Interprocedural Analysis,” Aug.
2017.
https://cs.au.dk/~amoeller/spa/7%20-%
//en.wikipedia.org/wiki/Harmonic_mean
[Online]. Available: https:
[15] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed
Automated Random Testing,” in PLDI, 2005, pp. 213–223.
[16] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R.
Engler, “Exe: automatically generating inputs of death,” ACM
Transactions on Information and System Security (TISSEC),
vol. 12, no. 2, p. 10, 2008.
[17] M. Kurt, Compilers: Principles, Techniques, and Tools (2nd
Edition). Boston, MA, USA: Addison-Wesley Longman Pub-
lishing Co., Inc., 2006.
[18] D. Brumley, H. Wang, S. Jha, and D. Song, “Creating vulner-
ability signatures using weakest preconditions,” in Computer
Security Foundations Symposium, 2007, pp. 311–325.
[19] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel et al.,
“Sok:(state of) the art of war: Offensive techniques in binary
analysis,” in S&P, 2016, pp. 138–157.
[20] F. Bellard, “Qemu, a fast and portable dynamic translator,” in
USENIX Annual Technical Conference, FREENIX Track, 2005,
pp. 41–46.
[21] DARPA, “Cyber Grand Challenge,” Oct. 2017.
Available: http://cybergrandchallenge.com
[Online].
[22] DARPA, “Cyber Technical Paper Guidelines,” Oct. 2017. [On-
line]. Available: http://archive.darpamil/cybergrandchallenge_
competitorsite/Files/CGC_Technical_Paper_Guidelines.pdf.
[23] C. Lemieux and K. Sen, “Fairfuzz: Targeting rare branches to
rapidly increase greybox fuzz testing coverage,” CoRR, vol.
abs/1709.07101, 2017.
[24] K. Taneja, T. Xie, N. Tillmann, and J. de Halleux, “eXpress:
guided path exploration for efﬁcient regression test generation,”
616
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply.