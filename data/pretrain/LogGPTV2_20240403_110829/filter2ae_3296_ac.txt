协议，可能用户层还有更多。gadget API 属于三层的中间层。至底向上，三层分别是:
  1. _USB Controller Driver_ : 这是软件的最底层，通过寄存器、FIFO、DMA、IRQ 等其他手段直接和硬件打交道，通常称为 `UDC` (USB Device Controller) Driver。
  2. _Gadget Driver_ : 作为承上启下的部分，通过调用抽象的 UDC 驱动接口，底层实现了硬件无关的 USB function。主要用于实现前面提到的 USB 功能，包括处理 setup packet (ep0)、返回各类描述符、处理各类修改配置情况、处理各类 USB 事件以及 IN/OUT 的传输等等。
  3. _Upper Level_ : 通过 Gadget Driver 抽象的接口，实现基于 USB 协议的上层应用，比如 USB 网卡、声卡、文件存储、HID 设备等。
关于 Linux USB 子系统的详细设计结构，可以参考源码中的文档: [Linux USB
API](https://www.kernel.org/doc/html/v4.18/driver-api/usb/index.html)
，以及其他一些资料，如下所示:
  * 
  * 
  * 
## GadgetFS/ConfigFS
参考现有的 Linux 驱动，依葫芦画瓢可以很容易实现一个自定义的 USB
Gadget。但是这样存在一些问题，如果我想实现一个八声道的麦克风，还要重新写一遍驱动、编译、安装，明明内核中麦克风的功能已经有了，复制粘贴就显得很不优雅。
那么，有没有什么办法可以方便组合和复用现有的 gadget function 呢？在 Linux 3.11 中，引入了 USB Gadget
ConfigFS，提供了用户态的 API 来方便创建新的 USB 设备，并可以组合复用现有内核中的驱动。
前文提到的基于树莓派 Zero 实现的各类 USB 设备，大部分都是基于 Gadget ConfigFS 接口实现的。基于 configfs 创建 USB
gadget 的步骤一般如下:
    CONFIGFS_HOME=/sys/kernel/config/usb_gadget
    # 1. 新建一个 gadget，并写入实际的设备描述
    mkdir $CONFIGFS_HOME/mydev # 创建设备目录后，该目录下自动创建并初始化了一个设备模板
    cd $CONFIGFS_HOME/mydev
    echo 0x0100 > bcdDevice # Version 1.0.0
    echo 0x0200 > bcdUSB # USB 2.0
    echo 0x00 > bDeviceClass
    echo 0x00 > bDeviceProtocol
    echo 0x40 > bMaxPacketSize0
    echo 0x0104 > idProduct # Multifunction Composite Gadget
    echo 0x1d6b > idVendor # Linux Foundation
    # 2. 新建一个配置，并写入实际的配置描述
    mkdir configs/c.1 # 创建一个配置实例: .
    cd configs/c.1
    echo 0x01 > MaxPower
    echo 0x80 > bmAttributes
    # 3. 新建一个接口(function)，或者将已有接口链接到当前配置下
    cd $CONFIGFS_HOME/mydev
    mkdir functions/hid.usb0 # 创建一个 function 实例: .
    echo 1 > functions/hid.usb0/protocol
    echo 8 > functions/hid.usb0/report_length # 8-byte reports
    echo 1 > functions/hid.usb0/subclass
    ln -s functions/hid.usb0 configs/c.1
    # 4. 将当前 USB 设备绑定到 UDC 驱动中
    echo ls /sys/class/udc > $CONFIGFS_HOME/mydev/UDC
这样就实现了一个最简单的 USB gadget，当然要完整实现的话还可以添加字符串描述，以及增加各个端点的功能。使用 configfs 实现一个 USB
键盘的示例可以参考网上其他文章，比如 [Using RPi Zero as a Keyboard][kb]，或者 Github 上的开源项目，比如
[P4wnP1](https://github.com/RoganDawes/P4wnP1)。
有些人觉得 ConfigFS 配置起来很繁琐，所以开发了一些函数库(如 [libusbgx][libusbgx]) 来通过调用创建
gadget；有人觉得通过函数操作也还是繁琐，就创建了一些工具(如 [gt](https://github.com/kopasiak/gt))
来通过处理一个类似于 libconfig 的配置文件直接创建 gadget，不过笔者用得不多。
## FunctionFS
FunctionFS 最初是对 GadgetFS 的重写，用于支持实现用户态的 gadget function，并组合到现有设备中。这里说的
FunctionFS 实际上是新版基于 ConfigFS 的 GadgetFS 拓展。在上一节中说到创建设备 gadget 的第四步就是给对应的
configuration 添加 function，格式为 **function—type.instance-name** ，type
对应一个已有的内核驱动，比如上节中是 `hid`。
如果要使用当前内核中没有的 function 实现自定义的功能，那么内核还提供了一个驱动可以方便在用户态创建接口，该驱动就是 ffs 即
FunctionFS。使用 ffs 的方式也很简单，将上面第三步替换为:
    cd $CONFIGFS_HOME/mydev
    mkdir functions/ffs.usb0
    ln -s functions/ffs.usb0 configs/c.1
创建一个类型为 ffs，名称为 usb0 的function，然后挂载到任意目录:
    cd /mnt
    mount usb0 ffs -t functionfs
挂载完后， _/mnt/ffs/_ 目录下就已经有了一个 ep0 文件，如名字所言正是 USB 设备的零端点，用于收发 Controller
Transfer 数据以及各类事件。在该目录中可以创建其他的端点，并使用类似文件读写的操作去实现端点的读写，内核源码中提供了一个用户态应用示例，代码在
_tools/usb/ffs-test.c_ 。如果嫌 C 代码写起来复杂，还可以使用 Python 编写 ffs 实现，比如 [python-functionfs](https://github.com/vpelletier/python-functionfs)。
# 案例分析: checkm8 漏洞
checkm8 漏洞就不用过多介绍了，曾经的神洞，影响了一系列苹果设备，存在于 BootROM 中，不可通过软件更新来修复，一度 Make iOS
Jailbreak Great Again。当然现在可以通过 SEP 的检查来对该漏洞进行缓解，这是后话。
关于 checkm8 的分析已经有很多了，我们就不再鹦鹉学舌，更多是通过 checkm8 的成因，来从漏洞角度加深对 USB device 开发的理解。
checkm8 漏洞发生在苹果的救砖模式 DFU (Device Firmware Upgrade)，即通过 USB 向苹果设备刷机的协议。该协议是基于
USB 协议的一个拓展，具体来说:
  * 基于 USB Control Transfer
  * bmRequestType[6:5] 为 0x20，即 **Type** 为 Class
  * bmRequestType[4:0] 为 0x01，即 **Recipient** 为 Interface
  * bRequest 为 DFU 相关操作，比如 Detach、Download、Upload、GetStatus、Abort 等
DFU 接口初始化的代码片段如下:
Control Transfer 主要是在 ep0 上传输，因此 ep0 的读写回调中就会根据收到的数据来派发到不同的 handler，对于 DFU
协议的分发伪代码如下:
    static byte *data_buf;
    static size_t data_rcvd;
    static size_t data_size;
    static struct usb_ctrlrequest setup_request; 
    void handle_ctr_transfer_recv(byte *buf, int len, int *p_stage, int is_setup) {
      *p_stage = 0;
      if (!is_setup) {
        handle_data_recv(buf, len, p_stage);
      }
      // handle control request
      memcpy(&setup_request, buf, 8);
      switch(setup_request.bRequestType & 0x60) {
        case STANDARD:
          // ...
        case VENDOR:
          // ...
        case CLASS:
          if (setup_request.bRequestType & 0x1f == INTERFACE) {
            int n = intf_handlers[setup_request.wIndex]->handle_request(&setup_request, &data_buf);
            if (n > 0) {
              data_size = n;
            }
          }
        default:
        // ...
      }
    }
其中 intf_handlers 是 usb_core_regisger_interface 函数中添加到的的全局函数数组。handle_reuqest
中传入的是一个指针的指针，并在处理函数中复制为 io_buffer 的地址。而开头的 data stage 阶段，内部实现就是将收到的数据拷贝到
data_buf 即 io_buffer 中。
io_buffer 一直是有效的吗？并不尽然，因为 io_buffer 在 DFU 退出阶段会被 free 释放掉，此后 data_buf
仍然持有着无效指针，就构成了一个典型的 UAF 场景，这正是 checkm8
的漏洞所在。至于如何触发以及如何构造利用，可以需要额外的篇幅去进行介绍，感兴趣的朋友可以参考文末的文章。
从 checkm8 漏洞中我们可以看到出现漏洞的根本成因:
  * 大量使用全局变量
  * 在处理 USB 内部状态机出现异常时，没有充分清除全局变量的值，比如只将 io_buffer 置零而没有将 data_buf 置零
  * 在重新进入状态机时，全局变量仍然有残留，导致进入异常状态或者处理异常数据
网上有人评论说这么简单的漏洞为什么没有通过自动化测试发现出来，个人感觉这其实涉及到模糊测试的两大难题:
一是针对 stateful 的数据测试，每增加一种内部状态，测试的分支就成指数级别增长，从而增加了控制流覆盖到目标代码的难度；
二是硬件依赖，要测试这个 USB 状态机，需要 mock 出底层的驱动接口，工作量和写一个新的 USB 驱动差不多，更不用说 DFU
本身还会涉及存储设备的读写，这部分接口是不是也要模拟？
因此这类漏洞的更多是通过代码审计发现出来，不过厂商又执着于 **Security by Obsecurity**
，这就导致投入的更多是利益驱动的组织，对个人用户安全而言并不算是件好事。如果 iBoot 开源，那么估计这个漏洞早就被提交给苹果
SRC，成本也就几千欢乐豆的事，也不至于闹出这么大的舆情，甚至以 checkm8 为跳板，把 SEPOS 也撸了个遍。
# 后记
本文是最近对 USB 相关的一些学习记录，虽然文章是从前往后写的，但实际研究却是从后往前做的。即先看到了网上分析 checkm8 的文章，为了复现去写一个
USB 设备，然后再去学习 USB 协议的细节，可以算是个 Leaning By Hacking
的案例吧。个人感觉这种方式前期较为痛苦，但后期将点连成线之后还是挺醍醐灌顶的，也算是一种值得推荐的研究方法。
# 参考资料
  * [USB in a NutShell](https://www.beyondlogic.org/usbnutshell/usb1.shtml)
  * [USB and the Real World](https://elinux.org/images/a/ae/Ott--usb_and_the_real_world.pdf)
  * [pyusb/pyusb](https://github.com/pyusb/pyusb/blob/master/docs/tutorial.rst)
  * [Linux USB API](https://www.kernel.org/doc/html/v4.18/driver-api/usb/index.html)
  * [Kernel USB Gadget Configfs Interface](https://www.elinux.org/images/e/ef/USB_Gadget_Configfs_API_0.pdf)
  * [Technical analysis of the checkm8 exploit](https://habr.com/en/company/dsec/blog/472762/)
* * *