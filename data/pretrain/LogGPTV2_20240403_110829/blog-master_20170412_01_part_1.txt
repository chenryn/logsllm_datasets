## 快速入门PostgreSQL应用开发与管理 - 6 事务和锁  
##### [TAG 31](../class/31.md)
### 作者                                                                   
digoal                                                           
### 日期                                                                                                                               
2017-04-12                                                         
### 标签                                                            
PostgreSQL , Linux          
----                                                                                                                            
## 背景        
## 本章大纲
### 一、什么是事务  
### 二、单用户情况下的事务  
### 三、多用户情况下的事务  
#### 1 PostgreSQL如何处理事务隔离？  
#### 2 多用户情况下的事务并发处理  
### 四、锁  
### 五、数据恢复粒度  
### 六、数据年龄  
### 七、事务冻结  
### 八、垃圾回收  
### 九、flash back query  
## 第四章：事务和锁  
https://www.postgresql.org/docs/9.6/static/mvcc.html  
### 1. 什么是事务  
ACID介绍  
1\. 原子性：同一个事务中的所有操作，要么全部成功，要么全部失败。即使数据库恢复，也不能出现同一个事务中对数据库的操作一部分成功一部分失败的情况。  
2\. 一致性：任何时刻，数据库对用户的视角始终是按事务提交的顺序一致的，即使数据库恢复，也不能出现后提交的事务存在，而先提交的事务不存在的情况。  
以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元。  
以插入数据为例，a插入1并提交，随后b插入2并提交。当数据库发生恢复时，要么a存在，要么a,b同时存在，绝对不可能出现b存在但是a不存在的情况。  
3\. 持久化：事务成功提交，表示事务对数据库的修改已经持久化到永久存储，即使断电也不会丢失。除非永久存储的介质损坏。  
4\. 隔离性：有4种隔离级别，读未提交，读已提交，可重复度，串行化。  
```  
postgres=# \h begin  
Command:     BEGIN  
Description: start a transaction block  
Syntax:  
BEGIN [ WORK | TRANSACTION ] [ transaction_mode [, ...] ]  
where transaction_mode is one of:  
    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }  
    READ WRITE | READ ONLY  
    [ NOT ] DEFERRABLE  
```  
读未提交，表示可以读到其他会话未提交的数据。  
PostgreSQL不支持读未提交（脏读）。  
读已提交，表示可以读到其他会话已提交的数据。  
```  
postgres=# create table iso_test(id int, info text);  
CREATE TABLE  
postgres=# insert into iso_test values (1,'test');  
INSERT 0 1  
会话 1  
postgres=# begin;  
BEGIN  
postgres=# select * from iso_test;  
 id | info   
----+------  
  1 | test  
(1 row)  
会话 2  
postgres=# begin;  
BEGIN  
postgres=# update iso_test set info='new';  
UPDATE 1  
会话 1  
postgres=# select * from iso_test;  
 id | info   
----+------  
  1 | test  
(1 row)  
会话 2  
postgres=# end;  
COMMIT  
会话 1  
postgres=# select * from iso_test;  
 id | info   
----+------  
  1 | new  
(1 row)  
```  
可重复读，表示在一个事务中，执行同一条SQL，读到的是同样的数据（即使被读的数据可能已经被其他会话修改并提交）。  
```  
会话 1   
postgres=# begin transaction isolation level repeatable read ;  
BEGIN  
postgres=# select * from iso_test;  
 id | info   
----+------  
  1 | new  
(1 row)  
会话 2  
postgres=# begin;  
BEGIN  
postgres=# update iso_test set info='digoal';  
UPDATE 1  
postgres=# end;  
COMMIT  
会话 1   
postgres=# select * from iso_test;  
 id | info   
----+------  
  1 | new  
(1 row)  
```  
串行化，表示并行事务模拟串行执行，违反串行执行规则的事务，将回滚。  
```  
会话 1   
postgres=# begin transaction isolation level serializable ;  
BEGIN  
postgres=# select count(*) from iso_test;  
 count   
-------  
     6  
(1 row)  
会话 2  
postgres=# begin transaction isolation level serializable ;  
BEGIN  
postgres=# select count(*) from iso_test;  
 count   
-------  
     6  
(1 row)  
会话 1  
postgres=# insert into iso_test select * from iso_test;  
INSERT 0 6  
postgres=# select count(*) from iso_test;  
 count   
-------  
    12  
(1 row)  
会话 2   
postgres=# insert into iso_test select * from iso_test;  
INSERT 0 6  
postgres=# select count(*) from iso_test;  
 count   
-------  
    12  
(1 row)  
会话 1  
postgres=# end;  
COMMIT  
会话 2  
postgres=# end;  
ERROR:  could not serialize access due to read/write dependencies among transactions  
DETAIL:  Reason code: Canceled on identification as a pivot, during commit attempt.  
HINT:  The transaction might succeed if retried.  
```  
串行隔离级别锁信息查看  
```  
select relation::regclass,* from pg_locks where pid in (串行事务会话pid);  
```  
### 2. 单用户情况下的事务  
单用户情况下的事务，没有并行问题，属于串行事务，仅仅体现一致性、原子性、持久化。  
### 3. 多用户情况下的事务  
并行事务，体现事务隔离，锁。  
#### PostgreSQL如何处理事务隔离？  
1\. 多版本概念  
数据插入时，在记录的头信息中xmin字段，记录当前事务ID（xid）。  
删除数据时，在记录的头信息中xmax字段，记录当前事务ID（xid），头部infomask标记记录已删除。  
更新数据时，在被删除的记录的头信息中xmax字段，记录当前事务ID（xid），头部infomask标记记录已删除。同时插入一条新的记录，新记录的头信息中xmin字段，记录当前事务ID（xid）。  
```  
INSERT, xmin = current xid  
DELETE, xmax = current xid  
UPDATE, old tuple xmax = current xid, new tuple xmin = current xid  
```  
2\. 快照概念  
当前数据库中未提交的最小事务xmin，所有小于这个事务号的记录，对用户都可见。  
当前数据库中最小的未分配事务号xmax，所有大于这个事务号的记录，对用户都不可见。  
在xmin,xmax区间内，仍未提交的事务号list，所有等于这些事务号的记录，对用户都不可见。   
查询数据时，根据事务隔离级别、以上快照信息、行头信息中的xmin,xmax值、记录对应的事务提交状态，以及infomask标记信息，判断记录是否可见。  
3\. HOT  
为了降低索引的更新，当更新后的记录在同一个数据块中时，旧的记录使用ctid引用到对应的新记录的offset，如果更新后的记录，索引字段的值未编号，则不需要更新索引。  
![pic](20170412_01_pic_001.jpg)  
![pic](20170412_01_pic_002.jpg)  
#### 多用户情况下的事务并发处理  
1\. 读写不冲突  
2\. 读到什么数据，取决于事务隔离级别。  
### 4. 锁  
1\. 锁对象  
src/include/storage/lock.h  
```  
/*  
 * LOCKTAG is the key information needed to look up a LOCK item in the  
 * lock hashtable.  A LOCKTAG value uniquely identifies a lockable object.  
 *  
 * The LockTagType enum defines the different kinds of objects we can lock.  
 * We can handle up to 256 different LockTagTypes.  
 */  
typedef enum LockTagType  
{  
        LOCKTAG_RELATION,                       /* whole relation */  
        /* ID info for a relation is DB OID + REL OID; DB OID = 0 if shared */  
        LOCKTAG_RELATION_EXTEND,        /* the right to extend a relation */  
        /* same ID info as RELATION */  
        LOCKTAG_PAGE,                           /* one page of a relation */  
        /* ID info for a page is RELATION info + BlockNumber */  
        LOCKTAG_TUPLE,                          /* one physical tuple */  
        /* ID info for a tuple is PAGE info + OffsetNumber */  
        LOCKTAG_TRANSACTION,            /* transaction (for waiting for xact done) */  
        /* ID info for a transaction is its TransactionId */  
        LOCKTAG_VIRTUALTRANSACTION, /* virtual transaction (ditto) */  
        /* ID info for a virtual transaction is its VirtualTransactionId */  
        LOCKTAG_SPECULATIVE_TOKEN,      /* speculative insertion Xid and token */  
        /* ID info for a transaction is its TransactionId */  
        LOCKTAG_OBJECT,                         /* non-relation database object */  
        /* ID info for an object is DB OID + CLASS OID + OBJECT OID + SUBID */  
        /*  
         * Note: object ID has same representation as in pg_depend and  
         * pg_description, but notice that we are constraining SUBID to 16 bits.  
         * Also, we use DB OID = 0 for shared objects such as tablespaces.  
         */  
        LOCKTAG_USERLOCK,                       /* reserved for old contrib/userlock code */  
        LOCKTAG_ADVISORY                        /* advisory user locks */  
} LockTagType;  
```  
2\. 表级锁  
src/include/storage/lockdefs.h  
```  
#define AccessShareLock                 1    /* SELECT */  
#define RowShareLock                    2    /* SELECT FOR UPDATE/FOR SHARE */  
#define RowExclusiveLock                3    /* INSERT, UPDATE, DELETE */  
#define ShareUpdateExclusiveLock        4    /* VACUUM (non-FULL), ANALYZE, CREATE INDEX CONCURRENTLY */  