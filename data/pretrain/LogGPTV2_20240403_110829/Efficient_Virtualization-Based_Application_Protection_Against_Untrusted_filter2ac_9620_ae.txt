TCB. P-MAPS is quite similar to our scheme at a high level. How-
ever, the details of P-MAPS are unavailable for public to conduct
an in-depth comparison.
Intel Software Guard Extensions (SGX) technology [10] is able
to to protect an application by extending hardware processors. It
introduces Enclave - isolated memory of code and data within an
application’s address space. It enforces that only code executing
within the enclave can access data within the same enclave. Any
accesses even they are from privileged software or SMM will be
rejected. The exchanged data between processor cache and main
memory are encrypted. Thus, bus snifﬁng attack does not work.
Comparing with AppShield, Intel SGX could achieve stronger se-
curity (e.g., it is able to defend against the bus snifﬁng attack which
would work in AppShield). However, its performance would be
slower as it requires lots of encryptions and decryptions on data ex-
change between processor cache and main memory. Note that all
memory accesses in AppShield setting is native speed, without any
encryption or decryption.
Microkernel-Based Protection.
EROS[26], Perseus[24], Mi-
crosoft’s NGSCB [13] and Nizza [16] are microkernel(or small ker-
nel) based solutions. They attempt to run commodity OS and un-
trusted applications in the low-assurance partitions, and run the ap-
plications with higher security requirements in the high-assurance
partitions, which are isolated and protected by the microkernel it-
self. However, all of them incur compatibility issue since they may
require splitting or even redesigning on the applications.
Virtualization-Based Protection. The approaches like TERRA
[14] and Proxos [31] are hypervisor-based trust partitioning sys-
tems. They protect applications by isolating them into trusted do-
mains with application-speciﬁc OSes. These systems incurs large
TCB since they include all secure domains inside. In addition, they
are still vulnerable once the application-speciﬁc OSes are compro-
mised.
OverShadow [6], CHAOS [5] and SP3 [34] aim to protect the
whole application execution against malicious application and OSes.
However, all of them need complex encryption and decryption op-
erations on the application data. Obviously, these additional costly
0100200300400500600700800VMMAppShieldTime(s) W/o Protection W/ Protection 354cryptographic operations may reduce the performance and increase
the latency of the whole system, especially for the protected appli-
cation. In addition, none of them claims that they protect appli-
cations from the mapping reorder attack. Thus, the data and code
integrity may still be broken by potentially compromised OS. Ink-
Tag [17] is an approach that protects the whole application and ver-
iﬁes the OS behaviors through paraverﬁcation technique. The par-
averﬁcation technique needs to modify the source code of the ker-
nel, which is not always available. Thus, it may lead to the failure
of the protection on the close-source OSes, e.g., Windows. Virtual
Ghost [12] provides application security by providing ghost mem-
ory. However, it requires compiler instrumentation on kernel code
that is not always available for commodity platforms. In addition, it
requires complete control-ﬂow integrity checking at runtime, which
is extremely hard to achieve in reality.
BIOS-Based Protection. Lockdown [33] system relies on a BIOS-
assisted lightweight hypervisor and an ACPI-based mechanism to
provide two switchable worlds - green world for trusted applica-
tions and red world for untrusted applications. Lockdown uses a
trusted path built upon LEDs to provide a veriﬁable protection. The
main drawback of the Lockdown system is the switch latency is too
high, roughly 40 seconds. SecureSwitch [30] system that is quite
similar to Lockdown also leverages a BIOS-assisted mechanism for
secure instantiation and management of trusted execution environ-
ments. The switch latency is relatively smaller, roughly 6 seconds.
Essentially, both approaches needs to shut down one world to run
another one, meaning that they can not simultaneously execute two
worlds. However, our AppShield allows the coexistence, meaning
the protected applications can simultaneously executed with the un-
trusted/unprotected applications in a system.
8. CONCLUSIONS
In this paper, we have presented the designed and implemen-
tation of AppShield, which reliably and ﬂexibly protects critical
applications with complete isolation, rich functionalities and high
efﬁciency. The design of AppShield has taken into consideration
several newly identiﬁed threats where the kernel manipulates the
address mapping. We have implemented the prototype of App-
Shield with a small bare-metal hypervisor. We have evaluated the
performance impacts on CPU computation, disk I/O and network
I/O using micro and macro benchmarks. The experiments show
that AppShield is lightweight and efﬁcient.
9. ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers for
their insightful comments that greatly helped improve the paper.
This research was funded in the Singapore Management University
through a research grant C220/MSS13C005 from the Ministry of
Education Academic Research Tier 1.
10. REFERENCES
[1] Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim
Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and Andrew
Warﬁeld. Xen and the art of virtualization. In SOSP ’03:
Proceedings of the nineteenth ACM symposium on Operating
systems principles, pages 164–177, New York, NY, USA,
2003. ACM.
[2] D. Champagne and R.B. Lee. Scalable architectural support
for trusted software. In High Performance Computer
Architecture (HPCA), 2010 IEEE 16th International
Symposium on, pages 1–12. IEEE, 2010.
[3] David Champagne and Ruby B. Lee. Scalable architectural
support for trusted software. pages 1–12. IEEE Computer
Society, 2010.
[4] Stephen Checkoway and Hovav Shacham. Iago attacks: why
the system call api is a bad untrusted rpc interface. In
Proceedings of the eighteenth international conference on
Architectural support for programming languages and
operating systems, ASPLOS ’13, pages 253–264, New York,
NY, USA, 2013. ACM.
[5] H. Chen, F. Zhang, C. Chen, Z. Yang, R. Chen, B. Zang, P.C.
Yew, and W. Mao. Tamper-resistant execution in an untrusted
operating system using a virtual machine monitor. Technical
Report FDUPPITR-2007-0801, Parallel Processing Institute,
Fudan University, August 2007.
[6] Xiaoxin Chen, Tal Garﬁnkel, E. Christopher Lewis, Pratap
Subrahmanyam, Carl A. Waldspurger, Dan Boneh, Jeffrey
Dwoskin, and Dan R.K. Ports. Overshadow: a
virtualization-based approach to retroﬁtting protection in
commodity operating systems. In Proceedings of the 13th
international conference on Architectural support for
programming languages and operating systems, ASPLOS
XIII, pages 2–13, New York, NY, USA, 2008. ACM.
[7] Yueqiang Cheng and Xuhua Ding. Guardian: Hypervisor as
security foothold for personal computers. In Trust and
Trustworthy Computing, pages 19–36. Springer Berlin
Heidelberg, 2013.
[8] Yueqiang Cheng, Xuhua Ding, and Robert H. Deng.
Driverguard: a ﬁne-grained protection on I/O ﬂows. In
Proceedings of the 16th European conference on Research in
computer security, ESORICS’11, pages 227–244, Berlin,
Heidelberg, 2011. Springer-Verlag.
[9] Siddhartha Chhabra, Brian Rogers, Yan Solihin, and Milos
Prvulovic. Secureme: a hardware-software approach to full
system security. In Proceedings of the international
conference on Supercomputing, ICS ’11, pages 108–119,
New York, NY, USA, 2011. ACM.
[10] Intel Corporation. Innovative instructions and software
model for isolated execution.
http://privatecore.com/wp-content/uploads/2013/06/HASP-
instruction-presentation-release.pdf.
[11] Standard Performance Evaluation Corporation. Spec
cint2006. http://www.spec.org/.
[12] John Criswell, Nathan Dautenhahn, and Vikram Adve.
Virtual ghost: Protecting applications from hostile operating
systems. ASPLOS ’14, pages 81–96. ACM, 2014.
[13] Paul England, Butler Lampson, John Manferdelli, Marcus
Peinado, and Bryan Willman. A trusted open platform.
Computer, 36(7):55–62, July 2003.
[14] Tal Garﬁnkel, Ben Pfaff, Jim Chow, Mendel Rosenblum, and
Dan Boneh. Terra: a virtual machine-based platform for
trusted computing. In Proceedings of the 9th ACM
Symposium on Operating Systems Principles, pages
193–206, New York, NY, USA, 2003. ACM.
[15] Abel Gordon, Nadav Amit, Nadav Har’El, Muli
Ben-Yehuda, Alex Landau, Assaf Schuster, and Dan Tsafrir.
Eli: bare-metal performance for i/o virtualization. In
Proceedings of the seventeenth international conference on
Architectural Support for Programming Languages and
Operating Systems, ASPLOS XVII, pages 411–422, New
York, NY, USA, 2012. ACM.
[16] H. Hartig, M. Hohmuth, N. Feske, C. Helmuth,
A. Lackorzynski, F. Mehnert, and M. Peter. The nizza
11
355virtualization. In Proceedings of the 16th ACM conference on
Computer and communications security, CCS ’09, pages
477–487, New York, NY, USA, 2009. ACM.
[28] Raoul Strackx and Frank Piessens. Fides: selectively
hardening software application components against
kernel-level or process-level malware. In Proceedings of the
2012 ACM conference on Computer and communications
security, CCS ’12, pages 2–13, New York, NY, USA, 2012.
ACM.
[29] G. Edward Suh, Dwaine Clarke, Blaise Gassend, Marten van
Dijk, and Srinivas Devadas. Aegis: architecture for
tamper-evident and tamper-resistant processing. In
Proceedings of the 17th annual international conference on
Supercomputing, ICS ’03, pages 160–171, New York, NY,
USA, 2003. ACM.
[30] Kun Sun, Jiang Wang, Fengwei Zhang, and Angelos Stavrou.
Secureswitch: Bios-assisted isolation and switch between
trusted and untrusted commodity oses. In Proceedings of the
19th Annual Network and Distributed System Security
Symposium, 2012.
[31] Richard Ta-Min, Lionel Litty, and David Lie. Splitting
interfaces: making trust between applications and operating
systems conﬁgurable. In Proceedings of the 7th symposium
on Operating systems design and implementation, OSDI ’06,
pages 279–292, Berkeley, CA, USA, 2006. USENIX
Association.
[32] Trusted Computing Group. TPM main speciﬁcation. Main
Speciﬁcation Version 1.2 rev. 85, February 2005.
[33] Amit Vasudevan, Bryan Parno, Ning Qu, Virgil D. Gligor,
and Adrian Perrig. Lockdown: towards a safe and practical
architecture for security applications on commodity
platforms. In Proceedings of the 5th international conference
on Trust and Trustworthy Computing, TRUST’12, pages
34–54, Berlin, Heidelberg, 2012. Springer-Verlag.
[34] Jisoo Yang and Kang G. Shin. Using hypervisor to provide
data secrecy for user applications on a per-page basis. In
Proceedings of the fourth ACM SIGPLAN/SIGOPS
international conference on Virtual execution environments,
VEE ’08, pages 71–80, New York, NY, USA, 2008. ACM.
[35] Zongwei Zhou, Virgil D. Gligor, James Newsome, and
Jonathan M. McCune. Building veriﬁable trusted path on
commodity x86 computers. In Proceedings of the IEEE
Symposium on Security and Privacy, May 2012.
secure-system architecture. In Collaborative Computing:
Networking, Applications and Worksharing, 2005
International Conference on, pages 10–pp. IEEE, 2005.
[17] Owen S. Hofmann, Sangman Kim, Alan M. Dunn,
Michael Z. Lee, and Emmett Witchel. Inktag: secure
applications on an untrusted operating system. In
Proceedings of the eighteenth international conference on
Architectural support for programming languages and
operating systems, ASPLOS ’13, pages 265–278, New York,
NY, USA, 2013. ACM.
[18] Intel. Intel Trusted Execution Technology (Intel TXT)
software development guide. Dec 2009.
[19] Intel. Intel 64 and IA-32 architectures software developer’s
manual combined volumes: 1, 2a, 2b, 2c, 3a, 3b and 3c.
October 2011.
[20] Yanlin Li, Adrian Perrig, Jonathan M McCune, James
Newsome, Brandon Baker, and Will Drewry. Minibox: A
two-way sandbox for x86 native code (cmu-cylab-14-001).
2014.
[21] David Lie, Chandramohan A. Thekkath, and Mark Horowitz.
Implementing an untrusted operating system on trusted
hardware. In Proceedings of the nineteenth ACM symposium
on Operating systems principles, SOSP ’03, pages 178–192,
New York, NY, USA, 2003. ACM.
[22] Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei Zhou,
Anupam Datta, Virgil Gligor, and Adrian Perrig. Trustvisor:
Efﬁcient tcb reduction and attestation. In Proceedings of the
2010 IEEE Symposium on Security and Privacy, SP ’10,
pages 143–158, Washington, DC, USA, 2010. IEEE
Computer Society.
[23] Jonathan M. McCune, Bryan J. Parno, Adrian Perrig,
Michael K. Reiter, and Hiroshi Isozaki. Flicker: an execution
infrastructure for tcb minimization. In Proceedings of the 3rd
ACM SIGOPS/EuroSys European Conference on Computer
Systems 2008, Eurosys ’08, pages 315–328, New York, NY,
USA, 2008. ACM.
[24] B. Pﬁtzmann, J. Riordan, C. Stüble, M. Waidner, and
A. Weber. The perseus system architecture. In VIS, pages
1–18, 2001.
[25] R. Sahita, U. Warrier, and P. Dewan. Dynamic software
application protection. Intel Corporation, Apr, 2009.
[26] J.S. Shapiro. EROS: A capability system. PhD thesis,
University of Pennsylvania, 1999.
[27] Monirul I. Sharif, Wenke Lee, Weidong Cui, and Andrea
Lanzi. Secure in-vm monitoring using hardware
12
356