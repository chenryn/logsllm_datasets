imple-
mentation is also compatible with smartphone browsers (e.g.,
the Android version of Chrome), nevertheless, we have also
implemented a stand-alone Android application using Apache
Cordova.5 The source code of both our browser and Android
app is available upon request, so that developers can simply
import and extend our code for their own applications.
Cryptographic Operations. The cryptographic layer of the
protocol
is also written in JavaScript, using the Ed25519
curve [8] implementation available from Elliptic.js,6 which
supports 256-bit points and provides security comparable to
2https://nodejs.org/
3http://expressjs.com/
4http://socket.io/
5https://cordova.apache.org/
6https://github.com/indutny/elliptic
5
(a) Client
(b) Server
Figure 2: Execution time for increasing number of users (with 700 programs).
a 128-bit security parameter. SHA-256 is used for (crypto-
graphic) hashing operations.
D. Performance Evaluation
We now analyze the performance of our system, both an-
alytically (reporting asymptotic complexities) and empirically.
Asymptotic Complexities. The setup phase carried out by the
user requires O(N ) random group points (where N is the
number of total users) and O(N ) messages need to be sent
for all the users to distribute the public keys. To generate
the blinding factors, each user then needs to perform O(N )
exponentiations in G and O(L· N ) hashing operations. Count-
Min Sketch encryption (at user’s side) requires O(L) integer
additions in Zq, one for each of the L = O(log(M 2)) Count-
Min Sketch entries, while communication complexity amounts
to O(L) 32-bits integers for each user. To complete the
aggregation, the tally computes O(L · N ) linear operations.
The use of the Count-Min Sketch signiﬁcantly speeds up
the efﬁciency of the system. In fact, without them, each user
would need to perform O(N (M 2)) hashing operations and
send O(M 2) 32-bit integers, while the tally would need to
compute O(N (M 2)) operations.
Computation Overhead. We have also simulated the ex-
ecution of our private recommender system and measured
execution times (averaged over 100 iterations) for all opera-
tions. Simulations have been performed on a machine running
Ubuntu Trusty (Ubuntu 14.04.2 LTS), equipped with a 2.4 GHz
CPU i5-520M and 4GB RAM.
In Figure 2, we plot running times of protocol’s client-
and server-side for an increasing number of users, ﬁxing the
number of programs to 700 (the average number of programs
available on iPlayer) and the sketch parameters to  = δ = 0.01
(see Deﬁnition 1). Using this setting, the number of rows d
and columns w of the Count-Min Sketch amounts to d =
18 , w = 272 leading to a Count-Min Sketch of size L =
d · w = 18 · 272 = 4,896. Running times grow linearly in the
number of users. As illustrated in Figure 2(a), the encryption,
performed by each user (see step (2) in Figure 1), takes 2.7
seconds with 100 users and 27 seconds with 1,000 users,
while Figure 2(b) reveals that tally completes the aggregation
(step (5) in Figure 1) in 78ms (resp., 780ms) with 100 (resp.,
1,000) users.
We then measure the execution time for an increasing
number of programs and a ﬁxed number of users, i.e., 1,000.
Figure 3(a) illustrates running times’ logarithmic growth for
encryption, ranging from 21 seconds with 100 programs to 28
seconds with 1,000 programs. Figure 3(b) illustrates tally’s
execution times for the aggregation, which approximately
range from 600ms to 800ms. Note that the “stair” effect of
the plots in Figure 3 is due to the fact that the Count-Min
Sketch size can be the same with close numbers of programs.
Without the compression factor of the Count-Min Sketch,
the running times for both user and tally would grow
linearly in the size of the co-view matrix (i.e., M · M/2),
yielding remarkably slower executions. As illustrated in Fig-
ure 4(a), with 1,000 users and 1,000 programs, running time
for each user amounts to almost 50 minutes instead of 28
seconds using the sketch, whereas,
the
tally completes in almost one and a half minute (versus less
than one second using Count-Min Sketch). Finally, execution
time of the ItemKNN operations carried out at user’s side,
with 700 programs, amounts to 850ms for each user.
the aggregation at
Communication Overhead. In Table I, we report the amount
of bytes exchanged between all parties for different number
of users and Count-Min Sketch sizes, ﬁxing the number of
programs to 700. Note that, without the compressing factor of
the sketch, with 700 programs, each user would have to send
960KB instead of 20KB.
Accuracy Estimation. Finally, we evaluate the accuracy loss
due to the use of Count-Min Sketch, speciﬁcally, over the most
50 frequent items, using a synthetic dataset sampled from a
zipﬁan distribution simulating a million users. We set the
Count-Min Sketch parameters to be  = 0.01 and δ = 0.01 as
we have measured an acceptable accuracy loss level introduced
by the Count-Min Sketch (see below). Once again, we ﬁx
the number of programs to M = 700, leading to a Count-
Min Sketch of size L = 4,896. Figure 5(a) shows that the
Count-Min Sketch estimation over the most 50 frequent items
is almost indistinguishable from the true population.
6
1002003004005006007008009001000Number of users (N)051015202530Execution Time (secs)Encryption1002003004005006007008009001000Number of users (N)0.00.10.20.30.40.50.60.70.8Execution Time (secs)Aggregation(a) Client
(b) Server
Figure 3: Execution time for increasing number of programs (with 1,000 users).
(a) Client
(b) Server
Figure 4: Execution time for increasing number of programs (with 1,000 users) without Count-Min Sketch.
#Users
100
200
300
400
500
600
700
800
900
1000
Bytes
(Tally to User)
3,200
6,400
9,600
12,800
16,000
19,200
22,400
25,600
28,800
32,000
Sketch Size
4,896
2,448
1,638
1,224
972
810
702
612
540
486
Bytes
(User to Tally)
19,584
9,792
6,552
4,896
3,888
3,240
2,808
2,448
2,160
1,944
TABLE I: Bytes exchanged by user and tally for different #users
and size of the Count-Min Sketch, considering 700 programs.
| ˆci − ci|/(cid:80)
We also plot, in Figure 5(b), the average error, deﬁned as
j |cj|, over the most 50 frequent items with an
increasing number of users, while ﬁxing M = 700, δ = 0.01
(yielding a total number of items to update on the Count-Min
Sketch of T = M · M/2 = 245,000) and three choices of the 
parameter, i.e., 0.01, 0.05, and 0.1. The average error decreases
with more users and smaller values of . Standard deviation
values are inﬁnitesimal, thus, we do not include them in the
plot as they would not be visible.
IV. PRIVATE AGGREGATE LOCATION PREDICTION
The rapid proliferation of smartphones, with 2 billion
estimated users by the year 2016 [26], makes it increasingly
easy (and appealing) to track users’ locations and movements
using sensors like GPS and WiFi. This contextual information
can be extremely useful to train machine learning algorithms
and predict future events, paving the way for anticipatory
mobile computing [57]. Location and movement models can be
used, e.g., for trafﬁc mitigation, road monitoring, and hazard
detection [44], as well as to guide decision frameworks to
respond to anomalies and disruptions on short notice.
Pervasive location sensing, however, raises important pri-
vacy concerns as single individuals’ movements can easily be
tracked and sensitive information could be exposed. If home
and work locations can be deduced from anonymized location
traces, single individuals can be uniquely re-identiﬁed [38].
Moreover, location patterns have been shown to leak personal
information, e.g., taxi drivers’ religion and individuals’ visits
to gentleman’s clubs.7
In this section, we instantiate a smartphone application
enabling users to report,
to a service provider (tally),
their locations over time. Users’ privacy is protected as only
7See http://on.mash.to/1ByncHD and https://goo.gl/Ta5JYG.
7
1002003004005006007008009001000Number of programs (M)21222324252627282930Execution Time (secs)Encryption1002003004005006007008009001000Number of programs (M)0.550.600.650.700.750.800.85Execution Time (secs)Aggregation1002003004005006007008009001000Number of programs (M)050010001500200025003000Execution Time (secs)Encryption w/o sketch1002003004005006007008009001000Number of programs (M)0102030405060708090Execution Time (secs)Aggregation w/o sketch(a) True vs estimated counters
(b) Average error for different values of 
Figure 5: Visualizing the accuracy of the Count-Min Sketch for the most 50 frequent items (with 700 programs and sketch size 4,896).
aggregate (over many users) location statistics are disclosed.
We then show how these statistics can be used to train a model
and predict future movements, and support private computation
and prediction of “heat maps” relying on the aggregate counts
of people in a given area over a period of time.
System Model. We operate in the same model as our privacy-
friendly recommender system (cf. Section III-B), involving a
tally that privately aggregates location statistics contributed
from a set of users, and re-use the same cryptographic layer.
Once again, we support efﬁcient computation of private statis-
tics using (i) Count-Min Sketch’s succinct data representation
and (ii) privacy-preserving aggregation with users’ blinding
factors summing up to zero.
Overview. We assume a 2-D space territory R is par-
titioned into a grid of
(S =
{S[1, 1], S[1, 2], . . . , S[p, p]}), and t ﬁnite intervals (time slots)
[tj−1, tj], where j ∈ N+. Let S(tj )
be the grid containing, for
each cell, the number of times the user Ui has logged her
position (using a GPS measurement) within that particular cell
over t ∈ [tj−1, tj]. User Ui, for each time slot [tj−1, tj], builds
the grid S(tj )
with locations logged over time, maps the grid
into a Count-Min Sketch, and sends the encrypted sketch to
the tally. This aggregates and decrypts them, reconstructing
the grid containing the (estimated) aggregate locations.
|S| = p × p cells
i
i
Figure 6: Number of taxi locations over time.
The location statistics can be used to display ‘heat maps”
(e.g., a graphical representation of congestion), or to perform
time-series based prediction over a sequence of heat maps.
Using an Exponential Weighted Moving Average (EWMA)
model (see Section II-E), we can predict the future popularity
of a cell, by relying on the past (approximated) observations for
that cell. Other machine learning techniques, e.g., Multivariate
Support Vector Machines or Logistic Regression, could also
be used for the prediction, but we consider it to be beyond the
scope of this paper to investigate new predictors.
The San Francisco Cabs Dataset. To evaluate the feasibility
of our intuition, we use a publicly available dataset containing
mobility traces of San Francisco taxi cabs.8 The dataset
contains 11 million GPS coordinates, generated by 536 taxis
over almost a month in May 2008. We group the taxi locations
8http://cabspotting.org/
Figure 7: Average error introduced by the Count-Min Sketch on the
aggregate statistics for the top-100 locations.
in time slots of one hour, leading to a total of 575 epochs.
Figure 6 shows the presence of weekly and daily patterns in
the number of taxi locations over time (i.e. hourly time slots)
and peaks of roughly 25,000 total hourly contributions.
Succinct Data Representation. We investigate whether suc-
cinct data representation could be applied to the problem of
collecting location statistics, and measure the accuracy loss in-
troduced by the Count-Min Sketch’s compact representation. In
j |cj|
Figure 7, we plot the average error deﬁned as | ˆci−ci|/(cid:80)
8
feasibility of our techniques for the problem of privately
predicting future heat maps.
Once again, we have implemented our techniques in Java-
Script, with the server-side running as a Node module, and
client-side running as an open-source Android application built
using Apache Cordova. Source code is available upon request.
Note that, due to space limitations, a performance evaluation
of our implementations is not presented in this version as it
would anyway mirror the one presented in Section III.
V. GATHERING STATISTICS ON TOR HIDDEN SERVICES
The privacy-preserving collection of statistics using efﬁ-
cient data structures, seeking a trade-off between accuracy and
efﬁciency, has also interesting applications in non-user facing
settings such as collecting network statistics from servers or
routers. In this section, we present a novel mechanism geared
to privately gather statistics in the context of the Tor anonymity
network [28]. The Tor project has recently received funding to
improve monitoring of load and usage of Tor hidden services.9
This motivates them to extract aggregate statistics about the
number of hidden service descriptors from multiple Hidden
Service Directory authorities. In order to ensure robustness,
the Tor project has determined that the median – rather than
the mean – of these volumes should be calculated, which is
beyond privacy-friendly statistics approaches like Privex [32].
In this section, we ﬁrst describe the protocol for estimating
median statistics using Count Sketch, then, we present the
design and deployment of its prototype implementation, along
with its performance evaluation.
A. Private Median Estimation using Count Sketch
We rely on the Count Sketch [16] data structure, which
closely resembles Count-Min Sketch, used in Sections III–IV.
Recall from Section II-B that building a Count Sketch follows
the same process as a Count-Min Sketch, thus leading to a
d · w table of positive integer values, whereas, the estimation
of an item’s frequency is slightly different: for each row, di,
a hash function is applied to the item leading to a column
wj. An unbiased estimator of the frequency of the item is the
value at this position minus the value at an adjacent position
– and the median of those estimators is the ﬁnal estimated
frequency. What is key to the success of our techniques is that
the estimate of the frequency of speciﬁc values, as well as
sets of values, is a simple linear sum of Count Sketch entries;
computing it does not require non-linear (e.g., min) operations
as for the Count-Min Sketch.
For this application, we build on privacy-preserving data
aggregation based on threshold public-key encryption, specif-
ically, an Additively Homomorphic Elliptic-Curve variant of
El Gamal (AH-ECC) [7], summarized below. This allows us
to seamlessly tolerate missing contributions – following an
approached ﬁrst proposed by Jawurek et al. [45].
AH-ECC consists of the following three algorithms (using a
multiplicative notation):
1) KeyGen(1τ ): Given a security parameter τ, choose an
elliptic curve E and (g1, g2) public generators on E,
9https://www.torproject.org/docs/hidden-services.html.en
Figure 8: Mean absolute error in the prediction for different values
of prediction algorithm’s parameter α.
Figure 9: Mean absolute error introduced by the Count-Min Sketch
on the prediction accuracy.
and the relative standard deviation over the most 100 popular
cells for each time slot, while ﬁxing  = δ = 0.01 and the
total number of cells to |S| = 100 × 100 (yielding a Count-
Min Sketch of size L = 3, 808). Observe that the average error
is inﬁnitesimal for every time slots.
Heat Map Prediction. Next, we focus on predicting future
heat maps using the EWMA algorithm introduced in Sec-
tion II-E. We start by evaluating the accuracy of EWMA-
based prediction relying on the aggregates collected without