pointer checking. This isn't strictly necessary for this interface. If
you did call LongTest with a NULL pointer, you'll get an error.
The stub code would reject the call with an error of
RPC_X_NULL_REF_POINTER - our method would never be
called. If the pointer had been declared was unique or ptr, the
NULL check would be important. 
Let's take a quick review of the code for this interface. 
MIDL DEFINITION 
HRESULT LongTest([in] long l, [out] long *pl); 
SERVER CODE 
STDMETHODIMP CBasicTypes::LongTest(long l, long * pl)
{
   if (pl == NULL) return E_POINTER;
   *pl = l + 10;
   return S_OK;
}
112    Chapter 8 •
Defining and Using Interfaces 
CLIENT USAGE 
HRESULT hr;
long l1=1;
long l2=0;
hr = pI->LongTest( l1, &l2 );
The client is then calling the LongTest() method. The out
parameter "l2" is allocated on the local program's stack, and its
address is passed to the server. When the call returns we would
expect an HRESULT value of S_OK, and the value of pointer l2
to be eleven. 
Double Parameters
What if we're using a double parameter? The code is almost
identical for all the base types. Here's the IDL code for that inter-
face. 
MIDL DEFINITION 
HRESULT DoubleTest([in] double d, [out] double *pd); 
SERVER CODE 
STDMETHODIMP CBasicTypes::DoubleTest(double d, double 
* pd)
{ 
   if (pd == NULL) return E_POINTER;
   *pd = d + 10.0;
   return S_OK;
}
CLIENT USAGE 
HRESULT hr;
double d1=1;
double d2=0;
hr = pI->DoubleTest( d1, &d2 );
Boolean Parameters
113
Additonal Information and Updates: http://www.iftech.com/dcom
Boolean Parameters
The IDL boolean type can be a little confusing. In IDL, boolean
is a single byte. This makes sense in the context of COM, which
needs to optimize communications by passing the smallest
amount of data possible. Unfortunately, C++ defines a BOOL as
a 32-bit longword. You have to take this size differential into
account, either by using an IDL long, or by casting the parameter
from BOOL to a single byte. 
Working with Strings
There are three basic types of string allowed in MIDL. 
• char arrays. 
• Wide character strings. 
• BSTR. Visual BASIC style strings. 
The default string type for C++ is of course an array of 8-bit
char's with a NULL terminator at the end. This type maps to the
MIDL "unsigned char" type. There's little difference between
arrays of signed and unsigned characters, and arrays of bytes.
Any of these choices will work. 
If you're working with international software, you have to
use "wide" 16 bit Unicode characters. There are several ways to
define these in MIDL. The most common types used are
"unsigned short" and "wchar_t". The MIDL wchar_t type has an
identical type in C++. 
There are two attributes that are commonly used in associa-
tion with MIDL strings. These are the string and size_is
attribute.
Character and Wide Character strings are arrays. The only
thing that distinguishes an array from a character string is the
NULL terminator at the end. The string attribute tells MIDL that it
can determine the length of the string by searching for the NULL
terminator. The generated code will automatically call the appro-
priate strlen(), lstrlen(), or wcslen() function. The string attribute
114    Chapter 8 •
Defining and Using Interfaces 
is not required for passing strings, you can use the size_is
attribute to accomplish the same thing. 
Here are two examples of interfaces that use the string
attribute to pass data to the server: 
MIDL DEFINITION 
HRESULT SzSend([in, string] unsigned char * s1);
HRESULT WcharSend([in,string] wchar_t *s1);
SERVER CODE 
STDMETHODIMP CStringTypes::SzSend(unsigned char * s1)
{
  m_String = s1;
  return S_OK;
}
STDMETHODIMP CStringTypes::WcharSend(wchar_t *s1)
{
  long len = wcslen(s1) * sizeof(wchar_t);
  m_pWide = new wchar_t[len+1]; // add 1 char for null
  wcscpy( m_pWide, s1 );
  return S_OK;
}
CLIENT CODE 
char s1[] = "Null Terminated C String";
pI->SzSend( s1 );
wchar_t w1[] = L"This is Wide String";
pI->WcharSend( w1 );
Attribute
Usage
string
An array of char, wchar_t, or byte. The array must be termi-
nated by a null value. 
size_is()
Specifies the number of elements in an array. This attribute is 
used to determine string array size at run time. 
Table 8.4
COM String Attributes
Working with Strings
115
Additonal Information and Updates: http://www.iftech.com/dcom
These interfaces offer a simple way to pass character strings
to a server. This is one of the few cases where I would recom-
mend using the string attribute. For [in,out] parameters, the string
attribute can be dangerous. MIDL calculates the size of the trans-
mission buffer based on the size of the input string. If the server
passes back a larger string, the transmission buffer will be over-
written. This type of interface can be extremely buggy. 
Sometimes we can't use NULL terminated strings. In these
cases, you can explicitly specify the length of the string array.
There are two methods of doing this. You can use a fixed length
string, or you can use the size_is attribute. 
A fixed length array would look like this: 
MIDL DEFINITION 
HRESULT SzFixed([in] unsigned char s1[18]); 
SERVER CODE 
STDMETHODIMP CStringTypes::SzFixed(unsigned char 
s1[18])
{
m_String = s1;
return S_OK;
}
CLIENT CODE 
unsigned char sf[18]= "An 18 byte String";
pI->SzFixed( sf );
The Server definition would also require a fixed length dec-
laration in the parameter. Unless you're passing a buffer that is
always a fixed size, this is an inefficient way to design an inter-
face. It's also quite easy to inadvertently overrun the boundaries
of a fixed array (the classic mistake is to forget space for the
NULL terminator.) A better way would be to specify the number
of bytes at run-time. The size_is attribute tells the marshaling
code exactly how many bytes are actually being passed. 
116    Chapter 8 •
Defining and Using Interfaces 
IDL will generate marshaling code to pass exactly the num-
ber of bytes required. If you are dealing with NULL terminated
[in] strings, this offers no advantages over using the "string"
attribute. We'll see similar syntax when we examine IDL array
types. Here's the server code to handle a string with an explicit
size: 
MIDL DEFINITION 
HRESULT SzSized ([in] long llen, 
  [in,size_is(llen)] unsigned char * s1);
SERVER CODE 
HRESULT SzSized(long llen, unsigned char *s1)
{
char *buf = new char[llen+1];// temp buffer
strncpy( buf, (char *)s1, llen );// copy string
buf[llen]=NULL;// add null to end
m_String = buf;// copy into CString
delete[] buf;// delete temp 
return S_OK;
}
CLIENT CODE 
char s1[] = "Null Terminated C String";
pI->SzSized( strlen(s1), (unsigned char*)s1 );
The size_is attribute is often used when returning data in a
string. The string pointer is given an [out] attribute, and its maxi-
mum size is specified in the first parameter. In this example, the
variable "len" specifies the size of the string being sent by the cli-
ent. 
MIDL DEFINITION 
HRESULT SzRead([in] long len, [out,size_is(len)] char 
*s1);
Working with Strings
117
Additonal Information and Updates: http://www.iftech.com/dcom
SERVER CODE 
STDMETHODIMP SzRead(long len, unsigned char * s1)
{
strncpy( (char*)s1, m_String, len );
return S_OK;
}
CLIENT USAGE 
char s2[64];
pI->SzRead( sizeof(s2), s2 );
The server knows the maximum size of the return buffer, so
it can ensure that it isn't overwritten. The problem here is that
we're passing around a number of unused bytes. The len param-
eter specifies how many bytes will be transferred, not how many
are actually used. Even if the string were empty, all 64 bytes
would still be copied. A better way to define this interface would
be to allocate the string memory on the server side and pass it
back to the client. 
To accomplish this we pass a NULL pointer to the server
and allocate the buffer using CoTaskmemAlloc. This function
allows the allocated memory to be marshaled back from the
server to the client, and deleted by the client. The client will call
CoTaskMemFree when it is finished with the pointer. Together
these two functions are the COM equivalent of new and delete. 
MIDL DEFINITION 
HRESULT SzGetMessage([out,string] char **s1);
SERVER CODE 
STDMETHODIMP CStringTypes::SzGetMessage(unsigned char 
** s1)
{
char message[] = "Returned ABC 123";
long len = sizeof(message);
118    Chapter 8 •
Defining and Using Interfaces 
*s1 = (unsigned char*)CoTaskMemAlloc( len );
if (*s1 == NULL) return E_OUTOFMEMORY;
strcpy( (char*)*s1, message );
return S_OK;
}
CLIENT USEAGE 
char *ps=NULL;
pI->SzGetMessage(&ps);
// use the pointer
CoTaskMemFree(ps);
In this example we used the [string] attribute to determine
the length of the string buffer. We could just as easily have used
[size_is] and explicitly determined the buffer size. 
BSTR is a data structure that contains an array of characters,
preceded by the string length. BSTR's are NULL terminated, but
they aren't simple arrays. There can be several null terminators
in a BSTR, but the last counted element in the array will always
have a NULL terminator. If you're using dual or oleautomation
interfaces, you will need to work with BSTR's. 
BSTR's are a difficult type to use in C++. You shouldn't try to
manipulate them directly. Fortunately there are several helper
classes and functions available. 
• SysAllocString, SysFreeString create and destroy BSTR's. 
• CString::AllocSysString and CString::SetSysString. 
• bstr_t encapsulates the BSTR class in C++ 
• The ATL CComBstr wrapper class. 
MIDL DEFINITION 
HRESULT BsSend([in] BSTR bs);
HRESULT BsRead([out] BSTR *pbs);
SERVER CODE 
BSTR m_BSTR;
STDMETHODIMP CStringTypes::BsSend(BSTR bs)
Arrays
119
Additonal Information and Updates: http://www.iftech.com/dcom
{
  m_BSTR = bs;// save value in local 
  return S_OK;
}
STDMETHODIMP CStringTypes::BsRead( BSTR *pbs)
{
  CComBSTR temp;
  temp = m_BSTR;
  temp.Append( " Returned" ); 
  *pbs = temp;
  return S_OK;
}
CLIENT USEAGE 
wchar_t tempw[] = L"This is a BSTR";
BSTR bs1 = SysAllocString(tempw);
BSTR bs2;
pI->BsSend( bs1 );
pI->BsRead( &bs2 );
Note that the string was first created as a wide character
string (wchar_t), and then it was copied into the BSTR using
SysAllocString(). This extra step is required to properly initialize
the character count in the BSTR. You free the string with Sys-
FreeString.
MIDL strings are extremely simple to define. That's not to
say they are easy to use. Passing strings and arrays across a COM
interface can be frustrating. COM needs a lot of information
about parameter lengths before they can be transmitted. When
working with strings you need to pay particular attention to
attributes.
Arrays
In many ways our discussion of strings covers the important
issues concerning arrays; strings are a specialization of arrays.
COM allows four basic types of arrays: Fixed, Conformant, vary-
120    Chapter 8 •
Defining and Using Interfaces 
ing, and open. Arrays can be multi-dimensional, and have a set
of special attributes associated with them.
MIDL DEFINITION 
HRESULT TestFixed([in,out] long lGrid[10]);
HRESULT TestConf([in] long lSize,
                 [in,out,size_is(lSize)] long *lGrid);
SERVER CODE 
STDMETHODIMP CArrayTypes::TestFixed(long lGrid[10])
{
for( int i=0; iTestFixed( arr );
pI->TestConf( 10, arr );
Varying arrays, and their close cousin open arrays allow the
interface designer to have even more control over how data is
transferred. By using the first_is, length_is, and last_is attributes,
you can design the interface so that only modified data is mar-
shaled and transmitted between the client and server. For large
arrays, this makes it possible to transmit only those elements of
an array that have been changed. 
Structures and Enumerations
MIDL structures are almost identical to "C" language structures.
Unlike the C++ struct, the MIDL type cannot contain methods -
it's limited to data. A MIDL struct is similar to "C" language
structs, which don't allow methods either. Here's a typical MIDL
structure definition: 
typedef struct
{
long lval;
double dval;
short sval;
BYTE bval;
} TestStruct;
The typedef and struct declarations work very similarly to
their "C" counterpart. This is not to say it is an exact analog; like
most of MIDL, it uses a limited subset of data types. You also
can't use a struct in oleautomation or dual interfaces. 
You can define enumerated data types with a typedef state-
ment: 
typedef enum { Red, Blue, Green } RGB_ENUM; 
122    Chapter 8 •
Defining and Using Interfaces 
Values start at 0 and are incremented from there. You can
also explicitly assign values to enum's. MIDL handles enum's as
unsigned shorts. This is incompatible with C++ which uses
signed int's. If you want to be compatible with C++ use the
v1_enum attribute. 
Here's an example using the standard MIDL 8 bit enumera-
tion type. Note that we're giving the enumeration's explicit val-
ues - that's not required. 
MIDL DEFINITION 
typedef enum {Red = 0,Green = 1,Blue = 2} RGB_ENUM;
HRESULT EnumTest([in]  RGB_ENUM e, [out]  RGB_ENUM 
*pe);
SERVER CODE 
STDMETHODIMP CBasicTypes::EnumTest(RGB_ENUM e, 
RGB_ENUM *pe)
{
if (pe == NULL) return E_POINTER;
*pe = e;
return S_OK;
}
CLIENT USAGE 
RGB_ENUM r1, r2;
r1 = Blue;
pI->EnumTest( r1, &r2 );
Note that the client knew about the definition of
RGB_ENUM. MIDL will generate a definition of the enumeration
in the project header, as well as the type library. 
Summary
123
Additonal Information and Updates: http://www.iftech.com/dcom
Summary
Much of the real "COM" programming you do will deal with call-
ing methods and passing parameters. This task is a lot trickier
than it first appears. In C++ this task can be almost seem trivial,
but for components there is a lot you need to know. Fortunately,
MIDL gives us tremendous control over this process. We've tried
to give examples of all the most common data types and
attributes. 
124    Chapter 8 •
Defining and Using Interfaces 
N
I
N
E
9
OLE Automation 
and 
Dual Interfaces  
 There's been a debate going on for years now about the merits
of Visual Basic (VB) and C++. The C++ programmers insist that
their tool offers the most powerful and efficient method of devel-
oping Windows software. VB developers insist their tool is an
easier and quicker way to develop applications. It's undeniable
that Visual Basic is becoming ubiquitous - it's integrated in