title:Enabling trusted stores for android
author:Yury Zhauniarovich and
Olga Gadyatskaya and
Bruno Crispo
DEMO: Enabling Trusted Stores for Android
Yury Zhauniarovich
University of Trento
via Sommarive 14
Trento, Italy
PI:EMAIL
PI:EMAIL
∗
Olga Gadyatskaya
University of Trento
via Sommarive 14
Trento, Italy
Bruno Crispo
University of Trento
via Sommarive 14
Trento, Italy
PI:EMAIL
ABSTRACT
In the Android ecosystem, the process of verifying the in-
tegrity of downloaded apps is left to the user. Diﬀerent
from other systems, e.g., Apple App Store, Google does not
provide any certiﬁed vetting process for the Android apps.
This choice has a lot of advantages but it is also the open
door to possible attacks as the recent one shown by Blue-
box [4]. To address this issue, this demo presents how to
enable the deployment of application certiﬁcation service,
we called TruStore, for the Android platform.
In our ap-
proach, the TruStore client enabled on the end-user device
ensures that only the applications, which have been certiﬁed
by the TruStore server, are installed on the user smartphone.
We envisage trusted markets (TruStore servers, which can
be, e.g., corporate application markets) that guarantee se-
curity by enabling an application vetting process. The Tru-
Store infrastructure maintains the open nature of the An-
droid ecosystem and requires minor modiﬁcations to An-
droid stack. Moreover, it is backward-compatible and trans-
parent for developers, and does not change the application
management process on a device.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Ac-
cess controls, cryptographic controls, authentication
open nature of the Android platform, which allows a user
to download applications not only from the oﬃcial Google
Play market, but virtually from everywhere. Thus, users
shopping at a third-party market cannot be reassured by
just checking that the desired app comes from a trusted de-
veloper and has good reviews. And while the biggest phone
manufactures claim to have ﬁxed this vulnerability in their
currently supported phones, minor providers might simply
ignore it. Moreover, unsupported devices of major players
are still the target for this attack. Anyway, the issue of
repackaging Android apps is more general and still open [5].
While other players, such as Apple and RIM, addressed
the problem by running their certiﬁcation schemes and vet-
ting each application before being published on their own
(unique) market, Google chose a diﬀerent path. In the spirit
of openness to third-party developers, Android apps do not
need to be certiﬁed before being published in any market.
This demo shows how to enable and support an appli-
cation certiﬁcation service for the Android ecosystem. We
describe in details how to set up TruStores. A TruStore
is a market that publishes only certiﬁed applications. Im-
portantly, TruStores can certify existing applications and
new ones without posing any constraints to developers and
without changing the process of Android application devel-
opment. The client side of TruStore relies on the current
platform architecture and requires only minor modiﬁcations
of the Android sources to enable the protection.
Keywords
Android, application markets, trusted installation
2. TRUSTORE
1. MOTIVATION
One of the recent attacks on Android, which is discovered
by BlueBox, demonstrates that an attacker might be able
to inject malicious code into a legitimate application with-
out damaging the digital signature of the original developer
[4]. This type of attacks is quite dangerous considering the
∗Corresponding author.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512496.
This section overviews the main components needed to
run TruStore in Android. The TruStore architecture con-
sists of two main parts: a server and a client.
TruStore Server.
On the server side TruStore, besides oﬀering the standard
app publishing and provisioning functionality, is responsi-
ble for the application vetting process. Applications provi-
sioned by TruStore are trusted with respect of the declared
vetting process. This process can include static analysis of
application executables and source code (if provided), dy-
namic analysis, permission analysis, application ﬁles veri-
ﬁcation (for instance, to check for the “Master Key” vul-
nerability [4]), etc. What the TruStore server certiﬁes and
which technology uses for this is outside the scope of this
work. However, the interested reader can refer to, e.g., [3,
1, 2] for examples of app veriﬁcation frameworks.
Operationally, the process of application certiﬁcation looks
in the following way. A developer builds and signs (using
1345her own certiﬁcate) an application and uploads it to the
TruStore server.
The server performs the analysis of the provided resources
(executables and/or source code). If the app has passed the
vetting process, the server signs the application with its own
certiﬁcate and places it in the market to be accessible by
users. It should be mentioned that this process is completely
transparent for application developers and does not change
current development and publishing workﬂow.
Application Multisigning.
Most of Android apps are sealed with a developer-signed
certiﬁcate (notice that for Android “certiﬁcate” and “signa-
ture” are used interchangeably). This certiﬁcate assures that
the code of the original application and its update come from
the same place, and establishes trust relationships between
applications of the same developer. To perform these checks
Android simply compares binary representations of certiﬁ-
cates, corresponding private keys of which were used to sign
an application and its update (in the ﬁrst case) and collab-
orating applications (in the second).
This check is implemented in PackageManagerService in
the method ‘checkSignaturesLP’, which takes as parame-
ters two arrays of Signature. In Android it is possible to
sign the same application with several diﬀerent certiﬁcates.
This explains why the method takes the arrays of signatures.
Despite the fact that this method takes the central place in
the Android security provision, its behaviour strongly de-
pends on the version of the platform.
In the newer ver-
sions (starting from Android 2.2) this method compares two
sets of Signature, and if both sets are equal returns SIG-
NATURE_MATCH value, and SIGNATURE_NO_MATCH otherwise or
if an array is equal to null. Before the version 2.2, this
method checked if the ﬁrst set is contained in the second.
That behaviour allowed the system to install upgrades even
if they had been signed only with a subset of certiﬁcates of
the original application.
Today there are no beneﬁts of signing an application with
multiple certiﬁcates and this functionality can be easily sup-
pressed. However, we believe that for compatibility reasons
Google will not change it in the near future. This multisign-
ing functionality is the cornerstone of the TruStore client.
TruStore Client.
The client part is based on a modiﬁed Android system; it
allows a device holder to make use of TruStore.
Figure 1 summarises the architecture of the TruStore client.
We implemented our proof-of-concept prototype for the Google
Nexus S phone using 4.1.2 r2 version of AOSP. The TruStore
modiﬁcations touch two levels of the Android software stack:
the Application and the Android Framework levels; at both
of these levels our implementation changes the standard An-
droid components, as well as adds new parts.
The TruStore management process starts with the acti-
vation of the TruStore protection in the standard Android
Settings application. In this application we added two pref-
erences: the ﬁrst activates the TruStore protection, while the
second allows a user to see the list of installed trusted store
certiﬁcates (see Figure 2a). If a user wants to activate the
TruStore protection she checks the added checkbox (step a
in Figure 1). The value of this setting is written into the Set-
tings.Secure content provider, and is later used by diﬀerent
components to detect if the TruStore protection is enabled.
Figure 1: The TruStore architecture: the steps with letters represent
the TruStore management process; those ones with numbers describe
the checks during application installation.
After the activation of the TruStore protection a user is able
to see the list of TruStores X.509 certiﬁcates installed in the
system (step b). In this screen a user has an option of adding
a new TruStore certiﬁcate (see Figure 2b). The Settings ap-
plication shares its UID with the system server. So as it is
prohibited to read the content of the external storage from
the system process, the functionality to display and select
the available certiﬁcates (step c) is passed to an additional
application TruStoreList (Figure 2c), which is launched from
Settings using an explicit intent.
To securely preserve a certiﬁcate with the additional data
the system KeyStore component is used. This is the stan-
dard way to store credentials on Android. This component
automatically encrypts the stored information and grants
access to it (based on UID) only to the component that orig-
inally initiated preservation of the data. As TruStoreService
is a part of the system server, only the Android components
with UID equal to 1000 can read and modify these data.
To distinguish the TruStore information from other creden-
tials stored in the credential storage we add a special preﬁx
(TRUSTORE). Thus, TruStoreService selects from the stor-
age only the appropriate credential data.
Currently there are several ways to start the installation
of a new application on a device. This can be done using
the Google Play or PackageInstaller applications, or using
the adb install command. The app installation process
with the activated TruStore protection does not diﬀer from
the normal one. A user launches the installation using our
modiﬁed version of PackageInstaller and executes the usual
app installation steps (step 1). In our prototype we modiﬁed
the PackageInstaller application, because this component is
open-source. However, similar modiﬁcations can be easily
be incorporated into the proprietary Google Play app.
After the initial steps the installer notiﬁes PackageMan-
agerService to start the actual installation of the package into
the system. This is a special service in the Android system
responsible for package management. From this point Pack-
ageManagerService performs the job, while PackageInstaller
waits for the installation report. To perform the TruStore
check we add a hook into the method installPackageLI of
PackageManagerService. This hook extracts the certiﬁcates
of the installed package and compares them against the list
of trusted store certiﬁcates using TruStoreService (step 3).
The hook is embedded in the place when Android Package-
ManagerService has ﬁnished all veriﬁcation steps.
In this
way, we are sure that the private keys corresponding to the
Modified Android componentsTruStore componentsPackageManagerServicePackageInstallerTruStoreServiceKeyStoreUnmodified Android componentsSettingsApplicationTruStoreListAndroidFramework5678abcde4321f1346Figure 2: Screenshots of TruStore: (a) Settings to enable TruStore, (b) The certiﬁcate list of trusted stores, (c) TruStoreList application,
(d) PackageInstaller error when a package is not signed by the TruStore certiﬁcate
(a)
(b)
(c)
(d)
certiﬁcates extracted from the package to be installed have
been used to sign the package (thus, verifying the integrity
of the signatures). TruStoreService matches the obtained
list against the list of TruStore certiﬁcates; the result of this
comparison is passed back to PackageManagerService (step
4). If a match is found then the service ﬁnishes the instal-
lation and notiﬁes PackageInstaller about the success, oth-
erwise it generates a special error that is displayed to the
user (Figure 2d) by the installer application (steps 7, 8).
PackageInstaller modiﬁcations constitute only in the ability
to correctly display the explanation of this error.
App Management with TruStore.
Let us we consider how the process of application man-
agement has been changed with the TruStore modiﬁcations.
There are three main points in the lifecycle of each applica-
tion: install, update and delete. The process of application
deletion from a user or developer point of view is not changed
by TruStore, so it is not considered.
The installation process of an application was considered
in details in the previous section; it is not altered from the
developer perspective, but is changed from the user angle
(installation may fail now). However, it is worth mention-
ing that if an app is installed from a TruStore market, all
consequent updates must come from the same store. Oth-
erwise, the Android system will cancel the update which is
not signed by the TruStore certiﬁcate.
At the same time, the TruStore approach does not reduce
the app update capabilities for a developer. In our approach,
she has to submit a new version of her app to the TruStore
server as usual, where it will be analysed and redistributed to
users. The “kill switch” functionality can also be supported
via TruStore.
The TruStore modiﬁcations inﬂuence interactions between
app components protected with the signature and sig-
natureOrSystem types of Android permissions, and on the
sharedUserId interactions. The TruStore modiﬁcations will
prohibit such kind of interactions between applications that
are installed from diﬀerent trusted markets, although they
may have been implemented by the same developer. This
limitation comes from the fact that the applications installed
from diﬀerent TruStore markets will have diﬀerent set of sig-
natures (although the developer signature may be the same).
However, this restriction enables more security: TruStore
ensures safety of the apps loaded via itself, while safety of
apps on other third-party markets cannot be guaranteed (es-
pecially, in the light of the attack discussed in §1), and the
interactions between trusted and untrusted apps may lead
to information leaks and privilege escalation attacks.
3. CONCLUSIONS
We have presented how to support application certiﬁca-
tion in Android. TruStore aims at enhancing security of the
Android ecosystem by adding the market signature to ap-
plication packages upon a successful vetting process. The
concept of market signatures is not novel, as it is used,
e.g., by Apple. The main contribution of our approach
is the backward-compatibility with the Android ecosystem.
TruStore is fully transparent to legitimate application de-
velopers and does not require major modiﬁcations to the
ﬁrmware. It may be adopted immediately by phone produc-
ers with their own markets, for example, Samsung; and, if
being incorporated into the Android distribution released by
Google, may become a valuable feature for corporate appli-
cation markets to enable BYOD policies.
Acknowledgments.
This work has been partially supported by the FP7-ICT
SecCord Project 316622 funded by the EU and the TENACE
PRIN Project 20103P34XC funded by the Italian MIUR.
4. REFERENCES
[1] W. Enck, M. Ongtang, and P. McDaniel. On
lightweight mobile phone application certiﬁcation. In
Proceedings of the 16th ACM conference on Computer
and communications security, CCS ’09, pages 235–245,
New York, NY, USA, 2009. ACM.
[2] P. Gilbert, B. Chun, L. Cox, and J. Jung. Vision:
automated security validation of mobile apps at app
markets. In Proc. of MCS’2011, pages 21–26, 2011.
[3] V. Rastogi, Y. Chen, and W. Enck. Appsplayground:
automatic security analysis of smartphone applications.
In Proc. of CODASPY ’13, pages 209–220, 2013.
[4] T. SecurityLedger. Exploit code released for android
security hole https://securityledger.com/2013/07/
exploit-code-released-for-android-security-hole/,
Jul. 2013.
[5] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou.
Fast, scalable detection of ”piggybacked” mobile
applications. In Proc. of CODASPY ’13, pages
185–196, 2013.
1347