the "user" setting, which allows you to force the Android app to trust this certificate with the following Net
work Security Configuration configuration below:
```xml
To implement this new setting you must follow the steps below:
Decompile the app using a decompilation tool like apktool:
$ apktool d .apk
Make the application trust user certificates by creating a network security configuration that includes
 as explained above
Go into the directory created by apktool when decompiling the app and rebuild the app using apktool. The new
apk will be in the dist directory.
$ apktool b
You need to repackage the app, as explained in the repackaging chapter. For more details on the repackaging
process you can also consult the Android developer documentation, that explains the process as a whole.
Note that even if this method is quite simple its major drawback is that you have to apply this operation for each
application you want to evaluate which is additional overhead for testing.
Bear in mind that if the app you are testing has additional hardening measures, like verification of the app
signature you might not be able to start the app anymore. As part of the repackaging you will sign the app with
your own key and therefore the signature changes will result in triggering such checks that might lead to
immediate termination of the app. You would need to identify and disable such checks either by patching them
during repackaging of the app or dynamic instrumentation through Frida.
There is a python script available that automates the steps described above called Android-CertKiller. This Python
script can extract the APK from an installed Android app, decompile it, make it debuggable, add a new network
security config that allows user certificates, builds and signs the new APK and installs the new APK with the SSL
Bypass. The last step, installing the app might fail, due to a bug at the moment.
python main.py -w
***************************************
Android CertKiller (v0.1)
***************************************
CertKiller Wizard Mode
---------------------------------
List of devices attached
4200dc72f27bc44d device
---------------------------------
144
Setting up a Testing Environment for Android Apps
Enter Application Package Name: nsc.android.mstg.owasp.org.android_nsc
Package: /data/app/nsc.android.mstg.owasp.org.android_nsc-1/base.apk
I. Initiating APK extraction from device
complete
------------------------------
I. Decompiling
complete
------------------------------
I. Applying SSL bypass
complete
------------------------------
I. Building New APK
complete
------------------------------
I. Signing APK
complete
------------------------------
Would you like to install the APK on your device(y/N): y
------------------------------------
Installing Unpinned APK
------------------------------
Finished
# Adding the Proxy's certificate among system trusted CAs using Magisk
In order to avoid the obligation of configuring the Network Security Configuration for each application, we must force
the device to accept the proxy's certificate as one of the systems trusted certificates.
There is a Magisk module that will automatically add all user-installed CA certificates to the list of system trusted CAs.
Download the latest version of the module here, push the downloaded file over to the device and import it in the
Magisk Manager's "Module" view by clicking on the + button. Finally, a restart is required by Magisk Manager to let
changes take effect.
From now on, any CA certificate that is installed by the user via "Settings", "Security & location", "Encryption &
credentials", "Install from storage" (location may differ) is automatically pushed into the system's trust store by this
Magisk module. Reboot and verify that the CA certificate is listed in "Settings", "Security & location", "Encryption &
credentials", "Trusted credentials" (location may differ).
# Manually adding the Proxy's certificate among system trusted CAs
Alternatively, you can follow the following steps manually in order to achieve the same result:
Make the /system partition writable, which is only possible on a rooted device. Run the 'mount' command to make
sure the /system is writable: mount -o rw,remount /system . If this command fails, try running the following
command 'mount -o rw,remount -t ext4 /system'
Prepare the proxy's CA certificates to match system certificates format. Export the proxy's certificates in der
format (this is the default format in Burp Suite) then run the following commands:
$ openssl x509 -inform DER -in cacert.der -out cacert.pem
$ openssl x509 -inform PEM -subject_hash_old -in cacert.pem | head -1
mv cacert.pem .0
Finally, copy the .0 file into the directory /system/etc/security/cacerts and then run the following
command:
chmod 644 .0
145
Setting up a Testing Environment for Android Apps
By following the steps described above you allow any application to trust the proxy's certificate, which allows you to
intercept its traffic, unless of course the application uses SSL pinning.
Potential Obstacles
Applications often implement security controls that make it more difficult to perform a security review of the
application, such as root detection and certificate pinning. Ideally, you would acquire both a version of the application
that has these controls enabled, and one where the controls are disabled. This allows you to analyze the proper
implementation of the controls, after which you can continue with the less-secure version for further tests.
Of course, this is not always possible, and you may need to perform a black-box assessment on an application where
all security controls are enabled. The section below shows you how you can circumvent certificate pinning for different
applications.
Client Isolation in Wireless Networks
Once you have setup an interception proxy and have a MITM position you might still not be able to see anything. This
might be due to restrictions in the app (see next section) but can also be due to so called client isolation in the Wi-Fi
that you are connected to.
Wireless Client Isolation is a security feature that prevents wireless clients from communicating with one another. This
feature is useful for guest and BYOD SSIDs adding a level of security to limit attacks and threats between devices
connected to the wireless networks.
What to do if the Wi-Fi we need for testing has client isolation?
You can configure the proxy on your Android device to point to 127.0.0.1:8080, connect your phone via USB to your
laptop and use adb to make a reverse port forwarding:
$ adb reverse tcp:8080 tcp:8080
Once you have done this all proxy traffic on your Android phone will be going to port 8080 on 127.0.0.1 and it will be
redirected via adb to 127.0.0.1:8080 on your laptop and you will see now the traffic in your Burp. With this trick you
are able to test and intercept traffic also in Wi-Fis that have client isolation.
Non-Proxy Aware Apps
Once you have setup an interception proxy and have a MITM position you might still not be able to see anything. This
is mainly due to the following reasons:
The app is using a framework like Xamarin that simply is not using the proxy settings of the Android OS or
The app you are testing is verifying if a proxy is set and is not allowing now any communication.
In both scenarios you would need additional steps to finally being able to see the traffic. In the sections below we are
describing two different solutions, bettercap and iptables.
You could also use an access point that is under your control to redirect the traffic, but this would require additional
hardware and we focus for now on software solutions.
For both solutions you need to activate "Support invisible proxying" in Burp, in Proxy Tab/Options/Edit Interface.
iptables
You can use iptables on the Android device to redirect all traffic to your interception proxy. The following command
would redirect port 80 to your proxy running on port 8080
$ iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to-destination :8080
146
Setting up a Testing Environment for Android Apps
Verify the iptables settings and check the IP and port.
$ iptables -t nat -L
Chain PREROUTING (policy ACCEPT)
target prot opt source destination
Chain INPUT (policy ACCEPT)
target prot opt source destination
Chain OUTPUT (policy ACCEPT)
target prot opt source destination
DNAT tcp -- anywhere anywhere tcp dpt:5288 to::8080
Chain POSTROUTING (policy ACCEPT)
target prot opt source destination
Chain natctrl_nat_POSTROUTING (0 references)
target prot opt source destination
Chain oem_nat_pre (0 references)
target prot opt source destination
In case you want to reset the iptables configuration you can flush the rules:
$ iptables -t nat -F
bettercap
Read the chapter "Testing Network Communication" and the test case "Simulating a Man-in-the-Middle Attack" for
further preparation and instructions for running bettercap.
The machine where you run your proxy and the Android device must be connected to the same wireless network.
Start bettercap with the following command, replacing the IP address below (X.X.X.X) with the IP address of your
Android device.
$ sudo bettercap -eval "set arp.spoof.targets X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof
.fullduplex true;"
bettercap v2.22 (built for darwin amd64 with go1.12.1) [type 'help' for a list of commands]
[19:21:39] [sys.log] [inf] arp.spoof enabling forwarding
[19:21:39] [sys.log] [inf] arp.spoof arp spoofer started, probing 1 targets.
Proxy Detection
Some mobile apps are trying to detect if a proxy is set. If that's the case they will assume that this is malicious and will
not work properly.
In order to bypass such a protection mechanism you could either setup bettercap or configure iptables that don't need
a proxy setup on your Android phone. A third option we didn't mention before and that is applicable in this scenario is
using Frida. It is possible on Android to detect if a system proxy is set by querying the ProxyInfo class and check the
getHost() and getPort() methods. There might be various other methods to achieve the same task and you would
need to decompile the APK in order to identify the actual class and method name.
Below you can find boiler plate source code for a Frida script that will help you to overload the method (in this case
called isProxySet) that is verifying if a proxy is set and will always return false. Even if a proxy is now configured the
app will now think that none is set as the function returns false.
setTimeout(function(){
Java.perform(function (){
console.log("[*] Script loaded")
147
Setting up a Testing Environment for Android Apps
var Proxy = Java.use(".")
Proxy.isProxySet.overload().implementation = function() {
console.log("[*] isProxySet function invoked")
return false
}
});
});
Certificate Pinning
Some applications will implement SSL Pinning, which prevents the application from accepting your intercepting
certificate as a valid certificate. This means that you will not be able to monitor the traffic between the application and
the server.
For information on disabling SSL Pinning both statically and dynamically, refer to "Bypassing SSL Pinning" in the
"Testing Network Communication" chapter.
References
Signing Manually (Android developer documentation) - https://developer.android.com/studio/publish/app-
signing#signing-manually
Custom Trust - https://developer.android.com/training/articles/security-config#CustomTrust
Basic Network Security Configuration - https://codelabs.developers.google.com/codelabs/android-network-
security-config/#3
Security Analyst’s Guide to Network Security Configuration in Android P -
https://www.nowsecure.com/blog/2018/08/15/a-security-analysts-guide-to-network-security-configuration-in-
android-p/
Android developer documentation - https://developer.android.com/studio/publish/app-signing#signing-manually
Android 8.0 Behavior Changes - https://developer.android.com/about/versions/oreo/android-8.0-changes
Android 9.0 Behavior Changes - https://developer.android.com/about/versions/pie/android-9.0-changes-
all#device-security-changes
Codenames, Tags and Build Numbers - https://source.android.com/setup/start/build-numbers
Create and Manage Virtual Devices - https://developer.android.com/studio/run/managing-avds.html
Guide to rooting mobile devices - https://www.xda-developers.com/root/
API Levels - https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels
AssetManager - https://developer.android.com/reference/android/content/res/AssetManager
SharedPreferences APIs - https://developer.android.com/training/basics/data-storage/shared-preferences.html
Debugging with Logcat - https://developer.android.com/tools/debugging/debugging-log.html
Android's .apk format - https://en.wikipedia.org/wiki/Android_application_package
Android remote sniffing using Tcpdump, nc and Wireshark - https://blog.dornea.nu/2015/02/20/android-remote-
sniffing-using-tcpdump-nc-and-wireshark/
Wireless Client Isolation -
https://documentation.meraki.com/MR/Firewall_and_Traffic_Shaping/Wireless_Client_Isolation
Tools
adb - https://developer.android.com/studio/command-line/adb
Androbugs - https://github.com/AndroBugs/AndroBugs_Framework
Android NDK Downloads - https://developer.android.com/ndk/downloads/index.html#stable-downloads
Android Platform Tools - https://developer.android.com/studio/releases/platform-tools.html
Android Studio - https://developer.android.com/studio/index.html
Android tcpdump - https://www.androidtcpdump.com/
148
Setting up a Testing Environment for Android Apps
Android-CertKiller - https://github.com/51j0/Android-CertKiller
Android-SSL-TrustKiller - https://github.com/iSECPartners/Android-SSL-TrustKiller
angr - https://github.com/angr/angr
APK Extractor - https://play.google.com/store/apps/details?id=com.ext.ui
APKMirror - https://apkmirror.com
APKPure - https://apkpure.com
apktool - https://ibotpeaches.github.io/Apktool/
apkx - https://github.com/b-mueller/apkx
Burp Suite Professional - https://portswigger.net/burp/
Burp-non-HTTP-Extension - https://github.com/summitt/Burp-Non-HTTP-Extension
Capillary - https://github.com/google/capillary
Device File Explorer - https://developer.android.com/studio/debug/device-file-explorer
Drozer - https://labs.mwrinfosecurity.com/tools/drozer/
FileZilla - https://filezilla-project.org/download.php
Frida - https://www.frida.re/docs/android/
Frida CLI - https://www.frida.re/docs/frida-cli/
frida-ls-devices - https://www.frida.re/docs/frida-ls-devices/
frida-ps - https://www.frida.re/docs/frida-ps/
frida-trace - https://www.frida.re/docs/frida-trace/
InsecureBankv2 - https://github.com/dineshshetty/Android-InsecureBankv2
Inspeckage - https://github.com/ac-pm/Inspeckage
JAADAS - https://github.com/flankerhqd/JAADAS
JustTrustMe - https://github.com/Fuzion24/JustTrustMe
Magisk Modules repository - https://github.com/Magisk-Modules-Repo
Magisk Trust User Certs module - https://github.com/NVISO-BE/MagiskTrustUserCerts/releases
Mitm-relay - https://github.com/jrmdev/mitm_relay
MobSF - https://github.com/MobSF/Mobile-Security-Framework-MobSF
Nathan - https://github.com/mseclab/nathan
Objection - https://github.com/sensepost/objection
OWASP ZAP - https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project
QARK - https://github.com/linkedin/qark/
R2frida - https://github.com/nowsecure/r2frida/
Radare2 - https://rada.re/r/
SDK tools - https://developer.android.com/studio/index.html#downloads
SSLUnpinning - https://github.com/ac-pm/SSLUnpinning_Xposed
Termux - https://play.google.com/store/apps/details?id=com.termux
Wireshark - https://www.wireshark.org/
Xposed - https://www.xda-developers.com/xposed-framework-hub/
149
Data Storage on Android
Data Storage on Android
Protecting authentication tokens, private information, and other sensitive data is key to mobile security. In this chapter,
you will learn about the APIs Android offers for local data storage and best practices for using them.
The guidelines for saving data can be summarized quite easily: Public data should be available to everyone, but
sensitive and private data must be protected, or, better yet, kept out of device storage.
Note that the meaning of "sensitive data" depends on the app that handles it. Data classification is described in detail
in the "Identifying Sensitive Data" section of the chapter "Mobile App Security Testing".
Next to protecting sensitive data, you need to ensure that data read from any storage source is validated and possibly
sanitized. The validation often does not go beyond ensuring that the data presented is of the type requested, but with
using additional cryptographic controls, such as an HMAC, you can validate the correctness of the data.
Testing Local Storage for Sensitive Data (MSTG-STORAGE-1 and MSTG-
STORAGE-2)
Overview
Conventional wisdom suggests that as little sensitive data as possible should be stored on permanent local storage. In
most practical scenarios, however, some type of user data must be stored. For example, asking the user to enter a
very complex password every time the app starts isn't a great idea in terms of usability. Most apps must locally cache
some kind of authentication token to avoid this. Personally identifiable information (PII) and other types of sensitive
data may also be saved if a given scenario calls for it.
Sensitive data is vulnerable when it is not properly protected by the app that is persistently storing it. The app may be
able to store the data in several places, for example, on the device or on an external SD card. When you're trying to
exploit these kinds of issues, consider that a lot of information may be processed and stored in different locations.
Identifying at the outset the kind of information processed by the mobile application and input by the user is important.
Identifying information that may be valuable to attackers (e.g., passwords, credit card information, PII) is also
important.
Disclosing sensitive information has several consequences, including decrypted information. In general, an attacker
may identify this information and use it for additional attacks, such as social engineering (if PII has been disclosed),