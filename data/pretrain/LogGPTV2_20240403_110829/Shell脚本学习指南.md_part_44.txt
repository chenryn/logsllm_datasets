模式为真，歇认操作为打印：
有记录时打印（恒为真）
(print )
模式为真，则打印，这是默认值
( print }
无模式则视为真，明确的打印，这是默认值
( print $0 }
相同，但打印明确的值
含有上述任何一行的单行awk程序，只会将输入流复制到标准输出。
更需见的用法是：一个print语句里包含了以逗点隔开的零或多个表达式。每个表达式
会被计算，有必要时会转换为一个字符串，且以输出字段分隔字符OFS的值将输出分隔
后传送到标准输出，接在最后项目之后的是输出记录分隔字符ORS的值。
print的参数列表及类似功能的printf与sprintf，参见9.9.8节，都可选地放置到圆
括号内.圆括号的使用，是为了避免参数列表包含关系运算符时被误解，因为像
也可用于1/O重定向，详见9.7.6节与9.7.7节。
下面的例子已经是完整的awk程序，在每一个中，我们都只显示前三个输人字段，并通
过省略选定模式，选定所有的记录。awk程序语句以分号分隔，而且我们会使用些略微
不同的操作代码，以修改输出字段分隔字符：
S ecbo'one tvo three four'1awk'( print $1,$2,$3 ）'
one two three
S echo *one tvo three foux' 1 awk *( OFs = *...*; print $1, $2, $3 }
one...two...three
Secbo *one tvo three four' 1 awk *( oFs =*\n°; prlnt $1, $2, $3 )
one
tWO
three
改变输出字段分隔字符而没有指定任何字段，不会改变S0：
..1,
one two three fouz
www.TopSage.com
---
## Page 266
254
第9章
不过，如果我们更改输出字段分隔字符，并指定至少一个字段（即使我们未变更其值），
强制以新的字段分隔字符重新组合记录，则结果为：
S echo 'one tvo three four' I awk '( oFs = *\a*; $1 = $1; print $0 )
one
two
three
four
9.6
在awk里的单行程序
我们到此已介绍了在awk中使用单行程序所完成的很多任务：很少有其他程序语言可以
做到这样。在本节，我们会再介绍一些这类单行程序的例子，不过由于篇辐的限制，我
们有时不得不将它切为数行。在这些例子里，我们会展示以awk或其他UNIX工具程序
解决问题的多种方式：
我们从简单的awk实现开始-UNIX单词计数程序wC：
awk *( C += lengthIS0) + 1; W += NF ) END ( print NR, W, C }*
注意：模式/操作组并不需要以换行字符分隔，不过我们通常会为了阅读上的方便
而这么微。虽然我们可以包括采用BEGIN（C=W=0）形式的初始化块，不
过，awk具有默认的初始化保证，因而这部分是不怎么需要的，上述程序中，C的
字符计数在每条记录处被更薪，计算记录的长度，并加上换行字符（默认的记录分
隔字符）.在W内的单词计数会累积字段的数目。我们不需要保留一个行计数变量，
因为内建记录计数NR会自动为我们追踪该信息。END操作则处理WC所产生的单
行报告打印。
如果经序为空，则awk不会读取任何的输人并立即退出，所以我们可以匹配cat
（作为一个有效率的数据槽）：
$ time cat *.xml >/dev/nu11
0.035u 0.121s 0:00.21 71.480+0k 0+01o 99pf+0w
$ tine awk 'i *.xml
0.136u 0.051s 0:00.21 85.7$ 0+0k 0+0io 140pf+0w
激开NUL字符问题，awk其实可以轻松取代cat，下面这两个例子会产生相同输出：
cat *.xm1
awk 1 *.xml
要将原始数据值及它们的对数打印为单栏的数据文件，可使用：
awk *( print $1, log($1) )’ file(s)
要从文本文件里，打印5%行左右的随机样本，可使用虚拟随机产生函数（见9.10
节），这会产生平均分布于0与1之间的值：
www.TopSage.com
---
## Page 267
awk的惊人表现
255
avk 'rand()  nev
xou new
要将各栏分隔字符由制表字符（在此以·显示）转换成&，可在以下两种方式择一：
(8)07z.5/9//./5,9-p9s
awk 'BEGIN [ PS = *\t°; OFS = *s* } { $1 = $1; print }′ file(s)
下面这两个管道，都为删除已排序流里的重复行：
sort file(s) 1uniq
sort file(s) I awk 'Last 1= $0 [ print ) { Last = $0 }*
将回车字符/换行字符的行终结，一致转换为以换行字符作为行终结，可在下列方
式中选择一种：
(8）//x/8.e-pes
sed -e *s/~ms//, fi2e(s)
mawk 's&GIN ( RS = *\r\n* ) { print }° file(s)
第一个sed需要一个现代的版本，它会认得转义序列。在第二个例子里，~M表示
www.TopSage.com
---
## Page 268
256
第9章
网
的是字面上的Ctrl-M（回车），第三个例子，我们需要gawk或是mawk，因为nawkO1m
与POSIXawk都不支持在RS里拥有超过单一字符以上的设置方式。
要将单空格的文本行，转换为双空格的行，可在下列方式选择一种：
(）.///.-
avkBEGIN （ORS=*\n\n" )(print }’file（8)
avk ·BEGIN ( ORS = *\n\n* } 1* file(s)
amk'(print S0 "\n*)· file（s)
avk '{ print; print "* }′ file(s)
正如之前一样，我们需要现代的sed版本。请留意，在第一个awk例子里，我们
如何以简单变更输出记录分隔字符ORS解决此问题：程序的剩余部分只要将每条记
录显示出来即可。其余的两个awk解决方案则需要对每条记录作更多的处理，且通
常在执行上会比第一个慢些。
将双空格行转换为单空格一样是很容易的：
gawk *BBGIN ( RS=*\n *\n* )( print }′ file(8)
在Fortran77的程序里，寻找超过限制长度72个字符的行（注2），可使用下列方
式之一：
egrep *n *.(73,)**.f
°....1.d d）]*>* }( print }· *,htm]
注 2 :
Fortran行长度限制在田式的打孔卡上不会有问题，但当它出现在现今以募基为主要编辑
媒介上时就麻烦了，它会今端辑器静取地忽略超过72个字投宽度的语的内容，而滨变成
相当林手的bug。
www.TopSage.com
---
## Page 269
awk的惊人表现
257
通过将ORS设置为一空格，会使得HTML标记被转换为一空格，且所有输人行的
断行都会被保留下来。
下面的例子是说明：如何将一组XML文件（就像本书一样）里所有的标题（title）
取出，然后打显示来，一个标题一行，并以标记包围它。即便是标题横跨数行，此
程序都能正常运行，除此之外还能处理标签单词与关闭角括号之间的空格，这种情
况虽不常见，但是合法的：
1x。////..[u]，=SA-=A-x 5
bgu\9g.0-poe
Enough awk to Be Dangerous
Freely avai1able awk version8
ctitle>The awk Command Line
awk程序所产生的是单行输出，所以现代版本的sed过滤程序提供必需的断行，在
这里可以省去sed处理，要这么做的话，则必须用到下一段要讨论的awk语句。
9.7语句
程序语言必须支持连续性的、条件式的及重复的执行。awk大量地借用C程序语言的语
句以提供这些功能。除此之外，本节还会提到awk专有的不同语句类型。
9.7.1连续执行
连续的执行是以一个语句一行或以分号隔开的方式，提供一连串语句列表。下面这三行：
n - 123
8 = “ABC*
t = s n
也可以这样写：
n - 123; S = *ABC'; t = S 
在单行程序里，我们通常会使用分号形式，但awk程序也支持由文件提供的方式，我们
通常会将各个语句分别放在它自己的行上，反而很少用到分号。
虽然程序预期的是单一语句，不过我们还是能使用复合语句（compound statement）的
方式，以大括号将语句组起来。因此，和awk模式相关联的操作正是复合语句。
9.7.2条件式执行
awk以if语句提供条件式的执行：
www.TopSage.com
---
## Page 270
258
第9章
if (expression)
statement1
if (expression)
statenentl
else
statenent2
如果expzession非零（为真），则执行statementi.否则，如果有else则执行
statement2。这里的每个语句本身也可以是if语句，所以多分支条件语句的一般写法
通常是这样：
Lf (expressionl)
eLse if (expression2)
statenent1
else if (expresgion3)
statenent2
statenent.3
else if (expressionk)
statementk
else
statementk+1
最后一个elBe是选择性的，它一定与前一个最接近的if（在相同层级上）相关联。
在多分支的if语句里，是依次测试条件表达式：如果第一个就匹配，则选定相关联的
语句执行，之后，控制权继续执行接在完整if语句后面的语句，无须计算语句剩余部
分的条件式表达式。如果无表达式匹配，则执行最后的else分支。
9.7.3重复执行
awk提供了4种重复执行语句（循环）：
循环在起始处使用结束测试：
while (expzession)
statenent
循环在结尾处使用结束测试：
do
while (expression)
statement
循环执行可计数的次数：
for (exprl; expr2; expz3)
statement
循环处理关联数组里的元素：
www.TopSage.com
---
## Page 271
awk的惊人表现
259
for (key in array)
statenent
Sage.com
while循环可满足重复许多次的需求，典型的情况就是：当有数据时，就处理它，do
循环则较少用到：例如，它通常出现在优化问题的地方，用来减少“错误计算的计算，
且当错误太大时可以不断地重复测试”。这两个循环都是在表达式为非零（真）的情况
下进行。如果表达式初始值为零，则while的循环体完全不会执行、然而do循环体则
执行一次。
for循环的第一种形式包含三个以冒号分隔的表达式，其中任一个或是全部都可为空。
第一个表达式于循环开始之前被计算。第二个则于每次重复的起始时被计算，且当它是
非零（为真）时，循环会继续下去。第三个表达式是在每个重复结束时被计算。传统循
环是从1到n，写法就像这样：
for (k = 1; k = 1; k--)
statement
注意：因为浮点算术通常不精确，所以请避免在for语句表达式里，计算非整数的值。例如这类
循环：