7
(1)
k(cid:88)
i=1
1
2
wT w + C
min
w,b,ξ
ξi
subject to yi(wT φ(xi) + b) ≥ 1 − ξi
where ξi ≥ 0
The function ξ maps the training vectors into a higher dimensional space. In
this higher dimensional space a linear separating hyperplane is found by SVM
where C > 0 is the penalty parameter of the error term. For the kernel function
in our paper we use linear kernel:
K(xi, xj) = xT
i xj
(2)
In our work, we have many application to classify. Therefore, multi-class
SVM library LIBSVM [12] is used.
(cid:83)
In addition, we apply the cross-validation (CV) technique. In K-fold CV,
the training data D is partitioned into N subsets D, . . . , DN . Each data in
D is randomly separated to each subset with equal size. So, we deﬁne Dti =
j=1,...,N (j(cid:54)=i) where Dti is the union of all data except those in Di. For each
subset a model is built by applying the algorithm to the training Dti. The average
of N results are evaluated as cross-validation (test) performance.
3 Methodology
In this section, we show how machine learning can be used on cache proﬁles
to detect running programs. One speciﬁc use case is the detection of the ping
service, which can serve as an implicit co-location test.
3.1 Extracting Feature Vectors from Applications on Cache
Our thesis is to show that programs have unique ﬁngerprints in cache and it
is possible to learn and classify application ﬁngerprints using ML algorithms
with a high accuracy. The proposed approach starts by creating proﬁles for
every software using the Prime&Probe technique. This way, dynamic and static
functions of the application are detected, resulting in fairly reliable ﬁngerprints.
The raw cache timing traces are ﬁrst turned into hits and misses, followed by a
Fourier transform. Performing a Fourier transform on the cache proﬁles removes
the need for tight synchronization and makes the approach more resilient to
noise. The FFT output can then directly be fed into a machine learning method
of choice. The process to obtain application ﬁngerprints is visualized in Figure 1.
Our approach diﬀers from previous works in cache-based information extraction
in several ways:
8
Fig. 1. The ﬂow chart of the approach for both L1 and LLC proﬁling
Fourier Transform Most previous works [13,18,22], assume the monitoring
process to be synchronized. The synchronization is handled by triggering
the event, then the proﬁling phase is started. However, it is not trivial when
the monitoring process and the target do not have communication. In ad-
dition, the functions periodically accessed in the application would give a
certain information which could be exploited by using Fourier transform.
Therefore, we transform the data to frequency domain from time domain in
order to eliminate a strong assumption like synchronization and to extract
the periodic functions’ cache accesses as ﬁngerprints of the applications.
No Deduplication Deduplication enables incredibly powerful side channel at-
tacks [13,9,29], most prominently the Flush and Reload technique [34,13].
However, public cloud service providers are aware of this issue and have dis-
abled deduplication. Therefore, it is impossible to track data of other VMs
in shared memory in IaaS and most PaaS clouds. Hence, the Prime&Probe
technique is preferred to implement in our scenario instead of the Flush
and Reload method to eliminate the strong assumption for deduplication.
Prime&Probe technique is simply based on ﬁll all ways in the monitored
LLC set by enabling Huge pages which is possible in all public clouds.
The resolution of the resulting analysis is lower than Flush and Reload
method in LLC, however the results show that after training enough data it
is eﬃcient to detect programs used by other co-located VMs.
Detecting Dynamic Code Our method does not make any assumption on
whether code is dynamic, static or a shared function. Instead, we proﬁle one
of the columns in the cache, as shown in Figure 2. This means the location
of a line in LLC might change from one run to another run if the function
is dynamic. However, the oﬀset bits (o) never change therefore, it resides on
one of the set-slice pairs solving s mod 64 = o.
Long proﬁles Our method shows that even if the entire process of a program
is not proﬁled, the spectral density of a small part of the program can give
enough information to detect the program (in fact, the length of the analyzed
programs varies from two seconds to 3.5 hours).
9
Fig. 2. Visualization of 10 core LLC. Gray set-slice pairs are noisy, white set-slice pairs
are unused sets and black set-slice pairs are actively used by target application.
Our approach starts by creating cache proﬁles for every application by using
the Prime&Probe technique in the same core to monitor all L1 cache sets. The
analysis of L1 cache leakage provides a very high-resolution channel, thereby
describing a best-case scenario for the learning technique. In addition, the L1
cache experiments provide valuable information which cache sets are actively
used by the application. This information can be used as a preparatory step for
LLC proﬁling to ﬁnd the corresponding active sets in LLC. After the data is
collected for a set of application, the Fourier transform is applied to extract the
feature vectors subsequently used in an ML algorithm.
3.2 Extracting feature vectors from L1 cache
We assume that the number of L1-instruction and L1-data cache sets are SL1
for either cache. In L1 cache, the data and instruction cache are monitored
separately, while proﬁling process and target application are running in the same
core. The overall process to monitor L1 sets and creating feature vectors for
diﬀerent applications is given in Algorithm 1.
For L1-data and L1-instruction monitoring, a total of NT traces is collected
per set for each data set. Therefore, for each data set we have SL1 · NT traces
in total. After collecting several data sets, the total number of traces is equal to
SL1· NT · ND where ND is the total number of data sets per application collected
by the spy.
10
The outliers in the data should be ﬁltered before the raw data (R) is converted
to binary data (B). Hence, the L1-data and L1-instruction sets are monitored
in idle case and base Probe values are recorded. The outlier threshold (τo) and
binary conversion threshold (τc) are obtained based on the idle values.
Table 1. Symbol Descriptions
Symbols Description
SL1
NT
ND
NS
NC
NA
τo
τc
Fs
FCP U
Tcc
Lf
Number of sets in L1 cache
Number of traces collected
Number of data sets per test
Number of applications
Number of cores
Number of active sets
Outlier threshold for samples
Hit&Miss threshold
Sampling Frequency
CPU frequency
Prime&Probe time
Length of ﬁngerprint
The Probe timings are compared to τo and τc. The values are higher than
τo are set to median value of idle case of that set to get rid of the outliers. The
conversion from R to B is also implemented by comparing with τc. If the Probe
time is higher than τc, then the trace is converted to 1, implying an access to the
cache set. If it is below than τc, the trace is converted to 0, implying no cache
access. The resulting binary trace is converted by using Fourier transform.
In the transformation phase, the sampling frequency should be computed. In
order to calculate the sampling frequency (Fs), the total Prime&Probe time for
monitored set is computed in clock cycle (Tcc), then the CPU frequency (Fcpu)
is divided by Tcc to get Fs for L1-data and L1-instruction cache. We assume that
the sampling frequency is same for all sets in L1-data and L1-instruction cache.
To calculate the frequency components of binary data, Fs is used in FFT and
the length of the outcome is NT . However, the result has two symmetric sides
of which only the ﬁrst half is used as a ﬁngerprint. Therefore, the length of a
ﬁngerprint obtained from one data set is NT /2.
For each process there are SL1 diﬀerent ﬁngerprints hence, these ﬁngerprints
are concatenated from set 0 to set SL1 − 1 sequentially. Thus, the total length
of the ﬁngerprint of a process is Lf = SL1 · NT /2. If the total number of data
sets is ND then, the size of a training matrix of a process is ND · Lf .
The SVM then processes all matrices combined and labeled from 1 to NS
where NS is the number of diﬀerent applications. The ﬁnal success rate is com-
puted using 10-fold cross-validation.
Algorithm 1 L1 Proﬁling Algorithm
Fs = FCP U /Tcc
for i from 1 to NS do
11
for j from 1 to ND do
for k from 0 to SL1 − 1 do
for l from 1 to NT do
if R(i, j, k, l) ≥ τo then
R(i, j, k, l) = median(R(i, j, k, 1 : NT ))
end if
if R(i, j, k, l) ≥ τc then
B(i, j, k, l) = 1
else
B(i, j, k, l) = 0
end if
end for
L(i, j, k) = F F T [B(i, j, k, 1 : NT )]
end for
f = L(i, j, 0 : SL − 1)
Li,j
end for
end for
3.3 Extracting feature vectors from LLC
Next, we apply the approach on LLC leakage. LLC has the advantage that is
accessible for all processes on the same system. Hence, as long as the monitored
process runs on the same system as the monitor, the side channel is accessible,
even if the two processes run in diﬀerent VMs.
After ﬁnding the most used L1 set, the corresponding sets in LLC should
satisfy s mod 64 = o where o is the L1 set number. The number of corresponding
sets vary with the number of cores NC. In total, the number of LLC set-slice
pairs on current Intel CPUs can be determined by
SL3 = 2NLLCB−No · NC
(3)
where NLLCB is the number of LLC bits and No is the number of oﬀset bits.
After the eviction set for each set-slice pair is created by using the algorithm [15],
the Prime&Probe proﬁling starts. For LLC proﬁling NT is same with L1 proﬁling
and after NT traces are monitored in one set-slice pair, the next set-slice pair
is proﬁled. The reason behind this is to increase the temporal resolution for
each set-slice pair which is crucial to catch dominant frequency components in
frequency domain.
After collecting NT · SL3 data, the same process in L1 proﬁling is applied to
LLC traces to get rid of the outliers. Before the binary data is derived from the
raw data, the noisy set-slice pairs need to be eliminated. For this purpose, the
number of cache misses are calculated in idle case and if the number of cache
misses are higher than 1% of NT that set-slice pair is marked as noisy, as shown
in Figure 3. After noisy sets are determined all of them are excluded from the
next steps since the spectral density of these sets is not stable.
12
Fig. 3. Eliminated noisy sets in LLC
Fig. 4. One of the active sets for an application
The active set-slice pairs are determined by checking the number of cache
misses in the data. If the number of cache misses is higher than 3% of NT in
Figure 4, then the set-slice pair is marked as an active set. After all active sets
are derived, they can be converted to binary data with the same process in L1
proﬁling in Figure 5 before the Fourier transform starts.
For the Fourier transform Fs should be calculated for LLC sets. Fs is lower
in LLC proﬁling since the number of ways in the sets are higher than L1 sets
and the access time to lines reside on LLC is greater than L1 lines. Therefore,
the total Prime&Probe time for each set-slice pair should be calculated and the
average of all of them are used as LLC Fs. After Fs is calculated, the active
Set Number050100150200250300350Number of cache misses05001000150020002500Sample Number010002000300040005000600070008000900010000Timing(clock cycle)8010012014016018020022024013
Fig. 5. Hit(0) and miss(1) graph of an active set
Fig. 6. Frequency components of an active set
sets are transformed to frequency domain in Figure 6. The number of frequency
components per NT is same with the L1 proﬁling.
The number of active sets (NA) may vary for each process therefore, the
concatenated active sets have diﬀerent length for each software. To solve this
issue we propose to combine all frequency components of active sets. All fre-
quency components are summed up element-wise and a ﬁngerprint is obtained
from each data set. In LLC proﬁling the length of the ﬁngerprint is smaller than
L1 proﬁling because in LLC scenario we cannot concatenate all active sets.
After obtaining all data sets for each application the total size of matrix for
LLC training data is ND · (NT /2). The SVM algorithm is applied as in the L1
proﬁling case and the results are recorded.
Sample number010002000300040005000600070008000900010000Hit(0) vs Miss(1)00.511.52Frequency component0500100015002000250030003500400045005000Magnitude00.0050.010.01514
Fig. 7. Combination of frequency components of all active sets
3.4 Targeted co-location by ping detection on the cloud
Another use case of the described methodology is the detection of whether or not
a speciﬁc application is being executed. For this purpose we propose to detect
ping requests sent to a target VM. We then try to detect the execution of the ping
response process to verify and detect co-location with that target VM. In order
to detect the co-location on the cloud, diﬀerent types of covert channels such
as LLC [17] and memory bus locking [33] have been used. These methods can
be eﬀective to verify the co-location between spy and target VMs. Our method
also uses LLC, but, due to the omnipresence of ping support, this method is
very widely applicable. The scenario is as follows: the spy VM monitors LLC
sets by Prime&Probe to check the co-location with the target VM in the same
cloud region. Another collaborating process of the spy sends ping requests to the
target VMs with a certain frequency. These ping requests trigger executions of
the ping service, which is then observable by the spy VM.
The used approach is similar to the previous cases: The monitored sets are
determined by s mod 64 = 0. The reason behind this is the ping receptions are
seen random sets. Therefore, we ﬁnd that it is suﬃcient to monitor these sets to
detect the ping. The steps to detect ping on the cloud are as follows:
1. Spy VM1 ﬁnds the noisy sets and excludes them from SL3 sets in VM1
2. Ping requests are sent by spy VM2 with a certain frequency
3. Spy VM1 begins to implement Prime&Probe on remaining sets
4. Spy VM1 determines the active sets in LLC
5. Fourier Transform is applied to the active sets
6. The frequency components are compared with the ping frequency
In our method, ﬁrst the active IPs and the open ports should be found. In
Amazon EC2 every region has diﬀerent IP ranges. We focus on South America
Frrequency component(Hz)×105012345678Magnitude00.020.040.060.080.10.1215
Fig. 8. The scenario for ping detection on Amazon EC2
region and the IP range is documented [1]. Open ports can be found using the
nmap tool.
There are two types of ping namely hping and ping commands. The hping
command is more useful since speciﬁc ports can be pinged such as port 22 which
is used for SSH connection. Furthermore, the frequency of ping requests for hping