原文 by 瞌睡龙
## 一、验证过滤用户的输入
即使是最普通的字母数字输入也可能是危险的，列举几个容易引起安全问题的字符：  
! $ ^ & * ( ) ~ [ ] \ | { } ' " ;  ? - `  
在数据库中可能有特殊意义的字符：  
' " ; \  
还有一些非打印字符：  
字符\x00或者说ASCII 0，NULL或FALSE  
字符\x10和\x13，或者说ASCII 10和13，\n \r  
字符\x1a或者说ASCII 26，表示文件的结束  
输入错误的参数类型，也可能导致程序出现意想不到的错误。  
输入过多的参数值，可能导致溢出等错误。  
## 二、PHP中验证用户的输入
这里特别要注意php.ini中的register_globals的设定，在早期的php版本中是默认开启的，这会导致很严重的安全问题：  
``` php
isAdmin()) {
$admin = TRUE;
}
// ...
if ($admin) {
// do administrative tasks
}
?>
```
上面这段代码看起来是安全的，但是如果register_globals开启了的话，在访问的url中加入`?admin=1`即可绕过前半部分的逻辑判断。  
更安全的代码应该给$admin赋默认FALSE值：  
``` php
isAdmin()) {
    $admin = TRUE;
}
// ...
if ($admin) {
    // do administrative tasks
}
?>
```
早期人们开发调试的时候发现使用register_globals有极大的便利，所以早期的php版本中默认开启。但是随着越来越多的安全问题，从php 4.2.0开始，register_globals变为了默认关闭。当你发现register_globals是on的时候，你可能会在脚本当中加入如下代码使其关闭：  
`ini_set('register_globals', 0);`  
但实际上，当所有的全局变量已经创建了之后，以上代码并不会起到作用。但是你可以在文档的根目录下的.htaccess的文件中加上下面这一行：  `php_flag register_globals 0`  
变量声明：强烈建议总是事先声明变量。  
检查输入的类型，长度和格式：  
字符串检查：在PHP中，字符串几乎可以是任何事情，但有些值并不是严格的字符串类型，可以用is_string()函数来确定。  
有些时候你不介意数字作为字符串，可以用empty()函数。  
数字类型检查：使用is_int()函数或者is_integer()或is_long()，例如：  
``` php
$year = $_POST['year'];
if (!is_int($year))
exit("$year is an invalid value for year!");
```
也可以使用gettype()函数判断类型后做处理：  
``` php
if (gettype($year) != 'integer') {
exit("$year is an invalid value for year!");
}
```
至少还有三种方式可以吧$year变量转变为整数：  
``` php
$year = intval($_POST['year']);
$year = ( int ) $_POST['year'];
if (!settype($year, 'integer')) {exit("$year is an invalid value for year!");}
```
如果允许浮点型与零的值，可以使用is_numeric()函数来做判断。 判断一个值是否为布尔型的时候使用is_bool()函数。  
下表是对各种类型变量使用各函数判断的结果：  
![phpsec1](../pictures/phpsec1.jpg)  
检查字符串的长度使用strlen()变量：  
``` php
if (strlen($year) != 4)
    exit("$year is an invalid value for year!");
```
概括总结一下PHP中类型，长度，格式等验证：  
``` php
 'string',
    'year' => 'int',
    'imageLocation' => 'filename'
);
// check each input value for type and length
foreach ($expected AS $key => $type) {
    if (empty($_GET[$key])) {
        ${$key} = NULL;
        continue;
    }
    switch ($type) {
        case 'string':
            if (is_string($_GET[$key]) && strlen($_GET[$key]) 
```
使用mysql_real_escape_string()函数也不是万能的，转义一些并非是要写入mysql的数据库的数据可能不会产生作用或者出现错误。
可以根据自己的实际需要，自己使用str_replace()函数写一个针对特殊字符的转义。  
## 三、对于文件的路径与名称的过滤
文件名中不能包含二进制数据，否则可能引起问题。  
一些系统允许Unicode多字节编码的文件名，但是尽量避免，应当使用ASCII的字符。  
虽然Unix系统几乎可以在文件名设定中使用任何符号，但是应当尽量使用 `- ` 和 ` _` ， 避免使用其他字符，同时需要限定文件名的长度。
php中的文件操作通常使用fopen()函数与file_get_contents()函数。  
``` php
```
上面代码的问题在于用户POST输入的scriptname没有做任何过滤，如果用户输入../../../../etc/passwd，则有可能读取到系统的passwd文件。  
``` php
<?php
$uri = $_POST['uri'];
if (strpos($uri, '..'))
    exit('That is not a valid URI.');
$importedData = file_get_contents($uri);
```
如果发现 .. 字符串就不执行会不会出现问题呢？如果前面并没有路径限制的话，仍然会出现问题：  
使用file协议，当用户输入`file:///etc/passwd`的时候，会把passwd的内容带入$importedData变量中。  
## 四、防止SQL注入
### SQL注入是如何产生的：
1、接收一个由用户提交的变量，假设变量为$variety：  
`$variety = $_POST['variety'];`  
2、接收的变量带入构造一个数据库查询语句：  
`$query = "SELECT * FROM wines WHERE variety='$variety'";`  
3、把构造好的语句提交给MySQL服务器查询，MySQL返回查询结果。  
当由用户输入`lagrein' or 1=1#`时，产生的结果将会完全不同。  
### 防止SQL注入的几种方式：
检查用户输入的类型，当用户输入的为数字时可以使用如下方式：  
使用is_int()函数（或is_integer()或is_long()函数）  
使用gettype()函数  
使用intval()函数  
使用settype()函数  