最后flag:flag{have_you_tried_ghidra9.2_decompiler_if_you_have_hexriscv_plz_share_it_with_me_thx:P}
###  wherekey
  * 64位elf，静态链接。首先导入一个签名文件识别一下库函数
  * 之后查看一下字符串，发现还行，提示用户输入的字符串能直接找到，所以交叉引用找到程序的主要逻辑  
  * 然后在这里尝试下断点动调，发现会崩掉，以为是有反调，花了很长时间找反调的点，没找到
  * 尝试找到导致崩溃的那个函数，发现在输出 please 之前调用该两个函数  
这里面会生成一个127.0.0.1的字符串，应该是开了一个socket  
  * 这块会把/dev/tty作为一个输入  
  * 这是输出 why？？的那个函数，发现用到了刚才的socket和tty  
  * 所以这个程序是通过tty读入用户的输入，然后发送给socket进行读取。因此在调试的时候会在初始化的时候崩掉，应该是调试的时候影响到了某些状态
  * 然后想到应该会用到某些 recv 之类的api，搜了一下，果然有  
  * 找到了加密函数  
  * 主要逻辑比较简单，每次会接收到5个字符，根据那个假的flag生成一个加密矩阵，然后根据矩阵乘法加密出5个密文，最后跟0x4c5150处的密文进行比较
  * dump处密文 
          def get_cipher():
      start = 0x4C5150
      end = 0x4c5168
      cipher = []
      for i in range(start, end+1):
          cipher.append(idc.Byte(i))
      return cipher
  * 之后就是使用sage对模257的矩阵运算进行求解， 
          M=Matrix(GF（257），[[102, 97, 111, 114, 105], [108, 114, 117, 101, 101], [97, 101, 95, 95, 110], [103, 95, 115, 102, 100], [123, 121, 117, 114, 125]])
      cipher=Matrix(GF(257),[56, 109, 75, 75, 185, 138, 249, 138, 187, 92, 138, 154,        186, 107, 210, 198, 187, 5, 144, 86, 147, 230, 18, 189, 79]).transpose()
      res=M.solve_right(cipher)
  * 得到了flag：Ha23_f0n_9nd_G0od-1uck-OH
###  ChineseGame
  * 仍然是静态链接，找了个c++的sig丢了进去，大部分函数都出来了
  * 搜到了cat flag字符串，找到了main函数  
  * 这题容易在能动调，所以很快就能梳理出main函数的主要逻辑
  * 然后发现有一个地址老是被传来传去的，考虑是个结构体，于是到第一个引用处看看是怎么初始化的  
  * 发现应该是一个链表，所以定义一个结构体，让代码变得清晰一点  
  * 然后代码结构就非常清晰了，发现只接收两种输入，0和1，分别看一下  
  * 结构非常的相似，考虑是两个相近的操作。然后查看check函数的条件  
  * 所以程序的逻辑如下：有十个格子，初始化的时候第二个置为True(100)，然后从输入接收0和1的序列，当碰到0的时候满足某种条件时会把False变为True，碰到1时相反
  * 发生变化的条件为： 
    * 当前选中的是最后一个格子
    * 当前格子的下一个格子是False
    * 下一个格子之后的格子都是True
  * 当把所有的格子都变为True（ 0){
                q = u3/v3;
                u1= v1;
                v1 = u1 - v1*q;
                u3 = v3;
                v3 = u3 - v3*q;
            }
            while (u1 0){
                base = base % mod;
                for (; pow != 0; pow >>= 1) {
                    if (pow & 1 == 1) {
                        res = (base * res) % mod;
                    }
                    base = (base * base) % mod;
                }
            }
            return res;
        }
        function pow_mod(int base, int pow, int mod) internal pure returns (int res) {
            if (pow >= 0) {
                return expMod(base,pow,mod);
            }
            else {
                int inv = invMod(base,mod);
                return expMod(inv,abs(pow),mod);
            }
        }
        function isPrime(int n) internal pure returns (bool) {
            if (n == 2 ||n == 3 || n == 5) {
                return true;
            } else if (n % 2 ==0 && n > 1 ){
                return false;
            } else {
                int d = n - 1;
                int s = 0;
                while (d & 1 != 1 && d != 0) {
                    d >>= 1;
                    ++s;
                }
                int a=2;
                int xPre;
                int j;
                int x = pow_mod(a, d, n);
                if (x == 1 || x == (n - 1)) {
                    return true;
                } else {
                    for (j = 0; j = 0) {
                return num;
            } else {
                return (0 - num);
            }
        }
    }
    contract StArNDBOX{
        using Math for int;
        constructor()public payable{
        }
        modifier StAr() {
            require(msg.sender != tx.origin);
            _;
        }
        function StArNDBoX(address _addr) public payable{
            uint256 size;
            bytes memory code;
            int res;
            assembly{
                size := extcodesize(_addr)
                code := mload(0x40)
                mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
                mstore(code, size)
                extcodecopy(_addr, add(code, 0x20), 0, size)
            }
            for(uint256 i = 0; i < code.length; i++) {
                res = int(uint8(code[i]));
                require(res.isPrime() == true);
            }
            bool success;
            bytes memory _;
            (success, _) = _addr.delegatecall("");
            require(success);
        }
    }
    contract exp{
        constructor()public{}
        address ss=0xb3879a53b3964494a149BcC1863dD262C35a64aE;
        address target=0x8748ec747eB7af0B7c4e82357AAA9de00d32264a;
        StArNDBOX a=StArNDBOX(target);
        function step()external{
            a.StArNDBoX(ss);
        }
    }
一发入魂。