好），而欧洲则采用单位距离消耗的燃料测量方案（值越低越好）。使用
#define 创建符号常量或使用 const 限定符创建变量来表示两个转换系数。
237
[1].其实，符号常量的概念在K&R合著的《C语言程序设计》中介绍过。但
是，在历年的C标准中（包括最新的C11），并没有符号常量的概念，只提
到过#define最简单的用法是定义一个“明示常量”。市面上各编程书籍对此概
念的理解不同，有些作者把#define宏定义实现的“常量”归为“明示常量”；有
些作者（如，本书的作者）则认为“明示常量”相当于“符号常量”。——译者
注
[2].注意，在C语言中，用const类型限定符声明的是变量，不是常量。——
译者注
[3].再次提醒读者注意，本书作者认为“明示常量”相当于“符号常量”，经常
在书中混用这两个术语。——译者注
[4].注意，“ -13.45e12# 0”的负号前面有一个空格。——译者注
238
第5章 运算符、表达式和语句
本章介绍以下内容：
关键字：while、typedef
运算符：=、-、*、/、%、++、--、(类型名)
C语言的各种运算符，包括用于普通数学运算的运算符
运算符优先级以及语句、表达式的含义
while循环
复合语句、自动类型转换和强制类型转换
如何编写带有参数的函数
现在，读者已经熟悉了如何表示数据，接下来我们学习如何处理数据。
C 语言为处理数据提供了大量的操作，可以在程序中进行算术运算、比较值
的大小、修改变量、逻辑地组合关系等。我们先从基本的算术运算（加、
减、乘、除）开始。
组织程序是处理数据的另一个方面，让程序按正确的顺序执行各个步
骤。C 有许多语言特性，帮助你完成组织程序的任务。循环就是其中一个特
性，本章中你将窥其大概。循环能重复执行行为，让程序更有趣、更强大。
239
5.1 循环简介
程序清单5.1是一个简单的程序示例，该程序进行了简单的运算，计算
穿9码男鞋的脚长（单位：英寸）。为了让读者体会循环的好处，程序的第1
个版本演示了不使用循环编程的局限性。
程序清单5.1 shoes1.c程序
/* shoes1.c -- 把鞋码转换成英寸 */
#include 
#define ADJUST 7.31          // 字符常量
int main(void)
{
const double SCALE = 0.333;// const变量
double shoe, foot;
shoe = 9.0;
foot = SCALE * shoe + ADJUST;
printf("Shoe size (men's)   foot length\n");
printf("%10.1f %15.2f inches\n", shoe, foot);
return 0;
}
该程序的输出如下：
240
Shoe size (men's) foot length
9.0       10.31 inches
该程序演示了用#define 指令创建符号常量和用 const 限定符创建在程序
运行过程中不可更改的变量。程序使用了乘法和加法，假定用户穿9码的
鞋，以英寸为单位打印用户的脚长。你可能会说：“这太简单了，我用笔算
比敲程序还要快。”说得没错。写出来的程序只使用一次（本例即只根据一
只鞋的尺码计算一次脚长），实在是浪费时间和精力。如果写成交互式程序
会更有用，但是仍无法利用计算机的优势。
应该让计算机做一些重复计算的工作。毕竟，需要重复计算是使用计算
机的主要原因。C 提供多种方法做重复计算，我们在这里简单介绍一种——
while循环。它能让你对运算符做更有趣地探索。程序清单5.2演示了用循环
改进后的程序。
程序清单5.2 shoes2.c程序
/* shoes2.c -- 计算多个不同鞋码对应的脚长 */
#include 
#define ADJUST 7.31          // 字符常量
int main(void)
{
const double SCALE = 0.333;// const变量
double shoe, foot;
printf("Shoe size (men's)   foot length\n");
shoe = 3.0;
241
while (shoe 
int main(void)
{
int jane, tarzan, cheeta;
cheeta = tarzan = jane = 68;
printf("            cheeta  tarzan   jane\n");
printf("First round score %4d %8d %8d\n", cheeta, tarzan, 
jane);
248
return 0;
}
许多其他语言都会回避该程序中的三重赋值，但是C完全没问题。赋值
的顺序是从右往左：首先把86赋给jane，然后再赋给tarzan，最后赋给
cheeta。因此，程序的输出如下：
cheetah  tarzan    jane
First round score  68      68      68
5.2.2 加法运算符：+
加法运算符（addition operator）用于加法运算，使其两侧的值相加。例
如，语句：
printf("%d", 4 + 20);
打印的是24，而不是表达式
4 + 20
相加的值（运算对象）可以是变量，也可以是常量。因此，执行下面的
语句：
income = salary + bribes;
计算机会查看加法运算符右侧的两个变量，把它们相加，然后把和赋给
变量income。
在此提醒读者注意，income、salary和bribes都是可修改的左值。因为每
个变量都标识了一个可被赋值的数据对象。但是，表达式salary + brives是一
个右值。
5.2.3 减法运算符：-
249
减法运算符（subtraction operator）用于减法运算，使其左侧的数减去右
侧的数。例如，下面的语句把200.0赋给takehome：
takehome = 224.00 – 24.00;
+和-运算符都被称为二元运算符（binary operator），即这些运算符需要
两个运算对象才能完成操作。
5.2.4 符号运算符：-和+
减号还可用于标明或改变一个值的代数符号。例如，执行下面的语句
后，smokey的值为12：
rocky = –12;
smokey 
= 
–rocky;以这种方式使用的负号被称为一元运算符（unary
operator）。一元运算符只需要一个运算对象（见图5.2）。
C90标准新增了一元+运算符，它不会改变运算对象的值或符号，只能