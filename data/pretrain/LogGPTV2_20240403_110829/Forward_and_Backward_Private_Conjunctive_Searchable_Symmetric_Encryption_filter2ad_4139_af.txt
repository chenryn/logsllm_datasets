### 优化后的文本

**图10：双合取搜索查询 q = (w1 ∧ w2)**

- **(a) 客户端计算时间 vs. |Upd(w1)|**
- **(b) 客户端计算时间 vs. |Upd(w2)|**
- **(c) 服务器计算时间 vs. |Upd(w1)|**
- **(d) 服务器计算时间 vs. |Upd(w2)|**

在这些图中，展示了不同更新频率下的计算时间。具体来说：

- **(a) |Upd(w2)| = 10^7**
- **(b) |Upd(w1)| = 10**
- **(c) |Upd(w2)| = 10^7**
- **(d) |Upd(w1)| = 10**

**结论：**
MITRACONJ 在所有合取项具有相近更新频率的情况下，可以与 ODXT 匹配或优于 ODXT，即 s-term 的更新频率非常高或所有 x-terms 的更新频率非常低。然而，这种查询在实际应用中相对较少见。对于大多数常见的查询，ODXT 提供了显著更快的搜索速度。

---

**图11：多合取搜索查询 q = (w1 ∧ ... ∧ w6)，其中 |Upd(wℓ)| = 10^7 对于 ℓ ∈ [3, 6]**

- **(a) 客户端计算时间 vs. |Upd(w1)|**
- **(b) 客户端计算时间 vs. |Upd(w2)|**
- **(c) 服务器计算时间 vs. |Upd(w1)|**
- **(d) 服务器计算时间 vs. |Upd(w2)|**

在这些图中，展示了不同更新频率下的计算时间。具体来说：

- **(a) |Upd(w2)| = 10^7**
- **(b) |Upd(w1)| = 10**
- **(c) |Upd(w2)| = 10^7**
- **(d) |Upd(w1)| = 10**

**结论：**
这些图表展示了在不同更新频率下，客户端和服务器的计算时间变化情况。

---

**图12：总计算成本**

- **(a) 总计算成本 vs. |Upd(w1)|**
- **(b) 总计算成本 vs. |Upd(w2)|**

在这些图中，展示了不同更新频率下的总计算成本。具体来说：

- **(a) |Upd(w1)| 变化时的总计算成本**
- **(b) |Upd(w2)| 变化时的总计算成本**

**结论：**
这些图表展示了在不同更新频率下，总计算成本的变化情况。

通过这些图表，可以更清晰地了解不同算法在不同条件下的性能表现。