为了了防⽌止我们需要格式化包含⽆无效参数的字符串串来查看是什什么导致了了错误， fmt 包中的 errorf 函数允许我们这样做。
{...}
if f  0 {
        fmt.Println("Panicking in part2()!")
        panic(fmt.Sprintf("%v", i))
    }
    defer fmt.Println("Defer in part2()")
    fmt.Println("Executing part2()")
    part2(i + 1)
}
错误处理理
bloodzer0&Lingfighting
输出：
Called start()
Executing part2()
Panicking in part2()!
Defer in part2()
Recovered in start()
Returned normally from start().
通过检查输出，我们可以看到Go如何处理理紧急情况并从中恢复，从⽽而允许应⽤用程序恢复其正常状态。这些函数允许从原本不不可恢复的故障中进⾏行行优
雅的恢复。
值得注意的是，延迟使⽤用还包括互斥锁解锁，或者在执⾏行行了了周围的函数（例例如⻚页脚）之后加载内容。
在⽇日志包中还有⼀一个log.fatal。致命级别是有效地记录消息，然后调⽤用os.exit（1）。这意味着：
将不不执⾏行行defer语句句。
缓冲区将不不会被刷新。
不不会删除临时⽂文件和⽬目录。
考虑到前⾯面提到的所有点，我们可以看到log.fatal与恐慌的区别，以及应该谨慎使⽤用它的原因。可能使⽤用log.fatal的⼀一些示例例包括：
设置⽇日志记录并检查我们是否有健全的环境和参数。如果我们不不这样做，那么就不不需要执⾏行行main（）。
⼀一个永远不不会发⽣生的错误，我们知道它是不不可恢复的。
如果⼀一个⾮非交互进程遇到错误⽽而⽆无法完成，则⽆无法将此错误通知⽤用户。最好先停⽌止执⾏行行，然后再从失败中出现其他问题。
初始化失败的例例⼦子说明：
func init(i int) {
    ...
    //This is just to deliberately crash the function.
    if i < 2 {
        fmt.Printf("Var %d - initialized\n", i)
    } else {
        //This was never supposed to happen, so we'll terminate our program.
        log.Fatal("Init failure - Terminating.")
    }
}
func main() {
    i := 1
    for i < 3 {
        init(i)
        i++
    }
    fmt.Println("Initialized all variables successfully")
重要的是要确保在与安全控制相关联的错误情况下，默认情况下拒绝访问。
⽇日志记录应始终由应⽤用程序处理理，不不应依赖服务器器配置。
所有⽇日志记录都应该由受信任系统上的主例例程实现，开发⼈人员还应该确保⽇日志中不不包含敏敏感数据（例例如密码、会话信息、系统详细信息等），也不不存
在任何调试或堆栈跟踪信息。此外，⽇日志记录应该包括成功和失败的安全事件，重点是重要的⽇日志事件数据。
重要事件数据通常指：
所有输⼊入验证失败。
所有身份验证尝试，尤其是失败。
所有访问控制失败。
所有明显的篡改事件，包括对状态数据的意外更更改。
⽇日志
bloodzer0&Lingfighting
使⽤用⽆无效或过期的会话令牌进⾏行行连接的所有尝试。
所有系统异常。
所有管理理功能，包括对安全配置设置的更更改。
所有后端TLS连接故障和加密模块故障。
⼀一个简单的⽇日志示例例说明了了这⼀一点：
func main() {
    var buf bytes.Buffer
    var RoleLevel int
    logger := log.New(&buf, "logger: ", log.Lshortfile)
    fmt.Println("Please enter your user level.")
    fmt.Scanf("%d", &RoleLevel) //<--- example
    switch RoleLevel {
    case 1:
        // Log successful login
        logger.Printf("Login successfull.")
        fmt.Print(&buf)
    case 2:
        // Log unsuccessful Login
        logger.Printf("Login unsuccessful - Insufficient access level.")
        fmt.Print(&buf)
     default:
        // Unspecified error
        logger.Print("Login error.")
        fmt.Print(&buf)
    }
}
实现通⽤用错误消息或⾃自定义错误⻚页也是⼀一个好的实践，以确保在发⽣生错误时不不会泄漏漏任何信息。
根据⽂文档，Go log package “实现简单的⽇日志记录”，缺少⼀一些常⻅见和重要的功能，例例如级别化的⽇日志记录（例例如，调试、信息、警告、错误、致命、
死机）和格式化程序⽀支持（例例如，logstash）：这是使⽇日志可⽤用的两个重要功能（例例如，⽤用于与安全信息和事件集成）管理理体系）。
⼤大多数（如果不不是全部）第三⽅方⽇日志记录包都提供这些功能和其他功能。以下是⼀一些后流⾏行行的第三⽅方⽇日志记录包：
Logrus - https://github.com/Sirupsen/logrus
glog - https://github.com/golang/glog
loggo - https://github.com/juju/loggo
关于Go's log package的⼀一个重要注意事项是：致命的和紧急的函数都⽐比⽇日志功能做得更更多。panic函数在写⼊入⽇日志消息后调⽤用panic库通常不不接受的
内容，⽽而致命的函数调⽤用os。在写⼊入⽇日志消息后退出（1）可能终⽌止程序以阻⽌止延迟语句句运⾏行行、要刷新的缓冲区和/或要删除的临时数据。
从⽇日志访问的⻆角度来看，只有授权的个⼈人才可以访问⽇日志。开发⼈人员还应确保设置了了允许⽇日志分析的机制，并确保不不受信任的数据不不会作为代码在预
期的⽇日志查看软件或界⾯面中执⾏行行。
关于分配的内存清理理，Go有⼀一个内置的垃圾收集器器。
作为确保⽇日志有效性和完整性的最后⼀一步，应使⽤用加密哈希函数作为附加步骤，以确保不不会发⽣生⽇日志篡改。
bloodzer0&Lingfighting
{...}
// Get our known Log checksum from checksum file.
logChecksum, err := ioutil.ReadFile("log/checksum")
str := string(logChecksum) // convert content to a 'string'
// Compute our current log's MD5
b, err := ComputeMd5("log/log")
if err != nil {
  fmt.Printf("Err: %v", err)
} else {
  md5Result := hex.EncodeToString(b)
  // Compare our calculated hash with our stored hash
  if str == md5Result {
    // Ok the checksums match.
    fmt.Println("Log integrity OK.")
  } else {
    // The file integrity has been compromised...
    fmt.Println("File Tampering detected.")
  }
}
{...}
注意： computemd5()  函数计算⽂文件的md5。同样重要的是，必须将⽇日志⽂文件哈希存储在安全的地⽅方，并与当前⽇日志哈希进⾏行行⽐比较，以在对⽇日志
进⾏行行任何更更新之前验证完整性。⽂文档中包含完整的源代码。
现如今，安全中最重要的事情之⼀一就是数据保护。你不不会想要： 
简⽽而⾔言之，Web应⽤用程序中的数据需要受到保护，因此在本节中，我们将研究保护数据的不不同⽅方法。 你应该注意的第⼀一件事是为每个⽤用户创建和实
现正确的权限，并将⽤用户仅限于他们真正需要的功能。 例例如，考虑⼀一个具有以下⽤用户⻆角⾊色的简单在线商店：
销售⽤用户：只允许查看⽬目录
营销⽤用户：允许查看统计数据
开发⼈人员：允许修改⻚页⾯面和web应⽤用程序选项
此外，在系统配置(⼜又称为web服务器器)中，应该定义正确的权限。 主要是为每个⽤用户定义正确的⻆角⾊色 —— web⽤用户或系统⽤用户。 访问控制部分，将
进⼀一步讨论⻆角⾊色分离和访问控制。
数据保护
bloodzer0&Lingfighting
包含敏敏感信息的临时⽂文件和缓存⽂文件应该在不不需要时⽴立即删除。如果你仍然需要它们中的某些内容，将它们移到受保护的区域或对它们加密。
有时候开发⼈人员会在源代码中留留下类似于To-do列列表的注释，还有时候，在最坏的情况下，开发⼈人员可能会留留下凭证。
// Secret API endpoint - /api/mytoken?callback=myToken
fmt.Println("Just a random code")
在上⾯面的例例⼦子中，开发⼈人员在注释中有⼀一个 endpoint ，如果没有得到很好的保护，则可能被恶意⽤用户使⽤用。
使⽤用HTTP GET⽅方法传递敏敏感信息会使web应⽤用程序容易易受到攻击，因为： 1. 如果不不使⽤用HTTPS，通过MITM攻击，数据可能被拦截。 2. 浏览器器历
史记录存储⽤用户的信息。如果URL中，带有未过期的 session IDs 、 pins 或 tokens (或低熵值)，则它们可能被窃取。
req, _ := http.NewRequest("GET", "http://mycompany.com/api/mytoken?api_key=000s3cr3t000", nil)
如果web应⽤用程序使⽤用你的api_key从第三⽅方⽹网站获取信息，那么如果有⼈人在监听你的⽹网络，那么这些信息可能会被窃取。这是因为不不使⽤用HTTPS和
使⽤用GET⽅方法传递参数。
此外，如果你的web应⽤用程序有指向示例例站点的链接： http://mycompany.com/api/mytoken?api_key=000s3cr3t000  它将存储在你的
浏览器器历史记录中，因此，它也可能被窃取。
解决⽅方案是，应该始终使⽤用HTTPS。此外，尝试使⽤用POST⽅方法传递参数，如果可能的话，只使⽤用⼀一次性的session id或token。