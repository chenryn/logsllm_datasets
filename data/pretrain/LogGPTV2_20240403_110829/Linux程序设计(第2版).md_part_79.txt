把这一类别的功能统称为“SystemVIPC”。
13.1信号直
如果我们编写的程序里使用了线程，那么不管它是运行在多用户系统上、多进程系统.，
还是运行在多用户多进程系统上，只要我们需要保证只有一个执行进程能够拥有某项资源排他
性的访问权时，就会发现自已面对着关键代码。
在第7章里，我们编写了这本书的第一个示例软件，它通过dbm函数库对一个数据库进行访
问。如果有多个程序精确地在同一时间去尝试更新这个数据库，数据就会遵到破坏。不同的用
户使用不同的程序向数据库输人数据，这本身并没有什么过错，问题就出在对数据库进行更新
的那部分代码身上。这部分代码就是我们所说的关键代码。
为了防止出现因多个程序访问一个资源而引发的问题，我们需要有一种办法可以让我们生
成并使用一个记号，使任一时刻关键代码里的执行线程只能有一个能够拥有该项资源的访问权。
我们在第11章里简单地介绍了一些线程专用的办法，我们可以使用一把互斥量或者信号量来控
制一个线程化程序对关键代码部分的访问权。在这一章里，我们又回到信号量的话题上，但将
会对它们在进程之间的用法做更具普遍意义的讨论。注意：用在线程方面的信号量函数和我们
将在这一章里介绍的根本就不是一回事，千万不要把这两种东西弄混了。
如果没有专家级硬件设备的支持，要想编写出能够达成这一目标的代码，用“难于上青天”
来形容绝不算过分。虽然有一种名为“Dekker'sAlgorithm”（国内教材一般称之为德克算法）的
纯软件算法，但这个算法必须依赖于“繁忙等待”或“轮转锁”。也就是说，进程必须无休止地
运行着来等待某个内存数据的改变。在一个像UNIX这样的多任务系统上，人们并不愿意看到这
种对CPU资源的浪费。
我们在以前的学习中曾经见过一个候选解决方案：创建文件时要使用open函数并且要加上
0_EXCL标志，这个方案提供了原子化的文件创建操作，它可以使一个进程成功地获得一个标
记物一那个新创建的文件。这个方案对简单问题来说还是不错的，但在复杂问题面前，它就比
较麻烦和低效了。
Dijkstra提出的“信号量”概念是共发程序设计领域的一项重大进步。信号量是-种特殊的
加入java编程群：524621833
---
## Page 414
396Linuxt程序设计
变量，它只能取正整数值，对这些正整数只能进行两种操作：等待（wait）和信号（signal）。
的记号来表示信号量的这两种操作，它们是：（国内的教科书一般称之为“PV操作”）
·P(semaphore variable）代表等待
·V（semaphorevariable）代表信号
这两个字母来自荷兰语单词passeren（等待、传递；在进人关键代码之前进行检查）和
vrijgeven（信号、给与：放弃关键代码的控制权）。在提到信号量的时候你还经常会看到“开”
或“关”等术语，它们沿用自开、关信号标志的说法：
13.1.1信号量的定义
这也是它最常见的形式。可以取多种正整数值的信号量叫做“通用信号量”。在本章后面的内容
里、我们将集中讨论二进制信号量。
PV操作的定义非常简明。假设我们有一个信号量变量sv，则这两个操作的定义如表13-1所示：
表13-1
P[sv)
如果sv的值大于零，就给它减去1：如果sv的值等于零，就挂起该进程的执行
V(av)
如果有其他进程因等待sv变量面披挂起，就让它恢复执行：如果没有造程因等待sv变量面被挂起，款
给它加上！
我们还可以这样来看待信号量：当关键代码允许进程进人时，信号量变量sv的值是true；
P（sv）操作对它做减法使它变为false，然后进程进人关键代码：进程离开关键代码时要用V（sv）操
作对它做加法，使关键代码重新回到允许进程进人的状态。读者也许会认为对一个普通的变量
进行类似的加减法也能够达到同样的效果，但这在C或者C++语言里不足以满足只用一个原子操
作就能实现检查该变量是否为true或修改该变量使之为false的需要。而正是这一点才使得信号量
的操作是如此特殊的。
13.1.2一个理论性的例子
我们用--个简单的理论例子来说明它的工作情况。假设我们有两个进程，它们分别是proc1
和proc2；这两个进程都需要在其执行过程中的某一时刻拥有对一个数据的独占性访问权。我们
定义了一个二进制信号量svV，该变量的初始值是1，而这两个进程都能对它进行操作。要想对代
码中的关键部分进行访问，这两个进程都需要采取同样的步骤。事实上，这两个进程可以是同
一个程序的两个执行实例。
两个进程共享着sv信号量变量。如果其中之一执行了P（sv）操作，就等于它得到了信号量，
也就能够进人关键代码部分了。第二个进程将无法进人关键代码，因为当它尝试执行P（sv）操作
的时候，它会被挂起等待第一个进程离开关键代码并执行V（sv）操作释放这个信号量。
相应的伪代码如下所示：
加入iaVva编程群：524621833
---
## Page 415
第13章信号量、消惠队列和共事内存
397
emuphore sv = 1)
loopfozever(
P(sv);
critlcalcods sectlon)
f(An)A
non-critlcal code section;
代码相当的简单，因为PV操作的定义非常明确，功能也非常有针对性。图13-1给出了用PV
操作来把守进程进出关键代码部分时的情况。
A过程的执行线性
B进程的执行成程
一时刻只允许
一个近程进人关
键代码分
图13-1
13.1.3UNIX中的信号量功能
了解了信号量的含义和它们的工作原理之后，我们来看看在UNIX里是如何实现这些功能的。
经过精心设计的接口提供了比一般使用要求更多的功能。UNIX中的每一个信号量函数都能对成
组的通用信号量进行操作，最简单的二进制信号量对它来说自然更不在话下。这乍看起来好像
会把事情弄得更复杂，但在复杂的问题里，比如一个进程需要锁定多个资源的时候，这种能够
对一组信号量进行处理的能力就是求之不得的了。我们这一章的学习主要集中在一个信号量的
方面，因为在绝大多数的情况下，有它也就足够大家用的了。
下面是信号量函数的定义情况：
#include 
int semetl(int sem_id, Int sem_nun, int command,...)1
Int semop(int sem_id, stract embut*gam_ops,sixe_t mum_sm_ops）)
在实际工作中，还经常需要用到头文件sys/types.h和syslipc.h，某些特殊操作需要
使用这两个头文件里的有关定义。完全不需要这两个头文件的情况还是比较少的。
加入jaVa编程群：524621833
---
## Page 416
398Linux程序设计
在我们逐个介绍这些函数的时候，一定要记住这些函数都是能够对成组的信号量值进行操
作的。与二进制信号量的情况相比，对多值信号量的操作要复杂得多的多。
键字参数key的作用很像是一个文件名，它代表着程序们使用的某个资源：如果程序们使用
的信号量有着相同的key，就需要协调各自的执行情况了。同样地，由semget返回并用在其他共
享内存函数中的那个标识码也与open返回的“FILE*”文件流极其相似，进程们需要通过它的
值来访问共享的文件。此外，类似于文件的使用情况，哪怕使用的是同一个信号量，不同的进
程也会有不同的信号量标识码。对我们将在这一章里讨论的每一个IPC功能来说，虽然它们使用
的是独立的键字和标识码，但一个键字再加上一个标识码的这种用法是很常见的。
1.semget函数
int semget(key_t key, int sum_sems, int sen_flags )1
第一个参数key是一个整数值，不相关的进程将通过这个值去访问同一个信号量。程序对任
何信号量的访问都必须间接地进行，先由程序提供一个键字，再由系统生成一个相应的信号量
标识码。只有semget函数才直接使用信号量的键字，其他信号量函数都必须使用由semget返回的
信号量标识码。
信号量有一个特殊的IPC_PRIVATE键值，它的作用是创建一个只有创建者进程才能使用的
信号量。创建者进程必须把这个标识码直接送往需要它的进程一通常是该进程创建的个子进
程。这个键值一般很少使用，而程序员也必须注意不要误用了被系统定义为IPC_PRIVATE的键
值。在Linux系统上，IPC_PRIVATE键值通常是0。
num_sems参数是需要使用的信号量个数，它几乎总是取值为1。
sem_flags参数是一组标志，其作用与open函数的各种标志很相似。它低端的九个位是该信
号量的权限，其作用相当于文件的访问权限。但它们可以与键值IPC_CREAT做按位的OR（或）
操作以创建一个新的信号量。即使在设置了IPC_CREAT标志后给出的是一个现有的信号量的键
字，也并不是一个错误。如果IPC_CREAT标志在函数里用不着，函数就会忽略它的作用。我们
可以通过IPC_CREAT和IPC_EXCL标志的联合使用确保自已将创建出一个新的独一无二的信号
量来：如果该信号量已经存在，就会返回一个错误。
semget函数在成功时将返回一个正数（非零）值，它就是其他信号量函数要用到的那个的标
识码。如果失败，它将返回“1”。
2.semop函数
semop函数的作用是改变信号量的键值，下面是它的定义情况：
int semop(int sem_id, struct sembuf *sem_opa, size_t num_sem_ops )1
第--个参数sem_id是该信号量的标识码，也就是semget函数的返回值。第二个参数sem_ops
是个指向一个结构数组的指针，结构数组中的元素至少应该包含以下几个成员：
struct sembuf (
sbort sem_num
hort
em_oD1
ehort sem_flg
加入jaVa编程群：524621833
---
## Page 417
第13章信号量、消息队列和共享内存
399
第一个成员sem_num是信号量的编号.如果你的工作不需要使用一组信号量，这个值一般
就取为0。sem_op成员是信号量一次PV操作时加减的数值。你可以把一个信号量的计数值改变
为一个非“1”的数字。一般只会用到两个值，一个是“-1”，也就是我们的P操作，等待信号量
变得可用：另-个是“+1”，也就是我们的V操作、发出信号量已经变得可用的信号。
最后--个成员sem_fig通常被设置为SEM_UNDO。它将使操作系统跟踪当前进程对该信号
量的修改情况。如果一个进程在没有释放信号量的情况下结束了执行，该进程掌握的信号量就
将由操作系统自动释放。除非你对信号量的行为有特殊要求，否则就应该养成把sem_flg设置
为SEM_UNDO的好习惯。如果你确实需要使用--个不是SEM_UNDO的值，就一定要注意保持
其连贯性，否则就容易在操作系统是否需要在你的进程退出执行时替你清理信号量的问题上犯
错误。
semop调用的切动作都是一次性完成的，这是为了避免出现因使用了多个信号量而可能发
生的竞争现象。semop的操作细节可以在使用手册页里找到。
3.semctl函数
semcu函数允许我们直接控制信号量的信息，下面是它的定义情况：
int senctl(int sen_id, lnt sem_nun, int command, ...);
第一个参数sem_id是由semget函数返回的一个信号量标识码。sem_num参数是信号量的编号，
如果在工作中需要用到成组的信号量，就要用到这个编号：它一般取值为0，表示这是第一个也
是惟一的信号量。command参数是将要采取的操作动作。如果还有第四个参数，那它将会是一
个“union scmun”复合结构，其中至少应该包含如下所示的儿个成员：
unlon seaun (
int val;
struct senid_ds *but;
unsigned sbort *array)
某些Linux版本会在某个头文件里给出semun复合结构的定义，但X/Open却说这必须由程序
员自己进行定义。如果读者需要定义自已的semun复合结构，就请查阅semcul的使用手册页，看
看有没有已经给定的定义。如果有，我们建议你原封不动地使用其中给出的定义，即使它与我
们这里给出的不一致也应该如此。下面是作者系统上使用的semun.h文件的内容，读者应该根据
自己系统使用手册页中的说明行事，并在必要时对它进行修改。如下所示：
ifndef _SEMUN_H
define _SEMUN_H
union semun (
int val:
struct semid_ds *buf;
/*value for SETVAL */
unsigned short int *array;/*array for G&TALL.SErALL */
/*buffer for IFC_STM,IPC_sET·/
struct seninfo *__buf;
/*buffer for IPC_INFO */
tendif
semcu里的command可以有许多不同的值。我们下面介绍的是其中最常用的两个。semcu函
加入jaVa编程群：524621833
---
## Page 418
400
Linux程序设计
数的完整细节请查阅它的使用手册页。
command参数最常用的两个值是：
·SETVAL：用来把信号量初始化为一个已知的值。这个值在semun结构里是以val成员的面
目传递的。它的作用是在信号量的第一次使用之前对它进行设置。
·IFC_RMID：删除一个已经没人继续使用的信号量标识码。
scmctl函数会根据command参数返回好几种不同的值。就SETVAL和IFC_RMID来说，成功
时它将返回“0”，失败时返回“-1”。
13.1.4使用信号量
从上面的介绍可以看出，与信号量有关的操作可以是相当复杂的情况。这可不是什么好消
息，如果多进程或者多线程里包含有关键代码，光是把它们编写好就已经是一个困难的问题、
要是再加上一个复杂的程序接口，操心的事可就更多了。
但幸运的是大部分需要用信号量来解决的问题只用一个最简单的二进制信号量就能搞掂。
在我们的示例里，我们将用全功能程序设计接口为二进制信号量编写一个简单很多的PV操作接
口。然后，我们将通过这个比较简单的接口向大家展示信号量的工作情况。
我们将只使用一个程序seml.c来检验我们的信号量，我们可以多次启动执行。我们将通过一
个可选参数来指明信号量的创建和销毁工作是否需要由这个程序来负资。
我们用两种不同字符的输出来表示关键代码部分的进入和离开。如果程序启动时带有参数，
就在进出关键代码部分时打印一个“X”：而程序的其他运行实例将在进出关键代码部分时打印
一个“O”。因为在任一时刻只能有一个进程能够进人关键代码，所以字母“X”和“O”应该是
成对出现的。
动手试试：信号量
1）头文件、函数预定义和全局变量定义之后，我们到达main函数。我们用semget创建了一个
信号量，它将返回一个信号量标识码。如果程序是第一个被调用的（即它在被调用的时候带着一
个参数，使argc>1)，就调用set_semvalue对信号量进行初始化，并把变量op_char设置为"X"。
#include 
#include 
include 
#include 
tinclude 
include 
#include *semun.h*
static int set_senvalue(void);
static void del_semvalue(void):
static int semaphore_p（void);
static int senaphore_v(void):
statie int sem_id:
int main(int arge, char *argvi1}
加入jaVa编程群：524621833
---
## Page 419
第13章信号量、消惠队列和共事内存
int i;
0.=reqdor
int pause_tine;
srand((unsigned int)getpid()):
se=_id = senget ( (key_t)1234, 1. 0666 1 IPC_CREAT) ;
if {argc > 1){
fprintf(stderr,Failed to initialize semaphore\n*1:
exit (EXIT_FATLURE1;
op_char =*X':
sleep(2) ;
2）接下来是一个总共进出关键代码十次的循环语句。在每次循环的开始我们都要先做一次
semaphore_p调用，因为程序将从此开始进人关键代码。
for（1 =0;<10;i++){
if (1semaphore_p[))exit(EXIT_PAILURE);
pause_tine =rand()  3;
printf(*ec*.op_char);fflush(stdout);
sleep(pause_time);