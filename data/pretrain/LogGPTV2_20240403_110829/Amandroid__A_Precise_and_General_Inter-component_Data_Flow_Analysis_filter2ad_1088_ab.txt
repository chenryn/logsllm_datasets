Amandroid introduces component-level models instead of
FlowDroid’s whole app-level model. The environment of a
component C represents a main method, EC , which takes
as parameter an incoming intent i and invokes C’s life-cycle
methods (e.g., onCreate or onReceive) based on C’s type
(Activity, Service, Broadcast Receiver, etc.) and other call-
back methods (e.g., onLocationChanged) so that all possible
paths are included. This component-level model is more ef-
fective in capturing the impact of the Android system on
both the control and data of an app’s execution. The part
below the dotted line in Figure 1a highlights this idea: a
dedicated environment for each component invokes the set
of implemented callback methods; this is the control part
of modeling Android’s environment.
In addition, the en-
vironment also keeps tracks of the intents received by the
component (e.g., Environment of Leaker remembers that p3
was sent to start Leaker ) so that the intents could be made
available when necessary (e.g., to serve getIntent() in the
Leaker component); this is the data part of modeling An-
droid’s environment. EC also passes the intent parameter
when necessary for other relevant methods (e.g., onReceive).
Amandroid generates Ec automatically. First, it collects
basic information from the resource ﬁles in the apk and uses
this information to collect layout callback methods. It then
generates the body of Ec with lifecycle methods based on the
type of C. Finally, it collects other callback methods (e.g.,
onLocationChanged) in C (through a reachability analysis)
in an incremental fashion (following the FlowDroid [6] ap-
proach). All of these are done before performing the data
ﬂow analysis as discussed in Section 3.3.
3.3
Inter-component Data Flow Graph (IDFG)
Determining object points-to information is a core under-
lying problem in almost all static analyses for Android app
security, such as ﬁnding information leaks, inferring ICC
3The alternative is to fully analyze the whole Android sys-
tem’s code, which is both expensive and unnecessary as also
observed by others [17, 23].
calls,
identifying misuse of certain library functions, and
others. Instead of addressing each of these problems using
diﬀerent specialized models and algorithms, it is advanta-
geous and more elegant to pre-calculate all object points-to
information at once, and use this as a general framework for
diﬀerent types of further analysis.
Existing oﬀ-the-shelf static analysis tools such as Soot [32]
(used by FlowDroid [6, 17] and Epicc [25]) and Wala [16]
(used by CHEX [23]) have not provided capability of calcu-
lating all objects’ points-to information in a both ﬂow and
context-sensitive way [4, 22].4 This is due to concerns about
computation cost. However, with the advancements in hard-
ware (e.g., many-core machines), it opens new possibilities
to perform a more precise analysis.
Thus, the core task of Amandroid’s analysis is aimed to
build a precise inter-component data ﬂow graph (IDFG) of
the app; the ﬂow-sensitive and context-sensitive data ﬂow
analysis to calculate object points-to information is done at
the same time with building inter-procedural control ﬂow
graph (ICFG). This is because in order for one to precisely
know the implementation method of a virtual method in-
vocation, one needs to know the receiver object’s dynamic
type; conversely, ﬂow-sensitive data ﬂow analysis requires
one to know how the program control ﬂows. Thus, there is
a mutual dependency between the two analyses.
Such integrated control and data ﬂow analyses approach
has been demonstrated to be both practical and eﬀective
for even analyzing temporal properties of concurrent Java
programs including the standard Java library codebase [10].
However, [10] does not keep track of method calling con-
text (typically termed monovariant calling context analysis
or 0-calling context [24]). We generalize the approach to
precisely track the last k calling contexts (polyvariant [24],
a.k.a. k-limiting where k is user-conﬁgurable and the addi-
tional calling context beyond k is monovariant).
Amandroid follows the classical static analysis approach [24]
customized to address the number of aforementioned chal-
lenges in analyzing Android apps.
It computes points-to
facts for each statement. There are two sets of facts asso-
ciated with each statement: the set of facts entering into a
statement s is called the entry set of s (or just entry(s));
the set of facts exiting a statement s is called the exit set
of s (or just exit(s)). Statement s may change entry(s)
by killing stale facts (kill (s)) and/or generating new facts
(gen(s)). The gen and kill sets can be calculated using ﬂow
functions that are based on s’ semantics.
In general, the
ﬂow equations have the following forms.
exit(s) = (entry(s) \ kill (s)) ∪ gen(s)
(1)
Due to space constraints, the description of the basic IDFG
building process can be found in Appendix. Below we intro-
4More detailed comparison between Amandroid and Flow-
Droid can be found in Section 6.
duce the notations in IDFG and use the example in Section 2
to explain its semantics. Figure 3 is the resulting IDFG of
the exmaple app, using DataGrabber as the entry point.
3.3.1 Notations
A points-to fact provides information about what objects
a variable (register in Dalvik), an object ﬁeld, or an array
element may point to at a particular program point. Objects
are dynamically allocated in the Dalvik VM heap space at
object creation sites (through a “new” statement). In our IR,
each statement in the program is assigned a unique number
N (represented as LN ). We use the term instance N to
denote the object instance created at statement N (note
that the statement gives the exact object runtime type).
A tuple-instance (e.g., (“key1”, 5)) denotes a key-value pair
in the fact sets. Amandroid keeps tracks of two kinds of
information:
• variable-fact: A points-to fact for a variable; it is denoted
as (cid:104)v, l(cid:105), where v is the variable (whose type is an object
reference type) and l is an object instance. For example,
in Figure 3 statement L6 generates a variable-fact (cid:104)i1, 6(cid:105),
meaning that variable i1 points to instance 6.
• heap-fact: A points-to fact for an object ﬁeld or an array
element. For example, statement L8 in Figure 3 gen-
erates a heap-fact (cid:104)(6, mExtras), (“key1”, 5)(cid:105), meaning
that the ﬁeld mExtras of instance 6 points to a key-value
pair (“key1”, 5)5.
Amandroid starts the IDFG building from the CFG of
the DataGrabber component’s environment method (the left
column of the leftmost dashed box in Figure 3). For brevity
only a subset of the nodes and facts are shown.
3.3.2 Modeling Library and Native Calls
Android has a large number of library API’s an app may
call into, some of which are implemented natively. Similarly,
an app developer may choose to natively implement some
functionality due to various reasons (e.g., performance). Aman-
droid does not analyze native code; thus, in order to enable
analysis of app making use of native code, we need to pro-
vide models for native methods that summarize how the
data ﬂow facts that may be changed. For library APIs that
have well-understood simple semantics, one can summarize
them as ﬂow functions (gen and kill ). Moreover, providing
models for non-native library methods that are frequently
used are also useful to scale the analysis. This is in line
with how we model the Android environment described in
Section 3.2.
In general, Amandroid adopts the following strategy in
modeling Android library functions: (1) for library func-
tions that provide important information for static analysis
(e.g., intent manipulation functions), we manually build a
precise model for them based on the function’s implementa-
tion and/or documentation (each model simply consists of
5The mExtras ﬁeld is an aggregate object that may store
multiple key-value pairs. We currently do not model such
aggregates and instead “ﬂatten” all the elements in an ag-
gregate into singleton instances. This will create two possi-
ble interpretations of multiple facts regarding an aggregate
object: either they are diﬀerent possibilities from diﬀerent
program branches, or they are part of a single aggregate
in the same branch. Amandroid’s static analyzer conserva-
tively assumes both are possible to ensure soundness, but
this could lose some precision. Modeling aggregates is an
engineering work that we will address in future work.
custom gen and kill functions); and (2) for all other library
functions, we provide a uniform conservative model. The
conservative model essentially assumes that for every object
parameter, any of its ﬁelds may be modiﬁed and becomes
unknown; that is, the ﬁeld can point to a fresh object, or
any existing object reachable from the method parameters
(and static ﬁelds) that is type compatible with the method’s
return type. If the function also returns an object, the re-
turned object is also considered “unknown.”
In Figure 3, line L5 in DataGrabber generates a variable-
fact (cid:104)s1, 5(cid:105), indicating that an object is returned from the
API call and assigned to s1; we use getSensitiveData in this
example as a generic name for any methods that returns an
object with sensitive information. At Line L8 the sensitive
data is inserted as a key-value pair (“key1”, s1) into intent
i1’s mExtras ﬁeld. The putExtra is an Android system API
and we model it so that we can keep track of the data ﬂow
through the call. In this case, the model of the API will as-
sign the key-value pair to the mExtras ﬁeld of intent i1. The
generated fact at Line L8 is then (cid:104)(6, mExtras), (“key1”, 5)(cid:105)
following our notation for a ﬁeld-fact, where 6 represents the
intent i1 created at Line L6. Note that instance 5 represents
the String object returned from getSensitiveData().
3.3.3 Handling ICC
Section 2 illustrates that malicious apps can easily manip-
ulate Android’s inter-component communication (ICC) to
stealthily achieve undesired eﬀects. To identify such secu-
rity problems, a static analyzer needs to be aware of control
and data ﬂows across component boundaries. Handling ICC
requires a number of steps: (1) solve for ICC call parame-
ters, (2) ﬁnd the target component(s), and (3) track data
ﬂow from the ICC caller to callee.
Prior work [25] has investigated how to infer Android ICC
API call parameters (Step 1). Amandroid not only infers
such ICC API call parameters using the points-to facts com-
puted, but also uses such information to resolve ICC call tar-
gets (Step 2) and link the source with the possible targets in
its dataﬂow analysis (Step 3). This will enable us to detect
the security problems like that illustrated in Section 2.
The destination of an ICC can be either explicitly or im-
plicitly speciﬁed in the outgoing intent. The common way
of creating an explicit intent is by adding the destination
component’s name using Android APIs such as setClass (L7
in Figure 3) or a special constructor for Intent (L15 ). An
implicit intent does not include the name of a speciﬁc desti-
nation component, but instead requests a general action to
perform, and the System ﬁnds a capable component (from
the same app or another) which can fulﬁll the request. Some
ﬁelds of an Intent object are used in this matching: mAc-
tion (String), mCategories (set of String), mData (Uri), and
mType (String). These intent ﬁelds can be manipulated by
invoking certain Android APIs. Through proper modeling
of these API functions (Section 3.3.2), Amandroid can de-
rive possible (String) values of the relevant ﬁelds of an Intent
object, upon which the Android system bases its decision on
ICC destinations.
For instance, Amandroid can derive that at L9 in Fig-
ure 3, the intent parameter i1 ’s ﬁeld mComponentName6 is
6For the ease of exposition, in this article we represent the
mComponent ﬁeld of an intent by its name string. However,
we handle this ﬁeld accurately in the Amandroid implemen-
tation.
Figure 3: An excerpt from the IDFG of the app “sensitive-sms.”
“Forwarder.” This fact comes from the modeling of the API
function setClass called at L7, which generates a ﬁeld-fact
(cid:104)(6, mComponentName), ”Forwarder”(cid:105), where 6 represents
Intent i1 which was created at L6.
For an implicit intent, the Android system ﬁnds the desti-
nation depending on the intent ﬁelds as well as the manifests
of all the apps which specify intent ﬁlters for a component.
An intent ﬁlter is an XML expression involving the action
tag, category tag, and data tag (which includes both uri and
type). The Android system determines the destination of
an implicit intent by applying a set of rules [2] matching the
relevant intent ﬁelds and the intent ﬁlter speciﬁcation for
every component on the system. Amandroid implements all
those matching rules, using the static analysis results that
show the possible string values of the relevant intent ob-
ject ﬁelds. It runs a precise action test, category test, and
data test (having both Uri and type) to ﬁnd the destina-
tion component(s). Our static analysis can readily handle
the String literals. For complicated String operations (e.g.,
concatenation in a while loop), if Amandroid cannot infer
the exact string value, it reports it as any string, ensuring
the soundness of our analysis. We are able to run the Uri
test matching diﬀerent parts of the Uri (e.g., scheme, path,
host, port) between the intent and an intent ﬁlter. Further-
more, Amandroid is also able to ﬁnd the speciﬁcations of
dynamically registered Broadcast Receivers, if any.
3.4 Building the Data Dependence Graph
The data dependence graph (DDG) is derived from the
IDFG. The DDG reﬂects how instance and variable deﬁni-
tions ﬂow through the program. With the help of DDG,
we can argue which part(s) of the program a particular
program-point depends on with respect to these two types
of ﬂows. As a matter of fact, the DDG is a directional graph
like the ICFG. The basic DDG’s node set is the same as the
ICFG’s, but their sets of edges are diﬀerent. In fact, DDG
has two kinds of edges: (i) object dependence edge – an edge
linking the use site of an instance to the creation site of the
instance, and (ii) variable def-use edge – an edge which links
a use site of a variable to the def-site of the variable.
Since object ﬂow along ICC edges is already captured in
IDFG, the constructed DDG automatically captures data
dependencies across component boundaries. As an example,
in Figure 3, the sendTextMessage(..., s3) in Leaker uses s3
while the entry of this statement has a fact (cid:104)s3, 5(cid:105) which
implies that Instance 5 is used in this statement. So, there is
an object dependence edge from the corresponding CallNode
(L28 ) in the Leaker component to the creation site (L5 ) in
the DataGrabber component.
3.5 Using Amandroid for Security Analyses
Amandroid provides an abstraction of the app’s behavior
in the forms of IDFG and DDG. We now discuss how they
can be easily used for a number of useful security analyses.
3.5.1 Data Leak Detection
One important problem in app vetting is to ﬁnd whether
an app may leak any sensitive data. Examples of sensitive
data include user-login credentials (e.g., password), location
information, and so on. This can be performed through
standard data dependence analysis using the DDG. Given
a source and a sink, one can ﬁnd whether there is a path from
source to sink in the DDG. All that is needed for this anal-
ysis is to specify the source and the sink, which can be any
node depending on the speciﬁc problem. For instance, prior
research [7, 17] has documented a list of security-critical
source and sink APIs, which can be used here. One could
also customize the deﬁnition of the source and sink for the
speciﬁc problem at hand. DDG can only capture explicit in-
formation leaks; for information leaks through controls (e.g.,
leaking conditionals through the branches) one would need
to build a control dependence graph, which can be obtained
from the ICFG through the standard process [5].
Compared with prior works on detecting information leaks
on Android apps, Amandroid can perform a more compre-
hensive analysis since it captures control and data ﬂows
across the component boundaries through ICCs, so that se-
curity problems like the one shown in Figure 1a can be cap-
tured.
3.5.2 Data Injection Detection
An app can have a vulnerability which allows an attacker
to inject data into some internal data structures, leading
to security problems. Recently, researchers [23] identiﬁed a
subclass of this vulnerability called intent injection. The at-
tacker can send an ill-crafted intent to a public component
of a vulnerable app, which retrieves data from the incoming
intent and uses it for security-sensitive operations. For in-
stance, the app’s logic can be such that the incoming intent
determines the destination of a critical data ﬂow — the url
of a backup server, the name of a ﬁle, the destination com-
ponent of an ICC call, phone number of an outgoing SMS,
or others. As a result, the attacker will be able to control
the destination, which can lead to serious security problems.
Amandroid can detect this vulnerability using the DDG,
by deﬁning the source as the possible entry point of attacker-
controlled data (e.g., a public-facing interface), and the sink
being the critical parameters of the security-sensitive opera-
tions. If a data-dependency path exists between the source
and the sink, the attacker can potentially manipulate the
parameters of the security-sensitive operations.
As an example, recent research [34] found (manually) the
next intent vulnerability of popular apps such as Dropbox,
which is a special intent injection problem involving ICC. As
Amandroid is able to track data dependencies over the ICC
links, our aforementioned analysis technique is able to ﬁnd
the “next intent” problems in an automated fashion. In fact,
Amandroid was able to rediscover this issue in the Dropbox
app.
3.5.3 Detecting Misuse of an API
Another critical part of security vetting is to ﬁnd if the de-
veloper (intentionally or unintentionally) has used a library
API in an improper way, which may lead to security prob-
lems. Recent research has applied static analysis to identify
misuse of Crypto APIs [11] and SSL APIs [14]. The main
idea is to detect if the app satisﬁes a set of rules on proper
use of the APIs. For example, if the parameters for call-
ing the encryption method have certain values the cipher