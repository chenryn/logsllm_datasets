使用gadgetinspector的方案时
面对重复计算的情况，忽略了入参所发生的变化
导致入参在后续的分析中将产生 误报 或 漏报
GadgetInspector分析案例
污点分析引擎｜化整为零
污点分析引擎｜化零为整
可控性标识 意义
-3
表示变量不可控
-2
表示变量来源于sources
-1
表示变量来源于调用者本身
0-n
表示变量来源于函数参数列表
Tabby的污点推算规则共依靠两块语义信息：
1. 调用边上的污点信息
2. 预置sink函数的污点信息
污点推算规则
污点分析引擎｜化零为整
污点分析引擎 ｜ 化零为整 tabby path finder
小结 look bigger
Find Java Gadget like a pro
02
Find Java Gadget like a pro
Java反序列化漏洞
2015年Frohoff以及FoxGlove Security团队发表了关于Java反序列化漏洞原理以及利用方式。
Java反序列化漏洞其本质是“不安全的反序列化”，攻击者构造恶意的序列化数据用于正常的
反序列化功能，从而导致本不该被访问的对象被调用执行。
可控的Java反序列化触发点
如ObjectInputStream的输入数据是
可控的，且后续调用了readObject
函数
有效的Java反序列化利用链
利用当前项目的开源基库构造有
效的序列化链，该链可最终达成
危险函数或对象的调用执行
最终的利用达成
通过有效的利用链，使得应用可
任意调用危险函数或对象的执行，
如Runtime的exec函数，用于执行
系统命令。
Find Java Gadget like a pro ｜ XStream
XStream反序列化利用链source特征：
1. 存在5种Magic method
2. 无Serializable限制，甚至可还原Method对象
Converters
可利用的还原对象
Magic Method
SerializableConverter
Serializable对象
readObject
CollectionConverter
HashSet、LinkedHashSet
hashCode、equals
MapConverter
HashMap
hashCode、toString[1]
TreeSet/TreeMapConverter
TreeSet、TreeMap
compareTo, compare
构造source限制语句
反序列化利用链最终达成的效果常为如下几个sink函数:
1. 反射调用任意函数，Method.invoke
2. JNDI连接，lookup或更底层的函数
3. 文件操作，如任意文件写的相关函数
构造sink限制语句
构造tabby路径检索函数调用
[1] https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/gadgets/ToStringUtil.java#L
Find Java Gadget like a pro ｜ XStream
追加限制条件
Gadget: (CVE-2021-21346)
javax.swing.MultiUIDefaults#toString
javax.swing.MultiUIDefaults#get
javax.swing.UIDefaults#get
javax.swing.UIDefaults#getFromHashtable
javax.swing.UIDefaults$LazyValue#createValue
sun.swing.SwingLazyValue#createValue
java.lang.reflect.Method#invoke
javax.naming.InitailContext#doLookup
Find Java Gadget like a pro ｜ XStream
依据先验知识，挖掘新利⽤链
Find Java Gadget like a pro ｜ XStream
XStream 1.4.17 黑名单
对象字符黑名单
对象正则黑名单
非法继承黑名单
Find Java Gadget like a pro ｜ XStream
XStream 1.4.16 绕过 CVE-2021-29505
黑名单修复
命中
命中
前半部分依然可用
那么，该怎么利用这半条利用链呢？
Find Java Gadget like a pro ｜ XStream
CVE-2021-29505 利用链分析
XStream 1.4.17 bypass 转化为寻找合适链路：
1. 函数名nextElement
2.实现了java.util.Enumeration接口
3.存在一条链路能从source到特定sink函数
CVE-2021-39148 com.sun.jndi.toolkit.dir.ContextEnumerator
CVE-2021-39147 com.sun.jndi.ldap.LdapSearchEnumeration
CVE-2021-39145 com.sun.jndi.ldap.LdapBindingEnumeration
构造source条件
构造sink条件，关注JNDI
Find Java Gadget like a pro ｜ XStream
Find Java Gadget like a pro
小结
本节分享了两种利用链挖掘的方法，但其实质都在于如何构造好查询语句
https://tabby-db-files.oss-cn-hangzhou.aliyuncs.com/jdk/1.8.0_292/graphdb.mv.db
利用链的挖掘过程转化成了
1. 初始模式识别并转化为cypher语句（序列化机制特征）
2. 不断优化查询语句（添加where限制），不断验证所输出利用链的有效性
Find Java Web Vulnerabilities 
like a pro
03
Find Java Web Vulnerabilities like a pro
相比利用链的挖掘，Java Web应用的特征识别则相对简单，tabby默认内置了如下的端点识别
Struts类型
JSP类型
Servlet类型
注释类型
Find Java Web Vulnerabilities like a pro
取某著名oa系统依赖库生成代码属性图
nc.bs.framework.server.InvokerServlet#doAction
1. Servlet类型，主动调用serivce函数
2. IHttpServletAdaptor类型，主动调用doAction函数
3. doAction函数，且参数类型为HttpServletRequest、HttpServletResponse
彩蛋在哪里XD
针对常见的Web漏洞，tabby内置了常见
的sink函数，使用VUL标签来区分：
•
SQLI
•
SSRF
•
FILE
•
FILE_WRITE
•
CODE
•
EXEC
•
XXE
•
SERIALIZE
除此之外，对于Web漏洞，推荐使用前
向分析，由source函数开始查找至sink函
数
Find Java Web Vulnerabilities like a pro
Find Java RPC Framework Vulnerabilities 
like a pro
04
Find Java RPC Framework Vulnerabilities like a pro
Netty类RPC框架实现思路
Find Java RPC Framework Vulnerabilities like a pro
com.weibo.api.motan.transport.netty.NettyServer#initServerBootstrap
com.weibo.api.motan.transport.netty.NettyDecoder#decode
com.weibo.api.motan.protocol.rpc.DefaultRpcCodec#decode
com.weibo.api.motan.protocol.rpc.DefaultRpcCodec#decodeRequest
Find Java RPC Framework Vulnerabilities like a pro
Find Java RPC Framework Vulnerabilities like a pro
已知的Netty通用调用
未知的用户逻辑
已知的反序列化逻辑
Find Java RPC Framework Vulnerabilities like a pro
Java原生反序列化调用链
Hessian反序列化调用链
Find Java RPC Framework Vulnerabilities like a pro
Hessian利用链 SpringAbstractBeanFactoryPointcutAdvisor
Hessian利用链 SpringPartiallyComparableAdvisorHolder
如果目标不出网？
如果目标JDK版本很高？
如果目标不存在原生反序列化利用链？
如何做到hessian to rce？
Find Java RPC Framework Vulnerabilities like a pro
org.springframework.util.MethodInvoker#invoke
Reflection to RCE
org.springframework.beans.factory.support.StaticListableBeanFactory#getBean
org.springframework.beans.factory.FactoryBean#getObject
org.springframework.beans.factory.config.MethodInvokingFactoryBean#getObject
org.springframework.beans.factory.config.MethodInvokingBean#invokeWithTargetException
org.springframework.util.MethodInvoker#invoke
java.lang.reflect.Method#invoke
Find Java RPC Framework Vulnerabilities like a pro
One More Step！
如果是无spring依赖的情况，如何hessian to rce？
Hessian反序列化流程的特征：
1.
Magic method 类似Xstream，有equals、toString等函数
2.
无法还原构造好的恶意Iterator、Enumeration、Map、List对象内容
3.
默认使用unsafe初始化对象，无getter、setter调用
4.
但也意味着可还原除特殊几个对象的任意对象，如Class、Method对象
5.
类属性还原忽略Transient、Static
JDK是一座深山，永远可以发现有意思的东西！
排除中间节点出现黑名单对象
Find Java RPC Framework Vulnerabilities like a pro
XStream CVE-2021-21346 变种
javax.activation.MimeTypeParameterList#toString
java.util.Hashtable#get
javax.swing.UIDefaults#get
javax.swing.UIDefaults#getFromHashtable
javax.swing.UIDefaults$LazyValue#createValue
sun.swing.SwingLazyValue#createValue
java.lang.reflect.Method#invoke
sun.swing.SwingLazyValue#createValue
Not JNDI Again！
FileWrite + URLClassLoader = RCE
静态函数调用
Find Java RPC Framework Vulnerabilities like a pro
com.sun.org.apache.xml.internal.security.utils.JavaUtils#writeBytesToFilename
sun.security.tools.keytool.Main#main
1. write to /tmp/a.jar
2. load /tmp/a.jar
3. newInstance trigger static blocks
4. Execute any Java code
总 结
1. tabby善于链路挖掘，但模式识别仍需人工参与
2. 规则库的完善度决定了分析效果
3. 加内存！升级CPU！买高配云主机！！！
Happy Hunting Bugs！
Ps: 分享基于最新的 tabby 2.0，开源时间待定
Ps：分享的利用链均开源于ysomap
分享涉及的开源库：
1.
https://github.com/wh1t3p1g/tabby
2.
https://github.com/wh1t3p1g/tabby-path-finder
3.
https://github.com/wh1t3p1g/ysomap