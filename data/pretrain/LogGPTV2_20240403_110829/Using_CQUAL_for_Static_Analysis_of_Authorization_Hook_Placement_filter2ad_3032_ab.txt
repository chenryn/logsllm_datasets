qualiﬁers. A lattice is a partially ordered set in which
all nonempty ﬁnite subsets have a least upper bound and
a greatest lower bound. For example, Figure 3 shows a
CQUAL is employed to perform the central task of stat-
ically verifying that all inter-procedural paths from any
initializing function to any controlling function, contain
an authorization of the controlled object (steps 6 and 7
from Section 2). This is achieved using the lattice con-
ﬁguration shown in Figure 3. Figure 4 shows a graph-

U
U
U
U
3.2.1 Step 1:
Initializing Controlled Objects to
Unchecked
Security Check
C d_inode), where ﬁeld d_inode
is of controlled type).
It should also be qualiﬁed as
unchecked, because it is equivalent to declaring a
local variable, initializing it to be a reference to the
structure member, and then passing the variable to the
function. To qualify such cases, we explicitly cast the
parameter to unchecked at the function call (e.g.
f((struct inode * $unchecked)dentry-
> d_inode)).
The task of marking local variables of controlled types
is automated using two tools: one for controlled local
variables and one for the passing of structure member
references to functions. First, we modiﬁed GCC to out-
put the location (ﬁle and line number) of any local vari-
able declaration with a controlled type. To achieve this,
we inserted code that traverses the abstract syntax tree
(AST) for each function as it is compiled. The code
scans the AST for local declarations (VAR_DECL nodes)
and prints the location details if the type (TREE_TYPE)
of the declaration is a controlled type (independent of
the level of indirection). In the case of structure member
references, our GCC code scans the AST for function
calls (CALL_EXPR nodes). If any parameter is a refer-
ence to structure member (COMPONENT_REF node, see
Section 3.2.2 for more discussion), and the type of the
referenced ﬁeld is one of the controlled types, then GCC
prints out detailed location and type information about
the parameter. Next, this information is input to a PERL
script that inserts appropriate annotations into the source
code.
For parameters in function declarations, we leave their
types unqualiﬁed. CQUAL then automatically infers
their type during the analysis process. There are a few
exceptions to this rule, where we manually annotate
function prototypes (in two header ﬁles) that we know
expect checked type parameters.
COMPONENT_REF
INDIRECT_REF
FIELD_DECL
[VPC]_DECL
Figure 5: Detecting Controlled Operations in the AST
3.2.2 Step 2: Annotating Checked Parameters
Controlled operations occur whenever a member of a
controlled type is read or written (all controlled data
types are structures). Controlled operations must only
be performed on checked objects. With current ver-
sion of CQUAL, we cannot specify type requirements
for variables at individual statement level, instead, we
specify type requirements on any function parameters
that are used in controlled operations within that func-
tion. This analysis veriﬁes complete mediation in the
inter-procedural case (i.e., where the controlling func-
tion is different from the authorizing function) but, it
cannot verify complete mediation for controlled oper-
ations within an authorizing function. Our approach to
intra-procedural analysis is described in step 4 below.
To automate the annotation process, we again added
code to GCC to output the details of controlled oper-
ations, and then input this information into a series of
PERL scripts. These scripts aggregate the controlled op-
erations to the function parameters, and add checked
qualiﬁers to those parameter declarations. The type in-
ference engine then propagates this up the call graph,
raising an error if an unchecked local variable is
passed to a checked parameter.
Figure 5 shows the subgraph structure that our analysis
searches for in the AST. Access to structure members
is represented in the AST by COMPONENT_REF nodes.
These nodes have two children, the ﬁrst is an expres-
sion which speciﬁes the variable being accessed, and the
second is a FIELD_DECL node which speciﬁes which
ﬁeld is being accessed. The expression that speciﬁes the
variable being accessed is a chain of INDIRECT_REF
and ADDR_EXPR nodes corresponding to the C derefer-
ence (*) and address (&) operators, respectively. At the
end of this chain is either a VAR_DECL corresponding
to a local variable, a PARM_DECL corresponding to a
parameter, or a COMPONENT_REF if we are accessing a
member of a structure embedded in another structure.
Our analysis searches for COMPONENT_REF nodes in
the AST. When one is found, it determines the type of
the structure being accessed (the left subgraph in Fig-
ure 5).
If this is a controlled type, then the expres-
sions is accessing a member of a controlled type, and
the location information (ﬁle, function, and line num-
ber) is reported. We also output whether this opera-
tion is on a local variable (VAR_DECL) or a parameter
(PARM_DECL).
This information is then input to a series of PERL
scripts. These scripts scan the GCC output for con-
trolled operations on parameters (i.e., those that contain
PARM_DECL nodes). Using the location information
provided by GCC, they ﬁnd the function declaration, and
annotate the parameter with the checked qualiﬁer.
3.2.3 Step 3: Authorizations
In theory, once an authorization is performed on a
controlled object, its qualiﬁed type is changed from
unchecked to checked. However, the current ver-
sion of CQUAL we use is ﬂow-insensitive, i.e., the qual-
iﬁer type of a variable remains the same throughout its
scope (e.g., the scope of a local variable is its deﬁning
block, typically the function). To get around this lim-
itation, following an authorization, we declare a new,
checked qualiﬁed variable with the same base type as
the object authorized. All uses of the original controlled
variable following the authorization are replaced by the
new variable. This process is automated using a PERL
script that replaces uses of the original variable via sim-
ple pattern matching.
The simple approach of replacing all uses of the vari-
able on source lines following the authorization makes
two assumptions about the function’s control-ﬂow graph
that must be veriﬁed. Firstly, that there are no back-
edges from below the authorization to above it. This
ensures that the authorization is not inside a loop and
that there are no goto statements below the authoriza-
tion that jump to above the authorization. Secondly, that
there is no control-ﬂow path from above to below the au-
thorization that does not execute the authorization. This
ensures that the authorization is not inside a conditional
or switch statement.
These assumptions are veriﬁed by adding code to GCC
to build the function’s control-ﬂow graph from its regis-
ter transfer language (RTL) description. Once the graph
is created, the two properties described above are veri-
ﬁed. While the vast majority of authorizations possess
these properties, exceptions do exist. Fortunately, the
number of exceptions is small enough that they can be
handled manually.
assignment is checked then CQUAL will raise a type
violation for the ﬁrst case and allow the second case.
In the third case, however, the structure member has no
type qualiﬁers to cause type violations. With no other
information, CQUAL will therefore infer that the RHS
has the same qualiﬁed type as the LHS, and report no
errors. As an example of how this can produce false-
negatives, consider the code fragment below.
3.2.4 Step 4: Verifying Controlled Operations
Within Authorizing Functions
void func a(struct inode * $checked
inode);
The analysis so far veriﬁes mediation in the inter-
procedural case, but, it does not verify intra-procedural
mediation. Intra-procedural analysis is required to verify
that controlled operations within an authorizing function
occur after the authorization.
Our approach in step 3 makes this analysis simple. In
step 3 we replaced all uses of the controlled object (
)

following the authorization with a new variable (
). An
	
intra-procedural control-ﬂow analysis veriﬁed the valid-
ity of this replacement. The intra-procedural analysis
reduces to ﬁnding all controlled operations within the
function that operate on local variables (parameters are
If the local
handled by the inter-procedural analysis).
variable is an introduced variable (
) then it is medi-


ated, otherwise a warning is generated.
3.2.5 Step 5: Verifying Assignments to Checked
Objects
As described in Section 2, complete mediation requires
veriﬁcation that a variable is not re-assigned between
an authorization and a controlled operation. From the
CQUAL perspective, the right hand side (RHS) of an as-
signment takes one of four forms:
1. An unchecked object.
2. A checked object.
3. A structure member (e.g. dentry->d_inode).
4. An explicit
(e.g.
type cast
(struct in-
ode*)0xc2000000). Since explicit casts in the
Linux source obviously don’t include our quali-
ﬁers, CQUAL treats them as unqualiﬁed.
void func b(struct inode * $checked
inode)
 ...
inode = dentry->d inode;
...
func a(inode);
The variable inode in func_b has already passed se-
curity check since it has a checked qualiﬁer. However,
it is assigned a value dentry->d_inode, before be-
ing passed to func_a which expects a checked in-
ode. Clearly we would like CQUAL to raise a type vio-
lation, since dentry->d_inode is not an authorized
variable. However, according to CQUAL inference rule,
CQUAL will infer that dentry->inode is checked
and allow the function call.
The solution is to treat dentry->d_inode as
an unauthorized local variable by typecasting it
to
unchecked. At present we have not implemented the
interim solution and so this source of false-negatives re-
mains in our results.
The fourth case fails to report type violations for the
same reason. Explicit casts in the Linux kernel do not in-
clude our type qualiﬁers, therefore, CQUAL infers their
type. To address this problem, we wrote a PERL script
that scans the source for explicit casts, and inserts the
unchecked qualiﬁer. Any assignment of such an ex-
pression to a checked variable or parameter will result
in a type violation.
3.2.6 Steps 6 and 7: Determining and Verifying All
Inter-procedural Code Paths
CQUAL correctly handles the ﬁrst two cases, as the ob-
jects are qualiﬁed.
If the left hand side (LHS) of the
CQUAL performs interprocedural inferencing to verify
that between an initializing function and the controlling

function, there exists a security check. The controlled
object variable has an unchecked qualiﬁer when it’s
deﬁned in the initializing function. When the initializ-
ing function calls other functions passing the controlled
variable as a parameter, the unchecked qualiﬁer is
propagated down the calling chain, until the authoriz-
ing function is reached, at which point, a new checked
variable is deﬁned and used after the security check
(Step 4 in Section 2). When the authorizing function
calls other functions passed the new checked vari-
able, the checked qualiﬁer is again propagated along
the calling chain, until it reaches the controlling func-
tion. If a controlling function is reached without passing
through an authorizing function, then an error will be
raised, because the variable will have an unchecked
type and the controlling function expects a checked
type.
3.3 Complete Authorization
Veriﬁcation of complete authorization is basically car-
ried out in the same way as complete mediation, with
slight modiﬁcation to the lattice structure based on the
authorization requirement information. Rather than hav-
ing a generic checked type qualiﬁer for all security
checks, we assign a type qualiﬁer for each unique secu-
rity check. A controlled operation that requires multi-
ple security checks will then have a type qualiﬁer that
is a subclass of the corresponding type qualiﬁers of the
checks required. For instance, if a system contains two
security checks, denoted by
respectively, as-
suming that the controlling function f(file) requires
both security checks to be performed on the file ob-
ject, then the type qualiﬁer lattice should be:
and

partial order {
$checkedForC1C2 < $checkedForC1
$checkedForC1C2 < $checkedForC2
$checkedForC1
$checkedForC2
< $unchecked
< $unchecked
}
unchecked
checkedForC1
checkedForC2
checkedForC1C2
Figure 6: A four-node type qualiﬁer lattice.
in the directory. In the function prototype deﬁnition of
unlink(), we specify the authorization requirement
checkedforExecWriteDirunlink. After the se-
curity checks, a new variable Cdir that possesses the
right authorization requirements replaces the old vari-
able dir, and is passed to the controlling function.
4 Results
We ran the experiments on Linux version 2.4.9 with the
September 4th, 2001 LSM patch. We used GCC version
3.0.2 and CQUAL version 0.9 for our static analysis.
We analyzed four subsystems of Linux: the ﬁle system
(including ext2 physical ﬁle system), virtual memory
management, networking, and IPC. The analysis gener-
ated 524 type errors (CQUAL inference conﬂicts). Be-