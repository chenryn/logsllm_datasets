title:Automatic Firmware Emulation through Invalidity-guided Knowledge Inference
author:Wei Zhou and
Le Guan and
Peng Liu and
Yuqing Zhang
Automatic Firmware Emulation through 
Invalidity-guided Knowledge Inference
Wei Zhou, National Computer Network Intrusion Protection Center, 
University of Chinese Academy of Sciences; Le Guan, Department of 
Computer Science, University of Georgia; Peng Liu, College of Information 
Sciences and Technology, The Pennsylvania State University; Yuqing Zhang, 
National Computer Network Intrusion Protection Center, University of 
Chinese Academy of Sciences; School of Cyber Engineering, Xidian University; 
School of Computer Science and Cyberspace Security, Hainan University
https://www.usenix.org/conference/usenixsecurity21/presentation/zhou
This paper is included in the Proceedings of the 
30th USENIX Security Symposium.
August 11–13, 2021
978-1-939133-24-3
Open access to the Proceedings of the 
30th USENIX Security Symposium 
is sponsored by USENIX.
Automatic Firmware Emulation through Invalidity-guided Knowledge Inference
Wei Zhou1, Le Guan2, Peng Liu3 and Yuqing Zhang1,4,5∗
1National Computer Network Intrusion Protection Center, University of Chinese Academy of Sciences, China
2Department of Computer Science, University of Georgia, USA
3College of Information Sciences and Technology, The Pennsylvania State University, USA
4School of Cyber Engineering, Xidian University, China
5School of Computer Science and Cyberspace Security, Hainan University, China
Abstract
Emulating ﬁrmware for microcontrollers is challenging due
to the tight coupling between the hardware and ﬁrmware.
This has greatly impeded the application of dynamic analysis
tools to ﬁrmware analysis. The state-of-the-art work auto-
matically models unknown peripherals by observing their
access patterns, and then leverages heuristics to calculate the
appropriate responses when unknown peripheral registers are
accessed. However, we empirically found that this approach
and the corresponding heuristics are frequently insufﬁcient to
emulate ﬁrmware. In this work, we propose a new approach
called µEmu to emulate ﬁrmware with unknown peripherals.
Unlike existing work that attempts to build a general model
for each peripheral, our approach learns how to correctly emu-
late ﬁrmware execution at individual peripheral access points.
It takes the image as input and symbolically executes it by
representing unknown peripheral registers as symbols. During
symbolic execution, it infers the rules to respond to unknown
peripheral accesses. These rules are stored in a knowledge
base, which is referred to during the dynamic ﬁrmware analy-
sis. µEmu achieved a passing rate of 95% in a set of unit tests
for peripheral drivers without any manual assistance. We also
evaluated µEmu with real-world ﬁrmware samples and new
bugs were discovered.
1 Introduction
The rapid emergence of Internet of Things (IoT) technology
makes microcontrollers (MCUs) an increasingly serious se-
curity concern. Since most real-world IoT devices run on
MCU-based SoCs (System on Chip) and since MCUs lack
many security threat mitigation mechanisms available on PC/-
mobile platforms, many recent security incidents have been
related to MCU security. In MCU ﬁrmware, the main task
runs in an inﬁnite loop that constantly monitors and handles
external events. The task code implements the core logic of
∗Corresponding author: PI:EMAIL
The extended version of the paper with more details can be found at
https://arxiv.org/abs/2107.07759.
the application and integrates necessary libraries, such as the
TCP/IP stack and MQTT protocol. The external events on the
other hand, are abstracted by the kernel (if any) and peripheral
drivers. The mentioned security incidents were the result of
vulnerabilities within either the task code [29,40] or the driver
code [5, 22, 37].
Dynamically analyzing the task code in MCU ﬁrmware is
challenging, since its execution depends on (1) the runtime
environment constructed during device bootstrapping, and (2)
the driver functions directly invoked by the task. For example,
to ﬁnd a bug in the task code caused by improper handling of
input from the UART interface, the driver code of the UART
peripheral should be executed without hanging or crashing
the ﬁrmware. To satisfy these requirements, an emulator must
emulate the logic of diverse peripherals on real-world MCUs.
For example, when the ﬁrmware reads a register of a custom-
made peripheral, the emulator should return an appropriate
value depending on the current peripheral status. Given the
high-diversity in the ecosystem of MCU SoCs in the market,
it would require a huge amount of manual effort to develop an
emulator for (multiple types of MCU SoCs in) the ecosystem,
if the logic of diverse peripherals could not be automatically
handled.
To address this challenge, three lines of research are being
conducted. First, several solutions [15, 32, 34, 42] propose
to forward the interactions with unsupported peripherals to
the real hardware. However, these hardware-in-the-loop ap-
proaches cannot be used for large-scale automatic dynamic
analysis. Second, abstraction-based approaches side-step the
problem of peripheral emulation by leveraging the abstrac-
tion layer available on ﬁrmware. For example, by emulating
such an abstraction layer in Linux kernel, many Linux-based
ﬁrmware binaries can be emulated [17, 20, 30, 41]. Recently,
HALucinator [19] has been proposed to automatically match
the Hardware Abstraction Layer (HAL) APIs in ﬁrmware
and replace them with host implementations. However, this
approach requires ecosystem-wide standardization and is
problematic for ﬁrmware on custom-made SoCs [36, 38, 43].
In real-world ﬁrmware development, developers can invoke
USENIX Association
30th USENIX Security Symposium    2007
driver functions in arbitrary ways. It is therefore difﬁcult to
decouple the security testing of task code of ﬁrmware from
driver code execution. Moreover, since this approach com-
pletely skips the peripheral logic in ﬁrmware, dynamic anal-
ysis cannot ﬁnd any bugs in the peripheral drivers. Third,
full-system emulation [16, 21, 25] aims to emulate the en-
tire ﬁrmware without relying on real hardware. For exam-
ple, P2IM [21], a representative approach in this direction,
observes the access pattern of an unknown peripheral and
infers its interaction model [21]. Then P2IM combines expert-
provided heuristics and such interaction models to ﬁgure
out how to infer the appropriate responses from peripher-
als. Laelaps [16] uses symbolic execution to explore possible
branches, and then leverages heuristics to predict a “good”
one to follow.
Although the third research direction has shown exciting
potential for achieving device-agnostic emulation with high
ﬁdelity, based on our empirical studies, we still found they
frequently fail to properly execute complex samples. For ex-
ample, P2IM has to blindly guess the appropriate responses
for read operations to the status registers of peripherals, which
is impractical considering the large search space. Restricted
by the exploration depth, Laelaps [16] can only ﬁnd a good
branch for a short period of future execution. But this decision
might not be the best in the long run. Both of them may crash
or hang the emulation.
These failures are caused by a largely-ignored fact is that
ﬁrmware emulation is collectively affected by multiple pe-
ripheral registers. By “collectively”, we mean that in many
cases how one peripheral access should be handled at time t is
dependent upon the time t values of several other registers.
For example, in following code snippet extracted from the
Ethernet driver, the CR and SR registers are both used to de-
cide a branch target. When the SR register was accessed, the
response to it is dependent upon the value of the CR register
at that moment.
if (EMAC->CR & EMAC->SR == 0x1E7FF)
Enable_Ethernet_Interrupt();
Based on this key insight, the emulator should recognize how
multiple peripheral registers can affect ﬁrmware execution
and correspondingly decide the coordinated responses.
Meeting this requirement is challenging due to the lack of
ﬁrmware semantics. For example, P2IM observes the inter-
action patterns of each peripheral and handles each periph-
eral access individually without taking the above-mentioned
dependency into consideration. However, the observed exe-
cution trace does not provide enough contextual information
to properly categorize registers or calculate a coordinated
response.
Our idea. As mentioned before, to dynamically analyze task
code of ﬁrmware, it is important to emulate the hardware
behaviors entirely, including those of peripherals. Only in
this way can we reach to (buggy) task code responsible for
handling input retrieved from the I/O interface. To learn pe-
ripheral behaviors and correspondingly emulate driver code,
we observe that analyzing the interaction patterns of every
peripheral is actually unnecessary. As long as we can de-
cide an appropriate dependency-aware response at each pe-
ripheral access point, the emulation may succeed. To real-
ize this idea, two questions need to be answered. How to
judge whether a peripheral input is appropriate or not? How
to obtain such an appropriate peripheral input? In this work,
we answer these questions with two observations and corre-
spondingly developed a system called µEmu. Observation
1: If a response is incorrectly fed to the ﬁrmware, the error
will eventually be reﬂected in the execution state. In particu-
lar, the emulation would enter an invalid state. Observation
2: An invalid execution state is directly reﬂected on an in-
valid path. To avoid executing invalid paths, we can repre-
sent all the peripheral responses as symbols, and then use
symbolic execution to collectively reason about peripheral
responses that can avoid such states/paths. Through collective
reasoning, we can achieve dependency-aware peripheral ac-
cess handling. Through symbolic execution, we can achieve
constraint-satisfaction-based response ﬁnding.
Following these two observations, we propose µEmu, a dy-
namic analysis tool for ﬁnd bugs in the task code of ﬁrmware
for ARM MCUs. The core component of µEmu is a device-
agnostic emulator aiming at emulating driver code of un-
known peripherals. We infer necessary knowledge for prop-
erly emulating a speciﬁc ﬁrmware image using invalidity-
guided symbolic execution. Our system is comprised of two
phases, the knowledge extraction phase and the dynamic anal-
ysis phase. In the knowledge extraction phase, it takes the
ﬁrmware-under-test as input and mixes concrete and sym-
bolic execution (i.e., concolic execution) to extract essential
information for the subsequent dynamic analysis phase, The
information is stored in a knowledge base (KB) for later refer-
ences. Replacing concrete execution with concolic execution,
the proposed approach can reach deep paths and extract ad-
ditional knowledge. Using a symbolic constraint solver also
enables the proposed approach to accurately ﬁnd the appro-
priate peripheral readings. In the ﬁrmware dynamic analysis
phase, µEmu matches the entries in the extracted knowledge
base and responds with appropriate values when a register
of a (custom-made) peripheral is read. The knowledge base
guides the execution to always stay in valid states, while value
mutations of data registers, which can be controlled when the
attacker has access to the I/O interface, help ﬁnd new execu-
tion paths and ﬁrmware defects.
During knowledge extraction, µEmu only switches to an-
other path when the current path is found invalid. There-
fore, the path explosion problem faced by many symbolic-
execution-based approaches, including Laelaps [16], is allevi-
ated naturally. Moreover, knowledge (e.g., a concrete value
for a particular register) extracted at an earlier time point –
if found useful – can always be used at a later time point.
2008    30th USENIX Security Symposium
USENIX Association
This avoids potential symbolic execution. As a result, path
explosion is further reduced and time-consuming solver in-
vocations are minimized. In contrast, Laelaps needs to enter
expensive symbolic execution every time a peripheral register
is accessed.
A notable feature of the proposed approach is that the
knowledge base built with the restricted exploration space
(i.e., if the current path remains valid, µEmu will stick to it)
in the knowledge extraction phase can be used to emulate
multiple valid paths in the dynamic analysis phase. This is
because µEmu adopts a tiered caching mechanism, in which
a cache entry uses progressively more context information
to decide a response. Accordingly, (a) the bottom tier knowl-
edge enables the emulator to use the last written value as the
response to a peripheral read access; such values are dynam-
ically determined and can fork new branches. (b) the upper
tiers use more restrictive matching rules and therefore can
record multiple branch matching rules based on different con-
texts during knowledge extraction. In the dynamic analysis
phase, new paths can be emulated when contexts are changed.
We evaluated µEmu with 66 unit tests for testing the basic
function of individual peripherals. Compared with the passing
rate of 79% achieved by P2IM, µEmu achieves 95% without
any manual assistance. With very little manual assistance, all
unit tests can be passed. We also evaluated µEmu with 21 real-
world ﬁrmware samples. Evaluation results show that µEmu
is capable of emulating real-world ﬁrmware. By bridging it
with AFL, a state-of-the-art fuzzing tool, µEmu also helped us
ﬁnd previously-unknown bugs in the task code of the tested
samples.
In summary, we made the following contributions.
• We proposed using symbolic execution to emulate MCU
ﬁrmware without relying on real hardware. We achieved
this through an invalidity-guided recursive knowledge
extraction algorithm. The cached results in turn allow
us to build a knowledge base for the ﬁrmware used for
dynamic analysis.
• We implemented our idea on top of S2E. We show the
practicality of our approach by evaluating it on a collec-
tion of 21 real-world ﬁrmware samples covering more
than 30 different kinds of peripherals with several popu-
lar MCUs.
• We also integrated a modiﬁed AFL fuzzer with µEmu.
Through fuzzing analysis, we reproduced existing bugs
as well as found new bugs. µEmu is open source at
https://github.com/MCUSec/uEmu.
2 Background
2.1 MCU Peripherals
MCUs have widely adopted in power-effective embedded
devices such as drones, robots and programmable logic con-
trollers (PLCs). Their ﬁrmware typically comprises the task
code (including the core logic implementation and dependent
libraries), the kernel code (if any), and the driver code for
peripherals. MCU peripherals are mainly used to communi-
cate with the external world. There are two types peripherals,
on-chip peripherals and off-chip peripherals. The functions of
on-chip peripherals are invoked by writing to or reading from
peripheral registers, which are typically memory-mapped
into the system memory. For example, on ARM Cortex-M
MCUs, peripheral registers are mapped from 0x40000000
to 0x5fffffff. The values of peripheral registers change
non-deterministically depending on the internal logic of the
peripheral. To increase efﬁciency, using interrupts is a com-
mon practice. Off-chip peripherals are oblivious to the MCU
core. They are connected to the MCU core via on-chip pe-
ripherals, which serve as proxies between the ﬁrmware and
off-chip peripherals. For example, the SPI peripheral, which
is a general-purpose communication bus, is commonly used
to connect EEPROM and BlueTooth peripherals.
MCU peripherals are very diverse. On the one hand, there
are hundreds of different types of peripherals dedicated for
different tasks. On the other hand, even for the same type of
peripheral such as UART, manufacturers often implement it in
customized ways. This diversity imposes a major obstacle for
us to emulate a previously-unseen ﬁrmware image. Speciﬁ-
cally, the internal logic of each peripheral has to be accurately
and individually emulated.
2.2 Dynamic Symbolic Execution and S2E
Symbolic execution [31] is a powerful automated software
testing and analysis technique. It treats program inputs as
symbolic variables and simulates program execution so that
all variables are represented as symbolic expressions. Dy-
namic symbolic execution (a.k.a. concolic execution) com-
bines concrete execution and symbolic execution and inherits
the advantages of both. It has been widely used to ﬁnding
deep vulnerabilities in commercial software [15, 24].
S2E [18] is one of the most popular open-source symbolic
execution platforms. Since it is based on QEMU, it enables
full system symbolic execution and thus supports testing both
user-space applications as well as drivers. More importantly,
S2E exposes useful APIs to extend its functionality. An active
community constantly writes and maintains many useful S2E
plugins for performance improvement (e.g., better state prun-
ing algorithms) or new program analysis tool development.
Although QEMU supports multiple architectures, the latest
S2E only supports emulating x86/x86-64 architecture [11]. In
the following paragraphs, we introduce necessary technical
background for understanding this paper.
CPU Emulation and Hardware Emulation. The original
S2E is tightly coupled with QEMU. It leverages the Dynamic
Binary Translation (DBT) of QEMU to emulate CPU and
combines it with KLEE [15] for concolic execution. The
hardware such as peripherals is emulated by QEMU.
KVM Interface. S2E developers found it tedious to update
USENIX Association
30th USENIX Security Symposium    2009
with the upstream QEMU. Since version 2.0, they recon-
structed the S2E architecture to de-couple it from QEMU
using the KVM interface. The new S2E only uses QEMU
as a KVM client for hardware emulation, and maintains the
concolic execution engine by its own (in essence, the old DBT
code in QEMU). The concolic execution engine exposes a
KVM interface for the QEMU hardware emulator to invoke.
As a result, as long as the KVM interface is stable, when
QEMU is updated, S2E can also be easily updated to beneﬁt
from the ever-improving emulation capability of QEMU.
Effective Concolic Execution. S2E extracts CPU emulation
and DBT functions from the original QEMU and extends
them with KLEE for concolic execution. It can automatically
switch between the symbolic execution engine and concrete
execution engine. Speciﬁcally, when a memory location con-
taining symbolic data is de-referenced, S2E re-translates the
current translation block into LLVM IR and switches to KLEE.
When there is no longer any symbolic data in any registers,
it will switch back to the DBT engine. When encountering
a branch whose target is determined by a symbol, S2E forks
a new execution state. S2E explores each execution state in-
dependently. To achieve this goal, S2E maintains dedicated
memory to store the hardware state for each state.
2.3 Terminology
Branch. A branch instruction is the last instruction in a ba-
sic block. It causes the program to deviate from its default
behavior of executing instructions in order.
Branch Target. Depending on whether a branch is taken or
not, there are typically two branch targets to be executed
following the branch instruction. In this paper, we mainly
consider conditional branches in which one or more peripheral
readings decide which branch target to follow.
Conditional Registers. At each branch, one or more periph-
eral registers decide the branch target. We call these registers
as conditional registers.
Execution Path/Trace. An execution path/trace refers to a
dynamic ﬂow in the control-ﬂow graph of the program. It
starts from the program entry point and ends at an exit point.
In a ﬁrmware image, two different execution paths/traces are
created when the execution faces a branch which is deter-
mined by a peripheral reading. In this paper, we use path and
trace interchangeably to refer to the dynamic control ﬂow of
the ﬁrmware.
Execution State. An execution state is a break point in an
execution path. It contains a program’s memory, registers,
peripheral states, etc. S2E switches among execution states
to explore the program. When the ﬁrmware exits, the current
execution state corresponds to a unique execution path.
Invalid Execution State. An invalid execution state disrupts
normal ﬁrmware execution, including crashing or stalling
ﬁrmware execution, and skipping designed operations. At the