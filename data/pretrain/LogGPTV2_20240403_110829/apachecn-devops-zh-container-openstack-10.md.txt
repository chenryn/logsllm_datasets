# 十、容器和 OpenStack 的最佳实践
在本章中，我们将重点介绍在 OpenStack 上运行容器的优势，以及在 OpenStack 上部署和保护容器的最佳实践。具体来说，我们将关注以下主题:
*   不同 OpenStack 项目的优势
*   保护和部署容器的最佳实践
# 不同 OpenStack 项目的优势
OpenStack 提供了容器平台和应用可以使用的资源和服务。它提供了构建可扩展云的标准。它还提供共享网络、存储和许多其他高级服务。它有可编程的应用编程接口，可用于按需创建基础设施。用户可以为他们的容器相关工作负载使用不同的 OpenStack 服务。
用户可以使用 Magnum 来调配和管理他们的 COE。Magnum 提供了多租户功能，这意味着一个 COE 集群只属于一个租户。这实现了容器隔离，属于不同租户的容器不会安排在相同的主机上。Magnum 内置了对 Kubernetes、Swarm 和 Mesos 的支持。Magnum 还提供 TLS 支持，以确保集群服务和外部世界之间的通信安全。
用户可以使用 Zun 将他们的容器工作负载直接部署到 OpenStack，而无需使用 COe。Zun 提供完整的容器生命周期管理支持。它还通过 Kuryr 提供 Docker 网络支持。这意味着用户可以将中子网络用于他们的容器和虚拟机工作负载，并在其中相互访问。Zun 还为容器中的持久存储提供了 OpenStack 煤渣支持。Zun 具有内置的多租户功能和使用 KeyStone 的身份验证支持。
OpenStack Kolla 提供了在容器内部部署 OpenStack 服务的支持。它产生了新的、快速的、可靠的和可组合的构件。Kolla 通过将每个服务打包成 Docker 容器中的一个微服务来简化部署和日常操作。用户可以使用 Kolla 在 Docker 容器或 Kubernetes pods 中部署 OpenStack 服务。
为了在 OpenStack 上部署他们的容器化应用，用户可以使用 Murano。Murano 将创建用于部署的基础设施，并在其上部署容器化的应用。
# 保护和部署容器的最佳实践
由于容器的模块化和服务器之间的可移植性，它们正在取代虚拟机来运行大多数企业软件。然而，容器也有一些风险。一个明显的风险与通过将容器克隆为映像来分发容器有关。如果基础映像中存在任何未修补的漏洞，从基础映像继承的所有克隆和应用也会受到影响。
第二个也是最大的风险是容器系统的默认用户，也就是根用户。如果攻击者获得了对根用户的访问权限，这允许他逃离容器，那么他不仅可以访问其他容器内部，还可以访问主机操作系统中的根权限。这可能是毁灭性的！
以下是保护和部署容器的一些最佳实践:
*   用户应该始终使用轻量级的 Linux 操作系统。一个轻量级的操作系统，减少了被攻击的机会。这也使得应用更新变得更加容易。
*   用户应该保持所有容器映像的更新。保持所有映像的更新可以确保它们没有最新的漏洞。始终通过版本控制和标记将您的映像保存在集中的存储库中。
*   用户应该自动执行所有安全更新。这可确保补丁程序快速应用于您的基础架构。
*   用户应该总是扫描他们的容器映像，寻找潜在的缺陷。有许多扫描工具，如 CoreOS 的克莱尔、Dockscan 和 Twistlock，它们将容器清单与已知漏洞列表进行比较，并在检测到任何漏洞时向您发出警报。
*   用户不应该在容器中运行无关的面向网络的服务。
*   用户应该避免在容器内装载主机目录，因为这可能会让用户访问容器内主机上的一些敏感数据。
*   用户应该始终定义容器资源消耗的限制。这将有助于避免消耗主机上的所有资源并使其他容器挨饿。
*   用户应该保护他们的 Docker 主机，他们不应该向其他用户提供敏感信息，如根用户的凭据。
*   用户应该使用 TLS 运行他们的 Docker 注册表。只有有效用户才能将映像拖放到注册表中。
*   用户应该始终监控容器的异常行为。
*   用户可以使用透明容器或开源 Hyper 来提高安全性，因为它们提供了更多的隔离。
# 摘要
在本书中，我们遇到了 OpenStack 中几个与容器相关的项目及其关键特性。在本章中，我们总结了书中解释的所有项目在运行容器工作负载方面的优势。我们还解释了容器中的不同安全问题以及解决这些问题的最佳实践。