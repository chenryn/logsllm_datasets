examined a two-month period for each list, starting on November
22, 2013. In each post, we looked for the description of the ini-
tial symptoms and classiﬁed them as either positive (something bad
happened) or negative (something good failed to happen).
Table 1 shows our results. While the proportion of positive and
negative symptoms varies somewhat between lists, we ﬁnd that
the negative symptoms are consistently in the majority – that is,
it seems more common for problems to initially manifest as the ab-
sence of something (e.g., a route, or a response to a probe packet)
than as the presence of something (e.g., high latencies on a path, or
a DDoS attack).
Many of the problems we surveyed were eventually diagnosed,
but we observe that the process seems comparatively harder: there
were signiﬁcantly more (and lengthier) email threads where nega-
tive symptoms resulted in inconclusive identiﬁcation of root causes.
Moreover, troubleshooting negative symptoms often required ex-
ploratory “guesswork” by the mailing list participants. Since this
trial-and-error approach requires lots of time and effort, it seems
useful to develop better tool support for this class of problems.
2.5 Negative provenance
Our approach towards such a tool is to extend provenance to nega-
tive events. Although these cannot be explained directly with pos-
itive provenance, there is a way to construct a similar “backtrace”
for negative events: instead of explaining how an actual event did
occur, as with positive provenance, we can simply ﬁnd all the ways
in which a missing event could have occurred, and then show, as a
“root cause”, the reason why each of them did not come to pass.
Intuitively, we can use a kind of counterfactual reasoning to re-
cursively generate the explanations, not unlike positive provenance:
for a web request to arrive at the web server, a request would have
had to appear at the rightmost switch (S3), which did not happen.
Such a request could only have come from the switch in the mid-
dle (S2), and, eventually, from the switch on the left (S1). But S2
would only have sent the request if there had been 1) an actual re-
quest, 2) a matching ﬂow entry with a forward action to S3, and 3)
no matching higher-priority ﬂow entry. Conditions 1) and 2) were
satisﬁed, but condition 3) was not (because of the DNS server’s
ﬂow entry). We can then ask where the higher-priority ﬂow entry
came from, which can be answered with positive provenance. We
refer to such a counterfactual explanation as negative provenance.
2.6 Challenges
To explain the key challenges, we consider two strawman solutions.
First, it may seem that there is a simpler way to investigate the miss-
ing HTTP requests from Section 2.3: why not simply compare the
system state before and after the requests stopped arriving, and re-
turn any differences as the likely cause? This approach may indeed
work in some cases, but in general, there are way too many changes
happening in a typical system: even if we could precisely pinpoint
the time where the problem appeared, chances are that most of the
state changes at that time would be unrelated. Moreover, if the
problem was caused by a chain of events, this method would re-
turn only the last step in the chain. To identify the relevant events
reliably, and to trace them back to the root cause, we must have a
way to track causality, which is, in essence, what provenance rep-
resents.
Second, it may seem that, in order to track negative provenance,
we can simply take an existing provenance system, like ExSPAN
or SNP, and associate each positive provenance vertex with a nega-
tive “twin”. However, the apparent similarity between positive and
negative provenance does not go very deep. While positive prove-
nance considers only one speciﬁc chain of events that led to an ob-
served event, negative provenance must consider all possible chains
of events that could have caused the observed event. This disparity
between existential and universal quantiﬁers has profound conse-
quences: for instance, negative provenance graphs are often inﬁnite
and cannot be materialized, and responses to negative queries tend
to be a lot more complex, and thus need more sophisticated post-
processing before they can be shown to a human user. These are
some of the challenges we address in Y!.
3. BASIC NEGATIVE PROVENANCE
In this section, we show how to derive a simple provenance graph
for both positive and negative events. For ease of exposition, we
will assume that the distributed system is written in Network Data-
log (NDlog) [16], since this representation makes provenance par-
ticularly easy to see. However, our approach is not speciﬁc to ND-
log, or even to declarative languages; indeed, our case studies in
Section 6.1 apply it to Pyretic [21], an existing imperative program-
ming language for SDNs, as well as to BGP debugging.
3.1 Background: Network Datalog
We begin by brieﬂy reviewing the features of NDlog that are rel-
evant here. In NDlog, the state of a node (switch, controller, or
server) is modeled as a set of tables. Each table contains a number
of tuples. For instance, an SDN switch might contain a table called
flowTable, and each tuple in this table might represent a ﬂow
entry, or a SDN controller might have a table called packetIn
that contains the packets it has received from the switches. Tuples
can be manually inserted, or they can be programmatically derived
from other tuples; the former are called base tuples, and the latter
are referred to as derived tuples.
For instance,
NDlog programs consist of rules that describe how tu-
ples should be derived from each other.
the
rule A(@X,P):-B(@X,Q),Q=2*P says that a tuple A(@X,P)
should be derived on node X whenever there is also a B(@X,Q)
tuple on that node, and Q=2*P. Here, P and Q are variables that
must be instantiated with values when the rule is applied; for in-
stance, a B(@X,10) tuple would create an A(@X,5) tuple. The
@ operator speciﬁes the node on which the tuple resides. (NDlog
supports other operators – e.g., arithmetic or aggregation operators
– as well as user-deﬁned functions, but we do not consider these
here.) A key advantage of a declarative formulation is that causal-
ity is very easy to see: if a tuple A(@X,5) was derived using the
rule above, then A(@X,5) exists simply because B(@X,10) ex-
ists, and because 10=2*5.
Rules may include tuples from different nodes; for instance,
C(@X,P):- C(@Y,P) says that tuples in the C-table on node
Y should be sent to node X and inserted into the C-table there.
We write +τ to denote a message saying that the recipient should
insert a tuple τ, and −τ to denote a message saying that the recip-
ient should remove τ. To avoid redundancy, we write ±τ when a
statement applies to both types of messages. When a tuple can be
derived in more than one way, +τ is only sent when the ﬁrst deriva-
tion appears, and −τ only when the last derivation disappears.
3
3.2 Goals
Before we deﬁne our provenance graph, we ﬁrst state, somewhat
informally, the properties we would like to achieve. One way to
describe what “actually happened” in an execution of the system is
by means of a trace: a sequence of message transmissions and ar-
rivals, as well as base tuple insertions and deletions. (Other events,
such as derivations, follow deterministically from these.) Follow-
ing [36], we can then think of the provenance G(e,E) of an event e
in a trace E as describing a series of trace properties, which, in
combination, cause e to appear – or, in the case of a negative event,
prevent e from appearing. We demand the following properties:
• Soundness: G(e,E) must be consistent with E;
• Completeness: There must not be another execution E(cid:48)
that is also consistent with G(e,E) but does not contain the
event e; and
• Minimality: There must not be a subset of G(e,E) that is
also sound and complete.
Informally, soundness means that G(e,E) must describe events that
actually happened in E – we cannot explain the absence of a tu-
ple with the presence of a message that was never actually sent.
Completeness means that G(e,E) must be sufﬁcient to explain e,
and minimality means that all events in G(e,E) must actually be
relevant (though there could be more than one provenance that is
minimal in this sense). We will state these properties formally in
Section 3.8.
3.3 The provenance graph
Provenance can be represented as a DAG in which the vertices are
events and the edges indicate direct causal relationships. Thanks to
NDlog’s simplicity, it is possible to deﬁne a very simple provenance
graph for it, with only ten types of event vertices (based on [35]):
• EXIST([t1, t2], N, τ ): Tuple τ existed on node N from time
t1 to t2;
• INSERT(t, N, τ ), DELETE(t, N, τ ): Base tuple τ was in-
serted (deleted) on node N at time t;
• DERIVE(t, N, τ ), UNDERIVE(t, N, τ ): Derived tuple τ
acquired (lost) support on N at time t;
• APPEAR(t, N, τ ), DISAPPEAR(t, N, τ ): Tuple τ ap-
peared or disappeared on node N at time t;
• SEND(t, N → N(cid:48),±τ ), RECEIVE(t, N ← N(cid:48),±τ ): ±τ
was sent (received) by node N to/from N(cid:48) at t; and
• DELAY(t, N → N(cid:48),±τ, d): ±τ, sent from node N to N(cid:48)
at time t, took time d to arrive.
The edges between the vertices correspond to their intuitive causal
connections: tuples can appear on a node because they a) were in-
serted as base tuples, b) were derived from other tuples, or c) were
received in a message from another node (for cross-node rules).
Messages are received because they were sent, and tuples exist be-
cause they appeared. Note that vertices are annotated with the node
on which they occur, as well as with the relevant time; the latter
will be important for negative provenance because we will often
need to reason about past events.
This model can be extended to support negative provenance by
associating each vertex with a negative “twin” [32]:
• NEXIST([t1, t2], N, τ ): Tuple τ never existed on node N
in time interval [t1, t2];
4
• NINSERT([t1, t2], N, τ ), NDELETE([t1, t2], N, τ ): Tu-
ple τ was never inserted (removed) on N in [t1, t2];
• NDERIVE([t1, t2], N, τ ), NUNDERIVE([t1, t2], N, τ ):
τ was never derived (underived) on N in [t1, t2];
• NAPPEAR([t1,t2],N, τ ), NDISAPPEAR([t1,t2],N, τ ):
Tuple τ never (dis)appeared on N in [t1, t2];
• NSEND([t1, t2], N, τ ), NRECEIVE([t1, t2], N, τ ): τ was
never sent (received) by node N in [t1, t2]; and
• NARRIVE([t1, t2], N1 → N2, t3, τ ): τ was sent from N1
to N2 at t3 but did not arrive within [t1, t2].
Again, the causal connections are the intuitive ones: tuples never
existed because they never appeared, they never appeared because
they were never inserted, derived, or received, etc. However, note
that, unlike their positive counterparts, all negative vertices are an-
notated with time intervals: unlike positive provenance, which can
refer to speciﬁc events at speciﬁc times, negative provenance must
explain the absence of events in certain intervals.
3.4 Handling multiple explanations
Sometimes the absence of an event can have more than one cause.
For instance, suppose there is a rule A:-B,C,D and, at some time
t, none of the tuples B, C, or D exist. How should we explain the ab-
sence of A in this case? One possible approach would be to include
the absence of all three tuples; this would be useful, for instance,
if our goal was recovery – i.e., if we wanted to ﬁnd a way make A
appear. However, for diagnostic purposes, the resulting provenance
is somewhat verbose, since the absence of each individual tuple is
already sufﬁcient to explain the absence of A. For this reason, we
opt to include only a sufﬁcient reason in our provenance trees.
In cases where there is more than one sufﬁcient reason, the ques-
tion arises which one we should choose. Since we aim for compact
provenance trees, we try to ﬁnd the reason that can be explained
with the fewest vertices. For instance, if B and D are derived tuples
whose absence is due to a complex sequence of events on several
other nodes, whereas C is a base tuple that simply was never in-
serted, we would choose the explanation that is based on C, which
only requires a single NINSERT vertex. In practice, it is not al-
ways easy to see which explanation is simplest (at least not without
fully expanding the corresponding subtree), but we can use heuris-
tics to ﬁnd a good approximation, e.g., based on a look-ahead of a
few levels down the tree.
3.5 Graph construction
Provenance systems like ExSPAN [37] rely on a materialized
provenance graph: while the distributed system is executing, they
build some representation of the vertices and edges in the graph,
and they respond to queries by projecting out the relevant sub-
tree. This approach does not work for negative provenance because
the provenance graph is typically inﬁnite: for instance, it contains
NEXIST vertices for every tuple that could potentially exist, and,
for each vertex with that contains a time interval I, it also contains
vertices with intervals I(cid:48) ⊆ I.
For this reason, we adopt a top-down procedure for construct-
ing the provenance of a given (positive or negative) event “on de-
mand”, without materializing the entire graph. We deﬁne a func-
tion QUERY(v) that, when called on a vertex v in the provenance
graph, returns the immediate children of v. Thus, the provenance
of a negative event e can be found by constructing a vertex ve that
describes e (e.g., a NEXIST vertex for an absent tuple) and then
calling QUERY recursively on ve until leaf vertices are reached. The
function QUERY(EXIST([t1, t2],N,τ))
S ← ∅