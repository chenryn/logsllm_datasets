 双层for循环完成遍历
 for-range方式完成遍历
案例演示：
8.12 二维数组的应用案例
 要求如下：
定义二维数组，用于保存三个班，每个班五名同学成绩，
并求出每个班级平均分、以及所有班级平均分
 代码
第 章
9 map
9.1 map 的基本介绍
map是key-value 数据结构，又称为字段或者关联数组。类似其它编程语言的集合，
在编程中是经常使用到
9.2 map 的声明
9.2.1基本语法
varmap 变量名 map[keytype]valuetype
 key 可以是什么类型
golang中的map，的 key 可以是很多种类型，比如 bool, 数字，string, 指针,channel , 还可以是只
包含前面几个类型的 接口, 结构体, 数组
通常key 为 int 、string
注意:slice， map 还有 function 不可以，因为这几个没法用 == 来判断
 valuetype 可以是什么类型
valuetype的类型和key 基本一样，这里我就不再赘述了
通常为: 数字(整数,浮点数),string,map,struct
9.2.2map 声明的举例
 map声明的举例：
varamap[string]string
varamap[string]int
varamap[int]string
varamap[string]map[string]string
注意：声明是不会分配内存的，初始化需要make ，分配内存后才能赋值和使用。
案例演示：
 对上面代码的说明
1) map 在使用前一定要make
2) map 的key 是不能重复，如果重复了，则以最后这个key-value为准
3) map 的value是可以相同的.
4) map 的 key-value 是无序
5) make内置函数数目
9.3 map 的使用
 方式1
 方式2
 方式3
 map使用的课堂案例
课堂练习：演示一个key-value 的value是map 的案例
比如：我们要存放3个学生信息, 每个学生有 name和sex 信息
思路: map[string]map[string]string
代码：
9.4 map 的增删改查操作
 map增加和更新：
map["key"] = value//如果 key 还没有，就是增加，如果 key 存在就是修改。
 map删除：
说明：
delete(map，"key") ，delete 是一个内置函数，如果key 存在，就删除该key-value,如果key 不存在，
不操作，但是也不会报错
案例演示：
 细节说明
如果我们要删除map的所有key ,没有一个专门的方法一次删除，可以遍历一下key, 逐个删除
或者 map=make(...)，make 一个新的，让原来的成为垃圾，被gc 回收
 map查找：
案例演示：
对上面代码的说明:
说明：如果heroes 这个map 中存在 "no1" ， 那么findRes 就会返回true,否则返回false
9.5 map 遍历：
案例演示相对复杂的map遍历：该 map 的value 又是一个map
说明：map的遍历使用for-range的结构遍历
 案例演示：
 map的长度：
9.6 map 切片
9.6.1基本介绍
切片的数据类型如果是 map，则我们称为 slice ofmap，map 切片，这样使用则 map 个数就可以动
态变化了。
9.6.2案例演示
要求：使用一个 map 来记录 monster的信息 name 和 age, 也就是说一个monster对应一个 map,并
且妖怪的个数可以动态的增加=>map 切片
代码:
9.7 map 排序
9.7.1基本介绍
1) golang 中没有一个专门的方法针对map的key 进行排序
2) golang 中的 map 默认是无序的，注意也不是按照添加的顺序存放的，你每次遍历，得到的输出
可能不一样. 【案例演示1】
3) golang 中map的排序，是先将key 进行排序，然后根据key 值遍历输出即可
9.7.2案例演示
9.8 map 使用细节
1) map 是引用类型，遵守引用类型传递的机制，在一个函数接收 map，修改后，会直接修改原来
的map 【案例演示】
2) map 的容量达到后，再想 map 增加元素，会自动扩容，并不会发生 panic，也就是说 map 能动
态的增长 键值对(key-value)
3) map 的value 也经常使用 struct 类型，更适合管理复杂的数据(比前面 value 是一个 map 更好)，
比如value为 Student 结构体 【案例演示，因为还没有学结构体，体验一下即可】
9.9 map 的课堂练习题
 课堂练习:
1) 使用 map[string]map[string]sting 的map类型
2) key: 表示用户名，是唯一的，不可以重复
3) 如果某个用户名存在，就将其密码修改"888888"，如果不存在就增加这个用户信息,（包括昵称
nickname 和 密码pwd）。
4) 编写一个函数 modifyUser(users map[string]map[string]sting, name string) 完成上述功能
 代码实现
package main
import(
"fmt"
)
/*
1)使用 map[string]map[string]sting 的map 类型
2)key: 表示用户名，是唯一的，不可以重复
3)如果某个用户名存在，就将其密码修改"888888"，如果不存在就增加这个用户信息,
（包括昵称nickname 和 密码pwd）。
4)编写一个函数 modifyUser(users map[string]map[string]sting, name string) 完成上述功能
*/
funcmodifyUser(users map[string]map[string]string, namestring) {
//判断users 中是否有name
//v,ok :=users[name]
ifusers[name]!= nil {
//有这个用户
users[name]["pwd"] ="888888"
} else{
//没有这个用户
users[name]= make(map[string]string, 2)
users[name]["pwd"] ="888888"
users[name]["nickname"]="昵称~" + name//示意
}
}
funcmain() {
users :=make(map[string]map[string]string, 10)
users["smith"] =make(map[string]string, 2)
users["smith"]["pwd"]="999999"
users["smith"]["nickname"] ="小花猫"
modifyUser(users, "tom")
modifyUser(users, "mary")
modifyUser(users, "smith")
fmt.Println(users)
}
第 章面向对象编程 上
10 ( )
10.1 结构体
10.1.1 看一个问题
10.1.2 使用现有技术解决
1) 单独的定义变量解决
代码演示：
2) 使用数组解决
代码演示：
10.1.3 现有技术解决的缺点分析
1) 使用变量或者数组来解决养猫的问题，不利于数据的管理和维护。因为名字，年龄，颜色都是
属于一只猫，但是这里是分开保存。
2) 如果我们希望对一只猫的属性（名字、年龄，颜色）进行操作(绑定方法)， 也不好处理。
3) 引出我们要讲解的技术-》结构体。
10.1.4 一个程序就是一个世界，有很多对象(变量)
10.1.5 Golang 语言面向对象编程说明
1) Golang 也支持面向对象编程(OOP)，但是和传统的面向对象编程有区别，并不是纯粹的面向对
象语言。所以我们说Golang 支持面向对象编程特性是比较准确的。
2) Golang 没有类(class)，Go 语言的结构体(struct)和其它编程语言的类(class)有同等的地位，你可
以理解Golang 是基于struct 来实现OOP 特性的。
3) Golang 面向对象编程非常简洁，去掉了传统 OOP 语言的继承、方法重载、构造函数和析构函
数、隐藏的this指针等等
4) Golang 仍然有面向对象编程的继承，封装和多态的特性，只是实现的方式和其它 OOP 语言不
一样，比如继承 ：Golang 没有extends 关键字，继承是通过匿名字段来实现。
5) Golang 面向对象(OOP)很优雅，OOP 本身就是语言类型系统(type system)的一部分，通过接口
(interface)关联，耦合性低，也非常灵活。后面同学们会充分体会到这个特点。也就是说在Golang 中面
向接口编程是非常重要的特性。
10.1.6 结构体与结构体变量(实例/对象)的关系示意图
 对上图的说明
1) 将一类事物的特性提取出来(比如猫类)， 形成一个新的数据类型， 就是一个结构体。
2) 通过这个结构体，我们可以创建多个变量(实例/对象)
3) 事物可以猫类，也可以是Person ， Fish 或是某个工具类。。。
10.1.7 快速入门-面向对象的方式(struct)解决养猫问题
 代码演示
10.1.8 结构体和结构体变量(实例)的区别和联系
通过上面的案例和讲解我们可以看出:
1) 结构体是自定义的数据类型，代表一类事物.
2) 结构体变量(实例)是具体的，实际的，代表一个具体变量
10.1.9 结构体变量(实例)在内存的布局(重要!)
10.1.10 如何声明结构体
 基本语法
type 结构体名称 struct {
field1 type
field2 type
}
 举例:
type Studentstruct {
Name string//字段
Ageint //字段
Scorefloat32
}
10.1.11 字段/属性
 基本介绍
1) 从概念或叫法上看： 结构体字段 = 属性 =field （即授课中，统一叫字段)
2) 字段是结构体的一个组成部分，一般是基本数据类型、数组,也可是引用类型。比如我们前面定
义猫结构体 的 Name string 就是属性
 注意事项和细节说明
1) 字段声明语法同变量，示例：字段名 字段类型
2) 字段的类型可以为：基本类型、数组或引用类型
3) 在创建一个结构体变量后，如果没有给字段赋值，都对应一个零值(默认值)，规则同前面讲的
一样:
布尔类型是 false ，数值是 0 ，字符串是 ""。
数组类型的默认值和它的元素类型相关，比如 score [3]int 则为[0,0,0]
指针，slice，和 map 的零值都是 nil ，即还没有分配空间。
案例演示：
4) 不同结构体变量的字段是独立，互不影响，一个结构体变量字段的更改，不影响另外一个, 结构体
是值类型。
案例：
画出上面代码的内存示意图：
10.1.12 创建结构体变量和访问结构体字段
 方式1-直接声明
案例演示:var person Person
前面我们已经说了。
 方式2-{}
案例演示:var person Person =Person{}
 方式3-&
案例:var person *Person =new (Person)
 方式4-{}
案例:var person *Person =&Person{}
 说明:
1) 第3种和第4种方式返回的是 结构体指针。
2) 结构体指针访问字段的标准方式应该是：(*结构体指针).字段名 ，比如 (*person).Name ="tom"
3) 但go 做了一个简化，也支持 结构体指针.字段名, 比如 person.Name ="tom"。更加符合程序员
使用的习惯，go编译器底层 对 person.Name 做了转化 (*person).Name。
10.1.13 struct 类型的内存分配机制
 看一个思考题
输出的结果是: p2.Name =tom p1.Name= 小明
 基本说明
 结构体在内存中示意图
 看下面代码，并分析原因
输出的结果是：
上面代码对应的内存图的分析：
 看下面代码，并分析原因
10.1.14 结构体使用注意事项和细节
1) 结构体的所有字段在内存中是连续的
对应的分析图:
2) 结构体是用户单独定义的类型，和其它类型进行转换时需要有完全相同的字段(名字、个数和类
型)
3) 结构体进行type 重新定义(相当于取别名)，Golang 认为是新的数据类型，但是相互间可以强转
4) struct 的每个字段上，可以写上一个tag, 该tag 可以通过反射机制获取，常见的使用场景就是序
列化和反序列化。
 序列化的使用场景:
 举例:
10.2 方法
10.2.1 基本介绍
在某些情况下，我们要需要声明(定义)方法。比如 Person 结构体:除了有一些字段外( 年龄，姓
名..),Person 结构体还有一些行为比如:可以说话、跑步..,通过学习，还可以做算术题。这时就要用方法
才能完成。
Golang 中的方法是作用在指定的数据类型上的(即：和指定的数据类型绑定)，因此自定义类型，
都可以有方法，而不仅仅是struct。
10.2.2 方法的声明和调用
typeAstruct {
Num int
}
func(aA) test() {
fmt.Println(a.Num)
}
 对上面的语法的说明
1) func(aA) test() {} 表示 A结构体有一方法，方法名为 test
2) (aA) 体现 test 方法是和 A类型绑定的
 举例说明
 对上面的总结
1) test方法和Person 类型绑定
2) test 方法只能通过 Person 类型的变量来调用，而不能直接调用，也不能使用其它类型变量来调
用
3) func(pPerson)test() {}... p 表示哪个 Person 变量调用，这个p就是它的副本, 这点和函数传参非
常相似。
4) p 这个名字，有程序员指定，不是固定, 比如修改成person 也是可以
10.2.3 方法快速入门
1) 给Person 结构体添加speak 方法,输出 xxx是一个好人
2) 给Person 结构体添加jisuan 方法,可以计算从 1+..+1000 的结果, 说明方法体内可以函数一样，
进行各种运算
3) 给Person 结构体jisuan2 方法,该方法可以接收一个数n，计算从 1+..+n 的结果
4) 给Person 结构体添加getSum方法,可以计算两个数的和，并返回结果
5) 方法的调用
10.2.4 方法的调用和传参机制原理：(重要！)
 说明：
方法的调用和传参机制和函数基本一样，不一样的地方是方法调用时，会将调用方法的变量，当做
实参也传递给方法。下面我们举例说明。
 案例1：
画出前面getSum方法的执行过程+说明
说明:
1) 在通过一个变量去调用方法时，其调用机制和函数一样
2) 不一样的地方时，变量调用方法时，该变量本身也会作为一个参数传递到方法(如果变量是值类
型，则进行值拷贝，如果变量是引用类型，则进行地质拷贝)
 案例2
请编写一个程序，要求如下：
1) 声明一个结构体Circle, 字段为 radius
2) 声明一个方法area 和Circle绑定，可以返回面积。
3) 提示：画出area 执行过程+说明
10.2.5 方法的声明(定义)
func(recevier type) methodName（参数列表） (返回值列表){
方法体
return 返回值
}
1) 参数列表：表示方法输入
2) receviertype : 表示这个方法和type 这个类型进行绑定，或者说该方法作用于type 类型
3) receivertype : type 可以是结构体，也可以其它的自定义类型
4) receiver: 就是type 类型的一个变量(实例)，比如 ：Person 结构体 的一个变量(实例)
5) 返回值列表：表示返回的值，可以多个