suicide ( _to );
else {
pending . yetNeeded - -;
pending . ownersDone |= ownerIndexBit ;
}
}
}
Figure 2: Simplified fragment of ParityWalletLibrary contract,
which can be killed.
The above contract requires a single function invocation to leak
its Ether. However, there are examples of contracts which need two
or more invocations (calls with specific arguments) to cause a leak.
Such examples are presented in Section 5.
Suicidal Contracts. A contract often enables a security fallback
option of being killed by its owner (or trusted addresses) in emer-
gency situations like when being drained of its Ether due to attacks,
or when malfunctioning. However, if a contract can be killed by
any arbitrary account, we consider it vulnerable and call it suicidal.
The recent Parity fiasco[1] is a concrete example of such type
of a contract. A supposedly innocent Ethereum account [34] killed
a library contract on which the main Parity contract relies, thus
rendering the latter non-functional and locking all its Ether. To
understand the suicidal side of the library contract, focus on its
shortened code fragment given in Figure 2. To kill the contract, an
arbitrary account invokes two different contract functions: one to
set the ownership,2 and one to actually kill it. That is, the account
first calls initMultiowned, providing empty array for _owners, and
zero for _required. (This effectively means that the contract has no
owners and that nobody has to agree to execute a specific contract
function.) Then the account invokes the contract function kill.
This function needs _required number of owners to agree to kill the
contract, before the actual suicide command at line 22 is executed.
However, since in the previous call to initMultiowned, the value of
_required was set to zero, suicide is executed, and thus the contract
is killed.
2The bug would have been prevented has the function initMultiowned been properly
initialized by the authors.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
contract AddressReg {
address public owner ;
mapping ( address => bool ) isVerifiedMap ;
function setOwner ( address _owner ){
if ( msg . sender == owner )
owner = _owner ;
}
function AddressReg () { owner = msg . sender ; }
function verify ( address addr ){
if ( msg . sender == owner )
isVerifiedMap [ addr ] = true ;
}
function deverify ( address addr ){
if ( msg . sender == owner )
isVerifiedMap [ addr ] = false ;
}
function hasPhysicalAddress ( address addr )
constant returns ( bool ){
return isVerifiedMap [ addr ];
}
}
Figure 3: AddressReg contract locks Ether.
Greedy Contracts. We refer to contracts that remain alive and
lock Ether indefinitely, allowing it be released under no condi-
tions, as greedy. In the example of the Parity contract, many other
multisigWallet-like contracts which held Ether, used functions
from the Parity library contract to release funds to their users. Af-
ter the Parity library contracts was killed, the wallet contracts could
no longer access the library, thus became greedy. This vulnerability
resulted in locking of $200M US worth of Ether indefinitely!
Greedy contracts can arise out of more direct errors as well.
The most common such errors occur in contracts that accept Ether
but either completely lack instructions that send Ether out (e.g.
bytecode instructions corresponding to send, call, transfer), or
such instructions are not reachable. An example of contract that
lacks instructions that release Ether, that has already locked Ether
is given in Figure 3.
Posthumous Contracts. When a contract is killed, its code and
global variables are cleared from the blockchain, thus preventing
any further execution of its code. However, all killed contracts
continue to receive transactions. Although such transactions can
no longer invoke the code of the contract, if Ether is sent along
them, it is added to the contract balance, and similarly to the above
case, it is locked indefinitely. Killed contract or contracts that do
not contain any code, but have non-zero Ether we call posthumous.
It is the onus of the sender to check if the contract is alive before
sending Ether, and evidence shows that this is not always the case.
Because posthumous contracts require no further static analysis
beyond that for identifying suicidal contracts, we do not treat this
as a separate class of bugs. We merely list all posthumous contracts
on the live Ethereum blockchain we have found in Section 5.
2.3 Our Approach
Each run of the contract, called an invocation, may exercise an
execution path in the contract code under a given input context.
Note that prior works have considered bugs that are properties of
one invocation, ignoring the chain of effects across a trace of invo-
cations [7, 26, 27, 30, 31, 39]. We develop a tool that uses systematic
655ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nikoli´c et al.
regarded as safety, meaning that “during the execution nothing
bad happens”. The second category is related to contracts where
proving the absence of some other high-level bugs requires estab-
lishing a statement of a different kind, namely, “something good
must eventually happen”. Such properties are known as liveness
and require reasoning about progress in executions.
In this section, we introduce the execution model of Ethereum
smart contracts and define the three types of bugs.
3.1 EVM Semantics and Traces
In Ethereum, a smart contract is identified by its 160-bit address.
For each contract, the blockchain stores its three distinguished
fields: balance represents the amount of Ether in possession, code
specifies the program logic of the contract in bytecode, and storage
is allocated to save global variables of the program.
The code field is immutable3 – once a contract is deployed on
the blockchain its logic cannot be updated. Its bytecode is run
on Ethereum Virtual Machine (EVM), a stack-based execution run-
time [43]. Different source languages compile to the EVM semantics,
the predominant of them being Solidity [42]. A run of the code,
i.e., invocation of the smart contract, is triggered by initiating a
transaction (a call) with a message to a contract, referred to via its
address, so the message’s payload includes input arguments for the
contract’s call and a fee (known as gas) [43]. The mining network
executes replicated instances of the contract code and agrees on the
outputs of the invocation via the standard blockchain consensus
protocol, i.e., Nakamoto consensus [32, 36]. The result of the com-
putation is replicated via the blockchain and grants a transaction
fee to the miners as per block reward rates established periodically.
Contracts can invoke other contracts via message calls usually im-
plemented as the bytecode instruction CALL; outputs of these calls,
considered to be a part of the same transaction, are returned to
the caller during the runtime. The invoked contracts can find their
CALLER, i.e., they have access to the account (contract) that sends
the transaction (message call), and CALLVALUE, i.e., the amount of
sent Ether.
During the execution of the bytecode, the EVM may change
the contract storage, i.e., the values of the global variables used in
the bytecode. If the execution successfully completes, the updated
storage is written to the blockchain. Thus the field storage is muta-
ble; its value can change according to properly executed bytecode
instructions. The execution of a bytecode is proper, if it reaches
the instructions STOP or RETURN. On the other hand, the execution
may "throw" if it reaches a non-existing instruction code or invalid
jump destination. In such a case, it terminates and all the global
updates are reverted.
The balance of a contract can be read by anyone, but it is updated
via calls to and from other contracts (i.e., by executing the CALL
instruction) or via transactions send to the contract. Contracts
live perpetually unless they are explicitly terminated (or killed)
by executing the SUICIDE bytecode instruction, which clears their
storage and code fields from the blockchain, and sends their balance
to an account specified as a parameter of the instruction.
When alive, contracts can be invoked many times. Further we
consider contract invocations via transactions, i.e., an externally
3The code field may change only if a contract is killed – see further.
Figure 4: Maian
techniques to find contracts that violate specific properties of traces.
The violations are either:
(a) of safety properties, asserting that there exists a trace from a
specified blockchain state that causes the contract to violate
certain conditions; and
(b) of liveness properties, asserting whether some actions cannot
be taken in any execution starting from a specified blockchain
state.
We formulate the three kinds of vulnerable contracts as these safety
and liveness trace properties in Section 3. Our technique of finding
vulnerabilities, implemented as a tool called Maian and described
in Section 4, consists of two major components: symbolic analysis
and concrete validation. The symbolic analysis component takes
contract bytecode and analysis specifications as inputs. The specifi-
cations include vulnerability category to search for and depth of the
search space, which further we refer to as invocation depth, along
with a few other analysis parameters we outline in Section 4. To
develop our symbolic analysis component, we implement a custom
Ethereum Virtual Machine, which facilitates symbolic execution
of contract bytecode [33]. With every contract candidate, our com-
ponent runs possible execution traces symbolically, until it finds a
trace which satisfies a set of predetermined properties. The input
context to every execution trace is a set of symbolic variables. Once
a contract is flagged, the component returns concrete values for
these variables. Our final step is to run the contract concretely and
validate the result for true positives; this step is implemented by our
concrete validation component. The component takes the inputs
generated by symbolic analysis component and checks the exploit
of the contract on a private fork of Ethereum blockchain. Essen-
tially, it is a testbed environment used to confirm the correctness of
the bugs. As a result, at the end of validation the candidate contract
is determined as true or false positive, but the contract state on
main blockchain is not affected since no changes are committed to
the official Ethereum blockchain.
3 TRACE VULNERABILITIES
We consider three types of bugs in smart contracts which are ex-
ploitable via execution traces and which belong to two standard
categories. The first category regards a contract buggy with respect
to a certain class of unwelcome high-level scenarios (e.g., “leaking”
funds) if some of its finite execution traces fail to satisfy a certain
condition. Trace properties characterised this way are traditionally
07/02/2018tool - Vectrhttps://vectr.com/ashgeek/b4JRQBQTAY1/1Symbolic AnalysisSample ExploitConcreteValidationBytecode     AnalysisSpeciﬁcationsResultMaian656Finding The Greedy, Prodigal, and Suicidal Contracts at Scale
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
owned account sends a transaction (with possibly non-zero Ether
amount) to the contract address. The transaction contains some
data which is passed as an input to the the contract’s code. When
such a transaction is mined, it gets executed by the EVM. This
engine takes the contract’s code, the provided input data, as well
as the storage of the contract. It executes the code and, if properly,
writes the updated values of the contract’s storage, possibly clears
its code field if the contract is killed, and it updates all balance fields
(of all accounts to which the contract sent Ether according to the
executed instructions) on the blockchain.
It is critical to understand that a contract invocation depends
as well on the storage of the contract. Hence, we reason about the
security of contracts not only depending on their code, but on their
value of the blockchain. Thus we talk about blockchain state σ(C)
of a contract C, i.e., the value of its three fields on the blockchain.
Finally, instead of focusing on a single invocation, we can talk
about a trace of invocations, i.e., a consecutive sequence of transac-
tions, invoking calls to a contract from the same Ethereum account
(caller). An invocation depth of a trace is the number of transactions
in the trace. Below, we focus on the traces whose all transactions
are from the same caller, and are mined one after another and that
there are no other transactions (from other callers) mined in be-
tween. Zero-Ether traces are composed of transactions that do not
send any Ether.
3.2 Safety Violations
Given the notion of contract traces we can define the first two types
of vulnerable smart contracts, namely prodigal and suicidal. The
two bugs are due to safety violations, i.e., execution of specially
constructed traces reach bytecode instructions that violate certain
properties expected from secure smart contracts.
Definition 3.1 (Prodigal contracts). A contract C at blockchain
state σ(C) is called prodigal if an arbitrary account A can send a
zero-Ether trace to C, which when executed results in transfer of
Ether from the C to A.
In short, prodigal contracts, without receiving, send Ether to
an arbitrary account. (Note, we simulate an arbitrary account by
assuming its address is any fixed 160-bit string A). To detect if a
contract is prodigal, we try to build an execution trace in which
all of the transaction have CALLVALUE = 0 and the last transaction
triggers one of the bytecode instructions that transfer Ether to A.
More specifically, we assume that in all of the transactions the
execution of the last transaction should either:
• reach the CALL instruction with recipient being the transaction
CALLER and the transfer amount non-zero, and afterwards reach a
normal stopping instruction such as STOP or RETURN. This assures
that the contract sends some Ether to A and afterwards does not
throw (otherwise, the whole transaction is ignored and the Ether
transfer is reverted); or
• reach the SUICIDE instruction with recipient being the CALLER.
Such instruction will immediately kill the contract and transfer
all of its funds to A
Definition 3.2 (Suicidal contracts). A contract C at blockchain
state σ(C) is called suicidal if an arbitrary account can send a trace
to C, which when executed, kills the contract.
The definitions of suicidal and prodigal contracts are similar, and
so are their detection techniques. To check if a contract is suicidal,
we try to build a trace where the last transaction has to only reach
the SUICIDE instruction in the bytecode.
3.3 Liveness Violations
A contract at a certain blockchain state is considered locking, if no
execution trace will trigger release of its Ether. Since disproving
liveness properties of this kind with a finite counterexample is
impossible in general, we formulate our definition as an under-
approximation of the property of interest, considering only traces
up to a certain depth: