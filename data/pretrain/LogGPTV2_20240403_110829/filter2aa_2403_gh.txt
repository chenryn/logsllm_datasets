— 判断上述结果是否逃逸。如果逃逸则立刻终断。 
— 在一定的迭代次数（n）内，进行复数二项式
的迭代。 
 如果这个点所代表的 c 值不会使递归序列的值逃逸到无限大，那么就在屏幕上用某种颜色标注这
个点。 
 如果这个点所代表的 c 值会使递归序列的值逃逸，则： 
— （黑白构图）不给这个点着色。 
— （彩色构图）把逃逸时的迭代次数转换成某种颜色，并用这种颜色给这个点着色。因此，彩
色曼德博集合图上的颜色，描述的是该点的逃逸速度。 
笔者编写了两个程序，分别以复数（宏观参数）和代数二项式（表达形式）两种角度实现上述算法。 
指令清单 83.3  For complex numbers 
def check_if_is_in_set(P): 
     P_start=P 
     iterations=0 
     while True: 
          if (P>bounds): 
               break 
          P=P^2+P_start 
         if iterations > max_iterations: 
              break 
         iterations++ 
     return iterations 
# black-white 
for each point on screen P: 
     if check_if_is_in_set (P)  bounds): 
               break 
          new_X=X^2 - Y^2 + X_start 
          new_Y=2*X*Y + Y_start 
          if iterations > max_iterations: 
               break 
          iterations++ 
     return iterations 
# black-white 
for X = min_X to max_X: 
     for Y = min_Y to max_Y: 
          if check_if_is_in_set (X,Y) = -1.2; imagCoord -= 0.05) 
               { 
                    for (realCoord = -0.6; realCoord  
 7  ; | 
 8  ; | 
 9  ; | 
10  ;  | 
11  ;  | 
12  ;  | 
13  ; v 
14  ; X=0, Y=199             X=319, Y=199 
15 
16 
17  ; switch to VGA 320*200*256 graphics mode 
18  mov al,13h 
19  int 10h 
20  ; initial BX is 0 
21  ; initial DI is 0xFFFE 
22  ; DS:BX (or DS:0) is pointing to Program Segment Prefix at this moment 
23  ; ... first 4 bytes of which are CD 20 FF 9F 
24  les ax,[bx] 
25  ; ES:AX=9FFF:20CD 
26 
27  FillLoop: 
28  ; set DX to 0. CWD works as: DX:AX = sign_extend(AX). 
29  ; AX here 0x20CD (at startup) or less then 320 (when getting back after loop), 
30  ; so DX will always be 0. 
31  cwd 
32  mov ax,di 
33  ; AX is current pointer within VGA buffer 
34  ; divide current pointer by 320 
35  mov cx,320 
36  div cx 
37  ; DX (start_X) - remainder (column: 0..319); AX - result (row: 0..199) 
38  sub ax,100 
39  ; AX=AX-100, so AX (start_Y) now is in range -100..99 
40  ; DX is in range 0..319 or 0x0000..0x013F 
41  dec dh 
42  ; DX now is in range 0xFF00..0x003F (-256..63) 
43 
44  xor bx,bx 
45  xor si,si 
46  ; BX (temp_X)=0; SI (temp_Y)=0 
47 
48  ; get maximal number of iterations 
49  ; CX is still 320 here, so this is also maximal number of iteration 
50  MandelLoop: 
51  mov bp,si 
   ; BP = temp_Y 
52  imul si,bx 
   ; SI = temp_X*temp_Y 
53  add si,si 
   ; SI = SI*2= (temp_X*temp_Y)*2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 83 章  实 例 演 示 
821 
54  imul bx,bx 
   ; BX = BX^2= temp_X^2 
55  jo MandelBreak  ; overflow? 
56  imul bp,bp 
   ; BP = BP^2= temp_Y^2 
57  jo MandelBreak  ; overflow? 
58  add bx,bp 
   ; BX = BX+BP = temp_X^2 + temp_Y^2 
59  jo MandelBreak  ; overflow? 
60  sub bx,bp 
   ; BX = BX-BP = temp_X^2+temp_Y^2 - temp_Y^2 = temp_X^2 
61  sub bx,bp 
   ; BX = BX-BP = temp_X^2 - temp_Y^2 
62 
63  ; correct scale: 
64  sar bx,6 
   ; BX=BX/64 
65  add bx,dx 
   ; BX=BX+start_X 
66  ; now temp_X = temp_X^2 - temp_Y^2 + start_X 
67  sar si,6 
   ; SI=SI/64 
68  add si,ax 
   ; SI=SI+start_Y 
69  ; now temp_Y = (temp_X*temp_Y)*2 + start_Y 
70 
71  loop MandelLoop 
72 
73  MandelBreak: 
74  ; CX=iterations 
75  xchg ax,cx 
76  ; AX=iterations. store AL to VGA buffer at ES:[DI] 
77  stosb 
78  ; stosb also increments DI, so DI now points to the next point in VGA buffer 
79  ; jump always, so this is eternal loop here 
80  jmp FillLoop 
这个程序的算法是： 
 切换到分辨率为 320 × 200/256 色的 VGA 模式。320 × 200 = 64000（0xFA00）。256 色的每个像素
都是单字节的数据，所以缓冲区大小就是 0xFA00 字节。应用程序使用 ES:DI 寄存器对即可对像
素进行寻址。 
VGA 图形缓冲区的段地址要存储在 ES 寄存器里，所以 ES 寄存器的值必须是 0xA000。但是向 ES 寄
存器传递 0xA000 的指令至少要占用 4 个字节（PUSH 0A000h/POP ES）。有关 6 位 MS-DOS 系统的内存模
型，可参见第 94 章的详细介绍。 
假设 BX 寄存器的值为零、程序段前缀（Program Segment Prefix）位于第 0 号地址处，那么 2 字节的
LES AX，[BX] 指令就会在 AX 寄存器里存储 0x20CD、在 ES 寄存器里存储 0x9FFF。也就是说，这个程序
会在图形缓冲区之前输出 16 个像素（字节）。但是因为该程序的运行平台是 MS-DOS，而 MS-DOS 没有实
现内存保护技术，所以这种问题不会引发程序崩溃。不过，屏幕右侧多出了一个 16 像素宽的红色条带，整
个图像向左移动了 16 个像素。这就是在程序里节省 2 字节空间的代价。 
 单个循环处理全部像素。在处理图像问题时，一般的程序都会使用两个循环：一个循环遍历 x 坐
标、另一个循环遍历 y 坐标。不过，在 VGA 图形缓存区里对某个像素进行定位时，双循环的程
序必须通过乘法运算才能寻址。为此，这个程序的作者决定使用单循环的数据结构，通过除法运
算获取当前点的坐标。经过转换以后，程序坐标的取值范围是：x～［−256，63］，y～［−100，
99］。正因如此，整个图像的中心点偏右。虽然直接把 x 的值减去 160 就可以使 x 的取值范围变成
［−160，159］，从而校准图像中心，但是“SUB DX，160”的指令占用 4 个字节，而作者的“DEC 
DH”（相当于 SUB DX，0x100）只用两个字节。图像中心偏右算是节省文件空间的另一个代价吧。 
— 检测当前点是否属于曼德博集合。检测算法和前文相同。 
— 以 CX 寄存器作为循环计数器进行 LOOP 循环。作者没有明确地给循环计数器赋值，而是让
CX 寄存器继续沿用第 35 行的数值（320）。或许，数值越大越精确吧。这同样可以节省文件空间。 
— 使用 IMUL 指令。因为操作符是有符号数，所以乘法指令不是 MUL。同理，为了把原点坐
标 0，0 调整到屏幕中心区域，在转换坐标时（除法）使用到的是 SAR 指令（带符号右移），
而不是 SHR 指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
822 
逆向工程权威指南（下册） 
— 简化逃逸检测的算法。常规算法检测的是坐标，即一对坐标值。而作者分三次检测了溢出问
题：两个求平方操作和一次加法运算的溢出。事实正是如此，我们使用的是 16 位寄存器，寄
存器内的数值不会超过［−32768，+32767］。在计算机进行有符号数的乘法运算时，只要坐
标的值大于 32767，那么该点的复数就不会属于曼德博集合。 
— 后面再次出现的 SAR 指令（相当于除以 64）设置了 64 级素灰度。调色版的灰度值越大，对
比度就越高、图像就越清晰；反之，灰度越集中，对比度就越低、图像就越模糊。 
 程序执行到 MandelBreak 标签的情况分为两种：一种情况是循环结束时 CX = 0 这就说明，该点属于曼
德博集合；另一种情况是程序发生溢出、此时 CX 存储着非零值。这个程序把 CX 的低 8 位（即 CL）
写到图形缓冲区里。在默认调色板中，0 代表黑色，所以属于曼德博集合的坐标点都会显示纯黑色像素。
当然，我们确实能够在绘图之前把调色板设置得更个性化一些，不过那种程序就不会只有 64 字节了！ 
 这个程序采用的是无限循环，不能正常退出。如果还要判断循环终止或者进行互动响应，那么程
序文件还要更大。 
此外，这个程序的优化技巧同样值得一提： 
 使用单字节的CWD 指令清空DX 寄存器。相比之下，“XOR DX，DX”占用2 个字节，而“MOV DX，
0”则占用 3 个字节。 
 使用单字节的“XCHG AX，CX”完成双字节“MOV AX，CX”的操作。毕竟后面不再使用 AX
寄存器，所以交换数据完全不会造成问题。 
 因为程序没有对 DI 寄存器（图形缓冲区的位置）进行初始化赋值，所以它在启动时的初始值为
0xFFFE（寄存器初始值由操作系统决定）。不过这无伤大雅，这个程序只要求 DI 的值保持在［0，
0xFFFF］之间，软件用户也看不到屏幕区域之外的点（在 320×200×256 的图像缓冲区里，最后一
个像素的地址是 0xF9FF）。也就是说，因为这个程序前后衔接得严丝合缝，所以不管 DI 寄存器也
没问题。否则，编程人员还要添加把 DI 寄存器置零、以及检测图形缓冲区结束边界的指令。 
83.2.3  笔者的改进版 
指令清单 83.6  My“fixed”version 
 1  org 100h 
 2  mov al, 13h 
 3  int 10h 
 4 
 5  ; set palette 
 6  mov dx, 3c8h 
 7  mov al, 0 
 8  out dx, al 
 9  mov cx, 100h 
10 inc  dx 
11 l00: 
12 mov  al, cl 
13 shl  ax, 2 
14 out  dx, al ; red 
15 out  dx, al ; green 
16 out  dx, al ; blue 
17 loop l00 
18 
19 push 0a000h 
20 pop es 
21 
22 xor di, di 
23 
24 FillLoop: 
25 cwd 
26 mov ax, di 
27 mov cx, 320 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 83 章  实 例 演 示 
823 
28 div cx 
29 sub ax, 100 
30 sub dx, 160 
31 
32 xor bx, bx 
33 xor si, si 
34 
35 MandelLoop: 
36 mov bp, si 
37 imul si, bx 
38 add si, si 