/* Get random k */
do
if (!BN_rand_range(&k, dsa->q))
goto err;
while (BN_is_zero(&k)) ;
if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {
BN_set_flags(&k, BN_FLG_CONSTTIME);
}
if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {
if (!BN_copy(&kq, &k))
goto err;
/*
* We do not want timing information to leak the length of k, so we
* compute g^k using an equivalent exponent of fixed length. (This
* is a kludge that we need because the BN_mod_exp_mont() does not
* let us specify the desired timing behaviour.)
*/
if (!BN_add(&kq, &kq, dsa->q))
goto err;
if (BN_num_bits(&kq) q)) {
if (!BN_add(&kq, &kq, dsa->q))
goto err;
}
K = &kq;
} else {
K = &k;
}
DSA_BN_MOD_EXP(goto err, dsa, r, dsa->g, K, dsa->p, ctx,
dsa->method_mont_p);
Figure 1: Excerpt from OpenSSL’s dsa_sign_setup in
crypto/dsa/dsa_ossl.c. Line 252 sets the BN_FLG_CON-
STTIME ﬂag, yet BN_copy on Line 264 does not prop-
agate it. The subsequent Line 285 exponentiation
call will have pointer K with the ﬂag clear.
{
if (BN_get_flags(p, BN_FLG_CONSTTIME) != 0) {
}
bn_check_top(a);
const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
int BN_mod_exp_mont(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
int i, j, bits, ret = 0, wstart, wend, window, wvalue;
int start = 1;
BIGNUM *d, *r;
const BIGNUM *aa;
/* Table of variables obtained from ’ctx’ */
BIGNUM *val[TABLE_SIZE];
BN_MONT_CTX *mont = NULL;
+--bn_exp.c--------------------------------------------------------------------------+
|
|402
|
|403
|
|404
|
B+ |405
|
|406
|407
|
|
|408
|
|409
|
|410
|
|411
|
|412
|
>|413
|
|414
|
|415
|416
|
|417
|
+------------------------------------------------------------------------------------+
|
|0x7ffff779db3e 
0x14(%rax),%eax
|
|0x7ffff779db41 
$0x4,%eax
%eax,%eax
|0x7ffff779db44 
|
0x7ffff779db85  |
>|0x7ffff779db46 
|0x7ffff779db48 
-0x1b0(%rbp),%r8
|
+------------------------------------------------------------------------------------+
return BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont);
mov
and
test
je
mov
Line: 413 PC: 0x7ffff779db46
child process 29096 In: BN_mod_exp_mont
(gdb) break BN_mod_exp_mont
Breakpoint 1 (BN_mod_exp_mont) pending.
(gdb) run dgst -dss1 -sign ~/dsa.pem -out ~/lsb-release.sig /etc/lsb-release
Starting program: /usr/local/ssl/bin/openssl \
dgst -dss1 -sign ~/dsa.pem -out ~/lsb-release.sig /etc/lsb-release
Breakpoint 1, BN_mod_exp_mont (...) at bn_exp.c:405
(gdb) backtrace
#0 BN_mod_exp_mont (...) at bn_exp.c:405
#1 0x00007ffff77eea62 in dsa_sign_setup (...) at dsa_ossl.c:285
#2 0x00007ffff77ee344 in DSA_sign_setup (...) at dsa_sign.c:87
#3 0x00007ffff77ee53d in dsa_do_sign (...) at dsa_ossl.c:159
#4 0x00007ffff77ee30c in DSA_do_sign (...) at dsa_sign.c:75
...
(gdb) stepi
(gdb) info register eax
eax
(gdb) print BN_get_flags(p, BN_FLG_CONSTTIME)
$1 = 0
(gdb) macro expand BN_get_flags(p, BN_FLG_CONSTTIME)
expands to: ((p)->flags&(0x04))
(gdb) print ((p)->flags&(0x04))
$2 = 0
(gdb)
0x0
0
Figure 2: Debugging OpenSSL DSA signing in
crypto/bn/bn_exp.c. The Line 413 branch is not
taken since BN_FLG_CONSTTIME is not set, as seen from
the print command outputs. Hence BN_mod_exp_-
mont_consttime is not called— the control ﬂow con-
tinues with classical SWE code.
of squares and multiplications, from that sequence we re-
cover a few bits that we use for the lattice attack described
in Section 6.
As seen in Figure 2, every time OpenSSL performs a DSA
signature, the exponentiation method BN_mod_exp_mont in
crypto/bn/bn_exp.c gets called. There, the BN_FLG_CONST-
TIME ﬂag is checked but due to the software defect discussed
in Section 3 the condition fails and the routine continues
with the SWE pre-computation and then the actual expo-
nentiation. For the ﬁnite ﬁeld operations, BN_mod_exp_mont
calls BN_mod_mul_montgomery in crypto/bn/bn_mont.c and
from there, the multiply wrapper bn_mul_mont is called,
where, by default for x64 targets, assembly code is executed
to perform low level operations using BIGNUMs for square
and multiplication. OpenSSL uses Montgomery represen-
tation for eﬃciency. Note that for other platforms and/or
non-default build conﬁgurations, the actual code executed
ranges from pure C implementation to entirely diﬀerent as-
sembly. The attacker can easily adapt to these diﬀerent
execution paths, but the discussion that follows is geared
towards our target platform.
The threshold set for the load time in the Flush+Reload
technique (cache hit vs. cache miss) is system and software
dependent. From our measurements we set this threshold
accordingly since the load times from LLC and from memory
were clearly deﬁned. Figure 4 shows that loads from LLC
take less that 100 cycles, while loads from main memory
take more than 200 cycles.
As mentioned before, to get better resolution and gran-
ularity during the attack one eﬀective strategy is to tar-
get body loops or routines that are invoked several times.
For that reason we probe, using the Flush+Reload tech-
nique, inner routines used for square and multiply. Since
squares can be computed more eﬃciently than multiplica-
tion, OpenSSL’s multiply wrapper checks if the two pointer
operands are the same and, if so, calls to assembly squar-
ing code (bn_sqr8x_mont)—otherwise, to assembly multiply
code (bn_mul4x_mont).
At the same time we run a performance degradation at-
tack, ﬂushing actively used memory addresses during these
routines (e.g. assembly labels Lsqr4x_inner and Linner4x,
respectively). We slow down the execution time to a safe,
but not noticeable by the victim, threshold that ensures a
good trace by our spy program. In our experiments, we ob-
serve slow down factors of roughly 16 and 26 for 1024-bit and
2048-bit DSA, respectively due to the degrade technique.
Using this strategy, our spy program collects data from
two channels: one for square latencies and the other for
multiply latencies. We then apply signal processing tech-
niques to this raw channel data. A moving average ﬁlter on
the data results in Figure 3 and Figure 4 for 1024-bit and
2048-bit DSA, respectively. There is a signiﬁcant amount
of information to extract from these signals on the SWE
algorithm state transitions and hence exponent bit values.
Generally, extracted multiplications yield a single bit of in-
formation and the squares yield the position for these bits.
Some short examples follow.
Stepping through Figure 3, the initial low amplitude for
the multiply signal is the multiplication for converting the
base operand to Montgomery representation. The subse-
quent low amplitude for the square signal is the temporary
square value used to build the odd powers for the SWE pre-
computation table (i.e. s in Algorithm 2). The subsequent
long period of low multiply amplitude is the successive mul-
tiplications to build the pre-computation table itself. Then
begins the main loop of SWE. As an upward sloping multiply
amplitude intersects a downward sloping square amplitude,
this marks the transition from a multiplication operation to
a square operation (and vice versa). This naturally occurs
several times as the main exponentiation loop iterates. The
end of this particular signal shows a ﬁnal transition from
multiply to a single square, indicating that the exponent is
even and the two LSBs are 1 and 0.
Stepping through Figure 4 is similar, yet the end of this
particular signal shows a ﬁnal transition from square to
multiply—indicating that the exponent is odd, i.e. the LSB
is 1.
Even when employing the degrade technique, it is impor-
tant to observe the vast granularity diﬀerence between these
two cryptographic settings. On average, a 2048-bit signal is
roughly ten times the length of a 1024-bit signal, even when
the exponent is only 60% longer (i.e. 256-bit vs. 160-bit).
This generally suggests we should be able to extract more
accurate information from 2048-bit signals than 1024-bit—
i.e., the higher security cryptographic parameters are more
vulnerable to side-channel attack in this case. See [37, 39, 40]
for similar examples of this phenomenon.
Granularity is vital to determining the number of squares
interleaved between multiplications. Since, in our environ-
ment, there appears to be no reliable indicator in the signal
for transitions from one square to the next, we estimate the
number of adjacent squares by the horizontal distance be-
tween multiplications. Since the channel is latency data, we
also have reference clock cycle counter values so another es-
timate is based on the counter diﬀerences at these points.
Our experiments showed no signiﬁcant advantage of one ap-
proach over the other.
Extracting the multiplications from the signal and inter-
leaving them with a number of consecutive squares propor-
tional to the width of the corresponding gap gives us the
square and multiplication sequence, or SM sequence, that
the SWE algorithm passed through. Figure 7 shows an ex-
ample of an SM sequence recorded by the spy program when
OpenSSL signs using 2048-bit DSA.
Our spy program is able to capture most of the SM se-
quence accurately. It can miss or duplicate a few squares
due to drift but is able to capture all of the multiplication
operations. Closer to the LSBs, the information extracted
from the SM sequence is more reliable since the bit position
is lost if any square operation is missed during probing.
5. VICTIMIZING APPLICATIONS
The defect from the previous section is in a shared library.
Potentially any application that links against OpenSSL for
DSA functionality can be aﬀected by this vulnerability. But
to make our attack concrete, we focus on two ubiquitous
protocols and applications: TLS within stunnel and SSH
within OpenSSH.
As we discuss later in Section 6, the trace data alone is
not enough for private key recovery—we also need the digital
signatures themselves and (hashed) messages. To this end,
the goal of this section is to describe the practical tooling
we developed to exploit the defect within these applications,
collecting both trace data and protocol messages.
5.1 Attacking TLS
To feature TLS support, one option for network applica-
tions that do not natively support TLS communication is
to use stunnel10, a popular portable open source software
package that forwards network connections from one port
to another and provides a TLS wrapper. A typical stun-
nel use case is listening on a public port to expose a TLS-
enabled network service, then connecting to a localhost port
where a non-TLS network service is listening—stunnel pro-
vides a TLS layer between the two ports. It links against
the OpenSSL shared library to provide this functionality.
For our experiments, we used stunnel 5.32 compiled from
stock source and linked against OpenSSL 1.0.2h. We gener-
ated a 2048-bit DSA certiﬁcate for the stunnel service and
chose the DHE-DSS-AES128-SHA256 TLS 1.2 cipher suite.
We wrote a custom TLS client that connects to this stun-
nel service. It launches our spy to collect the timing signals,
but its main purpose is to carry out the TLS handshake and
collect the digital signatures and protocol messages. Fig-
ure 5 shows the TLS handshake. Relevant to this work, the
initial ClientHello message contains a 32-byte random ﬁeld,
and similarly the server’s ServerHello message. In practice,
these are usually a 4-byte UNIX timestamp concatenated
with a 28-byte nonce. The Certificate message contains
the DSA certiﬁcate we generated for the stunnel service. The
ServerKeyExchange message contains a number of critical
ﬁelds for our attack: Diﬃe-Hellman key exchange parame-
ters, the signature algorithm and hash function identiﬁers,
and ﬁnally the digital signature itself in the signed_params
ﬁeld. Given our stunnel conﬁguration and certiﬁcate, the
2048-bit DSA signature is over the concatenated string
ClientHello.random + ServerHello.random +
ServerKeyExchange.params
and the hash function is SHA-512, both dictated by the
SignatureAndHashAlgorithm ﬁeld (explicit values 0x6, 0x2).
Our client saves the hash of this string and the DER-encoded
digital signature sent from the server. All subsequent mes-
sages, including ServerHelloDone and any client responses,
are not required by our attack. Our client therefore drops
the connection at this stage, and repeats this process sev-
eral hundred times to build up a set of distinct trace, digital
signature, and digest tuples. See Section 6 for our explicit
attack parameters. Figure 4 is a typical signal extracted by
our spy program in parallel to the handshake between our
client and the victim stunnel service.
5.2 Attacking SSH
OpenSSH11 is a suite of tools whose main goal is to provide
secure communications over an insecure channel using the
SSH network protocol.
OpenSSH is linked to the OpenSSL shared library to per-
form several cryptographic operations, including digital sig-
natures (excluding ed25519 signatures). For our experi-
ments we used the stock OpenSSH 6.6.1p1 binary pack-
age from the Ubuntu repository, and pointed the run-time
shared library loader at OpenSSL 1.0.2h. The DSA key pair
used by the server and targeted by our attack is the default