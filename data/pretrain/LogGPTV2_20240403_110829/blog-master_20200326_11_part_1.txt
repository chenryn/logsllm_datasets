## PostgreSQL kdb+ 接口函数  
### 作者                   
digoal                  
### 日期                                              
2020-03-26                   
### 标签                                                    
PostgreSQL , kdb+       
----                   
## 背景       
在PG中通过SQL直接操作kdb+ 内存数据库  
https://github.com/hughhyndman/pgtokdb  
# PostgreSQL to kdb+ Extension  
This project is the implementation of a PostgreSQL extension that allows Postgres processes to access [kdb+](https://en.wikipedia.org/wiki/Kdb%2B) data through its SQL interface. While Postgres has excellent transactional support for reference/master data, kdb+ offers a high-performance solution to storing and analyzing extreme volumes of timeseries data. By allowing developers to combine the data from both technologies through the standard interfaces that Postgres provides, this extension may expedite the development of new solutions.  
The following provides a gist of how the `pgtokdb` works. The extension has an entry point (a C function) named `getset` (Set Returning Function) that handles communications between SQL and kdb+.  
We now create a Postgres function that wraps `getset`. This particular function takes a kdb+ expression that returns a result set of two columns: i and j, 4-byte and 8-byte integers respectively.  
```sql  
create type callkdb_t as (i integer, j bigint);  
create function callkdb(varchar) returns setof callkdb_t as 'pgtokdb', 'getset' language c;  
```  
We have a kdb+ function defined that returns the record set. This function using in a kdb+ session that is listening on a configured port waiting for work.  
```q  
q)qfn[]  
i j    
-----  
1 100  
2 200  
3 300  
```  
Let's call that function from within Postgres.   
```sql  
select * from callkdb('qfn[]');  
 i |  j    
---+-----  
 1 | 100  
 2 | 200  
 3 | 300  
```  
Below, we have a simple Postgres table that contains some code-description values, where the i column represent the code of, say, some piece of machinery.  
```sql  
select * from code;  
 i |     c        
---+------------  
 1 | Compressor  
 2 | Pump  
 3 | Extruder  
```  
Let's join the two table inside of Postgres.   
```sql  
select B.i, A.c, B.j from code A, callkdb('qfn[]') B where A.i = B.i;  
 i |     c      |  j    
---+------------+-----  
 1 | Compressor | 100  
 2 | Pump       | 200  
 3 | Extruder   | 300  
```  
Below is a bit more complex example. We want to invoke a kdb+ function that has an integer argument (`numrows`), and returns a table with different column types.   
```q  
fun:{[numrows]  
    // Generate unkeyed table with  rows  
    ([]  
        id:numrows?1000; // Random bigints (j)  
        vals:numrows?999.9; // Random floats (f)  
        ts:.z.p+1000000000*til numrows; // Array of timestamps (p), starting at now   
        str:"string" ,/: string til numrows // Just some strings (C)  
        )  
   }  
```  
In Postgres, we create a type that maps to the names and data types of the kdb+ function result. Also, we create a function that glues it all together.  
```sql  
create type callfun_t as (id bigint, vals float8, ts timestamp, str varchar);  
create function callfun(varchar, integer) returns setof callfun_t as 'pgtokdb', 'getset' language c;  
select * from callfun('fun', 10);  
 id  |       vals       |            ts             |   str     
-----+------------------+---------------------------+---------  
 468 |  340.68741165963 | 2019-10-29 14:25:47.51818 | string0  
 708 | 53.9956231920747 | 2019-10-29 14:25:48.51818 | string1  
 838 | 549.738582797139 | 2019-10-29 14:25:49.51818 | string2  
 682 | 195.827127312706 | 2019-10-29 14:25:50.51818 | string3  
 201 | 561.469921466801 | 2019-10-29 14:25:51.51818 | string4  
 458 | 70.4310706491116 | 2019-10-29 14:25:52.51818 | string5  
 274 | 212.379495747993 | 2019-10-29 14:25:53.51818 | string6  
 549 |  777.80420385031 | 2019-10-29 14:25:54.51818 | string7  
 461 | 484.424253823073 | 2019-10-29 14:25:55.51818 | string8  
 924 | 682.731623685546 | 2019-10-29 14:25:56.51818 | string9  
```  
Finally, there are many regression tests in the project [test directory](https://github.com/hughhyndman/pgtokdb/tree/master/test) that are great examples of show varying data types, arguments, results, and capabilities.    
## Performance  
Although not very scientific, the following example provides some information on the performance characteristics of the extension, as well as kdb+ and Postgres. These tests were run on my circa 2014 Macbook Pro, with an SSD drive.   
In kdb+, we create a 100 million row table with a single bigint column, containing the numbers from 0 rising monotonically upwards. The `\t` that follows the q prompt indicates that we want to time the operation.  
```q  
q)\t `:kdbtbl set ([] j:til 100000000) // Create table on disk  
1498 (ms)  
q)\l kdbtbl // Load table  
`kdbtbl  
q)select sum j from kdbtbl // Add up all the values  
j                 
----------------  
4999999950000000  
q)\t select sum j from kdbtbl // Time the operation  
62 (ms)  
```  
Below, we create at Postgres function that calls a kdb+ query, and receives a single bigint column.  
```sql  
postgres=# create type foo_t as (j bigint);  
postgres=# create function foo(varchar) returns setof foo_t as 'pgtokdb', 'getset' language 'c';  
```  
Let's invoke the function and have all 100 million rows returned to Postgres, for it to sum up the `j` value. We are essentially moving 800MB across a socket, and passing each bigint to Postgres to sum.  
```sql  
postgres=# select sum(j) from foo('select j from kdbtbl');  
       sum          
------------------  
 4999999950000000  
Time: 24671.273 ms (00:24.671)  
```  
Now, we'll copy all the data from the kdb+ table and store it in a Postgres table. After that, we'll get Postgres to do the sum of its own data.  
```sql  
postgres=# \timing on  
postgres=# select * into pgtbl from foo('select j from kdbtbl');  
Time: 151502.628 ms (02:31.503)  
postgres=# select sum(j) from pgtbl;  
       sum          
------------------  
 4999999950000000  
Time: 15614.525 ms (00:15.615)  
```  
Lastly, we'll shift the processing of the sum from Postgres to kdb+, which provides a much more efficient solution.   
```sql  
postgres=# select j from foo('select sum j from kdbtbl');  
        j           
------------------  
 4999999950000000  
Time: 71.102 ms  
```  
## Data Types and Conversions  
The table below summarizes the how the data types should be mapped between kdb+ and Postgres. The Code specifies the single character kdb+ datatype codes, which are used in the `genddl` functions in the `pgtokdb` namespace provided in the provided `pgtokdb.q` script file.  
kdb+ | Code | Postgres  
:-- | :-: | :--   
boolean | b | boolean   
GUID | g | UUID  
short | h | smallint (int2)   
int | i | int (integer, int4)  
long | j | bigint (int8)  
real | e | real (float4)   
float | f | double precision (float8)  
char | c | varchar   
symbol | s | varchar   
timestamp | p | timestamp  
date | d | date  
char[] | C | varchar  
byte[] | X | bytea  
short[] | H | smallint[]  
int[] | I | integer[]   
long[] | J | bigint[]  
real[] | E | real[]  
float[] | F | double precision[]  
The extension does support up-casting to data types where there won't be any data loss, for example kdb+ short to Postgres bigint. However there could be precision loss when casting integers to floats.  
Note that Postgres does not have a single-byte data type, so kdb+ type x should be mapped to a Postgres integer type, where it will be up-casted.   
## Installation  
The distribution files have to be placed into a directories that comprise the deployed Postgres installation. In order to determine which directories to use, Postgres provides a utility in its bin directory called `pg_config`. This utility prints configuration parameters of the currently installed version of PostgreSQL. There are a number of options available to `pgconfig` which return names of directories for distribution files. The table below summarizes each file in the pgtokdb distribution and the pg_config option to be used to identify their destination.  
 File | pg_config option | Notes  
 :--- | :--- | :---  
 pgtokdb.so | --pkglibdir | Shared library to be used for Mac and Linux deployments  
 pgtokdb.dll | --pkglibdir | DLL to be used for Windows deployments  
 pgtokdb.control | --sharedir | Descriptive information for the extension  
 pgtokdb.sql | --sharedir | SQL script that is run when extension is CREATED  
 c.dll | | Kx Systems C-language DLL to be placed in PATH  
 pgtokdb.q | | Kdb+ script placed somewhere convenient to the Q directories  
As an example, on my Mac, here are the names of the target directories.  
```bash  
$ pg_config --pkglibdir  
/usr/local/pgsql/lib  
$ pg_config --sharedir  
/usr/local/pgsql/share  
```  
Once the files are copied, start `psql` and make the extension known to Postgres via the CREATE EXTENSION command.  