Result: (cid:74)g 1
1 (cid:74)gy(cid:75) ← 1 −(cid:74)gx(cid:75);
2 (cid:74)gy0(cid:75) ←(cid:74)gy(cid:75);
(cid:74)gyi+1(cid:75) ← GoldenMult((cid:74)gyi(cid:75),(cid:74)gyi(cid:75));
6 (cid:74)gz(cid:75) ← GoldenProd((cid:74)gy0(cid:75) + 1,(cid:74)gy1(cid:75) + 1, . . . ,(cid:74)gyk(cid:75) + 1);
7 return(cid:74)gz(cid:75)
Data: (cid:74)gx(cid:75), n, m, (n > m),{(xi, yi)}
Result: (cid:74)g 1
x(cid:75)
1 ((cid:74)sign(cid:75),(cid:74)gy(cid:75)) ← TwoPowerConst((cid:74)gx(cid:75),{gzi});
2 (cid:74)gx(cid:48)(cid:75) ← GoldenMult((cid:74)gx(cid:75),(cid:74)gy(cid:75));
3 (cid:74)gz(cid:75) ← HalfToOneInv((cid:74)gx(cid:48)(cid:75));
4 (cid:74)gw(cid:75) ← GoldenMult((cid:74)gy(cid:75),(cid:74)gz(cid:75));
5 (cid:74)gu(cid:75) ← ObliviousChoice((cid:74)sign(cid:75),−(cid:74)gw(cid:75),(cid:74)gw(cid:75));
6 return(cid:74)gu(cid:75)
Finally, since our current result is approximately(cid:74)g(cid:12)(cid:12) 1
Algorithm 6: GoldInv
x(cid:48)
the result and its additive inverse so that it would have the correct sign.
(cid:12)(cid:12)(cid:75), we have to make an oblivious choice between
4.3.5 Square Root Protocol
Algorithm 7 presents the protocol for ﬁnding the square root of a golden section number.
3
x(cid:75)
Algorithm 7: GoldSqrt
2 for i ← 0 to k − 1 do
Data: (cid:74)gx(cid:75), m, n, (n > m), k,{gwi}
Result: (cid:74)g√
1 (cid:74)gy0(cid:75) ← TwoPowerConst((cid:74)gx(cid:75),{gwi});
(cid:74)gz0(cid:75) ← GoldenMult((cid:74)gyi(cid:75),(cid:74)gx(cid:75));
(cid:74)gz1(cid:75) ← GoldenMult((cid:74)gyi(cid:75),(cid:74)gz0(cid:75));
(cid:74)gz1(cid:75) ← 3 −(cid:74)gz1(cid:75);
(cid:74)gz2(cid:75) ← GoldenMult((cid:74)gyi(cid:75),g 0.5);
(cid:74)gyi+1(cid:75) ← GoldenMult((cid:74)gz1(cid:75),(cid:74)gz2(cid:75));
9 (cid:74)gw(cid:75) ← GoldenMult((cid:74)gx(cid:75),(cid:74)gyk(cid:75));
10 return(cid:74)gw(cid:75)
7
8 end
6
4
5
The protocol is following. We ﬁrst compute the inverse square root of the input x and then multiply
1√
x where the formula for the nth approximation is
n). The reason why we use inverse square root to compute square root is that general
it with x. There exists an iterative algorithm for
yn+1 = 0.5yn(3 − xy2
iterative methods for square root need division, which is too costly in out setting.
2 – if x ∈ [2j, 2j+1), the function will return 2
2 i
To obtain the starting approximations, we shall use the function TwoPowerConst where the constants are
2 .
j
11
5 Logarithmic numbers
In this section we will present logarithmic numbers. We will explain the format, and then describe algorithms
for computing the inverse, product, square root, logarithm, exponential function and sum.
5.1 Logarithmic number format
We represent a logarithmic number x as a triple (zx, sx, ex). Zero-bit zx is 0 if x is zero and 1 if x is non-zero.
Sign bit sx is 0 if x is positive and 1 if x is negative. Exponent ex is an (m + n)-bit integer which represents a
ﬁxed-point number with m bits before and n bits after the radix point. The exponent is biased and so can be
both positive and negative. The value of the number is computed as follows: (z, s, e) → z·(−1)s·2(e−Bias)/2n
,
where Bias is 2m+n−2 − 1. The larger m, the larger the range of numbers we can represent. The larger n,
the more precision we have.
While the length of the exponent is m + n bits, only the lowest m + n − 1 bits are used. The highest bit
is always zero to achieve faster comparisons between exponents.
5.2 Inverse
Algorithm 8 presents the protocol for ﬁnding the inverse of a logarithmic number.
Algorithm 8: LogNumInv
Data: (cid:74)x(cid:75) = ((cid:74)zx(cid:75),(cid:74)sx(cid:75),(cid:74)ex(cid:75))
Result: (cid:74)1/x(cid:75)
1 return ((cid:74)1(cid:75),(cid:74)sx(cid:75), 2 ·(cid:74)Bias(cid:75) −(cid:74)ex(cid:75))
Inverse is computed by leaving the sign unchanged and negating the exponent, based on the formula
((−1)sx · 2ex )−1 = (−1)sx · 2−ex . We assume that the input is not zero. The zero-bit of the result is set to 1
to indicate that the result is non-zero. We also have to account for the bias when computing the exponent.
When changing the sign of a biased integer, we have to not only change the sign but also add the double of
the bias.
5.3 Multiplication
Algorithm 9 presents the protocol for multiplying logarithmic numbers.
Algorithm 9: LogNumMult
Data: (cid:74)x(cid:75) = ((cid:74)zx(cid:75),(cid:74)sx(cid:75),(cid:74)ex(cid:75)),(cid:74)y(cid:75) = ((cid:74)zy(cid:75),(cid:74)sy(cid:75),(cid:74)ey(cid:75))
Result: (cid:74)x · y(cid:75)
1 (cid:74)e(cid:75) ←(cid:74)ex(cid:75) +(cid:74)ey(cid:75);
2 (cid:74)z(cid:75) ←(cid:74)zx(cid:75) ∧(cid:74)zy(cid:75) ∧ ((cid:74)e(cid:75) ≥(cid:74)Bias(cid:75));
3 return ((cid:74)z(cid:75),(cid:74)sx(cid:75) ⊕(cid:74)sy(cid:75),(cid:74)e(cid:75) −(cid:74)Bias(cid:75))
Multiplication of logarithmic numbers is based on the formula 2ex 2ey = 2ex+ey . Because our exponents
are biased, we have to subtract the bias when adding them. To get the sign of the result, we compute
the XOR of the signs of the operands. The zero-bit of the end result is computed as follows: the result is
non-zero iﬀ both operands are non-zero and their product does not underﬂow. Therefore, any underﬂows
are rounded down to zero.
12
Algorithm 10: LogNumSqrt
Data: (cid:74)x(cid:75) = ((cid:74)zx(cid:75),(cid:74)sx(cid:75),(cid:74)ex(cid:75))
Result: (cid:74)√
1 return ((cid:74)zx(cid:75),(cid:74)0(cid:75), ((cid:74)ex(cid:75) +(cid:74)Bias(cid:75))/2)
x(cid:75)
5.4 Square root
Algorithm 10 presents the protocol for ﬁnding the square root of a logarithmic number.
We assume that the input is non-negative. If the input is zero we return zero, and if the input is non-zero
2ex = 2ex/2. When dividing a biased integer by two we have
then we divide the exponent by two because
to double the bias before division in order to get the end result with the correct bias.
√
5.5 Logarithm
Algorithm 11 presents the protocol for ﬁnding the binary logarithm of a logarithmic number.
i=0
Algorithm 11: LogNumLg
Data: m, n,(cid:74)x(cid:75) = ((cid:74)zx(cid:75),(cid:74)sx(cid:75),(cid:74)ex(cid:75)), p = {pi}l
Result: (cid:74)lg x(cid:75)
1 (cid:74)s(cid:75) ←(cid:74)ex(cid:75) <(cid:74)Bias(cid:75);
2 (cid:74)e(cid:48)(cid:75) ←(cid:74)ex(cid:75) −(cid:74)Bias(cid:75);
3 (cid:74)e(cid:48)(cid:48)(cid:75) ←(cid:74)Bias(cid:75) −(cid:74)ex(cid:75);
4 (cid:74)e(cid:75) ← ObliviousChoice((cid:74)s(cid:75),(cid:74)e(cid:48)(cid:48)(cid:75),(cid:74)e(cid:48)(cid:75));
5 {(cid:74)ji(cid:75)}m+n−3
i=0 ← MSNZB(BitExtract((cid:74)e(cid:75)));
6 (cid:74)v(cid:75) ←(cid:74)e(cid:75) −(cid:80)m+n−3
(cid:74)ji(cid:75) · 2i;
7 (cid:74)w(cid:75) ←(cid:80)m+n−3
((cid:74)ji(cid:75) · 2m+n−i) ·(cid:74)v(cid:75);
8 (cid:74)z(cid:75) ←(cid:74)ex(cid:75) (cid:54)=(cid:74)Bias(cid:75);
9 (cid:74)t(cid:75) ← cPoly(p,(cid:74)w(cid:75))/2m−1;
10 (cid:74)u(cid:75) ← 2n+1 ·(cid:80)m+n−3
((cid:74)ji(cid:75) · (n + 1 − i));
11 return ((cid:74)z(cid:75),(cid:74)s(cid:75),(cid:74)t(cid:75) −(cid:74)u(cid:75) +(cid:74)Bias(cid:75))
i=0
i=0
i=0
To compute the binary logarithm of a logarithmic number, we assume that the input is positive. We note
that if 2ey = lg 2ex then ey = lg ex. Therefore, the exponent of the output is the binary logarithm of the
exponent of the input, which means that the problem is reduced to computing the binary logarithm of a ﬁxed-
point number. However, logarithmic numbers with negative and zero exponents (logarithmic numbers that
lie in (0, 1]) need special handling, because we do not want to deal with computing the logarithms of negative
numbers. If the exponent of the input is negative, we ﬁnd the result using the formula lg 2−ex = −2lg ex .
Thus, to compute the binary logarithm of a logarithmic number we compute the logarithm of the absolute
value of the exponent, and set the sign bit of the end result to 0 if the exponent is positive, and 1 if the
exponent is negative. If the exponent is equal to 0 then we set the zero-bit of the result to 0, otherwise we
set it to 1.
We compute the binary logarithm of a ﬁxed-point number with the help of a polynomial p that ap-
proximates f(cid:48)(x) = log4 (x + 1) + 1/2 in [0, 1) (obtained using Chebychev interpolation). Our polyno-
mial evaluation protocol only allows inputs and outputs in range [0, 1), therefore, instead of approximating
f (x) = lg x directly, we ﬁrst shift the number to the left so that we shift out all leading zeroes and the
most signiﬁcant non-zero bit (via BitExtract and MSNZB protocols and multiplications). Then we consider
the resulting number as a ﬁxed-point number with 0 bits before radix point and approximate the function
f(cid:48)(x) = log4 (x + 1) + 1/2, the values of which are in [0.5, 1). In order to derive the logarithm of the original
13
number from this intermediate result, we divide it by 2m−1 and subtract a constant which depends on the
most signiﬁcant non-zero bit of the original number.
loga x = loga 2 · lg x.
In order to compute natural logarithm via binary logarithm, we multiply the result by ln 2, because
5.6 Exponent
Algorithm 12 presents the protocol for ﬁnding the base 2 exponent of a logarithmic number.
Algorithm 12: LogNumExp
Data: m, n,(cid:74)x(cid:75) = ((cid:74)zx(cid:75),(cid:74)sx(cid:75),(cid:74)ex(cid:75)), p = {pi}l
Result: (cid:74)2x(cid:75)
1 (cid:74)g(cid:75) ← Truncate((cid:74)ex(cid:75), n);
2 (cid:74)w(cid:75) ←(cid:74)2m−2 + m − 3(cid:75) −(cid:74)ex(cid:75)/2n;
3 (cid:74)y(cid:75) ← cPoly(p, 2m−2 ·(cid:74)g(cid:75));
4 (cid:74)t(cid:75) ← Pick({(cid:74)y(cid:75)/2i}m+n−3
,(cid:74)w(cid:75));
5 (cid:74)z(cid:75) ←(cid:74)zx(cid:75) ∨ ((cid:74)ex(cid:75) <(cid:74)2n · (m − 2) + Bias(cid:75));
6 (cid:74)u(cid:75) ←(cid:74)zx(cid:75) · ObliviousChoice((cid:74)sx(cid:75),−(cid:74)t(cid:75),(cid:74)t(cid:75)) +(cid:74)Bias(cid:75);
7 return ((cid:74)z(cid:75),(cid:74)0(cid:75),(cid:74)u(cid:75))
i=0
i=0
To compute the base 2 exponential function on logarithmic numbers, we note that if 2ey = 22ex then
ey = 2ex . Therefore, the exponent of the output is 2 to the power of the exponent of the input, and the
problem is reduced to computing base 2 exponential function on ﬁxed-point numbers.
To ﬁnd the base 2 exponent of a ﬁxed-point number, we use the formula 2ex = 2(cid:98)ex(cid:99)+1·2{ex}−1. Separating
the input into whole and fractional part allows us to approximate the function f (x) = 2x−1 on the fractional
part, with inputs in range [0, 1) and outputs in range [0.5, 1), which is suitable for our interpolation protocol.
In the algorithm, approximation polynomial for f (x) = 2x−1 is denoted as p.
the whole part. This is done by computing all public shifts and obliviously picking the right one (line 4).
After exponentiating the fractional part, we shift the result right by a number of bits which depends on
Note that in order to achieve good precision when approximating 2{ex}−1, we do not just truncate the
exponent to get the fractional part. We truncate and then perform a left shift so that polynomial evaluation
protocol has more bits of precision to work with. Therefore, after polynomial evaluation we do not have
to perform a left shift, which shifts in zeroes from the right and therefore means lost precision, but a right
shift, which shifts out bits to the right and therefore means ridding ourselves of excess precision achieved
with polynomial approximation.
In order to compute exp x, we multiply the argument by lg e, because ax = 2lg a·x.
5.7 Addition
Algorithm 13 presents the protocol for ﬁnding the sum of logarithmic numbers.
First, we sort the operands by their absolute value. If the absolute value of x is smaller than the absolute
value of y then we swap them (lines 1 and 2). Now we know that |x| ≥ |y|. In order to reduce addition to
a single-operand function, we factorise 2ex ± 2ey as 2ex (1 ± 2ey−ex ) = 2ex+lg (1±2ey−ex ). Knowing that the
ﬁrst operand is larger is beneﬁcial for two reasons: it gives us the sign of the end result (which is equal to
the sign of the larger operand), and it ensures that lg (1 − 2ey−ex ) is a real-valued function. Now that the
operands are sorted, we approximate two diﬀerent functions, one for addition and one for subtraction.
To compute lg (1 ± 2ey−ex ) we ﬁnd the diﬀerence of the exponents (line 3) and denote it with e. We also
ﬁnd all its bits (line 4). We denote with t (line 5) a bit which is 0 if we perform addition and 1 if we subtract.
Both fa(x) = lg (1 + 2x) and fd(x) = lg (1 − 2x) are functions for which interpolating with a single
polynomial though Chebyshev nodes yields poor precision, especially for the values of the argument near
14
, d = {di}m+n−3
i=0
, c =
i=0
2n(2m + lg (1 − 2−2−n
))
Algorithm 13: LogNumAdd
Data: (cid:74)x(cid:75) = ((cid:74)zx(cid:75),(cid:74)sx(cid:75),(cid:74)ex(cid:75)),(cid:74)y(cid:75) = ((cid:74)zy(cid:75),(cid:74)sy(cid:75),(cid:74)ey(cid:75)), a = {ai}m+n−3
Result: (cid:74)x + y(cid:75)
1 (cid:74)l(cid:75) ←(cid:74)zx(cid:75) ∨(cid:74)zy(cid:75) ∧ ((cid:74)ex(cid:75) <(cid:74)ey(cid:75));
2 ((cid:74)x(cid:75),(cid:74)y(cid:75)) ← Swap((cid:74)l(cid:75),(cid:74)x(cid:75),(cid:74)y(cid:75));
3 (cid:74)e(cid:75) ←(cid:74)ex(cid:75) −(cid:74)ey(cid:75);
4 {(cid:74)bi(cid:75)}m+n−1
i=0 ← BitExtract(e);
5 (cid:74)t(cid:75) ←(cid:74)sx(cid:75) ⊕(cid:74)sy(cid:75);
i=0 ← MSNZB({(cid:74)bi(cid:75)}m+n−2
6 {(cid:74)pi(cid:75)}m+n−2
i=0 ← ConjBit({(cid:74)pi(cid:75)}m+n−2
7 {(cid:74)ri(cid:75)}m+n−2
,(cid:74)t(cid:75));
i=0 ← {(cid:74)ri(cid:75)}m+n−2
8 {(cid:74)qi(cid:75)}m+n−2
⊕ {(cid:74)pi(cid:75)}m+n−2
9 (cid:74)k(cid:75) ←(cid:80)m+n−2
((cid:74)pi(cid:75) · 2m+n−1−i · ((cid:74)e(cid:75) −(cid:74)2i(cid:75)));