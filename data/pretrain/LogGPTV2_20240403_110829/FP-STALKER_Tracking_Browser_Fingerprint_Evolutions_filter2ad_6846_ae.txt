95% of the chains have an ownership superior to 0.8, and more
than 90% have perfect ownership—i.e., 1. This shows that a
small percentage of browser instances become highly mixed in
the chains, while the majority of browser instances are properly
linked into clean and relatively long tracking chains.
738
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 13: Distribution of number of ids per browser for a
collect frequency of 7 days (FP-STALKER hybrid variant only).
Fig. 14: Speedup of average execution time against number of
processes for FP-STALKER’s hybrid variant
E. Benchmark/Overhead
This section presents a benchmark that evaluates the perfor-
mance of FP-STALKER’s hybrid and rule-based variants. We
start by providing more details about our implementation, then
we explain the protocol used for this benchmark, demonstrate
that our approach can scale, and we show how our two variants
behave when the number of browser instances increases.
a) The implementations: of FP-STALKER used for this
benchmark are developed in Python, and the implementation of
the random forest comes from the Scikit-Learn library. In order
to study the scalability of our approach, we parallelized the
linking algorithm to run on multiple nodes. A master node is
responsible for receiving linkability requests, then it sends the
unknown ﬁngerprint to match fu to slave nodes that compare
fu with all of the fk present on their process. Then, each
slave node sends its set of candidates associated either with a
probability in case of the hybrid algorithm, or the number of
changes in case of the rule-based version. Finally, the master
node takes the ﬁnal decision according to the policy deﬁned
either by the rule-based or hybrid algorithm. After the decision
is made, it sends a message to each node to announce whether
or not they should keep fu in their local memory. In the case
of the benchmark, we do not implement an optimization for
exact matching. Indeed, normally the master nodes should hold
a list of the exact matches associated with their ids.
b) The experimental protocol: aims to study scalability.
We evaluate our approach on a standard Azure cloud instance.
We generate fake browser ﬁngerprints to increase the test set
size. Thus, this part does not evaluate the previous metrics,
such as tracking duration, but only the execution times
required to link synthetic browser ﬁngerprints, as well as how
well the approach scales across multiple processes.
The ﬁrst step of the benchmark is to generate fake ﬁnger-
prints from real ones. The generation process consists in taking
a real ﬁngerprint from our database and applying random
changes to the canvas and the timezone attributes. We apply
only two random changes so that generated ﬁngerprints are
unique, but they do not have too many differences which would
reduce the number of comparisons. This point is important
because our algorithms include heuristics related to the number
of differences. Thus, by applying a small number of random
changes, we do not discard all fk ﬁngerprints, making it the
worst case scenario for testing execution times. Regarding
the browser ids, we assign two generated ﬁngerprints to each
browser instance. It would not have been useful to generate
more ﬁngerprints per browser instance since we compare
an unknown ﬁngerprint only with the last 2 ﬁngerprints of
each browser instance. Then, the master node creates n slave
processes and sends the generated ﬁngerprints to them. The
ﬁngerprints are spread evenly over the processes.
Once the ﬁngerprints are stored in the slave processes
memory, we start our benchmark. We get 100 real ﬁngerprints
and try to link them with our generated ﬁngerprints. For each
ﬁngerprint, we measure the execution time of the linking
process. In this measurement, we measure:
1) The number of ﬁngerprints and browser instances.
2) The number of processes spawned.
We execute our benchmark on a Standard D16 v3
Azure instance with 16 virtual processors and 64 Gb of
RAM, which has an associated cost of $576 USD per month.
Figure 14 shows the execution time speedup in percentage
against the number of processes for the hybrid approach. We
see that that as the number of processes increases, we obtain
a speedup in execution time. Going from 1 to 8 processes
enables a speed up of more than 80 %. Figure 15 shows the
execution time to link a ﬁngerprint against the number of
browser ﬁngerprints for FP-STALKER’s hybrid and rule-based
variants, using 16 processes. Better tracking duration
from the hybrid variant (see V-D) is obtained at the cost of
execution speed. Indeed, for any given number of processes
and browser instances, the rule-based variant links ﬁngerprints
about 5 times faster. That said, the results show that the hybrid
variant links ﬁngerprints relatively quickly.
However,
the raw execution times should not be used
directly. The algorithm was implemented in Python, whose pri-
mary focus is not performance. Moreover, although we scaled
by adding processes, it is possible to scale further by splitting
the linking process (e.g., depending on the combination of OS
and browser, send the ﬁngerprint to more specialized nodes).
In our current implementation, if an unknown ﬁngerprint from
a Chrome browser on Linux is trying to be matched, it will be
compared to ﬁngerprints from Firefox on Windows, causing
us to wait even though they have no chance of being linked.
By adopting a hierarchical structure where nodes or processes
are split depending on their OS and browser, it is possible to
increase the throughput of our approach.
Furthermore, the importance of the raw execution speeds
depend highly on the use case. In the case where ﬁngerprinting
is used as a way to regenerate cookies (e.g., for advertising), a
ﬁngerprint only needs to be linked when the cookie is missing
739
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
(e.g., cookies, Etags) to respawn stateful identiﬁers [1]. In such
cases, ﬁngerprint linking is performed much less frequently
since most of the time a cookie is sufﬁcient and inexpensive
to track users. Our work shows that browser ﬁngerprinting can
provide an efﬁcient solution to extend the lifespan of cookies,
which are increasingly being deleted by privacy-aware users.
Browser vendors and users would do well to minimize the
differences that are so easily exploited by ﬁngerprinters. Our
results show that some browser instances have highly trackable
ﬁngerprints, to the point that very infrequent ﬁngerprinting is
quite effective. In contrast, other browser instances appear to
be untrackable using the attributes we collect. Vendors should
work to minimize the attack surfaces exploited by ﬁngerprint-
ers, and users should avoid customizing their browsers in ways
that make them expose unique and linkable ﬁngerprints.
Depending on the objectives, browser ﬁngerprint linking
can be tuned to be more conservative and avoid false positives
(e.g., for second-tier security purposes), or more permissive
(e.g., ad tracking). Tuning could also be inﬂuenced by how
effective other tracking techniques are. For example, it could
be tuned very conservatively and simply serve to extend cookie
tracking in cases where privacy-aware users, which are in
our opinion more likely to have customized (i.e., unique and
linkable) browser conﬁgurations, delete their cookies.
VI. CONCLUSION
In this paper, we investigated browser ﬁngerprint evolution
and proposed FP-STALKER as an approach to link ﬁngerprint
changes over time. We address the problem with two variants
of FP-STALKER. The ﬁrst one builds on a ruleset identiﬁed
from an analysis of grounded programmer knowledge. The
second variant combines the most discriminating rules by
leveraging machine learning to sort out the more subtle ones.
We trained the FP-STALKER hybrid variant with a training
set of ﬁngerprints that we collected for 2 years through browser
extensions installed by 1, 905 volunteers. By analyzing the
feature importance of our random forest, we identiﬁed the
number of changes,
the languages, as well as the
user agent, as the three most important features.
We ran FP-STALKER on our test set to assess its capacity
to link ﬁngerprints, as well as to detect new browser instances.
Our experiments demonstrate that the hybrid variant can cor-
rectly link ﬁngerprint evolutions from a given browser instance
for 54.48 consecutive days on average, against 42, 3 days
for the rule-based variant. When it comes to the maximum
tracking duration, with the hybrid variant, more than 26% of
the browsers can be tracked for more than 100 days.
Regarding the usability of FP-STALKER, we measure the
average execution time to link an unknown ﬁngerprint when
the number of known ﬁngerprints is growing. We show that
both our rule-based and hybrid variants scale horizontally.
ACKNOWLEDGMENT
We would like to thank the users of the AmIUnique
extensions, whose contributions were essential to this study.
We also want to thank our shepherd, Davide Balzarotti, and
the anonymous reviewers for their valuable comments and
feedback. Finally, this work would not have been possible
without our long-term collaboration with Benoit Baudry.
Fig. 15: Execution times for FP-STALKER hybrid and rule-
based to link a ﬁngerprint using 16 processes. Time is depen-
dent on the size of the test set. The increased effectiveness of
the hybrid variant comes at the cost slower of execution times.
or has been erased, a much less frequent event. Another use
case is using browser ﬁngerprinting as a way to enhance
authentication [3]. In this case, one only needs to match
the ﬁngerprint of the browser attempting to sign-in with the
previous ﬁngerprints from the same user, drastically reducing
the number of comparisons.
F. Threats to Validity
First, the results we report in this work depend on the rep-
resentativity of our browser ﬁngerprint dataset. We developed
extensions for Chrome and Firefox, the two most popular web
browsers, and distributed them through standard channels. This
does provide long term data, and mitigates a possible bias if
we had chosen a user population ourselves, but it is possible
that the people interested in our extension are not a good
representation of the average Web surfer.
Second, there is a reliability threat due to the difﬁculty in
replicating the experiments. Unfortunately, this is inherent to
scientiﬁc endeavors in the area of privacy: these works must
analyze personal data (browser ﬁngerprints in our case) and the
data cannot be publicly shared. Yet, the code to split the data,
generate input data, train the algorithm, as well as evaluate it,
is publicly available online on GitHub5.
Finally, a possible internal threat lies in our experimental
framework. We did extensive testing of our machine learning
algorithms, and checked classiﬁcation results as thoroughly as
possible. We paid attention to split the data and generate a
scenario close to what would happen in a web application.
However, as for any large scale experimental infrastructure,
there are surely bugs in this software. We hope that they only
change marginal quantitative things, and not the qualitative
essence of our ﬁndings.
G. Discussion
This paper studies browser ﬁngerprint linking in isolation,
which is its worst-case scenario. In practice, browser ﬁnger-
printing is often combined with stateful tracking techniques
5https://github.com/Spirals-Team/FPStalker
740
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
for the degree of Bachelor of Arts., p. 103, 2009. [Online]. Available:
https://jonathanmayer.org/papers data/thesis09.pdf
[18] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham, “Fingerprinting
Information in JavaScript
Implementations,” Web 2.0 Security &
Privacy, pp. 1–11, 2011. [Online]. Available: http://cseweb.ucsd.edu/
∼hovav/papers/mbys11.html
[19] K. Mowery and H. Shacham, “Pixel Perfect : Fingerprinting Canvas in
HTML5,” Web 2.0 Security & Privacy 20 (W2SP), pp. 1–12, 2012.
[20] M. Mulazzani, P. Reschl, and M. Huber, “Fast and Reliable Browser
Identiﬁcation with JavaScript Engine Fingerprinting,” Proceedings
of W2SP, 2013.
[Online]. Available: http://www.sba-research.org/
wp-content/uploads/publications/jsﬁngerprinting.pdf
[21] N. Nikiforakis, W. Joosen, and B. Livshits, “PriVaricator,” Proceedings
of the 24th International Conference on World Wide Web - WWW ’15,
pp. 820–830, 2015. [Online]. Available: http://dl.acm.org/citation.cfm?
doid=2736277.2741090
[22] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and
G. Vigna, “Cookieless monster: Exploring the ecosystem of web-based
device ﬁngerprinting,” Proceedings - IEEE Symposium on Security and
Privacy, pp. 541–555, 2013.
[23] M. Perry, E. Clark, and S. Murdoch, “The Design and Implementation
of the Tor Browser,” Tech. Rep., May 2015, https://www.torproject.org/
projects/torbrowser/design.
[24] C. F. Torres, H. Jonker, and S. Mauw, “FP-block: Usable web privacy
by controlling browser ﬁngerprinting,” ESORICS, 2015, vol. 9327, no.
October, pp. 3–19, 2015.
[25] W. Wu,
J. Wu, Y. Wang, Z. Ling,
“Efﬁ-
cient Fingerprinting-Based Android Device Identiﬁcation With Zero-
Permission Identiﬁers,” vol. 4, pp. 8073–8083, 2016.
and M. Yang,
[26] T.-F. Yen, Y. Xie, F. Yu, R. P. Yu, and M. Abadi, “Host Fingerprinting
and Tracking on the Web: Privacy and Security Implications,” Network
and Distributed System Security Symposium, pp. 1–16, 2012.
REFERENCES
[1] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and
C. Diaz, “The Web Never Forgets: Persistent Tracking Mechanisms
in the Wild,” Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security - CCS ’14, pp. 674–689, 2014.
[2] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. G¨urses, F. Piessens,
and B. Preneel, “FPDetective,” Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security - CCS ’13, pp.
1129–1140, 2013. [Online]. Available: http://dl.acm.org/citation.cfm?
doid=2508859.2516674
[3] F. Alaca and P. C. V. Oorschot, “Device Fingerprinting for
Augmenting Web Authentication: Classiﬁcation and Analysis of
Methods,” Annual Computer Security Applications Conference (ASAC
’32), 2016. [Online]. Available: http://people.scs.carleton.ca/∼paulv/
papers/acsac2016-device-ﬁngerprinting.pdf
[4] S. Bernard, L. Heutte, and S. Adam, “Inﬂuence of hyperparameters on
random forest accuracy,” Proc. Int. Workshop Multiple Classiﬁer Syst.,
vol. 5519 LNCS, pp. 171–180, 2009.
[5] K. Boda, ´A. M. F¨oldes, G. G. Guly´as, and S. Imre, “User tracking
on the web via cross-browser ﬁngerprinting,” in Nordic Conference on
Secure IT Systems. Springer, 2011, pp. 31–46.
[6] L. Breiman, “Random Forests,” Machine Learning, vol. 45, no. 1,
[Online]. Available: http://dx.doi.org/10.1023/A:
pp. 5–32, 2001.
1010933404324
[7] Y. Cao, “(Cross-) Browser Fingerprinting via OS and Hardware Level
Features,” 24nd Annual Network and Distributed System Security Sym-
posium, NDSS’17, no. March, 2017.
[8] P. Eckersley, “How unique is your web browser?” Proceedings of the
10th Privacy Enhancing Technologies Symposium (PETS), 2010.
[9] S. Englehardt and A. Narayanan, “Online Tracking: A 1-million-site
Measurement and Analysis,” Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security - CCS’16, no. 1,
pp. 1388–1401, 2016.
[10] D. Fiﬁeld and S. Egelman, “Fingerprinting web users through font
metrics,” Financial Cryptography and Data Security, vol. 8975, pp.
107–124, 2015.
[11] T. Hupperich, D. Maiorca, M. K¨uhrer, T. Holz, and G. Giacinto,
“On the Robustness of Mobile Device Fingerprinting,” Proceedings
the 31st Annual Computer Security Applications Conference,
of
pp. 191–200, 2015. [Online]. Available: http://dl.acm.org/citation.cfm?
doid=2818000.2818032
[12] P. Laperdrix, B. Baudry, and V. Mishra, “FPRandom: Randomizing
core browser objects
to break advanced device ﬁngerprinting
techniques,” Proceedings - 9th Int. Symposium on Engineering Secure
Software and Systems, ESSoS 2017, Jul. 2017. [Online]. Available:
https://hal.inria.fr/hal-01527580
[13] P. Laperdrix, W. Rudametkin, and B. Baudry, “Mitigating Browser
Fingerprint Tracking: Multi-level Reconﬁguration and Diversiﬁcation,”
Proceedings - 10th Int. Symposium on Software Engineering for
Adaptive and Self-Managing Systems, SEAMS 2015, pp. 98–108, 2015.
[Online]. Available: https://hal.inria.fr/hal-01121108
[14] ——, “Beauty and the Beast: Diverting Modern Web Browsers
to Build Unique Browser Fingerprints,” Proceedings - 2016 IEEE
Symposium on Security and Privacy, SP 2016, pp. 878–894, 2016.
[Online]. Available: https://hal.inria.fr/hal-01285470
[15] G.
Louppe,
L. Wehenkel, A.
importances
P. Geurts,
randomized
“Understanding variable
trees,” Advances
Information Processing Systems 26,
pp. 431–439, 2013. [Online]. Available: http://papers.nips.cc/paper/
4928-understanding-variable-importances-in-forests-of-randomized-trees.
pdf
Sutera,
in forests of
in Neural
and
[16] O. Loyola-Gonz´alez, M. Garc´ıa-Borroto, M. A. Medina-P´erez, J. F.
Mart´ınez-Trinidad,
J. A. Carrasco-Ochoa, and G. De Ita, An
Empirical Study of Oversampling and Undersampling Methods for
LCMine an Emerging Pattern Based Classiﬁer. Berlin, Heidelberg:
Springer Berlin Heidelberg, 2013, pp. 264–273. [Online]. Available:
http://dx.doi.org/10.1007/978-3-642-38989-4 27
J. R. Mayer, “Internet Anonymity in the Age of Web 2.0,” A Senior
Thesis presented to the Faculty of
the Woodrow Wilson School of
Public and International A airs in partial ful llment of the requirements
[17]
741
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply.