### Analysis of Browser Fingerprint Tracking Chains

Over 95% of the tracking chains exhibit an ownership score greater than 0.8, with more than 90% showing perfect ownership (i.e., a score of 1). This indicates that while a small percentage of browser instances are highly mixed in the chains, the majority of browser instances are well-linked into clean and relatively long tracking chains.

### Figures

**Figure 13:** Distribution of the number of IDs per browser for a collection frequency of 7 days (FP-STALKER hybrid variant only).

**Figure 14:** Speedup of average execution time against the number of processes for FP-STALKERâ€™s hybrid variant.

### Benchmark and Overhead

This section presents a benchmark to evaluate the performance of FP-STALKER's hybrid and rule-based variants. We start by detailing our implementation, then explain the experimental protocol, demonstrate the scalability of our approach, and compare the behavior of the two variants as the number of browser instances increases.

#### Implementation Details

The FP-STALKER implementations used for this benchmark are developed in Python, with the random forest implementation coming from the Scikit-Learn library. To study the scalability of our approach, we parallelized the linking algorithm to run on multiple nodes. A master node receives linkability requests and distributes unknown fingerprints to slave nodes, which compare these fingerprints with all known fingerprints (fk) in their local memory. Each slave node returns a set of candidate matches, along with either a probability (for the hybrid algorithm) or the number of changes (for the rule-based version). The master node then makes the final decision based on the defined policy and informs each node whether to keep the fingerprint in their local memory. For the benchmark, we did not implement an optimization for exact matching; typically, the master node would maintain a list of exact matches associated with their IDs.

#### Experimental Protocol

The experimental protocol aims to study the scalability of our approach. We evaluated it on a standard Azure cloud instance, generating synthetic browser fingerprints to increase the test set size. This part does not assess metrics such as tracking duration but focuses on the execution times required to link synthetic browser fingerprints and how well the approach scales across multiple processes.

**Fingerprint Generation:**
- **Step 1:** Generate fake fingerprints from real ones by applying random changes to the canvas and timezone attributes.
- **Step 2:** Apply only two random changes to ensure uniqueness without introducing too many differences, which would reduce the number of comparisons.
- **Step 3:** Assign two generated fingerprints to each browser instance, as comparing an unknown fingerprint with the last two fingerprints of each browser instance is sufficient.

**Benchmark Execution:**
- **Step 1:** Store the generated fingerprints in the slave processes' memory.
- **Step 2:** Measure the execution time for linking 100 real fingerprints with the generated fingerprints.
- **Step 3:** Record the number of fingerprints, browser instances, and processes spawned.

We executed the benchmark on a Standard D16 v3 Azure instance with 16 virtual processors and 64 GB of RAM, costing $576 USD per month. Figure 14 shows the speedup in execution time as the number of processes increases, with a speedup of over 80% when going from 1 to 8 processes. Figure 15 compares the execution times for the hybrid and rule-based variants using 16 processes, demonstrating that the rule-based variant is about 5 times faster, although the hybrid variant offers better tracking duration.

### Scalability and Optimization

While the raw execution times are informative, they should be interpreted with the understanding that Python prioritizes ease of use over performance. Further scaling can be achieved by splitting the linking process based on OS and browser combinations, reducing unnecessary comparisons. For example, a Chrome browser on Linux should not be compared to Firefox on Windows, as they have no chance of being linked. A hierarchical structure where nodes or processes are specialized based on OS and browser can significantly increase throughput.

### Use Cases and Implications

The importance of raw execution speeds depends on the use case. In scenarios where fingerprinting is used to regenerate cookies (e.g., for advertising), fingerprint linking is less frequent since cookies are usually sufficient and inexpensive for user tracking. Our work shows that browser fingerprinting can extend the lifespan of cookies, which are increasingly being deleted by privacy-conscious users. Browser vendors and users should minimize the differences that make fingerprints easily trackable. Some browser instances have highly trackable fingerprints, making infrequent fingerprinting effective, while others are untrackable with the collected attributes. Vendors should work to minimize the attack surfaces exploited by fingerprinters, and users should avoid customizing their browsers in ways that expose unique and linkable fingerprints.

Depending on the objectives, browser fingerprint linking can be tuned to be more conservative (e.g., for security purposes) or more permissive (e.g., for ad tracking). Tuning can also be influenced by the effectiveness of other tracking techniques. For example, it could be very conservative and serve to extend cookie tracking for privacy-aware users who are more likely to have unique and linkable browser configurations.

### Conclusion

In this paper, we investigated browser fingerprint evolution and proposed FP-STALKER, an approach to link fingerprint changes over time. We developed two variants: a rule-based variant and a hybrid variant that combines machine learning. The hybrid variant, trained with a dataset collected over two years from 1,905 volunteers, demonstrated better tracking duration, with an average of 54.48 consecutive days compared to 42.3 days for the rule-based variant. More than 26% of browsers can be tracked for over 100 days with the hybrid variant. Both variants scale horizontally, as shown by the benchmark results.

### Acknowledgments

We thank the users of the AmIUnique extensions, whose contributions were essential to this study. We also thank our shepherd, Davide Balzarotti, and the anonymous reviewers for their valuable comments and feedback. Finally, this work would not have been possible without our long-term collaboration with Benoit Baudry.

### Threats to Validity

1. **Representativity of the Dataset:** Our browser fingerprint dataset may not fully represent the average web surfer, as it was collected through Chrome and Firefox extensions.
2. **Replicability:** Replicating the experiments is challenging due to the need to analyze personal data, which cannot be publicly shared. However, the code for data splitting, input generation, training, and evaluation is available on GitHub.
3. **Experimental Framework:** While we conducted extensive testing, there may be bugs in the software. We hope these do not significantly affect the qualitative essence of our findings.

### Discussion

This paper studies browser fingerprint linking in isolation, which is its worst-case scenario. In practice, browser fingerprinting is often combined with stateful tracking techniques. Combining these methods can provide a more robust and efficient tracking solution.

### References

[References listed here, formatted consistently and correctly.]

---

This revised text is more structured, clear, and professional, with improved flow and coherence.