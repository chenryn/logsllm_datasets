27 
28 
29 
30 
31 
Barcode 
Code 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
(cid:57) 
However,  none  of  the  features  seems  to  provide  users  with 
information  that  will  help  them  make  a  better  security  decision. 
As  to  the  user  confirmation  feature,  users  see  only  a  URL  and 
they often click to continue to visit the site without much thinking 
about the security consequences. Unsophisticated users may even 
not be able to recognize malicious URLs. The preview feature can 
be  easily  abused,  incapable  of  providing  users  with  needed 
security  information  either;  a  well  designed  fraudulent  website 
can only give a false sense of security to users. 
Among  the  31  scanners,  only  two  (0.06%),  “Norton  Snap  QR 
Code  Reader”  and  “QR  Pal  –  QR  &  Barcode  Scanner”,  had  a 
feature  called  security  warning.  Upon  scanning  a  QR  code 
containing a malicious URL, Norton Snap and QR Pal equipped 
342with the feature display the URL along with a warning message 
before loading the website of the URL, as shown in Figure 1. 
(a)                                      (b) 
Figure 1. Warning messages displayed in two existing QR 
code scanners: (a) Norton Snap; (b) QR Pal 
2.2.2  Evaluation of Two Scanners 
Since Norton Snap and QR Pal provide various levels of security 
warnings for malicious URLs, it would be interesting to study the 
accuracy of those warnings. During the testing for measuring their 
detection rates, we applied the default settings  of  those  two  QR 
code scanners. We investigated two types of errors, false positive 
and false negative errors. Since we believe false  negative  errors 
are  more  serious  that  false  positive  ones,  we  conducted  a  more 
extensive testing on false negative errors. 
2.2.2.1  Benign URLs 
To study whether the two QR scanners had false positive errors or 
not, we used DMOZ Open Directory Project as data set, of which 
all  entities  are  vetted  by  editors  who  also  go  through  a  vetting 
process [15], and randomly chose one URL from each of the 10 
random  subcategories  under  15  categories  as  follows:  Arts, 
Business,  Computers,  Games,  Health,  Home,  Kids  and  Teens, 
News,  Recreation,  Reference,  Regional,  Science,  Shopping, 
Society,  and  Sports.  Out  of  150  URLs,  Norton  Snap  took  16 
URLs as untested rating, 2 as malicious, and the remaining 132 as 
trusted ones. So the false positive rate of Norton Snap was 1.33% 
(2/150).  QR  Pal  took  all  the  150  URLs  as  benign,  thus  we 
concluded that QR Pal did not have false positive errors.  
2.2.2.2  Phishing URLs 
Testing  phishing  URLs,  drawn  from  PhishTank,  was  conducted 
based  on  the  following  plan:  first,  we  conducted  a  preliminary 
testing using a small sample size to see if the two scanners had a 
desirable  detection  rate  for  phising  URLs,  by  setting  90% 
detection  rate  as  a  baseline  that  is  usually  achieved  by  email-
based  phishing  detection  tools  [16]  (1st  phase).  Since  their 
performance  was  way  below  than  the  baseline,  we  decided  to 
conduct a more comprehensive testing with a larger sample size 
(2nd phase).  
The First Phase 
When analyzing a site, Norton Snap goes through the Norton Safe 
Web  [17]  to  identify  trusted  and  malicious  sites,  and  gives  the 
corresponding  ratings.  Specifically,  Norton  Safe  Web  will 
evaluate a site by computing the three factors, computer threats, 
and 
it 
is 
ratings 
as 
SAFE, 
two 
factors, 
the  other 
UNTESTED, 
identity  threats,  and  annoyance  factors.  A  site  is  identified 
malicious if Norton detects one or more threats from any of the 
above three factors. If none of the three threats was found, then 
the  site  is  identified  as  a  trusted  one.  Norton  Snap  has  five 
follows:  WARNING_MALICIOUS, 
security 
CAUTION, 
SECURED. 
WARNING_MALICIOUS or CAUTION rating indicates that the 
URL is malicious. UNTESTED means the site has not been tested 
yet.  SAFE  or  SECURED  implies  that  the  URL  is  trusted.  The 
difference between WARNING_MALICIOUS and CAUTION is 
that: if a site is identified to have one or more computer threats 
regardless  of 
rated  as 
WARNING_MALICIOUS, otherwise CAUTION. If a site passes 
all  the  above  three  factors,  Norton  Safe  Web  then  checks  if  it 
satisfies at least one item of Ecommerce Safety [18], if yes, the 
site is rated as SECURED, otherwise, rated as SAFE. 
In the first phase, we randomly picked and scanned 15 phishing 
URLs  on  Jun  28,  2012  using  the  two  apps.  Our  analysis  result 
showed  that,  for  Norton  Snap,  only  26.67%  (4/15)  URLs  were 
predicted correct, 60% (9/15) scans did not provide any security 
information  by  displaying  “UNTESTED”,  which  actually  does 
not  provide  helpful  warnings  for  users  to  decide  to  open  a  site, 
13.33% (2/15) cases gave the wrong security information. QR Pal 
either provides warning information for malicious URLs or opens 
the  URL  for  the  benign  URLs.  Our  analysis  result  on  QR  Pal 
showed that 66.67% (10/15) were predicted correct, and it opened 
the  remaining  5  malicious  URLs  directly  without  any  user 
confirmation. 
Through  the  preliminary  testing,  we  discovered  that  neither 
Norton  Snap  nor  QR  Pal  had  a  desirable  detection  rate  for 
phishing URLs. Their performance was way below the threshold 
of 90%.  
The Second Phase 
In the second phase, we randomly chose 400 out of 6131 entries 
(6.52%) from the PhishTank dataset downloaded on Jul 7, 2012.  
Table 2.  Detection of phishing attacks 
Norton Snap 
QR Pal 
Correct 
% 
28.00 
27.75 
# 
112 
111 
Neutral 
% 
37.50 
0.00 
# 
150 
0 
Incorrect 
# 
% 
137 
289 
34.25 
72.25 
The results in Table 2 show that both Norton Snap and QR Pal 
were  quite  disappointing  in  terms  of  their  detection  of  phishing 
attacks.  Norton  Snap  only  detected  28%  (112/400,  95% 
Confidence,  CI-4.25%)  of  the  URLs  correctly.  For  37.5%  of 
(150/400)  the  scans,  Norton  Snap  did  not  provide  any  security 
warning  for  users.  What  is  worse,  it  provided  wrong  security 
information  for  the  remaining  34.25%  (137/400)  cases.  For  QR 
Pal,  it  did  not  contain  the  neutral  case.  The  detection  rate  was 
only 27.75% (111/400, 95% Confidence, CI-4.24%).  
2.2.2.3  Malware URLs 
Malware attack is another popular attack on Android. We tested 
the  two  QR  code  scanners  against  the  attacks  using  malware 
obtained  from  http://malgenomeproject.org  [3].  Specifically,  we 
used  malware  under 
the  drive-by  download  categories 
(GGTracker, Jifake, Spitmo, and Zitmo) and repackaging malware 
categories  (AnserverBot  and  DroidKungFu).  Each  of  the  four 
343tested 
drive-by downloaded categories contains only one malware. We 
chose  all  these  four  malware  for  testing.  For  AnserverBot  and 
DroidKungFu,  we  randomly  picked  one  malware  from  each 
category. We uploaded these six malware to a personal homepage 
http://infohost.nmt.edu/~hyao,  and 
the  corresponding 
URLs, thus simulating a zero-day attack.  
We found that both Norton Snap and QR Pal detected very poorly 
for all the six situations. Norton Snap only checked if the domain 
of the URL was secure or not. Therefore, since our test domain 
was not classified as malicious, it gave the security rating “Safe”, 
so  that  users  could  easily  download  the  malware.    On  the  other 
hand,  QR  Pal  did  not  download  any  of  these  malware  with  its 
default setting. However, it could download all these six malware 
if its default Built-in browser setting in the general settings was 
turned off, which could be easily done by users who just followed 
the  instructions  displayed  by  the  app,  upon  receiving  the 
download request from the users. 
3.  OUR SOLUTION 
Our  approach  called  SafeQR  aimed  at  two  goals  in  order  to 
address  the  poor  performance  problem  of  the  existing  QR  code 
scanners. The first was to enhance the effectiveness of detecting 
malicious  URLs  used  for  phishing  and  malware  attacks.  The 
second  was  to  improve  user  perception  of  security  when  a  QR 
code is scanned and used so that users can make a better security 
decision.  For  this  purpose,  we  focused  on  how  to  improve  the 
effectiveness  of  the  security  warnings  by  providing  a  better 
mobile UI design. 
3.1  Malicious URLs Detection 
Two well-known security APIs, Google Safe Browsing API [19] 
and  PhishTank  API  [20],  were  adopted  for  our  solution  to 
improve the effectiveness of detecting malicious URLs.  
Safe  Browsing,  developed  by  Google,  is  a  service  that  enables 
applications to check URLs against Google’s constantly updated 
lists of suspected phishing and malware websites. For simplicity, 
we  chose  Safe  Browsing  Lookup  API  [21],  queried  the  URLs 
through  HTTP  GET  request,  and  got  the  state  of  the  URL(s) 
directly.  PhishTank  contains  a  blacklist  of  phishing  URLs 
consisting of manually verified websites. PhishTank provides API 
for  developers  to  lookup  a  URL’s  status  in  their  database.  We 
used the API to query a URL’s status, thus further enhancing the 
capability for detecting phishing scams. 
In addition, if the URL  string  ends  with .apk,  this  means  that  a 
non-official Android market application will be downloaded to a 
user’s mobile phone. Specifically, if “Unknown Sources” setting 
is checked in Android, the app will be automatically downloaded 
to the user’s Android device. If the setting is not checked, a dialog 
will  pop  up  to  ask  the  user  if  she  wants  to  check  the  option  to 
download  the  app.  Users  can  easily  tick  “Unknown  Sources” 
option  just  by  following  the  instructions  in  the  dialog,  and  then 
download and install the application. Our solution checked if the 
URL  ended  with  “.apk”,  and  if  yes,  then  we  provided  potential 
warnings to users, as shown in Figure 2. 
(a)                                      (b) 
Figure 2. Our UI designs: (a) UI for phishing or malware 
attacks; (b) UI for the URL ending with “.apk” 
The algorithm for our solution is outlined in the following pseudo 
code.  
   Algorithm detection(url) 
  1     status = 0; 
  2     if  google‐safebrowsing‐code(url)==200 
  3          if contains‐phishing && contains‐malware 
  4              status = 3; 
  5          else if contains‐malware 
  6              status = 2; 
  7          else if contains‐phishing 
  8              status =1; 
  9     if  in‐phishtank‐list(url) 
10          if status == 0 || status==2 