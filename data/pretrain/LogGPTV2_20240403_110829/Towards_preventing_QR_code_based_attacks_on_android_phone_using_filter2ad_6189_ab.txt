### 优化后的文本

---

#### 条形码
条形码  
代码  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  
(cid:57)  

然而，这些功能似乎都没有提供足够的信息来帮助用户做出更安全的决策。例如，用户确认功能仅显示URL，许多用户在没有仔细考虑安全后果的情况下就点击继续访问网站。不熟悉技术的用户甚至可能无法识别恶意URL。预览功能也容易被滥用，并且同样无法为用户提供所需的安全信息；一个设计精良的欺诈网站可能会给用户一种虚假的安全感。

在31款扫描器中，只有两款（0.06%），“Norton Snap QR Code Reader”和“QR Pal – QR & Barcode Scanner”，具有称为“安全警告”的功能。当扫描包含恶意URL的二维码时，这两款应用会在加载该URL的网站之前显示URL及警告信息，如图1所示。

(a)                                      (b)  
图1. 两款现有二维码扫描器中的警告信息：(a) Norton Snap；(b) QR Pal

#### 2.2.2 两款扫描器的评估

由于Norton Snap和QR Pal提供了不同程度的安全警告，研究这些警告的准确性显得尤为有趣。在测试其检测率时，我们使用了这两款二维码扫描器的默认设置。我们研究了两种类型的错误：误报和漏报。我们认为漏报比误报更为严重，因此对漏报进行了更为广泛的测试。

##### 2.2.2.1 良性URL

为了研究这两款二维码扫描器是否存在误报，我们使用了DMOZ Open Directory Project的数据集，其中所有实体都经过编辑审核，而这些编辑本身也经过了严格的审核过程[15]。我们从以下15个类别下的10个随机子类别中各随机选择了一个URL：艺术、商业、计算机、游戏、健康、家庭、儿童与青少年、新闻、娱乐、参考、地区、科学、购物、社会和体育。在150个URL中，Norton Snap将16个URL标记为未测试，2个标记为恶意，其余132个标记为可信。因此，Norton Snap的误报率为1.33%（2/150）。QR Pal将所有150个URL都标记为良性，因此我们可以得出结论，QR Pal没有误报。

##### 2.2.2.2 钓鱼URL

钓鱼URL的测试基于PhishTank数据集进行，测试计划如下：首先，我们使用一个小样本进行初步测试，以查看这两款扫描器对钓鱼URL的检测率是否达到90%的基线水平，这是电子邮件钓鱼检测工具通常能达到的水平[16]（第一阶段）。由于它们的表现远低于基线，我们决定进行更大规模的测试（第二阶段）。

**第一阶段**

当分析一个网站时，Norton Snap通过Norton Safe Web[17]来识别可信和恶意网站，并给出相应的评级。具体来说，Norton Safe Web会根据三个因素计算一个网站的安全性：计算机威胁、身份威胁和烦扰因素。如果检测到任何一个威胁，该网站将被标记为恶意。如果没有发现任何威胁，则该网站被标记为可信。Norton Snap有五个安全级别：WARNING_MALICIOUS、CAUTION、UNTESTED、SAFE和SECURED。WARNING_MALICIOUS或CAUTION表示URL是恶意的。UNTESTED表示该网站尚未被测试。SAFE或SECURED表示URL是可信的。WARNING_MALICIOUS和CAUTION的区别在于：如果一个网站被检测出至少一个计算机威胁，则标记为WARNING_MALICIOUS，否则标记为CAUTION。如果一个网站通过了上述三个因素的检查，Norton Safe Web还会进一步检查它是否满足Ecommerce Safety[18]中的至少一项标准，如果满足则标记为SECURED，否则标记为SAFE。

在第一阶段，我们在2012年6月28日随机选择了15个钓鱼URL进行扫描。分析结果显示，对于Norton Snap，只有26.67%（4/15）的URL被正确预测，60%（9/15）的扫描结果为“UNTESTED”，这实际上并未为用户提供有用的警告信息，13.33%（2/15）的情况给出了错误的安全信息。QR Pal要么为恶意URL提供警告信息，要么直接打开良性URL。我们的分析结果显示，QR Pal正确预测了66.67%（10/15），但直接打开了剩余5个恶意URL，没有任何用户确认。

通过初步测试，我们发现Norton Snap和QR Pal对钓鱼URL的检测率均不理想，表现远低于90%的阈值。

**第二阶段**

在第二阶段，我们从2012年7月7日下载的PhishTank数据集中随机选择了400个条目（占总条目的6.52%）。

表2. 钓鱼攻击检测

| 扫描器 | 正确检测 | 中立 | 错误检测 |
|--------|----------|------|----------|
| Norton Snap | 28.00% (112/400, 95% CI-4.25%) | 37.50% (150/400) | 34.25% (137/400) |
| QR Pal | 27.75% (111/400, 95% CI-4.24%) | 0.00% (0/400) | 72.25% (289/400) |

表2的结果显示，Norton Snap和QR Pal在钓鱼攻击检测方面表现不佳。Norton Snap只正确检测了28%（112/400，95%置信区间CI-4.25%）的URL。对于37.5%（150/400）的扫描，Norton Snap未提供任何安全警告。更糟糕的是，在剩下的34.25%（137/400）情况下，它提供了错误的安全信息。对于QR Pal，它没有中立情况，检测率仅为27.75%（111/400，95%置信区间CI-4.24%）。

##### 2.2.2.3 恶意软件URL

恶意软件攻击是Android平台上的另一种常见攻击。我们使用来自http://malgenomeproject.org[3]的恶意软件测试了这两款二维码扫描器。具体来说，我们使用了驱动式下载类别的恶意软件（GGTracker、Jifake、Spitmo和Zitmo）和重新打包类别的恶意软件（AnserverBot和DroidKungFu）。每个驱动式下载类别只包含一个恶意软件，我们选择了所有这四个恶意软件进行测试。对于AnserverBot和DroidKungFu，我们从每个类别中随机选择了一个恶意软件。我们将这六个恶意软件上传到个人主页http://infohost.nmt.edu/~hyao，并生成相应的URL，模拟零日攻击。

我们发现，Norton Snap和QR Pal在这六种情况下检测效果都很差。Norton Snap仅检查了URL的域名是否安全。由于我们的测试域名未被分类为恶意，因此它给出了“安全”的评级，用户可以轻易下载恶意软件。另一方面，QR Pal在默认设置下不会下载这些恶意软件。但是，如果用户关闭了默认的内置浏览器设置（只需按照应用程序提供的指示操作），它可以下载所有这六个恶意软件。

---

#### 3. 我们的解决方案

我们的方法SafeQR旨在解决现有二维码扫描器性能不佳的问题，主要目标有两个：一是提高检测用于钓鱼和恶意软件攻击的恶意URL的有效性；二是改善用户在扫描和使用二维码时的安全感知，使用户能够做出更好的安全决策。为此，我们专注于如何通过改进移动用户界面设计来提高安全警告的有效性。

##### 3.1 恶意URL检测

为了提高检测恶意URL的有效性，我们采用了两个知名的API：Google Safe Browsing API[19]和PhishTank API[20]。

Google Safe Browsing是由Google开发的服务，允许应用程序检查URL是否被列入不断更新的疑似钓鱼和恶意网站列表。为了简化操作，我们选择了Safe Browsing Lookup API[21]，通过HTTP GET请求查询URL，并直接获取URL的状态。PhishTank包含了一个由人工验证的钓鱼URL黑名单，并提供了API供开发者查询URL在数据库中的状态。我们使用该API进一步增强了检测钓鱼诈骗的能力。

此外，如果URL字符串以.apk结尾，这意味着将要下载一个非官方的Android市场应用程序。具体来说，如果Android设备启用了“未知来源”设置，应用程序将自动下载到用户的Android设备上。如果未启用该设置，将会弹出对话框询问用户是否要勾选该选项以下载应用程序。用户只需按照对话框中的指示操作即可轻松勾选“未知来源”选项并下载安装应用程序。我们的解决方案检查了URL是否以“.apk”结尾，如果是，则向用户提供潜在的警告信息，如图2所示。

(a)                                      (b)  
图2. 我们的用户界面设计：(a) 钓鱼或恶意软件攻击的UI；(b) URL以“.apk”结尾的UI

我们的解决方案算法如下：

```pseudo
Algorithm detection(url)
1. status = 0;
2. if google_safebrowsing_code(url) == 200
3.     if contains_phishing && contains_malware
4.         status = 3;
5.     else if contains_malware
6.         status = 2;
7.     else if contains_phishing
8.         status = 1;
9. if in_phishtank_list(url)
10.    if status == 0 || status == 2
```

---

希望这个优化后的版本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！