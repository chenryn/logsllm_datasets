通常，由 ZooKeeper 管理的资料型别的变化十分缓慢：代表 “分割槽 7 中的节点执行在 `10.1.1.23` 上” 的资讯可能会在几分钟或几小时的时间内发生变化。它不是用来储存应用的执行时状态的，后者每秒可能会改变数千甚至数百万次。如果应用状态需要从一个节点复制到另一个节点，则可以使用其他工具（如 Apache BookKeeper 【108】）。
#### 服务发现
ZooKeeper、etcd 和 Consul 也经常用于服务发现 —— 也就是找出你需要连线到哪个 IP 地址才能到达特定的服务。在云资料中心环境中，虚拟机器来来往往很常见，你通常不会事先知道服务的 IP 地址。相反，你可以配置你的服务，使其在启动时注册服务登录档中的网路端点，然后可以由其他服务找到它们。
但是，服务发现是否需要达成共识还不太清楚。DNS 是查询服务名称的 IP 地址的传统方式，它使用多层快取来实现良好的效能和可用性。从 DNS 读取是绝对不线性一致性的，如果 DNS 查询的结果有点陈旧，通常不会有问题【109】。DNS 的可用性和对网路中断的鲁棒性更重要。
尽管服务发现并不需要共识，但领导者选举却是如此。因此，如果你的共识系统已经知道领导是谁，那么也可以使用这些资讯来帮助其他服务发现领导是谁。为此，一些共识系统支援只读快取副本。这些副本非同步接收共识演算法所有决策的日志，但不主动参与投票。因此，它们能够提供不需要线性一致性的读取请求。
#### 成员资格服务
ZooKeeper 和它的小伙伴们可以看作是成员资格服务（membership services）研究的悠久历史的一部分，这个历史可以追溯到 20 世纪 80 年代，并且对建立高度可靠的系统（例如空中交通管制）非常重要【110】。
成员资格服务确定哪些节点当前处于活动状态并且是丛集的活动成员。正如我们在 [第八章](ch8.md) 中看到的那样，由于无限的网路延迟，无法可靠地检测到另一个节点是否发生故障。但是，如果你透过共识来进行故障检测，那么节点可以就哪些节点应该被认为是存在或不存在达成一致。
即使它确实存在，仍然可能发生一个节点被共识错误地宣告死亡。但是对于一个系统来说，知道哪些节点构成了当前的成员关系是非常有用的。例如，选择领导者可能意味著简单地选择当前成员中编号最小的成员，但如果不同的节点对现有的成员都有谁有不同意见，则这种方法将不起作用。
## 本章小结
在本章中，我们从几个不同的角度审视了关于一致性与共识的话题。我们深入研究了线性一致性（一种流行的一致性模型）：其目标是使多副本资料看起来好像只有一个副本一样，并使其上所有操作都原子性地生效。虽然线性一致性因为简单易懂而很吸引人 —— 它使资料库表现的好像单执行绪程式中的一个变数一样，但它有著速度缓慢的缺点，特别是在网路延迟很大的环境中。
我们还探讨了因果性，因果性对系统中的事件施加了顺序（什么发生在什么之前，基于因与果）。与线性一致不同，线性一致性将所有操作放在单一的全序时间线中，因果一致性为我们提供了一个较弱的一致性模型：某些事件可以是 **并发** 的，所以版本历史就像是一条不断分叉与合并的时间线。因果一致性没有线性一致性的协调开销，而且对网路问题的敏感性要低得多。
但即使捕获到因果顺序（例如使用兰伯特时间戳），我们发现有些事情也不能透过这种方式实现：在 “[光有时间戳排序还不够](#光有时间戳排序还不够)” 一节的例子中，我们需要确保使用者名称是唯一的，并拒绝同一使用者名称的其他并发注册。如果一个节点要透过注册，则需要知道其他的节点没有在并发抢注同一使用者名称的过程中。这个问题引领我们走向 **共识**。
我们看到，达成共识意味著以这样一种方式决定某件事：所有节点一致同意所做决定，且这一决定不可撤销。透过深入挖掘，结果我们发现很广泛的一系列问题实际上都可以归结为共识问题，并且彼此等价（从这个意义上来讲，如果你有其中之一的解决方案，就可以轻易将它转换为其他问题的解决方案）。这些等价的问题包括：
* 线性一致性的 CAS 暂存器
  暂存器需要基于当前值是否等于操作给出的引数，原子地 **决定** 是否设定新值。
* 原子事务提交
  资料库必须 **决定** 是否提交或中止分散式事务。
* 全序广播
  讯息系统必须 **决定** 传递讯息的顺序。
* 锁和租约
  当几个客户端争抢锁或租约时，由锁来 **决定** 哪个客户端成功获得锁。
* 成员 / 协调服务
  给定某种故障检测器（例如超时），系统必须 **决定** 哪些节点活著，哪些节点因为会话超时需要被宣告死亡。
* 唯一性约束
  当多个事务同时尝试使用相同的键建立冲突记录时，约束必须 **决定** 哪一个被允许，哪些因为违反约束而失败。
如果你只有一个节点，或者你愿意将决策的权能分配给单个节点，所有这些事都很简单。这就是在单领导者资料库中发生的事情：所有决策权归属于领导者，这就是为什么这样的资料库能够提供线性一致的操作，唯一性约束，完全有序的复制日志，以及更多。
但如果该领导者失效，或者如果网路中断导致领导者不可达，这样的系统就无法取得任何进展。应对这种情况可以有三种方法：
1. 等待领导者恢复，接受系统将在这段时间阻塞的事实。许多 XA/JTA 事务协调者选择这个选项。这种方法并不能完全达成共识，因为它不能满足 **终止** 属性的要求：如果领导者续命失败，系统可能会永久阻塞。
2. 人工故障切换，让人类选择一个新的领导者节点，并重新配置系统使之生效，许多关系型资料库都采用这种方方式。这是一种来自 “天意” 的共识 —— 由计算机系统之外的运维人员做出决定。故障切换的速度受到人类行动速度的限制，通常要比计算机慢（得多）。
3. 使用演算法自动选择一个新的领导者。这种方法需要一种共识演算法，使用成熟的演算法来正确处理恶劣的网路条件是明智之举【107】。
尽管单领导者资料库可以提供线性一致性，且无需对每个写操作都执行共识演算法，但共识对于保持及变更领导权仍然是必须的。因此从某种意义上说，使用单个领导者不过是 “缓兵之计”：共识仍然是需要的，只是在另一个地方，而且没那么频繁。好讯息是，容错的共识演算法与容错的共识系统是存在的，我们在本章中简要地讨论了它们。