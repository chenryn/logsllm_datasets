### WebLogic Server Additional Deployment Descriptors

WebLogic Server supports additional deployment descriptors in the `weblogic.xml` file, as detailed in Table 13. For more information on these descriptors, refer to the [weblogic.xml Deployment Descriptors documentation](#).

For general guidelines on securing web applications running within WebLogic, consult the [Programming WebLogic Security guide](#) and the [NSAâ€™s BEA WebLogic Platform Security Guide](#).

### 11.5 Programmatic Configuration: J2EE

The J2EE API for programmatic security includes methods from the `EJBContext` and `HttpServletRequest` interfaces. These methods allow components to make business-logic decisions based on the security role of the caller or remote user. The following J2EE APIs are commonly used for security configuration:

- **getRemoteUser**: Determines the user name with which the client authenticated.
- **isUserInRole**: Determines whether a remote user is in a specific security role.
- **getUserPrincipal**: Determines the principal name of the current user and returns a `java.security.Principal` object.

To ensure consistency with the configuration, the `security-role-ref` element should be declared in the deployment descriptor with a `role-name` subelement containing the role name to be passed to the `isUserInRole` method.

**Sample 11.9: Programmatic Security Example**

The following servlet demonstrates the use of programmatic security for login and identity management:

```java
package enterprise.programmatic_login;

import java.io.*;
import javax.annotation.security.DeclareRoles;
import javax.servlet.*;
import javax.servlet.http.*;

@DeclareRoles("javaee6user")
public class LoginServlet extends HttpServlet {
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {
            String userName = request.getParameter("txtUserName");
            String password = request.getParameter("txtPassword");

            out.println("Before Login<br>");
            out.println("IsUserInRole?.." + request.isUserInRole("javaee6user") + "<br>");
            out.println("getRemoteUser?.." + request.getRemoteUser() + "<br>");
            out.println("getUserPrincipal?.." + request.getUserPrincipal() + "<br>");
            out.println("getAuthType?.." + request.getAuthType() + "<br>");

            try {
                request.login(userName, password);
            } catch (ServletException ex) {
                out.println("Login Failed with a ServletException.." + ex.getMessage());
                return;
            }

            out.println("After Login...<br>");
            out.println("IsUserInRole?.." + request.isUserInRole("javaee6user") + "<br>");
            out.println("getRemoteUser?.." + request.getRemoteUser() + "<br>");
            out.println("getUserPrincipal?.." + request.getUserPrincipal() + "<br>");
            out.println("getAuthType?.." + request.getAuthType() + "<br>");

            request.logout();

            out.println("After Logout...<br>");
            out.println("IsUserInRole?.." + request.isUserInRole("javaee6user") + "<br>");
            out.println("getRemoteUser?.." + request.getRemoteUser() + "<br>");
            out.println("getUserPrincipal?.." + request.getUserPrincipal() + "<br>");
            out.println("getAuthType?.." + request.getAuthType() + "<br>");
        } finally {
            out.close();
        }
    }
}
```

For more detailed information, see the [Java EE Tutorial: Using Programmatic Security with Web Applications](#).

### 11.6 Microsoft IIS

ASP.NET/IIS applications use an optional XML-based configuration file named `web.config` to maintain application settings, including authentication, authorization, error pages, HTTP settings, and more. Without understanding these files, a transactional analysis would be difficult and inaccurate.

#### IIS Configuration Hierarchy

In IIS 7, the configuration system affects the hierarchy level and how one file can inherit from another. Figure 7 illustrates this hierarchy and the location of each file.

**Figure 7: IIS Configuration Files**

- **machine.config**
- **(root) web.config**
- **ApplicationHost.config**
- **windows\system32\inetsrv\web.config**
- **c:\inetpub\wwwroot\web.config**
- **http://localhost**
- **d:\MyApp\web.config**
- **http://localhost/MyApp**

If a `web.config` file is present at the root of a virtual directory, its settings will override the default settings in `machine.config`.

#### Security Settings in `web.config`

Many important security settings are configured in the `web.config` file. Some key parameters include:

- **authentication mode**: Default is ASP.NET forms-based authentication.
- **loginUrl**: Specifies the URL for login if no valid authentication cookie is found.
- **protection**: Specifies that the cookie is encrypted using 3DES or DES.
- **timeout**: Cookie expiry time in minutes.

**Table 14: Parameters in the `web.config` File**

| Parameter       | Description                                                                 |
|-----------------|-----------------------------------------------------------------------------|
| authentication  | Default is ASP.NET forms-based authentication.                              |
| loginUrl        | URL for login if no valid authentication cookie is found.                   |
| protection      | Specifies that the cookie is encrypted using 3DES or DES.                    |
| timeout         | Cookie expiry time in minutes.                                              |

### 11.7 Framework Specific Configuration: Microsoft IIS

Security features in IIS can be configured in the `Web.config` (application level) or `ApplicationHost.config` (server level) files. Key features include:

- **Permitted authentication methods**
- **Authorization rules**
- **Request filters and limits**
- **Use of SSL**
- **Source IP address filtering**
- **Error handling**

**Table 15: IIS Security Parameters**

| Parameter               | Function                                                                 |
|-------------------------|--------------------------------------------------------------------------|
| denyUrlSequences        | List of prohibited URL patterns.                                         |
| fileExtensions          | Allowed or prohibited file extensions.                                   |
| hiddenSegments          | URLs that cannot be browsed.                                             |
| requestLimits           | URL, content, query string, and HTTP header length limits.               |
| verbs                   | Allowed or prohibited verbs.                                             |
| alwaysAllowedUrls       | URLs always permitted.                                                   |
| alwaysAllowedQueryStrings | Query strings always allowed.                                            |
| denyQueryStringSequences | Prohibited query strings.                                                |
| filteringRules          | Custom filtering rules.                                                  |

### 11.8 Programmatic Configuration: Microsoft IIS

IIS security configuration can also be set programmatically using various languages and tools, such as:

- **appcmd.exe set config**
- **C#**
- **Visual Basic**
- **JavaScript**

**Example: Disabling Anonymous Authentication and Enabling Basic and Windows Authentication**

**Using appcmd.exe:**

```sh
appcmd.exe set config "MySite" -section:system.webServer/security/authentication /anonymousAuthentication /enabled:"False" /commit:apphost
appcmd.exe set config "MySite" -section:system.webServer/security/authentication /basicAuthentication /enabled:"True" /commit:apphost
appcmd.exe set config "MySite" -section:system.webServer/security/authentication /windowsAuthentication /enabled:"True" /commit:apphost
```

**Using C#:**

```csharp
using System;
using Microsoft.Web.Administration;

internal static class Sample {
   private static void Main() {
      using(ServerManager serverManager = new ServerManager()) { 
         Configuration config = serverManager.GetApplicationHostConfiguration();
         ConfigurationSection anonymousAuthenticationSection =
           config.GetSection("system.webServer/security/authentication/anonymousAuthentication", "MySite");
         anonymousAuthenticationSection["enabled"] = false;
         ConfigurationSection basicAuthenticationSection =
           config.GetSection("system.webServer/security/authentication/basicAuthentication", "MySite");
         basicAuthenticationSection["enabled"] = true;
         ConfigurationSection windowsAuthenticationSection =
           config.GetSection("system.webServer/security/authentication/windowsAuthentication", "MySite");
         windowsAuthenticationSection["enabled"] = true;
         serverManager.CommitChanges();
      }
   }
}
```

When reviewing source code, pay special attention to configuration updates in security sections.

### 11.9 Further IIS Configurations

#### Filtering Requests and URL Rewriting

IIS supports filtering and URL rewriting, which can be configured in the `web.config` file. For example, you can deny access to specific URL sequences, set maximum URL and query string lengths, and specify allowed and prohibited file extensions and HTTP verbs.

For detailed information on IIS security configuration, refer to the [IIS Security Configuration documentation](#). Specific security feature configuration information can be found in the [Authentication, Authorization, SSL, Source IP, Request Filtering, and Custom Request Filtering](#) sections.