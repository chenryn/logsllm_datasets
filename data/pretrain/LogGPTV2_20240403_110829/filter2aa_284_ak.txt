WebLogic server supports additional deployment descriptors in the “weblogic.xml” file as shown in table 13.
More information on WebLogic additional deployment descriptors may be found at weblogic.xml Deployment 
Descriptors.
For general guidelines on securing web applications running within WebLogic, see the Programming WebLog-
ic Security guide and the NSA’s BEA WebLogic Platform Security Guide.
11.5 Programmatic Configuration: J2EE
The J2EE API for programmatic security consists of methods of the EJBContext interface and the HttpServle-
tRequest interface. These methods allow components to make business-logic decisions based on the security 
role of the caller or remote user (there are also methods to authenticate users, but that is outside the scope of 
secure deployment configuration).
The J2EE APIs that interact with J2EE security configuration include:
• getRemoteUser, which determines the user name with which the client authenticated
• isUserInRole, which determines whether a remote user is in a specific security role.
• getUserPrincipal, which determines the principal name of the current user and returns a java.security. 
Use of these programmatic APIs should be reviewed to ensure consistency with the configuration. Specifically, 
the security-role-ref element should be declared in the deployment descriptor with a role-name subelement 
containing the role name to be passed to the isUserInRole method.
The code in sample 11.9 demonstrates the use of programmatic security for the purposes of programmatic 
login and establishing identities and roles. This servlet does the following:
• displays information about the current user.
• prompts the user to log in.
• prints out the information again to demonstrate the effect of the login method.
Parameter
Description
externally-defined
Role to principal mappings are externally defined in WebLogic Admin Console
run-as-principal-name
Assign a principal to a role when running as that role
run-as-role-assignment
security-permission
Filter
security-permission-spec
security-role-assignment
Contains the run-as-principal-name descriptor
Contains security-permission-spec descriptor
Tomcat provides a number of filters which may be configured to incoming requests
Specify application permissions [6]    
Explicitly assign principals to a role
Table 13: Weblogic Security Parameters
A5 - Security Misconfiguration
92
• Iogs the user out.
• prints out the information again to demonstrate the effect of the logout method.
package enterprise.programmatic_login;
import java.io.*;
import java.net.*;
import javax.annotation.security.DeclareRoles;
import javax.servlet.*;
import javax.servlet.http.*;
@DeclareRoles(“javaee6user”)
public class LoginServlet extends HttpServlet {
    /** 
     * Processes requests for both HTTP GET and POST methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, 
                 HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType(“text/html;charset=UTF-8”);
        PrintWriter out = response.getWriter();
        try {
            String userName = request.getParameter(“txtUserName”);
            String password = request.getParameter(“txtPassword”);
            out.println(“Before Login” + “”);
            out.println(“IsUserInRole?..” 
                        + request.isUserInRole(“javaee6user”)+””);
            out.println(“getRemoteUser?..” + request.getRemoteUser()+””);
            out.println(“getUserPrincipal?..” 
                        + request.getUserPrincipal()+””);
            out.println(“getAuthType?..” + request.getAuthType()+””);
            try {
                request.login(userName, password); 
            } catch(ServletException ex) {
                out.println(“Login Failed with a ServletException..” 
                    + ex.getMessage());
                return;
            }
            out.println(“After Login...”+””);
            out.println(“IsUserInRole?..” 
Sample 11.9
A5 - Security Misconfiguration
93
More detailed information can be found in the Java EE Tutorial: Using Programmatic Security with Web Appli-
cations.
11.6 Microsoft IIS
ASP.NET / IIS applications use an optional XML-based configuration file, named web.config, to maintain ap-
plication configuration settings. This covers issues such as authentication, authorization, error pages, HTTP 
settings, debug settings, web service settings, etc. Without knowledge of these files, a transactional analysis 
would be very difficult and not accurate.
In IIS 7 there is a configuration system which affects the hierarchy level and how one file can inherit from 
another. The following figure shows how this will work and the location of each file (Aguilar, 2006)
                        + request.isUserInRole(“javaee6user”)+””);
            out.println(“getRemoteUser?..” + request.getRemoteUser()+””);
            out.println(“getUserPrincipal?..” 
                        + request.getUserPrincipal()+””);
            out.println(“getAuthType?..” + request.getAuthType()+””);
            request.logout();
            out.println(“After Logout...”+””);
            out.println(“IsUserInRole?..” 
                        + request.isUserInRole(“javaee6user”)+””);
            out.println(“getRemoteUser?..” + request.getRemoteUser()+””);
            out.println(“getUserPrincipal?..”
                        + request.getUserPrincipal()+””);
            out.println(“getAuthType?..” + request.getAuthType()+””);
        } finally {
            out.close();
        }
    }
    ...
}
machine.config
(root) web.config
ApplicationHost.config
windows\system32\intsrv
web.config
c:\inetpub\wwwroot
http://localhost
web.config
d:\MyApp
http://localhost/MyApp
Figure 7: IIS Configuration Files
A5 - Security Misconfiguration
94
It is possible to provide a file web.config at the root of the virtual directory for a web application. If the file is 
absent, the default configuration settings in machine.config will be used. If the file is present, any settings in 
web.config will override the default settings.
Many of the important security settings are not set in the code, but in the framework configuration files. 
Knowledge of the framework is of paramount importance when reviewing framework-based applications. 
Some examples of framework specific parameters in the web.config file are shown in table 14.
11.7 Framework Specific Configuration: Microsoft IIS
Security features can be configured in IIS using the Web.config (application level) or ApplicationHost.config (server 
level) file, in the  section. The types of features that may be configured include:
• Permitted authentication methods
• Authorization rules
• Request filters and limits
• Use of SSL
• Source IP address filtering
• Error handling
The Web.config and ApplicationHost.config files should be included in code review. The 
Sample 11.10
Parameter
Description
authentication mode
The default authentication mode is ASP.NET forms-based authentication.
loginUrl
Specifies the URL where the request is redirected for login if no valid authentication cookie is found.
protection
timeout
Specifies that the cookie is encrypted using 3DES or DES but DV is not performed on the cookie. Beware of plaintext 
attacks.
Cookie expiry time in minutes.
Table 14: Parameters In The Web.config File
A5 - Security Misconfiguration
95
Server> sections should be reviewed to ensure all security configuration is as expected.
For guidelines on securing the overall configuration of Microsoft IIS, see the IIS supports basic, client certificate, 
digest, IIS client certificate, and Windows authentication methods. They are configured in the  section.
The example in sample 11.11 disables anonymous authentication for a site named MySite, then enables both 
basic authentication and windows authentication for the site.
IIS authorization configuration allows specification of users access to the site or server and is configured in the 
 section. 
The configuration in sample 11.12 removes the default IIS authorization settings, which allows all users access 
to Web site or application content, and then configures an authorization rule that allows only users with ad-
ministrator privileges to access the content.
IIS supports filtering, including enforcing limits, on incoming HTTP requests. Table 15 shows many of the IIS 
security parameters that can be set.
Sample 11.11
 section. The ex-
ample in sample 11.13:
• Denies access to two URL sequences. The first sequence prevents directory transversal and the second se-
quence prevents access to alternate data streams.
• Sets the maximum length for a URL to 2KB and the maximum length for a query string to 1KB.
Sample 11.13
Parameter
Function
denyUrlSequences
A list of prohibited URL patterns
fileExtensions
Allowed or prohibited file extensions
hiddenSegments
requestLimits
verbs
alwaysAllowedUrls
alwaysAllowedQueryStrings
denyQueryStringSequences
filteringRules
URLs that cannot be browsed
URL, content, query string, and HTTP header length limits
Allowed or prohibited verbs
URLs always permitted
Query strings always allowed
Prohibited query strings
Custom filtering rules
Table 15: IIS Security Parameters
A5 - Security Misconfiguration
97
• Denies access to unlisted file name extensions and unlisted HTTP verbs.
IIS allows specifying whether SSL is supported, is required, whether client authentication is supported or re-
quired, and cipher strength. It is configured in the  section.  The ex-
ample in figure A5.13 specifies SSL as required for all connections to the site MySite.
IIS allows restrictions on source IP addresses or DNS names. It is configured in the  section as shown in sample 11.15 where the example configuration denies access to the 
IP address 192.168.100.1 and to the entire 169.254.0.0 network:
Detailed information on IIS security configuration can be found at IIS Security Configuration. Specific security 
feature configuration information can be found at Authentication, Authorization, SSL, Source IP, Request Filter-
ing, and Custom Request Filtering[12].
11.8 Programmatic Configuration: Microsoft IIS
Microsoft IIS security configuration can also be programmatically set from various languages:
• appcmd.exe set config
• C#
• Visual Basic
• JavaScript
For example, disabling anonymous authentication for a site named MySite, then enabling both basic authenti-
cation and windows authentication for the site (as done via configuration in the section above) can be accom-
Sample 11.14
Sample 11.15
A5 - Security Misconfiguration
98
plished from the command line using the commands in figure sample 11.16.
Alternatively the same authentication setup can be coded programmatically as in sample 11.17.
When reviewing source code, special attention should be paid to configuration updates in security sections.
11.9 Further IIS Configurations
Filtering Requests and URL Rewriting
appcmd.exe set config “MySite” -section:system.webServer/security/authentication
      /anonymousAuthentication /enabled:”False” /commit:apphost
appcmd.exe set config “MySite” -section:system.webServer/security/authentication
     /basicAuthentication /enabled:”True” /commit:apphost
appcmd.exe set config “MySite” -section:system.webServer/security/authentication
    /windowsAuthentication /enabled:”True” /commit:apphost
Sample 11.16
using System;
using System.Text;
using Microsoft.Web.Administration;
internal static class Sample {
   private static void Main() {
      using(ServerManager serverManager = new ServerManager()) { 
         Configuration config = serverManager.GetApplicationHostConfiguration();
         ConfigurationSection anonymousAuthenticationSection =
           config.GetSection(“system.webServer/security/authentication
                              /anonymousAuthentication”, “MySite”);
         anonymousAuthenticationSection[“enabled”] = false;
         ConfigurationSection basicAuthenticationSection =
           config.GetSection(“system.webServer/security/authentication
                               /basicAuthentication”, “MySite”);
         basicAuthenticationSection[“enabled”] = true;
         ConfigurationSection windowsAuthenticationSection =
           config.GetSection(“system.webServer/security/authentication
                             /windowsAuthentication”, “MySite”);
         windowsAuthenticationSection[“enabled”] = true;
         serverManager.CommitChanges();
      }
   }
}
Sample 11.17