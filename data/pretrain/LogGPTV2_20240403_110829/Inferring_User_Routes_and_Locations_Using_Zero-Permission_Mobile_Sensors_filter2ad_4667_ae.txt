(k) Concord (σ = 29.58)
are discovered in the top 10 results. In case of cluster rank,
we examine the results in more details (excluded in this paper
due to lack of space) and ﬁnd that each cluster comprises
a relatively small set of routes (approximately 1-20 routes
per cluster). This explains why cluster ranks are only slightly
better than individual ranks.
Among cities having low σturn (less unique turns) in the
top row of Figure 7, Manhattan results in lower ranking
than Atlanta and Sunnyvale even when it has a higher σturn
and smaller graph size (lower |V | and |E|). This can be
attributed to two factors: (1) Manhattan has mostly straight
roads reducing the curvature impact on scoring, and (2) most
roads are parallel rendering heading ﬁlters ineffective. Atlanta
and Sunnyvale, on the other hand, have more curvy roads
that do not run in parallel. Atlanta has lower ranking than
Sunnyvale, because it has a lot more segments and connections
that signiﬁcantly increase the search space and inversely affect
◦ turns
the results. Berlin, like others in this group, has more 90
and straighter roads, and its reported results are in between
Atlanta’s and Sunnyvale’s.
In the middle and bottom rows of Figure 7, since the
cities have high value of σturn,
the turn angle impact on
scoring is high (especially very high for Rome, Paris and
Concord, cf. Table III). Attack for Concord is most successful,
because the high number of curvy roads and unique turns
helps diversify the route’s score, and the small graph size
signiﬁcantly reduces the search space. Paris creates somewhat
more difﬁculty for the adversary than both Rome and London
even though it has a higher σturn and lower |V | and |E|.
This can be explained by the fact that many internal roads in
Paris are straight, reducing the curvature impact on scoring.
Madrid, like Paris, also has a lot of straight roads, but due to
high |V |, it results in slightly lower rankings than Paris. The
attack seems easy in Rome and London thanks to the high
variations in curvature in both cities. Boston has lower ranking
than London even when it is similar in turn distributions and
graph size. This is mainly because Boston has several grid-
like residential areas such as South Boston and Back Bay that
create much confusions for routes passing through such areas.
Waltham’s road structure is very similar to Boston’s except
that it is much smaller, which becomes the main factor for
increasing the attack performance.
407407
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:06 UTC from IEEE Xplore.  Restrictions apply. 
(a) Traveled routes in Boston
(b) Traveled routes in Waltham
Fig. 9: Attack performance on real driving experiments.
(a) Boston
(b) Waltham
(c) Turns Distribution
(d) Distance Distribution
Fig. 8: Real experiments statistics: (a-b): GPS traces of all traveled
routes; (c-d): Turn and Distance distributions for all routes combined.
E. Real Driving Experimental Results
To measure the attack efﬁciency in actuality, we carried out
real driving experiments in Boston and Waltham. For each city,
over 70 different routes were taken. These routes emulated
mostly realistic scenarios, e.g., traveling between residential
areas, shopping stores, ofﬁce, or city centers. There were 4
drivers participating in the experiments, who were instructed
to (1) place the phone anywhere but in ﬁxed position during
collection, (2) idle at least 10 seconds before driving, and
(3) drive within the city limit and take a minimum of 3
turns on their routes. These requirements allow us to model
typical realistic scenarios, in which the victim, after putting
her phone in a stable position (cup holder, mount, etc.), may
take a few seconds before starting to drive to check for her
safety, such as tying her seatbelt, and adjusting the seat,
mirrors, or lights. In this initial study, we did not consider
situations when the vehicle starts by reversing. We emphasize
that given the limited resources, we aimed to obtain a data-
set as diverse as possible, therefore we did not request the
drivers to repeat the same routes. Still, all routes consist of
total ≈ 980 km, including driving in both peak and off-peak
hours. Scoring weights (ωA, ωT , ωC) were ﬁne-tuned based
on road characteristics: (2.5, 0.1, 3) for Boston, and (2.25,
0.1, 2.5) for Waltham. Both cities (especially Boston) have
more unique curves than turns attributing to the higher ωC.
Waltham has typically less trafﬁc than Boston, therefore, we
assign lower ωA and ωC to increase impact of ωT .
Figure 8 shows the distribution of turns made on all routes,
total traveled distances, and GPS traces. Note that GPS is used
only for ground truth comparison. The shortest route taken was
≈ 0.75 km, the longest ≈ 7.25 km. Additionally, 4 more routes
were taken to consider scenarios of driving in a circle, taking
many turns (≥ 20), and traveling longer distances (≥ 20 km).
These routes were also used to test the system’s stability.
Figure 9 shows the attack in terms of both individual and
cluster ranks. The reported results are a worst-case scenario
with no a priori information on the user’s routes. We see that
roughly 50% of routes in Waltham and roughly 30% of routes
in Boston are in the top 5 individual ranks. When top 1 is
considered (i.e., exact route), the success probability reduces to
38% for Waltham, and 13% for Boston, respectively. The gap
between individual and cluster ranks is about 10%, which is
almost similar to simulations. The number of routes per cluster
is around 2-3 for most top ranked clusters. The performance
for both cities lies between the simulation’s Typical and
Worst scenarios. However, the results for Boston are closer
to the Worst scenario, while Waltham’s are much like the
Typical. The main reason for this difference is the trafﬁc in
Boston that caused more variations in estimating non-idle time
than Waltham. The small gap between real and simulation
results shows that our simulation framework may serve as an
effective model for studying the attack in a larger scale where
experiments are limited.
F. Feasibility of the Attack
The colluding server was setup inside a Linux Virtual
Machine (VM) on a Dell PowerEdge R710 server. The VM
has 2x4 cores with 16 threads running at 2.93 GHz, with
32 GB of RAM. The attack is written in Python and run using
PyPy, a fast Python JIT compiler. We measure the feasibility
of attack in terms of execution time for processing data and
searching routes. The search time speciﬁcally depends on the
route length and graph size.
Data Processing: The longest experimental route (approx-
imately 45 minutes) in our set requires ≈ 1.4 s to process the
sensor data and produce a trace of heading, turns, curves, and
timestamps, while an average route takes 0.1 − 0.2s.
Route Search: For the largest city in our set, Atlanta,
the search for each route takes about 2.2 s. For Concord, the
smallest one, each route takes about 0.4 s. We use 15 threads
to parallelize the search on multiple routes, and 1 remaining
thread for control and management. The simulation of 88000
routes takes ≈ 21 hours to complete (≈ 0.85 s per route).
While not a formal benchmark, it still implies that the attack
is practical (e.g., less than 4 seconds for a long route in
Atlanta). With adequate resources, an adversary can handle
millions of routes fairly quickly.
G. Impact of Algorithm Parameters and Assumptions
In this subsection, we study the attack performance under
various conditions such as when calibration is not performed,
408408
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:06 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 10: Impact of parameters and calibration on Waltham experi-
ments.
or the algorithm parameters are not carefully selected. We use
the real driving experiments from Waltham in this investigation
and re-perform evaluation changing one parameter at a time
to better understand the impact of individual parameters.
For comparison, the performance achieved with parameters
optimized in Section V-E is referred to as the Optimized test
case (cf. Table IV and Figure 10).
TABLE IV: Test cases for impact of parameters and calibration.
Test case
Optimized
TurnW
TimeW
CurveW
HeadingTh
TimeTh
TurnTh
Uncalibrated
Parameter settings
As in Section V-E
As Optimized, except ωT = 0, ωC = 0
As Optimized, except ωA = 0, ωC = 0
As Optimized, except ωA = 0, ωT = 0
As Optimized, except φm = 30◦
As Optimized, except β = 1.0
As Optimized, except γ = 20◦
Optimized without calibration
Scoring Weights: To justify the impact of each scoring
weight, we ignore the other weights by setting them to zero
in the scoring function, cf. Equation (2). Figure 10 shows
that curvature is the most useful factor for success probability,
while travel time only slightly increases the performance. This
is not only applicable to Waltham, but also to cities that have
numerous roads with unique curvature. The travel time varies
more due to external factors such as trafﬁc or unknown speed,
making it less impactful. Hence, weights must be selected
based on the target area to maximize the attack success.
Filtering Thresholds: Filtering allows quick elimination of
bad routes, however, it can also falsely remove good routes. To
see the performance impact from over-ﬁltering, we reduce the
thresholds for turn, heading, and time as speciﬁed in Table IV.
We observe several interesting facts from Figure 10. First,
tighter heading and turn thresholds only slightly decrease
performance, which implies that the sensors have small noise
margin. Therefore, stricter rules can be applied to speed up the
search if execution time is of high priority. On the other hand,
stricter travel
time threshold results in considerably lower
performance, which reveals that over-speeding is a common
practice in real driving.
Calibration: Recall that for the real driving experiments,
drivers were instructed to stay idle for at least 10 s before
driving. While this allows for easy calibration, an alternative
calibration method can be used, in which we ﬁrst detect idle
time (based on accelerometer) and then compute the gyroscope
drift during that state. This enables calibration whenever
the vehicle is idle (e.g., stopping at trafﬁc lights) and the
parking assumption can be relaxed. In Figure 10, however, we
show that even without calibration, the performance does not
decrease signiﬁcantly. In fact, the individual ranks drop only
by 10% − 15% in comparison with Optimized which implies
calibration is an optional rather than a required operation.
Route Equiprobability: We emphasize that the reported
results in this work are based on the worst-case assumption of
no a priori information of the victim’s travel history. Knowing
the starting or ending point would improve the accuracy. On
the other hand, such travel history information can be built
up over time to improve the attack. We plan to study such
extensions in future work.
Fixed Position: Our assumption of ﬁxed phone position
is realistic in various scenarios (e.g., many states in the USA
prohibit hand-held use). However, if users interact with their
phones, we describe an idea (we did not implement it) that can
help increase possibility of distinguishing between a real turn
and a change in phone’s orientation due to user interaction.
Our idea is based on the observation that human interaction
(e.g., touching, holding in hand) induces high variations in
sensor data in all 3 dimensions for a short duration. Note that
if the variations are low, the attack is barely affected and there
is no need for detection. When such events are detected, we
simply ignore the sensor data, and later, re-perform rotation
to reﬂect the phone’s new position. In practice, however, more
complex algorithms would be required to deal with noise and
unknown human behaviors, which can be studied in the future.
Detection of Vehicle Start: In this work, we assume that it
is feasible to determine when a user enters their vehicle. This
can be done a posteriori with the app continuously recording
(and storing a window of few minutes) and using techniques
similar to Android step detection [14] to detect when the user
stops walking and steps into the vehicle.
Reversing: In this work, we assume only forward motion of
drivers. While reversing can be detected using the accelerom-
eter, a more complex problem may arise when turning is
performed at the same time as reversing (e.g., making a U-turn
or pulling out of a parallel parking spot). This increases the
search space, and our algorithm would have to be extended to
roll back to previous states along all candidate routes.
Known City: Knowledge about the victim’s city can be
obtained in several ways. For instance, the app can detect
the city based on IP address when the victim is connected
to Wi-Fi or cellular networks. Additionally, an adversary with
access to the victim’s social network can ﬁnd the victim’s city,
frequently visited places, and even route patterns. A powerful
adversary can also run the attack on multiple geographic areas
in parallel. These techniques can be combined together to
devise an effective attack.
VI. COUNTERMEASURES
Access to motion sensors is granted without permissions or
any notiﬁcations to the user as they are still underestimated as
a source of privacy leakage. Several detection and protection
409409
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:06 UTC from IEEE Xplore.  Restrictions apply. 
mechanisms can be used to mitigate this attack, for example,
when installing an app, permissions to the sensors must be
explicitly requested by the app. Also, like location, a notiﬁ-
cation (with app name) should be displayed to the user when
sensors are accessed. To deal with attacks that also require
access to sensors for other activity, more complex mechanisms
are required such as closely monitoring the Internet trafﬁc and
energy consumption, or generating adequate artiﬁcial noise in
the data before providing it to the app. While the above make
the attack more difﬁcult, effective protection mechanisms
are beyond the scope of this work and considered an open
problem. The mechanisms discussed should be implemented in
the OS to ensure prevention globally, however, they can also be
implemented using dynamic instrumentation tools like ddi [15]
or recently, using app sandboxing tools like Boxify [16].
VII. RELATED WORK
interest. They typically fall
Smartphone privacy attacks have recently attracted sig-
into one of the three
niﬁcant
categories. Some attacks use cellular signals, GPS, Wi-Fi,
Bluetooth, NFC, Wi-Fi Direct and other radio communications
mechanisms (henceforth, we will refer to them as wireless
location support systems or WLSS). Sensor centric attacks
use native smartphone sensors such as the gyroscope, ac-
celerometer and magnetometer as data sources with no WLSS
involvement. The hybrid cases are where the victim makes
available, albeit to a limited community and on a limited
basis, her location. These attacks use WLSS and sensor data
integration. Fawaz et al. [1] reported that 85% of surveyed
users expressed concern about conveying location information.
Some countermeasures emerged in the form of location privacy
protection mechanisms or LPPMs. These services obfuscate
location information by modifying precision or performing
location transformation. As they attempt
to deﬂect WLSS
centric threats, LPPMs remain ineffective in mitigating our
threat. As of this publication and to our knowledge, no service
exists to address our proposed threat.
A. WLSS Based Attacks
WLSS based attacks typically require either apps installed
on a smartphone with appropriate permissions or signiﬁcant
presence within the network infrastructure. We do not address
the former as the user consciously forfeited some degree of
position anonymity. The infrastructure attack involves taking
over some of the infrastructure components or injecting signa-
ture probes and are subject to detection by conventional means
(i.e. IDS or IPS solutions). WLSS attacks provide accuracies
near 90% when attempting path identiﬁcation.
In Qian et al. [17], the authors attempt targeted cellular DoS
attacks. Of relevance is identifying the speciﬁc smartphone
location as a precursor to the attack. The attack seeks to
gain IP identiﬁcation using techniques like active probes
and ﬁngerprints. By measuring promotion delay and Round
Trip Time (RTT), cellphone localization is achieved with
granularity to the Location Area Code (LAC)/Radio Network
Controller (RNC) range. Its effectiveness is limited due to
measurement tuning needs and RNC sharing observed among
smaller cities. This expands the geographical area cross section
from which to identify the user. As with WLSS attacks,
introducing network probes may enable detection.
Kune et al. [18] describe location determination via leakage
from lower level Global System for Mobile Communications
(GSM) broadcasts, in particular, a victim’s temporary iden-
tiﬁer. For this attack to work, the attacker must initiate a
Paging Control Channel (PCCH) paging request targeting the
victim and passively listen for broadcast PCCH messages.
Although relatively simple, it places the attacker as an active
network participant which risks detection. It also requires a
priori knowledge of the victim’s telephone number. Position
resolution was observed to within 1 km2.
Bindschaedler et al. [19] use a group of 802.11 access ports
to eavesdrop on proximate target smartphones in order to
evaluate mixing zone effectiveness. Data collection includes
device time, location, device identiﬁer and content. Although
victims may attempt to hide via a mix-zone network where