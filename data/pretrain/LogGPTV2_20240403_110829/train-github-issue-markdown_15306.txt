I like the design of the new `Deno.serveHttp` API. I think a similar design
would work well for WebSockets, too.
Example API:
    async function acceptWebSocket(
      conn: Deno.Conn,
      httpConn: Deno.RequestEvent
    ): Promise {}
Example usage:
    for await (const conn of Deno.listen({ port: 80 })) {
      handleConn(conn);
    }
    async function handleConn(conn: Deno.Conn) {
      for await (const httpConn of Deno.serveHttp(conn)) {
        handleHttpConn(conn, httpConn);
      }
    }
    async function handleHttpConn(conn: Deno.Conn, httpConn: Deno.RequestEvent) {
      try {
        const ws = await Deno.acceptWebSocket(conn, httpConn);
        ws.onopen = todo;
        ws.onmessage = todo;
        ws.onerror = todo;
        ws.onclose = todo;
      } catch {
        httpConn.respondWith(new Response("Failed to accept WebSocket", { status: 400 }));
      }
    }
    function todo() {}