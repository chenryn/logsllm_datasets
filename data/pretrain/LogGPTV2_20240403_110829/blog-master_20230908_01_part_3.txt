4、创建一张轨迹表, 使用array存储轨迹中每个点的时间、位置.    
```  
drop table if exists tbl_path_detail2;  
create unlogged table tbl_path_detail2 (  -- 方便测试, 使用unlogged table.  
  pid int,  -- 轨迹ID  
  pos text,  -- 位置字符串  
  ts text  -- 时间字符串  
);  
create index on tbl_path_detail2 (pid);  
```  
5、将原始轨迹写入新的轨迹表.  
```  
insert into tbl_path_detail2 select pid, string_agg(pos::text, ',' order by ts), string_agg(ts::text, ',' order by ts) from tbl_path_detail group by pid;  
```  
应用层面, 未来在写入轨迹时也可以使用这个方法, 等轨迹完成一次性上传并写入新的轨迹表, 老的轨迹表就不需要了.   
6、压测查询轨迹, 按轨迹ID查询, 按时间顺序返回轨迹的所有点.   
```  
vi t4.sql  
\set pid random(1,1000)  
select * from tbl_path_detail2 where pid=:pid;  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t4.sql -c 10 -j 10 -T 120  
transaction type: ./t4.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 246670  
latency average = 4.864 ms  
latency stddev = 1.974 ms  
initial connection time = 21.508 ms  
tps = 2055.793315 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set pid random(1,1000)  
         4.864  select * from tbl_path_detail2 where pid=:pid;  
```  
对比轨迹表的空间和索引占用  
```  
postgres=# \dt+  
                                         List of relations  
 Schema |       Name       | Type  |  Owner   | Persistence | Access method |  Size   | Description   
--------+------------------+-------+----------+-------------+---------------+---------+-------------  
 public | tbl_path_detail  | table | postgres | unlogged    | heap          | 575 MB  |   
 public | tbl_path_detail1 | table | postgres | unlogged    | heap          | 202 MB  |   
 public | tbl_path_detail2 | table | postgres | unlogged    | heap          | 346 MB  |   
postgres=# \di+  
                                                          List of relations  
 Schema |              Name              | Type  |  Owner   |      Table       | Persistence | Access method |  Size   | Description   
--------+--------------------------------+-------+----------+------------------+-------------+---------------+---------+-------------  
 public | tbl_path_detail1_pid_idx       | index | postgres | tbl_path_detail1 | unlogged    | btree         | 48 kB   |   
 public | tbl_path_detail2_pid_idx       | index | postgres | tbl_path_detail2 | unlogged    | btree         | 48 kB   |   
 public | tbl_path_detail_pid_ts_idx     | index | postgres | tbl_path_detail  | unlogged    | btree         | 301 MB  |   
 public | tbl_path_detail_pid_ts_pos_idx | index | postgres | tbl_path_detail  | unlogged    | btree         | 473 MB  |   
```  
#### 对照   
聚集类型既能节省轨迹存储、索引空间, 又能提升轨迹查询的性能.   
思考: 如果要按时间范围、空间范围搜索用户过去的轨迹, 然后再查询对应的轨迹点, 应该如何设计表结构? 如何使用索引?  
1、空间对比  
轨迹存储方式 | 轨迹占用空间 | 轨迹索引占用空间  
---|---|---  
传统存储(每个点一条记录,索引不包含位置) | 575 MB | 301 MB  
传统存储(每个点一条记录,索引包含位置) | 575 MB | 473 MB  
数组存储轨迹 | 202 MB | 48 kB  
字符串存储轨迹 | 346 MB | 48 kB  
2、性能对比  
轨迹存储方式 | 轨迹查询QPS  
---|---  
传统存储(每个点一条记录,索引不包含位置) | 133  
传统存储(每个点一条记录,索引包含位置) | 946  
数组存储轨迹 | 543  
字符串存储轨迹 | 2056  
## 知识点      
array    
include index    
window function    
## 思考     
轨迹分析应用: 轨迹碰撞, 例如刑侦场景  
如果按用户的时间范围查询轨迹, 使用什么数据类型、索引性能更好? range type + gist index ?   
如何按用户的空间范围查询轨迹, 使用什么数据类型、索引性能更好? range type + gist index ?   
如果一次不想取出所有的点, 如何从字符串存储的轨迹点中获取某个时间对应的点, 或者某一段点?   
## 参考    
##### 202105/20210530_02.md   [《重新发现PostgreSQL之美 - 8 轨迹业务IO杀手克星index include(覆盖索引)》](../202105/20210530_02.md)    
##### 202104/20210406_04.md   [《PostgreSQL 14 preview - SP-GiST 索引新增 index 叶子结点 include column value 功能 支持》](../202104/20210406_04.md)    
##### 202004/20200429_01.md   [《PostgreSQL 索引算子下推扩展 - 索引内offset - 索引内过滤 - include index - 随机偏移》](../202004/20200429_01.md)    
##### 201905/20190503_03.md   [《PostgreSQL index include - 类聚簇表与应用(append only, IoT时空轨迹, 离散多行扫描与返回)》](../201905/20190503_03.md)    
##### 201903/20190331_08.md   [《PostgreSQL 12 preview - GiST 索引支持INCLUDE columns - 覆盖索引 - 类聚簇索引》](../201903/20190331_08.md)    
##### 201812/20181209_01.md   [《PostgreSQL IoT，车联网 - 实时轨迹、行程实践 2 - (含index only scan类聚簇表效果)》](../201812/20181209_01.md)    
##### 201812/20181207_01.md   [《PostgreSQL IoT，车联网 - 实时轨迹、行程实践 1》](../201812/20181207_01.md)    
##### 201707/20170722_02.md   [《车联网案例，轨迹清洗 - 阿里云RDS PostgreSQL最佳实践 - 窗口函数》](../201707/20170722_02.md)    
##### 202212/20221229_01.md   [《PolarDB 开源版 轨迹应用实践 - 出行、配送、快递等业务的调度; 传染溯源; 刑侦》](../202212/20221229_01.md)    
##### 202212/20221223_02.md   [《使用 PolarDB 开源版 部署 PostGIS 支撑时空轨迹|地理信息|路由等业务》](../202212/20221223_02.md)    
##### 202106/20210602_01.md   [《重新发现PostgreSQL之美 - 11 时空轨迹系统 新冠&刑侦&预测》](../202106/20210602_01.md)    
##### 202105/20210530_02.md   [《重新发现PostgreSQL之美 - 8 轨迹业务IO杀手克星index include(覆盖索引)》](../202105/20210530_02.md)    
##### 202105/20210509_01.md   [《PostgreSQL 应用开发解决方案最佳实践系列课程 - 6. 时空、时态、时序、日志等轨迹系统》](../202105/20210509_01.md)    
##### 202011/20201117_01.md   [《使用Postgres，MobilityDB和Citus大规模(百亿级)实时分析GPS轨迹》](../202011/20201117_01.md)    
##### 201905/20190503_03.md   [《PostgreSQL index include - 类聚簇表与应用(append only, IoT时空轨迹, 离散多行扫描与返回)》](../201905/20190503_03.md)    
##### 201812/20181209_01.md   [《PostgreSQL IoT，车联网 - 实时轨迹、行程实践 2 - (含index only scan类聚簇表效果)》](../201812/20181209_01.md)    
##### 201812/20181207_01.md   [《PostgreSQL IoT，车联网 - 实时轨迹、行程实践 1》](../201812/20181207_01.md)    
##### 201811/20181101_02.md   [《PostgreSQL pipelinedb 流计算插件 - IoT应用 - 实时轨迹聚合》](../201811/20181101_02.md)    
##### 201806/20180607_02.md   [《Greenplum 轨迹相似(伴随分析)》](../201806/20180607_02.md)    
##### 201712/20171231_01.md   [《PostgreSQL 实时位置跟踪+轨迹分析系统实践 - 单机顶千亿轨迹/天》](../201712/20171231_01.md)    
##### 201712/20171204_01.md   [《GIS术语 - POI、AOI、LOI、路径、轨迹》](../201712/20171204_01.md)    
##### 201708/20170803_01.md   [《菜鸟末端轨迹 - 电子围栏(解密支撑每天251亿个包裹的数据库) - 阿里云RDS PostgreSQL最佳实践》](../201708/20170803_01.md)    
##### 201707/20170722_02.md   [《车联网案例，轨迹清洗 - 阿里云RDS PostgreSQL最佳实践 - 窗口函数》](../201707/20170722_02.md)    
##### 201704/20170418_01.md   [《PostgreSQL 物流轨迹系统数据库需求分析与设计 - 包裹侠实时跟踪与召回》](../201704/20170418_01.md)    
##### 201702/20170219_01.md   [《PostgreSQL 聚集存储 与 BRIN索引 - 高并发行为、轨迹类大吞吐数据查询场景解说》](../201702/20170219_01.md)    
##### 201606/20160611_02.md   [《PostgreSQL 如何轻松搞定行驶、运动轨迹合并和切分》](../201606/20160611_02.md)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")