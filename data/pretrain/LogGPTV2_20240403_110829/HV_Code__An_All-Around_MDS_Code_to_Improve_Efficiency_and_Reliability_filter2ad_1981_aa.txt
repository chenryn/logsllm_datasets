# Title: HV Code: An All-Around MDS Code to Improve Efficiency and Reliability of RAID-6 Systems

**Authors: Zhirong Shen and Jiwu Shu**

**Conference: 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks**

## Abstract
The increasing scale of data necessitates the deployment of storage systems with larger capacities, which in turn increases the likelihood of data loss or damage. The Maximum Distance Separable (MDS) code in RAID-6, which can tolerate the concurrent failure of any two disks with minimal storage requirements, is a leading solution for enhancing data reliability. However, most existing MDS codes are specialized and do not perform well under a comprehensive evaluation.

To address this, we propose an all-around MDS code named Horizontal-Vertical Code (HV Code), which leverages both horizontal and vertical parity. HV Code achieves perfect I/O balancing, optimizes partial stripe writes to continuous data elements, and maintains optimal encode/decode/update efficiency. It also features a shorter parity chain, enabling more efficient recovery from single disk failures. Additionally, HV Code excels in degraded read operations and accelerates the reconstruction of two disabled disks by executing four recovery chains in parallel.

Performance evaluations show that HV Code significantly balances I/O distribution and reduces up to 27.6% and 32.4% of I/O requests for partial stripe writes compared to RDP Code and HDP Code. Furthermore, it reduces up to 5.4% to 39.8% of I/O requests per element for single disk reconstruction, decreases 6.6% to 28.3% of I/O requests for degraded read operations, and achieves the same efficiency as X-Code for double disk recovery, reducing recovery time by 47.4% to 59.7% compared to other codes.

**Keywords:** RAID-6, Storage System, Load Balancing, Partial Stripe Writes, Disk Recovery, Degraded Read

## I. Introduction
The rapid growth of cloud storage has led to an exponential increase in the volume of data that needs to be stored, driving the demand for high-capacity storage systems such as Google File System (GFS) and Windows Azure. Increasing storage capacity often involves adding more disks, but this also increases the probability of multiple disk failures as the system scales up.

To provide reliable, economical, and high-performance storage, Redundant Arrays of Inexpensive (or Independent) Disks (RAID) have gained significant attention. Among various RAID configurations, RAID-6, which uses MDS codes to tolerate the concurrent failure of any two disks with optimal storage efficiency, is one of the most popular solutions.

In RAID-6 systems, original data is partitioned into fixed-size pieces (data elements), and redundant information (parity elements) of the same size is calculated over subgroups of data elements. When a disk fails, the surviving data and parity elements are used to reconstruct the lost data. During a disk failure, the system may still receive read requests for data on the failed disk (degraded read operation). Efficiently handling these operations is crucial for maintaining performance and reliability.

Moreover, healthy RAID-6 systems must handle frequent write accesses, especially partial stripe writes to continuous data elements. These writes trigger updates to associated parity elements, potentially causing unbalanced load and increased I/O requests. Therefore, a RAID-6 system that can balance the load and efficiently handle partial stripe writes is essential.

Based on these concerns, we evaluate RAID-6 systems using five key metrics: I/O distribution balancing, partial stripe write performance, disk reconstruction efficiency, degraded read overhead, and encode/decode/update complexity. While existing MDS codes optimize one metric, they often neglect others. For example, X-Code and HDP Code balance I/O well but suffer in partial stripe writes and update complexity, respectively. H-Code excels in partial stripe writes but lacks in load balancing and repair efficiency. P-Code, while efficient in disk reconstruction, performs poorly in other areas.

In this paper, we introduce a novel XOR-based MDS RAID-6 code called Horizontal-Vertical Code (HV Code). HV Code evenly distributes parity elements across the disk array, balancing I/O load and accelerating disk reconstruction by reducing the number of elements involved in parity generation. It optimizes partial stripe writes and degraded read operations, maintaining optimal encode/decode/update complexity. Our contributions include:

1. **All-Around Performance:** HV Code balances I/O load, optimizes partial stripe writes, reduces average recovery I/O, provides fast degraded read performance, and retains optimal encode/decode/update efficiency.
2. **Experimental Validation:** Extensive experiments demonstrate that HV Code matches the load balancing of X-Code and HDP Code, reduces 27.6% to 32.4% of write requests for partial stripe writes, and decreases 6.6% to 28.3% of read requests for degraded reads. It also reduces up to 5.4% to 39.8% of I/O requests for single disk reconstruction and achieves nearly the same time efficiency as X-Code for double disk recovery, reducing recovery time by 47.4% to 59.7%.

The rest of the paper is organized as follows: Section II introduces the background and motivation, Section III presents the detailed design of HV Code, Section IV analyzes its properties, Section V evaluates its performance, and Section VI concludes the work.

## II. Background and Motivation

### A. Terms and Notations
To provide a clear understanding of the research context, we define the following terms and notations:

- **Data Element and Parity Element:** Data elements contain original data, while parity elements store redundant information. In Figure 1(a), E1,1 is a data element, and E1,5 is a parity element.
- **Stripe:** A set of data and parity elements connected by an erasure code. Figure 1 shows the layout of a stripe in RDP Code.
- **Disk Array:** A storage system built over multiple disk drives, supporting file striping to improve I/O throughput.
- **Data Disk and Parity Disk:** Data disks store data elements, and parity disks store parity elements. In Figure 1, D1 to D4 are data disks, and D5 and D6 are parity disks.
- **Horizontal Parity:** Also known as row parity, it is calculated by performing XOR operations among data elements in the same row. For example, in Figure 1(a), E1,5 = E1,1 ⊕ E1,2 ⊕ E1,3 ⊕ E1,4.
- **Diagonal Parity and Anti-Diagonal Parity:** These connect elements along diagonal or anti-diagonal lines. In RDP and EVENODD codes, horizontal parity elements participate in the calculation of diagonal parity elements. For instance, in Figure 1(b), E1,6 = E1,1 ⊕ E4,3 ⊕ E3,4 ⊕ E2,5.
- **Vertical Parity:** Used in vertical codes like P-Code and B-Code. Vertical parity involves selecting candidate data elements and performing XOR operations.
- **Parity Chain and Length:** A parity chain consists of a group of data elements and the generated parity element. The length is the number of included elements. For example, in Figure 1, E1,1 is part of two parity chains: {E1,1, E1,2, ..., E1,5} for horizontal parity and {E1,1, E4,3, E3,4, E2,5, E1,6} for diagonal parity.
- **Recovery Chain:** A subgroup of failed elements that are repaired in sequence during double disk reconstruction. For example, in Figure 5, E2,3, E1,1, E1,3, and E2,1 belong to the same recovery chain.

### B. MDS Codes in RAID-6 Storage Systems
Research on RAID-6 implementation has been a focus in recent years. MDS codes achieve optimal storage efficiency, while non-MDS codes sacrifice some storage efficiency for improved recovery metrics, such as reduced recovery I/O. Representative MDS codes for RAID-6 include Reed-Solomon Code, Cauchy Reed-Solomon Code, EVENODD Code, RDP Code, B-Code, X-Code, Liberation Code, Liber8tion Code, P-Code, HDP Code, and H-Code. Non-MDS codes include Pyramid Code, WEAVER Code, Code-M, HoVer Code, Local Reconstruction Codes, and Flat XOR-Code.

MDS codes in RAID-6 can be classified into horizontal and vertical codes based on the placement of parity elements.

#### Horizontal Codes in RAID-6 Systems
Horizontal codes, the first studies in RAID-6, typically use m+2 disks and reserve two dedicated disks for parity elements. Reed-Solomon Code, the ancestor of horizontal codes, is constructed over Galois field GF(2^w) using Vandermonde matrices, but its high computational complexity limits practical use. Cauchy Reed-Solomon Code mitigates this by using binary bit matrices to convert complex Galois field operations into simple XOR operations.

EVENODD Code and RDP Code are typical parity codes that use horizontal and diagonal parity. They balance I/O and provide good performance but have limitations in partial stripe writes and update complexity.

## III. Design of HV Code
HV Code is designed to address the limitations of existing MDS codes by combining the advantages of horizontal and vertical parity. It evenly distributes parity elements across the disk array, ensuring balanced I/O load. By reducing the number of elements involved in parity generation, HV Code accelerates the recovery process for single and double disk failures. It also optimizes partial stripe writes and degraded read operations while maintaining optimal encode/decode/update complexity.

### A. Detailed Design
The detailed design of HV Code includes:
- **Horizontal Parity:** HV Code uses horizontal parity to balance I/O load and optimize partial stripe writes. It ensures that only the horizontal parity element in the same row is updated when data elements in that row are modified.
- **Vertical Parity:** HV Code designs a specific construction for vertical parity, where the last data element in the i-th row shares a vertical parity element with the first data element in the (i+1)-th row. This design further optimizes partial stripe writes and degraded read operations.
- **Shorter Parity Chains:** HV Code uses shorter parity chains, reducing the number of elements that need to be retrieved during recovery, thus improving recovery efficiency.
- **Parallel Recovery Chains:** For double disk failures, HV Code executes four recovery chains in parallel, significantly reducing recovery time.

## IV. Property Analysis
HV Code's properties include:
- **I/O Balancing:** Evenly distributes I/O load across the disk array.
- **Partial Stripe Write Optimization:** Minimizes the number of I/O requests for partial stripe writes.
- **Efficient Recovery:** Shorter parity chains and parallel recovery chains reduce recovery time and I/O requests.
- **Degraded Read Performance:** Utilizes horizontal parity to provide fast degraded read performance.
- **Optimal Encode/Decode/Update Complexity:** Maintains the best possible complexity for encoding, decoding, and updating parity elements.

## V. Performance Evaluation
We conducted extensive experiments to evaluate HV Code's performance in terms of load balancing, partial stripe writes, degraded read operations, and disk reconstruction. The results show that HV Code:
- Matches the load balancing of X-Code and HDP Code.
- Reduces 27.6% to 32.4% of write requests for partial stripe writes compared to RDP Code and HDP Code.
- Decreases 6.6% to 28.3% of read requests for degraded read operations.
- Reduces up to 5.4% to 39.8% of I/O requests for single disk reconstruction compared to RDP Code, HDP Code, X-Code, and H-Code.
- Achieves nearly the same time efficiency as X-Code for double disk recovery, reducing recovery time by 47.4% to 59.7% compared to other codes.

## VI. Conclusion
In this paper, we introduced HV Code, an all-around MDS code for RAID-6 systems. HV Code effectively balances I/O load, optimizes partial stripe writes, reduces recovery I/O, provides fast degraded read performance, and maintains optimal encode/decode/update complexity. Experimental results demonstrate that HV Code outperforms existing MDS codes in multiple key metrics, making it a robust and efficient solution for RAID-6 storage systems.