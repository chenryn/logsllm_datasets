title:HV Code: An All-Around MDS Code to Improve Efficiency and Reliability
of RAID-6 Systems
author:Zhirong Shen and
Jiwu Shu
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
HV Code: An All-around MDS Code to Improve Efﬁciency and Reliability of
RAID-6 Systems
Zhirong Shen, Jiwu Shu†
Department of Computer Science and Technology, Tsinghua University
†Corresponding author: PI:EMAIL
PI:EMAIL
Abstract—The increasing expansion of data scale leads to
the widespread deployment of storage systems with larger
capacity and further induces the climbing probability of data
loss or damage. The Maximum Distance Separable (MDS) code
in RAID-6, which tolerates the concurrent failures of any two
disks with minimal storage requirement, is one of the best
candidates to enhance the data reliability. However, most of
the existing works in this literature are more inclined to be
specialized and cannot provide a satisﬁed performance under
an all-round evaluation.
Aiming at this problem, we propose an all-round MDS code
named Horizontal-Vertical Code (HV Code) by taking advan-
tage of horizontal parity and vertical parity. HV Code achieves
the perfect I/O balancing and optimizes the operation of partial
stripe writes to continuous data elements, while preserving the
optimal encode/decode/update efﬁciency. Moreover, it owns a
shorter parity chain which grants it a more efﬁcient recovery
for one disk failure. HV Code also behaves well for the degrad-
ed read operation and accelerates the process to reconstruct
two disabled disks by executing four recovery chains in parallel.
The performance evaluation demonstrates that HV Code well
balances the I/O distribution and eliminates up to 27.6%
and 32.4% I/O requests for partial stripe writes operation
when compared with RDP Code and HDP Code. Moreover,
compared to RDP Code, HDP Code, X-Code and H-Code, HV
Code reduces up to 5.4%∼39.8% I/O requests per element
for the single disk reconstruction, decreases 6.6%∼28.3% I/O
requests for degraded read operations, and achieves the same
efﬁciency of X-Code for double disk recovery by shortening
47.4%∼59.7% recovery time compared with other three codes.
Keywords-RAID-6; Storage System; Load Balancing; Partial
Stripe Writes; Disk Recovery; Degraded Read
I. INTRODUCTION
With the rapid development of cloud storage, the size of
created data to be kept is amazingly expanding, resulting
in the strong demand of the storage systems with larger
capacity (e.g., GFS [6] and Windows Azure [26]). Increasing
the storage volume is usually achieved by equipping with
more disks, but it also comes with the rising probability
of multiple disk failures [1] [2] with the system scales up.
To provide a reliable and economical storage service with
high performance, Redundant Arrays of Inexpensive (or In-
dependent) Disks (RAID) receives tremendous attention and
is widely adopted nowadays. Among the various branches
of RAID, the Maximum Distance Separable (MDS) code of
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.57
550
RAID-6 offering the tolerance for concurrent failures of any
two disks with optimal storage efﬁciency, becomes one of
the most popular solutions.
In RAID-6 system, the original data will be partitioned
into many pieces with constant size (denoted as ”data
elements”) and the redundant information with the same
size (denoted as ”parity elements”) is calculated over a
subgroup of data elements. Once a disk failure happens (e.g.,
hardware malfunction or software error), the surviving data
elements and parity elements will be selectively retrieved
to reconstruct the elements on the dispirited disk. In the
meantime of disk failure, the storage system may always
receive the read operation to the data elements resided on
the corrupted disk (this operation is referred as degraded
read operation). Therefore, to timely response of user’s I/O
requests and improve data reliability, it is extremely critical
to efﬁciently process data recovery and degraded read.
Meanwhile, in general, ”healthy” RAID-6 storage systems
also have to cope with the frequent write accesses to the
hosted data (especially for partial stripe writes to continuous
data elements). A write operation to a data element will trig-
ger the update to the associated parity elements. Therefore,
in the circumstance with intensive write requests, storage
systems may easily suffer from the unbalanced load and are
likely to be exhausted with the absorption of a considerable
amount of extra I/O requests. Thus, to accelerate the write
operation and improve the system reliability, a RAID-6
storage system that can well balance the load and be efﬁcient
to cope with the partial stripe writes is an imperative need.
Based on the above concerns, we extract the following
ﬁve metrics to roughly evaluate the performance of RAID-
6 storage systems. 1) The capability to balance the I/O
distribution; 2) The performance of partial stripe writes;
3) The efﬁciency to reconstruct
the failed disk (disks);
4) The overhead of degraded read operation; 5) The en-
code/decode/update complexity. Deep investigations (e.g.,
[7] [3] [10] [4] [8] [5]) have been endeavored to pursue
the optimization on one of these metrics, yet all of them are
attending to one goal and losing another. On the aspect of
balancing the I/O requests, both X-Code [7] and HDP Code
[3] can evenly disperse the load to the whole disk array, but
the former has a poor performance on partial stripe writes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:30 UTC from IEEE Xplore.  Restrictions apply. 
while the latter suffers high update computation complexity.
On the metric of partial stripe writes and degraded read, H-
Code [10] achieves excellent performance for the writes to
two continuous data, but it has little effect on both balancing
the load and still undergoes unsatisﬁed repair efﬁciency to
recover the corrupted disks. In the case of disk reconstruc-
tion, though P-Code [8] requires less elements, its complex
data manipulation and unsatisﬁed performance on partial
stripe writes and degraded read make it less competitive.
More details about the weaknesses among existing MDS
codes are discussed in the next section.
In this paper, we propose a novel XOR-based MDS
RAID-6 code called Horizontal-Vertical Code (HV Code) by
taking advantage of horizontal parity and vertical parity. By
evenly dispersing parity elements across the disk arrays, HV
Code can well balance the I/O load. It accelerates the repair
process for disk (or disks) reconstruction as well by reducing
the number of data elements involved in the generation of
parity elements, so that less elements should be retrieved
for every lost element. To optimize the efﬁciency of the
writes to two continuous data elements, HV Code utilizes
the advantage of horizontal parity which only renews the
horizontal parity element once for the updated data elements
in the same row, and designs a dedicate construction for
the vertical parity to ensure the last data element in the i-
th row will share a same vertical parity element with the
ﬁrst data element in the (i + 1)-th row. In addition, HV
Code also provides competitive performance on degraded
read by utilizing the horizontal parity and still retains the
optimal encode/decode/update computation complexity. Our
contributions can be concluded as follows:
1) We propose an all-around MDS code named HV Code,
which well balances the load to the disks, offers an
optimized partial stripe write experience, reduces the
average recovery I/O to repair every failed element,
provides fast degraded read performance, and retains
the best encode/decode/update efﬁciency.
2) To demonstrate the efﬁciency of HV Code, we conduct
a series of intensive experiments on the metrics of
load balancing, partial stripe writes, degraded read
operation, and reconstruction for the single/double
disk failures. The results show HV Code achieves
the same load balancing rate as X-code and HD-
P Code, signiﬁcantly decreases about 27.6%∼32.4%
write requests caused by the partial stripe writes, and
eliminates 6.6%∼28.3% read requests for degraded
read operation. With the aspect of recovery I/O, HV
Code reduces up to 5.4%∼39.8% I/O requests to repair
a lost element during the single disk reconstruction
compared with its competitors (i.e., RDP Code, HDP
Code, X-Code and H-Code). It achieves nearly the
same time efﬁciency of X-Code in double disk re-
covery by decreasing 47.4%∼59.7% recovery time
compared with other three typical codes.
The rest of this paper is organized as follows. We ﬁrst
introduce the background knowledge of MDS codes and the
motivation of this paper in Section II and then present the
detailed design of HV Code in Section III. The property
analysis of HV Code will be given in Section IV and a
series of intensive evaluations are conducted to evaluate the
performance of HV Code and other representative codes in
Section V. Finally, we conclude our work in Section VI.
II. BACKGROUND AND MOTIVATION
A. Terms and Notations
To give a better understanding of the research background
of RAID-6 codes, we ﬁrst summarize the terms and notations
that will be frequently referred throughout this paper.
• Data Element and Parity Element. Element is the ba-
sic operated unit in RAID-6 systems and can be treated
as an unit of a disk, such as a byte or a sector. The data
element contains the original data information, while
the parity element keeps the redundant information. In
Figure 1(a), E1,1 is data element and E1,5 is parity
element.
• Stripe. A maximal set of data elements and parity
elements that have dependent relationship connected by
an erasure code. Figure 1 shows the layout of a stripe
in RDP Code.
• Disk Array. The storage system constructed over mul-
tiple disk drives, which supports ﬁle striping to improve
the I/O throughput.
• Data Disk and Parity Disk. As the name implies, the
data disk is used to place the data elements only and the
parity disk is served as the storage of parity elements.
For example, in Figure 1, the disk D1 ∼ D4 are data
disks while D5 and D6 are parity disks.
• Horizontal Parity. It
is a method to compute the
parity element and is also referred as ”row parity”. The
horizontal parity element is calculated by performing
(cid:2)4
the XOR operations among the data elements in the
same row. For instance, in Figure 1(a), the horizontal
i=1 E1,i := E1,1⊕···⊕E1,4.
parity element E1,5 :=
• Diagonal Parity and Anti-Diagonal Parity. The di-
agonal (resp. anti-diagonal) parity connects the ele-
ments following the diagonal (resp. anti-diagonal) line.
In RDP and EVENODD codes, the horizontal parity
element will participate in the calculation of diagonal
parity element. For example, the diagonal parity ele-
ment E1,6 := E1,1 ⊕ E4,3 ⊕ E3,4 ⊕ E2,5 as shown in
Figure1(b).
• Vertical Parity. It is usually adopted by vertical codes,
such as P-Code [8] and B-Code [12]. In the vertical
parity calculation, the candidate data elements should
be picked out ﬁrst and then performed the XOR oper-
ations.
551
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:30 UTC from IEEE Xplore.  Restrictions apply. 
(a) The Horizontal Parity
(b) The Diagonal Parity
(a) The Diagonal Parity
(b) The Anti-diagonal Parity
The Layout of RDP Code with p + 1 Disks
Figure 1.
(p = 5). {E1,1, · · · , E1,5} is a horizontal parity chain and
{E1,1, E4,3, E3,4, E2,5, E1,6} is a diagonal parity chain. Their length
is 5.
• Parity Chain and its length. A parity chain is com-
posed of a group of data elements and the generated
parity element. For example, E1,1 involves in two
parity chains in Figure 1, i.e., {E1,1, E1,2,··· , E1,5}
for horizontal parity and {E1,1, E4,3, E3,4, E2,5, E1,6}
for diagonal parity. The length of a parity chain is
denoted by the number of the included elements.
• Recovery Chain. It is constituted by a subgroup of
failed elements that have dependence in double disk
reconstruction. The elements in a recovery chain will
be repaired in an order. For example, there are four
recovery chains in Figure 5, where E2,3, E1,1, E1,3,
and E2,1 belong to the same recovery chain.
B. The MDS Codes of RAID-6 Storage Systems
The research of RAID-6 implementation has been a focus
in recent years. According to the storage efﬁciency, current
erasure codes to realize RAID-6 function can be divided into
two categories: Maximum Distance Separable (MDS) codes
and non-MDS codes. MDS codes reach optimal storage
efﬁciency while non-MDS codes sacriﬁce storage efﬁciency
to run after the improvement on other recovery metrics, for
example, the reduction of recovery I/O. The representative
MDS codes for RAID-6 realization include Reed-Solomon
Code [19], Cauchy Reed-Solomon Code [20], EVENODD
Code [5], RDP Code [4], B-Code [12], X-Code [7], Lib-
eration Code [9], Liber8tion Code [13], P-Code [8], HDP
Code [3], and H-Code [10]. The typical non-MDS codes
are Pyramid Code [14], WEAVER Code [18], Code-M [16],
HoVer Code [17], Local Reconstruction Codes [23] and its
application [24], and Flat XOR-Code [15]. In this paper,
we mainly consider MDS codes in RAID-6, which can be
classiﬁed into horizontal codes and vertical codes according
to the placement of parity elements.
The Horizontal Codes of RAID-6 Systems: Horizontal
codes are well known as the ﬁrst studies of RAID-6 systems.
They are usually constructed over m+2 disks and demanded
to reserve 2 dedicated disks to place parity elements.
As the ancestor of horizontal codes, Reed-Solomon Code
is constructed over Galois ﬁeld GF (2w) by employing
Vandermonde matrix. Its operations (i.e., multiplication and
division) are usually implemented in Galois ﬁeld and this
Figure 2. The Layout of X-Code with p Disks (p = 5)
Figure 3. The Layout of P-Code with p Disks (p = 7). For example, data
element E2,1 joins the generation of parity P2 (i.e., E1,2) and parity P6
(i.e., E1,6), since (2 + 6) mod 7 = 1.
high computation complexity seriously limits its realiza-
tion in practice. To mitigate this overhead, Cauchy Reed-
Solomon Code introduces the binary bit matrix to convert
the complex Galois ﬁeld arithmetic operations into single
XOR operations.
EVENODD Code and RDP Code are the typical parity