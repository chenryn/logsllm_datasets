root of the tree. To update a node, the checker: 1) checks
the integrity of the node’s siblings (and the old value of the
node) via steps 1-4 described previously, 2) changes the data
in the node, hashes the concatenation of this new data with
the siblings’ data and updates the parent to be the resultant
hash. Again, the steps are repeated until the root is updated.
On each FSM load from address a, the checker checks
the path from a’s data value leaf to the trusted root. On
each FSM store of value v to address a, the checker updates
the path from a’s data value leaf to the trusted root. We re-
fer to these load and store operations as hash-tree-load(a)
and hash-tree-store(a, v). The number of accesses to the
RAM on each FSM load/store is logarithmic in the number
of data values that are being protected.
Given the address of a node, the checker can calculate
the address of its parent [4, Section 5.6]. Thus, given the
address of a leaf node, the checker can calculate the ad-
dresses of all of the nodes along the path from the leaf node
to the root.
A cache can be used to improve the performance of the
scheme (the model in Section 3 is augmented such that the
checker is able to read and write to the cache as well as to
the untrusted RAM). Instead of just storing recently-used
data values, the cache can be used to store both recently-
used data values and recently-used hashes. A node and its
siblings are organized as a block in the cache and in the
untrusted RAM. Thus, whenever the checker fetches and
caches a node from the untrusted RAM, it also simultane-
ously fetches and caches the node’s siblings, because they
are necessary to check the integrity of the node. Similarly,
when the cache evicts a node, it also simultaneously evicts
the node’s siblings.
The FSM trusts data value blocks stored in the cache and
can perform accesses directly on them without any hashing.
When the cache brings in a data value block from RAM,
the checker checks the path from the block to the root or to
the ﬁrst hash along that path that it ﬁnds in the cache. The
data value block, along with the hash blocks used in the
veriﬁcation, are stored in the cache. When the cache evicts
a data value or hash block, if the block is clean, it is just
removed from the cache. If the block is dirty, the checker
checks the integrity of the parent block and brings it into
the cache, if it is not already in the cache. The checker then
updates the parent block in the cache to contain the hash of
the evicted block. An invariant of this caching algorithm
is that hashes of uncached blocks must be valid whereas
hashes of cached blocks can have arbitrary values.
4.2. Log-Hash
The essence of the log-hash scheme [2, 11] is that the
checker maintains a “write log” and a “read log” of its write
and read operations to the untrusted RAM. Figure 3 shows
the basic put and take operations that are used internally in
the checker. Figure 4 shows the interface the FSM calls to
use the log-hash checker to check the integrity of the RAM.
In Figure 3, the checker maintains two multiset hashes
[2] and a counter. In the untrusted RAM, each data value
is accompanied by a time stamp. Each time the checker
performs a put operation, it appends the current value of
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
The checker’s ﬁxed-sized state consists of two multiset hashes, WRITEHASH and READHASH, and one counter, TIMER.
Initially, the hashes and counter are 0.
put(a, v): writes a value v to address a in the untrusted RAM:
1. Let t be the current value of TIMER. Write (v, t) to a in the untrusted RAM.
2. Update WRITEHASH: WRITEHASH +H= hash(a, v, t).
take(a): reads the value at address a in the untrusted RAM:
1. Read (v, t) from a in the untrusted RAM.
2. Update READHASH: READHASH +H= hash(a, v, t).
3. TIMER = max(TIMER, t + 1).
Figure 3. put and get operations
log-hash-add(a, v): put(a, v).
log-hash-store(a, v): take(a); put(a, v).
log-hash-load(a): v = take(a); return v to the caller; put(a, v).
log-hash-check(): checks if the RAM has behaved like valid RAM (at the end of operation):
take(a) for each address a. If WRITEHASH is equal to READHASH, return true; else, return false.
Figure 4. Log-hash checker for untrusted RAM
the counter (a time stamp) to the data value, and writes
the (data value, time stamp) pair to memory. When the
checker performs a take operation, it reads the pair stored
at an address and, if necessary, updates the counter so that
it is strictly greater than the time stamp that was read. The
multiset hashes are updated (+H) with (a, v, t) triples cor-
responding to the pairs written or read from the RAM.
Figure 4 shows how the checker implements the store-
load interface. To initialize an address, the checker calls
log-hash-add(a, 0) exactly once on each address that the
FSM uses to put an initial value at the address. When
the FSM performs a log-hash-store operation, the checker
takes the original value at the address, then puts the new
value to the address. When the FSM performs a log-hash-
load operation, the checker takes the original value at the
address and returns this value to the FSM; it then puts the
same value back to the address (only the time stamp needs
to be written to RAM). To check the RAM at the end of a
sequence of FSM operations1, the checker calls log-hash-
1As a note, the log-hash-check operation can be performed at any
time, even after each FSM store/load operation. The log-hash scheme does
not require that sequences of operations be performed before log-hash-
check operations can be performed. In the model in Section 3, log-hash-
checks are performed when critical operations are performed. The log-
hash scheme performs very well when critical operations are infrequent,
but may not perform well when critical operations are frequent.
check() which takes the value at each address, then com-
pares WRITEHASH and READHASH.
If WRITEHASH is
equal to READHASH, the checker concludes that the RAM
has been behaving correctly, i.e., like valid RAM. Interme-
diate checks can be performed with a slightly modiﬁed log-
hash-check operation [2] (also, cf. Section 5).
Because the checker checks that WRITEHASH is equal
to READHASH, substitution (the RAM returns a value that
is never written to it) and replay (the RAM returns a stale
value instead of the one that is most recently written) at-
tacks on the RAM are prevented. The purpose of the time
stamps is to prevent reordering attacks in which RAM re-
turns a value that has not yet been written so that it can sub-
sequently return stale data. A formal proof that the scheme
is secure is in [2].
A cache can be used to improve the performance of the
scheme. The cache contains just data value blocks. The
RAM contains (value block, time stamp) pairs. When the
cache brings in a block from RAM, the checker performs
a take operation on the address. When the cache evicts
a block, the checker performs a put operation on the (ad-
dress, value block) pair (if the block is clean, only the time
stamp is written to RAM). The log-hash-check operation
operates as before, except it just has to perform take opera-
tions on uncached RAM addresses.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
hash tree
log-hash
(cid:1)
(cid:2)(cid:3)
(cid:4)
(cid:1)
(cid:2)(cid:3)
(cid:4)
time stamp
time stamp
Figure 5. Tree-log checker
5. Tree-Log Checker
Figure 5 illustrates the tree-log checker and Figure 6
shows the interface that the FSM calls to use the tree-log
checker to check the integrity of the untrusted RAM.
tree-log-store calls hash-tree-store(a, v) if address a
is in the tree or calls log-hash-store(a, v) if a is in the log-
hash scheme. tree-log-load operates similarly.
ﬁrst
calls
tree-log-moveToLogHash
hash-tree-
load(a) to check the integrity of the value v at address a in
the RAM. The hash-tree-updateParent operation checks
the integrity of the parent node of the speciﬁed address and
updates the parent node to contain a hash of the speciﬁed
value (the operation propagates the check and the update
to the root of the tree). The NULL value is a value that
address a cannot have, such as a value greater than the
maximum possible value for address a. (Though it updates
the parent node of the address, hash-tree-updateParent
does not actually write a new value for the address).
hash-tree-updateParent(a, NULL) is called to remove a
log-hash-add(a, v) is then called to add a
from the tree.
with value v to the log-hash scheme2.
tree-log-check checks the integrity of the RAM that is
currently protected by the log-hash scheme by calling log-
tree-log-check takes an argument Y , rep-
hash-check.
resenting a set of addresses. Each address in Y is moved
back to the hash tree as the log-hash-check operation is
performed. Addresses that are not in Y but are in the log-
hash scheme remain in the log-hash scheme. The proof that
the tree-log scheme is secure is in Appendix A.
In the event the log-hash TIMER becomes close to its
maximum value before the FSM calls tree-log-check, the
2Because of the organization of the tree, whenever an address is moved
to the log-hash scheme, the block consisting of the address’s data value
node and its siblings is log-hash-added to the log-hash scheme (the
block’s address is the address of the ﬁrst node in the block). If the tree was
organized such that the data values are hashed ﬁrst, then the tree is created
over the hashes of the data values, individual data value nodes could be
moved to log-hash scheme.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
checker can perform tree-log-check(∅) to reset it.
tree-
log-check(∅) essentially performs an intermediate log-hash
check on the addresses in the log-hash scheme.
The tree-log scheme allows for optimization of the log-
hash scheme. All of the addresses are initially in the tree.
We call the period between intermediate tree-log-check
operations a check period. During a check period, the
checker can move an arbitrary set of addresses to the log-
hash scheme, where the FSM can perform store and load
operations on them in the log hash scheme. When a tree-
log-check operation is performed, all of the addresses in
the log-hash scheme can be moved back to the tree, where
their values will be remembered by the tree. During a sub-
sequent check period, a different arbitrary set of addresses
can be moved to the log-hash scheme to be used by the FSM
in the log hash scheme. The beneﬁt is that, whenever a tree-
log-check operation is performed, only the addresses of the
data that have been moved to the log-hash scheme since the
last tree-log-check operation need to be read to perform
the check, as opposed to reading the entire set of addresses
that the FSM had used since the beginning of its execution.
If the tree-log-check operation needs to read addresses that
are protected by the log-hash scheme, but were not used
during the check period, then the log-hash scheme is not
optimal. Thus, the ability of the tree-log scheme to move
the set of addresses that are accessed during a check period
into the log-scheme and move them back into the tree on a
tree-log-check operation so that a different set of addresses
can be moved to the log-hash scheme during a subsequent
check period, helps to optimize the bandwidth overhead of
the log-hash scheme.
5.1. Caching
Caching is easily integrated into the tree-log scheme us-
ing the approaches described in Sections 4.1 and 4.2. If the
block’s address is protected by the tree, when a data value
block is brought into the cache or evicted from the cache,
tree-log-store(a, v): stores v at address a:
1. If a is protected by the tree, hash-tree-store(a, v). Else, log-hash-store(a, v).
tree-log-load(a): loads the data value at address a:
1. If a is protected by the tree, hash-tree-load(a). Else, log-hash-load(a).
tree-log-moveToLogHash(a): move address a from the tree to the log-hash scheme:
1. v = hash-tree-load(a).
2. hash-tree-updateParent(a, NULL).
3.
log-hash-add(a, v).
tree-log-check(Y ): checks if the RAM (currently being protected by the log-hash scheme) has behaved like valid RAM;
each of the addresses in set Y is moved from the log-hash scheme to the hash tree:
1.
log-hash-check().
Also, create a new TIMER
each address a that is read, where v is the data value of a:
(a) if a ∈ Y , call hash-tree-updateParent(a, v); else call log-hash-add(a, v), using TIMER
(cid:1) and WRITEHASH
(cid:1). As the untrusted RAM is read to perform the log-hash-check, for
(cid:1) and WRITE-
HASH
(cid:1), to reset the time stamps in RAM and update WRITEHASH
(cid:1).
Set TIMER and WRITEHASH to TIMER
(cid:1) and WRITEHASH
(cid:1); reset READHASH to 0.
Figure 6. Tree-log checker for untrusted RAM
the caching approach in Section 4.1 is used. If the block’s
address is protected by the log-hash scheme, the caching ap-
proach in Section 4.2 is used. tree-log-moveToLogHash
brings the block and/or the block’s parent into the cache
if they are not already in the cache, using the approach in
Section 4.1. The parent is then updated in the cache. The
tree-log-check uses an approach similar to that in Sec-
tion 4.2 when performing the log-hash-check operation.
If the block’s address is in Y , the block’s parent is brought
into the cache as described in Section 4.1 and updated in the
cache.
5.2. Bookkeeping
In Appendix A, we prove that, with regards to security,
the data structures that the checker uses to determine if an
address is protected by the hash tree or if it is protected by
the log-hash scheme, and to determine which addresses to
read to perform a tree-log-check operation, do not have to
be protected. The necessary information is already implic-
itly encoded in the hash tree and log hash schemes. The
data structures are strictly used for bookkeeping and a sys-
tem designer is free to choose any data structures that allow
the checker to most efﬁciently perform these functions.
In our experiments in Section 7, a range of addresses is
moved to the log-hash scheme when the log-hash scheme
is used. The checker maintains the highest and lowest ad-
dress of the range in its ﬁxed-sized trusted state. When the
checker performs a tree-log-check operation, it moves all
of the addresses in the log-hash scheme to the tree, so that
a separate range of addresses can be moved to the log hash
scheme during a subsequent check period.
Maintaining a range of addresses in the log-hash scheme
is very effective when the FSM exhibits spatial locality in its
accesses, which is common for software programs. How-
ever, instead of using a range, a more general data struc-
ture would be to use a bitmap stored unprotected in RAM.
Optionally, some of the bitmap could be cached. With the
bitmap implementation, the checker may also maintain a
ﬂag in its trusted state.
If the ﬂag is true, the checker
knows that all of the data is in the tree and it does not
use the bitmap; its stores/loads perform exactly as hash tree
store/loads. If the ﬂag is false, the checker then uses the
bitmap.
6. Adaptive Tree-Log Checker
Section 6.1 gives an overview of the interface the FSM
calls to use the adaptive tree-log checker to check the in-
tegrity of the RAM. Sections 6.2 and 6.3 examine the
checker in the case where the FSM does not use a cache.
They describe the approach we use to guarantee a worst-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Table 1. ∆R if a range is used for bookkeeping (cf. Section 5.2). In the table, bt is the number of bits
in a time stamp, bb is the number of bits in a data value/hash block and h is the height of the hash
tree (the length of the path from the root to the leaf in the tree).
tree-log-store hash-tree-store ∆R = ω ∗ (2hbb − bb)
tree-log-load hash-tree-load
tree-log-store log-hash-store ∆R = 2hbb − (2(bb + bt)) + ω ∗ (2hbb − bb)
tree-log-store log-hash-load
tree-log-moveToLogHash
tree-log-check
∆R = hbb − (bb + 2bt) + ω ∗ (h − 1)bb
∆R = −(hbb + (h − 1)bb + bt)
∆R = −nlh((bb + bt) + 2(h − 1)bb)
∆R = ω ∗ (h − 1)bb
case bound on the bandwidth overhead of the checker and
the tree-log strategy we adopt. Section 6.4 extends the
methodology to caching. Throughout this discussion, we
will assume that the checker uses a range for its bookkeep-
ing (cf. Section 5.2). In [3], we extend the discussion to
when the checker uses a more general data structure, such
as a bitmap, for its bookkeeping.
6.1. Interface Overview
The adaptive tree-log interface consists of just three
operations: adaptive-tree-log-store(a, v), adaptive-tree-
log-load(a) and adaptive-tree-log-check(); these opera-
tions call their respective tree-log operations (cf. Section 5).
the FSM calls adaptive-
During the FSM’s execution,
tree-log-store and adaptive-tree-log-load to access the
untrusted RAM. The adaptive-tree-log-check is called
whenever the FSM executes a critical operation (cf. Sec-
tion 1 and Section 3).