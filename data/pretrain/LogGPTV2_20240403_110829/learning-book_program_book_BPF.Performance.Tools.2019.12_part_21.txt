### The BCC Project and Its Tools

The BCC (BPF Compiler Collection) project offers over 70 BPF (Berkeley Packet Filter) performance tools, many of which can be customized through command-line options. Comprehensive documentation, including man pages and example files, is provided for all tools. Most of these tools are designed to focus on a single task, ensuring they perform their specific function efficiently. However, some tools are more versatile. This chapter covers four such multi-purpose tools: `funccount(8)` for counting events, `stackcount(8)` for counting stack traces leading to events, `trace(8)` for generating custom per-event output, and `argdist(8)` for summarizing event arguments as counts or histograms. Additionally, the chapter discusses BCC debugging tools. Appendix C provides guidance on developing new BCC tools.

### bpftrace: An Open-Source Tracer Built on BPF and BCC

bpftrace is an open-source tracer built on BPF and BCC, offering a wide array of performance tools and supporting documentation. Unlike BCC, bpftrace includes a high-level programming language that enables the creation of powerful one-liners and short scripts. For instance, you can use bpftrace to summarize the return values of `vfs_read()` as a histogram with a single line of code:

```bash
bpftrace 'kretprobe:vfs_read { @bytes = hist(retval); }'
```

This command produces a histogram of the `vfs_read()` return values, showing the distribution of bytes read or error values.

#### Development and Community

bpftrace was initiated by Alastair Robertson in December 2016 as a personal project. Due to its well-designed architecture and compatibility with the existing BCC/LLVM/BPF toolchain, I joined the project and became a significant contributor, focusing on code, performance tools, and documentation. Since then, many others have joined, and we completed the first set of major features in 2018.

### Introduction to bpftrace

This chapter introduces bpftrace, its features, and its tools, providing an overview of the available documentation. It also explains the bpftrace programming language and concludes with a detailed look at bpftrace debugging and internals.

### Learning Objectives

- Understand bpftrace features and how they compare to other tools.
- Learn where to find tools and documentation, and how to execute them.
- Read and understand the bpftrace source code included in later chapters.
- Develop new one-liners and tools using the bpftrace programming language.
- (Optional) Gain insight into bpftrace internals.

If you want to start learning bpftrace programming immediately, you can skip to Section 5.7 and return later to complete your understanding of bpftrace.

### Comparison with Other Tools

bpftrace is ideal for ad hoc instrumentation with custom one-liners and short scripts, while BCC is better suited for complex tools and daemons.

### bpftrace Components

The high-level directory structure of bpftrace is shown in Figure 5-1. bpftrace includes documentation, man pages, and example files, as well as a tutorial and a reference guide for the programming language. The tools are stored in the `tools` directory with the `.bt` extension.

The front end uses lex and yacc to parse the bpftrace programming language, and Clang for parsing structures. The back end compiles bpftrace programs into LLVM intermediate representation, which is then compiled to BPF by LLVM libraries. See Section 5.16 for more details.

### bpftrace Features

#### Event Sources

- **Dynamic Instrumentation:**
  - Kernel-level (kprobe)
  - User-level (uprobe)
- **Static Tracing:**
  - Kernel-level (tracepoint, softirq)
  - User-level (usdt, via libbcc)
- **Timed Sampling Events:**
  - Timed sampling (profile)
  - Interval events (interval)
- **PMC Events:**
  - Hardware PMC events
- **Synthetic Events:**
  - BEG, END

#### Actions

- **Filtering (predicates)**
- **Per-event Output (print())**
- **Basic Variables (global, $local, and per [tId])**
- **Built-in Variables (pid, tid, comm, nsecs, etc.)**
- **Frequency Counting (count() or ++)**
- **Statistics (min(), max(), sum(), avg(), stats())**
- **Histograms (hist(), lhist())**
- **Timestamps and Time Deltas (nsecs, and hash storage)**
- **Stack Traces:**
  - Kernel (kstack)
  - User (ustack)
- **Symbol Resolution:**
  - Kernel-level (ksym, kaddr)
  - User-level (usym, uaddr)
- **C Struct Navigation (>)**
- **Shell Commands (system())**
- **Printing Files (cat())**
- **Positional Parameters ($1, $2, etc.)**

#### General Features

- Low-overhead instrumentation (BPF JIT, and maps)
- Production safety (BPF verifier)
- Many tools (under /tools)
- Tutorial (/docs/tutorial_one_liners.md)
- Reference guide (/docs/reference_guide.md)

### Installation

bpftrace can be installed via package managers for various Linux distributions. For the latest instructions, refer to the `INSTALL.md` file in the bpftrace repository.

#### Kernel Requirements

It is recommended to use a Linux kernel version 4.9 or newer, as the major BPF components used by bpftrace were added between versions 4.1 and 4.9. Some kernel configuration options must be enabled, such as `CONFIG_BPF=y`, `CONFIG_BPF_SYSCALL=y`, `CONFIG_BPF_JIT=y`, `CONFIG_HAVE_EBPF_JIT=y`, and `CONFIG_BPF_EVENTS=y`.

#### Ubuntu

To install bpftrace on Ubuntu, use the following commands:

```bash
sudo apt-get update
sudo apt-get install bpftrace
```

Alternatively, you can build and install from source:

```bash
sudo apt-get update
sudo apt-get install bison cmake flex g++ git libelf-dev zlib1g-dev libfl-dev systemtap-sdt-dev libllvm7-dev libclang-7-dev clang-7
git clone https://github.com/iovisor/bpftrace
cd bpftrace/build
cmake -DCMAKE_BUILD_TYPE=Release ..
make
sudo make install
```

#### Fedora

To install bpftrace on Fedora, use the following commands:

```bash
sudo dnf install -y bpftrace
```

Alternatively, you can build and install from source:

```bash
sudo dnf install -y bison flex cmake make git gcc-c++ elfutils-libelf-devel llvm-devel clang-devel bcc-devel
git clone https://github.com/iovisor/bpftrace
cd bpftrace
mkdir build; cd build
cmake -DCMAKE_BUILD_TYPE=DEBUG ..
make
sudo make install
```

#### Post-Build Steps

To verify the build, run the test suite and a sample one-liner:

```bash
sudo ./tests/bpftrace_test
sudo bpftrace -e 'kretprobe:vfs_read { @bytes = hist(retval); }'
```

### bpftrace Tools

The bpftrace repository includes a variety of performance tools, each addressing real-world observability issues. These tools are designed to be run in production environments as the root user. Each tool has a corresponding man page and example file, and the source code is well-documented.

#### Tool Execution

To run a bundled tool, use the following command as the root user:

```bash
sudo bpftrace/tools/opensnoop.bt
```

These tools can be placed in a system administration directory, such as `/usr/local/sbin`.

### bpftrace One-Liners

Here are some useful one-liners that demonstrate bpftrace's capabilities:

- Show who is executing what:

  ```bash
  bpftrace -e 'kprobe:do_execve { printf("%s %s\n", comm, str(args->filename)); }'
  ```

- Show new processes with arguments:

  ```bash
  bpftrace -e 'tracepoint:syscalls:sys_enter_execve /join(args->argv) { printf("%s %s\n", comm, join(args->argv, " ")); }'
  ```

These one-liners provide valuable insights and can be extended for more complex scenarios.