The BCC project provides more than 70 BPF performance tools, many of which support
customizations via command line options and all are provided with documentation: man pages
and examples files. Most are single-purpose tools, each focusing on observing one activity well.
Some are multi-purpose tools; I covered four of them in this chapter: funccount(8) for counting
events, stackcount(8) for counting the stack traces that led to events, trace(8) for printing custom
per-event output, and argdist(8) for summarizing event arguments as counts or histograms. This
chapter also covers BCC debugging tools. Appendix C provides examples of how to develop new
BCC tools.
---
## Page 166
race
bpftrace is an open source tracer built on BPF and BCC. Like BCC, bpftrace ships with many
performance tools and supporting documentation. However, it also provides a high-level
programming language that allows you to create powerful one-liners and short tools. For example,
summarizing the vfs_read() return value (bytes or error value) as a histogram using bpftrace
one-liner:
+ bpftrace
'kretprobe:vfs_read ( Bbytes = hist (retval) : }'
1pEobe
C
fbytes:
[..., 0)
80886886886081 E27
[0]
1101889889
[1]
[2, 4)
2318
[4, B]
91
[8, 16}
[16, 32)
44188
[32, 64)
80081L9
[64, 128]
501889
[128, 256}
2418
[256, 512)
1|
bpftrace was created by Alastair Robertson in December 2016 as a spare-time project. Because it
looked well designed and was a good fit with the existing BCC/LLVM/BPF toolchain, I joined the
project and became a major contributor of code, performance tools, and documentation. We've
now been joined by many others, and we finished adding the first set of major features during
2018.
This chapter introduces bpftrace and its features, provides an overview of its tools and
documentation, explains the bpftrace programming language, and ends with a tour of bpftrace
debugging and internals.
---
## Page 167
130
Chapter 5 bpftrace
Learning objectives:
 Gain knowledge of bpftrace features and how they compare to other tools
= Learn where to find tools and documentation, and how to execute tools
 Learn how to read the bpftrace source code included in later chapters
 Develop new one-liners and tools in the bpftrace programming language
 (optional) Get exposure to bpftrace internals
If you want to immediately start learning bpftrace programming, you can jump to Section 5.7
and then later return here to finish learning about bpftrace.
bpftrace is ideal for ad hoc instrumentation with custom one-liners and short scripts, whereas
BCC is ideal for complex tools and daemons.
5.1
bpftraceComponents
The high-level directory structure of bpftrace is shown in Figure 5-1.
bpftrace
tools
nan
docs
mans
Y
README
Reference
Guide
Front-end
ast
Tool
Man
One-Liners
CC
IR
Pages
INSTALL
lex yacc
Codegen
*.bt
*_exanple.txt
*.8
Tutorial
CC
,md
Figure 5-1  bpftrace structure
bpftrace contains documentation for the tools, man pages, and examples files, as well as
a bpftrace programming tutorial (the one-liners tutorial) and a reference guide for the
programming language. The included bpftrace tools have the extension .bt.
The front end uses lex and yacc to parse the bpftrace programming language, and Clang
for parsing structures. The back end compiles bpftrace programs into LLVM intermediate
representation, which is then compiled to BPF by LLVM libraries. See Section S.16 for details.
---
## Page 168
5.2 bpftrace Features
131
5.2bpftraceFeatures
Feature lists can help you learn the capabilities of a new technology. I created desired feature
lists for bpftrace to guide development, and these are now delivered features and are listed in
this section. In Chapter 4, I grouped the BCC feature lists by kermel- and user-level features,
since those are different APIs. With bpftrace, there is only one API: bpftrace programming. These
bpftrace features have instead been grouped by event sources, actions, and general features.
5.2.1 bpftrace Event Sources
These event sources use kernel-level technologies that were introduced in Chapter 2. The bpftrace
interface (the probe type) is shown in parentheses:
 Dynamic instrumentation, kernel-level (kprobe)
● Dynamic instrumentation, user-level (uprobe)
● Static tracing, kernel-level (tracepo int, sof tvare)
 Static tracing, user-level (usdt., via libbcc)
 Timed sampling events (prof11e)
Interval events (1nterva1)
● PMC events (hardvare)
●Synthetic events (BEGIx, END)
These probe types are explained in more detail in Section 5.9, More event sources are planned
in the future and may exist by the time you read this; they include sockets and skb events, raw
tracepoints, memory breakpoints, and custom PMCs.
5.2.2bpftrace Actions
These are actions that can be performed when an event fires. The following is a selection of key
actions; the full list is in the bpftrace Reference Guide:
 Filtering (predicates)
 Per-event output (pzintI (1)
Basic variables (globa1, $2oca1, and per [tIdJ)
 Built-in variables (pid, tid, conn, nsecs, )
([onren) /ox) sieue aspeloossy 
● Frequency counting (count () or ++)
▪ Statistics (n1n (1 , nax (), sun (), avg (1 , stat.s (1)
---
## Page 169
132
2 Chapter 5 bpftrace
●Histograms (hist (), 1hist ())
Timestamps and time deltas (nsecs, and hash storage)
•Stack traces, kernel (ks tack)
Stack traces, user (ustack)
●Symbol resolution, kernel-level (xsyn (1, kaGdr ())
 Symbol resolution, user-level (usym () , uaddx (1 )
•C struct navigation (>)
(11) ssaooe Aeury =
●Shell commands (system (1)
Printing files (cat ())
• Positional parameters (51, 52, .)
Actions are explained in more detail in Section 5.7. More actions may be added where there are
strong use cases, but it is desirable to keep the language as small as possible to make it easier to
learn.
5.2.3bpftrace General Features
The following are general bpftrace features and components of the repository
 Low-overhead instrumentation (BPF JIT, and maps)
• Production safe (BPF verifier)
 Many tools (under /tools)
• Tutorial (/docs/tutorial_one_liners.md)
Reference guide (/docs/reference_guide.md)
5.2.4bpftrace Compared to Other Observability Tools
Comparing bpftrace to other tracers that can also instrument all event types:
perf(1): bpftrace provides a higher-level language that is concise, whereas the perf(1)
qeuoy Areunq e u Surdunp quasa puapga soddns (1)juad asoqan st a8enSue[ Sud1os
uapgga suoddns aoenpdq dos μad se qons sapou Areuruns Asourou-t ptre puooas μad eA
in-kernel summaries, such as custom histograms, whereas perf(1)'s built-in in-kernel
summaries are limited to counts (perf stat). perf(1)'s capabilities can be extended by
for a perf(1) BPF example.
running BPF programs, although not in a high-level language like bpftrace; see Appendix D
•Ftrace: bpftrace provides a higher-level language that resembles C and awk, whereas the
Ftrace custom instrumentation, including hist-triggers, has a special syntax of its own.
Ftrace has fewer dependencies, making it suited for tiny Linux environments. Ftrace alsc
has instrumentation modes such as function counts that have so far been performance
---
## Page 170
5.3bpftrace Installation  133
optimized more than the event sources used by bpftrace. (My Ftrace funccount(8) currently
has faster start and stop times and lower runtime overhead than a bpftrace equivalent.)
paseq s aoengdq 'sasensue1 pasaf-asq8q aptsod de1as.is pue aoengdq qog deuagsis 
on built-in Linux technologies, whereas SystemTap adds its own kernel modules, which
o deuass rog unaq seu xo aHa ue 1auo suasis uo gearun uasod ar
support a BPF back end, as bpftrace does, which should make it reliable on these other
systems. SystemTap currently has more helper functionality in its libraries (tapsets) for
instrumenting different targets.
• LTIng: LTTng has optimized event dumping and provides tools for analyzing event dumps.
This takes a diferet aproh to pefomane analysthanbftrace, whch isdesignedf
ad hoc real-time analysis.
 Application tools: Application- and runtime-specific tools are limited to user-level
visibility. bpftrace can also instrument kernel and hardware events, allowing it to identify
the source of issues beyond the reach of those tools. An advantage of those tools is that
they are usually tailored for the target application or runtime. A MySQL database profiler
already understands how to instrument queries, and a JVM profiler already can instrument
garbage collection. In bpftrace, you need to code such functionality yourself.
aoengdq asn o ou 'suaqoad aajos o s eo8 au1 uogeost u aoendq asn o zessaoau jou s1
exclusively, and sometimes it is fastest to use a combination of these tools
5.3bpftraceInstallation
bpftrace should be installable via a package for your Linux distribution, but at the time of writing,
these packages have only begun to appear; the fist bpftrace packages are a snap from Canonical
and a Debian package* that will also be available for Ubuntu 19.04. You can also build bpftrace
from source. Check INSTALL.md in the bpftrace repository for the latest package and build
instructions [63].
5.3.1KernelRequirements
It is recommended that you use a Linux 4.9 kernel (released in December 2016) or newet.
The major BPF components that bpftrace uses were added between the 4.1 and 4.9 releases.
Improvements have been added in later releases, so the newer your kernel, the better. The BCC
documentation includes a list of BPF features by Linux kernel version, which helps explain why
later kernels are better (see [64]).
Some kernel configuration options also need to be enabled. These options are now enablexd
:are au uau aueu o paau pou op Aed no os suonqsp ueu u neap q
CONFIG_BPF_EVENTS=y.
CONFIG_BPF=y, CONFIG_BPF_SYSCALL=y, CONFIG_BPF_JTT=y, CONFIG_HAVE_EBPF_IT=y,
1. Thanks to Colin lan King [61].
2 Thanks to Vincent Bemat [62]
---
## Page 171
134
Chapter 5 bpftrace
5.3.2 Ubuntu
Once the bpftrace package is available for your Ubuntu distribution, installation should be:
sepdn 4a6-de opns
sudo apt-get install bpftrace
bpftrace can also be built and installed from source:
sudo apt-get update
sudo apt=get instal1 bison cmake flex g++ git Libelf=dev zliblg=dev Libfl-dev 
syatemtap=sdt-dev 11v=7dev 11vni7zuntine 1ibclang-7=dev c1anq7
git clone https://github-con/iovisor/bpftrace
nkdiz bpftzace/bu11d; cd bpftzace/bu11d
cmake -DCMAKE_BUILo_TYPE=Release .-
make
make insts11
5.3.3 Fedora
aq pnous uogeesus pageyoed uaaq seq aoendlq aouo
sudo dnf instal1 -y bpftrace
bpftrace can also be built from source:
sudo dnf install -y bison flex cmake make git gcc=c++ elfutilslibelfdeve1 
2.11b-devel 11vm=deve1 clang-deve1 bcc=deve1
git clone https://github-con/iovisoz/bpftrace
cd bpf trace
nkdie build; cd bui1ld; cnake -DCMAKE_BUILD_TYPE=DEBUG -
nake
5.3.4 Post-Build Steps
To confirm that the build was successful, you can run the test suite and a one-liner as an
experiment:
sudo ./tests/bpftrace_test
([suoo *μu,ss Aq dee[sl rautad } des[soueuop:eqoxdx, a- soexgdq/oxs/ * opns
---
## Page 172
5.4  bpftrace Tools
135
Run sudo make insta11 to install the bpftrace binary as /ust/local/bin/bpftrace and the tools in
/usr/local/share/bpftrace/tools. You can change the install location by using a cmake(1) option, 
where DCHAKE_INSTALL_PREFIX=/usz/1oca1 is the default.
5.3.5
Other Distributions
Check for an available bpftrace package
, as well as the bpftrace INSTALL.md instructions
5.4bpftraceTools
book that can observe them.
Appicat
balle
System Libraries
vriteback
System Call insertace
lfe
opttrace
Sockets
pidpersc
VFS
Schedule
oxt4dist
overlayts
File Systems
TCP/UDP
adflush
Volume Managet
IP
Virtual
biosnsop
Block Devic
Net Device
Device Dri
te8021
prior teftracetoo1
Legend:
CPU:
Figure 5-2 bpftrace performance tools
The current tools in the bpftrace repository are colored black, and the new bpftrace tools from
this book are colored differently (red or gray, depending on your version of this book). Some
variations are not included here (e.g., the qdisc variants from Chapter 10).
---
## Page 173
136
Chapter 5 bpftrace
5.4.1
Highlighted Tools
Table 5-1 lists a selection of tools organized by topic. These tools are covered in detail in later
chapters.
Table 5-1
Selected bpftrace Tools, by Topic and Chapter
Topic
Highlighted Tools
Chapter(s)
CPU
execsnoop.bt, runqlat.bt, runqlen.bt, cpuwallk.bt, offcputime.bt
6
Memory
oomkill.bt, failts.bt, vmscan.bt, swapin.bt
7
File systems
fsstat.bt,filffe.bt, xfsdist.bt
8
Storage l/0
biosnoop.bt, biolatency.bt, bitesize.bt, biostacks.bt,
9
scsilatency.bt, nvmelatency.bt
Networking
tcpaccept.bt, tcpconnect.bt, tcpdrop.bt, tcpretrans.bt,
10
gethostlatency.bt
Security
ttysnoop.bt, elfsnoop.bt, setuids.bt
11
Languages
 jnistacks.bt, avacalls.bt
12
Applications
threadsnoop.bt, pmheld.bt, naptime.bt, mysqld_qslower.bt
13
Kernel
mlock.bt, mheld.bt, kmem,bt, kpages.bt, workq.bt
14
Containers
pidnss.bt, blkthrot.bt
15
Hypervisors
xenhyper.bt, cpustolen.bt, kvmexits.bt
16
Debugging /
execsnoop.bt, threadsnoop.bt, opensnoop.bt, killsnoop.bt,
6, 8, 13
multi-purpose
signals.bt
Note that this book also describes BCC tools that are not listed in Table 5-1.
After reading this chapter, you can jump to later chapters and use this book as a reference guide.
5.4.2
Tool Characteristics
The bpftrace tools have a number of characteristics in common:
They solve real-world observability issues.
●They are designed to be run in proxduction environments, as the root user.
There is a man page for every tool (under man/man8).
●There is an examples file for every tool, containing output and discussion (under
tools/*_examples.txt).
•The tool source code begins with a block comment introduction.
The tools are as simple as possible, and short. (More complex tools are deferred to BCC.)
---
## Page 174
5.5 bpftrace One-Liners
137
5.4.3 Tool Execution
Bundled tools are executable and can be run immediately as the root user:
bpftrace/too1 s$ 1s -1h opensnoop.bt
rvxx=x=x 1 bgregg bgregg 1.1K Nov 13 10:56 opensnoop.bt*
bpftrace/too1ss /opensnoop .bt
ERROR: bpftrace currently only supports running as the root user
bpftrace/ tools$ sudo - /opensnoop .bt
Attaching 5 pzobes...
Tracing open syscalls... Hit Ctrl-C to end.
PID
COHx
FD ERR PATH
25612  bpftrace
1458 Xorg
23
0 /pzoc/18416/cnd11ne
0 /dev/nu11
118
[...]
These tools can be placed with other system administration tools in an sbin diectory, such as
/usr/local/sbin.
5.5bpftraceOne-Liners
This section provides a selection of one-liners that are useful both in themselves and to
demonstrate the various bpftrace capabilities. The next section explains the programming
language, and later chapters introduce more one-liners for specific targets. Note that many
of these one-liners summarize data in (kernel) memory and do not print a summary until
terminated with Ctrl-C.
Show who is executing what:
Bt.r (args=>filenane)) : 1*
Show new processes with arguments:
bpftrace -e *tracepointisyscalls:ays_enter_execve /join (axgs=>argv) : I*