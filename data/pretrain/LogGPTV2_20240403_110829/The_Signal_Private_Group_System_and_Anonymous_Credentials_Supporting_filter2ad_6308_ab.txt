are the same party, so a KVAC system is a natural ﬁt.
2.3 MACs and Algebraic MACs
Many popular MAC algorithms are constructed using symmetric-key primitives like hash
functions (e.g., HMAC [KBC97]) and block ciphers (e.g., Poly1305-AES [Ber05]). Unlike
algebraic MACs, these MACs do not have eﬃcient zero-knowledge proofs associated to
them. We use the term algebraic MAC to mean a MAC constructed using group operations.
Dodis et al. [DKPW12] study many algebraic MACs, and Chase et al. [CMZ14] show that
certain algebraic MACs can be used to construct an eﬃcient type of anonymous credential.
We describe a particular algebraic MAC, called MACGGM, that we use as a building
block in our new MAC scheme.
Deﬁnition 1. The MACGGM construction [DKPW12, CMZ14] is an algebraic MAC con-
structed in a group G of prime order q, with the following algorithms.
KeyGen: choose random (x0, x1) ∈ Zq
MAC(sk, m): choose random U ∈ G, output σ = (U, U x0+x1m).
Verify(sk, (U, U(cid:48)), m): recompute U(cid:48)(cid:48) = U x0+x1m, output “valid” if U(cid:48)(cid:48) = U(cid:48), and “invalid”
2, output sk = (x0, x1).
otherwise.
In [DKPW12] it is shown that MACGGM satisﬁes a weak notion of MAC security called
selective security (where the adversary must specify the message that will be forged in
advance), assuming DDH. In [CMZ14, ABS16], it is shown that MACGGM is uf-cmva secure
in the generic group model.
The security notions for algebraic MACs are the same as for traditional MACs.
8
uf-cma: unforgeability under chosen message attacks
suf-cma: strong unforgeability under chosen message attacks
suf-cmva: strong unforgeability under chosen message and veriﬁcation attacks
Deﬁnition 2. For a MAC with algorithms (KeyGen, MAC, Verify), consider the following
security game between a challenger C and an attacker A.
1. C uses KeyGen to generate sk. If the MAC has public parameters, C gives them to A.
2. A makes queries to C.
• MAC query: A submits m and C outputs σ = MAC(sk, m). C stores (m, σ) in a
set M .
• Verify query: A submits (σ, m) and C outputs Verify(sk, σ, m)
3. A outputs (σ∗, m∗)
We say that A wins the uf-cma game if no Verify queries are made, and m∗ is not in M . We
say that A wins the suf-cma security game if no Verify queries are made, and (m∗, σ∗) (cid:54)∈ M .
We say that A wins the suf-cmva game if (m∗, σ∗) (cid:54)∈ M . The MAC is uf-cma-secure if no
polynomial-time A wins the uf-cma game with probability that is non-negligible in κ (and
suf-cma, suf-cmva security are deﬁned analogously).
A proof of the following lemma is in [BS20, Theorem 6.1]. Basically it says that for a
strongly unforgeable MAC, veriﬁcation queries don’t help an attacker (when looking only
at asymptotic security).
Lemma 3. Let M be a MAC scheme. The security notions suf-cma and suf-cmva are
equivalent. If M is suf-cma secure, then it is also suf-cmva secure (and vice-versa).
2.4 Zero-Knowledge Proofs
In multiple places our constructions use zero-knowledge (ZK) proofs to prove knowledge of
discrete logarithms and of representations of elements in G. We use the notation introduced
by Camenisch and Stadler [CS97]. A non-interactive proof of knowledge π is described by:
π = PK{(x, y, . . .) : Predicates using x, y and public values}
which means that the prover is proving knowledge of (x, y, . . .) (all elements of Zq), such
that the predicates are satisﬁed. Predicates we will use in this paper are knowledge of
a discrete logarithm, e.g., PK{(x) : Y = Gx} for public Y and G, and knowledge of
xi}. We
also use multiple predicates, and require that they all be true, e.g., PK{(x, y) : Y =
a representation using two or more bases, e.g., PK{(x1, . . . , xn) : Y = (cid:81)n
i=1 Gi
9
Gx ∧ Z = GyH x}. Given two proofs we can combine them by merging the list of secrets
and predicates, e.g., proofs π1 = PK{(x) : Y = Gx} and π2 = PK{(x, y) : Z = GxH y}
combine to give π3 = PK{(x, y) : Y = Gx ∧ Z = GxH y}.
There are multiple ways to instantiate the proofs of knowledge we need. The Signal
implementation uses the ”generic linear” generalization of Schnorr’s protocol described in
[BS20, Ch.19], made noninteractive with the Fiat-Shamir transform [FS87].
2.5 Secure Messaging and Signal
In a secure messaging application such as Signal, users send each other encrypted mes-
sages with the aid of a server. For the purposes of this document, most details of the
Signal Protocol [Sig19] can be abstracted away, leaving a few points which are crucial for
understanding the Signal Private Group System in Section 5.
Users can contact the Signal server over a mutually-authenticated secure channel, or
over a secure channel that only authenticates the server. For simplicity, we’ll describe the
former case as an authenticated channel, and the latter case as an unauthenticated channel.
Unauthenticated channels are used when the user wishes to interact with the server without
revealing their identity, and thus will be used extensively in the protocols described here.
When users in a Signal group send encrypted messages to the group, they encrypt
and send the message to each group member, individually, with end-to-end encryption.
The server is given no explicit indication of the diﬀerence between group and non-group
encrypted messages, apart from traﬃc analysis.
Users are identiﬁed by a UID. Users send their proﬁle key attached to encrypted text
messages if the recipient is trusted, which we interpret to mean either: the recipient is in
the sender’s address book; or the sender initiated the conversation; or the sender opted in
to sharing proﬁle data with the recipient. Given a user’s UID and proﬁle key, one can fetch
and decrypt proﬁle data they have uploaded for themselves.
3 A New KVAC and Protocols
In this section we deﬁne our new keyed-veriﬁcation anonymous credential system. We
start with the new algebraic MAC that the scheme is based on, then describe protocols for
credential issuance and presentation. Security analysis of these new primitives is given in
Section 7.
3.1 A New Algebraic MAC
Our new MAC is constructed in a group G of prime order q. A new feature that is
important for our use case is that the list of attributes may contain a mix of elements of G
(group attributes), or integers in Zq (scalar attributes), while in previous work attributes
were restricted to being chosen from Zq. When using generalized Schnorr proofs in a
10
cyclic group (the most common ZK proof system), the types of statements that can be
proven about attributes in G are limited, but we will be able to prove statements about
the plaintext encrypted by an Elgamal-like ciphertext.
Parameters Let κ be a security parameter. The number of attributes in the message
space is denoted n. We write (cid:126)x to denote a list of values. The scheme requires the following
ﬁxed set of group elements:
G, Gw, Gw(cid:48), Gx0, Gx1, Gy1, . . . , Gyn, Gm1, . . . , Gmn, GV
generated so that the relative discrete logarithms are unknown, e.g., Gm1 = HashToG(“m1”).
KeyGen(params) The secret key is sk := (w, w(cid:48), x0, x1, (y1, . . . , yn)), all randomly-chosen
elements of Zq. We will write W := Gw
w, and W is considered part of sk. Optionally,
compute the issuer parameters iparams (CW , I) as follows:
CW = Gw
wGw(cid:48) w(cid:48)
, I =
Gx0
x0Gx1
GV
x1Gy1
y1 . . . Gyn
yn
The iparams are optional for basic use of the MAC, but are required when the MAC is
used in the protocols we consider, therefore we assume iparams is always present.
MAC(sk, (cid:126)M ) The MAC is calculated over a collection of group attributes and scalar at-
tributes. Each attribute is represented by a group element Mi ∈ G. For a given MAC
key, each of the n attribute positions is ﬁxed to always contain a group attribute in G, or
always encode a scalar attribute in Zq. If Mi encodes a scalar attribute then Mi = Gmi
mi.
Choose random t ∈ Zq, U ∈ G, and compute
(cid:32) n(cid:89)
(cid:33)
V = W U x0+x1t
yi
Mi
Output (t, U, V ) as the MAC on (cid:126)M .
i=1
Verify(sk, (cid:126)M , (t, U, V )) Recompute V as in MAC (denote it V (cid:48)) and accept if V ?= V (cid:48).
Security Intuitively, for security, the component U x0+x1t is a MACGGM tag on t, and uses
distinct random values (U, t), to prevent multiple MACs with diﬀerent t from being com-
bined in a forgery. The terms using yi prevent manipulation of individual attributes. Note
also that the term W is necessary, since without it, given a MAC (t, U, V ) on (M1, . . . , Mn),
n) for any c ∈ Zq. In Section 7.3 we prove
then (t, U c, V c) is a valid MAC on (M c
this MAC is suf-cmva secure, assuming DDH is hard in G and MACGGM is a uf-cma secure
MAC.
1 , . . . , M c
11
Optimizations We note that the construction can be derandomized by setting t as the
hash of the attributes, and U as a hash of t. The resulting tags would be a single group
element long.
In the context of a credential system requiring many scalar attributes,
m1 ··· G(cid:96)
it may be
more eﬃcient to ﬁrst commit to many scalar attributes as a group attribute, e.g., C =
m(cid:96)H r, then compute the MAC over C. Then during credential presentation,
G1
the prover can avoid having to create and send a commitment for each scalar attribute
separately (one of the performance drawbacks of [CMZ14]). In this work credentials have
at most one scalar attribute, so we did not investigate this optimization further.
3.2 Credential Issuance and Presentation
Here we describe how credentials are issued and presented. We describe issuance when
there are no blind attributes (i.e. attributes not known to the issuer), and describe blind
issuance in Section 5.10.
Credential Issuance A credential is a MAC (t, U, V ) from Section 3.1 on the attributes
Mi. The issuer proves knowledge of the secret key, and that (t, U, V ) is correct relative to
iparams = (CW , I), with the following proof of knowledge.
πI = PK{(w,w(cid:48), x0, x1, y1, . . . , yn) :
CW = Gw
I =
Gx0
wGw(cid:48) w(cid:48) ∧
GV
x1Gy1
x0Gx1
y1 . . . Gyn
yn
(cid:32) n(cid:89)
∧
(cid:33)
}
V = Gw
w(U x0)(U t)x1
yi
Mi
Credential Presentation To present the credential (t, U, V ) on attributes (cid:126)M , a user
creates the following proof. This proves that the user holds a valid credential, and has
knowledge of the hidden scalar attributes (for proving that hidden group attributes match
some ciphertext we will need additional predicates; see the next section).
i=1
12
1. Choose z ∈R Zq and compute (i ranges from 1 to n):
Z = I z
Cx0 = Gx0
Cx1 = Gx1
zU
zU t
Gyi
Gyi
Gyi
zV
Cyi =
CV = GV
zMi if i is a hidden group attribute
zGmi
z if i is a revealed attribute
mi if i is a hidden scalar attribute
along with the value z0 = −zt (mod q). Let Hs denote the set of hidden scalar
attributes.
2. Compute the following proof of knowledge:
π = PK{(z, z0,{mi}i∈Hs, t) :
Z = I z ∧
Cx1 = Cx0
(cid:40)
Cyi =
}
z ∧
z0Gx1
tGx0
zGmi
z if i is a revealed attribute
Gyi
Gyi
mi if i is a hidden scalar attribute
3. Output (Cx0, Cx1, Cy1, . . . , Cyn, CV , π)
4. Let H denote the set of all hidden attributes. The veriﬁer computes
Z =
(W Cx0
x0Cx1
i(cid:54)∈H(CyiMi)yi)
x1(cid:81)
CV
i∈H Cyi
yi(cid:81)
using the secret key (W, x0, x1, y1, . . . , yn) and revealed attributes, and then veriﬁes π.
Security The security of our new KVAC construction is analyzed in Section 7.4. We
show that the scheme has the security properties deﬁned in [CMZ14], namely, correctness,
unforgeability, anonymity, blind issuance and key-parameter consistency.
4 Veriﬁable Encryption
Since our credential system supports attributes that are group elements, we can use the
Elgamal encryption scheme to create an eﬃcient veriﬁable encryption scheme [CD00]. By
veriﬁable, we mean that we can prove properties about the plaintext in zero-knowledge.
13
Suppose we have a credential certifying a group attribute M1, and let Y = Gy be an
Elgamal public key. The encryption of M1 with Y is (E1, E2) = (Gr, Y rM1). To prove
that the plaintext is certiﬁed, we add two predicates to the credential presentation proof:
E1 = Gr ∧ Cy1/E2 = Gy1
z/Y r .
Previous veriﬁable encryption schemes did not allow us to eﬃciently encrypt group ele-
ments, and thus required more expensive techniques, such as a variant of Paillier’s encryp-
tion scheme [CS03], or groups with bilinear maps [CHK+11]. We caveat that the above
basic Elgamal scheme is not CCA secure, and we have not carefully analyzed its secu-
rity. Since it will be suﬃcient for our application, we focus on symmetric-key veriﬁable
encryption that is CCA secure.
Informally, we will