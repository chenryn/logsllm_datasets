title:Behavior-based Spyware Detection
author:Engin Kirda and
Christopher Kruegel
Behavior-based Spyware Detection
Engin Kirda and Christopher Kruegel
Secure Systems Lab
Technical University Vienna
{ek,chris}@seclab.tuwien.ac.at
Greg Banks, Giovanni Vigna, and Richard A. Kemmerer
Department of Computer Science
University of California, Santa Barbara
{nomed,vigna,kemm}@cs.ucsb.edu
Abstract
Spyware is rapidly becoming a major security is-
sue. Spyware programs are surreptitiously installed on a
user’s workstation to monitor his/her actions and gather
private information about a user’s behavior. Current anti-
spyware tools operate in a way similar to traditional anti-
virus tools, where signatures associated with known spy-
ware programs are checked against newly-installed ap-
plications. Unfortunately, these techniques are very easy
to evade by using simple obfuscation transformations.
This paper presents a novel technique for spyware de-
tection that is based on the characterization of spyware-
like behavior. The technique is tailored to a popular
class of spyware applications that use Internet Explorer’s
Browser Helper Object (BHO) and toolbar interfaces to
monitor a user’s browsing behavior. Our technique uses a
composition of static and dynamic analysis to determine
whether the behavior of BHOs and toolbars in response
to simulated browser events should be considered mali-
cious. The evaluation of our technique on a representa-
tive set of spyware samples shows that it is possible to
reliably identify malicious components using an abstract
behavioral characterization.
Keywords: spyware, malware detection, static analysis,
dynamic analysis.
1 Introduction
Spyware is rapidly becoming one of the major threats
to the security of Internet users [20, 23]. A compre-
hensive analysis performed by Webroot (an anti-spyware
software producer) and Earthlink (a major Internet Ser-
vice Provider) showed that a large portion of Internet-
connected computers is infected with spyware [1], and
that, on average, each scanned host has 25 different spy-
ware programs installed [7].
Different from other types of malware, such as viruses
and worms, the goal of spyware is generally not to cause
damage or to spread to other systems. Instead, spyware
programs monitor the behavior of users and steal private
information, such as keystrokes and browsing patterns.
This information is then sent back to the spyware dis-
tributors and used as a basis for targeted advertisement
(e.g., pop-up ads) or marketing analysis. Spyware pro-
grams can also “hijack” a user’s browser and direct the
unsuspecting user to web sites of the spyware’s choos-
ing. Finally, in addition to the violation of users’ privacy,
spyware programs are also responsible for the degrada-
tion of system performance because they are often poorly
coded.
A number of anti-spyware products, whose goal is the
identiﬁcation and removal of unwanted spyware, have
been developed. These tools are mostly based on the
same technology used by anti-virus products. That is,
they identify known spyware instances by comparing
the binary image of these programs with a number of
uniquely-characterizing signatures. These signatures are
manually generated by analyzing existing samples of
spyware. As a consequence, these anti-spyware tools
suffer from the same drawbacks as signature-based anti-
virus tools, including the need for continuous updating of
their signature set and their inability to deal with simple
obfuscation techniques [4].
This paper presents a novel spyware detection tech-
nique that overcomes some of the limitations of exist-
ing anti-spyware approaches. Our technique is based on
an abstract characterization of the behavior of a popu-
lar class of spyware programs that relies on Internet Ex-
plorer’s Browser Helper Object (BHO) and toolbar inter-
faces to monitor a user’s browsing behavior. More pre-
cisely, our technique applies a composition of static and
dynamic analysis to binary objects to determine if a com-
ponent monitors users actions and reports its ﬁndings to
an external entity. This characterization is independent
of the particular binary image and therefore can be used
to identify previously unseen spyware programs, and, in
addition, it is resilient to obfuscation.
USENIX Association
Security ’06: 15th USENIX Security Symposium
273
The main contributions of this paper are as follows:
• We introduce a novel characterization of the behav-
ior of spyware components that are implemented as
Browser Helper Objects or toolbars.
• We present novel static and dynamic analysis tech-
niques to reliably identify malicious behavior in
Browser Helper Objects and toolbar components.
• We present experimental results on a substantial
body of spyware and benign samples that demon-
strate the effectiveness of our approach.
The remainder of this paper is structured as follows.
In Section 2, we present related work in the ﬁeld of
behavior-based malware detection in general and spy-
ware detection in particular. Section 3 provides some
background information on Browser Helper Objects and
toolbars. It also shows how they are exploited by spy-
ware programs to monitor user behavior and to hijack
browser actions. In Section 4, we describe our abstract
characterization of spyware-like behavior. In Section 5,
we motivate the use of static and dynamic analysis for
spyware detection, and we provide the details of our
technique in sections 6 and 7. Section 8 discusses possi-
ble limitations of our proposed system. In, Section 9 we
provide an experimental evaluation of the effectiveness
of our technique. Finally, Section 10 brieﬂy concludes
and outlines future work.
2 Related Work
Spyware is difﬁcult to deﬁne. There are many types of
spyware that behave in different ways and perform ac-
tions that represent different levels of “maliciousness.”
For example, “adware” programs that present targeted
advertisements to the user are considered less malicious
than other forms of spyware, such as key-loggers, which
record every single key pressed by the user. Regardless
of the type of privacy violation performed, spyware is
generally undesirable code that the user wants to remove
from his/her system.
The increasing sensitivity of consumers to the spyware
problem prompted a number of anti-spyware commer-
cial products. For example, both AdAware [2] and Spy-
Bot [22] are popular tools that are able to remove a large
number of spyware programs. Recently, Microsoft re-
leased a beta version of an anti-spyware tool, aptly called
Windows AntiSpyware [14].
Current spyware detection tools use signatures to de-
tect known spyware, and, therefore, they suffer from
the drawback of not being able to detect previously un-
seen malware instances. This is a deﬁciency shared by
other malware-detection tools, such as anti-virus prod-
ucts and many network-based intrusion detection sys-
tems [17, 19]. Recently, researchers have tried to over-
come these limitations by proposing behavior-based mal-
ware detection techniques. These techniques attempt to
characterize a program’s behavior in a way that is inde-
pendent of its binary representation. By doing this, it is
possible to detect entire classes of malware and to be re-
silient to obfuscation and polymorphism.
For example, in [5] the authors characterize different
variations of worms by identifying semantically equiv-
alent operations in the malware variants. Another ap-
proach is followed in [11], which characterizes the be-
havior of kernel-level rootkits. In this case, the authors
use static analysis to determine if a loadable kernel mod-
ule is accessing kernel memory locations that are typi-
cally used by rootkits (e.g., the system call table).
There are many advantages to representing malware
in an abstract way. For instance, by using behavioral
characterizations to detect malicious applications, one
can obviate the need for a large data base of signatures
to identify each known piece of malware. Another im-
portant beneﬁt is that the characterization is resilient to
malware variants and allows for the detection of pre-
viously unseen malware instances. An example of us-
ing behavior characterization is Microsoft’s Strider Gate-
keeper [24]. This tool monitors auto-start extensibility
points (ASEPs) to determine if software that will be exe-
cuted automatically at startup is being surreptitiously in-
stalled on a system.
Our approach is similar to the one pursued by Strider
Gatekeeper, because our goal is to model spyware-like
behavior. Consequently, our behavioral classiﬁcations
are not speciﬁcally tailored to a single spyware program,
but, instead, they are able to detect entire classes of spy-
ware applications. However, our technique is more pow-
erful than the one used by Strider Gatekeeper, because it
identiﬁes a more general behavior pattern, which is the
acquisition of private information and the leaking of this
information outside the boundaries of the application. In
addition, our technique uses a combination of static and
dynamic analysis, which allows for a very precise char-
acterization of the behavior of an application in reaction
to browser events, thus, reducing the chance of false pos-
itives.
The use of static analysis to analyze the behavior of
malware has been proposed previously in [5]. However,
the technique proposed by Christodorescu et al.
is tai-
lored to detect different variations of the same malware
(e.g., different versions of the NetSky worm). Our tech-
nique, instead, focuses on abstract, spyware-like behav-
ior and is not limited to detecting just one spyware pro-
gram and its variants.
274
Security ’06: 15th USENIX Security Symposium
USENIX Association
The technique presented in this paper, however, is not
completely general. We focus explicitly on one type of
spyware, that is, malware that exploits the hooks pro-
vided by Microsoft’s Internet Explorer to monitor the
actions of a user. This is done by using the Browser
Helper Object (BHO) interface or by acting as a browser
toolbar object. Our initial focus is justiﬁed by the fact
that the overwhelming majority of spyware has a com-
ponent based on one of these two technologies. This
is conﬁrmed not only by our own experience in ana-
lyzing various spyware components but also by a recent
study [24], which found that out of 120 distinct spyware
programs, just under 90 used BHOs as an entry point
to monitor user activity and approximately 46 used the
IE toolbar mechanism (note that some spyware programs
used both mechanisms). In addition to these ﬁndings, a
US-CERT report [8] names BHOs as one of the more
frequently used techniques employed by spyware along
with browser session hijacking and stand-alone applica-
tions. Other forms of spyware (e.g., stand-alone appli-
cations) are not currently being addressed but are open
questions for future work. Additionally, we recognize
that spyware does not only affect the Microsoft Win-
dows platform or the Internet Explorer browser. Mozilla
products also have their problems [15], and have not
been completely free from spyware [9, 26]. Other plat-
forms also contain ASEP hooks similar to those found
in Windows as described in [24]. However, as of to-
day the occurrence of spyware affecting other platforms
and browsers is signiﬁcantly lower than that affecting
both Microsoft Windows and Internet Explorer. Still, the
growing popularity of alternatives make this an impor-
tant consideration for the future.
Because of the relevance of the Component Object
Model (COM) architecture and the hooks that Internet
Explorer provides, the next section presents some back-
ground material to help the reader who is not familiar
with these concepts. The following sections then present
the details of our detection technique.
3 Spyware, Browser Helper Objects, and
Toolbars
Spyware authors have many options on a Windows host
when it comes to looking for good vantage points from
which to glean personal information about users. For ex-
ample, Layered Service Providers, which sit between the
application-level network APIs (Application Program-
ming Interfaces) and the kernel, can ﬁlter network trafﬁc
and/or collect information about users. Another exam-
ple is represented by background processes that are au-
tomatically executed at startup to monitor user actions.
Because sensitive information is often accessed through
web-based interfaces, browser plug-ins are another pop-
ular mechanism to collect sensitive data and monitor user
actions.
Internet Explorer plug-ins, and in particular
Browser Helper Objects (BHOs) and toolbars, as men-
tioned previously, are used in the majority of spyware
programs as a mechanism to access information about a
user’s browsing habits or to control the browser’s behav-
ior.
Browser Helper Objects and toolbars are binary ob-
jects that conform to the Component Object Model
(COM). COM is a binary standard developed by Mi-
crosoft to support, among other things, a component-
based software market [25]. Every COM object im-
plements a set of interfaces, each of which is a well-
deﬁned contract that describes what functionality the ob-
ject provides. The COM standard guarantees that the
virtual tables of interfaces remain the same across com-
pilers, allowing COM objects to be implemented and
used by any language that supports calling functions
through a table of function pointers. The IUnknown
interface must be implemented by all COM objects. It
contains reference-counting functionality and the func-
tion QueryInterface, which allows one to query for
the other interfaces that an object might implement.
A Browser Helper Object is in essence a simple COM
object that implements the IObjectWithSite inter-
face. Toolbar objects work in a way similar to BHOs and,
in addition, implement a few more interfaces and include
a graphical component.
At startup, Internet Explorer loads all
the BHOs
that are registered as COM servers and whose Class
Identiﬁers (CLSIDs) are included under the registry key
\HKLM\SOFTWARE\Windows\CurrentVersion\
Explorer\Browser Helper Objects. Toolbars
are loaded in a similar fashion with their CLSIDs being
present under several other keys. Then, for each loaded
BHO or toolbar, the browser calls the SetSite method
exported by the IObjectWithSite interface, passing
a reference to the browser’s IUnknown interface as a
parameter. This reference can then be used by a BHO or
toolbar to query for other interfaces implemented by the
browser. Interfaces of interest include IWebBrowser2,
which allows a BHO or toolbar to access the current
document and Uniform Resource Locator (URL) as well
as to load speciﬁc pages, and IConnectionPoint,
which allows a BHO to monitor the browser events
speciﬁed in DWebBrowserEvents2. Toolbar objects
access browser interfaces in a similar way.
By invoking the methods provided by the browser in-
terfaces, BHOs and toolbars can completely control the
browser’s behavior and access sensitive data entered by
the user during navigation. Because of this, BHOs and
toolbars are often used as the core components in spy-
ware applications.
USENIX Association
Security ’06: 15th USENIX Security Symposium
275
4 Spyware Characterization
A distinctive characteristic of spyware is the fact that
a spyware component (or process) collects data about
user behavior and forwards this information to a third
party. Since we restrict our focus to spyware that is im-
plemented as a BHO or toolbar, we have to identify the
mechanisms that these components employ (i) to moni-
tor user behavior and (ii) to leak the gathered data to the
attacker.
The most straightforward mechanism to monitor user
behavior is to subscribe to browser events (using the