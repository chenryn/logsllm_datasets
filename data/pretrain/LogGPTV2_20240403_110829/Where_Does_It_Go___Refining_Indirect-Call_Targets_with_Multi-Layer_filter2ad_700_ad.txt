### 1. Introduction to the Example

```c
typedef void (*fptr_t0)(char *);
struct A { fptr_t0 handler; };
void func_A(char *);
struct A a = { .handler = &func_A };
struct B b = { .handler = &func_B };
struct B * a2b = (struct B *) &a;
```

**Figure 3: An example showing the FN of FLTA.** The indirect call in line 6 takes a type `fptr_t1`, which only `func_B` matches. However, the real target is `func_A`. FLTA misses it because it does not consider the type casting between `A` and `B`.

```c
(*a2b->handler)(0);
```

### 2. Type Analysis and Function Pointers

For a type `mlt(p)`, the set of valid targets should be the union of all `M[γ]`, where `γ` is in `M` and compatible with `mlt(p)`. All functions in this union are valid targets of the indirect call.

Before formally analyzing MLTA and FLTA, we introduce the concept of **sensitive types** as defined in [27]: a sensitive type is a function-pointer type, a void type, a pointer type of another sensitive type, or a pointer type of a structure that has at least one member with a sensitive type.

### 3. Lemma 1: No Type-Casting of Sensitive Types

**Lemma 1.** If the program does not have any type-cast of sensitive types:
1. FLTA has no false negatives (FNs).
2. MLTA has no FNs.
3. MLTA introduces no extra false positives (FPs) compared to FLTA.
4. MLTA may have fewer FPs than FLTA.

**Proof:**

- **(1) FLTA has no FNs.** Suppose `f` is a target function with type `F` and its address is taken with `a = &f`. `a` must have type `F*`. The confinement rule of FLTA will add `f` into `M[t(a)]`, i.e., `f ∈ M[F*]`. Similarly, `p` must have type `F*`. The resolving rule of FLTA infers the target set of this indirect call is `M[t(p)] => M[F*]`, which contains `f`.

- **(2) MLTA has no FNs.** Suppose the address of `f` is taken through `a = &f`, and the complete multi-layer type of `a` is `A:...:Z`, and the complete multi-layer type of `p` is `A1:...:Z1`. Since there is no cast allowed between sensitive types, for each involved basic byte `X`, `X` must be the same as `X1`. Suppose the `mlt(a)` in the confinement rule is `N:...:Z`, where `N` is either `A` or `_`, then we have `f ∈ M[N:...:Z]`. Similarly, in the resolving rule, suppose the `mlt(p)` is `L:...:Z` where `L` is either `A` or `_`, the resolving result will be a super set of `M[N:...:Z]` as `N:...:Z` is always compatible with `L:...:Z`. Therefore, the result must contain `f`.

- **(3) MLTA has no extra FPs than FLTA.** Suppose `f` has type `F`, `p` must have type `F*`. Suppose the resolving rule of MLTA finds `mlt(p)` is `N:...:F*`, then the resolving result of MLTA must be a subset of that by resolving `_:F*`, as any type compatible with `N:...:F*` is also compatible with `_:F*`. Meanwhile, resolving `_:F*` with MLTA is equivalent to resolving `F*` with FLTA. Thus, for one indirect call, the target set returned by MLTA is a subset of that returned by FLTA.

- **(4) MLTA may have fewer FPs than FLTA.** The code in Figure 1 shows that MLTA introduces fewer FPs than FLTA. This is adequate to prove this predicate. In fact, we can generally view the map `M` in FLTA as a union of that in MLTA. As long as the propagation of MLTA does not merge all targets to their compatible first-layer type, like `_:ptr`, MLTA will have fewer FPs than FLTA.

□

### 4. Lemma 2: With Type-Casting of Sensitive Types

**Lemma 2.** If the program has type-cast of sensitive types:
1. FLTA may have FNs.
2. MLTA has no FNs.
3. MLTA may have fewer FPs than FLTA.

**Proof:**

- **(1) FLTA may have FNs.** Consider Figure 3: the function pointer `a2b->handler` has type `fptr_t1`, and FLTA will report the target is `func_B` as it is the only type-matched function. However, the real target is `func_A`. FLTA misses the real target as it does not consider the type casting in outer-layer types, i.e., from `A*` to `B*`. In fact, FLTA will miss all implicit casts of function pointer types indicated by casts between outer-layer types.

- **(2) MLTA has no FNs.** The only way to introduce FNs here is through type casting. The propagation rule of MLTA handles type casting conservatively. `mlt(a)` could be different from `mlt(p)` at each layer, or even have a different number of basic types. The type casting may take several steps, each happening at a different layer. However, the propagation rule always conservatively propagates all functions from all compatible types of the source type to all compatible types of the destination type, including the longest type. Therefore, MLTA will not drop any function targets during the type casting. Therefore, it will not introduce any FN compared to the scenario where no cast of sensitive types is allowed. In summary, even with type casting, MLTA does not introduce any FN.

- **(3) MLTA may have fewer FPs than FLTA.** With the multi-layer confinement, for each source type, MLTA may have fewer FPs. For programs with many type layers, MLTA can achieve significantly fewer FPs than FLTA, as we will show in §7.2.

□

### 5. Theorem 1: Summary of Results

**Theorem 1.**
1. MLTA does not introduce any FNs.
2. FLTA may have FNs.
3. MLTA can have fewer FPs than FLTA.

**Proof:** Lemma 1 and Lemma 2 indicate the theorem.

### 6. Evaluation

We have provided our formal analysis of MLTA and implemented TypeDive based on the LLVM compiler infrastructure. In this section, we evaluate TypeDive in the following aspects:

- **Scalability.** TypeDive excels in large programs where composite types are prevalent. The evaluation should first confirm that TypeDive can scale to extremely large programs (§7.1).
- **Effectiveness.** Reducing indirect call targets is the main goal of TypeDive. The evaluation should show to what extent TypeDive can reduce the number of indirect call targets (§7.2).
- **No false negatives.** Avoiding potential false negatives is another design goal of TypeDive. The evaluation should confirm that TypeDive does not miss valid indirect call targets (§7.3).
- **Important use cases.** As a foundational approach, we apply TypeDive to assist static bug-detection mechanisms to demonstrate its usefulness (§7.4).

### 7. Experimental Setup

We apply TypeDive to real-world system programs, including the Linux kernel (version 5.1.0), the FreeBSD kernel (version 12.0-RELEASE), and the Firefox browser (C++) with the top commit number `f2cd91cb305f`. While the Linux kernel is compiled with the `allyesconfig` option (including as many modules as possible), the FreeBSD kernel and the Firefox browser are compiled with the default configuration. All programs are compiled with flags `-O0 -g -fno-inlining` to ensure that the generated binary accurately contains all debug information, such as line numbers and function names, which simplifies our verification on false negatives (§7.3) and analysis on detected bugs (§7.4). However, TypeDive by design should work on any other compilation configurations, including higher optimization levels (e.g., `-O2`) and aggressive code inlining. Although the evaluation numbers could be different, we believe the effectiveness of TypeDive should be similar for other compilation options. We leave the evaluation with other options as future work. The experimental machine is equipped with Ubuntu 18.04 LTS, LLVM version 8.0, 64GB RAM, and an Intel CPU (Xeon R CPU E5-1660 v4, 3.20 GHz) with 8 cores.

### 8. Scalability of TypeDive

**Table 2: Scalability of TypeDive.**

| System Modules | Linux | FreeBSD | Firefox |
|----------------|-------|---------|---------|
| 17,558         | 1,481 | 1,541   | 1,541   |
| SLoC           | 10,330K | 1,232K | 982K    |
| Loading Analysis | 1m 40s | 6s | 1m 25s  |
| 2m 6s          | 6s    | 27s     | 27s     |

TypeDive can finish constructing the global call-graph for 10 million lines of code in the Linux kernel within four minutes. More than two minutes are spent in loading bitcode files. The promising scalability benefits from TypeDive avoiding data-flow analysis or pointer analysis, but using only type analysis. TypeDive’s split of multi-layer types into two-layer types also helps reduce storage and computation costs.

### 9. Reduction of Indirect-Call Targets

**Table 3: Reduction of icall targets.**

| System Total | iCall | iCall for &Func. | Ave. target (signature) | TypeDive |
|--------------|-------|------------------|-------------------------|----------|
| 58K          | 6.3K  | 37K              | 134                     | 47K (81%) |
| 25.5         | 4.0K  | 23K (63%)        | 115                     | 180K     |
| 8.7K         | 58K   | 7.7 (94% ↓)      | 3.5 (86% ↓)             | 1.8 (98% ↓)|

**Figure 4: Distribution of the numbers of icall targets.** MLTA identifies more icalls with fewer targets (less than four targets) while FLTA infers more icalls with more targets. Both have a long tail, where icalls under MLTA have at most 1,914 targets while icalls under FLTA have up to 7,983 targets.

**Table 4: Breakdowns of target reduction by layers.**

| System Baseline | 5-Layer |
|-----------------|---------|
| 180K            | 7.78    |
| 8.7K            | 3.49    |
| 58K             | 1.82    |

The first couple of layers can dramatically reduce the icall targets. However, the reduction becomes steady after four layers. Based on the results, a layer number of five should be able to remove most targets for general programs.

### 10. Comparisons with Existing Works

- **Ge et al. [15]**: Uses taint analysis and type analysis to find icall targets. The average number of icall targets on FreeBSD is 6.64. Our result is better, but calculated over icalls that MLTA can provide two-or-higher layer results, which is 64% of all icalls. When calculated over all icalls, the number is about 12. Our result does not count icalls in assembly code, which usually has a single target. [15] requires manual fixing when violations of assumptions are detected. TypeDive automatically falls back to an upper layer to avoid false negatives and is faster due to static taint-analysis.
- **Pointer analysis [14]**: Compares the effectiveness of type-based CFI (FLTA) and pointer analysis–based CFI (SVF [44]). Among 14 evaluated programs, FLTA achieves more accurate results than SVF on eight programs but has worse results on four programs. MLTA performs much better than FLTA on kernels and a browser, suggesting it will provide better results than pointer analysis–based approaches. SVF cannot finish in a reasonable time for Nginx and Httpd, showing the limited scalability of pointer analysis–based approaches. MLTA finishes the analysis for the Linux kernel within four minutes.

This structured and coherent presentation should make the text clearer and more professional.