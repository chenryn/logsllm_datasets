47
47
35
51
88
37
93
99
图 8-6-18
也就是说，我们希望二叉排序树是比较平衡的，即其深度与完全二叉树相同，均
为[bg2n”+1，那么查找的时间复杂也就为0(ogn），近似于折半查找，事实上，图8-6-18
的左图也不够平衡，明显的左重右轻。
不平衡的最坏情况就是像图8-6-18右图的斜树，查找时间复杂度为0（n），这等同
于顺序查找。
因此，如果我们希望对一个集合按二叉排序树查找，最好是把它构建成一棵平衡
的二叉排序树。这样我们就引申出另一个问题，如何让二叉排序树平衡的问题。
8.7平衡二叉树（AVL树）
我在网络上，看到过一部德国人制作的叫《平衡》（英文名：Baance）的短片，
它在1989年获得奥斯卡最佳短片奖。说的是在空中，悬浮着一个四方的平板，上面
站立着5个人，同样的相貌，同样的装束，同样的面无表情。平板的中心是个看不见
的支点，为了平衡，5个人必须寻找合适的位置。原本，简单的站在中心就可以了，
可是，如同我们一样，他们也好奇于这个世界，想知道下面是什么样子。而随着一个
箱子的来临，这种平衡被打破了，箱子带来了音乐，带来了兴奋，也带来了不平衡，
带来了分歧和斗争。
平板就是一个世界，当诱惑降临，当人心中的平衡被打破，世界就会混乱，最后
留下的只有孤独寂寞失败。这种单调的机械化社会，禁不住诱惑的侵蚀，很容易崩
溃。最容易被侵蚀的，恰恰是最空虚的心灵。
328
---
## Page 353
第8章查找
图8-7-1《平衡）
尽管这部小短片很精彩，但显然我们课堂上是没时间去观摩的，有兴趣的同学可
以自已搜索观看。这里我们主要是讲与平衡这个词相关的数据结构一平衡二叉树。
平衡二叉树（Self-Balancing Binary Search Tree 或Height-BalancedBinary Search
Trece），是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1。
有两位俄罗斯数学家GM.Adeson-Velskii和EM.Landis在1962年共同发明一种解
决平衡二叉树的算法，所以有不少资料中也称这样的平衡二叉树为AVL树。
从平衡二叉树的英文名字，你也可以体会到，它是一种高度平衡的二叉排序树。
那什么叫做高度平衡呢？意思是说，要么它是一棵空树，要么它的左子树和右子树都
是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。我们将二叉树上结
点的左子树深度减去右子树深度的值称为平衡因子BF（BalanceFactor），那么平衡二
叉树上所有结点的平衡因子只可能是一1、0和1。只要二叉树上有一个结点的平衡因
子的绝对值大于1，则该二叉树就是不平衡的。
看图8-7-2，为什么图1是平衡二叉树，而图2却不是呢？这里就是考查我们对
平衡二叉树的定义的理解，它的前提首先是一棵二叉排序树，右上图的59比58大，
却是58的左子树，这是不符合二叉排序树的定义的。图3不是平衡二叉树的原因就
在于，结点58的左子树高度为2，而右子树为空，二者差大于了绝对值1，因此它也
不是平衡的。而经过适当的调整后的图4，它就符合了定义，因此它是平衡二叉树。
329
---
## Page 354
大调数据结
62
Se
88
47
93
58
88
33
59
99
93
图1平衡二叉树
图2不是平衡二叉树
62
62
38
47
73
47
88
35
51
73
35
(51
93
99
3
58
3
93
图3不是平衡二叉树
图4平衡二叉树
图8-7-2
距离插入结点最近的，且平衡因子的绝对值大于1的结点为根的子树，我们称为
最小不平衡子树。图8-7-3，当新插入结点37时，距离它最近的平衡因子绝对值超过
1的结点是58（即它的左子树高度2减去右子树高度0），所以从58开始以下的子树
为最小不平衡子树。
最小不平衡子树
62
58
88
47
73
51
q3
37
新插入结点37
图8-7-3
8.7.1平衡二叉树实现原理
平衡二叉树构建的基本思想就是在构建二叉排序树的过程中，每当插入一个结点
时，先检查是否因插入而破坏了树的平衡性，若是，则找出最小不平衡子树。在保持
二叉排序树特性的前提下，调整最小不平衡子树中各结点之间的链接关系，进行相应
的旋转，使之成为新的平衡子树。
330
---
## Page 355
第8章查找
为了能在讲解算法时轻松一些，我们先讲一个平衡二叉树构建过程的例子。假设
我们现在有一个数组a[10]={3,2,1,4,5,6,7,10,9,8}需要构建二叉排序树。在没有学习平
衡二叉树之前，根据二叉排序树的特性，我们通常会将它构建成如图8-7-4的图1所
示的样子。虽然它完全符合二叉排序树的定义，但是对这样高度达到8的二叉树来
说，查找是非常不利的。我们更期望能构建成如图8-7-4的图2的样子，高度为4的
二叉排序树才可以提供高效的查找效率。那么现在我们就来研究如何将一个数组构建
出图2的树结构。
④
4
(10
9
8
5
图1
图2
B 8-7-4
对于数组a[10]={3.2.1,4,5.6.7,10.9,8}的前两位3和2，我们很正常地构建，到了第
3个数“1”时，发现此时根结点“3”的平衡因子变成了2，此时整棵树都成了最小
不平衡子树，因此需要调整，如图8-7-5的图1（结点左上角数字为平衡因子BF
值）。因为BF值为正，因此我们将整个树进行右旋（顺时针旋转），此时结点2成了
根结点，3成了2的右孩子，这样三个结点的BF值均为0，非常的平衡，如图8-7-5
的图2所示。
④
国
图2
图3
331
---
## Page 356
大调数据结
图4
图5
图 8-7-5
然后我们再增加结点4，平衡因子没发生改变，如图3。增加结点5时，结点3
的BF值为一2，说明要旋转了。由于BF是负值，所以我们对这棵最小平衡子树进行
左旋（逆时针旋转），如图4，此时我们整个树又达到了平衡。
继续，增加结点6时，发现根结点2的BF值变成了-2，如图8-7-6的图6。所
以我们对根结点进行了左旋，注意此时本来结点3是4的左孩子，由于旋转后需要满
足二叉排序树特性，因此它成了结点2的右孩子，如图7。增加结点7，同样的左旋
转，使得整棵树达到平衡，如图8和图9所示。
6
9
图7
7
8国
图9
图 8-7-6
332
---
## Page 357
第8章查找
当增加结点10时，结构无变化，如图8-7-7的图10。再增加结点9，此时结点7
的BF变成了一2，理论上我们只需要旋转最小不平衡子树7、9、10即可，但是如果
左旋转后，结点9就成了10的右孩子，这是不符合二叉排序树的特性的，此时不能
简单的左旋，如图11所示。
10
9比10小不可以
10的右子树
图10
图11
10
图12
图8-7-7
仔细观察图11，发现根本原因在于结点7的BF是一2，面结点10的BF是1，
也就是说，它们俩一正一负，符号并不统一，而前面的几次旋转，无论左还是右旋，
最小不平衡子树的根结点与它的子结点符号都是相同的。这就是不能直接旋转的关
键。那怎么办呢？
不统一，不统一就把它们先转到符号统一再说，于是我们先对结点9和结点10
进行右旋，使得结点10成了9的右子树，结点9的BF为一1，此时就与结点7的
BF值符号统一了，如图8-7-7的图12所示。
这样我们再以结点7为最小不平衡子树进行左旋，得到图8-7-8的图13。接着插
333
---
## Page 358
大适数据结构
入8，情况与刚才类似，结点6的BF是-2，面它的右孩子9的BF是1，如图14，
因此首先以9为根结点，进行右旋，得到图15，此时结点6和结点7的符号都是
负，再以6为根结点左旋，最终得到最后的平衡二叉树，如图8-7-8的图16所示。
8
国
图14
4
10
图15
图16
图8-7-8
西方有一句民谣是这样说的：“丢失一个钉子，坏了一只蹄铁；坏了一只蹄铁，折
了一匹战马；折了一匹战马，伤了一位骑士；伤了一位骑士，输了一场战斗；输了一
场战斗，亡了一个帝国。”相信大家应该有点明白，所谓的平衡二叉树，其实就是在二
叉排序树创建过程中保证它的平衡性，一旦发现有不平衡的情况，马上处理，这样就
不会造成不可收拾的情况出现。通过刚才这个例子，你会发现，当最小不平衡子树根
结点的平衡因子BF是大于1时，就右旋，小于-1时就左旋，如上例中结点1、5、
6、7的插入等。插入结点后，最小不平衡子树的BF与它的子树的BF符号相反时，
就需要对结点先进行一次旋转以使得符号相同后，再反向旋转一次才能够完成平衡操
作，如上例中结点9、8的插入时。
8.7.2平衡二叉树实现算法
好了，有这么多的准备工作，我们可以来讲解代码了。首先是需要改进二叉排序
334
---
## Page 359
第8章查找
树的结点结构，增加一个bf，用来存储平衡因子。
/二叉树的二叉链表结点结构定义*/
typedef struct BiTNode
结点结构/
int data;
/结点数据·/
int bf;
1结点的平衡因子*/
}BiTNode,*BiTree;
然后，对于右旋操作，我们的代码如下。
/对以p为根的二叉排序树作右处理，*/
/处理之后p指向新的树根结点，即旋特处理之前的左子树的根结点*/
void R_Rotate（BiTree *p)
BiTree L;
L=（·P）->1chi1d;
L指向P的左子树根结点*/
PTTUoxrchild-（*P）:
1T=d.
/P指向新的根结点/
此函数代码的意思是说，当传入一个二叉排序树P，将它的左孩子结点定义为L，
将L的右子树变成P的左子树，再将P改成L的右子树，最后将L替换P成为根结
点。这样就完成了一次右旋操作，如图8-7-9所示。图中三角形代表子树，N代表新
增结点。
N
插入N前是平衡二叉树
插入N后是平衡性打破
调整后恢复平衡性
图8-7-9
上面例子中的新增加结点N（如图8-7-5的图1和图2），就是右旋操作。
335
---
## Page 360
大数据结构
左旋操作代码如下。
/对以P为根的二叉排序树作左旋处理，/
/处理之后P指向新的树根结点，即设转处理之前的右子树的根结点0*/