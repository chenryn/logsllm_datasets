### Security Advice and Troubleshooting for Your Website

#### Introduction
You have developed a website using PHP and Apache on a Linux CentOS server. You suspect that your website may be under attack, and you have noticed suspicious changes to the permissions of your `login.php` file. Here are some steps and best practices to help you secure your website and address the current issue.

#### Immediate Steps to Take

1. **Check Apache Log Files:**
   - **Access Logs:** These logs record all requests made to your server. They can provide information about who is accessing your site and what resources they are trying to access.
   - **Error Logs:** These logs record any errors that occur on your server. They can help you identify issues with your scripts or potential security breaches.
   - **Location of Log Files:**
     - Typically, log files are located in `/var/log/httpd/` or `/etc/httpd/logs/`. Check these directories for `access_log` and `error_log` files.

2. **Compare Files with a Known Good Backup:**
   - If you have a recent backup of your website, compare the current `login.php` file with the backup version. This will help you determine if the file has been modified.
   - Use a tool like `diff` to compare the files:
     ```bash
     diff /path/to/backup/login.php /path/to/current/login.php
     ```

3. **Restore the File:**
   - If you find that the `login.php` file has been modified, restore it from your backup.
   - Ensure that the restored file has the correct permissions. For example:
     ```bash
     chown root:root /path/to/login.php
     chmod 755 /path/to/login.php
     ```

#### Long-Term Security Best Practices

1. **Regular Backups:**
   - Implement a regular backup schedule to ensure you always have a recent, unmodified copy of your website files and database.

2. **File Permissions:**
   - Set appropriate file and directory permissions to minimize the risk of unauthorized access. For example:
     - Directories: `755`
     - Files: `644`
     - Sensitive files (e.g., configuration files): `600`

3. **Use Strong Passwords:**
   - Ensure that all user accounts, including the root account, use strong, unique passwords. Consider using a password manager to generate and store complex passwords.

4. **Update Software Regularly:**
   - Keep your operating system, web server, and PHP up to date with the latest security patches and updates.

5. **Secure SSH Access:**
   - Restrict SSH access to only trusted IP addresses.
   - Use key-based authentication instead of password-based authentication.
   - Disable root login via SSH.

6. **Web Application Firewall (WAF):**
   - Consider using a WAF to protect your website from common web attacks such as SQL injection, cross-site scripting (XSS), and other vulnerabilities.

7. **Monitor Your Server:**
   - Use tools like `fail2ban` to automatically block IP addresses that show malicious activity.
   - Regularly review log files for suspicious activity.

8. **Security Audits:**
   - Conduct regular security audits and vulnerability assessments to identify and mitigate potential security risks.

#### Conclusion
By following these steps and best practices, you can improve the security of your website and reduce the risk of future attacks. If you continue to experience issues, consider consulting with a security professional for a more thorough assessment and additional guidance.