user@net2:~$ sudo ip link set dummy0 up
user@net3:~$ sudo ip link add dummy0 type dummy
user@net3:~$ sudo ip address add 172.16.10.193/26 dev dummy0
user@net3:~$ sudo ip link set dummy0 up
```
定义接口后，每台主机都应该能够 ping 通自己的`dummy0`接口:
```
user@net2:~$ ping 172.16.10.129 -c 2
PING 172.16.10.129 (172.16.10.129) 56(84) bytes of data.
64 bytes from 172.16.10.129: icmp_seq=1 ttl=64 time=0.030 ms
64 bytes from 172.16.10.129: icmp_seq=2 ttl=64 time=0.031 ms
--- 172.16.10.129 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.030/0.030/0.031/0.005 ms
user@net2:~$
user@net3:~$ ping 172.16.10.193 -c 2
PING 172.16.10.193 (172.16.10.193) 56(84) bytes of data.
64 bytes from 172.16.10.193: icmp_seq=1 ttl=64 time=0.035 ms
64 bytes from 172.16.10.193: icmp_seq=2 ttl=64 time=0.032 ms
--- 172.16.10.193 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.032/0.033/0.035/0.006 ms
user@net3:~$
```
### 注
你可能想知道为什么我们必须打开`dummy0`界面，如果他们被认为总是打开的话。实际上，界面无需打开即可到达。但是，如果不打开接口，接口的本地路由将不会出现在系统路由表中。
# 配置 Linux 主机路由
一旦定义了新的 IP 接口，下一步就是配置路由。在大多数情况下，Linux 主机路由配置仅限于指定主机的默认网关。虽然这通常是大多数需要达到的程度，但是 Linux 主机能够成为成熟的路由器。在本食谱中，我们将学习如何查询 Linux 主机路由表以及手动配置路由。
## 做好准备
为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2
```
为了对主机进行网络更改，您还需要根级访问。该配方将延续前一配方的实验室拓扑。在前面的配方之后，我们让拓扑看起来像这样:
![Getting ready](img/B05453_01_03.jpg)
## 怎么做…
尽管 Linux 主机能够路由，但默认情况下它们不会这样做。为了进行路由，我们需要修改内核级参数来启用 IP 转发。我们可以用几种不同的方法检查设置的当前状态:
*   使用`sysctl`命令:
    ```
    sysctl net.ipv4.ip_forward
    ```
*   通过直接查询`/proc/`文件系统:
    ```
    more /proc/sys/net/ipv4/ip_forward
    ```
在任一情况下，如果返回值为`1`，则启用 IP 转发。如果您没有收到`1`，您将需要启用 IP 转发，以便 Linux 主机通过系统路由数据包。您可以使用`sysctl`命令或直接与`/proc/`文件系统交互来手动启用 IP 转发:
```
sudo sysctl -w net.ipv4.ip_forward=1
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
```
虽然这可以动态启用 IP 转发，但此设置不会在重新启动后保持不变。要使设置持久化，需要修改`/etc/sysctl.conf`，取消对 IP 转发行的注释，并确保设置为`1`:
```
……
# Uncomment the next line to enable packet forwarding for IPv4
net.ipv4.ip_forward=1
……
```
### 注
您可能会注意到，我们目前仅修改与 IPv4 相关的设置。不用担心；稍后我们将在[第 10 章](10.html "Chapter 10. Leveraging IPv6")、*利用 IPv6* 中介绍 IPv6 和 Docker 网络。
验证转发配置后，我们使用`ip route show`命令查看所有三台实验主机上的路由表:
```
user@net1:~$ ip route show
default via 10.10.10.1 dev eth0
10.10.10.0/24 dev eth0  proto kernel  scope link  src 10.10.10.110
172.16.10.0/26 dev eth1  proto kernel  scope link  src 172.16.10.1
172.16.10.64/26 dev eth2  proto kernel  scope link  src 172.16.10.65
user@net2:~$ ip route show
172.16.10.0/26 dev eth0  proto kernel  scope link  src 172.16.10.2
172.16.10.128/26 dev dummy0  proto kernel  scope link  src 172.16.10.129
user@net3:~$ ip route show
172.16.10.64/26 dev eth0  proto kernel  scope link  src 172.16.10.66
172.16.10.192/26 dev dummy0  proto kernel  scope link  src 172.16.10.193
```
这里有几个有趣的注意事项。首先，我们注意到主机列出了与其每个 IP 接口相关联的路由。根据与接口相关联的子网掩码，主机可以确定与接口相关联的网络。这条路线是固有的，可以说是直接相连的。直连路由是系统如何知道哪些 IP 目的地是直连的，而哪些需要转发到下一跳才能到达远程目的地。
其次，在最后一个配方中，我们为主机`net1`添加了两个额外的接口，以提供与主机`net2`和`net3`的连接。然而，仅此一项就只能让`net1`与`net2`和`net3`通话。如果我们希望`net2`和`net3`可以通过网络的其余部分到达，它们将需要一个指向`net1`上各自接口的默认路由。再一次，让我们用两种不同的方式来做这件事。在`net2`上，我们会更新网络配置文件并重新加载接口，在`net3`上，我们会通过命令行直接添加默认路由。
在主机`net2`上，更新文件`/etc/network/interfaces`，在`eth0`接口上添加网关，指向主机`net1`上已连接的接口:
```
# The primary network interface
auto eth0
iface eth0 inet static
        address 172.16.10.2
        netmask 255.255.255.192
 gateway 172.16.10.1
```
要激活新配置，我们将重新加载界面:
```
user@net2:~$ sudo ifdown eth0 && sudo ifup eth0
```
现在我们应该可以在`net1`主机的直连接口(`172.16.10.1`)上看到`net2`主机路由表中指向`eth0`的默认路由:
```
user@net2:~$ ip route show
default via 172.16.10.1 dev eth0
172.16.10.0/26 dev eth0  proto kernel  scope link  src 172.16.10.2
172.16.10.128/26 dev dummy0  proto kernel  scope link  src 172.16.10.129
user@net2:~$
```
在主机`net3`上，我们将使用`iproute2`工具集动态修改主机路由表。为此，我们将执行以下命令:
```
user@net3:~$ sudo ip route add default via 172.16.10.65
```
### 注
请注意，我们使用关键字`default`。这表示默认网关或**无类域间路由** ( **CIDR** )符号中`0.0.0.0/0`的目的地。我们也可以使用`0.0.0.0/0`语法执行该命令。
执行命令后，我们将检查路由表，以确保我们现在有一条指向`net1` ( `172.16.10.65`)的默认路由:
```
user@net3:~$ ip route show
default via 172.16.10.65 dev eth0
172.16.10.64/26 dev eth0  proto kernel  scope link  src 172.16.10.66
172.16.10.192/26 dev dummy0  proto kernel  scope link  src 172.16.10.193
user@net3:~$
```
此时，主机和网络的其他部分应该对其所有物理接口具有完全的网络可达性。但是，除了在上面定义的主机之外，任何其他主机都无法访问在前面的方法中创建的虚拟接口。为了使这些可以到达，我们需要添加一些静态路由。
虚拟接口网络为`172.16.10.128/26`和`172.16.10.192/26`。因为这些网络是更大的`172.16.10.0/24`总结的一部分，所以网络的其余部分已经知道路由到`net1`主机的`10.10.10.110`接口来获得这些前缀。然而，`net1`目前还不知道这些前缀在哪里，反过来，它会按照默认路线将流量循环回其来源。要解决这个问题，我们需要在`net1`上增加两条静态路由:
![How to do it…](img/B05453_01_04.jpg)
我们可以通过`iproute2`命令行工具临时添加这些路由，或者我们可以以更持久的方式将其添加为主机网络脚本的一部分。让我们各做一个:
要添加指向`net2`的`172.16.10.128/26`路线，我们将使用命令行工具:
```
user@net1:~$ sudo ip route add 172.16.10.128/26 via 172.16.10.2
```
如您所见，添加手动路线是通过`ip route add`命令语法完成的。需要到达的子网与相关的下一跳地址一起指定。当主机立即填充路由表以反映更改时，该命令立即生效:
```
user@net1:~$ ip route
default via 10.10.10.1 dev eth0
10.10.10.0/24 dev eth0  proto kernel  scope link  src 10.10.10.110
172.16.10.0/26 dev eth1  proto kernel  scope link  src 172.16.10.1
172.16.10.64/26 dev eth2  proto kernel  scope link  src 172.16.10.65
172.16.10.128/26 via 172.16.10.2 dev eth1
user@net1:~$
```
如果我们希望使一个路由持久化，我们可以将其分配为`post-up`接口配置。`post-up`接口配置在接口加载后立即进行。如果我们想在`eth2`上线时将路由`172.16.10.192/26`添加到主机路由表中，我们可以按如下方式编辑`/etc/network/interfaces`配置脚本: