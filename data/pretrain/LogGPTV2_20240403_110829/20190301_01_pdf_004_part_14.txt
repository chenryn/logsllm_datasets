Now, a value of 6 is specified for the parallel degree parameter of the PARALLEL hint.
The planned number of workers is now returned as this specified value:
EXPLAIN SELECT /*+ PARALLEL(pgbench_accounts 6) */ * FROM pgbench_accounts;
QUERY PLAN
-----------------------------------------------------------------------------
------------
Gather (cost=1000.00..239382.52 rows=2014215 width=97)
Workers Planned: 6
-> Parallel Seq Scan on pgbench_accounts (cost=0.00..36961.03
rows=335702 width=97)
(3 rows)
The same query is now issued with the DEFAULT setting for the parallel degree. The
results indicate that the maximum allowable number of workers is planned.
EXPLAIN SELECT /*+ PARALLEL(pgbench_accounts DEFAULT) */ * FROM
pgbench_accounts;
QUERY PLAN
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 118
Database Compatibility for Oracle® Developers Guide
-----------------------------------------------------------------------------
------------
Gather (cost=1000.00..239382.52 rows=2014215 width=97)
Workers Planned: 6
-> Parallel Seq Scan on pgbench_accounts (cost=0.00..36961.03
rows=335702 width=97)
(3 rows)
Table pgbench_accounts is now altered so that the parallel_workers storage
parameter is set to 3.
Note: This format of the ALTER TABLE command to set the parallel_workers
parameter is not compatible with Oracle databases.
The parallel_workers setting is shown by the PSQL \d+ command.
ALTER TABLE pgbench_accounts SET (parallel_workers=3);
\d+ pgbench_accounts
Table "public.pgbench_accounts"
Column | Type | Modifiers | Storage | Stats target | Description
----------+---------------+-----------+----------+--------------+------------
-
aid | integer | not null | plain | |
bid | integer | | plain | |
abalance | integer | | plain | |
filler | character(84) | | extended | |
Indexes:
"pgbench_accounts_pkey" PRIMARY KEY, btree (aid)
Options: fillfactor=100, parallel_workers=3
Now, when the PARALLEL hint is given with no parallel degree, the resulting number of
planned workers is the value from the parallel_workers parameter:
EXPLAIN SELECT /*+ PARALLEL(pgbench_accounts) */ * FROM pgbench_accounts;
QUERY PLAN
-----------------------------------------------------------------------------
------------
Gather (cost=1000.00..242522.97 rows=2014215 width=97)
Workers Planned: 3
-> Parallel Seq Scan on pgbench_accounts (cost=0.00..40101.47
rows=649747 width=97)
(3 rows)
Specifying a parallel degree value or DEFAULT in the PARALLEL hint overrides the
parallel_workers setting.
The following example shows the NO_PARALLEL hint. Note that with trace_hints set
to on, the INFO: [HINTS] message states that the parallel scan was rejected due to the
NO_PARALLEL hint.
EXPLAIN SELECT /*+ NO_PARALLEL(pgbench_accounts) */ * FROM pgbench_accounts;
INFO: [HINTS] Parallel SeqScan of [pgbench_accounts] rejected due to
NO_PARALLEL hint.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 119
Database Compatibility for Oracle® Developers Guide
QUERY PLAN
---------------------------------------------------------------------------
Seq Scan on pgbench_accounts (cost=0.00..53746.15 rows=2014215 width=97)
(1 row)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 120
Database Compatibility for Oracle® Developers Guide
2.4.8 Conflicting Hints
If a command includes two or more conflicting hints, the server will ignore the
contradictory hints. The following table lists hints that are contradictory to each other.
Table 2-4 Conflicting Hints
Hint Conflicting Hint
ALL_ROWS FIRST_ROWS - all formats
INDEX(table [ index ])
FULL(table)
PARALLEL(table [ degree ])
FULL(table)
INDEX(table) NO_INDEX(table)
PARALLEL(table [ degree ])
FULL(table)
INDEX(table index) NO_INDEX(table index)
PARALLEL(table [ degree ])
FULL(table)
PARALLEL(table [ degree ]) INDEX(table)
NO_PARALLEL(table)
USE_HASH(table) NO_USE_HASH(table)
USE_MERGE(table) NO_USE_MERGE(table)
USE_NL(table) NO_USE_NL(table)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 121
Database Compatibility for Oracle® Developers Guide
3 Stored Procedure Language
This chapter describes the Stored Procedure Language (SPL). SPL is a highly
productive, procedural programming language for writing custom procedures, functions,
triggers, and packages for Advanced Server that provides:
 full procedural programming functionality to complement the SQL language
 a single, common language to create stored procedures, functions, triggers, and
packages for the Advanced Server database
 a seamless development and testing environment
 the use of reusable code
 ease of use
This chapter describes the basic elements of an SPL program, before providing an
overview of the organization of an SPL program and how it is used to create a procedure
or a function. Triggers, while still utilizing SPL, are sufficiently different to warrant a
separate discussion (see Section 4 for information about triggers). Packages are discussed
in the Database Compatibility for Oracle Developers Built-in Package Guide available
at:
https://www.enterprisedb.com/resources/product-documentation
The remaining sections of this chapter delve into the details of the SPL language and
provide examples of its application.
3.1 Basic SPL Elements
This section discusses the basic programming elements of an SPL program.
3.1.1 Character Set
SPL programs are written using the following set of characters:
 Uppercase letters A thru Z and lowercase letters a thru z
 Digits 0 thru 9
 Symbols ( ) + - * /  = ! ~ ^ ; : . ' @ % , " # $ & _ | { } ? [ ]
 White space characters tabs, spaces, and carriage returns
Identifiers, expressions, statements, control structures, etc. that comprise the SPL
language are written using these characters.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 122
Database Compatibility for Oracle® Developers Guide
Note: The data that can be manipulated by an SPL program is determined by the
character set supported by the database encoding.
3.1.2 Case Sensitivity
Keywords and user-defined identifiers that are used in an SPL program are case
insensitive. So for example, the statement DBMS_OUTPUT.PUT_LINE('Hello
World'); is interpreted to mean the same thing as dbms_output.put_line('Hello
World'); or Dbms_Output.Put_Line('Hello World'); or
DBMS_output.Put_line('Hello World');.
Character and string constants, however, are case sensitive as well as any data retrieved
from the Advanced Server database or data obtained from other external sources. The
statement DBMS_OUTPUT.PUT_LINE('Hello World!'); produces the following
output:
Hello World!
However the statement DBMS_OUTPUT.PUT_LINE('HELLO WORLD!'); produces the
output:
HELLO WORLD!
3.1.3 Identifiers
Identifiers are user-defined names that are used to identify various elements of an SPL
program including variables, cursors, labels, programs, and parameters. The syntax rules
for valid identifiers are the same as for identifiers in the SQL language.
An identifier must not be the same as an SPL keyword or a keyword of the SQL
language. The following are some examples of valid identifiers:
x
last___name
a_$_Sign
Many$$$$$$$$signs_____
THIS_IS_AN_EXTREMELY_LONG_NAME
A1
3.1.4 Qualifiers
A qualifier is a name that specifies the owner or context of an entity that is the object of
the qualification. A qualified object is specified as the qualifier name followed by a dot
with no intervening white space, followed by the name of the object being qualified with
no intervening white space. This syntax is called dot notation.
The following is the syntax of a qualified object.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 123
Database Compatibility for Oracle® Developers Guide
qualifier. [ qualifier. ]... object
qualifier is the name of the owner of the object. object is the name of the entity
belonging to qualifier. It is possible to have a chain of qualifications where the
preceding qualifier owns the entity identified by the subsequent qualifier(s) and object.
Almost any identifier can be qualified. What an identifier is qualified by depends upon
what the identifier represents and the context of its usage.
Some examples of qualification follow:
 Procedure and function names qualified by the schema to which they belong -
e.g., schema_name.procedure_name(...)
 Trigger names qualified by the schema to which they belong - e.g.,
schema_name.trigger_name
 Column names qualified by the table to which they belong - e.g., emp.empno
 Table names qualified by the schema to which they belong - e.g., public.emp
 Column names qualified by table and schema - e.g., public.emp.empno
As a general rule, wherever a name appears in the syntax of an SPL statement, its
qualified name can be used as well. Typically a qualified name would only be used if
there is some ambiguity associated with the name. For example, if two procedures with
the same name belonging to two different schemas are invoked from within a program or
if the same name is used for a table column and SPL variable within the same program.
You should avoid using qualified names if at all possible. In this chapter, the following
conventions are adopted to avoid naming conflicts:
 All variables declared in the declaration section of an SPL program are prefixed
by v_. E.g., v_empno
 All formal parameters declared in a procedure or function definition are prefixed
by p_. E.g., p_empno
 Column names and table names do not have any special prefix conventions. E.g.,
column empno in table emp
3.1.5 Constants
Constants or literals are fixed values that can be used in SPL programs to represent
values of various types - e.g., numbers, strings, dates, etc. Constants come in the
following types:
 Numeric (Integer and Real)
 Character and String
 Date/time
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 124
Database Compatibility for Oracle® Developers Guide
3.1.6 User-Defined PL/SQL Subtypes
Advanced Server supports user-defined PL/SQL subtypes and (subtype) aliases. A
subtype is a data type with an optional set of constraints that restrict the values that can
be stored in a column of that type. The rules that apply to the type on which the subtype
is based are still enforced, but you can use additional constraints to place limits on the
precision or scale of values stored in the type.
You can define a subtype in the declaration of a PL function, procedure, anonymous
block or package. The syntax is:
SUBTYPE subtype_name IS type_name[(constraint)] [NOT NULL]
Where constraint is:
{precision [, scale]} | length
Where:
subtype_name
subtype_name specifies the name of the subtype.
type_name
type_name specifies the name of the original type on which the subtype is based.
type_name may be:
 The name of any of the type supported by Advanced Server.
 The name of any composite type.
 A column anchored by a %TYPE operator.
 The name of another subtype.
Include the constraint clause to define restrictions for types that support precision or
scale.
precision
precision specifies the total number of digits permitted in a value of the
subtype.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 125
Database Compatibility for Oracle® Developers Guide
scale
scale specifies the number of fractional digits permitted in a value of the
subtype.
length
length specifies the total length permitted in a value of CHARACTER, VARCHAR,
or TEXT base types
Include the NOT NULL clause to specify that NULL values may not be stored in a column
of the specified subtype.
Note that a subtype that is based on a column will inherit the column size constraints, but
the subtype will not inherit NOT NULL or CHECK constraints.
Unconstrained Subtypes
To create an unconstrained subtype, use the SUBTYPE command to specify the new
subtype name and the name of the type on which the subtype is based. For example, the
following command creates a subtype named address that has all of the attributes of the
type, CHAR:
SUBTYPE address IS CHAR;
You can also create a subtype (constrained or unconstrained) that is a subtype of another
subtype:
SUBTYPE cust_address IS address NOT NULL;
This command creates a subtype named cust_address that shares all of the attributes
of the address subtype. Include the NOT NULL clause to specify that a value of the
cust_address may not be NULL.
Constrained Subtypes
Include a length value when creating a subtype that is based on a character type to
define the maximum length of the subtype. For example:
SUBTYPE acct_name IS VARCHAR (15);
This example creates a subtype named acct_name that is based on a VARCHAR data type,
but is limited to 15 characters in length.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 126
Database Compatibility for Oracle® Developers Guide
Include values for precision (to specify the maximum number of digits in a value of
the subtype) and optionally, scale (to specify the number of digits to the right of the
decimal point) when constraining a numeric base type. For example:
SUBTYPE acct_balance IS NUMBER (5, 2);
This example creates a subtype named acct_balance that shares all of the attributes of
a NUMBER type, but that may not exceed 3 digits to the left of the decimal point and 2
digits to the right of the decimal.
An argument declaration (in a function or procedure header) is a formal argument. The
value passed to a function or procedure is an actual argument. When invoking a function
or procedure, the caller provides (0 or more) actual arguments. Each actual argument is
assigned to a formal argument that holds the value within the body of the function or
procedure.
If a formal argument is declared as a constrained subtype:
 Advanced Server does not enforce subtype constraints when assigning an actual
argument to a formal argument when invoking a function.
 Advanced Server enforces subtype constraints when assigning an actual argument
to a formal argument when invoking a procedure.
Using the %TYPE Operator
You can use %TYPE notation to declare a subtype anchored to a column. For example:
SUBTYPE emp_type IS emp.empno%TYPE
This command creates a subtype named emp_type whose base type matches the type of
the empno column in the emp table. A subtype that is based on a column will share the
column size constraints; NOT NULL and CHECK constraints are not inherited.
Subtype Conversion
Unconstrained subtypes are aliases for the type on which they are based. Any variable of
type subtype (unconstrained) is interchangeable with a variable of the base type without
conversion, and vice versa.
A variable of a constrained subtype may be interchanged with a variable of the base type
without conversion, but a variable of the base type may only be interchanged with a
constrained subtype if it complies with the constraints of the subtype. A variable of a
constrained subtype may be implicitly converted to another subtype if it is based on the
same subtype, and the constraint values are within the values of the subtype to which it is
being converted.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 127
Database Compatibility for Oracle® Developers Guide
3.2 SPL Programs
SPL is a procedural, block-structured language. There are four different types of
programs that can be created using SPL, namely procedures, functions, triggers, and
packages.
In addition, SPL is used to create subprograms. A subprogram refers to a subprocedure
or a subfunction, which are nearly identical in appearance to procedures and functions,
but differ in that procedures and functions are standalone programs, which are
individually stored in the database and can be invoked by other SPL programs or from
PSQL. Subprograms can only be invoked from within the standalone program within
which they have been created.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 128
Database Compatibility for Oracle® Developers Guide
3.2.1 SPL Block Structure
Regardless of whether the program is a procedure, function, subprogram, or trigger, an
SPL program has the same block structure. A block consists of up to three sections - an
optional declaration section, a mandatory executable section, and an optional exception
section. Minimally, a block has an executable section that consists of one or more SPL
statements within the keywords, BEGIN and END.
The optional declaration section is used to declare variables, cursors, types, and
subprograms that are used by the statements within the executable and exception
sections. Declarations appear just prior to the BEGIN keyword of the executable section.
Depending upon the context of where the block is used, the declaration section may begin
with the keyword DECLARE.
You can include an exception section within the BEGIN - END block. The exception
section begins with the keyword, EXCEPTION, and continues until the end of the block in
which it appears. If an exception is thrown by a statement within the block, program
control goes to the exception section where the thrown exception may or may not be
handled depending upon the exception and the contents of the exception section.
The following is the general structure of a block:
[ [ DECLARE ]
pragmas
declarations ]
BEGIN
statements
[ EXCEPTION
WHEN exception_condition THEN
statements [, ...] ]
END;
pragmas are the directives (AUTONOMOUS_TRANSACTION is the currently supported
pragma). declarations are one or more variable, cursor, type, or subprogram
declarations that are local to the block. If subprogram declarations are included, they
must be declared after all other variable, cursor, and type declarations. Each declaration
must be terminated by a semicolon. The use of the keyword DECLARE depends upon the
context in which the block appears.
statements are one or more SPL statements. Each statement must be terminated by a
semicolon. The end of the block denoted by the keyword END must also be terminated by
a semicolon.
If present, the keyword EXCEPTION marks the beginning of the exception section.
exception_condition is a conditional expression testing for one or more types of
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 129
Database Compatibility for Oracle® Developers Guide
exceptions. If an exception matches one of the exceptions in exception_condition,
the statements following the WHEN exception_condition clause are executed.
There may be one or more WHEN exception_condition clauses, each followed by
statements. Note: A BEGIN/END block in itself, is considered a statement; thus,