genuine operators, there exists at least one non-corrupt operator. This assumption can be modeled
via a simple hybrid functionality that is used only by hosts and HSMs. This functionality takes
a set of operator identities and returns a single bit; the bit will be true if either the set contains
a non-genuine operator or, if this is not the case, if the invariant is satisﬁed. By accessing this
functionality, the description of the DMP protocol executed by hosts and HSMs can be instrumented
(as a modeling artefact) to truncate execution traces where the global invariant is violated.
While the PKI set-up assumption is standard for many real-world systems, the second set-up
assumption reﬂects a diﬀerent kind of trust assumption that arises in modeling the actions of human
operators in the UC setting.
The implication of recasting our result in the gUC framework is that we obtain composability:
any higher-level protocol that can be proved secure by relying on the ideal encryption functionality
we deﬁned in the main body of the paper will still be secure when this functionality is replaced by
the DMP protocol, assuming of course that the set-up assumptions described above are satisﬁed
and that the deployed cryptographic schemes are secure.
B Extensions to the security proof
B.1 Access to keys in dishonest tokens
The security model in the main body of the paper underspeciﬁes what happens if an attacker is able
to maul a non-genuine identity into an honest trust, or convince an honest host to accept a dishonest
26
trust: what it states is that, even if that were possible, the attacker should not be able to break the
secrecy of domain keys associated with that trust. This is somewhat counterintuitive and, indeed,
our security proof establishes the stronger result that no honest trust will ever be successfully
updated to another one inhabitted by non-genuine identities. For this reason, our machine-checked
proof is actually carried out in a stronger security model.
In this model we extend the adversarial interface in the ideal functionality to make it explicit
that, whenever the adversary succeeds in causing any of the events above, it can successfully launch a
distinguishing attack separating the real world from the ideal world. We model this by extending the
ideal functionality with two oracles (BadEnc and BadDec) that check if a trace satisﬁes a predicate
honest(trace, tk, hdl, cmd) and, if this is not the case, they execute TkReveal to obtain secret key key
and answer the adversary’s request by encrypting or decrypting the provided payload.
Note that, if the honest predicate is trivially true, then the BadEnc and BadDec oracles are
useless to an adversary. Conversely, excluding traces from the honest predicate explicitly rules
out protocols that allow non-honest traces to occur, as the attacker can trivially distinguish the
world from the ideal world by decrypting the ciphertext provided to the environment by the ideal
functionality.
Our strenghthening maps to the indistinguishability deﬁnition, where we introduced the InsideR
oracle; this works as a CCA-style oracle on dishonest tokens: it allows an attacker to reveal all
keys in tokens associated with dishonest trusts and, technically, it maps to the CCA security of
the multi-recipient encryption scheme used by the KMS DMP. In the reduction from the UC-style
deﬁnition to the indistinguishability deﬁnition, the BadEnc and BadDec oracles can be simulated
using InsideR to obtain the key and then perform the encryption and decryption operations.
B.2 Stronger corruption models
Although we have not formalized these extensions, it is easy to see that our proof can be easily
adapted to deal with two (apparently) stronger corruption models. The ﬁrst strengthening refers to
the possibility of using corrupt keys, i.e., allowing an attacker to request encryptions and decryptions
on keys it has corrupted (prior to legitimate usage, of course). In this case, the ideal functionality
would provide an encryption/decryption of the actual payload/ciphertext provided by the attacker.
This has no impact in the proof of security, as the reduction to indistinguishability can be extended
to cache corrupted keys and use them to simulate these extra calls. The second strenghtening refers
to dealing with corrupted hosts, which might be accepting dishonest trusts and/or revealing client
payloads to the attacker; this case is similar to the previous one, in that the ideal functionality
would need to be extended to keep track of whether these corrupt hosts were dealing with honest
or dishonest trusts, and provide ideal or real encryption accordingly.
C Example invariant in DMP proof
We present here the core invariant that supports the intermediate step in the proof of KMS DMP
security, where global invariants stemming from cryptographic security guarantees provided by low-
level components are combined with inductive properties related to trust honesty. This invariant
permits separating honest (protected) trusts from those who may be under adversarial control and
proving that the adversary cannot gain control over domain keys that are initially associated to an
honest trust.
The invariant relies on signedTr and signedTk predicates that allow leveraging the authentication
guarantee provided by the signature scheme used by HSMs. Similarly, the properties of the parentTrust
27
relation permit relying on the injectivity of trust ﬁngerprints, which is (computationally) guaranteed
by a collision-resistant hash function.
(∗ if a trust is installed, then it is protected ∗)
(∀ hstid, hstid ∈ HstPolSrv.hosts tr ⇒
oget HstPolSrv.hosts tr[hstid] ∈
RealTrustService.protectedTrusts){2} ∧
(∗ if a trust is protected, all its members are genuine ∗)
(∀ t, t ∈ RealTrustService.protectedTrusts ⇒
all genuine OpPolSrv.genuine t){2} ∧
(∗ if a trust has a parent, then it is not initial ∗)
(∀ t, t ∈ RealTrustService.parentTrust ⇒
¬tr initial t){2} ∧
(∗ all signed installable non initial tokens have a parent ∗)
(∀ (tk : Token), ¬tr initial tk.tk trust ⇒
tk.tk inst ⇒ signedTk tk RealSigServ.qs ⇒
tk.tk trust ∈ RealTrustService.parentTrust){2} ∧
(∗ all signed tokens with genuine trusts have signed trusts ∗)
(∀ tk, signedTk tk RealSigServ.qs ⇒
all genuine OpPolSrv.genuine tk.tk trust ⇒
signedTr tk.tk trust RealSigServ.qs){2} ∧
(∗ if a trust has a parent that is all genuine, then the parent
(∀ t, t ∈ RealTrustService.parentTrust ⇒
was signed in an installable token ∗)
all genuine OpPolSrv.genuine
(oget RealTrustService.parentTrust[t]) ⇒
signedTr (oget RealTrustService.parentTrust[t])
RealSigServ.qs){2} ∧
(∗ if a trust is protected, then it was signed
(∀ t, t ∈ RealTrustService.protectedTrusts ⇒
in an installable token ∗)
signedTr t RealSigServ.qs){2} ∧
(∗ if a trust was signed in an installable token,
(∀ t, tr initial t ⇒ signedTr t RealSigServ.qs ⇒
all its members are genuine and has
an initial trust, then it is protected ∗)
all genuine OpPolSrv.genuine t ⇒
t ∈ IOperatorActions.trusts ⇒
oget IOperatorActions.trusts[t] ⇒
t ∈ RealTrustService.protectedTrusts){2} ∧
(∗ if a token is signed with a trust where all its members
are genuine and has an initial trust, then this trust
was installable signed. ∗)
(∀ (tk : Token), tr initial tk.tk trust ⇒
signedTk tk RealSigServ.qs ⇒
all genuine OpPolSrv.genuine tk.tk trust ⇒
tk.tk trust ∈ IOperatorActions.trusts ⇒
oget IOperatorActions.trusts[tk.tk trust] ⇒
signedTr tk.tk trust RealSigServ.qs){2} ∧
(∗ if a trust is protected and is not initial then it has
(∀ t, ¬tr initial t ⇒
a parent and this protected as well ∗)
t ∈ RealTrustService.protectedTrusts ⇒
(t ∈ RealTrustService.parentTrust ∧
oget RealTrustService.parentTrust[t] ∈
RealTrustService.protectedTrusts)){2} ∧
(∗ if a trust has a protected parent then it is protected as well ∗)
(∀ t, t ∈ RealTrustService.parentTrust ⇒
oget RealTrustService.parentTrust[t] ∈
RealTrustService.protectedTrusts ⇒
t ∈ RealTrustService.protectedTrusts){2} ∧
(∗ Encryptions ∗)
(∀ (tk : Token), signedTk tk RealSigServ.qs{2} ⇒
tk ∈ KMS Procedures3.wrapped keys{2} ∧
tk.tk wdata.tkw ekeys ∈
tk.tk trust ∈ RealTrustService.protectedTrusts{2} ⇒
mencrypt (proj pks (tr mems tk.tk trust)) (encode tag tk.tk trust)
(encode ptxt (oget KMS Procedures3.wrapped keys{2}[tk])))
28
29