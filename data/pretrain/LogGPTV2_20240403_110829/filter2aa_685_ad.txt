Iterating from 0 to 9 in C++
Licensed to   
15
Nim’s benefits and shortcomings
this slogan to illustrate Java’s cross-platform benefits. A Java application only needs to
be compiled once, and the result of this compilation is a JAR file that holds all the com-
piled Java classes. The JAR file can then be executed by the JVM to perform the pro-
grammed actions on any platform and architecture. This makes the JAR file a platform-
and architecture-agnostic executable. The downside to this is that in order to run these
JAR files, the JVM must be installed on the user’s system. The JVM is a very big depen-
dency that may contain bugs and security issues. But on the other hand, it does allow
the Java application to be compiled only once.
 Python, Ruby, and Perl are similar. They also use a virtual machine (VM) to execute
code. In Python’s case, a VM is used to optimize the execution of Python code, but it’s
mostly hidden away as an implementation detail of the Python interpreter. The
Python interpreter parses the code, determines what actions that code is describing,
and immediately executes those actions. There’s no compilation step like with Java, C,
or Nim. But the advantages and disadvantages are mostly the same as the JVM’s;
there’s no need for cross-compilation, but in order to execute a Python application,
the system needs to have a Python interpreter installed.
Unfortunately, in many cases, virtual machines and interpreters cause more problems
than they solve. The number of common CPU architectures and the most popular OSs
is not that large, so compiling for each of them isn’t that difficult. In contrast, the
source code for applications written in interpreted languages is often distributed to
the user, and they’re expected to install the correct version of the interpreter or vir-
tual machine. This can result in a lot of problems.
 One example of the difficulty associated with distributing such applications is the
recent introduction of Python 3. Because it’s not backward compatible with the previ-
ous version, it has caused many issues for software written originally in Python 2.
Python 3 was released in 2008, and as of this writing, there are still libraries written for
Python 2 that don’t work with the Python 3 interpreter.2 This wouldn’t be a problem
with a compiled language because the binaries would still continue to work.
 The lightweight nature of Nim should make it particularly appealing, especially in
contrast to some of the languages mentioned in this section. 
2 See the Python 3 Readiness page for a list of Python 3–ready packages: http://py3readiness.org/.
Write once, run anywhere
Similar to the “write once, run anywhere” slogan, other programming languages
adopted the “write once, compile anywhere” philosophy, giving a computer program
the ability to be compiled on all platforms without the need to modify its source code.
This applies to languages such as C, Pascal, and Ada. But these languages still
require platform-specific code when dealing with more-specialized features of the OS,
such as when creating new threads or downloading the contents of a web page. Nim
goes a step further; its standard library abstracts away the differences between OSs
so you can use a lot of the features that modern OSs offer.
Licensed to   
16
CHAPTER 1
Why Nim?
NIM IS FLEXIBLE
There are many different styles that software can be written in. A programming para-
digm is a fundamental style of writing software, and each programming language sup-
ports a different set of paradigms. You’re probably already familiar with one or more
of them, and at the very least you know what object-oriented programming (OOP) is
because it’s taught as part of many computer science courses.
 Nim is a multi-paradigm programming language. Unlike some popular program-
ming languages, Nim doesn’t focus on the OOP paradigm. It’s mainly a procedural
programming language, with varying support for OOP, functional, declarative, concur-
rent, and other programming styles.
 That’s not to say that OOP isn’t well supported. OOP as a programming style is sim-
ply not forced on you. Nim supports common OOP features, including inheritance,
polymorphism, and dynamic dispatch.
 To give you a better idea of what Nim’s primary paradigm looks like, let’s look at
the one big difference between the OOP paradigm and the procedural paradigm. In
the OOP paradigm, methods and attributes are bound to objects, and the methods
operate on their own data structure. In the procedural paradigm, procedures are
standalone entities that operate on data structures. This may be hard for you to visual-
ize, so let’s look at some code examples to illustrate it.
SUBROUTINE TERMINOLOGY
In this subsection I mention methods and proce-
dures. These are simply different names for subroutines or functions. Method is
the term used in the context of OOP, procedure is used in procedural program-
ming, and function is used in functional programming.
The following code listings show the same application. The first is written in Python
using the OOP style. The second is written in Nim using the procedural style.
class Dog:
def bark(self):
print("Woof!")
dog = Dog()
dog.bark()
type
Dog = object
proc bark(self: Dog) =
echo("Woof!")
let dog = Dog()
dog.bark()
Listing 1.5
Barking dog modeled using OOP in Python
Listing 1.6
Barking dog modeled using procedural programming in Nim
The bark method is associated with the 
Dog class by being defined within it.
The bark method can be directly invoked on the 
dog object by accessing the method via the dot.
The bark procedure isn’t directly associated with the 
Dog type by being defined within it. This procedure 
could also easily be defined outside this module.
The bark procedure can still be directly invoked on the 
dog object, despite the fact that the procedure isn’t 
associated with the Dog type as it is in the Python version.
Licensed to   
17
Nim’s benefits and shortcomings
In the Python code, the bark method is placed under the class definition. In the
Nim code, the bark method (called a procedure in Nim) isn’t bound to the Dog type in
the same way as it is in the Python code; it’s independent of the definition of the Dog
type. Instead, its first argument specifies the type it’s associated with.
 You could also implement something similar in Python, but it wouldn’t allow you
to call the bark method in the same manner. You’d be forced to call it like so:
bark(dog), explicitly passing the dog variable to the method as its first argument. The
reason this is not the case with Nim is because Nim rewrites dog.bark() to bark(dog),
making it possible for you to call methods using the traditional OOP style without hav-
ing to explicitly bind them to a class.
 This ability, which is referred to as Uniform Function Call Syntax (UFCS), has mul-
tiple advantages. It allows you to create new procedures on existing objects externally
and allows procedure calls to be chained.
CLASSES IN NIM
Defining classes and methods in Nim in a manner similar to
Python is also possible. Metaprogramming can be used to do this, and the
community has already created numerous libraries that emulate the syntax.
See, for example, the Nim OOP macro: https://nim-by-example.github
.io/oop_macro/.
Another paradigm that Nim supports is the functional programming (FP) paradigm.
FP is not as popular as OOP, though in recent years it has seen a surge in popularity. FP
is a style of programming that primarily avoids the changing of state and the use of
mutable data. It uses certain features such as first-class functions, anonymous func-
tions, and closures, all of which Nim supports.
 Let’s look at an example to see the differences between programming in a proce-
dural style and a functional one. The following code listings show code that separates
people’s full names into first and last names. Listing 1.7 shows this done in a func-
tional style and listing 1.8 in a procedural style.
import sequtils, future, strutils
let list = @["Dominik Picheta", "Andreas Rumpf", "Desmond Hume"]
list.map(
(x: string) -> (string, string) => (x.split[0], x.split[1])
).echo
Listing 1.7
Iterating over a sequence using functional programming in Nim
Imports the sequtils, future, and strutils 
modules. These modules define the map, 
->, and split procedures respectively.
Defines new list variable
containing a list of names
The map procedure is used to 
iterate over the list.
The map procedure takes a
closure that specifies how to
modify each item in the list.
The modified list is then 
displayed on the screen.
Licensed to   
18
CHAPTER 1
Why Nim?
import strutils
let list = @["Dominik Picheta", "Andreas Rumpf", "Desmond Hume"]
for name in list:
echo((name.split[0], name.split[1]))
The functional version uses the map procedure to iterate over the list variable, which
contains a list of names. The procedural version uses a for loop. Both versions split
the name into a first and last name. They then display the result in a tuple. (I’m throw-
ing a lot of new terms at you here. Don’t worry if you aren’t familiar with them; I’ll
introduce you to them in chapter 2.) The output of the code listings will look similar
to this:
(Field0: Dominik, Field1: Picheta)
(Field0: Andreas, Field1: Rumpf)
(Field0: Desmond, Field1: Hume)
THE MEANING OF FIELD0 AND FIELD1
Field0 and Field1 are just default field
names given to tuples when a field name isn’t specified.
Nim is incredibly flexible and allows you to write software in many different styles.
This was just a small taste of the most popular paradigms supported by Nim and of
how they compare to Nim’s main paradigm. Nim also supports more-obscure para-
digms, and support for others can be introduced easily using metaprogramming. 
NIM CATCHES ERRORS AHEAD OF TIME
Throughout this chapter, I’ve been comparing Python to Nim. While Nim does take a
lot of inspiration from Python, the two languages differ in one important way: Python
is dynamically typed and Nim is statically typed. As a statically typed language, Nim
provides a certain level of type safety that dynamically typed programming languages
don’t provide.
 Although Nim is statically typed, it feels very dynamic because it supports type
inference and generics. You’ll learn more about these features later in the book. For
now, think of it as a way to retain the high development speed that dynamically typed
programming languages allow, while also providing extra type safety at compile time.
 In addition to being statically typed, Nim implements an exception-tracking mech-
anism that is entirely opt-in. With exception tracking, you can ensure that a procedure
won’t raise any exceptions, or that it will only raise exceptions from a predefined list.
This prevents unexpected crashes by ensuring that you handle exceptions. 
Listing 1.8
Iterating over a sequence using a procedural style in Nim
Imports the strutils module, 
which defines the split procedure
A for loop is used to iterate
over each item in the list.
The code inside the for loop is 
executed during each iteration; in 
this case, each name is split into 
two and displayed as a tuple.
Licensed to   
19
Nim’s benefits and shortcomings
COMPARING DIFFERENT PROGRAMMING LANGUAGE FEATURES
Throughout this section, I’ve compared Nim to various other programming lan-
guages. I’ve discussed efficiency, the dependencies of the resulting software, the flexi-
bility of the language, and the language’s ability to catch errors before the software is
deployed. Based on these characteristics alone, Nim is an excellent candidate for
replacing some of the most popular programming languages out there, including
Python, Java, C, and more.
 For reference, table 1.2 lists different programming languages and shows some of
the features that they do and don’t support.
Table 1.2
Common programming language features
Programming 
language
Type
 system
Generics Modules
GC
Syntax
Metaprogramming
Execution
Nim
Static and 
strong
Yes
Yes
Yes, multiple 
and optionala
a Nim supports ref counting, a custom GC, and Boehm. Nim also allows the GC to be switched off altogether.
Python-
like
Yes
Compiled 
binary
C
Static and 
weak
No
No
No
C
Very limitedb
b Some very limited metaprogramming can be achieved via C’s preprocessor.
Compiled 
binary
C++
Static and 
weak
Yes
No
No
C-like
Limitedc
c C++ only offers metaprogramming through templates, limited CTFE (compile-time function execution), and no AST macros.
Compiled 
binary
D
Static and 
strong
Yes
Yes
Yes, optional
C-like
Yes
Compiled 
binary
Go
Static and 
strong
No
Yes
Yes
C-like
No
Compiled 
binary
Rust
Static and 
strong
Yes
Yes
No
C-like
Limitedd
d Rust has some support for declarative macros through its macro_rules! directive, but no built-in procedural macros that 
allow you to transform the AST except for compiler plugins, and no CTFE.
Compiled 
binary
Java
Static and 
strong
Yes
Yes
Yes, multiplee
e See the “Oracle JVM Garbage Collectors Available From JDK 1.7.0_04 And After” article on Fasterj: www.fasterj.com/ 
articles/oraclecollectors1.shtml.
C-like
No
Executed via 
the JVM
Python
Dynamic 
and strong
N/A
Yes
Yes
Python
Yesf
f You can modify the behavior of functions, including manipulating their AST, using the ast module, but only at runtime.
Executed via 
the Python 
interpreter
Lua
Dynamic 
and weak
N/A
Yes
Yes
Modula-
likeg
g Lua uses do and end keywords to delimit scope.
Yes via Metalua
Executed via 
the Lua inter-
preter or Lua 
JIT compiler
Licensed to   
20
CHAPTER 1
Why Nim?
1.2.2
Areas where Nim still needs to improve
Nothing in this world is perfect, and programming languages are no exception.
There’s no programming language that can solve every problem in the most reliable
and rapid manner. Each programming language has its own strengths and weak-
nesses, and Nim is no exception.
 So far, I’ve been focusing on Nim’s strengths. Nim has many more fine aspects that
I haven’t yet mentioned, and you’ll discover them throughout this book. But it would
be unfair to only talk about Nim’s strengths. Nim is still a young programming lan-
guage, so of course it can still improve.
NIM IS STILL YOUNG AND IMMATURE
All programming languages go through a period of immaturity. Some of Nim’s newer
and more-advanced features are still unstable. Using them can result in buggy behav-
ior in the compiler, such as crashes, though crashes don’t happen very often. Impor-
tantly, Nim’s unstable features are opt-in, which means that you can’t accidentally use
them.
 Nim has a package manager called Nimble. Where other programming languages
may have thousands of packages available, Nim only has about 500. This means that
you may need to write libraries for certain tasks yourself. This situation is, of course,
improving, with new packages being created by the Nim community every day. In
chapter 5, I’ll show you how to create your own Nimble packages. 
NIM’S USER BASE AND COMMUNITY IS STILL QUITE SMALL
Nim has a small number of users compared to the mainstream programming lan-
guages. The result is that few Nim jobs exist. Finding a company that uses Nim in pro-
duction is rare, but when it does happen, the demand for good Nim programmers can
make the salaries quite high.
 On the other hand, one of the most unique things about Nim is that its develop-
ment is exceptionally open. Andreas Rumpf (Nim’s creator) and many other Nim
developers (including me) openly discuss Nim’s future development plans on GitHub
and on IRC. Anyone is free to challenge these plans and, because the community is
still quite small, it’s easy to do so. IRC is also a great place for newcomers to ask ques-
tions about Nim and to meet fellow Nim programmers.
IRC
Take a look at appendix A for details on how to connect to Nim’s IRC
channel.
These problems are temporary. Nim has a bright future ahead of it, and you can help
shape it. This book teaches you how. 
1.3
Summary
 Created by Andreas Rumpf in 2005, Nim is still a very new programming lan-
guage; it hasn’t yet reached version 1.0. Because Nim is so new, it’s a bit imma-
ture and its user base is relatively small.
Licensed to   
21
Summary
 Nim is efficient, expressive, and elegant (in that order).
 Nim is an open source project that’s developed entirely by the Nim community
of volunteers.
 Nim is general-purpose programming language and can be used to develop
anything from web applications to kernels.
 Nim is a compiled programming language that compiles to C and takes advan-
tage of C’s speed and portability.
 Nim supports multiple programming paradigms, including OOP, procedural
programming, and functional programming.
Licensed to   
22
Getting started
In this chapter, you’ll learn about Nim’s syntax, procedures, for loops, and other
basic aspects of the language. Throughout this chapter, we’ll cover a lot of informa-
tion to give you a broad taste of the language.
 Before you begin, make sure you have Nim installed and that it works on your
computer. You’ll also need a text editor to edit Nim code. Take a look at appendix
B for instructions on how to install Nim and other related tools.
2.1
Nim syntax
The syntax of a programming language is a set of rules that govern the way pro-
grams are written in that language. You’ve already had a small taste of Nim’s syntax
in the previous chapter.
This chapter covers
 Understanding Nim basics
 Mastering control flow
 Using collection types
 Handling exceptions
 Defining data types
Licensed to   
23
Nim syntax
 Most languages share many similarities in terms of syntax. This is especially true for
the C family of languages, which happens to also be the most popular—so much so
that four of the most popular programming languages are syntactically heavily
inspired by C.1 Nim aims to be highly readable, so it often uses keywords instead of
punctuation. Because of this, the syntax of Nim differs significantly from the C lan-
guage family; instead, much of it is inspired by Python and Pascal.
 In this section, I’ll teach you the basics of Nim’s syntax. Learning the syntax is a
very important first step, as it teaches you the specific ways in which Nim code should
be written.
2.1.1
Keywords
Most programming languages have the notion of a keyword, and Nim is no exception.
A keyword is a word with a special meaning associated with it when it’s used in a
specific context. Because of this, you may not use keywords as identifiers in your
source code.
STROPPING
You can get around this limitation by using stropping. See section
1.2 to learn more.
As of version 0.12.0, Nim has 70 keywords. This may sound like a lot, but you must
remember that you won’t be using most of them. Some of them don’t yet have a
meaning and are reserved for future versions of the language; others have minor use
cases.
 The most commonly used keywords allow you to do the following:
 Specify conditional branches: if, case, of, and when
 Define variables, procedures, and types: var, let, proc, type, and object
 Handle runtime errors in your code: try, except, and finally