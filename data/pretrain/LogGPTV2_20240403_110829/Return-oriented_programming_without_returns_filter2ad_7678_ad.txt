core which we use as the code base for our attack on ARM contain
mainly THUMB instructions.
Function Calls.
According to the ARM Architecture Procedure Call Standard
(AAPCS) [2], function calls are to be performed either through a
bl or through a blx instruction. Both instructions perform a branch
with link operation — that is, the program counter pc is loaded with
the address of the subroutine and the link register lr is loaded with
the return address. The blx instruction additionally allows switch-
ing between the ARM and THUMB instruction sets. Of the two
instructions, only blx can perform an indirect jump through a regis-
ter. Note that, in practice, not all function calls follow the AAPCS
calling convention: Instead of transferring the return address to lr,
the ARM C compiler may push the return address onto the stack
and perform a direct branch to the function.
A function return is effected by writing the return address to the
program counter pc. For this, the ARM architecture provides no
dedicated return instruction. Instead, any instruction that is able
to write to the program counter can be used as return instruction.
For instance, one common return instruction is the bx lr instruction
that branches to the address stored in the link register lr. It is also
possible to use the ldm (load multiple) instruction to load the return
address from the stack.
4.2 Attack Method Design
Our attack uses the indirect call form of the blx (Branch-Link-
Exchange) instruction — that is, we use blx r where r is a general
purpose register — to cause control to ﬂow from one instruction se-
quence to another. As described above, the blx instruction is usually
used for indirect function calls, potentially exchanging instruction
sets.
The blx instruction is not a part of a function epilogue. Hence,
an attack based on blx instructions cannot be detected by return ad-
dress checkers. Moreover, in contrast to Intel’s x86 call instruction,
the blx instruction does not impact values on the stack (or generally
on the memory), which makes the blx instruction very suitable for
an attack. However, since the program counter pc can be accessed
as a general purpose register, any instruction which uses the pro-
gram counter pc as a destination register could also be used for the
attack. We selected blx instructions because most of the instruction
sequences we identiﬁed in our code base end with blx.
For extraction of a Turing-complete gadget set we manually in-
spected the system libraries libc and libwebcore of an Android 2.0
(“Eclair”) platform for instruction sequences ending in blx instruc-
tions. Android’s libc version is very compact, hence, we included
Android’s Web Browser library libwebcore to enlarge the code base.
Both of the libraries (by default) are linked into the memory space
of an application to ﬁxed addresses. Note that the ARM gadget
compiler proposed in [23] automatically extracts instruction se-
Figure 4: The Attack Method/Architecture
quences ending in a so-called "free branch” (such as blx). How-
ever, the gadgets in [23] are chained together by function epilogues
which allow return address checkers to detect the attack. As we
show in this paper our attack technique is solely based on blx in-
structions and requires no function epilogues. The instantiation of
this type of attack is more involved (see also [11] for more de-
tails).
Memory Layout.
Figure 4 depicts the memory layout and the attack steps. The
memory area under control of the adversary consists of jump ad-
dresses and arguments which are clearly separated from each other.
Each jump address points to a speciﬁc instruction sequence whereas
each sequence ends with a blx instruction in order to allow chaining
of multiple sequences. We misuse the stack pointer sp as a pointer
to arguments and need a second register (denoted with rja) as a
pointer to jump addresses. We use the stack pointer because many
sequences we identiﬁed in our code base contain load/store oper-
ations where sp is used as base register. However, the adversary
is not forced to control the stack pointer. Instead any register (rsp)
can be used as pointer to arguments and data. The order of jump
addresses and arguments highly depends on the appropriate instruc-
tion sequences found on a platform. For instance, if the instruction
sequence which updates rja adds a positive constant then jump ad-
dresses have to go from lower to higher memory addresses. In Fig-
ure 4 jump addresses go from lower to higher memory addresses
and arguments are ordered vice versa. Of course, if jump addresses
are not separated from arguments then one register could be saved.
This is the approach we take on the x86 (see Section 3), where it
is convenient to use pop instructions to load arguments while up-
dating the stack pointer. On ARM, unfortunately, the libraries we
examined load arguments without updating the stack pointer. That
is the reason why we use rja as pointer to jump addresses which is
updated after each instruction sequence.
Attack Steps.
First, the adversary injects jump addresses and arguments to the
stack or the heap (see Section 6 for a concrete example). Similar to
x86 (see Section 3.2), our attack method on ARM consists mainly
of three parts: (1) setup, (2) update-load-branch (ULB) sequence,
rspAdversaryAddress 1Sequence 1ArgumentsAddress 2Update + load rand branch totarget addressMemory(under control of the adversary)3.4.6.Argument 1Argument 27.Sequence 2Low Memory AddressesSetupUpdate SP and transfercontrol to Address 1GadgetHigh Memory AddressesJumpAddressesUpdate−Load−Branch (ULB)(Trampoline)5.2.1.Register Allocation:=:=:=rrrspr6r3jaspulbinsinsblx rulbblx rulbinsinsjaulbjaInitialize r     , rrulb566and (3) gadgets which consist of several instruction sequences. By
subverting the control-ﬂow, the adversary is able to initialize sev-
eral registers. We refer to this process as a setup (step 1 in Figure 4).
The setup initializes three registers: rja, rulb, and rsp. Registers rja
and rsp are used as a pointer to jump addresses and arguments. Reg-
ister rulb is loaded with the address of our ULB sequence (see be-
low). Finally, the last action of our setup phase is to redirect execu-
tion to sequence 1 (steps 2 and 3). After sequence 1 completes its
task, the blx instruction (located at the end of the sequence) redi-
rects execution to our ULB sequence (step 4). The ULB sequence
acts as trampoline by updating register rja, loading the address of
sequence 2, and branching to sequence 2 (steps 5 and 6).
4.3 Gadget Set
The crucial part of our attack is to build a Turing-complete gad-
get set allowing an adversary to generate arbitrary program behav-
ior. Generally, gadgets consist of several instruction sequences,
whereas for our purposes the instruction sequences on ARM have
to end in a blx instruction to redirect execution to our ULB se-
quence. We could construct all these gadgets using the sequences
in our code base, namely the libraries libwebcore and libc of an
Android 2.0 device.
Details of Setup and ULB Sequence.
First, we describe the details of our setup and the ULB sequence.
Since, our concrete attack directly initializes register r4 through r15
by exploiting a setjmp vulnerability on the heap, we assume for the
moment that the adversary can directly initialize these registers. We
will describe in Section 6 in more details how this can be achieved.
In Section 4.2 we introduced the registers rja, rulb, and rsp as the
basis for our attack. The allocation of these registers fundamen-
tally depends on the identiﬁed instruction sequences in our code
base and involves technical challenges because these registers must
be preserved during the execution of the gadget chain. For our
code base we made the following allocation (as depicted in Fig-
ure 4): rja = r6, rulb = r3, and rsp = sp. Further, we use following
sequences for the setup and the ULB sequences:
r3 , [ sp , # 0 ] ; b l x r3 / / Setup
l d r
adds r6 , # 4 ;
l d r
r5 , [ r6 , # 1 2 4 ] ; b l x r5 / / ULB
We use r3 for rulb because most of the sequences in our code base
end with a blx r3 instruction. Our setup sequence initializes r3 by
loading the address of the ULB sequence from the stack through
a ldr (load register) instruction into r3. Note, since our adversary
is able to directly initialize r4–r15 by the setjmp vulnerability, we
require no additional setup sequences for rja and rsp.
The ULB sequence acts as connector for all executed instruction
sequences by (1) updating rja after each sequence and (2) transfer-
ring control to the subsequent instruction sequence. Since registers
r0–r3 are often used as destination registers before a blx instruc-
tion, we decided to use r6 as rja register. The ULB sequence ﬁrst
increases register r6 by 4 bytes (Update), then loads the next jump
address (by an offset of 124 bytes to r6) in r5 (Load), and ﬁnally
branches to the loaded address (Branch). However, this sequence
does not directly use rja as branch destination register, rather it uses
for this r5. Thus, we must take into account that the content of r5 is
overwritten after each ULB sequence.
One technical problem we have to address is that most of our
sequences use the pre-indexed addressing mode, which means that
sp does not change its value after it is used as base register in a
load operation. It would be desirable to directly load sp, but unfor-
tunately, we have no such load operation in the sequences of our
code base. Hence, we use the following sequence to update sp:
sub sp , # 1 2 ; adds r0 , r4 , # 0 ; b l x r3
This sequence decreases the value of the stack pointer by 12 bytes
and as a side-effect overwrites the value of register r0 with the con-
tent stored in r4. To preserve register r0, its value could ﬁrst be
stored to memory or moved to a free register.
Data Movement.
Data movement gadgets are needed for loading and storing val-
ues from and to memory. Due to the RISC architecture of ARM
processors, load and store operations are only permitted through
dedicated instructions. The ARM instruction set offers for this the
ldr and str instructions.9 A register can be loaded through the ldr
instruction. Storing a register to memory is performed through the
str instruction. For instance, the following sequence loads a word
from the stack (with zero bytes offset) into r1:
l d r
r1 , [ sp , # 0 ] ; b l x r3
To load an immediate value into a register the following sequence
could be used, which loads NULL into r2:
movs r2 , # 0 ; b l x r3
For a store operation we need at least two registers, one holding
the word to be stored and one holding the target address. This can
be achieved by load gadgets as described above. Finally, the store
operation is performed through the str instruction.
Arithmetic Operations.
Arithmetic operation gadgets include gadgets for addition, sub-
traction, multiplication and division. The ADD gadget can be real-
ized with the arithmetic addition instruction adds as follows:
adds r0 , r0 , r2 ; b l x r3
This sequence adds the contents of register r0 and r2 and stores the
result in register r0.
Our SUB gadget is based on the arithmetic subtraction instruc-
tion subs as depicted in Figure 5. This gadget subtracts r0 from
r4. Sequences 1 and 2 load the ﬁrst operand into r4 through r0,
whereas the conditional branch in sequence 2 will be never taken,
because r3 holds the address of the ULB sequence (which does
not equal NULL). Afterwards, sequence 3 loads r0 with the second
operand. The fourth sequence loads the address where the result
will be stored into register r2. Finally, the last sequence performs
the subtraction and stores the result at memory position [sp, #32]
and in register r1.
The remaining MUL and DIV gadget can be realized by invoking
the ADD and SUB gadget in a loop.
Logical Operations.
The design of logical gadgets is very similar to the design of
arithmetic gadgets. First, they load the source registers. Then,
they perform the desired operation. For example, we instantiate
the AND gadget as depicted in Figure 6.
First, sequences 1 and 2 load the ﬁrst operand into register r7.
Next, sequence 3 loads the second operand into register r1, and
ﬁnally, sequence 4 performs the and operation on register r1 and
r7, the result is stored into register r7.
One important logical gadget to mention is the NOT gadget that
computes the two’s complement of a speciﬁc value. We realize the
NOT gadget (based on the ideas presented in Section 3.2) by sub-
tracting the source register from −1. The AND and NOT gadgets
9In addition to these two instructions, ARM provides the ldm and
stm instructions for a multiple load and store operation.
567Figure 5: The Subtract Gadget
can be combined to form a NAND gadget. All other logical opera-
tions (such as or, xor) can be emulated through our NAND gadget.
Similarly, the negate gadget can be simulated through a SUB gad-
get by subtracting the source register from zero.
Branching.
Branching implicates changing the rja (r6) register rather than
the instruction pointer. The unconditional branching gadget can be
realized by adding an offset to register rja, or by directly loading rja
with a new value.
Our conditional branching gadget is realized by the same ap-
proach we used for Intel x86 (see Section 3.2): We compare two
values and depending on the result, rja is either changed by an un-
conditional branch gadget or remains as it is. To realize this gad-
get, we need a compare operation. This can be simulated through
a SUB gadget updating the carry ﬂag in the cpsr register. The up-
dated carry bit is then added to the constant 0xffffffff, hence
the result will be either 0x0 or 0xffffffff. Finally, the result
must be anded with the desired branch offset. The result of this last
operation will be either 0x0 (Carry Bit = 1) or the offset (Carry
Bit = 0), which is ﬁnally added to rja.
System and Function Calls.
System calls are highly important for runtime attacks. Basically,
they are needed to invoke special services of the operating system
(e.g., opening a ﬁle or executing a new program). For instance,
conventional code injection attacks use the execve system call to
execute a program such as /bin/sh. System calls are also often im-
Figure 7: System Call Gadget
plemented as functions in libc. Thus, a program only needs to in-
voke the appropriate system call function. A common alternative to
this scheme consists of passing arguments in registers and in storing
the system call number in a register (e.g., on ARM r7, and on Intel
eax). The system call is then invoked through a software interrupt
(e.g., on ARM svc 0x0 (Supervisor Call), and on Intel sysenter).
The libc version of Android OS implements system calls by trans-
ferring the system call number to r7. Therefore all system call func-
tions only differ in the movs r7, #SYS_NR instruction. We have in-
spected the appropriate libraries and could not identify a svc 0x0
instruction. Hence, we can only invoke a system call by calling
the appropriate function in libc. Thus, our system call gadget is, in
actuality, a general purpose function call gadget.
Our system/function call gadget is depicted in Figure 7. We have
to take into account that the blx instruction loads the return address
into the link register lr. Since the bxpl lr10 (located at the end of