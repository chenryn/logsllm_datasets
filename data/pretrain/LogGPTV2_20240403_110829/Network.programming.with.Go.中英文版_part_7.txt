An early well-known serialisation method is XDR (external data representation) used
by Sun's RPC, later known as ONC (Open Network Computing). XDR is defined by RFC
1832 and it is instructive to see how precise this specification is. Even so, XDR
is inherently type-unsafe as serialised data contains no type information. The
correctness of its use in ONC is ensured primarily by compilers generating code for
both marshalling and unmarshalling.
早期比较出名的序列化方法是Sun 公司的RPC 中使用的XDR(外部资料表示法)。后来就是 ONC(开放
式网络运算)。XDR 由 RFC 1832 定义，阅读一下这个规范的详细定义是有意义的，即便如此，由于
序列化的数据中不包含类型信息，XDR 是天生不安全的。ONC 中主要通过由编译器为编、解组生成额
外的代码来确保数据的正确性。
Go contains no explicit support for marshalling or unmarshalling opaque serialised
data. The RPC package in Go does not use XDR, but instead uses "gob" serialisation,
described later in this chapter.
Go 没有为编、解组不透明的序列化数据提供显式的支持,标准包中的RPC包也没有使用XDR，而是使
用了这一章后面的小节中将要介绍的gob 来作为替代方案。
4.3 Self-describing data 自描述数据
Self-describing data carries type information along with the data. For example, the
previous data might get encoded as
自描述数据在最终的结果数据中附带了类型信息,例如，前面提到的数据可能被编码为:
table
uint8 3
uint 2
string
uint8 4
[]byte fred
string
uint8 10
[]byte programmer
string
uint8 6
[]byte liping
string
uint8 7
[]byte analyst
string
uint8 8
[]byte sureerat
string
uint8 7
[]byte manager
Of course, a real encoding would not normally be as cumbersome and verbose as in
the example: small integers would be used as type markers and the whole data would
be packed in as small a byte array as possible. (XML provides a counter-example,
though.). However, the principle is that the marshaller will generate such type
information in the serialised data. The unmarshaller will know the type-generation
rules and will be able to use this to reconstruct the correct data structure.
当然，实际使用的编码方式不会如此啰嗦。小整数可能被用作类型标记，并且整个数据编码后的字节
数组会尽量的小（XML 是一个反例）。原则就是编组器会在序列化后的数据中包含类型信息。解组器
知道类型生成的规则，并使用此规则重组出正确的数据结构。
4.4 ASN.1 抽象语法表示法
Abstract Syntax Notation One (ASN.1) was originally designed in 1984 for the
telecommunications industry. ASN.1 is a complex standard, and a subset of it is
supported by Go in the package "asn1". It builds self-describing serialised data
from complex data structures. Its primary use in current networking systems is as
the encoding for X.509 certificates which are heavily used in authentication systems.
The support in Go is based on what is needed to read and write X.509 certificates.
抽象语法表示法/1(ASN.1)最初出现在1984 年，它是一个为电信行业设计的复杂标准，Go 的标准包
asn1 实现了它的一个子集，它可以将复杂的数据结构序列化成自描述的数据。在当前的网络系统中，
它主要用于对认证系统中普遍使用的X.509 证书的编码。Go 对ASN.1 的支持主要是X.509 证书的读
写上。
Two functions allow us to marshal and unmarshal data
以下两个函数用以对数据的编、解组
func Marshal(val interface{}) ([]byte, os.Error)
func Unmarshal(val interface{}, b []byte) (rest []byte, err os.Error)
The first marshals a data value into a serialised byte array, and the second
unmarshals it. However, the first argument of type interface deserves further
examination. Given a variable of a type, we can marshal it by just passing its value.
To unmarshal it, we need a variable of a named type that will match the serialised
data. The precise details of this are discussed later. But we also need to make sure
that the variable is allocated to memory for that type, so that there is actually
existing memory for the unmarshalling to write values into.
前一个将数据值编组成序列化的字节数组，后一个将其解组出来，需要对interface类型的参数进行
更多的类型检查。编组时，我们只需要传递某个类型的变量的值即可，解组它，则需要一个与被序列
化过的数据匹配的确定类型的变量，我们将在后面讨论这部分的细节 。除了有确定类型的变量外，
我们同时需要保证那个变量的内存已经被分配，以使被解组后的数据能有实际被写入的地址。
We illustrate with an almost trivial example, of marshalling and unmarshalling an
integer. We can pass an integer value to Marshal to return a byte array, and unmarshal
the array into an integer variable as in this program:
我们将举一个整数编、解组的小例子。在这个例子中。我们先将一个整数传递给Marshal 得到一个
字节数组，然后又将此数组解组成一个整数。
/* ASN.1
*/
package main
import (
"encoding/asn1"
"fmt"
"os"
)
func main() {
mdata, err := asn1.Marshal(13)
checkError(err)
var n int
_, err1 := asn1.Unmarshal(mdata, &n)
checkError(err1)
fmt.Println("After marshal/unmarshal: ", n)
}
func checkError(err error) {
if err != nil {
fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
os.Exit(1)
}
}
The unmarshalled value, is of course, 13.
当然，被解组后的值，是13
Once we move beyond this, things get harder. In order to manage more complex data
types, we have to look more closely at the data structures supported by ASN.1, and
how ASN.1 support is done in Go.
一旦我们越过了这个小关卡，事情开始变得复杂。为了管理更复杂的数据类型，我们需要更深入的了
解ASN.1 支持的数据类型，以及Go 是如何支持ASN.1 的。
Any serialisation method will be able to handle certain data types and not handle
some others. So in order to determine the suitability of any serialisation such as
ASN.1, you have to look at the possible data types supported versus those you wish
to use in your application. The following ASN.1 types are taken from
http://www.obj-sys.com/asn1tutorial/node4.html
任何序列化方法都只能处理某些数据类型，而对其他的数据类型无能为力。因此为了评估类似 ASN.1
等序列化方案的可行性，你必须先将要在程序中使用的数据类型与它们支持的数据类型做个比较，下
面是ASN.1 支持的数据类型，它们来自于http://www.obj-sys.com/asn1tutorial/node4.html
The simple types are
简单数据类型有:
 BOOLEAN: two-state variable values
 INTEGER: Model integer variable values
 BIT STRING: Model binary data of arbitrary length
 OCTET STRING: Model binary data whose length is a multiple of eight
 NULL: Indicate effective absence of a sequence element
 OBJECT IDENTIFIER: Name information objects
 REAL: Model real variable values
 ENUMERATED: Model values of variables with at least three states
 CHARACTER STRING: Models values that are strings of characters fro
 BOOLEAN：两态变量值
 INTEGER：表征整型变量值
 BIT STRING：表征任意长度的二进制数据
 OCT STRING：表征长度是8 的倍数的二进制数据
 NULL：指示一个没有有效数据的序列
 OBJECT IDENTIFIER：命名信息对象
 REAL：表征一个real 变量值
 ENUMERATED：表征一个至少有三个状态的变量值
 CHARACTER STRING：表征一个字符串值
Character strings can be from certain character sets
字符串可以来自于确定的字符集
 NumericString: 0,1,2,3,4,5,6,7,8,9, and space
 PrintableString: Upper and lower case letters, digits, space, apostrophe,
left/right parenthesis, plus sign, comma, hyphen, full stop, solidus, colon,
equal sign, question mark
 TeletexString (T61String): The Teletex character set in CCITT's T61, space,
and delete
 VideotexString: The Videotex character set in CCITT's T.100 and T.101, space,
and delete
 VisibleString (ISO646String): Printing character sets of international ASCII,
and space
 IA5String: International Alphabet 5 (International ASCII)
 GraphicString 25 All registered G sets, and space GraphicString
 NumericString: 0,1,2,3,4,5,6,7,8,9, 与空格(space)
 PrintableString: 大、小写字母，数字，空格，省略号，左、右小括号，加号，逗号，连
字符，句号，斜线，冒号，等号，问号
 TeletexString(T61String): CCITT 的Teletex 字符集中的T61，空格和删除(delete)
 VideotexString:CCITT 的Videotex字符集中的T.100 与T.101, 空格和删除(delete)
 VisibleString (ISO646String):国际ASCII 中的打印字符集和空格
 IA5String:国际字母表5(国际ASCII)
 GraphicString:所有被注册的G 集和空格
And finally, there are the structured types:
最后,以下是结构化的类型:
 SEQUENCE: Models an ordered collection of variables of different type
 SEQUENCE OF: Models an ordered collection of variables of the same type
 SET: Model an unordered collection of variables of different types
 SET OF: Model an unordered collection of variables of the same type
 CHOICE: Specify a collection of distinct types from which to choose one type
 SELECTION: Select a component type from a specified CHOICE type
 ANY: Enable an application to specify the type Note: ANY is a deprecated ASN.1
Structured Type. It has been replaced with X.680 Open Type.
 SEQUENCE:表征不同类型变量构成的有序集合
 SEQUENCE OF: 表征相同类型的变量构成的有序集合
 SET: 表征不同类型的变量构成的无序集合
 SET OF:表征相同类型的变量构成的有序集合
 CHOICE:从一个不同类型构成的特定集合中选出一个类型
 SELECTION: 从一个特定的CHOICE 类型中选取一个组件类型
 ANY:启用一个用以指定类型的应用. 注意:ANY是一个弃用的ASN.1结构类型,它被x.680的
Open Type 所替代
Not all of these are supported by Go. Not all possible values are supported by Go.
The rules as given in the Go "asn1" package documentation are
不是以上所有的类型、可能的值都被Go 支持，在Go 'asn1'包文档中定义的规则如下:
 An ASN.1 INTEGER can be written to an int or int64. If the encoded value does
not fit in the Go type, Unmarshal returns a parse error.
 An ASN.1 BIT STRING can be written to a BitString.
 An ASN.1 OCTET STRING can be written to a []byte.
 An ASN.1 OBJECT IDENTIFIER can be written to an ObjectIdentifier.
 An ASN.1 ENUMERATED can be written to an Enumerated.
 An ASN.1 UTCTIME or GENERALIZEDTIME can be written to a *time.Time.
 An ASN.1 PrintableString or IA5String can be written to a string.
 Any of the above ASN.1 values can be written to an interface{}. The value stored
in the interface has the corresponding Go type. For integers, that type is
int64.
 An ASN.1 SEQUENCE OF x or SET OF x can be written to a slice if an x can be
written to the slice's element type.
 An ASN.1 SEQUENCE or SET can be written to a struct if each of the elements
in the sequence can be written to the corresponding element in the struct.
 ASN.1 INTEGER 可以被写入int 或者int64 中. 如果被编码的值与Go 类型不匹
配,Unmarshal 将返回一个解析错误.
 ASN.1 BIT STRING 可以被写入BitString中.
 ASN.1 OCT STRING 可以被写入[]byte中.
 ASN.1 OBJECT IDENTIFIER 可以被写入ObjectIdentifier 中.
 ASN.1 ENUMERATED 可以被写入Enumerated中.
 ASN.1 UTCTIME 或者GENERALIZEDTIME可以被写入*time.Time 中.
 ASN.1 PrintableString 或者 IA5String可以被写入string 中.
 以上的任何ASN.1 类型的值都可以作为对应的Go 类型的值写入interface{}中。比如整数
放入interface{}的话，它对应的类型是int64。
 如果一个变量x 可以被当做某个类型写入，那么ASN.1 中的x 构成的有序列或者集合就可以
当做这个类型的slice 写入了。
 如果某个有序列或者集合中的所有元素都可以被写入到某个结构里与之对应的元素中，那么此
ASN.1 SEQUENCE 或者SET 就可以写入到这个结构中。
Go places real restrictions on ASN.1. For example, ASN.1 allows integers of any size,
while the Go implementation will only allow upto signed 64-bit integers. On the other
hand, Go distinguishes between signed and unsigned types, while ASN.1 doesn't. So
for example, transmitting a value of uint64 may fail if it is too large for int64,
Go 在实现上,为ASN.1 添加了一些约束。例如ASN.1 允许任意大小的整数,而GO 只允许最大为64
位有符号整数能表示的值.另一方面，Go 区分有符号类型与无符号类型,而在ASN.1 则没有分别.因
此传递一个大于int64最大值能表示的uint64的值，则可能会失败。
In a similar vein, ASN.1 allows several different character sets. Go only supports
PrintableString and IA5String (ASCII). ASN.1 does not support Unicode characters
(which require the BMPString ASN.1 extension). The basic Unicode character set of
Go is not supported, and if an application requires transport of Unicode characters,
then an encoding such as UTF-7 will be needed. Such encodings are discussed in a
later chapter on character sets.
同理，ASN.1允许多个不同的字符集,而Go只支持PrintableString和IA5String(ASCII). ASN.1
不支持Unicode 字符(它需要BMPString ASN.1扩展)，连Go 中的基本 Unicode 字符集它都不支
持，如果应用程序需要传输Unicode 字符，则可能需要类似UTF-7 的编码。有关编码的内容将会在
后边字符集相关的章节来讨论。
We have seen that a value such as an integer can be easily marshalled and unmarshalled.
Other basic types such as booleans and reals can be similarly dealt with. Strings
which are composed entirely of ASCII characters can be marshalled and unmarshalled.
However, if the string is, for example, "hello \u00bc" which contains the non-ASCII
character '¼' then an error will occur: "ASN.1 structure error: PrintableString
contains invalid character". This code works, as long as the string is only composed
of printable characters:
我们已经看到，整型的值很容易被编、解组。类似的boolean 与real 等基本类型处理手法也类似。
由ASCII 字符构成的字符串也很容易。但当处理 "hello \u00bc"这种含有 '¼'这个非ASCII 字符
的字符串，则会出现错误：“ASN.1 结构错误:PrintableString包含非法字符”。以下的代码仅在
处理由可打印字符（printable characters）构成的字符串时,工作良好。
s := "hello"
mdata, _ := asn1.Marshal(s)
var newstr string
asn1.Unmarshal(mdata, &newstr)
ASN.1 also includes some "useful types" not in the above list, such as UTC time.
Go supports this UTC time type. This means that you can pass time values in a way
that is not possible for other data values. ASN.1 does not support pointers, but
Go has special code to manage pointers to time values. The
function GetLocalTime returns *time.Time. The special code marshals this, and it can
be unmarshalled into a pointer variable to a time.Time object. Thus this code works
ASN.1 还包含一些未在上边列表中出现的“有用的类型(useful types)”, 比如UTC 时间类型，GO
支持此UTC 时间类型。就是说你可以用一种特有的类型来传递时间值。ASN.1 不支持指针,Go 中却有
指向时间值的指针。比如函数GetLocalTime 返回*time.Time。asn1包编组这个 time 结构，也使
用这个包解组到一个time.Time对象指针中。代码如下
t := time.LocalTime()
mdata, err := asn1.Marshal(t)
var newtime = new(time.Time)
_, err1 := asn1.Unmarshal(&newtime, mdata)
Both LocalTime and new handle pointers to a *time.Time, and Go looks after this
special case.
LocalTime与new函数都返回的是*time.Time 类型的指针，GO 将内部对这些特殊类型进行处理。
In general, you will probably want to marshal and unmarshal structures. Apart from
the special case of time, Go will happily deal with structures, but not with pointers
to structures. Operations such as newcreate pointers, so you have to dereference
them before marshalling/unmarshalling them. Go normally dereferences pointers for
you when needed, but not in this case. These both work for a type T:
除了time 这种特殊情况外，你可能要编、解组结构类型。除了上面提到的 Time 结构外，其他的结
构Go 还是很好处理的。类以 new的操作将会创建指针，因此在编、解组之前，你需要解引用它。通
常，Go 会随需自动对指针进行解引用，但是下面这个例子并不是这么个情况。对于类型 T，以下两
种方式均可.
// using variables
var t1 T
t1 = ...
mdata1, _ := asn1.Marshal(t)
var newT1 T
asn1.Unmarshal(&newT1, mdata1)
/// using pointers
var t2 = new(T)
*t2 = ...
mdata2, _ := asn1.Marshal(*t2)
var newT2 = new(T)
asn1.Unmarshal(newT2, mdata2)
Any suitable mix of pointers and variables will work as well.
恰当地的使用指针与变量能让代码工作得更好。
The fields of a structure must all be exportable, that is, field names must begin
with an uppercase letter. Go uses the reflect package to marshal/unmarshal
structures, so it must be able to examine all fields. This type cannot be marshalled:
结构的所有字段必须是公共的，即字段名必须以大写字母开头。Go 内部实际是使用reflect包来编、
解组结构，因此reflect 包必须能访问所有的字段。比如下面这个类型是不能被编组的:
type T struct {
Field1 int
field2 int // not exportable
}
ASN.1 only deals with the data types. It does not consider the names of structure
fields. So the following type T1 can be marshalled/unmarshalled into type T2 as the
corresponding fields are the same types:
ASN.1 只处理数据类型，它并不关心结构字段的名字。因此只要对应的字段类型相同那么下面的T1
类型将可以被解、解组到T2 类型中。
type T1 struct {
F1 int
F2 string
}
type T2 struct {
FF1 int
FF2 string
}
Not only the types of each field must match, but the number must match as well. These
two types don't work:
不仅每个字段的类型必须匹配，而且字段数目也要相等，下面两个类型将不能互编、解码：
type T1 struct {
F1 int
}
type T2 struct {
F1 int
F2 string // too many fields
}
ASN.1 daytime client and server
ASN.1 日期查询服务客户端与服务器
Now (finally) let us turn to using ASN.1 to transport data across the network.
现在（最后）让我们使用ASN.1 来跨网络传输数据
We can write a TCP server that delivers the current time as an ASN.1 Time type, using
the techniques of the last chapter. A server is
我们可以使用上一章的技术来编写一个将当前时间作为ASN.Time 类型时间来传送的TCP 服务器。服
务器是:
/* ASN1 DaytimeServer
*/
package main
import (
"encoding/asn1"
"fmt"
"net"