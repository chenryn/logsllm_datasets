[Color Type](https://pydantic-docs.helpmanual.io/usage/types/#color-type).
`Json` : a special type wrapper which loads JSON before parsing; see
[JSON Type](https://pydantic-docs.helpmanual.io/usage/types/#json-type).
`AnyUrl` : any URL; see
[URLs](https://pydantic-docs.helpmanual.io/usage/types/#urls).
`AnyHttpUrl` : an HTTP URL; see
[URLs](https://pydantic-docs.helpmanual.io/usage/types/#urls).
`HttpUrl` : a stricter HTTP URL; see
[URLs](https://pydantic-docs.helpmanual.io/usage/types/#urls).
`PostgresDsn` : a postgres DSN style URL; see
[URLs](https://pydantic-docs.helpmanual.io/usage/types/#urls).
`RedisDsn` : a redis DSN style URL; see
[URLs](https://pydantic-docs.helpmanual.io/usage/types/#urls).
`SecretStr` : string where the value is kept partially secret; see
[Secrets](https://pydantic-docs.helpmanual.io/usage/types/#secret-types).
`IPvAnyAddress` : allows either an `IPv4Address` or an `IPv6Address`.
`IPvAnyInterface` : allows either an `IPv4Interface` or an `IPv6Interface`.
`IPvAnyNetwork` : allows either an `IPv4Network` or an `IPv6Network`.
`NegativeFloat` : allows a float which is negative; uses standard `float`
parsing then checks the value is less than 0; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`NegativeInt` : allows an int which is negative; uses standard `int` parsing
then checks the value is less than 0; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`PositiveFloat` : allows a float which is positive; uses standard `float`
parsing then checks the value is greater than 0; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`PositiveInt` : allows an int which is positive; uses standard `int` parsing
then checks the value is greater than 0; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`condecimal` : type method for constraining Decimals; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`confloat` : type method for constraining floats; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`conint` : type method for constraining ints; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`conlist` : type method for constraining lists; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`conset` : type method for constraining sets; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
`constr` : type method for constraining strs; see
[Constrained Types](https://pydantic-docs.helpmanual.io/usage/types/#constrained-types).
# [Custom Data Types](https://pydantic-docs.helpmanual.io/usage/types/#custom-data-types)
You can also define your own custom data types. There are several ways to
achieve it.
## [Classes with `__get_validators__`](https://pydantic-docs.helpmanual.io/usage/types/#classes-with-__get_validators__)
You use a custom class with a classmethod `__get_validators__`. It will be
called to get validators to parse and validate the input data.
!!! tip These validators have the same semantics as in
[Validators](pydantic_validators.md), you can declare a parameter `config`,
`field`, etc.
```python
import re
from pydantic import BaseModel
# https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Validation
post_code_regex = re.compile(
    r"(?:"
    r"([A-Z]{1,2}[0-9][A-Z0-9]?|ASCN|STHL|TDCU|BBND|[BFS]IQQ|PCRN|TKCA) ?"
    r"([0-9][A-Z]{2})|"
    r"(BFPO) ?([0-9]{1,4})|"
    r"(KY[0-9]|MSR|VG|AI)[ -]?[0-9]{4}|"
    r"([A-Z]{2}) ?([0-9]{2})|"
    r"(GE) ?(CX)|"
    r"(GIR) ?(0A{2})|"
    r"(SAN) ?(TA1)"
    r")"
)
class PostCode(str):
    """
    Partial UK postcode validation. Note: this is just an example, and is not
    intended for use in production; in particular this does NOT guarantee
    a postcode exists, just that it has a valid format.
    """
    @classmethod
    def __get_validators__(cls):
        # one or more validators may be yielded which will be called in the
        # order to validate the input, each validator will receive as an input
        # the value returned from the previous validator
        yield cls.validate
    @classmethod
    def __modify_schema__(cls, field_schema):
        # __modify_schema__ should mutate the dict it receives in place,
        # the returned value will be ignored
        field_schema.update(
            # simplified regex here for brevity, see the wikipedia link above
            pattern="^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$",
            # some example postcodes
            examples=["SP11 9DG", "w1j7bu"],
        )
    @classmethod
    def validate(cls, v):
        if not isinstance(v, str):
            raise TypeError("string required")
        m = post_code_regex.fullmatch(v.upper())
        if not m:
            raise ValueError("invalid postcode format")
        # you could also return a string here which would mean model.post_code
        # would be a string, pydantic won't care but you could end up with some
        # confusion since the value's type won't match the type annotation
        # exactly
        return cls(f"{m.group(1)} {m.group(2)}")
    def __repr__(self):
        return f"PostCode({super().__repr__()})"
class Model(BaseModel):
    post_code: PostCode
model = Model(post_code="sw8 5el")
print(model)
# > post_code=PostCode('SW8 5EL')
print(model.post_code)
# > SW8 5EL
print(Model.schema())
"""
{
    'title': 'Model',
    'type': 'object',
    'properties': {
        'post_code': {
            'title': 'Post Code',
            'pattern': '^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$',
            'examples': ['SP11 9DG', 'w1j7bu'],
            'type': 'string',
        },
    },
    'required': ['post_code'],
}
"""
```
### Generic Classes as Types
!!! warning This is an advanced technique that you might not need in the
beginning. In most of the cases you will probably be fine with standard
*pydantic* models.
You can use
[Generic Classes](https://docs.python.org/3/library/typing.html#typing.Generic)
as field types and perform custom validation based on the "type parameters" (or
sub-types) with `__get_validators__`.
If the Generic class that you are using as a sub-type has a classmethod
`__get_validators__` you don't need to use `arbitrary_types_allowed` for it to
work.
Because you can declare validators that receive the current `field`, you can
extract the `sub_fields` (from the generic class type parameters) and validate
data with them.
```python
from pydantic import BaseModel, ValidationError
from pydantic.fields import ModelField
from typing import TypeVar, Generic
AgedType = TypeVar("AgedType")
QualityType = TypeVar("QualityType")
# This is not a pydantic model, it's an arbitrary generic class
class TastingModel(Generic[AgedType, QualityType]):
    def __init__(self, name: str, aged: AgedType, quality: QualityType):
        self.name = name
        self.aged = aged
        self.quality = quality
    @classmethod
    def __get_validators__(cls):
        yield cls.validate
    @classmethod
    # You don't need to add the "ModelField", but it will help your
    # editor give you completion and catch errors
    def validate(cls, v, field: ModelField):
        if not isinstance(v, cls):
            # The value is not even a TastingModel
            raise TypeError("Invalid value")
        if not field.sub_fields:
            # Generic parameters were not provided so we don't try to validate
            # them and just return the value as is
            return v
        aged_f = field.sub_fields[0]
        quality_f = field.sub_fields[1]
        errors = []
        # Here we don't need the validated value, but we want the errors
        valid_value, error = aged_f.validate(v.aged, {}, loc="aged")
        if error:
            errors.append(error)
        # Here we don't need the validated value, but we want the errors
        valid_value, error = quality_f.validate(v.quality, {}, loc="quality")
        if error:
            errors.append(error)
        if errors:
            raise ValidationError(errors, cls)
        # Validation passed without errors, return the same instance received
        return v
class Model(BaseModel):
    # for wine, "aged" is an int with years, "quality" is a float
    wine: TastingModel[int, float]
    # for cheese, "aged" is a bool, "quality" is a str
    cheese: TastingModel[bool, str]
    # for thing, "aged" is a Any, "quality" is Any
    thing: TastingModel
model = Model(
    # This wine was aged for 20 years and has a quality of 85.6
    wine=TastingModel(name="Cabernet Sauvignon", aged=20, quality=85.6),
    # This cheese is aged (is mature) and has "Good" quality
    cheese=TastingModel(name="Gouda", aged=True, quality="Good"),
    # This Python thing has aged "Not much" and has a quality "Awesome"
    thing=TastingModel(name="Python", aged="Not much", quality="Awesome"),
)
print(model)
"""
wine=
cheese=
thing=
"""
print(model.wine.aged)
# > 20
print(model.wine.quality)
# > 85.6
print(model.cheese.aged)
# > True
print(model.cheese.quality)
# > Good
print(model.thing.aged)
# > Not much
try:
    # If the values of the sub-types are invalid, we get an error
    Model(
        # For wine, aged should be an int with the years, and quality a float
        wine=TastingModel(name="Merlot", aged=True, quality="Kinda good"),
        # For cheese, aged should be a bool, and quality a str
        cheese=TastingModel(name="Gouda", aged="yeah", quality=5),
        # For thing, no type parameters are declared, and we skipped validation
        # in those cases in the Assessment.validate() function
        thing=TastingModel(name="Python", aged="Not much", quality="Awesome"),
    )
except ValidationError as e:
    print(e)
    """
    2 validation errors for Model
    wine -> quality
      value is not a valid float (type=type_error.float)
    cheese -> aged
      value could not be parsed to a boolean (type=type_error.bool)
    """
```
# [Using constrained strings in list attributes](https://stackoverflow.com/questions/66924001/conflict-between-pydantic-constr-and-mypy-checking)
If you try to use:
```python
from pydantic import constr
Regexp = constr(regex="^i-.*")
class Data(pydantic.BaseModel):
    regex: List[Regex]
```
You'll encounter the `Variable "Regexp" is not valid as a type [valid-type]`
mypy error.
There are a few ways to achieve this:
## Using `typing.Annotated` with `pydantic.Field`
Instead of using `constr` to specify the `regex` constraint, you can specify it
as an argument to `Field` and then use it in combination with
`typing.Annotated`:
!!! warning "Until this
[open issue](https://github.com/samuelcolvin/pydantic/issues/2551) is not
solved, this won't work."
!!! note "`typing.Annotated` is only available since Python 3.9. For older
Python versions `typing_extensions.Annotated` can be used."
```python
import pydantic
from pydantic import Field
from typing import Annotated
Regex = Annotated[str, Field(regex="^[0-9a-z_]*$")]
class DataNotList(pydantic.BaseModel):
    regex: Regex
data = DataNotList(**{"regex": "abc"})
print(data)
# regex='abc'
print(data.json())
# {"regex": "abc"}
```
Mypy treats `Annotated[str, Field(regex="^[0-9a-z_]*$")]` as a type alias of
`str`. But it also tells pydantic to do validation. This is described in the
[pydantic docs](https://pydantic-docs.helpmanual.io/usage/schema/#typingannotated-fields).
Unfortunately it does not currently work with the following:
```python
class Data(pydantic.BaseModel):
    regex: List[Regex]
    regex: Optional[Regex]
```
## Inheriting from pydantic.ConstrainedStr
Instead of using `constr` to specify the regex constraint (which uses
`pydantic.ConstrainedStr` internally), you can inherit from
`pydantic.ConstrainedStr` directly:
```python
import re
import pydantic
from pydantic import Field
from typing import List
class Regex(pydantic.ConstrainedStr):
    regex = re.compile("^[0-9a-z_]*$")
class Data(pydantic.BaseModel):
    regex: List[Regex]
data = Data(**{"regex": ["abc", "123", "asdf"]})
print(data)
# regex=['abc', '123', 'asdf']
print(data.json())
# {"regex": ["abc", "123", "asdf"]}
```
Mypy accepts this happily and pydantic does correct validation. The type of
`data.regex[i]` is `Regex`, but as `pydantic.ConstrainedStr` itself inherits
from `str`, it can be used as a string in most places.
# References
- [Field types](https://pydantic-docs.helpmanual.io/usage/types)