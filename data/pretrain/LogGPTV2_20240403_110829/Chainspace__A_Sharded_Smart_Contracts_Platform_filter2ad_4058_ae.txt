veriﬁed by the checker and the voter’s public key appears in the
list, a new SVote.Vote object is created as the homomorphic
addition of the previous votes with the new one. Note that the
checker does not need to know the clear value of the votes to
assert their correctness since it only has to verify the associated
signatures and zero-knowledge proofs.
Finally, the procedure SVote.tally is called to threshold
decrypt the aggregated votes and provide a SVote.Tally object
representing the ﬁnal election’s result in plain text, along with a
proof of correct decryption from the tally. The SVote contract’s
size is approximately 400 lines.
VII.
IMPLEMENTATION & EVALUATION
We implemented a prototype of Chainspace in ∼10K lines
of Python and Java code. The implementation consists of
two components: a Python contracts environment and a Java
node. We have released the code as an open-source project on
GitHub.2
Python Contract Environment. The Python contracts envi-
ronment allows developers to write, deploy and test smart
contracts. These are deployed on each node by running the
Python script for the contract, which starts a local web service
for the contract’s checker. The contract’s checker is then called
though the web service. The environment provides a framework
to allow developers to write smart contracts with little worry
about the underlying implementation, and provides an auto-
generated checker for simple contracts.
Java Node Implementation. The Java node implements a
shard replica that accepts incoming transactions from clients
and initiates, and executes, the S-BAC protocol. For BFT
consensus, we use the BFT-SMART [BSA14] Java library—one
2URL omitted for double-blind review.
11
Fig. 5. Diagram illustrating the implementation of a Chainspace system with
two shards managing four nodes each. The user submits the transaction to its
local S-BAC client through a built-in HTTP API (arrow 1). Then, this S-BAC
client sends the transaction to Chainspace (arrow 2).
of the very few maintained open source libraries implementing
byzantine consensus.
To communicate with Chainspace, end users also run an
S-BAC–enabled client. First, she creates a transaction through
the Python environments using one or many existing smart
contracts. She then submits the transaction to its S-BAC
client through the HTTP API as indicated in Figure 5, that
sends the transaction to Chainspace according to the BFT-
SMART protocol.
A node is composed of a server divided in two parts: the
core and the checker. To communicate with other nodes, each
node also contains an S-BAC client. When a transaction is
received, the core is in charge of verifying that the input objects
and references are active (neither locked nor inactive). Then,
the node runs the checker associated with the contract, in an
isolated container. (The checker is provided by the contract’s
creator when the node starts up, and interfaces with the node
through an HTTP API.) When the client submits a transaction
with dependencies, the core recursively checks each dependent
transaction ﬁrst, and the top-level transaction at last (similar to
depth-ﬁrst search algorithm).
Performance Measurements. We evaluated the performances
and scalability of our implementation of Chainspace, through
deployments on Amazon EC2 containers. We launched up to
96 nodes on t2.medium virtual machines, each containing 8 GB
of RAM on 2 virtual CPUs and running GNU/Linux Debian
8.1. We sent transactions to the network from a Chainspace
client running on a t2.xlarge virtual machine, containing 16
GB of RAM and 4 virtual CPUs, also running GNU/Linux
Debian 8.1. In our tests, we map objects to shards randomly
using the mapping function φ(o) = id(o) mod K where K
is a constant representing the number of shards and id(o) is
the SHA256 hash of the object.
We ﬁrst measure the effect of the number of shards on
transaction throughput (Figure 6). The transaction throughput
of Chainspace scales linearly with the number of shards: with
4 nodes per shard, the number of transactions per second (t/s)
increases on average by 22 for 1-input transactions for each
shard added. This is because as inputs are randomly assigned
to shards based on their hashes, the transaction processing load
is spread out over a larger number of shards.
Next we investigate the effect of shard size (the number
of nodes per shard) on transaction throughput (Figure 9). We
ﬁx the number of shards to 2, and increase the number of
1. submit transaction2. send to ChainspaceUSER SIDESERVER SIDEcorecheckernodecorecheckernodecorecheckernodecorecheckernodeShardClient SoftwareS-BAC clientHTTP APIcorecheckernodecorecheckernodecorecheckernodecorecheckernodeShardUSERFig. 6. The effect of the number of shards on transaction throughput. (Shards:
2, nodes per shard: 4, input-to-shard mapping: random. Repeats: 20.)
Fig. 7. The effect of the number of inputs per transaction on transaction
throughput. (Shards: 2, nodes per shard: 4, input-to-shard mapping: random.
Repeats: 20.)
nodes per shard from 2 to 48. With BFT-SMART conﬁgured
for 3f + 1 fault tolerance, we observe an expected gracious
decrease in transaction throughput: for each node added, the
throughput reduces on average by 1.6 transactions per second.
This is because in order for a BFT-SMART node to realise
consensus for a message, it must receive a result from at least
f + 1 nodes. Thus, the bottleneck is the latency of the f + 1th
node with the highest response time.
Another factor that can potentially affect transaction through-
put is the number of inputs per transaction: the more shards
touched by the transaction inputs, the longer it will take to run
S-BAC among all the concerned shards. In Figure 7, we study
how the number of inputs per transaction affects transaction
throughput. We measure this for 5 shards, varying the number
of inputs per transaction from 1 to 10, and the inputs are
randomly mapped to shards as previously stated. The transaction
throughput decreases asymptotically until it becomes stable at
around 40 transactions per second. This is because S-BAC’s
maximum time in processing transactions is capped at the time
it takes to process transactions that touch all the 5 shards.
Increasing the number of inputs does not further deteriorate
the transaction throughput.
Finally, we measure the client-perceived latency—the time
from when a client submits a transaction until it receives a
decision about whether the transaction has been committed—
under varying system loads expressed in terms of transactions
received per second. Figure 8 shows the effect of transactions
received by the system per second (all 1-input transactions) on
client-perceived latency for 2 shards, each having 4 nodes.
Recall from Figure 6 that
the average throughput for a
Chainspace system with similar conﬁguration is 75 1-input
transactions per second. Consequently, we observe in Figure 9
that the increase in latency with varying system loads is smaller
for 20 t/s–60 t/s (average 69 ms), but the values start to get
bigger after 60 t/s (average 210 ms). This is when the system
reaches its maximum transaction throughput, causing a backlog
of transactions to be processed.
Smart Contract Benchmarks. We evaluate the cost and
Fig. 8. The cumulative distribution function of delay for the client to receive a
ﬁnal commit or abort response, for varying system load. (Shards: 2, nodes per
shard: 4, inputs per transaction: 1, input-to-shard mapping: random. Repeats:
5.)
performance of some smart contracts described in Section VI-A.
We compute the mean (µ) and standard deviation (σ) of the
execution of each procedure (denoted as [g]) and checker
(denoted as [c]) in the contracts. Each ﬁgure is the result
of 10,000 measured on a dual-core Apple MacBook Pro
4.1, 2.7GHz Intel Core i7. The last column indicates the
transaction’s size resulting from executing the procedure.
All cryptographic operations as digital signatures and zero-
knowledge proofs have been implemented using the Python
library petlib [pet17], wrapping OpenSSL.
CSCoin—Contract size: ∼200 lines
Operation
createAccount [g]
[c]
authTransfer [g]
[c]
µ [ms]
4.845
0.022
4.986
5.750
σ [ms]
± 0.683
± 0.005
± 0.684
± 0.474
size [B]
512
-
1114
-
12
2468101214Number of shards50100150200250300350400Average transactions / second1 input2 inputs246810Number of inputs per transaction406080100120140160180Average transactions / second05001000150020002500Client-perceived latency (ms)0.00.20.40.60.81.0Probability20 t/s40 t/s60 t/s80 t/s100 t/s120 t/s140 t/s160 t/s180 t/s200 t/sknowledge proof asserting that the encrypted value is zero;
this takes roughly 11 ms to generate the transaction and to
run the checker. Next, each time a vote is added, the user
proves two zero-knowledge statements—one asserting that she
votes for exactly one option and one proving that her vote is a
binary value—and computes an ECDSA signature on her vote,
which takes about 11 ms and generates a transaction of about
2.7 kB. Verifying the signature and the two zero-knowledge
proofs are slower and takes about 30 ms. Finally, tallying is the
slowest operation since it requires to decrypt the homomorphic
encryption of the votes’ sum.
VIII. LIMITATIONS
Chainspace has a number of limitations, that are beyond
the scope of this work to tackle, and deferred to future work.
The integrity properties of Chainspace rely on all shards
managing objects being honest, namely containing at most f
fault nodes each. We have chosen to let any set of nodes can
create a shard. However, this means that the function φ(o)
mapping objects to shards must avoid dishonest shards. Our
isolation properties ensure that a dishonest shard can at worse
affect state from contracts that have objects mapped to it. Thus,
in Chainspace, we opt to allow the contract creator to designate
which shards manage objects from their contract. This embodies
speciﬁc trust assumptions where users have to trust the contract
creator both for the code (which is auditable) and also for
the choice of shards to involve in transactions—which is also
public.
In case one or more shards are malicious, we provide an
auditing mechanism for honest nodes in honest shards to detect
the inconsistency and to trace the malicious shard. Through
the Hash-DAG structure it is also possible to fully audit the
histories of two objects, and to ensure that the validity rules
hold jointly—in particular the double-use rules. However, it
is not clear how to automatically recover from detecting such
an inconsistency. Options include: forcing a fork into one or
many consistent worlds; applying a rule to collectively agree
the canonical version; patching past transactions to recover
consistency; or agree on a minimal common consistent state.
Which of those options is viable or best is left as future work.
Checkers involved in validating transactions can be costly.
For this reason we allow peers in a shard to accept transactions
subject to a SCCoin payment to the peers. However, this
‘ﬂat’ fee is not dependent on the cost or complexity of
running the checker which might be more or less expensive.
Etherium [Woo14] instead charges ‘gas’ according to the cost of
executing the contract procedure—at the cost of implementing
their own virtual machine and language.
Finally, the S-BAC protocol ensures correctness in all cases.
However, under high contention for the same object the rate
of aborted transactions rises. This is expected, since the S-
BAC protocol in effect implements a variant of optimistic
concurrency control, that is known to result in aborts under
high contention. There are strategies for dealing with this in the
distributed systems literature, such as locking objects in some
conventional order—however none is immediately applicable
to the byzantine setting.
Fig. 9. The effect of the number of nodes per shard on transaction throughput.
(Shards: 2, inputs per transaction: 1, input-to-shard mapping: random. Repeats:
20.)
The user needs to generate a signing key pair to create an
account in the CSCoin contract, which takes about 5 ms.
However, verifying the account creation only requires to
check the transaction’s format, and it is therefore very fast.
Transferring money is a little more expensive due to the need to
sign the amount transferred and the beneﬁciary, and verifying
the signature in the checker.
SMet—Contract size: ∼200 lines
Operation
createMeter [g]
[c]
addReading [g]
[c]
computeBill [g]
[c]
σ [ms]
± 0.480
± 0.003
± 0.506
± 0.697
± 0.513
± 0.603
µ [ms]
4.786
0.060
5.286
5.965
5.043
5.870
size [B]
∼600
-
∼1100
-
∼1100
-
Similarly to CSCoin, creating a meter requires generating a
cryptographic key pair which takes about 5 ms, while verifying
the meter’s creation is faster and only requires checking the
transaction’s format. Adding new readings takes about 5 ms,
as the user needs to create a signed commitment of the
readings which requires elliptic curve operations and an ECDSA
signature. Computing the bill takes slightly longer (5.8 ms), and
involves homomorphic additions, and verifying the bill involves
checking a zero-knowledge proof of the billing calculation.
SVote—Contract size: ∼400 lines
µ [ms]
Operation
createElection [g]
11.733
11.327
[c]
addVote [g]
14.086
28.178
[c]
tally [g]
253.286
11.589
[c]
σ [ms]
± 1.028
± 0.782
± 1.043
± 1.433
± 7.793
± 0.937
size [B]
∼1227
-
∼2758
-
∼1264
-
The SVote contract is more expensive than the others since
it extensively uses zero-knowledge proofs and more advanced
cryptography. For simplicity, this smart contract has been tested
with three voters and two options. First of all, creating a
new election event requires building a signed homomorphic