Sorting
Miscellaneous string-handling functions
Symbol remangling
A dependency graph package used while determining kernel extension dependencies
Decompression of compressed kernels and verification of checksums
Note that libsa is not a generally available kernel library. In a typical boot-strapping scenario, libsa's code is
removed from the kernel once kextd becomes available. Even when libsa is present, its constituent
functions are not available to the kernel as part of any programming interface.[17]
[17] The kernel accesses libsa's extension-loading functionality through a function pointer
shared between libsa and the kernel. libsa's constructor function initializes this pointer to point
to a libsa function.
2.4.6. The Platform Expert
The Platform Expert is an objectessentially a motherboard-specific driverthat knows the type of platform
that the system is running on. The I/O Kit registers a nub for the Platform Expert at system initialization
time. An instance of the IOPlatformExpertDevice class becomes the root of the device tree. The root nub
then loads the correct platform-specific driver, which further discovers the busses present on the system,
registering a nub for each bus found. The I/O Kit loads a matching driver for each bus nub, which in turn
discovers the devices connected to the bus, and so on.
Nubs
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 10 of 80
In the context of the I/O Kit, a nub is an object that defines an access point and communication
channel for a physical device or a logical service. A physical device could be a bus, a disk drive
or partition, a graphics card, and so on. Examples of logical services include arbitration, driver
matching, and power management.
The Platform Expert abstraction provides access to a wide variety of platform-specific functions and
information, such as those related to:
Constructing device trees
Parsing certain boot arguments
Identifying the machine, which includes determining processor and bus clock speeds
Accessing power management information
Retrieving and setting system time
Retrieving and setting console information
Halting and restarting the machine
Accessing the interrupt controller
Creating the system serial number string
Saving kernel panic information
Initializing a "user interface" to be used in case of kernel panics
Reading and writing the nonvolatile memory (NVRAM)
Reading and writing the parameter memory (PRAM)
2.4.7. Kernel Extensions
Besides the core kernel, the Mac OS X kernel environment includes kernel extensions that are dynamically
loaded as needed. Most standard kernel extensions are targeted for the I/O Kit, but there are exceptions such
as certain networking-related and file-system-related kernel extensionsfor example, webdav_fs.kext and
PPP.kext. On a typical Mac OS X installation, there may be close to a hundred kernel extensions loaded at
any time. Many more reside in the /System/Library/Extensions/ directory.
2.5. A User-Space View of the File System
The Mac OS X user space is where end users and most developers spend their computing time. The file
systemor rather, its content and layoutis fundamental to how users interact with the system. The Mac OS X
file system's layout is largely a superimposition of Unix-derived and NEXTSTEP-derived file systems, with
many traditional Macintosh influences.
2.5.1. File System Domains
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 11 of 80
The Unix-style file system view in Mac OS X can be used to access all files and directories on a volume,
including the Mac OS Xspecific portions of the file system. Some Unix-specific aspects of this view include
standard directories such as /bin/, /dev/, /etc/, /sbin/, /tmp/, /usr/, /usr/X11R6/,
[18] /usr/include/, /usr/lib/, /usr/libexec/, /usr/sbin, /usr/share/, and /var/.
[18] Some components, such as the X Window System, are optional. If they are not installed,
certain directories may not be present.
Mac OS X conceptually divides the file system into four domains: User, Local, Network, and System.
2.5.1.1. The User Domain
The User domain contains user-specific resources. In Unix terminology, this is a user's home directory. For a
user named amit, the default local home directory location is /Users/amit/, and the default network home
directory location is /Network/Users/amit/. A user's home directory contains several standard directories,
such as .trash, Applications, Desktop, Documents, Library, Movies, Music, Pictures, Public, and
Sites. Certain per-user directories such as Public and Sites are meant to be publicly accessible and
therefore have read permissions for other users.
2.5.1.2. The Local Domain
The Local domain contains resources available to all users on a single system. It includes shared
applications and documents. It is usually located on the boot volume, which, typically, is also the root
volume. The /Applications/ directory lies in the Local domain. Unlike the User domain, which can be
arbitrarily manipulated by its owning user, only a user with system administrator privileges may modify the
Local domain.
2.5.1.3. The Network Domain
The Network domain contains resources available to all users on a local area networkfor example,
applications and documents that are shared over a network. The Network domain is usually located on a file
server and is locally mounted on a client machine under /Network/. Only a user with network administrator
privileges may modify this domain. Specific directories within this domain include Applications,
Library, Servers, and Users.
2.5.1.4. The System Domain
The System domain contains resources belonging to Mac OS X. Its contents include the operating system,
libraries, programs, scripts, and configuration files. Like the Local domain, the System domain resides on a
boot/root volume. Its standard location is the /System/ directory.
The system searches for resources such as fonts and plug-ins in various domains in the order of the most
specific domain first and the most general domain last, that is, User, Local, Network, and System.
2.5.2. The /System/Library/ Directory
Each file system domain contains several standard directories, some of which may exist in multiple (or all)
domains. Perhaps the most interesting directory in any domainand one that exists in all domainsis Library.
It contains a hierarchy of several standard subdirectories. In particular, a substantial part of the operating
system resides in /System/Library/. Let us look at examples of its contents.
 /System/Library/ contains system-level caches for various types of data. Most notably, it contains
the kernel and kernel extension (kext) caches. A kernel cache contains kernel code, prelinked kernel
extensions, and information dictionaries of any number of kernel extensions. Kernel caches reside
in /System/Library/Caches/com.apple.kernelcaches/.
 /System/Library/Extensions/ contains device drivers and other kernel extensions. The
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 12 of 80
multiextension (or mkext) cache/System/Library/Extensions.mkextcontains multiple kernel
extensions and their information dictionaries. An mkext cache is used during early system startup. A
kext repository cache containing the information dictionaries of all kernel extensions[19]
in /System/Library/Extensions/ exists as the file /System/Library/Extensions.kextcache.
[19] The kext repository cache also includes the information dictionaries of any plug-ins
that may reside within kernel extensions.
 /System/Library/Frameworks/ contains those Apple-provided frameworks and shared libraries that
have published APIs.
 /System/Library/PrivateFrameworks/ contains those Apple-provided frameworks and shared
libraries that are private to Apple and not available to third-party programmers.
 /System/Library/Filesystems/ contains loadable file systems.
 /System/Library/LaunchAgents/ and /System/Library/LaunchDaemons/ contain launchd
configuration files for system-level agents and daemons. The launchd program (/sbin/launchd) is
the master daemon that manages other daemons and agents beginning with Mac OS X 10.4.
The /System/Library/CoreServices/ directory contains several system components used in the system's
normal operation, such as the Dock and Finder applications. Other examples include those listed here.
 AppleFileServer.app is the Apple Filing Protocol (AFP) server.
 The BezelUI directory contains the program and images to display user-interface overlays in a variety
of situations: when the user adjusts screen brightness or volume using keyboard buttons, when the
user presses the eject button, when the batteries of an Apple Bluetooth mouse or keyboard are low,
and so on.
 BootX (PowerPC) and boot.efi (x86) are the Mac OS X bootloaders.
 CCacheServer.app is the Kerberos Credentials Cache Server.
 Classic Startup.app is the Classic virtual environment provider.
 Crash Reporter.app is used for sending a problem report to Apple when an application crashes or
when the system restarts after a kernel panic. It prompts the user before sending the report, which
consists of system information and the crashed program's debugging information. Figure 22 shows the
sequence of GNU debugger (GDB) commands used to generate the debugging information. These
commands are part of the gdb-generate-crash-report-script GDB script, which resides as a
resource within Crash Reporter.app.
 Network Diagnostics.app is used for solving Internet connection problems.
 OBEXAgent.app is the Bluetooth file exchange agent.
 loginwindow.app is roughly analogous to the login program on a UNIX system.
 pbs is the pasteboard server and a helper daemon for Cocoa applications.
Figure 22. Sequence of GDB commands for generating a crash report
# Stacks of all threads
thread apply all bt
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 13 of 80
# Local variable information
info locals
# Register values
info all-registers
# Values below stack pointer
x/64x $r1-100
# Values from stack pointer and beyond
x/64x $r1
# Shared library address information
info sharedlibrary
# Mach memory regions
info mach-regions
2.6. The Runtime Architecture
Given a loose enough definition of a runtime environment, one can say that modern operating systems often
provide multiple runtime environments. For example, whereas the Java virtual machine on Mac OS X is a
runtime environment for Java programs, the virtual machine implementation itself executes in another,
"more native" runtime environment. Mac OS X has several runtime environments for applications, as we
will see later in this chapter. However, an operating system typically has only a single lowest-level (or
"native") runtime environment that we will refer to as the runtime environment. The foundation of the
runtime environment is the runtime architecture, which has the following key aspects.
It provides facilities for launching and executing programs.
It specifies how code and data reside on diskthat is, it specifies the binary format. It also specifies how
compilers and related tools must generate code and data.
It specifies how code and data are loaded into memory.
It specifies how references to external libraries are resolved.
Mac OS X has only one runtime architecture: Mach-O. The name refers to the Mach Object File Format,
although the term "Mach" is somewhat of a misnomer in this case since Mach is not meant to understand
any object file format. Neither is Mach aware of the runtime conventions of user-space programs. The Mac
OS X kernel, however, does understand the Mach-O format. In fact, Mach-O is the only binary format that
the kernel can load[20]using the execve()[21] system call, which is implemented in the BSD portion of the
Mac OS X kernel.
[20] Note that we explicitly say binary format: The kernel can arrange for scripts to run.
[21] The execve() system call executes the specified program, which may be a binary
executable or a script, in the address space of the calling process.
2.6.1. Mach-O Files
Mac OS X uses Mach-O files for implementing several types of system components, for example, the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 14 of 80
following:
Bundles (programmatically loadable code)
Dynamic shared libraries
Frameworks
Umbrella frameworks, which contain one or more other frameworks
Kernel extensions
Linkable object files
Static archives
Executables
We will discuss frameworks, umbrella frameworks, and bundles later in this chapter. Before we continue, let
us enumerate some programs that are useful in creating, analyzing, or manipulating Mach-O files. Such
programs include the following:
 as the GNU-based assembler front-end
 dyld the default dynamic link editor (or runtime linker)
 gcc, g++ GNU compiler front-ends
 ld the static link editor (or static linker[22])
[22] Note that "static" in static linker refers to the fact that the program operates at
compile timeand not dynamically at runtime. The static linker supports both dynamic
shared libraries and static archive libraries.
 libtool a program that creates dynamically linked shared libraries and statically linked libraries from
Mach-O object files; called by the compiler driver during library creation
 nm a program that displays the object file symbol table
 otool a versatile program for displaying the internals of Mach-O files; has disassembling capabilities
A Mach-O file contains a fixed-size header (see Figure 23) at the very beginning, followed by typically
several variable-sized load commands, followed by one or more segments. Each segment can contain one or
more sections.
Figure 23. The structure of the Mach-O header (32-bit version)
struct mach_header {
uint32_t magic; /* mach magic number identifier */
cpu_type_t cputype; /* cpu specifier */
cpu_subtype_t cpusubtype; /* machine specifier */
uint32_t filetype; /* type of file */
uint32_t ncmds; /* number of load commands */
uint32_t sizeofcmds; /* the size of all the load commands */
uint32_t flags; /* flags */
};
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 15 of 80
The Mach-O header describes the features, layout, and linking characteristics of the file. The filetype field
in the Mach-O header indicates the type and, therefore, the purpose of the file. Mach-O file types include the
following:
 MH_BUNDLE plug-in code that is programmatically loaded into applications at runtime
 MH_CORE a file that stores the address space of an aborted program, that is, a core file containing a
"core dump"
 MH_DYLIB a dynamic shared library; conventionally a file with a .dylib suffix if it is a stand-alone
library
 MH_DYLINKER a special shared library that is a dynamic linker
 MH_EXECUTE a standard demand-paged executable
 MH_OBJECT an intermediate, relocatable object file (conventionally with a .o suffix); also used for
kernel extensions
For executable files, one of the load commands (LC_LOAD_DYLINKER) in the Mach-O header specifies the
path to the linker to be used for loading the program. By default, this load command specifies the standard
dynamic linker, dyld (/usr/lib/dyld), which itself is a Mach-O file of type MH_DYLINKER. The kernel and
dyld (or in theory, another dynamic linker, if one is specified) together prepare a Mach-O binary for
execution using the following sequence of operations, which has been simplified for brevity.[23]
[23] Further details of program execution by the kernel are discussed in Section 7.5.
The kernel examines the executable's Mach-O header and determines its file type.
The kernel interprets the load commands contained in the Mach-O header. For example, to handle
LC_SEGMENT commands, it loads program segments into memory.
 The kernel handles the LC_LOAD_DYLINKER load command by loading the specified dynamic linker
into memory.
The kernel eventually executes the dynamic linker on the program file. Note that this is the first user-
space code that runs in the program's address space. The arguments passed to the linker include the
program file's Mach-O header, the argument count (argc), and the argument vector (argv).
The dynamic linker interprets load commands from the Mach-O header. It loads the shared libraries
that the program depends on, and it binds external references that are required to start executionthat is,
it binds the Mach-O file's imported symbols to their definitions in a shared library or framework.
 The dynamic linker calls the entry point function specified by the LC_UNIXTHREAD (or LC_THREAD)
load command, which contains the initial thread state of a program's main thread. This entry point is
normally a language runtime environment function, which in turn calls the program's "main" function.
Let us look at the example of a trivial executable. Figure 24 shows a C program that is compiled to an
executable called empty.
Figure 24. A trivial C program to be compiled to an "empty" executable
// empty.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 16 of 80
int
main(void)
{
return 0;
}
Figure 25 shows the use of the otool program to list the load commands contained in empty.
Figure 25. Displaying the load commands in an executable's Mach-O header
$ otool -l ./empty
empty:
Load command 0
cmd LC_SEGMENT
cmdsize 56
segname __PAGEZERO
...
Load command 4
cmd LC_LOAD_DYLINKER