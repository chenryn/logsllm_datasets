基于其他的非共识算法实现的系统经常简单地依赖于时间戳来决定返回哪些数据。时
布式共识系统的性能问题”小节中进行详细讨论。
致性语义，这在很大程度上决定了数据存储的扩展性。这些设计妥协将在本章后面的“分
识算法。因此，性能、吞吐量和扩展能力在这种设计中非常重要。就像采用其他底层技
可靠的复制数据存储是复制状态机的一个应用。
可靠的复制数据存储和配置存储
图23-2：共识算法和复制状态机的关系
protocol）在RSM成员之间同步状态信息。
和Amir（参见文献[Kir08]）的文章中描述到，可以采用滑动窗口协议（sliding-window
员在每次提案轮中不一定全部参与了，RSM可能需要在成员之间同步状态。在Kirsch
节点间对操作顺序的共识，RSM系统按照这个顺序来执行操作。因为小组中的每个成
如图23-2所示，复制状态机是实现在共识算法逻辑层之上的一个系统。共识算法处理
都可以采用RSM来实现成为一个高可用的、分布式复制的服务。
在RSM系统上进行的操作是通过共识算法来全局排序的。这是一个非常有用的概念
和配置存储，执行锁机制和领头人选举（接下来会详细描述）。
行同样的一组操作的系统。RSM是一个有用的分布式系统基础组件，可以用来构建数据
一个复制状态机（replicated statemachine，RSM）是一个能在多个进程中用同样顺序执
可靠的复制状态机
变（例如运行正确数量的副本，处理小组成员问题，以及处理性能问题等）。
接进他们的应用程序，可以使得这些系统不需要为了高可靠共识服务而进行部署上的改
分布式共识
第23章管理关键状态：利用分布式共识来提高可靠性
执行共识协议
态
执行RSM协议
视图
分布式共识系统决定RSM操作
RSM根据全局顺序执行状态
的全局顺序
修改操作
。复制数据存储在关键路径中使用到了共
分布式共识
RSM
---
## Page 295
图23-3：使用复制进程进行领头人选举构造的高可用系统
献[Ghe03]）（已经被Colossus 替代）以及Bigtable键值对存储（参见文献[Cha06])所采用。
领头人的工作通常是负责协调某个工作者池中的工作者进程。这个模式被GFS（参见文
合理的。系统设计师可以用一个简单的单机程序，复制几份，再采用领头人选举方式来
这种设计类型在服务领头人的工作量是分片的，或者可以被一个进程所满足的情况下是
领头人（leader）来进行某种类型的工作是很常见的设计。唯一的领头人是一种保证粗
分布式系统的领头人选举是跟分布式共识等价的问题。复制多份服务并使用一个唯一的
使用领头人选举机制实现高可用的处理系统
处理速度来解决这个问题。
Spanner（参见文献[Cor12]）通过针对最差情况下的不确定性建模，同时在必要时减慢
屏障（barrier）在分布式计算中是一种原语，可以用来阻挡一组进程继续工作，直到某
分布式协调和锁服务
所以共识算法的吞吐量不是系统的主要问题。
在这种类型的组件里，不像复制数据存储那样，共识算法并不处于系统的关键路径中，
保证任意时间只有一个领头人在运行（参见图23-3）的方式来构造一个高可用的服务。
粒度互斥性的方法。
续租领头人
服务进程B
服务进程A
(master)
租约
提供领头人选举和租约服务
个带有数个副本的RSM服务
服务请求
分布式共识的系统架构模式
服务客户端
查询领头人
253
293
---
## Page 296
294 
254
从而使得整个系统更加可靠。
如果队列不可用，整个系统都将无法工作。利用RSM来实现队列可以将危险性最小化，
论锁的时候已经讨论过），而不是单纯地从队列中取出任务。采用队列模式的一个问题是
已经被领取的任务都被成功处理了。由于这个原因，建议采用某种租约系统（上述在讨
采用队列模式的系统可以很容易地处理某个工作节点的失效情况。然而，系统必须保证
队列（queue）是一种常见的数据结构，经常用来给多个工作进程分发任务。
可靠的分布式队列和消息传递
原语。大多数应用程序应该使用一种更高层的系统来提供分布式事务服务。
实现超出了本章讨论的范围，但是要记住，分布式锁是一个应该被小心使用的底层系统
无限时间锁是很有必要的，避免某个进程崩溃而导致锁无限期被持有。分布式锁的具体
作进程不会操作同一个输入文件。在实践中，使用可续租约（renewableLease）而不是
一些工作进程原子性地操作某些输入文件，同时将产生结果。分布式锁可以保障多个工
锁（lock）是另外一个很有用的协调性原语，可以用RSM实现。在一个分布式系统中
参见文献[Hun10]和[Zoo14]。
点故障源。屏障也可以用一个RSM系统来实现。Zookeeper服务可以实现这种屏障模式：
屏障可以由一个单独的协调者进程实现，但是这个实现会导致系统中出现不可接受的单
图23-4：在MapReduce计算中使用屏障协调进程
见文献[Dea04]）可以使用屏障来确保整个Map阶段已经完成，再开始Reduce阶段的计算。
实际将一个分布式计算划分成数个逻辑阶段执行。例如，如图23-4所示，MapReduce（参
种条件被满足（例如，直到某个计算的第一阶段全部完成时，再继续进行）。使用屏障
第23章
工作进程
管理关键状态：利用分布式共识来提高可靠性
Map阶段终止
进程都进入屏障
屏障：等待所有
Reduce阶段终止
---
## Page 297
统的实现比较慢，但是有很多办法可以提高性能。分布式共识算法是很多Google关键
并且低延迟的系统（参见文献[Bol11])。这种观点是错误的一
分布式共识系统的性能问题
中系统延迟过高，将会导致系统处理能力大幅下降。
少是直接面向用户的）。然而，如果在上述这种多个工作进程从队列里获取任务的系统
队列和消息系统经常需要非常好的系统吞吐量，但是并不一定追求低延迟（这些系统很
图23-5：一个基于队列的任务分发系统，利用分布式共识搭建的可靠队列。
系统可以用来实现客户端订阅某种消息的机制，也可以用来实现一个分布式一致缓存。
理。在这种一对多案例中，队列中的消息被存储为一个持久化的有序列表。订阅－分发
某种订阅－分发队列，某条信息可能会被订阅这个信道或者主题的很多个客户端同时处
如图23-5所示，这种模式其实也可以被当作点对点通信来对待。通信系统通常也会实现
这种使用队列进行任务分发的设计模式，其实是将队列作为一个负载均衡器来使用，正
明了原子性广播和分布式共识本质上是一个问题。
所有的系统都能够提供原子性的保障。Chandra和Toueg（参见文献[Cha96]）的文章证
传统理念经常认为分布式共识算法速度太慢，资源要求过高，不适合用于搭建高吞吐量
市面上有大量的订阅-分发系统（publish-subscribe）可供系统设计师选用，但是并不是
息，并且以同样的顺序来处理这些消息。这个概念在真实系统的设计中是非常有用的。
原子性广播是分布式系统的一个原语，意思是整个系统的参与者都可以可靠地接收到消
工作进程：租用任
并且将任务从
分布式队列
多个副本的RSM实现一个可靠的
队列中移除
工作进程：
租用任
任务加入队列
（一个或多个进程）
分布式共识系统的性能问题
队列中移除
工作进程：租用任
并且将任务从
一虽然某些分布式共识系
295
296
---
## Page 298
256
注2值得注意的是，最初的Paxos算法性能确实差强人意，但是已经在近年来得到了极大的提升。
图23-6：对物理位置距离较远的客户端来说，距离带来的延迟效应很大。
返周期（RTT），性能差距会非常大。
节点。如图23-6所示，对处于不同地理位置的客户端来说，距离较远的节点有更高的往
很多共识系统都会选举出一个指定的领头人进程，同时要求所有请求都必须发往该特殊
部署策略也有很多可变之处，例如：
系统性能的关键。在共识系统中，系统负载可能会从以下几个方面发生变动。
系统负载（workload）可能会从多个维度大幅变动，理解负载变动的范围与特点是讨论
是为了帮助读者更好地理解分布式共识系统的潜力所在。
节描述的大部分系统都是可用的并且在实际部署中的，有一些仍在科研阶段，这里提出
决于与系统负载有关的多个因子，以及系统性能的目标和系统的部署情况。准2下面几小
世界上并没有某个性能“最优”的分布式共识和状态机复制算法，因为算法性能通常取
增加副本之间的延迟，从而进一步降低系统性能。
据集，再乘以几个副本意味着非常高的计算成本，同时跨地理区域部署的系统又会大幅
势：我们涉及的数据集通常非常大，而且涉及的系统通常是跨地理区域部署的。大型数
实践中证明分布式共识算法非常有效。要注意的是，Google的海量规模在这里可不是优
系统的核心，如文献[Ana13]、[Bur06]、[Cor12]和[Shu13]里提到的那样，这些系统在
·局部区域部署，还是广域部署？
该系统是否使用分片、流水线和批处理技术？
采用的是哪种仲裁过程，大部分进程的分布情况如何？
C
吞吐量：在负载峰值时，单位时间内提出提议的数量
如果数据大小可变，请求的大小。
读请求的一致性要求。
请求类型：需要修改状态的写请求的比例。
第23章管理关键状态：利用分布式共识来提高可靠性
远端进程
近处进程
头人进程
分布式领
可见延迟较低
可见延迟更高
---
## Page 299
提议者不停地打断对方，使得没有一个新的提议可以被成功接收。如图23-8所示，这种
更重要的是，更换提议者可能会造成一种“提议者决斗”的状况。在这种状况下，两个
组内的另外一个进程可以在任何时间提交消息，并成为一个新的提议者，但是提议者角
了共识。
Accept消息，
保持不变，就可以跳过协议的第一阶段，因为拥有视图的这个提议者可以简单地发送
View），也就是一个领头人租约。在分布式共识协议后续阶段的执行中，该视图只要
分的时候，系统的状态图。第一阶段成功后可以建立起一个新的有序视图（Numbered
图23-7展示了某个新的提议者（Proposer）进行协议的第一阶段Prepare/Promise部
在很多共识协议中都适用，在系统需要传递大量消息的时候非常合适。
只需要对满足法定人数的进程发送一次消息就可以保障系统达成共识。这种强势领头人
除非目前没有选举出任何的领头人进程，或者发生了某种错误，在正常情况下，提议者
复合式Paxos（Multi-Paxos）协议采用了一个强势领头人（strong leader）进程的概念
复合式Paxos：消息流过程详解
场景是一种活跃死锁的场景，可能会无限进行下去。