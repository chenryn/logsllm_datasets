“nop sled,” as illustrated in Figure 4.
4.1.3 Encoding Immediate Constants. Instructions in ordinary programming can en-
code immediate constants. For example, the instruction mov 0xdeadbeef, %eax, which sets
%eax to the value deadbeef, is encoded as bb ef be ad de, where the last four bytes
are the little-endian representation of deadbeef. We can thus view the instruction stream
in an ordinary program as including both operations and certain immediate operands that
the instructions operate on. In return-oriented programming a similar effect is possible
when instruction sequences include a pop reg instruction. For example, a pop %ebx; ret
sequence will store the next word on the stack in %ebx and advance the stack pointer past
it. This is illustrated in Figure 5.
ACM Journal Name, Vol. V, No. N, Month 20YY.
stackpointerC libraryretnopinstructionpointernopnopC librarystackpointer0xdeadbeefpop %ebx;  retmov $0xdeadbeef, %eax(bb ef be ad de)instructionpointer12
·
Ryan Roemer et al.
Fig. 6. Ordinary and return-oriented direct jumps
Fig. 7. A memory-load gadget
4.1.4 Control Flow. In ordinary programs, many instructions can cause the processor
to transfer control elsewhere than the current instruction sequence. These transfers can be
unconditional or conditional, and they can be direct, jumping to a location determined by
an immediate constant, or indirect, jumping to a location named in a memory location or
register. Regardless of their type, they operate by changing the value of the instruction
pointer, %eip. In a return-oriented program, control-ﬂow is instead effected by perturbing
the value of the stack pointer, %esp.
For unconditional, direct jumps, the instruction sequence “pop %esp; ret” will do, if it
can be found: this is a form of immediate-load, as in Section 4.1.3. An example is given in
Figure 6. Conditional and indirect jumps are more tricky, and implementing them is gener-
ally the most difﬁcult part of instantiating a return-oriented programming environment on
a new platform. The problem is that while processors include many branch instructions,
these (not surprisingly) operate on the instruction pointer and are thus useless. For return-
oriented programming, we must synthesize test and branch primitives some other way.
4.1.5 Gadgets. The techniques described so far sufﬁce for Turing-complete return-
oriented programming. Often, however, more than one instruction sequence will be needed
to encode a logical operation. For example, loading a value from memory may require ﬁrst
reading its address into a register from an immediate, then reading the memory. It is helpful
to think of the arrangement on the stack that causes these two sequences to be executed as
a single load gadget; an example is given in Figure 7.
More generally, a gadget is an arrangement of words on the stack, including one or more
instruction sequence pointers and associated immediate values, that encodes a logical unit.
Gadgets act like a return-oriented instruction set, and are the natural target of a return-
oriented compiler’s assembler.
Correct execution of a gadget requires the following precondition: %esp points to the
ﬁrst word in the gadget and the processor executes a ret instruction. Each gadget then is
constructed so that it satisﬁes the following postcondition: When the ret instruction in its
last instruction sequence is executed, %esp points to the next gadget to be executed. To-
gether, these conditions guarantee that the return-oriented program will execute correctly,
one gadget after another.
4.2 Return-Oriented Exploitation
A return-oriented program is one or more gadgets arranged so that, when executed, they ef-
fect the behavior the attacker intends. The payload containing these gadgets must be placed
in the memory of the program to be exploited, and the stack pointer must be redirected so
it points to the ﬁrst gadget. The easiest way to accomplish these tasks is by means of a
ACM Journal Name, Vol. V, No. N, Month 20YY.
stackpointerpop %esp;  retjmp +4 instructionpointerpop %eax;  ret(word to load)mov (%eax), %ebx;  retstackpointerReturn-Oriented Programming
13
·
buffer overﬂow on the stack; the gadgets are placed on the overﬂowed stack so that the ﬁrst
has overwritten the saved instruction pointer of some function. When that function tries
to return, the return-oriented program is executed instead. However, a stack overﬂow isn’t
necessary. The payload containing the return-oriented program could be on the heap, and
the attacker could trigger its execution by overwriting a function pointer with the address
of a code snippet that sets %esp to the address of the ﬁrst gadget and executes a return.
We note that the gadgets that make up a return-oriented program need not all be placed
contiguously, in a single payload; by means of control ﬂow gadgets, an attack can transfer
control from a small ﬁrst stage on the stack to a larger second stage payload on the heap.
Indeed, the ﬁrst stage could read in the second stage payload over the network, as in the
Metasploit Project’s multistage exploits.
4.3 Finding Useful Instruction Sequences
The building blocks for the traditional return-into-libc attack are functions, and these can be
removed by the maintainers of libc or other target library/binary. By contrast, the building
blocks for our attack are short code sequences, each typically just two to ﬁve instructions
long. Every instruction sequence that ends in a ret is potentially useful.2 In this section
we discuss how an attacker can enumerate the available instruction sequences in order to
construct gadgets.
4.3.1
Intended Instruction Sequences. Every instruction sequence ending in a return
instruction — ret on x86, and the ret, restore sequence on SPARC — is potentially use-
ful. One obvious source of such sequences is function sufﬁxes and exits in a target library
like libc. In any target corpus on any platform, there will exist many such terminations. We
simply backtrack from these returns and examine the preceding instructions for “useful”
functional bits.
On a CISC platform such as the x86, where instructions are variable-length and un-
aligned, we can in addition use unintended instruction sequences discussed in Section 4.3.2
below. By contrast, the SPARC platform restricts 32-bit instructions to a 4 byte width and
enforces alignment on instruction read, preventing us from using unintended instructions.
We carry out our experiments on the standard (SUN-provided) Solaris C library (version
1.23) in /lib/libc.so.1. Our testing environment was a SUN SPARC server running
Solaris 10 (SunOS 5.10), with a kernel version string of Generic\_120011-14.
Our search relies on static code analysis (with the help of some Python scripts) of the
disassembled Solaris libc. The library, which is around 1.3 megabytes in size, contains
over 4,000 ret, restore terminations, each of which potentially ends a useful instruction
sequence. We examine each of these returns and work backwards, cataloging the useful
computations we ﬁnd along the way.
4.3.2 Unintended Instruction Sequences. The second option for ﬁnding returns, avail-
able on architectures like the x86 where instructions are variable-length and unaligned, is
to look beyond the instructions placed by the compiler or assembler and consider returns
found by jumping into the middle of existing instructions.
Here is a concrete example of such unintended instructions on the x86, taken from our
testbed x86 libc. Two instructions in the entry point ecb_crypt are encoded as follows:
2In fact, there are other possible combinators. For example, if %ebx points to a ret instruction in libc, then any
sequence ending in jmp %ebx can be used.
ACM Journal Name, Vol. V, No. N, Month 20YY.
14
·
Ryan Roemer et al.
f7 c7 07 00 00 00
0f 95 45 c3
test $0x00000007, %edi
setnzb -61(%ebp)
Starting one byte later, the attacker instead obtains
c7 07 00 00 00 0f
95
45
c3
movl $0x0f000000, (%edi)
xchg %ebp, %eax
inc %ebp
ret
Because of the density of the x86 ISA, it is quite easy to ﬁnd not just unintended instruc-
tions but entire unintended sequences of instructions. These sequences must end in a ret
instruction, represented by the byte c3.
We carry out our experiments on the GNU C Library distributed with Fedora Core Re-
lease 4: libc-2.3.5.so. Our testing environment was a Pentium 4 running Fedora Core
Release 4, with Linux kernel version 2.6.14 and GNU libc 2.3.5. The gadget catalog we give
in Section 5 uses only unintended sequences — those that begin in the middle of a “real”
instruction and end with a ret, but whose terminating ret may or may not be unintended.
This demonstrates the power of unintended instruction sequences. Also considering in-
tended instruction sequences as in Section 4.3.1 would only increase an attacker’s power.
Two observations guide us in the choice of a data structure in which to record our ﬁnd-
ings. First, any sufﬁx of an instruction sequence is also a useful instruction sequence. If,
for example, we discover the sequence “a; b; c; ret” in libc, then the sequence “b; c;
ret” must of course also exist. Second, it does not matter to us how often some sequence
occurs, only that it does.3 Based on these observations, we choose to record sequences in a
trie. At the root of the trie is a node representing the ret instruction; the “child-of” relation
in the trie means that the child instruction immediately precedes the parent instruction at
least once in libc. For example, if, in the trie, a node representing pop %eax is a child
of the root node (representing ret) we can deduce that we have discovered, somewhere in
libc, the sequence pop %eax; ret.
Our algorithm for populating the trie makes use of following fact: It is easier to scan
backwards from an already found sequence than to disassemble forwards from every pos-
sible location in the hope of ﬁnding a sequence of instructions ending in a ret. When scan-
ning backwards, the sequence-so-far forms the sufﬁx for all the sequences we discover.
The sequences all start at instances of ret, which we can scan libc sequentially to ﬁnd.
In looking backwards from some location, we must ask: Does the single byte imme-
diately preceding our sequence represent a valid one-byte instruction? Do the two bytes
immediately preceding our sequence represent a valid two-byte instruction? And so on,
up to the maximum length of a valid x86 instruction. Any such question answered “yes”
gives a new useful sequence of which our sequence-so-far is a sufﬁx, and which we should
explore recursively by means of the same approach. Because of the density of the x86 ISA,
more than one of these questions can simultaneously have a “yes” answer.
We present our algorithm in pseudocode in Section A.1 in the Web-only appendix.
5. X86 GADGET CATALOG
In this section, we describe our catalog of gadgets on the x86 platform. All the instruction
sequences we use below were found by our algorithm when run on our test libc.
3From all the occurrences of a sequence, we might prefer to use one whose address does not include a NUL byte.
ACM Journal Name, Vol. V, No. N, Month 20YY.
Return-Oriented Programming
15
·
Fig. 8. Load the constant (to load) into %edx.
Fig. 9. Load a word in memory into %eax.
Note that we rejected some sequences because they were (intended) sufﬁxes of libc
functions. We did this to prove that the availability of a Turing-complete gadget set is not
an artifact of particular functions in our test libc. A real attacker would not reject such
sequences, and would have an easier time than we did.
The set of gadgets we describe is Turing complete by inspection, so return-oriented
programs can do anything possible with x86 code. We stress that the code sequences
pointed to by our gadgets are actually contained in our target libc; they are not injected
with the gadgets themselves — this is ruled out by W⊕X.
5.1 Load/Store
We consider three cases: loading a constant into a register; loading the contents of a mem-
ory location into a register; and writing the contents of a register into a memory location.
5.1.1 Loading a Constant. The ﬁrst of these can trivially be accomplished using a
sequence of the form pop %reg; ret, as explained in Section 4.1.3. One such example
is illustrated in Figure 8. In this ﬁgure as in all the following, the entries in the ladder
represent words on the stack; those with larger addresses are placed further down on the
page. Some words on the stack will contain the address of a sequence in libc. Our notation
for this shows a pointer from the word to the sequence. Other words will contain pointers
to other words, or immediate values.
5.1.2 Loading from Memory. We choose to load from memory into the register %eax,
using the sequence movl 64(%eax), %eax; ret. We ﬁrst load the address into %eax. Be-
cause of the immediate offset in the movl instruction we use, the address in %eax must
actually be 64 bytes less than the address we wish to load. We then apply the movl se-
quence, after which %eax contains the contents of the memory location. The procedure is
detailed in Figure 9. Note the notation we use to signify, “The pointer in this cell requires
that 64 be added to it so that it points to some other cell.”
5.1.3
Storing to Memory. We use the sequence movl %eax, 24(%edx); ret to store
the contents of %eax into memory. We load the address to be written into %edx using the
constant-load procedure above. The procedure is detailed in Figure 10.
5.2 Arithmetic and Logic
There are many approaches by which we could implement arithmetic and logic operations.
The one that works best for the instruction sequences available in our libc is as follows.
Other gadget sets on the x86 have used different approaches [Checkoway et al. 2010]. For
all operations, one operand is %eax; the other is a memory location. Depending on what is
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esppop%edxret(toload)%esppop%eaxretmovl64(%eax),%eaxret(arbitrary)+6416
·
Ryan Roemer et al.
Fig. 10. Store %eax to a word in memory.
Fig. 11. Add into %eax.
more convenient, either %eax or the memory location receives the computed value. This
approach allows us to compute memory-to-memory operations in a simple way: we load
one of the operands into %eax, using the load-from-memory methods of Section 5.1; we
apply the operation; and, if the result is now held in %eax, we write it to memory, using
the store-to-memory methods of the same section.
5.2.1 Add. The most convenient available sequence is the following:
addl (%edx), %eax; push %edi;
ret.
(1)
The ﬁrst instruction adds the word at %edx to %eax, which is exactly what we want. The
push instruction, however, creates some problems. First, the value pushed onto the stack
is immediately used by the ret instruction as the address for the next code sequence to
execute, which means the values we can push are restricted. Second, the push overwrites a
word on the stack, so that if we execute the gadget a second time (say, in a loop) it will not
behave the same.
We address these two problems as follows. First, before undertaking the addl instruction
sequence, we load into %edi the address of a ret instruction. This acts as a return-oriented
no-op (cf. Section 4.1.2), counteracting the effect of the push and continuing the program’s
execution. Second, we ﬁx up the last word in the gadget with the address of (1), as part of
the gadget’s code. The complete add gadget is illustrated in Figure 11.
5.2.2 Other Arithmetic Operations. The sequence neg %eax; ret allows us to compute
−x given x and, together with the method for addition given above, also allows us to
subtract values. There is not, in the sequences we found in libc, a convenient way to
compute multiplication, but the operation could be simulated using addition and the logic
operations described below.
5.2.3 Exclusive Or. We could implement exclusive or just as we implemented addition
if we had available a sequence like xorl (%edx), %eax or xorl %eax, (%edx), but we do
not. We do, however, have access to a bytewise operation of the form xorb %al, (%ebx).
If we can move each byte of %eax into %al in turn, we can compute a wordwise xor of
%eax into a memory location x by repeating the operation four times, with %ebx taking on
the values x, x + 1, x + 2, and x + 3. Conveniently, we can rotate %eax using the sequence
ror $0x08, %eax; ret. All that remains, then is to deal with the side effects of the xorb
ACM Journal Name, Vol. V, No. N, Month 20YY.
%esppop%edxretmovl%eax,24(%edx)ret+24%esppop%ecxpop%edxretaddl(%edx),%eaxpush%ediretmovl%ecx,(%edx)retpop%ediretretpop%edxret(arbitrary)Return-Oriented Programming
17
·
sequence we have:
xorb %al, 0x48908c0(%ebx); and $0xﬀ, %al; push %ebp; or $0xc9, %al; ret.
(2)
The immediate offset in the xorb instruction means that the values we load into %ebx must
be adjusted appropriately. The and and or operations have the effect of destroying the
value in %al, but by then we have already used %al, so this is no problem. (If we want to
undertake another operation with the value in %eax, we must reload it from memory.) The
push operation means that we must load into %ebp the address of a ret instruction and that,
if we want the xor to be repeatable, we must rewrite the xorb instructions into the gadget
each time, as described for repeatable addition above.
We present a (one-time) xor gadget in Section A.2 in the Web-only appendix.
5.2.4 And, Or, Not. Bitwise-and and -or are also best implemented using bytewise
operations, much like the xor method above. The code sequences are, respectively,
andb %al, 0x5d5e0cc4(%ebx); ret
and
orb %al, 0x40e4602(%ebx); ret.
These code sequences have fewer side effects than (2) for xor, above, so they are simpler
to employ. Bitwise-not can be implemented by xoring with the all-1 pattern.
5.2.5
Shifts and Rotates. We ﬁrst consider shifts and rotates by an immediate (con-
stant) value. In this case, instead of implementing the full collection of shifts and rotates,
we implement a single operation: a left rotate, which sufﬁces for constructing the rest: a
right rotate by k bits is a left rotate by 32− k bits; a shift by k bits in either direction is a
rotate by k bits followed by a mask of the bits to be cleared, which can itself be computed
using the bitwise-and method discussed above. The code sequence we use for rotation is
roll %cl, 0x17383f8(%ebx); ret.
Rotating by a variable number of bits could use the same instruction sequence, setting
%ecx according to the desired rotation amount.