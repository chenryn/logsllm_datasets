### Symbian Platform [76]

A proactive method to detect malware before it can execute its malicious intent is exemplified by Apple’s App Store vetting process. Each application uploaded by developers undergoes a review before being made available for download. Although the specific checks performed are not publicly disclosed, their primary goal is to identify and block any suspicious or malicious code. Despite these efforts, some malicious software occasionally slips through, especially if the malicious code is deeply embedded within the application [15], [77].

### Anomaly Detection

In contrast to signature-based detection, anomaly detection techniques aim to identify malware with unknown behaviors. One such tool is SmartSiren, developed by Cheng et al. [78]. SmartSiren detects unknown malware based on its communication behavior via Bluetooth and SMS. Data about these communications is sent to a central proxy, which analyzes the information for abnormal activity. This approach can detect fast-spreading worms and "slow-working" malware that collects private data and periodically sends it in aggregated form.

Another example is the infrastructure presented by Portokalidis et al. [79]. In this system, a "tracer" runs on the mobile device, recording all necessary information. This information is then used by a "replayer" to replay the instruction trace on an external virtual machine, which acts as a replica of the mobile device. This method offloads computationally intensive tasks to more powerful cloud-based systems, enabling the application of advanced virus detection routines and dynamic taint analysis, which can detect issues like buffer overflows and unauthorized code execution.

### Battery Consumption-Based Detection

A different approach, evaluated by Liu et al. [80] and Kim et al. [81], involves detecting malware by monitoring the battery power consumption. Given that mobile devices have limited battery capacity, any significant deviation from expected power usage could indicate the presence of hidden, potentially malicious activity. However, the effectiveness of this method in real-world scenarios, where user behavior is continuously changing, remains an open research question.

### Rootkit Detection

Malware with high privileges may attempt to hide itself at the kernel level, using rootkit techniques similar to those found on traditional computers. The first known rootkit for Android has been documented [82], and Bickford et al. have explored rootkit detection on mobile devices [83]. Effective and efficient methods for detecting rootkits on smartphones remain an open research challenge.

### Software-Based Attestation

Jakobsson and Johansson describe an approach to retroactively detect active software based on memory printing [84]. This method uses lightweight cryptographic constructions that take notably longer to compute when the performing algorithm has less usable RAM than it was configured for. This approach can detect software that attempts to hide its presence on mobile devices. Active malware, whose memory is swapped out to slower (Flash) memory during execution, will experience a measurable latency penalty, making it detectable through observed memory changes or timing discrepancies.

### Operating System Protection

As smartphones handle increasingly diverse application domains, their operating systems and programs become comparable to those on desktop computers. Both share similar architectures and technologies, such as the operating system and web browser back end. Thus, the same security measures can be applied to both. We now focus on some ways to enhance the security of smartphone operating systems.

#### Limited Privileges and Process Isolation

Exploited applications can run foreign code within the boundaries of their given privileges. Higher privileges pose a greater risk to the entire system and are often unnecessary for most applications. Smartphone applications should follow the same principles as their desktop counterparts, running with limited privileges. For example, on the Android platform, applications run with different UIDs and are further isolated through their own Java Virtual Machines (JVMs). General virtualization can also enhance overall security, but currently, there is no hardware support for this on smartphones.

#### Hardened Kernels

Operating system kernels and utilities on traditional computers use various techniques to prevent the execution of foreign code, such as Address Space Layout Randomization, stack protection, and non-executable writable memory. These techniques should also be applied to smartphone operating systems. Additionally, Mandatory Access Control lists can further enhance security. Implementing these techniques on different platforms is an ongoing effort.

#### Sane Default Settings

Smartphone services and applications should have sound default configurations and only run when necessary. For example, Bluetooth connectivity should be disabled by default. Habib et al. [85] demonstrated that some Symbian-based smartphones are vulnerable to Denial of Service (DoS) attacks due to network services that are enabled by default. To our knowledge, such evaluations have only been conducted for Windows Mobile and Symbian platforms.

### Updates

As more researchers work on smartphone security, more (security) bugs are likely to be discovered. Applications and operating systems need to be updated to address these vulnerabilities. The update process should be easy and straightforward, as common users are not motivated to engage in complex procedures. Better update mechanisms are an open research question. Future research could also explore the potential abuse of firmware flashing functionality, which could lead to more subtle attacks. However, such attacks might be detectable.

### Software Attestation

Smartphones can install a wide range of third-party software, including closed-source applications, which may contain hidden, unwanted routines. For example, a seemingly harmless weather app that requests internet access and location data can be used to spy on the user. Some research has focused on detecting such behavior. Kirin [86] is a framework for Android that decides which application requests to grant or deny based on policy invariants. SAINT [87] is a modified Android infrastructure that assigns permissions during installation for runtime access. SCanDroid [88] automatically detects unwanted information flows in applications based on requested capabilities. However, these tools require source code and are primarily for analysis purposes. TaintDroid [89] and PiOS [90] perform dynamic taint analysis and do not require source code, working at the binary level instead.

### Limited Graphical User Interface

Two challenges related to the user interface of mobile devices are: 
1. The user interface may not display the intended message, as seen in APIs for dialog boxes that accept strings of arbitrary length.
2. Malware that can simulate user actions, such as automatically responding to security confirmations. 

A potential solution is to introduce Turing tests (CAPTCHAs) for every security-relevant event to ensure human confirmation. Future research could explore the remaining security issues after implementing this solution and the balance between usability and security.

### The User as an Attack Vector

Many studies have shown that average users lack the necessary security knowledge. Even simple security interfaces, like the Windows security slider, are often misunderstood and misused. Therefore, we must question the purpose of these security mechanisms if users do not understand them. Security and usability research has gained attention, with proposals to embed security in products and development processes. Usability heuristics developed by Nielsen [100] and Shneiderman and Plaisant [101] provide a good starting point for secure and user-friendly solutions.

### Conclusion

Mobile devices are rapidly closing the gap with ordinary computers in terms of processing power, display size, and operating system versatility. However, they still have inherent constraints that will persist. There is evidence that we are entering an era of increased attacks on smartphones. Research in mobile security will continue to be a critical area in the coming years.

### Acknowledgments

This work has been supported by the Ministry of Economic Affairs and Energy of the State of North Rhine-Westphalia (grant 315-43-02/2-005-WFBO-009), the Federal Ministry of Education and Research (grant 01BY1020 – MobWorm), and the DFG (Emmy Noether grant Long Term Security). We also thank the anonymous reviewers for their valuable insights and comments.

### References

[1] N. Leavitt, “Malicious Code Moves to Mobile Devices,” IEEE Computer, vol. 33, no. 12, 2000.
[2] S. N. Foley and R. Dumigan, “Are Handheld Viruses a Significant Threat?” Commun. ACM, vol. 44, no. 1, 2001.
[3] D. Dagon et al., “Mobile Phones as Computing Devices: The Viruses are Coming!” IEEE Pervasive Computing, vol. 3, no. 4, 2004.
[4] N. Leavitt, “Mobile Phones: The Next Frontier for Hackers?” IEEE Computer, vol. 38, no. 4, 2005.
[5] M. Hypponen, “State of Cell Phone Malware in 2007,” 2007, http://www.usenix.org/events/sec07/tech/hypponen.pdf.
[6] J. Kleinberg, “The Wireless Epidemic,” Nature, vol. 449, no. 20, Sep. 2007.
[7] G. Lawton, “Is It Finally Time to Worry about Mobile Malware?” IEEE Computer, vol. 41, no. 5, 2008.