Symbian platform [76].
A proactive way to detect malware before it even gets the
chance to perform its malice intent is the way how Apple’s
App Store application vetting works. Each application that
is uploaded by its developers is checked before it can be
downloaded. Albeit
the performed checks are unknown,
its aim is to detect malicious code and to withhold the
application if something suspicious is found. Since it is hard
to detect malicious code hidden somewhere deep in the code
path, some unwanted software slips through this mechanism
from time to time [15], [77].
In contrast
Anomaly Detection:
to signature based
detection approaches, anomaly detection techniques attempt
to detect malware with unknown behavior. One example
is SmartSiren, a tool developed by Cheng et al. [78].
SmartSiren is able to detect unknown malware based on
its communication behavior through Bluetooth and SMS.
Privacy conform data about these communication media is
sent to a central proxy which attempts to detect abnormal
behavior. This approach is able to detect fast spreading
worms and “slow working” malware, which collects private
data and forwards it from time to time in aggregated form.
Another example is the infrastructure presented by Por-
tokalidis et al. [79]. Here a “tracer” runs on the mobile
device and records all necessary information which is needed
by a “replayer” to playback the instruction trace on an exter-
nal virtual machine which represents a replica of the mobile
device. This approach also ofﬂoads expensive computation
to much more powerful computers in the cloud. This way,
off-site virus detection routines may be applied in addition
to complex, dynamic taint analysis, which may detect events
such as buffer overﬂows or foreign code execution.
A completely different approach is evaluated by Liu et
al. [80] and Kim et al. [81]. Since mobile devices have
comparatively small batteries, malware should be detectable
by the amount of battery power consumed by their conducted
instructions. If the running applications, the user behavior,
and the state of the battery is well known and precisely de-
ﬁned, additional hidden (malicious) activity can be detected.
However, it is unclear and an open research question how
well malware can be detected on smartphones that is in daily
use, especially with continuously changing user behavior.
Rootkit Detection: Malware with high privileges may
attempt to hide itself at kernel level. The rootkit techniques
do not differ from ordinary computers and, hence, their
detection is to a certain extent identical—and therefore very
hard. A ﬁrst rootkit for Android has already been presented
[82] and Bickford et al. evaluated rootkit detection on
mobile devices [83]. It is an open question how rootkits
on smartphones can be detected effectively and efﬁciently.
Software-based Attestation: Jakobsson and Johansson
describe an approach to retroactively detect any active
software based on memory printing [84]. The idea is to use
light-weight cryptographic constructions with the property
that it takes notably longer to compute a given function when
the performing algorithm is given less usable RAM than for
which it was conﬁgured. This approach is suited to detect
software that wants to hide its presence on mobile devices.
Active malware, whose memory is swapped out to much
slower (Flash) memory during execution, will experience
a huge latency penalty which is measurable. This makes
active malware detectable through either observed memory
changes or especially due to timing discrepancies when the
malware attempts to evade detection during attestation by
computing the expected result for the attestation.
F. Operating System Protection
Because smartphones deal with broader and broader ap-
plication domains, their operating system and their programs
become comparable to desktop computers. Both systems
share the same architecture and in many cases even the exact
same technologies, e.g., the operating system or web browser
back end. Thus, their security can be tightened with the same
technologies. We now focus on some ways to enhance the
security of smartphone operating systems.
Limited privileges and process isolation: Exploited
applications may run foreign code within the boundaries
of their given privileges. Higher privileges endanger the
whole system and are often not necessary for the vast
majority of applications. Smartphone applications should be
run with the same principles in mind as their counterparts
in ordinary computers. A good example is the Android
platform, where applications run with different UIDs and
are further separated through their own JVMs. Virtualization
in general may enhance the overall security of smartphones
(e.g., separated VMs for private and work-related tasks), but
currently there is no (hardware) support for this yet.
Hardened Kernels: Ordinary computer operating sys-
tem kernels and utilities constantly raise the stakes to execute
foreign code through critical security bugs. These techniques
should also be used at the heart of smartphone operating
systems and include Address Space Layout Randomiza-
tion, stack protection and non-executable writable memory.
Mandatory Access Control lists may further enhance overall
smartphone security. It is ongoing work to enable all these
techniques on the different platforms.
Sane Default Settings: Smartphone services and appli-
cations should have sound default conﬁgurations and should
only run when their services are required. One such example
is Bluetooth connectivity. Another is shown by Habib et
al. [85], where some Symbian based smartphones are prone
to DoS attacks in their default conﬁguration via a network
service that is reachable by default. To our knowledge, such
an evaluation has not been done except for Windows Mobile
and Symbian platforms.
107
Updates: The more people work in the area of smart-
phone security, the more likely it is that (security) bugs will
be found. In order to close the corresponding emerging secu-
rity holes, applications and operating systems need to be up-
dated. This has to been done in an easy and straightforward
fashion, as common users are not interested nor motivated
in long update procedures because of their missing security
understanding, cf. Section VII. Better update procedures are
an open research question. A challenge for future offensive
research can be the abuse of ﬁrmware ﬂashing functionality,
which leads to more subtle attacks. However, note that this
kind of attacks might be detected successfully.
Software Attestation: A feature of smartphones is the
ability to install all kinds of (closed source) 3rd-party soft-
ware. Those applications may contain unwanted routines
which are very hard to detect. One example is the previously
mentioned private data stealing routine in a game. The
Android OS allows to see which capabilities (Internet-
access, send/receive SMS, . . . ) an application requests dur-
ing install-time and to eventually deny them. Sadly, this is
an all-or-nothing decision. Either the application is installed
and may anytime make use of the granted capabilities, or it
is not installed and therefore not usable. But even an unsus-
picious looking weather application which requests forecasts
over the Internet connection and which might automatically
retrieve updates based on the current location (which is
known through the embedded GPS sensor) is perfect to
spy on the user. In order to detect such unwanted behavior,
some research has been done on this topic. Kirin [86] is a
framework for Android which decides on the basis of the
stakeholders’ policy invariants which application requests
are granted or denied. Ongtang et al. developed SAINT, a
modiﬁed infrastructure for Android which assigns permis-
sions during install-time for run-time access to or communi-
cation between applications [87]. Another proposed Android
security tool is SCanDroid [88], which may automatically
detect unwanted information ﬂows in applications based on
the requested capabilities. The downside of this approach
is that the source code is required and that it is solely for
analysis purposes as no intervention is possible.
Complementary approaches are TaintDroid [89] and
PiOS [90]. Both systems perform dynamic taint analysis and
are able to reveal hidden and possible unwanted information
ﬂows of private data. These tools do not need the source code
for their operation, but work on the binary level. A related
issue is the ongoing challenge of application revocation of
mobile device applications [15].
G. Limited Graphical User Interface
We will now look into two challenges concerning the
user interface of mobile devices. First, it is possible that
the user interface does not display the message that the
program or the operating system intended to. Examples are
APIs for dialog boxes that accept strings of arbitrary length
for the message to be displayed. Niu et al. presented some
phishing techniques based on these inadequatenesses [91].
Second, and even more challenging, is malware that is able
to simulate user actions, e.g., by automatically reacting to
security conﬁrmations. Some desktop computer operating
systems provide APIs for this task and it can be imagined
that mobile operating systems will provide this functionality
in the future. It becomes even more intriguing in combina-
tion with malware that rewrites some parts of the OS.
A ﬁrst solution to these problems is the introduction of
Turing tests (CAPTCHAs) for every security-relevant event
on the mobile device in order to prove that an event was
conﬁrmed by a human user. The task for future research
could be to explore the portion of security problems that
remain when this solution is applied. An additional question
lies in the area of human computer interaction (HCI) design:
enough to be of use, but not so much so that it becomes a
burden.
VII. THE USER AS ATTACK VECTOR
Many studies have been performed to evaluate the security
knowledge of the average user. Most of them show what
already the well-known study of Whitten and Tygar [92]
found out: normal users are not able to use security mecha-
nisms correctly. Several attempts have been made to simplify
the security interface for users, but even the very simple
Windows security slider with only four possible positions
was not completely understood and therefore wrongly set
by users who rated themselves as IT proﬁcient [93].
Therefore, we need to ask ourselves the purpose of these
numerous security mechanisms if the user does not under-
stand them. And even if he understands to work with one
speciﬁc mechanism, another mechanism might be difﬁcult
to grasp for him. People working in security do want to
achieve the desirable goal of more security-aware users, but
for the vast majority of users, their will, their interest, and
in particular the time they can devote to learn more than one
security mechanism, is likely to be limited.
Security and usability started out of general research on
HCI. We can trace it back to the famous study by Whitten
and Tygar in 1999 [92] and observe that it gained attention in
subsequent years [94], [95]. User studies regularly show that
security mechanisms are neither understood nor correctly
used by most of their users [92], [93], [96], [97]. In addition,
some authors propose to embed security in products [98]
and in the development process [99] rather than having it
stand-alone. Usability heuristics have been developed by
Nielsen [100] and Shneiderman and Plaisant [101]. They
are a good starting point for usability of security solutions.
Making our scope a bit broader, we also have to see the
administrator or security professional as a possible attack
vector: new and changing environments, poorly documented
hard- and software, and interplay of components which were
not developed to work together, offers very interesting—but
108
also challenging—questions. Wrong decisions on the secu-
rity professionals side will have very drastic consequences.
It would therefore be very helpful for them to have access
to some guidelines speciﬁc to mobile security, even going
down to the level of comparing currently available solutions
(both open and closed source). To the best of our knowledge,
there is no such tool yet, leading to another open research
question.
VIII. CONCLUSION
We recall the mobile device security speciﬁcs introduced
earlier, which form the framework for the investigations in
this paper (cf. Section III). Important for future research is
knowing whether these speciﬁcs remain valid. We see the
following directions, which directly inﬂuence our results:
• Creation of costs is a topic that will be even more
important in the future. As more and more services are
introduced to mobile devices, it is likely that some of
them will be payment services which might be abused.
is likely to remain un-
changed. Using observations of recent years, there is
a tendency towards an increased remote device man-
agement and remote ﬁrmware update. This mitigates
the users’ behavior (cf. Section VII).
• The network environment
• The importance of the expensive wireless link will
decrease. From a monetary perspective, communication
costs will decrease because more bandwidth becomes
available in mobile networks. From a computational
side, costs for algorithms on the device will also
decrease because the fourth generation of mobile net-
works (4G) is designed for high bandwidth and low
latency for data trafﬁc. Hence, having more bandwidth,
lower latency, and faster data transfer can be used for
new security solutions.
• The limited device resources are likely to decrease,
leading to more processing power and more memory.
Still, the battery seems to stay the most limiting factor
in mobile devices in the near future. Altogether, limited
device resources remain a unique speciﬁc of mobile
device security.
• The security-unaware user might become a little more
security-aware when mobile device security moves into
broad attention. This is likely to be connected to
reputation, as more understanding for mobile device
security might relieve the MNOs from unsubstantiated
claims from their customer base.
• Heterogeneity in devices, operating systems, and appli-
cations was a trait of mobile security in the past. It
is difﬁcult to predict if monopolies like in the desktop
world will emerge also in the mobile world. However,
as we start off with a high diversity this might mitigate
the security risks outlined above.
In summary, smartphones are rapidly closing the gap to
ordinary computers in terms of processing power, display
109
size, and versatility of operating systems. However, they
have inherent constraints that will remain valid in the future.
There is much evidence, that indeed we are at the beginning
of an era of attacks against smartphones. In any case,
research in mobile security will be an interesting area in
the years to come.
Acknowledgments: This work has been supported by
the Ministry of Economic Affairs and Energy of the State
of North Rhine-Westphalia (grant 315-43-02/2-005-WFBO-
009), the Federal Ministry of Education and Research (grant
01BY1020 – MobWorm), and the DFG (Emmy Noether
grant Long Term Security). We also thank the anonymous
reviewers for their valuable insights and comments.
REFERENCES
[1] N. Leavitt, “Malicious Code Moves to Mobile Devices,”
IEEE Computer, vol. 33, no. 12, 2000.
[2] S. N. Foley and R. Dumigan, “Are Handheld Viruses a
Signiﬁcant Threat?” Commun. ACM, vol. 44, no. 1, 2001.
[3] D. Dagon et al., “Mobile Phones as Computing Devices: The
Viruses are Coming!” IEEE Pervasive Computing, vol. 3,
no. 4, 2004.
[4] N. Leavitt, “Mobile Phones: The Next Frontier for Hack-
ers?” IEEE Computer, vol. 38, no. 4, 2005.
[5] M. Hypponen, “State of Cell Phone Malware in 2007,” 2007,
http://www.usenix.org/events/sec07/tech/hypponen.pdf.
[6] J. Kleinberg, “The Wireless Epidemic,” Nature, vol. 449,
no. 20, Sep. 2007.
[7] G. Lawton, “Is It Finally Time to Worry about Mobile
Malware?” IEEE Computer, vol. 41, no. 5, 2008.