(push-op '(:newline) ops)
=
(get-output-stream-string buf)
(first op)
T)（:RAW-STRING
(do)
:(make-instance *html-compiler)
:unindent
www.TopSage.com
pos)
"d>
,(subseq str start pos) nil) ops)
NIL)(:RAW-STRING ">" NIL)
:freshline :toggle-indenting)
NIL) (:FRESHLINE))
((do do-ppe)
它生成的代码将直接写人
---
## Page 410
你可以生成使用PRINC来直接向流中输出值的代码。
为当escapes为NIL时你不需要生成对escape的调用。而当*pretty*和escapes均为NIL时，
码的方法。在：embed-value方法中，可以根据escapes操作数的值来生成稍有不同的代码，因
特化在了参数op上。
(defmethod op->code ((op(eql :embed-value))&rest operands)
其中两个最有趣的op->code方法是用来为：embed-value和：embed-code这两个op生成代
(defmethod op->code ((op (eql :toggle-indenting)) &rest operands)
(defgeneric op->code(op &rest operands))
所有的工作都是由广义函数op->code上的方法来完成的，它们全部使用op名的EQL特化符
(defmethod op->code ((op（eql:unindent))&restoperands)
(defmethod op->code（(op （eql :indent)）&rest operands）
(defmethod op->code ((op (eql:freshline))&rest operands)
(defmethod op->code ((op （eql:newline)) &rest operands)
(defmethod op->code((op(eql:raw-string))&rest operands)
(destructuring-bind (value escapes)operands
(if*pretty*
(if *pretty*
(if
(if*pretty*
(if*pretty*
(destructuring-bind (string check-for-newlines) operands
(if*pretty*
(toggle-indenting *html-pretty-printer*)
(freshline *html-pretty-printer*)
(newline *html-pretty-printer*)
(if*pretty*
(if escapes
(unindent
(if escapes
(write-sequence,string *html-output*))))
(raw
(write-sequence (escape (princ-to-string,value),escapes) *html-output*)
(raw-string
(princ,value*html-output*)))))
*html-pretty-printer*(escape (princ-to-string,value),escapes)t)
-string*html-pretty-printer*
*html-pretty-printer*)
www.TopSage.com
,string,check-for-newlines)
(princ-to-string,value)t))
31.1
---
## Page 411
后者又将其插入到:embed-code op中，因此你只需再把它拉出来并返回。
并且在生成的代码中，对x的引用将变成一个对来自html形式外围LET的词法变量的引用。
就能够正常工作了，因为html将(:px)转译成了类似下面的形式:
394
另一方面，:embed-code方法有趣是因为它是如此地简单。process传递形式到embed-code,
事实上，这些代码将会生成你所见过的输出。
如果你在DOLIST的主体中展开对html的调用，那么你将得到类似下面的东西:
其中外层的html调用可以展开成类似下面的形式：
NIL
HTML> (html (:ul (dolist (x'(foo bar baz)) (html (:li x)))))
这让类似下面的代码得以工作：
(defmethod op->code ((op (eql :embed-code)) &rest operands)
(let ((x 10))
当上述代码在LET上下文中代替了对html的调用时，你可以得到下面的代码：
NIL
(progn
(progn
HTML> (let ((x 10)）(html (:p x)))
这样，类似下面的代码
(progn
(*andano-twau " asuanbas-antrm)
BAZ
(first operands))
(progn
((xandano-twau " asuanbas-atam)
(*a1dano-twau* (u9<>u (x but1as-os-outad) adessa) aouanbas-ant1m)
(*andno-tuu α, aouanbas-aatm)
(dolist (x '(foo bar baz))
(write-sequence 
(write-sequence 
(progn
write-sequence
(write-sequence
第 31章
(write-sequence
‘(foo bar baz))
实践：HTML 生成库，编译器部分
"" *html-output*)
""
(escape
“"
(escape
"" *html-output*)
*html-output*)
*html-output*))})
www.TopSage.com
(princ-
(princ-to-string x) "<>&") *html-output*)
(html
(*andno-4u* ("<> (x bu1s-0-
---
## Page 412
FORMAT函数来产生输出。特殊操作符：format的参数是一个用作格式控制字符串的字符串和任
释器中。另一个可以同时用在解释和编译的FOO代码中的特殊操作符是：format，它让你使用
个含有随机数的段落：
元素，而是将其主体中的形式传给embed-value。这样，你就可以像下面这样生成一
FOO语言处理器按照一个和正常FOO表达式不同的规则来处理。确切地说，不是输出一个
时，最初的形式刚好可以完成你想要做的事。因此，你可以定义一个特殊操作符：print，它被
从而绕过这个限制。
后的值。例如，你可能希望下面的FOO程序可以生成一个含有随机数的段落标签：
入Lisp代码的主要原因是使用Lisp的控制构造。不过，有时你也希望在生成的HTML中嵌入计算
非embed-value，因此返回的值被忽略了。通常这就是你所需要的东西，因为在FOO程序中嵌
述的语言里嵌人任意CommonLisp表达式的值。process函数将点对单元传给了embed-code而
变量的值嵌人到输出的HTML中。不过，由于传递给embed-value的只是符号，无法在目前所描
问语言求值器所使用的底层机制的能力。?
那些无法通过语言的基本求值规则来表达的事物。或者从另一个角度来看，特殊操作符提供了访
符和宏。
如此，你还可以为该语言添加两个特性，只需要再写一点儿代码就可以使其更加强大：特殊操作
31.2
举一个简单的例子，在FOO编译器中，语言求值器使用embed-value函数来生成代码，把
① 对于FOO特殊操作符和宏之间的相似之处，我将在31.3节里讨论到，这与Lisp本身的情况是一样的。事实上，理
FOO中的特殊操作符类似于Common Lisp中的特殊操作符。特殊操作符可用来在语言中表达
 很明显，这个特殊操作符只在编译的FOO代码中才有用，因为embed-value不能工作在解
在目前你所实现的语言中，可以通过在html的外面计算该值，然后再通过一个变量嵌入它,
你可以就此打住，FOO语言的表达性已经足够用来生成你所关心的几乎任何HTML了。尽管
9
HTML> (html (:p (:print (random 10))))
但这样做很麻烦，尤其是当你考虑把（random 10）传递给embed-value而非embed-code
1
HTML> (let ((x (random 10))） (html (:p x)))
NIL
HTML> (html (:p (random 10)))
但这样不行，因为代码会运行，然后值被丢掉了。
(:p (random 10)）
解了FOO特殊操作符和宏的工作方式，也有助于让你理解Common Lisp的有关设计理念。
FOO特殊操作符
www.TopSage.com
31.2
FOO 特殊操作符
395
---
## Page 413
符的名字的属性表中添加html-special-operator项。事实上，你保存在属性表中的值可以是
个函数，而应当转而定义一个宏，允许你像正规函数一样地定义特殊操作符，并负责在特殊操作
表达式一样，就好像CommonLisp的特殊形式也可能看起来像正常函数调用一样。
的process函数，像下面这样来处理特殊形式：
和一个特殊形式，并运行适当的代码来生成处理器对象上的一个调用序列，那么你可以修订顶层
作符所要求的语义来做事。假设你定义一个函数process-special-form，它接受语言处理器
符的名字。因此，可以像下面这样定义函数来测试一个给定形式是否为特殊形式：
过将一个非NIL值添加到该符号属性表中关键字html-special-operator下以标记特殊操作
化的方法来添加新的特殊操作符就更好了，这并不是为了方便FOO的用户而只是为了方便你自己。
们——特殊操作符在逻辑上是语言实现的一部分，并且它们不会有太多。不过，如果有更加模块
那些使用了特殊操作符的形式，以及在处理每个特殊操作符的时候如何得知需要运行哪些代码？
转译成输出一个显式换行的代码。
*escapes*绑定为*attribute-escapes*的情况下求值其主体中的Lisp形式。而:newline则被
主体中的所有形式作为正常FOO形式来求值，除了*escapes*绑定到NIL，:attribute可以在
递给emit-html的FOO中。在编译过的FOO中，：format的参数可以是任意Lisp表达式。
成出一个字符串，并且随后像其他任何字符串那样输出该字符串。这允许：format形式被用在传
何需要插入的参数。当所有：format的参数都是自求值对象时，通过将它们传递给FORMAT而生
一个实现该特殊操作符的函数。下面就是这个宏：
现在你只需实现process-special-form就好了。不用去定义实现了所有特殊操作符的单
那么，你怎样才能定义特殊操作符呢？对特殊操作符的处理有两个方面：语言处理器如何识别
其他特殊操作符控制了哪些字符被自动转义以及显式输出换行：:noescape特殊操作符使其
396
我们将“特殊形式"定义为任何这样的列表，其CAR是一个特殊操作符名字的符号。你可以通
你可以修改process-sexp-html来识别每一个特殊操作符，并用适当的方法来处理它
这是一个相当高级的宏类型，但如果你逐行地观察它就会发现，其实也没有什么特别的。为
(defmacro define-html-special-operator (name (processor &rest other-parameters)
必须将special-form-p子句放在最前面，因为特殊形式可能看起来在词法上跟正常的FOO
(defun process (processor form)
(and (consp form) (symbolp (car form)) (get (car form) 'html-special-operator)))
^(eval-when (:compile-toplevel :load-toplevel :execute)
cond
(setf
(consp form)
((sexp-html-p form)
(special-form-p form)
第31章实践：HTML生成库，编译器部分
fge
(process-special-form processor form))
www.TopSage.com
embe
codeproce
&body
body)
form)
---
## Page 414
样来使用foo-value：
其中的html宏用来生成在*element-escapes*中转义字符的代码。但如果你正在计划像下面这
函数：
殊操作符在你想要编写用来输出属性值的助手函数时将会很有用。如果你编写一个类似下面的
符名字的属性表中的匿名函数，并将其应用在处理器和Lisp形式的其余部分上。
进行的正常字符转义。
其主体中的Lisp形式传递给process。换句话说，这个特殊操作符禁止了由process-sexp-html
现该特殊操作符。它还可以使用process来求值一个作为FOO形式的表达式。
务是通过在后台接口上作适当的调用来生成正确的HTML，或生成可以生成它们的代码，从而实
部分，你可以确保所有的特殊操作符都至少接受一个参数。
define-html-special-operator定义成参数列表分成两部分的形式,即processor和其余的