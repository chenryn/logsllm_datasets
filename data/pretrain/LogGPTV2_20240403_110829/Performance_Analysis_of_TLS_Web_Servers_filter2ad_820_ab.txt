server throughput numbers would not change appreciably.
4. Analysis of experimental results
Figures 1 and 2 show the main results of our exper-
iments with the Amazon trace and the CS trace, respec-
tively. The achieved throughput is shown on the y axis.
For each system conﬁguration labeled along the x-axis,
we show two bars, corresponding to the result obtained
with the 500MHz system and the 933MHz system, respec-
tively.
Three clusters of bar graphs are shown along the x-axis.
The left cluster shows three conﬁgurations of a complete,
functional web server:
the Apache HTTP web server
(Apache), the Apache TLS web server (Apache+TLS),
Label
Apache
Apache+TLS
Description of server conﬁguration
Apache server
Apache server with TLS
Apache+TLS AXL300 Apache server with TLS and AXL300
RSA
PKX
NULL
RC4
noMAC
MD5
no cache
shmcache
perfect cache
no randomness
plain
fast resume
Skeleton TLS
RSA protected key exchange
plain key exchange
no bulk cipher (plaintext)
RC4 bulk cipher
no MAC integrity check
MD5 MAC integrity check
no session cache
shared-memory based session cache
idealized session cache (always hits)
no pseudo-random number generation (also: NULL, noMAC)
no bulk data marshaling (plaintext written directly to the network)
simpliﬁed TLS session resume (eliminates one round-trip)
all messages of correct size, but zero data
2500
2000
2200
1500
1370
1000
500
0
PIII-500Mhz
PIII-900Mhz
1480
1876
1118
525
261
305
147
600
350
285
280
166
160
112
63
735
750
783
467
474
490
901
585
967
976
937
615
622
Apache+TLS AXL300
Apache
Apache+TLS
R SA, R C4, M D5, no cache
PKX, N ULL, no M A C, no cache
PKX, N ULL, no M A C, perfect cache
PKX,  no rando m ness, perfect cache
R SA, N ULL, M D5, sh m cache
R SA, R C4, no M A C, sh m cache
PKX, R C4, M D5, sh m cache
PKX, N ULL, no M A C, sh m cache
PKX,  no rando m ness, perfect cache, plain
PKX,  no rando m ness, perfect cache, plain, fast resu m e
Skeleton TLS
Skeleton TLS, fast resu m e
Figure 1. Throughput for Amazon trace and different server conﬁgurations, on 500MHz and 933MHz servers.
Label
Apache
Apache+TLS
Description of server conﬁguration
Apache server
Apache server with TLS
Apache+TLS AXL300 Apache server with TLS and AXL300
RSA
PKX
NULL
RC4
noMAC
MD5
no cache
shmcache
perfect cache
no randomness
plain
fast resume
Skeleton TLS
RSA protected key exchange
plain key exchange
no bulk cipher (plaintext)
RC4 bulk cipher
no MAC integrity check
MD5 MAC integrity check
no session cache
shared-memory based session cache
idealized session cache (always hits)
no pseudo-random number generation (also: NULL, noMAC)
no bulk data marshaling (plaintext written directly to the network)
simpliﬁed TLS session resume (eliminates one round-trip)
all messages of correct size, but zero data
885
610
PIII-500(cid:0) Mhz
PIII-900(cid:0) Mhz
317
259
178
149
1000
900
800
700
600
500
400
300
200
100
0
447
456
464
326
295
301
285
301
309
494
334
194
172
175
95
48
824
755
566
579
544
509
380
387
Apache+TLS(cid:0)
Apache+TLS(cid:0)AXL300
Apache
PKX,(cid:0)N ULL,(cid:0)no M A C,(cid:0)no(cid:0)cache
R SA,(cid:0)R C4,(cid:0)no M A C,(cid:0)sh mcache
PKX,(cid:0)N ULL,(cid:0)no M A C,(cid:0)perfect(cid:0)cache
PKX,(cid:0)R C4,(cid:0)M D5,(cid:0)sh m cache
R SA,(cid:0)R C4,(cid:0)M D5,(cid:0)no(cid:0)cache
PKX,(cid:0)N ULL,(cid:0)no M A C,(cid:0)sh m(cid:0)cache
R SA,(cid:0)N ULL,(cid:0)M D5,(cid:0)sh mcache
PKX,(cid:0)(cid:0)no(cid:0)rando m ness,(cid:0)perfect(cid:0)cache
PKX,(cid:0)(cid:0)no(cid:0)rando m ness,(cid:0)perfect(cid:0)cache,(cid:0)plain
PKX,(cid:0)(cid:0)no(cid:0)rando m ness,(cid:0)perfect(cid:0)cache,(cid:0)plain,(cid:0)fast(cid:0)resu m e
Skeleton(cid:0)TLS
Skeleton(cid:0)TLS,(cid:0)fast(cid:0)resu m e
Figure 2. Throughput for CS trace and different server conﬁgurations, on 500MHz and 933MHz servers.
and the Apache TLS server using an AXL300 RSA ac-
celerator (Apache+TLS AXL300).
The center cluster of bar graphs shows results obtained
with various experimental TLS conﬁgurations, where ba-
sic primitives within the TLS protocol were replaced with
no-ops. Each conﬁguration is labeled to indicate the key
exchange method, bulk encryption algorithm, message au-
thentication code, and caching strategy used. Rather than
measuring all possible variations, we measured the conﬁg-
uration where all attributes were replaced by their no-op
alternatives, followed by conﬁgurations where each oper-
ation was enabled individually. We also measured a few
additional conﬁgurations discussed below. For instance,
we measured “PKX, RC4, MD5, shm cache,” a conﬁgu-
ration where all RSA operations have been replaced with
no-ops, but other operations ran normally, to expose the
performance limits of RSA acceleration techniques.
The right cluster of bar graphs shows measurements of
TLS conﬁgurations where non crypto-related TLS func-
tions were removed and the session resume protocols was
simpliﬁed. These measurements allow us to understand
the costs of the remaining operations in TLS session setup
and data exchange.
Additionally, we wish to estimate the relative costs of
each operation performed by the TLS web server. To do
this, we take advantage of Amdahl’s Law:
Speedup
1
fractionenhanced
 1
fractionenhanced
speedupenhanced

For each TLS processing component, we have simu-
lated inﬁnite or almost inﬁnite speedup, either by remov-
ing the component (e.g., for the key exchange method,
stream cipher and message authentication code), or by re-
placing the component with a much cheaper alternative
(e.g., the “perfect” cache and the predicted randomness).
Thus, Amdahl’s Law can be simpliﬁed as follows:
Speedup
1
1
fractionenhanced
Since we measured speedups experimentally, we can es-
timate the cost of individual operations by solving this
equation for fractionenhanced. The results of these calcu-
lations are shown in Figure 3.
In order to directly determine the relative costs of RSA,
RC4, and MD5, we replaced each stage individually with
a no-op and measured the corresponding server through-
put. Other TLS components, such as the TLS session
cache, the randomness processing and TLS packet mar-
shaling cannot be replaced without also effecting other
TLS components. For these cases, we were forced to run
some experiments with multiple TLS stages simultane-
ously disabled. We still estimate the relative cost of each
component using Amdahl’s Law.
4.1. Impact of TLS on server performance
The Apache server, without TLS enabled, achieves be-
tween 610 hits/sec and 885 hits/sec with the CS trace, and
between 1370 hits/sec and 2200 hits/sec with the Amazon
trace. The difference in throughput for the two workloads
is due to the increased average ﬁle size: 46KB for the
CS trace and only 7KB for the Amazon trace as well as
the increased working set size. Increasing the CPU speed
from 500MHz to 933MHz leads to a substantial increase
in throughput in each case.
Apache TLS without the AXL300 served between 149
hits/sec and 259 hits/sec for the CS trace, and between
147 hits/sec and 261 hits/sec for the Amazon trace. This
conﬁrms that TLS incurs a substantial cost and reduces
the throughput by 70 to 89% relative to the insecure
Apache. Apache TLS with the AXL300 served between
178 hits/sec and 317 hits/sec for the CS trace, and be-
tween 300 hits/sec and 525 hits/sec for the Amazon trace.
This shows that, with the use of the AXL300 board, the
throughput loss is now only 64 to 77% relative to the in-
secure Apache.
4.2. Impact of increased CPU speed
Consider the impact of the available server CPU cycles
on the relative cost of TLS. In the conﬁgurations with a
complete, functional TLS implementation, the 933MHz
Pentium III achieves a sizeable increase in throughput
(45-60%) relative to the 500MHz Pentium III. We con-
clude that the performance of the various TLS processing
steps scales well with increased availability of CPU cy-
cles.
In the long run, this implies that the performance
loss associated with the use of TLS should diminish as
CPUs get faster. Of course, faster CPUs can potentially be
used to attack cryptosystems more effectively. As a result,
stronger, and potentially more CPU intensive, cryptogra-
phy may become necessary in the future as well.
4.3. Effectiveness of accelerator hardware
The use of the AXL300 accelerator yields a noticeable
throughput improvement with the CS trace (19 to 22%)
relative to the normal TLS Apache, and a substantial gain
with the Amazon trace (101 to 107%) relative to the nor-
mal TLS Apache. The reason that the Amazon workload
beneﬁts more from the accelerator is that the average ses-
sion is shorter. As a result, more requests in the Ama-
zon trace require the full TLS handshake with its corre-
sponding RSA operations. The CS trace, with its longer
sessions, beneﬁts from the session cache, limiting the ef-
fectiveness of accelerated RSA operations. Another con-
tributing factor in the performance difference is the aver-
age ﬁle size. In the CS trace, with ﬁles averaging 46KB,
the server spends proportionally more time transmitting
 

 

other TLS
8%
non-TLS
10%
TLS packet 
marshaling
1%
random numbers
5%
TLS session 
cache 
1%
MD5
9%
non-TLS
29%
RSA
58%
other TLS
10%
TLS packet 
marshaling
5%
RC4
8%
random numbers
4%
RSA
23%
RC4
15%
MD5
13%
TLS session 
cache 
1%
a) Amazon trace for PIII 500MHz
b) CS trace for PIII 500MHz
other TLS
9%
non-TLS
12%
TLS packet 
marshaling
2%
random numbers
4%
TLS session 
cache 
1%
MD5
8%
RC4
7%
non-TLS
32%
RSA
20%
RSA
57%
other TLS
11%
TLS packet 
marshaling
7%
RC4
14%
MD5
12%
TLS session 
cache 
1%
random numbers
3%
c) Amazon trace for PIII 933MHz
d) CS trace for PIII 933MHz
Figure 3. Relative costs of TLS processing stages for Amazon trace, CS trace, and for 500MHz and
933MHz server conﬁgurations. The sections labeled “Other TLS” refer to the remaining portions of the