      DWORD cxPatRealized; //so.sizlBitmap.cy` 的位置，也就是说函数在为 `ENGBRUSH` 对象的成员域 `iFormat`
赋值时，实际上覆盖了下一内存块中 `SURFOBJ` 对象的 `sizlBitmap.cy` 成员域。据前面的分析可知，成员域 `iFormat` 被赋值为
`0x6` 数值。
借用这一特性，我们既可以通过缓冲区溢出覆盖使位图表面对象的成员域 `SURFACE->so.sizlBitmap.cy`
较小的初值增大以利用更下一内存页中的位图表面对象，也可以通过在同一内存页中安排并利用两个内核对象的方式来实现利用目的。
如果选择在同一内存页中使用两个内核对象，则需在利用时将前面分配的位图占位对象先行释放，再分配合适大小和类型的内核对象填充区域以进行利用。释放原位图占位对象并分配新的位图利用对象的验证代码如下：
    for (LONG i = 0; i so.sizlBitmap.cy` 被覆盖成原应写入
`ENGBRUSH` 对象的成员域 `iFormat` 的值。成员域 `iFormat`
存储用来指示目标实现笔刷的像素位格式的枚举值，在当前的系统设置中，数值 `6` 表示 `32` 位每像素点（`32BPP`）的枚举值。
依据这些条件，我们可以在创建前一个位图对象时，将位图的高度（`sizlBitmap.cy`）设置为小于 `6`
的数值，这样一来，在缓冲区溢出覆盖发生后，成员域 `sizlBitmap.cy` 将被覆盖为
`6`，当前位图将可以操作超出其像素数据区域范围的内存，即下一内存页中相同位置的位图表面对象的成员区域。
在扩大前一个位图的内存访问范围之后，使用系统 API `SetBitmapBits` 通过前一个位图对象将后一个位图 `SURFACE` 对象的成员域
`SURFACE->so.pvScan0` 篡改为任意地址，随后操作后一个位图对象时，函数访问的像素数据内存区域将是修改后的 `pvScan0`
指向的内存区域。
这种利用方式的方法与[《从 CVE-2016-0165 说起：分析、利用和检测（中）》](https://paper.seebug.org/580/ "《从
CVE-2016-0165 说起：分析、利用和检测（中）》")分析中使用到的技术类似，具体可参考这篇文章，在这里不再赘述。
* * *
###### 其二：利用调色板对象
通过使用调色板 `PALETTE` 对象同样可以实现该漏洞的利用。在内核中 GDI 子系统通过调色板将 `32` 位颜色索引映射到 `24` 位 RGB
颜色值，这是 GDI 使用调色板的方法。调色板实体通过 `PALETTE` 类对象进行管理；相应地，对象 `PALETTE`
与对应的调色板列表数据区域相关联，列表中的每个表项定义对应 `24` 位 RGB 颜色值等信息。
与 GDI 对象类 `SURFACE` 类似地，调色板 `PALETTE` 类作为内核 GDI 对象类，它的基类同样是 `BASEOBJECT`
结构体。其定义如下：
    class PALETTE : public OBJECT // : public BASEOBJECT
    {
    public:
        FLONG        flPal;             //so.sizlBitmap.cy` 的值以扩大访问范围之后，通过篡改当前 `PALETTE`
对象的成员域 `cEntries` 或 `apalColor` 的值，即可获得相对 / 任意内存地址读写的能力。
采用这种利用方式需要在漏洞触发之前进行一些预先的准备工作：将先前分配的位图占位对象释放，再在原来的起始位置分配较小的位图表面对象，并将适当大小的调色板
`PALETTE` 对象分配在较小位图表面对象的后面，恰好填充内存页中位图表面对象和窗口类菜单名称字符串缓冲区之间的空间。由于大部分目标内存页末尾的
`0x18`
字节内存块被窗口类菜单名称字符串占据，那么在漏洞触发之前需要对注册的窗口类解除注册，以释放这些占据空间的字符串缓冲区。然而一部分字符串缓冲区被用来填充无关的
`0x18` 字节空隙，以防在触发漏洞时目标 `ENGBRUSH`
对象被分配在这些无关空隙中导致利用失败，因此采取折中方案，在利用之前只释放中间一部分窗口类对象，为漏洞利用预留充足的内存空隙；剩余的窗口类对象在漏洞触发之后释放。
_利用调色板对象的内存布局_
分配调色板对象通过在用户进程中调用 `gdi32.dll` 模块的导出函数 `CreatePalette` 来实现。
    HPALETTE CreatePalette(
      _In_ const LOGPALETTE *lplgpl
    );
_函数 CreatePalette 的定义_
函数 `CreatePalette` 的唯一参数 `lplgpl` 是指向 `LOGPALETTE` 类型结构体对象的指针。结构体定义如下：
    typedef struct tagLOGPALETTE {
      WORD         palVersion;
      WORD         palNumEntries;
      PALETTEENTRY palPalEntry[1];
    } LOGPALETTE;
_结构体 LOGPALETTE 的定义_
结构体 `LOGPALETTE` 的成员域 `palPalEntry` 为可变长度的 `PALETTEENTRY`
结构体类型数组，数组元素个数由结构体成员域 `palNumEntries`
控制。通过对参数指向结构体对象的成员域设置特定的元素个数，可控制在内核中分配的调色板 `PALETTE` 对象的大小。
与其他类型的 GDI 内核对象的创建类似地，创建 `PALETTE` 对象具体地在对应的内存对象类成员函数
`PALMEMOBJ::bCreatePalette` 中实现。
      v9 = 0x58;
      if ( a2 == 1 )
      {
        v9 = 4 * a3 + 0x58;
        a8 &= 0x102F00u;
        if ( !a3 )
          return 0;
        goto LABEL_18;
      }
    LABEL_18:
      v11 = (unsigned __int32)AllocateObject(v9, 8, 0);
      *(_DWORD *)this = v11;
_函数 PALMEMOBJ::bCreatePalette 代码片段_
函数 `PALMEMOBJ::bCreatePalette` 根据参数 `a2` 的数值设定对应的对象分配大小。由于在上级函数调用时为 `a2` 参数传值为
`1`，因此对象分配大小被设置为 `4 * a3 + 0x58` 字节。参数 `a3` 的值源于用户进程为参数 `lplgpl` 指向对象的成员域
`palNumEntries` 设置的值，而 `0x58` 字节是 `PALETTE` 类的大小。根据参数 `a3` 指定的数目，函数将目标调色板
`PALETTE` 对象的成员数组 `apalColorTable` 扩展为预期的元素个数并调用函数 `AllocateObject`
分配足够的缓冲区空间。
分配调色板对象的验证代码如下：
    PLOGPALETTE pal = NULL;
    pal = (PLOGPALETTE)malloc(sizeof(LOGPALETTE) + 0x64 * sizeof(PALETTEENTRY));
    pal->palVersion = 0x300;
    pal->palNumEntries = 0x64; // 0x64*4+0x58+8=0x1f0
    for (LONG i = 0; i  dc esp l4
    94823b80  000001e8 00000008 00000000 07464b54  ............TKF.
    kd> p
    win32k!PALMEMOBJ::bCreatePalette+0xde: