## 编码规范越使用越高效除了上面我们说道的好处，编码规范还有一个特点，就是越使用越高效。比如我们小时候都背诵过乘法口诀，如果我问你，3 乘 3 得几？我相信，你立即就会告诉我，答案是 9。不管这时候你是在开车、还是在走路；是在吃饭，还是在玩游戏。如果我问你，13 乘以 23，结果是多少？除非你经过非常特殊的训练，你不会立即就有答案，甚至你走路的时候，不停下脚步，就算不出这个结果。如果我问一个还没学过乘法的小孩子呢？ 3 乘 3的算术，对于小孩子，也许是一个不小的难题。对于背诵过乘法口诀的我们来说，3 乘 3的算术根本就不需要计算，我们的大脑可以快速地、毫不费力地、无意识地处理这样的问题。这种系统是我们思维的快系统。 快系统勤快、省力，我们喜欢使用它。而对于 13 乘以 23的算术，我们的大脑需要耗费脑力，只有集中注意力，才能运算出来。这种系统是我们思维的慢系统。慢系统懒惰、费劲，我们不愿意使用它。快系统和慢系统分工写作，快系统搞不定的事情，就需要慢系统接管。快系统处理简单、固定的模式，而慢系统出面解决异常状况和复杂问题。比如上面苹果公司安全漏洞的那个例子，如果我们像乘法表一样熟练使用编码规范，一旦遇到没有使用大括号的语句，我们立即就会非常警觉。因为，不使用大括号的编码方式不符合我们习以为常的惯例，快系统立即就能判别出异常状况，然后交给慢系统做进一步的思考。如果我们没有养成编码规范的习惯，我们的快系统就会无视这样的状况，错失挽救的机会。所以，我们要尽早地使用编码规范，尽快地培养对代码风格的敏感度。良好的习惯越早形成，我们的生活越轻松。
## 小结对于编码规范这件事，我特别想和你分享盐野七生在《罗马人的故事》这套书里的一句话："**一件东西，无论其实用性多强，终究比不上让人心情愉悦更为实用。**"严格地遵守编码规范，可以使我们的工作更简单，更轻松，更愉快。记住，**优秀的代码不光是给自己看的，也是给别人看的，而且首先是给别人看的**。你有什么编码规范的故事和大家分享吗？欢迎你在留言区写写自己的想法，我们可以进一步讨论。也欢迎你把今天的文章分享给跟你协作的同学，看看编码规范能不能让你们之间的合作更轻松愉快。
## 一起来动手下面的这段代码，我们前面用过一次，我稍微做了点修改。我们这次重点来看编码的规范，有哪些地方你看着不顺眼，你会怎么改进？    package com.example; import java.util.Collections;import java.util.List;import javax.net.ssl.SNIServerName; class ServerNameSpec {    final List serverNames;     ServerNameSpec(List serverNames) {        this.serverNames = Collections.unmodifiableList(serverNames);    }     public String toString() {        if (serverNames == null || serverNames.isEmpty())        return "";                StringBuilder builder = new StringBuilder(512);        serverNames.stream().map((sn) -> {            builder.append(sn.toString());            return sn;        }).forEachOrdered((_item) -> {            builder.append("\n");        });         return builder.toString();    }}你也可以把这篇文章分享给你的朋友或者同事，一起来讨论一下这道小小的练习题。![](Images/64444bae3ac90f82cb45ef5f1bc68d94.png){savepage-src="https://static001.geekbang.org/resource/image/5a/98/5a96a612403912b80de030e742e2e598.jpg"}
# 05 \| 经验总结：如何给你的代码起好名字？上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言："计算机科学只有两件难事，废弃缓存和取名字。"之所以说是戏言，因为取名字这件事无论如何都不算是高深的学问；之所以广泛流传，因为取名字真的就是一件很难的事情，而且起名字是关乎代码质量的大事。给小孩取过名字的人都知道，取个好名字有多难，又要合八字，又要算五行，还要避尊者讳。写程序给代码取名字更难，每天都要想很多名字。给孩子取名字，父母喜欢就行，给代码取名字，还要别人也喜欢。
## 为什么需要一个好名字？名字要准确地代表它背后的东西，并且还能让代码干净漂亮。不然，我们的思路就会受到干扰，影响我们的思考和心情。比如说，对于答案只有是与非两个选择的时候，我们通常使用布尔类型（boolean）。所以，取名字的时候，我们通常需要一个表达疑问的前缀，比如是不是"is"。    public boolean isEmpty();     // String.isEmpty()但如果我们把这样的疑问前缀，使用到一个非布尔类型上，会有什么效果？    public byte[] isEmpty();你是不是觉得如鲠在喉，对于代码要干什么百思不得其解？反正，我写这个例子的时候，感觉像是吃了五百只苍蝇！名字就是沟通的方式，错误的命名很难让我们清楚地理解代码真实的意图。所以，混淆的命名很难让我们阅读和理解代码。``{=html}虽然编译器不关心命名的好坏，但是我们却可以从一个好名字中获得巨大的好处。
## 为什么需要命名规范？虽然起一个好名字的重要性不言而喻，但命名规范的选择，以及执行程度，却是一个有争议的话题。有人喜欢这种规范，有人喜欢那种规范，有人干脆认为规范都太教条，真是众口难调。此外，即使已知且明确定义了命名规范，某些组织也无法始终如一地遵守它们，从而导致不一致和混淆。如果命名规范内部不一致，任意且难以记忆，这些挑战还会加剧。所以使用一个好的命名规范是非常重要的，我们都能获得哪些好处呢？1.  为标识符提供附加的信息，赋予标识符现实意义。帮助我们理顺编码的逻辑，减少阅读和理解代码的工作量；2.  使代码审核变得更有效率，专注于更重要的问题，而不是争论语法和命名规范这类小细节，提高开发效率；3.  提高代码的清晰度、可读性以及美观程度；4.  避免不同产品之间的命名冲突。
## 有哪些常见的命名方法？尽管不同的编程环境、不同编程语言也需要沟通，但遗憾的是，到目前为止，还没有一种通用的命名方法。在不同的场景下，程序员们有着不同的偏好。我们需要阅读很多代码，多了解一些命名方法，这样我们才能更好地理解不同风格的代码。我来一一介绍下几种常见的命名方法。**1. 驼峰命名法（CamelCase）**驼峰命名法指的是使用大小写混合的格式，单词之间不使用空格隔开或者连接字符连接的命名方式。它有两种格式：大驼峰命名法（UpperCamelCase）和小驼峰命名法（lowerCamelCase）。大驼峰命名法的第一个单词以大写字母开始，其余的和小驼峰命名法相同。比如：LastName, InputStream。小驼峰命名法的第一个单词以小写字母开始，其他单词以大写字母开始，其余字母使用小写字母。比如：firstName, toString。有时候，一个名字可能有不只一种合理形式，比如缩略语（IPv6）或者异常的结构（iOS)。为了减少这种不确定性，Google 定义了以下的转换规则：1.  从正常的表达形式开始，把短语转换成 ASCII 码，并且移除单引号。    例如，"Müller's algorithm"转换为"Muellers algorithm"；2.  如果上述结果含有其他标点符号，比如连字符，在该符号处，把这个结果切分成单词形式。    如果某个单词已经是驼峰形式，也相应地切分开来。    例如，"AdWords"切分成"ad words"，"non-current assets"切分成"non    current assets"；3.  将所有字母转换为小写字母，然后将每个单词的首字母大写，这样就得到了大驼峰式命名的形式；    如果第一个单词的首字母小写，就得到了小驼峰式命名的形式；4.  将所有的单词连在一起，就是最后的标识符命名。下面的表格列出了不同例子的正确转换形式，和容易出错的转换形式（出自"Google Java Style Guide"）。![](Images/a2c0a3c3df4ff9d4892e474ceda02e24.png){savepage-src="https://static001.geekbang.org/resource/image/f2/1d/f28217dc672df8bc968eccb57ce19c1d.png"}\**2. 蛇形命名法（snake_case）**在蛇形命名法中，单词之间通过下划线"\_"连接，比如"out_of_range"。**3. 串式命名法（kebab-case）**在蛇形命名法中，单词之间通过连字符"-"连接，比如"background-color"。**4. 匈牙利命名法**在匈牙利命名法中，标识符由一个或者多个小写字母开始，这些字母用来标识标识符的类型或者用途。标识符的剩余部分，可以采取其他形式的命名法，比如大驼峰命名法。如果起始的小字母用来表示标识符的数据类型，这种命名法也被称为系统匈牙利命名法。比如：-   lAccountNum 标识一个 \_ 长整数 \_（首字母"l"，long）。-   szName 标识一个 \_ 零字符结束的字符串    \_（首字母"sz"，zero-terminated string）。如果起始的小字母用来表示标识符的实际用途，这种命名法也被称为应用匈牙利命名法。比如：-   rwPosition 标识一个 \_ 行 \_（首字母"rw"，row）。-   usName 标识一个 \_ 非安全字符串 \_（首字母"us", unsafe string）。由于在微软产品中的广泛使用，匈牙利命名法曾经是一种流行的命名形式。然而，由于这种命名会带来不必要的记忆负担和阅读障碍，导致命名规则的执行和名称的维护都很困难，微软已经抛弃了这种命名形式。由于历史的原因，还有很多代码使用这种命名形式。阅读这些代码时，你可以选择性地忽略这些表示类型或者用途的字母前缀。