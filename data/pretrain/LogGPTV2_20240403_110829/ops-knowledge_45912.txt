User: Imagine you have a library for working with some sort of XML file or configuration file. The library reads the whole file into memory and provides methods for editing the content. When you are done manipulating the content you can call a write to save the content back to file. The question is how to do this in a safe way.
Overwriting the existing file (starting to write to the original file) is obviously not safe. If the write method fails before it is done you end up with a half written file and you have lost data.
A better option would be to write to a temporary file somewhere, and when the write method has finished, you copy the temporary file to the original file.
Now, if the copy somehow fails, you still have correctly saved data in the temporary file. And if the copy succeeds, you can remove the temporary file.
On POSIX systems I guess you can use the rename system call which is an atomic operation. But how would you do this best on a Windows system? In particular, how do you handle this best using Python?
Also, is there another scheme for safely writing to files?
Assistant: The standard solution is this.

Write a new file with a similar name.  X.ext# for example.
When that file has been closed (and perhaps even read and checksummed), then you two two renames.

X.ext (the original) to X.ext~ 
X.ext# (the new one) to X.ext

(Only for the crazy paranoids) call the OS sync function to force dirty buffer writes.  

At no time is anything lost or corruptable.  The only glitch can happen during the renames.  But you haven't lost anything or corrupted anything.  The original is recoverable right up until the final rename.