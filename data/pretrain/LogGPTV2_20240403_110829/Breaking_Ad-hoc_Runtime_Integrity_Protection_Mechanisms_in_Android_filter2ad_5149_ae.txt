factor authentication scheme such as a one-time password [46, 48],
or a location-based authentication solution [40, 45]. Managing a
secret key for a cryptography algorithm is another important issue
for ﬁnancial security. A secret key hard-coded in an app or care-
lessly managed in the memory can incapacitate the cryptography
algorithm no matter how strong the algorithm is. White-box cryp-
tography technology reduces this concern by hiding the secret key
in the transformed cryptography algorithm [23]. Recent security
solutions for mobile ﬁnancial apps use the white-box cryptography
to protect user’s private information the apps hold [3,14]. While the
existing works analyze the already well-known security factors, our
work focuses on the self-defense mechanisms of mobile ﬁnancial
apps, of which a very little is known.
Android app security.
Enck et al. analyzed various Android apps and uncovered several
pervasive misuses of personal information, as well as instances of
deep penetration from advertising networks [29]. Many researchers
have examined Android interactions and identiﬁed security risks
within permission systems and communication systems [26,31,32].
Several other studies have investigated SSL/TLS security, or the
lack thereof, in Android apps [30, 33, 44]. Egele et al. studied the
misuse of cryptographic APIs, which secure data such as passwords
and personal information [27]. Chen et al. studied data leakage in
a third-party input method editor (IME) app, which can be conﬁg-
ured as a system keyboard [25]. UIPicker [42] and SUPOR [37]
are static analysis tools that automatically identify sensitive infor-
mation among input data entered via the UI. Our research analyzed
how mobile ﬁnancial apps protect themselves from attacks using
root permission or app tampering, and how we can bypass these
checks, which is a security aspect missed out in other research.
There has been much research on Android security that adopts
taint tracking methodologies; taint tracking taints important infor-
mation and tracks it to trace sensitive data or analyze malware
[21, 28, 38, 51]. However, this approach is not effective for analyz-
ing self-defense mechanisms, because it cannot locate an environ-
ment investigation and an execution termination at once. A com-
mon ancestor normally uses the return value of the environment in-
formation provider as a condition for an if-else statement, thus the
taint tag is not propagated through the statement. To overcome this
limitation, the taint tracking system should support the control ﬂow
propagation. However, according to the TaintDroid research [28],
developing such a mechanism for Android apps is difﬁcult because
Dalvik bytecode does not maintain the branch structure. Therefore,
we conclude to trace the control ﬂow of an app by enhancing the
Android platform instead of using the taint tracking methodology.
Tool for tracking control ﬂow.
Our research also contributes to the creation of a tool to track the
control ﬂow of Android apps. Cao et al. [24] propose EdgeMiner to
detect indirect control ﬂow transitions, such as registering and exe-
cuting callback methods, in static analysis. However, EdgeMiner’s
limitation is that it cannot use information which can be acquired
only during runtime. Compac [50] and the Method Trace function
in Android Monitor [34] both present an idea for modifying the
Dalvik VM to record method calls, but they do not consider indi-
rect control ﬂows. MERCIDroid overcomes their deﬁciencies by
tracking the indirect relationships between threads or components
using the runtime information.
8. CONCLUSION
In this paper, we presented an analysis of 76 Android ﬁnancial
apps to investigate their self-defense mechanisms, the extra secu-
rity measures that aim to protect the apps. To analyze self-defense
mechanisms, we built MERCIDroid, an enhanced Android plat-
form that traces the control ﬂow within a thread, across threads,
and across Android components. MERCIDroid constructs a mini-
mal control ﬂow graph that joins an environment investigation and
an execution termination. Using MERCIDroid, we have shown that
we can locate self-defense mechanisms efﬁciently. Our analysis
of the self-defense mechanisms shows that apps use various tech-
niques to detect that the execution environment has been tampered
with. However, the mechanisms are ineffective because they rely
on only a few characteristics of the rooted platform and tampered
apps and are executed inside the apps. Finally, we have shown that
self-defense mechanisms are easy to bypass by rewriting a small
portion of app code in many cases. Thus, self-defense mechanisms
employed in Android ﬁnancial apps are not effective. Our work
calls for security mechanisms to ensure platform and app integrity
for Android ﬁnancial apps.
Responsible Disclosure
On October 31, 2016 we shared our results (non-anonymized), in-
cluding all the technical details, with the organizations that oversee
the security issues of software developed in the Republic of Korea.
To protect affected apps and libraries, we anonymize their names.
Acknowledgment
We thank our shepherd Yubin Xia and the anonymous reviewers
for their feedback on this work. This work was supported by BK21
Plus for Pioneers in Innovative Computing (Dept. of Computer Sci-
ence and Engineering, SNU) funded by National Research Founda-
tion of Korea(NRF) (21A20151113068).
9. REFERENCES
[1] android - Determine if running on a rooted device -
StackOverﬂow. http://stackoverﬂow.com/questions/1101380/
determine-if-running-on-a-rooted-device.
[2] Android Developers. https://developer.android.com.
[3] App security for banking & payment apps - Promon
SHIELD.
https://promon.co/industries/app-security-banking-payment/.
[4] Application Fundamentals | Android Developers.
https://developer.android.com/guide/components/
fundamentals.html.
[5] ART and Dalvik | Android Open Source Project.
https://source.android.com/devices/tech/dalvik/.
189[6] Checking Device Compatibility with SafetyNet | Android
Developers. http://developer.android.com/intl/ko/training/
safetynet/index.html.
[7] Dashboard | Android Developers. http://developer.android.
com/intl/ko/about/dashboards/index.html.
[8] FRB: CM: 2016 Introduction. http://www.federalreserve.
gov/econresdata/mobile-devices/2016-Introduction.htm.
[9] Graphviz | Graphviz - Graph Visualization Software.
http://www.graphviz.org/.
[10] How secure the mobile payments are? https://storify.com/
williamjohn005/how-secure-the-mobile-payments-are.
[11] IDA Debugger. https://www.hex-rays.com/.
[12] Java Decompiler. http://jd.benow.ca/.
[13] Linux Manual Page. http://man7.org/.
[14] Mobile Banking Security, Internet Banking App Security.
https://www.whitecryption.com/mobile-banking/.
[15] Shrink Your Code and Resources | Android Studio.
https://developer.android.com/studio/build/shrink-code.html.
[16] smali - An assembler/disassembler for Android’s dex format.
https://github.com/JesusFreke/smali.
[17] Trusted Computing Group | Open Standards for Security
Technology. http://www.trustedcomputinggroup.org/.
[18] U-Boot Veriﬁed Boot. http://git.denx.de/cgi-bin/gitweb.cgi?
p=u-boot.git;a=blob;f=doc/uImage.FIT/veriﬁed-boot.txt.
[19] Veriﬁed Boot - The Chromium Projects.
http://www.chromium.org/chromium-os/
chromiumos-design-docs/veriﬁed-boot.
[20] Veriﬁed Boot | Android Open Source Project.
https://source.android.com/security/veriﬁedboot/.
[21] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise
context, ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint
analysis for android apps. In ACM SIGPLAN, pages
259–269, 2014.
[22] N. Bose. Retailer-backed mobile wallet to rival Apple Pay set
for test. http://www.reuters.com/article/2015/08/12/
us-currentc-mobile-payment-idUSKCN0QH1RY20150812.
[23] W. Brecht. White-box cryptography: hiding keys in software.
NAGRA Kudelski Group, 2012.
[24] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel,
G. Vigna, and Y. Chen. EdgeMiner: Automatically Detecting
Implicit Control Flow Transitions through the Android
Framework. In ISOC NDSS, 2015.
[25] J. Chen, H. Chen, E. Bauman, Z. Lin, B. Zang, and H. Guan.
You Shouldn’t Collect My Secrets: Thwarting Sensitive
Keystroke Leakage in Mobile IME Apps. In USENIX
Security, 2015.
[26] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in Android. In
ACM MobiSys, pages 239–252, 2011.
[27] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An
empirical study of cryptographic misuse in android
applications. In ACM CCS, pages 73–84, 2013.
[28] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P.
Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An
Information-Flow Tracking System for Realtime Privacy
Monitoring on Smartphones. ACM TOCS, 32(2):5, 2014.
[29] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A
Study of Android Application Security. In USENIX Security,
volume 2, page 2, 2011.
[30] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner,
B. Freisleben, and M. Smith. Why Eve and Mallory love
Android: An analysis of Android SSL (in) security. In ACM
CCS, pages 50–61, 2012.
[31] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.
Android permissions demystiﬁed. In ACM CCS, pages
627–638, 2011.
[32] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission Re-Delegation: Attacks and Defenses. In
USENIX Security, 2011.
[33] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov. The most dangerous code in the world:
validating SSL certiﬁcates in non-browser software. In ACM
CCS, pages 38–49, 2012.
[34] Google. Method Tracer | Android Studio. https:
//developer.android.com/studio/proﬁle/am-methodtrace.html.
[35] E. Gruber. Android Root Detection Techniques.
https://blog.netspi.com/android-root-detection-techniques/.
[36] A. Harris, S. Goodman, and P. Traynor. Privacy and security
concerns associated with mobile money applications in
Africa. Wash. JL Tech. & Arts, 8:245, 2012.
[37] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and
G. Jiang. SUPOR: Precise and Scalable Sensitive User Input
Detection for Android Apps. In USENIX Security, 2015.
[38] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer.
Android taint ﬂow analysis for app sets. In ACM SIGPLAN,
pages 1–6, 2014.
[39] J. Lee, L. Bauer, and M. L. Mazurek. The Effectiveness of
Security Images in Internet Banking. Internet Computing,
IEEE, 19(1):54–62, 2015.
[40] C. Marforio, N. Karapanos, C. Soriente, K. Kostiainen, and
S. Capkun. Smartphones as practical and secure location
veriﬁcation tokens for payments. In ISOC NDSS, 2014.
[41] C. Mulliner, W. Robertson, and E. Kirda. VirtualSwindle: an
automated attack against in-app billing on android. In ACM
ASIA CCS, pages 459–470, 2014.
[42] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang.
UIPicker: User-Input Privacy Identiﬁcation in Mobile
Applications. In USENIX Security, 2015.
[43] M. Nauman, S. Khan, X. Zhang, and J.-P. Seifert. Beyond
kernel-level integrity measurement: enabling remote
attestation for the android platform. In Trust and Trustworthy
Computing, pages 1–15. Springer, 2010.
[44] L. Onwuzurike and E. De Cristofaro. Danger is my middle
name: experimenting with ssl vulnerabilities in android apps.
In ACM WiSec, page 15. ACM, 2015.
[45] F. S. Park, C. Gangakhedkar, and P. Traynor. Leveraging
cellular infrastructure to improve fraud prevention. In IEEE
ACSAC, pages 350–359, 2009.
[46] PayPal. PayPal Security Key. https://www.paypal.com/
webapps/mpp/security/security-protections.
[47] B. Reaves, N. Scaife, A. Bates, P. Traynor, and K. Butler.
Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless
Banking Applications in the Developing World. In USENIX
Security, 2015.
[48] RSA. RSA SecurID.
http://www.emc.com/security/rsa-securid/index.htm.
[49] P. Stirparo, I. N. Fovino, M. Taddeo, and I. Kounelis.
In-memory credentials robbery on android phones. In IEEE
WorldCIS, pages 88–93, 2013.
[50] Y. Wang, S. Hariharan, C. Zhao, J. Liu, and W. Du. Compac:
190Enforce component-level access control in Android. In ACM
CODASPY, pages 25–36, 2014.
[51] L.-K. Yan and H. Yin. DroidScope: Seamlessly
Reconstructing the OS and Dalvik Semantic Views for
Dynamic Android Malware Analysis. In USENIX Security,
pages 569–584, 2012.
[52] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In IEEE Security and
Privacy (Oakland), pages 95–109, 2012.
APPENDIX
A. LIST OF INDIRECT CALLER–CALLEE
RELATIONSHIPS
Figure 5: Indirect caller–callee relationships.
Figure 5 illustrates many types of indirect caller–callee relation-
ships that we need to track. The ﬁrst three cases in the ﬁgure
correspond to typical call graphs representing interactions between
threads. The last three cases show communications between An-
droid components (Activity, BroadcastReceiver, Service). Those
relationships are not connected by direct method calls because the
Android system mediates the communication.
B. SDMGRAPH CONSTRUCTION PRO-
CESS WITH AN EXAMPLE
In this section, we describe the SDMGraph construction process
in detail. To ﬁnd the common ancestor, the call graph generator
described in Section 3.2.2 ﬁrst recursively checks the environment
information provider(s) that are ﬂagged at runtime and their ances-
tors. Then, it tracks the ancestors of the execution terminator, until
the generator ﬁnds the one that has been already ﬂagged. The ﬁrst
ﬂagged ancestor node encountered during this backtracking step
from the execution terminator is the closest common ancestor. It
then constructs this SDMGraph using graphviz [9].
it
the script runs the following steps.
Figure 6 shows an example SDMGraph of a device root-
ing check performed by AppZ. The app uses Process-
Manager.exec() as an environment
information provider
and AlertDialog$Builder.setMessage() as an execu-
To ﬁnd the common ancestor of the two
tion terminator.
method calls,
it
checks ProcessManager.exec(), already ﬂagged at run-
time, and its ancestors (Figure 6(a)).
tracks the
ancestors of AlertDialog$Builder.setMessage() (Fig-
ure 6(b)).
it constructs a graph in which the root
node is MainActivity$1$1.run(), the ﬁrst ﬂagged ances-
tor node. By considering methods only under the common
ancestor, MainActivity$1$1.run(), we can identify the
relationship between the environment information provider and
the execution terminator. As shown in the ﬁgure, the Interac-
tion ID connects Handler.enqueueMessage() and Han-
dler.dispatchMessage() (Figure 6(c)).
Second,
Finally,
First,
C. FLOWCHARTS
FOR
BYPASSING
SELF-DEFENSE MECHANISMS
Figures 7 and 8 show ﬂowcharts for bypassing device rooting
checks and app integrity checks. We constructed the ﬂowcharts
based on our sample data and our trial and error experience. We
ﬁrst try an easier technique to bypass an identiﬁed self-defense
mechanism. If the technique fails, we progressively try more dif-
ﬁcult techniques. In each step, we rewrite the app using the tech-
niques described in Section 4.2. If we succeed in bypassing a self-
defense mechanism, we place the app in a corresponding success
group.
Figure 7 shows the strategies used to bypass device root-
ing checks. We ﬁrst identify whether the marked method is
an Android API or a native method.
If the method is an
Android API, we modify the return value or the argument
of the method (R_Group_API). Otherwise, we ﬁx the return
value of the native method (R_Group_Native_Predictable_Return).
If both fail, we patch some bytes
in a native library
(R_Group_Native_Unpredictable_Return).
Figure 8 shows the steps that must be followed to bypass app
integrity checks. Contrary to the device rooting check, when the
marked method is an Android API, we ﬁrst attempt to ﬁx its
caller’s return value before modifying the API’s argument or re-
turn value. This is because the Android APIs used by app in-
tegrity checks handle an APK ﬁle path or an app’s signature (see
Table 2). These values are app-speciﬁc, so we should gener-
ate the values for the unmodiﬁed apps to modify the values.
In
many cases, predicting and ﬁxing the caller’s return value is easier
than handling an APK ﬁle path or an app’s signature, so we ﬁrst
try the prediction. When the marked method is a native method,
we try to change its declaration to a Java method that returns a
ﬁxed value (I_Group_Predictable_Return). When we are unable
to ﬁx the return value of the method, we modify the app’s signa-
ture (I_Group_Signature) or APK ﬁle path (I_Group_APK_Path,
I_Group_APK_Path_Context) to an unmodiﬁed app’s signature or
APK ﬁle path.
ActivityonCreate()ActivityperformCreate()InstrumentationcallActivityOnCreate()ActivityThreadperformLaunchActivity()ContextstartActivity()BroadcastReceiveronReceive()HandlerhandleCallBack()HandlerdispatchMessage()InnerReceiverperformReceive()ContextsendBroadcast()ServiceonStart()ServiceonStartCommand()ActivityThreadhandleServiceArgs()ContextstartService()(d) Launch a new activity(e) Send a broadcast message(f) Start a new serviceThreadrun()Threadstart()HandlerhandleMessage()HandlerdispatchMessage()HandlerenqueueMessage()HandlersendMessage()AsyncTaskdoInBackground()WorkerRunnablecall()AsyncTaskexecuteOnExecutor()AsyncTaskexecute()(a) Start a new thread(b) Communicate with another thread(c) Execute a new task in the backgroundThreadMessageAsyncTaskIntentIntentIntentMessage191Figure 6: An SDMGraph of the device rooting check of AppZ. We omitted, simpliﬁed, and renamed the methods.
Figure 7: A ﬂowchart for bypassing device rooting checks.
Figure 8: A ﬂowchart for bypassing app integrity checks.
ProcessManagerexec([Ljava/lang/String;…)Ljava/lang/Process;RootCheckerrootChecker()ZMainActivity$1$1run()VThread 1 MainHandlersendMessageDelayed(Landroid/os/Message;J)ZThread 13 RunnableHandlerdispatchMessage(Landroid/os/Message;)VHandlerenqueueMessage(Landroid/os/MessageQueue;Landroid/os/Message;J)ZMainActivity$1handleMessage(Landroid/os/Message;)VMainActivitystartAlertDialog(Ljava/lang/String;)VAlertDialog$BuildersetMessage(Ljava/lang/CharSequence;)Landroid/app/AlertDialog$Builder;AlertDialog$Builder(Landroid/content/Context;)V(c) Interation ID 1499: Environment Information Provider: Execution Terminator: Indirect Relationship: Direct Relationship(a)(a)(a)(b)(b)(b)(b)(b)(b)(b)Start bypassing a device rooting checkWhat kind of method does it belong to?Change the method to a Java method that returns a ﬁxed value.Modify the return value or the argument of the Android APIBypass successR_Group_APIBypassed?Modify the native library.Bypass successR_Group_Native_Preditable_ReturnBypass success R_Group_Native_Unpredictable_ReturnYesNoNative methodAndroid APIBypass successI_Group_Predictable_ReturnBypassed?How to check the integrity?Modify its caller method to return a constant valueWhat kind of method does it belong to?Change the method to a Java method that return a constant value.Start bypassing an app integrity checkHow to get the APK ﬁle pathRewrite Signature.hashCode() to return the app’s original signature.Change the static path to the path of the unmodiﬁed APK ﬁleMake and use FakeContext which returns the path of the unmodiﬁed APK ﬁle.Overwrite the path which the API returned with the path of the unmodiﬁed APK ﬁleBypass success I_Group_APK_Path_ContextBypass successI_Group_APK_PathBypass successI_Group_SignatureUse the APK ﬁle pathNative methodAndroid APIYesNoUse the app signatureA native method retrieves the path through ContextThe app has the hard coded pathA java method retrieves the path through Android API192