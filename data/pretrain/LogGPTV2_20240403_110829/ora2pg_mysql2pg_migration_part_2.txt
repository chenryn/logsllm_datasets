Please help!!!
●
– First stop to produce code with (+) notation it is
recommended by Oracle itself since Oracle 9i.
Automatic conversion of (+)
I can't migrate without automation, it will takes
●
months!
Ok, keep calm, Toad is your friend !
Does Oracle SQL Developer too ?
Open the TOAD Query Builder
then load your SQL code
Oracle outer join syntax
and the ANSI-compliant Join
Refactor → Convert to ANSI Join Syntax
DECODE
This is an Oracle specific function :
●
– DECODE (expression, search, result [, search, result]... [, default])
– CASE WHEN expr = search THEN result ... ELSE default END
You have tons of functions and queries using it!
●
– Use SQL standard CASE clause or why not the Orafce decode()
function
My developers still use it!
●
– Oracle recommend the use of CASE since 9i
Please help!!!
●
– Ora2Pg can only replace simple form of the function up to 10
parameters
– But remember your friend, TOAD !
Refactor → Convert Decode to Case
Decode converted to Case
Oracle Spatial/Locator type
CREATE TABLE cola_markets (
mkt_id NUMBER PRIMARY KEY,
name VARCHAR2(32),
shape SDO_GEOMETRY
);
Type SDO_GEOMETRY:
SDO_GEOMETRY(
2001, – Indicates the type of the geometry, here a point
NULL, -- Identify a coordinate system (SRID: spatial reference system)
NULL, -- SDO_POINT attributes X, Y, and Z, all of type NUMBER
SDO_ELEM_INFO_ARRAY(1,1,1), -- Element informations array
SDO_ORDINATE_ARRAY(10, 5) -- Coordinates Array
)
PostGis Spatial type
Corresponding type in PostGis : GEOMETRY
●
CREATE TABLE cola_markets (
mkt_id bigint PRIMARY KEY,
name varchar(32),
shape geometry(GEOMETRY)
);
Type GEOMETRY :
●
– WKT (Well-Know Text)
Ex: 'LINESTRING(0 0, 1 1, 2 1, 2 2)'
●
– WKB (Well-Know Binary)
Ex : 010100002004000000000000000000000000000...
●
Geometry Constraints
With PostGis you can enforce the type of spatial object that
●
must be used :
CREATE TABLE stores (
id integer,
gps_position geometry(POINT),
sale_area geometry(POLYGONZ)
);
3D objects are signified with suffix Z and 4D using ZM :
●
– GEOMETRY / GEOMETRYZ / GEOMETRYZM
– POINT / POINTZ / POINTZM
– POLYGON / POLYGONZ / POLYGONZM
Default geometry
You can mixed several geometry types (points / lines /
●
polygons…) in the same column.
– shape geometry(GEOMETRY)
– shape geometry(GEOMETRY, 4326)
This correspond to the generic use of the GEOMETRY type.
●
This is the default type used by Ora2Pg.
●
SRID
SRID : Spatial reference system
●
Oracle "legacy" vs standard "EPSG"
●
– CONVERT_SRID 1
Conversion function : map_oracle_srid_to_epsg()
●
– Returns often NULL
– DEFAULT_SRID 4326
To enforce the use of a particular SRID :
●
– CONVERT_SRID 27572
Detecting geometry constraint
Ora2Pg is able to detect the geometry type of a column by
●
– Looking at the constrained type in parameters of spatial indexes
Ex : CREATE INDEX ... PARAMETERS ('sdo_indx_dims=2, layer_gtype=line');
●
– Or using a sequential scan to search distinct geometry types
AUTODETECT_SPATIAL_TYPE 1
●
When only one geometry type is found, it is applied as constraint
●
Sequential scan is only used when there's no constraint type
●
defined.
it need to be limited or the whole table will be scanned
●
– SELECT DISTINCT c.SDO_GTYPE FROM MYTABLE c WHERE
ROWNUM  1, ROWNUM=AUTODETECT_SPATIAL_TYPE
●
Inserting geometry : Oracle
A simple rectangle inserted into Oracle :
INSERT INTO cola_markets VALUES (
302, 'Rectangle',
SDO_GEOMETRY(
2003, -- 2D polygon
8307,
NULL,
SDO_ELEM_INFO_ARRAY(1,1003,3), -- a rectangle
SDO_ORDINATE_ARRAY(1,1, 5,7) -- 2 points define the rectangle
)
);
INSERT INTO cola_markets VALUES (302, 'Rectangle', GeomFromText('POLYGON
((1.0 1.0, 5.0 1.0, 5.0 7.0, 1.0 7.0, 1.0 1.0))'));
Inserting geometry : PostGis
Same rectangle inserted into PostgreSQL using WKT :
INSERT INTO cola_markets (mkt_id,name,shape) VALUES (
302,
'rectangle',
'POLYGON ((1.0 1.0, 5.0 1.0, 5.0 7.0, 1.0 7.0, 1.0 1.0))'
);
And WKB:
INSERT INTO cola_markets VALUES (302,'rectangle',
'01ea030000030000000000000000000000000000000000000000000000
00000000000000000000f03f00000000000000000000000000000000000
000000000f03f000000000000f03f0000000000000040');
Spatial data export
Ora2Pg first lookup for SRID by querying the
●
ALL_SDO_GEOM_METADATA table.
Then export data as EWKT, using COPY mode:
●
COPY cola_markets (mkt_id,name,shape) FROM STDIN;
301 polygon SRID=4326;POLYGON ((5.0 1.0, 8.0 1.0,
8.0 6.0, 5.0 7.0, 5.0 1.0))
\.
Or when using INSERT mode:
●
INSERT INTO cola_markets (mkt_id,name,shape)
VALUES (301,E'polygon',ST_GeomFromText('POLYGON
((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))',4326));
Spatial Indexes
Oracle spatial indexes
CREATE INDEX cola_spatial_idx
ON cola_markets(shape)
INDEXTYPE IS MDSYS.SPATIAL_INDEX;
PostgreSQL spatial index
CREATE INDEX cola_spatial_idx
ON cola_markets USING gist(shape);
Supported Geometries
2D and 3D geometry are exported
●
SDO_POINT
●
UNKNOWN_GEOMETRY
●
POINT
●
POLYGON
●
COLLECTION
●
MULTIPOINT
●
MULTILINE or MULTICURVE
●
MULTIPOLYGON
●
Unsupported: CIRCLE, RASTER
●
Spatial Function
Ora2Pg replace all call to SDO_* functions into PostGis ST_* functions in converted PL/SQL code
SDO_GEOM.RELATE => ST_Relate
SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT => ST_IsValidReason
SDO_GEOM.WITHIN_DISTANCE => ST_DWithin
SDO_DISTANCE => ST_Distance
SDO_BUFFER => ST_Buffer
SDO_CENTROID => ST_Centroid
SDO_UTIL.GETVERTICES => ST_DumpPoints
SDO_TRANSLATE => ST_Translate
SDO_SIMPLIFY => ST_Simplify
SDO_AREA => ST_Area
SDO_CONVEXHULL => ST_ConvexHull
SDO_DIFFERENCE => ST_Difference
SDO_INTERSECTION => ST_Intersection
SDO_LENGTH => ST_Length
SDO_POINTONSURFACE => ST_PointOnSurface
SDO_UNION => ST_Union
SDO_XOR => ST_SymDifference
The hidden part of the magic
Aka, the todo list:
●
– Use regexp only => need a real PL/SQL parser/lexer
Ora2Pg replace sometime SELECT by PERFORM wrongly
●
Replacement of complex form of code
●
– Hash and multicolumn partitioning
– Add a mechanism to handle global variables in packages
– Allow user custom function to modify data on the fly
– Allow incremental data migration
– Embedded SQL code formatter
– Parallelized creation of indexes and constraint
– ...
Tools equivalence 1/3
SQLPLUS: PSQL but much more
●
TOAD / Oracle SQL Developper: TORA (http://torasql.com/) or pgAdmin
●
EXPLAIN PLAN: EXPLAIN ANALYZE
●
ANALYZE TABLE: ANALYZE
●
Cold backup: both are file system backup
●
Hot backup: REDOLOGS = ARCHIVELOGS
●
Logical Export: exp = pg_dump
●
Logical Import: imp = pg_restore or psql
●
SQL Loader: pgLoader (http://pgloader.io/)
●
RMAN: Barman (http://www.pgbarman.org/) or Pitrery (
●
https://dalibo.github.io/pitrery/)
AUDIT TRAIL: pgAudit (https://github.com/2ndQuadrant/pgaudit)
●
Tools equivalence 2/3
Pooling / Dispatcher:
●
– PgBouncer (http://pgfoundry.org/projects/pgbouncer)
– PgPool (http://www.pgpool.net/)
Active Data Guard:
●
– PostgreSQL master / slave replication
– Slony (http://slony.info/)
Replication master / master:
●
– PostgreSQL-XC (http://sourceforge.net/projects/postgres-xc/)
– Bucardo (https://bucardo.org/)
Logical replication:
●
– PostgreSQL 9.5 / 10 ?
– Slony
Official binary packages for all these projects can be found at http://yum.postgresql.org
●
or http://apt.postgresql.org
Tools equivalence 3/3
RAC Horizontal scaling: PostgreSQL-XC – PostgreSQL-XL -
●
plProxy, pg_shard
Oracle => Postgres Plus Advanced Server
●
– Same as PostgreSQL but with proprietary code and database feature
compatibility for Oracle.
– Compatible with applications written for Oracle.
– No need to rewrite PL/SQL into PLPGSQL
– Applications written for Oracle run on Postgres Plus Advanced Server
without modification.
– http://www.enterprisedb.com/
This is not an exhaustive list of the existing tools, there's much more
●
interesting projects.
Monitoring / Audit tools
PgBadger: A fast PostgreSQL log analyzer
●
– http://dalibo.github.io/pgbadger/
PgCluu: PostgreSQL and system performances monitoring and auditing tool
●
– http://pgcluu.darold.net/
Powa: PostgreSQL Workload Analyzer. Gathers performance stats and provides real-time charts and
●
graphs to help monitor and tune your PostgreSQL servers. Similar to Oracle AWR.
– http://dalibo.github.io/powa/
PgObserver: monitor performance metrics of different PostgreSQL clusters.
●
– http://zalando.github.io/PGObserver/
OPM: Open PostgreSQL Monitoring. Gather stats, display dashboards and send warnings when something
●
goes wrong. Tend to be similar to Oracle Grid Control.
– http://opm.io/
check_postgres: script for monitoring various attributes of your database. It is designed to work with
●
Nagios, MRTG, or in standalone scripts.
– https://bucardo.org/wiki/Check_postgres
Pgwatch: monitor PostgreSQL databases and provides a fast and efficient overview of what is really going
●
on.
– http://www.cybertec.at/en/products/pgwatch-cybertec-enterprise-postgresql-monitor/
More tools at https://wiki.postgresql.org/wiki/Monitoring
●
What else ?
Other OSS tool that can help to migrate
●
– Pentaho Kettle
http://community.pentaho.com/projects/data-integration/
●
– JTS Topology Suite for spatial data import
http://www.vividsolutions.com/jts/JTSHome.htm
●
– oracle_fdw, with Oracle spatial support since 1.1.0
http://pgxn.org/dist/oracle_fdw/
●
– Orafce, Oracle's compatibility functions and packages
http://pgxn.org/dist/orafce/
●
Don't forget to migrate your SQL Server database too :-)
●
https://github.com/dalibo/sqlserver2pgsql
●
You are not alone !
Community support on Ora2Pg :
– Any PostgreSQL's forum can help
– Github for feature requests
– Github issues and bugs reports
https://github.com/darold/ora2pg
●
– Feedback / suggestion to 
Buy professional help to migrate and commercial support :
– Any PostgreSQL company near from you listed in
http://www.postgresql.org/support/professional_support/
– Support the community !
Acknowledgments
DGFiP (French Public Finance Government) for the migration cost assessment
●
sponsoring.
– http://www.impots.gouv.fr/
BRGM (French Geological and Mining Survey) for the Oracle Spatial to PostGis
●
sponsoring.
– http://www.brgm.eu/
Very specials thanks to Dominique Legendre who help me a lot on Spatial understanding
●
and testing Ora2Pg features. He is also the author of the external_file extension.
Oslandia for Spatial to PostGis specification and for they works on oracle_fdw.
●
– http://www.oslandia.com/index-en.html
Dalibo who give me time to develop Ora2Pg and opportunities to work on Oracle to
●
PostgreSQL migrations.
– http://www.dalibo.com/
And all great contributors to Ora2Pg!
●
Thanks for your attention
Question ?