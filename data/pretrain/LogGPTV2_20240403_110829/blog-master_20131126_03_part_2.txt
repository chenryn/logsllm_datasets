```  
执行计划表明这是个索引扫描, 至于扫了多少个数据块是未知的, 索引的tuples也是未知的, 已知的是cost和rows.  
```  
20181.67 = blocks*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*?  
```  
求这个问号, 可以通过更改cpu_operator_cost来得到.  
```  
digoal=# set cpu_operator_cost=2;  
SET  
digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;  
SET  
SET  
                                                                         QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------------------------------  
------------------------  
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align  (cost=348.00..25386.67 rows=5031 width=45) (actual time=0.013..5  
.785 rows=5037 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 1998999963)  
   Buffers: shared hit=5054  
 Total runtime: 6.336 ms  
(5 rows)  
```  
```  
25386.67-20181.67 = 5205 得到本例通过索引扫描的条数. 等式就变成了  
20181.67 = blocks*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205  
```  
接下来要求blocks, 也就是扫描的随机页数.  
通过调整random_page_cost得到.  
```  
digoal=# set random_page_cost = 2;  
SET  
digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;  
SET  
SET  
                                                                         QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------------------------------  
------------------------  
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align  (cost=348.00..30301.33 rows=5031 width=45) (actual time=0.013..5  
.778 rows=5037 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 1998999963)  
   Buffers: shared hit=5054  
 Total runtime: 6.331 ms  
(5 rows)  
```  
```  
30301.33-25386.67 = 4914.66  
```  
得到blocks = 4914.66.  
更新等式  :  
```  
20181.67 = 4914.66*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205  
```  
接下来要做的是通过stap统计出random_page_cost.  
```  
pg93@db-172-16-3-150-> taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1  
[root@db-172-16-3-150 ~]# sync; echo 3 > /proc/sys/vm/drop_caches  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          10009  
(1 row)  
[root@db-172-16-3-150 ~]# taskset -c 2 stap -e '  
global a  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {  
  delete a  
  println("query__start ", user_string($arg1), "pid:", pid())  
}  
probe vfs.read.return {  
  t = gettimeofday_ns() - @entry(gettimeofday_ns())  
  # if (execname() == "postgres" && devname != "N/A")  
    a[pid()] 1998999963;  
SET  
SET  
                                                                         QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------------------------------  
------------------------  
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align  (cost=0.43..5003.15 rows=5031 width=45) (actual time=0.609..1844  
.415 rows=5037 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 1998999963)  
   Buffers: shared hit=152 read=4902  
 Total runtime: 1846.683 ms  
(5 rows)  
query__start explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;pid:10009  
10009**4946**368362  
query__done explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;pid:10009  
   value |-------------------------------------------------- count  
    2048 |                                                      0  
    4096 |                                                      0  
    8192 |                                                     33  
   16384 |                                                      2  
   32768 |                                                      6  
   65536 |                                                      4  
  131072 |@@@@@@@@@@@@@@@@@@@                                1193  
  262144 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  2971  
  524288 |@@@@@@@@@@@@                                        729  
 1048576 |                                                      2  
 2097152 |                                                      5  
 4194304 |                                                      0  
 8388608 |                                                      1  
16777216 |                                                      0  
33554432 |                                                      0  
```  
更新等式, 使用时间等式 :   
等式1 :  
```  
1844.415 = 4914.66*0.368362 + 0.00018884145574257426*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205  
```  
cpu_tuple_cost用例子1中计算得到的0.00018884145574257426  
cpu_index_tuple_cost和cpu_operator_cost的比例用系统默认的2 : 1.  
等式2 :   
```  
cpu_index_tuple_cost/cpu_operator_cost = 2  
```  
最终得到 :   
```  
cpu_index_tuple_cost = 0.00433497085216479990  
cpu_operator_cost = 0.00216748542608239995  
```  
结合例子1 得到的两个常量, 所有的5个常量值就调整好了.  
```  
digoal=# set cpu_tuple_cost=0.00018884145574257426;  
SET  
digoal=# set cpu_index_tuple_cost = 0.00433497085216479990;  
SET  
digoal=# set cpu_operator_cost = 0.00216748542608239995;  
SET  
digoal=# set seq_page_cost=0.014329;  
SET  
digoal=# set random_page_cost = 0.368362;  
SET  
digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;  
SET  
SET  
                                                                         QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------------------------------  
------------------------  
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align  (cost=0.38..1844.42 rows=5031 width=45) (actual time=0.553..1346  
.468 rows=5037 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 1998999963)  
   Buffers: shared hit=152 read=4902  
 Total runtime: 1348.428 ms  
(5 rows)  
```  
以后使用调整后的cost常量, 就可以估算出SQL的真实执行时间, 真实执行时间会因为shared buffer hit以及os cache比explain得到的值略短, 但是已经非常接近了.  
```  
digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain select * from tbl_cost_align where id>1998999963;  
SET  
SET  
                                            QUERY PLAN                                               
---------------------------------------------------------------------------------------------------  
 Index Scan using idx_tbl_cost_align_id on tbl_cost_align  (cost=0.38..1844.42 rows=5031 width=45)  
   Index Cond: (id > 1998999963)  
(2 rows)  
```  
## 参考  
1\. http://www.postgresql.org/docs/9.3/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS  
2\. http://www.postgresql.org/docs/9.3/static/sql-createfunction.html  
3\. http://www.postgresql.org/docs/9.3/static/sql-explain.html  
4\. http://www.postgresql.org/docs/9.3/static/sql-altertable.html  
5\. http://www.postgresql.org/docs/9.3/static/using-explain.html  
6\. http://www.postgresql.org/docs/9.3/static/sql-alterdatabase.html  
7\. https://sourceware.org/systemtap/tapsets  
8\. http://www.postgresql.org/docs/9.3/static/dynamic-trace.html  
9\. src/backend/optimizer/path/costsize.c  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")