## PolarDB-PG | PostgreSQL + duckdb_fdw + 阿里云OSS 实现高效低价的海量数据冷热存储分离    
### 作者                                                
digoal                                                
### 日期                                                
2023-03-08                                            
### 标签                                                
PostgreSQL , PolarDB , DuckDB , oss , duckdb_fdw , 冷热分离 , 海量数据         
----                                                
## 背景            
数据库里的历史数据越来越多, 占用空间大, 备份慢, 恢复慢, 查询少但是很费钱, 迁移慢. 怎么办?      
冷热分离方案:    
- 使用PostgreSQL 或者 PolarDB-PG, 将历史数据存成parquet文件格式, 放到aliyun OSS存储里面. 使用duckdb_fdw对OSS内的parquet文件进行查询.      
    - [《DuckDB DataLake 场景使用举例 - aliyun OSS对象存储parquet》](../202210/20221026_01.md)        
    - [《PolarDB 开源版通过 duckdb_fdw 支持 parquet 列存数据文件以及高效OLAP》](../202212/20221209_02.md)    
- duckdb 存储元数据(parquet 映射)      
    - [《DuckDB parquet 分区表 / Delta Lake(数据湖) 应用》](../202209/20220905_01.md)      
方案特点:     
- 内网oss不收取网络费用, 只收取存储费用, 非常便宜.      
- oss分几个档, 可以根据性能需求选择.    
- parquet为列存储, 一般历史数据的分析需求多, 性能不错.    
- duckdb 支持 parquet下推过滤, 数据过滤性能也不错.      
- 存储在oss内, 可以使用oss的函数计算功能, 仅计算时收费. 而且使用OSS存储打破数据孤岛, OSS与PG和PolarDB以及其他数据源打通, 形成数据联邦, 更容易发挥更大层面的数据价值.     
架构如下:   
```
 PolarDB-PG 或 PostgreSQL   
          ↑↓
          ↑↓
 热数据: 高速本地存储     
          ↑↓                                  ↓↓            
          ↑↓                                  ↓↓             
 LibDuckDB ForeignServer 层:                  ↓↓ 
   1、(通过 duckdb_fdw 读写OSS)    2、(通过 postgres_scanner 读高速本地存储)
            ↑↓                                              
            ↑↓                                               
 归档数据: OSS 冷暖存储 (Parquet格式)    
```
## demo    
### 在以下debian 容器中部署    
1、部署duckdb和依赖的parquet、httpfs插件    
[《Debian学习入门 - (作为服务器使用, Debian 操作系统可能是长期更好的选择?)》](../202302/20230217_02.md)      
确认编译了httpfs 和 parquet 插件    
```    
root@9b780f5ea2e8:~/duckdb/build/release/extension# pwd    
/root/duckdb/build/release/extension    
root@9b780f5ea2e8:~/duckdb/build/release/extension# ll    
total 72K    
-rw-r--r--  1 root root 2.3K Mar  3 06:16 cmake_install.cmake    
-rw-r--r--  1 root root 6.2K Mar  3 06:16 Makefile    
drwxr-xr-x 15 root root 4.0K Mar  3 06:16 .    
drwxr-xr-x  2 root root 4.0K Mar  3 06:16 CMakeFiles    
drwxr-xr-x  4 root root 4.0K Mar  3 06:40 jemalloc    
drwxr-xr-x 10 root root 4.0K Mar  3 06:43 ..    
drwxr-xr-x  4 root root 4.0K Mar  3 06:45 icu    
drwxr-xr-x  3 root root 4.0K Mar  3 06:47 parquet    
drwxr-xr-x  4 root root 4.0K Mar  3 06:47 tpch    
drwxr-xr-x  4 root root 4.0K Mar  3 06:47 tpcds    
drwxr-xr-x  3 root root 4.0K Mar  3 06:47 fts    
drwxr-xr-x  3 root root 4.0K Mar  3 06:48 httpfs    
drwxr-xr-x  3 root root 4.0K Mar  3 06:48 visualizer    
drwxr-xr-x  5 root root 4.0K Mar  3 06:49 json    
drwxr-xr-x  4 root root 4.0K Mar  3 06:49 excel    
drwxr-xr-x  4 root root 4.0K Mar  3 06:50 sqlsmith    
drwxr-xr-x  3 root root 4.0K Mar  3 06:50 inet    
```    
2、安装postgresql 或 PolarDB开源版本.     
PolarDB开源版本部署请参考: [《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB on Docker简单部署》](../202209/20220908_02.md)      
以下是使用postgresql的例子:  
```    
apt install -y curl fastjar    
useradd postgres -s /bin/bash -m
su - postgres    
curl https://ftp.postgresql.org/pub/source/v15.2/postgresql-15.2.tar.bz2 -o ./postgresql-15.2.tar.bz2    
tar -jxvf postgresql-15.2.tar.bz2    
cd postgresql-15.2    
./configure --prefix=/home/postgres/pg15.2    
make world -j 4    
make install-world    
vi ~/.bash_profile
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ll='ls -larth'
export PATH=/home/postgres/pg15.2/bin:$PATH
export PGDATABASE=postgres
export PGHOST=127.0.0.1
export PGPORT=1921
export PGUSER=postgres
export PGDATA=/home/postgres/pgdata
```    
3、部署duckdb_fdw    
```    
su - postgres    
git clone --depth 1 https://github.com/alitrack/duckdb_fdw    
```    
将duckdb的lib包拷贝到postgresql的lib目录    
```    
root@9b780f5ea2e8:~/duckdb/build/release/src# pwd    
/root/duckdb/build/release/src    
root@9b780f5ea2e8:~/duckdb/build/release/src# ll libduckdb.so    
-rwxr-xr-x 1 root root 58M Mar  3 06:42 libduckdb.so    
cp libduckdb.so /home/postgres/pg15.2/lib/    
```    
安装duckdb_fdw插件    
```    
su - postgres    
export PATH=/home/postgres/pg15.2/bin:$PATH    
cd duckdb_fdw  
USE_PGXS=1 make    
USE_PGXS=1 make install    
```    
4、初始化postgresql数据库集群    
```    
initdb -D /home/postgres/pgdata -E UTF8 --lc-collate=C  -U postgres    
```    
5、简单配置一下pg配置文件    
```    
vi /home/postgres/pgdata/postgresql.conf    
listen_addresses = '0.0.0.0'		    
port = 1921				    
max_connections = 100			    
unix_socket_directories = '/tmp,.'	    
shared_buffers = 128MB			    
dynamic_shared_memory_type = posix	    
max_wal_size = 1GB    
min_wal_size = 80MB    
log_destination = 'csvlog'		    
logging_collector = on	    
log_directory = 'log'			    
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'	    
log_file_mode = 0600			    
log_rotation_age = 1d			    
log_rotation_size = 10MB		    
log_truncate_on_rotation = on		    
log_timezone = 'Etc/UTC'    
datestyle = 'iso, mdy'    
timezone = 'Etc/UTC'    
lc_messages = 'C'			    
lc_monetary = 'C'			    
lc_numeric = 'C'			    
lc_time = 'C'				    
default_text_search_config = 'pg_catalog.english'    
```    
6、启动数据库, 加载duckdb_fdw插件    
```    
pg_ctl start -D /home/postgres/pgdata    
$ psql -h 127.0.0.1 -p 1921      
psql (15.2)    
Type "help" for help.    
postgres=# create extension duckdb_fdw ;    
CREATE EXTENSION    
```    
### 创建oss实验环境    
可以使用阿里云云起实验免费创建oss实验环境, 参考如下:      
[《DuckDB DataLake 场景使用举例 - aliyun OSS对象存储parquet》](../202210/20221026_01.md)      
1、初始化实验环境后, 得到一些需要的内容如下, 将被duckdb用于连接oss.      
```      
AK ID: LTAI***
AK Secret: 5wHL***
Endpoint外网域名: oss-cn-shanghai.aliyuncs.com    
Bucket名称: adc-oss-labs01969    
Object路径: ECSOSS/u-bimcc3ei/    
```      
duckdb读写OSS的方法      
```      
COPY  TO 's3:////filename';      
SELECT * FROM read_parquet('s3:////filename');      
```      
在debian中, 测试duckdb是否能正常使用OSS, 并生成100万测试数据, 写入oss.    
```    
root@9b780f5ea2e8:~/duckdb/build/release# pwd    
/root/duckdb/build/release    
root@9b780f5ea2e8:~/duckdb/build/release# ./duckdb     
v0.7.1 b00b93f    
Enter ".help" for usage hints.    
Connected to a transient in-memory database.    
Use ".open FILENAME" to reopen on a persistent database.    
D load 'httpfs';     
D set s3_access_key_id='LTAI***';               // AK ID      
D set s3_secret_access_key='5wHL***';     // AK Secret      
D set s3_endpoint='s3.oss-cn-shanghai.aliyuncs.com';             // Endpoint外网域名|内网域名      
D COPY (select id, md5(random()::text) as info, now() as ts from range(0,1000000) as t(id)) TO 's3://adc-oss-labs01969/ECSOSS/u-bimcc3ei/test_duckdb1.parquet';     
```    
测试创建视图是否正常使用    
```    
IT-C02YW2EFLVDL:release digoal$ ./duckdb     
v0.7.1 b00b93f    
Enter ".help" for usage hints.    
