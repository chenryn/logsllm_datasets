STS (security token service) 432
styles, API security 7–8
sub claim 187, 191, 393, 395
sub field 242
sub-domain hijacking 122
sub-domain takeover 122
subject attribute 123, 282
Subject field 407
subject_token_type parameter 432
.svc.cluster.local filter 367
Synthetic Initialization Vector (SIV) mode 475
System.getenv(String name) method 417
T
tampering 18
tap utility 373
targetPort attribute 348
TCP (Transmission Control Protocol) 441
TEE (Trusted Execution Environment) 482
temporary tables 270
test client 388
third-party caveats 328–330
answers to exercises 330
creating 329–330
third-party clients 111
threat models 16–18
threats 17, 63–64
throttling 24–25
thumbprint method 411
timeOfDay attribute 288
TimestampCaveatVerifier 325
timing attacks 134
TLS (Transport Layer Security) 9, 79, 440–457
authenticating devices with 492–496
cipher suites for constrained devices 452–457
Datagram TLS (DTLS) 441–452
implementing for client 443–450
implementing for server 450–452
mutual TLS (mTLS) authentication 396–414
certificate-bound access tokens 410–414
client certificate authentication 399–401
using service mesh 406–409
verifying client identity 402–406
with OAuth2 409–410
securing communications with 368–369
using service mesh for 370–374
TLS cipher suite 245
TLS secret 416
TlsContext class 495
TLS_DHE_PSK_WITH_AES_128_CCM cipher 
suite 466
TLS_DHE_PSK_WITH_AES_256_CCM cipher 
suite 466
TLS_DHE_PSK_WITH_CHACHA20_POLY1305_
SHA256 cipher suite 466
INDEX
552
TLS_ECDHE_PSK_WITH_AES_128_CCM_
SHA256 cipher suite 466
TLS_ECDHE_PSK_WITH_CHACHA20_
POLY1305_SHA256 cipher suite 466
TLS_EMPTY_RENEGOTIATION_INFO_SCSV 
marker cipher suite 456
TlsPSKIdentityManager 460
TLS_PSK_WITH_AES_128_CCM cipher suite 464
TLS_PSK_WITH_AES_128_CCM_8 cipher 
suite 464
TLS_PSK_WITH_AES_128_GCM_SHA256 cipher 
suite 464
TLS_PSK_WITH_AES_256_CCM cipher suite 464
TLS_PSK_WITH_AES_256_CCM_8 cipher 
suite 464
TLS_PSK_WITH_AES_256_GCM_SHA384 cipher 
suite 464
TLS_PSK_WITH_CHACHA20_POLY1305_
SHA256 cipher suite 464
Token class 111–112
Token endpoint 529
token exchange 431–435
token introspection 239–244
Token object 117
token parameter 241
token revocation 143
token store abstraction 111–112
token-based authentication 109–115
implementing token-based login 112–115
modern 146–180
allowing cross-domain requests with 
CORS 147–154
hardening database token storage 170–180
tokens without cookies 154–169
token store abstraction 111–112
TokenController class 177, 194, 200, 209, 315
TokenController interface 113–115, 118, 136
TokenController validateToken() method 124
tokenController.requireScope method 222
TokenController.validateToken method 317
tokenId argument 124, 134
tokenId parameter 136
tokens 102
access tokens 239–258
ID tokens 260–262, 264–266
macaroons 319–330
contextual caveats 321
first-party caveats 325–328
macaroon token store 322–324
third-party caveats 328–330
refresh tokens 237–238
scoped tokens 218–224
adding to Natter 220–222
difference between scopes and 
permissions 223–224
self-contained tokens 181–214
encrypting sensitive attributes 195–205
handling token revocation 209–213
JWTs 185–194
storing token state on client 182–183
using types for secure API design 206–209
without cookies 154–169
Bearer authentication scheme 160–162
deleting expired tokens 162–163
storing token state in database 155–160
storing tokens in Web Storage 163–166
updating CORS filter 166
XSS attacks on Web Storage 167–169
tokens table 158, 305
TokenStore interface 111–113, 115, 118, 124, 
143–144, 207–208, 243, 303, 322
tokenStore variable 315
token_type_hint parameter 241
toPublicJWKSet method 392
Transmission Control Protocol (TCP) 441
trust boundaries 17
Trusted Execution Environment (TEE) 482
Trusted Types 169
TrustManager array 443, 450
TrustManagerFactory 443
tryAcquire() method 67
two-factor authentication (2FA) 22
U
UDP (User Datagram Protocol) 65, 442
UDPTransport 461
UIDs (user IDs) 343, 350
UMA (User Managed Access) 224
unacceptable inputs 50
uniqueMember attribute 272
Universal Links 235
UNPROTECTED header 471
unwrap() method 447–448, 450–451
update() method 426
updateUnique method 44
URI field 407
uri.toASCIIString() method 305
URL class 312
user codes 513
User Datagram Protocol (UDP) 65, 442
user IDs (UIDs) 343, 350
User Managed Access (UMA) 224
user namespace 343
user requests 428–435
OAuth2 token exchange 431–435
phantom token pattern 429–431
UserController class 74, 76, 91, 113, 269, 404, 413
UserController.lookupPermissions method 306
user_id column 305
INDEX
553
user_id field 277
UserInfo endpoint 260, 529
username attribute 316
username field 242
user_roles table 277–279, 305
users 268–273
adding new to Natter space 94–95
authenticating 75–77
determining user roles 279–280
Lightweight Directory Access Protocol (LDAP) 
groups 271–273
registering 74–75
users table 90, 269
V
validateToken method 123, 137
validation
capabilities 306–307
session cookies 123–125
signed JWTs 193–194
VARCHAR 491
verification URI 513
verification_uri_complete field 515
version control capabilities 23
virtual machines (VMs) 337
virtual private cloud (VPC) 423
virtual static groups 272
VirtualBox
Linux 534
MacOS 532–533
Windows 534
VMs (virtual machines) 337
volumeMounts section 417
VPC (virtual private cloud) 423
W
WAF (web application firewall) 10
web browsers, session cookie authentication 
in 102–108
calling Natter API from JavaScript 102–104
drawbacks of HTTP authentication 108
intercepting form submission 104
serving HTML from same origin 105–108
Web Ontology Language (OWL) 281
Web Storage
storing tokens in 163–166
XSS attacks on 167–169
WebAuthn 397
web-keys 312
wikis 23
window object 104
window.location.hash variable 312
window.referrer field 312
window.referrer variable 301–302
Windows
setting up Java and Maven on 525
setting up Kubernetes 534
Minikube 534
VirtualBox 534
wrap() method 447–449, 451
WWW-Authenticate challenge header
161
WWW-Authenticate header 89
X
x5c claim 409
x5c header 251
XACML (eXtensible Access-Control Markup 
Language) 290–291
X-Content-Type-Options header 57
X-CSRF-Token header 130, 136, 142, 160, 163, 
166
X-Forwarded-Client-Cert header 407–408
X-Frame-Options header 57
XMLHttpRequest object 102
XOR operator 135
xor() method 504
XSS (cross-site scripting) attacks 54, 56, 
168
exploiting 54–57
on Web Storage 167–169
preventing 57–58
X-XSS-Protection header 57
Z
zero trust networking 362
API security
Authorization
Audit logging
Authentication
Encryption
Rate-limiting
Passwords
Token-based
Cookies
Macaroons
JWTs
Certiﬁcates
End-to-end
Identity-based
ACLs
Roles
ABAC
Capabilities
OAuth2
Confused deputy attacks
CSRF
Dictionary
attacks
Token theft
Denial of
service
Session
ﬁxation
Replay
attacks
Open
redirects
Privilege escalation
Algorithm
mixup
Log
forgery
Malleability
SQL injection
SSRF
Attacks covered
XSS
Attack
SQL injection
Cross-site scripting (XSS)
Denial of service (DoS)
Dictionary attacks
Privilege escalation
Session ﬁxation
Cross-site request forgery (CSRF)
Token theft
JWT algorithm mixup
Malleability
Attack
Auth code injection
Confused deputy attacks
Open redirects
Server-side request forgery (SSRF)
Log forgery
Replay attacks
Auth code
injection
Chapter
5
6
6
7
9
10
10
13
4
4
3
3
3
3
2
2
Chapter
Neil Madden
ISBN: 978-1-61729-602-4
A
PIs control data sharing in every service, server, data store, 
and web client. Modern data-centric designs—including 
microservices and cloud-native applications—demand a 
comprehensive, multi-layered approach to security for both 
private and public-facing APIs.
API Security in Action teaches you how to create secure APIs 
for any situation. By following this hands-on guide you’ll 
build a social network API while mastering techniques for
ﬂ exible multi-user security, cloud key management, and 
lightweight cryptography. When you’re done, you’ll be able 
to create APIs that stand up to complex threat models and 
hostile environments. 
What’s Inside
● Authentication
● Authorization
● Audit logging
● Rate limiting
● Encryption
For developers with experience building RESTful APIs. 
Examples are in Java.
Neil Madden has in-depth knowledge of applied cryptography, 
application security, and current API security technologies. He 
holds a Ph.D. in Computer Science.
To download their free eBook in PDF, ePub, and Kindle formats, 
owners of this book should visit 
www.manning.com/books/api-security-in-action
$69.99 / Can $92.99  [INCLUDING eBOOK]
API Security IN ACTION
SOFTWARE DEVELOPMENT/SECURITY
M A N N I N G
“
A comprehensive guide to 
designing and implementing 
secure services. A must-read 
book for all API practitioners 
who manage security.”
—Gilberto Taccari, Penta  
“
Anyone who wants an 
in-depth understanding of API 
security should read this.”
—Bobby Lin, DBS Bank
“
I highly recommend 
this book to those 
  developing APIs.”
—Jorge Bo, Naranja X
“
The best comprehensive 
guide about API security 
I have read.”
—Marc Roulleau, GIRO
See first page