# 七、认证、授权和准入控制
身份验证和授权在保护应用安全方面起着非常重要的作用。这两个术语经常互换使用，但非常不同。身份验证验证用户的身份。身份验证后，授权用于检查用户是否具有执行所需操作的权限。身份验证使用用户知道的东西来验证他们的身份；最简单的形式是用户名和密码。一旦应用验证了用户的身份，它就会检查用户可以访问哪些资源。在大多数情况下，这是访问控制列表的变体。将用户的访问控制列表与请求属性进行比较，以允许或拒绝某项操作。
在本章中，我们将讨论在请求被`kube-apiserver`处理之前，请求是如何被认证、授权模块和准入控制器处理的。我们将详细介绍不同模块和准入控制器，并重点介绍推荐的安全配置。
我们最后来看看**开放策略代理** ( **OPA** )，这是一个开源工具，可以用来实现跨微服务的授权。在 Kubernetes 中，我们将了解如何将其用作验证准入控制器。许多集群需要比 Kubernetes 已经提供的更细粒度的授权。使用 OPA，开发人员可以定义可以在运行时更新的自定义授权策略。有几个开源工具可以利用 OPA，比如 Istio。
在本章中，我们将讨论以下主题:
*   在 Kubernetes 中请求工作流
*   Kubernetes 身份验证
*   不可否认的授权
*   入场控制员
*   OPA 简介
# 在 Kubernetes 中请求工作流
在 Kubernetes 中，`kube-apiserver`处理所有对修改集群状态的请求。`kube-apiserver`首先验证请求的来源。它可以使用一个或多个身份验证模块，包括客户端证书、密码或令牌。请求从一个模块串行传递到另一个模块。如果请求没有被所有模块拒绝，它将被标记为匿名请求。应用编程接口服务器可以配置为允许匿名请求。
一旦请求的来源被验证，它就通过授权模块来检查请求的来源是否被允许执行动作。如果策略允许用户执行操作，则授权模块允许该请求。Kubernetes 支持多个授权模块，如**基于属性的访问控制**(**ABAC**)**基于角色的访问控制** ( **RBAC** )和 webhooks。与身份验证模块类似，集群可以使用多种授权:
![Figure 7.1 – Requesting parsing before processing with the kube-apiserver ](img/B15566_07_001.jpg)
图 7.1–在用 kube-apiserver 处理之前请求解析
通过授权和认证模块后，准入控制器修改或拒绝请求。准入控制器拦截在准入控制器中创建、更新或删除对象的请求。准入控制分为两类:变异或验证。变异接纳控制器先运行；他们修改他们接受的请求。接下来运行验证准入控制器。这些控制器不能修改对象。如果任一接纳控制器拒绝一个请求，一个错误被返回给用户，并且该请求将不会被 API 服务器处理。
# 不可动摇的认证
Kubernetes 中的所有请求都来自外部用户、服务帐户或 Kubernetes 组件。如果请求的来源未知，它将被视为匿名请求。根据组件的配置，身份验证模块可以允许或拒绝匿名请求。在 v1.6+中，匿名访问被允许支持匿名和未经身份验证的用户使用 RBAC 和 ABAC 授权模式。通过将`--anonymous-auth=false`标志传递给应用编程接口服务器配置，可以显式禁用它:
```
$ps aux | grep api
root      3701  6.1  8.7 497408 346244 ?       Ssl  21:06   0:16 kube-apiserver --advertise-address=192.168.99.111 --allow-privileged=true --anonymous-auth=false
```
Kubernetes 使用一种或多种身份验证策略。让我们一个接一个地讨论它们。
## 客户证书
使用 X509 **证书颁发机构** ( **CA** )证书是 Kubernetes 中最常见的认证策略。可以通过将`--client-ca-file=file_path`传递给服务器来启用。传递给 API 服务器的文件有一个 CAs 列表，它在集群中创建并验证客户端证书。证书中的`common name`属性通常用作请求的用户名，`organization`属性用于标识用户的组:
```
kube-apiserver --advertise-address=192.168.99.104 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt
```
要创建新证书，需要采取以下步骤:
1.  生成私钥。可以使用`openssl`、`easyrsa`或`cfssl` :
    ```
    openssl genrsa -out priv.key 4096
    ```
    生成私钥
2.  Generate a **Certificate Signing Request** (**CSR**). Using the private key and a config file similar to the following generates a CSR. This CSR is for the `test` user, which will be part of the `dev` group:
    ```
    [ req ]
    default_bits = 2048
    prompt = no
    default_md = sha256
    distinguished_name = dn
    [ dn ]
    CN = test
    O = dev
    [ v3_ext ]
    authorityKeyIdentifier=keyid,issuer:always basicConstraints=CA:FALSE
    keyUsage=keyEncipherment,dataEncipherment extendedKeyUsage=serverAuth,clientAuth
    ```
    您可以使用`openssl`来生成企业社会责任:
    ```
    openssl req -config ./csr.cnf -new -key priv.key -nodes -out new.csr
    ```
3.  Sign the CSR. Create a Kubernetes `CertificateSigningRequest` request using the following YAML file:
    ```
    apiVersion: certificates.k8s.io/v1beta1
    kind: CertificateSigningRequest
    metadata:
     name: mycsr
    spec:
     groups:
     - system:authenticated
     request: ${BASE64_CSR}
     usages:
     - digital signature
     - key encipherment
     - server auth
     - client auth
    ```
    前面生成的证书签名请求与前面的 YAML 规范一起使用生成新的 Kubernetes 证书签名请求:
    ```
    $ export BASE64_CSR=$(cat ./new.csr | base64 | tr -d '\n')
    $ cat csr.yaml | envsubst | kubectl apply -f -
    ```
    创建此请求后，需要得到集群管理员的批准才能生成证书:
    ```
    kubectl certificate approve mycsr
    ```
4.  导出阴极射线管。证书可以使用`kubectl` :
    ```
    kubectl get csr mycsr -o jsonpath='{.status.certificate}' \
     | base64 --decode > new.crt
    ```
    导出
接下来，我们将看看静态令牌，这是开发和调试环境中流行的身份验证模式，但不应在集群上的 producti 中使用。
## 静态令牌
API 服务器使用静态文件读取承载令牌。这个静态文件通过`--token-auth-file=`传递给 API 服务器。令牌文件是由`secret`、`user`、`uid`、`group1`和`group2`组成的逗号分隔文件。
令牌作为 HTTP 头在请求中传递:
```
Authorization: Bearer 66e6a781-09cb-4e7e-8e13-34d78cb0dab6
```
令牌无限期地存在，需要重新启动 API 服务器来更新令牌。这是*而不是*推荐的认证策略。如果攻击者能够在集群中产生一个恶意的 PODS，这些令牌很容易被破坏。一旦遭到破坏，生成新令牌的唯一方法就是重启 API 服务器。
接下来，我们将看看基本身份验证，这是静态令牌的一种变体，多年来一直被用作 web 服务的身份验证方法。
## 基本认证
与静态令牌类似，Kubernetes 也支持基础认证。这可以通过使用`basic-auth-file=`来启用。认证证书存储在 CSV 文件中，如`password`、`user`、`uid`、`group1`和`group2`。
用户名和密码作为身份验证标头在请求中传递:
```
Authentication: Basic base64(user:password)
```
与静态令牌类似，如果不重新启动 API 服务器，就无法更改基本身份验证密码。基本身份验证不应用于生产操作集群。
## 引导令牌
自举令牌是对静态令牌的即兴创作。引导令牌是 Kubernetes 中使用的默认身份验证方法。它们被动态管理并作为机密存储在`kube-system`中。要启用引导令牌，请执行以下操作:
1.  使用 API 服务器中的`--enable-bootstrap-token-auth`启用引导令牌认证器:
    ```
    $ps aux | grep api
    root      3701  3.8  8.8 497920 347140 ?       Ssl  21:06   4:58 kube-apiserver --advertise-address=192.168.99.111 --allow-privileged=true --anonymous-auth=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota --enable-bootstrap-token-auth=true
    ```
2.  使用`controller`标志在控制器管理器中启用`tokencleaner`:
    ```
    $ ps aux | grep controller
    root      3693  1.4  2.3 211196 94396 ?        Ssl  21:06   1:55 kube-controller-manager --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/var/lib/minikube/certs/ca.crt --cluster-name=mk --cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt --cluster-signing-key-file=/var/lib/minikube/certs/ca.key --controllers=*,bootstrapsigner,tokencleaner
    ```
3.  类似于令牌身份验证，引导令牌作为 HTTP 头在请求中传递:
    ```
    Authorization: Bearer 123456.aa1234fdeffeeedf
    ```
令牌的第一部分是`TokenId`值，第二部分是`TokenSecret`值。`TokenController`确保从系统机密中删除过期的令牌。
## 服务账户代币
服务账户认证器自动启用。它验证签名的承载令牌。使用`--service-account-key-file`指定签名密钥。如果未指定该值，则使用 Kube API 服务器的私钥:
```
$ps aux | grep api
root      3711 27.1 14.9 426728 296552 ?       Ssl  04:22   0:04 kube-apiserver --advertise-address=192.168.99.104 ... --secure-port=8443 --service-account-key-file=/var/lib/minikube/certs/sa.pub --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/var/lib/minikube/certs/apiserver.crt --tls-private-key-file=/var/lib/minikube/certs/apiserver.key
docker    4496  0.0  0.0  11408   544 pts/0    S+   04:22   0:00 grep api
```
服务帐户由`kube-apiserver`创建，并与 Pod 相关联。这类似于 AWS 中的实例配置文件。如果未指定服务帐户，则默认服务帐户与 pod 相关联。
要创建服务帐户测试，可以使用以下方法:
```
kubectl create serviceaccount test 
```
服务账户有关联的机密，包括 API 服务器的 CA 和签名令牌:
```
$ kubectl get serviceaccounts test -o yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "2020-03-29T04:35:58Z"
  name: test
  namespace: default
  resourceVersion: "954754"
  selfLink: /api/v1/namespaces/default/serviceaccounts/test