User: I have a requirement where 1 process sets a value as environment variable and I read that value in python using 

os.environ

As per python doc:

This mapping is captured the first
  time the os module is imported,
  typically during Python startup as
  part of processing site.py. Changes to
  the environment made after this time
  are not reflected in os.environ,
  except for changes made by modifying
  os.environ directly.

My problem is the process set/change the variable every time it calls the python script.
Please tell me a way to read the changed value.  
Thanks,
Assistant: I guess you can use os.getenv() to get the value of an environment variable any time, and this will reflect the most up-to-date state.
Update: note that there is no such thing as one "global" environment, at least not on Linux. Quoting Wikipedia:

In all Unix and Unix-like systems, each process has its own private set of environment variables. By default, when a process is created it inherits a duplicate environment of its parent process, except for explicit changes made by the parent when it creates the child.

Therefore, if you launch (fork) two processes from the same parent process (such as bash), and change an environment variable in one of the processes, the other process won't see it because it uses another copy of the environment of the parent process. Similarly, if you change the environment in the parent process after having launched the child processes, the child processes won't see the change because they have already created their private copy of the environment.