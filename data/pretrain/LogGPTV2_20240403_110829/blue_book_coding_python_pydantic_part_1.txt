---
title: Pydantic
date: 20201002
author: Lyz
---
[Pydantic](https://pydantic-docs.helpmanual.io/) is a data validation and
settings management using python type annotations.
pydantic enforces type hints at runtime, and provides user friendly errors when
data is invalid.
Define how data should be in pure, canonical python; check it with pydantic.
# [Install](https://pydantic-docs.helpmanual.io/install/)
```bash
pip install pydantic
```
If you use [mypy](mypy.md) I highly recommend you to
[activate the pydantic plugin](https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin)
by adding to your `pyproject.toml`:
```toml
[tool.mypy]
plugins = [ "pydantic.mypy",]
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
```
# Advantages and disadvantages
Advantages:
- Perform data validation in an easy and nice way.
- Seamless integration with [FastAPI](https://fastapi.tiangolo.com/) and
  [Typer](https://typer.tiangolo.com/).
- Nice way to export the data and data schema.
Disadvantages:
- You can't define
  [cyclic relationships](https://github.com/samuelcolvin/pydantic/issues/2279),
  therefore there is no way to simulate the *backref* SQLAlchemy function.
# [Models](https://pydantic-docs.helpmanual.io/usage/models/)
The primary means of defining objects in *pydantic* is via models (models are
simply classes which inherit from `BaseModel`).
You can think of models as similar to types in strictly typed languages, or as
the requirements of a single endpoint in an API.
Untrusted data can be passed to a model, and after parsing and validation
*pydantic* guarantees that the fields of the resultant model instance will
conform to the field types defined on the model.
## [Basic model usage](https://pydantic-docs.helpmanual.io/usage/models/#basic-model-usage)
```python
from pydantic import BaseModel
class User(BaseModel):
    id: int
    name = "Jane Doe"
```
`User` here is a model with two fields `id` which is an integer and is required,
and `name` which is a string and is not required (it has a default value). The
type of `name` is inferred from the default value, and so a type annotation is
not required.
```python
user = User(id="123")
```
`user` here is an instance of `User`. Initialisation of the object will perform
all parsing and validation, if no `ValidationError` is raised, you know the
resulting model instance is valid.
### [Model properties](https://pydantic-docs.helpmanual.io/usage/models/#model-properties)
Models possess the following methods and attributes:
`dict()` : returns a dictionary of the model's fields and values.
`json()` : returns a JSON string representation `dict()`.
`copy()` : returns a deep copy of the model.
`parse_obj()` : very similar to the `__init__` method of the model, used to
import objects from a dict rather than keyword arguments. If the object passed
is not a dict a `ValidationError` will be raised.
`parse_raw()` : takes a *str* or *bytes* and parses it as *json*, then passes
the result to `parse_obj`.
`parse_file()` : reads a file and passes the contents to `parse_raw`. If
`content_type` is omitted, it is inferred from the file's extension.
`from_orm()` : loads data into a model from an arbitrary class.
`schema()` : returns a dictionary representing the model as JSON Schema.
`schema_json()` : returns a JSON string representation of `schema()`.
## [Recursive Models](https://pydantic-docs.helpmanual.io/usage/models/#recursive-models)
More complex hierarchical data structures can be defined using models themselves
as types in annotations.
```python
from typing import List
from pydantic import BaseModel
class Foo(BaseModel):
    count: int
    size: float = None
class Bar(BaseModel):
    apple = "x"
    banana = "y"
class Spam(BaseModel):
    foo: Foo
    bars: List[Bar]
m = Spam(foo={"count": 4}, bars=[{"apple": "x1"}, {"apple": "x2"}])
print(m)
# > foo=Foo(count=4, size=None) bars=[Bar(apple='x1', banana='y'),
# > Bar(apple='x2', banana='y')]
print(m.dict())
"""
{
    'foo': {'count': 4, 'size': None},
    'bars': [
        {'apple': 'x1', 'banana': 'y'},
        {'apple': 'x2', 'banana': 'y'},
    ],
}
"""
```
For self-referencing models, use postponed annotations.
### [Definition of two models that reference each other](https://github.com/samuelcolvin/pydantic/issues/1333)
```python
class A(BaseModel):
    b: Optional["B"] = None
class B(BaseModel):
    a: Optional[A] = None
A.update_forward_refs()
```
Although it
[doesn't work as expected!](https://github.com/samuelcolvin/pydantic/issues/2279)
## [Error Handling](https://pydantic-docs.helpmanual.io/usage/models/#error-handling)
*pydantic* will raise `ValidationError` whenever it finds an error in the data
it's validating.
!!! note Validation code should not raise `ValidationError` itself, but rather
raise `ValueError`, `TypeError` or `AssertionError` (or subclasses of
`ValueError` or `TypeError`) which will be caught and used to populate
`ValidationError`.
One exception will be raised regardless of the number of errors found, that
`ValidationError` will contain information about all the errors and how they
happened. It does not include however the data that produced the error. A nice way of showing it is to capture the error and print it yourself:
```python
try:
    model = Model(
        state=state,
    )
except ValidationError as error:
    log.error(f'Error building model with state {state}')
    raise error
```
This creates a message that does not include the data that generated the i
You can access these errors in a several ways:
`e.errors()` : method will return list of errors found in the input data.
`e.json()` : method will return a JSON representation of `errors`.
`str(e)` : method will return a human readable representation of the errors.
Each error object contains:
`loc` : the error's location as a list. The first item in the list will be the
field where the error occurred, and if the field is a sub-model, subsequent
items will be present to indicate the nested location of the error.
`type` : a computer-readable identifier of the error type.
`msg` : a human readable explanation of the error.
`ctx` : an optional object which contains values required to render the error
message.
### Custom Errors
You can also define your own error classes, which can specify a custom error
code, message template, and context:
```python
from pydantic import BaseModel, PydanticValueError, ValidationError, validator
class NotABarError(PydanticValueError):
    code = "not_a_bar"
    msg_template = 'value is not "bar", got "{wrong_value}"'
class Model(BaseModel):
    foo: str
    @validator("foo")
    def name_must_contain_space(cls, v):
        if v != "bar":
            raise NotABarError(wrong_value=v)
        return v
try:
    Model(foo="ber")
except ValidationError as e:
    print(e.json())
    """
    [
      {
        "loc": [
          "foo"
        ],
        "msg": "value is not \"bar\", got \"ber\"",
        "type": "value_error.not_a_bar",
        "ctx": {
          "wrong_value": "ber"
        }
      }
    ]
    """
```
## [Dynamic model creation](https://pydantic-docs.helpmanual.io/usage/models/#dynamic-model-creation)
There are some occasions where the shape of a model is not known until runtime.
For this *pydantic* provides the `create_model` method to allow models to be
created on the fly.
```python
from pydantic import BaseModel, create_model
DynamicFoobarModel = create_model("DynamicFoobarModel", foo=(str, ...), bar=123)
class StaticFoobarModel(BaseModel):
    foo: str
    bar: int = 123
```
Here `StaticFoobarModel` and `DynamicFoobarModel` are identical.
!!! warning See the note in
[Required Optional Fields](#required-optional-fields) for the distinct between
an ellipsis as a field default and annotation only fields. See
[samuelcolvin/pydantic#1047](https://github.com/samuelcolvin/pydantic/issues/1047)
for more details.
Fields are defined by either a tuple of the form `(, )` or
just a default value. The special key word arguments `__config__` and `__base__`
can be used to customize the new model. This includes extending a base model
with extra fields.
```python
from pydantic import BaseModel, create_model
class FooModel(BaseModel):
    foo: str
    bar: int = 123
BarModel = create_model(
    "BarModel",
    apple="russet",
    banana="yellow",
    __base__=FooModel,
)
print(BarModel)
# > 
print(BarModel.__fields__.keys())
# > dict_keys(['foo', 'bar', 'apple', 'banana'])
```
## [Abstract Base Classes](https://pydantic-docs.helpmanual.io/usage/models/#abstract-base-classes)
Pydantic models can be used alongside Python's
[Abstract Base Classes](https://docs.python.org/3/library/abc.html) (ABCs).
```python
import abc
from pydantic import BaseModel
class FooBarModel(BaseModel, abc.ABC):
    a: str
    b: int
    @abc.abstractmethod
    def my_abstract_method(self):
        pass
```
## [Field Ordering](https://pydantic-docs.helpmanual.io/usage/models/#field-ordering)
Field order is important in models for the following reasons:
- Validation is performed in the order fields are defined;
  [fields validators](pydantic_validators.md) can access the values of earlier
  fields, but not later ones
- Field order is preserved in the model
  [schema](https://pydantic-docs.helpmanual.io/usage/schema/)
- Field order is preserved in [validation errors](#error-handling)
- Field order is preserved by `.dict()` and `.json()` etc.
As of **v1.0** all fields with annotations (whether annotation-only or with a
default value) will precede all fields without an annotation. Within their
respective groups, fields remain in the order they were defined.
## [Field with dynamic default value](https://pydantic-docs.helpmanual.io/usage/models/#field-with-dynamic-default-value)
When declaring a field with a default value, you may want it to be dynamic (i.e.
different for each model). To do this, you may want to use a `default_factory`.
!!! info "In Beta" The `default_factory` argument is in **beta**, it has been
added to *pydantic* in **v1.5** on a **provisional basis**. It may change
significantly in future releases and its signature or behaviour will not be
concrete until **v2**. Feedback from the community while it's still provisional
would be extremely useful; either comment on
[#866](https://github.com/samuelcolvin/pydantic/issues/866) or create a new
issue.
Example of usage:
```python
from datetime import datetime
from uuid import UUID, uuid4
from pydantic import BaseModel, Field