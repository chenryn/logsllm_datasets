Throughput (Kbps)
(a) Global throughput distribution
(b) Throughput distribution per
cluster
Fig. 5. Throughputs for single session downloads
also provided by NetGeo), which acts as the Regional Internet Registry for the
whole of Europe, Middle East, Africa and part of Asia also. Thus we can guess
that most of these peers are spread all over Europe.
Table 2. Geographical origins of peers
Countries
United States
Netherlands (Europe)
Australia
Canada
% of total hosts
First week First four weeks Complete trace
44.6%
14.9%
12.7%
5.7%
77.9%
44.3%
15.3%
12.6%
5.8%
78%
32%
23.9%
17.8%
4.9%
78.6%
We next investigate the relative performance of the four clusters identiﬁed
above (US, NL, AU and CN). To do so, we consider again the 20, 584 peers that
complete the download in a single session. 17, 000 peers out of the 20, 584 initial
peers, are in the four clusters (11498 in US cluster, 2114 in NL, 1995 in AU and
1491 in CM). We plot in Figure 5(b) the distribution of download throughputs
achieved by the peers in the NL and US clusters (the AU and CN clusters are
highly similar to the US cluster and not depicted for sake of clarity). Figure
5(b) reveals that the download throughput of the hosts in the NL cluster is
signiﬁcantly smaller than the throughput of the hosts in the US cluster (where
more mass is on the right side of the curve). This can indicate that clients in the
US have, in general, better access links than in Europe.
Dissecting BitTorrent: Five Months in a Torrent’s Lifetime
9
5 Client Log Analysis
To better observe the individual behavior of a BitTorrent peer, we have run an
instrumented client behind a 10Mb/s campus network access link. Our client
joined the torrent approximatively in the middle of the 5 months period (i.e., far
after the initial ﬂash crowd). We experienced a transfer time of approximately
4, 500 seconds (i.e., much lower than the average download times previously
mentioned) and our client remained connected as a seed for 13 hours. Our client
logged detailed information about the upload or download of each individual
chunk. In Figure 6, we represent the number of peers with whom our client is
trading. At time 0, our client knows around 40 peers whose addresses have been
provided by the tracker. We next continuously discover new peers (peers that
contacted us) up to the end of the download (at time 4, 500 seconds) where we
observe a sudden decrease of the number of peers, most probably because the
seeds we where connected to have closed their connection to us as soon as we
have completed the download. After the download, we stay connected as seed to
between 80 and 95 leechers (4 of them being served while the others are choked).
Number of connected peers evolution
Cumulative download and upload evolution
Cumulative download and upload evolution
s
r
e
e
p
f
o
r
e
b
m
u
n
100
90
80
70
60
50
40
30
0
10000
20000
30000
40000
50000
time(s)
)
s
e
t
y
b
(
d
e
d
a
o
p
u
l
/
n
w
o
d
9e+09
8e+09
7e+09
6e+09
5e+09
4e+09
3e+09
2e+09
1e+09
0
download
upload
download
upload
7e+07
6e+07
5e+07
4e+07
3e+07
2e+07
1e+07
)
s
e
t
y
b
(
d
e
d
a
o
p
u
l
/
n
w
o
d
0
10000
20000
30000
40000
50000
time(s)
0
0
100
200
300
400
500
600
time(s)
Fig. 6. Number of peers
during and after download
Fig. 7. Complete torrent
Fig. 8. First 10 minutes of
download
Figures 7 and 8 show the amount of bytes downloaded and uploaded with
respect to time for the complete trace and the ﬁrst 10 minutes of the trace
respectively. From these ﬁgures, we can draw several conclusions:
– There is a warm-up period (around 100 seconds) to obtain some ﬁrst chunks.
But as soon as the client has obtained a few chunks, it is able to start
uploading to others peers. This means that the rarest ﬁrst policy works
well, otherwise our client would maybe not ﬁnd anyone interested in its ﬁrst
chunks.
– The download and upload rates are (positively) correlated, which indicates
that the tit-for-tat policy works. It also indicates that we always ﬁnd peers
interested in our chunks and peers from which we can download chunks.
Otherwise, we would observe some periods where the curves are ﬂat, indica-
ting that our client is stalled. Also, the way peer sets are built with “old” and
“new” peers mixed together must have a positive impact on the eﬃciency of
BitTorrent. Indeed, a torrent can be viewed as a collection of interconnected
sets of peers. A peer that joins a torrent will obviously be the youngest peer
in its initial set, but it may later be contacted by younger peers. It may also
10
M. Izal et al.
be contacted by older peers since peers try to keep contact with a minimum
number of peers (generally 20) throughout their lifetimes in the torrent. This
temporal diversity is a key component of the eﬃciency of BitTorrent, since
it guarantees with high probability that a given peer will ﬁnd other peers
(younger or older) that hold some missing chunks of the ﬁle.
– It takes twice as much the download period to upload the same quantity
of bytes (1.77GB) to the system. This illustrates the importance of peers
staying as seeds once they have completed the download. This means also
that we downloaded at a faster rate than we uploaded. This is due to the
fact that we have a high speed link and since seeds always seek for the fastest
downloaders, we should be consistently favored by the seeds that serve us.
We further investigated the type of clients we have been trading with. Overall,
we found that approximately 40% of the ﬁle was provided by seeds and 60%
by leechers. We also observed that more than 85% of the total ﬁle was sent by
only 20 peers, including the 8 seeds that provided 40% of the ﬁle. An interesting
remark is that these 20 top uploaders were not in our initial peer set provided
by the tracker, but contacted us later. We can thus conjecture that to obtain the
best possible performance with BitTorrent, clients should not be behind ﬁrewalls
or NATs that prevent inbound connections.
We also want to assess the eﬃciency of the tit-for-tat policy. A good tit-for-
tat policy should enforce clients to exchange chunks with one another, but with
enough ﬂexibility so as not to artiﬁcially block transfers when data does not ﬂow
at the same rate in both directions. BitTorrent avoids this type of problem by
chocking/unchoking connections every 10 seconds, a long period at the time scale
of a single TCP connection. We have studied the correlations between upload
and download throughput, as well as between upload and download traﬃc volu-
mes. Results show that, while traﬃc volumes are correlated (positive correlation
close to 0.5), the upload and download throughputs are not correlated (close to
0), which means that BitTorrent is ﬂexible. We also computed the correlations
between download volumes and download throughputs on one side and upload
volumes and upload throughputs on the other side. Both are correlated with va-
lue 0.9 and 0.5, respectively. The high correlation observed between downloaded
throughputs and volumes is probably due to the fact that the top three downlo-
aders are seeds that provide 29% of the ﬁle. The upload throughput and volume
are also correlated because, once our client becomes a seed, it continuously seeks
for the best downloaders, which is not the case during the download phase where
a peer primarily seeks for peers that have some chunks he is interested in.
6 Conclusion
Large content replication has become a key issue in the Internet; e.g. big compa-
nies are interested in a replication service to update simultaneously a large set
of hosts (e.g., virus patches or software updates). BitTorrent is a very popular
peer-to-peer application targeted at large ﬁle replication. We have extensively
analyzed a large torrent (with up to a few thousands simultaneously active cli-
ents) over a large period of time. The performance achieved, in terms of the
Dissecting BitTorrent: Five Months in a Torrent’s Lifetime
11
throughput per client during download and the ability to sustain high ﬂash-
crowd, demonstrate that BitTorrent is highly eﬀective.
There still remain open questions in the area of large content replication
such as: (i) what is the optimal (at least theoretically) replication policy, in
terms of response times, for a given user proﬁle (arrival rates, willingness to
stay as seeds), (ii) how to build a robust replication service, i.e. to ensure that
all machines eventually complete the downloads (a must for corporate usage),
(iii) how to eﬃciently protect these applications against denial of service and
malicious peers.
Acknowledgment. We are extremely grateful to Eike Frost for kindly provi-
ding us with the tracker log of the torrent analyzed in this paper.
References
1. E. Adar and B. A. Huberman, “Free Riding on Gnutella”, First Monday, 5(10),
October 2000.
2. L. Cherkasova and J. Lee, “FastReplica: Eﬃcient Large File Distribution within
In Proceedings of the 4th USENIX
Content Delivery Networks (USITS 2003)”,
Symposium on Internet Technologies and Systems, March 2003.
3. Y.-H. Chu, S. G. Rao, and H. Zhang, “A case for end system multicast”, In ACM
SIGMETRICS 2000, pp. 1–12, Santa Clara, CA, USA, June 2000.
4. B. Cohen, “Incentives to Build Robustness in BitTorrent”,
http://bitconjurer.org/BitTorrent/bittorrentecon.pdf, May 2003.
5. J. Jannotti, D. K. Giﬀord, and K. L. Johnson, “Overcast: Reliable Multicasting
with an Overlay Network”, In Proc. 4-th Symp. on Operating Systems Design and
Implementation, Usenix, October 2000.
6. S. Ratnasamy, M. Handley, R. M. Karp, and S. Shenker, “Application-Level Mul-
ticast Using Content-Addressable Networks”, In NGC 2001, pp. 14–29, November
2001.
7. P. Rodriguez and E. W. Biersack, “Dynamic Parallel-Access to Replicated Content
in the Internet”, IEEE/ACM Transactions on Networking, 10(4):455–464, August
2002.
8. A. Rowstron et al., “SCRIBE: The design of a large scale event notiﬁcation infra-
structure”, In Proc. NGC 2001, November 2001.
9. R. Sherwood, R. Braud, and B. Bhattacharjee, “Slurpie: A Cooperative Bulk Data
Transfer Protocol”, In Proceedings of IEEE INFOCOM, March 2004.