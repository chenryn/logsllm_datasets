### Throughput (Kbps)

- **(a) Global Throughput Distribution**
- **(b) Throughput Distribution per Cluster**

**Figure 5.** Throughputs for single session downloads, as provided by NetGeo, which acts as the Regional Internet Registry for Europe, the Middle East, Africa, and parts of Asia. This suggests that most of these peers are distributed across Europe.

### Geographical Origins of Peers

| Country            | % of Total Hosts (First Week) | % of Total Hosts (First Four Weeks) | % of Total Hosts (Complete Trace) |
|--------------------|-------------------------------|-------------------------------------|-----------------------------------|
| United States      | 44.6%                         | 44.3%                               | 32%                               |
| Netherlands (EU)   | 14.9%                         | 15.3%                               | 23.9%                             |
| Australia          | 12.7%                         | 12.6%                               | 17.8%                             |
| Canada             | 5.7%                          | 5.8%                                | 4.9%                              |
| Other              | 22.1%                         | 22.0%                               | 22.3%                             |

### Performance Analysis of Clusters

Next, we examine the relative performance of the four clusters identified: US, NL, AU, and CN. We focus on the 20,584 peers that completed the download in a single session. Out of these, 17,000 peers are within the four clusters (11,498 in the US cluster, 2,114 in the NL cluster, 1,995 in the AU cluster, and 1,491 in the CN cluster).

**Figure 5(b)** shows the distribution of download throughputs for peers in the NL and US clusters. The AU and CN clusters exhibit similar characteristics to the US cluster and are not depicted for clarity. The figure reveals that the download throughput for hosts in the NL cluster is significantly lower than that of the US cluster, indicating that clients in the US generally have better access links compared to those in Europe.

### Client Log Analysis

To gain deeper insights into the individual behavior of a BitTorrent peer, we ran an instrumented client on a 10 Mbps campus network link. Our client joined the torrent approximately midway through the five-month period, well after the initial flash crowd. The transfer time was approximately 4,500 seconds, and our client remained connected as a seed for 13 hours. Detailed logs were recorded for each chunk's upload and download.

**Figure 6** illustrates the number of peers with whom our client interacted. At the start, our client knew about 40 peers provided by the tracker. Over time, we continuously discovered new peers until the end of the download, where we observed a sudden decrease in the number of peers, likely due to seeds disconnecting once our download was complete. After the download, we remained connected as a seed to between 80 and 95 leechers, with 4 of them being served while the others were choked.

**Figures 7 and 8** show the cumulative download and upload volumes over time for the complete trace and the first 10 minutes, respectively. Key observations include:

- **Warm-up Period:** There is an initial warm-up period of around 100 seconds to obtain the first chunks. Once a few chunks are obtained, the client can start uploading to other peers, indicating the effectiveness of the rarest-first policy.
- **Correlation Between Download and Upload Rates:** The download and upload rates are positively correlated, suggesting that the tit-for-tat policy works. This also indicates that we consistently find peers interested in our chunks and from whom we can download.
- **Temporal Diversity:** The mixing of "old" and "new" peers in peer sets enhances the efficiency of BitTorrent. A new peer will be the youngest in its initial set but may later be contacted by younger or older peers, ensuring a high probability of finding missing chunks.
- **Upload vs. Download Time:** It takes twice as long to upload the same amount of data (1.77 GB) as it does to download it, highlighting the importance of peers staying as seeds. This also indicates that we downloaded at a faster rate than we uploaded, likely due to our high-speed link and the preference of seeds for fast downloaders.

### Peer Interaction Analysis

We found that approximately 40% of the file was provided by seeds and 60% by leechers. More than 85% of the total file was sent by just 20 peers, including the 8 seeds that provided 40% of the file. These top uploaders were not in our initial peer set but contacted us later, suggesting that optimal BitTorrent performance is achieved when clients are not behind firewalls or NATs that prevent inbound connections.

### Tit-for-Tat Policy Efficiency

A good tit-for-tat policy should encourage chunk exchange with enough flexibility to avoid blocking transfers. BitTorrent avoids this by choking/unchoking connections every 10 seconds. Our analysis shows that while traffic volumes are positively correlated (close to 0.5), upload and download throughputs are not (close to 0), indicating flexibility. The high correlation between download volumes and throughputs (0.9) and upload volumes and throughputs (0.5) is likely due to the top three downloaders being seeds providing 29% of the file.

### Conclusion

Large content replication is a critical issue in the Internet, and BitTorrent is a highly effective peer-to-peer application for large file replication. Our extensive analysis of a large torrent over five months demonstrates its high performance and ability to handle flash crowds. However, open questions remain, such as the optimal replication policy, building robust replication services, and protecting against denial of service and malicious peers.

### Acknowledgment

We are grateful to Eike Frost for providing the tracker log of the torrent analyzed in this paper.

### References

1. Adar, E., & Huberman, B. A. (2000). Free Riding on Gnutella. First Monday, 5(10).
2. Cherkasova, L., & Lee, J. (2003). FastReplica: Efficient Large File Distribution within Content Delivery Networks. In Proceedings of the 4th USENIX Symposium on Internet Technologies and Systems.
3. Chu, Y.-H., Rao, S. G., & Zhang, H. (2000). A case for end system multicast. In ACM SIGMETRICS 2000.
4. Cohen, B. (2003). Incentives to Build Robustness in BitTorrent. http://bitconjurer.org/BitTorrent/bittorrentecon.pdf.
5. Jannotti, J., Giï¬€ord, D. K., & Johnson, K. L. (2000). Overcast: Reliable Multicasting with an Overlay Network. In Proc. 4-th Symp. on Operating Systems Design and Implementation.
6. Ratnasamy, S., Handley, M., Karp, R. M., & Shenker, S. (2001). Application-Level Multicast Using Content-Addressable Networks. In NGC 2001.
7. Rodriguez, P., & Biersack, E. W. (2002). Dynamic Parallel-Access to Replicated Content in the Internet. IEEE/ACM Transactions on Networking, 10(4).
8. Rowstron, A., et al. (2001). SCRIBE: The design of a large scale event notification infrastructure. In Proc. NGC 2001.
9. Sherwood, R., Braud, R., & Bhattacharjee, B. (2004). Slurpie: A Cooperative Bulk Data Transfer Protocol. In Proceedings of IEEE INFOCOM.