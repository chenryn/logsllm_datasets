::: itemizedlist
**流程**
-   要在用户的附加组中添加一个组，请使用：
    ``` screen
    # usermod --append -G group-name username
    ```
    使用组群名称替换 [*group- name*]{.emphasis}，并将
    [*group-name*]{.emphasis} 替换为组的名称。
    ::: example
    []{#editing-user-groups-using-the-command-line_configuring-basic-system-settings.html#idm140217693184960}
    **例 21.4. 将用户添加到补充组**
    ::: example-contents
    要将用户 `sysadmin`{.literal} 添加到
    `system-administrators`{.literal} 组中，请使用：
    ``` screen
    # usermod --append -G system-administrators sysadmin
    ```
    :::
    :::
:::
::: itemizedlist
**验证步骤**
-   要验证新的组被添加到用户 `sysadmin`{.literal} 的附加组中，请使用：
    ``` screen
    # groups sysadmin
    ```
    输出显示：
    ``` screen
    sysadmin : sysadmin system-administrators
    ```
:::
:::
::: section
::: titlepage
# []{#editing-user-groups-using-the-command-line_configuring-basic-system-settings.html#removing-a-user-from-a-supplementary-group_editing-user-groups-using-the-command-line}从补充组中删除用户 {.title}
:::
您可以从补充组中删除现有用户，以限制其权限或访问文件和设备。
::: itemizedlist
**先决条件**
-   `root`{.literal} 访问权限
:::
::: itemizedlist
**流程**
-   从补充组中删除用户：
    ``` screen
    # gpasswd -d user-name group-name
    ```
    使用用户名替换 [*user-name*]{.emphasis}，并使用补充组的名称替换
    [*group-name*]{.emphasis}。
    ::: example
    []{#editing-user-groups-using-the-command-line_configuring-basic-system-settings.html#idm140217706622432}
    **例 21.5. 从补充组中删除用户**
    ::: example-contents
    如果用户 sarah 有主组 `sarah2`{.literal}，并属于次要组
    `wheel`{.literal} 和 `developers`{.literal}，而您想要从组
    `developers`{.literal} 中删除该用户，请使用：
    ``` screen
    # gpasswd -d sarah developers
    ```
    :::
    :::
:::
::: itemizedlist
**验证步骤**
-   验证是否从第二个组开发人员中删除了用户 sarah：
    ``` screen
    $ groups sarah
    ```
    输出显示：
    ``` screen
    sarah : sarah2 wheel
    ```
:::
:::
::: section
::: titlepage
# []{#editing-user-groups-using-the-command-line_configuring-basic-system-settings.html#changing-the-supplementary-groups-of-the-user_editing-user-groups-using-the-command-line}更改用户的所有附加组群 {.title}
:::
您可以覆盖希望用户保持成员的辅组列表。
::: itemizedlist
**先决条件**
-   `root`{.literal} 访问权限
-   补充组必须存在
:::
::: itemizedlist
**流程**
-   覆盖用户附属组列表：
    ``` screen
    # usermod -G group-names username
    ```
    使用一个或多个补充组的名称替换
    [*group-names*]{.emphasis}。要一次将用户添加到多个补充组，请使用逗号分隔组名称，且不会有空格。例如：
    `wheel,developer`{.literal}。
    使用用户名称替换 [*user-name*]{.emphasis}。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果用户当前是您未指定的组的成员，该命令会从组中删除该用户。
    :::
    ::: example
    []{#editing-user-groups-using-the-command-line_configuring-basic-system-settings.html#idm140217709260576}
    **例 21.6. 更改用户的补充组群列表**
    ::: example-contents
    如果用户 `sarah`{.literal} 有主组 `sarah2`{.literal}，并属于补充组
    `wheel`{.literal}，并且您希望用户属于另外三个补充组
    `developer`{.literal}, `sysadmin`{.literal}, 和
    `security`{.literal}，请使用：
    ``` screen
    # usermod -G wheel,developer,sysadmin,security sarah
    ```
    :::
    :::
:::
::: itemizedlist
**验证步骤**
-   验证补充组群列表是否正确：
    ``` screen
    # groups sarah
    ```
    输出显示：
    ``` screen
    sarah : sarah2 wheel developer sysadmin security
    ```
:::
:::
:::
[]{#managing-sudo-access_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#managing-sudo-access_configuring-basic-system-settings.html#managing-sudo-access_configuring-basic-system-settings}第 22 章 管理 sudo 访问 {.title}
:::
系统管理员可以授予 `sudo`{.literal} 访问权限，以允许非 root
用户执行通常为 `root`{.literal} 用户保留的管理命令。因此，非 root
用户可以在不登录 `root`{.literal} 用户帐户的情况下执行这样的命令。
::: section
::: titlepage
# []{#managing-sudo-access_configuring-basic-system-settings.html#con_user-authorizations-in-sudoers_managing-sudo-access}sudoers 中的用户授权 {.title}
:::
`/etc/sudoers`{.literal} 文件指定哪些用户可以使用 `sudo`{.literal}
命令运行哪些命令。规则可以应用到单个用户和用户组。您还可以使用别名来简化主机组、命令甚至用户组的定义规则。默认别名在
`/etc/sudoers`{.literal} 文件的第一个部分中定义。
当用户尝试使用 `sudo`{.literal} 权限来运行在 `/etc/sudoers`{.literal}
文件中不允许使用的命令时，系统会将带有
`username : user NOT in sudoers`{.literal} 的信息记录到 journal 日志中。
默认的 `/etc/sudoers`{.literal}
文件提供了授权信息和示例。您可以通过从行首删除 `#`{.literal}
注释字符来激活特定示例规则。与用户相关的 authorizations
部分被标记为以下介绍：
``` screen
## Next comes the main part: which users can run what software on
## which machines  (the sudoers file can be shared between multiple
## systems).
```
您可以使用以下格式创建新 `sudoers`{.literal} 授权并修改现有授权：
``` screen
username hostname=path/to/command
```
其中：
::: itemizedlist
-   [*username*]{.emphasis} 是用户或组的名称，如 `user1`{.literal} 或
    `%group1`{.literal}。
-   [*hostname*]{.emphasis} 是规则适用的主机的名称。
-   [*path/to/command*]{.emphasis}
    是该命令的完整路径。您还可以通过在命令路径后添加这些选项，将用户限制为仅在具有特定选项和参数执行命令。如果没有指定任何选项，用户可以使用该命令及所有选项。
:::
您可以将任何这些变量替换为
`ALL`{.literal}，以将规则应用到所有用户、主机或命令。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
使用 permissive 规则（如 `ALL=(ALL)ALL）`{.literal}
时，所有用户都可以作为所有主机上的所有用户运行。这可能会存在安全风险。
:::
您可以使用 `!`{.literal} 指定负参数。例如，使用 `!root`{.literal} 指定除
`root`{.literal} 用户之外的所有用户。请注意，使用 allowlists
允许特定用户、组和命令比使用 blocklists
更安全，以禁止特定用户、组和命令。通过使用允许列表，您还会阻止新的未授权的用户或组。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
避免对命令使用负规则，因为用户可以通过使用 `alias`{.literal}
命令重命名命令来克服这样的规则。
:::
系统会从开始到结尾读取 `/etc/sudoers`{.literal}
文件。因此，如果文件包含多个用户条目，则会按顺序应用条目。如果有冲突的值，系统将使用最后一个匹配项，即使它不是最具体的匹配项。
向 sudoers 添加新规则的首选方式是在
`/etc/ sudoers`{.literal}.d/``{=html}
目录中创建新文件，而不是直接在 `/etc/sudoers`{.literal}
文件中输入规则。这是因为在系统更新过程中保留此目录的内容。另外，修复独立文件中的任何错误比
`/etc/sudoers`{.literal} 文件中的任何错误更容易。当在
`/etc/sudoers`{.literal} 文件中出现以下行时，系统读取
`/etc/sudoers.d`{.literal} 目录中的文件：
``` screen
#includedir /etc/sudoers.d
```
请注意，在该行开头的数字符号 `#`{.literal}
是语法的一部分，并不意味着该行是一个注释。该目录中文件的名称不能包含句点（`.`{.literal}），且不能以波形符
`~`{.literal} 结尾。
:::
::: section
::: titlepage
# []{#managing-sudo-access_configuring-basic-system-settings.html#granting-sudo-access-to-a-user_managing-sudo-access}为用户授予 sudo 访问权限 {.title}
:::
系统管理员可以授予 `sudo`{.literal} 访问权限来允许非 root
用户执行管理命令。`sudo`{.literal} 命令在不使用 `root`{.literal}
用户密码的情况下为用户提供管理访问。
当用户需要执行管理命令时，您可以在使用 `sudo`{.literal}
命令前执行该命令。然后会像 `root`{.literal} 用户一样执行该命令。
请注意以下限制：
::: itemizedlist
-   只有 `/etc/sudoers`{.literal} 配置文件中列出的用户才能使用
    `sudo`{.literal} 命令。
-   该命令在用户的 shell 中执行，而不是在 `root`{.literal} shell
    中执行。
:::
::: itemizedlist
**先决条件**
-   `root`{.literal} 访问权限
:::
::: orderedlist
**流程**
1.  以 root 用户身份，打开 `/etc/sudoers`{.literal} 文件。
    ``` screen
    # visudo
    ```
    `/etc/sudoers`{.literal} 文件定义 `sudo`{.literal} 命令应用的策略。
2.  在 `/etc/sudoers`{.literal} 文件中找到可为管理 `wheel`{.literal}
    组群中的用户授予 `sudo`{.literal} 访问权限的行。
    ``` screen
    ## Allows people in group wheel to run all commands
    %wheel        ALL=(ALL)       ALL
    ```
3.  确保以 `%wheel`{.literal} 开头的行前面没有 `#`{.literal} 注释字符。
4.  保存所有更改并退出编辑器。
5.  将您要授予 `sudo`{.literal} 访问权限的用户添加到管理
    `wheel`{.literal} 组中。
    ``` screen
     # usermod --append -G wheel username
    ```
    使用用户名替换 [*username*]{.emphasis}。
    ::: itemizedlist
    **验证步骤**
    -   验证用户是否已添加到管理 `wheel`{.literal} 组中：
        ``` screen
        # id username
        uid=5000(username) gid=5000(_username) groups=5000(username),10(wheel)
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#managing-sudo-access_configuring-basic-system-settings.html#proc_configuring-sudo-privileges_managing-sudo-access}启用非特权用户运行某些命令 {.title}
:::
您可以配置策略，以允许非特权用户在特定工作站上运行特定的命令。要配置此策略，您需要在
`sudoers.d`{.literal} 目录中创建并编辑文件。
::: itemizedlist
**先决条件**
-   `root`{.literal} 访问权限
:::
::: orderedlist
**流程**
1.  以 root 用户身份，在 `/etc/`{.literal} 下创建一个新的
    `sudoers.d`{.literal} 目录：
    ``` screen
    # mkdir -p /etc/sudoers.d/
    ```
2.  在 `/etc/sudoers.d`{.literal} 目录中创建一个新文件：