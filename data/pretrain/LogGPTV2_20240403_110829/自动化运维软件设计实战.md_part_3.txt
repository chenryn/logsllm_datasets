执行
决策
Zabbix
Puppet
什么是自动化运维
---
## Page 22
工具，以及如何与Zabbix进行整合，让监控去触发运维作业。
主要与读者分享为什么需要重新造一个轮子，如何设计一套跨平台、易部署的自动化运维
器上下架等工作具备更多的自动化操作，更少的人工干预。
机的"）的时候，又觉得能够让流程去驱动运维工作，那才叫自动化运维，例如能够让服务
叫自动化运维。到后来，笔者着手开发基础业务运维系统（按照同事开玩笑的话就是“搞
一点是要和监控结合起来才叫自动化运维，让主机根据自身的情况为自己解决问题，这才
当和同事讨论这款软件怎么和监控软件整合在一起的时候，突然又觉得自动化运维重要的
的运维软件就是自动化运维软件，使用这些软件就能够让我们的运维达到自动化的程度。
务领域不同罢了。
自动化运维工具。不同的人对同一件事情会有相距甚远的看法，主要是因为各自接触的业
都没错，其实一切能让我们把人工的运维操作交给计算机去完成的运维工具，都算得上是
运维，或者说能够根据监控的动作去触发某些指定的动作就是自动化运维。笔者认为这些
们会认为能够批量地操作主机就算是自动化运维，能够定期地出具巡检报告就算是自动化
自动化运维软件设计实战
所以说，自动化运维的范围非常广，一本书也无法涵盖如此多的内容。本书后续章节
笔者在做一款业务运维的自动化运维软件之前，认为Puppet、SaltStack、Ansible这样
---
## Page 23
的运维操作。我们会进行一系列的实践，所以请读者准备两台虚拟机以方便后续的学习。
2.1环境准备
对Ansible有一个基础性的了解。
的安装、基础使用方式、常用模块、PlayBook以及AnsibleAPI的使用，让读者能够快速地
大工作量的问题。
免了Agent升级的问题，另一方面也避免了第一次安装时需要集中部署客户端所带来的巨
SSH协议进行通信，也就是说目标主机上只要有SSH就可以用了。这种设计方式一方面避
任务。
化运维软件所描述的是一个运维操作应该怎么去做，它更关心的是应该如何去完成一个
维任务等功能。它是一款命令式的集中化运维软件。前面我们也讨论过，命令式的集中
首先，我们需要对Ansible的基础功能有一个大概的了解，知道它究竟能做一些什么样
与其他运维软件相比，Ansible的学习曲线没那么陡峭，十分容易上手。下面讲解Ansible
与Puppet这类具备Agent端的运维软件相比，Ansible具备了无Agent 端的优势，采用
Ansible是集中化运维工具的代表之一，它提供了系统配置、软件部署和流程化IT运
Ansible
---
## Page 24
rpm-ivhhttp://dl.fedoraproject.org/pub/epe1/6/x86_64/epe1-release-6-8.noarch.rpm
装时的依赖包问题。
进行编译这两种方式。
2.2
接触到的一个安全系统背后就有800多台设备在做支持。
往都是成百上千台，这个实验环境只是一个大环境下的缩影。笔者曾经在实际生产环境所
口是对外放通的就可以了。在实际运维环境中，目标主机的数量不会只有几台这么少，往
方式与远端主机交互的。我们只要确保运维目标主机上的SSH服务是开启的，并且22端
实验环境配置如表2.1所示。
自动化运维软件设计实战
个简化了的实践环境。由于Ansible是不需要Agent端的集中化运维工具，它是通过SSH
安装EPEL源：
这是一种能够最快速接触并感受到Ansible方便的安装方法，我们无须烦恼Ansible安
2.2.1
安装Ansible的方式有很多种，下面介绍使用CentOS的EPEL源进行安装和采用源码
为了能让读者更好地进行实验，了解Ansible的用途以及所提供的功能，上面提供的是
整个实验的环境结构如图2.1所示。
安装 Ansible
CentOS6.4
CentOS6.4
操作系统
使用CentOS的EPEL源进行安装
AnsibleServer
表2.1Ansible的实验环境
图2.1Ansible实验环境
192.168.41.139
192.168.41.136
IP
(CentOS6.4)
目标主机
运维目标主机
Ansible Server
作
---
## Page 25
经装好，可以开始下面的学习就够了。
足RHEL和其他兼容版本的软件仓库。
Fedora Project的志愿者发起的社区力量，为了创建由高质量的附加软件组成的、用于补
上面这些IP是从哪里来的呢？我们暂且先不管，我们只需要知道Ansible 管理节点已
10.25.1.571FAILED => FAILED:timedout
db-101-node.example.com | FAILED => FAILED: [Errno -2] Name or service not known
db02.intranet.mydomain.net I FAILED => FAILED:timed out
10.25.1.561FAILED => FAILED:timed out
db-100-node.example.com | FAILED => FAILED:[Errno -2] Name or service not known
db-99-node.example.com I FAILED => FAILED:[Errno -2] Name or service not known
wwwO05.example.cOm 1 FAILED => FAILED:
192.168.1.110IFAILED=> FAILED:timed out
www003.example.com I FAILED => FAILED:[Errno
192.168.1.100 1 FAILED=> FAILED:timed out
www001.example.comI FAILED
beta.example.org I FAILED => FAILED:[Errno -2] Name or service not known
blue.example.com I FAILED => FAILED:[Errno -2] Name
当 Ansible安装成功后，执行上述命令就会打印出类似下面的结果：
测试Ansible是否安装成功：
通过Yum源安装Ansible：
wwwOO2.example.com I FAILED => FAILED:[Errno
192.168.100.101FAILED=>
192.168.100.1IFAILED=>
green.example.com I FAILED => FAILED:[Errno
ansible all -m ping
yum install ansible
=> FAILED:[Errno
FAILED:timed out
FAILED:timed out
[Errno
-2] Name or service not known
-21
-2] Name or service not knowr
-2] Name
-2] Name or service not knowr
-21
Name or service not knowr
Name
集中化运维利器一
or service not knowr
or service not known
or service not knowr
-Ansible
known
---
## Page 26
就可以看到如下所示的信息了。
时候我们就会有这样一个疑问，这些主机信息都是从哪里来的呢？
2.3
下面的安装过程使用的环境依然是CentOS。
自动化运维软件设计实战
理Python包。
PyPI）一起工作来实现相同的功能。它可以很方便地让用户自动下载、编译、安装和管
具和随之而生的扩展后的easy_install与“Cheeseshop”（Python Package Index，也称为
用户比较熟悉CPAN，而Ruby用户则比较熟悉Gems；引导setuptools的ez_setup工
）)easy_install是由 PEAK（Python Enterprise Application Kit）开发的 setuptools 包里的
Ansible默认会把所管理的目标主机信息存放于/etc/ansible/hosts 中，打开hosts 文件，
我们在执行完“ansibleall-m ping”这一条命令之后，发现出现了许多主机信息，这个
假如在安装过程中出现了如下错误，请检查一下是否安装了python-devel：
安装 python-setuptools:
Ansible 其实可以看作一个 Python 的模块,所以当然也能够通过Easy_Install进行安装，
2.3.1
安装Ansible：
2.2.2
Ansible基础
#include "Python.h"
src/MD2.c:31:20: fatal error:Python.h:No such file or directory
easy
yum install python-setuptools
使用Easy_Install安装Ansible
资产配置
install ansible
---
## Page 27
让它去执行就可以了。
机组就可以了，例如要对dbservers的主机进行集中化重启，那么只需要把组名交给Ansible
另一类。当我们需要对某类服务器进行操作的时候，就可以直接指定这一类主机所在的主
的在于为服务器进行分类，把属于数据库的服务器分为一类，把属于中间件的服务器分为
这表明这些主机分别属于[webservers]组和[dbservers]组。这样配置目标设备分类的主要目
明了我们需要管理的主机有四台，可以看到配置IP和域名都是可行的。
接下来的这段配置信息有点不一样，它们都有[webservers]和[dbservers]这样的标签，
这是Ansible的资产配置文件，定义了究竟Ansible需要管理哪些主机，第1～4行声
beta.example.org
alpha.example.org
192.168.100.10
192.168.100.1
blue.example.com
green.example.com
db-[99:101]-node.example.com
10.25.1.57
10.25.1.56
db02.intranet.mydomain.net
dbo1.intranet.mydomain.net
192.168.1.110
192.168.1.100
beta.example.org
alpha.example.org
192.168.100.10
192.168.100.1
blue.example.com
[webservers]
[dbservers]
[webservers]
green.example.com
集中化运维利器一
-Ansible
---
## Page 28
台主机的别名是oracleServer。
里面指定设备的别名。下面的配置表示目标主机为192.168.1.50，使用的端口是5555，这
时需要使用5309这个端口。
端口的方式去连接目标主机。下面的配置说明了Ansible在操作192.168.41.139这台服务器
192.168.41.139加入到hosts文件中。
只需要在配置文件里面配置192.168.1.[100:200]就可以了。
192.168.1.100到192.168.1.200这个IP端的设备需要使用Ansible进行集中运维，这个时候
的这一批主机也是受Ansible管理的。
自动化运维软件设计实战
指定设备别名的原因是为了减少在设备数量很多时的记忆成本，可以在资产配置信息
理解Ansible的配置文件的设置方式之后，把hosts文件清空，然后把实践所用的主机
（2）指定设备的别名。
有些时候目标客户机的SSH端口没有开在22端口上，这个时候就需要使用指定SSH
Ansible的资产配置有许多种方法，我们挑一些比较常用的配置方法来进行学习。
1.常用的资产配置方式
这种配置非常适合于主机IP或者域名比较有规律的设备，例如我们有一批位于
最后一段配置信息比较特别，它表明从db-99-node.example.com到db-101-node.example.com
（1）指定连接设备所使用的SSH端口。
oracleServer ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50
192.168.41.139:5309
db-[99:101]-node.example.com
10.25.1.57
10.25.1.56
db02.intranet.mydomain.net
db01.intranet.mydomain.net
192.168.1.110
192.168.1.100
[dbservers]
---
## Page 29
的主机进行操作：
下信息，表明我们需要用用户名为root、密码为1q2w3e4r的账号去对IP为192.168.41.139
的认证了。
ansible_ssh_user 和ansible_ssh_pass这两个参数之后，Ansible 就会采用 sshpass 进行 SSH
Ansible会从认证的Key里面找，通过双机互信的方式进行SSH 的连接。当指定了
个变量，由于Ansible是采用SSH与目标主机进行通信的，当没有指定SSH密码的时候，
维的目标主机是从db-a.example.com到db-f.example.com的主机。
别声明了运维的目标主机为从www.01.example.com到www.50.example.com的主机。
然后直接登录远程服务器。例如：sshpass-p'ssh_password'sshwww.iredmail.org。
式传递密码，sshpass 的出现解决了这一问题。它允许我们用-p 参数指定明文密码，
）)OpenSSH自带的SSH客户端程序（也就是‘ssh'命令）默认不允许以非交互的方
在了解了主机资产的配置方法之后，我们先把/etc/ansible/hosts 中的内容清空，加入如
2.3.2
Ansible所提供的资产配置常用的变量如表2.2所示，值得留意的是ansible_ssh_pass这
2.资产配置中的常用变量
除了支持以数字作为范围之外，还支持用英文进行范围的声明。下面的例子声明了运
通配符配置的方式可以帮助我们减少连续的主机名或IP的配置工作量。下面的例子分
（3）采用通配符进行配置。
192.168.41.139 ansible_ssh user-root ansible ssh pass=1q2w3e4r 
db-[a:fl.example.com
www.[01:50].example.com
执行命令
ansible_python_interpreter
ansible_ssh_pass
ansible_ssh_user
ansible_ssh_port
ansible_ssh_host
变
表2.2Ansible所提供的资产配置常用变量
章集中化运维利器一Ansible
指定目标主机Python路径
指定SSH连接密码
指定SSH连接用户
指定SSH连接端口
指定远程主机
作
用
---
## Page 30
就能得到正确的结果了。
/ansible/ansible.cfg，把#host_key_checking=False这一句的注释去掉，然后再执行一次命令，
这个问题，不要让Ansible对SSH-KEY进行检查就可以了。修改配置文件/etc
Ansible就卡在了询问是否记录SSH密钥的位置了。可以通过修改配置文件的方式来解决
问是否记录SSH密钥的位置：
自动化运维软件设计实战
排除指定的主机组：
指定所有的主机：
Ansible命令的基本语法格式如下所示。pattern参数声明了需要操作的目标主机，
2.3.3
这是由于Ansible检查服务器存放的SSH-KEY造成的，因为没有添加双机互信，所以
指定同时存在于两个组的主机：
指定特定的主机组：
我们期望目标主机会返回HelloWorld的结果，但是实际上Ansible的执行却卡在了询
配置完成后，输出第一条命令：
ansible all -m shell -a"uptime"
HelloWorld
192.168.41.139| successI rc=0 >>
Are you sure you want to continue connecting (yes/no)?
The ssh-rsa key fingerprint is 75c4e8af474a9ecbaele32d3c2550306.
ansible all-a"echo HelloWorld"
ansible webservers:dbservers -m shell -a "uptime"
paramiko: The authenticity of host'192.168.41.139can't be established.
指定目标主机
---
## Page 31
group=mdehaan state=directory"
在自己的环境上亲自做一下，有一个大致的印象就可以了。
创建文件夹：
为文件赋予指定的权限：
下发文件：
2.文件操作
底层SSH模块：
Shell模块：
重启主机：
1.命令执行
以下的示例主要目的是为了让读者对Ansible的常用模块有一个大概的了解，读者可以
2.3.4
采用正则表达式指定主机：
复合条件：
ansible all -m file
 e
ansible all -m raw -a "hostname --fqdn"
ansible webservers:dbservers:&staging:!phoenix -m shell -a "uptime"
常用命令示例
章集中化运维利器一
-Ansible
---
## Page 32
version=HEAD"
自动化运维软件设计实战
重启服务：
启动服务：
6.服务管理
使用Git拉取文件：
5.
删除用户：
新增用户：
4.用户管理
卸载安装包：
安装最新版本的安装包：
安装指定版本的包：
使用Yum源进行安装：
3.包管理模块
删除文件：
版本管理
ansibleall
ansible all -m user -a "name=foo state=absent" 
ansible all -m user -a "name=demo password=lq2w3e4r"
ansible
ansible webservers -m yum -a "name-acme-i.5 state-installed"
ansible webservers -m yum -a "name=acme state-installed"
ansible all -m file -a "dest=/path/to/c state=absent"
webservers -m yum -a "name-acme state-removed"
---
## Page 33
配不同的配置文件时，可以考虑使用此模块。组装的方式如图2.2所示。
些简要的说明。剩余的模块，在工作的时候用到了，查一下就可以。
Ansible里面内置的模块。下面仅对几个常用的模块进行介绍并对每个模块的使用场景做一
2.4
assemble模块用于把多份配置文件片段组装成一份配置文件，当需要对不同的主机分
2.4.1
获取设备的信息列表：
8.设备信息查询
后台运行1800秒，每60秒检查一次作业状态：
检查作业状态：
启动一个执行360秒的后台作业：
7.后台管理
1.文件组装模块一
停止服务：
Ansible常用模块
ansible all -m setup
ansible all -B 1800 -P 60-a "/usr/bin/long_running_operation --do-stuff"
ansible all -B 360 -a "/usr/bin/long_running_operation --do-stuff"
ansible webservers -m service -a "name=httpd state=restarted"
文件管理模块
-assemble
集中化运维利器一
-Ansible
---
## Page 34
在目标主机上安装libselinux-python模块才能使用copy模块。
人能阻止它。SELinux提供了比传统的UNIX权限更好的访问控制。
假设某个程序打算把含有潜在重要信息的文件放到/tmp目录下，那么在DAC情况下没
SELinux的补丁。最后还有一个相应的安全策略，任何程序对其资源享有完全的控制权。