monitor installed virtual machines. More ideas based on
hypervisor has been proposed and implemented on popular
hypervisors such as Xen [22, 23].
Although positioned underneath and separated from the
virtual machines, it has been warned that the hypervisors
can be also exploited with software vulnerabilities. Many
vulnerabilities of Xen are already reported and amended [1,
2, 3, 4]. The discovery of hypervisor vulnerabilities might
continue as the hypervisors are expanding in terms of code
size and software complexity. This implies that the hypervi-
sor might not be a safe independent execution environment,
which is an imperative requirement for a security monitor.
There has been attempts to design minimal hypervisors
for more secure execution environment for security moni-
toring [13, 17, 25, 26]. The idea is to include only essential
software components to minimize the attack surface for soft-
ware vulnerabilities. Some of such works used static analysis
to ensure that their hypervisor is vulnerability-less. SecVi-
sor, the most well-known work of among such approaches,
introduced higher performance degradation than the popu-
lar hypervisor software Xen.
Recently, Rhee et al [24] proposed an event-driven in-
tegrity monitor based on hypervisor. With event-driven na-
ture, it can be considered as a hypervisor version of snoop-
based monitoring. However, the security of the integrity
monitor itself heavily relies on the premise that the hypervi-
sors are vulnerability free. Besides, it reported non-negligent
performance degradation.
8.2 Hardware-based Approaches
Another approach in implementing a kernel integrity mon-
itor out of operating system is attaching an independent
hardware component. The idea of securing operating system
using SMP (Symmetric Multi-Processor) was ﬁrst proposed
by Hollingworth et al. [16]. Later, X.Zhang et al. proposed
IDS (Intrusion Detection System) based on a coprocessor
independent from the main processor
[30]. Petroni et al.
designed and implemented Copilot [20], which is a kernel
runtime integrity monitor operating on a coprocessor PCI-
card. More snapshot-based works followed after Copilot and
inherited the limitations of snapshot-based mechanism pre-
sented in Copilot. [8, 21].
Intel also contributed to the trend, by presenting a hardware-
based support snapshot-based rootkit detection called as
DeepWatch [10]. J. Wang et al. designed HyperCheck [28]
which is an integrity monitor for hypervisors based on a PCI
card and the SMM (System Management Mode) [12]. A. M.
Azab et al also proposed a framework called HyperSentry [7]
for monitoring the integrity of hypervisors with their agent
planted in the SMM. The critical drawback of using SMM
for security monitoring is that all system activities must halt
upon entering SMM. It implies the host system has to stop,
every time the integrity monitor on SMM runs. DeepWatch
and HyperCheck focused on building a safe execution envi-
ronment but they both utilized memory snapshots for in-
tegrity veriﬁcation.
In all, most of the hardware-based approaches use memory
or register snapshots [20, 28] as the source of system status
information. However, they are inapt for monitoring instant
changes occur in the host system and thus vulnerable to ad-
vanced attacks such as transient attacks. HyperSentry [7]
also uses the state of host system at certain points of time,
when the independent auditor stops the host system and ex-
ecute the agent. Thus, this can be considered as a snapshot-
based monitor along with Copilot [20] and HyperCheck [28],
in the sense that they all use the periodically acquired status
information. Our approach is fundamentally diﬀerent from
the previous snapshot-based approaches on hardware-based
integrity monitors since our Vigilare is snoop-based monitor.
8.3 Snooping Bus Trafﬁc
Snooping bus traﬃc is well known concept as shown in
these two prior works. Clarke et al. [11] proposed to add
special hardware between caches and external memories to
monitor the integrity of external memory. The aim of this
work is to ensure that the value read from an address is the
same as the value last written to that address. It can defeat
35attacks to integrity of external memory, but cannot address
rootkits nor monitor the integrity of operating system kernel,
unlike Vigilare System.
BusMop [19] designed a snoop-based monitor which is
similar to our SnoopMon, but the objective of BusMop is
diﬀerent from SnoopMon. BusMop is designed to monitor
behavior of peripherals. Unlike BusMop, SnoopMon is to
monitor the integrity of operating system kernel. To the
best of our knowledge, Vigilare is the ﬁrst snoop based ap-
proach to monitor OS kernel integrity while all of the pre-
vious approaches in this area were based on taking periodic
snapshots.
9. CONCLUSIONS
In this paper, we proposed snoop-based monitoring, a
novel scheme for monitoring the integrity of kernel. We in-
vestigated several requirements on implementing our scheme
and designed the Vigilare system and its snoop-based mon-
itoring. We focused on contributing improvements over the
previous approaches in two main aspects: detecting tran-
sient attacks and minimizing performance degradation. To
draw the contrast between Vigilare’s SnoopMon and snapshot-
based integrity monitoring, we implemented SnapMon which
represents snapshot-based architecture. We pointed out that
the snapshot-based integrity monitors are inherently vulner-
able against transient attacks and presented our Vigilare
system as a solution. In our experiment, we demonstrated
that SnoopMon-powered Vigilare is capable of eﬀectively
coping with transient attacks that violate the integrity of
the immutable regions of the kernel, while snapshot-based
approach had their limitations. In addition, we also inves-
tigated the performance impact on the host system using
STREAM benchmark [18], and showed that Vigilare, due to
its independent hardware module for bus snooping, imposes
no performance degradation on the host. Snapshot-based
integrity monitoring proved to be unsuitable for detecting
transient attacks in general; it is ineﬃcient because of the
trade-oﬀ between detection rates and performance degrada-
tion; higher snapshot frequencies might improve the detec-
tion rates, but the performance suﬀers from the overused
memory bandwidth. In all, Vigilare overcomes the limita-
tion of snapshot-based integrity monitors with snoop-based
architecture.
10. ACKNOWLEDGMENTS
This work was partly supported by VigilSystem, Korea
Science and Engineering Foundation (KOSEF) NRL Pro-
gram grant (No. 0421-2012-0047), the Attached Institute of
ETRI, the Engineering Research Center of Excellence Pro-
gram of Korea Ministry of Education, Science and Tech-
nology (MEST) / National Research Foundation of Korea
(NRF) (Grant 2012-0000470), and the Center for Integrated
Smart Sensors funded by the Ministry of Education, Sci-
ence and Technology as Global Frontier Project (CISS-0543-
20110012).
11. REFERENCES
[1] Vmware : Vulnerability statistics.
http://www.cvedetails.com/vendor/252/Vmware.html.
[2] Vulnerability report: Vmware esx server 3.x.
http://secunia.com/advisories/product/10757.
[3] Vulnerability report: Xen 3.x.
http://secunia.com/advisories/product/15863.
[4] Xen : Security vulnerabilities.
http://www.cvedetails.com/vulnerability-
list/vendor id-6276/XEN.html.
[5] Aeroﬂex Gaisle. GRLIB IP Core User’s Manual,
January 2012.
[6] ARM Limited. AMBATM Speciﬁcation, May 1999.
[7] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang,
and N. C. Skalsky. Hypersentry: enabling stealthy
in-context measurement of hypervisor integrity. In
Proceedings of the 17th ACM conference on Computer
and communications security, CCS ’10, pages 38–49,
New York, NY, USA, 2010. ACM.
[8] A. Baliga, V. Ganapathy, and L. Iftode. Automatic
inference and enforcement of kernel data structure
invariants. In Computer Security Applications
Conference, 2008. ACSAC 2008. Annual, pages 77
–86, dec. 2008.
[9] J. Bickford, R. O’Hare, A. Baliga, V. Ganapathy, and
L. Iftode. Rootkits on smart phones: attacks,
implications and opportunities. In Proceedings of the
Eleventh Workshop on Mobile Computing Systems
&#38; Applications, HotMobile ’10, pages 49–54, New
York, NY, USA, 2010. ACM.
[10] Y. Bulygin and D. Samyde. Chipset based approach to
detect virtualization malware a.k.a. deepwatch. In
BlackHat USA, 2008.
[11] D. Clarke, G. E. Suh, B. Gassend, M. van Dijk, and
S. Devadas. Checking the integrity of a memory in a
snooping-based symmetric multiprocessor (smp)
system. Technical report, MIT LCS memo-470,
http://csg.csail.mit.edu/pubs/memos/Memo-
470/smpMemoryMemo.pdf,
2004.
[12] L. Duﬂot, D. Etiemble, and O. Grumelard. Using cpu
system management mode to circumvent operating
system security functions. In In Proceedings of the 7th
CanSecWest conference, 2006.
[13] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and
D. Boneh. Terra: a virtual machine-based platform for
trusted computing. In Proceedings of the nineteenth
ACM symposium on Operating systems principles,
SOSP ’03, pages 193–206, New York, NY, USA, 2003.
ACM.
[14] T. Garﬁnkel and M. Rosenblum. A virtual machine
introspection based architecture for intrusion
detection. In Proc. Network and Distributed Systems
Security Symposium, February 2003.
[15] D. Hellstr¨om. SnapGear Linux for LEON. Gaisler
Research, November 2008.
[16] D. Hollingworth and T. Redmond. Enhancing
operating system resistance to information warfare. In
MILCOM 2000. 21st Century Military
Communications Conference Proceedings, volume 2,
pages 1037 –1041 vol.2, 2000.
[17] K. Kaneda. Tiny virtual machine monitor.
http://www.yl.is.s.u-tokyo.ac.jp/˜kaneda/tvmm/.
[18] J. D. McCalpin. Memory bandwidth and machine
balance in current high performance computers. IEEE
Computer Society Technical Committee on Computer
36Architecture (TCCA) Newsletter, pages 19–25, Dec.
1995.
[19] R. Pellizzoni, P. Meredith, M. Caccamo, and G. Rosu.
Hardware runtime monitoring for dependable
cots-based real-time embedded systems. In Proceedings
of the 2008 Real-Time Systems Symposium, RTSS ’08,
pages 481–491, Washington, DC, USA, 2008. IEEE
Computer Society.
[24] J. Rhee, R. Riley, D. Xu, and X. Jiang. Defeating
dynamic data kernel rootkit attacks via vmm-based
guest-transparent monitoring. In Availability,
Reliability and Security, 2009. ARES ’09.
International Conference on, pages 74 –81, march
2009.
[25] R. Russell. Lguest: The simple x86 hypervisor.
http://lguest.ozlabs.org/.
[20] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A.
[26] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor:
Arbaugh. Copilot - a coprocessor-based kernel runtime
integrity monitor. In Proceedings of the 13th
conference on USENIX Security Symposium - Volume
13, SSYM’04, pages 13–13, Berkeley, CA, USA, 2004.
USENIX Association.
a tiny hypervisor to provide lifetime kernel code
integrity for commodity oses. In Proceedings of
twenty-ﬁrst ACM SIGOPS symposium on Operating
systems principles, SOSP ’07, pages 335–350, New
York, NY, USA, 2007. ACM.
[21] N. L. Petroni, Jr., T. Fraser, A. Walters, and W. A.
[27] SPARC International Inc. The SPARC Architecture
Arbaugh. An architecture for speciﬁcation-based
detection of semantic integrity violations in kernel
dynamic data. In Proceedings of the 15th conference
on USENIX Security Symposium - Volume 15,
USENIX-SS’06, Berkeley, CA, USA, 2006. USENIX
Association.
[22] N. L. Petroni, Jr. and M. Hicks. Automated detection
of persistent kernel control-ﬂow attacks. In
Proceedings of the 14th ACM conference on Computer
and communications security, CCS ’07, pages 103–115,
New York, NY, USA, 2007. ACM.
[23] N. A. Quynh and Y. Takefuji. A novel approach for a
ﬁle-system integrity monitor tool of xen virtual
machine. In Proceedings of the 2nd ACM symposium
on Information, computer and communications
security, ASIACCS ’07, pages 194–202, New York,
NY, USA, 2007. ACM.
Manual, 1992.
[28] J. Wang, A. Stavrou, and A. Ghosh. Hypercheck: A
hardware-assisted integrity monitor. In S. Jha,
R. Sommer, and C. Kreibich, editors, Recent Advances
in Intrusion Detection, volume 6307 of Lecture Notes
in Computer Science, pages 158–177. Springer Berlin /
Heidelberg, 2010. 10.1007/978-3-642-15512-3-9.
[29] J. Wei, B. Payne, J. Giﬃn, and C. Pu. Soft-timer
driven transient kernel control ﬂow attacks and
defense. In Computer Security Applications
Conference, 2008. ACSAC 2008. Annual, pages 97
–107, dec. 2008.
[30] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and
R. Sailer. Secure coprocessor-based intrusion
detection. In Proceedings of the 10th workshop on
ACM SIGOPS European workshop, EW 10, pages
239–242, New York, NY, USA, 2002. ACM.
37