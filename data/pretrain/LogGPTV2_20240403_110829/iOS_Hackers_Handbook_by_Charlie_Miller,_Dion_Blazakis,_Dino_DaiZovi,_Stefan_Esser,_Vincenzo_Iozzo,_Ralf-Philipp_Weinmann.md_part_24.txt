174 Chapter 6 n Fuzzing iOS Applications
s_block_end()
s_byte(0x0, format=”oct”, name=”tp_pid”)
s_byte(0x04, format=”oct”, name=”tp_dcs”)
if s_block_start(”date”):
s_byte(0x90, format=”oct”)
s_byte(0x10, format=”oct”)
s_byte(0x82, format=”oct”)
s_byte(0x11, format=”oct”)
s_byte(0x42, format=”oct”)
s_byte(0x15, format=”oct”)
s_byte(0x40, format=”oct”)
s_block_end()
if s_block_start(”eight_bit”):
s_size(”message_eight”, format=”oct”, length=1, math=lambda x: x / 2,
fuzzable=True)
if s_block_start(”message_eight”):
if s_block_start(”text_eight”,
encoder=eight_bit_encoder):
s_string(”hellohello”, max_len = 256)
s_block_end()
s_block_end()
s_block_end()
fuzz_fi le = session_fi le()
fuzz_fi le.connect(s_get(”query”))
fuzz_fi le.fuzz()
This will generate on the stdout more than 2000 fuzzed SMS messages:
$ python pdu_simple.py
[11:08.37] current fuzz path: -> query
[11:08.37] fuzzed 0 of 2128 total cases
[11:08.37] fuzzing 1 of 2128
0700947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C6F
[11:08.37] fuzzing 2 of 2128
0701947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C6F
[11:08.37] fuzzing 3 of 2128
0702947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C6F
[11:08.37] fuzzing 4 of 2128
0703947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C
...
The fi nal step is to convert this output into something that can easily be
parsed by the yet to be written fuzzer. To make things slightly more general,
it makes sense to allow the notion of a test case to include more than one SMS
message. This will allow a test case to include not only random faults, but also
cc0066..iinndddd 117744 44//1166//22001122 55::4455::2244 PPMM
Chapter 6 n Fuzzing iOS Applications 175
test things like out-of-order arrival of concatenated SMS messages. With this
in mind, you run the output of this tool through the following script that puts
it in such a format:
import sys
for line in sys.stdin:
print line+”[end case]”
In this case you consider each PDU a separate test case, but this leaves open
the possibility for more complex cases.
You can then generate very easily parsed fi les full of fuzzed test cases by
running
$ python pdu_simple.py | grep –v ‘\[’ | python convert.py
0700947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C6F
[end case]
0701947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C6F
[end case]
0702947106004034040D91947196466656F80004901082114215400A68656C6C6F
68656C6C6F
[end case]
Note that some of these Sulley-generated PDUs may not be sendable over the
real cellular network. For example, an SMSC may set the SMSC address and
an attacker has no control over this value. Or, perhaps a carrier performs some
sanity checking on the data it is delivering and allows only certain values of
particular fi elds. Either way, not all the test cases you generate may be valid to
send over the carrier network. Any crashes will have to be confi rmed with live
SMS messages over real carrier networks.
SMS iOS Injection
After you have a lot of fuzzed SMS messages, you need a way to deliver them
to the iPhone for testing. Sending them from one device to another using the
actual carrier network could do this. Such a procedure would involve sending
the test cases from one device through the SMSC to the test device. However,
this has a few major drawbacks. One is that at fi ve cents an SMS message, this
could get expensive fast. Another is that the carrier can observe the testing,
and, in particular, the test cases. Additionally, the carrier may take actions that
inhibit the testing such as throttling the delivery of the messages. Furthermore,
it is possible the fuzzed messages could crash the telephony equipment of the
carrier, which would lead to legal problems. Instead, the following is a method
fi rst described by Mulliner and Miller (www.blackhat.com/presentations/
bh-usa-09/MILLER/BHUSA09-Miller-FuzzingPhone-PAPER.pdf) for iOS 3 and
updated here for iOS 5. This posits that you position yourself between the modem
and the application processor and inject SMS messages into the serial connection
cc0066..iinndddd 117755 44//1166//22001122 55::4455::2244 PPMM
176 Chapter 6 n Fuzzing iOS Applications
between them on a device. This method has many advantages. These include
the fact the carrier is (mostly) unaware of the testing, messages can be sent at a
very fast rate, it does not cost anything, and the messages appear to the applica-
tion processor exactly like real SMS messages arriving over the carrier network.
On the device, the CommCenter or CommCenterClassic processes, depend-
ing on the hardware, handle SMS messages. The connection between these
CommCenter processes and the modem consist of a number of virtual serial
lines. They were represented by /dev/dlci.h5-baseband.[0-15] and /dev/dlci
.spi-basebad.[0-15] in iOS 2 and iOS 3, respectively. In iOS 5, they take the form
/dev/dlci.spi-baseband.*. The two virtual devices that are needed for SMS
messages are /dev/dlci.spi-baseband.sms and /dev/dlci.spi-baseband.low.
To inject created SMS messages, you need to get into the CommCenterClassic
process. You do this by injecting a library into it using library preloading. This
library will provide new versions of the open(2), read(2), and write(2) func-
tions. The new version of open checks whether the two serial lines mentioned
earlier that handle SMS messages are being opened. If so, it opens a UNIX
socket /tmp/fuzz3.sock or /tmp/fuzz4.sock, connects to it, and returns this
fi le descriptor instead of one to the device requested. If the open is to some other
fi le, the real version of open (found via dlsym) is called. The result is that for
fi les/devices you are not concerned with, the standard open call will be made.
For the two serial lines you want to impersonate, instead of opening the actual
devices, a fi le descriptor to a UNIX socket is returned, which you can read and
write to at your convenience. The read and write functions are intercepted for
logging and debugging purposes, but not for SMS injection.
Then, you create a daemon process, called injectord, which opens up a connection
to the two serial devices you need and also opens up one to the UNIX sockets
(the virtual serial ports). The daemon then faithfully copies data read from one
fi le descriptor to the other, playing man in the middle. Additionally, it opens up a
network socket on port 4223. When it receives data on this port, it relays it to the
UNIX socket. The overall effect is that when CommCenterClassic opens up these
serial connections, it really opens up a UNIX socket, which most of the time will
act like a connection to the modem. However, by sending data to port 4223, you
can inject data and it will appear that it also came from the modem.
Once this injector is in place, given an SMS message in PDU format, the
following Python function sends the data in the correct format to the daemon
that injects it into the serial line. CommCenterClassic behaves as if the message
arrived over the carrier network.
def send_pdu(ip_address, line):
leng = (len(line) / 2) - 8
buffer = “\n+CMT: ,%d\n%s\n” % (leng, line)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip_addresss, 4223))
s.send(buffer)
s.close()
cc0066..iinndddd 117766 44//1166//22001122 55::4455::2244 PPMM
Chapter 6 n Fuzzing iOS Applications 177
This allows for a no-cost method of sending SMS messages to the device.
These messages can be delivered at a very quick pace, many per second.
Monitoring SMS
You now have just about everything you need to fuzz the iOS SMS implemen-
tation. The fi nal missing component is the monitoring. At the very least, you
need to check for crashes of CommCenterClassic (and other processes). You do
this by watching for Crash Reporter logs.
Before a test case is sent, the logs should be cleaned of previous problems by
sshing to the device. Make sure to set up public key authentication so that no
password is required from the fuzzing machine:
def clean_logs(ip):
commcenter =
‘/private/var/logs/CrashReporter/LatestCrash.plist’
springboard =
‘/private/var/mobile/Library/Logs/CrashReporter/LatestCrash.plist’
command = ‘ssh root@’+ip+’ “rm -rf %s 2>/dev/null; rm -rf
%s 2>/dev/null”’ % (commcenter, springboard)
c = os.popen(command)
SpringBoard is checked, as well as CommCenter, because during fuzzing it
sometimes crashes since it actually displays the message. Notice that the logs
reside on the iPhone and not on the desktop running the fuzzer, which is why
it is necessary to use ssh to look for and read them. After the test case, it is
necessary to check to see if anything showed up in the logs.
def check_for_crash(test_number, ip):
time.sleep(3)
commcenter =
‘/private/var/logs/CrashReporter/LatestCrash.plist’
springboard =
‘/private/var/mobile/Library/Logs/CrashReporter/LatestCrash.plist’
command = ‘ssh root@’+ip+’ “cat %s 2>/dev/null; cat %s
2>/dev/null”’ % (commcenter, springboard)
c = os.popen(command)
crash = c.read()
if crash:
clean_logs()
print “CRASH with %d” % test_number
print crash
print “\n\n\n”
time.sleep(60)
else:
print ‘ . ‘,
c.close()
You could leave it at that and check for crashes. However, to be completely
sure that the CommCenterClassic is still appropriately processing incoming
cc0066..iinndddd 117777 44//1166//22001122 55::4455::2244 PPMM
178 Chapter 6 n Fuzzing iOS Applications
messages, you should use a little more caution. In between each fuzzed test
case, you send known good SMS messages. You can try to verify that the device
successfully received these messages before continuing with further fuzzing.
You do this by querying the sqlite3 database used to store SMS messages by
CommCenterClassic:
# sqlite3 /private/var/mobile/Library/SMS/sms.db
SQLite version 3.7.7
Enter “.help” for instructions
sqlite> .tables
_SqliteDatabaseProperties message
group_member msg_group
madrid_attachment msg_pieces
madrid_chat
The madrid tables have to do with multimedia messages and contain fi lenames
of images sent via MMS. For SMS, the most important table is called “message.”
Within this table are a few interesting columns. One is an increasing integer
called ROWID. Another is text, which holds the text of the message.
The following command, issued on a jailbroken iphone, displays the contents
of the last SMS message received by the device:
# sqlite3 -line /private/var/mobile/Library/SMS/sms.db ‘select
text from message where ROWID = (select MAX(ROWID) from message);’
Given a random number, the following Python code checks to make sure that
the iPhone can still process and store standard SMS messages. It assumes that the
user has established public key authentication to the ssh server running on the iOS.
def eight_bit_encoder(string):
ret = ‘’
strlen = len(string)
for i in range(0,strlen):
temp = “%02x” % ord(string[i])
ret += temp.upper()
return ret
def create_test_pdu(n):
tn = str(n)
ret = ‘0791947106004034040D91947196466656F8000690108211421540’
ret += “%02x” % len(tn)
ret += eight_bit_encoder(tn)
return ret
def get_service_check(randnum, ip):
pdu = create_test_pdu(randnum)
send_pdu(pdu)
cc0066..iinndddd 117788 44//1166//22001122 55::4455::2244 PPMM
Chapter 6 n Fuzzing iOS Applications 179
time.sleep(1)
command = ’ssh root@’+ip+’ ”sqlite3 -line
/private/var/mobile/Library/SMS/sms.db \’select text from message
where ROWID = (select MAX(ROWID) from message);\’”’
c = os.popen(command)
last_msg = c.read()
last_msg = last_msg[last_msg.fi nd(’=’)+2:len(last_msg)-1]
return last_msg
The function get_service_check returns a string that contains the randnum
if everything is functioning properly, or something else otherwise. All that
remains is to tie it all together into the following fuzzing script:
#!/usr/bin/python2.5
import socket
import time
import os
import sys
import random
def eight_bit_encoder(string):
ret = ‘’
strlen = len(string)
for i in range(0,strlen):
temp = “%02x” % ord(string[i])
ret += temp.upper()
return ret
def create_test_pdu(n):
tn = str(n)
ret =
‘0791947106004034040D91947196466656F8000690108211421540’
ret += “%02x” % len(tn)
ret += eight_bit_encoder(tn)
return ret
def restore_service(ip):
command = ’ssh root@’+ip+’ ”./lc.sh”’
c = os.popen(command)
time.sleep(60)
def clean_logs(ip):
commcenter =
’/private/var/logs/CrashReporter/LatestCrash.plist’
springboard =
’/private/var/mobile/Library/Logs/CrashReporter/LatestCrash.plist’
command = ’ssh root@’+ip+’ ”rm -rf %s 2>/dev/null; rm -rf
%s 2>/dev/null”’ % (commcenter, springboard)
cc0066..iinndddd 117799 44//1166//22001122 55::4455::2255 PPMM
180 Chapter 6 n Fuzzing iOS Applications
c = os.popen(command)
def check_for_service(ip):
times = 0
while True:
randnum = random.randrange(0, 99999999)
last_msg = get_service_check(randnum, ip)
if(last_msg == str(randnum)):
if(times == 0):
print ”Passed!”
else:
print ”Lost %d messages” % times
break
else:
times += 1
if(times > 500):
restore_service(ip)
break
def get_service_check(randnum, ip):