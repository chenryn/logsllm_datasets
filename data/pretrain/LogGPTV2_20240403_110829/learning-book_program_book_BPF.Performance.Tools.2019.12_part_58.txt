# BPF Tools for Network Monitoring

## 1. sockstat(8)

The `sockstat(8)` tool traces key socket-related system calls using tracepoints and kprobes to provide detailed statistics on socket usage. The overhead of kprobes is generally minimal, especially on high network-throughput systems.

### Source Code
```bash
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing sock statistics. Output every 1 second.\n");
}

tracepoint:syscalls:sys_enter_accept*,
tracepoint:syscalls:sys_enter_connect,
tracepoint:syscalls:sys_enter_bind,
tracepoint:syscalls:sys_enter_socket*,
kprobe:sock_recvmsg,
kprobe:sock_sendmsg
{
    @[$probe] = count();
}

interval:s:1
{
    print(@);
    clear(@);
}
```

### Notes
- The use of kprobes is a shortcut. These could be traced using syscall tracepoints instead.
- The `recvfrom(2)`, `recvmsg(2)`, `sendto(2)`, and `sendmsg(2)` syscalls, and other variants, can be traced by adding more tracepoints.
- For the `read(2)` and `write(2)` family of syscalls, the file descriptor must be processed to determine the file type, to match on socket reads and writes only.

## 2. sofamily(8)

The `sofamily(8)` tool traces new socket connections via the `accept(2)` and `connect(2)` system calls and summarizes the process name and address family. This is useful for workload characterization and identifying unexpected socket usage.

### Example Output
```plaintext
Attaching 7 probes...
Tracing socket connect/accepts. Ctrl-C to end.
@accept [sshd, 2, AF_INET]: 2
@accept[Java, 2, AF_INET]: 420
@connect[sshd, 2, AF_INET]: 2
@connect[sshd, 10, AF_INET6]: 2
@connect[(systemd), 1, AF_UNIX]: 12
@connect[sshd, 1, AF_UNIX]: 34
@connect[Java, 2, AF_INET]: 215
```

### Source Code
```bash
#!/usr/local/bin/bpftrace
#include <linux/socket.h>

BEGIN
{
    printf("Tracing socket connect/accepts. Ctrl-C to end.\n");
}

Bfan2str[AF_UNSPEC] = "AF_UNSPEC";
Bfan2str[AF_UNIX] = "AF_UNIX";
Bfan2str[AF_INET] = "AF_INET";
Bfan2str[AF_INET6] = "AF_INET6";

tracepoint:syscalls:sys_enter_connect
{
    @connect[comm, args->uservaddr->sa_family, Bfan2str[args->uservaddr->sa_family]] = count();
}

tracepoint:syscalls:sys_enter_accept,
tracepoint:syscalls:sys_enter_accept4
{
    @sockaddr[tid] = args->upeer_sockaddr;
}

tracepoint:syscalls:sys_exit_accept,
tracepoint:syscalls:sys_exit_accept4
/@sockaddr[tid]/
{
    if (args->ret > 0)
    {
        $sa = (struct sockaddr *)@sockaddr[tid];
        @accept[comm, sa->sa_family, Bfan2str[sa->sa_family]] = count();
        delete(@sockaddr[tid]);
    }
}

END
{
    clear(@sockaddr);
    clear(Bfan2str);
}
```

### Address Family Mapping
The address family is read from the `sa_family` member of `struct sockaddr`. This tool includes the number on the output and maps common address families to string names based on the `linux/socket.h` header.

## 3. soprotocol(8)

The `soprotocol(8)` tool traces new socket connections and summarizes the process name and transport protocol. This is another workload characterization tool, specifically for the transport protocol.

### Example Output
```plaintext
Attaching 4 probes...
Tracing socket connect/accepts. Ctrl-C to end.
@accept[Java, 6, IPPROTO_TCP, TCP]: 1171
@connect[setuidgid, 0, IPPROTO_UNIX, UNIX]: 2
@connect[ldconfig, 0, IPPROTO_UNIX, UNIX]: 2
@connect[systemd-resolve, 17, IPPROTO_UDP, UDP]: 19
@connect[Java, 17, IPPROTO_UDP, UDP]: 80
@connect[Java, 6, IPPROTO_TCP, TCP]: 559
```

### Source Code
```bash
#!/usr/local/bin/bpftrace
#include <linux/in.h>

BEGIN
{
    printf("Tracing socket connect/accepts. Ctrl-C to end.\n");
}

Bprot2str[IPPROTO_IP] = "IPPROTO_IP";
Bprot2str[IPPROTO_ICMP] = "IPPROTO_ICMP";
Bprot2str[IPPROTO_TCP] = "IPPROTO_TCP";
Bprot2str[IPPROTO_UDP] = "IPPROTO_UDP";

kprobe:security_socket_accept,
kprobe:security_socket_connect
{
    $sock = (struct socket *)arg0;
    $protocol = $sock->sk->sk_protocol & 0xff;
    @connect[comm, $protocol, Bprot2str[$protocol]] = count();
}

END
{
    clear(@connect);
    clear(Bprot2str);
}
```

## 4. soconnect(8)

The `soconnect(8)` tool shows IP protocol socket connect requests, including process ID, process name, address family, IP address, remote port, latency, and result.

### Example Output
```plaintext
Attaching 4 probes.
PID   PROCESS  FAM  ADDRESS              PORT  LAT(us)  RESULT
11448 ssh      2    127.0.0.1            22    43       Success
11449 ssh      2    10.168.188.1         22    45134    Success
11451 curl     2    100.66.96.2          53    6        Success
11451 curl     2    2406:da00:ff00::36d0 80    3        Network unreachable
11451 curl     2    52.43.200.64         80    3        Success
11451 curl     2    52.39.122.191        80    7        Success
11451 curl     2    52.24.119.28         80    19       In progress
```

### Source Code
```bash
#!/usr/local/bin/bpftrace
#include <linux/socket.h>
#include <linux/in.h>

BEGIN
{
    printf("%-6s %-16s %-3s %-16s %-5s %-8s %s\n", "PID", "PROCESS", "FAM", "ADDRESS", "PORT", "LAT(us)", "RESULT");
}

Berr2str[EPERM] = "Permission denied";
Berr2str[EINTR] = "Interrupted";
Berr2str[EAGAIN] = "Routing cache insuff.";
Berr2str[EFAULT] = "Sock struct addr invalid";
Berr2str[EPROTOTYPE] = "Socket protocol error";
Berr2str[EAFNOSUPPORT] = "Address family invalid";
Berr2str[EADDRINUSE] = "Local addr in use";
Berr2str[EADDRNOTAVAIL] = "No port available";
Berr2str[ENETUNREACH] = "Network unreachable";
Berr2str[EISCONN] = "Already connected";
Berr2str[ETIMEDOUT] = "Timeout";
Berr2str[EALREADY] = "Not yet completed";

tracepoint:syscalls:sys_enter_connect
/args->uservaddr->sa_family == AF_INET || args->uservaddr->sa_family == AF_INET6/
{
    @sockaddr[tid] = args->uservaddr;
    @start[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_connect
/@start[tid]/
{
    $dur_us = (nsecs - @start[tid]) / 1000;
    printf("%-6d %-16s %-3d ", pid, comm, @sockaddr[tid]->sa_family);

    if (@sockaddr[tid]->sa_family == AF_INET)
    {
        $sin = (struct sockaddr_in *)@sockaddr[tid];
        printf("%-16s %-5d %-8d %s\n", inet_ntoa($sin->sin_addr), ntohs($sin->sin_port), $dur_us, Berr2str[-args->ret]);
    }
    else
    {
        $sin6 = (struct sockaddr_in6 *)@sockaddr[tid];
        printf("%-16s %-5d %-8d %s\n", inet_ntop(AF_INET6, &$sin6->sin6_addr, s, sizeof(s)), ntohs($sin6->sin6_port), $dur_us, Berr2str[-args->ret]);
    }

    delete(@sockaddr[tid]);
    delete(@start[tid]);
}

END
{
    clear(@start);
    clear(Berr2str);
    clear(@sockaddr);
}
```

### Notes
- The reported latency is for the `connect(2)` syscall only.
- For non-blocking sockets, the `connect(2)` syscall may return early before the connection is completed.
- To measure the full connection latency for these non-blocking calls, more events need to be instrumented, as shown in the `soconnlat(8)` tool.