cmiller$ ./pcredemo 'ab.d' ABCDabcdABCD
Match succeeded at offset 4
0: abcd
No named substrings
There are multiple vulnerabilities in this particular version of PCRE. Below are
two inputs that cause a heap overflow condition.
6.6
Case Study: PCRE
191
Figure 6.9
Insure++ reveals detailed information about the location of two bugs.
cmiller$ ./pcredemo '[[**]]' a
PCRE compilation failed at offset 6: internal error: code overflow
cmiller$ ./pcredemo 
'(?P)(?P>a){1}' a
PCRE compilation failed at offset 32: internal error: code overflow
As can be seen from the output, the PCRE library correctly identifies that an
overflow has occurred, but only after the fact. However, since the program does
not crash, it is likely that a fuzz tester who blindly attached a debugger and ignored
the output might miss this useful message. In fairness, this program outputs many
different error messages, especially when fuzzing, so it would be easy to miss this
particular message in the noise.
In fact, one of the authors of this book did fuzz this library and the program
never crashed. It was only through luckily observing the output of the application
that something more was noticed. After this was noticed, the author reran the
inputs under Insure++ and found the vulnerability.
Now that we have a real program with a couple of real bugs, let’s see how the
advanced memory corruption monitors do in detecting these two buffer
overflows.
6.6.1
Guard Malloc
Since these two vulnerabilities are heap overflows, there is a good chance Guard
Malloc will find the bugs. In fact, it does find both of them,
cmiller$ 
DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib ./pcredemo '[[**]]' a
GuardMalloc: Allocations will be placed on 16 byte boundaries.
GuardMalloc:
- Some buffer overruns may not be noticed.
GuardMalloc:
- Applications using vector instructions (e.g., SSE or
Altivec) should work.
GuardMalloc: GuardMalloc version 18
Bus error
cmiller$ 
DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib ./pcredemo
'(?P)(?P>a){1}' a
GuardMalloc: Allocations will be placed on 16 byte boundaries.
GuardMalloc:
- Some buffer overruns may not be noticed.
GuardMalloc:
- Applications using vector instructions (e.g., SSE or
Altivec) should work.
GuardMalloc: GuardMalloc version 18
Bus error
Running the first example under the gdb debugger reveals the exact line where the
overflow occurs:
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_PROTECTION_FAILURE at address: 0xb000d000
192
Target Monitoring
0x00004f7b in compile_regex (options=, oldims=0, brackets=0xbffff4a4,
codeptr=0xbffff49c, ptrptr=0xbffff498, errorcodeptr=0xbffff4a0,
lookbehind=0, skipbytes=0, firstbyteptr=0xbffff4ac,
reqbyteptr=0xbffff4a8, bcptr=0x26, cd=0xbffff454) at
pcre_compile.c:3557
3557
PUT(code, 1, code - start_bracket);
Likewise for the second vulnerability,
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_PROTECTION_FAILURE at address: 0xb000d000
0x00003844 in compile_regex (options=0, oldims=0, brackets=0xbffff474,
codeptr=0xbffff46c, ptrptr=0xbffff468, errorcodeptr=0xbffff470,
lookbehind=0, skipbytes=0, firstbyteptr=0xbffff47c,
reqbyteptr=0xbffff478, bcptr=0x0, cd=0xbffff424) at
pcre_compile.c:2354
2354
*code = OP_KET;
So, if when fuzzing this particular library, the tester was only using the simple
method of attaching a debugger and waiting for crashes, he or she would miss these
two critical (and exploitable) bugs. If the tester was monitoring the program with
Guard Malloc, he or she would have found both bugs. Plus, this program is small
enough that there was no observable slowdown in performance when running with
Guard Malloc. Therefore, in this case, it is difficult to think of a reason not to use
this additional monitoring when fuzzing.
6.6.2
Valgrind
This real-world example confirms what we saw in the test program in the last sec-
tion. Valgrind again finds the two vulnerabilites and gives even more useful infor-
mation than Guard Malloc.
[cmiller@LinuxForensics pcre-6.2]$ valgrind ./pcredemo '[[**]]' a
==12840== Invalid write of size 1
==12840==
at 0x804B5ED: compile_regex (pcre_compile.c:3557)
==12840==
by 0x804C50F: pcre_compile2 (pcre_compile.c:4921)
==12840==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==
by 0x804864E: main (pcredemo.c:76)
==12840==
Address 0x401F078 is 0 bytes after a block of size 80 alloc'd
==12840==
at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12840==
by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12840==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==
by 0x804864E: main (pcredemo.c:76)
==12840==
==12840== Invalid write of size 1
6.6
Case Study: PCRE
193
==12840==
at 0x804C545: pcre_compile2 (pcre_compile.c:4935)
==12840==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==
by 0x804864E: main (pcredemo.c:76)
==12840==
Address 0x401F079 is 1 bytes after a block of size 80
alloc'd
==12840==
at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12840==
by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12840==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==    by 0x804864E: main (pcredemo.c:76)
Another interesting thing that occurs is that, unlike Guard Malloc, it is able to con-
tinue past the first bug to find another (related) problem. A similar result is found
for the other bug,
[Linux pcre-6.2]$ ./pcredemo '(?P)(?P>a){1}' a
==12857== Invalid write of size 1
==12857==
at 0x804B5ED: compile_regex (pcre_compile.c:3557)
==12857==
by 0x804C50F: pcre_compile2 (pcre_compile.c:4921)
==12857==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==
by 0x804864E: main (pcredemo.c:76)
==12857==
Address 0x401F068 is 1 bytes after a block of size 63
alloc'd
==12857==
at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12857==
by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12857==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==
by 0x804864E: main (pcredemo.c:76)
==12857==
==12857== Invalid write of size 1
==12857==
at 0x804C545: pcre_compile2 (pcre_compile.c:4935)
==12857==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==
by 0x804864E: main (pcredemo.c:76)
==12857==
Address 0x401F069 is 2 bytes after a block of size 63
alloc'd
==12857==
at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12857==
by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12857==
by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==
by 0x804864E: main (pcredemo.c:76)
6.6.3
Insure++
In order to build the pcredemo program for use with Insure++, we need to tell it to
use Insure as the compiler. The following commands will build pcredemo for use
with Insure++:
./configure CC=insure
make
insure -g -I. pcredemo.c -o pcredemo .libs/libpcre.a
194
Target Monitoring
After this, running pcredemo will bring up the Insure console, which will dis-
play any problems identified. Insure++ finds both vulnerabilities and correctly indi-
cates where they can be found in the source code (Figure 6.10).
6.7
Summary
Fuzzing without watching for errors will not find vulnerabilities. Furthermore, it is
important to understand the types of errors you can expect to find with fuzzing.
We discussed some of the more common security vulnerabilities and how you might
detect them. We then outlined some of the various methods. These methods include
sending valid test cases between fuzzed inputs, monitoring system resources, both
locally and remotely, as well as changing the way the application executes. The
closer you monitor the target, and the more sophisticated tools used for the moni-
toring, the more likely you will find those hard-to-locate vulnerabilities.
6.7
Summary
195
Figure 6.10
Insure++ outlines the two PCRE bugs.
C H A P T E R  7
Advanced Fuzzing
This chapter will discuss ongoing research efforts to advance the field of fuzzing. It’s
impossible to say where the next big advancement in fuzzing will come from. We
present here a few ideas that from our experiences, show the most promise. So far
we’ve talked about how to set up fuzzing and some of the problems you may run
into. One of the themes of the book is that intelligent, generation-based fuzzing is
most effective but can take a tremendous amount of effort and time to set up. The
first research topic we present attempts to automatically determine the structure of
protocols, both network and file formats, automatically, removing this obstacle to
generation-based fuzzing. The other topics we discuss are different approaches at
trying to utilize the information from the application itself to improve test-case gen-
eration. For example, by knowing which paths through a program a particular set
of fuzzed inputs took, can we use that information to generate even better inputs?
7.1
Automatic Protocol Discovery
Imagine if a tool could simply watch data being consumed by an application, auto-
matically determine the type of each data, and insert appropriate smart fuzzes. For
example, take some data from a file or network protocol that looks like this:
“\x01\x00\x0aGodisGood\n”
After reading the earlier chapter that talks about data representation it’s probably
clear that 01 = type, 000a = length, and “GodisGood\n” is the data. However, note
that a “\n” is a \x0a in hex (see an ASCII/HEX table if this is unclear; “man ascii” in
Linux). Thus, it can be a bit challenging for pre-fuzzing parsing code to automatically
determine the types. There are multiple ways to deal with this issue. For example,
tokAids in GPF allow the tester to inform GPF how to “tokenize” stored sessions. But,
since it’s easier for humans to perform pattern recognition than computers, a graphi-
cal tool could be constructed that would allow for field tagging.1 One could pop open
a file or network capture, highlight each field, and manually mark it accordingly. This
would likely end up more accurate than computer-generated code.
Some work has been done to try to automate this to discover such protocols.
PolyGlot is one such work.2 This tool watches as a program consumes an input.
197
1Charlie Miller has developed such a tool.
2J. Caballero, H. Yin, Z. Liang, D. Song, “Polyglot: Automatic Extraction of Protocol Message
Format Using Dynamic Binary Analysis,” In Proceedings of the 14th ACM Conference on Com-
puter and Communication Security, Alexandria, VA, October 2007.
Based on the assembly instructions used to read bytes from the data stream, some
basic grouping of the input can be made. For example, does the program treat a
particular section of bytes as a byte, word, or dword? Next, by watching how these
bytes are processed within the control flow graph of the program, these individual
elements (bytes, words, dwords) can be grouped into “structures.” For example, if
a function loops, and in each loop 2 bytes and 4 dwords are consumed, it can be
assumed that those 18 bytes belong together in some fashion. The authors of the
paper use the tool to successfully automatically reverse engineer a number of net-
work protocols including DNS, HTTP, IRC, SMB, and ICQ.
Another example of automated protocol discovery is included with the com-
mercial beSTORM fuzzer. It does this by examining the valid test cases or inputs.
It automatically tries to find length value pairs in binary data and can decode pro-
tocols based on ASN.1 (more on this in Chapter 8). It tries many models and
assigns percentages to how much of the structure it can account for in the actual
data. For text-based inputs, it can break apart the data based on a number of dif-
ferent separators (for example, Tab, Comma) as well as user-defined separators. It
has custom modules for those inputs based on HTTP and XML. Finally, it provides
a graphical user interface to help the tester describe the protocol, i.e. specify the
location of length fields.
7.2
Using Code Coverage Information
One of the major challenges of fuzzers is measuring their effectiveness. While
obtaining 100% code coverage doesn’t necessarily mean all bugs have been found,
it’s certainly true that no bugs will be found in code that hasn’t even been executed.
So, the best we know how to do is to cover all the code, and cover it with all the
attack heuristics, random data, and other information possible.
That being the case, how can one know what percentage of the attack surface
a tool is covering? For example, if an arbitrary program contains 1,000 basic blocks
(series of assembly instructions until a branch instruction) and a network fuzzer hits
90 basic blocks, did it really only cover 90/1000, or 9% of the total code? Strictly
speaking, that’s true, but the fact is that most of that code cannot be covered via the
interface under test. So, how much of the attack surface code was covered? Suppose
that it’s possible to reach 180 BBs from the network, the coverage was then 90/180,
or 50% of the attack surface. But how does one figure out the number of BBs on
the attack surface? A combination of all known valid sessions/files would be a
good, but difficult, first step.
If source code is available, there are a number of tools that can be used to dis-
play code coverage information. However, suppose source code is not available.
Coverage can still be monitored. The two main techniques are pre-analysis and real-
time analysis:
• Pre-analysis requires locating the start of every function and basic block in
the application. This can be done with IDA Pro, for example, and the
pida_dump.py IDAPython script. Then using PaiMei, a breakpoint is set at
198
Advanced Fuzzing
each of these locations. As each basic block is hit, it is recorded; that basic
block or function has now been covered.
• Real-time analysis is done with hardware support via the Intel MSR register,
which can be used to record every address that EIP (the Intel instruction
pointer) has executed. This has the advantage of being faster (no time required
to pass back and forth between the debugger and the debuggee) and doesn’t
rely on IDA Pro output. Here are a few things to consider when deciding
which approach to use:
1. Pre-analysis could be difficult if the application is protected.
2. MSR doesn’t work in virtual machines such as VMWare.
3. In real-time analysis, all instructions are traced, so the coverage tool
would have to manually filter hits outside the scope of the target DLL(s)
(i.e., the many jumps to kernel and library DLLs).
4. Pre-analysis is still required to determine how many total functions/basic
blocks there are if the percent of code coverage is desired.
So, code coverage can be obtained, regardless of whether source code is available,
now for examples of how it can be used.
Code coverage (or really lack of code coverage) reveals which portions of the
code have not been tested. This code may also be code that is not executed during
normal usage. It is possible that the majority of bugs will be lurking in these dark
corners of the application. Therefore, fuzzing with code coverage could also reveal
portions of the application that require further static analysis. With such analysis
may come a better understanding of those portions of the application that can aid
in better input construction for the fuzzer. Iterating this approach can provide more
thorough testing. Miller gave a talk outlining this approach in which he used GPF
and code coverage from PaiMei to discover security critical bugs in an application.3
7.3
Symbolic Execution
The paper entitled “Automated Whitebox Fuzz Testing” by Godefroid, Levin,
and Molnar is an exceptional piece of research for next generation whitebox
fuzzers. In particular they created a tool called SAGE (Scalable, Automated,
Guided Execution), an application for a white-box file fuzzing tool for x86 Win-
dows applications.
SAGE works, as in mutation-based (black-box) fuzzing, by starting with an ini-
tial input. This input is then symbolically executed by the program while informa-
tion about how it is used is stored. The information about why each particular
branch was taken (or not taken) is referred to as constraints. Then, each of these
constraints is negated one at a time and the entire system is solved, resulting in a new
input to the program that has a different execution path. This is then repeated for
each constraint in the program. In theory, this should give code coverage for the
entire attack surface. In practice, this isn’t the case, for reasons we’ll discuss in a bit.
7.3
Symbolic Execution
199
3“Fuzzing with Code Coverage by Example”: www.toorcon.org/2007/event.php?id=34
The paper gives the following example of a function for which SAGE can
quickly get complete code coverage while a random fuzzer will struggle:
void top(char input[4]){
int cnt = 0;
if(input[0] == 'b') cnt++;