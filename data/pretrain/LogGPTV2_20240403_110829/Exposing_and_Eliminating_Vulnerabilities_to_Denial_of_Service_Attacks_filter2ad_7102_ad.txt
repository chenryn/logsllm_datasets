h
g
u
o
r
h
T
e
g
a
r
e
v
A
45
40
35
30
25
20
15
10
5
0
Drum
Push
Pull
5
10
15
20
25
30
35
x/F
(a) α = 10%.
)
c
e
s
/
s
g
s
m
(
t
u
p
h
g
u
o
r
h
T
e
g
a
r
e
v
A
45
40
35
30
25
20
15
10
5
0
0
Drum
Push
Pull
10
20
30
40
α
50
60
70
80
(b) x = 32F.
Figure 4. Average received throughput.
that, as for latency, Drum’s throughput is also unaffected
by increasing x, while Push shows a slight degradation of
throughput, and Pull’s throughput decreases dramatically.
Figure 4(b) shows that Drum’s throughput gracefully de-
grades as α increases, while Push exhibits a linear degrada-
tion, and Pull’s throughput is drastically affected for every
α > 0.
Figure 5 depicts the CDF of the average latency of suc-
cessfully received messages in two scenarios. Each data
point shows, for a given latency l, the percentage of correct
processes for which the average latency does not exceed l.
We observe that Push is the fastest in delivering messages
to non-attacked processes, but suffers from substantial vari-
ation in delivery latency, as messages take a long time to
reach the attacked processes. E.g., Figure 5(a) shows that
the 4 attacked processes (other than the source) measure an
average latency 4 times longer than non-attacked processes.
While Pull exhibits almost the same average latency for all
the processes, this latency is very long. Drum combines the
best of Push and Pull: it delivers messages almost as fast as
Push, while maintaining a small variation between attacked
and non-attacked processes.
9. Conclusions
We have conducted the ﬁrst systematic study of the im-
pact of DoS attacks on multicast protocols, using asymp-
totic analysis, simulations, and measurements. Our study
has exposed weaknesses of traditional gossip-based multi-
cast protocols: Although such protocols are very robust in
the face of process crashes, we have shown that they can
be extremely vulnerable to DoS attacks. In particular, an
attacker with limited attack strength can cause severe per-
formance degradation by focusing on a small subset of the
processes.
We have suggested a few simple measures that one can
take in order to improve a system’s resilience to DoS at-
tacks: (i) combining pull and push operations; (ii) bound-
ing resources separately for each operation; and (iii) ran-
dom port selection. We have presented Drum, a simple
gossip-based multicast protocol that uses these measures
in order to eliminate vulnerabilities to DoS attacks. Our
closed-form mathematical analysis, simulations, and empir-
ical tests have proven that using both push and pull opera-
tions goes a long way in fortifying a system against DoS at-
tacks. We have shown that, as the attack strength increases
asymptotically, the most effective attack against Drum is
one that targets all the correct processes in the system. As
expected, the inevitable performance degradation due to
such a broad attack is identical for all the studied proto-
cols. However, protocols that use only pull or only push op-
erations perform much worse under more focused attacks,
which have little inﬂuence on Drum.
We expect our proposed methods for mitigating the ef-
fect of DoS attacks to be applicable to various other systems
operating in different contexts. Speciﬁcally, the use of well-
known ports should be minimized, and each process should
be able to choose some of its communication partners by
itself. Our analysis process and its corresponding metric
can be used to generally quantify the effect of DoS attacks.
We hope that other researchers will be able to apply similar
techniques in order to quantitatively analyze their system’s
resilience to DoS attacks.
Acknowledgments
We thank Aran Bergman and Dahlia Malkhi for many
helpful comments and suggestions. We are grateful to the
Flux research group at the University of Utah, and espe-
cially Mac Newbold, for allowing us to use their network
emulation testbed and assisting us with our experiments.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:10 UTC from IEEE Xplore.  Restrictions apply. 
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
s
e
s
s
e
c
o
r
P
t
c
e
r
r
o
C
f
o
e
g
a
t
n
e
c
r
e
P
Drum
Push
Pull
Drum
Push
Pull
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
s
e
s
s
e
c
o
r
P
t
c
e
r
r
o
C
f
o
e
g
a
t
n
e
c
r
e
P
0
1000
2000
3000
4000
5000
6000
7000
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
10000
Average Latency (msecs)
(a) α = 10%, x = 32F.
Average Latency (msecs)
(b) α = 40%, x = 32F.
Figure 5. CDF: average latency of received messages.
References
[1] G. Badishi, I. Keidar, and A. Sasson.
Exposing and
eliminating vulnerabilities to denial of service attacks in
secure gossip-based multicast.
TR CCIT 477, Depart-
ment of Electrical Engineering, Technion, March 2004.
http://www.ee.technion.ac.il/∼badishi/papers/drum-tr.ps.
[2] K. P. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu,
and Y. Minsky. Bimodal multicast. ACM Transactions on
Computer Systems (TOCS), 17(2):41–88, 1999.
[3] K. P. Birman, R. van Renesse, and W. Vogels. Spinglass: Se-
cure and scalable communications tools for mission-critical
computing.
In DARPA International Survivability Confer-
ence and Exposition (DISCEX), June 2001.
[4] R. K. C. Chang. Defending against ﬂooding-based dis-
IEEE Com-
tributed denial-of-service attacks: A tutorial.
munications Magazine, 40:42–51, October 2002.
strategies
Deﬁning
[5] Cisco
Systems.
to
pro-
attacks.
against TCP SYN denial of
tect
http://www.cisco.com/warp/public/707/4.html.
service
[6] CSI/FBI.
Computer crime and security survey, 2003.
http://www.gocsi.com/forms/fbi/pdf.jhtml.
[7] A. Demers, D. Greene, C. Hauser, W. Irish, J. Larson,
S. Shenker, H. Stuygis, D. Swinehart, and D. Terry. Epi-
demic algorithms for replicated database maintenance.
In
PODC, pages 1–12, 1987.
[8] P. T. Eugster, R. Guerraoui, S. B. Handurukande, A. M. Ker-
marrec, and P. Kouznetsov. Lightweight probabilistic broad-
cast. In DSN, 2001.
[9] I. Gupta, R. van Renesse, and K. P. Birman. Scalable fault-
tolerant aggregation in large process groups. In DSN, pages
433–442, 2001.
[10] R. M. Karp, C. Schindelhauer, S. Shenker, and B. Vocking.
Randomized rumor spreading. In IEEE Symposium on Foun-
dations of Computer Science, pages 565–574, 2000.
[11] M. J. Lin, K. Marzullo, and S. Masini. Gossip versus de-
terministically constrained ﬂooding on small networks. In
DISC, pages 253–267, 2000.
[12] P. Linga, I. Gupta, and K. Birman. A churn-resistant peer-
to-peer web caching system. ACM Workshop on Survivable
and Self-Regenerative Systems, October 2003.
[13] D. Malkhi, Y. Mansour, and M. K. Reiter. Diffusion without
false rumors: On propagating updates in a Byzantine en-
vironment. Theoretical Computer Science, 299(1–3):289–
306, April 2003.
[14] D. Malkhi, E. Pavlov, and Y. Sella. Optimal unconditional
information diffusion. In 15th International Symposium on
DIStributed Computing (DISC), 2001.
[15] D. Malkhi, M. K. Reiter, O. Rodeh, and Y. Sella. Efﬁcient
update diffusion in Byzantine environments. In 20th IEEE
International Symposium on Reliable Distributed Systems
(SRDS), October 2001.
[16] Y. M. Minsky and F. B. Schneider. Tolerating malicious gos-
sip. Distributed Computing, 16(1):49–68, February 2003.
[17] D. Moore, G. Voelker, and S. Savage.
net denial-of-service activity.
USENIX Security Symposium, pages 9–22, August 2001.
Inferring Inter-
In Proceedings of the 10th
[18] National Institute for Standards and Technology. Digital
Signature Standard (DSS). FIPS Publication 186-2, October
2001. http://csrc.nist.gov/publications/ﬁps/.
[19] B. Pittel. On spreading a rumor. SIAM Journal on Applied
Mathematics, 47(1):213–223, February 1987.
[20] C. L. Schuba, I. V. Krsul, M. G. Kuhn, E. H. Spafford,
A. Sundaram, and D. Zamboni. Analysis of a denial of
service attack on TCP.
In Proceedings of the 1997 IEEE
Symposium on Security and Privacy, pages 208–223, May
1997.
[21] B. White, J. Lepreau, L. Stoller, R. Ricci, S. Guruprasad,
M. Newbold, M. Hibler, C. Barb, and A. Joglekar. An in-
tegrated experimental environment for distributed systems
and networks. In OSDI, pages 255–270, Boston, MA, Dec.
2002. USENIX Association.
[22] L. Zhou, F. B. Schneider, and R. van Renesse. COCA: A
secure distributed online certiﬁcation authority. ACM Trans-
actions on Computer Systems, 20(4):329–368, 2002.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:10 UTC from IEEE Xplore.  Restrictions apply.