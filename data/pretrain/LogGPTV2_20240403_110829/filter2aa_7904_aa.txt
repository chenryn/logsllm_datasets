---
title: PHP
date: 2021-01-04 15:23:28
background: bg-[#7477a9]
tags:
    - web
categories:
    - Programming
intro: |
    This [PHP](https://www.php.net/manual/en/) cheat sheet provides a reference for quickly looking up the correct syntax for the code you use most frequently. 
plugins:
    - copyCode
---
Getting Started
---------------
### hello.php
```php
```
PHP run command
```shell script
$ php hello.php
```
### Variables
```php
$boolean1 = true;
$boolean2 = True;
$int = 12;
$float = 3.1415926;
unset($float);  // Delete variable
$str1 = "How are you?";
$str2 = 'Fine, thanks';
```
See: [Types](#php-types)
### Strings
```php
$url = "quickref.me";
echo "I'm learning PHP at $url";
// Concatenate strings
echo "I'm learning PHP at " . $url;
$hello = "Hello, ";
$hello .= "World!";
echo $hello;   # => Hello, World!
```
See: [Strings](#php-strings)
### Arrays
```php
$num = [1, 3, 5, 7, 9];
$num[5] = 11;
unset($num[2]);    // Delete variable
print_r($num);     # => 1 3 7 9 11
echo count($num);  # => 5
```
See: [Arrays](#php-arrays)
### Operators
```php
$x = 1;
$y = 2;
$sum = $x + $y;
echo $sum;   # => 3
```
See: [Operators](#php-operators)
### Include {.row-span-3}
#### vars.php
```php
```
#### test.php
```php
 apple
/* Same as include,
cause an error if cannot be included*/
require 'vars.php';
// Also works
include('vars.php');
require('vars.php');
// Include through HTTP
include 'http://x.com/file.php';
// Include and the return statement
$result = include 'vars.php';
echo $result;  # => Anything you like.
?>
```
### Functions
```php
function add($num1, $num2 = 1) {
    return $num1 + $num2;
}
echo add(10);    # => 11
echo add(10, 5); # => 15
```
See: [Functions](#php-functions)
### Comments 
```php
# This is a one line shell-style comment
// This is a one line c++ style comment
/* This is a multi line comment
   yet another line of comment */
```
### Constants
```php
const MY_CONST = "hello";
echo MY_CONST;   # => hello
# => MY_CONST is: hello
echo 'MY_CONST is: ' . MY_CONST; 
```
### Classes
```php
class Student {
    public function __construct($name) {
        $this->name = $name;
    }
}
$alex = new Student("Alex");
```
See: [Classes](#php-classes)
PHP Types
---------------
### Boolean {.row-span-2}
```php
$boolean1 = true;
$boolean2 = TRUE;
$boolean3 = false;
$boolean4 = FALSE;
$boolean5 = (boolean) 1;   # => true
$boolean6 = (boolean) 0;   # => false
```
Boolean are case-insensitive
### Integer {.row-span-2}
```php
$int1 = 28;    # => 28
$int2 = -32;   # => -32
$int3 = 012;   # => 10 (octal)
$int4 = 0x0F;  # => 15 (hex)
$int5 = 0b101; # => 5  (binary)
# => 2000100000 (decimal, PHP 7.4.0)
$int6 = 2_000_100_000;
```
See also: [Integers](https://www.php.net/manual/en/language.types.integer.php)
### Strings
```php
echo 'this is a simple string';
```
See: [Strings](#php-strings)
### Arrays
```php
$arr = array("hello", "world", "!");
```
See: [Arrays](#php-arrays)
### Float (Double)
```php
$float1 = 1.234;
$float2 = 1.2e7;
$float3 = 7E-10;
$float4 = 1_234.567;  // as of PHP 7.4.0
var_dump($float4);    // float(1234.567)
$float5 = 1 + "10.5";   # => 11.5
$float6 = 1 + "-1.3e3"; # => -1299
```
### Null
```php
$a = null;
$b = 'Hello php!';
echo $a ?? 'a is unset'; # => a is unset
echo $b ?? 'b is unset'; # => Hello php
$a = array();
$a == null    # => true
$a === null   # => false
is_null($a)   # => false
```
### Iterables
```php
function bar(): iterable {
    return [1, 2, 3];
}
function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}
foreach (bar() as $value) {
    echo $value;   # => 123
} 
```
PHP Strings
---------------
### String
```php
# => '$String'
$sgl_quotes = '$String';
# => 'This is a $String.'
$dbl_quotes = "This is a $sgl_quotes.";
# => a 	 tab character.
$escaped   = "a \t tab character.";
# => a slash and a t: \t
$unescaped = 'a slash and a t: \t';
```
### Multi-line
```php
$str = "foo";
// Uninterpolated multi-liners
$nowdoc =  11
echo substr($s, 0, 3); # => Hel
echo substr($s, 1);    # => ello Phper
echo substr($s, -4, 3);# => hpe
echo strtoupper($s);   # => HELLO PHPER
echo strtolower($s);   # => hello phper
echo strpos($s, "l");      # => 2
var_dump(strpos($s, "L")); # => false
```
See: [String Functions](https://www.php.net/manual/en/ref.strings.php)
PHP Arrays
---------------
### Defining {.row-span-2}
```php
$a1 = ["hello", "world", "!"]
$a2 = array("hello", "world", "!");
$a3 = explode(",", "apple,pear,peach");
```
#### Mixed int and string keys
```php
$array = array(
    "foo" => "bar",
    "bar" => "foo",
    100   => -100,
    -100  => 100,
);
var_dump($array);
```
#### Short array syntax
```php
$array = [
    "foo" => "bar",
    "bar" => "foo",
];
```
### Multi array
```php
$multiArray = [ 
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];
print_r($multiArray[0][0]) # => 1
print_r($multiArray[0][1]) # => 2
print_r($multiArray[0][2]) # => 3
```
### Multi type {.row-span-2}
```php
$array = array(
    "foo" => "bar",
    42    => 24,
    "multi" => array(
         "dim" => array(
             "a" => "foo"
         )
    )
);
# => string(3) "bar"
var_dump($array["foo"]);
# => int(24)
var_dump($array[42]);    
# =>  string(3) "foo"
var_dump($array["multi"]["dim"]["a"]);
```
### manipulation
```php
$arr = array(5 => 1, 12 => 2);
$arr[] = 56;      // Append
$arr["x"] = 42;   // Add with key
sort($arr);       // Sort
unset($arr[5]);   // Remove
unset($arr);      // Remove all
```
See: [Array Functions](https://www.php.net/manual/en/ref.array.php)
### Indexing iteration
```php
$array = array('a', 'b', 'c');
$count = count($array);
for ($i = 0; $i  "bar", "bar" => "foo"];
foreach ( $arr as $key => $value )
{
  	echo "key: " . $key . "\n";
    echo "val: {$arr[$key]}\n";
}
```
### Concatenate arrays
```php
$a = [1, 2];
$b = [3, 4];
// PHP 7.4 later
# => [1, 2, 3, 4]
$result = [...$a, ...$b];
```
### Into functions
```php
$array = [1, 2];
function foo(int $a, int $b) {
	echo $a; # => 1
  	echo $b; # => 2
}
foo(...$array);
```
### Splat Operator
```php
function foo($first, ...$other) {
	var_dump($first); # => a
  	var_dump($other); # => ['b', 'c']
}
foo('a', 'b', 'c' /*, ...*/ );
// or
function foo($first, string ...$other){}
```
PHP Operators {.cols-4}
---------------
### Arithmetic
| -    | -              |
|------|----------------|
| `+`  | Addition       |
| `-`  | Subtraction    |
| `*`  | Multiplication |
| `/`  | Division       |
| `%`  | Modulo         |
| `**` | Exponentiation |
### Assignment
| -        | -                   |
|----------|---------------------|
| `a += b` | Same as `a = a + b` |
| `a -= b` | Same as `a = a â€“ b` |
| `a *= b` | Same as `a = a * b` |
| `a /= b` | Same as `a = a / b` |
| `a %= b` | Same as `a = a % b` |
### Comparison {.row-span-2}
| -     | -                            |
|-------|------------------------------|
| `==`  | Equal                        |
| `===` | Identical                    |
| `!=`  | Not equal                    |
| `<>`  | Not equal                    |
| `!==` | Not identical                |
| ``   | Greater than                 |
| `=`  | Greater than or equal        |
| `` | Less than/equal/greater than |
### Logical
| -     | -            |
|-------|--------------|
| `and` | And          |
| `or`  | Or           |
| `xor` | Exclusive or |
| `!`   | Not          |
| `&&`  | And          |
| `||`  | Or           |
### Arithmetic {.col-span-2}
```php
// Arithmetic
$sum        = 1 + 1; // 2
$difference = 2 - 1; // 1
$product    = 2 * 2; // 4
$quotient   = 2 / 1; // 2