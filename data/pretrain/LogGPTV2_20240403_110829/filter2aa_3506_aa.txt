Cover Your APIs: Securing Your Hidden Web Attack Surface
WHITE PAPER
Securing Your 
Hidden Web 
Attack Surface
Cover Your APIs
Cover Your APIs: Securing Your Hidden Web Attack Surface
+ The importance of web APIs and web services in 
software development
+ The challenges of including APIs in application security 
testing, and how to overcome them
+ The security and efficiency benefits of holistic AppSec
Highlights from this white paper include:
2
Web application programming interfaces (APIs) present a huge – yet still underprotected – 
attack surface for cybercriminals. While application security testing has traditionally been 
focused on the user interface, modern applications rely heavily on APIs for data exchange 
and to build the application architecture. Today’s enterprise web apps are no longer 
monolithic applications but rather constellations of loosely coupled services communicating 
through APIs, all subject to rapid development in response to shifting business requirements 
– and each a target in its own right. While these innovation pathways are crucial for growth, 
they also dramatically increase the web attack surface, leaving organizations exposed to 
attacks that target APIs in order to directly access sensitive data and functionality.
As Gartner® estimates, “By 2023, 90% of web-enabled applications will have more surface 
area for attack in the form of exposed APIs rather than the user interface, up from 50% 
in 2020.” It is therefore quite clear that application security testing must also cover APIs. 
However, legacy AppSec approaches haven’t kept pace with technical developments, leaving 
organizations struggling to reconcile multiple testing tools and processes – or altogether 
overlooking web application APIs in their security programs. With API abuses expected 
to become the top threat vector in 2022, continued neglect can only mean yet more    
successful cyberattacks.
This white paper shows the importance of including APIs in web application security testing 
and outlines a modern approach to vulnerability testing that covers the entire attack surface 
of modern web applications, from development to production.
Executive summary
Cover Your APIs: Securing Your Hidden Web Attack Surface
3
What you don’t see can hurt you most
At the risk of revisiting an industry-standard 
analogy, APIs are a major part of the hidden 
underwater part of the iceberg that is your 
web application environment. Just as 80% 
of an iceberg lurks under the surface, the 
vast majority of modern applications work 
with APIs more than their user interface. In 
fact, research shows that APIs account for 
a massive 83% of all web traffic, in no small 
part because they are what powers content 
delivery networks and data back-ends.
We are used to thinking that the user 
interface and the application are the same 
thing, but the visible controls are only the 
start of the attack surface available to threat 
actors. In the physical world, criminals are 
unlikely to march in through the front office 
if they can sneak in through the service 
entrance. Cybercriminals are no different – 
why waste time trying to hack a login form 
when they can quietly extract the same data 
through an API? More importantly, APIs are 
far more likely to slip under the radar during 
testing and asset inventory, which makes 
them harder to secure and easier to exploit.
As we will see later, a graphical user 
interface is increasingly just a way to 
retrieve data from APIs and present it 
to users. In modern service-oriented 
architectures, most – if not all – application 
functionality is implemented as web 
services and exposed through APIs. In 
effect, APIs are the gatekeepers of the 
world’s business logic and data – and 
with information now the most valuable 
resource, it is no wonder that API-based 
attacks are on the rise. To quote Gartner®:
“By 2023, 90% of web-enabled applications will have 
more surface area for attack in the form of exposed APIs 
rather than the user interface, up from 50% in 2020. By 
2022, API abuses will move from an infrequent to the 
most frequent attack vector, resulting in data breaches 
for enterprise web applications.”  
Source: 
Gartner, Magic Quadrant™ for Application Security Testing 2021, Dale Gardner, Mark Horvath, Dionisio Zumerle, 
6 January 2021. GARTNER and MAGIC QUADRANT are a registered trademark and service mark of Gartner, Inc. and/or its 
affiliates in the U.S. and internationally and are used herein with permission
If you want to avoid becoming the next breach headline, there is no question that you need to 
test and secure your web applications in their entirety, including both UI and API – because 
cybercriminals will find the weakest spot and strike there. But while web application security 
testing is already a fairly mature segment, API security is still playing catch-up, and there are 
many misconceptions and misunderstandings to clear up around testing the API part of the 
web attack surface.
Cover Your APIs: Securing Your Hidden Web Attack Surface
4
Why APIs make              
API endpoints are easy to define 
but hard to find, test, and secure.
Many start life as private APIs 
intended for testing or internal use 
but later slip into production, often 
without inventory, documentation, 
logging, or access control.
Web APIs are designed with 
automated access in mind, which is 
convenient both for valid users and   
for attackers.
API creators may only be expecting 
well-formed requests from known 
systems (or even the same 
application), so they are less likely to 
check incoming calls with the same 
care as for user-facing pages.
attractive targets
Cover Your APIs: Securing Your Hidden Web Attack Surface
5
Demystifying web APIs
Part of the reason for the rising tide of API-based attacks is that many organizations are still 
not sure what web APIs they have, what they should do about them, and what questions to 
ask when investigating API security. This section explains web APIs and related concepts, 
showing how they work, what hides behind the acronyms, and why API security is still widely 
misunderstood – and underestimated as a risk vector.
Attacks on APIs vs. attacks via APIs
Anyone researching web API security will soon find that the term is used in two very different 
senses. One usage relates to securing access to the API itself, while the other is about 
securing the underlying applications and services against attacks that come through that API. 
Understanding the difference is crucial for selecting the right tools and methods, so here is a 
brief overview:
For the vast majority of web APIs, 
getting access that allows you to 
make API calls is only possible 
with the proper authorization. 
This usually requires an access 
key combined with some form 
of automated authentication to 
verify that the requesting system is 
permitted to access the API in the 
first place. Attacks on APIs focus 
on bypassing access controls to 
then allow threat actors to make 
API calls that target the underlying                  
applications or services.
Once attackers have obtained API 
access by bypassing access controls 
or simply finding an unsecured 
endpoint, they can start probing the 
application in the hope of finding 
exploitable vulnerabilities. At this 
point, they can use the whole 
array of available web application 
exploits – with the added bonus that 
they are now using an access path 
designed specifically for remote and   
automatic use.
Figure 1. Attacks on APIs are about getting access to the interface itself.
Figure 2. Attacks via APIs are about using API access to attack the 
underlying application.
Attacks on APIs
Attacks via APIs
Cover Your APIs: Securing Your Hidden Web Attack Surface
6
Web API glossary
   Application programming interface (API):
A connection for exposing software functionality to other systems and 
applications. This is a general programming concept, not limited to web 
development. An API defines a request format and a return format.
   Web API: 
An interface for accessing web-based software. There are many models 
and standards for defining and calling web APIs, the most widely used 
model being REST. Any sizable web application is likely to have an API 
somewhere to allow automated access to selected functionality. For 
example, an e-commerce platform may provide sellers with a manual form 
for adding single items while also exposing an API endpoint for adding 
items in bulk from third-party inventory management applications.
   Web service: 
Web-based code that is not a standalone application but only performs 
a specific operation. Web services are only accessible through their 
interfaces, so whenever you have a web service, you also have an API. 
While the opposite is not true (because systems and applications can 
also have APIs), you will often see the terms web API and web service        
used interchangeably.
   API endpoint:
The URL for calling a specific web API. The endpoint is the address to 
which API requests and parameters are sent. What endpoints are exposed, 
how they are accessed, and what format the requests should be depends 
entirely on the API type and design. Ideally, all endpoints should be listed 
and documented in the API specification.
Cover Your APIs: Securing Your Hidden Web Attack Surface
7
Common web API types
   REST:
Short for REpresentational State Transfer, REST is by far the most popular 
type of web API. Rather than a strictly-defined format or protocol, REST 
is a general style of web application architecture that sets out guidelines 
for designing and implementing HTTP communication between web-based 
systems and components. Each operation available through a RESTful API 
corresponds to a different endpoint (URL). A list of all the endpoints along 
with their parameters and data formats makes up the API specification. 
JSON is the most widely used data format, but XML and others are       
also supported.
   SOAP:
Originally called XML-RPC, SOAP was the first widely-used standard for 
web service communication. SOAP uses XML messages to exchange 
requests and responses. SOAP was created to be universal, extensible, 
and technology-agnostic, which makes it relatively difficult to use and 
optimize compared to HTTP-based REST communication, especially 
for simple scenarios. However, being a full-featured protocol with its 
own service description language (WSDL), it is well suited for more                   
complex communication.
   GraphQL:
The newcomer in this list, GraphQL introduced the ability to query APIs in 
a similar way to databases. A single GraphQL endpoint receives queries, 
passes them to a resolver, and returns only the requested data. This allows 
clients to get exactly the information they need in a single request instead 
of assembling it across multiple calls. When the introspection feature 
is enabled, developers can interactively query a GraphQL endpoint to 
discover what data it can provide. While still relatively new, GraphQL is 
rapidly gaining popularity because of its usefulness for applications that 
work with very large data sets, and its adoption can only accelerate in the 
coming years.
Cover Your APIs: Securing Your Hidden Web Attack Surface
8
Meet your ever-growing web attack surface
An external API is essential for any web 
app that needs to interact or integrate 
with other software. In that respect, APIs 
are the glue that holds together the entire 
modern web. They make it possible to 
add communication between all kinds of 
systems, fueling innovation and unlocking 
new business opportunities. Mashups, 
from content aggregators to enterprise 
dashboards, are a prime example of apps 
that rely on content and functionality from 
external sources, retrieved and manipulated 
via APIs.
In the enterprise software world, APIs are 
crucial for integration and customization. 
For example, Invicti products provide 
dozens of REST API endpoints that 
allow organizations to automatically run 
vulnerability scans, fetch results, manage 
users, and perform many other operations. 
In this case, the API makes it possible to 
integrate vulnerability testing into existing 
workflows and customize out-of-the-box 
integrations where necessary. Crucially 
for security and data confidentiality, only 
authorized and licensed users can make 
such API calls.
One thing is certain: if you have web applications, you already have APIs somewhere in your 
web attack surface today. The original use case for adding them was to extend access to 
application functionality beyond the graphical user interface, most notably for integrations 
and automation. With the move to service-oriented architectures and agile development, it 
became clear that APIs and the services behind them were taking center stage as one of the 
fundamental building blocks of modern web apps. In terms of security, the web application has 
gone from one big target to hundreds of little targets – and that means hundreds of potential 
entry points to defend.
In general, APIs require a unique access key 