# 案例分享
之前遇到一个十分精彩的应急响应案例，当时溯源和问题解决都很顺利。但是后续在复现这个现象以及渗透测试中攻击利用这个威胁点上出现了一些问题，断断续续研究了好些日子才几近分析完成。
先说一下这个应急案例，事情发生在当天下午，然而我是晚上约9点半的时候才接到电话。然后惯例建群，拉上项目组和各大领导们在群里说明事件严重性，要求全力支持配合，接着现场技术人员就把出问题的Apache服务器的access.log打开截了个图丢给我，然后告诉我大概现象就是两点：  
1、 Apache服务器的access.log日志出现很多奇怪日志；  
2、 该服务器性能下降，内存占用高。
拿到截图后，可以从这个access.log中看到很多奇怪的第三方域名，没有一个域名是属于本地合法域名集的，而且响应码几乎全部是200，少数的几个404确实也是对应的网站域名不可访问。
由于本人才疏学浅，没见过什么大世面，属于部门一等一的划水运动员。刚开始以为这就是一个简单的url跳转漏洞导致的奇怪的日志记录。对这些第三方域名进行访问测试，基本都是一些博彩类网站或者一些日常娱乐性站点，比如花椒直播，基本上可以认定该攻击者目的应该进行引流攻击，赚取广告流量费用，差不多可以作为黑产的一种类型了。接着我再看了看日志记录的源IP发现是一个内网IP地址，然后我就陷入了沉思。这个攻击者是傻么？既然他已经拿到一台内网服务器，为什么还要从别的内网服务器进行间接访问？这不是很费劲么？（基于后面的事实证明，不是他傻是我傻。捂脸哭。）
从我错误的分析来看，前后是矛盾的。因为目前可以确定的是该攻击者是在进行黑产交易，但是从以往对黑产类型的攻击事件的应急响应可以得到一个比较显著且具有实际意义的结论，就是黑产事件（例如勒索等）基本是利用的一些“著名”且具有“攻击成本低”的“高危便携性”的漏洞，例如struts2，这个攻击者不可能花费大量精力来内网漫游做这种广告流量的黑产交易，因为成本太高，兑现效率太低。
接着我比对了正常的access.log发现正常的access日志的Request请求并不会包含http协议头和域名字段，而是只记录url路径。这时候我才发现事情并不简单。
经过再一次地分析后发现这是一个利用中间件服务器的代理功能进行恶意代理攻击的事件，也就是说这台Apache服务器被人作为中间代理去访问其他站点。致使其在日志上记录下了代理日志，而这些代理日志就是在案例图中看到的那些第三方域名访问记录。
基本上原因是找到了，但是还遗留了一个问题，就是那个内网源IP是怎么回事？我想了一会，判断这可能是一台做反向代理的机器，而且很大概率上是可能是一台和Apache同处于DMZ区域的WAF。经过与客户的确认，确实如我想的一般。
这里对WAF的4种部署方式做个简单的概念叙述。  
WAF一共有4种部署方式：  
1、 串联部署  
最为常见的部署方式，增加WAF负载，容易出现单点故障；  
2、 旁路部署  
需要进行二层或三层流量牵引，部署复杂，但是可以降低WAF负载，提高利用效率，只转发Web相关流量；  
3、 反向代理  
客户端与服务器端通讯不透明，对外IP即为WAF的公网IP，WAF接收到请求后将更换请求源地址为自身IP，向内网发起请求转发；  
4、 镜像监听  
只能检测服务是否被攻击， 不能对客业务进行防护；
也就是说该案例的实际网络架构和攻击者的攻击路径分析如下图所示：
画完这个图，我看着这个架构越看越觉得我好像漏了什么东西，这个图我越看越觉得好像曾经在哪见到过。翻了翻和客户的聊天记录，我果然漏了一个点。现象分析完成后我现在只能溯源得到为什么会出现奇怪的日志，但是我并不能通过这个代理攻击来澄清服务器性能下降，内存占用高的问题。而这个恶意代理攻击我或许在之前从未遇到，但是我遇到过并实际手动操作过另一个几乎是利用了同一个安全威胁点的攻击模式，CC（Challenge
Collapsar）攻击。
CC攻击就是利用多台僵尸机进行多线程http代理向目标服务器发起大量的真实http请求，使其消耗掉大量的并发资源，拖慢整个网站，造成拒绝服务。但是在一般的CC攻击中，我们往往只把注视点放在被攻击方，而那些僵尸机其实也是面临同样的资源消耗问题，其内存性能也会随之受到侵扰。没做过CC攻击实际操作的人可能以为那些僵尸机真的就是需要一台一台入侵getshell才能用他们做CC攻击的代理服务器。实际上并不是如此，CC攻击的实际操作往往是在一些网络代理平台上批量获取可进行代理的服务器进行利用，一些著名的平台例如“快代理”，“花刺代理”，“西刺代理”等等，每天都在发布大量可用的代理服务器的IP和端口供用户使用。而CC攻击往往就是直接拖下这些代理IP端口，直接加载到CC攻击器的List模块，然后一键攻击即可（这里感谢实施部门的CC同学，当然他叫CC是因为他有一台大众CC，不过他也是CC攻击的一般性实操人）。
# 代理类型
正常导致这种恶意代理攻击威胁是因为服务器开启了正向代理开关，导致攻击者可以利用该服务器作为中间代理来访问其他站点。除了正向代理外，常见的还有反向代理，也就是刚刚所说的WAF的部署方式，还有一种透明代理。常见的就是这几种：正向代理，反向代理，透明代理，CONNECT通道。
# 缺陷修复
1、 最先肯定是关闭正向代理开关。  
正确配置Apache的mod_proxy模块。在httpd.conf配置中将虚拟主机中配置修改为ProxyRequests Off，取消使用正向代理。  
2、
在关闭正向代理后，会发现只能杜绝部分代理请求，还存在一些代理请求不能被屏蔽，接下来就通过.htaccess文件配置转发规则，以白名单加黑名单的双向措施在中间件层面来解决这个问题。
.htaccess文件内容如下
    RewriteEngine on    //启用rewrite引擎
    RewriteBase /       //设置Base地址，/为根目录
    RewriteCond %{HTTP_HOST} example.com [NC]
    //配置白名单域名，允许flag为NC，表示允许转发
    RewriteRule ^(.*)$ http://www.example.com/$1 [NC] [L,R=301]
    //配置url地址的正则表达式，配置flag为L,R=301，表示响应码配置为301跳转
    RewriteCond %{HTTP_HOST} www.example.com [NC]
    RewriteRule ^(.*)$ http://www.example.com/$1 [NC] [L,R=301]
    RewriteRule ^(.*)$ - [F]
    //配置正则表达式匹配所有（因为是按顺序匹配，这里即匹配非白名单的所有第三方非法域名），配置flag为F，表示403 Forbidden。
启用.htaccess，使其生效
  1. 在http.conf将如下配置的注解取消，启用mod_rewrite模块  
LoadModule rewrite_module modules/mod_rewrite.so
  2. 将AllowOverride None修改为AllowOverride All
    # AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    # Options FileInfo AuthConfig Limit
    配置AllowOverride None为AllowOverride All
    C、改正vhost配置，给网站web目录添加一些Options配置，例如
    ServerName sf2.aonola.com
    DirectoryIndex app.php