权限，因面在某个时间点背定会打开一个套接字。你可以继续深人分析，在androlyze中调用
目标方法的show函数，来对这个方法进行反汇编以了解调用该方法会发生什么。
In [38] : d.CLAss_Lcom_yougetitback_androidapplication_ConfirmPinScreen.
METHOD_doPost.show ()
Lcom/yougetitback/androidapplication/ConfirmPinScreen; -
####++++++ Method Information
>doPost (Ljava/1ang/String1
Ljava/lang/String:)Z [access_flags=private]
- 1ocal registers: v0...v10
+++++t++t+ Params
v11:java.1ang.String
v12:java.1ang.String
- return :boolean
doPost-BB90x0 :
(00000000)
const/4
v5, 1 [ doPost-BB80x4 ]
v6, 0
1(00000002) const/4
doPost-BBB0x4 :
2(00000004) new-instance
v3, Ljava/net/URL;
3
(00000008) invoke-direct
v3, v11, Ljava/net/URL;->
(Ljava/1ang/String;)V
4(0000000e) invoke-virtual
v3, Ljava/net/URL;-
Ljava/net/URLConnection
>openConnection ()
5
(00000014) move-result-obfect
v4, Ljava/net/HttpURLConnection:
V4
6
(0000001a)iput-object
(00000016) check-cast
7
v4, v10, Lcom/yougetitback/
androidapplication/ConfirmPinScreen; ->con L5ava/net/HttpURLConnectionj
8(0000001e) 1get-object
v4, v10, Lcom/yougetitback/
androidapp1ication/ConfirmPinScreen; ->con Ljava/net/HttpURLConnection;
---
## Page 92
76
第4章云计算的安全风险
9
(00000022) const-string
10 (00000026) invoke-virtual
V7,'POST
v4, v7, Ljava/net/HttptRLConnec-
->setRequestMethod (Ljava/lang/String: )V
tionj
11 (0000002c) iget-object
androidapp1ication/ConfirmPinScreen; ->con Ljava/net/HttpURLConneetion;
v4, v10, Lcom/yougetitback/
12 (00000030) const-string
13 (00o00034) const-string
v7,
‘Content-type
xwww-form-urlencoded*
'8A
‘application/
HttpURLConnection;>setRequestProperty(Ljava/lang/String: Ljava/Lang/String: 1
14 (00000038) invoke-virtual
v4, v7, v8, Ljava/net/
V
15 (0000003e) iget-object
v4, v10, Lcom/yougetitback/
androidagplication/ConfirmPinScreen; ->con Ljava/net/HttpURLConneetion:
+ + 
31(00000084)
const-string
v7,
'Android Client 
. quafy-zasn.
32(00000088)
const-string
v8,
+ + s
androidapplication/ConfirmPinScreen; =>con Ljava/net/HttpURLConnection;
49(000000d4)iget-object
v4, v10, Lcom/yougetitback/
/5U0（8P000000）05
v7, 1
51 (000000da) invoke-virtual
v4, v7, Ljava/net/
HttpURLConnection;
A(z) andutogaascon Ljava/net/HttpURLConnection;
53 (0o0000e4) invoke-virtual
>connect ()V
v4, Ljava/net/HttpURLConnectionj
首先你看到关于DalvikVM处理这一方法对象分配的基本信息，以及这一方法本身的标识符。
在接下来的实际反汇编代码中，java.net.HttpURLConnection等对象的实例化，以及这一对
象的connect方法的调用，都确认了对INTERNET权限的使用。
你可以通过对同一方法调用其source函数，对这个方法进行反编译，来获得一个可读性更
好的版本，反编译的返回结果可以有效地恢复出Java源代码。
In [39] : d, CLASs_Lcom_yougetitback_androidapp1ication_ConfirmPinScreen,
private boolean doPost(String pl1, String p12)
METHOD_doPost.source ()
this.con = new java.net ,URL (p11) ,openConnection();
this.con.setRequestProperty (*Content-type*,
*application/×www-form-urlencoded*);
this.con.setReguestProperty (*Content-Length*, new
StringBui1der() append (p12 .1ength()) , toString (1):
this.con.setRequestProperty(*Connection*, *keep-alive*):
this.con.setRequestProperty(*User-Agent*, *Android Client*);
this.con.setRequestProperty(*accept*.**/**);
this.con.setRequestProperty(*Http-version*, *WrrP/1.1*);
this.con.setDooutput(1);
this.con.setRequestProperty(*Content-1anguages*, *en-EN*);
this.con.setDoInput (1) :
---
## Page 93
4.2案例分析：移动安全应用
this,con,connect () ;
v2 = this.con. getOutputStream(1 :
v2 write (p12.getBytes (*urp8*)) :
android.uti1.Log-d(*yGIB Test*, new
v2. flush() ;
StringBui1der(*con.getResponseCode()-
>*) append(this.con.getResponseCode() ) .toString ()) :
“ur1String->*) -append (p11) .toString()) ;
android.uti1.Log.d(*yGIB Test*, new StringBuilder(
append (p12) .toString ()) :
android.uti1.Log-d(*YGIB Test*, new StringBuilder (*content-->*),
注意需要注意到反编译结果并不是完美的，这部分是由于DalvikVM和Java虚拟机之间的差
并。在两种虚拟机中控制流和数据流的不同表达形式，影响了从Dalvik宇节码到Java伪
码的转换效果。
你可以看到对android.util.Log.d的调用，该方法将消息写人拥有调试优先级的日志记
录器中。在本例中，应用看起来对HTTP请求的详细信息进行了记录，这会构成一个有趣的信息
泄露。你随后就可以查看日志的详细信息。现在，查看下这个应用中可能存在哪些IPC编点。先
通过调用get_activities方法来看看Activity。
In [87]: a.get_activities()
[ * com yougetitback androidapplication. ReportSplashScreen',
Out [87]:
'com.yougetitback.androidapplication . SecurityQuestionScreen',
com youget itback androidapplication.SplashScreen*,
' com.yougetitback.androidapplication.MenuScreen',
com-yougetItback.androidapplication.settings,setting.Setting *,
' com-yougetitback.androidapp1ication.HodifyPinScreen'
com-yougetitback.androidapplication.ConfirmPinScreen',
' com.yougetitback.androidapp1lication .EnterRegistrationCodeScreen*,
+ 
In [88] : a.get_main_activity()
Out [88]: u′com.yougetitback.androidapplication.ActivateSplashScreen *
不出所料，这个应用有许多个Activity，其中包括刚刚分析过的ConfirmPinScreen。接下
来通过调用get_services方法来检查Service。
In [113]: a.get_services()
[ *com.yougetitback.androidapplication.DeleteSmsService*,
Out [113] :
'com,yougetitback androidapplication,FindLocationService',
'com.yougetitback,androidapplication.PoatLocationService',
' com.yougetitback.androidapp1ication.LockAcknowledgeService*,
'com.yougetitback.androidapplication.ContactBackupService',
---
## Page 94
78
第4章云计算的安全风险
'com-yougetitback androidapplication.ContactRestoreService*,
com-yougetitback. androidapplication. UnlockService′,
' com-yougetitback androidapplLcation. PingService′,
com-yougetitback,androidapplication.UnlockAcknowledgeService'
con.yougetitback.androidapplication.vipe.MyService',
从其中某些Service的命名表示（如UnlockService和wipe）来看，它们很可能在某些事
件触发时从其他应用组件中获取并处理命令。接下来，使用get_receivers方法来查看应用中
的 Broadcast Receiver。
In [115] : a.get_receivers()
[ * com-yougetitback.androidapp1ication. settings main. EntranceSMyAdmin',
Out [115]:
com-yougetitback.androidapplication.RyStartupIntentReceiver*,
com-yougetitback.androidapplLcation.SmaIntentRecelver',
com-yougetitback.androidapplication.IdleTimeout',
 com.yougetitback.androidapplication. PingTimeout*,
com.yougetitback.androidapplication.RestTimeout',
com.yougetitback.androidapplication.SplashTimeout',
com-yougetitback.androidappllcation.EmergencyTimeout*,
com-yougetitback.androidapplication.OutgoingCallReceiver',
'com.yougetitback.androidapplication. IncomingCallReceiver',
com.yougetitback.androidapplication.IncomingCallRecelver',
' com-yougetitback.androidapplication.C2DeReceiver′1
 com-yougetitback.androidapplication.NetworkStateChangedReceiver',
非常确定的是，你找到了一个看起来与处理短信息相关的BroadcastReceiver，而SMS短信
很可能作为对设备进行加锁或者擦除的带外通信渠道。因为应用请求了READ_SMS权限，所以你
看到了一个特意命名为 SmsIntentReceiver 的 Broadcast Receiver，应用的 Manifest文件中很
有可能包含了匹配SMS_RECEIVED广播的Intent过滤器。可以在androlyze工具中使用少数几
行 Python代码，查看AndroidManifestxml的内容。
In [77] : for e in x.getElementsByTagName (*recelver*) :
print e,toxml ()
•... 1
* com.yougetitback .androidapplication,SmaIntentReceiver*>