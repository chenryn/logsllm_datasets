# Survivable Key Compromise in Software Update Systems

## Authors
- Justin Samuel, UC Berkeley, Berkeley, California, USA
- Nick Mathewson, The Tor Project
- Justin Cappos, University of Washington, Seattle, Washington, USA
- Roger Dingledine, The Tor Project

### Abstract
Current software update systems offer little to no defense against key compromise, leaving millions of clients vulnerable. In this paper, we identify three critical classes of information that must be authenticated for secure software updates: the content of updates, the timeliness of updates, and the consistency of repository state. Our analysis of existing systems reveals that their ability to securely communicate this information in the event of a key compromise is weak or non-existent. We also find that inadequate trust revocation mechanisms exacerbate security issues. To address these problems, we propose core security principles and design TUF (The Update Framework), an open-source framework that enhances resilience to key compromise. 

### Categories and Subject Descriptors
- K.6.5 [Management of Computing and Information Systems]: Security and Protection
- D.2.0 [Software Engineering]: Protection Mechanisms

### General Terms
- Security, Design

### Keywords
- Software updates, authentication, delegation, key management, key compromise, revocation, threshold signatures

### 1. Introduction
Software update systems are crucial for maintaining the security of installed software by discovering, downloading, verifying, and applying updates. These systems include package managers, library managers, and application updaters. Many systems rely on cryptographic signatures to ensure the authenticity of downloaded files, making the security of private keys paramount.

Historically, the compromise of a single trusted key in these systems has been fatal, allowing attackers to distribute malicious software. Additionally, many systems lack secure key revocation mechanisms, further increasing the risk. For example, popular Linux distributions have faced significant issues due to key compromises, and vulnerabilities in PKI (Public Key Infrastructure) have been well-documented.

To enhance the security of software update systems, we propose a set of design principles and introduce TUF, a framework that improves resilience to key compromise through role separation, multi-signature trust, and robust revocation mechanisms. TUF can be integrated with both new and existing software update systems, and we discuss our experiences integrating it with a traditional application updater and Python’s library management system.

### Main Contributions
- **Relying on Single Signing Keys and PKI**: We highlight the risks of relying on single signing keys and PKI in software update systems.
- **Critical Information Classes**: We identify three fundamental classes of information that must be authenticated: the content of updates, the timeliness of updates, and the consistency of repository state.
- **Role Separation**: We demonstrate how role separation can reduce the impact of key compromise by dividing responsibilities among keys with different likelihoods of being compromised.
- **TUF Implementation**: We design and implement TUF, a software update framework that uses multiple-signature trust and role separation without requiring SSL or other protocols that store keys on public-facing servers.

### 2. Threat Model
Our threat model assumes that:
- Attackers can compromise at least one of the software update system's trusted keys.
- Attackers may compromise multiple keys over time.
- Attackers can respond to client requests.

We consider an attacker successful if they can convince the updater to install (or leave installed) something other than the most up-to-date version of the software. If the attacker prevents the installation of updates, they want the updater to not realize there is anything wrong.

### 3. Software Update Systems
Software update systems find, download, and install the latest versions of software. They typically make requests to servers hosting updates, which respond with information about available updates. The update system then decides which updates to download and install. Often, the servers from which updates are downloaded are not owned by the same organization that created the updates, such as third-party repository mirrors provided by volunteers or CDNs.

#### 3.1 Authentication
Software update systems must verify the authenticity of files they receive. These files may be the actual software updates, metadata describing available updates, or other information used to make download and trust decisions. Systems that do not authenticate any of this information are insecure. Among the systems that do authenticate, the primary methods are transport layer security and cryptographically signed files.

Many systems rely on transport layer security (e.g., SSL/TLS) to verify that they are retrieving trusted files. Other systems use signed data, where clients know one or more keys that they trust to provide updates. Some systems use both methods, but reliance on PKI-based file signing still leaves them vulnerable to PKI-related issues.

#### 3.2 Information Responsibilities
To address key compromise, we must consider specific attacks on software update systems. We classify the underlying vulnerabilities and identify the information that must be authenticated:

- **Content of Updates**: Verify that all updates are authentic to prevent the installation of malicious software.
- **Timeliness of Updates**: Ensure clients know when updates are available to prevent freeze attacks, where attackers prevent the installation of security updates.
- **Repository State**: Authenticate information indicating whether any subset of downloaded files is from the same repository state to prevent metadata inconsistency attacks.

### 4. Threats to Key Security
There are several ways signing keys and transport keys can be compromised or bypassed:

#### 4.1 PKI Vulnerabilities
Trust based on a chain of single keys is compromised if any key in the chain is compromised. Traditional PKI, whether for file signing or transport layer security, is problematic. For example, a single trusted CA certificate held by a malicious party puts all clients at risk. Recent incidents, such as the issuing of rogue CA certificates and fraudulently issued certificates, highlight the inherent dangers of PKI.

#### 4.2 Key Theft
Private keys can be stolen by outsiders gaining unauthorized access or insiders with access to the key. The more accessible a key is, the easier it is to steal. Transport keys, in particular, often exist unencrypted on disk and in memory, making them vulnerable if the server software is compromised.

### 5. Security Properties of Current Software Update Systems
Existing software update systems are vulnerable to key compromise and lack robust trust revocation mechanisms. This makes them susceptible to various attacks, including freeze attacks and metadata inconsistency attacks.

### 6. Design Principles for Securing Software Update Systems
To enhance the security of software update systems, we propose the following design principles:
- **Role Separation**: Divide responsibilities among keys with different likelihoods of being compromised.
- **Multi-Signature Trust**: Use threshold signatures and multiple roles to increase the number of keys required to compromise the system.
- **Robust Revocation Mechanisms**: Implement both implicit and explicit trust revocation to quickly and securely revoke compromised keys.

### 7. TUF: The Update Framework
TUF is an open-source software update framework designed to improve the resilience of software update systems to key compromise. It uses role separation, multi-signature trust, and robust revocation mechanisms. TUF can be integrated with both new and existing software update systems. We discuss our experiences integrating TUF with a traditional application updater and Python’s library management system.

### 8. Experiences and Recommendations
Based on our experiences, we make recommendations for key threshold sizes, metadata expiration times, and the appropriate use of automated signing. Balancing security with usability is crucial for the practical implementation of TUF.

### 9. Related Work
We review related work in the field of software update systems and key management, highlighting the contributions and limitations of previous approaches.

### 10. Conclusion
In conclusion, we have identified the critical information that software update systems must authenticate and proposed design principles to enhance their resilience to key compromise. TUF, our open-source framework, implements these principles and provides a practical solution for improving the security of software update systems.

### Acknowledgments
This work was done while the authors were at the University of Washington.

### Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

### Copyright
CCS'10, October 4–8, 2010, Chicago, Illinois, USA. Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.