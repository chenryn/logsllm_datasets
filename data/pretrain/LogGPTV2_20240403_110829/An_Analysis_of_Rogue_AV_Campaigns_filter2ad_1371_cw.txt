### 6.4 Varying δ using Adium with d/n = 0.1

**Figure 17: Varying δ using Adium, with d/n = 0.1.**

- **Description:** The figure shows the performance of Syzygy in detecting exploit behavior as the parameter δ (delta) varies. The proportion of bad behavior (d/n) is fixed at 0.1.
- **Observations:**
  - Mimicry makes detection more difficult, but performance improves logarithmically with n (the community size) at higher δ values.
  - At low δ values, even with large communities, the performance is poor due to false negatives. This is because the threshold V is set too high.
  - With a lower V, F1 scores above 0.6 can be achieved even when δ = 0.1, n = 10, and d = 1.

### 6.5 Varying Rate of Bad Behavior (r) using Camino and showpages with d/n = 0.1

**Figure 18: Varying rate of bad behavior (r) using Camino and showpages, with d/n = 0.1.**

- **Description:** The figure shows the performance of Syzygy in detecting exploit behavior as the rate of bad behavior (r) varies. The proportion of bad behavior (d/n) is fixed at 0.1.
- **Observations:**
  - A sufficiently large community ensures that bad behavior will overlap, making detection possible.
  - False negatives dominate the metric. With a better-chosen V, F1 scores above 0.68 can be achieved even at r = 0.05 with as few as 10 clients.

### 6.6 Tainted Training Data and Mimicry

- **Tainted Training Data:** This is symmetric to mimicry, where raising μX instead of lowering μY decreases δ. The following results hold for both scenarios.
- **Intuition:** These experiments simulate an exploit that generates system call sequences in similar (but not identical) proportions to the application. This is done by generating anomaly scores from the application’s distribution and then shifting them positively by δ (Y ∼ X + δ).

### 7 Scalability

- **Mathematical Basis:** Syzygy's accuracy improves as the community grows, making it crucial that the implementation scales well.
- **Infrastructure:** The current infrastructure uses a central server, which works for up to 35 clients. Communication is one-way (client to server), and there is no consensus or agreement protocol, so the total community traffic scales linearly with the number of clients.
- **Scalability Options:**
  - **Server Hierarchy:** Each server computes the community score for its children and reports this value and the sub-community size to a parent server. This works because the function used to compute the community score, mean(), is associative when weighted by sub-community size.
- **Monitoring Overhead:**
  - **Client Overhead:** Monitoring overhead on clients is typically a consequence of model choice and is unaffected by community size. In controlled experiments, the primary monitoring tool, dtrace, required less than 10% of one CPU during heavy activity, with average usage below 1%.
  - **Deployment Experiments:**
    - **Firefox:** Syzygy required less than 5% of the CPU on average and 7% peak, including strace overhead.
    - **Windows (strace-based):** The slowdown was noticeable.
    - **Apache:** Overhead was negligible due to the web server’s built-in logging mechanism.
  - **Optimization:** If overhead becomes problematic, changing the model to measure less costly signals, such as control-flow monitoring, could yield greater precision at lower overhead.

### 8 Contributions

- **Syzygy Framework:** Syzygy is an epidemic detection framework that identifies time-correlated anomalies in a homogeneous software community, which is the behavior accompanying an exploit as it executes among a set of clients.
- **Results:** Our results show that Syzygy is effective at automated detection of epidemics, practical to deploy, and scales well. Syzygy leverages the statistical properties of large communities in a novel way, asymptotically approaching perfect detection.

### Acknowledgments

- **Team Members:** The authors thank the members of the VERNIER team, especially Elizabeth Stinson, Patrick Lincoln, Steve Dawson, Linda Briesemeister, Jim Thornton, John Mitchell, and Peter Kwan.
- **Additional Thanks:** Sebastian Gutierrez and Miles Davis for help deploying Syzygy, Naeim Semsarilar for his invaluable contributions to the early stages of this work, and Xuân Vũ for her input and support.

### References

[References are listed as provided, with no changes made.]

---

This revised version aims to make the text more coherent, clear, and professional, while maintaining the original content and structure.