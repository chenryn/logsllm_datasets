### 日志条目
- **时间**: 2023-05-16 22:14:49  
  **用户**: root  
  **终端**: pts/1  
  **当前目录**: /root  
  **命令**: list

- **时间**: 2023-02-22 22:35:43  
  **用户**: softadm  
  **终端**: pts/11  
  **当前目录**: /home/softadm  
  **命令**: /bin/systemctl status httpd

### 案例3：提高SSH服务安全
#### 3.1 问题
本案例要求提高Linux主机上SSH服务的安全性，具体任务包括：
- 配置基本安全策略（禁止root登录、禁止空口令）
- 实施仅允许特定用户的策略，未列出的用户将被拒绝登录
- 实现基于密钥验证的登录（私钥带口令）、免密码登录
- 确认密钥验证正常后，禁用口令验证

#### 3.2 步骤
##### 步骤一：配置基本安全策略
1. 调整sshd服务配置并重载服务。
   ```bash
   [root@proxy ~]# vim /etc/ssh/sshd_config
   # SSH协议版本
   Protocol 2
   # 禁止root用户登录
   PermitRootLogin no
   # 禁止空口令用户登录
   PermitEmptyPasswords no
   # 不解析客户机地址
   UseDNS no
   # 登录限时
   LoginGraceTime 1m
   # 每连接最多认证次数
   MaxAuthTries 3
   [root@proxy ~]# systemctl restart sshd
   ```
2. 测试基本安全策略。
   - 尝试以root用户SSH登录，应失败。
     ```bash
     [root@proxy ~]# ssh root@192.168.4.5
     root@192.168.4.5's password:
     Permission denied, please try again.
     ```
   - 将服务器上的用户kate的密码设为空，尝试SSH登录，也应失败。
     ```bash
     [root@proxy ~]# passwd -d kate
     清除用户的密码 kate。
     passwd: 操作成功
     [root@proxy ~]# ssh kate@192.168.4.5
     kate@192.168.4.5's password:
     Permission denied, please try again.
     ```

##### 步骤二：实施仅允许特定用户的策略
1. 调整sshd服务配置，添加`AllowUsers`策略，仅允许用户zhangsan、tom和useradm（useradm只能从网段192.168.4.0/24登录）。
   ```bash
   [root@proxy ~]# vim /etc/ssh/sshd_config
   # 定义账户白名单
   AllowUsers zhangsan tom useradm@192.168.4.0/24
   [root@proxy ~]# systemctl restart sshd
   ```
2. 验证SSH访问控制，未授权的用户将被拒绝登录。
   - 已授权的用户允许登录。
     ```bash
     [root@proxy ~]# ssh useradm@192.168.4.5
     useradm@192.168.4.5's password:
     [useradm@proxy ~]$
     ```
   - 未授权的用户被拒绝登录。
     ```bash
     [root@proxy ~]# ssh root@192.168.4.5
     root@192.168.4.5's password:
     Permission denied, please try again.
     ```

##### 步骤三：实现基于密钥验证的登录
1. 准备客户机测试环境。
   - 为客户机的用户root生成SSH密钥对。
     ```bash
     [root@client ~]# ssh-keygen
     Generating public/private rsa key pair.
     Enter file in which to save the key (/root/.ssh/id_rsa):
     Created directory '/root/.ssh'.
     Enter passphrase (empty for no passphrase): 
     Enter same passphrase again: 
     Your identification has been saved in /root/.ssh/id_rsa.
     Your public key has been saved in /root/.ssh/id_rsa.pub.
     [root@client ~]# ls -lh ~/.ssh/id_rsa*
     -rw-------. 1 root root 1.8K 8月 15 10:35 /root/.ssh/id_rsa
     -rw-r--r--. 1 root root 403 8月 15 10:35 /root/.ssh/id_rsa.pub
     ```
2. 将客户机上用户root的公钥部署到SSH服务器。
   ```bash
   [root@client ~]# ssh-copy-id root@192.168.4.5
   root@192.168.4.5's password:
   Now try logging into the machine, with "ssh 'root@192.168.4.5'", and check in:
   .ssh/authorized_keys
   to make sure we haven't added extra keys that you weren't expecting.
   ```
3. 在服务器上确认客户机用户root上传的公钥信息。
   ```bash
   [root@proxy ~]# tail -2 ~/.ssh/authorized_keys
   ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzz+5AiFMGQ7LfuiV7eBnOcmRO9JRTcqRoynGO2y5RyFL+LxR1IpEbkNrUyIZDk5uaX1Y8rwsf+pa7UZ2NyqmUEvNSUo0hQyDGsU9SPyAdzRCCvDgwpOFhaHi/OFnT+zqjAqXH2M9fFYEVUU4PIVL8HT19zCQRVZ/q3acQA34UsQUR0PpLJAobsf1BLe2EDM8BsSHckDGsNoDT9vk+u3e83RaehBMuy1cVEN5sLAaIrIeyM8Q0WxQNlqknL908HRkTlTeKrRoHbMnOBFj8StwlnscKHlkrsKkhUf8A9WWz/vL4GDwGND5jdca3I2hdITAySjMdfL1HMHnMYOgMjPM0Q== PI:EMAIL
   ```
4. 在客户机上测试SSH密钥对验证。
   - 以远程用户root登录192.168.4.5主机时，无需验证口令即可登录。
     ```bash
     [root@client ~]# ssh root@192.168.4.5
     Last login: Thu Aug 15 10:48:09 2013 from 192.168.4.100
     ```

##### 步骤四：禁用口令验证
1. 调整sshd服务配置，将`PasswordAuthentication`设为`no`。
   ```bash
   [root@proxy ~]# vim /etc/ssh/sshd_config
   # 禁用口令验证
   PasswordAuthentication no
   [root@proxy ~]# systemctl restart sshd
   ```

### 案例4：SELinux安全防护
#### 4.1 问题
本案例要求熟悉SELinux防护机制的开关及策略配置，完成以下任务：
- 将Linux服务器的SELinux设为强制模式
- 从/root目录下移动一个包文件到FTP下载目录，并调整策略使其能够被下载

#### 4.2 步骤
##### 步骤一：将Linux服务器的SELinux设为强制模式
1. 固定配置：修改`/etc/selinux/config`文件。
   ```bash
   [root@proxy ~]# vim /etc/selinux/config
   SELINUX=enforcing
   SELINUXTYPE=targeted
   ```
2. 临时配置：使用`setenforce`命令。
   ```bash
   [root@proxy ~]# getenforce
   Permissive
   [root@proxy ~]# setenforce 1
   [root@proxy ~]# getenforce
   Enforcing
   ```

##### 步骤二：调整策略打开vsftpd服务的匿名上传访问
1. 配置一个允许匿名上传的vsftpd服务作为测试环境。
   ```bash
   [root@proxy ~]# yum -y install vsftpd
   [root@proxy ~]# vim /etc/vsftpd/vsftpd.conf
   anonymous_enable=YES
   anon_upload_enable=YES
   anon_mkdir_write_enable=YES
   [root@proxy ~]# systemctl start vsftpd
   ```

##### 步骤三：从/root目录下移动两个包文件到FTP下载目录，并调整文件的安全上下文
1. 建立两个FTP下载用的测试文件。
   - 测试文件1，直接在ftp目录下创建文件。
     ```bash
     [root@proxy ~]# tar -czf /var/ftp/log1.tar /var/log
     [root@proxy ~]# ls -lh /var/ftp/
     -rw-r--r--. 1 root root 8M 8月 16 10:16 log1.tar
     [root@proxy ~]# ls -Z /var/ftp/
     -rw-r--r--. root root unconfined_u:object_r:public_content_t:s0 log1.tar
     ```
   - 测试文件2，在/root下建立，然后移动至/var/ftp目录。
     ```bash
     [root@proxy ~]# tar -czf log2.tar /var/log
     [root@proxy ~]# mv log2.tar /var/ftp/
     [root@proxy ~]# ls -lh /var/ftp/
     -rw-r--r--. 1 root root 8M 8月 16 10:16 log2.tar
     [root@proxy ~]# ls -Z /var/ftp/
     -rw-r--r--. 1 root root unconfined_u:object_r:admin_home_t:s0 log2.tar
     ```
2. 通过FTP方式测试下载。
   - 下载第一个文件，成功。
     ```bash
     [root@proxy ~]# wget ftp://192.168.4.5/log1.tar
     ```
   - 下载第二个文件，失败。
     ```bash
     [root@proxy ~]# wget ftp://192.168.4.5/log2.tar
     ```
3. 检查该测试包的安全上下文，正确调整后再次下载第二个包成功。
   ```bash
   [root@proxy ~]# chcon -t public_content_t /var/ftp/log2.tar
   [root@proxy ~]# ls -Z /var/ftp/log2.tar
   -rw-r--r--. root root unconfined_u:object_r:public_content_t:s0 log2.tar
   [root@proxy ~]# wget ftp://192.168.4.5/log2.tar
   ```

### 加密与解密
#### 对称加密
- **定义**: 采用单钥密码系统的加密方法，同一个密钥可以同时用作信息的加密和解密。
- **常用算法**: DES、3DES、TDEA、Blowfish、RC2、RC4、RC5、IDEA、SKIPJACK等。

#### 非对称加密
- **定义**: 需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；反之亦然。
- **常用算法**: RSA、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）。

### MD5完整性检验
- MD5是一种广泛使用的哈希函数，用于验证数据的完整性。它将任意长度的数据转换成固定长度的128位哈希值。

### GPG加/解密工具
- **概述**: GnuPG（简称GPG）是目前最流行、最好用的加密工具之一。
- **常用命令**:
  - 查看版本：`gpg --version`
  - 查看帮助：`gpg --help`
  - 对称加密：`gpg -c a.txt`
  - 对称解密：`gpg -d a.txt.gpg >a.txt`
  - 生成密钥对：`gpg --gen-key`
  - 导出公钥：`gpg -a --export >/tmp/userb.pub`
  - 导入公钥：`gpg --import /tmp/userb.pub`
  - 公钥加密：`gpg -e -r hksbdb test.txt`
  - 公钥解密：`gpg -d test.txt.gpg >b.txt`

### 支持的算法
- **公钥**: RSA, ELG, DSA
- **对称加密**: IDEA, 3DES, CAST5, BLOWFISH, AES, TWOFISH, CAMELLIA
- **散列**: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
- **压缩**: 不压缩, ZIP, ZLIB, BZIP2