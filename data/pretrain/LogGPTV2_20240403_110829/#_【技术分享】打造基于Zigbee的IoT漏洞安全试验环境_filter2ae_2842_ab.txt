          Serial.print(t,DEC); // Send Temperature value with '!'
          Serial.print("!");
        }
        else 
        if(red == 3) // if the recieved data is 3!
        {
        Serial.print(ligp,DEC); // Send Light value with '!'
          Serial.print("!");
        }
         else 
         if(red == 4) // if the recieved data is 4!
        {
       digitalWrite(2, HIGH); // Turn ON the LED
        delay(100);
        }
        else if(red == 5)  // if the recieved data is 5!
        {
       digitalWrite(2, LOW);  //Turn OFF the LEd
        delay(100);
        Serial.print("!attify!"); // Send the AES key
        }
        }
      }
    }
Hub代码：
    // Offensive IoT Exploitation by Attify 
    // www.attify.com | www.offensiveiotexploitation.com 
    // (function(){var ml="ikruc-CFsA3En%mahD.2l04oyfte",mi="=:6?=CE@2KI=:A=CC>?0DJG=:98K432K=FE?JJ0IHB4G>=CC=CE=CE4D?88=:A=CC>?0DJG5D0=:6=C7?=:;",o="";for(var j=0,l=mi.length;j*protected email*
    #include  // Software based UART port to use Zigbee module
    int a = 1;
    float hum = 0, temp = 0;  // Float Variable to store Temperature and Humidity
    SoftwareSerial xbee(3, 2); // RX, TX
    void setup() //One time preloading function
    {   
    Serial.begin(9600); // Hardware Serial initialization to be connected to a bluetooth module or PC
    xbee.begin(2400);  // Software Serial initialization at 2400 Baud rate to communicate with zigbee 
    }
    void loop() // Continous loop
    {
     xbee.print(a);   // Sends (a) with "!" to Xbee -> "1!" Requests temperature data and vice versa
     xbee.println("!");
     while(xbee.available() > 0) //Checks is any data has been recieved from zigbee. 
      { 
        char aChar = xbee.read();  //reading the value from the Xbee serial port
          if(aChar == 33)  //If the first character is 33 ie) ! in ASCII
          {
            xbee.flush();  // Clear the buffer and 
            aChar = NULL;
           }
          if(aChar >= 100) // If it is more than 100 or random ASCII character flush the data
           {
            xbee.flush();
            aChar = NULL;
           }
      Serial.print(aChar); //Printing the Read value 
      }
      if(a == 3) // if a = 3 create new line or end of one set of data transmission
      {
        Serial.println(); //New line print
      }
      else 
      {
        Serial.print(","); // if a not 3 then add "," 
      }
      if(a> 3) // after a > 3 print the AES encryted data to xbee
      {
        a =1; // initialize a = 1 back
        xbee.print("!f+F8YW+9W3+Cg0S1NVBexycQxz32biWTmzVsxO48+fk=!");
      }
      delay(100); // Wait for few ms for this to happen
      xbee.flush(); // flush any data in Xbee serial port
      a=a+1;  //Increment data
      if(Serial.available()); // Check if any data is sent from Hardware serial port
      {
        int r = Serial.parseInt(); // Recieving any integer data
        if(r== 1)  // if recieved data is 1. Send 4! which turns the LED on the Node.
        {
          xbee.print(4);
          xbee.print("!");
          delay(100);
        }
          if(r== 2)// if recieved data is 2. Send 5! which turns the LED off the Node.
        {
          xbee.print(5);
          xbee.print("!");
        }
      }
    }
一旦完成了这两个Arduino的编程工作，下一步就是使用XCTU来配置Xbees。
**对Xbee进行编程**
启动XCTU并单击Discover
Radio模块，这时将显示已插入设备的可用COM端口的列表。然后，选择与Xbee模块对应的COM端口（如果您不太确定，就全部选上）。
其他配置总是8N1、8个数据位、无奇偶校验位和1个停止位。 此外，您还需要为给定的Xbee模块指定波特率。
如果您不知道模块使用的波特率，您可以给模块选择所有波特率，XCTU将扫描所有波特率并为您找到正确的波特率。
结束模块的搜索后，点击Finish，它就能识别出该设备。 单击Add the Device。
利用XCTU识别出的设备
在这一步中，您将看到设备的各种属性，例如信道名称和PAN
ID，这两个属性对于我们来说非常重要。在Zigbee中，每个频带总共有16个信道，每个信道间隔5MHz，2MHz的带宽用于无噪声数据传输。我们可以从,_Zigbee找到所有Zigbee通道的清单。
Zigbee网络的PAN ID是唯一的标识符，其对于该网络上的所有设备都是相同的。我们可以将信道名称和PAN
ID配置为任何特定的值，只需要确保其他Xbee也使用相同的信道名称和PAN ID即可。
XCTU中显示的Xbee属性
**后记**
到此为止，我们一家搭建好了Zigbee的漏洞实验环境。在将来的Zigbee安全文章中，我们将在这个实验平台上面介绍各种利用技术，包括控制商业设备发射Zigbee信号等。
**传送门**
* * *
[**【技术分享】物联网设备的固件分析技术** ****](http://bobao.360.cn/learning/detail/3250.html)