T-nonblocking
code. Note that all assignments and nonblocking statements are
executed simultaneously in Verilog. Hence, all variables (e.g., stall)
and their labels (e.g., stall_s and stall_t) are updated at the same
time. We will discuss the detail of the right hand-side logic in the
following subsections.
Remark 4.2. The blocking (=η) and nonblocking ( <=η) assign-
ments for statement η differ in that blocking assignments are per-
formed sequentially while the nonblocking ones run in parallel.
They have the same inference logic according to Table 2, to ensure
that variables and their labels are updated simultaneously.
Remark 4.3. Labels of variables defined via procedural assign-
ments are triggered by the same event as the original statement and
are defined in the same block. This ensures synchronous updates
to variables and their labels.
In the following, we go over the details of the label inference
rules. Note that since sketch constructs are pre-processed before
the instrumentation, the inference rules are only defined for the
original Verilog syntax.
4.2 Tracking Logical Flows
Logical flows are tracked via label vs defined for each variable
v. VeriSketch tracks both explicit and implicit flows (i.e., flow of
information via the data path and the control path). Explicit flows
are tracked by instrumenting each operation.
Definition 4.4 (IFT Operator). Let op be a valid binary/unary
operator in Verilog RTL. IFT operator opift computes the label of
op’s output based on its inputs’ values and labels.
For instance, explicit flows of assignment z = x bop y are tracked
via zs = bopift(x, xs , y, ys). In the simplest case, zs is the join (⊔) of
xs and ys. In a more precise analysis (i.e., lower number of false
positives), zs also depends on the Boolean values (i.e., x and y) and
the operator’s functionality [4, 26]. IFT operators are pre-defined
and stored in VeriSketch IFT library where label tracking precision
level is controllable by the user.
Implicit flows for each statement are tracked by upgrading the la-
bel of the left hand-side variable according to the labels of variables
which control the statement’s execution.
how registers can be updated at each clock cycle [3]. We describe
this in more detail in the following.
Definition 4.10 (Bal(v)). Let v be the l-value variable in the proce-
dural assignment η. Boolean variable Bal(v) declares if updates to v
are balanced. An unbalanced update means that there exists a clock
cycle where register v can either maintain its current value or get
reassigned. Bal(v) is statically decided by analyzing the program
control flow graph.
Remark 4.11. Bal(v) can be determined since Verilog grammar
confines all assignments to each variable v to a single block. Hence,
one can compute if v keeps its value under certain branches of that
block.
Using Bal(v) VeriSketch detects timing variation occurring at
assignments to variable v and tracks them via vt .
Proposition 4.12 (c.f. [3]). Sensitive timing variations in a se-
quential circuit are generated at the l-value variable v of a clocked
statement if the following equation evaluates to true:
¬Bal(v) ⊓{cis : ci ∈ Ctrl(v)}
(2)
¬Bal(v) ⊓
cis ⊓ ¬(¬cis ⊓ Full(v, ci)) : ci ∈ Ctrl(v)
Any register v in a given hardware design is written to at each
clock edge by a set of data signals which are multiplexed using a set
of control signals. The existence of a feedback loop which connects
the register to itself (¬Bal(v)) indicates that there are some cases
when the register maintains its value. Consequently, the final value
of the register may become available at different cycles resulting
in a timing leak. Hence, the conjunction of unbalanced updates
and control signals which carry sensitive information results in
sensitive timing variation at the register. To make the analysis more
precise, a new conjunction is added to check if there is any untainted
(¬cis ) control variable which fully controls updating the register
(Full(v, ci)). This enables safe downgrading of timing variations:
(3)
Remark 4.13. Proposition 4.12 relies on the fact that in a hardware
design registers updated at clock edges and combinational logic do
not introduce cycle-level timing variation. Hence, the analysis is
specific to HDLs and cannot be applied to software languages.
Example 4.14. Examples of tracking timing flows in combina-
tional and sequential blocks are shown in lines 3 and 10 − 16 of
Fig. 3. Lines 12 − 16 show the logic for detecting occurrence of tim-
ing flows while lines 3 and 10 − 11 show the logic for propagating
them.
Example 4.15 (Secure Cache Property Specification). The root
cause of timing side channel leakage is that the victim’s action
changes the state of the hardware in a way that affects the time
it takes for the succeeding operations to complete. If the victim
action depends on secret data, the subsequent timing variation
reveals information about the secret data. In the cache example,
the index that the victim uses to read from the cache changes the
state of the cache memory by bringing in new data and evicting
the adversary’s data to the next level memory. If the index contains
secret information (as in table-based RSA implementation), the
increment in the time taken for adversary’s subsequent request
Figure 3: VeriSketch IFT framework automatically extends
Verilog code with IFT labels and inference rules. The exam-
ple is a portion of a cache. The gray lines here are the origi-
nal code and the instrumentation is shown in black. Logical
and timing flows are captured via s-labels and t-labels.
Definition 4.5 (Ctrl(v)). Let η be a procedural assignment. Ctrl(η)
is the set of all variables which control the execution of η. Ctrl(v)
is the union of all Ctrl(ηi) where ηi is a procedural assignment
where v is the l-value variable. Ctrl(v) is determined statically by
analyzing the program control flow graph.
It immediately follows that:
{cis : ci ∈ Ctrl(v)}
Proposition 4.6 (c.f. [34]). Implicit flows via each procedural state-
ment η with l-value variable v can be conservatively estimated by:
(1)
Notation 4.7. We use join (⊔) and meet (⊓) to describe the in-
ference rules in a generic multi-level security system. Since we
consider binary operations, these operations can be replaced by
disjunction (∨) and conjunction (∧).
Remark 4.8. Note that grammar of the Verilog language and sim-
ilar HDLs only permits assignments to each variable in a single
block as all blocks are executed in parallel. Hence, Ctrl(v) can be
determined by analyzing the single block in which v is used as left
hand-side variable. Furthermore, continuous assignments cannot
be guarded by conditional variables. Hence, IFT operators suffice
to track information flow through continuous assignments.
Example 4.9. Examples of tracking explicit flows for combina-
tional and sequential code are shown in lines 2 and 8 of Fig. 3.
Explicit flows capture how information moves through logical oper-
ations and assignments from right to left. Line 9 shows an example
of tracking implicit flows. Here, execution of line 7 depends on
control variables rd_req, stall, and stall_cycles. Furthermore,
value of index specifies which memory element is accessed. Hence,
these variables implicitly affect cache[index] and their labels are
propagated to cache_s[index].
4.3 Tracking Timing Flows
VeriSketch provides the ability to track both timing flows and logical
flows. This allows the designer to define properties related to timing
invariance alongside those related to logical flows. Timing flows
are a subset of logical flows [34] and can be modeled by capturing
1.assign stall = rq && miss;2.assign stall_s = and_ift (rq, rq_s, miss, miss_s);3.assign stall_t = rq_t || miss_t;4.always @ (posedge clk) begin5. if(rd_rq && stall) 6.  if(stall_cycles == N)7.    cache[index] <= {rd_data_mem,tag,pid};8.    cache_s[index] <= {rd_data_mem_s,tag_s,pid_s} |9.    rd_rq_s | stall_s | stall_cycles_s | index_s;10.     cache_t[index] <= {rd_data_mem_t,tag_t,pid_t} |11.     rd_rq_t | stall_t | stall_cycles_t | index_t |12.     ((rd_rq_s | stall_s | stall_cycles_s | index_s)13.     &&!Bal(cache[index]) && !((!rd_rq_s & Full(rd_rq,14.     cache[index]))|(!stall_s & Full(stall, cache[index]))15.     |(!stall_cycles_s & Full(stall_cycles, cache[index]))16.     |(!index_s & Full(index, cache[index]))));(a)discloses information about the index used by the victim process.
Absence of timing information leaked from process i’s access to a
cache can be modeled by the following property:
if ( pid =i) assume ( index_s == High );
else assert ( rd_proc_t == Low );
This property states that assuming that process i accesses the
cache with an index which contains sensitive information (shown
by having Hiдh index_s label), the data read afterwards by other
processes should not have sensitive timing information. This is
shown by having an assertion on rd_proc_t, which is the timing
label of the data read by the processor from the cache. This property
along with the instrumented cache design is given to a formal veri-
fication tool to determine if a cache implementation is vulnerable
against access pattern based cache timing attacks. Writing the IFT
properties is identical to formalizing the security expectations and
does not require knowledge of how an attack is performed since
the verification tool searches for the exact input sequence which
leaks the secret data.
Notation 4.16. Throughout the examples, all input labels have a
Low value if not specified otherwise.
Example 4.17 (PLCache Property Specification). To take into ac-
count the assumption that sensitive data should be preloaded and
locked in the partition locked cache before access, we rewrite the
properties as follows:
if ( pid =i && Preloaded [ addr ]) assume ( index_s == High );
if ( pid(cid:44)i) assert ( rd_proc_t == Low );
4.4 Enforcing Multiple Policies
In order to instrument the circuit with the appropriate IFT instru-
mentation, we need to know how many disjoint flow properties
we will be checking. It may be the case that different security prop-
erties require unique and independent tracking logic, each with
different input labels. To accommodate simultaneous analysis of
these properties, VeriSketch instruments the circuit with disjoint
sets of labels and tracking logic based on the number of specified
flow properties.
Example 4.18. In order to specify absence of timing leakage be-
tween multiple processes sharing a cache, we need disjoint labels
to track flow of information from different processes:
if ( pid =i) assume ( index_s_i == High );
else assert ( rd_proc_t_i == Low );
if ( pid =j) assume ( index_s_j == High );
else assert ( rd_proc_t_j == Low );
Definition 4.19 (IFT Instrumentation). For any design F(x), its
instrumented representation, denoted by FIFT (x, xtaint), has the
original functionality of F(x), as well as multiple lines of flow track-
ing logic. Here, vtaint defined for each variable v is a vector of tuples
of labels (vsi , vti).
5 SYNTHESIS
Reasoning about digital circuits can be encoded as SAT or bit-
vector SMT problems, making them perfect targets for constraint-
based synthesis. At a high-level, the standard synthesis problem
is of the form ∃p∀xν .ϕ (p, xν), where ϕ encodes the sketches and
specifications, and the goal is to find parameters p such that the
hard constraints in ϕ are satisfied for all possible inputs xν . We now
show how to extend this formulation to handle IFT instrumentation
and solve for finite sequential circuits with soft constraints.
5.1 Synthesis with IFT
In order to take advantage of the IFT model within our synthesis
flow, we give the parametric design F(xν , p) to the IFT unit. This
transforms the design to FIFT (xν , xνtaint , p) where xνtaint and FIFT
are the input’s security labels and instrumented design (Defini-
tion 4.19). The synthesis problem over the instrumented design
now includes the labels in addition to the original inputs:
∃p ∀x .Φ(x, p)
where Φ(x, p) := Q (xν , FIFT (xν , xνtaint , p)).
(4)
Here Q encodes the specifications written over the instrumented
design. We use vector x to refer to the concatenation of the design
inputs xν and their taints xνtaint. Note that xνtaint is constrained by
the specific security properties we want to enforce.
Example 5.1. For instance, in our cache example, the cache index
is initialized with a High label if it contains a sensitive address. And
all other input labels have a Low label (notation 4.16). Thus, all
input taints are constrained.
5.2 CEGIS for Finite Sequential Circuits
To handle sequential circuits, the CEGIS procedures need to expand
over multiple cycles. To accommodate that, we extended the def-
inition of a counterexample to capture a trace instead of a single
value. Essentially, the counterexample represents a sequence of
input values which take the design into an invalid state. Hence,
in the synthesis stage the solver should look for a parameter such
that the properties are satisfied for all the cycles triggered by the
counterexample sequence. We model this by changing the original
synthesis equation to:
Definition 5.2 (Synthesis Target for Sequential Circuits).

xj ∈CE
∃p.
∗(xj , p)
Φ
where Φ
∗(xj , p) := 
k ≤|xj |
Past(Φ(xj , p), k)
(5)
Here |xj| is the length of counterexample xj in number of cycles.
Φ∗(xj , p) is the conjunction of the properties over the length of
each counterexample. Function Past(v, k), part of System Verilog
Assertion language, returns value of variable v from k previous
cycles.
For the secure hardware design problems that we consider here,
the bounds on the sequential depth are clear so that we can focus
on tackling the synthesis aspect of the problems. With bounded
depth, the verification component can be conveniently performed
by standard bounded model checking (BMC). For unbounded veri-
fication, various techniques such as k-induction [15] can be used;
and the framework can be naturally extended with more powerful
verification methods.
5.3 CEGIS for Soft Constraints
CEGIS could potentially suggest any program which does not falsify