User: 如何使用Ansible来进行服务器的自动化管理？请提供一个具体的案例。
Assistant: Ansible是一种功能强大的自动化工具，可以用来管理服务器，在以下具体场景中，可以使用Ansible：

案例：配置web服务器

假设你需要在10台服务器上安装和配置Nginx作为Web服务器，并且在其中一些服务器上需要安装PHP。你可以使用Ansible来完成此任务。

1. 创建一个Ansible主机

首先，需要在其中一台服务器上创建一个Ansible主机。Ansible需要在这台主机上运行，并通过SSH访问其他服务器。

2. 在Ansible主机上安装Ansible

在Ansible主机上，需要安装Ansible。根据操作系统不同，有不同的安装方法。

Ubuntu：

```
sudo apt-get update
sudo apt-get install ansible
```

CentOS：

```
sudo yum install epel-release
sudo yum install ansible
```

3. 编写Ansible playbook

创建一个文件，命名为`webserver.yml`，其中包含以下代码：

```yaml
- hosts: web
  tasks:
  - name: Install Nginx
    yum: name=nginx state=latest
    become: true

  - name: Start Nginx
    service: name=nginx state=started
    become: true

- hosts: php
  tasks:
  - name: Install PHP
    yum: name=php state=latest
    become: true
```

上述代码定义了两个主机组：`web`和`php`。在`web`组中，Ansible将安装并启动Nginx；在`php`组中，Ansible仅安装PHP。在每个任务中，`become`属性被设置为`true`，以便使Ansible在执行命令时使用root权限。

4. 配置服务器清单

创建一个文件，命名为`inventory.ini`，其中包含服务器列表：

```
[web]
192.168.0.1
192.168.0.2
192.168.0.3

[php]
192.168.0.2
192.168.0.4
```

此清单定义了两个主机组：`web`和`php`。服务器的IP地址列在每个组下面。

5. 运行Ansible playbook

在Ansible主机上，运行以下命令以执行Ansible playbook：

```
ansible-playbook -i inventory.ini webserver.yml
```

Ansible将连接到服务器，并在每个服务器上执行适当的任务，以便在`web`服务器组中安装和启动Nginx，在`php`服务器组中仅安装PHP。

这只是一个简单的例子，但是Ansible可以处理从系统配置和软件安装到应用程序部署和更新的大量任务，无需手动干预。