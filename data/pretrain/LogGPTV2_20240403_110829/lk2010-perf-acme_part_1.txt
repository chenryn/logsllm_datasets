The New Linux ’perf’ tools
Linux Kongress
September, 2010
Arnaldo Carvalho de Melo
PI:EMAIL
Presentation Flow
. Motivation
. Focus on the tools
. But some kernel details will be mentioned
. Some demos hopefully at the end
How did I get involved?
. I am no specialist on performance counters
. pahole & the dwarves
. ELF, DWARF, symtabs, dynsyms, relocations, etc
. ftrace
How did I get involved? Part two
. Part of the Red Hat Real Time team
. We need to discover why 100us deadlines are not being met
. Why this is slower on your RT kernel than on the RHEL one?
. Observability tooling!
. Huge educational value, use it!
Renewed interest in profiling tools
. Complexity of systems growing
. Pervasiveness of multithreading
. Hardware assists
Performance Counters
. Performance counters are special hardware registers
. Available on most modern CPUs
. Count the number of some hw events
instructions executed
cache-misses suffered
branches mispredicted
. Without slowing down the kernel or applications
. Can trigger interrupts when a number of events have passed
Limited resource:
Some are programmable, some are for specific events.
Processor:
UltraSparc 2
Pentium III 2
Athlon 4
IA-64 4
POWER4 8
Pentium IV 18
Nehalem 7
Tracepoints
Static probe points that are put in place by subsystem
maintainers and that can be enabled later.
Dynamic probe points
Dynamicly inserted probe points using hardware breakpoints.
The oprofile development problem
. Disconnected kernel & userspace development
. Linus problem with Atom and Nehalem support
. Less of the "2 broken pieces" approach -> one working piece
. http://lwn.net/Articles/339406/
The perf user interface approach
. git like
. Many subcommands
. Per thread/per workload/per CPU/system wide
. No daemons
The perf development approach
. Tools hosted in the kernel sources: tools/perf/
. Subcommands can be developed largely independently
. Developers expected to touch both sides (kernel/user)
. Written in the C idiom used in the kernel
. Shares code with the kernel (rbtree, list, more to come)
The new implementation approach
. Just one new syscall: sys_perf_counter_open
. Returns a file descriptor
. read/write/mmap/close/fcntl/ioctl/poll work as usual
. Per thread/cpu/whole system
. Transparent inheritance support
Full workloads can be measured
Without using ptrace methods to follow forks & clones
. Events mapped to closest per arch hw counter
. Possible to use raw events
. Supports tracepoints
. Software counters (hrtimer based or not)
. Dynamic probes (kprobes, uprobes)
sys_perf_counter_open - The syscall
- event type attributes for monitoring/sampling
- target pid
- target cpu
- group_fd
- flags
sys_perf_counter_open - event type
- PERF_TYPE_HARDWARE
- PERF_TYPE_SOFTWARE
- PERF_TYPE_TRACEPOINT
- PERF_TYPE_HW_CACHE
- PERF_TYPE_RAW (for raw tracepoint data)
sys_perf_counter_open - attr.sample_type
- bitmask
- PERF_SAMPLE_IP
- PERF_SAMPLE_TID
- PERF_SAMPLE_TIME
- PERF_SAMPLE_CALLCHAIN
- PERF_SAMPLE_ID
- PERF_SAMPLE_CPU
sys_perf_counter_open - attr config bitfield
- disabled: off by default
- inherit: children inherit it
- exclude_{user,kernel,hv,idle}: don’t count these
- mmap: include mmap data
- comm: include comm data
- inherit_stat: per task counts
- enable_on_exec: next exec enables
Architectures already supported
. x86: p6, core+, k7+, p4
. ppc64
. sparc: ultra 3 & 4
. arm: v5 (xscale), v6, v7 (Cortex A8 & A9)
. alpha: EV56 and later
. sh: 4A
. Others supporting just software/ftrace events
Tools
. git like: subcomands
$ perf help
annotate Read perf.data and display annotated code
archive Create archive with object files with build-ids
diff Read perf.data files and display differential profile
kmem Tool to trace/measure kernel memory(slab) properties
list List all symbolic event types
lock Analyze lock events
probe Define new dynamic tracepoints
record Run a command and record its profile into perf.data
report Read perf.data and display the profile
sched Tool to trace/measure scheduler properties (latencies)
stat Run a command and gather performance counter statistics
top System profiling tool.
trace Read perf.data and display trace output
perf list
$ perf list
List of pre-defined events (to be used in -e):
cpu-cycles OR cycles [Hardware event]
instructions [Hardware event]
cache-references [Hardware event]
cache-misses [Hardware event]
branch-instructions OR branches [Hardware event]
branch-misses [Hardware event]
bus-cycles [Hardware event]
perf list - continued
cpu-clock [Software event]
task-clock [Software event]
page-faults OR faults [Software event]
minor-faults [Software event]
major-faults [Software event]
context-switches OR cs [Software event]
cpu-migrations OR migrations [Software event]
perf list - continued
L1-dcache-loads [Hardware cache event]
L1-dcache-load-misses [Hardware cache event]
L1-dcache-stores [Hardware cache event]
L1-dcache-store-misses [Hardware cache event]
L1-dcache-prefetches [Hardware cache event]
L1-dcache-prefetch-misses [Hardware cache event]
L1-icache-loads [Hardware cache event]
L1-icache-load-misses [Hardware cache event]
L1-icache-prefetches [Hardware cache event]
L1-icache-prefetch-misses [Hardware cache event]
perf list - continued
LLC-loads [Hardware cache event]
LLC-load-misses [Hardware cache event]
LLC-stores [Hardware cache event]
LLC-store-misses [Hardware cache event]
LLC-prefetches [Hardware cache event]
LLC-prefetch-misses [Hardware cache event]
perf list - continued
dTLB-loads [Hardware cache event]
dTLB-load-misses [Hardware cache event]
dTLB-stores [Hardware cache event]
dTLB-store-misses [Hardware cache event]
dTLB-prefetches [Hardware cache event]
dTLB-prefetch-misses [Hardware cache event]
iTLB-loads [Hardware cache event]
iTLB-load-misses [Hardware cache event]
branch-loads [Hardware cache event]
branch-load-misses [Hardware cache event]
rNNN [raw hardware event descriptor]
perf list - example of tracepoints
block:block_rq_insert [Tracepoint event]
jbd2:jbd2_start_commit [Tracepoint event]
ext4:ext4_allocate_inode [Tracepoint event]
kmem:kmalloc [Tracepoint event]
module:module_load [Tracepoint event]
workqueue:workqueue_execution [Tracepoint event]
timer:timer_expire_{entry,exit} [Tracepoint event]
timer:hrtimer_start [Tracepoint event]
irq:irq_handler_{entry,exit} [Tracepoint event]
irq:softirq_{entry,exit} [Tracepoint event]
sched:sched_{wakeup,switch} [Tracepoint event]
syscalls:sys_{enter,exit}_epoll_wait [Tracepoint event]
perf stat
$ perf stat ls Makefile
Makefile
Performance counter stats for ’ls Makefile’:
2.204554 task-clock-msecs # 0.842 CPUs
0 context-switches # 0.000 M/sec