title:Vigilare: toward snoop-based kernel integrity monitor
author:Hyungon Moon and
Hojoon Lee and
Jihoon Lee and
Kihwan Kim and
Yunheung Paek and
Brent ByungHoon Kang
Vigilare: Toward Snoop-based Kernel Integrity Monitor
Hyungon Moon
Seoul National University
PI:EMAIL
Kihwan Kim
Korea Advanced Institute of
Science and Technology
PI:EMAIL
Hojoon Lee
Korea Advanced Institute of
Science and Technology
PI:EMAIL
Yunheung Paek
Seoul National University
PI:EMAIL
Jihoon Lee
Seoul National University
PI:EMAIL
∗
Brent Byunghoon Kang
George Mason University
PI:EMAIL
ABSTRACT
In this paper, we present Vigilare system, a kernel integrity
monitor that is architected to snoop the bus traﬃc of the
host system from a separate independent hardware. This
snoop-based monitoring enabled by the Vigilare system, over-
comes the limitations of the snapshot-based monitoring em-
ployed in previous kernel integrity monitoring solutions. Be-
ing based on inspecting snapshots collected over a certain
interval, the previous hardware-based monitoring solutions
cannot detect transient attacks that can occur in between
snapshots. We implemented a prototype of the Vigilare
system on Gaisler’s grlib-based system-on-a-chip (SoC) by
adding Snooper hardware connections module to the host
system for bus snooping. To evaluate the beneﬁt of snoop-
based monitoring, we also implemented similar SoC with
a snapshot-based monitor to be compared with. The Vigi-
lare system detected all the transient attacks without perfor-
mance degradation while the snapshot-based monitor could
not detect all the attacks and induced considerable perfor-
mance degradation as much as 10% in our tuned STREAM
benchmark test.
Categories and Subject Descriptors
D.2.6 [Operating Systems]: Security and Protection—in-
vasive software
General Terms
Security
Keywords
Transient Attack, Hardware-based Integrity Monitor, Ker-
nel Integrity Monitor
∗Corresponding author
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
To protect the integrity of operating system kernels, many
security researchers strive to make their security monitors
independent from the host system that is being monitored.
Recent eﬀorts on this kernel integrity monitoring can be cat-
egorized into two groups: hardware based approaches [20,
30] and hypervisor based approaches [14, 24]. Recently, ap-
proaches based on hypervisors have gained popularity. How-
ever, as hypervisors are becoming more and more complex,
hypervisors themselves are exposed to numerous software
vulnerabilities [1, 2, 3, 4]. Several approaches [7, 28] noted
that inserting an additional software layer to protect the in-
tegrity of hypervisors may not be suﬃcient. The additional
layer will introduce new sets of vulnerabilities in a similar
fashion of the hypervisors; inserting another padding with a
software layer for security may enhance security temporarily,
but it does not provide a fundamental solution. As a solu-
tion for this, they introduced hardware-supported schemes
to monitor the integrity of hypervisors.
Most of the existing solutions to kernel integrity monitor-
ing make use of snapshot analysis schemes; they are usually
assisted by some type of hardware component that enables
saving of the memory contents into a snapshot, and then per-
form an analysis to ﬁnd the traces of a rootkit attack. Hy-
perSentry [7], Copilot [20], and HyperCheck [28] are exem-
plary approaches on snapshot-based kernel integrity moni-
toring. A custom Peripheral Component Interconnect (PCI)
card to create snapshots of the memory via Direct Mem-
ory Access (DMA) in Copilot, and the System Management
Mode (SMM) [12] are utilized to implement the snapshot-
based kernel integrity monitors in HyperCheck and Hyper-
Sentry.
Snapshot-based monitoring schemes in general have an in-
herent weakness because they only inspect the snapshots col-
lected over a certain interval, missing the evanescent changes
in between the intervals. The term transient attack refers to
attacks which do not leave persistent traces in memory con-
tents, but it still achieves its goal by using only momentary
and transitory manipulations.
Attackers can exploit this critical limitation of snapshot-
based kernel integrity monitoring. If attackers know the ex-
istence of a snapshot-based integrity monitor and estimate
the time and the interval of snapshot-taking, they could de-
vise a stealthy malware that subverts the kernel only in be-
tween the snapshots and restores all modiﬁcation back to
normal by the time of the next snapshot interval. This is
28called as scrubbing attack, and HyperSentry [7] addressed
this by making it impossible for the attackers to predict
when the snapshots will be taken. However, attackers can
still create a transient attack that leaves its traces as min-
imal as possible without knowing exact time that snapshot
is taken.
If the traces are left in the memory for a short
time, there is a chance that it can avoid being captured in
snapshot, and not detected. HyperSentry also noted it was
not designed to address such transient attack.
As to detecting such attacks using snapshot-based ap-
proaches, raising the rate of snapshot-taking might increase
the probability of detection. However, frequent snapshot-
taking would inevitably introduce increased overhead to the
host system. Randomizing the snapshot interval of the mon-
itor can be another solution to defeat such deliberately de-
signed transient attacks. Nonetheless, the detection rate
would greatly depend on luck and not be consistent. If the
transient attack is short-lived, not repeating its transient
attacks, the chance of detection based on random snapshot
interval would be low.
In this paper, we propose Vigilare, a snoop-based integrity
monitoring scheme that overcomes the limitations of exist-
ing kernel integrity monitoring solutions. The Vigilare in-
tegrity monitoring system takes a fundamentally diﬀerent
approach; it monitors the operation of the host system by
“snooping” the bus traﬃc of the host system from a separate
independent system located outside the host system. This
provides the Vigilare system with the capability to observe
all host system activities, and yet being completely inde-
pendent from any potential compromise or attacks in the
host system. This snoop-based architecture enables security
monitoring of virtually all system activities. All processor
instructions and data transfers among I/O devices, mem-
ory, and processor must go through the system’s bus. By
monitoring this critical path, Vigilare system acquires the
capability to observe all activities to locate malicious sys-
tem transactions. This Vigilare system is composed of the
following components. Snooper on the Vigilare system is
connected to the system bus of the main system, and col-
lects the contents of real-time bus traﬃc. Snooper delivers
the accrued bus traﬃc to Veriﬁer. The main functionality of
Veriﬁer is to examine the snooped data to look for a single
or a certain sequence of processor executions that violates
the integrity of the host system.
In summary, this paper’s contribution includes the follow-
ing:
First, we present the design of Vigilare system as a single
SoC (System-on-a-Chip), with Linux as its main operating
system, and our prototype implementation on the Gaisler
grlib-based SoC by adding newly designed Snooper hard-
ware connections module to the host system for bus snoop-
ing. To the best of our knowledge [9], our Vigilare is the ﬁrst
hardware integrity monitor that implements snooping capa-
bility of the bus traﬃc to perform integrity analysis of the
operating system kernel. Although most of the hardware-
based approaches were based on snapshot analysis, there
was an approach that employed event-driven integrity mon-
itoring [24], which has some similarities to the snoop-based
monitoring. However, it was a hypervisor-based approach
which is not a perfectly safe execution environment as we
mentioned.
Second, to illustrate and better understand the beneﬁt
of our snooper-based approach in comparison with previous
snapshot-based approaches, we also implemented a similar
SoC with a snapshot-based monitor, and created a sample
transient attack testing code with tunable parameters for the
experiment testing. The sample attack code takes advantage
of the snapshot-based solutions and we show how Vigilare
eﬀectively deals with the attack.
Third, we then present our comparison evaluation study,
reporting that the Vigilare system detected all the transient
attacks on immutable regions without performance degrada-
tion while the snapshot-based monitor could not detect all
the attacks and induced considerable performance degrada-
tion with an average of 17.5 % for 50ms snapshot interval
in our tuned STREAM benchmark test. This is due to the
performance overhead incurred by the memory access to ac-
quire snapshots periodically, which also consumes memory
bandwidth at the host.
In contrast, the Vigilare system
replicates the bus traﬃc of the host system using dedicated
hardware module, so the snooping can be performed with-
out incurring any memory bandwidth consumption at the
host system.
The rest of this paper is composed of the following: ﬁrst
we describe our assumptions and threat model in Section 2
and deﬁne the transient attack in Section 3. Also, we explain
the Vigilare system in detail in Section 4. We provide more
details about our prototypes in Section 5, and evaluate our
implementations in Section 6. We discuss limitations and
future works in Section 7, related works in Section 8 and
conclude our paper in Section 9.
2. ASSUMPTIONS AND THREAT MODEL
2.1 Assumptions
We assume that the host system is already compromised
by an attacker, that is, the attacker has gained the adminis-
trator’s privilege on the host system. In addition, we assume
that the attacker has no physical access to the entire system
therefore we can rule out the possibility of hardware mod-
iﬁcation. Thus, we are limiting the manipulation by the
attacker in the realm of software; no modiﬁcation should af-
fect the operation of the Vigilare system SoC hardware or
any other hardware components.
2.2 Threat Model
The primary threat that the Vigilare system strives to
mitigate is the kernel-level rootkits. As mentioned previ-
ously, we assume that the attackers have already gained
control over the host system, and continue their attack while
hiding the evidence of their intrusion. To achieve such goals,
they are capable of modifying some parts of kernel. For in-
stance, the attackers can install kernel rootkit that places
hooks on critical system calls. Another assumption is that
the attackers are aware of the presence of some kind of secu-
rity monitor. The attackers aim to avoid detection with the
best of their knowledge. One possible technique is to min-
imize and avoid an obvious and permanent modiﬁcation to
the kernel. By hiding the traces of malware left in the host
memory, the attackers could lower the probability of get-
ting detected. We deﬁne such malicious behavior transient
attacks and the details will be covered in the next section.
3. TRANSIENT ATTACK
As mentioned in previous sections, previous kernel in-
tegrity monitoring schemes that utilize memory snapshots
29to ﬁnd the traces of rootkits are vulnerable to transient at-
tacks. On the other hand, Vigilare solves such shortcomings
with its bus traﬃc monitoring architecture. In this section,
we deﬁne the term transient attack, introduce some exam-
ples of such attacks, and discuss the challenges in detecting
these transient attacks.
3.1 Deﬁnition
Transient attack is an attack whose traces do not incur
persistent changes to the victim’s system. In such scenar-
ios, the evidence of malicious system modiﬁcation is visible
for a short time period.
In turn, detecting the modiﬁca-
tion becomes diﬃcult. The term transient attack is deﬁned
rather broadly; any attack that does not leave permanent
changes can be classiﬁed as transient attacks. The soft-
timer based rootkit technique presented in the work by J.
Wei et al. shows the aspects of transient kernel rootkit [29].
The rootkit designed by J. Wei et al. takes advantage of
Linux timer data structure to convey the malicious code
and execute it at the scheduled time. Since the code that
had been contained in the timer is discarded shortly after its
execution, its trace is not only diﬃcult to locate but it also
stays in the memory for a very short time. The exploitation
of Linux soft-timer is a mere example, more sophisticated
transient attacks that can nullify traditional rootkit detec-