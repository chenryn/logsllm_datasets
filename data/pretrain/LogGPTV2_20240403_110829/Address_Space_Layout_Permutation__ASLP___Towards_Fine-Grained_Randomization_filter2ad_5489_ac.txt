structure is copied into the process address space. In this
phase we introduce the large scale randomization. A ran-
dom amount is subtracted from the standard 3 GB stack
base location so that the region starts anywhere between ap-
proximately 128 MB and 3 GB.
To ensure the stack has room to grow, ASLP prevents
subsequent allocations immediately below the stack. This
feature prevents the stack from being allocated so close to
another region that it cannot expand. The exact amount of
reserved area is conﬁgurable, but our experiments show that
8 MB is sufﬁcient for most applications.
The brk()-managed Heap Similar to the stack, the
heap location is set during process creation. In an unmodi-
ﬁed Linux kernel, the heap is allocated along with the BSS
region, which is conceptually a part of the data segment.
We modify the allocation code for the BSS and heap so they
occur in two independent steps. Separation allows the heap
location to be deﬁned independently of the data segment.
The amount of space to be allocated for the heap is then
augmented by 4 KB (1 page). Then a random, page-aligned
virtual address between 0 and 3 GB is generated for the start
of the heap. Finally, a random value between 0 and 4 KB
is added to this address to achieve sub-page randomization.
Since the initial heap allocation was given an extra page,
the sub-page shift will not push it beyond the original allo-
cation. The heap also can grow to fulﬁll dynamic memory
requirements as the corresponding process runs. As with the
stack, a comparable solution is used for the heap in which
an unused region of conﬁgurable size is maintained follow-
ing the heap. This prevents the heap from being placed too
close to other regions so that it has enough room to grow.
mmap() Allocations The mmap system call is used to
map objects into memory. Such objects include shared li-
braries as well as any other ﬁles the application may wish to
bring into memory. Allocations made by mmap are random-
ized using a one-phase, major randomization that is nearly
identical to the primary phase used for the stack and heap. A
secondary, sub-page shift is not used for mmap allocations,
because doing so would violate the POSIX mmap speciﬁ-
cation [13]. Since there can be multiple independent mmap
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006allocations per process (such as for two different shared li-
braries), each allocation is made randomly throughout the
entire available user level address space. This means that
allocations for multiple shared libraries do not necessarily
occupy a contiguous, sequential set of virtual memory ad-
dresses as they do in all related techniques and unrandom-
ized kernels. This is beneﬁcial because the location of one
library will be of no use to determine the location of another
library.
Although the mmap system call allows a user process
to request a speciﬁc virtual address to store the mapping,
there is no guarantee the request will be honored even in the
vanilla kernel. In the ASLP kernel, if a speciﬁc address is
requested it is simply disregarded and replaced by a random
address. The random, page-aligned addresses are issued be-
tween 0 and 3GB. Therefore, mmap allocations use a one-
phase major randomization rather than the two-phase ap-
proach used for the stack and heap. An exception to overrid-
ing supplied addresses exists for ﬁxed regions, such as the
code and data segments. These regions are also brought into
memory via mmap, but because they are ﬂagged as ﬁxed the
supplied address is honored without modiﬁcation.
3.3 Demonstration of Permutation
After both user level and kernel level permutations, all
critical memory regions including static code and data seg-
ments can be placed in different locations throughout the
user memory space. Figure 3 shows a possible permutation
of the normal process memory layout as shown in ﬁgure 2.
The heap is allocated independently of the data segment,
and the stack is not the highest allocation in the user space.
The data segment comes ﬁrst instead of the code segment.
In short, the static code, data, stack, heap, and mmap allo-
cations occur randomly throughout the 3 GB user address
space. Figure 4 shows an example of ﬁne-grained permuta-
tion. Global variables (from num1 to num6) are randomly
re-ordered after the permutation.
Figure 3. Coarse-grained permutation
4 Evaluation
4.1 Security Evaluation
As discussed previously, although every address in the
x86 memory architecture is represented by 32-bits, not all
of those bits can be randomized. To assess the bits of ran-
Figure 4. Fine-grained permutation
Region
User Stack
Heap
Mmap
Code
Data
Vanilla
0 bits
0 bits
0 bits
0 bits
0 bits
Exec-Shield
17
13
12
0
0
PaX ASLR ASLP
24
13
16
0
0
28
29
20
20
20
Table 2. PaXtest results
domness in each region and for each technique, we use a
third-party application called PaXtest [5]. PaXtest includes
two types of tests. First, there are tests that try overwrit-
ing tiny executable code (e.g., just ret) in different memory
regions (stack, heap, bss, data, anonymous) and check if
the executable code can be run on the region. If the code
works, it reports that the system is vulnerable on such re-
gion. The second type of tests measures the randomness of
each region. By running locally, PaXtest is able to spawn
simple helper programs that merely output the virtual ad-
dresses of their variables in a randomized region. In doing
so, it can determine the number of randomized bits for such
variables based on where they would normally reside in an
unrandomized system. Table 2 provides a summary of the
PaXtest results.
The vanilla kernel has no randomization. So each region
has zero bit of randomness. Exec-Shield is the most sus-
ceptible to de-randomization attacks, providing the lowest
amount of randomization in all ﬁve regions. PaX ASLR
comes in the middle, with signiﬁcantly better stack and
mmap randomization. ASLP comes out ahead by at least 4
bits in all regions and provides randomization on the static
code and data segments with 20 bit randomness.
We used the PaXtest results to estimate the probabilistic
protection provided by ASLP. For example, ASLP random-
ize 20 bits in the address of the shared libraries. This means
that there are 220 possible locations for placement for the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006shared libraries. Assuming a random distribution, the ad-
dress can be guessed in a number of guesses equal to half
of the possible locations. Knowing both the reported attack
duration of 216 seconds to brute-force guess the address of
the shared library region [21] and the number of possible lo-
cations in this region from Table 2, we can estimate the av-
erage guess rate. Equation 1 shows the calculation of guess
rate.
220
possible locations
→ 524288 average guesses
2
216 seconds
= 2427.2 seconds to guess on average
(1)
Using the rate of 2427.2 guesses per second derived from
equation 1 and the bits of randomness returned from PaX-
test in Table 2, we can calculate the amount of time required
to brute force the randomization in each memory region for
ASLP. It takes about 3 weeks to guess correct location of
heap by brute force searching. The stack takes 10 days to
de-randomize. Mmap, code, and data regions cause lowest
amount of time–about an hour. However, code and data re-
gions would take additional time to brute force due to the
ﬁne-grained randomization of functions and variables.
Against ASLP, a de-randomizing attack would take a
considerable amount of time for constant guessing. How-
ever, we do not claim that ASLP is an effective deterrent
to prevent a determined attacker from penetrating a single
randomized target.
In such micro-security level perspec-
tive, the de-randomizing attack by Shacham et al [21] can
still succeed in about an hour to guess the mmap region.
Instead, we argue from a macro-security perspective that
ASLP provides a mechanism by which the memory corrup-
tion attack on large machines can be slowed to a rate that
allows intrusion detection systems and system administra-
tors to respond.
Consider the effect of address randomization at the
macro-security level: a large scale Internet worm propaga-
tion. With ASLP, the speed at which worms can spread us-
ing memory corruption attacks is bounded not by how fast
they can reach vulnerable hosts, but by how fast they can
de-randomize the randomized address space of each target.
Ideally, the current fastest known spreading worm, The
Sapphire/Slammer[17], is able to infect 100% of vulner-
able hosts in less than a minute by doubling in size ev-
ery one second with no randomization address space. We
calculate the worm propagation rate of each randomization
technique based on the infection rate of Sapphire/Slammer
worm and the probabilistic protection of each technique dis-
cussed above. For Exec-Shield, 100% infection occurs in
just over four minutes (4.275 minutes); for PaX ASLR the
time is just over one hour (68.4 minutes). Our ASLP ap-
proach is able to delay 100% infection for over eighteen
hours (1,083 minutes). This extension of infection time il-
lustrates the beneﬁt of having effective address space layout
protection because fast worms that exploit memory corrup-
tion vulnerabilities must ﬁrst get through address random-
ization before they can compromise their targets. Further,
the barrage of attempts to guess the correct address should
be visible by intrusion detection and prevention systems.
Increasing probabilistic protection means forcing attackers
to make more guesses, effectively giving intrusion detection
systems a bigger target.
4.2 Performance Evaluation
Our goal is to incur comparable or less performance
overhead to related techniques. We compare our approach
with two other popular ones: PaX ASLR and Exec-Shield.
It should be noted that both PaX ASLR and Exec-Shield
can be conﬁgured to do more than address randomization.
Where possible, we disable their extra features to make
them as similar to ASLP as possible.
The various kernels are tested by installing each of them
on a single test computer and selecting the desired kernel at
boot time. The test computer runs Red Hat Linux 9.0 with
a 2.66 GHz Intel Pentium 4 CPU, 512 MB of RAM, and a
7200 RPM ATA IDE hard disk drive. All benchmark suites
were compiled using GCC version 3.4.4.
The vanilla kernel establishes the baseline by which the
absolute performance impact of other conﬁgurations can be
measured. Since PaX ASLR and Exec-Shield are closely
related works that provide kernel-based address layout ran-
domization, their performance provides a metric to deter-
mine if ASLP does or does not have comparable perfor-
mance with kernel level randomization. For user level ran-
domization, we compare ASLP with Position Independent
Executable(PIE). PIE is used in PaX ASLR to move the
static code and data regions from their traditionally ﬁxed
positions. Since PIE is a compilation option and not a kernel
modiﬁcation, we test it using a vanilla kernel and compile
the benchmark suite with the PIE option.
We
employ three popular benchmarks
sure the performance of each conﬁguration:
CPU2000[7],
Apache Benchmark[11].
LMBench micro-benchmark[15],
to mea-
SPEC
and
SPEC CPU2000 Benchmark The SPEC CPU2000
Integer benchmark suite is a set of computationally inten-
sive integer applications that simulate the workload of sci-
entiﬁc computation. Each benchmark in the CPU2000 suite
measures the time required to complete a different integer
computation. For this reason, we use the CPU2000 bench-
mark to measure the impact of address permutation on com-
putational efﬁciency. Table 3 gives the result of CPU2000
Integer benchmark2.
2The full CPU2000 Integer benchmark suite contains 12 benchmarks.
One of the 12, the ”eon” benchmark, did not compile on GCC version
3.4.4. Although this GCC version was newer than that recommended by
the benchmark documentation, a GCC compiler of at least version 3.4.4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Benchmark
gzip
vpr
gcc
mcf
crafty
parser
perlbmk
gap
vortex
bzip2
twolf
Total
Avg. Overhead(%)
Vanilla
177
284
132
408
116
266
168
126
185
260
514
2636
0
Exec-Shield
178