## Steps to Reproduce
I'm using firebase storage to upload files. My broadband speed is around
80Mbps(download & upload). Avg. file size I'm trying to upload is 2.5MB which
is taking minimum 2mins to upload to firebase storage server.
My Main.dart file
        // Copyright 2017 The Chromium Authors. All rights reserved.
        // Use of this source code is governed by a BSD-style license that can be
        // found in the LICENSE file.
        import 'dart:async';
        import 'dart:io';
        import 'package:flutter/material.dart';
        import 'package:image_picker/image_picker.dart';
        import 'package:video_player/video_player.dart';
        import 'package:firebase_storage/firebase_storage.dart';
        import 'package:progress_hud/progress_hud.dart';
        import 'package:path/path.dart' as p;
        void main() {
          runApp(new MyApp());
        }
        class MyApp extends StatelessWidget {
          @override
          Widget build(BuildContext context) {
            return new MaterialApp(
              title: 'Image Picker Demo',
              home: new MyHomePage(title: 'Image Picker Example'),
            );
          }
        }
        class MyHomePage extends StatefulWidget {
          MyHomePage({Key key, this.title}) : super(key: key);
          final String title;
          @override
          _MyHomePageState createState() => new _MyHomePageState();
        }
        class _MyHomePageState extends State {
          Future _imageFile;
          bool isVideo = false;
          VideoPlayerController _controller;
          VoidCallback listener;
          bool showLoadingAnimation = false;
          void _onImageButtonPressed(ImageSource source) {
            setState(() {
              if (_controller != null) {
                _controller.setVolume(0.0);
                _controller.removeListener(listener);
              }
              if (isVideo) {
                ImagePicker.pickVideo(source: source).then((File file) {
                  if (file != null && mounted) {
                    setState(() {
                      _controller = VideoPlayerController.file(file)
                        ..addListener(listener)
                        ..setVolume(1.0)
                        ..initialize()
                        ..setLooping(true)
                        ..play();
                    });
                  }
                });
              } else {
                _imageFile = ImagePicker.pickImage(source: source);
              }
            });
          }
          @override
          void deactivate() {
            if (_controller != null) {
              _controller.setVolume(0.0);
              _controller.removeListener(listener);
            }
            super.deactivate();
          }
          @override
          void dispose() {
            if (_controller != null) {
              _controller.dispose();
            }
            super.dispose();
          }
          @override
          void initState() {
            super.initState();
            listener = () {
              setState(() {});
            };
          }
          Widget _previewImage() {
            return FutureBuilder(
                future: _imageFile,
                builder: (BuildContext context, AsyncSnapshot snapshot) {
                  if (snapshot.connectionState == ConnectionState.done &&
                      snapshot.data != null) {
                    return Image.file(snapshot.data);
                  } else if (snapshot.error != null) {
                    return const Text(
                      'Error picking image.',
                      textAlign: TextAlign.center,
                    );
                  } else {
                    return const Text(
                      'You have not yet picked an image.',
                      textAlign: TextAlign.center,
                    );
                  }
                });
          }
          _prepareImage(){
            print("Clicked on upload image button");
            setState(() {
              this.showLoadingAnimation = true;
              print("Loading animation started");
            });
            _imageFile.then((image) {
              print('Image file path : $image');
              _uploadImage(image);
            });
          }
          // Method for uploading image
          Future _uploadImage(File image) async {
            // fetch file name
            String fileName = p.basename(image.path);
            print('image base file name: ${fileName}');
            final StorageReference ref = FirebaseStorage.instance.ref().child(
                "images/$fileName");
            final StorageUploadTask uploadTask = ref.putFile(image, StorageMetadata(contentLanguage: "en"));
            print('STEP 1 Done - ${new DateTime.now()} ');
            final Uri downloadUrl = (await uploadTask.future).downloadUrl;
            print('STEP 2 Done - ${new DateTime.now()} ');
            print('Download url received: $downloadUrl');
            setState(() {
              this.showLoadingAnimation = false;
              print("Loading animation ended");
            });
          }
          @override
          Widget build(BuildContext context) {
            return Scaffold(
              appBar: AppBar(
                title: Text(widget.title),
              ),
              body: new Stack(
                children: [
                  new ListView(
                    children: [
                      _previewImage(),
                      new Padding(padding: const EdgeInsets.only(top: 30.0)),
                      new Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            new RaisedButton(
                                child: new Text('UPLOAD',
                                    style:
                                        new TextStyle(color: const Color(0xFFEEEEEE))),
                                color: const Color(0xFF00695C),
                                onPressed: () {
                                  _prepareImage();
                                })
                          ]),
                    ],
                  ),
                  this.showLoadingAnimation
                      ? new ProgressHUD(
                          backgroundColor: Colors.black12,
                          color: Colors.white,
                          containerColor: const Color(0xFF00796B),
                          borderRadius: 5.0,
                        )
                      : new Container()
                ],
              ),
              floatingActionButton: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  FloatingActionButton(
                    onPressed: () {
                      isVideo = false;
                      _onImageButtonPressed(ImageSource.gallery);
                    },
                    heroTag: 'image0',
                    tooltip: 'Pick Image from gallery',
                    child: const Icon(Icons.photo_library),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 16.0),
                    child: FloatingActionButton(
                      onPressed: () {
                        isVideo = false;
                        _onImageButtonPressed(ImageSource.camera);
                      },
                      heroTag: 'image1',
                      tooltip: 'Take a Photo',
                      child: const Icon(Icons.camera_alt),
                    ),
                  ),
                ],
              ),
            );
          }
        }
## Logs
    âžœ  experiment flutter run --verbose
    [  +29 ms] [/Users/sureshkumarmajhi/flutter/] git rev-parse --abbrev-ref --symbolic @{u}
    [  +31 ms] Exit code 0 from: git rev-parse --abbrev-ref --symbolic @{u}
    [        ] origin/master
    [        ] [/Users/sureshkumarmajhi/flutter/] git rev-parse --abbrev-ref HEAD
    [   +8 ms] Exit code 0 from: git rev-parse --abbrev-ref HEAD
    [        ] master
    [        ] [/Users/sureshkumarmajhi/flutter/] git ls-remote --get-url origin
    [   +6 ms] Exit code 0 from: git ls-remote --get-url origin
    [        ] https://github.com/flutter/flutter.git
    [        ] [/Users/sureshkumarmajhi/flutter/] git log -n 1 --pretty=format:%H
    [   +7 ms] Exit code 0 from: git log -n 1 --pretty=format:%H