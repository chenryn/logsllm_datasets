[CVE-2019-8646](https://bugs.chromium.org/p/project-zero/issues/detail?id=1858)是一个在反序列化`NSData,
_NSDataFileBackedFuture`的子类的漏洞。此类允许创建包含文件内容的缓冲区，但 **在访问数据之前不会加载该文件**
。实现反序列化，以便从输入数据中反序列化缓冲区长度，文件名也是如此，并且从不检查反序列化长度是否与最终加载的文件的长度一致。这违反了`NSData`类所做的基本保证，即`length`属性将是字节的正确长度属性。这可能会导致各种问题，包括内存损坏，将在未来的博客文章中探讨。值得注意的是，`_NSDataFileBackedFuture`类是一个隐藏类它不需要是`public`或被导出以使其可用于反序列化。
在查看了所有`initWithCoder`实现之后，我们开始想知道，如果允许类的子类没有实现`initWithCoder`会发生什么。事实证明它遵循正常的继承规则，这意味着它将为其超类使用`initWithCoder`实现，但随后将为该子类调用该类已重写的任何方法。事实证明，允许类(The
allowed class)的许多子类是可能的，例如`initWithCapacity:`是一种常用的方法来实现和调用。有些类具有 **阻止继承的检查**
，或者更常见的是 **需要直接继承**
（即，允许覆盖所有需要的方法的子类，而不依赖于某些超类实现的子类）。这是需要逐个类来审查的事情。我们通过将`dyld_shared_cache`加载到IDA并运行检查`Objective-C`元数据的[脚本](https://bugs.chromium.org/p/project-zero/issues/attachment?aid=394697&signed_aid=5uFIpHlPCfZIwX_Or7gX0w==)来确定可用的类。
我们发现的一个漏洞是[CVE-2019-8647](https://bugs.chromium.org/p/project-zero/issues/detail?id=1873&can=1&q=label%3AFinder-natashenka&colspec=ID Status
Restrict Reported Vendor Product Finder
Summary&start=100)。反序列化`_PFArray`类时发生此漏洞，该类扩展了`NSArray`并实现了`[NSArray
initWithCoder:]` 调用的`[_PFArray initWithObjects:count:]`
。此方法假定数组中的所有对象都有对它们的引用，这可能适用于此类的预期用途，但在反序列化期间不是这种情况。这意味着可以创建和使用包含已释放对象的数组。很可能这个类从来没有打算反序列化，并且在每当它包含的库被一个反序列化数组的进程导入时，方法`initWithObjects:count:`的可行性没有被考虑周全，这是开发人员所不希望看到的。
我们在一个类中报告了一个类似的漏洞[CVE-2019-8662](https://bugs.chromium.org/p/project-zero/issues/detail?id=1874)，据我们所知，它没有导入到`iMessage`中，但很可能被其他使用反序列化的应用程序导入。
> 关于`NSKeyedArchiver`序列化的另一个有趣问题是，如果序列化对象包含循环，会发生什么呢？
从根本上说，`NSKeyedArchiver`格式是包含数字引用的`plist`文件，因此对象可以引用自身，或者可以存在涉及多个对象的循环。查看IDA中的代码，对象的反序列化大致如下：
    if(temp_dict[key])
        return [temp_dict[key] copy];
    if(obj_dict[key])
        return [obj_dict[key] copy];
    NSObject* a = [NSSomeClass alloc];
    temp_dict[key] = a; //No references!!
    NSObject* obj = [a initWithCoder:];
    temp_dict[key] = NIL;
    obj_dict[key] = obj;
    return obj;
因此，第一次反序列化对象时，会在其类上调用`alloc` ，然后`alloc`返回的对象将存储在 不保留对该对象的引用的 临时字典
中，然后在分配的对象上调用`initWithCoder`。完成该调用后，将从临时字典中删除已分配的对象，并将`initWithCoder`返回的对象添加到永久对象字典中，该字典会添加对该对象的引用。
这个方案有 **几个问题**
。首先，不能保证`initWithCoder`返回调用它的这个对象，事实上，文档特别指出这不能保证是这种情况。此外，`initWithCoder`负责在未返回此对象的情况下释放该对象。
因此，理论上`initWithCoder`实现可以释放`alloc`返回的对象 ，然后反序列化可能是对同一对象的引用的字段，这将导致
**返回的引用是对释放的内存的无效引用**
。我们进行了分析，没找到任何`initWithCoder`在`SpringBoard`中存在此问题的实现，但它们可能存在于其他应用程序中，因为这不违反任何被记录的对`initWithCoder`实现行为的限制。
另一个问题是，如果`initWithCoder`的实现以反序列化自身收尾，然后使用该对象。但它缺可以在调用完成之前使用该对象。如果某些方法假定对象已完成或不会更改（因为它可能会随着`initWithCoder`调用完成而继续更改），则会导致问题。
我们寻找涉及生命周期的漏洞并发现了两个这样的错误。第一个是[CVE-2019-8641](https://bugs.chromium.org/p/project-zero/issues/detail?id=1881)，我们尚未透露，因为它的修复并没有完全解决问题。
另一个问题是[CVE-2019-8660](https://bugs.chromium.org/p/project-zero/issues/detail?id=1884)。这种脆弱性是另一个子类的`NSDictionary`，`NSKnownKeysDictionary1`，这是另一个优化的字典类，需要预先提供密钥。在这种情况下，密钥作为类`NSKnownKeysMappingStrategy1`实例提供，它将包含密钥的数组分别反序列化。在反序列化密钥后，检查反序列化的密钥数量是否与密钥数组长度一致，因此如果密钥是`NSKnownKeysDictionary1`的另一个实例，则它可以在检查密钥数量之前使用`NSKnownKeysMappingStrategy1`实例。这允许
**整数溢出** 导致`[NSKnownKeysDictionary1 initWithCoder:]`中的内存损坏。
`NSKeyedArchiver`序列化的本质使得保护非常困难。即使启用了`NSSecureCoding`，`NSKeyedArchiver`序列化也会无意中创建极大的攻击面。举个例子，如果启用了安全编码，下一个调用的攻击面是什么？
`[NSKeyedUnarchiver unarchivedObjectOfClasses:@[NSURL] fromData:mydata
error:NIL];`
显然，它包括URL反序列化器，`[NSURL
initWithCoder:]`以及在调用的app中实现的任何子类反序列化器，例如`[NSMyURLSubClass initWithCoder:]`
但它还包括由app导入的库中的`NSURL`的任何子类。例如，假设此应用程序导入`UserNotifications`框架，在这种情况下，`[UNSecurityScopedURL
initWithCoder:]` ，`NSURL`的子类也将成为攻击面的一部分，即使该库被导入的原因并不是用于序列化
让我们再看一下前面讨论的`[NSURL initWithCoder:]`：
    [NSURL initWithCoder:](NSURL *u, id decoder){
    NSData* book = [decoder decodeObjectOfClass:[NSData class] forKey:@"NS.minimalBookmarkData"];
    if(book)
        return [URLByResolvingBookmarkData:data];
    NSString* base = [decoder decodeObjectOfClass:[NSString class] forKey:@"NS.base"];
    NSString* relative = [decoder decodeObjectOfClass:[NSString class] forKey:@"NS.relative"];
    return [NSURL initWithString:base relativeToURL:relative];
    }
它包含对`decodeObjectOfClass:forKey:`的三次调用，分别解析类`NSString`，`NSData`和`NSURL`的对象，所以`[NSString
initWithCoder:]` 和`[NSData initWithCoder:]`
现在也是攻击面的一部分。在`[NSURL的initWithCoder:]`
实现中，也将把提供的`NSData`对象看作一个bookmark并进行解析（如果它存在），所以这也是在攻击面。
攻击面现在也包括`NSString`和`NSData`的子类，假设此应用程序仅导入`UserNotifications`框架以及通常必需的`Foundation`和`CoreFoundation`，以下反序列化函数现在位于攻击面中，因为它们是这两个类的子类：`[_NSDispatchData
initWithCoder:]`, `[__NSLocalizedString initWithCoder:]`,
`[NSLocalizableString initWithCoder:]` and `[UNLocalizedString
initWithCoder:]`
看看这些，有两种方法可以允许更多的类成为攻击面。`[UNLocalizedString initWithCoder:]`
反序列化`NSArray`实例，同时`[UNLocalizedString initWithCoder:]`
解码类`NSDictionary`、`NSNumber`和`NSDate`的对象。出于本示例的目的，我们不会研究这些类的子类，但很明显它们将允许更多的类，并且更多地增加攻击面，这些类的子类也是如此，等等。
这只是考虑子类的`initWithCoder`方法，考虑到允许类的任何子类可能由于继承而成为反序列化的一部分，因此攻击面可能更大。例如`[NSString
initWithCoder:]` 可以调用`[NSString initWithString:]` 或`[NSString initWithBytes:
length: encoding:]，具体取决于反序列化的字段，因此这两个子类方法都是攻击面的一部分。
在这种情况下，这包括`[NSBigMutableString initWithString:]`, `[NSDebugString
initWithString:]`,  
`[NSPlaceholderMutableString
initWithBytes:length:encoding:]`和`[NSPlaceholderString
initWithBytes:length:encoding:]`，由于继承，所有其他允许的类在攻击面上都有类似的增加。
这是一个非常大的攻击面，用于解码URL（这可能只是一个字符串），它是一个随着应用程序的发展而呈指数级扩大的攻击面。例如，想象一下在此攻击面上导入一些额外库的影响，或者在允许列表中添加一些额外的类。同样重要的是，在序列化期间可以组合来自不打算一起使用的不同框架的类。例如，可以使用来自另一个框架的字符串子类来解码URL，该框架包含来自另一个框架的数据对象，并且生成的对象可以包含许多未预期或预期的类的属性。反序列化的广泛攻击面以及从许多框架反序列化对象时可用的多个自由度是我们在iMessage中发现如此多漏洞的原因。
# 结论
我们分析了iPhone的远程攻击面，并审查了SMS，MMS，VVM，Email和iMessage，并且发布了几种可用于进一步测试这些攻击面的工具。我们报告了总共10个漏洞，所有这些漏洞都已修复。由于其广泛且难以枚举的攻击面，大多数漏洞都发生在`iMessage`中。大多数此类攻击，表面不是正常使用的功能，对用户没有任何用处。`Visual
Voicemail`也有一个庞大且不直观的攻击面，可能导致上文提到的严重的漏洞。总的来说，我们发现的远程漏洞的数量和严重程度都很高。减少iPhone的远程攻击面可能会提高其安全性。