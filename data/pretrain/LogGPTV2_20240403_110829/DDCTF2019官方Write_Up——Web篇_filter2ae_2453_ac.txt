            response.set_cookie('user_name', user_name)
            response.set_cookie('REVEL_SESSION', hash_val)
            response.headers['Server'] = 'Caddy'
            return response
    def get_user_balance():
        result = []
        user_name = request.cookies.get('user_name')
        hash_val = request.cookies.get('REVEL_SESSION')
        if not user_name or not hash_val:
            response = jsonify({"code": 404, "msg": "您未登陆", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        else:
            str_md5 = get_md5(user_name, 'DDCTF_2019')
            if hash_val == str_md5:
                balance = get_balance(user_name)
                bill_id  = get_bill_id(user_name)
                tmp_dic = {'balance': balance , 'bill_id': bill_id}
                result.append(tmp_dic)
                return jsonify({"code": 200, "msg": "查询成功", "data": result})
            else:
                return jsonify({"code": 404, "msg": "参数错误", "data": []})
    def buy_ticket():
        result = []
        user_name = request.cookies.get('user_name')
        hash_val = request.cookies.get('REVEL_SESSION')
        ticket_price = int(request.args.get('ticket_price'))
        if not user_name or not hash_val or not ticket_price:
            response = jsonify({"code": 404, "msg": "参数错误", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        str_md5 = get_md5(user_name, 'DDCTF_2019')
        if hash_val != str_md5:
            response = jsonify({"code": 404, "msg": "登陆信息有误", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        if ticket_price = price:
                if mydb.get_collection('user_env').find_one({'user_name': user_name}):
                    tmp = mydb.get_collection('user_env').find_one({'user_name': user_name})['user_info_list']
                    for item in tmp:
                        if item['user_name'] == user_name:
                            result.append(item)
                        else:
                            pass
                        response = jsonify({"code": 200, "msg": "已购买ticket", "data": result})
                        response.headers['Pay-Server'] = 'Apache-Coyote/1.1'
                        response.headers['X-Powered-By'] = ' Servlet/3.0'
                    return response
                else:
                    account = tmp_account - price
                    mydb.get_collection('account').update_one({'user_name': user_name}, {'$set': {'balance': account}},
                                                              upsert=True)
                    mydb.get_collection('bill').delete_one({'bill_id': bill_id})
                    tmp_info = creat_env_db(user_name)
                    mydb.get_collection('user_env').insert_one(tmp_info[0])
                    tmp_result = {'your_ticket': tmp_info[1]['hash_val'], 'your_id': tmp_info[1]['id']}
                    result.append(tmp_result)
                    response = jsonify({"code": 200, "msg": "交易成功", "data": result})
                    response.headers['Pay-Server'] = 'Apache-Coyote/1.1'
                    response.headers['X-Powered-By'] = ' Servlet/3.0'
                    return response
            else:
                response = jsonify({"code": 200, "msg": "余额不足", "data": []})
                response.headers['Pay-Server'] = 'Apache-Coyote/1.1'
                response.headers['X-Powered-By'] = ' Servlet/3.0'
                return response
        else:
            response = jsonify({"code": 200, "msg": "订单信息有误", "data": []})
            response.headers['Pay-Server'] = 'Apache-Coyote/1.1'
            response.headers['X-Powered-By'] = ' Servlet/3.0'
            return response
    def is_login():
        user_name = request.cookies.get('user_name')
        hash_val = request.cookies.get('REVEL_SESSION')
        if not user_name or not hash_val:
            response = jsonify({"code": 404, "msg": "参数不能为空", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        str_md5 = get_md5(user_name, 'DDCTF_2019')
        if hash_val != str_md5:
            response = jsonify({"code": 404, "msg": "登陆信息有误", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        response = jsonify({"code": 200, "msg": "您已登陆", "data": []})
        return response
    def search_ticket():
        result = []
        user_name = request.cookies.get('user_name')
        hash_val = request.cookies.get('REVEL_SESSION')
        if not user_name or not hash_val:
            response = jsonify({"code": 404, "msg": "参数不能为空", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        str_md5 = get_md5(user_name, 'DDCTF_2019')
        if hash_val != str_md5:
            response = jsonify({"code": 404, "msg": "登陆信息有误", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        tmp = mydb.get_collection('user_env').find_one({'user_name': user_name})
        if not tmp:
            response = jsonify({"code": 404, "msg": "你还未获取入场券", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        if tmp:
            tmp_dic = {'ticket': tmp['player_info']['hash_val'], 'id': tmp['player_info']['id']}
            result.append(tmp_dic)
            response = jsonify({"code": 200, "msg": "ticket信息", "data": result})
            response.headers['Server'] = 'Caddy'
            return response
    def remove_robot():
        result = []
        sign_str = ''
        user_name = request.cookies.get('user_name')
        hash_val = request.cookies.get('REVEL_SESSION')
        a = request.environ['QUERY_STRING']
        params_list = []
        for item in a.split('&'):
            k, v = item.split('=')
            params_list.append((k, v))
        user_id = request.args.get('id')
        ticket = request.args.get('ticket')
        if not user_name or not hash_val or not user_id or not ticket:
            response = jsonify({"code": 404, "msg": "参数错误", "data": []})
            response.headers['Server'] = 'Caddy'
            return response
        # if not str.isdigit(user_id):
        #     return jsonify({"code": 0, "msg": "参数错误", "data": []})
        str_md5 = get_md5(user_name, 'DDCTF_2019')
        if hash_val != str_md5:
            response = jsonify({"code": 404, "msg": "登陆信息有误"
读一下tools.py可以看到出题人费劲心机模拟golang，看样子也是想考hash长度扩展攻击的
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    # @Time    : 2/1/2019 10:47 PM
    # @Author  : fz
    # @Site    : 
    # @File    : tools.py
    # @Software: PyCharm
    import decimal
    import datetime
    import types
    import hashlib
    from flask.json import JSONEncoder
    from urllib import unquote
    from urllib import quote_plus
    secrity_key = 'Winner, winner, chicken dinner!'
    def pretty_floats(obj):
        if isinstance(obj, float) or isinstance(obj, decimal.Decimal):
            return round(obj, 2)
        elif isinstance(obj, dict):
            return dict((k, pretty_floats(v)) for k, v in obj.iteritems())
        elif isinstance(obj, (list, tuple)):
            return map(pretty_floats, obj)
        return obj
    # 空值变为0
    def pretty_data(obj):
        if isinstance(obj, types.NoneType) or obj == "":
            return 0
        elif isinstance(obj, dict):
            return dict((k, pretty_data(v)) for k, v in obj.iteritems())
        elif isinstance(obj, (list, tuple)):
            return map(pretty_data, obj)
        return obj