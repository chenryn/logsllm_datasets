，接下来也会以这个poc为依据来解释。
## CVE-2019-14811 分析
首先我们确定在.pdf_hook_DSC_Creator存在有forceput指令。
由于.pdf_hook_DSC_Creator命令也无法直接被我们使用，因此需要从.pdfdsc中先提取出.pdf_hook_DSC_Creator。
{}包裹的作为一个元素，所以可以发现.pdf_hook_DSC_Creator是第25个元素，因为过程在栈上是作为数组展开的，因此只要`systemdict
/.pdfdsc get 24 get`即获得了.pdf_hook_DSC_Creator的一个引用。
关注.pdf_hook_DSC_Creator的逻辑，当你调用`null .pdf_hook_DSC_Creator`时，会在`/Creator
.knownget`处发生第一次`/typecheck`的error，然后在`(PScript5.dll)
search`处发生第二次`/typecheck`的error。具体的说，可以通过修改errordict对于`/typecheck`的处理来判断。
比如这样的方法
    /typecheckcount 0 def
    errordict /typecheck {
      /typecheckcount typecheckcount 1 add def
      typecheckcount 1 eq {
        ==
      } if
      typecheckcount 2 eq {
        == ==
      } if
    } put
可以看到`/typecheck`的error处理已经被改变。
在`(PScript5.dll) search`处发生第二次`/typecheck`的error时，我们可以看到栈上的内容是这样的
    {(PScript5.dll) --search-- {--pop-- --pop-- systemdict /resourcestatus --dup-- {--dup-- /FontType --eq-- 2 --index-- 32 --eq-- --and-- {--pop-- --pop-- false} {--resourcestatus--} --ifelse--} --bind-- --.makeoperator-- --.forceput-- systemdict /.pdf_hooked_DSC_Creator true --.forceput--} --executeonly-- --if-- --pop--}
首先，上述的内容是栈上的第二部分内容（第二个==的输出）。
    {--pop-- --pop-- systemdict /resourcestatus --dup-- {--dup-- /FontType --eq-- 2 --index-- 32 --eq-- --and-- {--pop-- --pop-- false} {--resourcestatus--} --ifelse--} --bind-- --.makeoperator-- --.forceput-- systemdict /.pdf_hooked_DSC_Creator true --.forceput--}
这是第二部分内容中的第三段，｛｝中的内容是看做一部分的，因此`--.forceput--`是这段内容的第九个。
所以我们可以通过`1 index 2 get 8 get`来获得栈上的`--.forceput--`。
poc的第一部分获取forceput到此结束，第二部分在前面已经提过了就是重新设置userparams的文件访问控制参数。
最后一部分就是命令执行的部分，这在前文也已经提过了，就是采用了file可以使用pipe的方式来完成的。
通过CVE-2019-14811，我们可以明白，只要有某一个分支中存在没有被设置为executeonly的forceput命令，我们就可以通过触发errordict中存在的error
handle来泄漏forceput命令。
正因如此，我们通过Taviso的issue可以发现，ghostscript官方提供的patch多次被他绕过，无法完全根除这样的问题。
而这也促使ghostscript官方完全更新了自己的SAFER模式，通过这种方式来进行防御。
## 现在的ghostscript
打开最新版本的ghostscript的源码，我们可以发现，如今的SAFER模式采用了以下方式来防御（代码在`Resource/Init/gs_init.ps`）
如今采用`/.lockfileaccess`来设置SAFER模式，现在的`.addcontrolpath`直接将访问控制权限中的路径设置在了全局的结构体中，不再采用userparams来是设置访问控制参数。同时，`.activatepathcontrol`起到了锁的作用，只要它被启用后，再采用`.addcontrolpath`就会直接退出解释器。
我们可以在源码中轻松地看到`addcontrolpath`改动了结构体的一个变量的值。
因此，除非能修改到这个标志位，我们无法再对文件的访问控制再做任何的修改。
如果要验证你当前的ghostscript版本是否已经启用了新的SAFER（新版本的ghostscript默认就会启用SAFER模式），你只需要尝试调用`.addcontrolpath`命令即可。
    [ (/tmp) ] {/PermitFileWriting exch .addcontrolpath} forall
貌似在当前的ubuntu和debian中都还没有更新ghostscript的这个新的SAFER，我在docker中拉去最新的ubuntu和debian都未成功触发直接退出解释器的情形。
## imagemagick解析
Tokyo Western的ctf中采用了官网推荐方式来实现对ps解释器的限制。
众所周知，imagemagick采用读取文件头的方式来判断文件采用什么方式去解析这个文件，如果查看delegates.xml，的确会发现对应采用ps解释器的文件类型都被禁止了。但是如果你去看看
中对于格式的详细说明，就会发现还有很多漏网之鱼。通过`identify -list format`命令可以快速查找所有的支持格式。
## 后记
本来是想学习一下ghostscript的这一些漏洞看看还有没有漏网之鱼的，但是按照最新的SAFER的防御机制，单纯利用ghostscript逻辑来实现SAFER模式绕过可能无法完成了。如果还想绕过SAFER，可能要尝试通过type
confusion之类的手段来修改上述的结构体才有可能实现，比如[这篇文章](https://blog.semmle.com/cve-2018-19134-ghostscript-rce/)的做法，虽说他为了方便最后也是控制的forceput命令。
## 参考链接