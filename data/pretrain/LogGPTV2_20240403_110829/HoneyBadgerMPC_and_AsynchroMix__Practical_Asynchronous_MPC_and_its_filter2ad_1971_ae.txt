### Comparison with Vandermonde Matrix-Based Interpolation

When compared to using a Vandermonde matrix-based interpolation and evaluation at \( n = 64 \), the performance is similar. At \( n = 1000 \), the performance remains close, but using Fast Fourier Transform (FFT) for evaluation and Vandermonde matrices for interpolation provides an overall benefit over either method used individually.

### Establishing the Feasibility of Error Correction

We implemented two algorithms for Reed-Solomon error correction: Berlekamp-Welch and Gao [47]. For up to \( n = 100 \), correcting errors in a single polynomial takes less than one second. The overall performance of the Multi-Party Computation (MPC) system is not significantly affected by the cost of error correction because it is applied only once per faulty party. Once an error is identified in any batch, all shares from that party are discarded, and batch interpolation resumes using the remaining parties. Even in the worst-case scenario where \( t = 33 \) servers fail sequentially, the maximum added delay would be under 33 seconds.

### Distributed Experiment for AsynchroMix

To evaluate the performance of AsynchroMix and identify trade-offs and bottlenecks in our two mixing approaches, we deployed our prototype on clusters of AWS t2.medium instances (2 cores and 4GB RAM) across 10 regions on 5 continents. We conducted baseline tests for bandwidth and latency between instances in different regions, detailed in Appendix B. For each experiment, we ran three trials for each configuration of \( n \) and \( k \), recording bandwidth and running times.

#### Online Phase for PowerMix

Figure 10 (solid lines) shows the running time for PowerMix to mix and open messages from \( k = 64 \) to \( k = 1024 \) on up to \( n = 100 \) server nodes. It takes approximately 5 seconds to mix \( k = 256 \) messages on \( n = 100 \) servers and around 130 seconds to mix \( k = 1024 \) messages. PowerMix is mostly insensitive to the size of \( n \) because the bottleneck is the computational costs, which depend primarily on \( k \). The computation steps can be parallelized to utilize more computational resources.

**Figure 10: Online phase latency for varying number of client inputs, using PowerMix or Switching Network.**

**Figure 11: Communication cost (per node) of PowerMix in distributed experiment. Dashed line indicates the predicted limit as \( 2n_t + 1 \) approaches 6.**

Figure 11 shows the communication cost of PowerMix, measured as outgoing bytes sent by each server, amortized per each client input. Since PowerMix requires two batch reconstructions of \( k \) shares each, and BatchRecPub has a linear asymptotic communication overhead to open a linear number of shares, we expect the per-server per-share cost to reach a constant for large enough \( n \) and \( k \). We estimate this constant (the dashed line in the figure) as \( 2 \times 6 \times 1.06 \approx 12 \times \), where the 2 is for the two batch reconstruction instances used in PowerMix, 6 is the overhead for each batch reconstruction (the limit approached by \( 2n_t + 1 \)), and 1.06 is the observed overhead of Python pickle serialization in our implementation. As \( n \) grows larger, since there is an additive overhead quadratic in \( n \), larger values of \( k \) are necessary for the amortization to have an effect. However, even at \( n = 100 \), only around 400 bytes are needed to mix each 32-byte message with \( k = 512 \) or higher.

#### Online Phase for Switching Network

Figure 10 (dashed lines) shows the running time for the Switching Network to mix from \( k = 64 \) to \( k = 4096 \) messages. We can shuffle \( k = 4096 \) messages on \( n = 100 \) servers in around 2 minutes. Since the number of batch reconstruction rounds grows with \( \log_2 k \), the sensitivity to \( n \) also increases as \( k \) increases.

Based on the microbenchmarks (Figure 9), at \( k = 4096 \) and \( n = 100 \), the inherent computation time should account for only about 3 seconds out of the total 120 seconds observed. The rest is due to a combination of serialization and Python overhead as well as communication. Figure 12 shows the overall communication cost of the Switching network. For \( k = 4096 \) client inputs with \( n = 100 \) servers, each input requires each server to transmit nearly 30 kilobytes. The dashed line here is \( y = 32 \times 6 \times \log_2 k \), where 6 is the reconstruction overhead and \( \log_2 k \) corresponds to the number of total rounds. From our baseline experiment, the worst per-instance bandwidth is 221 Mbps (São Paulo) and the longest round trip latency is 328 ms (São Paulo to Mumbai), hence up to 50 seconds can be explained by transmission time and latency. At this setting, computation and communication contribute about equally (neither is the sole bottleneck), although there appears to be considerable room to eliminate overhead due to serialization and Python function calls in our implementation.

**Figure 12: Communication cost (per node) of switching network in distributed experiment. Dashed line indicates the predicted limit as \( 2N_t + 1 \) approaches 6.**

### Trade-offs Between PowerMix and Switching Network

In the online phase, PowerMix requires considerably more computation but less communication than the Switching Network. Given the resources available to our t2.medium instances, PowerMix results in more than a 2× reduction in overall latency at \( n = 100 \) for up to \( k = 512 \) clients. For larger values of \( k \), the Switching Network is preferable. PowerMix would naturally be useful for larger values of \( k \) in more bandwidth-constrained or computationally powerful networks.

### Overall Cost for AsynchroMix

Figures 13 and 14 show the estimated overall cost, per server and per client input, combining both computation ($0.05 per core hour for an EC2 node) and bandwidth ($0.02 per gigabyte transferred out) costs based on AWS prices. The stacked bar charts show the costs broken down by phases (offline, online, and client input). The offline phase contributions are based on a distributed experiment for the RanDouSha algorithm, multiplied by the necessary number of preprocessing ingredients of each type (see Table 3). The offline cost of PowerMix is always more expensive than the Switching Network at the same setting, and the difference increases with more clients (\( k \) versus \( \log_2 k \)).

Using the Switching Network, at \( n = 100 \) and \( k = 4096 \), the overall cost (including all 100 servers) is 0.08 cents per message using geographically distributed t2.medium instances.

**Figure 13: Estimated combined cost (computation and bandwidth) for AsynchroMix with Switching Network. The cost includes offline phase cost (dark colored), online cost (light colored), and client input cost (top). Bandwidth cost is marked as "//".**

**Figure 14: Estimated combined cost (computation and bandwidth) for AsynchroMix with PowerMix. The cost includes offline phase cost (dark colored), online cost (light colored), and client input cost (top). Bandwidth cost is marked as "//".**

### Concluding Remarks

Emerging Internet-scale applications such as blockchains and cryptocurrencies demand a robust anonymous communication service offering strong security guarantees. In building a robust anonymous communication service on top of MPC, we have highlighted robustness as a first-class concern for practical MPC implementations. Using an existing MPC implementation means accepting an unfair computation, which can enable intersection attacks when used for asynchronous communication. Furthermore, even a single faulty node could disrupt the service. Fortunately, we have shown through our AsynchroMix application case study that robust MPC can be practical. Whereas related work explicitly foregoes robustness, we show that it is an achievable goal worth paying for.

AsynchroMix features a novel MPC program for anonymous broadcast that trades off local computation for reduced communication latency, allowing for low-latency message mixing in varying settings. Through an extensive experimental evaluation, we demonstrate that our approach not only leverages the computation and communication infrastructure available for MPC but also offers directions towards further reducing the latency overhead.

In the future, our effort should motivate other MPC implementations to consider robustness as well as a computation vs. communication trade-off.

### Acknowledgements

We thank Ashish Choudhury and Arpita Patra for their valuable comments, as well as Sylvain Bellemare for software development. This work has been partially supported by the National Science Foundation under grant CNS-1719196; by IBM-ILLINOIS Center for Cognitive Computing Systems Research (C3SR) - a research collaboration as part of the IBM AI Horizons Network; and by the Department of Energy’s Office of Cybersecurity, Energy Security, and Emergency Response and the Department of Homeland Security’s Security Science & Technology Directorate under Award Number DE-OE0000780.

### References

[1] Masayuki Abe and Fumitaka Hoshino. 2001. Remarks on mix-network based on permutation networks. In International Workshop on Public Key Cryptography (PKC). 317–324.
[2] Ittai Abraham, Dahlia Malkhi, and Alexander Spiegelman. 2018. Validated Asynchronous Byzantine Agreement with Optimal Resilience and Asymptotically Optimal Time and Word Communication. arXiv preprint arXiv:1811.01332.
[3] Nikolaos Alexopoulos, Aggelos Kiayias, Riivo Talviste, and Thomas Zacharias. 2017. MCMix: Anonymous Messaging via Secure Multiparty Computation. In USENIX Security Symposium. 1217–1234.
[4] A Aly, M Keller, E Orsini, D Rotaru, P Scholl, NP Smart, and T Wood. 2019. SCALE–MAMBA v1. 3: Documentation. Technical Report.
[5] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstantinos Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady Laventman, Yacov Manevich, et al. 2018. Hyperledger fabric: a distributed operating system for permissioned blockchains. In ACM EuroSys.
[6] Gilad Asharov and Yehuda Lindell. 2017. A full proof of the BGW protocol for perfectly secure multiparty computation. Journal of Cryptology (2017), 58–151.
[7] Michael Backes, Amit Datta, and Aniket Kate. 2013. Asynchronous computational VSS with reduced communication complexity. In CT-RSA. 259–276.
[8] Assi Barak, Martin Hirt, Lior Koskas, and Yehuda Lindell. 2018. An End-to-End System for Large Scale P2P MPC-as-a-Service and Low-Bandwidth MPC for Weak Participants. In ACM CCS. 695–712.
[9] Donald Beaver. 1991. Efficient multiparty protocols using circuit randomization. In Advances in Cryptology – Crypto. 420–432.
[10] Zuzana Beerliová-Trubíniová and Martin Hirt. 2008. Perfectly-secure MPC with linear communication complexity. In Theory of Cryptography Conference. 213–230.
[11] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. 1988. Completeness theorems for non-cryptographic fault-tolerant distributed computation. In ACM STOC. 1–10.
[12] Michael Ben-Or, Boaz Kelmer, and Tal Rabin. 1994. Asynchronous secure computations with optimal resilience. In ACM PODC. 183–192.
[13] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers, Eran Tromer, and Madars Virza. 2014. Zerocash: Decentralized anonymous payments from Bitcoin. In IEEE Symposium on Security and Privacy.
[14] The Tor Blog. [n.d.]. One cell is enough to break Tor’s anonymity. https://blog.torproject.org/blog/one-cell-enough. Accessed Nov 2018.
[15] Dan Bogdanov, Sven Laur, and Jan Willemson. 2008. Sharemind: A framework for fast privacy-preserving computations. In European Symposium on Research in Computer Security. 192–206.
[16] Dan Bogdanov, Riivo Talviste, and Jan Willemson. 2012. Deploying secure multi-party computation for financial data analysis. In International Conference on Financial Cryptography and Data Security. 57–64.
[17] Peter Bogetoft, Dan Lund Christensen, Ivan Damgård, Martin Geisler, Thomas Jakobsen, Mikkel Krøigaard, Janus Dam Nielsen, Jesper Buus Nielsen, Kurt Nielsen, Jakob Pagter, et al. 2009. Secure multiparty computation goes live. In International Conference on Financial Cryptography and Data Security. 325–343.
[18] Nikita Borisov, George Danezis, Prateek Mittal, and Parisa Tabriz. 2007. Denial of service or denial of security?. In ACM CCS. 92–102.
[19] Alin Bostan, Laureano Gonzalez-Vega, Herve Perdry, and Eric Schost. [n.d.]. Complexity issues on Newton sums of polynomials.
[20] Gabriel Bracha. 1987. Asynchronous Byzantine agreement protocols. Information and Computation 75, 2 (1987), 130–143.
[21] Ethan Buchman. 2016. Tendermint: Byzantine fault tolerance in the age of blockchains. Ph.D. Dissertation.
[22] Christian Cachin, Klaus Kursawe, Anna Lysyanskaya, and Reto Strobl. 2002. Asynchronous Verifiable Secret Sharing and Proactive Cryptosystems. In ACM CCS. 88–97.
[23] Christian Cachin, Klaus Kursawe, Frank Petzold, and Victor Shoup. 2001. Secure and efficient asynchronous broadcast protocols. In Advances in Cryptology—Crypto. 524–541.
[24] Christian Cachin and Stefano Tessaro. 2005. Asynchronous verifiable information dispersal. In IEEE Symposium on Reliable Distributed Systems. 191–201.
[25] Miguel Castro, Barbara Liskov, et al. 1999. Practical Byzantine fault tolerance. In OSDI, Vol. 99. 173–186.
[26] Koji Chida, Daniel Genkin, Koki Hamada, Dai Ikarashi, Ryo Kikuchi, Yehuda Lindell, and Ariel Nof. 2018. Fast Large-Scale Honest-Majority MPC for Malicious Adversaries. In Advances in Cryptology – Crypto. 34–64.
[27] Arka Rai Choudhuri, Matthew Green, Abhishek Jain, Gabriel Kaptchuk, and Ian Miers. 2017. Fairness in an unfair world: Fair multiparty computation from public bulletin boards. In ACM CCS. 719–728.
[28] Ashish Choudhury, Martin Hirt, and Arpita Patra. 2013. Asynchronous multiparty computation with linear communication complexity. In DISC. 388–402.
[29] Ashish Choudhury, Emmanuela Orsini, Arpita Patra, and Nigel P Smart. 2016. Linear Overhead Optimally-Resilient Robust MPC Using Preprocessing. In SCN. 147–168.
[30] Ashish Choudhury and Arpita Patra. 2015. Optimally resilient asynchronous MPC with linear communication complexity. In ICDCN. 5.
[31] Ashish Choudhury and Arpita Patra. 2017. An efficient framework for unconditionally secure multiparty computation. IEEE Transactions on Information Theory (2017), 428–468.
[32] Sandro Coretti, Juan Garay, Martin Hirt, and Vassilis Zikas. 2016. Constant-round asynchronous multi-party computation based on one-way functions. In International Conference on the Theory and Application of Cryptology and Information Security. 998–1021.
[33] Henry Corrigan-Gibbs and Bryan Ford. 2010. Dissent: accountable anonymous group messaging. In ACM CCS. 340–350.
[34] Artur Czumaj and Berthold Vöcking. 2014. Thorp shuffling, butterflies, and non-Markovian couplings. In International Colloquium on Automata, Languages, and Programming. 344–355.
[35] Ivan Damgård, Matthias Fitzi, Eike Kiltz, Jesper Buus Nielsen, and Tomas Toft. 2006. Unconditionally secure constant-rounds multi-party computation for equality, comparison, bits and exponentiation. In Theory of Cryptography Conference. 285–304.
[36] Ivan Damgård, Martin Geisler, Mikkel Krøigaard, and Jesper Buus Nielsen. 2008. Asynchronous Multiparty Computation: Theory and Implementation. Cryptology ePrint Archive. https://eprint.iacr.org/2008/415.
[37] Ivan Damgård and Yuval Ishai. 2005. Constant-round multiparty computation using a black-box pseudorandom generator. In Advances in Cryptology—CRYPTO. 378–394.
[38] Ivan Damgård, Yuval Ishai, and Mikkel Krøigaard. 2010. Perfectly secure multi-party computation and the computational overhead of cryptography. In Advances in Cryptology—EUROCRYPT. 445–465.
[39] Ivan Damgård, Yuval Ishai, Mikkel Krøigaard, Jesper Buus Nielsen, and Adam Smith. 2008. Scalable multiparty computation with nearly optimal work and resilience. In Annual International Cryptology Conference. 241–261.
[40] Ivan Damgård, Marcel Keller, Enrique Larraia, Valerio Pastro, Peter Scholl, and Nigel P Smart. 2013. Practical covertly secure MPC for dishonest majority–or: breaking the SPDZ limits. In European Symposium on Research in Computer Security. 1–18.
[41] Ivan Damgård and Jesper Buus Nielsen. 2007. Scalable and unconditionally secure multiparty computation. In Advances in Cryptology—CRYPTO. 572–590.
[42] D. Das, S. Meiser, E. Mohammadi, and A. Kate. 2018. Anonymity Trilemma: Strong Anonymity, Low Bandwidth Overhead, Low Latency - Choose Two. In IEEE Symposium on Security and Privacy (SP). 108–126.
[43] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-generation Onion Router. In USENIX Security Symposium.
[44] Sisi Duan, Michael K Reiter, and Haibin Zhang. 2018. BEAT: Asynchronous BFT Made Practical. In ACM CCS. 2028–2041.
[45] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. 1988. Consensus in the presence of partial synchrony. Journal of the ACM (JACM) 35, 2 (1988), 288–323.
[46] Fabienne Eigner, Matteo Maffei, Ivan Pryvalov, Francesca Pampaloni, and Aniket Kate. 2014. Differentially private data aggregation with optimal utility. In ACSAC. 316–325.
[47] Shuhong Gao. 2003. A new algorithm for decoding Reed-Solomon codes. In Communications, Information and Network Security. 55–68.
[48] Daniel Genkin, Dimitrios Papadopoulos, and Charalampos Papamanthou. 2018. Privacy in decentralized cryptocurrencies. Commun. ACM 61, 6 (2018), 78–88.
[49] Yossi Gilad. 2019. Metadata-Private Communication for the 99%. To appear in Commun. ACM.
[50] S Dov Gordon, Feng-Hao Liu, and Elaine Shi. 2015. Constant-round MPC with fairness and guarantee of output delivery. In Advances in Cryptology—CRYPTO. 63–82.
[51] Marcella Hastings, Brett Hemenway, Daniel Noble, and Steve Zdancewic. 2019. SoK: General Purpose Compilers for Secure Multi-Party Computation. In IEEE Symposium on Security and Privacy (SP).
[52] Ryan Henry, Amir Herzberg, and Aniket Kate. 2018. Blockchain Access Privacy: Challenges and Directions. IEEE Security & Privacy Magazine 16, 4 (2018), 38–45.
[53] Martin Hirt and Jesper Buus Nielsen. 2006. Robust multiparty computation with linear communication complexity. In Advances in Cryptology—CRYPTO. 463–482.
[54] Patrick Hunt, Mahadev Konar, Flavio Paiva Junqueira, and Benjamin Reed. 2010. ZooKeeper: Wait-free Coordination for Internet-scale Systems.. In USENIX annual technical conference, Vol. 8.
[55] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2016. MASCOT: faster malicious arithmetic secure computation with oblivious transfer. In ACM CCS. 830–842.
[56] Marcel Keller, Valerio Pastro, and Dragos Rotaru. 2018. Overdrive: making SPDZ great again. In Adanvance in Cryptology—EUROCRYPT. 158–189.
[57] Aggelos Kiayias, Hong-Sheng Zhou, and Vassilis Zikas. 2016. Fair and robust multi-party computation using a global transaction ledger. In Advances in Cryptology—ASIACRYPT. 705–734.
[58] Ranjit Kumaresan and Iddo Bentov. 2014. How to use bitcoin to incentivize participation in secure computation. In ACM SIGSAC Conference on Computer and Communications Security. 715–726.
[59] Albert Kwon, Henry Corrigan-Gibbs, Srinivas Devadas, and Bryan Ford. 2017. VCrypt: Leveraging Vector Commitments for Scalable and Transparent Private Blockchains. In ACM SIGSAC Conference on Computer and Communications Security. 1–13.
[60] Albert Kwon, David Lazar, Srinivas Devadas, and Bryan Ford. 2016. Riffle. Privacy-preserving communication for the masses. In USENIX Security Symposium. 223–238.
[61] Leslie Lamport. 1998. The part-time parliament. ACM Transactions on Computer Systems (TOCS) 16, 2 (1998), 133–169.
[62] David Lazar, Yossi Gilad, and Nickolai Zeldovich. 2018. Karaoke: Distributed Privacy-Preserving Speech Recognition. In USENIX Security Symposium. 209–224.
[63] John D. Lipson. 1976. Newton’s Method: A Great Algebraic Algorithm. In 3rd ACM Symposium on Symbolic and Algebraic Computation. 260–270.
[64] Dahlia Malkhi, Noam Nisan, Benny Pinkas, Yaron Sella, et al. 2004. Fairplay: A secure two-party computation system. In USENIX Security Symposium.