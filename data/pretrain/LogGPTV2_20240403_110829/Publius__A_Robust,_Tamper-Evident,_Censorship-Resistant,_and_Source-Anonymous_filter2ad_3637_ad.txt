proxy parses the parameters and executes the corre-
sponding Publius operation. An HTML message in-
dicating the success or failure of the operation is re-
turned. If the retrieve operation is requested, and is
successful, the requested document is displayed in a
new Web browser window.
5 Limitations and threats
In this section we discuss the limitations of Publius
and how these limitations could be used by an adver-
sary to censor a published document, disrupt normal
Publius operation, or learn the identity of an author
of a particular document. Possible countermeasures
for some of these attacks are also discussed.
5.1 Share deletion or corruption
As described in section 3.2, when a document is
successfully published a copy of the encrypted docu-
ment and a share are stored on each of the n servers.
Only one copy of the encrypted document and k shares
are required to recover the original document.
Clearly, if all n copies of the encrypted ﬁle are
deleted, corrupted or otherwise unretrievable then it
is impossible to recover the original document. Simi-
larly if n-k+1 shares are deleted, corrupted or cannot
be retrieved it is impossible to recover the key.
In
either case the published document is eﬀectively cen-
sored. This naturally leads to the conclusion that the
more we increase n, or decrease k, the harder we make
it for an individual, or group of individuals, to censor
a published document.
5.2 Update ﬁle deletion or corruption
As stated in section 3.5, if a server receives a re-
quest for Publius content that has an associated up-
date ﬁle, the URL contained in that ﬁle is sent back
to the requesting proxy.
We now describe three diﬀerent attacks on the up-
date ﬁle that could be used by an adversary to censor
a published document. In each of these attacks the
adversary, Mallory, has read/write access to all ﬁles
on a server hosting the Publius content P, he wishes
to censor.
In the ﬁrst attack we describe, P does not have
an associated update ﬁle. That is, the author of P
has not executed the Publius Update operation on P’s
URL. Mallory could delete P from one server, but this
does not censor the content because there are other
servers available. Rather than censor the Publius con-
tent, Mallory would like to cause any request for P to
result in retrieval of a diﬀerent document, Q, of his
choosing. The Publius URL of Q is Qurl. Mallory now
enters Qurl into a ﬁle called “update” and places that
ﬁle in the directory associated with P. Now whenever
a request for P is received by Mallory’s server, Qurl
is sent back. Of course Mallory realizes that a single
Qurl received by the client does not fool it into retriev-
ing Qurl. Therefore Mallory enlists the help of several
other Publius servers that store P . Mallory’s friends
also place Qurl into an “update” ﬁle in P ’s directory.
Mallory’s censorship clearly succeeds if he can get an
update ﬁle placed on every server holding P. If the im-
plementation of Publius only requires that k shares be
downloaded, then Mallory does not necessarily need
to be that thorough. When the proxy makes a request
for P, if Mallory is lucky, then k matching URLs are
returned and the proxy issues a browser redirect to
that URL. If this happens Mallory has censored P and
has replaced it with Publius Content of his own cre-
ation. This motivates higher values for k. The update
ﬂag described in section 4.1 is an attempt to combat
this attack.
If the publisher turned the update ﬂag
oﬀ when the content was published then the Publius
client interpreting the URL will refuse to accept the
update URLs for the document. Although the content
might now be considered to be censored, someone is
not duped into believing that an updated ﬁle is the
Publius content originally published.
In the second attack, P has been updated and there
exists an associated update ﬁle containing a valid Pub-
lius URL that points to Publius Content U. To censor
the content, Mallory must corrupt the update ﬁle on
n − k + 1 servers. Now there is no way for anyone to
retrieve the ﬁle correctly. In fact, if Mallory can cor-
rupt that many servers, he can censor any document.
This motivates higher values for n and lower values
for k.
One other attack is worth mentioning. If Mallory
can cause the update ﬁles on all of the servers accessed
by the client to be deleted, then he can, in eﬀect, re-
store Publius content to its previous state before the
update occurred. This motivates requiring clients to
retrieve from all n servers before performing veriﬁca-
tion.
The attacks described above shed light on a couple
of tradeoﬀs. Requiring retrievers to download all n
shares and n copies of the document is one extreme
that favors censorship resistance over performance.
Settling for only the ﬁrst k shares opens the user
up to a set of corrupt, collaborating servers. Picking
higher values for k minimizes this problem. However,
lower values of k require the adversary to corrupt more
servers to censor documents. Thus, k, the number of
shares, and the number of copies of the page actually
retrieved, must be chosen with some consideration.
5.3 Denial of service attacks
Publius, like all Web services, is susceptible to de-
nial of service attacks. An adversary could use Publius
to publish content until the disk space on all servers
is full. This could also aﬀect other applications run-
ning on the same server. We take a simple measure of
limiting each publishing command to 100K. A better
approach would be to charge for space.
An interesting approach to this problem is a CPU
cycle based payment scheme known as Hash Cash
(http://www.cypherspace.org/~adam/hashcash/).
The idea behind this system is to require the publisher
to do some work before publishing. Thus, it becomes
diﬃcult to eﬃciently ﬁll the server disk. Hopefully,
the attack can be detected before the disk is full. In
Hash Cash, a client wishing to store a ﬁle on a par-
ticular server ﬁrst requests a challenge string c and
a number, b, from that server. The client must ﬁnd
another string, s, such that at least b bits of H(c · s)
match b bits of H(s) where H is a secure hash function
such as MD5 and “·” is the concatenation operator.
That is, the client must ﬁnd partial collisions in the
hash function.
The higher the value of b, the more time the client
requires to ﬁnd a matching string. The client then
sends s to the server along with the ﬁle to be stored.
The server only stores the ﬁle if H(s) passes the b bit
matching test on H(c · s). Another scheme we are
considering is to limit, based on client IP address, the
amount of data that a client can store on a particular
Publius server within a certain period of time. While
not perfect, this raises the bar a bit, and requires the
attacker to exert more eﬀort. We have not imple-
mented either of these protection mechanisms yet.
Dwork and Naor in [8] describe several other CPU
cycle based payment schemes.
5.4 Threats to publisher anonymity
Although Publius was designed as a tool for anony-
mous publishing there are several ways in which the
identity of the publisher could be revealed.
Obviously if the publisher leaves any sort of identi-
fying information in the published ﬁle he is no longer
anonymous. Publius does not anonymize all hyper-
links in a published HTML ﬁle. Therefore if a pub-
lished HTML page contains hyperlinks back to the
publisher’s Web server then the publisher’s anonymity
could be in jeopardy.
Publius by itself does not provide any sort of con-
nection based anonymity. This means that an adver-
sary eavesdropping on the network segment between
the publisher and the Publius servers could determine
the publisher’s identity.
If a server hosting Publius
Content keeps a log of all incoming network connec-
tions then an adversary can simply examine the log
to determine the publisher’s IP address. To protect
a publisher from these sort of attacks a connection
based anonymity tool such as Crowds should be used
in conjunction with Publius.
5.5 “Rubber-Hose cryptanalysis”
Unlike Anderson’s Eternity Service [2] Publius al-
lows a publisher to delete a previously published doc-
ument. An individual wishing to delete a document
published with Publius must possess the document’s
URL and password. An adversary who knows the
publisher of a document can apply so called “Rubber-
Hose” Cryptanalysis [21] (threats, torture, blackmail,
etc) to either force the publisher to delete the docu-
ment or reveal the document’s password.
Of course the adversary could try to force the ap-
propriate server administrators to delete the Publius
Content he wants censored. However when Publius
Content is distributed across servers located in diﬀer-
ent countries and/or jurisdictions such an attack can
be very expensive or impractical.
6 Future Work
Most of the browsers and proxies in use today do
not impose the 256 character limit on URL size. With
this limit lifted a ﬁxed table of servers is no longer
needed as the Publius URL itself can contain the IP
addresses of the servers on which the content is stored.
With no predeﬁned URL size limit there is essentially
no limit to the number of hosting servers that can be
stored in the Publius URL. The Publius URL struc-
ture remains essentially the same – just the IP ad-
dresses are added. The option and namei components
of the URL remain as they are still needed for tamper
checking and URL interpretation. We intend to use
this URL format in future versions of Publius.
During the Publius publication process the en-
crypted ﬁle, along with other information, is stored
on the host servers. Krawczyk in [14] describes how
to use Rabin’s information dispersal algorithm to re-
duce the size of the encrypted ﬁle stored on the host
server. We are planning to use this technique to re-
duce amount of storage needed on host servers.
[5] D. Chaum. Untraceable electronic mail, return
addresses, and digital pseudonyms. Communica-
tions of the ACM, 24(2):84–88, 1981.
[6] Y. Chen, J. Edler, A. Goldberg, A. Gottlieb,
S. Sobti, and P. N. Yianilos. A prototype
implementation of archival
In
Proc. ACM Digital Libraries. ACM, August 1999.
http://www.intermemory.org/.
intermemory.
7 Conclusions and availability
[7] I. Clark.
[4] T. Benes.
eternity service.
http://www.kolej.mﬀ.cuni.cz/eternity/.
The
1998.
[16] Ron Newman. The church of scientology vs. the
1998.
net.
http://www2.thecia.net/users/rnewman/
scientology/home.html.
February
In this paper we have described Publius, a Web
based anonymous publishing system that is resistant
to censorship. Publius’s main contributions beyond
previous anonymous publishing systems include an
automatic tamper checking mechanism, a method for
updating or deleting anonymously published material,
and methods for anonymously publishing mutually
hyperlinked content.
The
current
implementation of Publius
con-
sists of approximately ﬁfteen hundred lines of
Perl.
freely available at
http://www.cs.nyu.edu/~waldman/publius.html.
source
code
The
is
Acknowledgements
We would like to thank Usenix for supporting this
work. We would also like to thank Adam Back, Ian
Goldberg, Oscar Hernandez, Graydon Hoare, Benny
Pinkus, Adam Shostack, Anton Stiglic, Alex Taler and
the anonymous reviewers for their helpful comments
and recommendations.
References
[1] A. V. Aho, J. E. Hopcroft, and J. D. Ull-
man. Data Structures And Algorithms. Addison-
Wesley Publishing Company, 1983.
[2] R.
J.
son. The eternity service.
1996. http://www.cl.cam.ac.uk/users/rja14/
eternity/eternity.html.
Ander-
In Pragocrypt 1996,
[3] A. Back. The eternity service. Phrack Maga-
1997.
7(51),
zine,
http://www.cypherspace.org/ adam/
eternity/phrack.html.
A distributed decentralised infor-
1999.
mation storage and retrieval system.
http://freenet.sourceforge.net/Freenet.ps.
[8] C. Dwork and M.Naor. Pricing via process-
ing or combatting junk mail.
In Advances
in Cryptology—CRYPTO ’92, pages 139–147.
Springer-Verlag, 1992.
[9] E.G. Gabber, P.B. Gibbons, D.M. Kristol,
Y. Matias, and A. Mayer. Consistent, yet anony-
mous web access with LPWA. Communications
of the ACM, 42(2):42–47, 1999.
[10] P. Gemmell and M. Sudan. Highly resilient cor-
rectors for polynomials. Information Processing
Letters, 43:169–174, 1992.
[11] A. V. Goldberg and P. N. Yianilos. Towards
and archival intermemory.
In Proc. IEEE In-
ternational Forum on Research and Technology
Advances in Digital Libraries (ADL’98), pages
147–156. IEEE Computer Society, April 1998.
http://www.intermemory.org/.
[12] I. Goldberg and D. Wagner. TAZ servers and the
rewebber network: Enabling anonymous publish-
ing
on the world wide web. First Monday, 3, 1998.
http://www.ﬁrstmonday.dk/issues/issue3 4/
goldberg/index.html.
[13] Wendy M. Grossman. Wired, 3(12):172 –177 and
1995.
248–252,
http://www.wired.com/wired/archive/3.12/
alt.scientology.war pr.html.
December
[14] H. Krawczyk. Secret sharing made short. In Ad-
vances in Cryptology—CRYPTO ’93, pages 136–
143. Springer-Verlag, 1993.
[15] R. Motwani and P. Raghavan. Randomized Al-
gorithms. Cambridge University Press, 1995.
[17] U.S. Library of Congress. About the federalist
papers. http://lcweb2.loc.gov/const/
fed/abt fedpapers.html.
[18] M. G. Reed, P. F. Syverson, and D. M.
Goldschlag.
Proxies for anonymous routing.
In 12th Annual Computer Security Applica-
tions Conference, 1996.
http://www.onion-
router.net/Publications.html.
[19] Michael K. Reiter and Aviel D. Rubin. Crowds:
Anonymity for web transactions. ACM Transac-
tions on Information System Security, 1(1), April
1998.
[20] R. Rivest. The MD5 message digest algorithm.
RFC 1321, April 1992.
[21] B. Schneier. Applied Cryptography. John Wiley
and Sons, 1996.
[22] A. Shamir. How to share a secret. Communica-
tions of the ACM, 22:612–613, November 1979.