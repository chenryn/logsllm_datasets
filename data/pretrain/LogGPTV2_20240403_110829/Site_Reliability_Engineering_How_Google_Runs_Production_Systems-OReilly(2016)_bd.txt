ObjectivityObjectivity 
As a nonpartisan advisor, an LCE plays a balancing and mediating role between stakeholders including SRE, product developers, product managers, and market‐ing.
Because Launch Coordination Engineer is an SRE role, LCEs are incentivized to pri‐oritize reliability over other concerns. A company that does not share Google’s relia‐bility goals, but shares its rapid rate of change, may choose a different incentive structure.Setting Up a Launch Process
Google has honed its launch process over a period of more than 10 years. Over time we have identified a number of criteria that characterize a good launch process:
Lightweight 
	Easy on developers
Robust 
	Catches obvious errors
Thorough 
	Addresses important details consistently and reproducibly
Scalable 
Accommodates both a large number of simple launches and fewer complex launchesAdaptable 
Works well for common types of launches (for example, adding a new UI lan‐guage to a product) and new types of launches (for example, the initial launch of the Chrome browser or Google Fiber)
372  |  Chapter 27: Reliable Product Launches at ScaleAs you can see, some of these requirements are in obvious conflict. For example, it’s hard to design a process that is simultaneously lightweight and thorough. Balancing these criteria against each other requires continuous work. Google has successfully employed a few tactics to help us achieve these criteria:
Simplicity 
	Get the basics right. Don’t plan for every eventuality.
A high touch approachA high touch approach 
	Experienced engineers customize the process to suit each launch.
Fast common paths 
Identify classes of launches that always follow a common pattern (such as launch‐ing a product in a new country), and provide a simplified launch process for this class.Experience has demonstrated that engineers are likely to sidestep processes that they consider too burdensome or as adding insufficient value—especially when a team is already in crunch mode, and the launch process is seen as just another item blocking their launch. For this reason, LCE must optimize the launch experience continuously to strike the right balance between cost and benefit.The Launch Checklist
Checklists are used to reduce failure and ensure consistency and completeness across a variety of disciplines. Common examples include aviation preflight checklists and surgical checklists [Gaw09]. Similarly, LCE employs a launch checklist for launch qualification. The checklist (Appendix E) helps an LCE assess the launch and pro‐vides the launching team with action items and pointers to more information. Here are some examples of items a checklist might include:• Question: Do you need a new domain name?
— Action item: Coordinate with marketing on your desired domain name, and 	request registration of the domain. Here is a link to the marketing form.
• Question: Are you storing persistent data?
— Action item: Make sure you implement backups. Here are instructions for 	implementing backups.
• Question: Could a user potentially abuse your service?— Action item: Implement rate limiting and quotas. Use the following shared 	service.
In practice, there is a near-infinite number of questions to ask about any system, and it is easy for the checklist to grow to an unmanageable size. Maintaining a managea‐
Setting Up a Launch Process  |  373Setting Up a Launch Process  |  373
ble burden on developers requires careful curation of the checklist. In an effort to curb its growth, at one point, adding new questions to Google’s launch checklist required approval from a vice president. LCE now uses the following guidelines:
• Every question’s importance must be substantiated, ideally by a previous launch 	disaster.• Every instruction must be concrete, practical, and reasonable for developers to 	accomplish.
The checklist needs continuous attention in order to remain relevant and up-to-date: recommendations change over time, internal systems are replaced by different sys‐tems, and areas of concern from previous launches become obsolete due to new poli‐cies and processes. LCEs curate the checklist continuously and make small updates when team members notice items that need to be modified. Once or twice a year a team member reviews the entire checklist to identify obsolete items, and then works with service owners and subject matter experts to modernize sections of the checklist.Driving Convergence and Simplification
In a large organization, engineers may not be aware of available infrastructure for common tasks (such as rate limiting). Lacking proper guidance, they’re likely to re-implement existing solutions. Converging on a set of common infrastructure libraries avoids this scenario, and provides obvious benefits to the company: it cuts down on duplicate effort, makes knowledge more easily transferable between services, and results in a higher level of engineering and service quality due to the concentrated attention given to infrastructure.Almost all groups at Google participate in a common launch process, which makes the launch checklist a vehicle for driving convergence on common infrastructure. Rather than implementing a custom solution, LCE can recommend existing infra‐structure as building blocks—infrastructure that is already hardened through years of experience and that can help mitigate capacity, performance, or scalability risks. Examples include common infrastructure for rate limiting or user quotas, pushing new data to servers, or releasing new versions of a binary. This type of standardiza‐tion helped to radically simplify the launch checklist: for example, long sections of the checklist dealing with requirements for rate limiting could be replaced with a single line that stated, “Implement rate limiting using system X.”Due to their breadth of experience across all of Google’s products, LCEs are also in a unique position to identify opportunities for simplification. While working on a launch, they witness the stumbling blocks firsthand: which parts of a launch are caus‐ing the most struggle, which steps take a disproportionate amount of time, which problems get solved independently over and over again in similar ways, where com‐mon infrastructure is lacking, or where duplication exists in common infrastructure.374  |  Chapter 27: Reliable Product Launches at Scale
LCEs have various ways to streamline the launch experience and act as advocates for the launching teams. For example, LCEs might work with the owners of a particularly arduous approval process to simplify their criteria and implement automatic appro‐vals for common cases. LCEs can also escalate pain points to the owners of common infrastructure and create a dialogue with the customers. By leveraging experience gained over the course of multiple previous launches, LCEs can devote more atten‐tion to individual concerns and suggestions.Launching the Unexpected
When a project enters into a new product space or vertical, an LCE may need to cre‐ate an appropriate checklist from scratch. Doing so often involves synthesizing expe‐rience from relevant domain experts. When drafting a new checklist, it can be helpful to structure the checklist around broad themes such as reliability, failure modes, and processes.For example, before launching Android, Google had rarely dealt with mass consumer devices with client-side logic that we didn’t directly control. While we can more or less easily fix a bug in Gmail within hours or days by pushing new versions of Java‐Script to browsers, such fixes aren’t an option with mobile devices. Therefore, LCEs working on mobile launches engaged mobile domain experts to determine which sec‐tions of existing checklists did or did not apply, and where new checklist questions were needed. In such conversations, it’s important to keep the intent of each question in mind in order to avoid mindlessly applying a concrete question or action item that’s not relevant to the design of the unique product being launched. An LCE facing an unusual launch must return to abstract first principles of how to execute a safe launch, then respecialize to make the checklist concrete and useful to developers.Developing a Launch Checklist
A checklist is instrumental to launching new services and products with reproducible reliability. Our launch checklist grew over time and was periodically curated by mem‐bers of the Launch Coordination Engineering team. The details of a launch checklist will be different for every company, because the specifics must be tailored to a compa‐ny’s internal services and infrastructure. In the following sections, we extract a num‐ber of themes from Google’s LCE checklists and provide examples of how such themes might be fleshed out.Architecture and Dependencies
An architecture review allows you to determine if the service is using shared infra‐structure correctly and identifies the owners of shared infrastructure as additional stakeholders in the launch. Google has a large number of internal services that are used as building blocks for new products. During later stages of capacity planning
Developing a Launch Checklist  |  375Developing a Launch Checklist  |  375
(see [Hix15a]), the list of dependencies identified in this section of the checklist can be used to make sure that every dependency is correctly provisioned.
Example checklist questions
• What is your request flow from user to frontend to backend?
• Are there different types of requests with different latency requirements?
Example action itemsExample action items
• Isolate user-facing requests from non user–facing requests.
• Validate request volume assumptions. One page view can turn into many 	requests.
Integration
Many companies’ services run in an internal ecosystem that entails guidelines on how to set up machines, configure new services, set up monitoring, integrate with load balancing, set up DNS addresses, and so forth. These internal ecosystems usually grow over time, and often have their own idiosyncrasies and pitfalls to navigate.Thus, this section of the checklist will vary widely from company to company.
Example action items
• Set up a new DNS name for your service.
• Set up load balancers to talk to your service.
• Set up monitoring for your new service.
Capacity PlanningNew features may exhibit a temporary increase in usage at launch that subsides within days. The type of workload or traffic mix from a launch spike could be sub‐stantially different from steady state, throwing off load test results. Public interest is notoriously hard to predict, and some Google products had to accommodate launch spikes up to 15 times higher than initially estimated. Launching initially in one region or country at a time helps develop the confidence to handle larger launches.Capacity interacts with redundancy and availability. For instance, if you need three replicated deployments to serve 100% of your traffic at peak, you need to maintain four or five deployments, one or two of which are redundant, in order to shield users from maintenance and unexpected malfunctions. Datacenter and network resources
376  |  Chapter 27: Reliable Product Launches at Scaleoften have a long lead time and need to be requested far enough in advance for your company to obtain them.
Example checklist questions
• Is this launch tied to a press release, advertisement, blog post, or other form of 	promotion?
• How much traffic and rate of growth do you expect during and after the launch?
• Have you obtained all the compute resources needed to support your traffic?Failure Modes
A systematic look at the possible failure modes of a new service ensures high reliabil‐ity from the start. In this portion of the checklist, examine each component and dependency and identify the impact of its failure. Can the service deal with individual machine failures? Datacenter outages? Network failures? How do we deal with bad input data? Are we prepared for the possibility of a denial-of-service (DoS) attack? Can the service continue serving in degraded mode if one of its dependencies fails? How do we deal with unavailability of a dependency upon startup of the service? During runtime?Example checklist questions
• Do you have any single points of failure in your design?
• How do you mitigate unavailability of your dependencies?
Example action items
• Implement request deadlines to avoid running out of resources for long-running 	requests.
• Implement load shedding to reject new requests early in overload situations.
Client BehaviorClient Behavior
On a traditional website, there is rarely a need to take abusive behavior from legiti‐mate users into account. When every request is triggered by a user action such as a click on a link, the request rates are limited by how quickly users can click. To double the load, the number of users would have to double.This axiom no longer holds when we consider clients that initiate actions without user input—for example, a cell phone app that periodically syncs its data into the
Developing a Launch Checklist  |  377
cloud, or a website that periodically refreshes. In either of these scenarios, abusive cli‐ent behavior can very easily threaten the stability of a service. (There is also the topic of protecting a service from abusive traffic such as scrapers and denial-of-service attacks—which is different from designing safe behavior for first-party clients.)Example checklist question
• Do you have auto-save/auto-complete/heartbeat functionality?
Example action items
• Make sure that your client backs off exponentially on failure.
• Make sure that you jitter automatic requests.
Processes and AutomationGoogle encourages engineers to use standard tools to automate common processes. However, automation is never perfect, and every service has processes that need to be executed by a human: creating a new release, moving the service to a different data center, restoring data from backups, and so on. For reliability reasons, we strive to minimize single points of failure, which include humans.These remaining processes should be documented before launch to ensure that the information is translated from an engineer’s mind onto paper while it is still fresh, and that it is available in an emergency. Processes should be documented in such a way that any team member can execute a given process in an emergency.
Example checklist question
• Are there any manual processes required to keep the service running?Example action items
• Document all manual processes.
• Document the process for moving your service to a new datacenter.
• Automate the process for building and releasing a new version.
Development Process
Google is an extensive user of version control, and almost all development processes are deeply integrated with the version control system. Many of our best practices378  |  Chapter 27: Reliable Product Launches at Scale
revolve around how to use the version control system effectively. For example, we perform most development on the mainline branch, but releases are built on separate branches per release. This setup makes it easy to fix bugs in a release without pulling in unrelated changes from the mainline.Google also uses version control for other purposes, such as storing configuration files. Many of the advantages of version control—history tracking, attributing changes to individuals, and code reviews—apply to configuration files as well. In some cases, we also propagate changes from the version control system to the live servers automatically, so that an engineer only needs to submit a change to make it go live.Example action items
• Check all code and configuration files into the version control system.
• Cut each release on a new release branch.
External DependenciesSometimes a launch depends on factors beyond company control. Identifying these factors allows you to mitigate the unpredictability they entail. For instance, the dependency may be a code library maintained by third parties, or a service or data provided by another company. When a vendor outage, bug, systematic error, security issue, or unexpected scalability limit actually occurs, prior planning will enable you to avert or mitigate damage to your users. In Google’s history of launches, we’ve used filtering and/or rewriting proxies, data transcoding pipelines, and caches to mitigate some of these risks.Example checklist questions
• What third-party code, data, services, or events does the service or the launch 	depend upon?
• Do any partners depend on your service? If so, do they need to be notified of 	your launch?
• What happens if you or the vendor can’t meet a hard launch deadline?
Rollout PlanningRollout Planning
In large distributed systems, few events happen instantaneously. For reasons of relia‐bility, such immediacy isn’t usually ideal anyway. A complicated launch might require enabling individual features on a number of different subsystems, and each of those configuration changes might take hours to complete. Having a working configuration