* * *
Cookie是以文件形式[缓存在客户端]的凭证(精简下为了通俗易懂)，cookie的生命周期主要在于服务器给设置的有效时间。如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。
这次我们以IE为例：
我们来创建一个Cookie：
    if(!"".equals(name)){
           Cookie cookies = new Cookie("name",name);//把用户名放到cookie
           cookies.setMaxAge(60*60*60*12*30) ;//设置cookie的有效期
    //     c1.setDomain(".ahack.net");//设置有效的域
           response.addCookie(cookies);//把Cookie保存到客户端
           out.println("当前登录:"+name);
    }else {
           out.println("用户名不能为空!");
    }
有些大牛级别的程序员直接把帐号密码明文存储到客户端的cookie里面去，不得不佩服其功力深厚啊。客户端直接记事本打开就能看到自己的帐号密码了。
继续读取Cookie：
我想cookie以明文的形式存储在客户端我就不用解释了吧？文件和数据摆在面前！
盗取cookie的最直接的方式就是xss，利用IE浏览器输出当前站点的cookie：
    javascript:document.write(document.cookie)
首先我们用FireFox创建cookie：  
然后TamperData修改Cookie：
一般来说直接把cookie发送给服务器服务器，程序员过度相信客户端cookie值那么我们就可以在不用知道用户名和密码的情况下登录后台，甚至是cookie注入。jsessionid也会放到cookie里面，所以拿到了cookie对应的也拿到了jsessionid，拿到了jsessionid就拿到了对应的会话当中的所有信息，而如果那个jsessionid恰好是管理员的呢？
### 0x03 HttpOnly
* * *
上面我们用
    javascript:document.write(document.cookie)
通过document对象能够拿到存储于客户端的cookie信息。
HttpOnly设置后再使用document.cookie去取cookie值就不行了。
通过添加HttpOnly以后会在原cookie后多出一个HttpOnly;
普通的cookie设置：
    Cookie: jsessionid=AS348AF929FK219CKA9FK3B79870H;
加上HttpOnly后的Cookie：
    Cookie: jsessionid=AS348AF929FK219CKA9FK3B79870H; HttpOnly;
（参考YearOfSecurityforJava）
在JAVAEE6的API里面已经有了直接设置HttpOnly的方法了：
API的对应说明：
大致的意思是：如果isHttpOnly被设置成true，那么cookie会被标识成HttpOnly.能够在一定程度上解决跨站脚本攻击。
在servlet3.0开始才支持直接通过setHttpOnly设置,其实就算不是JavaEE6也可以在set Cookie的时候加上HttpOnly;
让浏览器知道你的cookie需要以HttpOnly方式管理。而ng a
在新的Servlet当中不只是能够通过手动的去setHttpOnly还可以通过在web.xml当中添加cookie-config(HttpOnly默认开启,注意配置的是web-app_3_0.xsd):
                true
                true
            index.jsp
还可以设置下session有效期(30分)：
    30
### 0x04 CSRF (跨站域请求伪造)
* * *
CSRF（Cross Site Request Forgery,
跨站域请求伪造）用户请求伪造，以受害人的身份构造恶意请求。(经典解析参考：
)
#### CSRF 攻击的对象
在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie
骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie
的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行
CSRF 的保护。比如银行系统中转账的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF
攻击无法解析服务器返回的结果，无需保护。
#### Csrf攻击方式
对象：A：普通用户，B：攻击者
    1、假设A已经登录过xxx.com并且取得了合法的session，假设用户中心地址为：http://xxx.com/ucenter/index.do
    2、B想把A余额转到自己的账户上，但是B不知道A的密码，通过分析转账功能发现xxx.com网站存在CSRF攻击漏洞和XSS漏洞。
    3、B通过构建转账链接的URL如：http://xxx.com/ucenter/index.do?action=transfer&money=100000 &toUser=(B的帐号)，因为A已经登录了所以后端在验证身份信息的时候肯定能取得A的信息。B可以通过xss或在其他站点构建这样一个URL诱惑A去点击或触发Xss。一旦A用自己的合法身份去发送一个GET请求后A的100000元人民币就转到B账户去了。当然了在转账支付等操作时这种低级的安全问题一般都很少出现。
#### 防御CSRF：
    验证 HTTP Referer 字段
    在请求地址中添加 token 并验证
    在 HTTP 头中自定义属性并验证
    加验证码
     (copy防御CSRF毫无意义，参考上面给的IBM专题的URL)
最常见的做法是加token,Java里面典型的做法是用filter：(链接由plt提供，源码上面的在：)