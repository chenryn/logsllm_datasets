后执行也不会出错。如果按照一般的写法来写，那么删掉最后的col_4后，
SELECT子句的结尾会变成“co1_3，”，执行会出错。为了防止出错，还必
须手动地删除逗号才行。当然，“前置逗号”的写法在需要删除第一列时
也会有同样的间题，但是一般来说需要添加或删掉的大多是最后一列。写
在第一位的列很多时候都是重要的列，相对而言不会有很大的变动。
第二个好处是，每行中逗号都出现在同一列，因此使用Emacs等可以
进行矩形区域选择的编辑器就会非常方便操作。如果将逗号写在列后面，
那么逗号的列位置就会因列的长度不同而参差不齐。
除了这些好处，这种写法也有一个缺点，那就是可读性稍微差些。尤
注0
其是对初次见到这种写法的人来说，可能第一眼看到这段代码时会惊呼“这
在数据库学界，支持“后置写法”
的代表可能是 Joe Celko,
把退号放置在每行的站尾而不是
驰了吗？
开头。通号、分号、网号或句号
从视堂上表示某个内容的然束而
是的，这句批评刚好触及了痛点·。笔者能理解，改变已经习惯了的
不量开始。—摘白（SOL 编程
风格) (人民部电出质社, 2008
写法确实需要花费不少精力。也正因为如此，笔者才在本部分开头提及自
年1第28 页
这个现点正确与否我们暂且不
已其实也一度非常犹豫要不要讲这个话题。但是为了让大家理解“前置逗
管，至少它的论据是有问题的。
原因是， be Delko 把连接特和的
号”写法真的有很多好处，所以还是决定说了。不知各位读者有何感想呢？
止符弄属了。确买分号或句号是
表示语句婧束的终止符，但是道
号是一种连接符，用于连接要
不使用通配符
素，从这一点来说，退号的作用
与 AD 或 oR 等是一样的。因此
使用通配符（*）指定所有列后，表的全部列都会被选中。虽然这种写
将道号写在行的开头也没什公奇
法很方便，但最好还是不要这样做。使用通配符后查出的结果中会包含理
性的。
论上来说并不需要的列，不仅会降低代码的可读性，也不利于需求变更。
---
## Page 223
210—第1章神奇的SOL
而且，因为结果的格式依赖于列的排列顺序，所以修改表中列的排列顺序，
或者添加、修改列就会导致结果的格式发生变化。
SELECT * FROM SoneTablej
SELECT col_1, col2, co13 .. FROM SomeTable/
所以，尽管有些麻烦，但大家还是只把需要的列写在SELBCT子句里吧。
ORDERBY中不使用列编号
在ORDERBY子句中，我们可以使用列的编号代替实际的列名，作为
排序的列来使用。在动态生成SQL等情况下，这是很有用的功能，但是
这样的代码可读性很不好。而且这个功能在SQL-92中已经被列为了“未
来会被删除的功能”。因此保守一点来讲，最好不要使用它。和前面讲过
的通配符一样，一般来说会受列的顺序和位置影响的写法都应该避免，这
也是一条铁律。
+
SELECT col_1, col2 FROM SomeTable ORDER BY 1, 21
SELECT col_1, col2 FROM SomeTable ORDER BY col_1, col21
SQL编程方法
请说普通话
SQL是一种有多种方言的语言，各种数据库实现都为我们做了各种
扩展（不管是好的还是坏的）。SQL官方其实已经制定了标准语法（当前
注0
最新的是SQL：2003），但是并没能做出多少推动统一的努力。关于这一点，
已更新至 50L:2016, —评者注
这是本书写作时的最新低本, 规在
也有一些历史原因。过去的标准SQL很弱，并没有达到实用的程度，很
多数据库厂商不得不自已扩展标准SQL中没有的功能。
但是，近年标准SQL越来越完善，也越来越实用了.如果还继续使
用各种数据库的方言进行编程，就会出现很难像PostgreSQL→Oracle、
换到不熟悉的DBMS后会很不习惯新的编程环境。
这些间题只需要稍微注意一下就可以避免，所以大家还是在日常开发
中养成使用标准语法的习惯吧。下面列出了几个需要注意的地方。
图灵社区会员非洲铜(PI:EMAIL)专享尊重版权
---
## Page 224
1-12SOL编程方法—21】
1.不使用依赖各种数据库实现的函数和运算符
很多依赖数据库实现的函数都是转换函数或字符串处理函数。不要
使用这些函数： DECODE(Oracle)、IF(MySQL)、NVL(Oracle)、STUFF(SQL
Server)等。请使用CASB表达式或者COALESCE、NULLIF 等标准函数代替
它们。此外，像SIGN或ABS、REPLACE这些，虽然标准 SQL没有定义它们，
但是几乎所有的数据库都实现了它们，所以使用一下也没关系。
让人头疼的是标准SQL中有定义，但是各数据库实现情况不同的功
能。例如日期函数EXTRACT，以及用于字符串连接的运算符“II”或者
POSITION函数。这些函数的使用频率都很高，但是请记住，使用它们会
导致代码的可移植性变差（解决这个间题，我们就需要期待各数据库厂商
的推动了）
2.连接操作使用标准语法
在SQL的语法中，依赖数据库实现最严重的是连接语句。在很早的
时候，连接条件和普通的查询条件一样，都是写在WHERE子句里的。
SELECT *
MHERB F.state - B.state
FROM Foo F, Bar B
AXD F.city-东京’
标准SQL使用INNER或CROSS等表明连接类型的关键字，连接条件
可以使用oN子句分开写。
-内连接，而且一眼就能看明白连接条件是F.atate·B.atate
SELECT *
E XEE NIOr HENNI d 0OA OB
ON F.atate = B.atate
HHERE F.city -·东京;
这样写的话，一眼就能看明白连接的类型和条件，代码可读性很好。
外连接请使用LBFT OUTER JOIN、RIGHT OUTER JOIN或者 FULL
OUTERJOIN来写.使用（+1运算符（Oracle)、*-运算符（SQL Server)等
依赖数据库实现的写法会降低代码的可移植性，而且表达能力也有限，所
以还是尽量避免吧。标准SQL中允许省略关键字OUTER，但是这个关键
字便于我们理解它是外连接而非内连接，所以还是写上吧。
---
## Page 225
212—第1章神奇的SQL
“左派”和“右派”
外连接有左连接、右连接和全连接三种类型。其中，左连接和右连接
的表达能力是一样的，理论上讲使用哪个都可以。
但是笔者认为，在代码风格方面，左连接有一个优势：一般情况下表
头都出现在左边（笔者没遇见过表头出现在右边的情况）。使用左边的表
作为主表的话，SQL就能和执行结果在格式上保持一致。这样一来，在看
到SQL语句时，我们很容易就能想象出执行结果的格式。事实上，看看
其他介绍SQL的书也能发现，绝大多数示例都会选择使用左连接，大概
作者们也是出于同样的考虑。
一般表头都在左边
表头在右边的话看起来有点奇怪
点岁
北海道
北海道
青森
青森
秋田
秋田
新河
新泻
至于为什么表头一般都在左侧，笔者觉得原因可能是我们的眼晴一般
都是从左上角开始浏览信息的（可以想象一下自己站在自动贩卖机前时的
注0
视线移动方向）
如果堪续追网“为什么人的跟靖
从左边而不从右边开始测览笔”。
那么可解就会没完没了，所以我
从FROM子句开始写
们就到此为上吧。
这部分内容可能有点多余，如果大家觉得值得参考，那么可以试
一下。
大家在写SQL语句时，是按照什么顺序写的呢？笔者想，大部分人
都会说是从SELECT子句开始写的。他们可能会觉得“SBLECT子句在开头，
难道不该从它开始写吗？
当然，从SBLECT子句开始写也没间题。比如对于一共10行左右的
SQL语句，不管从哪里开始写都没太大的差别。但是以笔者的经验，如果
图灵社区会员非洲铜（PI:EMAIL）专享尊重版权
---
## Page 226
1-12SOL填程方法—213
SQL语句很长或者很复杂，这种写法就会耗费很多时间，而且写出的代码
很难阅读。
原因是SELECT子句是SQL语句中最后执行的部分，写的时候根本没
有必要太在意。
SQL 中各部分的执行顺序是：FROM → WHERE→ GROUP BY → HAVING →
SELECT{→ORDER BY]。严格地说，ORDER BY并不是SQL 语句的一部分，
注0
因此可以排除在外。这样一来，SELECT就是最后才被执行的部分了·。
这出是在 &ELECP子句中为列起
的别名无法在 akoCP BT 子句中
SELECT子句的主要作用是完成列的格式转换和计算，并没有做很多
使用的原因。但是也有支持在
aR0U9 BT 子句中使用在 s8L8cT
工作，用做菜来类比的话就像是最后添加调料的环节。因为它总是出现在
子句中为列起的别名的致据库，
评情读参考 1-1 节。
最开始的位置，所以很容易引起人们的注意，但是在考虑具体逻辑的时候，
我们完全可以先忽略它。相对而言，WHERE、GROUP BY和HAVING等起到
的作用更重要一些。
因此，如果需要写很复杂的SQL语句，可以考虑按照执行顺序从
FROM子句开始写，这样添加逻辑时更加自然。即使不知道在SELBCT子句
里写什么，也肯定知道应该在FROM子句中写些什么（如果不知道，那么
说明表的结构还没有确定，因此应该先完成表的设计，然后再考虑SQL
语句）。
如果把从SBLECT子句开始写的方法称为自顶向下法，那么从FRON
子句开始写的方法就可以称为自底向上法。用C语言来类比的话，从
main函数开始写，逐步完成各个模块的方法是自顶向下法，而先写各个
模块，再组装到一起的方法就是自底向上法。虽然面向过程语言中的模块
和SQL中的“子句”（clause）并不能完全对等，但是笔者认为这个道理
注9
大家应该能明白·
“从, PRN子句开始写”的想法
通于 Jbonathen Gemmiok 的 文 童
An Jncnerenta7 Appnoach to
Devebping SOL Quenles ( httpu/)
本节小结
笔者也从这其文童中受到了很大
fenm1dk.com/fincreeerta Uht:=1 L,
也许各位读者已经注意到了，本节内容和前面各节风格不太一样。“风
的R 。 Jorethan Bennidk 还为
这种方迷起了个名字。叫作“来
格不太一样”这种说法有些委婉，直截了当地说，其实本节内容与前面各
进活* I [Inonanesta1 Aprsach 
节相互矛盾。前面各节介绍的很多技巧都为了追求效率而牺牲了可读性。
但是到了本节，唯沫星子还没干呢就反过来说不能为了效率而牺牲可读性，
这难道不是相互矛盾的吗？其实，可读性和效率并非水火不容的关系，有
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 227
214—第1章神奇的SOL
些时候鱼和熊掌是可以兼得的。但是，大部分情况下，我们还是很难兼顾
两者。
如果要问笔者倾向于哪一边，不用说，肯定是本节强调的可读性。原
因很简单，如果硬件和数据库本身的性能提升了，即使我们不对SQL做
什么优化，性能也能得到提升。相反，代码难读的问题没有谁能帮我们解
决，能保证代码可读性的只有开发者自己。因此当需要从两者中做出选择
时，笔者会毫不犹豫地选择可读性。
性能优化是一个非常有趣的领域，将耗费1小时的查询优化到只需要
1分钟，是一件很有成就感的事情。但是笔者还是认为，既然编程是一种
沟通手段，那么每个开发者就有义务保证自已写出的代码表达清晰，具有
很好的可读性。
如果想更进一步了解SQL的编程方法，请参考下面的资料。
1.JoeCelko，《SQL编程风格》（人民邮电出版杜，2008年）
该书并不直接介绍SQL的具体技术，而是重点介绍程序设计相关的知
识和代码风格，涵盖了表和列的命名规则、代码风格、糟糕的表设计
案例、视图和存储过程的用法，以及集合论思路等丰富的内容，是应该
人手一册的好书。特别是第6章“编码选择”、第10章“以SQL的方
式思考”，推荐所有数据库工程师都阅读一下。
2.Brian W.Kemighan、P.J.Plauger，《编程格调》（人民邮电出版社，2015 年）
该书是关于代码风格的经典书。书非常老，而且用的都是面向过程语言
的示例代码，但是里边的很多内容直到现在还能带给我们启发。其中的
基本思想在思考SQL的代码风格时也是有用的，这一点让笔者很震惊。
这正说明，这本书真的深入到了编程的核心本质。
图灵社区会员 非洲钢(PI:EMAIL) 专享 尊重版权
---
## Page 228
2
第
章
关系数据库的世界
2-1
关系数据库的历史
2-7
SOL和退归集合
2-2
为什么叫“美系”模型
2-8
人类的逻辑学
2-3
开始于关系，结束于美系
2-9
消灭NULL委员会
2
地址这一巨大的怪物
2-10
SQL中的层级
2-5
GROUP BYOPARTTION BY
2-6
从面向过程思维向声明式
思维。面向集合思维转变
的7个关键点
---
## Page 229
216—第2章关系数据库的世界
S
2
关系数据库的历史
1969年
一切从这里开始
关系数据库从诞生至今已经有四十多年，现在依然拥有着巨大的市场规模。对于关系数据库，我们
一直以来都习以为常地在日常工作中使用着。本章将稍微深入探究一下关系数据库的诞生以及发展史。
写在前面
说到关系数据库的历史时，必须第一个提到的人是关系模型的创始人
E.F.Codd（1923一2003）。他已经辞世，所以我们再也不能向他请教与关
系数据库相关的知识了，但是，他的影响力丝毫没有减弱。笔者想，也许
在关系数据库被其他某种数据库完全取代之前，他的影响力都不会消失。
Codd从牛津大学数学专业毕业后，作为英国空军的飞行员参加了第
二次世界大战，战后去往美国，加入IBM公司开始从事开发工作。他在
注0
1969年发表了论文《大型数据库中关系存储的可推导性、余与一致性》。
原论文题为 Dorlabrlty Rerdrndngc
artd Cnsistency of Reetion Stored
这篇里程碑式的论文奠定了关系模型的理论基础。
 Uirge DMks Bnks，尚无中文
原。—编者注
在本节中，我们将一起学习一下Codd这篇论文的一些要点，从而了
解一下它的历史意义。当然，讲述关系数据库的历史时，以阅读这篇论文
之后深受启发的年轻工程师们（例如Oracle的创始人拉里·埃里森）为
核心，讲述他们创造出一个个优秀数据库的故事也是很有趣的，但是限于