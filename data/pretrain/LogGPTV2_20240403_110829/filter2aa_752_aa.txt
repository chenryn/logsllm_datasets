Advanced Linux Programming 
高级 Linux 程序设计 
卷 I 
网址 
http://www.AdvancedLinuxProgramming.com
译者 
完美废人 
网址 
http://blog.csdn.net/Wolf0403
作者 
Mark Mitchell 
Jeffrey Oldham 
Alex Samuel 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
谨以此书献给 四月 
你是我生命中的奇迹 
www.AdvancedLinuxProgramming.com 
2
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
译者序 
在 CSDN 论坛潜水多年，看同学们讨论学习 C++ 的书籍的选择的时候，总是对那
些经典大部头有种本能的恐惧。我自己也是一样。在学习 Linux 编程的开始时候，我曾
在 Richard Stevens 的经典著作面前徘徊不前。很幸运的，有朋友向我推荐了这本
Advanced Linux Programming。它内容浅显语言生动，很快带领我进入了 Linux 程序设
计的殿堂。之后再阅读 Stevens 等大师的著作也便不再显得生涩而困难。 
但是，当我向其他朋友推荐这本书的时候，却往往因为语言的关系而被婉拒。这样
一本优秀的入门读物无法在广大以中文为母语的学生中无法普及，实在是一件莫大的憾
事。于是我就有了翻译这本书的念头。 
在这里我首先希望对原书的三位作者表示感谢，感谢他们写了，并以无私的精神免
费公开了，这样一本优秀的技术书籍。 
其次，我想感谢几位朋友为本书的翻译、校对过程作出的贡献，他们是：CSDN 论
坛的无锋之刃、猪头流氓、标准 C 匪徒、hellwolf，老兵团的超越无限。尤其感谢四月：
可以说，没有你，就不会有这卷中文译本的诞生。 
译本与原书一样，按照Open Publication License v1.0 发行。OPL全文可以从
http://www.opencontent.org/openpub/ 找到。欢迎将本书在网上复制分发，但请保留原作
者与译者的版权信息。如有平面媒体愿意出版或刊载本书的全部（仅卷I或全书）或部
分，请与我联系。 
姓名：高远 
昵称：完美废人 
主页：http://blog.csdn.net/Wolf0403
电子信箱：PI:EMAIL 
谢谢！ 
www.AdvancedLinuxProgramming.com 
3
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
Linux 系统中的高级 UNIX 编程 
1 起步 
2 编写优质 GNU/Linux 软件 
3 进程 
4 线程 
5 进程间通信 
www.AdvancedLinuxProgramming.com 
4
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
第一章：起步 
本章将向你展示如何在 Linux 系统中完成一个 C/C++ 程序的基本步骤。具体来说，本
章讲解了如何在 Linux 系统中编辑 C 和 C++ 源码，编译并调试得到的程序。如果你已经对
Linux 环境下的程序编写相当熟悉，则完全可以跳过本章内容，直接开始阅读第二章，“编
写优质的 GNU/Linux 软件”。第二章中 2.3 节“编写及使用程序库”中包含了对静态和动态
库的比较，这也许是你还不知道的内容，值得关注。 
我们在编写本书的时候，假定你已经对 C 或 C++ 程序设计语言以及标准 C 库的函数相
当熟悉。除了为展示有关 C++ 独有的特性的情况时，书中的示例代码均用 C 语言写就。同
时，我们还假定你知道如何在 Linux shell 中执行一些基本操作，例如创建文件夹和复制文件
等。因为许多 Linux 程序员都是在 Windows 环境下开始的编程，我们会在一些时候特别指
出两个平台上的不同点。 
1.1 用 Emacs 进行编辑 
编辑器（editor）是用于编辑代码的工具程序。Linux 平台上有各种不同的编辑器，但是
最流行的、提供了最丰富特色的，当属 GNU Emacs 了。 
关于 Emacs 
Emacs 决不仅仅是一个编辑器。它是一个出奇强大的程序。在 CodeSourcery，
它被亲切地称为“the One True Program”
（译者注：记得 Matrix 里的 The One 吧^_^）
或者直接简称 OTP。在 Emacs 中你可以查阅、发送电子邮件，你可以将 Emacs 进
行任意的定制与扩充；可能性太多以至于不适合在这里进行讨论了。你甚至可以
在 Emacs 中浏览网页！ 
如果你熟悉其它的编辑器，你当然可以选择使用它们。本书中的任何内容都不会依赖
Emacs 的特性。不过，如果你仍然没有一个习惯使用的 Linux 下的编辑器，那么你应该跟随
这篇不长的教程，尝试学习一下 Emacs 的使用。 
如果你喜欢 Emacs 并希望对它的高级特性了解得更多，你或许应该考虑阅读其它一些
关于 Emacs 的书籍。有一篇非常不错的教程，《学习 Emacs》（Learning GNU Emacs），作者
是 Debra Cameron、Bill Rosenblatt 和 Eric S. Raymond（O’Reilly 公司于 1996 年出版。该书
已由机械工业出版社翻译并出版，书名《学习 GNU Emacs（第二版）》）。 
1.1.1 打开 C/C++代码文件 
要运行Emacs，你只需在终端窗口中输入emacs并回车。当Emacs开始运行之后，你可以
利用窗口顶部的菜单创建一个新的文件。点击“文件File”菜单，选择“打开文件Open Files”，
然后在窗口底部的“minibuffer”中输入你希望打开的文件的名字。1如果你要创建的是一篇
C 代 码 ， 则 后 缀 名 应 该 选 择  .c 或  .h 。 如 果 创 建 的 是 C++ 代 码 ， 后 缀 名 应
在 .cpp、.hpp、.cxx、.hxx、.C或者 .H中选择。当文件被打开之后，你可以像是使用其它
任何字处理程序一样进行输入。保存文件只需要从文件菜单中选择“保存缓冲区Save Buffer”
即可。当你准备退出Emacs的时候，只需从文件菜单选择“退出Emacs Exit Emacs”就可以。 
www.AdvancedLinuxProgramming.com 
5
1 如果你不是在X窗口系统中使用Emacs，你需要通过F10 键来访问菜单。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
如果你不喜欢用鼠标指点江山，你可以选择使用键盘快捷键完成这些操作。输入 C-x C-f
可以打开文件（C-x 的意思是按下 Ctrl 键的同时按 x 键）。C-x C-s 是保存文件，而 C-x C-c
则是退出 Emacs。想要进一步熟悉 Emacs，可以从帮助菜单中选择 Emacs 指南（Emacs 
Tutorial）。这份文档中提供了无数帮助你更快捷有效地使用 Emacs 的技巧。 
1.1.2 自动化排版 
如果你已经习惯了在集成开发环境（Integrated Development Environment, IDE）中编写
程序，你一定乐意由编辑器自动帮助你对代码进行排版。Emacs 同样提供了这种功能。当你
打开一个 C/C++ 代码的时候，Emacs 自动识别出这是一篇代码而不仅是普通文本文件。当
你在一个空行中点下 Tab 键的时候，Emacs 会将光标移动到合适的缩进位置。如果你在一个
已经包含了内容的行中点击 Tab 键，Emacs 会将该行文字缩进到合适的地方。假设你输入了
下面几行文字： 
int main () 
{ 
printf (“Hello, world\n”); 
} 
当你在调用 printf 的一行点下 Tab 键的时候，Emacs 会将代码重新排版成这个样式： 
int main () 
{ 
  printf (“Hello, world\n”); 
} 
注意中间一行被添加了合适的缩进。 
当你更多地使用Emacs之后，你会发现它会帮你解决各种复杂的排版问题。如果你有兴
趣，你甚至可以对Emacs进行程序控制，让它完成任何你可以想象得到的自动排版工作。人
们利用Emacs的这个能力，为几乎任何种类的文档实现了Emacs编辑模式，甚至实现了游戏2
和数据库前端。 
1.1.3 语法高亮 
除了对代码进行排版，Emacs 可以通过对 C 或 C++ 程序的不同元素加以染色以方便阅
读。例如，Emacs 可以将关键字转为一种颜色，int 等内置类型使用第二种颜色，而对注释
使用第三种颜色等。通过染色，你可以很轻松地发现一些简单的语法错误。 
最简单的打开语法染色功能的途径是在 ~/.emacs 文件中插入下面一行文字： 
(global-font-lock-mode t) 
将这个文件保存，然后退出并重新启动 Emacs，再打开那些 C/C++ 代码，开始享受吧！ 
你可能注意到，刚才插入 .emacs 文件的文字看起来像是 LISP 程序语言的代码。这是
因为，那根本就是 LISP 代码！Emacs 的很大部分都是用 LISP 实现的。你可以通过编写 LISP
代码为 Emacs 加入更多的功能。 
www.AdvancedLinuxProgramming.com 
6
2如果你对那些老式的文本模式冒险游戏有兴趣的话，试着运行M-x dunnet命令。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
1.2 用 GCC 编译 
编译器可以将人类可读的程序代码转化为机器可以解析执行的对象代码。Linux系统中
提供的编译器全部来自GNU编译器集合（GNU Compiler Collection），通常被称为GCC。3 GCC
中包含了C、C++、Java、Objective-C、Fortran和Chill语言的编译器。本书中我们主要关注的
是C和C++ 语言的程序设计。 
假设你有一个项目，其中包含一个如列表 1.2 中所示的C++ 程序（reciprocal.cpp）和
一个如列表 1.1 所示的C程序（main.c）。这两个文件需要被编译并链接成为一个单独的程序
reciprocal。4 这个程序可以计算一个整数的倒数。 
代码列表 1.1 （main.c）C 源码——main.c 
#include  
#include  
#include “reciprocal.hpp” 
int main (int argc, char **argv) 
{ 
  int i; 
  i = atoi (argv[1]); 
  printf (“The reciprocal of %d is %g\n”, i, reciprocal (i)); 
  return 0; 
} 
代码列表 1.2 （reciprocal.cpp）C++源码——reciprocal.cpp 
#include  
#include “reciprocal.hpp” 
double reciprocal (int i) { 
  // i 不能为 0 
  assert (i != 0); 
  return 1.0/i; 
} 
还有一个包含文件 reciprocal.hpp（列表 1.3 中）。 
代码列表 1.3 （reciprocal.hpp）包含文件——reciprocal.hpp 
www.AdvancedLinuxProgramming.com 
7
3 请访问http://gcc.gnu.org 获取更多GCC相关的信息。 
4 在Windows系统中，可执行程序的名称通常以 .exe结尾，而在Linux中通常没有后缀名。因此在Windows
中，这个程序可能被称为reciprocal.exe而Linux版本则是简单的reciprocal。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
#ifdef __cplusplus 
extern “C” { 
#endif 
extern  double reciprocal (int i); 
#ifdef __cplusplus 
} 
#endif 
我们要做的第一步，就是将代码文件转化为对象文件。 
1.2.1 编译单个代码文件 
C 程序编译器是 gcc。可以通过指定 –c 选项编译 C 源码文件。因此，输入下面这一条
命令可以将 main.c 文件编译成名为 main.o 的对象文件： 
% gcc –c main.c 
C++编译器是 g++。它的操作方式与 gcc 非常相似。下面一行命令可以完成对
reciprocal.cpp 的编译： 
% g++ -c reciprocal.cpp 
在这里，选项 –c 通知编译器只产生对象文件；否则编译器会尝试链接程序并产生最终
的可执行文件。在执行完第二个命令之后你应该得到的是一个名为 reciprocal.o 的对象文件。 
要构建一个大型的程序，你可能还需要熟悉其它一些选项。-I 选项会告诉编译器去哪里
寻找包含文件。默认情况下，GCC 会在当前目录及标准库的包含文件所在的路径搜索程序
所需的包含文件。如果你需要从其它的路径中搜索包含文件，你就需要通过 –I 选项指定这
个路径。假设你的项目中包含一个用于保存源码文件的 src 目录，以及一个用于存放包含文