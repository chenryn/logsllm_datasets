  目录
-   [1 通用安全指南](#1)
    *   [I. C/C++使用错误](#1.1)
		+   [1.1 不得直接使用无长度限制的字符拷贝函数](#1.1.1)
		+   [1.2 创建进程类的函数的安全规范](#1.1.2)
		+   [1.3 尽量减少使用 _alloca 和可变长度数组](#1.1.3)
		+   [1.4 printf系列参数必须对应](#1.1.4)
		+   [1.5 防止泄露指针（包括%p）的值](#1.1.5)
		+   [1.6 不应当把用户可修改的字符串作为printf系列函数的“format”参数](#1.1.6)
		+   [1.7 对数组delete时需要使用delete[]](#1.1.7)
		+   [1.8 注意隐式符号转换](#1.1.8)
		+   [1.9 注意八进制问题](#1.1.9)
    *   [II. 不推荐的编程习惯](#1.2)
		+   [2.1 switch中应有default](#1.2.1)
		+   [2.2 不应当在Debug或错误信息中提供过多内容](#1.2.2)
		+   [2.3 不应该在客户端代码中硬编码对称加密秘钥](#1.2.3)
		+   [2.4 返回栈上变量的地址](#1.2.4)
		+   [2.5 有逻辑联系的数组必须仔细检查](#1.2.5)
		+   [2.6 避免函数的声明和实现不同](#1.2.6)
		+   [2.7 检查复制粘贴的重复代码](#1.2.7)
		+   [2.8 左右一致的重复判断/永远为真或假的判断](#1.2.8)
		+   [2.9 函数每个分支都应有返回值](#1.2.9)
		+   [2.10 不得使用栈上未初始化的变量](#1.2.10)
		+   [2.11 不得直接使用刚分配的未初始化的内存（如realloc）](#1.2.11)
		+   [2.12 校验内存相关函数的返回值](#1.2.12)
		+   [2.13 不要在if里面赋值](#1.2.13)
		+   [2.14 确认if里面的按位操作](#1.2.14)
    *   [III. 多线程](#1.3)
		+   [3.1 变量应确保线程安全性](#1.3.1) 
		+   [3.2 注意signal handler导致的条件竞争](#1.3.2) 
		+   [3.3 注意Time-of-check Time-of-use条件竞争](#1.3.3)
    *   [IV. 加密解密](#1.4)
		+   [4.1 不得明文存储用户密码等敏感数据](#1.4.1) 
		+   [4.2 内存中的用户密码等敏感数据应该安全抹除](#1.4.2) 
		+   [4.3 rand() 类函数应正确初始化](#1.4.3)
		+   [4.4 在需要高强度安全加密时不应使用弱PRNG函数](#1.4.4)
		+   [4.5 自己实现的rand范围不应过小](#1.4.5)
    *   [V. 文件操作](#1.5)
		+   [5.1 避免路径穿越问题](#1.5.1)
		+   [5.2 避免相对路径导致的安全问题](#1.5.2)
		+   [5.3 文件权限控制](#1.5.3)
    *   [Ⅵ. 内存操作](#1.6)
		+   [6.1 防止各种越界写](#1.6.1)
		+   [6.2 防止任意地址写](#1.6.2)
    *   [Ⅶ. 数字操作](#1.7)
		+   [7.1 防止整数溢出](#1.7.1)
		+   [7.2 防止Off-By-One](#1.7.2)
		+   [7.3 避免大小端错误](#1.7.3)
		+   [7.4 检查除以零异常](#1.7.4)
		+   [7.5 防止数字类型的错误强转](#1.7.5)
		+   [7.6 比较数据大小时加上最小/最大值的校验](#1.7.6)
    *   [Ⅷ. 指针操作](#1.8)
		+   [8.1 检查在pointer上使用sizeof](#1.8.1) 
		+   [8.2 检查直接将数组和0比较的代码](#1.8.2) 
		+   [8.3 不应当向指针赋予写死的地址](#1.8.3)
		+   [8.4 检查空指针](#1.8.4)
		+   [8.5 释放完后置空指针](#1.8.5)
		+   [8.6 防止错误的类型转换](#1.8.6)
		+   [8.7 智能指针使用安全](#1.8.7)
## 通用安全指南
### 1 C/C++使用错误
#### 1.1  【必须】不得直接使用无长度限制的字符拷贝函数
不应直接使用legacy的字符串拷贝、输入函数，如strcpy、strcat、sprintf、wcscpy、mbscpy等，这些函数的特征是：可以输出一长串字符串，而不限制长度。如果环境允许，应当使用其_s安全版本替代，或者使用n版本函数（如：snprintf，vsnprintf）。
若使用形如sscanf之类的函数时，在处理字符串输入时应当通过%10s这样的方式来严格限制字符串长度，同时确保字符串末尾有\0。如果环境允许，应当使用_s安全版本。
但是注意，虽然MSVC 2015时默认引入结尾为0版本的`snprintf`（行为等同于C99定义的`snprintf`）。但更早期的版本中，MSVC的`snprintf`可能是`_snprintf`的宏。而`_snprintf`是不保证\0结尾的（见本节后半部分）。
```c++
（MSVC）
Beginning with the UCRT in Visual Studio 2015 and Windows 10, snprintf is no longer identical to _snprintf. The snprintf function behavior is now C99 standard compliant.
从Visual Studio 2015和Windows 10中的UCRT开始，snprintf不再与_snprintf相同。snprintf函数行为现在符合C99标准。
请参考：https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l?redirectedfrom=MSDN&view=vs-2019
```
因此，在使用n系列拷贝函数时，要确保正确计算缓冲区长度，同时，如果你不确定是否代码在各个编译器下都能确保末尾有0时，建议可以适当增加1字节输入缓冲区，并将其置为\0，以保证输出的字符串结尾一定有\0。
```c++
// Good
char buf[101] = {0};
snprintf(buf, sizeof(buf) - 1, "foobar ...", ...);
```
一些需要注意的函数，例如`strncpy`和`_snprintf`是不安全的。 `strncpy`不应当被视为`strcpy`的n系列函数，它只是恰巧与其他n系列函数名字很像而已。`strncpy`在复制时，如果复制的长度超过n，不会在结尾补\0。
同样，MSVC `_snprintf`系列函数在超过或等于n时也不会以0结尾。如果后续使用非0结尾的字符串，可能泄露相邻的内容或者导致程序崩溃。
```c++
// Bad
char a[4] = {0};
_snprintf(a, 4, "%s", "AAAA");
foo = strlen(a);
```
上述代码在MSVC中执行后， a[4] == 'A'，因此字符串未以0结尾。a的内容是"AAAA"，调用`strlen(a)`则会越界访问。因此，正确的操作举例如下：
```c++
// Good
char a[4] = {0};
_snprintf(a, sizeof(a), "%s", "AAAA");
a[sizeof(a) - 1] = '\0';
foo = strlen(a);
```
在 C++ 中，强烈建议用 `string`、`vector` 等更高封装层次的基础组件代替原始指针和动态数组，对提高代码的可读性和安全性都有很大的帮助。
关联漏洞:
`中风险-信息泄露`
`低风险-拒绝服务`
`高风险-缓冲区溢出`
#### 1.2  【必须】创建进程类的函数的安全规范
system、WinExec、CreateProcess、ShellExecute等启动进程类的函数，需要严格检查其参数。
启动进程需要加上双引号，错误例子：
```c++
// Bad
WinExec("D:\\program files\\my folder\\foobar.exe", SW_SHOW);
```
当存在`D:\program files\my.exe`的时候，my.exe会被启动。而foobar.exe不会启动。
```c++
// Good
WinExec("\"D:\\program files\\my folder\\foobar.exe\"", SW_SHOW);
```
另外，如果启动时从用户输入、环境变量读取组合命令行时，还需要注意是否可能存在命令注入。
```c++
// Bad
std::string cmdline = "calc ";
cmdline += user_input;
system(cmdline.c_str());
```
比如，当用户输入`1+1 && ls`时，执行的实际上是calc 1+1和ls 两个命令，导致命令注入。
需要检查用户输入是否含有非法数据。
```c++
// Good
std::string cmdline = "ls ";
cmdline += user_input;
if(cmdline.find_first_not_of("1234567890.+-*/e ") == std::string::npos)
  system(cmdline.c_str());
else
  warning(...);
```
关联漏洞:
`高风险-代码执行`
`高风险-权限提升`
#### 1.3  【必须】尽量减少使用 _alloca 和可变长度数组
_alloca 和[可变长度数组](https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84)使用的内存量在编译期间不可知。尤其是在循环中使用时，根据编译器的实现不同，可能会导致：（1）栈溢出，即拒绝服务； （2）缺少栈内存测试的编译器实现可能导致申请到非栈内存，并导致内存损坏。这在栈比较小的程序上，例如IoT设备固件上影响尤为大。对于 C++，可变长度数组也属于非标准扩展，在代码规范中禁止使用。
错误示例：
```c++
// Bad
for (int i = 0; i 
#### 1.4  【必须】printf系列参数必须对应
所有printf系列函数，如sprintf，snprintf，vprintf等必须对应控制符号和参数。
错误示例：
```c++
// Bad
const int buf_size = 1000;
char buffer_send_to_remote_client[buf_size] = {0};
snprintf(buffer_send_to_remote_client, buf_size, "%d: %p", id, some_string);  // %p 应为 %s
buffer_send_to_remote_client[buf_size - 1] = '\0';
send_to_remote(buffer_send_to_remote_client);
```
正确示例：
```c++
// Good
const int buf_size = 1000;
char buffer_send_to_remote_client[buf_size] = {0};
snprintf(buffer_send_to_remote_client, buf_size, "%d: %s", id, some_string);
buffer_send_to_remote_client[buf_size - 1] = '\0';
send_to_remote(buffer_send_to_remote_client);
```
前者可能会让client的攻击者获取部分服务器的原始指针地址，可以用于破坏ASLR保护。
关联漏洞:
`中风险-信息泄露`
#### 1.5  【必须】防止泄露指针（包括%p）的值
所有printf系列函数，要防止格式化完的字符串泄露程序布局信息。例如，如果将带有%p的字符串泄露给程序，则可能会破坏ASLR的防护效果。使得攻击者更容易攻破程序。
%p的值只应当在程序内使用，而不应当输出到外部或被外部以某种方式获取。
错误示例：
```c++
// Bad
// 如果这是暴露给客户的一个API：
uint64_t GetUniqueObjectId(const Foo* pobject) {
  return (uint64_t)pobject;
}
```
正确示例：
```c++
// Good
uint64_t g_object_id = 0;
void Foo::Foo() {
  this->object_id_ = g_object_id++;
}
// 如果这是暴露给客户的一个API：
uint64_t GetUniqueObjectId(const Foo* object) {
  if (object)
    return object->object_id_;
  else
    error(...);
}
```
关联漏洞:
`中风险-信息泄露`
#### 1.6  【必须】不应当把用户可修改的字符串作为printf系列函数的“format”参数
如果用户可以控制字符串，则通过 %n %p 等内容，最坏情况下可以直接执行任意恶意代码。
在以下情况尤其需要注意： WIFI名，设备名……
错误：
```c++
snprintf(buf, sizeof(buf), wifi_name);
```
正确：
```c++
snprinf(buf, sizeof(buf), "%s", wifi_name);
```
关联漏洞:
`高风险-代码执行`
`高风险-内存破坏`
`中风险-信息泄露`
`低风险-拒绝服务`
#### 1.7 【必须】对数组delete时需要使用delete[]
delete []操作符用于删除数组。delete操作符用于删除非数组对象。它们分别调用operator delete[]和operator delete。
```c++
// Bad
Foo* b = new Foo[5];
delete b;  // trigger assert in DEBUG mode
```
在new[]返回的指针上调用delete将是取决于编译器的未定义行为。代码中存在对未定义行为的依赖是错误的。
```c++
// Good
Foo* b = new Foo[5];
delete[] b;
```
在 C++ 代码中，使用 `string`、`vector`、智能指针（比如[std::unique_ptr](https://zh.cppreference.com/w/cpp/memory/unique_ptr)）等可以消除绝大多数 `delete[]` 的使用场景，并且代码更清晰。
关联漏洞:
`高风险-内存破坏`
`中风险-逻辑漏洞`
`低风险-内存泄漏`
`低风险-拒绝服务`
#### 1.8【必须】注意隐式符号转换
两个无符号数相减为负数时，结果应当为一个很大的无符号数，但是小于int的无符号数在运算时可能会有预期外的隐式符号转换。
```c++
// 1
unsigned char a = 1;
unsigned char b = 2;
if (a - b < 0)  // a - b = -1 (signed int)
  a = 6;
else
  a = 8;
// 2
unsigned char a = 1;
unsigned short b = 2;