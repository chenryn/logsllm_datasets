gvi, S, Svi, Dr, Cτ as well as all k of the bits of τ, r in both groups (if G = H, then only (cid:96)(5 + 2k)
variables are needed).
There are t + 4(cid:96)k quadratic Zp equations (these are equations where both the variables and the
coeﬃcients have known discrete logs): t to perform the matrix multiplication and 4(cid:96)k to establish
19
τj, ri ∈ {0, 1}. The t matrix multiplication equations are of a special form (all variables are in G)
that some instantiations of Groth-Sahai can optimize. When G = H, 2(cid:96)k of these equations are
not needed.
There are 3(cid:96) multi-scalar product equations (these are equations where all variables and
for each i ∈ [(cid:96)], the equations
coeﬃcients in one of the two groups have known discrete logs):
involving S, Dr, and Cτ .
Sahai): the equations that verify the main pairing equation for each i ∈ [(cid:96)].
Finally, there are (cid:96) pairing-product equations (the most general form supported by Groth-
Depending on the instantiation of Groth-Sahai used (based on either the SXDH or DLIN
assumptions), the entire size of the ABS signature (measured in number of group elements) is
given in the following table:
# of group elts
(5 + 4k)(cid:96) vars
t + 4(cid:96)k quadratic
3(cid:96) multi-scalar
(cid:96) pairing-prod
signature size
SXDH
10(cid:96) + 8(cid:96)k
2t + 16(cid:96)k
18(cid:96)
8(cid:96)
DLIN (G = H)
15(cid:96) + 6(cid:96)k
2t + 12(cid:96)k
27(cid:96)
9(cid:96)
36(cid:96) + 2t + 24(cid:96)k
51(cid:96) + 2t + 18(cid:96)k
We remark that the most eﬃcient Groth-Sahai proof instantiation uses a composite subgroup
decision problem, but working in a prime order subgroup of unknown size within a composite order
group is incompatible with our approach. First, users must be able to compute (cid:126)v and matrix M
given a description of Υ and a satisfying assignment. This may not always be possible if the linear
algebra is in a ﬁeld of unknown size. Second, Boneh-Boyen signatures are only known to be useful
in groups of prime order.
C.3 Instantiation 2 Details
We can also instantiate our framework using the same approach as above, but with the signature
scheme of Waters [36]. Signatures in Waters’ scheme do not include any elements of Zp. This fact
allows us to avoid the ineﬃciency of committing to many components of the Boneh-Boyen signatures
in a bitwise fashion (though one bitwise commitment is needed for the tag τ of the credential
bundle). Furthermore, Waters signatures are secure under the much weaker BDH assumption,
which is implied by the assumptions required for Groth-Sahai proofs. Thus this instantiation does
not require the additional q-SDH assumption. However, as a tradeoﬀ, the Waters instantiation
requires larger public parameters: a linear (in the security parameter) number of group elements,
not the constant number of group elements needed by the Boneh-Boyen instantiation.
Waters signatures We brieﬂy review the Waters digital signature scheme [36]. As before, we
suppose there is a bilinear pairing e : G × H → GT , where G and H have prime order p, and where
g is a random generator of G, and h is a random generator of H (it is important that g and h are
chosen independently at random, in the case where G = H).
DS.KeyGen: Choose random a, v0, . . . , vn ← Zp and compute A = ha, Vi = gvi. The veriﬁcation
key is (A, V0, . . . , Vn), and the signing key is ga ∈ G.
DS.Sign(sk, m ∈ Zp): Choose random r ← Zp. Set
σ1 =
V0
V mi
i
ga;
σ2 = hr
(cid:32)
n(cid:89)
(cid:33)r
i=1
20
where mi is the ith bit of m. Output σ = (σ1, σ2) ∈ G × H.
DS.Ver(vk, m, σ = (σ1, σ2)): Output 1 if
(cid:32)
n(cid:89)
(cid:33)
e
V0
V mi
i
, σ2
e(g, A) = e(σ1, h)
and output 0 otherwise.
i=1
The Waters scheme is strongly unforgeable under the BDH assumpion, which is implied by either
of the SXDH or DLIN assumptions (see [36]).
Expressing the Non-Interactive Proof using Pairing Equations We use the same approach
as above to express the desired logic using pairing equations. The only signiﬁcant diﬀerence is in
how we encode clauses of the form
∃ τ, σ, v :(cid:2)v (cid:54)= 0 ⇒ DS.Ver(vk, τ(cid:107)m, σ) = 1(cid:3)
where DS.Ver is now the Waters signature veriﬁcation.
Since the Waters scheme treats τ(cid:107)m bitwise, we must commit to τ bitwise, as before (m is an
attribute name, and therefore public in all of our proof clauses). In this way, we ensure that the
extractor can extract the bits and reconstruct the entire witness τ.
Let (τ, σ = (σ1, σ2), v) be a witness to the above expression. Express τ bitwise as τ = τ1 ··· τk
and m as m1 ··· mk. As before, we commit to τi in both groups, as gτi, hτi, and then ﬁrst prove
that each is indeed a single bit. This is done exactly as in the previous instantiation.
Next, observe that the pairing equation
(cid:32)
k(cid:89)
k(cid:89)
i=1
i=1
(cid:33)
e
V0
V τi
i
V mi
k+i, σ2
e(gv, A) = e(σ1, hv)
is logically equivalent to the desired expression [v (cid:54)= 0 ⇒ DS.Ver(vk, τ(cid:107)m, (σ1, σ2)) = 1], provided
that the prover sets σ2 = h0 when v = 0.
i V τi
i given the committed values. Thus we let the prover
commit to this intermediate value, and prove consistency via the following equations:
The prover cannot directly compute(cid:81)
(cid:33)
(cid:43)
(cid:32)(cid:42) k(cid:89)
e
V τi
i
, h
=
i=1
e((cid:104)σ1(cid:105) ,(cid:104)hv(cid:105)) = e
i=1
k(cid:89)
(cid:32)
k(cid:89)
(cid:32)(cid:42) k(cid:89)
V0
i=1
· e
e(Vi,(cid:104)hτi(cid:105));
(cid:33)
k+i,(cid:104)σ2(cid:105)
(cid:43)
V mi
(cid:33)
V τk
i
,(cid:104)σ2(cid:105)
e((cid:104)gv(cid:105) , A).
i=1
Note that since m, A, B, Vi are public, all the coeﬃcients in these equations can be publicly
computed. Thus we have:
Theorem 5. Under either the DLIN or SXDH assumptions, there is an ABS scheme supporting
claim-predicates represented as monotone span programs, with signatures consisting of O(k + s)
group elements, where s is the size of the monotone span program.
21
Eﬃciency Again we simplify the following eﬃciency analysis by noting that n ≤ (cid:96).
The proof requires 5(cid:96) + 2k + 1 variables: Each of the k bits of τ, in both groups (unless G = H),
, which is shared among several clauses. Then for each i ∈ [(cid:96)], the prover
plus the product(cid:81)
i V taui
i
must commit to gvi, hvi, σ1, σ2, Avi.
i V τi
i
.
There are t + 2k + (cid:96) quadratic Zp equations (these are equations where both the variables and
the coeﬃcients have known discrete logs): t to perform the matrix multiplication, 2k to establish
τj ∈ {0, 1}, and (cid:96) to ensure consistency between gvi and hvi. The t matrix multiplication equations
are of a special form (all variables are in G) that some instantiations of Groth-Sahai can optimize.
When G = H, the 2k equations involving τj are not needed.
There are (cid:96) + 1 multi-scalar product equations (these are equations where all variables and
coeﬃcients in one of the two groups have known discrete logs): one equation involving each Avi,
and one overall involving(cid:81)
Finally, there are (cid:96) pairing-product equations (the most general form supported by Groth-
Sahai): the equations that verify the main pairing equation for each i ∈ [(cid:96)].
Depending on the instantiation of Groth-Sahai used (based on either the SXDH or DLIN
assumptions), the entire size of the ABS signature (measured in number of group elements) is
given in the following table:
# of group elts
5(cid:96) + 2k + 1 vars
t + 2k + (cid:96) quad
(cid:96) + 1 multi-scalar
(cid:96) pairing-prod
signature size
SXDH
10(cid:96) + 4k + 2
2t + 8k + 4(cid:96)
6(cid:96) + 6
8(cid:96)
DLIN (G = H)
15(cid:96) + 3k + 3
2t + 6k + 3(cid:96)
9(cid:96) + 9
9(cid:96)
28(cid:96) + 2t + 12k + 8
36(cid:96) + 2t + 9k + 12
Compared to the instantiation using Boneh-Boyen signatures, this instantiation is much more
eﬃcient. Each Boneh-Boyen signature involves bitwise operations on an element of Zp, but Waters
signatures avoid this, thus eliminating the dominating O(nk) factor in the total Groth-Sahai proof
size. We note that this improvement comes at the cost of having O(k) group elements in the
veriﬁcation key, instead of O(1) group elements as in the Boneh-Boyen instantiation.
D Notes on Instantiation 3
Our construction from Section 4.5 is perhaps the best choice in a typical attribute-based system,
especially if the system already involves attribute-based encryption schemes whose security is proven
in the generic-group model. We make a few notes about the eﬃciency and extensions of the scheme.
Delegation This scheme supports delegation of attributes in a natural way. Suppose a party has
a signing key for A, say, (Kbase, K0,{Ku | u ∈ A}). Then for any A(cid:48) ⊆ A, when choosing random
r ← Z∗
p, the quantity ((Kbase)r, (K0)r,{(Ku)r | u ∈ A(cid:48)}) is a valid, correctly distributed signing
key for attribute set A(cid:48).
Probabilistic Veriﬁcation Using a standard technique, signatures in this scheme can be veriﬁed
probabilistically with only (cid:96) + 4 pairings instead of (cid:96)t + 2, at the cost of additional exponentiations
and a very small probability of false positives.
replace the ﬁnal t checks with the following random one: Choose random r1, . . . rt ← Z∗
To probabilistically verify a signature, proceed as in the normal veriﬁcation algorithm, but
p, and check
22
the single constraint:
(cid:96)(cid:89)
Si,
e
t(cid:89)
(AjBu(i)
j
)Mij·rj
i=1
j=1
 ?= e(Y, hr1
1 ) e
Cgµ,
t(cid:89)