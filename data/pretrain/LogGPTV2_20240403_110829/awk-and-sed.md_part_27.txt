 awk -f do.awk test.do
108354
335967
101055040
452
：130
108
114
（i = 1；i = 1; i-- )
1 = $2 + $3 + $4 + $5 + $6 
 total += $i
QQ群：
print $i
，结束循环并计算平均值。例如，
50192241
1)
因为我们不想将一个记录的值同下一个记录的
-188 -
而是编写一个通用的脚本来循环读取已有
第八章
如果一个记录由 4哥字段组
条件、循环和数组
如果要用这
“NF-
---
## Page 189
输入一个合法的数据为止。参见一部分中的lookup 程序，该程序是另一个构造
一个规则是测试用户是否已经输入了数据，如果没有用第二个规则提示用户重
件而是来自标准输入，
 newl ine
规则用于提示用户输入一个数据。因为我们已经规定输入内容不是来自一个文
字的阶乘。
将上面的程序插入到一个独立的脚本中，提示用户输入一个数字并打印这个数
新输入一个数据。我们设计了一个循环，
BEGIN
这
为
时
第
这里的 number 是我们要计算阶乘fact 的那个数。假设 number 的值为5，执行
是一个有趣的例子，在住输入循环中提示输入并读取标准输入端的回答。
1时结束。
，X的值为3，将其与 20 相乘并将结果赋值给fact。循环一直重复到X的值
一次循环时×的值为4，计算“5*4”
BEGIN
awk ′ # factorial: return factorial of user-supplied number
$1
for (x = number - 1 ; x > 1; x--)
fact = number
#
 check that user enters a number
if not a number, prompt again.
/^[0-9]+$/ {
fact *= x 
QQ群：
exit
printf ("The factorial of %d is %g\n", number, fact)
for (x = number - 1; x > 1; x--)
# loop
else
# assign value of $1 to number & fact 
printf("Enter number: ")
# prompt user; use printf, not print, to avoid the
if (number == 0)
number = $1 
 exit -- saves user from typing CRTL-D.
所以系统输出提示后，
50192241
to multiply fact*x until x = 1
 fact *= x 
fact = number
fact 
’并将结果赋值给fact。下一次执行循环
 用于从标准输入从夫读入数据，
将暂停以等待用户输入数据。
第八章
条件、循环和数组
知道
---
## Page 190
的操作直到文件被读完。系统变量FILRNAME提供了当前文件的名字。因此，
操作过程。Next 语句的典型应用是可以连续从文件读取内容，忽略脚本的其他
输入行，并返回到脚本的底部（注1）
有两个语句能影响住输入循环，next 和 exit。Next 语句能够导致读入下一个
过改写条件，即当X不等于3时执行 print得到同样的结果。这里要说明的
是（由于一些原因），
这个例子通过对当前记录的字段的循环访问，
考虑以下程序段将得到的结果：
部之前终止当前的循环，并从循环的顶部开始一个新的循环。
在一个循环中有两个语句可以影响控制流，
们将看到另外几个也能够影响控制流的语句。
你可以用if、while、for 和do 语句来改变程序的正常控制流，在本节中，我
影响流控制的其他语句
以表示很大的数。看下面的例子：
下面的例子中显示了factorial程序是如何工作的：
输入循环的例子。
是，
环的顶部，
名
思义就是推出循环，这样将不再继续执行循环。Continue 语句在到达循环底
生意，结果用“%g”转换说明来格式化printf 语句。这使得用浮点数表示法可
，可以使用 continue 语句避免在特定的循环中达到循环的底部。
Print
for （x = 1; x= 
 class_avg_total += student_avg[x]
else
50192241
 ++below_average 
 ++above_average
-192 -
 第一个循环是将所有的平均分相加
 class_average)
第八章
 用记录的编号作为数组
条件、循环和数组
以便和全班的平
它的值被放置到
可
---
## Page 193
下面的表达式：
母缩写词本身。
数组中的每个元素都是首字母缩写词的描述，而用于检索元素的下标就是首字
使用这种技术，我们可以将首字母缩写词列表写入到aC数组中。
标
例
关联数组是a w k中一个独特的特征，
有时，数值型和字符型下标之间的差别是很重要的。例如，如果用“〇4”作
数组元素。
前面的例子中所完成的一样。
些下标的意义和其他编程语言中所表示的意义不同一它们不一定代表数的位
按一定的顺序存储。尽管在a wk中的数组的下标也可以是数据型的，但是
素都有两个相关的值：元素的下标和元素的值。
一个位置。
要跟踪数组的下标。例如，数组中的第一个元素的下标是“1”或是数组的多
在大多数的编程语言中，
果
题
为
以
在
关联数组
货
如，
你知道这个单词，你就可以检索到它的定义。
为一个数据的下标。
数组中一个元素的下标，就不能用“4”作为下标来定位这个元素。在后面
人是一个字符或一个数值。
awk中，
array[$1] = $2
，然而，
acro[$1] = $2
可以使用下面的赋值语句来将输入行的第一个字段作为第二个字段的下
对于数值型下标，
所有的数组都是关联数组。关联数组的独特之处在于它的下标可
QQ
群：
例如，
50192241
数组的下标都是唯一的数字。
可以使用一个单词作为下标来查找他的定义。如
也能够顺序访问数值中的所有元素，就像我们
你可以创建一个循环来递增计数器并按顺序访问
-193 -
，它的一个强大功能就是可以使用字符串
，这些元素不像传统的数组那样
第八章
在这些语言中，
，对于数组中的每个元
条件、循环和数组
没有
数组时
这
第
---
## Page 194
应的等级计数器。可以为每个字母等级设置不同的变量并测试哪个可以递增。
这里，
是如果使用实数作为下标，
为下标，
重要的是需要记住a wk中的所有数字下标都是字符串类型。即使使用数字作
序使得它不依赖于a wk的任意版本。
是随机的（注2）
这个语法可以应用于使用数组型下标的数组。
标定位的a 数组的元素。
结果为：
现在让我们回到计算学生成绩的例子上。
本和新a wk 的早期版本)
在
版
有
1，而dａｔa 
，获得“B”的学生是多少等等。一旦我们明确了等级，我们就能够递增相
这个例子中，
有一个特殊的循环语法可以访问关联数组的所有元素。它是fr循环的一个
本。
的
else if (grade ==
a w k都将数值转换为字符串白
for
Beginner’
 acro["BASIC"]
意：当一个数值两次调用
√
在尖括号中没有打印任何
pr intf "\n", data[1.23] 
 gawk ′ BEGIN ↑ data[1.23] = "3.21"; CONVFMT ="%d"
，a wk将自动将它们转换为字符串。当使用整数作为下标时也不必担
( variable in array)
++gradeB