entries ( 8 ), while ANGR and GHIDRA additionally resolve
certain indirect calls to determine more function entries ( 9 ).
Finally, DYNINST, GHIDRA, ANGR and RADARE2 include
targets of tail calls as function entries (see § III-D).
(3) All tools use pattern-based approaches to further recover
functions (18). GHIDRA, ANGR and RADARE2 ﬁnd function
entries based on common prologues (or epilogues); DYNINST
(by default) and BAP ﬁnd function entries with pre-trained
decision-tree models [9]. As we will present in § IV-B3, this
pattern-based approach is heavily used and indeed identiﬁes
many functions. However, it is very sensitive to architectures,
optimizations, and compiler speciﬁcs.
ANGR adopts an extra aggressive approach: during linear
scan over code gaps left by recursive descent, it treats the begin
of each identiﬁed code piece as a new entry (19). This method
improves the coverage but incurs many errors (§ IV-B3).
To sum up, the identiﬁcation of function entry mostly uses
hybrid approaches, mixing algorithms and heuristics.
D. Algorithms and Heuristics in CFG Reconstruction
CFG reconstruction consists of many tasks. We focus on the
challenging ones: resolving indirect jumps/calls, detecting tail
calls, and ﬁnding non-returning functions. Direct jumps/calls
are not discussed as they are easily derivable after disassembly.
Indirect Jumps [DYNINST, GHIDRA, ANGR, RADARE2]:
From our benchmark binaries (Table IV), we observed three
types of indirect jumps: (1) jump tables [23] (compiled from
switch-case and if-else statements); (2) indirect tail
calls (indirect calls optimized as tail calls); and (3) hand-
written ones (e.g., longjmp and other cases in Glibc [48]).
Fig. 3: Handling of jump tables by RADARE2.
(a) DYNINST
(b) GHIDRA
Fig. 4: Jump table resolution in DYNINST and GHIDRA. The
upper half of Sub-Fig. 4a shows a jump table from Gold
Linker. Lower half of Sub-Fig. 4a and Sub-Fig. 4b respectively
illustrate how DYNINST and GHIDRA resolve the jump table.
RADARE2 only handles jump tables, by searching four types
of patterns shown in Fig. 3 (20). Consider Type-1 jump table as
an example: encountering a jump table of this type, RADARE2
searches an indirect jump in the format of jmp [base +
reg * size] and a cmp/sub instruction in the preceding
basic block. On ﬁnding the two items, RADARE2 deems base
as the base address and the constant operand in cmp/sub as
the upper bound of the index. If that upper bound exceeds
512, RADARE2 discards the jump table (21). The strategies
of RADARE2 are highly sensitive to compiling conﬁgurations
and are less effective with resolving jump tables (§ IV-B4).
DYNINST also only handles jump tables, using a hybrid
approach shown in Fig. 4a. It performs backward slicing from
the target. In the sliced area, if the ﬁrst memory read (after
simpliﬁcation) has the format of [CONST + reg * size]
(20), DYNINST deems the indirect jump to be a jump table,
respectively using CONST and reg as the base address and
index. Starting from the index, DYNINST performs backwards
slicing again up to 50 assignments [35] (22) or the function
entry. In this slice, DYNINST uses a simpliﬁed Value Set
Analysis (VSA) to gather value bounds along the ﬂow of the
index (and its aliases) ( 10).
GHIDRA ﬁrst considers an indirect jump to be a jump table
and resolves it with a strategy shown in Fig. 4b. In the current
function, GHIDRA seeks a single path that deﬁnes both the
base address and the index (20). Along the path, GHIDRA
tracks the propagation of the base and index to identify their
value bounds. Instead of using a full VSA, GHIDRA considers
restrictions by variable types, conditional jumps, and and
instructions. Similar to RADARE2, GHIDRA discards jump
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
838
cmp/sub$const,%r1jadefaultjmpq*base(,%r2,size)cmp/sub$const,%r1jadefaultmovbase(,%r2,size),%r3jmpq*%r3cmp/sub$const,%r1jadefaultleaoffset(%rip),%r2…mov(%r2,%r3,size),%r4add%r2,%r4jmpq*%r4Type-1jumptableType-2jumptableType-3jumptablelessthan60byteslea$const,%r1…cmp/sub$const,%r2jadefaultmov(%r1,%r3,size),%r4…jmpq*%r4Type-4jumptableJmptarget: [rax]Define target: [(r9 + r8*4) → rax]Define base: [0x24e4f(rip) → r9]Define index: [esi→ r8d]BaseGuards:[N/A]Index Guards: [0≤ esi≤79]index: = defaultBase flow: [N/A]Index flow: [esi→ r8d]Function entry: [N/A]Base guards: [N/A]Index guards: [N/A]Jmptarget: [rax]Memory load: [(r9 + r8*4) → rax]Find base:[0x24e4f(rip) → r9]Findindex:[r8]Index slicing:[esi→ r8d]Index bound:[0≤ esi≤79]cmp$0x4f,%esijadefaultlea0x24e4(%rip),%r9mov%esi,%r8dmovslq(%r9,%r8,4),%raxadd%r9,%raxjmpq*%raxJmptarget: [rax]Define target: [(r9 + r8*4) → rax]Define base: [0x24e4f(rip) → r9]Define index: [esi→ r8d]BaseGuards:[N/A]Index Guards: [0≤ esi≤79]index: = defaultBase flow: [N/A]Index flow: [esi→ r8d]Function entry: [N/A]Base guards: [N/A]Index guards: [N/A]Jmptarget: [rax]Memory load: [(r9 + r8*4) → rax]Find base:[0x24e4f(rip) → r9]Findindex:[r8]Index slicing:[esi→ r8d]Index bound:[0≤ esi≤79]cmp$0x4f,%esijadefaultlea0x24e4(%rip),%r9mov%esi,%r8dmovslq(%r9,%r8,4),%raxadd%r9,%raxjmpq*%raxtables with an index bound over 1024 (21). If GHIDRA cannot
resolve the jump table, it will consider the indirect jump as an
indirect call and perform analysis that we will discuss shortly.
ANGR, given an indirect jump, considers the operand as a
source and runs backwards slicing. In the sliced area, ANGR
uses full-scale VSA to identify possible targets ( 10). However,
the public version of ANGR restricts the slicing to at most three
levels of basic blocks (22), trading utility for efﬁciency. ANGR
also adopts heuristic 21 with a very large threshold: 100,000.
In summary,
tools employ various heuristics to resolve
indirect jumps. These heuristics, mostly derived for accuracy,
introduce fewer errors but have limited coverage (§ IV-B4).
Indirect Calls [GHIDRA, ANGR]: GHIDRA ﬁnds targets of
indirect calls based on constant propagation ( 11 ). It tracks
the intra-procedure propagation of constants from immediate
operands, the LEA instructions, and global memory. Once a
constant ﬂows to an indirect call, GHIDRA takes the constant
as a target. ANGR also uses constant propagation ( 11 ) to
handle indirect calls but only considers the current basic block.
Tail Calls [RADARE2, ANGR, DYNINST, GHIDRA]: For ef-
ﬁciency, function calls at the end of procedures are often
optimized as jumps (i.e.,
tail calls). Tools adopt different
strategies to detect tail calls.
RADARE2 uses a simple heuristic to determine tail calls:
the distance between a jump and its target exceeding a certain
threshold (23). This heuristic exploits the insight that different
functions are usually apart. However, it is hard to pick a
threshold that is both effective and accurate.
GHIDRA determines a jump as a tail call if the code between
the jump and its target spans multiple functions (24). The
heuristic can lead to both false positives due to discontinuous
functions and false negatives due to unrecognized functions.
GHIDRA further excludes conditional jumps from considera-
tion (25), preventing the detection of 21.6% of the tail calls.
DYNINST takes a sophisticated strategy. It considers a jump
as a tail call if the target is the start of a known function ( 12 ).
Otherwise, DYNINST checks two rules to determine a tail call:
(1) the jump’s target cannot be reached by only following false
branches; (2) right before the jump, the stack is tore down
by [leave; pop $reg] or [add $rsp $const] (26).
While the ﬁrst rule is hard to reason, the second rule exploits
an intrinsic property of tail calls: the current function recycles
the stack such that the child re-uses its return address. The
above pattern-based approach is less accurate, leading to 97%
of DYNINST’s false positives and most of its false negatives.
ANGR adopts similar strategies as DYNINST. It ﬁrst identi-
ﬁes jumps whose targets are starts of known functions ( 12 ).
Beyond that, ANGR requires four conditions to detect a tail
call: (1) the jump is unconditional (25); (2) the stack at the
jump is tore down based on stack height analysis (26); (3) the
target does not belong to any function or it belongs to the
current function (27); (4) all incoming edges of the target are
unconditional jumps or direct calls (28). As we will show in
§ IV-B4, these heuristics do not provide correctness guarantees
and each can lead to both false positives and false negatives.
Tools take different strategies to detect
tail calls. These
strategies depend critically on function entry detection, in-
heriting inaccuracies from function identiﬁcation.
Non-returning
[ANGR, BAP, RADARE2,
DYNINST, GHIDRA]: Tools use a similar workﬂow for
detecting non-returning functions. First,
the
group of library functions or system calls that are known
to be non-returning ( 13). Second, from this initial group of
functions, tools further ﬁnd other ones.
they gather
Functions
ANGR, RADARE2, and DYNINST use the same idea: they
scan each function and, if no ret instruction is found, they
consider the function to be non-returning ( 14). However, they
adopt different solutions when encountering a call to a child
function that has unknown returning status: (1) ANGR simply
assumes a fall-through after the call; (2) RADARE2 takes a
similar strategy but when the child status is later updated,
RADARE2 recursively propagates the update to its predecessor
functions; (3) DYNINST takes a depth-ﬁrst approach to ﬁrst
handle the successor functions. Only until the status of the
child function is determined, DYNINST will continue handling
the original call. To our understanding,
the strategies in
RADARE2 and DYNINST are equivalent. Both are principled
and produce nearly perfect precision (§ IV-B4).
GHIDRA also follows the idea of ( 14). To handle a call with
unknown returning status, GHIDRA checks the fall-through
code after the call. If the code runs into abnormal regions
(i.e., data, unrecognizable instructions, or another function) or
the code is referenced by xrefs (other than jumps), GHIDRA
marks the fall-through unsafe. If the child function of that call
incurs at least three unsafe fall-through, GHIDRA considers the
child to be non-returning. Further, instead of doing recursive
updates, GHIDRA simply runs the detection process twice.
BAP considers a function to be non-returning if all the
paths in the function end at a call to a non-returning function
( 14). To handle calls to child functions with unknown status,
it takes a similar recursive-updating strategy as RADARE2.
Tools use many principled strategies to detect non-returning
functions, ensuring higher correctness.
IV. LARGE-SCALE EVALUATION
A. Evaluation Setup
Benchmarks: We used the software listed in Table IV to
experimentally evaluate the tools we studied. The software
includes programs and libraries of diverse functionality and
complexity, written in C / C++, and containing hand-written
assembly and hard-coded binary code. It also carries a signif-
icant amount of complex constructs as listed in Table XVII,
ﬁtting the use as a benchmark. To test the effect of different
compilers and options, we built each software package for two
operating systems (Linux and Windows), using three compilers
(GCC-8.1.0 and LLVM-6.0.0 on Linux, and Visual Studio
2015 on Windows), various optimization levels (O0, O2, O3,
Os, Ofast on Linux, Od, O1, O2, Ox on Windows), and two
architectures (X86 and X64). This resulted in 3,788 binaries,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:37 UTC from IEEE Xplore.  Restrictions apply. 
839
TABLE IV: Software used for evaluating tools.
Type
Benchmark
Utilities
Clients
Servers
Name
SPEC CPU2006
Unzip-6.0 Coreutils-8.30 7-zip-19
Findutils-4.4 Binutils-2.26 Tiff-4.0
Openssl-1.1.0l Putty-0.73 D8-6.4
Filezilla-3.44.2 Busybox-1.31
Protobuf-c-1 ZSH-5.7.1 VIM-8.1
XML2-2.9.8 Openssh-8.0 Git-2.23
Lighttpd-1.4.54 Mysqld-5.7.27
Nginx-1.15.0 SQLite-3.32.0
Glibc-2.27 libpcap-1.9.0 libv8-6.4
Programs/Binaries
Linux
30 / 546
Windows
15 / 120
125 / 2500
26 / 196
13 / 154
13 / 104
3 / 49
2 / 16
Libraries
libtiff-4.0.10 libxml2-2.9.8
6 / 79
3 / 24
libsqlite-3.32.0 libprotobuf-c-1.3.2
Total
177 / 3328
59 / 460
which are less than the theoretically possible 4484 (177×20
+ 59×16), as some cannot be built for certain conﬁgurations.
Ground Truth: We intercept the compiling and linking pro-
cess to automatically obtain ground truth about the produced
binaries, which includes instructions, functions, control trans-
fers, jump tables, xrefs, and remaining complex constructs.
On Linux, we replicate the approach in CCR [60].
CCR extends the LLVM Machine Code layer to record
the needed information in each compiled bitcode/assembly
ﬁle. It also instruments the GNU Gold Linker to merge
the information during linking. Throughout experimenta-
tion, we identiﬁed several
limitation of the CCR linker,
which we addressed by extending it to: (1) collect informa-
tion from previously ignored sections (.text.unlikely,
.text.exit,.text.startup,.text.hot); (2) sup-
port relocatable objects (compiled with -r); (3) record both
the size and the offset of basic blocks; (4) handle linker-
inserted functions (e.g., _start) and statically-linked Glibc
functions; (5) support X86 targets. We also extend the CCR
approach to GCC by instrumenting its RTL pass to label all
related constructs when producing assembly code. We also
customized the GNU Assembler to record the locations of the
constructs and xrefs in the emitted object ﬁles. Finally, we
re-use the CCR linker to merge object ﬁles.
On Windows, we combine compiler options, symbol/debug
information, and lightweight manual analysis to build ground
truth. Details are covered in Appendix B.
Tools and Conﬁgurations: Besides open-source tools, we also
test two commercial tools, IDA PRO-7.4 and BINARY NINJA-
1.2. We detail the conﬁguration of all tools in Appendix C.
It should be noted that we run two versions of GHIDRA and
ANGR, including a version of GHIDRA not using exception
information, namely GHIDRA-NE, and a version of ANGR
without linear scan, namely ANGR-NS.
B. Evaluation Results & Analysis
1) Disassembly : This evaluation measures the recovery of
legitimate instructions. We excluded all the padding bytes and
linker-inserted functions (e.g., _start). We also inserted a
symbol of main so that all recursive tools can ﬁnd it.
TABLE V: Evaluation results of instruction recovery. L and
W are short for Linux and Windows. Pre and Rec means
precision and recall. Ave/Min show the average/minimal
results among all binaries. The best/worst results speciﬁc to
each optimization level are respectively marked as blue/red.
Instructions
Min
Avg
L
Instructions
Min
Avg
W
i
i
a
r
d
h
G
t
s
n
i
n
y
D
p O0
m
O2
u
O3
d
j
Os
b
O
Of
O0
O2
O3
Os
Of
a O0
O2
m
e
O3
S
c
Os
M
Of
E O0
N
O2
-
a
O3
r
d
Os
h
Of
G
O0
O2
O3
Os
Of
S O0
O2
N
-
O3
r
g
Os
n
A
Of
O0
O2
O3
Os
Of
O0
O2
O3
Os
Of
O0
O2
O3
Os
Of
O0
O2
O3
Os
Of
O0
O2
O3
Os
Of
2
e
r
a
d
a
R
r
g
n
A
a
j
n
N
i
A
D
I
p
a
B
Rec
Pre
99.98 99.99
99.94 99.94
99.95 99.95
99.95 99.97
99.90 99.90
99.99 99.07
99.99 92.45
99.99 91.72
99.99 89.79
99.99 91.65
99.99 99.99
99.99 99.97
99.99 99.83
99.99 99.99
99.99 99.83
99.99 98.03
99.99 80.65
99.99 77.83
99.99 89.66
99.99 78.48
99.99 99.65
99.99 94.90
99.99 93.63
99.99 95.26
99.99 93.73