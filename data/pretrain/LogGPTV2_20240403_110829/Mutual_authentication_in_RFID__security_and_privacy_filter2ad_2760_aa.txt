title:Mutual authentication in RFID: security and privacy
author:Radu-Ioan Paise and
Serge Vaudenay
Mutual Authentication in RFID
Security and Privacy
Radu-Ioan Paise
EPFL
CH-1015 Lausanne, Switzerland
radu-ioan.paise@epﬂ.ch
Serge Vaudenay
EPFL
CH-1015 Lausanne, Switzerland
serge.vaudenay@epﬂ.ch
ABSTRACT
In RFID protocols, tags identify and authenticate them-
selves to readers. At Asiacrypt 2007, Vaudenay studied se-
curity and privacy models for these protocols. We extend
this model to protocols which oﬀer reader authentication
to tags. Whenever corruption is allowed, we prove that se-
cure protocols cannot protect privacy unless we assume tags
have a temporary memory which vanishes by itself. Un-
der this assumption, we study several protocols. We enrich
a few basic protocols to get secure mutual authentication
RFID protocols which achieve weak privacy based on pseu-
dorandom functions only, narrow-destructive privacy based
on random oracles, and narrow-strong and forward privacy
based on public-key cryptography.
Categories and Subject Descriptors
H.4 [Information Systems Applications]: Miscellaneous;
D.2.8 [Software Engineering]: Metrics—complexity mea-
sures, performance measures
Keywords
identiﬁcation protocol, privacy, RFID
1. RFID SECURITY AND PRIVACY
RFID refers to wireless protocols which make it possible
to identify mobile tags to readers in a given system. Typ-
ically, the reader together with the system is considered as
a single powerful and secure participant, but tags are tiny
inexpensive devices which are not secure, prone to corrup-
tion, and with little computational capabilities. RFID tags
become pervasive, thus lead us to privacy threats. For this,
the study for security and privacy of RFID protocols (while
preserving eﬃciency) has become a hot research topic.
RFID schemes are characterized by a three-fold quality.
Correctness ensures that legitimate tags interacting with the
reader are correctly identiﬁed or authenticated. Security
says that an adversary cannot impersonate a legitimate tag
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’08, March 18–20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
to the reader. Privacy makes sure that an adversary cannot
link relationships (such as being the same) between a tag
which was observed at some point at a given moment and
another one. Clearly, the purpose of RFID is to identify to
the reader but to nobody else.
We typically assume adversaries who can tamper with any
wireless communication, pick random tags, force protocols
to run with tags or the reader. Ohkubo, Suzuki, and Ki-
noshita [10, 11, 9] ﬁrst introduced RFID which could still
provide privacy even though an adversary would eventually
corrupt tags to open their memory. This ﬁts the notion of
forward privacy. Their protocol was formally proven in an
ad-hoc privacy model well ﬁtted to their protocol. A formal
deﬁnition for privacy was considered by Avoine [1, 2] with
the notion of corruption except on target tags. It was ex-
tended by Juels and Weis [6] who introduced side channels:
an adversary could learn whether or not a reader succeeded
to identify a tag. Those models were suﬀering from elim-
inating many attacks such as those tampering with target
tags, mainly to eliminate trivial attacks. Those categories
of models have been generalized and classiﬁed by Vaude-
nay [14]. To eliminate trivial attacks, these models compare
interaction of the adversary with the tags to interaction of
the adversary with blinded communication to the tags.
An alternate approach relates to the universal composabil-
ity model. For this, Burmester, van Le, and de Medeiros [3,
13] deﬁned several versions of an ideal functionality.
Following [14], adversaries are called weak if corruption is
not permitted, forward if corruption is performed at the end
of the attack only, destructive if corruption destroys the tag,
or strong otherwise. Orthogonally, adversaries are called
narrow if they cannot learn whether the reader completed
the protocol by identifying any tag or not. It was proven that
narrow-strong privacy requires at least techniques which are
enough to build a secure key agreement protocol and could
be achieved with a secure public-key cryptosystem. Con-
versely, narrow-destructive privacy is possible using random
oracles, and weak privacy is possible using pseudorandom
functions only.
One of the concerns users may have is that a malicious
reader can obtain unauthorized information from a tag, rais-
ing security or privacy issues. In order to ﬁx this problem,
beside tag’s authentication, a protocol must ensure reader’s
authentication:
it means that a tag must be conﬁdent of
the reader’s identity before sending any information or its
ID. In this case we obtain a mutual authentication proto-
col. Several such protocols have been proposed: Burmester,
van Le and de Medeiros proposed the O-FRAP protocol [13].
Tsudik [12] proposed the YA-TRIP and YA-TRAP schemes,
both based on timestamps. Lim and Kwon proposed an-
other protocol in [7]. These schemes do no use of public-
key cryptography, but they are either not weak private or
not narrow-forward private under our model. Although this
was already mentioned by their authors, we simply stress
that they are constant in not achieving both properties at
the same time. So the question of achieving both without
public-key cryptography is open.
Structure of the paper.
We ﬁrst recall deﬁnitions from [14] in Section 2 and extend
them to address mutual authentication. Section 3 provides
useful results to prove security and privacy. Then, we show
the impossibility of narrow-forward privacy in Section 4.
This leads us to modifying the tag model so that some tem-
porary memory is automatically erased whenever the tag no
longer received any power. Section 5 relates to already pro-
posed protocols. Finally, Section 6 enriches the three pro-
tocols from [14] and proves their security and privacy. We
obtain 3-pass protocols which are secure RFID schemes with
mutual authentication. Weak privacy is achieved based on
pseudorandom functions only. Narrow-destructive privacy
is achieved based on random oracles. Narrow-strong and
forward privacy is achieved based on an IND-CCA secure
public-key cryptosystem.
2. DEFINITIONS
Following [14], an RFID scheme is deﬁned by
• an algorithm SetupReader(1s) to generate common in-
put (typically: domain parameters, a public key KP ),
a secret key KS, and initialize a database
• an algorithm SetupTag(ID) using the common input
to generate a tag-speciﬁc secret K and its initial state
S. When the tag is meant to be a legitimate one, the
entry (ID, K) is inserted in the database
• a 2-party protocol between the reader and a tag in
which the reader protocol uses the common input, the
database, and the secret, produces an output equal to
⊥ if identiﬁcation failed or some ID if it succeeded, and
may update the database.
The protocol is correct if executing it honestly leads to the
reader to infer the correct ID of a tag when it is legitimate,
or ⊥ when it is not, except with negligible probability.
To address mutual authentication, we enrich this deﬁni-
tion by introducing an output on the tag side which should
be OK or ⊥. The protocol is correct if executing it honestly
with a legitimate tag, it outputs OK, except with negligible
probability.
We further deﬁne simple protocols in which the reader
protocol follows a special form in which the communication
protocol algorithm, the tag identiﬁcation algorithm, and the
database update algorithm satisfy the following properties.
• The reader protocol computes the protocol messages
without any access to the database.
• There is a predicate RKS based on the secret key KS
on (ID, K, τ ) triplets used to deﬁne a set of all tag
IDs having a database entry (ID, K) which are called
compatible with a protocol ﬁnal transcript τ .
• The reader protocol runs an algorithm SKS on a set
of compatible IDs as input to produce the output ID.
This algorithm always picks an element in the input
set (or fails if empty).
• After ID is output, an extra algorithm with input KS,
τ , and the selected (ID, K) database entry may update
this entry in the database before the reader protocol
terminates.
RKS and SKS may be invoked as oracles in the “simple
security” deﬁnition. For simplicity we omit KS from nota-
tions.
Adversaries.
Adversaries use the common input and may use the fol-
lowing oracles.
• CreateTagb(ID) to create a tag with a given ID which
is legitimate (if b = 1) or not (if b = 0). If legitimate,
this oracle updates the database of the reader. The
oracle returns nothing.
• DrawTag(distr) to run a sampling algorithm distr to
generate a tuple (ID1, . . . , IDn) of pairwise diﬀerent val-
ues. If tag IDi is legitimate, bi is set to 1. Otherwise it
is set to 0. If tag IDi is currently free, it is moved to a
set of drawn tags and assigned with a new temporary
identity vtagi, pi is set to (vtagi, bi), and a new entry
vtagi 7→ IDi is inserted to the table T . Otherwise, pi
is set to ⊥. The oracle returns (p1, . . . , pn). All ID’s
and table T remain unknown to the adversary.
• Free(vtag) to move the drawn tag with temporary
identity vtag back to the set of free tags. The tag can
no longer be accessed with its temporary identity vtag.
The oracle returns nothing.
• Launch to start a new protocol session on the reader
side. This oracle returns a new session identiﬁcation
number π. We assume that sessions are associated
to an internal state and that sessions can run concur-
rently on the reader. In contrast, tags have a single
state so only one session can be run.
• SendReader and SendTag to send a message to a
given protocol session on the reader (identiﬁed by some
π value) or on a drawn tag (identiﬁed by its vtag value).
These oracles return a message to be sent back to the
counterpart.
• Result(π) to get 0 if the output on session π is ⊥ and
1 otherwise.
• Corrupt(vtag) to get the internal state of tag with
temporary identity vtag. When vtag is no longer used,
we say that the tag is destroyed.
The capabilities of adversaries will be kept unchanged to
study mutual authentication.
We say that vtag and π had a matching conversation if
there is a protocol session on vtag in which the adversary
faithfully forwarded messages from one to the other (among
other interaction with other tags or other reader sessions) in
the right interleaved sequence.
Security.
A scheme provides security if it provides secure tag au-
thentication and secure reader authentication. The notion of
secure tag authentication is unchanged from [14]. Basically,
tag authentication is insecure if there exists a polynomial-
time adversary such that one reader protocol session identi-
ﬁed some tag ID before it was corrupted but had no match-
ing conversation with tag ID on any drawn form, with non-
negligible probability of success. Similarly, reader authenti-
cation is insecure if there exists a polynomial-time adversary
such that one tag session on a legitimate tag output OK but
had no matching conversation with any reader session, with
non-negligible probability.
In [14], a weaker notion of security called simple security
restricts to adversaries making no use of the Result oracle,
creating a single tag and ending on a ﬁnal SendReader
on a reader session π but using the two additional oracles
R and S of the simple protocol deﬁnition. The adversary
succeeds if the session π identiﬁed the tag but that it did
not have any matching conversation. It was shown that a
scheme based on a simple protocol form achieving simple
security also achieves secure tag authentication.
Since [14] only considered tag authentication, this deﬁni-
tion relates to simple tag authentication. We enrich it with
the notion of simple reader authentication by saying that an
adversary wins if there is a tag session which ended by ac-
cepting the reader but had no matching conversation with
any reader session. We have simple security if we have both
simple tag authentication and simple reader authentication.
Privacy.
The deﬁnition of privacy is unchanged from [14]. Basi-
cally, a scheme oﬀers privacy against adversaries in class P
if for any adversary A in P which ends by getting the ﬁnal
table T from the DrawTag oracle and output a Boolean,
there exists a blinder B such that executing A or AB leads
to undistinguishable output.
A blinder is an algorithm who sees the common input and
all interaction between the adversary and the oracles and
who simulates the answers from SendReader, SendTag,
and Result. Namely, a blinder simulates the protocol mes-
sages. An adversary breaks privacy if its result could not
have been obtained without the protocol messages.
All polynomial-time adversaries are in the class STRONG.
Adversaries who always destroy tags after corruption are in
the subclass DESTRUCTIVE. Adversaries who never query
any oracle except Corrupt after corruption are in the sub-
class FORWARD. Adversaries who do no corruption are in
the subclass WEAK. In addition to this, adversaries who do
not query Result are in the subclass NARROW.
3. TOOLS FOR PROVABLE SECURITY
To prove security, we use the same technique as in [14].
Essentially, for a scheme accommodating a simple protocol
following our deﬁnition, if we can prove simple security, i.e.
security when the adversary is using a single tag, then we
obtain full security. The proof is basically the same as for
[14, Lemma 5].
Lemma 1. Let us consider an RFID scheme based on a
simple protocol which is simply secure. We assume there ex-
ists a computable predicate R0 such that for any matching
conversation of transcript τ between a tag ID and the reader
having (ID, K) in database, we have R(ID, K, τ ) ⇐⇒ R0(n)
where n is the number of consecutive completed protocol exe-
cutions on the tag ID before since the last one with a match-
ing conversation that led to the reader identifying ID. The
scheme is secure.
Typically, R0(n) is always true with the exception of OSK-