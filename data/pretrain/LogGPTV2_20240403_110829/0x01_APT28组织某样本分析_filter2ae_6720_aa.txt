## 0x01 APT28组织某样本分析
### 分析
基本信息：
> MD5：9B10685B774A783EABFECDB6119A8AA3
文档内容如图：
宏代码已进行加密处理，可通过[remove_vba_project_password](https://gist.github.com/ndthanh/65483efab3939ab3c78f0773af40333f)清除密码：
首先通过`ActiveDocument.WordOpenXML`获取所有.xml文件内容赋值给xml变量，使用`SelectNodes`函数定位标签获取所需字符串，返回匹配节点集合。`selected(1)`为该集合第二个子集，之后提取文本并解密：
将解密后的字符串写入文件并修改为隐藏属性：
该PE文件位于`%APPDATA%`目录：
调用WMI，由`rundll32.exe`运行保存的文件:
* * *
下面分析PE文件功能。  
首先获取环境变量`%APPDATA%`，拼接得到`"C:\\Users\\用户名\\AppData\\Roaming\\mrset.bat"`，设置注册表键值`UserInitMprLogonScript`为此路径以实现持久化：
对内存中的数据进行解密，得到另一PE文件：
拼接路径：
将解密的PE文件内容写入`"C:\\Users\\用户名\\AppData\\Roaming\\mvtband.dat"`中：
对内存中数据进行解密，结果如下：
以同样的方式拼接得到`"C:\\Users\\用户名\\AppData\\Roaming\\mrset.bat"`，创建该文件并设置文件隐藏属性，之后将解密后内容写入：
执行`mrset.bat`文件，其功能为通过`rundll32.exe`调用`mvtband.dat`导出表中#1函数：
### 复现
通过Cobalt
Strike生成一恶意DLL文件，之后执行BASE64加密，将加密后内容写入`app.xml`文件中，以特定标签将其包裹更新至原有WORD文档：
获取内容，通过`rundll32.exe`调用该DLL导出函数完成上线：
演示效果如下：
## 0x02 海莲花组织某样本分析
基本信息：
> MD5：3fd2a37c3b8d9eb587c71ceb8e3bb085
文档内容如下：
禁止显示提示和警报信息，复制文档至`%TEMP%`路径下：
将文档的倒数第五段文本解密，其内容为VBA代码：
获取`AccessVBOM`键值并保存，之后修改该值以信任对Visual Basic的访问：
打开复制后文档，移除其原本VBA代码，将解密后VBA代码加入模块，保存关闭文档：
打开修改后的文档，运行VBA代码中的`x_N0th1ngH3r3`函数。最后将修改的注册表键值还原，执行结束后弹出错误提示框以迷惑用户：
第二阶段VBA代码与第一阶段功能相似——解密文档倒数第三段文本后返回第三阶段VBA代码，删除文档中原本存在的VBA代码，将解密后代码写入并运行第三阶段的`x_N0th1ngH3r3`函数：
第三阶段VBA代码主要通过`CreateRemoteThread`函数运行加载到内存中的Shellcode。其针对64位与32位操作系统会执行不同操作。通过`CreateProcessW`函数执行rundll32.exe以实现隐藏Shellcode进程：
分配内存并将文档倒数第二段文本内容(即Shellcode)写入内存，之后通过`CreateRemoteThread`执行内存中Shellcode：
## 0x03 APT34组织某样本分析
基本信息
> MD5:6615c410b8d7411ed14946635947325e
文档内容如图所示：
该样本会收集用户主机信息，在代码执行的不同阶段通过DNS隧道回传信息以得知感染进度：
当用户打开文档，会执行`Document_Open`函数。该函数功能为判断是否有鼠标连接，是则获取有写入权限的文件夹路径，创建`b.doc`文档并将解密后文本内容写入。函数运行后于`C:\Users\Public\Documents\SystemFailureReporter`路径下生成文档：
当用户关闭文档，会执行`Document_Close`函数。判断有鼠标连接后，重命名`b.doc`为`SystemFailureReporter.exe`：
创建计划任务：  
创建触发器，一分钟后启动，且每隔五分钟运行一次：
## 0x04 ATP28组织某样本分析
### 分析
基本信息：
> MD5: AABA2CC71C494BFC321CE752EE503C30
文档内容如下：
首先对操作系统进行判断以执行不同函数：
提取指定单元格中的文本：
以`"-----BEGIN CERTIFICATE-----"`和`"-----END
CERTIFICATE-----"`包裹文本，创建一个随机命名的txt文件将文本写入。调用`certutil
-decode`将文档解密并写入`C:\Users\用户名\AppData\Roaming\Microsoft\AddIns\随机名称.exe`中。最终由`Shell`执行该PE文件——伪装成PuTTY的恶意软件：
### 复现
将文本BASE64加密后放入单元格中并设置隐藏。  
编写宏代码，提取特定单元格中的文本并以`"-----BEGIN CERTIFICATE-----"`和`"-----END
CERTIFICATE-----"`包裹，将其写入一TXT文件中。通过`certutil -decode`解密生成exe文件，最终调用执行：
演示效果如下：
## 0x05 FIN7组织某样本分析
### 分析
基本信息：
> MD5: DCFA396E3F500D67AFA7157ADB639819
文档内容如下：
宏代码被加密，EXCEL宏代码解密方式可参考[如何破解解除Excel