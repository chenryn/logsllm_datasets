# BPF之路一bpf系统调用
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
BPF是内核中的顶级模块, 十分精妙, 相关书籍有限, 而且还都是从应用的视角看待BPF的, 我想写一系列文章, 从一个安全研究员的视角观察BPF,
以帮助更多的人学习和研究
linux内核观测技术一书中, 利用源码树中已有的包裹函数作为入门的例子, 层层包装导致编译时依赖繁多, 代码复杂无法一眼看到底层, 不是很友好
我们先明确: **用户空间所有的BPF相关函数, 归根结底都是对于bpf系统调用的包装** , 我们完全可以跳过这些包裹函数, 手写bpf相关系统调用
最好的学习资料永远是man, 我翻译了manual中关于bpf系统调用的部分, 如下
## 系统调用声明
  * bpf – 在扩展BPF映射或者程序上执行命令
    #include 
    int bpf(int cmd, union bpf_attr *attr, unsigned int size);
  * 此函数其实在`linux/bpf.h`中没有定义, 需要手动定义, 其实就是对于系统调用的包裹函数
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)
    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
## 描述
`bpf()`系统调用会执行一系列exBPF相关的操作, eBPF类似于classic BPF(cBPF), 也用于进行网络包的过滤.
对于cBPF与eBPF内核都会在加载前进行静态分析, 以确保安全性
eBPF是cBPF的扩展, 包括调用一些固定的内核帮助函数(通过eBPF提供的BPF_CALL 操作码扩展), 并能访问一些共享数据结构, 如eBPF
maps
## eBPF设计架构
eBPF映射是为了保存多类型数据的通用数据结构. 数据类型都被是为二进制的, 所以用户在创建映射时只需要指明key和value的大小, 换而言之,
一个映射的key或者value可以是任意类型的数据
用户进程可以创建多个映射(用键值对是数据不透明的字节) 并且通过文件描述符fd访问. 不同的eBPF程序可以并行访问相同的映射.
映射里面保存什么取决于用户进程和eBPF程序
有一个特殊的映射类型, 称之为程序数组(program-array). 这个类型的映射保存引用其他eBPF进程的文件描述符. 在这个映射中进行查找时,
程序执行流会被就地重定位到另一个eBPF程序的开头, 并且不会返回到调用程序.嵌套最多32层 因此不会出现无限的套娃. 在运行时,
程序的文件描述符保存在一个可以修改的映射中, 因此程序可以进入某种要求有目的的改变. 程序数组映射中引用的程序都必须事先通过`bpf()`加载到内核中.
如果映射查找失败, 当前程序会继续执行
大体上, eBPF程序都是被用户进程加载, 并在进程退出时自动卸载的. 有些特殊的情况, 如`tc-bpf()`, 就算加载BPF程序的进程退出了,
BPF程序还会驻留在内核中. 在这个例子中, BPF程序的文件描述符被进程关闭后, 由tc子系统保持对BPF程序的引用.
因此一个BPF程序是否在内核中存活取决于 通过bpf()载入内核后如何进一步附加在别的子系统上
每一个eBPF程序都是结束前可以安全执行的指令集合. 内核中一个验证器会静态的检查一个BPF程序是否会终止, 是否安全. 在验证期间,
内核会增加这个eBPF程序使用的所有映射的引用计数, 因此附加的映射不能被移除, 直到程序被卸载
eBPF程序可以附加在各种事件上. 这些事件可以是网络数据包的到达, 追踪时间, 根据网络队列规则的分类事件, 以及未来会被加上的其他事件.
一个新事件会触发eBPF程序的执行, 也可能在eBPF映射中保存事件相关的信息. 除了保存数据, eBPF程序还可能调用一些固定的内核帮助函数集合
同一个eBPF程序可以附加到多个事件, 并且不同的eBPF程序可以访问同一个映射, 示意图如下
    tracing     tracing    tracing    packet      packet     packet
    event A     event B    event C    on eth0     on eth1    on eth2
    |             |         |          |           |          ^
    |             |         |          |           v          |
    --> tracing <--     tracing      socket    tc ingress   tc egress
         prog_1          prog_2      prog_3    classifier    action
         |  |              |           |         prog_4      prog_5
      |---  -----|  |------|          map_3        |           |
    map_1       map_2                              --| map_4 |--    
## 系统调用参数
`bpf()`系统调用的执行的操作是由cmd参数决定的. 每一个操作都有通过`attr`传递的对应参数,
这个参数是指向公用体类型`bpf_attr`的指针, `size`参数代表`attr`指针指向的数据长度
`cmd`可以是下面的值
  * `BPF_MAP_CREATE`: 创建一个映射, 返回一个引用此此映射的文件描述符. close-on-exec标志会自动设置
  * `BPF_MAP_LOOKUP_ELEM`在指定的映射中根据key查找一个元素, 并返回他的值
  * `BPF_MAP_UPDATE_ELEM`在指定映射中创建或者更新一个元素
  * `BPF_MAP_DELETE_ELEM`在指定映射中根据key查找并删除一个元素
  * `BFP_MAP_GET_NEXT_KEY`在指定映射中根据key查找一个元素, 并返回下一个元素的key
  * `BPF_PROG_LOAD`: 验证并加载一个eBPF程序, 返回一个与此程序关联的新文件描述符. close-on-exec标志也会自动加上
公用体`bfp_attr`由多种用于不同bfp命令的匿名结构体组成:
    union bpf_attr {
       struct {    /* 被BPF_MAP_CREATE使用 */
           __u32         map_type;    /* 映射的类型 */
           __u32         key_size;    /* key有多少字节 size of key in bytes */
           __u32         value_size;  /* value有多少字节 size of value in bytes */
           __u32         max_entries; /* 一个map中最多多少条映射maximum number of entries in a map */
       };
       struct {    /* 被BPF_MAP_*_ELEM和BPF_MAP_GET_NEXT_KEY使用  */
           __u32         map_fd;
           __aligned_u64 key;
           union {
               __aligned_u64 value;
               __aligned_u64 next_key;
           };
           __u64         flags;
       };
       struct {    /* 被BPF_PROG_LOAD使用  */
           __u32         prog_type;
           __u32         insn_cnt;
           __aligned_u64 insns;      /* 'const struct bpf_insn *' */
           __aligned_u64 license;    /* 'const char *' */
           __u32         log_level;  /* 验证器的详细级别 */
           __u32         log_size;   /* 用户缓冲区的大小 size of user buffer */
           __aligned_u64 log_buf;    /* 用户提供的char*缓冲区 user supplied 'char *' buffer */
           __u32         kern_version;
                                     /* checked when prog_type=kprobe  (since Linux 4.1) */
       };
    } __attribute__((aligned(8)));
## eBPF映射
映射是一种保存不同类型数据的通用数据结构. 映射可以在不同eBPF内核程序中共享数据, 也可以在用户进程和内核之间共享数据.
每一个映射都有如下属性
  * 类型type
  * 做多多少个元素
  * key有多少字节
  * value有多少字节
下列包裹函数展示了如何使用多种bpf系统调用访问映射, 这些函数通过cmd参数代表不同的操作
###  BPF_MAP_CREATE
`BPF_MAP_CREATE`命令可用于创建新映射, 返回一个引用此映射的文件描述符
    int bpf_create_map(enum bpf_map_type map_type,
        unsigned int key_size,
        unsigned int value_size,
        unsigned int max_entries)
    {
        union bpf_attr attr = {    //设置attr指向的对象
            .map_type = map_type,
            .key_size = key_size,
            .value_size = value_size,
            .max_entries = max_entries
        };
        return bpf(BPF_MAP_CREATE, &attr, sizeof(attr)); //进行系统调用
    }
新映射的种类由`map_type`指定, 属性由`key_size, value_size, max_entries`指定, 如果成功的话返回文件描述符,
失败的话返回-1
`key_size, value_size`属性会在加载时被验证器使用, 来检查程序是否用正确初始化的key来调用`bfp_map_*_elem()`,
检查映射元素value是否超过指定的value_size.
例如一个映射创建时`key_size`为8, eBPF程序调用`bpf_map_lookup_elem(map_fd, fp - 4)`, 程序会被拒绝,
因为kernel内的助手函数`bpf_map_lookup_elem(map_fd, void *key)`期望从key指向的位置读入8字节,
但是`fp-4`(fp是栈顶)起始地址会导致访问栈时越界
类似的, 如果一个映射用`value_size=1`创建, eBPF程序包含
    value = bpf_map_lookup_elem(...);
    *(u32 *) value = 1;
这个程序会被拒绝执行, 因为他访问的value指针超过了value_size指定的1字节限制
目前下列值可用于`map_type`
    enum bpf_map_type {
                          BPF_MAP_TYPE_UNSPEC,  /* Reserve 0 as invalid map type */
                          BPF_MAP_TYPE_HASH,
                          BPF_MAP_TYPE_ARRAY,
                          BPF_MAP_TYPE_PROG_ARRAY,
                          BPF_MAP_TYPE_PERF_EVENT_ARRAY,
                          BPF_MAP_TYPE_PERCPU_HASH,
                          BPF_MAP_TYPE_PERCPU_ARRAY,
                          BPF_MAP_TYPE_STACK_TRACE,
                          BPF_MAP_TYPE_CGROUP_ARRAY,
                          BPF_MAP_TYPE_LRU_HASH,
                          BPF_MAP_TYPE_LRU_PERCPU_HASH,
                          BPF_MAP_TYPE_LPM_TRIE,
                          BPF_MAP_TYPE_ARRAY_OF_MAPS,
                          BPF_MAP_TYPE_HASH_OF_MAPS,
                          BPF_MAP_TYPE_DEVMAP,
                          BPF_MAP_TYPE_SOCKMAP,
                          BPF_MAP_TYPE_CPUMAP,
                          BPF_MAP_TYPE_XSKMAP,
                          BPF_MAP_TYPE_SOCKHASH,
                          BPF_MAP_TYPE_CGROUP_STORAGE,
                          BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
                          BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
                          BPF_MAP_TYPE_QUEUE,
                          BPF_MAP_TYPE_STACK,
                          /* See /usr/include/linux/bpf.h for the full list. */
                      };
  * `map_type`选择内核中一个可用的map实现. 对于所有的map类型, eBPF程序都使用相同的`bpf_map_look_elem()`和`bpf_map_update_elem()`助手函数访问.
###  BPF_MAP_LOOK_ELEM
`BPF_MAP_LOOKUP_ELEM`命令用于在fd指向的映射中根据key查找对应元素
    int bpf_lookup_elem(int fd, const void* key, void* value)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
        };
        return bpf(BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));
    }
如果找到一个元素那么会返回0并把元素的值保存在value中, value必须是指向`value_size`字节的缓冲区
如果没找到, 会返回-1, 并把`errno`设置为`ENOENT`
###  BPF_MAP_UPDATE_ELEM
`BPF_MAP_UPDATE_ELEM`命令在fd引用的映射中用给定的`key/value`去创建或者更新一个元素
    int bpf_update_elem(int fd, const void* key, const void* value, uint64_t flags)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .value = ptr_to_u64(value),
            .flags = flags,
        };
        return bpf(BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));
    }
`flags`参数应该被指定为下面中的一个
  * `BPF_ANY`创建一个新元素或者更新一个已有的
  * `BPF_NOEXIST`只在元素不存在的情况下创建一个新的元素
  * `BPF_EXIST`更新一个已经存在的元素
如果成功的话返回0, 出错返回-1, 并且`errno`会被设置为`EINVAL, EPERM, ENOMEM, E2BIG`
  * `E2BIG`表示映射中的元素数量已经到达了创建时`max_entries`指定的上限
  * `EEXIST`表示flag设置了`BPF_NOEXIST`但是`key`已有对应元素
  * `ENOENT`表示flag设置了`BPF_EXIST`但是`key`没有对应元素
###  BPF_MAP_DELETE_ELEM
`BPF_MAP_DELETE_ELEM`命令用于在fd指向的映射汇总删除键为`key`的元素