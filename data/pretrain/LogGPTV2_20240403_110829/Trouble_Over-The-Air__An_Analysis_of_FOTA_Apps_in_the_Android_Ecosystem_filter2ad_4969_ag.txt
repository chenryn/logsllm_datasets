//www.theverge.com/2019/5/7/18528297/google-io-2019-android-
devices-play-store-total-number-statistic-keynote.
22-Jun-2020].
[Online; accessed
[26] Android Developers. RequiresPermission (Android Support Library).
https://developer.android.com/reference/android/annotation/
RequiresPermission. (accessed 2020-03-23).
[27] Android Developers. RequiresPermission AndroidX.
https://developer.android.com/reference/androidx/annotation/
RequiresPermission. (accessed 2020-03-23).
[28] Android Developers. Volley overview.
https://developer.android.com/training/volley. (accessed 2020-10-28).
[29] Android GoogleSource. Android Studio Code Annotations.
https://android.googlesource.com/platform/tools/adt/idea/+/refs/heads/
mirror-goog-studio-master-dev/android/annotations/android/. (accessed
2020-03-23).
[30] Android Source. Signing Builds for Release.
https://source.android.com/devices/tech/ota/sign_builds. (accessed 2020-
10-28).
[31] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre
Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick
McDaniel. Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. Proceedings of the ACM
Special Interest Group on Programming Languages (SIGPLAN), 2014.
[32] Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien
Octeau, and Sebastian Weisgerber. On demystifying the android
application framework: Re-visiting android permission speciﬁcation
analysis. In 25th USENIX Security Symposium (USENIX Security 16),
pages 1101–1118, Austin, TX, August 2016. USENIX Association.
[33] P. Calciati, K. Kuznetsov, X. Bai, and A. Gorla. What did really change
with the new release of the app? In 2018 IEEE/ACM 15th International
Conference on Mining Software Repositories (MSR), pages 142–152,
2018.
[34] N. T. Cam, V. Pham, and T. Nguyen. Sensitive data leakage detection
in pre-installed applications of custom android ﬁrmware. In 2017 18th
IEEE International Conference on Mobile Data Management (MDM),
pages 340–343, 2017.
[35] A. Continella, Y. Fratantonio, M. Lindorfer, A. Puccetti, A. Zand,
C. Kruegel, and G. Vigna. Obfuscation-resilient privacy leak detection
for mobile apps through differential analysis. In Proceedings of the ISOC
Network and Distributed System Security Symposium (NDSS), pages 1–16,
2017.
[36] Anthony Desnos, Geoffroy Gueguen, and Sebastian Bachmann. Andro-
guard: Reverse engineering, malware and goodware analysis of android ap-
plications... and more (ninja!). https://github.com/androguard/androguard,
2012. [Online; accessed 17-Jan-2020].
[37] Dr Web. Trojan preinstalled on Android devices infects applications’
processes and downloads malicious modules. http://news.drweb.com/
news/?i=11390&lng=en. [Online; accessed 31-March-2019].
[38] Nikolay Elenkov. Android Security Internals: An In-Depth Guide to
Android’s Security Architecture. No Starch Press, San Francisco, CA,
USA, 1st edition, 2014.
[39] Mohamed Elsabagh, Ryan Johnson, Angelos Stavrou, Chaoshun Zuo,
{FIRMSCOPE}: Automatic
Qingchuan Zhao, and Zhiqiang Lin.
uncovering of privilege-escalation vulnerabilities in pre-installed apps in
android ﬁrmware. In 29th {USENIX} Security Symposium ({USENIX}
Security 20), 2020.
[40] Sadegh Farhang, Mehmet Kirdan, Aron Laszka, and Jens Grossklags.
Hey google, what exactly do your security patches tell us? a large-scale
empirical study on android patched vulnerabilities, 05 2019.
[41] Shehroze Farooqi, Álvaro Feal, Tobias Lauinger, Damon McCoy, Zubair
Shaﬁq, and Narseo Vallina-Rodriguez. Understanding incentivized mobile
app installs on google play store. In Proceedings of the ACM Internet
Measurement Conference, pages 696–709, 2020.
[42] P. Faruki, A. Bharmal, V. Laxmi, M. S. Gaur, M. Conti, and M. Ra-
jarajan. Evaluation of android anti-malware techniques against dalvik
bytecode obfuscation. In Trust, Security and Privacy in Computing and
Communications (TrustCom), 2014 IEEE 13th International Conference
on, pages 414–421. IEEE, 2014.
[43] Julien Gamba, Mohammed Rashed, Abbas Razaghpanah, Juan Tapiador,
and Narseo Vallina-Rodriguez. An analysis of pre-installed android
software. In 2020 IEEE Symposium on Security and Privacy (SP), pages
197–213.
[44] Sergiu Gatlan. Trojan Dropper Malware Found in Android App With
100M Downloads, August 2019. https://www.bleepingcomputer.com/
news/security/trojan-dropper-malware-found-in-android-app-with-
100m-downloads/.
[45] Leo A Goodman. Snowball sampling. The annals of mathematical
statistics, 1961.
[46] Google Firebase. Privacy and Security in Firebase.
https://ﬁrebase.google.com/support/privacy. (accessed 2020-10-28).
[47] Johnson, Ryan and Stavrou, Angelos
All Your SMS & Contacts Belong
https://www.blackhat.com/docs/us-17/wednesday/us-17-Johnson-
and Benameur, Azzedine.
to ADUPS & Others.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1619
All-Your-SMS-&-Contacts-Belong-To-Adups-&-Others.pdf. [Online;
accessed 31-March-2019].
[48] Platon Kotzias, Juan Caballero, and Leyla Bilge. How did that get in
my phone? unwanted app distribution on android devices, 2020.
[49] Leak Canary. Leak Canary: A memory leak detection library for Android.
https://github.com/square/leakcanary. (accessed 2020-10-28).
[50] Jonathan Levin. Android Internals::A Confectioner’s Cookbook. Volume
I: The Power User’s View. Technologeeks.com, 1st edition, 2015.
[51] Z. Ma, H. Wang, Y. Guo, and X. Chen. Libradar: Fast and accurate
detection of third-party libraries in android apps. In 2016 IEEE/ACM 38th
International Conference on Software Engineering Companion (ICSE-C),
pages 653–656, 2016.
[52] Ziang Ma, Haoyu Wang, Yao Guo, and Xiangqun Chen. LibRadar: Fast
and Accurate Detection of Third-party Libraries in Android Apps. In
Proceedings of the International Conference on Software Engineering
Companion, 2016.
[53] Mehran Mahmoudi and Sarah Nadi. The android update problem: An
empirical study. In Proceedings of the 15th International Conference on
Mining Software Repositories, MSR ’18, page 220–230, New York, NY,
USA, 2018. Association for Computing Machinery.
[54] D. Maiorca, D. Ariu, I. Corona, M. Aresu, and G. Giacinto. Stealth
attacks: An extended insight into the obfuscation effects on android
malware. Computers & Security, 51:16–31, 2015.
[55] Mihai Grigorescu. Hiddad Android malware gets top user ratings for all
the wrong reasons.
https://www.avira.com/en/blog/top-rated-android-malware.
2020-03-27).
(accessed
[56] Google
Play.
Developer Program Policy, October 2020.
https://support.google.com/googleplay/android-developer/answer/
10177647?hl=en&visit_id=637408674530764193-63172764&rd=1.
[57] Abbas Razaghpanah, Rishab Nithyanand, Narseo Vallina-Rodriguez,
Srikanth Sundaresan, Mark Allman, Christian Kreibich, and Phillipa Gill.
Apps, Trackers, Privacy, and Regulators: A Global Study of the Mobile
Tracking Ecosystem. In Proceedings of the Network and Distributed
System Security Symposium (NDSS), 2018.
[58] John P. Rula, Philipp Richter, Georgios Smaragdakis, and Arthur Berger.
Who’s Left behind? Measuring Adoption of Application Updates at Scale,
page 710–723. Association for Computing Machinery, New York, NY,
USA, 2020.
[59] Paul Sabanal. Hiding Behind ART. https://www.blackhat.com/docs/
asia-15/materials/asia-15-Sabanal-Hiding-Behind-ART-wp.pdf. [Online;
accessed 30-Jun-2020].
[60] Marcos Sebastian, Richard Rivera, Platon Kotzias, and Juan Caballero.
Avclass: A tool for massive malware labeling. In Research in Attacks,
Intrusions, and Defenses, 2016.
[61] Silvia Sebastian and Juan Caballero. Towards attribution in mobile
markets:identifying developer account polymorphism. In Proceedings of
the 27th ACM Conference on Computer and Communications Security.
ACM, 2020.
[62] Güliz Seray Tuncay, Soteris Demetriou, Karan Ganju, and C Gunter.
Resolving the predicament of android custom permissions. 2018.
[63] Kami Vaniea and Yasmeen Rashidi. Tales of software updates: The
process of updating software. pages 3215–3226, 05 2016.
[64] Kami E. Vaniea, Emilee Rader, and Rick Wash. Betrayed by updates:
How negative experiences affect future security. In Proceedings of the
SIGCHI Conference on Human Factors in Computing Systems, CHI ’14,
page 2671–2674, New York, NY, USA, 2014. Association for Computing
Machinery.
[65] VirusTotal. http://www.virustotal.com/.
[66] Francesco Vitale, Joanna McGrenere, Aurélien Tabard, Michel Beaudouin-
Lafon, and Wendy Mackay. High costs and small beneﬁts: A ﬁeld study
of how users experience operating system upgrades. pages 4242–4253,
05 2017.
[67] Fengguo Wei, Sankardas Roy, Xinming Ou, and Robby. Amandroid: A
Precise and General Inter-component Data Flow Analysis Framework
In Proceedings of the ACM
for Security Vetting of Android Apps.
Conference on Computer and Communication Security (CCS), 2014.
[68] Min Zheng, Mingshen Sun, and John CS Lui. Droidray: a security
evaluation system for customized android ﬁrmwares. In Proceedings of
the 9th ACM symposium on Information, computer and communications
security, pages 471–482, 2014.
[69] Shuofei Zhu, Jianjun Shi, Limin Yang, Boqin Qin, Ziyi Zhang, Linhai
Song, and Gang Wang. Measuring and Modeling the Label Dynamics of
Online Anti-Malware Engines. In USENIX Security Symposium, 2020.
[70] Łukasz Siewierski. Challenges in Android Supply Chain Analysis.
https://published-prd.lanyonevents.com/published/rsaus20/sessionsFiles/
17497/2020_USA20_MBS-R09_01_Challenges%20in%20Android%
20Supply%20Chain%20Analysis.pdf. [Online; accessed 2021-03-18].
APPENDIX A
PROJECT MAINLINE DEVICES
As of December 2020, the list of devices in the Project
Mainline beta program includes the Google’s devices Pixel,
Pixel2 and Pixel3/3a and 15 devices from other OEMs: Huawei
Mate 20 Pro, LG G8, Sony Xperia XZ3, OPPO Reno, Vivo
X27, Vivo NEX S, Vivo NEX A, OnePlus 6T, Xiaomi Mi Mix 3
5G, Xiaomi Mi 9, Realme 3 Pro, Asus Zenfone 5z, Nokia 8.1,
Tecno Spark 3 Pro and Essential PH-1.
APPENDIX B
SIGNALS USED IN FOTA FINDER
Table IX describes the set of signals used in FOTA Finder
to identify apps with FOTA or OTA capabilities.
APPENDIX C
FOTA ECOSYSTEM RELATIONSHIPS
Figure 3 showcases the complex supply chain and relation-
ships that exist in Android’s FOTA ecosystem across vendors.
We only depict those package names, vendors, and certiﬁcates
that do not have a 1-to-1 mapping to other elements. The
ﬁgure illustrate the presence of the same FOTA package across
different vendors and brands. This is particularly clear for SFDs
such as Adups and Redstone. The mappings also illustrate the
use of different certiﬁcates and how it adds complexity to the
attribution problem.
APPENDIX D
FIREBASE TERMS OF SERVICE
Taken from Firebase’s terms of services in November 2020:
Firebase support for GDPR and CCPA
On May 25th, 2018, the EU General Data
Protection Regulation (GDPR) replaced the 1995
EU Data Protection Directive. On January 1, 2020,
the California Consumer Privacy Act (CCPA) took
effect. Google is committed to helping our customers
succeed under these privacy regulations, whether
they are large software companies or independent
developers.
The GDPR imposes obligations on data con-
trollers and data processors, and the CCPA im-
poses obligations on businesses and their service
providers. Firebase customers typically act as the
"data controller" (GDPR) or "business" (CCPA) for
any personal data or information about their end-
users they provide to Google in connection with their
use of Firebase, and Google generally operates as
a "data processor" (GDPR) or "service provider"
(CCPA).
This means that data is under the customer’s
control. Customers are responsible for obligations
like fulﬁlling an individual’s rights with respect to
their personal data or information.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1620
Signal
RV
Strength
Strong
F/OTA
FOTA
Silent install
N/A
RI
Strong
FOTA
CMD
Strong
FOTA
No
No
Description
Call to the method verifyPackage from the API
class android.os.RecoverySystem
Call to the method installPackage from the API
class android.os.RecoverySystem
Use of the strings "/cache/recovery/command" and
"–update-package" in the code
A/B
Strong
FOTA
No
Call to the method applyPayload from the API class
android.os.UpdateEngine
OC Weak
FOTA
N/A
Use of the string “otacerts.zip” in the code
OU Weak
FOTA
N/A
Use of the string “ota_update.zip”
Purpose
Signature checking of the downloaded packages to
be installed
Install downloaded packaged by rebooting in recovery
mode
Alternative to the android.os.RecoverySystem API to
install system packages. This is always followed by
a reboot in recovery mode
Install downloaded packages through the A/B method
The “otacerts.zip” ﬁle is the default container for the
certiﬁcates used to verify the packages to be installed.
This is the default, suggested name given to the
downloaded ﬁle containing all the packages to be
installed
Method used to install non-system packages
Method used to delete non-system packages
Alternative method to install non-system packages
using the command line.
Method used in installation intents directed to the
PackageManager when requesting it
to install a
package.
Method used to grant install permissions at runtime
without requiring user approval
Used to revoke install permissions to other packages
in runtime without requiring user approval
Permission needed to install non-system packages
Permission needed to remove non-system packages
PM_I
Strong
OTA
PM_D
Strong
OTA
PMI
Strong
OTA
VND
Strong
OTA
Yes
Yes
Yes
No
GRANT Weak
OTA
Yes
REVOKE Weak
OTA
Yes
PermI
Strong
OTA
N/A
PermD
Strong
OTA
N/A
NAME Weak
F/OTA
N/A
Call to the method installPackage from the API
class android.content.pm.PackageManager
Call to the method deletePackage from the API
class anroid.content.pm.PackageManager
Use of the string "pm install" in the code
of
the
MIME
Use
type
application/vnd.android.package-archive in
an intent
Call
from
android.content.pm.PackageManager
to the method grantRuntimePermission
class
API
the
Call to the method revokeRuntimePermission from
API class android.content.pm.PackageManager
Request
permission
android.permission.INSTALL_PACKAGES
AOSP
the
of
Request
android.permission.DELETE_PACKAGES
AOSP
the
of
permission
Use of the strings “ota”, “update”, “upgrade” or
“install” as part of the package or the APK name)
Common practice observed in many F/OTA apps
Table IX: Features used to automatically discover F/OTA apps.
APPENDIX E
ANDROID DEVELOPER POLICY
The Developer Program Policy explicitly says: “We don’t
allow apps that let users install other apps to their devices.”. In
addition, the policy section regarding device and network abuse
lists this as an example of abusive behavior “apps that install
other apps on a device without the user’s prior consent”.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1621
Figure 3: Relationship among FOTA package names, vendor
and the subject organization from the app certiﬁcate.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:11:06 UTC from IEEE Xplore.  Restrictions apply. 
1622
/com.adups.fota.sysoper(578)doogee(59)bq(383)blackview(27)alps(183)samsung(2008)oukitel(29)advan(138)com.qualcomm.qti.accesscache(529)xiaomi(544)asus(1178)ans(76)lenovo(513)oppo(743)com.huawei.android.hwouc(1003)honor(60)hi6210sft(10)android(2)huawei(1025)com.qualcomm.qti.loadcarrier(570)com.redstone.ota.ui(54)gigaset(27)archos(45)ﬂy(9)com.samsung.android.app.omcagent(856)verizon(52)quanta(4)wind(24)quanta computer inc.(22)gigasetdigital(1)vanzo(6)android(321)adups(80)mediatek(164)wheatek(48)prize(7)huawei(1053)nbbsw(7)bqreaders(331)vinsmart(48)xiaomi(536)aeon(33)chamsion(5)weizhi(1)huaqin(34)ckt(23)xolo(17)mtk(28)kangzhan(33)bestone(15)windmobi(33)wingtech(53)asustek(250)asus(137)asustek computer inc.(649)archos(48)jlink(77)samsung electronics co. ltd.(40)samsung corporation(1987)sprocomm(13)apploaded(26)teleepoch(74)uni(22)lenovo group limited(160)lenovo(355)oppo(743)sony ericsson mobile commns. ab(265)quantatw(7)magcomm(9)revo(53)waterwolrd8(8)qiku(59)zhantang(386)