### Transition Between Protected and Unprotected Input Fields

The complexities associated with transitioning between protected and unprotected input fields can be attributed to the reliance on an untrusted operating system (OS) and applications for all operations except sensitive user input. This approach is adopted to keep the Trusted Computing Base (TCB) small. A user study of Bumpy's input mechanisms [16] highlights several user interface issues. Unicorn mitigates many of these issues by removing the user from the loop during all operations except setup. TrustVisor [19] enhances Flicker's performance by implementing a software-based micro-TPM module that runs on the primary CPU, thereby avoiding the slower TPM hardware.

### Root of Trust Installation

The immutability of uApps images is similar to the Root of Trust Installation (ROTI) system [31]. Trusted parties distribute installers for installing all system software, system-specific data, and secrets. At the end of the installation, ROTI computes the hash of all static files in the root file system and seals a file containing these hashes to the TPM. Sealing ensures that the hash file can only be opened if the system is loaded in the same state (i.e., the same PCR values in the TPM). ROTI enables attestation to remote parties but does not address user authentication.

### Terra: VM-Based Trusted Computing

Terra [7] allows users to simultaneously use open-box VMs (with a commodity OS and user applications) and closed-box VMs (with a custom OS and application) on the same computer. Terra relies on a trusted virtual machine monitor (TVMM), and the hardware and TVMM enable closed-box VMs to identify their software stack to a remote party. However, Terra does not address user attestation and secure UI issues.

### Other Authentication Methods

Significant efforts have been made to protect user credentials from theft or leakage through social engineering. For example, split-trust mechanisms (e.g., Balfanz and Felten [3], and MP-Auth [18]) and two-factor authentication methods protect user credentials (and optionally parts of a session). However, none of these methods ensure the confidentiality of an entire user session. To achieve a malware-free execution environment, Unicorn relies on Dynamic Root of Trust Measurement (DRTM) CPU instructions, which current malware cannot evade. Additionally, Unicorn effectively enables two-factor attestation: malware cannot bypass the attestation checks at either the user-end or the server-end. Since the PSD links attestation with authentication, Unicorn can guarantee both a malware-free user session and resistance to social engineering attacks.

### Conclusion

We have introduced Unicorn, which reduces the burden on the user by removing them from the attestation and authentication process and enables fast switching between a general-purpose user OS and a secure uApp OS using a novel mechanism that avoids a full machine reboot. The key idea behind Unicorn is a PSD that verifies the integrity of the user's computer and uses the user's authentication secrets only if the integrity is verified. Combining this with verification of the attestation by a remote server or the local TPM via sealed storage produces a two-factor authentication, forcing the attacker to gain physical access to the user's computer and compromise the PSD to successfully access Unicorn-protected user data.

In building our Unicorn prototype, we found that much of the standard functionality in commodity desktop systems could be repurposed to make implementing Unicorn easier. Suspend-to-disk functionality was used to save the running state of the user OS to disk, and Intel TXT support for confining buggy device drivers using DMA-remapping was used to protect against malicious commands left on devices by the user OS. We also found that implementing the Unicorn attestor on Android was straightforward, with many required components, such as crypto libraries and QR code libraries, being relatively mature. While commodity code doesn't always meet the ideal security requirements of a small code footprint and strict access controls, it is encouraging that much of the technology needed to implement Unicorn already exists. This suggests that with more engineering effort, a deployable version of Unicorn could be implemented with relatively little effort.

### Acknowledgments

We are grateful to our shepherd Mike Reiter and the anonymous reviewers for their insightful comments and advice. The first author was supported by an NSERC post-doctoral fellowship. This work was also supported by funding from the NSERC ISSNet Strategic Network, an NSERC Engage Grant, and an ORF Grant.

### References

[References listed as provided, with no changes.]

### Appendix: Background

#### Intel Trusted Execution Technology (TXT) and Trusted Platform Module (TPM)

**Trusted Platform Module (TPM):**
A TPM is a hardware chip that provides:
1. Protected storage for persistent secrets (NV-RAM) and Platform Configuration Registers (PCRs).
2. A protected execution environment for cryptographic operations.
3. The ability to generate attestation quote responses with current PCR values.

TPMs implement two types of PCRs: static PCRs, which can only be reset by a system reboot, and dynamic PCRs, which can be reset by DRTM. Each layer of the software stack is measured and stored in a PCR using the extend operation. Remote parties can request attestations of the PCR values using the quote operation. The TPM must be initialized with an Attestation Identity Key (AIK) pair, where the private part never leaves the TPM. The public part is certified by a trusted Privacy Certificate Authority (CA) and distributed to the attestor. A quote request includes a specification of which PCR values need to be retrieved and a nonce for freshness. The TPM computes a hash of the nonce and PCR values, signs the hash with the AIK private key, and returns the signature with the PCR values. TPMs also support sealing and unsealing operations, which bind data to the current platform configuration.

**Intel TXT:**
Intel TXT, formally known as LaGrande Technology (LT), is a set of hardware extensions available on recent Intel CPUs and chipsets that implements DRTM, also known as late launch. DRTM allows dynamic PCRs (PCRs 17-23) to be reset at any time by entering a measured launch environment (MLE). The CPU enters and exits the MLE via GETSEC[SENTER] and GETSEC[SEXIT] instructions. Before executing SENTER, an authenticated code (AC) module is loaded into the processorâ€™s internal memory, which is protected from DMA devices. The AC module is chipset-specific, distributed in binary form by Intel, and authenticated through a digital signature check. SENTER proceeds only if the AC module is authenticated, and the MLE is loaded into a protected memory region. After an MLE has been established, it can facilitate a trusted boot into an OS kernel or hypervisor.