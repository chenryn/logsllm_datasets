0xFFFF_FFFF Blue Box only Determines whether the given Blue Box task is
preemptive (MkIsPreemptiveTask)
0x8000_0000 CutTrace firmware Used for low-level tracing (see Section 6.8.9.2)
call
0x6004 vmm_dispatch Treats certain calls (those belonging to a
specific range of selectors supported by this
dispatcher call) as ultra-fast trapseventually
handled by vmm_ufp()
[osfmk/ppc/vmachmon_asm.s]
0x7FF2 User only Returns the pthread_self valuei.e., the
thread-specific pointer (Thread Info UFT)
0x7FF3 User only Returns floating-point and AltiVec facility
statusi.e., if they are being used by the current
thread (Facility Status UFT)
0x7FF4 Kernel only Loads the Machine State Registernot used on
64-bit hardware (Load MSR UFT)
A comm area (see Section 6.7.6) routine uses the Thread Info UFT for retrieving the thread-specific
(self) pointer, which is also called the per-thread cookie. The pthread_self(3) library function
retrieves this value. The following assembly stub, which directly uses the UFT, retrieves the same
value as the pthread_self() function in a user program.
; my_pthread_self.S
.text
.globl _my_pthread_self
_my_pthread_self:
li r0,0x7FF2
sc
blr
Note that on certain PowerPC processorsfor example, the 970 and the 970FXthe special-purpose
register SPRG3, which Mac OS X uses to hold the per-thread cookie, can be read from user space.
; my_pthread_self_970.S
.text
.globl _my_pthread_self_970
_my_pthread_self_970:
mfspr r3,259 ; 259 is user SPRG3
blr
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 67 of 137
Let us test our versions of pthread_self() by using them in a 32-bit program on both a G4 and a
G5, as shown in Figure 625.
Figure 625. Testing the Thread Info UFT
$ cat main.c
#include 
#include 
extern pthread_t my_pthread_self();
extern pthread_t my_pthread_self_970();
int
main(void)
{
printf("library: %p\n", pthread_self()); // call library function
printf("UFT : %p\n", my_pthread_self()); // use 0x7FF2 UFT
printf("SPRG3 : %p\n", my_pthread_self_970()); // read from SPRG3
return 0;
}
$ machine
ppc970
$ gcc -Wall -o my_pthread_self main.c my_pthread_self.S my_pthread_self_970.S
$ ./my_pthread_self
library: 0xa000ef98
UFT : 0xa000ef98
SPRG3 : 0xa000ef98
$ machine
ppc7450
$ ./my_pthread_self
library: 0xa000ef98
UFT : 0xa000ef98
zsh: illegal hardware instruction ./f
The Facility Status UFT can be used to determine which processor facilitiessuch as floating-point and
AltiVecare being used by the current thread. The following function, which directly uses the UFT,
will return with a word whose bits specify the processor facilities in use.
; my_facstat.S
.text
.globl _my_facstat
_my_facstat:
li r0,0x7FF3
sc
blr
The program in Figure 626 initializes a vector variable only if you run it with one or more arguments
on the command line. Therefore, it should report that AltiVec is being used only if you run it with an
argument.
Figure 626. Testing the Facility Status UFT
// isvector.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 68 of 137
#include 
// defined in osfmk/ppc/thread_act.h
#define vectorUsed 0x20000000
#define floatUsed 0x40000000
#define runningVM 0x80000000
extern int my_facstat(void);
int
main(int argc, char **argv)
{
int facstat;
vector signed int c;
if (argc > 1)
c = (vector signed int){ 1, 2, 3, 4 };
facstat = my_facstat();
printf("%s\n", (facstat & vectorUsed) ? \
"vector used" : "vector not used");
return 0;
}
$ gcc -Wall -o isvector isvector.c my_facstat.S
$ ./isvector
vector not used
$ ./isvector usevector
vector used
6.7.5.1. Fast Traps
A few other traps that need somewhat more processing than ultra-fast traps, or are not as beneficial to
handle so urgently, are handled by shandler() in osfmk/ppc/hw_exception.s. These are called
fast traps, or fastpath calls. Table 616 lists the fastpath calls. Figure 612 shows the handling of both
ultra-fast and fast traps.
Table 616. Fastpath System Calls
Call Number Call Name Purpose
0x7FF1 CthreadSetSelf Sets a thread's identifier. This call is used by
the Pthread library to implement
pthread_set_self(), which is used during
thread creation.
0x7FF5 Null fastpath Does nothing. It branches straight to
exception_exit() in lowmem_vectors.s.
0x7FFA Blue Box interrupt Results in the invocation of
notification syscall_notify_interrupt()
[osfmk/ppc/PseudoKernel.c], which queues
an interrupt for the Blue Box and sets an
asynchronous procedure call (APC) AST. The
Blue Box interrupt handlerbbsetRupt()
[osfmk/ppc/PseudoKernel.c]runs
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 69 of 137
asynchronously to handle the interrupt.
6.7.5.2. Blue Box Calls
The Mac OS X kernel includes support code for the Blue Box virtualizer that provides the Classic
runtime environment. The support is implemented as a small layer of software called the
PseudoKernel, whose functionality is exported via a set of fast/ultra-fast system calls. We came
across these calls in Tables 614, 615, and 616.
The truBlueEnvironment program, which resides within the Resources subdirectory of the Classic
application package (Classic Startup.app), directly uses the 0x6005 (bb_enable_bluebox),
0x6006 (bb_disable_bluebox), 0x6007 (bb_settaskenv), and 0x7FFA (interrupt notification)
system calls.
A specially designated threadthe Blue threadruns Mac OS while handling Blue Box interrupts, traps,
and system calls. Other threads can only issue system calls. The bb_enable_bluebox()
[osfmk/ppc/PseudoKernel.c] PowerPC-only system call is used to enable the support code in the
kernel. It receives three arguments from the user-space caller: a task identifier, a pointer to the trap
table (TWI_TableStart), and a pointer to a descriptor table (Desc_TableStart).
bb_enable_bluebox() passes these arguments in a call to enable_bluebox()
[osfmk/ppc/PseudoKernel.c], which aligns the passed-in descriptor address to a page, wires the
page, and maps it into the kernel. The page holds a BlueThreadTrapDescriptor structure (BTTD_t),
which is declared in osfmk/ppc/PseudoKernel.h. Thereafter, enable_bluebox() initializes several
Blue Boxrelated fields of the thread's machine-specific state (the machine_thread structure). Figure
627 shows pseudocode depicting the operation of enable_bluebox().
Figure 627. Enabling the kernel's Blue Box support
// osfmk/ppc/thread.h
struct machine_thread {
...
// Points to Blue Box Trap descriptor area in kernel (page aligned)
unsigned int bbDescAddr;
// Points to Blue Box Trap descriptor area in user (page aligned)
unsigned int bbUserDA;
unsigned int bbTableStart;// Points to Blue Box Trap dispatch area in user
unsigned int emPendRupts; // Number of pending emulated interruptions
unsigned int bbTaskID; // Opaque task ID for Blue Box threads
unsigned int bbTaskEnv; // Opaque task data reference for Blue Box threads
unsigned int specFlags; // Special flags
...
unsigned int bbTrap; // Blue Box trap vector
unsigned int bbSysCall; // Blue Box syscall vector
unsigned int bbInterrupt; // Blue Box interrupt vector
unsigned int bbPending; // Blue Box pending interrupt vector
...
};
// osfmk/ppc/PseudoKernel.c
kern_return_t
enable_bluebox(host_t host, void *taskID, void *TWI_TableStart,
char *Desc_TableStart)
{
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 70 of 137
thread_t th;
vm_offset_t kerndescaddr, origdescoffset;
kern_return_t ret;
ppnum_t physdescpage;
BTTD_t *bttd;
th = current_thread(); // Get our thread.
// Ensure descriptor is non-NULL.
// Get page offset of the descriptor in 'origdescoffset'.
// Now align descriptor to a page.
// Kernel wire the descriptor in the user's map.
// Map the descriptor's physical page into the kernel's virtual address
// space, calling the resultant address 'kerndescaddr'. Set the 'bttd'
// pointer to 'kerndescaddr'.
// Set the thread's Blue Box machine state.
// Kernel address of the table
th->machine.bbDescAddr = (unsigned int)kerndescaddr + origdescoffset;
// User address of the table
th->machine.bbUserDA = (unsigned int)Desc_TableStart;
// Address of the trap table
th->machine.bbTableStart = (unsigned int)TWI_TableStart;
...
// Remember trap vector.
th->machine.bbTrap = bttd->TrapVector;
// Remember syscall vector.
th->machine.bbSysCall = bttd->SysCallVector;
// Remember interrupt vector.
th->machine.bbPending = bttd->PendingIntVector;
// Ensure Mach system calls are enabled and we are not marked preemptive.
th->machine.specFlags &= ~(bbNoMachSC | bbPreemptive);
// Set that we are the Classic thread.
th->machine.specFlags |= bbThread;
...
}
Once the Blue Box trap and system call tables are established, the PseudoKernel can be invoked[11]
while changing Blue Box interruption state atomically. Both thandler() and shandler() check for
the Blue Box during trap and system call processing, respectively.
[11] The PseudoKernel can be invoked both from PowerPC (native) and 68K (system)
contexts.
thandler() checks the specFlags field of the current activation's machine_thread structure to see
if the bbThread bit is set. If the bit is set, thandler() calls checkassist()
[osfmk/ppc/hw_exception.s], which checks whether all the following conditions hold true.
 The SRR1_PRG_TRAP_BIT bit[12] of SRR1 specifies that this is a trap.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 71 of 137
[12] The kernel uses bit 24 of SRR1 for this purpose. This reserved bit can be
implementation-defined.
The trapped address is in user space.
This is not an ASTthat is, the trap type is not a T_AST.
The trap number is not out of rangethat is, it is not more than a predefined maximum.
If all of these conditions are satisfied, checkassist() branches to atomic_switch_trap()
[osfmk/ppc/atomic_switch.s], which loads the trap table (the bbTrap field of the machine_thread
structure) in GPR5 and jumps to .L_CallPseudoKernel() [osfmk/ppc/atomic_switch.s].
shandler() checks whether system calls are being redirected to the Blue Box by examining the value
of the bbNoMachSC bit of the specFlags field. If this bit is set, shandler() calls
atomic_switch_syscall() [osfmk/ppc/atomic_switch.s], which loads the system call table (the
bbSysCall field of the machine_thread structure) in GPR5 and falls through
to .L_CallPseudoKernel().
In both cases, .L_CallPseudoKernel()among other thingsstores the vector contained in GPR5 in the
saved SRR0 as the instruction at which execution will resume. Thereafter, it jumps to fastexit()
[osfmk/ppc/hw_exception.s], which jumps to exception_exit()
[osfmk/ppc/lowmem_vectors.s], thus causing a return to the caller.
A particular Blue Box trap value (bbMaxTrap) is used to simulate a return-from-interrupt from the
PseudoKernel to user context. Returning Blue Box traps and system calls use this trap, which results
in the invocation of .L_ExitPseudoKernel() [osfmk/ppc/atomic_switch.s].
6.7.6. The Commpage
The kernel reserves the last eight pages of every address space for the kernel-user comm areaalso
referred to as the commpage. Besides being wired in kernel memory, these pages are mapped (shared
and read-only) into the address space of every process. Their contents include code and data that are
frequently accessed systemwide. The following are examples of commpage contents:
Specifications of processor features available on the machine, such as whether the processor is
64-bit, what the cache-line size is, and whether AltiVec is present
Frequently used routines, such as functions for copying, moving, and zeroing memory; for
using spinlocks; for flushing the data cache and invalidating the instruction cache; and for
retrieving the per-thread cookie
Various time-related values maintained by the kernel, allowing the current seconds and
microseconds to be retrieved by user programs without making system calls
There are separate comm areas for 32-bit and 64-bit address spaces, although they are conceptually
similar. We will discuss only the 32-bit comm area in this section.
Using the end of the address space for the comm area has an important benefit: It is possible to access
both code and data in the comm area from anywhere in the address space, without involving the
dynamic link editor or requiring complex address calculations. Absolute unconditional branch
instructions, such as ba, bca, and bla, can branch to a location in the comm area from anywhere
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 72 of 137
because they have enough bits in their target address encoding fields to allow them to reach the comm
area pages using a sign-extended target address specification. Similarly, absolute loads and stores can
comfortably access the comm area. Consequently, accessing the comm area is both efficient and
convenient.
The comm area is populated during kernel initialization in a processor-specific and platform-specific
manner. commpage_populate() [osfmk/ppc/commpage/commpage.c] performs this initialization. In
fact, functionality contained in the comm area can be considered as processor capabilitiesa software
extension to the native instruction set. Various comm-area-related constants are defined in
osfmk/ppc/cpu_capabilities.h.
// osfmk/ppc/cpu_capabilities.h
// Start at page -8, ie 0xFFFF8000
#define _COMM_PAGE_BASE_ADDRESS (-8*4096)
// Reserved length of entire comm area
#define _COMM_PAGE_AREA_LENGTH (7*4096)
// Mac OS X uses two pages so far
#define _COMM_PAGE_AREA_USED (2*4096)
// The Objective-C runtime fixed address page to optimize message dispatch
#define OBJC_PAGE_BASE_ADDRESS (-20*4096)
// Data in the comm page
...
// Code in the comm page (routines)
...
// Used by gettimeofday()
#define _COMM_PAGE_GETTIMEOFDAY \
(_COMM_PAGE_BASE_ADDRESS+0x2e0)
...
The comm area's actual maximum length is seven pages (not eight) since Mach's virtual memory
subsystem does not map the last page of an address space.
Each routine in the commpage is described by a commpage_descriptor structure, which is declared
in osfmk/ppc/commpage/commpage.h.
// osfmk/ppc/cpu_capabilities.h
typedef struct commpage_descriptor {
short code_offset; // offset to code from this descriptor
short code_length; // length in bytes
short commpage_address; // put at this address
short special; // special handling bits for DCBA, SYNC, etc.