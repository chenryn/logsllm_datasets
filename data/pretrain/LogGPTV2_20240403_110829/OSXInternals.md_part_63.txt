### 优化后的文本

---

#### 系统调用和陷阱处理

- **0xFFFF_FFFF (Blue Box)**：仅用于确定给定的Blue Box任务是否为抢占式任务（MkIsPreemptiveTask）。
- **0x8000_0000 (CutTrace firmware)**：用于低级跟踪（参见第6.8.9.2节）。
- **0x6004 (vmm_dispatch)**：将特定范围的选择器调用视为超快陷阱事件，最终由`vmm_ufp()`处理。
- **0x7FF2 (用户专用)**：返回`pthread_self`值，即线程特定指针（Thread Info UFT）。
- **0x7FF3 (用户专用)**：返回当前线程使用的浮点数和AltiVec设施状态（Facility Status UFT）。
- **0x7FF4 (内核专用)**：加载机器状态寄存器，在64位硬件上不使用（Load MSR UFT）。

#### 共享区域 (Comm Area) 常规用途

共享区域（参见第6.7.6节）中的例程使用Thread Info UFT来检索线程特定（self）指针，也称为每线程cookie。`pthread_self(3)`库函数可以获取此值。以下汇编代码直接使用UFT，与用户程序中的`pthread_self()`函数返回相同的值。

```assembly
; my_pthread_self.S
.text
.globl _my_pthread_self
_my_pthread_self:
    li r0, 0x7FF2
    sc
    blr
```

在某些PowerPC处理器（例如970和970FX）上，特殊目的寄存器SPRG3（Mac OS X用于存储每线程cookie）可以从用户空间读取。

```assembly
; my_pthread_self_970.S
.text
.globl _my_pthread_self_970
_my_pthread_self_970:
    mfspr r3, 259 ; 259是用户SPRG3
    blr
```

让我们通过在G4和G5上运行一个32位程序来测试我们的`pthread_self()`版本，如图625所示。

**图625. 测试Thread Info UFT**

```bash
$ cat main.c
#include <stdio.h>
#include <pthread.h>
extern pthread_t my_pthread_self();
extern pthread_t my_pthread_self_970();
int main(void) {
    printf("library: %p\n", pthread_self()); // 调用库函数
    printf("UFT : %p\n", my_pthread_self()); // 使用0x7FF2 UFT
    printf("SPRG3 : %p\n", my_pthread_self_970()); // 从SPRG3读取
    return 0;
}
$ machine
ppc970
$ gcc -Wall -o my_pthread_self main.c my_pthread_self.S my_pthread_self_970.S
$ ./my_pthread_self
library: 0xa000ef98
UFT : 0xa000ef98
SPRG3 : 0xa000ef98
$ machine
ppc7450
$ ./my_pthread_self
library: 0xa000ef98
UFT : 0xa000ef98
zsh: illegal hardware instruction ./f
```

**Facility Status UFT** 可以用来确定当前线程正在使用的处理器设施（如浮点数和AltiVec）。以下函数直接使用UFT，返回一个字，其位指定正在使用的处理器设施。

```assembly
; my_facstat.S
.text
.globl _my_facstat
_my_facstat:
    li r0, 0x7FF3
    sc
    blr
```

程序如图626所示，只有在命令行带有参数时才会初始化向量变量。因此，它只会在有参数的情况下报告正在使用AltiVec。

**图626. 测试Facility Status UFT**

```c
// isvector.c
#include <stdio.h>
#define vectorUsed 0x20000000
#define floatUsed 0x40000000
#define runningVM 0x80000000
extern int my_facstat(void);
int main(int argc, char **argv) {
    int facstat;
    vector signed int c;
    if (argc > 1)
        c = (vector signed int){ 1, 2, 3, 4 };
    facstat = my_facstat();
    printf("%s\n", (facstat & vectorUsed) ? "vector used" : "vector not used");
    return 0;
}
$ gcc -Wall -o isvector isvector.c my_facstat.S
$ ./isvector
vector not used
$ ./isvector usevector
vector used
```

#### 快速陷阱 (Fast Traps)

一些需要比超快陷阱更多处理或不需要紧急处理的陷阱由`osfmk/ppc/hw_exception.s`中的`shandler()`处理。这些被称为快速陷阱或快速路径调用。表616列出了快速路径调用。图612显示了超快陷阱和快速陷阱的处理过程。

**表616. 快速路径系统调用**

| 调用编号 | 调用名称 | 目的 |
| --- | --- | --- |
| 0x7FF1 | CthreadSetSelf | 设置线程标识符。Pthread库使用此调用实现`pthread_set_self()`，在线程创建期间使用。 |
| 0x7FF5 | Null fastpath | 无操作。直接跳转到`lowmem_vectors.s`中的`exception_exit()`。 |
| 0x7FFA | Blue Box中断 | 结果调用`syscall_notify_interrupt()`[osfmk/ppc/PseudoKernel.c]，将中断排队并设置异步过程调用(APC) AST。 |

#### Blue Box调用

Mac OS X内核包含支持Blue Box虚拟化器的代码，提供Classic运行时环境。该支持实现为一小层软件，称为PseudoKernel，其功能通过一组快速/超快速系统调用导出。我们在表614、615和616中遇到了这些调用。

位于Classic应用程序包（Classic Startup.app）的Resources子目录中的`truBlueEnvironment`程序直接使用0x6005 (`bb_enable_bluebox`)、0x6006 (`bb_disable_bluebox`)、0x6007 (`bb_settaskenv`) 和 0x7FFA (中断通知) 系统调用。

一个特别指定的线程——Blue线程——在处理Blue Box中断、陷阱和系统调用时运行Mac OS。其他线程只能发出系统调用。`bb_enable_bluebox()` [osfmk/ppc/PseudoKernel.c] 是一个仅限PowerPC的系统调用，用于启用内核中的支持代码。它从用户空间调用者接收三个参数：任务标识符、陷阱表指针（TWI_TableStart）和描述符表指针（Desc_TableStart）。

`bb_enable_bluebox()` 将这些参数传递给`enable_bluebox()` [osfmk/ppc/PseudoKernel.c]，后者对传入的描述符地址进行页面对齐、固定页面并将其映射到内核中。该页面包含一个`BlueThreadTrapDescriptor`结构（BTTD_t），在`osfmk/ppc/PseudoKernel.h`中声明。此后，`enable_bluebox()` 初始化线程的机器特定状态（`machine_thread`结构）中的多个Blue Box相关字段。图627显示了`enable_bluebox()`的操作伪代码。

**图627. 启用内核的Blue Box支持**

```c
// osfmk/ppc/thread.h
struct machine_thread {
    ...
    unsigned int bbDescAddr; // 指向内核中的Blue Box Trap描述符区域（页面对齐）
    unsigned int bbUserDA;   // 指向用户中的Blue Box Trap描述符区域（页面对齐）
    unsigned int bbTableStart; // 指向用户中的Blue Box Trap分发区域
    unsigned int emPendRupts; // 待处理的模拟中断数量
    unsigned int bbTaskID;   // Blue Box线程的不透明任务ID
    unsigned int bbTaskEnv;  // Blue Box线程的不透明任务数据引用
    unsigned int specFlags;  // 特殊标志
    ...
    unsigned int bbTrap;     // Blue Box陷阱向量
    unsigned int bbSysCall;  // Blue Box系统调用向量
    unsigned int bbInterrupt; // Blue Box中断向量
    unsigned int bbPending;  // Blue Box待处理中断向量
    ...
};

// osfmk/ppc/PseudoKernel.c
kern_return_t enable_bluebox(host_t host, void *taskID, void *TWI_TableStart, char *Desc_TableStart) {
    thread_t th;
    vm_offset_t kerndescaddr, origdescoffset;
    kern_return_t ret;
    ppnum_t physdescpage;
    BTTD_t *bttd;
    th = current_thread(); // 获取当前线程
    // 确保描述符非空
    // 获取描述符在'origdescoffset'中的页面偏移量
    // 对描述符进行页面对齐
    // 在用户的映射中固定描述符
    // 将描述符的物理页面映射到内核的虚拟地址空间，结果地址为'kerndescaddr'。将'bttd'指针设置为'kerndescaddr'。
    // 设置线程的Blue Box机器状态
    th->machine.bbDescAddr = (unsigned int)kerndescaddr + origdescoffset; // 内核中的表地址
    th->machine.bbUserDA = (unsigned int)Desc_TableStart; // 用户中的表地址
    th->machine.bbTableStart = (unsigned int)TWI_TableStart; // 陷阱表地址
    ...
    // 记住陷阱向量
    th->machine.bbTrap = bttd->TrapVector;
    // 记住系统调用向量
    th->machine.bbSysCall = bttd->SysCallVector;
    // 记住中断向量
    th->machine.bbPending = bttd->PendingIntVector;
    // 确保启用了Mach系统调用且未标记为抢占式
    th->machine.specFlags &= ~(bbNoMachSC | bbPreemptive);
    // 设置为Classic线程
    th->machine.specFlags |= bbThread;
    ...
}
```

一旦建立了Blue Box陷阱和系统调用表，PseudoKernel就可以在原子地改变Blue Box中断状态时被调用。`thandler()` 和 `shandler()` 分别在陷阱和系统调用处理过程中检查Blue Box。

`thandler()` 检查当前激活的`machine_thread`结构的`specFlags`字段，看是否设置了`bbThread`位。如果设置了该位，`thandler()` 调用 `checkassist()` [osfmk/ppc/hw_exception.s]，检查以下条件是否全部满足：

- SRR1的SRR1_PRG_TRAP_BIT位指定这是一个陷阱。
- 陷阱地址在用户空间中。
- 这不是一个AST，即陷阱类型不是T_AST。
- 陷阱号不在范围内，即不超过预定义的最大值。

如果所有这些条件都满足，`checkassist()` 分支到 `atomic_switch_trap()` [osfmk/ppc/atomic_switch.s]，将陷阱表（`machine_thread`结构的`bbTrap`字段）加载到GPR5，并跳转到`.L_CallPseudoKernel()` [osfmk/ppc/atomic_switch.s]。

`shandler()` 检查系统调用是否被重定向到Blue Box，方法是检查`specFlags`字段的`bbNoMachSC`位。如果设置了该位，`shandler()` 调用 `atomic_switch_syscall()` [osfmk/ppc/atomic_switch.s]，将系统调用表（`machine_thread`结构的`bbSysCall`字段）加载到GPR5，并继续执行`.L_CallPseudoKernel()`。

在这两种情况下，`.L_CallPseudoKernel()` 存储GPR5中的向量作为保存的SRR0中的指令地址，然后跳转到`fastexit()` [osfmk/ppc/hw_exception.s]，再跳转到`exception_exit()` [osfmk/ppc/lowmem_vectors.s]，从而返回调用者。

特定的Blue Box陷阱值（`bbMaxTrap`）用于模拟从PseudoKernel返回到用户上下文的中断返回。返回的Blue Box陷阱和系统调用使用此陷阱，导致调用`.L_ExitPseudoKernel()` [osfmk/ppc/atomic_switch.s]。

#### 共享区域 (Comm Area)

内核为每个地址空间保留最后八个页面作为内核-用户共享区域，也称为commpage。除了在内核内存中固定外，这些页面还映射（共享和只读）到每个进程的地址空间。它们的内容包括系统范围内频繁访问的代码和数据。以下是一些commpage内容的例子：

- 处理器特性规格，如处理器是否为64位、缓存行大小以及是否存在AltiVec。
- 频繁使用的例程，如复制、移动和清零内存的函数；使用自旋锁的函数；刷新数据缓存和使指令缓存无效的函数；以及检索每线程cookie的函数。
- 内核维护的各种时间相关值，允许用户程序在不进行系统调用的情况下检索当前秒和微秒。

对于32位和64位地址空间，存在单独的commpage，尽管它们在概念上相似。本节仅讨论32位commpage。

使用地址空间的末尾作为commpage有一个重要好处：可以从地址空间的任何位置访问commpage中的代码和数据，而无需涉及动态链接编辑器或复杂的地址计算。绝对无条件分支指令（如`ba`、`bca`和`bla`）可以从任何地方分支到commpage中的位置，因为它们的目标地址编码字段有足够的位数，可以使用符号扩展的目标地址规范到达commpage页面。类似地，绝对加载和存储也可以轻松访问commpage。因此，访问commpage既高效又方便。

commpage在内核初始化过程中以处理器特定和平台特定的方式填充。`commpage_populate()` [osfmk/ppc/commpage/commpage.c] 执行此初始化。事实上，commpage中的功能可以被视为处理器能力——对原生指令集的软件扩展。各种commpage相关的常量在`osfmk/ppc/cpu_capabilities.h`中定义。

```c
// osfmk/ppc/cpu_capabilities.h
#define _COMM_PAGE_BASE_ADDRESS (-8*4096) // 从页面-8开始，即0xFFFF8000
#define _COMM_PAGE_AREA_LENGTH (7*4096) // 整个commpage区域的预留长度
#define _COMM_PAGE_AREA_USED (2*4096) // Mac OS X目前使用两个页面
#define OBJC_PAGE_BASE_ADDRESS (-20*4096) // Objective-C运行时固定地址页面，用于优化消息分派
...
#define _COMM_PAGE_GETTIMEOFDAY (_COMM_PAGE_BASE_ADDRESS+0x2e0) // 用于gettimeofday()
...
```

commpage的实际最大长度是七个页面（而不是八个），因为Mach的虚拟内存子系统不会映射地址空间的最后一个页面。

commpage中的每个例程都由一个`commpage_descriptor`结构描述，该结构在`osfmk/ppc/commpage/commpage.h`中声明。

```c
// osfmk/ppc/cpu_capabilities.h
typedef struct commpage_descriptor {
    short code_offset; // 从此描述符到代码的偏移量
    short code_length; // 代码长度（字节）
    short commpage_address; // 放在此地址
    short special; // DCBA、SYNC等特殊处理位
} commpage_descriptor;
```

---