Park Board of Elections in late February 2008, and, after
considering other voting systems, the Board voted to rec-
ommend a contract with Scantegrity in June 2008. Fol-
lowing a public presentation to the City Council in July
2008, the MOU was signed in late November 2008, about
nine months after the initial contact.
3For the exact laws used by Takoma Park, see page 22 of http:
//www.takomaparkmd.gov/code/pdf/charter.pdf. Sec-
tion (f), concerning eliminating multiple candidates, was used in our
implementation for tie-breaking only.
3
The SVST held an open workshop in February 2009 to
discuss the use of Scantegrity in both the mock and real
elections. This workshop was held at the Takoma Park
Community Center and was attended by Board of Elec-
tion members, the City Clerk, current members (and a
retired member) from the Montgomery County Board of
Elections, as well as a representative each from the Pew
Trust and FairVote. Following the mock election in April
2009, the SVST proposed a redesigned system taking
into consideration feedback from voters and poll work-
ers (through surveys) and the Board of Elections. The
Board voted to recommend use of the redesigned system
in July 2009; this was made ofﬁcial in the city election
ordinance in September 2009. 4 Beginning around June
2009, a meeting with representatives of the SVST was
on the agenda of most monthly Board of Election meet-
ings. Additionally, SVST members met many times with
the City Clerk and the Chair of the Board of Elections to
plan for the election.
The ﬁnal list of candidates was available approxi-
mately a month before the election, on October 2. The
Scantegrity meetings initializing the data and ballots
were held in October (see Section 6), as was a ﬁnal work-
shop to test the system. Absentee ballots were sent out
by the City Clerk in the middle of October. The SVST
delivered ballots to the City Clerk in late October, and
early voting began almost a week before the election, on
October 28. Poll worker training sessions were held by
the city on October 28 and 31, and polling on November
3, 2009, from 7 am to 8 pm. The ﬁnal Scantegrity audits
were completed on 17 December 2010; all auditors were
of the opinion that the election outcomes were correct
(for details see section 6).
4 Scantegrity Overview
In this section, we give an overview of the Scantegrity
system. For more detailed descriptions, see [7, 8].
Voter Experience At a high level, the voter experience
is as follows. First, a voter checks in at the polling place
and receives a Scantegrity ballot (See Figure 2) with a
privacy sleeve. The privacy sleeve is used to cover the
ballot and keep private the contents of the ballot. Inside
the voting booth, there is a special “decoder pen” and a
stack of blank “voter veriﬁcation cards.” The voter uses
the decoder pen to mark the ballot. As on a conventional
optical scan ballot, she ﬁlls in the bubble next to each of
her selections. Marking a bubble with the decoder pen
simultaneously leaves a dark mark inside the bubble and
4See http://www.takomaparkmd.gov/clerk/agenda/
items/2009/090809-3.pdf, section 2-D, page 2.
reveals a previously hidden conﬁrmation code printed in
invisible ink.
If the voter wishes to verify her vote later on the elec-
tion website, she can copy her ballot ID and her revealed
conﬁrmation codes onto a voter veriﬁcation card. She
keeps the veriﬁcation card for future reference. She then
takes her ballot to the scanning station and feeds the bal-
lot into an optical scanner, which reads the ballot ID and
the marked bubbles.
If a voter makes a mistake, she can ask a poll worker
to replace her ballot with a new one. The ﬁrst ballot is
marked “spoiled,” and its ballot ID is added to the list of
spoiled ballot IDs maintained by the election judges.
The voter can verify her vote on the election website
by checking that her revealed conﬁrmation codes and
ballot ID have been posted correctly.
If she ﬁnds any
discrepancy, the voter can ﬁle a complaint through the
website, within a complaint period. When ﬁling a com-
plaint, the voter must provide the conﬁrmation codes that
were revealed on her ballot as evidence of the validity of
the complaint.
Ballots The Scantegrity ballot looks similar to a con-
ventional optical scan ballot (see Figure 2 for a sam-
ple ballot used in the election). It contains a list of the
choices and bubbles beside each choice. Marking a bub-
ble reveals a random 3-digit conﬁrmation code.
Conﬁrmation Codes The conﬁrmation codes are
unique within each contest on each ballot, and are gener-
ated independently and uniformly pseudorandomly. The
conﬁrmation code corresponding to any given choice on
any given ballot is hidden and unknown to any voter until
the voter marks the bubble for that choice.
Digital Audit Trail Prior to the election, a group of
election trustees secret-share a seed to a pseudorandom
number generator (PRNG). The trustees then input their
shares to a trusted workstation to generate the pseudo-
random conﬁrmation codes for all ballots, as well as a
set of tables of cryptographic commitments to form the
digital audit trail. These tables allow individual voters to
verify that their votes have been included in the tally, and
allow any interested party to verify that the tally has been
computed correctly, without revealing how any individ-
ual voter voted.
Auditing After the election, any interested party can
audit the election by using software to check the correct-
ness of the data and ﬁnal tally on the election website.
Additionally, at the polling place on the day of the elec-
tion, any interested party can choose to audit the printing
of the ballots. A print audit consists of marking all of the
4
bubbles on a ballot, and then either making a photocopy
of the fully-marked ballot or copying down all of the re-
vealed conﬁrmation codes. The ballot ID is recorded by
an election judge as audited. After the election, one can
check that all of the conﬁrmation codes on the audited
ballot, and their correspondence with ballot choices, are
posted correctly on the election website.
5
Implementation
The election required a cryptographic backend, a scan-
ner, and a website. These 3 components form the ba-
sic election system and their interaction is described in
Figure 1. In addition, Takoma Park required software to
resolve write-in candidate selections and produce a for-
matted tally on election night.
Scantegrity protects against manipulation of election
results and maintains, but does not improve, the privacy
properties of optical scan voting systems that use se-
rial numbers. To compromise voter privacy using Scant-
egrity features, an attacker must associate receipts to vot-
ers and determine what conﬁrmation numbers are as-
sociated to each candidate. This is similar to violat-
ing privacy by other means; for example, an attacker
could compromise the scanner and determine the order
in which voters used the device, or examine physical
records and associate serial numbers to voters. The scan-
ner and backend components protect voter privacy, but
the website and the write-in candidate resolver do not
because they work with public information only.
Each component is written in Java. We describe the
implementation and functions of each one in the follow-
ing sections.
Backend The cryptographic backend that provides the
digital audit trail is a modiﬁed version of the Punchscan
backend [21]. This backend is written in Java 1.5 using
the BouncyCastle cryptography library. 5 Key manage-
ment in the Punchscan backend is handled by a simple
threshold [25] cryptosystem that asks for a username and
password from the election ofﬁcials.
We chose the Punchscan backend over newer propos-
als [7] because it had already been implemented and
tested in previous elections [13, 28]. At the interface be-
tween the Scantegrity frontend and the Punchscan back-
end, as described in [23],
the permutations used by
Punchscan are matched to a permutation of precomputed
conﬁrmation codes for Scantegrity that correspond to the
permutation of codes printed on the ballot.
The Punchscan backend uses a two-stage mix process
based on cryptographic commitments published before
the election. Each mix, the left mix and the right mix,
5http://www.bouncycastle.org
takes marked positions as input, shufﬂes the ballots, and
reorders each marked position on each ballot according
to a prescribed (pre-committed) permutation. The result
is the set of cleartext votes, where position 0 corresponds
to candidate 0, 1 to 1, etc. Between the two mixes, for
example, position 0 may in fact correspond to candidate
5, depending on the permutation in the right mix.
The Punchscan backend partitions [22] each contest
such that each contest is treated as an independent elec-
tion with a separate set of commitments. In the case of
Takoma Park, each ward race and the mayor’s race are
treated as separate elections. (The announcement of sep-
arate mayoral race vote counts for each ward is required
by Takoma Park). The scanner is responsible for creating
the input ﬁles for each individual election.
Election ofﬁcials hold a series of meetings using the
backend to conduct an election. Before the election, dur-
ing Meeting 1 (Initialization), they choose passwords that
are shares of a master key that generates all other data for
the election in a deterministic fashion. After each meet-
ing, secret data (such as the mapping from conﬁrmation
codes to candidates) is erased from the hard drive and re-
generated from the passwords when it is needed again.
In Meeting 1 the backend software creates a digital au-
dit trail by committing to the Punchscan representation
of candidate choices and to the mixset: the left and right
mix operations for each ballot. Later, during Meeting 2
(Pre-Election Audit), the backend software responds to
an audit of the trail demonstrating that the mixset de-
crypts ballots correctly. At this time, the backend also
commits to the Scantegrity front-end, consisting of the
linkage between the Scantegrity front-end and its Punch-
scan backend used for decryption.
After the election, election ofﬁcials run Meeting 3 (Re-
sults), publishing the election results and the voted con-
ﬁrmation numbers. For the purposes of the tally audit,
the system also publishes the outputs of the left and right
mixes. In Meeting 4 (Post-Election Audit), ofﬁcials re-
spond to the challenges of the tally computation audit.
Either the entire left mix or the entire right mix opera-
tions are revealed, and the auditor checks them against
data published in Meeting 3.
The Meeting 4 audit catches, with probability one half,
a voting system that cheats in the tally computation. To
provide higher conﬁdence in the results, the backend cre-
ates multiple sets of left and right mixes; in Takoma Park,
we created 40 sets for each election, 20 of which were
audited. Given 2 contests per ballot and 40 sets of left
and right mixes, there are a total of 160 commitments
per ballot in the audit trail, in addition to a commitment
per contestant per ballot for each conﬁrmation number
(15-18, depending on the Ward).
The implementation uses two classes of “random”
number sources. The ﬁrst is used to generate the dig-
5
Figure 1: Election Workﬂow. The core election work ﬂow in Scantegrity is similar to an optical scan election:
a software backend creates ballot images that are printed, used by voters, and scanned. The results are fed to the
backend which creates the tally. The audit capacity is provided by 3 extra steps: (1) create the initial digital audit trail
and audit a portion of it, (2) audit the ballots to ensure correctness when printing, and (3) audit the ﬁnal tally.
ital audit trail, and the second is used for auditing the
trail. Both types of sources must be unpredictable to an
adversary, and we describe each in turn.
Digital Audit Trail The Punchscan backend generates
the mixes and commitments using entropy provided by
each election ofﬁcial during initialization of the thresh-
hold encryption. This provided a “seed” for a pseudo-
random number generator (based on the SHA256 hash
function).
We also used this random source to generate the con-
ﬁrmation numbers when changing the Punchscan back-
end to support Scantegrity. Unfortunately, we introduced
an error in the generation when switching from alphanu-
meric to numeric conﬁrmation numbers as a result of
ﬁndings in the Mock election (see Section 2). This re-
sulted in approximately 8.5 bits of entropy as opposed to
the expected 10 bits. We discovered this error after we
started printing and it was too late to regenerate the audit
trail.
The error increased the chance that an adversary could
guess an unseen conﬁrmation code to approximately one
in 360 rather than the intended one in 1000; a small de-
crease in the protection afforded against malicious voters
trying to guess unseen codes in order to discredit the sys-
tem.
Auditing Random numbers are needed to generate
challenges for the various auditing steps (print audit, ran-
domized partial checking). These numbers should be un-
predictable in advance to an adversary. They should also
be “veriﬁable” after the fact as having come from a “truly
random” source that is not manipulable by an adversary.
We chose to use the closing prices of the stocks in
the Dow Jones Industrial Average as our veriﬁable but
unpredictable source to seed the pseudorandom number
generator (the use of stock prices for this purpose was
ﬁrst described in [11]). These prices are sufﬁciently un-
predictable for our purposes, yet veriﬁable after the fact.
However, it turns out that post-closing “adjustments” can
sometimes be made to the closing prices, which can
make these prices less than ideal for our purposes in
terms of veriﬁability.
Scanner Software The original intent of Scantegrity
was to build on top of an existing optical scan system.
There was no pre-existing optical scan system in use at
Takoma Park, so we implemented a simple system using
EeePC 900 netbooks and Fujitsu 6140 scanners.
The scanning software is written in Java 1.6. It uses a
bash shell script to call the SANE scanimage program 6
and polls a directory on the ﬁlesystem to acquire bal-
lot images. Once an image is acquired it uses circular
alignment marks to adjust the image, reads the barcode
using the ZXing QRCode Library, 7 and uses a simple
threshold algorithm to determine if a mark is made on
the ballot.
Individual races on each ballot are identiﬁed by ward
information in the barcode, which is non-sequential and
randomly generated. The ballot id in the barcode and
the web veriﬁcation numbers on each ballot are different
numbers, and the association between each number type
is protected by the backend system. Write-in candidate
areas, if that candidate is selected by the voter, are stored
as clipped raw images with the ballot scan results. Ballot
scan results are stored in a random location in a memory
mapped ﬁle.
The current implementation of the scanning software
does not protect data in transit to the backend, which
poses a risk for denial of service. Checking of the cor-
rectness of the scanner is done through the Scantegrity
audit. The data produced by the scanner does not com-
promise voter privacy, but—assuming an attacker could
intercept scanner data—voter privacy could be compro-
mised at the scanner through unique write-in candidates
on the ballot, through a compromised scanner, by bugs
in the implementation, or by relying on the voter to make
readable copies of the barcode to get a ballot id.
6http://www.sane-project.org/
7http://code.google.com/p/zxing/
6
BackendWebsiteBackendPrinterBackendVoterWebsiteScannerWebsiteBackendWebsiteCore Election WorkﬂowTabulator/Write-In Software At
the request of
Takoma Park we created an additional piece of software,
the Election Resolution Manager (ERM), that allows
election judges to manually determine for each write-in
vote what candidate the vote should be counted toward.
The other responsibility of the ERM is to act as part of
the backend. It collates data from each scanner and pre-
pares the input ﬁles for the backend.
To resolve write-ins with this software, the user cy-
cles through each image, and either types in the name of
the intended candidate or selects the name from a list of