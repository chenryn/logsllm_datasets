# Tamper-Resistant LikeJacking Protection

**Authors:** Martin Johns and Sebastian Lekies  
**Affiliation:** SAP Security Research, Germany  
**Website:** [http://www.websand.eu](http://www.websand.eu)

## Abstract
LikeJacking, a variant of the ClickJacking attack, specifically targets web widgets that integrate third-party services, such as social sharing features. The standard defense against ClickJacking involves preventing framing or allowing it only in trusted contexts. However, these measures are not feasible for LikeJacking due to the widgets' requirement to be available to arbitrary web applications. This paper presents an advanced implementation of LikeJacking protection that considers the specific needs of such widgets and is compatible with current browsers. Our approach is based on three key components: a JavaScript-driven visibility check, a secure in-browser communication protocol, and a reliable method to validate the integrity of essential DOM properties and APIs. We applied our protection mechanism to 635 real-world web pages to evaluate its performance and interoperability with existing web code. The results show that our method performs well even for large, complex DOM structures and can be implemented without requiring changes for most social sharing widgets.

## 1. Introduction
The era where a single application provider controlled both the code and content of a web application is long gone. Today, it is common for web documents to integrate services from multiple parties. A significant driver of this trend is the use of seamless sharing widgets, such as like buttons provided by social networks like Facebook and Google Plus. These widgets enable one-click interaction with the network without leaving the host page. While they significantly reduce the barrier to interacting with the widget provider's services, they also open the door to abuse. In recent years, a variant of the ClickJacking attack, known as LikeJacking, has emerged and gained considerable attention. Unlike general ClickJacking, which can be mitigated using the X-Frame-Options header, there are no applicable browser-based security measures for LikeJacking. This paper investigates a targeted protection approach to mitigate this unsolved security problem.

### Contributions
- **Novel LikeJacking Protection Methodology:** We propose a new methodology that leverages JavaScript capabilities already present in modern web browsers. The protection mechanism includes JavaScript-based visibility checks and a secure communication protocol between the protection script and the embedded widget.
- **DOM Integrity Validation:** We introduce a method to reliably check the integrity of an existing DOM tree instance and the corresponding DOM APIs. This technique enables JavaScript to validate its embedding DOM, even in untrusted web documents, and is cross-browser compatible.
- **Practical Evaluation:** We report on a study examining how popular websites handle social sharing widgets in terms of visibility properties. Our evaluation demonstrates that our method performs well even for large, non-trivial DOM structures and can be applied to most social sharing widgets without requiring changes.

## 2. Technical Background

### 2.1 Social Sharing Widgets
In the early days of the web, the content of a single HTML document was static and originated from a single source. Today, web sites often include services from multiple third parties. The Same-Origin Policy makes integration challenging, but techniques like script includes and iframe elements have become commonplace. Many websites use iframes to seamlessly integrate third-party content, making it appear as part of the hosting page. One prominent example is social sharing widgets, which allow users to share content with their friends on social networks. These widgets are embedded via iframes, and the social network's cookies are attached to all requests, enabling the widget to act on behalf of the user. To encourage usage, the functionality should be as simple as possible, ideally requiring just one click.

### 2.2 Click- and LikeJacking
ClickJacking, first discovered by Ruderman in 2002, involves tricking users into interacting with cross-domain web UIs without their knowledge. Attackers use various techniques to hide iframes, such as CSS properties like opacity or mask, overlaying elements, or moving the iframe under the mouse pointer. When the user interacts with the attacker's fake UI, their actions are actually directed at the hidden iframe. LikeJacking is a specific form of ClickJacking targeting social sharing widgets.

### 2.3 Countermeasures
Current countermeasures against ClickJacking include frame busting, where JavaScript checks if the page is framed and redirects the top browser window to the security-sensitive site. Another approach is the X-Frame-Options response header, which prevents untrusted framing. However, these methods require a pre-existing trust relationship and are not suitable for LikeJacking, where the widget must be available to any domain.

## 3. LikeJacking Protection via Visibility Proofs

### 3.1 Problem Statement
Existing ClickJacking countermeasures require a trust relationship between the widget and the including domain, typically using the X-Frame-Options header. For social sharing widgets, which need to be included in arbitrary domains, this approach is not viable. The widget must allow general framing and has limited means to verify the framing context. Proposed browser mechanisms, such as those under W3C standardization, may offer a solution, but their implementation timeline is uncertain. Therefore, we investigated a solution that can be implemented with today's browser capabilities.

### 3.2 The Big Picture
Our protection approach involves a JavaScript library included in the hosting web document. This script ensures that the widget's predefined visibility conditions are met by utilizing DOM APIs to check rendering conditions like position, size, and CSS properties. The widget is embedded using an iframe, but user interaction is disabled until the visibility requirements are verified. Once verified, the script signals the widget to enable user interaction, and the validation is repeated periodically to prevent malicious alterations.

### 3.3 Security Considerations and Technical Challenges
Our system runs a script in the context of a web document controlled by an untrusted third party. We must ensure that the script can operate securely and resist tampering. The script must also be compatible with a wide range of browsers and perform efficiently even for large, complex DOM structures.

## 4. Visibility Check
[Detailed description of the visibility check process]

## 5. Secure Communication Protocol
[Detailed description of the secure communication protocol]

## 6. DOM Integrity Validation
[Detailed description of the DOM integrity validation method]

## 7. Evaluation
### 7.1 Performance Characteristics
[Results of the performance evaluation]

### 7.2 Interoperability with Web Code
[Results of the interoperability study]

## 8. Conclusion
[Summary and future work]

---

This optimized version of your text is more structured and professional, with clear section headings and a logical flow. It also includes placeholders for detailed sections that you can expand upon.