"Bluegrass'
"Beat"
"Satire"
"Terror" "Indie"
"A capella"
"Slow Jam"
"Avantgarde"
"Rhythmic Soul"
Symphonic Rock'
"Euro-House
"Club"
"Humor"
---
## Page 332
为文本添加了结构，使浏览器得以渲染页面。一个简单的HTML文档如下所示：
包括在哪里插入内嵌的图像和指向其他Web页的链接。HTML由带有标签的文本组成，这些标签
通常，这些页面是使用超文本标记语言（HTML）来编写的，HTML告诉浏览器如何渲染页面，
大量花哨的功能，但Web浏览器的核心功能只是从Web服务器上请求Web页并将它们渲染出来。
程序员可以略读或是干脆跳过本节。?
些简单应用，你只需理解几个关键的概念就可以了，因此这里将快速地概述一下。有经验的Web
心部分自从它们在20世纪90年代早期被发明以后几乎没有什么变化。对于第29章里将要编写的那
26.1
类似地，本章也为初学者提供了一个关于Web编程的简要介绍。
章里用它来开发一个可以浏览MP3文件库，并将它们以流的方式发送到MP3客户端的应用程序。
个大型话题的冰山一角。我的目标是涵盖足够多的AllegroServe基本用法，以确保你可以在第29
① Web编程的初学者需要在这篇介绍的基础上补充阅读一两篇更加深人的介绍。你可以在http://www. jmarshall.
首先，你需要理解Web浏览器和Web服务器在Web编程中的角色。尽管现代浏览器通常带有
尽管当今的Web程序开发通常都会用到相当数量的软件框架和不同的协议，但Web编程的核
com/easy/上找到一些很好的在线指导。
This is a picture: 
Hello, world!
Hello
30 秒介绍服务器端Web 编程
进行Web编程
实践：用AllegroServe
www.TopSage.com
---
## Page 333
接被发送出去。另一方面，动态页面是由每次页面被浏览器请求时生成的HTML构成的。一个动
向服务器发起一个新请求。?
的主要约束所在一无法让运行在服务器上的代码影响用户在浏览器中看到的内容，除非浏览器
决定从服务器请求一个页面之前，在浏览器和服务器之间将不再有任何通信。?这就是Web编程
正确回应。
随后将被浏览器渲染。服务器有时也会发送一个错误响应来告诉浏览器其请求因为某种原因无法
主体的信息，诸如数据的类型是什么（比如HTML、纯文本或一个图片），而主体就是数据本身
求。浏览器也可以在它的请求中包含数据。这就是浏览器向服务器提交HTML表单的方式。
是说，浏览器连接到Web服务器并发送了一个至少包括目标URL和浏览器支持的HTTP版本的请
要关心该协议的细节，但有必要知道它是由浏览器发起的请求和服务器生成的响应的规范。这就
有些称为静态页面的Web页只是保存在Web服务器上的HTML文件，在浏览器发出请求时直
情况基本上就是这样。一旦浏览器从服务器那里收到了完整的响应，那么直到下一次浏览器
316
② Web编程的许多复杂性都是试图解决这个基本限制的结果，目标是提供类似桌面应用那样的用户体验。
为了回应一个请求，服务器发送一个包括一系列的头部和一个主体的响应。头部中含有关于
浏览器和服务器之间使用一种称为超文本传输协议（HTTP）的协议进行通信。尽管你不需
请求每个图片，再将它们分别插入到渲染后的HTML中的适当位置。
图26-1
This is a link to another page.
第 26 章实践：用 AllegroServe 进行 Web 编程
显示了浏览器是如何渲染这个页面的。
Done
 This is a link to another page.
This is a picture:
Hello, world!
Edn
www.TopSage.com
G0
图26-1网页示例
Bon
http:7
He
---
## Page 334
一部分的实体类知道如何处理静态内容一
AllegroServe会解析请求并查找一个称为实体(entity)的对象来处理该请求。一些作为AllegroServe
的代码应该可以同时运行在原版的AllegroServe和PortableAllegroServe上。
Allegro，那么你可以使用PortableAllegroServe，即一个AllegroServe代码树的友好分支，它还包括
Foderaro所开发。AllegroServe包含在来自Franz的用于本书的Allegro版本里。如果你没在使用
请求代理到运行在独立进程中的Lisp服务器上的系统。
服务器，还有诸如mod_lisp?和Lisplets?这类可以允许ApacheWeb服务器或任何Java Servlet容器将
26.2
来处理该请求的代码并运行它，然后代码使用查询参数和cookie来决定要做什么。
解释。
并不关心cookie中的数据，它只是将其回显给服务器，让服务器端的代码按照它们想要的方式来
个特定的服务器所设置，那么浏览器将在每次向该服务器发送请求时都带上这个cookie。浏览器
cookie，并在浏览器的响应中发送一个特殊的头部，里面含有-一-些不透明数据。一旦cookie被一
无论是查询字符串中的键值对还是发送数据中的键值对都被统称为查询参数。
器的请求也可以POST数据，这些数据通常也由键值对构成。POST数据一般用来提交HTML表单。
忽略，除非将它传给用来生成响应的代码。多数时候查询字符串由一组键/值对组成。来自浏览
中含有一个问号，那么问号之后的所有内容将被视为一个查询字符串，后者通常会被Web服务器
URL。不过，URL通常被Web服务器本身用来决定使用哪些代码来生成响应。接下来，如果URL
态页面可能会在查询数据库的基础上生成并构造出HTML来表示查询的结果。?
AllegroServe提供了一个与Java Servlet类似的编程模型。每当浏览器请求一个页面时
对于本章来说，你将使用开源Web服务器AllegroServe的某个版本，它最初由Franz Inc.的John
最后，为了将来自同一个浏览器的一系列请求串接在一起，服务器中运行的代码可以设置
③ http:/lisplets.sourceforge.net .
② http://www.fractalconcept.com/asp/html/mod_lisp.html.
①不幸的是，“动态”一词在Web世界中被重载了。术语“动态HTML”指的是含有嵌人式代码的HTML，其代码通
有很多种方式可以用CommonLisp来提供Web内容。至少有三种用CommonLisp写的开源Web
以上就是99%的服务器端Web编程所依赖的基础元素。浏览器发起一个请求，服务器查找用
当针对请求生成响应时，服务器端的代码需要处理四种主要信息。第一种信息是被请求的
单的非动态HTML。
务器上生成的页面）也可以含有动态HTML（运行在客户端的代码)。对于本书中的应用，你将只是动态地生成简
求、接受响应并渲染新页面也需要花费相当长的时间。更加令人困惑的是，动态生成的页面（换句话说，是在服
HTML可以改进一个基于Web的应用程序的可用性，因为即便在高速的Intermet连接下，向一个Web服务器发出请
常采用JavaScript来编写，JavaScript可在不跟Web服务器进行通信的情况下在浏览器中执行。如果谨慎使用，动态
 AllegroServe
www.TopSage.com
一无论是单独的文件还是一个目录树的内容。而另一些
26.2
AllegroServe
317
---
## Page 335
作比面对一个完全黑箱的服务器要容易得多。
览器的请求。这意味着你至少可以通过REPL来观察当前运行中的服务器，这使得调试和测试工
修复方法是使用一个不同的端口，为start提供一个不同的参数，然后在本章其余部分的URL里
这样的错误提示。这表明端口2001已经被系统里的其他服务器占用了。在这种情况下，最简单的
的身份。可以像下面这样启动监听端口2001的服务器：
root用户启动Lisp，然后使用：setuia和：setgid参数来告诉start在打开端口以后切换到指定
只有root用户才能监听1024以下的端口。为了在Unix上运行监听80端口的AllegroServe，你需要以
它接受相当数量的关键字参数，但你现在唯一需要传递的是：port，即监听的端口。你可能需要
其余部分的导出符号，你应该像下面这样创建一个新包：
访问来自NET.ASERVE、COM.GIGAMONKEYS.HTML（一个即将讨论到的新包）以及CommonLisp
来加载PortableAllegroServe。加载AllegroServe会创建三个新包：NET.ASERVE、NET.HTML.
AllegroServe加载到你的Lisp映像中。在Allgro中，可以简单地键入（require：aserve）。在其他
则是我将用本章的多数篇幅进行讨论的，它们运行任意Lisp代码来生成响应。
始终用该值来代替2001。
使用诸如2001这种较大的端口而不是HTTP服务器的标准端口80。因为在类Unix的操作系统里，
GENERATOR和和NET.ASERVE.CLIENT。
加载了服务器以后，你可以通过NET.ASERVE包中的函数start来启动它。为了可以方便地
318
②加载PortableAllegroServe将为相关的兼容库创建出其他一些包，但你需要关心的只是那三个包。
①AllegroServe也提供了一个名叫Webactions的框架，其类似于Java中的JSP。这个框架不是编写代码来生成HTML，
假设你正在运行的Lisp环境与你的浏览器是在同一台机器上，那么你可以通过将浏览器指向
你可以继续通过REPL与Lisp环境交互，因为AllegroServe启动了它自己的线程来处理来自浏
服务器现在在你的Lisp环境中运行了。
#
WEB>(start:port2001)
现在你可以无需限定符而使用来自NET.ASERVE的导出符号了。函数start用来启动服务器
WEB>
CL-USER>(in-package :com.gigamonkeys.web)
现在使用下面的IN-PACKAGE表达式切换到该包上：
#
CL-UsER>(defpackage:com.gigamonkeys.web
在本书里我将不会谈及Webactions。
通过Webactions你可以直接编写本质上是HTML的页面，但其中的某些内容将在页面提供服务时作为代码来运行。
#
第26章
(:use :cl:net.aserve :com.gigamonkeys.html))
实践：用AllegroServe进行Web编程
www.TopSage.com
。在启动服务器时或许会看到类似“port alreadyinuse”
---
## Page 336
目录）了。
的publish-file调用将已发布的内容清除：
个类似图26-2这样的页面。
值publish-File表达式之后，可以将浏览器指向http://ocalhost:2001/hello.html，然后它将显示一
其中的:path参数将出现在浏览器请求的URL中，而：file参数则是文件系统中的文件名。在求
如下：
是从不同于2001的端口启动的。
was refused when attempting to contact localhost:2001"，那么这意味着要么服务器没有运行，要么
从页面的底部看到这点。另一方面，如果浏览器显示了一个错误对话框并提示说“The connection
面未找到的错误信息，因为你还没有发布任何内容。但这个错误信息来自AllegroServe，你可以
现在你可以发布一些文件了。假设在/tmp/html目录下有一个文件hello.html，其内容
现在，你可以使用publish-directory函数发布整个/tmp/html／目录（包括它的所有子
你也可以使用publish-directory函数来发布整个目录树中的文件。首先让我们使用下面
#
("/Iwau/dua/. uotaeutasap: "/ xtyaad: Xonoaxtp-ustiand)  (publish-file :path "/hello.html" :remove t)
#
WEB> (publish-file :path "/hello.html" :file "/tmp/html/hello.html")
你可以使用publish-file函数单独地发布它。
Hello, worla!
Hello
Done
Heilo, world!
图26-2 http://ocalhost:2001/hello.html
www.TopSage.com
 26.2  AllegroServe
319
---
## Page 337
上。在下一节里，我将向你展示更方便的方法来以编程方式生成HTMIL。
AllegroServe的一部分，它返回一个流用来向浏览器中写入想要的输出。
之前的地方，你可以添加或修改在回执中发送的HTTP头。函数request-reply-stream也是
主体，后者应当含有用来生成响应内容的代码。在with-http-response中with-http-body
的其他部分，例如处理If-Modified-Since请求。with-http-body实际发送HTTP回执头并执行其
HTTP响应的过程，并且可以像这样指定诸如返回内容的类型之类的信息。它还可以处理HTTP
随机数的页面的函数。
来获取由浏览器提交的信息，即包含在URL或使用HTML表单发送的数据中的查询参数。
用两个参数来调用：一个代表请求的对象以及一个被发布的实体。多数时候你不需要对那个实体
发布一个函数，它将被调用来生成一个指定URL或带有给定前缀的任何URL的响应。这个函数将
是publish-file和publish-directory对应的动态版本。这两个函数的基本思想是，你可以
26.3
个对文件/tmp/html/hello.html的请求。
而变成了一个文件名。同样的道理，http://localhost:2001/hello.html也将被转化成一
收到了一个来自http://localhost:2001/foo/bar.html的请求，那么其路径部分是