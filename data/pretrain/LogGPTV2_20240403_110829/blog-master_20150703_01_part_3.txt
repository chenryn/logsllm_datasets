```
## Package DBMS_utility
```
* dms_utility.format_call_stack()  -- return a formatted string with content of call stack
----
postgres=# select foo2();
               foo2               
 ---------------------------------
 -----  Call Stack  -----
   line             object
 number  statement  name
      1  return     function foo
      1  return     function foo1
      1  return     function foo2
(1 row)
----
```
## Package PLVlex
```
This package isn't compatible with original PLVlex. 
----
postgres=# select * from 
	plvlex.tokens('select * from a.b.c join d ON x=y', true, true);
 pos | token  | code |  class  | separator | mod  
 ----+--------+------+---------+-----------+------
   0 | select |  527 | KEYWORD |           | 
   7 | *      |   42 | OTHERS  |           | self
   9 | from   |  377 | KEYWORD |           | 
  25 | a.b.c  |      | IDENT   |           | 
  20 | join   |  418 | KEYWORD |           | 
  25 | d      |      | IDENT   |           | 
  27 | on     |  473 | KEYWORD |           | 
  30 | x      |      | IDENT   |           | 
  31 | =      |   61 | OTHERS  |           | self
  32 | y      |      | IDENT   |           | 
(10 rows)
----
Warning: Keyword's codes can be changed between PostgreSQL versions!
o plvlex.tokens(str text, skip_spaces bool, qualified_names bool) - Returns table of lexical elements in str. 
```
## DBMS_ASSERT
```
This package protect user input against SQL injection.
* dbms_assert.enquote_literal(varchar) varchar - Add leading and trailing quotes, verify that all single quotes are paired with adjacent single quotes.
* dbms_assert.enquote_name(varchar [, boolean]) varchar - Enclose name in double quotes. Optional second parameter ensure loweralize of name. Attention - On Oracle is second parameter capitalize!
* dbms_assert.noop(varchar) varchar - Returns value without any checking.
* dbms_assert.qualified_sql_name(varchar) varchar - This function verifies that the input string is qualified SQL name.
* dbms_assert.schema_name(varchar) varchar - Function verifies that input string is an existing schema name.
* dbms_assert.simple_sql_name(varchar) varchar -This function verifies that the input string is simple SQL name.
* dbms_assert.object_name(varchar) varchar - Verifies that input string is qualified SQL identifier of an existing SQL object. 
```
## PLUnit
```
This unit contains some assert functions.
* plunit.assert_true(bool [, varchar]) - 		Asserts that the condition is true. 
* plunit.assert_false(bool [, varchar]) - 		Asserts that the condition is false. 
* plunit.assert_null(anyelement [, varchar]) -		Asserts that the actual is null.
* plunit.assert_not_null(anyelement [, varchar]) - 	Asserts that the actual isn't null.
* plunit.assert_equals(anyelement, anyelement [, double precision] [, varchar]) - Asserts that expected and actual are equal. 
* plunit.assert_not_equals(anyelement, anyelement [, double precision] [, varchar]) - Asserts that expected and actual are equal. 
* plunit.fail([varchar]) -				Fail can be used to cause a test procedure to fail immediately using the supplied message. 
```
## Package DBMS_random
```
* dbms_random.initialize(int) - Initialize package with a seed value.
* dbms_random.normal() - Returns random numbers in a standard normal distribution.
* dbms_random.random() - Returns random number from -2^31 .. 2^31.
* dbms_random.seed(int)
* dbms_random.seed(text) - Reset seed value.
* dbms_random.string(opt text(1), len int) - Create random string
* dbms_random.terminate() - Terminate package (do nothing in Pg)
* dbms_random.value() - Returns a random number from [0.0 - 1.0) 
* dbms_random.value(low double precision, high double precision) - Returns a random number from [low - high)
```
## Others functions
```
This module contains implementation of functions: concat, nvl, nvl2, lnnvl, decode,
bitand, nanvl, sinh, cosh, tanh and oracle.substr.
* oracle.substr(str text, start int, len int) - Oracle compatible substring
* oracle.substr(str text, start int)          - Oracle compatible substring
* oracle.substr(str numeric, start numeric)          - Oracle compatible substring
* oracle.substr(str numeric, start numeric, len numeric)          - Oracle compatible substring
* oracle.substr(str varchar, start numeric)          - Oracle compatible substring
* oracle.substr(str varchar, start numeric,len numeric)          - Oracle compatible substring
* oracle.lpad(string, length [, fill])  - Oracle compatible lpad
* oracle.rpad(string, length [, fill])  - Oracle compatible rpad
* oracle.ltrim(string text [, characters text])  - Oracle compatible ltrim
* oracle.rtrim(string text [, characters text])  - Oracle compatible rtrim
* oracle.btrim(string text [, characters text])  - Oracle compatible btrim
* oracle.length(string char)  - Oracle compatible length
* pg_catalog.listagg(str text [, separator text]) - aggregate values to list
* pg_catalog.median(float4) - calculate a median
* pg_catalog.median(float8) - calculate a median
* pg_catalog.to_number(text) -  converts a string to a number
* pg_catalog.to_number(numeric) -  converts a string to a number
* pg_catalog.to_number(numeric,numeric) -  converts a string to a number
* public.to_multi_byte(text) - Convert all single-byte characters to their corresponding multibyte characters
* public.to_single_byte(text) - Convert all multi-byte characters to their corresponding single-byte characters
You might need to set search_path to 'oracle, pg_catalog, "$user", public'
because oracle.substr, oracle.lpad, oracle.rpad, oracle.ltrim, oracle.rtrim, oracle.btrim, oracle.length are installed side-by-side with pg_catalog.substr, pg_catalog.lpad, pg_catalog.rpad, pg_catalog.ltrim, pg_catalog.rtrim, pg_catalog.btrim, pg_catalog.length respectively.
Note that in case of lpad and rpad, parameters string and fill can be of types CHAR, VARCHAR, TEXT, VARCHAR2 or NVARCHAR2 (note that the last two are orafce-provided types). The default fill character is a half-width space. Similarly for ltrim, rtrim and btrim.
Note that oracle.length has a limitation that it works only in units of characters because PostgreSQL CHAR type only supports character semantics. 
```
## VARCHAR2 and NVARCHAR2 Support
```
orafce's VARCHAR2 implements parts of Oracle database specification about VARCHAR2:
* Unit of type modifier = 'bytes' (for character semantics, see NVARCHAR2)
* Unlike PostgreSQL varchar, implicit cast to VARCHAR2 does not truncate
  white spaces over declared maximum length
Please note that PostgreSQL does not allow to dynamically specify how we
interpret varchar strings. It always interprets them as 'character' strings
as determined by database encoding. So, we can not support both BYTE and
CHARACTER semantics for a given varchar type in the same database. We choose
to implement the BYTE semantics as that is default in Oracle. For CHARACTER
semantics, please see NVARCHAR2 which by default always implements the
CHARACTER semantics.
Please be careful when using the above type to store strings consisting of
multibyte encoded characters wherein each character may be composed of an
arbitrary number of bytes.
NVARCHAR2 implements the following:
* Unit of type modifier = 'characters' (using the character set/encoding of the database)
Use this type if character semantics is preferred.
Please note that unlike Oracle, orafce's VARCHAR2 and NVARCHAR2 do not impose the 4000 bytes limit on the 'declared' size.
In fact it is same as that of PostgreSQL varchar, which is about 10MB (although varchar can theoretically store values of size up to 1GB)
Some byte-based string functions to be used with VARCHAR2 strings
* substrb(VARCHAR2, int [, int]) - extract a substring of specified length (in bytes) starting at a given byte position (counting from one); if the third argument isnot specified then length to the end of the string is considered
* strposb(VARCHAR2, VARCHAR2) - returns the location of specified substring in a given string (counting from one)
* lengthb(VARCHAR2) - returns the length (in bytes) of a given string
```
## TODO
```
* better documentation                                             
* better seralization in dbms_pipe (via _send and _recv functions) 
* alter shared memory structures by temporary tables: only locks are in shmem, (bitmaps), data in tmp tbl
```
## License
```
This module is released under BSD licence. 
```
## Contributors
```
The project was founded in 2008 by Pavel Stehule .
Other contributors:
* Peter Eisentraut (petere)
* Gavin Sherry (swm)
* Pavel Stehule (okbob)
* Heikki Linnakangas (hlinnaka)
* Gabriele Bartolini (gbartolini)
* Zdenek Kotala (hlipa)
* Takahiro Itagaki (itagaki)
* Marco Nenciarini (mnencia)
* Pavan Deolasee (pavanvd)
* Jeffrey Cohen (jcohen)
* Amit Langote (amitlan)
* Rahila Syed (rahila)
* Beena Emerson (b-emerson)
* Vinayak Pokale
* Fujii Masao
```
## 参考
1\. http://pgxn.org/dist/orafce
2\. http://yum.postgresql.org/9.4/redhat/rhel-6-x86_64/
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")