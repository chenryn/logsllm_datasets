title:Implementing the ADVISE security modeling formalism in M&quot;obius
author:Michael D. Ford and
Ken Keefe and
Elizabeth LeMay and
William H. Sanders and
Carol Muehrcke
Implementing the ADVISE Security Modeling
Formalism in M¨obius
Michael D. Ford, Ken Keefe, Elizabeth LeMay, and William H. Sanders
Coordinated Science Laboratory, Information Trust Institute,
Department of Electrical and Computer Engineering,
and Department of Computer Science
University of Illinois at Urbana-Champaign
Urbana, Illinois, USA
{mdford2, kjkeefe, evanrui2, whs}@illinois.edu
Carol Muehrcke
Cyber Defense Agency
Wisconsin Rapids, Wisconsin, USA
PI:EMAIL
Abstract—The ADversary VIew Security Evaluation (ADVISE)
model formalism provides a system security model from the per-
spective of an adversary. An ADVISE atomic model consists of an
attack execution graph (AEG) composed of attack steps, system
state variables, and attack goals, as well as an adversary proﬁle
that deﬁnes the abilities and interests of a particular adversary.
The ADVISE formalism has been implemented as a M¨obius
atomic model formalism in order to leverage the existing set
of mature modeling formalisms and solution techniques offered
by M¨obius. This tool paper explains the ADVISE implementation
in M¨obius and provides technical details for M¨obius users who
want to use ADVISE either alone or in combination with other
modeling formalisms provided by M¨obius.
Index Terms—Quantitative Security Metrics, State-based Se-
curity Model, M¨obius Atomic Model Formalism
I. INTRODUCTION
The M¨obius discrete-event modeling environment
is a
framework that supports multiple modeling formalisms and
multiple solution techniques [1]. The framework is based
on an abstract functional interface (AFI) that facilitates the
addition of new modeling formalism modules and new solver
modules [2][3]. Many of the modeling formalisms available
in the M¨obius tool are often used in system performance
and dependability modeling [4]. However, the most recent
addition to M¨obius is a new atomic model formalism designed
speciﬁcally for system security analysis. The new ADversary
VIew Security Evaluation (ADVISE) modeling formalism
was developed to provide quantitative, state-based analysis of
system security [5].
There is a need for quantitative security analysis because
although security was once considered a binary quantity (the
system is either secure or not), we now recognize that levels of
security are more accurately regarded as a continuum. At one
end of the continuum, a system is perfectly secure. At the other
end, a system is completely insecure. Real-world systems fall
somewhere between these extremes, with some systems being
more secure than others. Security metrics enable analysts to
quantify the differences in security between systems. Which
system is more secure? And, how much more secure is it?
There is also a need for state-based security analysis because
an attack against a system often progresses in stages as an
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
attacker penetrates deeper into the system, compromising the
system and gaining access to and knowledge about the system.
State-based analysis techniques can aid security analysts in
identifying and correcting the weakest points in a system’s
defense.
The ADVISE modeling formalism aggregates security-
relevant system and adversary (attacker) information that is
then converted into an executable discrete-event model. The
ADVISE model execution algorithms simulate how the adver-
sary is likely to attack the system and how well the system is
likely to defend itself against attack.
Just as discrete-event modeling can be used to predict the
performance and dependability of a system by modeling rele-
vant system state and state transitions, discrete-event modeling
can also be used to predict the security of a system against an
attacker. For a security model, relevant system state includes
the adversary’s access to different system domains and subnet-
works, the adversary’s specialized knowledge about the system
(passwords, architecture details, etc.), and the adversary’s
progress in achieving system compromise attack goals. For
a security model, relevant state transitions are the result of
the adversary’s attack attempts—sometimes successful, other
times not.
The primary contribution of this paper is a detailed discus-
sion of the implementation of the ADVISE formalism within
the M¨obius tool. A complete discussion of the theoretical
foundation of the ADVISE formalism is available in [6]
and [7].
Section II provides an overview of the two main components
of an ADVISE model: the attack execution graph and the
adversary proﬁle. Section III describes the implementation
of the ADVISE atomic model formalism within the M¨obius
framework. Section IV describes how the M¨obius tool im-
plementation of ADVISE performs in simulation and how
optimizations have been implemented to improve performance.
Section V compares the M¨obius tool with other security
analysis tools.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:07 UTC from IEEE Xplore.  Restrictions apply. 
II. ADVISE FORMALISM REVIEW
An ADVISE atomic model consists of an attack execution
graph, which deﬁnes the set of attack steps that an attacker
might attempt in order to achieve his or her goals, and an ad-
versary proﬁle, which details various attributes of the attacker.
During the execution of an ADVISE model, an adversary
evaluates the state of the system, determines the most attractive
attack step to attempt next, and then attempts the attack step.
This adversary decision process is repeated throughout the
entire simulation execution [6] (as further described in Section
II-C).
A. Attack Execution Graph
An attack execution graph (AEG) is a directed bipartite
graph (S, V, A) consisting of attack step nodes (S), state
variable nodes (V ), and directed arcs between elements of
S and V (A). State variable nodes store the current state
of a model during execution. For example, state variable
nodes in an AEG can store whether or not the adversary has
knowledge of an administrator password, whether or not the
adversary has access to a workstation, and the level of skill an
adversary possesses in performing SQL injection attacks. Each
attack step node describes an attack action that an adversary
assaulting the system might attempt. The attack step has
preconditions, which must be satisﬁed before the adversary
can attempt it, and a set of outcomes, from which one outcome
will be stochastically chosen once the adversary attempts the
attack step.
State variables connected to an attack step with an incoming
arc (i.e., the directed arc is pointing from the state variable to
the attack step) may be used in the precondition, outcomes,
or other attack step parameters. State variables connected to
an attack step with an outgoing arc may be affected by one
or more outcomes of the attack step.
1) State Variables: State variable nodes in an AEG come
in four varieties: access, knowledge, skills, and goals. Access
state variables represent the kinds of system access an ad-
versary can obtain, e.g., user workstation access. Knowledge
state variables model the pieces of knowledge an adversary can
obtain, e.g., administrator passwords. Skill state variables store
a skill proﬁciency level an adversary possesses in some kind of
skill, e.g., lockpicking skill. Goal state variables represent the
goals an adversary may attempt to achieve during execution,
e.g., deface public web server.
Access, knowledge, and goals are Boolean variables that can
change value during the execution of the model. For example,
if an attacker has web server access and root password
knowledge, an attack step can be performed that would shut
down the web server machine;
if that step is successful,
the attacker would achieve the denial of web server service
goal (and the attacker would lose the web server access). As
implemented, skill state variables are constant and contain a
value between 0 and 1000. The value of the skill state variable
represents the skill proﬁciency level of an adversary, with 1000
being perfect proﬁciency and 0 being no proﬁciency.
2) Attack Steps: Attack steps are the only AEG elements
that can cause the model to change state. An attack step has a
precondition expression, a time distribution, a cost expression,
and a nonempty set of outcomes. The precondition expression
of an attack step can be any mathematical expression that
returns true or false indicating whether an attack step can
be attempted. The time distribution is any of the probability
distributions supported by M¨obius and, when sampled, will
provide the nonnegative time it takes to attempt the attack step.
The cost expression can be any mathematical expression that
yields an integer indicating the general cost of an attack step.
The precondition expression, cost expression, and parameters
of the time distribution can all use state information in the
expression.
Each attack step outcome consists of an outcome probability
expression, a detection probability expression, and an effects
expression. The outcome probability expression is any math-
ematical expression that returns a positive real number. When
an attack step completes, the outcome probability expression
for each outcome is evaluated and normalized, and an outcome
from the set is uniformly selected. The detection probability
expression is any mathematical expression that returns a real
number between 0 and 1 and represents the risk of being
detected if this outcome is chosen when the attack step
completes. The effects expression speciﬁes how the model
state will be altered when the attack step completes, if this
outcome is chosen.
B. Adversary Proﬁle
While the attack execution graph deﬁnes a set of possible
attack steps and how they would impact the state of the system
and the adversary, the adversary proﬁle provides values for a
set of adversary attributes that are necessary for the execution
of the model.
The adversary proﬁle deﬁnes the set of access and knowl-
edge the adversary possesses in the initial state of the model.
For every skill deﬁned in the attack execution graph, the
adversary’s proﬁciency level in that skill is stated in the proﬁle.
Finally, the proﬁle speciﬁes the set of the adversary’s goals and
the associated payoff values for the adversary.
The adversary proﬁle also contains preference weights
[8][9], which specify how the adversary values cost mini-
mization, payoff maximization, and detection avoidance, and
a planning horizon, which deﬁnes how many attack steps into
the future an adversary can consider in making decisions.
C. Model Execution Algorithm
The execution cycle of an ADVISE model has two phases:
the adversary decision phase and the adversary action phase.
Before an adversary can perform an attack step, he or she
must choose an attack step to perform. During the adversary
decision phase, the adversary explores a state look-ahead tree
(SLAT) [6], which deﬁnes a hierarchical state space that is
rooted at the current state. Each node in the SLAT is a model
state, and the arcs are attack step/outcome pairs. The adversary
builds the SLAT with a depth equal to the planning horizon.
2
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:50:07 UTC from IEEE Xplore.  Restrictions apply. 
At the leaves of the tree, the state utility is calculated using
the cost, detection, and payoff preference weights. This utility
is then propagated back up the branches of the tree to the root
branches, where the most attractive next attack step is chosen.
(A more detailed explanation is available in [6].)
The adversary action phase begins once a most attractive
next attack step has been selected. The adversary attempts
this attack step, and an outcome from the attack step is
stochastically chosen. The effects of the outcome ﬁre, which
may update the state, and the adversary decision phase begins
again. The execution of an ADVISE model alternates between
these two phases as long as the model executes.
In an analytical solution, rather than simulating the adver-
sary’s path through the potential state space, the reachable
state space is generated. Given the adversary’s initial starting
state, the most attractive next attack step is computed and the
states resulting from all of the potential outcomes are used as
new initial starting states. Once the set of reachable states is
computed, they can be rearranged into a state transition matrix,
from which typical Markov chain analysis can be done [10].
III. IMPLEMENTATION IN M ¨OBIUS
The ADVISE atomic model formalism implementation in
the M¨obius framework provides a graphical front-end for cre-
ating and modifying ADVISE models. The model deﬁnitions
are stored in a textual, XML-based format. M¨obius then uses
code from the ADVISE implementation to generate C++ code
that compiles and links with M¨obius framework libraries,
creating an executable model. The generated code contains
a set of classes that inherit from base classes in the M¨obius
AFI and ADVISE implementation.
A. ADVISE Atomic Model Editor
The ADVISE graphical editor, like all other graphical com-
ponents of M¨obius, uses Java, but it breaks new ground with its
use of Eclipse libraries. Eclipse is a popular integrated devel-
opment environment and application framework. The ADVISE
implementation leverages the Eclipse Rich Client Platform
(RCP) [11] to provide a clean interface and enable several
useful sub-projects. Thanks to the Eclipse RCP, the ADVISE
implementation uses SWT [12] (a windowing toolkit), JFace
[13] (a UI toolkit), and GEF [14] (a graphical editing frame-
work), which are all provided by the Eclipse community. In
addition, the Eclipse RCP application framework is used in the
latest version of M¨obius; it provides console logging, error
reporting, UI customization, and greatly improved M¨obius
plug-in management. The existing M¨obius components have
remained functional following the incorporation of Eclipse
RCP, but the addition of Eclipse RCP marks a signiﬁcant
change in the way M¨obius components will be written in the
future.
The Eclipse RCP framework provides a large set of top-level
UI components, called editors. The ADVISE atomic model
editor is a MultiPageEditorPart with two pages, one
for the attack execution graph editor and one for the adversary
3
When an individual node is selected on the graph, a details
view appears, docked to the right of the canvas. Fig. 1 shows
the details view that appears when an attack step is selected.
The details view presents different sets of information based
on the type of object selected. An access object only has name
and code name (name of this object when used in a code ex-
pression) ﬁelds, but an attack step requires more information,
which is organized into four collapsible sections: attack cost,
attack execution time, preconditions, and outcomes.
The attack cost section provides a text box for entering
an attack cost code expression. The expression can be any
valid C++ code fragment that returns an integer. The attack
execution time section offers a probabilistic distribution widget
that allows the user to choose a type of distribution and
enter code expressions for each of the distribution parameters.
The preconditions section provides a text box for entering a
precondition code expression that must return a Boolean value
that indicates whether it is possible for the adversary to attempt