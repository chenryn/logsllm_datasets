Prioritization We have a few services that prioritize traf-
ﬁc, e.g., the routing service prioritizes control packets over
data packets. We believe many more services could beneﬁt
from this, but the current complexity means it is normally
only added in when it ﬁxes an observed problem.
5. EXTENDED ROUTING SERVICE
Next we describe the extended routing service, which aims
to make it simple for services to specify their own routing
protocols. Services that use the routing service are expected
to provide a per-service function F that operates in the co-
ordinate space and deﬁnes a set of key coordinates through
which packets are routed. Services also provide a policy
that controls queuing of packets for the service. The exist-
ing routing service is split into two components: one that
provides failure information, and a forwarding engine that
forwards messages towards a speciﬁed key coordinate.
Services register with the routing service to use it. A
registering service provides the function F to be used and the
queue policy parameters. In the simplest form the function F
is a function that returns the destination key coordinate, and
the only queuing parameter required is the queue length (in
milliseconds) and is the upper bound on the time that any
packet can be queued locally. When a service registers with
the routing service, the routing service registers, on behalf
of the other service, with each link. Recall that a polling
mechanism is used per link to obtain packets to transmit.
When a service, S, wishes to route a packet, it creates
the packet and hands it to the routing service. The routing
service calls the instance of F associated with S, passing
in the packet. The role of function F is to return a set of
possible next key coordinates (K) in the coordinate space,
K = {k1, k2, . . . , kn}. The function F operates in the coor-
dinate space with the assumption that if the returned key
Figure 5: Fraction of links versus number of services.
routing service uses a link-state routing protocol and gener-
ates overhead whenever links fail. However, one interesting
aspect of all the other routing protocols is that none of them
have any explicit maintenance overhead, and simply exploit
the properties of the coordinate space to obtain the property
that they want. The reason that the routing service uses a
link-state protocol is to enable it to continue routing when
failures occur, when a greedy coordinate-based approach will
fail. All the other protocols use the routing service in such
circumstances, which allows them to avoid the need to have
their own maintenance traﬃc.
We have been considering each service in isolation. The
customized routing protocols could have some correlated
way in which they use links, which would yield poor perfor-
mance when they operate concurrently. We ran an exper-
iment to understand if these four protocols described here
interfere. We ran all four services and examined the link
sharing across services. For the aggregation service we had
all servers sending a packet to a single root. For the caching
service each server looked up the same object. For the VM
distribution server we had 50% of the servers in the distri-
bution tree, and for the TCP/IP service we had 1,000 server
pairs transmit data.
We determined how many of the services had used each
link. So, for each link we generated a value between zero
and four. Figure 5 shows the distribution of the links versus
the number of services that used the link. This allows us to
see the general trend of whether the services are all using
the same subset of links, as the absolute number of packets
per link is dominated by the TCP/IP service. The results
show that the majority of links are used by a single service,
and there are few links used by three or more services. This
indicates that, in this set of custom protocols, we are not
seeing a general preference for a particular subset of links.
4. PROPERTIES
Next, we identify a number of properties that underpin the
routing protocols described, which are used to motivate the
design of an extended routing service, that allows services
to easily develop their own.
Key coordinate versus server coordinate Many ser-
vices use the routing service for key-based routing. This
exploits its ability to deterministically manage the mapping
of keys to servers. However, some services also need server-
based routing.
Path speciﬁcation The path from a source to destination
is often via one or more speciﬁed intermediate (x, y, z) coor-
dinates. However, rarely is the full path speciﬁed, most ser-
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 1 2 3 4 5Fraction of linksServices per link58coordinates correspond to a failed server, then the forward-
ing engine will remap them. Hence, the packet will be routed
towards a server responsible for one of the coordinates in K.
Note that the function F does not return the entire set of
key coordinates through which the packet should be routed,
just the next possible key coordinates. Further, the next key
coordinate could be mapped to a physical one-hop neighbor
of the current server, it could be mapped to a server that
is multiple hops from the current server, or indeed, due to
failures, the next key coordinate could be mapped onto the
current server. As the function F works in the key coor-
dinate space, when invoked, it needs to determine the key
coordinate for which the F is being performed. When there
are no failures then this will be the local server coordinate.
However, in the presence of failures the coordinate may not
be the same as the local servers coordinate. The function F
is able to access local state information maintained within
S, as well as information within the packet and information
from the failure component.
When the routing service has determined the set K, the
packet is then queued to be sent out on a link. The routing
service maintains a separate queue per-service. When the
routing service is polled for a packet by a link L for S, it
checks the packets queued for S, in order, to see if any packet
can go out on L. It does this by checking if the shortest path
to any of the key coordinates in K goes through L, provided
that the packet was not received from the server connected
on L. Before transmitting, the destination of the packet is
set to the key coordinate that matched in K. If L is on the
shortest path for multiple entries in K then one is randomly
selected from this subset.
When a packet is received by a server, it is delivered to the
service identiﬁed by serviceId, not the routing service. This
allows CamCube to easily perform ﬁne-grained accounting
of resources on the server and, also enables a service to in-
spect (and modify) that packet. For instance, in the VM
distribution service, at each physical hop a request to join a
group is checked, and if the local server is already part of the
tree, the request is locally handled and the request is not for-
warded further. The VM service internal state is updated to
reﬂect that a new child has been added. However, normally,
most services simply pass the packet to the routing service.
The routing service determines if the local server is responsi-
ble for the current destination key coordinate and, if so, the
function F is called. This will generate a set K containing
the set of possible next key coordinates. If the current server
is not responsible for the current destination key coordinate,
then the routing service simply takes the current destination
key coordinate and queues the packet on service’s queue. If
a link on the shortest path to the destination key coordinate
polls the service, and no older packets can be transmitted
on the link this packet is transmitted, again provided it was
not delivered from the server on that link.
In some cases, the F function may need to create ad-
ditional copies of a packet and forward them to diﬀerent
intermediate destinations. For example, in the VM distri-
bution service, when a packet is distributed along the tree, if
a server has more than one child, the packet must be repli-
cated for each child. This is accomplished by means of a
function transmit that takes as arguments the packet to
send and the corresponding set K.
Much of the power of the approach is enabled through
the F function. In Section 7 we will look in detail at how a
number of routing protocols use it. However, most services
simply use the F function to return a single intermediate
coordinate. For instance, in the aggregation service, this is
the key of the next point in the coordinate space to perform
aggregation. However, F can also return more than one
possible intermediate destination, as in the TCP/IP service.
Finally, a powerful component of the extended routing
service is the way in which it handles queues. Earlier we
observed that it was harder for service designers to incorpo-
rate classes of traﬃc with diﬀerent priorities. To make this
easier, the extended routing service allows multiple queues
to be maintained per service. A service can then map pack-
ets, or ﬂows, onto a particular queue. To enable this, each
service is required to provide a function classify that takes
a packet and returns a queue identiﬁer. There is a default
queue which is created when the service ﬁrst registers with
the extended routing service. In the simple case, the func-
tion classify always returns the default value. However, if
traﬃc diﬀerentiation is required, then the function classify
can capture this by returning diﬀerent queue identiﬁers. If
the queue identiﬁer is new then the service also has to pro-
vide the maximum time for which a packet can be queued in
the queue and a per-queue weighting. The extended routing
service, per service, implements a simple weighted fair queu-
ing mechanism across the queues belonging to the service.
Across services, we use a simple fair queuing mechanism.
The intuition is that internally within a service prioritizing
traﬃc is easy, requiring just the service writers to under-
stand their requirements. In contrast, across services, even
in an environment where all services are cooperative, us-
ing a weighted scheme requires understanding the relative
importance of services. Our initial experiences lead us to
believe that doing this across services introduces signiﬁcant
complexity. This is compounded when most services are, by
design, oblivious to the other services running.
6. PERFORMANCE EVALUATION
To evaluate the performance overhead of the extended
routing service, we experimented with our CamCube testbed.
The testbed consists of 27 servers. The direct-connect net-
work has 3 servers on each axis, creating a 3x3x3 cube. Each
server is a Dell Precision T3500 with a quad-core Intel Xeon
5520 2.27 GHz processor and 4 GB RAM, running an un-
modiﬁed version of Windows Server 2008 R2. We equip each
server with one 1 Gbps Intel PRO/1000 PT Quadport NIC
and two 1 Gbps Intel PRO/1000 PT Dualport NICs, in PCIe
slots. One port of the four port card is connected to a dedi-
cated 48-port 1 Gbps NetGear GS748Tv3 switch. This pro-
vides the switch network giving external connectivity to the
CamCube. Six of the remaining ports, two per multi-port
NIC, are used for the direct-connect network. The extended
routing service only routes traﬃc only on the direct-connect
topology. The Intel NICs support jumbo Ethernet frames of
9,014 bytes (including the 14 byte Ethernet header). In the
experiment we use jumbo frames and use default settings for
all other parameters on the NICs.
We ran two experiments, a base experiment, where the
six one-hop neighbors of a server S attempt to saturate the
1 Gbps link from them to S. S runs a simple service, that
when it receives a packet from a one-hop neighbor it simply
bounces the packet back to the neighbor. This represents a
service that forwards packets, and the per-packet overhead
is the lowest that can be achieved. We also ran an experi-
59dist(coordA, coordB): returns the rectilinear distance be-
tween two coordinates, e.g. dist((1, 1, 1), (0, 0, 0)) = 3;
distAxis(coordA, coordB, a): returns the distance of the two
coordinates relative to axis a, e.g., distAxis((1, 1, 1), (2, 3, 4),
x) = 1;
getCoordN eigh(coord, a, dir):
returns the key coordinate
of the neighbor of coord that lies on axis a, in the direc-
tion speciﬁed by dir, e.g., getCoordN eigh((0, 0, 0), y, 1) =
(0, 1, 0).
The F function of the cache service is straightforward. At
the source of a lookup, F determines the key coordinate of
the object to be retrieved and returns the set of key coordi-
nates of the closest replicas, utilizing the dist function. The
routing service will route the packet to the server responsible
for the selected key coordinate. When the packet reaches the
key coordinate, the cache service checks whether the object
has been cached locally and, if so, the packet is discarded
and a copy of the object is returned to the source. Other-
wise, F is re-evaluated on the packet, and will return the key
coordinate of the primary replica as the next destination.
The F function for the aggregation service deﬁnes a de-
terministic path through the key coordinate space. The
function greedily attempts to minimize the distance on each
axis, obtained through distAxis, by continuously selecting a
neighbor key coordinate on that axis that is closer to the ﬁ-
nal destination key coordinate. The order in which the axes
are used is a function of the hash of the key coordinate of
the ﬁnal destination.
The F function used by the TCP/IP service at the source
returns the key coordinates of all one-hop neighbors, except
those that are on the same axis, but in the opposite direc-
tion, of the one-hop neighbors lying on the shortest paths.
Then, at the next hops, F returns the key coordinate of the
one-hop neighbor that is on the same axis of the neighbor
from which the packet was received, if this is closer to the
destination. Otherwise, it deterministically selects another
axis and routes the packet to the neighbor on that axis that
is closer to the destination. This raises an interesting exam-
ple of the relationship between key coordinates and server
coordinates. The F function returns key coordinates.
In
the event of a server failure, this may cause packets to be
delivered to the server to which the key coordinates of the
failed server have been assigned. The TCP/IP service on
that server will drop the packet.
As a more elaborate example, Figure 7 provides pseudo-
code for the F functions used by the VM distribution service.
In this service, we have two diﬀerent type of packets: join
packets, which are used to construct the tree, and data pack-
ets, which contain the chunks of the ﬁle being distributed.
When a server wishes to become a member of the distribu-
tion tree, it issues a new join packet and forwards it towards
the root, following the protocol detailed in Section 3.2. At
each hop, the VM distribution service intercepts the join
packet. The key coordinate of the neighbor from which the
packet was received is added to the set of child nodes (C).
Then, if the local server is already part of the tree or it is
the root, the packet is dropped. Otherwise, the packet is
handed to the extended routing service to continue forward-
ing it towards the root.
The F function used to forward join packets is shown in
Figure 7(a). It recursively partitions the coordinate space
into smaller mini-cubes. To route to the root coordinate
of the VM distribution tree, it traverse the corners of the
Figure 6: CPU overhead for baseline and extended
routing services with |K| =1,2 and 3.
ment, the extended experiment, with a service that uses the
extended routing service. Again, the six neighbors of S send
packets at line rate to S, but they specify the destination as
a key for which S is responsible. However, the neighbors also
generate a set of q random keys which map onto themself,
and insert them into the packet. S then runs a service which
uses the extended routing service, and has a function F that
extracts the keys from the packet, and then returns the set
of keys embedded in the packet as the next coordinates, K.
In the extended routing service the cardinality of K domi-
nates the CPU overhead. We observe that in the majority
of services implemented to date that cardinality of K (|K|)
is usually one or two. We therefore, run the experiment for
q = 1, 2 and 3, where |K| = q.
For each experiment we record the aggregate throughput