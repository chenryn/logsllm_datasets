PSK example. Finally, JPAKE will serve as our example
to introduce the challenges in formal security analysis of
practical IoT protocols.
2.5 DoS Attack Countermeasures
We summarize existing DoS countermeasures for IoT and
their shortcomings as follows.
One-way hash. One-way hash [44] have been used in
wireless sensor networks (WSNs) as a DoS attack defensive
measure. Devices are equipped with a non-invertible hash
function (one-way) before deployment and use it for light-
weight veriﬁcation before performing heavy crypto operations.
However, this mechanism raises concerns in the IoT domain
since equipping a unique function per application from the fac-
tory is hard. Critically, a successful node compromise attack
can reveal the one-way function, resulting in neutralization
of the defence.
Cookie: IKEv2 [1] and DTLS [8] adopt the cookie ap-
proach as a DoS attack defensive measure. In DTLS, upon
2Many PAKEs are patented (e.g., EKE [24] by Lucent technologies
and SPEKE [30] by Phoenix technologies).
3The THREAD consortium is organized by Google Nest and other
major IT companies such as ARM and Samsung. THREAD released
its implementation as open source in May, 2016.
arrival of a client hello message, the server issues a cookie ver-
iﬁcation message to conﬁrm that the hello is from the speciﬁc
client. The cookie veriﬁcation message contains a stateless
cookie so the server does not need to keep any record. De-
spite its eﬀective defence against spoofed IP addresses, this
mechanism provides no defence against DoS attacks mounted
from valid IP addresses.
Time lock puzzle. Rivest, Shamir, and Wagner
(RSW) [40] proposed a time-lock puzzle based on RSA. In
the RSW construction, solving a secret value b = a2l
mod n
is required, where a, b are random values in a group G. The
parameter l governs the hardness of the puzzle; a solver must
perform l modular squaring operations in order to compute
b. RSW constructs a kind of digital time capsule which the
solver must consume a certain amount of time as intended
by the issuer. Even though the RSW approach is a good
countermeasure, the issuer must perform one square expo-
nentiation and one multiplication to create the puzzle; these
computationally intensive operations can drain the battery
on constrained devices.
Client Puzzle. Client puzzles as i [31] are proposed as a
cryptographic countermeasure against connection depletion
attacks such as TCP SYN ﬂooding. A client puzzle is a
quickly computable cryptographic problem making use of a
server secret, the time, and the client request. In order to
proceed to the next step of the protocol, the requester must
solve and submit the answer. The client puzzle approach has
multi-fold beneﬁts against DoS attacks, as its generation is
lightweight and hardness control is possible. However, it has
a linear communication overhead for hardness control due to
its sub-puzzle construction algorithm.
We further elaborate on the DoS vulnerability of IoT with
our proposed DoS countermeasure in Section 6.
3 SYMBOLIC MODELLING OF
STANDARD-BASED PROTOCOLS
We investigated various state-of-the-art veriﬁcation tools to
ﬁnd the most suitable tool. We found that some tools are
limited in modelling complex IoT scenarios. The majority of
tools are based on bounded veriﬁcation, where only a ﬁnite
subset of behaviours is considered. Unbounded veriﬁcation
tools such as ProVerif [25] are proven eﬃcient, but this does
not guarantee termination in the case of complex protocol
veriﬁcations. Several other tools are restricted to analysis
under the traditional D-Y adversary model [38, 39]. In terms
of expressivity, some tools are limited to Diﬃe-Hellman (DH)
inverses [25] or exponentiations [35, 37]. Based on our inves-
tigation, we believe the Tamarin prover [41] can model IoT
protocols without the aforementioned issues. The Tamarin
prover has already proven its value in complex protocol anal-
ysis and demonstrated that little eﬀort is needed in tracking
design changes in the TLS 1.3 speciﬁcation. Unlike exist-
ing tools, Tamarin guarantees the termination of analysis of
complex protocols; it also supports DH inverses and exponen-
tiations. Furthermore, various extensions for Tamarin exist,
such as bilinear pairing/AC-operator support [42] for group
240key schemes, human error modelling [23], and observational
equivalence modelling [22]. These features will be beneﬁcial
for modelling practical IoT application use cases.
In this section, we model standard-based IoT protocols us-
ing the Tamarin prover. Manuals and source code for Tamarin
can be found on the oﬃcial page [11].
3.1 Modelling SigFox (PKC)
SigFox essentially uses TLS 1.2 PKC and shares its security
goals. The main diﬀerence between SigFox and TLS 1.2 PKC
is that all packets carry the sender’s signature for integrity
under low bandwidth. Let us take a simple SigFox notiﬁcation
example below to show how modelling works in Tamarin.
The SigFox server (Alice) pushes an asymmetric-encrypted
notiﬁcation (na) with its signature to devices (Bob).
Facts. Tamarin deﬁnes a transition system of facts using
multiset-rewriting rules. Two types of facts represent proper-
ties and resources of the protocol; they can be consumed by
rules. Linear facts are used for limited resources so they are
consumed only a limited number of times. Persistent facts
are deﬁned with an exclamation point; they can be consumed
an unlimited number of times by rules.
[Premises, Consume facts]--[Actions]->[Conclusions]
[Premises, Consume facts]-->[Conclusions]
OR
Figure 1: A Tamarin rule consists of 3 sides. The
middle (actions) is not always needed.
Rules. Each Tamarin rule has three ‘sides’: the left side
for premises and consuming facts, the middle for deﬁning
actions, and the right side for conclusions (see Fig. 1).
In rule Register pk, the left side rule [Fr(∼ltk)] deﬁnes a
premise that ∼ltk is a new linear fact using a pre-deﬁned
rule Fr() (line 1). The fact ltk uses ∼ to represent a fresh
value; it can be consumed in the conclusion rule [!Ltk($A,
∼ltk), !Pk($A, pk(∼ltk), Out(pk(∼ltk)]. The conclusion rule
uses two persistent facts. The !Ltk() fact allots a long-term
private key to a public ID A ($ means public resource). The
!Pk() fact allots a public key to a public ID A. The Out() fact
represents transmitting the public key (pk()) to the untrusted
network, resulting in the receiver’s and adversary’s knowledge
(line 2). Facts transmitted using Out() can be received by
the In() fact; this mechanism represents the traditional D-Y
adversary model.
We deﬁne the rule Push notiﬁcation to show the server’s
role for transmitting encrypted notiﬁcation to devices. Pub-
lic ID A uses the public key of B (pkB) and generates a
fresh data item ∼na. It then encrypts the data and A’s ID
using the pre-deﬁned primitive fact aenc() with pkB to gen-
erate the message (msg, line 1). Using another fact sign(),
A signs the message using its own private key (ltkA, line
2), which is retrieved by a persistent fact !Ltk(A,ltkA) (line
3). To make multiple occurring terms simple, let-in bind-
ing is supported in Tamarin and concatenation of facts is
rule Register pk:
1.[ Fr(~ltkA) ] -->
2.[ !Ltk($A,~ltkA), !Pk($A,pk(~ltkA)), Out(pk(~ltkA))]
rule Push notiﬁcation:
1.let msg = aenc(, pkB)
2. sig = sign(msg,ltkA) in
3.[Fr(~na), !Ltk(A, ltkA), !Pk(B, pkB)]--
4.[Send(A, msg), Secret( na), Role(’A’), Honest(B)]->
[Out()]
rule Receive:
1.let msg = aenc(, pkB) in
2.[!Ltk(B,ltkB),!Pk(A, pkA), In()]--
3.[Eq(verify(sig,msg,pkA),true),Recv(B, msg),Secret(na),
Honest(B), Honest(A), Role(‘B’)]->
4.[St B 1(B, ltkB, pkA, A, na)]
rule Reveal ltk:
1.[!Ltk(A, ltkA) ]–[Reveal(A)]-> [ Out(ltkA)]
Figure 2: SigFox implementation using Tamarin.
This is a typical PKC scenario.
represented as  (line 1-2). Unlike the rule Regis-
ter pk, Push notiﬁcation has a middle side [Send(A, msg),
Secret(∼na), Role(’A’), Honest(B)] (line 4). These action
facts represent a transition of states that can be used in the
security proof stage.
We model a device’s role in rule Receive. B receives the
asymmetrically encrypted message with a signature using
the In() fact (line 2). Tamarin supports  as
syntactic sugar for concatenation of x and y and  as syntactic sugar for ...>.
B ﬁrst performs signature veriﬁcation using the verify()
fact and asymmetric decryption using the fact adec() and B’s
private key (ltkB, line 3). Tamarin provides various axioms
such as Eq() for equality, Neq() for inequality, and Unique()
for unique actions. Eq(verify(sig,msg,pkA),true) means the
rule Receive will proceed provided the signature veriﬁcation
equals true (see Fig. 3). The St B 1() fact is a state fact to
store current state that will be used in later rules (line 4).
To generate a stronger adversary model eCK and PFS,
we add a rule Reveal ltk, where adversaries can have access
to long-term private keys. The action fact Reveal(A) will
be used to generate contradictions for security properties.
This will be used to introduce stronger security goals and
adversaries such as eCK and PFS.
Cryptographic primitives. Tamarin provides various
pre-deﬁned cryptographic primitives under a perfect cryptog-
raphy model, which means all cryptographic primitives used
in Tamarin are perfect. For example, symmetric cryptography
never reveals plain text, hashing acts as a random oracle,
MACs and signatures are unforgeable. Some examples of the
supported primitives are described in Fig. 3.
Security properties. Tamarin deﬁnes lemmas for prop-
erties using its ﬁrst-order logic expressions. For instance, &
241Tamarin Cryptographic Primitives
Diﬃe-hellman:xˆyˆz = xˆ(y*z), x*inv(x) = 1
Symmetric cryptography: sdec(senc(m,k),k) = m
Asymmetric cryptography: adec(aenc(m,pk(sk)),sk)=m
Digital signature: verify(sign(m,sk),m,pk(sk)) = true
Bilinear-pairing: em(pmult(x,p),q) = pmult(x,em(q,p))
axiom Equality: ”All x y #i. Eq(x,y) @i ==> x = y”
We further model the stronger secrecy property PFS, which
requires that messages labeled with a secret() action before
a compromise remain secret. Although SigFox does not con-
sider this security goal, some applications with possible key
disclosure can use this lemma. If the perfect forward secrecy
property is negated, PFS does not hold.
The security analysis for SiFox is given in Fig. 5; Tamarin
also provides a graphical UI for convenience.
Figure 3: Tamarin prover provides various built-in
primitives under perfect cryptography model.
is for and, | for or; the Ex and All quantiﬁers mean the usual
ﬁrst-order expressions. Tamarin supports the indicators @
for a point in time and # for a speciﬁc variable. Tamarin’s
property speciﬁcation language is a guarded fragment of a
many-sorted ﬁrst-order logic with a sort for points in time.
This logic supports quantiﬁcation over both messages and
time [11].
Our SigFox lemma deﬁnitions are described in Fig. 4.
lemma executable: exists-trace
”Ex A B m #i #j. Send(A,m)@i & Recv(B,m)@j”
lemma secret A: all-traces
”All n #i. Secret(n) @i & Role(’A’) @i ==> (not (Ex #j.
K(n)@j)) |(Ex B #j. Reveal(B)@j & Honest(B)@i)”
lemma secret B: all-traces
”All n #i. Secret(n) @i & Role(‘B’) @i ==> (not (Ex #j.
K(n)@j)) |(Ex B #j. Reveal(B)@j & Honest(B)@i)”
lemma secrecy PFS A:
”not All x #i. Secret(x) @i & Role(’A’) @i ==> not (Ex #j.
K(x)@j)|(Ex B #r. Reveal(B)@r & Honest(B) @i & r < i)”
Figure 4: Security properties are deﬁned as lemmas.
To ensure that other lemmas do not just hold vacuously
because the model is not executable, we ﬁrst deﬁne a sanity
check lemma that shows that the model can run to completion.
This is given as a regular lemma, but with the exists-trace
keyword, as seen in the lemma ‘executable’. This keyword
says that the lemma is true if there exists a trace on which
the formula holds. The executable lemma states that at
times @i and @j, there exists A/B and message m. To verify
secrecy claims, we use the Secret(x) action fact to indicate
that the message x is supposed to be secret. In our model,
both agents may claim secrecy of a message na, but only
A’s claim is true. To distinguish between the two claims, we
added the action facts Role(‘A’) and Role(‘B’) in the rules
Push notiﬁcation and Receive. We call an agent whose keys
are not compromised an honest agent and label it Honest(A)
and Honest (B).
Lemma secret A states that whenever a secret action Se-
cret(n) occurs at time i of Role(‘A’), the adversary does not
know x or an agent claimed to be honest at time i has been
compromised at a time r. The security claim of B is deﬁned
in lemma secret B, but only A’s claim holds.
analyzed: sigfox PKC.spthy
executable (exists-trace): veriﬁed (8 steps)
secret A (all-traces): veriﬁed (11 steps)
secret B (all-traces): falsiﬁed - found trace (10 steps)
secrecy PFS A (all-traces): falsiﬁed - found trace (3 steps)
Figure 5: The result of the SigFox push notiﬁcation
protocol. It can be viewed in a GUI.
3.2 Modelling LoRa (PSK)
We model LoRa PSK scenarios, where A and B exchange
their own secret secA and secB, respectively, using symmetric
encryption with a HMAC for integrity. We then verify the
security under D-Y and eCK adversary models.
First, PSK distribution and revealing are deﬁned in rules
Key distribution and Reveal psk. In rule A Send, Alice re-
trieves her shared key (KeyA) using the !PSK() fact (line
2). She transfers the message with HMAC to the network
(line 4). In rule Role B, Bob receives the message using the
In() fact, then retrieves his shared key (keyB, line 3). Bob
performs HMAC veriﬁcation using his own key using the Eq()
axiom (line 4). After generating his own secret (secB), he
encrypts and sends a message along with a HMAC (line 5).
Bob inserted a unique identiﬁer ‘B 1’ in line 2 to distinguish
his message from Alice’s message. In rule A Receive, Alice re-
ceives Bob’s message using the In() fact (line 2), then veriﬁes
the HMAC using the Eq() axiom.
We ﬁrst verify the correctness of the protocol ﬂow with