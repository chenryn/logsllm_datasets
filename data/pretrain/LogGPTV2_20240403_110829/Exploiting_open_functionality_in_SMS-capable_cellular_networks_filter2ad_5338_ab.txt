tem or violate any service agreement.
3.1.1 Delivery Discipline
The delivery discipline of a network dictates the way messages
move through the system. By studying this ﬂow, we determine
system response to an inﬂux of text messages. The overall system
response is a composite of multiple queuing points. The standards
documentation indicates two points of interest - the SMSC and the
target device.
SMSCs are the locus of SMS message ﬂow; all messages pass
through them. Due to practical limitations, each SMSC only queues
a ﬁnite number of messages per user. As SMSCs route messages
according to a store and forward mechanism, each message is held
until either the target device successfully receives it or it is dropped
due to age. The buffer capacity and eviction policy therefore deter-
mine which messages reach the recipient.
The SMSC buffer and eviction policy were evaluated by slowly
injecting messages while the target device was powered off. Three
of the most prominent service providers were evaluated: AT&T
(now part of Cingular), Verizon, and Sprint. For each provider, 400
messages were serially injected at a rate of approximately one per
60 seconds. When the device was reconnected to the network, the
range of the attached sequence numbers indicated both buffer size
and queue eviction policy.
We found that AT&T’s SMSC buffered the entire 400 messages.
While seemingly large, 400 160-byte messages is only 62.5KB.
Tests of Verizon’s SMSC yielded different results. When the de-
vice was turned on, the ﬁrst message downloaded was not sequence
number one; instead the ﬁrst 300 messages were missing. This
demonstrates that Verizon’s SMSC has a buffer capacity of 100
messages and a FIFO eviction policy. Sprint’s SMSC proved dif-
ferent than both AT&T and Verizon. Upon reconnecting the device
to the network, we found only 30 messages starting with message
number one. Therefore, Sprint’s SMSC has a message capacity of
30 messages and a LIFO eviction policy.
BSMH1PCH [ MH1, MH2 ]RACH [ MH1 -> BS ]SDCCH [ MH1: Auth, TMSI, SM ]Table 1: Mobile Device SMS Capacity
Device
Nokia 3560
LG 4400
Treo 650
* 500 messages depleted a full battery.
Capacity (number of messages)
30
50
500*
Messages also remain in the SMSC buffer when the target de-
vice’s message buffer is full. This occurs, as noted in the GSM
standards [5], when the mobile phone returns a Mobile-Station-
Memory-Capacity-Exceeded-Flag to the HLR. Because it is impos-
sible to determine the inbox capacity of every phone, we chose to
test three representative devices of varying age and expense: the
Nokia 3560 (AT&T), the slightly newer LG 4400 (Verizon), and
the recently released high-end Treo 650 (Sprint) containing a 1GB
removable memory stick. Mobile device capacity was observed by
slowly sending messages to the target phone until a warning in-
dicating a full inbox was displayed. The resulting device buffer
capacities varied as shown in Table 1.
The delivery discipline experimentation results indicate how the
SMS system will react to an inﬂux of text messages. We conﬁrmed
that ﬁnite buffer capacities exist in most SMSCs and mobile de-
vices. In the event of a DoS attack, messages exceeding these sat-
uration levels will be lost. Therefore, a successful DoS attack must
be distributed over a number of subscribers.
3.1.2 Delivery Rate
The speed at which a collection of nodes can process and for-
ward a message is the delivery rate. In particular, bottlenecks are
discovered by comparing injection rates with delivery rates. Addi-
tionally, due to variations in injection size for different interfaces,
the injection size per message is estimated.
Determining the maximum injection rate for a cellular network
is an extremely difﬁcult task. The exact number of SMSCs in a
network is not publicly known or discoverable. Given the sheer
number of entrances into these networks, including but not limited
to website interfaces, email, instant messaging, and dedicated con-
nections running the Short Messaging Peer Protocol (SMPP), we
conservatively estimate that it is currently possible to submit be-
tween several hundred and several thousand messages per second
into a network from the Internet using simple interfaces.
A brief sampling of available interfaces is provided in Table 2.
These interfaces can be grouped into three main categories: instant
messaging, information services, and bulk SMS. Instant messag-
ing provides the same functionality as text messaging, but connects
new networks of users to cellular networks. With 24 hour news,
customers are frequently ﬂooded with “on the go” updates of head-
lines, sports, and stocks from information service providers such
as CNN and MSNBC. Lastly, through bulk SMS providers, com-
panies can provide employees with updates ranging from server
status to general ofﬁce notiﬁcations.
While injection rates for instant messaging and the information
services are unknown, the bulk SMS providers offer plans with
rates as high as 30-35 messages per second, per SMPP connec-
tion. Furthermore, by using multiple SMPP connections, START
Corp. (www.startcorp.com) offers rates “an order of magni-
tude” greater. Combining all of these conduits provides an adver-
sary with the ability to inject an immense number of messages.
When message delivery time exceeds that of message submis-
sion, a system is subject to DoS attacks. We therefore compare the
time it takes for serially injected messages to be submitted and then
delivered to the targeted mobile device. This was accomplished via
Table 2: A brief sampling of SMS access services
URL
Service
Instant Messaging
AOL IM
ICQ
MSN Messenger
Yahoo Messenger messenger.yahoo.com/messenger/wireless/
mymobile.aol.com/portal/index.html
www.icq.com/sms/
mobile.msn.com
Information Services
CNN
Google
MSNBC
www.cnn.com/togo/
sms.google.com
net.msnbc.com/tools/alert/sub.aspx
Bulk SMS
Clickatell
SimpleWire
START Corp.
www.clickatell.com
www.simplewire.com/services/smpp/
www.startcorp.com/StartcorpX/
Mobile Developer.aspx
a PERL script designed to serially inject messages approximately
once per second into each provider’s web interface. From this, we
recorded an average send time of 0.71 seconds.
Measurement of incoming messages was more difﬁcult due to
a lack low-level access to the device operating system. Via infor-
mal observation, we recorded interarrival times of 7-8 seconds for
both Verizon and AT&T. Interarrival times for Sprint were unde-
termined due to sporadic message downloads occurring anywhere
between a few seconds and few minutes apart. The experiments
clearly demonstrate an imbalance between the time to submit and
the time to receive.
While SMS messages have a maximum size of 160 bytes, each
submission requires additional overhead. Using tcpdump, we ob-
served both raw IP and user data trafﬁc. Not considering TCP/IP
data overhead, Sprint, AT&T, and Verizon all required under 700
bytes to send a 160 byte SMS message. This included the HTTP
POST and browser headers.
Due to the ACKs required for downloading the web page (8.5KB
for Sprint, 13.6KB for AT&T, 36.4KB for Verizon), the actual data
upload size was signiﬁcantly higher. While the overhead is rela-
tive to retransmissions and window size, we recorded upload sizes
of 1300 bytes (Sprint), 1100 bytes (AT&T), and 1600 bytes (Ver-
izon). In an effort to reduce the overhead induced by TCP trafﬁc,
we observed the trafﬁc resulting from email submission. Even with
TCP/IP trafﬁc overhead, less than 900 bytes was required to send
a message. For the purposes of the following analysis, we conser-
vatively estimate 1500 bytes (a standard MTU size) as the required
data size to transmit an SMS message over the Internet.
3.1.3
Lost messages and negatively acknowledged submit attempts were
observed. We expect this was due to web interface limitations im-
posed by the service providers. It is therefore important to deter-
mine both the mechanisms used to achieve rate limitation on these
interfaces and the conditions necessary to activate them.
Interfaces
A group of 50 messages was submitted serially at a rate of ap-
proximately one per second. This was followed by a manual send
via the web interface in order to check for a negative acknowledg-
ment. If an upper bound was not found, the number of sequential
messages was increased, and the test was repeated.
During the injection experiments performed for rate analysis, we
encountered interface limitations2. After 44 messages were sent in
2Presumably for mitigating cell phone spam, see Section 5
a serial fashion through Verizon’s web interface, negative acknowl-
edgments resulted. Further investigation revealed that blocking was
subnet based.
Message blocking was also observed for the AT&T phone. Even
though the web interface blindly acknowledges all submissions,
we observed message loss after 50 messages were sent to a single
phone. This time, further investigation revealed that even messages
originating from a separate subnet were affected. Seeing an oppor-
tunity to evaluate policy at the SMSC, we sent a text message from
the Verizon phone. The message was received, therefore, AT&T’s
SMSC must differentiate between its inputs.
While both Verizon and AT&T use IP based limitations, Sprint
deployed an additional obstacle.
In order to submit a message
through the web interface, a session cookie3 value was required.
While circumventing this prevention scheme was accomplished th-
rough automated session ID retrieval, further analysis showed it
had no effects on rate limitation.
Due to the above determined SMSC buffer capacity of 30 mes-
sages and the sporadic download times, approximately 30 messages
can be injected before loss occurs.
In summary, through gray-box testing, we found SMSCs typ-
ically hold far more messages than the mobile devices. While
high end multifunction platforms hold over 500 messages, com-
mon phones only hold 30 to 50 messages. When the target device
cannot receive new messages, continued injection from the Internet
results in queuing at the SMSC. Therefore, to launch a successful
DoS attack that exploits the limitations of the cellular air interface
(discussed in Section 4), an adversary must target multiple end de-
vices. To accomplish this, effective reconnaissance must occur.
3.2 Hit-List Creation
The ability to launch a successful assault on a mobile phone net-
work requires the attacker to do more than simply attempt to send
text messages to every possible phone number. Much like the cre-
ation of hit-lists for accelerated worm propagation across the In-
ternet [53], it is possible to efﬁciently create a database of poten-
tial targets within a cellular phone network. The techniques below,
listed from the most coarse to ﬁne-grain methods, are only a subset
of techniques for creating directed attacks; however, the combi-
nation of these methods can be used to create extremely accurate
hit-lists.
The most obvious ﬁrst step would be simply to attempt to capture
phone numbers overheard on the air interface. Because of the use
of TMSIs over the air interface, this approach is not possible. We
therefore look to the web as our source of data.
3.2.1 NPA/NXX
The United States, Canada, and 18 other nations throughout the
Caribbean adhere to the North American Numbering Plan (NANP)
for telephone number formatting. NANP phone numbers consist
of ten digits, which are traditionally represented as “NPA-NXX-
XXXX4”. These digit groupings represent the area code or Num-
bering Plan Area, exchange code5, and terminal number, respec-
tively. Traditionally, all of the terminal numbers for a given NPA/
NXX preﬁx are administered by a single service provider.
A quick search of the Internet yields a number of websites with
access to the NPA/NXX database. Responses to queries include
3The session cookie is referred to as a “JSESSIONID” at this par-
ticular website.
4Numbers in the last two subsets can take the form of N(2-9) or
X(0-9)
5The “NXX” portion of a phone number is sometimes referred to
as the “NPX” or Numbering Plan Exchange.
the name of the service provider administering that NPA/NXX do-
main, the city where that domain is located and the subdivision of
NPA/NXX domains among a number of providers. For example, in
the greater State College, PA region, 814-876-XXXX is owned by
AT&T Wireless; 814-404-XXXX is managed by Verizon Wireless;
814-769-XXXX is supervised by Sprint PCS.
This information is useful to an attacker as it reduces the size of
the domain to strictly numbers administered by wireless providers
within a given region; however, this data does not give speciﬁc in-
formation in regards to which of the terminals within the NPA/NXX
have been activated. Furthermore, as of November 23, 2004, this
method does not account for numbers within a speciﬁc NPA/NXX
domain that have been transferred to another carrier under new
number portability laws. Nonetheless, this approach is extremely
powerful when used in conjunction with other methods, as it re-
duces the amount of address space needed to be probed.
3.2.2 Web Scraping
As observed in the Internet [47], a large number of messages
sent to so-called “dark address space” is a strong indicator that an
attack is in progress. A more reﬁned use of domain data, however,
is readily available.
Web Scraping is a technique commonly used by spammers to
collect information on potential targets. Through the use of search
engines and scripting tools, these individuals are able to gather
email addresses posted on web pages in an efﬁcient, automated
fashion. These same search tools can easily be harnessed to col-
lect mobile phone numbers listed across the web. For example, the
query Cell 999-999-0000..9999 at Google (www.google
.com) yields a large number of hits for the entire range of the
NPA/NXX “999-999-XXXX”. Through our own proof-of concept
scripts, we were able to collect 865 unique numbers from the greater
State College, PA region, 7,308 from New York City and 6,184
from Washington D.C. with minimal time and effort.
The difﬁculty with this method, much like the ﬁrst, is that it does
not give a deﬁnitive listing of numbers that are active and those
that are not. As personal web pages are frequently neglected, the
available information is not necessarily up to date. Accordingly,
some portion of these numbers could have long since been returned
to the pool of dark addresses. Furthermore, due to number port-
ing, there is no guarantee that these numbers are still assigned to