附录 B
运 行 程 序
如果你在 IDLE 的文件编辑器中打开了一个程序，运行它
很简单，按F5或选择Run►Run Module菜单项。这是在编程
时运行程序的最简单方法，但打开IDLE来运行已完成的程序
可能有点累。执行Python脚本还有更方便的方法。
B.1 第一行
所有Python程序的第一行应该是#!行，它告诉计算机你想让Python来执行这个
程序。该行以#!开始，但剩下的内容取决于操作系统。
 在Windows上，第一行是 #! python3。
 在OS X，第一行是 #! /usr/bin/env python3。
 在Linux上，第一行是 #! /usr/bin/python3。
没有#!行，你也能从 IDLE运行 Python脚本，但从命令行运行它们就需要这
一行。
B.2 在 Windows 上运行 Python 程序
在 Windows 上，Python3.4 的解释程序位于 C:\Python34\python.exe。或者，方
便的py.exe程序将读取.py文件源代码顶部的#!行，并针对该脚本运行相应的Python
版本。如果计算机上安装了多个版本的 Python，py.exe 程序确保运行正确版本的
Python程序。
为了方便运行你的Python 程序，可以创建一个.BAT批处理文件，用 py.exe来
运行Python程序。要创建一个批处理文件，就创建一个新的文本文件，包含一行内
容，类似下面这样：
@py.exe C:\path\to\your\pythonScript.py %*
用你自己的程序的绝对路径替换该路径，将这个文件以.bat 文件扩展名保存（例
如，pythonScript.bat）。这个处理文件将使你不必在每次运行时，都输入Python程序完
整的绝对路径。我建议将所有的批处理文件和.py 文件放在一个文件夹中，如
C:\MyPythonScripts或C:\Users\YourName\PythonScripts。
在Windows上，C:\MyPythonScripts文件夹应该添加到系统路径中，这样就可以从
Run 对话框中运行其中的批处理文件。要做到这一点，请修改 PATH 环境变量。单击
“开始”按钮，并输入“Edit environment variables for your account（编辑账户的环境变
量）”。在你开始输入时，该选项应自动完成。弹出的环境变量窗口如图B-1所示。
图B-1 Windows的环境变量窗口
Python编程快速上手——让繁琐工作自动化
从系统变量中，选择Path变量，然后单击“编辑”。在“变量值”文本字段中，
追加一个分号，键入C:\MyPythonScripts，然后单击“确定”。现在你只需按下Win-R
并输入脚本的名称，就能运行C:\MyPythonScripts文件夹中的Python脚本。例如，
运行 pythonScript，将运行 pythonScript.bat，这使你不必从 Run 对话框运行整个命
令py.exe C:\MyPythonScripts\pythonScript.py。
B.3 在 OS X 和 Linux 上运行 Python 程序
在OS X上，选择Applications►Utilities►Terminal将弹出一个终端窗口。终端
窗口让你用纯文本在计算机上输入命令，而不是通过图形界面点击。要在 Ubuntu
Linux上打开终端窗口，就按Win（或Super）键，调出Dash并输入Terminal。
终端窗口将从你的用户账户的主文件夹开始。如果我的用户名是sweigart，OS X
上主文件夹在/Users/asweigart，Linux 上在/home/asweigart。波浪纯字符（~）是主
文件夹的快捷方式，所以你可以输入 cd ~切换到主文件夹。也可以使用 cd 命令，
将当前工作目录改变到任何其他目录。在OS X和Linux上，pwd命令将打印当前
工作目录。
为了运行Python程序，将你的.py文件保存到你的主文件夹。然后，更改.py文件
的权限，运行chmod +x pythonScript.py，使之成为可执行文件。文件权限超出了本
书的范围，但如果你想在终端窗口运行程序，就需要对Python文件运行此命令。这
样做之后，当你打开一个终端窗口，输入./pythonScript.py，就能运行该脚本。脚本
顶部的#!行会告诉操作系统，在哪里可以找到Python解释器。
B.4 运行 Python 程序时禁用断言
你可以禁用Python程序中的assert语句，从而稍稍提高性能。从终端窗口运行
Python时，在python或python3之后和.py文件之前加上-O开关。这将运行程序的
优化版本，跳过断言检查。
附录B 运行程序
附录 C
习 题 答 案
本附录包含每章末习题的答案。我强烈建议你花时间解答
这些习题。编程不只是记住语法和函数名列表。像学习外语一
样，练习越多，收获就越大。有许多网站也包含编程习题。你
可以在 http://nostarch.com/automatestuff/找到这些网站的列表。
第 1 章
1．操作符是+、−、*和/。值是'hello'、−88.8和5。
2．字符串是'spam'，变量是spam。字符串总是以引号开始和结束。
3．本章介绍的3种数据类型是整数、浮点数和字符串。
4．表达式是值和操作符的结合。所有表达式都求值为（即归约为）一个值。
5．表达式求值为一个值。语句不是这样。
6．bacon变量被设置为20。表达式bacon + 1并没有对bacon重新赋值（重新
赋值需要一个赋值语句：bacon =bacon + 1）。
7．两个表达式都求值为字符串'spamspamspam'。
8．变量名不能以数字开始。
9．int()、float() 和str() 函数将返回传入值的整型、浮点型和字符串版本。
10．该表达式导致错误是因为，99 是一个整数，只有字符串能用+操作符与其
他字符串连接。正确的方式是'I have eaten ' + str(99) + ' burritos.'。
第 2 章
1．True和False，使用大写的T和F，其他字母是小写。
2．and、or和not。
3．True and True是True。
True and False是False。
False and True是False。
False and False是False。
True or True是True。
True or False是True。
False or True是True。
False or False是False。
not True是False。
not False是True。
4．False
False
True
False
False
True
5．==、!=、、=。
6．==是等于操作符，它比较两个值，求值为一个布尔值，而=是赋值操作符，
将值保存在变量中。
7．条件是一个表达式，它用于控制流语句中，求值为一个布尔值。
8．3个语句块是if语句中的全部内容，以及print（'bacon'）和print（'ham'）这两行。
print('eggs')
if spam > 5:
print('bacon')
else:
print('ham')
print('spam')
9．代码：
382 Python编程快速上手——让繁琐工作自动化
if spam == 1:
print('Hello')
elif spam == 2:
print('Howdy')
else:
print('Greetings!')
10．按Ctrl-C来停止陷在无限循环中的程序。
11．break语句将执行移出循环，接着循环之后执行。continue语句将执行移到
循环的开始。
12．它们都是做同样的事。range（10）调用产生的范围是从0直到（但不包括）
10，range（0，10）明确告诉循环从0开始，range（0，10，1）明确告诉循环每次
迭代让变量增加1。
13．代码：
for i in range(1, 11):
print(i)
以及：
i = 1
while i <= 10:
print(i)
i = i + 1
14．该函数的调用方式是spam.bacon()。
第 3 章
1．函数减少了重复的代码。这让程序更短，更容易阅读，更容易修改。
2．函数中的代码在函数被调用时执行，而不是在函数定义时。
3．def语句定义了（即创建了）一个函数。
4．函数包含def语句和在def子句中的代码。函数调用让程序执行转到函数内，
函数调用求值为该函数的返回值。
5．在调用一个函数时，创建了一个全局函数和一个局部作用域。
6．函数返回时，局部作用域被销毁，其中所有的变量都被遗忘了。
7．返回值是函数调用求值的结果。像所有值一样，返回值可以作为表达式的
一部分。
8．如果函数没有return语句，它的返回值就是None。
9．global语句强制函数中的一个变量引用该全局变量。
10．None的数据类型是NoneType。
11．import语句导入了areallyourpetsnamederic模块（顺便说一句，这不是一个
附录C 习题答案 383
真正的Python模块）。
12．该函数可以通过spam.bacon() 调用。
13．将可能导致错误的代码行放在一个try子句中。
14．可能导致错误的代码放在 try 子句中。发生错误时要执行的代码放在except
子句中。
第 4 章
1．空的列表值，它是一个列表，不包含任何列表项。这类似于''是空的字符串值。
2．spam[2] = 'hello'（注意，列表中的第3个值下标是2，因为第1个值下标是0。）
3．'d'（注意'3' * 2 是字符串'33'，它被传入 int()，然后再除以 11。这最终求值
为3。在使用值的地方，都可以使用表达式）。
4．'d'（负数下标从末尾倒数）。
5．['a', 'b']
6．1
7．[3.14, 'cat', 11, 'cat', True, 99]
8．[3.14, 11, 'cat', True]
9．列表连接的操作符是+，复制的操作符是*（这和字符串一样 ）。
10．append() 只会将值添加在列表末尾，而insert() 可以将值添加在列表的任何
位置。
11．del语句和remove() 列表方法是从列表中删除值的两种方法。
12．列表和字符串都可以传入 len()，都有下标和切片，用于 for 循环，连接或
复制，并与in和not in操作符一起使用。
13．列表是可以修改的，它们可以添加值、删除值和修改值。元组是不可修改
的，它们根本不能改变。而且，元组使用的是括号（和），而列表使用的是方括号 [和]。
14．（42，）（末尾的逗号是必须的）。
15．分别使用tuple() 和list() 函数。
16．它们包含对列表值的引用。
17．copy.copy() 函数将浅拷贝列表，而copy.deepcopy() 函数将深拷贝列表。也
就是说，只有copy.deepcopy() 会复制列表内的所有列表。
第 5 章
1．两个花括号：{}
2．{'foo': 42}
384 Python编程快速上手——让繁琐工作自动化
3．保存在字典中的项是无序的，而列表中的项是有序的。
4．会得到KeyError错误。
5．没有区别。in操作符检查一个值是不是字典中的一个键。
6．'cat' in spam检查字典中是不是有一个 'cat' 键，而'cat' in spam.values() 检查是
否有一个值 'cat' 对应于spam中的某个键。
7．spam.setdefault('color', 'black')
8．pprint.pprint()
第 6 章
1．转义字符表示字符串中的一些字符，这些字符用别的方式很难在代码中打出来。
2．\n是换行符，\t是制表符。
3．\\转义字符表示一个反斜杠。
4．Howl's 中的单引号没有问题，因为你用了双引号来标识字符串的开始和结束。
5．多行字符串让你在字符串中使用换行符，而不必用\n转义字符。
6．这些表达式求值为以下值：
• 'e'
• 'Hello'
• 'Hello'
• 'lo world!
7．这些表达式求值为以下值：
• 'HELLO'
• True
• 'hello'
8．这些表达式求值为以下值：
• ['Remember,', 'remember,', 'the', 'fifth', 'of', 'November.']
• 'There-can-be-only-one.'
9．分别用rjust()、ljust() 和center() 字符串方法。
10．lstrip() 和rstrip() 方法分别从字符串的左边和右边移除空白字符。
第 7 章
1．re.compile() 函数返回Regex对象。
2．使用原始字符串是为了让反斜杠不必转义。
3．search() 方法返回Match对象。
4．group() 方法返回匹配文本的字符串。
附录C 习题答案 385