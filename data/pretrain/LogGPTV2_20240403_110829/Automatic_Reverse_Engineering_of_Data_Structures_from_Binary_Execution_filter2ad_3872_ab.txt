(1) system calls, (2) standard
library calls, and (3) type-revealing instructions.
System calls. Most programs request OS services via
system calls. Since system call conventions and semantics
are well-deﬁned, the types of arguments of a system call
are known from the system call’s speciﬁcation. By moni-
toring system call invocations and returns, REWARDS can
determine the types of parameters and return value of each
system call at runtime. For example, in Linux, based on
the system call number in register eax, REWARDS will be
able to type the parameter-passing registers (i.e., ebx, ecx,
edx, esi, edi, and ebp, if they are used for passing the
parameters). From this type sink, REWARDS will further
type those variables that are determined to have the same
type as the parameter passing registers. Similarly, when a
system call returns, REWARDS will type register eax and,
from there, those having the same type as eax. In our type
propagation and resolution algorithm (Section 3.2), a type
sink will lead to the recursive type resolution of relevant
variables accessed before and after the type sink.
Standard library calls. With well-deﬁned API, standard
library calls are another category of type sink. For example,
the two arguments of strcpy must both be of the char*
type. By intercepting library function calls and returns,
REWARDS will type the registers and memory variables
involved. Standard library calls tend to provide richer type
information than system calls – for example, Linux-2.6.15
has 289 system calls whereas libc.so.6 contains 2016
functions (note some library calls wrap system calls).
Examples in x86 are as follows:
Type-revealing instructions. A number of machine in-
structions that require operands of speciﬁc types can serve
as type sinks.
(1)
String instructions perform byte-string operations such as
moving/storing (MOVS/B/D/W, STOS/B/D/W), loading
(LOADS/B/D/W), comparison (CMPS/B/D/W), and scan-
ning (SCAS/B/D/W). Note that MOVZBL is also used in
string movement.
(2) Floating-point instructions oper-
ate on ﬂoating-point, integer, and binary coded decimal
operands (e.g. FADD, FABS, and FST). (3) Pointer-related
instructions reveal pointers. For a MOV instruction with
an indirect memory access operand (e.g., MOV (%edx),
the value held in the
%ebx or MOV [mem], %eax),
source operand must be a pointer. Meanwhile,
if the
target address is within the range of data sections such as
.stack, .heap, .data, .bss or .rodata, the pointer
must be a data pointer; If it is in the range of .text
(including library code), the pointer must be a function
pointer. Note that the concrete type of such a pointer will
be resolved through other constraints.
3.2 Online Type Propagation and Resolution Al(cid:173)
gorithm
Given a binary program, our algorithm reveals variable
types, including both syntactic types (e.g., int and char)
and semantics (e.g., return address), by propagating
and resolving type information along the data ﬂow during
program execution. Each type sink encountered leads
to both direct and transitive type resolution of variables.
More speciﬁcally, at the binary level, variables exist in
either memory locations or registers without their symbolic
names. Hence, the goal of our algorithm is to type these
memory addresses and registers. We attach three shadow
variables – as the type attribute – to each memory address
at byte granularity (registers are treated similarly):
(1)
Constraint set is a set of other memory addresses that
should have the same type as this address; (2) Type set
stores the set of resolved types of the address2, including
both syntactic and semantic types; (3) Timestamp records
the birth time of the variable currently in this address. For
example,
the timestamp of a stack variable is the time
when its residence method is invoked and the stack frame
is allocated. Timestamps are needed because the same
memory address may be reused by multiple variables (e.g.,
the same stack memory being reused by stack frames of
different method invocations). More precisely, a variable
instance should be uniquely identiﬁed by a tuple . These shadow variables are updated during
program execution, depending on the semantics of executed
instructions.
Algorithm 1 On-line Type Propagation and Resolution
1: /* Sv : constraint set for memory cell (or register) v; Tv : type set of v; tsv :
(birth) time stamp of v; MOV(v,w): moving v to w; BIN OP(v,w,d): a binary
operation that computes d from v and w; Get Sink Type(v,i): retrieving the
type of argument/operand v from the speciﬁcation of sink i; ALLOC(v,n):
allocating a memory region starting from v with size n – the memory region
may be a stack frame or a heap struct; FREE(v,n): freeing a memory region –
this may be caused by eliminating a stack frame or de-allocating a heap struct*/
case i is a Type Sink:
for each operand v
T ← Get Sink Type(v, i)
Backward Resolve (v, T )
case i has indirect memory access operand o
To ← To ∪ {pointer type t}
case i is BIN OP(v, w, d):
if pointer type t ∈ Tv
Unify(d, v)
Backward Resolve (w, {int, pointer index t})
else
Unify3(d, v, w)
case i is ALLOC(v, n):
for t=0 to n − 1
case i is MOV(v, w):
else
Unify(v, w)
if w is a register
Sw ← Sv
Tw ← Tv
2: Instrument(i){
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31: }
32: Backward Resolve(v,T ){
33:
for  ∈ Sv
34:
35:
36: }
37: Unify(v,w){
38:
39:
40:
41:
42: }
Tv ← Tv∪ T
case i is FREE(v, n):
for t=0 to n − 1
Backward Resolve(v, Tw -Tv )
Backward Resolve(w, Tv -Tw)
Sv ← Sv∪ {}
Sw ← Sw∪ {}
tsv+t ← current timestamp
Sv+t ← φ
Tv+t ← φ
a ← v+t
if (Ta) log (a, tsa, Ta)
log (a, tsa, Sa)
if (T 6⊂ Tw and t ≡ tsw ) Backward Resolve(w,T -Tw )
a set of  tuples each representing a
variable instance that should have the same type as v; its
type set Tv represents the resolved types for v; and the birth
time of the current variable instance is denoted as tsv.
1. If the current execution point i is a type sink (line
3). The arguments/operands/return value of the sink
will be directly typed according to the sink’s deﬁnition
(Get Sink Type() on line 5)3. Type resolution is
then triggered by calling the recursive method Back-
ward Resolve(). The method recursively types all
variables that should have the same type (lines 32-36):
It tests if each variable w in the constraint set of v has
been resolved as type T of v.
If not, it recursively
calls itself to type all the variables that should have
the same type as w. Note that at line 34, it checks if
the current birth timestamp of w is equal to the one
stored in the constraint set to ensure the memory has
If w is re-
not been re-used by a different variable.
used (t 6= tsw), the algorithm does not resolve the
current w. Instead, the resolution is done by a different
off-line procedure (Section 3.3). Since variable types
are resolved according to constraints derived from data
ﬂows in the past, we call this step backward type
resolution.
2. If i contains an indirect memory access operand o
(line 7), either through registers (e.g., using (%eax)
to access the address designated by eax) or memory
(e.g., using [mem] to indirectly access the memory
pointed to by mem), then the corresponding operand
will have a pointer type tag (pointer type t) as a
new element in To.
3. If i is a move instruction (line 9), there are two cases
to consider.
In particular, if the destination operand
w is a register, then we just move the properties (i.e.,
the Sv and Tv) of the source operand to the destination
(i.e., the register); otherwise we need to unify the types
of the source and destination operands because the
destination is now a memory location that may have
already contained some resolved types. The intuition
is that the source operand v should have the same type
as the destination operand w if the destination is a
memory address. Hence, the algorithm calls method
Unify() to unify the types of the two. In Unify() (lines
37-42), the algorithm ﬁrst unions the two type sets by
performing backward resolution at lines 38 and 39.
Intuitively, the call at line 38 means that if there are any
new types in Tw that are not in Tv (i.e. Tw-Tv), those
new types need to be propagated to v and transitively
to all variables that share the same type as v, mandated
by v’s constraint set. Such uniﬁcation is not performed
if the w is a register to avoid over-aggregation.
The algorithm is shown in Algorithm 1. The algorithm
takes appropriate actions to resolve types on the ﬂy accord-
ing to the instruction being executed. For a memory address
or a register v, its constraint set is denoted as Sv, which is
2We need a set to store the resolved types because one variable may
3The sink’s deﬁnition also reveals the semantics of some argu-
have multiple compatible types.
ments/operands, e.g., a PID.
4. If i is a binary operation, the algorithm ﬁrst tests if
an operand has been identiﬁed as a pointer. If so, it
must be a pointer arithmetic operation, the destination
must have the same type as the pointer operand and
the other operand must be a pointer index – denoted
by a semantic type pointer index t (line 18).
The semantic type is useful in vulnerability fuzz to
If i is not related to pointers, the
overﬂow buffers.
three operands shall have the same type. The method
Unify3() uniﬁes three variables. It is very similar to
Unify() and hence not shown. Note that in cases where
the binary operation implicitly casts the type of some
operand (e.g., an addition of a ﬂoat and an integer),
the uniﬁcation induces over-approximation (e.g., asso-
ciating the ﬂoat point type with the integer variable).
In practice, we consider such cases reasonable and
allow multiple types for one variable as long as they
are compatible.
5. If i allocates a memory region (line 21) – either a stack
frame or a heap struct, the algorithm updates the birth
time stamps of all the bytes in the region, and resets the
memory constraint set (Sv) and type set (Tv) to empty.
By doing so, we prevent the type information of the
old variable instance from interfering with that of the
new instance at the same address.
6. If i frees a memory region (line 26), the algorithm
traverses each byte in the region and prints out the type
information. In particular, if the type set is not empty,
it is emitted. Otherwise, the constraint set is emitted.
Later, the emitted constraints will be used in the off-
line procedure (Section 3.3) to resolve more variables.
Example. Table 1 presents an example of executing our
algorithm. The ﬁrst column shows the instruction trace
with the numbers denoting timestamps. The other columns
show the type sets and the constraint sets after each in-
struction execution for three sample variables, namely the
global variable g1 and two local variables l1 and l2. For
brevity, we abstract the calling sequence of strcpy to a
strcpy instruction. After the execution enters method M
at timestamp 10, the local variables are allocated and hence
both l1 and l2 have the birth time of 10. The global variable
g1 has the birth time of 0. After the ﬁrst mov instruction, the
type sets of g1 and l1 are uniﬁed. Since neither was typed,
the uniﬁed type set remains empty. Moreover, l1, together
with its birth time 10, is added to the constraint set of g1
and vice versa, denoting they should have the same type.
Similar actions are taken after the second mov instruction.
Here, the constraint set of l1 has both g1 and l2. The
strcpy invocation is a type sink and g1 must be of type
char*, the algorithm performs the backward resolution by
calling Backward Resolve(). In particular, the variable in
Sg1, i.e. l1, is typed to char*. Note that the timestamp
10 matches tsl1, indicating the same variable is still alive.
Transitively, the variables in Sl1, i.e. g1 and l2, are resolved
to the same type. Note that if the backward resolution was
not conducted, we would not be able to resolve the type
of l2 because when the move from l1 to l2 (timestamp 12)
occurred, l1 was not typed and hence l2 was not typed.
3.3 Off(cid:173)line Type Resolution
Most variables accessed during the binary’s execution
can be resolved by our online algorithm. However, there
are still some cases in which, when a memory variable gets
freed (and its information gets emitted to the log ﬁle), its
type is still unresolved. We realize that there may be enough
information from later phases of the execution to resolve
those variables. We propose an off-line procedure to be
performed after the program execution terminates.
It is
essentially an off-line version of the Backward Resolve()
method in Algorithm 1. The difference is that it has to
traverse the log ﬁle to perform the recursive resolution.
Consider the example in Table 2.
It shares the same
execution as the example in Table 1 before timestamp 13.
At time instance 13, the execution returns from M , de-
allocating the local variables l1 and l2. According to the
online algorithm, their constraint sets are emitted to a log
ﬁle since neither is typed at that point. Later at timestamp
99, another method N is called. Assume it reuses l1 and
l2, namely, N allocates its local variables at the locations of
l1 and l2. The birth time of l1 and l2 becomes 99. Their
type sets and constraint sets are reset. When the sink is
encountered at 100, l1 and l2 are not typed as their current
birth timestamp is 99, not 10 as in Sg1, indicating they
are re-used by other variables. Fortunately, the variable
represented by  can be found in the log and hence
resolved. Transitively,  can be resolved as well.
3.4 Typed Variable Abstraction
Our algorithm is able to annotate memory locations with
syntax and semantics. However, multiple variables may
occupy the same memory location at different times and
a static variable may have multiple instances at runtime4.
Hence it is important to organize the inferred type informa-
tion according to abstract, location-independent variables
other than speciﬁc memory locations. In particular, prim-
itive global variables are represented by their offsets to
the base of the global sections (e.g., .data and .bss
sections). Stack variables are abstracted by the offsets from
their residence activation record, which is represented by
the function name (as shown in Figure 1).
For heap variables, we use the execution context, i.e., the
PC (instruction address) of the allocation point of a heap
4A local variable has the same life time of a method invocation and a
method can be invoked multiple times, giving rise to multiple instances.
instruction
10. enter M
11. mov g1, l1
12. mov l1, l2
...
100. strcpy(g1,...)
Tg1
φ
φ
φ
...
Sg1
φ
{}
{}
...
{char*}
{}
tsg1
0
0
0
...
0
Tl1
φ
φ
φ
...
Sl1
φ
{}
{, }
...
{char*}
{, }
tsl1
10
10
10