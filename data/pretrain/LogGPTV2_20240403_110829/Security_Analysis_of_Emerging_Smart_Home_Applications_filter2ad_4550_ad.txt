be any number of device handlers in practice. We just know
that a SmartApp has asked for a speciﬁc capability. We do
not know precisely the set of capabilities it gains as a result
of being associated with a particular device handler. Therefore,
our approach is to use our dataset of 132 device handlers and
try different combinations of associations.
lock/un-
same
for
lock
that
capability.imageCapture so that
it can take a
picture of people entering the home. Now, for the two
capabilities, we must determine all possible combinations of
device handlers that implement those capabilities. For each
particular combination, we will obtain an overprivilege result.
In practice, we noticed that the number of combinations are
very large (greater than the order of hundreds of thousands).
Hence, we limit the number of combinations (our analysis is
conservative and represents a lower bound on overprivilege).
We limit the combinations such that we only pick device han-
dlers that implement the least number of capabilities among
all possible combinations.
door
it
asks
Our results indicate that 213 SmartApps exhibit this kind
of overprivilege (Table IV). These SmartApps gain access to
additional commands/attributes of capabilities other than what
the SmartApp explicitly requested.
C. Overprivilege Usage Prevalence
We found that 68 out of 499 (13.6%) SmartApps used
commands and attributes from capabilities other than what is
explicitly asked for in the preferences section. This is
not desirable because it can lock SmartThings into supporting
overprivilege as a feature, rather than correcting overprivilege.
As the number of SmartApps grow, ﬁxing overprivilege will
become harder. Ideally,
there has to be another way for
SmartApps to: (1) check for extra operations that a device
supports, and (2) explicitly ask for those operations, keeping
the user in the loop.
Note that members of this set of 68 SmartApps could still
exhibit overprivilege due to coarse SmartApp-SmartDevice
binding. However, whether
that happens does not affect
whether a SmartApp actually uses extra capabilities. Example
SmartApps that use overprivilege (which should not happen)
include:
• Gentle Wake Up: This SmartApp slowly increases the
luminosity of lights to wake up sleeping people. It deter-
mines dynamically if the lights support different colors
and changes light colors if possible. The SmartApp uses
commands from capabilities that it did not request to
change the light colors.
is opened. The SmartApp also controls
• Welcome Home Notiﬁcation: This SmartApp turns
track when a
on a Sonos player
door
the
power state of the Sonos player. The Sonos Smart-
Device supports capability.musicPlayer and
capability.switch. The developer relies on Smart-
Things giving access to the switch capability even though
the SmartApp never explicitly requests it. If the developer
had separately requested the switch capability too,
it
would have resulted in two identical device selection
screens during installation.
and plays
a
VI. PROOF-OF-CONCEPT ATTACKS
We show four concrete ways in which we combine various
security design ﬂaws and developer-bugs discussed in §IV to
weaken home security. We ﬁrst present an attack that exploits
an existing WebService SmartApp with a stolen OAuth token
to plant a backdoor pin-code into a door lock. We then show
three attacks that: steal door lock pin codes, disable security
settings in the vacation mode, and cause fake carbon monoxide
(CO) alarms using crafted SmartApps. Table V shows the
high-level attack summary. Finally, we discuss a survey study
that we conducted with 22 SmartThings users regarding our
door lock pin-code snooping attack. Our survey result suggests
that most of our participants have limited understanding of
security and privacy risks of the SmartThings platform—
over 70% of our participants responded that they would be
interested in installing a battery monitoring app and would
give it access to a door lock. Only 14% of our participants
reported that the battery monitor SmartApp could perform a
door lock pin-code snooping attack. These results suggest that
our pin-code snooping attack disguised in a battery monitor
SmartApp is not unrealistic.
A. Backdoor Pin Code Injection Attack
We demonstrate the possibility of a command injection
attack on an existing WebService SmartApp using an OAuth
access token stolen from the SmartApp’s third-party Android
counterpart. Command injection involves sending a command
string remotely over OAuth to induce a SmartApp to perform
actions that it does not natively support in its UI. This attack
makes use of unsafe Groovy dynamic method invocation,
overprivilege, and insecure implementation of the third-party
OAuth integration with SmartThings.
For our proof-of-concept attack, we downloaded a popular
Android app7 from the Google Play Store for SmartThings that
7The app has a rating of 4.7/5.
645645
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
FOUR PROOF-OF-CONCEPT ATTACKS ON SMARTTHINGS
TABLE V
Attack Description
Attack Vectors
Backdoor Pin Code Injection Attack
Door Lock Pin Code Snooping At-
tack
Disabling Vacation Mode Attack
Fake Alarm Attack
Command injection to an existing WebService SmartApp; Overprivilege
using SmartApp-SmartDevice coarse-binding; Stealing an OAuth token
using the hard-coded secret in the existing binary; Getting a victim to
click on a link pointing to the SmartThings Web site
Stealthy attack app that only requests the capability to monitor battery
levels of connected devices and getting a victim to install the attack
app; Eavesdropping of events data; Overprivilege using SmartApp-
SmartDevice coarse-binding; Leaking sensitive data using unrestricted
SMS services
Attack app with no speciﬁc capabilities; Getting a victim to install the
attack app; Misusing logic of a benign SmartApp; Event spooﬁng
Attack app with no speciﬁc capabilities; Getting a victim to install the
attack app; Spooﬁng physical device Events; Controlling devices with-
out gaining appropriate capability; Misusing logic of benign SmartApp
Physical World Impact
(Denning et al. Classiﬁcation [12])
Enabling physical entry; Physical
theft
Enabling physical entry; Physical
theft
Physical theft; Vandalism
Misinformation; Annoyance
intercept a redirection. Broadly, this part of the attack involves
getting a victim to click on a link that points to the authentic
SmartThings domain with only the redirect_uri portion
of the link replaced with an attacker controlled domain. The
victim should not suspect anything since the URL indeed takes
the victim to the genuine HTTPS login page of SmartThings.
Once the victim logs in to the real SmartThings Web page,
SmartThings automatically redirects to the speciﬁed redirect
URI with a 6 character codeword. At this point, the attacker
can complete the OAuth ﬂow using the codeword and the
client ID and secret pair obtained from the third-party app’s
bytecode independently. The OAuth protocol ﬂow for Smart-
Things is documented at [28]. Note that SmartThings provides
OAuth bearer tokens implying that anyone with the token can
access the corresponding SmartThings deployment. We stress
that stealing an OAuth token is the only pre-requisite to our
attack, and we perform this step for completeness (Appendix
B has additional details).
Injecting Commands to Exploit Overprivilege. The second
part of the attack involves (a) determining whether the Web-
Service SmartApp associated with the third-party Android app
uses Groovy dynamic method invocation, and (b) determining
the format of the command string needed to activate the
SmartApp endpoint.
The disassembled third-party Android app contained enough
information to reconstruct
the format of command strings
the WebService SmartApp expects. Determining whether the
SmartApp uses unsafe Groovy is harder since we do not
have the source code. After manually testing variations of
command strings for a setCode operation and checking
the HTTP return code for whether the command was suc-
cessful, we conﬁrmed that all types of commands (related
to locks) are accepted. Therefore, we transmitted a payload
to set a new lock code to the WebService SmartApp over
OAuth. We veriﬁed that the backdoor pin-code was planted
in the door lock. We note that the commands we injected
pertain to exploiting overprivilege—setCode is a member
646646
Fig. 4. Third-party Android app that uses OAuth to interact with SmartThings
and enables household members to remotely manage connected devices. We
intentionally do not name this app.
simpliﬁes remote device interaction and management. We refer
to this app as the third-party app. The third-party app requests
the user to authenticate to SmartThings and then authorizes
a WebService SmartApp to access various home devices. The
WebService SmartApp is written by the developer of the third-
party app. Figure 4 shows a screenshot of the third-party app—
the app allows a user to remotely lock and unlock the ZWave
door lock, and turn on and off the smart power outlet.
The attack has two steps: (1) obtaining an OAuth token
for a victim’s SmartThings deployment, and (2) determining
whether the WebService SmartApp uses unsafe Groovy dy-
namic method invocation and if it does, injecting an appropri-
ately formatted command string over OAuth.
Stealing an OAuth Token. Similar to the study conducted
by Chen et al. [10], we investigated a disassembled binary of
the third-party Android app and found that the client ID and
client secret, needed to obtain an OAuth token, are embedded
inside the app’s bytecode. Using the client ID and secret, an
attacker can replace the redirect_uri part of the OAuth
authorization URL with an attacker controlled domain to
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
1 mappings {
2
path("/devices") { action: [ GET: "listDevices"]
}
3
path("/devices/:id") { action: [ GET:
"getDevice", PUT: "updateDevice"] }
// --additional mappings truncated--
4
5 }
6
7 def updateDevice() {
8
def data = request.JSON
def command = data.command
def arguments = data.arguments
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28 }
log.debug "updateDevice, params: ${params},
request: ${data}"
if (!command) {
render status: 400, data: ’{"msg": "command
is required"}’
} else {
def device = allDevices.find { it.id ==
params.id }
if (device) {
if (arguments) {
device."$command"(*arguments)
} else {
device."$command"()
}
render status: 204, data: "{}"
} else {
render status: 404, data: ’{"msg": "Device
not found"}’
}
}
Listing 2. Portion of the Logitech Harmony WebService SmartApp available
in source form. The mappings section lists all endpoints. Lines 19 and 21 make
unsafe use of Groovy dynamic method invocation, making the app vulnerable
to command injection attacks. Line 23 returns a HTTP 204 if the command
is executed. Our proof-of-concept exploits a similar WebService SmartApp.
of capability.lockCodes, a capability the vulnerable
SmartApp in question automatically gained due to Smart-
Things capability model design (See §IV-A).
Although our example attack exploited a binary-only Smart-
App, we show in Listing 2 a portion of the Logitech Harmony
WebService SmartApp for illustrative purposes. Lines 19 and
21 are vulnerable to command injection since "$command"
is a string received directly over HTTP and is not sanitized.
In summary, this attack creates arbitrary lock codes (es-
sentially creating a backdoor to the victim’s house) us-
ing an existing vulnerable SmartApp that can only lock
and unlock doors. This attack leverages overprivilege due
to SmartApp-SmartDevice coarse-binding, unsanitized strings
used for Groovy dynamic method invocation, and the insecure
implementation of the OAuth protocol in the smartphone app
that works with the vulnerable SmartApp. Note that an attacker
could also use the compromised Android app to directly
unlock the door lock; but planting the above backdoor enables
sustained access—the attacker can enter the home even if the
Android app is patched or the user’s hub goes ofﬂine.
B. Door Lock Pin Code Snooping Attack
This attack uses a battery monitor SmartApp that disguises
the source code level. The battery
its malicious intent at
647647
Fig. 5. Snooping on Schlage lock pin-codes as they are created: We use the
Schlage FE599 lock in our tests.
monitor SmartApp reads the battery level of various battery-
powered devices paired with the SmartThings hub. As we
show later in §VI-E, users would consider installing such a
SmartApp because it provides a useful service. The SmartApp
only asks for capability.battery.
We tested the attack app on our test infrastructure consisting
of a Schlage lock FE599 (battery operated), a smart power
outlet, and a SmartThings hub. The test infrastructure includes
a SmartApp installed from the App Store that performs lock
code management—a common SmartApp for users with con-
nected door locks. During installation of the attack SmartApp,
a user is asked to authorize the SmartApp to access battery-
operated devices including the door lock.
Figure 5 shows the general attack steps. When a victim sets
up a new pin-code, the lock manager app issues a setCode
command on the ZWave lock device handler. The handler in
turn issues a sequence of set and get ZWave commands to
the hub, which in turn, generate the appropriate ZWave radio-
layer signaling. We ﬁnd that once the device handler obtains
a successful acknowledgement from the hub,
it creates a
codeReport event object containing various data items. One
of these is the plaintext pin-code that has been just created.
Therefore, all we need to do is to have our battery monitor
SmartApp register for all types of codeReport events on
all the devices it is authorized to access. Upon receiving a
particular event, our battery monitor searches for a particular
item in the event data that identiﬁes the lock code. Listing 3
shows an event creation log extracted from one of our test
runs including the plaintext pin code value. At this point,
the disguised battery monitor SmartApp uses the unrestricted
communication abilities that SmartThings provides to leak the
pin-code to the attacker via SMS.
This ﬁrst fundamental issue, again, is overprivilege due to
coarse SmartApp-SmartDevice binding. Even though the bat-
tery monitor SmartApp appears benign and only asks for the
battery capability, it gains authorization to other capabilities
since the corresponding ZWave lock device handler supports
other capabilities such as lock, lockCodes, and refresh.
The second fundamental
the SmartThings-
provided device handler places plaintext pin codes into event
data that is accessible to any SmartApp that is authorized to
issue is that
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
1 zw device:02,
2 command:9881,
3 payload:00 63 03 04 01 2A 2A 2A 2A 2A 2A 2A 2A 2A 2A
4 parsed to
5 [[’name’:’codeReport’, ’value’:4,
6 ’data’:[’code’:’8877’],
7 ’descriptionText’:’ZWave Schlage Lock code 4 set’,
8 ’displayed’:true,
9 ’isStateChange’:true,
10 ’linkText’:’ZWave Schlage Lock’]]
Listing 3. Sample codeReport event raised when a code is programmed
into a ZWave lock.
communicate with the handler in question.
Using Groovy dynamic method invocation, we disguised the
malicious pieces of code in the SmartApp and made it look
like SmartApp is sending the battery level to a remote service
that offers charting and history functionality. Depending upon