```  
postgres=# SELECT pg_export_snapshot();                        
 pg_export_snapshot   
--------------------  
 00000802-1  
(1 row)  
```  
SESSION C(导入read committed事务状态, 查看数据) :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '00000802-1';  
SET  
postgres=# select * from snapshot ;  
 id | info   
----+------  
  1 | abc  
  2 | test  
(2 rows)  
```  
三、并行导出一致性数据.  
1\. 单节点导出事务状态  
2\. 多节点导入事务状态, 同时copy数据.  
测试 :   
测试数据 :   
```  
postgres=# create table a(id int primary key, info text, crt_time timestamp);  
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "a_pkey" for table "a"  
CREATE TABLE  
postgres=# create table b(id int primary key, info text, crt_time timestamp);  
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "b_pkey" for table "b"  
CREATE TABLE  
postgres=# insert into a select generate_series(1,1000000), md5(clock_timestamp()::text), clock_timestamp();  
INSERT 0 1000000  
postgres=# insert into b select generate_series(1,1000000), md5(clock_timestamp()::text), clock_timestamp();  
INSERT 0 1000000  
```  
导出事务状态 :   
SESSION A :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SELECT pg_export_snapshot();  
 pg_export_snapshot   
--------------------  
 0000080E-1  
(1 row)  
```  
并行导出数据 :   
SESSION B :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '0000080E-1';  
SET  
postgres=# copy a to '/home/ocz/a.csv' with csv;  
COPY 1000000  
```  
SESSION C :   
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# SET TRANSACTION SNAPSHOT '0000080E-1';  
SET  
postgres=# copy b to '/home/ocz/b.csv' with csv;  
COPY 1000000  
```  
使用以上方法的并行导出用到的shell脚本可以参考本文末尾.  
PostgreSQL 9.3可能会将并行导出的功能添加到pg_dump工具中. 如下 :   
https://commitfest.postgresql.org/action/patch_view?id=785  
http://www.postgresql.org/message-id/flat/CACw0+PI:EMAIL#CACw0+PI:EMAIL  
四、并行查询与并行导出类似, 也可以借鉴snapshot的特性.  
1\. 单节点导出事务状态  
2\. 多节点导入事务状态, 同时按照一定的规则并行查询, 合并查询结果.  
## 参考  
1\. http://www.postgresql.org/docs/9.2/static/sql-set-transaction.html  
2\. http://www.postgresql.org/docs/9.2/static/functions-admin.html#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION  
3\. http://blog.163.com/digoal@126/blog/static/1638770402012416105232835/  
4\. http://blog.163.com/digoal@126/blog/static/163877040201241134721101/  
5\. src/backend/utils/time/snapmgr.c  
6\. src/bin/pg_dump/pg_dump.c  
```  
        /*  
         * Start transaction-snapshot mode transaction to dump consistent data.  
         */  
        ExecuteSqlStatement(fout, "BEGIN");  
        if (fout->remoteVersion >= 90100)  
        {  
                if (serializable_deferrable)  
                        ExecuteSqlStatement(fout,  
                                                                "SET TRANSACTION ISOLATION LEVEL "  
                                                                "SERIALIZABLE, READ ONLY, DEFERRABLE");  
                else  
                        ExecuteSqlStatement(fout,  
                                                                "SET TRANSACTION ISOLATION LEVEL "  
                                                                "REPEATABLE READ");  
        }  
        else  
                ExecuteSqlStatement(fout,  
                                                        "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE");  
```  
7\. http://www.postgresql.org/message-id/flat/CACw0+PI:EMAIL#CACw0+PI:EMAIL  
8\. http://www.depesz.com/2013/03/05/parallel-dumping-of-databases/  
9\. 并行dump脚本可以参考depesz的进行修改 :   
以下用于导出digoal库. PGHOST=sockdir  
```  
ocz@db-172-16-3-150-> cat dump.sh  
#!/usr/bin/env bash  
# configuration  
PATH=$PATH:$HOME/bin  
export PATH  
export LANG=en_US.utf8  
export PGHOME=/home/ocz/pgsql9.2.1  
export LD_LIBRARY_PATH=/opt/uuid-1.6.2/lib:$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export PGDATA=/data05/ocz/pg_root  
export PGPORT=9201  
export PGUSER=postgres  
export PGHOST=$PGDATA  
export PGDATABASE=digoal  
# Temporary directory for small helper files  
tmp_dir="$( mktemp -d )"  
trap 'rm -rf "$tmp_dir"' EXIT  
# Run master psql  
exec 50> >( exec psql -qAtX )  
master_pid="$!"  
# Start transaction  
printf 'BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n' >&50  
# Get transaction snapshot id  
printf '\o %s/snapshot.id\n' "$tmp_dir" >&50  
printf 'SELECT pg_export_snapshot();\n' >&50  
# Get list of tables to dump  
printf '\o %s/tables.list\n' "$tmp_dir" >&50  
printf 'SELECT c.oid::regclass FROM pg_class c join pg_namespace n on c.relnamespace = n.oid WHERE c.relkind = $$r$$ and n.nspname !~ $$^(pg_|information_schema)$$ ORDER BY pg_table_size(c.oid) desc;\n' >&50  
# Create file that marks that all is done in master  
printf '\o %s/marker.file\n' "$tmp_dir" >&50  
printf 'SELECT 1;\n' >&50  
printf '\o\n' >&50  
# Wait for marker file to appear  
while true  
do  
    if [[ -s "$tmp_dir/marker.file" ]]  
    then  
        break  
    fi  
    sleep 0.1  
done  
# Get snapshot id to variable  
snapshot_id="$(  "$table_name.dump" &  
done < "$tmp_dir/tables.list"  
# wait for all dumps to finish  
wait  
echo "All done."       
```    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")