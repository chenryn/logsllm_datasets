### 虚拟机 - 恶意程式攻防的新战场

#### 讲师简介
王大宝，小时候被称为王小宝，长大后改称王大宝。他目前隶属于一个神秘单位。虽然表面上的兴趣是阅读和听音乐，但实际上他在晚上经常打游戏。长期在系统底层工作，熟悉汇编语言（ASM）以及C/C++编程。尽管他对信息安全毫无兴趣和经验，但被某位“坏人”骗上了讲台，成为了一名难得的素人讲师。

#### 议程大纲
现今的CPU普遍支持虚拟化专用指令集，使得虚拟机（VM）能够获得硬件层面的支持。在这个环节中，我们将详细介绍Intel的VT指令集及其Hypervisor的工作机制。此外，我们还将探讨在恶意软件研究领域中，Hypervisor模式下的应用，包括恶意程序技术和侦测分析的应用。最后，我们将展示自行开发的一个能够在Hypervisor模式下运行的恶意软件POC，并且该POC无法被现有的防毒与防护系统侦测到。

### Agenda
1. **VMM on x86**
2. **Hardware Assisted Architecture**
3. **VMM Software Implementing**
4. **Security & VMM**

#### 什么是VMM
- 完全控制平台
- 物理硬件与虚拟环境之间的一层薄层
- 能够从客户操作系统中选择性地保留控制权

#### 现实世界
现实是残酷的，从VM中醒来不一定是好事 ... :P

#### 什么是VMM（续）
- Guest OS 1
- Guest OS 2
- VMM
- 物理处理器

#### Hypervisor类型
- **Intel® VT-x**
  - 由Intel引入
  - 包含一套新的指令集
  - 为每个Guest提供完全隔离的环境
  - 解决了由于Guest OS与Host OS在同一级别执行而引起的问题
  - 提供比字节码模拟更好的性能

#### 关键词
- VMM运行在VMX根操作模式
- 客户端软件运行在VMX非根操作模式
- 从VMM到客户端软件的转换称为VM entry
- 从客户端软件到VMM的转换称为VM exit

#### VMX根操作
- 检查CPU功能
  ```assembly
  mov eax, 1
  cpuid
  test ecx, 20h
  ```
- 准备一个不可分页的内存区域（VMXON Region）
  - 存储主机上下文
  - 对齐到4KB
  - 在MTRR范围内 – 写回（类型6）
  - 大小 = MSR#480 [43:32]
  - 版本ID = MSR#480 [31:0]

#### 启用VMXE位
  ```assembly
  mov eax, cr4
  or eax, Bit13
  mov cr4, eax
  ```

#### VMXON指令
  ```assembly
  vmxon phymem_vmxon_region
  Hello, real world…
  ```

#### VMX非根操作
- 准备一个不可分页的内存区域（VMCS）
  - 存储客户端软件状态
  - 对齐到4KB
  - 在MTRR范围内 – 写回（类型6）
  - 大小 = MSR#480 [43:32]
  - 版本ID = MSR#480 [31:0]

#### 初始化VMCS
- VMCLEAR, VMPTRLD
  - VMCLEAR：初始化新的VMCS区域，设置启动状态为“clear”，并使无效的工作VMCS指针寄存器
  - VMPTRLD：使用新的VMCS区域的物理地址初始化工作VMCS指针，并验证工作VMCS指针寄存器

#### 访问特定VMCS字段
- VMWRITE, VMREAD
  - 每个字段都有其编码
  - 示例：
    - GUEST_RIP = 681eh
    - 设置GUEST_RIP到VMCS：
      ```assembly
      mov eax, 681eh
      vmwrite eax, dword ptr NEW_GUEST_RIP
      ```
    - 从VMCS获取GUEST_RIP：
      ```assembly
      mov eax, 681eh
      vmread ebx, eax
      ```

#### 运行客户端软件
- VMLAUNCH, VMRESUME
  - 将VMCS的启动状态设置为“launched”

#### VM退出处理
- VMM从VMCS获取VM退出原因，决定是否处理
- 位位置和内容
  - 15:0：基本退出原因
  - 27:16：保留（清零）
  - 28：待处理MTF VM退出
  - 29：从VMX根操作退出
  - 30：保留（清零）
  - 31：VM入口失败（0 = 真正的VM退出；1 = VM入口失败）

#### VM退出的基本原因
- > 50：敏感指令
- 权限寄存器更改
- 异常
- 退出资格包含额外信息
- 处理完VM退出后执行VMRESUME

#### VMM软件生命周期
- VMXON
- VMM
- Guest
- VMXOFF
- VMM Lives
- VM Entry
- VM Exit

#### 系统虚拟机
- IA-32操作
- VT-x操作
- Ring 0
- Ring 3
- VMX根操作
- VMX非根操作
- VM 1
- VM 2
- VM n
- VMXON
- VMLAUNCH
- VMRESUME
- VM退出
- VMCS

#### 安全与VMM
- VMM对Guest是透明的
- 实现良好的VMM很难被检测
- 目前大多数VMM检测技术基于VMM本身的缺陷
- VMM的正面用途可以成为对抗各种恶意软件攻击的强大武器
- 可以用于任何一方
- 但是...

#### 实现VMM的难点
- 没有操作系统API
- 没有现有的输入/输出
- 没有现有的驱动程序
- 开发者需要在VMM中实现一切
  - 磁盘读写
  - 键盘输入/输出
  - 控制视频RAM进行输出
  - 直接操作NIC、USB堆栈

#### VMX与SMM比较
- 从软件开发者角度来看，VMX操作非常类似于SMM
- 对客户端透明
- 具有处理器上下文存储
- 对系统的完全控制
- 隔离环境，DIY一切
- 不同点
  - SMM由硬件触发
  - SMM优先级高于VMX
  - SMM在运行时不可访问

#### 恶意软件与VMM
- 如何检测或分析内核恶意软件？
- 用户模式恶意软件
- 内核模式恶意软件
- 内核行为监控
- ???

#### 演示1：不可见的VMM键盘记录器
- 手工制作的键盘记录器在VMM中
- 从I/O端口捕获键盘输入
- 隐藏文件在Guest OS文件系统中
- 绝对不可见... 是的
  - 无法被世界上任何防病毒软件或HIPS检测到

#### 文件系统在VMM中的实现
- hitkey2010已保存到磁盘
- VMM键盘记录器

#### 演示2：Rootkit检测
- 使用VMM进行物理内存取证
- EPROCESS解析
- SSDT解析
- 等等
- 展示我们的新玩具

#### VMM在取证方法中的应用
- 发现Fu rootkit隐藏的进程

#### Q&A

#### 参考资料
- Intel® 64 and IA-32 Architectures Software Developer's Manual Vol.2, Vol.3
- [HyperDbg](http://code.google.com/p/hyperdbg/)
- [Virtualization Technology Blog](http://virtualizationtechnologyvt.blogspot.com/)
- [IBM DeveloperWorks](http://www.ibm.com/developerworks/cn/linux/l-cn-vt/index.html)
- [Invisible Things Lab](http://www.invisiblethingslab.com/)