过程风险。
安全与风险管理成熟度分布
39.41%
35.87%
19.52%
5.20%
0.00%
初始级
基础级
全面级
优秀级
卓越级
注释：ITU 和 ISO、IEC 并称国际三大标准化组织。ITU（国际电信联盟）是联合国的国际标准组织，成立于1865年（比联合国还早80年），是193个主权国家的政府间组织。ITU 
和 国际原子能机构、国际货币基金组织和教科文组织并列，均为联合国专门机构。
FreeBuf 咨询荣誉出品 
3
CHAPTER
THREE
第三章
企业 DevSecOps
落地与指导 
FreeBuf 咨询荣誉出品 
CHAPTER THREE
07
未建立专业安全团队
65.02%
第三章 企业 DevSecOps 落地与指导
由于DevSecOps仍然处于初始阶段，还没有一个通用化的标准或实践指南，并没有很多成熟经验可以借鉴，企业在落地之初主要遇到的挑战如下：
安全人才短缺
根据《中国DevOps现状调查报告（2019年）》，有65.02%的企业仍未建立专业安全团队。事实上，大多数企业仍处于“一个人的安全部”的现状，日常
工作主要承担防火墙、安全监测、补丁管理、病毒管理等较传统的网络安全工作。近年随着安全越来越被重视，企业开始成立独立的安全团队，然而
大部分仅仅是IT人员的扩张，专业的安全人员比例却在降低。
3.1 DevSecOps 落地挑战
图 《中国 DevOps 现状调查报告（2019 年）》- 专业安全团队比例低
由于DevSecOps需要安全左移，安全需要和研发更紧密的协作。而安全人才市场面临着极大的缺口，缺乏专业的安全人员，便可能导致和研发沟通
不畅，因而影响安全和DevOps嵌入的效率。
文化的挑战
安全通常是作为独立组织存在，且与研发和运营分开。此外，在IT人员的概念中，安全往往会增加IT人员额外的工作量，拖累项目的进度甚至延期，因
而IT人员与安全往往站在对立面。同时研发人员和运营人员大都不懂安全。由此造成的文化与意识壁垒，一时间很难打破。
安全知识和技能薄弱
DevSecOps需要研发、运维及安全人员协作，共同承担安全职责，可站在对方的视角看待问题。但是对于研发和运维人员来说，往往缺少安全意识及
技能，在系统设计开发及部署运维等环节，无法高效协同保障安全性。
安全与研发流程割裂
安全测试工具有很多种类，如源代码安全扫描、黑盒安全测试、开源组件安全测试、主机安全测试等。这些安全测试工具通常为独立的工具及单独的
Web页面，需要研发人员分别登录查看漏洞及修复，部分测试工具的扫描时间可能还会长达小时级。由于安全与研发流程的割裂，便会影响DevOps
的快速迭代。
专业安全团队比例
已建立专业安全团队
34.98%
CHAPTER THREE
07
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
3.2 DevSecOps 落地与指导
伴随着DevSecOps战略框架的日趋完善，国内相关行业的建设也迅速开展起来。总体来说，基于Gartner DevSecOps理念，企业需要从文化、流程及
技术三方面切入，通过固化流程、加强人员协作以及工具化、自动化技术手段将安全无缝内嵌到研发流程中，从而实现企业DevSecOps落地。
DevSecOps实质上是对传统IT文化的变革，因此落地的推动往往需要获取上层支持，通过意识宣贯及安全培训等手段，改变只有安全人员对安全负
责的态度和观念，让研发团队及运维团队到每个人都需要对安全负责。
好的DevSecOps文化能够支持更严格的安全策略的贯彻执行。在有着优良企业安全文化的团队中，安全自然成为了一种共同的责任，在这种文化
之下，不同业务部门间的鸿沟会相对更为容易跨越，在问题出现的时候，也会得到最早地解决。
3.2.1  安全文化变革
Gartner给出建议，不要强制DevOps开发人员采用安全人员的旧的流程。相反地，将安全保证措施无缝集成到开发的持续集成（CI）和持续部署
（CD）的工具链中。
详细来讲，针对安全工作的阶段左移，需要在软件开发的初期就介入进来。从安全需求定义、威胁建模、安全扫描、安全黑盒测试等多个方面进行安
全能力内建，如安全需求导入至统一需求管理流程与工具、安全测试工具集成到CI持续集成和CD持续部署、安全漏洞结果导入到缺陷管理工具等，
由此顺利衔接安全与研发相关工具及流程。
3.2.2  安全左移流程
图 安全建设安全活动干系人
08
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
图 DevSecOps 工具链
企业从关注安全到实现落地，需要切实地进行投入，包括开发、测试、运营过程中的流程规范、实践，在此过程中，离不开各项工具平台的建设。将流程
和工具完美结合，通过将安全能力内建到工具中，也是DevSecOps 落地中关键的一环。
在DevSecOps理念的发展过程中，一直是在不断演变且逐渐成熟，但不同阶段的理论成熟度与实践也存在较大的差异化。在本报告中我们尝试基于
Gartner输出的DevSecOps工具链对其不同阶段进行解读。
DevSecOps主要分为10个阶段，分别是计划（Plan）、创建（Create）、验证（Verify）、预发布（Preprod）、发布（Release）、预防（Prevent）、检测（Detect）、
响应（Respond）、预测（Predict）、适应（Adapt），其中预防（Prevent）在之前的版本里也有叫做配置（Conﬁgure）。
计划阶段是DevSecOps的第一个阶段，其包含了SDL模型里培训、需求、设计等几个阶段，主要关注的是开发前的安全动作。根据Gartner官方工具链模
型可以看出其主要是包含有偿还技术安全债务、安全开发衡量指标、威胁建模、安全工具培训。
技术债务指开发人员为了加速软件开发，在应该采用最佳方案时进行了妥协，改用了短期内能加速软件开发的方案，从而在未来给自己带来的额外开
发负担。那么对应的技术安全债务就是相关技术架构中一些考虑不完善的点而潜藏的安全风险，一般就是在安全设计或者需求阶段没有进行相关的
安全设计和评估而导致，在后续的安全工作里都是需要认识其风险并且给出安全解决方案逐渐偿还。举个例子，比如在一些项目的开发过程中为了快
速实现功能，选用了一些不安全的框架，那么在后续的维护过程中可能会不断受其安全问题影响而需要不断的进行修复，比如说struts2，那么安全团
队应该给出方案，比如说禁用替换该组件。
安全开发衡量指标为需要制定对应的安全开发的衡量指标，以便于评估安全开发模型实施的效果，比如漏洞发现率，统计上线前后漏洞的发现情况，
来评估安全开发流程是否有效在安全开发过程中有效收敛安全漏洞。
威胁建模是在需求和设计阶段识别和消减安全威胁的一种手段，如SDL里微软提出的“STRIDE”，基于数据流图去识别不同环节是否存在仿冒、篡改、
抵赖、信息泄露、拒绝服务、权限提升几个维度的安全威胁，并制定对应的消减措施，落实并验证。这里还有个概念是轻量的威胁建模，相对比“STRIDE”
这种传统意义上比较复杂的威胁建模过程，轻量的威胁建模通常通过安全checklist等方式进行简单快速的实现设计、需求阶段的安全风险识别并处
3.2.3  构建DevSecOps工具链
3.2.3.1 Plan 计划阶段
CHAPTER THREE
09
2 0 2 0  D e v S e c O p s 企 业 实 践 白 皮 书
FreeBuf 咨询荣誉出品 
置，一般也容易落地与实行，并且也能取得一定的效果，而不至于让这个安全动作名存实亡。
安全工具培训则就是字面的意思，由于DevSecOps相对比SDL等更强调自动化，所以相关安全动作通常由安全工具实现，同时安全动作不再只是安全
团队执行，所以也要针对开发等同学进行安全工具使用的培训，以便于帮助其在不同阶段使用安全工具进行检查。
当然，除了DevSecOps工具链所标记的四点，其实在计划阶段，类似安全编码规范、安全编码培训、安全流程的学习、安全需求定义、制定和发布标准化
安全功能等需求、设计阶段实际安全动作都可以归入这个阶段，并不存在明显的冲突或者矛盾。
3.2.3.2 Create 创建阶段
创建阶段主要就是指编码阶段。编码阶段主要进行安全编码及检查，旨在在编码阶段进行安全风险的消除。主要包含参考安全编码规范进行安全编
码，通过IDE安全插件进行源代码的安全检测，也可以进行安全编码规范的自动化检查，如是否使用不安全或禁用的函数等；甚至是检查代码中是否引
用使用了不安全或不合规的第三方组件。
3.2.3.3 Verify 验证阶段
验 证 阶 段 其 实 就 是 测 试 阶 段，主 要 以 自 动 化 的 应 用 安 全 测 试（AST，Application Security Testing）和 软 件 成 分 分 析（SCA，Software 
Composition Analysis）为主。
应用安全测试主要分为动态应用安全测试（DAST）、静态应用安全测试（SAST）、交互式应用安全测试（IAST,）。DAST 是一种黑盒测试方式，是
在应用测试或运行环境模拟黑客构造特定的恶意请求从而分析确认应用是否存在安全漏洞的一种方式，也是过去最常用的一种应用测试方式，比
如我们常见的 APPSCAN、AWVS、W3AF 等 Web 漏洞扫描器就是属于这种类型；而 SAST 是针对源代码的一种分析测试方式（部分工具也会依赖
于编译过程甚至编译后文件进行分析测试），常见的 Coverity、Checkmarx、CodeQL 等自动化静态代码审计工具就属于这个类型；而 IAST 是
Gartner 在 2012 年提出的一种应用安全测试方式，寻求结合 DAST 和 SAST 的优势，其实现原理通常通过插桩的方式在应用环境安装 Agent，在
特定位置插入探针，然后通过测试用例执行触发请求，探测获取请求、代码数据流、控制流等，然后进行综合的判断分析是否存在漏洞。相对比
DAST 和 SAST，IAST 既能识别漏洞所在代码位置，又能记录触发漏洞的请求。相对比其他两类应用安全测试，IAST 的一些现有成熟工具会比较少，
但国内外也开始涌现相关厂商在输出这块的工具。
软件成分分析主要是关注应用中引入使用的第三方组件的情况。根据 Gartner 和 Synopsys 调研报告显示，99% 的组件在企业 IT 系统以及 99% 的
软件中使用第三方组件，而 Synopsys 2020 年开源安全报告更是指出 75% 的开源代码存在漏洞，49% 包含高风险漏洞，所以第三方组件安全问题
成为影响软件安全问题的核心点之一。SCA 通过分析软件成分，识别软件中使用的第三方组件是否存在安全问题或者合规风险，以此消除第三方
组件带来的安全风险。该类工具主要有 OWASP Dependency Check、BlackDuck Hub、FOSSID 等。
3.2.3.4 Preproduction 预发布阶段
预发布阶段一般是测试阶段及正式发布阶段的中间阶段，其与测试阶段不同的是预发布阶段所发布的预发布环境是连接的正式环境的数据库等，其
等同于独立部署的非对外公开的正式环境。在DevSecOps工具链中预发布阶段主要包含有混沌工程（Chaos Engineering）、模糊测试（Fuzzing）、集成
测试三个安全动作。
混沌工程，是一种提高技术架构弹性能力的复杂技术手段，以实验发现系统性弱点，简单的解释就是通过主动制造故障，测试系统在各种压力下的行
为，识别并修复故障问题，避免造成严重后果。