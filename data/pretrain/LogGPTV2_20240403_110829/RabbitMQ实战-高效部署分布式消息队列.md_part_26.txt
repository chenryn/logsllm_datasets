channel.basic_ack(delivery_tag=method.delivery_tag)
if
_name_
== "_main_":
服务器
AMQP_SERVER = Sys.argv[1]
设置
AMQP_PORT = int (sys.argv[2])
creds_broker =pika.PlainCredentials("guest","guest")
建立服
conn_params =pika.ConnectionParameters( AMQP_SERvER,
务器连
port=AMQP_PORT,
接设置
virtual_host="/",
credentials=creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
发起到
channel = conn_broker.channel()
开始处
RabbitMQ
理订单
的连接！
print "Ready for orders!"
channel.basic_consume( msg_rcvd,
queue="warehouse_carpinteria"
no_ack=False,
channel.start_consuming()
这和你在第4章中用来处理告警的那段消费者代码没太大区别。生产者（如下
列清单所示）就更加简单了，仅仅更改了消息发送的牛油果订单格式。
清单7.4Shovel测试生产者
import sys，json,pika,random
AMQP_HOST = sys.argv[1]
AMQP_PORT = int(sys.argv[2])
建立到
AVOCADO_TYPE = Sys.argv[3]
服务器
creds_broker=pika.PlainCredentials("guest","guest")
<的连接
conn_params =pika.ConnectionParameters(AMQP_HOST,
port=AMQP_PORT,
virtual_host="/",
credentials= creds_broker)
conn_broker =pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
msg = json.dumps({"ordernum": random.randrange(0, 100, 1),
连接到
"type":AVOCADO_TYPE})
RabbitMQ
msg_props =pika.BasicProperties(content_type="application/json")
并发送消息
channel.basic_publish(body=msg, mandatory=True,
exchange="incoming_orders",
properties=msg_props,
routing_key="warehouse")
print "Sent avocado order message."
---
## Page 174
152
第7章warren和Shovel：故障转移和复制
消费者接收两个命令行参数：目的服务器主机名和自的服务器端口号。生产者
接收同样的参数，不过还多了第三个参数：牛油果类型（hass/哈斯、fuerte/富尔
特等一一任何单词都可以）。你将通过生产者向源节点发送牛油果订单，然后通过
Shovel的魔法，在另一个完全独立的目的服务器上的消费者接收并打印订单。让我
们启动消费者并连接到目的节点吧：
$ python shovel_consumer.py 1ocalhost 5676
Ready for orders!
现在让我们向源节点发布一个牛油果订单：
$ python shovel_producer.py localhost 5675 hass
回到消费者终端，你应该看到如下所示的内容：
$ python shovel_consumer.py localhost 5676
Readyfororders!
Receivedorder 66for hass.
太棒了，你拥有了一个可以工作的Shovel，使得发布到一台RabbitMQ服务
器上的消息可以被完全无关的另一台服务器消费。虽然比配置集群更为单调，但
是Shovel扩展了RabbitMQ，允许你创建更为健壮的拓扑结构，将两台完全无关的
RabbitMQ服务器和集群联合起来。在RabbitMQ原生支持远程复制之前，可以暂时
先使用Shovel插件。
7.4总结
将Rabbit打造得富有弹性是一个相当漫长的旅程，而在一开始的时候，你还任
由服务器故障摆布从而导致Rabbit崩溃，并把消息通信架构“踢”下线。现在你不
用再对供电中断提心吊胆了。如果你想要完全的高可用性，并且不接受任何消息丢
失的情况下，就可以使用两台独立的RabbitMQ服务器来搭建warren，并用负载均
衡器使它们对应用程序来说像单个实体。如果由于某些原因，你需要这种可靠性扩
展为将众多数据中心的Rabbit桥接起来，那么你知道该如何使用Shovel来提供复制
功能。也许最重要的是，你知道如何使应用程序在面对单台Rabbit故障时快速恢复。
不要对连接的服务器状态做任何假设，同时实现重连机制；满足以上两点，消费者
---
## Page 175
7.4总结
153
和生产者就能利用任何你学到的RabbitMQ余选项从节点故障中恢复，而不错过
任何细枝末节。现在，你的应用程序和Rabbit足够健壮、富有弹性，并且已经为生
产环境做好了准备！但是当健壮的分布式RabbitMQ基础架构对于管理员来说是一
场痛苦的话，那还有什么用呢？为了回答这个问题，我们进人下一章，RabbitMQ
Management插件的美妙世界。
---
## Page 176
从Web端管理RabbitMQ
本章要点
Management插件相对于rabbitmqctl脚本的优势
■启用RabbitMQManagement插件
■Management插件功能
■从Web控制台来管理用户、队列和交换器
■Management插件REST接口介绍
到目前为止，我们一直是通过rabbitmqctl脚本在命令行上来管理RabbitMQ
的。在输人多次rabbitmqctl之后，你可能会梦想有一个图形界面来管理服务
器，因为MySQL有phpMyAdmin，CouchDB有Futon。对图形界面的需求导致了
RabbitMQ社区创作了众多RabbitMQ的Web管理程序，它们之间差不多有相同的
功能：展示队列状态，添加用户，创建vhost，等等。值得庆幸的是，RabbitMQ团
队听取了来自社区的声音，开发了RabbitMQManagement插件。随着时间的推移，
他们为了收集更多关于代理服务器使用状态而改进了服务器的-Erlang API。这些状
态包括每秒消息发送数据、队列使用速率等。在本章中，你将会学习使用该插件，
学会启用它并使用它的Web界面来管理用户、队列和交换器。进一步，你将学习新
的RESTAPI，你可以通过新的rabbitmqadmin脚本轻松访问。
---
## Page 177
8.1超越rabbitmqctl:：RabbitMQManagement插件
155
8.1超越rabbitmqctl：RabbitMQManagement插件
重要的事情先来一—到目前为止我们尚未讨论过插件。插件是一种扩展作者未
能预见到的服务器的行为方式。RabbitMQ的插件是由Erlang语言编写的，并且和
服务器一同运行在同一个ErlangVM中。之后我们会有专门的一章来教你如何编写
自己的RabbitMQ插件；因此在本章中我们将专注于如何启用并使用Management插
件。让我们先看看为什么需要Management插件、它的功能是什么，以及如何在你
的机器上启用并运行。
8.1.1为何需要Management插件
比方说你很喜欢rabbitmqctl脚本（我们也一样）。如果你问为何需要使用该
插件的话，以下是一些原因。
rabbitmqctl脚本很棒，它让你可以做很多管理服务器的事情，但是它也
有一些不足之处。首先，为了运行rabbitmqctl脚本，当前的Linux用户需要
拥有访问用来启动服务器的Erlangcookie权限。由于服务器可能是以root或者
rabbit用户身份来运行的，因此你需要对这些文件的访问权限。如果你是个人团
队或者开发人员不多的话，这没什么问题。但如果是大型团队呢？为那个文件进行
权限管理将变得一团糟。你会在团队成员中分享密码吗？故事到这里还没结束。当
你拥有.erlang.cookie文件的访问权限时，这意味着你可以从Erlang控制台直
接连接到RabbitMQ进程；也意味看你可以在服务器上执行破坏性的操作一不管
是有意还是无意一没人可以阻止你。
除了安全问题之外，并不是所有的项目团队成员都是CLI的粉丝。我们工作过
的几个项目中，甚至连产品负责人也想知道队列还留有多少后台通知。此外，有些
时候你只想单击看看着色的信息，这比rabbitmgctl脚本生成的文本输出要容易
理解多了。
8.1.2Management 插件功能
Management插件长什么样子呢？图8.1向你展示了不错的Web界面，你可以
访问下列功能：
---
## Page 178
156
第8章从Web端管理RabbitMQ
?
556721#
☆
RabbitMQ
User:guest
Overview
Channels
Exchanges
Queues
Users
Virtual Hosts
Virtualhost:A
Overview
Totals
Queued
Ready
Unackn
Fota
0
0
0
Currentlyidle
Nodes
Name
Filedescriptors(7)Socket descriptors(?)Erlang processes
Memory
Uptime
Version
Type
rabbitomrhyde
37/256
4/138
199/1048576
17h21m2.7.0/R14B04DIscStats
3.0G8highwaem
图8.1RabbitMQManagement插件主界面
·服务器数据统计概览一已投递的消息、服务器内存信息、Erlang进程数等
■导人/导出服务器配置
■监控服务器连接
■打开的信道列表
■交换器列表、添加交换器
■队列列表、添加队列
■修改队列绑定
■用户列表、添加用户
■vhost列表、添加vhost
现在让我们动手启用这个插件吧。
8.1.3启用Management 插件
使用最新版的RabbitMQ（写作本书时为2.7.0），插件的安装变得很简单。事实
上，由于新版服务器发行包已经绑定了该插件，所以无须再进行安装了。唯一要做
的事情是启用它们。如果进人RabbitMQ安装目录，运行以下命令你就能看到可用
的插件了：
---
## Page 179
8.1超越rabbitmqctl：RabbitMQManagement插件
157
$ ls plugins/
README
amqp_client-2.7.0.ez
eldap-2.7.0-git.ez
erlando-2.7.0.ez
mochiweb-1.3-rmq2.7.0-git.ez
rabbitmq_auth_backend_1dap-2.7.0.ez
rabbitmq_auth_mechanism_ssl-2.7.0.ez
rabbitmq_consistent_hash_exchange-2.7.0.ez
rabbitmq_federation-2.7.0.ez
rabbitmq_jsonrpc-2.7.0.ez
rabbitmq_jsonrpc_channel-2.7.0.ez
rabbitmq_jsonrpc_channel_examples-2.7.0.ez
rabbitmq_management-2.7.0.ez
rabbitmq_management_agent-2.7.0.ez
rabbitmq_management_visualiser-2.7.0.ez
rabbitmq_mochiweb-2.7.0.ez
rabbitmq_shove1-2.7.0.ez
rabbitmq_shovel_management-2.7.0.ez
rabbitmq_stomp-2.7.0.ez
rabbitmq_tracing-2.7.0.ez
rfc4627_jsonrpc-2.7.0-git.ez
webmachine-1.7.0-rmq2.7.0-hg.ez
以.ez扩展名结尾的文件就是插件和支持的库了。举个例子，你想要启用
的Management插件依赖于AMQPErlang客户端amqp_client-2.7.0.ez和
webmachine插件webmachine-1.7.0-rmq2.7.0-hg.ez都在插件列表之中。为
了启用Management插件，你需要在代理服务器的sbin文件夹下运行以下命令：
$./rabbitmq-plugins enable rabbitmq_management
The following plugins have been enabled:
mochiweb
webmachine
rabbitmq_mochiweb
amqp_client
rabbitmq_management_agent
rabbitmq_management
Plugin configuration has changed.Restart RabbitMQ
for changes to take effect.
如你所见，rabbitmq_management插件和与之相关的支持插件启用成功了！
但是你仍然需要重启代理服务器以使变更生效。
1如果在运行./rabbitmq-pluginsenablerabbitmq_management命令之后你得到了一个关于
文件权限的错误的话，那么你很有可能需要修改/etc/rabbitmq/文件夹的权限设置。使用chown
为运行rabbitmg进程的用户来更改该文件夹的权限。然后重新尝试启用该插件。