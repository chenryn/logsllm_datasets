# 第十二章：资料系统的未来
![](../img/ch12.png)
> 如果船长的终极目标是保护船只，他应该永远待在港口。
>
> —— 圣托马斯・阿奎那《神学大全》（1265-1274）
---------------
[TOC]
到目前为止，本书主要描述的是 **现状**。在这最后一章中，我们将放眼 **未来**，讨论应该是怎么样的：我将提出一些想法与方法，我相信它们能从根本上改进我们设计与构建应用的方式。
对未来的看法与推测当然具有很大的主观性。所以在撰写本章时，当提及我个人的观点时会使用第一人称。你完全可以不同意这些观点并提出自己的看法，但我希望本章中的概念，至少能成为富有成效的讨论出发点，并澄清一些经常被混淆的概念。
[第一章](ch1.md) 概述了本书的目标：探索如何建立 **可靠**、**可伸缩** 和 **可维护** 的应用与系统。这一主题贯穿了所有的章节：例如，我们讨论了许多有助于提高可靠性的容错演算法，有助于提高可伸缩性的分割槽，以及有助于提高可维护性的演化与抽象机制。在本章中，我们将把所有这些想法结合在一起，并在它们的基础上展望未来。我们的目标是，发现如何设计出比现有应用更好的应用 —— 健壮、正确、可演化、且最终对人类有益。
## 资料整合
本书中反复出现的主题是，对于任何给定的问题都会有好几种解决方案，所有这些解决方案都有不同的优缺点与利弊权衡。例如在 [第三章](ch3.md) 讨论储存引擎时，我们看到了日志结构储存、B 树以及列式储存。在 [第五章](ch5.md) 讨论复制时，我们看到了单领导者、多领导者和无领导者的方法。
如果你有一个类似于 “我想储存一些资料并稍后再查询” 的问题，那么并没有一种正确的解决方案。但对于不同的具体环境，总会有不同的合适方法。软体实现通常必须选择一种特定的方法。使单条程式码路径能做到稳定健壮且表现良好已经是一件非常困难的事情了 —— 尝试在单个软体中完成所有事情，几乎可以保证，实现效果会很差。
因此软体工具的最佳选择也取决于情况。每一种软体，甚至所谓的 “通用” 资料库，都是针对特定的使用模式设计的。
面对让人眼花缭乱的诸多替代品，第一个挑战就是弄清软体与其适用环境的对映关系。供应商不愿告诉你他们软体不适用的工作负载，这是可以理解的。但是希望先前的章节能给你提供一些问题，让你读出字里行间的言外之意，并更好地理解这些权衡。
但是，即使你已经完全理解各种工具与其适用环境间的关系，还有一个挑战：在复杂的应用中，资料的用法通常花样百出。不太可能存在适用于 **所有** 不同资料应用场景的软体，因此你不可避免地需要拼凑几个不同的软体来以提供应用所需的功能。
### 组合使用衍生资料的工具
例如，为了处理任意关键词的搜寻查询，将 OLTP 资料库与全文搜寻索引整合在一起是很常见的需求。尽管一些资料库（例如 PostgreSQL）包含了全文索引功能，对于简单的应用完全够了【1】，但更复杂的搜寻能力就需要专业的资讯检索工具了。相反的是，搜寻索引通常不适合作为持久的记录系统，因此许多应用需要组合这两种不同的工具以满足所有需求。
我们在 “[保持系统同步](ch11.md#保持系统同步)” 中接触过整合资料系统的问题。随著资料不同表示形式的增加，整合问题变得越来越困难。除了资料库和搜寻索引之外，也许你需要在分析系统（资料仓库，或批处理和流处理系统）中维护资料副本；维护从原始资料中衍生的快取，或反规范化的资料版本；将资料灌入机器学习、分类、排名或推荐系统中；或者基于资料变更传送通知。
令人惊讶的是，我经常看到软体工程师做出这样的陈述：“根据我的经验，99% 的人只需要 X” 或者 “...... 不需要 X”（对于各种各样的 X）。我认为这种陈述更像是发言人自己的经验，而不是技术实际上的实用性。可能对资料执行的操作，其范围极其宽广。某人认为鸡肋而毫无意义的功能可能是别人的核心需求。当你拉高视角，并考虑跨越整个组织范围的资料流时，资料整合的需求往往就会变得明显起来。
#### 理解资料流
当需要在多个储存系统中维护相同资料的副本以满足不同的访问模式时，你要对输入和输出了如指掌：哪些资料先写入，哪些资料表示衍生自哪些来源？如何以正确的格式，将所有资料汇入正确的地方？
例如，你可能会首先将资料写入 **记录系统** 资料库，捕获对该资料库所做的变更（请参阅 “[变更资料捕获](ch11.md#变更资料捕获)”），然后将变更以相同的顺序应用于搜寻索引。如果变更资料捕获（CDC）是更新索引的唯一方式，则可以确定该索引完全派生自记录系统，因此与其保持一致（除软体错误外）。写入资料库是向该系统提供新输入的唯一方式。
允许应用程式直接写入搜寻索引和资料库引入了如 [图 11-4](../img/fig11-4.png) 所示的问题，其中两个客户端同时传送冲突的写入，且两个储存系统按不同顺序处理它们。在这种情况下，既不是资料库说了算，也不是搜寻索引说了算，所以它们做出了相反的决定，进入彼此间永续性的不一致状态。
如果你可以透过单个系统来提供所有使用者输入，从而决定所有写入的排序，则透过按相同顺序处理写入，可以更容易地衍生出其他资料表示。这是状态机复制方法的一个应用，我们在 “[全序广播](ch9.md#全序广播)” 中看到。无论你使用变更资料捕获还是事件溯源日志，都不如简单的基于全序的决策原则更重要。
基于事件日志来更新衍生资料的系统，通常可以做到 **确定性** 与 **幂等性**（请参阅 “[幂等性](ch11.md#幂等性)”），使得从故障中恢复相当容易。
#### 衍生资料与分散式事务
保持不同资料系统彼此一致的经典方法涉及分散式事务，如 “[原子提交与两阶段提交](ch9.md#原子提交与两阶段提交)” 中所述。与分散式事务相比，使用衍生资料系统的方法如何？
在抽象层面，它们透过不同的方式达到类似的目标。分散式事务透过 **锁** 进行互斥来决定写入的顺序（请参阅 “[两阶段锁定](ch7.md#两阶段锁定)”），而 CDC 和事件溯源使用日志进行排序。分散式事务使用原子提交来确保变更只生效一次，而基于日志的系统通常基于 **确定性重试** 和 **幂等性**。