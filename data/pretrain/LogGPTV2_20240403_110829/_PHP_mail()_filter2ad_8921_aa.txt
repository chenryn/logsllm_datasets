# 【技术分享】详细解析PHP mail()函数漏洞利用技巧
|
##### 译文声明
本文是翻译文章，文章来源：exploitbox.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
翻译：[ **myswsun**](http://bobao.360.cn/member/contribute?uid=2775084127)
**预估稿费：300RMB**
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**0x00 前言**
本白皮书旨在消除关于PHP mail函数在漏洞利用中的限制的一些误解，并展示利用的进一步发展。
它提供了几个关于PHP mail()函数的新的漏洞利用和绕过技术的向量，在主要的PHP e-mail发送库（PHPMailer、Zend
Framework/Zend-mail、SwiftMailer）都发现了多个致命的漏洞，它们还被数百万的web应用/项目（如WordPress、Drupal、Joomla等）和PHP编程框架（Zend、Yii2、Symphony、Laravel等）使用。
这些技术包括被认为通过mail()函数不可利用的Exim向量。这个向量使mail()注入攻击提升到一个新的水平。
成功利用mail函数可以使攻击者获得远程代码执行权限和其他恶意目的。
**0x01 SMTP协议——RFC2821**
根据[ **RFC2821**](https://www.ietf.org/rfc/rfc2821.txt)
，一个客户端email程序能通过下面的方式发送一系列SMTP命令给SMTP服务器：
从理解PHP mail()函数/sendmail的邮件地址使用的角度看，重要的部分是SMTP客户端在两个地方指定了发送者的地址：
在头部。
在DATA命令中。
前者被目的SMTP服务器用来在有问题的情况下回退邮件使用。
后者被电子邮件客户端软件（如outlook、thunderbird等）使用，用来在‘From’地址字段显示发送者的信息（基于From头），同时决定（基于Reply-To头或者From头）点击回复按钮时选择哪个地址回复。
**0x02 mail()函数**
Mail()是标准的PHP函数，被用来作为[ **PHP脚本**](http://php.net/manual/en/function.mail.php)
中发送邮件的接口。函数原型如下：
从攻击者的角度，最后一个参数是最有趣的，因为它允许注入额外的参数给系统安装的/usr/bin/sendmail程序，该程序使用mail()发送消息。
**1\. 第5个参数（$ additional_parameters）**
第5个参数是可选的。许多WEB应用使用它设置发送者地址/返回路径：
或者：
这个参数地址就传递给/usr/sbin/sendmail，其将使用这个电子邮件地址通知接收邮件服务器关于原始/发送者的信息（通过MAIL
FROM命令），如果分发错误将返回错误信息。
**2\. /usr/bin/sendmail接口调用mail()函数**
/usr/bin/sendmail程序是用来发送邮件的接口。它由邮件传输代理（MTA）软件安装在系统上（如Sendmail、Postfix等）。
当使用mail()发送邮件时，PHP脚本如下：
PHP将调用execve()执行sendmail程序：
并且通过它的标准输入传递下面的数据：
-t和-i参数由PHP自动添加。参数-t使sendmail从标准输入中提取头，-i阻止sendmail将‘.‘作为输入的结尾。-f来自于mail()函数调用的第5个参数。
有趣的事就在这，sendmail命令在系统shell的帮助下执行，给了注入攻击的机会，只需要传递不受信的输入到最后一个参数即可。
**0x03 通过mail()和$additional_parameters Sendmal命令注入**
如果一个攻击者能够注入数据到mail()函数的第5个参数中，例如，通过不过滤的GET变量获取的$sender：
攻击者能够通过PHP脚本请求注入任意的攻击参数给/usr/sbin/sendmail：
其执行mail():
将导致使用参数执行sendmail：
**1\. escapeshellcmd()逃逸**
重要的是mail()函数能通过下面函数内部执行命令逃逸：
因此shell字符不能起作用。例如，设置$senders_email GET变量：
不会导致shell_injection文件的创建，因为>字符会被escapeshellcmd()转义，sendmail最终如下调用：
**2\. sendmail命令参数注入**
攻击者能够注入额外的参数给sendmail命令，因为mail()调用的escapeshellcmd()函数默认不会转义$additional_parameters。它使得编程者可以自由的传入多个参数，但是可能是个漏洞。
成功的注入能触发sendmail额外的功能。
例如，如果攻击者设置$return变量为：
Sendmail将在shell命令中如下调用：
如果-LogFile是sendmail的一个可靠的参数，将能使得程序写一个日志文件为/tmp/output_file。
结果是Sendmail MTA的/usr/sbin/sendmail接口中真的有这么一种日志功能实现，使用-X参数开启，能够用来保存攻击者的恶意代码。
**0x04 /usr/sbin/sendmail中不同的实现**
如上文提到的，sendmail接口由MTA邮件软件(Sendmail, Postfix, Exim etc.)安装提供。
尽管基本的功能（如-t –I –f参数）是相同的，其他功能和参数根据MTA的不同有变化。
例如，-X参数是来日志记录，只在在上节中提到的版本实现了。在其他的里面简单的实现它作为一个假的开关，出于某些原因，不支持相关参数。
正式由于这个，sendmail的man页也会根据MTA的变化而变化。
下面是一些不同版本的sendmail接口的man页：
**0x05 已知的利用向量**
关于mail()的第五个参数能被恶意利用最早披露于2011年Sogeti / ESEC发布的[ **文章**](http://esec-pentest.sogeti.com/posts/2011/11/03/using-mail-for-remote-code-execution.html)
中。
本文揭露了Sendmail MTA的2种利用向量，允许攻击者任意读写文件，并能通过-C和-X参数获得远程代码执行。
这两种向量只能在Sendmail MTA中有效，呈现如下。
**1\. Sendmail MTA：使用-C参数文件任意读**
参考sendmail的man页：
这两个参数能组合使用使得sendmail加载任意文件作为配置，且输出一系列错误消息内容（由于未知的配置行）。
例如，如果攻击者注入：
作为mail()的5th参数，下面的命令将被执行：
保存下面的内容到/tmp/output.txt：
对于远程攻击者是有效的。输出文件需要放在可写目录下面，且能通过web服务器得到。
**2\. Sendmail MTA：任意文件写/远程代码执行**
Sendmail MTA版本的/usr/sbin/sendmail的-X参数也能和下面参数组合使用：
这个参数的描述如下：
攻击者需要选择可写目录来保存临时文件。
这允许成功发送一个消息给sendmail，同时通过-X参数保存日志文件到任意文件。
这个PoC将保存$body 内的PHP代码到/tmp/poc.php日志文件中：
因为攻击者能控制文件名和内容，如果攻击者将它保存到root目录下面的可写目录中去，这潜在的导致任意PHP代码执行：
能通过一个GET请求执行它：
为了实现这个，上传目录必须启用解析/执行PHP文件，有时由于安全原因，管理员或应用安装者会关掉它（通过在上传目录放置.htaccess规则文件）。
也该注意到输出日志文件可能包含大量的调试信息。
**0x06 作者发现的新的攻击向量**
由于复杂性和一些历史漏洞原因，Sendmail MTA很少被使用。
现代linux分发中已不再默认包含它，且在基于Redhat的系统（如centos）上被Postfix
MTA替换，在基于Debian的系统（如Ubuntu、Debian等）上被Exim MTA替代。
这使得在真实环境中很难找到Sendmail MTA。即使找到了，有时也会因为一些限制导致利用失败（如修改webroot路径、php执行目录等）。
在本文以前所有已知的向量都需要Senmail MTA，作者发现了一种新的利用向量，能在Exim和Postfix上使用。
**1\. 所有的MTA：抢夺邮件/执行侦查**
不会因为MTA改变而改变的参数之一如下
如果攻击者控制mail()的第五个参数，只需简单的追加一个recipient：
执行命令如下：
发送邮件到攻击者的邮箱PI:EMAIL：
这揭露了：
使用的操作系统版本（Debian）
服务器IP