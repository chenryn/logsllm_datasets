ACM Conference on Computer and Communications
Security, Washington, D.C. October 2004.
[26] C. Palmer, G. Siganos, M. Faloutsos, C. Faloutsos, and
P. B. Gibbons. The Connectivity and Fault-Tolerance
of the Internet Topology. Proceedings of the Work-
shop on Network Related Data Management, Santa
Barbara, California, May 2001.
[27] S. Park, A. Khrabrov, D. M. Pennock, S. Lawrence,
C. L. Giles, and L. H. Ungar. Static and Dynamic
Analysis of the Internet’s Susceptibility to Faults and
Attacks. Proceedings of the IEEE International Con-
ference on Computer Communications, San Francisco,
California, March 2003.
[28] N. Spring, R. Mahajan, D. Wetherall, and T. Ander-
son. Measuring ISP Topologies with Rocketfuel. Pro-
ceedings of the SIGCOMM Conference, Pittsburgh,
Pennsylvania, August 2002.
[29] H. Tangmunarunkit, R. Govindan, S. Jamin, S.
Shenker, and W. Willinger. Network Topology Gen-
erators: Degree-Based vs. Structural. Proceedings of
the SIGCOMM Conference, Pittsburgh, Pennsylvania,
August 2002.
[30] S. L. Tauro, C. Palmer, G. Siganos, and M. Faloutsos.
A Simple Conceptual Model for the Internet Topol-
ogy. Proceedings of the IEEE Global Communications
Conference, San Antonio, Texas, November 2001.
[31] F. Wu and B. A. Huberman. Finding Communities in
Linear Time: A Physics Approach. European Physical
Journal B, 38:331-338, 2004.
[32] E. W. Zegura, K. L. Calvert, and M. J. Donahoo. A
Quantitative Comparison of Graph-Based Models for
Internet Topology. IEEE/ACM Transactions on Net-
working, 5(6):770–783, 1997.
[33] Y. Zhang, S. K. Dao, H. Vin, L. Alvisi, and W.
Lee. Heterogeneous Networking: A New Surviv-
ability Paradigm.
Proceedings of the New Secu-
rity Paradigms Workshop, Cloudcroft, New Mexico,
September 2001.
A Pair Connectivity Results
This section presents additional results using the Pair
Connectivity metric. Figure 7 shows the performance of
the different algorithm on the Sprint topology and Figure 8
shows the robustness of the different topologies when col-
ored using the Partition algorithm. The results are analo-
gous to those presented in Sections 5.2 and 5.3 for the Nor-
malized Size of the Largest Component. In addition, we
present a more detailed example on how unbalanced parti-
tions decrease the robustness of a network.
Figure 7(a) shows that the Cluster algorithm performs
better than the Partition algorithm in terms of average ro-
bustness. This is due to the unbalanced coloring performed
by the Cluster algorithm. With two colors, the Cluster al-
gorithm assigns one color to 58 nodes and the other color
to the remaining 546 nodes. Removing the ﬁrst color yields
a PC of 0.817 and removing the second one yields a PC of
0.009. Thus, the average PC is 0.413. On the other hand,
the Partition algorithm assigns the ﬁrst color on 309 nodes
and the other color on 295 nodes. This is expected since
a graph partitioning algorithm tries to balance the number
of nodes in each partition. Thus, in both cases the PC is
close to 0.25. As a result, the minimum PC yielded by the
Cluster algorithm is 0.009, while the corresponding ﬁgure
for the Partition algorithm is 0.25. Note that the above ex-
ample highlights some interesting observation on the pair
connectivity. If the colored graph has n
2 nodes using each
color (most balanced coloring with 2 colors), the maximum
value for PC is close to 0.25, while that for NSLC is 0.5.
It might surprise the reader that in the above example the
average robustness is 0.413, larger than 0.25. Since the PC
metric is quadratic in the number of nodes, a case with very
Sprint
Sprint
)
e
v
A
(
y
t
i
v
i
t
c
e
n
n
o
C
r
i
a
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
Random
Cluster
Partition
Max
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
Number of colors
(a) Average Pair Connectivity
)
n
M
i
(
y
t
i
v
i
t
c
e
n
n
o
C
r
i
a
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
 2
Random
Cluster
Partition
Max
 4
 6
 8
 10
 12
 14
 16
 18
 20
Number of colors
(b) Minimum Pair Connectivity
Figure 7. Pair Connectivity of the coloring obtained using the different coloring algorithms on the
Sprint topology
good connectivity overcompensates a case with small con-
nectivity. This explains why in Figure 7(a) the average PC
for the Cluster algorithm is above the Max line.
If p ≤ pc, then
L1(H (n)
m (p)) = o(n)
B Randomized Coloring Analysis
Here, we conduct theoretical analysis for the effective-
ness of the randomized coloring on large power-law graphs,
such as the Internet AS-level topology [13]. Note that
the power-law model does not apply to router-level topolo-
gies [20] and here we deal with the AS-level Internet topol-
ogy where each AS randomly selects a router implementa-
tion to use on all its routers.
Let H (n)
m represent a random graph consisting of n nodes
formed in the following way (a.k.a. preferential attach-
ment): nodes are added one at a time, by joining each new
node to an independently chosen set of m earlier nodes
where the probability for choosing a given node is propor-
tional to its degree. We then construct a subgraph H n
m(p)
by deleting each node independently with probability 1− p.
Bollob´as and Riordan [11] have shown that there is a “phase
transition”: there is a certain critical value pc such that a
component of order Θ(n) remains with high probability as
n → ∞ if and only if p > pc.
Let L1(G) represent the size of the largest component
of G, L2(G) represent the size of the second largest com-
ponent of G. More formally, we have the following theo-
rem [11]:
Theorem 1 Let m ≥ 2 and 0  0,
then
(2)
m (p)) = fm(ǫ)n + o(n)
L1(H (n)
and
L2(H (n)
m (p)) = o(n)
holds with high probability as n → ∞, where
fm(ǫ) = exp(−Θ(1/√ǫ)).
As m gets higher the critical value pc gets lower. Thus,
with m = 2, which is the lowest possible value of m, we
have pc = 0.146. Thus, for every graph with m ≥ 2, if
we retain edges with probability slightly higher than 0.146,
then we expect to observe a very large component, linear to
n.
Note that Theorem 1 states the necessary condition in or-
der to retain a giant component, which is a component that
has size linear to the size of the initial graph, when deleting
nodes at random in a preferential-attachment random graph.
With randomized coloring using k colors, when we remove
all nodes of the same color, we can easily see that it is es-
sentially equivalent to deleting nodes at random in the same
graph with probability 1/k.
Therefore, we can conclude that for a large graph follow-
ing the preferential attachment model (where n → ∞), even
the minimum number of two colors is sufﬁcient in order to
have a giant component, because in this case we are retain-
ing nodes with probability p = 0.5 > pc. When we have 3
colors we are retaining nodes with probability p = 0.666.
Partition
Partition
)
e
v
A
(
y
t
i
v
i
t
c
e
n
n
o
C
r
i
a
P
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
)
n
M
i
(
y
t
i
v
i
t
c
e
n
n
o
C
r
i
a
P
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
Mesh
Abilene
Cenic
Exodus
Sprint
Verio
Tier 1
Mesh
Abilene
Cenic
Exodus
Sprint
Verio
Tier 1
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
Number of colors
(a) Average Pair Connectivity
Number of colors
(b) Minimum Pair Connectivity
Figure 8. Robustness of the different topologies when colored using the Partition algorithm.
Indeed, even though in our graphs the number of nodes does
not really approach inﬁnity, as required by the above theo-
rem, we have performed experiments that show that when
using 3 colors we achieve a high robustness.
includes both generating the partitions and coloring them.
Thus, it is quite feasible to run the Partition algorithm mul-
tiple times, e.g., by varying the degree of unbalance in the
graph, and select the partition with highest robustness.
C Algorithm Runtime
Table 4 shows the algorithms runtime on the Verio topol-
ogy, which has the largest number of nodes. The algorithms
Algorithm
Dynamic Load
Cluster
Static Load
Dynamic Degree
Redundancy-Next
Static Degree
Random
Redundancy-Random
Partition
Run Time
(19 runs)
Run Time
(1 run average)
711.8
100.1
42.8
31.6
29.9
29.6
29.5
29.3
2.2
37.5
5.3
2.2
1.7
1.6
1.6
1.6
1.5
0.1
Table 4. Algorithm runtime (in minutes) on the
Verio topology. The middle column shows the
total runtime for coloring the graph 19 times,
from 2 to 20 colors. The rightmost column
shows the average time per color set
are run on a Pentium IV desktop computer with 1.8 GHz
CPU and 1 GB of RAM. The runtime includes the time to
color the graph and the time to compute the robustness of
the colored graph.
The Dynamic Load algorithm is the most expensive, tak-
ing 37 minutes per color set. On the other hand, the Parti-
tion algorithm takes only a few seconds per color set, which