share a single input, hence they are completely independent
of one another. They are deﬁned as follows.
SO(a9a11 . . . a47) :=
SE(a10a12 . . . a46) :=
15
4
X
M
j=0
i=0
15
3
X
M
j=0
i=0
f (a9+2ia11+2i . . . a47+2i),
for (a49a51a53a55) = j
f (a10+2ia12+2i . . . a48+2i),
for (a48a50a52a54) = j
Next, we deﬁne sets consisting of all possible internal state
bits TOp, TEq determined by partial sum property p, q for
the odd and even sum property, respectively.
TOp := {x | x ∈ F20
TEq := {x | x ∈ F19
2 and SO(x) = p}
2 and SE(x) = q}
Now suppose that we have determined both the odd and
even sum property of the cipher’s internal state. As we will
see below, this uniquely determines the sum property.
Lemma 5.7. Suppose that both SO and SE of the cipher’s
internal state are known. Then also S is known and is given
by the following equation.
s = p(16 − q) + (16 − p)q, where p, q, s = SO(·), SE(·), S(·)
Proof. Published in [Mei15].
Note that one may expect the sum property value to seem
normally distributed by its deﬁnition. However, this is not
the case due to, among other phenomena, the property just
described. See Figure 5.1 for a bar chart depicting the possi-
ble values for the sum property against their corresponding
probabilities for a randomly chosen cipher state.
At this point, we have all the building blocks needed for
constructing a candidate key list without iterating through
Obtaining this number of nonces would typically take time
in the order of hours. However, by taking a probabilistic
approach we can determine the sum property at time 8 with
very high probability with much fewer nonces.
The relation between byte {nT[8,15] } and a[56,63]
is un-
known to us since it depends on the key. However, accord-
ing to lemma 5.3, it is one-to-one, hence collision-free. Addi-
tionally, {nT }, and thus {nT[8,15] } is chosen randomly by the
card. As such, we regard every unique {nT[8,15] } we receive
as a random (though unknown) sample for a[56,63].
Let U be a set of tuples ({b}, {p}) ∈ F8
2 × F2 storing en-
crypted nonce bytes together with their corresponding en-
crypted parity bits. We deﬁne U such that it contains all
unique samples we received for {nT[8,15] }, i.e.
the second
nonce byte, with a constant {nT[0,7] }.
We give a brief example in order to clarify the in-
tuition behind the probabilistic approach:
Suppose U
has 20 entries. From these samples, we compute k =
P({b},{p})∈U L7
i=0{b} ⊕ {p}, i.e. the sum property over the
sample space. Now suppose that we ﬁnd k = 0. From this
observation we may conclude that the sum property at time
8 with the preﬁx chosen is very likely 0. In fact, the actual
probability for this to be the case is approximately 0.9775.
Although we only have 20 samples for {nT[8,15] }. Hence, in
this example, we require to gather only
256 · (
256
256
+
256
255
+
256
254
+ · · · +
256
237
) ≈ 5320.24
nonces on average. We now formalize this this intuition. A
key concept we use here is the Hypergeometric distribution.
Deﬁnition 5.8. The hypergeometric distribution is a dis-
crete probability distribution that describes the probability
of k successes in n draws, without replacement, from a ﬁ-
nite population of size N containing exactly K successes,
wherein each draw is either a success or failure.
A random variable X follows the hypergeometric distri-
bution if its probability mass function (pmf) is given by
P (X = k) = (cid:0)K
k (cid:1)(cid:0)N−K
n−k (cid:1)
(cid:0)N
n(cid:1)
Where
N is the population size
K is the number of success states in the population
n is the number of draws
k is the number of successes
We deﬁne the following random variables
S := The sum property
T := The result of P({b},{p})∈U L7
X := The result of P({b},{p})∈U L7
ﬁxed value K of the sum property
sum property over the current sample space
i=0{b} ⊕ {p}, i.e. the
i=0{b} ⊕ {p}, for a
X follows a hypergeometric distribution with parameters
N, K, n and output k, where
N = 256
K = S(α8), i.e. the sum property at time 8
n = #U , i.e. the number of unique samples gathered for
{nT[8,15] }, for some constant {nT[0,7] }
k = P({b},{p})∈U L7
i=0{b} ⊕ {p}, i.e. the sum property
computed over the current sample space
By deﬁnition of the random variables we get
P (X = k) = P (T = k|S = K)
Figure 5.1: Sum values and probabilities. Probabilities are
obtained by averaging over 8192 random cipher states
the entire 39-bit search space and subsequently testing for
the sum property and without using (large) precomputation
tables. To do so:
(i) We generate all tables TOp and TEq , where p, q ∈
[0, 16], consisting of all possible odd and even LFSR
bits used by their corresponding partial sum function.
Precomputation is not necessary as computation com-
pletes within one second on an ordinary laptop.
(ii) We determine s = S(a[9,47]), the sum property of the
initial LFSR state by retrieving all 256 possible values
for the ﬁrst encrypted nonce byte nT[0,7] , and subse-
quently apply Lemma 5.5.
(iii) Once s has been determined, we take all possible
combinations for (p, q) ∈ [0, 16] × [0, 16] such that
s = p(16 − q) + (16 − p)q holds.
(iv) For each such a combination, we take all values x ∈ TOp
and combine them with all values y ∈ TEq . We deﬁne
z ∈ F39
2 , z := x0y0x1y1 . . . x18y18x19. By construction
S(z) = S(a[9,47]). Therefore, every z is a candidate
for 39 bits of the cipher’s internal state. Lemma 5.7
states the sum property is deﬁned by its partial sum
properties. Hence, a value z must exist such that z =
a[9,47].
In the resulting candidate list, each entry holds 39 bits
of LFSR state, whereas the length of this list is given by
the probability of the observed sum property times 239. On
average the list holds 236.72 entries, i.e. a drop of 2.28 bits
in complexity. In the next section, we describe how we can
eﬃciently determine the sum property at time 8.
5.4 Determining the sum property at time 8
As we have seen in the last section, by determining the sum
property of the cipher’s initial internal state, the exhaustive
search space can be signiﬁcantly reduced. We can apply the
same technique once more, only this time we determine the
sum property of the cipher’s internal state at time 8, i.e.
after the ﬁrst nonce byte is fed. As stated as a requirement
in Lemma 5.5, in order to determine the sum property at
time 8, we need to collect all possible values for the second
nonce byte nT[8,15] , while the ﬁrst byte nT[0,7] is constant.
We assume the encrypted nonce {nT } produced by the tag
is random and beyond our control. Hence, we require
256 · (
256
256
+
256
255
+
256
254
+ · · · +
256
1
) ≈ 401365.07
nonces on average. This analysis relates to the well-known
coupon collector problem [FGT92].
Our goal is to compute the probability of the sum property
having a certain value, given the sum property computed over
the sample obtained so far, hence P (S = K|T = k). We use
Bayes’ theorem [BP63] to obtain it.
P (S = K|T = k) =
P (T = k|S = K) P (S = K)
P (T = k)
To obtain P (T = k), we take P (T = k|S = i)P (S = i) for all
possibilities for i. The events are mutually exclusive.
P (S = K|T = k) =
P (T = k|S = K) P (S = K)
P256
i=0 P (T = k|S = i)P (S = i)
Deﬁnition of X
P (S = K|T = k) =
P (X = k) P (S = K)
i=0 P (X = k)P (S = i)
P256
Our strategy becomes to take every possible sum property
value for K and compute P (S = K|T = k). Our guess for
S(α8) will be the K that yields the highest probability.
From the result we see that, in order to compute the prob-
ability for a sum property value given a sample, we need to
know P (S = i) for every possible value of i from 0 until and
including 256. These probabilities are depicted in Figure 5.1.
5.5 Differential Analysis
From section 5.4 we have seen that we can determine S(α0)
and guess S(α8) for a given {nT[0,7] } by gathering only a
modest number of encrypted nonces. Additionally, once the
value for S(α8) is known, Section 5.3 has shown that we
can construct candidate lists containing 39 bits of LFSR
state, without the need of going through all 239 possible
states, computing the sum property, and testing whether
this results in the correct value. In this section, we show how
we can combine two or more sum properties and eliminate
a signiﬁcant amount of impossible key candidates prior to
constructing the ﬁnal candidate list.
Given that we guessed S(α8) for a given {nT[0,7] } with
near certain probability, it is very likely that we can also
guess this for other input bytes without requiring to collect
additional nonces, since we assume the encrypted nonces
generated by the card are random and beyond our control.
Input byte {nT[0,7] } is mapped to a[48,55] and therefore af-
fects S(α8). Hence, S(α8) typically diﬀers for each choice for
{nT[0,7] }. Below we deﬁne a notation for the sum property
at the moment the ﬁrst input byte was fed.
Deﬁnition 5.9. Given the LFSR-stream a0a1 . . . , the sum
property value of the cipher’s internal state after encrypted
input byte {b}, is fed is S{b}.
Here the S{b} is given by
Sǫ := S(a[9,47])
S{b} := S(a[17,55])
where {nT[0,7] } = {b}
Furthermore, the set of all possible internal state bits de-
termined by the sum property after input byte {b} is fed is
S{b}. S{b} is given by
Sǫ := {x | x ∈ F39
S{b} := {x | x ∈ F39
2 and S(x) = S{b}}
2 and S(x) = Sǫ}
Combining two sum properties Suppose we have deter-
mined Sǫ, and also S{b} with high probability, for a cer-
tain input byte {b}. Since every entry u ∈ Sǫ is a candi-
date for α9α10 . . . α47, and every v ∈ Sǫ is a candidate for
α17α18 . . . α55, every u must have a corresponding v such
that u8u9 . . . u38 = v0v1 . . . v30 and vice versa.
This property can be evaluated for the odd and even LFSR
state bits separately. This allows us to eliminate candidate
keys prior to building the entire candidate list.
Building a candidate list from Sǫ and S{b} is done as fol-
lows
(i) We take all pairs (p, q) ∈ [0, 16] × [0, 16] for which Sǫ =
p(16 − q) + (16 − p)q.
(ii) We do the same for time 8: for a certain encrypted in-
put byte {b}, for which we know S{b} with high proba-
bility, we determine all pairs (r, s) ∈ [0, 16] × [0, 16] for
which S{b} = r(16 − s) + (16 − r)s.
(iii) For each pair (p, q), we iterate through all pairs (r, s).
For each x ∈ TOp, we look up all entries y ∈ TOr such
that x4x5 . . . x19 = y0y1 . . . y15. If none exist, then x
is an impossible candidate for α9α11 . . . α47. Let zO ∈
F24
2 be a candidate for α9α11 . . . α55. It is constructed
by taking zO := x0x1x2x3y. The even case is similar:
for each x ∈ TEq , we look up all entries y ∈ TEs such
that x3x4 . . . x18 = y0y1 . . . y15. zE ∈ F23
2 is a candidate
for α10α12 . . . α54 and is constructed by taking zE :=
x0x1x2y.
(iv) We now deﬁne z ∈ F47
2 , which is a candidate for α[9,55].
It is constructed by combining every zO with every zE
and taking z := zO0 zE0 zO1zE1 . . . zO22 zE22 zO23 . Stage
3 of Section 5 describes how the resulting candidate
list is used to perform a key recovery.
Optionally, the size of the search space is determined
by, rather than actually constructing the candidate list,
multiplying the number of candidates zO by the num-
ber of candidates zE for each pair (p, q) and (r, s) and
summing them up.
We somewhat naively assume that Sǫ and S{b} are statis-
tically independent. In case we are concerned with a random
{b}, we gain a complexity drop of 2.28 bits on average, in
addition to the same drop described in Section 5.3. How-
ever, in practice, the drop is even greater since relatively few
nonces are required for determining a byte {b} for which S{b}
is an extreme value, i.e. 0 or 256 (yielding a drop of approx-
imately 5.15 bits). The same holds to a lesser extent for
values 32 and 224 (approximately 6.81 bits). Moreover, all
sum property values except 128 yield a greater complexity
drop than 2.28 since their corresponding probabilities are
below the average (Figure 5.1), hence so are the numbers of
corresponding possible cipher states.
The remainder of Section 5 is concerned only with extend-
ing step (iii) such that we eliminate additional zO and zE
candidates. The methodology of constructing a candidate
list presented here is ﬁnal.
Combining additional sum properties Everything pre-
sented in this paragraph aims to eliminate odd candidates
zO in step (iii) of the methodology described above, and
hence further drop the computational complexity. It is also
applicable to even candidates. However, to avoid repetition,
we will not concern ourselves with this.
Suppose, in addition to Sǫ and S{b}, we also determine
S{b′} with high probability, for encrypted input byte {b′},
where {b} 6= {b′}. We refer to a0a1 . . . and a′
1 . . . as the
0a′