### 1.1 Contributions

The primary conceptual contribution of this paper is the identification and emphasis on the threat of framing, particularly through cross-site attacks. Traditional computer-framing attacks typically require physical access to a device or remote control via malware. In contrast, we highlight the more insidious nature of cross-site framing attacks, which do not necessitate such access. These attacks are easier to execute and pose a higher risk due to their subtlety.

Additional contributions include:

- **Identification and Evaluation of Risks**: We identify and evaluate previously unexplored risks in popular web services, browsers, and operating systems. These include:
  - **Planting Search History**: Demonstrating that it is possible to plant search history in widely used and trusted sites (Section 3; see Table 1).
  - **Exploiting Browser Features**: Evaluating the automatic file download feature in Google Chrome and Safari for macOS, as well as other potentially risky browser features (Section 4).
  - **Manipulating File Systems**: Techniques to unlink framing files and cover traces of cross-site attacks both on the victim's computer and in the logs of web services (Section 6).
  - **Mitigation Techniques**: Discussing potential mitigation strategies and offering a design for effective defense (Section 7).

- **Forensic and Legal Impact**: Our work has led the Israel Police to update their forensic investigation procedures, underscoring the practical impact of our findings. We hope that legal authorities in other countries will also adopt and refine their forensic practices based on our research.

Demos of the attacks can be found in [15].

### 1.2 Related Work

Extensive research has been conducted on various types of attacks by malicious websites, including cross-site attacks that exploit vulnerabilities in popular websites [2, 28] and off-path attacks that leverage weaknesses in network protocols [16]. However, to the best of our knowledge, this is the first paper to specifically address the risk of cross-site framing attacks.

In our work, we demonstrate how forged cross-site requests can be used to manipulate popular websites. Xing et al. [28] employed similar techniques but focused on polluting user personalization algorithms in Google, Amazon, and YouTube.

### 2. Adversary Model & Roadmap

We consider an adversary who operates a malicious website without eavesdropping or man-in-the-middle (MitM) capabilities. We assume the adversary can entice the victim to visit the malicious site, which we justify below.

While the victim visits the attacker’s website, the browser runs scripts within typical sandbox mechanisms. These mechanisms allow scripts to display objects from arbitrary domains (e.g., images) and load other pages (embedded in frames using `<iframe>` or in separate windows/tabs). The malicious script, often referred to as a "puppet" [5], operates within these sandbox limitations.

Our roadmap for framing attacks includes:
- **Luring the Victim**: Methods to attract the victim to the attacker’s website, ranging from legitimate promotion techniques to phishing and social engineering.
- **Planting Evidence**: Techniques to plant incriminating evidence once the victim loads the adversary’s website.
- **Covering Traces**: Strategies to hide the attack from the victim and eliminate traces from both the victim’s computer and the logs of web services.

### 3. Framing Web-Services Evidence

Records from service providers such as banks, utility companies, and telecommunication providers are often considered reliable and admissible in court. With the increasing use of web services, their records are also increasingly viewed as legitimate evidence. However, these records should be used with caution.

We show that popular and widely-trusted web services may allow such records and evidence to be easily planted. See summary in Table 1. The vulnerabilities we present may not pose an obvious business risk to the providers, beyond the potential for creating fake evidence. This raises ethical, legal, and social dilemmas about the responsibility of web services to protect their records and prevent framing.

In our adversary model, an attacker can launch Cross-Site Request Forgery (CSRF) attacks [2] to perform framing operations in the name of the victim. We focus on simple, innocuous operations that do not appear suspicious and are not protected from CSRF attacks. These operations can be categorized into two categories: search history and relevant items history.

#### 3.1 Search History Evidence

Search engines and other websites save users' search history to provide personalized services. We found that by sending a cross-site search request, an attacker can add a record of this search to the logs kept by websites. This can include manipulating clicked search results or adding saved searches.

- **Search History**: All major search engines (Google, Yahoo!, Bing) and platforms like YouTube and Facebook save users' search queries, even if the queries are sent from other sites.
- **Followed-Links History**: Google and Bing maintain a history of links followed by the user from search results. We found vulnerabilities allowing the insertion of fake records into this history.
- **Saved Searches History**: Some web services, like Craigslist, allow users to save selected searches, which can be manipulated by attackers.

#### 3.2 Evidence of Relevant Items History

E-commerce and content websites save items of interest to users to personalize content and offer more relevant items. Attackers can manipulate these records to plant fake indications of the user's interests.

- **Clicked Videos, News, and Advertisements in Google**: Similar to followed-links framing, it is possible to take links to videos, news, or advertisements and send them from the attacker’s website.
- **Watched Video History in YouTube**: YouTube maintains a history of watched videos, which can be manipulated by sending HTTP GET requests from a rogue website.
- **Amazon Watched Items**: Amazon saves items viewed by the user, which can be manipulated by copying GET requests linking to specific items.
- **Watched Items in eBay**: eBay allows users to add products to the shopping cart and watch-list, which can be manipulated to indicate false interests.

### 4. Computer Framing

The framing attacks discussed in Section 3 exploit vulnerabilities in web services. Here, we present framing attacks that exploit browser features and vulnerabilities, rather than web-server vulnerabilities.

#### 4.1 Framing via Files in the Browser Cache

Forensic procedures often involve checking for incriminating files in the browser cache. Browsers automatically save received pages and objects, and any website can request arbitrary objects. The cache does not record the originating site, allowing attackers to cause the browser to load and cache incriminating content. While users can inspect and clean their cache, most rarely do so, making it easy for attackers to plant false evidence.

#### 4.2 Framing via File Download

Browsers allow users to save or download web objects, usually to a default directory. In at least two popular browsers, Google Chrome and Safari for macOS, files are downloaded automatically by default without explicit user consent. Once downloaded, the user must delete the file manually. Forensic software can often find such evidence even after deletion.

##### 4.2.1 Experiment: Automatic Download Framing

**Goal**: Determine how many users will successfully download automated files and how many will abort the download or remove the file.

**Methodology and Ethics**: To avoid biased reactions, we created a natural environment where users would use their personal computers for a typical purpose. We created a web page containing an online practice exam for students in a Data Structures course, and then tested their responses to an automated download attempt.