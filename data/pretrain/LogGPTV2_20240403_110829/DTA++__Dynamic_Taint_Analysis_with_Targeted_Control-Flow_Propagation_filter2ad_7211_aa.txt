title:DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation
author:Min Gyung Kang and
Stephen McCamant and
Pongsin Poosankam and
Dawn Song
DTA++: Dynamic Taint Analysis with
Targeted Control-Flow Propagation
Min Gyung Kang∗† Stephen McCamant† Pongsin Poosankam∗† Dawn Song†
†UC Berkeley
∗Carnegie Mellon University
{mgkang,ppoosank}@cmu.edu
{smcc,dawnsong}@cs.berkeley.edu
Abstract
Dynamic taint analysis (DTA) is a powerful technique
for, among other things, tracking the ﬂow of sensitive in-
formation. However, it is vulnerable to false negative er-
rors caused by implicit ﬂows, situations in which tainted
data values affect control ﬂow, which in turn affects other
data. We propose DTA++, an enhancement to dynamic
taint analysis that additionally propagates taint along a tar-
geted subset of control-ﬂow dependencies. Our technique
ﬁrst diagnoses implicit ﬂows within information-preserving
transformations, where they are most likely to cause under-
tainting. Then it generates rules to add additional taint
only for those control dependencies, avoiding the explosion
of tainting that can occur when propagating taint along
all control dependencies indiscriminately. We implement
DTA++ using the BitBlaze platform for binary analysis,
and apply it to off-the-shelf Windows/x86 applications. In
a case study of 8 applications such as Microsoft Word,
DTA++ efﬁciently locates just a few implicit ﬂows that
could otherwise lead to under-tainting, and resolves them
by propagating taint while introducing little over-tainting.
1. Introduction
Dynamic taint analysis (DTA for short) is a popular and
powerful technique for tracking information ﬂow in soft-
ware even without access to source code. DTA works by
marking certain inputs to a program as tainted, and then
propagating that taint to other values that are computed
transitively based on those tainted inputs. For instance, we
can check for information disclosure bugs in a desktop ap-
plication by marking sensitive inputs as tainted, and then
checking whether they propagate to inappropriate outputs
(called sinks) [8, 16, 37]. However, a signiﬁcant limitation
of standard approaches to DTA is that they do not propagate
taint along control dependencies (also called implicit ﬂows):
parts of a program where tainted data values affect control
ﬂow, and then the control ﬂow variation affects other data.
This can lead to under-tainting, a type of error in which
values that should be marked as tainted are not, and so for
instance could cause an analysis to fail to detect a leak of
sensitive information.
Our hypothesis is that under-tainting occurs at just a few
places within large benign applications, such as in the im-
plementation of some kinds of data transformations (our re-
sults in Section 6 are similar to those seen in some previous
studies [21]). To obtain correct tainting results, we would
like to ﬁx the under-tainting problems that occur at these
locations to propagate taint to the results of such a transfor-
mation. A common approach when operating at the source-
code level is to use static analysis to ﬁnd all possible control
dependencies, and to propagate taint along each one. How-
ever, this approach has two difﬁculties when applied at the
binary level [10, 29, 30]. First, it is difﬁcult to perform pre-
cise static analysis on binaries, because they lack many of
the structures that were present in source. Second, propa-
gating taint indiscriminately often leads to over-tainting, or
taint spread, the opposite problem from under-tainting that
occurs when too many values are tainted.
Thus there is a spectrum that ranges in the extremes from
no taint propagation for control dependencies (vanilla dy-
namic taint analysis) to universal taint propagation for con-
trol dependencies (based on static analysis). A useful mid-
dle ground is to perform targeted taint propagation for just
some control dependencies. Based on the observation that
under-tainting usually occurs at just a few locations, we pro-
pose to identify targets for additional propagation ahead of
time, in an approach we refer to as DTA++.
In particu-
lar, we concentrate on the common case of information-
preserving transformations in benign programs. Note that
we focus on enabling taint propagation for benign programs
only. Malicious programs in which an adversary might in-
tentionally design implicit ﬂows to frustrate analysis [7] are
out of scope. Information-preserving transformations, such
as the conversion of data from one format to another, oc-
cur in many contexts and it is important that they properly
propagate taint. Our approach has two phases: ﬁrst we gen-
erate DTA++ rules by diagnosing branches responsible for
under-tainting and determining the extra propagation they
require using ofﬂine analysis, and then we apply those rules
during future runs of dynamic taint analysis.
Key to our approach is diagnosing only those implicit
ﬂows that are likely to cause under-tainting. The intuition
behind our diagnosis technique is that if a transformation as
a whole is information-preserving, then it may redistribute
information between data ﬂow and control ﬂow, but it will
not destroy information. In some cases the code may move
partial information about a value into control ﬂow, but if
there is information remaining in a data value, the data will
still be tainted so no under-tainting will occur. The implicit
ﬂows that cause under-tainting are the rest: those that trans-
fer all of the information about the input into control ﬂow,
leaving the data untainted. We can also weaken the as-
sumption of complete information preservation by instead
looking for implicit ﬂows that transfer most of the infor-
mation about the input into control ﬂow. The intuition of
the “amount of information transferred to control ﬂow” can
be made precise as a kind of quantitative information ﬂow
measurement of the branches that have been taken during a
program’s execution.
Once we have detected such an implicit ﬂow, there are
several possible approaches for localizing it: for instance,
we could compute a small unsatisﬁable core of the branch
conditions [9] to ﬁnd a set of branches that were involved in
the implicit ﬂow. However we have found a simpler tech-
nique to work well in practice: we use a binary search to
ﬁnd a minimal preﬁx of the program trace that contains
the implicit ﬂow; then the last instruction in this preﬁx is
a branch that is necessary to the implicit ﬂow.
Once the diagnosis technique has identiﬁed a branch that
could be responsible for under-tainting, our system then
generates targeted propagation rules using an instruction-
level control-ﬂow graph. (This phase is similar to the prop-
agation that has been proposed in other binary-level tech-
niques (e.g., [10]), with the key difference that we perform it
more selectively.) Once we have generated a set of DTA++
rules, our system can apply them on any future dynamic
taint analysis runs with just a lightweight modiﬁcation to an
existing DTA tool.
In this paper we present our DTA++ technique, im-
plement it as an enhancement to an existing DTA tool,
and evaluate it in a realistic application to tracking sen-
sitive information. We implement DTA++ on top of Bit-
Blaze [6, 31].
In an extended case study, we show how
DTA++ obtains correct tainting results in large off-the-shelf
applications such as word processors. We also show vanilla
DTA often loses tainting because of implicit ﬂows. On
the other hand, simply propagating taint for every implicit
ﬂow leads to an enormous taint spread (orders of magnitude
more tainted bytes in our experiments).
In summary we make the following contributions in this
paper:
• First, we propose an efﬁcient and effective technique
that identiﬁes a minimum set of implicit ﬂows in the
program that potentially cause under-tainting. Given
an execution trace with taint information, our tech-
nique automatically diagnoses the under-tainting prob-
lem if it exists, and then generates targeted taint prop-
agation rules to resolve the under-tainting.
• Second, we implement our technique using the Bit-
Blaze binary analysis platform [31]. Our system uses
dynamic and static analysis approaches together to de-
tect under-tainting of a value in a program execution
trace, diagnose its cause, and generate propagation
rules, and then applies the rules in the course of dy-
namic taint analysis.
• Lastly, we evaluate our technique by applying it to
under-tainting problems that we have encountered in
common off-the-shelf word processors on Microsoft
Windows. The results of this case study show that our
technique accurately identiﬁes the implicit ﬂows in-
volved in under-tainting, and corrects the tainting with
few side effects. Our technique also introducing orders
of magnitude less taint than when propagating taint for
all implicit ﬂows as in previous systems such as DY-
TAN [10].
The rest of the paper is organized as follows. In Sec-
tion 2, we describe previous research efforts related to this
paper. We deﬁne the problem of under-tainting from im-
plicit ﬂows and describe our underlying assumptions in Sec-
tion 3. We give our approach in Section 4, and Section 5
provides implementation details. We present a case study
applying our technique in Section 6 and discuss several is-
sues related to our technique in Section 7. Section 8 con-
cludes this paper.
2. Related Work
Dynamic taint analysis is a popular means for analyzing
both benign and malicious software components. Several
different techniques have been proposed based on dynamic
taint tracking for detecting unknown vulnerabilities in soft-
ware [11, 12, 26, 34]. They taint potential input sources of
malicious data such as network packets; monitor how the
tainted input data propagate throughout program execution;
and raise an alarm when the taint contaminates sensitive
data like return addresses in the stack or user privilege con-
ﬁguration. The main ideas are also similar in analyzing ma-
licious software components leaking sensitive user informa-
tion on the system [15, 22, 25, 33, 36, 37]. There are also on-
going efforts to apply the dynamic taint analysis techniques
to track and conﬁne conﬁdential information in production
systems running inside a virtualized environment [16, 17].
However, taint analysis techniques have several chal-
lenges in achieving accurate analysis results. Schwartz et
al. [29] point out several fundamental challenges including
under-tainting and over-tainting. A major cause of under-
tainting is implicit ﬂows caused by control dependencies,
since vanilla dynamic taint analysis tracks only data depen-
dencies. Implicit ﬂows are especially problematic in appli-
cations that require analyzing information ﬂows within mal-
ware, because adversarial program authors could potentially
embed very complicated implicit ﬂows in their programs to
evade analysis. For instance Cavallaro et al. [7] describe
these and other challenges in using dynamic taint analysis
in a fully adversarial context.
In this paper we limit our
scope to applying DTA to benign applications, though note
that tracking information ﬂows through benign software is
valuable in detecting whether that information reaches ma-
licious software. A more pessimistic assessment of the ap-
plicability of DTA that includes propagation across memory
accesses (as we use in this work) is given by Slowinska and
Bos [30]. Our work tackles some of the same challenges
they identify, but we argue our results show the challenges
are not insurmountable.
The challenges we refer to as under-tainting and implicit
ﬂows from control dependencies have been studied since at
least the 1970s [14,18], but the lion’s share of previous work
has been performed on source code, and often requires de-
veloper effort such as annotations or refactoring during de-
velopment. It is much more difﬁcult to deal with such ﬂows
in pre-existing binary applications. An example of a recent
system that attempts this is Clause et al.’s DYTAN [10]. Our
approach is a reﬁnement of one like DYTAN that performs
a similar propagation, but it uses a more narrowly targeted
selection of branches for which to propagate taint (our diag-
nosis phase), in order to reduce over-tainting in the results.
In concurrent work, Bao et al. [5] propose what they
call “strict control dependence” to include some but not all
control dependencies in taint tracking and related analyses.
Their deﬁnition gives similar results as ours in many cases,
but is based on the syntax of a comparison expression. By
contrast we use a more general and precise semantic-level
condition, implemented using symbolic execution. Bao et
al.’s implementation uses a compiler transformation, so it
could not be applied to proprietary programs such as many
of those in our case study.
3. Problem Deﬁnition and Approach Overview
In this section we deﬁne in more detail the problem that
our DTA++ approach solves. We start by giving some
background about under-tainting in general, then give an
overview of our approach, and illustrate with examples.
3.1. Background and Motivation
First, we deﬁne the concept of under-tainting. Given a
(benign) program and a tainted (sensitive) input, we per-
form taint propagation to see what other values are tainted
(contain sensitive information).
In taint analysis, under-
tainting is a situation where a value is not tainted even
though it is affected by the tainted input. We intentionally
choose not to make the concept of “affected” completely
formal, since which kinds of input-output relations should
propagate taint often depends on the details of the analysis
intent. A general intuition is that if we compare two ex-
ecutions of a program in which the untainted inputs were
the same and the tainted inputs were different, intermedi-
ate values and outputs that also differ between the runs are
candidates for tainting. However in many applications we
do not wish to treat all such differing values as tainted, if
the causal relationship between the input and the differing
value is too indirect or attenuated.
The under-tainting problems that we want to solve are
those caused by implicit ﬂows. We deﬁne an implicit ﬂow to
be a program structure in which tainted data affects control
ﬂow, so that the control ﬂow difference might in turn affect
other data.
(Schwartz et al. [29] refer to this as control-
ﬂow taint.) A more general concept of implicit ﬂows would
also include structures in which tainted data affects an ar-
ray index or pointer: for instance, a table lookup when the
table index is tainted. Such examples could also naturally
be addressed by the technique of this paper, but existing
DTA systems already implement a special case for such ta-
ble lookups which gives the same results, so we have not
needed to do so. We call those implicit ﬂows that cause
under-tainting culprit implicit ﬂows, and the corresponding
branch instructions culprit branches.
To ﬁnd culprit implicit ﬂows, we focus on implicit ﬂows
in (nearly) information-preserving transformations.
(We
say that a transformation is information-preserving if it im-
plements an injective function: every legal input value pro-
duces a distinct output value.) These occur when all or
nearly all of the information present in a particular input
value affects the program’s control ﬂow, so that no data-
only taint propagation would occur. Another way of stating
this condition is that only a single input value, or only a
few, would cause the program to take the same execution
path that occurred on an observed run.
3.2. DTA++ Approach Overview
To address the aforementioned problem, we propose
DTA++, an enhancement to vanilla dynamic taint analy-
sis (DTA) that propagates additional taint along targeted
control dependencies in order to ameliorate under-tainting
caused by implicit ﬂows. Given a (benign) program, our
goal is to identify data transformations containing culprit
implicit ﬂows at which taint should be propagated to avoid
under-tainting. For efﬁciency, DTA++ operates in two
stages. First, an ofﬂine analysis phase, based on test exe-
cutions, detects and diagnoses any under-tainting that may
be present, and generates DTA++ rules specifying how to
propagate taint to eliminate the under-tainting. Second, the
online taint propagation phase applies the DTA++ rules dur-
ing any future use of dynamic taint analysis on the same
program, to perform targeted propagation to prevent under-
tainting. A graphical overview of this structure is shown in
Figure 4.
Ofﬂine analysis. The input for the ofﬂine analysis phase
is one or more execution traces from a program that have
been generated using vanilla dynamic taint propagation. A
trace may contain under-tainting: that is, there may be a
portion of the program input and a corresponding part of
the program output such that the input region is tainted,
and the output region is derived from the input region via
an information-preserving transformation, but the output re-
gion in untainted. As output, the analysis phase produces a
set of DTA++ rules: speciﬁcations of additional taint prop-
agations needed to prevent the under-tainting. Each DTA++
rule gives a culprit branch in the program and a list of in-
structions control-dependent on that branch, such that if the
condition at the branch is tainted, the values written by each
control-dependent instruction should also be tainted.
The ofﬂine analysis is based on test executions which
each demonstrate under-tainting of the values derived from
some part of program input. Generating such test cases is
outside the scope of this paper; we discuss this point further
in Section 7.
Online Taint Propagation Using DTA++ rules. Using
the propagation rules generated by the ofﬂine analysis
phase, we can then perform future runs of dynamic taint
analysis with simple modiﬁcations to apply additional taint
according to the DTA++ rules. Since the speciﬁcation of the
DTA++ rules is general, and programs tend to have only a
few instances of culprit implicit ﬂows, ofﬂine analysis per-
formed on a few test executions of a program will generally
sufﬁce to determine how to propagate taint for any future
executions.
For this paper, we focus on implicit ﬂows in transforma-
tions that are completely information-preserving; thus, our