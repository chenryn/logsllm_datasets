title:TextExerciser: Feedback-driven Text Input Exercising for Android Applications
author:Yuyu He and
Lei Zhang and
Zhemin Yang and
Yinzhi Cao and
Keke Lian and
Shuai Li and
Wei Yang and
Zhibo Zhang and
Min Yang and
Yuan Zhang and
Haixin Duan
2020 IEEE Symposium on Security and Privacy
TextExerciser: Feedback-driven Text Input
Yuyu He,1, Lei Zhang,1, Zhemin Yang1, Yinzhi Cao2, Keke Lian1, Shuai Li1, Wei Yang3, Zhibo Zhang1
Exercising for Android Applications
Min Yang1, Yuan Zhang1, Haixin Duan4
1: Fudan University, 2: Johns Hopkins University, 3: University of Texas at Dalla, 4: Tsinghua University
1: {heyy16, lei zhang14, yangzhemin, kklian18, lis19, zbzhang15, m yang, yuanxzhang}@fudan.edu.cn
2: PI:EMAIL, 3: PI:EMAIL, 4: PI:EMAIL
: The ﬁrst two authors have contributed equally to this work.
Abstract—Dynamic analysis of Android apps is often used
together with an exerciser to increase its code coverage. One big
obstacle in designing such Android app exercisers comes from
the existence of text-based inputs, which are often constrained
by the nature of the input ﬁeld, such as the length and character
restrictions.
In this paper, we propose TextExerciser, an iterative,
feedback-driven text input exerciser, which generates text inputs
for Android apps. Our key insight is that Android apps often
provide feedback, called hints, for malformed inputs so that our
system can utilize such hints to improve the input generation.
We implemented a prototype of TextExerciser and eval-
uated it by comparing TextExerciser with state-of-the-art
exercisers, such as The Monkey and DroidBot. Our evaluation
shows that TextExerciser can achieve signiﬁcantly higher
code coverage and trigger more sensitive behaviors than these
tools. We also combine TextExerciser with dynamic analysis
tools and show they are able to detect more privacy leaks and vul-
nerabilities with TextExerciser than with existing exercisers.
Particularly, existing tools, under the help of TextExerciser,
ﬁnd several new vulnerabilities, such as one user credential leak
in a popular social app with more than 10,000,000 downloads.
Index Terms—Dynamic Analysis, Android Security, Text Input
Generation, Android Application Testing
I. INTRODUCTION
Dynamic analysis is widely used in the past to analyze An-
droid apps for vulnerabilities [1]–[3], malicious behaviors [4]–
[8], and privacy leaks [9]–[13]. One important component,
often used together with dynamic analysis, is an application or
UI exerciser that drives Android apps to reach different code
branches so that the analysis can be performed completely with
a high code coverage. Examples of such exercisers are like the
most famous fuzzing tool, The Monkey [14], which randomly
generates UI events for Android apps. Some other works [5],
[9], [10], [15]–[17] also follow up on The Monkey (Monkey
for short) to exercise apps more thoroughly with even higher
code coverage.
Although these exercisers can successfully drive Android
apps, one critical obstacle is that many apps require text-based
inputs with super-linear possibilities that existing exercisers
cannot enumerate in a reasonable amount of time. Further-
more, these inputs often require a non-trivial constraint that is
hard to be satisﬁed during analysis. For example, a personal
proﬁle description ﬁeld of an Android app may require texts
that range between 8 and 1,600 characters and do not contain
any special characters. Such constraints for text-based inputs
are very popular in Android apps: Our manual inspection
shows that text inputs in 150 out of top 200 free non-game
Android apps have at least one constraint.
Due to the difﬁculties of generating text inputs in exercising
Android apps, some researchers propose to adopt either a
heuristic approach or predeﬁned information. For example,
AppsPlayground [18] and Arnatovich et al. [19] summarize
all the input patterns for a speciﬁc ﬁeld, such as username
and password. Liu et al. [20] rely on machine learning to
automatically learn the input patterns. Several other tools [2]
use predeﬁned third-party login such as Facebook login and
Google sign-in to circumvent text input UI such as login
page. However, these input patterns are diversiﬁed: 130 out
of our previously-studied 200 apps have a unique way to
constrain text inputs, which either do not support third-party
login or require unique input constraints that are different
from general heuristics rules. Furthermore, these text ﬁelds
are often correlated, e.g., the value of a “maximum wage”
ﬁeld should be larger than the one of a “minimum wage”.
Therefore, existing works, such as rule or learning-based
summarization of text input patterns, often fail to satisfy these
unique constraints—but a single failure will stop the entire
exercising of the target app.
In this paper, we propose TextExerciser, an iterative,
feedback-driven text input exerciser, which generates inputs
for text ﬁelds of Android apps. The key insight here is that
if a text input does not satisfy the enforced constraints, the
Android app—either the client-side program or the server-
side validation—will provide clues or hints for the malformed
input, which can be used as a feedback for improvement. Let
us look at a concrete example: Say we input a password with
ﬁve letters into an Android app with a text ﬁeld that requires a
length of at least six characters. The Android app will prompt
a hint saying that “the password must be at least 6 characters”
so that the user knows how to proceed—and at the same time,
such a hint can be used to reﬁne our text input generation.
Speciﬁcally, here is how TextExerciser works itera-
tively to generate text inputs. TextExerciser ﬁrst extracts
all the hints related to malformed text inputs based on in-
formation that appears after the inputs are fed to the app.
Then, TextExerciser adopts natural language processing
to parse the extracted hints into a syntax tree and understand
the semantics. Next, TextExerciser generates constraints
© 2020, Yuyu He. Under license to IEEE.
DOI 10.1109/SP40000.2020.00071
1071
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
II. A MOTIVATING EXAMPLE
In this section, we use a real-world example to motivate
the use of TextExerciser to exercise Android apps. The
example, called Yippi as shown in Figure 1, is a message
app with 100,000+ downloads, which, under the developers’
descriptions, allows user communications with a focus on
entertainment and “security”.
The Yippi app has an vulnerability of user-credential leak-
age that requires heavy text-based exercising. We responsibly
reported this vulnerability to the app developer—but have not
received any feedback yet. Here are the details. Once an user
launch the app for the ﬁrst time, Yippi will ask for the user to
sign up for a new account and then log in with the account.
Therefore text inputs are needed to sign-up a new user account
and log into the app. After login, at the “change password”
page, another text inputs are needed to trigger the password
transfer so that existing dynamic analysis tools can ﬁnd that
Yippi is insecure as it transfers changed passwords in the
HTTP protocol. Note that all other password transfers in Yippi
are done securely via an HTTPS channel.
input requirements:
It is challenging to generate inputs for Yippi, due to several
need to be unique when comparing with others in the
app’s database. That is, if one chooses a used username
in the database, Yippi will return a warning, saying that
“Username already in use, please try other”.
● Username Uniqueness. The inputs to the “username” ﬁeld
● Length Requirement. The inputs to the “password” ﬁeld
● Joint-ﬁeld Dependencies. The inputs to the “conﬁrm
● SMS Authentication. After the initial sign-up page, Yippi
need to satisfy certain conditions, i.e., with a length of
at least 6 characters: Yippi will also display a hint if the
condition is not satisﬁed.
password” need to match the one to the “password” ﬁeld—
leading to a joint-ﬁeld constraint. Yippi will also alert the
users if these two ﬁelds do no match.
asks for a validation code sent via SMS.
We studied existing exercising tools such as Monkey and
found that none of them can exercise Yippi and trigger the
vulnerability. Monkey will stop at the sign-up page, failing to
exercise the app beyond the login wall. Prior exercisers [2],
[21], [22], [25], [26] that rely on pre-deﬁned inputs or third-
party logins cannot generate valid inputs for Yippi, because
the constraints are complex and Yippi does not support any
third-party logins. For example, many of these pre-deﬁned
usernames in prior works are used before by others in Yippi’s
database and the pre-deﬁned passwords may also fail to satisfy
the speciﬁc requirement.
III. METHODOLOGY
In this section, we introduce the methodology of exercising
text inputs for Android apps. We start from introducing the
workﬂow of TextExerciser and then present each phase
of TextExerciser individually.
Figure 1. A Motivating Example of TextExerciser (The Yippi app
contains a vulnerability that transfers password in an HTTP protocol, which
can be sniffed by a man-in-the-middle, only on the “Change Password”
interface. A dynamic analyzer requires many text-based inputs in order to
reach the vulnerable location and ﬁnd the vulnerability.)
according to hint semantics and outputs a possible input using
a constraint solver. Lastly, TextExerciser feeds the input
back to the target app—if the input still cannot satisfy the
constraints, TextExerciser will iterate the process until a
valid input is found.
results
We evaluate TextExerciser on 6,000 popular apps
collected from Google Play. The
show that
TextExerciser achieves higher code coverage than state-
of-the-art approaches like Monkey [14], Stoat [21] and Droid-
Bot [22]. We also combine TextExerciser with dynamic
analysis tools, such as TaintDroid [11] and ReCon [23]. Our
evaluation results show that
tools with TextExerciser
can ﬁnd more privacy leaks and vulnerabilities, such as a
previously-unknown user credential leakage vulnerability in
a popular social app, called Coco, with more than 10,000,000
downloads on Google Play. We have responsibly reported all
the vulnerabilities to app developers—the developers of Coco
have ﬁxed the vulnerability internally and will release a new
version shortly.
Contributions. The main contributions of our work are sum-
marized as follows:
iteratively generates text inputs using a constraint solver
based on hints from the target app.
● We propose the ﬁrst feedback-driven input exerciser that
● We implement a prototype of our text input exerciser
● We evaluate the performance of TextExerciser on
and the source code of TextExerciser is available at
GitHub [24].
popular Google Play apps. The evaluation result shows that
TextExerciser achieves higher code coverage than
state-of-the-art tools and also ﬁnds more privacy leaks
and vulnerabilities when combined with existing dynamic
analysis tools.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1072
!"#!"#http://passwordLoginSignUpClickClickInputInputInputInputClickInputFigure 2. The overall architecture of TextExerciser. There are three phases to exercise an app: hint extraction (Phase 1), hint parsing (Phase 2), and
input generation (Phase 3). If a generated input fails, TextExerciser will repeat these three phases based on newly collected feedback until a valid input
is generated.
A. System Workﬂow
TextExerciser is a feedback-driven text exerciser that
understands hints shown on user interfaces of Android apps
and then extracts corresponding constraints. The high-level
idea of understanding these hints is based on an observation
that these hints with similar semantics often have a similar
syntax structure—and therefore TextExerciser can cluster
these hints based on their syntax structures and then extract the
constraints from the syntax structure. Now, let us give some
details of TextExerciser’s workﬂow.
The exercising has three phases, seven steps as shown in
Figure 2. First, TextExerciser extracts all the texts in the
app’s UI (Step 1) and then identiﬁes static hints via a learning-
based method and dynamic hints via a structure-based dif-
ferential analysis (Step 2). Second, TextExerciser parses
all the extracted hints via three steps: classifying hints into
different categories (Step 3), generating syntax trees for each
hint (Step 4), and interpreting the generated tree into a con-
straint representation form (Step 5). Lastly, TextExerciser
generates a concrete input by feeding constraints into a solver
(Step 6), e.g., Z3. Then, TextExerciser solves the prob-
lem, feeds generated inputs back to the target Android app and
extracts feedbacks, such as success and another hint (Step 7).
In the case of another hint, TextExerciser will iterate the
entire procedure until TextExerciser ﬁnds a valid input.
Now let us look at our motivating example in §II again to
explain TextExerciser’s workﬂow. We start from the sign-
up page, which has three text input ﬁelds, i.e., “username”,
“password” and “conﬁrm password”. TextExerciser gen-
erates a random input to the username ﬁeld: If the username
is used in the database, Yippi returns a “username used” hint.
TextExerciser will then parse the hint and generate a
new username. The “password” and “conﬁrm password” are
handled together by TextExerciser: based on the hint that
“Both password has to be the same”1, TextExerciser will
convert the hint into a constraint that the value of both ﬁelds
need to be the same and then generate corresponding inputs.
After TextExerciser generates inputs for the ﬁrst sign-
up page, Yippi asks the user to input a code that is sent to a
phone number. TextExerciser will ﬁrst extract hints re-
lated to the phone number page, understand that this is a phone
number, and then input a pre-registered phone number to the
ﬁeld. Next, TextExerciser will automatically extract the
code from the SMS and solve the constraints by inputting the
code to Yippi.
In order to ﬁnd the aforementioned vulnerability in §II,
TextExerciser also generates text inputs to the “Change
Password” page. Particularly, TextExerciser extracts the
password matching hint and another hint that distinguishes
old and new passwords, converts them into constraints and
then generates corresponding inputs so that existing dynamic
analysis tools can ﬁnd the vulnerability.
B. Hint Extraction
The ﬁrst phase of TextExerciser is to extract hints
related to text inputs from an Android app. There are two
types of available hints in Android apps, i.e., dynamic and
static. A dynamic hint appears once a user inputs an incorrect
text into the Android app, e.g., the app may alert the user
that a speciﬁc username has been registered by others. As a
comparison, a static hint appears together with the text input
1The sentence with a grammar error is from the Yippi app.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1073
(cid:256)(cid:51)(cid:68)(cid:86)(cid:86)(cid:90)(cid:82)(cid:85)(cid:71)(cid:3)(cid:86)(cid:75)(cid:82)(cid:88)(cid:79)(cid:71)(cid:3)(cid:75)(cid:68)(cid:89)(cid:72)(cid:3)(cid:80)(cid:82)(cid:85)(cid:72)(cid:3)(cid:87)(cid:75)(cid:68)(cid:81)(cid:3)(cid:23)(cid:3)(cid:70)(cid:75)(cid:68)(cid:85)(cid:68)(cid:70)(cid:87)(cid:72)(cid:85)(cid:86)(cid:257)(cid:256)(cid:38)(cid:85)(cid:72)(cid:68)(cid:87)(cid:72)(cid:3)(cid:68)(cid:3)(cid:83)(cid:68)(cid:86)(cid:86)(cid:90)(cid:82)(cid:85)(cid:71)(cid:3)(cid:73)(cid:82)(cid:85)(cid:257)(cid:256)(cid:53)(cid:72)(cid:87)(cid:92)(cid:83)(cid:72)(cid:3)(cid:51)(cid:68)(cid:86)(cid:86)(cid:90)(cid:82)(cid:85)(cid:71)(cid:257)(cid:258)(cid:3)(cid:258)Step 2 : Identify hints ...Category 1(cid:47)(cid:72)(cid:81)(cid:74)(cid:87)(cid:75)(cid:66)(cid:70)(cid:82)(cid:81)(cid:86)(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:87)(cid:11)(cid:38)(cid:39)(cid:15)(cid:44)(cid:49)(cid:41)(cid:12)(cid:9)(cid:9)(cid:70)(cid:82)(cid:81)(cid:87)(cid:68)(cid:76)(cid:81)(cid:66)(cid:70)(cid:82)(cid:81)(cid:86)(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:87)(cid:11)(cid:49)(cid:49)(cid:12)(cid:40)(cid:84)(cid:88)(cid:76)(cid:89)(cid:68)(cid:79)(cid:72)(cid:81)(cid:70)(cid:72)(cid:66)(cid:70)(cid:82)(cid:81)(cid:86)(cid:87)(cid:85)(cid:68)(cid:76)(cid:81)(cid:87)(cid:11)(cid:49)(cid:49)(cid:12)Rule 1Rule 2...Hint Parser(cid:76)(cid:81)(cid:83)(cid:88)(cid:87)(cid:20)(cid:29)(cid:3)(cid:68)(cid:69)(cid:70)(cid:20)(cid:21)(cid:22)(cid:76)(cid:81)(cid:83)(cid:88)(cid:87)(cid:21)(cid:29)(cid:3)(cid:68)(cid:69)(cid:70)(cid:20)(cid:21)(cid:22)APPsStep 1 : Extract all text on UI(cid:256)(cid:51)(cid:68)(cid:86)(cid:86)(cid:90)(cid:82)(cid:85)(cid:71)(cid:3)(cid:86)(cid:75)(cid:82)(cid:88)(cid:79)(cid:71)(cid:3)(cid:75)(cid:68)(cid:89)(cid:72)(cid:3)(cid:80)(cid:82)(cid:85)(cid:72)(cid:3)(cid:87)(cid:75)(cid:68)(cid:81)(cid:3)(cid:23)(cid:3)(cid:70)(cid:75)(cid:68)(cid:85)(cid:68)(cid:70)(cid:87)(cid:72)(cid:85)(cid:86)(cid:257)(cid:256)(cid:53)(cid:72)(cid:87)(cid:92)(cid:83)(cid:72)(cid:3)(cid:51)(cid:68)(cid:86)(cid:86)(cid:90)(cid:82)(cid:85)(cid:71)(cid:257)Category 2Step 3: classify hints into different categoriesStep 4: generatesyntax treesStep 5: convertto constraint representation...ML ModelDifferential Analysis on UI StructuralUI ExplorationInput Generation EngineHint ExtractorStep 6: solve  constraintsConstraint MappingConstraint SolvingStep 7:  generateinputsInput Events Phase 1Phase 2Phase 3ﬁeld, e.g., the app may state that a password should contain a
special character.
TextExerciser extracts dynamic hints via a differential
analysis that compares widgets before and after inputting a text
into the app. Information that appears in the widget after text
input is considered as a hint. An example is shown in Figure
3.(a): After the user inputs a short description into her proﬁle,
a hint appears and alerts the user that the description should
be at least 20 characters long. Such differential information
could also appear in the form of a popup window, such as
examples shown in Figure 3.(b).
TextExerciser then extracts static hints via a learning-
based approach. Speciﬁcally, we train a neural network model
for classiﬁcation. The positive training samples come from
dynamic hints extracted from these Android apps via differ-
ential analysis as a training set; the negative samples come
from information extracted from app windows without any text
input, i.e., those that presumably are not hints to text inputs.
Next, TextExerciser needs to map extracted hints to
corresponding input ﬁelds. TextExerciser adopts two
methods in the mapping. First, TextExerciser maps key-
words extracted from a hint to the text related to the input
ﬁeld. For example, if both the hint and the input ﬁeld mention
“password” as shown in Figure 4.(a), TextExerciser
considers an input generated following this hint is for the
corresponding input ﬁeld. Second, TextExerciser adopts
a shortest-distance method to ﬁnd the closest input ﬁeld. Note
that the distance deﬁnition as illustrated in Figure 4.(b) is
the relative location of widgets instead of Euclidean distance
because the widget size depends on the nature of the input.
Note that multiple hints may be mapped to a single input ﬁeld,
because an input ﬁeld may have more than one requirement.
Figure 3. Example for hint extraction
C. Hint Parsing
In this phase, TextExerciser classiﬁes extracted hints,
parses them into syntax trees, and then generates constraints
in a representation acceptable by solvers.
1) Hint Classiﬁcation: TextExerciser classiﬁes the
extracted hints into pre-deﬁned categories using a multi-class
model. Now, we ﬁrst describe how to pre-deﬁne hint categories
and then present the classiﬁcation procedure. We categorize
hints based on their semantics, i.e., how they enforce restric-
tions on text inputs, by manually surveying top 1,200 free non-
game apps from Google Play. The pre-deﬁned categories have
Figure 4. Hints to Input Field Mapping.
Figure 5. Example of Syntax Tree.
4 major, 10 minor and 18 sub-minor as shown in Table I—we
now describe these major hint categories below.
precisely describes the requirement, such as the length of
a text input.
● Precise Single-ﬁeld. This category refers to that a hint
● Fuzzy Single-ﬁeld. This category refers to that a hint
● Precise Joint-ﬁelds. A hint in this category indicates
● Fuzzy Joint-ﬁelds. A hint in this category indicates a
that two input ﬁelds are correlated, e.g., the value of the
maximum salary ﬁeld should be larger than the value of
the minimum.
vaguely describes the requirement, e.g., the length is too
small or the input contains invalid characters.
vague correlation between two ﬁelds, e.g., the length of a
phone number depends on another country ﬁeld.
Each major category has several minor categories based on
the constraint type, such as length and value, which can be
further divided into sub-minors. We manually label all, i.e.,
1,548 of, the hints from these apps with all the sub-minor
categories and then train a multi-class classiﬁer using both
CNN and RNN [27]. TextExerciser adopts this classiﬁer
to determine the categories of a given hint extracted from
Android apps.
2) Syntax Tree Generation: In this step, TextExerciser
pre-processes the extracted hints and then generates a syntax
tree using the Stanford parser [28]. The pre-processing has
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:20 UTC from IEEE Xplore.  Restrictions apply. 
1074
Before Entering Input After Entering Input Alert Notification Toast Notification(a) Differential Widget Example(b) Popup Notification ExamplePasswordPassword must be 8 to 12 charactersInput box 2Input box 7Input box 4Input box 5Label textInput box 1Input box 3Input box 8Input box 6(a)Subject Identity and Hint text(b)Distance Calculation Between Hint Text and Input FieldROOTSNPVPNNpasswordVBZNPQPNNINJJSCDatleast6digitisROOTSNPVPNNusernameVBZNPQPNNINJJSCDatleast3characteris(a)Syntax Tree A(b)Syntax Tree  BHINT CATEGORIES SUMMARIZED FROM TOP FREE GOOGLE PLAY APPS. WE MANUALLY TEST ALL THE TEXT FIELDS THAT A HUMAN CAN FIND AND
THEN EXTRACT CORRESPONDING HINTS. NOTE THAT, ”#A”: THE NUMBER OF HINTS IN THIS CATEGORY, AND ”#U”: THE NUMBER OF UNIQUE HINTS IN
Table I
THIS CATEGORY.
MajorCategory MinorCategory
Length
Constraints
Existence
Constraints
Value
Constraints
Length
Constraints
Value
Constraints
Non-directional
Constraints
Equivalence
Constraints
Non-repetitive
Constraints
Value
Restriction
Non-directional
Constraints
Precise
Single-ﬁeld
Fuzzy
Single-ﬁeld
Precise
Joint-ﬁelds
Fuzzy
Joint-ﬁelds
SubMinorCategory
The lower bound of input length
The upper bound of input length
A range of input length
A ﬁxed input length
Input should contain
certain characters
Input should not contain
certain characters
The lower bound of value
The upper bound of value
A range of value
Require longer input
Require shorter input
Require larger value
Require smaller value
Non-directional Constraints
on invalid input
The equivalence of two input ﬁelds