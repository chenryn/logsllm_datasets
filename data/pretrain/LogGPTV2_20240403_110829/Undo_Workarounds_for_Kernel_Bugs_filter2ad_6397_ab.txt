existing error handling blocks to discover undo statements for
each state-mutating statement. Using such knowledge, Heca-
ton can then automatically generate the required bowknot for
different functions. Figure 2 shows the high-level idea behind
bowknots and Hecaton.
3.3 Workﬂow
Assume that the OS analyst has identiﬁed a bug in the ker-
nel and would like to apply a bowknot to it. They take the
following steps to achieve this.
In the ﬁrst step, they need to identify the functions in the
execution path from the beginning of the syscall until where
the bug is triggered, i.e., the call stack. The call stack must
include the inline functions since it will be used by Heca-
ton, which operates at the source code level. Bugs found by
Syzkaller, such as the reported bugs in the Syzbot system [12],
come with enhanced call traces, including all the inline func-
tions and their location in the source code. For other bugs, the
analyst can use any tool to ﬁnd the stack. However, ﬁnding
the inline functions in the stack might not be trivial. To make
this step easy for the analyst, we provide support in Hecaton.
That is, Hecaton instruments all the functions in the kernel
component under study with some logging messages. The
analyst then executes the Proof-of-Concept (PoC) program of
the bug, checks the kernel logs, and extracts the list of func-
tions executed in the syscall. They then feed this list back into
Hecaton, which uses it to generate a copy of the kernel where
only these functions are instrumented with bowknots. Heca-
ton provides a conﬁdence score for each bowknot. If all the
conﬁdence scores for the instrumented functions are higher
than a predeﬁned threshold, the analyst goes to the next step
to test the instrumented kernel. Otherwise, they can decide
to investigate the bowknots with low conﬁdence score and
manually correct them, or altogether drop working on these
bowknots if they are unwilling to spend time and manual
effort to ﬁx the bowknots.
The analyst then tests the instrumented kernel using the
PoC and test programs. The purpose of test programs is to
demonstrate proper functionality of the system after undo by
bowknots. More speciﬁcally, the analyst ﬁrst runs the PoC to
verify that it does not succeed, e.g., it does not crash the kernel.
They then run the tests to verify that the kernel component
under test is still functional. If either fails, the analyst checks
the generated bowknots. The analyst spends a few hours (e.g.,
up to 2 hours in our evaluation) to identify the problem, e.g., a
missing undo statement. In fact, some of the bowknots might
Figure 2: High-level idea behind bowknots and Hecaton.
small changes to the kernel, otherwise it will not be accepted
by vendors for release in the window of vulnerability.
3.2 Key Idea & Design
Bowknots.
In this paper, we introduce a workaround for
kernel bugs called Bug undO Workaround for KerNel sOlid-
iTy (bowknot). The key idea behind a bowknot is to undo the
effects of the in-ﬂight syscall that triggers a bug. That is, if
a syscall is issued and triggers a bug, the bowknot generated
for that bug undoes the syscall and returns, effectively neu-
tralizing the syscall. It is important to note that a bowknot
does not disallow a syscall, e.g., disallow all ioctl syscalls. It
allows the syscall to be used as long as it does not trigger the
bug. Only when an invocation of the syscall results in the bug
getting triggered (e.g., due to using unexpected inputs), the
bowknot kicks in to undo it so that the system can continue
its execution and serve other well-structured syscalls.
Bowknots protect the kernel from corruption, which is criti-
cal for continued use of the system. They, however, can impact
the program issuing the syscall. For example, they might re-
sult in the program breaking or terminating with an error
message. We believe this is acceptable for three reasons. First,
we do not anticipate most kernel bugs to be triggered by well-
behaved applications. Many kernel bugs are only triggered
when a meticulously-crafted syscall is issued, typically by
malware. Second, applications can be restarted, if corrupted.
Finally, kernel bugs that unconditionally break the usability of
well-behaved applications are rare. This is because the kernel
is tested for basic functionality by kernel developers.
Hecaton. Bowknots, as described so far, satisfy all but one of
the aforementioned properties. More speciﬁcally, generating
them manually requires noticeable engineering effort as one
needs to study the execution path that triggers the bug and
ﬁgure out how to undo the syscall. Therefore, to satisfy this
last property, we introduce Hecaton, a static analysis tool that
generates bowknots and inserts them into the kernel automati-
cally. To do so, Hecaton leverages existing undo statements
found within error handling blocks in the kernel to generate
the right undo blocks for the functions in the execution path of
the bug. Existing error handling blocks in the kernel undo the
2384    30th USENIX Security Symposium
USENIX Association
kernelprogramCleanup tableBowknot (undo syscalls)Hecaton (static analysistool)OfflineRuntimeBugOperating systemuser spacesyscallshave explicit warnings from Hecaton (§5.2), which makes the
manual step more straightforward. After a ﬁx, they run the
tests again. If the analyst does not ﬁnd a ﬁx in this period (e.g.,
the two hours), they declare the use of bowknots ineffective.
It is noteworthy that the analyst does not even need a fully
functional PoC to test the bowknots. A program that results
in the execution of the same functions but does not even
trigger the bug sufﬁces. We have indeed used this in our own
evaluations. We tested a reported PoC that reached the bug
but did not trigger it. Yet, by adding an explicit crash just
before the bug site, we emulated the behavior and tested the
undo behavior by the bowknot.
Finally, we note some bugs might be triggered through
more than one call stacks. While such bugs are not common,
to mitigate them, the analyst needs to generate bowknots for
each call stack separately.
4 Bowknots
Bowknots are workarounds for kernel bugs. The key idea
behind bowknots is to undo the side effects of the syscall
that triggers the bug. More speciﬁcally, bowknots undo the
side effects of state-mutating statements from the syscall’s
kernel entry point until where the bug is triggered. We deﬁne
a state-mutating statement as one that alters the state of the
kernel or an underlying I/O device.
For example, imagine a camera device driver ioctl
syscall, which when called, allocates a memory buffer using
kmalloc(), acquires a spin lock (spin_lock()), and turns
on the ﬂash for the camera (using the hypothetical function
turn_on_flash()). Now imagine there exists a bug after this
where a pointer might be null depending on the syscall input.
To mitigate this bug, the analyst can apply a bowknot. It ﬁrst
turns off the camera ﬂash (by calling turn_off_flash()),
unlocks the spin lock (by calling spin_unlock()), and frees
the allocated memory buffer (by calling kfree()). As can
be seen, the state of the system (including the kernel mem-
ory state as well as the I/O hardware state, e.g., the camera
hardware state) after undo is the same as the state before is-
suing the syscall. Therefore, the system can now resume its
execution as if the syscall did not happen.
Our strategy for undoing a syscall is to leverage existing
undo statements in error handling code in the kernel to gener-
ate the proper undo code that undoes the effects of all state-
mutating statements in the syscall. Existing error handling
code in the kernel undoes the effect of these statements when
facing an expected error. The insight behind this approach is
that OS kernels have to be robust and handle various corner
cases or errors. Therefore, we attempt to reuse the existing
undo statements to generate the right undo code for a bug
location. In this section, we show how a bowknot can be used
for a bug. In the next section, we discuss how Hecaton helps
to automatically generate the undo code for bowknots.
4.1 Function Instrumentation
The goal of function instrumentation for a bowknot is to
undo the executed statements in a function when a bug
is triggered. We support two types of bowknots for a
function: automatically-triggered and manually-triggered.
Automatically-triggered bowknots are the common ones and
are used for crash bugs and bugs automatically detected by
a kernel sanitizer. The manually-triggered ones are for more
complex bugs, such as race conditions and memory leaks.
Automatically-triggered bowknots. Figure 3 (Up) shows
an instance of an automatically-triggered bowknot for
a function in Qualcomm’s KGSL GPU driver. This
function is the handler for one of the supported ioctl
syscall commands for this driver and is called by the
main ioctl handler, kgsl_ioctl. The function instru-
mentation has several parts. The ﬁrst part is an undo
block at the end of a function, which contains all the
undo statements corresponding to the state-mutating state-
ments in the function. There are two state-mutating
statements in this function: kgsl_context_get_owner(),
which returns a context object while incrementing its
reference counter, and mutex_lock(), which acquires a
lock. The corresponding statements to undo the ef-
fects of these statements in the function are, respectively,
kgsl_context_put() and mutex_unlock(). This undo ba-
sic block is also protected by an always-false global variable
(bowknot_global_always_false) preventing it from being
used in the normal execution of the function. It is only acces-
sible through explicit jumps to bowknot_label.
The second part of the instrumentation is for detecting, at
runtime, the state-mutating statements that are executed be-
fore the crash. This is because not all execution paths within
a function execute the same set of state-mutating statements.
If not taken into account, in the case of a speciﬁc bug, an un-
necessary undo statement might get executed. Therefore, we
instrument the function to keep track of the execution of the
state-mutating statements. To do this, we use a per-function
mask variable. We add the mask update statements after each
state-mutating and undo statement. We also make the undo
statements in the undo block conditional based on the bits in
this mask. In our example, after a call to mutex_lock(), we
set a bit in the mask variable. After a call to the corresponding
mutex_unlock(), we reset the same bit in the mask variable.
Then in the undo block of the bowknot, we check the bit. If
set, we execute the mutex_unlock() statement.
The third part of the instrumentation, which is used for
automatically-triggered bowknots, is the automatic redirection
of the execution to the undo block when a bug is triggered.
To do this, we add conditional goto statements (CGOTO) after
all statements. The goal of these statements is to redirect
the execution to the undo block in case of a bug. When a
crash happens or a bug is detected by the kernel sanitizer, the
execution is redirected to the kernel exception handler, which
USENIX Association
30th USENIX Security Symposium    2385
goto bowknot_label
context =
kgsl_context_get_owner(dev_priv, param->context_id); CGOTO;
bowknot_set_bit(bowknot_pairmask, 1);
uint64_t bowknot_pairmask = 0;
struct kgsl_device_waittimestamp_ctxtid *param = data; CGOTO;
struct kgsl_device *device = dev_priv->device; CGOTO;
long result = -EINVAL; CGOTO;
struct kgsl_context *context; CGOTO;
if (context == NULL) {
goto out;
struct kgsl_device_private *dev_priv, unsigned int cmd,
void *data)
mutex_lock(&device->mutex); CGOTO;
bowknot_set_bit(bowknot_pairmask, 2);
1 #define CGOTO if(unlikely(current->bowknot_flag))
2
3
4 long kgsl_ioctl_device_waittimestamp_ctxtid(
5
6
7 {
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
}
25
...
26 out:
27
28
29
30
31
32
33
34 bowknot_label:
35
36
37
38
39
40
41
42
43 }
44
45 long kgsl_ioctl(struct file *filep,
46
47 {
48
49
50
51
52 bowknot_label:
53
54
55
56 }
current->bowknot_flag = 0;
if(bowknot_check_bit(bowknot_pairmask, 2))
mutex_unlock(&device->mutex);
if(bowknot_check_bit(bowknot_pairmask, 1))
kgsl_context_put(context);
current->bowknot_flag = 1;
return -1;
kgsl_context_put(context); CGOTO;
bowknot_unset_bit(bowknot_pairmask, 1);
mutex_unlock(&device->mutex); CGOTO;
bowknot_unset_bit(bowknot_pairmask, 2);
return result;
...
ret = kgsl_ioctl_device_waittimestamp_ctxid(...); CGOTO;
...
if (bowknot_global_always_false < 0) {
if (bowknot_global_always_false < 0) {
unsigned int cmd, unsigned long arg)
}
...
}
return -1;
15
16