PRECIP:TowardsPracticalandRetroﬁttableConﬁdentialInformationProtectionXiaoFengWang†,ZhuoweiLi†,NinghuiLi‡andJongYoulChoi††IndianaUniversityatBloomington.‡PurdueUniversity.AbstractAgrandchallengeininformationprotectionishowtopreservetheconﬁdentialityofsensitiveinformationunderspywaresurveillance.Thisproblemhasnotbeenwellad-dressedbytheexistingaccess-controlmechanismswhichcannotpreventthespywarealreadyinasystemfrommon-itoringanauthorizedparty’sinteractionswithsensitivedata.OuranswertothischallengeisPRECIP,anewse-curitypolicymodelwhichtakesaﬁrststeptowardsprac-ticalandretroﬁttableconﬁdentialinformationprotection.Thismodelisdesignedtoofferefﬁcientonlineprotectionforcommercialapplicationsandoperatingsystems.Itintendstoberetroﬁttedtotheseapplicationsandsystemswithoutmodifyingtheircode.Tothisend,PRECIPaddressessev-eralpracticalissuescriticaltocontainingspywaresurveil-lance,whichhoweverarenotwellhandledbythepreviousworkinaccesscontrolandinformation-ﬂowsecurity.Ex-amplesincludethemodelsforhumaninputdevicessuchaskeyboardwhosesensitivitylevelmustbedynamicallydeter-mined,othersharedresourcessuchasclipboardandscreenwhichmustbeaccessedbydifferentprocesses,andthemul-titaskedprocesseswhichworkonpublicandsensitivedataconcurrently.WeappliedPRECIPtoWindowsXPtoprotecttheapplicationsforeditingorviewingsensitivedocumentsandbrowsingsensitivewebsites.Wedemonstratethatourimplementationworkseffectivelyagainstawidespectrumofspyware,includingkeyloggers,screengrabbersandﬁlestealers.Wealsoevaluatedtheoverheadsofourtechnique,whichareshowntobeverysmall.1IntroductionAlthoughprotectingconﬁdentialinformationhaslongbeenrecognizedasoneofthemostimportantsecurityprob-lems,neverbeforehasthedemandforitspracticalsolutionsbeensoimperative.ArecentstudybyWebrootrevealedthatabout89%ofcomputersitscannedwereinfectedwithspyware,withanaverageof30instancespermachine[1].Thisthreatcanbemitigatedbythetechniqueswhichaimatpreventingspywarefrombeinginstalled[18]ordetectinganddisinfectingspyware-riddledhosts[35,31].However,relianceonthesetechniquesastheonlydefenseisrisky,asevasionofthemleavesconﬁdentialinformationcompletelyunprotected.Therefore,itiscrucialtoenableahosttocontainspywaresurveillance,preventingdatafrombeingstolenevenafterattackersmanagetobreachotherlayersofdefense.Unfortunately,thiscannotbeachievedbytheaccesscontrolmechanismsrunningincurrentcommercialsystems:forexample,thoughmainstreamwordprocessingsoftwaresuchasMicrosoftWordofferspasswordandencryptionprotectiontosensitiveﬁles,akeyloggercaneas-ilygetaroundsuchdefensebyrecordingthepasswordusedbyanauthorizedpartytoaccesstheseﬁles.Fundamen-tally,thesemechanismsaredesignedtoregulateaccesstoresources,nottocontrolpropagationoftheinformationre-leasedfromtheresources[6,10,58].Complementarytothesemechanismsarethetechnolo-giesforinformationﬂowsecurity[33,47].Theideaistotrackandmanagesensitivedatatopreventthemfromﬂow-ingintounauthorizedparties.ResearchinthisareastartedwiththefamousBell-LaPadula(BLP)model[21,39].TheBLPmodelisdesignedtoregulatetheinformationﬂowsbetweensubjects(e.g.,processes)andobjects(e.g.,ﬁles)withdifferentsensitivitylevels.Informally,themodelforbidsasubjectfromreadingobjectswithhighersensi-tivitylevels,orwritingobjectswithlowersensitivitylevels.However,thesepropertiescanbetoorestrictiveformanycommercialsystems,inwhichmostapplicationsaremul-titaskedandexpectedtoworkconcurrentlyontheobjectswithvarioussensitivitylevels.Moreover,BLPdoesnotmodeltheresourcesandinputdevicessharedbetweensen-sitivesubjectsandpublicsubjects(e.g.,clipboard,screenandkeyboard),whicharewidelyusedbyspywaretogathersensitiveinformationfromtheuser.Morerecentresearchoninformationﬂowsecurityfocusesontrackingandcon-trollinginformationﬂowswithinaprogram[47,56,44].Manyproposalsrequiremodifyingsourcecodetoenhanceitwithinformation-ﬂowpolicies.However,thesourcecodeofcommoditysoftwareisusuallynotpubliclyavailable.Al-ternatively,someapproachesinstrumentthebinarycodeofanexecutable[51,48]ordynamicallytrackitsexecutionusingvirtualmachinesordebuggingtools[29,43].Aprob-lemisthatinstruction-leveltracingincurssigniﬁcantper-formancepenalties,whichatleasttripleaprogram’srun-ningtime[51].Thismakestheseapproachesmoresuit-ableforofﬂineanalysisthanonlineprotectionofinforma-tion[29,43,51].Webelievethatinformation-ﬂowbasedapproachispromisingtoachieveconﬁdentialityprotection,butitsim-plementationinpracticalsystemscanbehardunlessthetechnicalbarriersdiscussedabovehavebeeneffectivelyad-dressed.Speciﬁcally,aninformation-ﬂowmodelmustfullyreﬂectthesecurity-relatedpropertiesofoperatingsystemsandapplications,andbeefﬁcientenoughforusingonline.Itisalsoexpectedtoberetroﬁttedtolegacysystemswith-outtouchingtheircodeandlargelypreservethewayusersinteractwiththem.Asaﬁrststeptowardstheseobjectives,weproposePRECIP,anewconﬁdentialitymodelthataimsatpracticalandretroﬁttableconﬁdentialinformationpro-tection.PRECIPcontrolsthesensitiveinformationﬂowsamongsubjectsandobjectsthroughtrackingindividualsub-jects’outputswhicharedependentontheirsensitivein-puts:forexample,datatransferredfromawordprocessortoclipboardaredeemeddependentupontheprogram’sin-putsfromthedocumentbeingedited.Ourmodelpreventssensitiveinformationfromgettingintountrustedsubjectsanddynamicallyidentiﬁesthenewobjectswhichreceivesensitivedata.Italsoexplicitlydescribessharedresourcesanduserinputdevicessuchasscreen,sharedmemoryandkeyboard,andspeciﬁestheactionwhichchangestheirsen-sitivitylevels.Forexample,wheneverauserstartsrunningawordprocessortoeditasensitivedocument,ourapproachautomaticallytracksitsinputﬂowsfromkeyboardanditsoutputﬂowstoscreen,sharedmemory(e.g.,clipboard)andtemporaryﬁles,andprotectsthemfrombeingaccessedbyuntrustedsubjectsthroughtheactivitiessuchasinterceptingkeystrokesortakingasnapshotofthescreen.PRECIPisde-signedforonlineoperationandcanberetroﬁttedtolegacyoperatingsystemsandapplicationswithoutchangingtheircode.Inourresearch,weimplementedourmodeltoprotectsomeWindowsapplications,whichdemonstratesitseffec-tivenessinpreventinginformationleakageduringcommondataoperationssuchasviewingoreditingdocuments,andbrowsingwebsites.Themaincontributionsofthepaperaredescribedasfol-lows:•Effectiveandefﬁcientconﬁdentialityprotection.PRECIPcanmodeluserinputs,sharedresourcesandmultitaskedapplications.Itisdesignedtobeusedon-line.OurimplementationofthemodelunderWin-dowsXPwasdemonstratedtoworkeffectivelyagainstalargespectrumofspyware,includingdifferenttypesofkeyloggers,screengrabbersandTrojans.Ourex-perimentalstudyalsoshowsthatPRECIPintroducesonlysmalloverheadstotheoperatingsystemandap-plicationsitprotects.•Retroﬁttolegacysystemsandeaseofuse.Thesecu-ritypoliciesofPRECIPcanbeenforcedbysystem-callinterposition,whichcanbeachievedusingthetoolkitssuchasWrappers[36],anduser-landprogramssuchashooksforWindowsmessage-handlingmechanismandapplications’add-ons.Thisavoidsmodifyingthesourceandbinarycodeofoperatingsystemsandap-plications,andalsomakesourapproacheasytoswitchonandoff.•Newtechniquestotraceandcontrolsensitivein-formationﬂows.Weproposesimplebuteffectivedependencyrulestodeterminethedependencyrela-tionsbetweeninputsandoutputsofsomeWindowsapplications,includingwordprocessingsoftwareandWebbrowsers.Wealsodesignedanovelframe-worktoprotectsensitivemessagetrafﬁcwithinWin-dowsmessage-handlingmechanism,whichpreventsuntrustedhooksfrominterceptingsensitivemessagesbutstillallowsthemtoworkproperlyonpublicmes-sages.Developingpracticalinformation-ﬂowbasedconﬁden-tialityprotectioniswellrecognizedtobeachallengingtask.PRECIPtakesaﬁrststeptowardsthisobjective.Inevitably,itcontainslimitationsthatneedfurtherinvestigation.First,ourapproachgeneratesdependencyrulesempirically,baseduponapplication-speciﬁcknowledge.Second,thoserulesaredesignedtobegeneraltoacategoryofapplicationswithoutmodifyingtheircode.However,thispropertyalsomakesthemlessprecise:thereisnoguaranteethatallthesensitiveoutputsofanapplicationwillbecapturedbytherules,whichmaypotentiallyletsensitivedataslipintoanunauthorizedparty.Third,enforcementofPRECIPpoli-ciesanddependencyrulesarealsoachievedinanempiricalmanner,relyingonasetofcontrolprogramsspeciﬁctoap-plications.Theseproblemscouldbeaddressedinthefutureresearchbytechniquesforautomaticanalysisofapplica-tionsandextractionoftheirdependencyrules,andagen-eralframeworkforenforcingtheserulesandotherpolicies.AnotherproblemisthatPRECIPinterfereswiththeopera-tionofalegitimateapplication,whichcouldunderminethefunctionalityoftheapplicatoinundersomecircumstances,forexample,whenitisprocessingbothsensitiveandpub-licdata.Finally,PRECIPdoesnotmodelintegrityandre-liesonadditionalintegrityprotectiontoensurethatitisnotbypassed.Whileourprototypeimplementationincludesabasicintegrityprotector,itsprotectionisnotcomprehen-sive,andapractical,comprehensiveintegritymodelwillcertainlycomplementourwork.Therestofthepaperisorganizedasfollows:Section2presentsourmodel;Section3describesadesignwhichap-pliesthemodeltoprotectsomedataoperationsunderWin-dowsXP;Section4givesthedetailsofourproof-of-conceptimplementation;Section5reportsourexperimentalstudiesontheimplementation;Section6discussesthelimitationsofourapproach;Section7surveysthepreviousworkre-latedtoPRECIP,andSection8concludesthepaperanden-visionsthefuturework.2TheModelThePRECIPmodelforconﬁdentialityprotectionismo-tivatedbythefollowingissuesinmoderncommercialop-eratingsystems(suchasMicrosoftWindows),whicharenoteffectivelyhandledinexistingconﬁdentialityprotectionMandatoryAccessControl(MAC)modelssuchasBLPornon-interference[21,30].UserInputObjectsExistingMACmodelslabelinforma-tionbasedontheirsource.Forexample,asystemmayhavesomeﬁleslabeledas“high”andsomelabeledas“low”,andinformationderivedfrom“high”ﬁlesisconsidered“high”.Whilethisapproachworksforinformationthatalreadyex-istsinthesystem,itdoesnotworkforinformationnewlygeneratedfromuser-inputobjects,suchasthekeyboard.Becausethekeyboardissharedbyapplicationsrunningatdifferentlevels,theeventstheygeneratedarealsoatdiffer-entlevels.Considerthescenariothatonedownloadsandinstallsaninputmethodprogramforinputtinginaforeignlanguage.Theprogramneedstoreceivekeyboardevents.However,sincetheprogramcouldpotentiallybeakeyloggerandcan-notbefullytrusted,wewouldwanttopreventtheprogramfromreceivingkeyboardeventswhileoneistyping,forexample,passwordsforloggingintoabank’swebsite.Inthisscenario,givenakeyboardevent,onehastopredictitssensitivity,basedonwhichapplicationtheseeventswillbeeventuallysentto.Forexample,iftheeventsaresenttoawebbrowserthatisaccessingthewebsiteoftheuser’sbank,thentheseeventsshouldbeconsideredsensitive,becausetheymayincludepasswordsforloggingintotheuser’sac-count.Ontheotherhand,ifoneistypingwhilepostingonapublicforum,thenthekeyboardshouldnotbeconsideredtobesensitive.Therefore,ifoneassignsalabeltothekeyboard,thenthislabelmustbedynamic.Itdependsuponwhetherthekeyboardwillbeusedasinputforhighobjectsinthefu-ture.Thisisdifferentfromexistingmodels,wherethelabelofanobjectisderivedfromthepasthistoryofhowthisin-formationisderived.Whenlabelinganewkeyboardevent,onehastopredicthowitwillbeused.OtherSharedObjectsManyobjectsotherthanuser-inputobjectsarealsosharedbymultiplesubjects.Twoexamplesarethescreenandtheclipboard.Theseobjectsarecriticalinordertohaveafunctionalsystem,andtheyneedpro-tection.Oneclassofspyware,knownasscreengrabber,extractsinformationfromthescreen.Thesesharedobjectswillalsohavedynamiclabels.Whilesomeoftheobjectssuchasthescreencandropitssensitivitylevelbyitselfaf-teraneventisterminated,othersharedobjectsmayrequireanexplicit“cleaning”operationtoremovethecontenttoenableitssensitivityleveltodrop.Multi-taskedsubjectsOperatingsystemkernelsmaintainprotectionboundaryatthelevelofprocesses.Accesswithinaprocess’saddressspaceisgenerallyunmediated.How-ever,inmodernoperatingsystems,oneprocessmaycontainmultiplethreadsthatservedifferenttasks,oftenatdifferentsensitivitylevels.Forexample,asingleWordprocessmaycontainmultiplethreadsthatareusedtoeditbothsensitiveﬁlesandnon-sensitiveﬁles.Similarly,onebrowsermaybeusedtobrowsewebsitesofdifferentsensitivity.IntheBLPmodel,onehastoeitherforbidsuchsituationordeclarethesubjectas“trusted”,sothatthesubjectcanwritearbitrarily.A“trusted”subjectinBLPistrustedtoperformdeclassiﬁcationcorrectly.However,thistreatmentdoesnotworkformodernOSsuchasWindows,inwhichmostapplicationsaremultithreadedandmanyofthemdonothavedeclassiﬁcationcapability.Forexample,thereisnoobstructioninWordtocopyingdatafromasensitivedocumentandpastingthemtoapublicdocument.2.1BasicConceptsWenowintroducethebasicconceptsinPRECIP.Objectsarerepositoriesforinformation.Anobjectcanbeeitherlo-calorremote(acrossthenetwork).Examplesincludeﬁles,buffers,keyboard,screen,websites(remote),etc.Auser-inputobject(UIO)isanobjectthroughwhichsubjectsre-ceiveuserinputs.ExamplesofUIOincludekeyboardandmouse.Asubjectisaninformationprocessingunitwhichoperatesonobjects.Wetreateachprocessasasubject.Achannelconnectsasubjecttosubject,asubjecttoanobject,oranobjecttoasubject.Forexample,openingaﬁleforreadcanbeviewedastheoperationtoopenachannelfromtheﬁletothesubject.Anetworkconnectioncanbeviewedasatwo-waychannelbetweenalocalsubject(pro-cess)andaremotehost(modeledasanobject).Apathcon-sistsofmultiplechannelsthatareconnectedbysubjects.Thatis,apathhasthefollowingform:(u0,u1),(u1,u2),...,(uk,uk+1),whereeach(ui,ui+1)isachannel,u0anduk+1areeithersubjectsorobjects,andu1,...,ukaresub-jects.Forexample,underMicrosoftWindows,multiplesubjectscanhookonthedeliveryofkeyboardevents.Theyformapaththroughwithakeyboardeventwillbedelivered.Informationﬂowsfromasubject/objecttoanothersub-ject/objectthroughchannelsbymessages.Ournotionofmessageisgeneral.Anycommunicationisviewedasthepassingofamessage.Examplesofmessagesincludekeyboardevents,mouseevents,datatransferredthroughaﬁlewritingsystemcall,datatransferredthroughaninter-processcommunicationcall,etc.Eachmessageemittedbyasubjectmaydependuponasetofinputmessagesreceivedbythesubject.Theconceptofdependencycapturesthein-tuitionthatinformationmayﬂowthroughasubject.Thisdependencyrelationisassumedtobeaninputtothemodel.Ourmodeldoesnotforceaparticularwayoftracingthedependencyandallowstheuseofanyapproachfordeter-miningthedependency.InBLP,therearetwokindsofsub-jects.Anuntrustedsubjectmustsatisfythe*-property(i.e.,nowrite-down).Thiscanbeinterpretedasassumingeachoutputmessagedependsuponallpreviousinputmessages.Atrustedsubjectisnotrestrictedbythe*-propertyrestric-tion.Thiscanbeinterpretedasassumingeachoutputmes-sageemittedbythesubjectdependsuponnoinputmessage.TheBLPapproachislimitedbythefactthatittreatssub-jectsasblackboxes,andhasonlythetwoextremecasesofdependency.Itthuscannothandlemultitaskedprocesses.PRECIPhandlesmultitaskedprocessesbyallowingﬁner-graineddependencyrulestobespeciﬁedandused.Oneex-ampledependencyruleweuseinourimplementationisasfollows.UnderWindows,whenoneopensmultipleﬁlesinoneWordprocess,thesubjectcorrespondingtotheprocessreceivesmessagesfromallﬁles.However,whenthesubjectwrites,theoutputmessagedependsonlyupontheﬁlebeingeditedbytheuser(Section3.3).Everyobjecthasasensitivitylevel,whichcanbeanele-mentinalattice.Inourimplementation,theleveliseitherhighorlow.WethusfocusourdescriptionofPRECIPtothiscase,thoughourmodelcanbeextendedtothemoregeneralcasewherethesetofallsensitivitylevelsformsalattice.Anobjectissaidtobesensitiveifitssensitivitylevelishigh.Anobject’ssensitivitylevelmaychange.Itmayraisefromlowtohighifitreceivesasensitivemessage.Itmayalsodropfromhightolowifoneperformsa“clean”opera-tiononit.Forexample,whenoneoverwritesthecontentofaclipboard,thesystemﬁrst“cleans”theclipboard,enablingitssensitivityleveltobecomelow.Cleaningensuresthatallfuturemessageswillnotdependuponpreviousincomingmessages.Anobjectmayberemoteorlocal.Aremoteobjectisnotunderthecontrolofthesecuritysystem.Technically,aremoteobjecthasasensitivitylevel(whichcanbeeitherhighorlow)thatcannotbechangedbythereferencemoni-tor.Sensitiveinformationshouldnotbesenttoremoteob-jectswithlowsensitivitylevels,becauseonecannotcontrolwhocanreadthoseobjects.Forexample,aremotewebsiteshouldbeviewedasaremoteobject.Ontheotherhand,aﬁleonlocalharddrivecanbeviewedaslocal,becausetheprotectionsystemcanlimitwhichsubjectscanreadtheﬁle.AﬁleonanUSBthumbdriveshouldbeviewedasremote,becausethedrivemaybetakenawayandbeusedoutsidetheprotectionsystem.NotethatanUSBthumbdrivecanstillreceivesensitiveinformationifitislabeledashigh.Asubjectmaybetrustedoruntrusted.Asubjectisun-trustedifonehasnoconﬁdenceincontrollinginformationﬂowthroughthesubjectbycontrollingitsoutputchannelsmediatedbythereferencemonitor.Thiswouldbethecaseiftheprogramrunninginthesubjectisdownloadedfromanunknownsourceandmayusecovertchannelstoleakin-formation.Sensitiveinformationshouldnotbesenttoun-trustedsubjects.Notethatournotionoftrustedsubjectsisdifferentfromthatin,forexample,theBLPmodel.InBLP,trustedsubjectsareassumedtobeabletocorrectlydeclas-sifyinformation.Ourassumptionisweaker.InPRECIP,trustedsubjectsareassumedtobehaveinawaysuchthatonecanmodelinformationﬂowthroughthemusingthede-pendencyrules.Inessence,thisimpliesthattrustedsubjectsareassumednottousechannelsnotcontrolledbytherefer-encemonitor(e.g.,covertchannel)toleakinformation.2.2SecurityObjectiveIntuitivelythesecurityobjectiveisthatanyinformationﬂowthatviolatestheconﬁdentialitygoalisnotallowed.Forexample,spywaresuchaskeyloggersshouldnotbeabletostealpasswords.Whenwehavejusttwosensitivelevels:sensitive(i.e.,“high”)andpublic(i.e.,“low”),thesecurityobjectivecanbestatedas:sensitiveinformationshouldnotbeleaked.Byleaked,wemeanthatinformationisdeliveredeithertoanuntrustedsubjectortoaremoteobjectwithsensitiv-itylevel“low”.Asanuntrustedsubjectmaycontaincovertchannelstoleakinformation,deliveringinformationtoanuntrustedsubjectshouldbeconsideredleaking.Aswecan-notcontrolwhoreadaremoteobjectwith“low”sensitivity,deliveringinformationthereisalsoconsideredleaking.Bysensitiveinformation,werefertotheinformationthatisderivedfromtheinformationinasensitiveobject.Therearetwocases.Oneisamessagethatdependsupon(pos-siblytransitively)amessagethatcomesoutofasensitiveobject.Theotherisamessagethatdependsupon(possi-blytransitively)amessagecomingoutfromaUIOthatisgeneratingsensitiveuserinputs.2.3PoliciesAchievingtheObjectiveWenowdescribeacollectionofpoliciesthattogetherachievethesecurityobjectiveidentiﬁedabove.Thesepoli-ciesaredividedintothosethattracesensitivitylevelsofmessagesandobjectsandthosecontrollingthedeliveryofmessages.A.Tracingsensitivitylevelsofmessagesandobjects:•Eachmessagehasasensitivitylevel.Whenamessageisgenerated,itissettohighifoneofthefollowingistrue:(1)themessageisemittedfromasensitiveobject,(2)themessageisemittedfromasubject,andamongthesetofmessagesthatthemessagedependson,atleastonemessageissensitive.•Wheneveranobjectreceivesasensitivemessage,theobject’ssensitivitylevelissettohigh.•AUIOobjectissettohighifandonlyifthereisapathconnectinganUIOtoasensitiveobject.•Whenanobjectiscleaned,thentheobject’ssensitivityissettolow.Thesepoliciestracesensitivitylevelsofobjectsandmes-sages.Notethatinourmodel,subjectsdonothavesensi-tivitylevels;onlyobjectsandmessagesdo.(Asubjecthasatrustlevel;itcanbetrustedoruntrusted.)Thisisbecauseasubjectmaybeoperatingondataofmultiplesensitivitylevels.Alsonotethatthesensitivitylevelofamessagegen-eratedbyasubjectisdeterminedbythesensitivitylevelsofthemessagesitdependson.B.Controlling:Messagedeliveryiscontrolledaccordingtothefollowtwopolicies:(1)Ifasensitivemessageisbe-ingsenttoanuntrustedsubjectorremoteobjectwithlowersensitivitylevel,thenthemessageisblocked.(2)Ifasensi-tivemessageisbeingsenttoalocalobjectwithlowersen-sitivitylevel,wehavetwochoices:blockthemessage,ordeliverthemessageandmarktheobjectassensitive.Wenowshowthatthesepoliciesachievethesecurityob-jectiveinSection2.2,undertwoassumptions.First,when-everamessageisoutputtedbyanUIO,ifthereisnopathconnectingtheUIOtoanobject,thenthemessage(orothermessagesdependingonit)willneverbedeliveredtotheob-ject.Second,thecleaningoperationisperformedcorrectly,thatis,nomessagesentafterthecleaningdependsuponanymessagereceivedbeforethecleaning.Undertheabovetwoassumptions,astraightforwardinductionshowsthatthetwokindssensitiveinformationidentiﬁedinthesecurityobjec-tive(Section2.2)willbebothcorrectlylabeledassensitivebythetracingpoliciesabove.Themessagedeliverycontrolthenensuresthatsensitiveinformationisnotleaked.Additionalpoliciescanbeintroducedinanactualimple-mentation,solongasthesecurityobjectivearemet.Forexample,whenimplementingthePRECIPmodel,weintro-duceapolicythatblocksinformationdeliveredtoatrustedsubject,whenthesubjectiscommunicatingwitharemoteobjectlabeledas“low”andwewanttoavoidblockingthatcommunication.3ProtectingConﬁdentialInformationinWindowsXPInthissection,wepresentadesignwhichappliesthePRECIPmodeltoWindowsXP.Ourobjectiveistoprotectthesensitiveinformationrelatedtotwocommondataopera-tions:viewingoreditingsensitivedocumentsandbrowsingsensitivewebsites.Weﬁrstillustratethegeneralideabehindourdesignandthenelaborateonitscomponents.3.1OverviewOurdesignincludesfourmajorcomponents:aclassiﬁer,atracer,acontrollerandanintegrityprotector.Theclassi-ﬁeridentiﬁessensitivedocumentsandtrustedapplications.Thetracerdetectsthesensitiveoutputsofatrustedapplica-tionandlabelstheseoutputsaccordingtothetracingpoli-ciesdescribedinSection2.3.ThecontrolpoliciesofPRE-CIP(Section2.3)areenforcedbythecontrollerthroughakerneldriverthatregulatessystemcallsandauserlandhookingmanagementmechanismthatcontrolstheinforma-tionﬂowwithinWindowsmessage-handlingmechanism.Theintegrityofallthesecomponentsisprotectedbytheintegrityprotector.Figure1illustratesthedesign.PRECIP systemIntegrity ProtectorTracerControllerClassifierBrowserAdd-onuser landkernel landdissemina. controlmanagmt of untrusted hookssubjects: processesobjects: files, memory, screen, keyboard, windows etclabel/queryquerydepen. rulescontrol rulesFigure1.PRECIPonWindowsXP.Example.Thegeneralideaofourapproachcanbede-scribedwiththefollowingexample.AfterthePRECIPmechanismhasbeeninstalled,theclassiﬁerautomaticallylabelstrustedexecutablesaccordingtothepresenceofde-pendencyrules,andidentiﬁessensitiveﬁles.SupposeMicrosoftWordhasbeenlabeledasatrustedapplica-tion.Wheneveritislaunched,theclassiﬁermarksitspro-cessasatrustedsubject.Oncetheprocessopensasensitiveﬁle,thetraceremploysdependencyrulestoidentifythein-formationemittedfromtheprocesswhichisdeemeddepen-dentuponthesensitiveinputsfromtheﬁleandraisesthesensitivitylevelsoftheobjectsreceivingsuchinformation.Theseobjectsincludescreenonwhichaneditingwindowdisplaysthecontentsoftheﬁle,clipboardthatcontainsthedatacopiedfromtheﬁleandtemporaryﬁleswhichWordcreatesfortheﬁle.Inaddition,thetraceralsosetskeyboardandmouseassensitiveobjectswhentheeditingwindowforthesensitiveﬁleisreceivingdatafromtheseperiph-erals.Thecontrollerblockstheattemptsfromuntrustedprocessestoreadsensitiveinformation,andcleanssharedresourcescontainingsensitivedata.Forexample,whenasensitiveeditingwindowawaitskeystrokeinputs,thecon-trollerusesthehookingmanagementmechanismtodeliverkeystrokemessageswithoutgoingthroughuntrustedhooks;oncethesensitivewindowstopsreceivinginputs,thecon-trollerpurgesclipboardandthekeystatusofkeyboardtolowerdowntheirsensitivitylevels.Atthemeantime,theuser’sinteractionswiththeeditingwindowforapublicdoc-umentareallowedtoproceedasnormal.Theintegritypro-tectorprotectstheWordprocessagainsttheuntrustedpro-cessesthatattempttointerferewithitsoperationsorinstru-mentitsexecutables.Adversarymodel.Weassumethatnospywareisinsidethekernelatthetimeourmechanismisinstalled.Ourim-plementationismainlyatthekernellevelandthereforecan-notprotectsensitiveinformationifspywareisalreadyinsidethekernel.However,ourintegrityprotectorcanpreventun-trustedcodefrombeingloadedintothekernelthroughsys-temcalls(Section3.5).PRECIPisnotdesignedforpreventingexploitofsoft-warevulnerabilities,suchascontrol-ﬂowhijackingthroughbufferoverrun.Werelyonexistingapproachessuchasthetechniquesformemoryprotection[26,22,53]todefendtrustedapplicationsanddriversagainstsuchattacks.3.2ClassiﬁcationandLabelingTheclassiﬁerisdesignedforlabelingexecutableswithtrustlevelsandotherobjectswithsensitivitylevels.Trustlevels.InthePRECIPmodel,asubjectisdeemedtrustedifwehavetheknowledgeaboutitsinput/outputde-pendencyrelations.Suchknowledgeisdescribedinourde-signasasetofdependencyrules,whichwediscussinSec-tion3.3.Onceinstalled,thePRECIPmechanismrunstheclassiﬁertolocatealltheexecutablesofwhichdependencyrulescanbefoundfromadatabase.Theseexecutablesarelabeledastrustedsubjectsaftertheirintegrityhasbeenver-iﬁed1.Anauthorizedparty(suchasasystemadministrator)isalsoallowedtoaddnewdependencyrules2ormodifyex-istingrulesthroughasecurityadministrativetool.Theclassiﬁerlabelsanexecutableusingitsﬁlestream[9].UnderanNTFSﬁlesystem,aﬁlecanhavemultiplestreamsofdata,ofwhichthemainstreamisdi-rectlyretrievablethroughtheﬁlename,andotherstreamsareaccessedthroughboththeﬁlenameandstreamnames.Forexample,themainstreamofaﬁle“myfile.ext”1Forexample,wecanchecktheirhashﬁngerprintsagainstthoseofknownlegitimateprograms.2Thoserulescanbeconstructedbyanalyzinganapplicationoracate-goryofapplications.isassociatedwithitsﬁlenamewhileitsotherstreamsareopened,readandwrittenthroughthenamesintheformat“myfile.ext:stream-name”.Ourclassiﬁercreatesastream“trust-level”foreveryexecutableﬁletolabelitstrustlevel.Thisstreamisprotectedagainstunauthorizedmodiﬁcationbytheintegrityprotector.Aprocessisconsid-eredtobetrustedifalltheexecutablesitisgeneratedfromaretrusted.WelabelthetrustlevelofaprocessusinganunusedbyteintheKPROCESSstructureofthatprocess.Thebytelocatesatoffset0x33.TheKPROCESSstruc-tureisinsidetheWindowskernel,andthereforecannotbeaccessedbyuserlandcode.Sensitivitylevels.Theclassiﬁeralsocreatesforeverynonexecutableﬁleastream“sensitivity-level”.Similartothetrust-levelstream,thisstreamcanonlybechangedbytheclassiﬁer.Filelabelingisaprocessthatneedsuserintervention.However,automatictoolscanbeusedtheretoreducetheburdenofmanuallyannotatingin-dividualﬁles.Anapproachisinferringthesensitivitylevelofaﬁleaccordingtoitsdiscretionaryaccesscontrol(DAC)information.WindowsXPallowstheusertosetaccesspo-licesofherﬁles,includingtheactionssuchas“modify”,“read”,“write”and“execute”otherusersarepermittedtotakeontheﬁles.Inaddition,itcanalsoencrypttheﬁlesontheuser’srequest.Ourclassiﬁercanautomaticallylabeltheﬁleswhichareencryptedoronlyaccessiblebyitsownerandthesystemadministratorassensitiveobjects.Italsoutilizesheuristicstoidentifysensitiveﬁles.Forexample,a“.pst”ﬁleisdeemedsensitive.Theuserisalsoallowedtochangeaﬁle’ssensitivelevelandevendesignatealabeltoanewlycreatedﬁlethroughaninterfaceprovidedbytheclas-siﬁer.Theinterfaceoffersalistofwindowsthroughwhichtheusercandeterminethesensitivitylevelofayet-to-saveﬁle.Besidesﬁles,othertypesofobjectsalsohavesensitivitylevels.Forexample,windows,screen,keyboardandclip-boardcanbelabeledwithvarioussensitivitylevelsaccord-ingtotracingpolicies(Section2.3).Thesesensitivitylevelsarerecordedinanarraysharedbytheclassiﬁer,thetracerandthecontroller.Remoteresourcessuchaswebsitesalsohavesensitivitylevels.OurmechanismmaintainsalistofsensitiveInternetdomainnamessuchasthoseofbanksandotherﬁnancialinstitutionsandasetofsensitiveIPpreﬁxes.3.3SensitiveInformationTracingThetracerﬁrstdetectsinformationﬂowscomingoutofsensitiveobjects,andthenemploysasetofdependencyrulestoidentifythesensitiveoutputsofaprocessthatre-ceivestheseﬂows.Inourresearch,weimplementedthetracerinakerneldrivertointerceptsystemcalls,anduser-landprogramstohelpidentifysensitiveinformation.Suchuserlandprogramsincludeanadd-onforenforcingthede-pendencyruleforwebbrowserandahookingmanagementmechanismfortrackingtheinformationwithinWindowsmessage-handlingmechanism.ThelatterisdescribedinSection3.4asitisalsoapartofthecontroller.Identifyingandtracingsensitiveinformation.Thetracermonitorstheoperationsperformedbyprocessesonsensi-tiveobjectstodetectsensitiveinformationﬂows.ExamplesofsuchoperationsincludereadingfromasensitiveﬁleandnavigatingtoasensitiveURL.Inaddition,thetracerau-tomaticallymarksinputperipheralssuchaskeyboardandmouseassensitiveobjectswheneverinputfocus[3]issetonawindowprocessingsensitiveinformation,whichindicatesitawaitinginputsfromthesedevices.Inthiscase,theinfor-mationﬂowsproducedbythesedevicessuchaskeystrokesandmousemovementsarealsodeemedsensitive.Adependencyruleforeditingorviewingapplications.ManyWindows-basedediting/viewingapplicationsdonotsupportmultipleprocesses:forexample,Wordmaintainsasingleprocesstoservealldocuments.Thispreventsusfromutilizingprocessboundarytoseparateinformationintheseapplicationswithoutalteringtheircode.Therefore,ourcurrentdesigntrackssensitiveoutputsoftheseapplica-tionsusingaheuristicdependencyrulebasedonanintuitiondescribedbelow.Editingorviewingapplicationsaimatprovidingtheuserwithinterfacesandtoolstoprocessherdocuments.There-fore,mostoftheiroutputsaredirectlytriggeredbyhumaninputs.UnderWindowsXP,theseapplicationsuseagraphicuserinterfacecalledwindowtovisualizeadocumenttotheuserandletheredititscontents.Wecallsuchawindowthehostingwindowofthedocument.Atop-levelwindowinWindowsiscalledanapplicationwindow,whichhasnoownerwindowandappearsonWindowstaskbar.Awindowcanfurtherspawnchildwindowstohandlevarioustaskssuchasinteractionswithﬁlesystemandtheuser.Thecon-tentsofadocumentaredisplayedbyanapplicationwin-dowinsomeapplications,suchasWord,andbyitschildwindowinothers3,suchasExcel.AwindowistreatedasanobjectbyPRECIP.Itssensitivitylevelbecomeshighwhenithostsasensitivedocumentoritisachildwindowofasensitivewindow.AprocessofaWindows-basededit-ing/viewingapplicationcancreatemultiplewindows,eachhostingadocument.However,atanymoment,onlyonewindowhastheinputfocusonitforreceivinguserinputs.Suchawindowiscalledactivewindow.Fromthatwindow,wecanidentifywhichdocumenttheuserisworkingonandthencorrelatetheoutputsoftheapplicationwithit4.This3Suchachildwindowusuallyhasuniquecharacteristicsforeditingandviewingpurposes.Inourexperiments,weobservedawindowstyleparameter0x46CF0000associatedwithitinseveralapplications.4Asmentionedbefore,mostoutputsofanediting/viewingapplicationaretriggeredbyhumaninputs.Thisallowsustoestablishsuchacorre-lation.However,thereareexceptions.AprominentexampleisautomaticobservationisdescribedbyRule1inTable1.Rule1canserveasadefaultruleforanediting/viewingapplication.InSection5.1,wedemonstratethatthisruleworkseffectivelyonthecommoditysoftwaresuchasMicrosoftOffice,AdobeReaderandNotepad.Animportantissuehereisthatourdependencyrulesareonlymeanttobeappliedtolegitimatesoftware,astracinginformationﬂowsofmalware,evenontheinstructionlevel,isalwayssubjecttoevasionbyacunningadversary.Totackleuntrustedsubjects,PRECIPadoptsapragmaticstrat-egywhichpreventssensitiveinformationfromgettingintothemintheﬁrstplace.ToenforceRule1,weneedtoidentifyasensitivewin-dowfromthesensitiveinputsgeneratedbytheoperationssuchasopeningandreadingasensitiveﬁle.FormanyWindows-basedediting/viewingapplications,thiscanbeachievedthroughasimpletechniquedescribedasfollows.Toallowtheusertoworkonasensitiveﬁle,suchanappli-cationmustdisplaythecontentsoftheﬁleinanactivewin-dow.Suchawindowcanbecreatedaftertheﬁleisopenedandread,orbeforetheseoperations.Ineithercase,theapplicationwillimmediatelyupdatethewindowassociatedwiththeﬁle.Ourapproachtracksthesystemcallsfollow-ingthecallsforopeningandreadingasensitiveﬁle.Ifacallforcreatinganewwindow(NtUserCreateWindowEx)isﬁrstobserved,welabelthatwindowasasensitiveob-ject.Otherwise,acallforupdatingthecurrentactivewin-dow(NtUserRedrawWindow)willoccur,whichallowsustomarkitasasensitivewindow.Theoutputsgeneratedbetweenobservationofthesensitiveinputsandidentiﬁca-tionofthesensitivewindowarealldeemedsensitive.ThistreatmentworksformanyWindows-basedediting/viewingapplicationssuchasOfficeandNotepad.However,itisempiricalandapplication-speciﬁc.Amorepreciseap-proachcouldbetrackingtheﬁlehandlerawindowusestoretrievethecontentsoftheﬁle.ThisneedstotrackWin-dowsAPIcalls,assuchaprocessmaynotinvolvesystemcalls.Followingthesensitiveoutputsofaprocess,thetraceridentiﬁesandlabelsnewsensitiveobjects,suchastempo-raryﬁles5,screenandclipboard.Ourapproachappliesasetofexceptionrulestoavoidraisingthesensitivitylevelsofsomeshareobjectsthatdonotcontainsensitivedata.Ex-amplesofsuchobjectsinclude“index.dat”thatrecordstheshortcutsofrecentlyopenedﬁleandtheregistrieswhichsaving,whichcouldhappenevenwhenadocument’shostingwindowisinthebackground.Theseoutputscanbeidentiﬁedusingapplication-speciﬁcexceptionrules.Forexample,manyWindows-basedapplicationscreateatemporaryﬁleforadocumentassoonasitisopened,whichallowsustoidentifysuchaﬁleandsetanexceptionruletokeepitslabelconsistentwiththatofthedocument.5ManyWindowsapplicationstendtocreatetemporaryﬁlesforadoc-umentrightafterithasbeenopened.Someofthemareusedforautomati-callysavingthecontentsofthedocument.NameRuleCommentsRule1:editingorviewingap-plicationsActiveWnd(P).sensitivity=‘high’!−→Output(P).sensitivity=‘high’&&UIO.sensitivity=‘high’AprocessPgeneratessensitiveoutputsandreceivessensitivein-putsfromuserinputobjects(UIO)whenitsactivewindowissen-sitive.ActiveWndisafunctiontoidentifyP’sactivewindowandOutputisafunctiontodetermineP’soutputs.Rule2:WebbrowsersActivePrc(P)=‘sensitiveprocess’!−→Output(P).sensitivity=‘high’&&UIO.sensitivity=‘high’ThesensitiveprocessforawebbrowserPgeneratessensitiveout-putsandreceivessensitiveinputsfromUIOs.ActivePrcisafunctionwhichdetermineswhethertheprocesshostingthecurrentactivewindowisthesensitiveprocess.Table1.DependencyRules.canbewrittentomodifyapplicationsettings.ManyWindowsprocessesmayalsocommunicatewithtwosystemserviceprocesses,svchost.exeandlsass.exe.svchost.exeisagenerichostprocessfortheservicesrunningfromDynamic-linkLibraries(DLLs).lsass.exeisasystemprocessoftheWindowssecuritymechanisms.Theseprocessesusuallyprovideservicestoapplicationsthroughpipes.Forsimplicity,wedonottracethesetwoprocessesforthetimebeing.Instead,welabelthemastrustedsubjectsaftercheckingthelegitimacyandintegrityoftheirexecutables(whichincludes,forexample,alltheDLLssvchost.exehosts),andsetadependencyrulewhichtreatstheirrepliestoanapplication’sservicerequestsastheonlyoutputs.Analysisoftheinformationﬂowswithintheseprocessesisleftasourfutureresearch.ApotentialproblemforRule1isthattheoretically,ac-tivewindowmaychangebetweenaprocessreceivinganinputfromtheuserandthecompletionoftheoperationin-vokedbytheinput.Thisdoesnothappenfrequentlyinprac-tice:theoperationsinediting/viewingapplicationswhichproduceoutputs(e.g.,savingaﬁle)areusuallysimpleandﬁnishquickly,whileswitchofwindowsusuallydoesnothappenpromptlyintheseapplicationsbecauseitisdrivenbyhumaninterventions,whichareslow.However,Rule1isonlymeanttoidentifythecommonoutputsassociatedwithadocument.Givenitsempiricalna-tureandthecomplexityofanapplication’sbehavior,thereisnoguaranteethateverysensitiveoutputwillbecapturedbytherule.Moreover,therulemayalsocausefalsepositive,labelingsomepublicoutputsassensitive.Thiswillhappenwhenanoutputturnsouttobecorrelatedwithabackgroundwindow.Atracingmechanismandadependencyruleforwebbrowsers.WebbrowserssuchasMicrosoftInternetExplorer(IE)andMozillaFirefoxarealsomultithreadedapplications.Theyprovidetabstoallowtheusertoconcurrentlysurfmultiplewebsites.Tabsandbrowserwindowscanbeaccommodatedinasingleprocess.Differentfromediting/viewingapplications,webbrowsersusuallycontinuetoserveataborawindowevenwhenitisnotintheforeground.Thisisbecausewebpagesmaytaketimetodownloadandusuallycontainexecutablecontentssuchasscripts.Therefore,Rule1cannotbedi-rectlyappliedtotracetheseapplications.Totracebrowsers’sensitiveoutputs,wedevelopedatechniquewhichleveragesthefactthatIEandFirefox,twomostwidely-usedbrowsers,supportmultiplepro-cesses.Ourapproachusesanadd-ontomonitortheweb-sitesabrowserisvisiting.Wheneverthebrowsertriestoenterasensitivewebsitesuchaswww.citibank.com,theadd-onblocksthatattempt,andinsteadcreatesanewprocessanddirectstheprocesstothatsite.Wecallthenewprocesssensitiveprocessandtheoriginalprocesspub-licprocess.Theadd-onalsonotiﬁesthetracerofthesensi-tiveprocess’sidentiﬁerfortracingitsoutputstodetectnewsensitiveobjectssuchastemporaryﬁlesandcookies.ThetracerlabelstheUIOsassensitiveobjectswheneverinputfocusisonawindowinthesensitiveprocess.Thisisde-scribedbyRule2inTable1.Thesensitiveprocessisnotallowedtovisitawebsitewithalowsensitivitylevel.Thisisenforcedbytheadd-on:itblockstheattemptfromthesensitiveprocesstonavigatetoapublicURLandinsteadcreatesataborawindowinthepublicprocesstoaccom-modatethatlink.Thisapproachcanbeattackedbymaliciousadd-ons,whichstayinthesameaddressspaceofabrowserprocessandthereforecoulddirectlystealsensitiveinformationfromtheprocessorpreventouradd-onfromgeneratinganewprocess.TheseattackscanbecontainedbySpyShield,atechniqueproposedinourpriorwork[40],whichemploysaproxytocontroltheinteractionsbetweenadd-onsandtheirhostapplications.Discussion.Inthissection,wepresenttwodependencyrulesforediting/viewingapplicationsandWebbrowsers,anddescribetheirenforcementmechanisms.Thoserulesandmechanismsaredevelopedempirically,heavilyrelyingonapplication-speciﬁcknowledge.However,wearguethatgiventhediversityofWindowsapplications,application-speciﬁctreatmentcouldbeaninevitableexpenseforﬁne-grainedinformation-ﬂowtracingintheseapplicationswith-outunderminingtheirusabilityandchangingtheircode.Tomakeourapproachlessempirical,apotentialsolutioncouldbeautomaticanalysisofanapplicationofﬂinetoidentifyitsdependencyrule.Wemayalsoneedtodynamicallyin-strumentpartoftheapplication’sexecutables,suchasthemechanismformultithreadcommunications,toimplementamorepreciserule.Researchonthisdirectionisleftasourfuturework.3.4SensitiveInformationControlThecontrollerworkscloselywiththetracertoprotectthesensitiveinformationﬂowingoutofapplications,ﬁlesandperipherals.ItenforcesthecontrolpoliciesofPRECIP(Section2.3),whichpreventssensitiveinformationfromﬂowingintountrustedsubjectsandtheremoteobjectswithlowsensitivitylevels.Disseminationcontrol.Thecontrollerinterceptssys-temcallstoenforcesecuritypolicies.Itprotectsasen-sitiveobjectfrombeingaccessedbyanuntrustedsub-ject.Speciﬁcally,thecontrollerblocksthecallssuchasNtReadFilefromanuntrustedprocesstoreadasensitiveﬁle.Italsostopsuntrustedcodefromtak-ingasnapshotofscreenthroughthecallssuchasNtGdiStretchBltordirectlyreadingfromkeyboardusingNtUserGetAsyncKeyState6wheneverthesepe-ripheralsaremarkedassensitiveobjects.Forsimplicity,wetreatthewholescreenassensitiveifasensitivewin-dowisbothvisibleandnotminimized7,whichcanbeiden-tiﬁedfromthewindow’spropertiesusingtwoAPIcallsIsWindowVisibleandIsIconic.Thecontrolleralsopreventsanuntrustedprocessfromreadingthevirtualmem-oryofatrustedprocessthroughthesystemcallsuchasNtReadVirtualMemorywheneverthelatterisworkingonsensitivedata.Anotherresponsibilityofthecontrolleristocleansensitivesharedsourcesbeforetheycanbeusedbyotherparties.Forexample,itpurgesallthedatainsideaclipboardandthekeystatusofakeyboardoncethein-putfocusisswitchedfromasensitivewindowtoapublicwindow.Thecontrollerisalsoresponsibleforpreventingsensi-tiveinformationfrombeingleakedtoaremoteobjectwithalowsensitivitylevel,eventhroughatrustedsubject.Tothisend,itcontrolsthenetworkconnectionsofasubjectwhicharedeemeddependentonasensitiveinput.Forex-ample,atrustedFTPclientisonlyallowedtohavecon-nectionswithsensitivedomainsafterreadingfromasen-sitiveﬁle.Thisrule,however,ishardtodirectlyapplytowebbrowsers:asensitivewebsitecouldhostthewebpageswhichrequiredownloadingresourcessuchasimagesfrommanyotherwebsites.Tosolvethisproblem,weonlycontrolthewebsitesthatabrowser’ssensitiveprocessisallowedtovisit,notthenetworkconnectionsitgeneratesduringthat6Thisfunctionreadsthekeystatustodeterminewhetherakeyisupordownatthetimeitisinvokedandwhetherthekeyhasbeenpressedsincethepreviouscall.Afterthat,itresetsthekeystatus.7Thatis,thewindowcanbeobservedfromscreenandisnotintheformofaniconontaskbar.visit,whichcouldbehighlydiverse.Inaddition,onlythesensitiveprocessisallowedtoreadfromsensitiveﬁles,asthepublicprocessisdeemedtosendtheinformationitreadstopublicInternetdomains.Managementofuntrustedhooks.AhookisapointinWindowsmessage-handlingmechanismwhereanapplica-tioncaninstallacallbackfunctiontomonitorandprocesssometypesofmessagesbeforetheyreachtheirtargetwin-dow.Thesemessagescarryinformationsuchasinputsfromkeyboardandmouse.Windowssupportsmanytypesofhooksincludingkeyboard,mouse,debugandothers.Hooksofthesametypearemaintainedbyahookchain,whichen-suresamessagegoesthroughallthesehooksonebyone.Windowshookshavebeenwidelyappliedtoenrichsoft-ware’sfunctionalities,forexample,addinginnewhotkeys.However,theyarealsointensivelyusedbyspywaretostealsensitiveinformation.Forexample,manyWindows-basedkeyloggersinstallkeyboardhookstointercepttheuser’skeystrokes.Effectivemanagementofhooksisessentialtotracingandcontrollingmessagetrafﬁc.Thisobjective,however,cannotbeachievedwithoutaddressingtwokeychallenges:ﬁrst,ahook,onceinstalled,istriggeredbythekerneldi-rectly,withoutgoingthroughanysystemcalls;second,ahookcanbeinjectedintotheaddressspacesofalluser-landprocesses,whichpotentiallyallowsittotouchtheirresourcesdirectly.Wesolvedtheseproblemsusingaframe-workwhichdeploysaproxytoregulatethecommunicationbetweenuntrustedhooksandthemessage-handlingmech-anism(Figure2).Thisframeworkeffectivelyprotectssen-sitiveinformationfromuntrustedhooksatasmallperfor-manceoverhead,asdemonstratedinourexperimentalstudy(Section5.3).Wedescribeourapproachbelow.Untrusted HookTrusted HookUntrusted HookTrusted HookProxy HookAccess ControlAppAppOriginal Message-handlingMessage-handling in PRECIPSensitive msgPublic msgFigure2.Managementofuntrustedhooks.AhookisusuallyintheformofaDLLwhichin-cludesacallbackfunction.Toinstallsuchahook,auserlandprocessmustﬁrstmakeasystemcallsuchasNtUserSetWindowsHookExtospecifythelocationofthefunctionandloadtheDLLintothemessage-handlingmechanism.Ourapproachinterceptssuchacallfromanuntrustedprocess,blocksitsattempttohookanuntrustedDLLandinsteadhooksaproxyDLLfromanotherprocesswhichistrusted8.TheuntrustedDLLisloadedbyaser-viceprocesscalledhookhost.Wheneveranewmessagecomes,thekernelﬁrstpassesittotheproxyDLLwithinthecontextoftheprocessreceivingthatmessage,andtheproxythendecideswhethertopassittohookhostaccordingtothecontrolpolicies.Speciﬁcally,ifinputfocusisonasensitivewindow,theproxyDLLbypasseshookhost;otherwise,itsendsthemessagetohookhostthatinvokestheuntrustedhookusingthemessageasaninput.3.5IntegrityProtectionWithoutintegrityprotection,PRECIPissubjecttoava-rietyofattacks.Forexample,spywaremaytamperwiththetrustlevelsofexecutables,thesensitivitylevelsofﬁles,pro-cessimages,dependencyrulesandsecuritypolicies.Suchathreatiscounteredbytheintegrityprotectorwhichofferskernel-levelprotectiontoPRECIPcomponents.Theintegrityprotectorregulatesthesystemcallsre-latedtoﬁlesystems(e.g.,NtWriteFile),registrykeysandotherauto-startextensibilitypoints(ASEP)[54](e.g.,NtSetValueKey)andprocesses(e.g.,NtWriteVirtualMemory)toblockunauthorizedaccesstoPRE-CIPcomponentsandcriticalsystemcomponents.Specif-ically,itenforcesthefollowingintegritypolices:(1)onlytheclassiﬁercanchangetrust-levelstreamsandsensitivity-levelstreams;(2)atrustedapplication’sﬁlesandprocesscannotbemodiﬁedbyanuntrustedprocess;(3)dependencyrulesandsecuritypoliciescanonlybeaccessedbyaded-icatedprocessthatauthenticatestheuserusingpasswordsandoffersanauthorizedpartyaninterfaceprotectedbythetracerandthecontrollertochangepolicysettings;(4)thededicatedprocessisalsotheonlypartythatispermittedtochangetheASEPsusedforbootstrappingPRECIP;(5)anuntrustedprocessisnotallowedtochangetheregistryen-triesusedbysvchost.exetoidentifyserviceDLLs;(6)anuntrustedprocesscannotreadorwriteWindowspageﬁle[14];(7)onlytrustedkerneldriversareallowedtobeloadedintothekernel.Thepoliciesdescribedabovecouldbeincomplete,miss-ingsomeavenuestheattackercanexploittobypassourmechanism.However,arightpolicysettingwillbesufﬁ-cientfortheintegrityprotectortofendoffallsuchattacks8InWindows,aglobalhookresidesinaglobalDLLandismappedintoindividualprocessesindependently[2].Whenthemessagehandlingmechanismreceivesamessagetowardsaprocess,itactivatesaninstanceofthehookonthestackoftherecipientprocess.Thisarchitecturemaygiveamaliciousprocessachancetotamperwiththedataoftheproxyinstancewithinitsaddressspace.However,itcannotdirectlyaccesstheinstancewithintheaddressspaceofatrustedprocess.Therefore,theproxycanprotectsensitivekeystrokesforwardingtotrustedprocesses.Itdoesnotprotectthekeystrokestowardsanuntrustedprocess,astheyaredeemedtobepublicaccordingtoPRECIPpolicies(Section2.3).fromuserland.Ourdesigncannothandlekernel-landspy-ware.Thisthreatismitigatedthroughregulatingsystemcallssothatonlytrustedkerneldriverscanbeloadedintothekernel.Atrusteddrivercanbeidentiﬁedbycomparingitshashﬁngerprintwiththoseofknownlegitimatecode,orverifyingatrustedthirdparty’ssignatureitcarries.Win-dowsVistaandWindowsXPforx64-basedsystems[16]alsoadoptasimilarprotectionstrategy.4ImplementationWeimplementedaprototypesystemtoevaluateourde-sign.Ourprototypecontainsakerneldriverandseveraluserlandprograms.Thekerneldrivermodiﬁesthesystemservicedispatchtable(SSDT)towrapthesystemcallsinKernel32.DLLandWin32.DLL.ThistechniqueiscalledAPIhooking.Table2listsallthesystemcallshookedinourimplementation.Theclassiﬁerwasmainlyimplementedinthekerneldriver.ItusesthefunctionssuchasNtWriteFiletolabeltheﬁlestreamsfortrustlevelsandsensitivitylev-els.Thekerneldrivermaintainsa1KBarrayforstor-ingfour-byteidentiﬁersofsensitivewindowsandanad-ditionalbyteforthesensitivitylevelsofscreen,keyboard,mouseandclipboard,eachofwhichtakesonebit.Ourapproachalsoincludesauser-landprogramfortheautho-rizedusertomodifyﬁlestreamsandpolicies.Itauthenti-catestheuserusingpasswordandemploysthetracerandthecontrollertoprotectitselfagainstsurveillance.Userin-putsaredeliveredtothekerneldriverthroughthesystemcallNtDeviceIoControlFile.Thetracerhasacomponentinthekerneldriverwhichin-terceptsthesystemcalls(Table2)relatedtothemajorout-putchannelsinWindows.Thesechannelsincludesharedmemory,namedpipes,Windowsmessages,ﬁlesandnet-workconnections.Thetraceralsousesplug-ins(atool-barinourprototype)toautomaticallyseparatethesensi-tiveIEprocessfromthepublicone:theplug-ininoneprocessregisterstheIEeventBeforeNavigate2togettheURLtobevisited;italsocommunicateswithitscoun-terpartintheotherprocessthroughnamedpipeandcallsCOMfunctionIWebBrowser2→Navigate()toredi-rectabrowserwindoworatabtoawebsite.Thecontrollerregulatestheoutputchannelsbypermit-tingordenyingrelevantsystemcalls.Italsocleansthesharedresourceswheneverinputfocusmovesawayfromasensitivewindows:speciﬁcallyitpurgesclipboardusingthesystemcallNtUserEmptyClipboard,andthekeysta-tusofkeyboardthroughNtUserGetAsyncKeyState.Inaddition,thecontrollercontrolsWindowsmessagetrafﬁcusingtheframeworkdescribedinSection3.4.Toimplementthisframework,weusedthekerneldrivertoblockthesystemcallforinstallingahookCATEGORYSYSTEMCALLFilesystemNtOpenFile,NtCreateFile,NtWriteFile,NtCreateSection,NtClose,SharedmemoryNtUserGetClipboardData,NtUserSetClipboardData,NtReadVirtualMemory,NtWriteVirtualMemoryMessagesNtUserPostMessage,NtUserPostThreadMessageNamedPipeNtCreateNamedPipeFile,NtCloseKeyboardinputsNtUserGetKeyboardState,NtUserGetKeyState,NtUserGetAsyncKeyStateMessageHooksNtUserSetWindowsHookEx,NtUserUnhookWindowsHookEx,NtUserCallNextHookExNetworkingNtDeviceIoControlFile1KerneldriverNtLoadDriverRegistrykeysNtRenameKey,NtReplaceKey,NtRestoreKey,SetInformationKey,NtSetValueKey,NtDeleteValueKeyProcess,threadNtTerminateProcess,NtTerminateThreadWindowsNtUserCreateWindowEx,NtUserDestroyWindowEx,NtUserRedrawWindowScreenNtGDIStretchBlt,NtGDIBitBltTable2.Systemcallshookedinthekerneldriver.1InWindowsXP,allnetworkAPIcalls(e.g.,send,recv,sendto)usethedevicetypeFILEDEVICENETWORKtocommunicatewiththeTCP/IPstackinthekernelland.TheparametersofNtDeviceIoControlFilecanbeparsedtogetnetworkinginformationsuchasIPaddresses,portnumbersandsocketactions.(NtUserSetWindowsHookEx)fromanuntrustedpro-cessandsendarequesttoatrusteduser-landprocesstoinstallaproxyhook.Thetrustedprocessfurtheraskshookhost,whichisdeemeduntrusted,toloadtheorig-inalDLL.Thesetwoprocessescommunicatewitheachotherthroughnamedﬁle-mappingmechanism.Thekerneldriveralsoblockstheuntrustedhook’ssystemcallssuchasNtUserCallNextHookExwhichareusedtotransfermessageswithinahookchain.Theintegrityprotectorwascompletelyimplementedinthekerneldriver.ItcontrolsthesystemcallsinTable2toenforceintegritycontroldescribedinSection3.5.5EvaluationInthissection,wereportourempiricalevaluationsofPRECIPusingourprototype.Ourpurposeistounderstandthreemajorissuesofourtechnique:(1)theaccuracyofthedependencyrulesusedinourprototype,(2)theeffective-nessofourpolicymodelincontainingvarioustypesofspy-ware,and(3)theperformanceoverheadsofourimplemen-tation.5.1DependencyrulesTheaccuracyofdependencyrulesisimportanttotheef-ﬁcacyofPRECIP.Ourprototypesystemadoptstworules,oneforediting/viewingapplicationsandtheotherforwebbrowsers.Thesecondruleisdesignedformonitoringapro-cessthatworksentirelyonthesensitiveinputs.Thisallowsustotraceallitsoutputs,astheBLPmodeldoes,with-outcausingtoomanyfalsepositives.Bycomparison,theaccuracyoftheﬁrstruleraisesmoreconcern,asitisforidentifyingthesensitiveoutputsofaprocessworkingonbothsensitiveandpublicinputs.Therefore,wefocusedourattentionsontheeffectivenessoftheﬁrstruleintheexperi-ment.Ourﬁndingsaredescribedbelow.Wetested5commoneditingorviewingapplicationsun-derourprototype,usingRule1asthedefaultdependencyrule.TheseapplicationsincludeMicrosoftWord2003,PowerPoint2003,Excel2003,AdobeAcrobatReader8.0andMicrosoftNotepad.Theaccuracyoftherulewasevaluatedbyitsfalsepositivesthattakenon-sensitiveoutputsassensitiveones,andfalsenegativesthatmisssomesensitiveoutputs.Intheexperiment,wecommandedeachapplicationtoopentwoﬁles:onewassensitiveandtheotherwaspublic.Falsepositivesoftherulewerereportedoncetheoutputsoftheapplicationwerefoundtoberelatedtothepublicﬁlewhenthesensitivewin-dowwasintheforegroundreceivinginputs.Falsenegativeswereidentiﬁedoncewecapturedtheoutputsfromthesen-sitiveﬁlewhenthepublicwindowwasactive.MicrosoftWordalwaysmaintainsasingleprocesstoservealltheﬁlesbeingedited.Inourexperiment,wemonitoredandanalyzedalltheoutputsofthatprocess,includingmessagesandoperationstocreateandwritetopipesandtemporaryﬁles.Themessagetrafﬁcweob-servedwaswithintheprocess,betweenthreadsandinternalobjectssuchaswindows,andthereforewasnotofinter-esttous.Therewerethreepipesconnectingtheprocesswithlsassandsvchost.Sincewedidnottracetheseprograms,thesepipesmaypotentiallyconstituteasourceoffalsenegatives.Theprocessalsowrotetoanexistingﬁle(index.dat)andcreatedtemporaryﬁlesandseveral.LNKshortcutﬁles.Thisallhappenedwhentheprocessopenedtheﬁletobeedited,createditseditingwindowandputthewindowintheforeground.Ourtracercapturedtheseﬁlesandassociatedthemwiththeﬁlebeingeditedintheac-tivewindow.Wealsofoundthatallthetemporaryﬁlescre-atedwhenaneditingwindowwasintheforegroundwereautomaticallyremovedafterthatwindowwasclosed.Thisindicatesthattheseﬁleswereonlyrelatedtotheactivewin-dow,nottotheeditingwindowinthebackground.OtheroutputsfromWordwerepurelydrivenbyhumaninputs,suchas“save”and“cutandpaste”.Ourprototypesuccess-fullycapturedallthoseoutputsgeneratedbythesensitivewindow.LikeWord,PowerPoint,ExcelandAcrobatReaderallruninsingle-processmode.PowerPointandExcelcreated.LNKshortcutsforﬁleswhentheseﬁleswerejustopenedandtheirapplicationwindowswereactive.Theshortcutsrelatedtosensitiveﬁleswerecor-rectlyidentiﬁedbyourprototype.PowerPointandAcro-batReaderalsohadpipeswithlsass,whichcouldcausefalsenegatives.MostotheroutputsoftheseapplicationsweredirectlydrivenbythehumaninputsandwellmodeledbyRule1.Notepadgeneratedanewprocesstoserveaneditingwindow.Theprocessdidnotproduceanyoutputswhenitseditingwindowwasinthebackground.Thisal-lowedourprototypetocatchalltheoutputsrelatedtothesensitiveﬁle.Thisstudyisstillpreliminary:moreconclusiveresultsshouldcomeoutofevaluationofourimplementationun-derpracticalsettings.Forexample,wecandistributeittoanumberofworkcomputerstostudyitsfalseposi-tive/negativeratesduringday-to-dayoperations.Anotherpossibilityistoevaluatetheimplementationusingacom-prehensivetestsuitewhichautomaticallychecksmostoffunctionalityofanapplication9.Thesemeasureswilldeﬁ-nitelyhelpusbetterunderstandtheaccuracyofourdepen-dencyrule.Inaddition,welabeledtheﬁlesintheexper-imentmanually.FutureresearchwillstudytheaccuracyoftheautomaticclassiﬁcationtechniquesdescribedinSec-tion3.2.5.2EffectivenessWetestedthePRECIPmechanismagainst10strainsofspyware,includingkeyloggers,screengrabbersandﬁlestealers.TheresultsofthisstudyaresummarizedinTable3andelaboratedbelow.Keyloggers.Mostin-the-wildkeyloggersforWindowsusehookstointerceptkeystrokes.Speciﬁcally,theyneedtoloadaDLLintothemessage-handlingmechanismsoastoaccessthemessagestransportingkeystrokestoapplica-tionwindows.Inourexperiments,wetested3keyloggersofthistype:Spyware.KidLogger[50],HomeKeyLoggerv1.60[8]andRunHook[19].Spyware.KidLoggerisafa-mousspyware,whichhasbeenratedashighriskimpactbySymantec[50].Thisspywarehooksthemessagequeuesforbothkeyboard(WHKEYBOARD)andmouse(WHMOUSE),9Wearenotawareofanypublically-availabletestsuitethatcanbeusedforthispurpose.Thisisthemajorreasonthatpreventsusfromconductingamorecomprehensivetestoftherule.andmaintainsarecordforeveryapplication.HomeKey-Loggerhookstwotypesofmessages:WHGETMESSAGEandWHKEYBOARD.RunHookworksinasimilarfashionasthesetwokeyloggers,butonlyinterceptskeyboardmes-sages.Ourprototypeusesaproxytoregulatetheseun-trustedhooks’accesstomessagetrafﬁc.Thisturnedouttobeveryeffective:inourexperiment,weusedWordtoeditasensitiveﬁleandapublicﬁleinthepresenceofthesekeyloggers;fromtheirlogﬁles,weonlyfoundkeystrokerecordsforthepublicﬁle.Besideskeyboardhooking,thereareotherwaystologkeystrokes.PranayKanwardescribedakeyloggingtech-niqueusingGetAsyncKeyState[34].Athreadperiodi-callypollingthekeyboardwiththisfunctioncancapturethekeysjustbeingpressed.Kanwaralsoprovidedpartofthesourcecodeforthistechnique.AnotherhooklessapproachtakesadvantageoftheWin32callAttachThreadInputtosynchronizetheinputprocessingofspywarewiththatofthethreadhostingtheactivewindow,andthencallsGetKeyboardStatetoacquirethewindow’skeystrokeinputs[27].Boththesetechniquesrequiremakingsystemcalls(NtUserGetAysncKeyState,NtUserGetKeyState,NtUserGetKeyboardState)toreadfromkeyboard,whichcanbeblockedwhenkey-boardissensitive.Inourexperiment,weimplementedbothapproachesandranthemagainstourprototype.Althoughtheycouldsuccessfullyrecordkeyswhenwewereeditingapublicﬁle,noneofthemwerefoundtobeabletodothatwheninputfocuswasonasensitivewindow.Screengrabbers.Wetestedourprototypeagainst3realscreengrabbers:GhostlyEyev1.0[7],AnyCapturev3.12[4]andOleanSoftHiddenRecorderv1.9[12].Allofthemarecapableofperiodicallydumpingtheimagefromthescreentoalogﬁle.OleanSoftevendisguisestheﬁleasaDLL.Tocapturethescreen,thesescreengrabbersmadesystemcallsNtGDIStretchBltandNtGDIBitBlt,whichwasinterceptedbythekerneldriver.Thecontrolpoliciesofourprototypeforbidanuntrustedprocesstoreadfromscreenwheneverasensitivewindowisbothvisibleandnotminimized,evenwhenthewindowisnotactive.Intheexperiment,weeditedasensitiveﬁleandthencloseditinthepresenceofthespyware.Fromtheimagesexportedbythesegrabbers,wefoundthatnoneofthemcontainedtheeditingwindowforthesensitiveﬁle.Filestealers.Wealsoevaluatedourtechniqueusing2ﬁlestealingtools:Backdoor.Sub7[15]andCerberusFTPServerv2.45[5].Sub7isafamousbackdoorwhichcon-tainsaserverandaclient.Theserverisrunningonthevictim’ssystemandtheclientprovidesagraphicuserinter-faceforcontrollingtheserver.Throughtheclient,onecanrunakeyloggeronaninfectedsystemordirectlydownloadﬁlesfromthesystem.ThekeyloggerusedbySub7isbasedonkeyboardhooking,whichcanbeeasilycontainedbyourNameTypeControlActions1KidLogger[50]KeyLoggerbypassthehookhost.2HomeKeyLogger[8]KeyLoggerbypassthehookhost.3RunHook[19]KeyLoggerbypassthehookhost.4Synthesized-1[27]KeyLoggerblocktwosystemcalls:NtUserGetKeyboardStateandNtUserGetKeyState.5Synthesized-2[34]KeyLoggerblockonesystemcall:NtUserGetAsyncKeyState.6GhostlyEye[7]ScreenGrabberblockonesystemcall:NtGDIStretchBlt7AnyCapture[4]ScreenGrabberblocktwosystemcalls:NtGDIStretchBltandNtGDIBitBlt8HiddenRecorder[12]ScreenGrabberblockonesystemcall:NtGDIBitBlt.9Sub7[15]FileStealeruntrustedprocessdoesnotallowtoopensensitiveﬁles.10Cerberus[5]Lightweightftpduntrustedprocessdoesnotallowtoopensensitiveﬁles.Table3.EffectivenessEvaluationofourPRECIPPrototype.BenchmarkBaselinewithPRECIPOverheadOfﬁceXPSP2784s838s6.89%Photoshop7.0.1647s675s4.33%Mozilla1.41122s1265s12.75%Table4.OverheadoftheKernelDriver.prototype.Therefore,wearemoreinterestedinitsﬁlesteal-ingfunctionality.CerberusisessentiallyalightweightFTPserverwhichallowsanFTPclienttoaccesstheﬁlesystemofthehostitisrunningon.ChoosingCerberusismotivatedbytheobservationthatonecanusesuchalightweightservertostealﬁlesremotely.Inourexperiment,weinstalledbothoftheseprogramsinasystemprotectedbyourprototypeandrantheirremoteclientstodownloadﬁlesfromthesys-tem.Inbothcases,wesuccessfullydownloadedﬁleswithlowsensitivelevelsbutcouldnottouchsensitiveﬁles.ThisisbecauseourkerneldriverpreventsuntrustedprocessesfromreadingsensitiveﬁlesthroughsystemcallssuchasNtOpenFileandNtCreateFile.5.3PerformanceWeevaluatedtheperformanceofthekerneldriverandthehookingmanagementmechanism,twomajorcompo-nentsofourprototype.TheexperimentswereconductedinaVMwareworkstationhostedbyadesktopwithIntelPentium2.53GHzCPU.Thevirtualmachinehas780MBmemoryand16GBdiskspaceatitsdisposal.ItsoperatingsystemisWindowsXPwithServicePack2.Theexperi-mentalresultsaredescribedbelow.Performanceofthekerneldriver.WeusedWorldBench5.0[13]tomeasuretheperformanceimpactsofourker-neldriver.WorldBenchisanindustry-standardbenchmark-ingapplicationwhichhasbeenwidelyusedtomeasuretheperformanceofpersonalcomputers.Itautomaticallyexe-cutesseveralcommonapplicationsusingartiﬁcialtaskstodetermineasystem’sperformance.Inourexperiment,weranWorldBenchinthevirtualmachinetogetbaselineper-formance,andthenranitagainafterinstallingthekerneldriver.Table4presentstheresults,whichareaveragedoverthreetests.Fromthetable,wecanseetheoverheadoftheker-neldriverissmall,alwaysbelow13%.Inparticular,itonlybrought6.89%performanceimpacttoMicrosoftof-ﬁce,whichitismeanttoprotect.Performanceofthehookingmanagementmechanism.Legitimatefreewarecanalsoinstallahooktothemessage-handlingmechanismtoprovideservicessuchashotkeys.Theperformanceofsuchahookwillbeaffectedbyourhookingmanagementmechanism.Inaddition,ahookslowsdowntheperformanceofthewholesystem.Aquestioniswhetherourframeworkmakesthesituationmuchworse.Tounderstandhowserioustheproblemis,weempiricallystudiedtheperformanceofourmechanismandreportourﬁndingshere.Intheexperiment,weﬁrstinstalledatesthook(theDLLofKidLogger),ranaprogramcalledkeystrokegeneratortoproducekeystrokes,anddeliveredthemtoanotherprogramcalledreceiver.Keystrokegeneratorandreceivercoordi-natedtomeasurethedelaycausedbydeliveringkeystrokemessages,whichwasusedasabaseline.Then,weenabledourprototypethathookedaproxyDLLtothemessage-handlingmechanismandemployedhookhosttoloadthetesthook.Runningthekeystrokegeneratoragain,wemea-suredthedelayandcompareditwiththebaseline.Intheexperiment,1000keystrokesweregeneratedanddeliveredinbothsettings.Theexperimentresultsaretheaveragede-laysfortransitingthesekeystrokes.Thebaselineis691.015microsecondsandtheaveragedelaycausedbyourproto-typeis784.809microseconds.Thisgivesaperformanceoverheadof13.57%.6DiscussionAlimitationofthePRECIPmodelisthatithasonlytwosensitivitylevelsanddoesnotconsidercompartmentaliza-tionofinformation.Theseissuesareleftoutinthecurrentdesignforthesimplicityofthemodel.Inaddition,itisalsodesiredtohaveapolicylanguagethattranslatesthehigh-levelpoliciesspeciﬁedbyPRECIPtothepoliciesenforce-ablebyageneralpolicyenforcerforanoperatingsystem.Theselimitationsareexpectedtobeaddressedinourfutureresearch.Thedependencyruleswepresentinthepaperareem-pirical.Whenapplyingthemtoarealapplication,itislikelythattheymisssomesensitiveoutputs.Theprob-lemisaggravatedbythefactthateventheapplicationsfromarenownedsoftwarevendormaycontainhiddenchan-nels.AfamousexampleisSonyBMGcopyprotectionscandal[17].However,inmostcases,legitimateapplica-tionsthemselvesdonotstealtheuser’sconﬁdentialdataandthereforefailingtomonitorsomeoftheiroutputswillnotautomaticallycauseinformationleakage,thoughthisgivesaknowledgeableadversarychancestodoso10.Ontheotherhand,wecanalwayspatchourdependencyrulestoﬁxsuchholesassoonasweknowthem.Essentially,ourintentiontoretroﬁtexistingsystemsdecidesthatwehavetostepbackfromtheambitionofachievingperfectsecurity.Pragmati-cally,wejustwanttoraisethebarthroughcontrollingthemajorchannelstheadversaryusestocompromisesystemconﬁdentiality.Theproposeddependencyrulesarealsolimitedintheirapplicablescopewhichonlyincludesediting/viewingap-plicationsandwebbrowsers.Anopenresearchquestionishowtoﬁndefﬁcient,accurateandgeneralpoliciesforothertypesofapplications.Ingeneral,tracingamultitaskedpro-cessishardbecauseofitsnondeterministicbehaviors.Wearedevelopingthetechniqueforautomaticallyanalyzingacommodityapplicationofﬂinetogenerateitsdependencyrulethatcanbeenforcedonlinethroughdynamicinstru-mentation.Thecontrollerweimplementedregulatessystemcallsandthemessage-handlingmechanism.Thereareotherchannelsthroughwhichsensitiveinformationcanbeleakedout.AnexampleisthechannelbetweenanapplicationanditsDLLs.Tocontrolsuchachannel,wemayseparateanuntrustedDLLfromitshostapplicationanduseaproxytomanagetheinformationﬂowsbetweenthem.Thecontrollerisalsolimitedbyitscapabilitytocleansharedresources.Ourprototypeonlycleansclipboardandkeyboard,whichisfarfromsufﬁcient:previousresearchshowsthatsensitivedatacouldbescatteredintheoperatingsystem,beingleftintheplacessuchasstackandheap[24].Therefore,anim-portantquestionishowtothoroughlycleanaprocessonceitﬁnishesataskinvolvingsensitivedata.Anexistingso-lutiontothisproblemrequiresmodifyingOSsourcecode,whichmaynotbesuitableforretroﬁttingacommercialsys-tem[25].Weplantoseekothersolutionsinthefollow-upresearch.AlthoughweimplementedourprototypeunderWin-dowsXP,ourmodelcanalsobeappliedtoLinuxusingthetechniquessuchasLSMhooking[55].Actually,identifyingdependencyrulesforLinuxapplicationsshouldbeeasier,as10Forexample,SonyBMG’sextendedcopyprotection(XCP)doesnotstealtheuser’spassword.However,itcontainssecurityholeswhichmightbeexploitedbyothermalware[17].manyofthemarenotmultithreaded.WindowsXPforx64-basedsystemsandWindowsVistaincludeamechanismforkernelpatchprotectionthatdisallowssystem-callintercep-tionthroughunauthorizedmodiﬁcationofkernelresourcessuchashookingsystem-calldispatchtable.However,Mi-crosoftdoesprovidealternativestokernelpatching,whichallowathird-partyprogramtomonitorandcontrolnetworktrafﬁc,operationsonﬁlesystemsandregistryentries,andothers[16].ThiscouldmakeitpossibletoenforcePRECIPpoliciesinuserland.Furtherinvestigationofthisproblemisleftasourfutureresearch.ThePRECIPmechanismdoesnotinterferewiththeop-erationsofothermalwaredefenseprogramssuchasSyman-tecAntiVirus.Wecanlabeltheseprogramsastrustedandallowthemtodirectlyhookthemessage-handlingmecha-nismorloadthekerneldriver,whicharenecessaryforac-complishingtheirmissions.7RelatedWorkOneoftheearliestsecuritypolicymodelaimingatpre-ventingsensitiveinformationtoleakistheBell-LaPadulamodel[21].TheBLPmodelsuffersfromseverallimita-tions.First,itisunsuitableformodelingamultitaskedprocesswhichworksconcurrentlyonpublicandsensitiveinformation.Applicationofthemodeltoapracticalsys-temusuallyrequiresdeclaringalargenumberofsubjectstobetrusted.ThisdoesnotworkwellinamodernoperatingsystemsuchasWindowsinwhichalmostalltheprogramsaremultitasked.Second,theBLPmodeldoesnotdescribesharedresources,inparticular,theuserinputobjectswhichareessentialtotheconﬁdentialityassuranceofamodernOS.ThePRECIPmodelisdesignedtosolvetheseprob-lems,towardsthegoalofprovidingpracticalconﬁdentialityprotectionforcommercialsystems.Thereisalargebodyofworkonpreciselydeﬁningin-formationﬂowproperties.Oneprominentexampleisnon-interferencepropertywhichrequiresthatsecretinformationnotaffectpubliclyobservablebehaviorofasystem[30].Asystemwiththispropertydoesnotleakoutanysensi-tiveinformationthroughevencovertchannels.However,suchapropertyisshowntobetoorestrictedformanyprac-ticalsystems[49,38].Language-basedinformation-ﬂowsecurity[47]seekstodevelopprogramming-languagetech-niquesforspecifyingandenforcinginformationﬂowpoli-cies.Thesetechniquesaremeanttobeusedforwritingnewprograms,whilePRECIPisdesignedforretroﬁttingtheexistingapplicationsandsystemswithoutaccesstotheirsourcecode.PRECIPtakesthedeﬁnitionofdependencyre-lationasaninputtothemodel,andfocusesontracinginfor-mationﬂowsusingthatnotion.Thisgivesitsufﬁcientﬂex-ibilitytobeappliedtomanypracticalsystems.Language-basedinformation-ﬂowtechniquescanbecomplementarytoPRECIPinthattheycanbeusedtomorepreciselyde-terminedependencyrelationwithinoneprogram.Recently,efforthasbeenmadetodynamicallytracetheinformationﬂowinanexecutableusingbinaryinstrumentation[51,46]orvirtualmachines[29,43].Theseapproachesaregener-allytooslowtouseonline.Actually,someofthemarede-velopedforofﬂineanalysisofvulnerableprogramsormal-ware[29,43].Someprototypeoperatingsystemshavebuilt-ininformation-ﬂowsecurity.Forexample,Asbestos[28]providesakernel-enforcedlabelingmechanism;IX[42]modiﬁesUNIXkerneltoimplementmultilevelsecurity.PRECIPdiffersfromtheminitsobjectivetoretroﬁtexistingsystems.Inaddition,PRECIPalsodealswithsomepracticalissuesunaddressedinthesesystems.Aprominentexampleisthepolicytoidentifythesensitivitylevelofauserinputobjectsuchaskeyboard.Sandboxingtechniqueshavealsobeenappliedtoachievemultilevelsecurity.Forexample,WindowBox[20]virtu-allydividesaWindowsworkstationintomultipledesktops,eachofwhichissealedofffromtheothers.Anotherex-ampleistheNetTopproject[11]whichusesVMwareformultilevelsecurity.Theseapproacheshavetwomajorlim-itations.First,theytendtointroduceheavyperformanceoverheads,asaresultofusingvirtualmachinesandin-stallingthesamesoftwarewithindifferentcompartments.Second,theyrequireuserstocorrectlypartitiontheiractivi-tiestodifferentsecuritylevels,whereasmanyactivitiesmayspanmultiplelevels,e.g.,readingandhandlingemails.Bycomparison,PRECIPincurssmalloverheadsandiscapableofallowingtheuserstoworkinoneuniﬁedenvironment:forexample,ourmodelallowsonesubjecttohandledatawithdifferentsensitivitylevels.Wrappersisatoolkitthatwrapscommoditysoftwareatthesystem-callleveltoenhancethesoftware’ssecurityandreliability[36].Itcanserveasaplatformforpartiallyen-forcingthenewpolicymodelweproposehere,inparticu-larwhensensitiveinformationﬂowsareobservablethroughsystemcalls.However,thePRECIPmodelmaynotbefullyenforceableusingWrappers,assomeinformationﬂowsdonotgothroughsystemcalls:anexampleisthemessage-handlingmechanismwhichallowstheOSkerneltodirectlyinvokeauser-deﬁnedcallbackfunction.Actually,inourresearch,wedevelopedourownkernelmoduletointer-ceptsystemcallsbecausethecurrentprototypeofWrappersdoesnotsupportWindowsXP[36,45].Flumeisamodelfordecentralizedinformationﬂowcon-trol,whichworksonthegranularityofprocesses[37].Themodelcanbeusedtoprotectbothintegrityandconﬁdential-ity,andthereforeismoregeneralthanPRECIP.However,itdoesnotdescribeuserinputobjectsandmultithreadedsubjects,twolong-standingproblemsforprocess-levelin-formationﬂowmodels.Incontrast,PRECIPisdesignedtoaddresstheseissues.AnotherdifferenceisthatFlumere-quiresmodifyingthesourcecodeofoperatingsystemsandapplications,whilePRECIPdoesnot.Manyspywaredetectiontechniqueshavebeenproposedrecently.ExamplesincludePanorama[57],Siren[23],NetSpy[52]andothers[29].Differentfromtheseap-proaches,thefocusofPRECIPiscontainment,whichof-fersanotherlayerofconﬁdentialityprotectionevenafterspywareevadesdetection.Existingcontainmenttechniquesarelimitedtoprotectingcertaintypeofinformationsuchaspasswords.BumpintheEther[41]offersamechanismtobypasscommonavenuesofattacksonkeystrokeinputsthroughatrustedtunnelimplementedusingamobilede-vice.SpyBlock[32]evadesthesurveillanceofthekey-loggersinsideavirtualmachinebydirectlyinjectingusers’passwordsintothenetworktrafﬁcinterceptedbythehost.Theseapproachesareineffectiveagainstothertypesofspy-waresuchasscreengrabbersandﬁlestealers.Inaddi-tion,theyneedeitheradditionalhardware(mobiledevice)orheavyweightsoftware(avirtualmachine).PRECIPisdesignedtooffergeneralprotectionagainstmultipletypesofspywareandhasnospecialrequirementsforhardwareandsoftwaresettings.8ConclusionsandFutureWorkInthispaper,weproposePRECIP,anewconﬁdentialitymodel,asaﬁrststeptowardspracticalandretroﬁttablecon-ﬁdentialinformationprotection.Thismodelisdesignedtobeusedinpracticalsystems,offeringanefﬁcientonlinepro-tectionagainstspywaresurveillancewithouttouchingthesourcecodeofthesesystems.Tothisend,PRECIPad-dressesseveralimportantpracticalissueswhichhavenotbeenmodeledinpreviousresearch,includingmodelsforhumaninputobjects,sharedobjectsandmultitaskedsub-jects.WeappliedthePRECIPmodeltoWindowsXPtoprotectthecommercialapplicationsforeditingorviewingsensitivedocumentsandbrowsingsensitivewebsites,andevaluateditsefﬁcacyusingourprototype.Futureresearchincludesextendingthemodeltodescribethesensitivitylev-elsinlatticeanddevelopinggeneral,accurateandefﬁcienttracingtechniques.9AcknowledgementsTheauthorsthankXuxianJiangandanonymousreview-ersfortheircommentsonthedraftofthepaper.ThisworkwassupportedinpartbytheNationalScienceFoundationtheCyberTrustprogramunderGrantNo.CNS-0716292.NinghuiLiwassupportedbyNSFCNS-0448204.References[1]StateofSpywareQ22006,ConsumerReport.http://www.webroot.com/resources/stateofspyware/excerpt.html.[2]HooksandDLLs.http://www.flounder.com/hooks.htm,asofDecember2007.[3]Aboutkeyboardinput,asofMay2007.http://msdn2.microsoft.com/en-us/library/ms646267.aspx.[4]Anycapturev3.12,asofMay2007.http://www.any-capture.com/.[5]Cerberusftpserverv2.45,asofMay2007.http://www.cerberusftp.com/.[6]Descriptionofofﬁcefeatures,asofMay2007.http://support.microsoft.com/kb/822924.[7]Ghostlyeye-thesurveillancescreengrabberv1.0,asofMay2007.http://www.reg.net/product.asp?ID=14992.[8]Homekeyloggerv1.60,asofMay2007.http://www.cs.stthomas.edu/faculty/resmith/r/mls/index.html.[9]Howntfsworks,asofMay2007.http://technet2.microsoft.com/windowsserver/en/library/8cc5891d-bf8e-4164-862d-dac5418c59481033.mspx?mfr=true.[10]Importantaspectsofpasswordandencryptionprotection,asofMay2007.http://office.microsoft.com/en-us/ork2003/HA011403111033.aspx.[11]Anetworkonyourdesktop,asofMay2007.http://www.vmware.com/pdf/TechTrendNotes.pdf.[12]Oleansofthiddenrecorderv1.9,asofMay2007.http://www.oleansoft.com/hiddenrecorder.htm.[13]Pcworldworldbench5.0,asofMay2007.http://www.pcworld.com/article/id,116888-page,1/article.html.[14]Ram,virtualmemory,pageﬁleandallthatstuff,asofMay2007.http://support.microsoft.com/kb/555223.[15]Subseven2.2.0,asofMay2007.http://hackpr.net/˜sub7/main.shtml.[16]AnIntroductiontoKernelPatchProtection.http://blogs.msdn.com/windowsvistasecurity/archive/2006/08/11/695993.aspx,asofNovem-ber2007.[17]2005SonyBMGCDcopyprotectionscandal.http://en.wikipedia.org/wiki/2005_Sony_BMG_CD_copy_protection_scandal,asofSeptem-ber2007.[18]W.Ames.Understandingspyware:Riskandresponse.ITProfessional,6(5):25–29,2004.[19]Arkon.Tutorial-keyboardhook,29-May2003.http://www.ragestorm.net/tutorial?id=10.[20]D.BalfanzandD.Simon.Windowbox:Asimplesecu-ritymodelfortheconnecteddesktop.InProceedingsof4thUSENIXWindowsSystemsSymposium,August2000.[21]D.E.BellandL.J.LaPadula.Securecomputersys-tems:Uniﬁedexpositionandmulticsinterpretation.MTR-2997,(ESD-TR-75-306),availableasNTISAD-A023588,MITRECorporation,1976.[22]S.Bhatkar,D.C.DuVarney,andR.Sekar.Addressobfus-cation:Anefﬁcientapproachtocombatabroadrangeofmemoryerrorexploits.InProceedingsofUSENIXSecuritySymposium2003,August2003.[23]K.Borders,X.Zhao,andA.Prakash.Siren:Catchingeva-sivemalware(shortpaper).InSP’06:Proceedingsofthe2006IEEESymposiumonSecurityandPrivacy(S&P’06),pages78–85,2006.[24]J.Chow,B.Pfaff,T.Garﬁnkel,andM.Rosenblum.Under-standingdatalifetimeviawholesystemsimulation.InPro-ceedingsofthe13thUSENIXSecuritySymposium,August2004.[25]J.Chow,B.Pfaff,T.Garﬁnkel,andM.Rosenblum.Shred-dingyourgarbage:Reducingdatalifetimethroughsecuredeallocation.InProceedingsofthe14thUSENIXSecuritySymposium,August2005.[26]C.Cowan,C.Pu,D.Maier,J.Walpole,P.Bakke,S.Beat-tie,A.Grier,P.Wagle,Q.Zhang,andH.Hinton.Stack-Guard:Automaticadaptivedetectionandpreventionofbuffer-overﬂowattacks.InProceedingsofthe7thUsenixSecuritySymposium,pages63–78,Jan1998.[27]dimport.Howtowriteahooklesskeyloggerforwindows,21-June2003.http://www.osix.net/modules/article/index.php?id=162.[28]P.Efstathopoulos,M.Krohn,S.VanDeBogart,C.Frey,D.Ziegler,E.Kohler,D.Mazieres,F.Kaashoek,andR.Morris.Labelsandeventprocessesintheasbestosoperat-ingsystem.InSOSP’05:ProceedingsofthetwentiethACMsymposiumonOperatingsystemsprinciples,pages17–30,2005.[29]M.Egele,C.Kruegel,E.Kirda,H.Yin,andD.Song.Dy-namicspywareanalysis.InToappearinthe2007USENIXAnnualTechnicalConference,June17-222007.[30]J.GoguenandJ.Meseguer.Securitypoliciesandsecuritymodels.InProceedingsofthe1982IEEESymposiumonSecurityandPrivacy,pages11–20.IEEEComputerSocietyPress,Apr.1982.[31]F.Hsu,H.Chen,T.Ristenpart,J.Li,andZ.Su.Backtothefuture:Aframeworkforautomaticmalwareremovalandsystemrepair.InACSAC’06:Proceedingsofthe22ndAnnualComputerSecurityApplicationsConferenceonAnnualComputerSecurityApplicationsConference,pages257–268,2006.[32]C.Jackson,D.Boneh,andJ.C.Mitchell.Strongerpass-wordauthenticationusingvirtualmachines.Insubmission,StanfordUniversity,2006.[33]A.K.JonesandR.J.Lipton.Theenforcementofsecuritypoliciesforcomputation.InSOSP,pages197–206,1975.[34]P.Kanwar.Theartofkeylogging-implementationanddetectiononwindowsplatform.http://warl0ck.metaeye.org/arts/art_keylog.txt.[35]E.Kirda,C.Kruegel,G.Banks,G.Vigna,andR.Kemmerer.Behavior-basedspywaredetection.InProceedingsof15thUSENIXSecuritySymposium,August2006.[36]C.Ko,T.Fraser,L.Badger,andD.Kilpatrick.Detect-ingandcounteringsystemintrusionsusingsoftwarewrap-pers.InSSYM’00:Proceedingsofthe9thconferenceonUSENIXSecuritySymposium,pages11–11,Berkeley,CA,USA,2000.USENIXAssociation.[37]M.N.Krohn,A.Yip,M.Brodsky,N.Cliffer,M.F.Kaashoek,E.Kohler,andR.Morris.Informationﬂowcon-trolforstandardosabstractions.InSOSP,pages321–334,2007.[38]C.E.Landwehr.Formalmodelsforcomputersecurity.ACMComput.Surv.,13(3):247–278,1981.[39]L.J.LaPadulaandD.E.Bell.Securecomputersystems:Amathematicalmodel.JournalofComputerSecurity,4:239–263,1996.[40]Z.Li,X.Wang,andJ.Y.Choi.Spyshield:Preservingpri-vacyfromspyadd-ons.InRAID,pages296–316,2007.[41]J.M.McCune,A.Perrig,andM.K.Reiter.Bumpintheether:Aframeworkforsecuringsensitiveuserinput.InProceedingsofthe2006USENIXAnnualTechnicalConfer-ence,pages185–198,June2006.[42]M.D.McIlroyandJ.A.Reeds.MultilevelsecurityintheUNIXtradition.Software-PracticeandExperience,22(8):673–694,1992.[43]A.Moser,C.Kruegel,andE.Kirda.Exploringmultipleexecutionpathsformalwareanalysis.InIEEESymposiumonSecurityandPrivacy,May2007.[44]J.NewsomeandD.X.Song.Dynamictaintanalysisforautomaticdetection,analysis,andsignaturegenerationofexploitsoncommoditysoftware.InNDSS,2005.[45]N.Provos.Systrace-InteractivePolicyGenerationforSystemCalls.http://www.citi.umich.edu/u/provos/systrace/,asofSeptember2007.[46]F.Qin,C.Wang,Z.Li,H.-S.Kim,Y.Zhou,andY.Wu.Lift:Alow-overheadpracticalinformationﬂowtrackingsystemfordetectingsecurityattacks.InMICRO,pages135–148,2006.[47]A.SabelfeldandA.C.Myers.Language-basedinformation-ﬂowsecurity.IEEEJournalonSelectedAreasinCommuni-cations,21(1):5–19,2003.[48]W.Shi,H.-H.Lee,G.Gu,L.Falk,T.Mudge,andM.Ghosh.InfoShield:Asecurityarchitectureforprotectinginforma-tionusageinmemory.InProceedingsofthe12thInter-nationalSymposiumonHigh-PerformanceComputerArchi-tecture(HPCA’06),March2006.[49]R.Smith.Introductiontomultilevelsecurity,asofMay2007.http://www.kmint21.com/keylogger/.[50]S.K.Speciﬁcations.http://www.symantec.com/security_response/writeup.jsp?docid=2006-020913-4035-99,asofNov.2006.[51]N.Vachharajani,M.J.Bridges,J.Chang,R.Rangan,G.Ot-toni,J.A.Blome,G.A.Reis,M.Vachharajani,andD.I.August.RIFLE:Anarchitecturalframeworkforuser-centricinformation-ﬂowsecurity.InMICRO,pages243–254.IEEEComputerSociety,2004.[52]H.Wang,S.Jha,andV.Ganapathy.NetSpy:AutomaticGenerationofSpywareSignaturesforNIDS.InProceedingsofACSAC,2006.[53]X.Wang,Z.Li,J.Xu,M.K.Reiter,C.Kil,andJ.Y.Choi.Packetvaccine:black-boxexploitdetectionandsignaturegeneration.InACMConferenceonComputerandCommu-nicationsSecurity,pages37–46,2006.[54]Y.-M.Wang,R.Roussev,C.Verbowski,A.Johnson,M.-W.Wu,Y.Huang,andS.-Y.Kuo.Gatekeeper:MonitoringAuto-StartExtensibilityPoints(ASEPs)forSpywareMan-agement.InUSENIXLISA2004,2004.[55]C.Wright,C.Cowan,S.Smalley,J.Morris,andG.Kroah-Hartman.Linuxsecuritymodules:Generalsecuritysupportforthelinuxkernel.InUSENIXSecuritySymposium,pages17–31,2002.[56]W.Xu,S.Bhatkar,andR.Sekar.Taint-enhancedpolicyen-forcement:Apracticalapproachtodefeatawiderangeofattacks.InProceedingsofthe15thUSENIXSecuritySym-posium,Vancouver,BC,Canada,August2006.[57]H.Yin,D.Song,E.Manuel,C.Kruegel,andE.Kirda.Panorama:Capturingsystem-wideinformationﬂowformalwaredetectionandanalysis.InProceedingsofthe14thACMConferencesonComputerandCommunicationSecu-rity(CCS’07),October2007.[58]S.Zdancewic.Challengesforinformation-ﬂowsecu-rity.InProceedingsofthe1stInternationalWorkshopontheProgrammingLanguageInterferenceandDependence(PLID’04),2004.