Doorbell map:
    00000000,00000000,00000000,00000000,00000000,00000000,00000000,0000000
1
Doorbell next cacheline: 0x40
GuC execbuf client @ ffff8a62e1d69cc0:
    Priority 2, GuC stage index: 0, PD offset 0x800
    Doorbell id 0, offset: 0x0, cookie 0x3ccf
    WQ size 8192, offset: 0x1000, tail 3312
    Work queue full: 0
    Submissions: 15538 rcs0
    Submissions: 29 bcs0
    Submissions: 0 vcs0
    Submissions: 0 vecs0
    Total: 15567
清单11-6的起始部分是门铃信息，当主机端的软件写这个区域时，
会触发GuC中断，通知GuC有新的任务。接下来便是“执行链表”客户，
用于接收执行链表格式的任务，便于与老的格式兼容。优先级那一行的
PD代表进程描述（Process Descriptor），后面的0x800表示描述信息在
第一个内存页的后半部分，前半部分是门铃区。以WQ开始的那一行是
工作队列信息，其偏移量为0x1000，即紧邻第一个内存页。清单最后1
行是已经提交任务的总数，前面4行是向每一种执行引擎提交的数量。
11.7 媒体流水线
大约从20世纪90年代开始，数字多媒体技术日益流行。今天，这个
领域更加繁荣，各种音视频应用难以计数。数字多媒体技术的核心任务
是处理音频视频等流媒体，在GPU中，这部分功能统称为媒体
（media）。媒体处理是现代GPU的四大应用之一，也是GEN GPU中比
较有特色的功能。从历史角度看，在G965（Gen4）引入EU时，当初最
重要的应用之一就是媒体处理，当时还很少使用GPU来做通用计算。出
于这个原因，直到今天，Gen的GPGPU编程接口也与媒体功能有很多交
叉和联系，比如在PRM中，媒体流水线和GPGPU流水线是在同一章介
绍的，章名叫“媒体GPGPU流水线”（Media GPGPU Pipeline），其内容
对理解Gen的GPGPU使用非常重要。或者说，即使你对编解码根本不感
兴趣，只是想用GEN的GPGPU功能，理解媒体流水线的背景也是非常
必要的。因此，将按历史顺序，本节先介绍GEN系列GPU的视频处理部
分，然后从下一节开始介绍GPGPU功能，我们仍从经典的G965讲起。
11.7.1 G965的媒体流水线
图11-10是G965（Gen4）媒体流水线（media pipeline）的逻辑框
图。这条流水线包含两个固定功能的硬件单元，一个叫视频前端
（Video Front End，VFE），另一个叫线程衍生器（Thread Spawner，
TS）。VFE从命令流处理器接收命令，把要处理的数据写入名叫
URB（Unified Return Buffer）的缓冲区中。TS根据命令要求计算所需线
程的数量并准备好参数，然后送给GEN的线程分发器，后者把线程分配
到EU上执行。
图11-10 G965（Gen4）中的媒体流水线
值得说明的是，G965中的媒体流水线不是完整的硬件流水线。虽
然VFE中包含了一些专门用于视频处理的功能，比如变长解码
（Variable Length Decode，VLD）、逆向扫描（inverse scan）等，但是
要实现完整的视频编解码，还缺少一些功能。这些功能可以通过算核函
数实现，可以在EU上执行，也可以在CPU上实现。G965 PRM卷2比较
详细地介绍了上述两种方案的关键步骤。图11-11就来自该卷，描述的
是用前一种方式来解码MPEG-2视频流。
图11-11 多方联合解码MPEG-2视频流
在图11-11中，左侧是CPU上的逻辑。视频播放器等宿主软件（host
software）读取MPEG数据流，解析出不同类型的数据块，然后通过驱
动程序和图形软件栈把解码任务和参数以命令的形式提交给GPU的命令
流处理器，后者再送给VFE。在VFE中，先完成变长解码和逆向扫描两
种操作，再通过线程衍生器（TS）和线程分发器（TD）（图中没有画
出TS和TD）送给EU去执行逆离散余弦变换（IDCT）和运动补偿
（Motion Compensation）等操作，最终解码好的数据通过数据端口写到
图形缓冲区中。
11.7.2 MFX引擎
2012年推出的Ivy Bridge（Gen6）对视频功能做了很大增强，对内
部设计也做了较大重构，引入了新的多格式编解码器（Multi-Format
Codec）引擎，简称MFX。MFX是多格式编码器（MFC）引擎和多格式
解码器（MFD）引擎的统称。
MFX中包含了多个用于视频处理的功能块（function block），有些
是专门用于编码的，比如前向变换和量化（Forward Transformation and
Quantization，FTQ）和位流编码（Bit Stream Encoding，BSE），有些
是编解码都使用的，比如预测、运动补偿、逆量化与变换（Inverse
Quantization and Transform，IQT）等。
图11-12是包含MFX的Gen结构图，来自Gen PRM卷7中的“媒体技术
概要”（Generic Media）一节。
图11-12 包含MFX的Gen结构图
图11-12中，把环形接口（Ring Interface）下面的硬件部件分为4大
类，即3D、媒体、位块操作（Blitter）和共享部分。图中标有$的部分
代表不同类型的高速缓存。
值得说明的是，MFX有自己的命令流处理器，简称VCS。这意味
着，MFX有自己的状态上下文，可以独立运行。而3D和VFE等以线条
框起的L形部分共享一个命令流处理器（CS）。
11.7.3 状态模型
包括媒体流水线在内的很多GPU功能都灵活多变，参数众多，如何
定义这些硬件单元的软件接口是个关键问题。接口过于简单，可能会丧
失灵活性和硬件功能；接口过于复杂，软件的复杂度和开发难度可能太
大。
状态模型是解决上述问题的较好折中方案。简单来说，状态模型就
是用一组状态数据作为软硬件之间的接口，相互传递信息。用程序员的
话来说，就是定义一套软件和硬件都认可的数据结构，然后通过这个数
据结构来通信。
在现代GPU中，状态模型是一项重要而且应用广泛的技术。在各个
版本的GENPRM中，都有很多内容涉及它，但是描述最好的或许还是经
典的G965软件手册卷2（见该软件手册的10.6节），图11-12便来自该
卷。
图11-13最左一列画的是环形缓冲区中的命令，最上面一条是著名
的Media_State_Pointers命令，它的主要作用是指定要用的VLD状态和
VFE状态。第2列中画的便是VLD状态，结构体称为VLD描述符。第3列
中画的是VFE状态，它又分为两部分：相当于头结构的VFE状态描述符
和接口描述符（表）的基地址。加粗线条框起来的部分就是接口描述符
表，其中画了 3个表项（原图中有5项，为节约篇幅省略了两项）。
图11-13 G965的媒体状体模型
在每一个接口描述符中包含了多个指针，分别指向算核函数（GEN
的EU指令）、采样器的状态结构体和绑定表（binding table）。
绑定表是与状态模型关系密切的另一项常用技术，它的主要作用是
避免直接用GPU可见的地址来索引较大的数据块。在目前的GPU编程模
型中，CPU端负责准备任务和参数，GPU负责执行指定的任务。这样做
的一个问题是，当CPU端准备参数时，数据块的GPU地址可能还不确
定。绑定表很好地解决了这个问题，首先把要访问的数据列在表里，然
后只要用表项的序号来引用数据就可以了。这个序号有个专用的名字，
叫绑定表索引（Binding Table Index，BTI）。图11-13中，每个绑定表
包含256个表项，每个表项指向一个平面状态结构体。
上面描述的状态模型在后来的Gen GPU中一直沿用着，命令参数和
结构体定义随着功能演进而变化，但设计思想是一样的。除了媒体功能
之外，状态模型也用在3D和GPGPU方面。
11.7.4 多种计算方式
根据编码格式、应用场景和硬件版本等方面的差异，对于某一种编
解码操作，可能选择以下多种方式之一。
使用GPU的固定功能单元，这种方法的优点是速度快而且功耗低，
缺点是灵活性差。这种方法有时简称为（纯）硬件方式。
使用CPU，这种方法一般速度较慢、功耗较高，但具有灵活性高、
编程简单、容易移植和云化等优点。这种方法有时简称为（纯）软
件方式。
通过OpenCL、CM（C for Media）等编程方法产生算核函数，在
GPU中的EU上执行。这种方法有时简称为GPU硬件加速。
因为编解码操作包含很多个子过程，所以也可以为不同的子过程选
择不同的方式，即所谓的混合（hybrid）方案。
11.8 EU指令集
指令集（ISA）是处理器的语言，听其言，不仅可以知其所能，还
可以知其所善为，理解其特性。GEN EU的指令集具有很多非常有趣的
特征，学习它不但可以帮助我们更好地使用GEN的EU，而且可以给我
们很多启发。
在英特尔公开的PRM中，包含了非常详细的EU指令集文档，而且
包含多个版本，从经典的G965（Gen4）到目前很流行的
Skylake（Gen9）和Kabylake（Gen9.5）。以Skylake为例，EU和指令集
位于PRM卷7的最后200页左右。
11.8.1 寄存器
下面先介绍EU的寄存器。当涉及寄存器个数时，如不特别说明，
范围都是指每个EU线程。
GPU的寄存器都比较多，EU也不例外。为了便于组织，分成两部
分，每一部分称为一个寄存器文件（register file）。一个称为通用寄存
器文件（General Register File，GRF），另一个称为架构寄存器文件
（Architecture Register File，ARF）。
GRF可以供编译器和应用程序自由使用，满足任意用途，可读可
写。GRF包含128个寄存器，命名方式是字母r加数字，即r#的形式，每
个GRF的长度都是256位。
顾名思义，ARF是GEN架构定义的专用寄存器，分别满足不同的用
途，各司其职，见表11-3。
表11-3 EU的ARF
类型编码
名称
数量
描  述
0000b
null
1
空（null）寄存器，代表不存在的操作数
0001b
a0.#
1
地址寄存器
0010b
acc#
10
累加寄存器
0011b
f#.#
2
标志寄存器
0100b
ce#
1
通道启用（channel enable）寄存器
0101b
msg#
32
消息控制寄存器
0110b
sp
1
栈指针寄存器
0111b
sr0.#
1
状态寄存器
1000b
cr0.#
1
控制寄存器
1001b
n#
2
通知计数（notification count）寄存器
1010b
ip
1
指令指针寄存器
1011b
tdr
1
线程依赖寄存器
1100b