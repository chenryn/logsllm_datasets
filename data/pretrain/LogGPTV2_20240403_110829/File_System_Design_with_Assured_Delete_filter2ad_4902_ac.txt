encrypted  S-table,  which  is  now  encrypted  with
decryption keys known to the ephemerizers.
interactions  with 
The file system could, at this point, decrypt all the
S’s, and keep the entire unencrypted S-table in volatile
storage. Or it could decrypt each S the first time a file
with  that  expiration  time  is  accessed.  This  would
require,  eventually,  10,000 
the
ephemerizer in order to decrypt all the S’s after a crash.
Preferably,  the  S-table  would  be  kept  in  a  tamper-
resistant  cryptographic  accelerator  coprocessor.  Such
devices are available that operate at disk speeds, so that
the  extra  level  of  encryption  will  not  impact  perfor-
mance, and the tamper-resistance will keep the S-table
safe.  The  coprocessor  might  retain  the  S-table  across
file  system  crashes,  but  should  erase  its  state  if  it  is
tampered  with,  or  moved.  If  the  coprocessor  dies,  or
has destroyed its state, it is easy to recover the S-table
from  nonvolatile  storage,  and  with  the  help  of  the
ephemerizers.
Optimization 2: Single interaction upon boot
We can further optimize the performance by making
each  Si  be  a  one-way  cryptographic  hash  of  Si-1.  An
alternative  to  one-way  hashes  that  would  enable  the
file system to recover all subsequent S’s from the first-
to-expire S is to encrypt Sj+1 with Sj.
With  this  optimization,  when  the  file  system  is
rebooted after a crash, it only needs to interact with the
ephemerizer(s)  once,  to  decrypt  the  earliest-to-expire
S, and then locally derive all the remaining S’s.
The  file  system  still  keeps  10,000  S’s  (assuming
there are files that will not expire for 30 years, and a
granularity of one per day). The S-table looks the same
as  it  did  for  Optimization  1,  i.e.,  that  each  Si  is
encrypted  with  the  corresponding  public  keys  of  the
ephemerizers.
With optimization 1, each of the 10,000 S’s will need
to  be  independently  decrypted,  with  the  help  of  the
ephemerizer(s)  each  time  the  system  reboots.  With
optimization 2, only the S that will expire first need be
decrypted.
Note that if the file system does not crash for some
time, it must discard S’s from volatile storage when the
expiration date occurs.
3.2.1 Changing a file’s expiration date
What  if  the  file  system  wishes  to  change  a  file’s
expiration time? It is relatively easy to extend it. The
simplest way would be to re-encrypt the file with an S
with a later expiration time.
If  the  file  is  very  long,  however,  and  if  expiration
time extension is a common operation, then this can be
accomplished more efficiently by having each file be
encrypted  with  its  own  secret  key  K,  and  have  K
encrypted  with  the  appropriate  Si  be  associated  with
the file, for instance, by including it in the metadata for
the file.
To  extend  the  life  of  a  file,  K  need  only  be  re-
encrypted  using  a  later  S,  so  the  encrypted  file  data
need not be modified.
Encrypted File
exp date = i+3
{K}Si+3
encrypted with
K
decrypt K, re-encrypt with
later S, and modify exp
date. Encrypted data is
not modified.
Figure 2. Delaying a file’s expiration: encrypting 
data with file key K, encrypting K with Si
It  is  not  possible,  with  our  time-based  scheme,  to
preserve  the  assured  deletion  guarantees  if  the  file’s
expiration time is made earlier than its original expira-
tion time, because the ephemerizer cannot delete a key
prematurely, since others might be depending on that
key.  So  even  if  the  file,  and  its  metadata,  is  deleted
from the file system, it would still be recoverable from
backup  store,  as  long  as  the  associated  S  was  still
recoverable, which it will be, as long as the associated
ephemerizer public keys are still available, and a copy
of the file encrypted with the later S is still available on
some copy of the backup.
3.2.2 Reclaiming space
Garbage  collection  to  reclaim  space  is  easy.  In  the
background, a garbage collector can look for files that
have expired, as indicated by the expiration date in the
metadata, and free the space.
3.2.3 Adding an ephemerizer
Suppose one or more of the ephemerizers a file sys-
tem  was  using  was  known  to  permanently  fail,  for
instance, by losing all its ephemeral keys. As long as n-
k+1 of the ephemerizers don’t fail simultaneously, or as
long as the file system has retrieved the S’s (the master
class secrets), it is always possible for the file system to
add ephemerizers.
It  accomplishes  this  by  re-encrypting  the  table  of
master  class  keys,  breaking  each  Si  into  the  desired
number  of  shares,  and  encrypting  each  share  with  a
corresponding ephemerizer key for that class, encrypt-
ing the result with G, and storing on backup media.
3.2.4 Security and performance properties of the 
time-based scheme
Upon reboot of the file system, there is a tiny amount
of overhead to interact with ephemerizers and decrypt
the S-table. Once the S-table is decrypted, it is accessi-
ble  locally  to  the  file  system,  and  there  is  no  further
performance  overhead  due  to  the  ephemerization,
above  what  would  be  needed  for  any  encrypted  file
system.
The  interaction  with  a  ephemerizer  divulges  no
information to the ephemerizer, so there is no need for
the file system to authenticate the ephemerizer. Even if
the ephemerizer colludes with the storage service, and
therefore  obtains  all  information  that  the  file  system
stores  in  non-volatile  storage,  together  with  the
ephemerizer keys, it will be impossible to recover the
data without also knowing G, which requires stealing a
quorum of system administrator secrets.
There  is  also  no  reason  for  the  ephemerizer  to
authenticate  the  file  system.  In  fact,  the  interaction
could be done anonymously [10]. There could be a set
of ephemerizers available on the Internet, and any file
system could choose to use any of them, encrypt with
their public keys, and then request decryption blindly
and anonymously when needed.
One  very  convenient  aspect  of  the  time-based
scheme is that no action need be taken by the file sys-
tem when a file expires. If the rule is that, say, results
of some medical test be maintained for a month, and
then destroyed after that, the file will have its expira-
tion  time  chosen  at  creation  time,  and  then  when  it
expires, the file will become unreadable, with no fur-
ther effort by the file system.
What  happens  if  the  file  system  has  an  incorrect
time? If the file system thinks the time is far in the past,
say a year old, the file system may, during the time its
clock is set incorrectly, create encrypted files that will
prematurely expire, possibly even become immediately
unrecoverable once the file system loses volatile stor-
age. However, this error is likely to be caught as soon
as the file system boots, since the ephemerizers will not
be  advertising  ephemeral  keys  with  past  expiration
times, and the file system will not be able to decrypt
any  of  the  S’s  that  are  encrypted  with  keys  that  the
ephemerizers  have  discarded.  This  would  make  it
immediately apparent to the rebooting file system that
its clock is very different from the ephemerizer’s clock.
Setting the time to be too old at the file system will
not cause files that have expired to become readable.
If the file system thinks the time is far in the future,
then if the user interface specifies expiration times as
offsets  from  “current”  (as  in  “two  weeks  from
present”) it will create files that will expire later than
wanted, and it will think that files that should be acces-
sible, because they have not expired, are not recover-
able.  The  file  system  will  not  attempt  to  decrypt  S’s
from times in the past.
It would be easy to have the file system specify its
notion of the date in the message to the ephemerizer,
and/or  have  the  ephemerizer  specify  the  date  in  the
reply. This would be a hint that someone has the time
wrong so an alert could be raised.
In  practice,  setting  correct  time  (approximately)  is
not that difficult.
What  happens  if  the  ephemerizers  have  the  time
wrong?  Again,  time  need  only  be  approximate  (say
within a day). If an ephemerizer thinks the time is in
the future, it may prematurely discard keys that should
not have expired. If an ephemerizer thinks the current
time is in the past, then it may not discard keys on time.
With a quorum scheme of k out of n, it would require
more  than  k  of  the  ephemerizers  to  have  clocks  set
backwards in order for an expired file to be recover-
able, and n-k+1 of them to have clocks set forwards in
order for an unexpired file to be unreadable.
Note  that  booting  a  ephemerizer  with  an  old  time
will not cause it to remember keys that were discarded
while it was operating before with a correct clock.
What  happens  if  various  keys  are  compromised  or
lost? If G is stolen, along with the encrypted data, then
the thief can read all the data in the file system, just like
any system administrator armed with backup data and
G.  However,  like  the  system  administrator,  the  thief
will  not  be  able  to  read  data  that  has  been  assuredly
deleted.
If an ephemerizer’s long term key is lost (but not sto-
len), then it can not certify any new keys, but the cur-
rent ephemeral keys (if they are not lost) will still be
operational. However, the ephemerizer can get a new
long-term key certified through the PKI and continue
operating.
If an ephemerizer’s long term key is stolen, then the
thief might be able to trick a file system into encrypting
with bogus keys (which is a denial of service attack but
will  not  disclose  data),  or  with  keys  that  the  thief
knows the private keys for, and which the thief will not
discard.  This  is  exactly  the  case  of  a  dishonest
ephemerizer. It might cause data that should be deleted
to be recoverable, but it requires a quorum of colluding
dishonest ephemerizers.
If an ephemerizer loses its ephemeral keys, then as
long as a quorum of ephemerizers still remain opera-
tional,  the  data  that  has  not  expired  is  still  readable.
Robustness  can  be  raised  at  any  time  by  adding  new
ephemerizers.
If an ephemerizer’s ephemeral keys are stolen, then
this  again  is  the  same  as  the  case  of  a  dishonest
ephemerizer. The thief will only be able to read data if
it colludes with a quorum of other dishonest ephemer-
izers (assuming a quorum is more than 1), obtains G,
and obtains the encrypted data.
We do require that the public key cryptography used
for  the  blind  decryption  be  robust  against  a  chosen
ciphertext  attack.  It  is  believed  that  RSA  and  elliptic
curves (for both of which we present blind decryption
schemes  in  Appendix  A)  are  secure  against  chosen
ciphertext.
3.3  Our Individual File On-Demand Delete 
Scheme
In this scheme, like in the time-based scheme, there
will  only  need  to  be  a  single  interaction  with  the
ephemerizer(s)  after  the  file  system  boots.  Once  the
ephemerizer(s), upon reboot, decrypts a single quantity
for  the  file  system,  the  file  system  operates  autono-
mously, until it crashes.
In this scheme, each  file is encrypted with  its own
secret key F. The file system maintains a file, which we
will call the F-table, of keys for every file in the file
system. So, for instance, if the file system has a million
files, there will be a million entries in the F-table.
In this scheme, the ephemerizers maintain (at least)
two keys for this file system. If the ephemerizer is act-
ing  for  multiple  file  systems,  it  will  have  a  different
pair of keys for each file system. In this way it is up to
the file system to command the ephemerizer to gener-
ate new keys, and when to discard old keys. For sim-
plicity, let’s assume just two keys. We will call the pair
of keys the “current” key and the “previous” key.
The file system keeps the F-table in volatile storage.
However,  every  time  the  F-table  is  modified  (due  to
creating  a  new  file  or  securely  deleting  an  existing
file),  the  file  system  chooses  a  random  secret  K,
encrypts  the  F-table  with  K,  and  stores  K  encrypted
with  the  ephemerizer’s  current  key.  If  there  are,  for
instance, three ephemerizers, and we wish to use a 1
out of 3 scheme, then K would be stored 3 times, each
time  encrypted  with  a  different  ephemerizer’s  “cur-
rent” key. The encrypted K is further encrypted with G,
the overall file system secret.
It  is  possible  to  avoid  modifying  the  F-table  when
files are created by having the file system precompute
a batch of F’s in advance. In this way, many files can
be  created  without  changing  the  F-table.  It  is  only
when there are no unused F’s, or when an F is deleted,