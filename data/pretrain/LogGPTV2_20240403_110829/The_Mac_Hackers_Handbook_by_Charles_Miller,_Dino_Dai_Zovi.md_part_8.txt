46 Part I ■ Mac OS X Basics
// 2. Conflicing response packets received from other hosts can
cause us to need to send defensive responses
// 3. Other hosts announcing deletion of shared records can
cause us to need to re-assert those records
// 4. Response packets that answer questions may cause our
client to issue new questions
mDNS_Unlock(m);
}
The raw data from the network enters this function in the pkt variable. It
then uses msg as a pointer to a structure that understands the format of the
packet.
(gdb) print *((DNSMessage *) pkt)
$2 = {
h = {
id = {
b = “\000”,
NotAnInteger = 0
},
flags = {
b = “\000”,
NotAnInteger = 0
},
numQuestions = 768,
numAnswers = 0,
numAuthorities = 0,
numAdditionals = 0
},
data = “\bDVR 887A\f_tivo-videos\004_tcp\005local\000\000!\000
\001?\f\000\020\000\001\bDVR-5C90?’\000\001\000\001prisoner\004iana
\003org\000\nhostmaster\froot-servers?T\000\000\000\001\000\000\a\
b\000\000\003?\000\t:?\000\t:?Command=QueryContainer&Container=%2FNowPla
ying\030swversion=9.3.1-01-2-649\024platf”…
}
Now back to the source code.
typedef packedstruct
{
mDNSOpaque16 id;
mDNSOpaque16 flags;
mDNSu16 numQuestions;
mDNSu16 numAnswers;
mDNSu16 numAuthorities;
mDNSu16 numAdditionals;
9955336633cc0022..iinndddd 4466 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 47
} DNSMessageHeader;
// We can send and receive packets up to 9000 bytes (Ethernet Jumbo
Frame size, if that ever becomes widely used)
// However, in the normal case we try to limit packets to 1500 bytes so
that we don’t get IP fragmentation on standard Ethernet
// 40 (IPv6 header) + 8 (UDP header) + 12 (DNS message header) + 1440
(DNS message body) = 1500 total
#define AbsoluteMaxDNSMessageData 8940
#define NormalMaxDNSMessageData 1440
typedef packedstruct
{
DNSMessageHeader h;
// Note: Size 12 bytes
mDNSu8 data[AbsoluteMaxDNSMessageData]; // 40 (IPv6) + 8 (UDP) +
12 (DNS header) + 8940 (data) = 9000
} DNSMessage;
It reverses the byte order (endianness) and, depending on the type of packet,
calls either mDNSCoreReceiveQuery or mDNSCoreReceiveResponse. These two
functions break out the data further and process it. The entire code is large, but
this shows one place where outside data enters the system. Another spot that
code enters mDNSResponder is in the fi le LegacyNATTransversal.c. Any fi le
or function in source code containing the word legacy always requires a second
look by a code auditor.
QuickTime
QuickTime Player plays a large variety of different fi le types. Some are well
known (like .mp3, .avi, and .gif ) and most common audio- and video-player
software can understand them. QuickTime Player also plays a number of Apple-
developed fi le formats that many other players may not support. QuickTime
Player communicates to servers using a few protocols that are not common. In
this section we’ll outline some of the fi le types and protocols that were originally
introduced for QuickTime Player.
.mov
The QuickTime fi le format (.mov) was designed by Apple and is now the basis
for MPEG-4. It consists of containers that store one or more tracks. Each track
can store a different type of data, such as audio, video, or text.
The fundamental unit for a .mov fi le is the atom. An atom begins with a 32-bit
unsigned integer, followed by a 32-bit type. The rest of the atom is the data for
that atom. This data may contain other atoms; see Figure 2-7.
9955336633cc0022..iinndddd 4477 11//2255//0099 44::3399::4455 PPMM
48 Part I ■ Mac OS X Basics
Figure 2-7: The atom structure of a .mov file
The size value indicates the total number of bytes in the atom, and the type
usually consists of four bytes from the ASCII range of values. The size value
can also be an extended size, which allows for sizes larger than 32 bits. In the case
of extended size, the size fi eld is set to 1 (which would not normally be valid
since the size fi eld contains the number of bytes in the whole atom, including
the size fi eld itself and the type fi eld). When an extended size is needed, the 64
bits after the type are used for the size. Finally, if the size value is set to zero,
the atom is assumed to extend for the rest of the fi le so that the size is the length
of the fi le from that point onward.
Take a look at the atom structure for an actual fi le.
$ hexdump -C L33t_Haxxors.mov | head
00 00 00 20 66 74 79 70 71 74 20 20 20 05 03 00 |... ftypqt ...|
71 74 20 20 00 00 00 00 00 00 00 00 00 00 00 00 |qt ............|
00 01 16 3b 6d 6f 6f 76 00 00 00 6c 6d 76 68 64 |...;moov...lmvhd|
00 00 00 00 c2 24 a3 f9 c2 24 a3 fb 00 00 02 58 |....?$???$??...X|
00 01 64 49 00 01 00 00 01 00 00 00 00 00 00 00 |..dI............|
00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 |................|
00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 |................|
00 00 00 00 40 00 00 00 00 00 00 00 00 00 04 b0 |....@..........?|
00 00 07 08 00 00 00 00 00 00 00 00 00 00 00 00 |................|
00 00 00 09 00 00 03 17 74 72 61 6b 00 00 00 5c |........trak...\|
74 6b 68 64 00 00 00 0f c1 f2 72 0e c2 24 a3 fb |tkhd....??r.?$??|
The fi rst atom begins with a length of 0×20 and a type of ftyp. Referring to the
specifi cation, this type corresponds to the fi le type Atom. The data in this par-
ticular type of atom is the Major_Brand, a 32-bit integer, the Minor_Version, and a
series of Compatible_Brands. The next atom, beginning at offset 0×20 in the fi le,
has size 0×1163b and is of type moov, or a Movie Atom. The Movie Atom is large
and can contain many different types of atoms. In this case, the fi rst thing that
9955336633cc0022..iinndddd 4488 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 49
shows up in the data is a Movie Header Atom with size 0x6c and type mvhd. See
Figure 2-8 for more data broken out by type.
Figure 2-8: The .mov file broken out by atom. All sizes are in hexadecimal.
Being familiar with the layout of the fi les will help in fuzzing or auditing the
QuickTime Player application. We’ll discuss reverse engineering and fuzzing
in chapters 5 and 6, but to see how knowing the fi le format helps in reverse-
engineering the player, fi rst fi nd the library responsible for parsing .mov fi les.
You can do this by fi nding the libraries used by QuickTime Player and then
searching through the strings in each library for the names of the atom types.
$ otool -L QuickTime\ Player
QuickTime Player:
/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
(compatibility version 45.0.0, current version 949.0.0)
/System/Library/Frameworks/ApplicationServices.framework/Versions/A/
ApplicationServices (compatibility version 1.0.0, current version
34.0.0)
/System/Library/Frameworks/Carbon.framework/Versions/A/Carbon
(compatibility version 2.0.0, current version 136.0.0)
/System/Library/Frameworks/CoreFoundation.framework/Versions/A/
CoreFoundation (compatibility version 150.0.0, current version 476.0.0)
9955336633cc0022..iinndddd 4499 11//2255//0099 44::3399::4455 PPMM
50 Part I ■ Mac OS X Basics
/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
(compatibility version 300.0.0, current version 677.0.0)
/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit
(compatibility version 1.0.0, current version 275.0.0)
/System/Library/Frameworks/QTKit.framework/Versions/A/QTKit
(compatibility version 1.0.0, current version 1.0.0)
/System/Library/Frameworks/QuickTime.framework/Versions/A/QuickTime
(compatibility version 1.0.0, current version 861.0.0)
/System/Library/Frameworks/Security.framework/Versions/A/Security
(compatibility version 1.0.0, current version 31122.0.0)
/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/
SystemConfiguration (compatibility version 1.0.0, current version
204.0.0)
/System/Library/Frameworks/Quartz.framework/Versions/A/Quartz
(compatibility version 1.0.0, current version 1.0.0)
/System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore
(compatibility version 1.2.0, current version 1.5.0)
/usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version
7.4.0)
/usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version
1.0.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version
111.0.0)
/System/Library/Frameworks/CoreServices.framework/Versions/A/
CoreServices (compatibility version 1.0.0, current version 32.0.0)
/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version
227.0.0)
$ otool -L QuickTime\ Player| xargs grep “moov” 2> /dev/null
Binary file /System/Library/Frameworks/QTKit.framework/Versions/A/QTKit
matches
Binary file /System/Library/Frameworks/QuickTime.framework/Versions/A/
QuickTime matches
The second library in the list seems the most promising, so grab it and load
it into IDA Pro. Search for one of the unsigned integers that represents an atom
type—for example, “moov” = 0x6d6f6f76. You can do this by selecting Search
and typing in your search term. There will be many occurrences of this; see
Figure 2-9.
Using this method, you can fi nd the functions that are parsing for the atom
type. This allows you to fi nd the relevant parsing code quickly, even in the
middle of complicated functions; see Figure 2-10.
Reading through the specifi cation, you can choose a more obscure atom
type such as the Preview atom, “rmda” = 0x706e6f74. Here only three func-
tions use this value: _NewMovieFromDataRefPriv_priv, _AddFilePreview, and
_MakeFilePreview; see Figure 2-11.
9955336633cc0022..iinndddd 5500 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 51
Figure 2-9: There are many comparisons against the string “moov” in the QuickTime library.
Figure 2-10: A complicated function responsible for checking atom types found with grep
9955336633cc0022..iinndddd 5511 11//2255//0099 44::3399::4455 PPMM
52 Part I ■ Mac OS X Basics
Figure 2-11: There are only three occurrences of “rmda” in the QuickTime library.
Using even this very basic technique can allow you to focus quickly on the
portions of code associated with particular atom types.
There are other Apple-created fi le types, such as QuickTime Media Link (.qtl)
and QuickTime Virtual Reality (.qtvr), that QuickTime Player can process by
default. You must understand these, along with all the non-Apple fi le formats,
to evaluate the security of client-side applications on a Mac OS X computer.
We’ll discuss this more in the next chapter.
RTSP
Besides fi le formats, QuickTime Player uses some uncommon network protocols.
To get video on demand, it uses the Real Time Streaming Protocol (RTSP) to
access metafi le information and issue streaming commands. It uses the Real-
time Transport Protocol (RTP) for the actual video and audio content. These
protocols have been a source of vulnerabilities in the past; see CVE-2007-6166
and CVE-2008-0234 for specifi c instances of RTSP vulnerabilities..
RTSP is similar in design to HTTP, with the biggest difference being that
RTSP has a session identifi er that allows for stateful transactions. Different RTSP
requests can be linked together by combining the session identifi er with the
request. By contrast, HTTP is stateless, meaning each individual HTTP request
is independent of all previous (and future) requests.
RTSP may be transmitted over TCP or UDP. While TCP and UDP differ in
their underlying delivery mechanism, the RTSP application protocol is still
considered stateful due to the inclusion of the session identifi er. Figure 2-12
shows a typical RTSP session.
Possible RTSP methods include
■ OPTIONS: Get available methods
■ SETUP: Initialize session
■ ANNOUNCE: Change description of media object
■ DESCRIBE: Get description of media object
■ PLAY: Start playback
9955336633cc0022..iinndddd 5522 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 53
■ RECORD: Start recording
■ REDIRECT: Redirect client to new server
■ PAUSE: Stop delivery but maintain state
■ SET_PARAMETER: Set a device or control parameter
■ TEARDOWN: End session
DESCRIBE
SETUP
PLAY
Client Media
RTP audio Server
RTP video
RTCP
PAUSE
TEARDOWN
Figure 2-12: Steps in receiving media via RTSP/RTP/RTCP
There are a number of possible headers in RTSP requests, including Accept,
Bandwidth, Scale, and User-Agent. The Response headers may include
Location, Proxy-Authenticate, Public, Retry-After, Server, Vary, and WWW-
Authenticate.
In early 2007, as part of the Month of Apple Bugs, a stack overfl ow was found
in the way RTSP URLs were handled. A URL of the form rtsp:// [random] +
colon + [299 bytes padding + payload] would get control of the target. Later,
in November, another RTSP stack overfl ow was found in the way QuickTime
handles the Content-Type response header. Just two months after that, another
RTSP stack-overfl ow vulnerability was found in QuickTime, this time in the
handling of Reason-Phrase when an error is encountered. Odds are, the same
Apple engineer was responsible for three separate bugs. Thanks!
9955336633cc0022..iinndddd 5533 11//2255//0099 44::3399::4455 PPMM
54 Part I ■ Mac OS X Basics
Look at the RTSP protocol in action. First you need an RTSP server. For this
you can either use the QuickTime Streaming Server that comes on Mac OS X
Server or the Darwin Streaming Server, which is open source. The Darwin
server can be obtained from http://dss.macosforge.org/. The binary pack-
age comes in a .dmg fi le that will launch automatically and take you to the
web-server interface on port 1220. The default location for media content is
/Library/QuickTimeStreaming/Movies/. Figure 2-13 shows the administra-
tive interface.
Figure 2-13: The administrative interface for the QuickTime Streaming Server
To have some content available for download, select Playlists ➢ New Media
Playlist. Add a fi le to the playlist, like the fi le sample_100kbit.mov that comes
with the Darwin server. Name the playlist test. Then press the play button on
the Playlist page for the new test playlist; see Figure 2-14.
You can now use QuickTime Player to connect to the media server by launch-
ing QuickTime Player and selecting File ➢ Open URL and entering
rtsp://localhost/test.sdp
The movie should play in the viewer. Capturing the packets shows how the
exchange proceeds from RTSP to RTP; see Figure 2-15.
9955336633cc0022..iinndddd 5544 11//2255//0099 44::3399::4455 PPMM
Chapter 2 ■ Mac OS X Parlance 55
Figure 2-14: The server is now streaming live media.
Figure 2-15: A packet capture that shows the transition from RTSP to RTP
9955336633cc0022..iinndddd 5555 11//2255//0099 44::3399::4455 PPMM
56 Part I ■ Mac OS X Basics
Looking at the RTSP that was exchanged, we see the fi rst leg of the conversa-
tion started by the player issuing the following request:
DESCRIBE rtsp://192.168.1.182/test.sdp RTSP/1.0
CSeq: 1
Accept: application/sdp
Bandwidth: 384000
Accept-Language: en-US
User-Agent: QuickTime/7.4.1 (qtver=7.4.1;cpu=IA32;os=Mac 10.5.2)
Notice the sequence number 1. The server responds with the contents of the
.sdp playlist fi le requested. These .sdp fi les are another fi le format that lies on
the attack surface of QuickTime Player.
RTSP/1.0 200 OK
Server: QTSS/6.0.3 (Build/526.3; Platform/MacOSX; Release/Darwin
Streaming Server; State/Development; )
Cseq: 1
Cache-Control: no-cache
Content-length: 386
Date: Wed, 09 Jul 2008 15:19:11 GMT
Expires: Wed, 09 Jul 2008 15:19:11 GMT
Content-Type: application/sdp
x-Accept-Retransmit: our-retransmit
x-Accept-Dynamic-Rate: 1
Content-Base: rtsp://192.168.1.182/test.sdp/
v=0
o=QTSS_Play_List 140087043 422545485 IN IP4 192.168.1.182
s=test
c=IN IP4 0.0.0.0
b=AS:94
t=0 0
a=x-broadcastcontrol:RTSP
a=control:*