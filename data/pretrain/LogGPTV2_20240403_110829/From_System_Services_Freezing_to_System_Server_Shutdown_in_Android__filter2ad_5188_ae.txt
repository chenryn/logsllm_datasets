check the writers lock and thus become a writer thread
9The binder thread is created as a native pthread, which is attached
to the Android runtime.
10One has to enable the unused BR_FINISHED command in the
communication protocol of the binder mechanism.
We have already proposed these defense solutions to the Google
Android framework team. They will probably reﬁne the problem-
atic critical sections in the AMS to patch ASV #1, #2 and ﬁx #3
as suggested. They are still evaluating the corresponding pros and
cons of other defenses/mitigation based on various design objec-
tives.
6. RELATED WORK
Android attacks and defenses have been proposed in [28, 35,
34, 26, 52, 59, 43]. Chin et al. [28] describe an attack only against
the ordered broadcast API of Android (by the default design, An-
droid allows the receiver of the ordered broadcasts to manipulate or
drop the broadcasted intent in the middle). Differently, our ASVs
#1 and #2 target all types of broadcast APIs (e.g., sendBroadcast
and etc.) and other functions in the activitymanager. Android per-
mission re-delegation attacks [35, 26, 47, 53, 33] have been well
studied. Long et al. [47] design a static analysis tool to ﬁnd permis-
sion re-delegation vulnerabilities between app components. Pileup
attacks [55] is based on a ﬂaw in the packagemanager service that
targets system update. We characterize a new type of hazard and
then design an efﬁcient tool to help discover the ASVs in various
system services. PoC attacks and relevant system-level defenses are
designed. Virtualization based defenses [22, 54] on Android can
help mitigate some of the discovered ASVs, however, some shared
hardware resources (the single user screen among trusted/untrusted
VM instances) will still be vulnerable to attacks (e.g., screen view
manipulating problem in ASV#3 and #4).
Bugs in Android apps have been studied widely in previous
work [37, 50, 49]. Hsiao et al. [37] build a system to identify
a number of known and unknown harmful concurrency errors in
Android apps. Ravindranath et al. [50] design an Android app in-
strumentation approach to monitor app performance for developers.
Our work primarily focuses on the Android framework side, which
contains most critical system services that provide essential support
for Android apps. Due to the speciﬁc wake-lock design in Android
that makes it extremely hard for developers to use, Pathak et al. [49]
characterize the problem and detect a new type of energy bugs in
Android apps. Our work characterized and detected a new type of
vulnerability and then fully analyzed the discovered vulnerabilities.
DoS Attacks are a well explored research area [44, 56, 23, 32].
Armando et al. [23] abuse the loosely protected Unix socket per-
mission in the Zygote process to fork an unbounded number of
processes to mount a DoS attack on Android and ﬁx the problem
by setting the right access control bits. However, our ASVs are a
more general type of vulnerability caused by the design of the sys-
tem server. It is deeply rooted in the fundamental tension between
program complexity and security and is much easier to exploit than
to ﬁx, which can appear in other systems with similar design. Pre-
viously, Martin et al. [32] use formal method to identify deadlock
vulnerability that causes DoS attacks in IEEE 802.11w protocol.
Detecting deadlock based ASVs on Android is our future work.
7. CONCLUSION
Our new understanding of the SS reveals a general design ﬂaw
in its concurrency control scheme and failure recover mechanism.
We further characterize it as a general vulnerability (i.e., ASV).
We then build a tool to help cost-effectively analyze 2,154 risky
methods, which helps reveal four previously unknown ASVs in
two critical services (i.e., activitymanager and windowmanager).
We further easily craft several PoCs by exploiting the ASVs un-
der various scenarios. Google immediately conﬁrmed our ﬁndings,
and we proposed short-term mitigation for users, reﬁnement for the
CC mechanism and a smarter watchdog scheme for the SS. Google
1245also takes some of our defense proposals. Our study shows that
some seemingly neat and robust design choices can lead to unex-
pected ﬂaw. Hence, the secure design for critical components in
the rapidly-evolving mobile systems becomes very important.
8. ACKNOWLEDGMENTS
We greatly appreciate the insightful comments and constructive
feedback from the anonymous reviewers. We would like to give
special thanks to Dr. William Enck for his detailed instructions for
preparing our camera ready version. This work was partially sup-
ported by NSF CCF-1320605, AROW911NF-13-1-0421 (MURI),
NSF SBE-1422215 and NSFC 61100226 and Beijing Natural Sci-
ence Foundation 4144089. Any opinions, ﬁndings and conclusions
or recommendations expressed in this material are those of the au-
thors and do not necessarily reﬂect the views of the National Sci-
ence Foundation and Army Research Ofﬁce.
9. REFERENCES
[1] Android and RTOS together: The dynamic duo for today’s
medical devices. http://goo.gl/StURzu.
[2] Android Auto: Driven by Android.
https://www.android.com/intl/en_us/auto/.
[3] Android banking apps vulnerable to cash theft by CAS hole
hackers. http://goo.gl/LerfXT.
[4] Android Phones Hit by Ransomware.
http://goo.gl/W0TBy3.
[5] Android ransomware ’Koler’ turns into a worm.
http://goo.gl/bpo66T.
[6] ANTLR (ANother Tool for Language Recognition).
http://www.antlr.org/.
[7] CVE-2014-3500: Cordova cross-application scripting via
Android intent URLs. http://goo.gl/YhyrRw.
[8] Despite iPhone 6 hype, Android continues to dominate iOS
market share. http://goo.gl/xmKfrP.
[9] Icon vulnerability causes mobile-system crashes.
http://goo.gl/SjvVVB.
[10] iPhone Ransomware. http://goo.gl/58CsT2.
[11] Medical Device Manufacturers Improve Their Bedside
Manner with Android. http://goo.gl/d2JF3.
[12] Mobile ransomware campaigns.
http://goo.gl/4aRzqT.
[13] Mobile ransomware scarepakage. https://blog.
lookout.com/blog/2014/07/16/scarepakage/.
[14] Northrop grumman news release: DARPA ASPN project.
http://goo.gl/3IUSXu.
[15] Northrop to demo darpa navigation system on android.
http://goo.gl/bgRggD.
[16] Six vulnerabilities found in lots of banking apps.
http://goo.gl/tBT8po.
[17] Soot: a java optimization framework.
http://www.sable.mcgill.ca/soot/.
[18] Strand-1 satellite launches Google Nexus One smartphone
into orbit. http://goo.gl/r5zkrs.
[19] The Lookout AVD v8.17-8a39d3f for Android allows
attackers to cause a denial of service . http:
//cve.scap.org.cn/CVE-2013-3579.html.
[20] Trend Micro Discovers Vulnerability That Renders Android
Devices Silent, July 30, 2015. http://goo.gl/k2bX0x.
[21] Why Android will be the biggest selling medical devices in
the world by the end of 2012. http://goo.gl/G5UXq.
[22] ANDRUS, J., DALL, C., HOF, A. V., LAADAN, O., AND
NIEH, J. Cells: a virtual mobile smartphone architecture. In
Proceedings of the Twenty-Third ACM SOSP 2011.
[23] ARMANDO, A., MERLO, A., MIGLIARDI, M., AND
VERDERAME, L. Would you mind forking this process? a
denial of service attack on android (and some
countermeasures). In Information S&P Research. 2012.
[24] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D.
Pscout: analyzing the android permission speciﬁcation. In
ACM CCS (2012).
[25] BIANCHI, A., CORBETTA, J., INVERNIZZI, L.,
FRATANTONIO, Y., KRUEGEL, C., AND VIGNA, G. What
the app is that? deception and countermeasures in the
android user interface. In IEEE Symposium on SP, 2015.
[26] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T.,
AND SADEGHI, A.-R. Xmandroid: A new android evolution
to mitigate privilege escalation attacks. Technische
Universität Darmstadt, Technical Report TR-2011-04 (2011).
[27] CHEN, K., WANG, P., LEE, Y., WANG, X., ZHANG, N.,
HUANG, H., ZOU, W., AND LIU, P. Finding unknown
malice in 10 seconds: Mass vetting for new threats at the
google-play scale. In USENIX Security 15’.
[28] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER,
D. Analyzing inter-application communication in Android.
In Proceedings of MobiSys 11’.
[29] DAVID, F. M., AND CAMPBELL, R. H. Building a
self-healing operating system. In Dependable, Autonomic
and Secure Computing, 2007.
[30] DAVID, F. M., CARLYLE, J. C., AND CAMPBELL, R. H.
Exploring recovery from operating system lockups. In
USENIX Annual Technical Conference (2007).
[31] DESNOYERS, M., MCKENNEY, P. E., STERN, A. S.,
DAGENAIS, M. R., AND WALPOLE, J. User-level
implementations of read-copy update. Parallel and
Distributed Systems, IEEE Transactions on (2012).
[32] EIAN, M., AND MJOLSNES, S. A formal analysis of ieee
802.11 w deadlock vulnerabilities. In INFOCOM 2012.
[33] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG,
J., MCDANIEL, P., AND SHETH, A. TaintDroid: An
Information-Flow Tracking System for Realtime Privacy
Monitoring on Smartphones. In OSDI (2010).
[34] FELT, A. P., HA, E., EGELMAN, S., HANEY, A., CHIN, E.,
AND WAGNER, D. Android permissions: User attention,
comprehension, and behavior. In Proceedings of the Eighth
Symposium on Usable Privacy and Security (2012).
[35] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S.,
AND CHIN, E. Permission Re-Delegation: Attacks and
Defenses. In Proceedings of the 20th USENIX Sec, 2011.
[36] HEUSER, S., NADKARNI, A., ENCK, W., AND SADEGHI,
A.-R. Asm: A programmable interface for extending
android security. In Sec’ 14.
[37] HSIAO, C.-H., PEREIRA, C. L., YU, J., POKAM, G. A.,
NARAYANASAMY, S., CHEN, P. M., KONG, Z., AND
FLINN, J. Race detection for event-driven mobile
applications. In Proceedings of the 35th ACM SIGPLAN
Conference on PLDI 2014.
[38] HUANG, H., CHEN, K., REN, C., LIU, P., ZHU, S., AND
WU, D. Towards discovering and understanding unexpected
hazards in tailoring antivirus software for android. In ACM
AsiaCCS 15’.
1246[39] HUANG, H., ZHANG, S., OU, X., PRAKASH, A., AND
SAKALLAH, K. Distilling critical attack graph surface
iteratively through minimum-cost sat solving. In ACSAC 11’.
[40] HUANG, H., ZHAO, F., AND YE, M. Estimate the inﬂuential
level of vulnerability instance based on hybrid ranking for
dynamic network attacking scenarios. In IEEE ISSPA 2010.
[41] HUANG, H., ZHU, S., LIU, P., AND WU, D. A framework
for evaluating mobile app repackaging detection algorithms.
In Trust and Trustworthy Computing. Springer, 2013.
[42] JIN, X., HU, X., YING, K., DU, W., YIN, H., AND PERI,
G. N. Code injection attacks on html5-based mobile apps:
Characterization, detection and mitigation. In Proceedings of
the 2014 ACM CCS.
[43] KONG, D., CEN, L., AND JIN, H. Autoreb: Automatically
understanding the review-to-behavior ﬁdelity in android
applications. In ACM CCS (2015).
[44] KUMAR, S., AND SURISETTY, S. Microsoft vs. apple:
Resilience against distributed denial-of-service attacks.
Security & Privacy, IEEE (2012).
[45] LEHEY, G. Improving the freebsd smp implementation. In
USENIX Annual Technical Conference, FREENIX Track
(2001).
[46] LIU, R., ZHANG, H., AND CHEN, H. Scalable read-mostly
synchronization using passive reader-writer locks. In
Proceedings of the 2014 USENIX ATC.
[47] LU, L., LI, Z., WU, Z., LEE, W., AND JIANG, G. Chex:
statically vetting android apps for component hijacking
vulnerabilities. In Proceedings of the 2012 ACM CCS.
[48] LUNDBERG, D., FARINHOLT, B., SULLIVAN, E., MAST,
R., CHECKOWAY, S., SAVAGE, S., SNOEREN, A. C., AND
LEVCHENKO, K. On the security of mobile cockpit
information systems. In Proceedings of the 2014 ACM CCS.
[49] PATHAK, A., JINDAL, A., HU, Y. C., AND MIDKIFF, S. P.
What is keeping my phone awake?: Characterizing and
detecting no-sleep energy bugs in smartphone apps. In
Proceedings of the 10th International Conference on Mobile
Systems, Applications, and Services, MobiSys 12’.
[50] RAVINDRANATH, L., PADHYE, J., AGARWAL, S.,
MAHAJAN, R., OBERMILLER, I., AND SHAYANDEH, S.
Appinsight: Mobile app performance monitoring in the wild.
In OSDI (2012).
[51] SCHLEGEL, R., ZHANG, K., ZHOU, X.-Y., INTWALA, M.,
KAPADIA, A., AND WANG, X. Soundcomber: A Stealthy
and Context-Aware Sound Trojan for Smartphones. In NDSS
(2011).
[52] SMALLEY, S., AND CRAIG, R. Security enhanced (se)
android: Bringing ﬂexible mac to android. In NDSS (2013).
[53] WEI, F., ROY, S., OU, X., ET AL. Amandroid: A precise
and general inter-component data ﬂow analysis framework
for security vetting of android apps. In Proceedings of the
2014 ACM CCS.
[54] WU, C., ZHOU, Y., PATEL, K., LIANG, Z., AND JIANG, X.
Airbag: Boosting smartphone resistance to malware
infection. In Proceedings of NDSS’14.
[55] XING, L., PAN, X., WANG, R., YUAN, K., AND WANG, X.
Upgrading your android, elevating my malware: Privilege
escalation through mobile os updating. In IEEE S&P 14.
[56] YAN, G., LEE, R., KENT, A., AND WOLPERT, D. Towards
a bayesian network game framework for evaluating ddos
attacks and defense. In CCS 12’.
Figure 6: Identiﬁed triggering points of ASV #1
[57] ZHANG, F., HUANG, H., ZHU, S., WU, D., AND LIU, P.
View-Droid: Towards obfuscation-resilient mobile
application repackaging detection. In ACM WiSec 14’.
[58] ZHAO, F., HUANG, H., JIN, H., AND ZHANG, Q. A hybrid
ranking approach to estimate vulnerability for dynamic
attacks. Computers & Mathematics with Applications (2011).
[59] ZHENG, C., ZHU, S., DAI, S., GU, G., GONG, X., HAN,
X., AND ZOU, W. Smartdroid: an automatic system for
revealing ui-based trigger conditions in android applications.
In SPSM 2012, ACM.
APPENDIX
A. APPENDIX
Algorithm 1 Pseudocode to build the vector database for all SS
methods and query candidate risky methods from the database
Input: SSjar :{Android System Server Jar ﬁles};
φ:{specify the query criteria};
Output: SSmethod : {Ranked top-k Risky Methods};
ν : RiskMethodVector[δ,γ,σ,,α, ω]
δ : {# of loops in the method, value: [0, n)};
γ : {# of instructions in critical sections, value: [0, n)};
σ : {# of method invocations, value: [0, n)};
 : {# of times appeared as callee, value: [0, n)};
α : {a lock-sufﬁxed method/not, value: 0/1};
ω : {a watchdog monitoring method/not, value: 0/1};
ξ : {risky vector database of all the methods};
χ ←staticCodeAnalyzer(SSjar){χ is the superCFG}
for each system service S in the system server do
for each class C in S do
for each method M in C do
initialize(ν)
ν ← DepthFirstSearch(χ, ν, C, M)
//To collect and update relevant information in ν
ξ ← ξ + [ν, C, M ]
end for
end for
end for
for each system service S in the system server do
SSmethod ← queryRiskMethods(S, φ, ξ)
end for
android.server.am.ActivityManagerService:-broadcastIntentLocked()android.server.am.ActivityManagerService:-broadcastIntent()android.app.ActivityManagerNative:-broadcastIntent()android.app.IActivityManager:-broadcastIntent()Binder IPC/RPCandroid.app.ContextImp:-sendBroadcast()/.../sendOrderedBroadcast()android.app.ContextWrapper:-sendBroadcast()/.../sendOrderedBroadcast()1247