### 优化后的文本

#### 检查写者锁并成为写者线程
1. 检查写者锁并成为写者线程。
2. 绑定线程作为原生 pthread 创建，并附加到 Android 运行时。
3. 需要在 binder 机制的通信协议中启用未使用的 BR_FINISHED 命令。

我们已经向 Google Android 框架团队提出了这些防御解决方案。他们可能会在 AMS 中改进有问题的关键部分，以修补 ASV #1 和 #2，并根据建议修复 #3。他们仍在评估基于各种设计目标的其他防御/缓解措施的利弊。

### 相关工作
针对 Android 的攻击和防御已在文献 [28, 35, 34, 26, 52, 59, 43] 中提出。Chin 等人 [28] 描述了一种仅针对 Android 有序广播 API 的攻击（按默认设计，Android 允许有序广播的接收者在中间操纵或丢弃广播意图）。不同的是，我们的 ASV #1 和 #2 针对所有类型的广播 API（例如 sendBroadcast 等）以及其他 activitymanager 函数。Android 权限重新委托攻击 [35, 26, 47, 53, 33] 已经得到了广泛研究。Long 等人 [47] 设计了一种静态分析工具来发现应用组件之间的权限重新委托漏洞。Pileup 攻击 [55] 利用了 packagemanager 服务中的一个缺陷，针对系统更新。我们描述了一种新的危害类型，并设计了一个高效的工具来帮助在各种系统服务中发现 ASVs。PoC 攻击和相关的系统级防御措施已设计完成。基于虚拟化的 Android 防御 [22, 54] 可以帮助缓解一些已发现的 ASVs，但某些共享硬件资源（如单用户屏幕在可信/不可信 VM 实例之间）仍可能受到攻击（例如 ASV#3 和 #4 中的屏幕视图操纵问题）。

以前的研究 [37, 50, 49] 广泛探讨了 Android 应用程序中的漏洞。Hsiao 等人 [37] 构建了一个系统来识别 Android 应用程序中的已知和未知有害并发错误。Ravindranath 等人 [50] 设计了一种 Android 应用程序检测方法，以帮助开发人员监控应用程序性能。我们的工作主要集中在 Android 框架方面，其中包含大多数关键系统服务，为 Android 应用程序提供基本支持。由于 Android 中特定的唤醒锁设计使得开发者难以使用，Pathak 等人 [49] 描述了这个问题并检测到了一种新的能量漏洞。我们的工作描述并检测了一种新的漏洞类型，并对其进行了全面分析。

DoS 攻击是一个广泛研究的领域 [44, 56, 23, 32]。Armando 等人 [23] 利用 Zygote 进程中松散保护的 Unix 套接字权限来无限制地创建进程，从而对 Android 发起 DoS 攻击，并通过设置正确的访问控制位来解决问题。然而，我们的 ASVs 是由系统服务器的设计引起的一种更普遍的漏洞。它根植于程序复杂性和安全性之间的根本矛盾，比修复更容易被利用，这可能出现在具有类似设计的其他系统中。之前，Martin 等人 [32] 使用形式化方法来识别 IEEE 802.11w 协议中的死锁漏洞，导致 DoS 攻击。检测 Android 上基于死锁的 ASVs 是我们未来的工作。

### 结论
我们对 SS 的新理解揭示了其并发控制方案和故障恢复机制中的通用设计缺陷。我们将此进一步描述为一种通用漏洞（即 ASV）。然后，我们构建了一个工具，帮助高效地分析 2,154 个风险方法，揭示了两个关键服务（即 activitymanager 和 windowmanager）中的四个先前未知的 ASVs。我们进一步轻松地在各种场景下利用 ASVs 制作了几个 PoCs。Google 立即确认了我们的发现，并提出了短期缓解措施、CC 机制的改进以及 SS 的智能看门狗方案。我们的研究表明，一些看似整洁且健壮的设计选择可能导致意外缺陷。因此，在快速发展的移动系统中，关键组件的安全设计变得非常重要。

### 致谢
我们非常感谢匿名评审者的深刻评论和建设性反馈。特别感谢 William Enck 博士对我们准备最终版本的详细指导。本研究部分得到了 NSF CCF-1320605, AROW911NF-13-1-0421 (MURI), NSF SBE-1422215, NSFC 61100226 和北京自然科学基金 4144089 的资助。本文所表达的观点、发现和结论是作者的观点，并不一定反映国家科学基金会和陆军研究办公室的观点。

### 参考文献
[略]

### 附录
#### 附录 A
**算法 1：构建所有 SS 方法的向量数据库并从数据库中查询候选风险方法的伪代码**
输入：
- SSjar: {Android 系统服务器 Jar 文件}
- φ: {指定查询标准}

输出：
- SSmethod: {排名前 k 位的风险方法}
- ν: RiskMethodVector[δ, γ, σ, Λ, α, ω]
  - δ: {方法中的循环数，值: [0, n)}
  - γ: {临界区中的指令数，值: [0, n)}
  - σ: {方法调用次数，值: [0, n)}
  - Λ: {作为被调用者出现的次数，值: [0, n)}
  - α: {是否为带锁后缀的方法，值: 0/1}
  - ω: {是否为看门狗监控方法，值: 0/1}
- ξ: {所有方法的风险向量数据库}

χ ← staticCodeAnalyzer(SSjar) {χ 是超级 CFG}

对于系统服务器中的每个系统服务 S:
  对于 S 中的每个类 C:
    对于 C 中的每个方法 M:
      初始化(ν)
      ν ← DepthFirstSearch(χ, ν, C, M) {收集并更新 ν 中的相关信息}
      ξ ← ξ + [ν, C, M]

对于系统服务器中的每个系统服务 S:
  SSmethod ← queryRiskMethods(S, φ, ξ)

```
android.server.am.ActivityManagerService:-broadcastIntentLocked()
android.server.am.ActivityManagerService:-broadcastIntent()
android.app.ActivityManagerNative:-broadcastIntent()
android.app.IActivityManager:-broadcastIntent()
Binder IPC/RPC
android.app.ContextImp:-sendBroadcast()/.../sendOrderedBroadcast()
android.app.ContextWrapper:-sendBroadcast()/.../sendOrderedBroadcast()
```