### Time Performance

In the cases of FBJS [9] and AD-safe [6], untrusted scripts are allowed to make calls to an access-controlled Document Object Model (DOM) interface. This approach incurs some overhead but provides additional control. The drawback of using a restricted JavaScript subset is that many advertisers' scripts may not conform to this subset, necessitating re-development of ad script code. In contrast, ADJAIL does not impose new language requirements or restrict JavaScript features used in ad scripts. The only effort required from a publisher integrating ADJAIL is to specify policies that reflect site security practices.

### Code Transformation Approaches

Many recent approaches [37, 53, 22, 14, 34, 10, 35] have been developed to transform untrusted JavaScript code to interpose runtime policy enforcement checks. These methods cover various aspects by which third-party content can subvert policy enforcement. Since these works aim at general JavaScript security, they are not specialized for securing ads for publishers, where the main issue is ensuring transparent interposition to avoid conflicts with ad targeting and billing strategies employed by ad networks. A recommended method for dynamically transforming JavaScript by a publisher involves using a proxy (e.g., for handling scripts sourced from an external URI). However, routing all ad script HTTP requests through a script-transformation proxy may appear suspicious to click-fraud detection mechanisms [2] employed by the ad network.

### Publisher-Browser Collaboration

An alternative approach is for a publisher to instruct a browser to enforce the publisher’s policies on third-party content, leaving the enforcement entirely to the browser. This collaborative approach is effective in the long term for enforcing a wide range of security policies, as illustrated in BEEP [21], End-to-End Web Application Security [8], Content Security Policies [43], and ConScript [33]. The main advantages of this approach are that it can enforce fine-grained policies with minimal overhead. The primary drawback is that today's browsers do not agree on a standard for publisher-browser collaboration, leaving a significant gap in near-term protection from malicious third-party content.

## Architecture

Let us revisit our running example of a publisher who wishes to carry ads on a webmail application. The publisher embeds an ad network’s JavaScript code within the HTML of the webmail page to enable ads. In the benign case, this JavaScript code scans the webmail user’s email message body to find keywords for contextual ad targeting and then dynamically loads a relevant ad. For simplicity, we refer to the ad network’s JavaScript and an advertiser’s JavaScript (the latter loaded dynamically by the former) as the ad script. This section provides a high-level overview of how we prevent the ad script from performing various attacks against the publisher and end user.

### Initial Confinement

Our approach initially confines the ad script to a hidden, isolated environment. This hidden environment is locally and logically isolated [27, 44] rather than requiring additional physical and remote resources [31]. We then detect the effects of the ad script that would normally be observable by the end user if the script were not confined. These effects are replicated, subject to policy-based constraints, outside the isolated environment for the user to observe and interact with. User actions are then forwarded to the isolated environment to allow for a response by the ad script. Thus, we facilitate a controlled cycle of interaction between the user and the advertisement, enabling dynamic ads while blocking several malicious behaviors.

### Ad Confinement Using Shadow Pages

As a basic policy, the publisher wants to ensure that the ad script does not access the publisher’s private script data. If this policy is not enforced, the ad script can read the sensitive `document.cookie` variable and leak its contents, enabling the recipient of the cookie to hijack the authenticated user’s webmail session. Furthermore, the ad script should not be allowed to read confidential user data from the page (e.g., email message headers and address book entries). Such data is normally accessible via the browser’s DOM script interfaces.

To enforce the publisher’s policy, we leverage the browser's enforcement of the Same-Origin Policy (SOP) [50], an access control mechanism available in all major JavaScript-enabled browsers. The SOP prevents mutually distrusting websites from accessing each other’s JavaScript code and data. As a script instantiates code and data items, the browser places each item under the ownership of the script’s origin principal. Origin principals are identified by the domain, protocol, and port number components of the script’s Uniform Resource Identifier (URI). Whenever a script references code or data, both the script and the item being accessed must be owned by the same origin; otherwise, access is denied.

To enforce the publisher’s ad script policy, we first remove the ad script from the publisher’s webmail page. Next, we embed a hidden `<iframe>` element in the page. This `<iframe>` has a different origin URI, invoking the browser’s SOP and imposing a code and data isolation barrier between the contents of the `<iframe>` and the enclosing page. Finally, we add the ad script to the page contained in the hidden `<iframe>`. We refer to the hidden `<iframe>` page as the shadow page and the enclosing webmail page as the real page. This transformation is depicted in Figure 2.

In the process of rendering the real page, the browser renders the shadow page, executing the ad script within. Our use of the SOP mechanism effectively relegates the ad script to an isolated execution environment. All access by the ad script to code or data in the real page will be blocked due to SOP enforcement. Furthermore, the ad script cannot retrieve confidential address book data via DOM interfaces, as access to those APIs is denied by the SOP. Thus, the publisher’s basic policy is enforced because (1) all such ad scripts are relocated to the shadow page, and (2) the browser correctly enforces the SOP.

### Controlled User Interaction with Ads

Consider an ad script that loads a product image or banner. Normally, the banner appears on the real page, but since the ad script runs in the shadow page, the banner is rendered on the shadow page instead. Without further steps, the webmail user viewing the real page will never see this banner because the shadow page is hidden. We now describe how the user can interact with the shadow page ad through content mirroring (§3.2.1) and event forwarding (§3.2.2), subject to policy-based constraints (§3.2.3).

#### Ad Mirroring

A detailed view of the real and shadow pages that depicts mirroring of ad content is shown in Figure 3. We add Tunnel Script A to the shadow page, which monitors page changes made by the ad script and conveys those changes to the real page via inter-origin message conduits [1, 20]. We add complementary Tunnel Script B to the real page, which receives a list of shadow page changes and replicates their effects on the real page. Thus, when the ad script creates a banner image on the shadow page, Tunnel Script A sends a description of the banner to Tunnel Script B, which then creates the banner on the real page for the end user to see.

Special care is taken to prevent sending redundant HTTP requests to the ad server during the mirroring process, as such requests can interfere with an ad network’s record-keeping and billing operations. These details are discussed in §4.3.2.

#### Event Forwarding

Ads sometimes respond in complex ways to user-generated events such as mouse movements and clicks. To facilitate this interaction, we capture events on mirrored ad content and forward these events (Figure 3) to the shadow page for processing. For example, if the ad script registers an `onmousemove` event handler with the original banner image, we register our own (trusted) event handler on the mirrored banner image. Our handler listens for the mouse-move event and forwards it to the shadow page’s banner via an inter-origin message.

If the ad script responds to the mouse-move event by altering the banner or producing new ad content, these effects are replicated on the real page by our mirroring strategy outlined above.

#### Ad Policies

All messages sent between the real and shadow pages are mediated by our policy enforcement mechanism. This mechanism enforces policy rules specified by the publisher as annotations in the real page HTML. For the webmail example in Figure 3, the following access control policies are specified (shown in bold):

1. `<div id="message-body" policy="read-access: subtree;">Message body text here...</div>`
2. `<div id="sidebar" policy="write-access: subtree;">Sidebar content here...</div>`

The policy in line 2 allows the ad script read-only access to the email message body. Read-only access is enforced by initially populating the shadow page with content from the real page (refer to the Message Body regions in Figure 3). If the ad script makes changes to read-only content, those changes are not mirrored back to the real page. Any attempts to mirror those changes to the real page message body (perhaps by a compromised Tunnel Script A) are denied.

The policy in line 5 permits the ad script write access to the sidebar on the right of the email message body. This is the region where the ad banner is to appear. When the ad script creates content in the shadow page sidebar, this policy allows our mirroring logic to reproduce that content on the real page sidebar.

An implicit policy restriction on all mirrored content is that executable script code cannot be written to the real page. To enforce this restriction, we only mirror items conforming to a configurable whitelist of static content types. Note that this script injection threat is distinct from cross-site scripting (XSS), which the site can defend against using well-researched approaches (e.g., [46]).

The full policy language (detailed in §4.1) supports content restrictions to block Flash, deny the use of images (for text-only ads), restrict the size of ads, and more. These constraints can be tailored to the minimum compatibility requirements of individual ad networks, which we show in §5 can prevent attacks such as clickjacking [17].

Our policy enforcement mechanism is implemented on the real page as part of Tunnel Script B. As stated earlier, the ad script cannot access the real page (including Tunnel Script B) due to SOP enforcement. Therefore, the ad script cannot tamper with our policy enforcement mechanism.

## Implementation

The implementation of ADJAIL is described in the context of a single webmail page with an embedded ad, integrated with our defense solution. We present the policy language used to restrict ads in §4.1. Then, in §4.2, we describe how the real and shadow pages are constructed. §4.3 explains how we facilitate interaction between the two.

### Policies

By default, ad script is given no access to any part of the real page unless granted by policies (i.e., default-deny). An implicit policy we always enforce is that ad script cannot inject script code onto the real page, nor execute script code with the privileges of the real page. We now describe in detail the individual permissions granted by policies, how policies are specified, and how multiple policies are combined to form a composite policy.

#### Permissions

ADJAIL supports a basic set of permissions that control how ads appear on the real page and how ads can behave, summarized in Table 1. We define a policy as an assignment of values to each of the permissions. Our permissions have been designed iteratively by studying the requirements of ads from several ad networks, and our results presented in §5 show that the supported permissions can be composed to form useful advertisement policies.

| Permission | Values | Description / Effects |
|------------|--------|-----------------------|
| `read-access` | `none†∗`, `subtree` | Controls read access to element’s attributes and children. |
| `write-access` | `none†∗`, `append`, `subtree` | Controls write access to element’s attributes and children. `Append` is not inherited. |
| `enable-images` | `deny†∗`, `allow` | Enables support in the whitelist for `<img>` elements, CSS `background-image` and `list-style-image` properties. |
| `enable-iframe` | `deny†∗`, `allow` | Enables `<iframe>` elements in the whitelist. |
| `enable-flash` | `deny†∗`, `allow` | Enables `<object>` elements of type `application/x-shockwave-flash` in the whitelist. |
| `max-height`, `max-width` | `0∗`, `n%`, `n cm`, `n em`, `n ex`, `n in`, `n mm`, `n pc`, `n pt`, `n px`, `none†` | Sets maximum height/width of element to `n` units. Smaller dimensions are more restrictive. When composing values specified in incompatible units, the most ancestral value wins. |
| `overflow` | `deny†∗`, `allow` | Content can overflow the boundary of the containing element if allowed. |
| `link-target` | `blank∗`, `top`, `any†` | Forces targets of `<a>` elements to `blank` or `top`. Not forced if set to `any`. |

Part of our policy enforcement is a whitelist of HTML elements, attributes, and CSS properties that ad script is allowed to write to the real page. Although this whitelist can be modified by the publisher at a low level, we provide a set of default values that cover common ad requirements.