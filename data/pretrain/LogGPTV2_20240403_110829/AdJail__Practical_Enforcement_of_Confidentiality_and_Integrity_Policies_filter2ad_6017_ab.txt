time performance.
In the cases of FBJS [9] and AD-
safe [6], untrusted scripts are allowed to make calls to
an access-controlled DOM (document object model) in-
terface, which incurs some overhead but affords additional
control. The cost in employing a restricted JavaScript sub-
set is that ads authored by many advertisers may not con-
form to this subset, and therefore require re-development
of ad script code. In contrast, ADJAIL neither imposes the
burden of new languages nor places restrictions on Java-
Script language features used in ad scripts. The only effort
required from a publisher that incorporates ADJAIL is to
specify policies that reﬂect site security practices.
Code transformation approaches Many recent ap-
proaches [37, 53, 22, 14, 34, 10, 35] have been pursued to
transform untrusted JavaScript code to interpose runtime
policy enforcement checks. These works cover the many
diverse aspects by which third-party content may subvert
policy enforcement checks. Since these works are aimed
at general JavaScript security, they are not specialized
to the problem of securing ads for publishers, where the
main issue is ensuring transparent interposition. This is to
avoid any conﬂict with ad targeting and billing strategies
employed by ad networks. The recommended method of
transforming JavaScript dynamically by a publisher in-
volves using a proxy (e.g., for handling scripts sourced
from an external URI). However, routing all ad script
HTTP requests through a script-transformation proxy may
appear suspicious to click-fraud detection mechanisms [2]
employed by the ad network.
Publisher-browser collaboration An alternative ap-
proach is for a publisher to instruct a browser to enforce
the publisher’s policies on third-party content, leaving
the enforcement entirely to the browser. This publisher-
browser collaborative approach is a sound one in the
long term to enforce a wide range of security policies
as illustrated in BEEP [21], End-to-End Web Applica-
tion Security [8], Content Security Policies [43] and Con-
Script [33]. The main positives of this approach are that
it can enforce ﬁne-grained policies with minimal over-
heads. The primary drawback is that today’s browsers
do not agree on a standard for publisher-browser collab-
oration, leaving a large void in near-term protection from
malicious third-party content.
3 Architecture
Let us revisit our running example of a publisher who
wishes to carry ads on a webmail application. Recall
that the publisher embeds an ad network’s JavaScript code
within the HTML of the webmail page to enable ads. In
the benign case, this JavaScript code scans the webmail
user’s email message body to ﬁnd keywords for contex-
tual ad targeting, then dynamically loads a relevant ad. For
simplicity, we refer to the ad network’s JavaScript and an
advertiser’s JavaScript (the latter loaded dynamically by
the former) as the ad script. This section gives a high
level overview of how we prevent the ad script from per-
4
forming a variety of attacks against the publisher and end
user.
Our approach is to initially conﬁne the ad script to a
hidden isolated environment. The hidden environment is
locally and logically isolated [27, 44] as opposed to re-
quiring additional physical and remote resources [31]. We
then detect effects of the ad script that would normally be
observable by the end user, had the script not been con-
ﬁned by our approach. These effects are replicated, sub-
ject to policy-based constraints, outside the isolated envi-
ronment for the user to observe and interact with. User
actions are then forwarded to the isolated environment to
allow for a response by the ad script. Thus we facilitate
a controlled cycle of interaction between the user and the
advertisement, enabling dynamic ads while blocking sev-
eral malicious behaviors.
3.1 Ad conﬁnement using shadow pages
As a basic policy, the publisher wants to ensure ad script
does not access the publisher’s private script data.
If
this policy is not enforced, ad script can read the sen-
sitive document.cookie variable and leak its contents,
enabling the recipient of the cookie to hijack the authen-
ticated user’s webmail session. Furthermore, ad script
should not be allowed to read conﬁdential user data from
the page (e.g., email message headers and address book
entries). Such data is normally accessible via the brow-
ser’s document object model (DOM) script interfaces.
To enforce the publisher’s policy, we leverage browser
enforcement of the same-origin policy (SOP) [50], an ac-
cess control mechanism available in all major JavaScript-
enabled browsers. Web browsers enforce the SOP to pre-
vent mutually distrusting web sites from accessing each
other’s JavaScript code and data. As a script instantiates
code and data items, the browser places each item un-
der the ownership of the script’s origin principal. Origin
principals are identiﬁed by the domain, protocol and port
number components of the script’s uniform resource iden-
tiﬁer (URI). Whenever a script references code or data,
both the script and item being accessed must be owned by
the same origin, else access is denied.
To enforce the publisher’s ad script policy, we begin by
removing the ad script from the publisher’s webmail page.
Next, we embed a hidden  element in the page.
This  has a different origin URI, thus invoking
the browser’s SOP and thereby imposing a code and data
isolation barrier between the contents of the 
and enclosing page. Finally, we add the ad script to the
page contained in the hidden . We refer to the
hidden  page as the shadow page, and the en-
closing webmail page as the real page. This transforma-
tion just described is depicted in Figure 2.
In the process of rendering the real page, the browser
renders the shadow page, executing the ad script within.
Our use of the SOP mechanism effectively relegates this
(a) Before
(b) After
Figure 2: Relocating the ad script to a hidden shadow page
invokes the browser’s same-origin policy for conﬁnement.
ad script to an isolated execution environment. All access
by ad script to code or data in the real page will be blocked
due to enforcement of the SOP. Furthermore, the ad script
can not retrieve conﬁdential address book data via DOM
interfaces, as access to those APIs are denied by SOP. We
can say the publisher’s basic policy is enforced, because
(1) all such ad scripts are relocated to the shadow page,
and (2) the browser correctly enforces the SOP.
3.2 Controlled user interaction with ads
Consider an ad script that loads a product image, or ban-
ner. Normally the banner appears on the real page, but
since the ad script runs in the shadow page, the banner
is rendered on the shadow page instead. Without further
steps, the webmail user viewing the real page will never
see this banner because the shadow page is hidden. We
now describe how the user is able to interact with the
shadow page ad by content mirroring (§3.2.1) and event
forwarding (§3.2.2), subject to policy-based constraints
(§3.2.3).
3.2.1 Ad mirroring
A detailed view of the real and shadow pages that depicts
mirroring of ad content is shown in Figure 3. We add
Tunnel Script A to the shadow page that monitors page
changes made by the ad script (
), and conveys those
changes (
) to the real page via inter-origin message
conduits [1, 20]. We add complementary Tunnel Script B
to the real page that receives a list of shadow page changes
and replicates their effects on the real page. Thus when ad
script creates a banner image on the shadow page, Tunnel
Script A sends a description of the banner to Tunnel Script
B, which then creates the banner on the real page for the
end user to see.
Special care is taken to prevent sending redundant
HTTP requests to the ad server during the mirroring pro-
cess, as such requests can interfere with an ad network’s
record keeping and billing operations. These details are
discussed at depth in §4.3.2.
5
Real PageAd ScriptReal PageShadow Page(hidden)Ad Script12body (perhaps by a compromised Tunnel Script A) are de-
nied.
The policy in line 5 permits the ad script write access to
the sidebar on the right of the email message body. This
is the region where the ad banner is to appear. When ad
script creates content in the shadow page sidebar, this pol-
icy allows our mirroring logic to reproduce that content
on the real page sidebar.
An implicit policy restriction on all mirrored content
is that executable script code can not be written to the
real page. To enforce this restriction, we only mirror
items conforming to a conﬁgurable whitelist of static con-
tent types. Note this script injection threat is distinct
from cross-site scripting (XSS), which the site can defend
against using well-researched approaches (e.g., [46]).
The full policy language (detailed in §4.1) supports
content restrictions to block Flash, deny the use of im-
ages (for text-only ads), restrict the size of ads, and more.
These constraints can be tailored to the minimum compat-
ibility requirements of individual ad networks, which we
show in §5 can prevent attacks such as clickjacking [17].
Our policy enforcement mechanism is implemented on
the real page as part of Tunnel Script B. As stated earlier,
the ad script can not access the real page (including Tunnel
Script B) due to SOP enforcement. Therefore ad script can
not tamper with our policy enforcement mechanism.
Implementation
4
The implementation of ADJAIL is described in the context
of a single webmail page with an embedded ad, which is
integrated with our defense solution. We present the pol-
icy language used to restrict ads in §4.1. Then in §4.2 we
describe how the real and shadow pages are constructed.
§4.3 explains how we facilitate interaction between the
two.
4.1 Policies
By default, ad script is given no access to any part of the
real page unless granted by policies (i.e., default-deny).
An implicit policy we always enforce is that ad script can
not inject script code onto the real page, nor execute script
code with privileges of the real page. We now describe
in detail the individual permissions granted by policies,
how policies are speciﬁed, and how multiple policies are
combined to form a composite policy.
Permissions ADJAIL supports a basic set of permissions
that control how ads appear on the real page and how ads
can behave, summarized in Table 1. We deﬁne a policy as
an assignment of values to each of the permissions. Our
permissions have been designed iteratively by studying re-
quirements of ads from several ad networks, and our re-
sults presented in §5 show the supported permissions can
be composed to form useful advertisement policies.
The permissions read-access and write-access
6
Figure 3: Overview of ADJAIL integrated with a webmail ap-
plication. Ad script is given read-only access to email message
body for contextual targeting purposes. Ad script can write to
designated area to right of message body. Conﬁdential data such
as address book and mail headers are inaccessible to ad script.
3.2.2 Event forwarding
Ads sometimes respond in complex ways to user gener-
ated events such as mouse movement and clicks. To fa-
cilitate this interaction, we capture events on mirrored ad
content and forward these events (Figure 3,
) to the
shadow page for processing. For example, if the ad script
registers an onmousemove event handler with the original
banner image, we register our own (trusted) event handler
on the mirrored banner image. Our handler listens for the
mouse-move event and forwards it to the shadow page’s
banner via an inter-origin message.
If the ad script re-
sponds to the mouse-move event by altering the banner or
producing new ad content, these effects are replicated on
the real page by our mirroring strategy outlined above.
3.2.3 Ad policies
All messages sent between the real and shadow pages are
mediated by our policy enforcement mechanism. This
mechanism enforces policy rules which are speciﬁed by
the publisher as annotations in the real page HTML. For
the webmail example in Figure 3, the following access
control policies are speciﬁed (shown in bold):
1 
Message body text here...
policy="write-access: subtree;">
The policy in line 2 allows the ad script read-only ac-
cess to the email message body. Read-only access is en-
forced by initially populating the shadow page with con-
tent from the real page (ref. Message Body regions in
Figure 3). If ad script makes changes to read-only content,
those changes are not mirrored back to the real page. Any
attempts to mirror those changes to the real page message
HeadersAddress BookMessageBodyMirrored AdReal PageTunnel Script BWebmail UIShadow PageMessageBodyAdAd ScriptAd ContentEventsTunnel Script ANo AccessRead-Only AccessRead-Write Access1233Permission
read-access
write-access
enable-images
enable-iframe
enable-flash
max-height,
max-width
overflow
link-target
Values
none†∗, subtree
none†∗, append,
subtree
deny†∗, allow
deny†∗, allow
deny†∗, allow
0∗, n%, n cm, n em,
n ex, n in, n mm, n pc,
n pt, n px, none†
deny†∗, allow
blank∗, top, any†
Description / Effects
Controls read access to element’s attributes and children.
Controls write access to element’s attributes and children. Append is not
inherited.
Enables support in the whitelist for  elements, CSS
background-image and CSS list-style-image properties.
Enables  elements in whitelist.
Enables  elements of type
application/x-shockwave-flash in whitelist.
Sets maximum height / width of element to n units. Smaller dimensions are
more restrictive. When composing values speciﬁed in incompatible units,
most ancestral value wins.
Content can overﬂow boundary of containing element if allowed.
Force targets of  elements to blank or top. Not forced if set to
any.
Table 1: Permissions that can be set in policy statements. ∗Most restrictive value. †Default value.
control what parts of the page ad script may read from
or write to. Of particular interest is the append set-
ting for write-access. This level of access allows ad
script to add child content to an element, but neither read
nor modify existing children of the element. Any ap-
pended children are automatically given a policy attribute
set to write-access: subtree;. Some ads, such as
the clock ad (#4) in Figure 1, require the append permis-
sion to add ﬂoating (i.e., absolutely positioned) content to
the  element. In supporting these ads, we don’t
want to grant subtree write access to the  ele-
ment, as that would enable a malicious ad to overwrite the
entire page. Granting append access in this case is safer
as it adheres to the principle of least privilege [40].
Part of our policy enforcement is a whitelist of HTML
elements, attributes and CSS properties that ad script is
allowed to write to the real page. Although this white-
list can be modiﬁed by the publisher at a low level, we