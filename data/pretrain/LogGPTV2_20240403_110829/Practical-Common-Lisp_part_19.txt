迭代开始之前，step-form将被求值并把新值分配给var。step-form是可选的，如果它没有给
在迭代的每一步里，所有变量的step-form(步长形式）将在分配任何值给变量之前被求值。
②另一个推荐使用DOTIMES的理由是，其宏展开将可以包含允许编译器生成更有效代码的类型声明。
①一个DO的变体DO*，它会在求值后续变量的步长形式之前为每个变量赋值。关于它的更多细节，请查阅你喜爱的
这个例子还阐述了Do的另一种特征—由于可以同时推进多个变量，所以往往根本不需要-
当end-test-form求值为真时，result-form（结果形式）将被求值，且最后一个结果形
 在每次迭代开始时以及所有循环变量都被指定新值后，énd-test-form会被求值。只要其
(dotimes (i 4) (print i))
注意，该例的结果形式被省略了。不过这种用法对DO来说没有特别意义，因为用DOTIMES
(do ((i 0 (1+ i)))
该模板中的六个括号是DO结构本身所必需的。一对括号来围住变量声明，一对用来围住终止
Common Lisp参考书。
(do (variable-definition*)
(do((n 0(1+ n))
(print i))
statement*)
（>=
(end-test-form result-form*)
(cur 0 next)
i4))
(+ cur next)))
?
www.TopSage.com
7.6DO
75
---
## Page 93
循环构造，如果不将它们用po那嗨涩语法包装起来，它们将难于被人理解。所以他们认为最好用
是完全非Lisp化的（换句话说，没有足够的括号)。LOOP的爱好者们则反驳说，问题在于复杂的
的Loop语言。至少一位CommonLisp的最初设计者就很讨厌它。Loop的贬低者们抱怨它的语法
中止。例如，可以使用一个简化的LOOP来写出前面的DO循环：
量的无限循环。其框架看起来像这样：
方式。
化。如果需要用宏来做其中的一件事（或同时几件），那么LOOP宏可以提供一种更容易表达的
一种稍显冗长的语法来提供某些逻辑线索。
表、
用的DO。不然还能怎样？
7.7
列表。
它保持循环，每分钟打印一个“Waiting”。注意，就算没有循环变量，仍然需要有那个空变量
LOOP宏事实上有两大类一
、向量、哈希表和包，或是在循环时以多种方式来聚集值：收集、计数、求和、最小化和最大
然而，结果是有少量的循环用法一次又一次地产生出来，例如在多种数据结构上的循环：列
76
主体形式在每次通过循环时都将被求值，整个循环将不停地迭代，直到使用RETURN来进行
简单的情形可以使用DOLIST和DOTIMES。但如果它们不符合需要，就需要退而使用完全通
例如，下面是一个地道的Do循环，它将把从1到10的数字收集到一个列表中：
而扩展的LooP则是完全不同的庞然大物。值得注意的是，并非所有的Lisp程序员都喜爱扩展
(loop
(loop
(do()
最后，下面循环演示了一个不绑定变量的Do循环。在当前时间小于一个全局变量值的时候，
(do ((n 0 (1+ n))
另一个例子是一个没有循环体的斐波那契数计算循环：
(do((nums nil）(i 1(l+ i)))
body-form*)
(sleep 60))
(when (> (get-universal-time) *some-future-date*)
强大的LOOP
(sleep 60))
(format t "Waiting~%")
((> (get-universal-time) *some-future-date*))
(return))
((= 10 n) cur))
(next 1 (+ cur next)))
(cur 0 next)
第7章 
"Waiting ~%")
宏：标准控制构造
一简化的和扩展的。简化的版本极其简单，就是--个不绑定任何变
www.TopSage.com
---
## Page 94
方库来实现它。
它也只是一个宏而已。如果它没有被包括在标准库之中，你也可以自己实现它或是借助一个第三
用于扩展基本语言的。尽管LooP提供了它自己的语言用来表达循环构造，但它并没有抹杀Lisp
本理解起来就几乎可以像一个英语句子那样简单。
式并且认识用于构建列表的PUSH/NREVERSE用法就可以了。但它并不是很直观。而它的LOOP版
的Lisp代码。
的其他优势。
then和to都是一些循环关键字，
“第22章将介绍LOOP的细节，但目前值得注意的是，我们通过它可以再次看到，宏是如何被
① 循环关键字容易让人误解的一点在于它们不是关键字符号。事实上，LOOP并不关心这些符号来自什么包。当LOOP
另外，值得再次指出的是，尽管LOOP宏相比诸如WHEN或者UNLESS这样的宏复杂了许多，但
以上就是我们对基本控制构造宏的介绍。现在可以进一步了解如何定义自己的宏了。
符号across、and、below、collecting、counting、finally、for、from、summing、
下面这个例子用来计算第11个斐婆那契数，它类似于前面使用po循环的版本：
(loop for i below 10 
这个用来统计一个字符串中元音字母的个数：
(loop for x from 1 to 10 summing (expt x 2)) → 385 
接下来是一些关于LOOP简单用法的例子。下例可以对前十个平方数求和：
(loop for i from 1 to 10 collecting i) → (1 2 3 4 5 6 7 8 9 10)
ubop Xzet aua 1aao sdung xog umoiq xotnb auau ssoxoe x roy doo)
一个经验丰富的Lisp程序员将毫不费力地理解这些代码一
将它们用做其他目的，如作为函数或变量的名字，也是没有关系的。
些真正的关键字，因为它们也有正确的名字。但多数人只用普通符号。由于循环关键字仅被用作句法标记，因此
宏解析其主体时，它将等价地考察任何适当命名的符号。如果你想的话，甚至可以使用诸如：for和：across这
((> i i0) (nreverse nums))
and 
counting (find x "aeiou")）→ 11
。虽然循环关键字是按照循环的语法来解析的，但一个LoOP中的其余代码都是正常
finally (return
and
a = 0 then b
then
(+ba)
a))
，它们的存在表明当前正在使用扩展的LOOP。?
www.TopSage.com
一只要理解一个Do循环的基本形
7.7强大的LOOP
---
## Page 95
些钱将其程序员团队扩大了一倍。但不知为何，没有人想到要雇用其他人来帮助Mac。很快他就
注释的内容来编写他的代码，再将其发还给最初的程序员。
行不了。但就算这些程序完成了，Mac也不知道该用怎样的输人来运行它们。因此，他只是基于
代码，然后再用其替换掉程序中的注释。Mac从未运行过这些程序一程序尚未完成，他当然运
公司就有了一大堆无法运行的程序，因为它们全都是代表着尚需编写代码的注释。
更不幸的是，由于很懒情，他们也很讨厌回过头去实际编写那些注释所描述的代码。不久，这个
需要编写大量单调乏味的代码时，他们往往会写下一个注释来描述想要在该位置上编写的代码。
带来了很大的不便。不幸的是，这个公司的程序员们虽然杰出却非常懒情。在他们的程序中，当
每次，任何不能用函数来定义或是用特殊操作符来完成的事情都不得不完全通过手写来实现，这
8.1
说并不真实，然而通过这种方式，你倒是可以思考一下宏的工作方式，以此来缓解一下困惑。
但同时它也是经常导致新程序员困惑的主要原因。下面来讲个故事，尽管从历史或技术意义上来
它还有着完全不同类型的抽象。
它们允许你抽象那些分散注意力的细节。尽管有这些相似性，但宏的操作层面与函数不同，而且
在许多方面，它们看起来只是一些有趣的函数一
宏能够用于在核心语言和标准库之上创建抽象，从而使你更直接地表达想表达的事物。
宏也无非是可以让每个Lisp程序员创建他们自己的标准控制构造变体罢了。作为语言的一部分，
在Mac的帮助下，不久之后，所有的程序都完成了，公司通过销售它们赚了很多钱，并用这
走投无路之下，老板雇用了一个初级程序员Mac。他的工作就是找到这些注释，编写所需的
具有讽刺意义的是，也许对于宏的正确理解，最大的障碍是它们已经很好地集成到了语言里。
很久以前，有一个由Lisp程序员们所组成的公司。那个年代相当久远，所以Lisp还没有宏。
一旦理解了宏与函数之间的区别，你就会发现这门语言中宏的紧密集成所带来的巨大优势
相比于C语言的函数可以让每个C程序员编写C标准库中的函数的简单变体，CommonLisp的
Mac的故事：只是一个故事
第8章
如何自定义宏
www.TopSage.com
一它们用Lisp写成，接受参数并返回结果。同时
大家网
---
## Page 96
运行环境完全不同。也就是说，在宏展开期无法访问那些仅存在于运行期的数据。正如Mac无法
代码（包括那些由宏生成的代码）实际运行的阶段。
时期被称为宏展开期（macro expansion time），这和运行期（runtime）是不同的，后者是正常的
程序。只有当所有的宏都被完全展开并且产生的代码被编译后，程序才可以实际运行。宏运行的
有其他内容）之间的区别。当编写宏时，你是在编写那些将被编译器用来生成代码并随后编译的
8.2
到今天，Mac还领着薪水，并且时不时地会从某个热带地区给程序员们发一张明信片。
在其被其他注释调用时运行它们。程序员们觉得没有理由告诉老板Mac不再来办公室了。因此直
需要用电子邮件将注释发给Mac了，编译器会将那些DEFMACRO中所定义的函数保存下来，并
的。但是编译器仍在正常工作—这怎么可能？看起来Mac对编译器做了最后一个修改：现在不
所有东西上都积了薄薄的一层灰，一个桌子上还放着几本热带地区的旅行手册，而电脑则是关着
数。由于注释中的Lisp程序做了所有实际的工作，跟上这些电子邮件的进度完全没有问题。Mac手头
馈那些来自编译器的含有DEFMACRO注释的电子邮件，以及调用那些DEFMACRO里所定义的函
于程序员们仍然很懒惰，这个写法很快简化成“DEF.MAC.R/O”，接着又被简化为“DEFMACRO"。
释中的代码所使用的函数。为了使Mac更容易地辨别那些只含有定义而不必立即回复的注释，程序
替换成用符号x和y作为参数来运行上面提到的那个函数所得到的结果。”
使用，我将在我的其他一些注释里用到它。”同一个程序里还有如下的注释：“Mac，将这个注释
数定义以及另一个注释，该注释为：“Mac，不要在这里写任何代码，但要把这个函数留给以后
的代码的Lisp程序。这对Mac来说很简单；他只需运行这个程序并将结果发给编译器就好了。
一个花费大量时间用文字来描述他想要的代码的程序员，在他的注释里写人了一个可以生成他想要
他会犯错误。
化，Mac也很难跟上程序员的进度。他尽可能小心地工作，但有时，尤其是当注释不够清楚时，
它就会将注释以电子邮件的形式发给他并等待他将替换的代码传送回来。然而，就算有了这个变
上，Mac对程序员们使用的编译器做了一个小小的更改。从那以后，只要编译器遇到一个注释，
开始单枪匹马地同时协助几十个程序员了。为了避免将他所有的时间都花在搜索源代码的注释
牢记这一区别很重要，因为运行在宏展开期的代码与那些运行在运行期的代码相比，它们的
几个月以后，程序员们意识到已经很长时间没人见过Mac了。当他们去他的办公室时，发现
不久以后，这些给Mac的注释中再没有实际可读的英语了。Mac每天要做的事情就是阅读并反
这项技术在几天里就迅速流行起来，多数程序都含有数十个注释，它们定义了那些只被其他注
接下来又出现了一种创新。有一个程序员在他程序的开始处写了一段备注，其中含有一个函
理解宏的关键在于必须清楚地知道那些生成代码的代码(宏)和那些最终构成程序的代码(所
不过程序员们注意到了，他们将注释写得越精确，Mac就越有可能发回正确的代码。一天，
宏展开期和运行期
www.TopSage.com
8.2宏展开期和运行期
79
---
## Page 97
过我可以描述一个通用的宏编写过程，它适用于从最简单到最复杂的所有宏。
述
DEFUN框架很相似。
8.3
作用仍然是生成做某些事情的代码，而非直接做任何事情。
展开。无论哪种情况，总是向宏传递那些代表宏形式中子形式的未经求值的Lisp对象，并且宏的
的宏，然后解释执行那些宏所生成的代码，也可能是直接解释一个形式并在每次遇到宏的时候才
一起。同样，语言标准并未规定解释器处理宏的具体方式—它可能在被解释的形式中展开所有
面的代码：
那个反引用表达式将随后通过插人condition的值，并将body的值嵌入pRoGN的主体来生成下
定到形式（>x 10）上，而形式（print‘big)会被收集到一个列表中成为&rest body形参的值。
那么当foo中的代码被编译时，WHEN宏将以那两个形式作为实参来运行。形参condition会被绑
定义而成。
列表，也即（>×10）以及（print‘big）。假设wHEN确如前--章中所见的那样用类似下面的宏
对foo的调用，因此也没有值关联到x上。相反，编译器传递给WHEN的值只是代表源代码的Lisp
比如当编译器正在运行WHEN宏的时候，唯一可用的数据就是源代码。由于程序尚未运行，没有
码本身的数据。例如，假设在程序的某个地方出现了下面这样的源代码：
运行他写的程序是因为不知道正确的输人那样，运行在宏展开期的代码也只能处理那些来自源代
80
①和函数一样，宏也可以含有声明，但你现在不需要考虑它们。
宏的工作是将宏形式（首元素为宏名的Lisp形式）转化成做特定事情的代码。有时是从想要
宏可以使用Lisp的所有功能来生成其展开式，这意味着本章只能初步说明宏的具体功用。不
宏并不是直接做事，它只是用于生成以后工作所需的代码。
和函数一样，宏由名字、形参列表、
如同你在第3章里所看到的那样，宏真的是用DEFMACRO来定义的。当然，它代表的是“定义
当Lisp被解释而非编译时，宏展开期和运行期之间的区别不甚明显，因为它们临时纠缠在了
(if (>x 10)(progn (print'big)))
(defmacro when
(defmacro name (parameter*)
正常情况下，你将x设为一个变量，
(defun foo (x)
body-form*)