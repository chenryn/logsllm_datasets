### 3.4. Proofs of Security Properties in FABLE

As mentioned in the introduction, FABLE does not, by itself, guarantee that well-typed programs correctly implement a particular security policy. However, FABLE is designed to facilitate the proof of such theorems. To illustrate this, we used three different techniques for each of the correctness results reported here. Our experience suggests that the metatheory of FABLE provides a useful repository of lemmas that can be naturally applied to show the correctness of various policy encodings. Therefore, constructing a correctness proof for a FABLE policy is no more onerous, and possibly simpler, than for a special-purpose calculus that enforces a single security policy. In the remainder of this section, we report on our experience with each of the three proofs and discuss preliminary progress towards reasoning about multiple policies.

In all our proofs, two key features of FABLE play a central role:
1. **Dependent Typing**: This allows a policy analyst to assume that all policy checks are performed correctly. For example, when calling the access function to access a value \( v \) of type \( t\{acl\} \), the label expressing \( v \)'s security policy must be \( acl \), and no other. The type system ensures that the application program cannot construct a label, say \( ACL(Public) \), and trick the policy into believing that this label, rather than \( acl \), protects \( v \). Dependent typing thus rules out confused deputies [6].
2. **Mediation of Access**: The restriction that application code cannot directly inspect labeled resources ensures that a policy function must mediate every access to a protected resource. While complete mediation is not unique to FABLE—Zhang et al. [45] used CQual to check SELinux operations, and Fraser [15] did the same for Minix—these analyses only ensure that some policy check has taken place, not necessarily the correct one. Thus, these techniques are vulnerable to flaws due to confused deputies.

Combining these insights, our proof of non-observability for the access control policy (in our technical report [38]) is particularly simple. Essentially, the FABLE system ensures that a value with a labeled type must be treated abstractly by the application program. With this observation, the proof proceeds similarly to a proof of value abstraction [18], a general semantic property for languages like FABLE that support parametric polymorphism or abstract types. For instance, an integer labeled with an access control list could be represented in ML as a pair consisting of an access control list and an integer with type \( (string \ list \times int) \). A policy module could export this pair as an abstract type, preventing application code from inspecting the value directly and providing a function to expose the concrete type only after a successful policy check. While this encoding would suffice for the simple policy in Figure 3, it would not work for more complex idioms, such as the function `access cap` in Section 3.1, which reveals some of the structure of a label to avoid additional checks. Abstract types alone are also insufficient for static checking of policies, as in the case of information flow.

To show dependency correctness (in our technical report [38]), we followed a proof technique used by Tse and Zdancewic [40]. This involves defining a logical relation [28] that relates terms whose set of provenance labels includes the same label \( l \). The goal is to show that given \( x: Prov \ t \ \ell \ c \ e : t \), \( \sigma_1(e) \) is related to \( \sigma_2(e) \), where \( \sigma_i \) substitutes a provenance-labeled value \( v_i \) for \( x \) in \( e \). The crux of this proof involves showing that the logical relation is preserved under substitution—a form of substitution lemma for the logical relation. While constructing the infrastructure to define the logical relation requires some effort, strategic applications of standard substitution lemmas for FABLE can discharge the proof without much difficulty.

While it would be possible to reuse our infrastructure for the dependency correctness proof to show the non-interference result for the static information flow policy (as in Tse and Zdancewic), we chose instead to use another technique, due to Pottier and Simonet [30] (in our technical report [38]). This technique involves representing a pair of executions of a FABLE program within the syntax of a single program and showing that a subject reduction property holds true. As with the logical relations proof, once we had constructed the infrastructure to use this technique, the proof was an easy consequence of FABLE’s preservation theorem.

All our correctness theorems impose the condition that an application program be "([])-free," meaning they apply only to situations where a single policy is in effect within a program. However, in practice, multiple policies may be used in conjunction, and we would like to reason that interactions between the policies do not result in violations of the intended security properties. To characterize the conditions under which a policy can definitely be composed with another, we defined a simple type-based criterion. When satisfied by two (or more) policies \( \pi_P \) and \( \pi_Q \), this criterion implies that neither policy will interfere with the functioning of the other when applied in tandem to the same program.

Intuitively, a policy can be made composable by enclosing all its labels within a unique top-level label constructor that can be treated as a namespace. A policy that only manipulates labels and labeled terms belonging to its own namespace can be safely composed with another policy. The main benefit of compositionality is modularity; when multiple composable policies are applied to a program, one can reason about the security of the entire system by considering each policy in isolation. Policy designers that encapsulate their policies within a namespace can package their policies as libraries to be reused along with other policy libraries.

Our notion of composition is a non-interference-like property—a policy is deemed composable if it can be shown not to depend on, or influence the functioning of, another policy. As with non-interference properties in other contexts, this condition is often too restrictive for many realistic examples in which policies, by design, must interact with each other. We find that policies that do not compose according to this definition perform a kind of declassification (or endorsement) by allowing labeled terms to exit (or unlabeled terms to enter) the policy’s namespace. We conjecture that the vast body of research into declassification [33] can be brought to bear here to recover a degree of modularity for interacting policies. Our technical report [38] contains the formal statement and proof of the policy non-interference theorem and further discussion of the applicability of this condition.

Finally, although we have focused on bisimulation properties in this paper, we believe that our approach is also likely to be useful in proving other kinds of security properties. For instance, we have recently begun investigating the enforcement of information release protocols by adding affine types to FABLE [39]. We formulate these protocols in terms of security automata used as a kind of typestate [36]. We have been able to prove that type-correct programs produce execution traces that contain event sequences in compliance with specific information release protocols. We have also found other forms of substructural types to be useful. Our technical report [38] sketches the use of relevant types to track side-effects in programs that manipulate references to mutable state.

### 4. SELINKS: FABLE for Web Programming

We have implemented FABLE as an extension to the LINKS functional web-programming language [12]; we call our extension Security-Enhanced LINKS, or SELINKS. This section briefly describes our SELINKS implementation and presents our experience using it to build two applications, a wiki (SEWIKI) and an online store (SEWINESTORE).

#### 4.1. SELINKS

LINKS is a new programming language that allows a programmer to write an entire multi-tier web application as a single program. The compiler splits the program into components to run on the client (as JavaScript), server (as a local fragment of LINKS code), and database (as SQL). By extending LINKS with FABLE’s label-based security policies, we can build applications that police data within and across tiers, up to the level of trust we have in those tiers. In our test applications, we assume the server and database are trusted, but the client is not.

LINKS is a functional programming language equipped with standard features such as recursive variant types, pattern matching, parametric polymorphism, and higher-order functions. As such, the FABLE policies we have presented so far transliterate naturally into SELINKS. One difference is that rather than defining a special type `lab` as in FABLE, in SELINKS we allow arbitrary expressions to be treated as labels. The examples in this paper can be represented in SELINKS using expressions with a variant type as a label. Our applications make use of variants, strings, integers, lists, and records to more easily construct and inspect labels.

SELINKS also provides native support for the syntactic shorthands shown in Figure 2. Type abbreviations in LINKS have been extended in SELINKS to support abbreviations of dependent types. Policy functions are designated by the qualifier `policy`, as in the examples of this paper. We also provide native support for dependent tuples in terms of existential packages rather than requiring the programmer to encode them with higher-order functions. While this makes dependent tuples easier to use, existential packages in SELINKS must still be carefully manipulated using explicit `pack` and `unpack` operations.

Finally, although LINKS makes heavy use of type inference, in SELINKS we rely on annotations to check code that manipulates security labels and labeled types. However, we provide limited but convenient forms of inference to simplify programming and cut down on annotations. For instance, instantiations of phantom label variables are always inferred, and in many common cases, `pack` and `unpack` operations can also be inferred. Additionally, code that does not use our type extensions can still benefit from standard LINKS type inference.

#### 4.2. SEWIKI and SEWINESTORE

**SEWIKI** is an online document management system inspired by Intellipedia, a set of web applications designed to promote information sharing throughout the United States intelligence community [31]. SEWIKI consists of approximately 3500 lines of SELINKS code. It enforces a fine-grained combination of a group-based access control policy and a provenance policy on documents. A document is represented as an n-ary tree according to the following type definition:

```selinks
typename Doc = Node of [Doc] | Leaf of String | Labeled of (l:DocLabel × Doc{l})
```

Here, `[t]` is SELINKS notation for a list of `t`-typed values. The `Labeled` constructor allows nodes to have a security label according to the dependent pair `(l:DocLabel × Doc{l})`. The type `DocLabel` is the type of security labels for documents.

```selinks
typename Group = Authors | Auditors | Administrators
typename Acl = (read:[Group], write:[Group])
typename DocLabel = (acl: Acl, prov: Prov)
```

`DocLabel` is a record with the fields `acl` and `prov` for storing access control and provenance labels, respectively. The type `Acl` is itself a record containing two fields, `read` and `write`, that maintain the list of groups authorized to read and modify a document node, respectively. At the moment, we have three groups: `Authors`, in which all document authors are members; `Auditors`, the group of users that are trusted to audit a document; and `Administrators`, which include only the system administrators. We implement authentication credentials as terms of the type `Cred` (not shown). This type is similar to the type of credentials produced by login in the FABLE access control policy (Figure 3) except that `Cred` includes additional useful information such as the user’s name and unique identifier.

Possible document modifications are mediated by the `write access` policy function, which has the following type:

```selinks
write access: ∀ α,β . Cred → (f:α → β) → (l:Acl) → α{l} → β{l}
```

This function allows a caller to pass in a user’s credential and a function `f` that is intended to modify a resource `α` labeled with an access control label `l`. If `write access` determines that the user is in the writer’s group of the `Acl l`, the function `f` is applied, and the policy relabels the modified resource with the (access control) label of the original.

SEWIKI also includes a revision history tracking policy, similar in spirit to the provenance tracking policy of Section 3.2. We track provenance through all operations that alter a document while still enforcing the access control policy. We represent provenance information using the `Prov` type shown below and store this information in the `prov` field of a `DocLabel`.

```selinks
typename Op = Create | Edit | Delete | Restore | Copy | Relabel
typename Prov = [(oper:Op, user:User)]
```

The provenance label of a document node consists of a list of operations performed on that node together with the identity of the user that authorized that operation. Tracked operations are of type `Op` and include document creation, modification, deletion, and restoration (documents are never completely deleted in SEWIKI), copy-pasting from other documents, and document relabeling. For the last, authorized users are presented with an interface to alter the access control labels that protect a document.

Policy functions that enforce this composite policy are fairly modular. For instance, a policy function that mediates modification of a document first projects out the `acl` component of the label and calls `write access` to ensure that the modification is authorized. It then records the `Edit` operation in the `prov` field of the edited document’s label.

In addition to building SEWIKI, we extended the “wine store” e-commerce application that comes with LINKS by creating labels to represent users and associating such labels with orders in a shopping cart and order history. This helps ensure that an order is only accessed by the customer who created it. As in SEWIKI, the user’s credential is represented using `Cred`; order information is defined below. The policy functions to view and add items to an order are implemented as simple wrappers around the same `read` and `write access` policies used in SEWIKI.

```selinks
typename Order = (l:Acl × List(CartItem){l})
```