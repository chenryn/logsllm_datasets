title:DNS Unchained: Amplified Application-Layer DoS Attacks Against DNS
Authoritatives
author:Jonas Bushart and
Christian Rossow
DNS Unchained: Ampliﬁed
Application-Layer DoS Attacks Against
DNS Authoritatives
Jonas Bushart(B) and Christian Rossow
CISPA, Saarland University, Saarbr¨ucken, Germany
{jonas.bushart,rossow}@cispa.saarland
Abstract. We present DNS Unchained, a new application-layer DoS
attack against core DNS infrastructure that for the ﬁrst time uses ampli-
ﬁcation. To achieve an attack ampliﬁcation of 8.51, we carefully chain
CNAME records and force resolvers to perform deep name resolutions—
eﬀectively overloading a target authoritative name server with valid
requests. We identify 178 508 potential ampliﬁers, of which 74.3% can
be abused in such an attack due to the way they cache records with low
Time-to-Live values. In essence, this allows a single modern consumer
uplink to downgrade availability of large DNS setups. To tackle this new
threat, we conclude with an overview of countermeasures and suggestions
for DNS servers to limit the impact of DNS chaining attacks.
Keywords: DNS · Ampliﬁcation attack · Application-layer attack
1 Introduction
The Domain Name System (DNS) is at the core of today’s Internet and is
inevitable for networked applications nowadays. Not only is DNS the primary
mean for mapping and translating domain names to IP addresses. Also, sev-
eral other applications heavily depend on DNS, such as load balancing (e.g., for
Content Delivery Networks), anti-spam methods (e.g., DKIM [6], SPF [19], or
IP address blacklists [9]) and TLS certiﬁcate pinning [10,15]. We rely on the
availability of these services for everyday communication. Yet recent incidents
have demonstrated how vulnerable DNS is to Denial-of-Service (DoS) attacks,
even for hosters that massively invest in over-provisioning and deploy highly-
reliable anycast networks. For example, in October 2016, attacks against the
DNS hoster Dyn have knocked Twitter, Netﬂix, Paypal and Spotify oﬄine for
several hours [14]—simply because the authoritative name servers for these ser-
vices were hosted by Dyn and became unresponsive due to a successful Dis-
tributed DoS (DDoS) attack against Dyn.
Up to now, DDoS attempts against the DNS infrastructure have focused
mostly on volumetric attacks, where attackers aim to exhaust the bandwidth
that is available to DNS hosters. In a successful attack, benign DNS queries are
c(cid:2) The Author(s) 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 139–160, 2018.
https://doi.org/10.1007/978-3-030-00470-5_7
140
J. Bushart and C. Rossow
dropped such that normal users no longer see responses from the DNS hosters. A
popular and powerful example of volumetric attacks are so called ampliﬁcation
attacks [22,44], where miscreants abuse that open services (such as NTP servers)
reﬂect answers to IP-spoofed requests. Yet any of these rather simple volumetric
attacks can be ﬁltered with the help of data scrubbing services such as Arbor,
Cloudﬂare, or Incapsula.
In this paper, we explore application-layer attacks against core DNS infras-
tructures, namely authoritative name servers (ANSs). Compared to volumetric
DoS attacks, application-layer attacks are more appealing to adversaries. In par-
ticular, they (i) are signiﬁcantly harder to distinguish from benign traﬃc, (ii)
not only target bandwidth, but also computational resources, and (iii) do not
rely on IP address spooﬁng and can be launched even though providers deploy
egress ﬁltering [36]. This makes them attractive for botnets.
We start by describing existing forms of application-layer attack against DNS
that overload a target ANS with valid DNS requests. In the simplest form, a sin-
gle attack source can send queries to domains hosted by this name server. Yet
in practice, attackers have distributed the attack and use resolvers as interme-
diaries in so called random preﬁx attacks [1,47]. They are a form of ﬂooding
DNS attacks and get their name from the characteristic preﬁxes used to cir-
cumvent resolver caching. Such attacks can be launched from malware-infected
devices [2] or even JavaScript and already have the potential to put large DNS
hosters oﬄine (e.g., Dyn in 2016).
We then describe a novel form of application-layer attacks that ﬂoods the
victim with an order of magnitude more queries per second than random pre-
ﬁx attacks. We dub this attack DNS Unchained, as it abuses the chaining
behavior of CNAME and DNAME resource records in DNS. The core idea of our
attack borrows from random preﬁx attacks. However, instead of blindly send-
ing out queries to random domains hosted by the target ANS, the attacker
carefully crafts long chains of DNS records (a.target.com→ b.other.com,
b.other.com→ c.target.com, . . . ) that involve the target ANS in every other
step. This has the eﬀect that resolvers query the target ANS not just once, but
several times—until the end of the chain is reached. To the best of our knowledge,
this is the ﬁrst DoS attack that combines ampliﬁcation with application-layer
attacks. We ﬁnd that the vast majority of resolvers support chain lengths of
9–27 (and more) elements, resulting in tenfold ampliﬁcation due to the number
of times a target ANS is queried per request the attacker sends.
We complete this paper with an extensive discussion how such attacks can
be remedied. We foresee countermeasures that can be deployed by ANS, such
as detecting malicious DNS chains or enforcing lower bounds, ensuring more
caching, for TTL values. discuss how resolvers can mitigate attacks by capping
DNS chains without compromising the benign usage of chains in DNS.
Our contributions can be summarized as follows:
– We present an application-layer attack against DNS that create an order of
magnitude more queries per second than existing attacks. For this attack, we
DNS Unchained: Ampliﬁed Application-Layer DoS Attacks
141
revisit how DNS chains can be abused to amplify traﬃc, and are the ﬁrst to
combine application-layer attacks with ampliﬁcation.
– We analyze the real-world impact by performing Internet-wide measurements
of the resolver landscape and test for the achievable ampliﬁcation.
– We present and discuss the eﬃcacy of countermeasures against application-
layer DoS attacks. This discussion helps to defend against DNS Unchained
and DNS application-layer attacks in general.
2 Threat Model
We now deﬁne the treat model and describe the attacker’s capabilities, required
resources, and our assumptions about the victim. The adversary in our model
aims to degrade the availability of an authoritative name server (ANS). ANSs
answer DNS queries for a particular zone, as queried by any DNS resolver. Next
to mapping domain names to IP addresses, ANSs provide several other services,
e.g., anti-spam methods (e.g., DKIM [6], SPF [19], or IP address blacklists [9])
and TLS certiﬁcate pinning [10,15], making them fundamental on the Internet.
In the highly redundant DNS setting, resolvers choose between all ANSs of a
particular zone [33,53]. Yet even a single unresponsive ANS will cause decreased
performance for the whole domain within the zone. In a redundant setup with
multiple anycast sites, the loss of one anycast site will still aﬀect the networks
routing to this site, therefore the responsiveness of every single ANS matters.
In our model, the attacker targets a speciﬁc ANS, e.g., to render domains
hosted by this ANS unreachable. We assume that the attacker can host at least
one attacker-controlled zone on the target ANS. This involves that the attacker
can create arbitrary DNS records that are within their zone, i.e., subdomains
for a given second-level domain. We believe that this assumption is easily ful-
ﬁlled. For example, if domains are hosted by web hosters such as GoDaddy or
Rackspace, an attacker can set up a domain at the same hoster as the victim’s
website. Another possibility is that the victim’s domain is hosted using one of
the DNS hosters like NS1, Amazon Route 53, Dyn, or Google Cloud DNS.
Creating an account may be a problem for an attacker who wants to stay
anonymous. We note that in such cases the attacker could use fake or stolen IDs
to register an account.
The only other requirement on the attacker is the ability to send DNS queries
to open DNS resolvers (“resolvers” hereafter). Attackers can ﬁnd such resolvers
by scanning the Internet UDP port 53 in less than an hour [11]. Internet scans are
not a limiting factor, as there are also lists of resolvers available for download [4].
Also, in contrast to ampliﬁcation DDoS attacks [44], the attacker in our model
does not need to spoof the source IP address of attack traﬃc. This allows an
attacker to operate from a single source, or to increase anonymity and bandwidth
by leveraging DDoS botnets to launch attacks.
142
J. Bushart and C. Rossow
3 Application Layer DDoS Against DNS
Application layer DoS attacks abuse a higher-level protocol—in our context
DNS—and tie resources of other participants of the same protocol. This distin-
guishes application-level attacks from other forms of DoS attacks, e.g., volumet-
ric attacks, which are agnostic to protocol and application, but relatively easy
to ﬁlter and defend against. Application-layer attacks can target more diﬀerent
resources like CPU time and upstream bandwidth, while volumetric attacks can
only consume downstream bandwidths, making them interesting for many cases.
In this section we will ﬁrst introduce DNS water torture attacks, an emerging
application layer DoS technique that has already severely threatened the DNS
infrastructure. We will then show that a smart attacker can craft delicate chains
of DNS records to leverage resolvers for even more powerful attacks than those
possible with DNS water torture.
3.1 DNS Water Torture
DNS water torture attacks—also known as random preﬁx attacks—ﬂood the
victim’s DNS servers with requests such that the server runs out of resources to
respond to benign queries. Such attacks typically target the authoritative name
server (ANS) hosting the victim’s domain, such that domains hosted at the target
server become unreachable. Resolvers would typically cache the responses of the
queried domains, and therefore mitigate na¨ıve ﬂoods in that they refrain from
identical follow-up queries. To this end, attackers evade caching by using unique
domain names for each query, forcing resolvers to forward all queries to the
target ANS. A common way is prepending a unique sequence to the domain—
the random preﬁx. In practice, attackers either use monotonically increasing
counters, hash this counter, or use a dictionary to create preﬁxes. As the DNS
infrastructure, on the other hand, heavily relies on caching on multiple layers in
the DNS hierarchy, ANS are typically not provisioned to withstand many unique
and thus non-cached requests—leaving ANS vulnerable to water torture attacks.
Water torture attacks were observed for the ﬁrst time in early 2014 [1,41,51]
and have since been launched repeatedly. The main ingredient for this attack is
suﬃcient attack bandwidth, which overloads the target ANS with “too many”
requests. As this does not require IP spooﬁng, attackers can easily facilitate
botnets to maximize their attack bandwidth. In fact, several large DDoS botnets
(e.g., Mirai [2] or Elknot [28]) support DNS water torture.
While water torture attacks have been fairly eﬀective, their na¨ıve concept
has noticeable limitations:
1. Water torture attacks can usually be easily detected because the attack traf-
ﬁc shows exceptionally high failure rates for particular domains, as none
of the requested (random-looking) domain names actually exists. NXDOMAIN
responses are normally caused by conﬁguration error and therefore often mon-
itored.
DNS Unchained: Ampliﬁed Application-Layer DoS Attacks
143
2. Water torture attacks provide no ampliﬁcation, as every query by the attacker
eventually results in only a single query to the target ANS—unless queries
are resent in case of packet loss. The victim-facing attack traﬃc is thus bound
by number of queries that the attacker can send. This is in stark contrast to
volumetric attacks that oﬀer more than tenfold ampliﬁcation [44].
3.2 Chaining-Based DNS DoS Attack
We now propose a novel type of DNS application layer attacks that abuse chains
in DNS to overcome the aforementioned limitations of water torture, yet stay
in a similar threat model (Sect. 2). The main intuition of our attack is that an
attacker can utilize request chains that amplify the attack volume towards a
target ANS. This is achieved via aliases, i.e., a popular feature deﬁned in the
DNS speciﬁcation and frequently used in practice.
CNAME Records DNS request chains exist due to the functionality of creating
aliases in DNS, e.g., using standard CNAME resource records (RR) [31,32]. A
CNAME RR, short for canonical name, works similar to pointers in programming
languages. Instead of providing the desired data for a resolver, CNAME speciﬁes
a diﬀerent DNS location from where to request the RR. One common use is to
share the same RRs for a domain and the which overloads the target ANS with
“www” subdomain. In this case, a CNAME entry for “www.example.com.” points to
“example.com.”. When a client asks the resolver for the RRs of a certain type
and domain, the resolver recursively queries the ANS for the RRs, resulting in
three cases to consider:
Domain Does Not Exist or No Data. The domain does not exist (NXDOMAIN
status) or no matching resource record (including CNAME records) was found
(NODATA status). The ANS returns this status.
Resource Records Exists. The desired resource record’s data is immediately
returned by the ANS. The DNS speciﬁcation enforces that either data, or an
alias (i.e., CNAME) may exist for a domain, but never both—i.e., there was no
CNAME record for the request domain.
Domain Exists and Contains. CNAME response The resolver must follow the
CNAME regardless of the requested record type. This may cause the resolver to
send new queries, potentially even to diﬀerent ANSs.
The last case allows chaining of several requests. In case of CNAME records,
resolvers have to perform multiple lookups to load the data (unless the records
are cached). CNAME records can also be chained, meaning the target of a CNAME
records points to another CNAME record. This increases the number of lookups per
initial query. There is no strict limit to the length of chains. However, resolvers
typically enforce a limit to prevent loops of CNAME records. After reaching this
limit, resolvers either provide a partial answer, or respond with an error message.
Note that CNAME records provide delegation between arbitrary domains, i.e.,
also to domains in unrelated zones. If all the CNAME records are hosted in the
144
J. Bushart and C. Rossow
a . target - ans . com .
c . target - ans . com .
e . target - ans . com .
g . target - ans . com .
i . target - ans . com .
IN CNAME b . i n t e r m e d i a r y . org .
IN CNAME d . i n t e r m e d i a r y . org .
IN CNAME f . i n t e r m e d i a r y . org .
IN CNAME h . i n t e r m e d i a r y . org .
IN TXT " Huge record at the end ."
b . i n t e r m e d i a r y . org . IN CNAME c . target - ans . com .
d . i n t e r m e d i a r y . org . IN CNAME e . target - ans . com .
f . i n t e r m e d i a r y . org . IN CNAME h . target - ans . com .
h . i n t e r m e d i a r y . org . IN CNAME i . target - ans . com .
Listing 1. Two zones “target-ans.com.” and “intermediary.org.”, which contain
a CNAME that ends at the ith element in TXT records.