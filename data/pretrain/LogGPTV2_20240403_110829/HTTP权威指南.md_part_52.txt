### 循环移位 (n) 编码器
**图14-5：使用不同密钥的旋转N字符密码**

与金属钥匙或机械设备中的号盘设置相比，数字密钥只是一些数字。这些数字密钥值是编/解码算法的输入。编码算法就是一些函数，这些函数会读取一块数据，并根据算法和密钥值对其进行编/解码。

给定一段明文报文 \( P \)、一个编码函数 \( E \) 和一个数字编码密钥 \( e \)，就可以生成一段经过编码的密文 \( C \)（参见图14-6）。通过解码函数 \( D \) 和解码密钥 \( d \)，可以将密文 \( C \) 解码为原始的明文 \( P \)。当然，编/解码函数都是互为反函数的，对 \( P \) 的编码进行解码就会回到原始报文 \( P \) 上去。

**图14-6：用编码密钥 \( e \) 对明文进行编码，用解码密钥 \( d \) 进行解码**
```
明文P
C = E(P, e)  密钥=e  密文C
编码器E

明文P
P = D(C, d)  密钥=d  密文C
解码器D
```

### 安全HTTP
#### 14.3 对称密钥加密技术
我们来更详细地看看密钥和密码是怎样配合工作的。很多数字加密算法都被称为对称密钥（symmetric-key）加密技术，这是因为它们在编码时使用的密钥值和解码时一样（\( e = d \)）。我们就将其统称为密钥 \( k \)。

在对称密钥加密技术中，发送端和接收端要共享相同的密钥 \( k \) 才能进行通信。发送端用共享的密钥来加密报文，并将得到的密文发送给接收端。接收端收到密文，并对其应用解密函数和相同的共享密钥，恢复出原始的明文（参见图14-7）。

**图14-7：对称密钥加密算法为编/解码使用相同的密钥**
```
明文P
P = D(C, d)  密钥=d  密文C
解码器D
```

流行的对称密钥加密算法包括：DES、Triple-DES、RC2和RC4。

##### 14.3.1 密钥长度与枚举攻击
保持密钥的机密状态是很重要的。在很多情况下，编/解码算法都是众所周知的，因此密钥就是唯一保密的东西了。

好的加密算法会迫使攻击者试遍每一个可能的密钥，才能破解代码。用暴力去尝试所有的密钥值称为枚举攻击（enumeration attack）。如果只有几种可能的密钥值，居心不良的人通过暴力遍历所有值，就能最终破解代码了。但如果有大量可能的密钥值，他可能就要花费数天、数年，甚至无限长的时间来遍历所有的密钥，去查找能够破解密码的那个。

可用密钥值的数量取决于密钥中的位数，以及可能的密钥中有多少是有效的。就对称密钥加密技术来说，通常所有的密钥值都是有效的。8位的密钥只有256个可能的密钥值，40位的密钥可以有 \( 2^{40} \) 个可能的密钥值（大约是一万亿个密钥），128位的密钥可以产生大约 \( 3.4 \times 10^{38} \) 个可能的密钥值。

**注4**：有些加密技术中只有部分密钥值是有效的。比如，在最知名的非对称密钥加密系统RSA中，有效密钥必须以某种方式与质数相关。可能的密钥值中只有少量密钥具备此特性。

在传统的对称密钥加密技术中，对于小型的、不太重要的事务来说，40位的密钥就足够安全了。但现在的高速工作站就可以将其破解，这些工作站每秒可以进行数十亿次计算。

相比之下，对于对称密钥加密技术，128位的密钥被认为是非常强大的。实际上，长密钥对密码安全有着非常重要的影响，美国政府甚至对使用长密钥的加密软件实施了出口控制，以防止潜在的敌对组织创建出美国国家安全局（National Security Agency, NSA）自己都无法破解的秘密代码。

Bruce Schneier编写的《Applied Cryptography》（John Wiley & Sons出版社）是一本很棒的书，书中有一张表，表中对使用1995年的技术和耗费，通过猜测所有的密钥来破解一个DES密码所需的时间进行了描述。表14-1摘录了这张表。

**表14-1：较长的密钥要花费更多的精力去破解（来自《Applied Cryptography》一书，1995年的数据）**

| 攻击耗费 | 40位密钥 | 56位密钥 | 64位密钥 | 80位密钥 | 128位密钥 |
|----------|----------|----------|----------|----------|-----------|
| 100,000美元 | 2秒 | 35小时 | 1年 | 70,000年 | \( 10^{19} \) 年 |
| 1,000,000美元 | 200毫秒 | 3.5小时 | 37天 | 7,000年 | \( 10^{18} \) 年 |
| 10,000,000美元 | 20毫秒 | 21分钟 | 4天 | 700年 | \( 10^{17} \) 年 |
| 100,000,000美元 | 2毫秒 | 2分钟 | 9小时 | 70年 | \( 10^{16} \) 年 |
| 1,000,000,000美元 | 200微秒 | 13秒 | 1小时 | 7年 | \( 10^{15} \) 年 |

根据1995年微处理器的速度，愿意花费100,000美元的攻击者可以在大约2秒内破解一个40位的DES代码。2002年的计算机就已经比1995年的快20倍了。除非用户经常修改密钥，否则对于别有用心的攻击者来说，40位的密钥是不安全的。

DES的56位标准密钥长度就更安全一些。从1995年的经济水平来说，花费100万美元进行的攻击还是要几个小时才能破解密码。但可使用超级计算机的用户则只需数秒钟即可通过暴力方法破解密码。与之相对的是，通常大家都认为长度与Triple-DES密钥相当的128位DES密钥实际上是任何人以任何代价都无法通过暴力攻击破解的。

**注5**：1995年之后，计算速度得到了飞速的提高，费用也降低了。你越晚读到这本书，计算的速度就会越快！但即使所需的时间会成5倍、10倍或更多倍的减少，这张表仍然是有参考价值的。

**注6**：但是，长的密钥并不意味着可以高枕无忧了！加密算法或实现中可能会有不为人注意的缺陷，为攻击者提供了可攻击的弱点。攻击者也可能会有一些与密钥产生方式有关的信息，这样他就会知道使用某些密钥的可能性比另一些要大，从而有助于进行有目的的暴力攻击。或者用户可能将保密的密钥落在了什么地方，被攻击者偷走了。

##### 14.3.2 建立共享密钥
对称密钥加密技术的缺点之一就是发送者和接收者在互相对话之前，一定要有一个共享的保密密钥。

如果想要与Joe的五金商店进行保密的对话，可能是在看了公共电视台的家装节目之后，想要订购一些木工工具，那么在安全地订购任何东西之前，要先在你和www.joes-hardware.com之间建立一个私有的保密密钥。你需要一种产生保密密钥并将其记住的方式。你和Joe的五金商店，以及因特网上所有其他人，都要产生并记住数千个密钥。

例如，Alice（A）、Bob（B）和Chris（C）都想与Joe的五金商店（J）对话。A、B和C都要建立自己与J之间的保密密钥。A可能需要密钥 \( K_{AJ} \)，B可能需要密钥 \( K_{BJ} \)，C可能需要密钥 \( K_{CJ} \)。每对通信实体都需要自己的私有密钥。如果有 \( N \) 个节点，每个节点都要和其他所有 \( N-1 \) 个节点进行安全对话，总共大概会有 \( N^2 \) 个保密密钥：这将是一个管理噩梦。

### 公开密钥加密技术
公开密钥加密技术没有为每对主机使用单独的加密/解密密钥，而是使用了两个非对称密钥：一个用来对主机报文编码，另一个用来对主机报文解码。编码密钥是众所周知的（这也是公开密钥加密这个名字的由来），但只有主机才知道私有的解密密钥（参见图14-8）。这样，每个人都能找到某个特定主机的公开密钥，密钥的建立变得更加简单。但解码密钥是保密的，因此只有接收端才能对发送给它的报文进行解码。

**图14-8：公开密钥加密技术是非对称的，为编码和解码使用了不同的密钥**
```
客户端
明文
公开密钥=es 经过加密的密文 私有密钥=ds
因特网
明文
服务器
```

节点X可以将其加密密钥 \( e_x \) 公之于众。现在，任何想向节点X发送报文的人都可以使用相同的公开密钥了。因为每台主机都分配了一个所有人均可使用的编码密钥，所以公开密钥加密技术避免了对称密钥加密技术中成对密钥数目的 \( N^2 \) 扩展问题（参见图14-9）。

**图14-9：公开密钥加密技术为每台主机分配了一个公开编码密钥**
```
kAJ A kAJ A
kAX ex
kBX kDX ex ex
B D B D
X X
kCX ex
C C
(a) 对称密钥加密技术 (b) 公开密钥加密技术
```

尽管每个人都可以用同一个密钥对发给X的报文进行编码，但除了X，其他人都无法对报文进行解码，因为只有X才有解码的私有密钥 \( d_x \)。将密钥分隔开来可以让所有人都能够对报文进行编码，但只有其所有者才能对报文进行解码。这样，各节点向服务器安全地发送报文就更加容易了，因为它们只要查找到服务器的公开密钥就行了。

通过公开密钥加密技术，全球所有的计算机用户就都可以使用安全协议了。制定标准化的公开密钥技术包是非常重要的，因此，大规模的公开密钥架构（Public-Key Infrastructure, PKI）标准创建工作已经开展十多年了。

##### 14.4.1 RSA
所有公开密钥非对称加密系统所面临的共同挑战是，要确保即便有人拥有了下面所有的线索，也无法计算出保密的私有密钥：

- 公开密钥（是公有的，所有人都可以获得）；
- 一小片拦截下来的密文（可通过对网络的嗅探获取）；
- 一条报文及与之相关的密文（对任意一段文本运行加密器就可以得到）。

RSA算法就是一个满足了所有这些条件的流行的公开密钥加密系统，它是在MIT发明的，后来由RSA数据安全公司将其商业化。即使有了公共密钥、任意一段明文、用公共密钥对明文编码之后得到的相关密文、RSA算法自身，甚至RSA实现的源代码，破解代码找到相应的私有密钥的难度仍相当于对一个极大的数进行质因数分解的困难程度，这种计算被认为是所有计算机科学中最难的问题之一。因此，如果你发现了一种能够快速地将一个极大的数字分解为质因数的方法，就不仅能够入侵瑞士银行的账户系统，而且还可以获得图灵奖了。

RSA加密技术的细节中包括很多繁琐的数学问题，我们的介绍不会那么深入。你不需要拥有数论方面的博士学位，有大量的库可以用来执行RSA算法。

##### 14.4.2 混合加密系统和会话密钥
任何人只要知道了其公开密钥，就可以向一台公共服务器发送安全报文，所以非对称的公开密钥加密系统是很好用的。两个节点无须为了进行安全的通信而先交换私有密钥。

但公开密钥加密算法的计算可能会很慢。实际上它混合使用了对称和非对称策略。比较常见的做法是在两节点间通过便捷的公开密钥加密技术建立起安全通信，然后再用那条安全的通道产生并发送临时的随机对称密钥，通过更快的对称加密技术对其余的数据进行加密。

### 数字签名
到目前为止，我们已经讨论了各种使用对称和非对称密钥加/解密保密报文的密钥加密技术。

除了加/解密报文之外，还可以用加密系统对报文进行签名（sign），以说明是谁编写的报文，同时证明报文未被篡改过。这种技术被称为数字签名（digital signing），对下一节将要讨论的因特网安全证书系统来说非常重要。

**签名是加了密的校验和**

数字签名是附加在报文上的特殊加密校验码。使用数字签名有以下两个好处：
- 签名可以证明是作者编写了这条报文。只有作者才会有最机密的私有密钥，因此，只有作者才能计算出这些校验和。校验和就像来自作者的个人“签名”一样。
- 签名可以防止报文被篡改。如果有恶意攻击者在报文传输过程中对其进行了修改，校验和就不再匹配了。由于校验和只有作者保密的私有密钥才能产生，所以攻击者无法为篡改了的报文伪造出正确的校验码。

数字签名通常是用非对称公开密钥技术产生的。因为只有所有者才知道其私有密钥，所以可以将作者的私有密钥当作一种“指纹”使用。

**图14-10：解密的数字签名**
```
A 明文报文 B
报文 报文
报文摘要
摘要 摘要
签名 一样吗？
D E
私有密钥=dA 公开密钥=eA
```

- 节点A将变长报文提取为定长的摘要。
- 节点A对摘要应用了一个“签名”函数，这个函数会将用户的私有密钥作为参数。因为只有用户才知道私有密钥，所以正确的签名函数会说明签名者就是其所有者。
- 在图14-10中，由于解码函数 \( D \) 中包含了用户的私有密钥，所以我们将其作为签名函数使用。
- 一旦计算出签名，节点A就将其附加在报文的末尾，并将报文和签名都发送给B。

在接收端，如果节点B需要确定报文确实是节点A写的，而且没有被篡改过，节点B就可以对签名进行检查。节点B接收经私有密钥扰码的签名，并应用了使用公开密钥的反函数。如果拆包后的摘要与节点B自己的摘要版本不匹配，要么就是报文在传输过程中被篡改了，要么就是发送端没有节点A的私有密钥（也就是说它不是节点A）。

**注8**：此时假定私有密钥没有被人偷走。大多数私有密钥都会在一段时间后过期。还有一些“取消列表”记录了被偷走或入侵的密钥。

**注9**：RSA加密系统将解码函数 \( D \) 作为签名函数使用，是因为 \( D \) 已经将私有密钥作为输入使用了。注意，解码函数只是一个函数，因此，可以将其用于任意的输入。同样，在RSA加密系统中，以任意顺序应用 \( D \) 和 \( E \) 函数时，两者都会相互抵消。因此 \( E(D(\text{stuff})) = \text{stuff} \)，就像 \( D(E(\text{stuff})) = \text{stuff} \) 一样。

### 数字证书
本节将介绍因特网上的“ID卡”——数字证书。数字证书（通常被称作“certs”，有点像certs牌薄荷糖）中包含了由某个受信任组织担保的用户或公司的相关信息。

我们每个人都有很多形式的身份证明。有些ID，比如护照和驾照，都足以在很多场合证明某人的身份。例如，你可以用美国的驾照在新年前夜搭乘前往纽约的航班，在你到那儿之后，接着用它来证明你的年龄，这样你就能和朋友们一起喝酒了。

受信程度更高的身份证明，比如护照，是由政府在特殊的纸上签发并盖章的。很难伪造，因此可以承载较高的信任度。有些公司的徽章和智能卡中包含有电子信息，