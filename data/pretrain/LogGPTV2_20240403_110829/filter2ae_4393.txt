# 在AWS Elastic Beanstalk中利用SSRF漏洞

## 译文声明
本文是翻译文章，原文作者为notsosecure，来源：notsosecure.com。译文仅供参考，具体内容及含义以原文为准。

> **译者注**：本文将出现大量AWS官方词汇。对于一些难以理解的中文词汇，首次出现时会同时提供英文词汇，方便读者查阅AWS官方文档（[中文](https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/Welcome.html)与[英文](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/Welcome.html)）。

在本篇文章中，“Advanced Web Hacking”培训课程的首席培训师Sunil Yadav将讨论一个案例研究，介绍如何识别并利用服务器端请求伪造（SSRF）漏洞来访问敏感数据（如源代码）。此外，还将探讨可能导致部署在AWS Elastic Beanstalk上的应用程序远程代码执行（RCE）的风险点。

## AWS Elastic Beanstalk简介

AWS Elastic Beanstalk是一款平台即服务（PaaS）产品，主要用于部署和扩展各种开发环境的Web应用程序（如Java、.NET、PHP、Node.js、Python、Ruby和Go等）。它支持自动化的部署、容量分配、负载均衡、自动扩展以及应用程序运行状况监控。

## 环境准备

Elastic Beanstalk支持两种环境配置：
- **Web服务器环境**：适合运行Web应用程序或Web API。
- **工作线程环境**：适合后台工作和长时间运行的流程。

通过提供zip或war文件中的应用程序、环境和上传的应用程序代码信息来配置新应用程序。

### 创建Elastic Beanstalk环境
1. 配置新环境后，AWS会自动创建S3存储桶、安全组、EC2实例以及默认实例配置文件`aws-elasticbeanstalk-ec2-role`。
2. 从用户计算机部署代码时，zip文件中的源代码副本将被放入名为`elasticbeanstalk-region-account-id`的S3存储桶中。

### 默认设置
- **S3存储桶**：默认不加密，对象以未加密的形式存储在桶中，并且只能由授权用户访问。
- **默认实例配置文件** (`aws-elasticbeanstalk-ec2-role`)：
  - `AWSElasticBeanstalkWebTier`：授予应用程序将日志和调试信息上传至Amazon S3和AWS X-Ray的权限。
  - `AWSElasticBeanstalkWorkerTier`：授予日志上传、调试、指标发布和Worker实例任务的权限。
  - `AWSElasticBeanstalkMulticontainerDocker`：授予Amazon Elastic容器服务协调集群任务的权限。

策略“AWSElasticBeanstalkWebTier”允许对名称以“elasticbeanstalk-”开头的S3存储桶进行有限的列取、读取和写入操作。

## 分析

在渗透测试过程中，我们发现了一个应用程序存在SSRF漏洞。通过对外部域进行DNS调用确认漏洞，并通过访问仅允许localhost访问的“http://localhost/server-status”页面进一步验证漏洞。

### 确认SSRF漏洞
1. 通过访问受限页面确认SSRF漏洞。
2. 使用服务如[https://ipinfo.io](https://ipinfo.io/)确认服务提供商为亚马逊。
3. 通过多个端点查询[AWS元数据](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)，例如：
   - 获取帐户ID和地区信息：`http://169.254.169.254/latest/dynamic/instance-identity/document`
   - 获取访问密钥ID、加密访问密钥和令牌：`http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-elasticbeanorastalk-ec2-role`

### 利用SSRF漏洞
1. 配置AWS CLI并验证令牌有效性。
2. 尝试使用AWS CLI运行多个命令获取信息，但由于安全策略，大多数命令被拒绝访问。
3. 找到存储桶名称并递归列出其内容，下载源代码。

## 从SSRF到RCE

### 上传PHP文件
1. 通过AWS CLI向S3存储桶上传PHP文件（webshell101.php），尝试实现远程代码执行。
2. 更新的源代码未部署在EC2实例上，导致Web Shell无法访问。

### 潜在的RCE利用场景
1. **使用CI/CD AWS CodePipeline**：
   - 创建管道，选择S3 bucket作为源提供方，Elastic Beanstalk作为部署提供方。
   - 上传新的PHP文件并触发构建过程，成功部署后可访问Web shell并对系统执行任意命令。

2. **重建现有环境**：
   - 重建环境会终止所有资源并创建新资源，部署最新的源代码包含Web shell。

3. **从现有环境克隆**：
   - 克隆环境将从S3存储桶中获取代码，部署带有Web shell的Web应用。

4. **创建新环境**：
   - 选择S3存储桶选项并提供S3存储桶URL，部署最新的源代码中含有Web shell。

## 参考文档
- [AWS Elastic Beanstalk 官方文档](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/Welcome.html)
- [AWS EC2 实例元数据](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
- [AWS CodePipeline 官方博客](https://aws.amazon.com/getting-started/tutorials/continuous-deployment-pipeline/)

希望这篇文章能帮助您更好地理解和防范AWS Elastic Beanstalk中的SSRF漏洞及其可能引发的RCE风险。