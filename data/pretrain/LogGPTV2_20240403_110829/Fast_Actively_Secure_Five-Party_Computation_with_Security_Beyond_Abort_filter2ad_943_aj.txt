# References

[43] Furukawa, J., Lindell, Y., Nof, A., & Weinstein, O. (2017). High-Throughput Secure Three-Party Computation for Malicious Adversaries and an Honest Majority. In *EUROCRYPT*, 225–255.

[44] Geisler, M. (2007). Viff: Virtual Ideal Functionality Framework. Retrieved from <http://viff.dk>.

[45] Gennaro, R., Ishai, Y., Kushilevitz, E., & Rabin, T. (2002). On 2-Round Secure Multiparty Computation with Honest Majority. In *VCCS '19*, November 11–15, 2019, London, United Kingdom, 1588.

[46] Goldreich, O., Micali, S., & Wigderson, A. (1987). How to Play Any Mental Game or A Completeness Theorem for Protocols with Honest Majority. In *STOC*, 218–229.

[47] Gordon, S. D., Liu, F.-H., & Shi, E. (2015). Constant-Round MPC with Fairness and Guarantee of Output Delivery. In *CRYPTO*, 63–82.

[48] Holenstein, T., Künzler, R., & Tessaro, S. (2011). The Equivalence of the Random Oracle Model and the Ideal Cipher Model, Revisited. In *STOC*, 89–98.

[49] Ishai, Y., Kumaresan, R., Kushilevitz, E., & Paskin-Cherniavsky, A. (2015). Secure Computation with Minimal Interaction, Revisited. In *CRYPTO*, 359–378.

[50] Ito, M., Saito, A., & Nishizeki, T. (1989). Secret Sharing Scheme Realizing General Access Structure. *Electronics and Communications in Japan (Part III: Fundamental Electronic Science)*.

[51] Launchbury, J., Archer, D., DuBuisson, T., & Mertens, E. (2014). Application-Scale Secure Multiparty Computation. In *Programming Languages and Systems*, 8–26.

[52] Lindell, Y., Pinkas, B., Smart, N. P., & Yanai, A. (2015). Efficient Constant Round Multi-party Computation Combining BMR and SPDZ. In *CRYPTO*, 319–338.

[53] Makri, E., Rotaru, D., Smart, N. P., & Vercauteren, F. (2017). PICS: Private Image Classification with SVM. *IACR Cryptology ePrint Archive* 2017, 1190.

[54] Mohassel, P., & Rindal, P. (2018). ABY3: A Mixed Protocol Framework for Machine Learning. *IACR Cryptology ePrint Archive* 2018, 403.

[55] Mohassel, P., Rosulek, M., & Zhang, Y. (2015). Fast and Secure Three-Party Computation: The Garbled Circuit Approach. In *CCS*, 591–602.

[56] Naor, M. (1991). Bit Commitment Using Pseudorandomness. *J. Cryptology* 4(2), 151–158.

[57] Nielsen, J. B., Nordholt, P. S., Orlandi, C., & Burra, S. S. (2012). A New Approach to Practical Active-Secure Two-Party Computation. In *CRYPTO*.

[58] Nordholt, P. S., & Veeningen, M. (2018). Minimising Communication in Honest-Majority MPC by Batchwise Multiplication Verification. In *ACNS*, 321–339.

[59] Pass, R., Shi, E., & Tramèr, F. (2017). Formal Abstractions for Attested Execution Secure Processors. In *EUROCRYPT*, 260–289.

[60] Patra, A., & Ravi, D. (2018). On the Exact Round Complexity of Secure Three-Party Computation. In *CRYPTO*.

[61] Rabin, T., & Ben-Or, M. (1989). Verifiable Secret Sharing and Multiparty Protocols with Honest Majority (Extended Abstract). In *STOC*, 73–85.

[62] Rogaway, P., & Shrimpton, T. (2004). Cryptographic Hash-Function Basics: Definitions, Implications, and Separations for Preimage Resistance, Second-Preimage Resistance, and Collision Resistance. In *FSE*, 371–388.

[63] Shannon, C. E. (1949). Communication Theory of Secrecy Systems. *The Bell System Technical Journal* 28(4), 656–715.

[64] Wang, X., Ranellucci, S., & Katz, J. (2017). Global-Scale Secure Multiparty Computation. In *CCS*, 39–56.

[65] Yao, A. C. (1982). Protocols for Secure Computations (Extended Abstract). In *FOCS*, 160–164.

# Functionalities and Security Model

A function \( \text{negl}(\kappa) \) is said to be negligible in \( \kappa \) if for every positive polynomial \( p(\cdot) \), there exists an \( n_0 \) such that for all \( n > n_0 \), it holds that \( \text{negl}(n) < \frac{1}{p(n)} \).

A probability ensemble \( X = \{X(a, n)\}_{a \in \{0,1\}^*, n \in \mathbb{N}} \) is an infinite sequence of random variables indexed by \( a \) and \( n \in \mathbb{N} \). Two ensembles \( X = \{X(a, n)\}_{a \in \{0,1\}^*, n \in \mathbb{N}} \) and \( Y = \{Y(a, n)\}_{a \in \{0,1\}^*, n \in \mathbb{N}} \) are said to be computationally indistinguishable, denoted by \( X \approx Y \), if for every probabilistic polynomial-time (PPT) algorithm \( D \), there exists a negligible function \( \text{negl}(\cdot) \) such that for every \( a \in \{0, 1\}^* \) and \( n \in \mathbb{N} \), \( | \Pr[D(X(a, n)) = 1] - \Pr[D(Y(a, n)) = 1] | \leq \text{negl}(n) \).

The security of our protocols is proven based on the standard real/ideal world paradigm, where it is examined by comparing the adversary's behavior in a real execution to that of an ideal execution considered to be secure by definition (in the presence of an incorruptible trusted third party (TTP)). In an ideal execution, each participating party sends its input to the TTP over a perfectly secure channel, the TTP computes the function using these inputs, and sends the respective output to each party. Informally, a protocol is said to be secure if an adversary's behavior in the real protocol (where no TTP exists) can be simulated in the above-described ideal computation.

Below, we present the ideal functionalities in the standard security model for unanimous abort, fair, and GOD in Figures 16, 17, and 18, respectively.

### Figure 16: Ideal Functionality \( F_{\text{uAbort}} \)

Each honest party \( P_i \) (for \( i \in [5] \)) sends its input \( x_i \) to the functionality. Corrupted parties may send arbitrary inputs as instructed by the adversary. When sending the inputs to the trusted party, the adversary is allowed to send a special abort command as well.

- **Input**: On receiving message \( (\text{Input}, x_i) \) from \( P_i \), do the following: if a message \( (\text{Input}, *) \) was already received from \( P_i \), then ignore. Otherwise, record \( x'_i = x_i \) internally. If \( x'_i = \text{abort} \), set \( x'_i = \text{abort} \).
- **Output to the adversary**: If there exists \( i \in [5] \) such that \( x'_i = \text{abort} \), send \( (\text{Output}, \bot) \) to all the parties. Else, send \( (\text{Output}, y) \) to the adversary, where \( y = f(x'_1, x'_2, x'_3, x'_4, x'_5) \).
- **Output to honest parties**: Receive either "continue" or "abort" from the adversary. In case of "continue," send \( y \) to all honest parties. In case of "abort," send \( \bot \) to all honest parties.

### Figure 17: Ideal Functionality \( F_{\text{fair}} \)

Each honest party \( P_i \) (for \( i \in [5] \)) sends its input \( x_i \) to the functionality. Corrupted parties may send arbitrary inputs as instructed by the adversary. When sending the inputs to the functionality, the adversary is allowed to send a special abort command as well.

- **Input**: On receiving message \( (\text{Input}, x_i) \) from \( P_i \), do the following: if a message \( (\text{Input}, *) \) was already received from \( P_i \), then ignore. Otherwise, record \( x'_i = x_i \) internally. If \( x'_i = \text{abort} \), set \( x'_i = \text{abort} \).
- **Output**: If there exists \( i \in [5] \) such that \( x'_i = \text{abort} \), send \( (\text{Output}, \bot) \) to all the parties. Else, send \( (\text{Output}, y) \) to party \( P_i \) for every \( i \in [5] \), where \( y = f(x'_1, x'_2, x'_3, x'_4, x'_5) \).

### Figure 18: Ideal Functionality \( F_{\text{GOD}} \)

Each honest party \( P_i \) (for \( i \in [5] \)) sends its input \( x_i \) to the functionality. Corrupted parties may send arbitrary inputs.

- **Input**: On receiving message \( (\text{Input}, x_i) \) from a party \( P_i \) (for \( i \in [5] \)), do the following: if a message \( (\text{Input}, *) \) was already received from \( P_i \), then ignore. Else, record \( x'_i = x_i \) internally. If \( x'_i \) is outside of the domain for \( P_i \), set \( x'_i \) to some predetermined default value.
- **Output**: Compute \( y = f(x'_1, x'_2, x'_3, x'_4, x'_5) \) and send \( (\text{Output}, y) \) to party \( P_i \) for every \( i \in [5] \).

# Primitives

## B.1 Non-Interactive Commitment Scheme

We use a Non-Interactive Commitment Scheme (NICOM) characterized by two probabilistic polynomial-time (PPT) algorithms \( (\text{Com}, \text{Open}) \) and defined as follows:

- **Com**: Outputs a commitment \( c \) and corresponding opening information \( o \), given a security parameter \( \kappa \), a common public parameter \( pp \), a message \( x \), and random coins \( r \).
- **Open**: Outputs the message \( x \) given \( \kappa \), \( pp \), a commitment \( c \), and corresponding opening information \( o \).

The commitment scheme should satisfy the following properties:

- **Correctness**: For all values of public parameter \( pp \), message \( x \in M \), and randomness \( r \in R \), if \( (c, o) \leftarrow \text{Com}(x; r) \) then \( \text{Open}(c, o) = x \).
- **Hiding**: For all PPT adversaries \( A \), all values of \( pp \), and all \( x, x' \in M \), the difference \( | \Pr[(c, o) \leftarrow \text{Com}(x)][A(c) = 1] - \Pr[(c, o) \leftarrow \text{Com}(x')][A(c) = 1] | \) is negligible.
- **Binding**: A PPT adversary \( A \) outputs \( (c, o, o') \) and \( \bot \neq \{\text{Open}(c, o), \text{Open}(c, o')\} \) with negligible probability over uniform choice of \( pp \) and random coins of \( A \).

**Instantiations**:
- In the random oracle model, the commitment scheme is:
  - **Com**(\( x; r \)): Sets \( c = H(x || r) \), \( o = (x || r) \) where \( c, o \) refer to the commitment and opening, respectively. The public parameter \( pp \) can be empty.
  - **Open**(\( c, o = (x || r) \)): Returns \( x \) if \( H(o) = c \) and \( \bot \) otherwise.
- For the purpose of all empirical results, the random oracle can be instantiated using a hash function. Alternatively, based on one-way permutations, we present an instantiation of NICOM(Com, Open) used theoretically in our protocols as: Let \( f: \{0, 1\}^n \rightarrow \{0, 1\}^n \) be a one-way permutation and \( h: \{0, 1\}^n \rightarrow \{0, 1\} \) be a hard-core predicate for \( f \). Then the bit-commitment scheme for \( x \) is:
  - **Com**(\( x, r \)): Sets \( c = (f(r), x \oplus h(r)) \) where \( r \in_R \{0, 1\}^n \) and \( o = (x || r) \).
  - **Open**(\( c, o = (x || r) \)): Returns \( x \) if \( c = (f(r), x \oplus h(r)) \), else \( \bot \).
- We also provide string-based instantiations for NICOM(Com, Open) based on block ciphers that are secure in the ideal cipher model and are used in our AOTs for efficiency. The bit commitment scheme is as follows:
  - **Com**(\( b, r \)): Sets \( c = F_k(r) \oplus r \oplus b^n \) where \( b^n = \bigoplus_{i \in [n]} b \) and \( F: \{0, 1\}^n \times \{0, 1\}^n \rightarrow \{0, 1\}^n \) is a random permutation parametrized by key \( k \). Also, \( o = (r || b) \).
  - **Open**(\( c, o = (r || b) \)): Returns \( b \) if \( c = F_k(r) \oplus r \oplus b^n \) and \( \bot \) otherwise.
- However, this bit commitment scheme is not secure for string commitments. Hence, we describe the following secure instantiation:
  - **Com**(\( m, r \)): Sets \( c = F_k(r) \oplus r \oplus F_k(m) \oplus m \) s.t. \( F: \{0, 1\}^n \times \{0, 1\}^n \rightarrow \{0, 1\}^n \) is a random permutation parametrized by key \( k \) and \( o = (r || m) \).
  - **Open**(\( c, o = (r || m) \)): Returns \( b \) if \( c = F_k(r) \oplus r \oplus F_k(m) \oplus m \), else \( \bot \).

## B.2 Equivocal Commitment Scheme

For the fair protocol, we use an Equivocal Non-Interactive Commitment Scheme (eNICOM) characterized by four PPT algorithms \( (\text{eCom}, \text{eOpen}, \text{eGen}, \text{Equiv}) \). The algorithms \( \text{eCom}, \text{eOpen} \) are as defined in NICOM. The algorithms \( \text{eGen}, \text{Equiv} \) are defined as follows:

- **eGen**(\( 1^\kappa \)): Returns a public parameter and a corresponding trapdoor \( (epp, t) \). The parameter \( epp \) is used by both \( \text{eCom} \) and \( \text{eOpen} \), and the trapdoor \( t \) is used for equivocation.
- **Equiv**(\( c, o', x, t \)): Returns an \( o \) s.t. \( x \leftarrow \text{eOpen}(epp, c, o) \) when invoked on commitment \( c \), its opening \( o' \), the desired message \( x \) (to which equivocation is required), and the trapdoor \( t \).

An eNICOM should satisfy the following properties:

- **Correctness**: For all pairs of public parameter and trapdoor \( (epp, t) \leftarrow \text{eGen}(1^\kappa) \), message \( x \in M \), and randomness \( r \in R \), if \( (c, o) \leftarrow \text{eCom}(x; r) \) then \( \text{eOpen}(c, o) = x \).
- **Hiding**: For all \( (epp, t) \leftarrow \text{eGen}(1^\kappa) \), all PPT adversaries \( A \), and all \( x, x' \in M \), the difference \( | \Pr[(c, o) \leftarrow \text{eCom}(x)][A(c, o) = 1] - \Pr[(c, o) \leftarrow \text{eCom}(x'), o \leftarrow \text{Equiv}(c, x', t)][A(c, o) = 1] | \) is negligible.
- **Binding**: For all \( (epp, t) \leftarrow \text{eGen}(1^\kappa) \), a PPT adversary \( A \) outputs \( (c, o, o') \) and \( \bot \neq \{\text{eOpen}(c, o), \text{eOpen}(c, o')\} \) with negligible probability.

**Instantiation**:
- We can use the equivocal bit commitment scheme of [34] in the standard model, based on Naor’s commitment scheme [56] for bits. Let \( G: \{0, 1\}^n \rightarrow \{0, 1\}^{4n} \) be a pseudorandom generator. The commitment scheme for bit \( b \) is:
  - **eGen**(\( 1^\kappa \)): Sets \( (epp, t_1, t_2, t_3, t_4) = ((\sigma, G(r_1), G(r_2), G(r_3), G(r_4)), r_1, r_2, r_3, r_4) \), where \( \sigma = G(r_1) \oplus G(r_2) \oplus G(r_3) \oplus G(r_4) \). The trapdoor \( t = (t_1, t_2, t_3, t_4) \).
  - **eCom**(\( x; r \)): Sets \( c = G(s_1) \oplus G(s_2) \) if \( x = 0 \), else \( c = G(s_1) \oplus G(s_2) \oplus \sigma \) and sets \( o = (x || r) \) where \( r = s_1 || s_2 \).
  - **eOpen**(\( c, o = (x || r) \)): Returns \( x \) if \( c = G(s_1) \oplus G(s_2) \oplus x \cdot \sigma \) (where \( \cdot \) denotes multiplication by a constant), else returns \( \bot \).
  - **Equiv**(\( c = G(r_1) \oplus G(r_2), \bot, x, (t_1, t_2, t_3, t_4) \)): Returns \( o = (x || r) \) where \( r = t_1 || t_2 \) if \( x = 0 \), else \( r = t_3 || t_4 \). The entire trapdoor \( t = (t_1, t_2, t_3, t_4) \) is required for equivocation.
- For empirical purposes, we rely on the random oracle-based scheme presented before with the property of equivocation and is realized using a hash function.

## B.3 Collision-Resistant Hash [62]

Consider a hash function family \( H: K \times L \rightarrow Y \). The hash function \( H \) is said to be collision-resistant if for all probabilistic polynomial-time adversaries \( A \), given the description of \( H_k \) where \( k \in_R K \), there exists a negligible function \( \text{negl}() \) such that
\[ \Pr[(x_1, x_2) \leftarrow A(k) : (x_1 \neq x_2) \wedge H_k(x_1) = H_k(x_2)] \leq \text{negl}(\kappa), \]
where \( m = \text{poly}(\kappa) \) and \( x_1, x_2 \in_R \{0, 1\}^m \).