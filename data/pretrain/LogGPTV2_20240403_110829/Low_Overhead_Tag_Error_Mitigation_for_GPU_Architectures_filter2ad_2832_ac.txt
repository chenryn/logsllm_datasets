D. Address Stride Distribution Analysis
As we have learned from simulation results, the address
trace is an important factor for determining if using the hash
function for set-index calculation can decrease false hit rate or
not. In order to have an indicator of why address strides matter,
we perform a ﬁrst order analysis on address trace distribution.
318
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:02 UTC from IEEE Xplore.  Restrictions apply. 
(a) False hit under true miss
(b) False hit under true hit
Fig. 4. False hit for a 3-way12KB set-associative instruction cache: Hash-based vs No-Hash Schemes
(a) False hit under true miss
(b) False hit under true hit
Fig. 5. False hit for a 3-Way 24KB set-associative instruction cache: Hash-based vs No-Hash Schemes
For this analysis, we compute the Hamming distance between
tag parts of each two consecutive addresses. Depending on
the Hamming distance value, one of the schemes (No-hash or
Hash-based) could perform better (Figure 7). For example, if
Hamming distance between tags is 1, two cases might happen:
• If the set-indexes for these two consecutive address refer-
ences are the same; the No-hash scheme would map both
addresses to the same set. Therefore, if a bit ﬂip happens in
the tag entry that is in cache, a false hit occurs. However,
the Hash-based maps the new address reference to another
set, which decreases the chance of false hit. Therefore, this
scenario is in favor of Hash-based scheme.
• If the set-indexes for these two consecutive address refer-
ences are different; the No-Hash scheme maps these two
addresses to two different sets, so a bit ﬂip for the tag entry
in the cache does not result in false hit. The same reasoning
is true for the Hash-based scheme. So for the large fraction
of time, these two schemes behave the same way, which
we call it a Tie. However, for the Hash-based scheme, the
probability that these two sets map to the same locations in
TagWidth, where TagWidth is the number
the cache tag is
of bits in the tag part of the address. This is because for
a given two address references with different set-indexes,
1
in a primitive polynomial-based hash, there can be only one
speciﬁc tag bit out of the TagWidth bits that can be different
in the tag portion of the reference.
With the same reasoning if the Hamming distance between
two consecutive tags is 0, two schemes perform the same way,
and the situation is a Tie. Also, for the other cases where
the Hamming distance between two consecutive tags are more
than 2, result is a Tie.
We performed this address stride distribution analysis and
the result is shown in Figure 8. As can be seen, the outcome
distribution for the instruction cache is almost a Tie, with a
slight favor to No-Hash scheme. This is what we have seen
also in the results from simulation. For data cache, either there
is a Tie, or the distribution is shown to be more towards Hash-
based method as can be seen for benchmarks like MiniFE,
SGEMM, DGEMM, and ZGEMM.
VII. ANALYTICAL & MONTE-CARLO FALSE HIT
ESTIMATES FOR RANDOM TRACE
To get an early understanding of the impact of various
tag SRAM attributes (tag width, set associativity, set-index
bits, and the cache capacity), we analytically identiﬁed that
tag width and associativity (i.e., the number of ways) have
319
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:02 UTC from IEEE Xplore.  Restrictions apply. 
(a) False hit under true miss
(b) False hit under true hit
Fig. 6. False hit for a 4-way 128KB data cache: Hash-based vs No-Hash Schemes
Fig. 7. Address stride distribution analysis, based on Hamming distance (HD)
between tag portions of consecutive addresses
the most impact on the false hit probability. In fact, it can
be shown that for a random address trace, the average prob-
ability of false hit is bounded above by: Associativity
, where
2TagWidth
Associativity is the number of ways in the set-associative
cache and TagWidth is the number of tag reference bits in
the address bit ﬁeld. Bounding the variance on the false hit
probability is a much harder problem as it has a complex
dependence on the nature of address references and the initial
state of the tag address entries in the tag SRAM. We conducted
millions of Monte-Carlo experiments to estimate the average
false hit probability (under true miss events) and the standard
deviation using random address traces. Tables
III and IV
show these results and validate the analytical upper bound on
the average probability of false hits. Results also show that
in general false hit probability goes down exponentially with
increasing tag width and somewhat increases with increasing
associativity. As expected, the standard deviation is of the
same order of magnitude as the expected false hit probabil-
ity, suggesting much higher variance compared to a normal
distribution.
While the false hit probability for random traces, in practical
tag SRAM implementations, is about two orders of magni-
tude lower (1e-04 vs. 1e-02) than the probability of false
hit estimate through actual workload trace simulation,
the
FALSE HIT PROBABILITY SENSITIVITY TO TAG WIDTH
TABLE III
(ASSOCIATIVITY=3)
Tag Width
(Bits)
4
8
10
12
16
18
20
Upper Bound
2TagWidth × 100
False Hit
Average False
Hit Probability% Std Dev% Associativity
18.75
1.17
0.29
0.07
0.005
0.001
2.8e-04
5.6e-01
9.5e-03
9.0e-03
2.7e-03
4.1e-04
2.3e-04
1.3e-04
5.7800
0.3900
0.1000
0.0230
0.0016
0.0003
1.3e-04
FALSE HIT PROBABILITY SENSITIVITY TO ASSOCIATIVITY (TAG
TABLE IV
WIDTH=20)
Associativity
1
2
3
4
6
8
16
Average False
Hit Probability% Std Dev% Associativity
False Hit
6.0e-05
8.5e-05
7.7e-05
8.6e-05
9.8e-05
1.0e-04
1.5e-04
6.14e-05
2.40e-05
4.02e-05
3.88e-05
2.85e-05
2.34e-05
1.53e-04
Upper Bound
2TagWidth × 100
9.5e-05
1.9e-04
2.8e-04
3.8e-04
5.7e-04
7.6e-04
1.5e-03
predicted sensitivity trend on tag width holds. For example, the
instruction cache references had 32-bit virtual-address width
(with tag width = 20) and the maximum observed false hit
probability, under true miss, was 0.1% whereas for L1 data
cache with 48-bit virtual-address width (tag width = 33) that
maximum observed false hit probability, under true miss, was
0.05%.
VIII. CONCLUSION
GPU architectures have stringent reliability requirements.
Yet as a result of technology scaling, they are particularly
320
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:02 UTC from IEEE Xplore.  Restrictions apply. 
(a) Instruction cache trace
(b) Data cache trace
Fig. 8. Outcome distribution (Favor No-hash, Favor Hash, Tie)
susceptible to radiation-induced errors. Memory structures
including caches and register ﬁles are responsible for the
majority of transient errors on GPUs. To make these cache
structures resilient to errors, entries in the caches are protected
by parity/ECC bits, resulting in area and energy overhead.
In this paper, we study the resiliency of unprotected tag
caches in GPU and propose a very low overhead tag checking
study that can be applied to read-only and write-through
caches in the GPUs. This approach uses hash function for
set-index calculation instead of using information redundancy.
Our results show the sensitivity of the effectiveness of hash-
based methods to the nature of address traces. For instruction
address traces, the access patterns (as shown by the address
stride distribution analysis) show a tie between Hash-based and
No-hash based set-index methods. The Hash-based method
mainly helps data cache tag structures, where Hash-based
lookup is 10× better than No-Hash lookup in terms of false
hit probability. The hash function has almost negligible area
and performance overhead. In addition, both simulation and
analytical results indicate that the impact of low overhead
tag error mitigation with or without set-index hashing on the
overall GPU SDC FIT (failures in time) rate is less than 1%.
While the simulation studies have been done only for GPU tag
SRAM structures, there is nothing in the tag SRAM structures
or the address reference patterns that are peculiar to the GPUs;
therefore, the results of this study should hold good for CPU
tag structures as well.
IX. ACKNOWLEDGMENT
This work in part was supported by LLNS Subcontract No.
B620719.
REFERENCES
[1] H. Stone, Discrete mathematical structures and their applications, ser.
SRA computer science series. Science Research Associates, 1973. [On-
line]. Available: https://books.google.com/books?id= tA-AAAAIAAJ
[2] R. W. Hamming, “Error detecting and error correcting codes,” The Bell
System Technical Journal, vol. 29, no. 2, pp. 147–160, April 1950.
[3] S. Kim and A. K. Somani, “Area efﬁcient architectures for information
integrity in cache memories,” in Proceedings of the 26th International
Symposium on Computer Architecture (Cat. No.99CB36367), 1999, pp.
246–255.
[4] S. Kim, “Reducing area overhead for error-protecting large l2/l3 caches,”
IEEE Transactions on Computers, vol. 58, no. 3, pp. 300–310, March
2009.
[5] S. a. Kim, “Area-efﬁcient error protection for caches,” in Proceedings
of the Design Automation Test in Europe Conference, ser. DATE ’06.
IEEE, 2006, pp. 1–6.
[6] A. Gonz´alez, M. Valero, N. Topham, and J. M. Parcerisa, “Eliminating
cache conﬂict misses through xor-based placement
functions,” in
Proceedings of the 11th International Conference on Supercomputing,
ser. ICS ’97. New York, NY, USA: ACM, 1997, pp. 76–83. [Online].
Available: http://doi.acm.org/10.1145/263580.263599
[7] Z. Zhang, Z. Zhu, and X. Zhang, “A permutation-based page interleav-
ing scheme to reduce row-buffer conﬂicts and exploit data locality,”
in Proceedings 33rd Annual IEEE/ACM International Symposium on
Microarchitecture. MICRO-33 2000, 2000, pp. 32–41.
[8] F. Bodin and A. Seznec, “Skewed associativity improves program perfor-
mance and enhances predictability,” IEEE Transactions on Computers,
vol. 46, no. 5, pp. 530–544, May 1997.
[9] N. Topham and A. Gonzalez, “Randomized cache placement for elimi-
nating conﬂicts,” IEEE Transactions on Computers, vol. 48, no. 2, pp.
185–192, Feb 1999.
[10] M. Kharbutli, K. Irwin, Y. Solihin, and J. Lee, “Using prime numbers
for cache indexing to eliminate conﬂict misses,” in Software, IEE
Proceedings-, Feb 2004, pp. 288–299.
[11] H. Vandierendonck and K. D. Bosschere, “Xor-based hash functions,”
IEEE Transactions on Computers, vol. 54, no. 7, pp. 800–812, July
2005.
[12] A. Ros, P. Xekalakis, M. Cintra, M. E. Acacio, and J. M. Garc´ıa,
“Ascib: Adaptive selection of cache indexing bits for
removing
conﬂict misses,” in Proceedings of the 2012 ACM/IEEE International
Symposium on Low Power Electronics and Design, ser. ISLPED ’12.
New York, NY, USA: ACM, 2012, pp. 51–56. [Online]. Available:
http://doi.acm.org/10.1145/2333660.2333674
[13] B. R. Rau, “Pseudo-randomly interleaved memory,” in Proceedings of
the 18th Annual International Symposium on Computer Architecture,
ser. ISCA ’91. New York, NY, USA: ACM, 1991, pp. 74–83. [Online].
Available: http://doi.acm.org/10.1145/115952.115961
[14] J. R. Diamond, D. S. Fussell, and S. W. Keckler, “Arbitrary modulus
indexing,” in Proceedings of the 47th Annual IEEE/ACM International
Symposium on Microarchitecture, ser. MICRO-47. Washington, DC,
USA: IEEE Computer Society, 2014, pp. 140–152. [Online]. Available:
http://dx.doi.org/10.1109/MICRO.2014.13
[15] M. Khairy, M. Zahran, and A. G. Wassal, “Efﬁcient utilization of
gpgpu cache hierarchy,” in Proceedings of
the 8th Workshop on
General Purpose Processing Using GPUs, ser. GPGPU-8. New
York, NY, USA: ACM, 2015, pp. 36–47.
[Online]. Available:
http://doi.acm.org/10.1145/2716282.2716291
[16] K. Y. Kim and W. Baek, “Quantifying the performance and
energy efﬁciency of advanced cache indexing for gpgpu computing,”
Microprocess. Microsyst., vol. 43, no. C, pp. 81–94, Jun. 2016.
[Online]. Available: https://doi.org/10.1016/j.micpro.2016.01.003
[17] “Nvidia tesla v100 gpu architecture,” June 2017, White Paper. [Online].
Available: http://www.nvidia.com/object/volta-architecture-whitepaper.
html
[18] N. R. Saxena, C. W. D. Chang, K. Dawallu, J. Kohli, and P. Helland,
“Fault-tolerant features in the hal memory management unit,” IEEE
Transactions on Computers, vol. 44, no. 2, pp. 170–180, Feb 1995.
321
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:02 UTC from IEEE Xplore.  Restrictions apply.