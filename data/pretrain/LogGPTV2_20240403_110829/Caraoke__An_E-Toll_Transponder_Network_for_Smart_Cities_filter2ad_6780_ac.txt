the accuracy of our angle estimate with a smart choice of
antenna position. Speciﬁcally, the accuracy in calculating α
is best for angles around 90o and degrades for angles around
0o or 180o. This is due to the fact that ∆φ is proportional
to cos α, as shown in Eq. 10. Hence, for values close to 0
or 180, α is very sensitive to change in ∆φ. To reduce this
sensitivity, we use three antennas arranged in an equilateral
triangle as shown in Fig. 6. At any time, we use a pair of
302z
b
y
r
x
Figure 7—Localizing the Car from AoA: In this ﬁgure α
is angle of arrival and b is the height of the pole. The car is
located on a point on the intersection of the cone and the road
plane which is a hyperbola. Hence, By using the information
from two poles, one can localize the exact location of the car.
antennas out of the three antennas. We pick the pair using
a programmable switch. In this setup, for any transponder
position, there exists exactly one pair of antennas for which
the spatial angle is always close to 90◦ (i.e., between 60◦
and 120◦). We compute the angle for all pairs and use the
pair whose angle is close to 90◦ degree to localize the car.
Next we use the spatial angle to locate the transponder.
The spatial angle does not correspond to a single point in
the space. In fact, as shown in Fig. 7, this angle corresponds
to all points on the surface of a cone where its altitude axis
is parallel to the road. The cone equation can be written as
follow:
y2 + z2 = r2 = (tan(α) · x)2
(14)
where x,y and z are coordinate of the car with respect to the
center of measuring antennas, and α is the spatial angle be-
tween the car and reader. Cars, however, are always on the
road and we can use this as another constraint. The intersec-
tion of the cone and the road plane is a hyperbola, as shown
in Fig. 7. The equation for this hyperbola is as follow:
(tan(α) · x)2 − y2 = b2
(15)
where b is a constant that corresponds to the height of the
pole. While a single hyperbola is not enough to localize, we
can combine information across two readers to locate the car.
Speciﬁcally, using a second reader located on the other side
of the road provides us another hyperbola equation. Then,
by solving these two equations, one can ﬁnd x and y, and
localize the car.10
Note, in the case where antennas are tilted by 60◦ , the pro-
cess of localizing is the same, except that the cone is tilted
by 60◦. Hence, the intersection of the cone and road plane is
an ellipse instead of a hyperbola. One can simply replace the
hyperbola equation with that of an ellipse to ﬁnd the inter-
section point.
Finally, in order to intersect location information across
two readers, we need this information to be synchronized.
We can leverage the readers’ connection to the Internet to
synchronize them to within tens of ms using the network
timing protocol (NTP) [3, 45]. This synchronization level is
more than sufﬁcient for localizing parked cars. For moving
10 The intersection of two hyperbolas may results in more
than one point, however, only one of these points is located
on the road and the rests are on the sidewalk.
cars, this introduce some error, which we will discuss in the
following section.
7. DETECTING A CAR’S SPEED
As described earlier, Caraoke can also detect the speed
of the car. Speciﬁcally, Caraoke readers can be deployed on
street-lamps and detect speeding on streets in the city. The
car speed can be estimated by localizing the car at two dif-
ferent locations and computing the total time the car took to
travel between these two locations. Hence, the speed of the
car can be written as:
v =
x2 − x1
delay
where x1 and x2 are ﬁrst and second locations of the car and
delay is the amount of time it took to travel from location x1
to location x2 which are computed as described §6.
The accuracy of localizing the x1 and x2 and estimating the
delay depends on the time synchronization between the read-
ers. The error in x1 and x2 can be upper bounded using the
hyperbola equation in the previous section independent of
time synchronization. This error depends on reader’s height
and the number of lanes in the same direction on the street.
For example, for a four lane street i.e. two lanes in each di-
rection, where the antennas are attached to a street light pole
whose height is 13 feet, the maximum error is 8.5 feet. 11 The
error in delay is the same as the error in timing synchroniza-
tion. Since the readers are connected to the Internet via LTE
modems, they can be synchronized up to tens of ms network
timing protocol (NTP) [3, 45].
The accuracy of estimating the speed depends on the accu-
racy of the above parameters as well as how far x1 and x2 are
from each other. The farther they are, the more accurate the
estimate is. In particular, if x1 and x2 are measured at read-
ers that are separated by 4 light poles (i.e. a separation of of
about 360 feet (≈110 m) [10]), for car speeds of 20 mile/hour
and 50 mile/hour, the maximum error is 5.5% and 6.8% re-
spectively. This accuracy can further be improved by taking
more measurements along the street from more light poles.
8. DECODING TRANSPONDERS’ IDS
In this section, we explain how Caraoke decodes an indi-
vidual transponder in the presence of collisions of multiple
transponders.
At ﬁrst glance, it might seem that one can decode a
transponder’s signal by using a band-pass ﬁlter centered
around the transponder’s CFO peak. This solution however
does not work because OOK has a relatively wide spectrum
–i.e., the data is spread as opposed to being concentrated
around the peak12.
√b2−√b2+(l·w)2
11The exact equation of error is
where b is an-
tenna’s height, l is the number of lanes in the same direction
on the street and w is the width of the lane (typically 12 feet).
12Intuitively this can be seen by recalling that OOK randomly
toggles between 0 and 1 and hence it’s spectrum resembles
white noise.
tan(α)
303In contrast, our decoding algorithm is based on combining
multiple collisions in a manner that ensures that the signal
from the target transponder combines coherently, whereas
the signals from other transponders combine incoherently.
This allows Caraoke to boost the SNR of the target transpon-
der above others, and hence decode the target transponder.
Speciﬁcally, when a Caraoke reader transmits the query
signal, multiple transponders respond simultaneously. With-
out loss of generality, let us assume that we are interested in
decoding transponder 1.
r(t) = h1s1(t) · ej2π·∆f1·t +Xi
hisi(t) · ej2π·∆fi·t
where si(t) is the signal transmitted by the ith transponder,
∆fi is its CFO, and the hi is its channel to the reader. If the
reader transmits another query, the received signal will be:
r′(t) = h′1s1(t) · ej2π·∆f1·t +Xi
h′isi(t) · ej2π·∆fi·t
Note that the channel coefﬁcients have changed from the ﬁrst
received signal to the second one. This is due to the fact that
the transponders start with a random initial phase. The chan-
nels h1 and h′1 as well as the CFO ∆f1 can be estimated from
the peak in the frequency domain as described in §3. We can
then compensate for the CFO and the channels of transpon-
der 1 and sum up the received signals to obtain the averaged
signal ˜s1(t):
˜s1(t) =
r′(t)
h′1
r(t)
h1 · e−j2π∆f1t +
(cid:18) hi
= 2 · s1(t) +Xi
· e−j2π∆f1t
h′i
h′1(cid:19) si(t) · ej2π(∆fi−∆f1)t
+
h1
By repeating this process N times we get:
˜s1(t) = N · s1(t) +Xi
Xj
hij
h1j
 si(t) · ej2π(∆fi−∆f1)t
where hij is the channel from the i-th transponder in the j-th
received signal. As can be seen from the above equation, the
signals from transponder 1 add coherently, while the other
signals add incoherently with random phases and average
out. For sufﬁciently large N, the signal power for transpon-
der 1 will be much more than that for other transponders. In
this case, the SNR is enough to be decoded.
Fig. 8 shows an example of this decoding algorithm in
which the reader receives a collision of the signals from ﬁve
transponders. Fig. 8(a) shows the time signal r(t) of the re-
ceived collisions before any averaging. As can be seen, the
signal looks random and undecodable. Fig. 8(b) and (c) show
the time signal ˜s1(t) after averaging 8 and 16 replies respec-
tively. The ﬁgures show that after averaging 16 times, the bits
of the desired transponder become decodable and the more
we average, the better our ability to decode becomes.
9. CARAOKE MULTIPLE READER PROTOCOL
So far, we have assumed that transponders respond to a
single reader at any time. However, a transponder on the
e
d
u
t
i
l
p
m
A
e
d
u
t
i
l
p
m
A
e
d
u
t
i
l
p
m
A
Time 
(a) Time signal before averaging
(b) Time signal after averaging 8 times
Time 
(c) Time signal after averaging 16 times
Time 
Figure 8—Decoding a transponder’s response: (a) Re-
ceived signal before averaging, (b) after averaging 8
replies, (c) after averaging 16 replies. Caraoke is able to
decode a transponder’s response by correcting its channel
and then averaging.
road might be in the range of two or more Caraoke read-
ers.13 Therefore, there is a need for a MAC protocol on the
readers side to avoid interference from readers. We will start
by distinguishing between two interference scenarios:
1. Collision of Reader Queries: In this case, a query sig-
nal from a reader collides with a query signal from another
reader. As explained in §3, the query signal transmitted by a
reader is simply a sinewave transmitted at carrier frequency.
Even if two readers interfere, the combined signal is still a
sinewave at the carrier frequency, and hence a valid trigger.
Thus, a collision of two queries is not harmful. Our empiri-
cal experiments conﬁrm that transponders are still triggered
to respond even when queries from different readers collide.
2. Collision of Reader Query with a Transponder Re-
sponse: In this case, a query signal from a reader collides
with the response of a transponder queried by another reader.
This collision is harmful and needs to be avoided. To do so,
Caraoke uses carrier sense. Speciﬁcally, each reader listens
to the medium before transmitting a query. If the medium
is available, it then transmits its query. But how long should
the reader listen to avoid a collision with a transponder re-
sponse. Recall from Fig §2 in §3, that the query signal is only
20µs and the delay between the query and the transponder
response is 100µs. Thus, by listening for more than 120µs,
if the reader does not hear any signal it can guarantee that no
transponder response will be transmitted after the 120µs and
it can transmit its query.
To summarize, Caraoke uses a MAC protocol for the read-
ers based on CSMA, where each reader listens for an idle
medium for 120µs before it can transmit. The main differ-
ence, however, is that there is no need for contention window
since collisions between queries are acceptable.
13The range of a Caraoke reader is 100 feet.
304Power Management
r
e
Receiver
Query
Generator
l
l
o
r
t
n
o
C
-
o
r
c
M
i
m
e
d
o
M
Figure 9—Block diagram of the Caraoke reader
10. CARAOKE READER’S HARDWARE DESIGN
Caraoke is a software-hardware solution. In contrast to the
previous sections, which focus on the algorithmic techniques
underlying Caraoke, here we describe the hardware design
and the optimizations we performed in order to support a
low-power low-cost device.
We have developed a custom-design PCB for the Caraoke
reader. The device harvests its power from solar energy and
connects to the Internet via a wireless modem. Hence, it can
be attached to a light pole (or other structures) without the
need for external power or wired Internet connectivity.
Fig. 9 illustrates the block diagram of the Caraoke reader.
The device has ﬁve main block: a query generator, a re-
ceiver, a micro-controller, a modem, and a power manage-
ment unit. The query-generator transmits a query signal that
invokes a response from nearby transponders, the receiver
receives the response signal, digitizes it, and provides it to
the micro-controller. The micro-controller implements the
standard receiver processing, i.e., packet detection, phase es-
timation, etc. It also implements our algorithmic solutions
for counting, localization, speed measurement, etc. The pro-
cessed data is then uploaded to the Internet via an LTE mo-
dem. (An alternative approach could use a WiFi modem, and
have the readers forming a mesh network to connect to the
Internet. However, the mesh network formation is beyond
the scope of this paper.) Finally, the power management unit
includes a small solar panel that attaches on top of the PCB,
and a rechargeable battery that stores the harvested energy
for operation during night time and on cloudy days. Solar
panels can harvest ∼ 10mW/cm2 on sunny days [57, 53]. We
use a 6cmx7.5cm solar panel, which can provides 500mW
[47]. In §12, we show that this number is several folds larger
than the power consumption of a Caraoke reader.
Finally, the device is equipped with a USB port which is
used to program the micro-controller. The same USB port
can also be used to power the device and extract the data,
during the development phase.
In order to minimize the cost and power consumption of
Caraoke reader, we perform multiple optimizations as fol-
lows:
• Eliminating the TX chain: A Caraoke reader has to
transmit a query signal to request a response from the
transponders. One approach to generate this query is to
use a standard transmitter (TX) chain, which generates the
signal in the digital domain. This approach however is in-
efﬁcient in terms of both power and cost. Speciﬁcally, a
full TX chain includes a mixer, a frequency synthesizer
(PLL), a digital-to-analog-converter (DAC) and some dig-
ital logic. These components are necessary to transmit
data bits. Yet, the e-toll query signal is just a simple sine-
wave and does not carry any data. Such a sine-wave can
be generated using a simple frequency synthesizer (i.e., a
PLL), and does not need the rest of the components in the