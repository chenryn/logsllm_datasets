DOM Clobbering攻击学习
DOM Clobbering攻击其实算是比较老的攻击手法了，只是之前只知道最基本的dom-xss，没有去深入
了解过，今天看到相关文章觉得挺有意思，所以学习记录一下
概念
DOM破坏是一种将构造的特殊HTML代码注入到页面中以操纵DOM并最终更改页面上JavaScript行为的
技术。在无法使用XSS的情况下，DOM破坏尤其有用，可以在属性id或name被HTML过滤器列入白名单
的页面上控制某些HTML 。DOM破坏的最常见形式是使用锚元素覆盖全局变量，然后该全局变量将被应
用程序以不安全的方式使用，例如生成动态脚本URL。
相关知识
dom对windows对象的影响
首先下面这是个正常的弹窗功能的html代码：
然而有一个小知识就是在HTML里设定一个有id的元素之后，在JS里就能存取操作它
而因为JS的scope链，我们可以直接操作btn
  click me
所以最开始的代码可以简化为：
不需要 getElementById等操作，他会自动一层层向上查询到windows对象
而除了id可以直接用windows直接存取操作外，还有四个tag用name也可以
DOM Clobbering
由以上我们可以得知我们可以根据特殊构造的HTML去影响JS原本的运行，这也是DOM破坏攻击的基本
构造一个留言板场景如下：
  click me
众所周知，现在的开发安全在服务端会写很多安全规则来过滤一些关键词来防御XSS，让你构造的恶意js
无法执行，使得XSS无效
但是由于一些功能的要求，比如插入图片等等，某些地方还是会支持正常的html语句，比如  、
 等等
于是我们可以插入一个id是test_name的div标签通过if判断，再用a标签设置恶意payload
可以看到成功打到了cookie
用a标签构造的原因：
在toString时会回传url，并且可通过href属性来设置url，让其可控
所以DOM Clobbering攻击分两步走：
1. 用html构造含id属性的语句影响JS中的变量
2. 用a标签搭配href达到恶意攻击
不过这种攻击需要注意的一点就是如果攻击的变量以及被定义了，那么用DOM覆盖不掉：
多层级的 DOM Clobbering
如果需要覆盖的对象由多个层级，有以下几个办法构造：
1. 利用HTML标签的层级关系
可以利用 form[name]  或是 form[id]  去拿它下层的元素，去构造多层DOM clobbering
这种情况就没有a标签不能直接用了
2. 特性：HTMLCollection
HTMLCollection 是 HTML 元素的集合。类似一个包含 HTML 元素的数组列表。
在Window对象窗口中确定命名属性名称的值的时候，如果对象只有一个元素，则返回该元素。
否则，返回以窗口的关联文档为根的HTMLCollection，该HTMLCollection的过滤器仅匹配名称为
window的命名对象。 （根据定义，这些都是元素。）
而我们可以利用 name 或是 id 去拿 HTMLCollection 里面的元素。
    console.log(test) // 
    console.log(config.a) // 
    console.log(config.b) // 
通过构造两个同id的标签创造出HTMLCollection，再用name来抓取HTMLCollection的特定元素，
达成双层的效果。
3. 把上面两种方法结合在一起就可以达到三层或四层的DOM Clobbering攻击
4. 利用 iframe 标签嵌套
给iframe一个name属性，这个name就能指向到iframe里面的windows
设置setTimeout = 500是因为iframe不是同步的，需要一些时间才能抓到iframe里面的东西
甚至可以嵌套创造更多层级：
  '>
    setTimeout(() => {
      console.log(config.apiUrl) // 
    }, 500)
   标签分组到一个DOM集合（HTMLCollect）中。然后，DOM破坏将fileIntegrity
使用此DOM集合覆盖引用。在最后一个锚点元素上使用了name属性，以破坏对象的value属性，
该属性fileIntegrity指向恶意值，因此它将绕过script标记的完整性验证
参考链接：
DOM破坏 | 网络安全学院
深入理解JS之Scope链
https://blog.techbridge.cc/2021/01/23/dom-clobbering/
https://html.spec.whatwg.org/#api-for-a-and-area-elements
https://portswigger.net/research/dom-clobbering-strikes-back
  '>