views of log contents to different readers can be detected.
Multiple instances of the log service are used in a single
election. One instance, called the bulletin board, is used by
election authorities to record all the information needed for
veriﬁability of the election. The remaining instances, called
ballot boxes, are used by voters to cast their votes.9
3.2. Setup phase
First, the supervisor creates the election by posting the ballot
design on an empty bulletin board. The supervisor also iden-
tiﬁes the tellers by posting their individual public keys.10
9In our prototype, the log service instances are centralized systems pro-
vided by the election authorities—the bulletin board by the supervisor, and
one ballot box by each tabulation teller. But instances could be made dis-
tributed systems to improve availability, and instances could be provided by
agents other than the election authorities.
10A real-world deployment of Civitas would need a public-key infras-
tructure to certify keys.
356
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
registrationtellersregistrationtellersregistrationtellervoterclientballotboxballotboxballotboxballotboxtabulation tellertabulation tellertabulation tellertabulation tellerbulletinboardverifiablereencryption mixacquirecredentialvoteeliminate bad votesmix votesdecrypt resultsauditcommitsign,retrievevotesSecond, the registrar posts the electoral roll, containing
identiﬁers (perhaps names or registration numbers) for all
authorized voters, along with the voters’ public keys. Each
voter is assumed to have two keys, a registration key and a
designation key, whose uses are described below.
Third, the tabulation tellers collectively generate a public
key for a distributed encryption scheme and post it on the
bulletin board. Decryption of messages encrypted under this
key requires the participation of all tabulation tellers.
Finally,
the registration tellers generate credentials,
which are used to authenticate votes anonymously. Each
credential is associated with a single voter. Like keys in an
asymmetric cryptosystem, credentials are pairs of a public
value and a private value. All public credentials are posted
on the bulletin board, and each registration teller stores a
share of each private credential. Private credentials can be
forged or leaked only if all registration tellers collude.
3.3. Voting phase
Voters register to acquire their private credentials. Each reg-
istration teller authenticates a voter using the voter’s regis-
tration key. The teller and voter then run a protocol, using
the voter’s designation key, that releases the teller’s share of
the voter’s private credential to the voter. The voter com-
bines all of these shares to construct a private credential.
Voting may take place immediately, or a long time after
registration. To vote, the voter submits a private credential
and a choice of a candidate (both encrypted), along with a
proof that the vote is well-formed, to some or all of the bal-
lot boxes. (This submission does not require either of the
voter’s keys.) Replication of the vote across the ballot boxes
is used to guarantee availability of the vote for tabulation.
Resisting coercion. The key idea (due to Juels et al. [45])
that enables voters to resist coercion, and defeats vote sell-
ing, is that voters can substitute fake credentials for their real
credentials, then behave however the adversary demands.
For example:
If the adversary
demands that the
voter. . .
Submits a particular
vote
Sells or surrenders a
credential
Abstains
Does so with a fake credential.
Then the voter. . .
Supplies a fake credential.
Supplies a fake credential to the ad-
versary and votes with a real one.
To construct a fake credential, the voter locally runs an
algorithm to produce fake private credential shares that, to
an adversary, are indistinguishable from real shares. The
faking algorithm requires the voter’s private designation key.
The voter combines these shares to produce a fake private
credential; the voter’s public credential remains unchanged.
357
Revoting. Voters might submit more than one vote per cre-
dential. The supervisor has the ﬂexibility to specify a pol-
icy on how to tally such revotes. If revotes are not allowed,
then all votes submitted under duplicate credentials are elim-
inated. If revotes are allowed, then the voter must include a
proof in later votes to indicate which earlier votes are be-
ing replaced. This proof must demonstrate knowledge of
the credential and choice used in both votes, preventing an
adversary from revoting on behalf of a voter.
Ballot design. Civitas is compatible with the use of any
ballot design for which a proof of well-formedness is pos-
sible. Our prototype supports the use of ballots in which
voters may choose a single candidate (plurality voting), any
subset of candidates (approval voting), or a ranking of the
candidates (ranked voting). However, ranked voting intro-
duces covert channels that enable attacks on coercion resis-
tance. We discuss this vulnerability, and how to eliminate it,
in the accompanying technical report [18].11
Write-in votes could also be supported by Civitas, since
any write-in could be considered well-formed. However,
write-ins also enable attacks on coercion resistance.12 To our
knowledge, it is not possible to eliminate this vulnerability,
so we chose not to implement write-ins in our prototype.
3.4. Tabulation phase
The tabulation tellers collectively tally the election:
1. Retrieve data. All tabulation tellers retrieve the votes
from each ballot box and the public credentials from
the bulletin board.
2. Verify proofs. The tellers check each vote to verify
the proof of well-formedness. Any vote with an invalid
proof is discarded. (For efﬁciency, our implementation
actually merges this with the next step.)
3. Eliminate duplicates. At most one vote is retained for
each credential. Votes with duplicate credentials are
eliminated according to the revoting policy.
4. Anonymize. Both the list of submitted votes and the
list of authorized credentials are anonymized by apply-
ing a random permutation, implemented with a mix net-
work [11]. In the mix, each tabulation teller in turn ap-
plies its own random permutation.
5. Eliminate unauthorized votes. The credentials in
the anonymized votes are compared against the anon-
11Other kinds of ballots can be encoded into one of these supported
forms. For example, conditional ballots, in which a voter selects “yes”
or “no” on some issue, then is offered particular candidates based on this
selection, can be encoded as a plurality vote on a pair of a selection and a
candidate.
12For example, the adversary could issue each voter a unique, large num-
ber, then demand that the voter submit that number as the voter’s choice.
If that number does not appear in the ﬁnal list of decrypted choices, the
adversary knows that the voter did not comply.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
ymized authorized credentials. Any votes with invalid
credentials are discarded.
6. Decrypt. The remaining choices, but not credentials,
are decrypted. The ﬁnal tally is publicly computable.
Verifying an election. Tabulation is made publicly ver-
iﬁable by requiring each tabulation teller to post proofs
that it is honestly following the protocols. All tabulation
tellers verify these proofs as tabulation proceeds. An hon-
est teller refuses to continue when it discovers an invalid
proof. Anyone can verify these proofs during and after tabu-
lation, yielding universal veriﬁability. A voter can also ver-
ify that his vote is present in the set retrieved by the tabula-
tion tellers, yielding voter veriﬁability.
4. Security Evaluation
The Civitas voting scheme requires certain assumptions
about the trustworthiness of agents and system components.
We discuss what attacks are possible when these trust as-
sumptions are violated, and what defenses an implementa-
tion of the scheme could employ.
Trust Assumption 1. The adversary cannot simulate a
voter during registration.
There must be some period of time during which the ad-
versary cannot simulate the voter. Otherwise the system
could never distinguish the adversary from the voter, so the
adversary could register and vote on behalf of a voter. Regis-
tration is a good time for this assumption because it requires
authentication and can be done far in advance of the election.
During registration, Civitas authenticates voters with
their registration keys. So this assumption restricts the ad-
versary from acquiring a voter’s key before the voter has
registered. However, voters might attempt to sell their pri-
vate registration keys, or an adversary might coerce a voter
into revealing the voter’s key.13 Both attacks violate Trust
Assumption 1 by allowing the adversary to simulate a voter.
One possible defense would be to store private keys on
tamper-resistant hardware, which could enforce digital non-
transferability of the keys. This is not a completely effective
defense, as voters could physically transfer the hardware to
the adversary. Preventing such physical transfers is not gen-
erally possible, but they could be discouraged by introduc-
ing economic disincentives for voters who relinquish their
keys. For example, the Estonian ID card, which contains
private keys and is used for electronic voting, can be used to
produce legally binding cryptographic signatures [62]. Vot-
ers would be unlikely to sell such cards, although coercion
would remain a problem.
Another possible defense is to change authentication to
use in-person registration as an alternative to private keys.
13Note that these attacks are relevant only to registration, not voting, be-
cause the voter’s registration key is not used during the voting protocol.
Each registration teller would either be an online teller,
meaning voters register with that teller remotely, or an of-
ﬂine teller, meaning voters must register in person with that
teller. Ofﬂine registration tellers would be trusted to authen-
ticate voters correctly, preventing the adversary from mas-
querading as the voter. At least one ofﬂine registration teller
would need to exist in any election, ensuring that voters reg-
ister in person with at least one teller.
For deployments of Civitas in which this trust assumption
does not hold, we recommend requiring in-person registra-
tion. This compromises of our goal of a fully remote system.
But it is a practical defense, since voting could still be done
remotely, registration could be done far in advance of the
actual election, and a single credential could be reused for
multiple elections.14
Trust Assumption 2. Each voter trusts at least one regis-
tration teller, and the channel from the voter to the voter’s
trusted registration teller is untappable.
Constructing a fake credential requires the voter to mod-
ify at least one of the shares received during registration.
Suppose the adversary can tap all channels to registration
tellers and record the encrypted trafﬁc between the voter and
the registration tellers. Further suppose that the adversary
can corrupt the voter’s client so that it records all credential
shares received from tellers. Then the adversary can ask the
client to reveal the plaintext credential shares correspond-
ing to the encrypted network messages. In this scenario, the
voter cannot lie to the adversary about his credential shares,
meaning that the voter could now sell his credential and is no
longer protected from coercion. So an untappable channel is
required for distribution of at least one share. The voter must
also trust the teller who issued that share not to reveal it.15
An untappable channel is the weakest known assumption
for a coercion-resistant voting scheme [4,19,37,45,66]. Re-
placing this with a more practical assumption has been an
open problem for at least a decade [20]. Ofﬂine registration
tellers, discussed with Trust Assumption 1, could ensure an
untappable channel by supervising the registration process.
Our prototype of the client employs enforced erasure of all
credential shares once the voter’s credential is constructed,
preventing the voter from reporting shares to the adversary.
Trust Assumption 3. Voters trust their voting clients.
Voters enter votes directly into their clients. No mecha-
nism ensures that the client will preserve the integrity or the
conﬁdentiality of votes. A corrupt voting client could violate
coercion resistance by sending the plaintext of the voter’s
credential and choice to the adversary. A corrupt client could
14Such reuse would require strengthening Trust Assumptions 2 and 6 to
honesty of tellers across multiple elections.
15Note that a voter must know which registration teller he is trusting,
which is stronger than Trust Assumptions 5 and 6.
358
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:14:20 UTC from IEEE Xplore.  Restrictions apply. 
also violate veriﬁability by modifying the voter’s credential
or choice before encrypting it.
Clients could be corrupted in many ways. The machine,
including the network connection, could be controlled by the
adversary. Any level of the software stack, from the operat-
ing system to the client application, could contain vulnera-
bilities or be corrupted by malicious code. The adversary
might even be an insider, compromising clients during their
development and distribution.
Current research aims to solve this problem by chang-
ing how voters enter their votes [12, 43, 49, 75]. The voting
client is decomposed into multiple (hardware and software)
components, and the voter interacts with each component to
complete the voting process. For example, voting might re-
quire interacting with a smart card to obtain a randomized
ballot, then interacting with a client to submit a vote on that
ballot.16 Now the voter need not trust a single client, but in-
stead that the components implementing the client will not
collude. Complementary research aims to leverage trusted
computing technology [72]. For example, attestation could
be used to prove that no level of the hardware or software
stack has been changed from a trusted, pre-certiﬁed conﬁg-
uration. Integrating these kinds of defenses into Civitas is
important future work.
Note that this trust assumption does not require all voters
to trust a single client implementation. Rather, voters may
choose which client they trust. This client could be obtained
from an organization the voter trusts, such as their own po-
litical party or another social organization. These organiza-
tions are free to implement their own Civitas client software
on their own hardware, and to make their source code pub-
licly available. This freedom improves upon current direct-
recording electronic (DRE) voting systems, in which voters
are often forced by local election authorities to use particu-
lar proprietary (or closed-source) clients that are known to
contain vulnerabilities [46, 48, 73]. Another advantage over
DREs is that diverse clients, provided by several organiza-