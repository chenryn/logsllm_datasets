本标题提供两个选项：DENY和SAMEORIGIN。如果页面使用DENY选项进行服务，它将无法被框架。SAMEORIGIN选项允许来自相同源的页面进行框架：即协议、主机和端口相同的页面。
    X-Frame-Options: DENY
    X-Frame-Options: SAMEORIGIN
To prevent clickjacking on sensitive actions, the site should serve one
of these options on all pages that contain state-changing actions.
为了防止在敏感操作时遭受点击劫持攻击，网站应该在所有包含状态变更操作的页面上提供以下选项之一。
The `      Content-Security-Policy     ` response header is another
possible defense against clickjacking. This header's
`      frame-ancestors     ` directive allows sites to indicate whether
a page can be framed. For example, setting the directive to
`      'none'     ` will prevent any site from framing the page, whereas
setting the directive to `      'self'     ` will allow the current site
to frame the page:
内容安全策略响应头是对抗点击劫持的另一种可能的防御方式。该响应头的frame-ancestors指令允许网站指示页面是否可以被框架。例如，将指令设置为"none"将阻止任何站点框架该页面，而将指令设置为"self"则允许当前站点框架该页面。
    Content-Security-Policy: frame-ancestors 'none';
    Content-Security-Policy: frame-ancestors 'self';
Setting `      frame-ancestors     ` to a specific origin will allow
that origin to frame the content. This header will allow the current
site, as well as any page on the subdomains of *example.com* , to frame
its contents:
将框架祖先设置为特定的来源将允许该来源对内容进行框架化。此头文件将允许当前站点以及
example.com 子域上的任何页面对其内容进行框架化：
    Content-Security-Policy: frame-ancestors 'self' *.example.com;
Besides implementing `      X-Frame-Options     ` and the
`      Content-Security-Policy     ` to ensure that sensitive pages
cannot be framed, another way of protecting against clickjacking is with
`      SameSite     ` cookies. A web application instructs [
]{#c08.xhtml#Page_150 .pagebreak title="150"} the user's browser to set
cookies via a `      Set-Cookie     ` header. For example, this header
will make the client browser set the value of the cookie
`      PHPSESSID     ` to `      UEhQU0VTU0lE     ` :
除了实现X-Frame-Options和Content-Security-Policy以确保敏感页面不能被嵌套，另一种防止点击劫持的方法是使用SameSite
cookies。Web应用程序通过Set-Cookie头指示用户浏览器设置cookie。例如，此头将使客户端浏览器将cookie
PHPSESSID的值设置为UEhQU0VTU0lE：。
    Set-Cookie: PHPSESSID=UEhQU0VTU0lE 
In addition to the basic `      cookie_name=cookie_value     `
designation, the `      Set-Cookie     ` header allows several optional
flags you can use to protect your users' cookies. One of them is the
`      SameSite     ` flag, which helps prevent clickjacking attacks.
When the `      SameSite     ` flag on a cookie is set to
`      Strict     ` or `      Lax     ` , that cookie won\'t be sent in
requests made within a third-party iframe:
除了基本的cookie_name =
cookie_value指定之外，Set-Cookie头允许使用几个可选标志，以保护您的用户的cookie。其中之一是SameSite标志，它可以帮助防止点击劫持攻击。当SameSite标志设置为Strict或Lax时，该cookie不会在第三方iframe中发送的请求中发送：
    Set-Cookie: PHPSESSID=UEhQU0VTU0lE; Max-Age=86400; Secure; HttpOnly; SameSite=Strict
    Set-Cookie: PHPSESSID=UEhQU0VTU0lE; Max-Age=86400; Secure; HttpOnly; SameSite=Lax 
This means that any clickjacking attack that requires the victim to be
authenticated, like the banking example we mentioned earlier, would not
work, even if no HTTP response header restricts framing, because the
victim won't be authenticated in the clickjacked request.
这意味着任何需要受害者进行身份验证的点击劫持攻击，例如我们之前提到的银行示例，即使没有HTTP响应标头限制框架，也不起作用，因为在即被点击劫持的请求中，受害者不会被认证。
## Hunting for Clickjacking {#c08.xhtml#h1-501546c08-0003}
Find clickjacking vulnerabilities by looking for pages on the target
site that contain sensitive state-changing actions and can be framed.
通过寻找包含敏感状态更改操作并可以被框架的目标网站页面，找到点击劫持漏洞。
### Step 1: Look for State-Changing Actions {#c08.xhtml#h2-501546c08-0001}
Clickjacking vulnerabilities are valuable only when the target page
contains state-changing actions. You should look for pages that allow
users to make changes to their accounts, like changing their account
details or settings. Otherwise, even if an attacker can hijack user
clicks, they can't cause any damage to the website or the user's
account. That's why you should start by spotting the state-changing
actions on a site.
点击劫持漏洞只有在目标页面包含状态更改操作时才有价值。您应该寻找允许用户对其帐户进行更改的页面，如更改帐户详细信息或设置。否则，即使攻击者能够劫持用户的点击，也无法对网站或用户的帐户造成任何损害。这就是为什么您应该从网站上识别状态变化的操作开始的原因。
For example, let's say you're testing a subdomain of *example.com* that
handles banking functionalities at *bank.example.com* . Go through all
the functionalities of the web application, click all the links, and
write down all the state-changing options, along with the URL of the
pages they're hosted on:
例如，假设您正在测试 example.com 的一个子域名，该子域名在
bank.example.com 上处理银行功能。浏览 Web
应用程序的所有功能，单击所有链接，并记录所有状态更改选项以及它们托管的页面的
URL。
**State-changing requests on ***bank.example.com*****
bank.example.com 上的状态更改请求
-   Change password: *bank.example.com/password_change*
-   Transfer balance: *bank.example.com/transfer_money*
-   Unlink external account: *bank.example.com/unlink*
You should also check that the action can be achieved via clicks alone.
Clickjacking allows you to forge only a user's clicks, not their
keyboard actions. Attacks that require users to explicitly type in
values are possible, but generally not feasible because they require so
much social engineering. For example, [ ]{#c08.xhtml#Page_151 .pagebreak
title="151"} on this banking page, if the application requires users to
explicitly type the recipient account and transfer amount instead of
loading them from a URL parameter, attacking it with clickjacking would
not be feasible.
你还应该确认该操作是否仅可通过点击实现。点击劫持仅能伪造用户点击而非键盘操作。攻击需要用户明确输入数值的情况是可能的，但通常并不可行，因为需要大量的社会工程。例如，在这个银行页面上，如果应用程序要求用户明确输入收款人账户和转账金额，而非从URL参数中加载，使用点击劫持攻击将不可行。
### Step 2: Check the Response Headers {#c08.xhtml#h2-501546c08-0002}
Then go through each of the state-changing functionalities you've found
and revisit the pages that contain them. Turn on your proxy and
intercept the HTTP response that contains that web page. See if the page
is being served with the `      X-Frame-Options     ` or
`      Content-Security-Policy     ` header.
然后，逐个检查您发现的改变状态的功能，并重新访问包含它们的页面。开启代理，并拦截包含该网页的HTTP响应。查看页面是否使用X-Frame-Options或Content-Security-Policy报头提供服务。
If the page is served without any of these headers, it may be vulnerable
to clickjacking. And if the state-changing action requires users to be
logged in when it is executed, you should also check if the site uses
`      SameSite     ` cookies. If it does, you won't be able to exploit
a clickjacking attack on the site's features that require
authentication.
如果页面没有添加这些头信息，则有可能存在点击劫持漏洞。如果状态改变操作需要在用户登录时执行，请检查站点是否使用
SameSite
Cookie。如果是，则无法滥用需要身份验证的站点功能的点击劫持攻击。
Although setting HTTP response headers is the best way to prevent these
attacks, the website might have more obscure safeguards in place. For
example, a technique called *frame-busting* uses JavaScript code to
check if the page is in an iframe, and if it's framed by a trusted site.
Frame-busting is an unreliable way to protect against clickjacking. In
fact, frame-busting techniques can often be bypassed, as I will
demonstrate later in this chapter.
虽然设置HTTP响应头是防止这些攻击的最佳方法，但网站可能会有更隐蔽的保护措施。例如，一种名为\"frame-busting\"的技术使用JavaScript代码检查页面是否处于iframe中，并且是否被受信任的站点框架。\"frame-busting\"是一种不可靠的防止点击劫持的方式。实际上，\"frame-busting\"技术经常被绕过，就像我后面在本章将演示的那样。
You can confirm that a page is frameable by creating an HTML page that
frames the target page. If the target page shows up in the frame, the
page is frameable. This piece of HTML code is a good template:
通过创建一个包含目标页面的框架HTML页面，您可以确认该页面是否可嵌入。如果目标页面出现在框架中，则页面是可嵌入的。以下是一个不错的HTML代码模板：
        Clickjack test page
        Web page is vulnerable to clickjacking if the iframe is populated with the target page!
### Step 3: Confirm the Vulnerability {#c08.xhtml#h2-501546c08-0003}
Confirm the vulnerability by executing a clickjacking attack on your
test account. You should try to execute the state-changing action
through the framed page you just constructed and see if the action
succeeds. If you can trigger the action via clicks alone through the
iframe, the action is vulnerable to clickjacking.
通过在您的测试账户上执行"点击劫持"攻击来确认漏洞。您应该尝试通过刚刚构建的框架页面执行状态更改操作，并查看该操作是否成功。如果您可以仅通过
iframe 上的点击触发该操作，则该操作易受点击劫持攻击。
## Bypassing Protections {#c08.xhtml#h1-501546c08-0004}
Clickjacking isn't possible when the site implements the proper
protections. If a modern browser displays an
`      X-Frame-Options     ` protected page, chances are you can't
exploit clickjacking on the page, and you'll have to find another [
]{#c08.xhtml#Page_152 .pagebreak title="152"} vulnerability, such as XSS
or CSRF, to achieve the same results. Sometimes, however, the page won't
show up in your test iframe even though it lacks the headers that
prevent clickjacking. If the website itself fails to implement complete
clickjacking protections, you might be able to bypass the mitigations.
如果网站实施了适当的保护措施，则无法进行点击劫持。如果现代浏览器显示与X-Frame-Options受保护的页面，则很有可能无法在该页面上利用点击劫持，并且您将不得不寻找另一个漏洞（例如XSS或CSRF）来实现相同的结果。然而，有时即使缺少防止点击劫持的标头，页面也不会显示在您的测试iframe中。如果网站本身未能实施完整的点击劫持保护，则您可能能够绕开缓解措施。
Here's an example of what you can try if the website uses frame-busting
techniques instead of HTTP response headers and `      SameSite     `
cookies: find a loophole in the frame-busting code. For instance,
developers commonly make the mistake of comparing only the top frame to
the current frame when trying to detect whether the protected page is
framed by a malicious page. If the top frame has the same origin as the
framed page, developers may allow it, because they deem the framing
site's domain to be safe. Essentially, the protection's code has this
structure:
以下是一个示例，您可以尝试此方法，如果网站采用的是框架防护技术而不是HTTP响应头和SameSite
cookie：查找框架防护代码中的漏洞。例如，开发人员通常会犯一个错误，只比较当前页面的顶部框架，以检测所保护的页面是否被恶意页面包围。如果顶部框架与被包含页面具有相同的来源，开发人员可能会允许它，因为他们认为框架站点的域是安全的。本质上，保护的代码具有以下结构："
    if (top.location == self.location){
      // Allow framing.
    }
    else{
      // Disallow framing.
    }
If that is the case, search for a location on the victim site that
allows you to embed custom iframes. For example, many social media sites
allows users to share links on their profile. These features often work
by embedding the URL in an iframe to display information and a thumbnail
of the link. Other common features that require custom iframes are those
that allow you to embed videos, audio, images, and custom advertisements
and web page builders.
如果是这样的话，请在受害者网站上寻找一个允许你嵌入自定义iframe的位置。例如，许多社交媒体网站允许用户在个人资料中分享链接。这些功能通常是通过嵌入URL来显示链接信息和缩略图的iframe实现的。其他常见的需要自定义iframe的功能包括允许你嵌入视频、音频、图片、自定义广告和网页建设者。
If you find one of these features, you might be able to bypass
clickjacking protection by using the *double iframe trick* . This trick
works by framing your malicious page within a page in the victim's
domain. First, construct a page that frames the victim's targeted
functionality. Then place the entire page in an iframe hosted by the
victim site ( [Figure
8-6](#c08.xhtml#figure8-6){#c08.xhtml#figureanchor8-6} ).
如果您发现其中一种功能，您可能可以通过使用双重iframe技巧绕过点击劫持保护。这个技巧的工作原理是，在受害者的域名中将您的恶意页面放在一个页面中。首先，构建一个包含受害者目标功能的页面。然后将整个页面放置在受害者站点托管的iframe中（图8-6）。
![[Figure 8-6]{#c08.xhtml#figure8-6} : You can try to place your site in
an iframe hosted by the victim site to bypass improper frame checking. ¶
图8-6：您可以尝试将您的站点放置在受害者站点托管的iframe中，以绕过不当的框架检查。](image_fi/501546c08/f08006.png)
This way, both `      top.location     ` and `      self.location     `
point to *victim.com* . The frame-busting code would determine that the
innermost *victim.com* page is framed by another *victim.com* page
within its domain, and therefore deem the framing safe. The intermediary
attacker page would go undetected.
这样，top.location和self.location都指向victim.com。防框架代码将确定最内层的victim.com页面被同一域中的另一个victim.com页面框架化，因此将视该框架化为安全的。中间人攻击页面将不被检测到。
Always ask yourself if the developer may have missed any edge cases
while implementing protection mechanisms. Can you exploit these edge
cases to your advantage?
始终问自己，开发人员在实施保护机制时是否可能错过了任何边缘情况。你能利用这些边缘情况获得优势吗？
[ ]{#c08.xhtml#Page_153 .pagebreak title="153"} Let's take a look at an
example report. Periscope is a live streaming video application, and on
July 10, 2019, it was found to be vulnerable to a clickjacking
vulnerability. You can find the disclosed bug report at
[https://hackerone.com/reports/591432/](https://hackerone.com/reports/591432/){.LinkURL}
. *The site was using the* `      X-Frame-Options ALLOW-FROM     `
directive to prevent clickjacking. This directive lets pages specify the
URLs that are allowed to frame it, but it's an obsolete directive that
isn't supported by many browsers. This means that all features on the
subdomains *https://canary-web.pscp.tv* and
*https://canary-web.periscope.tv* were vulnerable to clickjacking if the
victim was using a browser that didn't support the directive, such as
the latest Chrome, Firefox, and Safari browsers. Since Periscope's
account settings page allows users to deactivate their accounts, an
attacker could, for example, frame the settings page and trick users
into deactivating their accounts.