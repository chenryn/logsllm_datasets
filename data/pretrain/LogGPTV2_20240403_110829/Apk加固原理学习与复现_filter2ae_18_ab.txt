            byte[] newfs = intToByte(dexBytes.length);
            System.out.println(Integer.toHexString(dexBytes.length));
            byte[] refs = new byte[4];
            //高位在前，低位在前掉个个
            for (int i = 0; i = android.os.Build.VERSION_CODES.KITKAT) {
                    mPackages = (ArrayMap) RefInvoke.getFieldOjbect(
                            "android.app.ActivityThread", currentActivityThread,
                            "mPackages");
                }
                WeakReference wr = (WeakReference) mPackages.get(packageName);
                // 创建被加壳apk的DexClassLoader对象  加载apk内的类和本地代码（c/c++代码）
                DexClassLoader dLoader = new DexClassLoader(apkFileName, odexPath,
                        libPath, (ClassLoader) RefInvoke.getFieldOjbect(
                        "android.app.LoadedApk", wr.get(), "mClassLoader"));
                //把当前进程的mClassLoader设置成了被加壳apk的DexClassLoader
                RefInvoke.setFieldOjbect("android.app.LoadedApk", "mClassLoader",
                        wr.get(), dLoader);
                Log.i("demo", "classloader:" + dLoader);
                try {
                    Object actObj = dLoader.loadClass("com.zero.sourceapp.MainActivity");
                    Log.i("demo", "actObj:" + actObj);
                } catch (Exception e) {
                    Log.i("demo", "activity:" + Log.getStackTraceString(e));
                }
            } catch (Exception e) {
                Log.i("demo", "error:" + Log.getStackTraceString(e));
                e.printStackTrace();
            }
        }
        @Override
        public void onCreate() {
            super.onCreate();
            {
                // 加载资源
                loadResources(apkFileName);
                Log.i("demo", "onCreate");
                // 如果源应用配置有Appliction对象，则替换为源应用Applicaiton，以便不影响源程序逻辑。
                String appClassName = null;
                try {
                    ApplicationInfo ai = this.getPackageManager()
                            .getApplicationInfo(this.getPackageName(),
                                    PackageManager.GET_META_DATA);
                    Bundle bundle = ai.metaData;
                    if (bundle != null && bundle.containsKey(appkey)) {
                        appClassName = bundle.getString(appkey); // className 是配置在xml文件中的。
                        Log.i("demo", "application class name:" + appClassName);
                    } else {
                        Log.i("demo", "have no application class name");
                        return;
                    }
                } catch (PackageManager.NameNotFoundException e) {
                    Log.i("demo", "error:" + Log.getStackTraceString(e));
                    e.printStackTrace();
                }
                //有值的话调用该Applicaiton
                Object currentActivityThread = RefInvoke.invokeStaticMethod(
                        "android.app.ActivityThread", "currentActivityThread",
                        new Class[]{}, new Object[]{});
                Object mBoundApplication = RefInvoke.getFieldOjbect(
                        "android.app.ActivityThread", currentActivityThread,
                        "mBoundApplication");
                Object loadedApkInfo = RefInvoke.getFieldOjbect(
                        "android.app.ActivityThread$AppBindData",
                        mBoundApplication, "info");
                //把当前进程的mApplication 设置成了null
                RefInvoke.setFieldOjbect("android.app.LoadedApk", "mApplication",
                        loadedApkInfo, null);
                Object oldApplication = RefInvoke.getFieldOjbect(
                        "android.app.ActivityThread", currentActivityThread,
                        "mInitialApplication");
                ArrayList mAllApplications = (ArrayList) RefInvoke
                        .getFieldOjbect("android.app.ActivityThread",
                                currentActivityThread, "mAllApplications");
                mAllApplications.remove(oldApplication); // 删除oldApplication
                ApplicationInfo appinfo_In_LoadedApk = (ApplicationInfo) RefInvoke
                        .getFieldOjbect("android.app.LoadedApk", loadedApkInfo,
                                "mApplicationInfo");
                ApplicationInfo appinfo_In_AppBindData = (ApplicationInfo) RefInvoke
                        .getFieldOjbect("android.app.ActivityThread$AppBindData",
                                mBoundApplication, "appInfo");
                appinfo_In_LoadedApk.className = appClassName;
                appinfo_In_AppBindData.className = appClassName;
                Application app = (Application) RefInvoke.invokeMethod(
                        "android.app.LoadedApk", "makeApplication", loadedApkInfo,
                        new Class[]{boolean.class, Instrumentation.class},
                        new Object[]{false, null}); // 执行 makeApplication（false,null）
                RefInvoke.setFieldOjbect("android.app.ActivityThread",
                        "mInitialApplication", currentActivityThread, app);
                ArrayMap mProviderMap = null;
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                    mProviderMap = (ArrayMap) RefInvoke.getFieldOjbect(
                            "android.app.ActivityThread", currentActivityThread,
                            "mProviderMap");
                }
                Iterator it = mProviderMap.values().iterator();
                while (it.hasNext()) {
                    Object providerClientRecord = it.next();
                    Object localProvider = RefInvoke.getFieldOjbect(
                            "android.app.ActivityThread$ProviderClientRecord",
                            providerClientRecord, "mLocalProvider");
                    RefInvoke.setFieldOjbect("android.content.ContentProvider",
                            "mContext", localProvider, app);
                }
                Log.i("demo", "app:" + app);
                app.onCreate();
            }
        }
        /**
         * 释放被加壳的apk文件，so文件
         *
         * @param apkdata
         * @throws IOException
         */
        private void splitPayLoadFromDex(byte[] apkdata) throws IOException {
            int ablen = apkdata.length;
            //取被加壳apk的长度   这里的长度取值，对应加壳时长度的赋值都可以做些简化
            byte[] dexlen = new byte[4];
            System.arraycopy(apkdata, ablen - 4, dexlen, 0, 4);
            ByteArrayInputStream bais = new ByteArrayInputStream(dexlen);
            DataInputStream in = new DataInputStream(bais);
            int readInt = in.readInt();
            System.out.println(Integer.toHexString(readInt));
            byte[] newdex = new byte[readInt];
            //把被加壳的源程序apk内容拷贝到newdex中
            System.arraycopy(apkdata, ablen - 4 - readInt, newdex, 0, readInt);
            //这里应该加上对于apk的解密操作，若加壳是加密处理的话
            // 对源程序Apk进行解密
            newdex = decrypt(newdex);
            // 写入apk文件
            File file = new File(apkFileName);
            try {
                FileOutputStream localFileOutputStream = new FileOutputStream(file);
                localFileOutputStream.write(newdex);
                localFileOutputStream.close();
            } catch (IOException localIOException) {
                throw new RuntimeException(localIOException);
            }
            // 分析被加壳的apk文件
            ZipInputStream localZipInputStream = new ZipInputStream(
                    new BufferedInputStream(new FileInputStream(file)));
            while (true) {
                ZipEntry localZipEntry = localZipInputStream.getNextEntry(); // 这个也遍历子目录
                if (localZipEntry == null) {
                    localZipInputStream.close();
                    break;
                }
                // 取出被加壳apk用到的so文件，放到libPath中（data/data/包名/payload_lib)
                String name = localZipEntry.getName();
                if (name.startsWith("lib/") && name.endsWith(".so")) {
                    File storeFile = new File(libPath + "/"
                            + name.substring(name.lastIndexOf('/')));
                    storeFile.createNewFile();
                    FileOutputStream fos = new FileOutputStream(storeFile);
                    byte[] arrayOfByte = new byte[1024];
                    while (true) {
                        int i = localZipInputStream.read(arrayOfByte);
                        if (i == -1)
                            break;
                        fos.write(arrayOfByte, 0, i);
                    }
                    fos.flush();
                    fos.close();
                }
                localZipInputStream.closeEntry();
            }
            localZipInputStream.close();
        }
        /**
         * 从apk包里面获取dex文件内容（byte）
         *
         * @return
         * @throws IOException
         */
        private byte[] readDexFileFromApk() throws IOException {
            ByteArrayOutputStream dexByteArrayOutputStream = new ByteArrayOutputStream();
            ZipInputStream localZipInputStream = new ZipInputStream(
                    new BufferedInputStream(new FileInputStream(
                            this.getApplicationInfo().sourceDir)));
            while (true) {
                ZipEntry localZipEntry = localZipInputStream.getNextEntry();
                if (localZipEntry == null) {
                    localZipInputStream.close();
                    break;
                }
                if (localZipEntry.getName().equals("classes.dex")) {
                    byte[] arrayOfByte = new byte[1024];
                    while (true) {
                        int i = localZipInputStream.read(arrayOfByte);
                        if (i == -1)
                            break;
                        dexByteArrayOutputStream.write(arrayOfByte, 0, i);
                    }
                }
                localZipInputStream.closeEntry();
            }
            localZipInputStream.close();
            return dexByteArrayOutputStream.toByteArray();
        }
        //直接返回数据，读者可以添加自己解密方法
        private byte[] decrypt(byte[] srcdata) {
            for (int i = 0; i < srcdata.length; i++) {
                srcdata[i] = (byte) (0xFF ^ srcdata[i]);
            }
            return srcdata;
        }
        //以下是加载资源
        protected AssetManager mAssetManager;//资源管理器
        protected Resources mResources;//资源
        protected Resources.Theme mTheme;//主题
        protected void loadResources(String dexPath) {
            try {
                AssetManager assetManager = AssetManager.class.newInstance();
                Method addAssetPath = assetManager.getClass().getMethod("addAssetPath", String.class);
                addAssetPath.invoke(assetManager, dexPath);
                mAssetManager = assetManager;
            } catch (Exception e) {
                Log.i("inject", "loadResource error:" + Log.getStackTraceString(e));
                e.printStackTrace();
            }
            Resources superRes = super.getResources();
            superRes.getDisplayMetrics();
            superRes.getConfiguration();