"FROM member ORDER BY 1ast_name"）;
first_name,' suffix, email"
与
---
## Page 317
shash_ref 变量访问列值。这意味着，你完全可以按任意顺序提取各个值（或者它们的任何子
列的元素是无序的。不过，因为DBI是把各个列名作为散列元素的键，所以我们完全能够通过
程序里的解引用NULL指针的情况相似)。
更多的行，那么fetchrow_arrayref（）便会返回undef，而@{undef)是非法的（它与 C语言
工作：
可以使用@{Sary_ref}结构。
此需要使用sary_ref->[$i]形式，而不能用sary[$i]。如果想把这种引用转换为数组，那么
情况下)。其使用方法如下所示：
使没有到达结果集的最后一行，这个测试的结果也会为假，从而终止循环。
如果把这个测试写成下面这样，那么它便会莫名其妙地失败：
如果像下面这样编写循环的开头部分，那么它可以正确工作：
每次调用fetchrow_hashref（），它都会返回一个散列引用（该散列由行的值构成，其键
只要 fetchrow_arrayref（）能实际取回一个行，这个循环就能正确执行。可是，如果没有
fetchrow_arrayref（)不适合用列表方式来存放获取变量。例如，下面这个循环便无法
第三个行获取方法fetchrow_hashref（）的使用方式，
while(my ($var1,$var2,$var3,$var4)=@($sth->fetchrow_arrayref ()})
可以通过数组引用$ary_ref，
此处值是采用标量方式获取的，因此如果sval的值恰好为0、undef 或空字符串，那么即
由于值是采用列表方式获取的，因此只有在没有更多的行时，这个测试才会失败。但是，
while (my $hash_ref = $sth->fetchrow_hashref ())
while(my $ary_ref=$sth->fetchrow_arrayref ())
while（my $val=$sth->fetchrow->array（)).
while（my（$val)=$sth->fetchrow->array(））.
print "\n";
#处理各个变量
foreach my $key (keys (%(Shash_ref)))
print"\n";
my Sdelim =
$delim=",";
$hash_ref->($key)=
Sary_ref->[$i]=""if !defined （$ary_ref->[$i]);# 为NULL 值？
Shash_ref->{$key};
$ary_ref->[$i];
""if !defined ($hash_ref->($key);#为NULL 值？
，访问数组元素。这有点像解引用（dereferencing）指针，因
如下所示：
8.2Perl DBI概述
297
---
## Page 318
性，那么也要等到把所有行都取回之后，row（)才能返回正确的结果。因此，最保险的做法还
表示不提倡把row（)用于 SELECT 语句。即使在 MySQL里，如果设置了mysql_use_result 属
后，可以调用它来获得行数。但这个办法不能移植到其他数据库系统，并且DBI的文档里也明确
是，在获取行时对它们进行统计。事实上，这是DBI里唯一一种可移植的、可以了解到 SELECT
8.2.5.2确定语句返回的行数
来检索各个行，并编写一个函数，让它通过列名来访问行值。
求它了解 SELECT 语句里给出的列的顺序。在这种情况下，你可以调用 fetchrow_hashref（）
语
件，那么可以采用下面的做法：
集)，
298
句返回了多少个行的手段。MySQL驱动程序提供了一个row（）方法，在调用完execute（）之
怎样才能知道 SELECT 语句或者类似于 SELECT 的语句，到底返回了多少个行呢？一种办法
口如果想获得最佳性能，那么使用fetchrow_hashref（)并不是最佳选择。它的执行效率
在使用fetchrow_hashref（）时，请注意以下几个问题。
fetchrow_hashref（）)特别适用于这样的场合：需要把行值传递给某个函数，同时又不要
while (my $hash_ref = $sth->fetchrow_hashref ())
，可以不用理会 SELECT语句在检索这些列时的顺序。例如，想要访问成员的姓名和电子邮
口
口
SELECT a.name, b.name AS name2 FROM a INNER JOIN b WHERE a.name = b.name
name和name2两个元素：
散列中的元素必须对应着一个唯一的列名。如果同时对多个表进行关联查找，并且这
print"\n";
foreach my $key ("last_name",
my $delim = "";
为下面这个样子，那么fetchrow_hashref（）会返回一个散列引l用，而散列里将包含
为避免出现这种问题，应该使用别名来保证每个列名都唯一。如果把刚才那个语句改写
SELECT a.name, b.name FROM a INNER JOIN b WHERE a.name = b.name
时，fetchrow_hashref（）将返回一个只包含一个元素（即name）的散列：
些表的列名有重复，那么你将无法访问所有这些重复的列值。例如，当执行下面语句
NAME_1c或NAME_uc属性，强制要求它统一列名的大小写：
了避免出现潜在的大小写不匹配的问题，你可以向fetchrow_hashref（）传递一个
里，列名不区分大小写，所以不管使用什么样的大小写组合来写列名，语句都能正确地
在默认情况下，充当键值的那些列名将沿用它们在SELECT语句里的大小写。在MySQL
比fetchrow_array()或 fetchrow_arrayref()低。
Shash_ref->($key) ="" if !defined (Shash_ref->($key}); # 为NULL 值?
第8章用Perl DBI编写MySQL程序
行。但是，Perl语言的散列键名是区分大小写的，这可能会导致你出现某些问题。为
print $delim,$hash_ref->($key);
"first_name","suffix"，"email")
---
## Page 319
这样：
如果执行成功，它将返回一个数组（而不是引用)；如果没有返回任何行，或者在执行过程中出
selectrow_array（）方法，它把prepare（）、execute（）和行获取这三项操作合并到了一起。
对于所有这些情况，有一种更加简便的获得单行结果的方法，即通过数据库句柄来调用
的那位总统的姓名和出生日期显示出来：
这种查询经常被用来查找某个列里的最大值或者最小值。例如，下面这个查询可以把最近出生
有当你第二次调用它时，才会有这样的效果。）
fetchrow_array（）注意到已经到达最后一行时，它会隐式地释放结果集。但是，在这里，
索
在标量环境里会返回行的哪一列，但是这对上面这条语句来说丝毫没有影响。这段代码只会检
有行时，返回这个行的一个列；没有行时，返回undef。DBI并没有规定fetchrow_array（）
当在标量环境里调用fetchrow_array（)方法时（即期望的是一个值，而非一个列表），它会在
fetchrow_array（）即可。此外，因为我们只选取了一个列，所以甚至不必把返回值赋给数组。
下所示：
本count_members.pl，用它来统计美史联盟中当前的成员人数。执行这条语句的参考代码如
8.2.5.3获取单行结果
另外还有一种最多只会返回一个行的查询，即它会包含LIMIT1，用以限制返回的行数。
一个值，因此返回值不可能产生二义性。
my$stmt=
使用MAX（）或MIN（）函数的语句只会返回一个行，因此它是另一种不必使用循环的语句。
my $stmt = "SELECT last_name, first_name,
虽然结果集里只有一个行，但这段代码还是会调用finish（）方法来释放结果集。
如果结果集里只有一个行，那么就没必要使用循环来获得结果了。假设，想要编写一个脚
else
my($last_name, $first_name, $birth) = $sth->fetchrow_array ();
$sth->execute ();
my $sth = $dbh-
在上面这段代码里，
print"Scount\n";
my $count = $sth->fetchrow_array (）;
#读取并显示查询结果
my $sth = $dbh->prepare ("SELECT COUNT(*) FROM member"）;
#执行查询
print "Most recently born president: $first_name $last_name ($birth)\n";
print"Query returned no result\n";
sth->finish
(!defined ($last_name))
finish
"can't tell" if !defined ($count);
"WHERE birth =(SELECT MAX(birth) FROM president)";
"SELECT last_name,
->prepare($stmt);
SELECT语句只会返回一个行，所以没必要使用循环，只需调用一次
birth FROMpresident"
birth FROM president"
8.2Perl DBI概述
299
（当
口
---
## Page 320
会认为像下面这样调用fetchrow_arrayref（)会比直接检索行引用更有效率：
定下来。
个行里的元素个数，所以利用语法@{$matrix[O］}以整体方式访问这一个行，便能把列数确
本一致。不同之处在于，它会把所有行保存起来，然后再输出这个矩阵。下面这段代码主要演
的元素。接下来分别对这两种方式进行讨论。
它包含的列也与你选择的那些列相同。然后，你便可以按想要的顺序、想要的次数来处理矩阵
管采用哪种方式，最终都会得到一个这样的矩阵：它的每一个行分别对应着结果集里的一个行，
每获取一个行，便立刻把它保存起来。第二种，可以调用某个方法一次性返回整个结果集。
一次各个行，进行精确分析。）
计算时，它们便不适合。（或许你想先遍历一次结果集，评估数据的一般数字特征；然后再遍）
其他顺序。此外，如果没有采取适当的内存维护措施，那么在你获取了一个行之后，上一个行
8.2.5.4处理整个结果集
用数组。
便
了：如何确定矩阵的行数和列数，以及如何访问矩阵里的各个元素。
会丢失。这些行为并不总是我们所希望的。例如，当需要对行进行多次遍历以完成某项统
00
上面的示例在获取每一个行时，都会把它当作一个数组，并且会保存对它的引用。你或许
第一种方式是用获取循环来捕获结果集，
可以用两种不同的方式来把结果集当作整体来访问。第一种，你可以使用常规的获取循环
当使用循环来获取行时，只能按循环返回的顺序依次处理各个行，因为DBI没有提供任何
在检查矩阵的维度时，必须先确定矩阵的行数，因为在计算矩阵的列数时，需要知道矩阵
for(my $i=0;$ifetchrow_array（））#获取每一个行
my@matrix=（）；#数组引用的数组
else
print "\n";
for（my $j=0;$j[$i]}语法形式。
再像下面这样检索结果：
引用。）如果要使用fetchall_arrayref（），则需要依次调用prepare（）和execute（），然户
向结果集里某一个行的内容。（听起来很复杂，简单来讲，其含义即为：它的返回值是一个矩
要使用 fetchrow_arrayref(）。
此，如果想用每次获取一个行的办法来构造矩阵，那么一定要使用fetchrow_array（），而不
结果矩阵是一个引用数组，其中的每一个引用都指向同一个行一
很显然，用fetchall_arrayref（）来检索结果集，比使用行获取循环的做法更简单，只是
可以通过检查结果矩阵是否为空来确定行数和列数。如果想把结果矩阵的某一个行$i当作
第二种使用获取循环的方式是，调用某个可以返回整个结果集的DBI方法。
for (my $i=0;$i[0]))）;
#确定矩阵的维度
my $matrix_ref = $dbh->selectall_arrayref ($stmt);
#获取所有行，并保存为一个对引用数组的引用
如果结果集为空，那么fetchall_arrayref（）会返回一个对空数组的引用。如果执行出错，
确定结果集矩阵维度并访问其中元素的代码，如下所示：
#获取所有行，并保存为一个对引用数组的引用
很可惜，这种做法行不通，因为fetchrow_arrayref（）会反复使用引用所指向的那个数组。
my
for（mySi=0;$ifetchall_arrayref();
while （my $ary_ref = $sth->fetchrow_arrayref ())
my @matrix=（）；#数组引用的数组
push（@matrix，Sary_ref）；#保存对刚获取到的那个行的引用
print "\n";
for（my $j=0;$j[$i] [$j] = " if !defined ($matrix_ref->[$i][$j]); # 为NULL值?
$matrix_ref->[$i][$j];
0？0:scalar （@($matrix_ref->[0]))）;
#输出每一个行
#输出每一个行
8.2Per DBI概述
例如
301
后
指
---
## Page 322
过混用单、双引号来避免转义：
反斜线或二进制数据的值，
符串里包含带引号的值时，会在Perl词法层面引起混乱。如果试图插入或者选取某些包含引号、
8.2.6
比较操作都将为真。如果颠倒这这些比较的顺序，那么你会错误地把空字符串解释成数字0。
道了值不为NULL之后，才能通过适当的测试来区分各个值之间的类型。例如：
个测试都输出了‘