We apply the Coppersmith algorithm and its variants to solve the co-ACD problem. Given \( \tau \) ciphertexts in our scheme, we can hypothesize the \( \log \tau \) most significant bits of the hidden \( p_i \) values. This leads to a multivariate polynomial and several univariate polynomials that share common divisors when evaluated at specific points. We have developed a new algorithm to find these common divisors by extending the Coppersmith algorithm, demonstrating that the co-ACD problem remains challenging under our chosen parameters. Due to space constraints, we do not provide a detailed exposition of the Coppersmith algorithm for a single instance of the co-ACD problem.

Recently, Cohn and Heninger enhanced an algorithm to address the ACD problem using multiple instances. We adapt this approach to tackle the co-ACD problem with multiple instances.

**Theorem 4.** Given \( \tau \) instances \( \tilde{c}_i = \Phi(Q^{e_i}) = (c_{i1}, \ldots, c_{ik}) \) of \( \hat{D}_{\rho, Q} \) and \( N \), we can compute \( e_1, \ldots, e_\tau \) in polynomial time if \( |e_j| \leq 2^{\eta k \cdot j^2 / k^2} \approx N^{\beta/2} \). Since \( N = p_1 \cdots p_k \approx 2^{\eta k} \), \( \gcd(N, G_j(r_1, \ldots, r_j)) \geq p_1 \cdots p_j \approx N^{j/k} \), and \( j \leq k \), this method is not effective for our parameters.

Additionally, when multiple instances are available, we may have polynomials \( F_{ij}(x) = (xQ - c_{i1}) \cdots (xQ - c_{ij}) \) for \( 1 \leq i \leq \tau \) and \( 1 \leq j \leq k-1 \). Using these polynomials and \( G_j \), we can attempt to find a specific \( p_i \) using a lattice-based algorithm. The following theorem outlines the conditions under which a solution to the co-ACD problem can be found.

\[ (X_1^{d_1} \cdots X_\tau^{d_\tau})(X_{\tau+1} \cdots X_{\tau+d}) \leq \rho + \log Q(C + 1) + \log A + \mu + 3 \]
where \( C \) is the number of allowed scalar multiplications, \( \gamma > 2\lambda \), and \( \mu > \lambda + \log m + 1 \).

- The bit size \( \gamma \) of a fresh ciphertext is set to \( 2\eta \).
- According to Lemma 3, we choose \( m \) and \( \mu \) such that \( m > \gamma + 2\lambda \).
- We set the message space size \( Q \) to \( 2^{256} \), which supports the computation of the mean of \( 2^{127} \) nonnegative 128-bit integers.

Table 1 provides concrete parameters for the number of allowed additions. Our tests were conducted on a standard laptop with an Intel Core i7-2600 processor running at 3.4 GHz and 16 GB of RAM. The results in Table 1 are the averages from 100 key generations and 100 operations per key generation.

We also compare the performance of our public-key scheme with previously proposed additive public-key homomorphic encryption schemes, including Paillier encryption [41] and Joye and Libert encryption [32]. For a ring-LWE-based additive homomorphic encryption scheme, we refer to the implementation results in [36].

Our results indicate that our encryption scheme is slightly faster than the previous best result, and the decryption and addition algorithms are significantly faster. Although our public key size is approximately 10,000 times larger than previous schemes, the ciphertext size is comparable. In summary, our additive homomorphic encryption scheme is the most practical among those supporting the additive homomorphic property.

1. We set \( \eta \) assuming \( N \) is given as the threshold version in Section 6. If \( N \) is private in both secret key and public key schemes, \( \eta \) may be smaller, leading to shorter public key and ciphertext sizes.
2. Note that the implementation results provided in [36] can be improved by estimating the parameter size according to a recent result [46].

References:
- [Pai99] Paillier, P. (1999). Public-Key Cryptosystems Based on Composite Degree Residuosity Classes.
- [NLV11] Naehrig, M., Lauter, K., & Vaikuntanathan, V. (2011). Can Homomorphic Encryption be Practical?
- [JL13] Joye, M., & Libert, B. (2013). Efficient Ring-LWE Encryption.