# 简介
## 什么是OAuth 2.0
OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用
## 运行流程
  1. 用户打开客户端以后，客户端要求用户给予授权。
  2. 用户同意给予客户端授权。
  3. 客户端使用上一步获得的授权，向认证服务器申请令牌。
  4. 认证服务器对客户端进行认证以后，确认无误，同意发放令牌。
  5. 客户端使用令牌，向资源服务器申请获取资源。
  6. 资源服务器确认令牌无误，同意向客户端开放资源。
当然关键的是第二步中的用户授权，需要保证其安全性
## 授权的方法
### authorization code
授权码模式（authorization
code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与"服务提供商"的认证服务器进行互动
授权码模式的流程：
  1. 用户访问客户端，后者将前者导向认证服务器。
  2. 用户选择是否给予客户端授权。
  3. 假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。
  4. 客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。
  5. 认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。
### implicit
简化模式（implicit grant
type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证
简化模式的流程：
  1. 客户端将用户导向认证服务器。
  2. 用户决定是否给于客户端授权。
  3. 假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌。
  4. 浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。
  5. 资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。
  6. 浏览器执行上一步获得的脚本，提取出令牌。
  7. 浏览器将令牌发给客户端。
### resource owner password credentials
密码模式（Resource Owner Password Credentials
Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。
密码模式流程：
  1. 用户向客户端提供用户名和密码。
  2. 客户端将用户名和密码发给认证服务器，向后者请求令牌。
  3. 认证服务器确认无误后，向客户端提供访问令牌。
### client credentials
客户端模式（Client Credentials
Grant）指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题
流程：
  1. 客户端向认证服务器进行身份认证，并要求一个访问令牌。
  2. 认证服务器确认无误后，向客户端提供访问令牌。
# 漏洞细节
## 为什么会造成这种情况？
主要是因为他缺乏内置的安全功能，安全的成败几乎在于使用者的正确的配置，就比如说下面的通过输入框来进行验证的方式，在传送数据的过程中并没有对数据本身进行加密处理，造成了攻击者完全可以拦截数据包获取关键信息，并且可以构造恶意的数据包达到自己恶意的目的等等，而且不同的授权方法有不同的特点，根据授权类型，高度敏感的数据也会通过浏览器发送，这为攻击者提供了各种拦截数据的机会。
## 哪里使用了这样的认证方式？
想要识别使用了`OAuth`方法进行身份验证，我们可以通过如下方法
  1. 按照上面的做法，使用burp进行数据包的拦截，基本所有的的认证请求都是通过`/authorization`开始的，并且携带了类似于`Client_id`等识别信息
  2. 如果在登陆具有使用第三方社交软件进行登陆的地方，一般都是采用的`OAuth 2.0`进行认证
## 漏洞利用
### `OAuth`客户端中的利用
#### Improper implementation of the implicit grant type
如果是采用的`implicit`类型的认证方法
首先token是通过url的形式从`OAuth`服务端发送到了客户端，客户端为了保持会话的持久性，通过POST请求将自身的数据发送到了服务端，服务端返回给客户端一个cookie进行持久化登陆，这样，就造成了攻击者可以拦截客户端的数据包，如果客户端程序没有正确检查token是否和其他数据匹配，攻击者就可以对象数据进行伪造发送，冒充任意用户
当然，如果将发送的数据加密呢，当然可以，但是在这个类型方法中，服务端和客户端没有一个共同密钥进行解密操作，所以两者之间是默认信任的
##### `Lab: Authentication bypass via OAuth implicit flow`
看看靶场的描述吧
> This lab uses an [OAuth](https://portswigger.net/web-security/oauth) service
> to allow users to log in with their social media account. Flawed validation
> by the client application makes it possible for an attacker to log in to
> other users' accounts without knowing their password.
>
> To solve the lab, log in to Carlos's account. His email address is
> `PI:EMAIL`.
>
> You can log in with your own social media account using the following
> credentials: `wiener:peter`.
大概的意思就是我们通过输入用户名为`wiener`密码为`peter`的账户，达到登陆`PI:EMAIL`这个邮件的账户，形成一个权限绕过的漏洞
##### 分析
点击`Access the lab`打开靶场，之后使用burp抓包，并登陆`wiener`的账户，观察具体的`OAuth`认证流程
因为我这里已经成功了，所以存在有记录，就直接发送`client_id`直接认证成功了的，如果是初次查看的时候可以看见完整的流程
好吧，这里我还是把靶场重启了一下
可以从上面看到他的流程：
首先携带`client_id`访问`auth`路由向认证服务端请求授权
并且附带了重定向url，回复类型和请求资源返回等等字段
之后重定向`url`, 然后输入了账号密码进行认证，在登陆之后进行了一次重定向操作进行认证操作
一直到后面将会在向`/authenticate`路由发送POST请求的时候携带`email username token`等信息进行验证
并且最后重定向到了博客首页
我们可以`/authenticate`路由处进行bypass, 将数据包发送到`Repeater`重发器中，进行修改`email`字段达到登陆其他用户的目的
成功触发了`302`跳转，并且返回了一个cookie信息，方便再`token`有效期限内进行资源的获取
最后我们携带`cookie`在浏览器中方法查看是否变为了`carlos`用户，在`Repeater`中右击 -> `Request in Browser`
-> `in original session`
复制到浏览器访问
成功bypass了权限认证，获取了绕过了登陆验证，造成了任意登陆的安全问题