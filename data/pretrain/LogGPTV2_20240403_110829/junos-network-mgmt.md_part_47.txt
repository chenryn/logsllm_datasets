With traps, the receiver does not send any acknowledgment when it receives a trap. Therefore, the
sender cannot determine if the trap was received. A trap may be lost because a problem occurred during
transmission. To increase reliability, an inform is similar to a trap except that the inform is stored and
retransmitted at regular intervals until one of these conditions occurs:
• The receiver (target) of the inform returns an acknowledgment to the SNMP agent.
• A specified number of unsuccessful retransmissions have been attempted and the agent discards the
inform message.
If the sender never receives a response, the inform can be sent again. Thus, informs are more likely to
reach their intended destination than traps are. Informs use the same communications channel as traps
(same socket and port) but have different protocol data unit (PDU) types.
Informs are more reliable than traps, but they consume more network, router, and switch resources.
Unlike a trap, an inform is held in memory until a response is received or the timeout is reached. Also,
traps are sent only once, whereas an inform may be retried several times. Use informs when it is
important that the SNMP manager receive all notifications. However, if you are more concerned about
network traffic, or router and switch memory, use traps.
Figure 23: Inform Request and Response
552
Example: Configure the Inform Notification Type and Target Address
In the following example, target 172.17.20.184 is configured to respond to informs. The inform timeout
is 30 seconds and the maximum retransmit count is 3. The inform is sent to all targets in the tl1 list. The
security model for the remote user is usm and the remote engine username is u10.
[edit snmp v3]
notify n1 {
type inform;
tag tl1;
}
notify-filter nf1 {
oid .1.3 include;
}
target-address ta1 {
address 172.17.20.184;
retry-count 3;
tag-list tl1;
address-mask 255.255.255.0;
target-parameters tp1;
timeout 30;
}
target-parameters tp1 {
parameters {
message-processing-model v3;
security-model usm;
security-level privacy;
security-name u10;
}
notify-filter nf1;
}
553
Example: Configure the Remote Engine ID and Remote User
IN THIS SECTION
Requirements | 553
Overview | 553
Configuration | 555
Verification | 556
This example shows how to configure a remote engine and remote user so you can receive and respond
to SNMP inform notifications. Inform notifications can be authenticated and encrypted. They are also
more reliable than traps, another type of notification that Junos OS supports. Unlike traps, inform
notifications are stored and retransmitted at regular intervals until one of these conditions occurs:
• The target of the inform notification returns an acknowledgment to the SNMP agent.
• A specified number of unsuccessful retransmissions have been attempted.
Requirements
This feature requires the use of plain-text passwords valid for SNMPv3. SNMPv3 has the following
requirements when you create plain-text passwords on a router or a switch:
• The password must be at least eight characters long.
• The password can include alphabetic, numeric, and special characters, but it cannot include control
characters.
It is best to use quotation marks to enclose passwords although it is not necessary. You need quotation
marks if the password contains any spaces or in the case of certain special characters or punctuation.
Overview
Inform notifications are supported in SNMPv3 to increase reliability. For example, an SNMP agent
receiving an inform notification acknowledges the receipt.
For inform notifications, the remote engine ID identifies the SNMP agent on the remote device where
the user resides, and the username identifies the user on a remote SNMP engine who receives the
inform notifications.
554
Consider a scenario in which you have the values in Table 47 on page 554 to use in configuring the
remote engine ID and remote user in this example.
To send inform messages to an SNMPv3 user on a remote device, you must first specify the engine
identifier for the SNMP agent on the remote device where the user resides. The remote engine ID is
used to compute the security digest for authenticating and encrypting packets sent to a user on the
remote host. When sending an inform message, the agent uses the credentials of the user configured on
the remote engine (inform target).
For informs, remote-engine engine-id is the identifier for the SNMP agent on the remote device where the
user resides.
For informs, user username is the user on a remote SNMP engine who receives the informs.
Informs generated can be unauthenticated, authenticated, or authenticated_and_encrypted, depending on the
security level of the SNMPv3 user configured on the remote engine (the inform receiver). The
authentication key is used for generating message authentication code (MAC). The privacy key is used
to encrypt the inform PDU part of the message.
Table 47: Values to Use in Example
Name of Variable Value
username u10
remote engine ID 800007E5804089071BC6D10A41
authentication type authentication-md5
authentication password qol67R%?
encryption type privacy-des
privacy password m*72Jl9v
555
Configuration
IN THIS SECTION
CLI Quick Configuration | 555
Configuring the Remote Engine and Remote User | 555
Results | 556
CLI Quick Configuration
To quickly configure this example, copy the following commands and paste them into a text file, remove
any line breaks and change any details necessary to match your network configuration, copy and paste
these commands into the CLI at the [edit snmp v3] hierarchy level, and then enter commit from
configuration mode.
set usm remote-engine 800007E5804089071BC6D10A41 user u10 authentication-md5 authentication-
password "qol67R%?"
set usm remote-engine 800007E5804089071BC6D10A41 user u10 privacy-des privacy-password "m*72Jl9v"
Configuring the Remote Engine and Remote User
Step-by-Step Procedure
The following example requires that you navigate to various levels in the configuration hierarchy. For
information about navigating the CLI, see Using the CLI Editor in Configuration Mode in the Junos OS
CLI User Guide.
To configure the remote engine ID and remote user:
1. Configure the remote engine ID, username, and authentication type and password.
[edit snmp v3]
user@host# set usm remote-engine 800007E5804089071BC6D10A41 user u10 authentication-md5
authentication-password "qol67R%?"
2. Configure the encryption type and privacy password.
556
You can configure only one encryption type per SNMPv3 user.
[edit snmp v3]
user@host# set usm remote-engine 800007E5804089071BC6D10A41 user u10 privacy-des privacy-
password "m*72Jl9v"
Results
In configuration mode, confirm your configuration by entering the show command. If the output does not
display the intended configuration, repeat the instructions in this example to correct the configuration.
[edit snmp v3]
user@ host# show
usm {
remote-engine 800007E5804089071BC6D10A41 {
user u10 {
authentication-md5 {
authentication-key "$9$hagSyKNdbY2acyvLN-2g69CtpBRhSvMX/CLx-
V4oZUjkqfQz69CuF36Apu1Idbw2ZUiHm3/C.mF/CA1IVws4oGkqf6CtzF";## SECRET-DATA
}
privacy-des {
privacy-key "$9$GJDmf3nCtO1zFnCu0hcrevM87bs2oaUbwqmP5F3Ap0O1hrevMLxcSYgoaUDqmf5n/
Ap0REyk.BIREyr4aJZUHfTz9tu5T";## SECRET-DATA
}
}
}
}
After you have confirmed that the configuration is correct, enter commit from configuration mode.
Verification
IN THIS SECTION
Verifying the Configuration of the Remote Engine ID and Username | 557
557
Verifying the Configuration of the Remote Engine ID and Username
Purpose
Verify the status of the engine ID and user information.
Action
Display information about the SNMPv3 engine ID and user.
user@host> show snmp v3
Local engine ID: 80 00 0a 4c 01 0a ff 03 e3
Engine boots: 3
Engine time: 769187 seconds
Max msg size: 65507 bytes
Engine ID: 80 00 07 e5 80 40 89 07 1b c6 d1 0a 41
User Auth/Priv Storage Status
u10 md5/des nonvolatile active
Meaning
The output displays the following information:
• Local engine ID and detail about the engine
• Remote engine ID (labeled Engine ID)
• Username
• Authentication type and encryption (privacy) type that is configured for the user
• Type of storage for the username, either nonvolatile (configuration saved) or volatile (not saved)
• Status of the new user; only users with an active status can use SNMPv3
SEE ALSO
show snmp v3
558
SNMP Communities
IN THIS SECTION
Configure SNMP Communities | 558
Configure SNMP Community String | 564
Examples: Configure the SNMP Community String | 564
Configure the SNMPv3 Community | 566
Example: Configure SNMPv3 Community | 568
An SNMP community defines the level of authorization granted to its members, such as the available
MIB objects, the operations (read-only or read-write) that are valid for those objects, and the authorized
SNMP clients, based on their source IP addresses.
Configure SNMP Communities
IN THIS SECTION
Add a Group of Clients to an SNMP Community | 562
Configuring the SNMP agent in Junos OS is a straightforward task that shares familiar settings with
other managed devices in your network. For example, you need to configure Junos OS with an SNMP
community string and a destination for traps. Community strings are administrative names that group
collections of devices and the agents that are running on them together into common management
domains. If a manager and an agent share the same community, they can communicate with each other.
The SNMP community string defines the relationship between an SNMP server system and the client
system. This string is a password to control the client's access to the server.
To create a read-only SNMP community:
1. Enter the SNMP community used in your network.
559
If the community name contains spaces, enclose it in quotation marks (" ").
Community names must be unique.
You cannot configure the same community name at the [edit snmp community] and [edit snmp v3 snmp-
community community-index] hierarchy levels.
[edit groups global]
user@host# set snmp community name
This example uses the standard name public to create a community that gives limited read-only
access.
[edit groups global]
user@host# set snmp community public
2. Define the authorization level for the community.
The default authorization level for a community is read-only.
To allow Set requests within a community, you need to define that community as authorization read-
write. For Set requests, you also need to include the specific MIB objects that are accessible with
read-write privileges using the view statement. The default view includes all supported MIB objects
that are accessible with read-only privileges. No MIB objects are accessible with read-write
privileges. For more information about the view statement, see "Configure MIB Views" on page 573.
[edit groups global snmp community name]
user@host# set authorization authorization
This example confines the public community to read-only access. Any SNMP client (for example, an
SNMP management system) that belongs to the public community can read MIB variables but cannot
set (change) them.
[edit groups global snmp community public]
user@host# set authorization read-only
3. Define a list of clients in the community who are authorized to communicate with the SNMP agent in
Junos OS.
The clients statement lists the IP addresses of the clients (community members) that are allowed to
use this community. List the clients by IP address and prefix. Typically, the list includes the SNMP
network management system in your network or the address of your management network. If no
560
clients statement is present, all clients are allowed. For address, you must specify an IPv4 or IPv6
address, not a hostname.
[edit groups global snmp community name]
user@host# set clients address
The following statement defines the hosts in the 192.168.1.0/24 network as being authorized in the
public community.
[edit groups global snmp community public]
user@host# set clients 192.168.1.0/24
4. Define the clients that are not authorized within the community by specifying their IP address,
followed by the restrict statement.
[edit groups global snmp community name]
user@host# set clients address resrict
The following statement defines all other hosts as being restricted from the public community.
[edit groups global snmp community public]
user@host# set clients 0/0 restrict
5. At the top level of the configuration, apply the configuration group.
If you use a configuration group, you must apply it for it to take effect.
[edit]
user@host# set apply-groups global
6. Commit the configuration.
user@host# commit
To create a read-write SNMP community:
561
1. Enter the SNMP community used in your network.
[edit groups global]
user@host# set snmp community name
This example standard community string private to identify the community granted read-write access
to the SNMP agent running on the device.
[edit groups global]
user@host# set snmp community private
2. Define the authorization level for the community.
[edit groups global snmp community name]
user@host# set authorization authorization
This example confines the public community to read-only access. Any SNMP client (for example, an
SNMP management system) that belongs to the public community can read MIB variables but cannot
set (change) them.
[edit groups global snmp community public]
user@host# set authorization read-write
3. Define a list of clients in the community who are authorized to make changes to the SNMP agent in
Junos OS.
List the clients by IP address and prefix.
[edit groups global snmp community name]
user@host# set clients address
For example:
[edit groups global snmp community private]
user@host# set clients 192.168.1.15/24
user@host# set clients 192.168.1.18/24
562
4. Define the clients that are not authorized within the community by specifying their IP address,
followed by the restrict statement.
[edit groups global snmp community name]
user@host# set clients address resrict
The following statement defines all other hosts as being restricted from the public community.
[edit groups global snmp community private]
user@host# set clients 0/0 restrict
5. At the top level of the configuration, apply the configuration group.
If you use a configuration group, you must apply it for it to take effect.
[edit]
user@host# set apply-groups global
6. Commit the configuration.
user@host# commit
Add a Group of Clients to an SNMP Community
Junos OS enables you to add one or more groups of clients to an SNMP community. You can include the
client-list-name name statement at the [edit snmp community community-name] hierarchy level to add all the
members of the client list or prefix list to an SNMP community.
To define a list of clients, use the set snmp client-list client-list-name statement followed by the IP
addresses of the clients.
You can configure a prefix list at the [edit policy options] hierarchy level. Support for prefix lists in the
SNMP community configuration enables you to use a single list to configure the SNMP and routing
policies. For more information about the prefix-list statement, see the Routing Policies, Firewall Filters,
and Traffic Policers User Guide.
To add a client list or prefix list to an SNMP community, use the set snmp commmunity community-name client-
list-name statement.
The client list and prefix list must not have the same name.
563
The following example shows how to define a client list:
[edit]
snmp {
client-list clentlist1 {
10.1.1.1/32;
10.2.2.2/32;
}
}
The following example shows how to add a client list to an SNMP community:
[edit]
snmp {
community community1 {
authorization read-only;
client-list-name clientlist1;
}
}
The following example shows how to add a prefix list to an SNMP community:
[edit]
policy-options {
prefix-list prefixlist {
10.3.3.3/32;
10.5.5.5/32;
}
}
snmp {
community community2 {
client-list-name prefixlist;
}
}
564
Configure SNMP Community String
The SNMP community string defines the relationship between an SNMP server system and the client
system. This string acts like a password to control the client’s access to the server.
To configure a community string in a Junos OS configuration, use the set snmp community statement.
If the community name contains spaces, enclose it in quotation marks (" ").
The default authorization level for a community is read-only. To allow Set requests within a community,
you need to define that community as authorization read-write. For Set requests, you also need to include
the specific MIB objects that are accessible with read-write privileges using the view statement. The
default view includes all supported MIB objects that are accessible with read-only privileges; no MIB
objects are accessible with read-write privileges. For more information about the view statement, see
"Configure MIB Views" on page 573.
The IP addresses of the clients (community members) that are allowed to use this community are listed
in the clients statement lists. If no clients statement is present, all clients are allowed. For address, you
must specify an IPv4 address, not a hostname. Include the default restrict option to deny access to all
SNMP client’s for which access is not granted. We recommend that you always include the default
restrict option to limit SNMP client access to the local switch.
Community names must be unique within each SNMP system.
SEE ALSO
community
Examples: Configure the SNMP Community String
Grant read-only access to all clients. With the following configuration, the system responds to SNMP Get,
GetNext, and GetBulk requests that contain the community string public:
[edit]
snmp {
community public {
authorization read-only;
}
}
565
Grant all clients read-write access to the ping MIB and jnxPingMIB. With the following configuration, the
system responds to SNMP Get, GetNext, GetBulk, and Set requests that contain the community string private
and specify an OID contained in the ping MIB or jnxPingMIB hierarchy:
[edit]
snmp {
view ping-mib-view {