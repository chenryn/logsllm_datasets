spring2015/
Ctfwiki，CTF技能百科全书：https://wiki.x10sec.org/
各种堆漏洞利用示例：https://lgithub.com/shellphish/how2heap
堆漏洞利用技巧：https://www.contextis.com//documents/120/
Glibc_Adventures-The_Forgotten_Chunks.pdf
---
## Page 617
CTF特训营：技术详解、解题方法与
17.2攻防策略
617/1144
·掘金CTF—CTF中的内存漏洞利用技巧（杨坤）：http://
netsec.ccert.edu.cn/wp-content/uploads/2015/10/2015-1029-yangkun-
Gold-Mining-CTF.pdf
PWN的练习平台推荐如下，读者可根据自己的情况进行选择。
Linux系统熟练练习（初级）：https://exploit-exercises.com/
CTF赛题真题在线练习（初级—进阶一中级）：jarvisoj。
CTF赛题真题练习（中级一一进阶一一高级）：国际赛题
writeup.
其他（高级）：
-http://pwnable.kr/
https://pwnable.tw/
https://ringzerQteam.com/
---
## Page 618
CTF特训营：技术详解、解题方法与
本筒小结618/1144
本篇小结
与PWN相关的知识点比较繁杂，需要读者多动手、多实践。本
篇针对的主要是小自级读者，所以介绍的内容比较粗浅，很多知识点
到为止，需要读者根据自身情况去拓展。
另外，由于本篇撰写得较早，而漏洞利用技术更新选代非常快
很多内容利用技巧和方法可能已经不适用于现有的保护机制或者很少
出现在现有的CTF赛题中，但对于漏洞挖掘和利用技术来说，很多基
础的东西是需要具备的，学习和分析的方法也是可以借鉴的，另外利
用技术演变的过程是值得进行对比分析和研究的。
对PWN的学习，需要多动手调试，这样才能更直观地知道发生
了什么以及为什么会这样，当具备了一定基础后，读者可以结合glibc
源码来对堆相关的知识点进行验证和深入分析，平时多关注该领域知
名人士的博客、多阅读漏洞利用相关的文章，紧跟漏洞挖掘和利用技
术的发展潮流，逐步把自己磨炼成为技术牛人
---
## Page 619
CTF特训营：技术详解、解题方法与
第四筒CTF之Crypto
619/1144
第四篇CTF之Crypto
本篇主要讲解CTF中Crypto类型的题自涉及的知识和例题，主要
从基础、编码、古典密码、现代密码以及真题解析几个方向进行叙述。
其中基础部分讲解Crypto题目的内容和考点相关的知识，编码部分介
绍各类常见密码和编解码方法，古典密码部分介绍替代密码和移位密
码，现代密码部分介绍分组密码、序列密码、公钥、哈希，真题解析
部分将介绍几道综合型Crypto题目。
---
## Page 620
CTF特训营：技术详解、解题方法与
第18章Crypto概述
620/1144
第18章Crypto概述
纯粹密码学的考题，在CTF中被称为Crypto类型的题目，有时被
归于MISC的一种，常见于线上赛，难度较高。线下赛中也会出现一
些Crypto类型的题目，只是通常不会单独出现，而是结合PWN或者
Web进行密码学算法的考察，此时不能称之为Crypto类型题目，但是
知识点是共通的。从目前国内赛和国际赛的趋势来看，密码学类型的
题自升始趋向于与PWN类型、Reverse类型的题自相结合，题自也超
向于前沿化、论文化。
与其他类型的题目相比，Crypto类型的题目对参赛者的数学功底
要求很高，在很大程度上密码学的难点都是数学问题。想要成为一个
合格的Crypto选手，扎实的数学功底是必须的，特别是数论的内容一
定要掌握透彻。除了数学功底之外，Crypto选手还应该锻炼如下几种
能力。
1）识别能力：能够识别出题目中使用的密码算法或编码算法。
2）攻击能力：能够结合题目环境设置联想到针对特定算法的攻
击方法。
---
## Page 621
CTF特训营：技术详解、解题方法与
第18章Crypto概述
621/1144
3）分析能力：能够针对未知算法进行人工分析。
4）编程能力：能够编程实现破解该算法的程序，并对自己编写
的程序的算法复杂度与运行时间有着清醒的认识。
5）学习能力：能够快速理解最新文献中的密码学攻击方法并加
以实现。
6）跨领域能力：能够掌握Reverse、PWN、Web等其他领域的
基本知识（因为现在Crypto与多领域结合的题目较多）。
多数情况下，不能正确解开Crypto类型题目的原因有两种：不知
道该算法的破解方法；不能在有限的时间内解开该题目。
如果是第一种原因，就需要参赛者针对常见的密码学算法及具攻
击方式进行研究和学习。在实际的CTF比赛中，经常使用的密码学算
法类型少之又少，比起复杂多样的Web和PWN类型的题目，Crypto可
谓清爽简洁。所以，虽然不能要求你了解所有的密码学算法及其攻击
方法，但是常见的密码学算法及其攻击类型都应该学习一下。好的比
赛中会有一些源自最新论文的密码学题目，此类题目往往具有很高的
这分度，需要选手能够我到题自对应的论文出处，并对论文中提出的
方法加以实现
---
## Page 622
CTF特训营：技术详解、解题方法与
第18章Crypto概述
622/1144
如果是因为第二种原因，则可以直接认为是破解方法不对。出题
者在出密码学题自的时候，考虑到比赛的时间有限，通常会保证题目
能在几分钟之内破解完成。但是，如果与同伴对算法经过仔细辩论之
后还是认为需要使用这种爆破的思路去解题，那么就需要利用编程和
高性能计算机去弥补时间过长的问题。
在Crypto方面有潜力的人可以分成两种：一种是数学专业的学
生，他们有着很好的理论基础，对数论知识的分析能力极强，需要锻
炼自己的编程能力，将理论知识转换成应用能力；另一种是编程能力
较强的选手，特别擅长数据处理和并行计算等，他们要适当学习一些
数学基础类课程和密码学课程，特别是要对数论等方面的知识进行深
度学习，假以时日，必定能够成为优秀的CTF选手。
密码学可分为古典密码学和现代密码学。古典密码学主要由单表
替代、多表替代等加密方法组成，现代密码学则主要包含对称加密、
非对称加密、哈希、数字签名等内容。一般来说，密码学的攻击分为：
1）唯密文攻击：攻击者只拥有密文。
2）已知明文攻击：攻击者拥有一些与密文对应的明文
3）选择明文攻击：攻击者可以进行加密，能够获取指定明文加
---
## Page 623
CTF特训营：技术详解、解题方法与
第18章Crypto概述
623/1144
密后的密文。
4）选择密文攻击：攻击者可以进行解密，能够获取指定密文解
密后的明文。
---
## Page 624
CTF特训营：技术详解、解题方法与
第19章编码
624/1144
第19章编码
编码（encode）的目的不是为了让别人看到后解不出来，而是
代表信息的另外一种表达方式。将原始信息转化为编码信息进行传输，
可以解决一些特殊字符、不可见字符的传输问题。接收者将编码信息
再转化成原始信息，转化的过程称之为解码（decode）。
在CTF中，编码的用处不仅仅是单独出题，很多情况下其也会作
为题自的一部分，掌握各类编码的转化技巧是学习密码学的基础
---
## Page 625
CTF特训营：技术详解、解题方法与
19.1 hex
625/1144
19.1hex
传输的信息多种多样，有的字符可见，有的字符不可见，有的喜
欢用中文，有的喜欢用英文，为了使信息传输过程更为规范，可以在
传输之前将所有信息编码为十六进制的hex，在传输完成后再解码为
原始信息。
hex是最常用的编码方式之一，这一点非常容易理解，就是将信
息转化为十六进制。要进行各类编码的转化，或者是要将信息在计算
机存储中最为本质的一面表现出来的时候，都可以使用hex编码方式。
使用Python进行hex的变换，代码如下：
s="flag"
prints.encode("hex")
结果如下：
666c6167
通过encode可以对一个字符串进行编码，这里使用的是hex，结
---
## Page 626
CTF特训营：技术详解、解题方法与
19.1 hex
626/1144
果非常容易理解，就是每个学符的ASCI码的十六进制
首先需要明确一个事实，那就是密码学中的大部分操作都是进行
数学计算的过程。我们无法直接对学符串进行数学计算，所以需要将
学符串转换为数字。可以通过hex编码的方式进行转换，将原始的字
符串转化为十六进制字符的拼接后，再进行进一步的数学计算。
Python实现代码如下：
s="flag"
t=s.encode("hex")
print int(t,16)
结果如下：
1718378855
在s被hex编码时，可以利用int函数直接将hex编码后的字符串转
换为对应的十进制数字，这样就可以进行数学运算。上述过程是将字
符串转化成十进制数字的最好方法。对于单字符来说，还有更简单的
方法，那就是ord函数，代码如下：
print int("a".encode("hex"),16)
print ord("a")
---
## Page 627
CTF特训营：技术详解、解题方法与
19.1 hex
627/1144
结果如下：
97
97
当解密运算结束后，需要将数字转化成字符串，代码如下：
num=584734024210391580014049650557280915516226103165
printhex(num)
printhex(num)[2:-1]
print hex(num)[2:-1j.decode("hex")
结果如下：
0x666c61677b746869735f69735f615f666c61677dl
666c61677b746869735f69735f615f666c61677d
flag(this_is_a_flag}
使用hex函数可以将十进制数字转化成十六进制字符串，并且会
自动补“Ox”。如果是long型，则末尾会自动补“L”，所以对于第二
个print，我们将“Ox”和“L”去掉之后，得到了原字符串的hex编码
最后decode即可。但是，这并不适用于所有的情况，一是因为并不
是所有的数字在hex之后都会补“L”；二是因为decode必须要保证
---
## Page 628
CTF特训营：技术详解、解题方法与
19.1 hex
628/1144
hex编码的字符串是偶数位，如果是奇数位，则要在前面补“0”。所
以，我们可以自己写一个函数来处理这些问题，代码如下：
def num2str(num):
tmp=hex(num)[2:].replace(L",")
if len(tmp)% 2 == 0:
return tmp.decode("hex")
else:
return("O"+tmp).decode("hex")
print num2str(584734024210391580014049650557280915516226103165)
结果如下：
num2str函数的第一行做了三件事情：首先将num数字进行了hex
操作，然后去掉了前面的“Ox”，最后利用replace过滤了最后的
L”。后面四行其实只做了一件事情，即根据hex学符串的长度来判
断是否需要在最前面补“0”。
综合来说，掌握上面的几个技巧就可以应对绝大多数需要用到
hex的情况。在很多题自中，hex并不会被作为考点，因为比较简
单，但是将其用于数据处理确是很常见的。上述方法只是为了方便读
者理解原理，在实际的解题过程中，可以通过PyCrypto库进行更为方
---
## Page 629
CTF特训营：技术详解、解题方法与
19.1 hex
629/1144
便的转换，示例代码如下：
from Crypto.Util.numberimport long_to_bytes,bytes_to_long
flag="flag(123)"
printbytes_to_long（flag)
print long_to_bytes(bytes_to_long(flag))
结果如下：
1889377532526015427453
flag(123}
---
## Page 630
CTF特训营：技术详解、解题方法与
19.2 urlencode
630/1144
19.2urlencode
这种编码可用于浏览器和网站之间的数据交换，主要功能是解决
一些特殊字符在传输过程中造成的问题。这种编码非常容易理解，在
特殊字符hex的基础上，每个字符前置一个“%”即可。举例说明如
下：
flagurlencode_1234_1@#$}
flag%7Burl_encode_1234_%21@%23%24%7D
在ur编码和解码的时候，只需要关注“%”的内容，每当遇到
“%”的时候，连带“%”的三个字符对应着明文的一个字符。
Python中可以使用urllib中的两个函数来进行urlencode：
import urllib
print urlib.quote("flag(url_encode_1234_!@#$)")
d={name：PI:EMAIL',flag：flag(url_encode_1234_!@#$)}
print urllib.urlencode(d)
结果如下：
flag%7Burl_encode_1234_%21%40%23%24%7D
flag=lag%7Burl_encode_1234_%21%40%23%24%7D&name=bibi%40flappypig
club
---
## Page 631
CTF特训营：技术详解、解题方法与
19.2urlencode
631/1144
第一个quote函数可以直接对字符串进行url编码，可以使用
unquote函数进行解码；urlencode函数能对字典模式的键值对进行url
编码。
---
## Page 632
CTF特训营：技术详解、解题方法与
19.3morsecode
632/1144
19.3
morsecode
摩斯电码（morsecode）是大家耳熟能详的编码方式，很多人都
误认为它是一种加密方式，但其实它是一种编码，因为它并不存在密
钥。在只能使用电报长短音传递信息的条件下，使用摩斯电码是为了
方便信息传输。
与电影中的情节一样，摩斯电码是由长音和短音构成的。如果摩
斯电码在题目中以文字的形式给出，会是如下形式
.-. .-./.-/--J-----/.-...
解码如下：
FLAGMORSE
使用””表示短音，使用””表示长音，使用“”表示分隔符
摩斯电码的解码有很多在线工具可以使用，列举如下：
http://www.atool.org/morse.php
http://www.zhongguosou.com/zonghe/
---
## Page 633
CTF特训营：技术详解、解题方法与
19.3 morsecode
633/1144
moErSiCodeConverter.aspx
http://www.bejson.com/enc/morse/
http://www.jb51.net/tools/morse.htm
通常会将摩斯电码与MISC音频结合起来出题，最为典型的是
“滴滴滴滴”的摩斯电码的音频，耳力较好的同学可以直接按听、
抄、解三步完成，求稳的同学则推荐使用CoolEdit等音频编辑软件，
可以更为直观地观测到摩斯电码，如图19-1所示。
图19-1摩斯电码音频示意图
使用CoolEdit对某摩斯电码音频进行编辑，可以很明显地看到摩
斯电码的长音和短音，停顿的时间较长的就是两个字符之间的间隔。
---
## Page 634
CTF特训营：技术详解、解题方法与
19.3 morsecode
634/1144
我们将电码抄录为以“-”组成的字符串的格式，然后将其上传到在
线解码网站上解码即可。使用Python进行morse编码和解码的代码如
下：
alphabet_to_morse ={
"A”:"”
“B”:"-..,
"C:"--”,
"D": "-.."
"E":
"G":"--.
"H": ".
"J":
"K":"-.-"
"L”:".
"M": "--"
"N":"-."
"O”:"..
"R":"-
"S".".
"T";"-"
"U": "
"V". "
"X”:"-
"Y":
"Z": "
"0”:"
"1°:"
"2":“