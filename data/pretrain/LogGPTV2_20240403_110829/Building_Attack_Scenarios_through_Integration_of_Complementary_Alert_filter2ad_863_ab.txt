that h indirectlypreparesforh0.
A simple way to take advantage of the above observa-
tion is to assume a possible causal relationship between
hyper-alerts h and h0 if they belong to different correla-
tion graphs and h may indirectly prepare for h0. Let us
continue the example in Figure 1. If SCAN NMAP TCP
may prepare for FTP Glob Expansion, which may
prepare for Rsh, then we have SCAN NMAP TCP may
indirectly prepare for Rsh. Thus, we may hypothesize
that SCAN NMAP TCP2 indirectly prepares for Rsh3.
We add a virtual edge, displayed in a dashed line, from
SCAN NMAP TCP2 to Rsh3 in Figure 2, indicating that
there may be some attacks between them that are missed
by the IDSs.
Though this simple approach can integrate related
hyper-alert correlation graphs and hypothesize about pos-
sible causal relationships between alerts, it is limited in
several ways. First, the virtual edges generated with this
approach provide no information about attacks possibly
missed by the IDSs. Second, the virtual edges are deter-
mined solely on the basis of prior knowledge about at-
tacks. There is no “reality check.” Though a clustering
correlation method combines several hyper-alert correla-
tion graphs together, the hypothesized virtual edges are
not necessarily true due to the limitations of the clustering
correlation method and the lack of information about the
missed attacks.
3.2. Hypothesizing Missed Attacks
The may-prepare-forand may-indirectly-prepare-forre-
lations identiﬁed in Deﬁnitions 1 and 2 provide additional
opportunities to hypothesize and reason about missed at-
tacks, especially unknown variations of known attacks.
Consider two hyper-alerts h and h0 that belong to dif-
ferent correlation graphs prior to integration.
If h may
indirectlyprepareforh0, we can then identify possible se-
quences of hyper-alert types in the form of T1, T2, ..., Tk
such that T ype(h) mayprepareforT1, Ti maypreparefor
Ti+1, i = 1, 2, ..., k−1, and Tk mayprepareforT ype(h0).
These sequences of hyper-alert types are candidates of at-
tacks possibly missed by the IDSs. (More precisely, vari-
ations of these attacks, which could be used by an at-
tacker and then missed by the IDSs, are the actual candi-
dates of missed attacks.) We can then search in the alerts
and/or the raw audit data between h and h0 to check for
signs of these attacks (or their variations). For example,
to continue the example in Figure 2, we may hypothesize
that variations of either IMAP Authen Overflow, or
FTP Glob Expansion, or both may have been missed
by the IDSs based on our prior knowledge about attacks.
To better present these hypotheses, we may add the hy-
pothesized attacks into the correlation graph as virtual
nodes (displayed in gray). Figure 3 shows the resulting
correlation graph.
To facilitate hypothesizing about missed attacks, we en-
code our knowledge of the relationships between hyper-
alert types in a hyper-alert type graph, or simply a type
graph. Let us ﬁrst introduce the concept of equality con-
straint, which was originally deﬁned in [20], to help for-
mally describe the notion of type graph.
types (T1, T2), an equality constraint
Deﬁnition 3 (equality constraint [20]) Given a pair of
hyper-alert
for
(T1, T2) is a conjunction of equalities in the form of
u1 = v1 ∧ · · · ∧ un = vn, where u1, · · · , un are attribute
names in T1 and v1, · · · , vn are attribute names in T2, such
that there exist p(u1, · · · , un) and p(v1, · · · , vn), which
are the same predicate with possibly different arguments,
in ExpConseq(T1) and P rereq(T2), respectively. Given
a type T1 hyper-alert h1 and a type T2 hyper-alert h2, h1
and h2 satisfy the equality constraint if there exist t1 ∈ h1
and t2 ∈ h2 such that t1.u1 = t2.v1 ∧ · · · ∧ t1.un = t2.vn
evaluates to True.
An equality constraint characterizes the relationships
between the attribute values of two hyper-alerts when one
of them prepares for the other. There may be several
equality constraints for a pair of hyper-alert types. How-
ever, if a type T1 hyper-alert h1 prepares for a type T2
hyper-alert h2, then h1 and h2 must satisfy at least one
equality constraint. Indeed, h1 preparingforh2 is equiva-
lent to the conjunction of h1 and h2 satisfying at least one
equivalent constraint and h1 occurring before h2 [20].
Given a set of hyper-alert types (representing the known
attacks), we can derive all possible may-prepare-for re-
lations between them together with the corresponding
equality constraints. This information can help us un-
derstand how these known attacks may be combined to
launch sequences of attacks, and thus hypothesize about
which attacks (more precisely, their variations) may be
missed when we observe alerts that may indirectly prepare
for each other. The following deﬁnition formally captures
this intuition.
Deﬁnition 4 Given a set T of hyper-alert types, a (hyper-
alert) type graph T G over T is a quadruple (N, E, T, C),
where
(1) (N, E) is a directed graph,
(2) T is a bijective mapping from N to T , which maps
each node in N to a hyper-alert type in T ,
(3) there is an edge (n1, n2) in E if and only if T (n1)
maypreparefor T (n2), and
(4) C is a mapping that maps each edge (n1, n2) in
E to a set of equality constraints associated with
(T (n1), T (n2)).
the
Example 1 Consider
hyper-alert
types:
SCAN NMAP TCP, IMAP Authen Overflow,
FTP Glob Expansion, Rsh,
of
T ={ICMP PING NMAP,
following
set
n1:ICMP_PING_NMAP
{n1.DestIP=n2.DestIP}
n2:SCAN_NMAP_TCP
{n2.DestIP=n3.DestIP}
{n2.DestIP=n4.DestIP}
n3:IMAP_Authen_Overflow
n4:FTP_Glob_Expansion
{n3.DestIP=n5.SrcIP,
n3.DestIP=n5.DestIP}
{n4.DestIP=n5.SrcIP,
n4.DestIP=n5.DestIP}
{n3.DestIP=n6.SrcIP,
n3.DestIP=n6.DestIP}
n5:Rsh
{n4.DestIP=n6.SrcIP,
n4.DestIP=n6.DestIP}
{n5.SrcIP=n6.SrcIP,
n5.DestIP=n6.DestIP,
n5.SrcIP=n6.DestIP,
n5.DestIP=n6.SrcIP}
n6:Mstream_Zombie
Figure 4. An example type graph
Mstream Zombie}.
(We include the speciﬁca-
tions of these hyper-alert types in Appendix A.) We can
compute the type graph over T as shown in Figure 4.
The string inside each node is the node name followed by
the hyper-alert type name. The label of each edge is the
corresponding set of equality constraints.
Obviously, given multiple correlation graphs that may
be integrated together, we can hypothesize about pos-
sibly missed attacks that break the attack scenario ac-
cording to the type graph. Let us revisit the exam-
ple in Figure 1. Given the type graph in Figure 4, we
can systematically hypothesize that the IDSs may have
missed variations of IMAP Authen Overflow and/or
FTP Glob Expansion attacks. As a result, we obtain
the integrated correlation graph shown in Figure 3.
3.3. Reasoning about Missed Attacks
Consider nodes n2, n3, and n5 in Figure 4. There is an
equality constraint n2.DestIP = n3.DestIP associated
with (n2, n3), and two equality constraints n3.DestIP =
n5.SrcIP and n3.DestIP = n5.DestIP associated
with (n3, n5).
These imply that n2.DestIP =
n5.SrcIP or n2.DestIP = n5.DestIP .
In other
words, if a type SCAN NMAP TCP hyper-alert indirectly
prepares for a type Rsh hyper-alert (through a type
IMAP Authen Overflow hyper-alert), they must sat-
isfy one of these two equations. We obtain the same
equations if we consider nodes n2, n4, and n5 in Figure
4.
In general, we can derive constraints for two hyper-
alert types when one of them may indirectly prepare for
the other. Informally, we call such a constraint an indi-
rect equality constraint. These constraints can be used to
study whether two hyper-alerts in two different correlation
graphs could be indirectly related. This in turn allows us
to ﬁlter out incorrectly hypothesized attacks.
Indirect equality constraints can be considered a gener-
alization of the equality constraints speciﬁed in Deﬁnition
3. In this paper, we combine the terminology and sim-
ply refer to an indirect equality constraint as an equality
constraint when it is not necessary to distinguish between
them.
To take advantage of the above observation, we must
derive indirect equality constraints. Algorithm 1 (shown
in Figure 5) outlines an approach for generating the set
of indirect equality constraints between two hyper-alert
types T and T 0 where T may indirectly prepare for T 0.
Intuitively, for each pair of hyper-alert types T and T 0,
Algorithm 1 identiﬁes all paths from T to T 0 in the type
graph, and computes an indirect equality constraint for
each combination of equality constraints between consec-
utive hyper-alert types along the path. The basic idea is to
propagate the equality relationships between attributes of
hyper-alert types. Each indirect equality constraint is la-
beled with the corresponding path that produces the con-
straint. This information provides further guideline in hy-
pothesizing missed attacks. The usefulness of Algorithm
1 is guaranteed by Lemma 1.
Lemma 1 Consider a type graph T G and two hyper-
alerts h and h0, where T ype(h) and T ype(h0) are in
T G. Assume Algorithm 1 outputs a set C of equality con-
straints for T ype(h) and T ype(h0). If C is non-empty and
h indirectlypreparesfor h0, then h and h0 must satisfy at
least one equality constraint in C.
PROOF. According to Deﬁnition 2, if h indirectlypre-
paresfor h0, there must exists a sequence of hyper-alerts
h1, ..., hk, where k > 0, such that h preparesfor h1, hi
preparesfor hi+1 for i = 1, ..., k − 1, and hk preparesfor
h0. Thus, we have T ype(h) may prepare for T ype(h1),
T ype(hi) mayprepareforT ype(hi+1) for i = 1, ..., k−1,
and T ype(hk) maypreparefor T ype(h0). Following the
convention of Algorithm 1, we denote T ype(h) as T0,
T ype(hi) as Ti, where i = 1, ..., k, and T ype(h0) as
Tk+1. It is easy to see there must be a path T0, T1, ..., Tk+1
in the corresponding type graph T G. For convenience, we
also denote h as h0, and h0 as hk+1.
According to [20], if hi prepares for hi+1, then hi
and hi+1 must satisfy at least one equality constraint for
(Ti, Ti+1). For i = 0, 1, ..., k, we denote the constraint hi
and hi+1 satisfy as Ci. According to Figure 5, Algorithm
1 will process the path T0, T1, ..., Tk+1 (in step 2) and the
combination of equality constraints C0, C1, ..., Ck+1 that
h0, h1, ..., hk+1 satisfy (in step 4).
Now consider steps 5 to 9. For each S(T0.ai), we
can prove by induction that all attributes Tj.b added into
S(T0.ai) are equal to T0.ai, since each addition is based
on a conjunct Tj−1.a = Tj.b, where Tj−1.a is already in
S(T0.a). Further because step 9 removes the attributes
of Tj−1, only attributes of Tk+1 remain in S(T0.ai),
i = 1, 2, ..., l. Thus, after step 9, each S(T0.ai) includes
all the attributes of Tk+1 that are equal to T0.ai, where
i = 1, 2, ..., l. Steps 10 to 13 then transform these equal-
ity relations into a conjunctive formula ec. Since the se-
quence of constraints Ci, i = 0, 1, ..., k, where each Ci is
satisﬁed by hi and hi+1, is used in the above process, we
can easily conclude that h0 (h) and hk+1 (h0) satisfy ec.
Thus, if h indirectlypreparesfor h0, they must satisfy at
least one equality constraint in C.
2
Note that Algorithm 1 is meant to illustrate the basic
idea behind computing indirect equality constraints.
In
practice, we compute the indirect equality constraints for
all pairs of hyper-alert types simultaneously as we traverse
through the paths between a pair of hyper-alert types, and
thus signiﬁcantly reduce the required computation time.
Moreover, we need to perform this computation only once
after we determine the set of known attacks. Thus, the
performance of this algorithm will not impact the perfor-
mance of intrusion analysis greatly.
Example 2 Consider the type graph in Figure 4 and two
hyper-alert types SCAN NMAP TCP (node n2) and Rsh
(node n5). Using Algorithm 1, we can easily compute
the indirect equality constraints for them: {n2.DestIP =
n5.DestIP , n2.DestIP = n5.SrcIP }. Both indirect
equality constraints are labeled with the following two
paths: hSCAN NMAP TCP, IMAP Authen Overflow,
Rshi and hSCAN NMAP TCP, FTP Glob Expansion,
Rshi. Moreover, we can derive the sets of equality con-
straints for all pairs of hyper-alert types in Figure 4 where
one of the pair may(indirectly)prepareforthe other. Ta-
ble 1 shows the results.
(To save space, we use node
names to represent the corresponding hyper-alert types.)
Each cell in the table contains the equality constraints for
the hyper-alert types in the given row and the column,
where the row may (indirectly) prepare for the column.
The equality constraints derived for indirectly related
hyper-alert types can be used to improve the hypotheses
of missed attacks. Given two correlation graphs G and
G0 that may be integrated together, we can check each
pair of hyper-alerts h and h0, where h mayindirectlypre-
pare for h0, and h and h0 belong to G and G0, respec-
tively. If h and h0 satisfy at least one equality constraint
for (T ype(h), T ype(h0)), then we have consistent evi-
dence that supports the hypothesis that h indirectly pre-
pares for h0 (through some missed attacks). Moreover,
for each equality constraint ec that h and h0 satisfy, we
Algorithm 1. Computation of Indirect Equality Constraints
Input: A type graph T G, and two hyper-alert types T and T 0 in T G, where T mayindirectlypreparefor T 0.
Output: A set of equality constraints for T and T 0.
Method:
Denote T as T0, and T 0 as Tk+1.
For each combination of constraints C1, C2, ..., Ck+1, where Ci is an equality constraint for (Ti−1, Ti)
Let S(T0.ai) = {T0.ai}, where T0.ai, i = 1, 2, ..., l, are all the attributes of T0 that appear in C1.
For j = 1 to k + 1
For each S(T0.ai) that contains Tj−1.a, let S(T0.ai) = S(T0.ai) ∪ {Tj .b}.
Remove variables of Tj−1 from each S(T0.ai), i = 1, 2, ..., l.
Let temp = ∅.
For each non-empty S(T0.ai) and each Tk+1.b in S(T0.ai)
For each conjunct Tj−1.a = Tj .b in Cj
1. Let Result = ∅.
2. For each path T , T1, ..., Tk, T 0 from T to T 0 in T G
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.
15.
16.
17. Return Result.
Let temp = temp ∪ {T0.ai = Tk+1.b}.
Let ec be the conjunction of all elements in temp.
If ec is in Result then
Let Label(ec) = Label(ec) ∪ {hT, T1, ..., Tk, T 0i}
else Let Label(ec) = {hT, T1, ..., Tk, T 0i}, and Result = Result ∪ {ec}.
Figure 5. Algorithm to compute indirect equality constraints for two hyper-alert types
Table 1. Equality constraints for hyper-alert types in Figure 4 where one may(indirectly)prepareforthe other.
n1
n2
n3
n4
n5
n6
n1
/
n2
{n1.DestIP=n2.DestIP}
n3
{n1.DestIP=n3.DestIP}
n4
{n1.DestIP=n4.DestIP}
/
/
/