Adam Donenfeld 
•
Android chipsets overview in ecosystem 
•
Qualcomm chipset subsystem’s overview 
•
New kernel vulnerabilities 
•
Exploitation of a new kernel vulnerability 
•
Conclusions 
ADAM DONENFELD 
• Years of experience in research (both PC and mobile) 
• Vulnerability assessment 
• Vulnerability exploitation 
• Senior security researcher at Check Point 
• In meiner Freizeit, lerne ich Deutsch gern  
Special thanks to Avi Bashan, Daniel Brodie and Pavel Berengoltz for helping with the research 
OEM 
Chipset code 
Android Open Source Project 
Linux Kernel 
Qualcomm 
IPC Router 
GPU 
Thermal 
QSEECOM 
Performance 
Audio 
Ashmem 
IPC  
Router 
GPU 
Thermal 
Performance 
CVE-2016-5340 
• Ashmem – Android’s propriety memory allocation  
subsystem 
• Qualcomm devices uses a modified version 
– Simplifies access to ashmem by Qualcomm modules 
int get_ashmem_file(int fd, 
 struct file **filp, 
  struct file **vm_file, 
unsigned long *len) 
{ 
int ret = -1; 
struct ashmem_area *asma; 
struct file *file = fget(fd); 
if (is_ashmem_file(file)) { 
asma = file->private_data; 
*filp = file; 
*vm_file = asma->file; 
*len = asma->size; 
ret = 0; 
} else { 
fput(file); 
} 
return ret; 
} 
Is our fd an ashmem  
file descriptor? 
CVE-2016-5340 
• Obtain a file struct from file descriptor 
• Compare file operation handlers to expected  
handler struct 
– If it matches  file type is valid 
static int is_ashmem_file(struct file *file) 
{ 
char fname[256], *name; 
name = dentry_path(file->f_dentry, fname, 256); 
return strcmp(name, "/ashmem") ? 0 : 1; /* Oh my god */ 
} 
CVE-2016-5340 
• Exploitation requires –  
– Creation of file named “ashmem” on 
root mount point (“/”) 
• / is read-only  
CVE-2016-5340 
• Opaque Binary Blob 
– APK Expansion File 
– Support APKs > 100MB 
– Deprecated (still works!) 
• A mountable file system 
CVE-2016-5340 
• Create an OBB 
• Create “ashmem” in it’s root directory 
• Mount the OBB 
• Map “ashmem” memory to the GPU 
– Pass a fd to the fake ashmem file 
Ashmem 
IPC  
Router 
GPU 
Thermal 
Performance 
CVE-2016-2059 
• Qualcomm’s IPC router 
• Special socket family 
– AF_MSM_IPC (27) 
• Unique features 
– Whitelist specific endpoints 
– Everyone gets an “address” for communication 
– Creation/destruction can be monitored by anyone 
• Requires no permission  
• AF_MSM_IPC  socket types 
– CLIENT_PORT 
– CONTROL_PORT 
– IRSC_PORT 
– SERVER_PORT 
• Each new socket is a CLIENT_PORT socket 
CVE-2016-2059 
static int msm_ipc_router_ioctl( 
struct socket *sock, 
unsigned int cmd, 
unsigned long arg) 
{ 
struct sock *sk = sock->sk; 
struct msm_ipc_port *port_ptr; 
lock_sock(sk); 
port_ptr = msm_ipc_sk_port(sock->sk); 
switch (cmd) { 
.... 
case IPC_ROUTER_IOCTL_BIND_CONTROL_PORT: 
msm_ipc_router_bind_control_port( 
port_ptr) 
.... 
} 
release_sock(sk); 
.... 
} 
int msm_ipc_router_bind_control_port( 
struct msm_ipc_port  *port_ptr) 
{ 
if (!port_ptr) 
return -EINVAL; 
down_write(&local_ports_lock_lhc2); 
list_del(&port_ptr->list); 
up_write(&local_ports_lock_lhc2); 
down_write(&control_ports_lock_lha5); 
list_add_tail(&port_ptr->list, &control_ports); 
up_write(&control_ports_lock_lha5); 
return 0; 
} 
Client list 
Control list 
down_write(&local_ports_lock_lhc2); 
list_del(&port_ptr->list); 
up_write(&local_ports_lock_lhc2); 
down_write(&control_ports_lock_lha5); 
list_add_tail(&port_ptr->list, &control_ports); 
up_write(&control_ports_lock_lha5); 
down_write(&local_ports_lock_lhc2); 
list_del(&port_ptr->list); 
up_write(&local_ports_lock_lhc2); 
down_write(&control_ports_lock_lha5); 
list_add_tail(&port_ptr->list, &control_ports); 
up_write(&control_ports_lock_lha5); 
Client list 
Control list 
CVE-2016-2059 
• control_ports list is modified without a lock 
• Deleting 2 objects from control_ports  simultaneously! 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = A 
next = B 
prev = control_ports 
B->prev = control_ports 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = A 
next = B 
prev = control_ports 
B->prev = control_ports 
Qualaroot - implementation 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = B 
next = C 
prev = control_ports 
C->prev = control_ports 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = B 
next = C 
prev = control_ports 
C->prev = control_ports 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = B 
next = C 
prev = control_ports 
control_ports->next = C 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = B 
next = C 
prev = control_ports 
control_ports->next = C 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = B 
next = C 
prev = control_ports 
B->prev = B->next = POISON 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = B 
next = C 
prev = control_ports 
B->prev = B->next = POISON 
Qualaroot - implementation 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = A 
next = B 
prev = control_ports 
control_ports->next = B 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = A 
next = B 
prev = control_ports 
control_ports->next = B 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 
entry->next = LIST_POISON1; 
entry->prev = LIST_POISON2; 
} 
B 
A 
control_ports 
C 
LIST_POISON 
entry = A 
next = B 
prev = control_ports 
A->prev = A->next = POISON 
static inline void list_del( 
struct list_head * entry) 
{ 
next = entry->next; 
prev = entry->prev 
next->prev = prev; 
prev->next = next; 