### 4.3 Usage Governance Manager

The Usage Governance Manager leverages Blockchain Smart Contracts to store authorized usages, provide proofs of consent associated with data usage, and track when a usage right is exercised. To achieve this, we define three distinct types of Smart Contracts:

- **Exchange Smart Contract:** This contract is used to store consent assertions and is stored in a public blockchain. It utilizes the asset owner and asset consumer key information to sign the authorization specified in the assertion. The contract records the set of data that can be exchanged and used for a given purpose, generating usage tokens that can be decrypted by the data consumer to obtain proof of consent.
  
- **Usage Smart Contract:** This contract generates precise usage authorizations. It provides a function that can be invoked by the cloud service to request necessary data. It verifies if the requested data is part of the exchanged data for a given usage and stores the exact requester identity to generate a token that can be decrypted by the Asset Owner. This ensures that the requested data and the requester align with the provided consent. The contract also generates events that are consumed by the Physical Smart Contract to allow and log the exact access operations on the physical asset stored in the container.

- **Physical Smart Contract:** This contract provides access operations (i.e., service functions with basic operations) to the physical copy of the data asset (i.e., the container) and generates log files with physical events when these operations are invoked. This enables the implementation of usage tracking.

#### Smart Contract Factory

The Smart Contract Factory is responsible for generating these different smart contracts using predefined patterns. It extracts precise parameters from the Information System (IS) meta-model based on the associated assertion. The factory consists of three smart contract generators, each corresponding to one of the three types of Smart Contracts:

- **Exchange Smart Contract Generator:** This generator creates the Exchange Smart Contract, storing the approved consent assertion and "representing" this consent when sub-assertions are inferred. It generates a pair of keys (public and private) associated with the smart contract, which are used to hash the assertion and generate an encrypted token. The token merges both the assertion's hashed value and the signatures from the data owner and data provider using its private key. It securely sends the public key (used to decrypt the token) to the data owner and data consumer, encrypting it with the public encryption key provided in the assertion. The Smart Contract token is used to authenticate the requesting party invoking the Usage Smart Contract on behalf of the authorization granted by the stored assertion. Additionally, it provides an assertion extraction function that can be invoked by the data owner or data provider to retrieve the complete assertion value.

- **Usage Smart Contract Generator:** This generator stores more precisely which cloud services will be authorized to access a subset of assets defined in the Exchange Smart Contract. It is invoked using an Exchange Smart Contract token and leverages the meta-model to select the appropriate services supporting the corresponding business activities and operations. The Usage Smart Contract generator extracts the assertion from the Exchange Smart Contract. If the requested data fits the exchanged asset definition, a data object is created. A similar process, taking advantage of the business description included in our Terms of Usage (ToU) ontology, checks if the applying service fits the business context. For each pre-approved service, it generates the corresponding Usage Smart Contracts, storing the more precise usage assertion and the associated consent assertion. Similar to the Exchange Smart Contract, a pair of keys (public and private) is generated to identify the Usage Smart Contract. The private key is used to hash the usage assertion and generate an encrypted token merging both the assertion's hashed value and the signatures from the data owner and data provider. It publishes its public key (used to decrypt the token) by encrypting it with the key associated with the target service.

- **Physical Smart Contract Generator:** This generator stores different physical operation authorizations and provides various authorization functions, each associated with a particular operation achieved on a given container related to the data object. The Physical Smart Contract also logs the operation execution. It uses the meta-model to select the container associated with the data object requested by the concrete service and provides a copy of the consent approval on behalf of which the access is granted to the concrete service. Similar to the Exchange Smart Contract, it generates a pair of keys (public and private), uses the private key to hash the assertion and generate the encrypted token, merging both the assertion's hashed value and the signatures from the data owner and data provider. It securely publishes its public key (used to decrypt the token) by encrypting it with the key associated with the target concrete service.

### 5. Evaluation

To evaluate our Data Usage Policy (DUP) service, we developed a prototype integrating two parts: the ToU negotiation component and the Blockchain-based control system. The ToU negotiation component includes:
1. The IS meta-model from which protection requirements and quality of protection/required usages are extracted.
2. The Usage Assertion generation component.

This ToU negotiation component integrates different Java components developed to support policy evaluation, aggregation, and comparison. We use JENA API and Jena-arq API to model policy files, generating SPARQL queries to extract descriptions in the form of Java objects. These policies are then combined with the Business Process description to generate the different usage assertions. Our tests have shown that the policy aggregation process execution time is a maximum of 200ms for data involved in 100 services, each exhibiting 4 to 5 assertions in their policy.

The Blockchain part was deployed using Ganache, which provides an Ethereum sandbox for developing and testing Blockchain smart contracts. This means that performance indicators do not reflect real deployment Quality of Service (QoS). The smart contract factory is defined as a smart contract, providing functions to create smart contracts according to different patterns. Each pattern is associated with a set of parameters, which are extracted from the IS meta-model based on the usage assertion.

These developments have shown that the necessary business knowledge can be extracted from our meta-model to generate the Terms of Usage (ToU) consent and generate the different usage assertions before setting up the different smart contracts. Figure 4 presents the smart contract generated for the UCA3 assertion.

To evaluate our solution, we compare its capabilities with other works presented in the state of the art, considering both security management and GDPR requirements (Table 1). We identify four comparison criteria to evaluate our ToU ontology:

- **Countermeasure Scope:** Defines which part of the security solution is concerned (e.g., data storage, infrastructure security, communication security, access control).
- **Control Object:** Defines the attributes used to describe 'Rights', 'Obligations', and 'Conditions'. These attributes may deal with operational conditions (including time, location, etc.), basic CRUD operations, or business usage purposes.
- **Subject Attributes:** Defines the attributes of the party requiring access (i.e., the subject) used in the access control process. It may be a role, a group identification (such as friend, stranger, or acquaintance, usually used in social media), or a well-identified entity.

| Ref. | Countermeasure Scope | Control Object | Subject Attribute |
|------|----------------------|----------------|-------------------|
| [20] | Access control        | Trust          | Role              |
| [21] | Access control        | Operation      | Role, Condition   |
| [22] | Service selection     | Quality of Service | Service attributes |
| [23] | Access control        | Trust + Service | Role, Reputation  |
| [24] | Access control        | Purpose + Service | Role              |
| [25] | Access control        | Knowledge      | Roles, Social Relationship |
| [26] | Access control        | Object         | NA                |
| [27] | Access control        | Operation      | Role, Condition   |
| [28] | Service selection     | Authorization  | Temporal, Logical Actions, State Predicates |
| [19] | Service selection     | Security       | NA                |

Our ToU: Infrastructure + Access Control + Business Purpose

We also compare our DUP service with others according to GDPR requirements (Table 2) using four criteria:

- **Usage Scope:** Identifies if the business purpose is taken into account.
- **Consent Management:** Defines if the consent is stored or propagated.
- **Tracking:** Defines if operations and/or data provenance can be tracked.
- **Data Life-Long Protection:** Means that data usage limitations and reporting can be achieved even after the data has been transmitted to another party.

| Ref. | Usage Scope | Consent Management | Tracking | Life-Long Protection |
|------|-------------|--------------------|----------|----------------------|
| [13] | No          | Yes                | Partly for right transfer | Partly: Shared policy |
| [14] | No          | Managed by the subject | Key exchange | No                   |
| [15] | No          | Picked from the blockchain | No | No                   |
| [16] | No          | Yes                | Data forwarding operations | No                   |
| [29] | No          | Managed by the subject | Data operations | No                   |
| Our DUP | Yes         | Yes                | Data exchange and some operations | Yes                  |

### 6. Conclusion

In this paper, we presented a data-centered security service allowing the definition of a data-centered protection. It integrates both traditional security policy and usage control. This service relies on an extended Terms of Usage (ToU) ontology integrating these different parameters and a multi-layer architecture used to describe the distributed information system. Our security service takes advantage of this multi-layer architecture and Blockchain smart contracts to manage consistent authorization granting, data exchange, and real usage tracking. By this method, a consistent life-long protection can be governed across different instances of a logical asset.

Our prototype has demonstrated the consistency of our architecture. Future work will focus on usage and security governance components to support adaptive and smart protection processes for smart data depending on the context.

### References

1. Gupta, B.B., Yamaguchi, S., Agrawal, D.P.: Advances in security and privacy of multimedia big data in mobile and cloud computing. Multimedia Tools Appl. 77(7), 9203–9208 (2018)
2. Feng, D.G., Zhang, M., Zhang, Y., Xu, Z.: Study on cloud computing security. J. Softw. 22(1), 71–83 (2011)
3. Suo, H., Liu, Z., Wan, J.F., Zhou, K.: Security and privacy in mobile cloud computing. In: 9th International Wireless Communications and Mobile Computing Conference (IWCMC), pp. 655–659 (2013)
4. Patil, D., Mohapatra, R.K., Babu, K.S.: Evaluation of generalization-based K-anonymization algorithms. In: 2017 Third International Conference on Sensing, Signal Processing and Security (ICSSS), pp. 171–175 (2017)
5. Jain, P., Gyanchandani, M., Khare, N.: Big data privacy: a technological perspective and review. J. Big Data 3(1), 25 (2016)
6. Smith, M., Szongott, C., Henne, B., Voigt, G.V.: Big data privacy issues in public social media. In: 6th IEEE International Conference on Digital Ecosystems and Technologies (DEST), pp. 1–6 (2012)
7. GDPR, Art. 4. http://www.privacy-regulation.eu/en/article-4-definitions-GDPR.html
8. Acquisto, G.D., Ferrer, J.D., Kikiras, P., Torra, V., Montjoye, Y.A., Bourka, A.: Privacy by design in big data: an overview of privacy enhancing technologies in the era of big data analytics, pp. 1–80 (2015)
9. Sullivan, K.M.: Under a watchful eye: incursions on personal privacy. In: The War on Our Freedoms: Civil Liberties in an Age of Terrorism, vol. 128, pp. 131 (2003)
10. Kuner, C., Cate, F.H., Millard, C., Svantesson, D.J.B.: The challenge of ‘big data’ for data protection (2012)
11. Burmeister, F., Drews, P., Schirmer, I.: A privacy-driven enterprise architecture meta-model for supporting compliance with the General Data Protection Regulation. In: Proceedings of the 52nd Hawaii International Conference on System Sciences (2019)
12. Cha, S.C., Yeh, K.H.: A data-driven security risk assessment scheme for personal data protection. IEEE Access 6, 50510–50517 (2018)
13. Di Francesco Maesa, D., Mori, P., Ricci, L.: Distributed access control through Blockchain technology (2017)
14. Wirth, C., Kolain, M.: Privacy by Blockchain design: a Blockchain-enabled GDPR-compliant approach for handling personal data. In: Proceedings of 1st ERCIM Blockchain Workshop 2018. European Society for Socially Embedded Technologies (EUSSET) (2018)
15. Truong, N.B., Sun, K., Lee, G.M., Guo, Y.: GDPR-compliant personal data management: a Blockchain-based solution. IEEE Trans. Inf. Forens. Secur. 15, 1746–1761 (2019)
16. Neisse, R., Steri, G., Nai-Fovino, I.: A Blockchain-based approach for data accountability and provenance tracking. In: Proceedings of the 12th International Conference on Availability, Reliability and Security, pp. 1–10 (2017)
17. Kelbert, F., Pretschner, A.: Data usage control enforcement in distributed systems. In: Proceedings of the Third ACM Conference on Data and Application Security and Privacy, pp. 71–82 (2013)
18. Park, J.H., Sandhu, R.: The UCONABC usage control model. ACM Trans. Inf. Syst. Secur. 7(1), 128–174 (2004)
19. Kim, A., Luo, J., Kang, M.: Security ontology for annotating resources. In: Meersman, R., Tari, Z. (eds.) OTM 2005. LNCS, vol. 3761, pp. 1483–1499. Springer, Heidelberg (2005). https://doi.org/10.1007/11575801_34
20. Hu, Y.J., Guo, H.Y., Lin, G.D.: Semantic enforcement of privacy protection policies via the combination of ontologies and rules. In: 2008 IEEE International Conference on Sensor Networks, Ubiquitous, and Trustworthy Computing (SUTC 2008), pp. 400–407 (2008)
21. Nejdl, W., Olmedilla, D., Winslett, M., Zhang, Charles C.: Ontology-based policy specification and management. In: Gómez-Pérez, A., Euzenat, J. (eds.) ESWC 2005. LNCS, vol. 3532, pp. 290–302. Springer, Heidelberg (2005). https://doi.org/10.1007/11431053_20
22. Sodki, C., Badr, Y., Biennier, F.: Enhancing web service selection by QoS-based ontology and WS-policy. In: Proceedings of the 2008 ACM Symposium on Applied Computing, pp. 2426–2431 (2008)
23. Choi, C., Choi, J.H., Kim, P.K.: Ontology-based access control model for security policy reasoning in cloud computing. J. Supercomput. 67(3), 711–722 (2014)
24. Garcia, D., et al.: Towards a base ontology for privacy protection in service-oriented architecture. In: IEEE International Conference on Service-Oriented Computing and Applications (SOCA), pp. 1–8 (2009)
25. Masoumzadeh, A., Joshi, J.: OSNAC: an ontology-based access control model for social networking systems. In: 2010 IEEE Second International Conference on Social Computing, pp. 751–759. IEEE (2010)
26. Liu, C.L.: Cloud service access control system based on ontologies. Adv. Eng. Softw. 69, 26–36 (2014)
27. Tsai, W.T., Shao, Q.: Role-based access control using reference ontology in clouds. In: 2011 Tenth International Symposium on Autonomous Decentralized Systems, pp. 121–128. IEEE (2011)
28. Zhang, X., Park, J., Parisi-Presicce, F., Sandhu, R.: A logical specification for usage control. In: Proceedings of the Ninth ACM Symposium on Access Control Models and Technologies, pp. 1–10 (2004)
29. Kaaniche, N., Laurent, M.: A Blockchain-based data usage auditing architecture with enhanced privacy and availability. In: 2017 IEEE 16th International Symposium on Network Computing and Applications (NCA), pp. 1–5. IEEE (2017)

### XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices

[Please provide additional details or text for the XYZ Monitor section, as the original text did not include content for this part.]