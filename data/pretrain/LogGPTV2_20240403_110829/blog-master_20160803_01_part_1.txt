## DBA不可不知的操作系统内核参数  
### 作者                                                                            
digoal                                                                            
### 日期                                                                            
2016-08-03                                                                        
### 标签                                                                            
PostgreSQL , 内核参数 , Linux               
----                                                                            
## 背景  
操作系统为了适应更多的硬件环境，许多初始的设置值，宽容度都很高。    
如果不经调整，这些值可能无法适应HPC，或者硬件稍好些的环境。    
无法发挥更好的硬件性能，甚至可能影响某些应用软件的使用，特别是数据库。    
## 数据库关心的OS内核参数  
512GB 内存为例      
1\.     
  参数      
```    
fs.aio-max-nr  
```    
  支持系统      
```    
CentOS 6, 7       
```    
  参数解释      
```    
aio-nr & aio-max-nr:    
.  
aio-nr is the running total of the number of events specified on the    
io_setup system call for all currently active aio contexts.    
.  
If aio-nr reaches aio-max-nr then io_setup will fail with EAGAIN.    
.  
Note that raising aio-max-nr does not result in the pre-allocation or re-sizing    
of any kernel data structures.    
.  
aio-nr & aio-max-nr:    
.  
aio-nr shows the current system-wide number of asynchronous io requests.    
.  
aio-max-nr allows you to change the maximum value aio-nr can grow to.    
```    
  推荐设置       
```    
fs.aio-max-nr = 1xxxxxx  
.  
PostgreSQL, Greenplum 均未使用io_setup创建aio contexts. 无需设置。    
如果Oracle数据库，要使用aio的话，需要设置它。    
设置它也没什么坏处，如果将来需要适应异步IO，可以不需要重新修改这个设置。   
```    
2\.     
  参数       
```    
fs.file-max  
```    
  支持系统      
```    
CentOS 6, 7       
```    
  参数解释    
```  
file-max & file-nr:    
.  
The value in file-max denotes the maximum number of file handles that the Linux kernel will allocate.   
.  
When you get lots of error messages about running out of file handles,   
you might want to increase this limit.    
.  
Historically, the kernel was able to allocate file handles dynamically,   
but not to free them again.     
.  
The three values in file-nr denote :      
the number of allocated file handles ,     
the number of allocated but unused file handles ,     
the maximum number of file handles.     
.  
Linux 2.6 always reports 0 as the number of free    
file handles -- this is not an error, it just means that the    
number of allocated file handles exactly matches the number of    
used file handles.    
.  
Attempts to allocate more file descriptors than file-max are reported with printk,   
look for "VFS: file-max limit  reached".    
```  
  推荐设置     
```  
fs.file-max = 7xxxxxxx  
.  
PostgreSQL 有一套自己管理的VFS，真正打开的FD与内核管理的文件打开关闭有一套映射的机制，所以真实情况不需要使用那么多的file handlers。     
max_files_per_process 参数。     
假设1GB内存支撑100个连接，每个连接打开1000个文件，那么一个PG实例需要打开10万个文件，一台机器按512G内存来算可以跑500个PG实例，则需要5000万个file handler。     
以上设置绰绰有余。     
```  
3\.    
  参数     
```  
kernel.core_pattern  
```  
  支持系统    
```  
CentOS 6, 7       
```  
  参数解释    
```  
core_pattern:    
.  
core_pattern is used to specify a core dumpfile pattern name.    
. max length 128 characters; default value is "core"    
. core_pattern is used as a pattern template for the output filename;    
  certain string patterns (beginning with '%') are substituted with    
  their actual values.    
. backward compatibility with core_uses_pid:    
        If core_pattern does not include "%p" (default does not)    
        and core_uses_pid is set, then .PID will be appended to    
        the filename.    
. corename format specifiers:    
        %  '%' is dropped    
        %%      output one '%'    
        %p      pid    
        %P      global pid (init PID namespace)    
        %i      tid    
        %I      global tid (init PID namespace)    
        %u      uid    
        %g      gid    
        %d      dump mode, matches PR_SET_DUMPABLE and    
                /proc/sys/fs/suid_dumpable    
        %s      signal number    
        %t      UNIX time of dump    
        %h      hostname    
        %e      executable filename (may be shortened)    
        %E      executable path    
        % both are dropped    
. If the first character of the pattern is a '|', the kernel will treat    
  the rest of the pattern as a command to run.  The core dump will be    
  written to the standard input of that program instead of to a file.    
```  
  推荐设置     
```  
kernel.core_pattern = /xxx/core_%e_%u_%t_%s.%p    
.  
这个目录要777的权限，如果它是个软链，则真实目录需要777的权限  
mkdir /xxx  
chmod 777 /xxx  
留足够的空间  
```  
4\.     
  参数     
```  
kernel.sem   
```  
  支持系统    
```  
CentOS 6, 7       
```  
  参数解释    
```  
kernel.sem = 4096 2147483647 2147483646 512000    
.  
4096 每组多少信号量 (>=17, PostgreSQL 每16个进程一组, 每组需要17个信号量) ,     
2147483647 总共多少信号量 (2^31-1 , 且大于4096*512000 ) ,     
2147483646 每个semop()调用支持多少操作 (2^31-1),     
512000 多少组信号量 (假设每GB支持100个连接, 512GB支持51200个连接, 加上其他进程, > 51200*2/16 绰绰有余)     
.  
# sysctl -w kernel.sem="4096 2147483647 2147483646 512000"    
.  
# ipcs -s -l    
  ------ Semaphore Limits --------    
max number of arrays = 512000    
max semaphores per array = 4096    
max semaphores system wide = 2147483647    
max ops per semop call = 2147483646    
semaphore max value = 32767    
```  
  推荐设置     
```  
kernel.sem = 4096 2147483647 2147483646 512000    
.  
4096可能能够适合更多的场景, 所以大点无妨，关键是512000 arrays也够了。    
```  
5\.     
  参数     
```  
kernel.shmall = 107374182    
kernel.shmmax = 274877906944    
kernel.shmmni = 819200    
```  
  支持系统    
```  
CentOS 6, 7        
```  
  参数解释    
```  
假设主机内存 512GB    
.  
shmmax 单个共享内存段最大 256GB (主机内存的一半，单位字节)      
shmall 所有共享内存段加起来最大 (主机内存的80%，单位PAGE)      
shmmni 一共允许创建819200个共享内存段 (每个数据库启动需要2个共享内存段。  将来允许动态创建共享内存段，可能需求量更大)     
.  
# getconf PAGE_SIZE    
4096    
```  
  推荐设置     
```  
kernel.shmall = 107374182    
kernel.shmmax = 274877906944    
kernel.shmmni = 819200    
.  
9.2以及以前的版本，数据库启动时，对共享内存段的内存需求非常大，需要考虑以下几点  
Connections:	(1800 + 270 * max_locks_per_transaction) * max_connections  
Autovacuum workers:	(1800 + 270 * max_locks_per_transaction) * autovacuum_max_workers  
Prepared transactions:	(770 + 270 * max_locks_per_transaction) * max_prepared_transactions  
Shared disk buffers:	(block_size + 208) * shared_buffers  
WAL buffers:	(wal_block_size + 8) * wal_buffers  
Fixed space requirements:	770 kB  
.  
以上建议参数根据9.2以前的版本设置，后期的版本同样适用。  
```  
6\.     
  参数     
```  
net.core.netdev_max_backlog  
```  
  支持系统    
```  
CentOS 6, 7     
```  
  参数解释    
```  
netdev_max_backlog    
  ------------------    
Maximum number  of  packets,  queued  on  the  INPUT  side,    
when the interface receives packets faster than kernel can process them.    
```  
  推荐设置     
```  
net.core.netdev_max_backlog=1xxxx    
.  
INPUT链表越长，处理耗费越大，如果用了iptables管理的话，需要加大这个值。    
```  
7\.     
  参数     
```  
net.core.rmem_default  
net.core.rmem_max  
net.core.wmem_default  
net.core.wmem_max  
```  
  支持系统    
```  
CentOS 6, 7     
```  
  参数解释    
```  
rmem_default    
  ------------    
The default setting of the socket receive buffer in bytes.    
.  
rmem_max    
  --------    
The maximum receive socket buffer size in bytes.    
.  
wmem_default    
  ------------    
The default setting (in bytes) of the socket send buffer.    
.  
wmem_max    
  --------    
The maximum send socket buffer size in bytes.    
```  
  推荐设置     
```  
net.core.rmem_default = 262144    
net.core.rmem_max = 4194304    
net.core.wmem_default = 262144    
net.core.wmem_max = 4194304    
```  
8\.     
  参数     
```  
net.core.somaxconn   
```  
  支持系统    
```  
CentOS 6, 7        
```  
  参数解释    
```  
somaxconn - INTEGER    
        Limit of socket listen() backlog, known in userspace as SOMAXCONN.    
        Defaults to 128.    
	See also tcp_max_syn_backlog for additional tuning for TCP sockets.    
```  
  推荐设置     
```  
net.core.somaxconn=4xxx    
```  
9\.     
  参数     
```  
net.ipv4.tcp_max_syn_backlog  
```  
  支持系统    
```  
CentOS 6, 7         
```  
  参数解释    
```  
tcp_max_syn_backlog - INTEGER    
        Maximal number of remembered connection requests, which have not    
        received an acknowledgment from connecting client.    
        The minimal value is 128 for low memory machines, and it will    
        increase in proportion to the memory of machine.    
        If server suffers from overload, try increasing this number.    
```  
  推荐设置     
```  
net.ipv4.tcp_max_syn_backlog=4xxx    
pgpool-II 使用了这个值，用于将超过num_init_child以外的连接queue。     
所以这个值决定了有多少连接可以在队列里面等待。    
```  
10\.     
  参数     
```  
net.ipv4.tcp_keepalive_intvl=20    
net.ipv4.tcp_keepalive_probes=3    
net.ipv4.tcp_keepalive_time=60     
```  
  支持系统    
```  
CentOS 6, 7        
```  
  参数解释    
```  
tcp_keepalive_time - INTEGER    
        How often TCP sends out keepalive messages when keepalive is enabled.    
        Default: 2hours.    
.  
tcp_keepalive_probes - INTEGER    
        How many keepalive probes TCP sends out, until it decides that the    
        connection is broken. Default value: 9.    
.  
tcp_keepalive_intvl - INTEGER    
        How frequently the probes are send out. Multiplied by    
        tcp_keepalive_probes it is time to kill not responding connection,    
        after probes started. Default value: 75sec i.e. connection    
        will be aborted after ~11 minutes of retries.    
```  
  推荐设置    
```  
net.ipv4.tcp_keepalive_intvl=20    
net.ipv4.tcp_keepalive_probes=3    
net.ipv4.tcp_keepalive_time=60    
.  
连接空闲60秒后, 每隔20秒发心跳包, 尝试3次心跳包没有响应，关闭连接。 从开始空闲，到关闭连接总共历时120秒。    
```  
11\.     
  参数     
```  
net.ipv4.tcp_mem=8388608 12582912 16777216    
```  
  支持系统    
```  
CentOS 6, 7    
```  
  参数解释    
```  
tcp_mem - vector of 3 INTEGERs: min, pressure, max    
单位 page    
        min: below this number of pages TCP is not bothered about its    
        memory appetite.    
.  
        pressure: when amount of memory allocated by TCP exceeds this number    
        of pages, TCP moderates its memory consumption and enters memory    
        pressure mode, which is exited when memory consumption falls    
        under "min".    
.  
        max: number of pages allowed for queueing by all TCP sockets.    
.  
        Defaults are calculated at boot time from amount of available    
        memory.    
64GB 内存，自动计算的值是这样的    
net.ipv4.tcp_mem = 1539615      2052821 3079230    
.  
512GB 内存，自动计算得到的值是这样的    
net.ipv4.tcp_mem = 49621632     66162176        99243264    
.  
这个参数让操作系统启动时自动计算，问题也不大  
```  
  推荐设置     
```  
net.ipv4.tcp_mem=8388608 12582912 16777216    
.  
这个参数让操作系统启动时自动计算，问题也不大  
```  
12\.     
  参数     
```  
net.ipv4.tcp_fin_timeout  