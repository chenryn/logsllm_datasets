  in	
  terms	
  of	
  leaf	
  nodes	
DAG Representation
23	
DFT	
  Run3me	
•  Generate/Inject	
  op3mized	
  tracking	
  code	
  to	
the	
  baseline	
  DFT	
  plavorm	
– Translate	
  op3mized	
  TFA	
•  Our	
  prototype	
  extends	
  libd6	
•  Code	
  genera3on	
  of	
  libd6/PIN-­‐aware	
  C	
  code	
– A	
  func3on	
  per	
  each	
  instrumenta3on	
  unit	
– e.g.,	
  Firefox:	
  50K	
  customized	
  func3ons	
24	
Evalua3on	
•  Op3miza3on	
  schemes	
•  Inner,	
  Outer	
–  Code	
  reduc3on:	
  Simple	
  dead	
  code	
  elimina3ons	
–  Code	
  genera3on:	
  Op3mized	
  tracking	
  codes	
–  TFA	
  Scaqer,	
  TFA	
  Aggrega3on	
Category	
Op9miza9on	
schemes	
CFG	
Considera9on	
TFA	
Op9miza9on	
Aggrega9on	
Code	
  reduc3on	
Inner	
Code	
genera3on	
Outer	
Scaqer	
Aggrega3on	
No	
Yes	
Yes	
Yes	
No	
No	
Yes	
Yes	
No	
No	
No	
Yes	
25	
Evalua3on:	
  SPEC	
  CPU2000	
libdft
Inner
Outer
TFA scatter
TFA aggr
)
d
e
z
i
l
a
m
r
o
N
(
n
w
o
d
w
o
S
l
 12
 10.5
 9
 7.5
 6
 4.5
 3
 1.5
 0
crafty
eon
gap
gcc
•  CPU	
  intensive	
  workloads	
•  TFA’s	
  speedup	
  over	
  libd6:	
  on	
  average	
  1.90x	
  (the	
  largest	
  2.23x)	
•  ~3x	
  slowdown	
  over	
  the	
  na3ve	
  execu3on	
mcf
parserperlbmk twolf
vortex
vpr average
26	
Evalua3on:	
  Server	
  applica3ons	
(a) MySQL
libdft
Inner
Outer
TFA scatter
TFA aggr
)
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
 28
 24
 20
 16
 12
 8
 4
ATIS
(b) PHP
libdft
Inner
Outer
TFA scatter
TFA aggr
casing
md5
sha1
average
PHPBench Benchmark
)
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
 7
 6
 5
 4
 3
 2
 1
create
•  Mysql’s	
  own	
  benchmark	
  suite	
  (sql-­‐bench)	
  and	
  PHP	
  micro	
  benchmark	
  suite	
alter
insert
Test suite
(PHPBench)	
–  Ploqed	
  representa3ve	
  subsets	
27	
Evalua3on:	
  Client	
  Applica3ons	
)
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
 11
 10
 9
 8
 7
 6
 5
 4
 3
 2
 1
(a) Web site rendering
(b) Javascript
libdft
Inner
Outer
TFA scatter
TFA aggr
libdft
Inner
Outer
TFA scatter
TFA aggr
)
d
e
z
i
l
a
m
r
o
n
(
n
w
o
d
w
o
S
l
 18
 15
 12
 9
 6
Gmail
NDSS
Youtube Facebook
firefox
chrome
Web site
Browser
•  Rendering	
  measurement	
  for	
  Alexa’s	
  Top	
  500	
  sites	
  and	
  NDSS	
  2012	
  site	
•  Dromaeo	
  (hqp://www.dromaeo.com)	
  Javascript	
  benchmark	
  suite	
–  For	
  Firefox	
  web-­‐browser	
–  For	
  Firefox	
  and	
  Google	
  Chrome	
  web-­‐browser	
28	
Discussion	
•  TFA	
  for	
  other	
  DFT	
  solu3ons	
–  For	
  most	
  binary	
  DFT	
  implementa3ons	
–  Orthogonal	
  to	
  exis3ng	
  op3miza3on	
  schemes	
e.g.,	
  TaintCheck,	
  Dytan,	
  Minemu	
  …	
e.g.,	
  LIFT	
•  Tools	
  with	
  memory	
  shadowing	
–  Memcheck	
  (Valgrind),	
  Dr.	
  Memory	
  (DynamoRIO)	
•  Higher	
  perspec3ve	
–  Oﬄine	
  analysis	
  to	
  improve	
  expensive	
  dynamic	
monitors	
29	
Conclusion	
•  Current	
  binary-­‐only	
  DFT	
  implementa3ons	
  are	
sub	
  op3mal	
– No	
  considera3on	
  for	
  DFT	
  seman3cs	
– No	
  considera3on	
  for	
  global	
  context	
•  Proposed	
  a	
  novel	
  op3miza3on	
  scheme	
  that	
– Combines	
  sta3c	
  and	
  dynamic	
  analysis	
– Segregates	
  execu3on	
  and	
  tracking	
  logic	
•  ~2x	
  Speedup	
  for	
  real-­‐world	
  applica3ons	
30	
Backup	
  slides	
31	
DFT	
  Opera3on	
idx = recv();
 arr[idx+1] = arr[idx];
Real Memory
Shadow Memory
•  Memory	
  copy	
  statement	
  from	
  the	
  original	
  execu3on	
DFT	
  Opera3on	
idx = recv();
 arr[idx+1] = arr[idx];
t(idx) = TAINT;
t(arr[idx+1]) = t(arr[idx]);
Real Memory
Shadow Memory
•  Memory	
  copy	
  statement	
  from	
  the	
  original	
  execu3on	
DFT	
  Opera3on	
idx = recv();
 arr[idx+1] = arr[idx];
mov [idx]  ! recv()
mov reg0  ! [arr+idx]
t(idx) = TAINT;
t(arr[idx+1]) = t(arr[idx]);
   mov [arr+idx+1] ! reg0
Real Memory
Shadow Memory
•  Memory	
  copy	
  statement	
  from	
  the	
  original	
  execu3on	
DFT	
  Opera3on	
idx = recv();
 arr[idx+1] = arr[idx];
mov [idx]  ! recv()
 mov t([idx])  ! 1
mov reg0  ! [arr+idx]
t(idx) = TAINT;
t(arr[idx+1]) = t(arr[idx]);
   mov [arr+idx+1] ! reg0
Real Memory
Shadow Memory
•  Memory	
  copy	
  statement	
  from	
  the	
  original	
  execu3on	
DFT	
  Opera3on	
idx = recv();
 arr[idx+1] = arr[idx];
t(idx) = TAINT;
t(arr[idx+1]) = t(arr[idx]);
mov [idx]  ! recv()
 mov t([idx])  ! 1
mov reg0  ! [arr+idx]
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
   mov [arr+idx+1] ! reg0
Real Memory
Shadow Memory
•  Memory	
  copy	
  statement	
  from	
  the	
  original	
  execu3on	
DFT	
  Opera3on	
idx = recv();
 arr[idx+1] = arr[idx];
t(idx) = TAINT;
t(arr[idx+1]) = t(arr[idx]);
Real Memory
Shadow Memory
mov [idx]  ! recv()
 mov t([idx])  ! 1
mov reg0  ! [arr+idx]
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
   mov [arr+idx+1] ! reg0
 mov reg0  ! [t(reg0)]
mov [t(arr+idx+1)] ! mov reg0
•  Memory	
  copy	
  statement	
  from	
  the	
  original	
  execu3on	
Op3mizing	
  DFT	
mov [idx]  ! recv()
   mov t([idx])  ! 1
mov reg0  ! [arr+idx]
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
   mov [arr+idx+1] ! reg0
 mov reg0  ! [t(reg0)]
 mov [t(arr+idx+1)] ! mov reg0
•  Each	
  Instrumenta3on	
  unit	
  require	
  head/tail	
  instruc3ons	
•  t(	
  ):	
  shadow	
  memory	
  access	
  cost	
Op3mizing	
  DFT	
mov [idx]  ! recv()
   mov t([idx])  ! 1
mov reg0  ! [arr+idx]
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
   mov [arr+idx+1] ! reg0
 mov reg0  ! [t(reg0)]
 mov [t(arr+idx+1)] ! mov reg0
•  Each	
  Instrumenta3on	
  unit	
  require	
  head/tail	
  instruc3ons	
•  t(	
  ):	
  shadow	
  memory	
  access	
  cost	
Op3mizing	
  DFT	
mov [idx]  ! recv()
mov reg0  ! [arr+idx]
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
   mov [arr+idx+1] ! reg0
 mov reg0  ! [t(reg0)]
 mov [t(arr+idx+1)] ! mov reg0
•  Each	
  Instrumenta3on	
  unit	
  require	
  head/tail	
  instruc3ons	
•  t(	
  ):	
  shadow	
  memory	
  access	
  cost	
Op3mizing	
  DFT	
mov [idx]  ! recv()
mov reg0  ! [arr+idx]
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
   mov [arr+idx+1] ! reg0
 mov reg0  ! [t(reg0)]
 mov [t(arr+idx+1)] ! mov reg0
•  Each	
  Instrumenta3on	
  unit	
  require	
  head/tail	
  instruc3ons	
•  t(	
  ):	
  shadow	
  memory	
  access	
  cost	
Op3mizing	
  DFT	
mov [idx]  ! recv()
mov reg0  ! [arr+idx]
mov [arr+idx+1] ! reg0
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
 mov reg0  ! [t(reg0)]
 mov [t(arr+idx+1)] ! mov reg0
•  Each	
  Instrumenta3on	
  unit	
  require	
  head/tail	
  instruc3ons	
•  t(	
  ):	
  shadow	
  memory	
  access	
  cost	
Op3mizing	
  DFT	
mov [idx]  ! recv()
mov reg0  ! [arr+idx]
mov [arr+idx+1] ! reg0
 mov reg0  ! [t(arr+idx)]
 mov [t(reg0)] ! reg0
 mov reg0  ! [t(reg0)]
 mov [t(arr+idx+1)] ! mov reg0
•  Less	
  instrumenta3on	
  units	
  (21)	
•  Less	
  tracking	
  instruc3ons	
  (42)