x509扩展。该密钥会使用rsa：2048进行加密，并在365天内有效。有关req命
7如果想知道更多细节，我们再一次推荐这本由Viega等人编写的NetworkSecuritywithOpenSSL。
OpenSSL是一个非常广阔的议题。如果你想深人研究的话，那么最好先把这本书吃透。
---
## Page 256
234
第11章提升性能，保障安全
令和其选项的明确信息，请参考http://www.openssl.org/docs/apps/req.html。
下一步要做的是创建同样的证书，但是使用的是DER格式，微软产品更倾向
于使用该格式。运行下列命令：
$ openssl x509 -in cacert.pem -out cacert.cer -outform DER
现在你有了自己的根证书了，该创建客户端和服务器端的证书了。
11.3.4生成服务器端证书
为了生成服务器端证书，你需要创建一个文件夹来存放它。之后生成服务器密
钥，最后使用根证书来认证它。
$cd..
$ mkdir server
$ cd server
$ openssl genrsa -out key.pem 2048
Generating RSA private key, 2048 bit long modulus
e is 65537 (0x10001)
首先移动到包含rmqca的文件夹下，创建server文件夹，然后进人该文件夹。
调用openssl命令来生成RSA密钥。下一步是为该密钥创建一个证书请求：
$ openssl req -new -key key.pem -out req.pem -outform PEM \
-subj/CN=$(hostname)/O=server/-nodes
现在该证书请求可以被CA用来为你的RabbitMQ服务器提供证书。让我们创
建服务器证书：
$cd../rmqca/
../server/cert.pem -notext -batch -extensions server_ca_extensions
Using configuration from openssl.conf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName
:ASN.1 12:'mrhyde
organizationName
:ASN.1 12:'server'
Writeoutdatabasewithlnewentries
---
## Page 257
11.3SSL连接
235
Data Base Updated
你首先进人rmqca文件夹下，并通过使用openssl.conf文件运行opensslca
命令。输人的文件是之前创建的req·pem，同时输出的文件是cert.pem 证书，将
会存放在你的server文件夹内。现在你需要重复同样的过程来创建客户端证书。
11.3.5生成客户端证书
考虑到整个过程非常相似，这次我们不会很详细地进行解释。就像之前的示例
一样，首先为客户端创建一个密钥，然后根据该密钥生成一个证书请求，最后将证
书请求提交给CA来颁发客户端证书，并存放在client文件夹下的cert.pem中。
以下展示了需要运行的命令，以及这些命令产生的输出，你的计算机上看到的可能
会有所不同：
$cd..
$ mkdir client
$cd client
$ openssl genrsa -out key.pem 2048
Generating RSA private key, 2048 bit long modulus
+++
e is 65537 (0x10001)
-subj /CN=$(hostname)/O=client/ -nodes
$cd../rmqca/
../client/cert.pem -notext -batch -extensions client_ca_extensions
Using configuration from openssl.conf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName
:ASN.1 12:'mrhyde'
organizationName
:ASN.1 12:'client'
Certificate is to be certified unti1 Oct 5 23:14:50 2012 GMT (365 days)
Write outdatabase with lnew entries
DataBaseUpdated
现在你解决了证书的问题，该对RabbitMQ进行配置，以便在接收连接时使用
SSL。值得注意的是如果你查看rmqca文件夹下的serial和index.txt文件的
内容的话，就会看到seria1文件现在是数字03了，因为到目前为止你已经生成
---
## Page 258
236
第11章提升性能，保障安全
了三份证书了。同时，index.txt文件列出了你颁发过的证书。
11.3.6启用RabbitMQ的SSL监听器
为了启用RabbitMQ的 SSL功能，你需要在rabbitmq.config文件内添加一
些配置内容。如果你还没有创建过该文件，那么现在是时候来创建了。该文件的位
置因操作系统和RabbitMQ的发行版本的不同而不同。举个例子，在通用的UNIX
环境中，该文件位于/etc/rabbitmg文件夹内。想要知道更多关于当前设置下
该文件的位置信息的话，你可以参考RabbitMQ在线文档http://www.rabbitmq.com/
configure.html#config-location.
在创建该文件之后，你需要往里面添加两个条目：ssl_listeners和ssl_
options。前者会为传人的连接启用TCP监听器；而后者会告诉RabbitMQ在哪里
可以找到服务器证书，同时需要对通过SSL连人的客户端施加怎样的认证需求。如
果在系统上已经有了该文件的话，就在文件末尾进行添加即可。配置文件应该看起
来像下列清单所示。
清单11.3启用RabbitMQ的SSL功能
{rabbit，[
1启用SSL监听器
{ssl_listeners, [5671]},
 phpcert.pem
$ cat client/cert.pem >> phpcert.pem
$ cat rmqca/cacert.pem >> phpcert.pem
你的PHP客户端将使用phpcert，pem文件来处理RabbitMQ的SSL连接。让
我们编写客户端代码。添加下列内容到ssl_connection.php文件中。
---
## Page 260
238
第11章提升性能，保障安全
清单114PHPOpenSS连接
dudi>
require_once(_DIR_ .'/path/to/php-amqplib/amqp.inc');
define('HOsT'，'localhost'）;
1连接选项
define('PORT′，5671);
define（'UsER'，'guest'）;
define('PASS'，'guest'）;
define（'VHOST'，*/'）;
define('AMQP_DEBUG'，true);
define('CERTS_PATH',
/path/to/ca/folder/');
$ssl_options = array(
2SSL选项
'cafile'=>CERTS_PATH.'/rmqca/cacert.pem',
'local_cert'=> CERTS_PATH.'/phpcert.pem'
'verify_peer'=> true
）；
close();
register_shutdown_function('shutdown',$conn);
while(1){)
？>
如果你运行这段脚本的话，将会看见AMQP库的调试信息，会向你展现它是如
何同RabbitMQ协商连接的。在成功建立连接之后，如果你对RabbitMQ日志文件
运行tail命令的话，就应该看见与下列所示类似的消息，它向你展示了RabbitMQ
与你的PHP脚本建立连接并且该连接升级成为SSL协议：
$tail-f/var/log/rabbitmg/PI:EMAIL
=INFOREPORT====9-Oct-2011::21:01:03===
accepted TCP connection on 0.0.0.0:5671 from 127.0.0.1:64940
=INFO REPORT==== 9-Oct-2011::21:01:03 ===
starting TCPconnection  from 127.0.0.1:64940
=INFOREPORT====9-Oct-2011::21:01:03===
upgraded TCP connection  to SSL
让我们看看这段脚本做了什么。首先像往常一样包含了AMQP库，然后声明了
用于连接配置的常量1。这里需要重点关注的是，你为SSL连接使用了端口5671，
---
## Page 261
11.4总结
239
来替代使用默认的RabbitMQ端口（5672）。之后你为PHP创建了SSL选项数组②）
因此它就可以知道如何找到密钥和证书信息了。通过使用AMQPSSLConnection类
开启连接3，并随同-SSL选项传入了一共六个参数。最后，你通过设置shutdown
合键关闭脚本时）负责关闭连接。
至此，我们结束了RabbitMQSSL的讨论。现在你可以在服务器和其消息通信
客户端之间建立连接了，同时双方均能认证对方的真实性。当开启服务器端的连接
时，通过检测服务器端证书，你能确保消息的来源是可靠的。同时，服务器可以验
证客户端的真实性，因此它不会接收来自非受信方的连接。
我们已经说过很多遍了，这是一个很大的议题，超越了本书的范畴。需要注意
的是，取决于你使用的语言，你将不得不去了解具体如何在你的平台上开启SSL连
PKI设置不仅仅可以用于RabbitMQ，也可以用于其他许多地方。CA并不仅限于认
证RabbitMQ服务器和其客户端；你也能用它来认证其他应用程序之间的通信。举
例来说，你可以为自己的内部网络颁发证书，来为公司内部网站启用安全网络浏览
（使用HTTPS）
11.4总结
在本章中，我们讨论了一些有趣的议题，譬如性能、容量规划，以及安全。当
谈及提升RabbitMQ性能时，很清楚的是已经没有什么秘密可言了。所有这一切都
依赖于你的使用场景；你必须始终权衡利弊。如果想要发挥RabbitMQ的性能，那
么你就需要明智地分析不同交换器类型提供的路由算法的利与弊。此外，你已经见
识到了像消息持久化、队列持久化和消费者确认模式这些属性的组合会影响到消息
通过服务器的路径，这会影响到应用程序性能。考虑到容量规划，为了计算消息
通信结构的内存使用，你必须考虑使用的队列或者交换器种类的因素，以及哪些
AMQP元素会在服务器上启动Erlang进程。虽然Erlang拥有很高的进程限制上限，
但它不是无限的，所以通过做一些数学计算，你可以得到匹配你需求的数值。最后，
我们讲了像OpenSSL这样宽泛的议题的一些要点。你把服务器配置成可以接受SSL
---
## Page 262
240
第11章提升性能，保障安全
连接并对客户端进行认证。为了测试你的设置，你用PHP客户端通过SSL来连接
服务器，但是让PHP接收你的证书还是花了不少力气。这样奇怪的事情发生在使用
OpenSSL的几乎所有平台上。
在下一章中，我们会进人RabbitMQ插件的世界当中。你将看到自己可以获取
哪些插件来增加服务器的能力。但不仅于此,你还要构造自己的插件。系好你的“安
全带”，因为下一章你就要用Erlang编程了。你没听错：Erlang。
---
## Page 263
聪明的Rabbit：扩展
RabbitMQ
本章要点
■安装RabbitMQ插件
■回顾那些有趣的插件
■实现自定义交换器插件
到目前为止，你已经学习了如何将RabbitMQ作为AMQP消息服务器，使用
其中附带的开箱即用功能。在第8章中，你也看到了需要定制一些工具来更方便地
管理服务器。你启用了Management插件，它包含了一个灵巧的Web界面，实现
了许多服务器的管理功能。启用插件的过程十分简单：只需在shell上运行命令：
rabbitmq-plugins enable rabbitmq_management,该插件就可以正常使用了。
想想看，如果你能将自定义行为添加到服务器上的话，岂不妙哉？
在本章中，我们会深人理解RabbitMQ插件，看看你如何处理它们，以及它们
能带给我们哪些功能。你将学习如何启用插件；同时，如果不再需要它们提供的功