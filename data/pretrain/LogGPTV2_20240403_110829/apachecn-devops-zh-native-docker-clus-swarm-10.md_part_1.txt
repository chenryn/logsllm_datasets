# 十、Swarm 和云
在本书中，我们与 Docker Swarm 在一组不同的底层技术上进行了合作，但迄今为止，我们没有深入探讨这一含义:我们在 AWS、DigitalOcean 和本地工作站上运行 Swarm。出于测试和准备的目的，我们运行 Swarm 的平台可能是次要的(*让我们用 Docker Machine 启动一些 AWS 实例，并以这种方式工作*，但是对于生产来说，理解利弊、推理、评估和跟踪趋势是强制性的。
在本章中，我们将回顾几种公共云和私有云选项和技术及其可能的交集。我们最终将在[第 11 章](11.html "Chapter 11. What is next?")*中对待 **CaaS** ( **容器即服务**)和 **IaaC** ( **基础设施即代码**)的全新流行语，接下来是什么？*
我们将主要关注:
*   AWS 和 Azure 的 Docker
*   数据中心 Docker
*   在 OpenStack 上群集
# AWS 和 Azure 的 Docker
只要有了 Docker For Mac 和 Windows，Docker 团队就开始着手为运营商开发*新一代*工具集:Docker for AWS 和 Docker for Windows。这些旨在为部署 Docker 基础架构提供一种自动化的体验，尤其是面向群的基础架构。
目标是为人们提供一种标准的做事方式，将底层基础设施与 Docker 工具集成在一起，并让人们在他们喜欢的平台上不费力地运行最新的软件版本。最终目标真的是让开发者把东西从搭载 Docker for Mac/Windows 的笔记本电脑搬到云端，搭载 Docker for AWS/Azure。
## AWS 的 Docker
在 Docker 生态系统中，用户体验一如既往地出色。这些要求是:
*   自动气象站识别码
*   一个 SSH 密钥导入到您的 AWS 密钥环中
*   就绪安全组
基本上，AWS 的 Docker 是一个云表单的可点击模板。CloudForms 是 AWS 的编排系统，它允许创建复杂系统的模板，例如，您可以指定一个由三个 web 服务器、一个数据库和一个负载平衡器组成的 web 基础架构。
AWS 的 Docker 当然不是 web 或其他通用基础设施，而是具有创建 Docker Swarm(模式)基础设施的能力:它创建您指定数量的主机和工作机，将负载平衡器放在前面，并相应地配置所有网络。
这是欢迎屏幕:
![Docker for AWS](img/image_10_001.jpg)
然后，您可以指定一些基本和高级选项:
![Docker for AWS](img/image_10_002.jpg)
如您所见，您可以选择经理和员工的数量，以及要启动的实例的风格。到目前为止，多达 1000 名工人得到了支持。之后，您只需在下一步中单击创建栈，并等待几分钟，让 CloudForms 启动基础架构。
模板的作用是:
1.  在您的 AWS 帐户、网络和子网中创建一个新的虚拟私有云。
2.  创建两个自动缩放组，一个用于经理，一个用于工人。
3.  启动经理，确保他们健康成长，达到 Raft 法定人数。
4.  开始一个接一个地将工人登记到群中。
5.  创建**弹性负载平衡器** ( **ELBs** )来路由流量
6.  结束
一旦云信息完成，它将提示绿色确认。
![Docker for AWS](img/image_10_003.jpg)
现在，我们已经准备好进入新的 Docker Swarm 基础架构。只需拿起管理器的一个公共 IP，并使用第一步中指定的 SSH 密钥连接到它:
```
 ssh PI:EMAIL
```
![Docker for AWS](img/image_10_004.jpg)
## 蓝色 Docker
由于与微软达成协议，Azure 的自动 Swarm 部署也可以作为一次点击体验(或几乎)使用。
在 Azure 上部署 Swarm 的先决条件是:
*   拥有有效的 Azure 帐户
*   将此帐户标识与 Azure 的 Docker 关联
*   活动目录主体应用标识
要生成最后一个，您可以方便地使用 docker 映像，并通过以下方式启动它:
```
docker run -it docker4x/create-sp-azure docker-swarm
```
在此过程中，在某些时候，您将被要求通过浏览器登录到指定的网址。最后，您可以在 Azure 向导表单中输入一个配对标识/密码。
![Docker for Azure](img/image_10_005.jpg)
一切正常后，点击**确定****创建**即可。
![Docker for Azure](img/image_10_006.jpg)
只要有适当的内部网络、负载平衡器和路由器，就会创建一组经典虚拟机来运行指定数量的管理器(这里是 1)和工作器(这里是 4)。就像在 AWS 的 Docker 中一样，您可以通过 ssh 到一个管理器的公共 IP 来开始使用您部署的 Swarm:
```
ssh PI:EMAIL
```
![Docker for Azure](img/image_10_007.jpg)
现在的 Azure 模板有一个限制，它只支持一个管理器。然而，增加新经理的可能性应该很快就会出现。
# 数据中心 Docker
Docker 数据中心，前身是 Tutum，由 Docker 收购，是 Docker 使用通用控制面板 UCP 的一键部署解决方案，是 Docker 的商业和企业产品。
Docker 数据中心包括:
*   **通用控制平面** ( **UCP** )，界面，参考[https://docs.docker.com/ucp/overview](https://docs.docker.com/ucp/overview)
*   **Docker 可信注册(DTR)**私有注册，参考[https://docs.docker.com/docker-trusted-registry](https://docs.docker.com/docker-trusted-registry)
在 Dockercon 16 上，该团队发布了对在 AWS 和 Azure 上运行的 Docker 数据中心的支持(目前处于测试阶段)。要试用 Docker 数据中心，您需要将许可证与您的公司/项目 AWS 或 Azure ID 相关联。
对于 AWS 的数据中心，就像对于 AWS 的 Docker 一样，有一个云信息模板可以立即启动 Docker 数据中心。要求是:
*   至少配置一个路由 53，即 AWS DNS 服务，参见
*   a 数据中心许可证 Docker
您需要做的是按照许可证上的链接进入“创建栈”页面。从这里，您只需输入**主机**标识和 Docker 数据中心许可证，并开始创建栈。在内部，Docker Datacenter 将一些虚拟机放在专用网络(节点)上，而另一些虚拟机则由弹性负载平衡器(控制器为 ELBs)进行负载平衡，并在其上安装商业支持的引擎版本。Docker 数据中心虚拟机的当前版本在内部运行 Swarm 独立和发现机制，以相互连接。我们可以预期数据中心的稳定版本将很快发布。
Docker 数据中心和 and Docker 的主要区别在于，第一个数据中心旨在为所有企业做好准备。虽然后者是部署特定 Swarm 集群的最快方法，但前者更像是一个完整的解决方案，具有精美的用户界面、公证人和来自生态系统的可选服务。
# 聚集在开放栈上
说到私有云，最流行的 IaaS 开源解决方案是 OpenStack。OpenStack 是一个伟大的程序生态系统(以前称为项目)，目标是提供所谓的云操作系统。OpenStack 的核心程序有:
*   **Keystone** :身份和授权系统
*   **Nova** :虚拟机抽象层。Nova 可以插入虚拟化模块，如 Libvirt、VMware
*   **中子**:网络模块，处理租户网络、实例端口、路由和流量
*   **煤渣**:负责处理卷的存储模块
*   **一瞥**:映像存储
一切都被其他演员粘在一起:
*   数据库系统，如 MySQL，保存配置
*   一个 AMQP 经纪人，如兔子，排队和交付业务
*   一个代理系统，比如 HAproxy，用来代理 HTTP API 请求
在 OpenStack 中的典型虚拟机创建中，会发生以下情况:
1.  来自用户界面(地平线)或命令行界面的用户决定生成虚拟机。
2.  她/他点击按钮或键入命令，如`nova boot ...`
3.  Keystone 通过签入用户的数据库或 LDAP(取决于 OpenStack 的配置方式)来检查该用户在其租户中的授权和认证，并生成将在整个会话中使用的令牌:`Here is your token: gAAAAABX78ldEiY2` *。*
4.  如果认证成功，并且用户被授权生成虚拟机，Nova 将通过使用授权令牌来调用:“我们正在启动一个虚拟机，您能在哪里找到合适的物理主机吗？”
5.  如果存在这样的主机，Nova 会从“一瞥”中获取用户选择的映像:“一瞥，请递给我一个 Ubuntu Xenial 可引导 qcow2 文件”
6.  在物理启动虚拟机的计算主机上，一个`nova-compute`进程与配置的插件对话，例如，对 Libvirt 说:“我们正在这个主机上启动一个虚拟机”
7.  中子为虚拟机分配私有(和公共，如果需要)网络端口:“请在这些子网池中的指定网络上创建这些端口”
8.  如果用户愿意，煤渣会在调度程序设计的主机上分配卷。那就是。让我们创建额外的卷，并将它们连接到虚拟机。
9.  如果使用 KVM，将生成一个包含上述所有信息的合适的 XML，Libvirt 将在计算主机上启动虚拟机
10.  当虚拟机启动时，一些变量通过 cloud-init 注入，例如，SSH 密钥允许无密码 SSH 登录
这正是 Docker Machine 的 OpenStack 驱动程序的行为方式(This 上的步骤 8 除外):当您使用`-d openstack`用 Machine 创建 Docker Host 时，您必须指定一个现有的扫视映像、一个现有的私有(并且可选地是公共)网络，并且(可选地，否则是自动生成的)指定一个 SSH 映像，存储在 Nova 数据库中。当然，您必须将授权变量传递给您的 OpenStack 环境中的 Machine，或者将它们作为导出的 shell 变量。
在 OpenStack 上创建 Docker 主机的机器命令将如下所示:
```
docker-machine create \
--driver openstack \
--openstack-image-id 98011e9a-fc46-45b6-ab2c-cf6c43263a22 \
--openstack-flavor-id 3 \
--openstack-floatingip-pool public \
--openstack-net-id 44ead515-da4b-443b-85cc-a5d13e06ddc85 \
--openstack-sec-groups machine \
--openstack-ssh-user ubuntu \
ubuntu1
```
## 新的 OpenStack
因此，OpenStack 上 Docker Swarm 的经典方法是在专用网络上开始创建实例，比如说来自 Ubuntu 16.04 映像的 10 个虚拟机:
*   从 web 用户界面，指定 10 作为实例数
*   或者从命令行界面，使用`nova boot ... --max-count 10 machine-`
*   或者通过使用 Docker 机器
最后一种是更有前途的方式，因为 Machine 会自动安装 Docker，而无需以后在新创建的实例上进行黑客攻击或使用其他工具(例如带有通用驱动程序的 Machine、Belt、Ansible、Salt 或其他脚本)。但是在编写时(Machine 0.8.2)，Machine 不支持大容量主机创建，所以您将不得不使用一些基本的外壳逻辑来循环一个`docker-machine`命令:
```
#!/bin/bash
for i in `seq 0 9`; do
 docker-machine create -d openstack ... openstack-machine-$i
done