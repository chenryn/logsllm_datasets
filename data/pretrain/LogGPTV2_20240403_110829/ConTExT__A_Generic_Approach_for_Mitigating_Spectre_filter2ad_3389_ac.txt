jbe .else
lfence
ConTExT-light
ConTExT
Unprotected
cmp rdi, .array_len
cmp rdi, .array_len
cmp rdi, .array_len
jbe .else
jbe .else
jbe .else
mov (rax + rdi),al
shl 12,rax
and 0xff000,eax
mov (rdx + rax),al
l
l
a
t
s
1
d
e
t
u
c
e
x
e
t
o
n
mov (rax + rdi),al
mov (rax + rdi),al
mov (rax + rdi),al
shl 12,rax
and 0xff000,eax
mov (rdx + rax),al
d
e
t
u
c
e
x
e
t
o
n
shl 12,rax
shl 12,rax
and 0xff000,eax
and 0xff000,eax
mov (rdx + rax),al
mov (rdx + rax),al
mov 0,rax
retq
mov 0,rax
retq
mov 0,rax
retq
mov 0,rax
retq
1
d
e
t
u
c
e
x
e
t
o
n
mov rax,(rsp + 8)
mov rax,(rsp + 8)
mov rax,(rsp + 8)
mov rax,(rsp + 8)
Fig. 1: Comparison of ConTExT with the current solution against the ﬁrst Spectre attack example [50]. The leaking access, i.e.,
the only line that must not be executed, is highlighted. The arrows show which instructions can be executed in the out-of-order
execution. An unprotected application executes all instructions, including the one leaking the secret. Serializing barriers and
ConTExT-light provide protection against Spectre-type attacks on commodity systems, as empirically shown in Figure 3.
0
48
P RW US WT UC R D PAT G
Ignored
Physical Page Number
Reserved
Ignored
Prot. Key
15
Res.
X
63
Fig. 2: A page-table entry on x86-64 consists of 64 bits
which deﬁne properties of the virtual-to-physical memory
mapping. Besides the already used bits, physical page number,
and ignored bits (which can be freely used),
there are 6
physical address bits that are currently reserved for future use
since hardware is limited to 46-bit physical addresses. Future
processors may support longer physical addresses.
Currently Ignored Page-Table Entry Bit and Control
Register. An alternative to using one of the reserved bits
is to use one of the ignored bits. These bits can be freely used
by the operating system, thus, simply repurposing them is not
possible. However, if the feature has to be actively enabled,
the operating system is aware of the changed semantics of the
speciﬁc ignored bit. Note that this approach was already taken
for several other page-table bits, e.g., the protection key and the
global bit are enabled via CR4 and they are ignored otherwise.
Hence, we also propose enabling the feature using a bit in one
of the CPU control registers, e.g., CR4, EFER, or XCR0. These
registers are already used for enabling and disabling security-
related features, such as read-only pages, NX (no-execute) or
SMAP (supervisor mode access prevention). Moreover, these
registers still have up to 54 unused control bits which can be
used to enable and disable the non-transient bit.
An advantage of repurposing an ignored bit is that CPU
vendors do not lose potential address-space bits. That is, this
approach is compatible with physical address spaces of up
to 4 PB in future hardware. However, the approach comes
with the limitation that operating systems cannot freely use
TABLE I: The currently supported memory types which can
be used in the PAT (Intel 64-bit systems), and the additional
non-transient type (bold-italic) as new memory type.
Value
Type
Description
0
1
2
3
4
5
6
7
UC
WC
NS
-
WT
WP
WB
UC-
Strong uncacheable, never cached
Write Combining (subsequent writes are combined and written
once)
Non-transient, cannot read in transient execution domain
Reserved
Write Through (reads cached, writes written to cache and
memory)
Write Protected (only reads are cached)
Write Back (reads/writes are cached)
Uncacheable, overwritten by MTRR
the retroﬁtted ignored bit anymore, as it is now used as the
non-transient bit.
Memory Type using Page-Attribute Table. A third alterna-
tive is to retroﬁt the Page-Attribute Table (PAT), a processor
feature allowing the operating system to reconﬁgure various
attributes for classes of pages. The PAT allows specifying
the memory type of a memory mapping. On x86, there are
currently 6 different memory types which deﬁne the cache
policy of the memory mapping.
Table I shows the memory types which can be set using
the PAT, including our newly proposed non-transient memory
type. The PAT itself provides 8 entries for memory types. Such
a PAT entry is applied to a memory mapping via the 3 page-
table-entry bits ‘3’ (write through), ‘4’ (uncacheable), and ‘7’
(PAT). These 3 bits combined to a 3-bit number select one of
the 8 entries of the PAT.
Thus, to apply the non-transient memory type to a memory
mapping, the OS sets one of the PAT entries to the non-
transient memory type ‘2’. Then, this PAT entry can be applied
through the existing page-table bits to any memory mapping.
As the PAT supports 8 entries, and there are currently only 6
memory types (7 if the non-transient type is included), it is
still possible to use all supported memory types concurrently
6
on different pages,
compatible.
i.e.,
the approach is fully backwards-
An advantage of this approach is that no semantic changes
have to be made to page-table entries, i.e., all bits in a page-
table entry keep their current meaning. However, this variant
may require more changes in the operating system, as e.g.,
Linux already utilizes all of the PAT entries (some memory
types are deﬁned twice).
B. Secret Tracking
Non-transient mappings ensure that non-transient mem-
ory locations cannot be accessed during transient execution.
However, we still need to protect secret data that is already
loaded into a register. Registers in commodity CPUs do not
have a memory type or protection. Thus, we require changes
to the hardware to implement protection of registers. Based
on patents from Intel [45], VMWare [56], and NVIDIA [10],
we expect such tracking features to be implemented in future
CPUs. Venkataramani et al. [92] proposed a technique in hard-
ware that also taints registers, however, to identify software
bugs rather than overly eager speculative execution.
Tainting Registers. For ConTExT, we introduce one ad-
ditional non-transient bit per register, i.e., a taint (cf. Sec-
tion II-C). The non-transient bit indicates whether the value
stored in the register is non-transient or not. If the bit is
set, the entire register is marked as non-transient, otherwise,
the register is unprotected. The taint generally propagates
from memory to registers and from registers to registers. The
rationale behind this is that results of operations on secret data
have to be considered secret as well. Accessing only parts of a
tainted register, e.g., eax instead of rax, still copies the taint
from the source register to the target register and taints the
entire target register, as we only have a single non-transient
bit per register. This is also true for taint propagation in any
other use of a tainted register.
One special case is the rflags register. The rflags
register is a special purpose register, updated upon execution
of various instructions. For the rflags register, we introduce
a shadow_rflags register to track the taint bit-wise due to
the special use of the single bits in this register for control
ﬂow. The taint propagation rules still apply, but the bits of
rflags are tainted independently. Operations that update the
rflags register can execute transiently. However, using a
tainted bit from the rflags propagates the taint to the target
operands in the case of register targets. For memory targets,
regardless of the secret value, a default value is returned.
Finally, branching on a tainted bit from the rflags stalls the
pipeline to prevent any leakage. In general, we assume that
the protected application is written in a side-channel-resistant
manner. Hence,
there should not be any secret-dependent
branches. If there are such branches, ConTExT protects them
but it might lead to unnecessary stalls.
We keep taint propagation very simple and consider only
instructions with registers as destination operands. If any non-
transient memory location is used as a source operand to an in-
struction, the instruction taints the destination registers, i.e., the
non-transient bit is set for every destination register. Similarly,
if any non-transient register is used as a source operand to an
instruction, the instruction also taints the destination registers.
Thus, if a secret is loaded into a register, it is tracked through
all register operations.
The taint is not propagated if the destination operand(s)
are memory location(s), as all memory locations already have
a non-transient bit managed by the operating system. However,
if the instruction directly, or due to the fact that the destination
operand(s) are memory location(s), inﬂuences the microarchi-
tectural state, the instruction does not use the actual secret
value but instead either stalls or works with a dummy value.
This also includes branch instructions if the corresponding
shadow_rflags bit is set. That is, branching on a secret
stalls the pipeline.
Untainting Registers. There are not only operations which
taint registers, but also operations which untaint registers.
Replacing the entire content of a register without using non-
transient memory or registers untaints the register. We do this
to avoid over-tainting registers; a problem pointed out in earlier
works [82]. In particular, all immediate or untainted values
which replace the content of a register untaint it. Writing a
tainted register to a normal memory location, i.e., a memory
location which is not marked as non-transient, also untaints the
register. The rationale behind this is that if registers are spilled
to normal (i.e., insecure) memory locations, a potential secret
can be leaked anyway. If such a memory operation happens
unintentionally, it is a bug in the program and has to be ﬁxed at
the software level. As the developer has knowledge of secrets
used in the application, it is assumed that the developer moves
secrets only to memory locations marked as non-transient
if the secrets should stay secret. In many cases, however,
moving secrets to normal memory is intentional behavior, as
the developer decided that the register does not contain a secret
anymore. For instance, the output of a cryptographic cipher
does not need protection from transient-execution attacks.
Thus, the automated untainting keeps the number of tainted
registers small.
Taint Propagation across Memory Operations. As the
taint bit is an additional bit for each register, it can only be
propagated to other registers, not to memory. If an operation
writes a secret (i.e., tainted) register to memory, the taint bit
is irrecoverably lost. While this is intended if the developer
explicitly writes values to memory, it might have undesirable
consequences if this happens implicitly, e.g., due to the inner
workings of the compiler. In Section III-C, we introduce the
required changes to the compiler which ensure that the com-
piler never accidentally spills non-transient values to transient
memory locations.
However, the compiler inevitably has to temporarily store
(insecure) registers within memory regions marked as non-
transient. With the solution as described so far, we would
over-approximate and taint more and more registers over
time by spilling them to non-transient memory locations and
reading them back from there. Hence, spilling registers is not
a security problem (i.e., tainted registers are never untainted,