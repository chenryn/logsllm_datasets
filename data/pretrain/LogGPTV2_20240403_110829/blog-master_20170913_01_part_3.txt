3\.3、列表，明细  
![pic](20170913_01_pic_003.jpg)  
3\.4、柱状图，表大小、IO、命中率等占比分布。  
![pic](20170913_01_pic_004.jpg)  
3\.5、热力图，表大小、IO、命中率等占比分布。  
![pic](20170913_01_pic_005.png)  
![pic](20170913_01_pic_006.png)  
### 1、数据倾斜    
#### 检查方法：    
1、主机级/per segment，输出每台主机的已使用空间（所有空间、数据空间、临时空间、REDO空间 分别展示），剩余空间（所有空间、数据空间、临时空间、REDO空间 分别展示）。    
通过操作系统命令获得，或通过Greenplum plpythonu UDF获得。  
（Greenplum通过 gp_dist_random('gp_id') 可以在所有节点调用某个函数，并返回所有SEGMENT调用的结果。）  
2、库级/per segment，以库为单位，输出每个库在每个segment的使用空间。    
集群倾斜，返回采样标准方差（单位为MB）。  
```  
create or replace function f1() returns setof text as $$  
  select pg_size_pretty((sum(pg_database_size(datname)))::int8) from pg_database ;  
$$ language sql strict;  
select gp_execution_dbid(),f1() from gp_dist_random('gp_id') order by 2 desc,1;  
```  
```  
create or replace function ff1() returns int8 as $$  -- 返回MB  
  select sum(pg_database_size(datname))::int8/1024/1024 from pg_database ;   
$$ language sql strict;  
create or replace function fff1() returns setof int8 as $$  -- 返回MB  
  select ff1() from gp_dist_random('gp_id') ;  
$$ language sql strict;  
-- 求采样标准方差 ， MB  
select stddev_pop(fff1) from fff1() ;  
```  
单库倾斜，返回采样标准方差（单位为MB）。  
```  
create or replace function f() returns setof text as $$  
  select datname||': '||pg_size_pretty(pg_database_size(datname)) from pg_database ;  
$$ language sql strict;  
select gp_execution_dbid(),f() from gp_dist_random('gp_id') order by 1,2;  
```  
```  
-- 单位 MB  
create or replace function ff(name) returns int8 as $$  -- 返回MB  
  select pg_database_size($1)/1024/1024 ;  
$$ language sql strict;  
create or replace function fff(name) returns setof int8 as $$  -- 返回MB  
  select ff($1) from gp_dist_random('gp_id') ;  
$$ language sql strict;  
-- 求采样标准方差 ， MB  
select stddev_pop(fff) from fff('postgres');  
postgres=# select stddev_pop(fff) from fff('postgres');  
    stddev_pop      
------------------  
 262.642897613217  
(1 row)  
```  
3、表级/per segment，以表为单位，返回采样标准方差（单位为MB）。  
```  
create or replace function f2(oid) returns setof int8 as $$  
  select pg_relation_size($1)/1024/1024 from gp_dist_random('gp_id');  
$$ language sql strict;  
-- 表中方差：MB  单位  
postgres=# select stddev_pop(f2) from f2('tbl'::text::regclass);  
    stddev_pop      
------------------  
 261.800310052815  
(1 row)  
postgres=# select stddev_pop(f2) from f2('t_ao_column_2m_0'::text::regclass);  
       stddev_pop         
------------------------  
 0.19982631347136331424  
(1 row)  
```  
#### 判断方法：    
同上  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：    
天  
#### 处理方法：   
修改分布键，或者使用随机分布。  
[《分布式DB(Greenplum)中数据倾斜的原因和解法 - 阿里云HybridDB for PostgreSQL最佳实践》](../201708/20170821_02.md)    
#### 查询(QUERY)倾斜  
除了数据分布倾斜，另一种倾斜是查询倾斜，通常更加查询计划可以发现查询倾斜，例如" 窗口查询 over (partition by) " 会强制重分布，如果这个分组有倾斜，那么就可能出现查询倾斜。  
通过SQL本身，以及通过观察segment节点大小，可以发现查询倾斜。  
### 2、锁等待事件    
```  
gp_toolkit.gp_locks_on_relation    gp_toolkit.gp_locks_on_resqueue    
```  
#### 检查方法：    
```  
select usename, datname, query_start, current_query from pg_stat_activity where waiting;  
```  
#### 判断方法：    
是否有等待时间超过N分钟的QUERY。  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
[《PostgreSQL 锁等待监控 珍藏级SQL - 谁堵塞了谁》](../201705/20170521_01.md)    
与业务方沟通解决，杀死或继续等待。  
### 3、业务层资源负载    
1、资源队列  
```  
postgres=# select * from pg_resqueue;    
  rsqname   | rsqcountlimit | rsqcostlimit | rsqovercommit | rsqignorecostlimit     
------------+---------------+--------------+---------------+--------------------    
 pg_default |            20 |           -1 | f             |                  0    
(1 row)    
postgres=# select * from pg_resqueue_status ;    
  rsqname   | rsqcountlimit | rsqcountvalue | rsqcostlimit | rsqcostvalue | rsqwaiters | rsqholders     
------------+---------------+---------------+--------------+--------------+------------+------------    
 pg_default |            20 |             0 |           -1 |              |          0 |          0    
(1 row)    
```  
```  
gp_toolkit.gp_resq_activity     
gp_toolkit.gp_resq_activity_by_queue      
gp_toolkit.gp_resq_priority_backend       
gp_toolkit.gp_resq_priority_statement       
gp_toolkit.gp_resq_role       
gp_toolkit.gp_resqueue_status     
```  
#### 检查方法：    
```  
select * from pg_resqueue_status where rsqwaiters > N;  
```  
#### 判断方法：    
有记录返回，说明有等待的QUERY。  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
修改限制，或扩容。  
[《Greenplum 内存与负载管理(resource queue)最佳实践》](../201708/20170821_01.md)    
2、会话内存开销  
```  
psql -d testdb -f $GPHOME/share/postgresql/contrib/gp_session_state.sql  
psql -d testdb -f $GPHOME/share/postgresql/contrib/uninstall_gp_session_state.sql  
查询 session_level_memory_consumption  
```  
#### 检查方法：    
```  
查询 session_level_memory_consumption  
```  
#### 判断方法：    
会话内存超过N（根据segment内存规格 百分比来确定。）  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
30分钟  
#### 处理方法：    
考虑是否需要加资源、扩容。或者调优SQL。  
### 4、节点资源负载    
#### 检查方法：    
##### 单机单租户、ECS单租户型  
从虚拟机或主机检查。  
```  
dstat  
iotop  
iostat  
sar  
```  
指标  
```  
cpu ：建议正常值低于核数   
iops ： 建议正常值低于硬件能力   
bw  ： 建议正常值低于硬件能力  
network  ： 建议正常值低于带宽  
memory  ：建议rss低于内存大小-系统留存-os内核配置保留段  
```  
##### 单机多租户型  
通过 cgroup stats 观察   
```   
cpu ：建议正常值低于 分配数   
iops ： 建议正常值低于 分配数  
bw  ： 建议正常值低于 分配数  
network  ：建议正常值低于 分配数  
memory  ：建议rss低于 分配数  
```  
#### 判断方法：    
超过阈值。  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
体现在实例状态报告，建议扩容。  
### 5、workfile使用监控    
```  
gp_toolkit.gp_workfile_usage_per_query    
gp_toolkit.gp_workfile_usage_per_segment    
gp_toolkit.gp_workfile_entries    
```  
#### 检查方法：    
```  
select * from gp_toolkit.gp_workfile_usage_per_segment  where size > N;  
```  
#### 判断方法：    
检查使用WORK FILE SIZE大于N的segment。  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
30分钟  
#### 处理方法：    
查询是哪个QUERY使用了大量WORK FILE，优化QUERY，或增加资源，扩大max_statement_mem。  
```  
selece * from gp_toolkit.gp_workfile_usage_per_query  ;  
```  
#### 绘图  
趋势图（全局、SEGMENT级、QUERY级）。  
### 6、连接数    
#### 检查方法：    
```  
select count(*) from pg_stat_activity;  
```  
#### 判断方法：    
超过阈值：  
```  
N% * (max_connections - superuser_reserved_connections)  
```  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
与业务方确认：客户端使用连接池、使用资源队列、限制用户、库级连接数、扩容、加连接。  
### 7、活跃连接数    
#### 检查方法：    
```  
select count(*) from pg_stat_activity where current_query !~ 'IDLE';   
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
如果资源也遇到瓶颈，则需要扩容、使用连接池、使用资源队列。  
#### 绘图  
趋势图  
### 8、剩余连接    
#### 检查方法：    
```  
max_connections - superuser_reserved_connections - select count(*) from pg_stat_activity;   
```  
#### 判断方法：    
低于阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
如果资源也遇到瓶颈，则需要扩容、使用连接池、使用资源队列。  
#### 绘图  
趋势图  
### 9、用户级连接和剩余连接    
#### 检查方法：    
```  
select rolname, rolconnlimit from pg_stat_activity;  
select usename, count(*) from pg_stat_activity group by 1;  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
如果资源也遇到瓶颈，则需要扩容、使用连接池、使用资源队列。  
如果没有瓶颈，修改用户级连接限制。  
#### 绘图  
趋势图  
### 10、库级连接和剩余连接    
#### 检查方法：    
```  
select datname, datconnlimit from pg_database;  
select datname, count(*) from pg_stat_activity group by 1;  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
如果资源也遇到瓶颈，则需要扩容、使用连接池、使用资源队列。  
如果没有瓶颈，修改库级连接限制。  
#### 绘图  
趋势图  
### 11、等待中会话  
#### 检查方法：    
```  
select count(*) from pg_stat_activity where waiting;  
```  
#### 判断方法：    
超过阈值  
#### 事件级别：    
警告  
#### 重要程度：    
重要  
#### 监控频率：   
10分钟  
#### 处理方法：    
排查等待原因。  
#### 绘图  
趋势图  
### 12、运行中长事务    