pay+=' (Not ) \r\n\r\n'
print pay
sock.send(pay)
data = sock.recv(80960)
print data
sock.close
执行：
当路径长度小于19时，如下，需要增加12个a，b
而实际中路径常常大于19，需要对padding进行删除。
当路径为c:\www\的时候，a有107个，加起来有114个，除去盘符有111个字符，所以可以把Exp的padding增加至111，并逐次进行减少。当长度不匹配时返
回500，成功时返回200，通过爆破方式得到物理路径长度。
成功:
失败:
当然如果能得到物理路径，则用114减去物理路径长度（包括末尾的反斜杠）就是所需的padding长度。
第三个需要注意的是，超时问题。
当exp执行成功一段时间之后（大概十分钟到二十分钟左右，其间无论有无访问），再对这个站点执行exp永远不会成功，同时返回400。
解决方法：
1.等待w3wp重启。
2.测试旁站（因为每个池都是独立的w3wp进程，换一个可能在其他池的旁站进行尝试）
第四个需要注意的是，多次执行错误shellcode
多次执行错误的shellcode会覆盖很多不该覆盖的代码，从而导致正确的shellcode执行时也返回500，
提示信息为：参数不正确，也可能什么都不返回。
解决方法：
1.等待w3wp重启。
2.测试旁站（因为每个池都是独立的w3wp进程，换一个可能在其他池的旁站进行尝试）
修修复复建建议议
关闭 WebDAV
Apache
Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务
器端软件之一。它快速、可靠并且可通过简单的API扩充，将Perl/Python等解释器编译到服务器中。
解解析析漏漏洞洞
未未知知扩扩展展名名解解析析漏漏洞洞
Apache的解析漏洞依赖于一个特性： Apache默默认认一一个个文文件件可可以以有有多多个个以以点点分分割割的的后后缀缀，，当当最最右右边边的的后后缀缀无无法法识识别别（（不不在在mime.types文文件件内内）），，则则
继继续续向向左左识识别别，，直直到到识识别别到到合合法法后后缀缀才才进进行行解解析析。。
复现：
这里使用phpstudy进行复现。
下载地址：
http://phpstudy.php.cn/phpstudy/phpStudy(PHP5.2).zip
访问phpinfo.php.xxx
实战中可以上传rar，owf等文件进行利用，如果上传phpinfo.php.jpg，即使文件名中有.php，也会直接解析为jpg。因为Apache认识.jpg,停止继续向左识别。
AddHandler导导致致的的解解析析漏漏洞洞。。
如果运维人员给.php后缀增加了处理器：
AddHandler application/x-httpd-php .php
那么，在有多个后缀的情况下，只要一个文件名中含有.php后缀，即被识别成PHP文件，没必要是最后一个后缀。
利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。
复现：
即使最右边的文件格式是在mime.types文件内，只要文件名中出现.php，就直接被解析为php。
Apache HTTPD 换换行行解解析析漏漏洞洞（（CVE-2017-15715））
影响范围：2.4.0~2.4.29版本
环境：phpstudy2014 Apache + PHP5.4n
此漏洞形成的根本原因，在于$, 正则表达式中$不仅匹配字符串结尾位置，也可以匹配\n 或 \r
在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。
SetHandler application/x-httpd-php
测试代码：
点击Go后，效果如下:
相同代码在Linux下进行测试，可以正常写入。
访问：
限制：获取文件名时不能用$_FILES['file']['name']，因为它会自动把换行去掉。
修修复复建建议议
1. 升级到最新版本
2. 或将上传的文件重命名为为时间戳+随机数+.jpg的格式并禁用上传文件目录执行脚本权限。
Nginx
Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事
实上nginx的并发能力确实在同类型的网页服务器中表现较好，
Nginx配配置置文文件件错错误误导导致致的的解解析析漏漏洞洞
对于任意文件名，在后面添加/xxx.php（xxx为任意字符）后,即可将文件作为php解析。
例：info.jpg后面加上/xxx.php，会将info.jpg 以php解析。
这里使用phpstudy2014 ，Nginx + PHP5.3n进行复现(以下复现若无特别说明均采用此环境)
结果：
该漏洞是Nginx配置所导致，与Nginx版本无关，下面是常见的漏洞配置。
server {
location ~ \.php$ {
root /work/www/test;
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME
$document_root$fastcgi_script_name;
include fastcgi_params;
fastcgi_pass unix:/tmp/php-fpm.sock;
}
}
当攻击者访问/info.jpg/xxx.php时， Nginx将查看URL，看到它以.php结尾，并将路径传递给PHP fastcgi处理程序。
Nginx传给php的路径为c:/WWW/info.jpg/xxx.php,
在phpinfo中可以查看_SERVER["ORIG_SCRIPT_FILENAME"]得到。
PHP根据URL映射，在服务器上寻找xxx.php文件，但是xxx.php不存在，又由于cgi.fix_pathinfo默认是开启的，因此PHP 会继续检查路径中存在的文件，并将
多余的部分当作 PATH_INFO。接着PHP在文件系统中找到.jpg文件，而后以PHP的形式执行.jpg的内容，并将/xxx.php存储在 PATH_INFO 后丢弃，因此我们
在phpinfo中的$_SERVER['PATH_INFO']看的到值为空。
Note:php的的一一个个选选项项：：cgi.fix_pathinfo，，该该选选项项默默认认开开启启，，值值为为1，，用用于于修修理理路路径径，，
例如：当php遇到文件路径"/info.jpg/xxx.php/lxh.sec"时，若"/info.jpg/xxx.php/lxh.sec"不存在，则会去掉最后的"/lxh.sec"，然后判断"/info.jpg/xxx.php"是否存
在, 若存在则将/info.jpg/xxx.php当作文件/info.jpg/xxx.php/lxh.sec，若/info.jpg/xxx.php仍不存在，则继续去掉xxx.php,依此类推。
修修复复建建议议
1.配置cgi.fix_pathinfo(php.ini中)为0并重启php-cgi程序
结果：
2.或如果需要使用到cgi.fix_pathinfo这个特性（例如：Wordpress），那么可以禁止上传目录的执行脚本权限。
或将上传存储的内容与网站分离，即站库分离。
3.或高版本PHP提供了security.limit_extensions这个配置参数，设置security.limit_extensions = .php
Nginx 空空字字节节任任意意代代码码执执行行漏漏洞洞
影响版本：Nginx 0.5*, 0.6*,0.7 <= 0.7.65,0.8 <= 0.8.37
这里提供个打包好的Windows环境 Nginx 0.7.65+php 5.3.2
链接：https://pan.baidu.com/s/1FUVJv9iFCcX9Qp5D5AMxKw
提取码：imdm