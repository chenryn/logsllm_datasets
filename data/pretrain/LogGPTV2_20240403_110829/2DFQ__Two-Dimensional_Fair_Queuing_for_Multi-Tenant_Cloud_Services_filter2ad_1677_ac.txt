in request cost. Th ((cid:13)b) submits a large burst of requests that
then tapers o(cid:242), with costs across four APIs that vary by about
¸.(cid:254) orders of magnitude. T¸§ ((cid:13)c) is the most unpredictable
tenant, with bursts and lulls of requests, and costs that span
more than three orders of magnitude.
Even within each API, request costs vary by tenant. For ex-
ample, while API G illustrated in Figure za has several orders
of magnitude between its ¸% and (cid:146)(cid:146)% request costs, if we also
condition on the tenant, see Figure h (le(cid:22)), most tenants using
this API actually have very low cost variance. Figure h (right)
shows the scatter plot of mean and coeıcient of variation
(CoV = mean / stdev) of request costs across many tenants
and APIs. _e ßgure illustrates that each API has tenants using
it in predictable and unpredictable ways.
Unknown request costs are a challenge to making e(cid:242)ective
scheduling decisions, since packet schedulers need to know
costs a priori. As a workaround, costs can be estimated based
on past requests or some other model. However, while cost
estimation is suitable for stable, predictable tenants, it loses
e(cid:242)ectiveness for dynamic tenants. Models can be inaccurate
since costs depend on numerous factors: the API being called,
its parameters, content of various caches, sizes of internal
objects that the request might process, etc. Estimates based on
recent request history, such as moving averages, only re(cid:6)ect
the past and can be consistently wrong proportional to how
frequently costs vary.
147
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●ABCDEFGHJK100100010000100000106107Cost [Anonymized Units]API●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●T12T11T10T9T8T7T6T5T4T3T2T1100100010000100000106Cost [Anonymized Units]Tenant●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●T11T10T7T6T5T11001000104105106107Cost [Anonymized Units]Tenant 0.125 0.25 0.5 1 2 4 81001000104105106107Coefficient of VariationMean Request SizeABEGH(a) Stable tenant (Tz)
(b) Stable with gradual changes (Th)
(c) Unstable tenant with frequent changes (T¸§)
Figure (cid:13): Details of three Azure Storage tenants over a h§ second interval. Each color represents a di(cid:242)erent API labeled consistently with Figure za. Points
represent individual requests with their costs on the le(cid:22) y-axis. Lines represent the aggregate request rate during ¸ second time intervals (right y-axis).
Incorrect cost estimates lead to bursty schedules. _ey oc-
cur when an expensive request masquerades as a cheap request
and is scheduled as though it is cheap, blocking its worker
thread for longer than expected. When a burst of these re-
quests occurs, they can block many or all worker threads for a
long period of time, impacting the latency of all other waiting
tenants. _e challenge is orthogonal to the scheduling strategy
– it a(cid:242)ects not only existing schedulers, but also new schedulers
designed to address the cost variability challenge of §h.¸.
Feedback delays exacerbate the impact of underestimates.
Consider an estimator based on per-tenant moving averages,
a typical approach to estimating request costs [h,(cid:13)z,(cid:13)h,(cid:254)¸,(cid:254)z].
_ere is an inherent feedback delay between estimating a re-
quest’s cost and eventually updating the estimator with the
actual cost once the request ßnishes. If a tenant transitions
from cheap to expensive requests then the scheduler will in-
correctly schedule not just one request, but potentially up to N
requests (where N is the number of threads), since the expen-
sive costs won’t be re(cid:6)ected back in the estimator until a(cid:22)er
one of the expensive requests has completed. While a bursty
schedule is inevitable when a tenant transitions from cheap
to expensive requests, in this scenario it can be signißcantly
amplißed. _e tenant will also deviate from its fair share un-
less the scheduler reconciles the error between each request’s
estimated and actual cost.
Our insight to generating smooth schedules under unknown
request costs stems from the following observations. If the
scheduler underestimates a request’s cost, then the request
can block the thread pool for a long period of time leading
to bursty schedules for other tenants. However, if the sched-
uler overestimates a request’s cost, it only immediately af-
fects the one tenant that was forced to wait for longer than it
should have. Since workloads typically contain a mixture of
predictable and unpredictable tenants, it is better to give good
service to a predictable tenant than to try – and fail – to give
good service to an unpredictable tenant. In order to prevent
unpredictable tenants from interfering with predictable ten-
ants, we try to reduce the chance of underestimating request
costs. We discuss the details of our approach in §(cid:254).
4. TWO-DIMENSIONAL FAIR QUEUING
_e goal of Two-Dimensional Fair Queueing (zDFQ) is to
produce smooth schedules for tenants with small requests, by
minimizing burstiness over time and over space. _is section
148
(a) Ideal request schedule over time on two threads
(b) Request start and ßnish times for WFQ and WFzQ
(c) Request schedule produced under WFQ
(d) Request schedule produced under WFzQ
Figure (cid:254): Example schedules comparing WFQ and WFzQ to the ideal sched-
ule for four tenants sharing two worker threads. Tenants A and B have re-
quest size ¸; tenants C and D have request size (cid:13). See description in §(cid:13).
outlines the design of zDFQ, a request scheduler for known re-
quest costs; in §(cid:254) we present zDFQE, a scheduler for unknown
request costs.
We begin by demonstrating how WFQ and WFzQ produce
bursty schedules. Consider four backlogged tenants (A . . . D)
sharing two worker threads (W§ and W¸). Tenants A and B
have small requests (size ¸), while tenants C and D have large
requests (size (cid:13)). Figure (cid:254)a illustrates an ideal schedule of
requests over threads in this scenario.
Figure (cid:254)b outlines the virtual start and ßnish times used by
WFQ and WFzQ. Figure (cid:254)c illustrates the resulting schedule
for WFQ. Since WFQ schedules requests in ascending order of
ßnish time, it uses both threads to execute (cid:13) requests each for
A and B. Only at t = (cid:13) do C and D have the lowest ßnish time
causing WFQ to simultaneously execute one request each for
C and D, occupying the thread pool until t = ˙. _is schedule
is bursty for A and B, because they each get a period of high
throughput followed by a period of zero throughput. In gen-
eral, WFQ’s bursts are proportional to the maximum request
size (i.e., the size of C and D’s requests) and the number of
tenants present (i.e., doubling the number of tenants would
double the period of blocking).
Figure (cid:254)d illustrates the resulting schedule under WFzQ
which also has periods of blocking proportional to maximum
request size. WFzQ also schedules requests in ascending order
of ßnish time, but with the additional condition that a request
 100 1000 10000 0 5 10 15 20 25 30 0 100 200 300 400 500 600Request Cost [Anonymized Units]Request Rate [Requests/s]Time [s]AB 100 1000 10000 0 5 10 15 20 25 30 0 200 400 600 800 1000Request Cost [Anonymized Units]Request Rate [Requests/s]Time [s]BHJC 100 1000 10000 100000 1x106 1x107 0 5 10 15 20 25 30 0 50 100 150 200Request Cost [Anonymized Units]Request Rate [Requests/s]Time [s]GHW1a1b1a2b2a3b3a4b4a5b5a6b6a7b7a8b8a9W0…c3 …c1d1c2d2Requesta1a2a3a4a5a6a7a8a9Requestc1c2c3Start Time012345678Start Time048Finish Time123456789Finish Time4812Requestb1b2b3b4b5b6b7b8b9Requestd1d2d3Start Time012345678Start Time048Finish Time123456789Finish Time4812……………b1b2b3b4b5b6b7b8d1d2b9W1…a1a2a3a4a5a6a7a8c1c2a9W0W1b1b2b3b4b5b6b7b8b9d1d2W0a1a2a3a4a5a6a7a8a9c2c1……cannot be scheduled if its virtual start time has not yet arrived.
As a result, WFzQ does not schedule the second requests of A
or B – their virtual start time is ¸, which means they cannot
be scheduled until t = z. _e only remaining requests for WF
zQ to pick are those of C and D. Like WFQ, WFzQ produces
a bursty schedule that alternates between concurrent service
for A and B, followed by concurrent service for C and D.
Burstiness occurs under WFzQ when multiple worker threads
become available and only large requests are eligible to be
scheduled. Since each request is instantaneously eligible to
run on all worker threads when its virtual start time S(r j)
thread i at virtual time S(r j)− i
n× l j where §≤ i lr, we charge the tenant for its excess
consumption; if cr < lr, we refund the tenant for unused
tags by cr− lr. Regardless of the initial estimate lr, retroactive
resources. To do this we adjust the tenant’s start and ßnish
charging eventually reconciles the error between lr and cr,
thereby guaranteeing that the tenant will receive its true fair