• postgresql.conf
○ Configuration file for PostgreSQL similar to my.cnf for MySQL
○ This file contains all the parameters and the values required to run your PostgreSQL Instance
○ Parameters are set to their default values if no modification is done to this file manually
○ Located in the data directory or /etc depending on the distribution you choose and the location can
be modifiable
• postgresql.auto.conf
○ PostgreSQL gives Oracle like compatibility to modify parameters using "ALTER SYSTEM"
○ Any parameter modified using ALTER SYSTEM is written to this file for persistence
○ This is last configuration file read by PostgreSQL, when started. Empty by default
○ Always located in the data directory
30
View/Modify Parameters in postgresql.conf
• Use show to view a value set to a parameter
$ psql -c "show work_mem"
• To see all the settings, use show all
$ psql -c "show all"
• Modifying a parameter value by manually editing the postgresql.conf file
$ vi $PGDATA/postgresql.conf
• Use ALTER SYSTEM to modify a parameter
$ psql -c "ALTER SYSTEM SET archive_mode TO ON"
$ pg_ctl -D $PGDATA restart -mf
• Use reload using the following syntax to get the changes into effect for parameters not needing RESTART
$ psql -c "select pg_reload_conf()"
Or
$ pg_ctl -D $PGDATA reload
31
Base Directory and Datafiles on Disk
● Base Directory
○ Contains Subdirectories for every Database you create
○ Every Database Sub-Directory contains files for every Relation/Object created in the Database
● Datafiles
○ Datafiles are the files for Relations in the base directory
○ Base Directory contains Relations
○ Relations stored on Disk as 1GB segments
○ Each 1GB Datafile is made up of several 8KB Pages that are allocated as needed
○ Segments are automatically added unlike Oracle
32
Base Directory (Database)
1. Create a database with name as: percona
$ psql -c "CREATE DATABASE percona"
2. Get the datid for the database and see if it exists in the base directory
$ psql -c "select datid, datname from pg_stat_database where datname = 'percona'"
33
Base Directory (Schema and Relations)
1. Create a schema named: scott
$ psql -d percona -c "CREATE SCHEMA scott"
2. Create a table named: employee in scott schema
$ psql -d percona -c "CREATE TABLE scott.employee(id int PRIMARY KEY, name varchar(20))"
3. Locate the file created for the table: scott.employee in the base directory
$ psql -d percona -c "select pg_relation_filepath('scott.employee')"
34
Base Directory (Block Size)
1. Check the size of the table in the OS and value of parameter: block_size
$ psql -c "show block_size"
2. INSERT a record in the table and see the size difference
$ psql -d percona -c "INSERT INTO scott.employee VALUES (1, 'frankfurt')"
3. INSERT more records and check the size difference
$ psql -d percona -c "INSERT INTO scott.employee VALUES (generate_series(2,1000), 'junk')"
35
Write-Ahead Logs (WAL)
● WALs
○ When Client commits a transaction, it is written to WAL Segments (on Disk) before a success
message is sent to Client
○ Transaction Journal aka REDO Logs. Similar to InnoDB Buffers in MySQL
○ Written by WAL Writer background process
○ Ensures Durability with fsync and synchronous_commit set to ON and commit_delay set to 0
○ Used during Crash Recovery
○ Size of each WAL is 16MB. Modifiable during Initialization
○ Created in pg_xlog directory until PostgreSQL 9.6Location of WALs is renamed to pg_wal from
PostgreSQL 10
○ WAL Directory exits in Data Directory by default. Can be modified using Symlinks
○ WALs are deleted depending on the parameters : wal_keep_segments and checkpoint_timeout
36
WAL Archiving?
● Archived WALs
○ WALs in pg_wal or pg_xlog are gone after a certain threshold. Archiving ensures recoverability and
helps a Slave catch-up during replication lag
○ Archiving in PostgreSQL can be enabled through parameters : archive_mode and archive_command
○ Ships WALs to safe locations like a Backup Server or Cloud Storage like S3 or Object Store
○ WALs are archived by archiver background process
○ archive_command can be set with the appropriate shell command to archive WALs
● Lets enable Archiving now …
$ psql
ALTER SYSTEM SET archive_mode TO 'ON';
ALTER SYSTEM SET archive_command TO 'cp %p /var/lib/pgsql/archive/%f';
$ pg_ctl -D $PGDATA restart -mf
37
Switch a WAL
● Switch a WAL and see if the WAL is safely archived…
$ psql -c "select pg_switch_wal()"
38
What if Archiving Failed?
If archiving has been enabled and the archive_command failed,
● the WAL segment for which the archiving failed will not be removed from pg_wal or pg_xlog
● an empty wal_file_name.ready file is generated in the archive_status directory
● the background process archiver attempts to archive the failed WAL segment until it succeeds
● there is a chance that the pg_wal directory can get filled and doesn't allow any more connections to
database
39
40
Users and Roles in PostgreSQL
● Database users are different from Operating System users
● Users can be created in SQL using CREATE USER command or using the createuser utility
● Database users are common for all the databases that exists in a cluster
● Roles are created to segregate privileges for access control
41
Users and Roles in PostgreSQL - Demo
● Let us consider creating a read_only and a read_write role in database - percona
● A read_only Role that only has SELECT, USAGE privileges on Schema: percona
○ CREATE ROLE scott_read_only;
GRANT SELECT ON ALL TABLES IN SCHEMA scott TO scott_read_only;
GRANT USAGE ON SCHEMA scott TO scott_read_only;
● A read_write Role that only has SELECT, INSERT, UPDATE, DELETE privileges on Schema: percona
○ CREATE ROLE scott_read_write;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA scott TO
scott_read_write;
GRANT USAGE ON SCHEMA scott TO scott_read_write;
● Create a User and assign either read_only or read_write role
○ CREATE USER pguser WITH LOGIN ENCRYPTED PASSWORD 'pg123pass';
GRANT scott_read_only to pguser;
ALTER USER pguser WITH CONNECTION LIMIT 20;
42
Backups in PostgreSQL
● PostgreSQL provides native backup tools for both Logical and Physical backups.
● Backups similar to mysqldump and Xtrabackup are automatically included with Community PostgreSQL
● Backups like RMAN in Oracle may be achieved using Open Source tools like pgBackRest and pgBarman
○ Logical Backups
■ pg_dump (Both Custom(Compressed and non human-readable) and Plain Backups)
■ pg_restore (To restore the custom backups taken using pg_dump)
■ pg_dumpall (To backup Globals - Users and Roles)
■ Logical Backups cannot be used to setup Replication and perform a PITR
■ You cannot apply WAL’s after restoring a Backup taken using pg_dump
○ Physical Backups
■ pg_basebackup : File System Level & Online Backup, similar to Xtrabackup for MySQL
■ Useful to build Replication and perform PITR
■ This Backup can only use one process and cannot run in parallel
■ Explore Open Source Backup tools like : pgBackRest, pgBarman and WAL-e for more features like Xtrabackup
43
Logical Backup - Demo
● Let’s use pgbench to create some sample tables
$ pgbench -i percona (Initialize)
$ pgbench -T 10 -c 10 -j 2 percona (load some data)
● Use pg_dump to backup the DDL (schema-only) of database: percona
$ pg_dump -s percona -f /tmp/percona_ddl.sql
● Use pg_dump to backup a table (with data) using custom and plain text format
$ pg_dump -Fc —t public.pgbench_history -d percona -f /tmp/pgbench_history
$ pg_dump -t public.pgbench_branches -d percona -f /tmp/pgbench_branches
● Create an another database and restore both the tables using pg_restore and psql
$ psql -c "CREATE DATABASE testdb"
$ pg_restore -t pgbench_history -d testdb /tmp/pgbench_history
$ psql -d testdb -f /tmp/pgbench_branches
44
Globals Backup - pg_dumpall
● pg_dumpall
○ Can dump all the databases of a cluster into a script file
○ Use psql to restore the backup taken using pg_dumpall
○ Can be used to dump global objects such as ROLES and TABLESPACES
● To dump only Globals using pg_dumpall, use the following syntax
$ pg_dumpall -g > /tmp/globals.sql
● To dump all databases (or entire Cluster), use the following syntax
$ pg_dumpall > /tmp/globals.sql
45
Physical Backup - pg_basebackup
● Command line options for pg_basebackup
$ pg_basebackup --help
-D --> Target Location of Backup
-cfast -—> Issues a fast checkpoint to start the backup earlier
-Ft -—> Tar format. Use -Fp for plain
-v --> Print the Backup statistics/progress.
-U --> A User who has Replication Privilege.
-W --> forcefully ask for password of replication User above. (Not mandatory)
-z --> Compresses the Backup
-R --> Creates a recovery.conf file that can be used to setup replication
-P --> Shows the progress of the backup
-l --> Creates a backup_label file
46
Full backup using pg_basebackup
● Run pg_basebackup now ….
$ pg_basebackup -U postgres -p 5432 -h 127.0.0.1 -D /tmp/backup_11052018 -Ft -z -Xs -P -R -l backup_label
47
MVCC
Topics Being Discussed Under MVCC…
● UNDO Management
● Transaction ID’s and PostgreSQL hidden columns
● MVCC and how different is it from other RDBMS
● Why Autovacuum?
● Autovacuum settings
● Tuning Autovacuum
49
UNDO Management - Oracle and PostgreSQL
●Oracle and MySQL have separate storage for UNDO
○ May be limited space
○ ORA-01555 - Snapshot too old
○ ORA-30036: unable to extend segment by 8 in undo tablespace
○ Requires no special care to cleanup bloat
●PostgreSQL
○Maintains UNDO within a table through versions - old and new row versions
○Transaction ID’s are used to identify a version a query can use
○A background process to delete old row versions explicitly
○No additional writes to a separate UNDO storage in the event of writes
○Row locks stored on tuple itself and no separate lock table
50
MVCC
● MVCC: Multi-Version Concurrency Control
● Data consistency
● Prevents viewing inconsistent data
● Readers and Writers do not block each other
● No Rollback segments for UNDO
● UNDO management is within tables
● A tuple contains the minimum and maximum transaction ids that are permitted to see it
● Just like SELECT statements executing WHERE
xmin <= txid_current() AND (xmax = 0 OR txid_current() < xmax)
51
Transaction IDs in PostgreSQL
● Each transaction is allocated a transaction ID (txid)
● txid is a 32-bit unsigned integer
● 4.2 Billion (4,294,967,296) ID’s
- 2.1 Billion in the past are visible and
- 2.1 Billion in the future are not visible
● ID’s - 0, 1 and 2 are reserved
0 - INVALID txid
1 - Used in initialization of Cluster
2 - Frozen txid
● txid is circular
52
Hidden Columns of a Table in PostgreSQL
53
Hidden Columns - xmin and xmax
●xmin: Transaction ID that inserted the tuple
●xmax: txid of the transaction that issued an update/delete on this tuple and not committed yet
or
when the delete/update has been rolled back
and 0 when nothing happened
54
55
Extension: pg_freespacemap
●PostgreSQL uses FSM to choose the page where a tuple can be inserted
● FSM stores free space information of each page
●Using the extension pg_freespacemap, we can see the freespace available inside each page of a table
56
Delete a Record and See What Happens...
Session 1 Session 2
58
Now COMMIT the DELETE and See...
Session 1 Session 2
60
Heap Tuples
● Each Heap tuple in a table contains a HeapTupleHeaderData structure
61
HeapTupleHeaderData Structure
t_xmin: txid of the transaction that inserted this tuple
t_xmax: txid of the transaction that issued an update/delete on this tuple and not committed yet
or
when the delete/update has been rolled back.
and 0 when nothing happened.
t_cid: The position of the SQL command within a transaction that has inserted this tuple, starting from 0. If
5th command of transaction inserted this tuple, cid is set to 4
t_ctid: Contains the block number of the page and offset number of line pointer that points to the tuple
62
Extension: pageinspect
●Included with the contrib module
●Show the contents of a page/block
●2 functions we could use to get tuple level metadata and data
▪ get_raw_page: reads the specified 8KB block
▪ heap_page_item_attrs: shows metadata and data of each tuple
●Create the Extension pageinspect
63
64
65
Delete a Record and Rollback...
SELECT sometimes a Write IO ?
Perform a select that sets the hint bits, after reading the commit log. It is an IO in fact :(
67