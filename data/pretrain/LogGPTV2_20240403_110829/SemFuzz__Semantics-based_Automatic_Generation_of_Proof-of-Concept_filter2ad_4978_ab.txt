patches are designed to address them. For example, a program con-
taining input-validation vulnerabilities [11] accepts unsafe inputs
which may let the program run in an abnormal way. (cid:140)eir patches
are usually in the form of sanitization checks that distinguish the
unsafe inputs and exclude them outside the vulnerable program
code. While serving to (cid:128)x vulnerabilities, patches are also exposing
information of the vulnerabilities at the same time. A(cid:138)ackers with
strong capability on vulnerability analysis may reverse engineer
the patches and even generate exploits for a(cid:138)acks. Note that the
time interval between releasing a patch on developers’ side and
installing the patch on users’ side is 30 days on average [45], which
gives a(cid:138)ackers enough time to impact lots of users. (cid:140)e situation
becomes even worse when exploits could be generated in an au-
tomatic way [28], which lowers the bar of a(cid:138)ackers’ capability on
vulnerability analysis. Fortunately, recent researches show that
only input-validation vulnerabilities (5% of all vulnerabilities [6])
were prone to such problem; and in reality, a(cid:138)ackers can only gener-
ate exploits for a subset of such vulnerabilities due to the limitation
of symbolic execution [50]. However, in this paper, we are surprised
to (cid:128)nd that many vulnerability types are exposed to such problem,
including uncontrolled resource consumption, deadlock, memory
corruption, etc.
CVE. CVE is a reference system sponsored by US-CERT for publicly
known information-security vulnerabilities and exposures [9]. Till
now, it maintained more than 85,000 vulnerabilities. Each year,
around 10,000 new vulnerabilities are added into the CVE system.
Every user can submit descriptions (e.g., the a(cid:130)ected product and
version, the type of vulnerability, etc.) of a previously unknown
vulnerability to CVE. Once the vulnerability is veri(cid:128)ed by so(cid:137)ware
vendors, CVE assigns an ID to the vulnerability for reference. To
maximize the protection of the a(cid:130)ected vendors, CVE will only open
Figure 1: (cid:135)e architecture of SemFuzz.
vulnerability information to the public a(cid:137)er patches are prepared.
Interestingly, in this paper, we (cid:128)nd the descriptions in CVE can
actually help a(cid:138)ackers to quickly generate PoC exploits, rather than
simply serving as a reference system.
Fuzzing. Fuzzing is an automated testing technique that feeds
manipulated inputs (e.g., random ones) to a so(cid:137)ware program [53].
By observing the execution of a program, the tool of fuzzing (also
called fuzzer) reports a vulnerability whenever an abnormal run
(e.g., crash) is captured. Since fuzzing all the inputs of a program is
almost impossible, it is vital to choose a relatively small subset of
inputs that could still trigger the vulnerability. To (cid:128)t this need, a
fuzzer should try to collect various kinds of valuable information
to guide the fuzzing process. Some recent studies observe that the
running status of a program could assist the selection of inputs to
avoid redundant runs [27, 49]. In this paper, we (cid:128)nd that, besides
the running status, the non-code descriptions in CVE and Linux git
logs can also help the fuzzer to avoid unnecessary runs, saving a lot
of time in the fuzzing process. In particular, we use the semantics-
based approach (e.g., NLP) to automatically analyze the description
and extract necessary information for feeding to the fuzzer.
3 SEMFUZZ: DESIGN OVERVIEW
To address the challenges in triggering deep vulnerabilities, our
solution is to fuzz the target program by leveraging semantic in-
formation collected from vulnerability-related text sources. In this
way, we can avoid generating and solving complicated constraints
on inputs and also leverage new knowledge discovered to guide
exploit construction. (cid:140)e procedure is illustrated in Figure 1, which
involves two main stages: (1) semantic information retrieving and
(2) semantics-based fuzzing.
Speci(cid:128)cally, given a vulnerability in the Linux kernel, as docu-
mented by CVE, the (cid:128)rst step is to extract useful semantic informa-
tion about the vulnerability from the descriptions in its CVE and
its corresponding Linux git log. Such information includes a(cid:130)ected
version, vulnerability type, vulnerable functions, critical variables
and system calls. (cid:140)en, SemFuzz loads the target kernel (with the
a(cid:130)ected version) and fuzzes it using elaborately constructed test
cases. (cid:140)e seed input (for the test cases) is (cid:128)rst generated using
the system call information collected from the text descriptions.
During the fuzzing process, SemFuzz monitors the runtime status
of the target kernel and mutates the inputs using the vulnerable
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2141Figure 2: CVE description and Linux git log of CVE-2017-6347.
function and critical variable information, in an a(cid:138)empt to trigger
the vulnerability. Once an anomalous event (de(cid:128)ned corresponding
to the vulnerability type) is observed, an alert will be issued to
indicate the PoC exploit is successfully generated.
Example. Figure 2 presents an example that demonstrates how
SemFuzz works on a given vulnerability (CVE-2017-6347) . (cid:140)e
top-le(cid:137) part of the (cid:128)gure shows the CVE description of the vul-
nerability and the bo(cid:138)om-le(cid:137) part is the content of its Linux git
log, which is linked to the CVE through “patch commit id”. In the
CVE description, “Linux kernel before 4.10.1” indicates the a(cid:130)ected
version. SemFuzz (cid:128)rst starts a virtual machine with a pre-installed
kernel 4.10 (the latest version before 4.10.1) and prepares the fuzzing
environments. Using the concepts (i.e., “MSG MORE”, “loopback”,
“UDP”) discovered from the descriptions, SemFuzz builds the seed
input (system call sequence) “socket(AF INET, SOCK DGRAW,
0), sendto(…, MSG MORE, …, INADDR LOOPBACK, …)” to fuzz
the kernel (Section 4). During this process, our approach contin-
ues to mutate the inputs, based on the information extracted from
the patch (e.g., control-(cid:131)ow graph of the vulnerable function) and
the feedback from monitoring the critical variables (“skb.len”), so
as to reach the vulnerable function (“ip cmsg recv checksum” ) as
mentioned by the CVE, and further trigger the bu(cid:130)er over-read
vulnerability (as described by the vulnerability type). Details of the
mutation strategies are illustrated in Section 5.
Scope and assumption. SemFuzz is designed to automatically
generate a PoC exploit from a Linux kernel patch with the help of
vulnerability descriptions in CVE and Linux git log. Our current
implementation can handle several types of common vulnerabilities,
including use-a(cid:137)er-free, information leak/disclosure, null pointer
dereference, etc. (see Table 1 for the full list). (cid:140)e objective here
is to generate inputs to trigger known vulnerabilities, though the
technique also helps us discover a few similar but unknown (cid:131)aws
(Section 6.5).
4 SEMANTIC INFORMATION RETRIEVING
As mentioned earlier, semantic information (including a(cid:130)ected ver-
sion, vulnerability type, vulnerable functions, critical variables and
system calls) all comes from the text content of CVE and Linux git
log 3. Such content is in natural language, without a well-de(cid:128)ned
structure. (cid:140)erefore, direct extraction of knowledge, through syn-
tactic means such as regular expression based string match, does
not work well, due to the semantic ambiguity of some content com-
ponents. As an example, “read” can be a verb (e.g., in the phrase
“bu(cid:130)er over read”) or a noun (e.g., in the sentence “by a read system
call”). Also, the simple approach (string matching) fails to consider
the dependency relations between words in a sentence. For exam-
ple, in the sentence “the whole skb len is dangerous”, the word “skb”
modi(cid:128)es “len”, indicating that len is a (cid:128)eld in the skb structure.
To accurately recover such target information, we utilize Natural
Language Processing (NLP) techniques, including Part-of-Speech
(POS) Tagging, Phrase Parsing and Syntactic Parsing. Speci(cid:128)cally,
SemFuzz builds a parse tree to recognize the POS tag of each word
and to identify the syntactic clause in a sentence for semantic anal-
ysis. Using these techniques, we show that target vulnerability
information can be accurately identi(cid:128)ed. Below we elaborate how
our approach works.
Generating parse tree. (cid:140)e parse tree is an ordered, rooted tree
that represents the syntactic structure of a sentence according to a
Context-Free Grammar (CoFG) [30]: the root of the parse tree is
labeled as the start of the tree; interior nodes are labeled as non-
terminals (e.g., “VP” for verb phrase, “NP” for noun phrase, etc.),
representing syntactically correlated word sequences or phrases;
and the leaves of the tree are labeled as terminals (e.g., “JJ” for
adjective, “NN” for noun, etc.), representing individual words of
this sentence.
In our research, we use the NLP tool pyStatParser [18] to learn
the Probabilistic Context-Free Grammar (PCoFG) from the Penn
Treebanks [40] and generate a parse tree for each sentence in the
CVE and git log. Figure 2 shows part of a parse tree for a sentence in
the git log of CVE-2017-6347. (cid:140)e root of the tree is “S”, representing
a sentence. (cid:140)e le(cid:137) child of the root is a noun phrase (NP), and
the right child of the root is a verb phrase (VP). We can see that
concatenating the leaves from le(cid:137) to right constitutes the whole
3Contents from CVE and git log are o(cid:137)en complementary. For example, system calls
usually appear only in CVE while critical variables are commonly in git log.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2142sentence “the whole skb len is dangerous”. (cid:140)e parent node of each
leaf (i.e., the word in the sentence) is the word’s POS tag. Using the
parse tree, SemFuzz can understand the meaning of each word and
the relationship between those words. For example, when SemFuzz
checks the noun phrase in a subtree, it will (cid:128)nd that the word skb as
an adjective describes the noun len, which further helps SemFuzz
to (cid:128)nd out that len is a (cid:128)eld of the structure skb (see “Retrieving
critical variables” in this Section). At this time, SemFuzz is ready to
retrieve necessary information for fuzzing.
Retrieving a(cid:130)ected version. A(cid:130)ected version is the Linux kernel
version that contains the given CVE vulnerability, which is nec-
essary for SemFuzz to set up the execution environment. In most
cases, it is in the form of “Linux kernel 4.10.11” or “kernel 4.1”. Note
that such version information cannot be directly acquired from git
log commit id, since it only gives the release candidate version (e.g.,
4.10-rc8) but not the speci(cid:128)c release version (e.g., 4.10.1). To extract
the release version, SemFuzz (cid:128)rst identi(cid:128)es the version number with
the following regular expression: “ˆ\d(\.\d{1,2}){0,2}(\.x){0,1}”,
which could match words like “4.1”, “4.1.1”, “4.x” and “4.1.x”. (cid:140)en
SemFuzz locates the clause containing the version number in the
parse tree and checks whether it also includes the term “Linux” or
“kernel”. If so, SemFuzz views the version number as the a(cid:130)ected
version. Otherwise, the version number may belong to other ap-
plications (e.g., “gcc 4.1”). Sometimes, a preposition can be found
before the version number (e.g., “before 4.10.2”). In this case, we
use the nearest version that meets the condition (e.g., “4.10.1” here).
Note that it is also possible that two version numbers are in the
same clause (e.g., “Linux kernel 4.4.22 through 4.4.28”). In this case,
we choose the latest version number among the two as the a(cid:130)ected
version (i.e., “4.4.27” in this case). In this way, the a(cid:130)ected version
can be successfully identi(cid:128)ed.
Retrieving vulnerability type. Vulnerability type indicates the
anomalous event that SemFuzz needs to observe in the fuzzing
process. Examples of the vulnerability type include “use a(cid:137)er free”,
“double free”, “memory consumption”, etc. To retrieve such infor-
mation, we (cid:128)rst de(cid:128)ne a list of candidate types and try to (cid:128)nd them
in the content of CVE and git log. Speci(cid:128)cally, to de(cid:128)ne the can-
didate types, we use the Common Weakness Enumeration (CWE),
which is a community-developed list of common so(cid:137)ware security
weaknesses [10]. It commonly serves as a baseline for weakness
identi(cid:128)cation, mitigation, and prevention e(cid:130)orts. (cid:140)ere are about
70 types of Linux kernel related CWEs in total, and we select 16
of them as shown in Table 1. (cid:140)en SemFuzz looks for the CWE in
the clauses identi(cid:128)ed by the parse tree. SemFuzz only focuses on
NP (noun phrase) of the parse tree, where CWEs are most likely to
appear. Once the vulnerability type cannot be retrieved from the
parse tree, SemFuzz tries to retrieve National Vulnerability Data-
base (NVD) [17] using the CVE number as the keyword. From the
Technical Details (cid:128)eld in the search results, SemFuzz can get
the vulnerability type.
Retrieving vulnerable functions. A vulnerable function con-
tains vulnerable code, which is the patched function in the git log.
Identifying vulnerable function helps SemFuzz to set up the muta-
tion strategy on inputs, which further increases the performance
of fuzzing. To retrieve such a function, SemFuzz compares the un-
patched version of the Linux kernel with the patched one (indicated
in the git log), and locates the revised functions as the candidate
vulnerable functions. We further locate the real ones based on the
following observation: (1) if a patched function is also mentioned
in the CVE description, this function is more likely to be the vul-
nerable function; (2) if a variable mentioned in the CVE description
or patch description, it is more likely to be related to the vulnera-
ble function. (cid:140)erefore, SemFuzz (cid:128)rstly searches for the name of
patched functions in the parse tree, and treats the one discovered as
the vulnerable function. If nothing is found, SemFuzz compares the
nouns in the parse tree with the variables in the patched functions.
Any match is considered to be the vulnerable function. For example,
in Figure 2, only the ip cmsg recv checksum function is mentioned
in CVE, it is treated as the vulnerable function.
Retrieving critical variables. We de(cid:128)ne a variable as a critical
variable if it meets the following two conditions: (1) it appears in a
(unpatched) vulnerable function; and (2) is also mentioned in the
description of CVE or git log. (cid:140)e critical variable is closely related
to the vulnerability, and may even be the root of the vulnerability. In
the example shown in Figure 2, “skb.len” is the critical variable. To
locate such variables, SemFuzz (cid:128)rst extracts all the variables from
an unpatched vulnerable function, and builds a symbol table which
contains the variables and their type information. (cid:140)en, SemFuzz
checks whether any variable in the symbol table also appears in the
clauses in the parse tree. Note that a variable must be a noun or an
adjective in a phrase. SemFuzz will not consider words with other
POS, such as the preposition or subordinating conjunction. When
a word indicating a structure variable modi(cid:128)es the other word (e.g.,
in “skb.len”, skb modi(cid:128)es len), SemFuzz will search the structure to
(cid:128)nd the most likely (cid:128)eld that matches the modi(cid:128)ed word 4.
Retrieving system calls. As mentioned previously, system calls
play a vital role in our fuzzing of Linux kernel. Most vulnerable
functions inside the kernel are triggered by system calls. One may
consider randomly selecting di(cid:130)erent system calls for fuzzing. How-
ever, considering there are around 400 system calls with more than
1500 parameters, the search space of the call combinations, together
with their parameters, is too large for (cid:128)nding the right input to
trigger the vulnerability. A randomly selected sequence of system
calls (also with randomly selected values of parameters) as inputs
is almost always impossible to trigger the vulnerability. A(cid:137)er man-
ually checking more than 100 CVEs and their corresponding Linux
git logs, we (cid:128)nd that each system call mentioned in CVE or git
log may either trigger the vulnerable function or set up the run-
ning environment that is necessary for triggering the vulnerability.
(cid:140)erefore, correctly retrieving system calls from the description of
CVE or git log will greatly improve the performance of the fuzzing.
One simple idea to retrieve system calls is to get the list of Linux
system call names and look for them in the description. However,