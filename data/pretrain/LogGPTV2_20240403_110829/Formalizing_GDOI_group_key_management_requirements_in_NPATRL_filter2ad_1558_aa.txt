title:Formalizing GDOI group key management requirements in NPATRL
author:Catherine A. Meadows and
Paul F. Syverson
Formalizing GDOI Group Key Management Requirements
in NPATRL ∗
Catherine Meadows, Paul Syverson
Center for High Assurance Computer Systems
Naval Research Laboratory
Washington, DC 20375-5320, USA
{meadows, syverson}@itd.nrl.navy.mil
ABSTRACT
Although there is a substantial amount of work on formal
requirements for two and three-party key distribution pro-
tocols, very little has been done on requirements for group
protocols. However, since the latter have security require-
ments that can diﬀer in important but subtle ways, we be-
lieve that a rigorous expression of these requirements can be
useful in determining whether a given protocol can satisfy
an application’s needs. In this paper we make a ﬁrst step in
providing a formal understanding of security requirements
for group key distribution by using the NPATRL language,
a temporal requirement speciﬁcation language for use with
the NRL Protocol Analyzer. We specify the requirements
for GDOI, a protocol being proposed as an IETF standard,
which we are formally specifying and verifying in coopera-
tion with the MSec working group.
1.
INTRODUCTION
Before we can determine whether or not a security pro-
tocol satisﬁes its requirements, it is necessary to determine
what those requirements are. Requirements are in general
well understood for key distribution protocols involving two
or three parties, and a number of formalizations of such re-
quirements exist. But, they are not as well understood for
group key distribution protocols, where keys may possibly
be distributed among an arbitrarily large group of principals
that may join or leave the group at any time. In this pa-
per we attempt to ﬁll this gap by developing a set of formal
requirements for the GDOI group key management proto-
col [1], a protocol which we have been formally specifying
and verifying as part of a joint eﬀort with the IETF MSec
working group. To do this, we used the NPATRL require-
ments language [16], a temporal language for cryptographic
protocol requirements intended for use with the NRL Pro-
tocol Analyzer [10, 11]. What we found as a result of this
eﬀort was that requirements for group key distribution pro-
∗
supported by ONR.
Cervesato was partially supported by NSF grant INT98-
15731 “Logical Methods for Formal Veriﬁcation of Software”
and NRL under contract N00173-00-C-2086.
and Syverson were
Meadows
This paper is authored by an employee(s) of the United States Government
and is in the public domain.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
ACM 1-58113-385-5/01/0011.
Iliano Cervesato
Advanced Engineering and Sciences Division
ITT Industries, Inc.
Alexandria, VA 22303-1410, USA
PI:EMAIL
tocols were little understood, and that as much or more work
needed to be put into developing a set of formal security re-
quirements as into the formal speciﬁcation of the protocol
itself. Moreover, although these requirements were devel-
oped speciﬁcally for GDOI, we believe that they are generic
enough so that they could be applied to many other group
key management protocols with the appropriate modiﬁca-
tions. The added complexity of the requirements resulting
from the needs of secure group communication has also in-
duced us to develop NPATRL into a full-scale logic that
can be used to reason about requirements as well as specify
them. We describe the logic and show how it can be applied
in simplifying requirements.
A group key distribution protocol is one in which a key is
distributed to members of a group, which may be of arbi-
trary size for some applications. This key may be distributed
by the members of the group themselves (as in the Cliques
protocol [13]), by a centralized key distributor, or by a col-
lection of key distributors. Such protocols may support a
number of diﬀerent applications, such as secure multicast
and secure dynamic coalitions. They usually must support
the joining and leaving of members and possibly other oper-
ations. They may also put restrictions on joining members
having access to old keys or on leaving members having ac-
cess to new keys.
Superﬁcially, group key distribution protocols seem to sat-
isfy requirements very similar to pairwise key distribution
protocols. Both have requirements for secrecy (no one out-
side the group should learn the key), authentication (recip-
ients of the key should know where it came from and what
it was intended for) and freshness (recipients should not be
tricked into accepting an old key). But when we look at
these requirements more closely, especially at secrecy and
freshness, we see some important diﬀerences.
These diﬀerences arise from the fact that the notion of
“session”, which is so important to pairwise protocols, does
not exist, at least not in the same sense, for group protocols.
In a pairwise protocol, a session is determined by two com-
municating principals (possibly three, if a key server is used)
and a key. Keys should not be learned by any other than
the two or three communicating principals, and a key should
be unique to a session. However, group protocols usually do
not have such a notion of individual sessions strongly tied
to principals and keys. Instead the paradigm is of a group
which principals may enter and leave. Keys may be updated
as principals enter or leave a group, in order that incoming
principals have no access to old keys, or outgoing princi-
235pals have no access to new keys. But keys may be updated
for other reasons as well that have nothing to do with the
composition of a group. Thus a freshness requirement that
speciﬁes a unique key per session will have no meaning here.
Likewise, the deﬁnition of ‘secrecy’ also needs to be re-
considered. In a pairwise protocol, all we require is that a
session key only be known to the principals involved in that
session. Whether or not one of the principals is dishonest
and compromises the key is not usually a concern, as long
as it is prevented from threatening the integrity of other ses-
sions. However, in the case of group protocol, admitting a
dishonest member into a group can introduce new risks. Not
only can the member learn the group key while it is present,
but depending upon how the protocol is designed, it may
or may not be able to learn keys used before it joined the
group, or keys generated after it left.
The rest of this paper is organized as follows. In Section
2 we give an overview of the GDOI protocol.
In Section
3 we give an overview of the NPATRL logic, and describe
the normal form for NPATRL requirements for the NRL
Protocol Analyzer.
In Section 4 we present the NPATRL
requirements for GDOI, and we also describe our system
for building secrecy requirements. Section 5 concludes the
paper. In Appendix A we show how we were able to use the
logic to remove recursiveness from the secrecy requirements
and reduce them to normal form.
2. AN OVERVIEW OF GDOI
The GDOI (for Group Domain Of Interpretation) proto-
col [1] is intended to be used with the Internet Key Exchange
(IKE) protocol [7, 5] to allow a Group Controller and Key
Server (GCKS) to distribute keys to members of a group.
Although it does not specify any mechanisms such as key
hierarchies [2] for eﬃciently distributing keys to group mem-
bers or for expelling or adding members, it is designed to be
compatible with the use of such techniques. We have been
working with the IETF MSec Working Group to develop
a set of formal requirements, as well as a formal analysis,
in order to demonstrate the usefulness of formal methods
in the design or cryptographic protocols and in expediting
the standardization process by providing formal evidence of
soundness.
GDOI uses three categories of keys. Category 1 keys are
the pairwise keys shared between the GCKS and potential
members. Category 2 keys are key-encryption keys that are
used to protect the Category 3, or traﬃc encryption keys.
For GDOI, the Category 1 (pairwise) keys are distributed
via IKE Phase 1, which is described in [7, 5]. Key-encryption
keys and traﬃc-encryption keys are created by the GCKS.
The GCKS distributes these keys to the group as a whole
by a groupkey-push message encrypted with the current key-
encryption key. The GCKS maintains a sequence number
SEQ that is incremented every time a new groupkey-push
datagram is sent. The current value of the sequence number
is included in the groupkey-push message. This allows group
members to verify that a message is not a replay of one that
they have already received. The groupkey-push datagram is
also digitally signed by the GCKS using its private key so
that receivers can verify that it was sent by the GCKS and
not by another group member.
The groupkey-push message appears as follows in [1]:
Member
GCKS or Delegate
←− HDR*, SEQ, SA, KD, [CERT,] SIG
The term HDR* indicates that everything is encrypted after
the header, in this case using the current key encryption key.
SEQ is the sequence number, SA the security association for
this key payload, which gives such information as algorithms
used, key lifetimes, etc., and KD the new keying material.
SIG is the digital signature of the message, and CERT is an
optional certiﬁcate for the signature key.
When a principal wants to join a group, it takes part in
a four-message groupkey-pull exchange with the GCKS. All
messages are encrypted and authenticated with the pairwise
key shared between the two principals. In the ﬁrst message,
the principal sends a request to join the group, including the
group identiﬁer and a nonce Ni to help in verifying freshness.
The GCKS responds with its own nonce Nr and with the
group Security Association, which describes the mechanisms
(e.g. encryption algorithms) and policies used by the group.
It holds oﬀ on sending the keying material itself until it
can verify that the request is recent. The group member
responds with a hash (HASH(3)) taken over the two nonces.
The GCKS sends the keying material and the current value
of the sequence number in the last message.
There are also some optional ﬁelds in the last two mes-
sages.
If it is required by the group policy, the member
can send its own part of a Diﬃe-Hellman key exchange in
the third message (KE I), and the GCKS can respond with
its part of the exchange in the fourth message (KE R). The
resulting Diﬃe-Hellman key is used to encrypt the group
keying material by use of exclusive-or. The purpose of this
is to provide perfect forward secrecy: even if a pairwise key
is compromised, the intruder can learn only keys distributed
after the compromise, not those distributed before.
Another option allows the two principals to verify that
each is authorized to act in their respective roles. This is the
proof-of-possession (POP) option, where each party includes
a public key certiﬁcate signed by a relevant authority, and
proves his or her possession of the key by using it to sign
the two nonces that were exchanged earlier in the protocol.
The four messages sent in the groupkey-pull exchange ap-
pear as follows in [1]:
Initiator (Member)
Responder (GCKS)
HDR*, HASH(1), Ni, ID −→
HDR*, HASH(3) [, KE I] −→
←− HDR*, HASH(2), Nr, SA
[,CERT] [,POP I] ←− HDR*, HASH(4), [KE R,] SEQ,
KD [,CERT] [,POP R]
where Ni and Nr are the two nonces, SA is the security associ-
ation, KE I and KE R are the optional Diﬃe-Hellman halves,
CERT, POP I, POP R are are the certiﬁcates and signatures
used in the optional proof-of-possession exchange, and SEQ
and KD are the sequence number and keying material (en-
crypted with the Diﬃe-Hellman key if that is used), respec-
tively. The notation HDR* means, as before, that all informa-
tion after the header is encrypted, this time with the shared
Category 1 key. The hashes in the exchange are computed
over the information sent in the respective messages. More
detail may be found in [1].
Note that in no place does GDOI specify means for elimi-
nating members from the group. This is accomplished using
236something called a key hierarchy. Basically, a key hierarchy
is a tree, the root of which is the actual key used for encryp-
tion. Nodes of the tree encrypt and authenticate the nodes
above it. When a principal is admitted to the group, it is
assigned a leaf of the tree. When it leaves the group, only
the (limited) portion of the tree it needs to compute the
group key ough to be updated. This allows access control
for both entering and leaving members to be enforced in an
eﬃcient way, as well as providing extra security beyond that
provided by the key-encryption key used to encrypt the push
message, since a new key will be protected by the keys below
it in the hierarchy. See [2] for a discussion and overview of
key hierarchies.
3. THE NPATRL LOGIC
3.1 The NRL Protocol Analyzer Model
The NRL Protocol Analyzer, or NPA for short, is a com-
puter-assisted veriﬁcation tool for security protocols which
combines model checking and theorem-proving techniques to
establish authentication and secrecy properties. We present
merely a brief overview here. The interested reader is invited
to consult [10, 11] for further details.
A protocol is modeled as a number of communicating state
machines, each associated with a diﬀerent roles. Their tran-
sitions correspond to the actions that comprise the corre-
sponding role. At run time, roles are executed by honest
principals who faithfully follow the protocol. Several in-
stances can be executing at the same time, and they are
distinguished by means of a unique round number. The
intruder is modeled after the Dolev-Yao adversary [4]. Dis-
honest principals share their keys and other conﬁdential in-
formation with the adversary.
The messages in transit, the information held by each
principal and the intruder, the runs currently being exe-
cuted, and the point that each of them has reached consti-
tute the global state for the NPA. A protocol action imple-
ments a local transformation with global eﬀects on the state.
The initial state is implicit in the protocol speciﬁcation.
In order to verify a protocol, a speciﬁcation is fed into
the run-time system of the NRL Protocol Analyzer together
with the description of a family of states that correspond
to attack situations. The system applies protocol actions
backwards from these target states until it either reaches the
initial state, or it exhausts all possibilities for doing so. As it
regresses back towards the initial state, the NPA maintains
a trace of the sequence of actions that, when executed, lead
to the target state. If the initial state is ever reached, the
resulting trace is a potential attack. If all possibilities are
exhausted, there is no attack of the kind sought. Although
the search space is in general inﬁnite, the NPA incorporates
techniques based on theorem proving that have the eﬀect
of soundly restricting the search to a ﬁnite abstraction, in
most cases.
Traces are sequences of events of the following form:
event(P, Q, T, L, N )
In general, any protocol or intruder state transition may be
assigned an event. The arguments are interpreted as follows:
P is the principal executing the transition, Q is the set of
the other parties involved in it, T is a name that identiﬁes
the transition, L is a set of relevant words, and N is the
local round number of the transition. Typical categories of
events correspond to receiving a message, accepting data as
valid as a result of performing certain checks and sending a
message. For example:
event(user(A, honest), [user(B, H)], initiator accept key, [K], N )
This event describes the execution of a transition called
“initiator accept key” by honest principal A that involves a
key K and some other principal B who may or may not be
honest.
3.2 The NPATRL Syntax
The NRL Protocol Analyzer has successfully analyzed a
number of protocols, sometimes uncovering previously un-
known ﬂaws [10, 11]. But, secrecy and authentication goals
are awkwardly expressed, as states that should not be reach-
able from the initial state. This unintuitive and occasionally
error prone way of writing requirements would have made it
very diﬃcult to use the NPA for large protocols.