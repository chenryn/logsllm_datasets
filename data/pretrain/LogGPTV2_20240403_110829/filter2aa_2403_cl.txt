    time_t unix_time; 
    int i, j; 
    unix_time=time(NULL); 
    localtime_r (&unix_time, &t); 
    for (i=0; i 
struct s 
{ 
    char a; 
    int b; 
    char c; 
    int d; 
}; 
void f(struct s s) 
{ 
    printf ("a=%d; b=%d; c=%d; d=%d\n", s.a, s.b, s.c, s.d); 
}; 
int main()  
{ 
    struct s tmp; 
    tmp.a=1; 
    tmp.b=2; 
    tmp.c=3; 
    tmp.d=4; 
    f(tmp); 
}; 
其中有 2 个单字节型 char 字段和 2 个 4 字节的 int 型变量。 
使用 MSVC 2012（启用选项/GS- /Ob0）编译，可得如下所示的代码。 
指令清单 21.16  MSVC 2012/GS-/O60 
 1 _tmp$ = -16 
 2 _main    PROC 
 3 
 push   ebp 
 4 
 mov    ebp, esp 
 5 
 sub    esp, 16 
 6 
 mov    BYTE PTR _tmp$[ebp], 1   
; set field a 
 7  
 mov    DWORD PTR _tmp$[ebp+4], 2  
; set field b 
 8  
 mov    BYTE PTR _tmp$[ebp+8], 3  
; set field c 
 9  
 mov    DWORD PTR _tmp$[ebp+12], 4  ; set field d 
10 
 sub    esp, 16   
; allocate place for temporary structure 
11 
 mov    eax, esp 
① 更多内容请参见 https://en.wikipedia.org/wiki/Data_structure_alignment。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
326 
逆向工程权威指南（上册） 
12 
 mov    ecx, DWORD PTR _tmp$[ebp]  
; copy our structure to the temporary one 
13 
 mov    DWORD PTR [eax], ecx 
14 
 mov    edx, DWORD PTR _tmp$[ebp+4] 
15 
 mov    DWORD PTR [eax+4], edx 
16 
 mov    ecx, DWORD PTR _tmp$[ebp+8] 
17 
 mov    DWORD PTR [eax+8], ecx 
18 
 mov    edx, DWORD PTR _tmp$[ebp+12] 
19 
 mov    DWORD PTR [eax+12], edx 
20 
 call    _f 
21 
 add    esp, 16 
22 
 xor   eax, eax 
23 
 mov   esp, ebp 
24 
 pop   ebp 
25 
 ret   0 
26 _main   ENDP 
27 
28 _s$ = 8   
; size = 16 
29 ?f@@YAXUs@@@Z PROC  
; f 
30 
 push  ebp 
31 
 mov   ebp, esp 
32 
 mov   eax, DWORD PTR _s$[ebp+12] 
33 
 push  eax 
34 
 movsx ecx, BYTE PTR _s$[ebp+8] 
35 
 push  ecx 
36 
 mov   edx, DWORD PTR _s$[ebp+4] 
37 
 push  edx 
38 
 movsx eax, BYTE PTR _s$[ebp] 
39 
 push  eax 
40 
 push  OFFSET $SG3842 
41 
 call  _printf 
42 
 add   esp, 20 
43 
 pop   ebp 
44 
 ret   0 
45 ?f@@YAXUs@@@Z ENDP ; f 
46 _TEXT     ENDS 
虽然我们在代码里一次性分配了结构体 tmp，并依次给它的四个字段赋值，但是可执行程序的指令有些不同：
它将结构体的指针复制到临时地址（第 10 行指令分配的空间里），然后通过临时的中间变量把结构体的四个值赋
值给临时结构体（第 12～19 行的指令），还把指针也复制出来供 f()调用。这主要是因为编译器无法判断 f()函数是
否会修改结构体的内容。借助中间变量，编译器可以保证 main()函数里 tmp 结构体的值不受被调用方函数的影响。
我们也可以改动源程序、使用指针传递数据，那样编译器生成的汇编指令也基本相同，但是不会再复制数据了。 
另外，这个程序里结构体的字段向 4 字节边界对齐。也就是说它的 char 型数据也和 int 型数据一样占
4 字节存储空间。这主要是为了方便 CPU 从内存读取数据，提高读写和缓存的效率。 
这样做的缺点是浪费存储空间。 
接下来我们启用编译器的/Zp1 (/Zp[n]表示向 n 个字节的边界对齐)选项。 
使用 MSVC 2012(启用/GS- /Zp1 选项)编译上述程序，可得到如下所示的代码。 
指令清单 21.17  MSVC 2012 /GS- /Zp1 
 1 _main    PROC 
 2 
 push   ebp 
 3 
 mov    ebp, esp 
 4 
 sub    esp, 12 
 5 
 mov    BYTE PTR _tmp$[ebp], 1   
; set field a 
 6 
 mov    DWORD PTR _tmp$[ebp+1], 2  
; set field b 
 7 
 mov    BYTE PTR _tmp$[ebp+5], 3  
; set field c 
 8 
 mov    DWORD PTR _tmp$[ebp+6], 4  
; set field d 
 9 
 sub    esp, 12   
; allocate place for temporary structure 
10 
 mov    eax, esp 
11 
 mov    ecx, DWORD PTR _tmp$[ebp]  
; copy 10 bytes 
12 
 mov    DWORD PTR [eax], ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
327 
13 
 mov    edx, DWORD PTR _tmp$[ebp+4] 
14 
 mov    DWORD PTR [eax+4], edx 
15 
 mov    cx, WORD PTR _tmp$[ebp+8] 
16 
 mov    WORD PTR [eax+8], cx 
17 
 call    _f 
18 
 add    esp, 12 
19 
 xor    eax, eax 
20 
 mov    esp, ebp 
21 
 pop    ebp 
22 
 ret    0 
23 _main    ENDP 
24 
25 _TEXT    SEGMENT 
26 _s$ = 8   
; size = 10 
27 ?f@@YAXUs@@@Z PROC  
; f 
28 
 push   ebp 
29 
 mov    ebp, esp 
30 
 mov    eax, DWORD PTR _s$[ebp+6] 
31 
 push   eax 
32 
 movsx  ecx, BYTE PTR _s$[ebp+5] 
33 
 push   ecx 
34 
 mov    edx, DWORD PTR _s$[ebp+1] 
35 
 push   edx 
36 
 movsx  eax, BYTE PTR _s$[ebp] 
37 
 push   eax 
38 
 push   OFFSET $SG3842 
39 
 call   _printf 
40 
 add    esp, 20 
41 
 pop    ebp 
42 
 ret    0 
43 ?f@@YAXUs@@@Z ENDP  
; f 
经过这种处理之后，结构体只占用 10 字节空间，其中的 char 型数据占用 1 字节。这将提高代码的空
间利用效率，不过这样做会同时降低 CPU 的 IO 读取效率。 
main()函数里同样使用临时结构体复制了传入参数的信息，再把临时结构体传递给其他函数。不过这 10 字
节数据并不是一个字段一个字段地、按变量声明的那样分 4 次复制过去的，编译器分配 3 对 MOV 指令复制它
们。为什么不是 4 对赋值指令？这是因为编译器认为，在复制 10 字节数据时，3 个 MOV 指令对的效率，比 4
对 MOV 指令对（按字段赋值）的效率要高。这是编译器常用的优化手段。编译器使用 MOV 指令直接实现(替
代)memcpy()函数的情况十分普遍，主要就是因为在复制小型数据时 memcpy()函数没有 MOV 指令的效率高。
如需了解这方面详细知识，请参见本书 43.1.5 节。 
当然，如果某个结构体被多个源文件、目标文件（object files）调用，那么在编译这些程序时，结构封
装格式和数据对其规范(/Zp[n])必须完全匹配。 
MSVC编译器有指定结构体字段对齐标准的/Zp选项。此外，还可以通过在源文件里设定#pragma pack
的方法来指定这个选项。MSVC和GCC都支持这种代码级的宏指令。
①
① 请参阅https://msdn.microsoft.com/en-us/library/ms253935.aspx 和https://gcc.gnu.org/onlinedocs/gcc/Structure-Packing-Pragmas.html。 
我们回顾一下使用16 位型数据的结构体SYSTEMTIME。编译器如何知道要将它的字段向1 字节边界对齐呢？ 
文件 WinNT.h 有如下声明。 
指令清单 21.18  WinNT.h 
#include "pshpack1.h" 
而且还有下述声明。 
指令清单 21.19  WinNT.h 
#include "pshpack4.h"//默认情况下进行 4 字节边界对齐 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
328 
逆向工程权威指南（上册） 