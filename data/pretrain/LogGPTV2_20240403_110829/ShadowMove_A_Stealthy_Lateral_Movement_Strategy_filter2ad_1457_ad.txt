video of our ShadowMove PoC that leverages FTP and show-
cases the above scenario can be found at [16]. In this demo,
we start ShadowMove PoC manually after it moves to the FTP
server, but we can automatically start the PoC via WinRM, as
demonstrated in Section 4.4.
4.2 FTPShadowMove: Hijacking FTP Ses-
sions
We develop prototype systems that can hijack established
FTP connections on Windows 10 and Ubuntu 18.04. They
work under the default installation of ftp and do not require
any elevated privileges. They allow an attacker to download
and upload ﬁles to a remote FTP server without authentica-
tion.
In the FTP protocol, a client uses one TCP connection to
send commands to a server and receive the corresponding
responses from the server; this connection is called command
channel. The client also uses another TCP connection to send
or receive data such as ﬁle contents; this connection is called
data channel. A client can open multiple data channels for
a given command channel. Authentication is required only
for establishing the command channel, which means a client
does not need to re-authenticate itself for creating a new data
channel. Attackers who have hijacked the command channel
can send a request to the server to open a new data channel
for themselves, thus avoiding any collision with the client
contents that are being transferred on existing data channels.
However, attackers still should adopt a strategy to prevent a
race condition in the shared command channel. Note that one
cannot detect the attack simply by monitoring the creation
of new data channels because the legitimate client may open
new data channels as well.
A FTP client can request for creating a new data channel
in two ways: active FTP and passive FTP. In the active FTP,
the client sends Port command to the server specifying the
port that server needs to connect back to establish the con-
nection. In the passive FTP, the client send PASV command
to server, asking the server to listen to a port that client can
connect in order to create a new data channel. In a nutshell,
the difference between these two modes is with respect to
who initiates the new TCP connection: server in active mode,
and client in passive mode are supposed to connect to the port
speciﬁed by client and server, respectively. In our prototype,
we implemented the passive FTP for demonstration. However,
active FTP can also be implemented with negligible effort.
In passive FTP, the client sends PASV command to the
server, and the server responds back by giving the information
about the endpoint, including IP address and port, that the
client must connect to in order to create a new data channel.
The PASV is documented in RFC-959.
Experiment Setup We deployed a vsftpd server on a
Linux-based virtual private server hosted on the Internet. For
the legitimate client, we used the ftp command and Windows
Explorer to connect to the conﬁgured server. The anony-
mous login is blocked on the server so the client needs to send
a valid username and password to connect to it. As can be
seen in our demo video at [6] and the top half of Figure 7, the
client exchanges several messages with the server in order to
login to the server. After that, we launch FTPShadowMove
under the same user account as the ftp client.
Our FTPShadowMove PoC ﬁrst hijacks the FTP connection
by duplicating the corresponding socket, and then it sends sev-
eral commands to upload a binary ﬁle to a speciﬁc directory
on the server. The speciﬁc commands (such as CWD /files/)
and the server responses are shown in the bottom half of Fig-
ure 7. Speciﬁcally, we can see that the server responded to the
568    29th USENIX Security Symposium
USENIX Association
We ﬁrst launch the SQL client and login to the server. Then
we run our proof-of-concept SQLShadowMove. We conﬁrm
that our proof-of-concept works under the default installation
of Microsoft SQL and normal application settings.
Our SQL hijacking scheme requires several preconditions
to work successfully: (1) the trafﬁc is not encrypted, (2) there
is a folder on the SQL server writable by the SQL server
process, (3) the SQL client has successfully authenticated to
the SQL server, and (4) the SQL client assumes a role that is
allowed to create a table on the SQL server.
The above preconditions can often be satisﬁed. By de-
fault the Microsoft SQL trafﬁc is not encrypted, and the
%TEMP% folder is always writable by any process on the SQL
server [33]. Moreover, the SQL server is almost stateless. The
client and the server uses the TDS (Tabular Data Stream)
Protocol [44] to communicate. Although several ﬁelds in the
TDS header are designed for maintaining some states, they
are optional or are not used by the current implementation.
For example, the SPID ﬁeld in the TDS packet header is the
process ID on the server corresponding to the current connec-
tion. If this ID is strictly checked, the attacker has to somehow
learn it before fabricating a rogue packet. Unfortunately, this
ﬁeld is not required, and a value of 0x0000 is acceptable by
the server. Similarly, two more ﬁelds are deﬁned but ignored:
PacketID and Window.
There are several types of TDS packets. The most relevant
type to our attack is the Batch Client Request type [45], whose
payload can be a Unicode encoding of any SQL statement,
and there is no checksum in the packet header. This makes it
straightforward to capture a real Batch Client Request packet
and then use it as a template to create new rogue requests by
replacing the payload with new Unicode strings; in our case,
such strings correspond to a series of SQL statements.
SQLShadowMove ﬁrst detects a TCP connection created
by the SQL client process and duplicates the corresponding
socket. Then it uses the duplicated socket to send a series of
Batch Client Request packets to the SQL server, and receives
any response packets from the server. The payload of these
Batch Client Request packets consists of SQL scripts that
upload an executable ﬁle to the SQL server and execute it.
Speciﬁcally, the SQL scripts ﬁrst create a table on the SQL
server, then they insert chunks of bytes from the executable
ﬁle into the table. Finally, they invoke the bcp command to
export content of the table to a regular ﬁle on the server, thus
restoring the original executable ﬁle. The pseudo code of the
SQL scripts is shown in Figure 8.
With the executable on the SQL server, our prototype can
further run it through a SQL statement.
To experimentally conﬁrm the feasibility of SQLShadow-
Move, we develop a simple Windows application (named
notepad.exe) to represent a piece of “malware”. This applica-
tion creates a ﬁle (named notepad.txt) in the same folder as
the application executable and writes the current date and time
into that ﬁle. Then we generate SQL scripts to upload the sim-
Figure 7: ShadowMove Injects Commands to Duplicated FTP
Socket in Order to Open a New Data Channel Connection
PASV request and asked FTPShadowMove to connect back
to 54.36.162.222 on port 45307 (i.e., 176∗ 256 + 251). FTP-
ShadowMove then requests to upload a ﬁle named PoC2.txt
on the server. After receiving response code 150 from the
server, FTPShadowMove opened a TCP connection to the
speciﬁed remote endpoint and sent the content of the ﬁle
to the opened connection. The server interpreted the ﬁle as
binary content and stored it in / f iles/PoC2.txt on the server.
Our prototype on Ubuntu 18.04 uses the same FTP com-
mands mentioned above, and a video clip of how it works can
be found at [15].
In our prototype systems, we only used a few FTP com-
mands. However, there are many other FTP commands that
can be utilized by attackers. A complete list of all possible
FTP commands can be found at [5]. Speciﬁcally, The FTP
SITE command allows a user to execute a limited number of
commands via the FTP server on the host machine [53]. No
further authentication is required to execute the command.
The commands that may be executed vary from system to
system, and some useful ones include EXEC and CHMOD. The
EXEC command executes provided executable on the server,
which can be used to start malware. Fortunately, on many
systems the SITE command is not implemented, and it is also
recommended that the SITE command be disabled on FTP
servers if possible.
4.3 SQLShadowMove: Hijacking Microsoft
SQL Sessions
We have conﬁrmed that it is possible to (1) hijack Microsoft
SQL connections to upload malware executables from a SQL
client machine to a SQL server, and (2) execute the malware
on the SQL server.
Experiment Setup. We use Microsoft SQL Server Man-
agement Studio 17 as the legitimate SQL client, and Microsoft
SQL Server version 14.0.1000.169 as the server. We conﬁgure
a user on the SQL server who can create databases and tables.
USENIX Association
29th USENIX Security Symposium    569
Figure 8: SQL Scripts Used by SQLShadowMove
ple “malware” to %T EMP%\notepad.exe on the SQL server
and run it. After we run the proof-of-concept of SQLShadow-
Move, we can visually conﬁrm that ﬁrst notepad.exe appears
on the SQL server, and then notepad.txt appears and its con-
tent matches the time and date on the SQL server. A video
clip of how SQLShadowMove works is available at [17].
Note that in order to run the bcp command or the executable
ﬁle, xp_cmdshell has to be enabled on the SQL server. How-
ever, this is not a hurdle for our prototype because our SQL
scripts enable xp_cmdshell before using it.
4.4 WinRMShadowMove: Remote Execution
Based on WinRM
Windows Remote Management (WinRM) is a feature of
Windows that allows administrators to remotely run manage-
ment scripts [39]. We have conﬁrmed that it is possible to
hijack WinRM sessions to run malware on a remote machine.
We assume that the remote machine is running the WinRM
service and the malware has been uploaded to the remote
machine and it just needs to be launched.
4.4.1 Brief Introduction to the WinRM protocol
WinRM protocol [39, 49, 60] uses HTTP to communicate
with the remote server. To authenticate with remote machine
WinRM has six authentication mechanisms: Basic, Digest,
Kerberos, Negotiate, Certiﬁcate and CredSSP. By default,
it uses Negotiate. A WinRM client ﬁrst authenticates with
the WinRM server. After authentication the WinRM client
receives a shellID from the server, which is used in later com-
munication. Besides shellID there are a few other IDs in every
request message. The messageID is used to pair a response
message with the corresponding request message, and in the
response message, the request messageID is present as the
“RelatesTo” ﬁeld. Figure 9 illustrate the message exchanges
during a WinRM session.
4.4.2 Experiment Setup
To prepare the environment for WinRM hijacking, we ﬁrst
set up WinRM for a normal application scenario on Windows
10, which includes enabling WinRM on both the server and
the client, and adding the server as a trusted host on the client
machine. Then we can use the commandline tool winrs on
the client machine to run commands on the server.
Figure 9: ShadowMove Injects Attack Payload to Execute a
Binary in the Remote System.
However, ShadowMove does not work under the above
default setting because WinRM trafﬁc is encrypted by de-
fault. In order for our WinRMShadowMove PoC to work,
an administrator has to conﬁgure the WinRM server to al-
low basic authentication and to allow transfer of unencrypted
data. We should note that this kind of conﬁguration is not rare
because it can get WinRM to work quickly, and some third
party WinRM client and libraries [1] require unencrypted
payload to communicate with the WinRM server. We use
this conﬁguration in our experiement, and more details of the
conﬁguration can be found in the Appendix (Section A).
4.4.3 Hijacking WinRM
To demonstrate how WinRMShadowMove works, on
the client machine, we run the commandline winrs -un
-r:http://host_ip:5985 -u:user -p:pass cmd, which
will create a new winrs process and open a command shell
to the remote machine. The -un ﬂag speciﬁes that the request
and response messages will not be encrypted. Concurrently
in another terminal, we run WinRMShadowMove.
As the winrs process starts execution, it establishes a TCP
connection to the WinRM server, which is captured by the
Connection Detector. As a result, the Connection Detector
notiﬁes the Socket Duplicator, which ﬁnds and duplicates
the socket inside the winrs process. WinRMShadowMove
ﬁrst runs in the passive mode (i.e., peeking into the incoming
network packets through the duplicated socket) in order to
learn the shellID from the server; then it switches to the active
mode. Here we use the idea discussed in Section 3.6.
Because the WinRM server supports unencrypted payload,
we can construct a plain text HTTP payload and send it to
the server through the TCP socket. For this scheme to work,
the constructed payload must appear legitimate to the server.
After analyzing the HTTP request and response packets us-
ing Wireshark, we found that MessageID is unique for every
payload and it is actually a UUID. Therefore, we use a UUID
generator to generate messageID. Furthermore, we get the
shellID from the authentication response message. Using
these two IDs we can construct a payload to execute an exe-
cutable ﬁle on the remote WinRM server.
570    29th USENIX Security Symposium
USENIX Association
To learn how to construct the payload, we leveraged an
open source WinRM client called winrm4j [2] to communi-
cate with a remote WinRM server, and we use the request
packets generated by winrm4j as the template for our payload.
Figure 10 shows the payload of an example WinRM request.
Figure 10: A WinRM Request for Running malware.exe on a
WinRM Server Whose IP Address is 192.168.56.101
Before sending the payload to remote machine using the
hijacked TCP socket, WinRMShadowMove suspends the le-
gitimate process to prevent it from getting the response mes-
sage from the WinRM server. After getting the response from
the WinRM server it resumes the legitimate client. The time
interval between the suspension and resumption is very short,
so the legitimate client may not notice it.
Figure 9 shows the interleaving of the attack messages with
the legitimate WinRM messages.
5 Evaluation
concepts
of
ShadowMove Proof-of-
5.1 Theoretical Evaluation
As we demonstrate in Section 5.2, ShadowMove cannot
be detected by the current state-of-the-art lateral movement
detectors. In this section, we discuss the underlying reasons
that make such existing solutions ineffective in the detection
of ShadowMove lateral movements.
At the host level, to perform lateral movements, our design
of ShadowMove on Windows relies on a few API functions
that are also commonly used by other benign processes. For
example, as mentioned in [18], many processes on Windows
call OpenProcess with PROCESS_ALL_ACCESS access ﬂag,
which is essentially asking for all possible permissions on the
target process, including permission for duplicating its han-
dles. Moreover, ShadowMove calls WSADuplicateSocket
that also has legitimate use cases such as ofﬂoading sockets to
child processes. Second, it is hard to trace back from a socket
descriptor to all processes that have access to it, because only
the process ID of the owner is recorded in a socket descriptor.
Our current design of ShadowMove on Linux requires
stronger assumptions about the attacker because it relies on
process injection to force victim applications to cooperate,
which makes it less stealthy than its Windows counterpart
(e.g., by monitoring the runtime integrity of the code sec-
tions of benign applications, one can detect the effect of code
injection [31]). Moreover, since our design may modify con-
ﬁguration of the system (e.g., the PATH environment variable
and .bashrc), one could detect it by monitoring such changes.
However, despite these constraints, ShadowMove on Linux is
still a viable attack.
Speciﬁcally, there are practical challenges to detect Shad-
owMove attacks on Linux. To the best of our knowledge,
runtime code integrity monitoring for applications are not
supported in current Linux distributions, and known moni-
toring tools require a hypervisor (e.g., [31]) or special hard-
ware (e.g. [61]). Monitoring conﬁguration changes to detect
ShadowMove is also non-trivial because many benign ap-
plications (such as npm [8]) also make changes to both the
PATH environment variable and .bashrc; a monitoring tool
thus has to check precise conditions (most likely application
speciﬁc) in order to avoid false alarms. As we mention in
Section 3.4.3, we hide our launcher under seemingly benign
paths (such as /home/alice/.npm-packages/bin), which
further raises the bar for detection. This is corroborated by our
experience with several popular host-based IDSes on Linux
today: OSSEC [10], Osquery [12], and Wazuh [7], which fail
to detect ShadowMove using their existing rules. Of course,
one can add new rules to detect speciﬁc instances of Shadow-
Move, but the effort will be non-trivial.
At the network level, ShadowMove tunnels its messages
through existing connections established by benign processes
on both ends. In other words, it injects its messages within
the streams of benign messages send by a benign client to
a remote service. Hence, anomaly-based solutions that de-
tect unusual new connections are oblivious to ShadowMove.
Moreover, ShadowMove begins the lateral movements after
the required authentication steps are performed by the client
and the remote server. This means that ShadowMove oper-