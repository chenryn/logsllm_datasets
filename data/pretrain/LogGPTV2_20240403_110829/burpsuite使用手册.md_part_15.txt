自动生成类似的日志文件，然后调用sqlmap，解决批量检测的问题？答案当然也是肯定的。
在github上，网友difcareer公开了一个Burp插件sqlmap4burp，源文件地址
为：https://github.com/difcareer/sqlmap4burp。我们就基于此插件的功能拓展，来完成自动
化批量SQL测试的功能。
首先，我们来规划一下这个插件的使用场景：
当通过Burp代理的HTTP流量消息都记录在HTTP History 列表中，我们可以批量地选中
多个url，由插件自动生成类似Burp proxy的日志文件，然后调用sqlmap进行检测。
218
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
插件整个使用过程的流程图如下：
上图中浅蓝色背景标示的部分，均为插件所执行的动作。其主要做了这些事情：
1. 判断选中数据是否为空，不为空则获取History列表的已选中数据，无论一条还是多条记
录。
2. 将获取的HTTP消息按照proxy日志的格式，生成日志文件。
3. 调用sqlmap.py脚本，传递生成的日志文件作为参数值进行检测。
明白了这些，接着我们来看proxy的日志文件格式。
219
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
如上图所示，我们通过【Options】>>【Misc】>>【Logging】选中Proxy的Requests选项，
自动弹出保存日志文件的路径和文件名，点击【保存】按钮后，则文件生成并开始记录Proxy
的请求消息。 我们把生成的日志文件用记事本打开后发现，日志格式如下：
220
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
上图一共两条消息，每一条消息内容又包含图中1的头部，图中2的消息内容和图中3的尾部构
成，而图中2的部分即是消息请求的详细内容，则我们按照此格式手工构造日志文件，通过修
改sqlmap4burp的源码（Windows环境下）从而来完成这个功能。
221
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
在源码SnifferContextMenuFactory.java的我们找到了日志获取的入口createMenuItems函数内
部的actionPerformed函数，遂修改此段代码为：
而创建日志头部和尾部的代码主要是拼写同格式的字符串，详细如下：
222
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
同时，修改sqlmap参数的调用方式，修改SqlmapStarter.java的第21行为：
这样，我们可以实现批量操作的功能了。
插件和源码可以通过如下地址进行下载： 插件下载 源码下载
下载完毕后，请参考sqlmap4burp的readme完成基本的配置放可以使用，否则sqlmap调用将
会失败，无法完成批量检测。
插件安装完毕后显示跟原来的插件并无多大区别，如下图是发送多条url到SqlMap的截图：
生成的日志文件的截图：
223
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
sqlmap窗口中一次可以检测多个ur截图：
224
第十八章 使用Burp, Sqlmap进行自动化SQL注入渗透测试
225
第十九章 使用Burp、PhantomJS进行XSS检测
使用Burp、PhantomJS进行XSS检测
XSS（跨站脚本攻击）漏洞是Web应用程序中最常见的漏洞之一，它指的是恶意攻击者往
Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执
行，从而达到恶意攻击用户的特殊目的，比如获取用户的cookie，导航到恶意网站，携带木马
等。根据其触发方式的不同，通常分为反射型XSS、存储型XSS和DOM-base型XSS。漏
洞“注入理论”认为，所有的可输入参数，都是不可信任的。大多数情况下我们说的不可信任的
数据是指来源于HTTP客户端请求的URL参数、form表单、Headers以及Cookies等，但是，
与HTTP客户端请求相对应的，来源于数据库、WebServices、其他的应用接口数据也同样是
不可信的。根据请求参数和响应消息的不同，在XSS检测中使用最多的就是动态检测技术：
以编程的方式，分析响应报文，模拟页面点击、鼠标滚动、DOM 处理、CSS 选择器等操
作，来验证是否存在XSS漏洞。
本章包含的内容有：
1. XSS漏洞的基本原理
2. PhantomJS在XSS检测中的使用原理
3. 使用XSS Validator插件进行XSS漏洞检测
XSS漏洞的基本原理
一般来说，我们可以通过XSS漏洞的表现形式来区分漏洞是反射型、存储型、DOM-base三种
中的哪一种类型。
1. 反射型XSS是指通过给别人发送带有恶意脚本代码参数的URL，当URL地址被打开时，
带有恶意代码参数被HTML解析、执行。它的特点是非持久化，必须用户点击带有特定参
数的链接才能引起。它的连接形式通常如下：
http://localhost/vulnerabilities/xss_r/?name=
其name参数的值为 ，这样的参数值进入程序代码后未做任
何处理，从而被执行。其类似的源代码如下图：
226
第十九章 使用Burp、PhantomJS进行XSS检测
2. 存储型XSS是指恶意脚本代码被存储进数据库，当其他用户正常浏览网页时，站点从数
据库中读取了非法用户存储的非法数据，导致恶意脚本代码被执行。通常代码结构如下
图：
其发生XSS的根本原因是服务器端对写入数据库中的内容未做javascript脚本过滤。
3. DOM-base型XSS是指在前端页面进行DOM操作时，带有恶意代码的片段被HTML解
析、执行，从而导致XSS漏洞。
227
第十九章 使用Burp、PhantomJS进行XSS检测
PhantomJS在XSS检测中的使用原理
PhantomJS的官网地址：http://phantomjs.org，目前最新版本 2.1。它是一个基于WebKit的服
务器端JavaScript API，即在无需浏览器的支持的情况下可实现Web浏览器功能的支持，例如
DOM 处理、JavaScript、CSS选择器、JSON、Canvas和可缩放矢量图形SVG等功能。基于
它具有的功能，通常被用于以下场景：
1. 无需浏览器的Web测试：支持很多测试框架，如YUI Test、Jasmine、WebDriver、
Capybara、QUnit、Mocha
2. 页面自动化操作：使用标准的DOM API或一些JavaScript框架（如jQuery）访问和操作
Web页面。
3. 屏幕捕获：以编程方式抓起CSS、SVG和Canvas等页面内容，即可实现网络爬虫应用。
构建服务端Web图形应用，如截图服务、矢量光栅图应用。
4. 网络监控：自动进行网络性能监控、跟踪页面加载情况以及将相关监控的信息
我们这里使用的主要是利用PhantomJS提供的JavaScript API 调用监控和触发接口，方便地
操作html页面 DOM 节点并模拟用户操作。
在Burp Extender的BApp Store中有一个XSS的检测的插件XSS Validator，就是利用
phantomJS和slimerJS的这些特性，来完成漏洞验证的。下面我们一起来看看它的原理。
在插件安装目录的xss-detector子目录下有一个xss.js的文件，就是phantomJS检测的具体实
现。在代码中我们看到，默认情况下，在本地主机的8093端口启动了一个监听服务，并充当
中间人代理的功能。
228
第十九章 使用Burp、PhantomJS进行XSS检测
当phantomJS服务启动，拦截到请求后即通过API接口请求页面并初始化。在初始化过程中，
设置了启用web安全检测、XSS审计、js操作等。
同时，自定义alert、confirm、prompt处理，记录XSS检测信息。
而对于js事件检测的处理，主要是通过事件分发函数去做的。
229
第十九章 使用Burp、PhantomJS进行XSS检测
理解了这些过程，基本上XSS Validator使用phantomJS对XSS检测的原理已经掌握了。关于
这个原理的类似分析，新浪微博网友@吃瓜群众-Fr1day 的文章说得很清楚，传送门地
址：http://www.tuicool.com/articles/3emU7n
用图例来描述其交互过程，如下图：
在插件处理中几个关键点是需要我们特别关注的：
1. Intruder使用了XSS Validator的payload生成器，将插件与Intruder两者联动合起来。
2. 插件对Intruder发送的消息进行拦截处理，转交phantomjs服务监听端口处理。
230
第十九章 使用Burp、PhantomJS进行XSS检测
3. xss.js请求真实的web服务器，并对消息进行处理，添加Grep Phrase标志
4. Intruder组件根据Grep Phrase标志区分是否存在漏洞
只有理解了phantomJS在检测XSS中的原理，我们才可以在工作中，根据实际情况，对诸如
xss.js文件进行修改，来达到满足我们自己业务需求的目的，而不仅仅拘泥了插件使用的本身
功能。
使用XSS Validator插件进行XSS漏洞检测
上一节我们熟悉了phantomJS检测xss的基本原理，现在我们一起来看看XSS Validator插件的
使用。
XSS Validator插件的安装依旧是可以通过BApp Store安装和手工安装两种方式，手工安装需
要下载源码进行编译，这里提供项目的github地
址，https://github.com/nVisium/xssValidator。安装过程由读者自己完成，如果不明白安装，
请阅读Burp插件使用相关章节。安装完毕后，插件的界面如下图所示：
上图中的左侧为插件运行时需要配置的参数，右侧为验证XSS漏洞的payload。在使用插件
前，有一些关于phantomjs的具体配置需要我们关注。这也是我们在通过应用商店进行插件安
装时，安装界面上提供了的使用说明里的。
231
第十九章 使用Burp、PhantomJS进行XSS检测
在执行Intruder之前，必须通过命令行phantomjs xss.js 启动xss检测服务，也是phantomjs的
服务监听端口。这就使得我们在执行命令行之前，需要将phantomjs安装好，并加入到环境变
量里，否则无法执行。至于phantomjs的安装非常简单，如果你实在不会，建议你阅读此文
章。传递地址：http://www.mincoder.com/article/4795.shtml
安装完之后，执行phantomjs xss.js，控制台界面显示如下，并无其他提示信息。
为了简单地说明使用方法，其他的参数我们都采取默认配置，只修改Grep Phrase和
JavaScript functions两个参数： Grep Phrase修改为xxs_result,作为检测标志和列表头。
JavaScript functions中我们仅使用alert，其他的都暂时去掉。便于我们从控制台观察结果。我
们最终的配置结果如截图所示：
232
第十九章 使用Burp、PhantomJS进行XSS检测
配置完插件之后，我们需要配置Intruder。 首先，指定Grep Phrase的值。
233
第十九章 使用Burp、PhantomJS进行XSS检测
接着，Intruder的payload生成器需要设置为xssValidator的。
234
第十九章 使用Burp、PhantomJS进行XSS检测
如果你如上图中所示的设置，则可以启动Intruder进行检测了。在检测过程中，我们会看到控
制台输出很多日志信息，根据我们的配置，输出alert信息的表示payload检测出存在xss漏
洞。如下图中2所示：
同时，在Intruder的执行界面上，我们可以通过xss_result来查看payload的检测情况，那些响
应报文中存在漏洞标志的均被标出，便于我们对消息的区分和处理。
235
第十九章 使用Burp、PhantomJS进行XSS检测
通过以上内容的学习，我们对PhantomJS 和xssValidator在XSS漏洞检测方面的使用有了更深
入的了解。在实际应用中，由于xss漏洞的复杂性，不是靠插件默认的payload就能检测出来
的，还是需要读者自己去分析和思考，找到具体的解决办法，本章内容仅仅起着抛砖引玉的
作用。文章后的延伸阅读内容，感兴趣的读者可以进一步分析、实践。同时，如果有更好的
此类文章，欢迎发邮件给我PI:EMAIL，我会添加到延伸阅读里。
延伸阅读：1.Server-Side-XSS-Attack-Detection-with-ModSecurity-and-PhantomJS
2.如何使用开源组件解决web应用中的XSS漏洞
236
第二十章 使用Burp 、Android Killer进行安卓app渗透测试
第二十章 使用Burp 、Android Killer进行安
卓app渗透测试
很多人发邮件询问这章什么时候写，在此统一回应一下
平时工作较忙，俗务缠身，暂时没有写的计划
网上相关的文章比较多，可以参考一下
https://www.secpulse.com/archives/4325.html
http://www.freebuf.com/articles/web/29421.html
https://zhuanlan.zhihu.com/p/22302904
237