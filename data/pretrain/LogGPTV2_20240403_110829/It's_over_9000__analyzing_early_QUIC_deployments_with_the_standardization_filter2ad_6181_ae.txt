### TLS Deployments on QUIC and TCP

For targets that did not choose X25519, there is a discrepancy between QUIC and TLS over TCP. Although the vast majority of servers use the offered key exchange group, this highlights the impact of different TLS deployments on a smaller scale.

### Cipher Suite Selection

Our findings for cipher suite selection are similar. Currently, TLS 1.3 allows five cipher suites, but the QUIC draft [43] limits this to four, with only three specified as required. This provides fewer options compared to TLS 1.2. Most servers in both scans chose the TLS_AES_128_GCM_SHA256 cipher suite.

### TLS Extensions and ALPN

QUIC requires a new TLS extension for transmitting transport parameters. We exclude this from our comparison with TLS over TCP to ensure comparability. Additionally, the latest QUIC draft [44] mandates the use of ALPN for application protocol negotiation unless an alternative mechanism is in place. ALPN is the most significant extension missing in TLS over TCP scans without SNI, while it is present in QUIC scans. Google and its edge deployments are the primary cause of this observation.

The mismatch in SNI scans is due to the absence of the SNI extension in TLS over TCP scans. According to RFC6066 [1], servers must return the extension if they used the name for certificate selection. The RFC does not prohibit sending the extension even if the client's value is not used. Given that a target on TCP port 443 likely serves multiple domains, we assume that this gap in the standard leads to the observed discrepancy.

### Key Takeaways

We find that TLS deployments on QUIC-enabled hosts are very similar to those over TCP, despite QUIC often being based on new, dedicated implementations or forked TLS libraries. For most QUIC deployments, the corresponding TLS over TCP deployments use TLS 1.3 with similar configurations. Major differences can be attributed to new requirements by QUIC. As QUIC mandates TLS 1.3 and most QUIC deployments are by large providers, the overall state appears solid. We expect more diversity in deployments as adoption increases.

### QUIC Configurations and Setups

We evaluate the previously omitted and newly specified TLS extension for transmitting transport parameters [43] in more detail. Some transport parameters are session-specific (e.g., stateless reset token), while others are implementation- or configuration-specific [43] and can be used to analyze deployments. We ignore options containing tokens or connection IDs. In total, we observe 45 different configurations, which are published with our results (see Section 1). Figure 9 shows the usage of each configuration based on targets and ASes.

Most scanned domains are within Cloudflare (AS13335), sharing the same parameter configuration (0 in Figure 9). This configuration is used by targets in 15 ASes, primarily consisting of default values from draft 34 [22], with an initial stream data of 1,048,576 B and a much larger initial max data. Twenty configurations are used by a single AS each, and in 50% of the observed ASes, only one configuration is seen. Specific values reveal that while default values are commonly used for active conn id limit, max ack delay, and ack delay exponent, some parameters vary widely. For example, the QUIC specification sets the default max UDP payload size to the maximum UDP payload size (65,527 B). This value is used by 12 configurations, but 12 further configurations use 1,500 B, and 10 different values are observed overall. Data transmission-related parameters vary by several orders of magnitude, with some deployments promoting 8,192 B of initial max data and others supporting up to 16,777,216 B. Initial stream data values range from 32 k to 10 M, though these can be updated during the connection.

### Edge Points of Presence (POPs)

Interestingly, targets in 42.2% of ASes use three configurations. To better understand these results, we include HTTP data collected by the QScanner. The HTTP HEAD request was successful for:
- IPv4 with SNI: 12.6 M (95.8%)
- IPv4 without SNI: 104 k (70.4%)
- IPv6 with SNI: 12.3 M (96.1%)
- IPv6 without SNI: 36 k (62.2%)

We collected over 8,000 different HTTP headers, focusing on the HTTP Server header. Despite recommendations to reduce information in the Server header, it can provide hints about implementations. Besides the most frequent value, Cloudflare, some values are seen from targets in various ASes.

Table 6 shows the value "proxygen-bolt" from targets in 2,244 ASes, indicating the use of Facebook's HTTP Library Proxygen [12], which provides QUIC based on the mvfst [11] implementation. This value is from successful connections with 50,000 IP addresses, of which we could associate 7,500 addresses with a domain and scan with SNI. 95% of these domains contain either fbcdn.net or cdninstagram.com. They share four combinations of QUIC transport parameters not seen with other HTTP server values. Two configurations are used only by targets in the Facebook AS (AS32934), allowing a high initial value for all stream data parameters (10,485,760 B) and differing only in the max_udp_payload_size parameter (1,500 B and 1,404 B).

The remaining two configurations are responsible for two out of three configurations seen in 42.2% of ASes. They announce both payload sizes but differ in the initial value for all stream data parameters (67,584 B). These are likely edge POPs part of the Facebook CDN, providing content close to the user [27]. Thus, while these deployments are not hosted directly on Facebook ASes, they are likely set up by Facebook as a large provider.

The value "gvs 1.0" behaves similarly, with 8,500 IP addresses in 1,700 ASes. While we cannot associate a domain with most of these IP addresses, they all use the same set of transport parameters not seen with other HTTP Server header values. This value is the third configuration seen alongside the values above for many ASes. 14% of these IP addresses are part of Google (AS15169), indicating a similar deployment with edge POPs.

This shows that results about QUIC deployment can be misleading if additional information is neglected. Combining unique data from the QScanner allows us to investigate QUIC in more detail during its early stages. These insights show that the current deployment status is mainly dominated by large providers, not only in their own networks but also due to POPs in external networks.

### Diversity within Single ASes

Single ASes do not necessarily need to provide a unique setup. For example, cloud providers may show a variety of configurations due to individual customer setups. The highest number of different configurations in a single AS is 11, seen at Google (AS15169), Amazon (AS16509), and DigitalOcean (AS14061). All three offer cloud computing services, allowing customer setups. The configurations differ in most values, with single configurations dominating for most hosts and the remaining ones rarely seen. HTTP Server header values reveal a large diversity, with 44 different values at Google, including different NGINX versions or Python/3.7 aiohttp/3.7.2. For Amazon, only 12 values are seen, and 9 for DigitalOcean. While some deployments and server values are set up by the provider, others imply individual setups within the cloud computing services.

### Additional HTTP Server Values

Besides the earlier mentioned values, the third most common value is "LiteSpeed" (see Table 6), indicating a deployment based on LSQUIC [30]. It is used by 24,000 domains in combination with 1,300 IP addresses and 240 ASes. Most targets share the same configuration, with no relation between domains or ASes. Thus, in our data, it is the most seen implementation not deployed by a single large provider.

The value "nginx" is present for 15,000 targets and as a substring of the HTTP Server header value for 16,000 targets on 7,800 scanned IP addresses, in combination with 17 different transport parameter combinations. Besides "nginx," "yunjiasu-nginx" is used by 15,000 targets, and the remaining values include a variety of different versions between 1.13.12 and 1.20.0. This reflects that, besides the official QUIC branch from NGINX starting after the release of version 1.17.8 [35], others have based HTTP/3 implementations on NGINX forks, e.g., Cloudflare [15].

Searching for further implementations listed by the QUIC working group [17] reveals a few hits, e.g., "h2o" used by 12 targets in five ASes, including different commit hashes. Most implementations are either infrequently used or not revealed by the header value.

### Key Takeaways

Using the QUIC-specific Transport Parameter TLS extension allows us to analyze and identify deployments in more detail. Due to the variety of used configurations and individual parameters, we can identify deployments located in multiple ASes as edge POPs of large providers, similar to the work from Gigis et al. [16] but based on a different methodology. Taking these edge POPs into account, the deployment state of QUIC is even more focused towards large providers than shown in Section 4, solely based on originating ASes.

Furthermore, we argue that advertised transport parameters can be used to analyze deployments and their differences in more detail in the future. The availability of server preferences for relevant parameters regarding connection properties allows us to analyze setups and the impact of different parameters on QUIC connections.

### Related Work

After the initial announcement of QUIC by Google in 2013 [23] and their initial study on Internet-wide deployment [29], little has been done to analyze QUIC in its early stages. To our knowledge, the only large-scale study investigating QUIC deployment on the Internet is from RÃ¼th et al. [39], who focused on the deployment and usage of Google QUIC versions in 2016 and early 2017. The IETF drafts were in an early stage and not considered. They discovered a steady growth of IP addresses with gQUIC support and an increasing traffic share, mainly driven by Google and Akamai. Our work is similar in parts of our approach and overall goals but differs by focusing on IETF QUIC versions, including IPv6, and investigating additional sources, namely HTTPS DNS RR and HTTP ALT-SVC Header, to discover QUIC-capable targets. The inclusion of these sources reveals additional QUIC deployments not found by the implemented ZMap module. Furthermore, our stateful approach allows the analysis of deployment characteristics like QUIC transport parameters and TLS configurations.

A subsequent study from Piraux et al. [38] introduces a test suite that scans targets on the Internet and evaluates the specification conformity of QUIC implementations. They determine that 10% to 20% of responses contain errors, similar to our SNI stateful scans, but do not further present the distribution of error messages. In comparison, we investigate deployments in more detail, analyzing their current state independent of used implementations.

A recent study from Trevisan et al. [45] investigates HTTP/3 adoption based on the HTTP ALT-SVC Header extracted from the open-source HTTPArchive Dataset, finding only 14,000 websites with HTTP/3 support in December 2020. The remaining study focuses on a performance comparison between HTTP versions of found sites. Using active scans, we find that the current QUIC and HTTP/3 support is larger by several orders of magnitude.

A longitudinal analysis of general TLS deployment can be found in Kotzias et al. [28], showing the overall reaction to known high-profile attacks (e.g., Heartbleed) and the ecosystem's quick response. The deployment of TLS 1.3 throughout its standardization and early years was analyzed by Holz et al. [19]. Similar to our work, they find that new transport protocols are deployed quickly, mainly due to large providers activating server-side support by default (e.g., Cloudflare) and client-side support (e.g., Google and Mozilla). Based on their results, 75% of domains with TLS 1.3 support are hosted at Cloudflare. They focus solely on TLS 1.3 over TCP and do not investigate QUIC. Our QScanner can be used to perform similar analyses for QUIC.

Gigis et al. [16] recently reported on hypergiants' off-nets and their development over several years, using TLS certificates and HTTP header information from Internet-wide scans to identify edge POPs of large providers. They report extensive usage of edge POPs by large providers, e.g., Google and Facebook. Using QUIC transport parameters in combination with HTTP Server header values, we independently identify similar deployments for QUIC.

Additional related work covering QUIC mainly focuses on security aspects [13, 31], the diversity due to the rapidly evolving draft [38] and variety of available implementations [33], and performance analyses including comparisons to TLS and/or TCP [25, 26, 34, 38, 46].

### Discussion and Conclusion

As a foundation for future research on the newly standardized fundamental network protocol QUIC, our work provides a versatile toolset to identify QUIC-capable hosts and their properties. We presented an extensive analysis of different methodologies to detect the QUIC deployment state on the Internet shortly before standardization. We verified that IETF QUIC gained significant traction before its final standardization, and we showed widespread QUIC deployment. Based on ZMap scans, HTTPS DNS RRs, and HTTP ALT-SVC Header, we find deployments in more than 4,700 ASes and can conduct successful QUIC handshakes with more than 26 million targets using the QScanner. We argue that QUIC has the potential to change the Internet ecosystem drastically and highlight its importance for future Internet studies.