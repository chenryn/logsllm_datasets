Anti-Forensics
and Anti-Anti-Forensics
by Michael Perklin
(But not Anti-Anti-Anti-Forensics)
(...or Uncle-Forensics...)
Outline
Techniques that can complicate digital-forensic 
examinations
Methodologies to mitigate these techniques
Other digital complications
This talk will deal with a variety of complications that can arise in a 
digital investigation
Michael Perklin
Digital Forensic Examiner
Corporate Investigator
Computer Programmer
eDiscovery Consultant
Basically - A computer geek + legal support hybrid
Techniques in this talk...
Most of these techniques are NOT sophisticated
Each one can easily be defeated by an investigator
The goal of these techniques is to add man-hours/$$$
High costs increase chances of settlement
Wiping a hard drive, or using steganography will not be discussed 
because they’ve been around for decades
Typical Methodologies:
Copy First, Ask Questions Later
Typically Law Enforcement
Assess relevance ﬁrst, copy relevant
All types of investigators
Remote analysis of live system,
copy targeted evidence only.
Enterprise, Private if they have help
Methodology #1 is typically used by police
Methodology #2 is used by all types of digital investigators
Methodology #3 is typically used by Enterprise companies on their 
employees
“Assess Relevance” method typically searches an HDD for one of a 
few speciﬁc keywords. If found, the HDD is imaged for further analysis.
Typical Workﬂow
Process 
Data For 
Analysis
“Separate 
Wheat from 
Chaff”
Analyze 
Data for 
Relevance
Prepare 
Report on 
Findings
Archive Data 
For Future
Create 
Working 
Copy
Create Working Copy
- Image the HDD
- Copy ﬁles remotely for analysis
Process Data
- Hash ﬁles
- Analyze Signatures
Separate Wheat
- De-NIST or De-NSRL
- Known File Filter (KFF)
- Keyword Searches
Analyze For Relevance
- Good hits or false positives?
- Look at photos, read documents, analyze spreadsheets
- Export ﬁles for native analysis
- Bookmark, Flag, or otherwise list useful things
Prepare Report
- Include thumbnails, snapshots, or snippets
- Write-up procedures (Copy/Paste from similar case to speed up workload)
- Attach appendices, lists, etc
Archive Data
- Store images on central NAS
- Shelve HDDs for future use
Classic Anti-Forensic 
Techniques
HDD Scrubbing / File Wiping
Overwriting areas of disk over and over
Encryption
TrueCrypt, PGP, etc.
Physical Destruction
These 3 methods are fairly common amongst people like us
In reality, these are used rarely.
Each method implies guilt, and can be dealt with without tech.
Running Tallies on Slides
Tally of # Hours Wasted will be at bottom left
Tally of # Dollars Spent will be at bottom right
I will assume an average rate of $300/hr for the
digital investigator’s time
Red tallies indicate costs for current technique
Green tallies show total costs to-date
 0 hours
 $0
$300/hr rate is fairly average for junior-intermediate investigators
#1. Create a Working Copy
Confounding the ﬁrst stage of the process
“Separate 
Wheat from 
Chaff”
Analyze Data 
for Relevance
Prepare Report 
on Findings
Archive Data 
For Future
Create 
Working Copy
Process Data 
For Analysis
 0 hours
 $0
Copy each device for later analysis
...or copy the ﬁle from the remote live machine
AF Technique #1
Data Saturation
Let’s start simple:
Own a LOT of media
Stop throwing out devices
Use each device/container regularly if possible
Investigators will need to go through everything
 8 hours
 $2,400
Cell Phones
Laptops
Old HDDs
USB Keys
Burned CD/DVDs
Mitigating
Data Saturation
Parallelize the acquisition process
More drive duplicators = less total time
The limit is your budget.
Use their hardware against them:
Boot from a CD, plug in a USB HDD, mount’n’copy
The limit is the # of their machines
 8 hours
 $2,400
Incidentally, the # of their machines is typically equal to the number of 
machines you need to copy!!
 8 hours
 $2,400
9 Machines imaging in parallel to an external USB drive.
Total time = time to image 1 drive.
AF Technique #2
Non-Standard RAID
Common RAIDs share stripe patterns, block sizes, 
and other parameters
This hack is simple: 
Use uncommon settings
Stripe size, stripe order, Endianness
Use uncommon hardware RAID controllers
(HP Smart Array P420)
Use ﬁrmware with poor Linux support.
Don’t ﬂash that BIOS!
 8 hours
 $2,400
Non-standard RAID controllers sometimes allow you to choose arbitrary 
blocksizes
and other parameters that would otherwise be taken care of automatically.
Less damaging for Public sector, can be very expensive for Private sector
Disk Order (0, 1, 2, 3?     3, 2, 1, 0?)
Left Synchronous? Right Synchronous?
Left Asynchronous? Right Asynchronous?
Big Endian? Little Endian?
Scott Moulton’s DEFCON17 talk about using porn to ﬁx 
RAID explains this problem well
 16 hours
 $4,800
There are so many parameters used by RAID controllers that it can be quite 
time consuming to try all combinations in order to ﬁgure out the exact settings 
used by the original device
Mitigating
Non-Standard RAIDs
De-RAID volumes on attacker’s own system
Use boot discs
Their hardware reassembles it for you
If RAID controller doesn’t support Linux, use Windows
Windows-Live CDs work well
Image the volume, not the HDDs
 16 hours
 $4,800
By recombining the RAID array on the attackerʼs system, their hardware does all the 
heavy lifting for you.
All you need to worry about is copying the data to your drive.
#2. Process Data for Analysis
Confounding the processing stage
Process Data 
For Analysis
“Separate 
Wheat from 
Chaff”
Analyze Data 
for Relevance
Prepare Report 
on Findings
Archive Data 
For Future
Create 
Working Copy
 16 hours
 $4,800
This stage involves:
Hashing
Full-Text Indexing
FileType identiﬁcation
etc.
JPG File Internals
First 4 bytes:    ÿØÿà
4 bytes in hex: FF D8 FF E0
ZIP Files: PK
EXE Files: MZ
PDF Files: PDF
AF Technique #3
File Signature Masking
File Signatures are identiﬁed by ﬁle headers/footers
“Hollow Out” a ﬁle and store your data inside
Encode data and paste in middle of a binary ﬁle
Transmogrify does this for you
 0 hours
 $0
File signatures are identiﬁed by the ﬁrst few bytes
This makes it easy to fake a ﬁle match
File Signatures (cont.)
EXE ﬁles begin with 
bytes MZ
It’s dead easy to make 
ﬁles match their 
extensions
 16 hours
 $4,800
This TXT ﬁle shows how easy it is to make a ﬁle match its extension 
despite
having contents that are vastly different
Even though this txt ﬁle was created in notepad, it is recognized as a 
‘Windows Executable’
because the ﬁrst two characters are MZ.
Mitigating File Signature Masking
Use “Fuzzy Hashing” to identify potentially interesting 
ﬁles
Fuzzy Hashing identiﬁes similar but not identical ﬁles
Chances are, attacker chose a ﬁle from his own 
system to copy/hollow out
“Why does this ﬁle have a 90% match with 
notepad.exe?”
Analyze all “Recent” lists of common apps for curious 
entries
“Why was rundll.dll recently opened in Wordpad?”
 16 hours
 $4,800
Fuzzy Hashing and Recent File analysis can mitigate false ﬁle signatures 
fairly easily by asking simple questions
Confounding the sifting process
Process Data 
For Analysis
#3. Separate Wheat from 
Chaff
“Separate 
Wheat from 
Chaff”
Analyze Data 
for Relevance
Prepare Report 
on Findings
Archive Data 
For Future
Create 
Working Copy
 16 hours
 $4,800
Data Deduplication
Date Filtering
NSRL
Background: NSRL
National Software Reference Library (NSRL)
Published by National Institute of Standards and 
Technology (NIST)
Huge databases of hash values
Every dll, exe, hlp, pdf, dat other ﬁle installed by every 
commercial installer
Used by investigators to ﬁlter “typical” stuff
This process is sometimes called De-NISTing
 16 hours
 $4,800
De-NISTing a drive may bring 120GB of data down to about 700MB
Only user-created content will remain
Hundreds of gigabytes can be reduced to a few hundred megabytes
AF Technique #4
NSRL Scrubbing
Modify all of your system and program ﬁles
Modify a string or other part of the ﬁle
For EXEs and DLLs: recalculate and update the 
embedded CRCs
Turn off Data Execution Prevention (DEP) so Windows 
continues to run
NSRL will no longer match anything
 12 hours
 $3,600
Most ﬁles wonʼt need a lot of work: simply change a character and youʼre 
good.
Executable ﬁles (DLLs, EXEs) have embedded Cyclical Redundancy Checks 
(CRCs) that make sure they are still good
You will need to recalculate the CRCs for these ﬁles in order to change them 
in a way that will keep them running
Data Execution 
Prevention
Validates system ﬁles,
Stops unsafe code,
Protects integrity
boot.ini policy_level 
/noexecute=AlwaysOff
 28 hours
 $8,400
DEP will stop Windows from running if it sees parts of Windows being 
modiﬁed.
So turn it off! You can then run your modiﬁed version of Windows without 
restriction.
Mitigating
NSRL Scrubbing
Search, don’t ﬁlter
Identify useful ﬁles rather than eliminating useless ﬁles
Use a Whitelist approach instead of a Blacklist
 28 hours
 $8,400
Whitelist approach looks for things that match
Blacklist approach suppresses things that donʼt
Use a whitelist approach
Background: Histograms
Investigators use histograms to identify which dates 
have higher-than-average activity
e.g. VPN Logins, Firewall alerts, even FileCreated times
 28 hours
 $8,400
AF Technique #5
Scrambled MACE Times
All ﬁles store multiple timestamps
Modiﬁed - the last write
Accessed - the last read
Created  - the ﬁle’s birthday
Entry - the last time the MFT entry was updated
Randomize timestamp of every ﬁle
(Timestomp does this)
Randomize BIOS time regularly via daemon/service
Disable LastAccess updates in registry
 16 hours
 $4,800
Most of an investigatorʼs “Timeline Assembly” revolve around MACE times
MACE times can be modiﬁed easily
A malicious person can modify EVERY MACE time across an entire system
LastAccess time can be 
disabled in two ways:
In Windows Registry key: 
HKEY_LOCAL_MACHINE\SYSTEM
\CurrentControlSet\Control\FileSystem
Set DWORD NtfsDisableLastAccessUpdate = 1
Open Command Prompt as Administrator:
FSUTIL behavior set disablelastaccess 1
 44 hours
 $13,200
Two ways to suppress “Last Accessed Time” updates
Mitigating
Scrambled MAC Times
Ignore dates on all metadata
Look for logﬁles that write dates as strings
Logs are written sequentially
BIOS time changes can be identiﬁed
Identify sets of similar times
Infer mini timelines for each set