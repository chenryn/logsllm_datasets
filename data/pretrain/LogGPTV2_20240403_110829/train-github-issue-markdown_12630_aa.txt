### Bug report
**Bug summary**
Bad resolution and placement of colorbar background.
The background of the colorbar looks ugly rectangular and displaced.  
(There is even one more thing which is the font of the first tick label which
is different, but this is not what is considered here).
**Code for reproduction**
    import matplotlib.pyplot as plt
    plt.scatter([1,2,3],[3,4,5], c=[5,6,7])
    plt.style.use("stas.mplstyle")
    plt.gcf().set_size_inches(8 / 2.54 , 6 / 2.54)
    plt.colorbar(extend="max")
    plt.savefig("plot.pdf")
**Result Plot**
![image](https://user-
images.githubusercontent.com/998651/47909348-f19ba880-de8f-11e8-8e94-849082dc3166.png)
**Matplotlib version**
  * Operating system: Arch Linux 64 Bit
  * Matplotlib version: '3.0.0rc1+687.ga43fd8592.dirty'
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: Python 3.7.0 (default, Sep 15 2018, 19:13:07)
Installed via pacaur on from AUR: matplotlib-git
**stas.mplstyle**
    ### MATPLOTLIBRC FORMAT
    # This is a sample matplotlib configuration file - you can find a copy
    # of it on your system in
    # site-packages/matplotlib/mpl-data/matplotlibrc.  If you edit it
    # there, please note that it will be overwritten in your next install.
    # If you want to keep a permanent local copy that will not be
    # overwritten, place it in the following location:
    # unix/linux:
    #     $HOME/.config/matplotlib/matplotlibrc or
    #     $XDG_CONFIG_HOME/matplotlib/matplotlibrc (if $XDG_CONFIG_HOME is set)
    # other platforms:
    #     $HOME/.matplotlib/matplotlibrc
    #
    # See http://matplotlib.org/users/customizing.html#the-matplotlibrc-file for
    # more details on the paths which are checked for the configuration file.
    #
    # This file is best viewed in a editor which supports python mode
    # syntax highlighting. Blank lines, or lines starting with a comment
    # symbol, are ignored, as are trailing comments.  Other lines must
    # have the format
    #    key : val # optional comment
    #
    # Colors: for the color values below, you can either use - a
    # matplotlib color string, such as r, k, or b - an rgb tuple, such as
    # (1.0, 0.5, 0.0) - a hex string, such as ff00ff - a scalar
    # grayscale intensity such as 0.75 - a legal html color name, e.g., red,
    # blue, darkslategray
    #### CONFIGURATION BEGINS HERE
    # The default backend; one of GTK GTKAgg GTKCairo GTK3Agg GTK3Cairo
    # MacOSX Qt4Agg Qt5Agg TkAgg WX WXAgg Agg Cairo GDK PS PDF SVG
    # Template.
    # You can also deploy your own backend outside of matplotlib by
    # referring to the module name (which must be in the PYTHONPATH) as
    # 'module://my_backend'.
    # backend      : Cairo
    # If you are using the Qt4Agg backend, you can choose here
    # to use the PyQt4 bindings or the newer PySide bindings to
    # the underlying Qt4 toolkit.
    #backend.qt4 : PyQt4        # PyQt4 | PySide
    # Note that this can be overridden by the environment variable
    # QT_API used by Enthought Tool Suite (ETS); valid values are
    # "pyqt" and "pyside".  The "pyqt" setting has the side effect of
    # forcing the use of Version 2 API for QString and QVariant.
    # The port to use for the web server in the WebAgg backend.
    # webagg.port : 8888
    # If webagg.port is unavailable, a number of other random ports will
    # be tried until one that is available is found.
    # webagg.port_retries : 50
    # When True, open the webbrowser to the plot that is shown
    # webagg.open_in_browser : True
    # When True, the figures rendered in the nbagg backend are created with
    # a transparent background.
    # nbagg.transparent : False
    # if you are running pyplot inside a GUI and your backend choice
    # conflicts, we will automatically try to find a compatible one for
    # you if backend_fallback is True
    #backend_fallback: True
    #interactive  : False
    #toolbar      : toolbar2   # None | toolbar2  ("classic" is deprecated)
    #timezone     : UTC        # a pytz timezone string, e.g., US/Central or Europe/Paris
    # Where your matplotlib data lives if you installed to a non-default
    # location.  This is where the matplotlib fonts, bitmaps, etc reside
    #datapath : /home/jdhunter/mpldata
    ### LINES
    # See http://matplotlib.org/api/artist_api.html#module-matplotlib.lines for more
    # information on line properties.
    lines.linewidth   : 0.5     # line width in points
    lines.linestyle   : None       # solid line
    lines.color       : 0072bd    # has no affect on plot(); see axes.prop_cycle
    lines.marker      : None    # the default marker
    lines.markeredgewidth  : 1.0     # the line width around the marker symbol
    lines.markersize  : 3            # markersize, in points
    #lines.dash_joinstyle : miter        # miter|round|bevel
    #lines.dash_capstyle : butt          # butt|round|projecting
    #lines.solid_joinstyle : miter       # miter|round|bevel
    lines.solid_capstyle : projecting   # butt|round|projecting
    lines.antialiased : True         # render lines in antialiased (no jaggies)
    # The three standard dash patterns.  These are scaled by the linewidth.
    #lines.dashed_pattern : 2.8, 1.2
    #lines.dashdot_pattern : 4.8, 1.2, 0.8, 1.2
    #lines.dotted_pattern : 1.1, 1.1
    lines.scale_dashes : False
    markers.fillstyle: full # full|left|right|bottom|top|none
    ### PATCHES
    # Patches are graphical objects that fill 2D space, like polygons or
    # circles.  See
    # http://matplotlib.org/api/artist_api.html#module-matplotlib.patches
    # information on patch properties
    #patch.linewidth        : 1        # edge width in points.
    #patch.facecolor        : C0
    #patch.edgecolor        : black   # if forced, or patch is not filled
    #patch.force_edgecolor  : False   # True to always use edgecolor
    #patch.antialiased      : True    # render patches in antialiased (no jaggies)
    ### HATCHES
    #hatch.color     : k
    #hatch.linewidth : 1.0
    ### Boxplot
    #boxplot.notch       : False
    #boxplot.vertical    : True
    #boxplot.whiskers    : 1.5
    #boxplot.bootstrap   : None
    #boxplot.patchartist : False
    #boxplot.showmeans   : False
    #boxplot.showcaps    : True
    #boxplot.showbox     : True
    #boxplot.showfliers  : True
    #boxplot.meanline    : False
    #boxplot.flierprops.color           : 'k'
    #boxplot.flierprops.marker          : 'o'
    #boxplot.flierprops.markerfacecolor : 'none'
    #boxplot.flierprops.markeredgecolor : 'k'
    #boxplot.flierprops.markersize      : 6
    #boxplot.flierprops.linestyle       : 'none'
    #boxplot.flierprops.linewidth       : 1.0
    #boxplot.boxprops.color     : 'k'
    #boxplot.boxprops.linewidth : 1.0
    #boxplot.boxprops.linestyle : '-'
    #boxplot.whiskerprops.color     : 'k'
    #boxplot.whiskerprops.linewidth : 1.0
    #boxplot.whiskerprops.linestyle : '-'
    #boxplot.capprops.color     : 'k'
    #boxplot.capprops.linewidth : 1.0
    #boxplot.capprops.linestyle : '-'
    #boxplot.medianprops.color     : 'C1'
    #boxplot.medianprops.linewidth : 1.0
    #boxplot.medianprops.linestyle : '-'
    #boxplot.meanprops.color           : 'C2'
    #boxplot.meanprops.marker          : '^'
    #boxplot.meanprops.markerfacecolor : 'C2'
    #boxplot.meanprops.markeredgecolor : 'C2'
    #boxplot.meanprops.markersize      :  6
    #boxplot.meanprops.linestyle       : 'none'
    #boxplot.meanprops.linewidth       : 1.0
    ### FONT
    #
    # font properties used by text.Text.  See
    # http://matplotlib.org/api/font_manager_api.html for more
    # information on font properties.  The 6 font properties used for font
    # matching are given below with their default values.
    #
    # The font.family property has five values: 'serif' (e.g., Times),
    # 'sans-serif' (e.g., Helvetica), 'cursive' (e.g., Zapf-Chancery),
    # 'fantasy' (e.g., Western), and 'monospace' (e.g., Courier).  Each of
    # these font families has a default list of font names in decreasing
    # order of priority associated with them.  When text.usetex is False,
    # font.family may also be one or more concrete font names.
    #
    # The font.style property has three values: normal (or roman), italic
    # or oblique.  The oblique style will be used for italic, if it is not
    # present.
    #
    # The font.variant property has two values: normal or small-caps.  For
    # TrueType fonts, which are scalable fonts, small-caps is equivalent
    # to using a font size of 'smaller', or about 83%% of the current font
    # size.
    #
    # The font.weight property has effectively 13 values: normal, bold,
    # bolder, lighter, 100, 200, 300, ..., 900.  Normal is the same as
    # 400, and bold is 700.  bolder and lighter are relative values with
    # respect to the current weight.