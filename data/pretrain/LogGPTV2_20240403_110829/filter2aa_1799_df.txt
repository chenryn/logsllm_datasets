are currently supported, which are sent over the TaskHostSendResponseReceiveCommand RPC API:
I 
Stopping the host
I 
Starting a task
I 
Stopping a task
I 
Terminating a task
All task-based commands are internally implemented by a generic COM task library, and they 
essentially result in the creation and destruction of COM components. In particular, hosted tasks 
are COM objects that inherit from the ITaskHandler interface. The latter exposes only four required 
methods, which correspond to the different task’s state transitions: Start, Stop, Pause, and Resume. 
When UBPM sends the command to start a task to its client host process, the latter (Taskhostw.exe) 
creates a new thread for the task. The new task worker thread uses the CoCreateInstance func-
tion to create an instance of the ITaskHandler COM object representing the task and calls its Start 
method. UBPM knows exactly which CLSID (class unique ID) identifies a particular task: The task’s 
CLSID is stored by the Task store in the task’s configuration and is specified at task registration time. 
Additionally, hosted tasks use the functions exposed by the ITaskHandlerStatus COM interface to 
notify UBPM of their current execution state. The interface uses RPCs to call UbpmReportTaskStatus 
and report the new state back to UBPM.
484 
CHAPTER 10 Management, diagnostics, and tracing
EXPERIMENT: Witnessing a COM-hosted task
In this experiment, you witness how the task host client process loads the COM server DLL that 
implements the task. For this experiment, you need the Debugging tools installed on your 
system. (You can find the Debugging tools as part of the Windows SDK, which is available at the 
https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/.) You will enable the 
task start’s debugger breakpoint by following these steps: 
1.
You need to set up Windbg as the default post-mortem debugger. (You can skip this
step if you have connected a kernel debugger to the target system.) To do that, open an
administrative command prompt and type the following commands:
cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64"
windbg.exe /I
Note that C:\Program Files (x86)\Windows Kits\10\Debuggers\x64 is the path of the
Debugging tools, which can change depending on the debugger’s version and the
setup program.
2.
Windbg should run and show the following message, confirming the success of
the operation:
3.
After you click on the OK button, WinDbg should close automatically. 
4.
Open the Task Scheduler applet (by typing taskschd.msc in the command prompt).
5.
Note that unless you have a kernel debugger attached, you can’t enable the initial task’s
breakpoint on noninteractive tasks; otherwise, you won’t be able to interact with the
debugger window, which will be spawned in another noninteractive session.
6.
Looking at the various tasks (refer to the previous experiment, “Explore a task’s XML
descriptor” for further details), you should find an interactive COM task (named
CacheTask) under the \Microsoft\Windows\Wininet path. Remember that the task’s
Actions page should show Custom Handler; otherwise the task is not COM task.
7. 
Open the Registry Editor (by typing regedit in the command prompt window) and
navigate to the following registry key: HKLM\SOFTWARE\Microsoft\Windows NT\
CurrentVersion\Schedule.
8.
Right-click the Schedule key and create a new registry value by selecting Multi-String
Value from the New menu.
EXPERIMENT: Witnessing a COM-hosted task
In this experiment, you witness how the task host client process loads the COM server DLL that 
implements the task. For this experiment, you need the Debugging tools installed on your 
system. (You can find the Debugging tools as part of the Windows SDK, which is available at the 
https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/.) You will enable the 
https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/.) You will enable the 
https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/
task start’s debugger breakpoint by following these steps: 
1.
You need to set up Windbg as the default post-mortem debugger. (You can skip this 
step if you have connected a kernel debugger to the target system.) To do that, open an 
administrative command prompt and type the following commands:
cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64"
windbg.exe /I
Note that C:\Program Files (x86)\Windows Kits\10\Debuggers\x64 is the path of the 
Debugging tools, which can change depending on the debugger’s version and the 
setup program. 
2.
Windbg should run and show the following message, confirming the success of 
the operation:
3.
After you click on the OK button, WinDbg should close automatically. 
OK button, WinDbg should close automatically. 
OK
4.
Open the Task Scheduler applet (by typing taskschd.msc in the command prompt). 
5.
Note that unless you have a kernel debugger attached, you can’t enable the initial task’s 
breakpoint on noninteractive tasks; otherwise, you won’t be able to interact with the 
debugger window, which will be spawned in another noninteractive session. 
6.
Looking at the various tasks (refer to the previous experiment, “Explore a task’s XML 
descriptor” for further details), you should find an interactive COM task (named 
CacheTask) under the \Microsoft\Windows\Wininet path. Remember that the task’s 
Actions page should show Custom Handler; otherwise the task is not COM task.
7.
Open the Registry Editor (by typing regedit in the command prompt window) and 
navigate to the following registry key: HKLM\SOFTWARE\Microsoft\Windows NT\
CurrentVersion\Schedule. 
8.
Right-click the Schedule key and create a new registry value by selecting Multi-String
Value from the New menu. 
CHAPTER 10 Management, diagnostics, and tracing
485
9.
Name the new registry value as EnableDebuggerBreakForTaskStart. To enable the initial
task breakpoint, you should insert the full path of the task. In this case, the full path is
\Microsoft\Windows\Wininet\CacheTask. In the previous experiment, the task path has
been referred as the task’s URI.
10. Close the Registry Editor and switch back to the Task Scheduler.
11. Right-click the CacheTask task and select Run.
12. If you have configured everything correctly, a new WinDbg window should appear.
13. Configure the symbols used by the debugger by selecting the Symbol File Path item
from the File menu and by inserting a valid path to the Windows symbol server (see
https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/ microsoft-
public-symbols for more details).
14. You should be able to peek at the call stack of the Taskhostw.exe process just before
it was interrupted using the k command:
0:000> k
 # Child-SP
RetAddr
Call Site 
00 000000a7`01a7f610 00007ff6`0b0337a8 taskhostw!ComTaskMgrBase::[ComTaskMgr]::Sta
rtComTask+0x2c4 
01 000000a7`01a7f960 00007ff6`0b033621 taskhostw!StartComTask+0x58 
02 000000a7`01a7f9d0 00007ff6`0b033191 taskhostw!UbpmTaskHostWaitForCommands+0x2d1 
3 000000a7`01a7fb00 00007ff6`0b035659 taskhostw!wWinMain+0xc1 
04 000000a7`01a7fb60 00007ffa`39487bd4 taskhostw!__wmainCRTStartup+0x1c9 
05 000000a7`01a7fc20 00007ffa`39aeced1 KERNEL32!BaseThreadInitThunk+0x14 
06 000000a7`01a7fc50 00000000`00000000 ntdll!RtlUserThreadStart+0x21
15. The stack shows that the task host client has just been spawned by UBPM and has re-
ceived the Start command requesting to start a task.
16. In the Windbg console, insert the ~. command and press Enter. Note the current execut-
ing thread ID.
17. You should now put a breakpoint on the CoCreateInstance COM API and resume the
execution, using the following commands:
bp combase!CoCreateInstance
g
18. After the debugger breaks, again insert the ~. command in the Windbg console, press
Enter, and note that the thread ID has completely changed.
19. This demonstrates that the task host client has created a new thread for executing the
task entry point. The documented CoCreateInstance function is used for creating a single
COM object of the class associated with a particular CLSID, specified as a parameter. Two
GUIDs are interesting for this experiment: the GUID of the COM class that represents the
Task and the interface ID of the interface implemented by the COM object.
9.
Name the new registry value as EnableDebuggerBreakForTaskStart. To enable the initial 
task breakpoint, you should insert the full path of the task. In this case, the full path is 
\Microsoft\Windows\Wininet\CacheTask. In the previous experiment, the task path has 
been referred as the task’s URI. 
10. Close the Registry Editor and switch back to the Task Scheduler. 
11. Right-click the CacheTask task and select Run. 
12. If you have configured everything correctly, a new WinDbg window should appear. 
13. Configure the symbols used by the debugger by selecting the Symbol File Path item 
from the File menu and by inserting a valid path to the Windows symbol server (see 
https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/ microsoft-
public-symbols for more details). 
14. You should be able to peek at the call stack of the Taskhostw.exe process just before 
it was interrupted using the k command:
k command:
k
0:000> k
 # Child-SP
RetAddr
Call Site
00 000000a7`01a7f610 00007ff6`0b0337a8 taskhostw!ComTaskMgrBase::[ComTaskMgr]::Sta
rtComTask+0x2c4
01 000000a7`01a7f960 00007ff6`0b033621 taskhostw!StartComTask+0x58
02 000000a7`01a7f9d0 00007ff6`0b033191 taskhostw!UbpmTaskHostWaitForCommands+0x2d1
3 000000a7`01a7fb00 00007ff6`0b035659 taskhostw!wWinMain+0xc1
04 000000a7`01a7fb60 00007ffa`39487bd4 taskhostw!__wmainCRTStartup+0x1c9
05 000000a7`01a7fc20 00007ffa`39aeced1 KERNEL32!BaseThreadInitThunk+0x14
06 000000a7`01a7fc50 00000000`00000000 ntdll!RtlUserThreadStart+0x21
15. The stack shows that the task host client has just been spawned by UBPM and has re-
ceived the Start command requesting to start a task. 
16. In the Windbg console, insert the ~. command and press Enter. Note the current execut-
ing thread ID. 
17. You should now put a breakpoint on the CoCreateInstance COM API and resume the 
execution, using the following commands:
bp combase!CoCreateInstance
g
18. After the debugger breaks, again insert the ~. command in the Windbg console, press 
Enter, and note that the thread ID has completely changed. 
19. This demonstrates that the task host client has created a new thread for executing the 
task entry point. The documented CoCreateInstance function is used for creating a single
COM object of the class associated with a particular CLSID, specified as a parameter. Two
GUIDs are interesting for this experiment: the GUID of the COM class that represents the
Task and the interface ID of the interface implemented by the COM object. 
486 
CHAPTER 10 Management, diagnostics, and tracing
20. In 64-bit systems, the calling convention defines that the first four function parameters
are passed through registers, so it is easy to extract those GUIDs:
0:004> dt combase!CLSID @rcx
{0358b920-0ac7-461f-98f4-58e32cd89148}
+0x000 Data1
: 0x358b920 
+0x004 Data2
: 0xac7 
+0x006 Data3
: 0x461f 
+0x008 Data4
: [8]  "???" 
0:004> dt combase!IID @r9 
 {839d7762-5121-4009-9234-4f0d19394f04} 
   +0x000 Data1            : 0x839d7762 
+0x004 Data2
: 0x5121 
+0x006 Data3
: 0x4009 
+0x008 Data4
: [8]  "???"
As you can see from the preceding output, the COM server CLSID is {0358b920-0ac7-461f-
98f4-58e32cd89148}. You can verify that it corresponds to the GUID of the only COM action 
located in the XML descriptor of the “CacheTask” task (see the previous experiment for details). 
The requested interface ID is “{839d7762-5121-4009-9234-4f0d19394f04}”, which correspond to 
the GUID of the COM task handler action interface (ITaskHandler).
Task Scheduler COM interfaces
As we have discussed in the previous section, a COM task should adhere to a well-defined interface, 
which is used by UBPM to manage the state transition of the task. While UBPM decides when to start 
the task and manages all of its state, all the other interfaces used to register, remove, or just manually 
start and stop a task are implemented by the Task Scheduler in its client-side DLL (Taskschd.dll). 
ITaskService is the central interface by which clients can connect to the Task Scheduler and perform 
multiple operations, like enumerate registered tasks; get an instance of the Task store (represented by 
the ITaskFolder COM interface); and enable, disable, delete, or register a task and all of its associated 
triggers and actions (by using the ITaskDefinition COM interface). When a client application invokes for 
the first time a Task Scheduler APIs through COM, the system loads the Task Scheduler client-side DLL 
(Taskschd.dll) into the client process’s address space (as dictated by the COM contract: Task Scheduler 
COM objects live in an in-proc COM server). The COM APIs are implemented by routing requests 
through RPC calls into the Task Scheduler service, which processes each request and forwards it to 
UBPM if needed. The Task Scheduler COM architecture allows users to interact with it via scripting 
languages like PowerShell (through the ScheduledTasks cmdlet) or VBScript.
Windows Management Instrumentation
Windows Management Instrumentation (WMI) is an implementation of Web-Based Enterprise 
Management (WBEM), a standard that the Distributed Management Task Force (DMTF—an indus-
try consortium) defines. The WBEM standard encompasses the design of an extensible enterprise 
20. In 64-bit systems, the calling convention defines that the first four function parameters 
are passed through registers, so it is easy to extract those GUIDs:
0:004> dt combase!CLSID @rcx
{0358b920-0ac7-461f-98f4-58e32cd89148}
+0x000 Data1
: 0x358b920
+0x004 Data2
: 0xac7
+0x006 Data3
: 0x461f
+0x008 Data4
: [8]  "???"
0:004> dt combase!IID @r9
 {839d7762-5121-4009-9234-4f0d19394f04}
   +0x000 Data1            : 0x839d7762
+0x004 Data2
: 0x5121
+0x006 Data3
: 0x4009
+0x008 Data4
: [8]  "???"
As you can see from the preceding output, the COM server CLSID is {0358b920-0ac7-461f-
98f4-58e32cd89148}. You can verify that it corresponds to the GUID of the only COM action 
located in the XML descriptor of the “CacheTask” task (see the previous experiment for details). 
The requested interface ID is “{839d7762-5121-4009-9234-4f0d19394f04}”, which correspond to 
the GUID of the COM task handler action interface (ITaskHandler).
ITaskHandler).
ITaskHandler
CHAPTER 10 Management, diagnostics, and tracing
487
data-collection and data-management facility that has the flexibility and extensibility required to man-
age local and remote systems that comprise arbitrary components.
WMI architecture
WMI consists of four main components, as shown in Figure 10-27: management applications, WMI 
infrastructure, providers, and managed objects. Management applications are Windows applications 
that access and display or process data about managed objects. A simple example of a management 
application is a performance tool replacement that relies on WMI rather than the Performance API to 
obtain performance information. A more complex example is an enterprise-management tool that lets 
administrators perform automated inventories of the software and hardware configuration of every 
computer in their enterprise.
Database
application
Windows Management API
CIM repository
CIM Object Manager (CIMOM)
ODBC
SNM
provider
SNMP
objects
Windows
provider
Windows
objects
Registry
provider
Registry
objects
VbScript/
Perl
ActiveX