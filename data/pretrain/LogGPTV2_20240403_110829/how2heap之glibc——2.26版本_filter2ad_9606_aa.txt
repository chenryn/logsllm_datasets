# how2heap之glibc——2.26版本
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
#  0x00 前言
学习pwn绕不开Linux的堆，找到了有人翻译的shellphish团队在Github上开源的堆漏洞教程。
[how2heap总结-上](https://www.anquanke.com/post/id/86808)
[how2heap总结-下](https://www.anquanke.com/post/id/86809)
里面有github地址以及《Glibc内存管理-Ptmalloc2源码分析》的地址，我就不贴了，另外安利一本《程序员的自我修养》
本文是我在学习how2heap遇到的一些坑，做了一些整理，最主要的是因为glibc-2.26之后引入了tcache机制，导致刚开始学习时，发现运行结果和说好的不一样，N脸懵逼。
## 0x01 准备工作
how2heap的代码要使用不同的版本glibc进行实验，因此提供了glibc_run.sh，使用方法
`glibc_run.sh  `
``栗子：
`glibc_run.sh 2.25 ./glibc_2.25/unsafe_unlink`
不过由于还要使用gdb调试，就不能依赖glibc_run.sh脚本了，看下脚本执行的内容，栗子执行的命令就是`LD_PRELOAD="./glibc_versions/libc-2.25.so"
./glibc_versions/ld-2.25.so ./glibc_2.25/unsafe_unlink`
使用不同的libc可以通过环境变量LD_PRELOAD解决，在gdb中可以通过命令`set exec-wrapper env
"LD_PRELOAD=./libc-2.25.so"`解决，现在就剩下链接器了，在看雪上看到有人分享了Python脚本修改程序使用的ld
[关于不同版本glibc强行加载的方法（附上代码）](https://bbs.pediy.com/thread-225849.htm)
## 0x02 tcache
这里只是初步展示下tcache，一个长度为64的链表数组，每个链表的长度最大是7，链表类似于fastbin，通过fd连起来，不过fastbin中fd指针是指向下一个chunk的首地址，而tcache是指向下一个chunk的fd的地址。
这里以64位为例，tcache是个结构体，里面有count数组和指针数组，长度都是64，根据下标一一对应，结构体的声明是参考的:
    /* We overlay this structure on the user-data portion of a chunk when the chunk is stored in the per-thread cache.  */
    typedef struct tcache_entry
    {
      struct tcache_entry *next;
    } tcache_entry;
    /* There is one of these for each thread, which contains the per-thread cache (hence "tcache_perthread_struct").  Keeping overall size low is mildly important.  Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons.  */
    typedef struct tcache_perthread_struct
    {
      char counts[TCACHE_MAX_BINS];
      tcache_entry *entries[TCACHE_MAX_BINS];
    } tcache_perthread_struct;
    static __thread tcache_perthread_struct *tcache = NULL;
数组长度是64，存储的chunk大小是从32~1040字节，递增16字节，所以是数组下标从0开始，那么对应chunk大小就是(下标+2)*16
这个缓存链表类似于fastbin，每组链表节点长度为7，对应chunk释放后加入链表时，对应的in_use状态不变（状态位在内存相邻的下一个chunksizi字段上），因此内存地址上连续的两个chunk都释放了，也是不会合并的。
链表是通过fd指针相连的，fd也是指向另一个chunk的fd指针的地址，顺序是先进后出。
进行两个实验，实验一是为了证明数组大小，对应的chunk范围以及chunk是先进后出，实验二是为了证明链表长度最大是7。
实验一：
chunk大小范围是32-1040
因此申请的最小chunk设为16，最大chunk设为1024
a[0]=malloc(16)
a[1]=malloc(16)
a[2]=malloc(1024)
再按顺序释放a[0]、a[2]、a[1]，然后再申请一次a[3]=malloc(16)
申请过3个内存之后的heap
现在释放a[0]和a[2]，tcache也是申请的一块堆内存上存放的，因此查看申请的第一块内存的数据，tcache的chunk是从0x602000开始的,前16字节是chunk头，之后的64字节是count数组，用来记录对应下标链表的个数，之后的每8个字节是一个链表，总体是链表数组，长度是64。count数组的最低位和最高位分别记数了1，链表里存放的是a[0]和a[2]的fd指针的地址。
现在再释放a[1]，tcache链表数组的第一个链表会指向a[1]的fd指针，也就是0x6020a0，而a[1]的fd存储的是a[0]的fd地址，并且count数组对应的值会变为2（对应count数组中的下标为0）
之后再去申请16字节的内存，那么会从tcahce中获取，按照FILO的原则，a[1]对应的chunk会先被选中，因此a[4]与a[1]的值是一样的
实验二：
申请a[0]~a[8]一共9个chunk，依次释放，会发现前7个在tcache中，后两个会在fastbin上。
先释放a[0]~a[6]
查看tcache，现在链表长度是7，fastbins中没有chunk
现在继续释放a[7]，tcache是没有变化的，a[7]进入fastbins
继续释放a[8]，a[8]也加入了fastbins中
接着看下a[7],a[8]的fd是指向的chunk头还是fd
fastbins中的单链表还是指向的chunk头地址。
最后再申请一个16字节内存，应该是从tcahce中获取
## 0x03 first_fit
由于how2heap的源代码内还有说明，为了调试看的简单点，做了一些删减
    /*first_fit.c*/
    #include
    #include
    int main()
    {
            char *a = malloc(512);
            char *b = malloc(256);
            char *c;
            printf("1st malloc(512) %pn",a);
            printf("2nd malloc(256) %pn",b);
            strcpy(a,"this is A!");
            free(a);
            printf("free an");
            c = malloc(500);
            printf("3rd malloc(500) %pn",c);
            strcpy(c,"this is C!");
            printf("copy string 'this is c' to cn");
            printf("c(%p):%sn",c,c);
            printf("a(%p):%sn",a,a);
            return 0;
    }
编译：`gcc -g -no-pie -o first_fit first_fit.c`，加入源码信息，关闭PIE。
使用不同版本glibc，通过chaneld脚本修改程序使用的ld，这些是实验前的准备工作，之后不提了。
first_fit是先申请了a,b两块内存，b是为了防止a释放后被top
chunk合并，释放了a之后，再去申请c，c的大小小于a，那么c对应内存的首地址与a的一致，如果a存在UAF漏洞，就可以做一些事了（我不知道是什么事），在glibc-2.26之前，a的大小已经是大于fastbin了，所以释放后是进入unsorted
bin，那么在申请c的时候，会将a的chunk做切割，然后分配给c，因此c与a的首地址相同，而在glibc-2.26的版本中，a是进入了tcache，只有chunk大小完全匹配，才会将a分配给c。
## 0x04 fastbin_dup
删减过的代码
    #include 
    #include 
    int main()
    {
            int *a = malloc(0x20);
            int *b = malloc(0x20);
            int *c = malloc(0x20);
            fprintf(stderr, "1st malloc(8): %pn", a);
            fprintf(stderr, "2nd malloc(8): %pn", b);
            fprintf(stderr, "3rd malloc(8): %pn", c);
            free(a);