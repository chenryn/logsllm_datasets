next node in the overlay is 22, and hence node 17 knows that 22 is
responsible for identiﬁer 20. The Chord algorithm routes packets
around the overlay “circle”, progressively getting closer to the de-
sired overlay node. O(m) overlay nodes are visited. Typically, the
hash functions used to map nodes to identiﬁers do not attempt to
map two geographically close nodes to nearby identiﬁers. Hence,
it is often the case that two nodes with consecutive identiﬁers are
geographically distant from one another within the network.
The Chord service is robust to changes in overlay membership,
and each node’s list is adjusted to account for nodes leaving and
joining the overlay such that the above properties continue to hold.
SOS uses the IP address of the target (i.e., web server) as the
identiﬁer to which the hash function is applied. Thus, Chord can
direct trafﬁc from any node in the overlay to the node that the iden-
tiﬁer is mapped to, by applying the hash function to the target’s
IP address. This node, where Chord delivers the packet, is not the
target, nor is it necessarily the secret servlet. It is simply a unique
node that will be eventually be reached, after up to m = log N
overlay hops, regardless of the entry point. This node is called the
beacon, since it is to this node that packets destined for the target
are ﬁrst guided. Chord therefore provides a robust and reliable,
while relatively unpredictable for an adversary, means of routing
packets from an overlay access point to one of several beacons.
Finally, the secret servlet uses Chord to periodically inform the
beacon of the secret servlet’s identity. Should the servlet for a target
change, the beacon will ﬁnd out as soon as the new servlet sends
an advertisement. If the old beacon for a target drops out of the
overlay, Chord will route the advertisements to a node closest to
the hash of the target’s identiﬁer. Such a node will know that it is
the new beacon because Chord will not be able to further forward
the advertisement. By providing only the beacon with the identity
of the secret servlet, trafﬁc can be delivered from any ﬁrewall to
the target by traveling across the overlay to the beacon, then from
the beacon to the secret servlet, and ﬁnally from the secret servlet,
through the ﬁltering router, to the target. This allows the overlay
to scale for arbitrarily large numbers of overlay nodes and target
sites. Unfortunately, this also increases the communication latency,
since trafﬁc to the target must be redirected several times across the
Internet. If the overlay only serves a small number of target sites,
regular routing protocols may be sufﬁcient.
2.2 Graphic Turing Tests
In order to prevent automated attacks from breaching the overlay,
a CAPTCHA [37] visual test is implemented at the entry point of
the overlay to verify the presence of a human user. CAPTCHA
(Completely Automated Public Turing test to Tell Computers and
Humans Apart) is a program that can generate and grade tests that
most humans can pass, but automated programs cannot.
The particular CAPTCHA realization we use is GIMPY, which
concatenates an arbitrary sequence of letters to form a word and
renders a distorted image of the word as shown in Figure 3. GIMPY
relies on the fact that humans can read the words within the dis-
torted image and current automated tools cannot. The human au-
thenticates himself/herself by entering as ASCII text the same se-
quence of letters as what appears in the image. Updating the GIMPY
interface to WebSOS can be performed without modifying the other
architectural components.
Although recent advances in visual pattern recognition [24] can
defeat GIMPY, there is no solution to date that can recognize com-
plicated images or relation between images like Animal-PIX. Al-
though for demonstration purposes in our prototype, described in
Section 4, we use GIMPY, we can easily substitute it with any other
instance of graphic turing test.
2.3 Sequence of Operations in WebSOS
To illustrate the use of the WebSOS architecture by servers and
clients, we describe the steps both sides must undertake to protect
their communication channel:
• A site (target) installs a ﬁlter on a router in its immediate
vicinity and then selects a number of WebSOS nodes to act
as “secret servlets” that are allowed to forward trafﬁc through
beacon, secret servlet). If a node within the overlay is attacked,
the node simply exits the overlay and the Chord service self-heals,
providing new paths over the re-formed overlay to (potentially new
sets of) beacons. Furthermore, no node is more important or sen-
sitive than others — even beacons can be attacked and are allowed
to fail. Finally, if a secret servlet’s identity is discovered and the
servlet is targeted as an attack point, or attacks arrive at the target
with the source IP address of some secret servlet, the target can
choose an alternate set of secret servlets.
Use of GRE for encapsulating the trafﬁc between the secret servlet
and the ﬁltering router can offer an additional beneﬁt, if we also use
transparent proxies and IPsec for packet encapsulation between the
proxies (replacing SSL). In that implementation scenario, as far
as the target web server is concerned the HTTP/HTTPS connec-
tion from the browser was received directly. Thus, any return TCP
trafﬁc will be sent directly to the browser’s IP address. Following
our discussion in Section 2.4, this asymmetric connection routing
will considerably improve the end-to-end latency and reduce the
load on the overlay network (less trafﬁc to proxy). While asym-
metric routing was once considered potentially harmful, empirical
studies show that most of the long-haul trafﬁc (e.g., non-local traf-
ﬁc) over the Internet exhibits high asymmetry [2]. Most of the
arguments against this asymmetry arise from the difﬁculty of con-
ﬁguring packet classiﬁcation mechanisms, which preclude stateful
ﬁltering and required synchronized conﬁguration of multiple nodes
(those the trafﬁc may traverse). This would not be a problem in our
case, as the asymmetry is exhibited far enough in the network (be-
yond the ﬁltering router) that the local administrative tasks, such
as conﬁguring a ﬁrewall, remain unaffected. IPsec and transparent
proxying techniques are well-known and (in the case of transparent
proxies) widely used, thus we believe such an implementation is
not unfeasible. For the purposes of this paper, we decided to im-
plement the straight-forward version of WebSOS; development of
the optimized version remains in our plans for future work.
In [20], the authors performed a preliminary analysis using sim-
ple networking models to evaluate the likelihood that an attacker
is able to prevent communications to a particular target. This like-
lihood was determined as a function of the aggregate bandwidth
obtained by an attacker through the exploitation of compromised
systems. The analysis included an examination of the capabilities
of static attackers who focus all their attack resources on a ﬁxed
set of nodes, as well as attackers who adjust their attacks to “chase
after” the repairs that the SOS system implements when it detects
an attack. The authors demonstrated that even attackers that are
able to launch massive attacks are very unlikely to prevent success-
ful communication. For instance, attackers capable of launching
debilitating attacks against 50% of the nodes in the overlay have
roughly one chance in one thousand of stopping a given commu-
nication from a client who can access the overlay through a small
subset of overlay nodes. For more details on the analysis, see [20].
2.4 Forwarding Speciﬁcs
WebSOS uses SSL to provide two layers of encryption. First,
messages are encrypted end-to-end, so that only the end-points of
the exchange (user and web-server) can view the data actually be-
ing transmitted. Additionally, WebSOS uses SSL over each hop of
the overlay as a means of verifying the authenticity of the previ-
ous hop. No special functionality is required by the overlay nodes
to perform these tasks; the user browser simply has to be supplied
with the appropriate certiﬁcate(s) from the WebSOS administrator.
In the original SOS architecture, the path established from the
user to the target through the overlay was unidirectional. Trafﬁc
in the reverse direction could also traverse the overlay, by revers-
Figure 3: WebSOS implementation of user Web Challenge using
CAPTCHA. The challenge in this case is “fwst”.
the ﬁlter to the target site. Routers at the perimeter of the
site are instructed to only allow trafﬁc from these servlets to
reach the internal of the site’s network. These routers are
powerful enough to do ﬁltering using only a small number of
rules on incoming trafﬁc without adversely impacting their
performance. In order to make guessing the identity of a se-
cret servlet for a particular target harder for the attacker, the
ﬁltering mechanism uses packet ﬁelds with potentially high
entropy. For example, only GRE [12] packets from a par-
ticular source (the secret servlet) containing a speciﬁc 32-bit
value in the GRE Key ﬁeld [11]. An attacker trying to slip at-
tack trafﬁc through the ﬁlter must guess not only the current
servlet’s IP address, but the correct 32-bit key as well. Al-
though we expect 32 bits to be sufﬁcient for this application,
we can easily use larger keys to avoid brute-force attacks.
• When a WebSOS node is informed that it will act as a secret
servlet for a site (and after verifying the authenticity of the
request, by verifying the certiﬁcate received during the SSL
exchange), it computes the key k for a number of well-known
consistent hash functions, based on the target site’s network
address. Each of these keys will identify a number of overlay
nodes that will act as beacons for that web server.
• Having identiﬁed the beacons, the servlets or the target will
contact them, notifying them of the servlets’ association with
a particular target. Beacons will store this information and
use it for trafﬁc-forwarding purposes.
• A source that wants to communicate with the target contacts
a random overlay node, the Secure Overlay Access Point
(SOAP). After authenticating and authorizing the request via
the CAPTCHA test, the overlay node securely proxies all
trafﬁc from the source to the target via one of the beacons.
The SOAP (and all subsequent hops on the overlay) can proxy
the HTTP request to an appropriate beacon in a distributed
fashion using Chord, by applying the appropriate hash func-
tion(s) to the target’s IP address to identify the next hop on
the overlay. To minimize delays in future requests, the client
is issued a short-duration X.509 certiﬁcate, bound to the SOAP
and the client’s IP address, that can be used to directly con-
tact the proxy-server component of the SOAP without requir-
ing another CAPTCHA test.
This scheme is robust against DoS attacks because if an access
point is attacked, the conﬁrmed source point can simply choose an
alternate access point to enter the overlay. Any overlay node can
provide all different required functionalities (SOAP, Chord routing,
ing the roles of user and target.
In that case, the path taken by
requests and responses would be different. Alternatively, trafﬁc
from the target to the user could be sent directly (without using
the overlay); this is usually not a problem, since most communica-
tion channels are full-duplex and, in the event of a DDoS attack,
only the downstream portion (to the target) is congested. An addi-
tional beneﬁt of this asymmetric approach is reduced latency, since
most client/server trafﬁc (especially in web environments) is highly
asymmetric (i.e., clients receive a lot more information than they
transmit). This was possible because routing decisions in SOS are
made on a per-packet basis.
In WebSOS, routing decisions are made on a per-connection ba-
sis. Any subsequent requests over the same connection (when us-
ing HTTP 1.1) and any responses from the web server can take the
reverse path through the overlay. While this makes the implemen-
tation simpler, it also introduces increased latency, as the bulk of
the trafﬁc will also traverse the overlay. We give some thoughts on
how to address this issue in Section 5.
1
5
9
13
2
6
10
14
3
7
11
15
4
8
12
16
within a d-dimensional space. Each overlay node contains a table
of overlay nodes responsible for neighboring areas in the coordi-
nate space. As shown in Figure 4, overlay node 7 would contain
pointers to nodes 3, 6, 8, and 11. In its basic form, CAN does not
assume any relationship between node positions of the coordinate
space and their geographical positions in the real world. A varia-
tion suggested in [28] that assigns positions within the coordinate
space being representative of the geography provided the basis for
the heuristic used in the model.
3.2 Network Layout
A POP-level representation of the ISP was used, where each POP
is assumed to consist of a hierarchy of routers as shown in Figure 5.
At the top level are routers with links to other POPs. At the lowest
level are links to client networks.
to other pops
OC192
to other ISPs
bandwidth varies
OC48
OC3
….
………
to clients
typically ≤ T3
Figure 4: Overlay nodes serving regions of a coordinate-space.
3. SIMULATION
To understand the impact of the overlay network on the routing
of packets between the source and target nodes, we have applied the
SOS algorithm to two models of ISP networks [7]. One model, in-
dicative of a U.S. topology, is derived from AT&T’s U.S. backbone
network. The other, indicative of a European topology, is derived
from Worldcom’s (now MCI’s) European backbone network. Re-
mote access points were excluded from the AT&T model, as were
connections from Worldcom’s European POPs to points outside the
geographical area. For each model, two algorithms for routing traf-
ﬁc through the overlay were tested, one based on Chord, which uses
a random ordering of the overlay nodes, and a heuristic variation of
CAN that uses geographical ordering of the overlay nodes. In both
cases, we tested variations on how the beacons and servlets were
chosen in relation to each other, the target, and the source, e.g.,
requiring some minimum distance between the servlet and target.
We ﬁrst give a brief description of CAN [28], and then discuss
the speciﬁcs of the simulation environment, such as ISP structure,
the distribution of overlay nodes across ISP Points of Presence
(POPs), and the selection strategies for beacons and secret servlets.
3.1 CAN
Like Chord, CAN uses a hash function to map overlay nodes
to identiﬁers. However, a CAN identiﬁer maps a node to a region
Figure 5: ISP POP structure used in the simulation.
Latencies between POPs were estimated from a subset of known
latencies. Distances between POPs were estimated using airline
miles. Three routers were included at the second level and twelve at
the lowest level of each POP; however, for the statistics computed,
the exact number of routers within a POP was not relevant, only the
latency from the time a packet entered a router within a POP to the
time it left the POP was needed.
The model assumes that there is ample bandwidth between POPs
and that the choke points are the links to clients. All latencies and
distances to clients to their local POP are assigned the same value.
There were 19 POPs in the US model and 18 in the Europe
model. Overlay nodes participating in the overlay were evenly dis-
tributed across POPs, meaning each POP served the same number
of client nodes eligible to be overlay nodes.
In the cases where
servlets and beacons were randomly chosen, this allowed each POP
to be equally likely to have a client site that was a servlet or bea-
con.
In the cases where the servlet and beacon nodes were not
randomly chosen, there were more eligible nodes per POP than uti-
lized and the even distribution did not impact selection. A node was
not allowed to serve more than one purpose for a speciﬁc source-
target pair, for example, a node could not be both a beacon and a
servlet for the same target. Removing the restriction would result
in shorter routes on average because some scenarios tested would
pick the same node for both the servlet and beacon.
In each case, two client nodes served by each POP were included