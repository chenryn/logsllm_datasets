# Lares: An Architecture for Secure Active Monitoring Using Virtualization

## Authors
Bryan D. Payne, Martim Carbone, Monirul I. Sharif, and Wenke Lee  
School of Computer Science  
Georgia Institute of Technology  
Atlanta, Georgia 30332â€“0765  
{bdpayne, mcarbone, msharif, wenke}@cc.gatech.edu

## Abstract
Host-based security tools, such as anti-virus and intrusion detection systems, are often inadequately protected on modern computers. Malware frequently disables these security tools upon installation, rendering them ineffective. While recent research has focused on isolating these vulnerable tools in a separate virtual machine (VM), this approach hampers the ability to perform active monitoring. This paper introduces an architecture that combines the benefits of isolation with the capability to conduct active monitoring. We present the design and a prototype implementation that can process hooks from a Windows XP VM running on Xen. Our security analysis and performance evaluation show that the best-case processing time for a single hook is 28 microseconds.

## 1. Introduction
Over the past several years, malware has become increasingly sophisticated, often disabling critical security services on victim machines. In response, researchers have moved security services into isolated VMs, using techniques like introspection to bridge the semantic gap between the protected VM and other VMs on the same platform. However, these tools rely on passive monitoring, which involves external scanning or polling. This method cannot guarantee interposition on events before they occur, making it insufficient for full-featured anti-virus, intrusion detection, or prevention systems.

Active monitoring, where a security tool places a hook inside the system being monitored, allows the tool to interrupt execution and take control when the hook is triggered. This type of monitoring is essential for state-of-the-art security tools. However, implementing active monitoring in a virtualized environment is challenging because it requires placing security-critical code inside untrusted VMs, which seems counterintuitive given the goal of removing such code from untrusted environments.

This paper addresses the problem of secure active monitoring in a virtualized architecture. We demonstrate how to implement and protect monitoring mechanisms without considering new malware detection or prevention techniques. Our primary contribution is an architecture that enables secure, active monitoring in a virtualized environment. We show how to install protected hooks in an untrusted VM, which trap execution and transfer control to software in a protected VM. This architecture is generally applicable to any system requiring secure and active monitoring and builds on prior work in passive monitoring.

## 2. Secure Monitoring

### 2.1 Previous Approaches
Virtualization technology has enabled better protection of security services by isolating them into separate, protected VMs. Techniques like memory and disk introspection allow security applications to monitor a system's state securely. Memory introspection maps the physical page frames of an untrusted domain into the security domain's address space, providing complete visibility over the untrusted VM's raw memory. Disk introspection works similarly, allowing secure access to the disk's contents. However, introspection is limited to passive monitoring, making it insufficient for applications that require active monitoring, such as anti-virus tools and host-based intrusion prevention systems.

Recent work on malware analysis uses VM-based active monitoring to intercept and analyze malware behavior in a controlled environment. Although active monitoring is a key component of these systems, their requirements and usage scenarios differ from those of production systems. Malware analysis systems are designed for comprehensive, low-level monitoring in a staged, controlled environment, where performance and runtime overhead are not significant concerns. In a production setting, such systems are impractical due to their high performance impact and the difficulty of inferring higher-level data needed for security decisions.

### 2.2 Formal Requirements
We present a formal model that generalizes security applications performing active monitoring by placing hooks in a system to initiate actions when specific events occur. Figure 1 illustrates this model. Consider a security application \( A(C, D) \) with code \( C \) and data \( D \) that monitors a set of events \( E \) occurring in a machine \( M \). The application depends on libraries or OS subsystems \( L(C', D') \) for its execution.

In our model, events are represented as activities occurring during kernel or user process execution, handled by event-handlers. Each event \( e \in E \) is intercepted by placing a hook \( H_e \) in the control flow path. The hook initiates a diversion of control flow to the security application, denoted by \( N_e \). Context information \( I_e \) about the event and the hook is sent with the notification. The security application's behavior for the event is \( B(I_e) \), which may include checks, processing, logging, and determining responses. The response \( R(I_e) \) includes actions on the system, such as state updates or execution flow modifications.

Several classes of attacks can target various aspects of the active monitoring model:
- **A1**: Disables or bypasses hooks \( H_e \) or tampers with the notification mechanism.
- **A2**: Modifies the context information \( I_e \).
- **A3**: Alters the security application \( A \) and its dependencies \( L \).
- **A4**: Changes the behavior \( B(I_e) \).
- **A5**: Intercepts and modifies the response \( R(I_e) \).

The requirements for a secure active monitoring architecture that defeats these attacks are:
1. \( N_e \) is triggered if and only if \( e \) occurs legitimately.
2. \( I_e \) is not modifiable between the occurrence of \( e \) and the invocation of \( N_e \).
3. \( B(I_e) \) of the security application is not maliciously alterable.
4. The effects of \( R(I_e) \) on the system are enforced.

These requirements ensure that an attacker cannot circumvent hooks, modify context information, alter the security application, or interfere with the response.

## 3. Architecture and Design
Our architecture is designed to meet the formal requirements outlined in Section 2.2. It allows hooks to be placed at arbitrary kernel locations and provides low performance overhead. The design ensures that an attacker cannot disable or bypass any security-critical components. We discuss the detailed architecture and related design considerations in this section.

## 4. Prototype Implementation
To demonstrate the feasibility of our approach, we implemented a prototype. The prototype shows how the system would work by implementing a hook triggered for each new process creation event, a common requirement in security applications. The prototype is built on the Xen hypervisor, with Windows XP in the untrusted VM and Fedora 7 in the secure VM. Our evaluation verifies the effectiveness of our memory protection techniques and measures the time required to process a single hook to be 28 microseconds in the best case.

## 5. Evaluation
We evaluate the security and performance of our approach. Our security analysis demonstrates that the architecture meets the formal requirements, and our performance evaluation shows that the overhead is minimal. We provide detailed results and discussions in this section.

## 6. Security Analysis
We provide a complete security analysis of our architecture, showing how it thwarts attempts by malware to disable security applications. We discuss the security properties and the robustness of our design in this section.

## 7. Related Work
We review related work in the field of secure monitoring and compare our approach to existing solutions. This section highlights the unique contributions of our architecture.

## 8. Conclusion
In conclusion, we present an architecture for secure active monitoring in a virtualized environment. Our approach combines the benefits of isolation with the capability to perform active monitoring, ensuring the security and effectiveness of security tools. We provide a prototype implementation and a thorough evaluation, demonstrating the viability and performance of our solution.

---

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.