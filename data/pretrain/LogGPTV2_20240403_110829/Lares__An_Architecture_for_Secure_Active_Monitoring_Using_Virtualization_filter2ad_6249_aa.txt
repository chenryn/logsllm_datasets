title:Lares: An Architecture for Secure Active Monitoring Using Virtualization
author:Bryan D. Payne and
Martim Carbone and
Monirul I. Sharif and
Wenke Lee
2008 IEEE Symposium on Security and Privacy
Lares: An Architecture for Secure Active Monitoring Using Virtualization
Bryan D. Payne Martim Carbone Monirul Sharif Wenke Lee
School of Computer Science
Georgia Institute of Technology
Atlanta, Georgia 30332–0765
{bdpayne,mcarbone,msharif,wenke}@cc.gatech.edu
Abstract
Host-based security tools such as anti-virus and intru-
sion detection systems are not adequately protected on to-
day’s computers. Malware is often designed to immedi-
ately disable any security tools upon installation, render-
ing them useless. While current research has focused on
moving these vulnerable security tools into an isolated vir-
tual machine, this approach cripples security tools by pre-
venting them from doing active monitoring. This paper de-
scribes an architecture that takes a hybrid approach, giving
security tools the ability to do active monitoring while still
beneﬁting from the increased security of an isolated virtual
machine. We discuss the architecture and a prototype im-
plementation that can process hooks from a virtual machine
running Windows XP on Xen. We conclude with a security
analysis and show the performance of a single hook to be
28 µsecs in the best case.
1
Introduction
As malware has become increasingly sophisticated over
the past several years, it is no longer unusual to see it dis-
able critical security services on a victim’s machine. Re-
searchers responded to this threat by moving security ser-
vices into different virtual machines (VMs) [9]. Techniques
such as introspection make this possible by bridging the
semantic gap between the protected VM and other VMs
running on the same platform.
In particular, introspec-
tion and related techniques have been used to build a wide
range of security tools including intrusion detection sys-
tems, memory and disk integrity checkers, and system mon-
itors [14, 18, 22]. All of these tools share one thing in com-
mon: each relies on passive monitoring. Passive monitoring
is when the security tool monitors by external scanning or
polling. As a result, it is unable to guarantee interposition
on events before they happen.
This fundamental
limitation of passive monitoring
means that it is not a sufﬁcient technique for implement-
ing a full-featured anti-virus, intrusion detection, or intru-
sion prevention system. Previous efforts to implement these
types of systems within a protected VM have resorted to im-
plementing the systems with crippled functionality. What
was missing in these systems was the ability to do active
monitoring. Active monitoring is when the security tool
places a hook inside the system being monitored. When
execution reaches the hook, it will interrupt execution and
pass control to the security tool. Active monitoring can also
be done outside of the system being monitored (e.g., net-
work and disk monitoring), however these monitors are re-
stricted to the semantic level provided by the disk and net-
work device abstractions. In this work, we focus on systems
that perform active monitoring at a higher semantic level by
placing hooks in arbitrary kernel locations within the sys-
tem being monitored. This type of monitoring is required to
support state-of-the-art security tools.
Active monitoring is a hard problem in the types of vir-
tualized security architectures used in recent research. The
problem is that active monitoring requires security-critical
code inside untrusted VMs. Since a major reason for mov-
ing to a virtualized architecture is to remove security-critical
code from the untrusted VMs, this feels like a step back-
wards. Properly protecting this code is sufﬁciently chal-
lenging that some researchers have attempted to avoid the
problem altogether [13], resulting in systems that can only
detect attacks, not prevent them. Furthermore, recent work
has focused on providing strong protections for the entire
kernel code [32], but these do not protect kernel data so
they are insufﬁcient for protecting entire applications.
If
this were the end of the story, then security in virtualized
architectures would be limited to passive monitoring and
the resulting security tools would remain crippled.
This paper addresses the problem of secure active moni-
toring in a virtualized architecture. We show how the mon-
itoring mechanisms can be implemented and protected. We
do not consider new malware detection or prevention tech-
niques as these areas are orthogonal to the research pre-
sented here. Any system that uses active monitoring, in-
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.24
233
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
cluding any future advances in the ﬁeld, can beneﬁt from
the added protections that our work provides. The primary
research contribution of this work is an architecture to per-
form secure, active monitoring in a virtualized environment.
We show design techniques that allow installation of pro-
tected hooks into an untrusted VM. These hooks will trap
execution in the untrusted VM and transfer control to soft-
ware in the protected VM. This architecture is generally ap-
plicable to any system that requires secure and active moni-
toring, and it builds on prior work that described techniques
for passively monitoring memory and ﬁle system data [22].
Ensuring the security of this system is non-trivial. Our
design is a departure from traditional secure systems work
in that we place hooks inside the untrusted VM, without lay-
ering them directly on top of trusted code. By limiting the
functionality of the code placed inside the untrusted VM
and providing specialized protection mechanisms, we are
able to ensure the security of this approach. The function-
ality removed from the untrusted VM is then implemented
in a secure VM, so the overall functionality of the system is
not reduced. The protection mechanisms can be deployed
as needed so that the system only uses more costly mecha-
nisms when required. Using these techniques, we are able
to thwart attempts by malware to disable security applica-
tions that use our monitoring architecture. We provide a
complete security analysis of our architecture in Section 6.
Our architecture is designed for use in production sys-
tems. To meet the goals of this environment, our archi-
tecture is designed to prevent an attacker from disabling or
circumventing (i.e., bypassing) any security-critical compo-
nent. The design also allows hooks to be placed at arbitrary
kernel locations and provides a low performance overhead.
These three requirements guided the design of our system
architecture and are motivated by a set of formal require-
ments we formulated to ensure the monitoring system is se-
cure. Section 2.2 introduces these formal requirements. We
discuss our architecture and its requirements in Section 3.
After designing the architecture, we implemented a pro-
totype to show the viability of our approach. Commer-
cial security applications will utilize hundreds of hooks, but
each hook is constructed in a similar fashion. Our prototype
shows how the system would work by implementing one
hook that is triggered for each new process creation event.
This hook is commonly seen in security applications, such
as anti-virus applications [35], and is representative of the
types of hooks these applications use. The prototype is built
on the Xen hypervisor using Windows XP in the untrusted
VM and Fedora 7 in the secure VM. Our evaluation veriﬁes
the effectiveness of our memory protection techniques and
measures the time required to process a single hook to be
28 µsecs in the best case. We provide implementation and
evaluation details in Sections 4 and 5, respectively.
The rest of this paper is organized as follows. Section
2 provides the motivation and formal foundation for our
work. Section 3 provides details on our architecture and the
related design considerations. Section 4 describes our pro-
totype implementation, including some implementation de-
tails that would be useful to anyone reproducing this work.
Sections 5 and 6 evaluate the security and performance of
our approach and discuss the security properties of our ar-
chitecture. Section 7 describes the related work. We con-
clude with Section 8.
2 Secure Monitoring
In this section we ﬁrst look at previous approaches to
perform secure host-based monitoring. These fall into two
main categories: passive virtualization-based approaches
and malware analysis. We consider the beneﬁts of and
drawbacks to these approaches and compare them to ac-
tive monitoring. Next we provide a set of formal security
requirements for any active monitoring system. These re-
quirements are used to motivate our architectural decisions
in Section 3. The section ends with a discussion of the threat
model and assumptions used in designing our secure active
monitoring architecture.
2.1 Previous Approaches
Virtualization technology has made it possible to provide
security services with better protection by isolating them
into separate, protected VMs. Research on techniques like
memory and disk introspection [9, 22] have shown how to
leverage this isolation to securely monitor a system’s state.
Memory introspection works by having a security domain
map the physical page frames of an untrusted domain into
its own address space.
It allows security applications to
have complete visibility over another virtual machine’s raw
memory state. Using introspection, higher-level code and
data structures can be semantically reconstructed to provide
an abstract view of the system’s state. Disk introspection
works in a similar fashion, allowing security tools to ac-
cess and infer the disk’s contents in a protected fashion.
While introspection has many applications, it is fundamen-
tally limited because it can only perform passive monitor-
ing. Therefore, introspection alone is not sufﬁcient for ap-
plications that rely on active monitoring, such as anti-virus
tools and host-based intrusion prevention systems.
Recent work on malware analysis [12,21,40] uses a form
of VM-based active monitoring to intercept and analyze the
run-time behavior of malware in a controlled environment.
Although active monitoring is an integral goal of such sys-
tems, the requirements and usage scenarios of these systems
and our system differ, making malware analysis approaches
unsuitable for use on production systems.
Malware analysis systems are primarily designed to
monitor a large and comprehensive set of activities inside
the guest VM at a very low-level. This approach is feasi-
234
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
Kernel or process 
execution ﬂow
Event e 
occurred
A1
Hook He
Event handling
ﬁnished
Notiﬁcation Ne(Ie)
A2
Resume/response R(Ie)
A4
A5
Legend of attacks: 
A1: Bypass hook
A2: Modify event context
A3: Tamper with security application
A4: Tamper with dependencies
A5: Tamper with response
A3
B(Ie)
Security Application A(C,D)
Libraries, OS and 
other dependencies
L(C',D')
Figure 1: Formal model of secure active monitoring shown with potential attacks.
ble for two reasons. First, the ofﬂine fashion in which this
analysis is normally done makes performance and run-time
overhead a non-issue for such systems. Second, the fact
that it is done in a staged, controlled environment, means
that the collected low-level data can be directly mapped to
the malware’s activity with few false positives. In a produc-
tion setting such as ours, the performance impact created
by such systems make its use impractical. Furthermore, the
low semantic level in which events are captured makes it
difﬁcult to infer the higher-level data needed to make secu-
rity decisions.
In malware analysis, another important requirement is
that the analyzer and the active monitor must remain hid-
den from the malware. This means that they should not
introduce any noticeable side-effects in the malware’s exe-
cution environment, as this could cause the malware to in-
tentionally alter its behavior in an effort to thwart analysis
attempts. However, in our production setting, we are only
concerned with the protection and effectiveness of our mon-
itoring components.
2.2 Formal Requirements
We present a formal model in this section that general-
izes security applications performing active monitoring by
placing hooks in a system to initiate actions when speciﬁc
events occur. We use this model to analyze possible attacks
on such applications under a powerful adversary that con-
trols the entire system and identify a list of requirements
that an ideal secure monitoring approach should satisfy in
order to defeat such attacks. These formal requirements
drive the design and architecture of our approach.
Figure 1 illustrates our model. Consider a security ap-
plication A(C, D) with code C and data D that wants to
actively monitor the occurrences of a set of events E occur-
ring inside a machine M. Suppose that the application de-
pends on libraries or OS subsystems denoted by L(C!, D!)
for its execution.
In our model, we generically represent
events as activities occurring sometime along the execu-
tion of the kernel or a user process, which are handled by
event-handlers that exist in the system. Any event e ∈ E
is actively intercepted by placing a hook He in the con-
trol ﬂow path between the point of the event occurring and
the point where handling the event is ﬁnished. The pur-
pose of the hook is to initiate a diversion of control-ﬂow to
the security application. Depending on where the security
application resides, this diversion can be a straightforward
control transfer, a process switch or even an inter-domain
communication. Therefore, we use a generic notation Ne
to represent the notiﬁcation call to the security application.
The context information Ie about the event and the hook
is sent along with the notiﬁcation. We express the behav-
ior of the security application for the particular instance of
the event as B(Ie), which may include performing checks,
processing models, generating logs, determining appropri-
ate responses, etc. Finally, the response of the security ap-
plication is denoted by R(Ie), which are actions carried out
on the system, including updates to the state of the system
or modiﬁcations in execution ﬂow.
We can identify several classes of attacks on various as-
pects of the active monitoring model. The ﬁrst class of at-
tacks (A1) disables or bypasses the hooks He or tampers
with the notiﬁcation mechanism, so that Ne is not invoked.
Attacks (A2) can target and modify the context informa-
tion Ie, providing the security application with an altered
view of the occurred event e. In addition, some attacks may
change the behavior B(Ie) exhibited by application on re-
ceiving Ie. These include attacks that modify the security
application A and its code C and data D (A3), or any of its
dependencies L (A4). Attacks (A5) may alter the response
carried out by the security application by intercepting and
modifying it.
The requirements for a secure active monitoring archi-
tecture that defeats the attacks are as follows:
1. Ne is triggered if and only if e occurs legitimately.
2. Ie is not modiﬁable between the occurrence of e and
the invocation of Ne.
3. B(Ie) of the security application is not maliciously al-
terable.
4. The effects of R(Ie) on the system are enforced.
235
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:19 UTC from IEEE Xplore.  Restrictions apply. 
The ﬁrst requirement states that an attacker should not
succeed in circumventing hooks or generating spurious no-
tiﬁcations. The second requirement ensures that an attacker
cannot modify the context information Ie before invocation
of Ne to alter or hide information regarding the event e.
The third requirement ensures that the functionality of the
security tool itself is not maliciously altered, defeating all
attacks that tamper with the application process or any un-
derlying subsystems it depends on. The fourth requirement
ensures that the responses on the state of the system are