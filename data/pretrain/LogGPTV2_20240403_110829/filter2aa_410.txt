泛微审计小结
0x00:起因是群里周末发了一个 cnvd 收录泛微注入的截图。。然后找泛微要了一份补丁
发现漏洞位置在/upgrade/detail.jsp
登陆后的注入，，没啥卵子用。。遂自己扒了套代码自己审计
0x01:未授权的 sql 注入
漏洞位置:/clusterupgrade/getProcessInfo.jsp
跟进去
注入点发生在上图 408 行
实际测试中发现泛微全局的 filter。。。黑盒绕的。。比较迷。。。简单 fuzz 了下 得到了如
下 poc
这时候发现这个 poc 的字段位置。。只要填入非数字型字符。。union 就被转成乱码。。
这里实在不想再饶了。。留个坑。。
然后又碰到了另一个坑(mmp 的泛微)。。
我们可以通过联合查询控制图中 1 位置的的返回结果,然后把注入语句 hex 后写入 str10 拼
接给图中 2 位置的 sql 语句,构造注入取数据。。类似二次注入。
但！。。
不知道为毛给我返回了一个地址。。。
0x02:SSRF
SSRF 算是上面注入的一个延伸攻击面
通过联合查询控制返回值 httpaddress,达到 ssrf 的目的，印象中高版本 jdk 好像不支持
gopher 和 dict 攻击面比较窄。。凑数的洞
0x03:未授权 rce
主要问题在/clusterupgrade/tokenCheck.jsp 这个文件
这里代码写的挺迷的。。。。红框的判断好像有没有区别不大。。
ecology2018_upgrade 值还是硬编码的。。。
直接访问该文件 我们可以得到 license 加密后的值和 timestamp(String timestamp =
des.getDistributeinfo();)
有了 license 之后 我们可以绕过 checkSecurity 函数 上传恶意文件
主要就是绕过 checkSecurity 函数。。后续上传就没啥好说了 直接看利用吧。。。
1.拿到加密后的 key
2.构造 token 进行上传
3.触发解压缩操作
4.Getshell
Ps.有的会有 ip 校验 加个 XFF 头。。
通用性不强。。水一发。。