*   将 Docker 存储库添加到您的主机系统。
*   手动安装软件包。
*   使用 Docker 提供的安装脚本。
第一个选项被认为是最好的选项，因为它可以方便地安装和更新 Docker 引擎。第二个选项对于无法通过互联网访问服务器(也称为“气隙”服务器)的企业非常有用。第三个选项用于安装 Docker 的边缘和测试版本，不建议用于生产。
由于首选的方法是将 Docker 的存储库添加到我们的主机中，因此我们将使用该选项并解释我们应该用来添加存储库和安装 Docker 的过程。
## 在 Ubuntu 上安装 Docker
现在我们已经完成了一切准备，让我们安装 Docker:
1.  第一步是通过执行`apt-get update` :
    ```
    sudo apt-get update
    ```
    更新包索引
2.  接下来，我们需要添加主机系统上可能丢失的任何包，以允许 HTTPS apt 访问:
    ```
    sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    ```
3.  要从 Docker 的存储库中提取包，我们需要添加它们的密钥。您可以使用以下命令添加密钥，该命令将下载 gpg 密钥并将其添加到您的系统中:
    ```
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add –
    ```
4.  现在，将 Docker 的存储库添加到您的主机系统中:
    ```
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    ```
5.  完成所有先决条件后，您可以在服务器上安装 Docker:
    ```
    sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io
    ```
6.  Docker 现已安装在您的主机上，但与大多数新服务一样，Docker 当前没有运行，并且尚未配置为从系统启动。要启动 Docker 并在启动时启用它，请使用以下命令:
    ```
    sudo systemctl enable docker && systemctl start docker
    ```
现在我们已经安装了 Docker，让我们进行一些配置。首先，我们将授予 Docker 权限。
## 授予 Docker 权限
在默认的安装中，Docker 需要 root 访问权限，因此您需要以 root 身份运行所有 Docker 命令。您可以将您的用户帐户添加到服务器上提供 Docker 访问的新组中，而不是对每个 Docker 命令都使用`sudo`，而不需要对每个命令都使用`sudo`。
如果您以标准用户身份登录并尝试运行 Docker 命令，您将收到一条错误消息:
```
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/img/json: dial unix /var/run/docker.sock: connect: permission denied
```
要允许您的用户或您可能想要添加的任何其他用户执行 Docker 命令，您需要创建一个新组并将用户添加到该组。以下是可用于添加当前登录用户的命令示例:
```
sudo groupadd docker sudo usermod -aG docker $USER
```
第一个命令创建`docker`组，而第二个命令将您当前登录的用户帐户添加到`docker`组。
要将新成员添加到您的帐户，您需要从系统中注销并重新登录，这将更新您的组。
最后，您可以通过运行标准 hello world image 来测试它是否工作(注意，我们不要求`sudo`运行 Docker 命令):
```
docker run hello-world
```
如果您看到以下输出，那么您已经成功安装了 Docker 并授予您的非根帐户访问 Docker 的权限:
![Figure 1.3 – Output for hello-world ](img/Fig_1.3_B15514.jpg)
图 1.3–hello-world 的输出
现在已经授予 Docker 无需`sudo`即可运行的权限，我们可以通过学习如何使用 Docker CLI 来开始解锁我们可以使用的命令。
# 使用 Docker 命令行界面
当您运行`hello-world`容器来测试您的安装时，您使用了 Docker 命令行界面。Docker 命令是您将用来与 Docker 守护程序交互的命令。使用此单个可执行文件，您可以执行以下操作以及更多操作:
*   启动和停止容器
*   推拉映像
*   在活动容器中运行外壳
*   看看容器日志
*   创建 Docker 卷
*   创建 Docker 网络
*   删除旧映像和卷
本章并不意味着包括对每个 Docker 命令的详尽解释；相反，我们将解释一些您需要用来与 Docker 守护程序和容器交互的常见命令。因为我们认为卷和网络对于理解这本书非常重要，所以我们将深入这些主题的更多细节。
您可以将 Docker 命令分为两类:通用 Docker 命令和 Docker 管理命令。标准的 Docker 命令允许您管理容器，而管理命令允许您管理 Docker 选项，如管理卷和网络。
## Docker 帮助
忘记命令的选项或语法是很常见的，Docker 意识到了这一点。每当你试图记住一个命令时，你总是可以使用`docker help`命令来刷新你的记忆。
## Docker 运行
要运行容器，使用带有提供的映像名称的`docker run`命令。在执行`docker run`命令之前，您应该了解启动容器时可以提供的选项。
最简单的形式是`docker run bitnami/nginx:latest`，这是一个可以用来运行 NGINX 网络服务器的示例命令。虽然这将启动一个运行 NGINX 的容器，但它将在前台运行:
![Figure 1.4 – NGINX container startup ](img/Fig_1.4_B15514.jpg)
图 1.4–NGINX 容器启动
要将容器作为后台进程运行，您需要在 Docker 命令中添加`-d`选项，这将在分离模式下运行您的容器。现在，当您运行分离的容器时，您将只看到容器标识，而不是交互式或附加的屏幕:
![Figure 1.5 – Docker run output ](img/Fig_1.5_B15514.jpg)
图 1.5–Docker 运行输出
默认情况下，容器一旦启动就会被赋予一个随机的名称。在我们前面的分离示例中，容器被命名为`silly_keldysh`:
![](img/Fig_1.6_B15514.jpg)
图 1.6–Docker 命名示例
如果不为容器指定名称，当您开始在单个主机上运行多个容器时，会很快变得混乱。为了使管理更容易，你应该总是用一个更容易管理的名字来开始你的容器。Docker 通过`run`命令提供了另一个选项:`--name`选项。在前面例子的基础上，我们将命名我们的容器`nginx-test`。我们新的`docker run`命令如下:
```
docker run --name nginx-test -d bitnami/nginx:latest
```
就像运行任何分离的映像一样，这将返回容器标识，但不是您提供的名称。为了验证容器是否以名称`nginx-test`运行，我们可以使用`docker ps`命令列出容器。
## Docker
每天，你将需要检索一个正在运行的容器列表或一个已经停止的容器列表。Docker CLI 有一个名为`ps`的选项，该选项将列出所有正在运行的容器，或者如果您向`ps`命令添加一个额外的选项，则列出所有正在运行且已停止的容器。输出将列出容器，包括它们的容器标识、映像标签、输入命令、创建日期、状态、端口和容器名称。以下是当前正在运行的容器示例:
![](img/Fig_1.7_B15514.jpg)
图 1.7–当前运行的容器
如果您正在寻找的容器当前正在运行，这将很有帮助。如果容器被停止了，或者更糟，如果你启动了容器，但它没有启动，然后又停止了，怎么办？通过在`docker ps`命令中添加`-a`选项，可以查看所有容器的状态，包括之前运行的容器。当您执行`docker ps -a`时，您将看到来自标准`ps`命令的相同输出，但是您将注意到列表可能包括额外的容器。
如何区分哪些容器正在运行，哪些容器已经停止？如果查看列表的`STATUS`字段，运行容器会显示一个运行时间；例如`Up xx hours`，或者`Up xx days`。但是，如果容器由于任何原因被停止，当它停止时，状态将显示；例如`Exited (1) 3 days ago`。
![Figure 1.8 – Docker PS output ](img/Fig_1.8_B15514.jpg)
图 1.8–Docker PS 输出
停止的容器并不意味着运行映像时出现问题。有些容器可以执行单个任务，一旦完成，容器就可以优雅地停止。确定退出是正常的还是由于启动失败导致的一种方法是检查容器的日志。
## Docker 开始和停止
要停止一个正在运行的容器，使用带有要停止的容器名称的`docker stop`选项。由于主机上的资源，您可能希望停止一个容器，因为您可能资源有限，只能同时运行几个容器。
如果您需要在未来某个时间启动该容器进行额外的测试或开发，请执行`docker start container name`，这将使用最初启动该容器的所有选项启动该容器，包括分配的任何网络或卷。
## Docker 附件