映像由 JSON 文件、文件夹和其他 TAR 文件的集合组成。所有的映像都遵循这个结构，所以你可能在想，*为什么这个方法这么差*？
最大的原因是信任——如前所述，您的最终用户将无法轻松看到他们正在运行的映像中的内容。您会从未知来源随机下载预打包的映像来运行您的工作负载，而不检查映像是如何构建的吗？谁知道它是如何配置的，安装了哪些软件包？使用 Dockerfile，您可以确切地看到创建映像时执行了什么，但是使用这里描述的方法，您对此一无所知。
另一个原因是你很难建立一套好的默认值；例如，如果你以这种方式建立你的形象，那么你将无法真正利用诸如`ENTRYPOINT`和`CMD`之类的功能，甚至是最基本的指令，如`EXPOSE`。相反，用户必须定义他们的`docker container run`命令期间所需的一切。
在 Docker 早期，分发以这种方式准备的映像是常见的做法。事实上，我自己也为此感到内疚，因为从运营背景来看，启动一台“机器”，引导它，然后创建一个黄金大师是完全有意义的。幸运的是，在过去的几年里，Docker 已经将构建功能扩展到甚至不再考虑这个选项的程度。
# 从头开始构建容器映像
到目前为止，我们一直使用 Docker Hub 中准备好的映像作为基础映像。完全避免这种情况(某种程度上)并从头开始展示自己的形象是可能的。
现在，当你通常听到短语*来自* *刮擦*时，它的字面意思是你从零开始。这就是我们现在所拥有的——你什么也得不到，必须在此基础上再接再厉。现在，这可能是一个好处，因为它将保持映像尺寸非常小，但它也可能是有害的，如果你是相当新的 Docker，因为它可能会变得复杂。
Docker 已经为我们做了一些艰苦的工作，并在 Docker Hub 上创建了一个名为`scratch`的空 TAR 文件；你可以在你的文档的`FROM`部分使用它。您可以在此基础上构建整个 Docker，然后根据需要添加部件。
同样，让我们看看使用 Alpine Linux 作为映像的基本操作系统。这样做的原因不仅包括它是以 ISO、Docker 映像和各种虚拟机映像的形式分发的，还包括整个操作系统是以压缩 TAR 文件的形式提供的。您可以在存储库中或阿尔卑斯 Linux 下载页面上找到下载内容。
要下载副本，只需从下载页面选择合适的下载，可在[https://www.alpinelinux.org/downloads/](https://www.alpinelinux.org/downloads/)找到。我使用的是**迷你根文件系统**部分的 **x86_64** 。
下载后，您需要创建一个使用`scratch`的 Dockerfile，然后添加`tar.gz`文件，确保使用正确的文件，如下例所示:
```
FROM scratch
ADD files/alpine-minirootfs-3.8.0-x86_64.tar.gz /
CMD ["/bin/sh"]
```
现在，您已经将 Docker 文件和操作系统保存在 TAR 文件中，您可以像构建任何其他 Docker 映像一样，通过运行以下命令来构建映像:
```
$ docker image build --tag local:fromscratch .
```
您可以通过运行以下命令将映像大小与我们构建的其他容器映像进行比较:
```
$ docker image ls
```
正如您在下面的截图中看到的，我构建的映像与我们一直在 Docker Hug 中使用的 Alpine Linux 映像大小完全相同:
![](img/743714e2-4da6-4fe1-a592-85dfe819b8cb.png)
现在我们已经构建了自己的映像，我们可以通过运行以下命令来测试它:
```
$ docker container run -it --name alpine-test local:fromscratch /bin/sh
```
If you get an error, then you may already have a container called alpine-test created or running . Remove it by running `docker` `container stop alpine-test`, followed by `docker container rm alpine-test`.
这应该会在 Alpine Linux 映像上启动一个外壳。您可以通过运行以下命令来检查这一点:
```
$ cat /etc/*release
```
这将显示容器正在运行的版本信息。要了解整个过程的样子，请参见以下终端输出:
![](img/357eb630-d8aa-4d78-b99e-17ca4fa62f75.png)
虽然一切看起来都很简单，但这要归功于 Alpine Linux 打包操作系统的方式。当您选择使用以不同方式打包操作系统的其他发行版时，它可能会变得更加复杂。
有几种工具可以用来生成一个操作系统包。我们不打算在这里详细讨论如何使用这些工具，因为如果您必须考虑这种方法，您可能有一些非常具体的要求。本章末尾的进一步阅读部分有一个工具列表。
那么这些要求是什么呢？对于大多数人来说，它将是遗留应用；例如，如果您有一个应用需要不再受 Docker Hub 支持或不可用的操作系统，但您需要一个更现代的平台来支持该应用，会发生什么？嗯，您应该能够旋转您的映像并在那里安装应用，允许您将旧的遗留应用托管在现代的、可支持的操作系统/体系结构上。
# 使用环境变量
在这一节中，我们将介绍非常强大的**环境变量** ( **ENVs** ，因为您将会看到很多。你可以在你的文档中使用 ENVs 做很多事情。如果你熟悉编码，这些可能对你来说是熟悉的。
对于像我这样的其他人来说，起初他们似乎令人生畏，但不要气馁。一旦你掌握了它们，它们将成为一个很好的资源。它们可以用来在运行容器时设置信息，这意味着您不必去更新 Dockerfile 或服务器上运行的脚本中的许多命令。
要在 Dockerfile 中使用 env，可以使用`ENV`指令。`ENV`指令的结构如下:
```
ENV  
ENV username admin
```
或者，您可以始终在两者之间使用等号:
```
ENV =
ENV username=admin
```
现在，问题是，为什么有两种方法可以定义它们，它们有什么区别？第一个例子，每行只能设置一个`ENV`；然而，它很容易阅读和理解。第二个`ENV`例子，可以在同一行设置多个环境变量，如下图所示:
```
ENV username=admin database=wordpress tableprefix=wp
```
您可以使用 Docker `inspect`命令查看映像上设置了哪些环境变量:
```
$ docker image inspect  
```
现在我们知道了它们需要如何设置在我们的 Dockerfile 中，让我们来看看它们是如何工作的。到目前为止，我们已经使用 Dockerfile 构建了一个简单的映像，只安装了 nginx。让我们看看构建一些更有活力的东西。使用 Alpine Linux，我们将执行以下操作:
*   设置一个`ENV`来定义我们想要安装哪个版本的 PHP。
*   安装 Apache2 和我们选择的 PHP 版本。
*   设置映像，以便 Apache2 可以顺利启动。
*   删除默认的`index.html`并添加一个显示`phpinfo`命令结果的`index.php`文件。
*   露出容器上的端口`80`。
*   设置 Apache，使其成为默认进程。
我们的 Dockerfile 如下所示:
```
FROM alpine:latest
LABEL maintainer="Russ McKendrick "
LABEL description="This example Dockerfile installs Apache & PHP."
ENV PHPVERSION=7
RUN apk add --update apache2 php${PHPVERSION}-apache2 php${PHPVERSION} && \
 rm -rf /var/cache/apk/* && \
 mkdir /run/apache2/ && \
 rm -rf /var/www/localhost/htdocs/index.html && \
 echo "" > /var/www/localhost/htdocs/index.php && \
 chmod 755 /var/www/localhost/htdocs/index.php
EXPOSE 80/tcp
ENTRYPOINT ["httpd"]
CMD ["-D", "FOREGROUND"]
```
如您所见，我们选择安装 PHP7 我们可以通过运行以下命令来构建映像:
```
$ docker build --tag local/apache-php:7 .
```
注意我们是如何稍微改变命令的。这一次，我们将映像称为`local/apache-php`，并将版本标记为`7`。通过运行前面的命令获得的完整输出可以在这里找到:
```
Sending build context to Docker daemon 2.56kB
Step 1/8 : FROM alpine:latest
 ---> 11cd0b38bc3c
Step 2/8 : LABEL maintainer="Russ McKendrick "
 ---> Using cache
 ---> 175e9ebf182b
Step 3/8 : LABEL description="This example Dockerfile installs Apache & PHP."
 ---> Running in 095e42841956
Removing intermediate container 095e42841956
 ---> d504837e80a4
Step 4/8 : ENV PHPVERSION=7
 ---> Running in 0df665a9b23e
Removing intermediate container 0df665a9b23e
 ---> 7f2c212a70fc
Step 5/8 : RUN apk add --update apache2 php${PHPVERSION}-apache2 php${PHPVERSION} && rm -rf /var/cache/apk/* && mkdir /run/apache2/ && rm -rf /var/www/localhost/htdocs/index.html && echo "" > /var/www/localhost/htdocs/index.php && chmod 755 /var/www/localhost/htdocs/index.php
 ---> Running in ea77c54e08bf
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
(1/14) Installing libuuid (2.32-r0)
(2/14) Installing apr (1.6.3-r1)
(3/14) Installing expat (2.2.5-r0)
(4/14) Installing apr-util (1.6.1-r2)
(5/14) Installing pcre (8.42-r0)
(6/14) Installing apache2 (2.4.33-r1)
Executing apache2-2.4.33-r1.pre-install
(7/14) Installing php7-common (7.2.8-r1)
(8/14) Installing ncurses-terminfo-base (6.1-r0)
(9/14) Installing ncurses-terminfo (6.1-r0)
(10/14) Installing ncurses-libs (6.1-r0)
(11/14) Installing libedit (20170329.3.1-r3)
(12/14) Installing libxml2 (2.9.8-r0)
(13/14) Installing php7 (7.2.8-r1)
(14/14) Installing php7-apache2 (7.2.8-r1)
Executing busybox-1.28.4-r0.trigger
OK: 26 MiB in 27 packages
Removing intermediate container ea77c54e08bf
 ---> 49b49581f8e2
Step 6/8 : EXPOSE 80/tcp
 ---> Running in e1cbc518ef07
Removing intermediate container e1cbc518ef07
 ---> a061e88eb39f
Step 7/8 : ENTRYPOINT ["httpd"]
 ---> Running in 93ac42d6ce55
Removing intermediate container 93ac42d6ce55
 ---> 9e09239021c2
Step 8/8 : CMD ["-D", "FOREGROUND"]
 ---> Running in 733229cc945a
Removing intermediate container 733229cc945a
 ---> 649b432e8d47
Successfully built 649b432e8d47
Successfully tagged local/apache-php:7 
```
我们可以通过运行以下命令来使用该映像启动一个容器，从而检查一切是否按预期运行:
```
$ docker container run -d -p 8080:80 --name apache-php7 local/apache-php:7
```
一旦启动，打开浏览器，进入`http://localhost:8080/`，你会看到一个页面显示正在使用 PHP7:
![](img/c5500d90-2c9c-4f4e-bfeb-f768b2c031b2.png)
Don't be confused by the next part; there is no PHP6\. For an explanation of why not, go to [https://wiki.php.net/rfc/php6](https://wiki.php.net/rfc/php6).
现在，在您的 Dockerfile 中，将`PHPVERSION`从`7`更改为`5`，然后运行以下命令来构建新映像:
```
$ docker image build --tag local/apache-php:5 .
```
从下面的终端输出可以看出，除了正在安装的软件包之外，大多数输出都是相同的:
```
Sending build context to Docker daemon 2.56kB
Step 1/8 : FROM alpine:latest
 ---> 11cd0b38bc3c
Step 2/8 : LABEL maintainer="Russ McKendrick "
 ---> Using cache
 ---> 175e9ebf182b
Step 3/8 : LABEL description="This example Dockerfile installs Apache & PHP."
 ---> Using cache
 ---> d504837e80a4
Step 4/8 : ENV PHPVERSION=5
 ---> Running in 0646b5e876f6
Removing intermediate container 0646b5e876f6
 ---> 3e17f6c10a50
Step 5/8 : RUN apk add --update apache2 php${PHPVERSION}-apache2 php${PHPVERSION} && rm -rf /var/cache/apk/* && mkdir /run/apache2/ && rm -rf /var/www/localhost/htdocs/index.html && echo "" > /var/www/localhost/htdocs/index.php && chmod 755 /var/www/localhost/htdocs/index.php
 ---> Running in d55a7726e9a7
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz
(1/10) Installing libuuid (2.32-r0)
(2/10) Installing apr (1.6.3-r1)
(3/10) Installing expat (2.2.5-r0)
(4/10) Installing apr-util (1.6.1-r2)
(5/10) Installing pcre (8.42-r0)
(6/10) Installing apache2 (2.4.33-r1)
Executing apache2-2.4.33-r1.pre-install
(7/10) Installing php5 (5.6.37-r0)
(8/10) Installing php5-common (5.6.37-r0)
(9/10) Installing libxml2 (2.9.8-r0)
(10/10) Installing php5-apache2 (5.6.37-r0)
Executing busybox-1.28.4-r0.trigger
OK: 32 MiB in 23 packages