quests result in responses with incorrect TTL values. We interpret
the latter as due to the DNS actor distorting TTL not when con-
Behavior
Honest
Lie on Initial
Lie on Subsequent
Constant TTL
Increment TTL
Percentage of Measurements
19%
38%
9%
7%
1%
Table 3: Aggregate TTL Behavior
Expected (sec) % 
Mode Lie
1
10-120
1000
3600
10000
10800
86400
100000
604800
1000000
0%
11%
Value
10000
≤ 1% ≤ 8% 10000
10000
10000
3600
3600
21600
21600
21600
604800
1%
2%
5%
8%
16%
22%
22%
64%
3%
2%
0%
0%
0%
0%
0%
0%
% of All Lies
35%
≥ 37%
62%
51%
40%
27%
36%
27%
26%
67%
Table 4: Aggregate TTL Deviations
veying the record back to the requester but when storing the record
in its cache. Table 3 summarizes our results for aggregate behav-
ior. In total, 19% of the FDNSes and their underlying infrastruc-
ture always report the correct TTL value. Meanwhile, 38% of the
FDNSes respond with an incorrect TTL value to an initial request
and 9% of FDNSes respond with an incorrect TTL value to the
subsequent requests. The fact that at least 62% of FDNSes hon-
estly report the TTL on the ﬁrst DNS request will be important in
studying RDNSies below.
Beyond changing the TTL of DNS records, we ﬁnd some
FDNSes fail to correctly decrement the TTL over time5. We ﬁnd
that 7% of the FDNSes return a constant TTL value, never decre-
menting. An additional 1% of the FDNSes actually begin to incre-
ment the TTL after it counts down to zero! Both these behaviors
eventually result in a TTL which disagrees with the initial setting
by the ADNS. Downstream devices—regardless of how they treat
the TTL—may unwittingly use such records in violation of the in-
tent of the ADNS.
Table 4 shows the TTL deviations we observe including those
in response to both the initial and subsequent requests. The table
shows the percentage of cases when TTL is less than (“ %”) the ADNS-assigned value. In addition, we
show the most common TTL violation (mode lie) and the percent-
age of the lies the mode represents. For example, we ﬁnd 11% of
FDNSes deviate from a 1 second authoritative TTL. Further, 35%
of the lies are for a TTL of 10,000 seconds. The prevalence of lies
increases for both small and large TTL values. For instance, most
resolvers appear to cap the TTL at one week (604,800 seconds).
We next consider how long a record remains cached and accessi-
ble in the client-side DNS infrastructure. Using repeated probes at
the intervals mentioned above, we record the latest time at which a
record is returned to our probing host. While it is possible that the
record was still in some cache at this point and resolution merely
took a different path through the infrastructure, our experiment re-
ﬂects the behavior a user of the system would experience. Figure 12
shows the length of time records remain in some cache within the
resolving infrastructure. We present results for records with TTLs
5A resolver is supposed to decrement the TTL to account for time
spent in the resolver’s cache.
1
0.8
F
D
C
C
0.6
0.4
0.2
0
1
All 1M Sec
Accessible 1M Sec
Accessible 30 Sec
All 30 Sec
10
100
Record lifetime per aggregate cache (seconds)
1K
10K
100K
1M
Figure 12: Aggregate cached record lifetimes.
of 30 seconds, a short TTL value similar to those used by con-
tent delivery networks (e.g., Akamai uses 20 seconds and Lime-
light uses 350 seconds). Additionally we use records with TTLs of
1 million seconds, a value chosen to determine how long the infras-
tructure will retain rarely used records. The “All” lines reﬂect the
longest record lifetime we observe from a given FDNS. However,
a number of FDNSes become unreachable in the course of the ex-
periment. When this happens due to IP address reassignments as
discussed in §5.1.1, the records may still be in the cache. Thus,
the “All” line may be an underestimate of the length of time the in-
frastructure retains DNS records. Consequently, we report results
separately for the 189K FDNSes that remain accessible throughout
the experiment (the “Accessible” line). The true cache duration lies
somewhere between these two lines.
Our results show that 90% of FDNSes and their supporting in-
frastructure retain records with a TTL of 30 seconds for no longer
than the TTL—with 60% of the FDNSes retaining the record for
the full 30 seconds. We ﬁnd that 10% of FDNSes retain the record
for longer than the TTL—with 4% retaining the record for over 100
seconds. This indicates that in general short TTLs are relatively ef-
fective in controlling DNS caching behavior. These results deviate
from the ﬁndings from a 2004 passive study that shows TTL viola-
tions on the order of hours were not uncommon [17]. Furthermore,
the records assigned a TTL of 1 million seconds show much longer
retention, with 40% active for more than 1 hour. This indicates that
short cache retention of the records with TTLs of 30 seconds is due
to the TTL setting rather than cache capacity constraints.
7.2 FDNS Behavior
We now study the behavior of FDNSes in isolation by using
the record injection technique described in §5.3.1. We ﬁnd 683K
FDNSes in the S6 dataset (6%) accept our injected response records
and were thus amenable to our measurement.
We utilize the same experimental technique as in §7.1 with the
exception that we follow up the initial DNS request for a hostname
with a DNS response that binds the hostname to IP address X.
The same binding is never returned by our ADNS, so whenever X
appears in a DNS response we know the request was satisﬁed from
the FDNS’ cache. If the DNS response contains an address other
than X we know X is no longer in the FDNS’ cache. We perform
the experiment for the same TTL values and re-probe intervals as
in §7.1.
Table 5 summarizes our general ﬁndings on FDNS’ TTL behav-
ior. First, 60% of the FDNSes never lie with respect to the TTL.
However, we ﬁnd that 12% of FDNSes lie in response to the initial
request and 30% lie in response to the subsequent requests. As we
Behavior
Honest
Lie on Initial
Lie on Subsequent
Constant TTL
Incrementing TTL
Percentage of Measurements
60%
12%
30%
26%
10%
Table 5: FDNS TTL Behavior
Expected (sec) % 
Mode Lie
1
10-3600
10000
10800
86400
100000
604800
1000000
Value % of All Lies
0%
31% 10000
≤ 1% 19% 10000
88%
≥ 95%
1%
19%
19%
19%
19%
25%
60
0%
0% 10000
0% 10000
0% 10000
0% 10000
0% 10000
92%
97%
97%
97%
97%
75%
Table 6: FDNS TTL Deviations
note above, we interpret this latter behavior as due to the FDNS dis-
torting TTL not when conveying the record back to the origin but
when storing the record in its cache. We also determine that 26%
of FDNSes report a constant TTL value without ever decrementing
it. Finally, 10% of the FDNSes began to increment the TTL value
upon decrementing it to zero.
Table 6 shows the TTL deviations we observe for FDNSes, in-
cluding both initial and subsequent deviations. The table shows the
same general trend as aggregate behavior but with more deviations
at the low end of TTL spectrum and less prevalence of capping the
TTL at 1 week. The number of cases where the authoritative short
TTL is replaced by a 10,000 second value jumps by roughly 50%
for the authoritative TTL of 1 second as compared to 10 seconds.
Thus, the ADNS often will retain better control over FDNS caching
by assigning a TTL larger than 1 second.
We now consider how long a record remains accessible in the
cache of FDNSes. Using repeated probes at the intervals mentioned
above, we record the latest time at which the injected record is re-
turned to our probing host. Again, we present results for records
supplied by our ADNS with the TTLs set to 30 seconds and 1 mil-
lion seconds. Figure 13 shows how long the records are retained in
the caches. See §7.1 for an explanation of the “All” and “Accessi-
ble” lines. For this experiment, the “Accessible” line contains the
results for 22.5K (3.3%) of the 683K tested FDNSes.
The results show that roughly 40% of the FDNSes retain the
record with a TTL of 30 seconds for longer than the TTL. Addi-
tionally, 28% of FDNSes hold the record for over 100 seconds,
more than twice the TTL. This deviates from the aggregate results
in Figure 12 indicating that FDNSes which allow cache injection
are more likely to retain records past the TTL value than the general
FDNS population. We ﬁnd records with a TTL of 1 million seconds
are retained for at least 10,000 seconds in 50% of the FDNSes.
7.3 RDNSi Behavior
We now turn to the behavior of RDNSies in near isolation
from FDNSes. RDNSdies are particularly convenient in that we
can examine their behavior in perfect isolation since there is no
other actor to interfere with our results. We have results for 4.9K
RDNSdies. We use the same experimental technique as in §7.1
with the same TTL values and re-probe intervals. Table 7 shows
our general results while Table 8 shows the TTL deviations we ob-
F
D
C
C
1
0.8
0.6
0.4
0.2
0
1
All 1M Sec
Accessible 1M Sec
All 30 Sec
Accessible 30 Sec
10
100K
Record lifetime per FDNS cache (seconds)
10K
100
1K
1M
Figure 13: Distribution of record availability in FDNS caches
for records with TTLs of 30 and 1 million seconds.
Behavior
Honest
Lie on Initial
Lie on Subsequent
Constant TTL
Incrementing TTL
Percentage of Measurements
2%
80%
18%
0%
0%
Table 7: RDNSdi TTL Behavior
serve. RDNSdies do not exhibit either the constant TTL nor the
pathological TTL incrementing behavior we observe in FDNSes
and the aggregate data. However, there is more TTL distortion with
virtually no consistently honest RDNSdies.
For RDNSies that do not respond to direct probes, we leverage
the coordinated probing strategy to assess their violations. As de-
scribed in §5.3.2, we begin by requesting a unique hostname via
FDNS F1. Our ADNS responds to this query with two IP ad-
dresses, one random and the second uniquely bound to the RDNSi
from which the DNS request arrives. We assign the same set of
TTL values as in §7.1. Both records pass through RDNSi on the
return path to F1 and may be cached for subsequent requests. Next,
our experiment requests the same hostname via F2. If the RDNSi
still has the records in its cache and is leveraged by both F1 and
F2, the random IP address from the response to F1 will be re-used
and hence the response to F2 will show the same address.
However, at this point, any TTL deviations cannot be attributed
to the RDNSi, the FDNSes or even some HDNS in the path. To
gain conﬁdence in our attribution of TTL deviations to RDNSi, we
leverage two pieces of information. First, as noted in the previous
two sections, a signiﬁcant number of FDNSes are honest on the
initial DNS response. We ﬁnd 62% of FDNSes are honest on the
Expected (sec) % 
Mode Lie
1-120
1000
3600
10000
10800
86400
100000
604800
1000000
Value
3600
22%
3600
19%
86400
7%
3600
7%
3600
7%
3600
0%
86400
0%
0%
86400
0% 604800
0%
3%
3%
16%
16%
16%
40%
40%
88%
% of All Lies