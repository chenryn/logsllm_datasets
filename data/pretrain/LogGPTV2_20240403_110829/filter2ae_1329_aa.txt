# 堆利用系列之堆漏洞
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
我们要首先熟悉几种常见的堆漏洞类型，分别是Double Free，堆溢出以及UAF漏洞。一般是借助这些漏洞实现对free
chunk的内容进行改写，进而实现漏洞利用
## Double Free漏洞
顾名思义，这种漏洞的原因是由于错误导致2次对同一个chunk连续释放了两次导致。我们可以通过一个动态调试一个例子，看看对于double
free到底是如何影响堆的
    #include 
    #include 
    #include 
    int main(void)
    {
        puts("The goal of this is to show how we can edit a freed chunk using a Double Free bug.");
        puts("Editing freed chunks will allow us to overwrite heap metadata, which is crucial to a lot of heap attacks.");
        puts("However a bug to edit the heap metadata is often just one piece of the exploitation process.\n");
        printf("So we start off by allocating three chunks of memory. Let's also write some data to them.\n\n");
        char *ptr0, *ptr1, *ptr2;
        ptr0 = malloc(0x30);
        ptr1 = malloc(0x30);
        ptr2 = malloc(0x30);
        char *data0 = "00000000";
        char *data1 = "11111111";
        char *data2 = "22222222";
        memcpy(ptr0, data0, 0x8);
        memcpy(ptr1, data1, 0x8);   
        memcpy(ptr2, data2, 0x8);
        printf("Chunk0: @ %p\t contains: %s\n", ptr0, ptr0);
        printf("Chunk1: @ %p\t contains: %s\n", ptr1, ptr1);
        printf("Chunk2: @ %p\t contains: %s\n\n", ptr2, ptr2);
        printf("Now is where the bug comes in. We will free the same pointer twice (the first chunk pointed to by ptr0).\n");
        printf("In between the two frees, we will free a different pointer. This is because in several different versions of malloc, there is a double free check \n(however in libc-2.27 it will hit the tcache and this will be fine).\n");
        printf("It will check if the pointer being free is the same as the last chunk freed, and if it is the program will cease execution.\n");
        printf("To bypass this, we can just free something in between the two frees to the same pointer.\n\n");
        free(ptr0); //-----------------------> b1
        free(ptr1);
        free(ptr0); //-----------------------> b2
        printf("Next up we will allocate three new chunks of the same size that we freed, and write some data to them. This will give us the three chunks we freed.\n\n");
        char *ptr3, *ptr4, *ptr5;
        ptr3 = malloc(0x30); //--------------> b3
        ptr4 = malloc(0x30);
        ptr5 = malloc(0x30);
        memcpy(ptr3, data0, 0x8);
        memcpy(ptr4, data1, 0x8);   
        memcpy(ptr5, data2, 0x8);
        printf("Chunk3: @ %p\t contains: %s\n", ptr3, ptr3);  //-------------> b4
        printf("Chunk4: @ %p\t contains: %s\n", ptr4, ptr4);
        printf("Chunk5: @ %p\t contains: %s\n\n", ptr5, ptr5);
        printf("So you can see that we allocated the same pointer twice, as a result of freeing the same pointer twice (since malloc will reuse freed chunks of similar sizes for performance boosts).\n");
        printf("Now we can free one of the pointers to either Chunk 3 or 5 (ptr3 or ptr5), and clear out the pointer. We will still have a pointer remaining to the same memory chunk, which will now be freed.\n");
        printf("As a result we can use the double free to edit a freed chunk. Let's see it in action by freeing Chunk3 and setting the pointer equal to 0x0 (which is what's supposed to happen to prevent UAFs).\n\n");
        free(ptr3);
        ptr3 = 0x0;
        printf("Chunk3: @ %p\n", ptr3);
        printf("Chunk5: @ %p\n\n", ptr5);
        printf("So you can see that we have freed ptr3 (Chunk 3) and discarded it's pointer. However we still have a pointer to it. Using that we can edit the freed chunk.\n\n");
        char *data3 = "15935728";
        memcpy(ptr5, data3, 0x8);
        printf("Chunk5: @ %p\t contains: %s\n\n", ptr5, ptr5);
        printf("Just like that, we were able to use a double free to edit a free chunk!\n");
    }
我们编译好这个源代码，然后使用GEF GDB进行调试，笔者倾向于配合IDA看反编译代码。我们在b1处打断点，在GDB中观察heap的情况:
可以看到我们已经分配了3个chunk去存储了3个字符串。
而此时各种bin和tcache上面还是什么都没有，因为我们并没有释放任何chunk。  
为了避免double free的检测，需要在连续free之间添加一个free(ptr1)，这样就可以绕过double
free的检测,我们在b2进行断点在观察heap的情况
我们可以发现tcache的0x40大小的链表已经存储了两个free chunk。  
再通过在b3处下断点，观察double free给heap造成的影响：后来发现直接被检测出了double free
发现应该是glibc的版本太高了，已经无法这么简单地绕过double
free了，根据源代码中的提示，glibc版本为2.27，参考[关于Linux下更换不同glibc版本的解决方法](https://blog.csdn.net/weixin_44864859/article/details/107237134)，使用glibc-all-in-one和patchelf对编译好的二进制文件直接替换其ld和libc的链接库地址，指向2.27版本的再次进行调试.
在b2处的堆内存情况为
在b3处的堆内存情况为
经过两次释放我们我可以看到addr=0x555555758670这个chunk被放到了tcache 0x40 大小的链表上两次
在b4处下断点，观察新的3个malloc返回地址是什么，以及现在的heap状态
这个地方实际上GEF貌似是有点问题的，tcache里面实际上已经没有chunk了，count为0，但是还是显示有一个，这应该是是一个bug。
标准输出的结果
我们可以看出来，ptr3和ptr5实际上是返回的同一块地址。
因此当后面我们继续释放ptr3，并且把ptr3的值指向0x0,我们还是可以操作这个已经被释放的块的  
根据标准输出的结果
我们先不用管能够修改已经被释放的空闲块中的内容到底有什么用，我们只考虑现在我们的Double
free是可以实现这个目标的，当我把剩下的heapoveflow和UAF介绍完了再去解释修改空闲块到底有什么意义。
所以double free到能修改free
chunk最简单抽象是首先两次free同一块地址，然后再连续两次malloc相同大小，然后再free其中一个，那么剩下那个指针指向的就是空闲块的chunk，而且还是可以被修改的。总结就是2次free，2次malloc，一次free，最终得到可用的空闲块指针。
## 堆溢出漏洞
下面我们将通过一个堆溢出实例，观察堆溢出是如何触发了空闲块的融合，并且得到空闲块的控制权的。
    #include 
    #include 
    #include 
    int main(void)
    {
        puts("The goal of this is to show how we can edit a freed chunk using a heap overflow bug to cause consolidation.");
        puts("Editing freed chunks will allow us to overwrite heap metadata, which is crucial to a lot of attacks.");
        puts("However a bug to edit the heap metadata is often just one piece of the exploitation process.\n");
        printf("We will start off by allocating four separate chunks of memory. The first three will be used for the heap consolidation.\n");
        printf("The last one will be used to essentially separate this from the heap wilderness, and we won't do anything with it.\n\n");
        unsigned long *ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5;
        ptr0 = malloc(0x500);
        ptr1 = malloc(0x70);
        ptr2 = malloc(0x500);
        ptr3 = malloc(0x30);
        printf("Chunk 0: %p\t Size: 0x500\n", ptr0);
        printf("Chunk 1: %p\t Size: 0x70\n", ptr1);
        printf("Chunk 2: %p\t Size: 0x500\n", ptr2);
        printf("Chunk 3: %p\t Size: 0x30\n\n", ptr3);
        printf("Now the reason why the first and second chunks are 0x500 in sizes, is because they will be the ones we are freeing. In the most recent libc versions (2.26 & 2.27), there is a tcache mechanism.\n");
        printf("If these chunks were much smaller, they would be stored in the tcaching mechanism and this wouldn't work. So I made them large so they wouldn't end up in the tcache.\n\n");
        printf("Start off by freeing ptr0, and clearing the pointer (which is often done when heap chunks get freed to avoid a use after free).\n\n");
        free(ptr0);  //---------->b1
        ptr0 = 0;    //---------->b2
        printf("Chunk 0: %p\n\n", ptr0);
        printf("Now is where the heap overflow bug comes into play. We will overflow the heap metadata of ptr2. We can see that the size of ptr2 is 0x511.\n\n");
        printf("Size of Chunk 2 @ %p\t Metadata Size: 0x%lx\n\n", ptr2, ptr2[-1]);
        printf("0x500 bytes for the data, 0x10 bytes for the metadata, and 0x1 byte to designate that the previous chunk is in use. Our overflow will overwrite this, and the previous size value.\n");
        printf("We will overwrite the size to be 0x510, essentially clearing the previous in use bit. This way when we free this chunk, it will think that the previous chunk has been freed (which it hasn't).\n");
        printf("So following that, we will place a fake previous size which is the previous QWORD behind the size. We will put it as 0x590, so it thinks that the previous chunk goes all the way back to where Chunk 0 is.\n");
        printf("Then when we free Chunk 2, it will consolidate the heap past chunk 1 and up to chunk 0. Then we can start allocating memory from where Chunk 0, and get an overlapping pointer to where Chunk 1 is, since it thinks it has been freed.\n");
        printf("Let's do the overwrite.\n\n");
        ptr1[14] = 0x590;
        ptr1[15] = 0x510;
        printf("Chunk 2 @ %p\nPrevious Size: 0x%lx\nSize: 0x%lx\n\n", ptr2, ptr2[-2], ptr2[-1]);
        printf("Now we free chunk 2 to cause consolidation.\n\n");
        free(ptr2); //------------------>b3
        ptr2 = 0;   //------------------>b4
        printf("Now we can allocate a 0x500 chunk and an 0x70 chunk, and we wil get a pointer to where chunk 1 was.\n\n");
        ptr4 = malloc(0x500);
        ptr5 = malloc(0x70);    
        printf("Chunk 4: %p\t Size: 0x500\n", ptr4);
        printf("Chunk 5: %p\t Size: 0x30\n\n", ptr5);
        printf("With that we can just free Chunk 1 (which is the same as Chunk 5), and we will be able to edit a freed heap chunk.\n\n");