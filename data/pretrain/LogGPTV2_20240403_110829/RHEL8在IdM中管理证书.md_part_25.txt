默认情况下，RHEL 8 上的 Apache HTTP
服务器使用系统范围的加密策略来定义安全默认值，这些默认值与当前的浏览器兼容。例如：
`DEFAULT`{.literal} 策略定义了在 apache 中只启用 `TLSv1.2`{.literal} 和
`TLSv1.3`{.literal} 协议版本。
本节论述了如何手动配置您的 [**my_company.idm.example.com**]{.strong}
Apache HTTP 服务器支持的 TLS 协议版本。如果您的环境只需要启用特定的 TLS
协议版本，请按照以下步骤操作，例如：
::: itemizedlist
-   如果您的环境要求客户端也可以使用弱的 `TLS1`{.literal} (TLSv1.0)或者
    `TLS1.1`{.literal} 协议。
-   如果您想将 Apache 配置为只支持 `TLSv1.2`{.literal} 或
    `TLSv1.3`{.literal} 协议。
:::
::: itemizedlist
**先决条件**
-   在 [**my_company.idm.example.com**]{.strong} 服务器上启用了 TLS
    加密，如 ["在 Apache HTTP 服务器中添加 TLS
    加密"一节](#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#proc_adding-tls-encryption-to-an-apache-http-server-configuration_restricting-an-application-to-trust-a-subset-of-certs "在 Apache HTTP 服务器中添加 TLS 加密"){.xref}
    所述。
:::
::: orderedlist
**流程**
1.  编辑 `/etc/httpd/conf/httpd.conf`{.literal} 文件，并在您要为其设置
    TLS 协议版本的 ``{.literal}
    指令中添加以下设置。例如，仅启用 `TLSv1.3`{.literal} 协议：
    ``` literallayout
    SSLProtocol -All TLSv1.3
    ```
2.  重启 `httpd`{.literal} 服务：
    ``` literallayout
    # systemctl restart httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  使用以下命令验证服务器支持 `TLSv1.3`{.literal}：
    ``` literallayout
    # openssl s_client -connect example.com:443 -tls1_3
    ```
2.  使用以下命令验证服务器不支持 `TLSv1.2`{.literal}：
    ``` literallayout
    # openssl s_client -connect example.com:443 -tls1_2
    ```
    如果服务器不支持该协议，命令会返回一个错误：
    ``` literallayout
    140111600609088:error:1409442E:SSL routines:ssl3_read_bytes:tlsv1 alert protocol version:ssl/record/rec_layer_s3.c:1543:SSL alert number 70
    ```
3.  可选：重复用于其他 TLS 协议版本的命令。
:::
::: itemizedlist
**其它资源**
-   有关系统范围的加密策略的详情，请查看
    `update-crypto-policies(8)`{.literal} man page
    和[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
-   有关 `SSLProtocol`{.literal} 参数的详情，请参考 Apache 手册中的
    `mod_ssl`{.literal} 文档。[有关安装手动的详情，请参阅安装 Apache
    HTTP
    服务器手册](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/deploying_different_types_of_servers/index#installing-the-apache-http-server-manual_setting-apache-http-server){.link}。
:::
:::
::: section
::: titlepage
# []{#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#setting-the-supported-ciphers-on-an-apache-http-server_restricting-an-application-to-trust-a-subset-of-certs}在 Apache HTTP 服务器中设置支持的密码 {.title}
:::
默认情况下，RHEL 8 上的 Apache HTTP
服务器使用系统范围的加密策略来定义安全默认值，这些默认值与当前的浏览器兼容。有关系统范围加密允许的密码列表，请查看
`/etc/crypto-policies/back-ends/openssl.config`{.literal} 文件。
这部分论述了如何手动配置 [**my_company.idm.example.com**]{.strong}
Apache HTTP
服务器支持的密码。如果您的环境需要特定的加密系统，请按照以下步骤操作。
::: itemizedlist
**先决条件**
-   在 [**my_company.idm.example.com**]{.strong} 服务器上启用了 TLS
    加密，如 ["在 Apache HTTP 服务器中添加 TLS
    加密"一节](#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#proc_adding-tls-encryption-to-an-apache-http-server-configuration_restricting-an-application-to-trust-a-subset-of-certs "在 Apache HTTP 服务器中添加 TLS 加密"){.xref}
    所述。
:::
::: orderedlist
**流程**
1.  编辑 `/etc/httpd/conf/httpd.conf`{.literal} 文件，将
    `SSLCipherSuite`{.literal} 参数添加到您要为其设置 TLS 密码的
    ``{.literal} 指令中：
    ``` literallayout
    SSLCipherSuite "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:!SHA1:!SHA256"
    ```
    这个示例只启用
    `EECDH+AESGCM`{.literal}、`EDH+AESGCM`{.literal}、`AES256+EECDH`{.literal}
    和 `AES256+EDH`{.literal} 密码，并禁用所有使用 `SHA1`{.literal} 和
    `SHA256`{.literal} 消息验证代码(MAC)的密码。
2.  重启 `httpd`{.literal} 服务：
    ``` literallayout
    # systemctl restart httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  显示 Apache HTTP 服务器支持的密码列表：
    ::: orderedlist
    1.  安装 `nmap`{.literal} 软件包：
        ``` literallayout
        # yum install nmap
        ```
    2.  使用 `nmap`{.literal} 工具显示支持的加密系统：
        ``` literallayout
        # nmap --script ssl-enum-ciphers -p 443 example.com
        ...
        PORT    STATE SERVICE
        443/tcp open  https
        | ssl-enum-ciphers:
        |   TLSv1.2:
        |     ciphers:
        |       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (ecdh_x25519) - A
        |       TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 (dh 2048) - A
        |       TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 (ecdh_x25519) - A
        ...
        ```
    :::
:::
::: itemizedlist
**其它资源**
-   有关系统范围的加密策略的详情，请查看
    `update-crypto-policies(8)`{.literal} man page
    和[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
-   有关 `SSLCipherSuite`{.literal} 参数的详情，请参考 Apache 手册中的
    `mod_ssl`{.literal} 文档。[有关安装手动的详情，请参阅安装 Apache
    HTTP
    服务器手册](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/deploying_different_types_of_servers/index#installing-the-apache-http-server-manual_setting-apache-http-server){.link}。
:::
:::
::: section
::: titlepage
# []{#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#configuring-tls-client-certificate-authentication_restricting-an-application-to-trust-a-subset-of-certs}配置 TLS 客户端证书身份验证 {.title}
:::
客户端证书身份验证仅允许使用证书进行身份验证的用户访问
[**my_company.idm.example.com**]{.strong} Web
服务器上的资源。本节论述了如何为 `/var/www/html/Example/`{.literal}
目录配置客户端证书验证。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果 [**my_company.idm.example.com**]{.strong} Apache 服务器使用 TLS 1.3
协议，则某些客户端需要额外的配置。例如，在 Firefox 中，将
`about:config`{.literal} 菜单中的
`security.tls.enable_post_handshake_auth`{.literal} 参数设置为
`true`{.literal}。详情请查看 [Red Hat Enterprise Linux 8
中的传输层安全版本
1.3](https://www.redhat.com/en/blog/transport-layer-security-version-13-red-hat-enterprise-linux-8){.link}。
:::
::: itemizedlist
**先决条件**
-   在 [**my_company.idm.example.com**]{.strong} 服务器上启用了 TLS
    加密，如 ["在 Apache HTTP 服务器中添加 TLS
    加密"一节](#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#proc_adding-tls-encryption-to-an-apache-http-server-configuration_restricting-an-application-to-trust-a-subset-of-certs "在 Apache HTTP 服务器中添加 TLS 加密"){.xref}
    所述。
:::
::: orderedlist
**流程**
1.  编辑 `/etc/httpd/conf/httpd.conf`{.literal}
    文件并在您要配置客户端身份验证的 ``{.literal}
    指令中添加以下设置：
    ``` literallayout
      SSLVerifyClient require
    ```
    `SSLVerifyClient require`{.literal}
    设置定义了服务器必须成功验证客户端证书，然后客户端才能访问
    `/var/www/html/Example/`{.literal} 目录中的内容。
2.  重启 `httpd`{.literal} 服务：
    ``` literallayout
    # systemctl restart httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  使用 `curl`{.literal} 实用程序在没有客户端验证的情况下访问
    `https://my_company.idm.example.com/Example/`{.literal} URL：
    ``` literallayout
    $ curl https://my_company.idm.example.com/Example/
    curl: (56) OpenSSL SSL_read: error:1409445C:SSL routines:ssl3_read_bytes:tlsv13 alert certificate required, errno 0
    ```
    此错误表示 [**my_company.idm.example.com**]{.strong} Web
    服务器需要客户端证书身份验证。
2.  将客户端私钥和证书以及 CA 证书传递给
    `curl`{.literal}，以便通过客户端身份验证来访问该 URL：
    ``` literallayout
    $ curl --cacert ca.crt --key client.key --cert client.crt https://my_company.idm.example.com/Example/
    ```
    如果请求成功，`curl`{.literal} 会显示存储在
    `/var/www/html/Example/`{.literal} 目录中的 `index.html`{.literal}
    文件。
:::
::: itemizedlist
**其它资源**
-   有关客户端验证的详情，请查看 Apache 手册中的
    `mod_ssl Configuration How-To`{.literal}
    文档。[有关安装手动的详情，请参阅安装 Apache HTTP
    服务器手册](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/deploying_different_types_of_servers/index#installing-the-apache-http-server-manual_setting-apache-http-server){.link}。
:::
:::
::: section
::: titlepage
# []{#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#requesting-and-exporting-a-user-certificate_restricting-an-application-to-trust-a-subset-of-certs}请求新的用户证书并将其导出到客户端 {.title}
:::
作为身份管理(IdM)管理员，您可以配置在 IdM 客户端上运行的 Web
服务器，以请求使用 Web 浏览器访问服务器的用户对特定 IdM 子 CA
发布的证书进行身份验证。完成此部分，从特定的 IdM 子 CA
请求用户证书，并将 上的证书和对应的私钥导出到用户希望使用 Web 浏览器访问
Web
服务器的主机。[之后，将证书和私钥导入到浏览器中](#restricting-an-application-to-trust-only-a-subset-of-certificates_working-with-idm-certificates.html#configuring-browser-for-cert-auth_restricting-an-application-to-trust-a-subset-of-certs "配置浏览器以启用证书身份验证"){.link}。
::: orderedlist
**流程**
1.  另外，还可创建一个新目录，例如
    `~/certdb/`{.literal}，并使其成为临时证书数据库。当系统提示时，创建一个
    NSS 证书数据库密码来加密后续步骤中生成的证书的密钥：
    ``` literallayout
    # mkdir ~/certdb/
    # certutil -N -d ~/certdb/
    Enter a password which will be used to encrypt your keys.
    The password should be at least 8 characters long,
    and should contain at least one non-alphabetic character.
    Enter new password:
    Re-enter password:
    ```
2.  创建证书签名请求(CSR)，并将输出重定向到文件。例如，要为
    `certificate_request.csr`{.literal} 域中的 `4096`{.literal}
    用户创建名称为 `idm_user`{.literal} 的 CSR，请将证书私钥的 nickname
    设置为 `IDM.EXAMPLE.COM`{.literal} 以获得易找到性，并设置为
    `idm_user`{.literal} ： `CN=idm_user,O=IDM.EXAMPLE.COM`{.literal}
    ``` literallayout
    # certutil -R -d ~/certdb/ -a -g 4096 -n idm_user -s "CN=idm_user,O=IDM.EXAMPLE.COM" > certificate_request.csr
    ```
3.  提示时，输入您在使用 `certutil`{.literal}
    创建临时数据库时输入的相同密码。然后继续键入 rundlomly
    直到通知停止：
    ``` literallayout
    Enter Password or Pin for "NSS Certificate DB":
    A random seed must be generated that will be used in the
    creation of your key.  One of the easiest ways to create a
    random seed is to use the timing of keystrokes on a keyboard.
    To begin, type keys on the keyboard until this progress meter
    is full.  DO NOT USE THE AUTOREPEAT FUNCTION ON YOUR KEYBOARD!
    Continue typing until the progress meter is full:
    ```
4.  将证书请求文件提交到服务器。指定要与新发布的证书关联的 Kerberos
    主体、存储证书的输出文件，以及可选的证书配置集。指定您要签发证书的
    IdM 子 CA。例如，要获取 `IECUserRoles`{.literal}
    配置集的证书，带有添加的用户角色扩展的配置文件，来自
    `webclient-ca`{.literal} 的
    `idm_user`{.literal}@`IDM.EXAMPLE.COM`{.literal}
    主体，并将证书保存到 `~/idm_user.pem`{.literal} 文件中：
    ``` literallayout
    # ipa cert-request certificate_request.csr --principal=PI:EMAIL --profile-id=IECUserRoles --ca=webclient-ca --certificate-out=~/idm_user.pem
    ```
5.  将证书添加到 NSS 数据库。使用 `-n`{.literal} 选项设置之前创建 CSR
    时使用的相同 nickname，以便证书与 NSS
    数据库中的私钥匹配。`-t`{.literal} 选项设定信任级别。详情请查看
    certutil(1)man page。`-i`{.literal} 选项指定输入证书文件。例如：要在
    NSS 数据库中添加带有 `idm_user`{.literal} nickname
    的证书，该证书存储在 `~/certdb/`{.literal} 数据库的
    `~/idm_user.pem`{.literal} 文件中：