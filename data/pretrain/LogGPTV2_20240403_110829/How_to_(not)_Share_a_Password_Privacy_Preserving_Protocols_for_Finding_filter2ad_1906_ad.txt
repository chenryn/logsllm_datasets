1. The device does not receive any output from the computation.
2. The server is allowed to learn a single bit about the input of the device (this feature is a
byproduct of learning the inner-product, but we can also use it for designing a more eﬃcient
two-party protocol).
In our implementation, the server is the constructor of the circuit, and will also learn the output
of the computation. We make a minor change to Yao’s protocol to enable the device to verify that
the circuit outputs only a single bit. The device cannot, however, know which function is computed
by the circuit (the device can verify the circuit’s topology, but not the function computed). The
server can therefore use the circuit to learn other one-bit functions of the input of the device. This
is still ﬁne by our security requirements, but we need to re-deﬁne the ideal functionality to model
this computation. The modiﬁed functionality appears in Functionality 3.
The protocol we use is based on the observation that running the basic Yao protocol, which is
only guaranteed to provide security against semi-honest adversaries, is actually also secure against
malicious circuit evaluators (this was also used in the dual execution paradigm [MF06], and follow
up work [KMRR15,RR16]).
The parties run Yao’s semi-honest protocol, with two modiﬁcations:
1. The oblivious transfers are secure against malicious adversaries. They can be implemented, e.g.
using the protocols of [PVW08,CO15], whose overhead consists of only a few exponentiations.
4 We are only interested in running a single computation, and therefore there is no beneﬁt in using proto-
cols which reduce the amortized overhead of cut-and-choose over many computations of the same function, as
in [HKK+14,LR15].
17
Functionality 3 (Yao’s protocol modiﬁed inner-product)
· Input:
• The server sends to the TTP the following inputs:
∗ An (cid:96)-bit input rs
j .
∗ A circuit computing a function F which receives two (cid:96)-bit inputs and outputs a single bit.
· Output:
• The device sends to the TTP an (cid:96)-bit input v.
• The output of the server is F (h, rs
j ).
• The device learns no output.
2. The server provides in advance the output of a collision-resistant hash function applied to the
two possible garbled outputs of the circuit. The device veriﬁes, before sending the garbled output
to the server, that the garbled output hashes to one of these values. (This guarantees that the
circuit can have only two valid outputs.)
We assume that the reader is familiar with Yao’s garbled circuit protocol. The protocol we
suggest includes the following steps:
1. The server prepares a garbling of a circuit computing the inner product of two (cid:96)-bit inputs. In
addition, it applies the hash function to the two garbled values of the output wire of the circuit
and records the results.
2. The parties run (cid:96) invocations of 1-out-of-2 oblivious transfer, one for each of the (cid:96) input wires
corresponding to the device’s input. The server is the sender, and in each OT the device learns
one of the two garbled values of the corresponding input wire. The oblivious transfers are im-
plemented using an oblivious transfer protocol that is secure against malicious adversaries.
3. The server sends to the device (1) the garbled tables of all gates, (2) the garbled values corre-
sponding to the input wires of the server, and (3) the hash values of the two possible garbled
values of the single output wire (sent in random order).
4. The device evaluates the circuit’s garbled output value, and compares the hash of this value to
the two hashes of the output wire sent by the server. If there is a match then it sends the garbled
value to the server.
5. The server receives the garbled output value and translates it to the 0/1 value of the inner
product.
Overhead. We note that the circuit size is very small (2(cid:96) − 1 gates, where (cid:96) is typically equal to
16, 24 or 32), whereas current implementations of Yao’s protocol can process millions of gates per
second. The run times of each oblivious transfer is at most a few milliseconds (see, e.g., [CO15]).
Security analysis of the protocol The full security analysis of the protocol can be found in
Appendix C.
6 Quadratic Residuosity Based Inner Product Protocol
The goal of the protocol is to implement the secure functionality described in Figure 2 and calculate
the inner product (cid:104)Vs, Rs(cid:105) between a device’s (D) input Vs and a server’s (S ) input Rs in a
malicious setting. This functionality requires that S only learns the result, while D learns nothing
and is not able to deviate from the protocol.
We use the following notation regarding a composite number N = p · q:
(cid:1) is the Jacobi symbol of a with respect to N (which is easy to calculate).
1. (cid:0) a
N
18
(cid:1) (cid:54)= 1. Else
2. QRN (nQRN ) is the set of all numbers that are (non) quadratic residues modulo N, and have a
3. TQRN (a) tests the quadratic residuosity of a in respect to N . The output is ⊥ if(cid:0) a
Jacobi symbol 1.
the output is 0 if a ∈ QRN and 1 otherwise. The quadratic residuosity assumption implies that
computing this function requires the knowledge of p and q.
4. The notation R← denotes that an item is chosen uniformly at random from a speciﬁc domain. In
particular,
· a R← QRN (nQRN ) denotes that the value a is chosen uniformly at random from QRN
(nQRN ).
R← π{(cid:96)} denotes that the permutation πa is chosen uniformly at random from the family
· πa
of permutations on (cid:96) items.
· x R← {0, 1}(cid:96) denotes that the value x is chosen uniformly at random from {0, 1}(cid:96).
5. Capital letters such as Vs denote vectors of numbers in {0, 1}, lowercase letters such as rp denote
N
vectors of numbers in ZN .
The protocol is based on the intractability of the quadratic residuosity (QR) assumption. Under
this assumption it is hard to distinguish whether x R← QRN or x R← nQRN where(cid:0) x
(cid:1) = 1 (with
N
non-negligible advantage) without knowledge of the factorization of N .
We use this assumption for encrypting vector Rs of the server S in a similar way to the
famous Goldwasser-Micali public encryption scheme [GM84]. In particular, we use the homomorphic
properties of this scheme – i.e. if x, y ∈ QRN and a, b ∈ nQRN then xy, ab ∈ QRN and ax ∈ nQRN .
This also allows us to ‘blind’ an encryption: we create a new encryption which is decrypted to the
same bit but cannot be connected to the original one by multiplying with a random square.
6.1 Protocol - Semi-honest Version
We will start by describing the semi-honest version of the protocol. For each device D , the server
S generates a unique public and secret key pair SK = (p, q), P K = N = p · q (p and q are primes
and |N| depends on a security parameter k1). S then encodes Rs as a public vector rp ∈ Z(cid:96)
N that
is sent to D . Each number rp,i is a public-key encryption of the corresponding bit Rs,i:
· 0 is encoded as a QR: if Rs,i = 0: rp,i
· 1 is encoded as a nQR: if Rs,i = 1: rp,i
D calculates the product of the numbers in rp corresponding to the 1 bits in Vs, and blinds the
result by multiplying it with a random QR:
R← QRN .
R← nQRN .
(cid:96)(cid:89)
e = d2 ·
(rp,i)Vs,i where d R← ZN
After receiving e from D , S learns the result of the inner product:
i=1
result = TQRN (e)
Under the QR, assumption D does not learn anything (in the semantic security sense) about Rs.
Due to the homomorphic properties of the encryption, a product of encoded bits gives an encoding
for the xor of the bits. We get that e encodes the inner product result.
19
The blinding by d2 does not change the result (it is equivalent to an exclusive-or with zero).
However, because d is chosen uniformly at random in QRN , then e is also distributed uniformly
at random inside its class (either QRN or nQRN ). This ensures that the S only learns the one-bit
result of the inner product.
Insecurity in the malicious setting? The attack we wish to prevent is anti-correlation with
a certain password (or passwords). Applying this attack is easy given a member of nQRN , since
multiplying the answer with an nQRN number ﬂips the result5. However, under the QR assumption,
we do not know if it is easy or hard to ﬁnd a single number x such that x ∈ nQRN (with probability
better than 1/2). By assuming that ﬁnding x ∈ nQRN for certain N ’s is indeed hard we do not
need to change the semi-honest protocol to handle the malicious case, but we take the conservative
path of not adding new assumptions.
6.2 Malicious Setting: Naive Implementation
The basic approach for handling the malicious case is to add a zero-knowledge proof by the device
D to prevent malleability attacks. We begin the exposition with a naive implementation that is
secure against a malicious D, but allows S to learn more than one bit of information about Vs.
D creates a vector r∗ that is a permuted and “blinded” version of the vector rp that it received
from the server. That is, the device blinds each value in rp by multiplying it with a random QRN
and randomly permutes the resulting vector. D then sends to S the list of indexes of the numbers
in r∗ that correspond to the 1 bits in D ’s vector. S can then compute the multiplication of these
numbers.
Since S must not learn how many bits equal to 1 in D ’s vector, we pad rp with (cid:96) numbers
that are in QRN . This allows D to always send a product of exactly (cid:96) numbers regardless of the
Hamming weight of its vector Vs.
D proves to S that r∗ is indeed a blind permutation of rp. This is done by generating a vector
rj that is a blinded permutations of r∗, and proving to S that D knows how to “open” this vector
either to r∗ or to rp (this is in the style of the zero-knowledge proof of Hamiltonicity). A cheating
D is caught with probability 1/2. D must therefore use k2 vectors rj, and then the probability of
D to deviate from the protocol is 2−k2.
Device setup Phase D generates and saves the following data.
1. r = rp||pad2 where pad R← Z(cid:96)
2. V = Vs||Vs where Vs,i = 1 − Vs,i.
3. π∗ R← π{2(cid:96)}, d∗ R← Z2(cid:96)
N . D generates a random permutation π∗ on 2(cid:96) items, while d∗ are 2(cid:96)
4. r∗ = π∗(r · (d∗)2), V∗ = π∗(V ). r∗ is a blinded random permutation of r, and V∗ is the same
N . We pad rp with (cid:96) numbers in QRN .
random numbers.
5. e =(cid:81)2(cid:96)
i=1(ri(d∗,i)2)Vi =(cid:81)2(cid:96)
permutation of V .
i=1(r∗,i)V∗,i. e is the product of the blinded items in r corresponding
to the 1 bits in V . The bit that is encoded is the result of the inner product.
6. For j = 1 . . . k2:
5 That is, if e is the appropriate answer for the password that a malicious D wishes to undercount, then by sending
e(cid:48) = e · x the count is decreased
20
R← π{2(cid:96)}, dj
R← Z2(cid:96)
(a) πj
(b) rj = πj(r∗ · (dj)2) is a blinded random permutation of r∗
random numbers.
N . D generates a random permutation π∗ on 2(cid:96) items, while d∗ are 2(cid:96)
7. D sends (r∗, V∗, pad) to S.
2. S calculates e =(cid:81)2(cid:96)
Interactive proof phase The server ﬁrst computes the result.
1. S calculates r = rp||pad2 using the vector pad it received from D and rp that it stored locally.
i=1(r∗,i)V∗,i. Namely, e is the product of the items in r∗ corresponding to the
1 bits in V∗.
3. S calculates result = TQRN (e), to retrieve the inner product.
Then the server veriﬁes the result using an interactive proof for j = 1, . . . , k2:
1. D sends rj to S
2. S sends bj
3. if bj = 0
R← 0, 1 to D
(a) D sends to S (π∗,j = πjπ∗, d∗,j = πj(π∗(d∗) · dj), opening the blinded permutation from r
(b) S veriﬁes that rj = π∗,j(r) · (d∗,j)2.
to rj.
4. else
(a) D sends to S (πj, dj), opening the blinded permutation from r∗ to rj.
(b) S veriﬁes that rj = πj(r∗ · dj
2).
Information leakage in the naive implementation S receives a blinded version of the numbers
used in the inner product calculation (the numbers in r∗ corresponding to the ‘1’ bits in V∗).
However, recall that S can ﬁnd the sign of TQRN (x) for any x. This lets it learn the exact number
of 1 bits in the device’s vector Vs that correspond to 1 bits in the server’s vector Rs. For example,
S can choose Rs to be all ‘1’ and use it to learn the Hamming weight of Vs.
6.3 The Full Protocol
The main diﬀerence between the full and naive protocols is that instead of sending the vector r∗,
D sends a vector s∗ containing the squares of the entries of r∗, and also the indexes of the entries
in r∗ which correspond to D ’s 1 bits, and the result e of multiplying these entries. As all the
numbers in s∗ are in QRN , the vector that D sends is indistinguishable from a random vector
in QR2(cid:96)
N and leaks no information. Nonetheless, the server can verify that e is indeed the square
root of the multiplication of the (cid:96) elements in s∗ which correspond to 1 bits. We prove that under
some restriction on the generation of N the soundness of the modiﬁed protocol holds. The complete
protocol is described in Appendix F.
Non-interactive proof The interactive part of the protocol can be converted into a non-interactive
proof. In addition, the results of S setup can be stored on D, and this allows the implemented
protocol to include only a single message from D to S.
The conversion is done using the Fiat-Shamir heuristic [FS86] in the (non-programmable) ran-
dom oracle model.
21
Completeness, Soundness and Zero-Knowledge Proof The full proofs can be found in Ap-
pendix F.
6.4
Implementation Considerations
Reusing rp The vector rp can be re-used for repeated runs of the protocol, without any eﬀect
on the security from S ’s viewpoint. From D’s side, re-using rp helps by limiting the number of
password bits that can be leaked to one, even if the same password is chosen multiple times (e.g.
if D was reset, or the user changed back to an old password).
As rp is ﬁxed, it can be stored on D in production and not sent over the network. This saves
the ﬁrst message in the protocol.
Interactive vs. Non-Interactive As was mentioned above, the protocol can be turned into a
non-interactive protocol, allowing D to prepare and send a single message. S can then verify and
add the result to the gathered statistics with minimal interaction.
This advantage comes with a price. In the interactive setting k2 is a parameter of the probability
of deviating from the protocol p(k2) = 2−k2. For all practical usages setting k2 to be between 10
and 30 should be more than suﬃcient. However, in the non-interactive proof k2 is a parameter of
the amount of preprocessing work necessary for deviating from the protocol (O(2k2)), and we will
usually require a much larger value of k2 (e.g. 80 or 128).