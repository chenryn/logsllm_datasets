Similarly, if two target objects are allocated in one primi-
tive, there is only one instrumentation point available for ﬁll
primitives. It also causes trouble for heap layout manipulation.
6 EVALUATION
We implemented a prototype of MAZE based on the binary
analysis engine S2E [13]. It has over 16K lines of code to
extract heap layout primitives and analyze their semantics,
and over 12K lines of code to infer the desirable heap layout
interaction sequence. Then, we evaluated its performance in
a Ubuntu 17.04 system running on a server with 115G RAM
and Intel Xeon (R) CPU E5-2620 @ 2.40GHz*24.
6.1 Result Overview
We evaluated MAZE in the following three different set-
tings. All programs are tested in a regular modern Linux
operating system (Ubuntu 17.04), with the defense DEP [37]
and ASLR [38] enabled.
CTF benchmarks: We evaluated MAZE against 23 vul-
nerable programs collected from 20 CTF competition, most
of them can be found in CTFTIME [39].
Out of 23 programs, MAZE can hijack control ﬂow for 5,
leak arbitrary memory address information for 1, and success-
fully generate an exploitable heap layout for another 10. But
it also failed to manipulate the heap layout for 7 programs.
PHP benchmark: We collected 5 public PHP vulnera-
bilities (CVE-2013-2110, CVE-2015-8865, CVE-2016-5093,
CVE-2016-7126 and CVE-2018-10549) and used their over-
ﬂowed buffers as source objects. And then, we selected 10
data structures with exploitable data ﬁelds (e.g., code pointers)
and use them as destination objects. By pairing each source
object with destination object, we could get 50 expected heap
layouts, in which the destination object is placed right after
the source object. This setting is same as Gollum [9].
Table 1: CTF programs successfully processed by MAZE.
Name
sword
hacknote
fheap
main
cat
asvdb
note3
stkof
Secure-Key-
Manager
RNote2
babyheap
secret-of-my-
heart
Mem0
quotes_list
freenote
databank
CTF
PicoCTF ’18
Pwnable.tw
HCTF ’16
RHme3 CTF ’17
ASIS Qual ’18
ASIS Final ’18
ZCTF ’16
HITCON ’14
SECCON ’17
RCTF ’17
RCTF ’18
Pwnable.tw
ASIS Final ’18
FireShell ’19
0CTF ’15
Bsides Delhi
Final State
Vul Type
EIP hijack
UAF
EIP hijack
UAF
EIP hijack
UAF
UAF
Memory write
Double free Memory write
Double free Memory leak
Unlink attack
Heap bof
Unlink attack
Heap bof
Unlink attack
Heap bof
Heap bof
Unlink attack
Unlink attack
Off-by-one
Unlink attack
Off-by-one
Unlink attack
Off-by-one
Unlink attack
Off-by-one
Double free
Unlink attack
fastbin attack
UAF
Table 2: CTF programs that MAZE failed to exploit.
Name
multi-heap
SimpleGC
vote
Auir
Secret Note V2
jmper
video-player
CTF
TokyoWesterns
34c3
N1CTF ’18
CSAW ’17
HITCON ’18
SECCON ’16
SECCON ’17
Failed Reason
Multi thread
Multi thread
Multi thread
Path explosion
Path explosion
Path explosion
Random layout
Vul Type
UAF
UAF
UAF
UAF
Heap bof
Off-by-one
UAF
MAZE can generate all expected layouts in 68 seconds, far
faster than SHRIKE and Gollum. What’s more, MAZE is fully
automated. By comparison, both SHRIKE and Gollum need a
template provided by security experts to guide the heap layout
manipulation process.
Python and Perl benchmark: We evaluated MAZE on
Python and Perl. And MAZE can solve all the 10 vulnerabili-
ties within 2 minutes.
Synthetic benchmarks: To thoroughly evaluate MAZE’s
Dig & Fill algorithm against other solutions, we referred to
the synthetic benchmarks used in SHRIKE [8]. Besides layout
noise, we added more factors to evaluate how they impact the
effectiveness of layout manipulation. We evaluated MAZE
against more than 3000 randomly generated test cases on two
heap allocators: ptmalloc [25] and dlmalloc [26].
We evaluated the inﬂuence of noises. The result shows that
if there are more than two primitives, the success rate remains
at more than 95%, regardless of the number of noises.
We also evaluated MAZE against more complicated heap
layout constraints which could even lead to nonlinear addi-
tivity of primitives. The result shows that it only impacts a
proportion of different types of Diophantine equations. And
the success rate remains at more than 90%.
In the end, we also evaluated MAZE against multi-object
heap layout constraint for the heap allocator ptmalloc. The
result shows that the success rate is still more than 95%.
6.2 CTF Benchmark
The details of all CTF programs evaluated by MAZE, are
shown in Table 1 and 2.
1656    30th USENIX Security Symposium
USENIX Association
Table 3: Heap layout primitives results on CTF programs.
Program
sword
hacknote
fheap
main
cat
asvdb
note3
stkof
babyheap
secret...
Mem0
Secure...
quotes...
freenote
RNote2
databank
Paths
118
8
55
182
44
7440
198
30
18
12
183
1332
98
1068
62
100
Symbolized
Paths
11
5
5
8
10
10
6
11
6
4
11
55
5
7
6
11
Independent
Primitives
5
3
4
4
4
6
4
1
3
2
8
5
2
3
3
9
Dependent
Primitives
5
1
1
4
5
3
2
3
2
2
3
3
3
4
3
2
Time(s)
500
71
370
398
1064
1156
942
267
163
186
1099
445
149
1643
359
192
6.2.1 Successful Cases
Table 1 shows the list of programs successfully processed
by MAZE. Out of 16 programs, MAZE can hijack control ﬂow
for 5 of them, and leak arbitrary memory address information
for 1 of them. For the other 10 programs, MAZE only outputs
the exploitable heap layout without generating exploits, since
extra exploit techniques (e.g., unlink attack) are required
to generate proper exploits but not supported yet.
6.2.2 Failed Cases
Table 2 shows the CTF programs that MAZE failed to gen-
erate expected layouts for. The major reasons are as follows:
• Multi-Thread: First, it’s very difﬁcult to analyze the de-
pendence between different primitives in multi-thread ap-
plications. Second, race condition vulnerabilities between
threads cause great difﬁculties to symbolic execution.
• Path Explosion: Although MAZE
utilizes Path
Symbolization to prune unnecessary paths and merge
similar paths, complicated programs can still cause path
explosion. For example, Secret Note V2 embeds an
AES algorithm, and auir is obfuscated by ollvm [40].
• Random layout: As discussed in Section 2.3.2, the heap
allocator’s behavior must be deterministic. Otherwise,
MAZE may fail to infer the heap interaction sequence.
For instance, there are random amount memory holes in
video-player program’s layout.
6.2.3 Effectiveness of Primitives Analysis
Table 3 shows the analysis results of heap layout operation
primitives on CTF programs. We can see that, the number of
original program paths is very large. But after applying our
path symbolization technique, 15 of 16 programs’ paths