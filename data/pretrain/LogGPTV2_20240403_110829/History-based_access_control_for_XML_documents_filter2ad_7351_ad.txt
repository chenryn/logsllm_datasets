bility to model subjects and objects with an arbitrary ﬁne granularity. If the
implementation of the model stores the matrix as a two-dimensional array
the amount of required memory will be high, especially when the number
of subjects and objects is high. To solve this problem, eﬃcient implementa-
tions of this model store the rows or the columns of the matrix individually.
If the matrix is stored as a set of rows the implementation is referred as a
capability-based system. In the other case, the implementation is described
as an access control list. In both cases, the cells are labeled to denote to
which subject or object they refer to and empty entries can be omitted to
save resources. In situations with a high number of subjects and objects, the
2.1. ACCESS CONTROL
15
amount of saving can be high, because subjects often have access only to a
fraction of the total number of objects of the system.
On the downside, the model does not have a high level of abstraction, be-
cause all subjects and objects are treated equally, have no further properties
and are not related to each other. For example, two subjects that perform
the same task and therefore need the same access rights require manual steps
to assign the same access rights to both of them. As a consequence, the costs
to update and maintain the access matrix can be high. Moreover, if there is a
high number of subjects and objects the matrix will be big and manual main-
tenance of the matrix can become diﬃcult. In the following section, we will
discuss a model which oﬀers a higher level of abstraction. As a consequence,
this model simpliﬁes the maintenance.
2.1.2 Role-Based Access Control (RBAC)
The concept of Role-Based Access Control (RBAC) is described in [SCFY96]
by Sandhu et al. in 1996. Since our model, which we describe in Chapter 4,
uses roles to model subjects, we describe the RBAC model in this section.
Instead of assigning access rights, which are called permissions in RBAC
terminology, directly to subjects, permissions are assigned to roles. Such a
role is used to model a speciﬁc task. Therefore, all permissions that are re-
quired to perform a speciﬁc task are assigned to a role, e.g., a role “cashier”
can be used to collect all permissions that are required for performing the
job of a cashier. In addition to assigning permissions to roles, RBAC assigns
subjects to roles. A role must be activated by a subject to use the corre-
sponding permissions. Multiple active roles of a subject are referred to as
a session. A subject can also have more than one session. The relations
between the components of the RBAC model are illustrated in Figure 2.2.
An RBAC model consists of the following components:
1. U , the set of users of the systems,
2. R, the set of roles deﬁned in the system,
3. P , the set of all permissions of the system,
4. S, the set of sessions,
5. P A ⊆ P × R, the relation which assigns permissions to roles,
6. U A ⊆ U × R, the relation which assigns roles to users,
7. user : S → U , the function which maps each sessions to a single user,
and
8. roles : S → 2R, the function which maps each sessions to a set of roles.
16
CHAPTER 2. BACKGROUND
Figure 2.2: Components of the RBAC model
In addition to this base model for RBAC, other concepts are described in
[SCFY96] that increase the ﬂexibility and expressiveness of the model. The
ﬁrst such concept are role hierarchies, which deﬁne a partial order among the
roles of the system. This partial order deﬁnes a specialization relationship
among the roles, where the more special role inherits all permission from the
less special role. As a consequence, more special rules have more permission
than less special rules.
Figure 2.3 shows an example of such a role hierarchy. By convention less
powerful rules are depicted at the bottom and more powerful rules above
them. In this example, Project Member is the role with the smallest num-
ber of permissions. Both, Engineer and Researcher are specializations of
this role, inherit its permissions and add further permissions to it. Senior
Engineer and Senior Researcher both inherit permissions from their corre-
sponding non-senior roles. Finally, the role Project Supervisor is derived
by multiple inheritance from both senior roles. As a result, this role combines
the permissions of both senior roles.
In general, multiple inheritance can lead to problems, where the resulting
role inherits more privileges than are required to fulﬁll the corresponding
task, which violates the principle of least privilege [SS75, Den76]. Saltzer et
al. describe this principle in [SS75] as follows:
Every program and every user of the system should operate using
the least set of privileges necessary to complete the job.
This principle aims at reducing misuse of privileges, e.g., fraud, and at
reducing errors where privileges are used accidently in a wrong way, e.g.,
accidently deleting an important ﬁle.
In [SCFY96], Sandhu et al. describe constraints as another mechanism
that can be added to RBAC. Constraints can be deﬁned both for role to user
assignment and for role activation. The ﬁrst case is used to model a static
UsersRolesPermissions…SessionUAPAActive Roles2.1. ACCESS CONTROL
17
Figure 2.3: Example of a role hierarchy
separation of duties, which deﬁnes that certain roles are mutually exclusive.
As a consequence, a user can be assigned only to one role of a set of mutually
exclusive roles. This mechanism is designed to prevent fraud in situations
where a user is able to act in two or more roles for certain tasks that should
not be executed by a single person, e.g., chief buyer and accounts manager
are two jobs that should not be performed by a single person, even if they
are not executed at the same time.
Static separation of duty is too strict for some cases, where it is only
required that diﬀerent roles are not activate by one user at the same time.
For this case, constraints are deﬁned for role activation to model dynamic
separations of duties. Here, sets of roles are deﬁned that can not be activated
simultaneously. This mechanisms is designed to prevent fraud, where a user
would need two diﬀerent permissions simultaneously to commit fraud, e.g.,
an employer of a bank can also be as costumer of the bank, but he should
not be active in both of the corresponding roles at the same time.
In addition to separation of duties, other constraints can be deﬁned as
well. For example, cardinality constraints deﬁne that a speciﬁc role has a
maximum number of members, e.g., there should be at maximum one project
supervisor. Other constraints can be deﬁned for the assignment of permis-
sions to roles, which can be used to ensure that certain powerful permissions
are only assigned to a small number of roles.
In addition to the constraints discussed so far, many other types of con-
straints are described in literature. For example, in [BBF01] Bertino et al.
describe activation constraints for roles that depend on the current time and
the time of events that occurred in the system. In [AC04], Alotaiby et al.
present constraints that depend on the conﬁguration of teams. The activation
Project MemberEngineerSenior EngineerResearcherSenior ResearcherProject Supervisor18
CHAPTER 2. BACKGROUND
of roles depends on the geographical position of the subjects in [BCDP05].
Moreover, there are many other models which are based on RBAC. In
[CMA00], Convington et al. specify “Generalized Role-Based Access Con-
trol” (GRBAC) which extends RBAC in two aspects. Object roles are used
similarly to the subject roles of RBAC. They classify objects by their prop-
erties, e.g., level of conﬁdence or document type. Environment roles classify
the environment by properties which are considered to be relevant for secu-
rity. These Environment roles can be used as an activation constraint for
subject roles.
In [KKC02], Kumar et al. describe a similar but more ﬂexible approach.
In this approach, an object context contains all security-relevant properties of
an object. Similarly, an Context!user contains the security-relevant proper-
ties of a user. A role context deﬁnes a condition for activating a speciﬁc role
and is a boolean expression, which uses attributes of the object context and
of the user context. As a result, both objects and users can be described in
a ﬂexible way independent of concrete instances by classifying both by their
properties. Moreover, the deﬁnition of roles can be based on the properties
of the user and the object.
2.1.3 Chinese Wall model
The Chinese Wall model [BN89] was designed by Brewer and Nash to prevent
misuse of insider knowledge. When the Chinese Wall model was introduced,
this problem was most critical in the ﬁnancial domain, e.g., a bank with cos-
tumers that are competitors to each other. In such cases, a bank employee
should only have access to the objects of one of the rivaling enterprises. A
similar scenario is the consulting business. Here, a consultant should have
access to only one company out of a group of companies in the same business.
Today, the problem of not accessing documents of competing companies af-
fects the entire service sector. Since we use the Chinese Wall model as a
motivating example in Chapter 4, we brieﬂy describe it in this chapter.
The model is based on an access matrix (see Section 2.1.1) and deﬁnes
three modes of access: read, write and execute. The objects of the model are
organized as a tree structure with three levels and the objects being the leafs.
The level directly above the objects is the level containing company data sets,
where each node represents a diﬀerent company. All objects attached to one
such node belong to the corresponding company. The level directly above the
company data sets denotes the conﬂict-of-interest classes, where each node
represents one such class. The children of such a node are companies that
are competitors to each other.
An example of such a tree is depicted in Figure 2.4.
In this example,
2.1. ACCESS CONTROL
19
we have two conﬂict-of-interest classes, which are “Banks” and “Petroleum
Companies”. The class “Banks” consists of “Bank A”, “Bank B” and “Bank
C”. Similarly, the class “Petroleum Companies” consists of “Oil Company
A” and “Oil Company B”. The children of a company node are the objects
that belong to the corresponding company, e.g., the objects o8 to o10 belong
to “Oil Company A”.
Figure 2.4: An example of the tree organization of the objects
As illustrated in the previous example, each object belongs both to a
company data set and to a conﬂict-of-interest class. In the model, xi denotes
the the conﬂict-of-interest class of the i-th object oi and yi denotes the cor-
responding company data set. In our example, x5 is “Bank B” and y12 is
“Petroleum Companies”. A special case is denoted by y0 and x0, which is
used for public information that is not restricted in any way.
The Chinese-Wall model uses two matrices to deﬁne access. The ﬁrst
matrix M deﬁnes the permissions that subjects have on diﬀerent objects.
This matrix works as described in Section 2.1.1. In addition to this, a second
matrix N records the history of access. The matrix N has the dimensions
|S| × |O|, where S is the set of subjects and O is the set of objects of the
system. Each cell of this matrix corresponds to a pair of subject and object
and denotes whether the subject already had accessed the corresponding
object. The cell N (i, j) contains the access modes that the i-th subject had
used to access the j-th object. If the object was not accessed by that subject,
the cell is empty. After each access, the matrix M is updated to reﬂect to
new situation.
The Chinese Wall model uses two rules to deﬁne access. The ﬁrst rule
is used for read and execute access and states that access to an object oi
is only granted if the accessing subject did not access any object of the
same conﬂict-of-interest class that belongs to a diﬀerent company. As a
consequence, after an access to one object, all objects of the same class that
BanksPetroleum CompaniesBank ABank BBank COil Company AOil Company Bo2o3o4o5o6o7o1o8o9o10o11o12o1320
CHAPTER 2. BACKGROUND
Figure 2.5: Situation after access to objects o6 and o9
belong to diﬀerent company data sets are blocked for that subject. This rules
can also be expressed formally. A subject si is allowed to perform an access
a ∈ {read, execute} on the object oj if and only if:
a ∈ M (si, oj) ∧ ∀ok ∈ O, k (cid:54)= j :
N (si, ok) (cid:54)= ∅ =⇒ (yk = yj ∨ xk (cid:54)= xj ∨ yj = y0).
This deﬁnition states that a subject si ﬁrst of all must have the required
privilege, which is formally expressed as a ∈ M (si, oj). For all other objects
that have been accessed so far (N (si, ok) (cid:54)= ∅), at least one of the following
three conditions must be true. First, the object belongs to the same company
data set, which is formally expressed as yk = yj. Second, the object is in a
diﬀerent conﬂict-of-interest class, i.e., xk (cid:54)= xj. Third, the object is marked
as being public information, which is formally expressed as yj = y0.
Figure 2.5 illustrates the rule presented above and shows the situation
after a subject has accessed objects o6 and o9.
In this case, objects from
“Bank C” and “Oil Company A” have been accessed. As a consequence,
access to objects of “Bank A”, “Bank B” and “Oil Company B” is denied.
This rule above alone is insuﬃcient, because unwanted data transfer that
enables misuse of insider knowledge is still possible. For example, the subject
s1 reads o1 and writes the corresponding data to o8. After that, the subject s2
reads that data from o8 and writes it to o4, where it should never be written
too, because it belongs to an competitor of “Bank A” to which o1 belongs
to. As a consequence, another rule is required that prevents this type of data
transfer. A subject si is allowed to write to an object oj if and only if:
write ∈ M (si, oj) ∧ ∀ok ∈ O, k (cid:54)= j :
read ∈ N (si, ok) =⇒ (yk = yj ∨ yj = y0).
BanksPetroleum CompaniesBank ABank BBank COil Company AOil Company Bo2o3o4o5o6o7o1o8o9o10o11o12o13BanksPetroleum CompaniesBank ABank BBank COil Company AOil Company Bo2o3o4o5o6o7o1o8o9o10o11o12o132.2. THE EXTENSIBLE MARKUP LANGUAGE
21
This rule prevents transfers like the one sketched above, because it allows
to write data to an object only if the previous read accesses (read ∈ N (si, ok))
refer to the same company data set, i.e., yk = yj, or the read information is
public, i.e., yj = y0.
The Chinese Wall model allows to model subjects and object with arbi-
trary ﬁne granularity. Its basis is the matrix M where users the deﬁne access
rights for individual objects. This basic strategy follows the DAC principle,
whereas the overall strategy that enforces the chinese wall is a MAC strategy.
One drawback of the model is that it is based on an access control list, which
is not desirable in an enterprise scenario. Moreover, the model is designed for
a special type of scenarios and is limited to enforce only one type of manda-
tory policies, which is the chinese wall policy. It is not possible to specify a
policy that is more speciﬁc for the current scenario, e.g., exceptions to the
chinese wall policy or more ﬁne-grained rules which also depend on the type
of document.
2.2 The Extensible Markup Language
In this Section, we give an introduction to the Extensible Markup Language
(XML), explain how XML documents are structured and describe how XML
documents are speciﬁed with the use of an XML Schema.
In addition to
this, we describe how document type deﬁnitions and schemas can be used
to deﬁne the structure of a document. After this, we will explain the XML
Path language, which us used to address speciﬁc parts of an XML document.
2.2.1
Introduction to XML
The Extensible Markup Language (XML) [BPSM+06] is a standard for a
language recommended by the World Wide Web Consortium (W3C) [Wor06]
and is used to describe XML documents. We use XML in this thesis as the
format of the documents that we want to protect. Therefore, we will present a
summary of the technologies related to XML, which are helpful to understand
this thesis.
The language XML was designed to exchange data between diﬀerent com-
puter systems and is a simpliﬁed subset of the Standard Generalized Markup
Language (SGML) [ISO86]. XML oﬀers ﬁve advantages compared to other
representations of data, e.g., binary representation. First, XML is both read-
able by humans and by machines. Second, XML is self-documenting because
XML documents both contain a descriptive label for each data element as
well as the data element itself. Nonetheless, one has to agree about common
22
CHAPTER 2. BACKGROUND
names for labels to enable automated exchange of data. Third, XML docu-
ments can contain records, trees and lists, which are common data structures.
Fourth, XML documents support Unicode [The91], which is a standard to
represent character data and allows XML documents to contain almost any
written language of the world. Fifth, the strict and simple syntax of XML
documents enables tools to process XML data eﬃciently. After describing
the beneﬁts of XML, we continue with the description of the structure of
XML documents.
2.2.2 XML Documents
XML documents consist of elements which can have attributes and further
elements as children. Both, elements and attributes, are typed. Elements
are denoted as a sequence of start tag, text content and end tag. A start
tag is a sequence of “”, e.g., . An
end tag is a sequence of “”, e.g., .
Alternatively, elements can also be empty. In this case, elements are denoted
in an abbreviated form, which is the sequence “”, e.g., .
An example of an XML document is illustrated in Figure 2.6. The ﬁrst
line of this document is the prolog of the document. The prolog contains
general information about the document, such as the version number of the
used XML speciﬁcation and the document encoding. Moreover, the prolog
can contain a schema or document type deﬁnition to which the document
must be conform, which is not present in this example. The document in
Figure 2.6 is represented by its root element Report, which has an attribute
funded-by set to the value Company A. The root element has two children.
Both of them have the type Section. The ﬁrst Section element has both
an attribute and text content. The second Section element is an example
of an empty element.
text of the introduction