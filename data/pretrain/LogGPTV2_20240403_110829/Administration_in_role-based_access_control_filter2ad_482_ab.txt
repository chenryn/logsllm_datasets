deﬁned using the role hierarchy, and is used for deﬁning adminis-
trative domains. The administrative scope of a role r (denoted by
σ(r)) consists of all roles that are descendants of r and are not de-
scendants of any role that is incomparable with r. More formally,
σ(r) = {s ∈↓ r :↑ s ⊆↑ r∪ ↓ r}, where ↓ r is the set of roles
that are junior to r, ↑ s is the set of roles that are senior to s. Infor-
mally, r ∈ σ(a) if in the role hierarchy every path upwards from
r goes through a. Each role is in the scope of the role itself. We
say a scope is nontrivial if it includes more than one roles. Using
scopes for administration works best when the role hierarchy is a
tree, with an all-powerful role at the root; in this case, each role’s
administrative scope is the subtree rooted at that role. In an inverted
role hierarchy such as the one in Figure 1b, no role has a non-trivial
administrative scope.
SARBAC uses also administrative roles. To deﬁne the adminis-
trative domain for each administrative role, SARBAC introduce a
relation admin authority. Each member of admin authority
is a tuple (a, x), where a is an administrative role, and x is a role.
It means the administrative role a has control over the roles in the
administrative scope of x. SARBAC allows administration of the
admin authority relation. This is done by combining the rela-
tion admin authority and the role hierarchies into an extended
hierarchy over both the administrative roles and normal roles. The
concept of administrative scope can be extended to the extended
role hierarchy. Adding or deleting an admin authority relation
is equivalent to adding or deleting a corresponding edge in the ex-
tended hierarchy. When an operation on the extended hierarchy
is done, some updates to admin authority happen automatically,
in order to preserve the administrative scope and to remove redun-
dancies. Further details of SARBAC are beyond the scope of this
paper; readers are referred to [3, 4, 5].
In summary, similar to ARBAC97, SARBAC also uses role hi-
erarchies to deﬁne administrative domains. When some opera-
tions may affect existing administrative domains, ARBAC97 for-
bids these operations, while SARBAC allows them and handles
them by changing existing administrative domains. One feature
of SARBAC is that one simple operation may affect administrative
domains of many roles.
The administrative model for role hierarchy in SARBAC is later
reﬁned and extended to RBAT, a template for role-based adminis-
trative models [3]. RBAT formalize the interaction between the role
hierarchy operations and the administrative scopes, by having the
operations preserve certain aspects of administrative scopes. The
role hierarchy administrative model in both ARBAC97 and SAR-
BAC can expressed in terms of the RBAT framework.
3.3 Oracle
The Oracle DBMS implements the notion of roles since early
1990s, and it includes support for administration of the access con-
trol state. Unlike ARBAC and SARBAC, Oracle’s RBAC admin-
istration have been widely used in real world, Oracle thus presents
an invaluable reality check for administrative approaches to RBAC.
The success of RBAC research is partially due to the fact that the
notion of roles has been implemented in commercial systems, so
that the research can be guided by real-world experiences. We be-
lieve research on administrative models for RBAC must also learn
from existing systems such as Oracle.
There are two kinds of privileges in Oracle: system privileges
and object privileges. There are over 100 system privileges in Or-
acle 10g. For example, the “create role” system privilege allows
one to create a new role, “drop any role” allows to drop any role,
“grant any role allows to grant any role to a user or another role”.
An object privilege identiﬁes an object, which is either a table or a
view, and an access mode, which is one of the following: select,
insert, update and delete. Oracle’s permission management is a
hybrid of DAC (Discretionary Access Control) and RBAC. Privi-
leges can be granted to users and to roles. And roles can be granted
to roles and to users. A system privilege or a role can be granted
“with admin option”. If a user is granted a role with admin option,
then we say the user has admin power over the role. This enables
the user to grant the role to other users and roles as well as to revoke
the role from other users or roles. A role r1 can also be granted to
another role r2 with admin option, in which case any user that is a
member of r2 has admin power over r1. A user can create a role if
he has the create role system privilege and the role to be created
does not already exist. When a role is created, the creator will be
automatically granted the role with admin option. This enables the
creator to further grant the role to any other role or user.
In Oracle, if one has control over a permission, then one can
grant the permission to any role; no control over the role is needed.
This is different from the approach in ARBAC97 and SARBAC,
in which granting a permission to a role is viewed as a dual of as-
signing a user to a role, and requires the granter has some kind of
control over the role. Oracle’s design seems more intuitive. Grant-
ing a role to a user implies giving out privileges associated with the
role; thus some control over the role is needed. Similarly, granting
a permission to a role implies giving out the permission; thus some
control over the permission (rather than over the role) is needed.
On the other hand, Oracle’s approach leads to a denial of service
attack: Any user who has the “create role” system privilege can
stop other users from logging in. When a user logs in, a set of roles
that the user has are activated, as is any role that has been granted
to one of these roles. Oracle has a limit on the number of roles that
can be activated in a session; if a user has more roles, then the user
cannot log in. Oracle has a predeﬁned role called PUBLIC, which
is granted to every user and is activated by default. Any user who
has the “create role” system privilege can create a large number of
roles and grant them to PUBLIC, resulting in other users unable to
log in.
4. DESIGN PRINCIPLES AND REQUIRE-
MENTS
In this section, we present six design requirements for admin-
istrative models for RBAC. These requirements are motivated by
three principles: scalability and ﬂexibility, psychological accept-
ability, and economy of mechanism, and they are grouped into three
subsections. Several of these requirements came from the draw-
backs we have observed in existing approaches to RBAC adminis-
trative presented in Section 3. We thus use these requirements to
analyze the three approaches and point out these drawbacks.
4.1 Scalability and Flexibility
REQUIREMENT 1. Support decentralized administration and
scale well to large RBAC systems.
As RBAC’s beneﬁts are most pronounced when used in settings
with large numbers of users and permissions, we require that ad-
ministrative models for RBAC are ﬂexible enough to scale to sys-
tems of such size. This requires decentralization of operations such
as creating users and roles and the ability to deﬁne meaningful ad-
ministrative domains. Each of ARBAC, SARBAC and Oracle sup-
ports decentralized administration allows coexistence of multiple
administrators having control over portions of the system. How-
ever, they all have limitations and do not scale well to large RBAC
systems.
ARBAC and SARBAC are designed to work well with particular
kinds of role hierarchies, but do not work well with other kinds role
hierarchies. As we discussed in Section 2, role hierarchies may take
very different forms. For many role hierarchies, there exist very few
(sometime zero) nontrivial administrative domains. As a result, a
lot of operations cannot be delegated and must be performed by the
SSO role. Recall that ARBAC97 requires administration domains
to be encapsulated role ranges, and SARBAC uses administrative
scopes. In the role hierarchy in Figure 1(b) (a forest of inverted
trees), there exists no encapsulated range or non-trivial adminis-
trative scope. For example, in Figure 1(c), if we want to create a
new role “Head Cardiology” and make it to be more senior to the
role “Cardiologist”, this operation should performed by the admin-
istrator of the Cardiologist Division. But it cannot be achieved in
ARBAC and SARBAC. Similarly, in a layered role hierarchy (such
as the one in Figure 1(b)), there exist no encapsulated role range
or non-trivial administrative scope. A lot of basic administrative
operations cannot be delegated for such role hierarchies using AR-
BAC or SARBAC. For example, if one wants to grant a functional
role to a business role, create a new business role, or create a new
functional role with multiple business role parents, all these can be
done only by the central administrator in ARBAC and SARBAC.
ARBAC97 introduces additional administrative relations that are
administered centrally. When applying to large-scale RBAC sys-
tems, the size of these relations may be too large to be administered
centrally. This limits the scalability of the approach. In Oracle ad-
ministrative domains are deﬁned by explicitly enumerating objects
in the domain. This works ﬁne when the number of roles is limited,
which is probably true in most scenarios in which Oracle is used.
However, the administration approach in Oracle does not scale to
systems that have thousands of roles.
REQUIREMENT 2. Be policy neutral in deﬁning administrative
domains.
One of RBAC’s advantages is policy neutral, so that it can be
conﬁgured to enforce multiple kinds of policies. An administra-
tive model for RBAC should remain as policy neutral as possible.
As the role hierarchy is designed for sharing and aggregation per-
missions, using the role hierarchy structure to deﬁne administra-
tive domains implies a particular kind of policy. For example, in
ARBAC97, administrative domains are deﬁned using role ranges,
which are roles between two end-points. In SARBAC, administra-
tive domains are deﬁned using scopes, which are roles below a role.
In Role Control Center [6], administrative domains are deﬁned us-
ing views, which are all roles above a certain role. The existence of
these disparate design decisions illustrate that it is a policy decision
how (and in fact whether) to use role hierarchy to deﬁne adminis-
trative domains. Experiences on RBAC deployments reported by
Kern et al. [12] also indicate that using role hierarchies is not a
natural approach to specifying the domain of an administrator. In
particular, domain is often speciﬁed based on the structure of an
organization, e.g., all roles in one branch of a bank. The roles that
belong to one domain may not be related at all in the role hierar-
chy. Therefore, it is best to decouple administrative domains from
role hierarchies. An RBAC administration model should provide
a mechanism for deﬁning administrative domains based on other
concepts, e.g., organization units.
4.2 Psychological acceptability
This principle means that it is essential that the human interface
be designed for ease of use, and, the user’s mental image of his
protection goals should match the mechanism [20].
REQUIREMENT 3. Apparently equivalent sequences of opera-
tions should have the same effect.
When two sequences of operations are conceptually equivalent,
their effects should be the same. A special case is when one oper-
ation can be conceptually viewed as a sequence of more primitive
operations, then the effect of that one operation should be equiva-
lent to carrying out the sequence of the primitive operations. Con-
sider an operation that creates a role r with a set P of roles as
parents and a set C of roles as children. This operation can be
viewed as ﬁrst creating the role r, then adding each role in P as a
parent and each role in C as a child in an arbitrary order. In prac-
tice, when one creates a role, one may not be able to determine
all the parents and all the children. Thus, one may want to create
the role ﬁrst and then gradually add the relationships. Such equiv-
alence does not hold in ARBAC97 or SARBAC; in particular, one
has to specify a parent (and in the case of ARBAC97, a child as
well) in creation; otherwise, either the role cannot be created, or
will be outside the creator’s administrative domain; and further ad-
dition of edges cannot be performed. Oracle’s design, on the other
hand, has this equivalence property.
REQUIREMENT 4. Support reversibility.
This implies two requirements. One is that most sequences of
operations should be reversible; that is, given a sequence, there
should exist a sequence of operations that reverse the effect of the
sequence. Having reversibility, if one makes a mistake, one can go
back. Certainly, not all operations are reversible; for example, oper-
ations such as deleting objects may not be reversible. However, at a
minimum, operations that only add things should be reversible. The
second requirement is that if an operation has an obvious reversing
operation; then the reversing operation should always reverse the
effect as expected. For example, if one adds an edge between two
roles, and then immediately delete the edge; the system should re-
turn to the state before addition.
This is not satisﬁed by ARBAC97 and SARBAC; they adopt
the approach that if a role dominance relationship is removed,
then all other role dominance relationships that have been implied
are added back. This violates reversibility. Consider the RBAC
state in Figure 2(b)(i), which contains the following relationships:
Architect (cid:186) Engineer. Suppose that when a product is about to be
released, one wants engineers to also serve as QAs and adds a tem-
porary relationship Engineer (cid:186) QA. This change results in the role
hierarchy in Figure 2(b)(ii). After the release, one wants to delete
the temporary relationship, expecting the hierarchy to return to the
original state in Figure 2(b)(i). After all, the only reason that the
Architect role dominates the QA role in Figure 2(b)(ii) is because
one wants engineers to be able to serve as QAs and architects are
(a kind of) engineers, and now one does not want engineers to be
QAs anymore. However, in ARBAC97 and SARBAC, the result-
ing state would be Figure 2(b)(iii), violating reversibility. We point
out that always removing implied role dominance relationships also
violates reversibility, as illustrated by Figure 2(a).
Oracle addresses this problem by maintaining all relationships
that have been explicitly added. The operation of deleting an edge
removes a relationship that has been explicitly added. The actual
role hierarchy is inferred from the relationships. This way, one can
distinguish an edge that has been explicitly added from one that has
been inferred, thereby maintaining reversibility.
REQUIREMENT 5. Predictability
Given a state-change in an administrative model for RBAC, it
should be obvious what the effect of that state-change is. That is,
there should not be side-effects that are surprising. Otherwise, it
is easier for administrators to make mistakes while carrying out
administrative operations.
In SARBAC, there are automatic up-
dates to the relation admin authority following a role hierarchy
operation in order to maintain administrative scope and to elimi-
nate redundancy. However, some of “indirect updates” have side-
effects that may be considered surprising. For example, in the Fig-
ure 1(a), suppose an administrative role PSO1 has control over
the administrative scope of Project 1, which is {PL1, PE1, QE1,
E1}. When PSO1 delete the role PL1, the original administrative
scope for Project 1 breaks up into three trivial administrative scopes
{PE1}, {QE1} and {E1}. The system will remove the relationship
(PSO1, {PL1, PE1, QE1, E1}) from admin authority, and make
PSO1 have control over the administrative scopes of the interme-
diate children of the deleted role. It adds two relationships (PSO1,
{PE1}) and (PSO1, {QE1}) into admin authority. Surprisingly,
the role E1, which is part of Project 1, becomes outside of the con-
trol of PSO1 due to the deletion of PL1, because E1 is not in the
administrative scope of either PE1 or QE1. On the other hand, in
ARBAC97 and Oracle, the effects of each operation tend to be sim-
pler and easier to understand.