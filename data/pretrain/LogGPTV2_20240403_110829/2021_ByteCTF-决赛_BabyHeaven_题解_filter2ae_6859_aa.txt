# 2021 ByteCTF-决赛 BabyHeaven 题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## BabyHeaven
Status: Done 🙌  
关键算法: 字典序算法  
出处: 2021 ByteCTF-Final  
原题链接:   
时间: December 11, 2021  
考点: Shellcode, Windows API, 天堂之门, 算法优化  
难度: 困难
###  分析
  1. 拿到题目，file 命令 check 一下，发现是一堆二进制数据，而非完整的可执行文件
  2. 试着往 IDA 里面一拖，发现所有数据都能被 IDA 反汇编出来，因此这其实就是一堆 shellcode
**加载并运行 shellcode**
  1. 自己写一个加载并运行 shellcode 的程序，争取能对它进行动调。由于 shellcode 是 32 位的，所以 loader 也要编译为 32 位的 
         #include 
     #include 
     #include 
     #include 
     using namespace std;
     typedef void (*func_ptr)();
     int main(int argc, char **argv) {
       if (argc < 2) {
         cout << "usage: shellcode_loader.exe [shellcode.bin]" << endl;
         exit(1);
       } else {
         printf("now trying to load %s", argv[0]);
         cout << endl;
       }
       ifstream infile(argv[1], ios::binary);
       infile.seekg(0, std::ifstream::end);
       int length = (int) infile.tellg();
       infile.seekg(0, std::ifstream::beg);
       auto shellcode = VirtualAlloc(nullptr, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
       infile.read((char *) shellcode, length);
       auto ptr = (func_ptr) shellcode;
       ptr();
     }
  2. 发现程序会崩，对它进行动调，程序可以执行 shellcode 了
  3. 但是 shellcode 的头部并没有函数调用约定的特征，这会影响 IDA 的反汇编，所以对原本的 shellcode 进行 patch，加上 `push ebp` 之类的操作 
         with open("./BabyHeaven", "rb")as f:
       data = f.read()
       data = b'\x55\x8b\xec'+data
     with open("patched", "wb")as f:
       f.write(data)
**分析 shellcode1**
  1. 这时伪代码的可读性就增强了，可以从保存到栈里的字符串推断这是通过 `GetProcAddress` 等机制调用相关函数
  2. 发现这里有一部分逻辑调用了很多未知的函数
  3. 这时对 shellcode 动调，可以根据函数指针指向的地址对一些变量进行重命名，从而梳理程序逻辑如下。其实就是加载了一堆 Windows API 
         GetProcAddress_1 = GetProcAddress;
     LoadLibraryA = (int (__cdecl *)(char *))GetProcAddress(v71, &v21[14]);
     GetSystemInfo = (void (__cdecl *)(char *))GetProcAddress_1(v71, v21);
     VirtualAlloc = (int (__cdecl *)(_DWORD, int, int, int))GetProcAddress_1(v71, &v20[15]);
     VirtualProtect = (void (__cdecl *)(_BYTE *, int, int, char *))GetProcAddress_1(v71, v20);
     ExitProcess = GetProcAddress_1(v71, &v19[17]);
     GetModuleHandle = (int (__cdecl *)(_DWORD))GetProcAddress_1(v71, v19);
     UnmapViewOfFile = GetProcAddress_1(v71, &v18[11]);
     v64 = LoadLibraryA(v18);
     v14 = GetProcAddress_1(v64, v17);
     MessageBoxA = GetModuleHandle(0);
     GetSystemInfo(v12);
     v62 = v13;
     v61 = (_BYTE *)VirtualAlloc(0, v13, 4096, 4);
  4. 注意最后还调用了 `VirtualAlloc` ，说明这个 shellcode 还是个套娃，它又加载了第二段 shellcode
  5. 后面一大堆赋值命令就是在拿第二段 shellcode 填充 `VirtualAlloc` 申请的 buffer 
         *++v61 = 4;
     *++v61 = 36;
     *++v61 = 7;
     *++v61 = 72;
     *++v61 = -53;
     *++v61 = -62;
     *++v61 = 4;
     *++v61 = 0;
     VirtualProtect(++v61, v62, 64, v10);
     strcpy((char *)v4, "ByteCTF{");
     HIBYTE(v4[4]) = 0;
     v4[5] = 0;
     v5 = 0;
     v6 = 125;
     v7 = 0;
     v8 = 0;
     v9 = 0;
     __asm { retn }
  6. 最后的指令看伪代码看不懂了，这时需要对照汇编理解
  7. 这部分命令做了这几件事 
    1. 填充为 `ByteCTF{xxxxxxxx}` ，x 是未填充的缓冲区
    2. 将指向这 `char [8]` 的指针压到栈里
    3. 构造 ROP 链，ROP 链所要实现的最终效果是 `shellcode2(char*ptr)` → `MessageBoxA("ByteCTF{xxxxxxxx}")`
  8. 由于 ROP 链里面并没有读取用户输入函数的身影，所以推测 shellcode2 实际上就是计算了 flag，因此可以判断这题目的实质是一个算法优化题
**分析 shellcode2**
  1. 由于此时已经具备了动调的能力，所以直接把 shellcode2 dump 出来即可，或者也可以把赋值的伪代码粘出来自己跑一遍
  2. 把 shellcode2 拖到 IDA 32位里面，上来就是这一段