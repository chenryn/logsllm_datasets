# Demystifying Modern Windows Rootkits

## Bill Demirkapi
Independent Security Researcher

### Black Hat USA 2020

#### Who Am I?
- 18 years old
- Sophomore at the Rochester Institute of Technology
- Self-taught in Windows Internals with guidance
- Strong background in "Game Hacking"

#### What Is This Talk About?
In this presentation, we will cover:
- Loading a rootkit.
- Communicating with a rootkit.
- Abusing legitimate network communications.
- An example rootkit I developed and the design choices behind it.
- Executing commands from the kernel.
- Tricks to cover up the filesystem trace of your rootkit.

---

### Introduction to Windows Rootkits

#### Windows Rootkits: An Overview
- **Why Use a Rootkit?**
  - Kernel drivers have significant access to the machine.
  - They operate at the same privilege level as typical kernel-based antivirus.
  - Fewer mitigations and security solutions target kernel malware.
  - Antivirus often has less visibility into operations performed by kernel drivers.
  - Kernel drivers are frequently ignored by antivirus.

- **Example: Treatment by Antivirus**
  - Antivirus tends to trust kernel drivers more than user-mode applications.

- **Excerpt from Carbon Black’s Process/Thread Handle Callbacks**
- **Excerpt from Malwarebytes’ Process/Thread Handle Callbacks**

#### Loading a Rootkit
- **Abuse Legitimate Drivers**
  - Many drivers are "vulnerable." With some reverse engineering, finding a "0-day" in a driver can be straightforward.
  - Examples include Capcom’s Anti-Cheat driver, Intel’s NAL Driver, and even Microsoft's own drivers.
  - **Benefits:**
    - Only a few primitives are needed to escalate privileges.
    - Finding a "vulnerable" driver is relatively easy (e.g., OEM Drivers).
    - Difficult to detect due to compatibility reasons.
  - **Drawbacks:**
    - Compatibility issues across different operating system versions.
    - Higher likelihood of stability issues, which can lead to BSODs.

- **Just Buy a Certificate!**
  - For red teamers, buying a legitimate code signing certificate might be a good option.
  - **Pros:**
    - Useful for targeted attacks.
    - No stability concerns.
  - **Cons:**
    - Potentially reveals your identity.
    - Can be blacklisted.

- **Abuse Leaked Certificates**
  - Instead of buying a certificate, use a leaked one.
  - **Pros:**
    - Publicly available leaked certificates.
    - Almost all the benefits of buying one without deanonymization.
  - **Cons:**
    - The leaked certificate can be detected in the future.
    - If issued after July 29th, 2015, it won’t work on secure boot machines running certain versions of Windows 10.
  - **Note:**
    - Windows generally doesn't care if the driver has an expired or revoked certificate.
    - Several leaked certificates are already publicly posted, and most are undetected by the majority of AV.

#### Communicating with a Rootkit
- **Beacon Out to a C2**
  - A tried and true method, but it comes with downsides.
  - Firewalls can block or flag outgoing requests to unknown/suspicious IP addresses or ports.
  - Advanced Network Inspection can catch exfiltration techniques that try to blend in with normal traffic.

- **Open a Port**
  - Some malware allows the C2 to connect directly to the victim.
  - **Pros:**
    - Relatively simple to set up.
  - **Cons:**
    - Can be blocked by firewalls.
    - Difficult to blend in with normal traffic.

- **Application Specific Hooking**
  - More advanced malware may hook a specific application’s communication as a channel.
  - **Pros:**
    - Difficult to detect, especially if using a legitimate protocol.
  - **Cons:**
    - Not very flexible.
    - The machine might not have the required service exposed.

- **Choosing a Communication Method**
  - **Desired Features:**
    - Limited detection vectors.
    - Flexibility for various environments.
  - **Assumptions:**
    - Victim machines will have some services exposed.
    - Inbound and outbound access may be monitored.
  - **Solution:**
    - Application-specific hooking was perfect except for flexibility. We need a method that isn't dependent on any single application.

- **Abusing Legitimate Communication**
  - **Approach:**
    - Hook network communication similar to tools like Wireshark.
    - Place a special indicator in "malicious" packets, a "magic" constant.
    - Send these "malicious" packets to legitimate ports on the victim machine.
    - Search packets for this "magic" constant to pass data to the malware.

- **Hooking the User-Mode Network Stack**
  - **Hooking the Windows Winsock Driver:**
    - A significant amount of services on Windows are in user-mode.
    - Networking related to WinSock is handled by `Afd.sys` (Ancillary Function Driver for WinSock).
    - Reversing functions in `mswsock.dll` revealed that much of the communication is done through IOCTLs.
    - Intercepting these requests allows snooping on the data being received.

- **How Do IRPs Know Where to Go?**
  - When you call `NtDeviceIoControlFile` on a file handle to a device, how does the kernel determine which function to call?

- **Standard Methods of Intercepting IRPs**
  - **Common Methods:**
    1. Replace the Major Function you want to hook in the driver’s object.
    2 - Perform a code hook directly on the dispatch handler.

- **Picking a Method**
  - **Questions to Ask:**
    - How many detection vectors are you potentially exposed to?
    - How "usable" is the method?
    - How expensive would it be to detect the method?

- **Hook a Driver Object**
  - **Detection Vectors:**
    - Memory artifacts.
  - **Usability:**
    - Stable by replacing a single function with an interlocked exchange.
    - Well-documented and easy to find.
  - **Detection Cost:**
    - Inexpensive; antivirus needs to enumerate loaded drivers and check major functions.

- **Hook a Driver’s Dispatch Function**
  - **Detection Vectors:**
    - Memory artifacts.
  - **Usability:**
    - Requires finding the function if not exported.
    - Not all drivers are compatible due to PatchGuard and HVCI.
  - **Detection Cost:**
    - Potentially inexpensive with several methods to detect hooking.

- **Hooking File Objects**
  - **Desired Features:**
    - Undocumented.
    - Stable.
    - Relatively expensive to detect.
  - **Approach:**
    - Create your own device and driver objects.
    - Patch your copy of the driver object.
    - Replace the `DeviceObject` pointer of the file object with your own device.

- **Finding File Objects to Hook**
  - **SystemHandleInformation Class:**
    - Allows querying all handles on the system, including process ID and kernel pointer of the associated object.
  - **Creating Fake Objects:**
    - Use `ObCreateObject` with `IoDriverObjectType` or `IoDeviceObjectType` to create fake objects.
    - Copy existing objects to contain the same member values.

- **Preventing Race Conditions**
  - To prevent race conditions while replacing the `DeviceObject` member, ...

This revised version aims to provide a clearer, more professional, and coherent structure for the content.