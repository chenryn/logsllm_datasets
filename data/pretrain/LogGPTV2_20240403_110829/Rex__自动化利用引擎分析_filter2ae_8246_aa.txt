# Rex: 自动化利用引擎分析
## 前言
最近在看 rex，没有官方文档，已有的教程也有点过时，基本只能通过看源码学习。
本篇教程当作是学习的记录，也希望能帮助对 rex 感兴趣的同学对 rex 的架构和使用方式有个整体的认识。
## 概述
Rex 是 [Shellphish](http://shellphish.net/cgc/) 团队开发的自动生成 exploit 的引擎，是
[Mechaphish](https://github.com/mechaphish) 中的一个模块，最初用于
[CGC](https://ma3k4h3d.top/2018/11/01/CGC/) 竞赛。
Rex 基于硬件模拟器 QEMU 和 angr ，通过混合执行（Concolic
Execution）复现崩溃路径，根据寄存器及内存信息对漏洞类型/可利用性进行判定等，并尝试应用多种漏洞利用技术自动生成利用脚本。
本篇文章会介绍 rex 安装/顶层接口/内部实现/相关依赖等内容。
## 安装
有两种方法
  1. 安装 rex 及其依赖 
  2. 直接安装 mechaphish 镜像
推荐直接使用 `shellphish/mechaphish` docker 镜像，比较方便
    docker pull shellphish/mechaphish; 
    docker run -it shellphish/mechaphish
rex 基于 angr，关于 angr 的使用方式，可以查看我的另一篇[教程](https://xz.aliyun.com/t/7117)。
## 测试
首先测试一下 rex 是否安装成功，简单测试代码如下：
    tg = archr.targets.LocalTarget(, target_os='cgc')
    crash = rex.Crash(tg, )
首先需要创建 target ,类型是 `archr.targets.Target` 并指定配置。
接下来通过 rex.Crash 接口，传递创建的 target 和可以触发 crash 的输入，我们可以获得 Crash 对象，便可以对 Crash
对象进行一系列分析，下面会涉及对 Crash 对象的操作。
这里 `path_to_binary` 为二进制文件路径，target_os 指定系统，cgc 或者 linux, 这里我们可以使用 cgc
的文件进行测试（可以在[binaries](https://github.com/angr/binaries) 中找到）
简单测试：
    t = archr.targets.LocalTarget(["/home/angr-dev/binaries/tests/defcon24/legit_00003"], target_os='cgc')
    crash = rex.Crash(t, b"\x00\x0b1\xc1\x00\x0c\xeb\xe4\xf1\xf1\x14\r\rM\r\xf3\x1b\r\r\r~\x7f\x1b\xe3\x0c`_222\r\rM\r\xf3\x1b\r\x7f\x002\x7f~\x7f\xe2\xff\x7f\xff\xff\x8b\xc7\xc9\x83\x8b\x0c\xeb\x80\x002\xac\xe2\xff\xff\x00t\x8bt\x8bt_o_\x00t\x8b\xc7\xdd\x83\xc2t~n~~\xac\xe2\xff\xff_k_\x00t\x8b\xc7\xdd\x83\xc2t~n~~\xac\xe2\xff\xff\x00t\x8bt\x8b\xac\xf1\x83\xc2t~c\x00\x00\x00~~\x7f\xe2\xff\xff\x00t\x9e\xac\xe2\xf1\xf2@\x83\xc3t")
如果没有出现报错则说明安装成功。
rex 也提供了多种测试样例, 可以在 tests 目录查看, 测试使用的文件可以在 [binaries
仓库](https://github.com/angr/binaries) 中找到.
## 顶层接口
使用 rex 通常步骤：
  1. 创建 target 对象，随后使用 target 和 input 创建 Crash 对象
  2. 对 Crash 进行分析，调用 explore 探索路径，调用 exploit() 方法构建 exp
  3. 获取 exploit 相关信息，导出到文件等
此外也可以对 state 添加约束进行求解等，自行探索。
### Crash 对象
属性
    - crash_types 返回 crash 的漏洞类型
方法
    - explorable()  Determine if the crash can be explored with the 'crash explorer'.
    - exploitable() Determine if the crash is exploitable.
    - exploit() 返回一个 ExploitFactory  实例，用于管理和构建 exp
    - explore() explore a crash further to find new bugs
    - memory_control()  determine what symbolic memory we control which is at a constant address
    - stack_control()  determine what symbolic memory we control on the stack.
    - copy() 拷贝 crash 对象
    - checkpoint()   Save intermediate results (traced states, etc.) to a file 
    - checkpoint_restore()
### ExploitFactory
通过 crash 的 exploit 方法我们可以获得 ExploitFactory 实例，用于管理和构建 exploit。
ExploitFactory 有一个重要的属性 arsenal，是一个字典，用来存储对应 technique 的 exploit, 关于 rex 中实现的
technique 后面会涉及。
### Vulnerability
rex 定义了如下几种漏洞：
    IP_OVERWRITE              = "ip_overwrite"
        PARTIAL_IP_OVERWRITE      = "partial_ip_overwrite"
        UNCONTROLLED_IP_OVERWRITE = "uncontrolled_ip_overwrite"
        BP_OVERWRITE              = "bp_overwrite"
        PARTIAL_BP_OVERWRITE      = "partial_bp_overwrite"
        WRITE_WHAT_WHERE          = "write_what_where"
        WRITE_X_WHERE             = "write_x_where"
        UNCONTROLLED_WRITE        = "uncontrolled_write" # a write where the destination address is uncontrolled
        ARBITRARY_READ            = "arbitrary_read"
        NULL_DEREFERENCE          = "null_dereference"
        ARBITRARY_TRANSMIT        = "arbitrary_transmit" # transmit where the buf argument is completely controlled
        ARBITRARY_RECEIVE         = "arbitrary_receive" # receive where the buf argument is completel controlled
## 内部解读
Rex 内部实现主要包含三个模块:
  * Crash：重现崩溃路径，包括漏洞类型判定, Crash 的可利用性判定等；
  * Technique：对于可利用的 Crash，采取相应的利用技术，构造 Exploit；
  * Exploit：调用各子模块，自动生成 Exploit
可以简单理解成 crash + technique = exploit ,下面我们来看具体内容
### crash 分析
导入 crash 后，首先对 crash 进行 trace、筛选内存写操作和 判定漏洞类型。对应的函数分别为 `_trace /
_filter_memory_writes / _triage_crash`
接下来我们对这三个函数进行分析：
#### 路径重现（tracing)
函数： _trace
使用给定的输入，通过符号执行，重现路径，如果没有 Crash 会抛出 NonCrashingInput 异常.
首先使用用户输入获得具体的 trace，
    # collect a concrete trace
       save_core = True
       if isinstance(self.tracer_bow, archr.arsenal.RRTracerBow):
           save_core = False
       r = self.tracer_bow.fire(testcase=test_case, channel=channel,save_core=save_core)
再进行符号化 trace
    self._t = r.tracer_technique(keep_predecessors=2, copy_states=False, mode=TracingMode.Strict)
    simgr.use_technique(self._t)
    simgr.use_technique(angr.exploration_techniques.Oppologist())
结束 trace, 检查是否有 crash
    # tracing completed
            # if there was no crash we'll have to use the previous path's state
            if 'crashed' in simgr.stashes:
                # the state at crash time
                self.state = simgr.crashed[0]
                # a path leading up to the crashing basic block
                self.prev = self._t.predecessors[-1]
            else:
                self.state = simgr.traced[0]
                self.prev = self.state
#### 获得内存写操作
`_filter_memory_writes` 获得所有的写内存操作，并将分成符号内存（ symbolic memory bytes ）和 flag 内存（
flag memory bytes ）。flag memory 针对的是 cgc 格式文件，其他情况下为空。
    def _filter_memory_writes(self):
            memory_writes = sorted(self.state.memory.mem.get_symbolic_addrs())
            if self.is_cgc:
                # remove all memory writes that directly end up in the CGC flag page (0x4347c000 - 0x4347d000)
                memory_writes = [m for m in memory_writes if m // 0x1000 != 0x4347c]
            user_writes = [m for m in memory_writes if
                           any("aeg_stdin" in v for v in self.state.memory.load(m, 1).variables)]
            if self.is_cgc:
                flag_writes = [m for m in memory_writes if
                               any(v.startswith("cgc-flag") for v in self.state.memory.load(m, 1).variables)]
            else:
                flag_writes = []
            l.debug("Finished filtering memory writes.")
            self.symbolic_mem = self._segment(user_writes)
            self.flag_mem = self._segment(flag_writes)
#### 漏洞类型判断(triage_crash)
rex 中 `_triage_crash` 函数用于判断 crash 对应的漏洞类型，漏洞类型之后的可利用性判定
漏洞判断基本思路如下：
  1. 检查 ip 是否符号化（即ip是否可控），并且检查可控的大小。通过此我们可以将漏洞判定为 `IP_OVERWRITE / PARTIAL_IP_OVERWRITE`。
  2. 检查 bp 是否符号化，并且检查可控的大小，通过此我们可以漏洞判定为 `BP_OVERWRITE / PARTIAL_BP_OVERWRITE`
  3. 检查触发崩溃时前一个 State，查看最近的操作（ recent_actions ）筛选出内存读写地址可控的操作，得到数组 `symbolic_actions`
  4. 如果符号化操作中有内存写，则判断写数据是否可控，通过此我们可以将漏洞判定为 `WRITE_WHAT_WHERE / WRITE_X_WHERE` 。
  5. 如果符号化操作中有内存读，我们可以将漏洞判定为 `ARBITRARY_READ` 。
以下截取该函数的部分内容帮助理解：
    # 判断 ip 是否可控，bp 类似        
        if self.state.solver.symbolic(ip): 
            # how much control of ip do we have?
            if self._symbolic_control(ip) >= self.state.arch.bits:
                l.info("detected ip overwrite vulnerability")
                self.crash_types.append(Vulnerability.IP_OVERWRITE)
            else:
                l.info("detected partial ip overwrite vulnerability")
                self.crash_types.append(Vulnerability.PARTIAL_IP_OVERWRITE)
            return
    # 筛选出目的地址可控的操作
            # grab the all actions in the last basic block
            symbolic_actions = [ ]
            if self._t is not None and self._t.last_state is not None:
                recent_actions = reversed(self._t.last_state.history.recent_actions)
                state = self._t.last_state
                # TODO: this is a dead assignment! what was this supposed to be?
            else:
                recent_actions = reversed(self.state.history.actions)
                state = self.state
            for a in recent_actions:
                if a.type == 'mem':
                    if self.state.solver.symbolic(a.addr.ast):
                        symbolic_actions.append(a)
    #判断是内存读还是内存写，并判断数据是否可控，由此确定漏洞类型
            for sym_action in symbolic_actions:
                if sym_action.action == "write":