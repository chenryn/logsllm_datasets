>
> 这里我犯了个错，由于不太熟吧，乱改数据类型，改成DCB字节型，结果转成代码后就懵了，在心灰意冷下我打开了IDA7.2，看到下面那个图，一度让我准备和IDA
> 6.8 say 拜拜。但是由于7.2 F5大法不管用（原因暂时未知），6.8还是很棒的，还是和它做好基友吧
这里要是用IDA7.2版本，他这里会识别出init节并标记（感觉棒棒哒）
### 通读伪代码，分析init_array
这里主要分析出：
  * 解密算法是从0x1000开始，对0x2AB4字节数据进行解密(JNI_OnLoad地址为0x274c必然被包含在内)
  * 调用JNI_OnLoad
分析出解密算法，可以自己写脚本进行解密，这里我们选择另外一种，往下看
### 另辟蹊径，解密JNI_OnLoad
**思路**
：so库一经加载到内存后，要处于解密后的状态才可以正常被程序调用，所以从内存中dump出shella-3.0.0.0.so文件，即完成对JNI_Onload解密的操作
> 无意之举吧，：）
>
>
> 当时准备通过调试获取init_array内存地址的时候没有成功，当时想着dump下so文件应该包含有解密后的节头表，后来看到一篇文章结合ELF装载知识才知道节头表并不会被装载进内存更谈不上dump下来，但是用IDA打开后的JNI_OnLoad确是解密后的
解密脚本，具体内存地址和加载进内存的段长度，需要自己调试的时候Ctrl+S自己看和计算
    static main()
    {
        auto i,fp;
        fp = fopen("d:\\dump","wb");
        auto start = 0x75FFD000;
        auto size = 32768;
        for(i=start;i/maps获取odex的内存基址，根据下面计算，得到dex文件偏移地址。a1+0x6C=data_off，a1+0x68=data_size
  1. dex偏移 + ODex基址 + 0x28即Dex文件内存地址。结合文件大小dump出dex文件数据，接着去除前0xE0字节数据，将剩余内容写入classes.dex文件中
# 小结
【1】IDA在识别节头出错的情况下，会去识别程序头继续分析
【2】ELF基础：ELF节头表不能被装载进内存。由于ELF程序装载过程中只用到了程序头表
【3】#define HIDWORD(l) ((DWORD)(((DWORDLONG)(l) >> 32) & 0xFFFFFFFF))
【4】`Alt+S`：修改段属性，将需要保存的段内存勾上loader选项，`TakeMemorySnapshot(1);`：IDC语句，直接打下内存快照
【5】0x28为odex文件格式中dex_header的相对偏移地址，所以(odexAddr + 0x28)为该odex文件格式中dex
header的绝对地址
总的来说，是一次马马虎虎的脱壳路程，但是从结果看还是成功的。中途出现很多问题，耐心是必须的。不足也是很多的：
  * JNI本地方法注册调用逻辑不熟悉，过程中的很多地方是参考其他文章学习到的。
  * 伪代码也不是完全弄懂了，很多代码细节是模糊的
# 参考
【1】国内众多加固厂商存在有各自标志性的加固文件分析的时候可以快速识别
【2】[ELF的dump及修复思路](https://pkiller.com/android/ELF的dump及修复思路/)
【3】section开源修复代码 
【4】[乐固壳分析] 
【5】[原创]乐固libshella 2.10.1分析笔记 
【6】Dalvik虚拟机JNI方法的注册过程分析
【7】乐固2.8 
【8】Fatal signal 11问题的解决方法
【9】Android “动态分析”打开调试开关的三种方法
【10】手动绕过百度加固Debug.isDebuggerConnected反调试的方法