相同的方法，QuackObserva6le金将这些方法的遇用转验
类将工作香托给Observable。
Observable的方法。
在此构造器中，我们传进了
public class Observable implements Quackobservable {
QuackObseruable。卷看下面的notiby（）方
ArrayList observers = new ArrayList () ;
QuackObservable duck;
法，你会发现当通知发生时，观察老
把此对象传过去，好让观察者知道是
public Observable(QuackObservable duck) {
this.duck = duck;
哪个对象在呵呱叫。
public void registerObserver (Observer observer)
observers.add (observer) ;
这是注册观察者的代
码
public void notifyObservers (){
Iterator iterator = observers.iterator();
while (iterator.hasNext ()){
Observer observer = (Observer)iterator.next() ;
observer.update (duck) ;
这是通知用的代码
接下来，让我们看看Qackable类是如何使用这个转助类的….
你现在的位置
517
---
## Page 554
呱呱叫装饰者其实也是Observable
16
整合Observable辅助类和Quackable类
这应该不算太糟，我们只是要确定Quackable类是和Observable组合在一起的，并且它们知道怎样
来委托工作。然后，它们就准备好成为Observable了。下面是MallardDuck的实现，其他的鸭子实
现也类似。
每个Quackable都有一个
public class MallardDuck implements Quackable{
Observable observable;
Observa6le实例变量。
public MallardDuck(){
在构造器中，我们创建一个
observable=new Observable(this);
Observa6le，并传入一个
MallardDuck对象的引用。
public void quack()(
System.out.println("Quack");
当我们呱呱叫时，需要让
notifyobservers();
观察者知道。
public void registerobserver(Observer observer)
observable.registerObserver(observer);
publicvoidnotifyobservers()l
observable.notifyobservers();
这是我们的两个QuackObservable方法。注意
我们只是香托给辅助类进行。
harpenyourpencil
我们还没有改变一个Quackable的实现，即QuackCounter装饰者。它也必须成
为Observable。你何不试着写出它的代码呢？
518
第12章
---
## Page 555
复合模式
几乎大功告成了！我们还需要把模式的Observer端完成。
我们已经实现了Observable所需要的一切，现在我们需要一些观察者
（Observer）。我们先从Observer接口开始：
Observer接口只有一个方
法，就是update。它雳
要传入正在呱或叫的对象
(QuackObsetvable)。
public interface Observer {
public void update (QuackObservable duck);
1
现在我们需要一个观察者：呱呱叫学家跑
哪里去了？
我们需要实现O6serwable接口.否则就无法以
QuackObserwable注册。
public class Quackologist implements Observer (
public void update(Quackobservable duck)(
System.out.println("Quackologist:
duck
just quacked.");
Quackolosist很简单，只有一个方法，
update()。它打印出正在呱或叫的
Quackable对象。
你现在的位置
519
---
## Page 556
群组合也是Observable
Sharpenyourpencil
万一·呱呱叫学家想观察整个群，又该怎么办呢？这么做又会是什么意思呢？不
妨这样来考虑：如果我们观察一个组合，就等于我们观察组合内的每个东西。
所以，当你注册要观察某个群（flock），就等于注册要观察所有的孩子（抱
歉，我是说所有呱呱叫者），这甚至还包括另一个群。
在进入后面的内容前，请你写下Flock观察者的代码.
520
第12章
---
## Page 557
复合模式
18
我们准备开始观察了。让我们更新模拟器，试试看：
public class DuckSimulator {
public static void main(String[] args) (
DuckSimulator simulator - new DuckSimulator () ;
AbstractDuckFactory duckFactory = new CountingDuckFactory();
simulator.simulate (duckFactory);
void simulate(AbstractDuckFactory duckFactory)(
//在这里创建鸭子工厂和鸭子
//在这里创建群
我们在这里所需要做的事
System.out.println("\nDuck Simulator: With Observer");
就是创建一个Qsackologist，
Quackologist quackologist =new Quackologist();
把它注册成为一个群的
flockofDucks.registerobserver(quackologist);
观察者。
simulate (flockOfDucks);
System.out.println("\nThe ducks quacked " +
QuackCounter.getQuacks()+
这次我们模拟整个群。
"times");
void simulate (Quackable duck) {
duck.quack() ;
让我们试试看，了解这一切是如
何工作的
9
你现在的位置
521
---
## Page 558
曲终鸭散
这是一个大场面的终曲。五个，不，有六个模式一同出现在这个令人惊讶的鸭子
模拟器中。在没有更多麻烦的情况下，我们现在就为您呈现鸭子模拟器！
java DuckSimulator
Duck Simulator:With Observer
在每一次呵叫
Quack
后，不管是哪
Quackologist:Redhead Duck just quacked.
种呱叫声，观
Kwak
察者都会收到通
Quackologist:Duck Call just quacked.
Squeak
知
Quackologist:Rubber Duck just quacked.
Honk
Quackologist:Goose pretending tobeaDuck justquacked
Quack
Quackologist:Mallard Duck just quacked.
Quack
Quackologist:MallardDuck just quacked.
Quack
Quackologist:Mallard Duck just quacked.
Quack
叫学家依然
Quackologist:Mallard Duck just quacked.
The Ducks quacked 7 times.
金得到次数
问：
问：
宰牛刀”的感觉。有时候，用好的
这就是复合模式？
所以，设计模式真正漂
00设计原则就可以解决问题，这样
亮的地方在于，遇到问题时，我可以
其实就够了。
答：
不，这只是一群模式携
拿模式逐一地解决问题，直到所有的
在下一章，我们将讨论更多这方面的
问题都被解决。我这样说对吗？
问题。现在我只能告诉你，采用模式
手合作，所谓的复合模式，是指一
时必须要考虑到这么做是否有意义。
群模式被结合起来使用，以解决一
般性问题。我们很快就会看到Model-
合：
错！我们在鸭子的例子
绝对不能为了使用模式而使用模式。
中之所以这么做，主要的目的是展
有了这样的观念，鸭子模拟器的设计
View-Controller（模型-视图-控制
器）复合模式。它是由数个模式结合示许多模式可以合作。在真实的设看起来就显得做作。但是，这个例子
起来而形成的新模式，一再地被用于计过程中，你不会想要这么做的。事有趣，而且在过程中还让我们体会到
实上，鸭子模拟器的许多部分都可以
多个模式是如何携手解决一个问题
解决许多设计问题。
用模式解决，只是有一点“杀鸡两用
的。
522
第12章
---
## Page 559
复合模式
我们做了什么？
我们从一大堆Quackable开始...
有一只鹅出现了，它希望自己像一个Quackable。
所以我们利用适配器模式，将鹅适配成Quackable。现在你就可以调用鹅适配器的
quackO方法来让鹅咯略叫。
然后，呱呱叫学家决定要计算呱呱叫声的次数。
所以我们使用装饰者模式，添加了一个名为QuackCounter的装饰者。它用来追踪quackO
被调用的次数，并将调用委托给它所装饰的Quackable对象。
但是呱呱叫学家担心他们忘了加上QuackCounter装饰者。
所以我们使用抽象工厂模式创建鸭子。从此以后，当他们需要鸭子时，就直接跟工厂要，
工厂会给他们装饰过的鸭子。（别忘了，如果他们想取得没装饰的鸭子，用另一个鸭子
工厂就可以！）
又是鸭子，又是鹅，又是quackable的....我们有管理上的困扰。
所以我们需要使用组合模式，将许多quackable集结成一个群。这个模式也允许群中有群，
以便让呱呱叫家来管理鸭子家族。我们在实现中通过使用ArrayList中的java.util的选代器
而使用了选代器模式。
当任何呱呱声响起时，呱呱叫学家都希望能被告知。
所以我们使用观察者模式，让呱呱叫学家注册成为观察者。现在，当呱呱声响起时，呱呱
叫学家就会被通知了。在这个实现中，我们再度用到了选代器。呱呱叫学家不仅可以当某个
鸭子的观察者，甚至可以当一整群的观察者。
这真是一场累人的设计模式操练。
你也应该去研究下一页的类围，并
在继续模型一视围一控制器的内容之前，
放松体息一下。
你现在的位置，523
---
## Page 560
鸭瞰这一切
实鸭瞰：类图
在一个小小的鸭子模拟器中，我们打包了许多模式。系统概览是这样的：
DuckSimulator
鸭子模拟器使用工厂创建鸭子。
AbstractDuckFactory
createMallardDuck()
createRedheadDuck()
createDuckCalt)
reateRubberDuck(]
DuckFactory
CountingDuckFactory
createMallardDuckl)
createMallardDuck()
createRedheadDuck()
createRedheadDuck()
reateDuckCall()
createDuckCal()
createRubberDuck()
createRubberDuck()
这里有两个不同的工厂，它
们户生相同的户品家
族。DuckFactory创建鸭子
CountingDackFactory创建被
QxackCounter装饰老包装过的
如果某一个类实现
鸭子
Observer，此类就
可以观察Quacka6le，
c>
当guack（）被调用e时
Observer
它会收到通知。
update(QuackObsenvable)
Quackologist
我们只为Qxacka6le实现一种O6serven，即
(aqeuesqoxpen)eepdn
Quackologist。但任何实现Observen接口的类都可
以观察子…….实现一个BidWatcher（年监测
器）观察者怎么样？
524
第12章
---
## Page 561
复合模式
QuackObservable接口有一通方法，任
何Obseru6le都必须实现这些方法。
每个Qxackable都具备一个
Obseruable实例，用来跟踪它的
Quackable是一个接口.所有具有
观察者，而且它或或声响起时
QuackObservable
registerObserver(Observer)
通知观察者。
叫行为的类，就必须实现这个接
口。
notityObservers(
>
Observable
ArayLisl observers
Quackable
QuackCbservable duck
qusck[
registerObserver(Observer)
notilyObservers(
MallardDuck
GooseAdapter
RedheadDuck
Goose goose
quack()
遥配器·
DuckCall
RubberDuck
notilyObservers[]
quack()
rObserver
Flock
ottyOtse
ArayList ducks
add(Quackable)
quack[)
registerObserver(Observer)
组合
我们有两类Quachable，一类是赠子：另一类是有鸭
noifyObservers()
叫事的东西：像GooseAdapte，Fotk，QaackCunten
QuackCounter
其中GooseAdapter他装端，让端卷起来像是Quackable：
Quackabie duck
Flock是Qackale的组合：Qeckconte为Qackle添
getQuacks()
如行为。
Oopenb
....装饰者。
PDG
你现在的位置
525
---
## Page 562
MVC之歌
复合模式之王
如果猫王是复合模式，他的名字将是Model一View一ControlLer，他会喝这么一
首歌......
模型，视图，控制器
建模人们的窃窃私语
词曲：Zames Dempsey
建模一些水素蛋
MVC是一种范型
建模Hexley的瞒砾步履
它构造代码成为功能段，免得你脑袋淤阻
为达到复用，你必须让边界干净
模型视图
这边是模型，那边是视图，控制器在中间
你可以建模GQ时尚杂志中的模特儿。
模型视图控制器
视图
Java也是
奶油
视图对累通常是控件，用来显示和编辑
控制器
用户可以和它文互，它几乎可以包含任何东西
但视图不知道模型
模型
字符串可以是一个电话号码，或者亚里士多德的文学作品
保持松耦合
模型视图，和夹心销干一样有三层
达到最高的复用
模型视图控制器
模型视图，模型视图，模型视图控制器
模型视图控制器