依据Figure4我们使用算法得到的序列如下：
    1. http://localhost/App/index.php
    2. http://localhost/App/selectBooks.php with POST params:[book name=intro to CS by author1, edition=2,publisher=aaaaaaa]
    3. http://localhost/App/selectBooks.php?action
    =borrow
    4. http://localhost/App/hold.php
    5. http://localhost/App/hold.php?step=checkout
    6. http://localhost/App/hold.php?step=checkout
    &msg=
### 4 Implementation
NAVEX基于现有的几种工具进行实现：
  1. 扩展的CPG图利用phpjoern进行实现；
  2. 扩展的CPG图存储在Neo4j图形数据库中；
  3. 图遍历算法使用Apache TinkerPop编写；
  4. 约束求解使用z3以及其扩展Z3-str；
  5. 爬虫程序使用被约束和z3断言扩展的crawler4j；
  6. 爬虫对JavaScript的处理使用了Narcissus JavaScript引擎的扩展；
  7. 服务端代码执行跟踪使用Xdebug。
### 5 Evaluation
**数据集** ：26个真实PHP应用程序，代码库组合为3.2M SLOC和22.7K PHP文件如下表所示。
标准：
(i) 评估最流行应用的最新版本，并且要求是复杂且大型的PHP应用程序，如Joomla，HotCRP和WordPress；  
(ii) 使用NAVEX与已有的一些先进项目(例如，Chainsaw，RIPS)进行比较。
**部署** ：实验环境：Ubuntu 12.04 LTS VM，2核2.4GHz，40GB
RAM。目标WebApp部署：(1)进行静态分析；(2)部署后进行动态分析(注意每次爬虫后要恢复数据库初始状态)
**结果摘要** 。 NAVEX共构建了204个漏洞exp，其中195个注入类型，9个是逻辑漏洞。
增强的CPG平均将假阳性（FP）减少了87％。包含用于构建导航图的客户端代码分析将Exp生成的精度平均提高了54％。
在评估集上，NAVEX能够进行6个HTTP请求来拼接出Exp。
**增强的代码属性图统计** ：表2显示了增强的CPG构建时间和大小，可以看出NAVEX的运行时开销很低。
**导航图统计** ：表3总结了在NAVEX的步骤II中生成漏洞Exp的总时间。
以上是综述，下面将阐述作者从四个方面对NAVEX的评估：1.Exploits；2.定量分析；3.与相关工作的比较；4.限制和讨论
#### 5.1 Exploits
接下来作者将对NAVEX针对的漏洞逐一简要说明：
**SQLI漏洞** ：
漏洞触发点：mssql_query, mysql_query, mysqli_query,sqlite_query
漏洞定位：155个SQLI可利用的漏洞点，其运行时间为37分和45秒。
Exp生成：105个SQLI漏洞利用Exp，其运行时间为7分和76秒。
**SQLI漏洞利用** ：
**XSS漏洞** ：
漏洞触发点：echo、print
漏洞定位：1小时49分钟内共发现了133个XSS可利用的漏洞点，其中5个是误报
Exp生成：40分12秒为133个漏洞点生成了90个XSS漏洞利用
**XSS漏洞利用**
：如下所示包含strtr函数的路径会被认为是可被攻击的，但是htmlspecialchars的就不会，因为strtr函数对XSS的过滤能力很弱，之后求解器会选择%26%2339%3B-alert(1)-%26%2339%3B来进行绕过。
**EAR漏洞** ：
漏洞触发点：header
漏洞定位：17分17秒内发现了19个良性EAR和3个恶意EAR漏洞
Exp生成：成功针对22个EAR漏洞生成了9个漏洞利用
**代码执行漏洞** ：
漏洞触发点：eval
漏洞定位：在21m20sec内找到98次调用但是均无安全缺陷
**命令注入漏洞** :
漏洞触发点：exec,expect_popen,passthru,pcntl_exec,popen,proc_open,shell_exec,system,mail,backtick_operator
漏洞定位：在22m32sec内NAVEX没有找到任何易受影响的漏洞点
**文件包含漏洞** ：
漏洞触发点：include,include_once,require,require_once
漏洞定位：在27分58秒内找到1处接收器内包含了可控变量但是因为后面有约束所以无法构造出Exp，即此处依旧不可利用
#### 5.2 Measurements
  1. 图5显示了NAVEX的性能(定位漏洞点的耗时和构造Exp的耗时)
  2. 图6显示使用了过滤和DB标签增强的CPG对可能漏洞点判别的影响。(减少了误报)
  3. 总覆盖率为68％
  4. 对客户端代码进行分析带来的好处：提升了精度和覆盖率
#### 5.3 Comparison with Related Work
  1. 漏洞检测方面与RIPS，Chainsaw的对比；
  2. Exp生成与Chainsaw(只能够对SQLi和XSS生成Exp)的对比；
  3. 效率方面与Chainsaw的对比：
生成Exp: NAVEX->25分钟2秒；Chainsaw->112分钟
前期准备: NAVEX->18分26秒；Chainsaw->1天13小时21分
#### 5.4 Limitations and Discussion
  1. Web应用程序的某些功能尚不受支持，比如文件上传逻辑；
  2. 自动从图节点导出的TAC公式不完整(未提及哪些不支持)；
  3. 静态分析进行漏洞定位存在误报；
  4. CPG图不支持解析动态函数调用(文中说这个不太重要但未具体说明，可能是使用极少)；
  5. 如果网站的动态逻辑不被NAVEX支持，那么将无法构造漏洞利用(比如前面的SchoolMate程序的会话维持未被支持<-笔者从文中得到的信息)
### 6 Related Work
详细见论文中表述
### 7 Conclusions
PS: 此部分是一些笔者个人的总结并非论文的最终总结
之前对PHP漏洞的自动化审计工作主要分为静态分析和动态分析。其中静态分析的一些代表的可实际使用的工具有rips、cobra、Cobra-W以及seay代码审计系统，其中rips的建模分析以及攻击字典的构造是比较详细和全面的。虽然可以参考其代码和论文进行学习，但是开源版对现在而言已经不具有实用价值。cobra是基于AST进行分析，AST是具有一定的局限性的，从分析效果上而言没有控制流图好，当然也没有今天提到的CPG好。但是cobra在AST上建立的分析模型以及他对规则集的引入方式是具有一定参考性的。当然在cobra之后的Cobra-W是令人眼前一亮的感觉，虽然还未完全开发完成，但是它对文件包含的处理以及对于自定义过滤函数的处理思想是很值得学习的(相比rips的暴力直接将代码拼接好一些)。seay代码审计系统的优点就是其中包含了对数据库的审计。其它的还有phpvulhunter等工具，但是年代较为久远因而笔者没有对其代码做进一步的分析。在分析过上面的程序之后笔者也曾在一年前尝试引入别名分析等新机制来进一步改善静态分析的准确率，但是效果不是很理想随后就弃坑了。动态分析最具代表性的是prvd，这个笔者还未进行分析，但是用效果不错，感兴趣可以对其进行进一步的分析。
最后回到本文，此文提出的NAVEX采用静态分析和动态分析相结合的方式，可以自动完成对漏洞的分析并生成Exp。在文中提到的几个方法都是非常新颖的，从效果上来看很不错。如果从工程的角度来看，完全可以借鉴其思想从而进行深入的开发完善。
* * *