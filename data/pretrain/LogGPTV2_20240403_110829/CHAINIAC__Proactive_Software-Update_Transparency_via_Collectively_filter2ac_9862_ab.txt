4. Linear immutable public release history: The
software-update system should provide a globally con-
sistent tamper-evident public log where each software
release corresponds to a unique log entry that, once cre-
ated, cannot be modiﬁed or deleted.
5. Evolution of signing keys: The software-update sys-
tem should enable the rotation of authoritative keys,
even when a (non-majority) subset of the keys is com-
promised.
6. Timeliness of updates: Clients should be able to ver-
ify that the software indeed corresponds to the latest
one available.
3.2 System and Threat Model
In the system model, we introduce terminology and ba-
sic assumptions; and, in the threat model, potential attack
scenarios against CHAINIAC.
System model. Developers write the source code of a
software project and are responsible for approving and
announcing new project releases. Each release includes
source code, binaries (potentially, for multiple target ar-
chitectures), and metadata such as release description.
A snapshot refers to a set of releases of different software
projects at a certain point in time. Projects can have sin-
gle or multiple packages. Witnesses are servers that can
validate and attest statements. They are chosen by the
developers and should be operated ideally by both de-
velopers and independent trusted third parties. Witnesses
are trusted as a group but not individually. Build veri-
ﬁers are a subset of the witnesses who execute, in addi-
tion to their regular witness tasks, reproducible building
of new software releases and compare them to the release
binaries. Witnesses and build veriﬁers jointly form an up-
date cothority (collective authority). The update timeline
refers to a public log that keeps track of the authorita-
tive signing keys, as well as the software releases. Users
are clients of the system; they receive software releases
through an (untrusted) software-update center.
Threat model. We assume that a threshold td of nd de-
velopers are honest, meaning that less than td are com-
promised and want to tamper with the update process. We
further assume that a threshold tw of nw witness servers is
required for signing, whereas at most fw = nw (cid:0) tw wit-
nesses can potentially be faulty or compromised. To en-
sure consistency and resistance to fork attacks, CHAINIAC
requires nw (cid:21) 3fw + 1, hence, tw >= 2fw + 1. If this
property is violated, CHAINIAC does not guarantee sin-
gle history of the update timeline, however, even then,
each history will individually be valid and satisfy the other
correctness and validation properties, provided fewer than
tw witnesses are compromised. Furthermore, a threshold
tv of nv build veriﬁers is honest and uses a trustworthy
compiler [71] such that malicious and legitimate versions
of a given source-code release are compiled into differ-
ent binaries. Software-update centers and mirrors might
be partially or fully compromised. Moreover, a powerful
(e.g., state-level) adversary might try to target a speciﬁc
group of users by coercing developers or an update center
to present to his targets a malicious version of a release.
Finally, we assume that users of CHAINIAC are able to se-
curely bootstrap, i.e., receive the ﬁrst version of a software
package with a hard-coded initial public key of the system
via some secure means, e.g., pre-installed on a hard drive,
on a read-only media, or via a secure connection.
1274    26th USENIX Security Symposium
USENIX Association
DevelopersUpdate CothoritySoftware UpdateCenter/Mirror (untrusted)UsersRelease 4BinariesSource codePolicySkipchain-based Update TimelineDevelopers’signatures123451Developers’ approvals2Signature request3Verification & Collective signing4Appending co-signed release to log5Binary authenticationRelease 2Key configIIRelease 3Release 4Release 1Key configIsignaturehashapprove.
not approved by the developers.
such that the update cothority signs it.
An attack on the system is successful if an attacker
manages to accomplish at least one of the following:
(cid:15) Make developers sign the source code that they do not
(cid:15) Substitute a release binary with its tampered version
(cid:15) Trick the update cothority into signing a release that is
(cid:15) Create a valid fork of the public release history or mod-
ify/revoke its entries; or present different users with dif-
ferent views of the history.
(cid:15) Trick an outdated client into accepting a bogus public
(cid:15) Get a client to load and run a release binary that is not
approved by the developers or validated by the update
cothority.
key as a new signing key of the update cothority.
3.3 Architecture Overview
An illustration of CHAINIAC, showing how its various
components interact with each other, is given in Figure 1.
To introduce CHAINIAC, we begin with a simple straw-
man design that most of today’s software-update systems
use, and we present a roadmap for evolving this design
into our target layout. Initially, we assume that only a
single, static, uncompromisable cryptographic key pair
is used to sign/verify software releases. The private key
might be shared among a group of developers, and the
public key is installed on client devices, e.g., during a
bootstrap. To distribute software, one of the developers
builds the source code and pushes the binary to a trusted
software-update center from where users can download
and install it. This strawman system guarantees that users
receive authenticated releases with a minimal veriﬁcation
overhead.
This design, though common, is rife with precarious as-
sumptions. Expecting the signing key to be uncompro-
misable is unrealistic, especially if shared among mul-
tiple parties, as attackers need to subvert only a single
developer’s machine to retrieve the secret key or to co-
erce only one of the key owners. For similar reasons, it is
utopian to assume that the software-update center is trust-
worthy. Moreover, without special measures, it is hard to
verify that the binaries were built from the given (un-
modiﬁed) source code, as the compilation process is of-
ten inﬂuenced by variations in the building-environment,
hence non-deterministic. If an attacker manages to replace
a compiled binary with its backdoored version, before it
is signed, the developers might not detect the substitution
and unknowingly sign the subverted software.
Eliminating these assumptions creates the need to track
a potentially large number of dynamically changing sign-
ing keys; furthermore, checking a multitude of signatures
would incur large overheads to end users who rarely up-
date their software. To address these restrictions, we trans-
form the strawman design into CHAINIAC in six steps:
1. To protect against a single compromised developer,
CHAINIAC requires that developers have individual
signing keys and that a threshold of the developers sign
each release, see step 1⃝ in Figure 1.
2. To be able to distribute veriﬁed binaries to end users,
we introduce developer-signed reproducible builds. Al-
though users still need to verify multiple signatures,
they no longer need to build the source code.
3. To further unburden users and developers, we use a
cothority to validate software releases (check developer
signatures and reproducible binaries) and collectively
sign them, once validated: steps 2⃝ and 3⃝ in Figure 1.
4. To protect against release-history tampering or stealthy
developer-equivocation, we adopt a public log for soft-
ware releases in the form of collectively signed decen-
tralized hash chains, see step 4⃝ in Figure 1.
5. To enable
efﬁcient key rotation, we replace hash
chains with skipchains, blockchain-like data structures
that enable forward linking and decrease veriﬁcation
overhead by multi-hop links.
6. To ensure update timeliness and further harden the sys-
tem against key compromise, we introduce a multi-
layer skipchain-based architecture that, in particular,
implements a decentralized timestamp role.
Before presenting CHAINIAC in detail in Section 5, we
introduce skipchains, one of CHAINIAC’s core building
blocks, in Section 4.
4 Skipchains
Skipchains are authenticated data structures that com-
bine ideas from blockchains [41] and skiplists [55, 61].
Skipchains enable clients (1) to securely traverse the time-
line in both forward and backward directions and (2) to
efﬁciently traverse short or long distances by employing
multi-hop links. Backward links are cryptographic hashes
of past blocks, as in regular blockchains. Forward links
are cryptographic signatures of future blocks, which are
added retroactively when the target block appears.
We
and
distinguish
randomized
deterministic
skipchains, which differ in the way the lengths of
multi-hop links are determined. The link length is tied to
the height parameter of a block that is computed during
block creation, either randomly in randomized skipchains
or via a ﬁxed formula in deterministic skipchains. In both
approaches, skipchains enable logarithmic-cost timeline
traversal, both forward and backward.
USENIX Association
26th USENIX Security Symposium    1275
entity (possibly a decentralized collective such as a BFT-
CoSi cothority [41, 42, 69]) that represents the head of
trust of the system during time step t. To create the re-
quired signatures for the forward links until all slots in Ft
are full, in particular, Et must “stay alive” and watch the
head of the skipchain. Once this is achieved, the job of Et
is done and it ceases to exist.
4.2 Useful Properties and Applications
Skipchains provide a framework for timeline tracking,
which can be useful in other domains such as cryptocur-
rencies [42, 43, 56], key-management [41, 51], certiﬁcate
tracking [1,45] or, in general, for membership evolution in
decentralized systems [68,69]. Beyond the standard prop-
erties of blockchains, skipchains offer the following two
useful features.
First, skipchains enable clients to securely and efﬁ-
ciently traverse arbitrarily long timelines, both forward
and backward from any reference point. If the client has
the correct hash of an existing block and wants to obtain
a future or past block in the timeline from an untrusted
source (such as a software-update server or a nearby peer),
to cryptographically validate the target block (and all links
leading to it), the client needs to download only a logarith-
mic number of additional, intermediate blocks.
Secondly, suppose two resource-constrained clients
have two reference points on a skipchain, but have no
access to a database containing the full skipchain, e.g.,
clients exchanging peer-to-peer software updates while
disconnected from any central update server. Provided
these clients have cached a logarithmic number of ad-
ditional blocks with their respective reference points –
speciﬁcally the reference points’ next and prior blocks at
each level – then the two clients have all the information
they need to cryptographically validate each others’ ref-
erence points. For software updates, forward validation is
important when an out-of-date client obtains a newer up-
date from a peer. Reverse validation (via hashes) is useful
for secure version rollback, or in other applications, such
as efﬁciently verifying a historical payment on a skipchain
for a cryptocurrency.
5 Design of CHAINIAC
In this section, we present CHAINIAC, a framework en-
hancing security and transparency of software updates.
For clarity of exposition, we describe CHAINIAC step-by-
step starting from a strawman update-system that uses one
key to sign release binaries, as introduced in Section 3. We
begin by introducing a decentralized validation of both
source code and corresponding binaries, while alleviat-
ing the developer and client overhead. We then improve
Figure 2: A deterministic skipchain S 3
2
4.1 Design
We denote a skipchain by S h
b where h (cid:21) 1 and b > 0 are
called skipheight and skipbasis, respectively. If 0 < b < 1
we call the skipchain randomized; and if b (cid:21) 1 (b integer),
we call it deterministic. The elements of a skipchain are
skipblocks Bt = (idt; ht; Dt; Bt; Ft) where t (cid:21) 0 is the
block index. The variables idt, ht, Dt, Bt, and Ft denote
block identiﬁer, block height, payload data, list of back-
ward links, and list of forward links, respectively. Both Bt
and Ft can store exactly ht links and a reference at index
0 (cid:20) i (cid:20) ht (cid:0) 1 in Bt (Ft) points to the last (next) block in
the timeline having at least height i + 1. For deterministic
skipchains this block is Bt(cid:0)j (Bt+j) where j = bi.
The concrete value of ht is determined by the depen-
dency of the skipchain’s type: if S h
b is randomized, then
a coin, with probability b to land on heads, is repeatedly
ﬂipped. Once it lands on tails, we set ht = minfm; hg
where m denotes the number of times it landed on heads
up to this point. If S h
b is deterministic, we set
ht = maxfi : 0 (cid:20) i (cid:20) h ^ 0 (cid:17) t mod bi(cid:0)1g :
Fig. 2 illustrates a simple deterministic skipchain.
During the creation of a block, its identiﬁer is set to the
(cryptographic) hash of Dt and Bt, both known at this
point, i.e., idt = H(Dt; Bt). For a backward link from Bt
to Bt(cid:0)j, we simply store idt(cid:0)j at index i in Bt. This works
as in regular blockchains but with the difference that links
can point to blocks further back in the timeline.
Forward links [41], are added retroactively to blocks
in the log, as future blocks do not yet exist at the time
of block creation. Furthermore, forward links cannot be
cryptographic hashes, as this would result in a circular de-
pendency between the forward link of the current and the
backward link of the next block. For these reasons, for-
ward links are created as digital (multi-)signatures. For a
forward link from Bt to Bt+j, we store the cryptographic
signature ⟨idt+j⟩Et at index i in Ft where Et denotes the
1276    26th USENIX Security Symposium
USENIX Association
timet−4t−3t−2t−1t123123heightSkipblockForwardlink(signature)Backwardlink(hash)transparency and address the evolution of update conﬁg-
urations by using skipchains. Finally, we reduce traver-
sal overheads with multi-level skipchains and demonstrate
how to adapt CHAINIAC to multi-package projects.
5.1 Decentralized Release-Approval
The ﬁrst step towards CHAINIAC involves enlarging
the trust base that approves software releases. Instead of
using a single (shared) key to sign updates, each software
developer signs using their individual keys. At the begin-
ning of a project, the developers collect all their public
keys in a policy ﬁle, together with a threshold value that
speciﬁes the minimal number of valid developer signa-
tures required to make a release valid. Complying with
our threat model, we assume that this policy ﬁle, as a trust
anchor, is obtained securely by users at the initial acquisi-
tion of the software, e.g., it can reside on a project’s web-
site as often is the case with a single signing key in the
current software model.
Upon the announcement of a software release, which
can be done by a subset or all developers depending on
the project structure, all the developers check the source
code and, if they approve, they sign the hash of it with
their individual keys, e.g., using PGP [14], and they add
the signatures to an append-only list. Signing source code,
instead of binaries, ensures that developers can realisti-
cally verify (human-readable) code.
The combination of the source code and the signature
list is then pushed to the software-update center from
where a user can download it. For simplicity, we ﬁrst as-
sume that the update center is trusted, later relaxing this
assumption. When a user receives an update, she veriﬁes
that a threshold of the developers’ signatures is valid, as
speciﬁed in the policy ﬁle already stored on user’s ma-
chine. If so, the user builds the binary from the obtained
source code and installs it. An attacker trying to forge a
valid software-release needs to control the threshold of the
developers’ keys, which is presumably harder than gain-
ing control over any single signing key.
5.2 Build Transparency via Developers
The security beneﬁts of developers signing source-code
releases come at the cost of requiring users to build the
binaries. This cost is a signiﬁcant usability disadvantage,
as users usually expect to receive fully functional binaries
directly from the software center. Therefore in our second
step towards CHAINIAC, we transfer the responsibility of
building binaries from users to developers.
When a new software release is announced, it includes
not only the source code but also a corresponding binary
(or a set of binaries for multiple platforms) that users will
obtain via an update center. Each developer now ﬁrst vali-
dates the source code, then compiles it using reproducible
build techniques [49, 59]. If the result matches the an-
nounced binary, he signs the software release. Assuming
a threshold of developers is not compromised, this pro-
cess ensures that the release binary has been checked by