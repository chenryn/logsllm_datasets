# 【漏洞分析】如何通过内核命令注入绕过Nexus 6的安全启动模式（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：alephsecurity.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
在2017年5月的[Android安全公告](https://source.android.com/security/bulletin/2017-05-01#eop-in-motorola-bootloader)中，Google发布了一个安全补丁，修复了我们之前在Nexus
6的bootloader中发现的一个严重的漏洞（[CVE-2016-10277](https://alephsecurity.com/vulns/aleph-2017011)）。
利用这个漏洞，物理攻击者或者某个已拥有（bootloader锁定下）目标设备ADB/fastboot
USB访问权限的用户（比如恶意软件可以等待具备ADB权限的开发者设备通过USB接口插入主机）能够打破设备的安全（或已验证的）启动机制，通过加载一个精心构造的恶意initramfs镜像，攻击者可以获得目标设备的root权限，完全控制设备的用户空间（在这个空间可以实施更多攻击）。此外，漏洞利用过程并不会导致设备恢复到出厂设置，因此用户数据会保持不变（并且仍然处于加密状态）。需要注意的是，我们所演示的并不是一个不受任何条件限制的攻击过程。
在漏洞研究过程中，我们同时也[发现](https://alephsecurity.com/2017/05/23/nexus6-initroot/#anecdote-a-linux-kernel-out-of-bounds-write-cve-2017-1000363)了一个已有18年历史的Linux内核漏洞（漏洞不会对Nexus
6造成影响，因此可能不会影响任何Android设备）：[CVE-2017-1000363](https://alephsecurity.com/vulns/aleph-2017023)。
在本文开始前，我们可以先看一下PoC演示视频：
**一、前言**
2017年1月，我们[披露](https://alephsecurity.com/2017/01/05/attacking-android-custom-bootmodes/)了一个高危漏洞（[CVE-2016-8467](https://alephsecurity.com/vulns/aleph-2016002)），这个漏洞影响Nexus
6/6P，允许攻击者改变设备的启动模式，从而能够访问设备的隐藏USB接口。漏洞通过fastboot命令触发（比如fastboot oem config
bootmode bp-tools），该命令会导致bootloader改变内核命令行中的androidboot.mode参数。Google通过加固bootloader修复了这个漏洞，锁定后的bootloader再也不支持自定义启动模式启动。
**二、漏洞分析：内核命令注入漏洞（CVE-2016-10277）**
Nexus 6的bootloader中包含许多参数，其中某些参数可以通过fastboot接口进行控制，即使bootloader被锁定也可以：
    $ fastboot oem config
    [...]
    (bootloader) 
    (bootloader)   
    (bootloader)   
    (bootloader)   
    (bootloader)     Battery detection control
    (bootloader)     ("meter_lock" or "no_eprom")
    (bootloader)   
    (bootloader) 
    (bootloader) 
    (bootloader)   
    (bootloader)   
    (bootloader)   
    (bootloader)     To force certain bootmode
    (bootloader)     (valid values are "fastboot", "factory", "bp-tools", "q
    (bootloader)     com", and "on-device-diag")
    (bootloader)   
    (bootloader) 
    (bootloader) 
    (bootloader)   
    (bootloader)   
    (bootloader)   
    (bootloader)     Carrier IDs, see http://goo.gl/lojLh3
    (bootloader)   
    (bootloader) 
    (bootloader) 
    (bootloader)   
    (bootloader)   
    (bootloader)   
    (bootloader)     Config kernel console log
    (bootloader)       enable|true     - enable with default settings
    (bootloader)       disable|false   - disable
    (bootloader)        - enable with customized settings
    (bootloader)       (e.g.: "ttyHSL0", "ttyHSL0,230400,n8")
    (bootloader)   
    (bootloader) 
    (bootloader) 
    (bootloader)   
    (bootloader)   
    (bootloader)   
    (bootloader)     FSG IDs, see http://goo.gl/gPmhU
    (bootloader)   
    (bootloader) 
    OKAY [  0.048s]
    finished. total time: 0.048s
fsg-id、carrier以及console这三个参数可以包含任意值（虽然参数的大小受到限制），这三个参数最终会被传递到内核命令行。我们可以使用以下命令来验证这个漏洞：
    $ fastboot oem config console foo
    $ fastboot oem config fsg-id bar
    $ fastboot oem config carrier baz
然后检查内核命令行：
    shamu:/ $ dmesg | grep command
    [    0.000000] Kernel command line: console=foo,115200,n8 earlyprintk 
    androidboot.console=foo androidboot.hardware=shamu msm_rtb.filter=0x37
    ehci-hcd.park=3 utags.blkdev=/dev/block/platform/msm_sdcc.1/by-name/utags
    utags.backup=/dev/block/platform/msm_sdcc.1/by-name/utagsBackup coherent_pool=8M
    vmalloc=300M buildvariant=user androidboot.bootdevice=msm_sdcc.1 androidboot.serialno=ZX1G427V97
    androidboot.baseband=mdm androidboot.version-baseband=D4.01-9625-05.45+FSG-9625-02.117
    androidboot.mode=normal androidboot.device=shamu androidboot.hwrev=0x83A0
    androidboot.radio=0x7 androidboot.powerup_reason=0x00004000 androidboot.bootreason=reboot
    androidboot.write_protect=0 restart.download_mode=0 androidboot.fsg-id=bar
    androidboot.secure_hardware=1 androidboot.cid=0xDE androidboot.wifimacaddr=F8:CF:C5:9F:8F:EB
    androidboot.btmacaddr=F8:CF:C5:9F:8F:EA mdss_mdp.panel=1:dsi:0:qcom,mdss_dsi_mot_smd_596_QHD_dualmipi0_cmd_v0
    androidboot.bootloader=moto-apq8084-72.02 androidboot.carrier=baz androidboot.hard
    (bootloader)   
    (bootloader)     a androidboot.mode=bp-tools
    (bootloader)   
    (bootloader)   
    (bootloader)     Carrier IDs, see http://goo.gl/lojLh3
    (bootloader)   
    (bootloader) 
    [...]
结果正如我们所料：
    shamu:/ $ getprop ro.boot.mode
    bp-tools
    shamu:/ $
需要注意的是，我们必须更改console参数，这样才能击败真正的androidboot.mode参数（该参数由bootloader插入，负责处理init进程的内核命令行的代码位于“core/init/init.cpp!import_kernel_nv“中）。
**四、一个全新的攻击面**
在整个操作系统中，有多个实体使用了内核命令行，包括：
1、内核代码中的__setup宏。
2、内核代码中的early_param宏。
3、内核模块代码中的module_param宏。
4、内核模块代码中的core_param宏。
5、用户空间中的某些实体（比如init，如上文所述）。
这些宏即使没有被引用过上百次，也被使用过很多次，我们可以控制这些宏，对任何包含这些宏的系统功能造成影响。接下来，让我们看看如何通过控制单个变量，击败设备的安全启动模式。
**五、Nexus6的安全启动模式**
高通MSM设备（比如摩托罗拉Nexus 6）的启动过程如下所示（当然经过了相当多的精简）：
设备通电后，ROM中的PBL就会开始工作，然后它会将经过数字签名的SBL加载到内存中，并验证SBL的真实性。SBL会加载经过数字签名的ABOOT（ABOOT实现了fastboot接口），并也会验证ABOOT的真实性。SBL和ABOOT的签名证书以存储在硬件中的根证书为基础。
ABOOT随后会验证boot或者recovery镜像的真实性，从boot或recovery镜像的固定的物理地址（该地址在Nexus
6中为0x8000以及0x2000000）中加载Linux内核以及initramfs。initramfs是一个cpio格式（即经过gzip压缩）的归档文件，会在Linux内核初始化过程中被加载到rootfs中（rootfs是挂载到/目录的RAM文件系统）。initramfs包含init程序，该程序是用户空间的第一个进程。
bootloader（ABOOT）为Linux内核准备内核命令以及initramfs参数，Linux内核位于设备树二进制大对象（Device Tree
Blob，DTB）中，其物理地址为0x1e00000。我们可以将内存中的DTB导出到硬盘中，使用fdtdump解析这块数据以验证这一点：
    [...]
    linux,initrd-end = ;
    linux,initrd-start = ;
    bootargs = "console=ttyHSL0,115200,n8 earlyprintk androidboot.console=ttyHSL0 androidboot.hardware=shamu msm_rtb.filter=0x37 ehci-hcd.park=3 
    utags.blkdev=/dev/block/platform/msm_sdcc.1/by-name/utags utags.backup=/dev/block/platform/msm_sdcc.1/by-name/utagsBackup coherent_pool=8M 
    vmalloc=300M buildvariant=userdebug androidboot.bootdevice=msm_sdcc.1 androidboot.serialno=ZX1G427V97 androidboot.baseband=mdm
    [...]
之后bootloader会将执行权交给Linux内核。
**六、Linux内核初始化：从ABOOT到init**
Linux内核中，early_init_dt_scan_chosen函数负责解析由DTB中的ABOOT传递过来的参数。在arm内核中，该函数最终会调用如下函数：
    void __init early_init_dt_setup_initrd_arch(unsigned long start, unsigned long end)