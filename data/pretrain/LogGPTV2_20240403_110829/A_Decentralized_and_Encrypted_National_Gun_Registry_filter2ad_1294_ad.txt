(cid:19)
(cid:19)
(cid:18)
(cid:18)
(cid:19)
(cid:19)
(cid:18)
(cid:18)
then the leakage proﬁle of Ω is
Q,LΩ
LΩ
IG,LΩ
IL,LΩ
F ,LΩ
A ,LΩ
ΛΩ =
OQ
(cid:19)
(cid:18)
(cid:18)
,(cid:0)pattdx
(cid:1) , pattdx
Q , pattdb
Q , pattdb
Q
(cid:19)
.
=
pattdx
I
, pattdb
I
A , pattdb
A
Theorem VII.1. If SS is secure, ΣDX is ΛDX-secure and ΣDB
is ΛDB-secure, then the registry Ω described in Figures 5 and
6 is ΛΩ-secure.
Due to space limitations, the proof sketch of Theorem VII.1
is in Appendix E.
Concrete leakage analysis. In our implementation (detailed
in Section VIII) we instantiate ΣDX with a forward-secure
variant of Pibase [17] and ΣDB with the scheme that results
from applying standard techniques from [22] (outlined in
Appendices A and B) to the BIEX construction of [30]. We
provide below a high-level description of the leakage proﬁle
of our registration system, with a more formal description
in Appendix A. For each pattern that the system reveals,
we provide some high-level intuition of what the disclosure
implies from a real-world perspective. We stress that all end-
to-end encrypted solutions that are sub-linear reveal some
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1526
The functionality is parameterized with a leakage proﬁle Λ = (LIG,LIL,LA,LF,LQ,LO) and interacts with θ parties {P1, . . . , Pθ},
3 , two custodians C1 and C2 and an ideal adversary S. It stores and manages a gun
3θ backups B(1)
registry GR = (DX, DB1, . . . , DBθ) using the following operations:
3 , . . . , B(θ)
1 , B(θ)
2 , B(θ)
1 , B(1)
2 , B(1)
Functionality F Λ
GR
initialize and store an empty dictionary DX and send the message
• upon receiving (initglobal) from C1, C2 and S,
(globalinitialized) to C1, C2 and S and the message LIG(1k) to S;
and S and the message (i,LIL(1k)) to S;
• upon receiving (initlocal) from Pi, initialize and store an empty database EDB and send the message (localinitialized) to Pi
• upon receiving (ﬁnd, SN) from Q = Pi compute CID := DX[SN]. Return CID to Q and send the message (ﬁnd, i) to C1, C2
• upon receiving (add, r) from L = Pi store r in DBi and add the pair (r.SN, r.CID) to DX. Send the message (add, i) to C1,
C2 and S and the message(cid:0)i,LA(GR, r)(cid:1) to the ideal adversary S;
and S and the message(cid:0)i,LF(GR, ϕ)(cid:1) to the ideal adversary S if the corruptions are external and(cid:0)i,LF(GR, ϕ), SN, CID(cid:1) if the
message (query, i) to S and the message (cid:0)i,LQ(GR, ϕ)(cid:1) to the ideal adversary S if the corruptions are external and
(cid:0)i,LQ(GR, ϕ), ϕ, (r1, . . . , rm)(cid:1) if the corruptions are internal.
and S and the message(cid:0)i,LO(GR, ϕ)(cid:1) to the ideal adversary S if the corruptions are external
and(cid:0)i,LO(GR, ϕ), ϕ, (r1, . . . , rm)(cid:1) if the corruptions are internal.
• upon receiving (oﬄine, CID, ϕ) from Q = Pi return the records (r1, . . . , rn) in DBCID that match ϕ to Q. Send the message
• upon receiving (query, CID, ϕ) from Q = Pi return the records (r1, . . . , rm) in DBCID that match ϕ to Q. Send the
corruptions are internal.
1
(query, i) to B(CID)
, B(CID)
, B(CID)
2
3
Fig. 1: F Λ
GR : The registry functionality parameterized with leakage proﬁle Λ.
leakage; even ORAM-based systems. For more on concrete
leakage attacks we refer the reader to [8].
• (global directory) our concrete instantiation of ΣDX has
no init leakage. The query leakage is composed solely of
the query equality pattern which reveals if and when the
same serial number was been queried in the past. Note
that this is only disclosed to the server and not to the
two custodians. Similarly, the add leakage reveals if and
when the county id was modiﬁed for some serial number.
With both these patterns, a server can learn the frequency
that a serial number is accessed or modiﬁed. Note that
the server does not learn the value but only the frequency
of the serial number.
• (local databases) our concrete instantiation of ΣDB has
no init leakage. The add leakage only reveals the size
of the sub-EMMs which itself discloses the number
of added records. Depending on the complexity of the
query, the query leakage will be different. If the query
is for a single keyword, then the server will learn the
query equality pattern and the response identity pattern.
Concretely, the former reveals if and when the same query
has been made, while the latter reveals the identiﬁers
of the matching records. If the query is a disjunction,
then the query equality will reveal the query equality
pattern on all the keywords that compose the query. It
will also reveal the response identity pattern of the query
and of a subset of keyword pairs that compose the query.
Finally for a boolean query in CNF form, the server
learns the same information mentioned above for the ﬁrst
disjunction, the query equality of all the keywords that
compose the other disjunctions, and the response identity
pattern on all pairs of keywords in the disjunctions. As a
consequence, the server can learn the number of records
that share a speciﬁc sets of keywords, the frequency they
are accessed with, but not the queries or the records’
content. Finally, we note that even though we instantiated
the database encryption scheme so that it could support
boolean queries, this level of expressivity may not be
necessary in practice; at the very least not for all queries.
VIII. EMPIRICAL EVALUATION
In this section, we describe and evaluate our prototype
implementation of the encrypted registry system of Section
V. In particular, we evaluate: (1) the time it takes to add a
record; (2) the time it takes to ﬁnd the county id of a serial
number; and (3) the time it takes to query a local database
both when the ofﬁcial is online and ofﬂine; (4) the size of the
global directory and of the local databases; and (5) the impact
of our optimizations. First, we describe our implementation
and testing environment.
A. Implementation
Our implementation is written in C++, Java, Javascript and
Python. It is 3261 lines of code in total. In addition, it includes
451 lines for experimental testing and 71 lines to load and
generate records, all calculated using CLOC [2]. The prototype
has a client-server architecture. All communication between
the parties uses the Node.js framework. The same framework
is used to run child processes on the server and call the needed
cryptographic libraries.
Testing environment. We conducted our experiments on
Amazon Elastic Compute Cloud (EC2) [3] in the East region
(Ohio). Given the distributed nature of our system, we set
up our testing environment over the public network. We used
three different types of EC2 instances: t2.micro, which
has 1 virtual CPU and 1GB of RAM; t3.micro which
has 2 virtual CPUs and 1GB of RAM; and t3.xlarge,
which has 4 virtual CPUs and 16GB of RAM to which
we associated 500GB of Elastic Block Store with generic
SSDs for disk storage. We used a different instance depending
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1527
on the computation and memory requirements of each role:
t2.micro for the local ofﬁcial’s backups, a t3.micro for
the local ofﬁcials, t3.xlarge for the custodians and server.
All the instances are running a 64-bit Ubuntu Server 18.04
LTS.
Data generation. For each of our experiments involving the
global directory, we randomly generated serial/id pairs based
on the test case. The maximum number of pairs generated was
400 million in order to reﬂect the estimate of the number of
ﬁrearms in the United States [1]).
For the experiments involving local databases, we created
sample records, based on the test case, using the Python library
Faker. Each record is a collection of ﬁeld/value pairs. In
particular, we use the following ﬁelds: ﬁrst name, last name,
address, birth date, license number, model, make, caliber,
serial number, and history. In order to control selectivity for
our query experiments (i.e., the number of matching records)
we partially forge some records by choosing the values of
some of their attributes.
Query generation. For our evaluation of the Query and the
OﬄineQuery protocols, we consider three scenarios: (1) high
selectivity; (2) medium selectivity; and (3) low selectivity.
This categorization helps us assess the time it takes to query
a local database. We consider the following queries:
• (low selectivity): license:123456789;
• (medium selectivity): address:987 Xyz St. OR
address:987 Xyz Street;
• (high selectivity): last:Smith.
For these test scenarios, the low selectivity query returns 1
record, the medium selectivity query returns 10 records, and
the high selectivity query returns 100 records. These queries
were selected to demonstrate the performance of the system
but as mentioned previously, bulk queries are not permitted.
Therefore a query that returns 10 or 100 records may not be
a valid query, depending on the county.
B. Cryptographic primitives
Our encrypted registry makes use of several cryptographic
primitives as building blocks. In the following, we discuss our
instantiations along with the libraries used. We stress that that
our protocols make black-box use of these primitives so the
instantiations and libraries can be changed.
Multi-party computation. For all 2PCs, our prototype
uses the EMP toolkit library [50]. In particular, we use
emp-sh2pc which is an implementation of Yao’s 2PC pro-
tocol [51] in the semi-honest setting. For our purposes, we
wrote an EMP-compatible implementation of HMAC-SHA256
on variable size inputs based on an existing EMP-compatible
implementation of SHA256 for ﬁxed-size inputs [9]. For MPC,
we used the the JIFF library [23].
Encrypted data structures. We used the Clusion library
[40] to implement all the encrypted data structures; including
the global directory and the encrypted multi-maps needed
for the encrypted databases. In particular, we implemented
the global directory with Clusion’s Pibas implementation
[17]. The EMMs of the local database were implemented with
Clusion’s BIEX-2Lev implementation [17], [30]. We made
two changes to Clusion: (1) we changed the underlying
PRFs from AES-CMAC to HMAC-SHA256; and (2) we re-
placed the use of AES in counter mode with HMAC-SHA256
in counter mode (i.e., we encrypt each bloc by XORing it
with the output of HMAC-SHA256 on a counter). 3 These two
modiﬁcations were needed so that our 2PC-based decryption
of records in the Query and OﬄineQuery protocols would be
compatible with the Clusion-based encrypted structures stored,
updated and queried at the server.
Unfortunately, Clusion only implements of the static
variant of BIEX, whereas we need a dynamic variant. To
handle this, we implemented a dynamic variant of BIEX using
the approach outlined in Appendix B.
Secret sharing. Our protocol uses both threshold and 2-out-
of-3 secret sharing. We instantiated the former with Shamir
secret sharing [45] and the latter with XOR secret sharing.
Overview of our results. Here, we summarize the main
takeaways from our empirical evaluation and provide a more
detailed analysis in Section VIII-C.
• (add efﬁciency) our experiments show that during an
add operation, the time to add the serial/id pair to the
global directory dominates the time needed to add the
record to the encrypted database. For example, to add
a batch of 10, 000 records, it takes 2, 627 seconds to
add the corresponding 10, 000 serial/id pairs to the global
directory, whereas it only takes 14.8 seconds to add the
10, 000 records to the local ofﬁcial’s encrypted database.
In total, this is about 264 milliseconds per record.
• (query efﬁciency) our experiments show that querying the
global directory to identify the county of a serial number
takes less than 300 milliseconds. They also show that
the time to query an ofﬁcial’s encrypted database mainly
depends on the selectivity of the query. Interestingly, the
number of records, as well as the number of updates
performed in the past, have limited impact on the query
time. In particular the time is dominated by the 2PCs
required to decrypt
it
takes about 1 minute to query and retrieve 100 matching
records. For ofﬂine queries,
the protocol has similar
behavior. The MPC needed to reconstruct and re-share
the local ofﬁcial’s secret key is negligible compared to
the total time of ofﬂine queries which is dominated by
the 2PCs required to decrypt the response.
the response. As an example,
• (storage overhead) our results show that the size of the
global directory is linear in the number of pairs stored.
Recall that the encrypted databases are composed of a
BIEX-2Lev EMM and a set of encrypted records. The
size of the EMM has quadratic behavior as a function
of the number of records. Moreover,
the size of the
encrypted records is negligible compared to the size of
3This construction was formally analyzed by Bellare et al. in [7].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:24 UTC from IEEE Xplore.  Restrictions apply. 
1528
the EMM. In particular, for 400 million pairs, the size of
the global directory is 110GB. For 100, 000 records, the
size of the encrypted database’s EMM is 1.7GB and the
size of its encrypted records is less than 40MB.
C. Detailed Evaluation
1) Add Time: We evaluate the time of the Add protocol as
a function of the number of records inserted in the system.
For this, we evaluate each step of the protocol including: (1)
the time to add a serial/id pair to the global directory as a
function of its size; (2) the time to add a batch of serial/id
pairs; and (3) the time to create a new EMM as a function of
the number of records.
Adding pairs. The goal of this experiment is to assess how
the time of adding a new serial/id pair behaves as a function
of the size of the global directory, which includes the number
of registered guns in the US. In Figure 2a, we vary the size
from 100 up to 1 million pairs and then extrapolate the results
to reach 1 billion. We used a logistic regression to extrapolate
the results for when 1 million and 1 billion are already stored
in the global directory. Our results demonstrate that adding
a new pair is independent of the size of the global directory
and takes 366 milliseconds. For completeness, we tested the
time to add a new pair on a global directory containing 400
million pairs. The total time was 377 milliseconds, with 349
milliseconds spent on the 2PC. The time required for the 2PC
computation dominates the other tasks. In Figure 2b, we show
that the time to add the pair in the global directory takes less
than 1 millisecond.
Adding batches of pairs. In this experiment, we measure the
time it takes to add multiple pairs at once to the global direc-
tory. In particular, we want to know whether inserting multiple
pairs affects the overall time of the protocol. In Figure 2c, our
experiment shows that the amortized time to insert a single
pair in a batch is around 269 milliseconds which is 27% more
efﬁcient than adding a single pair at a time. For this set of
experiments, we used a batch size of 100 pairs. Increasing the
batch size beyond this did not lead to better execution times
mainly because of the increasing communication overhead
incurred by the 2PC needed to accommodate for a higher