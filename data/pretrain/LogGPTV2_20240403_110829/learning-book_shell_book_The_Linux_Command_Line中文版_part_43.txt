config.status: creating Malcefile
config.status: creating diction.1
349
---
## Page 351
config.status: creating diction.texi
config.status: creating diction.spec
config.status: creating style.1
config.status: creating test/rundiction
config.status: creating config.h
[ne@linuxbox diction-1.11]$
这里最重要的事情是没有错误信息。如果有错误信息，整个配置过程失败，然后程序不能构
建直到修正了错误。
我们看到在我们的源码目录中configure命令创建了几个新文件。最重要一个是Makefile。
Makefile是一个配置文件，指示make程序究竟如何构建程序。没有它，make程序就不能运
行。Makefile是一个普通文本文件，所以我们能查看它：
[ne@linuxbox diction-1.11]$ less Makefile
这个make 程序把一个makefile文件作为输入（通常命名为Makefile），makefile 文件描道
了包括最终完成的程序的各组件之间的关系和依赖性。
makefile文件的第一部分定义了变量，这些变量在该makefile后续章节中会被替换掉。例
如我们看看这一行代码：
CC=
gcc
其定义了所用的C编译器是gcc。文件后面部分，我们看到一个使用该变量的实例：
diction:
diction.o sentence.o misc.o getopt.o getopt1.o
$(CC) -o $@ $(LbFLAGS) diction.o sentence.o nisc.o \
getopt o getopt1.o $(LIBS)
这里完成了一个替换操作，在程序运行时.$（CC）的值会被替换成gcc。大多数makefile文
件由行组成，每行定义一个目标文件，在这种情况下.目标文件是指可执行文件diction，还有目
标文件所依赖的文件。剩下的行描述了从目标文件的依赖组件中创建目标文件所需的命令。在
350
---
## Page 352
这个例子中。我们看到可执行文件diction（最终的成品之一）依赖于文件diction.o，sentence.o，
misc.o，getopt.o，和getoptl.o都存在。在makefile文件后面部分，我们看到diction 文件所
依赖的每一个文件做为目标文件的定义：
diction.o:
diction.c config.h getopt .h nisc.h sentence.h
getopt.o:
getopt.c getopt .h getopt_int .h
getopt1.o:
getopt1.c getopt.h getopt_int.h
misc.o:
misc.c config.h misc.h
sentence-o:
sentence.c config.h misc.h sentence .h
style.o:
style.c config.h getopt.h misc.h sentence.h
然而，我们不会看到针对它们的任何命令。这个由一个通用目标解决，在文件的前面，描远
了这个命令，用来把任意的.c文件编译成.文件：
.c.0:
$(CC) -c $(CPPFLAGS) $(CFLAGS) $<
就知道答案了。同时，让我们运行make命令井构建我们的程序：
[ne@linuxbox diction-1.11]$ nake
这个make程序将会运行，使用Makefle文件的内容来指导它的行为。它会产生很多信息。
当make程序运行结束后，现在我们将看到所有的目标文件出现在我们的目录中。
[nedlinuxbox diction-1.11]$ 1s
config.guess
de.po
en
en_GB
sentence.c
config.h
diction
en_GB.mo
en_GB-po
sentence.h
config.h.in
diction.1
getopt1.c
getopt1.o
sentence.o
config.1og
diction.1.in
getopt .c
getopt .h
style
config.status diction.c
getopt_int .h
getopt.o
style.1
config.sub
diction.0
INSTALL
insta1l-sh
style.1.in
configure
diction.pot
Makefile
Makefile.in
style.c
351
---
## Page 353
configure.in diction.spec
nisc.c
misc.h
style.0
DNIAd0
diction.spec.in
nisc.0
NEWS
test
de
diction.texi
nl
nl.mo
de .o
diction.texi.1
nl.po
README
在这些文件之中，我们看到diction和style，我们开始要构建的程序。恭喜一切正常！我们
刚才源码编译了我们的第一个程序。但是出于好奇，让我们再运行一次make程序：
[nedlinuxbox diction-1.11]$ nake
malke: Nothing to be done for *all'.
它只是产生这样一条奇怪的信息。怎么了？为什么它没有重新构建程序呢？啊，这就是
make奇妙之处了°make只是构建需要构建的部分，而不是简单地重新构建所有的内容。由于
所有的目标文件都存在，make确定没有任何事情需要做。我们可以证明这一点，通过删除一
个目标文件，然后再次运行make程序，看看它做些什么。让我们去掉一个中间目标文件：
[nedlinuxbox diction-1.11]$ rn getopt.0
[ne@linuxbox diction-1.11]$ nake
我们看到make重新构建了getopt.o文件，并重新链接了diction和style程序，因为它们
依赖于丢失的模块。这种行为也指出了make程序的另一个重要特征：它保持目标文件是最新
的°make坚持目标文件要新于它们的依赖文件。这个非常有意义，做为一名程序员，经常会
更新一点儿源码，然后使用make来构建一个新版本的成品。make确保基于更新的代码构建
了需要构建的内容。如果我们使用touch程序，来“更新”其中一个源码文件，我们看到发生
了这样的事情：
[neglinuxboxdiction-1.11]$ ls -] diction getopt.c
rvxr-xr-x 1 me me 37164 20090305 06:14 diction
rv-r--r-- 1 me me 33125 200703-30 17:45 getopt.c
[PI:EMAIL]$ touch getopt.c
[PI:EMAIL]s 1s -1 diction getopt.c
rvxr-xr-x 1 me me 37164 20090305 06:14 diction
352
---
## Page 354
-rv-r-=r-- 1 me me 33125 20090305 06:23 getopt .c
[nellinuxbox diction-1.11]$ nake
运行make之后，我们看到目标文件已经更新于它的依赖文件：
[nedlinuxbox diction-1.11]$ 1s -1 diction getopt.c
rvxr=xr=x 1 ±e me 37164 2009-03-05 06:24 diction
rv-r--r-- 1 me me 33125 2009-0305 06:23 getopt .c
make程序这种智能地只构建所需要构建的内容的特性，对程序来说，是巨大的福利。虽然
在我们的小项目中，节省的时间可能不是非常明显，在庞大的工程中，它具有非常重大的意义。
记住，Linux内核（一个经历着不断修改和改进的程序）包含了几百万行代码。
24.3.2安装程序
打包良好的源码经常包括一个特别的make目标文件，叫做install。这个目标文件将在系统目
录中安装最终的产品，以供使用。通常，这个目录是/usr/local/bin，为在本地所构建软件的传
统安装位置。然而，通常普通用户不能写入该目录，所以我们必须变成超级用户，来执行安装
操作：
[ne@linuxbox diction-1.1i]$ sudo make instal]
执行了安装后，我们可以检查下程序是否已经可用：
[ne@linuxbox diction-1.11]$ vhich diction
/usr/1ocal/bin/diction
[ne@linuxbox diction-1.11]$ nan diction
完美！
24.4总结
在这一章中，我们已经知道了三个简单命令：
353
---
## Page 355
./configure
malce
make instal1
可以用来构建许多源码包。我们也知道了在程序维护过程中，make程序起到了举足轻重
的作用°make程序可以用到任何需要维护一个目标/依赖关系的任务中，不仅仅为了编译源代
码。
24.5拓展阅读
·Wikipedia上面有关于编译器和make程序的好文章：
http://en.wikipedia.org/wiki/Compiler
http://en.wikipedia.org/wiki/Make_(software)
·GNU Make 手册
http:/ /www.gnu.org/software/make/manual/html_node/index.html
354
---
## Page 356
25
编写第一个Shell脚本
在前面的章节中，我们已经装备了一个命令行工具的武器库。虽然这些工具能够解决许多种计
算问题，但是我们仍然局限于在命令行中手动地一个一个使用它们。如果我们能够让shell来
完成更多的工作，岂不是更好？我们可以的。通过把我们的工具一起放置到我们自己设计的程
序中，shell就会自已来执行这些复杂的任务序列。通过编写shell脚本，我们可以让shell来做
这些事情。
25.1什么是Shell脚本？
最简单的解释，一个shell脚本就是一个包含一系列命令的文件。shell读取这个文件，然后执
行文件中的所有命令，就好像这些命令已经直接被输入到了命令行中一样。
Shell有些独特，因为它不仅是一个功能强大的命令行接口，也是一个脚本语言解释器。我
们将会看到，大多数能够在命令行中完成的任务也能够用脚本来实现，同样地，大多数能用脚
本实现的操作也能够在命令行中完成。
虽然我们已经介绍了许多shell功能，但只是集中于那些经常直接在命令行中使用的功能。
Shell也提供了一些通常（但不总是）在编写程序时才使用的功能。
25.2怎样编写一个Shell脚本
为了成功地创建和运行一个shell脚本，我们需要做三件事情：
1.编写一个脚本。Shell脚本就是普通的文本文件。所以我们需要一个文本编辑器来书写它
们。最好的文本编辑器都会支持语法高亮，这样我们就能够看到一个脚本关键字的彩色编
码视图。语法高亮会帮助我们查看某种常见错误。为了编写脚本文件，vim，gedit，kate
和许多其它编辑器都是不错的候选者。
2.使脚本文件可执行。系统会相当挑剔不允许任何旧的文本文件被看作是一个程序，并且
有充分的理由！所以我们需要设置脚本文件的权限来允许其可执行。
355
---
## Page 357
3.把脚本放置到shell能够找到的地方。当没有指定可执行文件明确的路径名时，shell会自
动地搜索某些目录，来查找此可执行文件。为了最大程度的方便，我们会把脚本放到这些
目录当中。
25.3脚本文件格式
为了保持编程传统，我们将创建一个“helloworld”程序来说明一个极端简单的脚本。所以让
我们启动我们的文本编辑器，然后输入以下脚本：
#!/bin/bash
# This is our first script
echo *Hello World!*
对于脚本中的最后一行，我们应该是相当的熟悉，仅仅是一个带有一个字符申参数的echo
文件中看到过。关于shell脚本中的注释，它们也可以出现在文本行的末尾，像这样：
echo *Hello World!* # This 1s a coanent too
文本行中，#符号之后的所有字符都会被忽略。
类似于许多命令，这也在命令行中起作用：
[ne@linuxbox -]$ echo *Hello Wor1d!α # This is a coanent too
Hello Wor1d!
虽然很少在命令行中使用注释，但它们也能起作用
我们脚本中的第一行文本有点儿神秘。它看起来它应该是一条注释。因为它起始于一个#
符号，但是它看起来太有意义，以至于不仅仅是注释。事实上，这个#！字符序列是一种特殊
的结构叫做shebang。这个shebang被用来告诉操作系统将执行此脚本所用的解释器的名字。
每个shell脚本都应该把这一文本行作为它的第一行。
让我们把此脚本文件保存为hello_world。
356
---
## Page 358
25.4
可执行权限
下一步我们要做的事情是让我们的脚本可执行。使用chmod命令，这很容易做到：
[ne@linuxbox -]$ 1s -1 he1lo_vor1d
-
6320090307 10:10 he11o_wor1d
[ne@linuxbox -]$ chnod 755 he1lo_wor1d
[nedlinuxbox -]$ ls -1 hello_vorld
rvxr-xr-x 1meme
6320090307 10:10 he11o_wor1d
对于脚本文件。有两个常见的权限设置：权限为755的脚本，则每个人都能执行。和权限为
700的脚本，只有文件所有者能够执行。注意为了能够执行脚本，脚本必须是可读的。
25.5脚本文件位置
当设置了脚本权限之后，我们就能执行我们的脚本了：
[ne@linuxbox -]$ ./hello_vorld
Hello World
为了能够运行此脚本，我们必须指定脚本文件明确的路径。如果我们没有那样做，我们会得
到这样的提示：
[ne@linuxbox -]$ he1lo_vor1d
bash: hello_vorld: connand not found
为什么会这样呢？什么使我们的脚本不同于其它的程序？结果证明，什么也没有。我们的脚
本没有问题。是脚本存储位置的问题。回到第12章，我们讨论了PATH环境变量及其在系统
查找可执行程序方面的作用。回顾一下，如果没有给出可执行程序的明确路径名，那么系统每
次都会搜索一系列的目录，来查找此可执行程序。这个/bin目录就是其中一个系统会自动搜索
的目录。这个目录列表被存储在一个名为PATH的环境变量中。这个PATH变量包含一个由
管号分隔开的目录列表。我们可以查看PATH的内容：
357
---
## Page 359
[ne@linuxbox -]$ echo $PATH
/home/me/bin: /usz/local/sbin: /usr/local/bin:/usr/sbin:/usr/bin: /sbin:
/bin:/usr/ganes
这里我们看到了我们的目录列表。如果我们的脚本位于此列表中任意目录下，那么我们
的问题将会被解决。注意列表中的第一个目录/home/me/bin。大多数的Linux发行版会配置
PATH变量，让其包含一个位于用户家目录下的bin目录，从而允许用户能够执行他们自己的
程序。所以如果我们创建了一个bin目录，并把我们的脚本放在这个目录下，那么这个脚本就