'E',
'E',
'1',
'1',
'e',
'E'],
'B'],
'B'］,
---
## Page 598
Example 2: 
Explanation:
output:
Click :[1,2]
.8.1]
“'B'
Input:
click
Explanation:
['B'
['B', 'B', 'B', 'B', 'B']]
'B'
'B'
'B'
'B'
1
1
1
m
B'
一
m
1
B'
1
一
'B']
'B
R
Revealed Mine (X)
Digit (1'～ ‘8")
 Revealed Blank Square ('B")
Unrevealed Empty Square ('E")
Unrevealed Mine (M')
---
## Page 599
注意：
有多少地雷与这块已挖出的方块相邻，X'则表示一个已挖出的地雷。现在给出在所有未挖出的方块中
代表没有相邻（上，下，左，右，和所有4个对角线）地雷的已挖出的空白方块，数字（1'到'8"）表示
给定一个代表游戏板的二维字符矩阵。‘M'代表一个未挖出的地雷，‘E'代表一个未挖出的空方块，"B'
题目大意
Note:
4．如果在此次点击中，若无更多方块可被揭露，则返回面板。
（"M"或者'E）的下一个点击位置（行和列索引l），根据以下规则，返回相应位置被点击后对应的面板
1．如果一个地雷（“M"）被挖出，游戏就结束了-把它改为‘X"。
4. For simplicity, not mentioned rules should be ignored in this problem. For example, you
(aieanau uaaq aney sausw awos) lano si awee uaum aeis e aq auom pieog andui aui 'e
1. The range of the input matrix's height and width is [1,50].
·输入矩阵的宽和高的范围为[1,50]。
3.
2.
2
块都应该被递归地揭露。
 don't need to reveal allthe unrevealed mines when the game is over, consider any cases
board contains at least one clickable square.
虑所有你可能赢得游戏或标记方块的情况。
简单起见，未提及的规则在这个问题中可被忽略。例如，当游戏结束时你不需要挖出所有地雷，考
输入面板不会是游戏结束的状态（即有地雷已被挖出）。
点击的位置只能是未被挖出的方块("M'或者‘E)，这也意味着面板至少包含一个可点击的方块。
数量。
如果一个至少与一个地雷相邻的空方块（E"）被挖出，修改它为数字（1到'8"），表示相邻地雷的
如果一个没有相邻地雷的空方块（E）被挖出，修改它为（B"），并且所有和其相邻的未挖出方
that you will win the game or flag any squares.
 The click position will only be an unrevealed square ('M' or 'E'), which also means the input 
.com
Q
Digit (1’~“8)
 Revealed Blank Square ('B")
 Revealed Mine (X")
 Unrevealed Empty Square (E")
Unrevealed Mine (M")
---
## Page 600
代码
解题思路
·DPS 和 BFS 都可以解题。先根据原图预处理地图，记录出最终地图的状态，O代表空白砖块，1-8
·给出一张扫雷地图和点击的坐标，M 代表雷，E代表还没有点击过的空砖块，B 代表点击过的空砖
func mineSweeper(x, y int, board [][]byte, mineMap [][]int, dir8 [][]int) 
func updateBoard(board [][]byte, click []int) [][]byte 
} else{ 
if mineMap[x][y] == -1 {
if board[x][y] != 'm' && board[x][y] != 'E' {
} else if mineMap[x][y] > O { 
return board 
mineSweeper(click[0], click[1], board, mineMap, dir8) 
for i := range board { 
for i := range board { 
mineMap := make([][]int, len(board))
代表雷的个数，-1 代表是雷。再 DFS 遍历这张处理后的图，输出最终的地图即可。
击以后的地图。
块，1-8代表砖块周围8个方块里面有雷的个数，×代表点到了雷。问点击一次以后，输出更新点
board[x] [y] = '0' + byte(mineMap[x][y]) 
 return
 mineMap[i] = make([]int, len(board[i]))
for -, d := range dir8 {
board[x][y] = 'B'
for j := range board[i] 
return board 
board[click[0]][click[1]] = 'x'
 nx, ny := x+d[O], y+d[1]
mineMap[i][j] = -1 
if isInBoard(board, nx, ny) && mineMap[nx][ny] >= O {
nx, ny := i+d[o], j+d[1] 
 mineMap[nx] [ny]++
---
## Page 601
Note:
 Example 3:
Example 2: 
Example 1: 
the array and their absolute difference is k.
the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in 
Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in 
题目
532. K-diff Pairs in an Array
2. The length of the array won't exceed 10,000.
1. The pairs (i, j) and (i, i) count as the same pair.
Explanation: There is one 0-diff pair in the array, (1, 1).
Output: 1 
Input: [1， 3， 1， 5， 4］，k = 0 
and (4, 5).
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) 
output: 4
Input:[1,2，3，4，5]，k = 1
unique pairs.
Although we have two ls in the input, we should only return the number of
 ')  ( ') '   d -    
Output: 2 
Input:[3,1,4,1,5],k = 2
3
if isInBoard(board, nx, ny) && mineMap[nx][ny] >= O { 
mineSweeper(nx, ny, board, mineMap, dir8) 
---
## Page 602
代码
如果K=0 的情况需要单独判断，如果字典中这个元素频次大于 1，count 也需要++。
判断多次。遍历一次 map，每个数字都加上K以后，判断字典里面是否存在，如果存在，count ++,
这一题可以用 map 记录每个数字出现的次数。重复的数字也会因为唯一的key，不用担心某个数字会
解题思路
对
给定一个数组，在数组里面找到几组不同的 pair 对，每个 pair 对相差K。问能找出多少组这样的 pair
题目大意
func findPairs(nums []int, k int) int {
package leetcode
return count
m := make(map[int]int, len(nums))
if k 1 { 
 m[value]++ 
if k> 0 & m[key+k] > 0 { 
 return o
count++
continue
count++
---
## Page 603
代码
解题思路
注意：
给定两个表示复数的字符串。返回表示它们乘积的字符串。注意，
题目大意
Note:
Example 2: 
Example 1:
You need to return a string representing their multiplication. Note i2 = -1 according to the 
definition.
Given two strings representing two complex numbers.
题目
537. Complex Number Multiplication
·数学题。按照复数的运算法则，i^2=-1，最后输出字符串结果即可。
·给定2个字符串，要求这两个复数的乘积，输出也是字符串格式。
·输入字符串将以 a+bi 的形式给出，其中整数 a 和b 的范围均在[-100,100] 之间。输出也应当符
·输入字符串不包含额外的空格。
1. The input strings will not have extra blank.
to the form of O+-2i.
Explanation: (1 - i) *(1 - i) =1 + i2 - 2 *i = -2i, and you need convert it 
Output: "0+-2i"
Input: "1+-1i",
to the form of O+2i.
Explanation: (1 + i) *(1 + i) = 1 + i2 + 2 * i = 2i， and you need convert it 
Output: "0+2i" 
Input: "1+1i",
合这种形式。
 belong to the range of [-100, 100]. And the output should be also in this form.
"1+1i"
"1+-1i"
，根据定义i^2=-1。
---
## Page 604
个字符，并将剩余的字符保持原样。
果剩余少于k个字符，则将剩余的所有全部反转。如果有小于 2k 但大于或等于k个字符，则反转前k
给定一个字符串和一个整数k，你需要对从字符串开头算起的每个 2k个字符的前k个字符进行反转。如
题目大意
Restrictions:
Example:
characters and left the other as original.
counting from the start of the string. If there are less than k characters left, reverse all of them. If
 Given a string and an integer k, you need to reverse the first k characters for every 2k characters 
题目
541. Reverse StringI
要求：
2. Length of the given string and k will in the range [1, 10000]
 1. The string consists of lower English letters only.
Output: "bacdfeg"
Input: S = "abcdefg",k = 2 
func parse(s string) (int,int) {
func complexNumberMultiply(a string, b string) string {
package leetcode 
import（
return r, i 
i, - := strconv.Atoi(ss[1][:len(ss[1])-1])
realB, imagB := parse(b)
"strings'
"strconv'
imag := realA*imagB + realB*imagA
real := realA*realB - imagA*imagB
realA, imagA := parse(a)
- := strconv.Atoi(ss[o])
---
## Page 605
Example 1: 
The distance between two adjacent cells is 1.
Given a matrix consists of O and 1, find the distance of the nearest O for each cell.
题目
542. 01 Matrix
代码
解题思路
·这一题是简单题，按照题意反转字符串即可。
·要求按照一定规则反转字符串：每 2＊K长度的字符串，反转前个字符，后个字符串保持
·给定字符串的长度和k在[1,10000]范围内。
·该字符串只包含小写的英文字母。
func reverseStr(s string, k int) string {
package leetcode
ifk>len(s){
return s
for i := 0; i = k {
k = len(s)
} else { 
ss := revers(s[i:])
S = s[:i] + ss + s[i+k:]
 SS := revers(s[i : i+k])
S = s[:i] + ss 
---
## Page 606
解题思路
给定一个由0和1组成的矩阵，找出每个元素到最近的〇的距离。两个相邻元素间的距离为1。
题目大意
Note:
 Example 2:
2
1. The number of elements of the given matrix will not exceed 10,000.
[[0,0,0],
Output:
[[0,0,0]
Input:
[[0,0,0],
Output:
[[0,0,0],
Input:
[1,2,1]]
[0,1,0]
[1,1,1]]
 There are at least one O in the given matrix.
[0,1,0]
[0,0,0]]
[0,1,0],
[0,0,0]]
[0,1,0]
到下，从左到右遍历，先处理上边和左边，第二次循环从下到上，从右到左遍历，
第三种解法是 DP。由于有 4个方向，每次处理2 个方向，可以降低时间复杂度。
第二种解法是 DFS。先预处理，把周围没有〇的1 都重置为最大值。当周围有 〇 的1，距离 〇的
时候，由于它已经被第一次到的波纹更新了值，所以这次不用再更新了。(第一次波纹到的时候一
1 的点，这些点在波纹扫过来的时候就需要赋值更新level。当下次波纹再次扫到原来为1的点的
为 -1 的都是原来为 〇的，所以波纹扫过来不需要处理这些-1的点。棋盘上为0 的点都是原来为
将1都处理为 0。将每个-1(即原棋盘的 0)都入队，每次出队都将四周的 4 个位置都入队。这就
这一题有 3 种解法,
给出一个二维数组,
 The cells are adjacent in only four directions: up, down, left and right.
边
val比点的值小(这也就是为什么会先把1更新成最大值的原因)的时候，不断更新它。
位置都是1，这些点是不需要动的，需要更新的点恰恰应该是那些周围没有〇的点。当递归的步数
定是最短的)
想一颗石头扔进了湖里，
，第一种解法最容易想到，BFS。先预处理一下棋盘，将每个O都处理为 -1 
数组里面只有 0和1。
一圈一圈的波纹荡开，每一圈都是一层。由于棋盘被我们初始化了，所有
。要求计算每个1距离最近的0的距离。
再处理右边和下
第一次循环从上
有
---
## Page 607
代码
[y] 0 {
func updateMatrixBFS(matrix [][]int) [][]int 
//解法—BFS
import 
package leetcode
for i, row := range res {
for len(queue) > 0 {
level := 1 
queue := make([][]int, 0) 
res := make([][]int, len(matrix))
"math'
 return res 
for j, cell := range row { 
level++
for size > O {
size := len(queue)
for j := range res[i] {
res[i] = make([]int, len(matrix[0]))
if cell == -1 { 
} - ‘0 ‘{ ‘03 ‘{0 ‘} ‘{0 ‘-]  =: u ‘- o
size--
if matrix[i][j] == 0 {
i,j := node[O］,
queue = queue[1:]
node := queue[0]
queue = append(queue, []int{x, y})
queue = append(queue, []int{i, j})
res[i][j] = -1 
res[x][y] = leve] 
y
 continue 
 := j + direction[1] 
:= i + direction[0]
 node[1]
---
## Page 608
func haszero(matrix [][]int, row, col int) bool 
// 判断四周是否有0
func updateMatrixDFS(matrix [][]int) [][]int {
//解法二 DFS
return false
if col  0 && matrix[row][col-1] == 0 { 
if row > 0 && matrix[row-1][col] == 0 { 
return (matrix)
for r := O; r < maxRow; r++ {
for r := O; r < maxRow; r++ {
maxRow, maxcol := len(matrix), len(matrix[0])
resu]t := [][]int{} 
return res
 return true
 return true
 return true
 return true 
 return result 
for c := O; c < maxCol; c++ {
for c := O; c < maxcol; c++ 
if matrix[r][c] == 1 {
if matrix[r][c] == 1 && haszero(matrix, r, c) == false
dfsMatrix(matrix,r,C,-1)
//将四周没有〇的1 特殊处理为最大值
matrix[r][c] = math.MaxInt64 
res[i][j] = 0