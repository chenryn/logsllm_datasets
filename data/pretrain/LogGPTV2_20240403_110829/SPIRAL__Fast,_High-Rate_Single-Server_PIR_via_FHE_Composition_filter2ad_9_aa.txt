title:SPIRAL: Fast, High-Rate Single-Server PIR via FHE Composition
author:Samir Jordan Menon and
David J. Wu
0
0
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
SPIRAL: Fast, High-Rate Single-Server PIR via FHE Composition
Samir Jordan Menon∗, David J. Wu†
PI:EMAIL
∗Unafﬁliated
†UT Austin
PI:EMAIL
Abstract—We introduce the SPIRAL family of single-server
private information retrieval
(PIR) protocols. SPIRAL relies
on a composition of two lattice-based homomorphic encryp-
tion schemes: the Regev encryption scheme and the Gentry-
Sahai-Waters encryption scheme. We introduce new ciphertext
translation techniques to convert between these two schemes
and in doing so, enable new trade-offs in communication and
computation. Across a broad range of database conﬁgurations,
the basic version of SPIRAL simultaneously achieves at least a
4.5× reduction in query size, 1.5× reduction in response size, and
2× increase in server throughput compared to previous systems.
A variant of our scheme, SPIRALSTREAMPACK, is optimized for
the streaming setting and achieves a server throughput of 1.9
GB/s for databases with over a million records (compared to
200 MB/s for previous protocols) and a rate of 0.81 (compared
to 0.24 for previous protocols). For streaming large records
(e.g., a private video stream), we estimate the monetary cost
of SPIRALSTREAMPACK to be only 1.9× greater than that of
the no-privacy baseline where the client directly downloads the
desired record.
I. INTRODUCTION
A private information retrieval (PIR) [1] protocol enables
a client to download an element from a public database
without revealing to the database server which record is
being requested. Beyond its direct applications to private
database queries, PIR is a core building block in a wide
range of privacy-preserving applications such as anonymous
messaging [2, 3, 4, 5], contact discovery [6, 7], private contact
tracing [8], private navigation [9, 10], and safe browsing [11].
Private information retrieval protocols fall under two main
categories: (1) multi-server protocols where the database is
replicated across multiple servers [1]; and (2) single-server
protocols where the database lives on a single server [12].
We refer to [13, 14] for excellent surveys of single-server
and multi-server constructions. In many settings, multi-server
constructions have reduced computational overhead compared
to single-server constructions and can often achieve information-
theoretic security. The drawback, however, is their reliance on
having multiple non-colluding servers; this assumption can be
challenging to realize in practice.
Conversely, single-server PIR protocols do not assume
non-colluding servers. Instead, existing single-server PIR
implementations have signiﬁcantly higher computational costs
compared to multi-server constructions. Indeed, it was believed
that single-server PIR would never outperform the “trivial PIR”
of simply having the client download the entire database [15].
While this assumption applied to earlier number-theoretic
PIR schemes [12, 16, 17, 18], recent lattice-based construc-
tions [19, 5, 20, 21, 22, 23] have made signiﬁcant strides in
concrete efﬁciency and are much faster than the trivial PIR in
many settings.
When studying PIR protocols, we are primarily interested in
the (1) rate, which is the ratio of the response size to the size
of the retrieved record; and (2) the server throughput, which
is the ratio of the database size to the server’s computation
time. The rate measures the overhead in the server-to-client
communication while the throughput measures how fast the
server can answer a PIR query as a function of the database
size. A third quantity of interest is the query size. Recent
constructions are able to achieve relatively compact queries
(e.g., 32–64 KB queries in the case of [5, 23] for databases
with millions of records and tens of gigabytes of data).
The current state-of-the-art single-server PIR, OnionPIR [23],
achieves a rate of 0.24 and a throughput of 149 MB/s. In
contrast, the fastest two-server PIR scheme can achieve an
essentially optimal rate of ≈1 and a throughput of 5.5 GB/s [24].
Thus, there remains a large gap between the performance of the
best single-server PIR and the best two-server PIR protocols.
This work. In this work, we introduce SPIRAL, a new family of
lattice-based single-server PIR schemes that enables new trade-
offs in communication and computation. The basic instantiation
of SPIRAL simultaneously achieves a 4.5× reduction in query
size, a 1.5× increase in the rate, and a 2× increase in the
server throughput compared to OnionPIR [23] (see Table I).
Like previous PIR protocols [5, 20, 21, 25, 23, 22], the
SPIRAL protocol works in the model where the client starts by
sending the server a set of query-independent public parameters.
The server uses these parameters along with the client’s query to
compute the response. Since these parameters can be reused for
an arbitrary number of queries and they are independent of the
query, the client can transmit these parameters to the server in
a separate “ofﬂine” phase. For this reason, we often distinguish
between the ofﬂine cost of generating and communicating the
public parameters and the online cost of generating the query
and computing the response.
We also introduce several variants of SPIRAL that achieve
higher server throughput and rates (i.e., reduced online cost)
in exchange for larger queries and/or public parameters:
• SPIRALSTREAM: The SPIRALSTREAM protocol variant is
optimized for the streaming setting. In the streaming setting,
the client’s query is reused across multiple databases, so we
© 2022, Samir Jordan Menon. Under license to IEEE.
DOI 10.1109/SP46214.2022.00139
930
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
can amortize the cost of query generation and communication
over multiple PIR responses. The SPIRALSTREAM protocol
has larger queries (30 MB), but achieves a rate of 0.49 (2×
higher than OnionPIR) and an effective server throughput
of up to 1.5 GB/s (roughly 10× higher than OnionPIR).
We provide more detailed benchmarks in Section V-C
and Table III.
• SPIRALPACK: The SPIRALPACK protocol leverages a new
response packing technique that reduces the online costs of
SPIRAL (for databases with large records) at the expense
of requiring a larger set of (reusable) public parameters.
As we show in Section V-C and Table II, when database
records are large, SPIRALPACK can achieve a 30% higher
rate compared to SPIRAL while simultaneously providing a
similar or higher server throughput.
The two optimizations we describe above can also be combined
and we refer to the resulting protocol as SPIRALSTREAMPACK.
Compared to the other SPIRAL variants, SPIRALSTREAMPACK
has the largest public parameter and query sizes, but is able
to simultaneously achieve a high rate (0.81) and a high server
throughput (1.9 GB/s) on databases with over a million records.
This represents a 2.1× increase in rate and 5.5× increase in
throughput compared to the base version of SPIRAL. However,
the size of the public parameters is 4.2× higher and the
query size is over 2000× higher. In absolute terms, the public
parameter size increases from 30 MB to 125 MB and the
query size increases from 14 KB to 30 MB. We believe these
remain reasonable for many streaming applications. Overall, for
settings where both the public parameters and the query will
be reused for a large number of queries, SPIRALSTREAMPACK
likely offers the most competitive performance.
We note that for databases with sufﬁciently-large records (≥
30 KB), the server throughput of our streaming constructions
is 2–4× higher than that of full database encryption using a
software-based AES implementation. We believe that this is
the ﬁrst single-server PIR where the server throughput is faster
than applying a symmetric cryptographic primitive over the full
database. Although this is still 2.9× slower than the best two-
server PIR using hardware-accelerated AES [24], hardware
acceleration for the lattice-based building blocks underlying
our construction could help bridge this gap (e.g., [26]).
A limitation of SPIRAL is that it generally requires larger
public parameters compared with previous schemes. To com-
pare, the public parameters in SealPIR [5], FastPIR [22],
and OnionPIR [23] are 3.4 MB, 1.4 MB, and 4.6 MB,
respectively. In SPIRAL, they range from 14 to 18 MB and for
SPIRALSTREAM, they range from 344 KB to 3 MB. The larger
parameters in SPIRAL are needed to enable our new ciphertext
translation procedures (Sections I-B and III) that are critical for
reducing the online costs of our protocol. The SPIRALPACK
variant requires public parameters that range from 14 to 47
MB (in order to support ciphertext packing).
A. Background on Lattice-Based PIR
The most efﬁcient single-server PIR protocols [4, 19, 5, 20,
21, 25, 23] use lattice-based fully homomorphic encryption
(FHE) schemes [27, 28, 29, 30, 31, 32].1 These protocols follow
the general paradigm of constructing PIR from homomorphic
encryption [12]. In these protocols, the database is represented
as a hypercube, and the client sends encryptions of basis
vectors selecting for each dimension of the hypercube. To
compute the response, the server either relies on multiplicative
homomorphism, where the server iteratively multiplies the
response for each dimension with the client’s query vectors,
or by using a recursive composition approach that only needs
additive homomorphism. While earlier PIR protocols [4, 19, 5]
relied on recursive composition and additive homomorphism,
more recent protocols [20, 21, 25, 23] have shown how to
leverage multiplicative homomorphism for better efﬁciency.
The challenge: ciphertext noise management. A key chal-
lenge when working with lattice-based FHE schemes is manag-
ing noise growth. In these schemes, the ciphertexts are noisy en-
codings of the plaintext messages, and homomorphic operations
increase the magnitude of the noise in the ciphertext. If the noise
exceeds a predetermined bound, then it is no longer possible to
recover the message. The lattice parameters are chosen to ensure
that the scheme can support the requisite number of operations
and achieve the target level of security. Most lattice-based PIR
constructions [19, 4, 5, 20, 25, 23] are based on either the Regev
encryption scheme [33], which is additively homomorphic,
or its generalization, the Brakerski/Fan-Vercauteren (BFV)
scheme [29, 30], which additionally supports homomorphic
multiplication. In the BFV scheme, the ciphertext noise scales
exponentially in the multiplicative depth of the computation.2
Consequently, initial lattice-based PIR schemes did not use
multiplicative homomorphism [19, 4, 5].
A solution: FHE composition. Recently, Chillotti et al. [35,
36] introduced an “external product” operation to homomor-
phically multiply ciphertexts from two different schemes. They
speciﬁcally show how to multiply a ciphertext encrypted under
Regev’s encryption scheme [33] with a ciphertext encrypted
under the encryption scheme of Gentry, Sahai, and Waters
(GSW) [32]. The requirement is that the two Regev and GSW
ciphertexts are encrypted with respect to the same secret key.
The advantage of the GSW encryption scheme is its asymmet-
ric noise growth for homomorphic multiplication. Speciﬁcally,
in the setting of PIR, one of the inputs to each homomorphic
multiplication is a “fresh” ciphertext (i.e., a query ciphertext).
In this case, the noise growth after k sequential multiplications
increases linearly with k rather than exponentially with k
(as would be the case with BFV). The drawback of GSW
ciphertexts is their poor rate: encrypting a scalar requires a
large matrix. Conversely, Regev ciphertexts have much better
rate; over polynomial rings, the amortized version [37] can
encrypt n × n plaintext elements with a ciphertext of size
n × (n + 1).
1Technically, these constructions (including SPIRAL) only require leveled
homomorphic encryption, which support a bounded number of computations.
For ease of exposition, we will still write FHE to refer to leveled schemes.
2While it is possible to use bootstrapping [27] to reduce the noise, the concrete
cost of bootstrapping in the BFV encryption scheme remains high (e.g., a
few minutes to refresh a single ciphertext) [34].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
2931
The external product operation from [35, 36] enables us to
get the best of both worlds. Namely, if each homomorphic
multiplication is between a Regev ciphertext and a fresh GSW