调用流程
    (CLIENT) IBackgroundCopyGroup::CreateJob()
       |
       V
    (SERVER) COldGroupInterface::CreateJob()
             |__ COldGroupInterface::CreateJobInternal()
                 |__ CLockedJobWritePointer::ValidateAccess()
                 |   |__ CJob::CheckClientAccess() // Client impersonation
                 |__ CJob::GetOldJobExternal() // IBackgroundCopyJob1* returned
了解了`CreateJob()`的实现原理，回到`QueryNewJobInterface()`方法，如果提供的`GUID`匹配`IID_IBackgroundCopyJob`,调用`CJob::GetJobExternal`,查询新的接口指针调用并返回给客户端。
流程
    (CLIENT) IBackgroundCopyGroup::QueryNewJobInterface()
       |
       V
    (SERVER) COldGroupInterface::QueryNewJobInterface()
             |__ CJob::GetJobExternal() // IBackgroundCopyJob* returned
当我们调用`COldGroupInterface::QueryNewJobInterface()`获取新的指针时，客户端并没有impersonated，这样就可以获取一个`NT
AUTHORITY\SYSTEM`上下文的指针
实际上文件移动操作发生在调用`IBackgroundCopyJob::Resume()`之后以及`IBackgroundCopyJob::Complete()`之前
调用`IBackgroundCopyJob::Resume()`流程
    (CLIENT) IBackgroundCopyJob::Resume()
       |
       V
    (SERVER) CJobExternal::Resume()
             |__ CJobExternal::ResumeInternal()
                 |__ ...
                 |__ CJob::CheckClientAccess() // Client impersonation
                 |__ CJob::Resume()
                 |__ ...
调用`IBackgroundCopyJob::Complete()`流程
    (CLIENT) IBackgroundCopyJob::Complete()
       |
       V
    (SERVER) CJobExternal::Complete()
             |__ CJobExternal::CompleteInternal()
                 |__ ...
                 |__ CJob::CheckClientAccess() // Client impersonation
                 |__ CJob::Complete()
                 |__ ...
这两种情况都不能成功
当调用`IBackgroundCopyGroup::QueryNewJobInterface()`获取一个`IBackgroundCopyJob`类型的指针时，这个工作是由服务端完成的，而不是RPC客户端。此时可以利用成功。
`MoveFileEx()`调用流程
## 漏洞利用
本地创建一个job用于下载，并在tmp文件上设置Oplock，恢复执行后该服务会写入TMP文件触发Oplock，然后切换挂载点到对象目录，创建符号链接，tmp文件指向我们的文件，本地文件指向system32文件夹中的dll，最后释放Oplock，写入成功
### 1）准备
创建一个如下的目录
     %temp%\workspace
    |__  bait
    |__  mountpoint
    |__ FakeDll.dll
`mountpoint`目录是从连接`bait`目录，切换到`RPC
Control`对象，FakeDll.dll为了移动到受限位置，比如`system32`
### 2）创建挂载点
创建一个从`%temp%\workspace\mountpoint`到`%temp%\workspace\mountpoint`的挂载点
### 3）创建新的job
用 **Legacy Control Class** 接口创建一个新的job，参数如下
    Target URL: \\127.0.0.1\C$\Windows\System32\drivers\etc\hosts
    Local file: %temp%\workspace\mountpoint\test.txt
因为之前创建了链接，所以实际路径为`%temp%\workspace\bait\test.txt`
### 4）找到tmp文件设置Oplock
列出`bait`文件夹的内容找到类似`BITAA6.tmp`的临时文件，并在文件上设置设置Oplock
### 5）Resume并等待Oplock
恢复job时，会打开tmp文件写入触发Oplock
### 6）切换挂载点
切换前
    TMP file   = %temp%\workspace\mountpoint\BIT1337.tmp -> %temp%\workspace\bait\BITAA6.tmp
    Local file = %temp%\workspace\mountpoint\test.txt -> %temp%\workspace\bait\test.txt
切换挂载点创建符号链接
    %temp%\workspace\mountpoint -> \RPC Control
    Symlink #1: \RPC Control\BITAA6.tmp -> %temp%\workspace\FakeDll.dll
    Symlink #2: \RPC Control\test.txt -> C:\Windows\System32\FakeDll.dll
完成此步骤后：
    TMP file   = %temp%\workspace\mountpoint\BITAA6.tmp -> %temp%\workspace\FakeDll.dll
    Local file = %temp%\workspace\mountpoint\test.txt -> C:\Windows\System32\FakeDll.dll
### 7) 释放Oplock
释放Oplock后，`CreateFile`将对原始TMP文件操作，并且该服务将开始写入`%temp%\workspace\bait\BITAA6.tmp`。之后，`MoveFileEx()`由于符号链接，最终将被重定向。DLL将被移至该`System32`文件夹
### 8) 提权
使用`Update Session Orchestrator
service`加载移动到`system32文件夹`的dll文件`WindowsCoreDeviceInfo.dll`提权
## 参考链接
  * 
  * 
  * 
  * 
  * 