installmob.com
fullmusic.mobi
bookmarkwap.com
wapday.com
mzcpunjab.com
sandhuboyz.in
google.co.ke
zawaringo.com
desistuf.info
mr-hot.com
samwep.info
google.co.cr
djring.info
26.webmusic.in
rdxjatt.com
google.com.et
wap95.com
djwap.mobi
bindasmob.com
google.com.ng
xtmobi.com
wapka.mobi
mocospace.com
wapixel.com
patawap.com
wapask.com
waprule.com
search-results.com
opendns.com
scour.com
babylon.com
bukisa.com
qeep.mobi
admob.com
toxicwap.com
hitswap.net
infospace.com
vuclip.com
mp4movies.in
mobifcuk.com
medindia.net
musicpb.com
23.webmusic.in
chut44.com
daum.net
(a) Clusters (search)
(b) Clusters (mobile)
Signature Type
Search Cluster
thespecialsearch.com + 2 Malware, Afﬁliates
scour.com + 3
Badware, Afﬁliates
Parked Domain
Sedo-parked (58+)
Parked Domain
NS-parked (51+)
dotellall.com + 20
Arbitrage
%
5%
14%
(cloaked)
6%
18%
(c) Top 5 heavy-hitter cluster for search ads
8: Graph-clustering and heavy-hitter detection output
Graph-clustering: We induce a graph that spans all publisher do-
mains we see. We do this as follows. For any pair of publishers, we
compute a similarity score. We construct a feature vector that con-
sists of various network-level attributes (e.g., Web host IP address,
subnet, hosting provider, domain registrar, whois information) as
well as HTTP-level attributes in our logs. We assign a weight to
each attribute and compute a cosine similarity between the fea-
ture vectors of the pair of domains. The similarity score ranges
between 1 (identical) and 0 (dissimilar). We add a graph edge be-
tween the domains if the similarity score is above some threshold.
We ﬁnd this simple technique is surprisingly robust to our selec-
tion of weights and thresholds. In our data distinct cliques emerge
at thresholds as low as 0.2 and stay intact beyond 0.9, thus giving
us much wiggle room in picking the initial weights and thresholds
(which we manually reﬁne iteratively).
Heavy-hitter detection: We use a conductance metric to detect
heavy-hitters especially when the clusters do not neatly fall out as
distinct cliques. Each node in the graph shares responsibility for
clicks originating from another node up to 2-hops away. We found
2-hops to be quite effective since the 1-hop neighborhood was too
sparse (due to sparsity in the underlying data), and 3-hop neighbor-
hood resulted in clusters too large for them to represent real-world
collusion between bad domains. We compute a badness score for
each node as the number of clicks originating in their 2-hop neigh-
1819: Click-spam through TDL-4 botnet. TDL-4 is stealthy (one click per day), mimics user behavior (click gated on user-click); money ﬂows
up afﬁliate chain (up to 10 redirects seen). Who to blame: sigmazero (chain start) or thespecialsearch (publisher for ad network)?
borhood. We then partition the graph into disjoint clusters by con-
sidering nodes in decreasing order of badness as cluster centers,
and collapsing nodes within 2-hops from it into its cluster.
We believe better techniques based on learning and mining lit-
erature can be designed to ﬁnd patterns in click-spam data (e.g.,
[17, 18, 22]). We leave this for future investigations both by us and
other researchers. To this end, as mentioned earlier, our raw logs
are available online for other researchers to use.
That being said, even our simple technique was able to ﬁnd mean-
ingful clusters. Figure 8a plots our clustering and heavy-hitter out-
put applied to control ad clicks on Google’s and Bing’s syndicated
search ad networks; all clusters also happen to be cliques. Fig-
ure 8c lists the top 5 heavy-hitter clusters. Figure 8b plots the clus-
ters from control ads on mobile ad networks. Next, we dig deeper
and discuss some case studies chosen speciﬁcally to depict the wide
variety and sophistication in current click-spam techniques.
5.3 Click-spam in Search Ads
Click-spam we observed in search ads can be attributed to three
main attack vectors: (1) malware and badware, (2) parked domains,
and (3) arbitrage.
5.3.1 Malware and BadWare
thespecialsearch.com afﬁliates: We noticed a large number of
clicks in our logs that ﬁt the pattern clicks.thespecialsearch .com/xtr_-
new?q=. . . . What followed the q= parameter changed from click
to click, but almost always was a simple combination of English
words (e.g., Team Building or Saving more). 5% of the search clicks
in our logs matched this pattern.
Searching online we found malware reports [11] for the Win32/-
Olmarik (aka TDSS, TDL) botnet that had been observed fetching
URLs ﬁtting the above pattern. This particular malware family is
incredibly sophisticated [23]. The malware is a generic task execu-
tion platform — it contacts its command-and-control server (C&C),
downloads an arbitrary task meant speciﬁcally for that infection in-
stance, executes it, and repeats the process. The malware hooks
into all popular browsers (IE, Firefox, Safari, Chrome), through
which it can inject clicks that appear indistinguishable from nor-
mal trafﬁc generated by these browsers. The malware can also in-
ject malicious code into iframes the user is browsing, or modify
search results before they are shown to the user. It even attempts
to cleanse the infected host of other malware so it has sole control
over the host (and to disrupt other competing botnets).
We found a copy of the malware binary and installed it in a vir-
tual machine. We routed all trafﬁc from the virtual machine through
a transparent proxy (running on the VM host) and logged all trafﬁc.
We conﬁgured the proxy to block SMTP trafﬁc to block malware-
generated spam campaigns. We also apply a strict network rate-
limit to prevent DoS attacks, and conﬁgured our proxy to block
requests to the click URL of Google, Bing, and other major ad net-
works to prevent advertisers being charged for clicks made by the
malware instance.
How it works: Figure 9 illustrates the process.
1. For every search we performed through the browser, the mal-
ware contacted a speciﬁc IP address with the following URL: http://-
63.223.106.16/bV03tDze8. . . JpdHk=08h. The string of random char-
acters is encoded using base64. It decodes as follows: ver=4.2&-
bid=noname&aid=50018&sid=0&rd=1307260520&eng=www.bing.co-
m&q=celebrity. Thus, for each search, the malware reported back
to its C&C server the version number of the bot, afﬁliate ID, the
search engine where the query was submitted, and the query key-
words.
2. In response the C&C server sent back an XML ﬁle that directed
the bot to effectively click an ad. The XML ﬁle encoded the URL
to click, the HTTP Referer value to use (i.e., trafﬁc will appear to
come from this site), and some accounting information.
It is important to note that the bot did not immediately perform the
click after receiving the XML ﬁle.
3. The browser showed the (unmodiﬁed) search results we had
requested as usual.
4. Only when we clicked a search result, the bot kicked into ac-
tion in the background (i.e., the user doesn’t notice anything un-
usual). The bot contacted the URL it was directed to contact with
the appropriate Referer header. This led to a sequence of HTTP and
JavaScript redirects (we observed upto 10) that culminated in the ﬁ-
nal redirection to the click URL for one of the major ad networks.
Figure 9 plots the sequence of redirects.
Note: From the user’s perspective the malware is completely trans-
parent. The user’s search results and subsequent click were not
tampered with. The user wasn’t shown any extra ads or popups.
The user wasn’t redirected to an advertiser etc. The malware per-
formed all its activity stealthily in the background.
5. The bot then ceased this behavior for 24 hours (as long as the IP
address stayed the same). The following day the bot would repeat
this activity, perform one click, and become dormant again.
When we acquired a new external IP address (easy to do since the
ISP uses DHCP), the bot came out of dormancy, performed one
click, and resumed dormancy.
Discussion: It is clear that the C&C server is tracking which bots
are active and from where, and ensuring that across the botnet each
IP address is used only for one click in a 24 hour period — an
extremely low threshold that would likely not raise any ﬂags. Fur-
thermore, when the bot does click, it is gated by a legitimate user
click (on the search page), which would defeat click-spam detec-
tion mechanisms that look for deviations from normal user behavior
(e.g., [35]). Lastly, since it hooks into a regular browser, and forges
the referer of a legitimate site, click-spam detection techniques that
look for deviation at the HTTP or HTML layer would fail.
182Who made money: The penultimate website (thespecialsearch-
.com) made money from the ad network. Note this website also
shows up in our list of Sybils (Figure 7). The long chain of redi-
rects to thespecialsearch.com presumably identify the chain of af-
ﬁliates, each making some fraction of the money the next one in
the chain did. We noted that the malware used different afﬁliate
chains based on geography (i.e., it used one when in the US, and a
different one when in another country). This suggests that the same
malware is performing click-fraud for different “customers”. Thus
the botmaster controlling the botnet likely made money as well.
scour.com afﬁliates: A large number of clicks were through clicks.-
scour.com. Scour is a meta-search engine that aggregates results
from Google, Yahoo, Bing into a single search result page. It pays
users to search through it, and to vote or comment on individual re-
sults. It has an afﬁliate program where registered afﬁliates are paid
for users they refer to Scour.
How it works: We found a browser toolbar that hijacks the user’s
searches through Scour (but doesn’t automatically click on ads.)
The afﬁliate ID (6678) is hardcoded in the scour.com URL the tool-
bar points the browser to. The same afﬁliate ID shows up in our
logs. The toolbar, which many anti-virus companies classify as the
Scour redirect virus, is extremely hard to remove [9]. Additional
search redirect viruses (unrelated to Scour) that we see clicks from
include search-results.com, mywebsearch.com, search.babylon.com,
search.alot.com and search.conduit.com. These sites explain the
discrepancy between our estimate in Figure 3 and the ad networks’.
Who made money: As before, the publisher (scour.com) made
money from the ad network, and the afﬁliate presumably made
some fraction of that from Scour.
5.3.2 Parked Domains
sedo.com parkers: While investigating a set of about 35 clicks
from a particular domain registered by Sedo, a domain registrar,
we stumbled across 57 other domains also hosted by Sedo and in
our various logs. All these domains are parked domains. A parked
domain is a domain name that is registered, but not in use. The reg-
istrar typically points DNS for that domain name to a Web server
that serves up a “This site is under construction” or similar mes-
sage, followed by a set of ads that the user may or may not click.
For these speciﬁc parked domains, however, Sedo would auto-
matically redirect the browser to the ad click URL.
How it works:
1. A domain name registered by Sedo was either never used, or
its previous owner vacated it before the registration expired. Sedo
serves the parked page to users reaching the domain name.
2. A user may reach the parked domain name through many ways.
He may have mistyped a domain (e.g. nsdi.com is a Sedo parked
domain that appeared in our logs; other examples include blog-
dpot.com a mistyping of blogspot.com, and icicbank.com a typo for
icicibank.com)
In other cases where the owner was using the domain but is no
longer, links to the domain when it was active may have been
posted on forums, exchanged in emails, indexed by search engines
etc., and users may click on these links in the present. There are
also reports of adult link-exchange networks that launder trafﬁc
through parked domains [13].
3. The user is usually shown an ad-laden parking page.
4. If, however, the parked domain is one of these 58 domains (pos-
sibly more) and the user is geolocated to a certain set of countries,
which include UK, Brazil, Italy, India, China, Spain and Argentina
(but notably, not the US), Sedo serves up a piece of JavaScript that
in effect automatically clicks the ﬁrst ad link without ever serving
up the parking page.
5. The automatic click initiates a chain of redirects (we observed
upto 4) many of which (roughly one in three) culminate in a redirect
to clicks.scour.com (but lacks an afﬁliate ID). Scour then shows ads
from major ad network.
Based on the referrer we see in our logs (which appears to be
a search query on Scour) we found that the domain of the Sedo
parked page is linked to the search query on Scour. For exam-
ple, the publisher URL for ad clicks originating at icicbank.com is
. . . .scour.com?q=icic+bank. Indeed this is how we discovered the
set of 58 domains that auto-redirect users. For each Scour query
in our logs we attempted to guess the Sedo parked domain by ap-
pending common top-level domains (.com, .net, etc.), and check-
ing which were parked, and then determined which countries they
auto-redirect for using PlanetLab nodes located in 45 countries.
6. The remaining auto-redirects reach either thespecialsearch.com
— encountered earlier in the context of malware, or searchmir-
ror.com. Both these sites further auto-redirect to the ad click-URL.
The ultimate ad URL in these cases is encoded in each of the inter-
mediate redirects starting from the very ﬁrst redirect initiated at the
Sedo parked domain. Thus the decision for which ad to click was
made right at the onset.
7. In many cases, the ﬁrst ad is for the correct version of the
mistyped domain (e.g., the ad posted by icicibank.com is the top ad
on icicbank.com). Thus when the user is automatically redirected,
he may never realize that he mistyped the domain, although under
the covers icicibank.com (as an advertiser) has had to pay for a user
that was about to reach his Web page anyway, and several parties
made money in the process.
Discussion: Since Sedo parked domains redirect via a chain of
afﬁliates, detecting Sedo (or the Sedo customer) as the root-cause
requires reverse-engineering the chain (in this case through a query
parameter on scour.com, which taken out of context appears to be
a normal search query). More deviously, the user (e.g., that typed
icicbank.com) would engage normally with icicibank.com since he
anyway meant to type the latter. Thus any advertiser driven engage-
ment metrics would appear perfectly normal. Discovering such pat-
terns automatically is likely to be highly challenging, but would
illuminate a fraction of click-spam that is virtually undetectable.
Detection is only part of the problem however.
Sedo is beneﬁting from a ad network policy that does not forbid
its mode of operation. Parked domains are not only allowed to
show ads, ad networks expose special APIs to help them in doing
so [7]. Worse, even though ad networks have mechanisms to allow
advertisers to block certain classes of trafﬁc (e.g., trafﬁc through
proxy-servers), ad networks do not allow advertisers to block trafﬁc
from parked domains.
Who made money: thespecialsearch.com and scour.com made
money from major ad networks, some fraction of which, as before,
traveled through the afﬁliate chain to the Sedo parked page.
networksolutions.com: NetworkSolutions, another domain regis-
trar, has a similar model as Sedo, but does not automatically redi-
rect. They account for 6% of the clicks we see for control ads.
In one scenario we found that even though the owner of www.-
noblenet.org (a library website) is actively using it, NetworkSolu-
tions is showing a parked page for noblenet.org that, at ﬁrst glance,
appears to be a library page except all links are ads that direct the
user away from their intended URL. Note that here the user did not
make a typo; he simply omitted the www, which is often acceptable.
183(identiﬁed through a URL parameter in the landing-page URL the
site registered for its ads in the previous step). Figure 10 shows
screenshots of the site for users arriving either directly or through
an ad-click.
This second set of ads is from a different major search ad network.
Based on the keywords highlighted, we believe this second set of
ads are more expensive. The site ﬁlter-ins these higher-value ads
by stufﬁng keywords into the ad request.
Thus the family of sites acts as an advertiser with one search/contextual
ad network, and as a publisher with another search ad network.
3. Note that the users reaching the site have already displayed a
propensity to click ads. Presented with low-quality content, and
prominent ads on the top, it is likely a large fraction of these users
click the ad on the site. When they do, the second ad network pays
the site some fraction of the ad revenue from the lucrative ad, say a
dollar, while the site likely pays the ﬁrst ad network mere cents for
getting the user (and pockets the difference).
Discussion: Arbitrage has been long known to be an issue in ad
networks [24]. However, such elaborate fake sites can be incredibly
hard for a human at an ad network to detect (given limited time to
investigate publishers). Recall how the site does not even show ads
if navigated to directly. Discovery is only half the problem.
The second half is that these sites are not violating ad network
policy. An advertiser may show ads on the landing-page. A pub-
lisher may advertise his site. A publisher may provide useful con-
tent hints in the ad request. A poor quality page and a prominent
ad box is bad user-experience, and an SEO optimized publisher ul-
timately costs the advertiser, but does not violate current policy.
Who made money: The dotellall.com family of sites likely made
a lot of money from one search ad network, for inexpensive trafﬁc
it bought from the other ad network.