启用后（将其设定为 yes），Memcheck 会报告使用未定义值报告的错误。禁用时（将其设定为
no），则不会报告未定义值错误。默认启用这个选项。禁用该选项会稍稍提高 Memcheck 速度。
--ignore-ranges
可让用户指定一个或者多个 Memcheck 检查可寻址能力时应该忽略的范围。多个范围使用逗号分
开，例如：--ignore-ranges=0xPP-0xQQ,0xRR-0xSS。
选项完整列表请参考 /usr/share/doc/valgrind-version/valgrind_manual.pdf 中的文档。
5.3.2. 使使用用 Cachegrind 简简要要概概述述缓缓存存使使用用
Cachegrind 模拟您的程序与机器缓存等级和（可选）分支预测单元的互动。它跟踪模拟的一级指令和数据
缓存的用量以便探测不良代码与这一级缓存的互动；最高一级，可以是二级或者三级缓存，用来跟踪对主内
存的访问。因此，使用 Cachegrind 运行的程序速度比正常运行时要慢 20-100 倍。
37
红帽企业版 Linux 6 性能调节指南
要运行 Cachegrind 请执行以下命令，使用您要用 Cachegrind 简要描述的程序替换 program。
# valgrind --tool=cachegrind program
Cachegrind 可以为整个程序以及该程序中的每个功能收集统计数据：
一级指令缓存读取（或者执行的指令）和读取缺失，最后一级缓存指令读取缺失；
数据缓存读取（或者内存读取），读取缺失，以及最高一级缓存数据读取缺失；
数据缓存写入（或者内存写入），写ur缺失，以及最高一级缓存数据写入缺失；
已执行和无法预测的条件分支；以及
已执行和无法预测的间接分支。
Cachegrind 输出控制台的这些统计数据信息小结，并在文件（默认为 cachegrind.out.pid，其中pid
为您运行 Cachegrind 的程序的进程 ID）中写入更详细的配置信息。该文件可由 cg_annotate 进行进一步
的处理，比如：
# cg_annotate cachegrind.out.pid
注注意意
cg_annotate 可以输出 120 字符以上，具体要看路径的长度。要让输出结果更清晰、易读，我们建
议您在执行上述命令前将终端窗口至少调整到这个宽度。
您还可以比较 Cachegrind 生成的概述文件，将其简化为更改前后的图标对比图。要这样做请使用 cg_diff
命令，使用最初的概述输出文件替换 first，并使用随后的概述输出文件替换 second：
# cg_diff first second
这个命令提供合并的输出文件，您可以使用 cg_annotate 查看更详细的结果。
Cachegrind 支持大量选项注重其输出结果。有些可用选项为：
--I1
指定大小，关联性以及一级指令缓存的块大小，以逗号分开：--I1=size,associativity,line
size。
--D1
指定大小，关联性以及一级数据缓存的块大小，以逗号分开：--D1=size,associativity,line
size。
--LL
指定大小，关联性以及最后一级指令缓存的块大小，以逗号分开：--
LL=size,associativity,line size。
--cache-sim
启用或者禁用缓存访问和缺失计数集合。默认值为 yes（启用）。
注：禁用这个选项和 --branch-sim 选项让 Cachegrind 误信息可以收集。
38
第 5 章 内存
--branch-sim
启用或者禁用分支指令和无法预测计数集合。默认将其设定为 no（禁用），因为它可让
Cachegrind 延缓 25%。
注：禁用这个选项和 --cache-sim 选项让 Cachegrind 误信息可以收集。
选项完整列表请参考 /usr/share/doc/valgrind-version/valgrind_manual.pdf 中的文档。
5.3.3. 使使用用 Massif 查查看看堆堆和和栈栈空空间间配配置置
Massif 使用指定的程序测量堆 空间，包括有用空间以及用于记录和对齐而分配的额外空间。它可以帮助您
减少程序使用的内存量，增加程序速度，并减少程序耗尽机器 swap 空间的可能性。Massif 还可以提供有关
您程序用来分配堆 内存的部分的详情。使用 Massif 运行的程序的运行速度比其一般执行速度慢 20 倍。
要给出程序堆 用量信息，请将 massif 指定为您要使用的 Valgrind 工具：
# valgrind --tool=massif program
Massif 收集的配置数据会写入一个文件，默认为 massif.out.pid，其中 pid 是指定的 program 的进程
ID。
还可以使用 ms_print 命令绘制配置数据图，比如：
# ms_print massif.out.pid
这样可以生成显示程序执行期间内存消耗的图表，以及有关在程序中不同点进行分配的地点详情，其中包括
峰值内存分配点。
Massif 提供大量命令行选项可用于该工具的直接输出结果。这些可用选项包括：
--heap
指定是否执行堆 分析。默认值为 yes。将此选项设定为 no 即可禁用堆 分析。
--heap-admin
指定启用堆 分析时每个块用于管理的字节数。默认每个块有 8 字节。
--stacks
指定是否执行栈分析。默认值为 no（禁用）。要启用栈分析，请将这个选项设定为 yes，但请注
意这样做会极大降低 Massif 速度。另外还要注意 Massif 假设开始时主栈大小为 0 以便更好的显示
要分析的程序的栈所控制的比例。
--time-unit
指定用来分析的时间单位。这个选项三个有效值：执行的指令（i），即默认值，用于大多数情
况；即时（ms，单位毫秒），可用于某些特定事务；以及在堆（/或者）栈中分配/取消分配的字节
（B），用于很少运行的程序，且用于测试目的，因为它最容易在不同机器中重现。这个选项在使
用 ms_print 输出结果画图是游泳。
39
红帽企业版 Linux 6 性能调节指南
选项完整列表请参考 /usr/share/doc/valgrind-version/valgrind_manual.pdf 中的文档。
5.4. 容容量量调调节节
本小节总结了内存、内核以及文件系统容量，与每一部分相关的参数以及调节这些参数所涉及的交换条件。
要在调节时临时设定这些值，请将所需值 echo 到 proc 文件系统中的适当文件中。例如：要将
overcommit_memory 临时设定为 1，请运行：
# echo 1 > /proc/sys/vm/overcommit_memory
注：到 proc 文件系统中该参数的路径要具体看此变更所影响的系统。
要永久设定这些值，则需要使用 sysctl 命令。有关详情请参考《部署指南》，网址为
http://access.redhat.com/site/documentation/Red_Hat_Enterprise_Linux/。
与与容容量量相相关关的的内内存存可可调调参参数数
以下参数位于 proc 文件系统的 /proc/sys/vm/ 目录中。
overcommit_memory
规定决定是否接受超大内存请求的条件。这个参数有三个可能的值：
0 — 默认设置。内核执行启发式内存过量使用处理，方法是估算可用内存量，并拒绝明显无效
的请求。遗憾的是因为内存是使用启发式而非准确算法计算进行部署，这个设置有时可能会造
成系统中的可用内存超载。
1 — 内核执行无内存过量使用处理。使用这个设置会增大内存超载的可能性，但也可以增强大
量使用内存任务的性能。
2 — 内存拒绝等于或者大于总可用 swap 大小以及 overcommit_ratio 指定的物理 RAM 比例
的内存请求。如果您希望减小内存过度使用的风险，这个设置就是最好的。
注注意意
只为 swap 区域大于其物理内存的系统推荐这个设置。
overcommit_ratio
将 overcommit_memory 设定为 2 时，指定所考虑的物理 RAM 比例。默认为 50。
max_map_count
规定某个进程可能使用的最大内存映射区域。在大多数情况下，默认值 65530 就很合适。如果您
的程序需要映射比这个文件数更多的文件可增大这个值。
nr_hugepages
规定在内核中配置的超大页数。默认值为 0。只有系统中有足够的连续可用页时方可分配（或者取
消分配）超大页。为这个参数保留的页无法用于其他目的。安装的文件
/usr/share/doc/kernel-
doc-kernel_version/Documentation/vm/hugetlbpage.txt 中有详细的内容。
40
第 5 章 内存
与与容容量量相相关关的的内内核核可可调调参参数数
以下参数位于 proc 文件系统的 /proc/sys/kernel/ 目录中。
msgmax
以字节为单位规定信息队列中任意信息的最大允许大小。这个值一定不能超过该队列的大小
（msgmnb）。默认值为 65536。
msgmnb
以字节为单位规定单一信息队列的最大值。默认为 65536 字节。
msgmni
规定信息队列识别符的最大数量（以及队列的最大数量）。64 位架构机器的默认值为 1985；32
位架构机器的默认值为 1736。
shmall
以字节为单位规定一次在该系统中可以使用的共享内存总量。64 位架构机器的默认值为
4294967296；32 位架构机器的默认值为 268435456。
shmmax
以字节为单位规定内核可允许的最大共享内存片段。64 位架构机器的默认值为 68719476736；
32 位架构机器的默认值为 4294967295。注：但内核支持的值比这个值要多得多。
shmmni
规定系统范围内最大共享内存片段。在 64 位和 32 位架构机器中的默认值都是 4096。
threads-max
规定一次内核使用的最大线程（任务）数。默认值与 max_threads 相同。使用的方程式是：
max_threads = mempages / (8 * THREAD_SIZE / PAGE_SIZE )
threads-max 的最小值为 20。
与与容容量量相相关关的的文文件件系系统统可可调调参参数数
以下参数位于 proc 文件系统的 /proc/sys/fs/ 目录中。
aio-max-nr
规定在所有活动异步 I/O 上下文中可允许的最多事件数。默认值为 65536。注：更改这个值不会预
先分配或者重新定义内核数据结构大小。
file-max