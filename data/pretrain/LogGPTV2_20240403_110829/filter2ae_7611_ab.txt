            /* Update the size. */
        if (dev->size size = *f_pos;
      out:
        mutex_unlock(&dev->mutex);
        return retval;
    }
    /* Beginning of the scull device implementation. */
    /*
     * Empty out the scull device; must be called with the device
     * mutex held.
     */
    int scull_trim(struct scull_dev *dev)
    {
        struct scull_qset *next, *dptr;
        int qset = dev->qset;   /* "dev" is not-null */
        int i;
        for (dptr = dev->data; dptr; dptr = next) { /* all the list items */
            if (dptr->data) {
                for (i = 0; i data[i]);
                kfree(dptr->data);
                dptr->data = NULL;
            }
            next = dptr->next;
            kfree(dptr);
        }
        dev->size = 0;
        dev->quantum = scull_quantum;
        dev->qset = scull_qset;
        dev->data = NULL;
        return 0;
    }
    int scull_release(struct inode *inode, struct file *filp)
    {
        printk(KERN_DEBUG "process %i (%s) success release minor(%u) file\n", current->pid, current->comm, iminor(inode));
        return 0;
    }
    /*
     * Open and close
     */
    int scull_open(struct inode *inode, struct file *filp)
    {
        struct scull_dev *dev; /* device information */
        dev = container_of(inode->i_cdev, struct scull_dev, cdev);
        filp->private_data = dev; /* for other methods */
        /* If the device was opened write-only, trim it to a length of 0. */
        if ( (filp->f_flags & O_ACCMODE) == O_WRONLY) {
            if (mutex_lock_interruptible(&dev->mutex))
                return -ERESTARTSYS;
            scull_trim(dev); /* Ignore errors. */
            mutex_unlock(&dev->mutex);
        }
        printk(KERN_DEBUG "process %i (%s) success open minor(%u) file\n", current->pid, current->comm, iminor(inode));
        return 0;
    }
    /*
     * The "extended" operations -- only seek.
     */
    loff_t scull_llseek(struct file *filp, loff_t off, int whence)
    {
        struct scull_dev *dev = filp->private_data;
        loff_t newpos;
        switch(whence) {
          case 0: /* SEEK_SET */
            newpos = off;
            break;
          case 1: /* SEEK_CUR */
            newpos = filp->f_pos + off;
            break;
          case 2: /* SEEK_END */
            newpos = dev->size + off;
            break;
          default: /* can't happen */
            return -EINVAL;
        }
        if (newpos f_pos = newpos;
        return newpos;
    }
    struct file_operations scull_fops = {
        .owner =    THIS_MODULE,
        .llseek =   scull_llseek,
        .read =     scull_read,
        .write =    scull_write,
        // .unlocked_ioctl = scull_ioctl,
        .open =     scull_open,
        .release =  scull_release,
    };
    /*
     * Set up the char_dev structure for this device.
     */
    static void scull_setup_cdev(struct scull_dev *dev, int index)
    {
        int err, devno = MKDEV(scull_major, scull_minor + index);
        cdev_init(&dev->cdev, &scull_fops);
        dev->cdev.owner = THIS_MODULE;
        dev->cdev.ops = &scull_fops;
        err = cdev_add (&dev->cdev, devno, 1);
        /* Fail gracefully if need be. */
        if (err)
            printk(KERN_NOTICE "Error %d adding scull%d", err, index);
        else
            printk(KERN_INFO "scull: %d add success\n", index);
    }
    void scull_cleanup_module(void)
    {
        int i;
        dev_t devno = MKDEV(scull_major, scull_minor);
        /* Get rid of our char dev entries. */
        if (scull_devices) {
            for (i = 0; i `[[5]](https://raw.githubusercontent.com/torvalds/linux/master/include/linux/fs.h
"\[5\]")头文件中，`file_operations`结构体
上面我举例的代码中：
    struct file_operations scull_fops = {
        .owner =    THIS_MODULE,
        .llseek =   scull_llseek,
        .read =     scull_read,
        .write =    scull_write,
        .open =     scull_open,
        .release =  scull_release,
    };
我声明了一个该结构体，并赋值，除了`owner`，其他成员的值都为函数指针
之后我在`scull_setup_cdev`函数中，使用`cdev_add`向每个驱动设备，注册该文件操作结构体
比如我对该驱动设备执行open操作，则会去执行`scull_open`函数，相当于hook了系统调用中的`open`函数
#### 知识点4 -- 在/dev下生成相应的设备
对上面的代码进行编译，得到scull.ko，然后对其进行签名，最后使用`insmod`加载进内核中
查看是否成功加载：
![
](https://images.seebug.org/content/images/2019/01/b129b201-93ce-491b-b1b2-351c4c357c36.png-w331s)
虽然驱动已经加载成功了，但是并不会在/dev目录下创建设备文件，需要我们手动使用`mknod`进行设备链接:
![
](https://images.seebug.org/content/images/2019/01/2118fab7-653e-4d2f-ac15-b299e77e92be.png-w331s)
### 总结
在该实例中，并没有涉及到对实际物理设备的操作，只是简单的使用`kmalloc`在内核空间申请一块内存。代码细节上的就不做具体讲解了，都可以通过查头文件或者用Google搜出来。
再这里分享一个我学习驱动开发的方法，首先看书把基础概念给弄懂，细节到需要用到的时候再去查。
比如，我不需要知道驱动一共能提供有哪些API(也就是file_operations结构都有啥)，我只要知道一个概念，驱动提供的API都是一些文件操作，而文件操作，目前我只需要`open,
close, read, write`，其他的等有需求，要用到的时候再去查。
### 参考
  1. 
  2. 
  3. 
  4. 
  5. 
* * *