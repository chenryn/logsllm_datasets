1000
1000
800
800
600
600
400
400
200
200
0
0
Mean distance
𝑢
𝑢
𝑢
𝑢
×
×
𝑢
𝑢
−
−
𝑢+
𝑢+
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
∨
∨
∧
∧
⊕
⊕
×
×
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢−
𝑢−
¬
¬
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
𝑢
(𝑢
(𝑢
×
×
×
×
×
×
×
×
×
×
(𝑢+
(𝑢+
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
×
×
−
−
∧
∧
∨
∨
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
×
×
⊕
⊕
𝑢)
𝑢)
(𝑢+
(𝑢+
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
(𝑢
−
−
∨
∨
∧
∧
⊕
⊕
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
×
×
×
×
×
×
×
×
×
×
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
(𝑢+
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
𝑢)
×
×
Non terminal expressions
Each point represents the distance between (𝑎 ∧ 𝑏) × (𝑏 + 𝑐) and one simulation of
a non terminal expression (horizontal axis). A non terminal expression, can generate
multiple terminal ones through simulations, leading to completely different results.
Figure 2: Dispersion of the distance for different simulations
e
c
n
a
t
s
i
d
c
i
m
h
t
i
r
a
g
o
L
e
c
n
a
t
s
i
d
c
i
m
h
t
i
r
a
g
o
L
1600
1400
1200
1000
800
600
400
200
0
1600
1400
1200
1000
800
600
400
200
0
Syntia
0
2000
4000
6000
8000
10000
12000
# Iterations
Enumerative MCTS
0
2000
4000
6000
8000
10000
12000
# Iterations
Figure 3: Syntia and enumerative MCTS distance evolution
(expression successfully synthesized)
Conclusion. The search space from blackbox code deobfuscation is
too unstable, making MCTS simulations unreliable. MCTS in that
setting is then almost enumerative and inefficient. That is why Syntia
is slow and not robust, but returns simple expressions.
4.5 Conclusion
While Syntia returns simple results, it only synthesizes semantically
simple expressions and is slow. These unsatisfactory results can be
explained by the fact that the search space is too unstable, making
the use of MCTS unsuitable. In the next section, we show that
methods avoiding the manipulation of partial expressions (and thus
free from simulation) are better suited to deobfuscation.
5 IMPROVE BLACKBOX DEOBFUSCATION
We define a new search-based blackbox deobfuscator, dubbed Xyn-
tia, leveraging S-metaheuristics [32] and Iterated Local Search (ILS)
[24] and compare its design to rival deobfuscators. Unlike MCTS,
S-metaheuristics only manipulate terminal expressions and do not
create tree searches, thus we expect them to be better suited than
MCTS for code deobfuscation. Among S-metaheuristics, ILS is par-
ticularly designed for unstable search spaces, with the ability to re-
member the last best solution encountered and to restart the search
from that point. We show that these methods are well-guided by
the distance function and significantly outperform MCTS in the
context of blackbox code deobfuscation.
5.1 Deobfuscation as Optimization
As presented in Section 4, Syntia frames deobfuscation as a single
player game. We instead propose to frame it as an optimization
problem using ILS as learning strategy.
Blackbox deobfuscation: an optimization problem. Blackbox
deobfuscation synthesizes an expression from inputs-outputs sam-
ples and can be modeled as an optimization problem. The objective
function, noted 𝑓 , measures the similarity between current and
ground truth behaviors by computing the sum of the distances
between found and objective outputs. The goal is to infer an ex-
pression minimizing the objective function over the I/O samples. If
the underlying grammar is expressive enough, a minimum exists
and matches all sampled inputs to objective outputs, zeroing 𝑓 .
The reliability of the found solution depends on the number of I/O
samples considered. Too few samples would not restrain search
enough and lead to flawed results.
Solving through search heuristics. S-metaheuristics [32] can be
advantageously used to solve such optimization problems. A wide
range of heuristics exists (Hill Climbing, Random Walk, Simulated
Annealing, etc.). They all iteratively improve a candidate solution by
testing its “neighbors” and moving along the search space. Because
solution improvement is evaluated by the objective function, it is
said to guide the search.
Iterated Local Search. Some S-metaheuristics are prone to be
stuck in local optimums so that the result depends on the initial
input chosen. Iterated Local Search (ILS) [24] tackles the problem
through iteration of search and the ability to restart from previously
seen best solutions. Note that ILS is parameterized by another
search heuristics (for us: Hill Climbing). Once a local optimum is
Session 10A: Crypto, Symbols and Obfuscation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2518found by this side search, ILS perturbs it and uses the perturbed