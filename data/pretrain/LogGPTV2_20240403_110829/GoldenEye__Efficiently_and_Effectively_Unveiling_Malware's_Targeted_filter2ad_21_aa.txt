title:GoldenEye: Efficiently and Effectively Unveiling Malware's Targeted
Environment
author:Zhaoyan Xu and
Jialong Zhang and
Guofei Gu and
Zhiqiang Lin
GOLDENEYE: Efﬁciently and Effectively Unveiling
Malware’s Targeted Environment
Zhaoyan Xu1, Jialong Zhang1, Guofei Gu1, and Zhiqiang Lin2
1 Texas A&M University, College Station, TX
{z0x0427,jialong,guofei}@cse.tamu.edu
2 The University of Texas at Dallas, Richardson, TX
PI:EMAIL
Abstract. A critical challenge when combating malware threat is how to efﬁ-
ciently and effectively identify the targeted victim’s environment, given an un-
known malware sample. Unfortunately, existing malware analysis techniques ei-
ther use a limited, ﬁxed set of analysis environments (not effective) or employ ex-
pensive, time-consuming multi-path exploration (not efﬁcient), making them not
well-suited to solve this challenge. As such, this paper proposes a new dynamic
analysis scheme to deal with this problem by applying the concept of speculative
execution in this new context. Speciﬁcally, by providing multiple dynamically
created, parallel, and virtual environment spaces, we speculatively execute a mal-
ware sample and adaptively switch to the right environment during the analysis.
Interestingly, while our approach appears to trade space for speed, we show that it
can actually use less memory space and achieve much higher speed than existing
schemes. We have implemented a prototype system, GOLDENEYE, and evalu-
ated it with a large real-world malware dataset. The experimental results show
that GOLDENEYE outperforms existing solutions and can effectively and efﬁ-
ciently expose malware’s targeted environment, thereby speeding up the analysis
in the critical battle against the emerging targeted malware threat.
Keywords: Dynamic Malware Analysis, Speculative Execution.
1 Introduction
In the past few years, we have witnessed a new evolution of malware attacks from
blindly or randomly attacking all of the Internet machines to targeting only speciﬁc
systems, with a great deal of diversity among the victims, including government, mil-
itary, business, education, and civil society networks [17,24]. Through querying the
victim environment, such as the version of the operating system, the keyboard layout,
or the existence of vulnerable software, malware can precisely determine whether it
infects the targeted machine or not. Such query-then-infect pattern has been widely em-
ployed by emerging malware attacks. As one representative example, advanced persis-
tent threats (APT), a unique category of targeted attacks that sets its goal at a particular
individual or organization, are consistently increasing and they have caused massive
damage [15]. According to an annual report from Symantec Inc, in 2011 targeted mal-
ware has a steady uptrend of over 70% increasing since 2010 [15], such overgrowth
A. Stavrou et al. (Eds.): RAID 2014, LNCS 8688, pp. 22–45, 2014.
c(cid:2) Springer International Publishing Switzerland 2014
GOLDENEYE: Efﬁciently and Effectively Unveiling Malware’s Targeted Environment
23
has never been slow down, especially for the growth of malware binaries involved in
targeted attacks in 2012 [14].
To defeat such massive intrusions, one critical challenge for malware analysis is how
to effectively and efﬁciently expose these environment-sensitive behaviors and in fur-
ther derive the speciﬁcation of environments, especially when we have to handle a large
volume of malware corpus everyday. Moreover, in the context of defeating targeted at-
tacks, deriving the malware targeted environment is an indispensable analysis step. If
we can derive the environment conditions that trigger malware’s malicious behavior,
we can promptly send out alerts or patches to the systems that satisfy these conditions.
In this paper, we focus on environment-targeted malware, i.e., malware that con-
tains query-then-infect features. To analyze such malware and extract the speciﬁcation
of their targeted environment, we have to refactor our existing malware analysis infras-
tructure, especially for dynamic malware analysis. Because of the limitation of static
analysis [38], dynamic malware analysis is recognized as one of the most effective so-
lutions for exposing malicious behaviors [38,37]. However, existing dynamic analysis
techniques are not effective and efﬁcient enough, and, as mentioned, we are facing two
new challenges: First, we need highly efﬁcient techniques to handle a great number
of environment-targeted malware samples collected every day. Second, we require the
analysis environment to be more adaptive to each individual sample since malware may
only exhibit its malicious intent in its targeted environment. (More details are explained
in Section 2.)
As such, in this paper we attempt to ﬁll the aforementioned gaps. Speciﬁcally, we
present a novel dynamic analysis scheme, GOLDENEYE, for agile and effective mal-
ware targeted environment analysis. To serve as an efﬁcient tool for malware analysts,
GOLDENEYE is able to proactively capture malware’s environment-sensitive behaviors
in progressive running, dynamically determine the malware’s possible targeted environ-
ments, and online switch its system environment adaptively for further analysis.
The key idea is that by providing several dynamic, parallel, virtual environment
spaces during a single malware execution, GOLDENEYE proactively determines what
the malware’s targeted environment is through a specially designed speculative execu-
tion engine to observe malware behaviors under alternative environments. Moreover,
GOLDENEYE dynamically, adaptively switches the analysis environment and lets mal-
ware itself expose its target-environment-dependent behaviors. Although GOLDENEYE
trades space for speed, interestingly our experimental results show that GOLDENEYE
could actually use less memory space while achieving much higher speed than existing
multi-path exploration techniques.
In summary, this paper makes the following contributions:
– We present a new scheme for environment-targeted malware analysis that provides
a better trade-off between effectiveness and efﬁciency, an important and highly de-
manded step beyond existing solutions. As a preliminary effort towards systematic
analysis of targeted malware, we hope it will inspire more future research in tar-
geted and advanced persistent threat defense.
– We design and implement GOLDENEYE, a new lightweight dynamic analysis tool
for discovering malware’s targeted environment by applying novel speculative ex-
ecution in dynamic, parallel, virtual environment spaces. The proposed approach
24
Z. Xu et al
can facilitate the analysis on new emerging targeted threats to reveal malware’s
possible high-value targets. Meanwhile, it also facilitates conducting large volumes
of malware analysis in a realtime fashion.
– We provide an in-depth evaluation of GOLDENEYE on real-world malware datasets
and show that GOLDENEYE can successfully expose malware’s environment-
sensitive behaviors with much less time or fewer resources, clearly outperforming
existing approaches. We also show that GOLDENEYE can automatically identify
and provide correct running environment for tested well-known targeted malware
families. To further improve the accuracy and efﬁciency, we also propose a dis-
tributed deployment scheme to achieve better parallelization of our analysis.
2 Background and Related Work
2.1 Objectives
The focal point of this paper is on a set of malware families, namely environment-
targeted malware. In our context, we adopt the same deﬁnition of environment in related
work [36], i.e., we deﬁne an environment as a system conﬁguration, such as the version
of operating system, system language, and the existence of certain system objects, such
as ﬁle, registry and devices.
Environment-targeted malware families commonly contain some customized envi-
ronment check logic to identify their targeted victims. Such logic can thus naturally lead
us to ﬁnd out the malware’s targeted running environment. For instance, Stuxnet [13], an
infamous targeted malware family, embeds a PLC device detection logic to infect ma-
chines that connect to PLC control devices. Banking Trojans, such as Zeus [21], only
steal information from users who have designated bank accounts. Other well-known
examples include Flame [6], Conﬁcker [43] and Duqu [4].
As a result, different from the traditional malware analysis, which mainly focuses on
malware’s behaviors, environment-targeted malware analysis has to answer the follow-
ing two questions: (1) Given a random malware binary, can we tell whether this sample
is used for environment-targeted attacks? (2) If so, what is its targeted victim or targeted
running environment?
Consequently, the goal of our work is to design techniques that can (1) identify pos-
sible targeted malware; (2) unveil targeted malware’s environment sensitive behaviors;
and (3) provide environment information to describe malware’s targeted victims.
2.2 Related Work
Research on Enforced/Multi-path Exploration. Exposing malicious behaviors is
a research topic that has been extensively discussed in existing research
[33,30,27,23,36,47,46].
One brute-forced path exploration scheme, forced execution, was proposed in [46].
Instead of providing semantics information for a path’s trigger condition, the technique
was designed for brute-force exhausting path space only. Most recently, X-Force [42]
has made this approach further by designing a crash-free engine. To provide the seman-
tics of the trigger, Brumley et al. [25] proposed an approach that applies taint analysis
GOLDENEYE: Efﬁciently and Effectively Unveiling Malware’s Targeted Environment
25
and symbolic execution to derive the condition of malware’s hidden behavior. In [34],
Hasten was proposed as an automatic tool to identify malware’s stalling code and de-
viate the execution from it. In [35], Kolbitsch et al. proposed a multipath execution
scheme for Java-script-based malware. Other research [29,46] proposed techniques to
enforce execution of different malware functionalities.
One important work in this domain [37] introduced a snapshot based approach which
could be applied to expose malware’s environment-sensitive behaviors. However, this
approach is not efﬁcient for large-scale analysis of environment-targeted malware: it
is typically very expensive and it may provide too much unwanted information, thus
leaving truly valuable information buried. This approach essentially requires to run the
malware multiple times to explore different paths. After each path exploration, we need
to rewind to a previous point (e.g., a saved snapshot), deduce the trigger condition of
branches and explore unobserved paths by providing a different set of input, or some-
times enforce the executing of branches in a brute-force way. Obviously this kind of
frequent forward execution and then rolling back is very resource-consuming, thus mak-
ing it not very scalable to be applied for analyzing a large volume of malware samples
collected each day. Moreover, this scheme is a typical sequential model which makes
the analysis hard for parallel or distributed deployment, e.g., in a cloud computing set-
ting. Last but not least, the possible path explosion problem [37] is another important
concern for this approach.
Research on Malware’s Environment-Sensitive Behaviors. Another line of research
[27,23,28,36,44,40] discusses malware environment-sensitive behaviors. These studies
fall into three categories: (1) Analyzing malware’s anti-debugging and anti-virtualization
logic [23,28]; (2) Discovering malware’s different behaviors in different system conﬁg-
urations [36]; (3) Discovering behaviors in network-contained environment [32]. The
main idea in these studies is to provide possible target environments before applying the
traditional dynamic analysis. The possible target environment could be a running en-
vironment without debuggers [28], introspection tools [23], or patched vulnerabilities
involved.
In a recent representative study [36], the authors provided several statically-conﬁgured
environments to detect malware’s environment sensitive behaviors. While efﬁcient (not
carrying the overhead of multi-path exploration), this approach is not effective, i.e., the
limitation is: we cannot predict and enumerate all possible target environments in ad-
vance. In particular, in the case of targeted malware, we often are not able to predict
malware’s targeted environments before the attack/analysis.
Summary. We summarize the
pros and cons of previous re-
search in Table 1. We analyze
these techniques from several
aspects: Completeness, Flexi-
bility, Prerequisites, Resource
Consumption, Analysis Speed,
Assisting Techniques, and De-
ployment Model.
I
[25,37,46]
High
High
Low
Resource Consumption High
Slow
II
[36,23]
Low
Low
High
Low
Fast
Trace Comparison
Table 1. Summary of Existing Techniques
Assisting Techniques Symbolic Execution,
Approach Category
Representative Work
Completeness
Flexibility
Prerequisites
Analysis Speed
Deployment Model
Sequential/Parallel
Tainted Analysis,
Execution Snapshot
Sequential
26
Z. Xu et al
As illustrated, the ﬁrst category of solution, such as [37,25], has theoretically full-
completeness but with high resource consumption. It requires the execution to period-
ically store execution context and roll back analysis after one-round exploration, thus
very slow. Meanwhile, it requires some assisting techniques, such as symbolic execu-
tion which is slow and has some inherent limitations [22]. Last but not least, it is not
designed for parallel deployment, making it not able to leverage modern computing
resources such as clouds.
For the second category, such as [23,36], these approaches support both sequential
and parallel deployment. Meanwhile it has less resource consumption and fast analysis
speed. However, all the environments require manual expertise knowledge and need to
be conﬁgured statically beforehand. Hence, it is not ﬂexible nor adaptive. More impor-
tantly, it is incomplete, limited to these limited number of preconﬁgured environments,
and has a low analysis coverage.
3 Overview of GOLDENEYE
An overview of our approach is presented in Figure 1. As illustrated, our scheme con-
sists of three phases. In phase I, we screen malware corpus and identify the possible
targeted malware samples. In phase II, we employ dynamic environment analysis to it-
eratively unveil the malware candidates’ targeted running environments. In phase III, we
summarize the analysis result with detailed reports. The reports contain the information
about malware’s sensitive environments and their corresponding behavior differences.
Original 
Environment
Alternative 
Environment I
Alternative 
Environment II
….
Concrete 
Execution
Result 
Speculative 
Execution Engine
E
Result in I
Result in II
….
Environment 
En
Selection
Running 
Environment
Environment 
Env
Update
Alternative 
Environment I
Monitoring 
M
Tool
Targeted Malware 
Ta
Candidates
II: Dynamic Environment Analysis
Filtering
I : Pre-selection
Reports
III: Target Reports
Fig. 1. Overview of GOLDENEYE
In this section we brieﬂy overview the basic idea of our key novel design in GOLD-
ENEYE, i.e., progressive speculative execution in parallel spaces, and leave the rest
system details to Section 4.
GOLDENEYE: Efﬁciently and Effectively Unveiling Malware’s Targeted Environment
27
The ﬁrst key design of GOLDENEYE is to dynamically construct parallel spaces to
expose malicious behaviors. To overcome the limitation of previous work [36], which
statically speciﬁes multiple analysis environments beforehand, our design is to dynam-
ically construct multiple environments based on malware’s behaviors, the call of en-
vironment query APIs. In particular, through labeling these APIs beforehand, we can
understand all possible return values of each environment query. For each possible re-
turn value, we construct one environment for that. For example, if we ﬁnd the malware
queries system call GetKeyboardLayout, we can prepare multiple return values
such as 0x0004 for Chinese and 0x0409 for United States, and simulate two parallel