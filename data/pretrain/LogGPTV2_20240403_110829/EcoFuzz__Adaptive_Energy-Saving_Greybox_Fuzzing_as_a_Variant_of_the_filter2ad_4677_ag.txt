2.6*10−3
Average-cost
p4
p3
5.7*10−4
1.4*10−5
2.4*10−6
1.4*10−3
1.4*10−7
1.2*10−3
1.4*10−7
5.1*10−1
1.3*10−3
1.1*10−4
7.1*10−8
6.0*10−6
3.8*10−8
9.7*10−5
2.9*10−4
5.6*10−3
7.9*10−1
1.3*10−4
2.4*10−6
3.7*10−1
2.9*10−4
1.0*10−3
2.1*10−4
1.4*10−3
7.3*10−5
1.4*10−10
1.9*10−5
9.4*10−2
p5
3.2*10−3
1.2*10−2
3.5*10−2
2.9*10−1
4.4*10−7
1.5*10−4
8.6*10−5
2.1*10−3
5.4*10−2
1.1*10−4
1.4*10−6
1.4*10−8
5.9*10−5
2.3*10−3
p6
1.4*10−5
4.0*10−8
8.8*10−9
4.8*10−4
2.4*10−6
2.4*10−5
3.0*10−6
7.2*10−3
4.3*10−4
3.4*10−7
1.5*10−7
1.3*10−3
3.3*10−5
1.1*10−5
Table 7: The maximum and minimum of discovered paths in each evaluation
Subjects
AFL
FidgetyAFL
Maximum / Minimum of Discovered Paths
FairFuzz
AFLFast
MOPT-AFL
EcoFuzz
nm
objdump
readelf
size
cxxﬁlt
djpeg
xmllint
gif2png
readpng
tcpdump
infotocap
jhead
magick
bsdtar
2,651 / 4,074
3,633 / 4,238
5,371 / 5,840
2,279 / 2,644
3,329 / 4,786
2,063 / 2,320
3,385 / 3,591
2,551 / 3,122
1,463 / 1,598
5,987 / 6,830
2,849 / 3,914
482 / 513
1000 / 1,164
2,691 / 2,823
3,197 / 7,671
6,952 / 7,496
12,118 / 14,032
3,285 / 3,408
7,424 / 8,020
2,840 / 4,794
6,114 / 6,435
3,946 / 4,193
1,757 / 2,001
9,776 / 11,201
5,428 / 6,433
527 / 551
4,379 / 5,623
6,367 / 6,906
2,675 / 5,548
3,791 / 4,520
7,997 / 8,332
1,685 / 2,586
3,883 / 5,237
2,073 / 2,502
3,886 / 4,347
1,906 / 3,559
1,486 / 1,685
5,499 / 7,680
4,089 / 4,794
511 / 545
1,891 / 2,230
2,139 / 4,148
is triggered in the process_DQT function in jpgqguess.c
and has been requested as CVE-2020-6624 by others. This
vulnerability was only found by EcoFuzz, FidgetyAFL and
AFLFast.new, thus proving that EcoFuzz is more efﬁcient than
AFL and AFLFast in detecting vulnerabilities. In addition,
we recompiled and tested tcpdump with the ASAN model
of AFL. EcoFuzz found a memory leak in the copy_argv
function in tcpdump.c. Finally, we submitted these 5 vulnera-
bilities and obtain CVE-2019-17371 as the memory leak in
libpng. All vulnerabilities are listed in Table 8.
Table 8: The discovered vulnerabilities
Softwares
File/Function
Status
Binutils-2.32
Binutils-2.32
Binutils-2.32
Binutils-2.31
Binutils-2.31
Binutils-2.31
Binutils-2.31
gif2png-2.5.13
gif2png-2.5.13
libpng-1.6.37
tcpdump-4.9.2
jhead-3.03
SNMP deamon
cp-demangle.c/d_expression_1
hash.c/bfd_hash_hash
bfd.c/_bfd_doprnt
xmalloc.c/xmalloc
cplus-dem.c/string_append
cplus-dem.c/string_append_template_idx
cplus-dem.c/demangle_class_name
gif2png.c/writeﬁle
memory.c/xalloc
pngmem.c/png_malloc_warn
tcpdump.c/copy_argv
jpgqguess.c/process_DQT
snmp/Context::createReply
CVE-2019-9070
Acknowledged
CVE-2019-12972
Patched
Patched
Patched
Patched
Submitted
Submitted
CVE-2019-17371
Acknowledged
CVE-2020-6624
Patched
8.3 More Analysis of Experiments on LAVA-
M
In Section 5.5, we evaluate the performance of each technique
on LAVA-M in general. We also point out the comparison be-
AFLFast.new
7,406 / 8,966
6,933 / 7,587
13,110 / 14,813
3,467 / 3,870
7,632 / 8,756
2,940 / 4,895
6,864 / 7,573
4,112 / 4,332
1,812 / 2,132
12,456 / 13,321
5,507 / 7,136
524 / 552
5,132 / 5,567
6,490 / 7,648
2,683 / 5,613
5,033 / 5,646
8,111 / 10,124
2,597 / 2,928
4,906 / 5,278
1,780 / 2,010
4,732 / 6,268
2,627 / 3,234
1,413 / 2,177
10,678 / 12,635
3,388 / 4,668
496 / 521
2,853 / 3,948
3,292 / 4,395
2,547 / 4,069
4,361 / 4,549
5,723 / 6,189
2,761 / 3,093
6,125 / 7,352
2,199 / 2,943
5,742 / 6,259
3,723 / 4,009
1,608 / 1,981
7,393 / 8,612
4,932 / 5,831
528 / 556
3,116 / 3,739
2,536 / 4,081
7,986 / 8,659
7,063 / 7,810
11,555 / 14,337
3,727 / 4,097
6,847 / 7,393
2,807 / 3,380
6,304 / 7,062
4,204 / 4,347
1,923 / 2,168
12,417 / 15,191
5,443 / 6,240
577 / 619
5,268 / 5,873
7,006 / 7,581
tween EcoFuzz with Angora and VUzzer is not strict enough.
Now we do a more in-depth and detailed analysis.
We deployed EcoFuzz on the cloud server in Section 5.5.
We also run EcoFuzz with the same setting as in Section 5.5.
After validating the bugs detected by EcoFuzz during 5 times
of 5-hours runs, EcoFuzz found all listed and unlisted bugs on
base64, md5sum, and uniq, with 48(+4), 57(+4) and 28(+1)
bugs. For who, EcoFuzz found 1,966 bugs in total, with 1,750
listed and 216 unlisted bugs, which are both more than that
of Angora and VUzzer. In detail, EcoFuzz detected 1,139,
1,365, 1,377, 1,450 and 1,210 bugs on who in each run, re-
spectively. Since different environments have an impact on
the experimental results and there is non-negligible random-
ness in the experiment of fuzzing, it is not objective to deduce
that EcoFuzz can always outperform Angora on LAVA-M
from the results in our evaluation. In the origin paper, Angora
can ﬁnd 1,541 bugs on who in one 5-hours run [10], which
states that Angora is still an efﬁcient and state-of-the-art tool
in detecting the bugs in LAVA-M.
From these results, on base64, md5sum, and uniq, EcoFuzz
found all the listed and unlisted bugs, as same as FidgetyAFL
and AFLFast.new. Angora also performs well on these three
programs. Furthermore, these four tools all detected numerous
bugs in who.
Moreover, AFL-type fuzzers all perform well on LAVA-M
in the dictionary mode. In fact, the way to trigger the bugs
injected in LAVA-M is extremely simple, just satisfying the
USENIX Association
29th USENIX Security Symposium    2323
comparison of some four-byte magic bytes in some posi-
tions. However, AFL could not recognize magic bytes in the
conditional statement. Therefore, a comparison of four-byte
magic bytes will cost AFL too much energy to traverse. Some
techniques using taint tracking or symbolic execution outper-
form than AFL without a dictionary on LAVA-M [10, 38]. In
practice, the static analysis module of EcoFuzz has solved
the problem by extracting the hard-code and magic bytes in
LAVA-M. Therefore, it is an efﬁcient way to combine the low-
overhead program analysis techniques (e.g., static analysis)
with the high-speed greybox fuzzing (e.g., AFL). Finally, all
unlisted bugs found by EcoFuzz in different environments are
listed in Table 9.
Table 9: The unlisted bugs found by EcoFuzz
Program
IDs of the unlisted bugs found by EcoFuzz
base64
md5sum
uniq
who
274, 521, 526, 527
281, 287, 314, 499
227
2, 4, 6, 8, 20, 61, 63, 73, 77, 81, 85, 89, 117, 125, 165, 169, 173, 177,
181, 185, 189, 193, 197, 210, 214, 218, 222, 226, 294, 298, 303, 307,
312, 316, 321, 325, 327, 334, 336, 338, 346, 350, 355, 359, 450, 454,
459, 463, 468, 472, 477, 481, 483, 488, 492, 497, 501, 504, 506, 512,
514, 522, 526, 531, 535, 974, 975, 994, 995, 996, 1007, 1026, 1034,
1038, 1049, 1054, 1071, 1072, 1329, 1334, 1339, 1345, 1350, 1355,
1361, 1377, 1382, 1388, 1393, 1397, 1403, 1408, 1415, 1420, 1429,
1436, 1445, 1450, 1456, 1461, 1718, 1727, 1728, 1735, 1736, 1737,
1738, 1747, 1748, 1755, 1756, 1891, 1892, 1893, 1894, 1903, 1904,
1911, 1912, 1921, 1925, 1935, 1936, 1943, 1944, 1949, 1953, 1993,
1995, 1996, 2000, 2004, 2008, 2012, 2014, 2019, 2023, 2027, 2031,
2034, 2035, 2039, 2043, 2047, 2051, 2055, 2061, 2065, 2069, 2073,
2077, 2079, 2081, 2083, 2181, 2189, 2194, 2219, 2221, 2223, 2225,
2229, 2231, 2235, 2236, 2240, 2244, 2246, 2247, 2249, 2253, 2255,
2258, 2262, 2266, 2268, 2269, 2271, 2275, 2282, 2286, 2291, 2295,
2302, 2304, 2462, 2500, 2507, 2521, 2681, 2703, 2790, 2804, 2806,
2810, 2814, 2823, 2827, 2834, 2838, 2847, 2854, 2919, 2920, 2922,
3082, 3083, 3099, 3185, 3187, 3188, 3213, 3218, 3222, 3232, 3235,
3237, 3238, 3239, 3242, 3245, 3247, 3249, 3256, 3257, 3260, 3264,
3265, 3267, 3269, 3389, 3464, 3465, 3468, 3469, 3471, 3487, 3488,
3495, 3496, 3509, 3510, 3517, 3523, 3527, 3545, 3551, 3561, 3939,
4024, 4025, 4026, 4222, 4223, 4224, 4225, 4287, 4295
2324    29th USENIX Security Symposium
USENIX Association