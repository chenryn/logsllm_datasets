### 2.6*10^-3
- **Average-cost**
- **p4**
- **5.7*10^-4**
- **1.4*10^-5**
- **2.4*10^-6**
- **1.4*10^-3**
- **1.4*10^-7**
- **1.2*10^-3**
- **1.4*10^-7**
- **5.1*10^-1**
- **1.3*10^-3**
- **1.1*10^-4**
- **7.1*10^-8**
- **6.0*10^-6**
- **3.8*10^-8**
- **9.7*10^-5**
- **2.9*10^-4**
- **5.6*10^-3**
- **7.9*10^-1**
- **1.3*10^-4**
- **2.4*10^-6**
- **3.7*10^-1**
- **2.9*10^-4**
- **1.0*10^-3**
- **2.1*10^-4**
- **1.4*10^-3**
- **7.3*10^-5**
- **1.4*10^-10**
- **1.9*10^-5**
- **9.4*10^-2**
- **p5**
- **3.2*10^-3**
- **1.2*10^-2**
- **3.5*10^-2**
- **2.9*10^-1**
- **4.4*10^-7**
- **1.5*10^-4**
- **8.6*10^-5**
- **2.1*10^-3**
- **5.4*10^-2**
- **1.1*10^-4**
- **1.4*10^-6**
- **1.4*10^-8**
- **5.9*10^-5**
- **2.3*10^-3**
- **p6**
- **1.4*10^-5**
- **4.0*10^-8**
- **8.8*10^-9**
- **4.8*10^-4**
- **2.4*10^-6**
- **2.4*10^-5**
- **3.0*10^-6**
- **7.2*10^-3**
- **4.3*10^-4**
- **3.4*10^-7**
- **1.5*10^-7**
- **1.3*10^-3**
- **3.3*10^-5**
- **1.1*10^-5**

### Table 7: Maximum and Minimum of Discovered Paths in Each Evaluation

| Subjects | AFL | FidgetyAFL | FairFuzz | AFLFast | MOPT-AFL | EcoFuzz |
|----------|-----|------------|----------|---------|----------|---------|
| nm       | 2,651 / 4,074 | 3,633 / 4,238 | 5,371 / 5,840 | 2,279 / 2,644 | 3,329 / 4,786 | 2,063 / 2,320 |
| objdump  | 3,385 / 3,591 | 2,551 / 3,122 | 1,463 / 1,598 | 5,987 / 6,830 | 2,849 / 3,914 | 482 / 513 |
| readelf  | 1,000 / 1,164 | 2,691 / 2,823 | 3,197 / 7,671 | 6,952 / 7,496 | 12,118 / 14,032 | 3,285 / 3,408 |
| size     | 7,424 / 8,020 | 2,840 / 4,794 | 6,114 / 6,435 | 3,946 / 4,193 | 1,757 / 2,001 | 9,776 / 11,201 |
| cxxfilt  | 5,428 / 6,433 | 527 / 551 | 4,379 / 5,623 | 6,367 / 6,906 | 2,675 / 5,548 | 3,791 / 4,520 |
| djpeg    | 7,997 / 8,332 | 1,685 / 2,586 | 3,883 / 5,237 | 2,073 / 2,502 | 3,886 / 4,347 | 1,906 / 3,559 |
| xmllint  | 1,486 / 1,685 | 5,499 / 7,680 | 4,089 / 4,794 | 511 / 545 | 1,891 / 2,230 | 2,139 / 4,148 |

### Vulnerability Discovery

A vulnerability is triggered in the `process_DQT` function in `jpgqguess.c` and has been requested as CVE-2020-6624 by others. This vulnerability was only found by EcoFuzz, FidgetyAFL, and AFLFast.new, thus proving that EcoFuzz is more efficient than AFL and AFLFast in detecting vulnerabilities. Additionally, we recompiled and tested `tcpdump` with the ASAN model of AFL. EcoFuzz found a memory leak in the `copy_argv` function in `tcpdump.c`. Finally, we submitted these five vulnerabilities and obtained CVE-2019-17371 for the memory leak in `libpng`. All vulnerabilities are listed in Table 8.

### Table 8: Discovered Vulnerabilities

| Software           | File/Function              | Status          |
|--------------------|----------------------------|-----------------|
| Binutils-2.32      | cp-demangle.c/d_expression_1 | Acknowledged   |
| Binutils-2.32      | hash.c/bfd_hash_hash        | Patched         |
| Binutils-2.32      | bfd.c/_bfd_doprnt           | Patched         |
| Binutils-2.31      | xmalloc.c/xmalloc           | Patched         |
| Binutils-2.31      | cplus-dem.c/string_append   | Submitted       |
| Binutils-2.31      | cplus-dem.c/string_append_template_idx | Submitted |
| Binutils-2.31      | cplus-dem.c/demangle_class_name | Submitted     |
| gif2png-2.5.13     | gif2png.c/writefile         | Patched         |
| libpng-1.6.37      | pngmem.c/png_malloc_warn    | Acknowledged   |
| tcpdump-4.9.2      | tcpdump.c/copy_argv         | Acknowledged   |
| jhead-3.03         | jpgqguess.c/process_DQT     | Patched         |
| SNMP daemon        | snmp/Context::createReply   | Patched         |

### 8.3 More Analysis of Experiments on LAVA-M

In Section 5.5, we evaluate the performance of each technique on LAVA-M in general. We also point out that the comparison between EcoFuzz and Angora and VUzzer is not strict enough. Now, we provide a more in-depth and detailed analysis.

We deployed EcoFuzz on the cloud server as described in Section 5.5. After validating the bugs detected by EcoFuzz during five 5-hour runs, EcoFuzz found all listed and unlisted bugs on `base64`, `md5sum`, and `uniq`, with 48(+4), 57(+4), and 28(+1) bugs, respectively. For `who`, EcoFuzz found a total of 1,966 bugs, with 1,750 listed and 216 unlisted bugs, which are both more than those found by Angora and VUzzer. In detail, EcoFuzz detected 1,139, 1,365, 1,377, 1,450, and 1,210 bugs on `who` in each run, respectively. Since different environments can impact experimental results and there is non-negligible randomness in fuzzing, it is not objective to conclude that EcoFuzz always outperforms Angora on LAVA-M from our evaluation. In the original paper, Angora can find 1,541 bugs on `who` in one 5-hour run [10], indicating that Angora remains an efficient and state-of-the-art tool for detecting bugs in LAVA-M.

From these results, on `base64`, `md5sum`, and `uniq`, EcoFuzz found all the listed and unlisted bugs, similar to FidgetyAFL and AFLFast.new. Angora also performs well on these three programs. Furthermore, these four tools all detected numerous bugs in `who`.

Moreover, AFL-type fuzzers generally perform well on LAVA-M in dictionary mode. The way to trigger the bugs injected in LAVA-M is extremely simple, just satisfying the comparison of some four-byte magic bytes in specific positions. However, AFL cannot recognize magic bytes in conditional statements, making the comparison of four-byte magic bytes costly for AFL to traverse. Techniques using taint tracking or symbolic execution outperform AFL without a dictionary on LAVA-M [10, 38]. In practice, the static analysis module of EcoFuzz has solved this problem by extracting hard-coded and magic bytes in LAVA-M. Therefore, combining low-overhead program analysis techniques (e.g., static analysis) with high-speed greybox fuzzing (e.g., AFL) is an efficient approach. Finally, all unlisted bugs found by EcoFuzz in different environments are listed in Table 9.

### Table 9: Unlisted Bugs Found by EcoFuzz

| Program | IDs of the Unlisted Bugs Found by EcoFuzz |
|---------|-------------------------------------------|
| base64  | 274, 521, 526, 527                        |
| md5sum  | 281, 287, 314, 499                        |
| uniq    | 227                                       |
| who     | 2, 4, 6, 8, 20, 61, 63, 73, 77, 81, 85, 89, 117, 125, 165, 169, 173, 177, 181, 185, 189, 193, 197, 210, 214, 218, 222, 294, 298, 303, 307, 312, 316, 321, 325, 327, 334, 336, 338, 346, 350, 355, 359, 450, 454, 459, 463, 468, 472, 477, 481, 483, 488, 492, 497, 501, 504, 506, 512, 514, 522, 526, 531, 535, 974, 975, 994, 995, 996, 1007, 1026, 1034, 1038, 1049, 1054, 1071, 1072, 1329, 1334, 1339, 1345, 1350, 1355, 1361, 1377, 1382, 1388, 1393, 1397, 1403, 1408, 1415, 1420, 1429, 1436, 1445, 1450, 1456, 1461, 1718, 1727, 1728, 1735, 1736, 1737, 1738, 1747, 1748, 1755, 1756, 1891, 1892, 1893, 1894, 1903, 1904, 1911, 1912, 1921, 1925, 1935, 1936, 1943, 1944, 1949, 1953, 1993, 1995, 1996, 2000, 2004, 2008, 2012, 2014, 2019, 2023, 2027, 2031, 2034, 2035, 2039, 2043, 2047, 2051, 2055, 2061, 2065, 2069, 2073, 2077, 2079, 2081, 2083, 2181, 2189, 2194, 2219, 2221, 2223, 2225, 2229, 2231, 2235, 2236, 2240, 2244, 2246, 2247, 2249, 2253, 2255, 2258, 2262, 2266, 2268, 2269, 2271, 2275, 2282, 2286, 2291, 2295, 2302, 2304, 2462, 2500, 2507, 2521, 2681, 2703, 2790, 2804, 2806, 2810, 2814, 2823, 2827, 2834, 2838, 2847, 2854, 2919, 2920, 2922, 3082, 3083, 3099, 3185, 3187, 3188, 3213, 3218, 3222, 3232, 3235, 3237, 3238, 3239, 3242, 3245, 3247, 3249, 3256, 3257, 3260, 3264, 3265, 3267, 3269, 3389, 3464, 3465, 3468, 3469, 3471, 3487, 3488, 3495, 3496, 3509, 3510, 3517, 3523, 3527, 3545, 3551, 3561, 3939, 4024, 4025, 4026, 4222, 4223, 4224, 4225, 4287, 4295 |

---

This revised text is more structured, clear, and professional, with proper formatting and organization.