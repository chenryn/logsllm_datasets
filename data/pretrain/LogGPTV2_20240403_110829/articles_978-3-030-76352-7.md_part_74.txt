### XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices

#### 4.2 Data Management

In the previous section, we discussed how to send an event to the system. Now, we will explore how to indicate that a specific event is associated with a particular device and how other attributes of a device are managed.

**Devices:**
The system is designed to handle an unlimited number of devices, which can be either physical or virtual. Since the same user is responsible for registering these devices in the system, an infinite number of elements can coexist. Each device can have only one point of measurement, which is linked to a type of reading, known as the category field. Additionally, a device can be located within an area, which is an optional field called "Location." To facilitate this, an API endpoint (`/api/devices`) has been developed, which acts as an on-boarder to the system. This is achieved using a JSON schema similar to those used previously.

XYZ Monitor displays existing devices as shown in Figure 5. For each device, the system provides its name, category, the type of event it reports, and its location. On the right side of the figure, Grafana is shown reporting in real time the events being received by the device.

**Figure 5. Frontend with a Device and its Events, showing Grafana to monitor it**

**Device Categories:**
At this point, we know how to insert a device and its events into the system. However, we have not yet defined how to differentiate events from one device to another. The category field within the device component provides a clue. A Category is a set of possible types of elements defined by its name and the data type field, which is a string enumeration of the possible types of events available in the system (e.g., EventA or EventB). This is also achieved through a JSON schema and can be accessed via the endpoint (`/api/device-categories`).

**Locations:**
As mentioned, a device can be located in a specific area. The location of a device is given by a name, and there is an option to include coordinates in latlng format for precise location. This information can be accessed through the API endpoint (`/api/locations`). Similar to the previous components, this is achieved using a JSON schema.

#### 4.3 Monitoring

At this stage, our system is capable of receiving external, sensor-based information and classifying it by type of data, category, and location. To observe the data, the system is equipped with a data visualization environment for monitoring purposes.

**Figure 6** shows the visualization system, built with Grafana, displaying all the events received from the ABC-1001 device, which are of type EventA, on the date from 14:49 to 15:49 on 19/05/2020. It can be observed that data was received between 14:49-14:50, 15:16-15:18, and 15:48-15:49, while no data was received during other time ranges. The system draws a continuous line with no variation to indicate the absence of data.

**Figure 6. Grafana panel showing the Device’s Events in our system**

The graph in **Figure 6** is generated from an SQL query, specified in **Listing 1.3**. This SQL query is a traditional query against a PostgreSQL database. The advantage of running SQL queries in Grafana is that text starting with `$` represents variables, which can be sent by the browser to the system at the time of accessing the URL, allowing for dynamic generation of these graphs.

**Listing 1.3. SQL query to show Device’s data in Grafana**

```sql
SELECT event.datetime as "time",
$event_type.value,
event.device_name
FROM event
INNER JOIN device ON event.device_name = device.name
INNER JOIN $event_type ON event.id = $event_type.id
WHERE event.device_name = '$device_name'
```

#### 4.4 Business Rules

**Figure 7** shows the flow of the Business Rules to achieve notifications. This is implemented using the Node-Red tool, which works through execution flows. The entire processing of Business Rules is based on a single flow, accessible via the `/nodered` endpoint.

The execution process is as follows: every 5 seconds, a query is prepared and the database containing all the data is queried to check if any Business Rules are in an executing state. If no business rules are active or if they are not in an executing state, the flow ends. If there are active Business Rules, the system checks them one by one and executes the query against the database to check for alarms. If an alarm is detected, an email is prepared and sent through the Notification system.

A Business Rule is identified by a name and contains a query field where the designer specifies the SQL query identifying the alarm. For example: `SELECT * FROM Event WHERE device_name = 'ABC-101'`. The executing field indicates whether the Business Rule is active or temporarily stopped, serving as a status indicator. The query system uses SQL because it provides flexibility for the user. This is achieved using a JSON schema similar to the previous ones. Business rules can be specified for Device Categories, Device Locations, Devices, Events, and any combination thereof.

**Figure 7. Our flow to check Business Rules in Node-Red**

#### 4.5 Notifications

The notification system is implemented as an independent code block within the Node-Red microservice. It supports sending notifications via email to predefined recipients added to the system. These emails are sent via SMTP (Simple Mail Transfer Protocol) and contain information about the alarm, including the device, date, and values that triggered it.

**Listing 1.4. SMTP Email sample sent from our Node-Red**

```
FROM: PI:EMAIL
TO: PI:EMAIL
DATE: Wed., 29 Apr. 13:02
SUBJECT: New alarm from Node-Red
BODY:
There is an alarm, the following elements are involved:
Device: ABC-1001
Value: 0.10
Datetime: Tue Apr 29 2020 13:01:12 GMT+0200 (CEST)
```

#### 5 Experimentation

The XYZ Monitor system has been implemented under a microservices architecture, specifically using Docker and Docker-compose. An overview of the Docker recipe that makes the system work is available in Section 5.1.

The project code is open-sourced and available on GitHub at `www.github.com/worldsensing/xyz-iot-monitoring`. The project has been tested under Ubuntu 18, Linux, and should be compatible with any Linux distribution. With minor changes, it could be used on MacOS or even Windows, although this is out of the scope of the project since Worldsensing's main systems run on Linux.

Inside the repository, the steps to set up, initialize, and run the entire system are clearly stated. Everything is prepared so that the modifications required to make it work are minimal, as the scripts we have prepared take care of most of the work to set up the environment.

##### 5.1 Orchestration

A microservices architecture requires at least one file with the information about the services that will be deployed. In our case, we have written the orchestration file using Docker and Docker-compose in `.yaml` format, which contains the instructions to compose the multiple services.

**Listing 1.5. Docker-compose orchestration**

```yaml
services:
  # API Gateway - Base Image - Kong 2
  # Frontend - Custom - Nginx 1.17.9 + Alpine + React 16.13
  # Monitoring - Custom - Grafana 6.6.2
  # Business Rules - Base - Node-red
  # Backend API - Custom - Python 3.8.2 + Alpine 3.11 + Flask
  # Main Database - Base Image - PostgresQL 11.7
```

#### 6 Conclusions and Further Work

We have presented the XYZ Monitor system as an extensible solution to handle general-purpose alarms defined over different kinds of devices in an IoT environment. In our system, alarms are defined by means of business rules specified over the ontological structure of the information handled by these devices. The solution is based on a microservices architecture to facilitate the assignment of responsibilities among the components involved in alarm monitoring. Our solution is fully open-source and publicly available.

As further work, we plan to enrich the ontological structure of the information and develop techniques to incrementally compute whether an alarm has been activated. We also aim to observe how the system behaves when many devices are sending information simultaneously. The ultimate goal of this work is to put this system into practice at Worldsensing.

**Acknowledgements:**
This work is partially funded by Industrial Doctorates from Generalitat de Catalunya (DI-2019, 2017-SGR-1749), with support from inLab FIB at Universitat Politècnica de Catalunya and Worldsensing S.L. The REMEDiAL project (Ministerio de Economia, Industria y Competitividad, TIN2017-87610-R) has also contributed. We thank the anonymous reviewers for their valuable comments.

**References:**
1. Alam, M., Rufino, J., et al.: Orchestration of microservices for IoT using Docker and edge computing. IEEE Commun. Mag. 56(9), 118–123 (2018)
2. Avilés-López, E., García-Macías, J.: TinySOA: a service-oriented architecture for wireless sensor networks. Serv. Oriented Comput. Appl. 3, 99–108 (2009)
3. Butzin, B., Golatowski, F., et al.: Microservices approach for the Internet of Things. In: 21st International Conference on Emerging Technologies and Factory Automation (ETFA), pp. 1–6 (2016)
4. Cambra, C., Sendra, S., et al.: An IoT service-oriented system for agriculture monitoring. In: International Conference on Communications (ICC), pp. 1–6 (2017)
5. Caporuscio, M., Raverdy, P., et al.: ubiSOAP: a service-oriented middleware for ubiquitous networking. IEEE Trans. Serv. Comput. 5(1), 86–98 (2012)
6. Fowler, M., Lewis, J.: Microservices, a definition (2014). http://martinfowler.com/articles/microservices.html. Accessed 12 Aug 2020
7. Hassanalieragh, M., et al.: Health monitoring and management using Internet-of-Things (IoT) sensing with cloud-based processing: opportunities and challenges. In: ICSOC 2015, pp. 285–292 (2015)
8. Hossain, M.S., Muhammad, G.: Cloud-assisted industrial Internet of Things (IIoT) - enabled framework for health monitoring. Comput. Netw. 101, 192–202 (2016)
9. Issarny, V., Bouloukakis, G., Georgantas, N., Billet, B.: Revisiting service-oriented architecture for the IoT: a middleware perspective. In: Sheng, Q.Z., Stroulia, E., Tata, S., Bhiri, S. (eds.) ICSOC 2016. LNCS, vol. 9936, pp. 3–17. Springer, Cham (2016). https://doi.org/10.1007/978-3-319-46295-0_1
10. Mongiello, M., Nocera, F., et al.: A microservices-based IoT monitoring system to improve the safety in public building. In: SpliTech, pp. 1–6 (2018)
11. Montori, F., Bedogni, L., et al.: A collaborative Internet of Things architecture for smart cities and environmental monitoring. IEEE Internet Things J. 5(2), 592–605 (2018)
12. Namiot, D., Sneps-Sneppe, M.: On micro-services architecture. Int. J. Open Inf. Technol. 2(9), 24–27 (2014)
13. Newman, S.: Building Microservices, 1st edn. O’Reilly Media Inc. (2015)
14. SmartDataCollective: IoT is the most important development of the 21st century (2018). https://www.smartdatacollective.com/iot-most-important-development-of-21st-century. Accessed 06 Sept 2020
15. Soldatos, J., et al.: OpenIoT: open source Internet-of-Things in the cloud. In: Podnar Žarko, I., Pripužić, K., Serrano, M. (eds.) Interoperability and Open-Source Solutions for the Internet of Things. LNCS, vol. 9001, pp. 13–25. Springer, Cham (2015). https://doi.org/10.1007/978-3-319-16546-2_3
16. Sun, L., Li, Y., et al.: An open IoT framework based on microservices architecture. China Commun. 14(2), 154–162 (2017)
17. Vresk, T., Čavrak, I.: Architecture of an interoperable IoT platform based on microservices. In: MIPRO 2016, pp. 1196–1201 (2016)
18. Zanella, A., Bui, N., et al.: Internet of Things for smart cities. IEEE Internet Things J. 1(1), 22–32 (2014)
19. Zhao, Yu., Zou, Y., Ng, J., da Costa, D.A.: An automatic approach for transforming IoT applications to RESTful services on the cloud. In: Maximilien, M., Vallecillo, A., Wang, J., Oriol, M. (eds.) ICSOC 2017. LNCS, vol. 10601, pp. 673–689. Springer, Cham (2017). https://doi.org/10.1007/978-3-319-69035-3_49

---

### Multi-cloud Solution Design for Migrating a Portfolio of Applications to the Cloud

**Abstract:**
Migrating applications to the cloud is rapidly increasing in many organizations as it enables them to take advantage of the cloud, such as lower costs and accessibility of data. Moreover, such organizations typically try to avoid sticking to a single cloud provider and prefer to spread their applications across different providers. However, there are many challenges in achieving this. First, many of the applications that need to be moved to the cloud might be legacy applications that lack proper documentation, making it non-trivial to assess whether it is feasible to move them to the cloud. Additionally, such legacy applications might require a significant architectural overhaul. Large clients may have a significant percentage of applications in this category. Therefore, one must evaluate cloud feasibility and understand whether there is a need to re-architect the application based on what services providers can offer. Second, clients usually define multiple features, encryption/security levels, and other service level requirements they expect from the providers they will migrate their applications to. Thus, choosing the right providers for different applications is another challenging task. In this work-in-progress paper, we present a novel methodology for preparing such a cloud migration solution, where we perform text mining on application data to evaluate cloud-migration feasibility and then recommend the optimal solution using a mathematical optimization model. We illustrate our approach with an example use case.

**Keywords:**
Cloud computing, Multi-cloud, Cloud feasibility, Text mining, Cloud migration, Optimization

#### 1 Introduction and Related Work

The use of cloud computing is increasing rapidly in many organizations [1]. Moving an application to the cloud enables organizations to leverage the advantages of the cloud, such as elasticity [2], lower costs, and data accessibility. To further utilize these advantages, achieve maximum flexibility, and avoid "concentration risk" (putting too many application eggs in one cloud basket), organizations tend to spread their applications across different cloud providers. According to a recent study [3], 85% of enterprises operate in a multi-cloud environment. Different cloud vendors now enable the mix and match of cloud services across various clouds.

However, there are many challenges in achieving this. First, there are often many legacy applications that lack proper documentation, making it difficult to assess whether it is feasible to migrate them to the cloud. Additionally, these applications may require a significant architectural overhaul, which is hampered by the lack of documentation of the current architecture. Despite the momentum to shift to multi-cloud, cost-benefit analysis models illustrating the business impact of cloud adoption remain a significant risk factor [4]. It is sometimes challenging to redesign the current IT infrastructure to meet the requirements before moving to the cloud. Cloud providers charge customers on a variable, pay-as-you-go basis determined by the number of users and their volume of transactions [5]. Organizations are not readily willing to pay extra for the additional costs [6].

Second, clients typically define requirements related to service levels they expect for each of their migrated applications. Determining the cloud migration solution that meets all these requirements while still being applicable is not trivial and cannot be achieved through non-analytical/manual methods.