XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices 479
4.2 Data Management
WehaveseenhowtosendanEventtothesystem.Nextwewillseehowtoindi-
cate that a certain event is from a specific device. And how the other attributes
of a device are handled.
Devices. The system is prepared to handle an infinite amount of devices. A
device can be an element of the world as well as virtual. Infinite elements can
coexist. Since the same user is in charge of registering them in the system.
ADevice canhaveonlyonepointofmeasuring,whichiswhyitisassociated
with a type of reading, the category field. But also a Device can be located into
an Area, this field is optional and its named Location. For this purpose, an API
(/api/devices)hasbeendeveloped,itthatactsasanon-boardertothesystem.
This is achieved by means of a JSON schema similar to the previous ones.
XYZ Monitor shows the existing devices as illustrated in Fig.5. For each
device, our system provides its name, its category, the type of event it reports
and its location. Moreover, on the right side of the figure, we show how Grafana
is reporting in real time the events that are being received in that device.
Fig.5. Frontend with a Device and its Events, showing Grafana to monitor it
Device Categories. AtthispointwealreadyknowhowtoinsertaDevice and
itsEvents intooursystem.However,wehavenotyetdefinedhowtodifferentiate
Events from one Device to another. The category field inside the device com-
ponent gives us a small clue. A Category is a set of possible types of elements
defined by its name and the data type field, which is a string enumeration of
the possible types of Events available in the system (EventA or EventB). This
is achieved by means of a JSON schema similar to the previous ones and it is
accessible through the endpoint (/api/device-categories).
480 M. Vila et al.
Locations. As mentioned, a Device has the possibility of being located in one
area. The location of a device is given by a name, in addition, there is the
possibilityofincludingcoordinates,latlng,inordertohaveapreciselocation,in
latlng format. Can be accessed in the API endpoint (/api/locations). This is
achieved by means of a JSON schema similar to the previous ones.
4.3 Monitoring
Atthispoint,oursystemisableofreceivingexternal,sensor-based,information
and classify it accordingly, by type of data, category and also by its location.
To observe the data, the system has been equipped with a data visualization
environment for the sake of monitoring.
Figure6 shows the visualization system, built with Grafana /grafana. It is
displaying all the Events that have been received from the ABC-1001 device,
which are of type EventA on the date from 14:49 to 15:49 of 19/05/2020.
Itcanbeobservedthatthedatahasarrivedwellbetween14:49-14:50,15:16
- 15:18 and 15:48 - 15:49, while no data has been received for the other ranges.
The system therefore draws a continuous line with no variation between them
to note that there is no data there.
Fig.6. Grafana panel showing the Device’ Events in our system
The graph in Fig.6 is generated from an SQL query, specified in Listing1.3.
This SQL query is a traditional query against a PostgreSQL database. The
advantageofrunningSQLqueriesinGrafanaisthatthetextstartingwith$are
the variables, and these can be sent by the browser to the system at the time of
accessing the URL, which allows to dynamically generate these kind of graphs.
/grafana/device-dashboard?var-device name=ABC-1001&var-event type=event a
XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices 481
Listing 1.3. SQL query to show Device’s data in Grafana
SELECT event.datetime as ”time”,
$event type.value,
event.device name
FROM event
INNER JOIN device ON event.device name=device.name
INNER JOIN $event type ON event.id=$event type.id
WHERE event.device name = ’$device name’
4.4 Business Rules
Figure7showstheflowoftheBusinessRules toachievenotifications.Itisimple-
mented with the Node-Red tool, which works by execution flows. The whole
processing of Business Rules is based in a single flow, /nodered endpoint.
The execution is as follows: every 5s (timer box) a query is prepared (query
box)andthedatabasethatcontainsallthedataisqueried(Postgres#1box),to
checkifthereexistsanyBusiness Rules inexecuting state.Theresultischecked
to see if there are any (prep array-loop and array-loop boxes). In the case that
there is no business rule or its is not in executing state, the flow ends here. In
the case of having active Business Rules, the system checks one by one (prepare
BR query box) and executes the query against the database (Postgres #2 box)
tocheckforalarms.Ifthereisany,anemailisprepared(generateemailmessage
box) and sent through the Notification system (notification box).
A Business Rule is identified by a name and it contains a query field where
thedesignerspecifiestheSQLqueryidentifyingthealarm.Forinstance:SELECT
* FROM Event where device name = ’ABC-1001’. And the executing field is
where the Business Rule can be started or stopped temporarily, and act as an
status ofit.ThequerysystemisanSQLcall,becauseinthisway,theoptionsfor
theuserarenotlimited.ThisisachievedbymeansofaJSONschemasimilarto
the previous ones. Business rules can be specified on: Device Categories, Device
Locations, Devices, Events and any kind of combinations between them.
Fig.7. Our flow to check Business Rules in Node-Red
482 M. Vila et al.
4.5 Notifications
ThenotificationsystemhasbeenimplementedintheNode-Redmicroservice,as
an independent code block. It supports sending of notifications via email to a
predefinedrecipientaddedinthesystem.TheseemailsaresentviaSMTP(Sim-
ple Mail Transfer Protocol), and its content warns about an alarm; informing
regarding the device, the date and the values that provoked it.
Listing 1.4. SMTP Email sample sent from our Node-red
FROM: PI:EMAIL
TO: PI:EMAIL
DATE: Wed., 29 Apr. 13:02
SUBJECT: New alarm from Node−Red
BODY:
There is an alarm, the following elements are involved:
Device: ABC−1001
Value: 0.10
Datetime: Tue Apr 29 2020 13:01:12 GMT+0200 (CEST)
5 Experimentation
The XYZ Monitor system has been implemented under a microservices archi-
tecture. Specifically on Docker and Docker-compose. An overview of the Docker
recipe that makes the system work is available in Sect.5.1.
The project code is Open Sourced and it is available in GitHub, at www.
github.com/worldsensing/xyz-iot-monitoring.Theprojecthasbeentestedunder
Ubuntu18,Linux.AlthoughitshouldbecompatiblewithanyLinuxdistribution.
Making small changes, it could be used in MacOS or even Windows, but this is
out of the scope of the project since Worldsensing’ main systems run on Linux.
Inside the repository, the steps to follow to setup, initialize and run the whole
systemworkareclearlystated.Everythingispreparedsothatthemodifications
required to make it work are minimal since the scripts we have prepared take
care of most of the work to setup the environment.
5.1 Orchestration
Amicroservicesarchitecturerequireshaving,atleast,afilewiththeinformation
of the services that will be deployed. In our case, we have written the orchestra-
tion file using Docker and Docker-compose in .yaml format, that contains the
instructions to compose the multiple services2.
2 This listing is simplified a lot to avoid making it extremely long here. The actual
one can be found in the root folder of the repository.
XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices 483
Listing 1.5. Docker-compose orchestration
1 services:
2 # API Gateway - Base Image - Kong 2
3 # Frontend - Custom - Nginx 1.17.9 + Alpine + React 16.13
4 # Monitoring - Custom - Grafana 6.6.2
5 # Business Rules - Base - Node-red
6 # Backend API - Custom - Python 3.8.2 + Alpine 3.11 + Flask
7 # Main Database - Base Image - PostgresQL 11.7
6 Conclusions and Further Work
We have presented the XYZ Monitor system as an extensible solution to suc-
cessfully handle general purpose alarms defined over different kinds of devices
in an IoT environment. In our system, alarms are defined by means of business
rulesspecifiedovertheontologicalstructureoftheinformationhandledbythese
devices. The solution we have developed is based on microservices architecture,
tofacilitatetheassignmentofresponsibilitiesamongthecomponentsinvolvedin
alarm monitoring. Our solution is fully Open Source and it is publicly available.
As further work, we plan to enrich further the ontological structure of the
information and to develop techniques to incrementally compute whether an
alarm has been activated. In addition to observing how the system behaves
whentherearemanydevicessendinginformationatthesametime.Overall,the
final goal of this work is to put this system into practice at Worldsensing.
Acknowledgements. This work is partially funded by Industrial Doctorates from
Generalitat de Catalunya (DI-2019, 2017-SGR-1749). Also with the support of inLab
FIB at Universitat Polit`ecnica de Catalunya and Worldsensing S.L. The REMEDiAL
project (Ministerio de Economia, Industria y Competitividad, TIN2017-87610-R) has
also contributed. We thank the anonymous reviewers for their valuable comments.
References
1. Alam, M., Rufino, J., et al.: Orchestration of microservices for IoT using Docker
and edge computing. IEEE Commun. Mag. 56(9), 118–123 (2018)
2. Avil´es-L´opez, E., Garc´ıa-Mac´ıas, J.: TinySOA: a service-oriented architecture for
wireless sensor networks. Serv. Oriented Comput. Appl. 3, 99–108 (2009)
3. Butzin,B.,Golatowski,F.,etal.:MicroservicesapproachfortheInternetofThings.
In:21stInternationalConferenceonEmergingTechnologiesandFactoryAutoma-
tion (ETFA), pp. 1–6 (2016)
4. Cambra,C.,Sendra,S.,etal.:AnIoTservice-orientedsystemforagriculturemon-
itoring. In: International Conference on Communications (ICC), pp. 1–6 (2017)
5. Caporuscio, M., Raverdy, P., et al.: ubiSOAP: a service-oriented middleware for
ubiquitous networking. IEEE Trans. Serv. Comput. 5(1), 86–98 (2012)
6. Fowler,M.,Lewis,J.:Microservices,adefinition(2014).http://martinfowler.com/
articles/microservices.html. Accessed 12 Aug 2020
7. Hassanalieragh, M., et al.: Health monitoring and management using Internet-of-
Things (IoT) sensing with cloud-based processing: opportunities and challenges.
In: ICSOC 2015, pp. 285–292 (2015)
484 M. Vila et al.
8. Hossain,M.S.,Muhammad,G.:Cloud-assistedindustrialInternetofThings(IIoT)
- enabled framework for health monitoring. Comput. Netw. 101, 192–202 (2016)
9. Issarny,V.,Bouloukakis,G.,Georgantas,N.,Billet,B.:Revisitingservice-oriented
architecture for the IoT: a middleware perspective. In: Sheng, Q.Z., Stroulia, E.,
Tata,S.,Bhiri,S.(eds.)ICSOC2016.LNCS,vol.9936,pp.3–17.Springer,Cham
(2016). https://doi.org/10.1007/978-3-319-46295-0 1
10. Mongiello,M.,Nocera,F.,etal.:Amicroservices-basedIoTmonitoringsystemto
improve the safety in public building. In: SpliTech, pp. 1–6 (2018)
11. Montori,F.,Bedogni,L.,etal.:AcollaborativeInternetofThingsarchitecturefor
smartcitiesandenvironmentalmonitoring.IEEEInternetThingsJ.5(2),592–605
(2018)
12. Namiot, D., Sneps-Sneppe, M.: On micro-services architecture. Int. J. Open Inf.
Technol. 2(9), 24–27 (2014)
13. Newman, S.: Building Microservices, 1st edn. O’Reilly Media Inc. (2015)
14. SmartDataCollective: IoT is the most important development of the 21st century
(2018). https://www.smartdatacollective.com/iot-most-important-development-
of-21st-century. Accessed 06 Sept 2020
15. Soldatos, J., et al.: OpenIoT: open source Internet-of-Things in the cloud. In:
PodnarZˇarko,I.,Pripuˇzi´c,K.,Serrano,M.(eds.)InteroperabilityandOpen-Source
Solutions for the Internet of Things. LNCS, vol. 9001, pp. 13–25. Springer, Cham
(2015). https://doi.org/10.1007/978-3-319-16546-2 3
16. Sun,L.,Li,Y.,etal.:AnopenIoTframeworkbasedonmicroservicesarchitecture.
China Commun. 14(2), 154–162 (2017)
17. Vresk, T., Cˇavrak, I.: Architecture of an interoperable IoT platform based on
microservices. In: MIPRO 2016, pp. 1196–1201 (2016)
18. Zanella, A., Bui, N., et al.: Internet of Things for smart cities. IEEE Internet
Things J. 1(1), 22–32 (2014)
19. Zhao, Yu., Zou, Y., Ng, J., da Costa, D.A.: An automatic approach for trans-
forming IoT applications to RESTful services on the cloud. In: Maximilien, M.,
Vallecillo,A.,Wang,J.,Oriol,M.(eds.)ICSOC2017.LNCS,vol.10601,pp.673–
689. Springer, Cham (2017). https://doi.org/10.1007/978-3-319-69035-3 49
Multi-cloud Solution Design for Migrating
a Portfolio of Applications to the Cloud
B
ShubhiAsthana1( ),AlyMegahed1,andIlyasIyoob2
1 IBMResearch-Almaden,SanJose,CA,USA
{sasthan,aly.megahed}@us.ibm.com
2 IBMServices,Austin,TX,USA
PI:EMAIL
Abstract. Migratingapplicationstothecloudisrapidlyincreasinginmanyorga-
nizations as it enables them to take advantages of the cloud, such as the lower
costsandaccessibilityofdata.Moreover,suchorganizationstypicallytrytoavoid
stickingtoasinglecloudproviderandratherprefertobeabletospreadouttheir
applications across different providers. However, there are many challenges in
achievingthis.First,manyoftheapplicationsthatarerequiredtobemovedto
thecloudmightbelegacyapplicationsthatdonothavegooddocumentation,and
soitisnottrivialtoevenassesswhetheritisfeasibletomovethemtothecloud
ornot.Moreover,suchlegacyapplicationsmightneedasignificantarchitecture
overhaultoachievethetaskofmovingthemtothecloud.Largeclientmayhave
significant percentage of applications in this category. So, one has to evaluate
cloudfeasibilityandunderstandwhetherthereisaneedtore-architectapplication
basedonwhatservicesprovidersareabletooffer.Second,clientsusuallydefine
multiplefeatures,encryption/securitylevel,andotherservicelevelrequirements
theyexpectintheproviderstheywillmigrateeachoftheirapplicationsto.Thus,
choosingtherightprovidersfordifferentapplicationisanotherchallengingtask
here.Inthiswork-in-progresspaper,wepresentanovelmethodologyforprepar-
ingsuchacloudmigrationsolution,whereweperformtextminingonapplication
datatoevaluatecloud-migrationfeasibilityandthenrecommendtheoptimalsolu-
tionusingamathematicaloptimizationmodel.Weillustrateourapproachwithan
exampleusecase.
Keywords: Cloudcomputing·Multi-cloud·Cloudfeasibility·Textmining·
Cloudmigration·Optimization
1 IntroductionandRelatedWork
The use of cloud computing is increasing rapidly in many organizations [1]. Moving
an application to the cloud enables organization to make use of the advantages of the
cloud like elasticity [2], lower costs, and accessibility of data. To further utilize these
advantages, achieve maximum flexibility, and avoid “concentration risk” (putting too
manyapplicationeggsinonecloudbasket),organizationsrecentlytendtospreadtheir
applications across different cloud provider. According to a recent study [3], 85% of
©SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.485–494,2021.
https://doi.org/10.1007/978-3-030-76352-7_44
486 S.Asthanaetal.
enterprisesoperateinamulti-cloudenvironment.Thatiswhydifferentcloudvendors
nowadaysareenablingmixandmatchofcloudservicesacrossdifferentclouds.
However,therearemanychallengesinachievingthis.First,thereareusuallyalot
oflegacyapplicationsthatlackproperdocumentation.Thismakesithardtoevenassess
whetheritisfeasibletomigratesuchapplicationstothecloudornot.Also,sometimes
theseapplicationsrequireanoverallarchitectureoverhaul,whichagain,sufferfromthe
lackofdocumentationofthecurrentarchitecture.Despitetomomentumtoshifttomulti
cloud,thecost-benefitanalysismodelsillustratingthebusinessimpactofcloudadoption
arestillasignificantriskfactor[4].Itissometimeschallengingtoredesignthecurrent
ITinfrastructuretomeettherequirementbeforemovingtothecloud.Cloudproviders
chargecustomersonavariablecostpay-as-you-gobasisdeterminedbythenumberof
usersandtheirvolumeoftransactions[5].Organizationsarenotreadilywillingtopay
extrafortheadditionalcost[6].
Second, clients typically define requirements related to service levels they expect
foreach oftheirmigratedapplications. Determining thecloud migrationsolutionthat
agrees to all these requirements while still be applicable, is not trivial and cannot be
achievedbynon-analytical/manualways.