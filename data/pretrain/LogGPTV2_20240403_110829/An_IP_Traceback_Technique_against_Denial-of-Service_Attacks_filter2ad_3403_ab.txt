x
1
n
x
2
...
−
1
n
x
n
(cid:186)
(cid:187)
(cid:187)
(cid:187)
(cid:187)
(cid:187)
(cid:188)
A
1
A
2
...
nA
(cid:170)
(cid:171)
(cid:171)
(cid:171)
(cid:171)
(cid:172)
(cid:186)
(cid:187)
(cid:187)
(cid:187)
(cid:187)
(cid:188)
=
y
1
y
2
...
ny
(cid:170)
(cid:171)
(cid:171)
(cid:171)
(cid:171)
(cid:172)
(cid:186)
(cid:187)
(cid:187)
(cid:187)
(cid:187)
(cid:188)
The above equation is a matrix equation (or system of 
equations)  with  Vandermonde  matrix  coefficient.  In 
Linear  Algebra, there is a theorem stating that  the  above 
matrix equation, with Ai’s unknown, has a unique solution 
if  and  only  if  the  xi’s  are  distinct  [4].  By  applying  field 
theory  to  the  above  theorem,  we  can  obtain  a  similar 
theorem over GF(p), where GF denotes Galios Field and p
is a prime number if the xi’s and yi’s are elements in GF(p)
[8].
4.3.2. Reflective algebraic marking scheme 
Our  reflective  algebraic  marking  scheme  consists  of 
three  algorithms:  marking,  reflection,  and  reconstruction, 
deployed  on 
the  reflectors  and  victim 
respectively.  The  reflection  algorithm  is  employed  to 
handle reflector attacks. 
the  routers, 
The  information  recorded  in  each  marked  packet 
includes three integer values in the IP header: x, distance
and Fullpath; where x is a packet related value; distance is 
the  distance  between  the  router  which  first  marks  this 
packet and the victim. In light of the technique of Dean et
al.[1]  for  reducing  the  value  of  Fullpath,  we  split  the  IP 
address of a router  Ri into  c  identical  fragments,  and  use 
Ai,j (j = 1, 2, … , c) to denote the value of each fragment. 
For  example,  if  router  R1’s  IP  is  137.189.89.101  and  we 
split it into 4 (c = 4) chunks, then A1,1 = 137, A1,2 = 189, 
A1,3  =  89,  A1,4  =  101.  And  the  value  of  Fullpath  can  be 
computed as follows: 
+
(
A
1,1
5
xA
xAxA
2,1
3,1
+
+
+
xA
xA
4,1
7
)
+
mod
xA
1,2
,
p
Fullpath
=
+
2
3
4
+
xA
3,2
6
2,2
4,2
where Ai,j’s (i =1, 2; j = 1, 2, 3, 4) form the IP addresses 
of  two  adjacent  routers,  and  p  is  the  smallest  prime 
number larger than 255 (=28 – 1), i.e. 257. If the router is 
adjacent to the victim, the last 4 terms of Fullpath should 
be  omitted.  The  purpose  of  “mod p”  in  the  above 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:38 UTC from IEEE Xplore.  Restrictions apply. 
formulation  is  to  reduce  the  value  of  Fullpath  so  that  it 
would occupy fewer bits in the IP header. Considering the 
bits needed to store the Fullpath value and the attack paths 
reconstruction  time,  letting  c  equal  to  4  is  an  eclectic 
choice.  Figure 2 depicts the marking algorithm for c = 4 
and we also use c = 4 in the following sections. 
Marking procedure in router R 
for each packet P { 
generate a random number u [0, 1) ; 
if (u ≤ q ) {
/* q is the marking probability adopted by all the routers 
and the victim */ 
P.distance = 0; 
randomly select an integer x from 0 to 7; 
P.x = x ; 
Fullpath = (A1,1 + A1,2x + A1,3x2 + A1,4x3) mod p;
// each packet P is associated with a value x
}
else { 
if (P.distance == 0) { 
Fullpath = (Fullpath + A1,1x4+ A1,2x5
+ A1,3x6 + A1,4x7) mod p;
// x is recorded in the packet by an upstream router 
P.distance = P.distance + 1;  
}
else if (P.distance > 0) P.distance = P.distance + 1; 
     else call error_handler; 
}
}
Figure 2. Marking algorithm. 
packet P:
Fullpath(F), distance(d)
(u ≤ q)
F = v, d = 0
(u > q & d = 0)
F += vx4, d += 1
R’
R
u>q & d = 0, then let F = F + vx4, d = d + 1; if u > q & d > 
0,  then  increment  the  distance  d  by  1.  To  make  the 
presentation  concise  in  the  diagram,  we  have  omitted 
applying “mod p” to F here. 
To  resolve  the  information  loss  problem  caused  by 
reflection,  we  copy  the  marked  information  in  each 
incoming request packet to the outgoing reply packet; this 
operation  is  carried  out  through  the  reflection  procedure 
by each reflector. Note that the number of request packets 
and  the  number  of  reply  packets  are  asymmetric.  For 
example, the number of packets in a GET request message 
of  FTP  is  small,  but  those  in  the  reply  message  may  be 
large.  For  this  reason,  a  simple  copy  operation  for  the 
marked information may not work. One possible method is 
to use a table to store the marked information; the reflector 
simply  collects  the  marked  information  in  the  table  and 
copies  the  relevant  marked  information  to  outgoing 
packets. 
Reflection algorithm: 
let H be a hash table; 
let mark be the tuple(Fullpath, distance, x);
//mark stands for marked information in a packet 
let entry in H be a tuple(address, mark, count);      
/*  address  is  for  storing  IP  address  and  count  is  an  integer 
initiated as 0, H is sorted by address, then distance, and then x */ 
Storing marked information at Reflector Rf:
for each incoming request packet w
if H doesn’t contain (w.source, w.mark, _) 
insert into H (w.source, w.mark.distance, 0); 
// source is for storing the source IP address of packet w
Copy operation at Reflector Rf:
for each outgoing reply packet w
    if H contains (w.destination, _, _) { 
select  an  entry  e  of  the  form  (w.destination,_,_)  in  H
whose count is the smallest and distance is the smallest;  
write e.mark into w.mark; 
increase e.count by 1; 
if (count == bound) delete e1;
// bound = ln(32)/(p(1-p)31)
    } 
(u > q & d >0)
d +=1
Figure 4. Reflection algorithm. 
Figure  3.  Marking  illustration.  F  and  d denote  Fullpath  and 
distance  respectively, v  =  A1,1  +  A1,2x  + A1,3x2  + A1,4x3, R’  is  an 
upstream router of R.
Figure  3  illustrates  the  marking  procedure;  F  and  d
denote Fullpath and distance respectively; v represents the 
value of A1,1 + A1,2x + A1,3x2 + A1,4x3, where A1,i’s (i = 1, 2, 
3,  4)  are  the  4  fragments  of  the  relevant  router’s  IP 
address.  When  router  R  receives  a  packet  from  its 
upstream  router  R’,  it  first  generates  a  random  number  u
and does the marking depending on u and  the  distance  d
recorded in the packet. If u ≤ q, then let F =  v, d = 0; if 
Figure 4 outlines the reflection algorithm. It consists of 
two  procedures  for  storing  marked  information  and 
copying  marked  information  to  reply  packets.  These  two 
procedures share statistics of a hash table  H. The  storing 
procedure  keeps  an  incoming  request  packet’s  marked 
information in the table H with the source address as a key. 
Packets with identical marked information are stored only 
once. The copy procedure copies the marked information 
to  an  outgoing  reply  packet  from  the  record  in  H whose 
address  matches  the  packet’s  destination  address.  The 
copy  operation  is  carried  out  only  when  the  count  of  the 
record  to  be  copied  is  less  than  a  certain  upper  bound, 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:51:38 UTC from IEEE Xplore.  Restrictions apply. 
since the number of packets X  required  for  the  victim  to 
reconstruct a path of length  d has  the  following  bounded 
expectation [2]: 
XE
(
)
<
ln(
−
1(
)
d
dp
)
p
.
1−
As analyzed in section V, we can set the maximum value 
of d as 32. Therefore, the upper bound can be set as: 
bound
=
ln(
)32
−
31p
)
1(
p
.
We  also  set  an  expiration  time  parameter  T  for  the 
maintenance  of  table  H.  If  all  records  of  a  certain  IP 
address have not been visited in the past period  T, it can 
be  assumed  that  all  the  relevant  packets  replied  to  that 
address have been sent out and we therefore delete them. 
The value of T shall be set according to the configuration 
of specific reflector.  
In this algorithm, it is necessary to distinguish request 
and  reply  packets,  which  requires  connection  tracking
technique  [12].  Most  existing  filtering  architectures 
provide  such  connection  tracking  feature,  which  will  not 
be elaborated here. 
When  8  (or  4)  packets  with  distinct  x’s  arrive  at  the 
victim, the victim can solve the relevant matrix equation in 
section 4.3.1 to obtain the IP addresses (or address) of two 
adjacent routers (or the nearest router to the victim) in the 
attack path. Therefore, we use a set of 8 distinct x’s (0-7) 
to  do  the  marking.  The  mandatory  increment  of  the 
distance  field  is  used  to  avoid  spoofing  by  an  attacker, 
thus  ensures  the  robustness  of  our  scheme.  For  attack 
paths  reconstruction,  we  use  a  method  similar  to  edge 
sampling  [7]  to  reconstruct  the  attack  path  hop  by  hop. 
However, we are not sure about how to group the packets 
coming from the same path. It will certainly involve a high 
computation if we check all possible combinations of the 
marked  packets  similar  to  the  probabilistic  marking 
scheme  [7].  Therefore,  we  resort  to  using  an  upstream 
routers map of the victim to simplify paths reconstruction. 
As  pointed  out  by  Song  and  Perrig,  it  is  quite  easy  to 
obtain  and  maintain  such  an  upstream  routers  map  [9]. 
After receiving enough packets, the victim can reconstruct 
all the attack paths by the algorithm as outlined in Figure 5. 
Reconstruction algorithm 
let M denote the upstream routers map; 
let  G  denote  the  reconstructed  attack  paths  graph  and  be 
initialized with only one node V for the victim; 
group all marked packets by distance;
group each set of packets by x values; 
let Pd denote the set of packets marked with distance d (0 ≤ d ≤
maxd) and Xk denote the packet subset of Pd with x = k;
let maxd be the distance from the furthest attacker to the victim;  
for every direct upstream router R of V in M { 
count = 0; k = 0; 