title:BlockSci: Design and applications of a blockchain analysis platform
author:Harry A. Kalodner and
Malte M&quot;oser and
Kevin Lee and
Steven Goldfeder and
Martin Plattner and
Alishah Chator and
Arvind Narayanan
BlockSci: Design and applications of a 
blockchain analysis platform
Harry Kalodner, Malte Möser, and Kevin Lee, Princeton University; 
Steven Goldfeder, Cornell Tech; Martin Plattner, University of Innsbruck; 
Alishah Chator, Johns Hopkins University; Arvind Narayanan, Princeton University
https://www.usenix.org/conference/usenixsecurity20/presentation/kalodner
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.BlockSci: Design and applications of a blockchain
analysis platform
Harry Kalodner∗
Princeton University
Malte Möser∗
Princeton University
Kevin Lee
Princeton University
Steven Goldfeder
Cornell Tech
Martin Plattner
University of Innsbruck
Alishah Chator
Johns Hopkins University
Arvind Narayanan
Princeton University
Abstract
Analysis of blockchain data is useful for both scientiﬁc re-
search and commercial applications. We present BlockSci,
an open-source software platform for blockchain analysis.
BlockSci is versatile in its support for different blockchains
and analysis tasks. It incorporates an in-memory, analytical
(rather than transactional) database, making it orders of mag-
nitudes faster than using general-purpose graph databases. We
describe BlockSci’s design and present four analyses that il-
lustrate its capabilities, shedding light on the security, privacy,
and economics of cryptocurrencies.
1 Introduction
Public blockchains constitute an unprecedented research cor-
pus of ﬁnancial transactions. Bitcoin’s blockchain alone is
260 GB as of December 2019.1 This data holds the key to
measuring the privacy of cryptocurrencies in practice, study-
ing user behavior with regards to security and economics,
or understanding the non-currency applications that use the
blockchain as a database.
We present BlockSci, a software platform that enables the
science of blockchains. It addresses three pain points of ex-
isting tools: poor performance, limited capabilities, and a
cumbersome programming interface. Compared to the use
of general-purpose graph databases, BlockSci is hundreds of
times faster for sequential queries and substantially faster for
all queries, including graph traversal queries. It comes bun-
dled with analytic modules such as address clustering, exposes
different blockchains through a common interface, collects
“mempool” state and imports exchange rate data, and gives
the programmer a choice of interfaces: a Jupyter notebook for
intuitive exploration and C++ for performance-critical tasks.
In contrast to commercial tools, BlockSci is not tailored to
speciﬁc use cases such as criminal investigations or insights
∗These authors contributed equally to this work.
1All numbers in this paper are current as of December 2019, and analyses
of the Bitcoin blockchain as of block height 610,695, unless stated otherwise.
for cryptocurrency traders. Instead, by providing efﬁcient and
convenient programmatic access to the full blockchain data,
it enables a wide range of reproducible, scientiﬁc analyses.
BlockSci’s design starts with the observation that
blockchains are append-only databases; further, the snapshots
used for research are static. Thus, the ACID properties of
transactional databases are unnecessary. This makes an in-
memory analytical database the natural choice. On top of
the obvious speed gains of memory, we apply a number of
tricks such as converting hash pointers to actual pointers and
deduplicating address data, which further greatly increase
speed and decrease the size of the data. We plan to scale
vertically as blockchains grow, and we expect that this will
be straightforward for the foreseeable future, as commodity
cloud instances currently offer up to a hundred times more
memory than required for loading and analyzing Bitcoin’s
blockchain. Avoiding distributed processing is further moti-
vated by the fact that blockchain data is graph-structured, and
thus hard to partition effectively. In fact, we conjecture that
the use of a traditional, distributed transactional database for
blockchain analysis has inﬁnite COST (Conﬁguration that
Outperforms a Single Thread) [1], in the sense that no level
of parallelism can outperform an optimized single-threaded
implementation.
BlockSci comes with batteries included. First, it is not
limited to Bitcoin: a parsing step converts a variety of
blockchains into a common, compact format. Currently sup-
ported blockchains include Bitcoin, Bitcoin Cash, Bitcoin
SV, Litecoin, and Zcash (Section 2.1). A multi-chain mode
optimizes for user-friendly and memory-efﬁcient analyses of
forked blockchains together with their parent chain. Smart
contract platforms such as Ethereum are outside our scope.
Second, BlockSci includes a library of useful analytic tools,
such as identifying special transactions (e.g., CoinJoin) and
linking addresses to each other based on well-known heuris-
tics, including across forked chains (Section 2.4). Third,
BlockSci can record the time of transaction broadcasts on
the peer-to-peer network and expose them through the same
interface. Similarly, we make (historical and current) data on
USENIX Association
29th USENIX Security Symposium    2721
the exchange rates between cryptocurrencies and ﬁat curren-
cies readily available. These allow many types of analyses
that wouldn’t be possible with blockchain data alone.
The analyst begins exploring the blockchain through a
Jupyter notebook interface (Section 2.5), which initially ex-
poses a chain object, representing the entire blockchain.
Startup is instantaneous because transaction objects are not
initially instantiated, but only when accessed. Iterating over
blocks and transactions is straightforward, as illustrated by
the following query, which computes the average fee paid by
transactions in each block mined in December 2019:
fees = [ mean ( tx . fee for tx in block ) for
block in chain . range ( ’Dec 2019 ’)]
This interface is suitable for exploration, but for analyses re-
quiring high performance, BlockSci also has a C++ interface.
For many tasks, most of the code can be written in Python us-
ing a “ﬂuent interface”, an API design pattern that combines
expressiveness and high performance (Section 2.5).
In Section 3 we present four applications to illustrate the
capabilities of BlockSci. First, we show how multisignatures
have the unfortunate effect of weakening conﬁdentiality by
exposing the details of access control on the blockchain, and
hurting the privacy of users who do not use them (Section 3.1).
Next, we study how users’ cash-out behavior after the Bitcoin
Cash hard fork hurt their privacy (Section 3.2) and ﬁnd pat-
terns of key reuse that may put users’ funds at elevated risk.
Turning to economics, we analyze Bitcoin Core’s fee estima-
tion’s algorithm (Section 3.3), and ﬁnd it relatively ineffective
for predicting waiting times due to the inherent uncertainty
of proof-of-work. Finally, we provide improved estimates
of the velocity of cryptocurrencies, i.e., the frequency with
which coins change possession (Section 3.4). This helps us
understand their use as a store of value versus a medium of
exchange.
2 Design and architecture
Figure 1 shows an overview of BlockSci’s architecture. There
are two routes for importing data into BlockSci (Section 2.1).
Through either route, the data is converted by the parser (Sec-
tion 2.2) into the BlockSci Data (Section 2.3), which can be
incrementally updated as new blocks come in. The analysis
library (Section 2.4) loads this data as an in-memory database,
which the user can either query directly (in C++) or through
a Jupyter notebook interface (Section 2.5).
A recurring theme in this section is that since BlockSci is
a domain-speciﬁc database, we are able to make assumptions
about the schema and the workload that allow us to achieve
large performance gains and an expressive interface. Both
this broad lesson and some of our speciﬁc optimizations may
be applicable to other domains.
2.1 Recording and importing data
Design decision: which blockchains should BlockSci sup-
port? There are hundreds of blockchains, some of which
differ from Bitcoin in minor ways and others drastically. As
we aim to provide a common interface for the analysis of all
supported blockchains, supporting too few blockchains (e.g.,
just Bitcoin) limits usefulness, but supporting too many dif-
ferent blockchains would complicate the interface and make
optimizations harder.
Recall that the Bitcoin blockchain consists primarily of a
directed acyclic graph of transactions. The edges connecting
transactions have attributes, i.e., addresses or scripts, attached
to them. Transactions are grouped into blocks which are ar-
ranged in a linear chain, with a small amount of metadata per
block. BlockSci supports blockchains that follow this basic
structure. For example, Litecoin makes no changes to the data
structure, and is thus fully supported. Cryptocurrencies that
introduce changes to the script operations may be supported
only partially, but the user can parse unknown scripts with a
few lines of code. Zcash is also supported, at least to the extent
that Zcash blockchain analysis is even possible: it introduces
a complex script that includes zero-knowledge proofs, but
these aspects are parceled away in a special type of address
that is not publicly legible by design.
An example of an unsupported blockchain is Monero, as it
doesn’t follow the “each input spends one output” paradigm.
Its transaction graph contains additional edges, the mixins.
Supporting it would require changes to the data layout as well
as the programmer interface. Similarly, Ethereum departs
from the transaction-graph model, and further, its script is
vastly different from and more complex than that of Bitcoin.
In our analyses we have worked with six blockchains: Bit-
coin, Bitcoin Cash, Litecoin, Namecoin, Dash, and Zcash.
Many other cryptocurrencies make no changes to the
blockchain format, and so should be supported with no
changes to BlockSci.
Multi-chain mode. By default, BlockSci operates on a sin-
gle blockchain. We also provide a multi-chain mode in which
several forked chains (e.g., Bitcoin ≺ Bitcoin Cash ≺ Bitcoin
SV) can be combined in an optimized, memory-efﬁcient multi-
chain conﬁguration. In this mode, data common to forked
chains (such as pre-fork transactions) need to be loaded into
memory only once. Address data is deduplicated across forks,
allowing for novel cross-chain analyses.
Importer. For cryptocurrencies with small blockchains
where import performance is not a concern, we use the JSON-
RPC interface. The advantage of this approach is versatility,
as many cryptocurrencies aim to conform to a standard JSON-
RPC schema regardless of the on-disk data structures and
serialization format. For larger blockchains (currently only
Bitcoin and its forks are large enough for import performance
to be a concern), we use our own high-performance importer
that directly reads the raw data on disk.
2722    29th USENIX Security Symposium
USENIX Association
Full Node Software
BlockSci
Network
P2P
node
JSON-RPC
importer
blockchain
Raw
data
Custom
importer
Transaction graph
Parser
Scripts & additional data
Indexes
BlockSci Data
P2P data
Price data
Address tags
User-supplied data
Analysis
library
Notebook
interface
Figure 1: Overview of BlockSci’s architecture.
Mempool recorder. BlockSci can optionally record mem-
pool data, that is, timestamps of transactions that are broad-
cast to the P2P network and are waiting to be included in the
blockchain. The waiting time of included transactions pro-
vides valuable data for economic analyses and isn’t recorded
in the blockchain itself. When users choose to collect these
timestamps, they are accessible through the same interface as
all other blockchain data.
2.2 Parser
Implementation challenge: optimizing the parser. The on-
disk format of blockchains is not very usable for analysis. It
is optimized for a different set of goals, such as transaction
validation and data retrieval in a distributed network. Bitcoin
Core and similar clients minimize memory consumption and
store blocks in raw network format on disk, whereas we aim
for a representation of the data that can ﬁt in memory. Given
that a data transformation is necessary, we describe the design
and optimization of the parser that handles this step.
Parsing is sequential and stateful. The blockchain must
be processed sequentially as two types of state are required
for the transformation: one is to link a transaction’s inputs
to outputs of prior transactions, and the other is to link input-
s/outputs to addresses. Each transaction input speciﬁes which
output it spends, encoded as (transaction hash, output index).
The parser assigns an ID to every transaction and stores infor-
mation for every unspent output (UTXO), including the hash
→ ID mapping. Similarly, it must assign IDs to addresses and
maintain this mapping for linking and deduplication.
In Bitcoin, transactions spending outputs of other transac-
tions in the same block must appear after them. Other cryp-
tocurrencies, however, violate this rule. Bitcoin Cash uses
canonical transaction ordering (CTOR) within each block,
i.e., based on their hash. Thus, to process a block, the parser
processes transactions in multiple passes: it ﬁrst identiﬁes all
transactions in a block before it can correctly link transaction
inputs to the outputs spent. This allows the parser to tolerate
an arbitrary ordering of transactions within each block.
UTXOs can be removed from the parser state after they
have been spent. Address mapping, however, allows no such
optimization. Any address may be used by any output and
thus all addresses must be tracked at all times. Storing the
map in memory would require too much memory, and storing
it on disk would make the parser too slow.
Optimization: Bloom ﬁlters and address caches. To
achieve further optimizations, we observe that the vast ma-
jority of inputs spend recently created outputs (e.g., 88 % of
inputs spend outputs created in the last 4000 blocks). And
only 8.6 % of Bitcoin addresses are used more than once, but
those account for 51 % of all occurrences. This motivates the
following trade-off between speed and memory consumption:
1. A bloom ﬁlter (a probabilistic data structure that allows
testing membership in a set) stores all seen addresses.
Recall that negative results from a bloom ﬁlter are al-
ways correct, whereas there is a small chance of false
positives. This ensures correctness of lookups for exist-
ing addresses while minimizing the number of database
queries for nonexistent ones.
3. Address hashes are stored in a key-value database on disk
(RocksDB [2]), with a default cache that has a Least Re-
cently Used (LRU) replacement policy. New entries are
cached before being written to the database in batches.
Shared state across chains. In multi-chain mode, the
parser processes all—parent and forked—chains sequentially.
It shares and reuses parser states across chains, such as the
bloom ﬁlter of seen addresses. By sharing a single database,
address data is deduplicated across forked chains.
2. A multi-use address cache contains (and does not evict)
all addresses that have been used multiple times.
USENIX Association
29th USENIX Security Symposium    2723
Description
Real size
Base size
Locktime
Input count
Output count
Inputs
. . .
Outputs
. . .
Bits
32
32
32
16
16
128
(each)
128
(each)
Description
Spent tx ID
Address ID
Value
Address type
Description
Spending tx ID
Address ID
Value
Address type
Bits
32
32