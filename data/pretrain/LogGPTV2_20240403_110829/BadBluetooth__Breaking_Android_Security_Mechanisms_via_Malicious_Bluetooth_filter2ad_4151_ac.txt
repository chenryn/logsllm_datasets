Object Push
Advanced Audio Distribution
Audio/Video Remote Control
Device ID
Health Device
Serial Port
Keyboard
Network Hotspot
Wireless Headset
Car Kit
Car Kit
Car Kit
File Transfer
Wireless Speaker
Remote Media Controller
Extra Device Information
Blood Pressure Kit
App-speciﬁc
Keyboard
Mouse
Modiﬁer Key
Button Array
X Relative
Regular Keys
Y Relative
Wheel
receive the input and handle it. As such, our attack breaks the
app sandbox mechanism.
HID Report. When advertising the HID service, the SDP
record contains a particular attribute - HID descriptor which
tells the client (i.e., the phone) how to parse the payload packet.
After the connection is established, the device could send a
certain type HID report to generate a global input event on
the phone.
In our attack, we leverage the HID descriptor to support
standard mouse and keyboard functions on attack device. The
corresponding HID report data format is shown in Table III.
In a HID report, the header speciﬁes the report type, and
the remaining bytes are the payload. For keyboard data, the
payload has several key bytes and one byte bit-array for
modiﬁer keys like “Right Control” key. For mouse data, the
payload contains X-Y axis, wheel movement data and an
extra button bit-array. Later on, we can specify these ﬁelds
to perform our attacks.
Fig. 4: HID Attack. The external device can inject input events.
The malicious app could steal sensitive data with the help of
the device.
Attack Strategy. Next, to construct a real attack, we still need
to address some technical challenges. Below we describe the
challenges and our strategies to tackle them:
could be leveraged – Human Interface Device (HID), Personal
Area Networking (PAN), and Hands-Free/Headset (HFP/HSP).
In the following, we introduce their capabilities and the attack
scenarios enabled by abusing them.
Demo. The following attacks are demonstrated with demos
posted at https://sites.google.com/view/bluetoothvul/. We used
Google Pixel 2 equipped with Android 8.1 in the demo.
A. Human Interface Device
The Human Interface Device (HID) Proﬁle enables the
functionality of input devices like keyboard or mouse connect-
ing to a phone. It is designed to facilitate the user to operate her
phone with an external input device. For example, some people
may project their phones to an external monitor and type text
on it. With this capability equipped, a Bluetooth device is able
to perform nearly any operations a real user can do on the
phone. More speciﬁcally, Android provides the fully functional
keyboard and pointing device (e.g., mouse) support through
HID [3], and we can construct a input sequence equivalent to
any user action (e.g., mouse click can be treated as user touch).
Figure 4 illustrates the ﬂow of our attack. The Bluetooth
device plays the acceptor role which is responsible for broad-
casting SDP services. The installed malicious app initiates the
connection process to connect the HID proﬁle on the remote
device. After the connection is established, this device gains
full control over the input channel by sending HID reports.
To notice, the input from the device is global to the Android
phone, meaning that any running app and home screen can
•
•
7
Adaptive Attack. To position the mouse precisely on
the targeted item, a challenge here is to determine
the position of mouse pointer. Since different phone
brands and Android versions usually have different UI
layout, in attack phase 3, the malicious app will also
collect the UI information via android.os.Build
and notify the device to activate the matched payload.
On the other hand, the attack device itself can also
retrieve phone related information (e.g., phone brand)
through the SDP record of the phone. Moreover, due to
the uncertainty of initial pointer position, we move the
pointer to left-bottom as the origin point by sending
enough mouse movement reports.
Input Capability. By constructing the HID input
report, we can freely move the mouse or inject
a key event on the phone. What’s more, we
found that Android deﬁnes various
functional
and “Volume
keys
“Home”,
is possible
Control” besides normal
In
to utilize these keys to enhance our attacks.
detail, when the phone receive the HID report,
it
will ﬁrst parse the report payload into a Linux
input event based on the previous provided HID
descriptor. Then,
there exists an
mapping relationship between Linux input key code
and Android deﬁned key event, which can be found in
/frameworks/base/data/keyboards/Generic.kl
of Android source code. We then adjust our HID
descriptor to enable these special keys usage. We
summarize some functional keys which can be
applied in our attack in Table IV [4]. What is more,
for keyboard,
letters. So it
[4]
like
“Back”,
Bluetooth AppConnectInject input eventsAppsAppsMouse/KeyboardPrivacyAndroid OSTABLE IV: Android Functional Keys
Linux Key Code Name
Description (effect on Android)
KEY ENTER
KEY TAB
KEY SYSRQ
KEY COMPOSE
KEY POWER
KEY WWW
KEY PHONE
KEY MAIL
KEY ADDRESSBOOK
KEY HOMEPAGE
KEY BACK
Enter Key (click)
Tab Key (select item)
Screenshot
Menu Key (open menu for current app)
Power Key (open/close screen)
Explorer (launch browser app)
Call (launch phone app)
Envelope (launch mail app)
Contacts (launch phone book app)
Home Key
Back Key
common shortcuts like copy (KEY CTRL+KEY C)
and paste key (KEY CTRL+KEY V) combination
are available as well. And we also found that even
without the mouse capability, we can simulate the
moving or clicking task by sending KEY TAB to
select a certain item on the screen and KEY ENTER
to perform the click operation. This approach could
make our attack stealthier and quicker.
• Output Capability. Keyboard and mouse only pro-
vides input ability. However, if the attacker wants to
do more advanced attacks, output ability is neces-
sary. In other words, if we can obtain the view of
phone’s UI, we can simulate full interaction capability
of a user. Indeed, we found that
there is a key
named KEY SYSRQ which stands for screenshot in the
standard key code scheme, which will truly capture
the phone screen on Android. Thus, we can inject
this key to Android phone resulting in generating a
global screenshot. Besides, another way to capture
the texts on some views and
output
then send “copy” shortcut
to copy the text. Next,
the app can read the text from system clipboard by
using ClipboardManager. The limitation of this
method is that not all the texts are selectable and
the information can be gathered is much less than a
screenshot image.
is to select
As a result, with these abilities, the attack could introduce
severe consequences to the victim. We summarize them with
three high-level categories as follows.
Attack: Information Stealing. Since we can capture screen-
shot globally, which can cover any foreground application in
the screen, we can steal very sensitive information from normal
or system app like private emails and messages, phone books,
etc, and send them out of the phone. For example, we can
grant our app the WRITE_EXTERNAL_STORAGE permission
using the input ability and fetch the screenshot then send them
out via Internet (a normal permission). Or we can use input
ability to transfer them through another app like Web Browser
(open a malicious uploading website) or Email. Finally, the
app can delete the screenshot to destroy the evidence.
Attack: App and System Controlling. Most security mech-
anisms on Android phone are enforced with user’s involve-
ment. For example, after Android 6.0, all dangerous-level
permissions should be granted at runtime by user conﬁrmation.
And many security and privacy policies are controlled by the
system settings. There is no way for a normal app to modify
the critical settings or perform a cross-app operation. However,
by equipping with an external HID device, we can arbitrarily
control what we want just like normal user interaction.
For example, we can grant all the dangerous permissions
to our app thus causing continuous damage when the device is
disconnected. And we can invade other apps by force stopping,
uninstalling, or injecting input events on them. Moreover, we
are able to install another malicious app. Modifying the critical
system setting preferences is easy as well. Before the attack,
we could choose the proper payload which contains the UI
layout and item position information based on the Android
version and phone brand. However, the user may personalize
their phone and legitimate apps may have various appearance.
To handle this problem, we could use the previous attack to
get the screenshot and perform the image analysis locally or
remotely to get the precise layout in order to attack them
accordingly.
And through our experiment, we could even shutdown or
reboot the phone by simulating the click of the power button.
In detail, if we send KEY POWER and wait a short period
till sending the button release event, which simulates the long
press of power button, the power manage menu will pop up.
After that, we can select the shutdown or restart menu item.
Attack: Beyond the Phone. Besides being the interface to help
the user process the daily tasks, the phone can also be used
as data vault, keeping user’s identity information or storing
the token for many applications. Therefore, if the attacker
takes control of the phone, he may steal stored token like
a veriﬁcation code in a text message or log himself into a
website through remembered password. He may also abuse the
victim identity like sending spam emails. He can even open the
camera and capture the surrounding environment thus severely
breach the victim’s privacy.
Limitations. Some attack operations, like capturing the screen-
shot of foreground apps, will fail when the phone is securely
locked (for locking without PIN/Pattern, the attack still works
through simulating swiping screen). Though our attack can
inject keyboard and mouse input, unlocking the phone would
be impossible if the user chooses PIN code that we do not
know beforehand or enables other strong login mechanisms.
A subset of operations are still effective under the locking
scenario,
like powering off the phone and turning on the
camera. To notice, the following two attacks are still effective
even when the phone is securely locked.
B. Personal Area Networking
Next, we investigate how the network communication can
be tampered by exploiting the Personal Area Networking
(PAN) proﬁle, which manages the networking functionality
through Bluetooth channels. This proﬁle relies on BNEP
protocol and deﬁnes 3 roles - Network Access Point (NAP),
Group Ad-hoc Network (GN), and PAN User (PANU). A
common use case is that one device who has an additional
network resource like smartphone can act as a NAP to forward
8
A mechanism we want to mention here is the network
resource priority on Android. As we know, the Android phone
can use Wi-Fi and cellular network to access Internet beyond
Bluetooth. So if multiple network sources appear, Android will
automatically choose one through an internal ranking scheme.
Through our investigation, we found Bluetooth network has
the highest base score than other frequently used network types
(Wi-Fi and cellular data). What is more, Android will conduct
a connectivity testing (e.g., ping a google website) before the
ﬁnal decision and deduct points if the testing fails. So we
can easily manage the network to select our Bluetooth NAP
as long as the testing is passed, which naturally holds if the
device owns Internet access ability.
The whole process can be done in the background even
when the phone is securely locked. And we noticed that even
when the phone is unlocked and used by the user, our attack
only introduces an inconspicuous change in the notiﬁcation
bar, if a Wi-Fi connection has been established (a small mark
on Wi-Fi icon). If the phone does not use Internet initially, we
can enforce it as well. In summary, through this attack, we can
force all the Internet trafﬁc on the phone to go through our
device. As a result, we can intercept sensitive information or
do the spooﬁng attack.
Attack: Network Consumption. From another angle,
the
phone can also act as a NAT and share its network resource
via Bluetooth. So in this attack, the device claims its iden-
tity as a PANU and try to connect and share the phone’s
network. Ideally, Android ought to forbid such connection
by default and require user interaction. In reality, opening
the Bluetooth tethering could be easily done by an app
without any privileged permission granted. The API we used is
setBluetoothTethering() of BluetoothPan class.
To notice, this setting is global which is effective for all the
external devices as well. Again, this implies the problematic
implementation of Bluetooth management on Android.
As a result, once the app enables that setting, the device can
try to connect to the phone NAT. With that, the device could
send out collected information or receive data for ﬁrmware
updating. Besides, the device can consume the network mali-
ciously to cause extra data usage.
C. Hands-Free
Bluetooth supports audio transmission in two means. As
shown in Section II, the ﬁrst one is to transfer the audio
signal natively by SCO channel. The latter one utilizes packets
to distribute the audio data (Advanced Audio Distribution -
A2DP). Headset Proﬁle (HSP) and Hands-Free Proﬁle (HFP)
are two typical proﬁles relying on SCO channel, while we
focus on HFP since it supports more features than HSP and
has been widely adopted nowadays. A headset device imple-
menting HFP allows user to perform operations (e.g., make
phone calls) by issuing the commands without touching the
phone. Also, the device could receive the telephony audio and
answer phone calls using HFP. Therefore, when a malicious
device implements HFP, it will be able to manipulate the audio
input and receive the audio output of the phone. Figure 6 shows
how an attacker can abuse these proﬁles to compromise user’s
privacy.
(a) Device as NAP
(b) Device as PANU
Fig. 5: PAN Attacks. Figure (a) shows that the device can sniff
and spoof trafﬁc of the phone. Figure (b) shows the device can
consume the host network bandwidth without permission.
Ethernet packets and provide DHCP service usually at the
same time. The other device will be the PANU to share the
network bandwidth of the NAP. Both roles are supported by
Android but there is no protection mechanism in place to
prevent a malicious app or device from abusing these roles.
We construct two attacks as shown in Figure 5.
Attack: Network Snifﬁng and Spooﬁng. Since the phone
could access Internet via the Bluetooth device, it is possible
to provide the NAP service on the device side and do the
network Man-in-the-Middle attack. In this attack, we enable
the standard NAT service on the device and wait for the
connection from the phone. Once the phone is connected, the
Bluetooth device would receive all the Ethernet packets carried
by BNEP from the phone and pass it to a pre-build virtual
bridge. The bridge can then forward the trafﬁc to a remote
entity if the device has its own Internet access component.
Then we can intercept all the trafﬁc on that bridge. Note that
accessing Internet can be achieved via a embedded sim card
(cellular network), wired or wireless Internet connection of the
device itself. Many IoT devices like smart speakers have built
in such capability. And for the case that the device itself cannot
access the Internet, it can still sniff a part of trafﬁc like login
request which contains sensitive information.
After establishing the Bluetooth network connection, the
phone (PANU) will query for the networking settings from
the NAP. The DHCP server on the virtual bridge can listen for
this query and return a malicious DNS server address. This
DNS server could be a public server owned by the attacker or
just built upon the device.
9
Bluetooth AppAppsAppsMalicious DNSNetwork Access PointConnect to NAPAndroid OSBluetooth AppAppsAppsPersonal Area Network UserAndroid OSConnect to NAPDownload dataFig. 6: HFP Attack. After connection, the Bluetooth device
can control the incoming and outgoing calls. Also, it can inject
voice command if Google Assistant is enabled.
Attack: Telephony Control. HFP deﬁnes two roles - Audio
Gateway (AG) and Hands-Free Unit (HF). AG like a cellular
phone can transfer the telephony status and open SCO con-
nection for streaming the voice to HF (typically a headset).
And the HF could issue several commands like accepting,
rejecting an incoming call or terminating the current call, etc.
In this attack, the device will claim the HF role, and wait for
connection from the phone. Initially, AG and HF will establish
a RFCOMM channel to exchange the handshake message and
phone status using various AT Command. Then based on the