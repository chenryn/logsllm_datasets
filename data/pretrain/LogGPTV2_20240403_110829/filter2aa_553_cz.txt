// reducto.c –把文件压缩成原来的1/3！
#include 
#include   // 提供 exit()的原型
#include   // 提供 strcpy()、strcat()的原型
#define LEN 40
int main(int argc, char *argv [])
{
FILE *in, *out;  // 声明两个指向 FILE 的指针
int ch;
char name[LEN];  // 储存输出文件名
int count = 0;
961
// 检查命令行参数
if (argc 
#include 
#include 
#define MAX 41
int main(void)
{
FILE *fp;
char words[MAX];
if ((fp = fopen("wordy", "a+")) == NULL)
965
{
fprintf(stdout, "Can't open \"wordy\" file.\n");
exit(EXIT_FAILURE);
}
puts("Enter words to add to the file; press the #");
puts("key at the beginning of a line to terminate.");
while ((fscanf(stdin, "%40s", words) == 1) && (words[0] != '#'))
fprintf(fp, "%s\n", words);
puts("File contents:");
rewind(fp);    /* 返回到文件开始处 */
while (fscanf(fp, "%s", words) == 1)
puts(words);
puts("Done!");
if (fclose(fp) != 0)
fprintf(stderr, "Error closing file\n");
return 0;
}
该程序可以在文件中添加单词。使用"a+"模式，程序可以对文件进行读
写操作。首次使用该程序，它将创建wordy文件，以便把单词存入其中。随
后再使用该程序，可以在wordy文件后面添加单词。虽然"a+"模式只允许在
966
文件末尾添加内容，但是该模式下可以读整个文件。rewind()函数让程序回
到文件开始处，方便while循环打印整个文件的内容。注意，rewind()接受一
个文件指针作为参数。
下面是该程序在UNIX环境中的一个运行示例（可执行程序已重命名为
addword）：
$ addaword
Enter words to add to the file; press the Enter
key at the beginning of a line to terminate.
The fabulous programmer
#
File contents:
The
fabulous
programmer
Done!
$ addaword
Enter words to add to the file; press the Enter
key at the beginning of a line to terminate.
enchanted the
large
967
#
File contents:
The
fabulous
programmer
enchanted
the
large
Done!
如你所见，fprintf()和 fscanf()的工作方式与 printf()和 scanf()类似。但
是，与 
putc()不同的是，fprintf()和fscanf()函数都把FILE指针作为第1个参
数，而不是最后一个参数。
13.4.2 fgets()和fputs()函数
第11章时介绍过fgets()函数。它的第1个参数和gets()函数一样，也是表
示储存输入位置的地址（char * 类型）；第2个参数是一个整数，表示待输
入字符串的大小 [1]；最后一个参数是文件指针，指定待读取的文件。下面
是一个调用该函数的例子：
fgets(buf, STLEN, fp);
这里，buf是char类型数组的名称，STLEN是字符串的大小，fp是指向
FILE的指针。
fgets()函数读取输入直到第 1 个换行符的后面，或读到文件结尾，或者
读取STLEN-1 个字符（以上面的 fgets()为例）。然后，fgets()在末尾添加一
968
个空字符使之成为一个字符串。字符串的大小是其字符数加上一个空字符。
如果fgets()在读到字符上限之前已读完一整行，它会把表示行结尾的换行符
放在空字符前面。fgets()函数在遇到EOF时将返回NULL值，可以利用这一机
制检查是否到达文件结尾；如果未遇到EOF则之前返回传给它的地址。
fputs()函数接受两个参数：第1个是字符串的地址；第2个是文件指针。
该函数根据传入地址找到的字符串写入指定的文件中。和 puts()函数不同，
fputs()在打印字符串时不会在其末尾添加换行符。下面是一个调用该函数的
例子：
fputs(buf, fp);
这里，buf是字符串的地址，fp用于指定目标文件。
由于fgets()保留了换行符，fputs()就不会再添加换行符，它们配合得非
常好。如第11章的程序清单11.8所示，即使输入行比STLEN长，这两个函数
依然处理得很好。
969
13.5 随机访问：fseek()和ftell()
有了 fseek()函数，便可把文件看作是数组，在 fopen()打开的文件中直
接移动到任意字节处。我们创建一个程序（程序清单13.4）演示fseek()和
ftell()的用法。注意，fseek()有3个参数，返回int类型的值；ftell()函数返回一
个long类型的值，表示文件中的当前位置。
程序清单13.4 reverse.c程序
/* reverse.c -- 倒序显示文件的内容 */
#include 
#include 
#define CNTL_Z '\032'   /* DOS文本文件中的文件结尾标记 */
#define SLEN 81
int main(void)
{
char file[SLEN];
char ch;
FILE *fp;
long count, last;
puts("Enter the name of the file to be processed:");
scanf("%80s", file);
if ((fp = fopen(file, "rb")) == NULL)
970
{                  /* 只读模式  */
printf("reverse can't open %s\n", file);
exit(EXIT_FAILURE);
}
fseek(fp, 0L, SEEK_END);       /* 定位到文件末尾 */
last = ftell(fp);
for (count = 1L; count <= last; count++)
{
fseek(fp, -count, SEEK_END);    /* 回退   */
ch = getc(fp);
if (ch != CNTL_Z && ch != '\r') /* MS-DOS 文件 */
putchar(ch);
}
putchar('\n');
fclose(fp);
return 0;
}
下面是对一个文件的输出：
Enter the name of the file to be processed:
971
Cluv
.C ni eno naht ylevol erom margorp a
ees reven llahs I taht kniht I
该程序使用二进制模式，以便处理MS-DOS文本和UNIX文件。但是，
在使用其他格式文本文件的环境中可能无法正常工作。
注意
如果通过命令行环境运行该程序，待处理文件要和可执行文件在同一个
目录（或文件夹）中。如果在IDE中运行该程序，具体查找方案序因实现而
异。例如，默认情况下，Microsoft Visual Studio 2012在源代码所在的目录中
查找，而Xcode 4.6则在可执行文件所在的目录中查找。
接下来，我们要讨论3个问题：fseek()和ftell()函数的工作原理、如何使
用二进制流、如何让程序可移植。
13.5.1 fseek()和ftell()的工作原理
fseek()的第1个参数是FILE指针，指向待查找的文件，fopen()应该已打
开该文件。
fseek()的第2个参数是偏移量（offset）。该参数表示从起始点开始要移
动的距离（参见表13.3列出的起始点模式）。该参数必须是一个long类型的
值，可以为正（前移）、负（后移）或0（保持不动）。
fseek()的第3个参数是模式，该参数确定起始点。根据ANSI标准，在
stdio.h头文件中规定了几个表示模式的明示常量（manifest constant），如表
13.3所示。
表13.3 文件的起始点模式
972
旧的实现可能缺少这些定义，可以使用数值0L、1L、2L分别表示这3种
模式。L后缀表明其值是long类型。或者，实现可能把这些明示常量定义在
别的头文件中。如果不确定，请查阅实现的使用手册或在线帮助。
下面是调用fseek()函数的一些示例，fp是一个文件指针：
fseek(fp, 0L, SEEK_SET); // 定位至文件开始处
fseek(fp, 10L, SEEK_SET); // 定位至文件中的第10个字节
fseek(fp, 2L, SEEK_CUR); // 从文件当前位置前移2个字节
fseek(fp, 0L, SEEK_END); // 定位至文件结尾
fseek(fp, -10L, SEEK_END); // 从文件结尾处回退10个字节
对于这些调用还有一些限制，我们稍后再讨论。
如果一切正常，fseek()的返回值为0；如果出现错误（如试图移动的距
离超出文件的范围），其返回值为-1。
ftell()函数的返回类型是long，它返回的是当前的位置。ANSI 
C把它定
义在stdio.h中。在最初实现的UNIX中，ftell()通过返回距文件开始处的字节
数来确定文件的位置。文件的第1个字节到文件开始处的距离是0，以此类
推。ANSI 