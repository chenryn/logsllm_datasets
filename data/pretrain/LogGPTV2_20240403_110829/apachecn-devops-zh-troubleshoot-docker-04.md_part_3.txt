build: ./node 
links: 
 - redis 
ports: 
- "8080" 
redis: 
image: redis 
ports: 
 - "6379"
```
我们将在[第 10 章](10.html "Chapter 10. Docker Deployment in a Public Cloud - AWS and Azure")、*Docker 机器、作曲和群集*中更深入地研究 Docker 作曲。此外，我们还需要实现一个服务发现机制(在后面的章节中讨论)，该机制使服务能够发现它需要与之通信的任何其他服务的位置(主机和端口)。
## 自动化测试和部署
我们希望尽可能多地相信我们的应用正在工作；这从自动化测试开始，以促进我们的自动化部署。不用说，我们的自动化测试是至关重要的。将工作软件*升级到*管道意味着我们可以自动部署到每个新环境。
目前微服务的测试仍然相对复杂；正如我们已经讨论过的，服务的测试类除了它所依赖的任何服务之外，还需要启动该服务。我们至少需要为这些服务配置存根。所有这些都是可以做到的，但是让我们看看如何降低它的复杂性。
### 自动化测试
从战略上来说，我们需要规划我们的设计流程，包括测试，以验证我们的应用部署到生产中。以下是我们希望通过自动化测试实现的工作流程示例:
![Automated testing](img/image_04_006.jpg)
上图展示了一个 DevOps 管道，从代码编译开始，到集成测试、性能测试，最后是应用在生产环境中的部署。
#### 为失败而设计
为了成功，我们必须接受失败是非常真实的可能性。事实上，我们确实应该有目的地将失败插入到我们的应用设计流程中，以测试当它们发生时，我们如何成功地处理它们。生产中的这种自动化测试最初需要钢铁般的神经；然而，我们可以通过重复和熟悉来获得自我修复的自动化。失败是必然的；因此，我们必须计划和测试我们的自动化，以减轻这种确定性的损害。
成功的应用设计包括内置容错功能；作为将服务用作组件的结果，微服务尤其如此。由于服务可能随时出现故障，因此能够快速检测到故障并在可能的情况下自动恢复服务非常重要。对我们的应用进行实时监控是整个微服务应用的关键重点，它为实际发生的问题或显示潜在错误或问题的问题提供了早期预警系统。这在开发团队中提供了更早的响应来跟踪和调查；因为在微服务架构中有这样的编排和事件协作，我们跟踪紧急行为的能力变得相当重要。
因此，微服务团队应该设计为包括每个单独服务的监控和日志设置的一些最小值:具有上/下状态的仪表板、关于断路器状态的元数据、当前吞吐量和延迟以及各种操作和业务相关指标。
在我们的应用构建结束时，如果我们的组件没有干净地组成，我们只完成了将复杂性从组件内部转移到它们之间的连接。这使得事情进入更难定义和更难控制的领域。最终，我们应该考虑到失败的不可避免性来获得成功。
#### 单元测试的停靠单元
为了增强我们的单元测试能力，我们还将安装和使用 **Dockunit** 来交付我们的单元测试。对于单元测试，我们有很多选择。在过去混合和匹配不同的工具来完成单元测试的过程中，我发现通过在我的开发工具包中将 Dockunit 部署为一个*库存和标准的*应用，我可以用这个工具满足几乎任何单元测试需求。为了不太重复，让我们继续使用 Dockunit 设置自动化测试。
Dockunit 需求是 Node.js、npm 和 Docker。
如果尚未安装，请安装 npm (我们将假设安装 Docker 和 Node.js):
```
npm install -g dockunit
```
现在我们可以使用 Dockunit 轻松测试我们的 Node.js 应用。这只是通过`Dockunit.json`文件完成的；下面是一个使用`mocha`在 Node.js 0.10.x 和 0.12.0 中测试应用的示例:
```
{ 
  "containers": [ 
    { 
      "prettyName": "Node 0.10.x", 
      "image": "google/nodejs:latest", 
      "beforeScripts": [ 
        "npm install -g mocha" 
      ], 
      "testCommand": "mocha" 
    }, 
    { 
      "prettyName": "Node 0.12", 
      "image": "tlovett1/nodejs:0.12", 
      "beforeScripts": [ 
        "npm install -g mocha" 
      ], 
      "testCommand": "mocha" 
    } 
  ] 
} 
```
前面的代码片段展示了在 docker 容器中对应用进行单元测试是多么容易。
### 自动化部署
实现自动化的一种方法是使用现成的 PaaS(例如，Cloud Foundry 或 Tutum 等)。平台即服务为开发人员提供了一种部署和管理其微服务的简单方法。它将他们与采购和配置信息技术资源等问题隔离开来。同时，配置平台即服务的系统和网络专业人员可以确保符合最佳实践和公司政策。
另一种自动化微服务部署的方法是开发本质上属于您自己的 PaaS。一个典型的出发点是将集群解决方案(如 Mesos 或 Kubernetes)与技术(如 Docker)结合使用。在本书的后面，我们将回顾基于软件的应用交付方法，如 NGINX，它可以轻松地在微服务级别处理缓存、访问控制、API 计量和监控，从而帮助解决这个问题。
## 将 N 层应用解耦为多个映像
分解应用提高了可部署性和可扩展性，并简化了新技术的采用。为了达到这个抽象级别，应用必须与基础设施完全分离。应用容器(如 Docker)提供了一种将应用组件与基础架构分离的方法。在这个级别上，每个应用服务必须是弹性的(也就是说，它可以独立于其他服务上下扩展)和弹性的(也就是说，它有多个实例，并且可以经受住实例故障)。应用还应该设计成一个服务中的故障不会级联到其他服务。
我们说得太多了，做得还不够。让我们看看我们真正需要的是什么——如何建造它！我们可以很容易地在这里使用我们的`cloudconsulted/wordpress`映像来展示我们解耦到独立容器中的一个例子:一个用于 WordPress、PHP 和 MySQL。相反，让我们探索其他应用，继续展示我们可以用 Docker 实现的应用部署的能力和潜力；对于这个例子，一个简单的 LEMP 栈
### 构建 N 层网络应用
LEMP 栈(nginx > mysql > php)
为了简化，我们将把这个 LEMP 栈分成两个容器:一个用于 MySQL，另一个用于 NGINX 和 PHP，每个容器都利用一个 Ubuntu 库:
```
# LEMP stack decoupled as separate docker container s 
FROM ubuntu:14.04 
MAINTAINER John Wooten @CONSULTED  
RUN apt-get update 
RUN apt-get -y upgrade 
# seed database password 
COPY mysqlpwdseed /root/mysqlpwdseed 
RUN debconf-set-selections /root/mysqlpwdseed 
RUN apt-get -y install mysql-server 
RUN sed -i -e"s/^bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/" /etc/mysql/my.cnf 
RUN /usr/sbin/mysqld & \ 
    sleep 10s &&\ 
    echo "GRANT ALL ON *.* TO admin@'%' IDENTIFIED BY 'secret' WITH GRANT OPTION; FLUSH PRIVILEGES" | mysql -u root --password=secret &&\ 
    echo "create database test" | mysql -u root --password=secret 
# persistence: http://txt.fliglio.com/2013/11/creating-a-mysql-docker-container/ 
EXPOSE 3306 
CMD ["/usr/bin/mysqld_safe"]
```
第二个容器将安装和容纳 NGINX 和 PHP:
```
# LEMP stack decoupled as separate docker container s 
FROM ubuntu:14.04 
MAINTAINER John Wooten @CONSULTED  
## install nginx 
RUN apt-get update 
RUN apt-get -y upgrade 
RUN apt-get -y install nginx 
RUN echo "daemon off;" >> /etc/nginx/nginx.conf 
RUN mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak 
COPY default /etc/nginx/sites-available/default 
## install PHP 
RUN apt-get -y install php5-fpm php5-mysql 
RUN sed -i s/\;cgi\.fix_pathinfo\s*\=\s*1/cgi.fix_pathinfo\=0/ /etc/php5/fpm/php.ini 
# prepare php test scripts 
RUN echo "" > /usr/share/nginx/html/info.php 
ADD wall.php /usr/share/nginx/html/wall.php 
# add volumes for debug and file manipulation 
VOLUME ["/var/log/", "/usr/share/nginx/html/"] 
EXPOSE 80 
CMD service php5-fpm start && nginx
```
## 让不同的应用层工作
从我们的实际生产示例中，我们已经看到了几种不同的方法，可以让不同的应用层协同工作。由于关于使可互操作的层在应用中可行的讨论都依赖于正在部署的应用层，我们可以继续*无限期地*讨论如何做到这一点；一个例子引向另一个例子，等等。相反，我们将在[第 06 章](06.html "Chapter 6. Making Containers Work")、*让容器工作*中更深入地研究这一领域。
# 总结
容器是现代微服务架构的载体；当与微服务和 N 层架构风格相结合时，容器的使用并没有提供一些狂野和富有想象力的优势，而是提供了可行的生产就绪解决方案。在许多方面，使用容器来实现微服务架构是一种演进，与过去 20 年在 web 开发中观察到的演进并无不同。这种发展在很大程度上是由更好地利用计算资源的需要和维护日益复杂的基于网络的应用的需要所推动的。对于现代应用开发来说，Docker 是名副其实的强有力的武器。
正如我们所看到的，使用带有 Docker 容器的微服务架构满足了这两种需求。我们探索了从开发到测试无缝设计的示例环境，消除了手动和容易出错的资源调配和配置需求。在这样做的过程中，我们简要介绍了如何测试、自动化、部署和管理微服务应用，但是容器在分布式系统中的使用远远超出了微服务。在所有分布式系统中，容器越来越成为“一等公民”，在接下来的章节中，我们将讨论 Docker Compose 和 Kubernetes 等工具对于管理基于容器的计算是如何必不可少的。