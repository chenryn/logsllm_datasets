In Fides, an application and the protected modules it uses,
share the same virtual address space. Protection of the mod-
ules is provided by enforcing a memory access control model:
access rights to memory locations depend on the value of the
program counter. Roughly speaking, while the processor is
Figure 1: The layout of an SPM.
from\to
Entry pnt.
Public
Secret
Unprot./
other SPM
Entry pnt. Public
Secret
unprot.
rx
rx
x
rx
r
rw
rwx
rwx
Table 1: The enforced memory access control model.
executing within the boundaries of a speciﬁc protected mod-
ule (i.e. the program counter points to an instruction that is
part of the module), it can access memory allocated to that
module.
If the processor is executing outside the bound-
aries of the module, it has only limited rights to access the
module’s memory. In particular, destruction of the module
is also only possible from within the module: this is why
we use the term self-protecting module (SPM) for protected
modules in Fides.
This section gives an overview of how this basic mecha-
nism is used to support communicating protected modules.
First, we discuss in more detail the layout of an SPM and
the enforced memory access control (Section 3.1). Next,
we describe the four primitive operations oﬀered by Fides
(Section 3.2). Then, in Sections 3.3 and 3.4, we discuss the
typical life cycle of an SPM, and how SPMs can authenti-
cate each other and collaborate securely. Finally we discuss
in section 3.5 how modules can be updated.
3.1 Layout of a Self-Protecting Module
A self-protecting module is a chunk of memory divided in
two sections (see Fig. 1). The Secret section contains the
module’s sensitive data. This not only includes sensitive
data processed by the module, such as cryptographic keys,
but also data used for the correct execution of the module,
such as its call stack. Read and write access to the Se-
cret section is only allowed from within the module. Access
from outside the module, including from another instance of
the same SPM, is prevented. These access restrictions give
modules total control over any data stored in their Secret
section.
The Public section contains information that is non-conﬁ-
dential and should only be integrity-protected. This includes
all1 the module’s code and constant values such as strings.
Once the module is protected, the contents of this section
1Self-modifying code and interpreted code could be sup-
ported easily by making the Secret section executable, but
we consider such support of out scope for this paper.
4can no longer be modiﬁed, it can only be read and/or exe-
cuted. Read access is allowed from unprotected code as well
as from other SPMs, allowing authentication of modules.
SPMs are able to access unprotected memory in the same
address space. While Fides’ design does not impose any ac-
cess limitations on these locations, access restrictions set by
the legacy kernel are enforced to prevent malicious modules,
for example, from overwriting kernel space.
Each SPM comes with a list of memory locations in the
Public section that are valid entry points into the SPM.
Fides will guarantee that an SPM can only be executed by
jumping to a valid entry point. This prevents attacks that
attempt to extract information by selectively executing code
snippets [32].
Table 1 summarizes the enforced access control rules. It
shows for instance that code in unprotected memory or other
SPMs can read the Public section of an SPM, or can execute
an address that is an entry point of the SPM (from this point
on, the program counter is within the Public section and the
access rights are elevated).
3.2 Primitive operations
Fides implements four primitive operations to create, de-
stroy and query the location and layout of SPMs.
The crtSPM primitive is used to create an SPM. It takes
the location and size of the Public and Secret sections and
a list of entry points. First, Fides veriﬁes whether all refer-
enced logical pages are mapped to physical pages, that they
do not overlap with any existing SPMs, and that all entry
points point into the Public section. Then, Fides creates an
identiﬁer spm_id for the SPM. Fides guarantees that until
it is rebooted, no other SPM will receive the same iden-
tiﬁer. Therefore the identiﬁer can be used to diﬀerentiate
instances of the same module. Fides also clears the Secret
section (set to all zeroes) to remove the initial contents of
the Secret section from the attack surface. Finally, memory
access protection of the SPM is enabled.
The killSPM primitive will destruct the SPM that called
it (or generate a fault if called from unprotected code). En-
forcing that only SPMs can destruct themselves is important
for security: it prevents attacks where an attacker destroys
an SPM unexpectedly e.g. during a callback to unprotected
memory.
It also allows SPMs to pause their destruction
until its sensitive data is stored securely to disk and over-
written in memory. Note that this does not prevent Fides
from interrupting non-responsive modules (see section 4.1).
Fides supports two primitives to allow authentication of
SPMs. The lytSPM primitive is given any virtual address
and returns the base address, layout and spm_id of the mod-
ule that is mapped at the speciﬁed location. The tstSPM
primitive is more eﬃcient and returns whether the SPM
with a given spm_id is loaded starting at the speciﬁed lo-
cation. Both primitives check whether the referenced SPM
is loaded correctly: as SPMs are loaded in processes’ vir-
tual address space, pages may not be mapped, mapped to
incorrect physical pages, or mapped out of order.
3.3 Life Cycle of a Self-Protecting Module
(a) Initialization
(b) Destruction
Figure 2: The life cycle of an SPM from (a) initial-
ization to (b) destruction.
vides a user process with a chunk of (possibly physically
non-contiguous) memory and the SPM is placed in unpro-
tected memory.
In the second step, the crtSPM primitive is called. An
attacker that compromised the previous step(s), will be de-
tected later on and mitigated. At this point, the SPM can
be authenticated and service other modules. However, most
SPMs will need to restore their secret state from persistent
storage after creation (step 3). In Fides, this is handled by a
special SPM, called the Vault that will only pass previously
stored data over a secure channel. Details of authentication
and secure communication will be discussed in Section 3.4.
In appendix A we elaborate on the workings and security of
the Vault.
Destroying an SPM.
When the SPM is no longer needed, it should be destroyed
properly (Fig. 2b). First, the module accesses the Vault to
store any secret data that must be available for later execu-
tions. In step 2, the secret data of the SPM is overwritten
to prevent it from being disclosed in unprotected memory.
Finally, the module calls the killSPM primitive to lift the
imposed access control of the module’s memory.
3.4 Secure local communication
One of Fides’ objectives is to support a system of collab-
orating modules (see Fig. 3), each with its own secrets and
own services that it oﬀers to other modules, adhering to the
principle of least privilege [29]. Hence, SPMs must be able
to authenticate each other, and establish secure communi-
cation channels. We explain both aspects in detail.
The identity of an SPM is captured in what we call a
Fig. 2a and 2b describe the life cycle of an SPM. We ex-
security report. It contains four parts:
plain the steps from creation to destruction in detail.
Setting up an SPM.
First (Fig. 2a, step 1), the legacy operating system pro-
(cid:129) A cryptographic hash of the Public section allowing
veriﬁcation that the Public section was not compro-
mised before protection was enabled. It is essentially
5Figure 3: Fides’ ability to establish secure chan-
nels, enables the easy creation of complex trust net-
works. Modules A and B are able to explicitly place
trust on (possibly another instance of ) an SPM im-
plementing RSA operations without trusting each
other. Similarly, a malicious module M will not be
able to cause any harm as it is not trusted by any
module.
the SPM’s identity as the access control model only
allows code execution from this section.
(cid:129) The layout of the SPM, including the sizes of the Public
and Secret sections, and the list of entry points (rela-
tive to the Public section) to verify that the protection
request was not compromised. Modiﬁcation of the size
of the Secret section in the SPM’s initialization phase
for example, may cause the use of unprotected memory
to store sensitive information.
(cid:129) A serial and version number. The authentication mech-
anism is ﬂexible enough to support SPMs to be up-
dated easily. As the cryptographic hash of the Public
section will diﬀer between versions, a serial number is
required to link diﬀerent versions of the same SPM to-
gether. A version number prevents the re-use of old
(e.g. security vulnerable) SPMs.
(cid:129) Cryptographic signature. The security report is signed
by its issuer. SPMs have a list of trusted certiﬁcate
authorities (CAs) to verify the signature of SPMs they
authenticate.
Since a security report is signed by its issuer, it can be
stored in unprotected memory. Any working mechanism to
retrieve an SPM’s security report will suﬃce. For simplicity,
we will assume in the rest of the paper that it is stored in
front of the SPM.
One-way authenticated service call.
Consider a SecureRandom module that provides crypto-
graphic random numbers, and a Client module that authen-
ticates and requests its service (Fig. 4a).
First, the Client calls the lytSPM primitive, locates the
security report, and veriﬁes (1) its signature on the security
report, (2) the hash of the Public section and the layout of
the SPM against the information in the security report, and
(3) whether serial and version number are as expected.
Second, the SecureRandom module is called. This is sim-
ilar to calling a function: parameters are loaded in registers
and a jump to the appropriate entry point is performed.
An important diﬀerence with regular function calls on the
x86 platform is that the return address must also be passed
in a register. Under normal operation return addresses are
pushed on the call stack of the caller. However, to protect
the integrity of their execution, modules are not allowed to
access each others call stack and the return address can-
not be retrieved. Hence, a continuation entry point, in this
case receive_random, is provided as a parameter (similar to
continuation-passing-style programming[26, 3]).
In the ﬁnal step, SecureRandom generates a random num-
ber and returns it by performing a jump operation to the
receive_random entry point.
The bandwidth of the secure channel can be increased
signiﬁcantly by storing large messages in memory shared
between sender and receiver. We will further discuss this
mechanism in Section 4.1.
In case the Client module requires additional random num-
bers, the SecureRandom module can be re-authenticated us-
ing the tstSPM primitive. Based on the spm_id returned
by lytSPM when the module was ﬁrst authenticated, it en-
sures that the same instance of the module will be accessed
and rechecking the security report is not required. We will
show in Section 5 that repeated authentication is signiﬁ-
cantly more eﬃcient than initial authentication.
Two-way authenticated service call.
Two-way authentication is very similar. Assume that a
module Client wishes to communicate with another module,
Server, and that mutual authentication is required (Fig. 4b).
First, Client locates the Server’s security report and au-
thenticates the module as in one-way authentication.
In
step two, a message is sent to the Server containing the
entry point, receive_secret, where the response should be
returned to. In step three, the Server locates the Client’s se-
curity report using the provided return point and the lytSPM
primitive. Only after successful authentication of the client,
sensitive data is returned.
In case the origin of service requests must be proven, a
secret session token can be passed to the authenticated end-
point during the initial authentication. The session-token
should be passed in all future service requests.
3.5 Updating SPMs
Fides’ authentication scheme allows a module to be up-
dated easily without requiring any modiﬁcation of modules
or unprotected code that are clients of the updated module.
Updating works as follows. A client authenticates a mod-
ule starting from just a function pointer: using the lytSPM
primitive, the SPM queries Fides for the base address of the
referenced module and locates its security report. After au-
thenticating the issuer and verifying its serial number2, the
module is authenticated as described in Section 3.4. In ad-
dition the client should check the version number. Updated
versions might contain API inconsistencies to previous ver-
sions e.g. services may be serviced on new entry points. Sim-
ilarly, the version number should be high enough to prevent
attacks where a module is downgraded to an older, vulner-
able version. To transfer secret state from an old version
to a newer, special support is required. An update protocol
could be implemented by the modules to pass the informa-
tion, or a support SPM could be built to pass persistent
sensitive information to updated SPMs. This approach al-
lows the Vault to remain simple and easy veriﬁable: it will
only return sensitive data to the same SPM that previously
requested storage.
2The issuer/serial number combination is assumed to
uniquely determine functionality, and this should be stable
over updates of the module.
6(a) One-way authentication
(b) Two-way authentication