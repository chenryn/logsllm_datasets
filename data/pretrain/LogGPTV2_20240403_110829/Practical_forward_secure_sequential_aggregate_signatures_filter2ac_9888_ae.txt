computer forensics. ACM Transactions on Information
and System Security, pages 159–176, 1999.
APPENDIX
A. PROOF OF THEOREM 1
We will use the following Lemma [5] in our proof:
Lemma 1. Suppose n is a Blum-Williams integer. Sup-
pose a, a1,··· , at ∈ Z∗
n and a is a square modulo n. Suppose
m, m1,··· , mt are integers such that m1,··· , mt > m ≥ 0.
Suppose
t(cid:89)
a2m
=
a2mj
j mod n.
Then
j=1
t(cid:89)
j=1
a =
a2mj−m
j
mod n.
Proof. Suppose there exist a forger A against the BM-
F ssAgg1 signature scheme that succeeds with  in time τ .
We construct an algorithm B that uses A as a subroutine to
factor a given Blum-Williams integer n with a probability
of a lower bound at /T within time ∼ τ .
B is given a Blum-Williams integer n. Its goal is to output
a pair (p, q) such that n = pq. B interacts with A as follows.
[Setup] B picks xj
n for j = 1,··· , l and w R← Z∗
R← Z∗
n.
Then it chooses a time period b(cid:48) when to set a “trap”.
Now it sets sj,b(cid:48) ← x2
j and rb(cid:48) ← w2.
It computes
uj ← s2T +1−b(cid:48)
and y ← r2T +1−b(cid:48)
. It gives A the public
key P K = {n, T, u1,··· , ul, y}.
j,b(cid:48)
b(cid:48)
[Queries] Starting from time period 1. At time period i,
A requests a BM-F ssAgg1 signature on a message mi
of her choice under the public key P K. She also sup-
plies B with an aggregate signature σ1,i−1 on messages
m1,··· , mi−1 (we assume σ1,0 = 1 on any arbitrary
message). B maintains a message-signature table with
a tuple form of (cid:104)m(j), σ(j), σ(1,j)(cid:105) as explained below.
B responds to this query using the following steps:
350
(cid:81)l
3 If i ≥ b(cid:48), B computes σi = ri
1 Algorithm B ﬁrst checks the validity of σ1,i−1 using
P K. If the signature cannot be veriﬁed, B aborts,
fails in factoring. Otherwise, it goes to step 2.
2 For j = 1 to i− 1, B checks whether mj appears in
the j-th entry of its message-signature table, e.g.
whether mj = m(j). If there exist an index k such
that mk (cid:54)= m(k), and if k  b(cid:48) then B provides A the secret information for that
period (B knows it).
[Response.] Finally A outputs a forgery σ1,i (i ≤ T ) over
messages m1,··· , mi. That σ1,i is a valid BM-F ssAgg1
forgery means that: (1) it is a valid signature, e.g., it
can be veriﬁed with P K; and 2) it is nontrivial: there
exist AT LEAST one index k such that 1 ≤ k  k2 > k1 ≥ 1, b(cid:48) − k1 − 1 ≥ 1).
If a2 ≡ ±a1 then B fails to factor n; else it computes
h ← gcd(a1 − a2, n) and outputs (h, n/h) as factors of
n.
Now we only need to prove that a2 is a square root of A.
Because σ1,i is a valid BM-F ssAgg1 signature, according to
the veriﬁcation process, we have the following equation:
l(cid:89)
l(cid:89)
(cid:48)
)2T −k2+1 · y ·
[(σ
ci,k2
j
u
]2k2−k1 · y ·
j=1
j=1
ci,k1
j
u
= 1
351
That equals:
(cid:48)(cid:48)
)2T −k1+1
(σ
= yk2−k1+1 ·
l(cid:89)
j=1
u
ci,k2·(k2−k1)+ci,k1
j
Because uj = s2T +1−b(cid:48)
and y = r2T +1−b(cid:48)
l(cid:89)
tion can be written as:
= (r ·
)2T −k1+1
j,b(cid:48)
(σ
b(cid:48)
(cid:48)(cid:48)
ci,k2·(k2−k1)+ci,k1
s
i,b(cid:48)
= A2T +1−b(cid:48)
j=1
, the above equa-
)2T +1−b(cid:48)
(1)
Because T −k1 +1 > T +1−b(cid:48) and A is a square, according
to Lemma 1, we have
(cid:48)(cid:48)
(σ
)2b(cid:48)−k1
2 = ((σ(cid:48)(cid:48))2b(cid:48)−k1−1
= A
Therefore a2
)2 = A. That is, a2 is a
square root of A.
Algorithm B makes as many as signature queries as A
makes. Algorithm B’s running time is that of A, plus the
overhead in handling A’s signature queries.
If A succeeds with probability of  in forging, B succeeds
at least with probability roughly /T . The argument is out-
lined as follows. First, the view of A that B produces is
computationally indistinguishable from the view of A inter-
acting with a real F ssAgg1 signing oracle. Conditioned on
B choosing the value of b(cid:48) as the period for which A eventu-
ally output a forgery, we have the probability that B outputs
two factors is the same probability that A succeeds in forg-
ing, i.e., probability . Since choosing the “right” b(cid:48) happens
with probability 1/T we get that /T is an approximate
lower bound on the forging probability of B.
B. PROOF OF THEOREM 2
Proof of Theorem 2 resembles a lot to the Proof of Theo-
rem 1.
Proof. Suppose there exist a forger A against the AR-
F ssAgg1 signature scheme that succeeds with  in time τ .
We construct an algorithm B that uses A as a subroutine to
factor a given Blum-Williams integer n with a probability
of a lower bound at /T within time ∼ τ .
B is given a Blum-Williams integer n. Its goal is to output
a pair (p, q) such that n = pq. B interacts with A as follows.
[Setup] B picks x R← Z∗
n. Then it chooses
a time period b(cid:48) when to set a “trap”. Now it sets
. It computes u ← s2l(T +1−b(cid:48))
sb(cid:48) ← x2l
and rb(cid:48) ← w2l
and y ← r2l(T +1−b(cid:48))
. It gives A the public key P K =
b(cid:48)
{n, T, u, y}.
n and w R← Z∗
b(cid:48)
[Queries] The same as in Proof of Theorem 1.
[Break-in.] The same as in Proof of Theorem 1.
[Response.] Finally A outputs a forgery σ1,i (i ≤ T ) over
messages m1,··· , mi. That σ1,i is a valid AR-F ssAgg1
forgery means that: (1) it is a valid signature, e.g., it
can be veriﬁed with P K; and 2) it is nontrivial: there
exist AT LEAST one index k such that 1 ≤ k  k2 > k1 ≥ 1,
b(cid:48) − k1 − 1 ≥ 1). If a2 ≡ ±a1 then B fails to factor
n; else it computes h ← gcd(a1 − a2, n) and outputs
(h, n/h) as factors of n.
Now we only need to prove that a2 is a square root of A.
Because σ1,i is a valid AR-F ssAgg1 signature, according to
the veriﬁcation process, we have the following equation:
(cid:48)
)2l(T −k2+1) · y · uck2 ]2l(k2−k1) · y · u
[(σ
ck1
j = 1
That equals:
(cid:48)(cid:48)
)2l(T −k1+1)
= y2l(k2−k1)+1 · uck2·2l(k2−k1)+ck1
(σ
and y = r2l(T +1−b(cid:48))
b(cid:48)
, the above
b(cid:48)
Because u = s2l(T +1−b(cid:48))
equation can be written as:
ck2·2l(k2−k1)+ck1
= (rb(cid:48) · s
b(cid:48)
= A2l(T +1−b(cid:48))
)2l(T −k1+1)
(σ
(cid:48)(cid:48)
)2l(T +1−b(cid:48))
(2)
Because T −k1 +1 > T +1−b(cid:48) and A is a square, according
to Lemma 1, we have
(cid:48)(cid:48)
(σ
)2l(b(cid:48)−k1)
2 = ((σ(cid:48)(cid:48))2l(b(cid:48)−k1)−1
= A
)2 = A. That is, a2 is a
Therefore a2
square root of A.
Algorithm B makes as many as signature queries as A
makes. Algorithm B’s running time is that of A, plus the
overhead in handling A’s signature queries.
If A succeeds with probability of  in forging, B succeeds
at least with probability roughly /T . The argument is out-
lined as follows. First, the view of A that B produces is
computationally indistinguishable from the view of A inter-
acting with a real F ssAgg1 signing oracle. Conditioned on
B choosing the value of b(cid:48) as the period for which A eventu-
ally output a forgery, we have the probability that B outputs
two factors is the same probability that A succeeds in forg-
ing, i.e., probability . Since choosing the “right” b(cid:48) happens
with probability 1/T we get that /T is an approximate
lower bound on the forging probability of B.
352