it should be diﬃcult for Alice or Bob to recover the status
of a customer ci after the execution of the protocol, even in
cases where all the other customers voluntarily reveal their
own infection status to Alice and Bob.
2.3.2 Model of adversary
If we let C = {c1, . . . , cn} denote the set of customers, our
model of the adversary is then as follows.
• Alice and Bob do not collude against a customer.
• Alice may collude against a customer ci with (possibly
all) the other customers.
• Bob may collude against a customer ci with (possibly
all) the other customers.
Our protocol will ensure that, assuming that Alice and
Bob do not collude with each other, it is infeasible for any
party to compute the result of the test for a customer ci.
As will become clear from the protocol description, the cus-
tomers are not an active part of the protocol, and colluding
with them during the protocol does not provide any advan-
tage against the intended victim ci.
3. PROTOCOL FOR NON-ADAPTIVE COM-
BINATORIAL GROUP TESTING
This section presents the protocol, its analysis, and im-
plementation enhancements. As we desire to lower compu-
tational requirements of all entities involved, we pay a spe-
cial attention to public-key cryptographic operations. Since
the number of operations involved in CGT is unavoidably
O(mn), our private protocol will have to maintain this bound.
The number of expensive modular exponentiation opera-
tions (which are also used to encrypt and decrypt data in
homomorphic encryption schemes) can, however, be mini-
mized. A more straightforward realization of this computa-
tion could require O(mn) such operations, but our construc-
tion uses only O(n) modular exponentiations and O(mn)
modular multiplications. Additionally, the O(mn) bound on
the number of multiplications can be lowered, as described
in Section 3.3.2.
At a high level, the protocol works as follows: Upon re-
ceipt of m blood mixes from Alice, Bob tests each of these
and sends to Alice an encrypted bit bi for the ith mix, where
bi = 0 if the mix is infected and bi = 1 otherwise. Us-
ing homomorphic properties of the encryption scheme, Al-
ice computes for each customer RP bj + r, where R and
r are random values and the sum is over all mixes where
the customer’s blood was used. Now notice that a customer
who is infected will have all of his bits bi set to 0, result-
each customer. He decrypts the second value and forwards
of r (with her key) and an encryption (with Bob’s key) of
ing in RP bi + r = r. Alice sends to Bob an encryption
RP bi + r. Bob chooses two random values A and B for
A (RP bi + r) + B to the customer. He also sends an en-
cryption (with Alice’s key) of Ar + B to Alice. Alice then
sends Ar + B to the customer. Now the customer compares
the strings received and concludes that she is infected if they
match.
The detailed protocol steps are given below (where all
arithmetic is modular and the modulus is either that for
Alice’s or Bob’s homomorphic encryption, with the context
making it implicitly clear which one it is).
3.1 Protocol speciﬁcation
This section gives the main steps of the protocol – we post-
pone various implementation enhancements and algorithmic
optimizations until section 3.3 (including them at this early
stage would break the ﬂow of the exposition).
Participants: A set of customers C = {c1, . . . , cn}, a data
collection entity Alice who can obtain blood samples from
customers and prepare mixes, and a mix-testing entity Bob
who can tell whether a mix is infected or not.
Input: An upper bound d on how many members of C can
be infected. An m × n d-disjunct Boolean matrix M known
to Alice but not to Bob. Linked lists S1, . . . , Sm where Si
contains the column positions of row i of M that are 1.
Linked lists V1, . . . , Vn where Vj contains the row positions
of column j of M that are 1.
Output: Each customer ci ∈ C learns whether he is in-
fected. Neither Alice nor Bob learn which customers are
infected.
Protocol steps:
1. Alice generates a private-public key pair for a homo-
morphic semantically secure encryption scheme [13];
we denote such encryption using Alice’s public key as
EA. Similarly, Bob generates his own pair, and we
denote encryption with Bob’s public key by EB.
2. Alice randomly assigns each customer ci to a column
of M ; for the sake of notational simplicity, we re-name
the customers so that ci is assigned to column i.
3. Alice collects the n blood samples. For each of S1,
. . . , Sm in turn, Alice prepares a mix µi of the blood
samples according to Si: If column j is in Si then the
blood sample of the customer assigned to column j is
a part of µi. Alice sends these m mixes (in the order
µ1 to µm) to Bob who tests each of them and obtains
a bit bi from testing µi: If µi is infected then Bob sets
bi = 0, otherwise Bob sets bi = 1.
4. For i = 1, . . . , m in turn, Bob encrypts bi with his pub-
lic key, obtaining EB(b1), . . . , EB(bm) which he sends
to Alice.
5. For each j = 1, . . . , n in turn, Alice chooses two ran-
dom numbers Rj and rj from ZnB , where nB is the
modulus used for EB, and computes the following two
quantities: Yj = rj and
Zj = „Yi∈Vj
EB(bi)«Rj
= EB „„Rj Xi∈Vj
bi« + rj«
· EB(rj) =
Alice sends Zj and EA(Yj) to Bob.
6. For j = 1, . . . , n in turn, after Bob receives the Zj and
EA(Yj) pair he decrypts Zj to obtain
Wj = „Rj Xi∈Vj
bi« + rj
He then chooses two random values Aj and Bj from
ZnA , where nA is the modulus used for EA, and sends
Aj ·Wj +Bj (modulo nA) to customer cj. He also sends
`EA(Yj)Aj´ EA(Bj) = EA(Aj · Yj + Bj ) to Alice.
7. For j = 1, . . . , n in turn, Alice decrypts the EA(Aj ·
Yj +Bj) received from Bob to obtain Aj ·Yj +Bj which
she sends to customer cj .
8. Each customer cj compares the Aj · Yj + Bj received
from Alice to the Aj ·Wj +Bj received from Bob in Step
7: If they are equal, then the customer cj learns that
she is infected, otherwise the customer learns nothing
other than the fact that she is not infected.
In the above, Alice does O(n) modular exponentiations and
O(nm) total work. Bob, on the other hand, performs O(m+
n) work. The communication costs of the protocol are also
O(m + n).
3.2 Security analysis
We will now show that Alice and Bob cannot infer signiﬁ-
cant information about whether an individual customer is in-
fected. If Alice or Bob do not collude with other customers,
then this is relatively straightforward (actually a simpler ver-
sion of the above protocol would work). However, suppose
Alice (resp., Bob) colludes with a set of participants C 0 and
thus the adversary obtains all of Alice’s (resp., Bob’s) infor-
mation along with the information on both sheets of paper
for all customers in C 0.
3.2.1 Alice’s view
We ﬁrst show that, given Alice’s inputs and the infec-
tion status of all members in C 0, a simulated transcript can
be generated that is computationally indistinguishable from
Alice’s view of the protocol. For each customer ci Alice
knows ri, Ri, and Vi. She also knows several values en-
crypted with EB (but these are easily simulated since EB is
a semantically-secure encryption scheme). However, she also
learns the two following pieces of information: (i) Airi + Bi
for all customers and (ii) Ai“RiPj∈Vi
customers in C 0. A simulation algorithm can generate pairs
of values (given infection status of members of C 0) as follows:
bj + ri” + Bi for all
1. For infected customers in C 0, choose a random value
x from ZnA (where nA is the modulus of Alice’s ho-
momorphic encryption scheme) and output x for both
pieces of information.
2. For non-infected customers in C 0, choose a random
values x and y from ZnA and output x for the ﬁrst
piece of information and y for the other.
3. For every customer not in C choose a random value x
from ZnA and output x for the ﬁrst piece of informa-
tion.
It is trivial to show that parts 1 and 3 are indistinguishable
from their counterparts. For the second part, it is enough to
show that for any value x and y (x 6= y) there is a single value
(bj) +
of Ai and Bi where Airi + Bi = x and Ai(RiPj∈Vi
ri) + Bi = y. This is satisﬁed when
Ai =
y − x
RiPj∈Vi
and Bi = x −
bj
ri(y − x)
RiPj∈Vi
.
bj
Thus such a value exists whenever RiPj∈Vi
(which will be true with all but negligible probability).
bj has an inverse
The above shows that Alice learns only information that
can be deduced from the infection status of customers in C 0
and her input. However, given this information, we would
like to determine whether it would be possible for Alice to
infer information about honest customers. This is a valid
concern because Alice knows the mapping between the cus-
tomers and the sets Vj. Thus, if it is possible for Alice to
infer the status of which samples are infected, she can use
these mappings Vj to infer information as to which honest
customers are infected.
Deﬁnitely, in our framework some inferences can be made.
For example, if C 0 contains d infected customers, then Al-
ice can infer that everyone else is not infected.1 However,
1We are assuming that Alice knows for sure that there are
d or less infected customers. In Section 3.3.1 we introduce
if C 0 contains at most d − 1 infected customers, then she
cannot determine if an individual customer cs is infected as
illustrated below.
• If cs is infected, then Alice’s view of the customers in
C 0 is still consistent. Clearly, this could not change her
view of the samples that contain an infected member of
C 0. Furthermore, since every non-infected member of
C 0 is in at least one sample that does not contain cs or
any other infected members of C (otherwise the matrix
would not be d-disjunct), her view of the non-infected
members would not change.
• Similarly, if cs was not infected, then clearly this would
not aﬀect her view of the non-infected members of C 0,
but it would also not aﬀect her view of infected mem-
bers, because cs is in at least one sample that does
not contain any infected members of C 0 (otherwise the
matrix would not be d-disjunct).
3.2.2 Bob’s view
The proof that Bob’s view is simulateable given his inputs
is similar to Alice’s proof. We ﬁrst show that, given Bob’s
inputs and the infection status of all members in C 0 with
whom he conspires, a simulated transcript can be gener-
ated that is computationally indistinguishable from his view
of the protocol. For each customer ci Bob knows Ai and
Bi, and he knows bi for i ∈ [1, m]. He also knows several
values encrypted with EA (but these are easily simulated
since EA is a semantically-secure encryption scheme). How-
ever, he also learns the two following pieces of information:
bj + ri for all customers and (ii) ri for all cus-
tomers in C 0. A simulation algorithm can generate these
pairs of values (given infection status of members of C 0) as
follows:
(i) RiPj∈Vi
1. For infected customers in C 0, choose a random value x
from ZnA and output x for both pieces of information.
2. For non-infected customers in C 0, choose a random
values x and y from ZnA and output x for the ﬁrst
piece of information and y for the other.
3. For every customer not in C 0 choose a random value x
from ZnA and output x for the ﬁrst piece of informa-
tion.
It is trivial to show that parts 1 and 3 are indistinguishable
from their counterparts. For the second part, it is enough
to show that for any value x and y (x 6= y) there is a single
bj + ri = y.
value of Ri and ri where ri = x and RiPj∈Vi
This is satisﬁed when
ri = x and Ri =
y − ri
Pj∈Vi
.
bj
Note that Ri exists whenever Pj∈Vi
inverse in ZnA . Since x 6= y, we know that Pj∈Vi
bj has a multiplicative
bj is in
[1, m], and for any practical value of m this will be a coprime
with any secure RSA modulus.2
an extension that aborts the protocol when more than d
customers are found to be infected. If this extension is used,
then this inference can always be made.
2We are assuming a homomorphic scheme such as Paillier
where the modulus is an RSA modulus.
The above shows that Bob can only infer information
about an honest customer’s infection status if he can make
that inference based upon his inputs alone. Bob’s only
knowledge from the protocol is the bi values (he knows what
samples were infected), but he does not know the mapping
between customers and samples. However, from this infor-
mation he may be able to deduce some information about
the number of infected customers (e.g.,
lower and upper
bounds).
In some extreme cases, this may leak informa-
tion. For example, if Bob knows that all samples are clean,
then he can deduce that all customers are not infected. As
another example, suppose only a few samples are infected,
and, given the number of infected samples, Bob deduces that
exactly one customer is infected (at least with high proba-
bility). Now if Bob colludes with all but one customer all
of which are not infected, he can deduce that this honest
customer is infected. However, extreme cases that lead to
Bob identifying an honest customer as infected are unlikely
in practice. That is, at most, Bob learns the number of in-
fected customers. Thus to be able to pinpoint a customer
as infected, Bob needs to collude with almost all customers,
which will be unlikely in many environments.
We summarize what we have proved in the following the-
orem.
Theorem 1. As long as Alice and Bob do not collude
with each other against a customer ci, it is infeasible for
any participant to infer the infection status of ci.
3.3 Implementation enhancements
In this section we consider various enhancements of our
protocol. In section 3.3.1 a modiﬁcation is presented that
detects when there are more than d infected customers. Sec-
tion 3.3.2 decreases the cost of computing all of the Zj ’s.
Section 3.3.3 gives a more eﬃcient protocol for the special
case when d = 1.
than d, then Bob aborts the protocol. Otherwise, the
protocol continues as before.
3.3.2 Algorithmic optimization
This sub-section gives an improved algorithm for decreas-
ing the number of scalar multiplications needed for the com-
putation of all the Zj ’s. Speciﬁcally, we bring the number
of arithmetic operations from O(mn/d) to O(d2n).
The computation of the Zj ’s could be done naively, by
computing each Zj separately from the others. The number
of scalar multiplications done by such an approach would
then be proportional to the number of nonzero entries in
the d-disjunct matrix M , whose expected value is
mn/(d + 1) = O((d2 log n)(n/(d + 1))) = O(dn log n).
Had our m × n matrix M been an arbitrary Boolean ma-
trix, the problem of minimizing the total number of scalar
multiplications done for computing all the Zj ’s would have
been NP-hard. This can be proved by a straightforward re-
duction from the ENSEMBLE COMPUTATION problem [6], and
in fact the NP-hardness would hold even if every Vj con-
sisted of no more than 3 elements. However, our M matrix
is generated by a very speciﬁc randomized construction, and
has m = O(d2 log n) rows. We show below how the compu-
tation time of the Zj ’s can be brought down from O(mn/d)
to O(d2n).
Recall that m = αd2 log n where α is a constant. Also
recall that Vj contains the row positions of column j that are
1 and we will assume that each Vj is stored in αd2 memory
cells of size log n bits each. Let Xi denote EB(bi) for i =
EB(bi)
for each customer cj , all of which are carried out by Alice,
are as follows.
1, . . ., m. The algorithm steps for computing Qi∈Vj
Input: X1, . . . , Xm and V1, . . . , Vn.
Output: Z0
n where Z0
1, . . . , Z0
j = Qi∈Vj
Xi.
3.3.1 Handling more than d defectives
Algorithm steps:
In the previous protocol, if there are more than d infected
customers, then several false positives may occur. Bob may