先上EXP，再逐步分析：
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./15_angr_arbitrary_read" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        initial_state = project.factory.entry_state()
        class ReplacementScanf(angr.SimProcedure):
            def run(self, format_string, param0, param1):
                scanf0 = claripy.BVS('scanf0', 32)
                scanf1 = claripy.BVS('scanf1', 20*8)
                for char in scanf1.chop(bits=8):
                    self.state.add_constraints(char >= 'A', char = 'A', char = 'A', char  /----------------\
    esp + 6 -> |      puts      |
    esp + 5 -> |    parameter   |
    esp + 4 -> \----------------/
    esp + 3 -> /----------------\
    esp + 2 -> |     return     |
    esp + 1 -> |     address    |
        esp -> \----------------/
我们调用memory的load方法将这个数据提取出来看看是不是goodjob字符串所在的地址
    def check_puts(state):
        puts_parameter = state.memory.load(state.regs.esp + 4, 4, endness=project.arch.memory_endness)
        if state.se.symbolic(puts_parameter):
            good_job_string_address = 0x594e4257
            is_vulnerable_expression = puts_parameter == good_job_string_address
这里我们需要对当前状态做一个拷贝，方便操作状态而不对原来的状态产生影响干扰，然后给状态添加约束条件，如果地址相等则返回正确
    copied_state = state.copy()
                copied_state.add_constraints(is_vulnerable_expression)
                if copied_state.satisfiable():
                    state.add_constraints(is_vulnerable_expression)
                    return True
                else:
                    return False
            else:
                return False
接下来的部分都是大同小异，不再赘述
## 16_angr_arbitrary_write
这题如题就是学习如何任意写，老样子先检查一下文件
    syc@ubuntu:~/Desktop/TEMP$ checksec 16_angr_arbitrary_write
    [*] '/home/syc/Desktop/TEMP/16_angr_arbitrary_write'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
用IDA打开检查一下函数
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char s; // [esp+Ch] [ebp-1Ch]
      char *dest; // [esp+1Ch] [ebp-Ch]
      dest = unimportant_buffer;
      memset(&s, 0, 0x10u);
      strncpy(password_buffer, "PASSWORD", 0xCu);
      print_msg();
      printf("Enter the password: ");
      __isoc99_scanf("%u %20s", &key, &s);
      if ( key == 24173502 )
        strncpy(dest, &s, 0x10u);
      else
        strncpy(unimportant_buffer, &s, 0x10u);
      if ( !strncmp(password_buffer, "DVTBOGZL", 8u) )
        puts("Good Job.");
      else
        puts("Try again.");
      return 0;
    }
一开始也是毫无头绪，记得我们之前铭记的做题核心就是输出“Good Job.”，顺着这个思路往上走，第一步我们观察
    !strncmp(password_buffer, "NDYNWEUJ", 8u)
需要的条件是`password_buffer`的里面内容为`NDYNWEUJ`，接下来的问题是如何指定内容，我们发现并没有直接的渠道给我们去修改这里的内容，我们思路到哪些渠道可以提供给我们修改内存内容值，可以得知：
    dest = unimportant_buffer;
    __isoc99_scanf("%u %20s", &key, &s);
    strncpy(dest, &s, 0x10u);
    strncpy(unimportant_buffer, &s, 0x10u);
我们回顾一下`strncpy`函数：
    char *strncpy(char *dest, const char *src, int n)
表示把`src`所指向的字符串中以`src`地址开始的前n个字节复制到`dest`所指的数组中，并返回被复制后的`dest`
    strncmp(password_buffer, "DVTBOGZL", 8u)
可以想到我们可以将`dest`指向`password_buffer`，然后将`src`的内容修改为`DVTBOGZL`即可，然后我们知道一开始`dest`已经指向`unimportant_buffer`，我们如何修改`dest`呢？
回忆起上一题的手法，观察这个函数：
    __isoc99_scanf("%u %20s", &key, &s);
    -0000001C s               db ?
    -0000001B                 db ? ; undefined
    -0000001A                 db ? ; undefined
    -00000019                 db ? ; undefined
    -00000018                 db ? ; undefined
    -00000017                 db ? ; undefined
    -00000016                 db ? ; undefined
    -00000015                 db ? ; undefined
    -00000014                 db ? ; undefined
    -00000013                 db ? ; undefined
    -00000012                 db ? ; undefined
    -00000011                 db ? ; undefined
    -00000010                 db ? ; undefined
    -0000000F                 db ? ; undefined
    -0000000E                 db ? ; undefined
    -0000000D                 db ? ; undefined
    -0000000C dest            dd ?                    ; offset
    -00000008                 db ? ; undefined
    -00000007                 db ? ; undefined
    -00000006                 db ? ; undefined
    -00000005                 db ? ; undefined
`s`和`dest`刚好只相差16字节，完全覆盖`dest`刚好需要20个字节，而`scanf`函数刚好给我们提供了20个字节，这里用上一题差不多的手法就行，当我们控制了dest的地址后，s的前16个字节又是我们可控的，于是我们就实现了任意地址写的功能
老样子先上EXP：
    import angr
    import claripy
    import sys
    def Go():
        path_to_binary = "./16_angr_arbitrary_write"
        project = angr.Project(path_to_binary)
        initial_state = project.factory.entry_state()
        class ReplacementScanf(angr.SimProcedure):
            def run(self, format_string, param0, param1):
                scanf0 = claripy.BVS('scanf0', 32)
                scanf1 = claripy.BVS('scanf1', 20*8)
                for char in scanf1.chop(bits=8):
                    self.state.add_constraints(char >= 48, char <= 96)
                scanf0_address = param0
                self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)
                scanf1_address = param1
                self.state.memory.store(scanf1_address, scanf1)
                self.state.globals['solutions'] = (scanf0, scanf1)
        scanf_symbol = '__isoc99_scanf' 
        project.hook_symbol(scanf_symbol, ReplacementScanf())
        def check_strncpy(state):
            strncpy_src = state.memory.load(state.regs.esp + 8, 4, endness=project.arch.memory_endness)
            strncpy_dest = state.memory.load(state.regs.esp + 4, 4, endness=project.arch.memory_endness)
            strncpy_len = state.memory.load(state.regs.esp + 12, 4, endness=project.arch.memory_endness)
            src_contents = state.memory.load(strncpy_src, strncpy_len)
            if state.solver.symbolic(src_contents) and state.solver.symbolic(strncpy_dest):
                password_string = 'DVTBOGZL' 
                buffer_address = 0x4655544c 
                does_src_hold_password = src_contents[-1:-64] == password_string
                does_dest_equal_buffer_address = strncpy_dest == buffer_address
                if state.satisfiable(extra_constraints=(does_src_hold_password, does_dest_equal_buffer_address)):
                    state.add_constraints(does_src_hold_password, does_dest_equal_buffer_address)
                    return True
                else:
                    return False
            else: 
                    return False
        simulation = project.factory.simgr(initial_state)
        def is_successful(state):
            strncpy_address = 0x8048410