title:Rupair: Towards Automatic Buffer Overflow Detection and Rectification
for Rust
author:Baojian Hua and
Wanrong Ouyang and
Chengman Jiang and
Qiliang Fan and
Zhizhong Pan
Rupair: Towards Automatic Buffer Overflow Detection and
Rectification for Rust
Baojian Hua, Wanrong Ouyang, Chengman Jiang, Qiliang Fan, and Zhizhong Pan
School of Software Engineering, University of Science and Technology of China, China
ABSTRACT
Rust is an emerging programming language which aims to provide
both safety guarantee and runtime efficiency, and has been used
extensively in system programming scenarios. However, as Rust
consists of an unsafe language subset unsafe, Rust programs are
still vulnerable to severe security attacks which may defeat its safety
guarantees. Existing studies on Rust security focus on the detection
of vulnerabilities but seldom consider the bug fix issues. Meanwhile,
it is often time-consuming and error-prone for Rust developers to
understand and fix bugs manually, due to Rust’s advanced language
features. In this paper, we present Rupair, an automated rectifi-
cation system, to detect and fix one sort of the most severe Rust
vulnerabilities—buffer overflows, and to help developers release
secure Rust projects. The key technical component of Rupair is a
novel security oriented lightweight data-flow analysis algorithm,
which makes use of Rust’s two primary intermediate representa-
tions and works across the boundary of Rust’s safe and unsafe
sub-languages. To evaluate the effectiveness of Rupair, we first
apply it to all 4 reported buffer overflow-related CVEs and vulnera-
bilities (as of June 20, 2021). Experiment results demonstrated that
Rupair successfully detected and rectified all these CVEs. To testify
the scalability of Rupair, we collected 36 open-source Rust projects
from 8 different application domains, consisting of 5,108,432 lines of
Rust source code, and applied Rupair on these projects. Experiment
results showed that Rupair successfully identified 14 previously
undiscovered buffer overflow vulnerabilities in these projects, and
rectified all of them. Moreover, Rupair is efficient, only introduced
3.6% overhead to each rectified Rust program on average.
CCS CONCEPTS
• Security and privacy → Software security engineering; •
Software and its engineering→ Software notations and tools.
KEYWORDS
Rust, buffer overflows, vulnerabilities, automatic program repair
ACM Reference Format:
Baojian Hua, Wanrong Ouyang, Chengman Jiang, Qiliang Fan, and Zhizhong
Pan. 2021. Rupair: Towards Automatic Buffer Overflow Detection and
Rectification for Rust. In Annual Computer Security Applications Conference
(ACSAC ’21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY,
USA, 12 pages. https://doi.org/10.1145/3485832.3485841
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485841
1 INTRODUCTION
Rust is a new programming language designed to help program-
mers write more secure and reliable system software, by employing
a combination of compiler static and runtime checking. The main
design philosophy for Rust is to inherit most features from C/C++,
but to rule out safety issues in C/C++ [33], to achieve good per-
formance without sacrificing safety guarantees. As a result, Rust
has gained popularity in the past several years, and has been used
successfully to build system software like operating system kernels
[44, 47, 68], browser kernels [14], file systems [58], databases [15],
cloud services [9], blockchains [4], and so on.
The Rust language can be divided into two sub-languages. The
first one is the safe sub-language, consisting of a group of novel lan-
guage features to support secure system programming. These safe
features, including ownership [7], borrow and move [2], safe con-
currency [77] etc., have been studied extensively. Existing research
efforts, such as Patina [66], KRust [72], Rustbelt [38], Rust2Viper
[34], RustHorn [55], etc., have successfully formalized (or mecha-
nized) safety properties for this safe language subset of Rust.
In order to support arbitrary low-level operations and provide
more flexibility to programmers, Rust introduced the unsafe sub-
language with the unsafe [10] feature. Recent research [31] has
shown that Rust’s unsafe feature is used extensively by real-world
Rust projects, about 50% of these projects used unsafe directly
or in function call chains. Technically, this unsafe sub-language
allows any operations that the Rust compiler cannot check for safety
properties statically, thus may break the safety guarantees of the
language. Due to the existence of this unsafe sub-language, severe
threats happened on Rust programs [64] and a large number of
vulnerabilities were reported. There have been significant research
efforts to build practical safety analysis tools to help programmers
detect bugs [54, 82].
However, all these aforementioned research efforts have severe
limitations: they only detect the existence of bugs, instead of help-
ing Rust developers fix the buggy code. Once a bug is detected,
manually bug fixing for Rust programs is not only time-consuming,
but also error-prone for several reasons. First, Rust’s advanced pro-
gramming features and their complex interactions pose challenges
for developers, especially accounting for the average expertise of
Rust developers is relatively low, as shown in Figure 1. Second, Rust
is a relatively young language, and has undergone major changes
in the past several releases, manually fixing programs for these
incompatible releases is laborious. As a result, an automated vul-
nerability fix approached is expected to help Rust programmers
develop secure programs. Otherwise, existing bug detection tools
only benefit attackers to exploit buggy Rust programs.
There have been a significant of studies to help programmers
fix vulnerabilities automatically. The proposed techniques target
different languages such as C [67], Java [19], Java bytecode [24], and
recently, Ethereum Virtual Machine (EVM) bytecode [81]. However,
812ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Baojian Hua, Wanrong Ouyang, Chengman Jiang, Qiliang Fan, and Zhizhong Pan
and in each domain to select as many representative projects as
possible. Though not a perfect metric, we measure "representative"
by the number of downloads or stars of the corresponding projects
on GitHub. As a result, the domains we selected cover a wide range
of applications, and represent the typical usage scenarios of the
Rust language.
With these datasets, we performed experiments and have ob-
tained interesting insights and findings by analyzing the experiment
results. First, to evaluate the effectiveness of Rupair, we applied
it to all the 4 previously discovered vulnerabilities and CVEs. To
testify whether the rectified Rust programs are secure, we simulated
the attacker with both practical program analysis tools and real-
world exploits. Experiment results showed that all Rust programs
rectified by Rupair are bug-free and thwart all exploits.
Second, to testify the generality of Rupair, we utilized it on the
collected 36 open source Rust projects. Experiment results showed
that Rupair reported 29 buffer overflow vulnerabilities, among
which 14 are real buffer overflow vulnerabilities (48.3%) (validated
both by the Z3 solver and manual validation. To validate the normal
functionalities of the rectified Rust projects, we conducted regres-
sion testing and found none of programs encountered execution
inconsistency.
Finally, we conducted performance experiments, and found that
it took Rupair 1853 milliseconds to analyze the 5,108,432 lines
of Rust source code (2757 LOC per millisecond). Moreover, the
experiment results showed that the overhead for the 36 rectified
projects is 3.6% on average.
These experiments and results indicate that Rupair is both ef-
fective and efficient in identifying and rectifying buffer overflow
vulnerabilities in real-world Rust projects.
To our knowledge, this work is the first automatic vulnerability
rectification and protection system for Rust. To summarize, this
work makes the following contributions.
• We present the first automated vulnerability identification
and rectification approach for Rust programs. The core of
this approach is a new security related data-flow analysis al-
gorithm which scans across the safe and unsafe sub-language
boundaries.
• We develop a fully automatic software tool prototype Ru-
pair. This prototype is integrated with the above data-flow
analysis algorithm, and leverages Satisfiability Modulo The-
ory (SMT) solving to generate concrete counterexamples
which can trigger the vulnerabilities. For rectifications that
may alter the semantics of the Rust programs, this proto-
type generates a detailed report which may help the Rust
developers.
• We conduct systematic experiments, to testify the effective-
ness, generality, and performance of this software prototype.
Experiment results indicate this prototype is both effective
and efficient in rectifying real-world buffer overflow bugs in
Rust programs. In addition, this prototype reveals previously
undiscovered vulnerabilities.
The rest of this paper is organized as follows. Section 2 presents
the background and motivation for this work. Section 3 discusses,
in detail, the design and implementation of the Rupair prototype.
Section 4 presents the experiments we performed along with the
Figure 1: The overall expertise of Rust. (According to the of-
ficial Rust developer survey [8], few programmers tend to
claim expertise on Rust, and the peak is at 7.)
the existing techniques cannot be applied to rectify vulnerabilities
in Rust programs directly, because 1) the Rust language consists
of some novel language features, such as ownerships [7] and ex-
plicit lifetimes [6], which do not exist in other languages; 2) most
vulnerabilities in Rust arise from interactions between Rust’s two
safe and unsafe sub-languages [64], which does not appear in
other languages and requires new techniques to handle. Thus, it’s
a challenge to develop automatic program repair techniques to fix
vulnerabilities in Rust programs.
In this work, we present our first step towards an automatic recti-
fication and protection infrastructure for buggy Rust programs. We
designed and implemented an automated vulnerability detection
and rectification system, Rupair, to fix one sort of the most severe
vulnerabilities, buffer overflows, in Rust programs. The key techni-
cal insight behind Rupair’s design is that vulnerabilities in Rust pro-
grams have certain insecure patterns, it is feasible to fix these bugs
by identify and revise these patterns [64]. Rupair takes the follow-
ing key steps to identify and rectify buffer overflow vulnerabilities:
1) Rupair identifies buffer overflow vulnerabilities with a novel
data-flow analysis algorithm parameterized by overflow patterns,
which scans across the safe and unsafe sub-languages boundaries,
this step also addresses the aforementioned technical challenge;
2) Rupair confirms the existence of buffer overflows using Sat-
isfiability Modulo Theory (SMT) solving techniques [20], which
generates concrete counterexamples, this also reduces the false
positives considerably; 3) Rupair conducts semantic-preserving
program transformation to rectify the identified vulnerabilities; 4)
for Rust programs that automatic rectification may have undesir-
able side effects or may break functionality consistence, Rupair
constructs rectification suggestions and sends these suggestions
back to developers, which may help them to rectify the bugs easier.
To evaluate Rupair, we first build datasets for experiments and
analysis. First, we searched and collected all reported buffer over-
flow related CVEs and vulnerabilities [64], and have identified 4
of them (as of June 20, 2021). Second, we selected and collected 36
open source Rust projects, from 8 different domains, consisting of
a total of 5,108,432 lines of Rust source code. The principal guiding
the data selection process is to select as many domains as possible,
813Rupair: Towards Automatic Buffer Overflow Detection and Rectification for Rust
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
datasets we used, and answers the research questions based on
the experiment results. Section 6 discusses the related work, and
Section 7 concludes.
2 BACKGROUND AND MOTIVATION
This section presents background and motivation for this work.
Targeting on buffer overflow vulnerabilities in Rust programs, we
have observed that a large portion of these vulnerabilities following
common patterns. This fact indicates that these vulnerabilities can
be identified and fixed through a unified approach. In the following,
we first present examples to illustrate the common patterns. Then,
we present the motivation for an automated rectification algorithm,
which generates secure Rust source code by fixing these vulner-
abilities. Thus, the security level of the entire Rust ecosystem is
significantly improved.
2.1 Unsafe and Buffer Overflow Patterns
Although Rust is designed to be a safe system language, it contains
an unsafe sub-language, which is the root cause for most vulnera-
bilities in Rust programs including buffer overflows [31, 64, 76]. In
this section, we present the details.
The unsafe Rust. To provide better support for low-level sys-
tem programming and enable Rust developers to write efficient
programs, Rust introduced the unsafe language feature [10]. An
unsafe code block may contain arbitrary statements that the Rust
compiler cannot check safety statically, thus defeats the Rust lan-
guage’s strong guarantee of safety. Figure 2 presents typical usage
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
unsafe fn dangerous(){}
extern "C" { fn abs(input: i32) -> i32; }
unsafe trait Foo { ... }
unsafe impl Foo for i32 { ... }
fn f() {
let mut num = 5;
let r1 = &num as *const i32;
let r2 = &mut num as *mut i32;
let r3 = num as *const i32;
unsafe{
println!("r1={},␣r2={}", *r1, *r2);
*r3 = 6;
dangerous();
abs(-3);
}
}
Figure 2: The unsafe Usage Scenarios in Rust
of unsafe code: the code at line 1 declares an unsafe function, and
the code spanning from line 11 to 16 is an unsafe code block.
This code is not complicated but illustrates all the 5 typical us-
age scenarios [10] of the unsafe feature in Rust: 1) raw pointer
dereference, the code at line 8 and 9 take addresses of the variable
num, and create an immutable pointer r1 and a mutable pointer r2,
respectively. However, dereferencing raw pointers, such as r1 or
r2, is dangerous, as the Rust compiler cannot guarantee these point-
ers point to valid memory statically, thus, pointer dereferencing
operations *r1 or *r2 should be placed in an unsafe block (line
12). Similarly, the variable num can be casted into a raw pointer r3
directly (line 10), and the direct memory assignment is dangerous
and should also be placed in the unsafe block (line 13). It should be
noted that casting a reference into a raw pointer is safe (line 7 to 10),
it’s only dangerous to access memory through these raw pointers
(line 12 and 13); 2) unsafe or foreign function invocations, if a
Rust function is marked unsafe explicitly (line 1), or is a foreign
function (the abs() foreign C function at line 3), the invocations of
such functions are dangerous and should be placed in an unsafe
block (line 14 and 15); 3) unsafe trait, a trait is unsafe if at least
one function in it is unsafe (line 3, omitting the code in the trait
Foo as it’s unimportant), thus the concrete implementation of the
trait is also unsafe (line 4). According to Rust specification [13],
there are two more unsafe usage scenarios in Rust: static variable
modification and union field access; however, these two features are
rarely used in real-world Rust projects. The unsafe feature offers a
challenge to the claim of Rust as a safe language. Recently, there
have been a lot of research [29, 31, 49, 62, 64] to develop safety
mechanisms to achieve Rust’s vision of "pragmatic safety".
Buffer overflow patterns. Rust programs make extensive use of
the unsafe feature to process buffers (i.e., vectors in Rust), because
existing studies [64] have shown that buffer access in unsafe code
is 4-5x faster than that in safe code, due to the absence of range
checking. However, such unchecked buffer access can lead to severe
overflows. Similar to previous research on bug taxonomy [79, 80],
we categorize these bugs into 4 patterns, according to whether
cause and effect are in safe or unsafe code: safe → safe, safe →
unsafe, unsafe → unsafe and unsafe → safe. In the following, we
use the symbols S and U to stand for safe and unsafe, respectively.
Figure 3 illustrates the four patterns of buffer overflows. The