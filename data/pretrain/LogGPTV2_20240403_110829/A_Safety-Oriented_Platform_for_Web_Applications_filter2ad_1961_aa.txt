title:A Safety-Oriented Platform for Web Applications
author:Richard S. Cox and
Steven D. Gribble and
Henry M. Levy and
Jacob Gorm Hansen
A Safety-Oriented Platform for Web Applications
Richard S. Cox†, Jacob Gorm Hansen‡, Steven D. Gribble†, and Henry M. Levy†
†Department of Computer Science & Engineering
University of Washington
{rick, gribble, levy}@cs.washington.edu
‡Department of Computer Science
University of Copenhagen
PI:EMAIL
Abstract
1
Introduction
The Web browser has become the dominant interface to
a broad range of applications, including online banking,
Web-based email, digital media delivery, gaming, and e-
commerce services. Early Web browsers provided simple
access to static hypertext documents. In contrast, modern
browsers serve as de facto operating systems that must man-
age dynamic and potentially malicious applications. Unfor-
tunately, browsers have not properly adapted to their new
role. As a consequence, they fail to provide adequate isola-
tion across applications, exposing both users and Web ser-
vices to attack.
This paper describes the architecture and implementa-
tion of the Tahoma Web browsing system. Key to Tahoma is
the browser operating system (BOS), a new trusted software
layer on which Web browsers execute. The beneﬁts of this
architecture are threefold. First, the BOS runs the client-
side component of each Web application (e.g., on-line bank-
ing, Web mail) in its own virtual machine. This provides
strong isolation between Web services and the user’s local
resources. Second, Tahoma lets Web publishers limit the
scope of their Web applications by specifying which URLs
and other resources their browsers are allowed to access.
This limits the harm that can be caused by a compromised
browser. Third, Tahoma treats Web applications as ﬁrst-
class objects that users explicitly install and manage, giv-
ing them explicit knowledge about and control over down-
loaded content and code.
We have implemented a prototype of Tahoma using Linux
and the Xen virtual machine monitor. Our security eval-
uation shows that Tahoma can prevent or contain 87% of
the vulnerabilities that have been identiﬁed in the widely
used Mozilla browser.
In addition, our measurements of
latency, throughput, and responsiveness demonstrate that
users need not sacriﬁce performance for the beneﬁts of
stronger isolation and safety.
The 1993 release of the Mosaic browser sparked the on-
set of the modern Web revolution [24]. The nascent Web
was a hypertext document system for which the browser
performed two functions: it fetched simple, static content
from Web servers, and it presented that content to the user.
A key Web feature was the ability for one Web site to link
to (or embed) content published by other sites. As a result,
users navigating the early Web perceived it as a vast repos-
itory of interconnected, passive documents.
Since that time, the Web has become increasingly com-
plex in both scale and function.
It provides access to an
enormous number of services and resources, including ﬁ-
nancial accounts, Web mail, archival ﬁle storage, multime-
dia, and e-commerce services of all types. Users transfer
funds, purchase tickets, ﬁle their taxes, apply for employ-
ment, and seek medical advice through the Web. Their per-
ceptions of the Web have evolved, as well. Today’s users
see the modern Web as a portal to a collection of indepen-
dent, dynamic applications interacting with remote servers.
Moreover, they expect that Web applications will behave
like the applications on their desktops. For example, users
trust that Web applications are sufﬁciently isolated from
one another that tampering or unintended access to sensi-
tive data will not occur.
To respond to the demands of dynamic services, the
browser has evolved from a simple document rendering en-
gine to an execution environment for complex, distributed
applications that execute partially on servers and partially
within clients’ browsers. Modern Web browsers download
and execute programs that mix passive content with active
scripts, code, or applets. These programs: effect transac-
tions with remote sites; interact with users through menus,
dialog boxes, and pop-up windows; and access and mod-
ify local resources, such as ﬁles, registry keys, and browser
components. The browser, then, has transcended its origi-
nal role to become a de facto operating system for executing
client-side components of Web applications.
Unfortunately, current browsers are not adequately de-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply. 
signed for their new role and environment. Despite many
attempts to retroﬁt isolation and security, the browser’s orig-
inal roots remain evident. Simply clicking on a hyperlink
can cause hostile software to be downloaded and executed
on the user’s machine. Such “drive-by downloads” are a
common cause of spyware infections [23]. Trusted plug-ins
may have security holes that permit content-based attacks.
Browser extensibility features, such as ActiveX components
and JavaScript, expose users to vulnerabilities that can po-
tentially result in the takeover of their machines.
Users assume that Web applications cannot interfere
with one another or with the browser itself. However, to-
day’s browsers fail to provide either kind of isolation. For
example, attackers can take advantage of cross-site script-
ing vulnerabilities to fool otherwise benign Web applica-
tions into delivering harmful scripted content to users, leak-
ing sensitive data from those services. Other browser ﬂaws
let malicious Web sites hijack browser windows [26] or
spoof browser ﬁelds, such as the displayed URL [37]. Such
ﬂaws facilitate “phishing” attacks, in which a hostile appli-
cation masquerades as another to capture information from
the user.
Overall, it is clear that current browsers cannot cope with
the demands and threats of today’s Web. While holes can
be patched on an ad hoc basis, a thorough re-examination
of the basic browser architecture is required. To this end,
we have designed and implemented a new browsing system
architecture, called Tahoma. The Tahoma architecture ad-
heres to three key principles:
1. Web applications should not be trusted. Active content
in today’s Internet is potentially dangerous. Both users
and Web services must protect themselves against a
myriad of online threats. Therefore, Web applications
should be contained within appropriate sandboxes to
mitigate potential damage.
2. Web browsers should not be trusted. Modern browsers
are complex and prone to bugs and security ﬂaws
that can be easily exploited, making compromised
browsers a reality in the modern Internet. Therefore,
browsers should be isolated from the rest of the sys-
tem to mitigate potential damage.
3. Users should be able to identify and manage down-
loaded Web applications. Web applications should be
user visible and controllable, much like desktop appli-
cations. Users should be able to list all Web applica-
tions and associated servers that provide code or data,
and ascribe browsing-related windows to the Web ap-
plications that generated them.
By following these principles, Tahoma substantially im-
proves security and trustworthiness for both users and Web
services. Users gain knowledge and control of the active
Web content being downloaded and executed. Web services
gain the ability to restrict the set of sites with which their ap-
plications can communicate, thereby limiting damage from
hijacked browsers. Active Web content and the browser that
interprets and renders it are isolated in a private virtual ma-
chine, protecting the user’s desktop from side-effects, mali-
cious or otherwise.
The idea of sandboxing Web browsers is not new. For
example, VMware has recently release a virtual-machine-
based “Web browser appliance,” containing a checkpointed
image of the Firefox browser on Linux [32]. As another ex-
ample, GreenBorder [12] augments Windows with an OS-
level sandbox mechanism similar to BSD jails [17], in order
to contain malicious content arriving through Internet Ex-
plorer or Outlook. Our work uses VMs to provide strong
sandboxes for Web browser instances, but our contribu-
tion is much broader than the containment this provides.
Tahoma isolates Web applications from each other, in addi-
tion to isolating Web browsers from the host operating sys-
tem. As well, Tahoma permits Web services to customize
the browsers used to access them, and to control which re-
mote sites their browser instances can access.
We have implemented a prototype of the Tahoma brows-
ing system using Linux and the Xen virtual machine mon-
itor [4] and modiﬁed the Konqueror browser to execute on
top of it. Our experience shows that the Tahoma architecture
is straightforward to implement, protects against the major-
ity of existing threats, and is compatible with existing Web
services and browsers. We also demonstrate that the ben-
eﬁts of our architecture can be achieved without compro-
mising user-visible performance, even for video-intensive
browsing applications.
The remainder of this paper is organized as follows. Sec-
tion 2 deﬁnes Tahoma’s high-level architecture and abstrac-
tions. Section 3 describes the implementation, while Sec-
tion 4 evaluates our prototype with respect to both function
and performance. Section 5 presents related work, and we
conclude our discussion in Section 6.
2 Architecture
The Tahoma architecture has six key features:
1. It deﬁnes a new trusted system layer, the browser op-
erating system (BOS), on top of which browser imple-
mentations (such as Netscape or IE) can run.
2. It provides explicit support for Web applications. A
Web application consists of a browser instance, which
includes a client-side browser executing dynamic Web
content and code, and a Web service, which is a col-
lection of Web sites with which the browser instance is
permitted to communicate.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply. 
browser instance
browser instance
browser
Web
doc.
browser
Web
doc.
client
side
Browser OS
Internet
Web service
site
site
site
Web service
site
site
site
server
side
Web application 1
Web application 2
Figure 1. The Tahoma architecture. A Web applica-
tion consists of two components: a client-side browser
instance and a remote Web service. The browser oper-
ating system isolates browser instances from each other
and also restricts the Web sites with which they can
communicate.
3. It enforces isolation between Web applications, pro-
hibiting one application from spying on or interfering
with other applications or host resources. Each Web
application has an associated browser instance that is
sandboxed within a virtual machine [4, 34].
4. It enforces policies deﬁned by the Web service to con-
trol the execution of its browser instances, e.g., to re-
strict the set of Web sites with which a browser in-
stance can interact. A Web service provides the BOS
with a manifest – an object that deﬁnes its policies and
other Web application characteristics.
5. It supports an enhanced window interface for browser
instances. The BOS multiplexes windows from mul-
tiple instances onto the physical screen and authenti-
cates the Web application for users.
6. It provides resource support to browser instances, in-
cluding window management, network communica-
tion, bookmark management, and the execution or
“forking” of new Web applications.
Figure 1 shows a simpliﬁed, high-level view of the
Tahoma architecture.
It identiﬁes two Web applications,
each consisting of a client-side browser instance and a re-
mote Web service. Each browser instance comprises a
browser and the Web documents that it fetches, executes,
and displays. The browser operating system, shown be-
low the browser instances, isolates Web applications from
each other, preventing resource sharing or communication
between browser instances. The BOS also manages com-
munication between a browser instance and the Internet,
permitting access to those sites (and only those sites) in the
associated Web service.
disk
CPU
mem
keybd.
mouse
virtual machine
screen
browser
Web
doc.
network
network
policy
browser instance
reverse firewall
BOS resources:
bookmarks
downloads
fork
HTTP(S)
(restricted)
Internet
Figure 2. The execution environment of a browser
instance. The browser instance executes in a virtual
machine sandbox that provides access to private re-
sources and a restricted subset of the Internet.
We now describe the key components of this architecture
in more detail. Table 1 clariﬁes the terminology that we will
use throughout this paper.
2.1 Web Applications
Figure 2 shows the execution environment as viewed by
a client-side browser instance. Each browser instance exe-
cutes in a virtual machine (VM) that has its own private vir-
tual disk, CPU, memory, input devices, and screen. The VM
also supports a virtual network, through which the browser
instance interacts with remote Web sites. Unlike conven-
tional browsers, which can browse and display multiple
Web sites simultaneously, each Tahoma browser instance
is associated with a single, well-circumscribed Web appli-
cation, e.g., an application that provides online access to
the user’s bank. Thus, Tahoma users have a unique browser
instance associated with each running Web application.
The VM environment provided for the browser instance
has several advantages. First, a Web application is safe from
interference by other applications, and it is free to modify
any machine state, transient or persistent, without endan-
gering other applications or the user’s host OS. Second, the
user can easily remove all local effects of a Web application
by simply deleting its VM. Finally, the VM environment in-
creases ﬂexibility for the programming of Web applications.
For example, a service could provide a customized browser
rather than using a commodity browser, or it could upload a
highly optimized application in x86 machine code.
Tahoma Web applications are ﬁrst-class objects and are
explicitly deﬁned and managed. The Web service speciﬁes
the characteristics of its application in a manifest, which the
BOS retrieves when it ﬁrst accesses the service. The man-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:31 UTC from IEEE Xplore.  Restrictions apply. 
Tahoma term
Web documents: static and active content (e.g., HTML or JavaScript) that a browser fetches from a Web service
browser:  client-side software (e.g., Firefox, IE) that interacts with a user to fetch, display, and execute Web documents
virtual machine:  a virtual x86 machine that provides the sandboxed execution environment for an instantiated browser
browser instance:  a browser executing in a virtual machine; a client has one browser instance per executing Web application
analogous
OS term
documents
and scripts
program
process