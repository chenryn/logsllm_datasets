# A Safety-Oriented Platform for Web Applications

**Authors:**
- Richard S. Cox†
- Steven D. Gribble†
- Henry M. Levy†
- Jacob Gorm Hansen‡

**Affiliations:**
- †Department of Computer Science & Engineering, University of Washington
  - {rick, gribble, levy}@cs.washington.edu
- ‡Department of Computer Science, University of Copenhagen
  - jacob@di.ku.dk

## Abstract

The web browser has become the primary interface for a wide range of applications, including online banking, web-based email, digital media delivery, gaming, and e-commerce services. While early web browsers provided simple access to static hypertext documents, modern browsers now function as de facto operating systems, managing dynamic and potentially malicious applications. Unfortunately, current browsers have not fully adapted to this new role, failing to provide adequate isolation between applications and exposing users and web services to various attacks.

This paper introduces the Tahoma web browsing system, which is designed to address these security and isolation issues. The core of Tahoma is the Browser Operating System (BOS), a trusted software layer that runs web browsers. Tahoma offers three key benefits:
1. **Strong Isolation:** Each web application (e.g., online banking, web mail) runs in its own virtual machine, providing robust isolation between web services and the user's local resources.
2. **Resource Access Control:** Web publishers can specify which URLs and resources their applications are allowed to access, limiting the potential damage from a compromised browser.
3. **User Control:** Tahoma treats web applications as first-class objects, allowing users to explicitly install and manage them, thereby giving them control over downloaded content and code.

We have implemented a prototype of Tahoma using Linux and the Xen virtual machine monitor. Our security evaluation shows that Tahoma can prevent or contain 87% of the vulnerabilities identified in the widely used Mozilla browser. Additionally, our performance measurements demonstrate that Tahoma does not sacrifice performance for enhanced security and isolation.

## 1. Introduction

The release of the Mosaic browser in 1993 marked the beginning of the modern web revolution. Initially, the web was a hypertext document system where the browser fetched and displayed static content. Over time, the web has evolved into a complex ecosystem providing access to a vast array of services and resources, such as financial accounts, web mail, file storage, multimedia, and e-commerce.

Users now expect web applications to behave like desktop applications, with sufficient isolation to prevent tampering and unintended access to sensitive data. However, current browsers, despite numerous attempts to enhance security, still lack the necessary isolation and protection. Clicking on a hyperlink can lead to the execution of hostile software, and trusted plugins can be exploited through content-based attacks. Browser extensibility features, such as ActiveX components and JavaScript, expose users to vulnerabilities that can result in the takeover of their machines.

To address these issues, we have designed and implemented Tahoma, a new browsing system architecture. Tahoma adheres to three key principles:
1. **Untrusted Web Applications:** Active content on the internet is potentially dangerous, and web applications should be contained within appropriate sandboxes.
2. **Untrusted Browsers:** Modern browsers are complex and prone to bugs and security flaws, so they should be isolated from the rest of the system.
3. **User Management:** Users should be able to identify and manage downloaded web applications, much like they do with desktop applications.

By following these principles, Tahoma significantly improves security and trustworthiness for both users and web services. Users gain control over active web content, while web services can restrict the set of sites with which their applications can communicate, thereby limiting the damage from hijacked browsers.

## 2. Architecture

The Tahoma architecture includes six key features:

1. **Browser Operating System (BOS):** A new trusted system layer on top of which browser implementations (such as Netscape or IE) can run.
2. **Web Application Support:** A web application consists of a browser instance, which executes dynamic web content and code, and a web service, which is a collection of web sites with which the browser instance is permitted to communicate.
3. **Isolation Between Web Applications:** Each web application is sandboxed within a virtual machine, preventing one application from spying on or interfering with others.
4. **Policy Enforcement:** The BOS enforces policies defined by the web service to control the execution of browser instances, such as restricting the set of web sites with which a browser instance can interact.
5. **Enhanced Window Interface:** The BOS multiplexes windows from multiple browser instances onto the physical screen and authenticates the web application for users.
6. **Resource Support:** The BOS provides resource support to browser instances, including window management, network communication, bookmark management, and the ability to execute or "fork" new web applications.

### 2.1. Web Applications

Each browser instance in Tahoma executes in a virtual machine (VM) with its own private virtual disk, CPU, memory, input devices, and screen. The VM also supports a virtual network for interaction with remote web sites. Unlike conventional browsers, each Tahoma browser instance is associated with a single, well-defined web application, such as an online banking application. This ensures that each web application is isolated and secure.

The VM environment provides several advantages:
- **Isolation:** Web applications are safe from interference by other applications and can modify any machine state without endangering other applications or the user's host OS.
- **Ease of Removal:** Users can easily remove all local effects of a web application by deleting its VM.
- **Flexibility:** The VM environment allows for greater flexibility in programming web applications, such as using customized browsers or uploading highly optimized applications in x86 machine code.

Tahoma web applications are first-class objects, explicitly defined and managed. The web service specifies the characteristics of its application in a manifest, which the BOS retrieves when it first accesses the service. This manifest defines the policies and other characteristics of the web application, ensuring that it operates within the specified constraints.

## 3. Implementation

We have implemented a prototype of the Tahoma browsing system using Linux and the Xen virtual machine monitor. We modified the Konqueror browser to execute on top of this system. Our experience shows that the Tahoma architecture is straightforward to implement, protects against the majority of existing threats, and is compatible with existing web services and browsers. Performance evaluations demonstrate that Tahoma can achieve these benefits without compromising user-visible performance, even for video-intensive browsing applications.

## 4. Evaluation

Our security evaluation shows that Tahoma can prevent or contain 87% of the vulnerabilities identified in the widely used Mozilla browser. Additionally, our measurements of latency, throughput, and responsiveness indicate that users need not sacrifice performance for the benefits of stronger isolation and safety.

## 5. Related Work

The idea of sandboxing web browsers is not new. For example, VMware has released a virtual-machine-based "web browser appliance" containing a checkpointed image of the Firefox browser on Linux. GreenBorder augments Windows with an OS-level sandbox mechanism similar to BSD jails to contain malicious content arriving through Internet Explorer or Outlook. Tahoma, however, goes beyond containment by isolating web applications from each other and allowing web services to customize and control the browsers used to access them.

## 6. Conclusion

In conclusion, the Tahoma architecture provides a robust and flexible solution for enhancing the security and isolation of web applications. By running each web application in its own virtual machine and enforcing strict policies, Tahoma significantly reduces the risk of attacks and provides users with greater control over their browsing experience. Future work will focus on further refining the architecture and expanding its capabilities to meet the evolving needs of web applications and services.