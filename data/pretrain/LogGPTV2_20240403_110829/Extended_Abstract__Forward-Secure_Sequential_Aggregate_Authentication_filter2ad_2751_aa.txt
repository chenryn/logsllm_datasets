title:Extended Abstract: Forward-Secure Sequential Aggregate Authentication
author:Di Ma and
Gene Tsudik
Forward-Secure Sequential Aggregate Authentication
Di Ma, Gene Tsudik
University of California, Irvine
{dma1,gts}@ics.uci.edu
Abstract. Wireless sensors are employed in a wide range of applications. One common feature of most sensor
settings is the need to communicate sensed data to some collection point or sink. This communication can be direct
(to a mobile collector) or indirect – via other sensors towards a remote sink. In either case, a sensor might not be
able to communicate to a sink at will. Instead it collects data and waits (for a potentially long time) for a signal to
upload accumulated data directly.
In a hostile setting, a sensor may be compromised and its post-compromise data can be manipulated. One important
issue is forward security – how to ensure that pre-compromise data cannot be manipulated? Since a typical sensor
is limited in storage and communication facilities, another issue is how to minimize resource consumption due to
accumulated data. It turns out that current techniques are insufﬁcient to address both challenges. To this end, we
explore the notion of Forward-Secure Sequential Aggregate (FssAgg) authentication Schemes. We consider FssAgg
authentication schemes in the contexts of both conventional and public key cryptography and construct a FssAgg
MAC scheme and a FssAgg signature scheme, each suitable under different assumptions. This work represents the
initial investigation of Forward-Secure Aggregation and, although the proposed schemes are not optimal, it opens a
new direction for follow-on research.
KEYWORDS: sensors, signature schemes, authentication schemes, key compromise, forward security, aggregate
signatures.
1 Introduction
Wireless sensors can enable large-scale data collection in many different settings, scenarios and applica-
tions. Examples abound in all kinds of tracking and monitoring applications in both civilian and military
domains. A Wireless Sensor Network (WSN) might contain hundreds or thousands of low-cost sensors and
one or more sinks or data collectors. Individual sensors obtain measurements from the environment and (pe-
riodically or upon request) forward the accumulated data to the sink. A sink might be a gateway to another
network, a powerful data processing or storage center, or an access point for human interface. (Some WSNs
support user-driven data queries and commands through the sink.)
In this paper, we are motivated by two types of envisaged sensor scenarios:
A Sensors do not communicate with each other, i.e., there is no sensor network as such. Instead, a mobile
device that we call a collector.1 A collector might not be fully trusted; it might be nothing more than an
intermediary between sensors and an off-line (trusted) sink.
B Sensors communicate but they do not actually “network”, i.e., communication is restricted to mere
forwarding of information from other sensors towards a sink or sinks. In this context, a sink is a fully
trusted entity.
In either case, a sensor might not be able to communicate to a sink at will. Instead, it collects data and waits
(potentially, for a long while) either for a signal – or some pre-determined time – to upload accumulated
data to a collector or a sink. Put another way, there is no real-time reporting of sensed information between
sensors and a collector or a sink.
Data integrity and (sensor) authentication are essential security services required in most sensor appli-
cations [19] since sensors are often used in unattended and adversarial environments. They interact closely
1 We use the terms “collector” and “sink” to distinguish between entities that gather data in the two scenarios.
with the physical environment and with people, thus being subject to a wide range of security risks. An
attacker may inject its own data as well as modify and delete data produced by sensors. As a result, sensor
data must be authenticated before being processed and used for whatever purposes. Particularly in critical
settings (e.g., radiation, seismic or intrusion monitoring) strong data integrity and authenticity guarantees
are needed. Standard textbook techniques, such as MACs (Message Authentication Codes) or digital signa-
tures, can be used in applications where data integrity/authenticity is required. However, several obstacles
hinder straight-forward usage of these standard techniques.
One important issue is the threat of sensor compromise and the consequent exposure of secret keys
used for MACs or signatures.2 Key exposure makes it easy for the adversary to produce fraudulent data
ostensibly sensed after the compromise. Moreover, it also allows the adversary to produce fraudulent data
before the compromise, assuming it has not been reported to a sink or a collector. This is clearly undesirable.
Fortunately, there are so-called forward-secure cryptographic techniques that allow the signer (sensor, in
our case) to periodically evolve its secret key such that compromise of a current secret key cannot lead to
compromise of secret key(s) used in past periods. It is therefore possible to mitigate the effects of sensor
compromise by using a sense-and-sign approach. In other words, a sensor does not wait to sign (or MAC)
ALL sensed data until it has to send it, since doing that would open all collected data to attack. Instead, it
signs data as soon as it is sensed and evolves the signing key.
Another important issue is storage and communication overheads. Clearly, on-board storage is a lim-
ited commodity in most sensor settings and it is natural to minimize its size and consumption. In both
scenarios A and B outlined above, a sensor gradually accumulates data (readings, measurements), stores it
locally and – at some later time – sends it to a sink. We are not concerned in minimizing storage consumed
by the actual data; that is an interesting topic in its own right. Instead, we are interested in minimizing
storage due to authentication tags (i.e., MACs or signatures) since they represent pure overhead. If key com-
promise and forward security were not an issue, minimizing storage overhead would be trivial – a sensor
simply signs or MACs all accumulated data once, before forwarding it to the sink. At the same time, forward
security forces us to compute authentication tags per sensed unit of data, which we refer to as a message
from now on.3 Therefore, a sensor accumulates as many authentication tags as messages while it waits for
a time or a signal to off-load the data. This is problematic since even the size of a MAC (and certainly of a
signature) can easily exceed the size of actual data, i.e., messages. At the minimum, each 128 bits per MAC
or 160 bits per signature would need to be allocated.
Communication overhead is a related, though perhaps not as critical, matter. In scenario A, a sensor
uploads accumulated messages directly to the collector. Thus, the communication overhead due to sending
multiple authentication tags is less problematic than in Scenario B where the same overhead affects all
sensors that forward information from other sensors towards the sink. (We refer to the oft-cited folklore
in [3] which claims that wireless transmission of a single bit can consume over 1, 000 times of the energy of
a single 32-bit computation.)
Reconciling the need to minimize storage (and communication) overhead with the need to mitigate
potential key compromise (i.e., obtain forward security) is precisely the topic of this paper.
Contributions: We explore Forward Secure Sequential Aggregate (FssAgg) authentication schemes that
simultaneously mitigate the threat of key compromise and achieve optimal storage and communication efﬁ-
ciency. An FssAgg authentication scheme allows a signer to combine multiple authentication tags generated
in different key/time periods into a single constant-size tag. Compromise of the current key does not allow
2 Building an inexpensive tamper-proof, or even tamper-resistant, sensor is a much greater challenge.
3 Note that the duration of the key evolvement period in a forward-secure scheme does not have to match the time between
successive sensor readings; however, to simplify the discussion, we assume that it does.
2
the attacker to forge any aggregate authentication tag containing elements pre-dating the compromise. Any
insertion of new messages, modiﬁcation and deletion (including truncation) of existing messages makes
the aggregate tag demonstrably invalid. We consider this topic in both conventional and public key cryp-
tographic settings and construct two practical schemes: an FssAgg MAC scheme as well as an FssAgg
signature scheme.
Organization: After a brief overview of related work in Section 2, we introduce the model and security
requirements in Section 3. Next, we present an FssAgg MAC scheme in Section 4 and an FssAgg signature
scheme in 5. Section 6 concludes the main body of the paper. Appendix A presents a brief performance
evaluation of the FssAgg signature scheme, followed by appendices B and C that contain, respectively, the
security model and a proof sketch for the same scheme.
2 Related Work
NOTE: this section is kept brief due to dire space limitations.
The topic of this paper is quite distinct from data aggregation in sensor networks [8, 11, 12, 20, 21]. In
an FssAgg authentication scheme, authentication objects are aggregate while data records (messages) are
kept intact. In a data aggregation scheme, individual data information is lost and the aggregate value is used
to provide or derive statistical information, such as mean, median or max/min. Data aggregation schemes
are very useful, but unsuitable for applications, where the availability of individual sensed data records is
required (e.g., temperature pattern sensing in a nuclear reactor).
The notion of forward security was introduced in the context of key-exchange protocols [10] and lagter
adapted to signature schemes. Forward-secure signatures were ﬁrst proposed by Anderson in [2] and subse-
quently formalized by Bellare and Miner in [4]. The main challenge is efﬁciency: an ideal scheme must have
constant (public and secret) key size, constant signature size as well as constant signing, veriﬁcation, and
(public and secret) key update operations. Several schemes proposed in the literature satisfy some or most
of these requirements [1, 4, 13–15]. Also, in [5], Bellare and Yee examine forward security in the context of
conventional cryptography.
Several aggregate signature schemes have been proposed in the literature, starting with the initial seminal
result by Boneh, et al. [6, 16, 17]. An aggregate signature scheme combines k signatures generated by n
signers (k ≥ n) into a single and compact aggregate signature that, if veriﬁed, simultaneously veriﬁes every
component signature. Interestingly, our goal is to aggregate signatures by the same signer (e.g., a sensor),
however, these signatures are computed in different periods, and with different keys. Thus, our goals impose
no additional restrictions on existing deﬁnitions of aggregate signatures. Also, our envisaged schemes do not
require simultaneous aggregaqtion of multiple signatures as in [6]; instead, we need sequential (incremental)
aggregation as in [17] or [16].
3 Deﬁnitions and Properties
In this section we present some informal deﬁnitions and properties.4 An FssAgg signature scheme is com-
posed of the following algorithms. They are quite similar to those in sequential aggregated signature schemes,
notably, the recent scheme of Lu, et al. [16].
The key generation algorithm FssAgg.Kg is used to generate public/private key-pairs. Unlike the one
used in [16], it also takes as input T – the maximum number of time periods (key evolvements).
4 Our presentation is informal to conserve very limited space.
3
The sign-and-aggregate algorithm FssAgg.Asig takes as input a private key, a message to be signed and
a signature-so-far (an aggregated signature computed up to this point). It computes a new signature on the
input message and combines it with the signature-so-far to produce a new aggregated signature. As the ﬁnal
step of FssAgg.Asig, it runs a key update subroutine FssAgg.Upd which takes as input the signing key for the
current period and returns the new signing key for the next period (not exceeding T .) We make key update
part of the sign-and-aggregate algorithm in order to obtain stronger security guarantees (see below).
The verify algorithm FssAgg.Aver, on input of a putative aggregate signature, a set of presumably
signed distinct messages and a public key, outputs whether the aggregate is valid. (The distinction from
non-forward-secure schemes is that we use a single public key, as there is only one signer.)
the new signing key for the next period (provided that the current period does not exceed T − 1.)
The key update algorithm FssAgg.Upd takes as input the signing key for the current period and returns
A secure FssAgg scheme must satisfy the following properties:
1. Correctness: Any aggregated signature produced with FssAgg.Asig must be accepted by FssAgg.Aver.
2. Unforgeability: Without the knowledge of any signing keys (for any period), no adversary can compute
an aggregate signature on any message or set of messages.
3. Forward-security: No adversary who compromises the signer’s i-th signing key can generate a valid
aggregate signature containing a signed message – for any period j < i – except the aggregate-so-far
signature generated by the signer before the compromise, i.e., the aggregated signature the adversary
ﬁnds upon compromise.
Note that the last property subsumes security against truncation or deletion attacks. An adversary who com-
promises a signer has two choices: either it includes the intact aggregate-so-far signature in future aggre-
gated signatures, or it ignores the aggregate-so-far signature completely and start a brand new aggregated
signature. What it cannot do is selectively delete components of an already-generated aggregate signature.
4 A Forward-Secure Sequential Aggregate MAC Scheme
We now present a trivial FssAgg MAC scheme. It can be used to authenticate multiple messages when
public (transferrable) veriﬁcation is not required. As such, it is well-suited for scenario B in Section 1 where
a sensor communicates (via other sensors) to the sink. We ﬁrst present the scheme and then show how to
apply it to the envisaged sensor environment.