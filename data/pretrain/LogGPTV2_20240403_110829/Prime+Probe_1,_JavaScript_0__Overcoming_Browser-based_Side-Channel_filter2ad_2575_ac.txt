# Optimized Text

## Table 2: Closed-World Accuracy (Percent) Across Different Microarchitectures

| Attack Technique | Intel i5-3470 | AMD Ryzen 9 3900X | Apple M1 | Samsung Exynos 2100 |
|------------------|---------------|--------------------|-----------|----------------------|
| Cache Occupancy  | 87.5          | 84.5               | 97.8      | 95.3                 |
| Sweep Counting   | 45.8          | 69.7               | 98.1      | 91.5                 |
| DNS Racing       | 50.8          | 5.8                | 83.5      | 37.1                 |
| String and Sock  | 72.0          | 16.3               | 97.9      | 85.5                 |
| CSS Prime+Probe  | 50.1          | —                  | 32.6      | —                    |
| Top-5 Accuracy (%) | 97.0        | 74.3               | 97.8      | 78.5                 |

## Table 3: Temporal Accuracy of Attack Techniques Across Different Microarchitectures

| Attack Technique | Intel i5-3470 | AMD Ryzen 9 3900X | Apple M1 | Samsung Exynos 2100 |
|------------------|---------------|--------------------|-----------|----------------------|
| Cache Occupancy  | 2.9 ms        | 100.0 ms           | 20.3 ms   | 1.5 ms               |
| Sweep Counting   | 0.3 ms        | 6.0 ms             | 100.0 ms  | 1.8 ms               |
| DNS Racing       | 2.9 ms        | 100.0 ms           | 2.6 ms    | 2.9 ms               |
| String and Sock  | 6.7 ms        | 100.0 ms           | 0.3 ms    | 2.5 ms               |
| CSS Prime+Probe  | 33.8 ms       | 100.0 ms           | 4.0 ms    | 100.0 ms             |

## 3.5 Empirical Results

We present the classification results of the attacks described in this section across different CPU architectures. Table 2 summarizes the accuracy of the most likely prediction of the classifier (Top-1), as well as the likelihood that the correct answer is one of the top 5 results (Top-5). Table 3 shows the temporal resolution of each measurement method, calculated as the time it takes to capture the entire trace, divided by the number of points in the trace.

### Cache Occupancy
This method uses JavaScript code for both iterating over the eviction buffer and measuring time. The JavaScript code iterates over the buffer using the technique of Osvik et al. [58] to avoid triggering the prefetcher and is written to prevent speculative reordering from triggering the timing measurement before the eviction is completed. As shown in the results, this approach provides good accuracy on all evaluated targets, achieving a top-5 accuracy of over 90% across all platforms.

### Sweep Counting
This method is designed for situations with lower clock resolution but still uses JavaScript for cache eviction and timing measurement. The added limitation translates to a loss in accuracy for most targets, with the Apple M1 target being the least affected by the reduced timer resolution.

### DNS Racing
This method uses JavaScript for cache eviction but switches to the network for timing measurements. The added limitation translates to a loss in accuracy for most targets, largely due to the added jitter of the network. The targets most severely affected were ARM-based mobile phones connected via wireless links and AMD devices in a third-party data center with uncontrollable network conditions. We hypothesize that these networking circumstances led to jitter related to DNS responses, causing the severe loss of accuracy for these targets.

### String and Sock
This method repurposes the browser’s string-handling code for cache eviction. Unlike the adversary-controlled code used for mounting the cache occupancy attack, this third-party code naturally makes no attempt to trick the processor’s cache management heuristics. As expected, this resulted in lower performance for the Intel, AMD, and Samsung targets. However, the Apple M1 target did not experience a loss in accuracy, suggesting that naively accessing a large block of memory is an efficient way to evict the cache on this target.

### CSS Prime+Probe
As CSS Prime+Probe requires no JavaScript, we tested this attack in the presence of the NoScript [51] extension, applying the countermeasure only to our attacker website. Since our attack does not use JavaScript at all, NoScript does nothing to prevent it. The accuracy obtained using this attack was comparable to the String and Sock attack, showing that JavaScript or other mobile code is not necessary for a successful side-channel attack.

On the Intel target, the accuracy was similar to DNS racing, which uses JavaScript for cache evictions. On the M1 target, there was still a significant amount of data leaked, but the accuracy was less than the DNS racing attack. On the ARM and AMD targets, we were unable to extract any meaningful data using this method. As our CSS Prime+Probe also relies on DNS packets, we conjecture that this is due to the network conditions of the devices under test or particular aspects of the micro-architecture that make cache eviction less reliable.

### Architectural Agnosticism
The results show that we were able to mount our side-channel attack across a large variety of diverse computing architectures. Specifically, the Intel, AMD, ARM, and Apple target architectures all incorporate different design decisions concerning cache sizes, cache coherency protocols, and cache replacement policies, as well as related CPU front-end features such as the prefetcher. The reduced requirements of our attack made it immediately applicable to all these targets, with little to no tuning of the attack’s parameters and without the need for per-device microarchitectural reverse engineering.

### Attacking Apple’s M1 Architecture
To the best of our knowledge, this is the first side-channel attack on Apple’s M1 CPU. The memory and cache subsystem of this new architecture have never been studied in detail, leading to hopes for a "grace period" where attackers would find this target difficult to conquer. However, as this work shows, the novelty and obscurity of this new target do little to protect it from side-channel attacks. The M1 processor is rumored to toggle between two completely different memory ordering mechanisms based on the program it is executing. Another noteworthy outcome from the M1 evaluation is that both the native arm64 binary of Chrome and the standard MacOS Intel x64 Chrome binary running under emulation were vulnerable to the attacks described here.

Finally, observing Table 2, it can be seen that our attacks are, somewhat ironically, more effective on the M1 architecture than on other architectures, including the relatively well-studied Intel architecture. Intel x86 CPUs are known to have advanced cache replacement and prefetcher policies, which have been shown in other works to anticipate and mitigate the effect of large memory workloads on cache performance [8, 62, 76]. We hypothesize that the M1 architecture uses less advanced cache heuristics, resulting in higher signal-to-noise ratios for the attack on these newer targets and, therefore, higher overall accuracy.

## 4 Attack Scenarios

### 4.1 Closed-World Evaluation on Newer Intel Architectures
We begin by reproducing the closed-world methodology and results of Section 3 on a newer Intel processor. Specifically, we performed the experiments on an Apple MacBook Pro featuring an Intel Core i5-7267 CPU with a 4 MiB last-level cache and 16 GiB memory, running macOS 10.15 and Chrome version 81. Despite the microarchitectural changes across four CPU generations and the different cache size, the results were very similar to those achieved on the older i5-3470 (72.0±1.3% for String and Sock and 50.1±2.3 for CSS Prime+Probe), with the difference being well within statistical confidence levels. Thus, we argue that our results transfer across a variety of Intel architectures.

### 4.2 Open-World Evaluation
A common criticism of closed-world evaluations is that the attacker is assumed to know the complete set of websites the victim might visit, allowing the attacker to prepare and train classifiers for these websites [38]. For a more realistic scenario, we followed the methodology proposed by Panchenko et al. [59] and performed an open-world evaluation, collecting 5000 traces of different websites used in [63], in addition to the Alexa Top 100 websites collected in the closed-world setting. We used the same data collection setting as for the closed-world collection (see Section 4.1).

In this setting, the attacker's goal is to first detect if the victim visits one of the Alexa Top 100 sites and secondly to identify the website if it is indeed in the list. A naive classifier can always claim that the site is not one of the Alexa Top 100, achieving a base rate of 30%, resulting in slightly higher accuracy scores for any classifier. In this open-world setting, the String and Sock and CSS Prime+Probe attacks obtained accuracy results of 80% and 61%, respectively. The data in this setting is unbalanced—there are more traces from "other" websites than from each of the Alexa Top 100 sites. For such data, the F1 score may be more representative than accuracy. The F1 scores were 67% and 45% for String and Sock and CSS Prime+Probe, respectively. These are similar to those of the closed-world settings (70% and 48%). We can conclude that our attacks are as effective in the open-world as in the closed-world setting.

### 4.3 Robustness to Jitter
DNS racing, String and Sock, and CSS Prime+Probe use an external server for time measurement, making these techniques inherently sensitive to jitter naturally present on the network between the victim and the web server.

#### Measuring Network Jitter
We measured the network jitter in two scenarios. First, we performed a local measurement where the target and an attacker-controlled WebSockets server were located on the same institutional network at Ben Gurion University, Israel. Next, we performed an inter-continental measurement where the attacker was located in Israel, and the server was located in the United States (University of Michigan). Figure 5 shows the distribution of the jitter observed while sending 100 packets per second for 30 seconds to the WebSockets servers. We found that the jitter in the local network had a standard deviation of 0.17 ms, whereas the jitter to the cross-continent server had a standard deviation of 0.78 ms.

#### Evaluating Robustness to Jitter
Having established the typical jitter between the target and the external server, we evaluated the robustness of our techniques to various levels of jitter. To achieve this, we artificially injected different amounts of jitter into the closed-world dataset of Section 4.1. The jitter was injected by adding random noise to the timing of the monitored events. This noise was selected at random from a normal distribution with a mean of zero and a standard deviation varying from 1 to 25 milliseconds, with higher standard deviations corresponding to larger jitter.

As Figure 4 shows, both the String and Sock and CSS Prime+Probe attacks retained most of their accuracy even if the jitter was an order of magnitude larger than the ones measured on a real network. We note that the DNS Racing attack is more sensitive to added jitter, as it relies on a binary race condition to determine timing.

## 5 Analysis of an API-Based Defense

Having established the efficacy of our techniques on various microarchitectures, in this section, we evaluate our attacks in the presence of increasing levels of browser hardening.

### 5.1 Chrome Zero Overview
Chrome Zero implements a list-based access control policy, dictating actions to be taken when a website invokes a JavaScript function or accesses an object property. When an access is detected, Chrome Zero either allows the access, modifies it, or completely blocks the access based on the policy chosen for the particular website. Chrome Zero also supports the option of asking the user about the action to take.

#### Default Policies
Chrome Zero offers five preset protection policies for the user to choose from: None, Low, Medium, High, and Paranoid. As the protection policy level increases, Chrome Zero imposes increasingly severe restrictions on JavaScript capabilities and resources, including blocking them altogether. Table 5 summarizes which capabilities and resources are available at each protection level.

#### Performance
Schwarz et al. [67] claim that Chrome Zero blocks all the building blocks required for successful side-channel attacks, including high-resolution timers, arrays, and access to hardware sensors. They also claim that Chrome Zero prevents many known CVEs and 50 percent of zero-day exploits published since Chrome 49. Finally, Schwarz et al. [67] benchmarked Chrome Zero’s performance and performed a usability study, concluding that it significantly enhances security with minimal impact on performance and usability.