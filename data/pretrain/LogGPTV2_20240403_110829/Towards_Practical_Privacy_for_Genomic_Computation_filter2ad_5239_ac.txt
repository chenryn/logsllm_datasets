and is provided in appendix A.
Protocol 3 is described in Figure 4 and proceeds in
three phases similar to Protocol 2. Phase 0 and 1 of Pro-
tocol 3 are exactly the same as Protocol 2. In Phase 2,
we compute all other values on the grid using the recur-
rence implicit in the proof of Lemma 1.
Consider the grid shown in Figure 3. First, the ran-
dom shares of the values that correspond to left and bot-
tom edge of the grid are computed. Now assume that we
1Our protocol can be easily extended to remove the assumption that
k divides both n and m.
X 
Y
W
Z
A
B
D
C
Figure 3. Example grid.
want to compute the random shares of the value corre-
sponding to point A. Using Lemma 1, the value corre-
sponding to point A can be expressed as a function of the
values corresponding to sides CB and DC, α[CB], and
β[DC] (we are abusing the notation slightly by using
CB to denote all indices that lie on the segment CB).
A straightforward implementation of Protocol 3 takes
O( mn
k2 ) iterations. However, using the optimization dis-
cussed in the previous subsection the number of rounds
can be brought down to O( m+n
k ).
4 Privacy-Preserving Smith-Waterman
We now give a privacy-preserving version of the
Smith-Waterman algorithm for comparing genome se-
quences [28]. This algorithm is more sophisticated than
the edit distance algorithm, because the cost of delete,
insert, and replace operations may no longer be equal
to 1, but determined by special functions.
As before, let α and β be two strings over the al-
phabet Σ. The Smith-Waterman algorithm uses a cost
function c and a gap function g. The cost function
c : Σ × Σ → (cid:8) associates a cost c(u, v) with each pair
(u, v). Typically, c(u, v) has the following form:
(cid:1)
c(u, v) =
a
−b
if u = v
if u (cid:3)= v
If a symbol is deleted or inserted, a special symbol
“−” is inserted. For example, if the fourth symbol is
deleted from CTGTTA, it is written as CTG−TA. A
sequence of “−” is called a gap. Gaps are scored using
a gap function g, which typically has an afﬁne form:
g(k) = x + y(k − 1)
In the above equation k is the size of the gap (number of
consecutive “−” in a sequence), while x > 0 and y > 0
are constants.
Deﬁne H(i, j) as the following equation:
max{ 0, ∆(α[x··· i], β[y ··· j])
for 1 ≤ x ≤ i and 1 ≤ y ≤ j }
222
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
• Phases 0 and 1 are the same as in Protocol 2.
• Phase 2: Compute random shares for values on the grid.
We compute the random shares for all values on the grid in the row-major order. Consider a value D(i, j) on the
k (cid:10). The reader can check that
grid and the rectangle rect(D(i, j, ), l, w) with l = i−k(cid:9) i−1
all values in the grid rect(D(i, j, ), l, w) lie on the grid of granularity k. Let CD(i,j) be the circuit for computing
D(i, j) from inputs bottom(D(i, j), l, w), left(D(i, j), l, w), α[i − l + 1 ··· i], and β[j − w + 1 ··· j]. Note that
circuit CD(i,j) can be constructed by mimicking the proof of Lemma 1. Recall that we also have random shares
for the values in the sets bottom(D(i, j), l, w) and left(D(i, j), l, w). We can now compute the random shares
for D(i, j). Essentially this is similar to Phase 2 of Protocol 2, but using CD(i,j) instead of Cmin3 .
k (cid:10) and w = j−k(cid:9) j−1
Figure 4. Protocol 3.
Recall that α[x··· i] is the string α[x]α[x + 1]··· α[i].
The distance between strings α[x··· i] and β[y ··· j] ac-
cording to the cost function c and gap function g is de-
noted by ∆(α[x··· i], β[y ··· j]). The Smith-Waterman
distance between two strings α and β (denoted by
δSW (α, β)) is simply H(n, m), where n and m are the
lengths of the two strings α and β. Values H(i, 0) and
H(0, j) are deﬁned to be zero for 0 ≤ i ≤ n and
0 ≤ j ≤ m. For 1 ≤ i ≤ n and 1 ≤ j ≤ m, H(i, j) is
deﬁned using the following recursive equation:
H(i, j) = max [ 0
max1≤o≤i{H(i − o, j) − g(o)},
max1≤l≤j{H(i, j − l) − g(l)},
H(i − 1, j − 1) + c(α[i], β[j]) ]
We now adapt the privacy-preserving protocols for
computing the edit distance to compute the Smith-
Waterman distance. Note that the size of each element
of the matrix is no longer log(n + m) bits, but depends
on the speciﬁc cost function used.
As before, Protocol 1 requires a single circuit CH(i,j)
for computing H(i, j) using the recursive equation. This
circuit, however, is signiﬁcantly more complex. Unlike
in the edit distance protocol, where σ = 0 if α[i] = β[j]
and 1 otherwise, σ now is an arbitrary cost function
c(α[i], β[j]). Therefore, the circuit has to perform a ta-
ble lookup on c(α[i], β[j]) to determine the lowest cost
alignment. Likewise, the gap function, which is a con-
stant 1 for edit distance, is replaced by the gap value
of the scoring function for Smith-Waterman. By con-
vention, lower numbers represent higher costs (higher
numbers represent a similarity score), so a maximum-
of-three circuit is used instead of minimum-of-three.
Protocol 3 can also be easily adapted for computing
the Smith-Waterman distance. The key observation is
that if H(i, j) lies on the grid, then the values used in
the recursive equation
{H(i − o, j) | 1 ≤ o ≤ i}
{H(i, j − l) | 1 ≤ l ≤ j}
also lie on the grid.
Protocol 2 can be adapted to compute the Smith-
Waterman distance with signiﬁcant space savings vs.
Protocols 1 and 3. Unlike the edit distance protocol,
where the cumulative size of circuits used by Protocol
2 is the same as the size of the single circuit used by
Protocol 1, Protocol 2 for Smith-Waterman can avoid
“embedding” the values of the cost and gap functions in
the circuit.
As in the case of edit distance, Alice and Bob must
maintain a (n + 1) × (m + 1) matrix HA and HB, re-
spectively, with the following invariant:
H(i, j) = HA(i, j) ⊕ HB(i, j)
In Phase 0, Alice ﬁlls in HA(i, 0) and HA(0, j) with ran-
dom values and sends them to Bob. Bob ﬁlls HB(i, 0)
with HA(i, 0) and HB(0, j) with HA(0, j).
Recall that during Phase 1 of Protocol 2 for com-
puting the edit distance (see Section 3.4), a circuit to
test equality of Alice’s and Bob’s respective characters
is evaluated. In Protocol 2 for Smith-Waterman, OT 1|Σ|
is performed instead. Alice, acting as the sender, sends
values v1, . . . , v|Σ|, where vl = r − c(α[i], β[l]) and r
is Alice’s random share of the current matrix element.
Bob, acting as the chooser, selects the element with in-
dex β[j], thus obtaining r− c(α[i], β[j]). In Phase 2, Al-
ice and Bob’s shares are input into a maximum-of-three
circuit which computes and shares the next value of the
dynamic programming matrix. The remaining details of
the protocol are the same as for edit distance.
5 Generalization to Privacy-Preserving
Dynamic Programming
We now generalize the protocols of Section 3 to ar-
bitrary dynamic programming problems. Let P(x, y) be
a problem with two inputs x and y, e.g., in the edit dis-
tance case, x and y are the two strings. Typically, a dy-
223
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
namic programming algorithm AP for problem P has
the following components:
• A set S of sub-problems and a dependency relation
R ⊆ S × S between the sub-problems.
Intuitively,
(cid:2)) ∈ R means that the sub-problem s
(cid:2)
(s, s
depends on
the sub-problem s. If there is a dependency between s
, we write it as s → s
(cid:2)
. In the case of the prob-
and s
lem of computing the edit distance between two strings
α and β of length n and m, the set of sub-problems
is [0,··· , n] × [0,··· , m]. For all sub-problems (i, j)
such that i (cid:3)= 0 and j (cid:3)= 0, we have the following de-
pendencies: (i − 1, j) → (i, j), (i, j − 1) → (i, j),
and (i − 1, j − 1) → (i, j). The base sub-problems are
s ∈ S such that they have no dependencies. For the edit
distance problem, the base sub-problems are:
(cid:2)
{(i, 0) | 0 ≤ i ≤ n}
{(0, j) | 0 ≤ j ≤ m}
We also assume that there is a unique root sub-problem
root ∈ S such that there does not exist a sub-problem
that depends on root. For the edit distance problem, the
unique root sub-problem is (n, m).
• Each sub-problem s is assigned a value val(s). The
goal is to compute val(root). The function val from S
to (cid:8) assigns values to sub-problems so that it satisﬁes
the following properties:
(cid:2)
s
|
• For all base sub-problems s ∈ S, val(s) is deﬁned.
• Let s ∈ S be a non-base sub-problem. De-
ﬁne pred(s) as all predecessors of s, i.e., the set
(cid:2) → s}. As-
pred(s) is deﬁned as {s
sume that pred(s) is equal to {s1,··· , sk}. There
is a recursive function f deﬁning val(s) in terms
of val(s1), val(s2),··· , val(sk), s(x), and s(y),
where s(x) and s(y) are parts of the input x and
y that are relevant to the sub-problem s. In the case
of the edit distance problem, val((i, j)) is equal to
D(i, j). The values for the base and non-base sub-
problems for the edit distance problem are deﬁned
in equations 1 and 3 in Section 3.1.
Consider a problem P(x, y) with two inputs x and
y. Assume that problem P has a dynamic programming
algorithm AP with the space of sub-problems S. We
now design a privacy-preserving protocol for P(x, y),
where Alice has input x and Bob has input y.
: S → (cid:8) assigns a value
Protocol 1: Recall that val
to each sub-problem. Let s be a sub-problem and Cs
be the circuit with inputs s(x) and s(y) that computes
val(s). The circuit Cs can be constructed using the re-
cursive equation f for deﬁning the value of non-base
(cid:2)
that
sub-problems and the circuits for sub-problems s
are predecessors of s. Assume that we have constructed
a circuit Croot for the root sub-problem. Using the cir-
cuit Croot and standard protocols, we can privately com-
pute the val(root).
Protocol 2: In this protocol, we randomly split val(s)
for all sub-problems. We denote the two shares of val(s)
by val A(s) and val B(s). Assume that we have ran-
domly split val(s) for all base sub-problems s. Consider
a sub-problem s such that pred(s) = {s1,··· , sk}.
Assume that we have computed random shares val A(si)
and val B(si) for val(si) (where 1 ≤ i ≤ k). Recall
that we have the following recursive equation describ-
ing val(s):
val(s) = f(val(s1),··· , val(sk), s(x), s(y))
Since we have computed the random shares for val(si)
(1 ≤ i ≤ k), we can compute the random shares
of val(s). At the end of the protocol, val A(root) ⊕
val B(root) gives the desired result.
Protocol 3: Protocol 3 depends heavily on the structure
of the space S of sub-problems. For example, for the
edit distance problem, Protocol 3 fundamentally relies
on the matrix structure of S.
6 Experimental Evaluation
In this section we present experimental results for our
protocols for computing the edit distance and the Smith-
Waterman distance between two strings. For edit dis-
tance, our tests were performed on random strings. For
the Smith-Waterman distance, we aligned representative
protein sequences from the Pfam database of protein
sequences [2] in protein family QH-AmDH gamma
(PF08992), which is a crystalline quinohemoprotein
amine dehydrogenase from Pseudomonas putida. The
average length of these proteins is 78 amino acids. In
order to demonstrate the scalability of the algorithm, we
truncate the proteins to various lengths as shown in ﬁg-
ure 6. For the cost function, we used the BLOSUM62
matrix [7] which is a (20, 20) substitution matrix based
on log-odds statistics derived from experimental protein
data which approximates the probability of substitution
of amino acids in homologous proteins.
It is a com-
monly used metric in genomic research.
6.1 Edit distance
We implemented the standard methods for secure cir-
cuit evaluation, i.e., the Yao’s “garbled circuits” method
and secure computation with shares (see Section 2). We
224
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
used the oblivious transfer protocol due to Naor and
Pinkas [22]. For the minimum-of-three computation, we
used the lowest-price auction circuit of Kurosawa and
Ogata [18]. Using these primitives, we implemented
the three protocols of Section 3. For comparison pur-
poses, we also implemented the edit distance protocol
of Atallah et al. [1], using the Lin-Tzeng construction
for the millionaires’ protocol [19] and Paillier homomor-
phic encryption [24] (see appendix C). All of the code
was written in Java.
The experiments were executed on two 3-GHz Pen-
tium 4 machines, with 2 Gigabytes of memory, and con-
nected via a local LAN. Using this setup, we obtained
measurements (network bandwidth and execution times)
for the three protocols on various problem sizes. The
reason for performing the experiment on a local LAN is
to provide a “best-case” result for execution times in an
environment where network bandwidth is not a bottle-
neck. Because the bandwidth numbers presented do not
depend on the experimental setup, execution times for
bandwidth-limited networks can be estimated from the
numbers presented here.
The size of the problem instance is (n, m), where
n and m are the sizes of the two strings. For simplic-
ity, all experiments were performed on problems where
m = n. We used the alphabet size of 256 in our exper-
iments. The main conclusions that can be drawn from
our measurements are:
• Protocol 1 (generic SMC) is very fast. Protocol 1 is
ideal for small strings because the entire computa-
tion is performed in one round, but the circuit size
is extremely large for longer strings. Our prototype
circuit compiler can compile circuits for problems
of size (200, 200) but uses almost 2 GB of memory
to do so. Signiﬁcantly larger circuits would be con-
strained by available memory for constructing their
garbled versions.
• Protocol 3 is most suitable for large problems. Pro-
tocol 3 uses the grid structure of the problem space,
which makes it most suitable for large instances.
For example, a problem instance of size (500, 500)
takes under an hour. Asymptotically, Protocol 3 has
the same performance as Protocol 2, but in practice
it is substantially faster.
• Bandwidth requirements are asymmetrical. Be-
cause Alice sends the majority of data in the Naor-
Pinkas oblivious transfer [22], bandwidth require-
ments are asymmetrical. Speciﬁcally, Alice sends
far more data than she receives, while the opposite
is the case for Bob. This fact can be exploited if
the communication channel is asymmetric, such as
with ADSL or cable lines, which typically offer a
greater bandwidth for transmitting data in one di-
rection than in the other. In this case, Alice’s role
can be assigned to the party that has higher upload
bandwidth.
• The edit distance protocol by Atallah et al. [1] is
not practical. In our edit-distance experiments, the
protocol of [1] performed at least an order of mag-
nitude worse than our protocols. This is because
many large numbers (Paillier ciphertexts) are com-
puted and sent multiple times by both Alice and
Bob at each step. For example, on a problem in-
stance of size (25, 25) the protocol by Atallah et al.
took 5 and half minutes. Our Protocol 3 took 14
seconds on the same problem instance.
Figure 5 shows the execution times for our three pro-
tocols. Clearly, Protocol 3 scales the best as the problem
size increases. Protocol 1 is suitable for small problems.
Protocol 2 has a larger execution time, but only requires
limited bandwidth per round. Our experimental results
conﬁrm the protocol characteristics shown in Figure 2.
Detailed results for Protocols 1 and 2 are presented in
the appendix. We discuss results for Protocol 3 in detail.