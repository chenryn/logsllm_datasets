 15.7.1 使用Eclipse开发ZooKeeper应用程序
ZooKeeper客户端支持两种语言的编程，包括Java和C，我们以Java为例介绍如何进行程序的开发。为了方便编写程序，一般习惯于使用IDE。对于Java程序来说，首选莫过于Eclipse，下面我们介绍如何使用Eclipse进行ZooKeeper程序的开发。
首先在Eclipse创建一个工程，我们命名为ZooKeeper，如图15-9所示。
图 15-9 创建ZooKeeper应用程序
在创建完工程之后，我们还不能使用ZooKeeper的类库，因此需要导入ZooKeeper的jar包。具体操作为：选中工程→右键，选择Properties→Java Build Path→Libraries→Add External JARs→定位到ZooKeeper-3.4.3安装目录，选择根目录下的zookeeper-3.4.3.jar文件→OK。如图15-10所示。
图 15-10 添加ZooKeeper的Jar包
添加完ZooKeeper的Jar包之后，可以创建ZooKeeper应用程序并引用ZooKeeper提供的类库了。该Jar文件所包含的Package如下图15-11所示。
图 15-11 ZooKeeper的Package
在所有的包中，org.apache.zookeeper和org.apache.zookeeper.data是最基本的，一般客户端应用程序的编写都要用到这两个包所提供的类，其他包相对使用的频率要小。在org.apache.zookeeper中提供了ZooKeeper客户端连接服务器的实例。一个最简单的ZooKeeper实例初始化函数包括三个参数：public ZooKeeper（String connectString, int sessionTimeout, Watcher watcher）。这里，connectString为客户端连接服务器字符串，格式为“IP/Hostname：Port”，例如“zoo1：2181”，sessionTimeout设置的是会话超时时间，watcher设置的是监视器，该监视器通过org.apache.zookeeper.Watcher进行初始化。
一个简单的应用程序如代码清单15-6所示，下面给出一个综合的例子供大家参考。
15.7.2 应用程序实例
此节将通过一组简单的ZooKeeper应用程序实例来向大家展示ZooKeeper的某些功能。这一节所实现的主要功能包括：创建组、加入组、列出组成员，以及删除组。
为了避免某些重复性的操作，我们创建了一个本应用程序的基类：ZooKeeperInstance。它主要实现了Zookeeper对象的实例化操作。详见代码清单15-9。
代码清单15-9 ZooKeeperInstance
1 package cn.edu.ruc.cloudcomputing.book.chapter15；
2
3 import java.io.IOException；
4
5 import org.apache.zookeeper.WatchedEvent；
6 import org.apache.zookeeper.Watcher；
7 import org.apache.zookeeper.ZooKeeper；
8
9 public class ZooKeeperInstance{
10//会话超时时间，设置为与系统默认时间一致
11 public static final int SESSION_TIMEOUT=30000；
12
13//创建ZooKeeper实例
14 ZooKeeper zk；
15
16//创建Watcher实例
17 Watcher wh=new Watcher（）{
18 public void process（WatchedEvent event）{
19 System.out.println（event.toString（））；
20}
21}；
22
23//初始化Zookeeper实例
24 public void createZKInstance（）throws IOException{
25 zk=new ZooKeeper（"localhost：2181"，ZooKeeperInstance.SESSION_
TIMEOUT, this.wh）；
26}
27
28//关闭ZK实例
29 public void ZKclose（）throws InterruptedException{
30 zk.close（）；
31}
32}
在ZooKeeper中的组机制也同样是通过ZooKeeper节点来实现的。一个Znode为一个目录，即代表着一个组。这里我们创建了一个名为“/ZKGroup”的组。详见代码清单15-10。
代码清单15-10 CreateGroup
1 package cn.edu.ruc.cloudcomputing.book.chapter15；
2
3 import java.io.IOException；
4
5 import org.apache.zookeeper.CreateMode；
6 import org.apache.zookeeper.KeeperException；
7 import org.apache.zookeeper.ZooDefs.Ids；
8
9 public class CreateGroup extends ZooKeeperInstance{
10
11//创建组
12//参数：groupPath
13 public void createPNode（String groupPath）throws KeeperException，
InterruptedException{
14//创建组
15 String cGroupPath=zk.create（groupPath，"group".getBytes（），Ids.OPEN_
ACL_UNSAFE, CreateMode.PERSISTENT）；
16//输出组路径
17 System.out.println（"创建的组路径为："+cGroupPath）；
18}
19
20 public static void main（String[]args）throws IOException, KeeperException，
InterruptedException{
21 CreateGroup cg=new CreateGroup（）；
22 cg.createZKInstance（）；
23 cg.createPNode（"/ZKGroup"）；
24 cg.ZKclose（）；
25}
26}
在创建组操作完成之后，我们需要将成员加入到组当中，也就是将节点加入到组节点的目录下，成为其子节点。在创建节点之前，首先需要调用exists（）函数来判断组目录是否存在。此程序中创建了一个MultiJoin（）函数，它通过一个计数器为组节点创建10个子节点。详见代码清单15-11。
代码清单15-11 JoinGroup
1 package cn.edu.ruc.cloudcomputing.book.chapter15；
2
3 import java.io.IOException；
4
5 import org.apache.zookeeper.CreateMode；
6 import org.apache.zookeeper.KeeperException；
7 import org.apache.zookeeper.ZooDefs.Ids；
8
9 public class JoinGroup extends ZooKeeperInstance{
10//加入组操作
11 public int Join（String groupPath, int k）throws KeeperException，
InterruptedException{
12 String child=k+""；
13 child="child_"+child；
14
15//创建的路径
16 String path=groupPath+"/"+child；
17//检查组是否存在
18 if（zk.exists（groupPath, true）！=null）{
19//如果存在，加入组
20 zk.create（path, child.getBytes（），Ids.OPEN_ACL_UNSAFE，
CreateMode.PERSISTENT）；
21 return 1；
22}
23 else{
24 System.out.println（"组不存在！"）；
25 return 0；
26}
27}
28
29//加入组操作
30 public void MultiJoin（）throws KeeperException, InterruptedException{
31 for（int i=0；i＜10；i++）{
32 int k=Join（"/ZKGroup"，i）；
33//如果组不存在则退出
34 if（0==k）
35 System.exit（1）；
36}
37}
38 public static void main（String[]args）throws IOException, KeeperException，
InterruptedException{
39 JoinGroup jg=new JoinGroup（）；
40 jg.createZKInstance（）；
41 jg.MultiJoin（）；
42 jg.ZKclose（）；
43}
44}
在加入组操作完成之后，我们通过getChildren（）函数来列出所有组的成员（即获取组目录下的所有孩子节点）。详见代码清单15-12：
代码清单15-12 ListMembers
1 package cn.edu.ruc.cloudcomputing.book.chapter15；
2
3 import java.io.IOException；
4 import java.util.List；
5
6 import org.apache.zookeeper.KeeperException；
7
8 public class ListMembers extends ZooKeeperInstance{
9 public void list（String groupPath）throws KeeperException, InterruptedException{
10//获取所有子节点
11 List＜String＞children=zk.getChildren（groupPath, false）；
12 if（children.isEmpty（））{
13 System.out.println（"组"+groupPath+"中没有组成员存在！"）；
14 System.exit（1）；
15}