| ?: | C条件表达式 |
| in | 数组中是否存在某键值 |
例：
```shell
awk 'BEGIN{a="b";print a=="b"?"ok":"err";}'
ok
```
```shell
awk 'BEGIN{a="b";arr[0]="b";arr[1]="c";print (a in arr);}'
0
```
```
awk 'BEGIN{a="b";arr[0]="b";arr["b"]="c";print (a in arr);}'
1
```
###  运算级优先级表 
!级别越高越优先  
级别越高越优先
## awk高级输入输出  
###  读取下一条记录 
awk中`next`语句使用：在循环逐行匹配，如果遇到next，就会跳过当前行，直接忽略下面语句。而进行下一行匹配。next语句一般用于多行合并：
```shell
cat text.txt
a
b
c
d
e
awk 'NR%2==1{next}{print NR,$0;}' text.txt
2 b
4 d
```
当记录行号除以2余1，就跳过当前行。下面的`print NR,$0`也不会执行。下一行开始，程序有开始判断`NR%2`值。这个时候记录行号是`：2` ，就会执行下面语句块：`'print NR,$0'`
分析发现需要将包含有“web”行进行跳过，然后需要将内容与下面行合并为一行：
```shell
cat text.txt
web01[192.168.2.100]
httpd            ok
tomcat               ok
sendmail               ok
web02[192.168.2.101]
httpd            ok
postfix               ok
web03[192.168.2.102]
mysqld            ok
httpd               ok
0
awk '/^web/{T=$0;next;}{print T":"t,$0;}' text.txt
web01[192.168.2.100]:   httpd            ok
web01[192.168.2.100]:   tomcat               ok
web01[192.168.2.100]:   sendmail               ok
web02[192.168.2.101]:   httpd            ok
web02[192.168.2.101]:   postfix               ok
web03[192.168.2.102]:   mysqld            ok
web03[192.168.2.102]:   httpd               ok
```
###  简单地读取一条记录 
`awk getline`用法：输出重定向需用到`getline函数`。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。
getline语法：getline var，变量var包含了特定行的内容。
awk getline从整体上来说，用法说明：
* **当其左右无重定向符`|`或` "datafile"}'
# 或
echo | awk '{printf("hello word!n") >> "datafile"}'
```
## 设置字段定界符  
默认的字段定界符是空格，可以使用`-F "定界符"`  明确指定一个定界符：
```shell
awk -F: '{ print $NF }' /etc/passwd
# 或
awk 'BEGIN{ FS=":" } { print $NF }' /etc/passwd
```
在`BEGIN语句块`中则可以用`OFS=“定界符”`设置输出字段的定界符。
## 流程控制语句  
在linux awk的while、do-while和for语句中允许使用break,continue语句来控制流程走向，也允许使用exit这样的语句来退出。break中断当前正在执行的循环并跳到循环外执行下一条语句。if 是流程选择用法。awk中，流程控制语句，语法结构，与c语言类型。有了这些语句，其实很多shell程序都可以交给awk，而且性能是非常快的。下面是各个语句用法。
###  条件判断语句 
```shell
if(表达式)
  语句1
else
  语句2
```
格式中语句1可以是多个语句，为了方便判断和阅读，最好将多个语句用{}括起来。awk分枝结构允许嵌套，其格式为：
```shell
if(表达式)
  {语句1}
else if(表达式)
  {语句2}
else
  {语句3}
```
示例：
```shell
awk 'BEGIN{
test=100;
if(test>90){
  print "very good";
  }
  else if(test>60){
    print "good";
  }
  else{
    print "no pass";
  }
}'
very good
```
每条命令语句后面可以用`;` **分号** 结尾。
###  循环语句 
### # while语句 
```shell
while(表达式)
  {语句}
```
示例：
```shell
awk 'BEGIN{
test=100;
total=0;
while(i<=test){
  total+=i;
  i++;
}
print total;
}'
5050
```
### # for循环 
for循环有两种格式：
格式1：
```shell
for(变量 in 数组)
  {语句}
```
示例：
```shell
awk 'BEGIN{
for(k in ENVIRON){
  print k"="ENVIRON[k];
}
}'
TERM=linux
G_BROKEN_FILENAMES=1
SHLVL=1
pwd=/root/text
...
logname=root
HOME=/root
SSH_CLIENT=192.168.1.21 53087 22
```
注：ENVIRON是awk常量，是子典型数组。
格式2：
```shell
for(变量;条件;表达式)
  {语句}
```
示例：
```shell
awk 'BEGIN{
total=0;
for(i=0;i<=100;i++){
  total+=i;
}
print total;
}'
5050
```
### # do循环 
```shell
do
{语句} while(条件)
```
例子：
```shell
awk 'BEGIN{ 
total=0;
i=0;
do {total+=i;i++;} while(i<=100)
  print total;
}'
5050
```
###  其他语句 
* **break**  当 break 语句用于 while 或 for 语句时，导致退出程序循环。
* **continue**  当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。
* **next**  能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。
* **exit**  语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行。
## 数组应用  
数组是awk的灵魂，处理文本中最不能少的就是它的数组处理。因为数组索引（下标）可以是数字和字符串在awk中数组叫做关联数组(associative arrays)。awk 中的数组不必提前声明，也不必声明大小。数组元素用0或空字符串来初始化，这根据上下文而定。
###  数组的定义 
数字做数组索引（下标）：
```shell
Array[1]="sun"
Array[2]="kai"
```
字符串做数组索引（下标）：
```shell
Array["first"]="www"
Array["last"]="name"
Array["birth"]="1987"
```
使用中`print Array[1]`会打印出sun；使用`print Array[2]`会打印出kai；使用`print["birth"]`会得到1987。
 **读取数组的值** 
```shell
{ for(item in array) {print array[item]}; }       #输出的顺序是随机的
{ for(i=1;i<=len;i++) {print array[i]}; }         #Len是数组的长度
```
###  数组相关函数 
**得到数组长度：** 
```shell
awk 'BEGIN{info="it is a test";lens=split(info,tA," ");print length(tA),lens;}'
4 4
```
length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。
```shell
awk 'BEGIN{info="it is a test";split(info,tA," ");print asort(tA);}'
4
```