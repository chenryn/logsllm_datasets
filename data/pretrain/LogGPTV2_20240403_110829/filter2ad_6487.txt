# WooKey: Designing a Trusted and Efficient USB Device

## Authors
- Ryad Benadjila
- Arnauld Michelizza
- Mathieu Renard
- Philippe Thierry
- Philippe Trebuchet

### Affiliation
1. ANSSI, PI:EMAIL
2. 13 December 2019

## Table of Contents
1. Introduction
2. Hardware
3. Software
4. EwoK Micro-Kernel
5. Conclusion

## 1. Introduction
### USB: Usages and Threats
- **Usages**: USB devices such as keyboards, mice, and other peripherals.
- **Threats**:
  - **Firmware**: Vulnerabilities in the firmware can be exploited.
  - **USB Controller**: Potential for BadUSB attacks.
  - **Flash Memory**: Data stored in flash memory can be compromised.

### Threat Model
- **Stealing the SD Card and Reading Data**
- **Software Attacks on the USB Key**
- **Hardware Attacks**

## 2. Open Solutions
- **USB Armory (2014)**
  - **Architecture**: Cortex-A (smartphone SoC)
  - **Complexity**: Complex architecture with non-deactivatable BootROM
  - **Cost**: Expensive
  - **Use**: Development platform
- **Nitrokey (2016)**
  - **Architecture**: AVR
  - **Encryption**: Software AES
  - **Protection**: No memory protection (MPU)
  - **Application**: Host application

## 3. The WooKey Project
- **Realizations**
  - **Programming Language**: SPARK/Ada
  - **Efficiency**: High-performance components and modules
  - **Repository**: GitHub
  - **Prototype**: Hardened micro-kernel
  - **Open Source/Hardware**: Fully open-source and hardware

### Hardware Architecture
- **Dimensions**: 66mm x 4mm
- **Memory**: 2 MB of flash, 192 kB of SRAM
- **Features**:
  - **Memory Protection Unit (MPU)**
  - **USB (FS and HS)**
  - **Hardware AES**
  - **Debug Interface Deactivation**: Effective deactivation of debug interfaces and BootROM
  - **Cost-Effective**: Easy to find and cheap (not FPGA-based)
  - **MCU**: Cortex-M4 STM32F439
- **Token Extractable**: Javacard
  - **Model**: NXP JCOP JD081
  - **Specifications**: Javacard 3.0.1, Global Platform 2.2.1
  - **Security Evaluation**: CC EAL 4+ VAN5 (protection against side-channel and fault attacks)

### Prototype
- **WooKey Prototype**: Detailed design and implementation

## 4. Firmware Architecture
### Modules and Services
- **Two-Factor Authentication**:
  - **Extractable Token**
  - **PETPin/User PIN Code**
- **Modules**:
  - **PIN Module**
  - **Token Module**
  - **SDIO Module**
  - **Crypto Module**
  - **USB Module**

### Micro-Kernel Confinement
- **Applications**:
  - **App PIN**
  - **App Token**
  - **App Crypto**
  - **App SDIO**
  - **App USB**
- **Libraries and Drivers**:
  - **USB Drivers**
  - **EwoK Micro-Kernel**
- **Memory Map**:
  - **PIN, Token, Crypto, SDIO, USB, Micro-Kernel**
- **Ada/SPARK**:
  - **Security Features**: Buffer overflows, integer overflows, dangling pointers
  - **Syscalls**: Attack surface

### Flash Memory
- **Partitions**:
  - **Partition A**: Initial bootloader, loader, and bootinfo
  - **Partition B**: Updated partition
- **Secure DFU Mode**:
  - **Updates**: Fault-resilient updates
  - **Button Press**: Required for signed and ciphered updates
  - **No Button Press**: Nominal firmware boot

## 5. Benchmarks
- **Performance**:
  - **Thumb Mode**: Read/Write performance
  - **WooKey vs. Nitrokey**:
    - **Read**: 4.4 MB/s vs. 6.2 MB/s
    - **Write**: 6 MB/s vs. 6 MB/s

## 6. Security Primitives vs. Threats
- **DFU + Signature**
- **Hardware-Assisted Cipher**
- **EwoK + Ada/SPARK**
- **Two-Factor + Strong Authentication**
- **Threats**:
  - **BadUSB + Software Attacks**
  - **Basic Hardware Attacks**
  - **Advanced Hardware Attacks**

This document provides a comprehensive overview of the WooKey project, detailing its design, security features, and performance benchmarks.