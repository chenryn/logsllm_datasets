title:Egalitarian Computing
author:Alex Biryukov and
Dmitry Khovratovich
Egalitarian Computing
Alex Biryukov and Dmitry Khovratovich, University of Luxembourg
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/biryukov
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Egalitarian computing
Alex Biryukov
University of Luxembourg
PI:EMAIL
Abstract
In this paper we explore several contexts where an ad-
versary has an upper hand over the defender by using
special hardware in an attack. These include password
processing, hard-drive protection, cryptocurrency min-
ing, resource sharing, code obfuscation, etc.
We suggest memory-hard computing as a generic
paradigm, where every task is amalgamated with a cer-
tain procedure requiring intensive access to RAM both in
terms of size and (very importantly) bandwidth, so that
transferring the computation to GPU, FPGA, and even
ASIC brings little or no cost reduction. Cryptographic
schemes that run in this framework become egalitarian
in the sense that both users and attackers are equal in the
price-performance ratio conditions.
Based on existing schemes like Argon2 and the re-
cent generalized-birthday proof-of-work, we suggest a
generic framework and two new schemes:
• MTP, a memory-hard Proof-of-Work based on the
memory-hard function with fast veriﬁcation and
short proofs. It can be also used for memory-hard
time-lock puzzles.
• MHE,
the concept of memory-hard encryption,
which utilizes available RAM to strengthen the en-
cryption for the low-entropy keys (allowing to bring
back 6 letter passwords).
Keywords: MTP, MHE, Argon2, memory-hard,
asymmetric, proof-of-work, botnets, encryption, time-
lock puzzles.
1
Introduction
1.1 Motivation
Historically attackers have had more resources than de-
fenders, which is still mostly true. Whether it is se-
cret key recovery or document forgery, the attackers are
Dmitry Khovratovich
University of Luxembourg
PI:EMAIL
ready to spend tremendous amount of computing power
to achieve the goal.
In some settings it is possible to
make most attacks infeasible by simply setting the key
length to 128 bits and higher. In other settings the secret
is limited and the best the defender can do is to increase
the time needed for the attack, but not to render the attack
impossible.
Passwords, typically stored in a hashed form, are a
classical example. As people tend to choose passwords
of very low entropy, the security designers added unique
salts and then increased the number of hash iterations.
In response the attackers switched to dedicated hardware
for password cracking, so that the price of single pass-
word recovery dropped dramatically, sometimes by a few
orders of magnitude.
A similar situation occurred in other contexts. The
Bitcoin cryptocurrency relies on continuous preimage
search for the SHA-256 hash function, which is much
cheaper on custom ASICs, consuming up to 30,000 times
less energy per solution than most efﬁcient x86 lap-
tops [2]. Eventually, the original concept of an egali-
tarian cryptocurrency [25] vanished with the emergence
of huge and centralized mining pools.
Related problems include password-based key deriva-
tion for hard-drive encryption, where the data conﬁden-
tiality directly depends on the password entropy, and
where ofﬂine attack is exceptionally easy once the drive
is stolen. Similar situation arise in the resource sharing
and spam countermeasures. In the latter it is proposed
that every user presents a certain proof (often called
proof-of-work), which should be too expensive for spam-
mers to generate on a large scale. Yet another setting
is that of code obfuscation, in which powerful reverse-
engineering/de-compilation tools can be used in order to
lift the proprietary code or secrets embedded in the soft-
ware.
USENIX Association  
25th USENIX Security Symposium  315
1.2 Egalitarian computing
Our idea is to remedy the disparity between ordinary
users and adversaries/cheaters, where latter could use
botnets, GPU, FPGA, ASICs to get an advantage and run
a cheaper attack. We call it egalitarian computing as it
should establish the same price for a single computation
unit on all platforms, so that the defender’s hardware is
optimal both for attack and defence. Equipped with egal-
itarian crypto schemes, defenders may hope to become to
be on par with the most powerful attackers.
The key element of our approach is large (in size) and
intensive (in bandwidth) use of RAM as a widely avail-
able and rather cheap unit for most defenders. In turn,
RAM is rather expensive on FPGA and ASIC1, and slow
on GPU, at least compared to memoryless computing
tasks. All our schemes use a lot of memory and a lot
of bandwidth — almost as much as possible.
We suggest a single framework for this concept and
concrete schemes with an unique combination of fea-
tures.
In the future, adoption of our concept could allow a
homogenization of computing resources, a simpliﬁed se-
curity analysis, and relaxed security requirements. When
all attackers use the same hardware as defenders, auto-
mated large-scale attacks are no longer possible. Shorter
keys, shorter passwords, faster and more transparent
schemes may come back to use.
Related work The idea of extensive memory use in the
context of spam countermeasures dates back at least to
2003 [5, 13] and was later reﬁned in [15]. Fast memory-
intensive hash functions were proposed ﬁrst by Percival
in 2009 [27] an later among the submissions of the Pass-
word Hashing Competition. Memory-intensive proofs-
of-work have been studied both in theory [16] and prac-
tice [6, 32].
Paper structure We describe the goals of our con-
cept and give a high level overview in Section 2. Then
we describe existing applications where this approach
is implicitly used: password hashing and cryptocur-
rency proofs of work (Section 3). We present our own
progress-free Proof-of-Work MTP with fast veriﬁcation,
which can also serve as a memory-hard time-lock puz-
zle, in Section 4. The last Section 5 is devoted to the
1The memory effect on ASICs can be illustrated as follows. A com-
pact 50-nm DRAM implementation [17] takes 500 mm2 per GB, which
is equivalent to about 15000 10 MHz SHA-256 cores in the best Bit-
coin 40-nm ASICs [1] and is comparable to a CPU size. Therefore, an
algorithm requiring 1 GB for 1 minute would have the same AT cost as
an algorithm requiring 242 hash function calls, whereas the latter can
not ﬁnish on a PC even in 1 day. In other words, the use of memory
can increase the AT cost by a factor of 1000 and more at the same time
cost for the desktop user.
novel concept of memory-hard encryption, where we
present our scheme MHE aimed to increase the security
of password-based disk encryption.
2 Egalitarian computing as framework
2.1 Goal
Our goal is to alter a certain function H in order to max-
imize its computational cost on the most efﬁcient archi-
tecture – ASICs, while keeping the running time on the
native architecture (typically x86) the same. We ignore
the design costs due to nontransparent prices, but instead
estimate the running costs by measuring the time-area
product [8, 31]. On ASICs the memory size M translates
into certain area A. The ASIC running time T is deter-
mined by the length of the longest computational chain
and by the ASIC memory latency.
Suppose that an attacker wants to compute H using
only a fraction αM of memory for some α  1;
Out → H(X[M]).
• The time-space tradeoffs must be steep to prevent
any price-performance reduction.
(2)
• The time and memory parameters must be tunable
independently to sustain constant mining rate.
The indexing function φ (i) is deﬁned separately for each
of two versions of Argon2: 2d and 2i. The Argon2d ver-
sion, which we use, compute it as a function of the pre-
vious block X[i− 1].
The authors proved [10] that all the blocks are gen-
erated distinct assuming certain collision-resistant-like
properties of F. They also reported the performance of
0.7 cpb on the Haswell CPU with 4 threads, and 1.6 cpb
with 1 thread.
Tradeoff security of Argon2 Using the tradeoff algo-
rithm published in [9], the authors report the values C(α)
and D(α) up to α = 1/7 with t = 1. It appears that C(α)
is exponential in α, whereas D(α) is linear.