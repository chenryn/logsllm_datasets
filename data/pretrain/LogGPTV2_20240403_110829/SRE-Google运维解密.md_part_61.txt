Workflow是模型一视图一控制器（MVC）模式
290
注6
注5
种设计模式。
来支持一系列的辅助活动，比如对流水线的实时伸缩，对状态的快照，以及工作周期的
是完全无状态的，可以在任一时间被抛弃。控制器（Controller）是可选的，可以加入进
输出数据会保存在一个常见的文件系统或者其他存储系统中。根据这个比喻，工作进程
但是为了获取更好的系统性能，主任务通常只会保存具体工作的指针，而真正的输入和
更新它们所见的系统状态的工作进程。虽然整个流水线的全部数据可以保存在主任务中，
方式记录在持久化磁盘上。视图（View）是那些作为整个流水线子组件，不断向主任务
务使用流式系统模式将所有的任务状态保存在内存中，同时同步地将每一次修改以日志
Workflow采用了这个模式，模型（Model）由一个被称为“主任务”的进程持有。主任
分布式系统的MVC模式是一个从Smaltak借鉴来的松散比喻，原始比喻是用来描绘图形用户界面
Wikipedia：MVC，参见http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller
的设计结构的（参见文献[Fow08]）。
第25章数据处理流水线
Model
View观察Model
，Workflow可以被认为是分布式系统中与用户界面设计中的
。注5如图25-4所示，这种设计模式将某个软件程序分为三个
该设计模式的大部分
---
## Page 333
全局唯一的文件名。这样，我们就可以提供正确性的双重保障：输出文件永远是全局唯
这样一来脱离管理的工作进程无法影响到其他的正常进程，因为每个工作进程都有一个
程将会拒绝它们的请求，因为目前有另外一个工作进程正在持有这段租约。更重要的是，
管理的工作进程也可以继续写入输出文件，它们试图将文件提交回主进程的时候，主进
进程造成冲突，每一个工作进程打开的输出文件都有一个全局唯一的名字。这样，脱离
过租约来获取工作，而且仅仅允许那些目前持有有效租约的进程汇报状态。
分配了一个唯一命名的指针，同时每个工作单元都有一个全局唯一的租约。工作进程通
将整个流水线的每一点细节都保存在“主任务”进程中是不太可行的，因为主进程还要
Workflow正确性保障
都被精确地执行了一次且仅仅一次（至少是那些记录在永久状态中的工作）。
执行，也可以作为其他处理阶段的输入。在系统中，我们可以很容易地保证所有的工作
工作进程处理前序阶段产生的工作单元，同时生产出新的输出单元。输出可以终止整个
实例，工作进程也可以通过选择不同类型的工作来执行以进行自我调度。
某一个阶段通常和几种工作进程类型关联在一起。某个类型的工作进程可能有多个并行
们可以在任何一个阶段很容易地实现Mapping、Shuffling、排序、分割以及合并等操作。
每个任务组负责处理该执行阶段的数据，可以对某一小块数据进行任意操作。于是，我
我们可以通过将工作进程进一步划分为更小的任务组，而将流水线的“深度”随意增加
Workflow中的执行阶段
图25-5:GoogleWorkflow系统采用的MVC模式
一的，而流水线状态永远只能由那些拥有租约的任务更新。
为了避免在某些情况下一个不受管理的工作进程擅自处理某个工作单元。与目前分配的
受到内存尺寸的限制。然而我们仍然提供双重保障，因为在主任务的状态中给所有数据
(model)
镜像等
工作周期、伸缩、
工作单元
完成的工作单元
Workflow中的执行阶段
Controller
(view)
291
336
---
## Page 334
337
292
大数据处理流水线需要在各种失败条件下持续运行，包括光纤被切、天气状况、连锁性
保障业务的持续性
果直接使用一个数据库，用它的交易日志作为我们的日志，那么每个读操作都必须成为
例如，工作进程租约的获取是任务的一部分，每个租约的改变都需要一个新的任务。如
统面临的困难。
是独特的、不可变的。这样的两个特性使得Workflow系统免于许多种大型任务分发系
[Cor12]）或者另外一个数据库来实现。然而Workflow系统特殊的地方在于每个任务都
读到这里，可能你觉得可以抛弃这种特制的“主任务”而直接使用Spanner（参见文献
综上所述，Workflow为正确性提供了4点保障：
户端和服务端在每个操作时都会检查令牌，这样就避免了在配置错误的时候难以查找错误。
任务”。这样可以避免某个异常的或者是配置错误的“主任务”破坏整个流水线的状态。客
Workflow协议在每个任务的元数据中嵌入了一个服务器令牌，用来唯一标记某个特定的“主
面加入了一个负载均衡器呢？
代了之前的那个会怎么样呢？如果某个内存错误影响了IP和端口地址导致RPC发给了
例如，如果“主任务”的网络地址改变了，另外一个“主任务”运行在同样的地址上替
样还是不够的。
这样，Workflow就提供了三重保障：配置文件、租约和唯一文件名。但是，有的时候这
置文件保持一致，哪怕这样会使得之前的一些工作进程的工作被抛弃了。
有租约，也无法提交状态。因此，在配置文件更新之后，所有的工作成果都会和新的配
正确ID。如果配置文件在工作进程工作的时候更新了，那么所有的工作进程虽然仍然拥
存储在主任务中，一个工作进程必须同时持有一个活跃的租约，并且拥有配置文件中的
换掉之前的那个，同时带有一个新的全局ID。因为所有的流水线配置和工作进程信息都
任务更新了，或者任务的租约发生了变化，那么这种操作将会产生出一个新的任务，替
如果认为这种双重保障还是不够，Workflow系统同时会记录所有任务的版本信息。如果
一个长期运行的交易操作的一部分。这肯定是可行的，只不过会非常低效。
●配置文件本身作为屏障，这样可以保障工作进程的输出永远与配置一致。
工作进程的输出文件都是全局唯一命名的。
所有的工作结果都必须由当前拥有租约的进程提交。
第25章
数据处理流水线
---
## Page 335
如果心跳任务一段时间没有更新，另外一个远端的Workflow助手任务会将这个目前的
责创建和删除任务引用，同时负责在全球Workflow系统中更新一个特殊的心跳任务。
中“dowork”那个盒子中那样。这个助手二进制文件相当于MVC中的控制器角色，负
本地Workflow系统中运行。本地Workflow系统除此之外就没有其他的改动了，就像图
为了做到自动灾难迁移，图25-6中的一个助手二进制文件（标签为stage 1）会在每个
图25-6：使用Workflow流水线的分布式数据处理流示例
Workflow系统将会暂时停止，直到全球Workflow系统再次可用，以保障交易的正确性。
除，如图25-6中的“stage n”。如果无法从全局Workflow系统中删除任务引用，本地
“stage1”，如图25-6所示。随着任务结束，任务引用将会从全球Workflow系统中删
务单元经过流水线时，相对应的任务引l用会被插入到全球Workflow系统中，带有标记
务引用”和两个或多个本地运行在不同数据中心的Workflow系统来运行任务。随着任
因为Spanner并不是一个高吞吐量的文件系统，全球分布的Workflow系统使用一种“任
的一个名称系统来查询目前的“主任务”。
献[bur06]）来选举一个领头人，同时将结果保存在Spanner中。最后，客户端使用内部
决定哪个“主任务”可以写入数据，每个“主任务”使用分布式锁服务Chubby（参见文
在Spanner上，利用其全球可用、全球一致的特性作为一个低吞吐量的文件系统。为了
Workflow通过持续性运行的流水线完美地解决了这个难题。“主任务”通过将日志存储
的数据。
业务持续性非常难以达到，有可能需要消耗大量的人力物力来恢复流水线的运行和其中
来提供强任务状态保障的流水线经常会进入一个未定义的状态。这个架构上的问题使得
供电故障等，这些故障可以使整个数据中心不可用。在这种情况下，没有采用流式设计
Localworkflow
TaskMaster
stagen
dowork
stage1
1
1
Globalworkflow
TaskMaster
dowork
(heartbeat)
1
保障业务的持续性
TaskMaster
Localworkflow
293
---
## Page 336
338
小结
294
并且是一个非常可靠且稳定的可运维系统。
中工作性能和扩展性都非常好。这样一个系统能够周期性地提供用户可以依赖的结果，
我们发现带有强一致性的持续数据处理系统，就像Workflow这样，在分布式集群环境
Workflow的设计特点的系统。
者会自然增长成为持续性的，那么就不要采用周期性的设计方式，而是采用一种类似
周期性的数据流水线是很有价值的。但是如果一个数据处理问题本身是持续性的，或
任务接管过来，以保障系统正常运行，不受任何环境变化影响。
第25章数据处理流水线
---
## Page 337
型的数据。当我们讨论数据完整性的时候，最重要的就是云服务依然对用户可用。用户
长时间无法访问对用户来说通常是一样的。因此，数据完整性适用于全部服务的所有类
吗？”、“Google、Amazon有什么区别：这个产品不都是云计算产品吗”。数据丢失、损坏、
时候并不会特意区分这些具体的产品，他们的逻辑通常是“这个产品不就是Google的
对数据的可访问性是最重要的。
同样的逻辑也适用于GooglePhotos、Drive、云存储、云数据库等产品。因为用户有的
GoogleApp的一个合理时间阈值。
[Hic11]），4天已经足够久了一
那么，无法访问的时间标准是什么呢？就像2011年Gmail事故展示的那样（参考文献
也会受到影响。
息的时间过长，
会因此受到质疑，云计算的可信性也会受到影响。当Gmail出现错误提示或者是维护信
已经丢失了。虽然数据并没有真正丢失，仅仅是无法访问，Google保管数据的能力还是
例如，如果用户界面上的一个Bug导致Gmail一直显示收件箱为空，用户可能认为数据
性方面必须达到的一个度量标准。但是这种定义是不全面的。
我们可以说数据完整性是指数据存储为了提供一个合理的服务质量，在可访问性和准确
用户为准。
数据完整性：读写一致
一可能太久了！因此，我们一般认为“24小时”是针对
作者：Raymond Blum、Rhandeev Singh
编辑：BetsyBeyer
第26章
295
<340
339
---
## Page 338
296
的手段是主动探测和快速修复能力。
整性仍然是100%（或者非常接近100%）。这个例子恰当地展示了保障超高数据完整性
但是，神奇的是，从用户的角度来看，这个场景中的该块数据在可访问生命周期内的完
的可用率是99.99%。
动被删除、修复，最终在30分钟之内恢复访问。那么可以说针对这块用户数据，当年
假设在另外一个平行宇宙中，每一次数据的损坏都能在用户被影响之前立即被发现，自
最好手段就是主动探测加快速修复。
对这块用户数据来说，这块数据今年的在线时间就变成0了。避免这种灾难情况发生的