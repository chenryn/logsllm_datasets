“public key” (see §IV-A1). We note that both Catena and
previous work [2], [10], [17], [25], [27], [28] all rely on
some sort of initial public-key distribution. However, unlike
previous work, Catena can prevent equivocation once a client
has the “public key” or genesis transaction. It’s important to
understand that, similarly to how a signature can only be
veriﬁed with respect to a public key, equivocation can only
be prevented with respect to a log identiﬁed by some kind of
information, in this case, the genesis transaction.
We stress that Catena’s goal is to prevent equivocation given
a log’s genesis transaction and orthogonal techniques can be
used for distributing the genesis transaction. For instance, the
log’s genesis transaction can be shipped with the application
software that audits that log, similar to how browsers are
shipped with public keys of Certiﬁcate Authorities (CAs).
In fact, we argue it might be easier for end-users to verify
the genesis transaction if they know the log’s creation date.
Speciﬁcally, users can download just the blocks around that
date and check that no other genesis transaction for the log
exists in those blocks.
2) Proof-of-Work Consensus: Similar to previous work
[14], [15], [24], [54]–[59], we assume that adversaries cannot
break Bitcoin’s proof-of-work consensus and fork the block-
chain. Speciﬁcally, we assume that a Catena transaction is
immutable once it has been conﬁrmed by a sufﬁcient number
of blocks, as conﬁgured by Catena clients individually (we
recommend at least 6 blocks). We believe it is reasonable
to assume that long malicious forks are unlikely to occur
Fig. 3.
The log server broadcasts Catena transactions with statements
embedded in them to the Bitcoin P2P network. Catena clients query the header
relay network for block headers and the log server for statements with proofs
they were witnessed in the Bitcoin blockchain. The header relay network
maintains good connectivity to the Bitcoin P2P network without depleting
the P2P network’s connection pool.
due to the computational difﬁculty and ﬁnancial burden of
such an attack. We also assume the Catena log server cannot
collude with large Bitcoin miners, who are not likely to beneﬁt
ﬁnancially from a forking attack. Finally, we have to assume
Bitcoin’s P2P network is reliable and miners hear about each
other’s blocks quickly, or else proof-of-work consensus could
be easily subverted [42], [60]. We discuss attacks on Bitcoin’s
consensus in more detail in §V.
3) SPV Assumption: Catena clients use thin nodes (see
§II-B6) to efﬁciently verify the log for non-equivocation. It’s
important to note that thin nodes are less secure than full
nodes against adversarial mining attacks (see §V-C). Also,
thin nodes have to assume miners verify their own blocks
and the blocks of other miners before mining, otherwise thin
nodes risk accepting invalid transactions. Fortunately, Bitcoin
miners have a strong incentive to verify blocks, as they would
lose the block reward if they extend an invalid blockchain.
However, recent work [61] shows that when block veriﬁcation
is expensive miners have an incentive to skip it. We discuss
such an event that occurred in 2015 in §V-B.
4) Header Relay Network: We trust Catena’s header relay
network to serve Catena clients with the latest Bitcoin block
headers. Similar to a compromised Bitcoin P2P network, a
compromised HRN can eclipse [60] Catena clients and help
adversaries win mining races faster and thus equivocate (see
§V-C). However, such adversaries would need a signiﬁcant
fraction of mining power to win races fast enough without
Catena clients noticing they are being eclipsed. We discuss
such attacks in §V-E.
D. Goals
Our goals are to prevent equivocation and to do so in
an efﬁciently-veriﬁable manner, enabling each user to audit
individually and thus minimizing trust in applications such as
public-key directories.
398
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
1) Non-equivocation: A log server should have a hard time
equivocating about log statements. Catena makes equivocation
in the log as hard as forking the Bitcoin blockchain, which we
believe to be a reasonable amount of protection for many ap-
plications, including public-key directories. If our assumptions
are broken and the Bitcoin blockchain forks, Catena cannot
prevent equivocation but still makes equivocation detectable
once the forks are resolved, similar to previous gossip-based
approaches [2], [11], [25], [26].
It’s important to understand what non-equivocation actually
provides. Non-equivocation does not prevent the adversarial
log server from issuing incorrect statements that break seman-
tics at the application layer. Instead, non-equivocation simply
guarantees that all clients see all issued statements, including
incorrect ones. This allows clients to detect attacks at the
application layer, as we discuss later in §VII-3.
2) Publicly Veriﬁable: Given a log’s genesis transaction
txgenesis (i.e.,
its public key), anyone can verify the full
history of statements in that log. Speciﬁcally, a client can
obtain all statements (cid:2)s1, s2, . . . , sn(cid:3) in the log and verify
them with respect to txgenesis. Veriﬁcation here means that
a statement is part of the log at some position i and no
other inconsistent statement at position i exists (i.e., non-
equivocation). In particular, for any statement si, the log server
gives the client a publicly veriﬁable proof p with respect to the
log’s txgenesis that proves that si is indeed the only statement
in the log at position i.
3) Efﬁciently Veriﬁable: Catena clients should be able to
audit logs efﬁciently without downloading the entire Bitcoin
blockchain. Recent blockchain-based transparency work [2],
[14], [15] is inefﬁcient, requiring auditors to download the
entire blockchain to prevent equivocation (see §II-A2). This
raises the barrier to entry for log auditors, who might have
to outsource auditing or trust the log blindly. In contrast, the
barrier for Catena clients is very low: clients only download
80-byte block headers for each Bitcoin block and 600-byte
Merkle membership proofs for each statement (see §IV-C).
IV. CATENA DESIGN
At a high level, Catena makes equivocation about a log
statement as hard as double spending a Bitcoin transaction
output. The key idea behind Catena is to embed statements
in Bitcoin transactions and have each transaction spend the
previous one. This is a simple but powerful idea because it
forces the log server to double spend a transaction output if it
wants to equivocate, which is notoriously difﬁcult in Bitcoin.
Thus, Catena can offer a strong guarantee to clients that they
have not been equivocated to.
Catena operates very simply, as illustrated in Figure 1.
The Catena log server creates a log by issuing an initial
transaction called the genesis transaction. The server issues
the ﬁrst statement in the log by creating a new transaction that
spends the genesis transaction and commits that ﬁrst statement
via an OP_RETURN transaction output (see §II-B5). Finally,
the server can append new statements to the log by creating a
Fig. 4. Equivocating in a Catena log is as hard as double spending in Bitcoin,
which requires forking the blockchain (see §II-B). This is because Catena’s
design requires a new Catena transaction to spend the previous one, which
linearizes the history of statements embedded in those transactions.
new transaction that spends the previously-created transaction
and commits a new statement.
Catena clients ﬁrst obtain the log’s genesis transaction,
which can be shipped with the higher-level application that
Catena secures (see §III-C1). Then, clients obtain and verify
all Bitcoin block headers from the header relay network
(discussed in §IV-B). Finally, clients can ask the Catena
the
log server for the statements and verify them against
genesis transaction and the Bitcoin block headers. Importantly,
because Catena transactions are “chained” (see Figure 4) and
Bitcoin prevents double spends, clients are assured the server
has not equivocated (see §III-D1).
Catena’s overhead is small. For each 32-byte statement, the
server sends over a 235-byte Catena transaction and a Merkle
path of up to 350 bytes proving that the statement is part of
the log. That amounts to around 600 bytes per statement plus
the overhead of downloading all block headers (currently 35
MB), making Catena very cheap in terms of bandwidth.
A. Transaction Format
1) Genesis transaction: Catena logs are identiﬁed by a
genesis transaction. This is the ﬁrst transaction created by
the log server when it starts the log. The genesis transaction
effectively acts as the log’s “public key”: once a client has
the log’s genesis transaction, that client can verify log updates
against it and prevent equivocation. As discussed in §III-C1,
a “public key” such as the genesis transaction is a necessary
element of any system which aims to prevent equivocation.
2) Catena transactions: A Catena log is just a chain of
specially-crafted Bitcoin transactions called Catena transac-
tions (see Figure 1). Our transaction format is simple. First, a
Catena transaction has one input, which spends the previous
Catena transaction in the chain, and extra inputs for “re-
funding” the log (see §IV-E). Second, a Catena transaction has
two outputs. The ﬁrst output is an unspendable OP_RETURN
output, which commits the log statement, and the second
output is a continuation output, which is spent by the next
Catena transaction’s input. The genesis transaction also has
the same Catena transaction format.
Our transaction format leverages the fact that Bitcoin miners
prevent double spends which, in turn, allows us to prevent
399
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:20:17 UTC from IEEE Xplore.  Restrictions apply. 
equivocation about statements (see Figure 4). The key idea
is that a Catena transaction has a single spendable output,
which means Bitcoin miners will ensure only a single future
transaction spends that output (see TXO invariant in §II-B4).
Thus, a Catena transaction can only be followed by another
unique Catena transaction, which allows us to create a linear
history of statements that all Catena clients can agree on.
Catena transactions just transfer coins from the Catena log
server back to itself, committing log statements and paying
fees to Bitcoin miners in the process. Recall from §II-B4 that
a transaction output speciﬁes a coin amount and a public key
that “locks” those coins (i.e., is authorized to spend them
later). In Catena, all transaction outputs are locked by the
same key called the statement key, which is managed by the
log server. This key signs all Catena transactions, including
the statements embedded in them, authorizing the transfer of
coins back to the server. Catena clients can easily obtain the
statement key from the genesis transaction since it is speciﬁed
in its continuation output. The server can change the statement
key in future transactions and clients can easily pick up the
new key, but for simplicity we assume it remains the same
across all Catena transactions.
As mentioned before, the log server has to pay fees to Bit-
coin miners to get its transactions included in the blockchain.
We describe how this works in §IV-E and we analyze the
server’s cost per Catena statement in §VI-C1.
B. Header Relay Network
We want to avoid stressing Bitcoin’s P2P network, which
has a limited connection capacity that would be quickly de-
pleted by Catena clients. There are currently around 5500 full
Bitcoin nodes, each by default capable of handling up to 117
incoming connections [43], [62]. Thus, Bitcoin’s P2P network
currently supports at most 643,500 incoming connections at
a single point in time, some of which are already used up
by Bitcoin thin clients for user wallets. Importantly, these
connections need to be long-lived so as to allow Catena clients
to discover and connect to a diverse set of Bitcoin peers. As
a result, if each Catena client were to maintain 8 outgoing
connections to Bitcoin’s P2P network,
then Catena would
not scale beyond tens of thousands of clients without putting
signiﬁcant stress on the Bitcoin network.
To provide scalability, we propose using a header relay
network (HRN) that is well connected to the Bitcoin P2P
network and can serve block headers to hundreds of thousands
of Catena clients. An HRN node operates as a full node
in the Bitcoin P2P network, contributing to its health while
providing an interface to Catena clients for obtaining block
headers fast. However, note that HRN nodes do not mine nor
attempt to reach consensus on block headers: they just gossip
and verify blocks like the rest of the Bitcoin P2P network.
Catena clients trust the HRN to serve them with the latest
Bitcoin block headers. Importantly, clients ask multiple HRN
nodes for block headers to ensure they are not being eclipsed
by a single malicious HRN node. We discuss attacks on the
HRN in §V-E.
A header relay network can be bootstrapped in various
ways. The simplest way is to have a set of volunteer HRN
nodes that act as an extension of the Bitcoin P2P network.
Another way is to rely on current blockchain explorers [63]–
[66] since they are well connected to the Bitcoin network
and already provide public APIs for fetching block headers.
A diverse HRN could be implemented by publishing block
headers across various websites, such as Twitter, Facebook
or GitHub, in a publicly-veriﬁable manner similar to how
Keybase [14] users publish identity proofs. A peer-to-peer
HRN can be bootstrapped amongst Catena clients themselves.
Catena clients can occasionally fetch block headers from the
Bitcoin P2P network and then distribute them amongst them-
selves. To avoid stressing Bitcoin P2P nodes, each client would
query the Bitcoin P2P network with probability inversely
proportional
to the size of HRN (estimated using known
techniques [67]). Finally, Sybil attacks [44] in all these types
of HRNs can be addressed by requiring HRN nodes to “burn”
bitcoins in a publicly-veriﬁable manner (see §II-B5) and tie
their identity to those burned coins.
C. Auditing a Catena Log
To audit a log, clients download the Catena transaction
chain and verify that transactions are signed and spend each
other correctly using the statement key. Clients ﬁrst download
and verify block headers from the header relay network
and then download and verify Catena transactions and their
Merkle proofs from the log server. This way, Catena clients
avoid Bloom ﬁltering on Bitcoin’s P2P network, which causes
signiﬁcant disk activity for full nodes (see §II-B6). Finally,
auditing is cheap for Catena clients as they only download
small transactions and Merkle proofs (600 bytes) and not full
Bitcoin blocks (1 MB).
To verify a new Catena transaction txi, a client checks that:
1) txi is in the correct Catena format.
2) txi is correctly included in a Bitcoin block with a Merkle
membership proof.
3) The ﬁrst input of txi spends the continuation output of
the previous Catena transaction txi−1.
4) txi is signed correctly with the statement key of the log.
5) txi has a sufﬁcient number of conﬁrmations (we recom-
mend at least 6).
It’s important to understand that without clients verifying
transaction chaining (i.e., step 3 and 4 above), a malicious
log server can equivocate about statements in the log. For
example, consider two Catena clients c1 and c2 which correctly
obtain the genesis transaction txgenesis of the log but do not
verify transactions are chained. In this attack, the malicious
log server issues two Catena transactions that commit two
different statements s1 and s(cid:2)
1 respectively but, importantly,
do not spend the genesis transaction. Instead they spend some
other transactions and get included in the blockchain. The
attack is straightforward: the log server shows client c1 the
transaction for s1 but hides the one for s(cid:2)