### Synchronization Replication Command: `dosynchronize`

#### Command Syntax
```bash
-dosynchronize [subname|pubname] -[repsvrfile|pubsvrfile] [filename] -repgrouptype [s|m]
```

#### Notes
- **For Single-Master Replication (SMR):** The `dosynchronize` command can be used on a subscription without first performing a snapshot using the `dosnapshot` command. The `dosynchronize` command automatically performs the initial required snapshot.
- **For Multi-Master Replication (MMR):** Ensure that an initial snapshot replication has been performed from the master definition node to every other master node in the multi-master replication system. If a newly added master node did not undergo an initial snapshot, any subsequent synchronization replication may fail to apply the transactions to that master node. The initial snapshot can be taken when the master node is first added (see Section 6.3 or Section 8.3.6) or by performing an on-demand snapshot (see Section 6.5.1 or Section 8.3.41).

#### Additional Information
- For SMR, see Section 5.4.2 for more details on performing synchronization replication.
- For MMR, see Section 6.5.2 for more details on performing synchronization replication.

#### Parameters
- **subname (SMR only):** The name of the subscription for which synchronization replication is to be performed.
- **pubname (MMR only):** The name of the publication for which synchronization replication is to be performed.
- **repsvrfile (SMR only):** The file containing the subscription server login information.
- **pubsvrfile (MMR only):** The file containing the publication server login information.
- **-repgrouptype:** Specify `s` for a single-master replication system or `m` for a multi-master replication system. The default is `s` if omitted.

#### Examples
- **Single-Master Replication:**
  ```bash
  $ java -jar edb-repcli.jar -dosynchronize dept_emp_sub -repsvrfile ~/subsvrfile.prop
  Performing synchronize...
  Synchronize done successfully.
  ```

- **Multi-Master Replication:**
  ```bash
  $ java -jar edb-repcli.jar -dosynchronize emp_pub -repsvrfile ~/pubsvrfile.prop -repgrouptype m
  Performing synchronize...
  Publication synchronized successfully.
  ```

---

### Configuring a Single-Master Schedule: `confschedule`

#### Command Syntax
```bash
-confschedule subname -repsvrfile subsvrfile { -remove | -jobtype [s|t] { -realtime no_of_sec | -daily hour minute | -weekly day_of_week hour minute | -monthly month day_of_month hour minute | -cronexpr "cron_expression" } }
```

#### Notes
- **For SMR only:** The `confschedule` command creates a schedule for when recurring replications are to be initiated for a single-master replication system.
- If the `-remove` parameter is specified, the schedule is deleted from the subscription. No other parameters except `subname` and `repsvrfile` can be specified in this case.
- If the `-remove` parameter is omitted, then the `jobtype` parameter and one of the following parameters must be specified: `realtime`, `daily`, `weekly`, `monthly`, or `cronexpr`.

#### Additional Information
- See Section 7.2 for more details on creating a schedule.

#### Parameters
- **subname:** The name of the subscription for which a replication schedule is to be created.
- **subsvrfile:** The file containing the subscription server login information.
- **-remove:** If specified, any existing schedule is removed from the subscription.
- **-jobtype:** Specify `s` if the scheduled replication is to be done by snapshot, or `t` if the scheduled replication is to be done by synchronization. If the associated publication is a snapshot-only publication, use `-jobtype s`.
- **no_of_sec:** The number of seconds between scheduled replications. This can be any integer greater than 0.
- **hour:** The hour of the day based on a 24-hour clock. This can be any integer from 0 to 23.
- **minute:** The minute of the hour. This can be any integer from 0 to 59.
- **day_of_week:** The day of the week. Valid values are: `SUN`, `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`. Case-insensitive.
- **month:** The month of the year. Valid values are: `JAN`, `FEB`, `MAR`, `APR`, `MAY`, `JUN`, `JUL`, `AUG`, `SEP`, `OCT`, `NOV`, `DEC`. Case-insensitive.
- **day_of_month:** The day of the month. This can be any integer greater than or equal to 1, and less than or equal to the number of days in the month.
- **cron_expression:** A cron expression. See appendix Section 10.4.3 for information on writing a cron expression.

#### Examples
- **Creating a Schedule:**
  ```bash
  $ java -jar edb-repcli.jar -confschedule dept_emp_sub -repsvrfile ~/subsvrfile.prop -jobtype t -realtime 300
  Configuring scheduler ...
  Job is successfully scheduled.
  ```

- **Removing a Schedule:**
  ```bash
  $ java -jar edb-repcli.jar -confschedule dept_emp_sub -repsvrfile ~/subsvrfile.prop -remove
  Configuring scheduler ...
  Scheduled job is removed.
  ```

---

### Configuring a Multi-Master Schedule: `confschedulemmr`

#### Command Syntax
```bash
-confschedulemmr pubdbid -pubname pubname -repsvrfile pubsvrfile { -remove | { -realtime no_of_sec | -daily hour minute | -weekly day_of_week hour minute | -monthly month day_of_month hour minute | -cronexpr "cron_expression" } }
```

#### Notes
- **For MMR only:** The `confschedulemmr` command creates a schedule for when recurring replications are to be initiated for a multi-master replication system.
- Ensure that an initial snapshot replication has been performed from the master definition node to every other master node in the multi-master replication system. If a newly added master node did not undergo an initial snapshot, any subsequent synchronization replication initiated by a schedule may fail to apply the transactions to that master node. The initial snapshot can be taken when the master node is first added (see Section 6.3 or Section 8.3.6) or by performing an on-demand snapshot (see Section 6.5.1 or Section 8.3.41).
- If the `-remove` parameter is specified, the schedule is deleted from the publication. No other parameters except `pubdbid`, `pubname`, and `repsvrfile` can be specified in this case.
- If the `-remove` parameter is omitted, then one of the following parameters must be specified: `realtime`, `daily`, `weekly`, `monthly`, or `cronexpr`.

#### Additional Information
- See Section 7.2 for more details on creating a schedule.

#### Parameters
- **pubdbid:** The publication database ID of the publication database definition representing the master definition node on which to configure the schedule.
- **pubname:** The name of the publication for which a replication schedule is to be created.
- **pubsvrfile:** The file containing the publication server login information.
- **-remove:** If specified, any existing schedule is removed from the publication.
- **no_of_sec:** The number of seconds between scheduled replications. This can be any integer greater than 0.
- **hour:** The hour of the day based on a 24-hour clock. This can be any integer from 0 to 23.
- **minute:** The minute of the hour. This can be any integer from 0 to 59.
- **day_of_week:** The day of the week. Valid values are: `SUN`, `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`. Case-insensitive.
- **month:** The month of the year. Valid values are: `JAN`, `FEB`, `MAR`, `APR`, `MAY`, `JUN`, `JUL`, `AUG`, `SEP`, `OCT`, `NOV`, `DEC`. Case-insensitive.
- **day_of_month:** The day of the month. This can be any integer greater than or equal to 1, and less than or equal to the number of days in the month.
- **cron_expression:** A cron expression. See appendix Section 10.4.3 for information on writing a cron expression.

#### Examples
- **Creating a Schedule:**
  ```bash
  $ java -jar edb-repcli.jar -confschedulemmr 6 -pubname emp_pub -repsvrfile ~/pubsvrfile.prop -daily 8 00
  Configuring scheduler ...
  Job is successfully scheduled.
  ```

- **Removing a Schedule:**
  ```bash
  $ java -jar edb-repcli.jar -confschedulemmr 6 -pubname emp_pub -repsvrfile ~/pubsvrfile.prop -remove
  Configuring scheduler ...
  Scheduled job is removed.
  ```

---

### Print Schedule: `printschedule`

#### Command Syntax
```bash
-printschedule [subname|pubname] -repsvrfile [subsvrfile|pubsvrfile] [-repgrouptype [s|m]]
```

#### Notes
- **For SMR:** Use the `printschedule` command with `subname` and `subsvrfile`.
- **For MMR:** Use the `printschedule` command with `pubname`, `pubsvrfile`, and `-repgrouptype m`.

#### Parameters
- **subname (SMR only):** The name of the subscription for which the schedule is to be printed.
- **pubname (MMR only):** The name of the publication for which the schedule is to be printed.
- **subsvrfile (SMR only):** The file containing the subscription server login information.
- **pubsvrfile (MMR only):** The file containing the publication server login information.
- **-repgrouptype:** Specify `s` for a single-master replication system or `m` for a multi-master replication system. The default is `s` if omitted.

#### Examples
- **Single-Master Replication:**
  ```bash
  $ java -jar edb-repcli.jar -printschedule dept_emp_sub -repsvrfile ~/subsvrfile.prop
  Printing subscription schedule ...
  Job type Synchronize
  Scheduled time 2012-06-19 13:27:20
  Previous fire time 2012-06-19 13:27:20
  Next fire time 2012-06-19 13:32:20
  ```

- **Multi-Master Replication:**
  ```bash
  $ java -jar edb-repcli.jar -printschedule emp_pub -repsvrfile ~/pubsvrfile.prop -repgrouptype m
  Printing subscription schedule ...
  Job type Synchronize
  Scheduled time 2012-06-19 13:27:55
  Previous fire time Not available
  Next fire time 2012-06-20 08:00:00
  Cron expression 0 0 8 * * ?
  ```

---

### Updating a Subscription: `updatesub`

#### Command Syntax
```bash
-updatesub subname -subsvrfile subsvrfile -pubsvrfile pubsvrfile -host newpubsvr_ipaddress -port newpubsvr_port
```

#### Notes
- **For SMR only:** The `updatesub` command allows you to update certain metadata of a given subscription. This metadata allows the subscription server to find the host running the publication server that manages the publication associated with the subscription.

#### Parameters
- **subname:** The name of the subscription whose metadata is to be updated.
- **subsvrfile:** The file containing the subscription server login information for the subscription server in which subscription `subname` was created.
- **pubsvrfile:** The file containing publication server login information for the publication server that manages the publication associated with subscription `subname`.
- **newpubsvr_ipaddress:** The new IP address for the publication server that manages the publication associated with subscription `subname`. This value must be the same as the IP address specified for field `host` in file `pubsvrfile`.
- **newpubsvr_port:** The new port number for the publication server that manages the publication associated with subscription `subname`. This value must be the same as the port number specified for field `port` in file `pubsvrfile`.

#### Example
- **Updating Subscription Metadata:**
  ```bash
  $ java -jar edb-repcli.jar -updatesub dept_emp_sub -subsvrfile ~/subsvrfile.prop -pubsvrfile ~/pubsvrfile.prop -host 192.168.2.7 -port 9051
  Updating subscription dept_emp_sub...
  Subscription is updated successfully.
  ```

---

### Removing a Subscription: `removesub`

#### Command Syntax
```bash
-removesub subname -subsvrfile subsvrfile
```

#### Notes
- **For SMR only:** The `removesub` command removes a subscription.

#### Parameters
- **subname:** The name of the subscription to be removed.
- **subsvrfile:** The file containing the subscription server login information.

#### Example
- **Removing a Subscription:**
  ```bash
  $ java -jar edb-repcli.jar -removesub dept_emp_sub -subsvrfile ~/subsvrfile.prop
  Removing subscription dept_emp_sub...
  Subscription is removed successfully.
  ```

---

Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved.