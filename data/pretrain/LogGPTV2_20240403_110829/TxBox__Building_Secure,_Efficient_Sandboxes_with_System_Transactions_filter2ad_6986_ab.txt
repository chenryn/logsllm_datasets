Core 2
Speculative
transaction
Core 1
Security
checks
Core 2
Figure 1. Comparison of TXBOX and Speck architectures.
331
TXBOX cannot be circumvented by “split-personality”
malware. It speculatively executes a single copy of the un-
trusted program inside a transaction and all security checks
are performed on that copy. Figure 1 shows the difference
between TXBOX and Speck. Unlike Speck, the TXBOX
security monitor has access to the transactional workset,
which gathers all accesses to system objects by the untrusted
program. Depending on the nature of the check, the monitor
can request the kernel to store the necessary state informa-
tion and access it in parallel with the sandboxed process (see
Section VI). Unlike Speck, TXBOX cannot enforce security
policies which require information not readily available to
the kernel (e.g., data ﬂows in application’s memory).
Using transactions for security. Birgisson et al. present a
reference monitor architecture which uses Software Transac-
tional Memory (STM) to enforce security policies for mul-
tithreaded applications [6]. These policies deal with internal
objects residing in application’s memory. Harris and Peyton-
Jones propose a framework for programmer-provided data
invariants in the Haskell STM [29]. Chung et al. employ
transactional memory in a thread-safe binary translation
mechanism which they use to implement information-ﬂow
tracking in application’s memory [8].
The key difference is that transactional memory enables
transactional semantics for accesses to application’s mem-
ory, while system transactions enable transactional semantics
for accesses to system resources by a user process. STM-
based systems are designed to enforce application-speciﬁc
security policies, which are orthogonal to system-level poli-
cies and cannot be enforced by our kernel-level security
monitor. For system-level policies, transactional memory is
at the wrong level of abstraction. STM-based enforcement
cannot span system calls and thus cannot protect access to
system resources such as ﬁles and network sockets.
Sidiroglou and Keromytis instrument application code
dealing with memory buffers to provide transaction-like
semantics for detecting and recovering from buffer overﬂow
attacks [54]. Locasto et al. use transactional execution for
individual functions [38]. Unlike transactions internal to an
application, system transactions in TXBOX provide a general
mechanism for inspecting and, if necessary, rolling back
changes made by an application to OS state.
Clark et al. deﬁne a model for commercial security
policies and suggest the use of well-formed transactions to
preserve data integrity [10]. In TXBOX, such restrictions can
be enforced via a policy that controls access to sensitive data.
Vino OS [53] allows applications to load extensions
into the kernel and uses transactions and software fault
isolation to protect the kernel from buggy and malicious
extensions. The goal is to restrict untrusted extensions to the
same range of behavior as user-level programs and properly
enforce standard access control on them. Transactions are
used to recover shared kernel state (e.g., release locks and
free memory) after a misbehaving extension is removed
and generally applied at the granularity of a single call
into the extension module. By contrast, TXBOX leverages
the transaction’s workset to inspect cumulative behavior of
an untrusted application, assure semantic ﬁdelity of policy
checks, and enforce a wider range of security policies.
Sandboxes and system-call monitors. Prior sandbox ar-
chitectures include kernel-based systems [3, 4, 11, 19] and
system-call interposition tools [2, 27, 32, 49]. Interposition is
typically implemented using kernel-mode system-call wrap-
pers. In Section V-B, we show how their functionality can
be easily emulated in TXBOX.
Malicious programs can bypass wrapper-based enforce-
ment by exploiting race conditions and incorrect replication
of the OS state inside the security monitor (see [21, 58] and
Section II-A). Ostia [24] and Plash [51] solve these issues
by using delegation-based architectures. Rather than attempt
to enforce access control on semantically murky system-call
arguments, they restrict what ﬁle handles can be created in a
sandboxed process and only allow operations via approved
handles. Delegation-based architectures generally require
little or no changes to the OS kernel, instead modifying
libc to emulate forbidden API functions using approved
functions. Because the ﬁle-handle-based API (e.g., openat)
in most Unix systems is incomplete and because emulating
the Unix kernel API is inherently difﬁcult, delegation-based
systems are prone to subtle security bugs [45, 46].
TXBOX occupies a different point in the design space of
sandbox architectures. It requires more kernel changes than
delegation-based sandboxes but does not need to solve the
problem of accurately emulating the OS API.
Capsicum is a capability-based sandboxing system which
adds new primitives to the UNIX API to support compart-
mentalization of applications [59]. The goals of Capsicum
are orthogonal to TXBOX. Its new API helps benign applica-
tions increase their trustworthiness, while TXBOX sandboxes
untrusted applications that use the standard Unix API.
Several sandboxes have been proposed for application
plugins, especially for Web browsers. Vx32 employs binary
translation and x86 segmentation [18], while Native Client
requires the code to be recompiled to a restricted subset of
the x86 ISA and also conﬁnes it using segmentation [62].
Xax places untrusted code in its own address space and
restricts it to a small subset of system calls, enforced by
system-call interposition [13]. The problem of protecting
trusted code from untrusted code in the same address space
is orthogonal to system-level sandboxing. System-level poli-
cies enforced by plugin sandboxes are typically simple and
disallow access to nearly all system resources.
Sun et al. combine system-call interposition with a se-
curity monitor between the virtual ﬁle system (VFS) and
the lower-level ﬁle system. This layer implements SEE, a
simple, transactional ﬁle system enforcing one-way isolation
332
from an untrusted process [55]. SEE provides a speculative
execution environment similar to TXBOX but limited to the
ﬁle system and network, while TXBOX can also isolate
system calls such as fork and signal.
Placing sandboxing hooks at the VFS interface is some-
what similar to placing them in the system call table. Both
are appealing because they minimize OS changes and have a
tractable surface area. Just as system-call interposition mon-
itors ultimately struggle with problems such as TOCTTOU
races, a monitor and transactional ﬁle system implemented
below the VFS layer face challenges with insufﬁcient hooks
into higher-level functionality. For instance, the isolation
mechanism of SEE is based on recording the timestamp
of the ﬁrst read; in the case of ﬁle-system metadata in an
unmodiﬁed kernel, a low-level hook is typically called only
if the data is not in a VFS cache. In the common case
where the directory structure is cached, this timestamp-based
conﬂict detection can have false negatives that violate isola-
tion. The kernel-based isolation mechanism of TXBOX helps
avoid engineering and ﬁdelity problems that are common in
security monitors at the periphery of the OS.
System-call monitoring for intrusion detection in benign
programs has been enhanced by using sequence relation-
ships [31, 60], call-site [52] and call-stack information [17,
20], and system-call arguments [5]. Static analysis can be
used to automatically extract system-call models from the
program’s code [26, 56]. This work can be viewed as a
source of system-call policies for TXBOX.
Virtual-machine-based monitors. Virtual machines (VM)
enable external inspection of both the OS and applications.
There is a large body of literature on using virtual machines
for intrusion detection, honeypots, etc. Unlike TXBOX, VM-
based methods can potentially protect even against kernel-
based malware [23], although there are many challenges:
granularity of checking, reconstruction of system-level be-
havior from hardware-level events, merging committed state
back into the system, and how to achieve close-to-native
performance while performing frequent security checks.
While in theory all policies described in Section V-B can
be enforced using a VM-based monitor, we are not aware
of any existing monitor that can (1) isolate execution of a
single untrusted user process in the guest OS, (2) detect
when it is about to violate a security policy, (3) terminate
the process and roll back its effects while leaving concurrent
updates performed by other processes in place, and (4)
impose minimal performance penalty on benign processes.
For example, ReVirt, a system that can record and replay
the VM state for analyzing intrusions [14], records events
at the granularity of the entire virtual machine. This is too
coarse for rolling back the effects of a single process.
Information-ﬂow control. Kernel-based mandatory access
control (MAC) systems such as SELinux [42] and AppAr-
mor [41] can restrict an untrusted program to a subset of sys-
tem resources, but the administrator must identify in advance
which resources will be needed. This is non-trivial even for
relatively simple applications, thus these systems work only
for well-vetted applications and policies. Blacklist policies
such as “untrusted programs can access any directory in
the ﬁle system except /usr/private” can be cumbersome to
formulate using either a ﬁle-system conﬁnement mechanism
such as chroot and jail, or a MAC system that requires
explicit assignment of access-control labels. By contrast,
TXBOX enables easy conﬁguration and enforcement of
blacklist policies specifying only the resources that may not
be accessed by an application.
Operating systems with decentralized information-ﬂow
control can enforce end-to-end access-control policies [15,
34, 63]. TXBOX does not propagate access-control labels
and thus is not able to enforce all policies supported by
these systems, but is simpler to deploy.
IV. SYSTEM TRANSACTIONS
System transactions are a programming abstraction that
provides atomicity, consistency,
isolation, and durability
(ACID) properties for sequences of updates to system re-
sources such as ﬁles, pipes, and signals. Informally, from the
viewpoint of the system, either all updates are performed as
an atomic sequence, or none are. The system always remains
in a consistent state. If the transaction is aborted before it
ﬁnishes, all intermediate updates are rolled back as if none
of the actions inside the transaction had been executed.
When a process performs a “normal” call to the OS, the
effects of this call—for an example, an update to the state
of some system resource—become visible to other processes
as soon as the OS kernel releases its lock on the resource.
System transactions, on the other hand, enclose a code region
into a logical unit called a transaction, which may span
multiple system calls. All accesses to the system within a
transaction are kept isolated and invisible to the rest of the
system until the transaction commits. At the commit time, all
actions performed by the process within the transaction are
published atomically and become visible to other processes.
System transactions should not be confused with transac-
tional memory [37]. The primary purpose of system trans-
actions is to enable applications to express to the OS their
consistency requirements for concurrent operations [48]; in
this sense, they are akin to database transactions rather than
transactional memory. In this paper, however, we use them
for a very different purpose, to conﬁne untrusted applications
in an uncircumventable sandbox.
System transactions require OS support. Our prototype of
TXBOX is based on TxOS, an experimental modiﬁcation of
commodity Linux [48]. In TxOS, system transactions are
part of the OS interface. An application starts a transaction
by making a sys xbegin system call and ends it by calling
sys xend; all calls between are performed as part of a
333
single transaction. TxOS allows both transactional and non-
transactional system calls to access the same, shared system
resources. The OS ensures that these accesses are correctly
serialized and contention is arbitrated fairly.
To keep track of the system objects accessed by a trans-
action, TxOS maintains a transactional workset. It stores
references to all kernel objects (inodes, etc.) for which the
transaction has private, “shadow” copies. For fast commit,
the workset is sorted by the kernel locking discipline. Each
entry in the workset contains a pointer to the stable object,
a pointer to the shadow copy, information about whether the
object is read-only or read-write, and a set of type-speciﬁc
methods (commit, abort, lock, unlock, release).
TxOS uses eager conﬂict detection. As soon as two
isolated processes attempt a conﬂicting access to a resource,
the OS rolls one back and the transaction is retried. Trans-
actions are serializable: TxOS does not allow a process to
make a shadow copy of potentially inconsistent state, and
all conﬂicts are detected before a transaction is allowed
to commit [47]. Under the default contention management
policy, the losing process is suspended until the transaction
that it lost to commits.
In TXBOX, transactional worksets provide a convenient
vantage point for the security monitor to inspect all potential
effects of the sandboxed process on the system state: all
ﬁles it accessed, all updates it intends to performs, etc. The
monitor decides whether these updates satisfy the security
policy and can be made visible to the rest of the system.
Support for system transactions comes at a modest per-
formance cost. The average overhead in TxOS, at the scale
of a single system call, is around 29% [48]. In Section VI,
we show the performance overhead of TXBOX for several
individual system calls and application workloads.
Security
Monitor 
Kernel
User−land
Policy Decision 
Engine
Enforcer
Transactional
Workset
System call
log
Policy
Policy
Violation
Forced
Transaction
(begin/
commit/
abort)
Character  
Device
Policy
Policy
Violation
System Call
Interposer
System
Call
Policy
Manager
Monitored
program
Figure 2. Overview of TXBOX architecture
V. DESIGN AND IMPLEMENTATION OF TXBOX
A. Architecture of TxBox
The architecture of TXBOX is shown in Fig. 2. The two
main parts are the security monitor, which runs in the OS
kernel, and the policy manager, which runs in user space.
The system administrator uses the policy manager to
deﬁne the policy as a set of regular expressions over system
call names and arguments and system objects such as inodes
and socket descriptors. Each regular expression is marked as
either a whitelist or a blacklist, which speciﬁes, respectively,
the required or forbidden behavior of the sandboxed pro-
gram. The policy may also specify system calls that should
be denied while permitting the program to continue running.
The policy may specify critical system calls, which
cause a trap into the security monitor when invoked by
the sandboxed process. By default, critical calls always
include all calls related to program termination (e.g., exit
and exit group) and external I/O (e.g., network and inter-
process communication).
The policy manager compiles the policy and installs it
in the security monitor. The monitor forces each untrusted
user process to run inside a transaction and applies installed
policies as described in Section V-C. TXBOX depends on the
OS to support transactional system calls (see Section IV);
our prototype uses TxOS [48]. Because TxOS does not allow
one process to put another process in a transactional mode,
we modiﬁed the TxOS kernel so that the security monitor
can force user processes to run inside transactions.