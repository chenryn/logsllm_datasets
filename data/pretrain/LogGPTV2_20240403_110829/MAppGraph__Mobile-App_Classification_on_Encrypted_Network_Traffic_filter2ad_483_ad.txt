FlowPrint
0.8738
MAppGraph
0.847
MLP
Enhanced
0.6535
FlowPrint
0.8683
MAppGraph
0.9081
0.8759
0.9364
0.8905
0.8559
0.9181
0.8705
0.8546
0.8977
0.8648
0.8447
0.8759
0.8478
0.7785
0.8698
F1-Score Accuracy
0.9075
0.8341
0.9346
0.8894
0.8296
0.9174
0.8671
0.8175
0.8932
0.8625
0.7945
0.8738
0.8470
0.6535
0.8683
0.9074
0.8275
0.9347
0.8896
0.8258
0.9171
0.8681
0.8179
0.8935
0.8631
0.7978
0.8734
0.8466
0.6711
0.8679
Table 5: Impact of Slice Duration on Performance of Classi-
fication Models
tslice
1
5
10
Technique
Enhanced
FlowPrint
MAppGraph
Enhanced
FlowPrint
MAppGraph
Enhanced
FlowPrint
MAppGraph
Precision Recall
F1-Score Accuracy
0.7773
0.9342
0.8414
0.9353
0.8759
0.9364
0.7325
0.9327
0.8112
0.9335
0.8341
0.9346
0.7176
0.9328
0.8065
0.9337
0.8275
0.9347
0.7325
0.9327
0.8112
0.9335
0.8341
0.9346
minutes), sliding windows will increase the frequency of classifica-
tion and detection. For instance, with sliding windows of 2 minutes
and Twindow = 5 minutes, within 10 minutes, 3 samples will be col-
lected and analyzed instead of 2 samples in case of non-overlapping.
This could help users (e.g., network administrator) who deploy the
proposed approach, quickly detect and class the apps.
5.3.4
Impact of Slice Duration on Cross-Correlation in Graph Con-
struction. In this experiment, we evaluate the impact of the slice
duration that is used to determine the communication correlation
among destination services connected by a mobile app. The shorter
the slice duration, the fewer the edges in the graphs. On the other
hand, the longer the slice duration, the graphs become fully con-
nected. In both scenarios, the communication correlation may affect
the capability of MAppGraph in learning the communication be-
havior of mobile apps. In Table 5, we present the performance of
the techniques with different values of slice duration. It is to be
noted that the slice duration is used to compute the weight of graph
edges. Thus, it does not affect the performance of MLP that only
Figure 9: Performance of MAppGraph with and without us-
ing IP Addresses in Feature Vectors.
uses traffic features of the nodes in the graphs (i.e., the destina-
tion services that mobile apps connect to). Thus, we do not show
MLP in this experiment. Interestingly, the results show that the
performance increases along with the increase in the slice duration.
While FlowPrint incurs a big performance gap (up to 13%) between
the two scenarios: tslice = 1 second and tslice = 10 seconds, this
does not happen to MAppGraph. The difference between the two
scenarios is less than 1%. This relieves the effort for determining
optimal slice duration to obtain the best performance.
5.3.5 Performance with and without using the IP Addresses in Fea-
ture Vectors. As we discussed previously, IP addresses of destination
services may change due to load balancing. In this experiment, we
train MAppGraph without using the IP addresses of destination
services in the feature vectors. In Figure 9, we present the perfor-
mance comparison of MAppGraph with and without IP addresses
in feature vectors. The results show that the performance slightly
decreases when IP addresses are not used to train MAppGraph.
However, we believe that this performance is acceptable as the
model does not need to be retrained when deploying in a different
network domain of the destination services. It is worth mentioning
that the performance of MAppGraph without using IP addresses
as a feature still significantly better than that of FlowPrint, thus
demonstrating the effectiveness of the proposed technique.
5.3.6 Classification of Mobile Apps with Similar Functionalities. In
this experiment, we evaluate the performance of MAppGraph when
apps have similar functionalities. We created 2 datasets, each having
17 apps. The first dataset includes 17 apps related to audio and
music players such as Spotify and SoundCloud, which should have
similar traffic features such as packet size, flow size, etc. The second
dataset includes the apps with different functionalities. We trained
two DGCNN models and tested them on the two datasets, denoted
as SIM-APP and DIFF-APP, respectively. In Figure 10, we present the
performance of these two models. As expected, SIM-APP has lower
performance compared to DIFF-APP. The model (DIFF-APP) trained
on the dataset with different functionalities attains 0.9750 for all
performance metrics. However, the performance degradation when
similar apps are present in the dataset is not significant (i.e., 4%).
This shows that considering cross-correlation among the services
used by the apps into graphs and combining with traffic features
(i.e., information extracted from packet headers) as attributes of
graph nodes allow us to accurately differentiate mobile apps even
though they have similar functionalities.
 0.9 0.905 0.91 0.915 0.92 0.925 0.93 0.935 0.94PrecisionRecallF1-ScoreAccuracyPerformanceWith IPWithout IP1034MAppGraph: Mobile-App Classification on Encrypted Network Traffic using Deep Graph Convolution Neural Networks ACSAC ’21, December 6–10, 2021, Virtual Event, USA
model to decide whether the traffic sample belongs to the selected
app. We can compare the confidence with a predefined threshold
(e.g., 0.5). If the probability is smaller than the threshold, we can
confirm that the app is unseen or unidentified. A more advanced ap-
proach that uses an unsupervised learning approach such as graph
clustering could also be employed. Such an unsupervised learning
approach does not need a large labelled dataset, thus relieving us
from data labelling effort. We make this as our future work.
6 CONCLUSION
In this paper, we presented MAppGraph, a novel technique for
mobile app classification that can deal with encrypted traffic, dy-
namic communication behavior and implementation nature of mo-
bile apps. We developed a technique to process mobile traffic and
construct communication behavior graphs that considers the cross-
correlation among the services connected by the apps and traffic
features, which are useful for differentiating mobile apps. We de-
veloped a DGCNN model that is able to learn the diverse commu-
nication behavior of mobile apps from a large number of graphs.
We collected traffic for 101 Android apps, each with more than
30 hours of traffic for the experiments. We carried out extensive
experiments with various scenarios and compared the performance
of MAppGraph with a traditional deep learning model (MLP) and
two state-of-the-art techniques (AppScanner and FlowPrint). The
experimental results show that MAppGraph outperforms the base-
line techniques with a performance improvement of up to 20% in
terms of Precision, Recall, F1-Score and Accuracy. With high per-
formance and fast execution, MAppGraph enables better mobile
security by using it in anomaly detection, automated vulnerability
patching of mobile apps, etc. as well as in network management
such as dynamic resource allocation and traffic engineering.
ACKNOWLEDGMENTS
This work was partially supported by Tan Tao University Founda-
tion for Science and Technology Development under the Grant No.
TTU.RS.19.102.023.
REFERENCES
[1] Khaled Al-Naami et al. 2016. Adaptive Encrypted Traffic Fingerprinting with
Bi-Directional Dependence. In Proc. 32nd Annual Conference on Computer Security
Applications (ACSAC ’16). Los Angeles, CA, USA, 177–188.
[2] Blake Anderson et al. 2018. Deciphering malware’s use of TLS (without decryp-
tion). J Comput Virol Hack Tech 14 (Aug. 2018).
[3] Blake Anderson and David McGrew. 2016. Identifying Encrypted Malware Traffic
with Contextual Flow Data. In 2016 ACM Workshop on Artificial Intelligence and
Security. Vienna, Austria, 35–46.
[4] Noah J. Apthorpe, Dillon Reisman, Srikanth Sundaresan, Arvind Narayanan, and
Nick Feamster. 2017. Spying on the Smart Home: Privacy Attacks and Defenses
on Encrypted IoT Traffic. CoRR abs/1708.05044 (2017).
[5] Bram Bonne. 2021. An Update on Android TLS Adoption. https://android-
developers.googleblog.com/2019/12/an-update-on-android-tls-adoption.html.
Online; accessed 30 April 2021.
[6] Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann Lecun. 2014. Spectral
networks and locally connected networks on graphs. In International Conference
on Learning Representations (ICLR2014). Banff, Canada.
[7] Francisco M. Castro, Manuel J. Marín-Jiménez, Nicolás Guil, Cordelia Schmid,
and Karteek Alahari. 2018. End-to-End Incremental Learning. In 15th European
Conference on Computer Vision (ECCV 2018). Munich, Germany, 241–257.
[8] Fenxiao Chen, Yun-Cheng Wang, Bin Wang, and C.-C. Jay Kuo. 2020. Graph
representation learning: a survey. APSIPA Transactions on Signal and Information
Processing 9 (2020), e15. https://doi.org/10.1017/ATSIP.2020.13
Figure 10: Classification of Apps with Similar and Different
Functionalities.
(a) Precision.
(b) Recall.
(c) F1-Score.
(d) Accuracy.
Figure 11: Performance of Techniques w.r.t Number of Apps.
5.3.7 Performance with Different Number of Apps. We evaluate the
performance of MAppGraph with different number of apps. We
randomly selected a number of apps from the original dataset to
train and test the model. The results presented in Figure 11 show
that the performance of the techniques degrades along with the
increase in the number of apps. This is expected as the higher the
number of apps, the higher the possibility that the more apps have
similar behavior. The results also indicate that the performance of
MLP, AppScanner and FlowPrint degrades quickly, resulting in a
big margin between the two scenarios (i.e., the smallest and highest
number of apps). Whereas, the performance of the DGCNN model
slightly decreases and still achieves high performance even with
the highest number of apps in the dataset. This demonstrates the
effectiveness of MAppGraph.
5.3.8 Discussion on Detection of Unseen/unidentified Apps. While
the proposed technique mainly applies to the problem of mobile app
classification, it can also be adopted for the problem of detection of
unseen or unidentified apps. Note that the output of the softmax
layer (i.e., the output layer of the DGCNN architecture) for class
decision is a probability and the class with the highest probability
is selected. This probability is considered as the confidence of the
 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99PrecisionRecallF1-ScoreAccuracyPerformanceSIM-APPDIFF-APP 0.8 0.82 0.84 0.86 0.88 0.9 0.92 0.94 0.96 0.98 1102030405060708090101PerformanceNumber of AppsMLPDGCNNFlowPrintAppScanner 0.75 0.8 0.85 0.9 0.95 1102030405060708090101PerformanceNumber of AppsMLPDGCNNFlowPrintAppScanner 0.75 0.8 0.85 0.9 0.95 1102030405060708090101PerformanceNumber of AppsMLPDGCNNFlowPrintAppScanner 0.75 0.8 0.85 0.9 0.95 1102030405060708090101PerformanceNumber of AppsMLPDGCNNFlowPrintAppScanner1035ACSAC ’21, December 6–10, 2021, Virtual Event, USA
T.-D. Pham et al.
[9] Yi Chen, Wei You, Yeonjoon Lee, Kai Chen, XiaoFeng Wang, and Wei Zou. 2017.
Mass Discovery of Android Traffic Imprints through Instantiated Partial Execu-
tion. In Proc. 2017 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’17). Dallas, Texas, USA, 815–828.
[10] Z. Chen, K. He, J. Li, and Y. Geng. 2017. Seq2Img: A sequence-to-image based
approach towards IP traffic classification using convolutional neural networks.
In 2017 IEEE International Conference on Big Data. Boston, MA, USA, 1271–1276.
[11] Zhengyang Chen, Bowen Yu, Yu Zhang, Jianzhong Zhang, and Jingdong Xu. 2016.
Automatic Mobile Application Traffic Identification by Convolutional Neural
Networks. In 2016 IEEE Trustcom/BigDataSE/ISPA. Tianjin, China, 301–307.
[12] Yeongrak Choi, Jae Yoon Chung, Byungchul Park, and James Won-Ki Hong.
2012. Automated Classifier Generation for Application-level Mobile Traffic
Identification. In 2012 IEEE Network Operations and Management Symposium.
Maui, HI, USA, 1075–1081.
[13] Shuaifu Dai, Alok Tongaonkar, Xiaoyin Wang, Antonio Nucci, and Dawn Song.
2013. NetworkProfiler: Towards automatic fingerprinting of Android apps. In
2013 Proceedings IEEE INFOCOM. Turin, Italy, 809–817.
[14] Manh Tuan Do, Noseong Park, and Kijung Shin. 2020. Two-stage Training of
Graph Neural Networks for Graph Classification. arXiv e-prints (Nov. 2020).
[15] David Duvenaud, , Dougal Maclaurin, Jorge Aguilera-Iparraguirre, Rafael Gomez-
Bombarelli, Timothy Hirzel, Alan Aspuru-Guzik, and Ryan P. Adams. 2015. Con-
volutional Networks on Graphs for Learning Molecular Fingerprints. In Twenty-
ninth Conference on Neural Information Processing Systems. Montreal, Canada.
[16] A. S. Iliyasu and H. Deng. 2020. Semi-Supervised Encrypted Traffic Classification
With Deep Convolutional Generative Adversarial Networks. IEEE Access 8 (2020).
[17] Paul Jaccard. 1912. The Distribution of the Flora in the Alpine Zone. New
Phytologist 11, 2 (Feb. 1912).
[18] Peter Jonsson, Stephen Carson, Jasmeet Singh Sethi, Mats Arvedson, Ritva Sven-
ningsson, Per Lindberg, Kati Öhman, and Patrik Hedlund. 2017. Ericsson Mobility
Report. Technical Report. Ericsson.
[19] Diederik P. Kingma and Jimmy Ba. 2015. Adam: A Method for Stochastic Opti-
mization. In 3rd International Conference on Learning Representations (ICLR 2015).
San Diego, CA, USA.
[20] Baris Kurt, Engin Zeydan, Utku Yabas, Ilyas Alper Karatepe, Gunes Karabulut
Kurt, and Ali Taylan Cemgil. 2016. A Network Monitoring System for High Speed
Network Traffic. In 2016 13th Annual IEEE International Conference on Sensing,
Communication, and Networking (SECON). London, UK.
[21] Junhyun Lee, Inyeop Lee, and Jaewoo Kang. 2019. Self-Attention Graph Pooling.
In Proc. International Conference on Machine Learning. Long Beach, USA.
[22] Jingyi Liao, Sin G. Teo, Partha Pratim Kundu, and Tram Truong-Huu. 2021. ENAD:
An Ensemble Framework for Unsupervised Network Anomaly Detection. In Proc.
IEEE CSR 2021. Virtual Conference.
[23] Martina Lindorfer, Matthias Neugschwandtner, Lukas Weichselbaum, Yanick
Fratantonio, Victor van der Veen, and Christian Platzer. 2014. ANDRUBIS –
1,000,000 Apps Later: A View on Current Android Malware Behaviors. In 2014
Third International Workshop on Building Analysis Datasets and Gathering Experi-
ence Returns for Security (BADGERS). Wroclaw, Poland, 3–17.
[24] M. Lopez-Martin, B. Carro, A. Sanchez-Esguevillas, and J. Lloret. 2017. Network
Traffic Classifier With Convolutional and Recurrent Neural Networks for Internet
of Things. IEEE Access 5 (2017), 18042–18050.
[25] Mohammad Lotfollahi, Mahdi Jafari Siavoshani, Ramin Shirali Hossein Zade, and
Mohammdsadegh Saberian. 2020. Deep packet: a novel approach for encrypted
traffic classification using deep learning. Soft Computing 24 (Feb. 2020).
[26] Yair Meidan, Michael Bohadana, Asaf Shabtai, Juan David Guarnizo, Martín
Ochoa, Nils Ole Tippenhauer, and Yuval Elovici. 2017. ProfilIoT: A Machine
Learning Approach for IoT Device Identification Based on Network Traffic Anal-
ysis. In Proc. Symposium on Applied Computing (SAC ’17). Marrakech, Morocco.
[27] Markus Miettinen, Samuel Marchal, Ibbad Hafeez, N. Asokan, Ahmad-Reza
Sadeghi, and Sasu Tarkoma. 2017.
IoT SENTINEL: Automated Device-Type
Identification for Security Enforcement in IoT. In 2017 IEEE 37th International
Conference on Distributed Computing Systems (ICDCS). Atlanta, GA, USA.
[28] Akash Raj Narayanadoss, Tram Truong-Huu, Purnima Murali Mohan, and Mo-
han Gurusamy. 2019. Crossfire Attack Detection Using Deep Learning in Soft-
ware Defined ITS Networks. In 2019 IEEE 89th Vehicular Technology Conference
(VTC2019-Spring). Kuala Lumpur, Malaysia.
[29] T. T. T. Nguyen and G. Armitage. 2008. A survey of techniques for internet traffic
classification using machine learning. IEEE Communications Surveys & Tutorials
10, 4 (2008), 56–76.
[30] Sinno Jialin Pan and Qiang Yang. 2010. A Survey on Transfer Learning. IEEE
Transactions on Knowledge and Data Engineering 22, 10 (2010), 1345–1359.
[31] Emanuele Petagna, Giuseppe Laurenza, Claudio Ciccotelli, and Leonardo Quer-
zoni. 2019. Peel the Onion: Recognition of Android Apps Behind the Tor Network.
In Proc. International Conference on Information Security Practice and Experience.
Kuala Lumpur, Malaysia, 95–112.
[32] Lawrence R. Rabiner and Bernard Gold. 1975. Theory and Application of Digital
Signal Processing. Prentice Hall, Hoboken, New Jersey, United States.
[33] Jingjing Ren et al. 2019. An International View of Privacy Risks for Mobile Apps.
https://recon.meddle.mobi/papers/cross-market.pdf
[34] Jingjing Ren, Martina Lindorfer, Daniel Dubois, Ashwin Rao, David Choffnes,
and Narseo Vallina-Rodriguez. 2018. Bug fixes, improvements,... and privacy
leaks–a longitudinal study of pii leaks across android app versions. In Proc. of the
Network and Distributed System Security Symposium (NDSS). San Diego, USA.
[35] S. Rezaei and X. Liu. 2019. Deep Learning for Encrypted Traffic Classification:
An Overview. IEEE Communications Magazine 57, 5 (2019), 76–81.
[36] Shahbaz Rezaei and Xin Liu. 2019. How to Achieve High Classification Accuracy
with Just a Few Labels: A Semisupervised Approach Using Sampled Packets. In
Proc. 19th Industrial Conference on Data Mining. New York, USA, 28–42.
[37] Michael Schlichtkrull, Thomas N. Kipf, Peter Bloem, Rianne van den Berg, Ivan
Titov, and Max Welling. 2018. Modeling Relational Data with Graph Convolu-
tional Networks. In European Semantic Web Conference. Heraklion, Crete, Greece.
[38] Yaman Sharaf-Dabbagh and Walid Saad. 2016. On the Authentication of Devices
in the Internet of Things. In 2016 IEEE 17th International Symposium on A World
of Wireless, Mobile and Multimedia Networks (WoWMoM). Coimbra, Portugal.
[39] Hongtao Shi, Hongping Li, Dan Zhang, Chaqiu Cheng, and Xuanxuan Cao. 2018.
An efficient feature generation approach based on deep learning and feature
selection techniques for traffic classification. Computer Networks 132 (2018).
[40] V. F. Taylor, R. Spolaor, M. Conti, and I. Martinovic. 2016. AppScanner: Automatic
Fingerprinting of Smartphone Apps from Encrypted Network Traffic. In IEEE
EuroS&P 2016. Saarbruecken, Germany.
[41] Vincent F. Taylor, Riccardo Spolaor, Mauro Conti, and Ivan Martinovic. 2018.
Robust Smartphone App Identification via Encrypted Network Traffic Analysis.
IEEE Transactions on Information Forensics and Security 13, 1 (2018), 63–78.
[42] Vijayanand Thangavelu, Dinil Mon Divakaran, Rishi Sairam, Suman Sankar
Bhunia, and Mohan Gurusamy. 2019. DEFT: A Distributed IoT Fingerprinting
Technique. IEEE Internet of Things Journal 6, 1 (2019), 940–952.
[43] Tram Truong-Huu, Nidhya Dheenadhayalan, Partha Pratim Kundu, Vasudha
Ramnath, Jingyi Liao, Sin G. Teo, and Sai Praveen Kadiyala. 2020. An Empirical