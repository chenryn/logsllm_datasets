### 变量key与魔术引号
我们最在这一节的开头就提到了变量key，PHP的魔术引号对它有什么影响呢？
``` php
 $value)
        {
        print $key."\n";
        }
?>
```
1)当magic_quotes_gpc = On时，在php5.24下测试显示：
```
aaaa\'aaa
bb\'b
```
从上面结果可以看出来，在设置了magic_quotes_gpc = On下，变量key受魔术引号影响。但是在php4和php
```
结果显示:
`Array ( [aaaa'aaa] => Array ( [bb\'] => 1 ) )` 
数组第一维变量的key不受魔术引号的影响。
漏洞审计策略PHP版本要求：php4和php $value)
{
        print $key;
}
?>
```
以上的代码看上去很完美，但是他这个代码里addslashes($value)只处理了变量的具体的值，但是没有处理变量本身的key，上面的代码显示结果如下：
``` php
Array
(
    [aaa'aa] => 1\'
)
aaa'aa
```
漏洞审计策略PHP版本要求：无
系统要求：无
审计策略：通读代码
### 代码注射
PHP中可能导致代码注射的函数很多人都知道eval、preg_replace+/e 可以执行代码，但是不知道php还有很多的函数可以执行代码如：
assert() call_user_func() call_user_func_array() create_function() 变量函数...
这里我们看看最近出现的几个关于create_function()代码执行漏洞的代码：
``` php
query("SELECT uid FROM pw_members WHERE username LIKE '$pwuser'");
while($member=$db->fetch_array($query)){
        $uids .= $member['uid'].',';
}
$uids ? $uids=substr($uids,0,-1) : $sqlwhere.=' AND 0 ';
........
$query = $db->query("SELECT DISTINCT t.tid FROM $sqltable WHERE $sqlwhere $orderby $limit");
```
漏洞审计策略PHP版本要求：php4
```
当我们提交构造`cookie:PHPSESSID=/../1.php`，相当于`unlink('sess_/../1.php')`这样就通过注射`../` 转跳目录删除任意文件了。很多著名的程序某些版本都受影响如phpmyadmin，sablog，phpwind3等等。
漏洞审计策略PHP版本要求：具体不详
系统要求：无
审计策略：查找session_destroy
### 随机函数
1) rand() VS mt_rand()
``` php
```
可以看出rand()最大的随机数是32767，这个很容易被我们暴力破解。
``` php
ok!!";exit;
   }else { print $i."";}
}
?>
```
当我们的程序使用rand处理session时，攻击者很容易暴力破解出你的session，但是对于mt_rand是很难单纯的暴力的。
漏洞审计策略PHP版本要求：无
系统要求：无
审计策略：查找rand
2) mt_srand()/srand()-weak seeding（by Stefan Esser）
看php手册里的描述：
``` php
mt_srand
(PHP 3 >= 3.0.6, PHP 4, PHP 5)
mt_srand -- 播下一个更好的随机数发生器种子
说明
void mt_srand ( int seed )
```
用 seed 来给随机数发生器播种。从 PHP 4.2.0 版开始，seed 参数变为可选项，当该项为空时，会被设为随时数。
例子 1. mt_srand() 范例
``` php
```
注: 自 PHP 4.2.0 起，不再需要用 srand() 或 mt_srand() 函数给随机数发生器播种，现已自动完成。
php从4.2.0开始实现了自动播种，但是为了兼容，后来使用类似于这样的代码播种：
mt_srand ((double) microtime() * 1000000)
但是使用(double)microtime()*1000000类似的代码seed是比较脆弱的：
0 0php rand.php
//828682
//828682
////////////////
ini_set("max_execution_time",0);
$time=(double) microtime()* 1000000;
print $time."\n";
mt_srand ($time);
$search_id = mt_rand();
$seed = search_seed($search_id);
print $seed;
function search_seed($rand_num) {
$max = 1000000;
for($seed=0;$seed
```
从上面的代码实现了对seed的破解，另外根据Stefan Esser的分析seed还根据进程变化而变化，换句话来说同一个进程里的seed是相同的。 然后同一个seed每次mt_rand的值都是特定的。如下：