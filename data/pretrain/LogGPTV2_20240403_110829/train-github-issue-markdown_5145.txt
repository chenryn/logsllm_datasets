**Issue Type** (Please check one with "x")
- [ ] Bug report => Please search GitHub for a similar issue or PR before submitting.
- [x] Feature request
- [ ] Support request => Please do not submit support requests here. Instead, see [CONTRIBUTING.md](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question).

**Current Behavior**
We have an `AbstractControl` with basic validators (e.g., `required`, `maxLength`) in a Reactive Form created using the TypeScript `FormBuilder`. We have also added a custom validator that dynamically changes the validation strategy based on a dropdown value. Currently, we are using the `setValidators()` method within another component (the `AbstractControl` is passed via `@Input()`). The main issue is that `setValidators()` overwrites the existing validators.

**Example:**

**App Component:**
```typescript
this.form = this.formBuilder.group({
  zip: ['', [Validators.required, Validators.maxLength(10)]]
});
```

**App Template:**
```html
<zip-component [control]="form.get('zip')"></zip-component>
```

**ZIP Component:**
```typescript
@Input() control: AbstractControl;

ngOnInit() {
  this.control.setValidators([
    // Redundant to formBuilder
    Validators.required,
    Validators.maxLength(10),
    // Custom validation based on a dropdown value (via valueChange detection)
    validateZipFn(countryCode)
  ]);
}
```

**Expected Behavior**
To maintain flexibility, we want to avoid overwriting all validators. Ideally, there would be a `getValidators()` method that allows us to retrieve and modify the existing validators. 

**Desired Example:**

**App Component:**
```typescript
this.form = this.formBuilder.group({
  zip: ['', [Validators.required, Validators.maxLength(10)]]
});
```

**App Template:**
```html
<zip-component [control]="form.get('zip')"></zip-component>
```

**ZIP Component:**
```typescript
@Input() control: AbstractControl;

ngOnInit() {
  const existingValidators = this.control.validator ? [this.control.validator] : [];
  const newValidators = [...existingValidators, validateZipFn(countryCode)];
  this.control.setValidators(newValidators);
}
```

**Motivation / Use Case for Changing the Behavior**
This change would provide more flexibility when dynamically adding or modifying validators, especially in scenarios where multiple components or services need to contribute to the validation logic.

- **Angular Version:** ~2.1.2
- **Browser:** All
- **Language:** TypeScript / ES6