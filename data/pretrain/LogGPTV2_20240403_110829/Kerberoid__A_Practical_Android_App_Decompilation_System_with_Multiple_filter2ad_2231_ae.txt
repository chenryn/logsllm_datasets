tain a better decompiler overall, this is what we explore in
Section 5.
Figure 6: Venn diagram of syntactically and semantically
equivalent modulo inputs decompilation results.
1 protected static class KeySetIterator extends
HashIterator implements Iterator {
2 -aa@SuppressWarnings("unchecked")
3
protected KeySetIterator(final
AbstractHashedMap parent) {
4 -aaaasuper((AbstractHashedMap) parent);
5 +aaaasuper(parent);
6
7
}
[...]
8 }Listing
12:
Excerpt of diﬀerences in AbstractHashedMap original
(in red marked with a -) and decompiled with Procyon (in
green marked with a +).
alent classes modulo inputs for decompiled/recompiled
classes. We exclude Dava and Krakatau because they do
not handle correctly any class ﬁle unique to them. We see
that 6/8 decompilers have cases for which they are the only
decompiler able to handle it properly. These cases represent
276ࢧ2397 classes. Only 589ࢧ2397 classes are handled cor-
rectly by all of these 6 decompilers. Furthermore, 157ࢧ2397
classes are not correctly handled by any of the considered
decompilers.
Listing12isanexcerptof AbstractHashedMap,which
is incorrectly decompiled by all decompilers. While the
completesetofsyntacticerrorsforthedecompiledsourcesis
diﬀerent for each decompiler, it always includes one call of
the constructor of the super class of KeySetIterator.
Eitheraconstructorwiththecorrectsignatureisnotresolved
or the cast in front of parent is missing. The fundamental
problem behind this decompilation lies in the fact that the
JVM does not directly support generics[1]. While bytecode
do keep meta information about types in signatures, the ac-
tual type manipulated in this example for ? is an Object.
Therefore, contrarily to the original sources, no CHECKCAST
instruction is required in the bytecode. This does not make
thetaskofdecompilationimpossibletoperformintheory, as
Harrand et al.: Preprint submitted to Elsevier
Page 11 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
Answer to RQ5: The classes for which each decompi-
ler produce semantically equivalent source code modulo
inputdonotoverlapcompletely. For 6outof 8decompil-
ers, there exists at least 1 class for which the decompiler
is the only one to produce semantic equivalence modulo
inputs sources. In theory, a union of the best features of
eachdecompilerwouldcover 2240outofthe 2397(93%)
classes of the dataset. This suggests to combine multiple
decompilers to improve decompilation results.
Inthissection,wepresentanoriginalconceptfordecom-
5. Meta Decompilation
pilation.
5.1. Overview
In 1995, Selberg et al. [37] noticed that diﬀerent web
search engines produced diﬀerent results for the same in-
put query. They exploited this ﬁnding in a tool called
METACRAWLER, which delegates a user query to various
search engines and merges the results. This idea of combin-
ing diverse tools that have the same goal has been explored
since then. For example, Blair and Somayaji [11] explore
how a genetic algorithm can recombine related programs at
the object ﬁle level to produce correct variants of C pro-
grams. Persaud et al. [33] combines cryptographic libraries
together for software security. Chen et al. [4] rely on vari-
ousfuzzerstobuildanensemblebasedfuzzerthatgetsbetter
performance and generalization ability than that of any con-
stituent fuzzer alone.
In this paper, we apply a similar approach to improve
Java decompilation. Each decompiler has its strengths and
weaknesses, and the subset of JVM bytecode sequences they
correctly handle is diverse (cf Section 4.5). Therefore, our
idea is to combine decompilers in a meta-decompiler.
In this paper, we propose a tool called Arlecchino, that
implements such a ‘meta-decompilation’ approach. Ar-
lecchino merges partially incorrect decompilation results
from diverse decompilers in order to produce a correct one.
5.2. Example
class
YamlConfiguration of the project Bukkit is an example
of a class ﬁle that is incorrectly handled by both JADX
and Dava. While both decompilers produce syntactically
incorrect Java code for this class, the error that prevents
successful recompilation is not located at the same place in
both decompiled classes.
org.bukkit.configuration.file.
The
Listing 13 shows an excerpt of the decompiled sources
produced by Dava for YamlConfiguration. The static
ﬁeld BLANK_CONFIG is initialized with an incorrect string
literalthatcontainsanonescapedlinereturn. Whenattempt-
ingtorecompilethesesources, javacproducesan unclosed
string literal error for both line 3 and 4.
the decompiled
sources produced by JADX for the same class.
The
Listing 14 shows an excerpt of
23
24
25
2
3
4
5
6
7
8
9
1 public class YamlConfiguration extends
2
3
4 ";
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
FileConfiguration {
protected static final String COMMENT_PREFIX = "#
";
protected static final String BLANK_CONFIG = "{}
private final DumperOptions yamlOptions;
private final Representer yamlRepresenter;
private final Yaml yaml;
public YamlConfiguration()
{
DumperOptions r7;
YamlRepresenter r8;
YamlConstructor r9;
Yaml r10;
BaseConstructor r11;
r7 = new DumperOptions();
yamlOptions = r7;
r8 = new YamlRepresenter();
yamlRepresenter = r8;
r9 = new YamlConstructor();
r11 = (BaseConstructor) r9;
r10 = new Yaml(r11, yamlRepresenter,
yamlOptions);
yaml = r10;
}
[...]
26 }Listing 13: Excerpt of org.bukkit.configuration.
file.YamlConfiguration decompiled with Dava.
1 public class YamlConfiguration extends
FileConfiguration {
protected static final String BLANK_CONFIG =
"{}\n";
protected static final String COMMENT_PREFIX = "#
";
private final Yaml yaml =
new Yaml(new YamlConstructor(),
this.yamlRepresenter, this.yamlOptions);
private final DumperOptions yamlOptions = new
DumperOptions();
private final Representer yamlRepresenter = new
YamlRepresenter();
[...]
10 }Listing 14: Excerpt of org.bukkit.configuration.
file.YamlConfiguration decompiled with JADX.
static ﬁeld BLANK_CONFIG is correctly initialized with
"{}\n", but
the initialization of yaml, yamlOptions
and yamlRepresenter are conducted out of order,
which lead to a compilation error as yamlOptions and
yamlRepresenter are still null when yaml is initialized.
Intuitively, one can see that Dava’s solution could be ﬁxed
by replacing lines 3 and 4 with line 2 from JADX’s solu-
tion. This is an example of successful meta-decompilation,
merging the output of two decompilers.
Figure 7 illustrates how two erroneous decompilations
can be merged into one that is correct, when the error is not
located at the same place. This ﬁgure represents diﬀerent
versions of the abstract syntax tree (AST) of a Java class.
The root node corresponds to the class itself, while its chil-
Harrand et al.: Preprint submitted to Elsevier
Page 12 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
Data:  A bytecode ﬁle,
 A set of decompilers
Result: The decompiled java sources corresponding
1  ࢎ {}
2   ࢎ {}
3 foreach  ࢠ  do
4
5
6
7
8
 ࢎ  ((, ))
  ࢎ ()
foreach  ࢠ   do
if ¬() ࢳ () ࢡ  then
  ࢎ
  Þ {() ࢐ }
end
end
9
10
11
12
13
14
15
16
17
18
19
20
21 end
end
 ࢎ  Þ {}
foreach  ࢠ  do
if (,  ) then
if
((,  ))
then
return ();
else
(,  )
end
end
Algorithm 1: Meta decompilation procedure.
Figure 7: Meta decompilation: Merger of diﬀerent partial de-
compilation. Node in blue with plain border originates from
Decompiler #1, nodes in yellow with dashed border originate
from Decompiler #2. Borderless nodes in red contains compi-
lation errors.
dren represent type members of the class. A type member
is either a method, a ﬁeld, a nested type (class, or enum),
or a static initialization block. Decompilation #1 rep-
resents the AST of the sources produced by one decompi-
ler, it includes 4 type members (A,B,C and D), and one
compilation error located in B. Decompilation #2 rep-
resents the sources produced by a diﬀerent decompiler for
the same class. It contains only 3 type members (A,B an
C’) and one compilation error located in C’. The fragment
store is a dictionary containing an error free AST fragment
for each type member when such a fragment exists. Meta
Decompilation shows an example of error free AST that
canbebuiltbasedon Decompilation #1andthestorethat
combines AST fragments from both decompilations. Note
that diﬀerent decompilers may produce sources that do not
exactly contain the same type members. This is illustrated
here by Decompilation #2 not having a type member D
and having a diﬀerent signature for C.
5.3. Algorithm
Algorithm 1 describes the process of meta decompila-
tion as implemented by Arlecchino. Arlecchino takes as in-
put a bytecode ﬁle, and an ordered list of bytecode decom-
pilers. The process starts with an empty set of solutions and
anemptyfragmentstoreofcorrectfragments. Thisfragment
store is a dictionary that associates a type member signature
to a fragment of AST free of compilation error correspond-
ing to the type member in question.
For each decompiler,
the meta-decompilation goes
through the following steps.
The bytecode ﬁle is passed to the decompiler . An AST
is built from the decompiled sources (line 4). While build-
ing the AST, the compilation errors and their location are
gathered (if any) and the type members containing errors
are annotated as such. A class abstract syntax tree includes
a node for the class itself as the root, as well as children
representing class information (super class, super interfaces,
formal type parameters) and type members. Type members
include ﬁelds, methods, constructors, inner classes, enum
values, and static blocks. These type members’ source lo-
cations are recorded and compared with the compiler er-
ror locations. If an error is located between a type member
start and end location, the type member is annotated as er-
rored. For example, the element corresponding to the ﬁeld
BLANK_CONFIG is annotated as errored in Dava’s solution
for YamlConfiguration. ThisannotatedAST,thatwecall
solution, is added to the set of remaining solutions.
Additionally, for all type members in the current solu-
tion, if the fragment store does not already contain an er-
ror free fragment with the same signature, the type mem-
ber is added to the fragment store (line 8). The signa-
ture of a type member is a character string that identi-
ﬁes it uniquely. For example, the signature of the ﬁeld
BLANK_CONFIG is org.bukkit.configuration.file.
YamlConfiguration#BLANK_CONFIG and the signature
of YamlConfiguration’s constructor is org.bukkit.
configuration.file.YamlConfiguration().
Harrand et al.: Preprint submitted to Elsevier
Page 13 of 19
ABCDABC’Fragment StoreDecompilation #2Decompilation #1ABC C’DSignatureFragmentClassClassABCDMeta DecompilationClassACDBJava Decompiler Diversity and its Application to Meta-decompilation
Table 5
Arlecchino results on classes with no correct decompilation
from state of the art decompilers.
#PassTest
#Deceptive
#!Recompile
Total
Arlecchino
59 (37.6%)
11 (7.0%)
87 (55.4%)
157 (100%)
Union
0 (0%)
23 (14.6%)
134 (85.4%)
157 (100%)
Each solution in the set of solutions is checked for com-
pletion with the current store (line 12). A solution is “com-
pletable” with the members in a given fragment store, if
all the solution’s type members annotated with an error are
present in the fragment store. Indeed, these type members’
AST can be replaced with an error free variant present in the
fragment store. If a solution is completable with the current
fragment store, all its type members annotated as errored are
replaced with a fragment from the fragment store. The so-
lution is then passed to the compiler to check if it compiles.
If it does, it is printed, and the meta decompilation stops. If
not, the solution is removed from the set of solutions. As the
ﬁrst solution that satisﬁes the oracle (syntactic correctness)
stops the process, and this oracle is imperfect, the order of
the decompilers matters. More details are given in the fol-
lowing section.
By attempting to repair each solution and its given set
of type members with a minimum of transplanted fragments
from those available in the fragment store, Arlecchino does
not favour any type member set. This allows Arlecchino to
deal with cases where the diﬀerent solutions do not contain
the same type members. This occurs with implicit construc-
tor declarations such as the one present in Listing 14 with
YamlConfiguration. It also makes it possible to handle
cases where element signatures might diﬀer depending on
how type erasure is dealt with by each decompiler. And ﬁ-
nally, it handles cases where elements might not be in the
same order (and the order of type members is meaningful as
seen in Listing 14).
5.4. Experimental results about
meta-decompilation
The following section evaluates the eﬀectiveness of Ar-
lecchino. It is organized as follows. First, we gather the 157
classesof ourdataset forwhichno decompilersproducedse-
mantically equivalent modulo input sources and assess the
results produced by Arlecchino. Second, we run Arlecchino
on the complete dataset of classes in this study. We then
evaluate the results with regards to semantic equivalence
modulo inputs. Finally, we study the origin of fragments
producedby Arlecchinoanddiscusstheconsequencesonthe
number of deceptive decompilations.
Table 5 shows the results of meta decompilation on the
157classesofourdatasetthatledtodecompilationerrorsfor