postgres=# select * from tbl order by id limit 10;  
 id | info   
----+------  
  1 | test  
  2 | test  
  3 | test  
  4 | test  
  5 | test  
  6 | test  
  7 | test  
  8 | test  
  9 | test  
 10 | test  
(10 rows)  
Time: 40033.507 ms (00:40.034)  
```  
## 并行创建索引  
为了保证每个Worker至少有32MB的内存用于并行排序，需要设置足够大的maintenance_work_mem（64个WORKER + 1 leader，至少需要2080MB内存）。  
```  
postgres=# select 65*32||' MB';  
 ?column?   
----------  
 2080 MB  
(1 row)  
```  
### 1、1亿  
非并行  
```  
alter table ttt reset ( parallel_workers );  
set max_parallel_maintenance_workers =0;  
postgres=# create index idx_ttt on ttt (id);  
CREATE INDEX  
Time: 26244.362 ms (00:26.244)  
```  
并行  
```  
alter table ttt set ( parallel_workers=64 );  
set max_parallel_maintenance_workers =64;  
postgres=# create index idx_ttt on ttt (id);  
CREATE INDEX  
Time: 15550.082 ms (00:15.550)  
```  
### 2、10亿  
非并行  
```  
alter table t reset ( parallel_workers );  
set max_parallel_maintenance_workers =0;  
postgres=# create index idx_t on t(id);  
CREATE INDEX  
Time: 1442771.066 ms (24:02.771)  
```  
并行  
```  
alter table t set ( parallel_workers=64 );  
set max_parallel_maintenance_workers =64;  
postgres=# create index idx_t on t(id);  
CREATE INDEX  
Time: 160773.885 ms (02:40.774)  
```  
### 3、100亿  
非并行  
```  
alter table tbl reset ( parallel_workers );  
set max_parallel_maintenance_workers =0;  
postgres=# create index idx_tbl on tbl(id);  
CREATE INDEX  
Time: 7456891.022 ms (02:04:16.891)  
```  
并行  
```  
alter table tbl set ( parallel_workers=64 );  
set max_parallel_maintenance_workers =64;  
postgres=# create index idx on tbl(id) ;  
CREATE INDEX  
Time: 1869483.741 ms (31:09.484)  
```  
## 附加 - 分区表创建索引  
PostgreSQL对分区表创建索引时，并不是所有分区同时并行开始创建（至少目前没有在内核中实现所有分区同时开始创建索引）。  
但是，我们可以通过并行创建索引，控制每个分区的并行度。  
```  
create unlogged table p(id int8, info text) partition by hash(id);   
CREATE unlogged TABLE p0 PARTITION OF p FOR VALUES WITH (MODULUS 4, REMAINDER 0);    
CREATE unlogged TABLE p1 PARTITION OF p FOR VALUES WITH (MODULUS 4, REMAINDER 1);    
CREATE unlogged TABLE p2 PARTITION OF p FOR VALUES WITH (MODULUS 4, REMAINDER 2);    
CREATE unlogged TABLE p3 PARTITION OF p FOR VALUES WITH (MODULUS 4, REMAINDER 3);    
insert into p select generate_series(1,100000000), 'test';  
```  
让每个分区以16个并行度并行创建索引。  
```  
set max_parallel_maintenance_workers =16;  
alter table p0 set ( parallel_workers=16 );  
alter table p1 set ( parallel_workers=16 );  
alter table p2 set ( parallel_workers=16 );  
alter table p3 set ( parallel_workers=16 );  
create index idx_p on p(id);  
CREATE INDEX  
Time: 15786.299 ms (00:15.786)  
```  
耗时与单表开64个并行差不多。（为什么不开64个并行，这里主要是因为分了4个分区，单分区数据量已经不大，16个并行度足矣。）  
**按照前面的测试，我们将100亿的表，分成100个分区，那么每个分区1亿数据，创建索引应该仅需1555秒(26分钟)。**  
## 如何操纵并行排序的并行度  
并行排序，仅与这些参数有关：  
```  
# 全局可使用WORKER进程数  
max_worker_processes = 128  
# 全局可开并行计算的WORKER进程数  
max_parallel_workers = 64  
# 单个gather可开并行计算的WORKER进程数  
max_parallel_workers_per_gather = 64  
# 并行计算COST计算依赖的几个参数  
set parallel_tuple_cost =0;  
set parallel_setup_cost =0;  
# 最小多大的表才会使用并行计算  
set min_parallel_index_scan_size =0;  
set min_parallel_table_scan_size =0;  
# 表大小，用于自动计算并行度  
# 表上参数，覆盖根据成本模型计算得到的并行度  
alter table p1 set ( parallel_workers=16 );  
```  
具体并行度算法，参考：  
[《PostgreSQL 9.6 并行计算 优化器算法浅析 - 以及如何强制并行度》](../201610/20161002_01.md)    
## 如何操纵并行创建索引的并行度  
1、基本参数，保证可以开足够多的并行计算worker进程数  
```  
# 全局可使用WORKER进程数  
max_worker_processes = 128  
# 全局可开并行计算的WORKER进程数  
max_parallel_workers = 64  
```  
2、成本模型，自动计算并行度  
```  
# 并行计算COST计算依赖的几个参数  
set parallel_tuple_cost =0;  
set parallel_setup_cost =0;  
# 最小多大的表才会使用并行计算  
set min_parallel_index_scan_size =0;  
set min_parallel_table_scan_size =0;  
# 表大小，用于自动计算并行度  
```  
3、限定基于成本模型计算得到的并行度，单条创建索引SQL最大开多少个并行度  
```  
max_parallel_maintenance_workers  
```  
4、表上parallel_workers参数，覆盖根据成本模型计算得到的并行度（忽略max_parallel_maintenance_workers）  
```  
alter table p1 set ( parallel_workers=16 );  
```  
5、共享内存大小，每个创建索引的worker进程至少需要32MB，（注意还有一个leader process，因此为了保证开N个并行，那么需要 (N+1)*32MB ）.   
```  
maintenance_work_mem  
```  
那么，要强制开N个并行创建索引，在满足条件1的情况下，只需要控制这两个参数maintenance_work_mem，以及表级parallel_workers。  
### 文档  
用户可以自己去看文档  
1、  
https://www.postgresql.org/docs/devel/static/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-MAINTENANCE  
```  
max_parallel_maintenance_workers (integer)  
Sets the maximum number of parallel workers that can be started by a single utility command.   
Currently, the only parallel utility command that supports the use of parallel workers is CREATE INDEX,   
and only when building a B-tree index.   
Parallel workers are taken from the pool of processes established by max_worker_processes,   
limited by max_parallel_workers.   
Note that the requested number of workers may not actually be available at runtime.   
If this occurs, the utility operation will run with fewer workers than expected.   
The default value is 2.   
Setting this value to 0 disables the use of parallel workers by utility commands.  
Note that parallel utility commands should not consume substantially more memory   
than equivalent non-parallel operations.   
This strategy differs from that of parallel query,   
where resource limits generally apply per worker process.   
Parallel utility commands treat the resource limit maintenance_work_mem   
as a limit to be applied to the entire utility command,   
regardless of the number of parallel worker processes.   
However, parallel utility commands may still consume substantially   
more CPU resources and I/O bandwidth.  
```  
2、  
https://www.postgresql.org/docs/devel/static/sql-createindex.html  
```  
PostgreSQL can build indexes while leveraging multiple CPUs in order to process the table rows faster.   
This feature is known as parallel index build.   
For index methods that support building indexes in parallel (currently, only B-tree),   
maintenance_work_mem specifies the maximum amount of memory that can be used by each   
index build operation as a whole, regardless of how many worker processes were started.   
Generally, a cost model automatically determines how many worker processes should be requested, if any.  
Parallel index builds may benefit from increasing maintenance_work_mem where an   
equivalent serial index build will see little or no benefit.   
Note that maintenance_work_mem may influence the number of worker processes requested,   
since parallel workers must have at least a 32MB share of the total maintenance_work_mem budget.   
There must also be a remaining 32MB share for the leader process.   
Increasing max_parallel_maintenance_workers may allow more workers to be used,   
which will reduce the time needed for index creation,   
so long as the index build is not already I/O bound.   
Of course, there should also be sufficient CPU capacity that would otherwise lie idle.  
Setting a value for parallel_workers via ALTER TABLE directly controls how many   
parallel worker processes will be requested by a CREATE INDEX against the table.   
This bypasses the cost model completely, and prevents maintenance_work_mem from affecting   
how many parallel workers are requested.   
Setting parallel_workers to 0 via ALTER TABLE will disable parallel index builds on the table in all cases.  
```  
## 跟踪输出排序过程日志  
开启trace_sort可以跟踪排序过程。例子：  
```  
postgres=# set trace_sort =on;  
SET  
postgres=# set client_min_messages =log;  
SET  
set maintenance_work_mem='8GB';  
alter table ttt set ( parallel_workers=4 );  
postgres=# drop index idx_ttt;  
DROP INDEX  
postgres=# create index idx_ttt on ttt(id);  
LOG:  begin index sort: unique = f, workMem = 1677721, randomAccess = f  
LOG:  begin index sort: unique = f, workMem = 1677721, randomAccess = f  
LOG:  begin index sort: unique = f, workMem = 1677721, randomAccess = f  
LOG:  begin index sort: unique = f, workMem = 1677721, randomAccess = f  
LOG:  begin index sort: unique = f, workMem = 1677721, randomAccess = f  
LOG:  performsort of 0 starting: CPU: user: 3.90 s, system: 0.51 s, elapsed: 4.41 s  