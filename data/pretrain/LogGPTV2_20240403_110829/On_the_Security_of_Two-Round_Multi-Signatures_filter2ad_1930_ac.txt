c ← H0(¯t1, ¯t2, PK , m) and check that ¯t1
and
¯t2
PK −c.
?= gγ1
1 hγ2
?= gγ1
2 hγ2
2 gs
1
1
2.6 The BCJ Multi-Signature Schemes
Whereas Bellare and Neven [BN06] solved the problem
of signature simulation in the security proof by letting all
signers commit to their contribution in a preliminary round of
the signing protocol, the BCJ scheme due to Bagherzandi et
al. [BCJ08] avoids this extra round by using a multiplicatively
homomorphic equivocable commitment scheme. Since the
only known instantiation of such a commitment scheme is
2.7 The MWLD Multi-Signature Scheme
The MWLD scheme due to Ma et al. [MWLD10] ad-
dresses the signature simulation problem by using a witness-
indistinguishable proof based on Okamoto signatures [Oka93],
yielding shorter signatures and more efﬁcient signing than the
BCJ scheme. We present a slightly modiﬁed scheme here to
support signers organized in a tree structure.
Parameters generation. Pg sets up a group G of order q
with generators g and h, where q is a κ-bit prime. Choose
(cid:18)(cid:17)(cid:25)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
q and sets pk ← gsk 1 hsk 2.
two hash functions H0, H1 : {0, 1}∗ → Zq and output par ←
(G, g, h, q).
Key generation. The key generation algorithm Kg(par ) takes
(sk 1, sk 2) ←$ Z2
Signing. Signing is the four-step protocol. A signer Si on input
Sign(par , (sk 1, sk 2), m,T ) behaves as follows.
Announcement. If Si is the leader (i.e., the root of tree T ),
it initiates the protocol by sending an announcement to its
children, which consists of a unique identiﬁer for this signing
session ssid. If Si is not the leader, it waits to receive an
announcement message and forwards it to its children in T .
After doing so, Si proceeds with the commitment phase.
Commitment. Let Ci denote the set of children of Si in tree T .
Si waits to receive all values (tj, Lj) for j ∈ Ci. Note that if
Si has no children (i.e., it is a leaf in tree T ), it will proceed
gri,1 hri,2 ·(cid:5)
(cid:9)
q and computes ti ←
immediately. Si chooses (ri,1, ri,2) ←$ Z2
}∪ (
j∈Ci tj and Li ← {pk
j∈Ci Lj). If Si is not
the leader, it sends (ti, Li) to its parent. If Si is the leader, Si
proceeds with the challenge phase.
Challenge. If Si is the leader, it sets ¯t ← ti and L ← Li,
computes c ← H0(¯t, L, m), and sends (¯t, L) to its children.
If Si is not the leader, it waits to receive a message (¯t, L),
computes c ← H0(¯t, L, m), and sends (¯t, L) to its children.
Response. Si waits to receive all values (sj,1, sj,2) for j ∈ Ci
(note that if Si is a leaf it will proceed immediately), and
(cid:6)
i) and si,b ← ri,b + vi · sk i,b +
then computes vi = H1(c, pk
j∈Ci sj,b for b ∈ {1, 2}. It sends (si,1, si,2) to its parent,
unless Si is the root, then Si sets s1 ← si,1, s2 ← si,2, and
outputs σ ← (c, s1, s2).
Key Aggregation. This scheme does not support a compressed
public key, i.e., KAg(par ,PK) = PK.
Veriﬁcation. Vf on input a set of public keys PK, a signature
σ = (c, s1, s2), and a message m, checks that
i
⎞
⎠ .
,PK, m
pk
−H1(c,pk i)
i
⎛
⎝gs1 hs2 ·
(cid:12)
pk i∈PK
c ?= H0
3. THE SECURITY OF TWO-ROUND MULTI-SIGNATURES
USING REWINDING
In this section, we analyze the security of existing two-round
multi-signature schemes that use rewinding in their security
proof. We ﬁrst look at CoSi and present a metareduction,
proving that if the OMDL assumption is hard, there cannot
exist an algebraic black-box reduction that proves CoSi secure
under the OMDL assumption, making it unlikely that CoSi can
be proven secure. Then, we show that the same metareduction
with small modiﬁcations can be applied to MuSig, the MWLD
scheme, and the BCJ scheme, showing that all those schemes
cannot be proven secure with an algebraic black-box reduction
to OMDL if OMDL is hard, and indicating that the presented
security proofs for those schemes contain ﬂaws.
3.1 Impossiblity of Proving CoSi Secure
We ﬁrst provide an intuition behind the impossibility of
proving CoSi secure by sketching why common proof tech-
niques for Schnorr signatures fail in the case of CoSi. We
then formalize this and use a metareduction to prove that there
cannot be a security proof for CoSi in the ROM under the
OMDL assumption.
In the classical security proof of Schnorr signatures under
the DL assumption [PS00], the reduction feeds its discrete-
logarithm challenge y as public key pk = y to the adversary.
It uses the zero-knowledge property of the Schnorr protocol
to simulate signatures without knowing the secret key. More
precisely,
then
chooses t such that the veriﬁcation equation gs = t·pk c holds,
and programs the random oracle H(t, m) = c. The reduction
then applies the forking lemma to extract two forgeries from
the adversary, from which the discrete logarithm of pk = y
can be computed.
the reduction ﬁrst picks (c, s) at random,
The crucial difference between standard Schnorr signatures
and CoSi is that in CoSi, the ﬁnal ¯t-value included in the
hash is the product of individual ti-values, rather than being
determined by a single signer. Therefore, whenever the honest
signer is not the leader in the signing query, the adversary
learns the ﬁnal ¯t value before the simulator does, and can
prevent the simulator from programming the random-oracle
entry H(¯t, m). One way around this is to prove security
under the OMDL assumption [BP02], [MPSW18a], so that
the simulator can use its discrete-logarithm oracle to simulate
signing queries. Namely, the simulator would use its ﬁrst target
point y0 as public key pk = y0 and use target points y1, . . . , yn
as values t1, . . . , tn when simulating signing queries. Using
the forking lemma, it can extract the discrete logarithm of
pk = y0, and, based on this value and the responses to
its previous discrete-logarithm queries, compute the discrete
logarithms of the other target points t1, . . . , tn. Overall, the
reduction computes the discrete logarithms of n + 1 target
points using only n queries to the DL oracle.
Unfortunately, this intuitive argument conveys a subtle ﬂaw.
Namely, the forking lemma may rewind the adversary to a
point where it has an “open” signing query, meaning, a signing
query where the simulator already output its ti value but
did not yet receive the ﬁnal ¯t value. The problem is that
the adversary may choose a different ¯t value in its second
execution than it did in its ﬁrst execution, thereby forcing the
simulator to make a second DL query for the same signing
query and ruining the simulator’s chances to solve the OMDL
problem. Indeed, Maxwell et al. [MPSW18a] overlooked this
subtle issue that invalidates their security proof. Note that the
same problem does not occur in the proof of Schnorr as an
identiﬁcation scheme [BP02] because the adversary does not
have access to an identiﬁcation oracle during the challenge
phase.
So in order to correctly simulate signing queries in a
rewinding argument, the reduction must be able to provide
(cid:3)
i for the same value ti but for
correct responses si and s
different challenge values c = H(¯t, m) and c
, m). This
means, however, that the reduction must already have known
the secret key corresponding to pk, as it could have computed
it itself as sk = (si − s
) mod q. Stronger even, the
adversary can give the reduction a taste of its own medicine
by forcing the reduction to provide two such responses si and
(cid:3)
i, and extract the value of sk from the reduction!
s
i)/(c − c
(cid:3)
(cid:3)
= H(¯t
(cid:3)
(cid:3)
(cid:18)(cid:17)(cid:25)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
This sudden turning of the tables, surprising as it may be
at ﬁrst, already hints that the reduction was doomed to fail.
Indeed, our proof below exploits this exact technique to build a
successful forger: in its ﬁrst execution, the forger uses the DL
oracle to compute a forgery, but in any subsequent rewinding,
it will extract the secret key from the reduction and simply
create a forgery using the secret key. The meta-reduction
thereby ensures that it uses at most one DL oracle query for
each of the k “truly different” executions of the forger. By
additionally embedding a OMDL target point in its forgery, the
meta-reduction reaches a break-even of k DL oracle queries to
invert k target points. If the reduction succeeds in solving the
n-OMDL problem given access to this forger, then the meta-
reduction can use its solution to solve the (n + k)-OMDL
problem.
While this captures the basic idea of our proof, some
extensions are needed to make it work for any reduction.
For example, one could imagine a reduction using a modiﬁed
forking technique that makes sure that the same challenge
value c = H(¯t, m) is always used across timelines, e.g., by
guessing the index of that random-oracle query. To corner
such a reduction, our forger makes several signing queries in
parallel and chooses one of two challenges at random for each
query. When the reduction rewinds the forger, the reduction
will with overwhelming probability be forced to respond to
a different challenge on at least one of the signing queries,
allowing the forger to extract.
Below, we formally prove that if the OMDL assumption
holds, then there cannot exist a reduction (with some con-
straints, as discussed later) that proves the security of CoSi
under the OMDL assumption. Our proof roughly follows the
techniques of Baldimtsi and Lysyanskaya [BL13] for Schnorr-
based blind signature schemes,
in the sense that we also
present a forger and a meta-reduction that, given a reduction
that solves the OMDL problem when given black-box access
to a forger, solves the OMDL problem by extracting a discrete
logarithm from the reduction. Our proof is different, however,
in the sense that we cover a different class of reductions
(algebraic black-box reductions, as opposed to “naive random-
oracle replay reductions”), and because the multi-signature
scheme requires a more complicated forger because challenges
used by the signing oracle must be random-oracle outputs, as
opposed to arbitrary values in the case of [BL13]. The class
of reductions that we exclude is large enough to encompass
all currently known proof techniques for this type of schemes,
making it extremely unlikely that CoSi will ever be proven
secure under the DL or OMDL assumption.
Theorem 1. If the (n + k)-OMDL problem is (τ + τext +
O(n + k(cid:3)),  − k2/2(cid:2))-hard, then there exists no algebraic
black-box reduction B that proves CoSi to be ((2(cid:3) + 1)τexp +
O((cid:3)), (cid:3), (cid:3), 3, 1 − 1/q)-unforgeable in the KOSK setting in the
random-oracle model under the assumption that the n-OMDL
is the running time of
problem is (τ, )-hard. Here, τext
Extract as per Deﬁnition 3, τexp is the time to perform an
exponentiation in G, and k is the amount of times that B runs
A through rewinding, and (cid:3) is a security parameter.
Before proving the theorem, we provide some guidance on
how to interpret its result. In a nutshell, the theorem says that
if the OMDL problem is hard, then there is hardly any hope
to prove CoSi secure under the DL or OMDL assumption,
even in the KOSK setting and in the random-oracle model.
It thereby also excludes, a fortiori, any security proofs in the
key-veriﬁcation and plain public-key settings or in the standard
model.
For concreteness, let us set k = (cid:3) = 128, and let us say that
we have a forger that breaks CoSi with overwhelming prob-
ability using just 257 exponentiations, 128 signature queries,
and 3 random-oracle queries. That would indeed be a pretty
serious security breach, certainly serious enough to rule out
any further use of CoSi in practice. Yet still, even for such a
strong forger, Theorem 1 says that, if the 128-OMDL problem
is hard, then there cannot exist a reduction B that uses this
forger to solve the DL problem. More generally, it says that if
the (n + 128)-OMDL problem is hard, then neither can there
exist a reduction that solves the n-OMDL problem. If such a
reduction would exist, then that reduction would immediately
give rise to a solution for the (n + 128)-OMDL problem
without needing access to any forger, meaning that the OMDL
assumption was false to begin with.
The only room left by Theorem 1 are for a number of al-
ternative proof approaches, but none of them look particularly
hopeful. First, the theorem becomes moot when the OMDL
problem turns out to be easy but the DL problem remains
hard, or when the (n + k)-OMDL problem is easy but the n-
OMDL problem is still hard. At present, however, there is no
evidence suggesting that any of these problems may be easier
than the others. Second, it does not rule out the existence of
non-algebraic or non-black-box reductions. The former type
of reduction would imply strange properties of the underlying
group. The latter would have to obtain a special advantage
from inspecting the code of the forger, rather than just being
able to execute it. While some cryptographic uses of non-
black-box techniques exist [Bar04], to the best of our knowl-
edge they have never been used in practical constructions such
as CoSi. Finally, our theorem does not rule out security proofs
under assumptions that are not implied by n-OMDL or proving
security in the generic group model [Sho97]. However, this
would mean that much stronger assumptions are required than
one would expect from a Schnorr-based protocol.
Proof of Theorem 1. We prove the theorem by constructing a
forger F and a meta-reduction M such that, if there exists a
reduction B that uses F to break the n-OMDL problem, then
M can use B to break the (n + k)-OMDL problem. Figure 2
depicts the execution setting of all three algorithms.
Let y0, . . . , yn+k denote the n + k + 1 OMDL challenge
points that M receives as input. It will provide B with an
environment that simulates the n-OMDL game by handing
y0, . . . , yn as input to B and responding to B’s Odlog queries
using its own Odlog oracle. We have to provide reduction B
with a successful forger F against CoSi, where B is free to run
and rewind F. To simplify the arguments about rewinding, we
will describe a deterministic forger F, so that the behavior of
F only depends on the inputs and oracle responses provided
by B, not on its random coins.
(cid:18)(cid:17)(cid:26)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
M
B
(t
)
∗
∗
i , m
∗
c
i
(1G, m)
ci,0
(g, m)
ci,1
y0, . . . , yn+k
y0, . . . , yn
pk
i
F
for j = 0, ..., n − 1
(cid:15)
m
ti,j
Odlog
gx
x
(cid:15)
If ci,0 = ci,1 abort.
for j = 0, ..., n − 1
gbi,j
si,j
∗
i
s
← dlog(t
∗
i
· pk c
∗
i
i )
∗
i , s
((c
∗
∗
i ), m
)
(x0, . . . , xn)
(x0, . . . , xn+k)
Fig. 2: Our metareduction M in the proof of Theorem 1, which
simulates forger F towards any reduction B that would prove
the security of CoSi under the OMDL assumption, and uses
B to break the OMDL problem.
q
We describe a forger F in terms of three subroutines
target, rand, and forge that F can call out to but that will
be implemented by the meta-reduction M. Subroutine target
takes (cid:3) + 1 group elements (pk , t1, . . . , t(cid:2)) as input and on
the i-th invocation with a combination of inputs that it hasn’t
been called with before, returns M’s target point yn+i. Any
invocations of target on previously used inputs consistently
return the same output. The subroutine rand implements a truly
random function G(cid:2)+1 × Z3
→ {0, 1}(cid:2), which is simulated
by M through lazy sampling. The subroutine forge, ﬁnally,
creates a forgery by returning an s-value, given a ¯t value,
a public key, and a c-value; we will specify later how M
implements this routine.
i be the public key that B provides to F in its i-th
execution of F. The forger F then proceeds as follows:
i, F initiates (cid:3) signing queries on the same
• On input pk
message m and for the same tree T consisting of two
signers: a leader with public key pk = g and a child that
is the target signer with public key pk
• After receiving the results of the ﬁrst round ti,1, . . . , ti,(cid:2),
← target(pk
F sets ¯t
∗
i, ti,1, . . . , ti,(cid:2)).
• F makes a random-oracle query H(¯t
∗
∗
i
i , m
∗ (cid:9)= m, yielding a response c
∗
i .
message m
• F makes
random-oracle queries on
two additional
H(1G, m) and H(g, m), yielding responses ci,0 and ci,1,
respectively.
) for a ﬁxed
Let pk
i.
i