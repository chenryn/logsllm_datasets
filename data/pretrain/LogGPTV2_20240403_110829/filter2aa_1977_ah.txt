        log.Fatal(err)
    }
}
func (p *program) doOperation() error {
    ctx, cancel := context.WithTimeout(p.base, 10 * time.Second)
    defer cancel()
    var version string
    err := p.db.QueryRowContext(ctx, "SELECT VERSION();").Scan(&version)
    if err != nil {
        return fmt.Errorf("unable to read version %v", err)
    }
    fmt.Println("Connected to:", version)
}
为了了保证连接字符串串的安全性，最好将身份验证细节放在公共访问之外的独⽴立配置⽂文件中。
不不要将配置⽂文件放在 /home/public_html/ 中，⽽而是考虑放在 /home/private/configdb.xml 中(受保护的区域)
连接字符串串的保护
bloodzer0&Lingfighting
  localhost
  f00
  f00?bar#ItsP0ssible
然后你可以在Go⽂文件中调⽤用conﬁg.xml⽂文件：
configFile, _ := os.Open("../private/configDB.xml")
读取⽂文件后，连接数据库：
db, _ := sql.Open(serverDB, userDB, passDB)
当然，如果攻击者具有root访问权限，他就可以看到该⽂文件。这就引出了了你能做的最谨慎的事情--加密⽂文件。
你应该为每个信任区块和级别使⽤用不不同的凭据:
⽤用户
只读⽤用户
客⼈人
管理理
这样，如果连接是为只读⽤用户建⽴立的，他们就永远不不会破坏数据库信息，因为这些⽤用户实际上只能读取数据。
如果您的Go web应⽤用程序只需要读取数据⽽而不不需要写⼊入信息，那么创建⼀一个权限为只读的数据库⽤用户。始终根据web应⽤用程序的需要调整数据库⽤用
户。
创建数据库访问权限时，请选择强密码。您可以使⽤用密码管理理器器来⽣生成强密码，或者使⽤用为你执⾏行行相同操作的在线Web应⽤用程序 - 强密码⽣生成器器。
⼤大多数DBS都有默认帐户，其中⼤大部分都没有最⾼高权限⽤用户的密码。 MariaDB，MongoDB - root /⽆无密码
这意味着如果没有密码，攻击者就可以访问所有内容。
此外，如果你要将代码发布在Github的可公开访问的存储库中，请不不要忘记删除您的凭据或私钥。
预先准备好的查询语句句(带有参数化查询)是防⽌止SQL注⼊入的最佳和最安全的⽅方法。
在某些报告的情况下，预先准备好的语句句可能会有损web应⽤用程序的性能。因此，如果出于某种原因需要停⽌止使⽤用这种类型的数据库查询，我们强烈烈
建议阅读输⼊入验证和输出编码部分。
Go与其他语⾔言的常⽤用预准备语句句的⼯工作⽅方式不不同 - 你不不需要在连接上准备语句句， ⽽而在DB上准备。
开发⼈人员在连接池中的⼀一个连接上准备语句句(Stmt)
Stmt对象会记住使⽤用了了哪个连接
数据库证书
数据库认证
以最⼩小权限访问数据库
使⽤用强密码
删除默认的管理理密码
参数化查询
示例例
bloodzer0&Lingfighting
当应⽤用程序执⾏行行Stmt时，它尝试使⽤用该连接。如果它不不可⽤用，它将尝试在池中找到另⼀一个连接
这种类型的流可能导致数据库的⾼高并发性使⽤用，并创建⼤大量量预准备的语句句。所以，记住这些信息⾮非常重要。
以下是带参数化查询的预准备语句句的示例例：
customerName := r.URL.Query().Get("name")
db.Exec("UPDATE creditcards SET name=? WHERE customerId=?", customerName, 233, 90)
有时候，准备好的语句句不不是你想要的。这可能有⼏几个原因：
数据库不不⽀支持预准备语句句。例例如，在使⽤用MySQL驱动程序时，可以连接到MemSQL和Sphinx，因为它们⽀支持MySQL 有线协议。但是它们不不⽀支
持包含预准备语句句的“⼆二进制”协议，因此它们可能会以令⼈人困惑的⽅方式失败。
这些语句句的重⽤用性不不⾜足以使它们变得有价值，并且安全问题在我们的应⽤用程序堆栈的另⼀一层处理理（请参阅：输⼊入验证和输出编码，因此上⾯面所示
的性能是不不可取的。
开发⼈人员可以使⽤用存储过程创建查询的特定视图，以防⽌止敏敏感信息被归档，⽽而不不是使⽤用普通查询。
开发⼈人员可以添加⼀一个接⼝口，通过创建和限制对存储过程的访问，将⼀一个⼈人使⽤用特定存储过程和可以访问的信息类型区分开来。使⽤用此功能，开发⼈人
员可以更更容易易地管理理该过程，特别是在从安全⻆角度控制表和列列时，⾮非常⽅方便便。
让我们来看⼀一个例例⼦子……
假设你有⼀一个表，其中包含关于⽤用户护照ID的信息。
使⽤用如下查询:
SELECT * FROM tblUsers WHERE userId = $user_input
除了了输⼊入验证的问题之外，数据库⽤用户(在本例例中，⽤用户名为John)还可以通过⽤用户ID访问所有信息。
如果John只能使⽤用这个存储过程会怎样：
CREATE PROCEDURE db.getName @userId int = NULL
AS
    SELECT name, lastname FROM tblUsers WHERE userId = @userId
GO
你只需使⽤用以下命令即可运⾏行行：
EXEC db.getName @userId = 14
通过这种⽅方式，你可以确定⽤用户John只看到他请求的⽤用户的 name 和 lastname 。
存储过程并不不是⽆无懈可击的，但是它为你的web应⽤用程序创建了了⼀一个新的保护层。存储过程为DBA在控制权限⽅方⾯面提供了了很⼤大的优势(例例如，⽤用户可
以限于特定的⾏行行/数据)，甚⾄至更更好的服务器器性能。
处理理⽂文件时要采取的第⼀一个预防措施是，确保不不允许⽤用户直接向任何动态函数提供数据。在PHP等语⾔言中，将⽤用户数据传递给动态加载函数是⼀一个严
重的安全⻛风险。Go是⼀一种编译语⾔言，这意味着不不会 include 函数，⽽而且通常不不会动态加载库。
Go 1.8版本，允许通过新的插件机制来实现动态加载。如果你的应⽤用程序使⽤用这种机制，应该对⽤用户提供的输⼊入采取预防措施。
⽂文件上传应该仅限于经过身份验证的⽤用户。在确保⽂文件上传仅能由经过身份验证的⽤用户完成之后，安全性的另⼀一个重要⽅方⾯面是，确保只有⽩白名单中的
⽂文件类型才能上传到服务器器。可以使⽤用以下检测MIME类型的Go函数进⾏行行此检查： func DetectContentType(data []byte) string
附加了了⼀一个读取⽂文件并识别其MIME类型的简单程序。最相关的部分如下：
存储过程
⽂文件管理理
bloodzer0&Lingfighting
{...}
// Write our file to a buffer
// Why 512 bytes? See http://golang.org/pkg/net/http/#DetectContentType
buff := make([]byte, 512)
_, err = file.Read(buff)
{...}
//Result - Our detected filetype
filetype := http.DetectContentType(buff)
在识别⽂文件类型之后，根据允许的⽂文件类型的⽩白名单，验证⽂文件类型。 在该示例例中，这在以下部分中实现：
{...}
switch filetype {
case "image/jpeg", "image/jpg":
  fmt.Println(filetype)
case "image/gif":
  fmt.Println(filetype)
case "image/png":
  fmt.Println(filetype)
default:
  fmt.Println("unknown file type uploaded")
}
{...}
⽤用户上传的⽂文件不不应该存储在应⽤用程序的Web上下⽂文中。相反，⽂文件应该存储在内容服务器器或数据库中。需要注意的是，所选的⽂文件上传路路径不不具有
执⾏行行权限。
如果承载⽤用户上传的⽂文件服务器器基于 *NIX ，请确保实现chrooted环境等安全机制，或将⽬目标⽂文件⽬目录挂载为逻辑驱动器器。
同样，由于Go是⼀一种编译语⾔言，因此不不存在上传包含可在服务器器端解释的恶意代码的⽂文件的常⻅见⻛风险。
在动态重定向的情况下，不不应该传递⽤用户数据。如果你的应⽤用程序需要它，则必须采取其他措施来确保应⽤用程序的安全性。这些检查包括只接受正确
验证的数据和相对路路径url。
此外，在将数据传递到动态重定向时，⼀一定要确保⽬目录和⽂文件路路径映射到预定义的路路径列列表的索引，并使⽤用这些索引。
永远不不要将绝对⽂文件路路径发送给⽤用户，始终使⽤用相对路路径。
将有关应⽤用程序⽂文件和资源的服务器器权限设置为只读，当上传⽂文件时，扫描该⽂文件，查找病毒和恶意软件。
关于内存管理理，有⼏几个重要⽅方⾯面需要考虑。遵循OWASP指南，我们必须采取的保护应⽤用程序措施的第⼀一步，是检查⽤用户的输⼊入/输出。这些措施需确
保不不允许任何恶意内容。有关此⽅方⾯面的更更详细概述，请参阅本⽂文档的输⼊入验证和输出编码部分。
关于内存管理理的另⼀一个重要⽅方⾯面是缓冲区边界检查。在处理理接受⼤大量量字节进⾏行行复制的函数时，通常在c⻛风格的语⾔言中，必须检查⽬目标数组的⼤大⼩小，以
确保写⼊入的内容不不会超过分配的空间。在Go中， String 等数据类型不不以 NULL 结尾，对于String，其 header 包含以下信息：
type StringHeader struct {
    Data uintptr
    Len  int
}
尽管如此，必须进⾏行行边界检查（例例如在循环时）。如果我们超出了了设定的界限，go会抛出 Panic 。
⼀一个简单的例例⼦子：
内存管理理
bloodzer0&Lingfighting
func main() {
    strings := []string{"aaa", "bbb", "ccc", "ddd"}
    // Our loop is not checking the MAP length -> BAD
    for i := 0; i  0 {
            fmt.Println(strings[i])
        }
    }
}
输出：
aaa
bbb
ccc
ddd
panic: runtime error: index out of range
当我们的应⽤用程序使⽤用资源时，还必须进⾏行行额外的检查，以确保它们已经关闭，⽽而不不仅仅是依赖于垃圾收集器器。这适⽤用于处理理连接对象、⽂文件句句柄
等。在Go中，我们可以使⽤用 Defer 来执⾏行行这些操作。 Defer 中的指令只在周围函数执⾏行行完成时执⾏行行。
defer func() {
    // Our cleanup code here
}
有关 Defer 的更更多信息可以在⽂文档的错误处理理部分中找到。
还应避免使⽤用已知的易易受攻击的函数。在Go中， Unsafe 包中包含这些函数。 这些函数不不应该⽤用于⽣生产环境，在包中也不不应该使⽤用，包
括 Testing 包。
另⼀一⽅方⾯面，内存回收是由垃圾收集器器处理理的，这意味着我们不不必担⼼心它。有趣是，⼿手动释放内存是可能的，尽管不不建议这样做。
引⽤用Golang Github：
如果您真的想使⽤用Go⼿手动管理理内存，请基于 syscall.Mma 或 cgo malloc/free 实现你⾃自⼰己的内存分配器器。 对于像Go这样的并发语
⾔言，⻓长时间禁⽤用GC通常是⼀一个糟糕的解决⽅方案。Go的GC未来只会更更好。
根据OWASP的定义，"跨站点请求伪造(CSRF)是⼀一种攻击，它迫使终端⽤用户在当前经过身份验证的web应⽤用程序上执⾏行行不不需要的操作。"
CSRF攻击的⽬目标不不是窃取数据，⽽而是状态更更改请求。通过⼀一些社交⼯工程(⽐比如通过电⼦子邮件或聊天分享链接)，攻击者可能会欺骗⽤用户执⾏行行不不需要的
Web应⽤用程序操作，⽐比如更更改帐户的恢复email。
假设 foo.com 使⽤用 HTTP GET 请求设置帐户的恢复email：
GET https://foo.com/account/recover?email=PI:EMAIL
⼀一个简单的攻击场景可能是这样的：
1. 受害者通过 https://foo.com 进⾏行行身份验证
2. 攻击者通过链接向受害者发送聊天消息