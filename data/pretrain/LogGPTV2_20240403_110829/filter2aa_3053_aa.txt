Blitzableiter –
BETA Release
Countering Flash Exploits
Felix ‘FX’ Lindner
DEFCON XVIII
Agenda
 Motivation
 RIA Basics
 Flash (in)Security
 Flash Malware
 Flash Internals
Defending the Poor
 Defense approach
 Implementation
 Current functionality
 Measurements & Results
 Next steps
Motivation
Project initiated in late 2008 by the German Federal Office for Information 
Security (Bundesamt für Sicherheit in der Informationstechnik)
Review of the current Rich Internet Application security situation
Adobe Flash turned out to be far behind the curve in terms of security 
compared to other technologies
That posed the question whether that fact could be helped
 Preferably without firing everyone at Adobe
Defending the Poor
Who cares about Flash security?
Some of the end users
Apple users running on PowerPC machines:
The Adobe Flash Player 10.1 release, expected in the first half of 2010, will be the 
last version to support Macintosh PowerPC-based G3 computers. Adobe will be 
discontinuing support of PowerPC-based G3 computers and will no longer provide 
security updates after the Flash Player 10.1 release. This unavailability is due to 
performance enhancements that cannot be supported on the older PowerPC 
architecture.
People who don’t want to get owned while surfing pr0n
Web site operators
Web sites that display advertisement banners (Heise or eWeek anyone?)
Owners of web sites allowing users to upload files
Defending the Poor
Rich Internet Applications
 Rich Internet Applications (RIA) are in general programmatic 
enhancements to the regular web browser that allow for 
enhanced interactivity, communication and media display.
 Prominent members *:
Rich Internet Application Basics
* Google Native Client is intentionally not mentioned here.
Common Properties of RIA Environments
 RIA functionality is implemented as plug-in for web browsers
 Plug-in provides a runtime environment with one or more virtual 
machines that execute byte code specific to that RIA platform
 RIA runtimes additionally provide media playback capabilities
 Applications are distributed in integrated file formats, carrying byte 
code and resource files, such as image, video and audio data
 RIA runtimes provide their applications independent local storage 
capabilities and browser independent network communication
 RIA applications are portable between all platforms having a runtime
Rich Internet Application Basics
Web Browser Integration and Interaction
 Browser plug-in code base is usually fairly independent of the 
actual browser plug-in
 The runtime is commonly an ActiveX component or an external program
 Browser dependence only for JavaScript, DOM and HTTP stack
 Activation of RIA functionality in web pages through HTML tags
 The embedding HTML often decides on security settings for the RIA
 Interaction between RIA code (through the runtime) and the web browser 
is commonly achieved using JavaScript
Rich Internet Application Basics
Distribution of Runtimes
Rich Internet Application Basics
Source: RIAStats.com (18 million browsers, 110 sites, 30 days), 2009-12-24
The Flash Security Model
Flash primarily relies on the virtual machine runtime environment for 
sealing off access from the RIA code to the native machine
Permission decisions are based on so-called sandboxes
 Generally, Flash code can either access local or remote resources, not both.
The remote sandbox roughly follows the Same Origin Policy
 Flash code can soften the Same Origin Policy itself
 Flash code can offer a permissive Cross Domain Policy for “Flash Cookies”
 Socket communication is controlled in a similar way using a policy file that is 
served from the remote TCP port the Flash code wants to connect to
The embedding web page can give additional permissions to the Flash 
code using arguments to the OBJECT or EMBED tags
Flash Security Threats
The Flash Security and the User
 There is some user control 
over the Flash Player
 Using an actual Flash 
program
 Most controls are hidden as 
options in mms.cfg
 Flash does not support any 
proof of origin for the files
 With the likely exception of 
DRM technologies, which are 
of no concern here
Flash Security Threats
Flash Vulnerabilities
 Securityfocus.com lists about 40 vulnerabilities for the Flash 
Player, among them:
 CVE-2008-3873: Copying data onto the clipboard of the user
 CVE-2007-3456: FLV integer overflow during parsing
 CVE-2007-0071*: Integer signdness issue in scene counter allows 
arbitrary memory write
 CVE-2009-3797 & CVE-2009-3798: “unspecified” memory corruptions
 CVE-2008-4546: SWF Version Null Pointer Dereference
Flash Security Threats
* “Application-Specific Attacks: Leveraging the ActionScript Virtual Machine”, Mark Dowd
package {
import flash.display.*;
import flash.net.*;
public class A extends MovieClip {
public function A() {
load();
load();
}
private function load():void {
var loader:Loader = new Loader();
loader.load(new URLRequest('/b'));
addChild(loader);
}
}
}
Attacks using Flash
Using Flash to perform DNS rebinding, as shown by Dan Kaminsky
Using the extensive operating system and browser information available to 
Flash code to determine exploits to use
 Nowadays commonly used to carry PDF files
Clickjacking aka. User Interface Redressing
Sending additional HTTP Header in requests originating from Flash code
 UPNP Requests through Flash to reconfigure home routers
 CSRF exploits for the masses
Appending HTML/JavaScript to Flash files
Simply redirecting the web browser
Flash Security Threats
Flash Malware
Malware based on Flash is generally part of the following classes:
1.
Redirector and Downloader
The user browser is redirected to a new URL, either faking clicks for 
advertisement programs or simply downloading executable files.
2.
Binary Exploits
With the most prominent being CVE-2007-0071, these Flash files attempt to 
exploit parsing vulnerabilities in the Flash runtime.
3.
Web Attack Vehicle
Flash is commonly used in attacks leveraging XSS or weak coding in other 
Flash files in order to obtain personal identifiable information (PII) from the 
target.
Flash Security Threats
Flash Malware Examples
SWF.AdJack / Gnida
Malicious banner advertisement, which uses Local Shared Objects (LSO) to store 
campaign information on the user’s machine. 
CVE-2007-0071 Exploit
Various incarnations using the original published exploit technique to achieve 
arbitrary code execution. Your payload will vary.
SWF/TrojanDownloader.Agent etc.
Simple browser forwarder
SWF/TrojanDownloader.Agent.NAD
Multi-Exploit carrying a number of different attack codes and instantiating them 
depending on the operating system platform and Flash player version
Flash Security Threats
Flash Malware and the Anti-Virus Industry
 Flash malware is not very well detected by anti-virus software
 AV software epically fails when the malware is uncompressed
Flash Security Threats
Sample
Detection
Detection 
(uncompressed)
Simple generic downloader
18/41 (43.91%)
16/39 (41.03%)
Gnida.A
29/41 (70.73%)
8/40 (20%)
SWF_TrojanDownloader.Small.DJ
21/39 (53.85%)
11/41 (26.83%)
Statistics generated using Virustotal.com on December 24, 2009
Flash Files from the Inside
 Flash files (also called movies) follow the SWF (apparently 
pronounced “swiff”) file format specification
 Version 3 to Version 10 are specified
 SWF files can be compressed using zlib methods
 Type-Length-Value structure
 The elements are called “Tags”
 The element ordering determines (partially) the rendering
 63 Tag types are documented for Version 10
 Data structures are heavily version dependent
Flash Internals
Adobe Virtual Machines
 The Flash Player contains two virtual machines
 AVM1 is a historically grown, weakly typed stack machine with 
support for object oriented code
 AVM1 is programmed in ActionScript 1 or ActionScript 2
 Something between 80%-90% of the Flash files out there are AVM1 code, 
including YouTube, YouPorn, etc.
 AVM2 is an ECMA-262 (JavaScript) stack machine with a couple of 
modifications to increase strangeness
 AVM2 is programmed in ActionScript 3
 The Flash developer community struggles to understand OOP
Flash Internals
The History of AVM1
 First scripting capability appears in SWF Version 3
 Something like a very simple click event handler
 SWF Version 4 introduces the AVM
 Turing complete stack machine with variables, branches and sub-routine 
calls
 All values on the stack are strings, conversion happens as needed
 SWF 5 introduces typed variables on the stack
 Addition of a constant pool to allow fast value access
 Introduction of objects with methods
Flash Internals
The History of AVM1
 SWF 6 fixes SWF 5
 New Tag type allows initialization code to be executed early
 Checking of the type of an object instance is added
 Type strict comparisons are added
 SWF 7 brings more OOP
 New function definition byte code
 Object Inheritance, extension and test for extension (implements)
 Exception generation and handling (Try/Catch/Finally)
 Explicit type casting
Flash Internals
The History of AVM1
 SWF 8 never happened
 SWF 9 already brings the AVM2 into the format
 They call the byte code “ABC”
 SWF 10 is the currently specified standard
Keep in mind that all this is still supported!
Flash Internals
AVM1 Code Locations in a Flash File
 A Flash file can contain AVM1 code in 5 different types of 
locations
 DoAction Tag contains straight AVM1 code
 DoInitAction Tag contains AVM1 code for initialization
 DefineButton2 Tag contains ButtonRecord2 structure that can carry 
conditional ButtonCondActions, which are AVM1 code
 PlaceObject2 and PlaceObject3 Tags can contain ClipActions whose 
ClipActionRecords may contain AVM1 code
 Many tools, including security tools, only handle DoAction
Flash Internals
AVM1 Code Properties
AVM1 byte code is a variable length instruction set
1-Byte instructions 
n-Byte instructions with 16 Bit length field
Branch targets are signed 16 Bit byte offsets into the current code block
Function declarations are performed using one of two byte codes inline 
with the other code
Function declarations can be nested
Functions may be executed inline or when called
Try/Catch/Finally blocks are defined by byte code similar to functions
Flash Internals
Design Weaknesses in AVM1
 The byte offset in branch instructions allows:
 Jumps into the middle of other instructions
 Jumps outside of the code block (e.g. into image data)
 The signed 16 Bit branch offset prevents large basic blocks
 The Adobe Flash Compiler emits illegal code for large IF statements 
 Instruction length field allows hiding of additional data
 Length field is parsed even for instructions with defined argument sizes
 Argument arrays contain their own length fields after the instruction 
length field
Flash Internals
Design Weaknesses in AVM1
 The order of code execution appears to be non-deterministic
 Depends on the Tag order and type
 Depends on references to other Flash files
 Depends on the conditions set to execute
 Depends on the visibility of the object (z-axis depth)
Flash Internals
Considerations for the Defense Approach
 There are two types of attacks to be handled
 Malformed SWF Files that cause memory corruption in the player
 Well formed SWF Files that use the player’s API for evilness
 Instrumentation of the player is bound to fail
 The player is closed source and changes permanently
 The player is very forgiving with invalid / malformed code
 The player only parses code and data when it hits it
 The player is written in an unmanaged language
 Nobody wants to write a new Flash player from the ground up
A defense approach
Normalization through Recreation
If the final consumer is fragile, we must try to ensure that it will 
not choke on the data passed to it:
1. Safely parsing the complete SWF file, strictly checking 
specification compliance of everything
2. Discarding of the original file
3. Verification and modification of the AVM code
4. Creation of a new “normalized” SWF file
A defense approach
Introducing the Tool
A defense approach
 The aforementioned and now further discussed approach is 
implemented in the project called:
 Yes, that’s a German term. It means “lightning rod”. It turns 
dangerous lightning into harmless flashes.
Blitzableiter
A Flash File Parser in C#
 The CLR ensures buffer boundaries and prevents integer 
overflow / signdness issues
 Native or unsafe code must not be used 
 This can be checked easily
 Strategic defense advantage: .NET CLR 0-day is rare, 
expensive and unlikely to be used against a Flash parser
 By strictly targeting .NET 2.0, it runs nicely on Mono as well
A defense approach
Enforcing Container Boundaries
 Parsing container type data structures (e.g. a Tag) must 