other files. Other files are essentially “owned” by one or a small 
number of developers. 
Both  developers  and  files  become  organized  into  a  network 
structure  with  some  developers/files  being  the  middle  of  the 
network,  in  a  cluster,  or  on  the  outside.  In  this  section,  we 
quantify  the  structure  of  changes  in  the  system  using  network 
analysis to create four developer activity metrics. We define our 
suite  of  developer  activity  metrics  based  on  two  networks: 
developer  networks  and  contribution  networks,  as  will  be 
discussed in Sections 4.1 and 4.2, respectively. 
In  Sections  4.1  and  4.2,  we  will  use  the  following  example. 
Suppose we are initially given the version control data in Table 2. 
In  our  example,  we  have  six  developers  (Andy,  Kelly,  Phil, 
Table 2: Example version control data 
Developer 
Andy 
Kelly 
Phil 
Lucas 
Sarah 
Ben 
Files Changed 
(# commits) 
A(1), B (2) 
B(1) 
B(2) 
A(1), C(2), D(1) 
D(2), E(1) 
C(2), E(1) 
Lucas,  Sarah,  and  Ben)  and  five files labeled A through E. The 
data  in  Table  2  denote  who  made  changes  to  which  file.  More 
examples of the calculation of developer activity metrics can be 
found in related work [6, 11]. 
A summary of the interpretation for each of the four metrics can 
be  found  in  Table  3.  We  empirically  evaluate  these  metrics  as 
indicators of vulnerable files in Section 5. 
4.1  Linus’ Law: Diversity in Perspectives 
In  his  essay  on  open  source  development  [19],  Eric  Raymond 
describes several laws that explain how large open source projects 
have  thrived.  Raymond  states  one  of  the  laws  colloquially  as 
Linus’ Law: “Given enough eyeballs, all bugs are shallow” with 
the reasoning that, in a bazaar-like style of software development, 
having more people work on the project yields a greater diversity 
in  understanding,  leading  to  better  improvements.  Raymond 
contends that diversity in perspectives ought to be embraced, not 
avoided.  
Table 3: Developer activity metrics 
Metric 
Definition for a file  
High values are symptomatic of… 
DNMaxEdgeBetweenness 
NumDevs 
The maximum of the number of geodesic paths in 
a developer network which include an edge that 
the file was on 
The number of distinct developers who changed 
the file  
A file being changed by multiple, otherwise separate 
developer groups 
Many developers worked on the file 
NumCommits 
The number of commits made to a file 
Developers made many changes to the file 
CNBetweenness 
The number of geodesic paths containing the file 
in the contribution network  
File was changed by many developers who made many 
changes to many other files 
6 http://git.kernel.org/ 
455Thus,  if  parts  of  the  project  do  not  have  a  diverse  perspective, 
perhaps vulnerabilities could arise.  
While  Linus’  Law  includes  a  broad  scope  of  users,  testers,  and 
developers, we focus our study on developer groups as one aspect 
of Linus’ Law. We use two metrics to quantify the group aspect 
of Linus’s Law: NumDevs and DNMaxEdgeBetweenness. 
The  NumDevs  metric  is  the  number  of  distinct  developers  who 
made a commit to the file. Said another way, the NumDevs metric 
is  the  size  of  the  developer  group  who  contributed  to  the  file. 
According to the reasoning behind Linus’ Law, NumDevs should 
have  a  positive  impact  on  the  security  of  a  file,  leading  to  a 
hypothesis  that  neutral  files  would  have  contributions  by  more 
developers than vulnerable files.   
The  number  of  developers  contributing  to  one  file,  however,  is 
not the only aspect of Linus’ Law we wish to quantify. We can 
also  look  at  how  developer  groups  (or  clusters)  form  over  the 
entire  project  and  how  strongly  connected  these  clusters  are. 
Specifically, as developer clusters form, diversity in perspectives 
can be lost. Two separate groups may be working on similar areas 
without  working  together.  According  to  Raymond’s  reasoning, 
files worked on by otherwise-separated developer groups ought to 
be more likely to be vulnerable because the groups are not fully 
working with each other.  
To  empirically  analyze  developer  groups,  we  need  to  first 
measure  developer  collaboration.  The  first  step  we  take  to 
formally  estimate  developer  collaboration  is  to  use  a  developer 
network. We use the term developer network to be an estimation 
of the structure of collaboration in a software development project 
based  on  developer  connections  [1,  6,  13].  In  our  developer 
network, two developers are connected if they have both made a 
change to at least one file in common during a specified period of 
time  (e.g.  one  month).  The  result  is  an  undirected,  unweighted, 
and  simple  graph  where  each  node  represents  a  developer  and 
edges are based on whether or not they have worked on the same 
file within a specified period of time. For our example in Table 2, 
the developer network is shown in Figure 1. 
Figure 1: Resulting developer network from the Table 2 
Second, we need to examine files between developer groups. In 
large software projects, groups of developers can form based on 
many  factors,  such  as  geographic  location  or  feature  of  the 
product. A developer group need not be formally defined; a group 
can  form  out  of  a  common  need  or  affinity  in  the  project.  In 
network analysis, the notion of groups is formalized by the term 
cluster. A cluster of nodes is a set of nodes such that the number 
of intra-set connections greatly outnumbers the number of inter-
set  connections  [2].  A  cluster  of  developers,  then,  has  more 
connections  within  the  cluster  than  to  other  developers.  Having 
many  clusters  in  a  network  can  be  an  indicator  that,  while 
developers  are  collaborating  within  groups,  the  groups  are  not 
collaborating  with  each  other.  The  files  that  are  worked  on  by 
otherwise-separated clusters, therefore, may be more problematic. 
[5] 
In this study, we are using a developer network cluster metric to 
measure the diversity in perspectives on a file. 
Cluster metrics of developer networks can be used to identify files 
that  have  been  worked  on  by  otherwise-separated  clusters  of 
developers. To this end, we use the Edge Betweenness Clustering 
technique 
for  discovering  developer  clusters.  Edge 
betweenness  is  defined  similarly  to  node  betweenness,  only  for 
edges: the number of geodesic paths in the network that include a 
given edge. The motivation for using edge betweenness is that the 
betweenness of edges within a cluster will be very low since the 
geodesic  paths  will  be  evenly  distributed  (in  most  cases, 
developers are directly connected to each other within clusters). 
As an illustration, consider a network where nodes are houses and 
edges  are  streets.  Large  clusters  of  houses  (e.g.  cities)  are 
generally  connected  by  well-traveled  (highly  between)  streets: 
highways. Conversely, streets that are within cities tend to be less 
traveled  as  there  are  many  direct  routes  within  a  city.  By 
identifying the highly between “highways” in a network, one can 
use the exits of the highways to infer the locations of the cities. 
Note  that  a  city  be  composed  of  several  “inner”  clusters,  (e.g. 
neighborhoods) and cities can have drastically different sizes. In 
fact, the notion of “clusteredness” is a varying concept depending 
on the situation, so defining the exact clusters of a network is a 
somewhat  subjective  exercise.  However,  regardless  of  how  one 
defines  exact  clusters,  edges  of  highest  betweenness  are  always 
between clusters and are the focus of our metric. 
In  this  study,  we  are  interested  in  identifying  the  files  that  lie 
between  clusters  on  the  highly  between  edges  of  the  developer 
network. Since files have a many-to-many relationship to edges, 
we  use  the  maximum  of  edge  betweenness  of  a  files  in  the 
developer network, hence DNMaxEdgeBetweenness. 
Note that improving upon the DNMaxEdgeBetweenness of a file 
does not require a change in the file itself, but on creating more 
connections  between  the  two  groups.  One  could  create  more 
connections  by  finding  other  files  that  require  improvement  by 
both groups. Once more connections are established, the number 
of geodesic paths from one cluster of developers to the other will 
be  spread  out  over  the  new  connections,  lowering  the  edge 
betweenness  and,  by  definition,  forming  a  single  cluster.  While 
the  optimal  developer  network  need not be a single cluster, one 
could  use  the  DNMaxEdgeBetweenness  metric  to  identify  two 
clusters of developers who would benefit from working together.  
In our example developer network in Figure 1, the edge of highest 
betweenness 
the  connection  between  Lucas  and  Andy 
(betweenness  is  nine).  The  Lucas-Andy  edge,  connects  two 
clusters: Lucas/Sarah/Ben, and Andy/Kelly/Phil. 
4.2  Unfocused Contributions 
In  the  open  source  community,  some  developers  may  choose  to 
make  changes  to  many  different  parts  of  the  system  without 
collaborating  with  other  developers  who  could  share  knowledge 
about the system and provide feedback on the suggested change. 
This  effect  has  been  referred  to  as  an  unfocused  contribution 
[17] and could be a source of security problems.  
To  empirically  analyze  the  notion  of  “too  many  cooks  in  the 
kitchen,” we use two metrics: NumCommits and CNBetweenness. 
The  NumCommits  metric  is  calculated  similarly  to  NumDevs: 
taken directly from the version control logs. NumCommits is the 
number of commits made to the file during the time period under 
is 
456quota.c had a more focused contribution, and perhaps a lower 
likelihood of a vulnerability, than eventpoll.c. 
study.  Note 
that  NumCommits  and  NumDevs  can  vary 
independently: a file can have many commits and few developers.  
Also,  NumDevs  could  also  be  classified  as  an  unfocused 
contribution  metric.  If  “too many developers” working on a file 
result in the file being more vulnerable, then the meaning behind 
the association would support the “too many cooks in the kitchen” 
notion. 
Note  that  a  high  NumCommits  on  a  file  can  be  unavoidable: 
sometimes  code  inevitably  needs  to  be  changed  to  support  new 
features,  enhancement,  and  maintenance  [9-11].  A  similar 
argument  could  be  made  about  NumDevs.  However,  if  a  file  is 
suffering  from  an  unfocused  contribution,  the  change  activity 
should be high, resulting in a high NumCommits and NumDevs. 
However, since NumCommits and NumDevs only represents the 
number of people and changes, not who is making changes of an 
unfocused  contribution,  we  add  a  third,  more  specific  metric  to 
our study: CNBetweenness. 
 The  CNBetweenness  metric  is  calculated  from  a  contribution 
network  [17,  18].  A  contribution  network  is  an  abstraction  of 
version  control  logs  represented  by  a  network.  Informally,  the 
network  represents  who  contributed  changes  to  which  file. 
Formally,  the  contribution  network  employs  an  undirected, 
weighted, and bipartite graph with two types of nodes: developers 
and  files.  An  edge  exists  where  a  developer  made  changes  to  a 
file.  Edges  exist  only  between  developers  and  files  (not  from 
developers to developers or files to files). The weight of an edge 
is the number of version control commits a developer made to the 
in  a 
file.  For  example,  one  could 
Figure 3: Examples of focused and unfocused contributions 
The  CNBetweenness  of  a  file  is  increased  by  (a)  having  many 
developers  work  on  a  file,  and  (b)  having  developers  work  on 
many  different  files.  However,  one  can  also  improve  (i.e. 
decrease) a file’s CNBetweenness by changing which developers 
work on which files rather than just reducing the amount of work 
for  developers.  As  a  result,  CNBetweenness  can  be  useful  for 
assigning  tasks  to  developers  without  adjusting  the  level  of 
change 
the 
CNBetweenness  of  a  file  by  assigning  a  task  to  a  group  of 
developers focused on a few files, rather than developers already 
working on other parts of the system. 
5.  EMPIRICAL ANALYSIS 
Our empirical analysis of Linus’ Law and unfocused contributions 
is  a  statistical  correlation  study  between  developer  activity 
metrics  and  security  vulnerabilities.  We  focus  our  empirical 
analysis on three questions in the following three subsections: 
• 
reduce 
Section  5.1:    Are  developer  activity  metrics  related  to 
vulnerable files?  
Section 5.2:  Can a “critical point” be found in each metric’s 
range that is linked to an increase the likelihood of having a 
vulnerable file? 
Section  5.3:    How  many  of  the  vulnerable  files  can  be 
explained by the metrics? 
• 
• 
Figure 2: Contribution network from the example 
file.  
The contribution network from the given example can be found in 
Figure 2.  
We  use  the  betweenness  centrality  measurement  to  quantify  the 
focus made on a given file. If a file has a high betweenness, then 
it was changed by many developers who made changes to many 
other  files.  If  a  file  had  a  low  betweenness,  then  the  file  was 
worked on by fewer developers who made fewer changes to other 
files.  
Consider the difference in contributions in Figure 3. For the file 
quota.c,  changes  were  made  by  developers  who  worked  on 
only a few other files, some of which were in common with each 
other. By focusing on a smaller number of files, and (by extension 
coordinating with fewer developers), the developers of quota.c 
are more focused on quota.c, and may be more likely to catch 
security  vulnerabilities.  The  developers  of  eventpoll.c, 
however,  are  also  working  on  many  other  files  themselves,  and 
may not catch security problems in eventpoll.c. As a result, 
Statistically speaking, the first question is an association question, 
the second is a discriminative power question, and the third is a 