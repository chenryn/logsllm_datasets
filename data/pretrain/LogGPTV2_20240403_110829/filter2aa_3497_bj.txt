transport layer, 3, 6, 8–10
Transport Layer Security (TLS)
certificate pinning, 177
client certificate, 175
decryption, 201–202
encryption, 175–176, 200–201
endpoint authentication, 174–175
forcing TLS 1.2, 202
handshake, 172–173
initial negotiation, 173
perfect forward secrecy, 177
replacing certificate in, 202–206
Technet24
||||||||||||||||||||
||||||||||||||||||||
security requirements, 176–177
TLS Record protocol, 172
trapdoor functions, 160
Triple DES, 151
true, 55
trusted root certification authorities, 204
Tshark, 180–182
TVB (testy virtual buffer), 99
Twofish, 152
two’s complement, 39
U
UCS (Universal Character Set), 44–45
UDP. See User Datagram Protocol (UDP)
UI (user interface), 4
uname command, 263–264
Unicode
character encoding, 44–45
character mapping, 44–45
UCS-2/UTF-16, 45
UCS-4/UTF-32, 45
Unicode Transformation Format (UTF), 44–45
Unified Sniffing mode (Ettercap), 76
Uniform Request Identifier (URI), 30, 32
uninitialized data, 120
Universal Character Set (UCS), 44–45
Unix-like systems, 5
ASLR implementation flaws in, 272
AT&T syntax, 116
command injection, 228
command line utilities on, 31
configuring DNAT on, 70
Dtrace, 16
enabling routing on, 67
error codes, 262
executable format, 120
||||||||||||||||||||
||||||||||||||||||||
hosts file, 23
read and write calls, 122
routing tables on, 65
system calls, 15–16, 122
traceroute, 64
Unk2 value, 93–95
unmanaged executables, 195–199
dynamic libraries, 195–196
unsafe keyword, 210
unsigned integers, 38
UPX, 134
URI (Uniform Request Identifier), 30, 32
User Datagram Protocol (UDP), 3
captured traffic, 182–183
dissectors, 98–99
payload and header, 5
port forwading, 21
socket, 122
user enumeration, 218–219
user interface (UI), 4
user mode, 14
user-after-free vulnerability, 249–250
UTF (Unicode Transformation Format), 44–45
UTF-8, 45–46
V
variable binary length data
implicit-length data, 48–49
length-prefixed data, 48
padded data, 49
terminated data, 47–48
variable-length buffer overflows, 211, 213–214
variable-length data, 56
variable-length integers, 39–40
verbose errors, 221–222
Verisign, 170
Technet24
||||||||||||||||||||
||||||||||||||||||||
virtual function table, 242, 248–249
virtual hosts, 24
virtual machine, 137
VirtualAlloc, 250
Visual C++, 129
vulnerabilities
authentication checking, 226
classes
authentication bypass, 209
authorization bypass, 209–210
denial-of-service, 208
information disclosure, 209
remote code execution, 208
command injection, 228
CPU exhaustion attacks
algorithmic complexity, 224–225
configurable cryptography, 224–225
default or hardcoded credentials, 218
exploiting
arbitrary writing of memory, 253–254
defined memory pool allocations, 252–253
heap layout manipulation, 249–250
heap memory storage, 253
high-privileged file writes, 254–256
low-privileged file writes, 255
memory corruption, 245–253
user-after-free vulnerability, 249–250
format string, 227
fuzz testing, 234–236
incorrect resource access
canonicalization, 220–221
verbose errors, 221–222
memory corruption
buffer overflows, 210–215
data expansion attack, 217
dynamic memory allocation failures, 217
exploit mitigations, 267–268
memory-safe vs. memory-unsafe languages, 210
||||||||||||||||||||
||||||||||||||||||||
out-of-bounds buffer indexing, 216–217
memory exhaustion attacks, 222–223
shell code, 255–266
SQL injection, 228–229
storage exhaustion attacks, 223–224
text-encoding character replacement, 229–231
triaging, 236–245
user enumeration, 218–219
W
W3C, 58
web application testing tools, 283–285
Burp Suite, 283–284
Mitmproxy, 284–285
Zed Attack Proxy, 284
web of trust (WOT), 169
wget, 31
windll, 199
Windows
ASLR implementation flaws in, 272
calling functions with Python on, 199
certificate manager, 203
debug symbols, 129
debugger, 236–241, 244–245
dynamic link libraries, 196
enabling routing on, 67
FILETIME, 50
loading library on, 197
Page Heap, 244–245
registry, 67
Winsock library, 121
XP SP2, 270
WinDump, 278
WinPcap, 278
Winsock, 121
Wireshark, 12–14, 81, 279–280
Technet24
||||||||||||||||||||
||||||||||||||||||||
basic analysis, 84–85
capture interfaces dialog, 82–83
Conversations window, 84–85
dissectors, 95–103
generating network traffic in, 83–84
Hex Dump view, 86–95
main window, 82
reading contents of TCP sessions in, 85–86
Tshark command line version, 180–182
WOT (web of trust), 169
write system call, 15, 18, 122, 261–263
WriteData() function, 108
WritePackets() method, 22
ws2_32.dll Windows network library, 130–131
X
X.509 certificates, 53–54, 169–171, 173
X.680 series, 53
x86 architecture, 42, 125
history, 114
instruction mnemonics, 115
instruction set architecture, 114–116
mnemonic forms, 115
program flow, 118–119
registers, 116–118
xcalc, 228
XML Schema, 58
XOR encryption, 108–109, 148–149, 153–154
XOR instruction, 115
XOR parameter, 108–109
xp_cmdshell function, 229
xxd tool, 90, 181
Z
Zed Attack Proxy (ZAP), 284
||||||||||||||||||||
||||||||||||||||||||
zero flag, 117
ZLib compression library, 132
Technet24
||||||||||||||||||||
||||||||||||||||||||
RESOURCES
Visit https://www.nostarch.com/networkprotocols/ for resources, errata, and more
information.
More no-nonsense books from 
 NO STARCH PRESS
ROOTKITS AND BOOTKITS
Reversing Modern Malware and Next Generation Threats
by ALEX MATROSOV, EUGENE
RODIONOV, and SERGEY BRATUS
SPRING 2018, 504 PP., $49.95
ISBN 978-1-59327-716-1
||||||||||||||||||||
||||||||||||||||||||
SERIOUS CRYPTOGRAPHY
A Practical Introduction to Modern Encryption
by JEAN-PHILIPPE AUMASSON
NOVEMBER 2017, 312 PP., $49.95
ISBN 978-1-59327-826-7
GRAY HAT C#
A Hacker’s Guide to Creating and Automating Security Tools
by BRANDON PERRY
JUNE 2017, 304 PP., $39.95
Technet24
||||||||||||||||||||
||||||||||||||||||||
ISBN 978-1-59327-759-8
PRACTICAL PACKET ANALYSIS, 3RD EDITION
Using Wireshark to Solve Real-World Network Problems
by CHRIS SANDERS
APRIL 2017, 368 PP., $49.95
ISBN 978-1-59327-802-1
THE HARDWARE HACKER
||||||||||||||||||||
||||||||||||||||||||
Adventures in Making and Breaking Hardware
by ANDREW “BUNNIE” HUANG
MARCH 2017, 416 PP., $29.95
ISBN 978-1-59327-758-1
hardcover
BLACK HAT PYTHON
Python Programming for Hackers and Pentesters
by JUSTIN SEITZ
DECEMBER 2014, 192 PP., $34.95
ISBN 978-1-59327-590-7
PHONE:
1.800.420.7240 OR +1.415.863.9900
EMAIL:
PI:EMAIL
WEB:
www.nostarch.com
Technet24
||||||||||||||||||||
||||||||||||||||||||
||||||||||||||||||||
||||||||||||||||||||
“James can see the Lady in the Red Dress, as well as
the code that rendered her, in the Matrix.”
— Katie Moussouris, founder and CEO, Luta Security
Attacking Network Protocols is a deep dive into network protocol security from James
Forshaw, one of the world’s leading bug hunters. This comprehensive guide looks at
networking from an attacker’s perspective to help you discover, exploit, and ultimately
protect vulnerabilities.
You’ll start with a rundown of networking basics and protocol traffic capture before
moving on to static and dynamic protocol analysis, common protocol structures,
cryptography, and protocol security. Then you’ll turn your focus to finding and exploiting
vulnerabilities, with an overview of common bug classes, fuzzing, debugging, and
exhaustion attacks.
Learn how to:
• Capture, manipulate, and replay packets
• Develop tools to dissect traffic and reverse engineer code to understand the inner
workings of a network protocol
• Discover and exploit vulnerabilities such as memory corruptions, authentication
bypasses, and denials of service
• Use capture and analysis tools like Wireshark and develop your own custom network
proxies to manipulate network traffic
Attacking Network Protocols is a must-have for any penetration tester, bug hunter, or
developer looking to understand and discover network vulnerabilities.
About the Author
James Forshaw is a renowned computer security researcher at Google Project Zero and
the creator of the network protocol analysis tool Canape. His discovery of complex design
issues in Microsoft Windows earned him the top bug bounty of $100,000 and placed him
as the #1 researcher on the published list from Microsoft Security Response Center
(MSRC). He’s been invited to present his novel security research at global security
conferences such as BlackHat, CanSecWest, and Chaos Computer Congress.
Technet24
||||||||||||||||||||
||||||||||||||||||||
THE FINEST IN GEEK ENTERTAINMENT™
www.nostarch.com
||||||||||||||||||||
||||||||||||||||||||
Footnotes
Chapter 2: Capturing Application Traffic
1. A proxy loop occurs when a proxy repeatedly connects to itself, causing a recursive loop. The outcome can only end in
disaster, or at least running out of available resources.
Chapter 3: Network Protocol Structures
1. Just ask those who have tried to parse HTML for errant script code how difficult that task can be without a strict format.
Chapter 6: Application Reverse Engineering
1. Apple moved to the x86 architecture in 2006. Prior to that, Apple used the PowerPC architecture. PCs, on the other
hand, have always been based on x86 architecture.
2. This isn’t completely accurate: many network cards can perform some processing in hardware.
Technet24
||||||||||||||||||||
||||||||||||||||||||