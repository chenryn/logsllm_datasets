### Service Account Privileges

#### Table 10-10: Service Account Privileges

| Privilege | Local System | Local Service / Network Service |
|-----------|--------------|---------------------------------|
| SeAssignPrimaryTokenPrivilege | Yes | No |
| SeAuditPrivilege | Yes | No |
| SeBackupPrivilege | Yes | No |
| SeChangeNotifyPrivilege | Yes | Yes |
| SeCreateGlobalPrivilege | Yes | Yes |
| SeCreatePagefilePrivilege | Yes | No |
| SeCreatePermanentPrivilege | Yes | No |
| SeCreateSymbolicLinkPrivilege | Yes | No |
| SeCreateTokenPrivilege | Yes | No |
| SeDebugPrivilege | Yes | No |
| SeDelegateSessionUserImpersonatePrivilege | Yes | No |
| SeImpersonatePrivilege | Yes | Yes |
| SeIncreaseBasePriorityPrivilege | Yes | No |
| SeIncreaseQuotaPrivilege | Yes | No |
| SeIncreaseWorkingSetPrivilege | Yes | No |
| SeLoadDriverPrivilege | Yes | No |
| SeLockMemoryPrivilege | Yes | No |
| SeManageVolumePrivilege | Yes | No |
| SeProfileSingleProcessPrivilege | Yes | No |
| SeRestorePrivilege | Yes | No |
| SeSecurityPrivilege | Yes | No |
| SeShutdownPrivilege | Yes | No |
| SeSystemEnvironmentPrivilege | Yes | No |
| SeSystemProfilePrivilege | Yes | No |
| SeSystemtimePrivilege | Yes | No |
| SeTakeOwnershipPrivilege | Yes | No |
| SeTcbPrivilege | Yes | No |
| SeTimeZonePrivilege | Yes | No |
| SeTrustedCredManAccessPrivilege | Yes | No |
| SeUndockPrivilege (client only) | Yes | No |

### The Network Service Account

The network service account is designed for services that need to authenticate to other machines on the network using the computer account, similar to the local system account. However, it does not require membership in the Administrators group or the extensive privileges assigned to the local system account. Services running under the network service account have limited access to registry keys, file system folders, and files compared to those running under the local system account. This limitation reduces the potential damage from a compromised network service process, as it cannot load device drivers or open arbitrary processes.

Key differences between the network service and local system accounts include:
- **Profile Usage**: Processes running under the network service account use the network service account’s profile. The registry component of this profile is located under `HKU\S-1-5-20`, and the files and directories are stored in `%SystemRoot%\ServiceProfiles\NetworkService`.
- **Example Service**: The DNS client, which resolves DNS names and locates domain controllers, runs under the network service account.

### The Local Service Account

The local service account is nearly identical to the network service account, with the key difference being that it can access only network resources that allow anonymous access. Both accounts share the same privileges, as shown in Table 10-10, and belong to the same groups, except that the local service account belongs to the local service group instead of the network service group. The profile for processes running under the local service account is loaded into `HKU\S-1-5-19` and stored in `%SystemRoot%\ServiceProfiles\LocalService`.

Examples of services that run under the local service account include:
- **Remote Registry Service**: Allows remote access to the local system’s registry.
- **LmHosts Service**: Performs NetBIOS name resolution.

### Running Services in Alternate Accounts

Due to the restrictions outlined, some services need to run with the security credentials of a user account. You can configure a service to run in an alternate account by specifying the account and password in the Windows Services MMC snap-in. To do this:
1. Right-click the service and select **Properties**.
2. Click the **Log On** tab.
3. Select the **This Account** option and provide the necessary credentials.

When a service running with an alternate account starts, it uses the specified account credentials, even if the account is not currently logged on. This ensures that the user profile is loaded. User services, described later, are designed to address this issue by loading only when the user logs on.

### Running with Least Privilege

A service’s process typically has access to all privileges available to the account it runs under, which may be more than necessary. To adhere to the principle of least privilege, developers can specify the required privileges, and the Service Control Manager (SCM) creates a security token containing only those privileges.

Developers use the `ChangeServiceConfig2` API (with the `SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO` information level) to indicate the desired privileges. The SCM reads these privileges when the service starts and adds them to the process token. If the service is a stand-alone service, the SCM creates a token with only the required privileges. For shared service processes, the SCM computes the union of the required privileges and combines them for the hosting process’s token.

### Experiment: Viewing Privileges Required by Services

To view the privileges required by a service, you can use the `sc.exe` utility and Process Explorer. Here’s how to do it for the CryptSvc service:

1. **Use `sc.exe`**:
   - Open a command prompt and type: `sc qprivs cryptsvc`
   - You should see three privileges: `SeChangeNotifyPrivilege`, `SeCreateGlobalPrivilege`, and `SeImpersonatePrivilege`.

2. **Run Process Explorer**:
   - Run Process Explorer as an administrator.
   - Look for the `Svchost.exe` process hosting the CryptSvc service. You can find the PID using Task Manager.
   - Double-click the `Svchost.exe` process with the matching PID and go to the **Security** tab to view the token privileges.

### Service Isolation

Restricting service privileges helps reduce the risk of a compromised service process affecting other processes, but it does not isolate the service from resources accessible to its account. To address this, Windows allows services to run in non-privileged accounts while still accessing specific privileged resources without lowering the security of those objects. This is achieved through service SIDs, which are generated to represent a service and used to set permissions on resources like registry keys and files.

### Experiment: Understanding Service SIDs

To understand how service SIDs are generated, follow these steps:

1. **Choose a Service**:
   - Open the Registry Editor and navigate to `HKLM\SYSTEM\CurrentControlSet\Services`.
   - Use the **Find** feature to locate a service with a `ServiceSidType` value of 3 (restricted) or 1 (unrestricted). For this experiment, use the BFE service.

2. **Use Process Explorer**:
   - Find the BFE hosting process in Process Explorer.
   - Double-click the process, go to the **Security** tab, and click the **NT SERVICE\BFE** group to view the extended group SID.

The service SID is generated using the SHA-1 hash of the service name. This allows fine-grained control over resource access and avoids the need for Deny ACEs.

### Restricted and Unrestricted Service SIDs

- **Unrestricted Service SIDs**: Created as enabled-by-default, group owner SIDs. The process token includes an ACE providing full permission to the service logon SID.
- **Restricted Service SIDs**: Turn the service-hosting process’s token into a write-restricted token. Access checks are performed twice for write requests, ensuring that the service can only write to objects explicitly granting write access to the service SID.

By using these mechanisms, Windows provides a more secure and manageable way to control service access to system resources.