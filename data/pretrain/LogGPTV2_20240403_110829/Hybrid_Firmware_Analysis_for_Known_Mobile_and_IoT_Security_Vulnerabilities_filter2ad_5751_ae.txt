### Datasets and Methodology

#### Dataset I: Library Binary Files
We compiled a dataset of 2,108 library binary files, which contain 2,037,772 function feature samples. These libraries include `libbrillo`, `libbacktrace`, `libtextclassifier`, and `libmediaplayerservice`. To establish ground truth, all binaries were compiled with a debug flag, allowing us to use symbol names for verification. Before processing with PATCHECKO, all binaries were stripped of their symbols.

#### Dataset II: Vulnerability Database
For vulnerability assessment, we created a database that includes static and dynamic feature vectors for both vulnerable and patched versions of functions. The vulnerable function dataset was sourced from Android Security Bulletins, covering the period from July 2016 to November 2018. This dataset includes 1,351 high-severity vulnerabilities and 381 critical vulnerabilities, totaling 2,076 vulnerabilities.

#### Dataset III: Firmware Images
To evaluate PATCHECKO, we collected various firmware images, including different versions of Android, Android Things, and iOS. Specifically, we selected two firmware images: one from Android Things 1.0 and another from Google Pixel 2 XL (Android 8.0). For vulnerability detection, we focused on vulnerabilities patched in 2018, specifically targeting Android versions 8.0 and 8.1. We chose 25 different Common Vulnerabilities and Exposures (CVEs) from our database to evaluate our solution on these devices.

### Training Details

Our deep learning model was trained using Dataset I. We used a sequential model with 6 layers. The input shape for the first layer is 96. The dataset was split into three disjoint subsets: training (1,222,663 functions), validation (407,554 functions), and testing (407,555 functions).

### Testing Devices

We evaluated PATCHECKO on two different devices: Android Things and Google Pixel 2 XL. For Android Things, we used Android Things 1.0, which includes security patches up to May 2018. For Google Pixel 2 XL, the system version is Android 8.0, and it includes security patches up to July 2017.

### Accuracy Results

#### Table VI: Accuracy for Deep Learning and Dynamic Execution on Vulnerable Functions (Android Things)
- **Dp**: Deep learning
- **DA**: Dynamic analysis

| CVE | TP | TN | FP | FN | FP(%) |
|-----|----|----|----|----|-------|
| CVE-2018-9451 | 1 | 1155 | 27 | 0 | 2.28% |
| CVE-2018-9340 | 1 | 1113 | 69 | 0 | 5.83% |
| CVE-2017-13232 | 1 | 951 | 35 | 0 | 3.55% |
| CVE-2018-9345 | 1 | 354 | 2 | 0 | 0.56% |
| CVE-2018-9420 | 1 | 107 | 8 | 0 | 6.90% |
| CVE-2017-13210 | 1 | 105 | 10 | 0 | 8.62% |
| CVE-2018-9470 | 1 | 1421 | 11 | 0 | 0.77% |
| CVE-2017-13209 | 0 | 867 | 152 | 1 | 14.90% |
| CVE-2018-9411 | 1 | 894 | 125 | 0 | 12.25% |
| CVE-2017-13252 | 1 | 609 | 7 | 0 | 1.13% |
| CVE-2017-13253 | 1 | 609 | 7 | 0 | 1.13% |
| CVE-2018-9499 | 1 | 609 | 75 | 0 | 12.16% |
| CVE-2018-9424 | 1 | 561 | 55 | 0 | 8.91% |
| CVE-2018-9491 | 1 | 421 | 45 | 0 | 9.64% |
| CVE-2017-13278 | 1 | 2164 | 373 | 0 | 14.70% |
| CVE-2018-9410 | 1 | 595 | 57 | 0 | 8.73% |
| CVE-2017-13208 | 1 | 178 | 1 | 0 | 0.56% |
| CVE-2018-9498 | 1 | 13598 | 130 | 0 | 0.95% |
| CVE-2017-13279 | 1 | 723 | 11 | 0 | 1.50% |
| CVE-2018-9440 | 1 | 725 | 9 | 0 | 1.22% |
| CVE-2018-9427 | 1 | 1060 | 120 | 0 | 10.16% |
| CVE-2017-13178 | 1 | 540 | 53 | 0 | 8.92% |
| CVE-2017-13180 | 1 | 571 | 22 | 0 | 3.70% |
| CVE-2018-9412 | 1 | 5393 | 595 | 0 | 4.46% |
| CVE-2017-13182 | 1 | 5050 | 5646 | 0 | 10.54% |

**Average FP(%)**: 6.16%

### Figures

#### Figure 7: False Positive Rate on Android Things and Google Pixel 2 XL with Vulnerable and Patched Versions
- **(a)**: False positive rate for vulnerable versions
- **(b)**: False positive rate for patched versions

#### Figure 8: Deep Learning Training Results
- **(a)**: Accuracy for training the deep learning model
- **(b)**: Loss for training the deep learning model

### Conclusion
The results demonstrate the effectiveness of our approach in detecting vulnerabilities in both vulnerable and patched versions of functions across different devices. The deep learning model and dynamic analysis engine provide complementary insights, enhancing the overall accuracy and reliability of the vulnerability detection process.