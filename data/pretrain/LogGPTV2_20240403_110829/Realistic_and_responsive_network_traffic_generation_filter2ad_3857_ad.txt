10
Time Scale j
15
10
0
5
10
Time Scale j
15
5
0
−5
−10
0
AuckDir0
AuckDir1
SwingDir0
SwingDir1
5
10
Time Scale j
15
Figure 8: HTTP/Auck Energy plot
(bytes).
Figure 9: SQUID/Auck Energy plot
(bytes).
Figure 10: SQUID/Auck Energy plot
(packets).
a delay of greater than 200ms on one side of the link (Direction 1)
matching our expectation for a cross-continental link. Figure 6
compares Auck’s link capacities for the path connecting the hosts
to the target-link. While in one direction the capacities range
from 1 − 100Mbps, hosts appear to be bottlenecked upstream at
approximately 3.5Mbps in the other direction. These values match
our understanding of typical host characteristics on either side
of the Auck link (we had similarly good results for Mawi and
CAIDA). Finally, Figure 7 presents the loss rate for the trace. For
validation, we also plot the extracted values for delay, capacity, and
loss rate for our Swing-generated traces. We obtain good matches
in all cases. The discrepancy in loss rate behavior results from the
difﬁculty of disambiguating between losses, retransmissions, and
multi-path routing in a noisy packet trace.
Finally, Table 2 presents aggregate per-application character-
istics of Swing-generated traces compared to the original Auck,
Mawi, and CAIDA traces. In all cases, we are satisﬁed with
our ability to reproduce aggregate trace characteristics, especially
considering that we are performing no manual tuning on a per-trace
or per-application basis. While we focus on our ability to reproduce
per-application characteristics in this paper, our results are typically
better when reproducing aggregate trace characteristics because of
the availability of more information and less discretization error.
5.2 Wavelet based analysis
Figure 8 compares the wavelet scaling plots for byte arrivals
for HTTP/Auck and corresponding Swing traces. In both plots, the
top pair of curves corresponds to the scaling plots for one trafﬁc
direction (labeled 0) and the bottom curves are for the opposite
direction (labeled 1). A common dip in the top curve corresponds
to the dominant RTT of 200ms (scale 9) as shown in Figure 5.
Likewise, the common dip seen for the bottom pair at a scale
of 3 (8ms) corresponds to the bottleneck upstream capacity of
3.5Mbps (see Figure 6). Figure 9 compares the scaling plots for
byte arrivals for SQUID for the same trace. The relatively ﬂat
structure in Direction 1 relative to the HTTP plot results because
most of the data ﬂows in Direction 0. The signiﬁcant difference
in SQUID’s behavior relative to HTTP shows the importance of
capturing individual application characteristics, especially if using
Swing to extrapolate to other network settings, e.g., considering
trace behavior in the case when SQUID becomes the dominant
application. Figure 10 shows the corresponding plot for packet ar-
rivals. The close match conﬁrms our ability to reproduce burstiness
at the granularity of both bytes and packets.
Figure 11 shows the scaling plot for HTTP byte arrivals in the
Mawi trace. The plot differs signiﬁcantly from the corresponding
Auck plot (see Figure 8) but Swing can accurately reproduce it
without manual tuning. Consider another trace from the Mawi
repository taken six months earlier as shown in Figure 12. Applica-
tion burstiness changes over time in this trace and Swing accurately
captures this evolving behavior. Finally, Figure 13 shows the energy
plot for both directions of HTTP trafﬁc in the CAIDA trace as
validation of our ability to generalize to a higher-bandwidth trace
as well as to a trace taken from a fundamentally different network
location.
To the best of our knowledge, we are the ﬁrst to reproduce
observed burstiness in generated traces across a range of time
scales. While our relatively simple model cannot capture all rel-
evant trace conditions (such as the number of intermediate hops to
the target link), an important contribution of this work demonstrates
)
)
j
(
y
g
r
e
n
E
(
g
o
l
2
Smallest time scale = 1 msec 
Smallest time scale = 1 msec 
Smallest time scale = 1 msec 
MawiDir0
MawiDir1
SwingDir0
SwingDir1
)
)
j
(
y
g
r
e
n
E
(
2
g
o
l
5
10
Time Scale j
15
28
26
24
22
20
18
16
0
30
25
20
0
MawiDir0
MawiDir1
SwingDir0
SwingDir1
)
)
j
(
y
g
r
e
n
E
(
2
g
o
l
5
Time Scale j
10
15
35
30
25
20
0
CAIDADir0
CAIDADir1
SwingDir0
SwingDir1
5
Time Scale j
10
15
Figure 11: HTTP/Mawi Energy plot
(bytes).
Figure 12: HTTP/Mawi2 Energy plot
(bytes).
Figure 13: HTTP/CAIDA Energy plot
(bytes).
Smallest time scale = 1 msec 
Smallest time scale = 1 msec 
Smallest time scale = 1 msec
)
)
j
(
y
g
r
e
n
E
(
g
o
l
2
35
30
25
20
0
LatencyCapacityLossRates
LatencyCapacities
LinkLatencies
NoNetwork
Mawi
)
)
j
(
y
g
r
e
n
E
(
2
g
o
l
5
10
Time Scale j
15
30
25
20
15
0
HTTP
NoInterrreHTTP
SQUID
NoInterconnSQUID
)
)
j
(
y
g
r
e
n
E
(
2
g
o
l
5
10
Time Scale j
15
28
26
24
22
20
18
16
0
SwingDir0AvgOf10Runs
AuckDir0
SwingDir1AvgOf10Runs
AuckDir1
5
10
Time Scale j
15
Figure 14: Energy plot sensitivity to
network characteristics.
Figure 15: Energy plot sensitivity to
interconn, interRRE parameters.
Figure 16: Cross-run Energy plot vari-
ability.
that capturing and reproducing a relatively simple set of trace
conditions is sufﬁcient to capture burstiness, at least for the traces
we considered. Earlier work [12] shows that global scaling (at time
scales beyond the dominant RTT) can be captured by modeling, for
instance, response sizes as a heavy-tailed distribution. Our work on
the other hand, shows how to extract appropriate distributions from
the underlying trace (rather than assuming particular distributions
for individual parameters), reproduces burstiness at a variety of
time scales (including those smaller than the dominant RTT), and
considers both the bytes and packet arrival processes for trafﬁc in
two directions.
5.3 Sensitivity
One question is whether our model parameters are necessary
and sufﬁcient to reproduce trace characteristics. Similarly, it would
be interesting to quantify the relative importance of individual
parameters under different settings. While a detailed analysis
is beyond the scope of this paper, we have investigated trace
sensitivity to our parameters and have found that all aspects of our
model do indeed inﬂuence resulting accuracy to varying extents.
We present a subset of our ﬁndings here.
We start with the importance of capturing and reproducing
wide-area network conditions as it appears to be the biggest
contributor to burstiness in the original trace. Consider the case
where we omit emulating wide-area network conditions and simply
play back modeled user and application characteristics across
an unconstrained network (switched Gigabit Ethernet). While we
roughly maintain aggregate trace characteristics such as bandwidth
(not shown), Figure 14 shows that we lose the rich structure present
at sub-RTT scales and the overall burstiness characteristics. This
result shows that two generated traces with the same average-case
behavior can have vastly different structure. Hence, it is important
to consider network conditions to reproduce the structure in an
original trace. This ﬁgure also shows that capturing any single
aspect of wide-area network conditions is likely insufﬁcient to
reproduce trace characteristics. For instance, only reproducing link
latencies (with unconstrained capacity and no loss rate) improves
the shape of the plot relative to an unconstrained network but
remains far from the original trace characteristics. Likewise, having
both latency and capacity is also insufﬁcient though progressively
better.
Accurate network modeling alone is insufﬁcient to reproduce
burstiness. As one example, the top two curves in Figure 15
show the degradation when we omit interRRE from our model
for HTTP/Auck. Similarly, the bottom pair of curves show the
increase in burstiness at large time scales when we omit interconn
for SQUID/Auck.
As in § 2, one of our goals is to generate a family of traces
starting from a given trace using indepedent model and parameters.
While this approach allows us to introduce more variability in
Swing-generated traces, it is important to consider the resulting
deviation from the original trace. To address this question we
perform the following experiment. We start with the Auck trace and
vary the initial random seed to our trafﬁc generator and generate
10 Swing traces. Figure 16 shows the variability across the different
runs. For Swing curves, we plot average values across the 10 runs
for each time scale and show the standard deviation using error
bars. While the average curves closely follow Auck, at large time
scales we see a few examples where the energy plot does not
completely overlap with the baseline. While it is feasible to reduce
variability, overall we prefer the ability to explore the range of
possible behavior starting with an original trace.
5.4 Responsiveness
We now explore Swing’s ability to project trafﬁc into alternate
scenarios. Figure 17 shows the effect of doubling the link latencies
(all other model parameters remain unchanged) for HTTP/Mawi.
Once again, while aggregate trace characteristics are roughly main-
tained (8.17mbps vs. 9mbps), burstiness can vary signiﬁcantly.
Overall, we ﬁnd that relatively accurate estimates of network
conditions (at least within a factor of two) are required to capture
burstiness and that, encouragingly, changing estimates for network
conditions match expectations for the resulting energy plot. For
instance, doubling the RTT moves the signiﬁcant dip to the right
by one unit as the X-axis is on a log2 scale. We also consider the
)
)
j
(
y
g
r
e
n
E
(
g
o
l
2
Smallest time scale = 1 msec 
Swing
RSPDouble
LatencyDouble
5
10
Time Scale j
15
30
28
26
24
22