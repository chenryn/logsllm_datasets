2. Attach a device to your Mac, run the application on the device via Xcode, and check for output in the console
during the app's execution in the console.
For the other "manager-based" debug code: click through the application on both a simulator and a device to see if
you can find any functionality that allows an app's profiles to be pre-set, allows the actual server to be selected or
allows responses from the API to be selected.
Checking for Weaknesses in Third Party Libraries (MSTG-CODE-5)
Overview
iOS applications often make use of third party libraries. These third party libraries accelerate development as the
developer has to write less code in order to solve a problem. There are two categories of libraries:
Libraries that are not (or should not) be packed within the actual production application, such as OHHTTPStubs
used for testing.
Libraries that are packed within the actual production application, such as Alamofire .
These libraries can have the following two classes of unwanted side-effects:
A library can contain a vulnerability, which will make the application vulnerable. A good example is AFNetworking
version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to
execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.
A library can use a license, such as LGPL2.1, which requires the application author to provide access to the
source code for those who use the application and request insight in its sources. In fact the application should
then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual
property (IP) of the application.
Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue
can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries
can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.
Static Analysis
Detecting vulnerabilities of third party libraries
In order to ensure that the libraries used by the apps are not carrying vulnerabilities, one can best check the
dependencies installed by CocoaPods or Carthage.
In case CocoaPods is used for managing third party dependencies, the following steps can be taken to analyze the
third party libraries for vulnerabilities:
490
Code Quality and Build Settings for iOS Apps
First, at the root of the project, where the Podfile is located, execute the following commands:
$ sudo gem install CocoaPods
$ pod install
Next, now that the dependency tree has been built, you can create an overview of the dependencies and their
versions by running the following commands:
$ sudo gem install CocoaPods-dependencies
$ pod dependencies
The result of the steps above can now be used as input for searching different vulnerability feeds for known
vulnerabilities.
Note:
1. If the developer packs all dependencies in terms of its own support library using a .podspec file, then this
.podspec file can be checked with the experimental CocoaPods podspec checker.
2. If the project uses CocaoPods in combination with Objective-C, SourceClear can be used.
3. Using CocoaPods with http based links instead of https might allow for man-in-the-middle attacks during the
download of the dependency, which might allow the attacker to replace (parts of) the library you download with
other content. Therefore: always use https .
In case Carthage is used for third party dependencies, then the following steps can be taken to analyze the third party
libraries for vulnerabilities:
First, at the root of the project, where the Cartfile is located, type
$ brew install carthage
$ carthage update --platform iOS
Next, check the Cartfile.resolved for actual versions used and inspect the given libraries for known vulnerabilities.
Note, at the time of writing of this chapter, there is no automated support for Carthage based dependency
analysis known to the authors.
When a library is found to contain vulnerabilities, then the following reasoning applies:
Is the library packaged with the application? Then check whether the library has a version in which the
vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or
might be the case in the future, then look for an alternative which provides similar functionality, but without the
vulnerabilities.
Is the library not packaged with the application? See if there is a patched version in which the vulnerability is
fixed. If this is not the case, check if the implications of the vulnerability for the build process. Could the
vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in
which the vulnerability is fixed.
In case frameworks are added manually as linked libraries:
1. Open the xcodeproj file and check the project properties.
2. Go to the tab "Build Phases" and check the entries in "Link Binary With Libraries" for any of the libraries. See
earlier sections on how to obtain similar information using MobSF.
In the case of copy-pasted sources: search the header files (in case of using Objective-C) and otherwise the Swift files
for known method names for known libraries.
491
Code Quality and Build Settings for iOS Apps
Lastly, please note that for hybrid applications, one will have to check the JavaScript dependencies with RetireJS.
Similarly for Xamarin, one will have to check the C# dependencies.
Detecting the licenses used by the libraries of the application
In order to ensure that the copyright laws are not infringed, one can best check the dependencies installed by
CocoaPods or Carthage.
When the application sources are available and CocoaPods is used, then execute the following steps to get the
different licenses: First, at the root of the project, where the Podfile is located, type
$ sudo gem install CocoaPods
$ pod install
This will create aPods folder where all libraries are installed, each in their own folder. You can now check the licenses
for each of the libraries by inspecting the license files in each of the folders.
When the application sources are available and Carthage is used, execute the following code in the root directory of
the project, where the Cartfile is located:
$ brew install carthage
$ carthage update --platform iOS
The sources of each of the dependencies have now been downloaded to Carthage/Checkouts folder in the project.
Here you can find the license for each of the libraries in their respective folder.
When a library contains a license in which the app's IP needs to be open-sourced, check if there is an alternative for
the library which can be used to provide similar functionalities.
Note: In case of a hybrid app, please check the build-tools used: most of them do have a license enumeration plugin
to find the licenses being used.
Dynamic Analysis
The dynamic analysis of this section comprises of two parts: the actual license verification and checking which
libraries are involved in case of missing sources.
It need to be validated whether the copyrights of the licenses have been adhered to. This often means that the
application should have an about or EULA section in which the copy-right statements are noted as required by the
license of the third party library.
When no source-code is available for library analysis, you can find some of the frameworks being used with otool and
MobSF. After you obtain the library and Clutched it (e.g. removed the DRM), you can run oTool with the root of the
application's directory:
$ otool -L 
However, these do not include all the libraries being used. Next, with Class-dump (for Objective-C) you can generate
a subset of the header files used and derive which libraries are involved. But not detect the version of the library.
$ ./class-dump  -r
Testing Exception Handling (MSTG-CODE-6)
492
Code Quality and Build Settings for iOS Apps
Overview
Exceptions often occur after an application enters an abnormal or erroneous state. Testing exception handling is
about making sure that the application will handle the exception and get into a safe state without exposing any
sensitive information via its logging mechanisms or the UI.
Bear in mind that exception handling in Objective-C is quite different from exception handling in Swift. Bridging the two
approaches in an application that is written in both legacy Objective-C code and Swift code can be problematic.
Exception handling in Objective-C
Objective-C has two types of errors:
NSException NSException is used to handle programming and low-level errors (e.g., division by 0 and out-of-bounds
array access). An NSException can either be raised by raise or thrown with @throw . Unless caught, this exception
will invoke the unhandled exception handler, with which you can log the statement (logging will halt the program).
@catch allows you to recover from the exception if you're using a @try - @catch -block:
@try {
//do work here
}
@catch (NSException *e) {
//recover from exception
}
@finally {
//cleanup
Bear in mind that using NSException comes with memory management pitfalls: you need to clean up allocations from
the try block that are in the finally block. Note that you can promote NSException objects to NSError by instantiating
an NSError in the @catch block.
NSError NSError is used for all other types of errors. Some Cocoa framework APIs provide errors as objects in their
failure callback in case something goes wrong; those that don't provide them pass a pointer to an NSError object by
reference. It is a good practice to provide a BOOL return type to the method that takes a pointer to an NSError object
to indicate success or failure. If there's a return type, make sure to return nil for errors. If NO or nil is returned, it
allows you to inspect the error/reason for failure.
Exception Handling in Swift
Exception handing in Swift (2 - 4) is quite different. The try-catch block is not there to handle NSException . The block
is used to handle errors that conform to the Error (Swift 3) or ErrorType (Swift 2) protocol. This can be challenging
when Objective-C and Swift code are combined in an application. Therefore, NSError is preferable to NSException
for programs written in both languages. Furthermore, error-handling is opt-in in Objective-C, but throws must be
explicitly handled in Swift. To convert error-throwing, look at the Apple documentation. Methods that can throw errors
use the throws keyword. There are four ways to handle errors in Swift:
Propagate the error from a function to the code that calls that function. In this situation, there's no do-catch ;
there's only a throw throwing the actual error or a try to execute the method that throws. The method
containing the try also requires the throws keyword:
func dosomething(argumentx:TypeX) throws {
try functionThatThrows(argumentx: argumentx)
}
Handle the error with a do-catch statement. You can use the following pattern:
493
Code Quality and Build Settings for iOS Apps
do {
try functionThatThrows()
defer {
//use this as your finally block as with Objective-c
}
statements
} catch pattern 1 {
statements
} catch pattern 2 where condition {
statements
}
Handle the error as an optional value:
let x = try? functionThatThrows()
//In this case the value of x is nil in case of an error.
Use the try! expression to assert that the error won't occur.
Static Analysis
Review the source code to understand how the application handles various types of errors (IPC communications,
remote services invocation, etc.). The following sections list examples of what you should check for each language at
this stage.
Static Analysis in Objective-C
Make sure that
the application uses a well-designed and unified scheme to handle exceptions and errors,
the Cocoa framework exceptions are handled correctly,
the allocated memory in the @try blocks is released in the @finally blocks,
for every @throw , the calling method has a proper @catch at the level of either the calling method or the
NSApplication / UIApplication objects to clean up sensitive information and possibly recover,
the application doesn't expose sensitive information while handling errors in its UI or in its log statements, and the
statements are verbose enough to explain the issue to the user,
high-risk applications' confidential information, such as keying material and authentication information, is always
wiped during the execution of @finally blocks,
raise is rarely used (it's used when the program must be terminated without further warning),
NSError objects don't contain data that might leak sensitive information.
Static Analysis in Swift
Make sure that
the application uses a well-designed and unified scheme to handle errors,
the application doesn't expose sensitive information while handling errors in its UI or in its log statements, and the
statements are verbose enough to explain the issue to the user,
high-risk applications' confidential information, such as keying material and authentication information, is always
wiped during the execution of defer blocks,
try! is used only with proper guarding up front (to programmatically verify that the method that's called with
try! can't throw an error).
Proper Error Handling
Developers can implement proper error handling in several ways:
494
Code Quality and Build Settings for iOS Apps
Make sure that the application uses a well-designed and unified scheme to handle errors.
Make sure that all logging is removed or guarded as described in the test case "Testing for Debugging Code and
Verbose Error Logging".
For a high-risk application written in Objective-C: create an exception handler that removes secrets that shouldn't
be easily retrievable. The handler can be set via NSSetUncaughtExceptionHandler .
Refrain from using try! in Swift unless you're certain that there's no error in the throwing method that's being
called.
Make sure that the Swift error doesn't propagate into too many intermediate methods.
Dynamic Testing
There are several dynamic analysis methods:
Enter unexpected values in the iOS application's UI fields.
Test the custom URL schemes, pasteboard, and other inter-app communication controls by providing unexpected
or exception-raising values.
Tamper with the network communication and/or the files stored by the application.
For Objective-C, you can use Cycript to hook into methods and provide them arguments that may cause the
callee to throw an exception.
In most cases, the application should not crash. Instead, it should
recover from the error or enter a state from which it can inform the user that it can't continue,
provide a message (which shouldn't leak sensitive information) to get the user to take appropriate action,
withhold information from the application's logging mechanisms.
Memory Corruption Bugs (MSTG-CODE-8)
iOS applications have various ways to run into memory corruption bugs: first there are the native code issues which
have been mentioned in the general Memory Corruption Bugs section. Next, there are various unsafe operations with
both Objective-C and Swift to actually wrap around native code which can create issues. Last, both Swift and
Objective-C implementations can result in memory leaks due to retaining objects which are no longer in use.
Static Analysis
Are there native code parts? If so: check for the given issues in the general memory corruption section. Native code is
a little harder to spot when compiled. If you have the sources then you can see that C files use .c source files and .h
header files and C++ uses .cpp files and .h files. This is a little different from the .swift and the .m source files for Swift
and Objective-C. These files can be part of the sources, or part of third party libraries, registered as frameworks and
imported through various tools, such as Carthage, the Swift Package Manager or Cocoapods.
For any managed code (Objective-C / Swift) in the project, check the following items:
The doubleFree issue: when free is called twice for a given region instead of once.
Retaining cycles: look for cyclic dependencies by means of strong references of components to one another
which keep materials in memory.
Using instances of UnsafePointer can be managed wrongly, which will allow for various memory corruption
issues.
Trying to manage the reference count to an object by Unmanaged manually, leading to wrong counter numbers
and a too late/too soon release.
A great talk is given on this subject at Realm academy and a nice tutorial to see what is actually happening is
provided by Ray Wenderlich on this subject.
495
Code Quality and Build Settings for iOS Apps
Please note that with Swift 5 you can only deallocate full blocks, which means the playground has changed a
bit.
Dynamic Analysis
There are various tools provided which help to identify memory bugs within Xcode, such as the Debug Memory graph
introduced in Xcode 8 and the Allocations and Leaks instrument in Xcode.
Next, you can check whether memory is freed too fast or too slow by enabling NSAutoreleaseFreedObjectCheckEnabled ,
NSZombieEnabled , NSDebugEnabled in Xcode while testing the application.
There are various well written explanations which can help with taking care of memory management. These can be
found in the reference list of this chapter.
Make Sure That Free Security Features Are Activated (MSTG-CODE-9)
Overview
Although Xcode enables all binary security features by default, it may be relevant to verify this for an old application or
to check for the misconfiguration of compilation options. The following features are applicable:
ARC - Automatic Reference Counting - A memory management feature that adds retain and release messages
when required
Stack Canary - Helps prevent buffer overflow attacks by means of having a small integer right before the return
pointer. A buffer overflow attack often overwrites a region of memory in order to overwrite the return pointer and
take over the process-control. In that case, the canary gets overwritten as well. Therefore, the value of the canary
is always checked to make sure it has not changed before a routine uses the return pointer on the stack.
PIE - Position Independent Executable - enables full ASLR for binary
Static Analysis
Xcode Project Settings
Stack-smashing protection
Steps for enabling Stack-smashing protection in an iOS application:
1. In Xcode, select your target in the "Targets" section, then click the "Build Settings" tab to view the target's
settings.
2. Make sure that the "-fstack-protector-all" option is selected in the "Other C Flags" section.
3. Make sure that Position Independent Executables (PIE) support is enabled.
Steps for building an iOS application as PIE:
1. In Xcode, select your target in the "Targets" section, then click the "Build Settings" tab to view the target's
settings.
2. Set the iOS Deployment Target to iOS 4.3 or later.
3. Make sure that "Generate Position-Dependent Code" is set to its default value ("NO").
4. Make sure that "Don't Create Position Independent Executables" is set to its default value ("NO").
5. ARC protection
Steps for enabling ACR protection for an iOS application:
1. In Xcode, select your target in the "Targets" section, then click the "Build Settings" tab to view the target's
settings.
496
Code Quality and Build Settings for iOS Apps
2. Make sure that "Objective-C Automatic Reference Counting" is set to its default value ("YES").
See the Technical Q&A QA1788 Building a Position Independent Executable.
With otool
Below are procedures for checking the binary security features described above. All the features are enabled in these
examples.
PIE: