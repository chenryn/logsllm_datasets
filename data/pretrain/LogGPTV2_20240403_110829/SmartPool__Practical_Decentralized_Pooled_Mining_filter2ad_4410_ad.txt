ever, it does not help guarantee that miners do not sub-
mit the same shares in two different claims, i.e. over-
claiming shares across claims. We prevent this prob-
lem by tracking counters of the shares in every claim
and randomizing the counter start scheme for each claim.
For example, we can use the the pair (block-timestamp,
nonce) as a counter in an Ethereum block. We observe
that, for a single miner, the counters for each claim are
distinct because of the nonce. At the same time, times-
tamps monotonically order shares across claims, since
the block timestamp monotonically increases over time.
Thus for any two distinct claims, the maximum share
counter among an earlier claim is always smaller than
the minimum counter of the shares in a later one. This
observation enables a simple duplication check on the
shares submitted in two different claims. Speciﬁcally,
we require miners to submit their claims in chronolog-
ically increasing order of timestamp values (which are
preﬁxes in the counter values). We use an additional vari-
able last max in our smart contract to keep track of the
maximum counter (i.e. max value of the root node in
the augmented Merkle tree) from the last claim. We only
accept a new claim if the min value of the root node is
greater than last max, and update last max properly if
the new claim is valid.
Penalty scheme. Miners are rewarded according to the
amount of shares that they submitted to the pool. In cen-
tralized pools, the pool manager is able to check every
share submitted by miners, thus miners cannot cheat. In
SMARTPOOL, since we use probabilistic veriﬁcation, we
introduce a penalty scheme that penalizes detected cheat-
ing, independent of the reward distribution scheme used.
The penalty scheme in Deﬁnition 2 is simple and sufﬁces
to disincentivize cheating, assuming rational miners.
Deﬁnition 2 (Penalty Scheme). In SMARTPOOL, the
penalty scheme for a claim of n shares is as follow:
Pay all n shares if invalid share was not detected;
Pay 0 otherwise.
(cid:40)
In Section 4, we prove that our penalty scheme dis-
incentivizes rational miners from submitting wrong or
duplicated shares. Our detailed analysis shows that for
k ≥ 1 samples, honesty maximizes payout.
Randomly sampling shares. In order to randomly sam-
ple, we need a source of randomness. A practical way
to obtain such a random seed to use the hash of a fu-
ture block. To reduce the amount of bias that any adver-
sary can introduce to the block hash, one can take several
samples based on several consecutive block hashes. For
example, let us consider a scenario where a miner sub-
mits a claim of 1 million shares at block 1, and we wish
to sample 2 random shares for our probabilistic veriﬁca-
tion. The miner is required to submit the data of 2 shares
which are corresponding to hashes of blocks 1 and 2 (e.g.
the hash values modulo 106) to SMARTPOOL for veriﬁ-
cation. If the miner fails to submit any of these deter-
mined shares, they will not be able to claim the reward.
Putting everything together, we summarize the entire
SMARTPOOL protocol in Figure 4 of the Appendix. Due
to the space constraints, we address other technical ques-
tions in the full version of the paper [23].
USENIX Association
26th USENIX Security Symposium    1417
4 Analysis
We analyze the security that SMARTPOOL provides
through probabilistic veriﬁcation and the penalty scheme
in Deﬁnition 2.
We begin by informally reviewing the properties of
our Merkle tree test and then formally establishing its
correctness in Corollary 9 below. The intuition is if a
claim has n valid shares and m invalid or duplicated ones,
by randomly sampling a share from the claim, we can de-
tect invalid shares with probability m/(n + m). Suppose
that a claim submitted by the adversary has n valid shares
and m invalid or duplicated ones. If our test procedure is
correct, the probability that our test on k independently
chosen random samples fails to catch the cheating is at
most (1 − m
n+m )k. In this case, the cheating miner gets
paid for n + m shares, which is higher than reward for
being honest (i.e. n shares). Corollary 9 shows that for
all choices of m, for k ≥ 1, the adversary’s advantage (ex-
pected payoff) from cheating does not exceed the guar-
anteed payoff he would obtain from honestly submitting
shares. Further, it is easy to see that over all choices of m
the attacker’s advantage is bounded by a negligible func-
tion in k (the number of samples checked).
Note that we establish that the adversary’s advantage
is minimal using a simple penalty function presented in
Deﬁnition 2. Our probabilistic veriﬁcation with penalties
provide a basis to determine which shares to pay; how-
ever, any rewarding scheme can determine how to pay
for the valid shares (e.g. using PPS, PPLNS, and so on).
Finally, we consider other possible attacker manipula-
tions. One further security concern, in particular, merits
analysis. The seed for our sampling is based on a block
hash chosen by miners. We show that this source of ran-
domness has a (low) bias, assuming that at least 50% of
the mining network is honest. However, we establish in
Theorem 10 that by sampling k ≥ 2 times, the expected
reward from honest submissions majorizes the expected
payoff advantage from biased sampling.
4.1 Analysis of Expected Payoffs
We ﬁrst analyze the scenario where the adversary can-
not drop Ethereum blocks to introduce bias on sampling
random seed, so the sample blocks in our probabilistic
scheme are randomly selected. Furthermore, we assume
that the adversary does not attempt to manipulate the ex-
pected format of the submitted data aside from possi-
bly submitting duplicate or invalid shares. We will relax
these conditions in Section 4.2.
It sufﬁces for the SMARTPOOL contract to check a
single, randomly chosen path through a submitted aug-
mented Merkle tree in order to pay fairly for shares, on
average (Corollary 9). If all submitted shares are valid
and there are no duplicates, then SMARTPOOL pays for
all shares with probability 1 (Theorem 7). The following
facts will be useful.
Lemma 3. For any node x in a augmented Merkle tree,
(I) min(x) is the minimum of all nodes below x, and
(II) max(x) is the maximum of all nodes below x.
Proof. We will prove (I), and (II) follows by symmetry.
Let y be any node below x, and trace a path from x to
y in the given augmented Merkle tree. The min of x’s
immediate children along this path is, by deﬁnition of
augmented Merkle tree, no greater than min(x). Simi-
larly for the next children down, and so on, down to y.
Therefore min(x) ≤ y.
Proposition 4. Let A be an augmented Merkle tree. The
following are equivalent:
(I) A is sorted (see Deﬁnition 1).
(II) For every node x, the max of x’s left child is less
than the min of x’s right child.
Proof. We argue by induction. Assume (I), and further
assume than (II) holds restricted to the ﬁrst n levels above
the leaves (the leaves are at the ground, i.e. zero level).
Consider a node x at depth n + 1. By the inductive hy-
pothesis, the max of x’s left child is less than the min of
the next right child down, which is less than the min of
the next right child down and so on, all the way down
to some leaf y. By a symmetrical argument, the min of
x’s left child is greater than some leaf z which happens
to be to the right of y. Since A is sorted, it follows that
min(x) < y < z < max(x).
Next assume (II), and let y and z be any two leaves.
Let x be the lowest node (farthest from the root) which is
an ancestor of both y and z. By Lemma 3, y is less than or
equal to the max of x’s left child, and z is is greater than
or equal to the min of x’s right child. Now y < z follows
from the assumption, hence A is sorted.
Deﬁnition 5. A node in an augmented Merkle tree which
satisﬁes condition (II) of Proposition 4 is called valid.
Furthermore, we say that a path from a root to a leaf is
valid if all its constituent nodes are valid. A path which
is not valid is invalid.
The adversary can submit any arbitrary tree with the
syntactic structure of an augmented Merkle tree, but not
satisfying the constraint outlined in Deﬁnition 1. Let us
call such a tree which syntactically has the structure of
a augmented Merkle tree, but not necessarily satisfy the
Deﬁnition 1 simply as a Merkle tree. A submitted Merkle
tree can have any number of invalid or duplicate shares
as well as ill-constructed internal nodes. Intuitively, an
1418    26th USENIX Security Symposium
USENIX Association
Merkle tree with invalid nodes will have sorting errors,
which are deﬁned below, and include both duplicates as
well as decreasing share counters.
Deﬁnition 6. An element x in an array is out of order if
there exists a corresponding witness, namely an element
to the left of x which is greater than or equal to x, or an
element to the right of x which is less than or equal to x.
A leaf in a Merkle tree contains a sorting error if its label
value is out of order when viewing the leaves’ labels as
an array.
Now, we will show that any submitted Merkle tree has
at least as many invalid paths as the sorting errors it has.
Theorem 7. Let A be a Merkle tree. If A is sorted, then
all paths in A are valid. If A is not sorted, then every leaf
containing a sorting error lies on an invalid path.
Proof. If A is sorted then all its nodes are valid by Propo-
sition 4, hence all paths in A are valid. Now suppose A
is not sorted, and consider the highest node x in the tree
(farthest from the root) which is is an ancestor of two dis-
tinct leaves y and z where y is left of z but z ≤ y. Now x is
not valid, because by Lemma 3 the max of x’s left child is
at least y and the min of x’s right child is no more than z.
It follows that neither the path from root to y nor the path
from root to z is valid because both pass through x.
The theorem above shows that miners who submit
sorted augmented Merkle trees will receive their proper
reward. Algorithm 1 checks the validity of a given path
in a tree, and we omit a proof of its correctness here
leaving it to inspection. It remains to demonstrate that
sampling and checking a single path in the augmented
Merkle tree sufﬁces to discourage miners from submit-
ting duplicate shares.
Corollary 8. Every Merkle tree has at least as many in-
valid paths as sorting errors among the leaves. In par-
ticular, there are at least as many invalid paths as there
are duplicate values among the leaves.
Proof. Theorem 7 gives an injection from sorting errors
to invalid paths. Since each duplicate and out of order
leaf yields a sorting error, the result follows.
Finally, we calculate the adversary’s expected reward.
Corollary 9. Under the payment scheme in Deﬁnition 2,
if SMARTPOOL checks one random path in the aug-
mented Merkle tree of a claim, the expected reward when
submit invalid or duplicated shares is the same as the
expected reward when submit only valid shares.
Proof. Suppose that in a claim of an adversary, there are
k shares which are either invalid or duplicated. Since
we randomly pick a path, by Corollary 8, we sample an
invalid share with probability k/n and a valid share with
probability (n−k)/n. Hence the expected proﬁt from the
payment scheme in Deﬁnition 2 is
(cid:18) k
(cid:19)
· 0 +
n
(cid:18) n− k
(cid:19)
n
· n = n− k.
One expects to obtain this same proﬁt by submitting only
the n− k valid shares. Thus, on average, it is not prof-
itable to submit invalid shares to SMARTPOOL if we em-
ploy the payment scheme in Deﬁnition 2 and check one
random path from the augmented Merkle tree.
In summary, SMARTPOOL can efﬁciently probabilis-
tically check that an augmented Merkle tree is sorted.
4.2 Discussion of Attacker Strategies
In this section, for clarity, we discuss ways in which an
adversary might deviate from intended claim submission
behavior and argue that these deviations do not obtain
him greater rewards.
4.2.1 Rearrangements
The adversary cannot increase his expected proﬁts by
permuting the leaves of the Merkle tree. Observe that,
given a list of integers L which may include repeats,
a non-decreasing arrangement of L’s members in the
leaves of a Merkle tree minimizes sorting errors. By
Theorem 7, every duplicate yields a sorting error regard-
less of permutation. Furthermore, the number of sorting
errors that occur when the leaves are in non-decreasing
order is exactly the number of duplicates. Hence a ra-
tional miner has no incentive to deviate from this non-
decreasing conﬁguration.
4.2.2 Bogus entries in augmented Merkle tree
Falsifying Merkle tree nodes does not decrease the num-
ber of invalid paths.
Indeed, note that increasing the
range for a given node can only increase the number of
invalid paths, so we need only consider the case where
the cheater makes the range smaller. If the range is made
smaller so as to exclude the value of a leaf above that
doesn’t have a sorting error, then a new invalid path was
introduced by cheating. If the range is made smaller so
as to exclude a sorting error, then the path leading to that
sorting error is still invalid, and therefore injection from
Theorem 7 still applies.
4.3 Analysis of Bias In Seed Selection
We next consider the scenario in which the the adversary
is able to drop Ethereum blocks to bias the random seed.
USENIX Association
26th USENIX Security Symposium    1419
Thus, the sample blocks in our probabilistic veriﬁcation
are not randomly selected, i.e. the adversary can drop the
blocks which sample invalid shares from his claim. We
show that, even in the extreme case where the adversary
controls up to 50% of Ethereum mining power (i.e. can
drop 50% of the blocks), it sufﬁces to check only two
randomly chosen paths through a submitted augmented
Merkle tree in order to discourage the adversary from
cheating.
Theorem 10. If an adversary controls less than 50% of
Ethereum hash power, then it sufﬁces to sample only two
paths of the augmented Merkle tree based on two con-
secutive blocks to pay miners fairly, on average.
Proof. We call an Ethereum block a good block for the
adversary if its hash samples a valid share in the adver-
sary’s claim. Suppose that in the adversary’s claim, γ
fraction of the shares are invalid (0 ≤ γ ≤ 1). By Theo-
rem 7, at least γ fraction of the paths in the corresponding
augmented Merkle tree are invalid. Hence, on average
1− γ fraction of the blocks are good blocks, since each
block hash is a random number. The probability that the
adversary’s claim is still valid after two samples is the
probability that two consecutive blocks in Ethereum are
good blocks. We aim to compute this latter probability.
Let us assume that the choices of the two sample
shares are drawn based on the hash of a single block
hash, and that attacker controls p fraction of the net-
work’s mining power. The attacker’s strategy is to suc-
cessively drop blocks until he ﬁnds one that favorably
samples his claim submission. We estimate his prob-
ability of success. The probability that he succeeds in
exactly one round, regardless of who mined the block,
is (1 − γ)2,
if the samples drawn are favor-
able. The chances that the attacker wins in exactly two
rounds is the probability that the ﬁrst block gave un-
favorable sampling, but the attacker managed to mine
it, and the next sample was favorable. The probabil-
ity that all three of these independent events occur is
[1 − (1 − γ)2] · p · (1 − γ)2. In general, the chance that
the attacker succeeds in exactly k rounds is
that is,
f (k) =(cid:0)1− (1− γ)2(cid:1)k−1 · pk−1 · (1− γ)2.
(cid:2)(cid:0)1− (1− γ)2(cid:1)· p(cid:3)k
f (k) = (1− γ)2 · ∞
∑
.
Summing over all possible game lengths k, we ﬁnd that
the chance that the attacker wins is exactly
∞
∑
k=1
k=0
Since the right-hand side is a geometric series in which
the magnitude of the common ratio is less than 1, we
obtain
∞
∑
1− (1− (1− γ)2)· p =
1 + (γ2 − 2γ)p .
f (k) =
1
1
k=1
The block withholding strategy is proﬁtable if and only
if this probability exceeds the attacker’s chances of suc-