**描述符表 Windows 7 32 bit**
x86描述符表有各种用途，在j00ru的论文中考察的是中断描述符表（IDT），处理器用它查找处理中断和异常的代码，而全局描述符表（GDT）
由处理器使用以定义内存段。
关于描述符表的更多细节请参考j00ru的论文，它们主要在内存隔离和特权隔离中扮演关键角色。全局描述符表寄存器（GDTR）定义了GDT的起始地址及其大小，它可以通过sgdt
x86指令读取：
SGDT仅对操作系统软件有用; 但是，它可以在应用程序中使用，并且不会生成异常。
这意味着在Ring 3中运行的代码可以读取GDTR的值且不会引起异常，但无法对它进行写入操作。 GDTR的格式如下：
中断描述符表寄存器（IDTR）定义了IDT的起始地址及其大小，它可以使用sidt x86指令读取，并且与sgdt类似，也可以从ring
3调用，这一点真是带来了极大的便利性。IDTR的格式如下所示：
此外，Windows允许使用GetThreadSelectorEntry函数读取GDT中的特定表项。
在j00ru的论文中，他使用它来读取几个潜在的敏感表项，但是我将通过它来读取任务状态段（TSS）描述符。
我们可以使用内联汇编以6字节缓冲区作为参数来执行sidt指令。
    unsigned char idtr[6] = { 0 };
    __asm {
        sidt idtr;
    }
读取idtr后，我们只需要从内存中提取相应的值，就可以打印它们了。
    unsigned int idtrBase = (unsigned int)idtr[5] 
GetThreadSelectorEntry似乎没有读取TSS的64位简单实现代码，因此将其弃用。
因为从Ring 3执行sidt/sgdt指令是amd64指令集的特性，而非操作系统特性，所以在Windows 8中仍然可以读取这些值：
Windows 8.1:
Windows 10:
与进程所在的完整性级别或用户具有的权限无关。
**  
**
**Hyper-V**
根据Dave Weston和Matt Miller的Black Hat关于Windows
10的漏洞利用缓解进展方面的演讲来看，如果在系统上启用Hyper-V，并执行sidt或sgdt指令的话，管理程序将捕获它们并拦截返回值。
但是，这一点我还没有亲自验证过。
**  
**
**Win32k.sys Object Handle Addresses Windows 7 32 bit**
Win32k是一个重要的驱动程序，提供将图形输出到Windows上的显示器、打印机等的相关功能。它维护会话（会话由表示单个用户的登录会话的所有进程和其他系统对象组成。）和存储所有GDI（图形设备接口）和用户句柄的句柄表。
为了降低访问此表的性能开销，通常将其映射到用户空间中的所有GUI进程。 用户空间中该表的地址可通过user32.dll导出为gSharedInfo。
这允许从用户模式寻找内核内存空间中所有GDI和用户对象的地址。 首先，我们需要定义这个表在内存中的结构，下面的结构取自ReactOS。
    typedef struct _HANDLEENTRY {
        PVOID   phead;
        ULONG   pOwner;
        BYTE    bType;
        BYTE    bFlags;
        WORD    wUniq;
    }HANDLEENTRY, *PHANDLEENTRY;
    typedef struct _SERVERINFO {
        DWORD   dwSRVIFlags;
        DWORD   cHandleEntries;
        WORD    wSRVIFlags;
        WORD    wRIPPID;
        WORD    wRIPError;
    }SERVERINFO, *PSERVERINFO;
    typedef struct _SHAREDINFO {
        PSERVERINFO psi;
        PHANDLEENTRY    aheList;
        ULONG       HeEntrySize;
        ULONG_PTR   pDispInfo;
        ULONG_PTR   ulSharedDelta;
        ULONG_PTR   awmControl;
        ULONG_PTR   DefWindowMsgs;
        ULONG_PTR   DefWindowSpecMsgs;
    }SHAREDINFO, *PSHAREDINFO;
接下来，我们需要获取user32 DLL的句柄，并找到gSharedInfo变量的偏移量。
    HMODULE hUser32 = LoadLibraryA("user32.dll");
    PSHAREDINFO gSharedInfo = (PSHAREDINFO)GetProcAddress(hUser32, "gSharedInfo");
一旦解析出了用户空间中的表位置，我们就可以遍历句柄表，打印每个对象的内核地址、它的所有者和对象类型。
    for (unsigned int i = 0; i psi->cHandleEntries; i++) {
        HANDLEENTRY entry = gSharedInfo->aheList[i];
        if (entry.bType != 0) { //ignore free entries
            printf("Head: 0x%X, Owner: 0x%X, Type: 0x%Xrn", entry.phead, entry.pOwner, entry.bType);
        }
    }
下面是它在32位Windows 7上的运行情况：
**  
**
**Windows 8/8.1 64 bits**
为了将代码移植到64位系统，我们需要对代码稍作修改。
首先将SERVERINFO结构扩展为64位，方法是对dwSRVIFlags和cHandleEntries字段的大小进行相应的调整。
    typedef struct _SERVERINFO {
    #ifdef _WIN64
        UINT64 dwSRVIFlags;
        UINT64 cHandleEntries;
    #else
        DWORD dwSRVIFlags;
        DWORD cHandleEntries;
    #endif
同样，记录地址的printf语句也需要进行相应的修改，以便可以处理64位指针。
     #ifdef _WIN64
        printf("Head: 0x%llx, Owner: 0x%llx, Type: 0x%Xrn", entry.phead, entry.pOwner, entry.bType);
    #else
        printf("Head: 0x%X, Owner: 0x%X, Type: 0x%Xrn", entry.phead, entry.pOwner, entry.bType);
    #endif
完成这些修改之后，它就可以在Windows 8.1上正常运行了。
**Windows 10?**
根据Dave Weston和Matt Miller在黑帽大会上的演讲，已经无法通过GDI共享句柄表获得内核地址。
但是当这个二进制代码在64位Windows 10 周年版虚拟机中运行时，我找到了一些像内核指针的东西：
通过考察这些地址，发现它们与内核空间中的预期会话空间地址范围相吻合，也就是都位于正确的取值范围内——至少对于64位的Windows 7来说的确如此。
接下来，我加载了一个64位Windows
8机器，连接内核调试器并转储了句柄表，并将其与我在调试器中看到的值进行了相应的比较。下面的几个匹配值已经高亮显示，我们期望的值都能从用户模式代码中找到。
然后，我在64位的Windows 10上面进行了同样的试验。
我发现句柄表的结构和指向的值，在不同的操作系统版本之间非常一致。我现在没有更多的时间来深入研究这些，所以这里先打一个问号，留待以后继续探索。