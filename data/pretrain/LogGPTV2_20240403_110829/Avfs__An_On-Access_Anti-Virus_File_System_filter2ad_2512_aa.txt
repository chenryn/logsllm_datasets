title:Avfs: An On-Access Anti-Virus File System
author:Yevgeniy Miretskiy and
Abhijith Das and
Charles P. Wright and
Erez Zadok
USENIX Association
Proceedings of the
13th USENIX Security Symposium
San Diego, CA, USA
August 9–13, 2004
© 2004 by The USENIX Association
Phone: 1 510 528 8649
All Rights Reserved
FAX: 1 510 548 5738
Rights to individual papers remain with the author or the author's employer.
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Avfs: An On-Access Anti-Virus File System
Yevgeniy Miretskiy, Abhijith Das, Charles P. Wright, and Erez Zadok
Stony Brook University
Abstract
Viruses and other malicious programs are an ever-
increasing threat to current computer systems. They
can cause serious damage and consume countless hours
of system administrators’ time to combat. Most cur-
rent virus scanners perform scanning only when a ﬁle
is opened, closed, or executed. Such scanners are inefﬁ-
cient because they scan more data than is needed. Worse,
scanning on close may detect a virus after it had already
been written to stable storage, opening a window for the
virus to spread before detection.
We developed Avfs, a true on-access anti-virus ﬁle
system that incrementally scans ﬁles and prevents in-
fected data from being committed to disk. Avfs is a
stackable ﬁle system and therefore can add virus de-
tection to any other ﬁle system: Ext3, NFS, etc. Avfs
supports forensic modes that can prevent a virus from
reaching the disk or automatically create versions of po-
tentially infected ﬁles to allow safe recovery. Avfs can
also quarantine infected ﬁles on disk and isolate them
from user processes. Avfs is based on the open-source
ClamAV scan engine, which we signiﬁcantly enhanced
for efﬁciency and scalability. Whereas ClamAV’s per-
formance degrades linearly with the number of signa-
tures, our modiﬁed ClamAV scales logarithmically. Our
Linux prototype demonstrates an overhead of less than
15% for normal user-like workloads.
1 Introduction
Viruses, worms, and other malicious programs have ex-
isted since people started sharing ﬁles and using network
services [3, 15]. The growth of the Internet in recent
years and users’ demand for more active content has
brought with it an explosion in the number of virus and
worm attacks, costing untold hours of lost time. Orga-
nizations report more ﬁnancial losses from viruses than
from any other type of attack—reaching well into the
millions [16]. Once infected, original ﬁle content may
not be recoverable. Viruses can transmit conﬁdential
data on the network (e.g., passwords) allowing an at-
tacker to gain access to the infected machine. System ad-
ministrators must clean or reinstall systems that are not
adequately protected. A virus’s propagation wastes valu-
able resources such as network bandwidth, disk space,
and CPU cycles. Even if a site is not infected with a
virus, its servers can be overloaded with probes.
The most common countermeasure to malicious soft-
ware is a virus scanner. Virus scanners consist of two
parts: a scanning engine and a component that feeds
the data to the scanning engine. The scanning en-
gine searches for virus signatures, or small patterns that
uniquely identify a virus. Virus signatures should ide-
ally be kept short so that scanning is more efﬁcient, but
at the same time they should be long enough to ensure
that there are very few, if any, false positives.
A virus scanner can either scan interactively or trans-
parently. An interactive scanner allows a user to request
a scan of a speciﬁc ﬁle or directory. Since this process
is cumbersome, most virus scanners also transparently
scan ﬁles by intercepting system calls or using other
operating-system–speciﬁc interception methods. Cur-
rently, most transparent scanners only scan ﬁles when
they are opened, closed, or executed.
Consider the case where a Linux ﬁle server exports
NFS or CIFS partitions to other machines on the net-
work. Suppose the ﬁle server has a virus scanner that
scans ﬁles when they are closed. Client A could create a
ﬁle on the server and then write the virus. Suppose that
before A closes the ﬁle, client B opens this ﬁle for read-
ing. In contrast to Windows, Linux does not implement
mandatory ﬁle locking. There is nothing that prevents
B from reading and executing the virus. Even if the ﬁle
server scans ﬁles both when they are opened and closed,
B could still execute the virus before it is detected as fol-
lows: (1) A writes part of the virus, (2) B opens the ﬁle
at which point the ﬁle is scanned, but no virus is found,
(3) A completes writing the virus, (4) B reads the rest
of the virus before A closes the ﬁle. Virus scanners that
scan ﬁles when discrete events occur, such as openor
close, leave a window of vulnerability between the
time that the virus is written and the time when detec-
tion occurs. Additionally, because the entire ﬁle must be
scanned at once, performance can suffer.
On-access scanning is an improvement over on-
open, on-close, and on-exec scanning. An on-
access scanner looks for viruses when an application
reads or writes data, and can prevent a virus from ever
being written to disk. Since scanning is performed only
when data is read, as opposed to when the ﬁle is opened,
users are not faced with unexpected delays. We have
developed a stackable ﬁle system, Avfs, that is a true on-
access virus scanning system. Since Avfs is a stackable
ﬁle system, it can work with any other unmodiﬁed ﬁle
system (such as Ext2 or NFS), and it requires no operat-
ing system changes. For example, an Avfs mounted over
SMB can protect Windows clients transparently. In addi-
tion to virus detection, Avfs has applications to general
pattern matching. For example, an organization might
want to track or prevent employees copying ﬁles con-
taining the string “Conﬁdential! Do not distribute!”.
To reduce the amount of data scanned, Avfs stores per-
sistent state. Avfs scans one page a time, but a virus
may span multiple pages. After scanning one page, Avfs
records state. When the next page is scanned, Avfs can
resume scanning as if both pages were scanned together.
After an entire ﬁle is scanned, Avfs marks the ﬁle clean.
Avfs does not scan clean ﬁles until they are modiﬁed.
Avfs supports two forensic modes. The ﬁrst mode pre-
vents a virus from ever reaching the disk. When a pro-
cess attempts to write a virus, Avfs returns an error to
the process without changing the ﬁle. The second mode
does not immediately return an error to the process. Be-
fore the ﬁrst write to a ﬁle is committed, a backup of
that ﬁle is made. If a virus is detected, then Avfs quaran-
tines the virus (no other process can access a ﬁle while it
is quarantined), allows the write to go through, records
information about the event, and ﬁnally reverts to the
original ﬁle. This leaves the system in a consistent state
and allows the administrator to investigate the event.
We have adapted the ClamAV open source virus
scanner to work with Avfs. ClamAV includes a virus
database that currently contains nearly 20,000 signa-
tures. Our improved scanning engine, which we call
Oyster, runs in the kernel and scales signiﬁcantly bet-
ter than ClamAV. By running Oyster in the kernel we do
not incur unnecessary data copies or context switches.
Whereas ClamAV’s performance degrades linearly with
the number of virus signatures, Oyster scales logarith-
mically. Oyster also allows the system administrator to
decide what trade-off should be made between memory
usage and scanning speed. Since the number of viruses
is continuously growing, these scalability improvements
will become even more important in the future.
We have evaluated the performance of Avfs and Oys-
ter. Avfs has an overhead of 14.5% for normal user
workloads. Oyster improves on the performance of
ClamAV by a factor of 4.5.
The rest of the paper is organized as follows. Section
2 outlines the design of our system. Section 3 details the
design of our scanner. Section 4 details the design of our
ﬁle system. Section 5 discusses related work. Section 6
presents an evaluation of our system. We conclude in
Section 7 and discuss future directions.
2 Design overview
We begin with an overview of Avfs’s components and
our four main design goals:
Accuracy and high-security: We use a page-based on-
access virus scanner that scans in real time as op-
posed to conventional scanners that operate during
open and close operations. Avfs has support for
data-consistency using versioning and support for
forensics by recording malicious activity.
Performance: We enhanced the scanning algorithm
and avoided repetitive scanning using a state-
oriented approach. Our scan engine runs inside the
kernel, which improves performance by avoiding
message passing and data copying between the ker-
nel and user space.
Flexibility and portability: We designed a ﬂexible
system in which the scanning module is separate
from the ﬁle system module. A stackable ﬁle sys-
tem allows for portability to different environments
and works with any other ﬁle system.
Transparent: Our system is transparent in that no user
intervention is required and existing applications
need not be modiﬁed to support virus protection.
Stackable ﬁle systems are a technique to layer new
functionality on existing ﬁle systems [19]. A stackable
ﬁle system is called by the Virtual File System (VFS)
like other ﬁle systems, but in turn calls a lower-level ﬁle
system instead of performing operations on a backing
store such as a disk or an NFS server. Before calling the
lower-level ﬁle system, stackable ﬁle systems can mod-
ify an operation or its arguments. The underlying ﬁle
system could be any ﬁle system: Ext2/3, NFS, or even
another stackable ﬁle system.
Avfs is a stackable ﬁle system that provides protec-
tion against viruses. Figure 1 shows a high-level view
of the Avfs infrastructure. When Avfs is mounted over
an existing ﬁle system it forms a bridge between the
VFS and the underlying ﬁle system. The VFS calls
various Avfs operations and Avfs in turn calls the cor-
responding operations of the underlying ﬁle system.
Avfs performs virus scanning and state updates dur-
ing these operations. Oyster is our virus-scanning en-
gine that we integrated into the Linux kernel.
It ex-
ports an API that is used by Avfs for scanning ﬁles and
buffers of data. For example, a read from the Vir-
tual File System (VFS), vfs read(), translates into
avfs read() in the Avfs layer. The lower layer read
method (ext3 read()) is called and the data received
is scanned by Oyster.
The relevant ﬁle system methods that the stacking in-
frastructure provides to us are read, write, open and
close. A page is the fundamental data unit in our ﬁle
system. Reads and writes occur in pages, and we per-
User Process
read
sys_read
vfs_read
Virtual File System (VFS)
avfs_read
Avfs
ext3_read
File System (Ext3)
r
e
s
U
l
e
n
r
e
K
scanbuf
Oyster
Virus
Database
Figure 1: Avfs infrastructure
form virus scanning during individual page reads and
writes. This level of granularity has three key advan-
tages over scanning on open and close. First, we scan
for viruses at the earliest possible time: before the data
from a read is delivered to the user and before the data
from a write propagates to the disk. This reduces the
window of opportunity for any virus attack signiﬁcantly.
Second, we have an opportunity to maintain the consis-
tency of ﬁle data because we scan data for viruses before
data gets written to disk. Third, with our state imple-
mentation we can scan ﬁles partially and incrementally.
The state implementation also allows us to mark com-
pletely scanned ﬁles as clean so that would not need to
be re-scanned if they are not modiﬁed.
In Section 3 we describe Oyster in detail and Section
4 we detail the design of Avfs.
3 Kernel-Based Virus Scanner
In Section 3.1 we describe the internals of ClamAV. In
Section 3.2 we describe the enhancements we made to
the ClamAV virus scanner.
3.1 ClamAV Overview
We decided to use the freely available Clam AntiVirus
(ClamAV) [11] scanner as the foundation for our kernel-
based virus scanner. ClamAV consists of a core scanner
library as well as various command line programs. We
modiﬁed the core ClamAV scanner library to run inside
the kernel, and call this scanner Oyster.
ClamAV Virus Database As of December 2003,
ClamAV’s database had 19,807 viruses. Although this
number is smaller than those of major commercial
virus scanners, which detect anywhere from 65,000 to
120,000 viruses, the number of viruses recognized by
ClamAV has been steadily growing.
In the last six
months of 2003, over 12,000 new virus signatures were
added to the database.
The ClamAV virus deﬁnition database contains two
types of virus patterns: (1) basic patterns that are a sim-
ple sequence of characters that identify a virus, and (2)
multi-part patterns that consist of more than one basic
sub-pattern. To match a virus, all sub-patterns of a multi-
part pattern must match in order. ClamAV virus pat-
terns can also contain wildcard characters. The com-
bination of multi-part patterns and wildcard characters
allows ClamAV to detect polymorphic viruses. Poly-
morphic viruses are more difﬁcult to detect than non-
polymorphic viruses, because each instance of a virus
has a different footprint from other instances.
Basic patterns tend to be longer than multi-part pat-
terns. Multi-part patterns have multiple pattern to iden-
tify a complete virus. The pattern lengths in the database
vary from two bytes (for sub-parts of a multi-part pat-
tern) to over 2KB long.
ClamAV Virus Detection Algorithm ClamAV uses
a variation of the Aho-Corasick pattern-matching al-
gorithm [1], which is well suited for applications that
match a large number of patterns against input text. The
algorithm operates in two steps: (1) a pattern matching
ﬁnite state machine is constructed, and (2) the text string
is used as the input to the automaton.
Depth 3 Depth 4
Depth 0
Depth 1
Depth 2
b
0
a
b
a
2
1
a
b
3
a
a
4
6
5
b
b
Figure 2: An automaton for keywords “abaa” and “abba”
over the alphabet fa,bg. Success transitions are shown with
solid lines. Final states are shown with bold circles. Failure
transition are shown with dotted lines.
To construct a pattern matching automaton, the Aho-
Corasick algorithm ﬁrst builds a ﬁnite state machine for
all of the patterns. Figure 2 shows the automaton for the
keywords “abaa” and “abba” over the alphabet fa; bg.
State 0 denotes the starting state of the automaton, and
the ﬁnal states are shown with bold circles. First, the pat-
tern “abaa” is added, creating states 0–4. Thereafter, the
pattern “abba” is added, creating states 5–6. Only two
additional states were required since both patterns share
the same preﬁx “ab.” Transitions over the characters of
the patterns are called success transitions.
Each state in the pattern-matching automaton must
have transitions for all letters in the alphabet. If a suc-
cess transition over a letter does not exist for some state,
then a failure transition is created. To set up a failure
transition, all states are processed in depth order; i.e., we
process states of depth n before states of depth n + 1. A
state’s depth s is deﬁned as the length of the shortest path
from the start state 0 to s. Any failure transition for start
state 0 points back to state 0. Suppose that after match-
ing some preﬁx P = [1::k] of length k the automaton is
in state s. Also, suppose that there is no success transi-
tion for some character c starting from state s. A failure
transition for the character c is determined by following
transitions for preﬁx P [2::k]c starting from state 0.
Failure transitions are set up as follows. First, a miss-
ing transition for “b” from state 0 is set up to point back