以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[1] Z. Ma, H. Wang, Y. Guo, and X. Chen, "LibRadar: 快速且准确的Android应用程序第三方库检测," in *2016年第38届国际软件工程会议（演示部分）论文集*, ICSE '16 Companion Volume, 2016, pp. 653-656.

[2] L. Li, T. F. Bissyandé, J. Klein, and Y. Le Traon, "对Android应用中常用库使用的调查," in *第23届IEEE国际软件分析、演化与重构会议论文集*, SANER '16, 2016.

[3] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang, B. Ma, A. Wang, Y. Zhang, and W. Zhou, "追踪魔鬼的脚步：跨平台分析Android和iOS上潜在有害的库," in *第37届IEEE安全与隐私研讨会论文集*, S&P '16, 2016.

[4] “smali: smali和baksmali,” https://github.com/JesusFreke/smali.

[5] “OpenStack,” https://www.openstack.org/.

[6] “Java教程：什么是包？” https://docs.oracle.com/javase/tutorial/java/concepts/package.html.

[7] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou, "快速、可扩展的'搭便车'移动应用检测," in *第三届ACM数据与应用安全与隐私会议论文集*, CODASPY '13, 2013, pp. 185-196.

[8] J. Crussell, C. Gibler, and H. Chen, "克隆攻击：检测Android市场上的克隆应用," in *第17届欧洲计算机安全研究研讨会论文集*, ESORICS '12, 2012, pp. 37-54.

[9] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu, "ViewDroid: 面向混淆抵抗的移动应用重新打包检测," in *2014年ACM无线和移动网络的安全与隐私会议论文集*, WiSec '14, 2014, pp. 25-36.

[10] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou, "SmartDroid: 一个自动揭示Android应用UI触发条件的系统," in *第二届ACM智能手机和移动设备安全与隐私研讨会论文集*, SPSM '12, 2012, pp. 93-104.

[11] “Apktool,” http://ibotpeaches.github.io/Apktool/, 2016.

[12] L. Adesnos, “Androguard,” 2016, 访问日期: 2016-03-21. [在线]. 可用: https://github.com/androguard/androguard

[13] Trendmicro, “关于Moplus SDK和Wormhole漏洞的事实澄清,” [在线]. 可用: http://blog.trendmicro.com/trendlabs-security-intelligence/setting-the-record-straight-on-moplus-sdk-and-the-wormhole-vulnerability/

[14] Google, “Android安全白皮书,” [在线]. 可用: https://static.googleusercontent.com/media/enterprise.google.com/en//android/files/android-for-work-security-white-paper.pdf

[15] Android, “如何防止有害应用进入Google Play并保护您的Android设备,” [在线]. 可用: https://static.googleusercontent.com/media/source.android.com/en//security/reports/Android_WhitePaper_Final_02092016.pdf

[16] “ProGuard,” https://www.guardsquare.com/proguard.

[17] “ProGuard手册—使用,” https://www.guardsquare.com/en/products/proguard/manual/usage#obfuscationoptions.

[18] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, "SMV-HUNTER: 大规模自动化检测Android应用中的SSL/TLS中间人漏洞," in *第21届年度网络与分布式系统安全研讨会论文集*, NDSS '14, 2014.

[19] D. Wu and R. K. C. Chang, "分析Android浏览器应用中的file://漏洞," CoRR, vol. abs/1404.4553, 2014. [在线]. 可用: http://arxiv.org/abs/1404.4553

[20] W. Yang, Y. Zhang, J. Li, J. Shu, B. Li, W. Hu, and D. Gu, "AppSpear: 字节码解密和DEX重组以应对打包的Android恶意软件," in *第18届国际攻击、入侵和防御研讨会论文集*, RAID '15, 2015, pp. 359-381.

[21] Y. Zhang, X. Luo, and H. Yin, "DexHunter: 提取隐藏在打包的Android应用中的代码," in *第25届欧洲计算机安全研究研讨会论文集*, ESORICS '15, Springer, 2015, pp. 293-311.

[22] L. Xue, X. Luo, L. Yu, S. Wang, and D. Wu, "自适应解包Android应用," in *第39届国际软件工程会议论文集*, ICSE '17, 2017, pp. 358-369.

[23] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, "BYTEWEIGHT: 学习识别二进制代码中的函数," in *第23届USENIX安全研讨会论文集*, USENIX Security '14, 2014, pp. 845-860.

[24] E. C. R. Shin, D. Song, and R. Moazzezi, "使用神经网络识别二进制文件中的函数," in *第24届USENIX安全研讨会论文集*, USENIX Security '15, 2015, pp. 611-626.

[25] S. Wang, P. Wang, and D. Wu, "基于语义的机器学习用于二进制代码中的函数识别," in *2017年IEEE国际软件维护与演化会议论文集*, ICSME '17, 2017, pp. 388-398.

[26] C. Foket, B. D. Sutter, and K. D. Bosschere, "将Java类型混淆推向极限," *IEEE Transactions on Dependable and Secure Computing*, vol. 11, no. 6, pp. 553-567, Nov 2014.

[27] “Dexguard,” https://www.guardsquare.com/dexguard.

[28] “Dash-O,” https://www.preemptive.com/products/dasho/overview.

[29] “Dexprotector,” https://dexprotector.com/.

[30] S. K. Udupa, S. K. Debray, and M. Madou, "去混淆：反向工程混淆代码," in *第12届工作逆向工程会议论文集*, WCRE '05, 2005.

[31] D. Low, "Java控制流混淆," 博士学位论文, 奥克兰大学, 1998.

[32] T. Kamiya, S. Kusumoto, and K. Inoue, "CCFinder: 一种多语言令牌基础的大规模源代码克隆检测系统," *IEEE Trans. Softw. Eng.*, vol. 28, no. 7, pp. 654-670, Jul. 2002.

[33] J. Ming, D. Xu, and D. Wu, "Memoized语义基础的二进制差异分析及其在恶意软件谱系推断中的应用," in *第30届IFIP SEC 2015国际信息安全与隐私会议论文集*, IFIP SEC 2015, Springer, May 2015.

[34] Z. Tian, T. Liu, Q. Zheng, F. Tong, D. Wu, S. Zhu, and K. Chen, "软件剽窃检测: 一项综述," *Journal of Cyber Security*, vol. 1, no. 3, pp. 52-76, 2016.

[35] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, "基于语义的混淆抵抗二进制代码相似性比较及其在软件和算法剽窃检测中的应用," *IEEE Transactions on Software Engineering*, 2017.

[36] J. Ming, D. Xu, and D. Wu, "MalwareHunt: 通过归一化基本块备忘录加速语义基础的恶意软件差异分析," *Journal of Computer Virology and Hacking Techniques*, vol. 13, no. 3, pp. 167-178, Aug 2017. [在线]. 可用: https://doi.org/10.1007/s11416-016-0279-x

[37] J. Ming, D. Xu, Y. Jiang, and D. Wu, "BinSim: 基于系统调用等效性的跟踪切片段语义二进制差异分析," in *第26届USENIX安全研讨会论文集* (USENIX Security 17). Vancouver, BC: USENIX Association, 2017, pp. 253-270. [在线]. 可用: https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ming

[38] T. Book, A. Pridgen, and D. S. Wallach, "Android广告库权限的纵向分析," CoRR, vol. abs/1303.0857, 2013.

[39] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, "移动应用内广告的不安全暴露分析," in *第五届ACM无线和移动网络安全会议论文集*, WiSec '12, 2012, pp. 101-112.

[40] A. Narayanan, L. Chen, and C. K. Chan, "Addetect: 使用语义分析自动检测Android广告库," in *第九届IEEE智能传感器、传感器网络和信息处理国际会议论文集*, ISSNIP '14, 2014.

[41] C. Gibler, R. Stevens, J. Crussell, H. Chen, H. Zang, and H. Choi, "Adrob: 检查Android应用抄袭的现状和影响," in *第十一届年度国际移动系统、应用和服务会议论文集*, MobiSys '13, 2013, pp. 431-444.

[42] Z. Li, S. Lu, S. Myagmar, and Y. Zhou, "CP-Miner: 一种查找操作系统代码中复制粘贴及相关错误的工具," in *第六届操作系统设计与实现研讨会论文集*, OSDI '04, 2004.

[43] L. Jiang, G. Misherghi, Z. Su, and S. Glondu, "DECKARD: 可扩展且准确的树基代码克隆检测," in *第二十九届国际软件工程会议论文集*, ICSE '07, 2007, pp. 96-105.

[44] R. Komondoor and S. Horwitz, "使用切片技术识别源代码中的重复," in *第八届静态分析国际研讨会论文集*, SAS '01, 2001, pp. 40-56.

[45] B. S. Baker, "参数化模式匹配理论：算法与应用," in *第二十五届ACM理论计算研讨会论文集*, STOC '93, 1993, pp. 71-80.

[46] Y.-C. Jhi, X. Wang, X. Jia, S. Zhu, P. Liu, and D. Wu, "基于值的程序特征及其在软件剽窃检测中的应用," in *第三十三届国际软件工程会议论文集*, ICSE '11, ACM, 2011, pp. 756-765.

[47] Y.-C. Jhi, X. Jia, X. Wang, S. Zhu, P. Liu, and D. Wu, "使用运行时值的程序特征及其在软件剽窃检测中的应用," *IEEE Transactions on Software Engineering*, vol. 41, no. 9, pp. 925-943, 2015.

[48] F. Zhang, Y.-C. Jhi, D. Wu, P. Liu, and S. Zhu, "算法剽窃检测的第一步," in *第二十一届国际软件测试与分析研讨会论文集*, ISSTA '12, 2012.

[49] F. Zhang, D. Wu, P. Liu, and S. Zhu, "基于程序逻辑的软件剽窃检测," in *第二十五届IEEE国际软件可靠性工程研讨会论文集*, ISSRE '14, 2014, pp. 66-77.

[50] J. Ming, F. Zhang, D. Wu, P. Liu, and S. Zhu, "基于偏差的混淆抵抗程序等价检查及其在软件剽窃检测中的应用," *IEEE Transactions on Reliability*, vol. 65, no. 4, pp. 1647-1664, Dec 2016.

[51] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, "基于语义的混淆抵抗二进制代码相似性比较及其在软件剽窃检测中的应用," in *第二十二届ACM SIGSOFT国际软件工程基础研讨会论文集*, FSE '14, 2014, pp. 389-400.

[52] ——, "在大型软件系统中查找重复和近似重复," in *第二届逆向工程工作研讨会论文集*, WCRE '95, 1995.

[53] T. Kamiya, S. Kusumoto, and K. Inoue, "CCFinder: 一种多语言令牌基础的大规模源代码克隆检测系统," *IEEE Transactions on Software Engineering*, vol. 28, no. 7, pp. 654-670, Jul 2002.

[54] A. Aiken, "MOSS: 一种检测软件剽窃的系统," http://theory.stanford.edu/~aiken/moss/, 2013.

[55] W. Yang, "识别两个程序之间的语法差异," *Softw. Pract. Exper.*, vol. 21, no. 7, pp. 739-755, Jun. 1991.

[56] I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and L. Bier, "使用抽象语法树进行克隆检测," in *第十六届国际软件维护会议论文集*, ICSM '98, 1998, pp. 368-377.

[57] C. Liu, C. Chen, J. Han, and P. S. Yu, "GPLAG: 通过程序依赖图分析检测软件剽窃," in *第十二届ACM SIGKDD知识发现与数据挖掘国际会议论文集*, KDD '06, 2006, pp. 872-881.

[58] M. Gabel, L. Jiang, and Z. Su, "可扩展的语义克隆检测," in *第三十届国际软件工程会议论文集*, ICSE '08, ACM, 2008, pp. 321-330.

[59] C. McMillan, M. Grechanik, and D. Poshyvanyk, "检测类似的软件应用," in *第三十四届国际软件工程会议论文集*, ICSE '12, 2012, pp. 364-374.

[60] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, "在二进制可执行文件中跨架构搜索漏洞," in *2015年IEEE安全与隐私研讨会论文集*, S&P '15, 2015, pp. 709-724.

[61] J. Davies, D. M. German, M. W. Godfrey, and A. Hindle, "软件伯蒂永测量法：确定软件开发工件的来源," *Empirical Software Engineering*, vol. 18, no. 6, pp. 1195-1237, 2013.

---

### 附录

#### A. 从次要第三方市场收集的应用

表XVI列出了表I中剩余62,216个应用的详细来源。

| 市场 | 应用数量 | URL |
| --- | --- | --- |
| zhuole | 12930 | www.zhuole.com |
| appsapk | 2848 | www.appsapk.com |
| padh | 2461 | www.padh.net |
| a67 | 3520 | www.a67.com |
| eoemarket | 4178 | www.eoemarket.com |
| Neteaseapp | 1935 | m.163.com |
| anzhuo.com | 3196 | www.anzhuo.com |
| anuran | 395 | soft.anruan.com |
| xiazaiba | 1384 | www.xiazaiba.com |
| 2265 | 561 | www.2265.com |
| Feifan | 5270 | android.crsky.com |
| Mozhuo | 3764 | apping.cc |
| mm10086 | 3056 | mm.10086.cn |
| d.cn | 11536 | android.d.cn |
| android155 | 2271 | android.155.cn |
| xunzai | 454 | www.xunzai.com |
| mz6 | 1385 | www.mz6.net |
| zhuannet | 107 | zhuannet.com |
| PChome | 965 | download.pchome.net/android |

#### B. 手动库分析细节

在手动分析由加速版SmartDroid检测到的前200个易受攻击的库时，我们采用了定性方法来回答有关所检查库的身份和功能的研究问题。所谓定性方法，是指参与者基于非结构化信息，并结合自己的编程经验和理解做出决策。没有设计定量指标来指导分析。

确定库功能的方法可以总结如下：

1. 参与者首先尝试通过包名推断库的身份和功能。注意，某些混淆的库只混淆类名和方法名，但不混淆包名，这使我们仍能进行推断。例如，很容易推断出`/com/baidu/location/`是中国互联网巨头百度的一个位置库。

2. 同样地，如果库混淆了包名但未混淆方法名，我们可能能够推断其身份和功能。

3. 如果前两步失败，我们会在库的代码中提取“有趣的”字符串字面量，并将其作为关键词进行Google搜索。这里没有标准的判断标准，通常目标包括用于日志记录和调试的硬编码字符串字面量。大多数情况下，我们可以在搜索引擎中找到相关信息，例如介绍包作者及其产品的网站，从中我们可以获取所需的库信息。

4. 很少的情况下，我们无法从搜索引擎中检索到有用的信息。在这种情况下，参与者必须查看库的反编译代码。通常，功能是通过查看代码中调用的Android框架API来推断的。

在交叉验证过程中，在20个案例中只有一个冲突。原因是其中一个参与者仅通过查看包名就匆忙得出结论。该库为`/org/gg/music`。参与者认为这是一个由名为“gg”的方开发的未混淆音乐库，而没有在网上搜索其详细信息。第二个参与者则进一步分析了转储的字符串字面量，未能识别该库。这些字符串表明该库是`/com/google/ads`的一个变体。经过讨论后，第一个参与者改进了他的分析方法，以避免在后续分析中出现类似错误。

---

希望这些优化后的文本能更好地满足您的需求。如果有任何进一步的修改或补充，请告诉我。