rate two-phase approach to Android app clone detection,” in Proceedings
of the 2015 International Symposium on Software Testing and Analysis,
ser. ISSTA ’15, 2015, pp. 71–82.
[8] Z. Ma, H. Wang, Y. Guo, and X. Chen, “LibRadar: fast and accurate
detection of third-party libraries in Android apps,” in Proceedings of the
38th International Conference on Software Engineering (Demo Track),
ser. ICSE ’16 Companion Volume, 2016, pp. 653–656.
[9] L. Li, T. F. Bissyand´e, J. Klein, and Y. Le Traon, “An investigation into
the use of common libraries in Android apps,” in Proceedings of the
23rd IEEE International Conference on Software Analysis, Evolution,
and Reengineering, ser. SANER ’16, 2016.
[10] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang, B. Ma,
A. Wang, Y. Zhang, and W. Zhou, “Following devils footprints: Cross-
platform analysis of potentially harmful libraries on Android and iOS,”
in Proceedings of the 37th IEEE Symposium on Security and Privacy,
ser. S&P ’16, 2016.
[11] “smali: smali and baksmali,” https://github.com/JesusFreke/smali.
[12] “Openstack,” https://www.openstack.org/.
[13] “The Java tutorial: What is a package?” https://docs.oracle.com/javase/
tutorial/java/concepts/package.html.
[14] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou, “Fast, scalable
detection of “piggybacked” mobile applications,” in Proceedings of the
3rd ACM Conference on Data and Application Security and Privacy,
ser. CODASPY ’13, 2013, pp. 185–196.
[15] J. Crussell, C. Gibler, and H. Chen, “Attack of the clones: Detecting
cloned applications on Android markets,” in Proceedings of the 17th
European Symposium on Research in Computer Security, ser. ESORICS
’12, 2012, pp. 37–54.
[16] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu, “ViewDroid: To-
wards obfuscation-resilient mobile application repackaging detection,”
in Proceedings of the 2014 ACM Conference on Security and Privacy
in Wireless and Mobile Networks, ser. WiSec ’14, 2014, pp. 25–36.
[17] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou, “Smart-
droid: an automatic system for revealing ui-based trigger conditions in
Android applications,” in Proceedings of the 2nd ACM Workshop on
Security and Privacy in Smartphones and Mobile Devices, ser. SPSM
’12, 2012, pp. 93–104.
[18] “Apktool,” http://ibotpeaches.github.io/Apktool/, 2016.
[19] L. Adesnos, “Androguard,” 2016, accessed: 2016-03-21.
[Online].
Available: https://github.com/androguard/androguard
[20] Trendmicro, “Setting the record straight on Moplus SDK and
http://blog.trendmicro.com/trendlabs-
the Wormhole
security-intelligence/setting-the-record-straight-on-moplus-sdk-and-
the-wormhole-vulnerability/.
vulnerability,”
[21] Google, “Android security white paper,” https://static.googleusercontent.
com/media/enterprise.google.com/en//android/ﬁles/android-for-work-
security-white-paper.pdf.
[22] Android, “How we keep harmful apps out of Google Play and keep
your Android device safe,” https://static.googleusercontent.com/media/
source.android.com/en//security/reports/Android WhitePaper Final
02092016.pdf.
[23] “ProGuard,” https://www.guardsquare.com/proguard.
[24] “ProGuard manual — usage,”
https://www.guardsquare.com/en/
products/proguard/manual/usage#obfuscationoptions.
[25] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “SMV-
HUNTER: Large scale, automated detection of SSL/TLS man-in-the-
middle vulnerabilities in Android apps,” in In Proceedings of the 21st
Annual Network and Distributed System Security Symposium, ser. NDSS
’14, 2014.
[26] D. Wu and R. K. C. Chang, “Analyzing android browser apps for ﬁle:
// vulnerabilities,” CoRR, vol. abs/1404.4553, 2014. [Online]. Available:
http://arxiv.org/abs/1404.4553
20
[27] W. Yang, Y. Zhang, J. Li, J. Shu, B. Li, W. Hu, and D. Gu, “AppSpear:
Bytecode decrypting and DEX reassembling for packed Android mal-
ware,” in Proceedings of the 18th International Symposium on Research
in Attacks, Intrusions, and Defenses - Volume 9404, ser. RAID ’15, 2015,
pp. 359–381.
[28] Y. Zhang, X. Luo, and H. Yin, “DexHunter: toward extracting hidden
code from packed Android applications,” in Proceedings of the 25th
European Symposium on Research in Computer Security, ser. ESORICS
’15. Springer, 2015, pp. 293–311.
[29] L. Xue, X. Luo, L. Yu, S. Wang, and D. Wu, “Adaptive unpacking of
Android apps,” in Proceedings of the 39th International Conference on
Software Engineering, ser. ICSE ’17, 2017, pp. 358–369.
[30] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, “BYTEWEIGHT:
Learning to recognize functions in binary code,” in Proceedings of the
23rd USENIX Security Symposium, ser. USENIX Security ’14, 2014,
pp. 845–860.
[31] E. C. R. Shin, D. Song, and R. Moazzezi, “Recognizing functions in
binaries with neural networks,” in Proceedings of the 24th USENIX
Security Symposium, ser. USENIX Security ’15, 2015, pp. 611–626.
[32] S. Wang, P. Wang, and D. Wu, “Semantics-aware machine learning for
function recognition in binary code,” in Proceedings of the 2017 IEEE
International Conference on Software Maintenance and Evolution, ser.
ICSME ’17, 2017, pp. 388–398.
[33] C. Foket, B. D. Sutter, and K. D. Bosschere, “Pushing java type
obfuscation to the limit,” IEEE Transactions on Dependable and Secure
Computing, vol. 11, no. 6, pp. 553–567, Nov 2014.
[34] “Dexguard,” https://www.guardsquare.com/dexguard.
[35] “Dash-O,” https://www.preemptive.com/products/dasho/overview.
[36] “Dexprotector,” https://dexprotector.com/.
[37] S. K. Udupa, S. K. Debray, and M. Madou, “Deobfuscation: reverse
the 12th Working
engineering obfuscated code,” in Proccedings of
Conference on Reverse Engineering, ser. WCRE ’05, 2005.
[38] D. Low, “Java control ﬂow obfuscation,” Ph.D. dissertation, The Uni-
versity of Auckland, 1998.
[39] T. Kamiya, S. Kusumoto, and K. Inoue, “CCFinder: A multilinguistic
token-based code clone detection system for large scale source code,”
IEEE Trans. Softw. Eng., vol. 28, no. 7, pp. 654–670, Jul. 2002.
[50] J. Ming, D. Xu, and D. Wu, “Memoized semantics-based binary difﬁng
with application to malware lineage inference,” in Proceedings of the
30th IFIP SEC 2015 International Information Security and Privacy
Conference, ser. IFIP SEC 2015. Springer, May 2015.
[51] Z. Tian, T. Liu, Q. Zheng, F. Tong, D. Wu, S. Zhu, and K. Chen,
“Software plagiarism detection: A survey,” Journal of Cyber Security,
vol. 1, no. 3, pp. 52–76, 2016.
[52] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with applications
to software and algorithm plagiarism detection,” IEEE Transactions on
Software Engineering, 2017.
[53] J. Ming, D. Xu, and D. Wu, “MalwareHunt: Semantics-based malware
difﬁng speedup by normalized basic block memoization,” Journal of
Computer Virology and Hacking Techniques, vol. 13, no. 3, pp. 167–
178, Aug 2017. [Online]. Available: https://doi.org/10.1007/s11416-
016-0279-x
[54] J. Ming, D. Xu, Y.
Jiang,
and D. Wu,
“BinSim: Trace-
sliced segment
based semantic binary difﬁng via system call
equivalence
Symposium
(USENIX Security 17). Vancouver, BC: USENIX Association, 2017,
pp. 253–270. [Online]. Available: https://www.usenix.org/conference/
usenixsecurity17/technical-sessions/presentation/ming
26th USENIX Security
checking,”
in
[55] T. Book, A. Pridgen, and D. S. Wallach, “Longitudinal analysis of
Android ad library permissions,” CoRR, vol. abs/1303.0857, 2013.
[56] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in Proceedings of the 5th
ACM Conference on Security and Privacy in Wireless and Mobile
Networks, ser. WiSec ’12, 2012, pp. 101–112.
[57] A. Narayanan, L. Chen, and C. K. Chan, “Addetect: Automated detection
of Android ad libraries using semantic analysis,” in Proceedings of
the 9th IEEE International Conference on Intelligent Sensors, Sensor
Networks and Information Processing, ser. ISSNIP ’14, 2014.
[58] C. Gibler, R. Stevens, J. Crussell, H. Chen, H. Zang, and H. Choi,
“Adrob: examining the landscape and impact of Android application
plagiarism,” in Proceedings of the 11th Annual International Conference
on Mobile Systems, Applications, and Services, ser. MobiSys ’13, 2013,
pp. 431–444.
[40] Z. Li, S. Lu, S. Myagmar, and Y. Zhou, “CP-Miner: A tool for ﬁnding
copy-paste and related bugs in operating system code,” in Proceedings
of the 6th Conference on Symposium on Opearting Systems Design and
Implementation, ser. OSDI’04, 2004.
[59] M. Linares-V´asquez, A. Holtzhauer, C. Bernal-C´ardenas, and D. Poshy-
vanyk, “Revisiting Android reuse studies in the context of code obfusca-
tion and library usages,” in Proceedings of the 11th Working Conference
on Mining Software Repositories. ACM, 2014, pp. 242–251.
[41] L. Jiang, G. Misherghi, Z. Su, and S. Glondu, “DECKARD: Scalable
and accurate tree-based detection of code clones,” in Proceedings of the
29th International Conference on Software Engineering, ser. ICSE ’07,
2007, pp. 96–105.
[60] M. Linares-V´asquez, A. Holtzhauer, and D. Poshyvanyk, “On auto-
matically detecting similar Android apps,” in Program Comprehension
(ICPC), 2016 IEEE 24th International Conference on.
IEEE, 2016, pp.
1–10.
[42] R. Komondoor and S. Horwitz, “Using slicing to identify duplication
in source code,” in Proceedings of the 8th International Symposium on
Static Analysis, ser. SAS ’01, 2001, pp. 40–56.
[61] B. S. Baker, “A theory of parameterized pattern matching: Algorithms
and applications,” in Proceedings of the 25th Annual ACM Symposium
on Theory of Computing, ser. STOC ’93, 1993, pp. 71–80.
[43] Y.-C. Jhi, X. Wang, X. Jia, S. Zhu, P. Liu, and D. Wu, “Value-based
program characterization and its application to software plagiarism
detection,” in Proceedings of
the 33rd International Conference on
Software Engineering, ser. ICSE ’11. New York, NY, USA: ACM,
2011, pp. 756–765.
[44] Y.-C. Jhi, X. Jia, X. Wang, S. Zhu, P. Liu, and D. Wu, “Program
characterization using runtime values and its application to software
plagiarism detection,” IEEE Transactions on Software Engineering,
vol. 41, no. 9, pp. 925–943, 2015.
[45] F. Zhang, Y.-C. Jhi, D. Wu, P. Liu, and S. Zhu, “A ﬁrst step towards
algorithm plagiarism detection,” in Proceedings of the 21st International
Symposium on Software Testing and Analysis, ser. ISSTA ’12, Jul. 2012.
[46] F. Zhang, D. Wu, P. Liu, and S. Zhu, “Program logic based software
plagiarism detection,” in Proceedings of the 25th IEEE International
Symposium on Software Reliability Engineering, ser. ISSRE ’14, Nov.
2014, pp. 66–77.
[47] J. Ming, F. Zhang, D. Wu, P. Liu, and S. Zhu, “Deviation-based
obfuscation-resilient program equivalence checking with application
to software plagiarism detection,” IEEE Transactions on Reliability,
vol. 65, no. 4, pp. 1647–1664, Dec 2016.
[48] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with applica-
tions to software plagiarism detection,” in Proceedings of the 22Nd
ACM SIGSOFT International Symposium on Foundations of Software
Engineering, ser. FSE ’14, 2014, pp. 389–400.
[62] ——, “On ﬁnding duplication and near-duplication in large software
systems,” in Proceedings of the 2nd Working Conference on Reverse
Engineering, ser. WCRE ’95, 1995.
[63] T. Kamiya, S. Kusumoto, and K. Inoue, “CCFinder: a multilinguistic
token-based code clone detection system for large scale source code,”
IEEE Transactions on Software Engineering, vol. 28, no. 7, pp. 654–670,
Jul 2002.
[64] A. Aiken, “MOSS: A system for detecting software plagiarism,” http:
//theory.stanford.edu/œaiken/moss/, 2013.
[65] W. Yang, “Identifying syntactic differences between two programs,”
Softw. Pract. Exper., vol. 21, no. 7, pp. 739–755, Jun. 1991.
[66] I. D. Baxter, A. Yahin, L. Moura, M. Sant’Anna, and L. Bier, “Clone
detection using abstract syntax trees,” in Proceedings of
the 16th
International Conference on Software Maintenance, ser. ICSM ’98,
1998, pp. 368–377.
[67] C. Liu, C. Chen, J. Han, and P. S. Yu, “GPLAG: Detection of software
plagiarism by program dependence graph analysis,” in Proceedings
of the 12th ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining, ser. KDD ’06, 2006, pp. 872–881.
[68] M. Gabel, L. Jiang, and Z. Su, “Scalable detection of semantic clones,”
in Proceedings of the 30th International Conference on Software Engi-
neering, ser. ICSE ’08. ACM, 2008, pp. 321–330.
[69] C. McMillan, M. Grechanik, and D. Poshyvanyk, “Detecting similar
software applications,” in Proceedings of the 34th International Confer-
ence on Software Engineering, ser. ICSE ’12, 2012, pp. 364–374.
[49] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, “Cross-
architecture bug search in binary executables,” in Proceedings of the
2015 IEEE Symposium on Security and Privacy, ser. S&P ’15, 2015,
pp. 709–724.
[70] J. Davies, D. M. German, M. W. Godfrey, and A. Hindle, “Software
bertillonage: Determining the provenance of software development arti-
facts,” Empirical Software Engineering, vol. 18, no. 6, pp. 1195–1237,
2013.
21
criteria for deciding what strings are “interesting.” Typical
targets include hard-coded string literals for logging and
debugging, as mentioned in the previous paragraph. In
most cases we can get a hit in the search engine, e.g., a
website introducing the package writer and its products,
from which we can learn the information we need for
that library.
4) Rarely, we cannot retrieve useful information from the
search engine. In such cases, the participants have to
look at the decompiled code of the library. Typically,
the functionality was inferred by looking at the Android
Framework APIs called in the code.
During the cross validation process, there was one single
conﬂict between the two participants out of 20 cases. The
reason is that one of the participants drew the conclusion too
eagerly by just looking at the package names. The library in
this case is /org/gg/music. The participant concluded that
the library is an unobfuscated music library developed by a
party named “gg” without searching the Internet for its detailed
information. The second participant, however, further analyzed
the dumped string literals after failing to identify this library.
The strings suggested that this library is a mutation of /
com/google/ads. After the discussion, the ﬁrst participant
reﬁned his analysis method to avoid similar mistakes in the
subsequent analysis.
Wei Zou received his BSc in Software from Nanjing
University, PRC, his MSc in Software from the In-
stitute of Computing Technology, Chinese Academy
of Sciences(CAS). He was with Peking University
(as professor). He is currently a professor with
the University of CAS and with the Institute of
Information Engineering, CAS. His main research
interest is software security.
APPENDIX
A. Apps Collected from Minor Third-Party Markets
Table XVI lists the detailed breakdown of the origins of the
remaining 62,216 apps in Table I.
Market
# of apps
URL
zhuole
appsapk
padh
a67
eoemarket
Neteaseapp
anzhuo.com
anuran
xiazaiba
2265
Feifan
Mozhuo
mm10086
d.cn
android155
xunzai
mz6
zhuannet
PChome
12930
2848
2461
3520
4178
1935
3196
395
1384
561
5270
3764
3056
11536
2271
454
1385
107
965
Sjapk.com
appsapk.com
padh.net
a67.com
www.eoemarket.com
m.163.com
www.anzhuo.com
soft.anruan.com
www.xiazaiba.com
www.2265.com
android.crsky.com
apping.cc
mm.10086.cn
android.d.cn
android.155.cn
www.xunzai.com
www.mz6.net
zhuannet.com
download.pchome.net/android
TABLE XVI: Origins of apps collected from minor third-party
markets
B. Manual Library Analysis Details
When manually analyzing the top 200 vulnerable libraries
detected by the accelerated SmartDroid, we employed qual-
itative methods to answer the research questions about the
identities and functionalities of the inspected libraries. By
qualitative methods, we meant that the participants made deci-
sions based on unstructured information, along with their own
programming experience and understanding. No quantitative
measures were designed to guide the analysis.
The method for determining a library’s functionality can be
summarized as follows.
1) The participants ﬁrst try to infer library identities and
functionalities through package names. Note that some
obfuscated libraries only obfuscate their class and method
names but not package names, which allows us to still
make the inference. For example, it is straightforward
to infer that /com/baidu/location/ is a location
library from the Chinese Internet giant Baidu.
2) Similarly, if a library obfuscates its package names but
not method names, we may be able to infer its identity
and functionality.
3) If the ﬁrst
two steps failed, we harvest “interesting”
string literals in the code of a library and use them
as keywords for Google search. There are no standard
23