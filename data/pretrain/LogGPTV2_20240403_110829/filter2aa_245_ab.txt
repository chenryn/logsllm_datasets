        cchBlock = reader.read(ach, of, cch - of);
        if (cchBlock  clazz, 
HttpInputMessage inputMessage) throws IOException {
long contentLength = 
inputMessage.getHeaders().getContentLength();
ByteArrayOutputStream bos =
new ByteArrayOutputStream(contentLength >= 0 ? (int) 
contentLength : StreamUtils.BUFFER_SIZE);
StreamUtils.copy(inputMessage.getBody(), bos);
return bos.toByteArray();
}
public ByteArrayOutputStream(int size) {
    if (size  receiveHeartBeat(String app,
                                  @RequestParam(value = "app_type", 
required = false, defaultValue = "0")
                                      Integer appType, Long 
version, String v, String hostname, String ip,
                                  Integer port) {
    if (StringUtil.isBlank(app) || app.length() > 256) {
        return Result.ofFail(-1, "invalid appName");
    }
    if (StringUtil.isBlank(ip) || ip.length() > 128) {
        return Result.ofFail(-1, "invalid ip: " + ip);
    }
    if (port == null || port  256) {
        return Result.ofFail(-1, "hostname too long");
    }
    if (port == -1) {
        logger.warn("Receive heartbeat from " + ip + " but port not 
set yet");
        return Result.ofFail(-1, "your port not set yet");
    }
    String sentinelVersion = StringUtil.isBlank(v) ? "unknown" : v;
    version = version == null ? System.currentTimeMillis() : 
version;
    try {
        MachineInfo machineInfo = new MachineInfo();
        machineInfo.setApp(app);
        machineInfo.setAppType(appType);
        machineInfo.setHostname(hostname);
        machineInfo.setIp(ip);
        machineInfo.setPort(port);
        machineInfo.setHeartbeatVersion(version);
        machineInfo.setLastHeartbeat(System.currentTimeMillis());
        machineInfo.setVersion(sentinelVersion);
        appManagement.addMachine(machineInfo);
        return Result.ofSuccessMsg("success");
    } catch (Exception e) {
        logger.error("Receive heartbeat error", e);
        return Result.ofFail(-1, e.getMessage());
    }
}
->
com.alibaba.csp.sentinel.dashboard.discovery.AppManagemen
t#addMachine
@Override
public long addMachine(MachineInfo machineInfo) {
    return machineDiscovery.addMachine(machineInfo);
}
->
com.alibaba.csp.sentinel.dashboard.discovery.SimpleMachine
Discovery#addMachine
private final ConcurrentMap apps = new 
ConcurrentHashMap<>();
@Override
public long addMachine(MachineInfo machineInfo) {
    AssertUtil.notNull(machineInfo, "machineInfo cannot be null");
    AppInfo appInfo = apps.computeIfAbsent(machineInfo.getApp(), o 
-> new AppInfo(machineInfo.getApp(), machineInfo.getAppType()));
    appInfo.addMachine(machineInfo);
    return 1;
}
通过跟踪上述代码，可以看到，⽤户提交的数据，径直得往内存中存储。因为这个
http endpoint⽀持GET、POST请求，所以当我们在发送http请求中使⽤POST⽅
式，并且在body中添加⾮常⼤的数据，⽐如app参数，放⼀个1MBytes或者
10MBytes，亦或者更⼤的数据，那么，将会导致服务端内存耗尽，⽽产⽣
java.lang.OutOfMemoryError错误，实现Memory DoS。
0x05 注意之处
有的读者在测试数组初始化Memory DoS的时候，发现虽然可以使系统产⽣
java.lang.OutOfMemoryError错误，但是系统并没有因此⽽崩溃，实现完整的
Memory DoS，这是什么原因呢？
且看下⾯这三个例⼦：
完整Memory DoS
private byte[] bytes;
public ? service(int size) {
    bytes = new byte[size];
    //do something
}
⼀定时间内的Memory DoS
public ? service(int size) {
    byte[] bytes = new byte[size];
    //do 5s something
}
短暂的Memory DoS
public ? service(int size) {
    byte[] bytes = new byte[size];
    //do 100ms something
}
在看完这三个例⼦之后，我相信⼤部分熟悉JVM gc机制的⼈都能⽴⻢懂了，其实这
就是共享变量引⽤对象和局部变量引⽤对象之间的区别。
因为JVM的gc机制是根据对象引⽤来确定对象内存是否需要被回收的，⽽这⾥，我
们初始化的数组对象如果是局部变量引⽤，并且仅有局部变量引⽤，那么，这就意
味着，当这个线程栈执⾏完成之后，如果引⽤已经不存在了，那么JVM在执⾏gc的
时候就会回收这⼀块内存，所以，单独这样我们只能得到短暂时间内的Memory
DoS，可能是5秒（已经⽐较优质了），也可能只有0.1秒，没办法完全实现Memory
DoS，⽽只有让这个对象⽣命周期⾜够⻓，或者引⽤⼀直存在，那么，在其⽣命周
期内，我们才能⻓时间占⽤JVM堆⾜够多的内存，让JVM⽆法回收这部分内存，从
⽽实现Memory DoS。
还有⼀个最重要的点，JVM对应数组初始化的⼤⼩是有限制的，最⼤数组⻓度是
2147483645，约等于2047.999997138977051MBytes，所以，如果遇到可控共享
变量引⽤对象的场景，我们只能控制⼀个对象数组⼤⼩，⼀旦JVM最⼤可⽤堆内存
远⽐其数组⼤的话，对于实现Memory DoS也是⽐较难的。
五、总结
java中只要能产⽣Error，⼤概率就能造成DoS
通过控制数组Array、集合Collection初始化容量参数，可以实现Memory DoS
往集合Collection中插⼊⼤量的垃圾数据，也可以实现Memory DoS
由于这篇⽂章实际上没什么硬核的东⻄，所以，就不写太多的例⼦了，以免⼜臭⼜
⻓。