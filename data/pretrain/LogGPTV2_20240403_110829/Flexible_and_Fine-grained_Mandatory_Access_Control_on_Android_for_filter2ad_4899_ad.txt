### FlaskDroid: A Policy-Driven Mandatory Access Control Framework for Android

#### 1. Introduction
FlaskDroid is a sophisticated access control framework designed to enforce security policies on Android-based platforms. It operates at both the middleware and kernel layers, providing a flexible and efficient mechanism for policy enforcement. This paper details the design, implementation, and evaluation of FlaskDroid, demonstrating its ability to instantiate various security models and protect against a range of threats.

#### 2. Threats and Mitigation
FlaskDroid addresses several types of threats, including:

**a) Apps with Permissions:**
Apps that use permissions to access the ContactsProvider, LocationManager, and SensorManager, as third-party apps typically do. FlaskDroid successfully prevents these apps from accessing privacy-critical information through appropriate policies.

**b) Malware:**
Malware such as Android.Loozfon and Android.Enesoluty, which steal user private information. FlaskDroid's policies effectively block these malware from accessing sensitive data.

**c) Unmodified Apps:**
Popular unmodified apps from Google Play, such as WhatsApp and Facebook. FlaskDroid ensures that these apps cannot access critical information without proper authorization.

**Sensory Malware:**
To mitigate sensory malware like TapLogger and TouchLogger, FlaskDroid deploys context-aware policies. For example, it filters acceleration sensor information when the on-screen keyboard is active, and denies access to audio recording during calls to prevent SoundComber attacks.

**Confused Deputy and Collusion Attacks:**
FlaskDroid addresses confused deputy attacks by implementing fine-grained access control rules on Intents. It restricts which app types can send broadcasts intended for system apps. For collusion attacks, FlaskDroid uses policies to prohibit inter-component communication (ICC) between colluding apps based on assigned app types. However, more flexible policies are required for effective mitigation of collusion attacks.

#### 3. Open Challenges and Trusted Computing Base (TCB)
**Information Flows within Apps:**
Access control frameworks like FlaskDroid typically operate at the granularity of application inputs/outputs but do not cover internal information flows. This can lead to unwanted information leakage. Approaches such as taint tracking and extensions to Androidâ€™s IPC mechanism have been proposed to address this issue. Future work will explore how these approaches can augment FlaskDroid's effectiveness.

**User-Centric and Scalable Policies:**
While FlaskDroid is valuable in specific scenarios with fixed policies, a challenge is creating user-centric and scalable policies for off-the-shelf end-user devices. We are exploring tools to abstract underlying policies and assist users in making security and privacy decisions. Additionally, we are investigating techniques from related fields, such as role-mining for RBAC systems, to enhance policy-based classification of apps at install-time.

**Trusted Computing Base:**
SE Android, part of the kernel, is susceptible to kernel exploits. Our middleware extensions, currently running within the Android system server process, could be separated into a distinct system process with a smaller attack surface. This separation can be efficiently accomplished due to the minimal functional inter-dependency between the system server and FlaskDroid's SecurityServer.

#### 4. Performance Overhead
**Middleware Layer:**
We evaluated the performance overhead of FlaskDroid using a Samsung Galaxy Nexus device running Android 4.0.4. The results show that both the runtime and memory overhead are acceptable compared to vanilla Android. The high standard deviation is due to varying system loads, but the mean execution time and memory consumption are within acceptable limits.

**Kernel Layer:**
The impact of SE Android on system performance has been previously evaluated. Since we minimally modify the default SE Android policy, the negligible performance overhead reported still applies to our implementation.

#### 5. Related Work
**Mandatory Access Control (MAC):**
SELinux is the most prominent MAC solution. FlaskDroid follows similar ideas but extends them to the Android middleware layer. Intent MAC, Install-time MAC, and other related works are discussed, highlighting how FlaskDroid provides a comprehensive and flexible access control framework.

**Android Security Extensions:**
Several security extensions to Android, such as Porscha, APEX, CRePE, and Saint, have been proposed. These solutions add mandatory access control mechanisms tailored for specific problems. FlaskDroid's design goal is to provide a flexible ecosystem that can instantiate these related works based on policies.

**TaintDroid and AppFence:**
These frameworks track and prevent unauthorized information leakage. While they do not provide a generic access control framework, their applicability in FlaskDroid, such as propagating the security context of data objects, is being explored.

**Inlined Reference Monitors (IRM):**
IRM places policy enforcement code directly in third-party apps, but this approach shares the same sandbox as potentially malicious code, making it prone to compromise. FlaskDroid, in contrast, uses a system-centric solution with User-Space Object Managers (USOMs) to enforce policies gracefully.

**XManDroid and TrustDroid:**
These architectures leverage TOMOYO Linux for kernel-level MAC and support static policies. FlaskDroid, however, can instantiate different security models by adjusting policies, providing more flexibility and dynamic enforcement.

#### 6. Conclusion
FlaskDroid is a policy-driven, two-layer MAC framework for Android. It introduces an efficient policy language tailored for Android's middleware semantics and demonstrates its flexibility through policy-driven instantiations of various security models. Our evaluation shows that FlaskDroid is both effective and efficient, benefiting from Android's clear API-oriented design.