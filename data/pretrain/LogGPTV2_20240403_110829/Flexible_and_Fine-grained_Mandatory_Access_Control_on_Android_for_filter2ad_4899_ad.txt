app which uses its permissions to access the Contacts-
Provider, the LocationManager and the SensorManager
as 3rd party apps would do; b) malware such as An-
droid.Loozfon [2] and Android.Enesoluty [1] which
steal user private information; and c) unmodiﬁed
apps from Google Play, including the popular Whats-
App messenger and Facebook apps. In all cases, a
corresponding policy on FlaskDroid successfully and
gracefully prevented the apps and malware from ac-
cessing privacy critical information from sources such
as the ContactsProvider or LocationManager.
Sensory malware. To mitigate sensory malware
like TapLogger [53] and TouchLogger [12], we de-
ployed a context-aware FlaskDroid policy which
causes the SensorManager USOM to ﬁlter acceler-
ation sensor information delivered to registered Sen-
sorListeners while the on-screen keyboard is active.
Similarly, a second policy prevents the SoundComber
attack [46] by denying any access to the audio record
functionality implemented in the MediaRecorderClient
USOM while a call is in progress.
Confused deputy and collusion attacks. At-
tacks targeting confused deputies in system compo-
nents (e.g. SettingsAppWidgetProvider [41]) are
addressed by ﬁne-grained access control rules on ICC.
Our policy restricts which app types may send (broad-
cast) Intents reserved for system apps.
Collusion attacks are in general more challeng-
ing to handle, especially when covert channels are
used for communication. Similar to the mitigation
of confused deputies, a FlaskDroid policy was used
to prohibit ICC between colluding apps based on
speciﬁcally assigned app types. However, to address
collusion attacks eﬃciently, more ﬂexible policies
are required. We already discussed in Section 4.2.4
a possible approach to instantiate XManDroid [8]
based on our Context Providers and we elaborate in
the subsequent Section 6.3 on particular challenges
for improving the mitigation of collusion attacks.
6.3 Open Challenges and TCB
Information ﬂows within apps. Like any other
access control system, e.g., SELinux, exceptions for
which enforcement falls short concern attacks which
are licit within the policy rules. Such shortcomings
may lead to unwanted information leakage. A partic-
ular challenge for addressing this problem and control-
ling access and separation (non-interference) of secu-
rity relevant information are information ﬂows within
apps. Access control frameworks like FlaskDroid
usually operate at the granularity of application in-
puts/outputs but do not cover the information ﬂow
within apps. For Android security, this control can
be crucial when considering attacks such as collusion
attacks and confused deputy attacks. Speciﬁcally for
Android, taint tracking based approaches [19, 28, 45]
and extensions to Android’s IPC mechanism [17] have
been proposed. To which extend these approaches
could augment the coverage and hence eﬀectiveness
of FlaskDroid has to be explored in future work.
User-centric and scalable policies. While
USENIX Association  
22nd USENIX Security Symposium  141
FlaskDroid is a sophisticated access control frame-
work for enforcing security policies and is already now
valuable in speciﬁc scenarios with ﬁxed policies like
business phones or locked-down devices [11], a partic-
ular challenge of the forthcoming policy engineering
are user-centric and scalable policies for oﬀ-the-shelf
end-user devices. Although expert-knowledge can be
used to engineer policies for the static components
of the system, similar to common SELinux-enabled
distributions like Fedora, an orthogonal, open re-
search problem is how to eﬃciently determine the
individual end-users’ security and privacy require-
ments and how to map these requirements scalable
to FlaskDroid policy rules w.r.t. the plethora of diﬀer-
ent apps available. To this end, we started exploring
approaches to provide the end-user with tools that
abstract the underlying policies [10]. Furthermore,
the policy-based classiﬁcation of apps at install-time
applied in FlaskDroid could in the future be aug-
mented by diﬀerent or novel techniques from related
ﬁelds, e.g., role-mining for RBAC systems [51], to
assist the end-user in his decision processes.
Trusted Computing Base. Moreover, while
SE Android as part of the kernel is susceptible to
kernel-exploits, our middleware extensions might be
compromised by attacks against the process in which
they execute. Currently our SecurityServer executes
within the scope of the rather large Android system
server process. Separating the SecurityServer as a
distinct system process with a smaller attack sur-
face (smaller TCB) can be eﬃciently accomplished,
since there is no strong functional inter-dependency
between the system server and FlaskDroid’s Security-
Server.
6.4 Performance Overhead
Middleware layer. We evaluated the performance
overhead of our architecture based on the No-allow-
rule policy and the basic policy presented in Sec-
tion 6.1 using a Samsung Galaxy Nexus device run-
ning FlaskDroid. Table 2 presents the mean execu-
tion time µ and standard deviation σ for performing
a policy check at the middleware layer in both pol-
icy conﬁgurations (measured in µs) as well as the
average memory consumption (measured in MB) of
the process in which our Userspace Security Server
executes (i.e., the system server). Mean execution
time and standard deviation are the amortized values
for both cached and non-cached policy decisions.
In comparison to permission checks on a vanilla
Android 4.0.4 both the imposed runtime and memory
overhead are acceptable. The high standard devia-
tion is explained by varying system loads, however,
µ (in µs)
σ (in µs) memory (in
MB)
FlaskDroid
No-allow-rule
Basic policy
Vanilla Android 4.0.4
Permission check
329.505
452.916
330.800
780.563
4887.24
15.673
16.184
8291.805
15.985
Table 2: Runtime and memory overhead
FlaskDroid (Basic policy)
XManDroid [8] (Amortized)
TrustDroid [9]
µ (in ms)
0.452
0.532
0.170
σ (in ms)
4.887
2.150
1.910
Table 3: Performance comparison to related works
Figure 2 presents the cumulative frequency distribu-
tion for our policy checks. The shaded area represents
the 99.33% conﬁdence interval for our basic policy
with a maximum overhead of 2ms.
In comparison to closest related work [8, 9] (cf. Sec-
tion 7), FlaskDroid achieves a very similar perfor-
mance. Table 3 provides an overview of the aver-
age performance overhead of the diﬀerent solutions.
TrustDroid [9] proﬁts from the very static policies
it enforces, while FlaskDroid slightly outperforms
XManDroid [8]. However, it is hard to provide a
completely fair comparison, since both TrustDroid
and XManDroid are based on Android 2.2 and thus
have a diﬀerent baseline measurement. Both [8, 9]
report a baseline of approximately 0.18ms for the de-
fault permission check, which diﬀers from the 0.33ms
we observed in Android 4.0.4 (cf. Table 2).
Kernel layer. The impact of SE Android on An-
droid system performance has been evaluated previ-
ously by its developers [48]. Since we only minimally
add/modify the default SE Android policy to cater
for our use-cases (e.g., new booleans), the negligible
performance overhead presented in [48] still applies
to our current implementation.
7 Related Work
7.1 Mandatory Access Control
The most prominent MAC solution is SELinux [33]
and we elaborated on it in detail in our Background
and Requirements Sections 2 and 3. Speciﬁcally for
mobile platforms, related work [54, 36] has investi-
gated the placement of SELinux enforcement hooks
in the operating system and user-space services on
OpenMoko [36] and the LiMo (Linux Mobile) plat-
form [54]. Our approach follows along these ideas
but for the Android middleware.
142  22nd USENIX Security Symposium 
USENIX Association
responses [58, 15, 28, 8, 9].
Intent MAC protects with a white-listing enforce-
ment the delivery of Intents to Activities, Broadcast
Receivers, and Services. Technically, this approach
is similar to prior work like [58, 8, 9]. The white-
listing is based on attributes of the Intent objects
(e.g., the value of the action string) and the security
type assigned to the Intent sender and receiver apps.
In FlaskDroid, we apply a very similar mechanism
by assigning Intent objects a security type, which we
use for type enforcement on Intents. While we ac-
knowledge, that access control on Intents is important
for the overall coverage of the access control, Intent
MAC alone is insuﬃcient for policy enforcement on
inter-app communications. A complete system has
to consider also other middleware communications
channels, such as Remote Procedure Calls (RPC)
to Service components and to ContentProviders. By
instrumenting these components as USOMs and by
extending the AIDL compiler (cf. Section 4.2) to
insert policy enforcement points, we address these
channels in FlaskDroid and provide a non-trivial
complementary access control to Intent MAC.
Install-time MAC performs, similar to Kirin [20],
an install-time check of new apps and denies installa-
tion when an app requests a deﬁned combination of
permissions. The adverse permission combinations
are deﬁned in the SE Android policy.
While FlaskDroid does not provide an install-time
MAC, we consider this mechanism orthogonal to
the access control that FlaskDroid already provides
and further argue that it could be easily integrated
into existing mechanisms of FlaskDroid (e.g., by ex-
tending the install-time labeling of new apps with a
blacklist-based rejection of prohibited app types).
7.3 Android Security Extensions
In the recent years, a number of security extensions
to the Android OS have been proposed.
Diﬀerent approaches [38, 37, 15, 39] add manda-
tory access control mechanisms to Android, tailored
for speciﬁc problem sets such as providing a DRM
mechanism (Porscha [38]), providing the user with
the means to selectively choose the permissions and
runtime constraints each app has (APEX [37] and
CRePE [15]), or ﬁne-grained, context-aware access
control to enable developers to install policies to pro-
tect the interfaces of their apps (Saint [39]). Essen-
tially all these solutions extend Android with MAC
at the middleware layer. The explicit design goal of
our architecture was to provide an ecosystem that
is ﬂexible enough to instantiate those related works
based on policies (as demonstrated in Section 5 at
Figure 2: CDF of the performance overhead. Shaded
area represents the 99.33 conﬁdence interval for
checks with Basic policy.
Also TOMOYO Linux [27], a path-based MAC
framework, has been leveraged in Android security
extensions [8][9]. Although TOMOYO supports more
easily policy updates at runtime and does not require
extended ﬁle system attributes, SELinux is more
sophisticated, supports richer policies, and covers
more object classes [5].
However, as we state in Section 3, low-level MAC
alone is insuﬃcient. In this paper we show how to
extend the SE Android security architecture into the
Android middleware layer for policy enforcement.
7.2 SE Android MMAC
The SE Android project was recently extended by
diﬀerent mechanisms for mandatory access control at
Android’s middleware layer [47], denoted as MMAC:
Permission revocation is a simple mechanism to
dynamically revoke permissions by augmenting the
default Android permission check with a policy driven
check. When necessary, this additional check over-
rules and negates the result of the default check.
However, this permission revocation is in almost
all cases unexpected for app developers, which rely
on the fact that if their app has been installed, it
has been granted all requested permissions. Thus,
developers very often omit error handling code for
permission denials and hence unexpectedly revoking
permissions easily leads to application crashes.
In FlaskDroid, policy enforcement also eﬀectively
revokes permissions. However, we use USOMs which
integrate the policy enforcement into the compo-
nents which manage the security and privacy sensitive
data. Thus, our USOMs apply enforcement mecha-
nisms that are graceful, i.e., they do not cause unex-
pected behavior that can cause application crashes.
Related work (cf. Section 7.3) introduced some of
these graceful enforcement mechanisms, e.g., ﬁlter-
ing table rows and columns from ContentProvider
USENIX Association  
22nd USENIX Security Symposium  143
the example of Saint) and additionally providing the
beneﬁt of a consolidated kernel-level MAC.
The pioneering framework TaintDroid [19]
in-
troduced the tracking of tainted data from sensi-
ble sources on Android and successfully detected
unauthorized information leakage. The subsequent
AppFence architecture [28] extended TaintDroid with
checks that not only detect but also prevent such
unauthorized leakage. However, both TaintDroid
and AppFence do not provide a generic access con-
trol framework. Nevertheless, future work could in-
vestigate their applicability in our architecture, e.g.,
propagating the security context of data objects. The
general feasibility of such “context propagation” has
been shown in the MOSES [45] architecture.
Inlined Reference Monitors (IRM) [52, 7, 30] place
policy enforcement code for access control directly in
3rd party apps instead of relying on a system centric
solution. An unsolved problem of inlined monitoring
in contrast to a system-centric solution is that the
reference monitor and the potentially malicious code
share the same sandbox and that the monitor is not
more privileged than the malicious code and thus
prone to compromise.
The closest related work to FlaskDroid with respect
to a two layer access control are the XManDroid [8]
and TrustDroid [9] architectures. Both leverage TO-
MOYO Linux as kernel-level MAC to establish a sep-
arate security domain for business apps [9], or to mit-
igate collusion attacks via kernel-level resources [8].
Although they cover MAC enforcement at both mid-
dleware and kernel level, both systems support only
a very static policy tailored to their speciﬁc purposes
and do not support the instantiation of diﬀerent use-
cases. In contrast, FlaskDroid can instantiate the
XManDroid and TrustDroid security models by ad-
justing policies. For instance, diﬀerent security types
for business and private apps could be assigned at
installation time, and boolean ﬂags can be used to
dynamically prevent two apps from communicating
if this would form a collusion attack.
8 Conclusion
In this paper, we present the design and implementa-
tion of FlaskDroid, a policy-driven generic two-layer
MAC framework on Android-based platforms. We
introduce our eﬃcient policy language that is tai-
lored for Android’s middleware semantics. We show
the ﬂexibility of our architecture by policy-driven
instantiations of selected security models, including
related work (Saint) and privacy-enhanced system
components. We demonstrate the applicability of
our design by prototyping it on Android 4.0.4. Our
evaluation shows that the clear API-oriented design
of Android beneﬁts the eﬀective and eﬃcient im-