Message exchange example:
GET /sx.xml?1234AA=1900 HTTP/1.1
Host: 172.16.5.5:8001
User­Agent: INSTEON 1.1.0 rv:100 (iPhone; iPhone OS 6.0.1; en_US)
Connection: close
Accept­Encoding: gzip
HTTP/1.1 200 OK
Connection: close
Content­Type: text/xml
Cache­Control: no­cache
Access­Control­Allow­Origin: *
Many of these devices can be found connected to the Internet.
3.4 Karotz Smart Rabbit
From the Karotz blog [3]:
“Karotz is a smart, communicating, rabbit­shaped object that connects to the Internet via Wi­Fi.
Karotz is the ideal companion. It’s beautiful, sweet, funny, and educated. Karotz is extraordinary: It
can speak, see, listen, obey, and move its ears! It will stop at nothing to make itself useful and to
entertain you with a lot of applications!
Karotz connects to your Wi­Fi (Ethernet connection is also possible with a USB/Ethernet adapter
and Ethernet cable, sold separately) and requires PC / MAC / Linux for installation. Karotz is
equipped with a camera, a voice recognition system, a loudspeaker and an RFID reader.”
3.4.1 Exposure of wifi network credentials unencrypted to the Karotz server
In order to set up the Karotz for wifi use, the user is expected to enter their local wifi network
information, including credentials, into the Karotz website. This is used to generate the setup
package that is installed. Unfortunately, the connection to the Karotz server is not protected by
SSL.
It’s worth noting that the Karotz server does not need these credentials for any reason besides
the generation of the setup script and that the configuration file containing the credentials is
unsigned.
3.4.2 Python module hijack in wifi setup
The autorunwifi script that the Karotz uses to configure its wifi connection is signed, so changes
to it result in the file failing to run. However, there exists a python module hijacking attack against
the unit that allows for code execution. Simply create a simplejson.py file in the same directory
as the autorunwifi script and place any python code you would like to execute within the file.
Instead of loading the simplejson library as is the expected behavior, the simplejson.py file found
in the same directory as the autorunwifi script takes precedence.
3.4.3 Unencrypted remote API calls
There are two types of applications for the Karotz: hosted, and external. Hosted applications run
on the Karotz itself, and external applications control the Karotz remotely through a series of API
calls to http://api.karotz.com.
While an application is actively running on the Karotz, a session identifier called “interactiveid” is
used to authenticate calls to the API. Since API calls are made in plaintext to the API service, this
session identifier can be captured and replayed by an eavesdropping attacker.
If an application has privileges to use the integrated webcam, an attacker could take a photo or
video and upload it to any server they wish.
3.5 Linksys Media Adapter
The Linksys Media Adapter connects to a home network and television, and allows media to be
pushed to it for playback on the television.
3.5.1 Unauthenticated UPnP actions
The “RemoteIO” UPnP device offers a service called “RemoteInput” which exposes various
actions used for controlling the interface of the Linksys Media Adapter such as “InputKeyDown”
and “InputKeyUp”. No authentication is required.
3.6 LIXIL Satis Smart Toilet
The LIXIL Satis is a toilet which can be remotely controlled through an Android application which
connects to the toilet via Bluetooth. The Android app can trigger various functions of the toilet,
which include flushing, bidet use, music, and self­cleaning functions.
3.6.1 Default Bluetooth PIN
The LIXIL Satis Smart Toilet has a static Bluetooth PIN of “0000” hard­coded into the controlling
Android application. This opens up control over the toilet to anyone who has the freely available
“My Satis” Android application.
3.7 Radio Thermostat
From the Radio Thermostat website [7]:
“Whether you're at work, on vacation, or on the go, Radio Thermostat Company makes managing
your home energy usage simple and fun. Our easy­to­use web and mobile applications let you heat
or cool your home from anywhere in the world. When logged­in, you can raise or lower your target
temperature, change modes, and edit your 7­day program. The simple idea ­ never let a static
program turn on your heat or air conditioning when no one is home. Simply manage your thermostat
from wherever you are ­ maximize your comfort while minimizing your cost.”
The Radio Thermostat is a thermostat which can be controlled over an 802.11 network.
Temperature and programming settings can be read and modified using HTTP requests.
3.7.1 Unauthenticated API
No authentication is required to use any function of the thermostat. It is possible to completely
control the thermostat, given access to the same network. For instance, to cause the air
conditioning to turn off, the following request can be made via curl, where “THERMOSTAT_IP” is
the IP of the thermostat:
curl http://THERMOSTAT_IP/tstat/tmode ­d ‘ {"tmode":0}’
3.7.2 Disclosure of WiFi passphrase in old firmware versions
From changelog[1]: “For security precaution, we remove passphrase from GET /sys/network”
The WiFi passphrase can be retrieved in plaintext from the thermostat using the following URL
on version 1.3.24, and presumably earlier versions as well:
http://THERMOSTAT_IP/sys/network
3.8 SONOS Bridge
The SONOS system is an audio system which connects to a home network to allow remote
media playback to and from the SONOS system.
From the SONOS website [8]:
“The SONOS BRIDGE 100 makes setting up an all­wireless SONOS system wonderfully fast‚...and
easy. Instead of using a SONOS component, simply connect the BRIDGE to your router to
instantly activate the SONOSNet wireless mesh network. Now all your ZonePlayers and Controllers
can work wirelessly and be put anywhere in your house. It‚' the ideal solution if your house doesn't
have Ethernet wiring or your router is in a room where you don't want music.”
3.8.1 Support Console Information Disclosure
The SONOS bridge operates a web server for various reasons. There is a support console
which can be reached at:
http://BRIDGE_IP:1400/support/
This provides various information on the SONOS system, including output from “ifconfig”, “ps”,
“dmesg”, and more.
Furthermore, machines running the SONOS controller software are polled by the bridge, and
their information is provided at:
http://BRIDGE_IP:1400/status/controllers
This information is also available directly from the control units themselves at:
http://CONTROLLER_IP:3400/status/
No authentication is required to query this information, and the existence of these consoles is
undocumented.
4. Discussion
The authors’ research suggests that network­controlled embedded devices do not frequently
take security into account in their design, especially in terms of attacks from the local network.
Security measures do seem to be in place when accessing the reviewed devices from the
Internet, with the notable exception of the INSTEON Hub.
Considering that many of these devices have control over the physical world, the poor security
measures suggest that introducing network­controlled embedded devices into one’s home or
business puts one at risk for theft or damage. If these devices must be used, the authors
strongly recommend that users isolate such devices from the rest of their network and disable
their remote access capabilities, if possible.
There are also privacy concerns in the compromise of these devices. Compromise of a device
with a built­in microphone or camera comes with the ability to perform audio and video
surveillance. Compromise of a motion sensor could be used to determine when there are people
at a physical location. Reading the status of door locks and alarm systems as could be achieved
by compromising the VeraLite could be used to determine when the building in which it resides is
occupied.
Legally, devices that store data on third party servers also enjoy a lower level of privacy
protections due to the 3rd Party Doctrine. Many of the devices in this paper fall into this category.
5. Citations
1) Radio Thermostat changelog
http://radiothermostat.com/documents/Public%20Changelog%201_3_24%20to%201_4_64%20v
4.pdf
2) About Lua
http://www.lua.org/about.html#why
3) What is Karotz?
http://blog.karotz.com/?page_id=1669&lang=en
4) INSTEON Hub
http://www.insteon.com/2242­222­insteon­hub.html
5) OSVDB ­ Portable SDK for UPnP Devices libupnp unique_service_name() Function SSDP
Request Handling Three Remote Overflows
http://osvdb.org/show/osvdb/89611
6) MiCasaVerde VeraLite
http://www.micasaverde.com/controllers/veralite/
7) Radio Thermostat ­ Welcome
http://www.radiothermostat.com/control.html
8) SONOS Setup and Product Details
https://sonos.custhelp.com/app/answers/detail/a_id/1052