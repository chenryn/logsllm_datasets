### 25.10.4 SymTagEnum[12]

`SymTagEnum` 符号用于描述枚举类型（`enum`）。以下以 `excpt.h` 中定义的 `_EXCEPTION_DISPOSITION` 枚举类型为例进行说明。使用 `SymView` 工具打开 `HiWorld.PDB` 文件，在左侧的 `SymTag` 树视图中选择 `Enum[12]`，`SymView` 将会列出该 PDB 文件中的所有枚举类型符号。从中可以找到名为 `_EXCEPTION_DISPOSITION` 的符号，其基本类型为 `int[6]`，类型 ID 为 1227，指向基本类型 `int`。该枚举类型的长度属性为 4，与 `int` 类型相同。其父词条 ID 指向的是 EXE 符号，自身的符号 ID 为 1297。

通过 `SymView` 的搜索功能，查找 ID 为 1297 的子符号（Symbols by Parent ID），可以找到这个枚举类型的所有成员（见表 25-19）。

**表 25-19 枚举类型的子符号**

| ID    | 名称                          | 值  | Data Kind | Tag | 父词条 | 类型 ID |
|-------|-------------------------------|-----|-----------|-----|--------|---------|
| 3400  | ExceptionContinueExecution    | 0   | Constant[9] | 7   | 1226   | 1227    |
| 3401  | ExceptionContinueSearch       | 1   | Constant[9] | 7   | 1226   | 1227    |
| 3402  | ExceptionNestedException      | 2   | Constant[9] | 7   | 1226   | 1227    |
| 3403  | ExceptionCollidedUnwind       | 3   | Constant[9] | 7   | 1226   | 1227    |

`SymTag` 为 7 表示这些子符号都是数据类型的符号，`Data Kind` 为 9 表示它们是常量。类型 ID 1227 指向基本类型 `int`。

### 25.10.5 SymTagPointerType[14]

`SymTagPointerType` 符号用于描述指针类型。例如，表 25-20 列出了无符号长整型指针（`PULONG`）符号的各个属性。

**表 25-20 指针类型符号**

| 属性              | 值     | 描述                               |
|-------------------|--------|------------------------------------|
| get_constType     | 0      | 是否为 constant                    |
| get_length        | 0x4    | 长度                               |
| get_reference     | 0      | 是否是引用                         |
| get_type          | 5003   | 指向的类型，显示的是类型 ID        |
| get_typeId        | 5003   | 类型 ID                            |
| get_unalignedType | 0      | 是否未内存对齐                     |
| get_volatileType  | 0      | 是否为 volatile                    |

`get_type` 返回的符号描述是基本类型 `ULONG`（即 `unsigned long`）。简而言之，指针符号本身包含的信息较少，其中最重要的是它所指向的类型的 ID，通过这个 ID 可以获取更多信息。

### 25.10.6 SymTagArrayType

`SymTagArrayType` 符号用于描述数组类型。数组符号的信息描述方式与指针符号类似，其本身只记录数组的基本信息，元素类型和索引类型由其他符号描述。表 25-21 列出了全局数组变量 `TCHAR szWindowClass[100]` 的数组类型符号的属性。

**表 25-21 数组类型符号的属性**

| 属性                | 值     | 描述                           |
|---------------------|--------|--------------------------------|
| get_arrayIndexTypeId | 4704   | 描述数组索引类型的符号 ID      |
| get_constType       | 0      | 是否为 const                   |
| get_count           | 100    | 数组的元素个数                 |
| get_length          | 200    | 数组的长度，字节数             |
| get_typeId          | 4283   | 描述数组元素类型的符号 ID      |
| get_unalignedType   | 0      | 是否未内存对齐                 |
| get_volatileType    | 0      | 是否为 volatile                |

符号 4283 描述的是基本数据类型 `wchar_t`。这个数组类型符号也可以用来描述同样维度、类型和长度的其他数组变量。在 `HiWorld` 程序中，另一个全局数组 `szTitle`（`TCHAR szTitle[100]`）的声明与 `szWindowClass` 相同，因此这两个数组使用相同的类型符号。但它们的数据符号不同，因为名称和内存位置不同。

### 25.10.7 SymTagTypedef[17]

`SymTagTypedef` 符号用于描述使用 `typedef` 关键字定义的类型别名。例如，`NT_TIB` 是 `_NT_TIB` 的别名，`INT` 是 `int` 的别名，`TEXTMETRICW` 是 `tagTEXTMETRICW` 的别名，`PINPUT` 是指向 `tagINPUT` 结构的指针类型的别名等。

`Typedef` 符号的名称属性是 `typedef` 定义的别名名称，类型 ID 属性是描述原本类型的符号 ID。

除了上述类型符号外，`SymTagVTable` 和 `SymTagVTableShape` 符号用于描述类的虚表，`SymTagFriend` 用于描述 C++ 中的友元信息，`SymTagCustomType` 符号用于描述编译器厂商定制的与编译器相关的类型，`SymTagDimension` 用于描述 FORTRAN 数组的维度信息（上下边界和维数——Rank），`SymTagManagedType` 符号用于描述使用 C# 等语言开发的托管类型。由于篇幅限制，这里不再一一介绍这些类型符号。描述函数类型和参数类型的 `SymTagFunctionType` 和 `SymTagFunctionArgType` 将在下一节介绍。

### 25.11 函数符号

函数是软件的重要组成部分，也是软件调试的重要目标。本节将介绍描述函数类型的 `SymTagFunctionType` 符号、描述函数参数类型的 `SymTagFunctionArgType` 符号、描述函数实例的 `SymTagFunction` 符号、描述函数的调试起点和终点的 `SymTagFunctionStart` 和 `SymTagFunctionEnd` 符号，以及描述标号的 `SymTagLabel` 符号。

#### 25.11.1 SymTagFunctionType[13]

`SymTagFunctionType` 符号用于描述一个函数的原型，包括返回值类型、调用协议和参数信息等，这些特征有时也被称为函数签名（Function Signature）。表 25-22 列出了 `CBaseClass` 类的 `Setup` 方法所使用的函数类型。

**表 25-22 `Setup` 方法的函数类型符号**

| 属性                  | 值               | 说明                                 |
|-----------------------|------------------|--------------------------------------|
| get_callingConvention | CV_CALL_THISCALL | 调用协议，this 协议                 |
| get_classParentId     | 1257             | 所属类的类型符号，即 `CBaseClass`    |
| get_count             | 2                | 参数个数                             |
| get_objectPointerType | 5704             | 对象指针（this）的类型符号           |
| get_thisAdjust        | 0                | this 指针调整值                      |
| get_typeId            | 3778             | 返回值的类型符号                     |

`Setup` 方法的原型是 `int Setup(LPCTSTR szName)`，虽然声明中只有一个参数，但调用类的方法时总要隐式传递 `this` 指针，因此实际调用时参数个数为 2。上表中的参数个数反映了实际调用参数的个数。

#### 25.11.2 SymTagFunctionArgType[13]

如果一个函数的声明中包含参数，可以通过寻找其函数类型符号的子符号来找到描述参数的 `SymTagFunctionArgType` 符号。例如，使用 `SymView` 工具搜索 `Setup` 函数符号（ID #3265）的子符号，可以找到一条结果，即描述参数 `szName` 的符号，其主要属性如下：

| 属性                  | 值     | 说明                                     |
|-----------------------|--------|------------------------------------------|
| get_lexicalParentId   | 1255   | 父词条 ID，即 EXE 符号                   |
| get_symIndexId        | 3440   | 符号 ID                                  |
| get_typeId            | 1263   | 类型符号的 ID                            |

类型符号 ID 1263 代表是指针类型的符号，其基本类型是 `wchar_t`，这与参数 `szName` 的类型 `LPCTSTR` 完全匹配。

#### 25.11.3 SymTagFunction [5]

`SymTagFunction` 符号用于描述一个函数或类方法实例。我们继续以 `CBaseClass` 的 `Setup` 方法为例进行说明。