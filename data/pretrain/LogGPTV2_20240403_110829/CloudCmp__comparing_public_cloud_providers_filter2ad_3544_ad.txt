### 5.2 Persistent Storage

We evaluate and compare three types of storage services: table, blob, and queue, offered by various cloud providers.

#### 5.2.1 Table Storage

We first compare the table storage services provided by C1, C3, and C4. C2 does not offer a table service. For this comparison, we use a Java-based client, as other non-Java clients achieve similar performance due to the lightweight nature of table operations on the client side. We test the performance of three operations: get, put, and query, on two predefined data tables: a small one with 1,000 entries and a large one with 100,000 entries. The get and put operations operate on a single table entry, while the query operation returns an average of 10 entries. Unless otherwise specified, we use instance types that occupy at least one physical core to minimize variations due to CPU time sharing.

**Figure 4: Response Time Distributions for Large Table Operations**

- **(a) Get Operation**: The cumulative distribution of response times for the get operation shows that the median response time is less than 50 ms, while the 95th percentile exceeds 100 ms for all services.
- **(b) Put Operation**: The response time distributions for the put operation are similar to those of the get operation, with C3 being slightly slower.
- **(c) Query Operation**: The query operation exhibits significant differences in response times. C1's service has the shortest response time, followed by C3. C4's service has the longest response time, likely due to the lack of indexing over non-key fields.

**Figure 5: Time to Consistency for C1’s Table Service**

- **Consistency Evaluation**: We evaluate the time to reach consistency using the mechanism described in §4.2. Approximately 40% of get operations in C1 see inconsistency when triggered immediately after a put, failing to return the newly inserted entry. Other providers do not exhibit such inconsistencies. Over 99% of inconsistencies in C1 are resolved within 500 ms, with a median resolution time of 80 ms. C1 provides an API option for strong consistency, which, when enabled, eliminates inconsistencies without significantly increasing latency.

**Table 4: Cost per Operation for Table Services**

| Provider | Cost per Operation (milli-cents) |
|----------|----------------------------------|
| C1       | Get: 0.13, Put: 0.31, Query: 1.47 |
| C3       | Get: 0.02, Put: 0.23, Query: 0.29 |
| C4       | Get: 0.10, Put: 0.10, Query: 0.10 |

- **Cost Analysis**: The costs for get and put operations are generally lower than for queries, reflecting the simpler nature of these operations. C4 charges the same for all operations, suggesting an opportunity to improve its pricing model by accounting for operational complexity.

**Scalability and Performance**

- **Concurrent Operations**: We measure the scalability of each table service by issuing multiple concurrent operations. None of the services show noticeable performance degradation when up to 32 operations are issued simultaneously, indicating that they are well-provisioned. Testing at higher scales is deferred to future work.

#### 5.2.2 Blob Storage

We compare the blob storage services provided by C1, C2, and C4. C3 does not offer a blob store.

**Figure 6: Response Time Distributions for Blob Operations**

- **(a) Download 1KB Blob**
- **(b) Upload 1KB Blob**
- **(c) Download 10MB Blob**
- **(d) Upload 10MB Blob**

- **Performance Analysis**: The performance of blob services varies with blob size. For small blobs (1 KB), C4 has the best performance. For large blobs (10 MB), C1 outperforms the others. This difference is attributed to the varying bottlenecks for different blob sizes, such as one-off costs for small blobs and throughput, network bandwidth, or client-side contention for large blobs. C2's storage service shows significantly lower performance for uploads compared to downloads, suggesting it is optimized for read-heavy workloads.

**Figure 7: Response Time for Downloading a 10MB Blob Using Non-Java Clients**

- **Non-Java Client Performance**: Non-Java clients perform much better, especially for C4, where the performance improves by nearly 5 times. This indicates that the Java implementation of C4's API is inefficient.

**Figure 8: Scalability of Blob Services**

- **Concurrent Operations**: We measure the downloading time with the number of concurrent operations ranging from 1 to 32. All services, except C2, show good scaling performance for small blobs. For large blobs, C4 and C1 continue to scale better, though all providers exhibit some scaling bottlenecks.

**Table 5: Maximum Throughput for Blob Services**

| Provider | Maximum Throughput (Mbps) |
|----------|---------------------------|
| C1       | Smallest: 773.4, Largest: 782.3 |
| C2       | Smallest: 235.5, Largest: 265.7 |
| C4       | Smallest: 327.2, Largest: 763.3 |

- **Throughput Analysis**: We compute the maximum throughput by increasing the number of simultaneous operations until the throughput stabilizes. The results are reported for the smallest instance with at least one full core and the largest instance from each provider, to eliminate CPU time sharing effects and minimize contention from colocated VMs.

This comprehensive analysis provides insights into the performance, consistency, cost, and scalability of the storage services offered by different cloud providers, helping users make informed decisions based on their specific needs.