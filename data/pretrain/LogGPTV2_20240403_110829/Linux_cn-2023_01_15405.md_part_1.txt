---
author: Stephan Avenwedde
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 11536
date: '2023-01-02 17:35:18'
editorchoice: false
excerpt: 使用 C 扩展为 Python 提供特定功能。
fromurl: https://opensource.com/article/22/11/extend-c-python
id: 15405
islctt: true
largepic: /data/attachment/album/202301/02/173501o26htajatlpj0lqt.jpg
permalink: /article-15405-1.html
pic: /data/attachment/album/202301/02/173501o26htajatlpj0lqt.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 使用 C 扩展为 Python 提供特定功能。
tags:
- Python
- 扩展
thumb: false
title: 为 Python 写一个 C++ 扩展模块
titlepic: true
translator: MjSeven
updated: '2023-01-02 17:35:18'
---
![](/data/attachment/album/202301/02/173501o26htajatlpj0lqt.jpg)
> 
> 使用 C 扩展为 Python 提供特定功能。
> 
> 
> 
在前一篇文章中，我介绍了 [六个 Python 解释器](https://opensource.com/article/22/9/python-interpreters-2022)。在大多数系统上，CPython 是默认的解释器，而且根据民意调查显示，它还是最流行的解释器。Cpython 的独有功能是使用扩展 API 用 C 语言编写 Python 模块。用 C 语言编写 Python 模块允许你将计算密集型代码转移到 C，同时保留 Python 的易用性。
在本文中，我将向你展示如何编写一个 C++ 扩展模块。使用 C++ 而不是 C，因为大多数编译器通常都能理解这两种语言。我必须提前说明缺点：以这种方式构建的 Python 模块不能移植到其他解释器中。它们只与 CPython 解释器配合工作。因此，如果你正在寻找一种可移植性更好的与 C 语言模块交互的方式，考虑下使用 [ctypes](https://docs.python.org/3/library/ctypes.html#module-ctypes) 模块。
### 源代码
和往常一样，你可以在 [GitHub](https://github.com/hANSIc99/PythonCppExtension) 上找到相关的源代码。仓库中的 C++ 文件有以下用途：
* `my_py_module.cpp`: Python 模块 `MyModule` 的定义
* `my_cpp_class.h`: 一个头文件 - 只有一个暴露给 Python 的 C++ 类
* `my_class_py_type.h/cpp`: Python 形式的 C++ 类
* `pydbg.cpp`: 用于调试的单独应用程序
本文构建的 Python 模块不会有任何实际用途，但它是一个很好的示例。
### 构建模块
在查看源代码之前，你可以检查它是否能在你的系统上编译。[我使用 CMake](https://opensource.com/article/21/5/cmake) 来创建构建的配置信息，因此你的系统上必须安装 CMake。为了配置和构建这个模块，可以让 Python 去执行这个过程：
```
$ python3 setup.py build
```
或者手动执行：
```
$ cmake -B build
$ cmake --build build
```
之后，在 `/build` 子目录下你会有一个名为 `MyModule. so` 的文件。
### 定义扩展模块
首先，看一下 `my_py_module.cpp` 文件，尤其是 `PyInit_MyModule` 函数：
```
PyMODINIT_FUNC
PyInit_MyModule(void) {
    PyObject* module = PyModule_Create(&my_module);
    PyObject *myclass = PyType_FromSpec(&spec_myclass);
    if (myclass == NULL){
        return NULL;
    }
    Py_INCREF(myclass);
    if(PyModule_AddObject(module, "MyClass", myclass) .so`）搜索 `PyInit_` 函数，并在试图导入时执行它。
无论是声明还是实例，所有 Python 类型都是 [PyObject](https://docs.python.org/release/3.9.1/c-api/structures.html?highlight=pyobject#c.PyObject) 的一个指针。在此函数的第一部分中，`module` 通过 `PyModule_Create(...)` 创建的。正如你在 `module` 详述（`my_py_module`，同名文件）中看到的，它没有任何特殊的功能。
之后，调用 [PyType\_FromSpec](https://docs.python.org/3/c-api/type.html#c.PyType_FromSpec) 为自定义类型 `MyClass` 创建一个 Python [堆类型](https://docs.python.org/3/c-api/typeobj.html#heap-types) 定义。一个堆类型对应于一个 Python 类，然后将它赋值给 `MyModule` 模块。
*注意，如果其中一个函数返回失败，则必须减少以前创建的复制对象的引用计数，以便解释器删除它们。*
### 指定 Python 类型
`MyClass` 详述在 [my\_class\_py\_type.h](https://github.com/hANSIc99/PythonCppExtension/blob/main/my_class_py_type.h) 中可以找到，它作为 [PyType\_Spec](https://docs.python.org/3/c-api/type.html#c.PyType_Spec) 的一个实例：
```
static PyType_Spec spec_myclass = {
    "MyClass",                                  // name
    sizeof(MyClassObject) + sizeof(MyClass),    // basicsize
    0,                                          // itemsize
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,   // flags
    MyClass_slots                               // slots
};
```
它定义了一些基本类型信息，它的大小包括 Python 表示的大小（`MyClassObject`）和普通 C++ 类的大小（`MyClass`）。`MyClassObject` 定义如下：
```
typedef struct {
    PyObject_HEAD
    int         m_value;
    MyClass*    m_myclass;
} MyClassObject;
```
Python 表示的话就是 [PyObject](https://docs.python.org/release/3.9.1/c-api/structures.html?highlight=pyobject#c.PyObject) 类型，由 `PyObject_HEAD` 宏和其他一些成员定义。成员 `m_value` 视为普通类成员，而成员 `m_myclass` 只能在 C++ 代码内部访问。
[PyType\_Slot](https://docs.python.org/release/3.9.1/c-api/type.html?highlight=pytype_slot#c.PyType_Slot) 定义了一些其他功能：
```
static PyType_Slot MyClass_slots[] = {
    {Py_tp_new,     (void*)MyClass_new},
    {Py_tp_init,    (void*)MyClass_init},
    {Py_tp_dealloc, (void*)MyClass_Dealloc},
    {Py_tp_members, MyClass_members},
    {Py_tp_methods, MyClass_methods},
    {0, 0} /* Sentinel */
};
```
在这里，设置了一些初始化和析构函数的跳转，还有普通的类方法和成员，还可以设置其他功能，如分配初始属性字典，但这是可选的。这些定义通常以一个哨兵结束，包含 `NULL` 值。
要完成类型详述，还包括下面的方法和成员表：
```
static PyMethodDef MyClass_methods[] = {
    {"addOne", (PyCFunction)MyClass_addOne, METH_NOARGS,  PyDoc_STR("Return an incrmented integer")},
    {NULL, NULL} /* Sentinel */
};
static struct PyMemberDef MyClass_members[] = {
    {"value", T_INT, offsetof(MyClassObject, m_value)},