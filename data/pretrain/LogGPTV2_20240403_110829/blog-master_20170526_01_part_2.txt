1、代码优化，可以提高执行效率，从而提高能耗比。例如算子复用。  
2、LLVM -> 3~5x faster  
PG 10已将JIT框架整合到内核中，未来会支持更多的算子。  
3、向量计算 -> 10x+ faster  
目前通过VOPS插件可以支持向量计算，利用CPU的向量计算指令，达到批处理的目的，大幅度提升OLAP性能。  
4、列式存储 -> 压缩，更好的支持LLVM，向量计算  
通过瓦片式存储实现列存，或者通过FDW实现列存，例如cstore。  
5、流式计算 -> smooth化，减少怠速开销  
服务器即使不做任何运算，也要耗电，就像汽油发动机一样，怠速时，也会费油。PostgreSQL通过pipelinedb插件，实现流计算，可以有效的利用怠速的自有，从而实现高效的计算。  
### 4、天花板  
1、垂直扩展  
CPU、GPU、FPGA 。。。  
RDMA、BLOCKDEVICE、NETWORK  
2、水平扩展  
sharding - inherit, fdw, partition, proxy,...   
MPP - citus, xl, GPDB  
垂直扩展和水平扩展都有成熟的解决方案。  
### 5、软件生态  
1、打破SQL语言局限性，对接行业Lib生态 - 提升开发、执行效率，降低成本      
PostgreSQL的PL框架实现了这一点，目前已支持plcuda, plpython, plr, pljava, plperl, pltcl, C等非常多的内置编程语言，（通过接口，还可以支持更多的地球编程语言）。      
PLpythonu用法举例      
```    
这个UDF用于获取文件系统的使用情况      
create or replace function get_fs_info() returns void as $$    
import os      
import statvfs    
phydevs = []      
f = open("/proc/filesystems", "r")      
for line in f:      
  if not line.startswith("nodev"):      
    phydevs.append(line.strip())      
  retlist = []      
f = open('/etc/mtab', "r")      
for line in f:      
  if line.startswith('none'):      
    continue      
  fields = line.split()      
  device = fields[0]      
  mountpoint = fields[1]      
  fstype = fields[2]      
  if fstype not in phydevs:      
    continue      
  if device == 'none':      
    device = ''      
  vfs=os.statvfs(mountpoint)    
  available=vfs[statvfs.F_BAVAIL]*vfs[statvfs.F_BSIZE]/(1024*1024*1024)    
  capacity=vfs[statvfs.F_BLOCKS]*vfs[statvfs.F_BSIZE]/(1024*1024*1024)    
  used=capacity-available    
  plpy.notice('mountpoint',mountpoint,'capacityGB',capacity,'usedGB',used,'availableGB',available)    
$$ language plpythonu;    
```    
使用pl编程后，数据与计算水乳交融，效率大增。      
![pic](20170526_01_pic_015.jpg)      
![pic](20170526_01_pic_016.jpg)      
![pic](20170526_01_pic_017.jpg)      
2、打破数据孤岛，对接云生态。  
云端有很多非常便捷的服务，例如搜索、MQ、SLS、CACHE、对象存储、quickBI、消息服务、订阅...。让数据库和云上数据可以无缝融合，是非常关键的。  
阿里云RDS PostgreSQL与OSS对象存储，实现了无缝融合，用户可以在数据库中直接读写OSS，将OSS作为无限容量的存储来使用，将历史数据存储到OSS，未来要分析时还可以直接进行读写。  
![pic](../201706/20170629_01_pic_002.jpg)   
3、开放接口  
开放类型、操作符、函数接口，开放索引接口，开放数据扫描接口，...   
支持多样化的数据类型（包括存取、搜索、处理、UDF等多方面），再也不用担心有不支持的类型了。  
4、开放SQL流计算接口  
有效利用服务器的怠速开销。  
### 6、硬件生态  
1、CPU      
CPU的发展趋于缓慢，可以挖掘的潜能主要包括 :       
扩展指令集，（如向量计算指令，已被PostgreSQL利用来加速OLAP数据分析场景，约有10倍的性能提升），例如      
[《PostgreSQL 向量化执行插件(瓦片式实现) 10x提速OLAP》](../201702/20170225_01.md)        
增加CPU计算单元，（例如PostgreSQL已支持多核并行计算，提升OLAP数据分析场景的性能，多核并行，一条SQL可以充分利用多个CPU核，缩短单条SQL的响应时间，特别适合OLAP业务），例如      
[《分析加速引擎黑科技 - LLVM、列存、多核并行、算子复用 大联姻 - 一起来开启PostgreSQL的百宝箱》](../201612/20161216_01.md)        
2、对接新硬件生态（GPU、FPGA、TPU、...）  
2\.1 GPU      
GPU与CPU的对比如下，GPU在核心数、FFLOPS、内存带宽方面，相比CPU有非常明显的优势。      
![pic](20170526_01_pic_010.jpg)         
PostgreSQL通过pl/cuda语言接口，用户可以在数据库中直接使用GPU的计算能力。      
![pic](20170526_01_pic_011.png)         
pl/cuda用法参考：      
https://github.com/pg-strom/devel      
pg-strom的作者Kaigai也从NTT出来，加盟了以GPU为核心的Hetero-DB(Next Generation High-Performance Database Systems)。  
http://hgpu.org/?p=14236  
pg-strom插件，使用开放的扫描接口，利用GPU提升多表JOIN的性能。  
http://strom.kaigai.gr.jp/manual.html  
![pic](20170526_01_pic_029.png)  
2\.2 FPGA      
FPGA作为一种高性能、低功耗的可编程芯片，可以根据客户定制来做针对性的算法设计。所以在处理海量数据的时候，FPGA 相比于CPU 和GPU，优势在于：FPGA计算效率更高，FPGA更接近IO。      
FPGA不采用指令和软件，是软硬件合一的器件。对FPGA进行编程要使用硬件描述语言，硬件描述语言描述的逻辑可以直接被编译为晶体管电路的组合。所以FPGA实际上直接用晶体管电路实现用户的算法，没有通过指令系统的翻译。      
FPGA的英文缩写名翻译过来，全称是现场可编程逻辑门阵列，这个名称已经揭示了FPGA的功能，它就是一堆逻辑门电路的组合，可以编程，还可以重复编程。      
PostgreSQL 社区，xilinx都有这方面的结合产品。      
https://www.pgcon.org/2015/schedule/track/Hacking/799.en.html      
2\.3 TPU      
在Google I/O 2016的主题演讲进入尾声时，Google的CEO皮采提到了一项他们这段时间在AI和机器学习上取得的成果，一款叫做Tensor Processing Unit（张量处理单元）的处理器，简称TPU。在大会上皮采只是介绍了这款TPU的一些性能指标，并在随后的博客中公布了一些使用场景：      
Google一直坚信伟大的软件将在伟大的硬件的帮助下更加大放异彩，所以Google便在想，我们可不可以做出一款专用机机器学习算法的专用芯片，TPU便诞生了。       
TPU的灵感来源于Google开源深度学习框架TensorFlow，所以目前TPU还是只在Google内部使用的一种芯片。      
https://www.leiphone.com/news/201605/xAiOZEWgoTn7MxEx.html      
2\.4 UDF  
硬件总有SDK，SDK总有对应的开发语言，通过PL/$LANGAGE接口，PostgreSQL可以通过UDF的方式利用这些硬件的能力。  
pl$language  
plCUDA  
C  
PostgreSQL以其扩展接口(pl/language, customscan, operator, type, index扩展)，可以非常方便的对接以上各种硬件计算单元，让数据和计算紧密的结合，提高能效比。      
通过利用指令集、多核计算对接CPU，通过PL/CUDA，customscan对接GPU，通过customscan对接FPGA，等等，一切都是为了提升计算能力。      
PostgreSQL 通过 CPU多核并行、向量计算、JIT、GPU、FPGA等手段扩展单体计算能力。通过sharding、MPP等手段横向扩展。消灭瓶颈。    
## 六、回顾数据库的发展      
关系数据库发展了几十年，最核心的功能，依旧是支持可靠的数据存取、支持SQL接口。      
随着社会的进步，数据库正在添加越来越多的功能，比如GIS就是其中之一。      
为什么要将GIS功能添加到数据库中呢？在应用层实现不好吗？      
这个问题很有意思，在应用层实现当然是可以的，但不是最好的。      
举个例子，我们存储了一批用户、商铺的位置数据，要求某个用户周边的其他商铺，如果要在应用层实现这个功能，需要将位置数据都下载到程序端，然后计算距离，并输出周边的商铺。而用户请求的并发可能较高，请求的位置可能都不一样。在应用层实现这个功能，效率非常低下，因为每一次请求，都需要将数据载入应用层，同时需要计算每条记录的距离。印证了一句古话“远水解不了近渴”。      
在数据库层实现GIS这个功能遵循了两个宗旨：      
1\. 数据和计算在一起，每次请求不再需要move data，提升了整体效率。      
2\. 让数据库支持GIS类型和GIS索引，让每一次距离查询都可以通过索引检索，提升查询效率。      
可以看出，数据库的发展实际上也是遵循了以上原则，在保证数据库不会成为瓶颈的前提下，让整体的效率得以提升。      
### 1 PostgreSQL 哪些手段解决瓶颈问题？      
1\. 提升计算能力      
充分利用硬件的能力提升计算能力。例如结合 CPU指令、CPU多核协作、GPU、FPGA。。。      
2\. 提升开发效率      
SQL标准的兼容性越好，开发用起来越爽。      
支持的类型、function、索引越丰富，开发用起来越爽。      
支持的编程接口越丰富，开发人员越爽，例如通过plpython对接PyPI，通过plR对接CRAN，通过plcuda对接GPU开发生态。      
支持的开发框架越多，开发人员越爽。      
3\. 提升扩展能力      
分为两个部分的扩展，一部分是计算能力的扩展，另一部分是开发能力的扩展。      
扩展计算能力：      
通过sharding，水平扩展节点，扩展整体性能。      
通过MPP插件，扩展跨库计算能力。      
扩展开发能力：      
通过扩展接口（类型、索引、PL语言、UDF、解析器、执行器），支持更多的数据类型、索引类型、编程语言等。GIS就是其中一个例子，扩展了GIS类型、索引、UDF等等。      
3\.1 如何扩展数据类型？       
https://www.postgresql.org/docs/10/static/xtypes.html      
3\.2 如何扩展索引？        
https://www.postgresql.org/docs/10/static/xindex.html    
https://www.postgresql.org/docs/10/static/gist.html    
https://www.postgresql.org/docs/10/static/spgist.html    
https://www.postgresql.org/docs/10/static/gin.html    
https://www.postgresql.org/docs/10/static/brin.html    
3\.3 如何嫁接编程语言？      