intersection, even when the non-outsourced evaluation is
capable of returning an answer, it can require orders of
298  22nd USENIX Security Symposium 
USENIX Association
10
Program
Millionaires 128
Millionaires 1024
Millionaires 8192
Edit Distance 2
Edit Distance 32
Edit Distance 128
Set Intersection 2
Set Intersection 32
Set Intersection 128
AES-128
8 Circuits
32 Circuits
128 Circuits
256 Circuits
Outsourced
2150.0 ± 1%
4670.0 ± 6%
17280.0 ± 0.9%
1268.0 ± 0.9%
2860.0 ± 3%
12800.0 ± 2%
1598.0 ± 0.8%
5200.0 ± 10%
24300.0 ± 2%
2450.0 ± 2%
KSS
6130.0 ± 0.6%
46290.0 ± 0.4%
368800.0 ± 0.4%
794.0 ± 1%
44610.0 ± 0.7%
702400.0 ± 0.5%
1856.0 ± 0.9%
96560.0 ± 0.6%
1398000.0 ± 0.4%
15040.0 ± 0.7%
Outsourced
8210.0 ± 3%
17800.0 ± 1%
76980.0 ± 0.5%
4060.0 ± 1%
7470.0 ± 5%
30300.0 ± 2%
5720.0 ± 0.7%
13800.0 ± 1%
55400.0 ± 3%
9090.0 ± 5%
KSS
23080.0 ± 0.6%
180500.0 ± 0.3%
1519000.0 ± 0.4%
2125.0 ± 0.7%
175600.0 ± 0.5%
2805000.0 ± 0.8%
6335.0 ± 0.4%
400800.0 ± 0.6%
5712000.0 ± 0.4%
58920.0 ± 0.5%
Outsourced
38100.0 ± 7%
75290.0 ± 1%
351300.0 ± 0.7%
19200.0 ± 2%
30500.0 ± 3%
106200.0 ± 0.6%
26100.0 ± 2%
59400.0 ± 1%
1998000.0 ± 0.5%
39000.0 ± 2%
KSS
91020.0 ± 0.8%
744500.0 ± 0.7%
-
7476.0 ± 0.5%
699000.0 ± 2%
-
24420.0 ± 0.6%
-
-
276200.0 ± 0.6%
Outsourced
75700.0 ± 1%
151000.0 ± 1%
880000.0 ± 20%
42840.0 ± 0.4%
63600.0 ± 1%
213400.0 ± 0.3%
56350.0 ± 0.8%
125300.0 ± 0.9%
395200.0 ± 0.8%
81900.0 ± 1%
KSS
180800.0 ± 0.5%
1507000.0 ± 0.5%
-
14600.0 ± 0.8%
-
-
48330.0 ± 0.6%
-
-
577900.0 ± 0.5%
Table 1: Execution time (in ms) of outsourced vs non-outsourced (KSS) evaluation for a subset of circuits. Results
with a dash indicate evaluation that the phone was incapable of performing.
)
s
m
(
e
m
T
i
 1e+06
Evaluation
Checks
OT
 100000
        NON
 10000
          NON
        NON
        NON
        NON
        NON
        NON
OUT       
OUT       
OUT       
OUT       
OUT       
OUT       
OUT       
OUT       
 1000
 100
2
4
8
16
32
Circuits Evaluated
64
128
256
)
s
e
t
y
b
(
h
t
i
d
w
d
n
a
B
 1e+09
 1e+08
 1e+07
 1e+06
 100000
 10000
 1000
 100
Outsourced
Non-Outsourced
ED2
ED4
ED8
ED16
Program Size
ED32
ED64
ED128
Figure 6: Microbenchmarks of execution time for Edit
Distance with input size 32, evaluating from 2 to 256
circuits. Note that the y-axis is log-scale; consequently,
the vast majority of execution time is in the check and
evaluation phases for non-outsourced evaluation.
magnitude more time than with outsourced evaluation.
For example, evaluating the set intersection problem with
128 inputs over 32 circuits requires just over 55 seconds
for outsourced evaluation but over an hour and a half
with the non-outsourced KSS execution scheme. Out-
sourced evaluation represents a time savings of 98.92%.
For space concerns, we have omitted certain values; full
results can be found in our technical report [6].
Multicore Circuit Evaluation We brieﬂy note the ef-
fects of multicore servers for circuit evaluation. The
servers in our evaluation each contain dual 6-core CPUs,
providing 12 total cores of computation. The compu-
tation process is largely CPU-bound: while circuits on
the servers are being evaluated, each core was reporting
approximately 100% utilization. This is evidenced by
regression analysis when evaluating between 2 and 12
circuit copies; we ﬁnd that execution time T = 162.6k +
1614.6 ms, where k is the number of circuits evaluated,
with a coefﬁcient of determination R2 of 0.9903. As
the number of circuits to be evaluated increases beyond
the number of available cores, the incremental costs of
Figure 7: Bandwidth measurements from the phone to
remote parties for the Edit Distance problem with vary-
ing input sizes, executing two circuits.
adding new circuits becomes higher; in our observation
of execution time for 12 to 256 circuits, our regression
analysis provided the equation T = 247.4k − 410.6 ms,
with R2 = 0.998. This demonstrates that evaluation of
large numbers of circuits is optimal when every evalu-
ated circuit can be provided with a dedicated core.
The results above show that as many-way servers are
deployed in the cloud, it becomes easier to provide op-
timal efﬁciency computing outsourced circuits. A 256-
core machine would be able to evaluate 256 circuits in
parallel to provide the accepted standard 2−80 security
parameter. Depending on the computation performed,
there can be a trade-off between a slightly weaker se-
curity parameter and maintaining optimal evaluation on
servers with lower degrees of parallelism. In our testbed,
optimal evaluation with 12 cores provides a security pa-
rameter of 2−3.84. Clearly more cores would provide
stronger security while keeping execution times propor-
tional to our results. A reasonable trade-off might be 32
circuits, as 32-core servers are readily available. Evalu-
ating 32 circuits provides a security parameter of 2−10.2,
equivalent to the adversary having less than a 1
512 chance
of causing the evaluator to compute over a majority of
corrupt circuits. Stronger security guarantees on less par-
USENIX Association  
22nd USENIX Security Symposium  299
11
32 Circuits
Program
Millionaires 128
Millionaires 1024
Millionaires 8192
Edit Distance 2
Edit Distance 32
Edit Distance 128
Set Intersection 2
Set Intersection 32
Set Intersection 128
AES-128
Outsourced
336749
2280333
17794637
56165
134257
350721
117798
1173844
4490932
367364
KSS
1445369
11492665
91871033
117245
41889641
682955633
519670
84841300
1316437588
9964576
Factor
Improvement
4.29X
5.04X
5.16X
2.09X
312.01X
1947.29X
4.41X
72.28X
293.13X
27.12X
Table 2: Total Bandwidth (Bytes) transmitted to and
from the phone during execution.
allel machines can be achieved at the cost of increasing
execution time, as individual cores will not be dedicated
to circuit evaluation. However, if a 256-core system is
available, it will provide optimal results for achieving a
2−80 security parameter.
6.4 Bandwidth
For a mobile device, the costs of transmitting data are in-
trinsically linked to power consumption, as excess data
transmission and reception reduces battery life. Band-
width is thus a critical resource constraint. In addition,
because of potentially uncertain communication chan-
nels, transmitting an excess of information can be a rate-
limiting factor for circuit evaluation. Figure 7 shows
the bandwidth measurement between the phone and re-
mote parties for the edit distance problem with 2 circuits.
When we compared execution time for this problem in
Figure 3, we found that trivially small circuits could ex-
ecute in less time without outsourcing. Note, however,
that there are no cases where the non-outsourced scheme
consumes less bandwidth than with outsourcing.
This is a result of the signiﬁcant improvements gar-
nered by using our outsourced oblivious transfer (OOT)
construction described in Section 4. Recall that with the
OOT protocol, the mobile device sends inputs for eval-
uation to the generator; however, after this occurs, the
majority of computation until the ﬁnal output veriﬁca-
tion from the cloud occurs between the generator and
the cloud, with the mobile device only performing mi-
nor consistency checks. Figure 7 shows that the amount
of data transferred increases only nominally compared
to the non-outsourced protocol. Apart from the ini-
tial set of inputs transmitted to the generator, data de-
mands are largely constant. This is further reﬂected
in Table 2, which shows the vast bandwidth savings
over the 32-circuit evaluation of our representative pro-
grams. In particular, for large, complex circuits, the sav-
ings are vast: outsourced AES-128 requires 96.3% less
bandwidth, while set intersection of size 128 requires
99.7% less bandwidth than in the non-outsourced evalua-
tion. Remarkably, the edit distance 128 problem requires
99.95%, over 1900 times less bandwidth, for outsourced
execution. The full table is in our technical report [6].
The takeaway from our evaluation is simple: outsourc-
ing the computation allows for faster and larger circuit
evaluation than previously possible on a mobile device.
Speciﬁcally, outsourcing allows users to evaluate garbled
circuits with adequate malicious model security (256 cir-
cuits), which was previously not possible on mobile de-
vices. In addition, outsourcing is by far the most efﬁcient
option if the bandwidth use of the mobile devices is a
principle concern.
7 Evaluating Large Circuits
Beyond the standard benchmarks for comparing garbled
circuit execution schemes, we aimed to provide com-
pelling applications that exploit the mobile platform with
large circuits that would be used in real-world scenar-
ios. We discuss public-key cryptography and the Dijk-
stra shortest path algorithm, then describe how the latter
can be used to implement a privacy-preserving naviga-
tion application for mobile phones.
7.1 Large Circuit Benchmarks
Table 3 shows the execution time required for a blinded
RSA circuit of input size 128. For these tests we used
a more powerful server with 64 cores and 1 Terabyte
of memory. Our testbed is able to give dedicated CPUs
when running 32 circuits in parallel. Each circuit would
have 1 core for the generation and 1 core for the evalu-
ation. As described in Section 6, larger testbeds capable
of executing 128 or 256 cores in parallel would be able to
provide similar results for executing the 256 circuits nec-
essary for a 2−80 security parameter as they could evalu-
ate the added circuits in parallel. The main difference in
execution time would come from the multiple OTs from
the mobile device to the outsourced proxy. The RSA cir-
cuit has been previously evaluated with KSS, but never
from the standpoint of a mobile device.
We only report the outsourced execution results, as the
circuits are far too large to evaluate directly on the phone.
As with the larger circuits described in Section 6, the
phone runs out of memory from merely trying to store
a representation of the circuit. Prior to optimization, the
blinded RSA circuit is 192,537,834 gates and afterward,
comprises 116,083,727 gates, or 774 MB in size.
The implementation of Dijkstra’s shortest-path algo-
rithm results in very large circuits. As shown in Table 3,
the pre-optimized size of the shortest path circuit for
20 vertices is 20,288,444 gates and after optimization
is 1,653,542 gates. The 100-node graph is even larger,
with 168,422,382 gates post optimization, 1124 MB in
size. This ﬁnal example is among the largest evaluated
300  22nd USENIX Security Symposium 