252z d- troqs 5nqpue S
## AndBug (C) 2011 Scott W. Dunlop 
使用classes命令，并提供类名的一部分，你可以看到在com.yougetitback命名空间
下有哪些类，然后使用methods命令来发现给定类中的方法：
## Loaded Classes
com.yougetitback.androidapplication.
PinDisplayScreen$xMLParserHandler
-- com.yougetitback.androidapplication.settings.main.Entrance$1
---
## Page 107
4.2案例分析：移动安全应用
91
PinDisplaySereen$PinDisplayScreenBroadcast
-- com.yougetitback,androidapplication.
com.yougetitback.androidapplicatLon.SmsIntentReceiver
-- (
com.yougetitback,androidapplication.settings.setting.Setting
com.yougetItback,androidapplicatLon.C2DMReceiver
>> methods com.yougetitback,androidapplication.SmsIntentReceiver
## Methods Lcon/yougetitbaek/androidapplication/SmsIntentReceiver;
"- com.yougetitback,androidapplication.SmsIntentReceiver,()V
-- com.yougeti tback,androidapplication.SmsIntentReceiver.
foregroundUI (Landroid/content/Context ; )V
com.yougetitback, androidapplication.SmsIntentReceiver.
getAction (Ljava/lang/String:)Ljava/lang/String:
-- con.yougetitback,androidapplLcatLon.SmsIntentReceiver,
getMessagesFromIntent (Landroid/content /Intent;) [Landroid/telephony/
SnoMessage:
-- com.yougetitbaek,androidapplication.SmsIntentReceiver.
isPinLock (Ljava/lang/String:Landroid/eontent/Context ; ) 2
sValidMessage (Ljava/lang/String: Landroid/content/Context ; ) 2
-- com.yougetitback, androidapplication.SmsIntentReceiver.
- com-yougetitback,androidapplication.SmsIntentReceiver
processUnLockMsg (Landroid/content/Context:L§ava/uti1/Vector: )V
在上面的代码中，可以看到先前进行静态分析和逆向工程的类SmsIntentReceiver，以及
你感兴趣的一些方法。现在可以跟踪方法与传递的参数与数据。首先我们来跟踪
SmsIntentReceiver类，使用AndBug中的class-trace 命令，接着向设备发送一个测试短
信，短信内容为“Test message”：
>> class-trace com.yougetitback.androidapplication.SmaIntentReceiver
## Setting Hooks
-- Hooked com.yougetitback.androidapplication,SnsIntentReceiver
com.yougetitback,androidagplication.SnsIntentReceiver
>> ## trace thread  main (running suspended)
-- com.yougetitback.androidapp1ication. SmsIntentReceiver ,()V:0
-- this=Lcom/yougetitback/androidapp1ication/SmsIntentReceiver;
830009571568>
# trace thread  nain (running suspended)
- com-youget.itback androidapplication.SmsIntentReceiver, onReceive [
Landroid/content/Context;Landroid/content/Intent ;1V:0
-- this=Lcom/yougetitback/androidapplication/SnsIntentReceiver:
-- intent=Landroid/content/Intent: 
#8 trace thread  main (running suspended)
-- com-yougetitback,androidapplication.SmsIntentReceiver,
getMessagesFronIntent (Landroid/content/Intent: )
[Landroid/telephony/SmsMessage; :0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver/
---
## Page 108
92
第4章云计算的安全风险
-- intent=Landroid/content/Intent: 
LsValidMessage (Ljava/lang/String/Landroid/content/Context ;12: 0
-- com-yougetitback.androidapplication.SmsIntentReceiver.
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
context=Landroid/app/ReceiverRestrictedContext; 
nsg=Test nessage
短信到达后，会从Telephony子系统中传递过来，然后你的钩子（hook）会触发，你就可以
从最初的onReceive方法开始往后跟踪。你看到被传递给onReceive方法的Intent消息，以及
随后熟悉的短信。后面的isValidMessage 方法中的msg变量，包含着我们的短信。这时，往
回看1ogcat的输出日志，可以看到被记录的消息内容：
I/MessageListener: ( 2252) : Test me8sage
在 class-trace 中进行进一步的深人分析，你看到对isValidMessage的调用，包括作为参
数传递过去的Context对象以及这个对象中的一组字段，在本例中，这组字段映射到从字符串列
表中获取的资源和字符串（之前你已经通过静态分析方法手工解析过这些字符串）。其中包含了
字符串YGIB：U以及对应的键值YGIBUNLOCK。回顾你对这个方法的静态分析，短信内容会被检
查是否包含这些值，如果没有包含则会调用isPinLock，如下所示：
## trace thread  nain
(running suspended)
com-yougetitback.androidapplication.SmsIntentReceiver-getAction(
Ljava/lang/String:1Ljava/1ang/String/ 10
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
=- message=Foobarbaz
LaValidMessage (Ljava/1ang/String:Landroid/content/Context / )2: 63
com-yougeti tback androidapplication. SnsIntentReceiver.
YGIBDEACTIVATE=YGIB:D
context=Landroid/app/ReceiverRestrictedContext; 
-- YGIBUNLOCK=YGIB:U
==
this=Lcom/yougetitback/androidapp1ication/SmsIntentReceiver1
:830007979232>
YGIBBACKUP=YGIB:B
-- YGIBRESYNC=YGIB:RS
YGIBLOCK=YGIB:L
YGIBMIPE=YGIB:W
YGIBRESTORS=YGIB:8
YGIBRBGFROM=YGIB:T
msg=Foobarbaz
+
## trace thread  main (running suspended)
-- com.yougetitback.androidapp1ication, SnsIntentReceiver.isPinLock(
Ljava/lang/String;Landroid/content/Context ;1Z:0
-- this=Lcom/yougeti tback/androidapplication/SmsIntentReceiver:
---
## Page 109
4.2案例分析：移动安全应用
93
-- context=Landroid/app/ReceiverRestrictedContext; 
msg=Foobarbaz
在这个实例中，isPinLock方法然后会对消息进行测试，但短信中不包含PIN码或任何像
YGIB：U这样的字符串。应用不对这条短信做任何事情，面是将其传递给链中下一个注册的
Broadcast Receiver。如果你发送一个包含YGIB：U值的短信消息，你就可能看到不同的行为：
## trace thread  main
(running suspended)
-- com.yougeti tback ,androidapplication.SmsIntentReceiver.
proces8Content (Landroid/content/Context;Ljava/1ang/String: )V:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- context=Landroid/app/ReceiverRestrictedContext; 
## trace thread  main
(running suspended)
processUnLockMsg (Landroid/content/Context ;Ljava/uti1/Vector:1V: 0
-- com-yougetitback,androidapplication.SnsIntentReceiver.
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver ;
*=
snsTokens=Ljava/uti1/Vector; 
-- context=Landroid/app/ReceivexRestrictedContext; 
proces8Content (Landroid/content/Context;Ljava/1ang/String: )V:232
-- com-yougetitback.androidapplication. SmsIntentReceiver.
=- YGIBFIND=YGIB:F
YGIBDEACTIVATE=YGIB :D
--YGIBUNLOCK=YGIB:U
context=Landroid/app/ReceiverRestrictedContext; 
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver/
-- settings=Landroid/app/ContextInpl$SharedPreferencesInp1:
n=YGIB:U
YGIBRESYNC=YGIB:RS
me88ageToken8=Ljava/uti1/Vector: 
YGIBLOCK=YGIB :L
YGIBRESTORE=YGIB:E
YGIBWIPE=YGIB:W
-= command=YGIB:U
-- YGIBRBGFROM=YGIB:T
这时，正如你所期望的那样，你将遇到processContent方法和后续的processUnLockMsg
方法。你可以在processUnLockMsg方法上设置一个断点，从面有机会更深入地检查这个方法。
你可以使用AndBug的break命令，并将类与方法的名字作为参数传递过去，来完成这一工作。
>> break com.yougetitback,androidapplication.SmsIntentReceiver
processUnLockMsg
## Setting Hooks
-- Hooked  com.yougetitback,androidapplication.
SmsIntentReceiver ,processUnLockMsg (Landroid/content/Context.:
---
## Page 110
t6
第4章云计算的安全风险
>> ## Breakpoint hit in thread  main (running suspended). process
suspended.
-- com.yougetitback.androidapplication,SmsIntentReceiver:
processUnLockMsg (Landroid/content/Context ; L§ava/uti1/Vector: )V: 0
processContent (Landroid/content/Context;Ljava/1ang/String: )V:232
-- com.yougetitback.androidapplication, SmsIntentReceiver
onRece1ve (Landroid/content/Context;Landroid/content/Intent ;)V: 60
com.yougetitback.androidapplication.SmsIntentReceiver.
 1 1
你已经从先前的分析中了解到getString会被调用，并从共享配置文件中获取某些值，所
以这时你可以在android.content.SharedPreferences 类上添加 class-trace，使用
resume命令来继续进程。
>> ct android.content.SharedPreferences
## Setting Hooks
>> resume
-- Hooked android, content.SharedPreferences
注意运行method-trace命令或在某些方法上直接设置断点，可能会导致进程阻断和进程挂
掉，所以建议只对整个类进行跟踪。另外，resume命令可能需要运行两次。
在进程恢复运行后，输出会和之前一样烦琐。再次清理下调用栈，你会最终找到getString
方法：
## Process Resumed
>> ## trace thread  main
(running suspended)
## trace thread  main
-- android.app .SharedPreferencesInp1.getString (L5ava/lang/String:
(running suspended)
Ljava/1ang/String: 1 Ljava/1ang/Stzing; : 0
this=Landroid/app/SharedPreferencesImp1: 
defValue=
-- com.yougeti tback androidapplication, SmsIntentReceiver.
-- key=tagcode