## AndBug (C) 2011 Scott W. Dunlop

使用 `classes` 命令并提供类名的一部分，可以查看 `com.yougetitback` 命名空间下的所有类。随后，通过 `methods` 命令可以发现特定类中的方法。

### 加载的类
- `com.yougetitback.androidapplication.PinDisplayScreen$xMLParserHandler`
- `com.yougetitback.androidapplication.settings.main.Entrance$1`
- `com.yougetitback.androidapplication.PinDisplayScreen$PinDisplayScreenBroadcast`
- `com.yougetitback.androidapplication.SmsIntentReceiver`
- `com.yougetitback.androidapplication.settings.setting.Setting`
- `com.yougetitback.androidapplication.C2DMReceiver`

### 方法列表
```plaintext
>> methods com.yougetitback.androidapplication.SmsIntentReceiver
```
- `SmsIntentReceiver()V`
- `foregroundUI(Landroid/content/Context;)V`
- `getAction(Ljava/lang/String;)Ljava/lang/String;`
- `getMessagesFromIntent(Landroid/content/Intent;)[Landroid/telephony/SmsMessage;`
- `isPinLock(Ljava/lang/String;Landroid/content/Context;)Z`
- `isValidMessage(Ljava/lang/String;Landroid/content/Context;)Z`
- `processUnLockMsg(Landroid/content/Context;Ljava/util/Vector;)V`
```

在上述代码中，可以看到之前进行静态分析和逆向工程的 `SmsIntentReceiver` 类及其一些方法。现在可以跟踪这些方法以及传递的参数和数据。首先，我们使用 AndBug 中的 `class-trace` 命令来跟踪 `SmsIntentReceiver` 类，并发送一条测试短信（内容为 "Test message"）：

```plaintext
>> class-trace com.yougetitback.androidapplication.SmsIntentReceiver
## Setting Hooks
-- Hooked com.yougetitback.androidapplication.SmsIntentReceiver
>> ## trace thread main (running suspended)
-- com.yougetitback.androidapplication.SmsIntentReceiver.<init>()V:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver; @830009571568
-- com.yougetitback.androidapplication.SmsIntentReceiver.onReceive(Landroid/content/Context;Landroid/content/Intent;)V:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- intent=Landroid/content/Intent;
-- com.yougetitback.androidapplication.SmsIntentReceiver.getMessagesFromIntent(Landroid/content/Intent;)[Landroid/telephony/SmsMessage;:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- intent=Landroid/content/Intent;
-- com.yougetitback.androidapplication.SmsIntentReceiver.isValidMessage(Ljava/lang/String;Landroid/content/Context;)Z:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- context=Landroid/app/ReceiverRestrictedContext;
-- msg=Test message
```

当短信到达时，会从 Telephony 子系统传递过来，触发你的钩子（hook），从而可以从 `onReceive` 方法开始跟踪。你可以看到传递给 `onReceive` 方法的 `Intent` 消息以及随后的短信内容。在 `isValidMessage` 方法中，`msg` 变量包含着我们的短信。检查 `logcat` 输出日志，可以看到记录的消息内容：

```plaintext
I/MessageListener: (2252): Test message
```

进一步分析 `class-trace`，可以看到对 `isValidMessage` 的调用，包括作为参数传递过去的 `Context` 对象及其字段。这些字段映射到从字符串列表中获取的资源和字符串。其中包含了字符串 `YGIB:U` 以及对应的键值 `YGIBUNLOCK`。回顾你对这个方法的静态分析，短信内容会被检查是否包含这些值，如果没有包含则会调用 `isPinLock`，如下所示：

```plaintext
## trace thread main (running suspended)
-- com.yougetitback.androidapplication.SmsIntentReceiver.getAction(Ljava/lang/String;)Ljava/lang/String;:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- message=Foobarbaz
-- com.yougetitback.androidapplication.SmsIntentReceiver.isValidMessage(Ljava/lang/String;Landroid/content/Context;)Z:63
-- this=Lcom/youougetitback/androidapplication/SmsIntentReceiver;
-- YGIBDEACTIVATE=YGIB:D
-- YGIBUNLOCK=YGIB:U
-- YGIBBACKUP=YGIB:B
-- YGIBRESYNC=YGIB:RS
-- YGIBLOCK=YGIB:L
-- YGIBWIPE=YGIB:W
-- YGIBRESTORE=YGIB:E
-- YGIBRBGFROM=YGIB:T
-- msg=Foobarbaz
-- com.yougetitback.androidapplication.SmsIntentReceiver.isPinLock(Ljava/lang/String;Landroid/content/Context;)Z:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- context=Landroid/app/ReceiverRestrictedContext;
-- msg=Foobarbaz
```

在这个例子中，`isPinLock` 方法会对消息进行测试，但短信中不包含 PIN 码或任何像 `YGIB:U` 这样的字符串。应用程序不对这条短信做任何处理，而是将其传递给链中下一个注册的 Broadcast Receiver。如果你发送一个包含 `YGIB:U` 值的短信消息，可能会看到不同的行为：

```plaintext
## trace thread main (running suspended)
-- com.yougetitback.androidapplication.SmsIntentReceiver.processContent(Landroid/content/Context;Ljava/lang/String;)V:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- context=Landroid/app/ReceiverRestrictedContext;
-- com.yougetitback.androidapplication.SmsIntentReceiver.processUnLockMsg(Landroid/content/Context;Ljava/util/Vector;)V:0
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- smsTokens=Ljava/util/Vector;
-- context=Landroid/app/ReceiverRestrictedContext;
-- com.yougetitback.androidapplication.SmsIntentReceiver.processContent(Landroid/content/Context;Ljava/lang/String;)V:232
-- this=Lcom/yougetitback/androidapplication/SmsIntentReceiver;
-- YGIBFIND=YGIB:F
-- YGIBDEACTIVATE=YGIB:D
-- YGIBUNLOCK=YGIB:U
-- YGIBRESYNC=YGIB:RS
-- YGIBLOCK=YGIB:L
-- YGIBRESTORE=YGIB:E
-- YGIBWIPE=YGIB:W
-- command=YGIB:U
-- YGIBRBGFROM=YGIB:T
```

这时，正如预期的那样，你会遇到 `processContent` 方法和后续的 `processUnLockMsg` 方法。可以在 `processUnLockMsg` 方法上设置一个断点，以便更深入地检查这个方法。使用 AndBug 的 `break` 命令并将类与方法的名字作为参数传递过去，可以完成这一工作。

```plaintext
>> break com.yougetitback.androidapplication.SmsIntentReceiver processUnLockMsg
## Setting Hooks
-- Hooked com.yougetitback.androidapplication.SmsIntentReceiver, processUnLockMsg (Landroid/content/Context;Ljava/util/Vector;)V
>> ## Breakpoint hit in thread main (running suspended). Process suspended.
-- com.yougetitback.androidapplication.SmsIntentReceiver.processUnLockMsg (Landroid/content/Context;Ljava/util/Vector;)V:0
-- com.yougetitback.androidapplication.SmsIntentReceiver.processContent (Landroid/content/Context;Ljava/lang/String;)V:232
-- com.yougetitback.androidapplication.SmsIntentReceiver.onReceive (Landroid/content/Context;Landroid/content/Intent;)V:60
```

你已经从先前的分析中了解到 `getString` 会被调用，并从共享配置文件中获取某些值。因此，可以在 `android.content.SharedPreferences` 类上添加 `class-trace`，使用 `resume` 命令继续进程。

```plaintext
>> ct android.content.SharedPreferences
## Setting Hooks
>> resume
-- Hooked android.content.SharedPreferences
```

注意，运行 `method-trace` 命令或在某些方法上直接设置断点可能会导致进程阻塞甚至崩溃，因此建议只对整个类进行跟踪。另外，可能需要运行两次 `resume` 命令。

在进程恢复运行后，输出会非常详细。再次清理调用栈，最终会找到 `getString` 方法：

```plaintext
## Process Resumed
>> ## trace thread main (running suspended)
-- android.app.SharedPreferencesImpl.getString (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;:0
-- this=Landroid/app/SharedPreferencesImpl;
-- defValue=
-- key=tagcode
```

希望这能帮助你更好地理解和调试代码。