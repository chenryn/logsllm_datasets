**当依赖或者源程序中不存在可以执行命令的方法时，可以选择使用`TemplatesImpl`作为命令执行载体，并想办法去触发它的`newTransformer`或`getOutputProperties`方法**
也就是上面我们所说的第二个类`org.apache.xalan.xsltc.trax.TemplatesImpl`，这个类是 jdk7u21 原生
gadget 链中我们需要当初命令执行载体的类。
那么这个类如果构建 evil 类需要满足哪些条件呢？已经有师傅总结成了以下几个条件：
  1. TemplatesImpl类的 `_name` 变量 != null
  2. TemplatesImpl类的`_class`变量 == null
  3. TemplatesImpl类的 `_bytecodes` 变量 != null
  4. TemplatesImpl类的`_bytecodes`是我们代码执行的类的字节码。
  5. 执行的恶意代码写在`_bytecodes` 变量对应的类的静态方法或构造方法中。
  6. TemplatesImpl类的`_bytecodes`是我们代码执行的类的字节码。`_bytecodes`中的类必须是`com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet`的子类
  7. TemplatesImpl类的`_tfactory`需要是一个拥有`getExternalExtensionsMap()`方法的类，通常使用`jdk`自带的`TransformerFactoryImpl()`类
`TemplatesImpl`有四个方法：
  * `TemplatesImpl.getOutputProperties()`
  * `TemplatesImpl.newTransformer()`
  * `TemplatesImpl.getTransletInstance()`
  * `TemplatesImpl.defineTransletClasses()`
但是对于后两个来说，是`private`方法，只能被对象可调用方法间接调用，而前两者是`public`方法，可以被对象直接调用。
那么第一阶段我们便明白了——利用`TemplatesImpl`注入我们要构造的恶意类，然后想办法触发它的`newTransformer`或`getOutputProperties`方法。
怎么触发？`frohoff`给了我们答案——`AnnotationInvocationHandler.invoke`
那么这个方法为何能够触发呢？继续翻源码！
    public Object invoke(Object proxy, Method method, Object[] args) {
            String member = method.getName();
            Class[] paramTypes = method.getParameterTypes();
            // Handle Object and Annotation methods
            if (member.equals("equals") && paramTypes.length == 1 &&
                paramTypes[0] == Object.class)
                return equalsImpl(args[0]);
            ...
        }
可以看到当调用方法为 `equals`并满足相关条件时，会继续调用内部方法`equalsImpl()`，跟进`equalsImpl()`
    private Boolean equalsImpl(Object o) {
            if (o == this)
                return true;
            if (!type.isInstance(o))
                return false;
            for (Method memberMethod : getMemberMethods()) {
                String member = memberMethod.getName();
                Object ourValue = memberValues.get(member);
                Object hisValue = null;
                AnnotationInvocationHandler hisHandler = asOneOfUs(o);
                if (hisHandler != null) {
                    hisValue = hisHandler.memberValues.get(member);
                } else {
                    try {
                        hisValue = memberMethod.invoke(o);
                    } catch (InvocationTargetException e) {
                        return false;
                    } catch (IllegalAccessException e) {
                        throw new AssertionError(e);
                    }
                }
                if (!memberValueEquals(ourValue, hisValue))
                    return false;
            }
            return true;
        }
在`equalsImpl()`方法里，会首先判断传入的 Object 对象是否为 type 对象的实例，然后调用 type class
的所有方法，再依次调用。
这样分析下来就清楚了，只要我们在实例化`AnnotationInvocationHandler`时传入`Templates.class`，然后令`equals()`的参数为
type 的实现类就可以实现`getOutputProperties`方法的触发。
到这里我们的问题又来了。
接下来的后续链又如何寻找呢？
其实在这个类的开始，有一段话如下：
`InvocationHandler for dynamic proxy implementation of Annotation.`
`InvocationHandler 用于 Annotation 的动态代理实现。`
那么根据前面动态代理相关的知识我们知道，
**当为某个类或接口指定`InvocationHandler`对象时，在调用该类或接口方法时，就会去调用指定`handler`的`invoke()`方法**。因此，当我们使用`AnnotationInvocationHandler`创建`proxy
object`，那么调用的所有方法都会变成对`invoke`方法的调用。
也就是说，我们需要使用 `AnnotationInvocationHandler` 创建 `Proxy Object` 并让其代理 `Templates`
接口，然后再调用`proxy object`的 `equals`方法，将`Templates`当成参数传入就完成了前部分链的组装。
现在，我们的目标实际上就变成了如何调用`Proxy.equals(EvilTemplates.class)`。
现在让我们总结一下能寻找到满足条件场景的条件：
  * 要能够调用 proxy 的 equals 方法（这是我们刚才分析的）
  * 要有反序列化接口——要能调用`readObject()`方法（这样才可以将我们的序列化数据传进去开始反序列化）
不向下说，我们先来看看`ysoserial`中的反序列化载体有哪些：
  * `AnnotationInvocationHandler` （CC1、CC3、 Groovy1）
  * `PriorityQueue` （CC2、CC4）
  * `BadAttributeValueExpException` （CC5、 MozillaRhino1 ）
  * `HashSet` （CC6）
  * `HashMap` （ Hibernate1 、 Hibernate2、 JSON1 、 Myfaces1 、 Myfaces2 、 ROME ）
  * `org.jboss.interceptor.proxy.InterceptorMethodHandler` （ JBossInterceptors1 、 JavassistWeld1 ）
  * `org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider` （ Spring1 、 Spring2 ）
这些反序列化载体中大多数是通过对元素进行一些操作，然后触发了后续链的调用。
实际上我猜测`jdk7u21`的作者`frohoff`可能也是通过这样的思考最终找到了`LinkedHashSet`类。
`LinkedHashSet` 位于 `java.util` 包内，是`HashSet`的子类，向其添加到 set
的元素会保持有序状态，并且在`LinkedHashSet.readObject()`的方法中，当各元素被放进`HashMap`时，第二个元素会调用`equals()`与第一个元素进行比较——这样一来恰好就满足了我们上面所说的两个条件。
所以在这里我们只要反序列化过程中让`Pproxy Object`
先添加，然后再添加包含恶意代码的实例，就会变成，`Proxy.equals(EvilTemplates.class)`，它被代理给`AnnotationInvocationHandler`类，并且进入`equalsImpl()`方法，在`getMemberMethods()`遍历`TemplatesImpl`的方法遇到`getOutputProperties`进行调用时，导致命令执行，从而完美的实现了整个攻击链。
到这里其实整个漏洞就分析完了，但是在`LinkedHashSet`链中还有一个有意思的地方。
`LinkedHashSet --> HashSet --> HashSet.readObject() --> HashMap.put()`
    // 将指定值与此映射中的指定键相关联
      public V put(K key, V value) {
            if (key == null)
                return putForNullKey(value);
            int hash = hash(key.hashCode());
            int i = indexFor(hash, table.length);
            for (Entry e = table[i]; e != null; e = e.next) {
                Object k;
    // 关键点
                if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
                    V oldValue = e.value;
                    e.value = value;
                    e.recordAccess(this);
                    return oldValue;
                }
            }
            modCount++;
            addEntry(hash, key, value, i);
            return null;
        }
在`put`方法里，有一个条件：`if (e.hash == hash && ((k = e.key) == key || key.equals(k)))`
如果想要走到`key.equals(k)`就必须满足`e.hash == hash`并且`k!=e.key`。
对于`k == e.key`很好判断，因为`EvilTemplates newInstance != Proxy Object`，那`e.hash ==
hash`应该如何判断呢？
实际上看源代码就知道，要让`127 * ((String)var3.getKey()).hashCode()`的结果等于0
，也就是`(String)var3.getKey()).hashCode()`的值要为零，这样才可以满足那个`if`判断。
这里利用的其实就是hash碰撞。
经过碰撞我们得到了碰撞的第一个结果`f5a5a608`，也就是 payload 中的`map.put('f5a5a608',
templates);`这样写的原因。
整个流程可以总结成如下的思维导图：
## 0x06 漏洞修复
互联网上对于`jdk7u21`原生gadget链修复方式有两种讨论。
**第一种：**
**第二种：**
实际上经过我的测试发现，其实这两种说法都没有问题。
首先来看存在漏洞的最后一个版本（`611bcd930ed1`）：
查看其 children
版本（`0ca6cbe3f350`）：
compare一下：
    // 改之前
            AnnotationType annotationType = null;
            try {
                annotationType = AnnotationType.getInstance(type);
            } catch(IllegalArgumentException e) {
                // Class is no longer an annotation type; all bets are off
               return;
            }
    // 改之后
            AnnotationType annotationType = null;
            try {
                annotationType = AnnotationType.getInstance(type);
            } catch(IllegalArgumentException e) {
                // Class is no longer an annotation type; time to punch out
                throw new java.io.InvalidObjectException("Non-annotation type in annotation serial stream");
            }
可以发现，在第一次的修复中，官方采用的方法是网上的第二种讨论，即将以前的 return 改成了抛出异常。
继续查看`0ca6cbe3f350`的`children`版本（`654a386b6c32`）：
可以发现在 `AnnotationInvocationHandler`构造方法的一开始的位置，就对于`this.type`进行了校验。
    // 改之前：
    AnnotationInvocationHandler(Class type, Map memberValues) {
            this.type = type;
            this.memberValues = memberValues;
        }
    // 改之后：
    AnnotationInvocationHandler(Class type, Map memberValues) {
            Class[] superInterfaces = type.getInterfaces();
            if (!type.isAnnotation() ||
                superInterfaces.length != 1 ||
                superInterfaces[0] != java.lang.annotation.Annotation.class)
                throw new AnnotationFormatError("Attempt to create proxy for a non-annotation type.");
            this.type = type;
            this.memberValues = memberValues;
        }
此外，除了在构造方法处的验证，在其获取成员方法时，也做了验证：
验证内容如下：
    private void validateAnnotationMethods(Method[] memberMethods) {
            boolean valid = true;
            for(Method method : memberMethods) {
                if (method.getModifiers() != (Modifier.PUBLIC | Modifier.ABSTRACT) ||
                    method.getParameterTypes().length != 0 ||
                    method.getExceptionTypes().length != 0) {
                    valid = false;
                    break;
                }
    Class returnType = method.getReturnType();
                if (returnType.isArray()) {
                    returnType = returnType.getComponentType();
                    if (returnType.isArray()) { // Only single dimensional arrays
                        valid = false;
                        break;
                    }
                }
                if (!((returnType.isPrimitive() && returnType != void.class) ||
                      returnType == java.lang.String.class ||
                      returnType == java.lang.Class.class ||
                      returnType.isEnum() ||
                      returnType.isAnnotation())) {
                    valid = false;
                    break;
                }
                String methodName = method.getName();
                if ((methodName.equals("toString") && returnType == java.lang.String.class) ||
                    (methodName.equals("hashCode") && returnType == int.class) ||
                    (methodName.equals("annotationType") && returnType == java.lang.Class.class)) {
                    valid = false;
                    break;
                }
            }
            if (valid)
                return;
            else
                throw new AnnotationFormatError("Malformed method on an annotation type");
        }
`validateAnnotationMethods`验证方法对注解类型中声明的方法进行了限制，禁止了包含静态方法和声明的方法，要求注释类型必须采用零个参数并且对返回类型也做了限制。
所以，个人总结，网上讨论的两种修复方式其实都没有问题，只是因为不同的jdk版本导致了修复方式不完全一样，也导致`payload`会在不同的地方被拦截，从而出现不一样的错误。
如下图时在`jdk1.8.151`中出现的错误。
下图时在`jdk7u25`中出现的错误。
## 0x07 总结
整个jdk7u21反序列化gadget链的构建非常经典，链中融合了大量的基础知识以及小技巧，个人认为是对于理解并学习反序列化漏洞的必学知识点，此文是本人学习记录，如存在问题欢迎各位师傅斧正。
## 0x08 参考