#include 
#include 
#include 
#include 
/* 要连接到的端口号 */
#define MYPORT 5000
/* 能够接收的最长数据 */
#define MAXBUFLEN 100
main()
{
int sockfd;
/* 本机的地址信息 */
struct sockaddr_in my_addr;
/* 连接这的地址信息 */
struct sockaddr_in their_addr;
int addr_len, numbytes;
char buf[MAXBUFLEN];
/* 取得一个套接字描述符 */
if（(sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1）
{
/* 如果取得套接字描述符失败，则给出错误信息，退出 */
perror(“socket”);
exit(1);
}
/* 主机字节顺序 */
my_addr.sin_family = AF_INET;
/* 网络字节顺序，短整型 */
my_addr.sin_port = htons(MYPORT);
/* 自动设置为自己的 IP */
my_addr.sin_addr.s_addr = INADDR_ANY;
第 6 章  berkeley 套接字
- 167 -
/* 将结构的其余空间清零 */
bzero(&(my_addr.sin_zero), 8);
/* 绑定端口 */
if (bind(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr)) == -1)
{
/* 如果绑定端口出错，则显示错误信息然后退出 */
perror(“bind”);
exit(1);
}
addr_len = sizeof(struct sockaddr);
/* 接收数据 */
if ((numbytes=recvfrom(sockfd, buf, MAXBUFLEN, 0,
(struct sockaddr *)&their_addr, &addr_len)) == -1)
{
/* 如果 recvfrom()调用出错，则显示错误信息后退出 */
perror(“recvfrom”);
exit(1);
}
/* 显示接收到的数据 */
printf(“got packet from %s\n”,inet_ntoa(their_addr.sin_addr));
printf(“packet is %d bytes long\n”,numbytes);
buf[numbytes] = ‘\0’;
printf(“packet contains \”%s\“\n”,buf);
/* 关闭套接字连接 */
close(sockfd);
}
注意我们调用 socket()函数的时候使用的是 SOCK_DGRAM 为参数。而且，我们并不
需要 listen()或是 accept()。这是因为我们使用了无连接的使用者数据报套接字！
下面的是 talker.c 的源码：
#include 
#include 
#include 
#include 
#include 
#include 
- 168 -
Linux网络编程
#include 
#include 
#include 
/* 要连接的端口 */
#define MYPORT 5000
int main(int argc, char *argv[])
{
int sockfd;
/* 连接者的地址信息 */
struct sockaddr_in their_addr;
struct hostent *he;
int numbytes;
if (argc != 3)
{
/* 检测是否有所须参数，如没有，则显示使用方法后退出 */
fprintf(stderr,“usage: talker hostname message\n”);
exit(1);
}
if ((he=gethostbyname(argv[1])) == NULL)
{  
/* 取得主机的信息，如果失败则显示错误信息后退出 */
herror(“gethostbyname”);
exit(1);
}
if（(sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
{
/* 申请一个数据报套接字描述符，失败则退出 */
perror (“socket”);
exit(1);
}
/* 主机字节顺序 */
their_addr.sin_family = AF_INET;
/* 网络字节顺序，短整型 */
第 6 章  berkeley 套接字
- 169 -
their_addr.sin_port = htons(MYPORT);
their_addr.sin_addr = *((struct in_addr *)he->h_addr);
/* 将结构中未用的部分清零 */
bzero(&(their_addr.sin_zero), 8);
if ((numbytes=sendto(sockfd, argv[2], strlen(argv[2]), 0,
(struct sockaddr *)&their_addr, sizeof(struct sockaddr))) == -1)
{
/* 把信息发送到指定的主机指定端口，如出错则提示退出 */
perror(“recvfrom”);
exit(1);
}
printf(“sent %d bytes to %s\n”,numbytes,inet_ntoa(their_addr.sin_addr));
/* 关闭套接字描述符后退出 */
close(sockfd);
return 0;
}
上面这两个程序，你需要在一台主机上首先运行 listener，然后在另外一台主机上运行
talker。现在看到它们之间的通讯了吗？
最后，我们要注意一点：使用连接的数据报套接字。因为我们在讲使用数据报，所以
我们需要了解它。如果我们的 talker 程序使用了 connect()函数来连接 listener 的地址，那么
talker 程序就能够使用 sent()和 recv()来处理数据了。因为 talker 程序在 connect()函数中已
经知道了远程主机的地址和端口号．
6.9  保留端口
6.9.1  简介
大多数网络应用程序使用两个协议：传输控制协议（TCP）和用户数据包协议（UDP）。
他们都使用一个端口号以识别应用程序。端口号为主机上所运行之程序所用，这样就可以
通过号码象名字一样来跟踪每个应用程序。端口号让操作系统更容易的知道有多少个应用
程序在使用系统，以及哪些服务有效。
理论上，端口号可由每台主机上的管理员自由的分配。但为了更好的通信通常采用一
些约定的协议。这些协议使能通过端口号识别一个系统向另一个系统所请求的服务的类
型。基于如此理由，大多数系统维护一个包含端口号及它们所提供哪些服务的文件。
端口号被从 1 开始分配。通常端口号超出 255 的部分被本地主机保留为私有用途。1
到 255 之间的号码被用于远程应用程序所请求的进程和网络服务。每个网络通信循环地进
出主计算机的 TCP 应用层。它被两个所连接的号码唯一地识别。这两个号码合起来叫做套
接字.组成套接字的这两个号码就是机器的 IP 地址和 TCP 软件所使用的端口号。
因为网络通讯至少包括两台机器，所以在发送和接收的机器上都存在一个套接字。由
于每台机器的 IP 地址是唯一的。端口号在每台机器中也是唯一的，所以套接字在网络中应
- 170 -
Linux网络编程
该是唯一的。这样的设置能使网络中的两个应用程序完全的基于套接字互相对话。
发送和接收的机器维护一个端口表，它列出了所有激活的端口号。两台机器都包括一
个进程叫做绑定，这是每个任务的入口，不过在两台机器上恰恰相反。换句话说，如果一
台机器的源端口号是 23 而目的端口号被设置成 25，那么另一台机器的源端口号设置成 25
目的端口号设置成 23。
6.9.2  保留端口
系统留有 1024 个保留端口。这些端口是留给系统使用的，在系统中，只有具有 Root
权利的人才可以使用 1024 以下的端口（包括 1024）
这里是 RedHat 6.0 中 /etc/services 文件：
[root@bbs /etc]# cat /etc/services
# /etc/services:
# $Id: services,v 1.4 1997/05/20 19:41:21 tobias Exp $
#
# Network services, Internet style
#
# Note that it is presently the policy of IANA to assign a single well-known
# port number for both TCP and UDP; hence, most entries here have two entries
# even if the protocol doesn‘t support UDP operations.
# Updated from RFC 1700, “Assigned Numbers” (October 1994).  Not all ports
# are included, only the more common ones.
tcpmux         1/tcp                           # TCP port service multiplexer
ztelnet         
2/tcp
echo            7/tcp
echo            7/udp
discard         
9/tcp           sink null
discard         
9/udp           sink null
systat          
11/tcp          users
daytime         13/tcp
daytime         13/udp
netstat         
15/tcp
qotd            17/tcp          quote
msp             18/tcp                          # message send protocol
msp             18/udp                          # message send protocol
chargen         19/tcp          ttytst source
chargen         19/udp          ttytst source
ftp-data        
20/tcp
ftp               21/tcp
第 6 章  berkeley 套接字
- 171 -
fsp             21/udp          fspd
ssh             22/tcp                          # SSH Remote Login Protocol
ssh             22/udp                          # SSH Remote Login Protocol
telnet          23/tcp
#stelnet                30/tcp
# 24 - private
smtp            25/tcp          mail
# 26 - unassigned
time            37/tcp          timserver
time            37/udp          timserver
rlp             39/udp          resource        # resource location
nameserver      42/tcp          name            # IEN 116
whois           43/tcp          nicname
re-mail-ck      50/tcp                          # Remote Mail Checking Protocol
re-mail-ck      50/udp                          # Remote Mail Checking Protocol
domain          53/tcp          nameserver      # name-domain server
domain          53/udp          nameserver
mtp             57/tcp                          # deprecated
bootps          67/tcp                          # BOOTP server
bootps          67/udp
bootpc          68/tcp                          # BOOTP client
bootpc          68/udp
tftp            69/udp
gopher          70/tcp                          # Internet Gopher
gopher          70/udp
rje             77/tcp          netrjs
finger          79/tcp
www             80/tcp          http            # WorldWideWeb HTTP
www             80/udp                          # HyperText Transfer Protocol
link            87/tcp          ttylink
kerberos        88/tcp          kerberos5 krb5  # Kerberos v5
kerberos        88/udp          kerberos5 krb5  # Kerberos v5
supdup          95/tcp
# 100 - reserved
hostnames       101/tcp         hostname        # usually from sri-nic
iso-tsap        102/tcp         tsap            # part of ISODE.
csnet-ns        105/tcp         cso-ns          # also used by CSO name server
csnet-ns        105/udp         cso-ns
# unfortunately the poppassd (Eudora) uses a port which has already
- 172 -
Linux网络编程
# been assigned to a different service. We list the poppassd as an
# alias here. This should work for programs asking for this service.
# (due to a bug in inetd the 3com-tsmux line is disabled)
#3com-tsmux     106/tcp         poppassd
#3com-tsmux     106/udp         poppassd
rtelnet         107/tcp                         # Remote Telnet
rtelnet         107/udp
pop-2           109/tcp         postoffice      # POP version 2
pop-2           109/udp
pop-3           110/tcp                         # POP version 3
pop-3           110/udp
sunrpc          111/tcp         portmapper      # RPC 4.0 portmapper TCP
sunrpc          111/udp         portmapper      # RPC 4.0 portmapper UDP
#by zixia RPC           111/tcp         portmapper      # RPC 4.0 portmapper TCP
#RPC            111/udp         portmapper      # RPC 4.0 portmapper UDP
auth            113/tcp         authentication tap ident
sftp            115/tcp
uucp-path       117/tcp