156
217
30
100
68
216
64
208
25
50
55
60
2
2
3
2
2
3
2
2
3
2
2
3
1
3
1
3
1
3
2
4
2
2
Non-linear Randomness
1
2
2
190
305
405
2
5/2
3
5
5
6
-10.54
-12.00
-4.28
[-10.45, -8.73]
[-4.81, -4.61]
[-5.50,-4.01]
[-6.48,-4.70]
[-7.81,-5.03]
[-8.47,-4.15]
[-5.92,-5.54]
[-6.92,-5.93]
[-8.02,-3.87]
[-5.42,-4.36]
[-8.40,-4.40]
[-7.94,-4.25]
-5.27
-5.40
-6.96
-4.84
-5.21
-6.17
[4.67,-4.42]
24min
13min
28min
2min
5min
21min
11min
17min
3h
12min
24min
33min
1sec
18min
4min
4h
27sec
55min
1sec
1min
10min
41sec
-9.85
[-10.01,-8.09]
[-9.67,-7.66]
5min
31min
31h
model, and maskVerif, matverif and SILVER in the probing
model. The description ﬁles of the gadgets tested in the fol-
lowing sections are publicly available on IronMask’s GitHub
repository.
A. New Random Probing Expandability Results
So far, VRAPS [13] was the only tool verifying the (t, p, ε)-
RPE property. IronMask is several orders of magnitude faster
than VRAPS, in addition to being complete (IronMask avoids
failure false positives i.e. detected failure tuples which are
not really failures, unlike VRAPS), allowing us to compute
more precise bounds for the coefﬁcient of the failure function
f (p) = ε (c.f. Section II-B) and hence more precise bounds on
the tolerated leakage probability. In particular, we consider the
ISW multiplication and refresh [31], the n log n refresh [9],
the circular refresh [7], as well as the addition, copy, and
multiplication from [16, Section 6.2]. Additionally, we con-
sider addition (resp. copy) gadgets obtained by doing an ISW
or n log n refresh on one of the inputs followed by a simple
addition (resp. copy). Finally, we also evaluate a double-SNI
multiplication [30] made of an ISW multiplication where one
of the inputs is refreshed using a n circular refreshes [24]
(with n shares).
The result are shown in Table IV. For the t parameters,
we used t = (cid:18)(n − 1)/2(cid:19) (with n shares), as recommended
by [16]. For large gadgets, we cannot compute precisely the
maximum leakage probability tolerated in reasonable time.
Instead, like [13], we compute all failures up to a given size
11
152
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
cmax, which allows us to obtain upper and lower bounds for
the leakage probability.
For ISW multiplication, our results improve previous results
from [13] (obtained with VRAPS) in two ways: by increasing
the value cmax of the veriﬁcation we obtain tighter bounds on
the failure event function f (p) and thus tighter intervals (and
even exact values in some cases) for the tolerated leakage
probability. Plus, thanks to the completeness of the veriﬁca-
tion of IronMask by avoiding failure false positives (unlike
VRAPS), we obtain better values for the estimated tolerated
leakage probability (by better we mean higher probability
values). For example, our results show that the (exact) tolerated
−12
leakage probability of the 6-share ISW multiplication is 2
−13 lower bound of [13]. We obtain similar
instead of the 2
improvements for the 5-share gadgets of [16] which are today
the gadgets giving the best asymptotic complexity of O(κ3.23)
for the expansion strategy with a constant leakage probability
−κ. Our results
and for a target random probing security of 2
improve the lower bound on the tolerated leakage probability
−9.67. For all the other gadgets
for those gadgets from 2
in the table, we report the ﬁrst veriﬁcation results of the RPE
property.
−12 to 2
B. Comparison with State-Of-The-Art Tools
tools: maskVerif
We compare IronMask to six carefully chosen state-of-
the-art
(and its extension
scVerif [8]), matverif [18], SILVER [32], VRAPS [13], and
STRAPS [19], with which our new tool IronMask shares the
following features:
[6],
[5],
[3]
• does not rely on any gadget’s structure (unlike e.g.,
maskComp [6], tightPROVE [15], Tornado [14]),
• veriﬁes probing or random probing-like security notions.
We discuss the properties that are concretely veriﬁed, and
provide some benchmarks to highlight the main differences
with IronMask.
it
1) Scope: Introduced in 2015 [5] and then extended mul-
tiple times ([6], [3]), maskVerif is the very ﬁrst tool able
to verify reasonable higher-order masking schemes. Based
on a symbolic representation of leakage,
integrates the
language-based veriﬁcation of (robust) probing security and
(S)NI notions with or without leakage on registers transitions.
One step further, the latest extension of maskVerif, referred
to as scVerif [19], captures even more hardware side effects,
potentially conﬁgurable by the user [8]. Compared to our
proposal, maskVerif includes tricks to verify bigger circuits
(e.g., s-boxes, block encryption scheme) but fails to provide a
complete veriﬁcation as soon as the randomness is not linear
(i.e., failure false positives may be produced).
In the same vein, matverif [18] targets the same properties
as maskVerif. It features a new method to obtain a complete
veriﬁcation (i.e., without any failure false positive) for speciﬁc
circuits (e.g., ISW multiplications) and signiﬁcantly improve
its performance thanks to dimension-reduction strategies. In
terms of supported gadgets, matverif is more limited than
maskVerif and IronMask, as it does not support gadgets with
non-linear randomness at all. Unlike our proposal and similarly
to maskVerif, matverif focuses only on the veriﬁcation of
probing-like properties.
Following a different strategy, SILVER [32] was built to
verify the physical security of hardware designs. It takes as
input either a Verilog implementation or an instruction list and
checks the probing, (S/PI)NI notions in the standard and robust
models, as well as the uniformity of some output sharing. On
the one hand, it outperforms the capacities of maskVerif by
offering a complete veriﬁcation based on a symbolic and
exhaustive analysis of probability distributions and statistical
independence of joint distributions. On the other hand, its
veriﬁcation is signiﬁcantly slower than that of maskVerif.
tool
it was built
Introduced in 2020, VRAPS is the ﬁrst
to verify
random-probing-like properties [13] (to the best of our knowl-
edge). Written in Python and SageMath,
to
evaluate the RPE security of some base gadgets, in order to
assess the global security of the expanding compiler of [13].
Speciﬁcally, VRAPS detects all the leaking tuples within an
implementation with respect to the RPS(cid:5), RPE1, RPE2 and
RPC security properties introduced in Section II. Nevertheless,
it suffers from low performance and, unlike IronMask, can
generate failure false positives for both gadgets with linear and
non-linear randomness. VRAPS supports more gadgets than
IronMask which is limited to LR-gadgets and NLR-gadgets.
Nevertheless, to the best of our knowledge, all the masking
gadgets in the literature ﬁt the latter representations. While
VRAPS can additionally (directly) verify bigger gadgets (i.e.,
composition of atomic gadgets), in practice, the performance
and the completeness would be very low. In addition, the ver-
iﬁcation of atomic gadgets using IronMask already makes it
possible to obtain secure global circuits since once individually
veriﬁed (for probing or random probing properties), they can
be safely composed [6], [13].
Finally, STRAPS is a very recent tool designed to verify
random probing-like properties [19]. In particular,
it was
built to compute the distribution of a gadget’s input sets of
shares with respect to the output observations and the leakage
probability of each internal wire. In its deterministic mode, it
relies on maskVerif as a basic primitive. One step further, it
integrates a probabilistic mode, based on Monte-Carlo meth-
ods, which signiﬁcantly improves the performance by avoiding
a full exploration and limiting the analysis to selected tuples.
While the probabilistic mode can allow increased performance
and thus more accurate results for random probing properties,
it uses a set of rules from maskVerif as a building block .
These rules by construction do not provide complete veriﬁca-
tion, which implies that the veriﬁcation method of STRAPS is
not complete either.
Table V recalls the categories of properties (as in Section II)
that are veriﬁed by the aforementioned tools on higher-order
masked implementations. It additionally speciﬁes the consid-
eration of hardware effects, i.e. glitches (captured in the robust
probing model). A green check () means that the row tool
veriﬁes the column property. On the contrary, a red cross ()
means that the column property is not handled by the row
tool. We can see that IronMask is the ﬁrst tool to provide
12
153
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
TABLE V: Veriﬁed security properties on higher-order masked
implementations for carefully chosen state-of-art automatic
tools.
RP-like
robust
Tools
maskVerif
scVerif
matverif
SILVER
VRAPS
STRAPS
IronMask
probing-like
soft
robust














soft














TABLE VI: Comparison of the performance of IronMask,
maskVerif and matverif on higher-order masked gadgets.
The multithreaded versions of each tools were used, with the
maximum number of threads set to 4. N/A means that a tool
cannot check a gadget, whereas - means that a tool was not
evaluated on a gadget because we deemed it too slow.
Gadget
e
p
y
T
s
e
r
a
h
S
ISW mult
LR
ISW mult
refreshed
NLR
NI mult
[18]
SNI mult
[18]
LR
LR
refresh
n log n
LR
7
8
9
6
7
8
7
8
9
10
7
8
9
10
9
10
11
12
y
t
r