### Analysis to Produce the Authorization Graph

The authorization graph is generated through a detailed analysis, which links each kernel function to the set of hooks that must protect it. Each kernel function must be guarded by a set of hooks that authorize the conceptual operations it performs.

### Overall Architecture of TAHOE

To illustrate TAHOE's analysis, consider an example. Figure 3(A) shows a snippet of kernel code: `vfs_rmdir`, a virtual file system function used to remove a directory. This function takes two arguments: `dentry` (the data structure of the directory to be deleted) and `dir` (the parent directory). It transitively calls `permission`, which performs a discretionary access control (DAC) check on line (P3) to determine if the current process has "write" and "execute" permissions on the parent directory. If the DAC check passes, control reaches line (V5), where the appropriate physical file system call (e.g., `ext2_rmdir`) is invoked to remove the directory.

### Example Analysis with TAHOE

Figure 3(B) shows the output for `vfs_rmdir` when TAHOE is used with the SELinux kernel module (LSM-SELinux). The analysis determines that the call to `dir->i_op->rmdir` (line V5) must be protected by two LSM-SELINUX hooks: `selinux_inode_rmdir` and `selinux_inode_permission` (called with `MAY_WRITE`). The DAC check on line (P3) must be supplemented with the `selinux_inode_permission` hook, which checks for the corresponding MAC permissions.

### High-Level Description of TAHOE's Analysis

#### Kernel Analysis
TAHOE's kernel analysis (Section 3.2) examines the file system code and infers that directory removal (`dir->i_op->rmdir`, line V5) involves performing the conceptual operations `DIR_RMDIR`, `DIR_WRITE`, and `DIR_SEARCH`. This is because, in a typical file system like ext2, removing a directory `bar` from `foo` involves:
1. Finding the entry of `bar` in the kernel data structure of `foo` (`DIR_SEARCH`).
2. Removing the entry of `bar` from this data structure (`DIR_RMDIR`), which involves writing to the data structure (`DIR_WRITE`).

Directory removal is a specialized write operation, distinct from other directory manipulations like creation, which adds a new entry. Thus, `DIR_RMDIR` denotes a special kind of directory write, while `DIR_WRITE` represents a generic write operation.

#### Hook Analysis
TAHOE's hook analysis (Section 3.1) examines the source code of SELinux hooks and infers that:
- The `selinux_inode_permission` hook, when called with `MAY_EXEC` and `MAY_WRITE`, checks that the conceptual operations `DIR_SEARCH` and `DIR_WRITE` are authorized.
- The `selinux_inode_rmdir` hook checks that both `DIR_SEARCH` and `DIR_RMDIR` are authorized.

### Combining Analyses to Produce the Authorization Graph

When TAHOE combines the results of these analyses (Section 3.3), it generates an authorization graph. For `dir->i_op->rmdir`, which performs `DIR_SEARCH` and `DIR_RMDIR`, it is protected by `selinux_inode_rmdir`, which authorizes these operations. Additionally, `dir->i_op->rmdir` performs `DIR_WRITE`, which `selinux_inode_permission` authorizes when called with `MAY_WRITE`.

TAHOE also supplements existing DAC checks, such as the one on line (P3), with hooks that perform the corresponding MAC checks, as shown in line (H1) of the output. It is important to note that TAHOE does not use existing DAC checks to determine hook placement; its analysis is based on the conceptual operations performed by each kernel function.

In the case of `vfs_rmdir`, LSM-SELinux optimizes hook placement. All code paths to line (V5) pass through lines (M4) and (P3). Since the hook call on line (H3) is subsumed by the hook call on line (H1), LSM-SELinux only places the hooks shown in lines (H1) and (H2). While TAHOE correctly infers the authorization graph, it currently does not optimize hook placement, which is left for future work. The security of the LSM framework is determined by the correctness of the authorization graph.

### Detailed Description of TAHOE's Components

#### 3.1 Analysis of Authorization Hooks

To determine the conceptual operations authorized by each hook, TAHOE analyzes the kernel module containing the source code of the hooks. It identifies the conditions under which these operations are authorized. Consider Figure 4(A), which shows a snippet of the `selinux_inode_permission` hook implementation in the LSM-SELinux kernel module. This snippet authorizes searching, writing to, or reading from an inode representing a directory based on the value of `mask`. The authorization is performed by the call to `inode_has_perm`, which authorizes a conceptual operation on an inode based on the access vector obtained by `file_mask_to_av`.

Figure 4(B) shows a fragment of TAHOE's analysis output for this hook. Each line of the output is a tuple of the form `hpredicate k OPERATIONi`, interpreted as follows: if the hook is invoked in a context where the predicate holds, it checks that the conceptual operation `OPERATION` is authorized. For inodes representing directories, the `selinux_inode_permission` hook checks that the conceptual operations `DIR_SEARCH`, `DIR_WRITE`, or `DIR_READ` are authorized based on the value of `mask`.

#### 3.1.1 The Hook Analysis Algorithm

The algorithm to analyze the kernel module containing the source code of hooks is shown in Algorithm 1. The analysis constructs the call-graph of the kernel module, processes it bottom-up, and produces summaries for each function, including the hooks.

**Algorithm 1: TAHOE’s Algorithm for Hook Analysis**

1. Construct the call-graph G of the module M.
2. L := List of vertices of G, reverse topologically sorted.
3. For each f ∈ L:
   - Summary(f) := ANALYZE_FUNCTION(f, Entrypoint(f), true)
4. For each h ∈ H:
   - Output Summary(h)

**Algorithm 2: Summary Construction**

The summary of a function f is a set of pairs `hpred k OPi`, denoting the condition (pred) under which a conceptual operation (OP) is authorized by f. The analysis is flow- and context-sensitive, respecting the control-flow of each function and precisely modeling call-return semantics.

- At an if-(q)-then-else statement, the true branch is analyzed with the predicate `p ∧ q`, and the false branch is analyzed with the predicate `p ∧ ¬q`.
- For a function call `g(a1, a2, ..., an)`, the summary of g is specialized to the calling context. The actual parameters are substituted in place of formal parameters in the predicate, and the resulting predicate is combined with p.
- For other statements, the analysis determines whether the statement potentially authorizes an operation OP, specific to the representation of conceptual operations in the kernel module.

This detailed and structured approach ensures that TAHOE accurately infers the authorization graph and provides a robust foundation for security in the Linux kernel.