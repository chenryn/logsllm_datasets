测试原始场景单事务单sql, 16并发16条cnt_a记录的结果. 比对于改进后的函数tps  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./insert.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 1480488  
tps = 24668.474181 (including connections establishing)  
tps = 24674.365320 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.646597        insert into a (info) values ('test');  
```  
测试改进函数后的场景单事务单sql, 16并发16条cnt_a记录的结果. 比对于改进后的函数tps  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./insert.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 736812  
tps = 12278.457482 (including connections establishing)  
tps = 12281.288634 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.300583        insert into a (info) values ('test');  
```  
测试cnt_a记录足够多的情况下(例如2000条), 测试原始场景单事务单sql, 16并发 :   
```  
postgres=# insert into cnt_a(id,cnt) select generate_series(16,1999),0;  
INSERT 0 1984  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./insert.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 1722562  
tps = 28705.262293 (including connections establishing)  
tps = 28712.163471 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.555513        insert into a (info) values ('test');  
```  
测试cnt_a记录足够多的情况下(例如2000条), 测试改进函数后的场景单事务单sql, 16并发 :   
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./insert.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 482195  
tps = 8034.913678 (including connections establishing)  
tps = 8036.928653 (excluding connections establishing)  
statement latencies in milliseconds:  
        1.988503        insert into a (info) values ('test');  
```  
测试cnt_a记录足够多的情况下(例如2000条), 测试原始场景单事务多sql, 16并发 :   
与上面的测试一样出现了大量的死锁  
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./id.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
Client 0 aborted in state 12: ERROR:  deadlock detected  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 123264  
tps = 2054.315191 (including connections establishing)  
tps = 2054.804565 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002890        \setrandom id 1 20000000  
        0.055029        begin;  
        0.154473        delete from a where id=:id;  
        0.092312        delete from a where id=:id;  
        0.398831        insert into a (info) values ('test');  
        0.099380        delete from a where id=:id;  
        0.374859        insert into a (info) values ('test');  
        0.099221        delete from a where id=:id;  
        0.400103        insert into a (info) values ('test');  
        0.099028        delete from a where id=:id;  
        0.397862        insert into a (info) values ('test');  
        0.444252        insert into a (info) values ('test');  
        0.460034        insert into a (info) values ('test');  
        0.082733        end;  
```  
测试cnt_a记录足够多的情况下(例如2000条), 测试改进函数后的场景单事务多sql, 16并发 :   
```  
pg92@digoal-PowerEdge-R610-> pgbench -M prepared -r -n -f ./id.sql -h $PGDATA -p 1919 -U postgres -T 60 -c 16 -j 4 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 60 s  
number of transactions actually processed: 178495  
tps = 2974.062219 (including connections establishing)  
tps = 2974.751878 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003536        \setrandom id 1 20000000  
        0.145519        begin;  
        0.432378        delete from a where id=:id;  
        0.190400        delete from a where id=:id;  
        1.394283        insert into a (info) values ('test');  
        0.250328        delete from a where id=:id;  
        0.443856        insert into a (info) values ('test');  
        0.234544        delete from a where id=:id;  
        0.420465        insert into a (info) values ('test');  
        0.225787        delete from a where id=:id;  
        0.412413        insert into a (info) values ('test');  
        0.436313        insert into a (info) values ('test');  
        0.437742        insert into a (info) values ('test');  
        0.333693        end;  
```  
综合以上测试, 改进后的函数在单事务中只有单条a表dml操作的场景中没有优势, 在事务中处理需要处理多条a记录的情况下有优势.  
## 对于改进函数的二次改进, 见下一篇blog  
http://blog.163.com/digoal@126/blog/static/16387704020133151402415/  
## 参考  
以前写的几篇优化group by和count(distinct column)的文章, 有兴趣的朋友也可以参考一下    
1\. http://blog.163.com/digoal@126/blog/static/16387704020129851138327/  
2\. http://blog.163.com/digoal@126/blog/static/16387704020128142829610/  
关于函数的稳定性 :   
1\. http://blog.163.com/digoal@126/blog/static/163877040201211241434248/  
2\. http://blog.163.com/digoal@126/blog/static/163877040201151011105494/  
随机查询优化 :   
1\. http://blog.163.com/digoal@126/blog/static/163877040201111292628555/  
advisory locks, 应用程序锁 :   
1\. http://blog.163.com/digoal@126/blog/static/163877040201172492217830/  
为方便大家查询, 汇总PostgreSQL实时和非实时数据统计的案例分析文章系列 - 如下 :   
1\. http://blog.163.com/digoal@126/blog/static/163877040201331252945440/  
2\. http://blog.163.com/digoal@126/blog/static/16387704020133151402415/  
3\. http://blog.163.com/digoal@126/blog/static/16387704020133155179877/  
4\. http://blog.163.com/digoal@126/blog/static/16387704020133156636579/  
5\. http://blog.163.com/digoal@126/blog/static/16387704020133218305242/  
6\. http://blog.163.com/digoal@126/blog/static/16387704020133224161563/  
7\. http://blog.163.com/digoal@126/blog/static/16387704020133271134563/  
8\. http://blog.163.com/digoal@126/blog/static/16387704020134311144755/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")