Post(url string, bodyType string, body io.Reader) (resp *Response, err error)
Each function takes—as a parameter—the URL as a string value and 
uses it for the request’s destination. The Post() function is slightly more 
complex than the Get() and Head() functions. Post() takes two additional 
parameters: bodyType, which is a string value that you use for the Content-
Type HTTP header (commonly application/x-www-form-urlencoded) of the 
request body, and an io.Reader, which you learned about in Chapter 2.
You can see a sample implementation of each of these functions in 
Listing 3-1. (All the code listings at the root location of / exist under the 
provided github repo https://github.com/blackhat-go/bhg/.) Note that the 
POST request creates the request body from form values and sets the 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    47
Content-Type header. In each case, you must close the response body 
after you’re done reading data from it.
r1, err := http.Get("http://www.google.com/robots.txt") 
// Read response body. Not shown. 
defer r1.Body.Close() 
r2, err := http.Head("http://www.google.com/robots.txt") 
// Read response body. Not shown. 
defer r2.Body.Close() 
form := url.Values{}
form.Add("foo", "bar") 
r3, err = http.Postu( 
    "https://www.google.com/robots.txt", 
    v "application/x-www-form-urlencoded", 
    strings.NewReader(form.Encode()w), 
) 
// Read response body. Not shown. 
defer r3.Body.Close() 
Listing 3-1: Sample implementations of the Get(), Head(), and Post() functions  
(/ch-3/basic/main.go)
The POST function call u follows the fairly common pattern of setting 
the Content-Type to application/x-www-form-urlencoded v, while URL-encoding 
form data w. 
Go has an additional POST request convenience function, called 
PostForm(), which removes the tediousness of setting those values and 
manually encoding every request; you can see its syntax here:
func PostForm(url string, data url.Values) (resp *Response, err error)
If you want to substitute the PostForm() function for the Post() implemen-
tation in Listing 3-1, you use something like the bold code in Listing 3-2. 
form := url.Values{}
form.Add("foo", "bar") 
r3, err := http.PostForm("https://www.google.com/robots.txt", form) 
// Read response body and close. 
Listing 3-2: Using the PostForm() function instead of Post() (/ch-3/basic/main.go)
Unfortunately, no convenience functions exist for other HTTP verbs, 
such as PATCH, PUT, or DELETE. You’ll use these verbs mostly to interact 
with RESTful APIs, which employ general guidelines on how and why a 
server should use them; but nothing is set in stone, and HTTP is like the 
Old West when it comes to verbs. In fact, we’ve often toyed with the idea of 
creating a new web framework that exclusively uses DELETE for everything. 
we’d call it DELETE.js, and it would be a top hit on Hacker News for sure. 
By reading this, you’re agreeing not to steal this idea!
前沿信安资讯阵地  公众号：i nf osrc
48   Chapter 3
Generating a Request
To generate a request with one of these verbs, you can use the NewRequest() 
function to create the Request struct, which you’ll subsequently send using 
the Client function’s Do() method. We promise that it’s simpler than it 
sounds. The function prototype for http.NewRequest() is as follows: 
func NewRequest(umethod, vurl string, wbody io.Reader) (req *Request, err error)
You need to supply the HTTP verb u and destination URL v to 
NewRequest() as the first two string parameters. Much like the first POST 
example in Listing 3-1, you can optionally supply the request body by 
passing in an io.Reader as the third and final parameter w. 
Listing 3-3 shows a call without an HTTP body—a DELETE request.
req, err := http.NewRequest("DELETE", "https://www.google.com/robots.txt", nil)
var client http.Client 
resp, err := client.Do(req) 
// Read response body and close. 
Listing 3-3: Sending a DELETE request (/ch-3/basic /main.go)
Now, Listing 3-4 shows a PUT request with an io.Reader body (a PATCH 
request looks similar).
form := url.Values{} 
form.Add("foo", "bar")
var client http.Client 
req, err := http.NewRequest( 
    "PUT", 
    "https://www.google.com/robots.txt", 
    strings.NewReader(form.Encode()), 
) 
resp, err := client.Do(req) 
// Read response body and close. 
Listing 3-4: Sending a PUT request (/ch-3/basic /main.go)
The standard Go net/http library contains several functions that you 
can use to manipulate the request before it’s sent to the server. You’ll learn 
some of the more relevant and applicable variants as you work through 
practical examples throughout this chapter. But first, we’ll show you how to 
do something meaningful with the HTTP response that the server receives.
Using Structured Response Parsing
In the previous section, you learned the mechanisms for building and send-
ing HTTP requests in Go. Each of those examples glossed over response 
handling, essentially ignoring it for the time being. But inspecting various 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    49
components of the HTTP response is a crucial aspect of any HTTP-related 
task, like reading the response body, accessing cookies and headers, or 
simply inspecting the HTTP status code. 
Listing 3-5 refines the GET request in Listing 3-1 to display the status 
code and response body—in this case, Google’s robots.txt file. It uses the 
ioutil.ReadAll() function to read data from the response body, does some 
error checking, and prints the HTTP status code and response body to 
stdout.
u resp, err := http.Get("https://www.google.com/robots.txt")
if err != nil {
    log.Panicln(err)
}
// Print HTTP Status
fmt.Println(resp.Statusv)
// Read and display response body 
body, err := ioutil.ReadAll(resp.Bodyw) 
if err != nil { 
    log.Panicln(err) 
} 
fmt.Println(string(body)) 
x resp.Body.Close() 
Listing 3-5: Processing the HTTP response body (/ch-3/basic/main.go)
Once you receive your response, named resp u in the above code, you 
can retrieve the status string (for example, 200 OK) by accessing the exported  
Status parameter v; not shown in our example, there is a similar StatusCode 
parameter that accesses only the integer portion of the status string. 
The Response type contains an exported Body parameter w, which is of 
type io.ReadCloser. An io.ReadCloser is an interface that acts as an io.Reader 
as well as an io.Closer, or an interface that requires the implementation of 
a Close() function to close the reader and perform any cleanup. The details 
are somewhat inconsequential; just know that after reading the data from 
an io.ReadCloser, you’ll need to call the Close() function x on the response 
body. Using defer to close the response body is a common practice; this will 
ensure that the body is closed before you return it.
Now, run the script to see the error status and response body:
$ go run main.go
200 OK
User-agent: *
Disallow: /search
Allow: /search/about
Disallow: /sdch
Disallow: /groups
Disallow: /index.html?
Disallow: /? 
Allow: /?hl=
前沿信安资讯阵地  公众号：i nf osrc
50   Chapter 3
Disallow: /?hl=*&
Allow: /?hl=*&gws_rd=ssl$
Disallow: /?hl=*&*&gws_rd=ssl
--snip--
If you encounter a need to parse more structured data—and it’s likely 
that you will—you can read the response body and decode it by using the 
conventions presented in Chapter 2. For example, imagine you’re interact-
ing with an API that communicates using JSON, and one endpoint—say, 
/ping—returns the following response indicating the server state:
{"Message":"All is good with the world","Status":"Success"}
You can interact with this endpoint and decode the JSON message by 
using the program in Listing 3-6. 
package main
import {
    encoding/json"
    log
    net/http
}
u type Status struct {
    Message string
    Status  string
}
func main() {
    v res, err := http.Post(
        "http://IP:PORT/ping",
        "application/json",
        nil,
    )
    if err != nil {
        log.Fatalln(err)
    }
    var status Status
    w if err := json.NewDecoder(res.Body).Decode(&status); err != nil {
        log.Fatalln(err)
    }
    defer res.Body.Close()
    log.Printf("%s -> %s\n", status.Statusx, status.Messagey)
}
Listing 3-6: Decoding a JSON response body (/ch-3/basic-parsing/main.go)
The code begins by defining a struct called Status u, which contains 
the expected elements from the server response. The main() function first 
sends the POST request v and then decodes the response body w. After 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    51
doing so, you can query the Status struct as you normally would—by access-
ing exported data types Status x and Message y.
This process of parsing structured data types is consistent across other 
encoding formats, like XML or even binary representations. You begin the 
process by defining a struct to represent the expected response data and 
then decoding the data into that struct. The details and actual implementa-
tion of parsing other formats will be left up to you to determine. 
The next sections will apply these fundamental concepts to assist you in 
building tools to interact with third-party APIs for the purpose of enhanc-
ing adversarial techniques and reconnaissance.
Building an HTTP Client That Interacts with Shodan
Prior to performing any authorized adversarial activities against an orga-
nization, any good attacker begins with reconnaissance. Typically, this 
starts with passive techniques that don’t send packets to the target; that 
way, detection of the activity is next to impossible. Attackers use a variety of 
sources and services—including social networks, public records, and search 
engines—to gain potentially useful information about the target. 
It’s absolutely incredible how seemingly benign information becomes 
critical when environmental context is applied during a chained attack 
scenario. For example, a web application that discloses verbose error messages 
may, alone, be considered low severity. However, if the error messages disclose 
the enterprise username format, and if the organization uses single-factor 
authentication for its VPN, those error messages could increase the likelihood 
of an internal network compromise through password-guessing attacks. 
Maintaining a low profile while gathering the information ensures that 
the target’s awareness and security posture remains neutral, increasing the 
likelihood that your attack will be successful.
Shodan (https://www.shodan.io/), self-described as “the world’s first search 
engine for internet-connected devices,” facilitates passive reconnaissance by 
maintaining a searchable database of networked devices and services, includ-
ing metadata such as product names, versions, locale, and more. Think of 
Shodan as a repository of scan data, even if it does much, much more. 
Reviewing the Steps for Building an API Client
In the next few sections, you’ll build an HTTP client that interacts with the 
Shodan API, parsing the results and displaying relevant information. First, 
you’ll need a Shodan API key, which you get after you register on Shodan’s 
website. At the time of this writing, the fee is fairly nominal for the lowest 
tier, which offers adequate credits for individual use, so go sign up for that. 
Shodan occasionally offers discounted pricing, so monitor it closely if you 
want to save a few bucks.
Now, get your API key from the site and set it as an environment vari-
able. The following examples will work as-is only if you save your API key as 
the variable SHODAN_API_KEY. Refer to your operating system’s user manual, or 
better yet, look at Chapter 1 if you need help setting the variable.
前沿信安资讯阵地  公众号：i nf osrc
52   Chapter 3
Before working through the code, understand that this section demon-
strates how to create a bare-bones implementation of a client—not a fully 
featured, comprehensive implementation. However, the basic scaffolding 
you’ll build now will allow you to easily extend the demonstrated code to 
implement other API calls as you may need.
The client you build will implement two API calls: one to query sub-
scription credit information and the other to search for hosts that contain 
a certain string. You use the latter call for identifying hosts; for example, 
ports or operating systems matching a certain product. 
Luckily, the Shodan API is straightforward, producing nicely structured 
JSON responses. This makes it a good starting point for learning API inter-
action. Here is a high-level overview of the typical steps for preparing and 
building an API client:
1. Review the service’s API documentation.
2. Design a logical structure for the code in order to reduce complexity 
and repetition.
3. Define request or response types, as necessary, in Go.
4. Create helper functions and types to facilitate simple initialization, 
authentication, and communication to reduce verbose or repetitive logic.
5. Build the client that interacts with the API consumer functions and types.
We won’t explicitly call out each step in this section, but you should use 
this list as a map to guide your development. Start by quickly reviewing the 
API documentation on Shodan’s website. The documentation is minimal 
but produces everything needed to create a client program.
Designing the Project Structure
When building an API client, you should structure it so that the function 
calls and logic stand alone. This allows you to reuse the implementation as 
a library in other projects. That way, you won’t have to reinvent the wheel 
in the future. Building for reusability slightly changes a project’s structure. 
For the Shodan example, here’s the project structure:
$ tree github.com/blackhat-go/bhg/ch-3/shodan
github.com/blackhat-go/bhg/ch-3/shodan
|---cmd
|   |---shodan
|       |---main.go
|---shodan
    |---api.go
    |---host.go
    |---shodan.go
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    53
The main.go file defines package main and is used primarily as a con-
sumer of the API you’ll build; in this case, you use it primarily to interact 
with your client implementation. 
The files in the shodan directory—api.go, host.go, and shodan.go—define 
package shodan, which contains the types and functions necessary for com-
munication to and from Shodan. This package will become your stand-
alone library that you can import into various projects.
Cleaning Up API Calls
When you perused the Shodan API documentation, you may have noticed 
that every exposed function requires you to send your API key. Although 
you certainly can pass that value around to each consumer function you 
create, that repetitive task becomes tedious. The same can be said for either 
hardcoding or handling the base URL (https://api.shodan.io/). For example, 
defining your API functions, as in the following snippet, requires you to 
pass in the token and URL to each function, which isn’t very elegant:
func APIInfo(token, url string) { --snip-- }
func HostSearch(token, url string) { --snip-- }
Instead, opt for a more idiomatic solution that allows you to save key-
strokes while arguably making your code more readable. To do this, create 
a shodan.go file and enter the code in Listing 3-7.
package shodan
u const BaseURL = "https://api.shodan.io"
v type Client struct {
    apiKey string
}
w func New(apiKey string) *Client {
    return &Client{apiKey: apiKey}
}
Listing 3-7: Shodan Client definition (/ch-3/shodan/shodan/shodan.go)
The Shodan URL is defined as a constant value u; that way, you can 
easily access and reuse it within your implementing functions. If Shodan 
ever changes the URL of its API, you’ll have to make the change at only 
this one location in order to correct your entire codebase. Next, you define 
a Client struct, used for maintaining your API token across requests v. 
Finally, the code defines a New() helper function, taking the API token as 
input and creating and returning an initialized Client instance w. Now, 
rather than creating your API code as arbitrary functions, you create them 
as methods on the Client struct, which allows you to interrogate the instance 
前沿信安资讯阵地  公众号：i nf osrc
54   Chapter 3
directly rather than relying on overly verbose function parameters. You 
can change your API function calls, which we’ll discuss momentarily, to 
the following:
func (s *Client) APIInfo() { --snip-- }
func (s *Client) HostSearch() { --snip-- } 
Since these are methods on the Client struct, you can retrieve the API 
key through s.apiKey and retrieve the URL through BaseURL. The only pre-
requisite to calling the methods is that you create an instance of the Client 
struct first. You can do this with the New() helper function in shodan.go.
Querying Your Shodan Subscription
Now you’ll start the interaction with Shodan. Per the Shodan API documen-
tation, the call to query your subscription plan information is as follows: