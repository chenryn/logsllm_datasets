title:TRESOR Runs Encryption Securely Outside RAM
author:Tilo M&quot;uller and
Felix C. Freiling and
Andreas Dewald
TRESOR Runs Encryption Securely Outside RAM
Tilo M¨uller
Felix C. Freiling
Department of Computer Science
University of Erlangen
Andreas Dewald
Laboratory for Dependable Distributed Systems
University of Mannheim
Abstract
Current disk encryption techniques store necessary keys
in RAM and are therefore susceptible to attacks that tar-
get volatile memory, such as Firewire and cold boot at-
tacks. We present TRESOR, a Linux kernel patch that
implements the AES encryption algorithm and its key
management solely on the microprocessor. Instead of us-
ing RAM, TRESOR ensures that all encryption states as
well as the secret key and any part of it are only stored
in processor registers throughout the operational time of
the system, thereby substantially increasing its security.
Our solution takes advantage of Intel’s new AES-NI in-
struction set and exploits the x86 debug registers in a
non-standard way, namely as cryptographic key storage.
TRESOR is compatible with all modern Linux distribu-
tions, and its performance is on a par with that of stan-
dard AES implementations.
1
Introduction
Disk encryption is an increasingly used method to protect
conﬁdential information in computer systems. It is par-
ticularly effective for mobile systems, such as laptops,
since these are frequently lost or stolen [29]. With the
growing availability of disk encryption systems, crimi-
nals and law enforcement alike have started to explore
ways to circumvent this protection. Since current disk
encryption techniques store keys in main memory, one
approach to access the encrypted data is to acquire the
key physically.
When physical access to the machine is given, keys
can be extracted from main memory of running and sus-
pended machines without privileged user access. Such
attacks can broadly be classiﬁed into DMA attacks and
cold boot attacks. DMA attacks use direct memory ac-
cess through ports like Firewire [4, 3, 5], PCI [6, 28, 13],
or PC Card [8, 17] to access RAM, while cold boot at-
tacks [14] exploit the fact that memory contents fade
away gradually over time. This allows to restore RAM
contents after a short power-down by rebooting the ma-
chine with a boot device that directly reads out memory.
Widespread disk encryption systems like BitLocker [1]
(Windows), FileVault (MacOS), dm-crypt [30] (Linux),
and TrueCrypt [36] (multi-platform) do not protect
against such attacks. The current technological response,
namely to keep the key in RAM but obfuscate its pres-
ence by using dispersal techniques, only partly counters
the threat of memory attacks.
1.1 TRESOR
In this paper, we present the design and implementa-
tion of TRESOR (pronounced [trε:zoa]), a Linux kernel
patch for the x86 architecture that implements AES in a
way that is resistant to the attacks mentioned above and
hence, allows for disk drive encryption with improved
security.
TRESOR runs encryption securely outside RAM. Its
underlying idea is to avoid RAM usage completely by
both storing the secret key in CPU registers and running
the AES algorithm entirely on the microprocessor. To-
wards this goal, TRESOR (mis)uses the debug registers
as secure cryptographic key storage. While the princi-
ple of TRESOR is basically applicable to most x86 com-
patible CPUs, we focus on an implementation exploiting
Intel’s new AES-NI [31] extensions. The new AES in-
structions, currently available on all Core i7 processors
and most Core i5, allow for accelerated AES using short
and efﬁcient code which implements most of the crypto-
graphic primitive in hardware.
On systems running TRESOR, setting hardware
breakpoints is no longer possible because the breakpoint
registers are occupied with key data. However, as there
are only four breakpoint registers, debuggers like GDB
must deal with the possibility that all of them are busy
anyway, for example, when more than four are set in par-
allel.
1
1.2 Related Work
TRESOR is the successor of AESSE [24], which was
our prototype implementation but not well applicable in
practice because it incurred two major problems. First,
the Streaming SIMD Extension (SSE) [34] were used
as key storage, breaking binary compatibility with many
multimedia, math, and 3d applications. Second, AESSE
was a pure software implementation and, due to the
shortage of space inside CPU registers, the algorithm
performed about six times more slowly than comparable
standard implementations of AES.
During the work on TRESOR, Simmons indepen-
dently developed a system called Loop-Amnesia [27]
which pursues the same idea of holding the crypto-
graphic key solely in CPU registers.
In difference to
TRESOR, Loop-Amnesia stores the key inside machine
speciﬁc registers (MSRs) rather than in debug registers.
Currently, it does not support the AES-NI instruction set
and only a 128-bit version of AES. However, it allows to
store multiple disk encryption keys securely inside RAM
by scrambling them with a master key.
With BitArmor [23] there exists a commercial solution
that claims to be resistant against cold boot attacks in par-
ticular. But as BitArmor does not generally avoid storing
the secret key in RAM, it cannot protect from other at-
tacks against main memory. Consequently, its cold boot
resistance is not perfect, too (though quite good to resist
the most common attacks of this kind).
Additionally, Pabel proposed a solution called Frozen
Cache [21, 22] that exploits CPU caches rather than reg-
isters as secure key storage outside RAM. To our knowl-
edge, this project is currently work in progress at an early
development stage. Although it is a nice idea, a secure
and efﬁcient implementation is very difﬁcult, if possible
at all, because x86 caches can hardly be controlled by the
system programmer.
Last, hardware solutions like Full Disk Encryption
Hard Drives (HDD-FDE) [16, 35] use specialized crypto
chips for encryption instead of the system CPU and
RAM. Indeed, this is an effective method to defeat mem-
ory attacks, but it does not compete with TRESOR as a
software solution. In our opinion, software solutions are
not obsolete as they have several advantages:
they are
cheaper, highly conﬁgurable, vendor independent, and,
last but not least, quickly employable on many existing
machines.
1.3 Contributions
The central innovations of TRESOR are storing the se-
cret key in CPU registers and utilizing AES-NI for en-
cryption. AES-NI offers encryption (and decryption)
primitives directly on the processor. This, however,
does not mean that AES-NI based implementations of
AES withstand memory attacks out-of-the-box. A typ-
ical AES-NI based implementation uses RAM to store
the secret key and, for reasons of performance, the key
schedule. The AES key schedule is required by the indi-
vidual AES rounds and is generally computed only once
and then stored inside RAM to speed up the encryption
process. In contrast, TRESOR implements AES using
AES-NI without leaking any key-related data to RAM.
The contributions of this paper are:
• We implement AES without storing any sensitive
information in RAM.
• To this end, we present a kernel patch (TRESOR)
that is binary compatible with all Linux distribu-
tions.
• We show that by using Intel’s new AES-NI instruc-
tions, the performance of TRESOR is as fast (even
slightly faster) than standard AES implementations
that use RAM.
• By running TRESOR in a virtual machine and con-
stantly monitoring its main memory, we demon-
strate that TRESOR can withstand considerable ef-
forts to compromise the encryption key. The only
method to access the key with reasonable effort is
compromising the system space, using a loadable
kernel module, for example. Many other attacks,
such as hardware attacks targeting processor regis-
ters, are defeated by TRESOR.
Overall, TRESOR is a disk encryption system that is
both secure against main memory attacks and well appli-
cable in practice.
1.4 Outline
The rest of this paper is structured as follows: In Sec-
tion 2 we explain our design choices and give imple-
mentation details. We have evaluated TRESOR regard-
ing three aspects: compatibility (Section 3), performance
(Section 4) and, most importantly,
its security (Sec-
tion 5). We conclude in Section 6.
2 Design and Implementation
We now give an overview over design choices regarding
the interface and the implementation of TRESOR.
2.1 Security Policy
The goal of TRESOR is to run AES entirely on the mi-
croprocessor without using main memory. This implies
that neither the secret key, nor the key schedule, nor any
2
intermediate state should ever get into RAM. With this
restrictive policy, any attacks against main memory be-
come useless. But such an implementation cannot be
achieved simply in user space for two reasons:
• First of all, user space is affected by scheduling,
meaning that CPU registers are frequently swapped
out to RAM due to context switching. That is the
key and/or intermediate states of AES would reg-
ularly enter RAM – even though AES was imple-
mented to run solely on the microprocessor.
• Second, the key storage registers should not be ac-
cessible from unprivileged tasks. Otherwise a local
attacker could easily read out and overwrite the key.
Both problems can only be solved by implementing
TRESOR in kernel space. To suppress context switching,
we run AES atomically. The atomic section is entered
just before an input block is encrypted and left again
right afterwards. Therefore, we can use arbitrary CPU
registers to encrypt a block; we just have to reset them
before leaving the atomic section. This guarantees that
no sensitive data leaks into RAM by context switches.
Between the encryption of two blocks, scheduling and
context switches can take place as usual, so that the in-
teractivity of multitasking environments is not affected.
To restrain userland from reading out the secret key, it
is stored inside a CPU register set accessible only with
ring 0 privileges. Any attempt to read or write the debug
registers from other privilege levels generates a general-
protection exception [18]. This defeats attackers who
gained local user privileges and try to read out the key
on software layer.
Due to the necessity to implement TRESOR in sys-
tem space, we choose Linux for our solution because of
its open source kernel. But in general our approach is
portable to any x86 operating system.
2.2 Key management
AES uses a symmetric secret key for encryption and de-
cryption. We now show how this key is managed by
TRESOR.
Key storage
The ﬁrst question regarding key management is:
In
which registers is the key stored within the proces-
sor? We now discuss several requirements these registers
should meet.
Since the key registers are exclusively reserved over
the entire uptime of the system, they will not be avail-
able for their designated use. Hence, to preserve bi-
nary compatibility with as many existing applications as
possible, only seldom used registers are qualiﬁed to act
as cryptographic key storage. Frequently used registers,
like the general purpose registers (GPRs), are not an op-
tion since all computer programs need to read from and
write to those registers. The loss of registers occupied by
TRESOR should not break binary compatibility.
Another requirement is that the key registers should
not be readable from user space as this would allow any
unprivileged process to read or write the secret key. A
key stored in GPRs, for example, could not be hidden
from userland as the GPRs are an unprivileged resource,
available to all processes.
Last but not least, the register set must be large enough
to hold AES keys, i.e., 128 bits for AES-128, 192 bits
for AES-192, and 256 bits for AES-256, respectively. A
single register is too small to hold AES keys – on both
32- and 64-bit systems and thus, we have to use a set of
registers.
Summarizing, a register set must satisfy four require-
ments to act as cryptographic key storage. The key reg-
isters must be:
1. seldom used by everyday applications,
2. well compensable in software,
3. a privileged resource, and
4. large enough to store at least 128, better 256 bits.
After considering all x86 registers we chose the de-
bug registers, because they meet these requirements as
we explain now.
The debug register set comprises four breakpoint reg-
isters dr0 to dr3, one status register dr6 and one con-
trol register dr7. Depending on the operating mode,
dr4 and dr5 are reserved or just synonyms for dr6 and
dr7. Thus, the only registers which can be freely set to
any value, are the four breakpoint registers dr0 to dr3.
On 32-bit systems these have 4 × 32 = 128 bits in to-
tal, just enough to store the secret key of AES-128. But
on 64-bit systems these have 4 × 64 = 256 bits in total,
enough to store any of the deﬁned AES key lengths 128,
192, and 256 bits. 1
The actual intention of breakpoint registers is to hold
hardware breakpoints and watchpoints – features which
are only used for debugging. And even for debugging
their functionality can be compensated quite well in soft-
ware, because software breakpoints can be used instead
of hardware breakpoints. TRESOR reserves all four
x86 breakpoint registers exclusively as key storage, i.e.,
TRESOR reduces the number of available breakpoint
registers for other applications from at most 4 to always
1Although the principle of TRESOR is applicable to 32-bit systems,
we recommend the usage of 64-bit CPUs to support full AES-256. In-
tel’s Core-i processors are such 64-bit CPUs; these processors are also
recommended because of their AES-NI support.
3
0. Since the breakpoint registers may be in use anyhow,
by debuggers for example, unavailability of them can
happen regularly as well, and thus, applications should
be able to tolerate lack of them. This ensures binary com-
patibility with almost all user space programs.
Debug registers are a privileged resource of ring 0,
meaning that none of the user space applications running
in ring 3 can access debug registers directly. Any such
access is done via system calls, namely via ptrace.
As we show later, we patched the ptrace system call
to return -EBUSY whenever a breakpoint register is re-
quested, to let the user space know all of them are busy.
Key derivation
The key we store in debug registers is derived from a user
password by computing a SHA-256 based message di-
gest. To resist brute force attacks, we strengthen the key
by applying 2000 iterations of the SHA-256 algorithm.
The password consists of 8 to 53 printable characters2
and is read from the user early during boot by an ASCII
prompt, directly in kernel space. Only in kernel space
we have full control over side effects like scheduling and
context switching.
But how do we actually compute the key and get it into
debug registers without using RAM? The answer is, that
we do use RAM for this transaction – but only for a very
short time frame during system startup. Although there
is a predeﬁned implementation of SHA-256 in the ker-
nel, we implemented our own variant to ensure that all
memory lines holding sensitive information, like parts of
the key or password, are erased after usage. That is, dur-
ing boot, password and key do enter RAM very brieﬂy.
But immediately afterwards, the key is copied into debug
registers and all memory traces of it are overwritten. All
this happens before any userland process comes to life.
Once the key has been entered and the machine is up
and running, it cannot be changed from user space dur-
ing runtime as it would be impossible to do so without
polluting RAM. The password must only be re-read upon
ACPI wakeup, because during suspend mode, the CPU is
switched off and its context is copied into main memory.
Naturally, we bar the debug registers from being copied
into RAM, and hence, the key is lost during suspension
and the password must be re-entered. Again, this hap-
pens early in the wakeup process, directly in kernel space
before any user mode process is unfrozen.
On 64-bit systems, like Intel’s Core-i series, we copy
always 256 key bits into the debug registers and each
of the AES variants (AES-128, AES-192, and AES-256)
takes as many bits from the key storage as it needs. On
2 More characters do not add to security as it becomes easier to
attack the key itself rather than the password because 9553 (cid:29) 2256.
4
multi-core processors, we copy the key bits into the de-
bug registers of all CPUs. Otherwise we constantly had
to ensure that encryption runs on the single CPU which
holds the key. In terms of performance such migration
steps are very costly and it is more efﬁcient to duplicate
the AES key onto all CPUs once. Furthermore, this al-
lows us to run several TRESOR tasks in parallel.
2.3 AES implementation
The challenge we faced was implementing the AES algo-
rithm without using main memory. This implies we were
not allowed to store runtime variables on the stack, heap
or anywhere else in the data segment. Naturally, our im-
plementation was written in assembly language, because
neither the usage of debug registers as key storage nor
the avoidance of the data segment is supported by any
high-level language compiler.
Encryption algorithm
Storing only the secret key in CPU registers would al-
ready defeat common attacks on main memory, but fol-
lowing our security policy mentioned above, absolutely
no intermediate state of AES and its key schedule should
get into RAM. This aims to thwart future attacks and
cryptanalysis. In other words, after a plaintext block is
read from RAM, we write nothing but the scrambled out-
put block back. No valuable information about the AES
key or state is visible in RAM at any time.
From earlier experiments with AESSE [24], we were
concerned about the performance penalty of encryption
methods implemented without RAM. We therefore in-
vestigated the utilization of the AES-NI instruction set
of new Intel processors [31]. AES-NI allows for hard-
ware accelerated implementations of AES by providing
the instructions aesenc, aesenclast, aesdec, and
aesdeclast. Each of them performs an entire AES
round with a single instruction, exclusively on the pro-
cessor without involving RAM. Hence, they are compat-
ible with our design.
Overall, utilizing AES-NI has several advantages:
• The code is clear and short.
• It runs without RAM usage.