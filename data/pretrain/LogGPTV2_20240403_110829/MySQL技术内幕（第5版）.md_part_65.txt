过数据列的长度来弄清这个数据列的值有多长。（更多关于如何确定数据列长度的信息
那么它可能包含 null字节，因此不能把这个值当作是以 null结尾的字符串来对待。请
MYSQL_ROW数组里的字符串都是以 null结尾的。不过，如果某列可以包含二进制数据，
返回的。如果想把某个值当作数字，则必须自己对字符串进行转换。
printf ("Number of rows returned: %lu\n",
fputc（'\n',stdout）;
printf (“%s",row[i] = NULL ？row[i] :“NULL"）;
if（i>0)
fputc
(unsigned long)mysql_num_rows (res_set));
row;
'\t*,
stdout);
"mysql_fetch_row()failed");
，作为演示，我们只会把各个行都输出
7.4处理SQL语句
255
一当然
与
通
---
## Page 276
查它的返回值。
mysql_field_count（）来加以区别，即把连接处理器传递给mysql_field_count（），然后检
mysql_fetch_row（）函数来处理各个行，一直到它返回 NULL 为止，然后释放这个结果集。
集。
集，
果集。
它实现的过程。
回结果集，也不管它是否会执行成功，都能正确处理。在编写这个处理程序之前，我们先列出
言API可以编写出一个通用的语句处理器，它可以正确地处理各种SQL语句。不管它是否会返
至连它是否是合
或者某个文件读入的，那么这条语句可能是任何内容。
果集的 INSERT 语句，以及一条会返回结果集的 SHOW TABLES 语句。
种做法之所以能够奏效，原因在于这些语句都被硬编码在代码里：我们使用了一条不会返回结
7.4.3
对语句处理器略作概括之后，我们将在7.4.6节编写一个显示格式美化程序。
得，但它们并不包含在列的数据值里一
值都垂直对齐。为此，我们需要标签，并且必须知道每一个列的最大宽度。这些信息都可以获
256
输出完整的值。例如，可以使用 fwrite()。
null 字节之前的内容。对于二进制数据，最好是使用可以接受列长度参数的函数，这样才能 
无法正确地进行输出。 printf () 期望的是以 null结尾的字符串，并且只会输出列值里第一个
（3）如果 mysql_store_result（）函数调用成功，则语句返回一个结果集。
J底是何种类型。不管怎样，那是服务器应该干的事。
（这也表明，此语句为 INSERT、DELETE 或UPDATE这样的语句。）
如果mysql_field_count（)返回0，则表明这条语句没有返回任何列，因此也就没有结果
幸运的是，你不必事先知道语句的类型，便能对它作出正确的处理。利用 MySQL的C语
(4）如果mysql_store_result（）调用失败，则具体原因可能是，
(2）如果语句执行成功，则调用 mysql_store_result（）从服务器检索行，并创建一个结
不过，你不可能一直知道给定的语句所表示的是何种语句。例如，
前面两节里的语句处理示例，利用了“语句是否应该返回某些数据”这样一个知识点。
也可能是它需要返回结果集，但在试图创建结果集时发生了错误。这两种情况都可以利用
（1）执行语句。如果执行失败，则结束。
我们可以让这个输出变得更美观一点，具体的做法是：提供一些信息，如列标签；让这些
carter
Bush
Buchanan
Arthur
Adams
你将得到下面这样的输出一
ORDER BY last_name, first_name
包含二进制数据的列会包含 mull字节。对于这些数据列，使用 printf ()的格式说明符%s 
通用的语句处理器
第7章用C语言编写MySQL程序
James E.
George H.W.
John
合法的，也
Chester A.
James
Braintree
也无法知道。那么，还能怎么做呢？你当然不想通过解析语句来确定它
Plains
New Haven
Mercersburg
Fairfield
一它可能不太易读：
MA
GA
MA
输出二进制数据
—而是在结果集的元数据（即关于数据的数据）里。在
以W
，你无法事先知道它是否期望返回行，甚
，语句根本不会返回结果
，你执行的语句是从键盘
调用
这
---
## Page 277
7.4.4
符串：
失败，或者客户端和服务器之间的网络连接在获取行时意外中断。
个结果集，但却没有返回。发生这类错误的原因很多。例如，结果集大小过大，导致内存分配
下面这个函数能够处理任何语句，前提是给定一个连接处理器和一个以 nul结尾的语句字
口在执行语句时，用一个计数字符串和 mysql_real_query（）)来代替那个以 null结尾的字
process_statement (MysQL *conn, char *stmt_str)
如果mysql_field_count（)返回的是非零值，则表明有错误发生，因为该语句应该返回一
如果对语句处理的这3个方面加以调整，就能得到另一种处理方案。
口在没有获得结果集时，它利用 mysql_field_count（)来判断：是出现了错误，还是原
口它使用了 mysql_store_result()来检索结果集。
口它使用了 mysql_query（）来执行语句。
上面展示的这个 process_statement（)版本有以下3个特点。
MYSQL_RES *res_set;
void
本就不会有结果集返回。
另一种语句处理方法
/*语句执行成功；检查它是否返回了数据*/
if（mysql_query（conn，stmt_str）!=0）/*语句执行失败*/
return;
print_error (conn, "Could not execute statement");
else/*有错误发生*/
mysql_free_result
1*处理各个行，然后释放结果集*/
(res_set)
print_error (conn,
(mysql_field_count (conn) == 0)
当没有结果集时，
语句不生成结果集（它不是SELECT、SHOW、DESCRIBE等）：
(unsigned long) mysql_affected_rows (conn));
是因为不返回，
/*无结果集返回*/
1*返回了一个结果集
(res_set);
(conn,
"Could not retrieve result set");
result
res_set);
（conn）;
*
7.4处理SQL语句
257
---
## Page 278
你能知道，如何为一个给定的应用程序选择一个最适当的函数。
是这一差异，导致了这两个函数在其他方面的种种差异。本节将对这两个函数进行比较，以便
们从服务器检索结果集的行的方式不同。当你调用 mysql_store_result（)时，它会立刻检索
接处理器参数，并返回一个结果集。不过，它们之间的差异实际相当大。最本质的差异是，它
7.4.5
query（）函数与 process_query（）相似，但是使用了上述3个替换方法：
258
MYSQL_RES *res_set;
process_real_statement (MYsQL *conn,char *stmt_str, unsigned int len)
void
这几种方法可用来代替process_query（）里使用的对应方法。
口调用mysql_error（)或mysql_errno(），而非调用mysql_field_count（）来确定是结
口通过调用mysql_use_result(），而非调用 mysql_store_result()来创建结果集。
果集检索失败，还是根本就没有供检索的结果集。
mysgl_store_result()与 mysql_use_result()的对比
ces_set=mysql_use_result (conn);
*语句执行成功；检查它是否返回了数据*/
if(mysql_real_query
符串和mysql_query（）。
mysql_free_result (res_set);
process_result_set (conn, res_set);
/*处理各个行，然后释放结果集*/
return;
print_error (conn,
第7章
else
print_error (conn,
printf ("Number of rows affected: %lu\n",
（mysql_errno（conn)==0)
当没有结采集时，是因为不返回，
/*有错误发生*/
用C语言编写MySQL程序
(unsigned long)
/*无结果集返回*/
/*返回了一个结果集
但出现了错误呢？
"Could not execute statement");
（conn，stmt_str，len）!=0）/*语句执行失败*/
"Could not retrieve result set");
mysql_affected_rows (conn));
*
下面的 process_real_
---
## Page 279
mysql_use_result（），那么每次只能处理一个结果集。
函数来取回和丢弃尚未被取回的行。）这种处理模型的一种“潜台词”
错信息。(如果要避免出现这一问题，则需要在执行第二条语句之前，调用mysql_free_result()
果集里的每个行。如果你在执行另一条语句之前，忘了这么做，那么当前结果集里尚未来得及
也只有在行全部取回之后，才能正确地计算出来，所以在此之前，它是不可用的。
mysql_num_rows（)会等你取回所有行之后，才返回正确的值。类似地，因为 max_width 的值
储在 MYSQL_FIELD 列信息结构的 max_width 成员里。如果使用 mysql_use_result（），那么
来的各个行，则应该首选mysql_store_result（）。
mysql_store_result（）。例如，想让应用程序允许用户跳跃式地前后浏览用某个查询选取出
任意顺序，而不是按它们从服务器取回的顺序去处理各个行，则必须使，
mysql_row_seek（）和 mysql_row_tell（）可以让你按任意顺序访问各个行。如果使
于读操作锁定状态。其他试图修改这些表的客户端程序都将因此而被阻塞。
锁定功能，那么这种影响会表现得更突出。你从中检索数据的那些表，在查询期间，将一直处
户端程序都有很大的负面影响。特别是，如果你使用的存储引擎像MyISAM一样，
以下两类客户端程序里。
到客户端程序认为适合检索所有这些行那一刻为止。因此，mysql_use_result（)不适合用在
集
时
那么应该使用mysql_use_result（）。
户端检索的是大型结果集，那么会有内存耗尽的风险。如果你要检索某个包含大量行的结果集，
求都比 mysql_use_result（)大。内存分配和数据结构创建所需的开销都会更大，并且如果客
情况。
mysql_fetch_row（）返回 NULL 值时，通常是表示“已到达结果集的末尾”，但也有可能是表示
化工作，而你必须自己针对每一个行调用mysql_fetch_row（)来完成检索操作。因此，虽然
时，则肯定是表示“已到达结果集的末尾”。
是从一个已经包含结果集的数据结构里提取出行。因此，当 mysql_fetch_row（)返回 NULL值
面
把它们在客户端缓存起来。此后的mysql_fetch_row（）调用决不会返回出错消息，因为它们只
因为 mysql_use_result（)做的事情比 mysql_store_result（)少，所以它会提出一
息。调用 mysql_num_rows（）可以获得结果集里行的数量。而每一个列的值的最大宽度都存
。因为结果集的所有行都可用，所以可以随机访问它们：函数mysql_data_seek（）
，mysql_use_result（）却加重了服务器的负担，因为服务器必须保存结果集里的行，一直
因为 mysql_use_result（)每次只会取回一个行进行处理，所以它对内存的要求很低。
因为 mysql_store_result（)需要把完整的结果集保存在客户端，所以它的内存和处理需
相比之下，mysql_use_result（）本身并不会检索任何行。它只是逐行完成对检索的初始
虽然rmysql_store_result（）会消耗较多的内存，但也有好处一
在上述两种情况里，客户端程序无法迅速检索完结果集里的所有行。这对服务器和其他客
口在两次行检索操作之间，需要执行大量处理操作的客户端程序。
口根据用户请求，逐个遍历各有关行的交互式客户端程序。
因为不必为创建结果集而建立各种复杂的数据结构，所以其内存分配速度也更快。另一方
当从服务器检索结果集时，mysql_store_result（）会取回行，并为它们分配内存，然后
户工间休息，而一直等着发送下一个行吧！）
（你肯定不想让服务器因为用
7.4处理SQL语句
一可以立刻访问整个结果
是，如果使用
使用了表
259
用
用
条
按
后
---
## Page 280
process_result_set（)版本产生的输出结果：
子表格），但它的显示格式却不太美观，不便于直观查看或打印输出。再来看看之前那个
的各行各列以制表符分隔的格式进行输出。这个程序很有用（例如，可以用它来把数据导入电
者各个列的最大长度值，那么在创建结果集时，必须使用 mysql_store_result（），而不能使
为所谓的结果集“元数据”（metadata），其中包括以下内容。
7.4.6
命令行上给出--quick选项时，它们则会使用mysql_use_result（）。
反的。
生成的结果集，但绝对不是在执行下一条语句之前。这意味着你可以同时生成并使用多个结果
么表明这个表存在。并不需要调用mysql_fetch_row（）。
这条语句：