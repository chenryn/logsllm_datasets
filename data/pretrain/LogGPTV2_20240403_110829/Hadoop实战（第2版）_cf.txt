11/01/18 05：07：16 INFO zookeeper.ClientCnxn：Session establishment complete on
server localhost/127.0.0.1：2181，sessionid=0x12d97fd5d39000a, negotiated
timeout=30000
WatchedEvent state：SyncConnected type：None path：null
2查看是否创建成功：
myData2
3修改节点数据
4查看是否修改成功：
shenlan211314
5删除节点
6查看节点是否被删除：
节点状态：[null]
15.4 ZooKeeper的特性
 15.4.1 ZooKeeper的数据模型
ZooKeeper拥有一个层次的命名空间，这和分布式的文件系统非常相似。唯一不同的地方是命名空间中的每个节点可以有和它自身或它的子节点相关联的数据。这就好像是一个文件系统，只不过文件系统中的文件还可以具有目录的功能。另外，指向节点的路径必须使用规范的绝对路径来表示，并且以斜线“/”来分隔。需要注意的是，在ZooKeeper中不允许使用相对路径。
1.Znode
ZooKeeper目录树中的每一个节点对应着一个Znode。每个Znode维护着一个属性结构，它包含数据的版本号（dataVersion）、时间戳（ctime、mtime）等状态信息。ZooKeeper正是使用节点的这些特性来实现它的某些特定功能的。每当Znode的数据改变时，它相应的版本号将会增加。每当客户端检索数据时，它将同时检索数据的版本号。并且如果一个客户端执行了某个节点的更新或删除操作，它也必须提供要被操作的数据的版本号。如果所提供的数据版本号与实际的不匹配，那么这个操作将会失败。
Znode是客户端要访问的ZooKeeper的主要实体，它包含以下几个主要特征：
（1）Watches
客户端可以在节点上设置watch（我们称之为监视器）。当节点的状态发生改变时（数据的增、删、改等操作）将会触发watch对应的操作。当watch被触发时，Zookeeper将会向客户端发送且仅发送一个通知，因为watch只能被触发一次。
（2）数据访问
ZooKeeper中的每个节点上存储的数据需要被原子性的操作。也就是说，读操作将获取与节点相关的所有数据，写操作也将替换掉节点的所有数据。另外，每一个节点都拥有自己的ACL（访问控制列表），这个列表规定了用户的权限，即限定了特定用户对目标节点可以执行的操作。
（3）临时节点
ZooKeeper中的节点有两种，分别为临时节点和永久节点。节点的类型在创建时即被确定，并且不能改变。ZooKeeper临时节点的生命周期依赖于创建它们的会话。一旦会话结束，临时节点将被自动删除，当然也可以手动删除。另外，需要注意的是，ZooKeeper的临时节点不允许拥有子节点。相反，永久节点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，它们才被删除。
（4）顺序节点（唯一性保证）
当创建Znode的时候，用户可以请求在ZooKeeper的路径结尾添加一个递增的计数。这个计数对于此节点的父节点来说是唯一的，它的格式为“%010d”（10位数字，没有数值的数据位用0填充，例如0000000001）。当计数值大于232
 -1时，计数器将会溢出。
2.ZooKeeper中的时间
ZooKeeper中有多种记录时间的形式，其中包括如下几个主要属性：
（1）Zxid
致使ZooKeeper节点状态改变的每一个操作都将使节点接收到一个zxid格式的时间戳，并且这个时间戳是全局有序的。也就是说，每一个对节点的改变都将产生一个唯一的zxid。如果zxid1的值小于zxid2的值，那么zxid1所对应的事件发生在zxid2所对应的事件之前。实际上，ZooKeeper的每个节点维护着三个zxid值，分别为：cZxid、mZxid和pZxid。cZxid是节点的创建时间所对应的Zxid格式时间戳，mZxid是节点的修改时间所对应的Zxid格式时间戳。
（2）版本号
对节点的每一个操作都将致使这个节点的版本号增加。每个节点维护着三个版本号，它们分别为：version（节点数据版本号）、cversion（子节点版本号）、avevsion（节点所拥有的ACL的版本号）。
3.节点属性结构
通过上面的介绍，我们可以了解到，一个节点自身拥有表示其状态的许多重要属性，表15-4给出了详细的介绍：
15.4.2 ZooKeeper会话及状态
ZooKeeper客户端通过句柄为ZooKeeper服务建立一个会话。这个会话一旦被创建，句柄将以CONNECTING状态开始启动。客户端将尝试连接到其中一个ZooKeeper服务器，如果连接成功，它的状态将变为CONNECTED。在一般情况下只有上述这两种状态。如果一个可恢复的错误发生，比如会话终结或认证失败，或者应用程序明确地关闭了句柄，句柄将会转入关闭状态。
ZooKeeper的状态转换如图15-7所示：
图 15-7 ZooKeeper状态转换图
为了创建一个客户端会话，应用程序必须提供一个由主机（IP或主机名）和端口所组成的连接字符串，这个字符串标识了要连接的目标主机及主机端口。ZooKeeper客户端将选择服务器列表中的任意一个服务器并尝试连接。如果连接失败，那么客户端将自动尝试连接服务列表中的其他服务器，直到连接成功。
15.4.3 ZooKeeper watches
ZooKeeper可以为所有的读操作设置watch，这些读操作包括：exists（）、getChildren（）以及getData（）。watch事件是一次性的触发器，当watch的对象状态发生改变时，将会触发此对象上所设置的wath对应的事件。
在使用watch时需要注意，watch是一次性触发器，并且只有在数据发生改变时，watch事件才会被发送给客户端。例如：如果一个客户端进行了getData（“/znode1”，true）操作，并且之后“/znode1”的数据被改变或删除了，那么客户端将获得一个关于“/znode1”的事件。如果/znode1再次改变，那么将不再有watch事件发送给客户端，除非客户端为另一个读操作重新设置了一个watch。
watch事件将被异步地发送给客户端，并且ZooKeeper为watch机制提供了有序的一致性保证。理论上，客户端接收watch事件的时间要快于其看到watch对象状态变化的时间。
ZooKeeper所管理的watch可以分为两类：一类是数据watch（data watches）；一类是子watch（child watches）。getData（）和exists（）负责设置数据watch, getChildren（）负责设置孩子watch。我们可以通过操作返回的数据来设置不同的watch。getData（）和exists（）返回关于节点数据的信息，getChildren（）返回孩子列表。因此，setData（）将触发设置了数据watch的对应事件。一个成功的create（）操作将触发Znode的数据watch，以及孩子watch。一个成功的delete（）操作将触发数据watch和孩子watch，因为Znode被删除的时候，它的child watch也将被删除。
watch由客户端所连接的ZooKeeper服务器在本地维护，因此watch可以非常容易地设置、管理和分派。当客户端连接到一个新的服务器上时，任何的会话事件都将可能触发watch。另外，当从服务器断开连接的时候，watch将不会被接收。但是，当一个客户端重新建立连接的时候，任何先前注册过的watch都会被重新注册。
15.4.4 ZooKeeper ACL
ZooKeeper使用ACL来对Znode进行访问控制。ACL的实现和UNIX文件访问许可非常相似：它使用许可位来对一个节点的不同操作进行允许或禁止的权限控制。但是，和标准的UNIX许可不同的是，ZooKeeper节点有user（文件的拥有者）、group和world三种标准模式，并且没有节点所有者的概念。
需要注意的是，一个ACL和一个ZooKeeper节点相对应。并且，父节点的ACL与子节点的ACL是相互独立的。也就是说，ACL不能被子节点所继承，父节点所拥有的权限与子节点所拥有的权限没有任何关系。
表15-5为访问控制列表所规定的权限。
ZooKeeper ACL的使用依赖于验证，它支持如下几种验证模式：
world：代表某一特定的用户（客户端）。
auth：代表任何已经通过验证的用户（客户端）。
digest：通过用户名密码进行验证。
ip：通过客户端IP地址进行验证。
当会话建立的时候，客户端将会进行自我验证。
另外，ZooKeeper Java API支持三种标准用户权限，它们分别为：
ZOO_OPEN_ACL_UNSAFE；
ZOO_READ_ACL_UNSAFE；
ZOO_CREATOR_ALL_ACL；
ZOO_OPEN_ACL_UNSAFE对于所有的ACL来说都是完全开放的：任何应用程序可以在节点上执行任何操作，比如创建、列出并删除子节点。ZOO_READ_ACL_UNSAFE对于任意的应用程序来说，仅仅具有读权限。ZOO_CREATOR_ALL_ACL授予节点创建者所有的权限。需要注意的是，在设置此权限之前，创建者必须已经通过了服务器的认证。
15.4.5 ZooKeeper的一致性保证
ZooKeeper是一种高性能、可扩展的服务。ZooKeeper的读写速度非常快，并且读的速度要比写更快。另外，在进行读操作的时候，ZooKeeper依然能够为旧的数据提供服务。这些都是由ZooKeeper所提供的一致性保证的，它具有如下特点：
（1）顺序一致性
客户端的更新顺序与它们被发送的顺序相一致。
（2）原子性
更新操作要么成功要么失败，没有第三种结果。
（3）单系统镜像
无论客户端连接到哪一个服务器，他将看到相同的ZooKeeper视图。
（4）可靠性
一旦一个更新操作被应用，那么在客户端再次更新它之前，其值将不会改变。这会保证产生下面两种结果：
如果客户端成功地获得了正确的返回代码，那么说明更新已经成功。如果不能够获得返回代码（由于通信错误、超时等原因），那么客户端将不知道更新操作是否生效。
当故障恢复的时候，任何客户端能够看到的执行成功的更新操作将不会回滚。
（5）实时性
在特定的一段时间内，客户端看到的系统需要被保证是实时的（在十几秒的时间里）。在此时间段内，任何系统的改变将被客户端看到，或者被客户端侦测到。
这些一致性得到保证后，ZooKeeper更高级功能的设计与实现将会变得非常容易，例如：leader选举、队列，以及可撤销锁等机制的实现。
15.5 使用ZooKeeper进行Leader选举
ZooKeeper需要在所有的服务（可以理解为服务器）中选举出一个Leader，然后让这个Leader来负责管理集群。此时，集群中的其他服务器则成为了此Leader的Follower。并且，当Leader出现故障的时候，ZooKeeper要能够快速地在Follower中选举出下一个Leader。这就是ZooKeeper的Leader机制，下面我们将简单介绍如何使用ZooKeeper实现Leader选举（Leader Election）。
此操作实现的核心思想是：首先创建一个EPHEMERAL目录节点，例如“/election”。然后每一个ZooKeeper服务器在此目录下创建一个SEQUENCE|EPHEMERAL类型的节点，例如“/election/n_”。在SEQUENCE标志下，ZooKeeper将自动地为每一个ZooKeeper服务器分配一个比前面所分配的序号要大的序号。此时创建节点的ZooKeeper服务器中拥有最小编号的服务器将成为Leader。
在实际的操作中，还需要保证：当Leader服务器发生故障的时候，系统能够快速地选出下一个ZooKeeper服务器作为Leader。一个简单的解决方案是，让所有的Follower监视leader所对应的节点。当Leader发生故障时，Leader所对应的临时节点会被自动删除，此操作将会触发所有监视Leader的服务器的watch。这样这些服务器就会收到Leader故障的消息，进而进行下一次的Leader选举操作。但是，这种操作将会导致“从众效应”的发生，尤其是当集群中服务器众多并且带宽延迟比较大的时候更为明显。
在ZooKeeper中，为了避免从众效应的发生，它是这样来实现的：每一个Follower为Follower集群中对应着比自己节点序号小的节点中x序号最大的节点设置一个watch。只有当Follower所设置的watch被触发时，它才进行Leader选举操作，一般情况下它将成为集群中的下一个Leader。很明显，此Leader选举操作的速度是很快的。因为每一次Leader选举几乎只涉及单个Follower的操作。
15.6 ZooKeeper锁服务
在ZooKeeper中，完全分布的锁是全局同步的。也就是说，在同一时刻，不会有两个不同的客户端认为他们持有了相同的锁。这一节我们将向大家介绍在ZooKeeper中的各种锁机制是如何实现的。
 15.6.1 ZooKeeper中的锁机制
ZooKeeper将按照如下方式实现加锁的操作：
1）ZooKeeper调用create（）方法来创建一个路径格式为“_locknode_/lock-”的节点，此节点类型为sequence（连续）和ephemeral（临时）。也就是说，创建的节点为临时节点，并且所有的节点连续编号，即为“lock-i”的格式。
2）在创建的锁节点上调用getChildren（）方法，以获取锁目录下的最小编号节点，并且不设置watch。
3）步骤2中获取的节点恰好是步骤1中客户端创建的节点，那么此客户端会获得该种类型的锁，然后退出操作。
4）客户端在锁目录上调用exists（）方法，并且设置watch来监视锁目录下序号相对自己次小的连续临时节点的状态。
5）如果监视节点状态发生变化，则跳转到步骤2，继续进行后续的操作，直到退出锁竞争。
ZooKeeper的解锁操作非常简单，客户端只需要将加锁操作步骤1中创建的临时节点删除即可。
注意 1）一个客户端解锁之后，将只可能有一个客户端获得锁，因此每一个临时的连续节点对应着一个客户端，并且节点之间没有重叠；2）在ZooKeeper的锁机制中没有轮询和超时。ZooKeeper中锁机制流程图如图15-8所示。
图 15-8 ZooKeeper锁机制流程图
15.6.2 ZooKeeper提供的一个写锁的实现
在ZooKeeper安装目录的recipes目录下有一个ZooKeeper分布式写锁的实现方式（ZooKeeper_Dir/src/recpies/lock目录）。
其中，加锁的实现如代码清单15-7所示。
代码清单15-7 lock
1 public synchronized boolean lock（）throws KeeperException, InterruptedException{
2 if（isClosed（））{
3 return false；
4}
5 ensurePathExists（dir）；
6
7 return（Boolean）retryOperation（zop）；
8}
在加锁操作的实现中，首先调用isclosed（）方法来检查锁的状态，如果没有获得锁，则调用ensurePathExists（）方法来设置一个监视器。这正如我们在15.6.1节所描述的步骤。
解锁的实现如代码清单15-8所示。
代码清单15-8 unlock
1 public synchronized void unlock（）throws RuntimeException{
2
3 if（！isClosed（）＆＆id！=null）{
4 try{
5
6 ZooKeeperOperation zopdel=new ZooKeeperOperation（）{
7 public boolean execute（）throws KeeperException, InterruptedException
8{
9 zookeeper.delete（id，-1）；
10 return Boolean.TRUE；
11}
12}；
13 zopdel.execute（）；
14}catch（InterruptedException e）{
15 LOG.warn（"Caught："+e, e）；
16//set that we have been interrupted.
17 Thread.currentThread（）.interrupt（）；
18}catch（KeeperException.NoNodeException e）{
19
20}catch（KeeperException e）{
21 LOG.warn（"Caught："+e, e）；
22 throw（RuntimeException）new RuntimeException（e.getMessage（））.
23 initCause（e）；
24}
25 finally{
26 if（callback！=null）{
27 callback.lockReleased（）；
28}
29 id=null；
30}
31}
32}
解锁的操作主要是通过代码中的第6～12行来实现的，只需要删除锁对应的临时节点即可。
注意 当此操作出现故障的时候，我们不需要重复这个解锁操作。另外，在不能重新连接的时候，我们也不需要做任何处理，因为ZooKeeper会自动地删除临时节点，并且在服务器出现故障的时候，此临时节点也会随着服务的结束而自动删除。
15.7 使用ZooKeeper创建应用程序
本节将首先介绍如何使用Eclipse开发Zookeeper应用程序，然后通过一个实例让大家熟悉Zookeeper的简单开发。