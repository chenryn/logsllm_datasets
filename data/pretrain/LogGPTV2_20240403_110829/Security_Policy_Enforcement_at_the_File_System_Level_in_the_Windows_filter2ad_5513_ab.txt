### Local File System and MLS Configuration

A local file system can be used to implement a purely local Multi-Level Security (MLS) configuration. However, in most cases, caching and common networked file systems will require policy coordination across node boundaries.

### File System I/O Structure in Microsoft Windows NT

The Microsoft Windows NT family of operating systems [14, 15] provides several APIs through environmental subsystems. While these APIs are primarily procedural, the internal processing is asynchronous and packet-based, sharing more similarities with OpenVMS [3] than with Unix [4]. A key difference from OpenVMS is that, like Unix System V Release 4 and later derivatives, Windows NT features a unified file system cache and virtual memory architecture.

Regardless of the environmental subsystem used, I/O operations eventually result in a call to the system service dispatcher in kernel mode. This dispatcher distributes the operations to various kernel components. For the purposes of this discussion, the following components are of particular interest: the I/O Manager, Windows Management Instrumentation (WMI), Plug and Play (PnP) Manager, and the Power Manager (the latter three appear only in Microsoft Windows 2000 and later revisions).

#### The Central Component: The I/O Manager

The I/O manager is the central component. It creates I/O Request Packets (IRPs) from incoming requests and ensures that all relevant drivers are called in the proper sequence. Each IRP sent to a kernel-mode driver represents a pending I/O request. An IRP remains outstanding until the recipient invokes the `IoCompleteRequest()` service routine, marking the I/O operation as completed and triggering any post-completion processing.

This mechanism supports a layered processing approach, where IRPs are cascaded across multiple driver layers. This architecture allows for the interposition of additional layers in the driver stack, enabling the alteration of operating system functionality. One example of such an interposition is shown in Figure 2.

### Interposition and Filter Drivers

The placement of the filtering layer in Figure 2 allows the module to intercept and operate on generic (file-system independent) operations from upper operating system layers, making it a file system filter driver. This type of filter driver is particularly useful for handling file-level operations. Common disk encryption mechanisms typically work by adding special disk drivers or lower-level filter drivers, which are often hardware-specific and do not support remote file systems. In contrast, file system filter drivers can handle individual files, supporting the necessary semantics while being largely agnostic to the file system type.

### Fast I/O Mechanism

Microsoft Windows NT does not fully adhere to the packet-based I/O model for all types of drivers. For file systems, including file system filter drivers, there is an exception: the Fast I/O mechanism. Here, the I/O Manager, Cache Manager, and file system implementations interact via explicit cross-module calls instead of creating IRPs. This performance enhancement adds complexity to the design of file system filter drivers, as they must handle additional communication paths. While a driver can signal that Fast I/O is not supported, the resulting double performance penalty is generally not justifiable.

### Additional Functionality with Filter Drivers

Microsoft Windows NT uses filter drivers to support additional, optional functionality that can be made available for different file system types with a single driver. For example, the Single Instance Store (SIS) file system filter driver in Microsoft Windows 2000 conserves disk space by removing multiple copies of a file and replacing them with links to a single shared copy. Another example is a virus scanner, which requires access to file system semantics.

### Implementation Considerations

#### Structure and Bootstrapping

Each kernel-mode driver must provide a `DriverEntry()` function, called by the I/O manager during driver load. This function performs initialization tasks such as reading registry settings, allocating data structures, and initializing the `MajorFunction` table. The `MajorFunction` table lists the dispatch points supported by the driver. The I/O manager packs each I/O request into an IRP, which contains all the necessary information, including the desired operation (the `MajorFunction`). The driver sets entries in this table for each `MajorFunction` it wishes to process.

The enforcement driver architecture consists of two parts: a filter driver for file-system-specific operations and another kernel module (e.g., the ECRM, realized as a pseudo device driver) that controls policy operations such as access rights and encryption/decryption. The ECRM is accessed via direct kernel mode calls rather than IRP-based mechanisms, ensuring that cryptographic operations and policy decisions remain secure.

#### Logical Placement of Filter Drivers

The filter driver must be logically located above the driver modules whose behavior it aims to change, augment, or replace. It can also create new calls to lower-layer drivers if more elaborate information or modifications are required. The described filter driver operates above the file system, allowing it to work on and identify individual files without dealing with specific device types.

#### Ensuring Uniform Policy Enforcement

To ensure uniform security policy enforcement, all file systems on a node must be intercepted and controlled by the security system. This is achieved by registering a callback function with the I/O manager, which is called whenever a file system is loaded. This ensures that the filter driver can attach itself to all file systems, even those dynamically loaded after booting. The filter driver must be loaded before all file systems, which can be achieved by assigning it to the "Filter" driver group or setting the appropriate tag value in the registry.

The only file system for which the filter driver is not notified of a load event is the Raw file system, which allows raw device access without file system interpretation. In this case, the filter driver must explicitly attach itself to the Raw file system. Another exception is the LAN Manager redirector used for accessing network shares, though this behavior is no longer observed in Microsoft Windows 2000.

Once the notification callback is called, the filter driver can attach to the file system or file system recognizer and intercept file system control requests, attaching itself to mounted volumes. Once attached, the filter driver can intercept all necessary I/O requests.

#### Modified Read and Write Behavior

Due to the unified virtual memory and file system architecture in the Microsoft Windows NT operating system family, modifying only read (IRP MJ READ) and write (IRP MJ WRITE) operations is insufficient. This would lead to a partially encrypted (or otherwise modified) cache. Memory mapping operations, such as those used for mapping executable files into memory, also need to be considered.

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is more easily understood and well-structured.