ticality of our technique) are applicable in-the-wild.
8 Conclusions
Our work demonstrates that using non-cryptographic ran-
dom number generation of attacker-observable values (even
if the values themselves are not security sensitive), may be
a security vulnerability in itself, due to an attacker’s ability
to extract the key/seed used by the algorithm, and use it as a
ﬁngerprint of the system.
We stress that any replacement cryptographic algorithm
must not be hampered by using a key that is too short, in
order to avoid a key enumeration attack. Also, as a security
measure, we strongly recommend generating unique keys for
such cryptographic usage, without resorting to using secret
data that is used for other purposes (which – in case of a
cryptographic weakness in the algorithm – can leak out).
9 Acknowledgements
with the Israel National Cyber Directorate in the Prime Min-
ister’s Ofﬁce.
We would like to thank the anonymous reviewers for their
feedback, Assi Barak for his help to the project, as well as
Avi Rosen, Sharon Oz, Oshri Asher and the Kaymera Team
for their help with obtaining a rooted Android device.
References
[1] B. Aboba, D. Burnett, T. Brandstetter, C. Jennings,
A. Narayanan,
J.-I. Bruaroey, and A. Bergkvist.
WebRTC 1.0: Real-time communication between
browsers. Candidate recommendation, W3C, June
2018.
https://www.w3.org/TR/2018/CR-webrtc-
20180621/.
[2] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. Gürses,
F. Piessens, and B. Preneel. FPDetective: dusting the
web for ﬁngerprinters. In ACM CCS ’13, pages 1129–
1140, 2013.
[3] R. Arratia, L. Goldstein, and L. Gordon. Two mo-
ments sufﬁce for poisson approximations: The chen-
stein method. Ann. Probab., 17(1):9–25, 01 1989.
[4] D. Baltrunas, A. Elmokashﬁ, A. Kvalbein, and Ö. Alay.
Investigating packet loss in mobile broadband networks
under mobility. In 2016 IFIP Networking Conference
and Workshops, pages 225–233, 2016.
[5] S. M. Bellovin. A technique for counting Natted hosts.
In 2nd SIGCOMM Workshop on Internet Measurement,
pages 267–272, 2002.
[6] Y. Gilad and A. Herzberg. Fragmentation considered
vulnerable. ACM Trans. Inf. Syst. Secur., 15(4):16:1–
16:31, Apr. 2013.
This work was supported by the BIU Center for Research
in Applied Cryptography and Cyber Security in conjunction
[7] F. Gont. Security Implications of Predictable Fragment
Identiﬁcation Values. RFC 7739, Feb. 2016.
1078    28th USENIX Security Symposium
USENIX Association
[8] Google.
Issue 928273: uniﬁed plan breaks rtp dat-
achannels with empty datachannel label, Feb. 2019.
[9] A. Herzberg and H. Shulman. Fragmentation consid-
ered poisonous. CoRR, abs/1205.4011, 2012.
[10] T. Hudek and D. MacMichael. RSS hashing functions.
[11] Information Sciences Institute (University of Southern
California). Internet Protocol. RFC 791, Sept. 1981.
[12] A. Janc and M. Zalewski.
identiﬁcation mechanisms.
of client
www.chromium.org/Home/chromium-security/
client-identification-mechanisms.
Technical analysis
https://
[13] M. Khan.
RTCDataChannel
for
beginners.
https://www.webrtc-experiment.com/docs/
rtc-datachannel-for-beginners.html, 2013.
[14] A. Klein.
Predictable javascript math.random
http:
and http multipart boundary string.
//www.securitygalore.com/site3/math_
random_and_multipart_boundary.
[15] A. Klein. Detecting operation of a virtual machine (US
patent 9384034), July 2016.
[16] J. Knockel and J. R. Crandall. Counting packets sent
between arbitrary internet hosts. In 4th USENIX Work-
shop on Free and Open Communications on the Inter-
net (FOCI 14), 2014.
[17] A. Kumar, V. Paxson, and N. Weaver. Exploiting
underlying structure for detailed reconstruction of an
internet-scale event. In 5th ACM SIGCOMM Conf. on
Internet Measurement, IMC ’05, pages 33–33, 2005.
[18] H. Li and L. Mason. Estimation and simulation of net-
work delay traces for voip in service overlay network.
2007 International Symposium on Signals, Systems and
Electronics, pages 423–425, 2007.
[19] S. Maheshwari, K. Vasu, S. Mahapatra, and C. S. Ku-
mar. Measurement and analysis of UDP trafﬁc over
wi-ﬁ and GPRS. CoRR, abs/1707.08539, 2017.
[20] G. Maone. NoScript. https://noscript.net/.
[21] P. Matthews, J. Rosenberg, D. Wing, and R. Mahy. Ses-
sion Traversal Utilities for NAT (STUN). RFC 5389,
Oct. 2008.
[22] A. Melnikov and I. Fette. The WebSocket Protocol.
RFC 6455, Dec. 2011.
[23] R. Menscher. Exploiting Windows’ IP ID random-
ization bug to leak kernel data and more (CVE-
2018-8493).
https://menschers.com/2018/10/
30/what-is-cve-2018-8493/, November 2018.
[24] Microsoft.
CVE-2018-8493
disclosure
windows
|
vulnerability.
information
TCP/IP
https://portal.msrc.microsoft.com/en-US/
security-guidance/advisory/CVE-2018-8493.
[25] L. Orevi, A. Herzberg, and H. Zlatokrilov. DNS-DNS:
DNS-based de-nat scheme. In Cryptology and Network
Security CANS, pages 69–88, 2018.
[26] D. Reed, P. S. Traina, and P. Ziemba. Security Con-
siderations for IP Fragment Filtering. RFC 1858, Oct.
1995.
[27] R. Roemer, E. Buchanan, H. Shacham, and S. Sav-
age. Return-oriented programming: Systems,
lan-
guages, and applications. ACM Trans. Inf. Syst. Secur.,
15(1):2:1–2:34, Mar. 2012.
[28] F. Salutari, D. Cicalese, and D. Rossi. A closer look at
ip-id behavior in the wild. In International Conference
on Passive and Active Network Measurement (PAM),
Berlin, Germany, Mar. 2018.
[29] H. Shulman. Pretty bad privacy: Pitfalls of DNS en-
In 13th Workshop on Privacy in the Elec-
cryption.
tronic Society, WPES ’14, pages 191–200, 2014.
[30] M. J. Silbersack.
darwin-xnu/bsd/netinet/ip_id.c.
https://opensource.apple.com/source/xnu/
xnu-4570.41.2/bsd/netinet/ip_id.c.
[31] H. Wramner. Tracking users on the world wide web.
http://www.nada.kth.se/utbildning/grukth/
exjobb/rapportlistor/2011/rapporter11/
wramner_henrik_11041.pdf, 2011.
[32] M. Zalewski. Silence on the Wire. No Starch Press,
2005.
A Details of the Attack on Windows
A.1 Practical Considerations
A.1.1 Controlling Packets from the Browser
UDP: As explained in Section 6.3, it is possible to emit UDP
trafﬁc to arbitrary hosts and ports using WebRTC. The packet
payload is not controlled. The tracker can use the UDP des-
tination port in order to associate STUN trafﬁc to the same
measurement.
TCP: WebSocket [22] emits TCP trafﬁc in a controlled fash-
ion once a circuit is established, thus can be used by the snip-
pet to fully control packet transmission. The downside of
using TCP-based protocols is the TCP-level retransmission,
which can introduce loss of synchronization between the de-
vice and the server side, regarding how many packets were
sent. The tracker can use the packet payload to mark packets
that belong to the same measurement.
USENIX Association
28th USENIX Security Symposium    1079
Table 3: Common tail length probability - measured with
1000 randomly chosen sets of 30 IPs (J = 6,G = 12,Q = 3),
10,000 tests each (107 tests altogether).
Common
tail [bits]
45
44
43
Prob.
0.9937579
0.0058328
0.0003783
Common
tail [bits]
42
41
≤ 40
Prob.
2.6× 10−5
2.9× 10−6
2.1× 10−6
A.1.2 Packet Transmission Order
We encountered cases in the wild where the packet payload
generation order is not identical to packet transmission or-
der. Speciﬁcally, Microsoft IE and Edge are prone to this
behavior. This is only relevant in the same class B network
(since there the original extraction algorithm makes an as-
sumption on the order of the packets). Therefore, the tracker
should try all possible permutations of packet order (per class
B network IPs). In Phase 1, this means enumerating over all
π ∈ SJ (J! permutations). For each permutation, use the fol-
lowing deﬁnition of D j (instead of the original one):
D j = (Vec(IPID j − (β0 + π( j)) mod 215)⊕
Vec(IPID0 − (β0 + π(0)) mod 215))17,...,31
It follows that enumerating over all possible orders will in-
crease the run time of Phase 1 by a factor of J!. In Phase 2,
for each pair of IP addresses, there are only 2! permutations,
and since the elimination is so powerful, this will only affect
the run time due to the ﬁrst pair, i.e. will double the run time.
A.1.3 Handling False Positives
The issue of false positive keys is covered in the extended
paper. As mentioned there, the vast majority of false positive
keys only differ from the correct key by a few leftmost bits.
Table 3 demonstrates that with an optimal choice of 30 IP
addresses, if the tracker keeps only 41 bits of the key tail,
he/she will get multiple keys with probability 2.1 × 10−6,
which is sufﬁciently small even for a large scale deployment.
In the case where multiple keys are emitted by the al-
gorithm (even after truncation, e.g.
to 41 bits), two strate-
gies can be applied: either (a) determining that this partic-
ular device cannot be assigned an ID (at the price of losing
2.1× 10−6 of the devices); or (b) assigning multiple IDs to
the device (which makes tracking the device more compli-
cated and more prone to ID collisions).
A.1.4 Handling False Negatives and Interference
It is important to note that while there may be false positives,
there are no algorithmic false negatives, i.e.
the algorithm
always emits the correct key (possibly along with incorrect
keys), given the correct data. However, it is possible for the
algorithm to receive incorrect data, in the sense that IP IDs
are provided which are not (even after re-ordering) derived
from an incrementing counter – i.e. there are “gaps” in the
counter values associated with the IP IDs. This can happen
either due to packet loss or due to interference.
Packet loss: In TCP, when a packet from the client to the
server is lost, the client will note a missing ACK and will
eventually retransmit the original data (with incremented IP
ID). This will cause a gap in the counter values, which can
be enumerated by the analysis logic (our analysis logic does
not currently implement this). Another packet loss scenario
is wherein the ACK packet from the server to the client is
lost, and the client retransmits the original data. The server
however receives two such packets, and can simply discard
the one with incremented IP ID. Thus the “problematic” sce-
nario is the one wherein the original data packet is lost.
Interference: Theoretically, an unrelated packet sent by the
Windows device in between measurement packets may inter-
fere with the measurement. However, this is very unlikely.
First, the interfering packet must fall into the same counter
bucket as that of the measurement packets – this happens
with probability of 1/8192 for a given bucket. Second, the
timing is delicate – the interfering packet should be sent be-
tween the ﬁrst and the last measurement packet. This time
window is below 1 second, so overall the likelihood for in-
terference is very low. When such an interference happens,
it creates a gap in the IP ID values, which can be addressed
as explained below.
Addressing “gaps”: The analysis logic can compensate for
up to l lost packets in the ﬁrst class B network (g = 0) by
enumerating over all possible ∑l
tions (each addendum counts all weak compositions of d
into J − 1 parts). In our experiment, we measured l = 4 for
some “difﬁcult” networks, so for J = 6 there are 126 gap
conﬁgurations, thus a ×126 factor in the runtime. Note that
a gap in the transmissions for g > 0 is much easier to han-
dle, as (IPIDg,1 − IPIDg,0) in eq (5) may now take values
in {1, . . . ,l + 1}, so there is no runtime factor for this case.
When the total gap space is larger than l, the algorithm will
yield no key. In such a case, the server can instruct the snip-
pet to run another test. Therefore the actual false negative
probability can be reduced to as small as necessary.
(cid:1) gap conﬁgura-
d=0
(cid:0)J−2+d
J−2
A.2 Optimizing the IP Set for Minimum False
Positives
Since (from Table 3) keys with ﬂipped K18 are the source
of most false positives, the tracker should choose a set of IP
addresses that minimizes (over Q) this false positive proba-
bility, 2−(J−1)−Q + 2−(G−Q) (this calculation can be found in
the extended paper.) The said minimum is at Q = G−(J−1)/2,
and yields false positive leading term of 2 · 2− G+J−1
. For
G = 12, J = 6, the optimum is at Q = 3 or Q = 4.
2
1080    28th USENIX Security Symposium
USENIX Association