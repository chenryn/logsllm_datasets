title:Identifying and Utilizing Dependencies Across Cloud Security Services
author:Ahmed Taha and
Patrick Metzler and
Rub&apos;en Trapero and
Jesus Luna and
Neeraj Suri
Identifying and Utilizing Dependencies Across Cloud
Security Services
Ahmed Taha
Technische Universität
Darmstadt, Germany
Patrick Metzler
Technische Universität
Darmstadt, Germany
Ruben Trapero
Technische Universität
Darmstadt, Germany
Jesus Luna
Technische Universität
Darmstadt, Germany
Neeraj Suri
Technische Universität
Darmstadt, Germany
ABSTRACT
Security concerns are often mentioned amongst the reasons
why organizations hesitate to adopt Cloud computing. Given
that multiple Cloud Service Providers (CSPs) oﬀer similar
security services (e.g., “encryption key management”) albeit
with diﬀerent capabilities and prices, the customers need to
comparatively assess the oﬀered security services in order to
select the best CSP matching their security requirements.
However, the presence of both explicit and implicit depen-
dencies across security related services add further chal-
lenges for Cloud customers to (i) specify their security re-
quirements taking service dependencies into consideration
and (ii) to determine which CSP can satisfy these require-
ments.
We present a framework to address these challenges. For
challenge (i), our framework automatically detects conﬂicts
resulting from inconsistent customer requirements. More-
over, our framework provides an explanation for the de-
tected conﬂicts allowing customers to resolve these conﬂicts.
To tackle challenge (ii), our framework assesses the secu-
rity level provided by various CSPs and ranks the CSPs
according to the desired customer requirements. We demon-
strate the framework’s eﬀectiveness with real-world CSP
case studies derived from the Cloud Security Alliance’s Se-
curity, Trust and Assurance Registry.
Keywords
Cloud security, security quantiﬁcation, security service level
agreements, service dependencies
1.
INTRODUCTION
Cloud computing oﬀers a model where resources (storage,
server, etc.) are abstracted and provided “as-a-service” in a
remotely accessible manner. In such a service-based envi-
ronment, service provisioning relies on a service level agree-
ment (SLA) which represents a formal contract established
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897911
between the Cloud Service Customer (CSC) and the Cloud
Service Provider (CSP). The SLA speciﬁes how provision-
ing takes place as well as the respective rights and duties
of the CSC and the CSP. Furthermore, the SLA includes
the list of Service Level Objectives (SLOs) which are the
measurable elements of an SLA that specify the Cloud ser-
vices levels requested by the customers, and required to be
achieved by the CSP. With security as a major driver, dif-
ferent stakeholders in the Cloud community1 have identiﬁed
that specifying security parameters in SLAs (termed as secu-
rity SLAs or simply secSLAs) is useful to establish common
semantics to provide and manage security assurance from
two perspectives, namely (i) the security level being oﬀered
by a CSP, and (ii) the security level being requested by a
Cloud customer.
With the growth of public Cloud security services, multiple
CSPs oﬀer “similar” services at diﬀerent prices and capa-
bilities. However, the oﬀered services are typically bundled
together with explicit and implicit dependency2 relations
across them to complicate selection of the single appropri-
ate CSP. For example, the “encryption key management”
service in the Cloud depends on several factors such as (a)
the techniques used to store the encryption keys, (b) the pro-
cesses specifying how keys are accessed, (c) the possibility
of the key recovery, and ﬁnally (d) the control and manage-
ment of each key. Each of these factors contains diﬀerent
levels of services (e.g., diﬀerent techniques to store and dis-
tribute the keys) which the customer can require and the
CSP agrees to fulﬁll. Most of these factors also depend on
each other. These dependency relations increase the diﬃcul-
ties of the customers for ﬁnding the single CSP that satisﬁes
their requirements since these relations can easily introduce
conﬂicts; for instance, a customer may require an unachiev-
able level3 of a dependent security service which cause these
requirements to be impossible to satisfy. Moreover, a cus-
tomer requirement may inﬂuence or be inﬂuenced by other
requirements. Consequently, a CSP being unaware of re-
1For example, the European Network and Information Se-
curity Agency (ENISA), Cloud Security Alliance (CSA),
ISO/IEC, and the European Commission.
2Dependency relations between services or simply service
dependencies are the direct relations between one or more
services, where a service can depend on data or resources
provided by another service.
3Unachievable service level exists when a service depends
on resources which are not provided by the corresponding
dependent service.
329lated dependencies can erroneously agree on providing an
unachievable level of security service according to the cus-
tomer requirement. Naturally, the CSP will not be able to
fulﬁll this requirement which results in a secSLA violation.
As the number of Cloud security services grow, the number
of dependencies across the security services also increases
making it more likely for customers to introduce conﬂicts.
Also it becomes harder to manually detect and identify the
causes of these conﬂicts especially when multiple types of de-
pendency relations are involved. Therefore, customers need
to ﬁrst consider the dependencies between security services
that span across their security requirements speciﬁcation,
and then assess the security services oﬀered by diﬀerent
CSPs to rank diﬀerent CSPs based on the customer secu-
rity requirements and priorities.
Although the state of the art predominantly focuses on the
methodologies to evaluate and assess Cloud secSLAs [18, 27,
12, 21], most of these methodologies do not account for in-
formation about dependencies between services. Overall, it
is important to provide customers with comprehensive sup-
port that can enable an automatic detection of conﬂicts and
explanations for the dependent relations.
1.1 Contributions
This paper aims to solve the aforementioned issues by
proposing a framework for the (i) analysis of the secSLAs
service dependencies with the handling of all conﬂicts, and
(ii) the selection of security services. This is done by:
1) Proposing a dependency representation model for vali-
dating the secSLAs by checking the existence of conﬂicts
that occur due to diﬀerent dependency relations between
services. The process of analyzing conﬂicts is both itera-
tive and interactive.
2) Assisting customers who could not resolve the conﬂicts
and thus could not specify their requirements by repre-
senting the security requirements in an easy dependent
ordered structure using Design Structure Matrix (DSM).
In this structure, the security services are ordered accord-
ing to their level of dependency. This makes the secSLA
services and dependencies explicit and traceable regard-
less of the number of security services.
3) Ranking the CSPs according to the customer require-
ments in order to ﬁnd the best matching CSP.
4) Validation of the proposed framework by evaluating CSPs
secSLAs found on the public CSA STAR (Security, Trust
and Assurance Registry) [8] repository.
To the best of our knowledge, our approach is the ﬁrst at-
tempt to provide customers with (a) a wide range of sup-
port covering conﬂict detection, (b) outlining dependency
conﬂicts for problematic customers requirements, and (c) a
framework to assess and rank the CSPs according to the
customer requirements. The rest of the paper is organized
as follows. Section 2 develops the background and the ba-
sic terminologies related to Cloud secSLAs and the service
dependencies. The architecture of the proposed framework
is elaborated in Section 3. Section 4 presents a real-world
use-cases validating the Cloud services evaluation as well as
dependency management. Section 5 describes the related
work.
2. BASIC CONCEPTS
2.1 Security Service Level Agreements
A Cloud security Service Level Agreement (secSLA) de-
scribes the provided security services, and represents the
binding commitment between a CSP and a customer. Ba-
sically, this outlines the desired security services, each of
which contains a list of SLOs. Each SLO is composed of one
or more metric values that help in the measurement of the
Cloud SLOs by deﬁning parameters and measurement rules
that facilitate assessment and decision making. Based on the
analysis of the state of practice presented in [14], Cloud sec-
SLAs are typically graphically modeled using a hierarchical
structure, as shown in Figure 1. The root of the structure
deﬁnes the main container for the secSLA. The intermediate
levels (second and third levels in Figure 1) are the services
which form the main link to the security framework used by
the CSP. The lowest level (SLO level) represents the actual
SLOs committed by the CSP and consequently oﬀered to
the Cloud customer. These SLOs are the threshold values
which are speciﬁed in terms of security metrics.
It is worth noting that the process of modeling values to a
quantitative metric is not straightforward as SLOs can have
varied types/ranges of composite qualitative and quantita-
tive values. Hence, we introduce the notion of a “security
level” associated to each SLO of the secSLA. To formalize
this concept we introduce the following deﬁnition.
Deﬁnition 1. A secSLA consists of a set of services S =
s1, ..., sn. Each service s consists of ﬁnite positive number
n of SLOs ki; where i = 1 . . . n. Each SLO ki consists of m
diﬀerent metric values vi; such that ki = vi,1, vi,2, ..., vi,m.
Each value implies a diﬀerent security level oﬀered by the
CSP and required by the customer. The total order of secu-
rity levels ki is deﬁned using an order relation ” <i ”; such
that ki = vi,1 < vi,2 < ... < vi,m. Each ki value is mapped to
a progressive numerical value according to its order. These
numerical values are then normalized with respect to the ki’s
number of values (m) such that ki =
<
< . . . <
1
m
2
m
m
m
.
Figure 1: Cloud secSLA hierarchy
An example of an SLO, as shown in Figure 1, is “Percent-
age of timely incident reports” SLO which is composed of
Information Security Incident Management (sn.1)Crypt brute force resistanceHardware module protection levelPercentage of timely incident reports Percentage of timely incident responses level1level3level2level0Cloud secSLAEncryption and Key ManagementEKM (s1)Identity and Access ManagementIAM (sn)Cryptography(s1.1) security verification(s1.2)RootlevelSLO level330{yearly < half yearly < monthly < weekly} values which
are deﬁned using security levels as level1 < level2 < . . . <
level4 respectively. These security levels correspond to { 1
<
4
}. Let us consider a CSP committing “Percent-
2
4
age of timely incident reports” such that the CSP’s secSLA
specify: Percentage of timely incident report= level2 such
< . . . <
4
4
2
4
that vi =
. A CSP commits other SLOs in a similar man-
ner such that the overall CSP’s secSLA contains a list of
SLOs with diﬀerent values that the CSP is committed to
fulﬁll. If any of these committed values is not fulﬁlled by
the CSP, then the secSLA is violated.
2.2 Service Dependencies
A service dependency is a directed relation between the
services oﬀered in Cloud scenarios. It is expressed as a 1 : n
relationship where one service (termed as dependent) de-
pends on one or multiple services (termed as antecedent).
A service can depend on data or resources provided by an-
other service. A service s1 is dependent on service s2 if the
provisioning of s1 is conditional to the provisioning of s2.
Explicit knowledge about dependencies is needed to sup-
port the management of secSLA by both CSPs and cus-
tomers. Several types of dependencies are used in literature
such as Quality of Service (QoS), price, resource and time
dependencies [30]. In this paper we only consider resource
dependencies which are validated by matching the security
values of the dependent and antecedent SLOs speciﬁed in
their secSLAs.
diﬀerent level of dependencies importance presented using a
three level scale as shown in Table 1 and Figure 2.
All the dependencies explained so far are considered unidi-
rectional dependencies. Other dependencies as bidirectional
(interdependent relations between services) may occur as
well. Bidirectional dependency occurs between services s1
and s2 if the provisioning of s1 is conditional to the provi-
sioning of s2 and at the same time the provisioning of s2 is
conditional to the provisioning of s1.
We assume that dependencies between services and SLOs in
the secSLA are predeﬁned and described by relevant stan-
dards working groups. In these groups, the secSLAs contents
are deﬁned along with the type of dependencies and associ-
ated dependency importance levels. These sets of dependen-
cies are categorized in the secSLA template. This template
is later used in the creation of the dependency model and
for the SLOs validation (cf., Section 3.2).
Table 1: Dependency importance level
Numeric scale
Meaning
1
2
3
Weak dependency
Medium dependency
Strong dependency
3. PROPOSED FRAMEWORK
We now develop the framework to achieve the quantita-
tive assessment of CSPs security levels where the CSPs are
ranked (as per their secSLAs) for the best match to the cus-
tomer requirements. As an overview of our framework, the
dependency management and CSPs ranking are performed
in progressive stages as shown in Figure 3.
Figure 2: SecSLA hierarchy showing dependencies
We classify dependencies based on their occurrence between
services and/or SLOs at the same hierarchical level (horizon-
tal dependencies), as well as between diﬀerent levels in the
hierarchical structure (vertical dependencies) [29] as shown
in Figure 2. Dependencies can be further classiﬁed into di-
rect and indirect dependencies. Indirect dependencies occur
between services which do not directly interact with each
other, but where a transitive relationship exists via an in-
termediate service.
In many cases horizontal and vertical
dependencies occur at the same time and both dependen-
cies aﬀect the whole composition hierarchy. We also consider
Figure 3: Proposed framework stages
After the CSPs submit their secSLAs and the customers
specify their security requirements in Stage (A), a depen-
dency model is created in Stage (B) to capture information
about secSLAs services and the dependencies that occur be-
tween them. This model is speciﬁed using a machine read-
Rootservice 1s1k1s1.2k2k5k3k4k6k7k8k9service 2s2s2.1s2.2 Horizontal dependencyVertical dependencys1.1Unidirectional Bidirectionals1.333331122233222212323322222111level1level3level2level02Rootlevel(B) Dependency management approach132Ranked CSPs(A) Security requirements definitionAuditorCSPs secSLAs(C) Structuring secSLA services using DSMCSC  secSLA1. Dependency model creation2. secSLA validationValidated CSPs secSLAsValidated CSC  secSLATrusted repository(D) SecSLAs evaluation and CSPs ranking CSPsCustomer (CSC)331able format to allow automated validation for checking ser-
vice conﬂicts and diﬀerent SLOs compatibility issues. Sub-
sequently in Stage (C), the validated secSLAs are structured
using the DSM depicting dependencies between services as
an ordered listing. The data from the preceding stage feeds
into Stage (D) to assess and rank the CSPs according to the
customer requirements.
In order to guarantee the validity of the proposed framework,
the secSLAs provided by the participating CSPs are required
to come from a trusted source. In a real-world setup, the
trust relationships can be given by an Auditor performing