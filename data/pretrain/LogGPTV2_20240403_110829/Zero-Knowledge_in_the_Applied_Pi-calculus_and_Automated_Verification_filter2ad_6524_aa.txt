title:Zero-Knowledge in the Applied Pi-calculus and Automated Verification
of the Direct Anonymous Attestation Protocol
author:Michael Backes and
Matteo Maffei and
Dominique Unruh
2008 IEEE Symposium on Security and Privacy
Zero-Knowledge in the Applied Pi-calculus and Automated Veriﬁcation of the
Direct Anonymous Attestation Protocol
Max Planck Institute for Software Systems and Saarland University
Michael Backes
b c e @ s u i s . e
a k s
c . n - b d
Matteo Maffei
Dominique Unruh
Saarland University
{ a f i u r h @ s u i s . e
m f e , n u } c . n - b d
Abstract
We devise an abstraction of zero-knowledge protocols that is
accessible to a fully mechanized analysis. The abstraction
is formalized within the applied pi-calculus using a novel
equational theory that abstractly characterizes the crypto-
graphic semantics of zero-knowledge proofs. We present
an encoding from the equational theory into a convergent
rewriting system that is suitable for the automated proto-
col veriﬁer ProVerif. The encoding is sound and fully au-
tomated. We successfully used ProVerif to obtain the ﬁrst
mechanized analysis of (a simpliﬁed variant of) the Direct
Anonymous Attestation (DAA) protocol. This required us
to devise novel abstractions of sophisticated cryptographic
security deﬁnitions based on interactive games. The anal-
ysis reported a novel attack on DAA that was overlooked
in its existing cryptographic security proof. We propose a
revised variant of DAA that we successfully prove secure
using ProVerif.
1 Introduction
Proofs of security protocols are known to be error-prone
and, owing to the distributed-system aspects of multiple
interleaved protocol runs, awkward to make for humans.
In fact, vulnerabilities have accompanied the design of
such protocols ever since early authentication protocols like
Needham-Schroeder [14, 27], over carefully designed de-
facto standards like SSL and PKCS [31, 11], up to current
widely deployed products like Microsoft Passport [16] and
Kerberos [13]. Hence work towards the automation of such
proofs has started soon after the ﬁrst protocols were de-
veloped; some important examples of automated security
proofs are [26, 25, 21, 24, 28, 30, 5, 9]. Language-based
techniques are now widely considered a particularly salient
approach for formally analyzing security protocols, dating
back to Abadi’s seminal work on secrecy by typing [1]. The
ability to reason about security at the language level often
allows for concisely clarifying why certain message compo-
nents are included in a protocol, how their entirety sufﬁces
for establishing desired security guarantees, and for iden-
tifying ambiguities in protocol messages that could be ex-
ploited by an adversary to mount a successful attack on the
protocol.
One of the central challenges in the analysis of complex
and industrial-size protocols is the expressiveness of the
formalism used in the formal analysis and its capability to
model complex cryptographic operations. While such proto-
cols traditionally relied only on the basic cryptographic op-
erations such as encryption and digital signatures, modern
cryptography has invented more sophisticated primitives
with unique security features that go far beyond the tradi-
tional understanding of cryptography to solely offer secrecy
and authenticity of a communication. Zero-knowledge
proofs constitute the most prominent and arguably most
amazing such primitive. A zero-knowledge proof consists
of a message or a sequence of messages that combines two
seemingly contradictory properties: First, it constitutes a
proof of a statement x (e.g, x = ”the message within this
ciphertext begins with 0”) that cannot be forged, i.e., it is im-
possible, or at least computationally infeasible, to produce
a zero-knowledge proof of a wrong statement. On the other
hand, a zero-knowledge proof does not reveal any informa-
tion besides the bare fact that x constitutes a valid state-
ment. In particular, a proof about some ciphertext would not
leak the decryption key or the plaintext. Zero-knowledge
proofs were introduced in [20] and were proven to exist for
virtually all statements [19]. Zero-knowledge proofs have
since shown to constitute very powerful building blocks for
the construction of sophisticated cryptographic protocols to
solve demanding protocol tasks: they allow for commonly
978-0-7695-3168-7 /08 $25.00 © 2008 IEEE
DOI 10.1109/SP.2008.23
202
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
evaluating a function on distributed inputs without reveal-
ing any inputs to the other protocol participants [18], they
allow for developing encryption schemes that are secure un-
der very strong active attacks [15], and many more.
Early general-purpose zero-knowledge proofs were
mainly invented to show the mere existence of such proofs
for the class of statements under consideration. These
proofs were very inefﬁcient and consequently of only lim-
ited use in practical applications. The recent advent of ef-
ﬁcient zero-knowledge proofs for special classes of state-
ments changed this. The unique security features that zero-
knowledge proofs offer combined with the possibility to ef-
ﬁciently implement some of these proofs have paved these
proofs the way into modern cryptographic protocols such
as e-voting protocols and anonymity protocols. The best
known representative of these protocols is the Direct Anony-
mous Attestation (DAA) protocol [12]. DAA constitutes a
cryptographic protocol that enables the remote authentica-
tion of a Trusted Platform Module (TPM) while preserving
the user’s privacy. More precisely, if the user talks to the
same veriﬁer twice, the veriﬁer is not able to tell if he com-
municates with the same user as before or with a different
one. DAA achieves its anonymity properties by heavily re-
lying on non-interactive zero-knowledge proofs. Intuitively,
these allow the TPM to authenticate with the veriﬁer with-
out revealing the TPM’s secret identiﬁer.
1.1 Contributions
The contribution of this paper is threefold: First, we
present an abstraction of non-interactive zero-knowledge
proofs within the applied pi-calculus [4] using a novel equa-
tional theory that abstractly characterizes the cryptographic
semantics of these proofs. Second, we transform our ab-
straction into an equivalent formalization that is accessi-
ble to ProVerif [10], a well-established tool for the mech-
anized analysis of different security properties. Third, we
apply our theory to a simpliﬁed variant of the Direct Anony-
mous Attestation (DAA) protocol [12], the authentication
scheme for Trusted Platform Modules (TPMs), yielding its
ﬁrst mechanized security proof. The analysis reported a
novel attack on DAA that was overlooked in its existing
cryptographic security proof. We propose a revised variant
that we successfully prove secure.
We express cryptographic protocols in the applied pi-
calculus, an extension of the pi-calculus with an arbitrary
equational theory for terms, that has proven to constitute a
salient foundation for the analysis of cryptographic proto-
cols, see [3, 23, 10, 2, 17]. We devise a novel equational
theory that concisely and elegantly characterizes the seman-
tic properties of non-interactive zero-knowledge proofs, and
that allows for abstractly reasoning about such proofs. The
design of the theory in particular requires to carefully ad-
dress the important principles that zero-knowledge proofs
are based upon: the soundness and the completeness of the
proof veriﬁcation as well as the actual zero-knowledge prop-
erty, i.e., a veriﬁer must not be able to learn any new infor-
mation from a zero-knowledge proof except for the validity
of the proven statement. The only prior work on abstracting
in a general way zero-knowledge proofs aims at formalizing
in modal logic the informal prose used to describe the prop-
erties of these proofs [22]. In contrast to our abstraction,
the abstraction in [22] has not been applied to any example
protocols, and no mechanization of security proofs is con-
sidered there.
The mechanization of language-based security proofs
has recently enjoyed substantial improvements that have fur-
ther strengthened the position of language-based techniques
as a promising approach for the analysis of complex and
industrial-size cryptographic protocols. ProVerif [10] con-
stitutes a well-established automated protocol veriﬁer based
on Horn clauses resolution that allows for the veriﬁcation of
observational equivalence and of different trace-based secu-
rity properties such as authenticity. We present a mecha-
nized encoding of our equational theory into a ﬁnite spec-
iﬁcation that is suitable for ProVerif. More precisely, the
equational theory is compiled into a convergent rewriting
system that ProVerif can efﬁciently cope with. We prove
that the encoding preserves observational equivalence and a
large class of trace-based security properties.
Finally, we exemplify the applicability of our theory
to real-world protocols by analyzing the security proper-
ties of the Direct Anonymous Attestation (DAA) protocol
[12]. DAA constitutes a cryptographic protocol that en-
ables the remote authentication of a hardware module called
the Trusted Platform Module (TPM), while preserving the
anonymity of the user owning the module. Such TPMs are
now widely included in end-user notebooks. The DAA pro-
tocol relies heavily on zero-knowledge proofs to achieve its
anonymity guarantees. Analyzing DAA ﬁrst requires to de-
vise novel abstractions of sophisticated cryptographic secu-
rity deﬁnitions based on interactive games between honest
participants and the adversary; comprehensive anonymity
properties are of this form. We formulate the intended
anonymity properties in terms of observational equivalence,
we formulate authenticity as a trace-based property, and we
prove these properties in the presence of external active ad-
versaries as well as corrupted participants. The analysis con-
ﬁrmed a known attack on anonymity [29] and discovered a
new attack on authenticity. We propose a revised variant
and prove it secure.
The proofs are fully automated using ProVerif. We
are conﬁdent that the methodology presented in this pa-
per is general and the principles followed in the analysis
of DAA can be successfully exploited for the veriﬁcation
of other cryptographic protocols based on non-interactive
203
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
Table 1 Syntax of the applied pi-calculus
Table 2 Internal reduction
Terms
M, N, F, Z ::= s, k, . . . , a, b, . . . , n, m names
x, y, z
f(M1, . . . , Mk)
where f ∈ Σ and k is the arity of f.
vars
function
Processes
P, Q ::= 0
nil
res
νn.P
if M = N then P else Q cond
u(x).P
input
u(cid:3)N (cid:4).P
output
P | Q
par
!P
repl
zero-knowledge proofs.
1.2 Outline of the Paper
We start by reviewing the applied pi-calculus in Sec-
tion 2. Section 3 contains the equational theory for ab-
stractly reasoning about non-interactive zero-knowledge
proofs in the applied pi-calculus. This equational theory is
rewritten into an equivalent ﬁnite theory in terms of a con-
vergent rewriting system in Section 4. Section 5 elaborates
on the analysis of DAA, the description of its security prop-
erties, and the use of ProVerif for mechanizing the analysis.
Section 6 concludes and outlines future work.
2 Review of the Applied Pi-calculus
The syntax of the applied pi-calculus [4] is given in Table 1.
Terms are deﬁned by means of a signature Σ, which con-
sists of a set of function symbols, each with an arity. The
set of terms TΣ is the free algebra built from names, vari-
ables, and function symbols in Σ applied to arguments. We
let u range over names and variables. We partition each
signature into public and private function symbols. The
only difference is that private symbols are not available to
the adversary: For more detail on their semantics, we refer
to the long version [7]. Private function symbols are sup-
ported by ProVerif and are used in the ﬁnite encoding of
the equational theory for zero-knowledge proofs and in the
DAA model. In the following, functions symbols are public
unless stated otherwise. Terms are equipped with an equa-
tional theory E, i.e., an equivalence relation on terms that is
closed under substitution of terms and under application of
term contexts (terms with a hole). We write E (cid:5) M = N
204
COMM
a(cid:3)x(cid:4).P | a(x).Q → P | Q
THEN
if M = M then P else Q → P
ELSE
M, N ground
E (cid:7)(cid:5) M = N
if M = N then P else Q → Q
and E (cid:7)(cid:5) M = N for an equality and an inequality, respec-
tively, modulo E.
The grammar of processes (or plain processes) is de-
The null process 0 does nothing;
ﬁned as follows.
νn.P generates a fresh name n and then behaves as P ;
if M = N then P else Q behaves as P if E (cid:5) M = N ,
and as Q otherwise; u(x).P receives a message N from
the channel u and then behaves as P {N/x}; u(cid:3)N (cid:4).P out-
puts the message N on the channel u and then behaves as
P ; P | Q executes P and Q in parallel; !P generates an
unbounded number of copies of P .
As in the pi-calculus, the semantics is deﬁned in terms
of structural equivalence (≡) and internal reduction (→).
Structural equivalence states which processes should be
considered equivalent up to syntactic re-arrangement. Inter-
nal reduction deﬁnes the semantics for extended processes.
Deﬁnition 1 (Internal Reduction) Internal reduction (→)
is the smallest relation on extended processes that satisﬁes
the rules in Table 2 and that is closed under structural equiv-
alence and under application of evaluation contexts.
Observational equivalence constitutes an equivalence re-
lation that captures the equivalence of processes with re-
spect to their dynamic behavior.
Intuitively, two processes
P and Q are observationally equivalent, written P ≈ Q,
if they are indistinguishable to an observer inspecting the
messages sent and received on public channels. We post-
pone the formal deﬁnition of observational equivalence to
Appendix A.
3 An Equational Theory of Zero-Knowledge
In this section we deﬁne a signature and an equational
theory for abstractly reasoning about non-interactive zero-
knowledge proofs. Our equational theory is parametric in
that it augments an arbitrary base equational theory.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
Table 3 A base equational theory containing basic crypto-
graphic primitives and logical operators
⎧⎪⎪⎨
⎪⎪⎩
⎫⎪⎪⎬
⎪⎪⎭
Σbase =
pair, encsym, decsym, encasym, decasym,
sign, ver, msg, pk, sk, h, bl,
unbl, blsign, blver, blmsg,
∧, ∨, eq, ﬁrst, snd, true, false
ver and blver of arity 3, pair, encsym, decsym, encasym, decasym,
sign, bl, unbl, blsign, ∧, ∨ and eq of arity 2, msg, pk, sk, h,
blmsg, ﬁrst and snd of arity 1, true and false of arity 0.
Ebase is the smallest equational theory satisfying the following
equations deﬁned over all x, y, z:
= x
= y
= x
= x
= true
= x
ﬁrst(pair(x, y))
snd(pair(x, y))
decsym(encsym(x, y), y)
decasym(encasym(x, pk(y)), sk(y))
ver(sign(x, sk(y)), x, pk(y))
msg(sign(x, y))