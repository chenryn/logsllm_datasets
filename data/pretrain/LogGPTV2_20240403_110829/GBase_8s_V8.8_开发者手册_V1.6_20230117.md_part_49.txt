(c_customer_sk integer,
c_customer_id char(5),
c_first_name char(6),
c_last_name char(8)
);
步骤2 使用INSERTINTO…SELECT语句向副本填充原始表中的数据。
gbase=#INSERTINTOcustomer_t_copy(SELECT*FROMcustomer_t);
步骤3 删除原始表。
gbase=#DROPTABLEcustomer_t;
步骤4 使用ALTERTABLE语句将副本重命名为原始表名称。
gbase=#ALTERTABLEcustomer_t_copyRENAMETOcustomer_t;
----结束
9.6.2 使用 CREATE TABLE LIKE 执行深层复制
该方法使用CREATETABLELIKE语句创建原始表的副本，将原始表的数据填充至副
本并重命名副本，完成原始表的复制。该方法不继承父表的主键属性，可以使用ALTER
南大通用数据技术股份有限公司
325
GBase 8s V8.8开发者手册
TABLE语句来添加主键属性。
操作步骤
步骤1 使用CREATETABLELIKE语句创建表customer_t的副本customer_t_copy。
gbase=#CREATETABLEcustomer_t_copy(LIKEcustomer_t);
步骤2 使用INSERTINTO…SELECT语句向副本填充原始表中的数据。
gbase=#INSERTINTOcustomer_t_copy(SELECT*FROMcustomer_t);
步骤3 删除原始表。
gbase=#DROPTABLEcustomer_t;
步骤4 使用ALTERTABLE语句将副本重命名为原始表名称。
gbase=#ALTERTABLEcustomer_t_copyRENAMETOcustomer_t;
----结束
9.6.3 通过创建临时表并截断原始表来执行深层复制
该方法使用CREATETEMPTABLE...AS语句创建原始表的临时表，然后截断原始表并
从临时表填充原始表，以完成原始表的深层复制。
在新建表需要保留父表的主键属性，或如果父表具有依赖项的情况下，建议使用此方法。
操作步骤
步 骤 1 使 用 CREATE TEMP TABLE AS 语 句 创 建 表 customer_t 的 临 时 表 副 本
customer_t_temp。
gbase=#CREATETEMPTABLEcustomer_t_tempASSELECT*FROMcustomer_t;
与使用永久表相比，使用临时表可以提高性能，但存在丢失数据的风险。临时表只在当
前会话可见，本会话结束后将自动删除。如果数据丢失是不可接受的，请使用永久表。
步骤2 截断当前表customer_t。
gbase=#TRUNCATEcustomer_t;
步骤3 使用INSERTINTO…SELECT语句从副本中向原始表中填充数据。
gbase=#INSERTINTOcustomer_t(SELECT*FROMcustomer_t_temp);
步骤4 删除临时表副本customer_t_temp。
南大通用数据技术股份有限公司
326
GBase 8s V8.8开发者手册
gbase=#DROPTABLEcustomer_t_temp;
----结束
9.7 分析表
执行计划生成器需要使用表的统计信息，以生成最有效的查询执行计划，提高查询性能。
因此数据导入完成后，建议执行ANALYZE语句生成最新的表统计信息。统计结果存储在
系统表PG_STATISTIC中。
分析表
ANALYZE支持的表类型有行/列存表。ANALYZE同时也支持对本地表的指定列进行信
息统计。下面以表的 ANALYZE 为例，更多关于 ANALYZE 的信息，请参见《GBase 8s
V8.8_SQL手册》 ANALYZE|ANALYSE。
步骤1 更新表统计信息。
以表product_info为例，ANALYZE命令如下：
gbase=#ANALYZEproduct_info;
ANALYZE
----结束
表自动分析
GBase8s提供GUC参数autovacuum，用于控制数据库自动清理功能的启动。
autovacuum设置为on时，系统定时启动autovacuum线程来进行表自动分析，如果表中
数据量发生较大变化达到阈值时，会触发表自动分析，即autoanalyze。
 对于空表而言，当表中插入数据的行数大于50时，会触发表自动进行ANALYZE。
 对于表中已有数据的情况，阈值设定为50+10%*reltuples，其中reltuples是表的总行数。
autovacuum自动清理功能的生效还依赖于下面两个GUC参数：
 track_counts 参数需要设置为on，表示开启收集收据库统计数据功能。
 autovacuum_max_workers参数需要大于0，该参数表示能同时运行的自动清理线程的最
大数量。
 autoanalyze只支持默认采样方式，不支持百分比采样方式。
南大通用数据技术股份有限公司
327
GBase 8s V8.8开发者手册
 多列统计信息仅支持百分比采样，因此autoanalyze不收集多列统计信息。
 autoanalyze支持行存表和列存表，不支持外表、临时表、unlogged表和toast表。
9.8 对表执行 VACUUM
如果导入过程中，进行了大量的更新或删除行时，应运行VACUUMFULL命令，然后
运行ANALYZE命令。大量的更新和删除操作，会产生大量的磁盘页面碎片，从而逐渐降
低查询的效率。VACUUMFULL可以将磁盘页面碎片恢复并交还操作系统。
步骤1 对表执行VACUUMFULL。
以表product_info为例，VACUUMFULL命令如下：
gbase=#VACUUMFULLproduct_info
VACUUM
----结束
9.9 管理并发写入操作
事务隔离说明
GBase8s数据库是基于MVCC（多版本并发控制），并结合两阶段锁的方式进行事务
管理的。特点是读写之间不阻塞。SELECT是纯读操作，UPDATE和DELETE是读写操作。
 读写操作和纯读操作之间并不会发生冲突，读写操作之间也不会发生冲突。每个并发事
务在事务开始时创建事务快照，并发事务之间不能检测到对方的更改。
 读已提交隔离级别中，如果事务T1提交后，事务T2就可以看到事务T1更改的结
果。
 可重复读级别中，如果事务T1提交事务前事务T2开始执行，则事务T1提交后，
事务T2依旧看不到事务T1更改的结果，保证了一个事务开始后，查询的结果前
后一致，不受其他事务的影响。
 读写操作，支持的是行级锁，不同的事务可以并发更新同一个表，只有更新同一行时才
需等待，后发生的事务会等待先发生的事务提交后，再执行更新操作。
 READCOMMITTED：读已提交隔离级别，事务只能读到已提交的数据而不会读到
未提交的数据，这是缺省值。
 REPEATABLEREAD：事务只能读到事务开始之前已提交的数据，不能读到未提
南大通用数据技术股份有限公司
328
GBase 8s V8.8开发者手册
交的数据以及事务执行期间其它并发事务提交的修改。
9.9.1 写入和读写操作
关于写入和读写操作的命令：
 INSERT，可向表中插入一行或多行数据。
 UPDATE，可修改表中现有数据。
 DELETE，可删除表中现有数据。
 COPY，导入数据。
INSERT和COPY是纯写入的操作。并发写入操作，需要等待，对同一个表的操作，当
事务T1的INSERT或COPY未解除锁定时，事务T2的INSERT或COPY需等待，事务T1
解除锁定时，事务T2正常继续。
UPDATE和DELETE是读写操作（先查询出要操作的行）。UPDATE和DELETE执行
前需要先查询数据，由于并发事务彼此不可见，所以UPDATE和DELETE操作是读取事务
发生前提交的数据的快照。写入操作，是行级锁，当事务T1和事务T2并发更新同一行 时，
后发生的事务T2会等待，根据设置的等待时长，若超时事务T1未提交则事务T2执行失败；
当事务T1和事务T2并发更新的行不同时，事务T1和事务2都会执行成功。
9.9.2 并发写入事务的潜在死锁情况
只要事务涉及多个表的或者同一个表相同行的更新时，同时运行的事务就可能在同时尝
试写入时变为死锁状态。事务会在提交或回滚时一次性解除其所有锁定，而不会逐一放弃锁
定。 例如，假设事务T1和T2在大致相同的时间开始：
 如果T1开始对表A进行写入且T2开始对表B进行写入，则两个事务均可继续而不会
发生冲突；但是，如果T1完成了对表A的写入操作并需要开始对表B进行写入，此时
操作的行数正好与T2一致，它将无法继续，因为T2仍保持对表B对应行的锁定，此
时T2开始更新表A中与T1相同的行数，此时也将无法继续，产生死锁，在锁等待超
时内，前面事务提交释放锁，后面的事务可以继续执行更新，等待时间超时后，事务抛
错，有一个事务退出。
 如果T1，T2都对表A进行写入，此时T1更新1-5行的数据，T2更新6-10行的数据，
两个事务不会发生冲突，但是，如果T1完成后开始对表A的6-10行数据进行更新，
T2完成后开始更新1-5行的数据，此时两个事务无法继续，在锁等待超时内， 前面事
南大通用数据技术股份有限公司
329
GBase 8s V8.8开发者手册
务提交释放锁，后面的事务可以继续执行更新，等待时间超时后，事务抛错，有一个事
务退出。
9.9.3 并发写入示例
本章节以表 test 为例，分别介绍相同表的 INSERT 和 DELETE 并发，相同表的并发
INSERT，相同表的并发UPDATE，以及数据导入和查询的并发的执行详情。
CREATETABLEtest(idint,namechar(50),address varchar(255));
9.9.3.1 相同表的 INSERT 和 DELETE 并发
事务T1：
STARTTRANSACTION;
INSERTINTOtestVALUES(1,'test1','test123');
COMMIT;
事务T2：
STARTTRANSACTION;
DELETEtestWHERENAME='test1';
COMMIT;
场景1：
开启事务T1，不提交的同时开启事务T2，事务T1执行INSERT完成后，执行事务T2
的DELETE，此时显示DELETE0，由于事务T1未提交，事务2看不到事务插入的数据；
场景2：
 READCOMMITTED级别
开启事务T1，不提交的同时开启事务T2，事务T1执行INSERT完成后，提交事务T1，
事务T2再执行DELETE语句时，此时显示DELETE1，事务T1提交完成后，事务T2可以
看到此条数据，可以删除成功。
 REPEATABLEREAD级别
开启事务T1，不提交的同时开启事务T2，事务T1执行INSERT完成后，提交事务T1，
事务T2再执行DELETE语句时，此时显示DELETE0，事务T1提交完成后，事务T2依旧
看不到事务T1的数据，一个事务中前后查询到的数据是一致的。
南大通用数据技术股份有限公司
330
GBase 8s V8.8开发者手册
9.9.3.2 相同表的并发 INSERT
事务T1：
STARTTRANSACTION;
INSERTINTOtestVALUES(2,'test2','test123');
COMMIT;
事务T2：
STARTTRANSACTION;
INSERTINTOtestVALUES(3,'test3','test123');
COMMIT;
场景1：
开启事务T1，不提交的同时开启事务T2，事务T1执行INSERT完成后，执行事务
T2的INSERT语句，可以执行成功，读已提交和可重复读隔离级别下，此时在事务T1
中执行 SELECT 语句，看不到事务T2 中插入的数据，事务T2 中执行查询语句看不到
事务T1 中插入的数据。
场景2：
 READCOMMITTED级别
开启事务T1，不提交的同时开启事务T2，事务T1执行INSERT完成后直接提交，事
务T2中执行INSERT语句后执行查询语句，可以看到事务T1中插入的数据。
 REPEATABLEREAD级别
开启事务T1，不提交的同时开启事务T2，事务T1执行INSERT完成后直接提交，事
务T2中执行INSERT语句后执行查询语句，看不到事务T1中插入的数据。
9.9.3.3 相同表的并发 UPDATE
事务T1：
STARTTRANSACTION;
UPDATEtestSETaddress='test1234'WHEREname='test1';
COMMIT;
事务T2：
STARTTRANSACTION;
UPDATEtestSETaddress='test1234'WHEREname='test2';
COMMIT;
南大通用数据技术股份有限公司
331
GBase 8s V8.8开发者手册
事务T3：
STARTTRANSACTION;
UPDATEtestSETaddress='test1234'WHEREname='test1';
COMMIT;
场景1：
开启事务T1，不提交的同时开启事务T2，事务T1开始执行UPDATE，事务T2开始执
行UPDATE，事务T1和事务T2都执行成功。更新不同行时，更新操作拿的是行级锁，不
会发生冲突，两个事务都可以执行成功。
场景2：
开启事务T1，不提交的同时开启事务T3，事务T1开始执行UPDATE，事务T3开始执
行UPDATE，事务T1执行成功，事务T3等待超时后会出错。更新相同行时，事务T1未提
交时，未释放锁，导致事务T3执行不成功。
9.9.3.4 数据导入和查询的并发
事务T1：
STARTTRANSACTION;
COPYtestFROM'...';
COMMIT;
事务T2：
STARTTRANSACTION;
SELECT*FROMtest;
COMMIT;
场景1：
开启事务T1，不提交的同时开启事务T2，事务T1开始执行COPY，事务T2开始执行
SELECT，事务T1和事务T2都执行成功。事务T2中查询看不到事务T1新COPY进来的
数据。
场景2：
 READCOMMITTED级别
开启事务T1，不提交的同时开启事务T2，事务T1开始执行COPY，然后提交，事务
T2查询，可以看到事务T1中COPY的数据。
 REPEATABLEREAD级别
南大通用数据技术股份有限公司
332
GBase 8s V8.8开发者手册
开启事务T1，不提交的同时开启事务T2，事务T1开始执行COPY，然后提交，事务
T2 查询，看不到事务T1中COPY的数据。
10 导出数据
10.1使用 gs_dump 和 gs_dumpall 命令导出数据
10.1.1 概述
GBase8s数据库提供gs_dump和gs_dumpall工具，能够帮助用户导出需要的数据库对
象或其相关信息。结合使用导入工具，将导出的数据信息再导入至新数据库，可以完成数据
迁移。gs_dump支持导出单个数据库或其内的对象，而gs_dumpall支持导出所有数据库或
各库的公共全局对象。详细的使用场景见表10-1。
表 10-1 适用场景
适用场景 支持的导出粒度 支持的导出格式 配套的导入方法
导出单个数据 数据库级导出。 纯文本格式 纯文本格式数据
库 文件导入请参见
 导出全量信息。使用导出的全 自定义归档格式
9.3 使用 gsql 元
量信息可以创建一个与当前库
目录归档格式
命令导入数据。
相同的数据库，且库中数据也
tar归档格式
与当前库相同。 自定义归档格式、
目录归档格式和
 仅导出库中所有对象的定义，
tar 归档格式数据
包含库定义、函数定义、模式
文件导入，参见
定义、表定义、索引定义和存
9.4 使 用
储过程定义等。使用导出的对
gs_restore 命令导
象定义，可以快速创建一个相
入数据。
同的数据库，但是库中并无原
数据库的数据。
 仅导出数据
模式级导出。
导出模式的全量信息。
仅导出模式中数据。