detect up to d-1 errors and correct up to d/2-1 errors
[22]. That is, the BCH-8 code adopted in hybrid sensing
can correct up to 8 errors and detect up to 8 √ó 2 + 1 = 17
errors. However, when adopting BCH-8 in memory systems,
we often do not care if 9 or more errors may be detected as
the line shall be left in erroneous state anyway. In this paper,
we decouple error detection and error correction, and take
advantage of the full error detection capability of BCH-8
code.
In particular, to service a read request, ReadDuo-Hybrid
Ô¨Årst conducts R-sensing and determines the number of drift
errors under R-metric.
‚Ä¢ If there are 8 or fewer errors, ReadDuo-Hybrid corrects
the errors using the BCH-8 attached to the memory line
and returns the corrected data to the processor.
‚Ä¢ If there are 9 to 17 errors, ReadDuo-Hybrid re-issues
the memory request to conduct M-metric sensing. The
second try returns the correct data to the processor.
‚Ä¢ If there are more than 17 errors, ReadDuo-Hybrid
cannot differentiate erroneous data from correct data,
and thus return the sensed data to the processor with
no correction.
We then check Table III and Ô¨Ånd that the probability of a
memory line having 17 or more errors is lower than LERdram
for up to 640s. Given that our M-metric scrubbing interval
is also 640s, we next discuss how to ensure the reliability
of ReadDuo-Hybrid.
Enhancing W=1 based scrubbing to W=0. When a
hybrid sensing uses setting (BCH=8,S=640s,W=1), it shall
perform M-metric based scrubbing on all lines in every
640s. Since M-metric is drift-resistant, scrubbing will skip
re-writing most memory lines as there are no errors. Given
that R-sensing can reliably sense a memory line only within
640s after its last write, such a skip jeopardizes R-sensing
as it may be issued beyond 640s from its last write.
In this section, ReadDuo-Hybrid addresses the issue with
a simple enhancement that adopts W=0 instead of W=1.
We leave more advanced designs to the following sections.
With setting (BCH=8,S=640s,W=0), ReadDuo-Hybrid re-
writes each memory line at its scrub time, no matter if an
error was found. In this way, R-sensing is always within 640s
after a line write, which ensures the reliability in ReadDuo-
Hybrid.
Read modes. Figure 4 compares ReadDuo-Hybrid to the
two schemes that adopt R-metric sensing and and M-metric
sensing individually. To simplify discussion, we differentiate
the following three types of read operations.
‚Ä¢ R-read. The R-metric based sensing Ô¨Ånishes in 150ns.
Scrubbing the memory using (BCH=8,S=8,W=1) may
roughly ensure all read operations being safely serviced
with R-read.
‚Ä¢ M-read. The M-metric based sensing Ô¨Ånishes in 450ns.
Scrubbing the memory using (BCH=8,S=640,W=1) can
ensure all read operations being safely serviced with
M-read.
‚Ä¢ R-M-read. ReadDuo-Hybrid, when encountering 9 to
17 drift errors in R-sensing step, needs to conduct M-
sensing and thus Ô¨Ånishes in 600ns (=150ns+450ns).
This is referred to as R-M-read.
VFUXEELQJ
5UHDG
0UHDG
50UHDG
5D
5D
5D
D5PHWULF
VHQVLQJ
E0PHWULF
VHQVLQJ
F5HDG'XR
+\EULG
5E
5E
VHFRQGV
VHFRQGV
5E
VHFRQGV
5F
5F
5F
Figure 4: Hybrid sensing speeds up read operations.
As shown in Figure 4(a) that adopts R-metric only sens-
ing, read requests are all serviced by fast R-read operations.
An individual request, e.g., Rb, could be delayed by frequent
scrubbing operations. In Figure 4(b) that adopts M-metric
only sensing, scrubbing is much less frequent and the bank
is also less busy. However, read requests are serviced by
slow M-read operations. In Figure 4(c) that adopts hybrid
sensing, a read request can be serviced by either R-read or
R-M-read. Due to low error rate under BCH-8 protection,
most read requests are serviced by R-read.
C. ReadDuo-LWT: Tracking Last Write in Hybrid Sensing
ReadDuo-Hybrid chooses W=0 in M-metric scrubbing to
ensure read reliability. Comparing to a scheme that chooses
W=1, ReadDuo-Hybrid introduces large overhead as it re-
writes each memory lines in every 640s; the W=1 scheme
re-writes a line only if there are errors. Given the low error
rate in M-sensing, the W=1 scheme generates negligible re-
write operations in each 640s scrubbing interval.
To reduce the number of write operations in ReadDuo-
Hybrid, we propose a different optimization over the W=1
baseline. The scheme, referred to as ReadDuo-LWT, tracks
the last write to each memory line and switches to conduct
M-sensing if a read occurs beyond 640s from its last write.
Tracking the last write. To track the last write, a
ReadDuo-LWT-k scheme partitions one scrubbing interval
into k sub-intervals and attaches two Ô¨Çags (with k bits and
log2k bits, respectively) to each memory line.
‚Ä¢ We label the sub-intervals from 0 to k-1, as shown in
Figure 5. One memory line keeps a k-bit vector-Ô¨Çag to
indicate if the memory line was written in the preceding
sub-intervals ‚Äî bit-x=1 indicates there was a write in
the current or closest sub-interval labeled with x. It
also saves a log2k-bit index-Ô¨Çag ind to indicate the
sub-interval in which the last write occurs.
In the example shown in Figure 5, write W1 sets bit
2 of the vector-Ô¨Çag and modiÔ¨Åes the index-Ô¨Çag to 2
because it locates in sub-interval#2.
‚Ä¢ When scrubbing a memory line, we Ô¨Årst clear the
vector-Ô¨Çag bits before the last write, i.e., all bits in
the range of [0, ind-1]. If ind=0, then all bits in the
vector-Ô¨Çag are cleared. We then set bit 0 of the vector
Ô¨Çag to 1 if the scrub operation re-writes the line, and
to 0 otherwise.
In the example shown in Figure 5, scrub1 clears bit 1
and bit 0 in the vector-Ô¨Çag while scrub3 clear all bits.
‚Ä¢ When there is a write operation, we identify the sub-
interval s that the write belongs to, and the current
index Ô¨Çag ind. If s >1, we clear the vector Ô¨Çag bits
that correspond to sub-interval range [ind+1,s). We set
the vector Ô¨Çag bit for sub-interval s.
6XE
LQWHUYDO
7LPH











9HFWRU
IODJ
,QGH[
IODJ

   
 
   
   
 
 
   
 
:
VFUXE
:
:
VFUXE
   
 
5
,VODVWZULWHZLWKLQV"
VFUXE
   
 
Figure 5: The partition of scrub interval for one memory
line. (The three scrub operations are all for this memory
line; none actually re-writes the line. The shaded Ô¨Çag bits
are changed bits at each step).
208
5HVLVWDQFHERXQGDULHV
5HVLVWDQFHERXQGDULHV
5HVLVWDQFHERXQGDULHV
5HVLVWDQFHERXQGDULHV
Q
R
L
W
X
E
L
U
W
V
L
'


O
O
H
&
VWDWH
5HZULWH$OO
Q
R
L
W
X
E
L
U
W
V
L
'


O
O
H
&
VWDWH
Q
R
L
W
X
E
L
U
W
V
L
'


O
O
H
&
VWDWH
5HZULWH(UURUV
Q
R
L
W
X
E
L
U
W
V
L
'


O
O
H
&
VWDWH
5HVLVWDQFHGULIWHUURUV
5HVLVWDQFH
5HVLVWDQFH
5HVLVWDQFHGULIWHUURUV
5HVLVWDQFH
5HVLVWDQFH
,QLWLDOUHVLVWDQFHGLVWULEXWLRQDWWLPHW
5HVLVWDQFHGULIWDWWLPHW
,QLWLDOUHVLVWDQFHGLVWULEXWLRQDWWLPHW
5HVLVWDQFHGULIWDWWLPHW
5HVLVWDQFHGLVWULEXWLRQDIWHUVFUXEELQJ
5HVLVWDQFHGLVWULEXWLRQDIWHUVFUXEELQJ
(a) Fully Scrub
(b) Lightweight in-line Scrub
Figure 6: Reliable scrubbing needs to rewrite all cells.
Intuitively, the vector-Ô¨Çag is a sliding window that tracks
and retires writes in sub-intervals. The index-Ô¨Çag records
sub-interval of the last write or the starting of a new scrub-
bing interval. The location of the last write is determined by
both of them, as discussed in the following.
Enhanced readout control. To service a read operation,
ReadDuo-LWT reads data/ECC bits using R-sensing and
simultaneously reads the Ô¨Çag bits. The Ô¨Çag bits are stored as
single-level cell (SLC) and thus do not suffer from resistance
drift [2]. ReadDuo-LWT also identiÔ¨Åes the sub-interval s in
which the read belongs to.
There are three cases ‚Äî (i) If both vector-Ô¨Çag and index-
Ô¨Çag are non-zero, indicating there is a write within 640s,
ReadDuo-LWT can continue R-sensing as it is reliable. (ii)
If the vector-Ô¨Çag is zero, indicating there is no write in the
past 640s, ReadDuo-LWT terminates R-sensing and switches
to M-sensing. (iii) Otherwise, i.e., the vector-Ô¨Çag is non-zero
while the index-Ô¨Çag is zero. ReadDuo-LWT Ô¨Årst discards the
vector-Ô¨Çag bits in [1,s] as these bits indicate writes beyond
640s. If the vector Ô¨Çag is still non-zero, ReadDuo-LWT
continues R-sensing. Otherwise, ReadDuo-LWT switches to
M-sensing.
In Figure 5, read R1 locates in sub-interval 2. The vector-
Ô¨Çag, while being non-zero initially, becomes zero after
discarding bit 1 and bit 2 (i.e., in range [1, s]). We therefore
switch to M-sensing to reliably read the memory line.
R-M-Read conversion. By tracking last writes to mem-
ory lines, ReadDuo-LWT can choose (BCH=8,S=640,W=1)
for M-metric scrubbing without impacting reliability. This
greatly reduces memory re-write operations. However, when
many read operations are beyond 640s of their last write
operations, the memory performance can become worse than
the scheme that only adopts M-sensing ‚Äî R-M-read is
slower than M-read because the latter does not need to
test Ô¨Çag bits. This could become a big concern if, as an
example, an in-memory database application Ô¨Årst creates the
database and then performs read-intensive query operations.
In this case, the read operations need to access data that
were written to memory a long time ago.
To mitigate this concern, we propose to conduct redundant
write operation after R-M-read. That is, After servicing a
read request with R-M-read, ReadDuo-LWT re-writes the
same data back to the MLC PCM. ReadDuo-LWT then
tracks this write and enables fast R-sensing in the next 640s
interval.
However, blindly converting all R-M-read operations
could greatly degrade chip lifetime due to additional writes
introduced to PCM chips. For this reason, we dynamically
monitor P % ‚Äî the percentage of reads falling to un-tracked
memory lines. We convert T % of R-M-read and adjust T
between [0,100] at step 10. We increase T if an increment
gives 2 times percentage increase on P and decrease, and
decrease T if P is greater than 85%. Otherwise, we keep
the same T .
D. ReadDuo-Select: Selectively Rewriting MLC Cells
Reducing the number of cell writes is an effective ap-
proach to address the well-known write endurance problem
in PCM. For example, based on the observation that a write
operation typically changes around 20% data bits to its
memory line, differential write only writes modiÔ¨Åed bits
to PCM cells, which greatly improve PCM chip lifetime
[35]. Unfortunately, due to resistance drift, the MLC write
operations, including both writes from processors and writes
from scrubbing, need full-line write i.e., writing all cells in
the line.
Figure 6 elaborates the details. To simplify the discussion,
we assume all cells were programmed to state ‚Äò01‚Äô, with
their resistances forming a normal distribution within the
resistance range of state ‚Äò01‚Äô. Figure 6a shows that, due
to resistance drift, a small number of cells drift across the
state boundary between state ‚Äò01‚Äô and state ‚Äò00‚Äô, leading
to drift errors. If we only write the modiÔ¨Åed cell or the
drifted cells, as shown in Figure 6b, the resistances of the
cells in this MLC line do not follow normal distribution. A
large number of cells are now close to the boundary such
that, in the next scrubbing interval, this line may accumulate
209
more drift errors than what its ECC can handle. Therefore,
writing a memory line needs to write all cells such that their
resistances still follow normal distribution.
Full-line write not only wastes write energy but also
degrade MLC chip lifetime. We therefore propose ReadDuo-
Select, a selective differential write (SDW) design that
safely reduces cell writes in MLC PCM. A ReadDuo-Select-
(k:s) scheme enhances the last-write tracking policy used in
ReadDuo-LWT-k as follows.
‚Ä¢ Intuitively, a ReadDuo-Select-(k:s) scheme performs
only one full-line write in s consecutive sub-intervals.
The index-Ô¨Çag indicates the sub-interval in which the
last full-line write was performed.
‚Ä¢ When performing a write operation to a memory line,
we determine the sub-interval that the write operation
belongs to, and the last full-line write (saved in the
index-Ô¨Çag). If they are within s sub-intervals, we only
write modiÔ¨Åed cells. Otherwise, a full-line write is
performed.
When we convert a read operation to a write operation
in ReadDuo-LWT, we need to write all cells as this
write is the only write in the past s sub-intervals.
‚Ä¢ When performing a differential write in MLC PCM,
ReadDuo-Select does not update the index-Ô¨Çag. As
such, when determining if a read can perform R-
sensing, ReadDuo-Select conservatively measures the
distance to the last full-line write, which ensure its read
reliability.
When s=1, SDW performs a full-line write only for
the Ô¨Årst write operation in each sub-interval and converts