title:VPS: excavating high-level C++ constructs from low-level binaries
to protect dynamic dispatching
author:Andre Pawlowski and
Victor van der Veen and
Dennis Andriesse and
Erik van der Kouwe and
Thorsten Holz and
Cristiano Giuffrida and
Herbert Bos
VPS: Excavating High-Level C++ Constructs from
Low-Level Binaries to Protect Dynamic Dispatching
Andre Pawlowski
Dennis Andriesse
PI:EMAIL
PI:EMAIL
Ruhr-Universität Bochum
Erik van der Kouwe
Vrije Universiteit Amsterdam
Victor van der Veen
Thorsten Holz
PI:EMAIL
Vrije Universiteit Amsterdam
Cristiano Giuffrida
PI:EMAIL
Vrije Universiteit Amsterdam
PI:EMAIL
Leiden University
PI:EMAIL
Ruhr-Universität Bochum
Herbert Bos
PI:EMAIL
Vrije Universiteit Amsterdam
ABSTRACT
Polymorphism and inheritance make C++ suitable for writing com-
plex software, but significantly increase the attack surface because
the implementation relies on virtual function tables (vtables). These
vtables contain function pointers that attackers can potentially hi-
jack and in practice, vtable hijacking is one of the most important
attack vector for C++ binaries.
In this paper, we present VTable Pointer Separation (vps), a practi-
cal binary-level defense against vtable hijacking in C++ applications.
Unlike previous binary-level defenses, which rely on unsound static
analyses to match classes to virtual callsites, vps achieves a more
accurate protection by restricting virtual callsites to validly cre-
ated objects. More specifically, vps ensures that virtual callsites
can only use objects created at valid object construction sites, and
only if those objects can reach the callsite. Moreover, vps explicitly
prevents false positives (falsely identified virtual callsites) from
breaking the binary, an issue existing work does not handle cor-
rectly or at all. We evaluate the prototype implementation of vps
on a diverse set of complex, real-world applications (MongoDB,
MySQL server, Node.js, SPEC CPU2017/CPU2006), showing that
our approach protects on average 97.8% of all virtual callsites in
SPEC CPU2006 and 97.4% in SPEC CPU2017 (all C++ benchmarks),
with a moderate performance overhead of 11% and 9% geomean,
respectively. Furthermore, our evaluation reveals 86 false negatives
in VTV, a popular source-based defense which is part of GCC.
CCS CONCEPTS
• Security and privacy → Software reverse engineering.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359797
KEYWORDS
CFI, Binary Analysis
ACM Reference Format:
Andre Pawlowski, Victor van der Veen, Dennis Andriesse, Erik van der
Kouwe, Thorsten Holz, Cristiano Giuffrida, and Herbert Bos. 2019. VPS:
Excavating High-Level C++ Constructs from Low-Level Binaries to Protect
Dynamic Dispatching. In 2019 Annual Computer Security Applications Con-
ference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA. ACM, New
York, NY, USA, 16 pages. https://doi.org/10.1145/3359789.3359797
1 INTRODUCTION
Software implemented in the C++ language is vulnerable to increas-
ingly sophisticated memory corruption attacks [8, 9, 19, 38, 44, 46].
C++ is often the language of choice for complex software because
it allows developers to structure software by encapsulating data
and functionality in classes, simplifying the development process.
Unfortunately, the binary-level implementations of C++ features
such as polymorphism and inheritance are vulnerable to control-
flow hijacking attacks, most notably vtable hijacking. This attack
technique abuses common binary-level implementations of C++
virtual methods where every object with virtual methods contains
a pointer to a virtual function table (vtable) that stores the addresses
of all the class’s virtual functions. To call a virtual function, the com-
piler inserts an indirect call through the corresponding vtable entry
(a virtual callsite). Using temporal or spatial memory corruption vul-
nerabilities such as arbitrary write primitives or use-after-free bugs,
attackers can overwrite the vtable pointer so that subsequent vir-
tual calls use addresses in an attacker-controlled alternative vtable,
thereby hijacking the control flow. In practice, vtable hijacking
is a common exploitation technique widely used in exploits that
target complex applications written in C++ such as web browser
and server applications [42].
Control-Flow Integrity (CFI) solutions [2, 5, 30, 34, 43, 45, 47]
protect indirect calls by verifying that control flow is consistent
with a Control-Flow Graph (CFG) derived through static analysis.
However, most generic CFI solutions do not take C++ semantics
into account and leave the attacker with enough wiggle room to
build an exploit [19, 38]. Consequently, approaches that specifically
protect virtual callsites in C++ programs have become popular. If
source code is available, compiler-level defenses can benefit from
97the rich class hierarchy information available at the source level [6,
7, 43, 49]. However, various legacy applications are still in use [31]
or proprietary binaries have to be protected which do not offer
access to the source code (e.g., Adobe Flash [3]). Here, binary-level
defenses [14, 17, 33, 35, 48] must rely on (automated) binary analysis
techniques to reconstruct the information needed to guarantee
security and correctness.
In this paper, we present VTable Pointer Separation (vps), a binary-
level defense against vtable hijacking attacks. Unlike previous
binary-only approaches that restrict the set of vtables permitted
for each virtual callsite, we check that the vtable pointer remains
unmodified after object creation. Intuitively, vps checks the vtable
pointer’s integrity at every callsite. Because the vtable pointer in a
legitimate live object never changes and the virtual callsite uses it to
determine its target function, vps effectively prevents vtable hijack-
ing attacks. In essence, we want to bring a defense as powerful as
CFIXX [7] (which operates at the source level) to binary-only appli-
cations, even though none of the information needed for the defense
is available. Our approach is suitable for binaries because, unlike
other binary-level solutions, we avoid the inherent inaccuracy in
binary-level CFG and class hierarchy reconstruction. Because vps
allows only the initial virtual pointer(s) of the object to ever ex-
ist, we reduce the attack surface even compared to hypothetical
implementations of prior approaches that statically find the set of
possible vcall targets with perfect accuracy.
Given that binary-level static analysis is challenging and un-
sound in practice, and may lead to false positives in identifying
virtual callsites, we carefully deal with such cases by over-approxi-
mating the set of callsites and implementing an (efficient) slow
path to handle possible false positives at runtime. Meanwhile, vps
handles all previously verified callsite with highly-optimized fast
checks. This approach allows us to prevent false positives from
breaking the application as they do in existing work [14, 17, 35, 48].
Additionally, while existing work [24–26, 33] only considers directly
referenced vtables, compilers also generate code that references
vtables indirectly, e.g., through the Global Offset Table (GOT). vps
can find all code locations that instantiate objects by writing the
vtable, including objects with indirect vtable references.
Our prototype of vps is precise enough to handle complex, real-
world C++ applications such as MongoDB, MySQL server, Node.js,
and all C++ applications contained in the SPEC CPU2006 and
CPU2017 benchmarks. Compared to the source code based approach
VTV, which is part of GCC [43], we can on average correctly iden-
tify 97.8% and 97.4% of the virtual callsites in SPEC CPU2006 and
SPEC CPU2017, with a precision of 95.6% and 91.1%, respectively.
Interestingly, our evaluation also revealed 86 virtual callsites that
are not protected by VTV, even though it has access to the source
code. A further investigation with the help of the VTV maintainer
showed that this is due to a conceptual problem in VTV which
requires non-trivial engineering to fix. Compared to the source
code based approach CFIXX, vps shows an accuracy of 99.6% and
99.5% on average for SPEC CPU2006 and CPU2017 with a precision
of 97.0% and 96.9%. These comparisons show that vps’s binary-level
protection of virtual callsites closely approaches that of source-level
solutions. While this still leaves a small attack window, it further
closes the gap between binary-only and source-level approaches
making vtable hijacking attempts mostly impractical.
Compared to state-of-the-art binary-level analysis frameworks
like Marx [33], our analysis identifies 26.5% more virtual callsites
in SPEC CPU2017 and thus offers improved protection. vps induces
geomean performance overhead of 9% for all C++ applications in
SPEC CPU2017 and 11% for SPEC CPU2006, which is slightly more
than Marx induces but with significantly better protection.
Contributions. We provide the following contributions:
• We present vps, a binary-only defense against vtable hijack-
ing attacks that sidesteps the imprecision problems of prior
work on this topic. The key insight is that vtable pointers
only change during initialization and destruction of an ob-
ject (never in between), a property that vps can efficiently
enforce.
• We develop an instrumentation approach that is capable of
handling false positives in the identification of C++ virtual
callsites which would otherwise break the application and
which most existing work ignores. Unlike prior work, we
also handle indirect vtable references.
• Our evaluation shows that our binary-level instrumenta-
tion protects nearly the same number of virtual callsites as
the source-level defenses VTV and CFIXX. In addition, our
evaluation uncovered a conceptual problem causing false
negatives in VTV (part of GCC).
The prototype implementation of vps and the data we used
for the evaluation are available under an open-source license at
https://github.com/RUB-SysSec/VPS.
2 C++ AT THE BINARY LEVEL
This section provides background on C++ internals needed to un-
derstand how vps handles C++ binaries. We focus on how high-level
C++ constructs translate to the binary level. For a more detailed
overview of high-level C++ concepts, we refer to the corresponding
literature [41].
2.1 Virtual Function Tables
C++ supports the paradigm of object-oriented programming (OOP)
with polymorphism and (multiple) inheritance. A class can inherit
functions and fields from another class. The class that inherits
is called the derived class and the class from which it inherits is
the base class. In addition to single inheritance (one class inherits
from one other class), C++ also allows multiple inheritance, where
a derived class has multiple base classes. A base class can declare
a function as virtual, which allows derived classes to override it
with their own implementations. Programmers may choose not to
implement some functions in a base class, so called pure virtual
functions. Classes containing such functions are abstract classes
and cannot be instantiated. Classes deriving from an abstract base
can only be instantiated if they override all pure virtual functions.
Polymorphism is implemented at the binary level using virtual
function tables (vtables) that consist of the addresses of all virtual
functions of a particular class. Each class containing at least one vir-
tual function has a vtable. Instantiated classes (called objects) hold
a pointer to their corresponding vtable, which is typically stored
in read-only memory. Since each class has its own corresponding
98vtable, it can also be considered as the type of the object. Through-
out this paper, we refer to the pointer to a vtable as a vtblptr, while
the pointer to the object is called thisptr.
reliable static analysis cannot rely on this information. Classes that
do not contain RTTI have the RTTI field set to zero. Offset-to-Top
is needed when a class uses multiple inheritance (hence has a base
vtable and one or more sub-vtables) as class C does. Offset-to-Top
specifies the distance between a sub-vtable’s own vtblptr and the
base vtblptr at the beginning of the object. In our example, the
vtblptr to class C’s sub-vtable resides at offset 0x10 in the object,
while the vtblptr to the base vtable resides at offset 0x0. Hence, the
distance between the two, as stored in the Offset-to-Top field in
sub-vtable C, is -0x10. Offset-to-Top is 0 if the vtable is the base
vtable of the class or no multiple inheritance is used.
Vtables can contain one additional field, called Virtual-Base-
Offset, but it is only used in case of virtual inheritance, an advanced
C++ feature for classes that inherit from the same base multiple
times (diamond-shaped inheritance). An explanation is out of scope
here because vps needs no adaptations to support virtual inheri-
tance, so we defer to the ABI [16].
2.2 C++ Object Initialization and Destruction
Because vps secures virtual callsites by protecting the vtblptr set at
initialization time, we explain object initialization of classes with
vtables. For the remainder of this paper, we only consider classes
and objects that have at least one virtual function and therefore a
vtable.
During object instantiation, the vtblptr is written into the object
by the constructor. The lower part of Figure 1 depicts an object’s
memory layout at the binary level. The vtblptr is at offset 0x0, the
start of the object. For classes with multiple inheritance, the con-
structor also initializes vtblptrs to the sub-vtable(s). In addition, the
programmer may initialize class-specific fields in the constructor.
These fields are located after the vtblptr and, in case of multiple
inheritance, after any sub-vtblptrs.
For classes that have one or more base classes, the constructors
of the base classes are called before the derived class’s own initial-
ization code. As a result, the base class places its vtblptr into the
object, which is subsequently overwritten by the derived class’s
vtblptr. Depending on the optimization level, constructors are often
inlined, which may complicate binary analysis that aims to detect
constructors.
An analogous principle is applied for object destruction through
destructor functions. However, the destructors are executed in re-
versed order (destructor of the base class is executed last).
Abstract classes form a special case: although programmers can-
not instantiate abstract classes, and despite the fact that their vtables
contain pure_virtual function entries, the compiler can still emit
code that writes the vtblptr to an abstract class into an object. How-
ever, this happens only when creating or releasing an object of a
derived class, and the abstract vtblptr is immediately overwritten.
2.3 C++ Virtual Function Dispatch
Because classes can override virtual functions, the compiler cannot
determine the target of a call to such a function at compile time.
Therefore, the emitted binary code uses an indirect function call
through the vtable of the object. This is called a virtual function
call, or vcall for short. In the Itanium C++ ABI [16], the compiler
Figure 1: Example C++ class structure. The code at the top
shows base classes A and B; derived class C which overrides
virtual functions funcA1 and funcB2. The bottom shows the
binary-level structure of objects of classes B and C.
The Itanium C++ ABI [16] defines the vtable layout for Linux
systems.1 The vtblptr points to the first function entry in the vtable,
and the vtable contains an entry for each virtual function (either
inherited or newly declared) in the class. For example, in Figure 1,
class B’s vtable contains two function entries because the class im-
plements virtual functions funcB1 and funcB2. Class C inherits from
two classes, A and B, and therefore has two vtables (a base vtable
and one sub-vtable). The base vtable contains all virtual functions
inherited from class A and implemented by class C. The sub-vtable
is a copy of class B’s vtable with a special entry that refers to the
overwritten virtual function (called a thunk). Preceding the function
entries, a vtable has two metadata fields: Runtime Type Identification
(RTTI) and Offset-to-Top. RTTI holds a pointer to type information
about the class. Among other things, this type information con-
tains the name of the class and its base classes. However, RTTI is
optional and often omitted by the compiler. It is only needed when
the programmer uses, e.g., dynamic_cast or type_info. Hence, a
1Linux uses the Itanium C++ ABI for x86-64 (amd64), our target architecture.
class C : public A, public B { public:     int varC;     virtual void funcA1();     virtual void funcB2();     virtual void funcC(); }; class A { public:     int varA;     virtual void funcA1();     virtual void funcA2(); }; 0x00: vtblptrC10x08: varAObject C0x10: vtblptrC20x18: varB0x20: varC­0x10: 0­0x08: &RTTI_CVtable C 0x00: &C::funcA1 0x10: &C::funcB2 0x18: &C::funcC­0x10: ­0x10Sub­Vtable C­0x08: &RTTI_C 0x08: &thunk to       C::funcB2 0x00: &B::funcB1thisptrHigh­LevelBinary Level 0x08: &A::funcA2class B { public:     int varB;     virtual void funcB1();     virtual void funcB2(); }; Offset­to­TopRTTIFunction­Entry1Function­Entry2Function­Entry3Function­Entry4Offset­to­TopRTTIFunction­Entry1Function­Entry20x00: vtblptrB0x08: varBObject B­0x10: 0­0x08: &RTTI_BVtable B 0x00: &B::funcB1thisptr 0x08: &B::funcB2Offset­to­TopRTTIFunction­Entry1Function­Entry299Table 1: C++ binary-only mitigation mechanisms
Defense
Marx (VTable) [33]
Marx (Type-safe) [33]
vfGuard [35]
T-VIP [17]
VTint [48]
VCI [14]
VTPin [37]
VPS
Binary-only Protects
vcalls
Protects
type
Protects
dangl. ptrs
Tolerates
FP vcalls
Security Strategy
✓
✓
✓
✓
✓
✓
needs RTTI
✓
✓
✗
✓
✓
✓
✓
✗
✓
✗
✗
✗
✗
✗
✗
✗
✓
✓