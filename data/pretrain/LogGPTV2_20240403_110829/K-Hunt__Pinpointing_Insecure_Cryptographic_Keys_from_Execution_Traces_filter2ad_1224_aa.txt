title:K-Hunt: Pinpointing Insecure Cryptographic Keys from Execution Traces
author:Juanru Li and
Zhiqiang Lin and
Juan Caballero and
Yuanyuan Zhang and
Dawu Gu
K-Hunt: Pinpointing Insecure Cryptographic Keys from
Execution Traces
Juanru Li
Shanghai Jiao Tong University
Shanghai, China
PI:EMAIL
Zhiqiang Lin
The Ohio State University
Columbus, Ohio, USA
PI:EMAIL
Juan Caballero
IMDEA Software Institute
Madrid, Spain
PI:EMAIL
Yuanyuan Zhang
Shanghai Jiao Tong University
Shanghai, China
PI:EMAIL
Dawu Gu
Shanghai Jiao Tong University
Shanghai, China
PI:EMAIL
ABSTRACT
The only secrets in modern cryptography (crypto for short) are
the crypto keys. Understanding how crypto keys are used in a
program and discovering insecure keys is paramount for crypto
security. This paper presents K-Hunt, a system for identifying in-
secure keys in binary executables. K-Hunt leverages the properties
of crypto operations for identifying the memory buffers where
crypto keys are stored. And, it tracks their origin and propagation
to identify insecure keys such as deterministically generated keys,
insecurely negotiated keys, and recoverable keys. K-Hunt does not
use signatures to identify crypto operations, and thus can be used
to identify insecure keys in unknown crypto algorithms and propri-
etary crypto implementations. We have implemented K-Hunt and
evaluated it with 10 cryptographic libraries and 15 applications that
contain crypto operations. Our evaluation results demonstrate that
K-Hunt locates the keys in symmetric ciphers, asymmetric ciphers,
stream ciphers, and digital signatures, regardless if those algorithms
are standard or proprietary. More importantly, K-Hunt discovers
insecure keys in 22 out of 25 evaluated programs including well-
developed crypto libraries such as Libsodium, Nettle, TomCrypt, and
WolfSSL.
CCS CONCEPTS
• Security and privacy → Software reverse engineering; Crypt-
analysis and other attacks;
KEYWORDS
Dynamic binary code analysis, cryptographic key identification
ACM Reference Format:
Juanru Li, Zhiqiang Lin, Juan Caballero, Yuanyuan Zhang, and Dawu Gu.
2018. K-Hunt: Pinpointing Insecure Cryptographic Keys from Execution
Traces. In 2018 ACM SIGSAC Conference on Computer and Communications
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243783
Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3243734.3243783
1 INTRODUCTION
Many applications today contain cryptographic operations. With-
out them, basic security mechanisms such as secure communication
and authentication can hardly be achieved. In modern cryptography
(crypto for short), there is no need to hide the crypto algorithms, i.e.,
their constructions are open. The only secret in modern crypto are
the crypto keys. The security of a crypto key depends on the size of
the key, the process that generates the key, and how the key is used.
Unfortunately, developers often make mistakes in key generation,
derivation, and sanitization that may result in keys being guessed
or leaked.
Over the past few years, we have witnessed numerous cases of in-
secure crypto keys in software implementations. For instance, some
keys are generated without sufficient randomness (e.g., the not-so-
randomly-generated numbers in virtualized environments [41]),
some keys can be easily leaked (e.g., due to software vulnerabili-
ties such as Heartbleed [38]), some keys can be forged (e.g., using
unauthenticated encryption [37]), and some developers may just
simply misuse the keys (e.g., using a constant symmetric key that
is never changed [39] or the same initialization vector to encrypt
different versions of a document [67]). As such, there is a strong
need to systematically inspect crypto implementations to identify
insecure keys.
Unfortunately, crypto software is difficult to analyze for a num-
ber of reasons. First, there is a large body of crypto algorithms
(e.g., symmetric ciphers, asymmetric ciphers, stream ciphers, dig-
ital signatures) that developers can use. Second, crypto software
is complex, e.g., it may contain multiple crypto algorithms such
as using an asymmetric cipher to exchange a symmetric key as
in TLS. Third, crypto software is often proprietary, and thus only
executables are available.
There exist prior works that use binary code analysis to analyze
crypto software. For example, ReFormat [66] and Dispatcher [32]
detect crypto operations based on the execution statistics of bitwise
and arithmetic instructions. Gröbert et al. [43] propose to identify
specific crypto primitives (e.g., RC4, AES) and their parameters (e.g.,
plaintext or crypto keys) using crypto function signatures and
heuristics. Most recently, CryptoHunt [68] proposes a technique
called bit-precise symbolic loop mapping to identify commonly
used crypto functions (e.g., AES, RSA). However, none of these prior
works detects insecure crypto keys.
In this paper, we present K-Hunt, a tool to identify insecure cryp-
tographic keys in an executable, without source code or debugging
symbols. K-Hunt does not use signatures to identify crypto algo-
rithms. Instead, it directly identifies crypto keys and analyzes them
to detect insecure keys. In a nutshell, K-Hunt identifies insecure
crypto keys by analyzing how keys are generated, propagated, and
used. It utilizes the runtime information to locate the code blocks
that operate on the crypto keys and then pinpoint the memory
buffers storing the keys. Meanwhile, it also tracks the origin and
propagation of keys during program execution.
We have implemented K-Hunt atop dynamic binary instrumen-
tation and applied it to analyze the x86/64 binaries of 10 crypto-
graphic libraries and 15 applications that contain crypto operations.
K-Hunt identifies 25 insecure crypto keys including deterministi-
cally generated keys, insecurely negotiated keys, and recoverable
keys. Our results show that insecure crypto keys are a common
problem, as the 25 insecure keys K-Hunt identifies are spread
across 22 programs. Only three of the 25 programs evaluated do not
contain insecure keys. Surprisingly, K-Hunt found insecure keys
in some well-established crypto libraries such as Libsodium, Nettle,
TomCrypt, and WolfSSL. We have made responsible disclosure to the
vulnerable software vendors, and patches are under development.
In short, we make the following contributions:
• We propose a novel binary analysis approach to identify insecure
crypto keys in program executables such as deterministically
generated keys, insecurely negotiated keys, and recoverable
keys. Our approach does not rely on signatures and can be
applied to proprietary and standard algorithms.
• We have designed and implemented K-Hunt, a scalable tool
that implements our approach. K-Hunt implements various
techniques to significantly optimize the performance of the
binary code analysis.
• The evaluation results on real world software show that K-Hunt
can analyze real world crypto libraries and COTS binaries to
identify insecure keys used by symmetric ciphers, asymmetric
ciphers, stream ciphers, and digital signatures.
2 BACKGROUND
Since crypto algorithms today are quite standard, developers are
mostly concerned about their implementation correctness and run-
time robustness. In contrast, the secure use of crypto keys has
attracted less attention. This is a problem because in many popular
crypto libraries the responsibility of key management is left to the
developers, who may not be crypto experts. Therefore, we have
witnessed numerous mistakes regarding insecure crypto keys. We
summarize below three common mistakes that lead to insecure
crypto keys, and that can be detected using K-Hunt.
Deterministically Generated Keys (DGK). NIST has pointed
out that “all keys shall be based directly or indirectly on the output of
an approved Random Bit Generator (RBG)” [31]. However a common
mistake is deterministic key generation, i.e., deriving key material
from data sources without enough entropy. A hard-coded key in
the program is a case of deterministic key generation. Another
case is when the key generation process does not provide strong
randomness, which enables brute-force attacks against such keys.
Insecurely Negotiated Keys (INK). A key agreement protocol
(or key exchange protocol) defines the series of steps needed to
establish a crypto key for secure communication among two or
more parties. Such protocols allow the participants to securely es-
tablish shared keys over an insecure medium, without the need of a
previously-established shared secret. An important requirement for
a key agreement protocol is that two or more parties should agree
on a key in a way that they all should influence the outcome of the
key. This precludes any undesired third parties from influencing the
key choice and is essential to implement perfect forward secrecy.
An insecurely negotiated key happens when the key agreement
protocol allows a single peer to generate the shared secret without
involving the other peers. In particular, many proprietary key agree-
ment protocols directly designate one party to generate the key
and then send that key to other parties. In these cases a malicious
peer can surreptitiously weaken the protocol’s security [30].
Recoverable Keys (RK). Keeping crypto keys unnecessarily long
in memory is a vulnerability due to lack of key sanitization. It cre-
ates an attack window for attackers to recover the key that can be
exploited through code injection or side channel attacks [46, 48].
One root cause of missing crypto key sanitization is that key buffers
are usually allocated on the stack or the heap managed by the oper-
ating system (OS). However, the OS seldom sanitizes such memory
regions. For instance, if a key buffer is allocated on the heap and is
freed after the crypto operation, popular OSes such as Windows and
Linux will not immediately wipe it. Instead, the buffer is only labeled
as “unused” and will be wiped only when re-allocated. Furthermore,
in popular crypto libraries the key sanitization responsability is left
to the applications, whose developers may not be crypto experts.
3 OVERVIEW
We use a simple but representative program, illustrated in Figure 1,
to demonstrate how our insecure crypto key detection works. This
simple program encrypts Data through masking a Key generated
by the keygen function. The program captures a crypto operation
(a simple cipher that mixes Key and Data) and a crypto key man-
agement (a home-made key derivation that generates a random
key). It has an insecure crypto key because 1) the key only contains
four bytes of randomness and 2) the key is not sanitized after the
encryption.
To detect the insecure crypto key in this running example, a
security analyst would need to (1) find which code blocks are crypto
related; (2) identify the crypto key used by those blocks; (3) check
how the identified crypto key is generated, i.e., which data sources
affect it and how it is derived from those key materials; and (4)
monitor key propagation (i.e., the memory buffers that store the
key) to check whether it is still available after the crypto operation.
K-Hunt is designed to automate these steps with a principled
approach.
Challenges. To detect insecure keys using the above steps, our
approach needs to address the following challenges:
Thus, our approach must identify which buffer is the crypto key
buffer.
• How to detect insecure crypto keys in complex programs.
Having identified the buffer holding a key, we still need to deter-
mine if the key is correctly derived and managed. Unfortunately,
programs that contain crypto algorithms are often complex and
these algorithms usually only occupy a very small percentage of
the entire program. It is infeasible and ineffective to analyze the
whole program executable. Thus, we have to design an efficient
way for detecting insecure crypto keys.
Insights. Fortunately, all of the challenges listed above can be
solved with the following key insights:
• Identifying crypto operations independent of their im-
plementation. Oftentimes, crypto operations are identified by
scanning the implementation with signatures of well-known
crypto algorithms. However, such approach cannot detect propi-
etary algorithms. Instead, our approach identifies the crypto
basic blocks at the core of the crypto operation. For this, it uses a
dynamic analysis technique that leverages the insight that these
core basic blocks usually mingle crypto keys and data, and thus
have distinct properties. For instance, as shown in Figure 1a,
the key masking operation (at line 16) reads from two data
buffers and produces the ciphertext. Such crypto basic blocks
have distinguishable properties such as high use of arithmetic
instructions, producing data streams with high randomness, and
having execution length proportional to the input size. If a basic
block meets these three constraints, it is very likely that it is a
crypto basic block.
• Locating the crypto keys. Once the core crypto basic blocks
are identified, our approach then examines the data accessed by
those blocks. Typically, a crypto basic block will process two
inputs. For encryption, the plaintext and the key. For decryption,
the ciphertext and the key. And, for digital signatures, the input
message and the key. Note that while the verify function of a
digital signature takes three inputs (message, key, signature),
only the message and the key are used in the crypto operations.
Therefore, in all three cases we need to separate the crypto key
from the other input. Interestingly, we notice that the size of the
crypto key is usually very small (e.g., 128-bit) compared to the
plaintext, ciphertext, or message, which could be of arbitrary
length. We also observe that the crypto key and the other in-
put are usually stored at different memory buffers. And, those
buffers are usually filled with content derived from different
data sources, e.g., a pseudo-random generator for keys and the
network or the filesystem for the plaintext/ciphertext/message.
• Detecting the insecure crypto keys. Since it is very complex
to analyze the entire program to understand the handling of
crypto keys, we instead propose a key-centric strategy. Having
identified the crypto operations and located the crypto keys, we
use the identified keys as an index to further check the origin
of each key and its propagation. For instance, through checking
the origin of the key in Figure 1 we can find that it is generated
from the keygen function at line 10, and through checking the
input of this function we can discover the crypto key buffer
contains inadequate information (i.e., only 32 bits) . Moreover,
(a) A simple crypto scheme
(b) Partial corresponding disassembly code
Figure 1: An example illustrating typically how a crypto key
is used in a binary executable.
• How to identify crypto operations without signatures. Pre-
vious works that analyze crypto software often rely on sig-
natures for specific crypto algorithms. Thus, if the algorithm
is proprietary, the identification would fail, as no signatures
would typically be available. In Figure 1a, the simple, home-
made crypto operation cannot be identified with signatures.
• How to identify the crypto keys. Even when the crypto oper-
ation has been identified, how to accurately locate the memory
buffer that contains the crypto key is still non-trivial. For in-
stance, the encrypt function in Figure 1a accesses two buffers:
Data and Key. Unfortunately, when analyzing binary executa-
bles, there is no semantic information available on the buffers.
uint8_t Key[16];uint8_t Data[256] = {0};void keygen(uint8_t * key, size_t len){uint8_t seed[4];for ( size_t i = 0; i < 4; ++i )seed[i] = rand() & 0xff;for ( size_t i = 0; i < len; ++i )key[i] = seed[i % 4];}void encrypt( uint8_t * buf, size_t len ){for ( size_t i = 0; i < len; ++i )buf[i] ^= Key[i % 16];}int main(){keygen(Key, 16);encrypt(Data, 256);}12345678910111213141516171819202122230040108E mov   eax, [ebp+var_4]00401091 xor   edx, edx00401093 mov   ecx, 10h00401098 div   ecx0040109A movzx edx, byte_413780[edx] ; key buffer reading004010A1 mov   eax, [ebp+arg_0]004010A4 add   eax, [ebp+arg_4]004010A7 movzx ecx, byte ptr [eax]004010AA xor   ecx, edx004010AC mov   edx, [ebp+arg_0]004010AF add   edx, [ebp+var_4]004010B2 mov   [edx], al0040101E call rand00401023 and eax, 0FFh00401028 mov ecx, [ebp+var_8]0040102B mov [ebp+ecx+var_C], al...00401057 mov  eax, [ebp+arg_0]0040105A add  eax, [ebp+var_4]0040105D mov  cl, [ebp+edx+var_C] 00401061 mov  [eax], cl ;              key buffer writingkeygenencryptby monitoring the key buffer we can observe that its content
is preserved until the program terminates, and thus it is an
insecure crypto key. This backward and forward key tracking
hence provides a simple way to detect insecure crypto keys.
Problem Scope. The objective of this work is to identify insecure
crypto keys in binary executables. In particular, we focus on de-
tecting (1) whether the key is generated from deterministic inputs,
(2) whether a shared key is generated using key materials from a
single party, and (3) whether the key is not sanitized immediately
after the cryptographic operations. We focus on analyzing x86/64
stripped executables without source code or debugging symbols.
In addition, we focus on ciphers (symmetric, asymmetric, stream)
and digital signatures. For these classes of cryptographic primitives,
it does not matter which specific crypto algorithm the program
uses. Thus, our approach handles both standard and proprietary
algorithms. Other cryptographic primitives such as hash functions
do not use keys, or in the case of keyed hashes they do not apply
the crypto operations on the input and the key simultaneously.
4 DESIGN
K-Hunt uses dynamic analysis to identify insecure crypto keys.
It assumes that there exist test cases to execute the program so
that it uses the crypto operations. Our approach uses dynamic
analysis because it needs statistics about the program execution.
Furthermore, static analysis faces many limitations for analyzing
memory buffers, which store the crypto keys. At a high level, K-
Hunt comprises of two phases:
• Pinpointing the Key. In the first phase, detailed in §4.1, the
target program is executed with a lightweight coarse-grained
binary code instrumentation to firstly identify the crypto basic
blocks and then identify the crypto keys they use.
• Detecting the Insecure Key. In the second phase, detailed
in §4.2, the target program is executed again with a heavy-
weight fine-grained instrumentation, which tracks the memory
reads and writes and conducts a function level taint analysis.
Through taint analysis of the pinpointed keys, K-Hunt then
detects the insecure crypto keys.
4.1 Pinpointing Crypto Keys
The first phase of K-Hunt is to pinpoint the crypto keys. An
overview of how K-Hunt performs this analysis is presented in Fig-
ure 2. It first identifies the crypto basic blocks by running the
executable with multiple test inputs, and then analyzes the data
those basic blocks operate on to locate the crypto keys.
Step-I: Crypto Basic Block Identification. One observation of
modern crypto algorithms (e.g., AES, RSA, DSA) is that they are
typically built with only a few compact transformations, which
correspond to just a few basic blocks in a program. Therefore, if
we can identify these basic blocks, we would identify the crypto
operations that use them.
Definition 1. A crypto basic block is defined as a basic block
that satisfies the following constraints: (i) the basic block uses arith-
metic calculations to implement a cryptographic operation; (ii) the
basic block is executed multiple times to mix a data stream with a key
stream; (iii) the produced or consumed data have high randomness.
Our approach first computes, for each basic block, the ratio of
x86/64 arithmetic and bitwise instructions (e.g., mul, and xor) [27,
32]. A basic block is considered a candidate crypto basic block if
it has a ratio larger than a pre-defined threshold. This threshold
has been experimentally selected as 15% in our current design after
analyzing common crypto libraries and utilities. A special case is
that a basic block is directly considered a candidate if it contains
instructions from the Advanced Encryption Standard instruction set
(AES-NI), an extension to the x86 instruction set for microprocessors
from Intel and AMD.