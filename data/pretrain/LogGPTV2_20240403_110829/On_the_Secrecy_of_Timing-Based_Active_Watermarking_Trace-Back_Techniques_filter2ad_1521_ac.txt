0.15
0.1
0.05
0
700
800
stop under 
this node
Packet
Figure 4. Clusters of embedding packets
Figure 5. Hierarchical cluster tree
the same watermark bit are identical, we may cluster the
embedding packets based on their delays. To seek patterns,
we performed an experiment with watermark parameters
S = 400ms, M = 8, L = 24, and normal network delays
with μ = 0, σ = 10ms. Figure 4 shows the packet number
(y-axis) and the packet delay (x-axis) of the observed pack-
ets. We can see there are clear patterns. It is because to en-
sure the correctness of the watermark scheme, the delayed
packets (i.e., the second packets in IPDs) for watermark bit
i cannot come later than the delayed packets for bit i + 1,
i.e., delayed packets of one bit cannot overlap with those of
another bit.
We adopt the agglomerative algorithm (AGNES) [12] to
cluster the watermark delayed packets for different water-
mark bits. The clustering features are packet sequence num-
ber and packet delay. This algorithm starts by placing each
packet in its own cluster. Each time, it merges two clus-
ters with the most similarity together. Here we deﬁne the
similarity as the shortest Euclidean distance between any
packets in two clusters. Before computing the distances,
we normalize the packet numbers and packet delays based
on their maximum and minimum values. Based on packet
distances, we create a hierarchical cluster tree. The cluster
tree for the ﬁrst 10 clusters in Figure 4 is shown in Figure
5. The leaf nodes in the tree are packets (singleton clusters)
and non-leaf nodes are clusters. The height of a non-leaf
node is the distance of the two nodes merged at that node.
We need to decide when to stop the merging process and
output the clusters. If chosen correctly, the number of clus-
ters should be L, and the number of packets in each cluster
should be roughly the same (M in the ideal situation). We
use the variance of normal network delays σ estimated in
Section 3 to decide when to stop merging. We stop merg-
ing at node ni if the delay difference of any two packets in
the clusters to be merged is out of the range ±3σ. Since
the delay differences of the packets for a watermark bit are
only caused by normal network delays, this guarantees that
99.73% of the chance clusters can be formed correctly un-
der the normal distribution assumption about normal net-
work delays. We then approximate M by computing the
average cluster size as the median value of all cluster sizes.
To further improve the performance and compensate for in-
accurate estimation of σ, we also test the nodes above and
below the chosen stop node ni and generate various clus-
ter formations. Only those cluster formations that still have
the same average cluster size are kept. This is to make sure
we do not over-split or over-merge the clusters. We then
compute the variance of cluster sizes for these cluster for-
mations to determine the ﬁnal stop node that can produce
the most similar cluster sizes.
Having the clusters, we calculate the average IPDs for
adjacent clusters. Due to false positives and false negatives
in the previous steps, our clustering algorithm cannot guar-
antee all clusters have the same size. Therefore, unlike the
procedure in Section 2, the average IPD is computed as the
difference of average timestamps of adjacent clusters. Now
the situation is similar to case I. Following the approach in
Case I, the watermark can be recovered through computing
the GCD of the L − 1 average IPDs.
4.3.3. Case III
In Case III, each watermark bit is embedded on 1 IPD and
embedding packets are not reused. Because the watermark
encoder only delays the second packets in IPDs, the ﬁrst
packets will not be delayed and cannot be identiﬁed by our
algorithm in Section 4.2. Thus we cannot compute the IPDs
to recover the watermark. However, the watermark scheme
can still be compromised if the same watermark is added to
normal ﬂows. Attackers can confuse the watermark decoder
by increasing the false positive rate. Therefore, we investi-
gate how to duplicate the watermark using the packet delay
information.
In this case, although the exact location is unknown, the
ﬁrst packet in the IPD of bit i must fall between the two ad-
jacent second packets for bits i− 1 and i. We also know the
watermarked IPD is a multiple of S. Using these two con-
ditions, we ﬁnd a number of possible ﬁrst packets of IPDs.
(For brevity, we simply refer to the ﬁrst packet of an IPD
as the ﬁrst packet.) Due to network delays, we only require
the IPD for a possible ﬁrst packet is close to a multiple of
S. For normal network delays with mean μ and variance σ2,
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
1
0.95
0.9
0.85
0.8
0.75
0.7
0.65
0.6
0.55
)
1
=
M
(
e
t
a
r
n
o
i
t
a
c
i
l
p
u
d
t
i
b
-
1
s=400
s=600
s=800
s=1000
1
0.95
0.9
0.85
0.8
0.75
0.7
0.65
0.6
0.55
)
4
=
M
(
e
t
a
r
n
o
i
t
a
c
i
l
p
u
d
t
i
b
-
1
s=400
s=600
s=800
s=1000
0.5
 6
 8
10
12
q
14
16
18
0.5
 6
 8
10
12
q
14
16
18
Figure 6. 1-bit duplication rate (M = 1)
Figure 7. 1-bit duplication rate (M = 4)
q
i
(cid:6)
(cid:5)
the watermarked IPD is normally distributed around multi-
√
ples of S with mean 0 and variance 2σ2. So we deﬁne close
as within ±3
2σ of a multiple of S. The probability we
miss the real ﬁrst embedding packet is only about 0.0027.
For better duplication, we want the number of possible
ﬁrst packets, which is affected by several factors, is as small
as possible. Assuming IPDs are independent and uniformly
distributed in [0, S) if mod S, the probability an IPD is
√
close to multiples of S is Pc = 6
2σ
S . Let q be the num-
ber of packets between two adjacent identiﬁed embedding
packets. The probability that exactly i IPDs are close is
(Pc)i(1− Pc)q−i. So the expected packet num-
Pc(i) =
i=0 i × Pc(i).
ber of possible ﬁrst packets is: Ep(q) =
Now we discuss how those possible ﬁrst packets can fa-
cilitate watermark duplication. Let pf1 , . . . , pfk be the pos-
sible ﬁrst packets, and pe be the second packet for a water-
mark bit in the stepping stone ﬂow. Let p(cid:2)
fk and p(cid:2)
, . . . , p(cid:2)
e
be the corresponding packets in the normal ﬂow, on which
we duplicate the watermark bit by delaying p(cid:2)
e. For ev-
ery pfi, we decode an possible watermark bit wfi with pe.
Since the real watermark bit is unknown, our strategy is to
try all delays from 0 to 2S−1 for p(cid:2)
e. For each delay, we de-
code k watermark bits with p(cid:2)
fk, and compare them
with the watermark bits wfi from the stepping stone ﬂow to
ﬁnd the optimum delay dopt that maximizes the number of
matched bits. Therefore delaying p(cid:2)
e by dopt can increase
the possibility of successful watermark duplication.
, . . . , p(cid:2)
(cid:2)
f1
f1
q
We ﬁrst use simulation to examine the performance of
our duplication algorithm. Figure 6 shows the 1-bit du-
plication rate (i.e., the probability to detect the same bit in
the normal ﬂow after duplication) for different S and q, in
which all the rates are greater than 85%. Note that by ran-
domly delaying p(cid:2)
e, the duplication rate will be only 50%.
We can further derive the increased false positive rate for
the entire watermark after the duplication. For an L-bit wa-
termark and a hamming distance threshold h, our algorithm
(Pdup)L−i(1−
increases the false positive rate to:
Pdup)i, where Pdup is the 1-bit duplication rate as shown in
Figure 6. For example, when L = 24 and h = 5, the orig-
( 1
2)L = 0.33%. If
inal false positive rate is only
(cid:2)
(cid:2)
h
i=0
(cid:5)
(cid:6)
(cid:5)
(cid:6)
L
i
h
i=0
L
i
the 1-bit duplication rate is Pdup = 0.9, the false positive
rate dramatically increases to 97.23%.
4.3.4. Case IV
In Case IV, each watermark bit is embedded with M IPDs
and requires 2M distinct embedding packets. Similar to
Case III, the embedding packets for different bits do not in-
terleave, i.e., the 2M packets for bit i must all come earlier
than the 2M packets for bit i + 1.
The clustering algorithm discussed in Case II is used to
identify the embedding packets for different watermark bits.
Because the ﬁrst embedding packets still cannot be identi-
ﬁed, we follow the algorithm in Case III to ﬁnd the pos-
sible ﬁrst embedding packets. However, now for each bit,
we are looking for a combination of M possible ﬁrst pack-
ets, instead of only 1 packet as in Case III. The average IPD
differences ipdavg between the M possible ﬁrst packets and
√
the M identiﬁed second packets are required to be close to a
multiple of S, where close is still deﬁned as within ±3
2σ.
Suppose there are totally q packets between adjacent iden-
tiﬁed embedding packets, through a similar analysis as in
(cid:2)
Case III, the expected number of possible combinations of
i=0 i× Pc(M, i),
(cid:6)
(cid:5)
ﬁrst embedding packets is Ep(M, q) =
(Pc)i(1 − Pc)q
(cid:2)
where q(cid:2) =
(cid:2)−i.
q
i
Clearly the equation Ep(q) in Case III is a special case of
Ep(M, q) when M = 1.
, and Pc(M, i) =
q
M
(cid:5)
(cid:6)
q
(cid:2)
The watermark duplication algorithm for Case IV is also
very similar to Case III. In order to duplicate one bit, we
try all delays from 0 to 2S − 1 for the M identify second
packets, decode watermark bits from the combination of M
possible ﬁrst packets, then ﬁnd the optimum delay dopt. We
also perform initial evaluation through simulation; the result
for M = 4 is shown in Figure 7. Compared with Figure 6,
the duplicate rates are lower and decrease more quickly with
increasing q, because of the larger number of possible ﬁrst
embedding packets. Using the same equation as in Case III,
we can also compute the increased false positive rate after
duplication.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
4.3.5. Case V
We do not have special algorithm for Case V. We may still
apply algorithms similar to those for Case IV. However, to
ﬁnd possible ﬁrst packets, we cannot restrict only to the
packets between adjacent second packets. A lot more pack-
ets for each watermark bits need to be considered. This will
increase q and Ep(M, q). As a result, the duplicate rate of
our algorithms will decline to around 50% more quickly.
However, even when the watermark may not be dupli-
cated to normal ﬂows, we may remove the watermark easily
with the knowledge of S. In particular, we may delay each
identiﬁed embedding packets by S. Then the average IPDs
are also increased by S. The new watermark bits will be the
negation of the original ones.
4.3.6. The General Procedure for Watermark Recov-
ery/Duplication
Since attackers do not know which case the watermark en-
coder uses, they should ﬁrst run the clustering algorithm to
identify the embedding packets used for the same water-
mark bits. When single IPDs are used (Case I & III), most
of the clusters will only contain one packet. Next the attack-
ers compute the average IPDs for adjacent clusters. When
packets are reused (Case I & II), the average IPDs should be
close to multiples of S. Then they can recover and/or dupli-
cate the watermark following the speciﬁc steps for different
cases.
5. Detecting Watermark Existence
In Section 4, we have introduced our approaches to com-
promise the watermark scheme. These approaches require
to observe a substantial number of packets in order to pro-
duce satisfactory results. In this section, we discuss the wa-
termark detection problem, i.e., how can an attacker detect
the existence of watermarks in their ﬂows as early as possi-
ble, so that any countermeasures may be applied can have a
higher chance to succeed.
When a watermark is embedded, extra delays have to be
introduced for certain packets. So packet delay is the natu-
ral choice to detect the watermark. However, although most
of the network delays are small, we may occasionally ﬁnd
large delays comparable to watermark delays. In the follow-
ing, we investigate how many (possible) watermark delays
must appear before we can decide a ﬂow is watermarked.
5.1. The Watermark Capability and the
Minimum Number of Watermark De-
layed Packets
Two things deﬁne the usefulness of a watermark. First,
the detection rate Dt deﬁnes how well a stepping stone
(cid:5)
(cid:6)
h
i=0
L
i