o
c
e
s
(
e
m
T
g
n
i
s
s
e
c
o
r
P
20
15
10
5
0
500
1000
1500
2000
0
200
400
600
800
1000
600
400
)
s
d
n
o
c
e
s
(
e
m
T
g
n
i
i
s
s
e
c
o
r
P
200
0
0
100
200
300
400
500
Number of Permissions 
Number of Users 
Number of Roles 
(a) Varying number of permissions
(b) Varying number of users
(c) Varying number of roles
Figure 4. Speed
The accuracy of the algorithm was measured as the ratio
of number of exact roles identiﬁed to the number of roles
originally deﬁned in the data set. An exact role match is
a permission set extracted that matches exactly the permis-
sion set of an original role. Partial matches can also be iden-
tiﬁed but only perfect matches are reported.
coverage =
no. user permissions covered by discovered roles
no. user permissions in original data set
The percentage of user permissions covered by identiﬁed
roles gives an indication of what portion of all user permis-
sions the identiﬁed set of roles covers. Coverage is mea-
sured as the ratio of user permission assignments through
identiﬁed roles to the total number of user permission as-
signments in the original data set. The higher the cover-
age percentage, the more permission assignments that set
of roles covers.
Using the additional information from the data simula-
tion parameters, the threshold can be set to the average num-
ber of times each role was expected to be assigned to any
user. That is, the average frequency of each permission set.
This can be calculated as the probability of assigning any
single role to a user multiplied by the total number of users.
The probability of assigning any one role to a user is the av-
erage number of roles per user divided by the total number
of roles.
253253
ξ = no. users ×
average no. roles/user
no. roles
By setting the threshold to the average frequency of a
role, it is expected that 50% of roles are identiﬁed. How-
ever, in the ﬁrst two test sets, the percentage of actual roles
found exceeded this benchmark by at least 10% and does
not fall below the benchmark in the third test set.
Also interesting was the fact that the actual percentage
of user permissions covered by the discovered roles cov-
ered was more than the percentage of roles recovered. Over
85% of permission assignments can be covered by less than
70% of roles in some of the test cases. On closer inspec-
tion, it was discovered that some of the roles discovered
were combinations of different roles. Because these roles
were assigned frequently with other roles, the data mining
identiﬁed this correlation and grouped them together. This
can imply the previous roles unidentiﬁed by the data mining
would be more effective if they are grouped together.
Finally, the processing time of each data set was mea-
sured. The algorithm was run on Dell PowerEdge 2850 ma-
chines with two 3.0GHz CPUs and 4 GB of memory. In this
analysis, it was discovered that increasing the number of
permissions and users actually reduces the time required to
identify frequent permission sets. As the number of permis-
sions increase, the frequent permission sets become more
distinct and as a result, easier to identify. As the number of
users increase, the range of supports for roles increases and
it becomes easier to identify more heavily weighted roles.
Increasing the number of roles increases the processing time
since more itemsets need to be generated and more roles
need to be identiﬁed. The relationship between roles and
processing time appears to be linear.
5. Discussion and Future Work
5.1. Approach Overview
This research proposes a permission set mining heuristic
for identifying the most effective roles for RBAC. Identiﬁed
roles offer the largest amount of administrative beneﬁt as
they contain the permission sets that are most frequently as-
signed. The approach produces a practical implementation
for a previously theoretical concept that allows for small
amounts of user permission perturbation if the most practi-
cal roles can be identiﬁed.
The ﬁrst part of the proposed algorithm identiﬁes can-
didate roles, placing no restrictions on how many roles a
particular permission can belong to or how many roles each
user can be assigned. The initial discovery of candidate
roles uses a frequent pattern identiﬁcation technique that
generates support counts of each permission itemset. The
permission sets with the highest support counts are the roles
most likely to be correct and useful for administration pur-
poses.
The second part of our algorithm places recommended
roles into a partial ordering, centering the construction pro-
cess on the most beneﬁcial roles. In both parts of the algo-
rithm, the process can be truncated to eliminate permission
sets that have low coverage. This reduces the presence of
infrequent permissions sets that are not likely to improve
the RBAC structure.
The proposed hierarchy construction process is offered
in addition to candidate role identiﬁcation to produce a more
comprehensive and complete role mining technique. The
created partial ordering is also stable and unaffected by or-
dering of the original user permission assignments.
5.2. Role Coverage
Permission set mining identiﬁes permission sets that of-
fer the largest amount of coverage. If implemented, these
are the permission sets that will offer the largest amount of
administration beneﬁt. The extensive coverage of the ex-
tracted roles has also been demonstrated in our experimen-
tal testing. Roles assigned more frequently cover more user
permission assignments.
5.3. Threshold Choice
If ξ was not enforced during the frequent permission set
extraction process, it can be enforced during the hierarchy
construction process by terminating the insertion of candi-
date roles whose support falls beneath ξ. This also offers the
determination of ξ at a later point when more information
of gathered frequent itemsets is present.
Actual determination of ξ for the implemented hierar-
chy can be based on what is required by a particular enter-
prise. It is expected any result given by a bottom up ap-
proach will be inspected by human users to conﬁrm suit-
ability. Our approach provides possible hierarchies that can
achieve desired goals of access control administration re-
duction. Choice of ξ offers a tradeoff between selecting a
smaller number of roles that will on average offer the largest
reduction in administration of permission assignments and
selecting a larger number of roles with lower average role
administration reduction but an overall improvement in ad-
ministration.
5.4. Infrequent patterns
If a permission set is only given together to a small num-
ber of users, it may not be identiﬁed by frequent permission
set mining. Creating a role that contains an infrequent set
of permissions may not be justiﬁed as it does not produce a
signiﬁcant reduction in administration requirements.
254254
However, these permission set may represent important
roles that represent specialised occurrences given to very
few members of staff. These roles are not created for ad-
ministrative beneﬁt, but necessity. To ensure permissions
are not lost and the original access control matrix is not
modiﬁed, these permissions could be turned into single per-
mission or reduced set permission roles and assigned di-
rectly to the user. In situations when these rare cases may
be needed, it may be interesting to use infrequent pattern
mining for extraction of rare permission set assignments
for analysis.
Infrequent user permission set assignments
may identify anomalies or verify the existence of very spe-
cialised yet important roles within the enterprise.
Infrequent patterns may also be permissions that have
been assigned in error or residual permissions after a user
changes job titles within the enterprise. This handles the
presence of abnormal data. There is currently no role en-
gineering approach that addresses the issue of anomalies in
access control data. All existing approaches use all user
permission assignments in their role extraction.
5.5. Unidentiﬁed roles
In systems with RBAC, roles unidentiﬁed by permission
set mining are also interesting in terms of validating an ex-
isting structure. A role that is unidentiﬁed questions the
presence of that role. Often these roles are not required be-
cause of their scarce nature and their presence does not offer
enough administration beneﬁt to justify their existence.
Analysis of generated results in can also identify mis-
assignment of permissions to a particular user. For example,
if every user that is assigned permission a is also assigned
permissions b, c, d, e and f, it is a good indication that these
permissions should be assigned together. However, if an ac-
cidental assignment to a new user for permission a occurred
without permissions b, c, d, e and f, this could potentially
be detected.
5.6. Optimality
Construction of the hierarchy is centered around roles
that are more probable. Sorting candidate roles on σ and
permission set length ensures subsets of roles are placed
into the partial ordering before the supersets of roles. This
is deﬁned by the rule of frequent itemsets, stating that if a
set of items is frequent, each item in the set must also be fre-
quent. This results with roles higher in the hierarchy always
being added to the partial ordering after their subsets.
The most costly component of permission set mining is
the frequent pattern extraction. There are many ways to
identify frequent patterns. For our approach, frequent pat-
tern trees have been selected due to the efﬁcient compact
structure it produces for mining. Inserting each permission
set into the tree requires O(n) time where n is the number
of frequent permissions. Insertion of all items into the tree
is O(mn) where m is the number of permission sets or the
number of users. The patterns are then mined from a tree
with a depth of at most the size of the largest role.
The hierarchy construction iteratively places candidate
roles into the partial ordering, performing checks only on
roles already inserted into the tree for partial ordering pos-
sibilities. This requires O(r2) time where r is the number
of candidate roles to insert.
5.7. Future Work
An option for future work in the data mining part of this
procedure can be to reduce the number of generated can-
didate permission sets. At the moment, if {a, b, c} appear
3 times within our data set, and always together, frequent
itemsets {a}, {b}, {c}, {a, b}, {a, c} and {b, c} with sup-
port 3 would also be generated. While these permission sets
are eliminated in the optional operations of phase 2 of our
algorithm (line 16 of Algorithm 2 when removing roles that
were not explicitly assigned to any users), it may be pos-
sible to generate only the largest frequent itemsets without
identifying all subsets with the same support. In data min-
ing, this specialisation of frequent itemset mining is known
as frequent closed itemset mining.
The current implementation for permission set mining
identiﬁes the roles that are weighted purely on frequency. It
may be interesting to explore the effect of identifying roles
that consist of a large set of permissions as well as being
frequent. In data mining, identiﬁcation of roles with a large
number of permissions may be extracted with maximal fre-
quent pattern mining. Maximal pattern mining for role en-
gineering will require the analysis of the tradeoff between
size of role and frequency of role.
Finally, role recommendations produced from permis-
sion set mining still require human analysis before imple-
mentation and deployment. Recent research in the mean-
ing of roles show that limited semantics can be extracted
from environments such as ours, where only user permis-
sion information is available [12]. In this type of data, the
structure of the information itself offers the semantic infor-
mation. Permission set mining exploits this to identify the
roles that are the most useful and offer the most adminis-
trative beneﬁt. We have recently gained access to full en-
terprise access control information from a sponsoring com-
pany and are currently analysing the additional information
to see if correlations can be identiﬁed to give more demo-
graphic and operational meaning to role recommendations
produced by permission set mining.
255255
6. Conclusion
Role engineering is an integral process in the full reali-
sation of RBAC beneﬁts, deﬁning what permissions are as-
signed to roles in order to assist administration and improve
the efﬁciency of access control management. Existing au-
tomated approaches place constraints on user to role and
permission to role assignments, often do not support hier-
archical RBAC and require all permission assignments to be
correct. Results from these approaches often offer sets of
roles that are not practical for application.
To address these issues, this research proposes a new ap-
proach that uses frequent pattern mining to identify the best
candidate roles that can be used to construct an effective
role hierarchy. Our proposed approach offers an alternative
mining algorithm that does not assume perfect data, offers
hierarchy support and is not prone to distinct clustering. We
test our results and offer interesting analysis of roles and
their relationships.
Results from real data sets produce role hierarchy struc-
tures that are semantically correct and testing on simulated
data identiﬁes roles that cover over 85% of user permission
assignments. Results show interesting correlations between
roles and their relationships and we analyse thresholding
tradeoffs, data anomalies and role accuracy in relation to
our produced results. The roles identiﬁed by the proposed
approach are the roles that offer the largest coverage of the
users in the system. These roles can then be placed into
comprehensive partial ordering hierarchies for increased ad-
ministrative beneﬁts.
Acknowledgments: This
supported and
funded by CA Labs. We wish to thank Rui Zhang and
Steven Versteeg for discussions on technical content, and
the referees for their helpful comments.
research is
References
[1] ANSI. American National Standard for Information Tech-
nology - Role Based Access Control. ANSI INCITS 359-
2004.
[2] A. Ceglar and J. F. Roddick. Association mining. ACM
Computing Surverys, 38(2):5, 2006.
[3] E. J. Coyne. Role engineering. In RBAC ’95: Proceedings of
the ﬁrst ACM Workshop on Role-based access control, pages
4–5, New York, NY, USA, 1996. ACM Press.
[4] A. Ene, W. Horne, N. Milosavljevic, P. Rao, R. Schreiber,
and R. E. Tarjan. Fast exact and heuristic methods for role
minimization problems. In SACMAT ’08: Proceedings of the
13th ACM symposium on Access control models and tech-
nologies, pages 1–10, New York, NY, USA, 2008. ACM.
[5] E. B. Fernandez and J. C. Hawkins. Determining role rights
from use cases.
In RBAC ’97: Proceedings of the second
ACM workshop on Role-based access control, pages 121–
125, New York, NY, USA, 1997. ACM Press.
[6] D. F. Ferraiolo and D. R. Kuhn. Role-Based Access Control.
In Proceedings of the 15th NIST-NCSC National Computer
Security Conference, pages 554–563, Bultimore, Maryland,
USA, 1992.
[7] D. F. Ferraiolo, D. R. Kuhn, and R. Chandramouli. Role-
Based Access Control. Artech House, Inc., 2003.
[8] J. Han and M. Kamber. Data Mining: Concepts and Tech-
niques. Morgan Kaufmann, second edition, 2006.
[9] J. Han, J. Pei, Y. Yin, and R. Mao. Mining frequent patterns
without candidate generation: A frequent-pattern tree ap-
proach. Data Minining and Knowledge Discovery, 8(1):53–
87, 2004.
[10] M. Kuhlmann, D. Shohat, and G. Schimpf. Role mining
- revealing business roles for security administration using
data mining technology. In SACMAT ’03: Proceedings of
the eighth ACM symposium on Access control models and
technologies, pages 179–186, New York, NY, USA, 2003.
ACM Press.
[11] H. Lu, J. Vaidya, and V. Atluri. Optimal boolean matrix
In IEEE
decomposition: Application to role engineering.
24th International Conference on Data Engineering, Can-
cun, Mexico, April 2008.
[12] I. Molloy, H. Chen, T. Li, Q. Wang, N. Li, E. Bertino,
S. Calo, and J. Lobo. Mining roles with semantic meanings.
In SACMAT ’08: Proceedings of the 13th ACM symposium
on Access control models and technologies, pages 21–30,
New York, NY, USA, 2008. ACM.
[13] G. Neumann and M. Strembeck. A scenario-driven role en-
gineering process for functional RBAC roles. In SACMAT
’02: Proceedings of the seventh ACM symposium on Access
control models and technologies, pages 33–42, New York,
NY, USA, 2002. ACM Press.
[14] H. Roeckle, G. Schimpf, and R. Weidinger. Process-oriented
approach for role-ﬁnding to implement role-based security
administration in a large industrial organization. In RBAC
’00: Proceedings of the ﬁfth ACM workshop on Role-based
access control, pages 103–110, New York, NY, USA, 2000.
ACM Press.
[15] J. Schlegelmilch and U. Steffens. Role mining with ORCA.
In SACMAT ’05: Proceedings of the tenth ACM symposium
on Access control models and technologies, pages 168–176,
New York, NY, USA, 2005. ACM Press.
[16] J. Vaidya, V. Atluri, and Q. Guo. The role mining problem:
ﬁnding a minimal descriptive set of roles. In SACMAT ’07:
Proceedings of the 12th ACM symposium on Access control
models and technologies, pages 175–184, New York, NY,
USA, 2007. ACM.
[17] J. Vaidya, V. Atluri, and J. Warner. Roleminer: mining roles
using subset enumeration. In CCS ’06: Proceedings of the
13th ACM conference on Computer and communications se-
curity, pages 144–153, New York, NY, USA, 2006. ACM.
[18] D. Zhang, K. Ramamohanarao, and T. Ebringer. Role engi-
neering using graph optimisation.
In SACMAT ’07: Pro-
ceedings of the 12th ACM symposium on Access control
models and technologies, pages 139–144, New York, NY,
USA, 2007. ACM.
[19] D. Zhang, K. Ramamohanarao, and R. Zhang. Synthetic
data generation for study of role engineering. http://
www.cs.mu.oz.au/˜zhangd/roledata, 2008.
256256