# Checklist
  * I have verified that the issue exists against the `master` branch of Celery.
  * This has already been asked to the discussion group first.
  * I have read the relevant section in the  
contribution guide  
on reporting bugs.
  * I have checked the issues list  
for similar or identical bug reports.
  * I have checked the pull requests list  
for existing proposed fixes.
  * I have checked the commit log  
to find out if the bug was already fixed in the master branch.
  * I have included all related issues and possible duplicate issues  
in this issue (If there are none, check this box anyway).
## Mandatory Debugging Information
  * I have included the output of `celery -A proj report` in the issue.  
(if you are not able to do this, then at least specify the Celery  
version affected).
  * I have verified that the issue exists against the `master` branch of Celery.
  * I have included the contents of `pip freeze` in the issue.
  * I have included all the versions of all the external dependencies required  
to reproduce this bug.
## Optional Debugging Information
  * I have tried reproducing the issue on more than one Python version  
and/or implementation.
  * I have tried reproducing the issue on more than one message broker and/or  
result backend.
  * I have tried reproducing the issue on more than one version of the message  
broker and/or result backend.
  * I have tried reproducing the issue on more than one operating system.
  * I have tried reproducing the issue on more than one workers pool.
  * I have tried reproducing the issue with autoscaling, retries,  
ETA/Countdown & rate limits disabled.
  * I have tried reproducing the issue after downgrading  
and/or upgrading Celery and its dependencies.
## Related Issues and Possible Duplicates
#### Related Issues
  * None
#### Possible Duplicates
  * None
## Environment & Settings
**Celery version** : celery==5.0.5
**`celery report` Output:**
# Steps to Reproduce
## Required Dependencies
  * **Minimal Python Version** : python 3.8
  * **Minimal Celery Version** : celery==5.0.5
  * **Minimal Kombu Version** : kombu==5.0.2
  * **Minimal Broker Version** : redis:4.0.14
  * **Minimal Result Backend Version** : redis:4.0.14
  * **Minimal OS and/or Kernel Version** : ubuntu 20.04
  * **Minimal Broker Client Version** : redis==3.5.3
  * **Minimal Result Backend Client Version** : redis==3.5.3
### Python Packages
**`pip freeze` Output:**
### Other Dependencies
N/A
## Minimally Reproducible Test Case
    def test_celery_redis_connection_reset(celery_app):
        # Manual wait so we can have redis up when celery_app fixture is created, but then  shut redis down manually before call to send_task
        input("waiting for your input ...")
        # If redis is down, fails immediately with redis.exceptions.ConnectionError instead of retrying
        celery_app.send_task("ping")
celery_app.send_task doesn't retry to establish connection to redis at all.  
There is a retry logic built into celery, and it's being used when creating
celery_app pytest fixture, but it's not used in celery_app.send_task. Why?
What could be done to turn it on?
I'm using
        celery_app.conf.broker_transport_options = {
            'retry_policy': {
            'timeout': 5.0
            }
        }
but that's not honored at all - even when celery_app test fixture tries to
establish connection it instead performs up to 20 retries spaced out at 1
seconds interval.
# Expected Behavior
To be resilient to intermittent connection problems celery client should retry
to reestablish connection if it fails the first time.
# Actual Behavior
Celery client fails immediately with redis.exceptions.ConnectionError if
connection can't be established on first attempt.