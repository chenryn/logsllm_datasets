ATTACK2VEC takes 3014.18 seconds per epoch to optimize
the temporal embeddings (see Section 4). We empirically
run 5 epochs for ATTACK2VEC to reach the optimum em-
bedding results. This leads to approximately 4.18 hours for
USENIX Association
28th USENIX Security Symposium    915
(a) Joomla JCE Vulnerability, CVE-2014-9735, CVE-
2014-10021 (blue dashed lines) and CVE-2018-12613,
CVE-2017-3066, CVE-2014-3704 (red solid lines) re-
spectively are the top three closest security events asso-
ciated with Drupal core RCE (CVE-2018-7602) at the
beginning (end) of the observation span (starting from
May 15 2018).
(b) Temporal t-SNE trajectory of Drupal core RCE (CVE-
2018-7602). The signiﬁcant shift in this ﬁgure can be
indicative of the old reconnaissance campaign fading and
of the new one more targeted towards Drupal emerging,
or of an attacker changing their behavior.
Figure 10: Drupal core RCE (CVE-2018-7602) Evolution between May 15 2018 and November 8 2018.
Apache Struts Jakarta Multipart parser RCE (CVE-2017-5638)
Mar. 23 2017
Nov. 08 2018
breach [11].
WiﬁCam Authentication Bypass
CCTV-DVR Remote Code Execution Apache Struts CVE-2017-12611
ZyNOS Information Disclosure
Malicious Serialized Object Upload
Malicious OGNL Expression Upload
Table 3: Top 3 security events associated with CVE-2017-
5638 at the beginning (March 9 2017) and the end (November
8 2018) of our time span.
ATTACK2VEC to generate ﬁnal temporal embeddings for all
8,087 security events across 102 snapshots. This enables us to
deploy ATTACK2VEC to understand the long term evolution
of different security events at scale by security analysts.
5.6 End-to-end Evaluation of ATTACK2VEC
In the previous sections we evaluated the ability of AT-
TACK2VEC to study various aspects of how a security event is
exploited in the wild. We envision that ATTACK2VEC could
be used by security analysts to understand the evolution of
the use of a security event (e.g., a vulnerability) over time. In
this section we provide an end-to-end example to show how
an analyst could be using our tool to better understanding
the context surrounding a security vulnerability and its evolu-
tion. To this end, we study the evolution of the security event
“Apache Struts Jakarta Content-Type RCE (CVE-2017-5638),”
a remote code execution vulnerability targeting Apache Struts.
This vulnerability is classiﬁed by NVD as a critical bug with
CVSS score 10.0, and was the culprit of the Equifax data
Figure 11a shows that CVE-2017-5638 experienced a
change in the way it is being exploited between April 5,
2017 and April 13, 2017. ATTACK2VEC is able to identify
this change in the way the vulnerability is exploited, and an
analyst could easily identify this. We then want to understand
what these two contexts looked like, and evaluate whether
this information can help us understand the types of attacks
that CVE-2017-5638 was used in. To this end we perform the
analysis described in Section 5.4, whose results are shown in
Figure 11b. In particular, we trace the top three security events
with the closest context to CVE-2017-5638 at the beginning
and at the end of our analysis period (see Table 3 for a detailed
description of these events). The top 3 security events tightly
associated with CVE-2017-5638 at the beginning of our obser-
vation span are IoT speciﬁc attack vectors. Figure 11b shows
that these three IoT attack vectors maintain similar contexts to
CVE-2017-5638 for approximately 10 weeks, indicating that
the four vulnerabilities were frequently exploited together in
the wild as part of a multi-step attack. Later in the analysis
period (starting from May 8, 2017) we see that this attack is
substituted by another attack that is targeted at the Apache
Struts ecosystem, consisting of Malicious OGNL expression
upload, CVE-2017-12611 and Malicious Serialized Object
Upload. Figure 11c shows a similar pattern, with CVE-2017-
5638 migrating from being close to the IoT security events to
the Apache Struts related ones. This information could inform
an analyst about the change in which CVE-2017-5638 was
916    28th USENIX Security Symposium
USENIX Association
0510152025Weeks (Starting from May 15 2018)0.00.20.40.60.81.0Cos. Sim.CVE-2018-12613CVE-2017-3066CVE-2014-3704Joomla JCE VulnerabilityCVE-2014-9735CVE-2014-10021CVE-2018-7602 (May 15 2018)CVE-2014-10021CVE-2015-1397Joomla JCE security bypass and XSSCVE-2018-7602 (Nov 08 2018)CVE-2018-12613CVE-2017-3066CVE-2014-3704Signiﬁcant location shiftBetween two time slices exploited in the wild, switching from an attack step as part
of an IoT-centered attack to part of an attack centered around
Apache Struts.
To further evaluate the accuracy of the embeddings calcu-
lated by ATTACK2VEC, and the meaningfulness of our anal-
ysis, we further investigate the contexts calculated at the be-
ginning of our analysis period, when CVE-2017-5638 was
exploited in conjunction with IoT-related vulnerabilities.To
this end, we retrieve the remote IP addresses from which the
security events originated on selected dates. We ﬁnd that in
many cases these four (including CVE-2017-5638) security
events were generated from connections originating from the
same IP addresses (for example, 701 unique IP addresses on
March 23 2018), indicating that the relation depicted by the
context is not an artifact of ATTACK2VEC, but it is indeed a
large scale attack performed by the same malicious actors.
These IP addresses were often located in residential ISPs,
indicating a potential botnet infection.
We later found conﬁrmation that a variant of the Mirai
IoT malware was active during that period and was explicitly
exploiting CVE-2017-5638, “WiﬁCam auth bypass,” “CCTV-
DVR RCE,” and “ZyNOS information disclosure,” the same
vulnerabilities picked up by ATTACK2VEC as being related
(see Table 3) [1]. This shows that ATTACK2VEC can help
identifying complex attacks in an effective way. An additional
advantage of our approach is that our system was able to ﬂag
this attack as emerging in the wild 72 weeks before it was
actually discussed by security researchers, highlighting the
potential of the use of temporal embeddings for early warning
and situational awareness.
6 Limitations and Discussion
Rare events. The temporal security event embedding used
in this paper builds on top of event frequency and event co-
occurrence (see Section 4). By design the learned temporal
event embeddings are biased towards word frequency per
observation time. When analyzing the security events us-
ing the proposed method, we need to pay attention to the
events that appear less frequently. Broadly speaking, these
rare events can be grouped into two categories - i) the new se-
curity events associated with recently disclosed vulnerabilities
and ii) those rarely observed in the IPS. For the new events,
their corresponding disclosure dates are good indicators when
interpreting the embedding results. For the events that rarely
observed, frequency and popularity are two good reference
points when interpreting the embedding results. Take “CVE-
2018-0101 (Cisco Adaptive Security Appliance (ASA) RCE
vulnerability)” for example (see Figure 12). ATTACK2VEC
faithfully identiﬁes its changes over time (see Figure 12a).
However, when referring to event frequency (see Figure 12b),
we can see that these changes do not represent that the attack-
ers are changing their attack campaign strategy. Moreover,
it is important to notice that our proposed system is robust
(a) Temporal embedding result of Apache Struts Jakarta Multi-
part parser RCE (CVE-2017-5638). Cosine similarity values
for each plot is calculated as similarity(η(t−1)
ei ), where t
starts from March 9 2017.
,η(t)
ei
(b) WiﬁCam Authentication Bypass, CCTV-DVR Re-
mote Code Execution, ZyNOS Information Disclosure
(blue dashed lines) and Malicious OGNL expression
upload, CVE-2017-12611 and Malicious Serialized
Object Upload (red solid lines) are the top three closest
security events associated with CVE-2017-5638 at the
beginning (end) of the observation span (starting from
March 9 2017), respectively.
(c) Temporal t-SNE trajectory of Apache Struts Jakarta
Multipart parser RCE (CVE-2017-5638).
Figure 11: Apache Struts Jakarta Multi- part parser RCE
(CVE-2017-5638) evolution between March 9 2017 and
November 8 2018.
USENIX Association
28th USENIX Security Symposium    917
020406080Weeks0.850.900.951.00Cos. Sim. Apache Struts CVE-2017-5638020406080Weeks (Starting from March 9 2017)0.00.20.40.60.81.0Cos. Sim.malicious. OGNL expr.CVE-2017-12611malicious ser. obj. uploadWifiCam auth bypassCCTV-DVR RCEZyNOS info. dis.CVE-2017-5638 (Mar. 23 2017)CVE-2017-5638 (Nov. 08 2018)WiﬁCam auth bypassZyNOS info. dis.CCTV-DVR RCECVE-2017-12611malicious. OGNL expr.malicious ser. obj. uploadSigniﬁcant location shiftBetween two time slices (a)
(b)
(c)
Figure 12: Rare event CVE-2018-0101 (Cisco Adaptive Security Appliance (ASA) RCE vulnerability).
and can correctly indicate that such event is not actively be-
ing exploited by attackers (see Figure 12c), and therefore the
changes ﬂagged at the previous steps are spurious.
Distraction from attackers. Our proposed temporal event
embedding may be subject to distraction from malicious at-
tackers, leading to inaccurate insights. For example, attackers
could generate large amounts of fake events by targeting a
considerable number of machines (e.g., hundreds of thou-
sands) over a certain period of time (e.g., weeks). However,
we argue that this would make the attackers more visible
to the security companies who could track such malicious
activities and block them accordingly. Additionally, such dis-
traction operations would not bring ﬁnancial incentive to the
attackers. Note that once they switch back to real campaigns,
our method would faithfully capture the new trend.
Limitations. ATTACK2VEC relies on a dataset of pre-labeled
security events to generate insights and understand their evo-
lution. An inherent limitation of this type of data is that an
event can be detected only if it belongs to a known attack
vector. If, for example, a new zero-day vulnerability started
being exploited in the wild, this would not be reﬂected in the
data until its signature is created. Our method is data-driven
hence it can not deduce insights before an event was detected.
However, such delay can be reduced since security companies
typically use threat intelligence systems and employ human
specialists to analyze intrusion data identifying new attack
trends. We refer interested readers to Bilge et al. [5] for a
detailed study on zero-day vulnerabilities.
7 Related Work
7.1 Embedding Applications in Security
Xu et al. [47] proposed to use network-based graph embed-
ding to accomplish cross-platform binary code similarity de-
tection task. The authors adopted the structure2vec approach
to effectively compute embedding vectors for the control ﬂow
graph of binary functions. This allows for efﬁcient similarity
detection by comparing the embeddings for two functions.
Song et al. [42] propose DeepMem, a graph-based deep learn-
ing approach to automatically generate abstract representa-
tions for kernel objects and recognize these objects from raw
memory dumps. The key idea is building a memory graph and
embed the graph nodes into a low-dimensional vector space
using a node’s actual content and the embeddings of its four
kinds of neighboring nodes. These embeddings are then used
as features for classiﬁcation. Ding et al. [9] developed an as-
sembly code representation learning model called Asm2Vec.
The key idea is to encode assembly code syntax and con-
trol ﬂow graph into a feature vector. At the query/estimation
stage, the previously unknown assembly code is encoded into
a lower-dimensional vector and compared using cosine sim-
ilarity. Li et al. [23] introduced a data poisoning attack on
matrix factorization. The authors demonstrated that, with the
full knowledge of the learner, several attacks can be achieved.
7.2 Other Related Work
Concept drift. Concept drift refers to the phenomenon that
the statistical properties of the target variable change over
time. Such causes less accurate predictions across time.
Within the context of security research, Maggi et al. [27]
addressed concept drift in Web application security, while
Kantchelian et al. [20] discussed adversarial drift. In recent
years, Jordaney et al. [18] proposed Transcend, a statistical
framework to identify aging classiﬁcation models. The au-
thors used a statistical comparison of samples seen during
deployment with those used to train the model, thereby build-
ing metrics for prediction quality. They then combine both
the robustness of the prediction
decision assessment (i.e.,
results) and alpha assessment (i.e.,
the quality of the non-
conformity measure) to detect concept drift.
Empirical studies on cyberattacks. Bilge et al. [5] con-
ducted a systematic study of the characteristics of zero-day
attacks through the data collected from 11 million endpoints.
Nappa et al. [32] conducted a systematic analysis of the patch-
ing process of 1,593 vulnerabilities in 10 client-side appli-
cations over 5 year time, especially on measuring the patch-
ing delay and several patch deployment milestones for each
vulnerability. Nayak et al. [33] carried an empirical study
on vulnerability using ﬁeld data and proposed several count-
based metrics for attack surface evaluation. Vervier et al. [46]
analyzed 18 months of data collected by an infrastructure
speciﬁcally built to address BGP hijacks. The author charac-
terized the BGP hijacks in this longitudinal study and provide
a thorough investigation and validation of the candidate ma-
licious BGP hijacks. Li et al. [24] conducted a large-scale
empirical study of security patches that affected 862 open-
918    28th USENIX Security Symposium
USENIX Association
020406080100Weeks0.00.20.40.60.81.0Cos. Sim. CISCO ASA RCE CVE-2018-0101020406080100Weeks0.00.20.40.60.81.0FrequencyCVE-2018-0101020406080100Weeks0.040.020.000.020.04Vec. Norm.CVE-2018-0101source projects.
Vulnerability prediction. Vulnerability prediction tech-
niques learn the attack history from previous events (e.g.,
historical compromise data) and use the acquired knowledge
to predict future ones. What learned in the history can offer
insights to evolution and is therefore relevant to our work.
Sabottke et al. [39] conducted a quantitative and qualitative
exploration of the vulnerability-related information dissem-
inated on Twitter. The authors built a twitter-based exploit
detector, which was capable of providing early warnings for
the existence of real-world exploits. Similarly, Bozorgi et
al. [6] showed how to train linear support vector machines
(SVMs) that predict whether and how soon a vulnerability is
likely to be exploited (i.e., predict time to exploit). Recently,
Shen et al. [40] demonstrated that recurrent neural networks
(RNNs) can be leveraged to predict the speciﬁc steps (i.e.,
vulnerability that may be exploited) that would be taken by an
adversary when performing an attack. Liu et al. [26] explored
the effectiveness of forecasting security incidents. This study
collected 258 externally measurable features about an orga-
nization’s network covering two main categories: misman-
agement symptoms (e.g., misconﬁgured DNS) and malicious
activities (e.g., spam, scanning activities originated from this
organization’s network). Based on the data, the study trained
and tested a Random Forest classiﬁer on these features, and