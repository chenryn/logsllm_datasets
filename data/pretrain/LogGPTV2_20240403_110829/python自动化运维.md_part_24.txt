worker_processes 2；
worker_cpu_affinity 01 10；
worker_rlimit_nofile 65535；
error_log /var/log/nginx/error.log；
#error_log /var/log/nginx/error.log notice；
#error_log /var/log/nginx/error.log info；
pid /var/run/nginx.pid；
events {
worker_connections 65535；
}
……
location / {
root /www；
index index.html index.htm；
}
再登录web2group组的一台服务器，检查Nginx的配置，对比web1group组的
服务器差异化，包括不同硬件配置、内核参数等，配置片段如下：
【/etc/nginx/nginx.conf】
user nginx；
worker_processes 4；
worker_cpu_affinity 1000 0100 0010 0001；
worker_rlimit_nofile 65535；
error_log /var/log/nginx/error.log；
#error_log /var/log/nginx/error.log notice；
#error_log /var/log/nginx/error.log info；
pid /var/run/nginx.pid；
events {
worker_connections 65535；
}
……
location / {
root /data；
index index.html index.htm；
}
至此，一个模拟生产环境Web服务集群的配置集中化管理平台已经搭建完
成，大家可以利用这个思路扩展到其他功能平台。
参考提示 10.1至10.6节的Saltstack介绍可参考官网文档
http://docs.saltstack.com/en/latest/。
第11章 统一网络控制器Func详解
Func（Fedora Unified Network Controller）是由红帽子公司以Fedora平台构建
的统一网络控制器，是为解决集群管理、监控问题而设计开发的系统管理基础
框架，官网地址为https://fedorahosted.org/func。它是一个能有效简化多服务器系
统管理工作的工具，它易于学习、使用和扩展，功能强大，只需要极少的配置
和维护操作。Func分为master和slave两部分，master为主控端，slave为被控端。
Func具有以下特点。
·支持在主控机上管理任意多台服务器，或任意多个服务器组。
·支持命令行方式发送远程命令或者远程获取数据。
·Func通信基于XMLRPC和SSL标准协议，具有模块化的可扩展的特点。与
Saltstack认证方式一致。
·可以通过Kickstart预安装Func到系统中，自动注册到主控服务器端。
·任何人都可以通过Func提供的Python API轻松编写自己的模块，以实现具体
功能扩展。而且任何Func命令行能完成的工作，都能通过API编程实现。
·提供封装大量通用的服务器管理命令模块。
·Func平台没有与数据库关联，不需要复杂的安装与配置，服务器间安全证
书的分发都是自动完成的。
Func与Saltstack在主、被控端建立信任机制是一样的，都采用了证书+签名的
方式。相比Saltstack或Ansible，Func在文件配置、状态管理方面还是空白，但在
远程命令执行、API支持、配置简单等方面还是能体现出其优势，适合中小型服
务集群的远程命令执行、文件分发的工作，同时API支持跨语言，可以与现有运
营平台打通，实现交互式更强、体验更好的自动化运营平台。
11.1 Func的安装
Func需要在主控端、被控端部署环境，建议读者采用yum的方式实现部署。
目前Func最新版本为0.28，由func、certmaster、pyOpenSSL三个组件组成。下面
详细讲解Func的安装步骤。
11.1.1 业务环境说明
为了方便读者理解，笔者通过虚拟化环境部署功能服务器来进行演示，操作
系统版本为CentOS release 6.4，自带Python 2.6.6。相关服务器信息如表11-1所
示。
表11-1 业务环境表说明
11.1.2 安装Func
1.主控端服务器安装
主控端部署在主机名为SN2013-08-020的设备上，通过yum方式安装，如下：
# yum install func –y
# /sbin/chkconfig --level 345 certmaster on
在设备通信上Func要求使用主机名来识别，在没有内部域名解析服务的情况
下，可通过配置主机hosts来解决主机名的问题。主控端hosts配置如下：
【/etc/hosts】
192.168.1.21 SN2013-08-021
192.168.1.22 SN2013-08-022
192.168.1.20 func.master.server.com
修改/etc/certmaster/minion.conf的certmaster参数，指向证书服务器，即主控端
服务器，func命令用到此配置，如：
【/etc/certmaster/minion.conf】
# configuration for minions
[main]
certmaster = func.master.server.com
certmaster_port = 51235
log_level = DEBUG
cert_dir = /etc/pki/certmaster
启动证书服务：
# /sbin/service certmaster start
配置iptables，开通192.168.1.0/24网段访问证书服务51235（certmaster服务）
端口。
# iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 51235 -j ACCEPT
至此，主控端配置完毕。
2.被控端服务器安装
被控端部署在主机名为SN2013-08-021、SN2013-08-022的设备上，同样通过
yum方式安装，如下：
# yum install func –y
# /sbin/chkconfig --level 345 funcd on
配置hosts信息：
192.168.1.20 func.master.server.com
修改/etc/certmaster/minion.conf的certmaster参数，以便指向证书服务器发出签
名请求，建立信任关系，如：
【/etc/certmaster/minion.conf】
# configuration for minions
[main]
certmaster = func.master.server.com
certmaster_port = 51235
log_level = DEBUG
cert_dir = /etc/pki/certmaster
修改/etc/func/minion.conf的minion_name参数，作为被控主机的唯一标识，
一般使用主机名，以SN2013-08-021主机为例，配置如下：
# configuration for minions
[main]
log_level = INFO
acl_dir = /etc/func/minion-acl.d
listen_addr =
listen_port = 51234
minion_name = SN2013-08-021
method_log_dir = /var/log/func/methods/
启动func服务：
# /sbin/service funcd start
配置iptables，开通192.168.1.20主控端主机访问本机51234（func服务）端
口。
# iptables -I INPUT -s 192.168.1.20 -p tcp --dport 51234 -j ACCEPT
至此，被控端配置完毕。
3.证书签名
在主控端运行certmaster-ca--list获取当前请求证书签名的主机清单，如：
# certmaster-ca --list
sn2013-08-021
sn2013-08-022
证书签名通过certmaster-ca--sign hostname命令来完成，如：
# certmaster-ca --sign sn2013-08-021
当然，也可以结合--list、--sign参数实现一键完成所有主机的签名操作，
如：
# certmaster-ca --sign `certmaster-ca --list`
Func也提供了类似Saltstack自动签名的机制，通过修
改/etc/certmaster/certmaster.conf的参数autosign=no为autosign=yes即可。
使用func"*"list_minions查看已经完成签名的主机名，如：
# func '*' list_minions
sn2013-08-021
sn2013-08-022
删除（注销）签名主机使用certmaster-ca-c hostname，如：
# certmaster-ca -c sn2013-08-021
校验安装、任务签名是否正确，通过func"*"ping命令来测试，如图11-1所
示。
图11-1 测试认证主机的连通性
提示 对已注销的被控服务器，要重新注册，先删除被控主机
端/etc/pki/certmaster/下的证书文件，再运3行certmaster-request进行证书请求，具
体操作步骤如下：
# rm -rf /etc/pki/certmaster/主机名.*
# /usr/bin/certmaster-request
11.2 Func常用模块及API
Func提供了非常丰富的功能模块，包括CommandModule（执行命令）、
CopyFileModule（拷贝文件）、CpuModule（CPU信息）、DiskModule（磁盘信
息）、FileTrackerModule（文件跟踪）、IPtablesModule（iptables管理）、
MountModule（Mount挂载）、NagiosServerModule（Nagios管理）、
NetworkTest（网络测试）、ProcessModule（进程管理）、SysctlModule（sysctl
管理）、SNMPModule（SNMP信息），等等，更多模块介绍见官网模块介绍：
https://fedorahosted.org/func/wiki/ModulesList。命令行调用模块格式：
funccall
模块命令行执行结果都以Python的元组字符串返回（API以字典形式返
回），这对后续进行结果集的解析工作非常有利，例如，远程运行“df-m”命令的
运行结果如图11-2所示。
图11-2 返回主机内存使用信息
在所有模块中，CommandModule模块最常用，可以在目标被控主机执行任
意命令。笔者建议使用API方式对应用场景的逻辑进行封装，将权限放到一个预
先定制好的方框中，实现收敛操作。下面对Func常用的模块一一进行讲解。
11.2.1 选择目标主机
Func选择目标主机操作对象支持“*”与“？”方式匹配，其中“*”代表任意多个
字符，“？”代表单个任意字符，例如：
# func "SN2013-*-02？" call command run "uptime"
“SN2013-*-02？”在本文环境中将匹配到SN2013-08-021、SN2013-08-022两台
主机，可以根据实际应用场景随意组合。例如，我们定义的多台Web业务服务器
主机名分别为：web1、web2、web3、…、webn.webapp.com，要查看所有Web
应用的uptime信息可以运行：
# func "web*.webapp.com" call command run "uptime"
多个目标主机名使用分号分隔，如：
# func "web.example.org；mailserver.example.org；
db.example.org" call command run "df -m"
11.2.2 常用模块详解
1.执行命令模块
（1）功能
CommandModule实现Linux远程命令调用执行。
（2）命令行模式
# func "*" call command run "ulimit -a"
# func "SN2013-08-022" call command run "free -m"
（3）API模式
import func.overlord.client as func
client = func.Client（"SN2013-08-022"）
print client.command.run（"free -m"）
2.文件拷贝模块
（1）功能
CopyFileModule实现主控端向目标主机拷贝文件，类似于scp的功能。
（2）命令行模式
# func "SN2013-08-022" copyfile -f /etc/sysctl.conf --
remotepath /etc/sysctl.conf
（3）API模式
import func.overlord.client as func
client = func.Client（"SN2013-08-022"）
client.local.copyfile.send（"/etc/sysctl.conf"，"/tmp/sysctl.conf"）
3.CPU信息模块
（1）功能
CpuModule获取远程主机CPU信息，支持按时间（秒）采样平均值，如下面
示例中的参数“10”。
（2）命令行模式
# func "SN2013-08-022" call cpu usage
# func "SN2013-08-022" call cpu usage 10
（3）API模式
import func.overlord.client as func
client = func.Client（"SN2013-08-022"）
print client.cpu.usage（10）
4.磁盘信息模块
（1）功能
DiskModule实现获取远程主机的磁盘分区信息，参数为分区标签，如/data分
区。
（2）命令行模式
# func "SN2013-08-022" call disk usage
# func "SN2013-08-022" call disk usage /data
（3）API模式
import func.overlord.client as func
client = func.Client（"SN2013-08-022"）
print client.disk.usage（"/dev/sda3"）
5.拷贝远程文件模块
（1）功能
GetFileModule实现拉取远程Linux主机指定文件到主控端目录，不支持命令
行模式。
（2）API模式
import func.overlord.client as func
client = func.Client（"SN2013-08-022"）
client.local.getfile.get（"/etc/sysctl.conf"，"/tmp/"）
6.iptables管理模块
（1）功能
IPtablesModule实现远程主机iptables配置。
（2）命令行模式
# func "SN2013-08-022" call iptables.port drop_to 53 192.168.0.0/24 udp src
# func "SN2013-08-022" call iptables drop_from 192.168.0.10
（3）API模式
import func.overlord.client as func
client = func.Client（"SN2013-08-022"）
client.iptables.port.drop_to（8080， "192.168.0.10"， "tcp"， "dst"）
7.系统硬件信息模块
（1）功能
HardwareModule返回远程主机系统硬件信息。
（2）命令行模式
# func "SN2013-08-022" call hardware info