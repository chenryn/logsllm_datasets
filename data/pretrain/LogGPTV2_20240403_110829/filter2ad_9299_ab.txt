    09 0504cf80 6dd74dae MSHTML!CFastDOM::CHTMLElement::Trampoline_Set_innerHTML+0x3c
    0a 0504cfec 6dcfed4e JSCRIPT9!Js::JavascriptExternalFunction::ExternalFunctionThunk+0x1de
    0b 0504d018 6dcfec9d JSCRIPT9!::operator()+0xa0
    0c 0504d044 6dcfec21 JSCRIPT9!ThreadContext::ExecuteImplicitCall >+0x73
    0d 0504d090 6dc6583c JSCRIPT9!Js::JavascriptOperators::CallSetter+0x4b
    0e 0504d0b0 6dc65527 JSCRIPT9!Js::InlineCache::TrySetProperty+0x10c
    0f 0504d104 6dd6eb85 JSCRIPT9!Js::InterpreterStackFrame::DoProfiledSetProperty+0x97
    10 0504d11c 6dccf89b JSCRIPT9!Js::InterpreterStackFrame::OP_ProfiledSetProperty+0x19
    11 0504d158 6dcc5208 JSCRIPT9!Js::InterpreterStackFrame::Process+0x1b6b
    12 0504d284 007f0fe9 JSCRIPT9!Js::InterpreterStackFrame::InterpreterThunk+0x2a8
    WARNING: Frame IP not in any known module. Following frames may be wrong.
    13 0504d290 6dd73bb3 0x7f0fe9
    14 0504d2d0 6dcfeb62 JSCRIPT9!Js::JavascriptFunction::CallFunction+0x93
通过观察WinDbg的输出信息，可以发现PoC造成了异常代码为0xc0000005的内存访问违例异常。0x63a46809处的异常代码向一个内存访问权限为PAGE_NOACCESS(不可访问)的地址写入一个值，从而造成Crash。通过k命令打印栈回溯，可以知道发生异常的代码位于MSHTML!CSpliceTreeEngine::RemoveSplice()函数中。
## 5 Internet Explorer DOM树的结构
当如今的Web开发者想到DOM树时，他们通常会想到这样的一个树：
这样的树看起来非常的简单，然而，现实是Internet Explorer的DOM树的实现是相当复杂的。
简单地说，Internet
Explorer的DOM树是为了20世纪90年代的网页设计的。当时设计原始的数据结构时，网页主要是作为一个文档查看器(顶多包含几个动态的GIF图片和其他的静态图片)。因此，算法和数据结构更类似于为Microsoft
Word等文档查看器提供支持的算法和数据结构。回想一下网页发展的早期，JavaScript还没有出现，并不能通过编写脚本操作网页内容，因此我们所了解的DOM树并不存在。文本是组成网页的主要内容，DOM树的内部结构是围绕快速、高效的文本存储和操作而设计的。内容编辑(WYSIWYG：What
You See Is What You Get)和以编辑光标为中心用于字符插入和有限的格式化的操作范式是当时网页开发的特点。
### 5.1 以文本为中心的设计
由于其以文本为中心的设计，DOM的原始结构是为了文本后备存储，这是一个复杂的文本数组系统，可以在最少或没有内存分配的情况下有效地拆分和连接文本。后备存储将文本(Text)和标签(Tag)表示为线性结构，可通过全局索引或字符位置(CP：Character
Position)进行寻址。在给定的CP处插入文本非常高效，复制/粘贴一系列的文本由高效的“splice(拼接)”操作集中处理。下图直观地说明了如何将包含“hello
world”的简单标记加载到文本后备存储中，以及如何为每个字符和标签分配CP。
文本后备存储为非文本实体(例如：标签和插入点)提供特殊的占位符。
为了存储非文本数据(例如：格式化和分组信息)，另一组对象与后备存储分开进行维护：表示树位置的双向链表(TreePos对象)。TreePos对象在语义上等同于HTML源代码标记中的标签——每个逻辑元素都由一个开始和结束的TreePos表示。这种线性结构使得在深度优先前序遍历(几乎每个DOM搜索API和CSS/Layout算法都需要)DOM树时，可以很快的遍历整个DOM树。后来，微软扩展了TreePos对象以包括另外两种“位置”：TreeDataPos(用于指示文本的占位符)和PointerPos(用于指示诸如脱字符(“^大写字符”:用于表示不可打印的控制字符)、范围边界点之类的东西，并最终用于新特性，如：生成的内容结点)。
每个TreePos对象还包括一个CP对象，它充当标签的全局序数索引(对于遗留的document.all
API之类的东西很有用)。从TreePos进入文本后备存储时需要用到CP，它可以使结点顺序的比较变得容易，甚至可以通过减去CP索引来得到文本的长度。
为了将它们联系在一起，一个TreeNode将成对的TreePos绑定在一起，并建立了JavaScript DOM所期望的“树”层次结构，如下图所示:
### 5.2 增加复杂性层次结构
CP的设计造成了原有的DOM非常复杂。为了使整个系统正常工作，CP必须是最新的。因此，每次DOM操作(例如：输入文本、复制/粘贴、DOM
API操作，甚至点击页面——这会在DOM中设置插入点)后都会更新CP。最初，DOM操作主要由HTML解析器或用户操作驱动，所以CP始终保持最新的模型是完全合理的。但是随着JavaScript和DHTML的兴起，这些操作变得越来越普遍和频繁。
为了保持原来的更新速度，DOM添加了新的结构以提高更新的效率，并且伸展树(SplayTree)也随之产生，伸展树是在TreePos对象上添加了一系列重叠的树连接。起初，增加的复杂性提高了DOM的性能，可以用O(log
n)速度实现全局CP更新。然而，伸展树实际上仅针对重复的局部搜索进行了优化(例如：针对以DOM树中某个位置为中心的更改)，并没有证明对JavaScript及其更多的随机访问模式具有同样的效果。
另一个设计现象是，前面提到的处理复制/粘贴的“Splice(拼接)”操作被扩展到处理所有的树突变。核心“Splice
Engine(拼接引擎)”分三步工作，如下图所示:
在步骤1中，引擎将通过从操作开始到结束遍历树的位置(TreePos)来“记录”拼接信息。然后创建一个拼接记录，其中包含此操作的命令指令(在浏览器的还原栈(Undo
Stack)中重用的结构)。
在步骤2中，从树中删除与操作关联的所有结点(即TreeNode和TreePos对象)。请注意，在IE
DOM树中，TreeNode/TreePos对象与脚本引用的Element对象不同，TreeNode/TreePos对象可以使标签重叠更容易，所以删除它们并不是一个功能性问题。
最后，在步骤3中，拼接记录用于在目标位置“Replay(重现)”(重新创建)新对象。例如，为了完成appendChild DOM操作，拼接引擎(Splice
Engine)在结点周围创建了一个范围(从TreeNode的起始TreePos到其结束TreePos)，将此范围“拼接”到旧位置之外，并创建新结点来表示新位置处的结点及其子结点。可以想象，除了算法效率低下之外，这还造成了大量内存分配混乱。
### 5.3 原来的DOM没有经过封装
这些只是Internet Explorer
DOM复杂性的几个示例。更糟糕的是，原来的DOM没有经过封装，因此从Parser一直到Display系统的代码都对CP/TreePos具有依赖性，这需要许多年的开发时间来解决。
复杂性很容易带来错误，DOM代码库的复杂性对于软件的可靠性是一种负担。根据内部调查，从IE7到IE11，大约28%的IE可靠性错误源自核心DOM组件中的代码。而且这种复杂性也直接削弱了IE的灵活性，每个新的HTML5功能的实现成本都变得更高，因为将新理念实现到现有架构中变得更加困难。
## 6 漏洞原理分析
### 6.1 逆向mshtml.dll中此漏洞的相关类
逆向主要是通过微软提供的pdb文件，以及先前泄露的IE5.5源码完成的。
#### 6.1.1 CSpliceTreeEngine
实际为SpliceTree工作的类，也就是上面所说的拼接引擎(Splice
Engine)的核心类。SpliceTree可以对树的某个范围进行移除(Remove)、复制(Copy)、移动(Move)或还原移除(Undo a
Remove)。当DOM树发生变化时就会调用到此类的相关函数。
以下是IE源代码中的关于此类功能的一些注释：
`移除(Remove)：`  
1、此SpliceTree的行为是移除指定范围内的所有文本(Text)，以及完全落入该范围内的所有元素(Element)。  
2、语义是这样的，如果一个元素不完全在一个范围内，它的结束标签(End-Tags)将不会相对于其他元素进行移动。但是，可能需要减少该元素的结点数。发生这种情况时，结点将从右边界(Right Edge)移除。  
3、范围内的不具有cling的指针(CTreeDataPos)最终会出现在开始标签(Begin-Tags)和结束标签(End-Tags)之间的空间中(可以说，它们应该放在开始标签和结束标签之间)。带有cling的指针会被删除。
`复制(Copy)：`  
1、复制指定范围内的所有文本(Text)，以及完全落在该范围内的元素(Element)。  
2、与左侧范围重叠的元素被复制；开始边界(Begin-Edges)隐含在范围的最开始处，其顺序与开始边界在源中出现的顺序相同。  
3、与右侧范围重叠的元素被复制；结束边界(End-Edges)隐含在范围的最末端，其顺序与结束边界在源中出现的顺序相同。
`移动(Move)：`  
1、指定范围内的所有文本(Text)，以及完全落入该范围内的元素(Element)，都被移动(移除并插入到新位置，而不是复制)。  
2、使用与移除(Remove)相同的规则修改与右侧或左侧重叠的元素，然后使用与复制(Copy)相同的规则将其复制到新位置。
`还原移除(Undo a Remove)：`  
1、这种对SpliceTree的操作只能从还原代码(Undo
Code)中调用。本质上，它是由先前移除(Remove)中保存的数据驱动的移动(Move)。更复杂的是，我们必须将保存的数据编织到已经存在的树中。
下面是我经过逆向得出的IE11中CSpliceTreeEngine类对象的大部分成员。
    //CSpliceTreeEngine类对象结构(大小为0x110，Tree::TreeWriter::SpliceTreeInternal())
    +0x000  bool _fInsert，//CSpliceTreeEngine::Init()
    +0x001  bool _fRemove，//CSpliceTreeEngine::Init()
    +0x002  bool _fDOMOperation，//CSpliceTreeEngine::Init()
    +0x003  //CSpliceTreeEngine::Init()，一个Flag
    +0x004  //CSpliceTreeEngine::Init()，一个Flag
    +0x005  //CSpliceTreeEngine::Init()，一个Flag
    +0x006  //CSpliceTreeEngine::Init()，一个Flag
    +0x007  //CSpliceTreeEngine::Init()，一个Flag
    +0x008  //CSpliceTreeEngine::Init()，一个Flag
    ...
    +0x00C  CMarkup *_pMarkupSource，//CSpliceTreeEngine::Init()
    +0x010  CTreeNode *_pnodeSourceTop，//CSpliceTreeEngine::RecordSplice()
    +0x014  CTreePos *_ptpSourceL，//CSpliceTreeEngine::Init()
    +0x018  CTreePos *_ptpSourceR，//CSpliceTreeEngine::Init()
    +0x01C  CTreeNode *_pnodeSourceL，//CSpliceTreeEngine::RecordSplice()
    +0x020  CTreeNode *_pnodeSourceR，//CSpliceTreeEngine::RecordSplice()
    +0x024  CMarkup *_pMarkupTarget，//CSpliceTreeEngine::RecordBeginElement()
    +0x028  CTreePos * _ptpTarget，//CSpliceTreeEngine::Init()
    +0x02C  CTreeNode *_pnodeTarget，//CSpliceTreeEngine::Init()
    +0x030  TCHAR* _pchRecord，//CSpliceTreeEngine::InitUndoRemove()
    +0x034  LONG _cchRecord，//CSpliceTreeEngine::InitUndoRemove()
    +0x038  LONG _cchRecordAlloc，//CSpliceTreeEngine::RecordText()
    +0x03C  CSpliceRecord *_prec，//CSpliceTreeEngine::NextRecord()
    +0x040  LONG _crec，//CSpliceTreeEngine::NextRecord()
    +0x044  WhichAry _cAry，//CSpliceTreeEngine::NextRecord()
    +0x048  BOOL _fReversed，//CSpliceTreeEngine::FirstRecord()
    +0x04C  CSpliceRecordList* _paryRemoveUndo，//CSpliceTreeEngine::InitUndoRemove()
    +0x050  BOOL _fNoFreeRecord，//CSpliceTreeEngine::InitUndoRemove()
    +0x054  BOOL Flags，//CSpliceTreeEngine::RecordBeginElement()，Flag，_fNoFreeRecord=0x4
    +0x058  CSpliceRecordList* ，//CSpliceTreeEngine::Init()，CSpliceTreeEngine::RecordBeginElement()，CSpliceTreeEngine::~CSpliceTreeEngine()
    +0x05C  ，//CSpliceTreeEngine::RemoveSplice()，CSpliceTreeEngine::~CSpliceTreeEngine()，存放Text的内存指针
    +0x060  CElement **_ppelRight，//CSpliceTreeEngine::RecordBeginElement()
    ...
    +0x070  CSpliceRecordList _aryLeft，//CSpliceTreeEngine::RecordLeftBeginElement()，CSpliceTreeEngine::FirstRecord()，CSpliceTreeEngine::NextRecord()，非指针
    +0x080  CSpliceRecordList _aryInside，//CSpliceTreeEngine::RecordBeginElement()，CSpliceTreeEngine::RecordEndElement()，CSpliceTreeEngine::RecordTextPos()，CSpliceTreeEngine::RecordPointer()，CSpliceTreeEngine::NextRecord()，非指针
    +0x090  CPtrAry _aryElementRight，//CSpliceTreeEngine::CSpliceTreeEngine()，CSpliceTreeEngine::~CSpliceTreeEngine，CSpliceTreeEngine::NoteRightElement()，非指针
    +0x09C  CPtrAry ，//CSpliceTreeEngine::~CSpliceTreeEngine()，CSpliceTreeEngine::RecordSkippedPointer()，非指针
    +0x0A8  CRemoveSpliceUndo _RemoveUndo，//CSpliceTreeEngine::CSpliceTreeEngine()，非指针
    +0x0E4  CInsertSpliceUndo _InsertUndo，//CSpliceTreeEngine::CSpliceTreeEngine()，非指针
下面是我经过逆向得出的IE11中CSpliceTreeEngine类的构造函数。
    void __thiscall CSpliceTreeEngine::CSpliceTreeEngine(CSpliceTreeEngine *this, CDoc *pDoc)
    {
        CSpliceRecordList *aryInside; // ecx
        CRemoveSpliceUndo *pRemoveSpliceUndo; // ecx
        CSpliceRecordList *v5; // edx
        CInsertSpliceUndo *pInsertSpliceUndo; // ecx
        int InitValue; // edx
        // public: __thiscall CSpliceTreeEngine::CSpliceTreeEngine(class CDoc *)   
        // 功能：CSpliceTreeEngine类的构造函数
        this->_aryLeft.ElementCount_Flags = 0;
        this->_aryLeft.MaxElementCount = 0;
        this->_aryLeft.pData = 0;
        aryInside = &this->_aryInside;
        aryInside->ElementCount_Flags = 0;
        aryInside->MaxElementCount = 0;
        aryInside->pData = 0;
        this->_aryLeft.field_C = 1;
        this->_aryLeft.field_D &= 0xFEu;
        aryInside->field_D &= 0xFEu;
        aryInside->field_C = 1;
        memset(&this->_aryElementRight, 0, 0x18u);
        CMarkupUndoBase::CMarkupUndoBase(&this->_RemoveUndo, pDoc, 0, 0);
        pRemoveSpliceUndo->pVtbl = &CRemoveSpliceUndo::`vftable';
        pRemoveSpliceUndo->field_28 = v5;             // 0
        pRemoveSpliceUndo->field_30 = v5;
        CMarkupUndoBase::CMarkupUndoBase(&this->_InsertUndo, pDoc, v5, v5);
        pInsertSpliceUndo->pVtbl = &CInsertSpliceUndo::`vftable';
        memset(this, InitValue, 0x70u);
    }
#### 6.1.2 CTreeNode
html代码中，每一对标签在IE中都会对应一个CTreeNode对象，每个CTreeNode对象的_tpBegin和_tpEnd成员分别用来标识对应标签的起始标签和结束标签。IE11中CTreeNode对象的第三个DWORD的低12位为标签的类型，通过IE5.5源代码中的enum
ELEMENT_TAG枚举变量和pdb文件中全局g_atagdesc表，可以得出当前版本mshtml.dll渲染引擎中大部分标签对应的枚举值。
下面是我经过逆向得出的IE11中CTreeNode类对象的部分成员。
    //CTreeNode类对象结构(大小为0x60，Tree::TreeWriter::CreateRootNode()，Tree::TreeWriter::CreateElementNode())
    +0x000  CElement* _pElement，//此Node对应的元素对象的指针，CTreeNode::SetElement()，CTreeNode::CTreeNode()
    +0x004  CTreeNode* _pNodeParent，//CTreeNode树中此Node的父Node，CTreeNode::CTreeNode()
    +0x008  DWORD _FlagsAndEtag，//元素对象对应的标签的类型，低12位为_etag，CTreeNode::SetElement()，CTreeNode::Parent()
    +0x00C  CTreePos _tpBegin, //此结点的起始CTreePos，CTreeNode::InitBeginPos()
    +0x024  CTreePos _tpEnd, //此结点的结束CTreePos，CTreeNode::InitEndPos()
    +0x03C  SHORT _iCF，//CTreeNode::IsCharFormatValid()，CTreeNode::GetICF()，CTreeNode::GetCharFormatHelper()，CTreeNode::IsDisplayNone()
    +0x03E  SHORT _iPF，//CTreeNode::IsParaFormatValid()，CTreeNode::GetIPF()
    +0x040  SHORT _iFF，//CTreeNode::IsFancyFormatValid()，CTreeNode::GetIFF()
    +0x042  SHORT _iSF，//CTreeNode::IsSvgFormatValid()，CTreeNode::GetISF()
    +0x044  DWORD _ulRefs_Flags，//高16位为引用计数，为0就会被释放（dword），CTreePos::AddRef()，CTreeNode::Release()，CTreeNode::CTreeNode()，CTreeNode::GetTextScaledCharFormat()
    +0x048  //CTreeNode::GetLayoutAssociationItemAt()
    ...
    +0x054  CFancyFormat* _pFancyFormat，//CTreeNode::CTreeNode()
    +0x058  //CTreeNode::GetCharFormat()，CTreeNode::GetFancyFormat()，CTreeNode::GetSvgFormat()，CTreeNode::GetParaFormat()，CTreeNode::IsDisplayNone()
    ...
#### 6.1.3 CTreePos
每个标签的开始标签和结束标签都有一个对应的CTreePos对象，其包含在CTreeNode对象中。通过CTreePos对象可以找到任何一个标签在DOM流中的位置，以及在DOM树中的位置。IE通过CTreePos对象的_pFirstChild和_pNext成员构成了实际的DOM树，通过_pLeft和_pRight成员构成了DOM流(双链表)。
下面枚举变量EType是CTreePos对象所对应的元素的类型。
    enum EType { 