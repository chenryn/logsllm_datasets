DM V.address : V oter.address as address,
DV M.address (cid:54)= V oter.address as mixedAddress,
V oter.name (cid:54)= NULL as registered
from DM V left join V oter
on DM V.ID = V oter.ID
stateB = select ...
resultA = select stateA.SSN
stateA.address as addressA
stateB.address as addressB
stateA.registered
stateB.registered
from stateA inner join stateB
on stateA.SSN = stateB.SSN
where (stateA.date < stateB.date and stateA.registered)
or (stateA.registered
and stateB.registered)
resultB = select ...
Figure 10: SQL styled join query for the ERIC voter registration application.
Once the parties construct the tables in Figure 10, state A can query the table
stateA to reveal all IDs and addresses where the mixedAddress attribute is set to
true. This reveals exactly the people who have conﬂicting addresses between that
state’s voter and DMV databases. When comparing voter registration data between
5The hashing originally performed by ERIC can be replaced with the randomized encoding
protocol.
35
1. Pp uniformly samples a bijection π0 : [n] → [n] and let π1 : [n] → [m] s.t. π1◦π0 = π.
Parameters: 3 parties denoted as Pp, Ps and Pr. Elements are strings in Σ := {0, 1}σ.
An input, output vector size of n, m.
[Permute] Upon the command (Permute, π,A0) from Pp and (Permute,A1)
from Ps. Require that π : [m] → [n] is injective andA0,A1 ∈ Σn. Then:
2. Ps sends B := (Aπ0(1)1 ⊕ S1, ...,Aπ0(n)1 ⊕ Sn) to Pr.
3. Pp sends π1 and T ← Σm to Pr who outputsA(cid:48)0 := {Bπ1(1)⊕T1, ..., Bπ1(m)⊕Tm}.
Pp outputsA(cid:48)1 := {Sπ1(1) ⊕ T1 ⊕Aπ(1)0, ..., Sπ1(m) ⊕ Tm ⊕Aπ(m)0}.
Pp sends π0 and S ← Σn to Ps.
Figure 11: The Oblivious Permutation Network protocol Πpermute repeated.
Parameters: 3 parties denoted as the Pp, Ps and Pr. Elements are strings in Σ := {0, 1}σ.
An input vector size of n and output size of m.
[Permute] Upon
(Permute, π,A0)
from the Pp
and
the
command
(Permute,A1) from the Ps:
3. GenerateA(cid:48) and sendA(cid:48)0 to Pp andA(cid:48)1 to Pr.
1. Interpret π : [m] → [n] as an injective function and A ∈ Σn.
2. Compute A(cid:48) ∈ Σm s.t. ∀i ∈ [m], Aπ(i) = A(cid:48)
i.
Figure 12: The Oblivious Permutation Network ideal functionality Fpermute.
states, state B should deﬁne stateB in a symmetric manner as stateA. The table
resultA contains all of the records which are revealed to state A and resultB, which
is symmetrically deﬁned, contains the results for state B. We note that resultA and
resultB can be constructed with only one join.
Both types of these queries can easily be performed in our secure framework.
All of the conditional logic for the select and where clauses are implemented using
a binary circuit immediately after the primary join protocol is performed. This has
the eﬀect that overhead of these operation is simply the size of the circuit which
implements the logic times the number of potential rows contained in the output.
B Omitted Proofs
B.1 Permutation Network
We now formally prove that the oblivious permutation network protocol in Figure 5
and repeated in Figure 11 is secure with respect to the Fpermute functionality of
Figure 12.
36
Theorem 1. Protocol Πpermute of Figure 11 securely realized the ideal functionality
Fpermute of Figure 12 given at most one party is corrupted in the semi-honest model.
Proof. Correctness follows directly from π1 ◦ π0 = π and that the masks cancel out.
With respect to simulation, consider the following three cases:
1. Corrupt Pp: The view of Pp contains no messages and therefore is trivial to
simulation.
2. Corrupt Ps: The view of Pp contains π1, S which are sent by Pp. The simulator
can uniformly sample π1 : [m] → [n] from all such injective functions and
uniformly sample S ← Σn. Clearly S has the same distribution.
With respect to π1, observe if π1 if ﬁrst ﬁxed uniformly at random then there
are exactly (n − m)! ways to choose π0. Moreover, for each choice of π1 there
is a disjoint set of possible π0 values. Therefore, Pp sampling π0 uniformly at
random results in the distribution of π1 also being uniform.
3. Corrupt Pr: The view of Pr contains B := (Aπ0(1) ⊕ S1, ..., Aπ0(n) ⊕ Sn) and
π1, T ∈ Σm. π1, T are sampled uniformly and therefore trivial to simulation.
similarly, each Bi = Aπ0(i)⊕ Si where Si is uniformly distributed in their view.
Therefore Bi is similarly distributed.
B.2 Duplication Network
We now formally prove that the oblivious duplication network protocol in Figure 5
and repeated in Figure 11 is secure with respect to the Fdup functionality of Fig-
ure 14.
Theorem 2. Protocol Πduplicate of Figure 13 securely realized the ideal functionality
Fduplicate of Figure 14 given at most one party is corrupted in the semi-honest
model.
Proof. Correctness follows an inductive argument. It is easy to verify B1 =A11
Bi−1 =Aπ(i−1)1 and we will show that Bi =Aπ(i)1. Observe that for i ∈ [2, n]
and that this is correct since π(1) = 1 by deﬁnition. Inductively let us assume that
Bi0 = M bi
i
= biAi0 ⊕ biBi−11 ⊕Bi1 ⊕ W bi⊕φi
= biAi0 ⊕ biBi−1 ⊕Bi1
i
i ⊕ biBi−10
i ⊕ biBi−10
⊕ W ρi
⊕ W ρi
And therefore B = π(A1) and
37
the
command
(Duplicate, π,A0)
Parameters: 3 parties denoted as Pp, Ps and Pr. Elements are strings in Σ := {0, 1}σ.
An input, output vector size of n.
[Duplicate] Upon
π(i) ∈ {i, π(i − 1)} for i ∈ [2, n] and A ∈ Σn. Then:
1. Pp computes the vector b ∈ {0, 1}m such that b1 = 0 and for i ∈ [2, n], bi = 1 if
(Duplicate,A1) from Ps. Require that π :
2. Ps samplesB1, W 0, W 1 ← Σn,B10 ← Σ and φ ← {0, 1}n. Ps redeﬁneB11 :=
A11 ⊕B10. For i ∈ [2, n], Ps sends
and
[n] → [n] s.t π(1) = 1 and
π(i) = π(i − 1) and 0 otherwise.
from Pp
i :=Ai1 ⊕Bi1 ⊕ W φi
i :=Bi−11 ⊕Bi1 ⊕ W φi
i
i
M 0
andB10, φ to Pp. Ps sendsB1, W 0, W 1 to Pr.
M 1
3. Pp sends ρ := φ ⊕ b, R ← Σn to Pr who responds with {W ρi
: i ∈ [2, n]}. For
i
i ∈ [2, n], Pp deﬁnes
Pp outputsA(cid:48)0 :=B0 ⊕ R ⊕ π(A0) and Pr outputsA(cid:48)1 :=B1 ⊕ R.
i ⊕ W ρi
Bi0 := M bi
i ⊕ biBi−10
Figure 13: The Oblivious Duplication Network protocol Πduplicate repeated.
Parameters: 3 parties denoted as the Pp, Ps and Pr. Elements are strings in Σ := {0, 1}σ.
An input vector size of n and output size of n.
[Duplicate] Upon the
command (Duplicate, π,A0)
(Duplicate,A1) from the Ps:
from the Pp
and
1. Interpret π : [n] → [n] as a function s.t. π(1) = 1, π(i) ∈ {i, π(i− 1)} for i ∈ [2, n]
and A ∈ Σn.
2. Compute A(cid:48) ∈ Σm s.t. ∀i ∈ [n], Aπ(i) = A(cid:48)
i.
3. GenerateA(cid:48) and sendA(cid:48)0 to Pp andA(cid:48)1 to Pr.
Figure 14: The Oblivious Duplication Network ideal functionality Fduplicate.
38
A(cid:48) =B1 ⊕ R ⊕ π(A0) ⊕B1 ⊕ R
=B ⊕ π(A0)
=π(A1) ⊕ π(A0)
=π(A)
With respect to simulation, consider the following three cases:
{0, 1}n from Ps and W bi⊕φi
uniformly and therefore can be simulated as the same.
1. Corrupt Pp: The transcript of Pp contains M 0, M 1 ∈ Σn,B10 ∈ Σ, φ ∈
from Pr. First observe thatB10, φ are sampled
i =... ⊕Bi1
Next recall that
i
M bi
i =... ⊕ W bi⊕φi
M bi
i
where Bi1, W bi⊕φi
i
∈ Σ are sampled uniformly can not in the view of Pp.
Therefore M 0
i , M 1
i are distributed uniformly.
2. Corrupt Ps: The transcript of Ps contains nothing and therefore is trivial to
simulate. Note that the distribution of the output shares in independent of
Ps’s random tape (view) due to Pp, Pr re-randomizing the shares with R ← Σn.
3. Corrupt Pr: The transcript of Pr containsB11, W 0, W 1 from Ps and ρ from
same. B11 = A1 ⊕B10 whereB10 is sampled uniformly and not in the
view. ThereforeB11 is distributed uniformly. The same applies to ρ since
Pp. W 0, W 1 are sampled uniformly and therefore can be simulated as the
φ is uniform and not in the view.
B.3 Switching Network
We now formally prove that the oblivious switching network protocol in Figure 5
and repeated in Figure 15 is secure with respect to the Fswitch functionality of
Figure 16. In the proof we will replace calls to the Permutaiton and Duplication
protocols of ΠSwitch with their ideal functionalities (Figure 12, 14).
Theorem 3. Protocol ΠSwitch of Figure 15 securely realized the ideal functionality
Fswitch of Figure 16 given at most one party is corrupted in the semi-honest model.
39
1. Pp samples an injection π1
:
[m] → [n] s.t.
Parameters: 3 parties denoted as Pp, Ps and Pr. Elements are strings in Σ := {0, 1}σ.
An input, output vector size of n, m.
for i ∈ image(π) and k =
|preimage(π, i)|, ∃j where π1(j) = i and {π1(j + 1), ..., π1(j + k)} ∩ image(π) = ∅.
[Switch] Upon the command (Switch, π,A0) from Pp and (Switch,A1) from Ps
where π : [m] → [n] andA0,A1 ∈ Σn.
Pp sends (Permute, π1,A0) to FPermute and Ps sends (Permute,A1). Pp
receivesB0 ∈ Σm in response and Pr receivesB1 ∈ Σm.
send (Duplicate, π2,B0) and (Duplicate,B1) to FDuplicate. As a result Pp
obtainsC0 ∈ Σm from FDuplicate and Ps obtainsC1 ∈ Σm.
sends (Permute, π3,C0) to FPermute and Ps sends (Permute,C1). Pp receives
S ∈ Σm in response. Pp and Pr respectively receives and outputsA(cid:48)0,A(cid:48)1 ∈ Σm.
3. Pp computes the permutation π3 : [m] → [m] such that for i ∈ image(π) and
k = |preimage(π, i)|, {π3((cid:96)) : (cid:96) ∈ preimage(π, i)} = {j, ..., j+k} where i = π1(j). Pp
2. Pp deﬁnes π2 : [m] → [m] s.t.
for i ∈ image(π) and k := |preimage(π, i)| and
j where π1(j) = i, then π2(j) = ... = π2(j + k) = j. Pp and Pr respectively
Figure 15: The Oblivious Switching Network protocol Πswitch repeated.
Parameters: 3 parties denoted as the Pp, Ps and Pr. Elements are strings in Σ := {0, 1}σ.
An input vector size of n and output size of m.
[Switch] Upon the command (switch, π,A0) from the Pp and (switch,A1) from
the Ps:
1. Interpret π : [m] → [n] and A ∈ Σn.
2. Compute A(cid:48) ∈ Σm s.t. ∀i ∈ [m], Aπ(i) = A(cid:48)
i.
3. GenerateA(cid:48) and sendA(cid:48)0 to Pp andA(cid:48)1 to Pr.
Figure 16: The Oblivious Switching Network ideal functionality Fswitch repeated.
40
Proof. Correctness follows from the ﬁrst oblivious permutation call rearranges the
input vector such that each output item which appears k times is followed by k − 1
items which do not appear in the output. The duplication network then copies each
of these output items into the next k − 1 position. The ﬁnal permutation places
these items in the ﬁnal order.
With respect to simulation, the transcript of each party contains their transcripts
of three subprotocols: Permute, Shared-Duplicate and Shared-Permute. By Theo-
rem 1 the Permute subprotocol transcript can be simulated. Similarly, Theorem 1,2
also imply that the other two transcripts can be simulated. Therefore this implies
that the overall protocol can be simulated given that no other communication is
performed.
B.4 Join Protocol
Theorem 4. Protocol Πjoin of Figure 6 securely realized the ideal functionality Fjoin
of Figure 7 given at most one party is corrupted in the semi-honest FPermute,FSwitch,Fencode-
hybrid model with statistical security parameters λ.
Proof. First we demonstrate the correctness of the protocol. Recall that the set of
non-join keys {(XJ1||...||XJl)[i] | i ∈ [n]} are all distinct. The same holds true for
the Y table. As such, P0 receives n uniformly random values from Fencode. As
discussed in 3.2, given that these encodings are of length at least λ + 2 log2(n) bits,
then with probability 1 − 2−λ all the encodings are distinct.
Recall that P1 then constructs a cuckoo hash table using the encodings Ey. Given
that cuckoo hash table is parameterized as described in [DRRT18], this succeeds with
overwhelming probability, i.e. 1 − 2−λ.
The correctness of the rest of the protocol is straight forward. The shared table
(cid:74)Y(cid:75) are permuted to form a shared cuckoo hash table(cid:74)T(cid:75). Based on the encodings
Ex, the shares in the table T are mapped to the corresponding row of X. It is easy
to verify that if Y has a matching row then it will have been mapped. Finally, Fmpc
is used to compute the circuit which constructs the output table.
With respect to simulation, consider the following cases:
1. Corrupt P0: The transcript of P0 contains the encodings Ex, the output(cid:98)Y l0
from FSwitch, and the output of Fmpc. Given that the inputs to Fencode are
either set to or all distinct values, the output Ex is uniformly distributed and
therefore can be sample as such by the simulator. Similarly, the output of
FSwitch,Fmpc are both uniform.
2. Corrupt P1: The transcript of P1 contains the encodings Ey, the output(cid:98)T1
from FPermute, the output(cid:98)Y l1 from FSwitch, and the output of Fmpc. All
of these are distributed uniformly. The simulation of this transcript follows
the same as that of P0.
41
3. Corrupt P2: The transcript of P2 contains the output (cid:98)T0 from FPermute,
the output (cid:98)Y l0 from FSwitch, and the output of Fmpc. All of these are
distributed uniformly. The simulation of this transcript follows the same as
that of P0.
42