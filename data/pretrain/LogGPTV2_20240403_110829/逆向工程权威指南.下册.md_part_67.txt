在这个文件中，所有的不常用函数都位于DLL文件的尾部。这部分不常用函数都被IntelC++编译器
打上了VInfreq前级。例如，我们看到函数尾部的部分代码用于记录log文件（大概用于错误、警告和异常
处理）.因为Oracle开发人员在试运行期间收集统计信息时，它的执行概率较低（甚至没被执行过），所以
它们被标注上了_VInfreq前缓。最终，这个日志基本块把控制流返回给位于“热门地区”的函数代码。
在 Linux ELF 环境下，Intel C++编译器会在ELF文件里通过.hot/.unlikely 标记“热门”/“冷门"
基本块。
以逆向工程的角度来看，这些信息可用来辨别函数的核心部分和异常处理部分。
---
## Page 391
第十一部分
推荐阅读
---
## Page 393
第96章参考书籍
96.1windows
Mark E. Russinovich, David A. Solomon  Alex lonescu 合著的 (Windows Intemals: Including Windows
Server 2008 and Windows Vista, Fifth Edition) 2009,
96.2C/C++
(ISO/IEC 14882:2011 (C++ 1I standard)。
此外，读者可参见http:/go.yurichev.com/17275（2013）。
96.3x86/x86-64
Intel 出版的 《Intel 64 and IA-32 Architectures Software Developer’s Manual Combined Volumes3, 其中9
1，2A，2B，2C，3A，3B和3C章。本书作者将其收录为 http:/go.yurichev.com/17283（2013）。
AMD 出版的《AMD64 Architecture Programmer’s Manual》。本书作者将其收录为 http:/go.yurichev
com/17284 (2013)。
96.4ARM
请参见本书作者收集的ARM手册：htp:/go.yurichev.com/17024
96.5加密学
Bruce Schneier 提写的 《Applied Cryptography: Protocols, Algorithms, and Source Code in C3 ( 1994 年),
---
## Page 394
第97章博客
97.1Windows平台
●微软: Raymond Chen (http:/blogs.msdn.com/b/oldnewthing/)
---
## Page 395
第98章其他内容
reddit.com有两个非常出色的逆向工程相关板块，请参见：
● Reverse Engineering (http:/www.reddit.com/r/ReverseEngineering/).
●REMath逆向工程与数学的综合板块（http:/www.reddi.com/rremath）。
Stack Exchange 网站同样有一个著名的逆向工程板块：
● http://reverseengineering,.stackexchange.com/,
FreeNode（IRC）的#re 频道是专门讨论逆向工程的主题聊天室。
---
## Page 397
第十二部分
练习题
除非文中有单独的提问，否则本卷题目的默认问题都是：
·请用一句话描述这个程序的功能。
请把这个函数还原为C/C++语言的源程序。
在解答题目时，您可以通过Google等搜索引擎查找线索。但是，不借助搜索引擎的乐趣会更多一些。
另外，您还可以在本书的附录里查找相关提示。
---
## Page 399
第99章
初等难度练习题
这种难度的题目通常可以直接心算。
99.1练习题1.4
下列程序使用了密码保护机制，请找到程序指定的密码。
喜欢举一反三的读者，还可以修改可执行程序来改变程序的密码。在修改密码的时候，建议您同时调
整密码的长度，并摸索最短密码到底可以有多短。
此外，单独一个字符串就可以令程序崩溃。请创建这种字符串。
●Win32 (go.yurichev.com/17166)。
●Linux x86 (go.yurichev.com/17167)。
●Mac OS X (go.yurichev.com/17168),
●MIPS (go.yurichev.com/17169)。
---
## Page 400
第100章
中等难度练习题
要解答这个难度的题目，您可能会用到文本编辑器或者纸笔。
100.1
练习题2.1
100.1.1Optimizing MSVC 2010 x86
_rea1e3fe00000o0o Do 03feooo0cooooooo0x
_rea183f50624dd2f1a9fc Do 03f50624dd2f1a9fcr
.95-8
91 =2C1A2
f1 P9OC
x$ = 16
f1d
f1d
QWORD PTR _rea1e3f506246s2f1a9fc
[dsa]sx" x1e t80x0
f1d
f1d
[dsa] 5" x34 80M0
QWORD PTR
_rea183fe0000000000000
$LN29f1:
fmu1
f1d
ST(0), ST (1)
ST (0)
fsub
ST(0)。 ST (4)
cal.1
_fto12_sse
cdq
KOE
sub
eax,
eax, edx
edx
fi1d
mOv
DMORD PTR tv132[esp-4], eax
PTR tv132[esp-4]
fconp
ST(3)
test
fnstsw
ax
ah, 5
AEOHS
$L8198f1
fd1v
ST (01, ST(1)
(E)&S
faddp
ST(1).ST(0)
ST (01, ST(1)
1176687
Jnp
fstp
ST (3)
fstp
fstp
ST (1)
(0)LS
f1 ENDF
ret
白
_real83ff000
DQ 03Ef000
f2 PROC
8 - Sx
sub
f1d
QWORD PTB _x$ [esp-4]
esp, 16
[e+dse] 834 08080
fstp
ca11
[ds+]824 080x]
f1
---
## Page 401
第100章中等难度练习题
877
add
esp, 16
f2 E30P
102
100.1.2 Optimizing MSVC 2012 x64
_reale3fe000000o0000oo DQ 03fe0000000000000r
_rea193f50624dd2f1a9fc DQ 03r50624d2r1a9fcr
_rea1e3ff000000000000o DQ 03ft0000000000000r
x - 8
FR0C
novsdx
xmm2, QW0R0 PTR _rea103ff0000000000000
novsdx
xmm5,
QWORD PTR
_rea1e3f50624dd2f1a9fc
movsdx
xmm4,
QWORD PTR __reale3fe0000000000000
movapd
npad
xmm3,
XHB0
SLL4ef:
4
movapd xnn1, xnn2
mu1sd
xnm1,
pegns
xnn1,
xnm2
cvttsd2si eax, xmn
xne3
edq
xor
eax, edx
ub
eax,
xnn0, eax
edx
movd
cvtdq2pd xmm0, xmn0
conisd
Ja
SHORT
xnm5,
$LN188f
xmm0
rovapd
PIATP
xnm0,
xmm0,
XT13
1ddsd
xmm0,
Kmm2
tovapd
xrn2,
Knn2
mulsd
xrn2,
XRnH
xnn0
siN1eef:
jnp
SHORT $LL48f
novapd
ret
xmm0, xmm2
ENDP
100.2
练习题2.4
下面这道题日摘自MSVC2010，是标准的库函数。
100.2.1Optimizing MSVC 2010
PUBLIC
_TEXT
SEGMENT
_f
arg1s - 8
1size=4
_arg2$ - 12
1size*4
push
19OC
esi
esi,
DWORD PTR _arg1$[esp]
Pusb
edi
nov
BYTE PTR [edi], 0
edi,
DWORD PTR _arg2$ [esp+4]
cnp
nov
eax, es1
nov
push
d1, BYTE PTR [esi]
test
dl, d1
ebx
Je
SHORT $LN48f
---
## Page 402
878
逆向工程权威指南（下册）
npad
sub
esi, edi
$LL59f:
6 ; a1ign 
next label
nov
ecx, edi
SHORT SLN28f
d1, d1
$LL3ef:
Je
test
nov
d1, BYTE PTR [ecx]
d1,d1
SHORT SLNL49f
novsx
edx, d1
ebx,
BYTE PTR [esi+ecx]
novax
sub
SHORT SLN28
ebx, edx
inc
jne
BYTE PTR [esi+ecx], b]
ecx
jne
cmp
$L828f:
SHORT SLL38f
cnp
BYTE PTR [ecx], 0
je
d1, BYTE PTR [eax+1]
SHORT $L&148f
Inc
nov
inc
eax
test
esi
d1, d1
jne
SHORT $IL58f
xor
eax, eax
pop
edi
ebx
pop
pop
ret
0
es1
_TEXT
ENDP
ENDS
END
100.2.2
GCC 4.4.1
publlc f
proc near
var_C
g0- 11d p20xp =
var_8
- dvord ptr -4
8- 11d p2oxp =
var_4
arg_0
= dvord ptr
8
arg_4
31d p3oxp
OCh
push
ebp, esp
ebp
sub
esp,10h
A08
eax, [ebp+arg_0]
mov
[ebp+var_4], eax
mov
eax, byte ptr [eax]
eax, [ebp+arg_4]
test
noV2x
al, a1
short 1oc_8048443
mov
short 1ocret_8049453
eax, [ebp+arg_0]
1oc_80483F4:
[ebp+var_8], eax
eax, [ebp+var_4]
mov
mov
e8x, [ebp+arg_4]
mov
[ebp+var_C], eax
short 1oc_804840A
---
## Page 403
事001贵
申等难度练习题
879
1oc_8048402:
add
add
↑′[8"zea+dqa]
[*["zeadqa]
_804840A:
mov
eax, byte ptr [eax]
eax, [ebp+var_8]
movzx
test
short 10c_8048428
al, a1
AOE
eax, byte ptr [eax]
eax, [ebp+var_C]
test
XZAOR
81, a1
jz
short 1oc_804842E
nov
eax, [ebp+var_B]
novzx
edx, byte ptr [eax]
nov
novzx
eax, byte ptr [eax]
e8x,
[ebp+var_C]
duo
d1, a1
2
short 1oc_8048402
1oc_8048428:
nov
eax, [ebp+var_C]
novEx
test
eax, byte ptr [eax]
 Jnz
al, a1
short 1ce_804843D
nov
esx, [ebp+var_4]
jp
short 1ocret_8048453
1oc_804843D:
add
[ebp+rar_4], 1
Jmp
short 1oc_8048444
loc_8048443:
nop
1oc_8048444;