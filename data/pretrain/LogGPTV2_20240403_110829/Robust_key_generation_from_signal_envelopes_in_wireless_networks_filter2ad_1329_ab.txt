nical challenges must be met: (i) information reconciliation
between the correlated random sources that are available to
the two transceivers, and (ii) ﬂattening of the key distribu-
tion for the purpose of extracting a high quality key. We in-
troduce two methods for key generation based on: (1) error-
correction and key-veriﬁcation-information, and (2) the new
primitive of fuzzy information reconciliators that we intro-
duce.
We note that no special or added hardware beyond thresh-
old detectors — which are already present in transceivers —
is required, and the nodes use cheap and common omnidi-
rectional antennae, and do not require smart antennae, or
arrays.
1.1 Related Work
There is no one-size-ﬁts-all key management scheme for
all wireless networks (refer to [7] for a detailed survey). The
proposed solutions depend on the network architecture, exis-
tence of trusted third parties, available resources on wireless
clients and the capabilities of adversaries.
In ad-hoc wireless networks
the general approach is to
equip each node with either (i) a master key, or (ii) a list of
keys (a key-chain), or (iii) keying materials; so that a pair of
wireless nodes can either ﬁnd a key in common, or generate
it.
In master key based solutions [29, 19], wireless nodes
are pre-distributed a master key. Two nodes ﬁrst exchange
random nonce or node ID and use the master key along with
where the two parties that wish to exchange a key have ac-
cess to two correlated random sources (the deep fade infor-
mation derived from the channel envelope) while the adver-
sary has only partial access to this source. Key agreement
with restricted adversaries has been studied theoretically in
the works of Maurer, [26], Maurer Wolf, [27] [22] under min-
imum entropy assumptions and speciﬁc restrictions imposed
on the correlation of the two sources (e.g. agreement with
high probability); non formal approaches appeared much
earlier [35] and [13]. Our work diﬀers from these previous
works since we are using the speciﬁcs of our setting and we
thus we need to error-correct as well as ﬂatten the key distri-
bution taking into account the speciﬁcs of our channel char-
acteristics. A diﬀerent line of works have studied other type
of resource-bounded adversaries in terms of memory is [1, 6]
(whereas the adversarial restriction in our case is knowledge
of correlated random source). Our primitive of secure fuzzy
information reconciliators is related (and inspired) from the
work of [14, 17]; it diﬀers from the notion of the fuzzy ex-
tractor as it is only requires to work for a speciﬁc error type
and metric (and thus it needs not the generality of a fuzzy
extractor).
Indeed the metrics of similarity considered in
[17] are not suitable for our methods as those are motivated
from biometric key generation (cf. [24, 25]) and do not apply
to our domain. The appropriate metrics for fuzzy extraction
in our domain resemble error vectors that are encountered
in the setting of shift-error correction systems, cf. [23], and
thus our “information reconciliation” strategy is suitable for
such error patterns and their corresponding metric.
2. SAMPLING THE RANDOM SOURCE
In our approach secret keys are generated periodically by
detecting deep fades in the data transmission between both
transceivers. Each transceiver samples its random source the
signal it receives and checks to see if each sample exceeds
a agreed-upon threshold for deep fades. Although signal
envelopes of fading channels may change due to interference,
the probability of detecting a false positive or missing a deep
fade is low for practical systems with reasonable average
SINR levels (we argue about this with simulation results in
section 4). Thus, we can utilize deep fades in the received
signal envelopes in Time Division Duplex (TDD) systems —
which distinguish uplink and downlink messages by using
diﬀerent time slots — to extract some correlated random
variables at the two transceivers.
2.1 Background: Fading channels and
reciprocity
We present a brief overview on the reciprocity and channel
fading. Fading is caused by multi-path propagation and its
variation is caused by the mobility of one or both the trans-
mitting and receiving nodes (or their environment). The
randomness in the signal’s envelope is caused by path loss
(due to the distance between the nodes), knife-edge diﬀrac-
tion (often caused by the corner of a building), shadowing
loss (by obstructions), and fading loss (due to the multipath
described above). Usually some (or many) of these causes
are time-varying; more so when the network nodes them-
selves are mobile.
The moving speed of the nodes causes a doppler frequency
shift and the signal power spectrum spreads over the fre-
quency domain. With a moving speed of V and a signal
wavelength λ, the doppler frequency is fd = V
λ .
16πfd
The doppler shift results in what is called a time-selective
channel. This time-selective property is approximated by
the coherence time, Tc = 9
.
The coherence time is the time duration over which a re-
ceived signal’s amplitude and phase are predictable. The
channel impulse response is invariant during the coherence
time. If the symbol time of the received signal is smaller than
coherence time, then the channel is called time-invariant.
The coherence time is used to deﬁne the channel fading char-
acteristics in the time domain.
2.2 Thresholding
The two transceivers will use the channel fading infor-
mation to extract a bit stream (that will later be used for
key generation). The bit stream is generated based on a
threshold that is set by both sides of the wireless link. The
statistics of the generated bit stream and consequently the
generated key depends on this threshold as well as the trans-
mit power and the attenuation in the link. To determine this
threshold an automatic gain control (AGC) mechanism can
be used so that the statistics of the generated key is inde-
pendent of the transmit power and the link attenuation.
The occurrence of a fade and its duration is a random
process. Once the threshold is set, the average fade duration
and level crossing rates depend on the channel statistics [5].
For a Rayleigh fading channel it is shown that the mean fade
duration and the level crossing rates are given as follows:
¯τ (R) =
eρ2 − 1
√
2π
ρfm
Rrms
where ρ = R
and fm is the maximum Doppler frequency,
R is the threshold, and Rrms is the RMS value of the re-
ceived signal. The rate of occurrence of fades (signal crossing
threshold R ) is given by
√
N (R) =
−ρ2
2πfmρe
Consider the scenario where node A transmits its signal
to node B while receiver C (an adversary) is listening to the
same broadcast. If C is more than a wavelength away from
B, then the occurrences of deep fades at B and C are inde-
pendent. Therefore, the adversary cannot guess the exact
moment of deep fade occurrences or their duration.
2.3 Deep Fades to Bit Vectors
The next step after selecting a fade crossing threshold for
the signal envelope is to compare the received signal enve-
lope over each time slot with said threshold. If the envelope
of the received signal is below the threshold, which means
a deep fade occurred, we set a bit to 1 for this time slot.
Conversely, if the envelope of received signal is above the
threshold, which means no deep fade happened over this
time slot, we set a bit to 0 for this time slot. After a period
of time, a bit stream from each downlink and uplink chan-
nel is obtained to construct the bit vectors (BV). The bit
vectors from the downlink and from the uplink channels are
quite similar because they receive signals with similar char-
acteristics due to channel reciprocity. Although the downlink
node and uplink node access the channel in diﬀerent time
slots, channel reciprocity results in similar channel response
for both as long as the duration of each time slot is much
smaller than the channel coherence time.
One important innovation of our system is that the key
generation circuit passes the received signal through a very-
narrow-band ﬁlter for a narrow-band system, or through a
bank of several very-narrow-band ﬁlters if the channel is
frequency selective. In the former case, many narrow-band
interferers are likely to be ﬁltered out entirely. This is a
very economical way for both cases to reduce the eﬀect of
interference (or even an adversary’s jamming signal).
2.4 The Random Source Characteristics
Given the above it follows that the two transceivers will be
capable of retrieving two bitstrings that will have a number
of “runs” (sequences of 1’s) corresponding to the deep fades
they experienced in their signal envelope.
The bitstrings would be correlated due to the reciprocity
principle but they will also have a number of discrepancies.
For example, there will be a discrepancy at the beginning
or the end of each deep fade if the deep fade lasts over a
number of time slots. Another reason for bit discrepancy is
because the stream in the downlink may be a slightly shifted
version of the one in the uplink. Yet another reason for dis-
crepancy is to have one of the two transceivers believing that
aˆEcertain deep fade occurred over some time slots where the
other transceiver has no such information (such discrepancy
is due to chattering and/or other local noise conditions).
We will deal with such discrepancies in two diﬀerent ways:
we will apply error-correction (or information reconciliation
techniques) to correct shift type of errors; chattering on the
other hand, will be dealt with ﬁltering. The adversary in all
cases is assumed to have the information on the number of
deep fades that have occurred in a certain time-frame but
he will not be privy to the locations of such fades.
3. KEY GENERATION
Let A and B be the two parties that wish to generate a
key; we abstract the problem as follows. The two parties
have access to two correlated random sources RA and RB
over {0, 1}n; in addition to the two parties, we also assume
the existence of an adversary that may eavesdrop or even
interfere with the random sources RA and RB. Whenever A
and B sample their random sources, RA and RB, they obtain
two bitstrings ρA and ρB respectively. Moreover, the adver-
sary obtains a bitstring ρC . The triple of random variables
(ρA, ρB, ρC ) is distributed according to Env, a joint distribu-
tion that is based on the properties of the channel as well as
assumptions about the environment that aﬀect the wireless
transmission. In some settings the adversary will have no
information whatsoever about ρA, ρB; this translates to the
setting where the variable ρC is independent of the variables
ρA, ρB. In our approach we use tools such as randomness
extractors and the leftover hash lemma – we refer to [17] for
a comprehensive survey. We brieﬂy recall below the notion
of a (randomness) extractor:
Definition 3.1. Randomness Extractor: a function Ext
is called a (n, m, l0, )-extractor if Ext is a mapping {0, 1}n×
R → {0, 1}l0 such that if ρ is any random variable satisfying
H∞(ρ) ≥ m it holds that
||hExt(ρ, τ ), τi − hρu, τi|| ≤ , where ρu is uniformly dis-
tributed over {0, 1}l0 and τ is uniformly distributed over R.
Alternatively, if ρ is a speciﬁc random variable and the func-
tion Ext satisﬁes the above property, we will say that Ext is
a hn, l0, i-extractor for ρ.
We next formally deﬁne our notion of a key exchange sys-
tem in our setting . We require three properties: (i) cor-
rectness, which ensures that both parties end up with the
same key with high probability, (ii) uniformity, which en-
sures that keys’ distribution are close to uniform, and (iii)
security, which ensures that no adversary can compute with
substantial probability an arbitrary chosen function of the
key given the transcript information.
Formally, a (n, l0, c, u, s)-key-generation-system is a pair
(KG, Env) where (1) Env is a product probability distribution
hρA, ρB, ρCi over {0, 1}n×{0, 1}n×{0, 1}n, (2) KG is a two-
party protocol that returns private output in {0, 1}l0 for
both players (that are polynomial-time bounded in n) and
(3) the following three properties are satisﬁed (note that
PPT stands for probabilistic polynomial time):
Definition 3.2. Correctness. If (ρA, ρB, ρC ) is a ran-
dom variable distributed according to Env, it holds that the
event that both players return the same output in the proto-
col KG is at least 1 − c. Note that correctness does not take
into account the random variable ρC .
Uniformity. If (ρA, ρB, ρC ) is distributed according to Env,
it holds that the statistical distance of the output key of
player A from the uniform distribution over {0, 1}l0 is at
most u.
Security. Given any PPT A there is a PPT A0 that satisﬁes
the following for any function f :
|Prob[A(t) = f (keyt)] − Prob[A0
(1n) = f (keyt)]| ≤ s
where t is distributed over the KG transcripts and keyt is the
key of player A that corresponds to transcript t.
We note that the deﬁnition above is in a passive sense (the
adversary is eavesdropping honest interactions); this can be
generalized to active security but we defer such extension
for an upcoming work. The deﬁnition of security, parallels
“entropic-security” as deﬁned in [15]. Also note that the
requirements of uniformity and security can be modeled to-
gether but for clarity they are separated in the formalization
above.
3.1 Key Generation based on Key
Veriﬁcation Information
In this section we will present a ﬁrst method for design-
ing a key-generation system. Recall our main observation
that the diﬀerences between the random sources, RA and
RB, that are observed between the two legitimate players
will predominantly happen at the beginning and(or) at the
end of some deep fades, and that such fades occur randomly
over a period of time.
In this section we exploit the fact
that, based on some key-veriﬁcation information released
by one of the two players, the other player may correct such
diﬀerences. Without loss of generality, let us diﬀerentiate
the two players A and B calling A the sender and B the re-
ceiver. The approach is as follows: suppose that hρA, ρB, ρCi
is distributed according to Env; now assume that ρA is the
“correct” bitstring2, i.e., the sender has the correct bitstring,
and the receiver has to correct its own bitstring ρB to match
ρA.
2We use quotation marks because, in reality, neither player
may have a bit vector reﬂecting the true physical channel
realization. Yet this does not concern us, since we only care
that both players have matching keys, not that said key
should ﬂawlessly reﬂect the channel.
Given any bitstring, a run is a sequence of consecutive
of 1’s within the bitstring. Based on the mapping of deep
fades into sequences of 1’s, it is clear that ρA contains a
run for each deep fade that occurred in the envelope of the
wireless transmission. Suppose the length of each ρA and ρB
bitstring is n, the number of deep fades is t, and each fade
extended for a number of kτ time slots (τ = 1,··· , t), i.e.,
each fade resulted in a kτ -bit long run within the string ρA.
To simplify the analysis of this section, we assume that in n
time-intervals there exist t deep fades, each one of length k;
note that in reality the parameter k varies for each fade (cf.