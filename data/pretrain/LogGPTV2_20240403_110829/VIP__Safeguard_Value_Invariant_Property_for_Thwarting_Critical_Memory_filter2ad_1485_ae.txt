# VIP Protection Performance and Security Evaluation

## 1. Introduction
This document evaluates the performance overhead and security effectiveness of three VIP (Virtual Integrity Protection) mechanisms: heap metadata protection, CFI (Control-Flow Integrity) and VTPtr (Virtual Table Pointer) protection, and CPI (Code-Pointer Integrity) protection. The evaluation is conducted using SPEC CPU2006 benchmarks, NGINX web server, and PostgreSQL database server.

## 2. Performance Overhead

### 2.1 SPEC CPU2006 Benchmarks
The performance overhead of HyperSpace for SPEC CPU2006 benchmarks is as follows:
- **Heap Metadata Protection**: 1.33% average overhead.
- **VIP-CFI+VTPtr**: 0.86% average overhead.
- **VIP-CPI**: 5.53% average overhead.

#### 2.1.1 Heap Metadata Protection
- **Overall Overhead**: 1.33%
- **Benchmarks with >5% Overhead**:
  - 471.omnetpp: 534 million malloc/free calls.
  - 400.perlbench, 447.dealII, and 483.xalancbmk: Millions of malloc/free calls.
- **Consistency with Prior Work**: Results are consistent with previous studies [15].

#### 2.1.2 VIP-CFI+VTPtr
- **Overall Overhead**: 0.86%
- **Benchmarks with >3% Overhead**:
  - 471.omnetpp and 483.xalancbmk: Frequent virtual function calls.
- **Performance Improvement**: Some benchmarks show a 1-2% improvement due to SafeStack improving locality.

#### 2.1.3 VIP-CPI
- **Overall Overhead**: 6.18%
- **Benchmarks with High Overhead**:
  - 400.perlbench: Frequent use of sensitive global variables.
  - 453.povray: Abundant function pointers in struct Method_Struct.
- **Comparison with Other Techniques**:
  - Code-Pointer Integrity [45]: 8.4% average, 44% worst-case.
  - ùúáCFI [36]: 7.88% average, 49% worst-case.
  - ERIM [78] and IMIX [27]: 3.2√ó and 28.5√ó higher overhead than VIP-CPI.

### 2.2 Real-World Applications
#### 2.2.1 NGINX
- **Configuration**: Default, max 1024 connections per processor.
- **Benchmarking Tool**: wrk [30].
- **Overhead**:
  - Heap Metadata: 1.38%
  - CFI: 0.44%
  - CPI: 1.05%
- **Throughput**:
  - Baseline: 2.35K req/sec.
  - Protected: 2.32K, 2.33K, 2.32K req/sec, respectively.
- **SSL Enabled**:
  - Overhead: 1.42%, 0.47%, 1.09%.
  - Throughput: 2.06K, 2.08K, 2.07K req/sec, respectively.

#### 2.2.2 PostgreSQL
- **Configuration**: Default, max 100 connections.
- **Benchmarking Tool**: pgbench [76].
- **Overhead**:
  - Heap Metadata: 1.30%
  - CFI: 1.96%
  - CPI: 2.04%
- **Transactions-per-Second**:
  - Baseline: 1719 TPS.
  - Protected: 1696, 1685, 1683 TPS, respectively.

## 3. Security Effectiveness

### 3.1 Real-World Exploits
#### 3.1.1 CVE-2016-10190 (ffmpeg)
- **Exploit Type**: Heap-based buffer overflow.
- **Detection**: VIP-CFI/CPI detects and halts execution by asserting the corruption of a function pointer in an AVIOContext object.

#### 3.1.2 CVE-2015-8668 (libtiff)
- **Exploit Type**: Heap-based buffer overflow.
- **Detection**: VIP-CFI/CPI detects the corrupted function pointer before use.

#### 3.1.3 CVE-2014-1912 (python2.7)
- **Exploit Type**: Buffer overflow.
- **Detection**: VIP-CFI/CPI blocks the exploit by detecting the corruption of the function pointer before use.

### 3.2 Synthesized Exploits
#### 3.2.1 CFIXX C++ Test Suite
- **Exploits**:
  - VTPtr hijacking (FakeVT, FakeVT-sig, VTxchg, VTxchg-hier).
  - COOP attack.
- **Modifications**: Corrupted VTPtr using heap-based overflow.
- **Detection**: VIP-VTPtr detects all exploits and prevents COOP attacks by checking VTPtr initialization.

#### 3.2.2 Heap Exploit
- **Exploit**: Overwrites inline metadata of allocated heap memory.
- **Detection**: HyperSpace thwarts the attack by detecting metadata corruption upon free.

## 4. Performance Optimization Analysis

### 4.1 Impact of Optimization Techniques
- **Runtime Silent Store Elimination (SLNT)**: 6.6% performance improvement on average.
- **Coalescing Permission Changes within a Basic Block (CBB)**: 2.17% performance improvement on average.
- **Coalescing Permission Changes within a Function (CFN)**: 1.4% performance improvement on average.

### 4.2 Detailed Analysis
- **SLNT**: Reduces costly wrpkru instructions by eliminating unnecessary, repetitive modifications.
- **CBB**: Minimizes the number of permission changes within a basic block.
- **CFN**: Extends coalescing to function scope, further reducing permission changes.

## 5. Conclusion
HyperSpace imposes negligible performance overhead while providing robust protection against various types of memory corruption vulnerabilities. The optimization techniques significantly improve performance, making it a viable solution for real-world applications.