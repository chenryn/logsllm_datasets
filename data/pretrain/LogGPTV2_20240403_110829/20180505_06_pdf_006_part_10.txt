separately from other partitions, or collectively as one object. From an application perspective, partitions are
transparent - partitioned tables act the same as non-partitioned tables allowing your applications to access a
partitioned table using unmodified SQL statements. Table partitioning provides several benefits:
• Performance improvement
Table partitions help improve query performance by accessing a subset of a partitions instead of
scanning a larger set of data. Additional performance improvements can also be achieved when using
partitions and parallel query execution for DML and DDL operations.
• Data Management
Table partitions facilitate easier data management operations (such as data migration), index
management (creation, dropping, or rebuilding indexes), and backup/recovery. These operations are
also referred to as “Information Lifecycle Management” (ILM) activities.
• Maintenance Operations
Table partitions can significantly reduce downtime caused by table maintenance operations.
Oracle basic Table Partitioning methods
• Hash Table Partitioning
When a partition key is specified (for example, a table column with a number data type), Oracle applies
a hashing algorithm to evenly distribute the data (records) among all defined partitions (partitions have
approximately the same size).
Example
Create a hash-partitioned Table:
SQL> CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMBER NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR2(500),
ERROR_CODE VARCHAR2(10))
PARTITION BY HASH (ERROR_CODE)
PARTITIONS 3
STORE IN (TB1, TB2, TB3);
111
• List Table Partitioning
You can specify a list of discrete values for the table partitioning key in the description of each
partition. This type of table partitioning enables control over partition organization using explicit
values. For example, partition “events” by error code values.
Example
Create a list-partition table:
SQL> CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMBER NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR2(500),
ERROR_CODE VARCHAR2(10))
PARTITION BY LIST (ERROR_CODE)
(PARTITION warning VALUES ('err1', 'err2', 'err3') TABLESPACE TB1,
PARTITION critical VALUES ('err4', 'err5', 'err6') TABLESPACE TB2);
• Range Table Partitioning
Partition a table based on a range of values. The Oracle database assigns rows to table partitions based
on column values falling within a given range. Range table partitioning is one of the most frequently
used type of partitioning in the Oracle database, primarily with date values. Range table partitioning
can also be implemented with numeric ranges (1-10000, 10001- 20000…).
Example
Create a range-partitioned table:
SQL> CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMBER NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR2(500))
PARTITION BY RANGE (EVENT_DATE)
(PARTITION EVENT_DATE VALUES LESS THAN (TO_DATE('01/01/2015',
'DD/MM/YYYY')) TABLESPACE TB1,
PARTITION EVENT_DATE VALUES LESS THAN (TO_DATE('01/01/2016',
'DD/MM/YYYY')) TABLESPACE TB2,
PARTITION EVENT_DATE VALUES LESS THAN (TO_DATE('01/01/2017',
'DD/MM/YYYY')) TABLESPACE TB3);
Composite Table Partitioning
With composite partitioning, a table can be partitioned by one data distribution method and then each
partition can be further subdivided into sub-partitions using the same, or different, data distribution
method(s). For example:
• Composite list-range partitioning
• Composite list-list partitioning
• Composite range-hash partitioning
112
Partitioning Extensions
Oracle provides additional partitioning strategies that enhance the capabilities of basic partitioning. These
partitioning strategies are:
• Manageability extensions
Interval partitioning
o
Partition advisor
o
• Partitioning key extensions
Reference partitioning
o
Virtual column-based partitioning
o
Examples
Split and exchange partitions:
• Split Partitions
The statement can be used to redistribute the contents of one partition or sub-
SPLIT PARTITION
partition into multiple partitions or sub-partitions:
SQL> ALTER TABLE SPLIT PARTITION p0 INTO
(PARTITION P01 VALUES LESS THAN (100),
PARTITION p02);
• Exchange Partitions
The statement is useful to exchange table partitions in, or out, of a
EXCHANGE PARTITION
partitioned table.
SQL> ALTER TABLE orders
EXCHANGE PARTITION p_ord3 WITH TABLE orders_year_2016;
Sub-Partitioning Tables
Sub-Partitions are created within partitions to further split the parent partition:
SQL> PARTITION BY RANGE(department_id)
SUBPARTITION BY HASH(last_name)
SUBPARTITION TEMPLATE
(SUBPARTITION a TABLESPACE ts1,
SUBPARTITION b TABLESPACE ts2,
SUBPARTITION c TABLESPACE ts3,
SUBPARTITION d TABLESPACE ts4
)
(PARTITION p1 VALUES LESS THAN (1000),
PARTITION p2 VALUES LESS THAN (2000),
PARTITION p3 VALUES LESS THAN (MAXVALUE)
)
113
For additional information on Oracle Partitioning:
https://docs.oracle.com/cd/E11882_01/server.112/e25523/partition.htm
https://docs.oracle.com/database/121/VLDBG/GUID-C121EA1B-2725-4464-B2C9-EEDE0C3C95AB.htm
https://docs.oracle.com/database/121/VLDBG/GUID-01C14320-0D7B-48BE-A5AD-003DDA761277.htm
https://docs.oracle.com/database/121/VLDBG/GUID-E08650B4-06B1-43F9-91B0-FBF685A3B848.htm#VLDBG1156
Automatic List Partitioning (Oracle 12c only)
Automatic-list partitioning is an enhancement of Oracle list partitioning. Automatic-list partitioning enables
the automatic creation of new partitions for new values inserted into the list-partitioned table. An automatic
list-partitioned table is created with only one partition. The database creates the additional table partitions
automatically.
Example
Create an automatic list-partitioned table:
SQL> CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMBER NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR2(500),
ERROR_CODE VARCHAR2(10))
PARTITION BY LIST (ERROR_CODE) AUTOMATIC
(PARTITION warning VALUES ('err1', 'err2', 'err3'))
For additional information on Oracle Automatic List Partitioning:
http://www.oracle.com/technetwork/database/options/partitioning/partitioning-wp-12c-1896137.pdf
114
Migration to: PostgreSQL Table Inheritance
[Back to TOC]
Overview
The table partitioning mechanism in PostgreSQL differs from Oracle. Partitioning in PostgreSQL is
implemented using “table inheritance”. Each table partition is represented by a child table referenced to a
single parent table. The parent table should be empty and is only used to represent the entire table data set
(as a metadata dictionary and as a query source).
Partitioning management operations are performed directly on the child tables. Querying is performed
directly on the parent table.
For additional information on PostgreSQL Table Inheritance, see:
https://www.postgresql.org/docs/9.6/static/ddl-inherit.html
Implementing List “Table Partitioning”
1. Create a parent table (“master table”) from which all child tables (“partitions”) will inherit.
2. Create child tables (which act similar to Table Partitions) that inherit from the parent table, the child
tables should have and identical structure to the parent table.
3. Create Indexes on each child table. Optionally, add constraints (for example, primary keys or check
constraints) to define allowed values in each table.
4. Create a database trigger to redirect data inserted into the parent table to the appropriate child table.
5. Ensure the PostgreSQL parameter is enabled and set to .
constraint_exclusion partition
This parameter insures that the queries are optimized for working with table partitions.
demo=# show constraint_exclusion;
constraint_exclusion
----------------------
partition
For additional information on PostgreSQL constraint_exclusion parameter:
https://www.postgresql.org/docs/9.6/static/runtime-config-query.html#GUC-CONSTRAINT-EXCLUSION
PostgreSQL 9.6 does not support “declarative partitioning” as well as several of the table partitioning features
available in Oracle. Alternatives, such as for replacing Oracle’s interval table partitioning, include using
application-centric methods using PL/pgSQL or other programing languages.
Notes:
• PostgreSQL 9.6 Table Partitioning does not support the creation of foreign keys on the parent table.
Alternative solutions include application-centric methods such as using triggers/functions.
• PostgreSQL 9.6 does not support sub-partitions and does not support and of table
SPLIT EXCHANGE
partitions.
115
Oracle versus PostgreSQL Partitioning Comparison Table
Oracle Table Partition Type Build-In PostgreSQL Support Link To Example
List Yes PostgreSQL List Partitioning
Range Yes PostgreSQL Range Partitioning
Hash No -
Composite Partitioning No -
Interval Partitioning No -
Partition Advisor No -
Reference Partitioning No -
Virtual Column Based Partitioning No -
Automatic List Partitioning No -
Sub Partitioning No -
Split / Exchange Partitions No -
For additional details:
https://www.postgresql.org/docs/9.6/static/ddl-partitioning.html
116
Example
Steps for creating a PostgreSQL “list-partitioned table”:
1. Create the parent table:
demo=# CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMERIC NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR(500),
ERROR_CODE VARCHAR(10));
2. Create child tables (“partitions”) with check constraints:
demo=# CREATE TABLE SYSTEM_LOGS_WARNING (
CHECK (ERROR_CODE IN('err1', 'err2', 'err3')))
INHERITS (SYSTEM_LOGS);
demo=# CREATE TABLE SYSTEM_LOGS_CRITICAL (
CHECK (ERROR_CODE IN('err4', 'err5', 'err6')))
INHERITS (SYSTEM_LOGS);
3. Create indexes on each of the child tables (“partitions”):
demo=# CREATE INDEX IDX_SYSTEM_LOGS_WARNING ON
SYSTEM_LOGS_WARNING(ERROR_CODE);
demo=# CREATE INDEX IDX_SYSTEM_LOGS_CRITICAL ON
SYSTEM_LOGS_CRITICAL(ERROR_CODE);
4. Create a function to redirect data inserted into the Parent Table:
demo=# CREATE OR REPLACE FUNCTION SYSTEM_LOGS_ERR_CODE_INS()
RETURNS TRIGGER AS
$$
BEGIN
IF (NEW.ERROR_CODE IN('err1', 'err2', 'err3')) THEN
INSERT INTO SYSTEM_LOGS_WARNING VALUES (NEW.*);
ELSIF (NEW.ERROR_CODE IN('err4', 'err5', 'err6')) THEN
INSERT INTO SYSTEM_LOGS_CRITICAL VALUES (NEW.*);
ELSE
RAISE EXCEPTION 'Value out of range, check
SYSTEM_LOGS_ERR_CODE_INS () Function!';
END IF;
RETURN NULL;
END;
$$
LANGUAGE plpgsql;
5. Attach the trigger function created above to log to the table:
demo=# CREATE TRIGGER SYSTEM_LOGS_ERR_TRIG
BEFORE INSERT ON SYSTEM_LOGS
FOR EACH ROW EXECUTE PROCEDURE SYSTEM_LOGS_ERR_CODE_INS();
117
6. Insert data directly into the parent table:
demo=# INSERT INTO SYSTEM_LOGS VALUES(1, '2015-05-15', 'a...', 'err1');
demo=# INSERT INTO SYSTEM_LOGS VALUES(2, '2016-06-16', 'b...', 'err3');
demo=# INSERT INTO SYSTEM_LOGS VALUES(3, '2017-07-17', 'c...', 'err6');
7. View results from across all the different child tables:
demo=# SELECT * FROM SYSTEM_LOGS;
event_no | event_date | event_str
----------+------------+-----------
1 | 2015-05-15 | a...
2 | 2016-06-16 | b...
3 | 2017-07-17 | c...
demo=# SELECT * FROM SYSTEM_LOGS_WARNING;
event_no | event_date | event_str | error_code
----------+------------+-----------+------------
1 | 2015-05-15 | a... | err1
2 | 2016-06-16 | b... | err3
demo=# SELECT * FROM SYSTEM_LOGS_CRITICAL;
event_no | event_date | event_str | error_code
----------+------------+-----------+------------
3 | 2017-07-17 | c... | err6
118
Example
Steps for creating a PostgreSQL “range-partitioned table”:
1. Create the parent table:
demo=# CREATE TABLE SYSTEM_LOGS
(EVENT_NO NUMERIC NOT NULL,
EVENT_DATE DATE NOT NULL,
EVENT_STR VARCHAR(500));
2. Create the child tables (“partitions”) with check constraints:
demo=# CREATE TABLE SYSTEM_LOGS_2015 (
CHECK (EVENT_DATE >= DATE '2015-01-01'
AND EVENT_DATE = DATE '2016-01-01'
AND EVENT_DATE = DATE '2017-01-01'
AND EVENT_DATE = DATE '2015-01-01' AND NEW.EVENT_DATE = DATE '2016-01-01' AND NEW.EVENT_DATE = DATE '2017-01-01' AND NEW.EVENT_DATE  CREATE GLOBAL TEMPORARY TABLE EMP_TEMP (
EMP_ID NUMBER PRIMARY KEY,
EMP_FULL_NAME VARCHAR2(60) NOT NULL,
AVG_SALARY NUMERIC NOT NULL)
ON COMMIT PRESERVE ROWS;
SQL> CREATE INDEX IDX_EMP_TEMP_FN ON EMP_TEMP(EMP_FULL_NAME);
SQL> INSERT INTO EMP_TEMP VALUES(1, 'John Smith', '5000');
SQL> COMMIT;
SQL> SELECT * FROM SCT.EMP_TEMP;
EMP_ID EMP_FULL_NAME AVG_SALARY
---------- -------------------- ----------
1 John Smith 5000
Create an Oracle Global Temporary Table (with ):
ON COMMIT DELETE ROWS
SQL> CREATE GLOBAL TEMPORARY TABLE EMP_TEMP (
EMP_ID NUMBER PRIMARY KEY,
EMP_FULL_NAME VARCHAR2(60) NOT NULL,
AVG_SALARY NUMERIC NOT NULL)
ON COMMIT DELETE ROWS;
SQL> INSERT INTO EMP_TEMP VALUES(1, 'John Smith', '5000');
SQL> COMMIT;
SQL> SELECT * FROM SCT.EMP_TEMP;
l t d
For additional details:
https://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_7002.htm#SQLRF01402
https://docs.oracle.com/database/121/SQLRF/statements_7002.htm
123
Migration to: PostgreSQL Temporary Tables
[Back to TOC]
Overview
PostgreSQL Temporary Tables share many similarities with Oracle Global Temporary Tables.
From a syntax perspective, PostgreSQL Temporary Tables are referred to as “Temporary Tables” (without
Oracle’s Global definition). The implementation is mostly identical.
In terms of differences, Oracle stores the temporary table structure (DDL) for repeated use – even after a
database restart – but does not store rows persistently. PostgreSQL implements temporary tables differently: