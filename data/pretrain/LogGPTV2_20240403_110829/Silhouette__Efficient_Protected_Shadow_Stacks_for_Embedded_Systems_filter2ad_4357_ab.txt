transformation modiﬁes the native code to save return
values on a shadow stack and to use the return value
stored in the shadow stack in return instructions.
2. Store Hardening: The store hardening pass modiﬁes all
store instructions, except those used in the shadow stack
instrumentation and Store-Exclusive instructions [12]
(see Section 5.2 for the reasons), to use variants that
check the unprivileged-mode permission bits.
3. CFI Transformation: The CFI transformation in-
struments indirect function calls and other computed
branches (aside from returns) to ensure that program ex-
ecution follows a pre-computed control-ﬂow graph. Con-
sequently, this instrumentation prevents the execution of
gadgets that could, for example, be used to manipulate
protected memory regions.
4. Privileged Code Scanner: The privileged code scan-
ner analyzes the native code prior to emitting the ﬁnal
executable to ensure that application code is free of priv-
ileged instructions that an adversary might seek to use
to disable Silhouette’s protections.
In addition to the above transformations, Silhouette em-
ploys mechanisms to prevent memory safety errors from dis-
abling the hardware features that Silhouette uses to provide
its security guarantees. In the context of ARMv7-M, it means
that the MPU cannot be reconﬁgured to allow unprivileged ac-
cesses to restricted memory regions. Also note that the HAL
library is not transformed with Silhouette as it may contain
I/O functions that need to write to memory-mapped I/O reg-
isters that are only accessible to privileged store instructions.
We also forbid inlining HAL functions into application code.
Moreover, Silhouette specially handles variable-length ar-
rays on the stack and alloca() calls with argument values
that cannot be statically determined by the compiler. For these
two types of memory allocation, Silhouette adopts the method
from SAFECode [31] and SVA [27] that promotes the allo-
cated data from stack to heap. As Section 7.1 explains, such
stack allocations (while rare in C code) can cause stack regis-
ter spills, endangering the integrity of the shadow stack.
5.1 Shadow Stack
In unprotected embedded systems, programs store return ad-
dresses on the stack, leaving return addresses open to corrup-
tion by an adversary. To mitigate such attacks, some compilers
transform code to use shadow stacks. A shadow stack [18]
is a second stack, stored in an isolated region of memory,
on which a program saves the return address. Only the code
that saves the return address should be able to write to the
shadow stack; it should be otherwise inaccessible to other
store instructions in the program. If the shadow stack cannot
be corrupted by memory safety errors, then return addresses
are not corrupted. Furthermore, if the function epilogue uses
the correct return address stored on the shadow stack, then
the function always returns to the correct dynamic call site.
Silhouette’s shadow stack transformation pass modiﬁes
each function’s prologue to save the return address on a
shadow stack and each function’s epilogue to use the shadow
stack return address on function return. A special case to
handle is setjmp/longjmp. setjmp saves the current execu-
tion context to a memory location speciﬁed by its argument,
and longjmp recovers the saved context from the speciﬁed
memory location as if the execution was just returned from
a previous call to setjmp. Using setjmp/longjmp, a pro-
gram is able to perform non-local indirect jumps that are
challenging to track by a shadow stack. As few programs use
setjmp/longjmp, we refer interested readers to Appendix A
1222    29th USENIX Security Symposium
USENIX Association
Native Code GeneratorShadow Stack TransformStore HardeningCFI Check InsertionHardened Object FilePrivileged Code ScannerLLVM IRLinkerHALHardened ExecutableInverted Sh. Stack TransformInverted CFI Check Insertionwhich discusses how Silhouette supports these two functions.
Once the transformation is complete, the program uses a
shadow stack, but the shadow stack is not protected. For that,
Silhouette employs the store hardening pass and the CFI pass.
5.2 Protection via Store Hardening
Silhouette leverages the MPU and the intra-address space
isolation mechanism described in Section 4 to efﬁciently pro-
tect the shadow stack. This protection is comprised of two
parts. First, during compilation, Silhouette’s store harden-
ing pass transforms all store instructions in application code
from privileged instructions to equivalent unprivileged store
instructions (STRT, STRHT, and STRBT). As discussed previ-
ously, these unprivileged variants always check the MPU’s
unprivileged-mode permission bits. Second, when loading
the program, Silhouette instrumentation conﬁgures the MPU
so that the shadow stack is readable and writeable in priv-
ileged mode but only readable in unprivileged mode. This
ensures that store instructions executed in unprivileged mode
and unprivileged stores (STRT, STRHT, and STRBT) executed
in privileged mode cannot modify values on the shadow stack.
Together, these mechanisms ensure shadow stack isolation,
even if the entire program is executed in privileged mode.
Store hardening transforms all stores within the application
code except for two cases. First, store hardening does not
transform stores used as part of Silhouette’s shadow stack in-
strumentation as they must execute as privileged instructions
so that they can write to the shadow stack. The shadow stack
pass marks all stores to the shadow stack with a special ﬂag,
making them easily identiﬁable. Second, store hardening can-
not transform atomic stores (Store-Exclusive [12]) because
they do not have unprivileged counterparts. Silhouette utilizes
Software Fault Isolation (SFI) [69] to prevent those stores
from writing to the shadow stack region.
As discussed in Section 3, Silhouette does not transform
the HAL code; thus, the stores in the HAL code are left
unmodiﬁed. This is because the HAL contains hardware I/O
and conﬁguration code that must be able to read and write
the System, Device, and Peripheral memory regions. To
prevent attackers from using privileged stores within the HAL
code, Silhouette employs CFI as Section 5.3 explains.
5.3 Forward Branch Control-Flow Integrity
Shadow stacks protect the integrity of function returns, but
memory safety attacks can still corrupt data used for forward-
edge control ﬂow branches, e.g., function pointers. If left
unchecked, these manipulations would allow an attacker to
redirect control ﬂow to anywhere in the program, making it
trivial for the attacker to corrupt the shadow stack with an
arbitrary value or to load a return address from an arbitrary
location. Consequently, Silhouette must restrict the possible
targets of forward-edges to ensure return address integrity.
There are two types of forward branches: indirect function
calls and forward indirect jumps. For the former, Silhouette
uses label-based CFI checks [1,17] to restrict the set of branch
targets and ensure that the remaining privileged store instruc-
tions cannot be leveraged by an attacker to corrupt the shadow
stack. Silhouette-protected systems use privileged store in-
structions only in the HAL library and in function prologues
to write the return address to the shadow stack. The HAL
library is compiled separately and has no CFI labels in its
code; even coarse-grained CFI ensures that no store instruc-
tions within the HAL library can be exploited via an indirect
call (direct calls to HAL library functions are permitted as
they do not require CFI label checks). For a function call,
ARM processors automatically put the return address in the
lr register. Silhouette’s shadow stack transformation pass
modiﬁes function prologues to store lr to the shadow stack.
Label-based CFI guarantees an indirect function call can only
jump to the beginning of a function, ensuring that attackers
cannot use the function prologue to write arbitrary values to
the shadow stack.
There are three constructs in C that may cause a compiler
to generate forward indirect jumps: indirect tail function calls,
large switch statements, and computed goto statements (“La-
bel as Values” in GNU’s nomenclature [36]). Silhouette’s CFI
forces indirect tail function calls to jump to the beginning of a
function. Restricting large switch statements and computed
goto statements is implementation-dependent. We explain
how Silhouette handles them in Section 6.3.
5.4 Privileged Code Scanner
As Silhouette executes all code within the processor’s priv-
ileged mode, Silhouette uses a code scanner to ensure the
application code is free of privileged instructions that could
be used by an attacker to disable Silhouette’s protections. If
the scanner detects such instructions, it presents a message to
the application developer warning that the security guarantees
of Silhouette could be violated by the use of such instructions.
It is the application developer’s decision whether to accept the
risk or modify the source code to avoid the use of privileged
instructions.
On ARMv7-M [12], there is only one privileged instruction
that must be removed: MSR (Move to Special register from
Register). One other, CPS (Change Processor State), must be
rendered safe through hardware conﬁguration. Speciﬁcally,
the MSR instruction can change special register values in ways
that can subvert Silhouette. For example, MPU protections
on the shadow stack could be bypassed by changing the stack
pointer registers (MSP or PSP on ARMv7-M) to move the
shadow stack to a memory region writeable by unprivileged
code. The CPS instruction can change the execution priority,
and the MPU will elide protection checks if the current ex-
ecution priority is less than 0 and the HFNMIENA bit in the
MPU Control Register (MPU_CTRL) is set to 0 [12]. However,
USENIX Association
29th USENIX Security Symposium    1223
Silhouette disables this feature by setting the HFNMIENA bit
to 1, rendering the CPS instruction safe. A third instruction,
MRS (Move to Register from Special register), can read special
registers [12] but cannot be used to compromise the integrity
of Silhouette.
Finally, as Silhouette provides control-ﬂow integrity, an at-
tacker cannot use misaligned instruction sequences to execute
unintended instructions [1]. Therefore, a linear scan of the
assembly is sufﬁcient for ensuring that the application code
is free of dangerous privileged instructions.
Improvements with Silhouette-Invert
5.5
Swapping a privileged store with a single equivalent unprivi-
leged store introduces no overhead. However, as Section 6.2
explains, Silhouette must add additional instructions when
converting some privileged stores to unprivileged stores. For
example, transforming ﬂoating-point stores and stores with a
large offset operand adds time and space overhead.
However, we can minimize store hardening overhead by
inverting the roles of hardware privilege modes. Speciﬁcally,
if we can invert the permissions of the shadow stack region to
disallow writes from privileged stores but allow writes from
unprivileged stores, then we can leave the majority of store in-
structions unmodiﬁed. In other words, this design would allow
all stores (except shadow stack writes) to remain unmodiﬁed,
thereby incurring negligible space and time overhead for most
programs. We refer to this variant as Silhouette-Invert.
Silhouette-Invert is similar in design to ILDI [22] which
uses the Privileged Access Never (PAN) feature on ARMv8-
A [8, 14] to prevent privileged stores from writing to user-
space memory. Unfortunately, the ARMv7-M architecture
lacks PAN support and provides no way of conﬁguring mem-
ory to be writeable by unprivileged stores but inaccessible to
privileged stores [12]. We therefore reason about the potential
performance beneﬁts using a prototype that mimics the over-
head of a real Silhouette-Invert implementation. Section 6.5
discusses two potential hardware extensions to ARMv7-M to
enable development of Silhouette-Invert.
5.6 Hardware Conﬁguration Protection
As all code on our target system resides within a single ad-
dress space and, further, as Silhouette executes application
code in privileged mode to avoid costly context switching,
we must use both the code transformations described above
and load-time hardware conﬁgurations to ensure that mem-
ory safety errors cannot be used to reconﬁgure privileged
hardware state. For example, such state would include the in-
terrupt vector table and memory-mapped MPU conﬁguration
registers; on ARMv7-M, most of this privileged hardware
state is mapped into the physical address space and can be
modiﬁed using store instructions [12]. If application code
can write to these physical memory locations, an adversary
mov .w ip , #0 xe00000 // ip is the intra - procedure
str .w lr , [sp , ip ]
// call scratch register
// Save lr to mem [ sp + ip ]
Listing 1: Instructions to Update the Shadow Stack
can reconﬁgure the MPU to make the shadow stack writable
or can violate CFI by changing the address of an interrupt
handler and then waiting for an interrupt to occur. Therefore,
Silhouette makes sure that the MPU prevents these memory-
mapped registers from being writable by unprivileged store
instructions. As Section 2 explains, the ARMv7-M MPU is
automatically conﬁgured this way.
6
Implementation
We
implemented Silhouette by adding three new
MachineFunction passes to the LLVM 9.0 compiler [45]:
one that transforms the prologue and epilogue code to
use a shadow stack, one that inserts CFI checks on all
computed branches (except those used for returns), and
one that transforms stores into STRT, STRHT, or STRBT
instruction sequences. Silhouette runs our new passes after
instruction selection and register allocation so that subsequent
code generator passes do not modify our instrumentation.
Finally, we implemented the privileged code scanner using a
Bourne Shell script which disassembles the ﬁnal executable
binary and searches for privileged instructions. Writing a
Bourne shell script made it easier to analyze code within
inline assembly statements; such statements are translated
into strings within special instructions in the LLVM code
generator. We measured the size of the Silhouette passes and
code scanner using SLOCCount 2.26. Silhouette adds 2,416
source lines of C++ code to the code generator; the code
scanner is 95 source lines of Bourne shell code.
6.1 Shadow Stack Transformation
Our prototype implements a parallel shadow stack [28] which
mirrors the size and layout of the normal stack. By using
parallel shadow stacks, the top of the shadow stack is always a
constant offset from the regular stack pointer. Listing 1 shows
the two instructions inserted by Silhouette in a function’s
prologue for our STM32F469 Discovery board [64, 66]. The
constant moved to the ip register may vary across different
devices based on the available address space. Note that the
transformed prologue writes the return address into both the
regular stack and the shadow stack.
Silhouette transforms the function epilogue to load the
saved return address to either pc (program counter) or lr, de-
pending on the instructions used in the original epilogue code.
The instructions added by the shadow stack transformation
are marked with a special ﬂag so that a later pass (namely, the
1224    29th USENIX Security Symposium
USENIX Association
store hardening pass) knows that these instructions implement
the shadow stack functionality.
Silhouette also handles epilogue code within IT blocks [12].
An IT (short for If-Then) instruction begins a block of up to
4 instructions called an IT block. An IT block has a condition
code and a mask to control the conditional execution of the
instructions contained within the block. A compiler might
generate an IT block for epilogue code if a function contains
a conditional branch and one of the branch targets contains a
return statement. For each such epilogue IT block, Silhou-
ette removes the IT instruction, applies the epilogue trans-
formation, and inserts new IT instruction(s) with the correct
condition code and mask to cover the new epilogue code.
6.2 Store Hardening
Silhouette transforms all possible variations of regular stores
to one of the three unprivileged store instructions: STRT (store
word), STRHT (store halfword), and STRBT (store byte) [12].
When possible, Silhouette swaps the normal store with the
equivalent unprivileged store. However, some store instruc-
tions are not amenable to a direct one-to-one translation. For
example, some store instructions use an offset operand larger
than the offset operand supported by the unprivileged store
instructions; Silhouette will insert additional instructions to
compute the target address in a register so that the unprivi-
leged store instructions can be used. ARMv7-M also supports
instructions that store multiple values to memory [12]; Sil-
houette converts such instructions to multiple unprivileged
store instructions. For Store-Exclusive instructions [12], Sil-
houette adds two BIC (bitmasking) instructions before the
atomic store to force the address operand to point into the
global, heap, or regular stack regions.
Silhouette handles store instructions within IT [12] blocks
in a similar way to how it handles epilogue code within IT
blocks. If an IT block has at least one store instruction, Silhou-
ette removes the IT instruction, applies store hardening for
each store instruction within the IT block, and adds new IT
instruction(s) to cover newly inserted instructions as well as
original non-store instructions within the old IT block. This
guarantees store hardening generates semantically equivalent
instructions for every store in an IT block.
Silhouette sometimes adds code that must use a scratch
register. For example, when transforming ﬂoating-point store
instructions, Silhouette must create code that moves the value
from a ﬂoating-point register to one or two integer registers
because unprivileged store instructions cannot access ﬂoating-
point registers. Our prototype uses LLVM’s LivePhysRegs
class [51] to ﬁnd free registers to avoid adding register spill
code. This optimization signiﬁcantly reduces store harden-
ing’s performance overhead on certain programs; for example,
we observed a reduction from 39% to 4.9% for a loop bench-