a function, and for Compute, we assume that the worker only
does a single work instance before throwing away all of its
state. As discussed in §4.2.1, in practice, we would take
advantage of both precomputation and caching of previous
work, which on average saves at least 43% of the effort for
KeyGen and 16% of the effort for Compute.
In Figure 8, we see again that three apps (starred) beat
native execution, including one in the public veriﬁer setting
(which requires more expensive operations per IO). The data
also reinforces the point that using a circuit representation
imposes a signiﬁcant cost on image matching, shortest paths,
and the lattice gas sim relative to native, suggesting a tar-
get for optimization. Relative to the circuit representation,
Pinocchio’s veriﬁcation is cheap: both the public and the des-
ignated veriﬁer “win” most of the time when compared to the
circuit execution. Speciﬁcally, the designated veriﬁer wins
in 12 of 13 (92%) application settings. Public veriﬁcation is
more expensive, particularly for large IO, but still wins in 11
of 13 (85%) settings.
Since Pinocchio offers public veriﬁcation, some clients
will beneﬁt from the KeyGen work of others, and hence only
care about the veriﬁcation costs. For example, a cellphone
carrier might perform the one-time KeyGen so that its cus-
tomers can verify computations done by arbitrary workers.
However, in other settings, e.g., a company outsourcing
work to the cloud, the key generator and veriﬁer may be the
same entity, and will wish to amortize the cost of key gen-
eration via the savings from veriﬁcation. Figure 8 shows
that most apps have a low “break even” point vs. circuit ex-
ecution:
the median for the designated veriﬁer is 550 in-
stances and for public veriﬁer is 525 instances,5 both with
5The public veriﬁer’s median is lower, since it wins on fewer app settings.
Figure 7: Cost of Veriﬁcation Vs. Local. Veriﬁcation must be
cheaper than native execution for outsourcing to make sense, though
for applications that want zero-knowledge, more expensive veriﬁca-
tion may be acceptable. All apps trend in the right direction, and
three apps cross the plane where veriﬁcation is cheaper than na-
tive. Error bars, often too small to see, represent 95% conﬁdence
intervals (N = 10,σ ≤ 5%).
instances,4 but the characteristics of the amortization differ.
To reach a break-even point, where the client does less work
verifying than performing the work locally, Pepper and Gin-
ger must batch work instances, whereas GGP and Pinocchio
must perform enough instances to amortize key setup costs.
These approaches have very different effects on latency. A
client cannot beneﬁt from Pepper or Ginger until it has accu-
mulated an entire batch of instances. In Pinocchio, key setup
can be precomputed, and henceforth every instance (includ-
ing the ﬁrst one) enjoys a better-than-break-even latency. Fig-
ure 6 shows the minimum latency achievable by each system.
Compared with Ginger, Pinocchio’s veriﬁer is ∼125,000× -
22,000,000× faster, and the worker is 19-60× faster. To im-
prove performance, Ginger’s parameters are chosen such that
the probability that the adversary can successfully cheat can
be as high as 1
220 [28, Figure 2], while in Pinocchio, the prob-
ability is roughly 1
5.3 End-to-End Application Performance
We measure Pinocchio’s performance for the applications and
parameter settings described in Section 4.3. All applications
are written in C and compile to both QAPs and to native exe-
cutables. We measure performance using 32-bit input values,
so we can compare against the native C version. This ob-
viously makes things more challenging for Pinocchio, since
Pinocchio operates over a 254-bit ﬁeld using multi-precision
integers, whereas the local execution uses the CPU’s native
32-bit operations.
2128 .
Figure 7 plots Pinocchio’s veriﬁcation time against the
time to execute the same app natively; each line represents
4 In contrast, Pinocchio’s public veriﬁer (not shown) enables a client to
beneﬁt from a third party’s key setup work.
247
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply. 
0246810121416Native Execution (ms)0246810121416QAP DV Verify (ms)Cheaper to verifythan execute locallyShortest PathsImage MatchingLattice Gas SimTwo MatricesMultiVar PolyFixed Matrix0.00.10.20.30.40.59.09.510.010.511.011.5(MB)
Fixed Matrix, Medium
Fixed Matrix, Large
Two Matrices, Medium
Two Matrices, Large
MultiVar Poly, Medium
MultiVar Poly, Large
Image Matching, Medium
Image Matching, Large
Shortest Paths, Medium
Shortest Paths, Large
Lattice Gas Sim, Medium
Lattice Gas Sim, Large
SHA-1
|IO|
600
1,201
1,000
2,001
14,701
347,900
36,301 1,343,100
203,428
571,046
86,345
277,745
366,089
1,153 1,400,493
144,063
283,023
23,785
7
7
13
13
513
21
21
22
Mult KeyGen Compute Verify (ms) Circuit Native EvalKey VerKey Proof
(B)
Gates Pub (s)
288
0.7
288
1.5
288
80.1
299.7
288
288
41.9
288
127.3
288
26.2
67.0
288
288
85.1
288
346.0
288
38.4
288
75.3
11.9
288
Priv
(s) Pub
8.2
11.2
0.4
*8.3
13.4
0.9
9.7
267.1 141.9
1128.7 368.8 *10.9
10.6
245.5
713.0 *12.7 *10.9
9.7
40.6
10.5
145.0
10.3
197.2
10.9
852.2
9.6
76.7
9.7
164.1
9.4
14.8
(KB)
37.9
0.3
62.9
0.5
97.9
459.8
374.8 1134.8
0.6
55.9
0.6
156.8
0.8
23.6
75.8
0.8
16.4
99.6
36.4
381.4
1.1
39.6
1.1
77.7
6.5
1.1
(ms)
124.7
345.6
125.5
519.8
92.3
265.7
5.5
18.0
19.2
70.5
92.2
177.1
17.4
(ms)
4.3
12.4
4.0
15.5
4.5
12.9
0.1
0.4
0.1
0.3
0.2
0.4
0.0
12.5
11.2
12.0
13.2
16.1
10.8
10.8
8.1
Figure 8: Application Performance. Pinocchio’s performance for a sampling of the parameter settings (§4.3). All programs are compiled
directly from C. Private KeyGen is always within 0.4% of public KeyGen, and so is omitted. Veriﬁcation values in bold indicate veriﬁcation
is cheaper than computing the circuit locally; those with stars (*) indicate veriﬁcation is cheaper than native execution. (N = 10,σ ≤ 5%).
a low of 4 instances for ﬁxed matrix. Every instance after-
wards is a net “win”, even for the key generator. The median
break-even points are higher (64K and 321K) when compared
against native execution, since the outsourcing margin is rel-
atively small for the current parameter settings. Larger pa-
rameter settings, improved veriﬁcation techniques, or com-
paring against a big integer library instead of native execu-
tion [27, 28] would all bring these values down.
Figure 8 holds more good news for Pinocchio:
the keys
it generates are reasonably sized, with the evaluation key
(which describes the entire computation) typically requiring
10s or 100s of MB. The weak veriﬁer’s key (which grows lin-
early with the I/O) is typically only a few KB, and even at its
largest, for two-matrix multiplication, it requires only slightly
more than 1 MB. This suggests that the keys are quite portable
and will not require excessive bandwidth to transmit.
Finally, from the client’s perspective, if the worker’s efforts
are free, then the worker’s additional overhead of generating a
proof is irrelevant, as long as it doesn’t hurt response latency.
Our results, combined with prior work on parallelization [28],
suggest that latency can be brought down to reasonable levels,
given enough hardware. And indeed in high-assurance sce-
narios, scenarios where the client is incapable of performing
the calculation itself (e.g., a power-limited device), or scenar-
ios where the worker’s resources are otherwise idle, the client
may very well view the worker as “free”.
However, in other scenarios, such as cloud computing, the
worker’s efforts are not free. Even here, however, Chen and
Sion estimate that the cost of cloud computing is about 60×
cheaper than local computing for a small enterprise [54]. This
provides an approximate upper-bound for the amount of extra
work we should be willing to add to the worker’s overhead.
While we do not yet achieve this bound, we make substantial
progress on reducing the worker’s overhead, and the progress
shown in Figure 6(b) gives us hope.
KeyGen
Build table
Encode powers of s
Eval polys at s
Encode polys
Compute
Solve for h(x)
Apply coefﬁcients
Verify
Process I/O
Crypto checks
Evaluation Key Size
Veriﬁcation Key Size
Proof Size
GGPR [30]
108.7s
7.8s
28.4s
5.0s
67.2s
691.4s
252.3s
391.1s
15.2ms
456.5µs
14.8ms
105.5MB
640B
352B
This Paper
41.9s
7.9s
4.7s
1.7s
27.4s
245.5s
76.1s
154.5s