##### System information (version)
  * OpenCV => 3.4.2
  * Operating System / Platform => Android P
  * Compiler => clang
##### Detailed description
libc.debug.malloc detec the memory leak when used getCoreTlsData() although
implement singleton lazy initialization is already included.
256,1,"#00 pc 0xc934 /system/lib64/libc_malloc_debug.so
(InternalMalloc(unsigned long)+0x164)  
#1 pc 0xc768 /system/lib64/libc_malloc_debug.so (debug_malloc+0x60)  
#2 pc 0x715e5c /vendor/lib64/libwa_depth.so (operator new(unsigned long)+0x20)  
#3 pc 0x5297b0 /vendor/lib64/libwa_depth.so (cv::TlsStorage::setData(unsigned
long, void*)+0x94)  
#4 pc 0x5295bc /vendor/lib64/libwa_depth.so (cv::TLSDataContainer::getData()
const+0x64)  
#5 pc 0x513110 /vendor/lib64/libwa_depth.so (cv::theRNG()+0xc)  
#6 pc 0x4f0088 /vendor/lib64/libwa_depth.so (cv::parallel_for_(cv::Range
const&, cv::ParallelLoopBody const&, double)+0x15c)  
#7 pc 0x38f7e0 /vendor/lib64/libwa_depth.so (cv::threshold(cv::_InputArray
const&, cv::_OutputArray const&, double, double, int)+0xab0)  
#8 pc 0xba430 /vendor/lib64/libwa_depth.so
(PortraitEdgeRefine::getConfidenceMapFBS()+0x154)  
#9 pc 0xb7ee8 /vendor/lib64/libwa_depth.so
(PortraitEdgeRefine::runFilter(cv::Mat const&, cv::Mat const&, std::_
_ndk1::vector > const&)+0xc5c)  
#10 pc 0xbed90 /vendor/lib64/libwa_depth.so (
_ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEM18PortraitEdgeRefineFvRKN2cv3MatESB_RKNS_6vectorINS8_5Rect_IiEENS_9allocatorISE_EEEEEPS7_S9_S9_SH_EEEEEPvSO_
+0x48)  
#11 pc 0x83114 /system/lib64/libc.so (__pthread_start(void*)+0x24)  
#12 pc 0x233bc /system/lib64/libc.so (__start_thread+0x44)
When it try to use parallel_for_, it should use  
cv::RNG& cv::theRNG(){  
return getCoreTlsData().get()->rng;  
}  
if getData() return null , it will new ThreadData() in setData() but it will
not be released. nobody call releaseThread(). so the new ThreadData() maybe
leaked.
Can we release it with pthread_key_create 2nd parameter after thread finish?  
int pthread_key_create(pthread_key_t *key, void ( _destructor)(void_ ));
modules/core/src/system.cpp  
TlsAbstraction::TlsAbstraction()  
{  
CV_Assert(pthread_key_create(&tlsKey, release_threadData) == 0);  
}  
void release_threadData(void* thread_data)  
{  
getTlsStorage().releaseThread();  
}