as on Gitter: this is also a cc to @xster @cbracken
_Side note: I am able, with a clean project, to have AndroidStudio build the
Flutter package binary, and even if it fails the Xcode build, open XCode and
run/deploy my deiserd shcema/target (see#126990 ) even if the main app entry
point is always the same._
## Steps to Reproduce
I come from an iOS and Android native background. As per my company internal
guidelines, we start every fresh project with 4 targets: development, staging,
demo and production.  
Then we create 4 schemas, each referencing the relevant target.  
Every target has some different icons (so it's clear which appwe are running),
different plist (i.e. the bundle identifier is different) and a bunch of
different files (maybe a Configuration.swift file is different for every
environment).
Now we are seriously evaluating Flutter to use for some simple apps, as a
start. But I am not able to replicate the behaviour we require for iOS.
What we have done so far:
  1. created a flutter project for an app named `Rotor`
  2. in AndroidStudio with Flutter plugin, we have created 4 Run/Debug configurations with the relevant names.
  3. Each configuration has: 
    * a different Dart entrypoint (and this takes care for having different Configurations/Config constants in our code),
    * a different `Build flavor` that is the name of the schema in xcode (and btw it's also the name of the target)
  4. in XCode we create 4 targets, each with the different icons and bundle name, and the targets are named `Rotor-tg-dev`, `Rotor-tg-staging` etc..
  5. we have created in XCode 4 schemas, `Rotor-dev`, `Rotor-staging`.. each referencing the corresponding target
  6. we have edited the `Pods/Podfile` to replicate the lines under `target 'Runner' do ...` for every target, so we have now `target 'Rotor-tg-dev' do .. ` etc..
If we run the app on the simulator (on the device te problems are similar) we
stumble into many issues.
  1. if we try to build for example the `Dev` run configuration, we are informed that Flutter looks for a configuration named "Rotor-dev-debug`. It's missing (and imho it's useless, but nonetheless).. we create a configuration named like this.
  2. we build again. And we have an error
    ld: warning: directory not found for option '-L/Users/walter/flutter_rotor/build/ios/Debug-Rotor-dev-iphonesimulator/shared_preferences'
        ld: warning: directory not found for option '-L/Users/walter/flutter_rotor/build/ios/Debug-Rotor-dev-iphonesimulator/url_launcher'
        ld: library not found for -lshared_preferences
        clang: error: linker command failed with exit code 1 (use -v to see invocation)
In fact, looking at the file system, I see:
    build\ios\Debug-Rotor-dev-iphonesimulator
                                                          Rotor-tg-dev.app of size zero
    build\ios\Debug-iphonesimulator
                                                          Runner.app of many MB
                                                          shared-preferences/
                                                          url_launcher/
The libraries are on a different path!
## Logs
    nautilus:fluttheero (master) walter$ flutter run --flavor Rotor-dev
    Launching lib/main.dart on iPhone 6 in debug mode...
    PROVA
    Running Xcode build...                                6.7s
    Failed to build iOS app
    Error output from Xcode build:
    ↳
        ** BUILD FAILED **
        The following build commands failed:
        	Ld /Users/walter/rotor_flutter/build/ios/Debug-Rotor-dev-iphonesimulator/Rotor-tg-dev.app/Rotor-tg-dev normal x86_64
        (1 failure)
    Xcode's output:
    ↳
        Build settings from command line:
            ARCHS = x86_64
            BUILD_DIR = /Users/walter/rotor_flutter/build/ios
            ONLY_ACTIVE_ARCH = YES
            SDKROOT = iphonesimulator11.2
        === CLEAN TARGET url_launcher OF PROJECT Pods WITH THE DEFAULT CONFIGURATION (Release) ===
        Check dependencies
        Clean.Remove clean /Users/walter/rotor_flutter/build/ios/Release-iphonesimulator/url_launcher/liburl_launcher.a
            builtin-rm -rf /Users/walter/rotor_flutter/build/ios/Release-iphonesimulator/url_launcher/liburl_launcher.a
        Clean.Remove clean /Users/walter/rotor_flutter/ios/Build/Intermediates.noindex/Pods.build/Release-iphonesimulator/url_launcher.build
            builtin-rm -rf /Users/walter/rotor_flutter/ios/Build/Intermediates.noindex/Pods.build/Release-iphonesimulator/url_launcher.build
        === CLEAN TARGET shared_preferences OF PROJECT Pods WITH THE DEFAULT CONFIGURATION (Release) ===
        Check dependencies
        Clean.Remove clean /Users/walter/rotor_flutter/build/ios/Release-iphonesimulator/shared_preferences/libshared_preferences.a
            builtin-rm -rf /Users/walter/rotor_flutter/build/ios/Release-iphonesimulator/shared_preferences/libshared_preferences.a
        Clean.Remove clean /Users/walter/rotor_flutter/ios/Build/Intermediates.noindex/Pods.build/Release-iphonesimulator/shared_preferences.build
            builtin-rm -rf /Users/walter/rotor_flutter/ios/Build/Intermediates.noindex/Pods.build/Release-iphonesimulator/shared_preferences.build
        === CLEAN TARGET Pods-Runner OF PROJECT Pods WITH THE DEFAULT CONFIGURATION (Release) ===
        Check dependencies