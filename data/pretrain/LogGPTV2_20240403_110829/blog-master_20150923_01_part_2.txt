 186773 |  1  
(2 rows)  
```  
修改控制文件，把nextoid改为100，小于normaloid的一个值。  
```  
postgres@digoal-> pg_ctl stop -m fast  
waiting for server to shut down.... done  
server stopped  
postgres@digoal-> pg_resetxlog --help  
pg_resetxlog resets the PostgreSQL transaction log.  
Usage:  
  pg_resetxlog [OPTION]... DATADIR  
Options:  
  -e XIDEPOCH      set next transaction ID epoch  
  -f               force update to be done  
  -l XLOGFILE      force minimum WAL starting location for new transaction log  
  -m MXID,MXID     set next and oldest multitransaction ID  
  -n               no update, just show what would be done (for testing)  
  -o OID           set next OID  
  -O OFFSET        set next multitransaction offset  
  -V, --version    output version information, then exit  
  -x XID           set next transaction ID  
  -?, --help       show this help, then exit  
Report bugs to .  
postgres@digoal-> pg_resetxlog -o 100 $PGDATA  
Transaction log reset  
```  
启动数据库后，插入T1表，我们看到获取到的oid是16384即从FirstNormalObjectId 开始的第一个值。  
```  
postgres=# insert into t1 values (1);  
INSERT 16384 1  
postgres=# insert into t1 values (1);  
INSERT 16385 1  
postgres=# insert into t1 values (1);  
INSERT 16386 1  
```  
控制文件在做完检查点后会被修改。  
```  
postgres=# \q  
postgres@digoal-> pg_controldata |grep OID  
Latest checkpoint's NextOID:          100  
postgres=# checkpoint;  
CHECKPOINT  
```  
修改后的值=24576  
```  
postgres@digoal-> pg_controldata |grep OID  
Latest checkpoint's NextOID:          24576  
```  
这个值刚好等于16384+8192，验证了前面的代码，一次获取8192个值。  
正常关闭数据库的时候，这个值又会被修改到真实的值，即16387。  
如果是非正常关闭，那么预分配的OID会跳掉，不过没有关系，因为OID是循环使用的，以后还有可能被用到跳过的OID。  
```  
postgres=# select 16384+8192;  
 ?column?   
----------  
    24576  
(1 row)  
```  
再次创建一个T2表，查看pg_class.oid  
```  
postgres=# create table t2(id int);  
CREATE TABLE  
postgres=# select oid from pg_class where relname='t2';  
  oid    
-------  
 16387  
(1 row)  
```  
因为建表时，默认会自动创建表结构对应的复合类型以及复合类型的数组类型。  
```  
postgres=# select * from pg_type where oid=16389;  
 typname | typnamespace | typowner | typlen | typbyval | typtype | typcategory | typispreferred | typisdefined | typdelim | typrelid | typelem | typarray | typinput  | typoutput  | typreceive  |   typsend   | typmodin | typmodout | typan  
alyze | typalign | typstorage | typnotnull | typbasetype | typtypmod | typndims | typcollation | typdefaultbin | typdefault | typacl   
---------+--------------+----------+--------+----------+---------+-------------+----------------+--------------+----------+----------+---------+----------+-----------+------------+-------------+-------------+----------+-----------+------  
------+----------+------------+------------+-------------+-----------+----------+--------------+---------------+------------+--------  
 t2      |         2200 |       10 |     -1 | f        | c       | C           | f              | t            | ,        |    16387 |       0 |    16388 | record_in | record_out | record_recv | record_send | -        | -         | -      
      | d        | x          | f          |           0 |        -1 |        0 |            0 |               |            |   
(1 row)  
postgres=# select * from pg_type where oid=16388;  
 typname | typnamespace | typowner | typlen | typbyval | typtype | typcategory | typispreferred | typisdefined | typdelim | typrelid | typelem | typarray | typinput | typoutput | typreceive |  typsend   | typmodin | typmodout |    typana  
lyze    | typalign | typstorage | typnotnull | typbasetype | typtypmod | typndims | typcollation | typdefaultbin | typdefault | typacl   
---------+--------------+----------+--------+----------+---------+-------------+----------------+--------------+----------+----------+---------+----------+----------+-----------+------------+------------+----------+-----------+----------  
--------+----------+------------+------------+-------------+-----------+----------+--------------+---------------+------------+--------  
 _t2     |         2200 |       10 |     -1 | f        | b       | A           | f              | t            | ,        |        0 |   16389 |        0 | array_in | array_out | array_recv | array_send | -        | -         | array_typ  
analyze | d        | x          | f          |           0 |        -1 |        0 |            0 |               |            |   
(1 row)  
```  
所以两个类型又消耗了2个OID。  
再次创建T3表，你会发现这个表的OID和T2表的pg_class.oid不是连续的，原因就在此。  
```  
postgres=# create table t3(id int);  
CREATE TABLE  
postgres=# select oid from pg_class where relname='t3';  
  oid    
-------  
 16390  
(1 row)  
```  
再次修改控制文件的OID  
```  
postgres@digoal-> pg_ctl stop -m fast  
waiting for server to shut down.... done  
server stopped  
postgres@digoal-> pg_resetxlog -o 100 $PGDATA  
Transaction log reset  
postgres@digoal-> pg_ctl start  
server starting  
postgres@digoal->  0LOG:  00000: redirecting log output to logging collector process  
 0HINT:  Future log output will appear in directory "/data03/pg_log_1921".  
 0LOCATION:  SysLogger_Start, syslogger.c:645  
```  
创建表时，用了16384这个OID，这个OID在pg_class中一定是唯一的，因为pg_class.oid有唯一约束，  
```  
Indexes:  
    "pg_class_oid_index" UNIQUE, btree (oid)  
```  
前面分析过代码了，PG会处理唯一约束。  
```  
postgres@digoal-> psql  
psql (9.4.4)  
Type "help" for help.  
postgres=# create table t4(id int);  
CREATE TABLE  
postgres=# select oid from pg_class where relname='t4';  
  oid    
-------  
 16384  
(1 row)  
```  
在来看一个例子，就是如果OID上没有唯一约束，是可能存进去重复的OID的，如下：  
```  
postgres@digoal-> pg_ctl stop -m fast  
waiting for server to shut down.... done  
server stopped  
postgres@digoal-> pg_resetxlog -o 100 $PGDATA  
Transaction log reset  
postgres@digoal-> pg_ctl start  
server starting  
postgres@digoal->  0LOG:  00000: redirecting log output to logging collector process  
 0HINT:  Future log output will appear in directory "/data03/pg_log_1921".  
 0LOCATION:  SysLogger_Start, syslogger.c:645  
postgres@digoal-> psql  
psql (9.4.4)  
Type "help" for help.  
postgres=# \d+ t1  
                          Table "public.t1"  
 Column |  Type   | Modifiers | Storage | Stats target | Description   
--------+---------+-----------+---------+--------------+-------------  
 id     | integer |           | plain   |              |   
Has OIDs: yes  
postgres=# insert into t1 values (100);  
INSERT 16384 1  
postgres=# select oid,* from t1;  
  oid   | id    
--------+-----  
 186772 |   1  
 186773 |   1  
  16384 |   1  
  16385 |   1  
  16386 |   1  
  16384 | 100  
(6 rows)  
```  
如果t1表的oid上面建了唯一约束，就不会存进去重复值，获取OID也不会报错，因为PG已经帮你处理了。  
```  
postgres=# \d+ t6  
                          Table "public.t6"  
 Column |  Type   | Modifiers | Storage | Stats target | Description   
--------+---------+-----------+---------+--------------+-------------  
 id     | integer |           | plain   |              |   
Indexes:  
    "i" UNIQUE, btree (oid)  
Has OIDs: yes  
INSERT 16397 1  
postgres=# insert into t6 values (1);  
INSERT 16398 1  
```  
OID 16399 被跳过.  
```  
postgres=# insert into t6 values (1);  
INSERT 16400 1  
postgres=# insert into t6 values (1);  
INSERT 16401 1  
```  
## 小结  
1\.   每个系统表都可以使用约2^32-1个OID（排除16384之前的OID），PostgreSQL 在获取OID时，会判断需要OID的表是否为  
表的oid允许重复，  
我们在PostgreSQL中最多可以建多少个表呢？2^32-1吗？  
否。  
因为pg_type里面每个表对应了2个类型，所以最多只能创建2^31-1个表。  
2\.   凡是with oids的表，只要这个表的oid字段上面包含了唯一约束，PG就会帮你处理nextoid请求，确保不出现违反唯一约束的oid。但是如果oid上面没有唯一索引或唯一约束，oid就有可能重复哦。  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")