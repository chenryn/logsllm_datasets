X Server 的配置文件是 xorg.conf，在该文件中， Section Files 干嘛用的？
相当重要！是设置显示字体用的。而字体一般放置目录在 /usr/share/X11/fonts/ 及 /usr/share/fonts/ 当中。
我发现我的 X 系统键盘所输入的字母老是打不出我所需要的单字，可能原因该如何修订？
应该是键盘符号对应表跑掉了。可以修改 xorg.conf 文件内， 关于 Keyboard 的 Option XkbLayout 项目，将他改为 us 即可！
当我的系统内有安装 GNOME 及 KDE 两个 X Widnow Manager ，我原本是以 KDE 为默认的 WM， 若想改为 GNOME 时，应该如何修
改？
修改 /etc/sysconfig/desktop 内部，成为 GNOME 即可！
[1]维基百科对 X Window 的介绍：http://en.wikipedia.org/wiki/X_Window_System
[2]X Server/X client 与网络相关性的参考图示：
http://en.wikipedia.org/wiki/File:X_client_sever_example.svg
[3]系统的 man page： man xinit 、 man Xorg 、 man startx
[4]一些与中文字体有关的网页链接：
洪朝贵老师评论员的字体设置：http://www.cyut.edu.tw/~ckhung/b/gnu/font.php
X 相关的官方网站： X.org 官方网站 （http://www.x.org/）、 XFree86 官方网站 （http://www.xfree86.org/）
2003/02/12：第一次完成
2005/06/29：将旧的文章移动到 这里 。如果你需要旧版的 xf86config 与相关的工具，则请前往该旧文章查阅！
2005/07/11：经历了许多的时间，将主机的配置文件重复改了改，终于完成一些简单的 X 测试！
2006/11/07：经由网友x1215 这一篇的介绍，得知该网站，赶紧去处理！
2009/07/03：将旧版基于 FC4 的版本移动到此处
2009/07/15：奋战好几天，将驱动程序安装加上，同时加入字体管理功能。
2009/07/28：网友 LazyBug Chan 兄热情回报，使用 XFCE 的 Ubuntu 是 Xubuntu 这个分支！感谢回报！
2009/08/07：加入 Window Manger 的全名与链接
2015/09/11：将旧的基于 CentOS 5.x 的版本移动到 此处
第第第第二二二二十十十十四四四四章章章章、、、、LLiinnuuxx 核核核核心心心心编编编编译译译译与与与与管管管管理理理理
最近更新日期：2015/10/20
憵亐讘瘨 Linux 儚孂披瘨寕旓柜彧 （kernel） 羰嶖。载Ð 柜彧捋凚伄ä 曞瘨㤽暭砐亚帚捴伿粟纃㤽暭瘨剃股， 㤽争讘，乺酱² 酱褥哮！憵亐庤曞瘨斚侽儚孂
寕旓冻瓌庤曞筅玪禯帐輡俭载Ð 柜彧攫亚有佊泯砐亚， 苏柜彧輡俭办廷瘨騕剌禯帐厉，伄瘨粟纃懱股壃頞冻瘨轴蟰。獔乮瘨粟纃𤦀串𫷷讧繣­ 勫繋曞凚，嚄欈霂巜² 庞譒
膎𫍻柜彧纺譵！ 仪旓，夦杀伄悗褥宪伄瘨 Linux 奶衩凔 U发、悗褥宪伄瘨 Eee PC 害窸撰曐奶衩膎嶕瘨 Linux ， 悗譍伄瘨 Linux 厓争騕剌伄瘨害孚瓙，欈斚，柜彧
纺譵寕旓皓廷酱褥瘨 Ð 亟剅个！ 载 筫归輧轿窥，夦杀伄宝粟纃禟梱汅暭尽赇瘨谪，载 筫厓争僬甉轫念！ ^_^
我们在第一章里面就谈过 Linux 其实指的是核心！这个“核心 （kernel）”是整个操作系统的最底层，他负责了整个硬件的驱动，以及提供
各种系统所需的核心功能，包括防火墙机制、是否支持 LVM 或 Quota 等文件系统等等，这些都是核心所负责的！所以啰，在第十九章的开机
流程中，我们也会看到 MBR 内的 loader 载入核心文件来驱动整个系统的硬件呢！ 也就是说，如果你的核心不认识某个最新的硬件，那么该硬
件也就无法被驱动，你当然也就无法使用该硬件啰！
这已经是整个 Linux 基础的最后一篇了，所以，下面这些数据你应该都要“很有概念”才行～ 不能只是“好像有印象”～好了，那就复习一下
核心的相关知识吧！
Kernel
还记得我们在第十章的 BASH shell 提到过：计算机真正在工作的东西其实是“硬件”， 例如数值运算要使用到 CPU、数据储存要使用到
硬盘、图形显示会用到显卡、音乐发声要有音效芯片、连接 Internet 可能需要网卡等等。那么如何控制这些硬件呢？那就是核心的工作了！也
就是说，你所希望计算机帮你达成的各项工作， 都需要通过“核心”的帮助才行！当然啰，如果你想要达成的工作是核心所没有提供的， 那么你
自然就没有办法通过核心来控制计算机使他工作啰！
举例来说，如果你想要有某个网络功能 （例如核心防火墙机制） ，但是你的核心偏偏忘记加进去这项功能， 那么不论你如何“卖力”的
设置该网络套件，很抱歉！不来电！换句话说，你想要让计算机进行的工作，都必须要“核心有支持”才可以！这个标准不论在 Windows 或
Linux 这几个操作系统上都相同！如果有一个人开发出来一个“全新的硬件”，目前的核心不论 Windows 或 Linux 都不支持，那么不论你用什么
系统，哈哈！这个硬件都是英雄无用武之地啦！ 那么是否了解了“核心”的重要了呢？所以我们才需要来了解一下如何编译我们的核心啦！
那么核心到底是什么啊？其实核心就是系统上面的一个文件而已， 这个文件包含了驱动主机各项硬件的侦测程序与驱动模块。在第十九
章的开机流程分析中，我们也提到这个文件被读入内存的时机， 当系统读完 BIOS 并载入 MBR 内的开机管理程序后，就能够载入核心到内存
当中。然后核心开始侦测硬件， 挂载根目录并取得核心模块来驱动所有的硬件，之后调用 systemd 就能够依序启动所有系统所需要的服务
了！
这个核心文件通常被放置成 /boot/vmlinuz-xxx ，不过也不见得， 因为一部主机上面可以拥有多个核心文件，只是开机的时候仅能选择一
个来载入而已。 甚至我们也可以在一个 distribution 上面放置多个核心，然后以这些核心来做成多重开机呢！
核核心心模模块块 （（kernel module）） 的的用用途途
既然核心文件都已经包含了硬件侦测与驱动模块，那么什么是核心模块啊？要注意的是， 现在的硬件更新速度太快了，如果我的核心比
较旧，但我换了新的硬件，那么，这个核心肯定无法支持！ 怎么办？重新拿一个新的核心来处理吗？开玩笑～核心的编译过程可是很麻烦的～
所以啰，为了这个缘故，我们的 Linux 很早之前就已经开始使用所谓的模块化设置了！ 亦即是将一些不常用的类似驱动程序的咚咚独立
出核心，编译成为模块，然后， 核心可以在系统正常运行的过程当中载入这个模块到核心的支持。如此一来， 我在不需要更动核心的前提之
下，只要编译出适当的核心模块，并且载入他，呵呵！我的 Linux 就可以使用这个硬件啦！简单又方便！
那我的模块放在哪里啊？可恶！怎么会问这个傻问题呢？当然一定要知道的啦！就是 /lib/modules/$（uname -r）/kernel/ 当中啦！
自自制制核核心心 - 核核心心编编译译
刚刚上面谈到的核心其实是一个文件，那么这个文件怎么来的？当然是通过源代码 （source code） 编译而成的啊！因为核心是直接被
读入到内存当中的，所以当然要将他编译成为系统可以认识的数据才行！也就是说， 我们必须要取得核心的源代码，然后利用第二十一章
Tarball 安装方式提到的编译概念来达成核心的编译才行啊！（这也是本章的重点啊！ ^_^）
关关于于驱驱动动程程序序 - 是是厂厂商商的的责责任任还还是是核核心心的的责责任任？？
现在我们知道硬件的驱动程序可以编译成为核心模块，所以可以在不改变核心的前提下驱动你的新硬件。 但是，很多朋友还是常常感到
困惑，就是 Linux 上面针对最新硬件的驱动程序总是慢了几个脚步， 所以觉得好像 Linux 的支持度不足！其实不可以这么说的，为什么呢？因
为在 Windows 上面，对于最新硬件的驱动程序需求，基本上，也都是厂商提供的驱动程序才能让该硬件工作的， 因此，在这个“驱动程序开
发”的工作上面来说，应该是属于硬件发展厂商的问题， 因为他要我们买他的硬件，自然就要提供消费者能够使用的驱动程序啦！
所以，如果大家想要让某个硬件能够在 Linux 上面跑的话，那么似乎可以发起一人一信的方式，强烈要求硬件开发商发展 Linux 上面的
驱动程序！这样一来，也可以促进 Linux 的发展呢！
除了 BIOS （或 UEFI） 之外，核心是操作系统中最早被载入到内存的咚咚， 他包含了所有可以让硬件与软件工作的信息，所以，如果
没有搞定核心的话， 那么你的系统肯定会有点小问题！好了，那么是不是将“所有目前核心有支持的东西都给他编译进去我的核心中， 那就可
以支持目前所有的硬件与可执行的工作啦！”！
这话说的是没错啦，但是你是否曾经看过一个为了怕自己今天出门会口渴、会饿、会冷、会热、会被车撞、 会摔跤、会被性骚扰，而在
自己的大包包里面放了大瓶矿泉水、便当、厚外套、短裤、防撞钢梁、止滑埝、 电击棒....等一大堆东西，结果却累死在半路上的案例吗？当然
有！但是很少啦！我相信不太有人会这样做！ （会这么做的人通常都已经在医院了～） 取而代之的是会看一下天气，冷了就只带外套， 热了
就只带短衣、如果穿的漂亮一点又预计晚点回家就多带个电击棒、 出远门到没有便利商店的地方才多带矿泉水....
说这个干什么！对啦！就是要你了解到，核心的编译重点在于“你要你的 Linux 作什么？”，是啦！如果没有必要的工作，就干脆不要加
在你的核心当中了！这样才能让你的 Linux 跑得更稳、更顺畅！这也是为什么我们要编译核心的最主要原因了！
Linux 核核心心特特色色，，与与默默认认核核心心对对终终端端用用户户的的角角色色
Linux 的核心有几个主要的特色，除了“Kernel 可以随时、随各人喜好而更动”之外，Kernel 的“版本更动次数太频繁”也是一个特点！所以
啰，除非你有特殊需求， 否则一次编译成功就可以啦！不需要随时保持最新的核心版本，而且也没有必要 （编译一次核心要粉久的ㄋㄟ！）
。
那么是否“我就一定需要在安装好了 Linux 之后就赶紧给他编译核心呢？”， 老实说，“并不需要的”！这是因为几乎每一个 distribution 都
已经默认编译好了相当大量的模块了， 所以使用者常常或者可能会使用到的数据都已经被编译成为模块，也因此，呵呵！ 我们使用者确实不
太需要重新来编译核心！尤其是“一般的使用者， 由于系统已经将核心编译的相当的适合一般使用者使用了，因此一般入门的使用者，基本
上， 不太需要编译核心”。
核核心心编编译译的的可可能能目目的的
OK！那么鸟哥闲闲没事干跑来写个什么东西？既然都不需要编译核心还写编译核心的分享文章， 鸟哥卖弄才学呀？很抱歉，鸟哥虽然
是个“不学有术”的混混，却也不会平白无故的写东西请您来指教～ 当然是有需要才会来编译核心啦！编译核心的时机可以归纳为几大类：
新功能的需求：
我需要新的功能，而这个功能只有在新的核心里面才有，那么为了获得这个功能，只好来重新编译我的核心了。例如 iptables 这个防火
墙机制只有在 2.4.xx 以后的版本里面才有，而新开发的主板芯片组， 很多也需要新的核心推出之后，才能正常而且有效率的工作！
原本核心太过臃肿：
如果你是那种对于系统“稳定性”很要求的人，对于核心多编译了很多莫名其妙的功能而不太喜欢的时候， 那么就可以重新编译核心来取
消掉该功能啰；
与硬件搭配的稳定性：
由于原本 Linux 核心大多是针对 Intel 的 CPU 来作开发的，所以如果你的 CPU 是 AMD 的系统时，有可能 （注意！只是有可能，不见得
一定会如此） 会让系统跑得“不太稳！”。此外，核心也可能没有正确的驱动新的硬件，此时就得重新编译核心来让系统取得正确的模块
才好。
其他需求 （如嵌入式系统）：
就是你需要特殊的环境需求时，就得自行设计你的核心啰！（ 像是一些商业的套装软件系统，由于需要较为小而美的操作系统， 那么他
们的核心就需要更简洁有力了！）
Tips
话说，2014 年鸟哥为了要搞定 banana pi （一种单版计算机，或者可以称为手机的硬件拿来作 Linux 安装的硬件） 的 CPU 最高频率限制，
因为该限制是直接写入到 Linux 核心当中的，这时就只好针对该硬件的 Linux 核心，修改不到 10 行的程序码之后，重新编译！ 才能将原本限制到
900MHz 的频率提升到 1.2GHz 哩！
另外，需要注意重新编译核心虽然可以针对你的硬件作最优化的步骤 （例如刚刚提到的 CPU 的问题！） ，不过由于这些最优化的步骤
对于整体性能的影响是很小很小的， 因此如果是为了增加性能来编译核心的话，基本上，效益不大！然而，如果是针对“系统稳定性”来考虑的
话， 那么就有充分的理由来支持你重新编译核心啰！
“如果系统已经运行很久了，而且也没有什么大问题， 加上我又不增加冷门的硬件设备，那么建议就不需要重新编译核心了”， 因为重新
编译核心的最主要目的是“想让系统变的更稳！”既然你的 Linux 主机已经达到这个目的了，何必再编译核心？不过，就如同前面提到的， 由于
默认的核心不见得适合你的需要，加上默认的核心可能并无法与你的硬件配备相配合， 此时才开始考虑重新编译核心吧！
Tips
早期鸟哥是强调最好重新编译核心的一群啦！不过，这个想法改变好久了～ 既然原本的 distribution 都已经帮我们考虑好如何使用核心了，
那么， 我们也不需要再重新的编译核心啦！尤其是 distribution 都会主动的释出新版的核心 RPM 版本， 所以，实在不需要自己重新编译的！当然啦，
如同前面提到的，如果你有特殊需求的话，那就另当别论噜！ ^_^
由于“核心的主要工作是在控制硬件！”所以编译核心之前， 请先了解一下你的硬件配备，与你这部主机的未来功能！由于核心是“越简单
越好！”所以只要将这部主机的未来功能给他编进去就好了！ 其他的就不用去理他啦！
核心的版本问题，我们在第一章已经谈论过， 目前 CentOS 7 使用的 3.10.x 版本为长期维护版本，不过理论上我们也可以升级到后续的
主线版本上面！不会像以前 2.6.x 只能升级到 2.6.x 的后续版本， 而不能改成其他主线版本。不过这也只是“理论上”而已，因为目前许多的软件
依旧与核心版本有关，例如那个虚拟化软件 qemu 之类的， 与核心版本之间是有搭配性的关系的，所以，除非你要一口气连同核心相依的软件
通通升级，否则最好使用长期维护版本的最新版来处理较佳。
举例来说，CentOS 7 使用的是 3.10.0 这个长期版本，而目前 （2015/09） 这个 3.10 长期版本，最新的版本为 3.10.89，意思是说， 你
最好是拿 3.10.89 来作为核心升级的依据，而不是拿最新的 4.2.1 来升级的意思。
虽然理论上还是拿自家长期维护版本的最新版本来处理比较好，不过鸟哥因为需要研究虚拟化的 PCI passthrough 技术， 确实也曾经在
CentOS 7.1 的系统中将 3.10.x 的版本升级到 4.2.3 这个版本上！这样才完成了 VGA 的 PCI passthrough 功能！ 所以说，如果你真的想要使用
较新的版本来升级，也不是不可以，只是后果会发生什么问题，就得要自行负责啰！