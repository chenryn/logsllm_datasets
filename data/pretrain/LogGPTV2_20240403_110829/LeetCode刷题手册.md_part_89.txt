题目
980. Unique Paths Ill
4.(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
2.(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
●1 represents the starting square. There is exactly one starting square.
Note that the starting and ending square can be anywhere in the grid.
There is no path that walks over every empty square exactly once.
Output: 0 
Input: [[0,1],[2,0]]
2.(0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
1.(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
Explanation: we have the following four paths:
Output:4
Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
1.(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
Explanation: we have the following two paths:
Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
distributeCoinsDFS(root.Right, res)
Explanation:
output:2
*res += abs(left) + abs(right)
left, right := distributecoinsDFS(root.Left, res),
(0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
-1 represents obstacles that we cannot walk over.
 0 represents empty squares we can walk over.
 2 represents the ending square. There is exactly one ending square.
return left + right + root.Val
-1
---
## Page 938
代码
解题思路
碍方格都要通过一次。
返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目，每一个无障
在二维网格 grid 上，有 4 种类型的方格:
题目大意
Note:
&res）／／可走的步数要加一，因为终点格子也算一步，不然永远走不到终点！
·唯一需要注意的一点是，空白的格子并不是最后走的总步数，总步数=空白格子数+1，因为要
·这一题也可以按照第79 题的思路来做。题目要求输出地图中从起点到终点的路径条数。注意路径
package leetcode
·1表示起始方格。且只有一个起始方格。
func uniquePathsIII(grid [][]int) int {
要求必须走满所有空白的格子。
. 1 = 0 && x = 0 && y = 0 {
return res 
path = path[:len(path)-2]
empty++ 
visited[startx][starty] = false
for i := 0; i  timestamp 的
结构体，里面包含value 和 timestamp。执行 get(）操作的时候，先取出 key 对应的结构体
间戳对应的 value 值。
1 B[j] .End，代表 A 数组范围比 B 数组大，B 的游标右移。
数组中。如果 A[i].End <= B[j].End，代表 B 数组范围比 A 数组大，A的游标右移。如果 
min(A[i].End，B[j].End），如果start<= end，那么这个就是一个满足条件的交集，放入最终
equations [i] has length 4 and takes one of two different forms: "a==b" or "a!=b". Here, a
交集的左边界应该为，start := max(A[i].start，B[j] .start) ，右边界为，end :=
  (r  r rr 
* Definition for an interval.
package leetcode
/￥
return res
res := []Interval{} 
 type Interval struct {
for i， j := 0, 0; i
} else {
if A[i].End <= B[j].End {
end := min(A[i].End, B[j].End) 
start := max(A[i].Start, B[j].Start) 
if start <= end { 
j++
i++
 res = append(res,
End 
Start int
int
<len(A) &&j<len(B)；{
，Interval{start: start, End: end})
---
## Page 948