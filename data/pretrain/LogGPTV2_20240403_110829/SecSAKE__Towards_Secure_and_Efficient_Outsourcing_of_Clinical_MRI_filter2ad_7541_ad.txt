projection for left and right singular matrices at first. Note that the
U′
can be represented by P1U′′ − Z1 and Q1V′′ + Z2. Given
1
the estimated rank ˆr, we denote the operator of hard-thresholding in
Section 4.2 as Tˆr . Obviously, Tˆr is a linear operator. After receiving
, V′
K1 and the tuple (U′
, Σ′), the shareholder I performs the hard-
1
1
thresholding step as follows:
U′′
1|| = Tˆr (P∗
1U′
1) = Tˆr (U′′ − P∗
V′′
1|| = Tˆr (Q∗
1V′
1) = Tˆr (V′′ + Q∗
|| − Tˆr (P∗
1Z1)
|| + Tˆr (Q∗
1Z2)
1Z1) = U′′
1Z2) = V′′
In this way, the non-zero values in the truncated matrix U′′
1|| and
V′′
1|| can be protected by Tˆr (P∗
1Z2) against the share-
holders I, respectively. After retaining the ˆr non-zero values in Σ′,
denoted as Σ′
, the shareholder I reunites these derived matrices can
ˆr
be performed by matrix multiplication in the first iteration:
1Z1) and Tˆr (Q∗
(20)
ˆA1
0 =
|| + Tˆr (P∗
1
1||Σ′
2 U′′
ˆr V′′∗
1||
1Z1), V′′
|| − Tˆr (Q∗
2|| = V′′
1
2 U′′
2||Σ′
ˆr V′′∗
ˆA2
2||
0 =
(21)
In the same way, the shareholder II can obtain the truncated matrices
U′′
2|| = U′′
1Z2) and then computes:
(22)
Correspondingly, the shareholders III is responsible for computing
a different task:
†
w ( ˆAl0) for l = 1, 2, 3.
With the uniform window size w, each of the shareholder locally
enforces the structural consistency projection to generate the k-
space data by averaging the values on the anti-diagonal direction,
i.e. ˆxl0 = H
Data Matrix Regeneration: Suppose the matrix N has been pre-
computed by each shareholder, where N = I − DD†. Before entering
into the stage of data consistency projection, the l-th shareholder
also possesses a share of the split image Cl and the k-space data ˆxl0
obtained from the previous step. To gain the share of the current
estimation of k-space data, the l-th shareholder still performs the
matrix-matrix operations as follows:
ˆxl1 = Nˆxl0 + Cl
(24)
To enforce the block-wise Hankel matrix for the next loop, the l-th
shareholder projects its own share ˆxl1 onto the data matrix Al
1 by
Hw , i.e. Al
1 = Hw (ˆxl1).
Cooperative Encryption: By bringing Al
1 into the second iteration,
the shareholders need to pass their shares to the executor. Before
doing so, one of the shareholders is required to generate a new
pair of keys K2 = (P2, Q2) (with the same generating process with
K0) and share the it with other shareholders. Then, each of them
individually encrypts their own share of A1 as:
′l1 = P2Al
˜A
1Q2
(25)
′l1 to the executor.
Finally, they all send their own share of ˜A
Correctness: We aim to briefly show the current shares can be
used in further loops. Here we show the addition of the above shares
multiplied by the constant factor δ is equivalent with encrypted
data matrix originated from the current estimate in the k-space
domain, i.e.
(26)
□
0 = Tˆr (P∗
ˆA3
1Z1)[Tˆr (Q∗
1Z2)]∗
(23)
Proof. Please refer to the Appendix A.4.
3(cid:88)
l =1
′
˜A
1 =
′l1 = δP2A1Q2
˜A
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea5445.4 Data Owner: Finalization
One challenging issue of this protocol is that none of the cloud
servers can determine when to stop the iterations. The DO can
stop the iteration after a preset number of rounds. The DO can also
alternatively download, transform and compare any two shares of
estimates from one of the shareholders in two consecutive iterations.
Afterwards, the DO can request all the shares of estimates from
all the shareholders and locally aggregate the transformed shares.
6 PRIVACY ANALYSIS
In this section, we prove the matrix transformation scheme pro-
posed in Section 4.1 (i.e. Equation (7)) and Section 4.3 (i.e. Equa-
tion (16)) can achieve computationally indistinguishable under CPA.
Firstly, we provide a sketch of proof before reaching the conclu-
sion that the transformation given by Equation (7) is computation-
ally indistinguishable. According to property of diagonal matrix,
given any two matrices A1
n over complex field with same
structure, i.e. have same positions for non-zero entries, the ˜A1
n and
˜A2
n have the same structures. Take a more in-depth observation,
each data entry in ˜An is given by ˜an
i, jγj, where the
i, j
real part is given by:
n and A2
= η0η′
0λian
R( ˜an
i, j ) = η0η
′
0[R(λi )R(γj ) − I(λi )I(γj )]R(an
i, j )+
[R(γj )I(λi ) + R(λi )I(γj )]I(an
i, j )
′
= θ[(1 − ηiη
j )I(an
i, j ) + (ηi + η
′
j )R(an
i, j )]
(27)
Similarly, the imaginary part is given by:
′
0
i, j )]
i, j ) = η0η
′
j )I(an
is to compute
i, j ) + I( ˜an
I( ˜an
where θ = η0η′
0
versary A to deduce the real part of an
i, j
2
R( ˜an
1 + (ηi + ηj )
(cid:113)1/(1 + η
′
i, j ) = θ[(1 − ηiη
i, j ) − (ηi + η
(28)
j )R(an
′2
2
i )(1 + η
j ). The best strategy for the ad-
(cid:113)
′2
j )R(an
i, j )
(29)
Due to the pseudo-randomness of ηl , it can be easily concluded that
any value derived from both the real part and the imaginary part
cannot reveal more information than η0η′
. According to the
CPA indistinguishability experiment and corresponding conclusion
proposed in [25], the transformation in Equation (7) can achieve
computational indistinguishability under a CPA for non-zero ele-
ments. More discussion on the details can be found in Appendix A.3.
2
i )(1 + η
/(1 + η
Accordingly, the following theorem can be derived:
Theorem 6.1. The transformation of matrix over complex field
given in Equation (8) is computationally indistinguishable transfor-
mations under a chosen-plaintext attack.
0an
i, j
Next, to show the matrix transformation in Equation (16) is
computational indistinguishable with a random matrix, we follow
the definition and method used in [23] :
Definition 6.2. Given any polynomial time distinguisher D, there
exists a negligible function µ (·) such that
|Pr[D(ri, j ) = 1] − Pr[D(si, j ) = 1]| < µ
(30)
where the distinguisher D outputs 1 when its input is identified as
from a uniform distribution.
Suppose there exists a random matrix R′ = (ri, j )n×l with its real
part of entries ranging from [−cR(vj ), cR(vj )], ∀j ∈ [1, l]. Given
the security parameter κ = ι + max{n, l} + d + 1, it can be seen that
both R(ri, j ) and R( ˆmi, j ) fall within [−2κ , 2κ]. Then for the values
in real field,
(31)
|Pr[D(R( ˆmi, j )) = 1] − Pr[D(R(ri, j )) = 1]| ≤ Ka/2cR(vj )
Similarly, for the values in imaginary field, we can derive:
|Pr[D(I( ˆmi, j )) = 1] − Pr[D(I(ri, j )) = 1]| ≤ Kb /2cI(vj )
(32)
Thus, the chance that a distinguisher can determine whether ˆmi, j
is randomly originated from a uniform distribution is at most at:
(33)
For more details on the Equations 31 and 33, please refer to Appen-
dix A.5.
µ (κ) ≤ 2κ−max{n,l }−q+1
Theorem 6.3. The matrix ˆM in Equation (16) is computationally
indistinguishable with the random matrix R′, the entries of whose jth
columns are uniformly sampled from [−cvj , cvj].
In SecSAKE I, the CS can only get access to three matrices in
each iteration, the encrypted data matrix ˆAn, the stored encrypted
sampling operator ˆN and the encrypted estimate in k-space ˆxn.
Note that the keys for masking ˆAn and ˆxn are generated loop by
loop. Theorem 6.1 indicates that the ˆAn is computationally indis-
tinguishable with a random matrix over complex field. Meanwhile,
Theorem 6.3 ensures that the ˆxn is also computationally indistin-
guishable under CPA. Hence, the CS cannot reveal any sensitive
information of the imaging data during the computation process in
one loop, even if it may want to construct a data matrix from ˆxn in
order to correlate it with ˆAn. The CS is not capable to determine
the value of ˆN if R1 is kept secret according to Theorem 6.3.
SecSAKE II involves four independent parties in the CS, we ana-
lyze the privacy issues by inspecting the accessible matrices in each
party. The executor in this protocol is assigned the same computa-
tion task but different input. The encrypted data matrix is provided
by three shareholders in three shares. Since the executor does not
have the updated key pair in the new round, each share of the data
matrix can be protected the same as SecSAKE I. The shareholders I
& II are supposed to conduct the matrix transformation given the
re-encrypted results of SVD. Even though they know the round
key, they cannot determine the results which have been masked
by Z1 and Z2. In addition, the shares of initial imaging data are
well protected by the randomly splitting. As long as none of the
shareholders can collude with another party, there is no chance for
any of the shareholders to learn any information of the image.
7 EFFICIENCY ANALYSIS
In this Section, we theoretically deduce the time complexity of the
proposed protocols by looking into the dominated steps within
Algorithm 1-4. We follow the notations in previous sections, i.e.
the size of data matrix is p × q and the size of k-space dataset is
s × t. A quick relationship between these values is s < t < q < p
according to our previous assumption. By inspecting one loop in
SAKE, we find that the SVD computation occupies the most of
Session 13: Privacy 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea545s × t
200 × 200
200 × 200
288 × 288
288 × 288
320 × 288
320 × 288
320 × 320
320 × 320
w×w
4 × 4
5 × 5
5 × 5
6 × 6
5 × 5
6 × 6
6 × 6
8 × 8
tl1
ts