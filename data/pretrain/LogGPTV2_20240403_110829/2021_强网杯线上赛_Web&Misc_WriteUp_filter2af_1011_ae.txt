以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 逆向工程与解密

通过分析字节码，我们手动逆向得到以下Python代码。请注意，某些部分可能没有完全按照字节码编写。

```python
import sys
from hashlib import sha256

# 定义常量
w = b'\xf6\xef\x10H\xa9\x0f\x9f\xb5\x80\xc1xd\xae\xd3\x03\xb2\x84\xc2\xb4\x0e\xc8\xf3'

# 构建映射
m = {x: x ^ n[x] for x in n}
m |= ((i.bit_count(), i) for i in b)

# 初始化RC4流
stream = RC4(list(map(lambda m: m[1], sorted(m.items()))))

# 打印欢迎信息
print(xor(w, stream).decode())

# 读取输入
p = sys.stdin.buffer.readline()
e = xor(e, stream)
c = xor(p, stream)

# 验证哈希值
if sha256(c).digest() != s:
    print(e.decode())
    exit()

# 解密并打印结果
print(xor(t, stream).decode())
```

通过爆破输入字符的长度，我们发现当输入长度为26时，会提示“Congratulations! Now you should know what the flag is”，这表明`t`的真实数据已经被正确解密。其他情况下无法正确解码。

使用脚本`stegosaurus`导出隐藏在pyc文件中的内容。需要注意的是，对于Python 3.10，header长度为16。最终得到长度为26的字节序列：

```python
b'\xe5\n2\xd6"\xf0}I\xb0\xcd\xa2\x11\xf0\xb4U\x166\xc5o\xdb\xc9\xead\x04\x15b'
```

将这个字节序列作为输入，运行上述代码后，`c`的输出即为flag：`flag{P0w5rFu1_0pEn_50urcE}`。

### ISO1995

根据题目要求，我们遵循ISO1995标准。已知该标准存在一些问题，其中一个问题是时间相关的问题。

**附件下载**
- [百度网盘](https://pan.baidu.com/s/1vNY8AzzLVkxbq90h2cW6NQ) 提取码：GAME
- [备用下载](https://share.weiyun.com/lkcBIbbi)

**压缩包解压密码**：fantasicqwb2021

挂载ISO文件：
```sh
mount -t iso9660 iso1995 /mnt/随便一个目录
```

挂载后，发现有一堆名为`flag_fxxxxx`（xxxx为数字）的文件。每个文件只包含一个字符。根据题目提示，查看十六进制数据发现每个文件名之前的`FFFFFFFF`之后跟着的2个字节不同，怀疑是序号或时间戳。

编写脚本提取并按顺序读取文件内容：

```python
import re

with open('iso1995_trunk_hex', 'r', encoding='utf-8') as fin:
    s = fin.read()

s = s.strip().replace(' ', '').replace('\n', '')

re_num = re.compile(r'FFFFFFFF(\w{4})08020000010000011A0066006C00610067005F006600(\w{18})')
l = re_num.findall(s)

filename_list = []
for i in l:
    name = int(i[0], 16)
    filename_list.append(name)

decode_str2 = ''
for i in filename_list:
    filename = f'./iso1995file/flag_f{str(i).rjust(5, "0")}'
    with open(filename, 'r', encoding='utf-8') as f:
        x = f.read()
        decode_str2 += x

print(decode_str2)
```

最终解密得到的flag为：`FLAG{Dir3ct0ry_jYa_n41}`

### EzTime

题目要求找到一个时间属性被修改过的文件。

**附件下载**
- [百度网盘](https://pan.baidu.com/s/1tr-n3qcYOomsSeM8fEUYVg) 提取码：GAME
- [备用下载](https://share.weiyun.com/UhRqdXaX)

**压缩包解压密码**：fantasicqwb2021

解压后得到`$LogFile`和`$MFT` (Master File Table) 文件。使用NTFS Log Tracker工具导入并查找相关信息，最终发现时间参数被修改的文件为：`{45EF6FFC-F0B6-4000-A7C0-8D1549355A8C}.png`。

### 问卷题

答案为：`flag{Welc0me_tO_qwbS5_Hope_you_play_h4ppily}`

### 内存取证

多次比赛中都出现了内存取证的题目，这里整理了一些常用的Volatility命令：

```sh
volatility -f winxp.raw imageinfo                      # 查询镜像基本信息
volatility -f winxp.raw --profile=WinXPSP3x86 pstree   # 查看进程树
volatility -f winxp.raw --profile=WinXPSP3x86 pslist   # 查看正在运行的进程
volatility -f winxp.raw --profile=WinXPSP3x86 memdump -p 324 --dump-dir .    # 将PID=324的进程dump出来
volatility -f winxp.raw --profile=WinXPSP3x86 procdump -p 324 --dump-dir .   # 将PID=324进程导出为exe
volatility -f winxp.raw --profile=WinXPSP3x86 dlldump -p 324 --dump-dir .    # 将PID=324进程的所有DLL导出
volatility -f winxp.raw --profile=WinXPSP3x86 getsids -p 324  # 查询指定进程的SID
volatility -f winxp.raw --profile=WinXPSP3x86 dlllist -p 324  # 查询指定进程加载过的DLL
volatility -f winxp.raw --profile=WinXPSP3x86 threads -p 324  # 列出当前进程中活跃的线程
volatility -f winxp.raw --profile=WinXPSP3x86 drivermodule    # 列出目标中驱动加载情况
volatility -f winxp.raw --profile=WinXPSP3x86 malfind -p 324 -D .   # 检索内存读写执行页
volatility -f winxp.raw --profile=WinXPSP3x86 iehistory # 检索IE浏览器历史记录
volatility -f winxp.raw --profile=WinXPSP3x86 joblinks  # 检索计划任务
volatility -f winxp.raw --profile=WinXPSP3x86 cmdscan   # 只能检索命令行历史
volatility -f winxp.raw --profile=WinXPSP3x86 consoles  # 抓取控制台下执行的命令以及回显数据
volatility -f winxp.raw --profile=WinXPSP3x86 cmdline   # 列出所有命令行下运行的程序
volatility -f winxp.raw --profile=WinXPSP3x86 connscan    # 检索已经建立的网络链接
volatility -f winxp.raw --profile=WinXPSP3x86 connections # 检索已经建立的网络链接
volatility -f winxp.raw --profile=WinXPSP3x86 netscan     # 检索所有网络连接情况
volatility -f winxp.raw --profile=WinXPSP3x86 sockscan    # TrueCrypt摘要
volatility -f winxp.raw --profile=WinXPSP3x86 timeliner # 尽可能多的发现目标主机痕迹
volatility -f winxp.raw --profile=WinXPSP3x86 hivelist                                       # 检索所有注册表蜂巢
volatility -f winxp.raw --profile=WinXPSP3x86 hivedump -o 0xe144f758                         # 检索SAM注册表键值对
volatility -f winxp.raw --profile=WinXPSP3x86 dumpregistry -D .                         # 导出注册表
volatility -f winxp.raw --profile=WinXPSP3x86 printkey -K "SAM\Domains\Account\Users\Names"  # 检索注册表中账号密码
volatility -f winxp.raw --profile=WinXPSP3x86 hashdump -y system地址 -s SAM地址               # dump目标账号Hash值
volatility -f winxp.raw --profile=WinXPSP3x86 printkey -K "SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"  # 查最后登录的用户
volatility -f winxp.raw --profile=WinXPSP3x86 userassist                                     # 查询程序运行次数
```

感谢队友带我一起玩 qwq！欢迎大家来[我的博客](https://miaotony.xyz/?from=anquanke)逛逛喵~

---