·styleCount：字符串样式的个数。
·flags：字符串的属性，可取值包括0x000（UTF-16）、0x001（字符串经过排序）、0X100（UTF-8）和它们的组合值。
·stringStart：字符串内容块相对于其头部的距离。
·stylesStart：字符串样式块相对于其头部的距离。
紧接着头部的是两个偏移数组，分别是字符串偏移数组和字符串样式偏移数组。这两个偏移数组的大小分别等于stringCount和styleCount的值，而每一个元素的类型都是无符号整型。整个字符中资源池结构如图6-5所示。
图6-5 字符串资源池结构
字符串资源池中的前两个字节为字符串长度，长度计算方法如下代码：
如果字符串编码格式为UTF-8则字符串以0X00作为结束符，UTF-16则以0X0000作为结束符。
字符串与字符串样式有一一对应的关系，也就是说，如果第n个字符串有样式，则它的样式描述位于样式块的第n个元素。字符串样式的结构包括如下两个结构体：ResStringPool_ref和ResStringPool_span。一个字符串可以对应多个ResStringPool_span和一个ResStringPool_ref。ResStringPool_span在前描述字符串的样式，ResStringPool_ref在后固定值为0XFFFFFFFF作为占位符。样式块最后会以两个值为0XFFFFFFFF的ResStringPool_ref作为结束。
6.2.4 Package数据块
接着资源项的值字符串资源池后面的部分就是Package数据块，这个数据块记录编译包的元数据，头部结构如下：
参数说明：
·header：Chunk的头部信息数据结构。
·id：包的id，等于Package Id，一般用户包的值Package Id为0X7F，系统资源包的Package Id为0X01。这个值很重要的。
·name：包名。
·typeString：类型字符串资源池相对头部的偏移。
·lastPublicType：最后一个导出的Public类型字符串在类型字符串资源池中的索引，目前这个值设置为类型字符串资源池的元素个数。在解析的过程中没发现它的用途。
·keyStrings：资源项名称字符串相对头部的偏移。
·lastPublicKey：最后一个导出的Public资源项名称字符串在资源项名称字符串资源池中的索引，目前这个值设置为资源项名称字符串资源池的元素个数。在解析的过程中没发现它的用途。
Package数据块的整体结构参见图6-6。
图6-6 Package数据块结构
其中Type String Pool和Key String Pool是两个字符串资源池，结构和资源项的值字符串资源池结构相同，分别对应类型字符串资源池和资源项名称字符串资源池。
再接下来的结构体可能是类型规范数据块或者类型资源项数据块，可以通过它们的Type来识别，类型规范数据块的Type为RES_TABLE_TYPE_SPEC_TYPE，类型资源项数据块的Type为RES_TABLE_TYPE_TYPE。
6.2.5 类型规范数据块
类型规范数据块用来描述资源项的配置差异性。通过这个差异性描述，就可以知道每一个资源项的配置状况。知道了一个资源项的配置状况之后，Android资源管理框架在检测到设备的配置信息发生变化之后，就可以知道是否需要重新加载该资源项。类型规范数据块是按照类型来组织的，也就是说，每一种类型都对应有一个类型规范数据块。其数据块头部结构如下：
参数说明：
·header：Chunk的头部信息结构。
·id：标识资源的Type ID。Type ID是指资源的类型ID。资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等若干种，每一种都会被赋予一个ID。
·res0：保留，始终为0。
·res1：保留，始终为0。
·entryCount：等于本类型的资源项个数，指名称相同的资源项的个数。
ResTable_typeSpec后面紧跟着的是一个大小为entryCount的uint32_t数组，每一个数组元素都用于描述一个资源项的配置差异性。
6.2.6 资源类型项数据块
资源类型项数据块用来描述资源项的具体信息，这样就可以知道每一个资源项的名称、值和配置等信息。资源类型项数据同样是按照类型和配置来组织的，也就是说，一个具有n个配置的类型一共对应有n个类型资源项数据块，其数据块头部结构如下：
参数说明：
·header：Chunk的头部信息结构。
·id：标识资源的Type ID。
·res0：保留，始终为0。
·res1：保留，始终为0。
·entryCount：等于本类型的资源项个数，指名称相同的资源项的个数。
·entriesStart：等于资源项数据块相对头部的偏移值。
·resConfig：指向一个ResTable_config，用来描述配置信息、地区、语言、分辨率等。
ResTable_type后接着是一个大小为entryCount的uint32_t数组，每一个数组元素都用于描述一个资源类型项数据块的偏移位置。紧跟在这个偏移数组后面的是一个大小为entryCount的ResTable_entry数组，每一个数组元素都用来描述一个资源项的具体信息。ResTable_entry的结构如下：
ResTable_entry根据flags的不同，后面跟随的数据也不相同，如果flags为1，则ResTable_entry是ResTable_map_entry。ResTable_map_entry继承自ResTable_entry，其结构如下：
ResTable_map_entry其后跟随count个ResTable_map类型的数组，ResTable_map的结构如下：
如果flags为0，则ResTable_entry其后跟随的是一个Res_value，描述一个普通资源的值，Res_value结构如下：
参数说明：
·size：ResValue的头部大小。
·res0：保留，始终为0。
·dataType：数据的类型，可以从上面的枚举类型中获取。
·data：数据对应的索引。
这里看到了有一个转化的方法，在解析AndroidManifest文件的时候也用到了这个方法。
6.3 解析代码
因为篇幅的原因，这里就不把所有的代码都粘贴出来了，后面会列出代码下载地址，首先读取resource.arsc文件到一个字节数组，然后开始解析。
6.3.1 解析头部信息
头部信息代码如下：
解析结果如下：
6.3.2 解析资源字符串内容
解析资源字符串代码如下：
这里有一个核心的方法parseStringPoolChunk：
这里在得到一个字符串的时候，需要得到字符串的开始位置和字符串的大小即可，这点和解析AndroidManifest.xml文件中的字符串原理是一样的。就是一个字符串的头两个字节中的最后一个字节是字符串的长度。这里在解析完字符串之后，需要用一个列表将其存储起来，后面要用到，需要通过索引来取字符串内容。
解析结果如下：
6.3.3 解析包信息
解析包信息代码如下：
这里看到有一个特殊的地方，就是最后两行，这是后面需要重点解析的两个内容，一个是资源值字符串的偏移值，另一个是资源类型字符串的偏移值。
解析结果如下：
6.3.4 解析资源类型的字符串内容
解析资源类型的字符串代码如下：
这里也是用parseStringPoolChunk方法进行解析的，同样也需要用一个字符串列表存储内容。
解析结果如下：
6.3.5 解析资源值字符串内容
解析资源值字符串内容代码如下：
这里也是使用parseStringPoolChunk方法来解析，解析完之后需要用一个字符串列表保存，后面需要使用索引值来访问。
解析结果如下：
6.3.6 解析正文内容
这里说到的正文内容就是ResValue值，是开始构建public.xml中的条目信息，和类型的分离不同的XML文件，所以这部分内容的解析工作有点复杂，如下所示：
这里有一个循环解析，有两个方法，一个是isEnd方法，另一个是isTypeSpec方法。
如果仔细看前面的图6-3，就可以看到后面的ResType和ResTypeSpec两个内容是交替出现的，直到文件结束。
所以isEnd方法就是判断是否到达文件结束位置：
还有一个方法就是判断是ResType还是ResTypeSpec，这可以通过Chunk中头部信息来区分的：
下面分别来解析ResTypeSpec和ResType这两个内容。
1.解析ResTypeSpec
主要得到Res的每个类型名：
解析结果如下：
2.解析ResType
主要得到每个res类型的所有条目内容：
看到这里，发现解析很复杂，和在讲解数据结构的时候一样，需要解析很多内容：ResValue、ResTableMap、ResTableMapEntry、ResTableEntry、ResConfig。关于每个数据结构如何解析这里就不多说了，就是读取字节即可。这里有一个核心的代码：
判断flag的值来进行不同的解析操作。需要注意这点。
解析结果如下：
看到解析结果还是挺欣慰的，因为最难的地方解析成功了，这就是想要的结果。这里需要解释的是，有了这些值构建public.xml内容和各个类型的XML内容就很简单了。
注意，这里ResId的构造方法是：
可以看到一个int类型的resId，它的最高两个字节表示packId，系统资源id是0x01，普通应用资源id是0x7F。它的中间的两个字节表示resTypeId，类型id，这个值从0开始，比如例子中第一个类型是attr，那么它的resTypeId就是00。它的最低四个字节表示这个资源的顺序id，从1开始，逐渐累加1。
提示：项目下载地址：https://github.com/fourbrother/parse_androidarsc
上面就解析完了所有的resource.arsc文件，解析resource.arsc文件格式的目的有两个：
·在使用apktool工具进行反编译的时候，经常出现一些莫名的异常信息，最多的就是NotFound ResId 0x0000XXX这些内容。那么这时候就需要修复，当然可以得到apktool的源码来解决这个问题，还可以使用自己写的这套解析代码。
·解析resource.arsc文件之后，对resource.arsc文件格式如果有了解，可以对资源文件名进行混淆，从而减小apk包大小。因为META-INF文件夹下的三个文件体积很大，原因就是它们内部保存了每个资源名称，在项目中有时候为了不造成冲突，就把资源名起的很长，那么这样就会导致apk的包很大。同样resource.arsc文件也会很大，因为资源名都是需要保存的，但是Android中的混淆是不会对资源文件进行混淆的，所以这时候就可以通过这个思路来减小包apk的大小了。
在前面一章中已经介绍了关于aapt命令的用法了，这里依然可以利用aapt命令解析arsc文件，用aapt命令很简单：
将输入的结果定向到demo.txt中，如图6-7所示。
图6-7 用aapt命令输出结果
看到内容就是上面解析的AndroidManifest.xml内容，所以这也是一个解析方法。为何aapt命令最后说呢？因为了解AndroidManifest.xml格式能更好地掌握解析方法。以后记得有一个aapt命令就好了，它的用途很多，可以单独编译成一个resource.arsc文件来，后面会用到这个命令。
6.4 本章小结
Android中的资源文件最后编译成resource.arsc文件，本章介绍了这个文件的格式，在后续的安全防护应用和逆向应用中都有很重要的作用。
第7章 dex文件格式解析
前几章介绍了so文件、AndroidManifest文件、resources文件，本章将介绍dex文件格式的解析。了解dex文件格式对后面的应用安全防护非常有用。
7.1 dex文件格式