address 2: 166.111.69.53
第 6 章  berkeley 套接字
- 147 -
如果你想把结果保存下来，那么你可以在每次调用 inet_ntoa() 后调用 strcpy() 将结果存到另外
一个你自己的字符串中。
在后面，将会介绍怎样把域名转换为 IP。
6.6  基本套接字调用
Linux 支持伯克利（BSD）风格的套接字编程．它同时支持面向连接和不连接类型的
套接字。
在面向连接的通讯中服务器和客户机在交换数据之前先要建立一个连接．再不连接通
讯中数据被作为信息的一部分被交换．无论那一种方式，服务器总是最先启动，把自己绑
定（Banding）在一个套接字上，然后侦听信息．服务器究竟怎样试图去侦听就得依靠你编
程所设定的连接的类型了。
你需要了解的一些系统调用：
socket()
bind()
connect()
listen()
accept()
send()
recv()
sendto()
recvfrom()
close()
shutdown()
setsockopt()
getsockopt()
getpeername()
getsockname()
gethostbyname()
gethostbyaddr()
getprotobyname()
fcntl()
我们将在以下详细介绍这些系统调用。
6.6.1  socket ( )  函数
取得套接字描述符！（记得我们以前说过的吗？它其实就是一个文件描述符）
socket 函数的定义是下面这样子的：
#include 
#include 
int socket（int domain , int type , int protocol）;
- 148 -
Linux网络编程
你是否对 int domain 和 int type、int protocol 有些疑惑呢？调用 socket()的参数是什么
呢？
首先，domain 需要被设置为 “ AF_INET”，就像上面的 struct sockaddr_in。然后，type
参数告诉内核这个 socket 是什么类型，“ SOCK_STREAM” 或是“ SOCK_DGRAM”。最后，
只需要把 protocol 设置为 0 。
注意：事实上， domain 参数可以取除了“
AF_INET ” 外的很多值，types 参数也可以取除了
“ SOCK_STREAM” 或“ SOCK_DGRAM” 的另外类型。具体可以参考 socket 的 man pages（帮助页）。
套接字创建时没有指定名字．客户机用套接字的名字读写它。这就是下面的绑定函数
所要做之事．
socket()函数只是简单的返回一个你以后可以使用的套接字描述符。如果发生错误，
socket()函数返回 –1 。全局变量 errno 将被设置为错误代码。（可以参考 perror() 的 man
pages）
6.6.2  bi nd( )  函数
bind()函数可以帮助你指定一个套接字使用的端口。
当你使用 socket() 函数得到一个套接字描述符，你也许需要将 socket 绑定上一个你的
机器上的端口。
当你需要进行端口监听 listen()操作，等待接受一个连入请求的时候，一般都需要
经过这一步。比如网络泥巴（ＭＵＤ），Telnet a.b.c.d 4000。
如果你只是想进行连接一台服务器，也就是进行 connect() 操作的时候，这一步
并不是必须的。
bind()的系统调用声明如下：
#include 
#include 
int bind (int sockfd , struct sockaddr *my_addr , int addrlen) ;
参数说明：
sockfd 是由 socket()函数返回的套接字描述符。
my_addr 是一个指向 struct sockaddr 的指针，包含有关你的地址的信息：名称、
端口和 IP 地址。
addrlen 可以设置为 sizeof(struct sockaddr)。
好，下面我们看一段程序：
#include 
#include 
#include 
#define MYPORT 4000
main()
{
int sockfd ;
第 6 章  berkeley 套接字
- 149 -
struct sockaddr_in my_addr ;
sockfd = socket(AF_INET, SOCK_STREAM, 0); 
/* 在你自己的程序中 */
/* 要进行错误检查！! */
my_addr.sin_family = AF_INET ; 
/* 主机字节顺序 */
my_addr.sin_port = htons（MYPORT）; 
/* 网络字节顺序，短整型 */
my_addr.sin_addr.s_addr = inet_addr(“166.111.69.52”) ;
bzero(&(my_addr.sin_zero), 8); 
/* 将整个结构剩余*/
/* 部分数据设为 0 */
/* 不要忘记在你自己的程序中加入判断 bind 错误的代码！！ */
bind (sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr)）;
⋯ ⋯
⋯ ⋯
这里有一些值得注意的代码段：
my_addr.sin_port 是网络字节顺序。
my_addr.sin_addr.s_addr 也是网络字节顺序。
代码段包含的头文件，在不同的系统中可能有一点小小的区别。（不过在 Linux
中是如此）如果并非如此，你可以查一查 man pages 来获取帮助。
最后，bind()可以在程序中自动获取你自己的 IP 地址和端口。
代码如下：
my_addr.sin_port = 0 ; 
/* 随机选择一个端口 */
my_addr.sin_addr.s_addr = INADDR_ANY ;
/* 使用自己的地址 */
如上，通过设置 my_addr.sin_port 为 0，bind()可以知道你要它帮你选择合适的端口；
通过设置 my_addr.sin_addr.s_addr 为 INADDR_ANY，bind()知道你要它将 s_addr 填充为运
行这个进程的机器的 IP。这一切都可以要求 bind()来自动的帮助你完成。
如果你注意到了一些细节的话，你可能会发现我并没有将 INADDR_ANY 转换为网络
字节顺序！是这样的，INADDR_ANY 的值为 0，0 就是 0，无论用什么顺序排列位的顺序，
它都是不变的。
有读者会想了，因为我用的 INADDR_ANY 是一个#define，那么如果将我的程序移植
到另外一个系统，假如那里的 INADDR_ANY是这样定义的：#define INADDR_ANY 100，
那么我的程序不是就会不运行了吗？那么下面这段代码就 OK 了
my_addr.sin_port = htons(0); 
/* 随机选择一个未用的端口 */
my_addr.sin_addr.s_addr = htonl(INADDR_ANY) ;
/* 使用自己的IP地址 */
现在我们已经是这么的严谨，对于任何数值的 INADDR_ANY调用 bind 的时候就都不
会有麻烦了。
当 bind()函数调用错误的时候，它也是返回–1 作为错误发生的标志。errn 的值为错误
代码。
另外一件必须指出的事情是：当你调用 bind()的时候，不要把端口数设置的过小！小
于 1024 的所有端口都是保留下来作为系统使用端口的，没有 root 权利无法使用。你可以
使用 1024 以上的任何端口，一直到 65535 ：你所可能使用的最大的端口号（当然，你还
- 150 -
Linux网络编程
要保证你所希望使用的端口没有被其他程序所使用）。
最后注意有关 bind()的是：有时候你并不一定要调用 bind()来建立网络连接。比如你只
是想连接到一个远程主机上面进行通讯，你并不在乎你究竟是用的自己机器上的哪个端口
进行通讯（比如 Telnet），那么你可以简单的直接调用 connect()函数，connect()将自动寻找
出本地机器上的一个未使用的端口，然后调用 bind()来将其 socket 绑定到那个端口上。
6.6.3  connect ( ) 函数
让我们花一点时间来假设你是一个 Telnet 应用程序。你的使用者命令你建立一个套接
字描述符。你遵从命令，调用了 socket()。然后，使用者告诉你连接到 “ 166.111.69.52”
的 23 端口（标准的 Telnet 端口）⋯ ⋯ 你应该怎么做呢？
你很幸运：Telnet 应用程序，你现在正在阅读的就是套接字的进行网络连接部分：
connect()。
connect() 函数的定义是这样的：
#include 
#include 
int connect (int sockfd, struct sockaddr *serv_addr, int addrlen);
connect()的三个参数意义如下：
sockfd ：套接字文件描述符，由 socket()函数返回的。
serv_addr 是一个存储远程计算机的 IP 地址和端口信息的结构。
addrlen 应该是 sizeof(struct sockaddr)。
下面让我们来看看下面的程序片段：
#include 
#include 
#include 
#define DEST_IP “166.111.69.52”
#define DEST_PORT 23
main()
{
int sockfd ;
/* 将用来存储远程信息 */
struct sockaddr_in dest_addr ; 
/* 注意在你自己的程序中进行错误检查！！ */
sockfd = socket（AF_INET, SOCK_STREAM, 0）; 
/* 主机字节顺序 */
dest_addr.sin_family = AF_INET ; 
/* 网络字节顺序，短整型 */
dest_addr.sin_port = htons（DEST_PORT）;
第 6 章  berkeley 套接字
- 151 -
dest_addr.sin_addr.s_addr = inet_addr（DEST_IP）;
/* 将剩下的结构中的空间置 0 */
bzero(&(dest_addr.sin_zero), 8）;
/* 不要忘记在你的代码中对 connect()进行错误检查！！ */
connect(sockfd, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr));
⋯ ⋯
⋯ ⋯
再次强调，一定要检测 connect()的返回值：如果发生了错误（比如无法连接到远程主
机，或是远程主机的指定端口无法进行连接等）它将会返回错误值 –1 。 全局变量 errno
将会存储错误代码。
另外，注意我们没有调用 bind()函数。基本上，我们并不在乎我们本地用什么端口来
通讯，是不是？我们在乎的是我们连到哪台主机上的哪个端口上。Linux 内核自动为我们
选择了一个没有被使用的本地端口。
在面向连接的协议的程序中,服务器执行以下函数：
调用 socket()函数创建一个套接字。
调用 bind()函数把自己绑定在一个地址上。
调用 listen()函数侦听连接。
调用 accept()函数接受所有引入的请求。
调用 recv()函数获取引入的信息然后调用 send()回答。
6.6.4  l i st en( )  函数
listen()函数是等待别人连接，进行系统侦听请求的函数。当有人连接你的时候，你有
两步需要做：通过 listen()函数等待连接请求，然后使用 accept()函数来处理。（accept()函数
在下面介绍）。
listen()函数调用是非常简单的。函数声明如下：
#include 
int listen(int sockfd, int backlog);
listen()函数的参数意义如下：
sockfd 是一个套接字描述符，由 socket()系统调用获得。
backlog 是未经过处理的连接请求队列可以容纳的最大数目。
backlog 具体一些是什么意思呢？每一个连入请求都要进入一个连入请求队列，等待
listen 的程序调用 accept()（accept()函数下面有介绍）函数来接受这个连接。当系统还没有
调用 accept()函数的时候，如果有很多连接，那么本地能够等待的最大数目就是 backlog 的
数值。你可以将其设成 5 到 10 之间的数值（推荐）。
像上面的所有函数一样， listen()如果返回 –1 ，那么说明在 listen()的执行过程中发生
了错误。全局变量 errno 中存储了错误代码。
那么我们需要指定本地端口了，因为我们是等待别人的连接。所以，在 listen()函数调
用之前，我们需要使用 bind() 函数来指定使用本地的哪一个端口数值。
- 152 -
Linux网络编程
如果你想在一个端口上接受外来的连接请求的话，那么函数的调用顺序为：
socket() ;
bind() ;
listen() ;
/* 在这里调用 accept()函数 */
⋯ ⋯
下面将不给出例程，因为 listen()是非常容易理解的。下面的 accept()函数说明中的例
程中，有 listen()的使用。
6.6.5  accept ( ) 函数
函数 accept()有一些难懂。当调用它的时候，大致过程是下面这样的：
有人从很远很远的地方尝试调用 connect()来连接你的机器上的某个端口（当然是
你已经在 listen()的）。
他的连接将被 listen 加入等待队列等待 accept()函数的调用（加入等待队列的最多
数目由调用 listen()函数的第二个参数 backlog 来决定）。
你调用 accept()函数，告诉他你准备连接。
accept()函数将回返回一个新的套接字描述符，这个描述符就代表了这个连接！
好，这时候你有了两个套接字描述符，返回给你的那个就是和远程计算机的连接，而
第一个套接字描述符仍然在你的机器上原来的那个端口上 listen()。
这时候你所得到的那个新的套接字描述符就可以进行 send()操作和 recv()操作了。
下面是 accept()函数的声明：
#include 
int accept(int sockfd, void *addr, int *addrlen);
accept()函数的参数意义如下：
sockfd 是正在 listen() 的一个套接字描述符。
addr 一般是一个指向 struct sockaddr_in 结构的指针；里面存储着远程连接过来的
计算机的信息（比如远程计算机的 IP 地址和端口）。
addrlen 是一个本地的整型数值，在它的地址传给 accept() 前它的值应该是
sizeof(struct sockaddr_in)；accept()不会在 addr 中存储多余 addrlen bytes 大小的数据。如果
accept()函数在 addr 中存储的数据量不足 addrlen，则 accept()函数会改变 addrlen 的值来反
应这个情况。
读者现在应该想到：如果调用 accept()失败的话，accept()函数会返回 –1 来表明调用
失败，同时全局变量 errno 将会存储错误代码。
下面我们来看一段程序片段：
#include 
#include 
#include 
/* 用户连接的端口号 */
第 6 章  berkeley 套接字
- 153 -