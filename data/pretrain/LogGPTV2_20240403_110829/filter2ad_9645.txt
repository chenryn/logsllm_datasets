今年pwn2own上的linux kernel提权漏洞是linux kernel bpf模块的漏洞
---CVE-2020-8835，更早听说过的与bpf相关的漏洞是CVE-2017-16995。然后在上海参加GeekPwn
云靶场线下挑战赛的时候，也是一道bpf相关的内核题。我和我们队长通宵学习相关知识，最后拿到了这道题全场唯一的一血。
然后紧接着在11月1号，又有国外研究者爆出了bpf的又一个漏洞--CVE-2020-27194，也是内核提权。CVE-2020-27194是linux
kernel
5.8.x的通杀洞，和GeekPwn的kernel题一个环境。事后和队长感慨，还好这个洞晚了几天公开，不然我们就拿不到第2名的好名次了（同时损失奖金）。
360团队和漏洞研究者都已经写了CVE-2020-27194的writeup，但是没公布exp（那我就公开一下？）。这个漏洞和GeekPwn那道题的利用原理类似，于是想一起写一篇Writeup描述一下这种漏洞的利用。
## BPF基础
关于BPF的相关基础知识，ZDI上CVE-2020-8835的[Writeup](https://www.thezdi.com/blog/2020/4/8/cve-2020-8835-linux-kernel-privilege-escalation-via-improper-ebpf-program-verification)已经写的足够清晰。然后另外比较一个重要的资料就是
[kernel的文档](https://www.kernel.org/doc/Documentation/networking/filter.txt)，所以这里不再复述过多。
简单地说, 就是内核里实现了bpf字节码的JIT compiler， 用户可以在用户态编写bpf代码然后经Jit
compiler后执行。但是如果不加以限制，就相当于用户可以在内核执行任意代码，显然不符合权限管理模型。于是需要有一个verify的机制（相当于静态程序分析），去检查一些不合法的行为。
其中一个很重要的点就是会对常数变量设置一个取值范围。`struct bpf_reg_state`里存储着这样8个变量：
    s64 smin_value; /* minimum possible (s64)value */
        s64 smax_value; /* maximum possible (s64)value */
        u64 umin_value; /* minimum possible (u64)value */
        u64 umax_value; /* maximum possible (u64)value */
        s32 s32_min_value; /* minimum possible (s32)value */
        s32 s32_max_value; /* maximum possible (s32)value */
        u32 u32_min_value; /* minimum possible (u32)value */
        u32 u32_max_value; /* maximum possible (u32)value */
在verify阶段，当指针和常数进行各种数学运算，如addr+x时，会使用x的取值范围去验证这样的运算是否越界。
所以，如果在verify阶段，常数变量的取值范围计算存在逻辑上的漏洞，就会导致该变量实际运行时的值不在取值范围内。
假设用户申请了一块0x1000的map，然后用户想读写map+x位置的内存，x是常数变量。由于漏洞，verify阶段计算x的取值范围是
`0var_off);
        bool dst_known = tnum_subreg_is_const(dst_reg->var_off);
        struct tnum var32_off = tnum_subreg(dst_reg->var_off);
        s32 smin_val = src_reg->smin_value;
        u32 umin_val = src_reg->umin_value;
        /* Assuming scalar64_min_max_or will be called so it is safe
         * to skip updating register for known case.
         */
        if (src_known && dst_known)
            return;
        /* We get our maximum from the var_off, and our minimum is the
         * maximum of the operands' minima
         */
        dst_reg->u32_min_value = max(dst_reg->u32_min_value, umin_val);
        dst_reg->u32_max_value = var32_off.value | var32_off.mask;
        if (dst_reg->s32_min_value s32_min_value = S32_MIN;
            dst_reg->s32_max_value = S32_MAX;
        } else {
            /* ORing two positives gives a positive, so safe to
             * cast result into s64.
             */
            dst_reg->s32_min_value = dst_reg->umin_value;
            dst_reg->s32_max_value = dst_reg->umax_value;
        }
    }
在进行两个有符号正数or运算时，
最后2行代码将寄存器的64位无符号数的取值范围辅助给了32位有符号数的取值范围。这是一个很明显的错误，一个常数变量x，如果它64位无符号数的取值范围是
`1 0 ; jmp 1 ; 
            BPF_EXIT_INSN(),
            // now  1 >1    verify:0   fact: we can let r5=2  then r6=1 
            ......
    }
bpf程序后面的代码及利用技巧和CVE-2020-8835的exp完全一样，后续的[利用原理](https://xz.aliyun.com/t/7690#toc-2)。只需要根据不同版本的内核调一下array_map_ops和init_pid_ns的偏移即可，完整的[exp](https://github.com/willinin/CVE-2020-27194-exp/blob/main/CVE-2020-27194.c)。
利用效果：  
)
## GeekPwn 2020 final kernel
题目给了patch过的linux kernel 5.8.6 内核源码，diff找到修改的位置：
    5277,5280c5277,5292
    smin_value += smin_val;
    smax_value += smax_val;
    umin_value += umin_val;
    umax_value += umax_val;
    ---    >  if (signed_add_overflows(dst_reg->smin_value, smin_val) ||
    >      signed_add_overflows(dst_reg->smax_value, smax_val)) {
    >   dst_reg->smin_value = S64_MIN;
    >   dst_reg->smax_value = S64_MAX;
    >  } else {
    >   dst_reg->smin_value += smin_val;
    >   dst_reg->smax_value += smax_val;
    >  }
    >  if (dst_reg->umin_value + umin_val       dst_reg->umax_value + umax_val    dst_reg->umin_value = 0;
    >   dst_reg->umax_value = U64_MAX;
    >  } else {
    >   dst_reg->umin_value += umin_val;
    >   dst_reg->umax_value += umax_val;
    >  }
    5789c5801
     smax_val) {
    ---    >       smin_val > smax_val || umin_val > umax_val) {
根据行数，发现patch的删掉了scalar_min_max_add函数，也就是64位数加法运算的整数溢出检查，以及adjust_scalar_min_max_vals函数64位无符号数
umin_val>umx_val的检查。 很明显，我们只要构造加法上的整数溢出即可，即令x的取值范围为`0= 0 ; jmp 1 ; 
         BPF_EXIT_INSN(),
           // now  0 >1    verify: believe r6=0   fact： we can input r5=2, then r6=1
           ......
    }
实际在做这道题的时候，后面利用是存在大坑的。因为出题人在编译内核的时候开启了结构体随机化。内核结构体里的变量的偏移和正常编译出来的内核不一样，于是需要看内核函数的汇编去计算各种偏移，十分繁琐且毫无知识点。
赛后和出题人吐槽了一下，结构体随机化除了恶心人毫无意义。
完整[exp](https://github.com/willinin/CVE-2020-27194-exp/blob/main/geekpwn2020_final.c).
## 总结
linux kernel
bpf模块verify部分的代码还是比较容易读懂，且逻辑也不复杂，上述漏洞都是verify时对常数变量取值范围的逻辑错误导致的。更为重要的是，CVE-2020-27194发现者提出的fuzz方法值得我们去思考和学习。思考的点是其实该fuzz方法并没有什么高深的理论，用的是很朴素的方法，可为什么那么多复现CVE-2020-8835漏洞的人没有想到并实现（包括我这个菜鸡）？我们需要由点及面的思考方式去发现更多的漏洞，且勤动手。
## References