Web 开发经典丛书
Python 微服务开发
[法] 塔里克 • 齐亚德(Tarek Ziadé) 著
和坚 张渊 译
北 京
Copyright Packt Publishing 2017. First published in the English language under the title ‘Python
Microservices Development – (9781785881114).
北京市版权局著作权合同登记号 图字：01-2018-4395
本书封面贴有清华大学出版社防伪标签，无标签者不得销售。
版权所有，侵权必究。侵权举报电话：010-62782989 13701121933
图书在版编目(CIP)数据
Python微服务开发 / (法)塔里克 • 齐亚德(Tarek Ziadé) 著；和坚，张渊 译. —北京：清华大学出版
社，2019
书名原文：Python Microservices Development
ISBN 978-7-302-52412-0
Ⅰ. ①P… Ⅱ. ①塔… ②和… ③张… Ⅲ. ①软件工具—程序设计 Ⅳ. ①TP311.561
中国版本图书馆CIP数据核字(2019)第041781号
责任编辑：王 军 韩宏志
封面设计：周晓亮
版式设计：孔祥峰
责任校对：牛艳敏
责任印制：李红英
出版发行：清华大学出版社
网 址：http://www.tup.com.cn，http://www.wqbook.com
地 址：北京清华大学学研大厦A座 邮 编：100084
社 总 机：010-62770175 邮 购：010-62786544
投稿与读者服务：010-62776969，PI:EMAIL
质 量 反 馈：010-62772015，PI:EMAIL
印 刷 者：北京鑫丰华彩印有限公司
装 订 者：三河市溧源装订厂
经 销：全国新华书店
开 本：170mm×240mm 印 张：17.75 字 数：358千字
版 次：2019年4月第1版 印 次：2019年4月第1次印刷
定 价：59.00元
———————————————————————————————————————————
产品编号：080803-01
译 者 序
近年来，“微服务”技术风靡全球。随着传统互联网和移动互联网的蓬勃发展，企
业在快速迭代中积累了大规模服务化开发和运维经验。为通过提高IT的响应能力来提
升竞争力，微服务架构成为传统企业的“救命稻草”。开发团队在变革中改造和重建技
术架构，企业管理者们切实感受到微服务带来的巨大好处。
但不可否认，微服务架构带来了额外复杂性。对开发者提出了更高的要求，开发
者不仅要编写业务代码，还需要具有部署和运维等能力。
十多年前，当Ruby on Rails和Django发布时，人们热衷于追逐包罗万象、开箱
即用的全栈式 Web 框架，只需要运行几行脚手架命令，就能快速编写一个包含 Web
页面和数据存储的Todo List应用。但时至今日，那些小巧灵便的框架变得越来越受欢
迎，开发者更愿意选择“微框架”，通过谨慎地综合运用不同工具来开发应用；随着开
发的进行，灵活地升级或替换其中的某些部分。Flask即是这种微框架之一。
本书模拟真实场景，从一个单体 Flask 应用开始，提出问题，分析和比较方案，
作出权衡，最终解决问题(可能引出又一个“问题”——但并非当前的优先级)，逐渐拆
分出多个微服务，解决随之而来的部署、监控、安全等新问题，在最后利用异步编程
优化性能。期间牵涉大量工具，但本书并未详细介绍它们，只是“点到为止”。本书内
容紧贴实用，面向想要开阔眼界和动手实践的开发者和架构师。通过阅读本书，读者
将能对微服务开发实践有系统性认识，以便在开发早期进行规划和技术选型。
这里要感谢清华大学出版社的编辑们，他们为本书的翻译投入了巨大热情并付出
了很多心血。没有他们的帮助和严谨的要求，本书不可能顺利付梓。
本书涉及大量的实践和专业术语，虽然译者倾力而为，力求译文准确易懂。但毕
竟水平有限，失误在所难免，如有任何意见和建议，请不吝指正！本书主要章节由和
坚和张渊翻译，参与本书翻译的还有张坤、吴邦、刘易斯、赵汝达、何睿智、刘娟娟、
罗冬哲等。
最后，希望读者能通过本书对微服务开发有更深入的理解，并能继续探索解决已
知问题的工具和方法。
作 者 简 介
Tarek Ziadé是一位Python 开发人员，在Mozilla的服务团队工作，已使用法语和
英语撰写多本Python书籍。Tarek创建了一个名为Afpy的法国Python用户组，现居
住在法国第戎市郊区。在工作之余，Tarek不忘陪伴家人。他另有两个爱好：跑步和吹
小号。
可访问Tarek的个人博客(Fetchez le Python)，并在Twitter上关注他(@tarek_ziade)。
还可在亚马逊上找到他撰写的另一本书Expert Python Programming，该书已由 Packt
出版。
感谢Packt团队，以及帮助过我的以下技术精英：Stéfane Fermigier、William
Kahn-Greene、Chris Kolosiwsky、Julien Vehent和Ryan Kelly。
感谢Amina、Milo、Suki和Freya给予我的爱和耐心支持。
希望在阅读时，你能享受到和我写本书时同样的乐趣！
审校者简介
自20世纪90年代末以来，William Kahn-Greene一直在编写Python代码和构建
Web应用。
他在Mozilla crash ingestion pipeline的crash-stats小组工作，并维护着多种Python
库，如bleach。在等待CI测试代码改动时，William会摆弄木制品，照料他种的番茄，
并烹饪4个人的饭食。
序 言
7年前，当我开始在Mozilla工作时，为一些Firefox功能编写Web服务。它们中
的一些最终蜕变成微服务。这种变化是随着时间的推移逐渐发生的。促成这种转变的
第一个因素是，我们将所有服务转移到云厂商上，并开始与一些第三方服务交互。在
云服务上托管应用时，微服务架构成为自然之选。另一个驱动因素是 Firefox 的
Account 项目。我们想在Firefox上为用户提供独立身份，以便用户与我们的服务交互。
这样一来，所有服务必须与同一个身份提供方(Identity Provider)交互，一些服务器端部
分开始重新设计为微服务，以便更高效地工作。
许多Web开发者有类似经历，或正在经历这个过程。我也相信Python是用来编
写小型和高效微服务的最佳语言。Python生态系统生机勃勃，最新的Python 3的特性
让它在这个领域中能与过去5年中迅猛发展的Node.js一决高下。
这就是本书的全部内容。我想分享自己使用 Python 编写微服务的经验，并为此
创建了一个简单示例——Runnerly。它位于GitHub，可供你学习。你可在GitHub上与
我直接交流，请指出你看到的任何错误，我们可共同切磋如何编写优秀的Python应用。
前 言
为将Web应用部署到云，代码需要与很多第三方服务进行交互。使用微服务架构，
可构建能管理这些交互的大型应用。但这带来一系列挑战，每项挑战都有独特的复杂
性。这本通俗易懂的指南旨在帮助你克服这些挑战。书中将介绍如何以最合理的方式
设计、开发、测试和部署微服务，紧贴实用的示例将帮助 Python 开发者用最高效的
方式创建Python微服务。阅读完本书，读者将掌握基于小型标准单元构建大型应用的
技能。本书将使用成熟的最佳实践，并分析如何规避常见陷阱。此外，对于正将单体
设计转换成新型“微服务”开发范式的社区开发者来说，本书也颇具价值。
本书内容
第1章“理解微服务”定义什么是微服务，以及微服务在现代Web应用中扮演的
角色。还介绍Python，并解释为什么用Python构建微服务是上佳之选。
第2章“Flask框架”介绍Flask的主要特性。通过一个Web应用示例来展示这个
框架，Flask是构建微服务的基础。
第3章“良性循环：编程、测试和写文档”，介绍测试驱动开发方法和持续集成方
法，以及在构建和打包Flask应用的实践中如何使用这些方法。
第4章“设计Runnerly”基于应用特性和用户案例，首先构建一个单体应用，然
后讲述如何将其拆解成微服务，并实现微服务之间的数据交互。还将介绍用来描述
HTTP API的Open API 2.0(ex-Swagger)规范。
第5章“与其他服务交互”介绍一个服务如何与后台服务进行交互，如何处理网
络拆分问题，以及其他交互问题，另外介绍如何独立地测试一个服务。
第6章“监控服务”介绍如何在代码中添加日志和指标，清晰地掌控全局，确定
发生了什么，并能追查问题和了解服务利用率。
第7章“保护服务”介绍如何保护微服务，如何处理用户身份验证、服务间身份
验证以及用户管理。还介绍针对服务的欺诈和滥用，以及如何缓解这些问题。
Python微服务开发
第8章“综合运用”描述在终端用户界面中，如何设计和构建一个使用微服务的
JavaScript应用。
第9章“打包和运行Runnerly”描述如何打包、构建和运行整个应用。开发者必
须能够将应用打包到一个开发环境中，确保所有部分都可以运行。
第 10 章“容器化服务”解释什么是虚拟化，如何使用Docker，如何将服务做成
Docker镜像。
第11章“在AWS上部署”首先介绍当前的云服务厂商和AWS世界。然后演示
如何使用AWS来实例化一个基于微服务架构的应用。另外介绍CoreOS，这是一个专
门用于在云上发布Docker容器的Linux分支。
第12章“接下来做什么？”总结全书，在如何构建独立于云厂商和虚拟化技术的
微服务问题上，给出一些提示来避免将鸡蛋放入同一个篮子里。还将帮助你巩固第 9
章中学到的知识。
阅读本书需要准备什么
要执行本书的命令和应用，系统需要安装Python 3.x、virtualenv 1.x和Docker CE。
正文中也会根据需要详细列出安装说明。
读者对象
作为一名开发者，如果你了解Python基本概念、命令行，以及基于HTTP的应用
设计原则，并想学习如何构建、测试、扩展和管理Python 3微服务，那么本书适合你。
阅读本书，你不必具有用Python编写微服务的任何经验。
本书约定
代码块按以下样式显示：
import time
def application(environ, start_response):
headers = [('Content-type', 'application/json')]
start_response('200 OK', headers)
return bytes(json.dumps({'time': time.time()}), 'utf8')
X
前 言
会用粗体来显示需要重点关注的代码：
from greenlet import greenlet
def test1(x, y):
z = gr2.switch(x+y)
print(z)
任何命令行的输入或输出都按以下样式显示：
docker-compose up
警告或重要注释会这样显示。
提示和技巧会这样显示。
读者反馈
欢迎读者提出反馈意见，这样我们能了解你对本书的看法，喜欢什么或不喜欢什
么。反馈意见很重要，能帮助我们开发读者真正想了解的主题。只需要发邮件给
PI:EMAIL，并在邮件标题中提及本书，即可将反馈意见发给我们。
如果你是某个主题的专家，有兴趣写书，或愿意为写书做贡献，请到
www.packtpub.com/authors页面查阅作者指南。
下载示例代码
本书相关的代码放在GitHub上，网址是https://github.com/PacktPublishing/Python-
Microservices-Development。还有其他代码包和视频，欢迎通过 https://github.com/
PacktPublishing/页面下载。
另外，读者可扫描本书封底的二维码直接下载代码。
下载文件后，用以下工具的最新版本来解压缩：
● 在Windows系统中使用WinRAR /7-Zip。
● 在Mac系统中使用Zipeg /iZip /UnRarX。
● 在Linux系统中使用7-Zip /PeaZip。
XI
Python微服务开发
勘误
尽管我们已经非常小心地确保内容的准确性，但还是会发生失误。如果你在书中
发现了错误，可能是文本错误或代码错误，你能向我们报告此事，我们将不胜感激。
通过这样做，可减少其他读者的阅读痛苦，并帮助我们改进本书的后续版本。如果你
发现任何勘误，请访问 http://www.packtpub.com/submit-errata 页面来报告它们，选择
你购买的书，单击Errata Submission Form链接，输入勘误的详细信息。一旦填写的勘
误被确认，你的提交将被接受，然后勘误将被上传到我们的网站上，或添加到任何现
有的勘误列表中。现有的勘误列表位于Errata标题的下面。
要查看之前提交的勘误，可访问https://www.packtpub.com/books/content/support，
然后在查找输入框内输入书名。要查找的信息会显示在Errata下面。
盗版行为
互联网上的盗版行为是所有媒体一直头疼的问题。在Packt，我们将尽力处理盗版
问题。我们会非常认真地对待版权和许可证的保护。如果你在互联网上遇到任何我们
作品的非法拷贝，请立即向我们提供网址或网站名称，以便我们能采取补救措施。
请通过 PI:EMAIL 联系我们，并附带上有侵权嫌疑的材料。
非常感激你能帮助保护我们的作者以及我们的工作。这样我们可持续为你带来有
价值的内容。
问题
关于本书的任何问题，欢迎通过PI:EMAIL联系。
XII
目 录
路由匹配.........................26
2.2.1