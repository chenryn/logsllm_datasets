### User Space Tool and Future Integration

The user space tool `wg(8)` is currently used for managing WireGuard, but future plans involve integrating this functionality directly into `ip(8)`. The RTNL (Routing Netlink) subsystem allows the WireGuard virtual interface to be moved between network namespaces. This enables the sending and receiving sockets (for the outer UDP packets) to be created in one namespace, while the interface itself remains in another. For example, a Docker or rkt container can have a WireGuard interface as its sole network interface, with the actual encrypted packets being sent out of the host's real network interface, thus providing end-to-end authenticated encryption.

### Data Structures and Primitives

While the Linux kernel already includes two sophisticated routing table implementations—an LC-trie for IPv4 and a radix trie for IPv6—these are tightly coupled with the FIB (Forwarding Information Base) routing layer and not reusable for other purposes. Therefore, a minimal routing table was developed for WireGuard. The authors successfully implemented the cryptokey routing table using an allotment routing table, an LC-trie, and a standard radix trie, each offering slightly different performance characteristics. Ultimately, the simplicity and performance of the radix trie, combined with the ability to implement it with lock-less lookups using the RCU (Read-Copy-Update) system, made it the preferred choice. Every outgoing packet through WireGuard uses this table to look up the destination peer, and every incoming packet's validity is checked against this table, making performance a critical factor.

For handshake initiation messages, the responder must look up the decrypted static public key of the initiator. WireGuard uses a hash table with the fast SipHash2-4 MAC function, which includes a secret to prevent upper layers from mounting a hash table collision denial-of-service attack.

Although the Linux kernel’s crypto API offers a wide range of primitives, it introduces unnecessary complexity and allocations. Several revisions of WireGuard used the crypto API, but ultimately, using raw primitives with direct, non-abstracted APIs proved to be cleaner and less resource-intensive. Direct use of crypto primitives reduced both stack and heap pressure. Additionally, the crypto API makes it difficult to avoid allocations when using multiple keys in the multifaceted ways required by the Noise protocol. As of writing, WireGuard ships with optimized implementations of ChaCha20Poly1305 for various Intel Architecture vector extensions, with ARM/NEON and MIPS implementations on the way. The fastest implementation supported by the hardware is selected at runtime, opportunistically using the floating-point unit. All ephemeral keys and intermediate results of cryptographic operations are zeroed out of memory after use to maintain perfect forward secrecy and prevent potential leaks. The compiler must be informed about this explicit zeroing to ensure the "dead-store" is not optimized out, using the `memzero_explicit` function provided by the kernel.

In contrast, the existing kernel implementations of token bucket hash-based rate limiting, used for rate-limiting handshake initiation and response messages under load, are minimal and easy to reuse in WireGuard. WireGuard uses the Netfilter hashlimit matcher for this purpose.

### FIB Considerations

To avoid routing loops, a proposed change for the Linux kernel, currently posted to the Linux kernel mailing list, would allow FIB route lookups that exclude a specific interface. This would enable the kernel’s routing table to have 0.0.0.0/1 and 128.0.0.1/1, covering 0.0.0.0/0, while ensuring more specific routes are sent to the `wg0` interface. Individual endpoints of WireGuard peers could then be routed using the device a FIB lookup would return if `wg0` did not exist, such as the actual 0.0.0.0/0 route. This approach is preferable to adding explicit routes for WireGuard peer endpoints to the kernel routing table, which can cause precedence issues. This work is ongoing.

Another approach is to use network namespaces to isolate the WireGuard interface and routing table from physical interfaces and their routing tables. One namespace would contain the WireGuard interface and a routing table with a default route to send all packets over the WireGuard interface. The other namespace would contain the physical interfaces (Ethernet devices, wireless radios, etc.) and their usual routing table. The incoming and outgoing UDP socket for the WireGuard interface would live in the physical interface namespace, not the WireGuard interface namespace. This setup prevents routing loops and ensures total isolation. Processes in the WireGuard interface namespace would have only the WireGuard interface for networking, preventing any potential clear-text packet leakage.

### Potential Userspace Implementations

To achieve widespread adoption, WireGuard needs more implementations beyond the current one for the Linux kernel. The authors plan to develop a cross-platform, low-speed user space TUN-based implementation in a safe yet high-performance language like Rust, Go, or Haskell.

### Performance

WireGuard was benchmarked alongside IPsec in two modes and OpenVPN using `iperf3` between an Intel Core i7-3820QM and an Intel Core i7-5200U with Intel 82579LM and Intel I218LM gigabit Ethernet cards, respectively. The results, averaged over thirty minutes, were promising:

| Protocol       | Configuration                                      | Throughput (Mbps) | Ping Time (ms) |
|----------------|----------------------------------------------------|-------------------|----------------|
| WireGuard      | 256-bit ChaCha20, 128-bit Poly1305                 | 1,011             | 0.403          |
| IPsec #1       | 256-bit ChaCha20, 128-bit Poly1305                 | 825               | 0.501          |
| IPsec #2       | 256-bit AES, 128-bit GCM                           | 881               | 0.508          |
| OpenVPN        | 256-bit AES, HMAC-SHA2-256, UDP mode               | 258               | 1.541          |

For both throughput and ping time, WireGuard outperformed OpenVPN and both modes of IPsec. The CPU was at 100% utilization during the throughput tests of OpenVPN and IPsec, but not fully utilized for WireGuard, suggesting that WireGuard could completely saturate the gigabit Ethernet link.

While the AES-NI-accelerated AES-GCM IPsec cipher suite appears to outperform the AVX2-accelerated ChaCha20Poly1305 IPsec cipher suite, future chips with wider vector instructions, such as the upcoming AVX512, are expected to favor ChaCha20Poly1305. ChaCha20Poly1305 is well-suited for software implementation, free from side-channel attacks, and efficient, especially for embedded platforms without dedicated AES instructions.

Furthermore, WireGuard outperforms both IPsec cipher suites due to its simple implementation and lack of overhead. The significant gap between OpenVPN and WireGuard, in terms of both ping time and throughput, is expected because OpenVPN is a user space application, adding latency and overhead from the scheduler and packet copying between user and kernel space.

### Conclusion

In fewer than 4,000 lines of code, WireGuard demonstrates that it is possible to have secure network tunnels that are simply implemented, highly performant, and use state-of-the-art cryptography, while remaining easy to administer. Its simplicity allows for easy independent verification and reimplementation on a wide variety of platforms. The cryptographic constructions and primitives used ensure high-speed performance across a diverse range of devices, from data center servers to cellphones, and provide dependable security properties well into the future. The ease of deployment will also eliminate many common and disastrous pitfalls seen in IPsec deployments. In contrast to IPsec, which has been criticized for its complexity, WireGuard focuses on simplicity and usability, delivering a scalable and highly secure system. By remaining silent to unauthenticated packets and minimizing resource utilization, it can be deployed on the outer edges of networks as a trustworthy and reliable access point, which does not readily reveal itself to attackers nor provide a viable attack target. The cryptokey routing table paradigm is easy to learn and promotes safe network designs. The protocol is based on cryptographically sound and conservative principles, using well-understood yet modern crypto primitives. WireGuard was designed from a practical perspective to solve real-world secure networking problems.

### Acknowledgments

WireGuard was made possible with the great advice and guidance of many, including Trevor Perrin, Jean-Philippe Aumasson, Steven M. Bellovin, and Greg Kroah-Hartman.

### References

[1] J.-P. Aumasson and D. J. Bernstein, "SipHash: A Fast Short-Input PRF," in *Progress in Cryptology - INDOCRYPT 2012*, Berlin, Heidelberg: Springer Berlin Heidelberg, 2012, pp. 489–508.

[2] J.-P. Aumasson, S. Neves, Z. Wilcox-O’Hearn, and C. Winnerlein, "Blake2: Simpler, smaller, fast as md5," in *Proceedings of the 11th International Conference on Applied Cryptography and Network Security*, ser. ACNS’13, Berlin, Heidelberg: Springer-Verlag, 2013, pp. 119–135.

[3] D. J. Bernstein, "CPUs are optimized for video games." [Online]. Available: <https://moderncrypto.org/mail-archive/noise/2016/000699.html>

[4] ——, "Tai64, tai64n, and tai64na." [Online]. Available: <https://cr.yp.to/libtai/tai64.html>

[5] ——, "The poly1305-aes message-authentication code," in *Fast Software Encryption: 12th International Workshop, FSE 2005*, ser. Lecture Notes in Computer Science, vol. 3557, Springer, 2005, pp. 32–49.

[6] ——, "Curve25519: new Diffie-Hellman speed records," in *Public Key Cryptography – PKC 2006*, ser. Lecture Notes in Computer Science, vol. 3958, Berlin, Heidelberg: Springer-Verlag Berlin Heidelberg, 2006, pp. 207–228.

[7] ——, "Chacha, a variant of salsa20," in *SASC 2008*, 2008.

[8] J. A. Donenfeld, "Inverse of flowi{4,6}_oif: flowi{4,6}_not_oif." [Online]. Available: <http://lists.openwall.net/netdev/2016/02/02/222>

[9] N. Ferguson and B. Schneier, "A cryptographic evaluation of ipsec," Counterpane Internet Security, Inc, Tech. Rep., 2000.

[10] Y. Hariguchi, "Allotment routing table: A fast free multibit trie based routing table." [Online]. Available: <https://github.com/hariguchi/art/blob/master/docs/art.pdf>

[11] T. Hoeiland-Joergensen, P. McKenney, D. Taht, J. Gettys, and E. Dumazet, "The flowqueue-codel packet scheduler and active queue management algorithm," Internet Research Task Force, Internet Engineering Task Force, RFC, March 2016.

[12] C. Kaufman, P. Hoffman, Y. Nir, and P. Eronen, "Internet key exchange protocol version 2," Internet Research Task Force, RFC Editor, RFC 5996, September 2010.

[13] S. Kent and R. Atkinson, "Security architecture for ip," Internet Research Task Force, RFC Editor, RFC 2401, November 1998.

[14] H. Krawczyk, "Sigma: The ‘sign-and-mac’ approach to authenticated diffie-hellman and its use in the ike-protocols," in *Advances in Cryptology - CRYPTO 2003*, ser. Lecture Notes in Computer Science, vol. 2729, Springer, 2003, pp. 400–425.

[15] ——, "Cryptographic Extraction and Key Derivation: The HKDF Scheme," in *Advances in Cryptology – CRYPTO 2010*, ser. Lecture Notes in Computer Science, vol. 6223, Berlin, Heidelberg: Springer Berlin Heidelberg, 2010, pp. 631–648.

[16] A. Langley and Y. Nir, "Chacha20 and poly1305 for ietf protocols," Internet Research Task Force, RFC Editor, RFC 7539, May 2015.

[17] K. Lauter and A. Mityagin, "Security Analysis of KEA Authenticated Key Exchange Protocol," in *Public Key Cryptography - PKC 2006*, ser. Lecture Notes in Computer Science, vol. 3958, Berlin, Heidelberg: Springer Berlin Heidelberg, 2006, pp. 378–394.

[18] P. E. McKenny, D. Sarma, A. Arcangeli, A. Kleen, O. Krieger, and R. Russell, "Read-copy update," in *Ottawa Linux Symposium*, Jun 2002, pp. 338–367.

[19] R. Moskowitz, T. Heer, P. Jokela, and T. Henderson, "Host identity protocol version 2," Internet Research Task Force, RFC Editor, RFC 7401, April 2015.

[20] K. Nichols and V. Jacobson, "Controlling queue delay," *Communications of the ACM*, vol. 55, no. 7, pp. 42–50, July 2012.

[21] S. Nilsson and G. Karlsson, "IP-address lookup using lc-tries," *IEEE Journal on Selected Areas in Communications*, vol. 17, no. 6, pp. 1083–1092, June 1999.

[22] T. Perrin, "The noise protocol framework." [Online]. Available: <http://noiseprotocol.org/noise.pdf>

[23] E. Rescorla and N. Modadugu, "Datagram transport layer security version 1.2," Internet Research Task Force, RFC Editor, RFC 6347, January 2012.

[24] K. Winstein and H. Balakrishnan, "Mosh: An interactive remote shell for mobile clients," in *USENIX Annual Technical Conference*, Boston, MA, June 2012.

[25] X. Zhang and T. Tsou, "IPsec anti-replay algorithm without bit shifting," Internet Research Task Force, RFC Editor, RFC 6479, January 2012.