为了分析内核使用的EL1 stage 1翻译表的内容，我们需要首先找到翻译表本身的物理地址。
一旦我们找到翻译表，我们可以使用我们的execute_in_kernel原语，以便在内核中迭代地执行“读取小工具”，从而允许我们读出翻译表的内容。
有一个微小的障碍，我们如何能够检索翻译表的位置？ 为此，我们需要找到一个小工具，允许我们读取TTBR1_EL1，而不会对内核造成任何不良影响。
不幸的是，梳理内核的代码揭示了一个令人沮丧的事实 – 似乎这样的小工具是相当罕见的。
虽然有一些功能读取TTBR1_EL1，但它们还执行其他操作，导致不必要的副作用。 相比之下，RKP的代码段似乎充斥着这样的小工具 –
事实上，RKP包含小的小工具几乎读取和写入属于EL1的每个控制寄存器。
在深入了解内核代码（init / main.c）后，有一些地方令人费解，在Exynos设备（与基于Qualcomm的设备相反）上，RKP由EL1内核引导。
这意味着，不是直接从EL3引导EL2，似乎EL1首先被引导，然后仅执行一些操作以引导EL2。
这种引导是通过在EL1内核的代码段中嵌入包含RKP的代码的整个二进制来实现的。
然后，一旦内核启动，它将RKP二进制复制到预定义的物理范围，并转换到TrustZone，以便引导和初始化RKP。
通过在内核的文本段中嵌入RKP二进制，它成为EL1可执行的内存范围的一部分。 这使我们可以利用嵌入式RKP二进制文件中的所有小工具 – 使生活更容易。
有了这个新的知识，我们现在可以创建一个小程序，读取阶段1翻译表的位置，使用RKP二进制直接在EL1中的小工具，然后转储和解析表的内容。
由于我们有兴趣绕过由RKP实施的代码加载缓解，我们将关注包含Linux内核的物理内存范围。 编写和运行此程序后，我们面临着以下输出：
    ...
    [256] L1 table [PXNTable: 0, APTable: 0]
     [  0] 0x080000000-0x080200000 [PXN: 0, UXN: 1, AP: 0]
     [  1] 0x080200000-0x080400000 [PXN: 0, UXN: 1, AP: 0]
     [  2] 0x080400000-0x080600000 [PXN: 0, UXN: 1, AP: 0]
     [  3] 0x080600000-0x080800000 [PXN: 0, UXN: 1, AP: 0]
     [  4] 0x080800000-0x080a00000 [PXN: 0, UXN: 1, AP: 0]
     [  5] 0x080a00000-0x080c00000 [PXN: 0, UXN: 1, AP: 0]
     [  6] 0x080c00000-0x080e00000 [PXN: 0, UXN: 1, AP: 0]
     [  7] 0x080e00000-0x081000000 [PXN: 0, UXN: 1, AP: 0]
     [  8] 0x081000000-0x081200000 [PXN: 0, UXN: 1, AP: 0]
     [  9] 0x081200000-0x081400000 [PXN: 0, UXN: 1, AP: 0]
     [ 10] 0x081400000-0x081600000 [PXN: 1, UXN: 1, AP: 0]
    ...
如上所述，整个物理内存范围[0x80000000，0x81400000]在第一级转换表中使用第一级“段”描述符映射，每个描述符负责转换1MB范围的内存。
我们还可以看到，如所期望的，该范围被标记为UXN和非PXN – 因此允许EL1在这些范围中执行存储器，而禁止EL0这样做。
然而，更令人惊讶的是，整个范围用访问许可（AP）位值“00”标记。 让我们参考ARM VMSA，看看这些值指示：
Aha – 所以实际上这意味着这些内存范围也是可读写的从EL1！
结合所有这些，我们得出结论，[0x80000000，0x81400000]的整个物理范围在阶段1转换表中被映射为RWX。
这并不意味着我们可以修改内核的代码。 记住，RKP也执行阶段2的内存转换。 这些存储器范围可以在阶段2翻译中受到限制，以防止攻击者获得对它们的写入访问。
在一些逆转之后，我们发现RKP的初始阶段2翻译表实际上嵌入在RKP二进制本身中。 这允许我们提取其内容并详细分析它，类似于我们以前在阶段1翻译表上的工作。
我写了一个python脚本，它根据ARM VMSA中指定的阶段2翻译表格式分析给定的二进制Blob。
接下来，我们可以使用这个脚本来发现RKP在内核的物理地址范围上实施的内存保护：
    ...
    0x80000000-0x80200000: S2AP=11, XN=0
    0x80200000-0x80400000: S2AP=11, XN=0
    0x80400000-0x80600000: S2AP=11, XN=0
    0x80600000-0x80800000: S2AP=11, XN=0
    0x80800000-0x80a00000: S2AP=11, XN=0
    0x80a00000-0x80c00000: S2AP=11, XN=0
    0x80c00000-0x80e00000: S2AP=11, XN=0
    0x80e00000-0x81000000: S2AP=11, XN=0
    0x81000000-0x81200000: S2AP=11, XN=0
    0x81200000-0x81400000: S2AP=11, XN=0
    0x81400000-0x81600000: S2AP=11, XN=0
    ...
首先，我们可以看到RKP使用的阶段2翻译表将每个IPA映射到相同的PA。 因此，在博客文章的剩余部分，我们可以安全地忽略IPA的存在。
然而，更重要的是，我们可以看到，我们的感兴趣的记忆范围没有标记为XN，如预期的。 毕竟，内核应该是EL1可执行的。
但令人困惑的是，整个范围标记有阶段2访问许可（S2AP）位设置为“11”。 再次，让我们参考ARM VMSA：
所以这似乎有点奇怪…这是否意味着整个内核的代码范围在阶段1和阶段2翻译表中被标记为RWX？ 这似乎没有加起来。
事实上，尝试写入包含EL1内核代码的内存地址会导致翻译错误，因此我们肯定在这里缺少一些东西。
啊，但等等！ 我们上面分析的第2阶段翻译表只是RKP启动时使用的初始翻译表。
也许在EL1内核完成初始化之后，它会以某种方式请求RKP修改这些映射，以保护其自己的内存范围。
实际上，再次查看内核的初始化例程，我们可以看到，在启动后不久，EL1内核调用RKP：
    static void rkp_init(void)
    {
    rkp_init_t init;
    init.magic = RKP_INIT_MAGIC;
    init.vmalloc_start = VMALLOC_START;
    init.vmalloc_end = (u64)high_memory;
    init.init_mm_pgd = (u64)__pa(swapper_pg_dir);
    init.id_map_pgd = (u64)__pa(idmap_pg_dir);
    init.rkp_pgt_bitmap = (u64)__pa(rkp_pgt_bitmap);
    init.rkp_map_bitmap = (u64)__pa(rkp_map_bitmap);
    init.rkp_pgt_bitmap_size = RKP_PGT_BITMAP_LEN;
    init.zero_pg_addr = page_to_phys(empty_zero_page);
    init._text = (u64) _text;
    init._etext = (u64) _etext;
    if (!vmm_extra_mem) {
    printk(KERN_ERR"Disable RKP: Failed to allocate extra memn");
    return;
    }
    init.extra_memory_addr = __pa(vmm_extra_mem);
    init.extra_memory_size = 0x600000;
    init._srodata = (u64) __start_rodata;
    init._erodata =(u64) __end_rodata;
    init.large_memory = rkp_support_large_memory;
    rkp_call(RKP_INIT, (u64)&init, 0, 0, 0, 0);
    rkp_started = 1;
    return;
    }
在内核方面，我们可以看到，此命令为RKP提供了属于内核的许多内存范围。 为了弄清楚这个命令的实现，让我们把焦点转移回RKP。
通过在RKP中逆向工程此命令的实现，我们得到以下近似的高级逻辑：
    void handle_rkp_init(...) {
       ...
       void* kern_text_phys_start = rkp_get_pa(text);