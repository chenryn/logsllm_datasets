# Android Malware Growth and Characterization (2010-2011)

## Introduction

To better illustrate the growth of Android malware, Figures 1(a) and 1(b) present the monthly breakdown of new Android malware families and the cumulative growth of malware samples in our dataset. Consistent with other studies [2][3], starting from the summer of 2011, there has been a dramatic increase in Android malware, as evidenced by the rapid emergence of new malware families and their variants. In fact, the number of new Android malware samples in July 2011 alone exceeded the total number for the entire year of 2010. Figure 1(b) highlights two major outbreaks: DroidKungFu (starting June 2011) and AnserverBot (starting September 2011). Among the 1,260 samples in our collection, 37.5% are related to DroidKungFu and its variants, while 14.8% are AnserverBot. Both malware families continue to evolve to evade detection by existing antivirus software, a topic we will explore further in Section IV.

## Malware Characterization

In this section, we provide a systematic characterization of existing Android malware, covering installation, activation, and the malicious payloads they carry.

### A. Malware Installation

Through manual analysis of malware samples in our collection, we have identified three primary social engineering-based techniques used by Android malware for installation: repackaging, update attacks, and drive-by downloads. These techniques are not mutually exclusive, and different variants of the same malware family may use multiple methods to entice users to download and install them.

#### 1. Repackaging

Repackaging is one of the most common techniques employed by malware authors. It involves piggybacking malicious payloads into popular applications. Specifically, malware authors locate and download popular apps, disassemble them, insert malicious code, and then re-assemble and submit the new, infected apps to official and/or alternative Android markets. Users can be vulnerable if they download and install these compromised apps.

To quantify the prevalence of repackaging in our collection, we adopted the following approach: if a sample shares the same package name with an app in the official Android Market, we download the official app (if free) and manually compare it to the sample, typically identifying the added malicious payload. If the original app is unavailable, we disassemble the malware sample and determine whether the malicious payload is a natural part of the app's functionality. If not, it is considered a repackaged app.

Among the 1,260 malware samples, 1,083 (or 86.0%) are repackaged. Further classification based on individual families (Table II) shows that out of the 49 families in our collection, 25 infect users through repackaged apps, while the remaining 25 are standalone apps, primarily designed as spyware. One malware family, GoldDream, uses both methods for infection.

Malware authors have repackaged a variety of apps, including paid apps, popular games, utility apps, and even porn-related apps. For example, one AnserverBot sample (SHA1: ef140ab1ad04bd9e52c8c5f2fb6440f3a9ebe8ea) repackaged a paid app (com.camelgames.mxmotor) available on the official Android Market. Another BgServ sample (SHA1: bc2dedad0507a916604f86167a9fa306939e2080) repackaged a security tool released by Google to remove DroidDream from infected phones.

To hide malicious payloads, malware authors often use class-file names that appear legitimate and benign. For instance, AnserverBot uses the package name `com.sec.android.provider.drm`, which looks like a legitimate DRM module. The first version of DroidKungFu used `com.google.ssearch` to mimic the Google search module, and subsequent versions used `com.google.update` to appear as an official Google update.

One notable example is the jSMSHider malware, which uses a publicly available private key (serial number: b3998086d056cffa) distributed in the Android Open Source Project (AOSP). This allows the malware to request permissions that are otherwise not available to normal third-party apps, such as installing additional apps without user intervention. Unfortunately, some earlier custom firmware images were signed with the default key distributed in AOSP, allowing jSMSHider-infected apps to obtain privileged permissions and perform dangerous operations without the user's awareness.

#### 2. Update Attack

The second technique, known as the update attack, makes it more difficult to detect malware. Instead of embedding the entire malicious payload in the host app, it includes only an update component that fetches or downloads the payload at runtime. This means that static scanning of the host app may fail to capture the malicious payload.

In our dataset, four malware families—BaseBridge, DroidKungFuUpdate, AnserverBot, and Plankton—use this attack (Table II). BaseBridge, for example, checks for an update dialogue when the infected app runs. If an update is available, the user is offered to install the "updated" version, which actually contains the malicious payload (Figure 2(a)).

#### 3. Drive-by Download

The third technique, drive-by download, involves tricking users into downloading and installing malware through deceptive links or advertisements. This method is less common but still poses a significant threat.

## Conclusion

This section has provided a detailed characterization of the installation methods used by Android malware. The next sections will delve into the activation mechanisms and the types of malicious payloads carried by these malware samples.

---

This revised version aims to make the text more coherent, clear, and professional. It also ensures that the information is presented in a structured and easy-to-understand manner.