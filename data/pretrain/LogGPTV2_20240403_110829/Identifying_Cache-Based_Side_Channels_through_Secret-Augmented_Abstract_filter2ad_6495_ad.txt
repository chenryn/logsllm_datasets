### Libgcrypt Security Analysis and Evaluation

#### Version Updates and Security Improvements
Our study indicates that the security vulnerabilities present in Libgcrypt version 1.6.1 have been addressed in version 1.7.3. Specifically, the implementation in Libgcrypt 1.7.3 is generally considered safe regarding our threat model, as it no longer includes secret-dependent memory accesses. Our evaluation confirms that no information leaks are detected in this version concerning secret-dependent cache-line accesses. However, we did identify secret-dependent control flows, which are discussed in Section 8.5.

#### Computing Resources
Our evaluation was conducted on a machine with a 2.90 GHz Intel Xeon(R) E5-2690 CPU and 128 GB of RAM. Table 2 provides an overview of the covered functions, contexts, and processed IR instructions for each context-sensitive analysis campaign. We found that CacheS requires less than 1700 CPU seconds to process all test cases, with an average peak memory usage of less than 5 GB per case. These results demonstrate the high scalability of CacheS in analyzing real-world cryptosystems.

#### Modeling Program Semantics with Logic Formulas
As noted in Section 3, we implemented the idea of modeling program concrete semantics using logic formulas. All other design and evaluation settings remained unchanged.

#### Evaluation Results
Table 2 compares the identified information leakage sites by CacheS with those reported by a recent research (CacheD [77]). Our results show that CacheS can identify all the leakage sites reported by CacheD. A detailed summary of all leaks is available in the extended version of this paper [76].

| Algorithm Implementation | Information Leakage Sites (known/unknown) | Procedures | Contexts | CPU Seconds | REIL Instructions | Peak Memory Usage (MB) | Leakage Units | Leakage Sites |
|--------------------------|--------------------------------------------|------------|----------|-------------|------------------|------------------------|---------------|---------------|
| RSA/ElGamal Libgcrypt 1.6.1 | 22/18 | 154/54 | 60 | 228.8 | 50,436 | 7,749 | 11 |
| RSA/ElGamal Libgcrypt 1.7.3 | 0/0 | 60 | 59 | 182.2 | 33,386 | 5,823 | 0 |
| RSA/ElGamal OpenSSL 1.0.2k | 2/3 | 60 | 71 | 179.2 | 83,183 | 6,134 | 2 |
| RSA/ElGamal OpenSSL 1.0.2f | 2/4 | 60 | 68 | 169.5 | 80,096 | 6,113 | 3 |
| AES mbedTLS 2.5.1 | 0/29 | 29 | 1 | 775.9 | 35,963 | 9,654 | 2 |
| AES OpenSSL 1.0.2k | 32/0 | 1 | 1 | 33.2 | 3,748 | 620 | 1 |
| AES OpenSSL 1.0.2f | 32/0 | 1 | 1 | 32.8 | 3,748 | 578 | 1 |
| AES mbedTLS 2.5.1 | 64/0 | 1 | 1 | 1,637.4 | 4,803 | 619 | 1 |

#### Model Program Semantics in Logic Formulas
Table 3 presents the results of modeling program semantics using logic formulas and SAS for testing OpenSSL 1.0.2k. The first two rows report the modeling results with logic formulas, while the last row reports the results using SAS. The comparison of these two approaches is provided in Section 3.

| Algorithm | Execution Time (CPU Second) | Context | Function | Memory Usage (MB) | Processed Leaks | Detected Leaks |
|-----------|------------------------------|---------|----------|--------------------|-----------------|-----------------|
| RSA/ElGamal | timeout (> 5 CPU hours) | N/A | N/A | N/A | N/A | N/A |
| AES | 115.8 | 32 | 7,283 | 621 | 15 | 1 |
| RSA/ElGamal | 179.2 | 5 | 47,798 | 6,134 | 28 | 1 |
| AES | 33.2 | 32 | 53,054 | 620 | 85 | 1 |
| AES | 81 | 1 | 81 | 1 | 71 | 1 |

#### Comparison with CacheAudit
In addition to comparing our results with CacheD [77], we also compared them with CacheAudit [32]. CacheAudit failed on all our test cases for two reasons: it does not handle certain x86 instructions, and it cannot analyze indirect function calls when constructing the control flow graph. The key differences between CacheS and CacheAudit are described in Section 10.

#### Identifying Information Leakage Units
To assess the utility of CacheS and estimate the bug fixing effort, we grouped flagged information leaks into "leakage units" if they were within the same or adjacent C statements. For example, if a macro like MPN COPY contains information leaks, it is counted only once. As reported in Table 2, CacheS identified 21 units of information leaks, covering all leakage units reported in CacheD and revealing new units not covered by CacheD.

#### Confirmation with Library Authors
We found unknown information leaks in OpenSSL (versions 1.0.2f and 1.0.2k) and mbedTLS (version 2.5.1). Our findings were confirmed by the OpenSSL developers, and the latest OpenSSL has been patched to eliminate these leaks (discussed in Section 8.4). We are awaiting responses from the mbedTLS developers.

#### Exploring the Leaks in mbedTLS
Although the mbedTLS developers have not yet confirmed our findings, we conducted further studies on the 29 flagged information leakage sites. Using a hardware simulator (gem5 [18]), we verified that different cache lines were accessed at these leakage points, confirming that all executed information leaks are true positives. The configuration of gem5 is provided in Table 4, and the simulation results are summarized in Table 5.

| # of CacheS Detected Leakage Sites | # of Executed Leakage Sites | Access Variants | Cache Line | Cache Status Variants |
|------------------------------------|-----------------------------|-----------------|------------|-----------------------|
| 29 | 14 | 14 | 6 | 6 |

#### Case Study of Leaks in mbedTLS
We identified 29 information leakage points in mbedTLS 2.5.1. The first four leaks were found in the function `mpi_montmul`, which is a major component of the modular exponentiation implementation. The value of the function parameter `B` is derived from the window size of the secret key, and it is used as a pointer to access elements in a C struct. Different secrets lead to different values of `B`, resulting in the access of different cache lines in secret-dependent memory accesses.

This comprehensive evaluation and analysis demonstrate the effectiveness and scalability of CacheS in identifying and mitigating information leaks in real-world cryptosystems.