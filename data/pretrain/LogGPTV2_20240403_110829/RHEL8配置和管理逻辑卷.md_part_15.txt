|                              |     `lvcreate`{.literal} 命令的      |
|                              |     `--type`{.literal}               |
|                              |     参数的默认值。                   |
|                              | -   镜像集合的条带                   |
|                              | :::                                  |
+------------------------------+--------------------------------------+
| `raid0/raid0_meta`{.literal} | 条带。RAID0                          |
|                              | 以条带大小的单位在多个数据子卷间分   |
|                              | 布逻辑卷数据。这可以提高性能。如果任 |
|                              | 何数据子卷失败，逻辑卷数据将会丢失。 |
+------------------------------+--------------------------------------+
:::
:::
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#ref_creating-raid-volume-configure-manage-raid}创建 RAID 逻辑卷 {.title}
:::
这部分提供了创建不同类型的 RAID 逻辑卷的命令示例。
您可以根据您为 `-m`{.literal} 参数指定的值创建具有不同副本数量的 RAID1
阵列。同样，您可以使用 `-i argument`{.literal} 为 RAID 4，5，6
逻辑卷指定条带数目。您还可以使用 `-I`{.literal} 参数指定条带的大小。
下面的命令在卷组 `my_vg`{.literal} 中创建了名为 `my_lv`{.literal} 的双向
RAID1 阵列，大小为 1GB。
``` literallayout
# lvcreate --type raid1 -m 1 -L 1G -n my_lv my_vg
```
下面的命令在卷组 `my_vg`{.literal} 中创建了名为 `my_lv`{.literal} 的
RAID5 阵列（3 条带 + 1 个隐式奇偶校验驱动器），该阵列大小为
1GB。请注意，您可以像您为 LVM
条状卷一样指定条带的数目，自动添加正确的奇偶校验驱动器数目。
``` literallayout
# lvcreate --type raid5 -i 3 -L 1G -n my_lv my_vg
```
下面的命令在卷组 `my_vg`{.literal} 中创建了名为 `my_lv`{.literal} 的
RAID6 阵列（3 条带 + 2 个隐式奇偶校验驱动器），该阵列大小为 1GB。
``` literallayout
# lvcreate --type raid6 -i 3 -L 1G -n my_lv my_vg
```
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc_creating-a-striped-logical-volume_configure-manage-raid}创建 RAID0（条状）逻辑卷 {.title}
:::
RAID0 逻辑卷以条的大小为单位，将逻辑卷数据分散到多个数据子卷中。
创建 RAID0 卷的命令格式如下。
``` literallayout
lvcreate --type raid0[_meta] --stripes Stripes --stripesize StripeSize VolumeGroup [PhysicalVolumePath ...]
```
::: table
[]{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#idm140471750916064}
**表 10.2. RAID0 命令创建参数**
::: table-contents
  参数                                  描述
  ------------------------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `--type raid0[_meta]`{.literal}       指定 `raid0`{.literal} 创建一个没有元数据卷的 RAID0 卷。指定 `raid0_meta`{.literal} 创建一个带有元数据卷的 RAID0 卷。因为 RAID0 是不弹性的，所以不需要保存任何已镜像的数据块（如 RAID1/10），或者计算并保存任何奇偶校验块（如 RAID4/5/6）。因此，它不需要元数据卷来保持有关镜像或奇偶校验块重新同步进程的状态。然而，在从 RAID0 转换到 RAID4/5/6/10 时元数据卷是强制的，并且指定 `raid0_meta`{.literal} 会预先分配元数据卷以避免分配失败。
  `--stripes Stripes`{.literal}         指定在其中分割逻辑卷的设备数。
  `--stripesize StripeSize`{.literal}   以 KB 为单位指定每个条的大小。这是在移动到下一个设备前写入一个设备的数据量。
  `VolumeGroup`{.literal}               指定要使用的卷组。
  `PhysicalVolumePath`{.literal} ...​    指定要使用的设备。如果没有指定，LVM 会选择 [*Stripes*]{.emphasis} 选项指定的设备数，每个条带一个。
:::
:::
这个示例步骤创建名为 `mylv`{.literal} 的 LVM RAID0 逻辑卷，可在磁盘
`/dev/sda1`{.literal}、`/dev/sdb1`{.literal} 和 `/dev/sdc1`{.literal}
跨磁盘条状分布数据。
::: orderedlist
1.  使用 `pvcreate`{.literal} 命令将卷组中您要使用的磁盘标记为 LVM
    物理卷。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    这个命令会破坏 `/dev/sda1`{.literal}、`/dev/sdb1`{.literal} 和
    `/dev/sdc1`{.literal} 中的所有数据。
    :::
    ``` literallayout
    # pvcreate /dev/sda1 /dev/sdb1 /dev/sdc1
      Physical volume "/dev/sda1" successfully created
      Physical volume "/dev/sdb1" successfully created
      Physical volume "/dev/sdc1" successfully created
    ```
2.  创建卷组 `myvg`{.literal}。下面的命令创建了卷组 `myvg`{.literal}。
    ``` literallayout
    # vgcreate myvg /dev/sda1 /dev/sdb1 /dev/sdc1
      Volume group "myvg" successfully created
    ```
    您可以使用 `vgs`{.literal} 命令显示新卷组的属性。
    ``` literallayout
    # vgs
      VG   #PV #LV #SN Attr   VSize  VFree
      myvg   3   0   0 wz--n- 51.45G 51.45G
    ```
3.  从您创建的卷组中创建 RAID0 逻辑卷。以下命令从卷组 `mylv`{.literal}
    中创建 RAID0 卷 `myvg`{.literal}。这个示例创建的逻辑卷大小为
    2GB，有三个条带，条带的大小为 4KB。
    ``` literallayout
    # lvcreate --type raid0 -L 2G --stripes 3 --stripesize 4 -n mylv myvg
      Rounding size 2.00 GiB (512 extents) up to stripe boundary size 2.00 GiB(513 extents).
      Logical volume "mylv" created.
    ```
4.  在 RAID0 逻辑卷中创建文件系统。下面的命令在逻辑卷中创建了一个
    `ext4`{.literal} 文件系统。
    ``` literallayout
    # mkfs.ext4 /dev/myvg/mylv
    mke2fs 1.44.3 (10-July-2018)
    Creating filesystem with 525312 4k blocks and 131376 inodes
    Filesystem UUID: 9d4c0704-6028-450a-8b0a-8875358c0511
    Superblock backups stored on blocks:
            32768, 98304, 163840, 229376, 294912
    Allocating group tables: done
    Writing inode tables: done
    Creating journal (16384 blocks): done
    Writing superblocks and filesystem accounting information: done
    ```
    下面的命令挂载逻辑卷并报告文件系统磁盘空间用量。
    ``` literallayout
    # mount /dev/myvg/mylv /mnt
    # df
    Filesystem             1K-blocks     Used  Available Use% Mounted on
    /dev/mapper/myvg-mylv    2002684     6168    1875072   1% /mnt
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#using-dm-integrity-with-raid-lv_configure-manage-raid}使用带有 RAID LV 的 DM 完整性功能 {.title}
:::
作为系统管理员，您可以使用带有 RAID LV
的设备映射器(DM)完整性，以最大程度降低软崩溃或位轮转导致数据丢失的风险。
::: section
::: titlepage
## []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#soft-data-corruption_using-dm-integrity-with-RAID-LV}软数据崩溃 {.title}
:::
数据存储中的软崩溃意味着，从存储设备中检索的数据与写入到那个设备中的数据不同。错误的数据可以在存储设备中无限期存在。在检索并尝试使用此数据之前，您可能不会发现这个损坏的数据。
根据配置类型，冗余独立磁盘阵列(RAID)LV
可防止设备出现故障时数据丢失。如果包含一个 RAID
阵列的设备失败，可以从作为 RAID LV 一部分的其他设备中恢复该数据。但是
RAID
配置不能保证数据本身的完整性。软崩溃、静默崩溃、软错误和静默错误用来描述，即使系统和软件仍继续按预期工作，但数据已损坏的情况的术语。
DM 完整性与 RAID 1、4、5、6 和 10
一起使用，以帮助缓解或防止软崩溃造成数据丢失。RAID
层确保非破坏的数据副本可以修复软崩溃错误。完整性层位于每个 RAID
映像之上，而额外子 LV 存储每个 RAID
镜像的完整性元数据（数据校验和）。当您从带有完整性的 RAID LV
中检索数据时，完整性数据校验和会分析崩溃的数据。如果检测到崩溃，完整性层会返回一个错误消息，RAID
层会从另一个 RAID 镜像检索到非破坏的数据副本。RAID
层会在损坏的数据中自动重写非破坏的数据，以修复软崩溃。
当创建一个带有 DM 完整性的 RAID LV 或在现有 RAID LV
中添加完整性时，请考虑以下几点：
::: itemizedlist
-   完整性元数据需要额外的存储空间。对于每个 RAID
    镜像，由于添加到数据的校验和，每 500MB 数据都需要 4MB
    的额外存储空间。
-   添加 DM 完整性会因为访问数时延迟而影响到性能，有些 RAID
    的配置会比其他 RAID 配置受到的影响更大。RAID1 配置通常比 RAID5
    或其变体提供更好的性能。
-   RAID 完整性块的大小也会影响性能。配置更大的 RAID
    完整块可提供更好的性能。但是，一个较小的 RAID
    完整性块可以提供更好的兼容性。
-   完整性有两种模式：位图（bitmap）或日志（journal）。位图模式通常比日志模式提供更好的性能。
:::
::: {.tip style="margin-left: 0.5in; margin-right: 0.5in;"}
### 提示 {.title}
如果您遇到性能问题，红帽建议您使用带有完整性的 RAID1，或者测试特定 RAID
配置的性能以确保它满足您的要求。
:::
:::
::: section
::: titlepage
## []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#creating-raid-lv-with-integrity_using-dm-integrity-with-RAID-LV}创建带有 DM 完整性的 RAID LV {.title}
:::
当您创建 RAID LV 后，添加 DM
完整性有助于降低因为软崩溃而丢失数据的风险。
::: itemizedlist
**先决条件**
-   您必须有 root 访问权限。
:::
::: itemizedlist
**流程**
-   创建带有 DM 完整性的 RAID LV：
    ``` screen
    # lvcreate --type  --raidintegrity y -L  -n  
    ```
    其中
    ::: variablelist
    [``{.literal}]{.term}
    :   指定您要创建的 RAID LV 的 RAID 级别。
    [``{.literal}]{.term}
    :   以 MB 为单位指定可用大小。
    [``{.literal}]{.term}
    :   指定您要创建的 LV 的名称。
    [``{.literal}]{.term}
    :   指定要在其中创建 RAID LV 的卷组名称。
    :::
:::
在下面的例子中，在 `test-vg`{.literal} 卷组中创建一个名为
`test-lv`{.literal} 的带有完整性的 RAID LV，可用大小为 256M，使用 RAID
1。
::: title
**带有完整性的 RAID LV 示例**
:::
``` screen
# lvcreate --type raid1 --raidintegrity y -L256M -n test-lv test-vg
Creating integrity metadata LV test-lv_rimage_0_imeta with size 8.00 MiB.
  Logical volume "test-lv_rimage_0_imeta" created.
  Creating integrity metadata LV test-lv_rimage_1_imeta with size 8.00 MiB.
  Logical volume "test-lv_rimage_1_imeta" created.
  Logical volume "test-lv" created.
```
:::
::: section
::: titlepage
## []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-adding-integrity-to-existing-raid-lv_using-dm-integrity-with-RAID-LV}在现有的 RAID LV 中添加 DM 完整性 {.title}
:::
您可以在现有的 RAID LV 中添加 DM
完整性，以帮助降低因为软崩溃而丢失数据的风险。
::: itemizedlist
**先决条件**
-   您必须有 root 访问权限。
:::
::: itemizedlist
**流程**
-   在现有 RAID LV 中添加 DM 完整性：
    ``` screen
    # lvconvert --raidintegrity y /
    ```
    其中
    ::: variablelist
    [``{.literal}]{.term}
    :   指定要在其中创建 RAID LV 的卷组名称。
    [``{.literal}]{.term}
    :   指定您要创建的 LV 的名称。
    :::
:::
:::