139414435860418342968844029406658220789106955841536367237824869423284730699
12)),
    (1951, 
(64928218519313583048384354505976338917616160372255399856516445739398114103
650, 
750610435694423408847399030741170182449145424849243064262109663786954044779
11)),
    (29, 
(58350618667584117674116437768708112039669824287965657944330308328202151581
589, 
609773958596478582938995660570349864254655165062858184340490081458046893617
46)),
    (137, 
(25924257763770933028812366971220965113585654190895574879017131465236702246
901,37488570461956678061061276427985993923637049856207858380548225051724829
63475)),
    (41, 
(55855642312890484594663105436603344407671229062335797868365105959306536597
147, 
707082564620419755510422929861906159448045297094354530229052251546632442962
11)),
    (127, 
(28622122589312150132093528303919276455398830314700482306493152171110867066
704, 
895404899170499409718627775173893799007960225076042364516015837788266331321
22)),
    ]
# sanity check
Sigma = 1
for order, point in points:
  Sigma *= order 
  assert mul(order, point) == zero 
assert Sigma > order
#p = remote("localhost", 8848)
p = remote("134.175.225.42", 8848)
def exchange(x,y,first=False):
  if not first:
    p.sendlineafter('choice:', 'Exchange')
  p.sendlineafter('X:', str(x))
  p.sendlineafter('Y:', str(y))
def getkey():
  p.sendlineafter('choice:', 'Encrypt')
  p.sendlineafter('(hex):', 'f' * 128)
  p.recvuntil('is:\n')
  result = bytes_to_long(p.recvline().strip().decode('hex'))
  key = [0] * 512
  for i in reversed(range(512)):
    key[i] = (result & 1) ^ 1
    result >>= 1
  return key
def backdoor(s):
  p.sendlineafter('choice:', 'Backdoor')
  p.sendlineafter('secret:', str(s))
def proof_of_work(chal, h):
  for comb in itertools.product(string.ascii_letters + string.digits, 
repeat=4):
    if hashlib.sha256(''.join(comb) + chal).hexdigest() == h:
      return ''.join(comb)
  raise Exception("Not found...")
p.recvuntil("+")
chal = p.recvuntil(')',drop=True)
p.recvuntil(' == ')
h = p.recvline().strip()
NLFSR
work = proof_of_work(chal, h)
p.sendlineafter("XXXX:", work)
M = []
N = []
for i in xrange(len(points)):
  exchange(points[i][1][0], points[i][1][1], True if i == 0 else False)
  key = getkey()
  Qp = keyToPoint(key)
  Pp = points[i][1]
  for o in xrange(points[i][0]):
    Rp = mul(o, Pp)
    if Rp[0] == Qp[0] and Rp[1] == Qp[1]:
      M.append(points[i][0])
      N.append(o)
      break
  else:
    print 'Not found for order %d....' % points[i][0]
    break
secret, _ = crt(M, N)
print secret
backdoor(secret)
p.interactive()
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import z3
data = open("./data", 'rb').read()
class LFSR(object):
  def __init__(self, init, mask):
    self.init = init
    self.mask = mask
    self.lmask = 0xffffff
  def next(self):
    nextdata = (self.init > j) & 1
Homomorphic
    self.init = nextdata ^ output
    return output & 1
def lfsr(r, m): return ((r = pow(2, 18))
s.add(b = pow(2, 18))
s.add(c = pow(2, 12))
s.add(d = pow(2, 5))
'''
ma, mb, mc, md = 0x505a1, 0x40f3f, 0x1f02, 0x31 
la, lb, lc, ld = LFSR(a, ma), LFSR(b, mb), LFSR(c, mc), LFSR(d, md)
def combine():
  ao, bo, co, do = la.next(), lb.next(), lc.next(), ld.next()
  return (ao * bo) ^ (bo * co) ^ (bo * do) ^ co ^ do 
def combine_lfsr():
    global a, b, c, d
    a = lfsr(a, ma)
    b = lfsr(b, mb)
    c = lfsr(c, mc)
    d = lfsr(d, md)
    [ao, bo, co, do] = [i & 1 for i in [a, b, c, d]]
    return (ao*bo) ^ (bo*co) ^ (bo*do) ^ co ^ do
for x in data[:56]:
  s.add(combine() == int(x))
print s.check()
m = s.model()
print m
#!/usr/bin/env sage
import os
os.environ['TERM'] = 'screen'
from sage.stats.distributions.discrete_gaussian_integer import 
DiscreteGaussianDistributionIntegerSampler
from pwn import *
import IPython, ast, string, itertools 
q = 2^54
t = 2^8
d = 2^10
delta = int(q/t)
PR. = PolynomialRing(ZZ)
DG = DiscreteGaussianDistributionIntegerSampler(sigma=1)
fx = x^d + 1
Q. = PR.quotient(fx)
def sample(r):
    return Q([randint(0,r) for _ in range(d)])
def genError():
    return Q([DG() for _ in range(d)])
def Round(a,r):
    A = a.list()
    for i in range(len(A)):
        A[i] = (A[i]%r) - r if (A[i]%r) > r/2 else A[i]%r
    return Q(A)
def genKeys():
    s = sample(1)
    a = Round(sample(q-1),q)
    e = Round(genError(),q)
    pk = [Round(-(a*s+e),q),a]
    return s,pk
def encrypt(pk,m):
    u = sample(1)
    e1 = genError()
    e2 = genError()
    c1 = Round(pk[0]*u + e1 + delta*m,q)
    c2 = Round(pk[1]*u + e2,q)
    return (c1,c2)
def decrypt(s,c):
    c0 = Q([i for i in c[0]])
    c1 = Q([i for i in c[1]])
    data = (t * Round(c0 + c1*s,q)).list()
    for i in range(len(data)):
        data[i] = round(data[i]/q)
    data = Round(Q(data),t)
    return data
#p = remote('localhost', 8848)
p = remote('106.52.180.168', 8848)
def proof_of_work(chal, h):
  for comb in itertools.product(string.ascii_letters + string.digits, 
repeat=4):
    if hashlib.sha256(''.join(comb) + chal).hexdigest() == h:
      return ''.join(comb)
  raise Exception("Not found...")
p.recvuntil("+")
chal = p.recvuntil(')',drop=True)
p.recvuntil(' == ')
h = p.recvline().strip()
work = proof_of_work(chal, h)
p.sendlineafter("XXXX:", work)
pk = []
p.recvuntil('pk0: ')
pk.append(Q(ast.literal_eval(p.recvline().strip())))
p.recvuntil('pk1: ')
pk.append(Q(ast.literal_eval(p.recvline().strip())))
flags = []
p.recvuntil('is: \n')
for i in xrange(44):
  ct = []
  for j in xrange(2):
    ct.append(Q(ast.literal_eval(p.recvline().strip())))
  flags.append(ct)  
def decrypt(c,index):
  c0, c1 = c
  p.sendlineafter('choice:', 'Decrypt')
  p.sendlineafter('commas):', str(c0.list()).replace('[', '').replace(']', 
'').replace(' ', ''))
  p.sendlineafter('commas):', str(c1.list()).replace('[', '').replace(']', 
'').replace(' ', ''))
  p.sendlineafter('index:', str(index))
  p.recvuntil('is: \n')
  return ZZ(p.recvline().strip())
msg100 = encrypt(pk, 0x100)
Re
/little elves
elfoverlapida
Flag0x2c
Trace
44bytesï¬‚ag44
z3
f = ''
for i in xrange(len(f), 44):
  tm = (msg100[0] + flags[i][0], msg100[1] + flags[i][1])
  target = decrypt(tm, 0)
  f += chr(target)
  print f
p.interactive()
cmps = []
datas = []