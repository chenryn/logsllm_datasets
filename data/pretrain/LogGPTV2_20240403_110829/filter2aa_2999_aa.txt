### Overview
This document provides a comprehensive guide for software engineering leaders to mitigate software supply chain security risks. It outlines key findings, strategic recommendations, and best practices to protect the integrity of the software delivery process.

### Key Findings
- **Increased Threats**: Attackers are targeting software development systems, open-source artifacts, and DevOps pipelines to compromise software supply chains.
- **Critical Protection Needs**: The rising threat of malicious code injection necessitates robust protection for both internal code and external dependencies (open-source and commercial).
- **Consequences of Compromise**: Leaked secrets, code tampering, and lateral movement by attackers in flat network architectures are significant risks.
- **Strategic Planning Assumption**: By 2025, 45% of organizations worldwide will have experienced attacks on their software supply chains, a three-fold increase from 2021.

### Recommendations
Software engineering leaders should collaborate with security and risk management counterparts to implement the following strategies:

1. **Protect the Integrity of Internal and External Code**:
   - **Strong Version Control Policies**: Enforce access controls, branch protection, and secrets scanning in version control systems (VCSs) like Git.
   - **Trusted Component Registries**: Use artifact repositories and software composition analysis (SCA) tools to manage and secure software packages.
   - **Third-Party Risk Management**: Assess and manage risks associated with third-party and open-source dependencies, including adherence to security standards and certifications.

2. **Harden the Software Delivery Pipeline**:
   - **Implement Secrets Management**: Use secrets management tools to securely store and manage credentials, API tokens, and other sensitive data.
   - **Signing and Hashing**: Verify the integrity of source code and binaries using hashing and signing techniques.
   - **Configure Security Controls in CI/CD Pipelines**: Secure continuous integration/continuous delivery (CI/CD) pipelines with enhanced security and access controls.

3. **Secure the Operating Environment**:
   - **Least Privilege and Zero-Trust Model**: Govern access to resources using the principle of least privilege and a zero-trust security model.

### Introduction
Software engineering leaders play a crucial role in digital business innovation, responsible not only for software development and delivery but also for implementing security practices. Traditional security measures, such as scanning for vulnerabilities and patching, are no longer sufficient. Sophisticated software supply chain attacks now target every stage of the procurement, development, and delivery life cycle, including injecting malicious code into open-source packages and installing backdoors in post-deployment updates.

### Analysis

#### Protect the Integrity of Internal and External Source Code
- **Version Control Systems (VCSs)**: Use VCSs like BitBucket, GitHub, and GitLab, which provide native security and access protection. Enforce strong policies, such as access controls, branch protection, and secrets scanning.
- **Trusted Component Registries**: Utilize artifact repositories and SCA tools to manage and secure software packages. Examples include Azure Artifacts, AWS CodeArtifact, and Sonatype Nexus Repository.
- **Third-Party Risk Management**: Ensure third-party and open-source dependencies adhere to security standards and certifications. Audit the providerâ€™s software build, deployment, and upgrade processes.

#### Harden the Software Development and Delivery Pipeline
- **Secrets Management**: Implement tools like HashiCorp Vault, AWS Secrets Manager, and Kubernetes Secrets to manage and secure sensitive data.
- **Signing and Hashing**: Use hashing and signing to verify the integrity of source code and binaries. For example, GitHub and GitLab support signed commits to ensure provenance and authenticity.
- **CI/CD Pipeline Security**: Configure CI/CD pipelines with elevated security and access controls to prevent manipulation and unauthorized access.

### Strategic Planning Assumption
By 2025, 45% of organizations worldwide will have experienced attacks on their software supply chains, a three-fold increase from 2021. This underscores the urgency for software engineering leaders to adopt robust security practices.

### Conclusion
Software engineering leaders must take proactive steps to protect the integrity of the software delivery process. By implementing strong version control policies, using trusted component registries, managing third-party risks, hardening the software delivery pipeline, and securing the operating environment, they can significantly reduce the risk of software supply chain attacks.