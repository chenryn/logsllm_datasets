would have been counted with a ﬁxed-rate respective variant with
rate p(cid:2)
. Therefore, using the respective ﬁxed-rate assignment with
rate p(cid:2)
yields unbiased adjusted weight for f(cid:2)
within this probabil-
ity subspace, and therefore, unbiased weights overall.
For the step-counting algorithms, the adjusted weights assigned
to a ﬂow f are unbiased in the probability subspace deﬁned by the
steps of the rank value of the current kth-smallest rank of a ﬂow
among F \ f. These steps are the same as the current sampling
rate when the ﬂow is actively counted. Technically, we need to
consider the kth-smallest rank of an actively counted ﬂow on steps
that precede the active counting of f. The adjusted weight function,
however, has the property
Ap1,p2,...,pr (0, . . . , 0, ij, ij+1, . . . , ir) =
Apj ,pj+1,...,pr (ij , ij+1, . . . , ir)
(1)
and therefore does not depend on the current sampling rate in the
duration before the ﬁnal contiguous period where the ﬂow is ac-
tively counted. This means that it is sufﬁcient to record the steps of
the current sampling rate. The following generalization of Eq. (1)
states that the adjusted weight assignment does not depend on the
values of the current sampling rate in durations when there are no
counted packets. This allows us to state the adjusted weight of a
ﬂow in terms of an equivalent ﬂow where the number of steps is
equal to the number of steps where the original ﬂow had a nonzero
count.
LEMMA 5.2. Consider a correct assignment of adjusted weight
Ap(n). For an observed count i and p, let 1 ≤ j1  0 or ijk = r (that is, r
is included also if ir = 0).
Ap1,p2,...,pr (0, . . . , 0, ij1 , 0, . . . , 0, ij2 , . . .) =
r(cid:2) =pr (ij1 , ij2 , . . . , ijr(cid:2) )
Apj1 ,pj2 ,...,pj
(2)
5.1 Adjusted weights for SSH
Let r be the number of steps and p1 > ··· > pr the corre-
sponding sampling rates. For a ﬂow f, let n = (n1, . . . , nr) be the
Pr
number of packets of f in each step and let i = (i1, . . . , ir) be the
number of counted packets in each step. We denote by q[i|n] the
probability that a ﬂow with n packets has a count of i.
In our previous work [2] we derived estimators for SSH sketches
via a system of linear equations of size that is quadratic in the num-
h=1 ni)2. We provide an exponentially-
ber of counted packets (
faster way to compute the adjusted weights which is quadratic in
the number of steps. The total number of steps is logarithmic in the
number of packets and therefore reducing the dependence from the
number of packets to the number of steps constitutes a signiﬁcant
improvement. We then argue that the number of operations can be
further reduced to be quadratic in the number of steps where the
ﬂow has a non-zero count. This distinction is important since many
ﬂows, in particular bursty or small ﬂows, can have non-zero count
on a single step or very few steps.
We deﬁne the values ci,j(p, n) (1 ≤ i ≤ j ≤ r) as follows
(the parameters (p, n) are omitted when clear from context, and we
assume n1 > 0 w.l.o.g.):
c1,j = (1 − pj )
c2,j = (1 − pj )
ci,j = (1 − pj)
1 ≤ j ≤ r :
2 ≤ j ≤ r :
n1−1
3 ≤ i ≤ j ≤ r :
ni−1 (ci−1,j − ci−1,i−1)
The following two lemmas are immediate from the deﬁnitions.
• For 1 ≤ j ≤ r, c1,j is the probability that
(c1,j − c1,1)
LEMMA 5.3.
the rank of the ﬁrst packet of the ﬂow is at least pj.
• For 2 ≤ i ≤ j ≤ r, ci,j(p, n) is the probability that the ﬂow
n is fully counted by SSH until the transition into step i, and
at the beginning of step i, the rank of the ﬂow is at least pj.
LEMMA 5.4. The computation of the partial sums
for i = 1, . . . , r can be performed in O(r2) operations.
h=1 ch,h
By lemma 5.3, ci,i (i ∈ {1, . . . , r}) is the probability that the
SSH counting of the ﬂow progressed continuously from the start
until the transition into step i, and halted in this transition (as the
current rank of the ﬂow was above pi.). So
Pi
(3)
h=1
ch,h .
q[n|n] = 1 − rX
Pi
Pr
i=1 ni(1 −Pi
1 −Pr
h=1 ch,h
(1 − p1) +
The following theorem expresses the adjusted weight ASSH(n)
h=1 ch,h (h = 1, . . . , r). The
as a function of the diagonal sums
proof is provided in Section 8.1.
THEOREM 5.5.
ASSH(n) =
h=1 ch,h)
.
LEMMA 5.6. The adjusted weight ASSH(n) can be computed
using O(r2) operations.
PROOF. The proof follows from Lemma 5.4 and Theorem 5.5.
The proof of Theorem 5.1 is an immediate corollary of Lemma 5.6
and Lemma 5.2 (According to Lemma 5.2 when we compute q[n|n]
and the ci,j’s we can remove from n and p all entries which are 0
in n except for the last entry in n which remains even if it is 0.)
5.2 Adjusted weights for hybrids
Unbiased adjusted weights for hybrid-ASH and hybrid-SSH are
obtained by scaling by p−1
base the adjusted weights computed for
the non-hybrid variant that is applied to the pbase-sampled stream.
5.3 Adjusted weights for SNF
We deﬁne di,j(p, n) (2 ≤ i ≤ j ≤ r) as follows.
«n1
rY
2 ≤ j ≤ r :
«ni−1
p1 − pj
„
„
d2,j =
p1
h=1
pnh
h
pi−1 − pj
pi−1
di,j =
3 ≤ i ≤ j ≤ r :
(di−1,j − di−1,i−1)
For 2 ≤ i ≤ j ≤ r, di,j(p, n) is the probability that all packets
of the ﬂow n have rank values below the sampling rate at packet ar-
rival time, that the ﬂow is fully counted by SNF until the transition
into step i, and that at the beginning of step i, the rank of the ﬂow
is at least pj.
The probability that all packets are counted by SNF is equal to
h=1 pnh
h minus the probability that the counting halts at the tran-
Qr
sition into steps 2, . . . , r:
qSNF[n|n] =
Pr
j=1
rY
h=1
dj,j .
j=2
pnh
h − rX
h −Pj
Qr
h −Pr
h=1 pnh
j=2 dj,j
Qr
nj
(
pj
h=1 pnh
(cid:2)=2 d(cid:2),(cid:2))
THEOREM 5.7.
ASNF[n] =
(4)
The proof of the Theorem is provided in Section 8.3.
5.4 Adjusted weights for discretized algorithms
Unbiased adjusted weights for the discretized algorithms are ob-
tained by recording the discretized sampling rates for each step.
We then convert each discretized rate t to a corresponding sam-
pling rate (pstart/pbase)μt and plug them in the corresponding
expressions for ANF, ASH, SNF, or SSH adjusted weights. For
the hybrid versions (pbase < 1), we scale the adjusted weights by
p−1
base.
The arguments for correctness, that are based on obtaining an
unbiased estimator on each part in a partition of the same space,
extend to the discretized version using Lemma 4.2. If the ranks of
all packets in F \{f} are ﬁxed, the discretized sampling rate when
f is counted depends only on these ﬁxed ranks (and not on ranks
assigned to previous packets of f) and is equal to the sampling rate
at measurement time. Therefore, we can compute unbiased ad-
justed weights while treating the effective sampling rate (for ASH
and ANF) or the steps of the current sampling rate (for SNF and
SSH) as being ﬁxed.
5.5 Relation between the sketching algorithms
The rank-based view shows that the distribution over subsets
of ﬂows included in the sketch is the same for ANF, ASH, SNF,
SSH. The different algorithms applied with the same rank assign-
ment result in the same set of k cached ﬂows (or all ﬂows if there
are fewer than k distinct ﬂows in the packet stream.). The hybrid
algorithms result in “almost” the same distribution: if the pbase-
sampled packet stream contains fewer than k distinct ﬂows then
the sketch will only include those ﬂows, but the included ﬂows are
a subset of the ﬂows included in a sketch generated by the non-
hybrid algorithms using the same underlying assignment.
This distribution is equivalent to weighted sampling without re-
placement of k ﬂows (WS). WS is performed as follows over the set
of aggregated ﬂows: repeatedly, k times, a ﬂow is selected from the
set of unsampled ﬂows with probability proportional to its weight.
Adjusted weights for WS can be obtained using the rank condition-
ing method [4]. These weights are computed using the exact packet
alg
ANF
ASH
SNF
SSH
WS
sketch size
k
k
k
k
k
active counters
k
k
k
k
|F|
counts collected
for k ﬂows
for k ﬂows
per-step for k ﬂows
per-step for k ﬂows
for all ﬂows in F
Table 1: Methods that obtain a sketch of size k that is a
weighted sample without replacement from the set of ﬂows F .
count of each ﬂow and therefore can not be obtained by a stream
algorithm with size-k ﬂow cache. We include these WS sketches in
our evaluation in order to understand to what extent performance
deviates in comparison. The adjusted weight assigned to each ﬂow
is equal to the number of packets divided by the probability that the
ﬂow is included in the sample4 in some probability subspace that
includes the current sample. The probability subspace is deﬁned as
all runs that have the same effective sampling rate p(cid:2)
and therefore
the probability is equal to 1−(1−p(cid:2)
, where |f| is the number of
packets in the ﬂow and p(cid:2)
is the effective sampling rate. Therefore,
the adjusted weight is equal to |f|/(1 − (1 − p(cid:2)
|f|
|f|
) .
)
)
Since these algorithms (see Table 1) share the same distribution,
the difference in estimate accuracy stems from the adjusted weight
assignment. The quality of the assignment depends on the informa-
tion the algorithm gathers and the method we apply to derive the ad-
justed weights. When the adjusted weights have smaller variance,
the estimates we obtain are more accurate. We explore the relation
of estimate quality between the different sketches. The proofs are
provided for the pure models where these algorithms are all applied
with a ﬂow cache of size k, but they extend to the discretized model
as well.
5.6 Variance of adjusted weights
An algorithm dominates another, in terms of the information it
collects on each sketched ﬂow, if we can use its output to emulate
an output of the second algorithm. It is not hard to see that SNF
dominates NF, that SSH dominates both ASH and SNF (and there-
fore also dominates NF), that SNF and ASH are incomparable, and
that they are all dominated by WS. Therefore, SSH sketches are the
most powerful and ANF sketches are the least powerful. The vari-
ance of the adjusted weight assignments reﬂects this dominance
relation, with lower variance for the methods that gather more in-
formation. In [2] it is shown that for any packet stream and any
ﬂow f, VAR(AWS(f )) ≤ VAR(ASSH(f )) ≤ VAR(AASH(f )) ≤
VAR(ASNF(f )). We extend this relation to SNF: (The proof is
provided in Sections 8.2 and 8.3)
THEOREM 5.8. For any packet stream and any ﬂow f we have
the following relation between the variance of the adjusted weight
assignment for f.
VAR(ASSH(f )) ≤ VAR(ASNF(f )) ≤ VAR(AANF(f ))
(5)
The relation is established by showing that adjusted weights for
“more informative” sketches have smaller variance. This approach
extends to show that the relation between the variance of the differ-
ent methods also applies to the discretized variants of the sampling
algorithms and to ﬁxed-rate and ﬁxed-steps variants of WS NF and
SH. A variance relation also holds for the hybrids: the variance is
non-increasing with the packet-processing rate pbase.
4This is the Horvitz-Thompson unbiased estimator obtained by di-
viding the weight of the item by the probability that it is sampled.
6. ESTIMATING OTHER AGGREGATES
The sketches support estimators for aggregates of other numeric
ﬂow properties over a queried subpopulation. We distinguish be-
tween ﬂow-level and packet-level properties.
6.1 Flow-level properties
P
P
P
f∈J w(f )
f∈J w(f )h(f )
P
We classify a numeric property h(f ) of the ﬂow f as ﬂow level
if it can be extracted from any packet of the ﬂow and some external
data (therefore, we know h(f ) for all the ﬂows that are included
in the sketch). Examples are the number of hops to the destination
AS, unity (ﬂow count), and ﬂow identiﬁers (source or destination
IP address and port, protocol). Flow-level properties can be aggre-
gated per-packet or per-ﬂow.
Per-packet aggregation. For a subpopulation J ⊂ F , the per-
packet sum of h() over J is
f∈J w(f )h(f ). The per-packet av-
. If h(f ) is the number of AS hops traveled
erage is
by the ﬂow f then the per-packet sum is the total number of AS
hops traveled by packets in the subpopulation J and the per-packet
average is the average number of hops traveled by a packet in J.
If h(f ) is unity, the per-packet sum is the weight of the subpop-
ulation. It is not hard to see that for a sketch with unbiased ad-
f∈J A(f )h(f ) is an unbiased estimator of the
justed weights,
per-packet sum of h() over J. (A (possibly biased) estimator for
P
the per-packet average is
.)
Per-ﬂow aggregation. The per-ﬂow sum of h() over J is
f∈J h(f )/|J|. If h(f ) ≡
The per-ﬂow average of h() over J is
1, the per-ﬂow sum is the number of distinct ﬂows in a subpopula-
tion. If h(f ) is the number of AS hops then the per-ﬂow average is
the average “length” of a ﬂow in J.
Our generic estimator for per-ﬂow sums is based on assignments
of adjusted counts to ﬂows. An adjusted count #(f ) for f ∈ F
P
is a random variable that is zero for ﬂows that are not included in
the sketch s and for all f ∈ F , E(#(f )) = 1 . Hence, for any
f∈J #(f ) is an unbiased estimator on |J|, the
subpopulation J,
number of distinct ﬂows in J.
X
For each f ∈ F , E(#(f )h(f )) = h(f ), therefore
#(f )h(f )
#(f )h(f ) =
f∈J A(f )h(f )
P
X
f∈J A(f )
P
P
f∈J h(f ).
f∈J
f∈J∩s
p(f ) ≡ #L
is an unbiased estimator of the per-ﬂow sum of h() over J. We
use the notation #L
p(n) for the adjusted count assigned
to a ﬂow f by algorithm L (for sampling rate p and when f has
observed count n). For L ∈ {SNF, SSH}, p and n are vectors and
for L ∈ {ANF, ASH NF, SH} they are scalars. For the adaptive
algorithms, we use the effective sampling rate.
We derive expressions for adjusted counts by applying the meth-
ods we developed for adjusted weight derivation (see Section 8). As
is the case for adjusted weights, there is a unique adjusted counts