```
:::
:::
:::
[]{#gfs_upgrade.html}
::: appendix
::: titlepage
# [⁠]{#gfs_upgrade.html#gfs_upgrade}附录 B. 将文件系统从 GFS 转换为 GFS2 {.title}
:::
::: para
由于 Red Hat Enterprise Linux 6 不支持 GFS 文件系统，因此您必须使用
`gfs2_convert`{.command} 命令将现有 GFS 文件系统升级到 GFS2
文件系统。请注意：您必须在升级到Red Hat Enterprise Linux 6 之前在Red Hat
Enterprise Linux 5 中执行这个转换过程。
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
在转换 GFS
文件系统前，您必须备份您的文件系统，因为转换过程是不可逆的，且在转换过程中出现的错误可导致进程意外终结，从而使文件系统不可用。
:::
::: para
在转换 GFS 文件系统前，您必须使用 `gfs_fsck`{.command}
命令检查文件系统并修复所有错误。
:::
::: para
如果由于停电或者其它问题导致 GFS 到 GFS2
的转换中断，请重启转换工具。在转换完成前不要在文件系统中执行
`fsck.gfs2`{.command} 命令。
:::
::: para
当您转换全部或者接近全部文件系统时，可能没有足够的空间放置 GFS2
文件系统数据结构。在这种情况下，所有日志都统一缩小为适应可用空间的大小。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#gfs_upgrade.html#ap-CDPN-gfs2}B.1. 上下文关联路径名转换 {.title}
:::
[]{#gfs_upgrade.html#idm140546305733200 .indexterm}
::: para
GFS2 文件系统不提供对上下文关联路径名（CDPN）的支持，CDPN
允许您生成指向不同目的文件或者目录的符号链接。您可使用 `mount`{.command}
命令的 `bind`{.literal} 选项获得 CDPN 在 GFS2 文件系统中的相同功能。
:::
::: para
`gfs2_convert`{.command} 命令识别
CDPN，并使用有相同名称的空目录替换它们。要配置绑定挂载替换
CDPN，则需要您了解要替换的 CDPN
目标的完整路径。转换您的文件系统前，您可以使用 `find`{.command}
命令识别该链接。
:::
::: para
以下命令列出指向 `hostname`{.literal} CDPN 的符号链接：
:::
``` screen
[root@smoke-01 gfs]# find /mnt/gfs -lname @hostname
/mnt/gfs/log
```
::: para
同样，您可以为其它
CDPN（`mach`{.literal}、`os`{.literal}、`sys`{.literal}、`uid`{.literal}、`gid`{.literal}、`jid`{.literal}）执行
`find`{.command} 命令。请注意：因为 CDPN 名称的格式可以是
`@hostname`{.literal} 或者
`{hostname}`{.literal}，所以您需要为每个变体运行 `find`{.command} 命令。
:::
::: para
有关 GFS2 中绑定挂载和文本独立路径名的详情请参考 [第 4.12 节
"绑定挂载以及上下文关联路径名"](#ch-manage.html#s1-manage-pathnames){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs_upgrade.html#ap-conversion-proc-gfs2}B.2. GFS 到 GFS2 转换步骤 {.title}
:::
::: para
采用以下步骤将 GFS 文件系统转换为 GFS2 文件系统。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    在 Red Hat Enterprise Linux 系统中，请备份您的现有 GFS 文件系统。
    :::
2.  ::: para
    将 GFS 文件系统从集群中的所有节点中卸载。
    :::
3.  ::: para
    在 GFS 文件系统中执行 `gfs_fsck`{.command}
    命令以确定没有文件系统崩溃。
    :::
4.  ::: para
    执行
    `gfs2_convertgfsfilesystem`{.command}``{=html}``{=html}。该系统会显示警告信息并在将
    *`gfsfilesystem`* 转换为 GFS2 之前进行确认。
    :::
5.  ::: para
    升级到 Red Hat Enterprise Linux 6。
    :::
:::
::: para
以下示例是在块设备 `/dev/shell_vg/500g`{.filename} 中将 GFS
文件系统转换为 GFS2 文件系统。
:::
``` screen
[root@shell-01 ~]#  /root/cluster/gfs2/convert/gfs2_convert /dev/shell_vg/500g 
gfs2_convert version 2 (built May 10 2010 10:05:40)
Copyright (C) Red Hat, Inc.  2004-2006  All rights reserved.
Examining file system..................
This program will convert a gfs1 filesystem to a gfs2 filesystem.
WARNING: This can't be undone.  It is strongly advised that you:
   1. Back up your entire filesystem first.
   2. Run gfs_fsck first to ensure filesystem integrity.
   3. Make sure the filesystem is NOT mounted from any node.
   4. Make sure you have the latest software versions.
Convert /dev/shell_vg/500g from GFS1 to GFS2? (y/n)y
Converting resource groups...................
Converting inodes.
24208 inodes from 1862 rgs converted.
Fixing file and directory information.
18 cdpn symlinks moved to empty directories.
Converting journals.
Converting journal space to rg space.
Writing journal #1...done.
Writing journal #2...done.
Writing journal #3...done.
Writing journal #4...done.
Building GFS2 file system structures.
Removing obsolete GFS1 file system structures.
Committing changes to disk.
/dev/shell_vg/500g: filesystem converted successfully to gfs2.
```
:::
:::
[]{#gfs2_tracepoints.html}
::: appendix
::: titlepage
# [⁠]{#gfs2_tracepoints.html#gfs2_tracepoints}附录 C. GFS2 跟踪点和 debug glock 文件 {.title}
:::
::: para
本附录论述了 glock `debugfs`{.literal} 界面和 GFS2
跟踪点。主要面向熟悉文件系统内部，并想要了解更多 GFS2 设计及如何 debug
GFS2 具体问题的高级用户。
:::
[]{#gfs2_tracepoints.html#idm140546311144768
.indexterm}[]{#gfs2_tracepoints.html#idm140546296106224
.indexterm}[]{#gfs2_tracepoints.html#idm140546301951376 .indexterm}
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-tracepoint-types-gfs2}C.1. GFS2 跟踪点类型 {.title}
:::
::: para
There are currently three types of GFS2 tracepoints: *glock* (pronounced
\"gee-lock\") tracepoints, *bmap* tracepoints and *log* tracepoints.
These can be used to monitor a running GFS2 file system and give
additional information to that which can be obtained with the debugging
options supported in previous releases of Red Hat Enterprise Linux.
Tracepoints are particularly useful when a problem, such as a hang or
performance issue, is reproducible and thus the tracepoint output can be
obtained during the problematic operation. In GFS2, glocks are the
primary cache control mechanism and they are the key to understanding
the performance of the core of GFS2. The bmap (block map) tracepoints
can be used to monitor block allocations and block mapping (lookup of
already allocated blocks in the on-disk metadata tree) as they happen
and check for any issues relating to locality of access. The log
tracepoints keep track of the data being written to and released from
the journal and can provide useful information on that part of GFS2.
:::
::: para
跟踪点的设计是尽量通用，就是说在使用 Red Hat Enterprise Linux 6
的过程中不需要更改 API。另一方面，这个界面的用户应了解这是一个 debug
界面，而且不是常规 Red Hat Enterprise Linux 6 API 组件的一部分，同时因为
Red Hat 不保证不会更改 GFS2 中的跟踪点界面。
:::
::: para
跟踪点是 Red Hat Enterprise Linux 6 的通用特性，且可完全适用于
GFS2。特别是可将其用于 `blktrace`{.literal} 架构部署，同时
`blktrace`{.literal} 跟踪点还可与 GFS2
合用获得系统性能的更全面信息。根据跟踪点所处级别，它们可在很短时间内产生大量数据。其设计旨在启用它们时在系统中添加最小负载，但也不可避免地有一些影响。使用各种方法进行的过滤可帮助减少数据，并帮助集中获得对了解具体情况有帮助的信息。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-tracepoints-gfs2}C.2. 跟踪点 {.title}
:::
::: para
您可在 `/sys/kernel/debug/tracing/`{.filename} 目录中找到跟踪点，假设将
`debugfs`{.literal} 挂载到 `/sys/kernel/debug`{.filename}
目录的标准位置。`events`{.filename}
子目录包含可指定的所有跟踪事件，同时如果载入 `gfs2`{.literal}
模块，则会有 `gfs2`{.literal} 子目录，该子目录中包含下一级子目录，每个
GFS2 事件一个目录。`/sys/kernel/debug/tracing/events/gfs2`{.filename}
目录的内容应类似如下：
:::
``` screen
[root@chywoon gfs2]# ls
enable            gfs2_bmap       gfs2_glock_queue         gfs2_log_flush
filter            gfs2_demote_rq  gfs2_glock_state_change  gfs2_pin
gfs2_block_alloc  gfs2_glock_put  gfs2_log_blocks          gfs2_promote
```
::: para
请运行以下命令启用所有 GFS2 跟踪点：
:::
``` screen
[root@chywoon gfs2]# echo -n 1 >/sys/kernel/debug/tracing/events/gfs2/enable
```
::: para
要启用具体跟踪点，则会在每个独立事件的子目录中都有一个
`enable`{.filename} 文件。同样也会有一个 `filter`{.filename}
文件，可将其用来为每个事件或者一组事件设置事件过滤器。下面会具体解释独立事件的含义。
:::
::: para
跟踪点的输出结果有 ASCII
或二进制两种格式。这个附录目前不介绍二进制界面。ASCII
界面有两种使用方法。您可以运行以下命令列出环缓冲的内容：
:::
``` screen
[root@chywoon gfs2]# cat /sys/kernel/debug/tracing/trace
```
::: para
这个界面适用于在某一段时间内使用长时间运行进程的情况，在一些事件后，想要查看缓冲中最新捕获的信息。另一个界面
`/sys/kernel/debug/tracing/trace_pipe`{.filename}
可用于需要所有输出结果的情况。事件发生时即可在这个文件中读取，在这个界面中没有可用的历史记录。输出结果的格式在两个界面中是一样的，本附录后面的小节中将为每个
GFS2 事件进行具体描述。
:::
::: para
可使用 `trace-cmd`{.command}
程序读取跟踪点数据。有关这个程序的详情请参考 [第 C.10 节
"参考资料"](#gfs2_tracepoints.html#ap-references-gfs2){.xref}。`trace-cmd`{.command}
程序可以类似的方式用于 `strace`{.command}
程序，例如：在从各种资源中收集跟踪数据是运行命令。
:::
:::
::: section
::: titlepage
# [⁠]{#gfs2_tracepoints.html#ap-glocks-gfs2}C.3. Glocks {.title}
:::
::: para
要了解 GFS2，最重要的概念，也是与其他文件系统不同的概念就是
glocks。就源代码而言，glock 是一个数据结构，可将 DLM
和缓存带入一个单一静态机器。每个 glock 都与单一 DLM 锁定有 1:1
对应关系，并为那个锁定状态提供缓存，这样来自文件系统单一节点的竞争操作就不会重复调用
DLM，因此可帮助避免不必要的网络流量。glocks
有两个大类，即缓冲元数据的一类和不缓冲元数据的一类。内节点 glock
和资源组 glock 都可缓冲元数据，其他 glock 类型则不缓冲元数据。内节点
glock 还包括缓冲元数据以外的数据，并拥有所有 glock 中最复杂的逻辑。
:::
::: table
[⁠]{#gfs2_tracepoints.html#tb-table-glock-dlm-modes}
**表 C.1. Glock 模型和 DLM 锁定模型**
::: table-contents
  ----------------------------------------------------------------------------------
  Glock 模型           DLM 锁定模型         备注
  -------------------- -------------------- ----------------------------------------
  UN                   IV/NL                未锁定（没有与 glock 或者 NL 锁定关联的
                                            DLM 锁定，具体要看 I 标签）
  SH                   PR                   共享（读保护）锁定
  EX                   EX                   排它锁
  DF                   CW                   直接 I/O
                                            和文件系统停滞时使用的延迟（同时写入）
  ----------------------------------------------------------------------------------
:::
:::
::: para
Glocks remain in memory until either they are unlocked (at the request
of another node or at the request of the VM) and there are no local
users. At that point they are removed from the glock hash table and
freed. When a glock is created, the DLM lock is not associated with the
glock immediately. The DLM lock becomes associated with the glock upon
the first request to the DLM, and if this request is successful then the
\'I\' (initial) flag will be set on the glock. [表 C.4 "Glock
标签"](#gfs2_tracepoints.html#tb-glock-flags-ap){.xref} shows the
meanings of the different glock flags. Once the DLM has been associated
with the glock, the DLM lock will always remain at least at NL (Null)
lock mode until the glock is to be freed. A demotion of the DLM lock
from NL to unlocked is always the last operation in the life of a glock.
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
从 Red Hat Enterprise Linux 5 可开始 DLM
锁行为的某些方面有了变化，即有时会将附加到 glock 的 DLM
锁完全解锁，因此Red Hat Enterprise Linux 5 有不同的机制保证在需要时保留
LVM（锁值块）。由于在 GFS2 中合并 `lock_dlm`{.literal} 锁模块（不会与
DLM 本身混淆）而使得Red Hat Enterprise Linux 6 使用的新方案成为可能。
:::
:::
:::
::: para
Each glock can have a number of \"holders\" associated with it, each of
which represents one lock request from the higher layers. System calls
relating to GFS2 queue and dequeue holders from the glock to protect the
critical section of code.
:::
::: para
使用 glock
的机器是基于工作队列（workqueue）。出于性能考虑，更倾向于使用小任务（tasklet），但在当前部署中需要从禁止其使用的上下文中提交
I/O。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
工作队列有其自身的跟踪点，如需要可与 GFS2 跟踪点联合使用。
:::
:::
:::
::: para
[表 C.2 "Glock
模式和数据类型"](#gfs2_tracepoints.html#tb-table-glockmode-data){.xref}
显示每个 glock 模块下可能缓存的状态是什么，以及缓存的状态是否
dirty。这可适用于内节点和资源组锁，虽然资源组锁中没有数据内容，只有元数据。
:::
::: table
[⁠]{#gfs2_tracepoints.html#tb-table-glockmode-data}
**表 C.2. Glock 模式和数据类型**
::: table-contents