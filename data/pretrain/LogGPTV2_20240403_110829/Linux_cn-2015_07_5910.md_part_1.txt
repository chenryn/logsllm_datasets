---
author: Ben Everard
category: 技术
comments_data:
- date: '2015-07-30 00:23:42'
  message: Tmux 一直在用了，确实很好用，
  postip: 171.8.201.207
  username: netb2c [Chrome 44.0|Fedora 22]
count:
  commentnum: 1
  favtimes: 4
  likes: 0
  sharetimes: 0
  viewnum: 10434
date: '2015-07-29 08:00:00'
editorchoice: false
excerpt: 在我们的关于 shell 基础的指导下, 得到一个更灵活,功能更强大且多彩的命令行界面  为何要这样做?  使得在 shell 提示符下过得更轻松,高效
  在失去连接后恢复先前的会话 Stop pushing around that fiddly rodent!   这是我的命令行提示符的设置。对于这个小的终端窗口来说，这或许有些长。但你可以根据你的喜好来调整它。
  作为一个 Linux 用户, 你可能熟悉 shell (又名为命令行)。 或许你需要时不时的打开终端来完成那些不能在 GUI 下处理的必要任务，抑或是因为你处在一个将窗口铺满桌面的环境中，而
  shell 是你与你的 linux 机器交互的主
fromurl: http://www.linuxvoice.com/linux-101-power-up-your-shell-8/
id: 5910
islctt: true
largepic: /data/attachment/album/201507/29/000326wwpxmtpvpnzq9ddz.png
permalink: /article-5910-1.html
pic: /data/attachment/album/201507/29/000326wwpxmtpvpnzq9ddz.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在我们的关于 shell 基础的指导下, 得到一个更灵活,功能更强大且多彩的命令行界面  为何要这样做?  使得在 shell 提示符下过得更轻松,高效
  在失去连接后恢复先前的会话 Stop pushing around that fiddly rodent!   这是我的命令行提示符的设置。对于这个小的终端窗口来说，这或许有些长。但你可以根据你的喜好来调整它。
  作为一个 Linux 用户, 你可能熟悉 shell (又名为命令行)。 或许你需要时不时的打开终端来完成那些不能在 GUI 下处理的必要任务，抑或是因为你处在一个将窗口铺满桌面的环境中，而
  shell 是你与你的 linux 机器交互的主
tags:
- 命令行
- shell
thumb: false
title: 'LINUX 101: 让你的 SHELL 更强大'
titlepic: false
translator: FSSlc
updated: '2015-07-29 08:00:00'
---
> 
> 在我们的关于 shell 基础的指导下, 得到一个更灵活,功能更强大且多彩的命令行界面
> 
> 
> 
**为何要这样做?**
* 使得在 shell 提示符下过得更轻松,高效
* 在失去连接后恢复先前的会话
* Stop pushing around that fiddly rodent!
![bash1](/data/attachment/album/201507/29/000326wwpxmtpvpnzq9ddz.png)
这是我的命令行提示符的设置。对于这个小的终端窗口来说，这或许有些长。但你可以根据你的喜好来调整它。
作为一个 Linux 用户, 你可能熟悉 shell (又名为命令行)。 或许你需要时不时的打开终端来完成那些不能在 GUI 下处理的必要任务，抑或是因为你处在一个将窗口铺满桌面的环境中，而 shell 是你与你的 linux 机器交互的主要方式。
在上面那些情况下，你可能正在使用你所使用的发行版本自带的 Bash 配置。 尽管对于大多数的任务而言，它足够好了，但它可以更加强大。 在本教程中，我们将向你展示如何使得你的 shell 提供更多有用信息、更加实用且更适合工作。 我们将对提示符进行自定义，让它比默认情况下提供更好的反馈，并向你展示如何使用炫酷的 `tmux` 工具来管理会话并同时运行多个程序。 并且，为了让眼睛舒服一点，我们还将关注配色方案。那么，进击吧，少女！
### 让提示符更美妙
大多数的发行版本配置有一个非常简单的提示符，它们大多向你展示了一些基本信息， 但提示符可以为你提供更多的内容。例如，在 Debian 7 下，默认的提示符是这样的:
```
mike@somebox:~$
```
上面的提示符展示出了用户、主机名、当前目录和账户类型符号（假如你切换到 root 账户， **$** 会变为 **#**)。 那这些信息是在哪里存储的呢? 答案是：在 **PS1** 环境变量中。 假如你键入 `echo $PS1`， 你将会在这个命令的输出字符串的最后有如下的字符：
```
\u@\h:\w$
```
这看起来有一些丑陋，并在瞥见它的第一眼时，你可能会开始尖叫，认为它是令人恐惧的正则表达式，但我们不打算用这些复杂的字符来煎熬我们的大脑。这不是正则表达式，这里的斜杠是转义序列，它告诉提示符进行一些特别的处理。 例如，上面的 **u** 部分，告诉提示符展示用户名， 而 w 则展示工作路径.
下面是一些你可以在提示符中用到的字符的列表:
* d 当前的日期
* h 主机名
* n 代表换行的字符
* A 当前的时间 (HH:MM)
* u 当前的用户
* w (小写) 整个工作路径的全称
* W (大写) 工作路径的简短名称
* $ 一个提示符号，对于 root 用户为 # 号
* ! 当前命令在 shell 历史记录中的序号
下面解释 **w** 和 **W** 选项的区别: 对于前者，你将看到你所在的工作路径的完整地址，（例如 **/usr/local/bin**），而对于后者， 它则只显示 **bin** 这一部分。
现在，我们该怎样改变提示符呢? 你需要更改 **PS1** 环境变量的内容，试试下面这个：
```
export PS1="I am \u and it is \A $"
```
现在，你的提示符将会像下面这样：
```
I am mike and it is 11:26 $
```
从这个例子出发，你就可以按照你的想法来试验一下上面列出的其他转义序列。 但等等 – 当你登出后，你的这些努力都将消失，因为在你每次打开终端时，**PS1** 环境变量的值都会被重置。解决这个问题的最简单方式是打开 **.bashrc** 配置文件（在你的家目录下） 并在这个文件的最下方添加上完整的 `export` 命令。在每次你启动一个新的 shell 会话时，这个 **.bashrc** 会被 `Bash` 读取, 所以你的加强的提示符就可以一直出现。你还可以使用额外的颜色来装扮提示符。刚开始，这将有点棘手，因为你必须使用一些相当奇怪的转义序列，但结果是非常漂亮的。 将下面的字符添加到你的 **PS1**字符串中的某个位置，最终这将把文本变为红色：
```
\[\e[31m\]
```
你可以将这里的 31 更改为其他的数字来获得不同的颜色:
* 30 黑色
* 32 绿色
* 33 黄色
* 34 蓝色
* 35 洋红色
* 36 青色
* 37 白色
所以，让我们使用先前看到的转义序列和颜色来创造一个提示符，以此来结束这一小节的内容。深吸一口气,弯曲你的手指，然后键入下面这只“野兽”：
```
export PS1="(\!) \[\e[31m\] \[\A\] \[\e[32m\]\u@\h \[\e[34m\]\w \[\e[30m\]$"
```
上面的命令提供了一个 Bash 命令历史序号、当前的时间、彩色的用户或主机名组合、以及工作路径。假如你“野心勃勃”，利用一些惊人的组合，你还可以更改提示符的背景色和前景色。非常有用的 Arch wiki 有一个关于颜色代码的完整列表：。