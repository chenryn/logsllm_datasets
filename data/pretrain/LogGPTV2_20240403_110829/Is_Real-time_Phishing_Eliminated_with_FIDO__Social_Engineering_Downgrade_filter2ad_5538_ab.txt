### Phishing Domain and Setup

We acquired the domain `two-step.online` for our phishing operation, obtained a Let’s Encrypt certificate for this domain, and placed our phishing pages within a `google.com` directory on our server. We deliberately chose a domain with valid words in a non-traditional TLD (e.g., `.online`) for two reasons: (1) to obtain a TLS certificate without being flagged as suspicious [72], and (2) to exploit the fact that users who do not fully understand URLs might be less likely to notice the discrepancy if `google.com` is present in the URL [81, 92].

Our `index.html` page was periodically blocklisted, so we made it accessible only through a randomly generated alphanumeric string. This ensured that the page could only be reached via a direct link sent to potential victims. The browser's URL bar would display a green padlock icon with the URL: 
```
https://login.two-step.online/google.com/index.php?acc=8[..]b
```
The corresponding PHP code at the start of `index.php` reads:
```php
echo "This is Index.php!";
```
where `acc` is the variable containing the random string.

### Implementation of Phishing Pages

In creating our phishing pages, shown in Figure 3, we did not borrow content from Google’s website. We neither pre-downloaded content from Google nor linked to Google content from our pages. This was done to avoid detection, as Google employs code obfuscation techniques to thwart phishing attacks, and to prevent our server’s requests to Google’s web content from being flagged [67]. The only object we downloaded and uploaded onto our server was Google’s logo (an image). Our implementation required fewer than 2,000 lines of combined PHP, JavaScript, HTML, and CSS code, making it feasible for any attacker with moderate web programming experience.

### FIDO Prompt and User Interaction

Recall from Section 2 that the authentic FIDO prompt is typically displayed outside the attacker-controlled area of the browser to prevent attackers from replicating the prompt within the content pane. For example, in Chrome, the top tip of the box overlaps the URL bar (see Figure 2a). Browsers capture the domain from the URL bar and display it to the user within the FIDO-prompt box. To circumvent this, we used API functions that do not display the browser-generated prompts but still notify the webserver when a security key is inserted. For Step 10 (Figure 1), we used the `u2f.register` function, which does not display browser-generated prompts. With this function, communications with the user are left to the website developer (i.e., through standard HTML and JavaScript).

### Variations to Step 10

Depending on the design of the legitimate website, variations other than presenting an alternative authentication method immediately after the FIDO prompt may be more effective in tricking the user. For example, similar to previous research [77], the attacker might display messages such as: “Due to a technical error, we are unable to process your FIDO token at this time,” or “Our FIDO-handling service is currently down; please use another method.” These approaches avoid using FIDO APIs altogether, thus bypassing the browser-generated FIDO-prompt box where attackers have no control over the message.

### Attack Implementation

To test the effectiveness of this attack, we implemented a phishing website that behaves as described above. The website targets users by mimicking the login process and prompting them for additional authentication factors. The "extra step" in our implementation, such as a one-time password (OTP), helps downplay the security of FIDO and makes the attack more convincing.

### Evaluation Methodology

#### Design Decisions

We considered several study designs, including legal and ethical concerns [44, 45]. We dismissed the idea of using participants’ real credentials without prior consent, as it can lead to feelings of violation even if no data is compromised [44]. Another approach involves asking participants to classify pages as phishing or legitimate without submitting credentials, but this did not align with our goal of measuring the effectiveness of the FIDO protocol against our phishing attack. Analyzing logs from service providers was also not viable since our downgrade attack is novel and has not been exploited in the wild.

We decided to conduct a role-playing experiment followed by a semi-structured interview. This combination minimizes the limitations of each method by providing cross-checking opportunities.

#### Study Design

##### Study Scenario

Participants were recruited using flyers, university mailing lists, and social media. They visited a webpage describing the study, its duration, and compensation before scheduling the interview. The study was advertised as evaluating the usability of email clients, and participants were provided with user accounts and credentials created specifically for the study. The scenario indirectly encouraged participants to think about the security of these accounts.

The study was conducted in-person in two international cities: Ottawa, Canada (-N), and Zürich, Switzerland (-E). Participants were monetarily compensated (CHF20 in Zürich, $10 in Ottawa). They completed a demographics questionnaire, went through the study scenario, and participated in a semi-structured interview. The interview questions were designed to gauge participants’ awareness of the phishing attempts indirectly.

##### Role-Playing

Participants role-played Jordan Hart, a new employee in a technology company. They were provided with a laptop, smartphone, and a FIDO security key. They read and signed an on-boarding information sheet outlining company policies and explaining FIDO keys. The sheet listed Microsoft Outlook as the primary email provider and included credentials for both Microsoft and Google accounts. The researcher, acting as the IT manager, helped participants log in and use the FIDO key.

##### Emails

Four out of 15 emails in Jordan’s inbox were phishing emails, containing links to our phishing website. These emails were spear-phishing, targeting specific individuals. We included a high number of phishing emails to increase the likelihood of detection. The emails were sent using PHP’s mail function with a spoofed source address and included typical errors like grammatical mistakes and typos. Non-phishing emails were sent from authentic company email accounts.

### Participants

We recruited 51 participants: 25 in city-E and 26 in city-N. The dataset (available in [83, Appendix D]) is balanced in terms of gender, with 26 participants identifying as female, 24 as male, and one choosing “Other or prefer not to answer.” Participants were between 18 and 64 years old (mean = 29.9, median = 27). The majority had some level of familiarity with security practices.

This structured and detailed approach ensures a comprehensive and professional presentation of the phishing attack and its evaluation.