may be imprecise, this step helps EPEX reduce false pos-
itives. The ﬁnal output of EPEX is a set of program error
paths—FT signature, call-site location, and error paths in
the caller functions along with EPEX’s diagnosis of cor-
rect and buggy error handling. We present the detailed
algorithm in the rest of this section.
Input
Algorithm 1: EPEX workﬂow
1 EPEX (FT, FTerrSpec, FTcallers, GlobalnerrSpec, Loggers)
: function FT, error spec FTerrSpec, callers of FT
FTcallers, global non-error spec GlobalnerrSpec,
error logging functions Loggers
Output: Bugs
2 ———————————————————————
3 Bugs ⇐ φ
4 shouldHandle ⇐ False
5 for each caller c ∈ FTcallers do
a.isSymbolic ⇐ True
for each argument a ∈ c.inputArguments do
end
for each path p ∈ c.Paths do
isErrPath ⇐ False
errPts ⇐ φ
for each program point s ∈ p do
/* Step-I : identifying error paths */
if s calls FT then
FTret ⇐ symbolic return value of FT
isErrPath ⇐ chkIfErrPath(FTret,
FTerrSpec)
if isErrPath = True then
errPts ⇐ errPts ∪ s.location
end
end
if isErrPath = True then
/* Step-II : checking error Handling */
isHandled ⇐ chkErrHandling(s,
GlobalnerrSpec, Loggers)
if (isHandled = unhandled) or
(isHandled = maybe_handled) then
Bugs ⇐ Bugs ∪ (cid:27)errPts, isHandled(cid:26)
end
if (isHandled = handled) or (isHandled =
maybe_handled) then
/* Resetting an error path */
isErrPath ⇐ False
errPts ⇐ φ
end
/* Example requires error handling */
if (isHandled = handled) then
28
29
30
31
32
33
34
35
36
37
38
39 end
40 /* Step-III : Leveraging multiple error-handling
shouldHandle ⇐ True
end
end
end
end
instances */
return Bugs
41 if shouldHandle then
42
43 else
44
45 end
return φ
348  25th USENIX Security Symposium 
USENIX Association
4
3.2 Step-I: identifying error paths
We deﬁne error paths to be the program paths in which
a function call fails and returns error values. To identify
the error paths for a function, EPEX ﬁrst has to know the
error values that a function can return; EPEX takes such
information as input (see Section 2 for details). Then the
program paths along which the function returns the error
values are identiﬁed as error paths. The call sites of the
failed function are treated as error points (errPts in Al-
gorithm 1). For example, in Listing 1, the program path
containing an if-branch (highlighted gray ) is an error
path; line 16 of _gnutls_verify_certificate2
is an error point along that error path. Note that an error
path can have one or more error points. Given a function
under test, say FT, and its caller functions FTcaller, the
goal of Step-I is to explore all possible error paths going
through FT and mark the corresponding error points.
Algorithm 2: Step-I: Identifying error paths
1 chkIfErrPath (FTret, FTerrSpec)
: FTret, FTerrSpec
Input
Output: isErrPath, FTret
2 ———————————————————————
3 if FTret ∧ FTerrSpec is satisﬁable then
/* Error path is possible */
if FTret ∧ ¬FT errSpec is satisﬁable then
/* Force the error path, if needed */
FTret ⇐ FTret ∧ FTerrSpec
return True
/* Error path is impossible */
return False
4
5
6
7
8
9 else
10
11
12 end
Exploring error paths.
First, EPEX performs under-
constrained symbolic execution at each caller function
in FTcallers, and monitors each method call to check if
FT is called. If EPEX ﬁnds such a call, then right after
returning from symbolically executing FT, EPEX checks
if the path conditions involving the symbolic return value
(FTret) satisfy its error speciﬁcations (FTerrSpec), as men-
tioned in the input spec (see Algorithm 2), i.e. if FTret ∧
FTerrSpec is satisﬁable. This helps EPEX identify two
main cases:
• Error path possible. If FTret ∧ FTerrSpec is satisﬁ-
able, the error path is possible. But while continu-
ing to analyze the error path, EPEX must make sure
the constraints make the error path inevitable, so it
checks if FTret ∧ ¬FT errSpec is satisﬁable, and if
so, sets FTret to FTret ∧ FTerrSpec, so that the con-
straints force the error path to be taken.
• Error path impossible. When FTret ∧ FTerrSpec is
unsatisﬁable, EPEX considers it as not an error path
and stops tracking it any further.
Algorithm 2 illustrates this process. If a path is con-
sidered to be an error path, EPEX notes the correspond-
ing call-site locations in the source code as error points
and continues tracking the path in Step-II. In Listing 1,
the buggy path has check_if_ca return a negative
value, which means that it is certainly an error path, and
the algorithm returns True, without having to further re-
strict the constraints.
3.3 Step-II: checking error handling
If a path is marked as an error path in Step-I (isErrPath=
=True in Algorithm 1), this step checks whether the er-
ror is handled properly along the error path in the caller
function. As the symbolic execution engine explores dif-
ferent error paths, we propagate the error path state (e.g.,
isErrPath, FT, and errPts) to any new path forked from
conditional branches. We let the rest of the symbolic exe-
cution proceed normally unless one of the following hap-
pens (see Algorithm 3):
At return point. If EPEX encounters a return statement
along an error path, it checks whether the error value is
pushed upstream. To do that, Step-II takes program-wide
speciﬁcations for non-error values (GlobalnerrSpec) as in-
put and checks the constraints on the returned variable
of FTcaller against GlobalnerrSpec to determine whether
FTcaller is returning an error value along the error path. If
the returned variable can only contain a non-error value,
EPEX marks the corresponding path to be unhandled; if
it may have a non-error value or an error value, EPEX
marks it as maybe_handled; and if it cannot have any
non-error values, EPEX marks the path as handled.
Although both maybe_handled and unhandled indi-
cate potential bugs, we differentiate between them be-
cause in Line 27 of Algorithm 1, we no longer count the
path as an error path in the case of maybe_handled, since
we have already found where the error could be handled;
the same error value does not have to be checked repeat-
edly.
At exit point. A call to libc function exit (or other re-
lated function like _exit) ends the execution of a path.
In such a case, EPEX checks the constraints on the sym-
bolic argument to the exit function along an error path: if
the symbolic argument can have only error or non-error
indicating value, EPEX marks the path as handled or
unhandled respectively. If the argument may have both
error and non-error indicating values, EPEX marks the
path as maybe_handled.
At logging point.
The global speciﬁcations also sup-
port providing the names of the program-speciﬁc error
logging functions (Loggers). In most C programs, errors
are logged through special logging or alerting functions.
USENIX Association  
25th USENIX Security Symposium  349
5
If an error path calls an error logging function, EPEX
marks that path as handled.
In Listing 1, _gnutls_verify_certificate2
sets result to the non-error value, 1, in the error path
before returning it, so the algorithm classiﬁes the error as
unhandled.
report any bugs. With manual analysis we conﬁrmed
that as trusted certiﬁcate authorities can be loaded from
multiple sources, such errors can indeed be ignored
safely.
4
Implementation
Algorithm 3: Step-II: Checking error handling
1 chkErrHandling (s, GlobalnerrSpec, Loggers)
Input
: program point s, global non-error spec
GlobalnerrSpec, error logging functions Loggers
Output: isHandled
2 ——————————————————————–
3 if (s is a top-level ret statement) or (s is a call to “exit”)
then
4
5
6
7
8
9
10
return unhandled
tval ← symbolic return value/exit argument
if (tval ∧ GlobalnerrSpec is satisﬁable) and (tval ∧ ¬
GlobalnerrSpec is unsatisﬁable) then
else if (tval ∧ GlobalnerrSpec is unsatisﬁable) and
(tval ∧ ¬Global nerrSpec is satisﬁable) then
else if (tval ∧ GlobalnerrSpec is satisﬁable) and (tval
∧ ¬Global nerrSpec is satisﬁable) then
return handled
return maybe_handled
11 else if s ∈ Loggers then
return handled
12
13 return not_checked
3.4 Step-III:
leveraging multiple error-
handling instances
As program documentation may be buggy or symbolic
execution engines may be imprecise, EPEX compares
the analysis results across multiple callers of the function
under test (FT) to minimize false positives. Lines 34−45
in Algorithm 1 present this step. If EPEX ﬁnds that all
the callers of FT return unhandled or maybe_handled,
EPEX ignores the corresponding bugs and does not re-
port them. However, if at least one caller sets isHandled
to handled, all the buggy paths marked from Step-II (line
25 in Algorithm 1) will be reported as bugs. The underly-
ing idea behind this step is inspired by the seminal work
of Engler et al. [16] where deviant behaviors were shown
to indicate bugs.
each
adds
trusted CAs.
returns the number of added CAs.
For example, function gnutls_x509_trust_li-
Certiﬁcate
st_add_trust_file
Authority (CA) mentioned in the input ﬁle to the
list of
In an error-free execution,
it
returns
a negative number
in case of a parsing error.
However,
the 5 instances in GnuTLS where
gnutls_x509_trust_list_add_trust_file
is called, step II indicates that error values are not
handled correctly. In such cases, Step III assumes that
the error values can be safely ignored and does not
in all
It
EPEX is implemented using the Clang static analysis
framework [42] (part of the LLVM project) and its un-
derlying symbolic execution engine. The Clang analyzer
core symbolically explores all feasible paths along the
control ﬂow graph of an input program and provides a
platform for custom, third-party checkers to monitor dif-
ferent paths, inspect the constraints of different symbolic
values along those paths, and add additional constraints
if necessary. A typical checker often looks for viola-
tions of different invariants along a path (e.g., division
by zero). In case of a violation, the checker reports bugs.
We implement EPEX as a checker inside the Clang an-
alyzer. The rest of this section describes how EPEX is
implemented as a Clang checker in detail.
speciﬁcation (GlobalnerrSpec),
Error speciﬁcations. EPEX takes a text ﬁle con-
taining the per-function error speciﬁcations (FTerrSpec),
and
global non-error
global error speciﬁcation (GlobalerrSpec) as input. List-
ing 2 shows a sample input ﬁle. FTerrSpec contains ﬁve
parameters: (cid:26)function name, number of arguments, re-
turn type, lower bound of error value, upper bound of
error value(cid:25). The ﬁrst three parameters deﬁne a func-
tion signature. The number of arguments and return type
(e.g., integer, boolean, etc.) help to disambiguate func-
tions with identical names. The last two optional param-
eters represent a range of error values that the function
can return. For example, error speciﬁcation for function
RAND_bytes is: (cid:26) RAND_bytes, 2, int, >= −1,=-1, =-1, <=0
/* Per-func spec with empty error ranges
(global error ranges will be used)*/
ASN1_INTEGER_set_int64, 2, int
ASN1_INTEGER_set, 1, int
/* Global error spec */
__GLOBAL_ERROR_BOUND__, int, =0, NA
/* Global non-error spec */
__GLOBAL_NOERR_VAL__, int, =1
__GLOBAL_NOERR_VAL__,
ptr, !=NULL
0 respectively, and hence global error bounds are not
valid for them. Finally, GlobalnerrSpec contains non-
error bounds/values for functions with different return
types (see lines 14 and 15 of Listing 2).
For ex-
ample, (cid:31) __GLOBAL_NOERR_VAL__, int, = 1(cid:30) in-
dicates that any function with integer return type re-
turns 1 to indicate an error-free execution. Similarly,
(cid:31)__GLOBAL_NOERR_VAL__, ptr, ! =NULL(cid:30) indi-
cates an error-free execution for the functions returning
pointers will result in the return pointer to be non-null.
Such GlobalnerrSpec speciﬁcations are used to ensure that
the return value of the caller function of FT is pushing
the errors upstream correctly.
The error speciﬁcations for all the functions under test
were created manually. Since, a majority of these func-
tions either follow the per-project global error conven-
tion or, at least, functions inside same modules have the
same error ranges, e.g., all the big number routines in
OpenSSL return 0 on error, the overhead of manual spec
generation is not very signiﬁcant. In fact, it took only one
man-day to generate error specs for all 256 functions that
we have examined. Table 2 shows the number of speci-
ﬁed functions for each library, and the number of unique
speciﬁcations. Except for WolfSSL, where we used more
individualized speciﬁcations, each library contained no
more than 10 unique error speciﬁcations, so that we were
able to generate 256 speciﬁcations out of only 38 unique
constraints.
Table 2: Error speciﬁcation counts
Library
OpenSSL
GnuTLS
mbedTLS
wolfSSL
Total
Functions
Unique Speciﬁcations
109
58
46
43
256
9
3
10
16
38
As the same set of library functions are used by mul-
tiple applications, the same error speciﬁcations can be
reused for all such applications.
In fact, for our test
applications, we focused on only OpenSSL API func-
tions. We also found that fallible functions that return
booleans or pointers, irrespective of the library they be-
long to, mostly indicate errors by returning false and
NULL respectively. For functions returning integer error
codes, we found that the error codes were almost always
represented by a macro or enumerated type that is de-
ﬁned in a header ﬁle and therefore was very easy to ﬁnd.
Functions that use the same enumerated type/macro tend
to follow the same error protocol. We show some sample
error speciﬁcations for OpenSSL API functions in List-
ing 2.
Note that once the error speciﬁcations for a set of API
functions are created manually, testing new applications
using the same API is very easy; the user only needs to
add application-speciﬁc non-error values (i.e. the values
indicating error-free execution) for each new application.
Identifying error paths. For identifying error paths,
as mentioned in Step-I of Section 3, EPEX checker
uses the built-in callback method checkPostCall.
checkPostCall is called once the analyzer core
ﬁnishes tracking each function body. We overrode
checkPostCall so that it looks for the functions
mentioned in the error spec, i.e. checks whether the cur-
rent function’s name, number of arguments, and return
type match the speciﬁcation. In case of a match, Algo-
rithm 2 is called to check whether the function’s return
value satisﬁes the lower and upper bounds of error values
as given in its error spec; if so, the current path is marked
as error path.
Checking error handling. We implemented Step-II
by extending the checkPreStmt callback method for
checking the program state before return statements
and the checkPreCall callback for checking the pro-
gram state before calling exit functions or any program-
speciﬁc error logging functions as speciﬁed in the input
spec. Inside checkPreStmt callback, EPEX checks
whether the symbolic return value satisﬁes the global
non-error spec (see Algorithm 3). A similar check is