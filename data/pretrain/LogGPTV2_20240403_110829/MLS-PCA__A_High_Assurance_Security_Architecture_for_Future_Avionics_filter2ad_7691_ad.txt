Alloy  Constraint  Analyzer  found  a  case  where  the
operation  that  changes  DAC  permissions  invalidated the
DAC  invariant,  that  says  “a  communication path is in
existence only if the DAC policy allows it.” The problem
was the delay in synchronizing the DAC change with the
EPE state – an example of the classical problem of when
does  a  revocation  become  effective?  Normally this
invariant  check  is  used  to  determine  if  an operation is
under-constrained.  Here,  it  is  the  invariant  that is over-
constrained. The solution was to relax the DAC invariant
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
and apply it only to new connections. The new rule is “ A 
connection  path  may  be  created  only  if  the  DAC  policy 
allows it.” 
7.  Conclusion: Proof of Concept 
The  proof  is  in  the  pudding,  and  our  pudding  is  an 
MLS-PCA  proof  of  concept  demonstration.  But  how  do 
you  demonstrate  thousands  of  networked  processors 
nearly  two  decades  before  they  exist?  We  wish  to  write 
code from the formal specs for the NSE, EPE, and a vital 
application  of  AAPs.  Simulation  would  not  admit  code, 
and 
too 
expensive.  Using  hundreds  of  PCA  chips  is  years  in  the 
future  when  they  first  become  available  from  DARPA. 
That  was  our  dilemma  early  on.  We  found  a  way  using 
Grid Computing [28].  
together  many  microprocessors 
lashing 
is 
7.1  Grid Computing: Simulating 1000s of CPUs 
The  DARPA  contract  under  which  MLS-PCA  was 
developed was limited just to the formal modeling effort. 
However,  Northrop  Grumman  Corporation  found  the 
modeling  results  of  great  interest  and  chose  to  sponsor  a 
prototype using CY 2003 Independent R&D (IRAD).  
The  Northrop  Grumman  Corporation  R&D  private 
network  consists  of  hundreds  of  user  workstations  of 
Windows  PCs,  Sun  Solaris  machines,  and  Silicon 
Graphics  workstations.  If  we  ran  just  10  AAPs  per 
workstation,  we  can  have  a  1000  node  distributed  MLS-
PCA  implementation  via  a  Grid  Computing  architecture. 
The  net  is  essentially  available  two  shifts  a  day  plus 
weekends. We wrote the NSE and EPE code in C++ from 
the  formal  specs.  We  run  the  code  under  Windows  with 
an  IP  protocol  stack,  and  build  trusted  connections  with 
IPSec, 256-bit key AES software encryption, and HMAC-
SHA-256  authentication  for  the  EPE.  We  recognize  the 
vulnerability  of  MLS-PCA  to  attacks  on  the  Windows 
OS;  however,  the  objective  of  this  implementation  is  to 
shake  out  the  model,  demonstrate  its  soundness,  and 
collect  basic  performance  data.  Later,  we  will  drop 
Windows  and  replace  it  with  a  high  assurance  TCB  to 
boot  and  run  NSE,  EPE  and  AAP  code.  We  have  also 
selected 
demonstration 
application. 
a  meaningful  MLS-PCA 
7.2  Targeting Application 
MLS-PCA  computing  demands  a  different  paradigm 
for  designing  applications.  Rather  than  construct  large 
monolithic functional modules of hardware and software, 
as  is  current  practice,  our  model  demands  functions  be 
composed of small code segments, i.e., processes, each of 
which  operates  at  a  single  security  level  within  its  own 
processor,  and  communicates  with    related  processes  via 
Inter  Process  Communication.  The  art  of  designing  such 
distributed  software  is  just  beginning  to  take  shape  in 
various  research  efforts,  e.g.,  DARPA’s  “agent-based 
systems”[29]. Northrop  Grumman  Corporation  has  an 
extensive  R&D  effort  in  multi-sensor  target  detection. 
These  algorithm-based applications have MLS properties 
and  can  profit  from  the  parallelism  inherent  in  the 
distributed MLS-PCA model and Grid Computing. 
A typical target radar or infrared image can be as large 
as  9,000  x  9,000  pixels.  This  is  too  large  for  processing 
algorithms on anything short of a high performance server 
or  special  digital  signal  processor;  certainly  beyond  the 
capabilities  of  a  current  PC.  Our  Grid  Computing  demo 
will divide the image into 100 smaller 1,000 x 1,000 pixel 
sub-images  or  cells,  allowing  for  cell  overlap  to  avoid 
missing features that span a cell boundary, and pass each 
cell on to a Grid processor. A Grid processor is capable of 
applying  a  search  algorithm  to  detect  potential  targets  in 
the cell. We are simulating data for different target types.  
When  a  potential  target  is  detected  and  identified  in  the 
cell,  the  algorithm  will  report  the  potential  target  to  a 
central controller that will eliminate duplicate reports. The 
central  controller  will  report  each  potential  target  to  one 
of four target controllers, one for each of four types, also 
running  as  separate  processors  on  the  Grid.    Target 
controller types are at different simulated security levels: 
unclassified,  confidential,  secret,  and  top  secret.  The  cell 
processors will all run at a simulated unclassified security 
level.  A  cell  processor  will  write  up  to  the  central 
controller’s  higher  security 
the  central 
controller  will  write  up 
target 
controllers.  MLS-PCA  is  designed  explicitly  via  the 
simplex  trusted  paths  to  permit  authorized  Append 
connections. The target controllers will display the reports 
from  all  the  cells,  and  show  the  distribution  of  found 
targets on a composite system high display.  
the  appropriate 
level,  and 
to 
7.3  Performance Goals 
The  objective  of  the  demonstration  is  to  show  the 
feasibility  of  building  MLS  systems  on  the  MLS-PCA 
architecture. It will provide us with a vehicle for gathering 
performance  data  on  the  critical  choke  points  in  the 
architecture, 
initialization 
mechanisms,  and  oversights 
the  design.  The 
demonstration will achieve: 
the  boot  procedure, 
the 
in 
(cid:120)(cid:3) Simulated MLS operation in a distributed network 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
(cid:120)(cid:3) Distributed application of a typical avionics function, 
[7]  
i.e., targeting 
(cid:120)(cid:3) High value of formal specification 
(cid:120)(cid:3) Proof of concept for MLS-PCA 
o Operation of live NSE, EPE, and AAP code 
and IPC 
o Boot of MLS-PCA 
o Performance data on MLS-PCA operation 
(cid:120)(cid:3) Program interest from a real avionics application 
There was insufficient testing to report our findings by 
publication date. However, the coding and checkout of the 
NSE and EPE went well and quickly, completed in four-
months. The NSE is 3371 Source Lines of Code (SLOC) 
compiling  to  344K  binary,  and  the  EPE  is  2679  SLOC 
compiling  to  580K  binary,  not  counting  libraries  used.  
The non-optimized code is small enough to be handled by 
any  of  the  Grid  PCs,  and  even  the  limited  PCA  memory 
available  with  first  generation  chips.  The  applications 
AAPs  are 
lead-time  elements.  A  future 
companion  paper  will  report  the  specific  findings  of  the 
Proof of Concept Demonstration. 
long 
the 
[8]  
[9]  
[10]  
[11]  
[12]  
8.  References 
[1]   
[2]  
[3]  
[4]  
[5]   
“Joint Vision 2020”,  JCS, J5, June 2000.
Available at
http://www.dtic.mil/jointvision/jvpub2.htm.
J. P. Anderson, “Computer Security Technology  
Planning Study”, 1972, In ESD-TR-73-51.
“Department of Defense Trusted Computer System 
Evaluation Criteria (TCSEC)”, DOD 5200.28-STD,
December 1985. Available at 
http://www.fas.org/irp/nsa/rainbow.htm
“Common Criteria for Information Technology 
Security Evaluation”, ISO/IEC 15408, Version 2.1, 
CCIMB-99-031, August 1999.  Available at 
http://www.radium.ncsc.mil/tpep/library/ccitse/ccitse.
html.
Rainbow Series of books on evaluating Trusted 
Computer Systems according to National Security 
Agency (NSA) expounding on the Orange Book 
(TCSEC). Available at 
http://www.fas.org/irp/nsa/rainbow.htm
[6]  
“Polymorphic Computing Architecture Mission” 
Available at http://www.darpa.mil/ipto/research/pca/
 “Computer Security Requirements – Guidance for 
Applying the DOD TCSEC in Specific 
Environments”, June 1985, CSC-STD-003-85. 
Available at 
http://www.fas.org/irp/nsa/rainbow.htm
 “Technical Rationale Behind CSC-STD-003-85: 
Computer Security Requirements”, June 1985, CSC-
STD-004-85. Available at 
http://www.fas.org/irp/nsa/rainbow.htm
“Information Assurance”, October 2002, DOD 
Directive 8500.1.
Available at http://www.dtic.mil/whs/directives
“Information Assurance (IA) Implementation”, 
February 2003, DOD Instruction 8500.2,
Available at http://www.dtic.mil/whs/directives
 “National Industrial Security Program Operating 
Manual, NISPOM”, DOD 5220.22-M, December 
1993.  Available at 
http://www.dss.mil/infoas/index.htm
•
“Protecting Sensitive Compartmented Information 
within Information Systems”, Director of Central 
Intelligence Directive 6/3, June 1999. Available at 
http://www.fas.org/irp/offdocs/DCID_6-
3_20Policy.htm
[13]   
“DOD Information Technology Security Certification 
and Accreditation Process, DITSCAP”, December 
1997, DOD 5200.40,. Available at 
http://www.dss.mil/infoas/index.htm
[14]  
“National Information Assurance Partnership, NIAP”, 
NIST, 1997. Available at http://niap.nist.gov/
[15]   
[16]  
[17] 
[18]  
“National Security Telecommunications and 
Information Systems Security Committee, NSTISSC, 
Policy #11”. July 2002.  Available at  
http://niap.nist.gov/cc-scheme/nstissp_11.pdf
“Partitioning Kernel Protection Profile, Preliminary 
Draft V0.3”, NSA C12, October 2002. 
J. Rushby, “A Trusted Computing Base for Embedded 
Systems,” Proceedings of the 7th Department of 
Defense/NBS Computer Security Conference, 1984, 
 pp 294-311. 
“Definition” Available at 
http://www.webopedia.com/TERM/M/Moores_Law.ht
ml
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply. 
[19]     C. Weissman,  “BLACKER: Security for the DDN, 
Examples of A1 Security Engineering”, Presented at 
1988 IEEE Symposium on Security and Privacy, 
Proceedings Conference IEEE Symposium on Security 
and Privacy, Oakland CA, 1992, pp 286. Available at 
http://www.computer.org/proceedings/sp/2825/282502
86abs.htm
[20]   
D. E. Bell, and L. LaPadula, “Secure Computer 
Systems: Unified Exposition and Multics 
Interpretation”, Technical Report ESD-TR-75-306, 
ESD/AFSC, Hanscom AFB, Bedford, MA, 1975.
Available at http://csrc.nist.gov/publications/history/
[21] 
[22] 
[23] 
[24]  
[25]  
[26]  
[27]  
[28]  
[29]  
M. Taylor, “The Raw Prototype Design Document 
V4.11”, Department of Electrical Engineering, MIT, 
2002. Available at: 
http://www.cag.lcs.mit.edu/raw/documents/RawSpec9
9.pdf
K. Mai, et al, “Smart Memories: A Modular 
Reconfigurable Architecture,” Computer Systems 
Laboratory, Stanford University, 2000.  Available at: 
http://mos.stanford.edu/papers/km_isca_00.pdf
“Trusted Computing Platform Alliance Main 
Specification V1.1b,” February 2002.  
Available at: http://www.trustedcomputing.org/
B. Hashii, “Formal Specification Languages and 
Theorem Provers”, Northrop Grumman Corporation,
El Segundo, CA, December 2001
D. Jackson, and J. M. Wing, “Lightweight Formal 
Methods”, IEEE Computer, April 1996, pp 21-22 
B. Hashii,  “Using Alloy to Formally Specify MLS-
PCA Trusted Security Architecture”, Northrop
Grumman Corporation, El Segundo, CA, July 2003
D. Jackson, “Micromodels of Software: Modeling & 
Analysis with Alloy”, MIT Lab for Computer Science,
November 2001. Available at 
http://sdg.lcs.mit.edu/alloy/book.pdf.
Grid Computing Center.  Available at 
http://www.gridcomputing.com/
“Intelligent Software Agents Lab,” Available at 
http://www.cs.cmu.edu/~softagents
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:36 UTC from IEEE Xplore.  Restrictions apply.