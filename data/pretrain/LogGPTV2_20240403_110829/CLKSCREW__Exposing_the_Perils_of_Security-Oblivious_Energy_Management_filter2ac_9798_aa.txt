title:CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management
author:Adrian Tang and
Simha Sethumadhavan and
Salvatore J. Stolfo
CLKSCREW: Exposing the Perils of Security-
Oblivious Energy Management
Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo, Columbia University
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/tang
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXCLKSCREW: Exposing the Perils of Security-Oblivious Energy
Management
Adrian Tang
Columbia University
Simha Sethumadhavan
Columbia University
Salvatore Stolfo
Columbia University
Abstract
The need for power- and energy-efﬁcient computing has
resulted in aggressive cooperative hardware-software en-
ergy management mechanisms on modern commodity
devices. Most systems today, for example, allow soft-
ware to control the frequency and voltage of the under-
lying hardware at a very ﬁne granularity to extend bat-
tery life. Despite their beneﬁts, these software-exposed
energy management mechanisms pose grave security im-
plications that have not been studied before.
In this work, we present the CLKSCREW attack,
a new class of fault attacks that exploit the security-
obliviousness of energy management mechanisms to
break security. A novel beneﬁt for the attackers is that
these fault attacks become more accessible since they can
now be conducted without the need for physical access to
the devices or fault injection equipment. We demonstrate
CLKSCREW on commodity ARM/Android devices. We
show that a malicious kernel driver (1) can extract secret
cryptographic keys from Trustzone, and (2) can escalate
its privileges by loading self-signed code into Trustzone.
As the ﬁrst work to show the security ramiﬁcations of en-
ergy management mechanisms, we urge the community
to re-examine these security-oblivious designs.
1
Introduction
The growing cost of powering and cooling systems has
made energy management an essential feature of most
commodity devices today. Energy management is cru-
cial for reducing cost, increasing battery life, and im-
proving portability for systems, especially mobile de-
vices. Designing effective energy management solutions,
however, is a complex task that demands cross-stack de-
sign and optimizations: Hardware designers, system ar-
chitects, and kernel and application developers have to
coordinate their efforts across the entire hardware/soft-
ware system stack to minimize energy consumption and
maximize performance. Take as an example, Dynamic
Voltage and Frequency Scaling (DVFS) [47], a ubiq-
uitous energy management technique that saves energy
by regulating the frequency and voltage of the proces-
sor cores according to runtime computing demands. To
support DVFS, at the hardware level, vendors have to de-
sign the underlying frequency and voltage regulators to
be portable across a wide range of devices while ensur-
ing cost efﬁciency. At the software level, kernel devel-
opers need to track and match program demands to oper-
ating frequency and voltage settings to minimize energy
consumption for those demands. Thus, to maximize the
utility of DVFS, hardware and software function cooper-
atively and at very ﬁne granularities.
Despite the ubiquity of energy management mecha-
nisms on commodity systems, security is rarely a consid-
eration in the design of these mechanisms. In the absence
of known attacks, given the complexity of hardware-
software interoperability needs and the pressure of cost
and time-to-market concerns,
the designers of these
mechanisms have not given much attention to the secu-
rity aspects of these mechanisms; they have been focused
on optimizing the functional aspects of energy manage-
ment. These combination of factors along with the per-
vasiveness of these mechanisms makes energy manage-
ment mechanisms a potential source of security vulnera-
bilities and an attractive target for attackers.
In this work, we present the ﬁrst security review of a
widely-deployed energy management technique, DVFS.
Based on careful examination of the interfaces between
hardware regulators and software drivers, we uncover
a new class of exploitation vector, which we term as
CLKSCREW. In essence, a CLKSCREW attack exploits
unfettered software access to energy management hard-
ware to push the operating limits of processors to the
point of inducing faulty computations. This is dangerous
when these faults can be induced from lower privileged
software across hardware-enforced boundaries, where
security sensitive computations are hosted.
USENIX Association
26th USENIX Security Symposium    1057
We demonstrate that CLKSCREW can be conducted
using no more than the software control of energy
management hardware regulators in the target devices.
CLKSCREW is more powerful than traditional physi-
cal fault attacks [19] for several reasons. Firstly, un-
like physical fault attacks, CLKSCREW enables fault at-
tacks to be conducted purely from software. Remote ex-
ploitation with CLKSCREW becomes possible without
the need for physical access to target devices. Secondly,
many equipment-related barriers, such as the need for
soldering and complex equipment, to achieve physical
fault attacks are removed. Lastly, since physical attacks
have been known for some time, several defenses, such
as special hardened epoxy and circuit chips that are hard
to access, have been designed to thwart such attacks. Ex-
tensive hardware reverse engineering may be needed to
determine physical pins on the devices to connect the
fault injection circuits [45]. CLKSCREW sidesteps all
these risks of destroying the target devices permanently.
To highlight the practical security impact of our attack,
we implement the CLKSCREW attack on a commodity
ARMv71 phone, Nexus 6. With only publicly available
knowledge of the Nexus 6 device, we identify the operat-
ing limits of the frequency and voltage hardware mecha-
nisms. We then devise software to enable the hardware to
operate beyond the vendor-recommended limits. Our at-
tack requires no further access beyond a malicious kernel
driver. We show how the CLKSCREW attack can sub-
vert the hardware-enforced isolation in ARM Trustzone
in two attack scenarios: (1) extracting secret AES keys
embedded within Trustzone and (2) loading self-signed
code into Trustzone. We note that the root cause for
CLKSCREW is neither a hardware nor a software bug:
CLKSCREW is achievable due to the fundamental design
of energy management mechanisms.
We have responsibly disclosed the vulnerabilities
identiﬁed in this work to the relevant SoC and device
vendors. They have been very receptive to the disclosure.
Besides acknowledging the highlighted issues, they were
able to reproduce the reported fault on their internal test
device within three weeks of the disclosure. They are
working towards mitigations.
In summary, we make the following contributions in
this work:
1. We expose the dangers of designing energy man-
agement mechanisms without security in mind by
introducing the concept of the CLKSCREW attack.
Aggressive energy-aware computing mechanisms
can be exploited to inﬂuence isolated computing.
2. We present the CLKSCREW attack to demonstrate a
new class of energy management-based exploitation
1As of Sep 2016, ARMv7 devices capture over 86% of the world-
wide market share of mobile phones [7].
vector that exploits software-exposed frequency and
voltage hardware regulators to subvert trusted com-
putation.
3. We introduce a methodology for examining and
demonstrating the feasibility of the CLKSCREW at-
tack against commodity ARM devices running a full
complex OS such as Android.
4. We demonstrate that the CLKSCREW attack can be
used to break the ARM Trustzone by extracting se-
cret cryptographic keys and loading self-signed ap-
plications on a commodity phone.
The remainder of the paper is organized as follows.
We provide background on DVFS and its associated
hardware and software support in § 2.
In § 3, we de-
tail challenges and steps we take to achieving the ﬁrst
CLKSCREW fault. Next, we present two attack case
studies in § 4 and § 5. Finally, we discuss countermea-
sures and related work in § 6, and conclude in § 7.
2 Background
In this section, we provide the required background in
energy management to understand CLKSCREW. We ﬁrst
describe DVFS and how it relates to saving energy. We
then detail key classes of supporting hardware regulators
and their software-exposed interfaces.
2.1 Dynamic Voltage & Frequency Scaling
DVFS is an energy management technique that trades off
processing speed for energy savings. Since its debut in
1994 [60], DVFS has become ubiquitous in almost all
commodity devices. DVFS works by regulating two im-
portant runtime knobs that govern the amount of energy
consumed in a system – frequency and voltage.
To see how managing frequency and voltage can save
energy, it is useful to understand how energy consump-
tion is affected by these two knobs. The amount of en-
ergy2 consumed in a system is the product of power and
time, since it refers to the total amount of resources uti-
lized by a system to complete a task over time. Power3,
an important determinant of energy consumption, is di-
rectly proportional to the product of operating frequency
and voltage. Consequently, to save energy, many energy
management techniques focus on efﬁciently optimizing
both frequency and voltage.
of instantaneous dynamic power, Pt over time T : ET =(cid:82) T
2Formally, the total amount of energy consumed, ET , is the integral
3In a system with a ﬁxed capacitative load, at any time t, the instan-
taneous dynamic power is proportional to both the voltage, Vt and the
frequency Ft as follows: Pt ∝ V 2
t × Ft.
0 Pt dt.
1058    26th USENIX Security Symposium
USENIX Association
Figure 1: Shared voltage regulator for all Krait cores.
DVFS regulates frequency and voltage according to
runtime task demands. As these demands can vary dras-
tically and quickly, DVFS needs to be able to track these
demands and effect the frequency and voltage adjust-
ments in a timely manner. To achieve this, DVFS re-
quires components across layers in the system stack. The
three primary components are (1) the voltage/frequency
hardware regulators, (2) vendor-speciﬁc regulator driver,
and (3) OS-level CPUfreq power governor [46]. The
combined need for accurate layer-speciﬁc feedback and
low voltage/frequency scaling latencies drives the preva-
lence of unfettered and software-level access to the fre-
quency and voltage hardware regulators.
2.2 Hardware Support for DVFS
Voltage Regulators. Voltage regulators supply power
to various components on devices, by reducing the volt-
age from either the battery or external power supply to a
range of smaller voltages for both the cores and the pe-
ripherals within the device. To support features, such as
camera and sensors that are sourced from different ven-
dors and hence operating at different voltages, numerous
voltage regulators are needed on devices. These regu-
lators are integrated within a specialized circuit called
Power Management Integrated Circuit (PMIC) [53].
Power to the application cores is typically supplied
by the step-down regulators within the PMIC on the
System-on-Chip (SoC) processor. As an example, Fig-
ure 1 shows the PMIC that regulates the shared voltage
supply to all the application cores (a.k.a. Krait cores) on
the Nexus 6 device. The PMIC does not directly ex-
pose software interfaces for controlling the voltage sup-
ply to the cores. Instead, the core voltages are indirectly
managed by a power management subsystem, called the
Subsystem Power Manager (SPM) [2]. The SPM is a
hardware block that maintains a set of control registers
which, when conﬁgured, interfaces with the PMIC to ef-
fect voltage changes. Privileged software like a kernel
driver can use these memory-mapped control registers
Figure 2: Separate clock sources for each Krait core.
to direct voltage changes. We highlight these software-
exposed controls as yellow-shaded circles in Figure 1.
Frequency PLL-based Regulators. The operating fre-
quency of application cores is derived from the frequency
of the clock signal driving the underlying digital logic
circuits. The frequency regulator contains a Phase Lock
Loop (PLL) circuit, a frequency synthesizer built into
modern processors to generate a synchronous clock sig-
nal for digital components. The PLL circuit generates an
output clock signal of adjustable frequency, by receiving
a ﬁxed-rate reference clock (typically from a crystal os-
cillator) and raising it based on an adjustable multiplier
ratio. The output clock frequency can then be controlled
by changing this PLL multiplier.
For example, each core on the Nexus 6 has a dedicated
clock domain. As such, the operating frequency of each
core can be individually controlled. Each core can oper-
ate on three possible clock sources. In Figure 2, we illus-
trate the clock sources as well as the controls (shaded in
yellow) exposed to the software from the hardware reg-
ulators. A multiplexer (MUX) is used to select amongst
the three clock sources, namely (1) a PLL supplying a
ﬁxed-rate 300-MHz clock signal, (2) a High-Frequency
PLL (HFPLL) supplying a clock signal of variable fre-
quency based on a N multiplier, and (3) the same HFPLL
supplying half the clock signal via a frequency divider
for ﬁner-grained control over the output frequency.
As shown in Figure 2, the variable output frequency of
the HFPLL is derived from a base frequency of 19.2MHz
and can be controlled by conﬁguring the N multiplier.
For instance, to achieve the highest core operating fre-
quency of 2.65GHz advertised by the vendor, one needs
to conﬁgure the N multiplier to 138 and the Source Se-
lector to 1 to select the use of the full HFPLL. Similar
to changing voltage, privileged software can initiate per-
core frequency changes by writing to software-exposed
memory-mapped PLL registers, shown in Figure 2.
USENIX Association
26th USENIX Security Symposium    1059
SoC Processor(Nexus 6)SPM(All cores)Core 0VoltageControlVoltage Domain(All cores)PMA8084PMIC Voltage output to coresInputVoltage output to other peripherals0123Core 0Core 0Core 0ClockMUXCoreClock Domain (per-core)PLL(ﬁxed rate)HFPLL(variable rate)Half Divider300 MHzN * 19.2 MHzN/2 * 19.2 MHzN MultiplierSource Selector012SoC Processor(Nexus 6)2.3 Software Support for DVFS
On top of the hardware regulators, additional software
support is needed to facilitate DVFS. Studying these sup-
porting software components for DVFS enables us to
better understand the interfaces provided by the hard-
ware regulators. Software support for DVFS comprises
two key components, namely vendor-speciﬁc regulator
drivers and OS-level power management services.
Besides being responsible for controlling the hardware
regulators, the vendor-provided PMIC drivers [5, 6] also
provide a convenient means for mechanisms in the up-
per layers of the stack, such as the Linux CPUfreq power
governor [46] to dynamically direct the voltage and fre-
quency scaling. DVFS requires real-time feedback on
the system workload proﬁle to guide the optimization
of performance with respect to power dissipation. This
feedback may rely on layer-speciﬁc information that may