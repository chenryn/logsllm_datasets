# 整洁代码
代码是需求的精确性表达 代码不会消失
- 读起来令人愉悦
- 只做好一件事
- 明确地展现出要解决问题的张力
- 整洁代码以测试作为基础
- 不要重复代码
- 深合己意
代码更多的时候是用来读
## 命名
名副其实：变量 函数 类的名称要充分体现它们的作用
避免误导：
- 避免使用与本意相悖的词
```java
Accounts accountList; // bad
List accountList; // good
```
- 谨慎使用不同之处特别小的名称
```java
var userPermissionControllService;
var userPermissionControllerService;
```
- 以及小写字母l与大写字母O与数字 1 0 相似的情况
```java
int l = 0;
int o = 1;
if (l == 0) return o = l;
```
有意义的区分：
- 避免使用数字系列命名
```java
void copy(StringBuffer s1, StringBuffer s2); // bad
void concat(StringBuffer source, StringBuffer target); // good
```
- 避免使用意义相同的名称
```java
class Product{}
class ProductInfo{} // 加个Info并没有说明什么
class ProductDetail{}
```
使用读得出来的名称: 方便讨论
使用可搜索的名称：
- 为常量命名 方便维护
```java
double circleArea = 3.14 * Math.pow(radius, 2); // bad
double CIRCLE_PI = 3.1415926; // good
```
- 名称长短与其作用域大小相对应
```java
private static final double CIRCLE_PI = 3.14;
void calcArea() {
  final double PI = 3.14
  ...
}
```
避免使用编码：这些技巧在IDE智能的时代有它的用处
- 避免匈牙利标记法在变量名称携带类型
```java
int iPort = 8080; // 该变量为int类型 bad
```
- 避免前缀标记成员变量
```java
private List m_listeners; // bad
```
- 避免避免接口与实现携带I前缀或者Imp后缀
```java
interface IUserService{} // bad
class UserServiceImp implements UserService {} // bad
class DefaultUserService implements UserService {} // good
```
避免思维映射：传统管用i j 表示循环计数器 其他情况下要避免使用单字母
```java
for (int i=0;i jobQueue; // 技术名词
DinnerOrder order; // 业务名词
```
如果无法通过类或者方法来给名称提供上下文 那么只能给名称添加前缀来添加上下文了
```java
class Address {
  String username;
  String phone;
  String country;
  String postCode;
}
String addressCode; // 在一个没有上下文的环境中
```
短名称够清楚就行了 不要添加不必要的上下文 
```java
class ShopSystemUserService {} // bad
```
## 函数
短小：
- 块内调用的子函数具有说明性
```java
String renderJsp(){
  var classCode = compileJsp();
  return executeJspService(classCode);
}
```
- 不该有复杂的嵌套结构
```java
void badFunction() { // bad
  if (..) {
    while(){
      ...
      for(..){..}
    }
  }
}
```
只做一件事：函数内部的实现充分体现函数名称
确保函数中的语句在同一抽象层级上面
```java
String renderJsp(){
  var classCode = compileJsp();
  return executeJspService(classCode);
}
```
使用多态取代switch语句
```java
// bad
Money calcPay(Employee e){
  switch(e.type) {
    case MANAGER:
      return e.getPay() - 20%;
    case COMMON:
      return e.getPay() - 10%;
    ...
  }
}
// good
abstract class Employee{
  abstract Money getPay();
}
class CommonEmployee{
  Money getPay(){...}
}
class ManagerEmployee{
  Money getPay(){...}
}
```
使用描述性的名称能理性设计思路 帮助改进之
```java
var result;
var searchResult;
var movieSearchResult; // best
```
函数参数：
- 参数越多函数越难理解
```java
public void convertAndSend(Object object){..}
public void correlationConvertAndSend(Object object, CorrelationData correlationData){..}
public void convertAndSend(String routingKey, final Object object, CorrelationData correlationData){...} // bad
exchange.send(String rotingKey,Object msg); // better
```
- 使用标志参数(boolean)就代表函数不止做一件事 应该拆分成两个函数
```java
void submitTask(Task t, boolean flag){ // 尤其flag命名并不能说明做什么 改成isSync 可能好一点
  if (flag) {
    sync
  }else {
    async
  }
}
// good
void submitTaskAsync(){...}
void submitTaskSync(){...}
```
- 函数和参数应当形成一种动词/名词对形式
```java
write(PrintWriter pw, String msg); // bad
printWriter.write(msg); // good
```
副作用：避免使用输出参数(out) 需要修改状态 就将该状态作为对象的属性
```java
void removeNegative(List list); // bad
list.removeIf(...); // good
```
分割指令与询问：函数要么做什么 要么回答什么 不能两者得兼
```java
boolean set(String k, String v){ // bad 这个函数承担了两个职责
  if (exists){
    return true;
  }
  ...
  return false;
}
// good
boolean exists(String k);
void set(String k,String v);
```
异常代替错误码：
- 错误处理代码就能从主路径代码分离出来
```java
// bad
if (!err){
  if (!err){
    ...
  }
}
// good
try {
} catch (Error1){
} catch (Error2){
}
```
- 主体以及错误处理代码可以抽离成函数
```java
try {
  generateSearchResult();
} catch(){
  logError();
  sendErrorMsg();
}
```
- 错误码枚举一旦发生修改 依赖其的模块都要重新编译 使用继承异常的方式可以进行平滑扩展
别重复自己：重复可能是软件中一切邪恶的根源
结构化编程：单一出入口原则在大函数中才有明显的好处
## 注释
- 注释容易与代码不一致 欺骗读者
- 注释无法美化代码 糟糕的代码还是糟糕的代码
- 尽可能使用代码阐述你的意图 而非注释
### 好的注释
- 法律信息
- 提供信息
```java
interface SessionFactory {
  // 新建一个数据库连接并返回
  Session openSession();
}
```
- 对意图的解释
```java
// 寻找0到n的素数 根据数学证明 只要到n的平方根就行了
for(int i=0;i<Math.sqrt(n);i++){...}
```
- 阐释一些难以理解的参数或者返回值
```java
// 发送对象为空，代表是一条广播消息
if (StringUtils.isEmpty(payload.getTo())){
  ...
} else {
  broadcast
}
```
- 警示会出现某种后果
```java
// 该方法使用一个listener的确认 使用synchronized关键字保证只有一个线程能进入
public synchronized ConfirmResult sendTextMessage(String target, String text) {...}
```
- TODO注释
```java
// 向消息队列写入消息：订单 订单详情 TODO
```
- 强调方法貌似不合理之处的重要性
```java
void onMessage(ByteBuf buf){
  ...
  buf.release(); // 需要减少缓冲区的引用计数
}
```
- 公共 API 中的 Javadoc
### 坏注释
- 无法给读者提供有效的信息
```java
// 提交任务
boolean success = submitTask();
```