title:MobiCeal: Towards Secure and Practical Plausibly Deniable Encryption
on Mobile Devices
author:Bing Chang and
Fengwei Zhang and
Bo Chen and
Yingjiu Li and
Wen Tao Zhu and
Yangguang Tian and
Zhan Wang and
Albert Ching
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
MobiCeal: Towards Secure and Practical Plausibly
Deniable Encryption on Mobile Devices
Bing Chang∗, Fengwei Zhang†, Bo Chen‡, Yingjiu Li∗, Wen-Tao Zhu§, Yangguang Tian∗,
Zhan Wang¶ and Albert Ching(cid:3)
∗School of Information Systems, Singapore Management University, {bingchang, yjli, ygtian}@smu.edu.sg
†Department of Computer Science, Wayne State University, PI:EMAIL
‡Department of Computer Science, Michigan Technological University, PI:EMAIL
§Data Assurance and Communications Security Research Center, Chinese Academy of Sciences, PI:EMAIL
¶RealTime Invent, Inc. (cid:3)i-Sprint Innovations
Abstract—We introduce MobiCeal, the ﬁrst practical Plausibly
Deniable Encryption (PDE) system for mobile devices that can
defend against strong coercive multi-snapshot adversaries, who
may examine the storage medium of a user’s mobile device at
different points of time and force the user to decrypt data.
MobiCeal relies on “dummy write” to obfuscate the differences
between multiple snapshots of storage medium due to existence
of hidden data. By incorporating PDE in block layer, MobiCeal
supports a broad deployment of any block-based ﬁle systems on
mobile devices. More importantly, MobiCeal is secure against
side channel attacks which pose a serious threat to existing PDE
schemes. A proof of concept implementation of MobiCeal is pro-
vided on an LG Nexus 4 Android phone using Android 4.2.2. It
is shown that the performance of MobiCeal is signiﬁcantly better
than prior PDE systems against multi-snapshot adversaries.
Index Terms—Plausibly Deniable Encryption, Mobile Security,
Multi-snapshot Adversary, Side Channel Attack, Fast Switching
I. INTRODUCTION
Mobile devices play an increasingly important role in our
daily life and are prevalently used for processing sensitive
information (e.g., by professional journalists or human rights
workers). However, traditional encryption does not work in
certain situations where the device owner is captured by an
adversary and is coerced to disclose the key for decrypting
the sensitive information on the device. To defend against
such adversaries, various plausibly deniable encryption (PDE)
systems have been proposed recently [2], [15], [21], [32],
[33], [34], [27]. The existing PDE systems for mobile devices
(e.g., [21], [34], [35], [43], [27], [20]) work correctly under
the assumption that an adversary examines the storage medium
once only on a user’s device. However, they may not work
if an adversary can take multiple snapshots of the storage
medium at different points of time. In practice, such multi-
snapshot attacks have been reported and thus posed realistic
threats to users. For example, the Guardian [37] and the NBC
News [30] have reported that US border agents not only
demand travelers that they hand over their phones and their
passwords, but also make full copies of all of the data on
the phones, without any warrant or even suspicion. Another
example is that an independent journalist was reported to have
all of his computers, mobile phones and camera ﬂash drives
searched and copied when he was crossing a border, and he
was inspected for seven times during ﬁve years [26].
The existing PDE systems on mobile devices [21], [34],
[35], [43], [27], [20] are not resilient against such multi-
snapshot attacks since they hide sensitive data in the ran-
domness initially ﬁlled across the entire disk. By comparing
storage snapshots at different points of time, a multi-snapshot
adversary may detect any unaccountable changes to the ran-
domness. Another drawback of these PDE systems is that users
are required to reboot their mobile devices before using PDE
functions. In emergency, users may miss the best moments
since the rebooting process is usually time consuming.
It
is challenging to design a secure and practical PDE
scheme for mobile devices. All existing PDE systems that
can defend against multi-snapshot adversaries [15], [19], [32],
[33] are not suitable for mainstream mobile devices due to the
following challenges.
1) The PDE scheme should be resistant to strong multi-
snapshot adversaries on resources-limited mobile devices,
making it unsuitable to transplant existing approaches avail-
able for desktop computers, e.g., HIVE [15] and DataLair [19],
to mobile devices. Both HIVE and DataLair rely on a special
“write-only oblivious RAM” to obfuscate all write access to
the storage medium, such that no multi-snapshot adversary
can identify any unaccountable changes to the storage medium
at different points of time. Unfortunately, oblivious RAM is
known for its poor I/O performance which is not suitable
for the resources-limited mobile devices. HIVE/DataLair is
designed with the assumption that an adversary can obtain
snapshots after every single write operation is performed on
the disk, so it needs complicated mechanisms to defend against
such a strong adversary. We consider a more practical “on-
event” adversary who can obtain multiple snapshots after
the user is prepared (e.g., at border checkpoint). This more
realistic adversarial model enables us to design a lightweight
PDE scheme that is suitable for mobile devices.
2) The PDE scheme should be free from side channel
attacks [23] which pose a serious threat to security of existing
PDE schemes. Both HIVE [15] and DEFY [33] are subject
to side channel attacks [23]. The major reason is that they do
not isolate hidden data from public data sufﬁciently, so the
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00054
454
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
information of the hidden data may be recorded in the public
data. As a result, a multi-snapshot adversary may easily learn
the existence of hidden data by analyzing the public data.
3) The PDE scheme should be ﬁt for mainstream mobile
devices, beneﬁting the deniability and large-scale deploy-
ments. DEFY [33] is speciﬁcally designed for mobile devices
against multi-snapshot adversaries. However, DEFY heavily
relies on the special properties provided by ﬂash ﬁle system
YAFFS [40]. DEFY is not immediately applicable to other
ﬂash ﬁle systems such as JFFS, UBIFS, and F2FS due to
its strong coupling with YAFFS. In addition, a ﬂash ﬁle
system usually requires direct access to raw NAND ﬂash,
which is rarely supported in mainstream mobile devices since
they usually use NAND ﬂash as block devices through ﬂash
translation layer (FTL). Steganographic ﬁle system [32] is
originally designed for desktop computers to defend against
multi-snapshot adversaries. However, it heavily relies on the
legacy Linux kernel and speciﬁc APIs for handling hidden
ﬁles, and is thus not applicable to modern mobile devices.
4) The usability of the PDE scheme should be well treated,
so that users can easily deal with sensitive data. Some existing
designs [15], [33] do not provide details about how to use
the system appropriately, but a wrong operation may lead to
severe information leakage. Other designs [34], [21] require
users to reboot their devices so as to switch between public
mode (i.e., a mode in which the user can process public non-
sensitive data) and hidden mode (i.e., a mode in which the
user can process hidden sensitive data). The rebooting process
is usually time-consuming and may thus lead to missing the
best timing of collecting sensitive data.
These challenges motivate us to design MobiCeal,
the
ﬁrst secure and practical PDE system on mainstream mo-
bile devices that can defend against coercive multi-snapshot
adversaries. MobiCeal relies on several key insights. First,
we devise a “dummy write” mechanism to defend against
multi-snapshot attacks. With dummy writes, any changes to
the hidden data become accountable for the denial of the
existence of hidden data in the presence of multi-snapshot
adversaries. Second, MobiCeal is designed to be secure against
side channel attacks [23]. The public data and the hidden data
are strictly isolated in the system, eliminating the possibility of
information leakage. Third, we decouple our design from both
upper layers (e.g., ﬁle systems) and lower layers (e.g., storage
media) to make it ﬁle system friendly and ﬁt for mainstream
mobile devices. Last, to improve usability of MobiCeal, we
add a support for fast switching to help users switch from
public mode to hidden mode. Prior PDE systems [21], [34]
require users to reboot their devices to switch modes, which
may take more than one minute in practice. The switching time
in MobiCeal is less than 10 seconds, which is made possible by
restarting Android framework instead of rebooting the device.
Contributions. The major contributions of this paper are two-
fold. First, we design the ﬁrst secure PDE system for mobile
devices against multiple snapshot adversaries. A formal proof
shows that MobiCeal provides reliable deniability against
multi-snapshot adversaries. MobiCeal is also shown to be free
from side channel attacks, which pose a serious threat to many
other PDE systems.
Second, MobiCeal is practical to be implemented on main-
stream mobile devices. MobiCeal is built into the block layer
of Linux kernel such that any block ﬁle systems can be de-
ployed on top of it. MobiCeal relies on a lightweight “dummy
write” mechanism to defend against the multi-snapshot adver-
sary, which introduces an acceptable performance overhead,
making it suitable for resources-limited mobile devices. In
addition, MobiCeal is easy to use, and supports fast switching
from its public mode to hidden mode.
A proof-of-concept implementation of MobiCeal is provided
on an LG Nexus 4 Android phone using Android 4.2.2, and
an availability test is conducted on a Huawei Nexus 6P phone
using Android 7.1.2. Compared to the default Android full disk
encryption, MobiCeal introduces approximately 18% overhead
which is much smaller than that of typical prior PDE systems
secure against multi-snapshot adversaries.
II. BACKGROUND
A. Full Disk Encryption
A full disk encryption (FDE) system encrypts the entire
disk with a key to prevent unauthorized access to the data.
FDE is usually transparent to the upper layer as the data are
automatically encrypted or decrypted upon being written or
read. BitLocker [1] and FileVault [12] are two popular FDE
tools. FDE has been available on Android to encrypt userdata
partition since version 3.0 [4]. Android FDE is based on dm-
crypt [16], a Linux kernel module working in the block device
layer. In Android, the block devices (e.g., an eMMC card [9]
that is presented to the kernel as a block device) can be
encrypted by dm-crypt which creates an additional layer of
“encrypted block device” over the original block device.
To enable Android FDE, a user should choose a secret
password ﬁrst. Android uses a randomly generated master
key to encrypt the entire disk using dm-crypt, and the master
key is encrypted with a key derived from the password using
PBKDF2 [14]. Note that PBKDF2 also needs a salt which is
randomly generated. The encrypted master key and the salt are
stored in the encryption footer that is located in the last 16KB
of the userdata partition. When Android boots and detects that
the userdata partition is encrypted, it asks for a password.
After having obtained the password, it derives a key from the
password using PBKDF2 with the salt read from the encryption
footer. It then decrypts the master key and passes the master
key to dm-crypt, who can then decrypt the entire disk.
B. Plausibly Deniable Encryption
Canetti et al. [17] initially explored plausibly deniable
encryption (PDE) to protect the conﬁdentiality of messages
transmitted over networks against a coercive attacker. When
being applied to storage domain, there are two main types
of PDE techniques: hidden volumes [2], [34], [21], [15] and
steganographic ﬁle systems [13], [29], [32].
455
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:48:36 UTC from IEEE Xplore.  Restrictions apply. 
dsϭ
dsϮ
dsϯ
dŚŝŶWŽŽů
>sϭ
DĞƚĂĚĂƚĂ
ĞǀŝĐĞ
>sϮ
ĂƚĂ
ĞǀŝĐĞ
s'
WsϮ
Wsϭ
Wsϯ
Fig. 1. LVM and thin provisioning architecture.
The hidden volume technique works as follows: There
are two encrypted volumes on the disk, a public volume and
a hidden volume. The public volume is encrypted by a decoy
key and the hidden volume is encrypted by a hidden key, both
using full disk encryption. The public volume is placed on the
entire disk and the hidden volume is usually placed from a
secret offset towards the end of the disk. Note that initially
the entire disk is ﬁlled with random data and the data written
to the public volume should be placed sequentially from the
beginning of the disk so as to avoid over-writing the hidden
volume. When a user is coerced to reveal the encryption key,
he/she can disclose the decoy key. If the attacker is unable
to conﬁrm the existence of the encrypted hidden volume, the
existence of the hidden data can be denied. This mechanism
works when the attacker can only access the disk once, e.g.,
obtaining the disk after having seized the user. However, it is
problematic if the attacker periodically obtains snapshots of
the disk, because the attacker can detect changes in the “free”
space of the public volume by comparing snapshots taken at
different time, and suspect existence of hidden data [23].
The other type of PDE technique is based on stegano-
graphic ﬁle systems whose idea is to hide sensitive data
among regular ﬁle data. This can be achieved by introducing
a large number of cover ﬁles [13] or hiding the data into
abandoned/dummy ﬁle blocks [29], [32]. The main concern
of the steganographic ﬁle system is to avoid over-writing the
hidden sensitive data, which requires creating a large amount
of redundancy, leading to inefﬁcient use of disk space.
C. LVM and Thin Provisioning
Logical volume manager (LVM) [28] is a userspace toolset
that provides logical volume management capabilities on
Linux. LVM is a device mapper [11] target which becomes
a component of the Linux kernel since version 2.6. LVM
creates a layer of abstraction over physical storage, allowing
users to create logical storage volumes. LVM introduces three
concepts: physical volumes (PV), volume groups (VG), and
logical volumes (LV). The underlying physical storage, such
as a partition or the entire disk, can be initialized as a physical
volume. Physical volumes are combined into volume groups.
A volume group can be divided into logical volumes. In
Android, LVM has gained popularity for ﬂexibly handling
internal and external storage [38], [24].
Thin provisioning [39] has become a feature in the Linux
kernel since version 3.2. Thin provisioning is different from
the conventional provisioning known as “thick provisioning”.
In thick provisioning, storage administrators usually need to
plan ahead, and install more storage capacity than required to
avoid any potential failures caused by inadequate storage. In
thin provisioning, only the logical storage space is allocated to
a volume and the physical storage capacity is not released until
it is actually required. This “on-demand” storage eliminates
the need of installing unnecessary storage media.
The volumes provided by thin provisioning are called “thin
volumes” (TV). Two logical volumes are needed when using
thin provisioning: one for data device and the other for
metadata device. The data device contains data blocks of
the thin volumes while the metadata device contains the free
space bitmap and the block mappings for the thin volumes.
Two device mapper targets are provided by the dm-thin-pool
module, thin-pool and thin. The metadata device and the data