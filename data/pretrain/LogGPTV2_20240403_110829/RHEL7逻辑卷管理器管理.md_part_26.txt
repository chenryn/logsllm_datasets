::: para
用来创建这些设备的固定命名方案，例如：您可以使用以下命令生成名为
`base`{.literal} 的 LVM 卷以及基于该卷的名为 `snap`{.literal} 快照卷。
:::
``` screen
# lvcreate -L 1G -n base volumeGroup
# lvcreate -L 100M --snapshot -n snap volumeGroup/base
```
::: para
这样会生成四个设备，可以使用下面的命令查看：
:::
``` screen
# dmsetup table|grep volumeGroup
volumeGroup-base-real: 0 2097152 linear 8:19 384
volumeGroup-snap-cow: 0 204800 linear 8:19 2097536
volumeGroup-snap: 0 2097152 snapshot 254:11 254:12 P 16
volumeGroup-base: 0 2097152 snapshot-origin 254:11
# ls -lL /dev/mapper/volumeGroup-*
brw-------  1 root root 254, 11 29 ago 18:15 /dev/mapper/volumeGroup-base-real
brw-------  1 root root 254, 12 29 ago 18:15 /dev/mapper/volumeGroup-snap-cow
brw-------  1 root root 254, 13 29 ago 18:15 /dev/mapper/volumeGroup-snap
brw-------  1 root root 254, 10 29 ago 18:14 /dev/mapper/volumeGroup-base
```
::: para
`snapshot-origin`{.literal} 目标的格式如下：
:::
``` screen
start length snapshot-origin origin
```
::: variablelist
[*`start`*]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[*`length`*]{.term}
:   ::: para
    这个片段的长度
    :::
[*`origin`*]{.term}
:   ::: para
    快照基础卷
    :::
:::
::: para
`snapshot-origin`{.literal}
通常有一个或者多个基于它的快照。会将读取操作直接与后备设备映射。每次写入时，会将原始数据保存在每个快照的
COW 设备中以便使其不更改可见内容（直到 COW 设备写满为止）。
:::
::: para
`快照`{.literal}目标的格式如下：
:::
``` screen
start length snapshot origin COW-device P|N chunksize
```
::: variablelist
[*`start`*]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[*`length`*]{.term}
:   ::: para
    这个片段的长度
    :::
[*`origin`*]{.term}
:   ::: para
    快照基础卷
    :::
[*`COW-device`*]{.term}
:   ::: para
    保存更改组集数据的设备
    :::
[P\|N]{.term}
:   ::: para
    P（持久）或者N（不持久）；表示是否可在重启后保留快照。对于瞬时快照（N）必须将
    less metadata 保存在磁盘中；内核可将其保存在内存中。
    :::
[*`chunksize`*]{.term}
:   ::: para
    将保存到 COW 设备中的有数据块更改的扇区大小
    :::
:::
::: para
以下示例显示了起始设备为 254:11 的 `snapshot-origin`{.literal} 目标。
:::
``` screen
0 2097152 snapshot-origin 254:11
```
::: para
以下示例显示了起始设备为 254:11、COW 设备为 254:12 的
`snapshot-origin`{.literal} 目标。这个快照设备在重启后仍然保留，且保存在
COW 设备中的数据块大小为 16 个扇区。
:::
``` screen
0 2097152 snapshot 254:11 254:12 P 16
```
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#error-map}A.1.5. 错误映射目标 {.title}
:::
::: para
如果有错误映射目标，任何对映射的扇区的 I/O 操作会失败。
:::
::: para
错误映射可用来进行测试。要测试某个设备在失败后如何动作，可以创建一个有坏扇区的设备映射，或者您可以换出一个镜像分支并用错误目标替换。
:::
::: para
错误目标可用于出错的设备，是一种避免超时并在实际设备中重试的方法。失败后重新部署
LVM 元数据时可将其作为中间目标使用。
:::
::: para
`错误`{.literal}映射目标除 *start* 和 *length* 参数外不使用其它参数。
:::
::: para
以下示例显示的是`错误`{.literal}目标。
:::
``` screen
0 65536 error
```
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#zero-map}A.1.6. 零映射目标 {.title}
:::
::: para
`零`{.literal}映射目标是与 `/dev/zero`{.filename}
等同的块设备。对这个映射的读取操作会返回零块。写入这个映射的数据会被丢弃，但写入操作会成功。`零`{.literal}映射目标除
*start* 和 *length* 参数外没有其它参数。
:::
::: para
以下示例显示了大小为 16Tb 设备的`零`{.literal}目标。
:::
``` screen
0 65536 zero
```
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#multipath-map}A.1.7. 多路径映射目标 {.title}
:::
::: para
多路径映射目标支持多路径的设备的映射。`多路径`{.literal}目标的格式如下：
:::
``` screen
start length  multipath  #features [feature1 ... featureN] #handlerargs [handlerarg1 ... handlerargN] #pathgroups pathgroup pathgroupargs1 ... pathgroupargsN
```
::: para
每个路径组群都有一组 *`pathgroupargs`* 参数。
:::
::: variablelist
[*`start`*]{.term}
:   ::: para
    虚拟设备中的起始块
    :::
[*`length`*]{.term}
:   ::: para
    这个片段的长度
    :::
[*`#features`*]{.term}
:   ::: para
    在那些功能之后是多路径功能的数目。如果这个参数是 0，则没有
    *`feature`* 参数，且下一个设备映射参数为
    *`#handlerargs`*。目前只有一个功能可使用 `multipath.conf`{.filename}
    文件中的 `features`{.literal} 属性设置，即
    `queue_if_no_path`{.literal}。这说明如果没有路径可用，则将这个多路经的设备设定为队列
    I/O。
    :::
    ::: para
    在下面的示例中，只在所有尝试使用这些路径测试失败后，才将
    `multipath.conf`{.literal} 文件的 `no_path_retry`{.literal}
    属性设定为 I/O
    操作队列。在这个示例中，只有使用路径检查程序在进行指定次数的检查后才会显示该映射。
    :::
    ``` screen
    0 71014400 multipath 1 queue_if_no_path 0 2 1 round-robin 0 2 1 66:128 \
    1000 65:64 1000 round-robin 0 2 1 8:0 1000 67:192 1000
    ```
    ::: para
    在所有路径检查程序完成指定数目的检查并失败后，会出现如下映射。
    :::
    ``` screen
    0 71014400 multipath 0 0 2 1 round-robin 0 2 1 66:128 1000 65:64 1000 \
    round-robin 0 2 1 8:0 1000 67:192 1000
    ```
[*`#handlerargs`*]{.term}
:   ::: para
    那些参数后是硬件处理程序参数的数目。硬件处理程序指定在切换路径组或者处理
    I/O 错误时用来执行具体硬件的动作。如果将其设定为
    0，那么下一个参数则为 *`#pathgroups`*。
    :::
[*`#pathgroups`*]{.term}
:   ::: para
    路径组的数目。路径组是一组 multipathed
    设备进行负载平衡的路径。每个路径组都有一组 *`pathgroupargs`* 参数。
    :::
[*`pathgroup`*]{.term}
:   ::: para
    下一个要尝试的路径组。
    :::
[*`pathgroupsargs`*]{.term}
:   ::: para
    每个路径组均由以下参数组成：
    :::
    ``` screen
    pathselector #selectorargs #paths #pathargs device1 ioreqs1 ... deviceN ioreqsN 
    ```
    ::: para
    路径组中的每个路径都有一组路径参数。
    :::
    ::: variablelist
    [*`pathselector`*]{.term}
    :   ::: para
        指定用来决定使用这个路径组中的哪个路径进行下一个 I/O
        操作的算法。
        :::
    [*`#selectorargs`*]{.term}
    :   ::: para
        在多路径映射中这个参数后的路径选择程序参数的数目。目前，这个参数的值总是
        0。
        :::
    [*`#paths`*]{.term}
    :   ::: para
        这个路径组中的路径数目。
        :::
    [*`#pathargs`*]{.term}
    :   ::: para
        在这个组群中为每个路径指定的路径参数数目。目前，这个数值总是
        1，即 *`ioreqs`* 参数。
        :::
    [*`device`*]{.term}
    :   ::: para
        该路径的块设备，使用主号码和副号码以 *`major`*:*`minor`*
        格式参考
        :::
    [*`ioreqs`*]{.term}
    :   ::: para
        切换到当前组群的下一个路径前路由到这个路径的 I/O 请求数目。
        :::
    :::
:::
::: para
[图 A.1
"多路径映射目标"](#device_mapper.html#multipath_map_figure){.xref}
显示带两个路径组群的多路径目标格式。
:::
::: figure
[⁠]{#device_mapper.html#multipath_map_figure}
::: figure-contents
::: mediaobject
![多路径映射目标](images/devicemap/multipathmap.png)
:::
:::
**图 A.1. 多路径映射目标**
:::
::: para
以下示例显示对同一个多路径设备的一个纯故障排除目标定义。在这个目标中有四个路径组，其中每个路径组只有一个路径，以便多路径的设备每次只能使用一个路径。
:::
``` screen
0 71014400 multipath 0 0 4 1 round-robin 0 1 1 66:112 1000 \
round-robin 0 1 1 67:176 1000 round-robin 0 1 1 68:240 1000 \
round-robin 0 1 1 65:48 1000
```
::: para
下面的示例显示为同一个多路径设备完全展开（多总线）目标定义。在这个目标中只有一个路径组，其中包含所有路径。在这个设定中，多路径将所有负载平均分配到所有路径中。
:::
``` screen
0 71014400 multipath 0 0 1 1 round-robin 0 4 1 66:112 1000 \
 67:176 1000 68:240 1000 65:48 1000
```
::: para
有关多路径的详情请参考*《使用设备映射器多路径》*文档。
:::
:::
::: section
::: titlepage
## [⁠]{#device_mapper.html#crypt-map}A.1.8. 加密映射目标 {.title}
:::
::: para
`加密`{.literal}目标会加密通过指定设备的所有数据。它使用内核 Crypto