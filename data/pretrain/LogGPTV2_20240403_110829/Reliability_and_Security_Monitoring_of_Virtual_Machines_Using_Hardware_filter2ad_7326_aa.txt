title:Reliability and Security Monitoring of Virtual Machines Using Hardware
Architectural Invariants
author:Cuong Manh Pham and
Zachary Estrada and
Phuong Cao and
Zbigniew T. Kalbarczyk and
Ravishankar K. Iyer
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Reliability and Security Monitoring of Virtual
Machines Using Hardware Architectural Invariants
Cuong Pham, Zachary Estrada, Phuong Cao, Zbigniew Kalbarczyk, Ravishankar Iyer
University of Illinois at Urbana-Champaign
{pham9, zestrad2, pcao3, kalbarcz, rkiyer}@illinois.edu
Abstract—This paper presents a solution that simultaneously
addresses both reliability and security (RnS) in a monitoring
framework. We identify the commonalities between reliability
and security to guide the design of HyperTap, a hypervisor-level
framework that efﬁciently supports both types of monitoring in
virtualization environments. In HyperTap, the logging of system
events and states is common across monitors and constitutes
the core of the framework. The audit phase of each monitor is
implemented and operated independently. In addition, HyperTap
relies on hardware invariants to provide a strongly isolated root
of trust. HyperTap uses active monitoring, which can be adapted
to enforce a wide spectrum of RnS policies. We validate Hy-
perTap by introducing three example monitors: Guest OS Hang
Detection (GOSHD), Hidden RootKit Detection (HRKD), and
Privilege Escalation Detection (PED). Our experiments with fault
injection and real rootkits/exploits demonstrate that HyperTap
provides robust monitoring with low performance overhead.
I. INTRODUCTION
Reliability and security (RnS) are two essential aspects of
modern highly connected computing systems. Traditionally,
reliability and security tend to be treated separately because of
their orthogonal nature: while reliability deals with accidental
failures, security copes with intentional attacks against a
system. As a result, mechanisms/algorithms addressing the
two problems are designed independently, and it is difﬁcult
to integrate them under a common monitoring framework.
Addressing RnS aspects separately may lead to unforeseen
consequences. For example, a reliability monitor (e.g., a
heartbeat server) may have a vulnerability that allows remote
attackers to exploit the system. On the other hand, a security
monitor may introduce a new failure mode that the current
system is not designed to handle. Furthermore, different mod-
ules’ design and implementation may not be compatible. For
instance, suppose two monitors both require exclusive access
to a resource, e.g., a performance register. Such monitors
cannot co-exist
in the same system. This situation places
system designers in a difﬁcult position, in which they must
trade-off one essential quality for another. In a milder scenario,
the system has to pay a combinational cost, e.g., development,
deployment, and runtime performance costs, of both solutions.
In this paper, we identify the commonalities between reli-
ability and security monitoring to guide the development of
suitable frameworks for combining both uses of monitoring.
We apply our observations in the design and implementation
of the HyperTap framework for virtualization environments.
A monitoring process can be divided into two tightly
coupled phases: logging and auditing [1]. In the logging phase,
relevant system events (e.g., a system call) and state (e.g.,
system call parameters) are captured. In the auditing phase,
these events and states are analyzed, based on a set of policies
that classify the state of the system, e.g., normal or faulty.
Based on that model, we observe that although RnS monitors
may apply different policies during the auditing phase, they
can utilize the same event- and state- logging capability. This
observation suggests that the logging phases of multiple RnS
monitors need to be combined into a common framework.
Uniﬁcation of logging phases brings further beneﬁts, namely, it
avoids potential conﬂict between different monitors that track
the same event or state, and reduces the overall performance
overhead of monitoring.
A uniﬁed logging framework for RnS must be founded on
an isolated root of trust and have support for active moni-
toring. Current virtual machine monitoring techniques, e.g.,
Virtual Machine Introspection (VMI), either exhibit neither of
those two properties, or offer only one at time. An isolated
root of trust asserts that the source of captured events and
state cannot be tampered with by actors inside target systems.
Traditional VMI techniques fail on that condition, as they
choose to rely solely on the guest Operating System (OS) to
report its own state. An example of that violation is presented
in [2] (the issue is further discussed in Section IV-B). For RnS
monitoring, active monitoring (or event-driven monitoring) has
been shown to be more advantageous than passive monitoring
(or state polling), as the former can capture operational events
in addition to the system’s state[3]. Furthermore, active moni-
toring can overcome the time sensitivity of passive monitoring,
e.g., it can detect short latency failures and transient attacks
[4], as further illustrated in Section IV-C.
In order to fulﬁll the requirements stated above, we present
a framework implemented at the hypervisor level called Hy-
perTap, that provides an event logging infrastructure suitable
for implementing various types of RnS policies for Virtual
Machines (VMs). In HyperTap, the logging phase is common
for all monitors and constitutes the core of the framework. The
auditing phase of each monitor is implemented and operated
independently. To achieve an isolated root of trust, Hyper-
Tap employs hardware architectural invariants, which cannot
be modiﬁed by attackers and failures inside VMs. These
invariants hold under assumptions about the trustworthiness
of the hypervisor and hardware stated in Section V-A. In
order to support active monitoring and intercept a wide range
of system events, HyperTap utilizes the Hardware Assisted
Virtualization (HAV) event generation mechanism. The events
are then delivered to registered auditors which realize a variety
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.19
DOI 10.1109/DSN.2014.19
DOI 10.1109/DSN.2014.19
DOI 10.1109/DSN.2014.19
13
13
13
13
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:30:24 UTC from IEEE Xplore.  Restrictions apply. 
of RnS monitoring policies.
In order to demonstrate the feasibility of HyperTap as a
framework that uniﬁes RnS monitoring for virtualized en-
vironments, we describe the design and evaluation of three
practical lightweight auditors: Guest Operating System Hang
Detection (GOSHD), Hidden Rootkit Detection (HRKD),
and Privilege Escalation Detection (PED). The GOSHD and
HRKD auditors are chosen to show that a common event,
e.g., context switching, can be simultaneously used for both
reliability and security monitoring. The PED auditor is chosen
to show the advantages of active monitoring over passive
monitoring. In addition to facilitating the uniﬁcation of RnS
monitors, HyperTap’s dependable hardware invariants and ac-
tive monitoring mechanism enable auditors with high detection
coverage. GOSHD can detect 99.8% of injected hang failures,
including partial hang failures in multiprocessor VMs – a new
failure mode revealed by GOSHD. HRKD can detect both
hidden processes and kernel threads regardless of their hiding
mechanisms. And PED can detect all four types of proposed
attacks that defeat Ninja [5], a real-world privilege escalation
detector that uses passive monitoring.
II. RELATED WORK
Previous research [6], [7], [8] has recognized the importance
of addressing RnS under a common framework. Frequently,
the approach has been to extend existing hardware [6], [7] with
support for RnS monitoring. While hardware implementations
have performance and accessibility advantages over software
in the context of ﬁne-grained monitoring; their extensibility
and customizability after deployment can be quite limited. Hy-
perTap extends the concept of Virtual Machine Introspection
(VMI), which takes advantage of the hypervisor software layer
to provide monitoring support for the upper VM layer.
Traditional VMI techniques, such as VMWatcher [9] and
XenAccess [10], extract knowledge from the internal data
structures of the guest operating system (OS). That information
is then used to detect security attacks [9], [10], [11], [12],
[13]. However, that approach is vulnerable to attacks that can
manipulate the data structures used by VMI, as demonstrated
in [2], [14], [15]. Another limitation of traditional VMI is
that it only supports passive monitoring, i.e., monitoring that
performs system inspection in a polling manner. Passive
monitoring is not suitable for enforcing many security policies
[3]. Moreover, it is vulnerable to transient attacks [4], which
are attacks that occur between logging phases.
In order to address the limitations of passive monitoring,
event-driven, or active, monitoring has been proposed for out-
of-VM security enforcement [3], [16]. Lares [3], for example,
is an architecture that securely places hooks in protected VMs
and intercepts their events. However,
this hook placement
mechanism is intrusive to the guest system. To reduce the
amount of manual intervention in the process, the authors of
[16] propose a method to automatically identify locations to
place useful application-aware hooks.
Previous studies [17], [18], [19], [20] show how hardware
architectural state can be used to interpret a guest OS’s oper-
ations. For example, Antfarm [17] and its extension Lycosid
[18] describe a guest user process counting technique based
on monitoring virtual memory (i.e., tracking CR3 in x86).
Ether [19] utilizes the VM Exit mechanism provided by HAV
to record traces of guest VM execution for ofﬂine malware
analysis. HyperTap builds on those concepts to provide robust
online monitoring for both reliability and security.
Out-of-VM failure detection has also been a subject of
study in previous research. The study in [21] uses supervised
machine learning on a set of hypervisor-level counters, such
as guest CPU usage and I/O count,
to detect guest OS
failures. Such approaches can beneﬁt greatly from HyperTap’s
common logging infrastructure and the counters it provides
(e.g., different types of events and states, which directly reﬂect
the operations of guest VMs).
III. HARDWARE-ASSISTED VIRTUALIZATION REVIEW
In order to support RnS monitoring, HyperTap takes ad-
vantage of features used by HAV, particularly the VM Exit
mechanism. This section reviews the basic concepts of HAV to
provide the context for the discussion in subsequent sections.
In 1974, Popek and Goldberg described the “trap-and-
emulate” model of virtualization [22]. “Trapping” prevents the
VM from taking privileged control, and “emulating” ensures
that the semantics of the control are done without violating
the VM’s expectations.
The trap-and-emulate can be done either (i) entirely in
software via binary translation and/or para-virtualization, or
(ii) using Hardware-Assisted Virtualization (e.g., Intel VT-x
and AMD-V). The latter design, HAV, supports an unmodiﬁed
guest OS with small performance overhead and signiﬁcantly
simpliﬁes the implementation of hypervisors. Although here
we focus on the x86 architecture and Intel’s VT-x, the tech-
niques could be mapped to AMD-V and PowerPC, since these
provide a similar mechanism that traps privileged instructions.
A. VM Exits
In addition to x86’s privilege rings, HAV deﬁnes guest mode
and host mode execution. Certain operations (e.g. privileged
instructions) are restricted in guest mode. If a guest attempts
to execute a restricted operation, the processor relinquishes
control to the hypervisor. If that happens, the processor ﬁres a
VM Exit event and transitions from guest mode to host mode.
After the host has ﬁnished handling the exception, it resumes
guest execution via a VM Entry event.
Each type of restricted operation triggers a different type of
VM Exit event. For example, if the guest attempts to modify
the contents of a Control Register (CR), the processor ﬁres a
CR_ACCESS VM Exit event. In addition to the event, control
ﬁelds and the state of the suspended VM are saved into a data
structure (VMCS in Intel VT-x and VMCB in AMD-V).
B. Extended Page Tables (EPT)
Extended Page Tables (EPT) is a hardware-supported mech-
anism for virtualizing the Memory Management Unit (MMU).
When EPT is enabled, each VM accesses its private memory
14141414
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:30:24 UTC from IEEE Xplore.  Restrictions apply. 
via a guest-physical address (GPA). The processor translates
GPAs to physical addresses by traversing the EPT paging
structures, which are transparent to the guest OS. Guest virtual
address (GVA) is the term for the virtual addresses used by
the guest system. EPT also allows speciﬁcation of access
permissions for guest memory pages, namely ‘read,’ ‘write,’
and ‘execute.’ Guest attempts at unauthorized accesses cause
EPT_VIOLATION VM Exits.
C. Notation
Virtual CPU (vCPU): a VM’s virtual processor. With HAV,
each vCPU occupies one physical CPU core until the next VM
Exit event. At a VM Entry transition, the hypervisor assigns
an available physical CPU core to the suspended vCPU, unless
CPU afﬁnity is used.
A.B: reference to ﬁeld B of data structure A at the host layer,
e.g., vcpu.CR3: vcpu contains a ﬁeld that stores the value of
the guest’s CR3 register.
C→D: reference to ﬁeld D of data structure C at the guest
layer. In other words, C is a guest virtual address, e.g.,
TSS→RSP0 references the ﬁeld RSP0 of the TSS structure
managed by the guest kernel.
IV. DESIGNING RELIABILITY AND SECURITY
MONITORING FOR VIRTUAL MACHINES
This section discusses the beneﬁts of (i) having a uniﬁed
logging channel for all monitors, (ii) using active monitoring
instead of passive monitoring, and (iii) placing the root of trust
at hardware invariants for virtual machine monitoring.
A. Uniﬁed Logging
It is not uncommon for co-deployed logging mechanisms
to conﬂict. For instance, two monitors relying on a certain
counter that only allows exclusive access cannot uses it simul-
taneously. A concrete example would be to deploy both the
failure detection technique proposed in [23] and the malware
detection technique proposed in [24] in the same system, as
they both use hardware performance counters. In addition, one
monitor may become a source of noise for other monitors. For
example, intrusive logging could generate an excessive number
of events.
The problem can be solved by unifying logging for co-
located monitors. Uniﬁed logging is responsible for (i) re-
trieving common target system events and states, and then (ii)
streaming them in a timely manner to customizable auditors,
which enforce RnS policies.
Aside from avoiding potential conﬂicts, the combination
of logging phases yields additional beneﬁts. It can reduce
the overall performance overhead of combined monitors. To
ensure the consistency of captured states and events, logging is
often a blocking operation. Once the event and state have been
logged, an audit can be performed in parallel with execution
of the target system. Therefore, combining blocking logging
phases boosts performance, even in cases where the captured
states differ. Furthermore, this approach inherits other beneﬁts
of the well-known divide-and-conquer strategy: it allows one
to focus on hardening the core logging engine, and enables
incremental development and deployment of auditing policies.
B. Achieving Isolation via Architectural Invariants
An OS invariant is a property deﬁned and enforced by
the design and implementation of a speciﬁc OS, so that the
software stack above it, e.g., user programs and device drivers,
can operate correctly. In the context of VMI, OS invariants
allow the internal state of a VM to be monitored from the
outside by decoding the VM’s memory [9], [10], [12], [11],
[13]. No user inside a VM can interfere with the execution
of outside monitoring tools. However, monitoring tools still
share input, e.g., a VMs’ memory, with the other software
inside VMs. Therefore, those monitoring tools are vulnerable
to attacks at the guest system level, as demonstrated in [2],
[14], [15].
An architectural invariant is a property deﬁned and en-
forced by the hardware architecture, so that the entire software
stack, e.g., hypervisors, OSes, and user applications, can op-
erate correctly. For example, the x86 architecture requires that
the CR3 and TR registers always point to the running process’s
Page Directory Base Address (PDBA) and Task State Segment
(TSS), respectively. Hardware invariants and HAV features
have been studied in the context of security monitoring [17]
and ofﬂine malware analysis [19].
We ﬁnd that architectural invariants, particularly the ones
deﬁned by HAV, provide an outside view with desirable
features for VM RnS monitoring. The behaviors enforced
by HAV involve primitive building blocks of essential OS
operations, such as context switches, privilege level (or ring)
transfers, and interrupt delivery. Furthermore, strong isolation
between VMs and the physical hardware ensures the integrity
of architectural invariants against attacks inside VMs. Software
inside VMs cannot tamper with the hardware as it can with
the OS. In this study, we explore the full potential of HAV for
online enforcement of RnS policies.
However, relying solely on architectural invariants and ig-
noring OS invariants would widen the semantic gap separating
the target VM and the hypervisor. The reason is that many
OS concepts, such as user management (e.g., processes owned
by different users), are not deﬁned at the architectural level.
In this study, we propose to use architectural invariants as
the root of trust when deriving OS state. For example, the
thread_info data structure in the Linux kernel containing
thread-level information can be derived from the TSS data
structure, a data structure deﬁned by the x86 architecture.
In order to circumvent our OS state derivation, an attack
would need to change the layout of OS-deﬁned data structures
(e.g., by adding ﬁelds to an existing structure that point
to tainted data). Changing data structure layout, as opposed
to changing values, is difﬁcult for attackers, because (i) it
involves signiﬁcant changes to the kernel code that references
the altered ﬁelds, and (ii) it would need to relocate all relevant
kernel data objects. Not only are those attacks difﬁcult to