impossible) to implement, but we are are not claiming
this provably. However, simulations do indicate that the
cost to implement these defenses scales linearly with the
computational power of a single player, which may ren-
der them impractical (if they are indeed even possible).
As a result, approaches based on this type of partici-
pation game, including those proposed in prior work [30,
32], appear to be unable to prevent Sybil attacks that un-
dermine conﬁdence in the veriﬁcation of smart contracts.
2There are two players. Both get payoff 1 if they both defect, and
payoff 2 if they both cooperate. If one cooperates and the other defects,
the defector gets 4 and the cooperator gets 0.
USENIX Association
27th USENIX Security Symposium    1355
3 Arbitrum System Overview
In this section we give an overview of the design of Ar-
bitrum.
3.1 Roles
There are four types of roles in the Arbitrum protocol
and system.
The Veriﬁer is the global entity or distributed proto-
col that veriﬁes the validity of transactions and publishes
accepted transactions. The Veriﬁer might be a central en-
tity or a distributed multiparty consensus system such as
a distributed quorum system, a worldwide collection of
miners as in the Nakamoto consensus protocol [26], or
itself a smart contract on an existing cryptocurrency. Be-
cause the Arbitrum design is agnostic as to which type of
consensus system is used, for brevity we use the singular
term Veriﬁer for whatever consensus system is operating.
A key is a participant in the protocol that can own cur-
rency and propose transactions. A key is identiﬁed by
(the hash of) a public key. It can propose transactions by
signing them with the corresponding private key.
A VM (Virtual Machine) is a virtual participant in
the protocol. Every VM has code and data that deﬁne
its behavior, according to the Arbitrum Virtual Machine
(AVM) Speciﬁcation,which is included in the extended
version of this paper. Like keys, VMs can own currency
and send and receive currency and messages. A VM is
created by a special transaction type.
A manager of a VM is a party that monitors the
progress of a particular VM and ensures the VM’s cor-
rect behavior. When a VM is created, the transaction that
creates the VM speciﬁes a set of managers for the VM.
A manager is identiﬁed by (the hash of) its public key.
3.2 Lifecycle of a VM
An Arbitrum VM is created using a special transaction,
which speciﬁes the initial state hash of the VM, a list
of managers for the VM, and some parameters. As de-
scribed below, the state hash represents a cryptographic
commitment to the VM’s state (i.e., its code and initial
data). Any number of VMs can exist at the same time,
typically with different managers.
Once a VM is created, managers can take action to
cause that VM’s state to change. The Arbitrum protocol
provides an any-trust guarantee: any one honest manager
can force the VM’s state changes to be consistent with
the VM’s code and state, that is, to be a valid execution
according to the AVM Speciﬁcation.
An assertion states that if certain preconditions hold,
the VM’s state will change in a certain way. An assertion
about a VM is said to be eligible if (1) the assertion’s
preconditions hold, (2) the VM is not in a halted state,
and (3) the assertion does not spend more funds than the
VM owns. The assertion contains the hash of the VM’s
new state and a set of actions taken by the VM, such as
sending messages or currency.
Unanimous assertions are signed by all managers of
that VM. If a unanimous assertion is eligible, it is imme-
diately accepted by the Veriﬁer as the new state of the
VM.
Disputable assertions are signed by only a single man-
ager, and that manager attaches a currency deposit to the
assertion. If a disputable assertion is eligible, the asser-
tion is published by the Veriﬁer as pending. If a time-
out period passes without any other manager challenging
the pending assertion, the assertion is accepted by the
Veriﬁer and the asserter gets its deposit back. If another
manager challenges the pending assertion, the challenger
puts down a currency deposit, and the two managers en-
gage in the bisection protocol, which determines which
of them is lying. The liar will lose its deposit.
A VM continues to advance its state as described
above, until the VM reaches a halted state. At this point
no further state changes are possible, and the Veriﬁer and
managers can forget about the VM.
3.3 The Bisection Protocol
The bisection protocol begins when a manager has made
a disputable assertion and another manager has chal-
lenged that assertion. Both managers will have put down
a currency deposit.
At each step of the bisection protocol, the asserter bi-
sects the assertion into two assertions, each involving
half as many steps of computation by the VM, and the
challenger chooses which half it would like to challenge.
They continue this bisection protocol until an assertion
about a single step (i.e., the execution of one instruc-
tion by the VM) is challenged, at which point the asserter
must provide a one-step proof that the Veriﬁer can check.
The asserter wins if they provide a correct proof; other-
wise the challenger wins. The winner gets their deposit
back and also takes half of the loser’s deposit. The other
half of the loser’s deposit goes to the Veriﬁer.
The bisection protocol is carried out via a series of
blockchain transactions made by the asserter and chal-
lenger. At each point in the protocol a party has a lim-
ited time interval to make their next move, and that party
loses if they fail to make a valid move by the deadline.
The Veriﬁer only needs to check the facial validity of the
moves, for example, checking that a bisection of an as-
sertion into two half-sized assertions is valid in the sense
that the two resulting assertions do indeed compose to
yield the original assertion.
1356    27th USENIX Security Symposium
USENIX Association
3.4 The Veriﬁer’s Role
Recall that the Veriﬁer is the mechanism, which may
be a distributed protocol with multiple participants, that
veriﬁes transactions and publishes veriﬁed transactions.
In addition to storing a few parameters about each VM
such as a list of its managers, the Veriﬁer tracks three
pieces of information about each VM that change over
time: the hash of the VM’s state, the amount of currency
held by the VM, and the hash of the VM’s inbox which
holds messages sent to the VM. The state of a VM is
advanced, corresponding to execution of the VM’s pro-
gram, by the Veriﬁer’s acceptance of assertions made by
the VM’s managers.
An assertion that is challenged cannot be accepted
by the Veriﬁer, even if the asserter wins the challenge
game.
Instead, an assertion is “orphaned” when it is
challenged.3 After the challenge game is over, the as-
serter has the option of resubmitting the same assertion,
although this would obviously be foolish if the assertion
is incorrect.
The protocol design ensures that a single honest man-
ager can always prevent an incorrect assertion from be-
ing accepted, by challenging it. (If somebody else chal-
lenges the assertion before the honest manager can do so,
the assertion is still prevented from being accepted, even
if the challenger is malicious.) An honest manager can
also ensure that the VM makes progress, by making dis-
putable assertions, except that a malicious manager can
delay progress for the duration of one bisection proto-
col at the cost of half of a deposit, by forcing a bisection
protocol that it knows it will lose.
3.5 Key Assumptions and Tradeoffs
Arbitrum allows the party who creates a VM to specify
that VM’s code, initial data, and set of managers. The
Veriﬁer ensures that a VM cannot create currency but can
only spend currency that was sent to it. Thus a party who
does not know a VM’s state or who does not like a VM’s
code, initial data, or set of managers can safely ignore
that VM. It is assumed that parties will only pay atten-
tion to a VM if they agree that the VM was initialized
correctly and they have some stake in its correct execu-
tion. Any party is free to create a VM that is obscure or
unfair; and other parties are free to ignore it.
By Arbitrum’s any-trust assumption, parties should
3We rejected the alternative of allowing an assertion to be accepted
and executed if the asserter wins the challenge game, in order to prevent
attacks where a malicious challenger deliberately loses the challenge
game in order to get a false assertion accepted. The design we chose
ensures that a challenger who deliberately loses will lose half their de-
posit to the miners (and the other half to the asserter with whom the
challenger might be colluding), but a malicious challenger will not be
able to force the acceptance of an invalid assertion.
only rely on the correct behavior of a VM if they trust at
least one of the VM’s managers. One way to have a man-
ager you trust is to serve as a manager yourself. We also
expect that a mature Arbitrum ecosystem would include
manager-as-a-service businesses that have incentives to
maintain a reputation for honesty, and may additionally
accept legal liability for failure to carry out an honest
manager’s duties.
One key assumption that Arbitrum makes is that a
manager will be able to send a challenge or response
to the Veriﬁer within the speciﬁed time window.
In a
blockchain setting, this means the ability get a transac-
tion included in the blockchain within that time. While
critical, this assumption is standard in cryptocurrencies,
and risk can be mitigated by extending the challenge in-
terval (which is a conﬁgurable parameter of each VM).
Two factors help to reduce the attractiveness of denial
of service attacks against honest managers. First, if a
DoS attacker cannot be certain of preventing an honest
manager from submitting a challenge, but can only re-
duce the probability of a challenge to p, the risk of incur-
ring a penalty may still be enough to deter a false asser-
tion, especially if the deposit amount is increased. Sec-
ond, because each manager is identiﬁed only by a public
key, a manager can use replication to improve its avail-
ability, including the use of “undercover” replicas whose
existence or location is not known to the attacker in ad-
vance.
Lastly, a motivated malicious manager can indeﬁnitely
stall a VM by continuously challenging all assertions
about its behavior. The attacker will lose at least half of
every deposit, and each such loss will delay the progress
of the VM only for the time required to run the bisection
protocol once. We assume that the creators of a VM will
set the deposit amount for the VM to be large enough to
deter this attack.
3.6 Beneﬁts
Scalability. Perhaps the key feature of Arbitrum is its
scalability. Managers can execute a machine indeﬁnitely,
paying only negligible transaction fees that are small
and independent of the complexity of the code they are
running. If participants follow incentives, all assertions
should be unanimous and disputes should never occur,
but even if a dispute does occur, the Veriﬁer can efﬁ-
ciently resolve it at little cost to honest parties (but sub-
stantial cost to a dishonest party).
Privacy. Arbitrum’s model is well-suited for private
smart contracts. Absent a dispute, no internal state of
a VM is revealed to the Veriﬁer. Further, disputes should
not occur if all parties execute the protocol according to
their incentives. Even in the case of a dispute, the Veriﬁer
is only given information about a single step of the ma-
USENIX Association
27th USENIX Security Symposium    1357
chine’s execution but the vast majority of the machine’s
state remains opaque to the Veriﬁer. In section 4.4, we
show that we can even eliminate this leak by doing the
one step veriﬁcation in a privacy-preserving manner.
Arbitrum’s privacy is no coincidence, but rather a di-
rect result of its model. Since the Arbitrum Veriﬁer (e.g.,
the miners in a Nakamoto consensus model) do not run
a VM’s code, they do not need to see it. By contrast, in
Ethereum, or any system that attempts to achieve “global
correctness,” all code and state has to be public so that
anyone can verify it, and this model is fundamentally at
odds with private execution.
Flexibility. Unanimous assertions provide a great deal
of ﬂexibility as managers can choose to reset a machine
to any state that they wish and take any actions that they
want (provided that the machine has the funds) – even if
they are invalid by the machine’s code. This requires
unanimous agreement by the managers, so if any one
manager is honest, this will only be done when the re-
sult is one that an honest manager would accept–such as
winding down a VM that has gotten into a bad state due
to a software bug.
4 Arbitrum Design Details
This section describes the Arbitrum protocol and virtual
machine design in more detail. The protocol governs
the public process that manages and advances the pub-
lic state of the overall system and each VM. The VM ar-
chitecture governs the syntax and semantics of Arbitrum
programs that run within a VM.
4.1 The Arbitrum Protocol
Arbitrum uses a simple cryptocurrency design, aug-
mented with features to allow the creation and use of
Virtual Machines (VMs), which can embody arbitrary
functionality. VMs are programs running on the Arbi-
trum Virtual Machine Architecture, which is described
below.
The Arbitrum protocol recognizes two kinds of actors:
keys and VMs. A key is identiﬁed by (the cryptographic
hash of) a public key, and the actor is deemed to have
taken an action if that action is signed by the correspond-
ing private key. The other kind of actor is a VM, which
takes actions by executing code. Any actor can own cur-
rency. Arbitrum tracks how much currency is owned by
each actor.
A VM is created using a special transaction type. The
VM-creation transaction speciﬁes a cryptographic hash
of the initial state of the VM, along with some parameters
of the VM, such as the length of the challenge period, the
amounts of various payments and deposits that parties
Figure 1: Overview of the state machine that governs
the status of each VM in the Arbitrum protocol.
will make as the protocol executes further, as well as a
list of the VM’s managers.
For each VM, the Veriﬁer tracks the hashed state of
that VM, along with the amount of currency held by
the VM, and a hash of its inbox. A VM’s state can be
changed via assertions about the VM’s execution, which
specify (1) the number of instructions executed by the
VM, (2) the hash of the VM’s state after the execution,
and (3) any actions taken by the VM such as making pay-
ments. Further, the assertion states a set of preconditions
that must be true before the assertion which specify (1)
the hash of the VM’s state before the execution, (2) an
upper and lower bound on the time that the assertion is
included in a block, (3) a lower bound on the balance
held by the VM, and (4) a hash of the VM’s inbox. The
rules of Arbitrum dictate under which conditions an as-
sertion is accepted. If an assertion is accepted, then the
VM is deemed to have changed its state, and taken pub-
licly visible actions, as speciﬁed by the assertion.
In the simplest case, an assertion is signed by all of the
VM’s managers. In this case, the assertion is accepted
by the miners if the assertion is eligible, that is, if (1)
the assertion’s precondition matches the current state of