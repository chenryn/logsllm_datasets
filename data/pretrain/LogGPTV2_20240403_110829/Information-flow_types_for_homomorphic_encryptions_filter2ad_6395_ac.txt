(cid:96) ke : Ke E K((cid:96)y)
ke ≤I α or τ ≤C α
(cid:96) y := E(e, ke) : (cid:96)y
DECRYPT
τ ∈ E
τ ≤ Γ(x)
(cid:96) y : Enc τ K(L(x))
(cid:96) kd : Kd E K ((cid:96)d)
(y ≤I α and (cid:96)d ≤I α) or (cid:96)d ≤C x or (cid:96)d ≤C α
(cid:96)d ≤I x
(cid:96) x := D(y, kd) : L(x)
Figure 3: Typing rules for CPA encryption with policy Γ.
Similarly, since we rely on CPA (for chosen plaintext) and not
CCA (for chosen ciphertext), decrypting a low-integrity ciphertext
may also be problematic, as illustrated below:
EXAMPLE 3
(CHOSEN-CIPHERTEXT ATTACKS). When dec-
rypted, low-integrity ciphertexts may leak information about their
decryption keys. For a given CPA encryption scheme (Ge,E,D),
we derive a new scheme (G(cid:48)
e,E(cid:48),D(cid:48)) as follows:
·
G(cid:48)
= Ge()
e()
·
D(cid:48)(y, kd)
= b|y(cid:48) := y; if b = 0 then kd else D(y(cid:48), kd)
·
= 1|E(x, ke)
E(cid:48)(x, ke)
(where b|y(cid:48) := y abbreviates decomposing y into b and y(cid:48)). In the
new scheme, decryption leaks its key when called on an ill-formed
ciphertext (preﬁxed with a 0 instead of a 1).
Although this scheme is CPA, decryption of a low-integrity ci-
phertext may cause a conﬁdentiality ﬂow from kd to the decrypted
plaintext, letting the adversary decrypt any other value encrypted
under ke.
CPA versus chosen ciphertext attacks As illustrated in Sections
7 and 8, our typing rules for CPA allow the decryption of low-
integrity ciphertexts when the plaintext is secret, as long as the re-
sulting plaintext never ﬂows to any cryptographic declassiﬁcation.
We deﬁne a notion of key dependencies, used to express the ab-
sence of key cycles in Section 6, and we give a counter-example
showing an implicit information ﬂow for one such cycle.
DEFINITION 3
versary, and typed command context P , K depends on K(cid:48) when
(KEY DEPENDENCIES). For given policy, ad-
1. K occurs in the set E(cid:48) of plaintext types for K(cid:48); or
2. K depends on c, c ≤C c(cid:48), and K(cid:48) declassiﬁes c(cid:48).
EXAMPLE 4. For a given CPA encryption scheme (Ge,E,D),
we deﬁne a modiﬁed scheme (Ge,E(cid:48),D(cid:48)) as follows:
E(cid:48)
(x, ke)
·
= r := random_plaintext();
if D(E(r, ke), x) = r then 0|x else 1|E(x, ke)
(cid:48)
(cid:48)
, kd)
, kd)
(b|y
·
= if b = 0 then kd else D(y
D(cid:48)
In the modiﬁed scheme, the encryption of a decryption key with
the corresponding encryption key leaks the decryption key. This
scheme is still CPA since an adversary would have to guess the
decryption key for a successful attack. However, this scheme leaks
kd when the decryption of a compromised plaintext appears in an
encryption:
ke, kd := Ge(); yLL := E(0, ke); _;
xHL := D(yLL, kd); y(cid:48)
LL := E(xHL, ke);
This command has a key-dependency cycle, but it is otherwise ty-
pable, and it is unsafe: we may ﬁll the hole with a command in-
jecting an ill-formed ciphertext; thus y(cid:48)
LL = xHL = kd and the
adversary can obtain the private key by reading y(cid:48)
LL.
Typing CCA2 encryptions We recall the deﬁnition of CCA2, ob-
tained from CPA by adding a decryption oracle:
DEFINITION 4
(CCA2 SECURITY). The scheme (Ge,E,D)
provides indistinguishability against adaptive chosen-plaintext and
chosen-ciphertext attacks when, for the commands
E
D
CCA
·
= if b = 0 then m := E(x0, ke) else m := E(x1, ke);
log := log + m
·
= if m ∈ log then x := 0 else x := D(m, kd)
·
= b := {0, 1}; log := nil; ke, kd := Ge(); A[E, D]
and for any polynomial command context A such that b, kd /∈
rv(A) and b, kd, ke, η, log /∈ wv(A), the advantage of the adver-
sary |Pr[CCA; b =0 g] − 1
2| is negligible.
If the scheme is CCA2 secure, we may use an additional rule for
typing decryptions, given below.
DECRYPT CCA2
τ ∈ E
τ ≤ Γ(x)
(cid:96) y : Enc τ K(L(x))
(cid:96) kd : Kd E K ((cid:96)d)
∀τ
(cid:48) ∈ E, τ
(cid:48) ≤ τ (cid:116) (⊥,(cid:62))
(cid:96)d ≤I x
(Ge,E,D) is CCA2
(cid:96)d ≤I α or (cid:96)d ≤C α
(cid:96) x := D(y, kd) : L(x)
Except for the CCA2 cryptographic assumption, the rule differs
from rule DECRYPT only on the last line of hypotheses, so DECRYPT
CCA2 effectively adds a fourth case for decryptions of low-integrity
ciphertexts.
In this new case, the adversary may be able to mix
encryptions for values of type τ with those of values of any other
type τ(cid:48) ∈ E, so we must statically exclude some of the resulting
ﬂows between plaintexts: τ and τ(cid:48) must have the same datatypes at
the same levels of conﬁdentiality.
EXAMPLE 5
(CIPHERTEXT REWRITING). Consider a com-
mand context using the same keypair for payloads at levels HH
and LL:
ke, kd := Ge();
yLL := E(xLL, ke); y(cid:48)
LL := E(xHH, ke); _; x(cid:48)
LL := D(yLL, kd)
The command is not typable, and is unsafe: indeed, we may ﬁll the
hole with an adversary command yLL := y(cid:48)
LL, thereby causing the
program to leak a copy of the secret xHH into x(cid:48)
LL.
4. BLINDING SCHEMES:
SECURITY AND TYPING
Blinding schemes, also known as reencryption schemes, have
been introduced by Blaze et al. [3] and can be seen as special cases
of homomorphic encryption schemes. To precisely keep track of
their information ﬂows, we separate encryption into two stages,
each with its own primitive and typing rule:
• Pre-encryption P() inputs a plaintext and outputs its repre-
sentation as a ciphertext, but does not in itself provides con-
ﬁdentiality; it can be deterministic; it is typed as an ordinary
operation and does not involve declassiﬁcation.
• Blinding B() operates on ciphertexts; it hides the correlation
between its input and its output, by randomly sampling an-
other ciphertext that decrypts to the same plaintext; it is typed
with a declassiﬁcation, similarly to rule ENCRYPT.
As shown below, some standard encryption schemes can easily be
decomposed into pre-encryption and blinding. This enables us for
instance to blind a ciphertext without knowing its plaintext, and
to perform multiple operations on ciphertexts before blinding. For
conciseness, we may still write E instead of P;B when the two op-
erations are executed together. We deﬁne the functional properties
of blinding encryption schemes:
DEFINITION 5
(BLINDING SCHEME). A blinding encryption
scheme is a tuple (Ge,P,B,D) such that (Ge,P;B,D) is an en-
cryption scheme and B is a probabilistic function such that, for all
ke, kd := Ge(), if v encrypts m, then D(v, kd) = m, where ‘en-
crypts’ is deﬁned by
1. v encrypts m when v := B(P(m, ke)) with m ∈ plaintexts;
2. v(cid:48) encrypts m when v(cid:48) := B(v, ke) and v encrypts m.
Blinding hides whether an encrypted value is a copy of an other,
as shown in the following example.
EXAMPLE 6. Consider a service that, depending on a secret,
either forwards or overwrites an encrypted message. We distin-
guish a third conﬁdentiality level S such that L ≤C S ≤C H.
ke, kd := Ge(); yLH := E(mHH, ke);
if sSH then ySH := P(mSH, ke) else ySH := yLH;
LH := B(ySH, ke)
y(cid:48)
The resulting ciphertext ySH is itself secret, as an adversary may
otherwise compare it with yLH and infer the value of sHH. After
blinding, however, y(cid:48)
LH still protects the same message but can be
safely treated as public, as an adversary reading yLH and y(cid:48)
LH learns
nothing about mHH or sSH.
CPA for Blinding A blinding scheme (Ge,P,B,D) is secure
enough to be used with our typing rules when (Ge,B,D) is CPA.
We have shown this property for the blinding schemes based on El-
Gamal [8] (GE
e ,P P,BP,DP).
e ,P E,BE,DE) , and Paillier [22] (GP
THEOREM 1. (GE
e ,BE,DE) and (GP
e ,BP,DP) are CPA.
Typing rules for Pre-Encryption and Blinding The typing rules
for pre-encryption and blinding appear in Figure 4.
Rule PRE-ENCRYPT is similar to ENCRYPT, but constrains the con-
ﬁdentiality ﬂow from e to y, which forbids any declassiﬁcation by
typing.
The ﬁrst three hypotheses of the Rule BLIND bind types to the
variables ke, z, and y. These types are related by τ, τ(cid:48) ∈ E and K,
which are also typing assumptions for encryptions with key ke. The
label (cid:96)y in the typing of ke records the ﬂow from ke to y (by sub-
typing, we must have ke ≤ (cid:96)y). The label L(τ ) in the typing of z
records the ﬂow from z to the encrypted value in y. The hypothesis
τ ≤ τ(cid:48) ensure the correctness of the ﬂow from the encrypted value
in z to the encrypted value in y. Similarly to ENCRYPT, there is no
constraint on the ﬂow from z to y, so our typing rule may be sound
only with cryptographic assumptions. When z (cid:54)≤C y, we say that
K declassiﬁes C(z).
5. HOMOMORPHIC ENCRYPTIONS
We now consider encryption schemes with homomorphic prop-
erties: some functions on plaintexts can instead be computed on
their ciphertexts, so that the command that performs the compu-
tation may run at a lower level of conﬁdentiality. These schemes
enable private remote evaluation: supposing that fK is a function
that homomorphically compute a function f, a client may delegate
its evaluation to a server as follows:
1. the client encrypts the secret plaintext x into z1;
2. the server applies fK to the encrypted value (possibly en-
crypting its own secret inputs);
3. the client decrypts the result.
Programmatically, to implement x(cid:48) := f (x), we use a sequence of
three commands sharing the variables z and z(cid:48) and the encryption
key ke:
z := E(x, ke); z
(cid:48)
(cid:48)
:= fK (z, ke); x
:= D(z
(cid:48)
, kd)
For simplicity, we do not consider probabilistic homomorphic
functions, or homomorphic functions that take non-ciphertext ar-
guments.
DEFINITION 6
(HOMOMORPHIC ENCRYPTION SCHEME).
An homomorphic encryption scheme is a tuple (Ge,P,B,D,F)
such that (Ge,P,B,D) is a blinding encryption scheme and F is
a partial map on polynomial deterministic functions such that for
all ke, kd := Ge(), if v encryptsq m, then D(v, kd) = m, where
‘encrypts’ is deﬁned by
1. v encrypts0 m when v := B(P(m, ke)) with m ∈ plaintexts;
2. v(cid:48) encryptsq m when v(cid:48) := B(v, ke) and v encryptsq m.
3. v encryptsq(cid:48) f (m1, . . . , mn) when f (cid:55)→ fK : q → q(cid:48) ∈ F,
v := fK (v1, . . . , vn), and each vi encryptsq mi for i ∈
1..n.
Homomorphic properties are usually incompatible with CCA2
security. Also, practical encryption schemes usually support a few
ﬁxed functions f, and often put limits on the number of consec-
utive applications of fK.
(This is the purpose of indexes in our
model.) Intuitively, these homomorphic application are not perfect;
they also produce noise, which may eventually leads to incorrect
decryptions. For example, [4] provides a scheme with an unlimited
number of additions but only one homomorphic multiplication. In
our model, this translate to: F = {+ (cid:55)→ +K : 0 → 0;∗ (cid:55)→ ∗K :
0 → 1; + (cid:55)→ +K : 1 → 1}.
Figure 4 includes our additional rule for homomorphic computa-
tion, HOM-FUN. This rule is parametric on the homomorphic en-
cryption scheme, and relies on a typing assumption on the cor-
responding ‘virtual’ computation on plaintexts, using a security
policy extended with fresh plaintext variables: Γ, x : τ (cid:116) (cid:96)y, (cid:126)x :
(cid:126)τ (cid:116) (cid:96)y (cid:96) x := f ((cid:126)x) : L(τ ) (cid:116) (cid:96)y.
The ﬁrst hypotheses bind types to the variables ke, y, and (cid:126)z in-
volved in the homomorphic operation; these types are related by
(cid:126)τ , τ ∈ E and K, which describe the typing assumptions for en-
cryptions with key ke. They also ensure that the function f is ho-