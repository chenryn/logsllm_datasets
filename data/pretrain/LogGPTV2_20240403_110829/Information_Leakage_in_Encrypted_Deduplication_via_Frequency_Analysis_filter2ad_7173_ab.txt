While this work focuses on frequency analysis, another
inference attack based on combinatorial optimization, called
lp-optimization, has been proposed to attack deterministic en-
cryption [36]. Nevertheless, frequency analysis is shown to be
as effective as the lp-optimization attack in experiments [36],
and later studies [27], [37] even point out that both frequency
analysis and lp-optimization may have equivalent severity.
Thus, we believe that frequency analysis is representative as
our baseline.
We do not consider other threats launched against encrypted
deduplication, as they can be addressed independently by
existing approaches. For example,
the side-channel attack
against encrypted deduplication [21], [22] can be addressed
by server-side deduplication [22], [28] and proof of ownership
[21]; the leakage of access pattern [23] can be addressed by
oblivious RAM [42] and blind storage [35].
IV. ATTACKS
In this section, we present
inference attacks based on
frequency analysis against encrypted deduplication. We ﬁrst
present a basic attack (see Section IV-A), which builds on clas-
sical frequency analysis to infer plaintext content in encrypted
deduplication. We next propose a more severe locality-based
attack (see Section IV-B), which enhances the basic attack by
exploiting chunk locality.
Table I summarizes the major notation used in this paper.
We ﬁrst formalize the adversarial goal of both basic and
locality-based attacks based on the threat model in Section III.
Let C = hC1, C2, . . .i be the sequence of ciphertext chunks in
logical order for the latest backup, and M = hM1, M2, . . .i be
the sequence of plaintext chunks in logical order for a prior
backup (i.e., M is the auxiliary information). Both C and
M show the logical orders of chunks before deduplication as
perceived by the adversary (i.e., identical chunks may repeat),
and each of them can have multiple identical chunks that
have the same content. Note that both C and M do not
necessarily have the same number of chunks. Furthermore, the
i-th plaintext chunk Mi in M (where i ≥ 1) is not necessarily
mapped to the i-th ciphertext chunk in C; in fact, Mi may not
be mapped to any ciphertext chunk in C, for example, when
Mi has been updated before the latest backup is generated.
Given C and M, the goal of an adversary is to infer the content
of the original plaintext chunks in C.
A. Basic Attack
We ﬁrst demonstrate how we can apply frequency analysis
to infer the original plaintext chunks of the latest backup in
encrypted deduplication. We call this attack the basic attack.
Overview: In the basic attack, we identify each chunk by
its ﬁngerprint, and count the frequency of each chunk by the
number of ﬁngerprints that appear in a backup. Thus, a chunk
(or a ﬁngerprint) has a high frequency if there exist many
identical chunks with the same content. We sort the chunks of
both C and M by their frequencies. We then infer that the i-th
frequent plaintext chunk in M is the original plaintext chunk
of the i-th frequent ciphertext chunk in C. Our rationale is
TABLE I
MAJOR NOTATION USED IN THIS PAPER.
Notation
Description
C
M
FC
FM
T
LC
LM
RC
RM
G
u
v
w
LC
LM
RC
RM
KS
h
Deﬁned in Section IV
sequence of ciphertext chunks hC1, . . .i in logical order for
the latest backup
sequence of plaintext chunks hM1, . . .i in logical order for
a prior backup
associative array that maps each ciphertext chunk in C to
its frequency
associative array that maps each plaintext chunk in M to its
frequency
set of inferred ciphertext-plaintext chunk pairs
set of left neighbors of ciphertext chunk C
set of left neighbors of plaintext chunk M
set of right neighbors of ciphertext chunk C
set of right neighbors of plaintext chunk M
set of currently inferred ciphertext-plaintext chunk pairs
number of ciphertext-plaintext chunk pairs returned from
frequency analysis during the initialization of G
number of ciphertext-plaintext chunk pairs returned from
frequency analysis in each iteration of locality-based attack
maximum size of G
associative array that maps each ciphertext chunk in C to
its left neighbor and co-occurrence frequency
associative array that maps each plaintext chunk in M to its
left neighbor and co-occurrence frequency
associative array that maps each ciphertext chunk in C to
its right neighbor and co-occurrence frequency
associative array that maps each plaintext chunk in M to its
right neighbor and co-occurrence frequency
Deﬁned in Section VI
segment-based key of segment S
minimum ﬁngerprint of chunks in a segment
that the frequency of a plaintext chunk is correlated to that of
a ciphertext chunk due to deterministic encryption.
Algorithm details: Algorithm 1 shows the pseudo-code of
the basic attack. It takes C and M as input, and returns the
result set T of all inferred ciphertext-plaintext chunk pairs.
It ﬁrst calls the function COUNT to obtain the frequencies of
all ciphertext and plaintext chunks, identiﬁed by ﬁngerprints,
in associative arrays FC and FM, respectively (Lines 2-3).
It then calls the function FREQ-ANALYSIS to infer the set T
of ciphertext-plaintext chunk pairs (Line 4), and returns T
(Line 5).
The function COUNT constructs an associative array FX
(where X can be either C and M) that holds the frequencies
of all chunks. If a chunk X does not exist in FX (i.e., its
ﬁngerprint is not found), then the function adds X to FX and
initializes FX[X] as zero (Lines 10-12). The function then
increments FX[X] by one (Line 13).
The function FREQ-ANALYSIS performs frequency analysis
based on FC and FM. It ﬁrst sorts each of FC and FM
by frequency (Lines 18-19). Since FC and FM may not
have the same number of elements, it ﬁnds the minimum
number of elements in FC and FM (Line 20). Finally, it
returns the ciphertext-plaintext chunk pairs, in which both the
ciphertext and plaintext chunks of each pair have the same
rank (Lines 21-26).
Algorithm 1 Basic Attack
1: procedure BASIC ATTACK(C, M)
2:
3:
4:
5:
6: end procedure
FC ←COUNT(C)
FM ←COUNT(M)
T ←FREQ-ANALYSIS(FC, FM)
return T
Initialize FX
for each X in X do
7: function COUNT(X)
8:
9:
10:
11:
12:
13:
14:
15:
16: end function
end for
return FX
if X does not exist in FX then
Initialize FX[X] ← 0
end if
FX[X] ← FX[X] + 1
Sort FC by frequency
Sort FM by frequency
min ← min{|FC|, |FM|}
for i = 1 to min do
17: function FREQ-ANALYSIS(FC, FM)
18:
19:
20:
21:
22:
23:
24:
end for
25:
return T ′
26:
27: end function
C ← i-th frequent ciphertext chunk
M ← i-th frequent plaintext chunk
Add (C, M ) to T ′
Discussion: The basic attack demonstrates how frequency
analysis can be applied to encrypted deduplication. However,
it only achieves small inference accuracy, as shown in our
trace-driven evaluation (see Section V). One reason is that
the basic attack is sensitive to data updates that occur across
different versions of backups over time. An update to a chunk
can change the frequency ranks of multiple chunks, including
the chunk itself and other chunks with similar frequencies.
Another reason is that there exist many ties, in which chunks
have the same frequency. How to break a tie during sorting also
affects the frequency rank and hence the inference accuracy of
the tied chunks. In the following, we extend the basic attack
to improve its inference accuracy.
B. Locality-based Attack
We propose the locality-based attack, which exploits chunk
locality [30], [47], [49] to improve the severity of frequency
analysis.
Overview: We ﬁrst deﬁne the notation that captures the notion
of chunk locality. Consider two ordered pairs hCi, Ci+1i and
hMi, Mi+1i of neighboring ciphertext and plaintext chunks in
C and M, respectively. We say that Ci is the left neighbor
of Ci+1, while Ci+1 is the right neighbor of Ci; similar
deﬁnitions apply to Mi and Mi+1. Note that a ciphertext chunk
in C or a plaintext chunk in M may repeat many times (i.e.,
there are many duplicate copies), so if we identify each chunk
by its ﬁngerprint, it can be associated with more than one left
or right neighbor. Let LC and RC be the sets of left neighbors
and right neighbors of a ciphertext chunk C, respectively, and
Our insight
LM and RM be the left and right neighbors of a plaintext
chunk M , respectively.
is that
if a plaintext chunk M of a prior
backup has been identiﬁed as the original plaintext chunk of
a ciphertext chunk C of the latest backup, then the left and
right neighbors of M are also likely to be original plaintext
chunks of the left and right neighbors of C, mainly because
chunk locality implies that the ordering of chunks is likely
to be preserved across backups. In other words, for any
inferred ciphertext-plaintext chunk pair (C, M ), we further
infer more ciphertext-plaintext chunk pairs through the left
and right neighboring chunks of C and M , and repeat the
same inference on those newly inferred chunk pairs. Thus, we
can signiﬁcantly increase the attack severity.
The locality-based attack operates on an inferred set G,
which stores the currently inferred set of ciphertext-plaintext
chunks pairs. How to initialize G depends on the attack
modes (see Section III). In ciphertext-only mode, in which
an adversary only knows C and M, we apply frequency
analysis to ﬁnd the most frequent ciphertext-plaintext chunk
pairs and add them to G. Here, we conﬁgure a parameter
u to indicate the number of most frequent chunk pairs to
be returned (e.g., u = 5 by default in our implementation).
Our rationale is that a small number of top-frequent chunks
often have signiﬁcantly high frequencies (see Figure 1), and
their frequency ranks are relatively stable across backups. This
ensures the correctness of the ciphertext-plaintext chunk pairs
in G with a high probability throughout the attack. On the
other hand, in known-plaintext mode, in which the adversary
knows some leaked ciphertext-plaintext chunk pairs about C
for the latest backup, we initialize G with the set of leaked
chunk pairs.
The locality-based attack proceeds as follows. In each
iteration, it picks one ciphertext-plaintext chunk pair (C, M )
from G. It collects the corresponding sets of neighboring
chunks LC , LM , RC , and RM . We apply frequency analysis
to ﬁnd the most frequent ciphertext-plaintext chunk pairs from
each of LC and LM , and similarly from RC and RM . In
other words, we ﬁnd the left and right neighboring chunks of
C and M that have the most co-occurrences with C and M
themselves, respectively. We conﬁgure a parameter v (e.g.,
v = 30 by default in our implementation) to indicate the
number of most frequent chunk pairs returned from frequent
analysis in an iteration. A larger v increases the number of
inferred ciphertext-plaintext chunk pairs, but it also potentially
compromises the inference accuracy. The attack adds all
inferred chunk pairs into G, and iterates until all inferred chunk
pairs in G have been processed.
Note that G may grow very large as the backup size
increases. A very large G can exhaust memory space. We
conﬁgure a parameter w (e.g., w = 200,000 by default in
our implementation) to bound the maximum size of G.
In our evaluation (see Section V), we carefully examine the
impact of the conﬁgurable parameters u, v, and w.
Algorithm details: Algorithm 2 shows the pseudo-code of
the locality-based attack. It takes C, M, u, v, and w as input,
Algorithm 2 Locality-based Attack
G ← set of leaked ciphertext-plaintext chunk pairs
else if known-plaintext mode then
G ← FREQ-ANALYSIS(FC, FM, u)
end if
T ← G
while G is non-empty do
(FC, LC, RC) ← COUNT(C)
(FM, LM, RM) ← COUNT(M)
if ciphertext-only mode then
1: procedure LOCALITY-BASED ATTACK(C, M, u, v, w)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24: end procedure
Remove (C, M ) from G
Tl ← FREQ-ANALYSIS(LC[C], LM[M ], v)
Tr ← FREQ-ANALYSIS(RC[C], RM[M ], v)
for each (C, M ) in Tl ∪ Tr do
Add (C, M ) to T
if |G| ≤ w (i.e., G is not full) then
if (C, ∗) is not in T then
end while
return T
Add (C, M ) to G
end if
end if
end for
Initialize FX, LX, and RX
for each X in X do
if X does not exist in FX then
Initialize FX[X] ← 0
end if
FX[X] ← FX[X] + 1
if X has a left neighbor Xl then
if Xl does not exist in LX[X] then
Initialize LX[X][Xl] ← 0
end if
LX[X][Xl] ← LX[X][Xl] + 1
end if
if X has a right neighbor Xr then
if Xr does not exist in RX[X] then
Initialize RX[X][Xr] ← 0
end if
RX[X][Xr] ← RX[X][Xr] + 1
25: function COUNT(X)
26:
27:
28: