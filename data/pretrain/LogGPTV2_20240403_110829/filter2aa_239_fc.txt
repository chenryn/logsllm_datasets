在代码隐藏文件中，使用线段绘制折线图。这里，它们可以在代码中使用。通过传递
x轴上显示的时间值的规范化值，缓动函数的Ease方法就返回一个值，显示在y轴上（代码
文件Animation [WPF | UWP]/ EasingChartControl.xaml.cs）：
    private const double SamplingInterval = 0.01;
    public void Draw(EasingFunctionBase easingFunction)
    {
      canvas1.Children.Clear();
      var pathSegments = new PathSegmentCollection();
      for (double i = 0; i 
在WPF中，也可以使用关键帧动画。UWP文件的唯一区别就是EventTrigger没有默认
事件。在WPF中，需要添加RoutedEvent特性，否则XAML代码是相同的（代码文件
AnimationWPF /KeyFrameAnimation.xaml）：
30.8.4 过渡（UWP应用程序）
为方便创建带动画的用户界面，UWP应用程序定义了过渡效果。过渡效果更容易创
建引人注目的应用程序，而不需要考虑如何制作很酷的动画。过渡效果预定义了如下动
画：添加、移除和重新排列列表上的项，打开面板，改变内容控件的内容等。
下面的示例演示了几个过渡效果，在用户控件的左边和右边展示它们，再显示没有过
渡效果的相似元素，这有助于看到它们之间的差异。当然，需要启动应用程序，才能看到
区别，很难在印刷出来的书上证明这一点。
1．复位过渡效果
第一个例子在按钮元素的Transitions属性中使用了RepositionThemeTransition。过渡效
果总是需要在TransitionCollection内定义，因为这样的集合是不会自动创建的，如果没有
使用TransitionCollection，就会显示一个有误导作用的运行时错误。第二个按钮不使用过
渡效果（代码文件TransitionsUWP /RepositionUserControl.xaml）：
RepositionThemeTransition是控件改变其位置时的过渡效果。在代码隐藏文件中，用
户单击按钮时，Margin属性会改变，按钮的位置也会改变。
    private void OnReposition(object sender, RoutedEventArgs e)
    {
      buttonReposition.Margin = new Thickness(100);
      button2.Margin = new Thickness(100);
    }
    private void OnReset(object sender, RoutedEventArgs e)
    {
      buttonReposition.Margin = new Thickness(10);
      button2.Margin = new Thickness(10);
    }
2．窗格过渡效果
PopupThemeTransition和PaneThemeTransition显示在下一个用户控件中。在这里，过
渡效果用Popup控件的ChildTransitions属性定义（代码文件TransitionsUWP 
\
PaneTransitionUserControl.xaml）：
代码隐藏文件通过设置IsOpen属性，打开和关闭Popup控件。这会启动过渡效果（代
码文件TransitionsUWP \ PaneTransitionUserControl.xaml）:
    private void OnShow(object sender, RoutedEventArgs e)
    {
      popup1.IsOpen = true;
      popup2.IsOpen = true;
      popup3.IsOpen = true;
    }
    private void OnHide(object sender, RoutedEventArgs e)
    {
      popup1.IsOpen = false;
      popup2.IsOpen = false;
      popup3.IsOpen = false;
    }
运行应用程序时可以看到，打开Popup和Flyout控件的PopupThemeTransition看起来不
错。PaneThemeTransition慢慢从右侧打开Popup。这个过渡效果也可以通过设置属性，配
置为从其他侧边打开，因此最适合面板，例如设置栏，它从一个侧边移入。
3．项的过渡效果
从项控件中添加和删除项也定义了过渡效果。以下的ItemsControl利用了
EntranceTheme-Transition和RepositionThemeTransition。项添加到集合中时使用
EntranceThemeTransition；重新安排项时，例如从列表中删除项时，使用
RepositionThemeTransition （代码文件TransitionsUWP \ListItemsUserControl.xaml）：
在代码隐藏文件中，Rectangle对象在列表控件中添加和删除。一个ItemsControl对象
没有关联的过渡效果，所以运行应用程序时，很容易看出差异（代码文件TransitionsUWP
\ ListItemsUserControl. xaml.cs）：
    private void OnAdd(object sender, RoutedEventArgs e)
    {
      list1.Items.Add(CreateRectangle());
      list2.Items.Add(CreateRectangle());
    }
    private Rectangle CreateRectangle() =>
      new Rectangle
      {
        Width = 90,
        Height = 40,
          Margin = new Thickness(5),
          Fill = new SolidColorBrush { Color = Colors.Blue }
        };
    private void OnRemove(object sender, RoutedEventArgs e)
    {
      if (list1.Items.Count > 0)
      {
        list1.Items.RemoveAt(0);
        list2.Items.RemoveAt(0);
      }
    }
  注意： 通过这些过渡效果，了解了如何减少使用户界面连续动起来所需的工
作量。一定要查看可用于UWP应用程序的更多过渡效果。查看MSDN文档的Transition
中的派生类，可以看到所有的过渡效果。
30.9 可视化状态管理器
本章前面的“控件模板”中，介绍了如何创建控件模板，自定义控件的外观。其中还缺
了些什么。使用按钮的默认模板，按钮会响应鼠标的移动和单击，当鼠标移动到按钮或单
击按钮时，按钮的外观是不同的。这种外观变化通过可视化状态和动画来处理，由可视化
状态管理器控制。
本节介绍如何改变按钮样式，来响应鼠标的移动和单击，还描述了如何创建自定义状
态，当几个控件应该切换到禁用状态时，例如进行一些后台处理时，这些自定义状态用于
处理完整页面的变化。
对于XAML元素，可以定义可视化状态、状态组和状态，指定状态的特定动画。状态
组允许同时有多个状态。对于一组，一次只能有一个状态。然而，另一组的另一个状态可
以在同一时间激活。例如，WPF按钮的状态和状态组。WPF按钮控件定义了状态组
CommonStates、FocusStates和ValidationStates。用FocusStates定义的状态是Focused和
Unfocused，用组ValidationStates定义的状态是Valid、InvalidFocused和InvalidUnfocused。
CommonStates组定义了状态Normal、MouseOver、Pressed和Disabled。有了这些选项，多
个状态可以同时激活，但一个状态组内总是只有一个状态是激活的。例如，鼠标停放在一
个按钮上时，按钮可以是Focused和Valid。它也可以是Unfocused、Valid和Normal状态。
在UWP应用程序中，按钮控件只定义了CommonStates状态组。WPF定义了MouseOver状
态，但在UWP中，这个状态是PointerOver。还可以定义定制的状态和状态组。
下面看看具体的例子。
30.9.1 用控件模板预定义状态
下面利用先前创建的自定义控件模板，样式化按钮控件，使用可视化状态改进它。为
此，一个简单的方法是使用Microsoft Blend for Visual Studio。图30-32显示了状态窗口，
选择控件模板时就会显示该窗口。在这里可以看到控件的可用状态，并基于这些状态记录
变化。
图30-32
之前的按钮模板改为定义可视化状态：Pressed、Disabled和PointerOver。在状态中，
Storyboard定义了一个ColorAnimation来改变椭圆的Fill属性（代码文件VisualStatesUWP 
/
MainPage.xaml）：