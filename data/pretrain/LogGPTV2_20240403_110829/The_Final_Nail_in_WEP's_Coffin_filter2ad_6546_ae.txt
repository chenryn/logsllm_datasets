# Cumulative Distribution of Packets Required for Cracking 40-bit and 104-bit Keys

The following data points represent the attack time in minutes and the number of packets (in millions) required to crack 40-bit and 104-bit keys using different IV generation methods.

- **Attack Time (min):** 0, 28, 65, 93, 121, 148, 176, 204, 232
- **Number of Packets (millions):** 0, 2, 4, 6, 8, 10, 12, 14, 16

## Figure 8: Cumulative Distribution of Packets Required for Cracking 40-bit and 104-bit Keys

- **Random IV Generator**
- **Real Life**
- **Linear IV Generator**

### Analysis

As the number of packets increases, the time required to load the cracking process and perform the calculations also increases. Therefore, it is not practical to attempt to crack a key in just one minute when a very large number of packets need to be processed.

To obtain a larger dataset, we developed a simulator that generates packets with IVs starting at zero and initiates key cracking periodically. For realistic results, the simulator had to perform weak IV filtering as our test AP did. After some experimentation, we found that the Linksys AP skips IVs according to the filter present in BSD airtools [14].

### Simulation Results

- **40-bit Keys:**
  - Median number of packets required: 1 million
  - With 2 million packets, 80% of the 40-bit keys can be obtained.
  
- **104-bit Keys:**
  - Median number of packets required: 5 million
  - With 10 million packets, 80% of the 104-bit keys can be obtained.
  - The plot for 104-bit keys shows steps after 3 million packets because the simulator models wesside's behavior of initially attempting to crack the key every 100,000 packets, but after 3 million packets, it only attempts to crack the key every million packets.

### Attack Time Estimation

The attack time (top axis) is estimated by dividing the number of packets required by the 1200 p/s flood rate. The key cracking time is included in this value—ten minutes when more than three million packets are needed, one minute otherwise.

- **40-bit Keys:**
  - 50% of the keys are obtained in under 15 minutes.
  
- **104-bit Keys:**
  - 50% of the keys are recovered in less than 80 minutes.

### Random IV Generator

When we modified the simulator to use random IVs, we observed that this greatly assists the cracking process. This is because weak IVs are scattered in clusters across the IV space, and a random strategy provides more varied usable statistics than an incremental strategy.

We believe it should be possible to exploit this effect by causing both the AP and the clients to generate traffic. Assuming the IV counters of the stations are at different phases, the generated packets will cover a larger distribution of IVs, thereby speeding up the cracking process. The most effective way of flooding may be generating local ICMP echos to broadcast or multicast addresses, as all stations should generate a reply. Therefore, the distribution of packets required for recovering a key in practice probably lies between the two curves generated by our simulator, posing an even greater threat.

### Real-Life Validation

To validate our simulation results, we cracked real keys on our AP using wesside. The curves labeled "real life" in Figure 8 show the results, which closely follow the simulation curves. From the 128-bit plot, it is evident that cracking keys in real life requires fewer packets. We believe this difference is due in part to packet loss—wesside sees more of the IV space for the same number of packets received than the simulator does. Covering more IV space, even with missing packets, is a better strategy because of the clustering of weak IVs. Additionally, the x-axis slightly underreports in the real-world case, as some additional packets are received while the cracking process loads data.

## IP Redirection Experience

We also implemented decryption using the AP to graft a new IP header onto the front of an eavesdropped packet. The AP successfully decrypts the eavesdropped data, allowing the now clear-text packet to be forwarded to an Internet host. This technique works perfectly. In fact, we expected we might also have to add a TCP, UDP, or ICMP header in the first fragment to satisfy the NAT in the AP, but this proved unnecessary with the WRT54G base station, which happily forwarded the packets anyway. A proper external firewall might restrict such traffic at some corporate sites, necessitating the addition of extra transport headers to allow this attack to succeed.

IP redirection can occur immediately without needing to know the WEP key or the keystream for a specific IV. Thus, solutions that frequently re-key WEP are still vulnerable. This is the most serious threat that the fragmentation attack poses to WEP. Even though a 104-bit WEP key can be recovered in a couple of hours, a dedicated attacker may be able to decrypt traffic immediately.

## Lessons

The WEP fiasco is a good example of how things can go wrong in the real world when theoretical guidelines are not followed. Preventing keystream reuse really does matter. If it is not prevented, it is possible to build a dictionary of keystreams and decrypt future traffic. Furthermore, it might be possible to use such a keystream to inject data. If a keystream could not be reused in WEP, all the keystream-based attacks presented would not apply, and it would not be possible to replay data.

It is well known that a strong message integrity check is a must to avoid the possibility of forging messages [7]. The keystream expansion techniques would not be feasible if WEP messages included such a check rather than the simple 32-bit CRC.

Fragmentation is used in three ways in our attacks:
1. To transmit arbitrary data.
2. To expand a few bytes of known keystream into an entire MTU.
3. To graft a new header onto an eavesdropped packet while using the AP to decrypt it.

Preventing keystream reuse would prevent all of these. However, relying on a single defense is never ideal, as it only takes one oversight for the entire system to fail. A message integrity check that depends on the key as well as the fragment contents would also be effective against these specific attacks. However, there might still be a risk of replay attacks that splice together replayed fragments from different packets. Thus, an integrity check used to bind fragments together into a packet would also be needed. This too should be obvious—it is the integrity of a packet that matters, not of an isolated fragment.

Finally, the key lesson is that the security of a protocol must be designed in the context of the protocol itself. We showed how a networking property of the 802.11 protocol, namely fragmentation, could be used to break 802.11’s cryptography. The system must be seen as a whole—its security must not be designed in an isolated manner.

WEP is also a good example of how attacks evolve and mature over time. If the threat was eliminated when early researchers discovered WEP’s flaws, there would not be issues today. Instead, because of the perceived impracticality of early attacks, WEP remained widespread. Getting rid of it now is much more difficult than it was in 2000, simply because there are many more networks today.

Walker’s and Simon’s attacks on keystream reuse were never considered a threat. A year later, Arbaugh and Borisov et al. resurrected those attacks by noting the vulnerability in Shared Key authentication. With the weak IV attack, Fluhrer et al. resurrected Wagner’s weak RC4 keys of 1995. In 2004, the high probability weak IVs went public and resurrected the Fluhrer et al. attack. Today, we resurrect the 2000 keystream reuse attacks once more. What will happen? Will vendors disable fragmentation? We presented a linear keystream expansion technique independent of fragmentation. Will vendors disable short packets? Chop-chop can be performed by decrypting from the tail of the packet. There may well be other approaches, perhaps already in use but not publicized. WEP is fundamentally flawed and needs to be totally abandoned rather than trying to win a cat and mouse chase.

## Conclusions

The fragmentation attack proves to be highly practical. From the point where an encrypted packet is eavesdropped, it takes less than a minute to bootstrap to the point where an attacker can send MTU-sized packets and know the IP address range for the local subnet. From this moment, he can redirect encrypted traffic to a host on the Internet, using the AP to decrypt the traffic. From the point of view of secrecy, the wireless network is already completely compromised.

If the ability to receive traffic via the network is also needed, active attacks bootstrapped using the fragmentation attack will recover 40-bit WEP keys in perhaps fifteen minutes and 104-bit WEP keys in an hour or two. WEP networks with low traffic were considered to be "safe" since it would require an attacker to wait many hours, perhaps days, before the key could be recovered. Similarly, solutions that frequently re-key WEP were thought sufficient since the attacker does not have enough time, even by replaying data, to recover the key before it changes. With our attack, however, even in such conditions, traffic may still be injected and redirected almost instantly after a single data packet traverses the network. We believe that the fragmentation attack was the final missing link in providing an efficient and practical mechanism for breaking WEP.

Many lessons have already been learned from WEP’s problems. For example, WPA’s Message Integrity Check, a cryptographic hash function that depends on the key and payload, and its mandatory use of the IV as a sequence number provide improved protection against the sort of packet modification and replay attacks used in the fragmentation attack. In WPA, keystreams may not be reused even when the IV space wraps, as a re-key will occur at that moment.

However, the interaction between fragmentation and encryption has not been widely discussed. In particular, some simple changes to WEP would have made this attack much more difficult, despite WEP’s flawed design. A wireless AP is especially helpful to an attacker when it relays broadcast packets. There is no good reason why the AP needs to relay these packets in any other form than that in which they were received:

- **De-fragmenting before relaying:** The AP unnecessarily allows an attacker to bootstrap from a little knowledge to knowing an entire keystream.
- **Relaying with a different IV from that generated by the attacker:** The AP permits the attacker to expand his knowledge from one keystream to many.
- **De-fragmenting two fragments with unrelated IVs:** The AP allows the attacker to use it to decrypt packets and relay them to arbitrary destinations.

Of course, WEP would still have been a flawed design without these elementary errors. However, we note that the first two errors are preserved in WPA. At least for now, no one seems to have found a way to exploit them.

## Acknowledgments

We are thankful to David Hulton, Anton Rager, and Michael Lynn for providing us with information on this attack. Many thanks to David Wagner who assisted us in revising this paper, Vern Paxson who suggested our title, and Alex Lee who lent us his Atheros card.

## References

[1] W. A. Arbaugh. An Inductive Chosen Plaintext Attack Against WEP and WEP2, 2001.
[2] W. A. Arbaugh, N. Shankar, and Y. J. Wan. Your 802.11 Wireless Network has No Clothes, 2001.
[3] Atheros Communications. Atheros chipset. http://www.atheros.com.
[4] J. Bellardo and S. Savage. 802.11 Denial-of-Service Attacks: Real Vulnerabilities and Practical Solutions. In Proc. USENIX Security Symposium, Washington D.C., August 2003.
[5] A. Bittau. Additional weak IV classes for the FMS attack. 2003. http://www.cs.ucl.ac.uk/staff/a. bittau/sorwep.txt.
[6] A. Bittau. wesside, 2005. http://www.cs.ucl.ac.uk/staff/a. bittau/frag-0.1.tgz.
[7] J. Black and H. Urtubia. Side-channel attacks on symmetric encryption schemes: The case for authenticated encryption, 2002.
[8] N. Borisov, I. Goldberg, and D. Wagner. Intercepting Mobile Communications: The Insecurity of 802.11. In Proc. ACM Mobicom, Rome, Italy, July 2001.
[9] Cisco Systems. Protected Extensible Authentication Protocol (PEAP).
[10] Cisco Systems. Lightweight Extensible Authentication Protocol (LEAP), 2000.
[11] D. Simon and B. Aboba and T. Moore. IEEE 802.11 security and 802.1X, 2000.
[12] C. Devine. aircrack, 2004. http://www.cr0.net:8040/code/network/.
[13] S. Fluhrer, I. Mantin, and A. Shamir. Weaknesses in the Key Scheduling Algorithm of RC4. Lecture Notes in Computer Science, 2259:1–24, 2001.
[14] D. Hulton. bsd-airtools, 2002. http://www.dachb0den.com/projects/bsd-airtools.html.
[15] D. Hulton. Practical Exploitation of RC4 Weaknesses in WEP Environments. Feb 2002. Message to Bugtraq mailing list, http://www.dachb0den.com/projects/bsd-airtools/wepexp.txt.
[16] IEEE. MAC address prefix list (OUI). http://standards.ieee.org/regauth/oui/oui.txt.
[17] IEEE Computer Society. ANSI/IEEE Standard 802.11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, 1999.
[18] IEEE Computer Society. IEEE Standard 802.1X: Port-Based Network Access Control, 2001.
[19] IEEE Computer Society. IEEE Standard 802.11i: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, Amendment 6: Medium Access Control (MAC) Security Enhancements, 2004.
[20] Intersil. Prism2 chipset. http://www.intersil.com/globespanvirata.
[21] J. R. Walker. Unsafe at any key size; an analysis of the WEP encapsulation, 2000.
[22] KoreK. chopchop (Experimental WEP attacks), 2004. http://www.netstumbler.org/showthread.php?t=12489.
[23] KoreK. Next generation of WEP attacks?, 2004. http://www.netstumbler.org/showpost.php?p=93942&postcount=35.
[24] J. Lackey. An Implementation of all possible Weak IV Classes, 2002.
[25] M. Lynn. airjack, 2003. http://sourceforge.net/projects/airjack/.
[26] J. Mogul and S. Deering. Path MTU discovery. RFC 1191 (Draft Standard), Nov. 1990.
[27] A. Rager. WEPWedgie, 2003. http://sourceforge.net/projects/wepwedgie/.
[28] R. L. Rivest. The RC4 Encryption Algorithm. RSA Data Security, Inc., Mar. 12, 1992. (Proprietary).
[29] A. Stubblefield, J. Ioannidis, and A. Rubin. Using the Fluhrer, Mantin, and Shamir Attack to Break WEP. In Proc. Symposium on Network and Distributed System Security, San Diego, California, Feb 2001. Internet Society.
[30] Tim Newsham. Cracking WEP Keys Applying known techniques to WEP Keys, 2001. http://www.lava.net/~newsham/wlan/WEP password cracker.pdf.
[31] D. Wagner. Weak Keys in RC4, 1995. http://www.cs.berkeley.edu/~daw/my-posts/my-rc4-weak-keys.
[32] Wi-Fi Alliance. Wi-Fi Protected Access (WPA). http://www.wi-fi.org.