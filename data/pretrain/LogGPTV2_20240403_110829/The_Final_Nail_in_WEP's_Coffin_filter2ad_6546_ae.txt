n
e
c
r
e
P
 0
 0
28
65
93
121
148
176
204
232
Attack Time (min)
Random IV generator
Real life
Linear IV generator
 2
 4
 6
 8
 10
 12
 14
 16
Number of packets (millions)
Figure 8. Cumulative distribution of packets required for cracking 40 bit (left plot) and 104 bit keys.
million packets because, as the number of packets increases,
the time to load the cracking process and perform the cal-
culations increases. Therefore, it is not sensible to crack for
only one minute when a very large number of packets had
to be processed.
To obtain a larger data set, we developed a simulator. It
generates packets with IVs starting at zero, and initiates key
cracking periodically as described earlier. For the results to
be realistic, the simulator had to perform weak IV ﬁltering
just as our test AP did. After some experimentation, we
discovered that the Linksys AP skips IVs according to the
ﬁlter present in BSD airtools [14].
The results of these simulations are displayed in Fig-
ure 8, with label “Linear IV generator”. With 40-bit keys,
the median number of packets required to crack the key is
one million. With two million packets, 80% of the 40-bit
keys could be obtained. When cracking 104-bit keys, one
would expect to need ﬁve million packets, with 80% of the
104-bit keys obtainable after ten million packets received.
The plot for 104-bit keys contains evident steps after three
million packets. This is because we model wesside’s be-
havior of initially attempting to crack the key every 100,000
packets, but after three million packets have been received,
only attempting to crack the key every million packets.
The attack time (top axis) is estimated by dividing the
number of packets required by the 1200 p/s ﬂood rate ﬁgure.
The key cracking time is also included in this value—ten
minutes when more than three million packets are needed,
one minute otherwise. According to the simulator, 50% of
the 40-bit keys are obtained in under 15 minutes, and half
of the 104-bit keys are recovered in less than 80 minutes.
An interesting result emerged when we changed the sim-
ulator to explore the behavior if IVs are chosen randomly,
which might have been a potential workaround for the dic-
tionary attack. This is shown in Figure 8, under the label
“Random IV generator”. It is clear that choosing random
IVs greatly assists the cracking process. This is because
weak IVs are scattered in clusters across the IV space, and
so a random strategy provides more varied usable statistics
than an incremental strategy.
We believe it should be possible to exploit this effect by
causing both the AP and the clients to generate trafﬁc. As-
suming that the IV counters of the stations are at different
phases, the packets generated will cover a larger distribution
of IVs and speed up the cracking process. From a key re-
covery perspective, the most effective way of ﬂooding may
be generating local ICMP echos to broadcast or multicast
addresses—all stations should generate a reply. Therefore,
the distribution of packets required for recovering a key in
practice probably lies somewhere between the two curves
generated by our simulator, posing even a greater threat than
the results we are presenting.
To validate our simulation results, we cracked real keys
on our AP using wesside. The curves with labels “real
life” in Figure 8 show the results, which indeed closely fol-
low the simulation curves. From the 128-bit plot, it is ev-
ident that cracking keys in real-life requires fewer packets.
We believe that this difference is due in part to packet loss—
wesside sees more of the IV space for the same number
of packets received than the simulator sees. Covering more
IV space, even with missing packets, is a better strategy be-
cause of the clustering of weak IVs. Also the x-axis under
reports slightly in the real-world case, as some additional
packets are received while the cracking process loads data.
4.4. IP Redirection Experience
We also separately implemented decryption using the AP
to graft a new IP header onto the front of an eavesdropped
packet. The AP successfully decrypts the eavesdropped
data, allowing the now clear-text packet to be forwarded to
an Internet host. This technique works perfectly. In fact, we
expected we might also have to add a TCP, UDP or ICMP
header in the ﬁrst fragment to satisfy the NAT in the AP,
but this proved unnecessary with the WRT54G base station,
which happily forwarded the packets anyway. A proper ex-
ternal ﬁrewall might restrict such trafﬁc at some corporate
sites, necessitating the addition of extra transport headers to
allow this attack to succeed.
As IP redirection is performed without needing to know-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
ing either the WEP key or the keystream for a speciﬁc IV, it
may occur immediately. Thus, solutions which frequently
re-key WEP are still vulnerable. This is the most serious
threat that the fragmentation attack poses to WEP. Even
though a 104-bit WEP key can be recovered in a couple
of hours, a dedicated attacker may be able to decrypt trafﬁc
immediately.
5. Lessons
The WEP ﬁasco is a good example of how things can
go wrong in the real world when the guidelines that the-
ory teaches us are not followed. For example, preventing
keystream re-use really does matter. If it is not prevented,
it is possible to build a dictionary of keystreams and de-
crypt future trafﬁc. Furthermore, it might be possible to use
such a keystream to inject data. If a keystream could not be
re-used in WEP, all the keystream based attacks presented
would not apply, and it would not be possible to replay data.
It is well known that a strong message integrity check
is a must, in order to avoid the possibility of forging mes-
sages [7]. The keystream expansion techniques would not
be feasible if WEP messages included such a check rather
than the simple 32-bit CRC.
Fragmentation is used in three ways in our attacks:
to transmit arbitrary data, to expand few bytes of known
keystream into an entire MTU, and to graft a new header
onto an eavesdropped packet while using the AP to decrypt
it. Preventing keystream re-use would prevent all of these.
However, relying on a single defense is never ideal, as it
only takes one oversight for the entire system to fail. A
message integrity check that depends on the key as well as
the fragment contents would also be effective against these
speciﬁc attacks. However there might still be a risk of re-
play attacks that spliced together replayed fragments from
different packets. Thus, an integrity check used to bind frag-
ments together into a packet would also be needed. This too
should be obvious though—it is the integrity of a packet that
matters, not of an isolated fragment.
Finally, the key lesson is that the security of a proto-
col must be designed in the context of the protocol itself.
We showed how a networking property of the 802.11 proto-
col, namely fragmentation, could be used to break 802.11’s
cryptography. The system must be seen as a whole—its se-
curity must not be designed in an isolated manner.
WEP is also a good example of how attacks evolve and
mature over time. If the threat was eliminated when early
researchers discovered WEP’s ﬂaws, there would not be is-
sues today. Instead, because of the perceived impracticality
of early attacks, WEP remained widespread. Getting rid of
it now is much more difﬁcult than it was in 2000, simply
because there are many more networks today.
Walker’s and Simon’s attacks on keystream re-use were
never considered a threat. A year later, Arbaugh, and
Borisov et al. resurrected those attacks by noting the vul-
nerability in Shared Key authentication. With the weak IV
attack, Fluhrer et al. resurrected Wagner’s weak RC4 keys
of 1995. In 2004, the high probability weak IVs went public
and resurrected the Fluhrer et al. attack. Today, we resurrect
the 2000 keystream re-use attacks once more. What will
happen? Will vendors disable fragmentation? We presented
a linear keystream expansion technique which is indepen-
dent of fragmentation. Will vendors disable short packets?
Chop-chop can be performed by decrypting from the tail of
the packet. There may well be other approaches, perhaps
already in use but not publicized. WEP is fundamentally
ﬂawed and needs to be totally abandoned rather trying to
win a cat and mouse chase.
6. Conclusions
The fragmentation attack proves to be highly practical.
From the point where an encrypted packet is eavesdropped,
it takes less than a minute to bootstrap to the point where an
attacker can send MTU-sized packets and know the IP ad-
dress range for the local subnet. From this moment, he can
redirect encrypted trafﬁc to a host on the Internet, using the
AP to decrypt the trafﬁc. From the point of view of secrecy,
the wireless network is already completely compromised.
If the ability to receive trafﬁc via the network is also
needed, active attacks bootstrapped using the fragmentation
attack will recover 40-bit WEP keys in perhaps ﬁfteen min-
utes and 104-bit WEP keys in an hour or two. WEP net-
works with low trafﬁc were considered to be “safe” since
it would require an attacker to wait many hours, perhaps
days, before the key could be recovered. Similarly, solu-
tions which frequently re-key WEP were thought sufﬁcient
since the attacker does not have enough time, even by re-
playing data, to recover the key before it changes. With our
attack however, even in such conditions, trafﬁc may still be
injected and redirected almost instantly after a single data
packet traverses the network. We believe that the fragmen-
tation attack was the ﬁnal missing link in providing an efﬁ-
cient and practical mechanism for breaking WEP.
Many lessons have already been learned from WEP’s
problems. For example, WPA’s Message Integrity Check, a
cryptographic hash function which depends on the key and
payload, and its mandatory use of the IV as a sequence num-
ber provide improved protection against the sort of packet
modiﬁcation and replay attacks used in the fragmentation
attack. In WPA, keystreams may not be re-used even when
the IV space wraps, since a re-key will occur in that mo-
ment.
However, the interaction between fragmentation and en-
cryption has not been widely discussed. In particular, some
simple changes to WEP would have made this attack much
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
more difﬁcult, despite WEP’s ﬂawed design. A wireless AP
is especially helpful to an attacker when it relays broadcast
packets. There is no good reason why the AP needs to relay
these packets in any other form than that in which they were
received:
• By de-fragmenting before relaying,
the AP unnec-
essarily allows an attacker to bootstrap from a little
knowledge to knowing an entire keystream.
• By relaying with a different IV from that generated by
the attacker, the AP permits the attacker to expand his
knowledge from one keystream to many.
• By de-fragmenting two fragments with unrelated IVs,
the AP allows the attacker to use it to decrypt packets
and relay them to arbitrary destinations.
Of course, WEP would still have been a ﬂawed design with-
out these elementary errors. However, we note that the ﬁrst
two errors are preserved in WPA. At least for now, no-one
seems to have found a way to exploit them.
Acknowledgments
We are thankful to David Hulton, Anton Rager and
Michael Lynn for providing us with information on this at-
tack. Many thanks to David Wagner who assisted us in re-
vising this paper, Vern Paxson who suggested our title, and
Alex Lee who lent us his Atheros card.
References
[1] W. A. Arbaugh. An Inductive Chosen Plaintext Attack
Against WEP and WEP2, 2001.
[2] W. A. Arbaugh, N. Shankar, and Y. J. Wan. Your 802.11
Wireless Network has No Clothes, 2001.
[3] Atheros Communications. Atheros chipset. http://www.
atheros.com.
[4] J. Bellardo and S. Savage. 802.11 Denial-of-Service At-
tacks: Real Vulnerabilities and Practical Solutions. In Proc.
USENIX Security Symposium, Washington D.C., August
2003.
[5] A. Bittau. Additional weak IV classes for the FMS at-
tack. 2003. http://www.cs.ucl.ac.uk/staff/a.
bittau/sorwep.txt.
[6] A. Bittau. wesside, 2005. http://www.cs.ucl.ac.
uk/staff/a.bittau/frag-0.1.tgz.
[7] J. Black and H. Urtubia. Side-channel attacks on symmetric
encryption schemes: The case for authenticated encryption,
2002.
[8] N. Borisov, I. Goldberg, and D. Wagner. Intercepting Mobile
Communications: The Insecurity of 802.11. In Proc. ACM
Mobicom, Rome, Italy, July 2001.
[9] Cisco Systems. Protected Extensible Authentication Proto-
col (PEAP).
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
[10] Cisco Systems. Lightweight Extensible Authentication Pro-
tocol (LEAP), 2000.
[11] D. Simon and B. Aboba and T. Moore. IEEE 802.11 security
and 802.1X, 2000.
[12] C. Devine. aircrack, 2004. http://www.cr0.net:
8040/code/network/.
[13] S. Fluhrer, I. Mantin, and A. Shamir. Weaknesses in the Key
Scheduling Algorithm of RC4. Lecture Notes in Computer
Science, 2259:1–24, 2001.
[14] D. Hulton.
bsd-airtools, 2002.
http://www.
dachb0den.com/projects/bsd-airtools.
html.
[15] D. Hulton. Practical Exploitation of RC4 Weaknesses in
WEP Environments. Feb 2002. Message to Bugtraq mail-
ing list, http://www.dachb0den.com/projects/
bsd-airtools/wepexp.txt.
[16] IEEE. MAC address preﬁx list (OUI).
http://
standards.ieee.org/regauth/oui/oui.txt.
[17] IEEE Computer Society.
ANSI/IEEE Standard 802.11:
Wireless LAN Medium Access Control (MAC) and Physical
Layer (PHY) Speciﬁcations, 1999.
[18] IEEE Computer Society.
IEEE Standard 802.1X: Port-
Based Network Access Control, 2001.
[19] IEEE Computer Society. IEEE Standard 802.11i: Wireless
LAN Medium Access Control (MAC) and Physical Layer
(PHY) Speciﬁcations, Amendment 6: Medium Access Con-
trol (MAC) Security Enhancements, 2004.
[20] Intersil.
Prism2 chipset.
http://www.intersil.
com/globespanvirata.
[21] J. R. Walker. Unsafe at any key size; an analysis of the WEP
encapsulation, 2000.
[22] KoreK.
chopchop (Experimental WEP attacks), 2004.
http://www.netstumbler.org/showthread.
php?t=12489.
[23] KoreK.
Next generation of WEP attacks?, 2004.
http://www.netstumbler.org/showpost.
php?p=93942&postcount=35.
[24] J. Lackey. An Implementation of all possible Weak IV
Classes, 2002.
[25] M. Lynn. airjack, 2003. http://sourceforge.
net/projects/airjack/.
[26] J. Mogul and S. Deering. Path MTU discovery. RFC 1191
(Draft Standard), Nov. 1990.
[27] A. Rager. WEPWedgie, 2003. http://sourceforge.
net/projects/wepwedgie/.
[28] R. L. Rivest. The RC4 Encryption Algorithm. RSA Data
Security, Inc., Mar. 12, 1992. (Proprietary).
[29] A. Stubbleﬁeld, J. Ioannidis, and A. Rubin. Using the
Fluhrer, Mantin, and Shamir Attack to Break WEP. In Proc.
Symposium on Network and Distributed System Security,
San Diego, California, Feb 2001. Internet Society.
[30] Tim Newsham. Cracking WEP Keys Applying known tech-
niques to WEP Keys, 2001. http://www.lava.net/
∼newsham/wlan/WEP password cracker.pdf.
//www.cs.berkeley.edu/∼daw/my-posts/
my-rc4-weak-keys.
[31] D. Wagner. Weak Keys in RC4, 1995.
http:
[32] Wi-Fi Alliance. Wi-Fi Protected Access (WPA). http:
//www.wi-fi.org.