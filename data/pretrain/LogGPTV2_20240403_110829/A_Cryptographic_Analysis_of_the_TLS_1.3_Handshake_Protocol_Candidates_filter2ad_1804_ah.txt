More precisely, we can turn any adversary capable of distinguishing the change in this game into an
adversary B7 against the PRF-ODH security of the HKDF.Extract function (keyed with elements from G).
In the reduction, B7 ﬁrst of all obtains Diﬃe–Hellman shares gx and gy. It then asks for a PRF challenge
on 0 and uses the obtained PRF challenge value as HMS in the test session.
In order to derive the
master secret MS = HKDF.Extract(AMS, ES), B7 queries its oracle on (gx, AMS).
In the special case
that AMS = 0, B7 simply sets MS = HMS instead. If necessary, B7 issues a second PRF-ODH query to
derive HMS and MS in the partnered session on diﬀering gy0 6= gy.
the PRF challenge value is random), this bounds the advantage diﬀerence of A as
Providing a sound simulation of either Game C.3 (if the PRF challenge value is real) or Game C.4 (if
AdvGC.3
draft-dh,A ≤ AdvGC.4
draft-dh,A + AdvPRF-ODH
HKDF.Extract,G,B7.
Game C.5. Next, we repeat the step of the previous game, this time replacing the master secret MS
independent string gMS ←$ {0, 1}λ. Again, we bound this step by the advantage of an adversary B8 against
derived in the tested and (potentially) its contributive partner session with a uniformly random and
the PRF-ODH security of HKDF.Extract keyed with elements from G. For this, B8 works similar as in the
previous game, but asks its PRF challenge on label AMS of the test session. Again, B8 uses its PRF-ODH
query to potentially derive HMS and MS in the partnered session on diﬀering gy0 6= gy. Overall, this allows
us to bound this step as
AdvGC.4
draft-dh,A ≤ AdvGC.5
draft-dh,A + AdvPRF-ODH
HKDF.Extract,G,B8.
Game C.6. Next, we replace the handshake traﬃc key tkhs derived in both the tested and its partnered
session by a uniformly random value gtkhs.
13In the proceedings version and an earlier full version of this paper, we claimed this (combined with the subsequent) proof
step can be reduced to the DDH assumption and PRF security of HKDF.Extract. An adversary can however, for a tested
server session, make the contributively partnered client session derive ES with a diﬀerent server-Diﬃe–Hellman share gy0 of its
choice and challenge the simulation by revealing the key tkhs derived from this value. We are not aware of a way to simulate
such Reveal query without the help of an oracle-Diﬃe–Hellman query and hence employ the PRF-ODH assumption here.
29
We can turn any adversary A able to distinguish this change with non-negligible probability into an
adversary B9 against the security of the HKDF.Expand function which we model as a pseudorandom function
(keyed with uniformly random bit strings). We let B9 simulate Game C.5 as the challenger, except that it
uses its PRF oracle for the derivation of tkhs both in the tested and its partnered session. Observe that,
in case the oracle computes the PRF function, this equals Game C.5, whereas, if it computes a random
function, this equals Game C.6. The simulation is sound because the handshake master secret (cid:93)HMS, by
the change in Game C.4, is a random bit string chosen independently of all other values in the game.
We can hence can infer that
AdvGC.5
draft-dh,A ≤ AdvGC.6
draft-dh,A + AdvPRF-sec
HKDF.Expand,B9.
Game C.7. Finally, we replace all HKDF.Expand evaluations using the (replaced) master secret gMS as
key in the tested and its partnered session by a (lazy-sampled) random function. This change aﬀects the
derivation of the handshake traﬃc key tkapp, the resumption master secret RMS, and the exporter master
secret EMS which are hereby replaced with independent random values (cid:93)tkapp, (cid:93)RMS, (cid:93)EMS ←$ {0, 1}λ in the
tested session.
As in the previous step, we can bound the diﬀerence in A’s advantage introduced through this step by the
PRF security of HKDF.Expand, again deﬁned for keys being uniformly random bit strings from {0, 1}λ.
the key gMS in the tested and its partnered session. Depending on the oracles behavior, this perfectly
To this extent, the reduction B10 as above uses its PRF oracle for all evaluations of HKDF.Expand under
simulates either Game C.6 or Game C.7, as gMS is a uniformly random and independent bit string and
diﬀerent labels are used in the derivation of tkapp, RMS, and EMS.
We can hence can infer that
AdvGC.6
draft-dh,A ≤ AdvGC.7
draft-dh,A + AdvPRF-sec
HKDF.Expand,B10.
In Game C.7, the session keys gtkhs and (cid:93)tkapp as well as the resumption and exporter master secrets (cid:93)RMS
and (cid:93)EMS are now chosen independently and uniformly at random. As the response to its Test query is
hence independent of the test bit btest, the adversary A cannot distinguish whether it is given the real key
or (another) independently chosen random value and thus
AdvGC.7
draft-dh,A ≤ 0.
Combining the various bounds implied by the above sequence of game transitions yields the stated
security bound.
Remark.
In our analysis we do not rely on AMS to be included in the extraction step for deriving MS.
In fact, our proof even allows for AMS = 0 such that MS and HMS are identical. The reason why this does
not harm the security is that the server’s signature already authenticates the temporary key, and that all
keys derived from MS resp. HMS use diﬀerent input labels for the pseudorandom functions.
7 Composition
Key exchange protocols are in general of very limited use when considered on their own. Typically, such
protocols are deployed as a preliminary step followed by a symmetric-key protocol (e.g., the record layer
protocol in case of TLS 1.3) that makes uses of the established shared secret keys. As shown in previous
30
full handshake
tkhs
tkapp
RMS
EMS∗
record protocol
record protocol
resumption handshake
generic usage
Figure 4: Illustration of the composition result applications in our analysis of the TLS 1.3 drafts. Derived keys are connected
to the handshake by solid lines, their usage in protocols is indicated by an arrow. Dashed boxes indicate an application of
the composition result to the usage of a speciﬁc derived (ﬁnal) key in a symmetric-key protocol.
∗Note that a separate exporter master secret EMS is derived only in the draft-dh draft.
work by Brzuska et al. [BFWW11] for Bellare–Rogaway-secure key exchange protocols and by Fischlin
and Günther [FG14] for Multi-Stage-secure key exchange protocols, such composition can be proven to be
generically secure under certain conditions.
The latter (multi-stage) result however is not yet readily applicable to the setting of TLS 1.3, as
it requires the multi-stage key exchange protocol to provide—apart from key independence and forward
secrecy, which TLS 1.3 satisﬁes—mutual authentication and a public session matching. For authentication,
Fischlin and Günther state only informally how the composition theorem can be adapted to the unilateral
authentication case and furthermore do not treat unauthenticated key exchange (stages). Public session
matching moreover requires that, informally, an eﬃcient algorithm eavesdropping on the communication
between the adversary and the key exchange security game is able to determine the partnered sessions in
the key exchange game. Since it is necessary to deﬁne session identiﬁers (and, hence, partnering) over the
unencrypted messages exchanged in the TLS 1.3 handshake to achieve key independence (see Sections 5
and 6), partnering of sessions is no longer publicly decidable from the (encrypted) key exchange messages.
We therefore need to strengthen the previous composition result for multi-stage key exchange pro-
tocols [FG14] to cover, ﬁrst, key exchange sessions and stages which are only unilaterally authenticated
or completely unauthenticated, and, second, protocols that do not allow for a public session matching,
but for one where session partnering at a certain stage i is deducible given all stage-j keys for j < i.
Jumping ahead, knowledge of earlier stages’ keys can be taken for granted as such keys can be revealed
without impairing the chances of winning in a key-independent setting, which is in any case required for
composition. In particular, as both achieve key independence, the analyzed TLS 1.3 handshake drafts are
amenable to our composition result.
7.1 Preliminaries
Before we present our composition result we recap, partially verbatim, the syntax of composed games
introduced by Brzuska et al. [BFWW11, Brz13] and extended by Fischlin and Günther [FG14] for the
purpose of formal reasoning about composition of (multi-stage) key exchange and symmetric-key protocols,
broadening its scope to encompass composition with arbitrarily authenticated multi-stage key exchange
stages. Furthermore, we recap their notion of session matching and strengthen it to capture the non–
public-partnering case.
Composed games for multi-stage key exchange. Let GKE be a game modeling security for a (multi-
stage) key exchange protocol KE, and GΠ a security game for some symmetric-key protocol Π. Fix some
index i of a stage for the moment and keys derived in this stage only; the composition with protocols run
on keys for other stages will follow from this via the possibility to Reveal such keys. We deﬁne GKEi;Π as
31
the security game for the composition KEi; Π of KE and Π where, whenever a session key Ki is accepted in
stage i of KE where each of the two sessions involved either are authenticated or contributed honestly to the
derived key14, this key Ki is registered as a new key in the symmetric-key protocol game GΠ, allowing the
adversary to run Π-sessions with this key (and all previously registered keys). Observe that compositional
security can obviously only be guaranteed when the adversary does not know the derived session key,
which we require the key exchange protocol to ensure whenever both sides of the key exchange are either
authenticated or honest in their contribution. In particular, if a session key is derived in a key exchange
involving an unauthenticated party whose key contribution was not simulated by the challenger, we must
expect that the adversary controls this party to an extent where it holds the derived session key—and
hence cannot require any security property of the symmetric-key protocol to hold for such a session key.
In GKEi;Π, the adversary’s task is to break the security of Π by winning in the subgame GΠ given access
to both the queries of GKE and GΠ, which the composed game essentially just relays to the appropriate
subgame. Exceptions to this are the key registration queries of GΠ (that are only executed by the composed
game to register stage-i keys within GΠ whenever such a key has been accepted), the Reveal query of GKE
(which the adversary is not allowed to query for stage-i keys in the composed game15, as session key
compromise for these keys is—if at all—captured in GΠ), and the Test query of GKE (being only of
administrative purpose for GKE). The adversary wins in the composed game, if it, via its queries, succeeds
in the subgame GΠ.
Multi-stage session matching. As established by Brzuska et al. [BFWW11], session matching is both a
necessary and suﬃcient condition for the composition of Bellare–Rogaway-secure key exchange and generic
symmetric-key protocols. They moreover observe that such a matching might not be (eﬃciently) com-
putable in certain cases, e.g., if the key exchange messages are encrypted using a (publicly) re-randomizable
cipher, but partnering is deﬁned over the unencrypted messages.
The latter restriction becomes particularly relevant in the multi-stage setting, as key exchange protocols
may—and TLS 1.3 does—use keys of previous stages to encrypt later stages’ messages. In such cases,
session matching based on the public transcript may not be feasible anymore; this especially holds for the
case of TLS 1.3. We can however leverage that key independence is already a prerequisite for composition
in the multi-stage setting and hence, when targeting the keys of a certain stage, revealing the keys of
previous stages is of no harm in the key exchange game. Therefore, we can strengthen session matching
in the multi-stage setting to obtain also the session keys Kj for all stages j < i when determining the
partnering for stage i. We moreover extend session matching to comprise not only the session identiﬁers
but also the newly introduced contributive identiﬁers.
Formally, we deﬁne multi-stage session matching as follows.
Multi-Stage,D
KE,A
Definition 7.1 (Multi-stage session matching algorithm). A multi-stage session matching algorithm M
for a key exchange protocol KE is an eﬃcient algorithm for which the following holds for any adversary A
playing in the Multi-Stage security game G
of KE. On input a stage i, the public parameters of
the game, an ordered list of all queries made by A and responses from G
at any point of the
game execution, and, for all sessions, a list of all stage-j keys (for any j < i) accepted at this point, M
outputs two lists of pairs of all sessions in stage i, the ﬁrst list containing exactly those pairs sharing the
14More formally, we consider stage-i keys which are accepted in a session label that either talks to an authenticated
communication partner (i.e., label.authi = mutual or label.authi = unilateral and label.role = initiator) or has an honest
contributing partnered session (i.e., there exists a session label0 with label.cidi = label0.cidi).
15Note however that keys in stages diﬀerent from i, not being used for Π, are still accessible via Reveal queries in GKEi;Π,
which makes our result also cover concurrent composition with one (or several) of such protocols using the (diﬀerent) keys
from multiple, forward-secret stages.
Multi-Stage,D
KE,A
32
same session identiﬁer sidi (i.e., being partnered), and the second list exactly those pairs sharing the same
contributive identiﬁer cidi at this point of the game execution.
If such an algorithm exists for a key exchange protocol KE, we say that KE allows for an eﬃcient
multi-stage session matching.
7.2 Compositional Security
We can now provide our extended composition result for multi-stage key exchange: the composition KEi; Π
of a multi-stage key exchange protocol KE with an arbitrary symmetric-key protocol Π employing the stage-
i session keys of KE is secure if the key exchange is Multi-Stage-secure providing key independence, stage-j
forward secrecy (for j ≤ i), multi-stage session matching, and the stage-i keys are ﬁnal. With ﬁnal keys in
stage i (or: ﬁnal stages i) we refer to those keys established after the last key exchange message has been
exchanged (in TLS 1.3 this comprises keys tkapp, RMS, and (in draft-dh) EMS).16 Note that keys derived
prior to the ﬁnal message exchange might be used in generating some key exchange messages and are thus
not amenable to truly generic composition: such keys cannot provide security in, e.g., a symmetric-key
protocol Π whose security is deﬁned as an adversary being unable to forge a TLS 1.3 key exchange message
(as an adversary can simply replay such a message from the key exchange in the composed game).17
Observe that we, in contrast to the previous composition result [FG14], do not require a particular
level of authentication, but instead show compositional security for any concurrent authentication proper-
ties AUTH of KE. We remark again that, as captured in the composed game for multi-stage key exchange,
security in the symmetric-key protocol Π can naturally be guaranteed only in those cases where the two
parties who derived the session key are either authenticated or honestly contributed to the derived key,
since otherwise we expect the adversary to know the key (e.g., by playing the role of an unauthenticated
client) and cannot hope for any security.
Theorem 7.2 (Multi-stage composition). Let KE be a key-independent stage-j-forward-secret Multi-Stage-
secure key exchange protocol with concurrent authentication properties AUTH and key distribution D that
allows for eﬃcient multi-stage session matching. Let Π be a secure symmetric-key protocol w.r.t. some
game GΠ with a key generation algorithm that outputs keys with distribution D. Then the composition
KEi; Π for ﬁnal stages i ≥ j is secure w.r.t. the composed security game GKEi;Π. Formally, for any eﬃcient
adversary A against GKEi;Π there exist eﬃcient algorithms B1,B2,B3 such that
+ AdvGΠ
KE,B1 + ns · AdvMulti-Stage,D
KEi;Π,A ≤ AdvMatch
AdvGKEi;Π
KE,B2
Π,B3,
where ns is the maximum number of sessions in the key exchange game.
Proof of Theorem 7.2. The proof basically is an adaptation of the one for multi-stage composition by
Fischlin and Günther [FG14], which in turn proceeds along the lines of the Bellare–Rogaway composition
result by Brzuska et al. [BFWW11].
As a technical prerequisite, we ensure that the key exchange protocol KE in the composed game GKEi;Π
always outputs the same key Ki for two partnered sessions in stage i. This basic property is given by Match
security (which is subsumed under requiring Multi-Stage security from KE) and hence we can easily turn
an adversary A that triggers diﬀerent keys to be output in partnered sessions in the key exchange part of