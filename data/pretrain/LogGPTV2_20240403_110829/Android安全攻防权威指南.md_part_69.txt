和CharlieMiller在USENIX会议的第三届攻击技术研讨会（WOOT）上发表论文“InjectingSMS
Messages into Smart Phones for Vulnerability Analysis”（《基于 SMS 消息注人技术的智能手机漏洞
分析》）.介绍了在iOS、Windows Phone 和Android上的相关工作。这篇论文的原文参阅
http://www.usenix.org/events/woot09/tech/ful_papers/mulliner.pdf。在文章中，两位作者开发了名为
Injectord 的工具，用于注入rild进行中间人攻击。Injectord 的源码见http://www.mulliner.org/
sccurity/sms/以及本书的附带材料。
在测试设备HTC OneV中，rild 使用了名为/dev/smdo 的串行设备文件。在这里，Injectord
主要充当代理者，打开这个串行设备，并向rild提供一个新的串行设备。Injectord从伪装的申行
设备中读取rild发来的指令，将其转发给原本与调制解调器相连的串行设备。一且从原来的设备
读取到回复数据，lnjcctord就会将这些数据写人伪装的串行设备从面转发给rild。
为了骗rild使用伪装的串行设备，先将原来的/dev/smdo设备改名为/dev/smd0real，然后
Injectord会创建一个名为/dev/smdo的伪装设备，这样rild就会使用新的伪装设备。在Linux中，
设备文件的文件名对内核来说其实并不重要，因为内核只关心设备的类型以及主编号（表示设备
类型）和次编号（表示设备分区号）。具体操作步骤如下：
mv /Gev/smd0 /dev/smd0rea1
/data/local/tnp/injectord
ki11 -9 
Injectord在运行中会记录下蜂窝基带和rild之间的所有通信。下面是手机向基带发送SMS
时的日志示例：
read 11 bytes from r11d
AT+CMGS=22
read 3 bytes from sado
read 47 bytes from ri1d
---
## Page 311
11.3与调制解调器进行交互295
0001000e8100947167209508000009c2f77b0da297e774
read 2 bytes from smd0
read 14 bytes frcm smd0
0
第一条指令告诉调制解调器SMSPDU的长度，在本例中是22字节。接下来调制解调器回复
一个>符号表示已经准备好接收 SMS 消息，所以rild在下一行发出以十六进制编码的 SMS PDU
数据（44字符）。最后，调制解调器回复收到了该SMS消息。通过分析Injectord的日志，可以
高效地学习AT指令集，包括某些非标准vendor-ril与调制解调器的通信过程。
2.SMS送达手机的过程
我们的主要目标是模拟SMS从移动网络送达Android电话栈的过程。具体来说，重点关注
SMS消息是如何从调制解调器发到rild的。GSMAT指令集定义了基带和电话栈之间的两种交互
模式：指令-应答式交互和主动响应式交互。指令-应答式交互是电话栈发出一个对基带的指令，
基带立即作出应答；主动响应式交互则是当移动网络传来一个事件时，基带进行一次主动响应式
交互。从基带把SMS消息传给电话栈，用的就是第二种模式；拨入的语音通话也用第二种方式
通知。下面是AT主动响应的一个示例，它由Injectord工具噢探一条SMS消息的接收过程得到。
CMT:,53
0404143944025C8721BA47CCFD1F53028091A87DD273A88FC06D1D16510BDCC1EBF41P437399C07
0891945111325476F8040D91947187674523F10000012
第1行是主动响应的名称+CMT以及消息的字节长度。第2行是十六进制编码的消息内容。
最后，电话栈发出一条AT指令，通知基带已经收到了这条主动响应消息。
11.3.2在Android中对SMS进行模糊测试
了解Android电话栈和rild的工作原理之后，就可以基于这些知识在Android上进行SMS模
期测试了。首先，需要用之前学到的SMS格式生成SMS消息的测试用例。接下来，使用Injectord
的消息注入功能将这些测试用例发给测试手机。与此同时，需要监控手机中的崩溃情况。最后，
搜集崩溃记录，并对这些崩溃情况进行分析和验证。本节将介绍如何完成这些步骤。
1.生成SMS消息
前面已经介绍过SMS消息的格式，现在可以开始生成海量SMS消息用于对Android电话栈
的模期测试。第6章介绍了模棚测试的方法：因此本章只讨论将其用于SMS会有哪些不同之处。
开发模榭器时需要用到其他领域的各类知识，SMS就是一个很好的例子。在SMS消息中，
许多字段不能包含无效的值，因为现实中的SMS消息会经过SMSC的检查，然后传入移动运营
商后台系统。如果包含无效的字段，这条消息根本不会被SMSC接受。
下面看一个UDH的模器。前面已经介绍过UDH，它使用了一种简单的TLV编码格式，
很适合作为简单的练习。下面的Python脚本基于一个创建SMS 消息的开源库编写，该库可以在
本书的附带材料中找到，也可以在网上下载：http://www.mulliner.org/security/sms/。这个脚本生
---
## Page 312
296
第11章攻击RIL无线接口层
成包含1到10个UDH元素的SMS消息。每个元素的类型和长度都是随机的，面具体的消息内
容则由随机的数据来填充。最后生成的消息会被保存在一个文件中，随后发送到测试目标。运行
这个脚本所需的所有import文件都可以在SMS库中找到。
1/usr/bin/python
import os
inport socket
import sys
import tine
Import tti1e
import SMSPuzzData
import sns
inport randon
from datetime import Gatetime
Lnport fuzzutils
def udhrandfuzz (msisdn, smsc, ts, num) 1
S = SMS,SMSToMS ()
s._maisdn_type = 0x91
s._nsisdn = msisdn
S._snsc · snsc
8._msc_type = 0x91
s._tpdcs = random.randrange(0, 1)
s._tppid = 0x00
if s._tpdcs = 11
s._tpdcs = 0x04
s._timestamp = ts
s._deliver = 0x04
8,deliver_raw2flags()
s ._deliver_udhf = 1 
s.deliver_flags2raw()
8._nsg = *
0 =fut5su"·s
8._udh = *
for 1 in range(0,num) :
tu = chr (randon.randrange(0, Oxff))
if s._udh_leng + tul > 138:
tul = random.randrange (1,132)
tud = SMSPuzzData getSHSPuzzData ()
break
8._udh = s._udh + tu + chr(tul) + tud[:tul]
if s._udh_1eng > 138:
s._udh_leng = len(s._udh)
break
8 ._msg_leng = 139 - s._udh_1leng
Lf s._meg_1eng > 01
8 ._m8g_1eng = random.randrange(int (8 ._msg_leng / 2), s._msg_leng)
if s._msg_leng > 0:
tud = SMSPuzzData getSMSPuzzData ()
[fuet5su"·e:]pnq = Bsu"·s
else1
---
## Page 313
11.3与调制解调器进行交互
297
8._nsg_leng = 0
() epooue*s
return s-_pdu
ue.ue T
for i in range(0, int(sys,argv[11)):
out = []
ts = Uti1s.hex2bin(*99309251619580*,0)
rnd = random.randrange(1,10)
nsg = udhrandfuzz(*4917787654321°,*49177123456*, ts, rnd)
1ine = Ut11e.bin2hex(msg, 1)
1eng = (1en(1ine) / 2) - 8
out,append ( (1ine, 1eng1)
fuzzutils,cases2file(out, 8y8.argv[2])
下面是用这个随机UDH生成器制造出来的一些消息示例。下一节将介绍如何向任意运行
Injectord的手机发送这些消息。
07919471173254F6440D91947187674523F1784699309251619580837AP
314222722272227222722272227222722272227222782623B3B3B3B3B3B
3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B
3838383B3B3B3B3B3B3B3B3B383B3B383B3B3B3B3B3B3B3B3B3B3B3B3B3B
3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B
383B8EBBA78E928494C6 151
07919471173254F6440D91947187674523F138EA993092516195808A744872606060606060606060
09090909090909090909090909090909090909090909090909090909090909090909090909090909
6060606060606060606060606060606060606060606060606060606060606060 6060606060 606060
181818181818 158
60606060606060606060606060606060606060606060606060181818181818181818181818181818
07919471173254F6440D91947187674523F1DE76993092516195806D392B375E5E5E5E5E5E5E585E
5E5E585E5E585858585858585E58585858585858585858585858585858585E5E5E5E5E5E5E5E5E5E
SE5E5E5E5E5E1F1F1F1F1F1F1F1F1F1F1F1F1F1F1P1F1P1P1F1P1P1P1P1P1P1P1P1P1P1PLPLFLFLF
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F 129
07919471173254F6440D91947187674523F10BA3993092516195807F337B293B3B3B3B3B3B3B3B3B
5c5csc5c5c5c5c5c5c5c5c5csc5c5csc5c5c5c5csc5c5c5c5csc5cscsc5cscscscsc5cscsc5c5c5c
3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B383B3B3B3B3B3B3B3B3B3B3BD0060F0F0F0F0F0F
2.用Injectord注入SMS 消息
现在介绍消息注入的工作原理。Injectord监听TCP4242号端口，等待收到一条完整的+CMT
消息。这条消息应该由两行文本构成：第1行是+CMT及其长度，第2行是十六进制编码的SMS
消息。这条消息会被注人rild所使用的虚假申行设备中去。收到消息后，rild会对调制解调器进
行应答来确认。为了防止调制解调器产生问题，Injectord会拦下这些确认指令。
下面这个简单的Python程序将一条SMS 消息发送给运行在HTCOne V手机上的Injectord
其中的sendmsg函数的参数包括目标IP地址、信息内容、信息长度（用于+CMr）以及回车换行
（CRLF）类型。由于AT指令集使用的是基于文本行的协议，每一行都需要一个明确的标志来指
---
## Page 314
298第11章攻去RIL无线接口层
示它的结尾，从而表明这条指令已经收发完成，可以进一步解析。可以使用回车（CR）或者换
行（LF）作为其终结符、但是在AT通信中使用哪个组合取决于具体的调制解调器。
 use erlftype = 3 for Hrc One V
def sendmsg (dest_ip. msg, msg_cmt, crlftype = 1) :
if crlftype "* 1:
error = 0
buffer = *+CMT: ,&d\r\n8s\r\n* & (msg_cmt, msg)
elif erlftype = 2:
buffer = *\n+CMr: , ed\nts\n*  (msg_cmt, nsg)
ellf erlftype == 3:
buffer =*\n+CHr:,ed\rnks\r\n* (m8g_cmt, nsg)
so = socket ,socket (socket.AF_INET, socket .SOCK_STREAK)
try:
so.connect((dest_ip, 4223))
except :
error = 1
1Ax
so .send (buffer)
except :
so,close()
error = 2
return error
3.监控测试自标
如果不监控测试目标的状态，只进行模糊测试是毫无意义的，因为无法通过观察手机屏幕来
判断是否发生了崩溃。此外，还需要将整个测试过程自动化，只研究可以导致某种崩溃的测试用
例。因此，必须在进行模期测试的同时监控手机的状态，还要不时重启SMS软件来降低测试的
副作用，比如由于反复处理之前的测试用例而导致崩溃。可以用ADB工具来监控Android手机
中电话栈和SMS栈的前溃情况，基本方法如下：先使用前面的Python函数sendmsg发送一条
SMS消息到手机中运行的Injectord上；这条SMS 消息被注入后，通过ADB的1ogcat指令来
获取Android系统日志。如果该日志中包含native层崩溃或Java层异常的信息，就将当前测试用
例的1ogcat输出和相应的SMS消息保存下来。每跑完一个测试用例就清理一次系统日志，然
后跑下一个。每处理完50条SMS消息，就清空手机中的SMS数据库，然后重启SMS程序。下
面的Python代码实现了这些操作：