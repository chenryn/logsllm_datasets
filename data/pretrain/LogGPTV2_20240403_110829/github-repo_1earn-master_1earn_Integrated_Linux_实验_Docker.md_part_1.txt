# Docker
> 笔记大部分内容来自 [docker_practice](https://github.com/yeasy/docker_practice) ,仅做内容排版修改
> 部分内容由 [xidaner](https://github.com/xidaner) 提供,仅做部分内容排版修改
---
**常见报错**
- Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
  ```bash
  systemctl daemon-reload
  service docker restart
  ```
- docker timeout
  ```bash
  echo "nameserver 8.8.8.8" > /etc/resolv.conf
  sudo systemctl daemon-reload
  sudo systemctl restart docker
  ```
- 容器 "Exited (0)" 自动退出
  - 有时镜像内置的执行命令无法正确执行，于是容器就 Exited 了
  - 尝试在 docker run 命令最后加上或删除 /bin/bash 选项
---
## 镜像
**镜像管理**
```bash
docker search [keyword]                           # 搜索镜像
docker image ls                                   # 查看已下载的镜像列表
docker image rm [docker_image_id]                 # 删除本地的 docker 镜像
```
**镜像体积**
docker image ls 标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。
比如，ubuntu:18.04 镜像大小，显示是 63.3MB，但是在 Docker Hub 显示的却是 25.47 MB。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 docker image ls 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。
另外,docker image ls 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。
```bash
docker system df        # 查看镜像、容器、数据卷所占用的空间
```
**虚悬镜像**
镜像列表中，可能存在一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 ``。
这种镜像原本是有镜像名和标签的，比如原来为 mongo:3.2，随着官方镜像维护，发布了新版本后，重新 docker pull mongo:3.2 时，mongo:3.2 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 。除了 docker pull 可能导致这种情况，docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为  的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可以用下面的命令专门显示这类镜像：
```bash
docker image ls -f dangling=true
```
一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。
```bash
docker image prune
```
**中间层镜像**
为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 docker image ls 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。
```bash
docker image ls -a
```
这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。
### commit 编辑镜像
```bash
docker run --name web1 -d -p 80:80 nginx
```
这条命令会用 nginx 镜像启动一个容器，命名为 web1，并且映射了 80 端口，这样我们可以用浏览器去访问这个 nginx 服务器。如果是在本机运行的 Docker，那么可以直接访问：http://localhost ，如果是在虚拟机、云服务器上安装的 Docker，则需要将 localhost 换为虚拟机地址或者实际云服务器地址。
直接用浏览器访问的话，我们会看到默认的 Nginx 欢迎页面。
我们修改这个默认的页面，然后进行保存，首先进入容器
```bash
docker exec -it web1 /bin/bash
curl 127.0.0.1
echo 'Just test!' > /usr/share/nginx/html/index.html
curl 127.0.0.1
exit
```
我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 docker diff 命令看到具体的改动。
```
docker diff web1
```
当运行一个容器的时候（如果不使用卷的话），任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 docker commit 命令，可以将容器的存储层保存下来成为镜像。
就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。
用下面的命令将容器保存为镜像
```bash
docker commit --author "zhangsan" --message "修改了默认网页" web1 nginx:v2
```
现在可以在 docker image ls 中看到这个修改过的镜像：
```bash
docker image ls nginx
```
可以用 docker history 具体查看镜像内的历史记录，如果比较 nginx:latest 的历史记录，我们会发现新增了我们刚刚提交的这一层。
```bash
root@debian-gnu-linux-10:~# docker history 0c245efcceb8
IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
0c245efcceb8   50 seconds ago   nginx -g daemon off;                            1.25kB    修改了默认网页
eeb9db34b331   2 months ago     /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B
      2 months ago     /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B
      2 months ago     /bin/sh -c #(nop)  EXPOSE 80                    0B
      2 months ago     /bin/sh -c #(nop)  ENTRYPOINT ["/docker-entr…   0B
      2 months ago     /bin/sh -c #(nop) COPY file:09a214a3e07c919a…   4.61kB
      2 months ago     /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB
      2 months ago     /bin/sh -c #(nop) COPY file:0b866ff3fc1ef5b0…   1.96kB
      2 months ago     /bin/sh -c #(nop) COPY file:65504f71f5855ca0…   1.2kB
...
root@debian-gnu-linux-10:~# docker history eeb9db34b331
IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT
eeb9db34b331   2 months ago   /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B
      2 months ago   /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B
      2 months ago   /bin/sh -c #(nop)  EXPOSE 80                    0B
      2 months ago   /bin/sh -c #(nop)  ENTRYPOINT ["/docker-entr…   0B
      2 months ago   /bin/sh -c #(nop) COPY file:09a214a3e07c919a…   4.61kB
      2 months ago   /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB
      2 months ago   /bin/sh -c #(nop) COPY file:0b866ff3fc1ef5b0…   1.96kB
      2 months ago   /bin/sh -c #(nop) COPY file:65504f71f5855ca0…   1.2kB
...
```
新的镜像定制好后，我们可以来运行这个镜像。
```
docker run --name web2 -d -p 81:80 nginx:v2
docker exec -it web2 /bin/bash
curl 127.0.0.1
```
### Dockerfile
镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。
Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。
还以之前修改 nginx 镜像为例，这次我们使用 Dockerfile 来定制。
在一个空白目录中，建立一个文本文件，并命名为 Dockerfile：
```bash
mkdir mynginx && cd mynginx
vim Dockerfile
FROM nginx
RUN echo 'Just test!' > /usr/share/nginx/html/index.html
```
**FROM 指定基础镜像**
所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 FROM 就是指定 基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。
在 dockerhub 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 nginx、tomcat、php 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 python、go 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。
如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 ubuntu、alpine 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。
如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。
不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM scratch 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。
**RUN 执行命令**
RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：
- shell 格式：RUN ，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。
    ```dockerfile
    RUN echo 'Hello, Docker!' > /usr/share/nginx/html/index.html
    ```
- exec 格式：RUN ["可执行文件", "参数1", "参数2"]，这更像是函数调用中的格式。既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：
    ```dockerfile
    FROM debian:stretch
    RUN apt-get update
    RUN apt-get install -y gcc libc6-dev make wget
    RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz"
    RUN mkdir -p /usr/src/redis
    RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
    RUN make -C /usr/src/redis
    RUN make -C /usr/src/redis install