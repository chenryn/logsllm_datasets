**作者：Joey@天玄安全实验室**  
**原文链接：**
## 前言
第一次分析EPS类漏洞，对于PostScript格式十分陌生，通过查阅[PostScript LANGUAGE
REFERENCE](https://www.adobe.com/content/dam/acom/en/devnet/actionscript/articles/PLRM.pdf)了解PostScript格式。调试EXP来自kcufld师傅的[eps-CVE-2017-0261](https://github.com/kcufId/eps-CVE-2017-0261)，EXP在Office
2007可以正常运行，但在Office 2010以上版本需要配合提权漏洞逃逸沙箱后完成利用。
### 调试环境
调试是直接使用kcufld师傅的eps加载器进行调试，EPSIMP32.FLT版本信息如下：
    OS:                 Win7 x64 SP1
    Office:             Ofiice 2007 x86
    Image name:         EPSIMP32.FLT
    ImageSize:          0x0006E000
    File version:       2006.1200.4518.1014
    Product version:    2006.1200.4518.0
### PostScript格式简介
先介绍下PostScript基本的数据结构：
SIMPLE OBJECTS | COMPOSITE OBJECTS  
---|---  
boolean | array  
fontID | dictionary  
integer | file  
mark | gstate (LanguageLevel 2)  
name | packedarray (LanguageLevel 2)  
null | save  
operator | string  
real |  
左侧为简单对象，右侧为复合对象。简单对象都是原子实体，类型、属性和值不可逆转地结合在一起，不能改变。但复合对象的值与对象本身是分开的，对象本身存储于操作栈中，具体的结构如下：
    // PostScript Object
    struct PostScript object
    {
        dword    type;      //对象类型      
        dword    attr;      
        dword    value1;    //指向对象所属变量名称
        dword    value2;    //若为简单对象，直接指向值；若为复合对象，指向存储的值的结构
    }ps_obj;
其中部分type的值与类型的映射如下：
type值 | 数据类型  
---|---  
0x0 | nulltype  
0x3 | integertype  
0x5 | realtype  
0x8 | booleantype  
0x10 | operatortype  
0x20 | marktype  
0x40 | savetype  
0x300 | nametype  
0x500 | stringtype  
0x900 | filetype  
0x30000 | arraytype  
0x70000 | packedarraytype  
0x0B0000 | packedarraytype  
0x110000 | dicttype  
0x210000 | gstatetype  
接着介绍下漏洞中使用到的比较关键的操作符的意义：
操作符 | 示例 | 解析  
---|---|---  
forall | array proc forall | 枚举第一个操作数的元素，为每个元素执行过程
proc。如果第一个操作数是数组、压缩数组或字符串对象，则 forall 将一个元素压入操作数堆栈，并对对象中的每个元素执行 proc，从索引为 0
的元素开始并依次执行。  
dup | any dup ---> any any | 复制操作数堆栈上的顶部元素。 dup 只复制对象；复合对象的值不是复制而是共享的。  
putinterval | array1 index array2 putinterval |
用第三个操作数的全部内容替换第一个操作数的元素的子序列。被替换的子序列从第一个操作数的 index 开始；它的长度与第三个操作数的长度相同。  
put/get | array index any put/get |
替换/获取第一个操作数的一个元素的值。如果第一个操作数是一个数组或一个字符串，put/get将第二个操作数视为一个索引，并将第三个操作数存储在索引所确定的位置，从0开始计算。  
save | /save save | 保存当前VM状态快照，一个快照只能使用一次。  
restore | save restore |
丢弃本地VM中自相应保存以来创建的所有对象，并回收它们占用的内存；将本地VM中所有复合对象的值（字符串除外）重置为保存时的状态；关闭自相应保存以来打开的文件，只要这些文件在local
VM 分配模式有效时打开。  
了解了上述背景后，开始分析漏洞。
### 漏洞成因
通过使用forall操作符获取创建的字符串对象，并在第一次循环时使用restore操作符释放字符串对象，随后创建新的字符串对象使得原本存储旧字符串对象的结构被新复合对象代替。若故意构造大小为0x27的字符串对象，则字符串被释放后会多出0x28的内存空间，此时立即创建新的字符串对象，则该内存会用来存储指向新字符串的string结构。随后通过改变forall的函数，获取指向新字符串的结构。
漏洞文件中一共触发了三次漏洞，第一次是获取了被释放的string的字符用于判断系统是32位还是64位。第二次触发故意构造大小为0x27的string对象，用于获取指向恶意string的结构。第三次则利用第二次构造的特殊string结构创造了一个起始地址为0x00000000，大小为0x7fffffff的字符串，构造了能够读写任意地址内存的读写原语。接着利用读写原语搜索内存中函数地址构造ROP链。最终创建了一个文件对象，在调用closefile操作符时跳转执行ROP完成漏洞利用。
查看poc.eps文件，第一次调用forall如图所示：
在ida中定位到forall操作符的代码：
使用windbg找到对应偏移后下断：`sxe ld EPSIMP32;g;bp EPSIMP32+2b928;g;`
运行到图中所示位置时查看edi的值，指向了操作栈，查看后发现有两个对象在栈中，第一个为string l63，第二个为array l61
继续分析，会获取l63和l61对象到栈中，并确认l63的类型为string后，跳转到获取string类型元素部分
获取值的过程会因为type的不同而有所变化，具体如图所示：
通过调试可以更加直观的看到通过value2获取string的方式：
接着循环获取string中的每一个元素并执行函数：
此时传入deferred_exec的参数为eax，查看传入参数：
    0:000> bp EPSIMP32+2ba06          //call    deferred_exec
    0:000> g
    Breakpoint 1 hit