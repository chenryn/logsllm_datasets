C
T
B
e
l
.
s
r
d
d
a
60
.
l
n
u
v
b
a
l
a
e
t
s
40
f
o
f
o
r
e
b
m
u
N
r
e
b
m
u
N
20
0
296000
296500
297000
Block
297500
298000
373800 374000 374200 374400 374600 374800 375000 375200
Block
Fig. 4. Comparison of a spike where Bitcoins might have been stolen due to a sudden
drop in stealable Bitcoins (left) and a case where we see a smooth decrease indicating
that no coins might have been stolen (right).
can see a sudden drop in the number of stealable Bitcoins, i.e., while there are
7.49 stealable BTC at block 297,304, there are only 0.2 BTC stealable at block
297,305. We identiﬁed a single transaction which transferred all the stealable
Bitcoins, indicating a theft. The fact that the number of vulnerable addresses
did not decrease to 0 at the same time can be explained by various reasons. For
instance, it could be possible that the attacker was not aware of the remaining
vulnerable addresses. Or, it could be the case that the attacker used a balance
threshold and determined that the remaining addresses are not worth stealing
from based on this threshold, because as we can see, the 0.2 BTC are shared
among 86 vulnerable addresses. In the second spike in Fig. 4, we observe a smooth
and monotone decrease over time regarding the number of stealable Bitcoins and
then a sudden decrease of the number of vulnerable addresses at the same time
the stealable BTC drop. This phenomenon could be explained by the fact that all
the addresses belong to the same individual and that at the end all the so-called
change addresses are emptied by the wallet. Change addresses are addresses
which are used to accumulate leftover transaction outputs. For example, if an
address A wants to send 1 BTC to an address B using a single output, which is
worth 5 BTC, then the resulting transaction will create two outputs, one that
is worth 1 BTC and can be spent by address B and one that is worth 4 BTC
and can be spent by a change address that belongs to the owner of A. The ﬁnal
transaction of the wallet will then use all accumulated outputs of the change
addresses, which could be an explanation for the sudden drop.
5 Discussion
In this section, we will consider the ethical aspects of our work and describe how
the problem of key leakage of cryptocurrencies can be tackled.
Identifying Key Leakage of Bitcoin Users
639
5.1 Ethical Considerations
Given that we systematically describe how attackers can steal Bitcoins abusing
leaked keys, we have to address the ethical aspects that come along with such a
work. On the one hand, we believe that raising awareness of these attack vectors
is fundamental and important to improve the security of the cryptocurrency
ecosystem. On the other hand, one could argue that the amount of detail we put
into outlining these methods is not beneﬁcial as it allows for easy reproducibility
by attackers. Yet we believe that this is the right way to tackle this problem as
“security by obscurity” has proven in the past to be an insuﬃcient means in
the area of security. We also note that ECDSA nonce reuse is known to be
a problem and it has been reported in forum posts that this phenomenon has
occurred in the Bitcoin blockchain [5–7]. However, as we have shown in Sect. 4.4,
this apparently known problem still regularly occurs and is abused by attackers,
with the latest case of nonce reuse appearing in a block mined on 2017-07-15.
This constant recurrence leads us to believe that it will happen again, unless we
emphasize this problem better, which is why we outline the attack in detail.
Another ethical aspect of dealing with attacks on cryptocurrencies is that a
responsible disclosure process in terms of notifying the victims is not trivial. A
fundamental downside here is that Bitcoin itself is decentralized by design and
intends to ensure the anonymity (or pseudonymity) of the peers. This means
that (i) we have no dedicated point of contact, which we could inform about our
ﬁndings and (ii) we cannot reach out to the legitimate owners of the vulnerable
addresses. We tried to handle this problem as responsibly as possible and refrain
from disclosing problematic addresses and/or transactions. For example, we did
not mention any vulnerable addresses or URLs to pastes containing them, as we
cannot be sure that the owners of those addresses are aware of the vulnerability.
While an attacker can reproduce our methodology to ﬁnd any future vulnerable
addresses using Pastebin, it should not be easily possible to ﬁnd the addresses we
have discovered, since the Pastebin feed only lists the most current 250 pastes.
While Pastebin can be searched using standard search engines like Google, it
should be very hard to discover the pastes we have found, since search engines
only oﬀer a keyword-based search, rather than a regex-based search which would
be required to ﬁnd the addresses. In our ECDSA case study, we also did not
mention any vulnerable addresses. However, an attacker can fully reproduce
our results here, as the Bitcoin blockchain contains all the necessary historical
information. Therefore, not mentioning vulnerable addresses is not as eﬀective
as in the case of our OSINT case study. Yet we also do not see a reason to do
so, as one could argue that this makes it too easy for an attacker.
5.2 Countermeasures
Explicitly leaking keys is not strictly a technical problem, as users seemingly pub-
lish private information without knowing the consequences of doing so. However,
there are some technical solutions that could be applied on OSINT platforms.
For example, Pastebin could include a check in their logic, which scans pastes for
640
M. Brengel and C. Rossow
secrets such as Bitcoin secret keys encoded in the WIF format. In fact, they could
provide immediate feedback to users about the security implications of pasting
such content. We have therefore contacted Pastebin with a detailed description
of our work, proposing to adopt such a methodology.
To avoid ECDSA nonce reuse, there are a few solutions that can be applied.
One such solution proposed by RFC 6979 [19] is to choose the nonce k determin-
istically based on the message m and the key sk. As inputs diﬀer, this scheme
provides unique nonces and hardens against nonce reuse. However, since this
solution is backwards-compatible with the existing ECDSA scheme, it also means
that peers do not have to follow this proposal. In particular, one cannot verify
that a signature has been created with the deterministic nonce choice as proposed
by RFC 6979. Another way of dealing with this problem is to incorporate a dupli-
cate nonce check into the Bitcoin protocol. For example, a check for duplicate r
values could be incorporated into the transaction veriﬁcation process. Each peer
veriﬁes each transaction of a block, which includes verifying the signature and
other sanity checks. Here, the protocol could also support a check for duplicate
r values, i.e., checking, for each r value of each signature, if it already occurs
in the blockchain. From a performance perspective, a Bloom ﬁlter could help to
scale this process. The more peers follow this, the less likely it will become that
a transaction containing a duplicate r value will be added to the blockchain.
However, an attacker monitoring the mempool instead of the blockchain might
still be able to observe transactions containing duplicate r values. Therefore,
one would need to additionally adapt the network rules such that a new rule is
added, which discourages the distribution of transactions which contain dupli-
cate nonces. If such a transaction reaches a peer which follows this new set
of rules, the duplicate r value will be detected and the transaction will not be
relayed further. Additionally, the peer sending the transaction should be notiﬁed
with an error message about the problem to create awareness. The more peers
follow this new set of rules, the less likely it becomes that transactions contain-
ing duplicate r values are distributed among the network. In total, we believe
that the adoption of all proposals, i.e., deterministic ECDSA and adapting the
network rules as well as the transaction veriﬁcation process, are suﬃcient means
to eliminate nonce reuse from cryptocurrencies.
6 Related Work
In this section we discuss other work in the areas of OSINT, Bitcoin key leakage
and ECDSA nonce reuse, and how they relate to our work.
OSINT has been applied before to expose or harvest privacy-related informa-
tion. Matic et al. [16] performed a study in which they monitored the Pastebin
feed between late 2011 and early 2012 to develop a framework for detecting
sensitive information in pastes. They discovered almost 200,000 compromised
accounts of several websites as well as lists of compromised servers or leaked
database dumps. In a slightly diﬀerent vein, Sabottke et al. [20] design a Twitter-
based exploit detector that can predict vulnerabilities such as code execution or
Identifying Key Leakage of Bitcoin Users
641
Denial-of-Service attacks solely based on tweets. Similarly, Zhu et al. [24] show
how they can use academic security literature as OSINT to automatically engi-
neer features for malware detection. While all of these works show the potential
of OSINT, they are only remotely related to our work as our use case is diﬀerent.
In terms of leaking Bitcoin secrets to steal money, there have been a few
other papers targeting this problem. Vasek et al. [22] have outlined how one
can attack passphrase-based wallets (brain wallets). The authors developed a
tool called Brainﬂayer, which uses brute force and a dictionary to generate
weak passphrases, which would have allowed an attacker to steal Bitcoins worth
$100,000 at that time. This approach is similar to ours in the sense that an
attacker exploits the fact that users treat sensitive information wrongly, i.e.,
passphrases in the case of Brainﬂayer and secret keys or nonces in our case. In
contrast to searching for weak passphrases, we harvest OSINT and cryptographic
primitives. More related are works by Castellucci et al. [10] and Valsorda [21],
which both consider ECDSA nonce reuse with respect to Bitcoin. However, both
only cover the basic case, where a nonce is used in conjunction with the same
key twice. We generalize this concept to systems of linear equations and system-
atically outline how an attacker can use a graph-based approach to leak secrets.
The general problem of nonce reuse in respect to ECDSA (or the closely
related DSA scheme) has been studied in other contexts. A notable incident
occurred in 2010, when it was discovered that Sony reused the same nonce to sign
software for the PlayStation 3 game console [8]. Furthermore, Heninger et al. [14]
studied the impact of weak keys and nonce reuse in the case of TLS and SSH
servers. The authors collected over 9 million signatures and found that 0.05%
of these signatures contained the same r value as at least one other signature.
Additionally, the authors used a subset of those signatures where a key and a
nonce appear in conjunction at least twice to leak 281 secret keys. Apart from
studying a diﬀerent use case, i.e., Bitcoin, our work is diﬀerent here in that we
systematically outline how an attacker can leak keys, which goes beyond the
simple case where the same key and nonce is used more than once.
7 Conclusion
We have studied the problem of implicit and explicit key leakage in the context of
cryptocurrencies, which shows how an attacker can leverage OSINT or duplicate
nonces to leak secret keys. Our case studies have shown the practical relevance
of these issues. An attacker monitoring Pastebin or scanning transactions for
nonce reuse could have stolen up to 22.40 BTC and 412.80 BTC, respectively.
Our work emphasizes aspects that are important for both the users and the
developers of cryptocurrencies. For instance, our Pastebin case study shows the
importance of making users aware of how to deal with cryptocurrency secrets.
Our results regarding ECDSA show that nonce reuse is a recurring problem and
highlight the beneﬁts of incorporating countermeasures on the protocol level. In
the case that cryptocurrencies become even more popular, it will become more
lucrative for miscreants to perform key leakage attacks similar to the ones we
642
M. Brengel and C. Rossow
described here. This highlights the importance of our research, which apart from
creating awareness of the problem, also can foster future research on the topic
of explicit and implicit key leakage in the context of cryptocurrencies.
Acknowledgement. This work was supported by the European Union’s Horizon 2020
research and innovation programme, RAMSES, under grant agreement No. 700326.
References
1. https://coinmarketcap.com/currencies/bitcoin/. Accessed 27 Mar 2018
2. https://coinmarketcap.com/currencies/ethereum/. Accessed 27 Mar 2018
3. https://pastebin.com. Accessed 27 Mar 2018
4. https://bitcoin.org/en/alert/2013-08-11-android. Accessed 27 Mar 2018
5. https://bitcointalk.org/index.php?topic=581411.0. Accessed 27 Mar 2018
6. https://bitcointalk.org/index.php?topic=1118704.0. Accessed 27 Mar 2018
7. https://bitcointalk.org/index.php?topic=1431060.0. Accessed 27 Mar 2018
8. https://events.ccc.de/congress/2010/Fahrplan/attachments/1780 27c3 console
hacking 2010.pdf (2010). Accessed 27 Mar 2018
9. Back, A.: Hashcash - a denial of service counter-measure (2002)
10. Castellucci, R., Valsorda, F.: Stealing Bitcoin with Math. https://news.webamooz.
com/wp-content/uploads/bot/oﬀsecmag/151.pdf. Accessed 27 Mar 2018
11. Decker, C., Wattenhofer, R.: Bitcoin transaction malleability and MtGox. In:
Proceedings of the European Symposium on Research in Computer Security
(ESORICS) (2014)
12. Diﬃe, W., Hellman, M.: New directions in cryptography. IEEE Trans. Inf. Theory
22, 644–654 (1976)
13. Eskandari, S., Barrera, D., Stobert, E., Clark, J.: A ﬁrst look at the usability
of bitcoin key management. In: Proceedings of the Workshop on Usable Security
(USEC) (2015)
14. Heninger, N., Durumeric, Z., Wustrow, E., Halderman, J.A.: Mining your Ps and
Qs: detection of widespread weak keys in network devices. In: Proceedings of the
USENIX Security Symposium (USENIX Security) (2012)
15. Koblitz, N.: Elliptic curve cryptosystems. Math. Comput. 48, 203–209 (1987)
16. Matic, S., Fattori, A., Bruschi, D., Cavallaro, L.: Peering into the muddy waters
of pastebin. ERCIM News (2012)
17. Nakamoto, S.: Bitcoin: a peer-to-peer electronic cash system (2008)
18. Naware, A.M.: Bitcoins, its advantages and security threats. Int. J. Adv. Res.
Comput. Eng. Technol. (IJARCET) 5, 1732–1735 (2016)
19. Pornin, T.: Deterministic usage of the digital signature algorithm (DSA) and ellip-
tic curve digital signature algorithm (ECDSA) (2013). https://rfc-editor.org/rfc/
rfc6979.txt
20. Sabottke, C., Suciu, O., Dumitras, T.: Vulnerability disclosure in the age of social
media: exploiting Twitter for predicting real-world exploits. In: Proceedings of the
USENIX Security Symposium (USENIX Security) (2015)
21. Valsorda, F.: Exploiting ECDSA failures in the bitcoin blockchain. In: Proceedings
of Hack In The Box (HITB) (2014)
22. Vasek, M., Bonneau, J., Castellucci, R., Keith, C., Moore, T.: The bitcoin brain
drain: examining the use and abuse of bitcoin brain wallets. In: Grossklags, J.,
Preneel, B. (eds.) FC 2016. LNCS, vol. 9603, pp. 609–618. Springer, Heidelberg
(2017). https://doi.org/10.1007/978-3-662-54970-4 36
Identifying Key Leakage of Bitcoin Users
643
23. Wood, G.: Ethereum: a next-generation smart contract and decentralized
application platform (2018). https://ethereum.github.io/yellowpaper/paper.pdf.
Accessed 27 Mar 2018
24. Zhu, Z., Dumitras, T.: FeatureSmith: automatically engineering features for mal-
ware detection by mining the security literature. In: Proceedings of the Conference
on Computer and Communications Security (CCS) (2016)
Open Access This chapter is licensed under the terms of the Creative Commons
Attribution 4.0 International License (http://creativecommons.org/licenses/by/4.0/),
which permits use, sharing, adaptation, distribution and reproduction in any medium
or format, as long as you give appropriate credit to the original author(s) and the
source, provide a link to the Creative Commons license and indicate if changes were
made.
The images or other third party material in this chapter are included in the chapter’s
Creative Commons license, unless indicated otherwise in a credit line to the material. If
material is not included in the chapter’s Creative Commons license and your intended
use is not permitted by statutory regulation or exceeds the permitted use, you will
need to obtain permission directly from the copyright holder.