hosts out of the 1213 candidate dummy hosts, kept sending
RTP packets to each of them and checking the states of their
VoIP ports. Figure 3e depicts the CDF of length of period
for a dummy host to stay usable. We can see that over 90%
dummy hosts can stay usable for more than 2 hours, and
over 80% can stay usable for over 6 hours. This means in
most cases, the users only need to establish one SIP session
throughout their web browsing.
We also measured the stability of dummy hosts over a
longer period of time. We kept track of the states of 100
randomly selected dummy hosts from Feb.
9th 2012 to
Feb. 16th 2012. To simulate the practical scenario when
the dummy hosts are used by our system to absorb VoIP
traﬃc, we kept sending RTP packets to each dummy host
periodically, with 1-hour sending period and 1-hour sleeping
period. Figure 3f depicts the number of usable dummy hosts
in that period. We can see that the total number of dummy
hosts is almost stable, indicating that the pool of candidate
dummy nodes does not shrink over time.
8. CONCLUSION
We proposed a new circumvention framework, Censor-
Spoofer, by exploiting the asymmetric nature of web brows-
ing. CensorSpoofer decouples the upstream and downstream
channels, using a low-bandwidth indirect channel for deliv-
ering URLs and a high-bandwidth direct channel for down-
loading web content. The upstream channel hides the re-
quests using steganography within Email/IM; whereas the
downstream channel uses IP spooﬁng to conceal the proxy’s
real address. Unlike some existing circumvention systems,
CensorSpoofer does not require any additional support from
network infrastructure. We implemented a proof-of-concept
prototype for CensorSpoofer, and the experimental results
showed that CensorSpoofer has reasonable performance for
real-world deployment.
9. ACKNOWLEDGEMENTS
We are grateful to Joshua Juen for his help with the AS
path prediction. We thank Shuo Tang for helpful discussion
on implementing the prefetching proxy. We also thank Pra-
teek Mittal, Anupam Das, Sonia Jahid, and Joshua Juen
for inspiring discussion at the beginning of this work. This
work was supported in part by NSF CNS 09-53655 and the
Boeing Trusted Software Center at the Information Trust
Institute, University of Illinois.
13010. REFERENCES
[1] Dynaweb. http://www.dongtaiwang.com/home_en.php.
[2] Ultrasurf. http://www.ultrareach.com.
[3] Ten ways to discover Tor bridges.
https://blog.torproject.org/blog/
research-problems-ten-ways-discover-tor-bridges.
[4] TriangleBoy Whitepaper. http://www.webrant.com/
safeweb_site/html/www/tboy_whitepaper.html.
[5] MailMyWeb. http://www.mailmyweb.com/.
[6] Feed Over Email (F.O.E).
http://code.google.com/p/foe-project/.
[7] WASTE. http://waste.sourceforge.net/.
[8] Blink. http://icanblink.com/.
[9] SFLphone. http://sflphone.org/.
[10] Zfone. http://zfoneproject.com/.
[11] pjsua. http://www.pjsip.org/.
[12] PhonerLite. http://www.phonerlite.de/index_en.htm.
[13] Microsoft Lync. http:
//technet.microsoft.com/en-us/library/gg195673.aspx.
[14] CounterPath.
http://www.counterpath.com/softphone-products.html.
[15] Cisco IP phones. http://www.cisco.com/en/US/docs/
voice_ip_comm/cucm/security/4_0_1/secuview.html.
[16] Grandstream. http://www.grandstream.com/products/
ip-voice-telephony/enterprise-ip-phones/gxp1100.
[17] nmap. http://nmap.org/.
[18] The MIT ANA Spoofer project.
http://spoofer.csail.mit.edu/.
[19] netﬁlter-queue. http:
//www.netfilter.org/projects/libnetfilter_queue/.
[20] IP geolocation database. http://ipinfodb.com/.
[21] XMPPPY. http://xmpppy.sourceforge.net/.
[22] QtWebKit. http://trac.webkit.org/wiki/QtWebKit.
[23] OpenSSL. www.openssl.org.
[24] How censorship works in china: A brief overview.
http://www.hrw.org/reports/2006/china0806/3.htm#
_Toc142395821.
[25] Mikey: Multimedia internet keying.
http://www.ietf.org/rfc/rfc3830.txt.
[26] Reed-solomon forward error correction (fec) schemes.
http://www.ietf.org/rfc/rfc5510.txt.
[27] Sdp: Session description protocol.
http://www.ietf.org/rfc/rfc4566.txt.
[28] The secure real-time transport protocol (srtp).
http://www.ietf.org/rfc/rfc3711.txt.
[29] Sip: Session initiation protocol.
http://www.ietf.org/rfc/rfc3261.txt.
[30] Top 50 autonomous systems. http://cyber.law.harvard.
edu/netmaps/country_detail.php/?cc=CN.
[31] Zrtp: Media path key agreement for unicast secure rtp.
http://www.ietf.org/rfc/rfc6189.txt.
[32] Defeat Internet Censorship: Overview of Advanced
Technologies and Products, Nov. 2007.
http://www.internetfreedom.org/archive/Defeat_
Internet_Censorship_White_Paper.pdf.
[33] Iran reportedly blocking encrypted internet traﬃc, 2012.
http://arstechnica.com/tech-policy/news/2012/02/
iran-reportedly-blocking-encrypted-internet-traffic.
ars.
[34] New blocking activity from iran, June, 16, 2011. https://
blog.torproject.org/blog/new-blocking-activity-iran.
[35] D. Barboza and C. C. Miller. Google accuses chinese of
blocking gmail service. http://www.nytimes.com/2011/03/
21/technology/21google.html?_r=2.
[36] S. Burnett, N. Feamster, and S. Vempal. Chipping away at
censorship with user-generated content. In USENIX
Security, 2010.
[37] Cisco. Voice over ip – per call bandwidth consumption.
http://www.cisco.com/application/pdf/paws/7934/
bwidth_consume.pdf.
[38] I. Clarke, T. W. Hong, S. G. Miller, O. Sandberg, and
B. Wiley. Protecting Free Expression Online with
{Freenet}. IEEE Internet Computing, 6(1):40–49, 2002.
[39] J. Cowie. Egypt leaves the internet, Jan. 2011.
http://www.renesys.com/blog/2011/01/
egypt-leaves-the-internet.shtml.
[40] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
second-generation onion router. In USENIX Security
Symposium, August 2004.
[41] N. Feamster, M. Balazinska, G. Harfst, H. Balakrishnan,
and D. Karger. Infranet: Circumventing Web Censorship
and Surveillance. In USENIX Security, Aug. 2002.
[42] N. Feamster, M. Balazinska, W. Wang, H. Balakrishnan,
and D. Karger. Thwarting web censorship with untrusted
messenger discovery. In Privacy Enhancing Technologies
(PETS), 2003.
[43] L. Gao. On inferring autonomous system relationships in
the internet. IEEE/ACM Trans. Netw., 9:733–745,
December 2001.
[44] A. Houmansadr, G. T. K. Nguyen, M. Caesar, and
N. Borisov. Cirripede : Circumvention infrastructure using
router redirection with plausible deniability categories and
subject descriptors. In ACM CCS’11, 2011.
[45] J. Jacob. How internet censorship works in china, 2011.
http://www.ibtimes.com/articles/113590/20110217/.
[46] R. Jain, S. Member, Shawn, and A. Routhier. Packet
trainsˆa ˘AˇTmeasurements and a new model for computer
network traﬃc. IEEE Journal on Selected Areas in
Communications, 4:986–995, 1986.
[47] J. Jarvis. Facebook, twitter, and the egyptian revolution,
Feb. 13. 2011.
http://thefastertimes.com/mediaandtech/2011/02/13/
facebook-twitter-and-the-egyptian-revolution/.
[48] J. Jia and P. Smith. Psiphon: Analysis and Estimation,
2004. http://www.cdf.toronto.edu/~csc494h/reports/
2004-fall/psiphon_ae.html.
[49] J. Karlin, D. Ellard, A. W. Jackson, C. E. Jones, G. Lauer,
D. P. Mankins, and W. T. Strayer. Decoy Routing :
Toward Unblockable Internet Communication. In USENIX
FOCI, 2011.
[50] C. S. Leberknight, M. Chiang, H. V. Poor, and F. Wong. A
taxonomy of Internet censorship and anti-censorship. http:
//www.princeton.edu/~chiangm/anticensorship.pdf.
[51] M. Mahdian. Fighting censorship with algorithms. In
Proceedings of FUN 2010, 2010.
[52] D. McCoy, J. A. Morales, and K. Levchenko. Proximax: A
measurement based system for proxies dissemination. In
Financial Cryptography and Data Security (FC’11), 2011.
[53] J. McLachlan and N. Hopper. On the risks of serving
whenever you surf: Vulnerability of tor’s blocking resistance
design. In WPES’09, 2009.
[54] B. Popescu, B. Crispo, and A. S. Tanenbaum. Safe and
private data sharing with turtle: Friends team-up and beat
the system. In The 12th Cambridge International
Workshop on Security Protocols, April 2004.
[55] J. Qiu and L. Gao. Cam04-4: As path inference by
exploiting known as paths. In GLOBECOM ’06, 2006.
[56] Y. Sovran, A. Libonati, and J. Li. Pass it on: Social
networks stymie censors. In IPTPS’08, Feb 2008.
[57] E. Y. Vasserman, R. Jansen, J. Tyra, N. Hopper, and
Y. Kim. Membership-concealing overlay networks. In ACM
CCS’09, Nov. 2009.
[58] X. Wang, S. Chen, and S. Jajodia. Network ﬂow
watermarking attack on low-latency anonymous
communication systems. In IEEE Oakland, 2007.
[59] E. Wustrow, S. Wolchok, I. Goldberg, and J. A. Halderman.
Telex: Anticensorship in the Network Infrastructure. In
20th USENIX Security Symposium, Aug. 2011.
[60] J. Zittrain and B. Edelman. Internet Filtering in China.
IEEE Internet Computing, 7(2):70–77, 2003.
131APPENDIX
A. THE SPOOFER PROTOTYPE
SIP Message Handler. We use PJSUA v1.12 [11] as
an out-of-box tool to register callees’ SIP IDs. We choose
PJSUA because we can easily register multiple SIP IDs us-
ing the -config-file option. To prevent the user-agent
ﬁngerprinting attack, we use tcpdump to pre-record the OK
messages generated by diﬀerent softphones, and use them as
templates to generate corresponding OK messages.
When starting the spoofer, the SIP message handler ﬁrst
launches PJSUA to register callees’ SIP IDs, so that the SIP
proxies can forward INVITE messages related with these
SIP IDs to the spoofer. We use netfilter_queue [19] to
capture incoming INVITE messages. (Since PJSUA requires
to bind port 5060, we do not create a socket bound to port
5060 to receive INVITE messages.) For each INVITE mes-
sage, the handler replies with an OK message that is crafted
according to the content the INVITE message, and creates
a thread for the RTP/RTCP transmitter for this client.
RTP/RTCP Transmitter. The RTP/RTCP transmit-
ter needs to send RTP/RTCP packets periodically with IP
spooﬁng. For this, we use a UDP raw socket, which allows
us to put an arbitrary IP into the source IP ﬁeld in the IP
header. To encrypt RTP/RTCP packets, we use AES-128 of
OpenSSL v1.0.0 [23] with a pre-shared key. Since the send-
ing frequency of RTCP packets is much lower than that of
RTP packets, we only use RTP to send censored data.
To handle packet loss, we implemented a simple XOR-
based encoder/decoder. The RTP/RTCP transmitter par-
titions the ﬂow of each task (i.e., downloading a particu-
lar webpage) into ﬁxed-sized data blocks, and multiplex the
blocks of diﬀerent tasks of the same client into one stream,
which is further divided into groups of size λ (e.g., λ = 10
blocks). For each group, the transmitter generates a redun-
dant block by XORing all λ blocks in the group, so that
any λ out of the λ + 1 blocks are suﬃcient to recover the
whole group. Whenever a RTP packet needs to be sent, the
transmitter checks if there are any available blocks (includ-
ing XOR blocks) in the buﬀer for this client. If so, it writes
one block into the RTP payload and sends it out; otherwise,
the RTP packet is stuﬀed with random data.
Note that some blocks may contain data less than their
capacity (e.g., the last block of a task), and blocks may arrive
at the client in diﬀerent order than being sent out; besides,
the client should be able to diﬀerentiate blocks for diﬀerent
tasks. To handle these, we use the ﬁrst 4 bytes of the RTP
payload to embed a block sequence number (2 bytes), a task
number (1 byte), and block size (1 byte). These ﬁelds are
encrypted together with the rest RTP payload.
Upstream Message Receiver. We use Gtalk as the
upstream channel, although our system in no way depends
on encrypted indirect channels like Gtalk. We implemented
a simple Gtalk client using a python API xmpppy [21] to
send and receive Gtalk messages. Each Gtalk message con-
tains a URL, the user’s IP address, and a task number (also
contained in the RTP payload). The upstream message re-
ceiver forwards the Gtalk message to the prefetching proxy
by sending a UDP packet, and then the prefetching proxy
will start downloading the webpage according to the URL.
Prefetching Proxy. Since each CensorSpoofer client
only sends one URL (instead of separate HTTP requests)
to the spoofer, the spoofer needs to prefetch the whole web-
page on the behalf of the client. This means that the spoofer
needs to ﬁrst download the html ﬁle, parse it to ﬁgure out
the missing objects, and then send separate HTTP requests
to fetch these objects, and ﬁnally send all the downloaded
data to the client over the RTP channel. We built a prefetch-
ing proxy (PFP) for this purpose. Instead of implementing a
html parser and fetching embedded objects (which are essen-
tially the operations of a web browser) from scratch, we use
an open-source layout engine QtWebKit [22], which is a port
of the popular WebKit layout engine into the Qt application
development framework. We choose QtWebKit because it
provides a simple QtWebPage type that signiﬁcantly reduces
our development eﬀort. Given a URL to load, a QtWeb-
Page performs all the necessary network operations, includ-
ing parsing, Javascript execution, etc., in order to render the
webpage. The PFP obtains all the raw HTTP responses for
HTTP requests that the QtWebPage makes. As soon as PFP
receives a full HTTP response, it sends the request-response
pair to the client over the RTP channel. When the QtWeb-
Page ﬁnishes loading the entire webpage, the PFP sends an
“End-of-Page” marker to the client, to inform that there will
be no more request-response pair for this webpage.
B. THE CLIENT PROTOTYPE
To avoid the censor detecting CensorSpoofer users based
on the ﬁngerprint of their softphones, we do not implement
our own softphone for the clients; instead, we let the client
use any existing softphone to access CensorSpoofer. Again,
we use PJSUA for the client prototype.
When running the client, PJSUA is ﬁrst launched to reg-
ister the user’s SIP ID. Most softphones (including PJSUA)
do not support making calls outside the user interfaces. In
order to call the spoofer automatically inside our client pro-
gram, we use tcpdump to pre-record the INVITE and ACK
messages, and send them in an ongoing SIP initialization
session (the ACK message needs to be updated according to
the received OK message). Once the SIP initialization is ﬁn-
ished, the client creates a UDP socket to receive RTP/RTCP
packets from the spoofer and send RTP/RTCP packets to
the dummy host. The client uses the pre-shared key to de-
crypt received packets and stores the decrypted blocks into
a buﬀer. Once λ blocks in a group are received, the client
uses the XOR-based decoder to recover the original group.
We implemented a client-side HTTP proxy (CSP) to han-
dle HTTP requests made by the user’s browser and HTTP
responses received from the RTP channel. When the CSP
receives the ﬁrst HTTP request for a page, it forwards the
URL of the page to the spoofer via the Gtalk channel, but
will not forward subsequent requests for other objects of
the page.
Instead, the CSP will “collect” in memory the
HTTP request-response pairs received from the spoofer, and
will serve to the client’s browser the appropriate HTTP re-
sponses from its memory when the browser makes a HTTP
request. We note that any web browser supporting HTTP
proxies, such as Mozilla Firefox, can use the CSP because the
CSP provides an HTTP proxy compliant interface. There-
fore, we do not have to modify existing web browsers or
implement a new one. However, for ease of automating ex-
periments, we implement a minimal browser application (to-
talling 150 lines of code) that is simply a wrapper around
QtWebPage to load the webpages. This browser application
also outputs various statistics useful for our evaluation.
132