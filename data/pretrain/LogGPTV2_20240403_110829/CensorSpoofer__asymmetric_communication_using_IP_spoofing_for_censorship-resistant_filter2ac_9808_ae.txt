### 4. Dummy Host Stability Analysis

Out of the 1,213 candidate dummy hosts, we continuously sent RTP packets to each and monitored the states of their VoIP ports. Figure 3e illustrates the cumulative distribution function (CDF) of the period for which a dummy host remains usable. The results indicate that over 90% of the dummy hosts can remain usable for more than 2 hours, and over 80% can stay usable for more than 6 hours. This suggests that, in most cases, users only need to establish one SIP session throughout their web browsing session.

To further evaluate the stability of the dummy hosts over an extended period, we tracked the states of 100 randomly selected dummy hosts from February 9, 2012, to February 16, 2012. To simulate the practical scenario where these dummy hosts are used by our system to absorb VoIP traffic, we periodically sent RTP packets to each dummy host with a 1-hour sending period followed by a 1-hour sleeping period. Figure 3f shows the number of usable dummy hosts during this period. The total number of usable dummy hosts remained almost stable, indicating that the pool of candidate dummy nodes does not significantly shrink over time.

### 8. Conclusion

We introduced CensorSpoofer, a new circumvention framework that leverages the asymmetric nature of web browsing. CensorSpoofer decouples the upstream and downstream channels, using a low-bandwidth indirect channel for delivering URLs and a high-bandwidth direct channel for downloading web content. The upstream channel conceals requests using steganography within Email/IM, while the downstream channel uses IP spoofing to hide the proxy's real address. Unlike some existing circumvention systems, CensorSpoofer does not require additional support from network infrastructure. We implemented a proof-of-concept prototype for CensorSpoofer, and the experimental results demonstrated that it offers reasonable performance for real-world deployment.

### 9. Acknowledgements

We are grateful to Joshua Juen for his assistance with AS path prediction. We also thank Shuo Tang for his valuable discussions on implementing the prefetching proxy. Additionally, we extend our thanks to Prateek Mittal, Anupam Das, Sonia Jahid, and Joshua Juen for their inspiring discussions at the beginning of this work. This research was supported in part by NSF CNS 09-53655 and the Boeing Trusted Software Center at the Information Trust Institute, University of Illinois.

### 10. References

[1] Dynaweb. http://www.dongtaiwang.com/home_en.php.
[2] Ultrasurf. http://www.ultrareach.com.
[3] Ten ways to discover Tor bridges. https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges.
[4] TriangleBoy Whitepaper. http://www.webrant.com/safeweb_site/html/www/tboy_whitepaper.html.
[5] MailMyWeb. http://www.mailmyweb.com/.
[6] Feed Over Email (F.O.E). http://code.google.com/p/foe-project/.
[7] WASTE. http://waste.sourceforge.net/.
[8] Blink. http://icanblink.com/.
[9] SFLphone. http://sflphone.org/.
[10] Zfone. http://zfoneproject.com/.
[11] pjsua. http://www.pjsip.org/.
[12] PhonerLite. http://www.phonerlite.de/index_en.htm.
[13] Microsoft Lync. http://technet.microsoft.com/en-us/library/gg195673.aspx.
[14] CounterPath. http://www.counterpath.com/softphone-products.html.
[15] Cisco IP phones. http://www.cisco.com/en/US/docs/voice_ip_comm/cucm/security/4_0_1/secuview.html.
[16] Grandstream. http://www.grandstream.com/products/ip-voice-telephony/enterprise-ip-phones/gxp1100.
[17] nmap. http://nmap.org/.
[18] The MIT ANA Spoofer project. http://spoofer.csail.mit.edu/.
[19] netfilter-queue. http://www.netfilter.org/projects/libnetfilter_queue/.
[20] IP geolocation database. http://ipinfodb.com/.
[21] XMPPPY. http://xmpppy.sourceforge.net/.
[22] QtWebKit. http://trac.webkit.org/wiki/QtWebKit.
[23] OpenSSL. www.openssl.org.
[24] How censorship works in China: A brief overview. http://www.hrw.org/reports/2006/china0806/3.htm#_Toc142395821.
[25] Mikey: Multimedia internet keying. http://www.ietf.org/rfc/rfc3830.txt.
[26] Reed-Solomon forward error correction (FEC) schemes. http://www.ietf.org/rfc/rfc5510.txt.
[27] SDP: Session description protocol. http://www.ietf.org/rfc/rfc4566.txt.
[28] The secure real-time transport protocol (SRTP). http://www.ietf.org/rfc/rfc3711.txt.
[29] SIP: Session initiation protocol. http://www.ietf.org/rfc/rfc3261.txt.
[30] Top 50 autonomous systems. http://cyber.law.harvard.edu/netmaps/country_detail.php/?cc=CN.
[31] ZRTP: Media path key agreement for unicast secure RTP. http://www.ietf.org/rfc/rfc6189.txt.
[32] Defeat Internet Censorship: Overview of Advanced Technologies and Products, Nov. 2007. http://www.internetfreedom.org/archive/Defeat_Internet_Censorship_White_Paper.pdf.
[33] Iran reportedly blocking encrypted internet traffic, 2012. http://arstechnica.com/tech-policy/news/2012/02/iran-reportedly-blocking-encrypted-internet-traffic.ars.
[34] New blocking activity from Iran, June 16, 2011. https://blog.torproject.org/blog/new-blocking-activity-iran.
[35] D. Barboza and C. C. Miller. Google accuses Chinese of blocking Gmail service. http://www.nytimes.com/2011/03/21/technology/21google.html?_r=2.
[36] S. Burnett, N. Feamster, and S. Vempal. Chipping away at censorship with user-generated content. In USENIX Security, 2010.
[37] Cisco. Voice over IP – per call bandwidth consumption. http://www.cisco.com/application/pdf/paws/7934/bwidth_consume.pdf.
[38] I. Clarke, T. W. Hong, S. G. Miller, O. Sandberg, and B. Wiley. Protecting Free Expression Online with Freenet. IEEE Internet Computing, 6(1):40–49, 2002.
[39] J. Cowie. Egypt leaves the internet, Jan. 2011. http://www.renesys.com/blog/2011/01/egypt-leaves-the-internet.shtml.
[40] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The second-generation onion router. In USENIX Security Symposium, August 2004.
[41] N. Feamster, M. Balazinska, G. Harfst, H. Balakrishnan, and D. Karger. Infranet: Circumventing Web Censorship and Surveillance. In USENIX Security, Aug. 2002.
[42] N. Feamster, M. Balazinska, W. Wang, H. Balakrishnan, and D. Karger. Thwarting web censorship with untrusted messenger discovery. In Privacy Enhancing Technologies (PETS), 2003.
[43] L. Gao. On inferring autonomous system relationships in the internet. IEEE/ACM Trans. Netw., 9:733–745, December 2001.
[44] A. Houmansadr, G. T. K. Nguyen, M. Caesar, and N. Borisov. Cirripede: Circumvention infrastructure using router redirection with plausible deniability categories and subject descriptors. In ACM CCS’11, 2011.
[45] J. Jacob. How internet censorship works in China, 2011. http://www.ibtimes.com/articles/113590/20110217/.
[46] R. Jain, S. Member, Shawn, and A. Routhier. Packet trains: Measurements and a new model for computer network traffic. IEEE Journal on Selected Areas in Communications, 4:986–995, 1986.
[47] J. Jarvis. Facebook, Twitter, and the Egyptian revolution, Feb. 13, 2011. http://thefastertimes.com/mediaandtech/2011/02/13/facebook-twitter-and-the-egyptian-revolution/.
[48] J. Jia and P. Smith. Psiphon: Analysis and Estimation, 2004. http://www.cdf.toronto.edu/~csc494h/reports/2004-fall/psiphon_ae.html.
[49] J. Karlin, D. Ellard, A. W. Jackson, C. E. Jones, G. Lauer, D. P. Mankins, and W. T. Strayer. Decoy Routing: Toward Unblockable Internet Communication. In USENIX FOCI, 2011.
[50] C. S. Leberknight, M. Chiang, H. V. Poor, and F. Wong. A taxonomy of Internet censorship and anti-censorship. http://www.princeton.edu/~chiangm/anticensorship.pdf.
[51] M. Mahdian. Fighting censorship with algorithms. In Proceedings of FUN 2010, 2010.
[52] D. McCoy, J. A. Morales, and K. Levchenko. Proximax: A measurement-based system for proxies dissemination. In Financial Cryptography and Data Security (FC’11), 2011.
[53] J. McLachlan and N. Hopper. On the risks of serving whenever you surf: Vulnerability of Tor’s blocking resistance design. In WPES’09, 2009.
[54] B. Popescu, B. Crispo, and A. S. Tanenbaum. Safe and private data sharing with Turtle: Friends team-up and beat the system. In The 12th Cambridge International Workshop on Security Protocols, April 2004.
[55] J. Qiu and L. Gao. Cam04-4: AS path inference by exploiting known AS paths. In GLOBECOM ’06, 2006.
[56] Y. Sovran, A. Libonati, and J. Li. Pass it on: Social networks stymie censors. In IPTPS’08, Feb 2008.
[57] E. Y. Vasserman, R. Jansen, J. Tyra, N. Hopper, and Y. Kim. Membership-concealing overlay networks. In ACM CCS’09, Nov. 2009.
[58] X. Wang, S. Chen, and S. Jajodia. Network flow watermarking attack on low-latency anonymous communication systems. In IEEE Oakland, 2007.
[59] E. Wustrow, S. Wolchok, I. Goldberg, and J. A. Halderman. Telex: Anticensorship in the Network Infrastructure. In 20th USENIX Security Symposium, Aug. 2011.
[60] J. Zittrain and B. Edelman. Internet Filtering in China. IEEE Internet Computing, 7(2):70–77, 2003.

### Appendix

#### A. The Spoofer Prototype

**SIP Message Handler:**
We use PJSUA v1.12 [11] as an out-of-box tool to register callees' SIP IDs. We chose PJSUA because it allows us to easily register multiple SIP IDs using the `-config-file` option. To prevent user-agent fingerprinting attacks, we pre-recorded OK messages generated by different softphones using `tcpdump` and used them as templates to generate corresponding OK messages.

When starting the spoofer, the SIP message handler first launches PJSUA to register the callees' SIP IDs, so that the SIP proxies can forward INVITE messages related to these SIP IDs to the spoofer. We use `netfilter_queue` [19] to capture incoming INVITE messages. (Since PJSUA requires binding port 5060, we do not create a socket bound to port 5060 to receive INVITE messages.) For each INVITE message, the handler replies with an OK message crafted according to the content of the INVITE message and creates a thread for the RTP/RTCP transmitter for this client.

**RTP/RTCP Transmitter:**
The RTP/RTCP transmitter sends RTP/RTCP packets periodically with IP spoofing. We use a UDP raw socket, which allows us to put an arbitrary IP into the source IP field in the IP header. To encrypt RTP/RTCP packets, we use AES-128 of OpenSSL v1.0.0 [23] with a pre-shared key. Since the sending frequency of RTCP packets is much lower than that of RTP packets, we only use RTP to send censored data.

To handle packet loss, we implemented a simple XOR-based encoder/decoder. The RTP/RTCP transmitter partitions the flow of each task (i.e., downloading a particular webpage) into fixed-sized data blocks and multiplexes the blocks of different tasks of the same client into one stream, which is further divided into groups of size λ (e.g., λ = 10 blocks). For each group, the transmitter generates a redundant block by XORing all λ blocks in the group, so that any λ out of the λ + 1 blocks are sufficient to recover the whole group. Whenever an RTP packet needs to be sent, the transmitter checks if there are any available blocks (including XOR blocks) in the buffer for this client. If so, it writes one block into the RTP payload and sends it out; otherwise, the RTP packet is stuffed with random data.

Note that some blocks may contain data less than their capacity (e.g., the last block of a task), and blocks may arrive at the client in a different order than they were sent out. Additionally, the client should be able to differentiate blocks for different tasks. To handle these, we use the first 4 bytes of the RTP payload to embed a block sequence number (2 bytes), a task number (1 byte), and block size (1 byte). These fields are encrypted together with the rest of the RTP payload.

**Upstream Message Receiver:**
We use Gtalk as the upstream channel, although our system does not depend on encrypted indirect channels like Gtalk. We implemented a simple Gtalk client using the Python API `xmpppy` [21] to send and receive Gtalk messages. Each Gtalk message contains a URL, the user's IP address, and a task number (also contained in the RTP payload). The upstream message receiver forwards the Gtalk message to the prefetching proxy by sending a UDP packet, and then the prefetching proxy will start downloading the webpage according to the URL.

**Prefetching Proxy:**
Since each CensorSpoofer client only sends one URL (instead of separate HTTP requests) to the spoofer, the spoofer needs to prefetch the entire webpage on behalf of the client. This means the spoofer must first download the HTML file, parse it to figure out the missing objects, and then send separate HTTP requests to fetch these objects, and finally send all the downloaded data to the client over the RTP channel. We built a prefetching proxy (PFP) for this purpose. Instead of implementing a HTML parser and fetching embedded objects from scratch, we use the open-source layout engine `QtWebKit` [22], which is a port of the popular WebKit layout engine into the Qt application development framework. We chose `QtWebKit` because it provides a simple `QtWebPage` type that significantly reduces our development effort. Given a URL to load, a `QtWebPage` performs all the necessary network operations, including parsing, JavaScript execution, etc., to render the webpage. The PFP obtains all the raw HTTP responses for HTTP requests that the `QtWebPage` makes. As soon as the PFP receives a full HTTP response, it sends the request-response pair to the client over the RTP channel. When the `QtWebPage` finishes loading the entire webpage, the PFP sends an "End-of-Page" marker to the client, informing that there will be no more request-response pairs for this webpage.

#### B. The Client Prototype

To avoid the censor detecting CensorSpoofer users based on the fingerprint of their softphones, we do not implement our own softphone for the clients. Instead, we let the client use any existing softphone to access CensorSpoofer. Again, we use PJSUA for the client prototype.

When running the client, PJSUA is first launched to register the user's SIP ID. Most softphones (including PJSUA) do not support making calls outside the user interfaces. To call the spoofer automatically inside our client program, we use `tcpdump` to pre-record the INVITE and ACK messages and send them in an ongoing SIP initialization session (the ACK message needs to be updated according to the received OK message). Once the SIP initialization is finished, the client creates a UDP socket to receive RTP/RTCP packets from the spoofer and send RTP/RTCP packets to the dummy host. The client uses the pre-shared key to decrypt received packets and stores the decrypted blocks into a buffer. Once λ blocks in a group are received, the client uses the XOR-based decoder to recover the original group.

We implemented a client-side HTTP proxy (CSP) to handle HTTP requests made by the user's browser and HTTP responses received from the RTP channel. When the CSP receives the first HTTP request for a page, it forwards the URL of the page to the spoofer via the Gtalk channel but will not forward subsequent requests for other objects of the page. Instead, the CSP will "collect" in memory the HTTP request-response pairs received from the spoofer and will serve the appropriate HTTP responses from its memory when the browser makes an HTTP request. Any web browser supporting HTTP proxies, such as Mozilla Firefox, can use the CSP because the CSP provides an HTTP proxy-compliant interface. Therefore, we do not have to modify existing web browsers or implement a new one. However, for ease of automating experiments, we implemented a minimal browser application (totaling 150 lines of code) that is simply a wrapper around `QtWebPage` to load the webpages. This browser application also outputs various statistics useful for our evaluation.