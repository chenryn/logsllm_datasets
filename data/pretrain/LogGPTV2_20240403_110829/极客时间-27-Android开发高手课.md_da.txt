# 程序员修炼之路：设计能力的提升途径

大家好，我是张绍文。今天我要分享我的朋友长元撰写的一篇文章，主题是关于程序员如何提升自己的设计能力。我们的专栏已进入架构演进模块。由于每个人对架构的理解各异，在工作中也会遇到各种各样的架构设计问题。很多时候，我们的架构设计能力都是通过不断的理论学习和实践摸索中逐渐提高的。因此，在成为设计高手的路上，我们肯定或多或少积累了一些经验和教训。今天，长元将分享他的设计能力提升路径，希望能为大家提供参考，帮助大家在成长之路上少走弯路。

每当我完成一次内部设计培训后，经常有同事问我：“怎样才能快速提升自己的设计能力？”我认为这个问题非常具有代表性，因为它反映了广大程序员在职业发展道路上的心声。接下来，我将从个人经验出发，谈谈我对程序员设计能力提升路径的看法，并欢迎各位读者留言分享你们的想法。

### 1. 编码历练
编码经验是非常宝贵的财富。当你的代码量还未达到一万行时，如果问我如何提升设计能力，我会建议你先不要急于求成，而是要踏实写好每一行代码。一个程序员平均每天可以编写200到300行代码。虽然有人可能声称自己一天能写出上千行代码，但请别忘了，测试、调试、优化及修复bug等环节都会占用大量时间，无法让你一直专注于编码。

此外，良好的编码规范至关重要。如果你的代码还处于杂乱无章的状态，请先把基础工作做好再谈其他。作为“代码洁癖患者”，我推荐你在敲击每个字符时都严格遵守规范，而不是等到最后才批量格式化或手动整理代码。习惯的力量不可小觑，在招聘面试过程中，我甚至想增设一个现场编程环节来考察应聘者的代码基本功。

### 2. 理论学习
理论学习同样重要，它可以帮助我们构建坚实的知识体系。我推荐阅读以下几本书籍：
- 《重构：改善既有代码的设计》
- 《敏捷软件开发：原则、模式与实践》
- 《UML和模式应用》
- 《设计模式》

另外，面向对象设计的五大原则也是必须掌握的内容。尽管《设计模式》这本书内容较为晦涩难懂，但只要认真阅读并尝试理解，即使只掌握了其中一小部分知识，也已经是一个不错的开始。同时，多线程技术对于现代程序员来说是必不可少的技能之一，尤其是像GCD这样的高级技术能够掩盖你对多线程理解不足的问题。然而，这并不意味着你可以忽视其重要性。相反，你应该深入学习以确保写出高质量且稳定的多线程代码。

### 3. 实践
有了足够的编码经验和理论知识后，接下来就是将其付诸实践了。通过实际操作，我们可以更好地理解和运用所学知识。在此过程中，保持谦逊态度非常重要——勇于承认过去的不足，并确保每次产出都有所改进。

### 4. 重温理论
随着实践经验的增长，你会发现之前难以理解的概念现在变得清晰起来。此时，重新回顾那些曾经似懂非懂的内容，往往会有新的收获。即使是以前自认为已经完全掌握的知识点，再次温习也能带来更深层次的理解。

### 5. 再实践
在这个阶段，你不仅具备了丰富的实战经验，还能灵活运用多种理论指导具体项目。但是，仍需时刻反省自身的工作方式是否足够专业。回头审视旧代码时，可能会惊讶于当时的做法多么不成熟。这时，你就进入了自我反思阶段，找到了适合自己的学习方法。

### 6. 总结
不要过于得意忘形。除了不断提升自身水平外，还需要学会总结归纳。无论是学习心得还是项目经验，都应该形成系统化的文档。如果你能在实践中提炼出独到见解，并不仅仅局限于使用现有模式，那将更加理想。

### 7. 分享
分享是最好的学习催化剂。当你准备向他人传授知识时，会发现自己对某些概念的理解还不够透彻。这将迫使你进一步深入研究，直到真正融会贯通为止。

以上便是我认为程序员提升设计能力所需经历的主要阶段。除此之外，我还想补充几点有助于提高设计能力的方法：

- 养成先设计再编码的习惯。
- 设计优先于编码，接口优于实现。
- 不盲目追随设计模式。
- 保持空杯心态，虚心向周围人学习。

希望这些分享对你有所帮助！期待听到更多关于这个话题的讨论。

---

# Framework的学习方法探讨

大家好，我是陆晓明，目前就职于一家互联网手机公司担任Android系统开发工程师。很高兴有机会在这里与大家分享我在手机行业九年来的经验和学习Android的方法。今天的话题是如何有效地学习和调试Framework。

首先，我们需要了解Android平台主要由以下几个组件构成：
- **Linux内核**
- **Android Runtime**
- **原生C/C++库**
- **Java API框架（即Framework层）**
- **系统应用程序**

Framework层包含了我们在应用开发过程中调用的所有系统级API的实现。例如，TextView、Button等控件以及ActivityManager、NotificationManager等服务都在这里定义。那么，我们应该如何高效地掌握这部分知识呢？

### 常见学习方法
- 阅读书籍：有助于构建完整的知识框架，但对于解决具体问题只能提供大致方向。
- 直接阅读源码：虽然效率较低且难度较大，但对于深入理解底层机制非常有帮助。
- 打Log和堆栈信息：相比直接读源码而言效率有所提高，但仍需频繁编译添加额外代码。
- 使用调试工具：最直观便捷的方式，但需要安装相应的调试版本环境。

### 调试技巧
对于Java部分的调试，可以使用Android Studio进行。以下是基本步骤：
1. 打开Genymotion或其他模拟器，启动指定版本的Android镜像文件。
2. 在目标进程中设置断点（如SystemServer进程中的ActivityManagerService类）。
3. 通过菜单栏选择`Run -> Attach debugger to Android process`，然后勾选显示所有进程选项并连接至相应进程。
4. 触发相关事件（如点击桌面图标），观察断点是否生效。
5. 利用IDE提供的调试功能逐步执行代码，分析变量值及调用关系。

此外，还可以通过查看系统日志（Logcat）来获取更多信息。结合命令行工具（如ps、grep等）定位特定进程及其子线程状态也非常有用。

总之，通过上述方法，我们可以更加高效地学习和理解Framework层的工作原理。希望大家能够从中受益，并在今后的工作中得心应手！

![](https://static001.geekbang.org/resource/image/bf/f1/bf8fdc35ddccb10b1161d8ca7eb8f8f1.jpg)