# Optimized Text

## Theorem 10: OS Isolation
Let Θ and Θ' be execution traces such that Θ ≈ Θ'. If \( t_1 \sim t'_1 \) are the first states of traces Θ and Θ' respectively, then Θ ∼ Θ', i.e., Θ and Θ' are indistinguishable to the attacker system \( OA \). The proof of this theorem follows from the unwinding lemmas by co-induction on the execution traces.

### System-Level Security for S-Constant-Time
We define a relation between MachIR instructions and system-level actions, such that an instruction is related to an action if they have the same effect. To achieve this, we use a mapping from language variables to virtual addresses, ensuring that program variables marked as stealth by the type system are mapped to stealth addresses in the platform. This relation is naturally extended to programs and traces. Using this extended relation, we define the concurrent execution of an attacker and a victim program ((A || p)[t]) and state Proposition 5. The proof of this proposition is a direct consequence of Theorem 10, demonstrating that S-constant-time programs are protected against cache-based attacks in virtualization platforms.

## Evaluation
We tested the effectiveness of our type systems on two sets of examples:
1. Small programs that violate the constraints of constant-time algorithms, e.g., branching on secret values.
2. A representative set of cryptographic implementations, including some vulnerable to cache-based attacks on common platforms and constant-time algorithms designed to avoid such attacks.

In all cases, we used standard and publicly available implementations, made minor code modifications, compiled them using CompCert, and ran our certified type system on the MachIR (or equivalently x86) programs output by the compiler. Figure 1 summarizes the list of examples analyzed, providing the number of variables marked as stealth and the amount of stealth memory required for secure execution.

### AES (Advanced Encryption Standard)
AES is a symmetric encryption algorithm selected by NIST in 2001 to replace DES. It is widely used and anticipated to remain the prevailing block cipher for the next 20 years. Although NIST claimed the selected algorithm was resilient against side-channels, AES is a prominent example where the sequence of memory accesses depends on the cryptographic key. Most AES implementations use S-boxes and other lookup tables to bypass expensive operations, making them vulnerable to cache-based attacks. 

For instance, Bernstein [17] reported a simple timing attack in 2005, allowing the recovery of AES keys by exploiting the correlation between execution time and cache behavior. Tromer, Osvik, and Shamir [48] further reported several effective cache-based attacks, including one that does not require knowledge of the plaintexts or ciphertexts. Bonneau and Mironov [19], Aciiçmez, Schindler, and Koç [2], and Canteaut, Lauradoux, and Seznec [21] also reported improvements. Bangerter, Gullasch, and Krenn [30] reported a new cache-based attack with almost real-time key recovery, and Ristenpart et al. [42] showed that cache-based attacks can be realized in cloud architectures based on virtualization. Kasper and Schwabe [31] reported a constant-time implementation of AES.

Using our S-constant-time type system on the PolarSSL implementation of AES, we proved that 4kB of stealth memory is sufficient for secure execution.

### DES and BlowFish
DES and BlowFish are symmetric encryption algorithms widely used before AES. They are designed under similar principles and rely on S-boxes. Cache-based attacks against DES and BlowFish were reported by Tsunoo et al. [49] and Kelsey et al. [32], respectively. Applying our S-constant-time type system to PolarSSL implementations of both algorithms, we proved that only a small amount of stealth memory (2kB for DES and 4kB for BlowFish) is required for secure execution.

### SNOW
SNOW is a stream cipher used in standards such as the 3GPP encryption algorithms. Its implementation relies on table lookups for clocking its linear feedback shift register (LFSR). Cache-based attacks against SNOW and similar LFSR-based ciphers were reported by Leander, Zenner, and Hawkes [37]. Applying our S-constant-time type system to an ECRYPT implementation of SNOW, we proved that 6kB of stealth memory is sufficient for secure execution.

### RC4
RC4 is a stream cipher introduced by Rivest in 1987 and used in cryptographic standards such as SSL and WPA. It is based on a pseudo-random generator that performs table lookups. Chardin, Fouque, and Leresteux [22] presented a cache-based attack against RC4. Analyzing the PolarSSL implementation of RC4 with our S-constant-time type system, we proved that the program can execute securely with only 0.25kB of stealth memory.

### TEA, Salsa20, SHA256
We applied our constant-time type system to cryptographic algorithms that avoid performing table lookups with indices dependent on secrets: Tiny Encryption Algorithm (TEA), Salsa20, and SHA256. For SHA256, we considered the input to be secret to demonstrate its suitability for password hashing. In all cases, our type system established that the programs are secure without using stealth memory.

### RSA
RSA is a widely used encryption algorithm. We applied our constant-time type system to implementations of modular exponentiation. As expected, our type system rejected implementations that branch on secrets and accepted constant-time implementations.

## Related Work
### Side-Channel Attacks in Cryptography
Kocher [36] presented a practical timing attack on RSA and suggested that many vectors, including the cache, can be exploited for side-channel attacks. Aciiçmez and Schindler [1] demonstrated that both data and instruction cache attacks are effective. Over the last decade, researchers have developed abstract models of cryptography that capture side-channels and developed constructions secure in these models, as surveyed in [28].

### Analysis Tools for Cache-Based Attacks
CtGrind [7] is an extension of ValGrind that checks whether an implementation is constant-time. CacheAudit [26] is an abstract-interpretation-based framework for estimating the amount of leakage through the cache in straight-line x86 executables. These guarantees hold for a single run of the program, i.e., in the non-concurrent attacker model. A follow-up [14] provides an upper bound for the leakage of AES in an abstract version of the concurrent attacker model, but the bound is valid only under strong restrictions, such as scheduling.

### Language-Based Protection Mechanisms
Many authors have developed language-based protection methods against side-channel attacks. Agat [3] defined an information flow type system that only accepts statements branching on secrets if the branches have the same pattern of memory accesses and a type-directed transformation to make programs typable. Molnar et al. [40] defined the program counter model, equivalent to path non-interference, and provided a program transformation for security in this model. Coppens et al. [24] used selective if-conversion to remove high branches in programs. Zhang et al. [51] developed a contract-based approach to mitigate side-channels, using a type system for enforcement and informal analyses for hardware compliance. Stefan et al. [47] also showed how to eliminate cache-based timing attacks, but their adversary model differs.

Liu et al. [39] defined a type system for memory-trace non-interference in the setting of oblivious RAM, with similar motivations to ours but operating on source code and dealing with a different attacker model.

### OS Verification
OS verification is an active research field. One recent breakthrough is the machine-checked refinement proof of the seL4 microkernel [35], with subsequent proofs showing it enforces integrity, authority confinement [45], and intransitive non-interference [41]. The formalization does not model cache or side-channel attacks.

Dam et al. [25] formally verified information flow security for a simple separation kernel for ARMv7, based on an extant model of ARM in HOL. Extending the approach to handle the cache is left for future work.

Our model of virtualization is inspired by recent work [11], which proves isolation in an idealized model of virtualization with a shared cache. However, their model assumes a virtually indexed virtually tagged (VIVT) cache and a write-through policy, simplifying the isolation result. Our notion of state equivalence is more complex, making the proof of isolation more challenging.

### Stealth Memory
Stealth memory, introduced in [29], is a flexible system-level mechanism to protect against cache-based attacks. A recent implementation, StealthMem, based on Microsoft Hyper-V hypervisor, is reasonably efficient, with around 5% overhead for SPEC 2006 benchmarks and less than 5% for cryptographic algorithms. Both [29, 34] lack rigorous security analysis and language-based support for applications.

### Verified Cryptographic Implementations
There are various methods to verify cryptographic implementations, including type-checking [18], deductive verification [27], code generation [20], and model extraction [4]. However, these works do not consider side-channels. Almeida et al. [5] extended the EasyCrypt framework [13] to reason about the security of C-like implementations in idealized models of leakage, leveraging CompCert to carry security guarantees to executable code.

### Verified Compilation and Analyses
CompCert [38] is a flagship verified compiler used and extended in many ways. Type-preserving and verifying compilation are alternatives considered for security purposes, such as Chen et al. [23] and Barthe et al. [16]. Formal verification of information flow analyses is an active area of research, with Barthe et al. [15] and Amtoft et al. [6] formally verifying type-based and logic-based methods for enforcing information flow policies in programs. Azevedo et al. [8] formally verified a clean-slate design that enforces information flow.

## Final Remarks
Constant-time cryptography is often advocated as a solution against cache-based attacks. In this work, we developed an automated analyzer for constant-time cryptography and provided the first formal proof that constant-time programs are protected against concurrent cache-based attacks. We extended our analysis to the setting of stealth memory, developing the first formal security analysis of stealth memory. Our results have been formalized in the Coq proof assistant and validated experimentally on a representative set of algorithms. Future work includes extending our analysis to constant-time programs that branch on secrets.

### Acknowledgements
We are grateful to Martín Abadi for suggesting to look at stealth memory. The work of G. Betarte, J. Campo, and C. Luna was partially funded by project CSIC/Convocatoria 2012, Proyectos I + D, VirtualCert - Fase II, Uruguay.

### References
[1] O. Aciiçmez and W. Schindler. A vulnerability in RSA implementations due to instruction cache analysis and its demonstration on OpenSSL. In CT-RSA’08, volume 4964 of LNCS, pages 256–273. Springer, 2008.
[2] O. Aciiçmez, W. Schindler, and Çetin Kaya Koç. Cache based remote timing attack on the AES. In CT-RSA 2007, volume 4377 of LNCS, pages 271–286. Springer, 2007.
[3] J. Agat. Transforming out Timing Leaks. In Proceedings POPL’00, pages 40–53. ACM, 2000.
[4] M. Aizatulin, A. D. Gordon, and J. Jürjens. Computational verification of C protocol implementations by symbolic execution. In CCS 2012, pages 712–723. ACM,