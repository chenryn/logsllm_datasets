b1−→ Θ1 ∼ tov
2 ֒
b2−→ Θ2
tov
1 ֒
t1 ∼ t2 Θ1 ∼ Θ2
toa
1 ֒ b−→ Θ1 ∼ toa
2 ֒ b−→ Θ2
Theorem 10
(OS isolation). Let Θ and Θ′ be execu-
tion traces such that Θ ≈ Θ′. If t1 ∼ t′
1 the
ﬁrst states of traces Θ and Θ′ respectively, then Θ ∼ Θ′,
i.e. Θ and Θ′ are indistinguishable traces for the attacker
system oa.
1, with t1 and t′
The proof of the theorem follows from the unwinding lemmas
by co-induction on the execution traces.
System-level security for S-constant-time. We deﬁne a
relation between MachIR instructions and system-level ac-
tions, such that an instruction is related to an action if they
have the same eﬀect. In order to do this we use a mapping
from language variables to virtual addresses that guarantees
that program variables marked as stealth by the type system
are mapped to stealth addresses in the platform. The rela-
tion between instructions and actions is naturally extended
to programs and traces. With this extended relation, we
deﬁne the concurrent execution of an attacker and a victim
program ((A k p)[t]), and state Proposition 5. The proof
of this proposition is a direct consequence of Theorem 10,
and shows that S-constant-time programs are protected to
cache-based attacks in virtualization platforms.
7. EVALUATION
We have tested the eﬀectiveness of our type systems on
two sets of examples. The ﬁrst set of examples consists
of small programs that violate the constraints of constant-
time algorithms, e.g. branch on secret values. The second
set of examples consists of a representative set of crypto-
graphic implementations, including some that are vulnerable
to cache-based attacks on common platforms, and constant-
time algorithms that were speciﬁcally designed to avoid such
attacks. In all cases, we picked standard and publicly avail-
able implementations of the constructions, and after per-
forming very minor modiﬁcations of the code6, compiled
them using CompCert, and run our certiﬁed type system
on the MachIR (or equivalently x86) programs output by
the compiler. Figure 1 summarizes the list of examples an-
alyzed, and provides in each case the number of variables
marked as stealth, and the amount of stealth memory that
is required to execute the program securely.
AES. Advanced Encryption Standard (AES) is a symmet-
ric encryption algorithm that was selected by NIST in 2001
to replace DES. AES is now used very widely and is antic-
ipated to remain the prevailing blockcipher for the next 20
years. Although NIST claimed the selected algorithm re-
silient against side-channels, AES is a prominent example
of an algorithm in which the sequence of memory accesses
depend on the cryptographic key.
Most applications of AES require that encryption and de-
cryption be very eﬃcient; therefore, the AES speciﬁcation
advises using S-boxes and other lookup tables to bypass ex-
pensive operations, such as arithmetic in the ﬁeld GF(28).
As a result of using S-boxes, most AES implementations are
vulnerable to cache-based attacks, and fail to comply with
even the weakest security guarantees. In 2005, Bernstein [17]
reports on a simple timing attack which allows to recover
AES keys by exploiting the correlation between execution
time and cache behavior during computation. Shortly af-
terwards, Tromer, Osvik, and Shamir [48] report on several
cache-based attacks against AES, including an eﬀective at-
tack that does not require knowledge of the plaintexts or the
ciphertexts. Further improvements are reported by Bonneau
and Mironov [19], Acii¸cmez, Schindler and Ko¸c [2], and Can-
teaut, Lauradoux and Seznec [21]. More recently, Bangerter,
Gullasch and Krenn [30] report on a new cache-based attack
in which key recovery is performed in almost real-time, and
Ristenpart et al [42] show that cache-based attacks are not
conﬁned to closed systems, and can be realized in cloud ar-
chitectures based on virtualization.
In a diﬀerent line of
work, Kasper and Schwabe [31] report on a constant-time
implementation of AES.
As a testcase for our approach, we have applied our S-
constant-time type system to the PolarSSL implementation
of AES. Our type system is able to prove that 4kB of stealth
memory is suﬃcient to execute AES securely.
DES and BlowFish. Data Encryption Standard (DES) and
BlowFish are symmetric encryption algorithms that were
widely used until the advent of AES. They are designed un-
der the same principles as AES, and their implementation
also relies on S-boxes. Cache-based attacks against DES
and BlowFish are reported by Tsunoo et al [49] and Kelsey
et al
[32] respectively. We have applied our S-constant-
time type system to PolarSSL implementations of both al-
gorithms; again, our tool proves that only a small amount
of stealth memory (resp. 2kB and 4kB) is required for the
programs to execute securely.
6We have modiﬁed some examples to declare some arrays
as global. This is a consequence of the relative coarseness
of the alias analysis, and could be solved by formalizing a
more precise value analysis.
SNOW. Snow is a stream cipher used in standards such as
the 3GPP encryption algorithms. Its implementation relies
on table lookups for clocking its linear feedback shift register
(LFSR). Cache-based attacks against SNOW—and similar
LFSR-based ciphers—are reported by Leander, Zenner, and
Hawkes [37]. We have applied our S-constant-time type sys-
tem on an ECRYPT implementation of SNOW; our tool
proves that SNOW can be executed securely with 6kB of
stealth memory.
RC4. RC4 is a stream cipher introduced by Rivest in 1987
and used in cryptographic standards such as SSL and WPA.
It is based on a pseudo-random generator that performs ta-
ble lookups. Chardin, Fouque and Leresteux [22] present a
cache-based attack against RC4. Analyzing the PolarSSL
implementation of RC4 with our S-constant-time type sys-
tem proves that the program can execute securely with only
0.25kB of stealth memory.
TEA, Salsa20, SHA256. We have applied our constant-
time type system to some cryptographic algorithms that
carefully avoid performing table lookups with indices depen-
dent on secrets: Tiny Encryption Algorithm, a block cipher
designed by Needham and Wheeler; Salsa20, a stream ci-
pher designed by Bernstein, and SHA256. For the latter,
we consider the input to be secret, with the intention to
demonstrate that SHA256 is suitable to be used in pass-
word hashing. In all cases, our type system establishes that
the programs are secure without using stealth memory.
RSA. RSA is a widely used encryption algorithm. We have
applied our constant-time type system to implementations
of modular exponentiation. As expected, our type system
rejects implementations that branch on secrets and accepts
constant-time implementations.
8. RELATED WORK
Side-channel attacks in cryptography. In [36], Kocher
presents a pratical timing attack on RSA and suggests that
many vectors, including the cache, can be exploited to launch
side-channel attacks. Acii¸cmez and Schindler [1] demon-
strate that not only data cache, but also instruction cache
attacks are also eﬀective. Over the last decade, researchers
have developed abstract models of cryptography that cap-
ture side-channels, and developed constructions that are se-
cure in these models, see e.g. [28] for a survey.
Analysis tools for cache-based attacks. CtGrind7 is an
extension of ValGrind that can be used to check automati-
cally that an implementation is constant-time.
CacheAudit [26] is an abstract-interpretation based frame-
work for estimating the amount of leakage through the cache
in straightline x86 executables. CacheAudit has been used
to show that several applications do not leak information
through the cache and to compute an upper bound for the
information leaked through the cache by AES. These guar-
antees hold for a single run of the program, i.e.
in the
non-concurrent attacker model. A follow-up [14] provides
7It was developed circa 2010 by Adam Langley and is avail-
able from https://github.com/agl/ctgrind/.
an upper bound for the leakage of AES in an abtract ver-
sion of the concurrent attacker model; however, the bound
is only valid under strong restrictions, e.g. on scheduling.
Moreover, the results of [14] cannot be used to assert the se-
curity of constant-time programs against concurrent cache
attacks.
Language-based protection mechanisms. Many authors
have developed language-based protection methods against
side-channel attacks. Agat [3] deﬁnes an information ﬂow
type system that only accepts statements branching on se-
crets if the branches have the same pattern of memory ac-
cesses, and a type-directed transformation to make programs
typable. Molnar et al [40] deﬁne the program counter model,
which is equivalent to path non-interference, and give a pro-
gram transformation for making programs secure in this
model. Coppens et al [24] use selective if-conversion to re-
move high branches in programs. Zhang et al [51] develop
a contract-based approach to mitigate side-channels. En-
forcement of contracts on programs is performed using a
type system, whereas informal analyses are used to ensure
that the hardware comply with the contracts. They prove
soundness of their approach. However, they do not consider
the concurrent attacker model and they do not provide an
equivalent of system-level non-interference. Stefan et al [47]
also show how to eliminate cache-based timing attacks, but
their adversary model is diﬀerent.
More recently, Liu et al [39] deﬁne a type system that an
information ﬂow policy called memory-trace non-interference
in the setting of oblivious RAM. Their type system has sim-
ilar motivations has ours, but operates on source code and
deals with a diﬀerent attacker model.
OS veriﬁcation. OS veriﬁcation is an active ﬁeld of re-
search [46]. One recent breakthrough is the machine-checked
reﬁnement proof of an implementation of the seL4 microker-
nel [35]. Subsequent machine-checked developments prove
that seL4 enforces integrity, authority conﬁnement [45] and
intransitive non-interference [41]. The formalization does
not model cache nor side-channel attacks.
Dam et al [25] formally verify information ﬂow security
for a simple separation kernel for ARMv7. The veriﬁcation
is based on an extant model of ARM in HOL, and relates an
ideal model in which the security requirements hold by con-
struction with a real model that faithfully respects the sys-
tem behavior. Extending the approach to handle the cache
is left for further work.
Our model of virtualization is inspired from recent work [11]
which proves isolation in an idealized model of virtualization
with a shared cache. However their model is based on a vir-
tually indexed virtually tagged (VIVT) cache and assumes
that the cache implements a write through policy, and is
ﬂushed upon context switch; thanks to these assumptions,
the cache is always consistent with the memory of the cur-
rent operating system. This coincidence allows lifting with-
out much diﬃculty the isolation result of earlier work [10],
which does not consider the cache.
In particular, the un-
winding lemmas of [10] can be used mutatis mutandis, with-
out the need to be reproved in this extended setting.
In
comparison, our notion of state equivalence is signiﬁcantly
more involved, and as a result the proof of isolation is far
more complex.
Stealth memory. Stealth memory is introduced in [29] as
a ﬂexible system-level mechanism to protect against cache-
based attacks. This ﬂexibility of stealth memory is con-
ﬁrmed by a recent implementation and practical evalua-
tion [34]. The implementation, called StealthMem, is based
on Microsoft Hyper-V hypervisor, and is reasonably eﬃcient
(around 5% overhead for the SPEC 2006 benchmarks and
less than 5% for cryptographic algorithms). Both [29, 34]
lack a rigorous security analysis and language-based support
for applications.
Veriﬁed cryptographic implementations. There is a wide
range of methods to verify cryptographic implementations:
type-checking, see e.g. [18], deductive veriﬁcation, see e.g. [27],
code generation, see e.g. [20] and model extraction, see e.g. [4].
However, these works do not consider side-channels. Re-
cently, Almeida et al [5] extend the EasyCrypt framework [13]
to reason about the security of C-like implementations in
idealized models of leakage, such as the Program Counter
Model, and leverage CompCert to carry security guarantees
to executable code; moreover they, instrument CompCert
with a simple check on assembly programs to ensure that
a source C program that is secure in the program counter
model is compiled into an x86 program that is also secure
in this model.
Veriﬁed compilation and analyses. CompCert [38] is a
ﬂagship veriﬁed compiler that has been used and extended
in many ways; except for [5], these works are not concerned
with security. Type-preserving and verifying compilation are
alternatives that have been considered for security purposes;
e.g. Chen et al [23] and Barthe et al [16] develop type-
preserving compilers for information ﬂow.
Formal veriﬁcation of information ﬂow analyses is an ac-
tive area of research; e.g. Barthe et al [15] and Amtoft et
al [6] formally verify type-based and logic-based methods
for enforcing information ﬂow policies in programs. More
recently, Azevedo et al [8] formally verify a clean-slate de-
sign that enforces information ﬂow.
9. FINAL REMARKS
Constant-time cryptography is an oft advocated solution
against cache-based attacks.
In this work, we have devel-
oped an automated analyzer for constant-time cryptography,
and given the ﬁrst formal proof that constant-time programs
are indeed protected against concurrent cache-based attacks.
Moreover, we have extended our analysis to the setting of
stealth memory; to this end, we have developed the ﬁrst for-
mal security analysis of stealth memory. Our results have
been formalized in the Coq proof assistant, and our analyses
have been validated experimentally on a representative set
of algorithms. One direction for future work is to extend our
analysis to constant-time programs which branch on secrets.
Acknowledgements. We are grateful to Mart´ın Abadi for
suggesting to look at stealth memory. The work of G. Be-
tarte, J. Campo and C. Luna was partially funded by project
CSIC/Convocatoria 2012, Proyectos I + D, VirtualCert -
Fase II, Uruguay.
References
[1] O. Acii¸cmez and W. Schindler. A vulnerability in rsa
implementations due to instruction cache analysis and
its demonstration on openssl. In CT-RSA’08, volume
4964 of LNCS, pages 256–273. Springer, 2008.
[2] O. Acii¸cmez, W. Schindler, and ¸Cetin Kaya Ko¸c. Cache
based remote timing attack on the AES. In CT-RSA
2007, volume 4377 of LNCS, pages 271–286. Springer,
2007.
[3] J. Agat. Transforming out Timing Leaks. In Proceed-
ings POPL’00, pages 40–53. ACM, 2000.
[4] M. Aizatulin, A. D. Gordon, and J. J¨urjens. Compu-
tational veriﬁcation of c protocol implementations by
symbolic execution. In CCS 2012, pages 712–723. ACM,