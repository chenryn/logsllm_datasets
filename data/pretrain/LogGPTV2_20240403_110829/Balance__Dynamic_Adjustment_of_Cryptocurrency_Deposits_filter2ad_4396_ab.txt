past actions are not considered. Hence, the game consists of single,
disconnected rounds, i.e. it is a single-shot game. Second, executing
a desired action depends on the publicly known payout p as well as
the agent specific costs cA caused by performing the action and the
expected loss of interest E[rDA]. An agent will choose this action
if it yields higher utility than the other actions8.
2.5 Receiving agent utilities
An agent B ∈ P receiving a certain action has a different utility
from the performing agent A. This agent has no influence on the
performance of the action of agent A if we assume that the payout
cannot be changed after commitments are made. We assume that
the agent that receives an action is reimbursed with the deposit
that is provided by the performing agent. The utilities depending
on A’s actions are calculated as in (3).
vB − p − cB ,
DA − vB − cB ,
if σA ∈ Σd
if σA ∈ Σu
uB(σA) =
(cid:40)
(3)
2.6 Agent types and adversaries
The performing agent A influences the utility for both performing
and receiving agents. Most importantly, the security of a cryptoe-
conomic protocol depends on a core assumption: adversaries are
economically rational and computationally bounded. Considering
Eq. (2), an agent A chooses to perform a desired action if the utility
of the desired action is higher than the utility of the undesired
action, i.e. p − cA − E[rDA] > vA − DA − cA − E[rDA]. Inspired by
the BAR model [1], this notation allows us to express three types
of agents, from which we can deduct the adversaries.
Definition 4 (Performing agent types). We categorise performing
agents into the following three types.
7We omit the valuation vA for the desired action σ ∈ Σd as we assume agents do
not have an intrinsic or external motivation to comply with the specifications of
agreements in π .
8This is a deterministic model where we assume that if an agents “cheats”, it loses its
deposit. However, one could extend the model to include a probability of the agent
being caught if the specification function ϕ includes non-determinism.
(1) Type Td: this type will always perform a desired action as
its utility resulting from a desired action is larger than the
valuation of an undesired action, i.e. vA ≪ DA + p.
(2) Type Tu: this type will always perform an undesired action
as vA ≫ DA + p. By definition, the deposit is never large
enough to prevent an undesired action by A.
(3) Type Tr : this type is undecided in the single-shot game set-
ting which decision to take as v ≈ DA + p.
By this definition, a cryptoeconomic protocol is only able to
ensure that economically rational adversaries, i.e. type Tr , and
honest participants perform desired actions. Malicious adversaries
as expressed by the type Tu cannot be economically motivated
to perform a desired action. These agent types will perform the
undesired action as their valuation for the undesired outcome (from
the perspective of the protocol designer) is much greater than the
economic damage due to the loss of their deposit.
Following Definition 4 the notion of security that we employ in
our construction.
Definition 5 (Security under rational agents). A cryptoeconomic
protocol is secure if a economically rational performing agent A
would not choose an undesired action because the utility of a desired
action is greater, i.e. u(Σd) > u(Σu).
2.7 Mechanism utilities
Social welfare describes the sum of all agent utilities in a mecha-
nism [51]. If we combine equations (2) and (3), we can calculate
the sum of utilities for performing and receiving agents {A, B} ∈ P
by considering the actions of performing agents A. Assuming that
every A is matched with at least one B, we split P into two groups
corresponding to whether the performing agents perform desirable
or undesirable actions. P is therefore comprised of a group ΛD,
for the pairs of agents containing performing agents who perform
desirable actions and ΛU for undesirable actions. Thus summing
for pair of agents x ∈ P, where there are X pairs, such that 2X = |P|:
(cid:40)(cid:80)X
(cid:80)X
u(σA) =
x=1(vx,B − cx,B − cx,A − E[rDx,A]),
x=1(vx,A − cx,A − vx,B − cx,B),
if A ∈ ΛD
if A ∈ ΛU
(4)
Hence, if we take all actions within a certain amount of time,
we can specify the utility for a protocol π. Notably, agents acting
individually rationally and truthfully after commitment does not
imply that the mechanism as a whole maximises social welfare.
3 SYSTEM OVERVIEW
We introduce a mechanism called Balance, a verifiable layered
curated registry. The idea is to use Balance as an extension to
an existing cryptoeconomic protocol, i.e πBalance, to control the
amount of deposit an agent has to provide to resolve the dilemma
of having “too high” or “too low” deposits. The general intuition of
the mechanism is displayed in Figure 1 and is as follows:
• Commitment: an agent A has to provide a deposit D1 to com-
mit to a protocol encoded by a smart contract. For protocols
with private information and event-dependency, the deposit
is typically set relatively high9. An agent is not trusted at
9For example, in the Dai stable coin, users have to provide at least a 150% deposit to
issue Collateralized Debt Positions (CDPs).
any point in time. However, an agent can reduce its deposit
by executing actions that are desired by the protocol.
• Execution: agents are tracked by a decentralised registry that
stores a ranking of their contributions towards the protocol.
Agents are initially assigned to the lowest layer which results
in the highest required deposit. When performing desired
actions, the agent collects a score within a round.
• Curation: if the agent’s score is high enough by the end of a
round, it moves to the next layer (provided there is a higher
layer). The mechanism defines a factor for each layer that is
multiplied with the base deposit. This will affect the deposit
an agent has to provide. Further, after each round, the score
of an agent is reset to retain an incentive to act in the best
interest of the protocol. Thereby, this mechanism introduces
a sequential game.
When an agent is assigned to a lower layer, i.e. having to provide
a higher deposit, the agent must ensure that the deposit requirement
is met within the current round. Otherwise, agents will move down
a layer or be removed from the registry.
3.1 Actors
Balance includes three actors with the following roles.
(1) Performing agent A: an agent A is committed to πBalance
and chooses action σ ∈ {Σd , Σu} evaluating to true or false
with respect to the specification ϕ of an agreement A.
(2) Receiving agent B: a receiving agent B requested the perfor-
mance of an action σ ∈ Σd as expressed by the specification
ϕ in the agreement A. The execution of the action is left
with an agent A.
(3) Registry R: the registry is a smart contract implemented
on a ledger. The registry keeps a mapping of scores of per-
forming agents in a round t, a mapping of agents to layers in
a round t, and updates the mapping of agents to scores and
layers during transition to the next round t + 1. The registry
has direct access to the result of a performing agent’s action
ϕ(σ) = {0, 1} to update the agent’s score.
Each actor is identified on the ledger using a private/public
key pair. We note that agents can take several identities on the
blockchain, i.e. Sybil identities are possible. The adjustment of
deposit and consequences of performing actions is bound to a public
key. An agent A that performs several desired actions to reduce its
deposit can have a Sybil identity A′. However, the identity A′ is
in the view of the registry R a separate agent and hence will not
benefit from the reduced deposit of the desired action sequence by
identity A. Further, we show in Section 6.2, that agents in Balance
cannot profit from Sybil attacks.
3.2 System properties
Balance achieves the following properties.
(1) Auditability: performing and receiving agents A and B have
public insight into the amount of deposit D and layer as-
signment of performing agents A → L (Section 3.3).
(2) Reduction of opportunity costs: Balance reduces the op-
portunity costs of locked-up deposits E[rDA] for performing
Figure 1: Balance is implemented as a smart contract and integrated into an existing cryptoeconomic protocol. Agents A, B,
C, and D are assigned to layers in the registry representing their deposit level. In step (1) they are performing actions as part of
a cryptoeconomic protocol. By performing these actions, they obtain a score that is forwarded to the Balance smart contract.
Step (2), is triggered by an agent’s actions and updates its scores. Scores reflect a reputation within a round, where the higher
the score the better. In step (3), the current round ends. The next interaction of an agent with the cryptoeconomic protocol
triggers step (4), the curation of agents to layers. The score of each agent is used to update the mapping of agents to layers,
whereby agents can either stay at the same layer, get promoted or demoted by one, or get removed from the registry. Updating
the assignment of an agent to a layer is determined by the upper and lower bounds of the layer an agent is currently assigned
to. Within that update, step (5) resets the scores of the agent for the next round. Last, in step (6), agents that changed their
layer are notified (e.g. via events emitted from a smart contract).
agent A by reducing deposit depending on the layer assign-
ment A → L (Section 4.1).
(3) Strategy-proofness: a performing agent A behaves truth-
fully with respect to its valuation of an outcome vA indepen-
dent of its type T (Section 5.2, 5.4).
(4) Transparency: assuming performing agents A1 and A2 pro-
vided the same initial deposit D, but are now assigned to
different layers such that DA1 ̸= DA2, B does not need to
choose between A1 and A2 as Balance ensures that each
deposit provides the same utility for A1 and A2 to act in the
interest of B (Section 5.5).
(5) Social welfare increasing: the joint welfare of perform-
ing agent A and receiving agent B is increased with Bal-
ance (Section 5.6).
(6) Sybil resistance: a performing agent A cannot gain addi-
tional utility from Balance by creating Sybil identities A′
(Section 6.2).
3.3 Blockchain model
Balance operates as part of π implemented on a blockchain. This
blockchain provides a ledger functionality as for example defined
in [3, 4, 9, 42]. We assume that the ledger has finality as in con-
sensus protocols like [6, 38, 47]. Additionally, we assume given the
number of participants n in a consensus protocol, the number of
Byzantine faults is f < n/3. In cases where a consensus protocol
does not provide finality, like Nakamoto consensus [40], we assume
that a security parameter k is set such that with high probability the
transaction is securely included [18]. Apart from that, we assume
that less than 1/3 of miners are malicious [13]. Setting an appro-
priate parameter for k and having less than 1/3 miners malicious,
prevents the impact from selfish-mining attacks.
Aside from the ledger, we assume there is an execution environ-
ment and a scripting language available that supports the creation
of secure smart contracts to implement agreements A and the reg-
istry R, for example the Ethereum Virtual Machine [49, 50]. We
assume that the agreement A including its specification ϕ, pay-
ments p, and deposits D is implemented by a smart contract SC
such that SC ⇔ A. Further, we require the possibility of creat-
ing generic data structures to store the information about agents’
scores and layers as part the registry R and that such information is
readable by performing and receiving agents A and B. Moreover, we
assume that the cryptographic primitives in the ledger are securely
implemented.
We make no further assumptions regarding the blockchain. Min-
ers and adversaries are able to re-order transactions, censor transac-
tions, and read the information from transactions before and after
they are included in the blockchain.
Score A ? 100Score B ? 200Score C ? 90Score D ? 400Period t1Layer 1 ? {A,B}Layer 2 ? {C}Layer 3 ? {D}ABDCAgentsBALANCE Smart ContractScore A ? 0Score B ? 0Score C ? 0Score D ? 0Layer 1 = {A,C}Layer 2 = {B}Layer 3 = {D}(1) perform actions(3) period end(2) update scores(5) reset scoresPeriod t0Cryptoeconomic Protocol(4) curate agents?A?B?C?DBALANCE Smart Contracts(A)=100s(B)=200s(C)=90s(D)=400ABDCAgentsCryptoeconomic Protocollayer(B) = 2layer(C)=1(6) notify agents of layer and deposit updatesProperty 1 Auditability
The deposit D and mapping of performing agents to layers A → L
is publicly available within R.
3.4 Agent assumptions
We make the following assumptions. First, for clarity of exposition,
we make the simplification that if an agent performs a single desired
action at a certain time, they transition to the higher layer. This
is a simplification because in the full specification, agents would
need to perform a number of actions in order to change layer. This
assumptions strengthens the adversary, as the reduction of deposit
requires only a single action. Second, we assume that πBalance
unambiguously detects an undesired action, i.e. ϕ(σ) = 0. In this
case, the agent takes on a new identity in the protocol and is able
to continue to interact with the protocol starting again from the
lowest layer. Third, we assume that in the long run, the market for
a protocol π is perfectly competitive, in the sense that the price (or
payments) made in the system will be equal to the marginal cost
of each transaction. This assumption provides a higher incentive
to perform undesired actions as p = 0 reduces the utility of per-
forming a desired action as described in Eq. (2). Fourth, we assume
that performing an undesired action is free of direct costs10. This
assumption increases the utility for performing an undesired action
as we set cA = 0 on for the undesired action utility.
Overall, our assumptions are pessimistic: we assume agents gain
no payments from performing desired actions and can perform un-
desired actions free of direct cost. Hence, we ensure that incentive
compatibility holds even under these pessimistic assumptions (cf.
Section 5). In practice, we expect that these assumptions can be
modified to include positive payment vectors and costs for execut-
ing undesired actions. This would allow more aggressive deposit
reductions, however, calculating these are left as future work.
4 BALANCE
Extending π with Balance adds two properties. First, we introduce
the registry R consisting of layers as well as functions to update
the score of agents and to curate agents into layers.
Second, we include a score s into A such that:
A = ⟨ϕ, p, s, D⟩
(5)
s is added to the current agent’s score if the specification ϕ of
the agreement evaluates to true. All details of the agreement are
public knowledge.
4.1 Integrating layers
A layer is a set of agents that have to provide the same relative
deposit. We use Balance to assign agents to layers, making this
a verifiable layered curated registry as illustrated in Figure 2. In-
tuitively, the higher the score of an agent, the higher the layer an
agent is assigned to.
We formally define a finite order of layers {L1 ≺ ... ≺ Lω},
where each layer Lm ∈ L has a lower bound l, an upper bound
u and a deposit factor f ∈ R+. We explain the use of the bounds
in Section 4.3. The factors determine the ordering of layers. Each
10For example, an agent might go offline and not perform any action in A.
Figure 2: An intuition of Balance with three layers. The
more an agent contributes to the integrated protocol (mea-
sured by a score), the further it moves up the layers (from
1 to 3). The higher the layer, the lower the relative deposit
needed.
layer maps to a deposit level in order, L → D. For instance, L2
requires deposit D2.
Li = ⟨l, u, f ⟩
(6)
The set of agents are mapped to the layers, i.e. P → L. Each
agent is only mapped to a single layer at any point in time. The
layer function returns the layer an agent is currently assigned to.
We define the layer(A) as the current layer of an agent A, layer(A)+1
as the higher layer with a lower deposit factor, and layer(A) − 1 as
the lower layer with a higher deposit factor.
The layers are used to calculate the deposit an agent needs to
provide. We define a base deposit Dbase (for the lowest layer) and a
factor f that are used to calculate Dm, where m ∈ L. Further, the
deposit DA of an agent A is determined by the base deposit and the
factor of the layer the agent is currently assigned to.
Dm = Dbase fm
DA = Dbase flayer(A)
(7)
(8)
Factors are ordered similarly to the layers. Formally, factors are
a finite order { fω < ... < f1} where the factor corresponding to
the highest layer Lω is the smallest.
Property 2 Reduction of opportunity costs
Balance reduces deposit lock-up.
4.2 Updating scores