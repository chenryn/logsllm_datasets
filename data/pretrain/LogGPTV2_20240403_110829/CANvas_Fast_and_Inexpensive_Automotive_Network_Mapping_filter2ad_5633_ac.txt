source ECU, Esrc. This module outputs a mapping of source
ECUs to their set of source IDs. The main input to this module
is a passively-logged CAN trafﬁc dump, which contains en-
tries in the form of (Ii,tIi,n) where Ii is the ID of the message
and tIi,n is the timestamp of the nth occurrence of Ii.
5.1 Prior work and limitations
Cho et al. [11] use clock skew as a means of building an intru-
sion detection mechanism to identify an attack by a malicious
ECU. Speciﬁcally, this work uses timestamps of periodically-
received message IDs and posit that IDs with the same skew
originate from the same ECU.
To compute the clock skew of an ID Ii over time, Cho et
al. [11] perform the following steps: (1) compute Ii’s expected
period, µTi, (2) compute the offset, Oi, by subtracting the ex-
pected timestamp (using µTi from the actual timestamp), (3)
take the average of Oi over a batch of N messages, (4) add
Oiavg to an accumulated offset, Oacc, and (5) then compute the
skew, SIi, by taking the slope of Oacc versus time. This work
uses the Recursive Least Squares algorithm to minimize the
errors. After every batch of N messages, Oacc increases by Oi,
where k is the kth batch. From this plot, since Oi should be
constant, their formula for skew w.r.t. batch size sets SIi to:
skewf Cho
i
(N) =
kOi
kN =
Oi
N
(1)
As an extension to this work, Sagong et al. [29] note that the
skew of Equation 1 varies signiﬁcantly based on N and use
394    28th USENIX Security Symposium
USENIX Association
𝑨𝑨𝑨𝑨𝑩𝑩𝑩𝑩𝑪𝑪𝑪𝑪𝑫𝑫𝑫𝑫𝑬𝑬𝑬𝑬𝟏𝑩𝟏𝑩𝟐𝑨𝟐𝑨𝟑𝑨𝟑𝑨𝟒𝑫𝟒𝑫𝟓𝑪𝟓𝑪𝟔𝑬𝟔𝑬To potentially ﬁx this issue, we can attempt a strawman that
is not dependent on period or batch size.
(N,T ) = T N · kOi
skewf Straw
(5)
i
kT N = Oi
Ideally, accounting for both batch-size and message-period
(essentially batch-period, NT ) using Equation 5 should give
us a unique value that is common only among IDs from the
same ECU. We apply Equation 5 for all Ii of a vehicle, and
we attempt to establish distinct groupings of the computed
skew for each ID, SIi, which would identify which Ii share the
same Esrc.
Unfortunately, this is a difﬁcult task as Ii from the same Esrc
still do not have similar skews. This issue is further demon-
strated as SIi varies across different data dumps or even seg-
ments of a given dump. Upon further inspection, we ﬁnd that
the measured SIi is affected by the deviation in an ID’s pe-
riod. This deviation in the period, σpi, is attributed to sources
of “noise”, i.e. the period of a given message varies due to
scheduling, queuing and arbitration delay. We also ﬁnd that
some Ii produce SIi with more deviation than others and pro-
duce widely-varying skew values, thus making our straw-man
solution an unlikely candidate for source mapping.
Observation 2: We need a method of extracting the clock
skew invariant that is: (a) independent of the period of Ii
and (b) robust to noise in the period.
5.2 Pairwise offset tracking
Issue with straw-man: In Equation 5, it is clear that, relative
to the receiver, this “skew” function computes offset rather
than true skew. Following our deﬁnitions in §5, a plot of
relative offset over time should either be linearly increasing
or decreasing if there is a nonzero skew between two clocks.
In other words, if the relative skew between an Esrc and the
receiver is non-zero, then we should observe a gradual change
in the offset. However, previous work [11, 29] fails to capture
this change in offset over time.
Relative offset as a unique identiﬁer: As mentioned in §5,
clock offset and skew of an ECU relative to another ECU is
distinct. We must note that the clock offset measured from
one ID, I1, of an Esrc may not be the same as the offset of
another ID, I2, from Esrc. If the initial transmission time of I1
differs from that of I2, the OI1 could not equal OI2. Rather, the
invariant here is the change in relative offset, ∆OIi; as the skew
of Esrc relative to the receiver is a constant nonzero value, the
∆OIi will be a constant nonzero as well (the derivative of
offset is skew).
By measuring this change in offset, we can uniquely iden-
tify an Esrc, but we must ensure our method of extracting
this change in offset is (a) robust to a noisy period and (b)
period-independent. To address the issue of noise in the pe-
riod of Ii, pIi, we compute the relative offset between a pair
Figure 7: EA transmits IDs 0x570, 0x571 and 0x572 at
the same period and EB transmits IDs 0x262, 0x4C8 and
0x521 at different periods. Above are plots of
accumulated clock offset vs. samples for EA and EB using
the algorithm by Cho et al. [11].
an updated formula for SIi w.r.t. batch size:
skewf Sagong
i
(N) = N · kOi
kN = Oi
(2)
Using data from a real vehicle, we now highlight a key
limitation of Equations 1 and 2. Consider Figure 7: (1) EA is
the source of IDs 0x570, 0x571 and 0x572, which share the
same period and (2) EB is the source of IDs 0x262, 0x4C8
and 0x521, which each have different periods. In Figure 7,
we use skewf Cho
i with N = 20 to plot the skew of all six IDs;
skewf Sagong
produces similar results. We can correctly con-
clude from Figure 7 that the IDs of EA originate from a single
ECU. However, from Figure 7, we will incorrectly conclude
that IDs 0x262, 0x4C8 and 0x521 originate from three sepa-
rate ECUs. Our analysis and experiments shed light on why
these approaches fail–the skew value they compute is period-
dependent.
i
As such, we update Equations 1 and 2 w.r.t. period T and
batch size N:
skewf Cho
i
skewf Sagong
i
(N,T ) =
kOi
kT N =
(N,T ) = N · kOi
Oi
T N
kT N =
(3)
(4)
Oi
T
USENIX Association
28th USENIX Security Symposium    395
 0 0.1 0.2 0.3 0.4 0.5 0.6 0 20 40 60 80 100Accumulated Clock Oﬀset (s)Samples0x5700x5710x572 0 0.1 0.2 0.3 0.4 0.5 0.6 0 20 40 60 80 100Accumulated Clock Oﬀset (s)Samples0x2620x4C80x521Algorithm 1 Pairwise offset tracking
1: function PAIRWISECOMPARE(I1,I2,logI1,logI2)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
p1 = (cid:98)ComputeAveragePeriod(logI1)(cid:99)
p2 = (cid:98)ComputeAveragePeriod(logI2)(cid:99)
n = lcm(p1, p2)/p1
m = lcm(p1, p2)/p2
posI1 = 0, posI2 = 0
∆I1,I2 = [ ]
while posI1 < len(logI1) and posI2 < len(logI2) do
∆I1,I2.append(logI1[posI1]− logI2[posI2])
posI1+ = n
posI2 + = m
12:
13:
return true if σ(∆I1,I2) < threshold else f alse
end function
• p2 = l p1, where l is the ratio of the periods.
• OI2 = jOI1, where if j=1, then both IDs sent by same ECU;
• n = ml, where LCM(n,m) = l as depicted in Figure 8.
otherwise, they were sent by different ECUs.
By computing the difference between every n occurrences
of I1 and every m occurrences of I2, which occurs at the hyper-
period of I1 and I2, we produce the following equation:
OI1,I2 = (mp2 + OI2 + i2)− (np1 + OI1 + i1)
We ﬁnd that when we average the result of the above equation
across the entire data log, the expected value is 0 if I1 and I2
originate from the same ECU. In reality, this value is close to 0
due to the deviation of a message’s period. From experimental
data, we deﬁne a threshold of 1ms for the change in relative
offset, where a value under the threshold will classify the two
IDs with the same source ECU. Using this approach to revisit
the setup described in Figure 7, we correctly conclude that
IDs 0x262, 0x4C8 and 0x521 originate from the same ECU.
Practical challenges: While the above approach is correct,
there are a number of other practical challenges we need to
address to ensure accurate mapping:
1. Large hyper-period: Consider a hyper-period that is
“large”, or on the scale of several minutes, e.g. the hyper-
period of p1 = 980ms and p2 = 5008ms is over 20 minutes.
Since we only extract one relative offset value per hyper-
period, we would need hours of CAN trafﬁc to produce a
valid result. To ensure that our mapper is fast, this length
of trafﬁc log is unreasonable; we want to produce a full
network map in under an hour. Fortunately, with a pair-
wise approach, we can choose to not attempt a comparison
when the hyper-period is large; for example, if we assume
that the Esrc of I1 also transmits another ID, I3, where the
hyper-period of I1 and I3 is small, we can still determine
that I1,I3 ∈ Esrc.
2. Large period deviation, σpi: In early experiments, we dis-
covered messages that had a large measured σpi (we deﬁne
Figure 8: Timeline of two message IDs, I1 and I2, that
have periods, p1 = 7ms and p2 = 9ms. Their
hyper-period occurs every 63ms.
of two different IDs denoted by OI1,I2. By performing this
computation pair-wise, we expect OI1,I2 to have a deviation of
approximately 0 if I1,I2 ∈ Esrc as the sources of noise for I1,I2
should mostly be shared. In reality, this deviation is very close
but not exactly equal to 0; we deﬁne a practical threshold for
this deviation in §7.
With a pairwise approach to computing OI1,I2 and the
requirement for a period-independent approach, we face a
new challenge: determining at what point in time to ob-
serve this relative offset regardless of the period of I1 or I2.
Observation 3: Compute offset at the hyper-period of I1
and I2, or the least common multiple of their periods.
Measuring offset at the hyper-period: To guide our algo-
rithm design for computing ∆OI1,I2 over time, we ﬁrst model
two periodically-transmitted IDs observed on the CAN bus.
Consider two IDs, I1 and I2, from the same Esrc which trans-
mit at a period of p1 and p2, respectively. For example, let p1
be 7ms and p2 be 9ms. For now, we assume that the relative
offset between I1 and I2 is 0. This offset should not change
over time as they originate from the same Esrc. To accurately
compute the relative offset of these two IDs, OI1,I2, we must
select a time instant when the expected offset should also be
0: the hyper-period of I1 and I2, or the least common multiple
of p1 and p2. As seen in Figure 8, this time instant occurs at
63ms, or the lcm(7,9). Therefore, by computing the differ-
ence between the times reported from I1 and I2 every 63ms,
or the hyper-period of I1 and I2, we can track the value of
relative offset over time. If this relative offset is a nonzero
constant, then the two IDs originate from the same ECU.
With an input of several minutes of timestamped CAN data
to Algorithm 1, we can track relative offset over the timeline
of two message IDs. Note that each timestamp has a noise
component that stems from scheduling, queuing and arbitra-
tion delay. To compare whether two message IDs originate
from the same ECU, we ﬁrst assume that they are sent by
separate ECUs. The two message IDs, I1 and I2, have periods,
p1 and p2, and they have relative offsets, OI1 and OI2. We
draw the following relationships between these variables:
396    28th USENIX Security Symposium
USENIX Association
0𝑰𝟏𝑰𝟐0918273645546371421283542495663large as σpi ≥ 0.1pi) and, at ﬁrst, assumed that these mes-
sages were either aperiodic or sporadic (aperiodic with a
hard deadline). However, upon closer inspection, we no-
ticed that these messages appeared to be periodic in na-
ture. We observed three different patterns that altered the
measured σpi: (1) the period simply had a large σpi, (2)
periodic messages would occasionally stop transmitting for
some time, and (3) periodic messages were missing their
deadlines. With a large enough σpi, the deviation would
conceal an inconstant ∆OIi and make it difﬁcult to detect a
mismatch. We experimentally ﬁnd that a σpi greater than
8% of pi results in incorrect outputs. Therefore, CANvas
will choose to test Ii on the following cases when its σpi
is under a deﬁned threshold, which we set to σpi ≤ 0.08pi
from our experiments.
3. Periodic messages that occasionally stop: We ﬁnd that
some Ii are periodic and will stop transmitting for some
time, causing a measured σpi to be large. To combat this
issue, we only perform pairwise offset tracking when the
given message was actively transmitting. In the event we
compare two Ii that both occasionally stop and there is
no overlap of active transmissions, we then rely on our
pairwise approach to match the Ii to another ID from the
same Esrc.
4. Messages that miss deadlines: For some Ii with a large σpi,
we observe two different inter-arrival times: pi and 2pi.
When a task on one of the ECUs misses its deadline and
cannot produce a message on time, it will skip that cycle
and transmit during the next cycle [2]. Thus, when a dead-
line is missed, we will observe an inter-arrival time of 2pi.
In this situation, there are two options: (1) perform relative
offset tracking on portions of the log when deadlines are
not missed or (2) interpolate the missed inter-arrival times.
If a message frequently misses its deadline, the ﬁrst option
is not viable. To interpolate a missed arrival time, we insert
a psuedo-entry in the trafﬁc log with a timestamp equal to
the average of the preceding and the following timestamp.
Factors for mapping time: For source mapping, we experi-