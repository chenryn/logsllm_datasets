On the left, packet SNR matches effective SNR for the nearly ﬂat
link. However, for the right-most, deeply faded links, the packet
SNR decreases from 25 dB to 15 dB (10× transmit power reduc-
tion) as the effective SNR only drops by 4 dB (2.5×). This dif-
ference in how links harness power makes transmit power control
non-trivial.
To test predictions across power levels, we use them to trim ex-
cess transmit power without causing the highest rate for the link
to drop. We start with 88 1x1 links in T1 with 10 dBm (10 mW)
of transmit power, one CSI sample per link, and consider reduc-
tions in increments of 2 dB. At each reduced transmit power level,
we estimate the best supported rate on a link based on appropriate
thresholds, and continue the reduction if the original rate is sus-
tained. Once the ﬁnal transmit power is determined, we look up the
link’s actual measured PRR at that power at the given rate to check
the accuracy of the predictions. Figure 8 shows the power savings
and performance degradation of four different threshold schemes.
A good result here is power savings without a loss of performance;
the absolute amount of power savings is not meaningful as it de-
pends on the testbed. The Measured (Optimal) line shows the best
that can be done. Measured PRRs at all power levels are used to
guide power control decisions. Therefore, the ﬁnal delivery prob-
abilities are hardly decreased (all links have PRR>90%), yet most
links save a little power and some save a lot.
The graphs show that using effective SNR to predict how much
power to trim has a similarly good tradeoff. Impact on rate remains
limited, yet power is saved, more than 10 dB for around 10% of the
links. The gap between the Measured and the Eff SNR lines is due
to the fact the Eff SNR thresholds might be slightly conservative
for some links. To show that this trimming is tight, we also con-
sider trimming towards slightly lower thresholds (Effective SNR −
0.5 dB, solid line). This results in little additional power savings but
degrades more links so that they work partially. In comparison, the
Pkt SNR line shows the effects of using packet SNR to save power.
The savings are barely increased, but several links are degraded to
the point that some stop working altogether.
Interference. Finally, we investigate how an effective SNR-based
protocol can cope with interference. This is one of the largest poten-
tial weaknesses of this technique, because effective SNR is based
on measurements taken only during the packet preamble.
Figure 7: Effective SNR (for QPSK) versus packet SNR for ﬂat
(left) to faded (right) links.
Interestingly, we see that RSSI-based predictions are much better
for the 1x3 and 2x3 cases, though still not as accurate as effective
SNR, particularly for the high rates. The reason is spatial diversity:
spare receive antennas gather the received signal and combine to
make the channel more frequency-ﬂat. The effect is well-known,
though typically not observable using real 802.11 NICs. It suggests
that RSSI is a reasonable predictor for an 802.11 conﬁguration with
signiﬁcant diversity. However, observe that RSSI does not transfer
well across the antenna modes (as diversity gains and inter-stream
interference change unpredictably) which makes this less useful.
This is one reason that SISO rate adaptation schemes do not trans-
late to MIMO.
We conclude that effective SNR consistently and accurately in-
dicates the best rate for nearly all links and all conﬁgurations with-
out any per-link calibration. From now on, we use the thresholds
in these graphs to predict the working rate for any link. They
agree with the measured SNRs on a wired link (Figure 1(a)), which
strongly suggests that the effective SNR captures the fundamental
error characteristics of the link.
Finally, we note that neither effective SNR nor RSSI performs
well at the lowest modulation at low SNRs. We believe this artifact
arises from errors in the AGC values reported by the NIC, observed
by Judd et al. [10] and conﬁrmed by our data for Intel’s hardware.
Transmit power control. The results so far show we can predict
delivery over a range of transmit powers (as well as other choices).
We now show that CSI measured at one transmit power level is
useful to predict delivery at a different power level. This is valuable
for power control applications, e.g., pruning excess power to reduce
co-channel interference [21, 25, 17].
Note that changing transmit power has a different effect (in terms
of delivery and highest rate) on real links even if they start at exactly
00.20.40.60.8102468101214161820CDF over linksPower saving (dB)Eff SNR - 0.5dBMeasured (Optimal)Eff SNRPkt SNR00.20.40.60.815060708090100CDF over linksPacket reception rates (percentage)Eff SNR - 0.5dBMeasured (Optimal)Eff SNRPkt SNR0510152025300246810Packet SNR (dB)Effective SNR (dB)166We studied the variation of CSI measurements during interfer-
ence. We chose two nodes in testbed T2 that do not detect each
other with carrier sense and sent large packets designed to collide,
while monitoring the CSI recorded by all other receiving nodes.
We also varied the transmit power of the node designated as the
interferer from low to high to induce a large range of interfering
channels. For all but one of 20 links, the rate predicted by the ma-
jority of CSI measurements for correct packets was the same with
and without interference; the remaining link was off by a single
rate. We conclude that the mere presence of interference does not
completely invalidate effective SNR values, and thus transient in-
terference will not cause wild swings in transmit rate.
However, for continuous interference effective SNR will provide
an aggressive estimate, and will need another way to compensate.
This should be reﬂected in larger noise ﬂoor measurements by the
NIC,4 however our platform does not provide this information for
dropped packets. An alternative, that we have not yet explored,
might be an effective SINR metric that incorporates CSI measure-
ments from the interfering nodes to predict packet delivery.
6. APPLICATION TO RATE SELECTION
The most direct uses of packet delivery predictions are rate adap-
tion, transmit power control, and channel selection. Each of these
is a well-studied topic. As an example application, we study how
our model can inform rate adaptation. We ﬁrst use trace-driven
simulation to compare against the state-of-the-art rate adaptation
schemes for 802.11a/g over a range of channels. They provide a
well-established baseline against which we can gauge our perfor-
mance. Our goal is to perform as well as the best, already near-
optimal 802.11a/g schemes on their home ground, with a method
that has the advantages of simplicity, deployability, and generality.
Next, we show that our method extends well to 802.11n (MIMO)
and so provides ongoing value. Rate adaptation is an open problem
for 802.11n. Most schemes in the literature were not designed for
MIMO systems, and none of the ones that were have been tested on
real 802.11 channels.5
6.1 Rate Selection Algorithms
We experiment with ESNR, an algorithm based on our model,
plus SampleRate [5], the de facto rate selection algorithm in use to-
day, and SoftRate [28], a research algorithm with the best published
results.
SampleRate [5] is an implicit feedback scheme that uses only
information about packet reception or loss. It maintains delivery
statistics for different rates to compute the expected airtime to send
a packet, including retries. It falls back to a lower rate when the
airtime of the chosen rate exceeds (due to losses) the airtime of a
lower rate. Standard implementations send a packet to probe 1 or
2 higher rates every 10 packets, to determine whether to switch to
higher rates.
The main weakness of SampleRate is its slow reaction to change.
If the wireless channel quickly degenerates, SampleRate will in-
cur multiple losses while it falls back through intermediate rates.6
When the channel suddenly recovers, SampleRate’s infrequent prob-
ing converges to the new highest rate slowly. Algorithms such as
4Note that OFDM does not turn interference into inﬂated RSSI as
do the spread spectrum modulations used in 802.11b.
5The only experimental evaluation of MIMO rate adaptation we
know of is on Hydra [12]. It uses the USRP radios for 2 MHz chan-
nels that are relatively narrowband and ﬂat.
6The original SampleRate [5] did not reduce rate for retries, but
some implementations [10] and the version used in modern ker-
nels [24] do. This turns out to be important for good performance.
RRAA [29] aim to improve on SampleRate’s weaknesses, but as
they are less widely used we stick with SampleRate as a represen-
tative probe-based algorithm.
SampleRate is only deﬁned for SISO links. MIMO breaks some
of its assumptions, as higher rates can work when lower ones do
not due to different antenna modes. Thus, we only compare it for
802.11a/g experiments.
SoftRate [28] is an explicit feedback scheme that uses informa-
tion gleaned during packet reception at a given rate to predict how
well different rates will work. The input to these predictions is the
bit error rate (BER) as estimated from side-information provided by
the convolutional decoder. SoftRate chooses rates based on the per-
formance curves that relate the BERs for one rate (a combination of
modulation and coding) to another. Each rate will be the best choice
only during a predictable BER range. These predictions can help
SoftRate quickly identify the best rate. SoftRate has been shown to
dominate trained SNR-based algorithms such as CHARM [10] and
we do not evaluate against those directly.
SoftRate is deﬁned for SISO channels, like SampleRate, and its
predictions hold only for ﬁxed transmit power and antenna modes,
so it does not extend to MIMO systems. We only compare it for
802.11a/g experiments. To cover the full SISO range, we extended
the MIT implementation of SoftRate to QAM-64 and 2/3 and 5/6
rate codes.
ESNR uses our model in a very simple way: given recent chan-
nel state information, compute the highest rate conﬁguration that is
predicted to successfully deliver packets (PRR > 90%). It runs at
the receiver, measuring CSI on received packets and returning rate
changes to the sender along with the ACK like SoftRate. Finally,
to protect against poor choices near a rate boundary in our model,
we fall back one rate if consecutive packets must be retried and the
effective SNR level has not changed. This is a ﬁxed rule.
Like SoftRate, our algorithm obviates the search phase. There is
no calibration of dynamic thresholds. This is not rate adaptation so
much as rate selection that changes only because it tracks the chan-
nel’s evolution. And unlike SoftRate, the predictions of our model
hold over different antenna modes. This lets us run over 802.11n
rates as easily and in the same way that we run over 802.11a/g rates.
Thus, we report results from both 802.11a/g and 802.11n runs for
our algorithm.
Optimal. We also take advantage of simulation to add upper
bounds on achievable performance. This lets us assess how well
the algorithms perform on an absolute scale. The OPT scheme has
an oracle that knows the true highest rate that can be successfully
delivered at any given time. The Previous-OPT scheme knows the
optimal rate that worked on the channel for the previous packet and
uses it for the next transmission; it just does not know the future.
Since SoftRate and ESNR use an estimate of this previous channel
state, and SampleRate infers the recent channel state, they are un-
likely to beat Previous-OPT. The gap between Previous-OPT and
OPT is also likely to be signiﬁcant because of inherent wireless
channel variability.
6.2 Trace-driven Simulator
Although our ESNR algorithm runs in real time on a mobile
client with the Intel 802.11 NIC,7 we turn to simulations to com-
pare these algorithms. This is for two reasons. First, SoftRate runs
on a software-deﬁned radio, and cannot be implemented on a cur-
7We implemented a version of ESNR that randomly probes other
antenna modes to collect CSI and that also sends effective SNR es-
timates back to the transmitter, and ran it online against SampleRate
in human-scale mobility. We found that the probing and feedback
have little penalty, and our results match the simulator: the two al-
gorithms are separated by a small (5–10%) margin.
167rently available commercial NIC. Second, we want to compare the
algorithms over varied channel conditions, from static to rapidly
changing, to assess how consistently they perform. For example,
no algorithm will beat SampleRate by a signiﬁcant margin on static
channels, because it will quickly adapt to the channel. In contrast,
SoftRate performs well even when the channel is changing rapidly
due to mobility. However, it is hard to generate controllable high-
mobility experimental settings.
Trace. We collect real channel information for the simulations. A
mobile client in T1 that is moved at normal walking speed sends
short, back-to-back packets to stationary testbed nodes that record
the CSI. The CSI reﬂects frequency-selective fading over real, vary-
ing 20 MHz MIMO channels that is typically not observed with
more narrowband experimentation, e.g., on the USRP. Note that
CSI is estimated during the preamble of the packet transmission,
independent of the modulation and coding of the payload. There-
fore, the mobile transmitter can quickly cycle through all antenna
conﬁgurations (1x3, 2x3 and 3x3) by sending a single short UDP
packet at the lowest rate for each conﬁguration. This enables ﬁne
grained sampling of the channel every 650 µs. The following re-
sults are derived from a trace with approximately 85,000 channel
measurements taken over 55 seconds, spanning varying RF chan-
nels that range from the best 3-stream rates to SISO speeds.
Simulator. We feed this trace to a custom 802.11a/g/n simulator
written in a combination of MATLAB and the MIT C++ GNU Ra-
dio code. The simulator implements packet reception as shown
in Figure 3, including demodulation for BPSK through QAM-64,
deinterleaving, and convolutional decoding with soft inputs and soft
outputs. The measured CSI is interpolated to 56 carriers and serves
as the ground truth for the channel, and packets are correctly re-
ceived when there are no bit errors, or are lost. SampleRate, Soft-
Rate, and ESNR are implemented as described previously. To en-
sure that ESNR is not given the unrealistic advantage of ground
truth CSI, we corrupt the CSI at the level of ADC quantization,
which typically induces an error of ±1.5 dB in the output effective
SNRs. SoftRate estimates the BER directly during decoding.
To vary mobility, we replay the trace at different speeds. For ex-
ample, 4× mobility gives ESNR the CSI from every fourth trace
record. However, packet reception still uses all trace records. For
a packet to be correctly received in the accelerated trace, it must
be received over the intermediate records. We require correct re-
ception at ≥80% of the records to allow for coding. This models
a varying channel that we can only sample for CSI periodically, as
happens when CSI is measured during the packet preamble. Soft-
Rate operates using the 80th percentile soft estimate from the range.
We aim to evaluate the ability of these algorithms to respond to
changing channel conditions. Thus, our primary metric is the de-
livered PHY layer rate per trace index. Higher-layer factors such as
MAC backoff, link-layer packet aggregation, and TCP reactions to
loss, will affect how this rate translates to throughput.
6.3 Rate Adaptation Results
SISO Performance. We ﬁrst examine the performance of ESNR
for SISO rates. Figure 9 shows the rate over time for ESNR and
OPT over our trace. The performance metric is the average rate
over an interval because each algorithm gets an opportunity to send
a packet at the same point in the trace. The rate is averaged over a
window of 100 packets to smooth the data for readability. ESNR