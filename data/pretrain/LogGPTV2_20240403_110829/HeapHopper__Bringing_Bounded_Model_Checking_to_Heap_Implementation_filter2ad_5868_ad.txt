M sizes
O sizes
UAF sizes
M bytes
AW size
FF size
Allocator comparison
fastbin dup
house of einherjar
house of spirit
overlapping chunks
unsafe unlink
unsorted bin
poison null byte
house of lore
null-byte
tcache
7.2, 7.3, 7.4 ,7.5
7.6
7.6
7.6
7.6
7.6
7.6
7.6
7.6
7.7
7.8
M, F, O, DF, FF, UAF
M, F, UAF
M, F, O
M, F, FF
M, F, O
M, F, O
M, F, O, DF, FF, UAF
M, F, O
M, F, UAF
M, F, O
M, F, O, DF, FF, UAF
7
8
7
4
8
6
7
12
9
12
7
20, 200, 2000
8
56, 248, 512
48
120, 248, 376
128
20, 200, 2000
128, 256, 512
100, 1000
128, 256, 512
20, 200, 2000
1, 8 B
None
1 B
None
1 B
1 B
1, 8 B
1 B
None
1 B
1, 8 B
32 B
8 B
None B
None
None
None
32 B
None
32 B
None
32 B
0 B
0 B
0 B
0 B
0 B
0 B
0 B
0 B
0 B
Chunk-size
0 B
32 B
32 B
32 B
32 B
32 B
32 B
32 B
32 B
32 B
32 B
32 B
32 B
None
None
32 B
None
None
32 B
None
None
None
32 B
Table 1: The concrete model specification used in each experiment. This table shows the list of transactions used, as well as
the maximum amount of transactions for each permutation. Additionally, we display the concrete sizes used for M and the
concrete lengths used for O and UAF. Furthermore, the different amounts of symbolic bytes placed into memory are given
for new allocations returned by M, the AW target, and the FF objects. In addition to the limits in this table, we also used a
threshold T2 during pointer handling of 4,096 (see Section 5.3), and we limit the memory usage of the symbolic execution
engine while exploring a single compiled exploitation attempt to 32GB.
Allocator
OA
NHA
AWC
AW
dlmalloc 2.7.2
(M,F,O): M-M-M-F-O-M
(M,F,UAF): M-M-M-F-UAF-M-M
dlmalloc 2.8.6
musl 1.1.9
ptmalloc 2.23
(M,F,O): M-M-M-F-O-M
(M,F,UAF): M-M-M-F-UAF-M-M
(M,F,O): M-M-M-F-O-M
(M,F,UAF): M-M-M-F-UAF-M-M
(M,F,O): M-M-M-F-O-M
(M,F,UAF): M-M-M-F-UAF-M-M
(M,FF): FF-M
(M,F,O): M-M-O-F-M
(M,F,UAF): M-M-F-UAF-M-M
(M,F,O): M-M-M-F-O-O-F
(M,FF): FF-M
(M,F,UAF): M-M-F-UAF-M-M
(M,FF): FF-M
(M,F,O): M-M-M-O-F-M
(M,F,UAF): M-M-F-UAF-M-M
(M,F,FF): M-FF-F
(M-F-FF): M-FF-F
(M,F,O): M-M-O-F
(M,F,FF): M-FF-F
(M,F,O): M-M-O-F
(M,F,UAF): M-M-F-UAF-M
(M,F,UAF): M-M-F-UAF-M
(M,F,FF): M-M-F-FF-M-M
(M,F,UAF): M-M-F-UAF-M
ptmalloc 2.26
(M,F,O): M–M-O-F-M
(M,F,UAF): M-M-M-F-UAF-M-M
(M,FF): FF-M
(M,F,UAF): M-M-F-UAF-M-M
(M,F,UAF): M-M-F-UAF-M
(M-F-FF): M-FF-F
Table 2: Summary of the transactions necessary to violate the different security properties in the analyzed allocators’
implementations. For each allocator, the table shows (within parenthesis) the set of transactions necessary to violate a specific
security property. Every set is followed by an example of a transaction list violating the considered security properties using
transactions in the given set. Within the same cell, sets are listed sorted by the size of their corresponding list of transactions.
Two important results are immediately clear from the table: The newer version of dlmalloc is stronger than the older one
(since it does not allow NHA and AW), while the newer version of ptmalloc surprisingly introduces a new attack vector to
achieve AW. Specifically, in this new version, M-FF-F achieves AW, instead of just AWC (see Section 7.8 for details).
their set. Afterwards, we group the list of transactions by
those sets and sort each group by the number of transactions
needed to violate the considered security property. Finally,
we display each set for every exploitation primitive in the
table, together with one of the paths with the shortest size, as
an example of a list of transaction violating the considered
security property.
For instance, consider dlmalloc 2.7.2, where a NHA
exploitation primitive can be reached with three different sets
of transactions. In this case, the shortest sequence lengths
are two, five, and six, respectively.
In Table 3, we show all the known attacks on ptmalloc
we were able to reproduce. The rediscovery of these attacks
across different allocators can be identified by comparing the
list of transactions in Table 3 with those in Table 2.
7.2 Allocator: dlmalloc
The first library we analyzed is dlmalloc, which represents
one of the oldest allocator implementations that is still main-
tained. With its “textbook-like” design, it serves as a perfect
base to evaluate the advances in design and security of more
recent allocators. The fact that a lot of the newer allocators
are still inspired by dlmalloc or even based on the original
code, makes this result an even better measurement of the
allocator’s evolution.
Since the first release of dlmalloc in 1993, there have
been multiple changes to the code base, including a couple of
security hardening in 2005. Therefore, we analyzed two re-
leases of dlmalloc, 2.7.2, the latest version without any
security hardening and 2.8.6, the latest available version,
released in 2012.
108    27th USENIX Security Symposium
USENIX Association
dlmalloc 2.7.2. Comparing the list of transactions,
HEAPHOPPER rediscovered all known attacks against pt-
malloc from Table 3 that are feasible inside the defined
bounds, and thereby confirms that the original implementa-
tion was already vulnerable to them. In this allocator, the
sequence M-M-O-F produces an AW. This attack scenario is
typically called unlinking attack, and it is typically mitigated
in more modern allocators [28]. In this allocator, we also
found a new way to reach an AW based on a fake-free.
dlmalloc 2.8.6. The issue of having a relatively vulnerable
allocator implementation was already addressed in version
2.8.0, released in 2005 and improved until the latest version
in 2012. We analyzed this newer version of dlmalloc to
objectively evaluate how effective those additional security
mechanisms are, and how they would perform compared to
the simultaneously evolved ptmalloc. If we compare the
results to the known attacks from Table 3 again, we only find
two attacks that lead to an OA. Additionally, we find one new
way of reaching an AWC.
In order to better understand what causes this difference
in the results with respect to version 2.7.2, we took a look
at the code changes. After manually analyzing the addi-
tional checks, we figured out that the main reason for the
good result is the relatively simple implementation of dl-
malloc combined with effective consistency checks that
further reduce the attack surface. A good example is a check
introduced for handling pointers inside the heap metadata.
Before any operation based on a pointer’s value is performed,
the value is compared against the base address of the heap’s
current memory range. In case the value points below that
base, it is considered invalid and the program aborts. This
check is the reason why we did not find any way to trigger a
NHA in this version of dlmalloc.
7.3 Allocator: musl
One of the allocators inspired by dlmalloc is the C-library
musl. Similar to the latest dlmalloc, it contains basic
consistency checks to protect against metadata manipula-
tion. However, the results look similar to dlmalloc ver-
sion 2.7.2, with the only difference being that we did not
find a path to reach a NHA through an overflow and a con-
straint was added to the new AW attack we found. Therefore,
we can conclude that, inside our model’s bounds, the checks
introduced in the newer version of dlmalloc are far more
effective than the ones implemented in musl.
7.4 Allocator: glibc
Another allocator inspired by dlmalloc is ptmalloc,
used in glibc. ptmalloc is a significant more advanced
version of dlmalloc, with a lot more complexity introduced
to support performance. Because glibc is the de facto stan-
dard in the Linux world, ptmalloc is also widely used in
practice and therefore, security researchers have extensively
explored its exploitability [44]. Similar to dlmalloc, we
tested two different versions of this allocator.
ptmalloc 2.23. Version 2.23 of ptmalloc has been
released in 2016, and it is currently used in Ubuntu 16.04
LTS. HEAPHOPPER discovered all known attacks from Ta-
ble 3 that are inside our model’s bounds. Additionally,
HEAPHOPPER found a new way to get an AWC based on
a fake-free similar to the one in musl. With this result
ptmalloc is only slightly better than dlmalloc version
2.7.2, with additional checks restricting two of the AWs to
AWCs. Considering that version 2.23 was released in 2016
and comparing this result to musl and dlmalloc version
2.8.6, we did not expect these relatively bad results. The
main reason for this is the significantly higher complexity
in the implementation, leading to a bigger attack surface.
Even though a lot of different consistency checks have been
introduced, according to our results many of them are proven
to be mostly ineffective, as HEAPHOPPER found paths that
bypassed them.
ptmalloc 2.26. Version 2.26 of ptmalloc comes
with new consistency checks,
including Chris Evans’
patch, discussed in Section 2.3, and uses a new layer for
handling free chunks called tcache. Being the latest
release, and because of the additional consistency checks,
we expected it to be stronger than version 2.23, and
significantly stronger
than dlmalloc version 2.7.2.
However, the results indicate that the new release is rather a
step backward in terms of security, with a new AW and an
almost similar result for the other exploitation primitives. In
fact, considering the AWs, this library is the weakest across
all allocators apart from the textbook dlmalloc version
2.7.2. When analyzing the changes in the code to figure
out what causes this result, we traced down the problem
to the newly introduced tcache structures. To get more
insights into this issue we specifically studied the influence
of tcache in the overall ptmalloc security, as described
in Section 7.8
7.5 Summary