# 【技术分享】如何通过W3C光传感器API窃取浏览器隐私数据（含演示视频）
|
##### 译文声明
本文是翻译文章，文章来源：lukaszolejnik.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：260RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
在本文中，我会向大家介绍并演示一种非常巧妙的方法，可以通过用户智能手机或笔记本电脑的光传感器来窃取浏览器中的敏感信息。
简而言之，本文包括以下内容：
1、我们介绍了光传感器API的背景知识，现在人们正在讨论是否拓展这种API的应用范围，将其应用于网站上。
2、我们演示了用户设备的屏幕颜色如何影响光传感器，也解释了这种现象会带来安全性及隐私性方面的风险。我们着重介绍了如何利用这种原理提取浏览器记录以及窃取不同源页面中的数据，这样一来，攻击者可以读取用户敏感文档及图片的内容（比如，攻击者可以窃取用于用户账户恢复的二维码）。
3、我们讨论了浏览器厂商以及标准规范组织可以采取哪些对策以降低此类安全风险。
我们的攻击方法适用于当前版本的Firefox以及（启用实验性功能的）Chrome浏览器，针对带有光传感器的Android以及桌面设备（如MacBook
Pro）。
这篇文章由我（[@LukOlejnik](https://twitter.com/lukOlejnik/)）以及[@arturjanc](https://twitter.com/arturjanc/)共同完成，后者编写了一些非常棒的[PoC代码](https://arturjanc.com/ls/)。
**二、背景：智能手机上的光传感器**
现如今，所有的智能手机以及一些现代笔记本电脑都已经搭载了周围环境光传感器（ambient light
sensor）。这种传感器位于设备的顶部区域，通常与前置摄像头靠在一起。智能手机一直利用光传感器来调节屏幕亮度，以节省电源消耗，或者用来检测接近动作。周围光线信息可以用于开发响应式手机应用，也可以用来调整硬件配置。因此，光传感器数据也属于敏感信息，我在[之前的一篇文章](https://blog.lukaszolejnik.com/privacy-of-ambient-light-sensors/)中已提到过这一点。
光传感器返回的数据非常精确。传感器测量的光强度以勒克斯（lux）为计量单位，输出结果范围介于0（黑暗状态）以及数万lux之间。传感器所测得的频率相对较高，支持100-200毫秒粒度的测量间隔。
为了在与原生应用的竞争中占据一席之地，在不久的未来，网站可能具备读取光传感器数据的功能。目前，W3C设备以及传感器工作组正在讨论是否允许网站在不经过用户许可的情况下读取光传感器数据。目前，最新版本的Chrome以及Firefox浏览器都已实现了相关API。
**三、 传感器隐私**
本文的灵感源自于最近关于[通用传感器API](https://www.w3.org/TR/generic-sensor/)的[W3C讨论](https://github.com/w3c/sensors/issues/174)，其中排在前头的一个提案认为访问某些传感器数据时无需经过用户的许可。为了回应这个提案，我们决定调研环境光传感器（ambient
light
sensor，ALS）是否可以用于恶意场景，这里我想顺便提一下我之前关于[ALS安全性以及隐私性](https://blog.lukaszolejnik.com/privacy-of-ambient-light-sensors/)方面做的一些研究，我认为ALS可能会导致用户被追踪、用户账户以及数据被泄露：我通过一个例子演示了如何“检测两个人是否在同一时间位于同一个房间”，也分析了ALS应用于[检测银行PIN码](https://blog.lukaszolejnik.com/additional-security-and-privacy-risks-of-light-sensors/)方面的可能性。
在本文中，我们会把这些例子放在一边，重点介绍攻击者如何利用传感器数据从用户浏览器中提取隐私数据。
接下来，让我们来看一下真实的攻击场景。
**四、 通过光传感器窃取信息**
攻击者如何通过光传感器数据准确提取隐私数据？我们的攻击方法基于以下两个观测结果：
1、用户屏幕的颜色可以携带信息，处于安全方面考虑，网站无法直接获取这些信息。
2、攻击者可以根据光传感器数据区分不同的屏幕颜色。
我们稍后会详细介绍第二个结论，但简而言之，屏幕发出的光线可以影响光传感器测量结果，因此网站可以确定用户屏幕的颜色（或者在最简单的情况下，网站可以区分黑色的屏幕以及白色的屏幕）。
第一点结论可能更令人惊讶，毕竟所有的网站都可以控制它们在用户屏幕上的显示内容，既然如此，为什么这种数据会携带有用信息？至少在两种情况下，网站无法直接获取用户屏幕的部分颜色信息：
1、已访问链接的颜色。出于隐私原因，浏览器不会告诉开发者某个网页上显示的链接的真实颜色，否则恶意开发者可以使用[:visited](https://developer.mozilla.org/en/docs/Web/CSS/:visited)样式，检测用户历史记录中出现过哪些网址。
2、跨源（cross-origin）资源。[同源策略](https://en.wikipedia.org/wiki/Same-origin_policy)（same-origin
policy）会阻止evil.com直接访问victim.com上的资源。然而，虽然网站无法查看其他源的框架（frame）或者图片，但它们可以将这些资源显示在屏幕上，并且修改这些资源向用户呈现的具体方式，比如任意缩放以及改变这些资源的颜色。
我们的攻击方法依赖于这些资源在用户屏幕上的显示效果，通过探测这些资源的颜色，每次能够获取1比特信息。以下是这种攻击方法的操作过程（我们使用了早期实验用的演示场景，以提供详细的参考信息）。
**4.1 探测已访问链接**
网站可以针对已访问链接以及未访问链接应用不同的样式，然而无法检测这些链接如何呈现给终端用户，我们可以使用传感器来探测这些链接的真实颜色：
1、设置链接样式：已访问链接为白色，未访问链接为黑色。
2、校准：先显示一个白色背景，然后显示一个黑色背景，以识别用户环境中的光线水平。如果传感器读数出现明显波动，也可以据此来校准，不过这种方法更加困难。
3、逐一迭代列表中的链接，依次以填满整个屏幕的大矩形来显示每个链接。已访问的的链接会显示为白色，未访问的链接会显示为黑色。
4、记录下每个链接所对应的光线水平，以识别链接的颜色。由于我们已经在第二步校准了屏幕，因此我们可以识别读取到的是什么颜色。
最后，攻击者可以得到一个包含链接的列表，这些链接在屏幕上显示为白色，因此攻击者就能知道用户之前曾访问过哪些页面。
虽然在我们的演示场景中，我们假设操作过程中周围环境的光线条件没有发生改变，然而如果想要进一步修改PoC以适应动态环境应该也不是个问题。在第一个演示场景中，我们想强调的是，光线度数可能会发生变化，然而，在实际环境中想要克服这个障碍并不困难。
**4.2 检测跨源资源**
还有更加麻烦的一种情况，那就是攻击者有可能会借此在像素尺度上重现跨源图像以及框架，换句话说，攻击者可以知道给定的某个网站或图像如何呈现给受害者（在我们的演示场景中，我们重点关注的是图像资源，因为这类资源更容易提取）。在极端情况下，如果某个网站将二维码作为紧急状况下的账户恢复手段（[https://victim.com/account-code.png），此时攻击者就可以劫持受害者的账户。](https://victim.com/account-code.png%EF%BC%89%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%94%BB%E5%87%BB%E8%80%85%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8A%AB%E6%8C%81%E5%8F%97%E5%AE%B3%E8%80%85%E7%9A%84%E8%B4%A6%E6%88%B7%E3%80%82)