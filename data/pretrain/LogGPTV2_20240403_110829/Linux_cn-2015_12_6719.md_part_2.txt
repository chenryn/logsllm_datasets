#### pidfile
设置 `pidfile` 为 `/var/run/redis_6379.pid`。
```
pidfile /var/run/redis_6379.pid
```
#### port
如果不准备用默认端口，可以修改。
```
port 6379
```
#### loglevel
设置日志级别。
```
loglevel notice
```
#### logfile
修改日志文件路径。
```
logfile /var/log/redis_6379.log
```
#### dir
设置目录为 /var/lib/redis/6379
```
dir /var/lib/redis/6379
```
### 安全
下面有几个可以提高安全性的操作。
#### Unix sockets
在很多情况下，客户端程序和服务器端程序运行在同一个机器上，所以不需要监听网络上的 socket。如果这和你的使用情况类似，你就可以使用 unix socket 替代网络 socket，为此你需要配置 `port` 为0，然后配置下面的选项来启用 unix socket。
设置 unix socket 的套接字文件。
```
 unixsocket /tmp/redis.sock
```
限制 socket 文件的权限。
```
unixsocketperm 700
```
现在为了让 redis-cli 可以访问，应该使用 -s 参数指向该 socket 文件。
```
redis-cli -s /tmp/redis.sock
```
#### requirepass
你可能需要远程访问，如果是，那么你应该设置密码，这样子每次操作之前要求输入密码。
```
requirepass "bTFBx1NYYWRMTUEyNHhsCg"
```
#### rename-command
想象一下如下指令的输出。是的，这会输出服务器的配置，所以你应该在任何可能的情况下拒绝这种访问。
```
CONFIG GET *
```
为了限制甚至禁止这条或者其他指令可以使用 `rename-command` 命令。你必须提供一个命令名和替代的名字。要禁止的话需要设置替代的名字为空字符串，这样禁止任何人猜测命令的名字会比较安全。
```
rename-command FLUSHDB "FLUSHDB_MY_SALT_G0ES_HERE09u09u"
rename-command FLUSHALL ""
rename-command CONFIG "CONFIG_MY_S4LT_GO3S_HERE09u09u"
```
![Access Redis through unix with password and command changes](/data/attachment/album/201512/09/225002ylmz8o4s41s86kq6.jpg)
*使用密码通过 unix socket 访问，和修改命令*
#### 快照
默认情况下，redis 会周期性的将数据集转储到我们设置的目录下的 **dump.rdb** 文件。你可以使用 `save` 命令配置转储的频率，它的第一个参数是以秒为单位的时间帧，第二个参数是在数据文件上进行修改的数量。
每隔15分钟并且最少修改过一次键。
```
save 900 1
```
每隔5分钟并且最少修改过10次键。
```
save 300 10
```
每隔1分钟并且最少修改过10000次键。
```
save 60 10000
```
文件 `/var/lib/redis/6379/dump.rdb` 包含了从上次保存以来内存里数据集的转储数据。因为它先创建临时文件然后替换之前的转储文件，这里不存在数据破坏的问题，你不用担心，可以直接复制这个文件。
### 开机时启动
你可以使用 systemd 将 redis 添加到系统开机启动列表。
复制示例的 init\_script 文件到 `/etc/init.d`，注意脚本名所代表的端口号。
```
cp utils/redis_init_script /etc/init.d/redis_6379
```
现在我们要使用 systemd，所以在 `/etc/systems/system` 下创建一个单位文件名字为 `redis_6379.service`。
```
vi /etc/systemd/system/redis_6379.service
```
填写下面的内容，详情可见 systemd.service。
```
[Unit]
Description=Redis on port 6379
[Service]
Type=forking
ExecStart=/etc/init.d/redis_6379 start
ExecStop=/etc/init.d/redis_6379 stop
[Install]
WantedBy=multi-user.target
```
现在添加我之前在 `/etc/sysctl.conf` 里面修改过的内存过量使用和 backlog 最大值的选项。
```
vm.overcommit_memory = 1
net.core.somaxconn=512
```
对于透明巨页内存支持，并没有直接 sysctl 命令可以控制，所以需要将下面的命令放到 `/etc/rc.local` 的结尾。
```
echo never > /sys/kernel/mm/transparent_hugepage/enabled
```
### 总结
这样就可以启动了，通过设置这些选项你就可以部署 redis 服务到很多简单的场景，然而在 redis.conf 还有很多为复杂环境准备的 redis 选项。在一些情况下，你可以使用 [replication](http://redis.io/topics/replication) 和 [Sentinel](http://redis.io/topics/sentinel) 来提高可用性，或者[将数据分散](http://redis.io/topics/partitioning)在多个服务器上，创建服务器集群。
谢谢阅读。
---
via: 
作者：[Carlos Alberto](http://linoxide.com/author/carlosal/) 译者：[ezio](https://github.com/oska874) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出