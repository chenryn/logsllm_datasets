title:A Design and Implementation of an Assurance Case Language
author:Yutaka Matsuno
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
A Design and Implementation of an Assurance Case Language
Yutaka Matsuno
The University of Electro-Communications, Japan
PI:EMAIL
Abstract—Assurance cases are documented bodies of ev-
idence that provide valid and convincing arguments that
a system is adequately dependable in a given application
and environment. Assurance cases are widely required by
regulation for safety-critical systems in the EU. There have
been several graphical notation systems proposed for assurance
cases. GSN (Goal Structuring Notation) and CAE (Claim,
Argument, Evidence) are such two notation systems, and a
standardization effort for these notation systems have been
attempted in OMG (Object Management Group). However,
these notation systems have not been deﬁned in a formal way.
This paper presents a formal deﬁnition of an assurance case
language based on GSN and its pattern and module extensions.
We take the framework of functional programming language
as the basis of our study. The implementation has been done
on an EclipseTM based GSN editor. We report case studies on
previous work done with GSN and show the applicability of
the assurance case language.
Keywords-Assurance Cases, GSN (Goal Structuring Nota-
tion), Functional Programming Languages
I. INTRODUCTION
System assurance has become important in many indus-
trial areas, and the notion of assurance cases [17] has been
getting a lot of attention.
Safety cases (assurance cases for system safety) are re-
quired to be submitted to certiﬁcation bodies for developing
and operating safety critical systems, e. g., automotive,
railway, and defense systems, as well as nuclear power plants
and off-shore drilling platforms. There are several standards,
e. g. EUROCONTROL [11], the Rail Yellow Book [34], and
the MoD Defense Standard 00-56, which mandate the use
of safety cases. The current state of safety cases in the UK
is summarized in [19].
There are several deﬁnitions for assurance cases. We show
one such deﬁnitions as follows.
A structured argument, supported by a body of evi-
dence that provides a compelling, comprehensible
and valid case that a system is safe for a given
application in a given environment [5].
There have been several research studies on graphical
notation systems for assurance cases to ease the difﬁculty
of writing and validating them. GSN (Goal Structuring
Notation) [22] and CAE (Claim, Argument, Evidence) [5]
are two such notation systems. Writing assurance cases and
reusing them in a cost effective way is a critical
issue
for organizations. Patterns, modules, and their supporting
constructs are proposed in GSN. Recently the basic syntax
and extensions for patterns and modules have been deﬁned
in the GSN community standard [14].
Assurance cases are getting attention as a framework
for assuring systems dependability to various stakehold-
ers including government sectors, certiﬁcation bodies, and
end users. The OPENCOSS project is an European large
scale integrated FP7 project dedicated to producing the
ﬁrst European-wide open safety certiﬁcation platform [31].
In the OPENCOSS project, GSN has been studied as a
representation of certiﬁcation documents. The SAFE (Safe
Automotive soFtware architEcture) project [36] aims to
enhance methods for deﬁning safety goals and deﬁne devel-
opment processes complying with the new ISO26262 [18]
standard for functional safety in automotive electrical and
electronic systems. As ISO26262 mandates the use of safety
cases, meta-models, patterns, and other topics concerned
with safety cases have been studied in the project. The
DEOS (Dependable Embedded Operating System) project
[40] is a Japanese national project for developing dependable
systems. The project aims to use assurance cases in both
the development and operational phases (specially for failure
response action) ([28], [13]) for assuring the dependability
of the target systems.
However, as assurance cases are a new research ﬁeld, the
syntax and semantics of assurance case languages are still
in developing stages. For example, the GSN community
standard has some informal deﬁnitions for GSN and its
extensions [28]. Recently several attempts have been made
for formalizing GSN and its extensions ([37], [7]). To fa-
cilitate the discussions and development, this paper presents
a new formalization of GSN and its extensions. Our aim is
to develop a simple and general framework which can be
implemented easily. To do so, we exploit the framework of
functional programming languages [33], which is the most
basic and formal framework in programming languages.
Our contributions are as follows.
• We give a formal deﬁnition and the semantics for
GSN and its extensions, and deﬁne an assurance case
languages.
• We implement the language on an open source GSN
editor [25].
• We test the applicability of the language with existing
GSN examples ([16], [21], [42], [1], [7])
The paper is organized as follows. Section II presents the
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.97
630
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
background of assurance cases and the graphical notation
systems. Section III presents our formalization of GSN and
its pattern and module extensions. Section IV introduces
the current implementation of the framework. Section V
discusses related work. Section VI concludes the paper.
II. BACKGROUND
A. Assurance Cases
An assurance case is called a safety case when arguing
the safety of a system. Similarly, it is called a dependability
case, security case, reliability case, or availability case when
arguing the dependability, security, reliability, or availability
of a system, respectively. The basic structure of assurance
cases is shown in Figure 1 (slightly modiﬁed from the orig-
inal ﬁgure in [3]). Claim is about a property of the system,
Evidence is used as the basis of the argument, Argument
structure links the evidence to the claim, and Inference is
the mechanism that provides the transformational rules for
the argument [3].
Claim
(cid:2)
Evidence
Evidence
(cid:2)

(cid:2)

(cid:2)

(cid:2)
(cid:2)
Evidence
Argument Structure
Figure 1. Assurance cases structure
The scientiﬁc background of assurance cases includes
Toulmin’s argumentation model [41], which is the basic
model
in argumentation theory [10]. Toulmin identiﬁed
the key components of information in terms of the roles
played within the argument. These components are facts,
warrants, backing, rebuttal, and qualiﬁed claims. Facts are
the basis for the argument. A warrant is the part of the
argument that relates facts to qualiﬁed claims. Backing is
some kind of justiﬁcation for a warrant. A rebuttal captures
the circumstances that would be regarded as exceptions for
a warrant. A qualiﬁed claim is a conclusion that can be
drawn if the warrant holds true and the rebuttal does not
hold true. In a sense,
imply
the claim [10]. Comparing this model with Figure 1, a
qualiﬁed claim can correspond to the claim in Figure 1,
facts to evidence, and the warrant to the argument structure.
There is not a corresponding object for rebuttal in Figure 1:
representing rebuttal in assurance cases is an ongoing topic
in the community. A corresponding object for backing is also
not shown. However, GSN provides context, justiﬁcation,
and assumption nodes, which play the role of backing [14].
the facts plus the warrant
Assurance cases have been widely recognized in the U.K.
after recent serious disasters,
including the Piper Alpha
North Sea oil disaster in 1988 (167 people dead) and the
Clapham Junction rail crash in 1988 (35 people dead). The
term safety case seems to have emerged from a report by
Lord Cullen on the Piper Alpha disaster [39]. It has been
recognized that not only following a prescribed process and
ﬁlling in some checklists is required, but system developers
and operators must argue why their systems are safe during
the period of operation based on evidence.
There are some criticisms of assurance cases themselves.
In [23], Leveson wrote, “Most papers about safety cases
express personal opinions or deal with how to prepare a
safety case, but not whether it is effective.” One of Leveson’s
criticism is that
there is not sufﬁcient evidence for the
advantage of goal setting regulation (in which safety cases
are used) over conventional prescriptive regulation. Also,
Leveson mentioned Nimrod aircraft crash in Afghanistan
in 2006 [6] as an unsuccessful case of safety cases. The
criticism in the report [6] of safety cases are such that “Use
of safety cases has led to a culture of ‘paper safety’ at
the expense of real safety. It currently does not represent
value for money.” and “Safety cases were intended to be an
aid to thinking about risk but they have become an end in
themselves.” [23].
B. GSN (Goal Structuring Notation) and CAE (Claim, Ar-
gument, Evidence)
GSN (Goal Structuring Notation) is introduced by Tim
Kelly and his colleagues [22]. It is a graphical notation
for assurance cases. We brieﬂy explain constructs and their
meanings in GSN. Arguments in GSN are structured as
trees with a few kinds of nodes, including: goal nodes for
claims to be argued for, strategy nodes for reasoning steps
that decompose a goal into sub goals, and evidence nodes
for references to direct evidence that respective goals hold.
Figure 2 is a simple example of GSN. The root of the tree
must be a goal node, called the top goal, which is the claim
to be argued (G1 in Figure 2). For G1, a context node C1
is attached to complement G1. Context nodes are used to
describe the context (environment) of the goal attached to.
A goal node is decomposed through a strategy node (S1) into
sub goal nodes (G2 and G3). The strategy node contains an
explanation, or reason, for why the goal is achieved when the
sub goals are achieved. S1 explains the method used when
arguing (arguments over each possible fault: A and B). When
successive decompositions reach a sub goal (G2) that has a
direct evidence of success, an evidence node (E1) referring
to the evidence is added. Here we use a result of fault
tree analysis (FTA) as the evidence. For the sub goal (G3)
that is not decomposed nor supported by evidences, a node
(a diamond) of type undeveloped is attached to highlight
the incomplete status of the case. The assurance case in
Figure 2 is written with D-Case Editor, an open source,
631
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
EclipseTM based GSN editor [25].
"'&''
 !"'
%!"&'#
"&'"''
"'&
'#!"+
% '#"&$&
-+&'!.
&

%(!"'#)%
  &'+% '
("'#"#&+&'!
"
%#)&-("'#".
'+ '
("'#"&#-+&'!.
"("'#"&
#
"'&
#
-("'#".
&
	"'%'#"&
'*"&+&'!
("'#"&%
"#",%#(&


  &+&'!
("'#"&%
"$""'
"#"'%'#"&
Figure 2. An example of GSN diagrams
CAE (Claim, Argument, Evidence) [5] is another well
known graphical notation system. In OMG (Object Man-
agement Group), a standardization effort has been made for
a common meta-model for graphical notations of assurance
cases including GSN and CAE, and the OMG SACM (Struc-
tured Assurance Case Metamodel) [30] has been published.
In this paper we focus on GSN because most of pattern and
module extensions are available on GSN. GSN and CAE are
compatible to with each other via SACM, and our formalism
could be adapted to CAE.
C. GSN Patterns
There have been several publicly available GSN patterns
([16], [21], [42], [1], [7]). Figure 3 is a simple example of
GSN patterns in [1]. The top-level goal of system safety (G1)
is re-expressed as a number of goals of functional safety
(G2) as part of the strategy identiﬁed by S1. In order to
support this strategy, it is necessary to have identiﬁed all
system functions affecting overall safety (C1) e.g. through