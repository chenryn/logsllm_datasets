title:The Security of ChaCha20-Poly1305 in the Multi-User Setting
author:Jean Paul Degabriele and
J&apos;erôme Govinden and
Felix G&quot;unther and
Kenneth G. Paterson
The Security of ChaCha20-Poly1305 in the Multi-User Setting
Jean Paul Degabriele
PI:EMAIL
CNS, Technische Universität Darmstadt
Jérôme Govinden
PI:EMAIL
CNS, Technische Universität Darmstadt
Felix Günther
PI:EMAIL
Applied Cryptography Group, ETH Zurich
ABSTRACT
The ChaCha20-Poly1305 AEAD scheme is being increasingly wid-
ely deployed in practice. Practitioners need proven security bounds
in order to set data limits and rekeying intervals for the scheme.
But the formal security analysis of ChaCha20-Poly1305 currently
lags behind that of AES-GCM. The only extant analysis (Procter,
2014) contains a flaw and is only for the single-user setting. We
rectify this situation. We prove a multi-user security bound on the
AEAD security of ChaCha20-Poly1305 and establish the tightness
of each term in our bound through matching attacks. We show
how our bound differs both qualitatively and quantitatively from
the known bounds for AES-GCM, highlighting how subtle design
choices lead to distinctive security properties. We translate our
bound to the nonce-randomized setting employed in TLS 1.3 and
elsewhere, and we additionally improve the corresponding security
bounds for GCM. Finally, we provide a simple yet stronger variant
of ChaCha20-Poly1305 that addresses the deficiencies highlighted
by our analysis.
CCS CONCEPTS
• Security and privacy → Mathematical foundations of cryp-
tography; Block and stream ciphers; Hash functions and message
authentication codes.
KEYWORDS
ChaCha20-Poly1305; Multi-User Security; GCM; Nonce Random-
ization, AEAD; TLS 1.3; Tight Security
ACM Reference Format:
Jean Paul Degabriele, Jérôme Govinden, Felix Günther, and Kenneth G.
Paterson. 2021. The Security of ChaCha20-Poly1305 in the Multi-User Set-
ting. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’21), November 15–19, 2021, Virtual Event,
Republic of Korea. ACM, New York, NY, USA, 23 pages. https://doi.org/10.
1145/3460120.3484814
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484814
Kenneth G. Paterson
PI:EMAIL
Applied Cryptography Group, ETH Zurich
1 INTRODUCTION
ChaCha20-Poly1305 and Galois Counter Mode (GCM) are the two
most popular AEAD schemes in use on the Internet today. The
TLS 1.3 specification [29] mandates (MUST) support for AES128-GCM
and strongly recommends (SHOULD) support for AES256-GCM and
ChaCha20-Poly1305. In addition, ChaCha20-Poly1305 is the default
AEAD scheme in OpenSSH, WireGuard, OTRv4, and the Bitcoin
Lightning Network. GCM owes much of its popularity to its high
parallelizability as well as native support for AES and carry-less
multiplication on Intel and AMD CPUs, which allow it to run at
record speeds. However, in the absence of such hardware sup-
port, ChaCha20-Poly1305 wins the race by a significant margin.
Accordingly, ChaCha20-Poly1305 is generally the favored choice
on mobile phone hardware and Apple’s M1 processor. Moreover,
ChaCha20-Poly1305 benefits from Intel’s new AVX512 instruction
set, which has further narrowed the performance gap between the
two schemes on Intel hardware.1 Its performance benefits derive
from the minimalistic ARX design behind the ChaCha20 cipher,
the amenability of Poly1305 to fast arithmetic, and the paralleliz-
ability in each of these components. Another reason for preferring
ChaCha20-Poly1305 on generic hardware platforms is that it is eas-
ier to implement in constant time. As a consequence, it is less prone
to timing side-channel attacks.
ChaCha20-Poly1305 combines the ChaCha20 stream cipher and
the one-time MAC Poly1305 into a nonce-based AEAD scheme.
Both were designed independently as separate components by Ber-
nstein [5, 7], and Langley later adapted and combined the two into
a nonce-based AEAD scheme and proposed its use in TLS [18].
Despite its popularity, ChaCha20-Poly1305 has received very little
formal security analysis. The only extant analysis is in a short,
unpublished note by Procter [26]. In contrast, GCM has been the
subject of several formal security analyses [4, 15, 16, 19, 21, 24]. In
particular, [16] identified a flaw in GCM’s original security proof
in [21] and provided a corrected proof which was in turn improved
upon in [24]. Later works [4, 15, 19] have studied the security of
GCM in the multi-user setting, where an adversary is given access
to an encryption oracle and a decryption oracle for many distinct
users and the adversary wins if it can break the security of any
single user. Having access to encryptions under distinct keys of the
same message and the same nonce can, for instance, facilitate key-
recovery attacks on block ciphers [8, 9]. Accordingly, the multi-user
setting captures a very practical concern reflecting how a state-actor
adversary can benefit from its ability to eavesdrop on TLS connec-
tions en masse. In fact, TLS 1.3 includes a nonce-randomization
1https://bench.cr.yp.to/results-stream.html#amd64-manny1024
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1981mechanism to mitigate against such multi-user attacks, and the
rekeying frequencies for GCM in TLS, DTLS, and QUIC were based
on its multi-user security bounds [29–31]. In the specific cases of
DTLS and QUIC, the multi-user security bounds are also used to
determine the maximum number of failed decryptions that can be
tolerated before a session is terminated, since decryption failures
are not immediately fatal in these protocols. Moreover, in light of
the tighter security bounds presented in [15], the QUIC specifica-
tion [31, Appendix B.1] now allows for larger limits than those
prescribed in the TLS 1.3 specification.
Currently, for ChaCha20-Poly1305, the only multi-user security
bound available to the IETF is that outlined by Luyks and Paterson
in [20]. It leverages the single-user security bound from [26] by
applying a standard hybrid reduction technique. The resulting multi-
user security bound is essentially the single-user bound, where
each term is now multiplied by the number of users. However,
this simple approach has three significant shortcomings. Firstly,
as described in [19], it generally results in loose bounds, leading
to overly conservative security parameter estimates in practical
protocols. Secondly, it fails to explicitly quantify the adversary’s
advantage in terms of its local computational resources. This is
because in the standard-model security analysis in [26] this aspect
is concealed in a term capturing the PRF security of the ChaCha20
block function, which is not as easy to estimate concretely. Thirdly,
the security proof described in Procter’s note [26] on which [20]
relies is actually incorrect, as we explain in the full version of our
paper. As such, the security of an important and increasingly widely
deployed AEAD scheme currently rests on shaky foundations.
In this work, we remedy this state of affairs by presenting a
new dedicated multi-user security analysis of ChaCha20-Poly1305,
on par with that for GCM [15]. A common misconception is that
ChaCha20-Poly1305 is structurally equivalent to GCM but instan-
tiated with different primitives. Accordingly, one might be tempted
to think that it suffices to simply reuse GCM’s security bound
with ChaCha20-Poly1305’s parameters. While the two construc-
tions share some similarities, they have a number of important
differences that preclude such an approach. In addition, their dif-
ferences are further accentuated in the multi-user security model.
For instance, while all multi-user security treatments of GCM are
in the ideal-cipher model, ChaCha20-Poly1305 is better analyzed
in the (unkeyed) random permutation model. We elaborate on this
choice and the differences between GCM and ChaCha20-Poly1305
in Section 3. Below is a summary of our contributions.
1.1 Contributions
Single-User Security. We start off by revisiting Procter’s single-user
security proof [26]. We point out a flaw in the proof and provide a
new proof under the same standard-model assumptions. Our proof
retains the same security bound as that originally claimed by Procter.
However, fixing the proof is not straightforward and required us to
restructure and augment the sequence of games significantly. Due
to space constraints, the single-user security analysis of ChaCha20
-Poly1305 is located in the full version of our paper.
Multi-User Security. Our main contribution is a tight multi-user
security proof for ChaCha20-Poly1305. Through the security bou-
nds we establish, we expose fundamental differences in its security
traits compared to GCM [15]. One case in point is that, while the
multi-user security of GCM can be improved by rekeying more
frequently, i.e., reducing the limit on the maximum amount of data
that can be encrypted under a single key, this does not hold in the
case of ChaCha20-Poly1305. This is due to the fact that our security
bound does not depend on any per-user parameters—such as the
number of queries per user or the amount of data per user. On an
intuitive level, this distinction stems from the fact that under the
hood ChaCha20 is based on a permutation and not a block cipher in
counter mode. We provide attacks matching our bounds, showing
that our observations are not just an artefact of weak bounds.
Another point of divergence is that for ChaCha20-Poly1305 the
dominant term in the security bound depends on the number of
verification queries made by the adversary and the tag length, whe-
reas for GCM the dominant term depends on the total number of
encrypted data blocks and the block length. Note that the number of
verification queries represents the number of valid forgery attempts
made by an adversary. In the context of secure communications
protocols, this relates to the number of times that an adversary
attempts to insert a new ciphertext into the secure channel.2 Typical
protocols running over reliable transport, like TLS [29], shut down
upon the first verification error. Protocols running over unreliable
transport, like DTLS [30] or QUIC [31], however have to tolerate
many invalid ciphertexts due to the network behavior [12], yet
their number is still much smaller than the maximum number of
messages that can be encrypted. Thus, our analysis shows that
these two schemes require protocol designers to tune their security
parameters rather differently depending on which scheme they use.
We note that our security proof borrows many ideas from [15],
but it also deviates from it substantially and even improves upon it
in some respects.
Tightness. We describe attacks to prove the tightness of every term
in our security bound. We adapt some of the attacks for GCM and
introduce new ones. In particular, adapting the forgery attack on
GCM to the case ChaCha20-Poly1305 requires substantially new
techniques, due to the different finite field that they employ in their
universal hash functions. We describe these attacks in Section 7.1.
Nonce Randomization. Next, we turn our attention to the multi-user
security of ChaCha20-Poly1305 when combined with the XN trans-
form for nonce randomization that is currently employed in TLS 1.3.
Similarly to [15], we extend our multi-user security bound for plain
ChaCha20-Poly1305 to this setting using a balls-into-bins argument.
Interestingly, applying the balls-into-bins lemma from [15] to our
security bound results in a relatively weak security bound—on the
order of 2−48. We present an improved balls-into-bins lemma allow-
ing us to translate our main bound to the XN transformed version
of ChaCha20-Poly1305 without any degradation in the security
bound. As a noteworthy side-effect, our improved bound for XN
also eliminates the corresponding term in the bound of [15] for
the nonce-randomized version of GCM, enabling tighter advantage
bounds than 2−48. We cover nonce randomization in Section 7.2.
A Stronger Variant. As already observed, the dominant term in the
security bound for ChaCha20-Poly1305 relates to the ciphertext
2Such a new ciphertext could be obtained by tampering with an existing one, or could
result from reordering ciphertexts or creating entirely new ones from scratch.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1982integrity of the scheme, which in turn depends on the security of
the Poly1305 MAC. Indeed, this term dominates all other terms by
a substantial margin. Accordingly, our bound shows that the multi-
user security of ChaCha20-Poly1305 would be strengthened signif-
icantly if Poly1305 were to be replaced with a more secure MAC. In
Section 7.4 we explore this possibility by considering a simple vari-
ant of ChaCha20-Poly1305 which uses two independently-keyed
Poly1305 MAC tags instead of one.
2 PRELIMINARIES
Notation. The empty string is denoted by 𝜀. We denote by |𝑥| the
bit length of the bit string 𝑥, and by |𝑥|𝑛 its size in 𝑛-bit blocks
(and the empty string is assigned a block size of 1, i.e., |𝑥|𝑛 =
max (1, ⌈|𝑥|/𝑛⌉)). We call strings whose bit length is a multiple of
8 byte strings. For 1 ≤ 𝑖 < 𝑗 ≤ |𝑥|, let 𝑥[𝑖:𝑗] denote the substring of
𝑥 spanning bit 𝑖 to bit 𝑗 inclusive, and trunc(𝑥, 𝑛) denote the first
𝑛 bits of 𝑥, i.e. trunc(𝑥, 𝑛) = 𝑥[1:𝑛]. For any two bit strings 𝑥 and
𝑦, their concatenation is denoted by 𝑥∥𝑦. When |𝑥| = |𝑦| = 𝑐 · 𝑛
(𝑛)+ 𝑦 and 𝑥 (𝑛)− 𝑦 denote the strings that
for some positive integer 𝑐, 𝑥
result from individually adding and subtracting their 𝑛-bit subwords
modulo 2𝑛 when each word is interpreted as an unsigned integer.
If 𝑆 is a finite set then |𝑆| denotes its cardinality and 𝑦 ←$ 𝑆
denotes the process of sampling uniformly at random an element
from 𝑆 and assigning it to 𝑦. If A is an algorithm or a procedure,
𝑦 ← A(𝑥1, . . . ) denotes running A on inputs 𝑥1, . . . and assigning