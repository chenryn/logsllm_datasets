# Glibc下的HeapSpray利用
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Glibc下的HeapSpray
###  闲说
​ 最近复现一些Windows的CVE时，总会遇到HeapSpray的技巧。真的佩服利用该技巧的 **第一人** ，简直就是不把 **PIE** 和
**ALSR** 放在眼里。由于有CTF比赛Pwn的经历，而且觉得Pwn的题目类型似乎很 **常规化**
了，突然想到这个技术是不是也可以用在Glibc的Pwn中。Google一番，找到了一个，TSCTF2019
薛定谔的堆块，`w1tcher`师傅出的一个结合堆喷思想的Pwn。于是激动的复现了一下，感觉很刺激，有收获（包括常规的堆的布局技巧），在这里分享一下。
## TSCTF2019 薛定谔的堆块
####  题目分析
​
​ **32bit** 程序，保护几乎全开
​ 程序的流程
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      Init();
      Welcome();
      play();
      return 0;
    }
在Init里，随机分配了一个堆块，应该是为了随机化后续malloc操作的初始Heap地址
      fd = open("/dev/urandom", 0);
      read(fd, &buf, 4u);
      srand(buf);
      v0 = rand();
      malloc(4 * (v0 % 0x810));
主要功能在play里，和典型的Heap类题目大致一样的功能
    void play()
    {
      while ( 1 )
      {
        menu();
        switch ( read_choice() )
        {
          case 0:
            puts("Choice error!");
            break;
          case 1:
            Create();
            break;
          case 2:
            Display();
            break;
          case 3:
            Delete();
            break;
          case 4:
            Modify();
            break;
          case 5:
            CallFunction();
            break;
          case 6:
            puts("Thank you for using");
            exit(0);
            return;
        }
      }
    }
Create的主要功能是创建 **Block** ，有些奇怪的是，这里每次Create会创建0x10个相同大小的 **Block**
，为了便于表述我在这里称一个Block为 **Small Block** ，每次Create的0x10个 **Small Block** 的组合称为
**Big Block** 。但是虽然创建 **Small Block** 0x10个，却是随机排序的。最终都会放在一个全局数组中，在 **.bss**
段.
     for ( i = 0; i  0x20000 )
        return puts("Size error!");
      for ( j = 0; j  2 )
        {
          if ( choice == 3 )
          {
            *v7 = &unk_401C;
          }
          else if ( choice == 4 )
          {
            *v7 = &unk_4024;
          }
        }
        else if ( choice == 1 )
        {
          *v7 = &unk_400C;
        }
      }
      printf("Note creation success! Index is : %d - %dn", 16 * i, 16 * (i + 1) - 1);
      result = i;
      dword_4008 = i;
这里我们需要注意到三点，首先 **read_str** 函数里有 **x00** 截断，也不存在溢出。另外，注意到之前分配的 **size + 4**
空间的最后4byte在这里用上了，用于存放指针。可以选择4种类型（1 2 3
4），但是真的是4种吗？答案是否定的，我们完全可以不选上面的任何一种，如此，最后的4byte就会是未初始化状态。
其次， **dword_4008** 保存了当前Create的 **Big Block** 的index。
Display的功能就是输出给定index范围的 **Small Block** 的内容
      printf("Please input start index : ");
      start_index = read_choice();
      printf("Please input end index : ");
      end_index = read_choice();
      if ( start_index > 0xFFF || end_index > 0xFFF )
        return puts("Index error!");
      for ( i = start_index; ; ++i )
      {
        result = i;
        if ( i > end_index )
          break;
        printf("Notes are : %sn", dword_4060[2 * i]);
      }
Delete的功能就是删除最后一次Create的 **Big Block** 的所有 **Small Block** ，free且置NULL
      v2 = dword_4008;
      if ( dword_4008  0xFF )
        return puts("Delete error!");
      for ( i = 16 * dword_4008; 16 * (v2 + 1) > i; ++i )
      {
        free((void *)dword_4060[2 * i]);
        dword_4060[2 * i] = 0;
      }
      --dword_4008;
Modify是编辑指定index的 **Small Block** 的内容
      printf("Please input index : ");
      v2 = read_choice();
      if ( v2 > 0xFFF || !dword_4060[2 * v2] )
        return puts("Index error!");
      v1 = strlen((const char *)dword_4060[2 * v2]) + 1;// +1 （因为0x00截断）
      printf("Please enter the note : ");
      read_str(dword_4060[2 * v2], v1);
      return puts("Edit success!");
CallFunction函数是根据Create时的最后4byte来决定会不会执行一个指针。
      printf("Please input index : ");
      v1 = read_choice();
      if ( v1  0xFFF || !dword_4060[2 * v1] )
        return puts("Index error!");
      v2 = *(_DWORD *)(dword_4060[2 * v1] + dword_4060[2 * v1 + 1]);
      if ( *(_DWORD *)v2 )
        --*(_DWORD *)v2;
      else
        (*(void (**)(void))(v2 + 4))();
      return puts("Call success!");
基本逻辑就是最后4byte的指针处的内容如果非0，该内容就减一；反之，调用该指针+4（作为一个函数地址）
而上面的四种type，只有一个指针内容是0，其余均不为0，对应指针+4的位置均有一个函数指针（puts一段内容）
    .data:0000400C unk_400C        db    0                 ; DATA XREF: Create+259↑o
    .data:0000400D                 db    0
    .data:0000400E                 db    0
    .data:0000400F                 db    0
    .data:00004010                 dd offset common
    .data:00004014 unk_4014        db  10h                 ; DATA XREF: Create+266↑o
    .data:00004015                 db  27h ; '
    .data:00004016                 db    0
    .data:00004017                 db    0
    .data:00004018                 dd offset transparent
    .data:0000401C unk_401C        db  64h ; d             ; DATA XREF: Create+273↑o
    .data:0000401D                 db    0
    .data:0000401E                 db    0
    .data:0000401F                 db    0
    .data:00004020                 dd offset Emmm
    .data:00004024 unk_4024        db 0C8h                 ; DATA XREF: Create+280↑o
    .data:00004025                 db    0
    .data:00004026                 db    0
    .data:00004027                 db    0
    .data:00004028                 dd offset anoymous
#####  漏洞分析
​
乍一看似乎没发现比较明显的漏洞点，但是就像之前提到的Create时候的那最后4byte，暗含的未初始化的问题，后面的CallFunction也与其相关。所以基本可以断定问题在与如何利用这未初始化的4byte。