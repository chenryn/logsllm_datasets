### The problem
In my opinion, the current solution to send emails with Symfony is too "low
level". (Related article: Send mails in Symfony in a way that does not suck!)
In my experience, most Symfony applications want to render a Twig template
when sending an email. That's why FOSUserBundle includes the TwigSwiftMailer
and that's why looking for `Swift_Message::newInstance` in GitHub gives you
thousands of results with lots of shortcut methods to render a template.
### The solution
I propose to create a new `renderAndSend()` method for the `mailer` service.
It would work as follows:
  1. Simplest case (fixed 'to' and 'from' email addresses):
    $this->get('mailer')->renderAndSend('email/notification.html.twig', array(
        'event' => $event,
    ));
    {# app/Resources/views/email/notification.html.twig #}
    {% block to 'PI:EMAIL' %}
    {% block from 'PI:EMAIL' %}
    {% block subject %}[{{ 'now'|date(d/m/Y H:i:s) }}] {{ event.title[:128] }}{% endblock %}
    {% block body %}
        ...
        {{ event.content }}
        ...
    {% endblock %}
  2. `{% block body %}` is a shortcut to set the HTML content. If you need different contents for HTML and TXT, use these blocks instead:
    {% block body_html %} ... {% endblock %}
    {% block body_text %} ... {% endblock %}
  3. When the `$to` or `$from` email addresses are dynamic, you can pass them in the parameters array:
    $this->get('mailer')->renderAndSend('email/notification.html.twig', array(
        'event' => $event,
        'to' => 'PI:EMAIL',
        'from' => 'PI:EMAIL',
    ));
Then you don't need to define the `to` and `from` blocks:
    {# app/Resources/views/email/notification.html.twig #}
    {% block subject %}[{{ 'now'|date(d/m/Y H:i:s) }}] {{ event.title[:128] }}{% endblock %}
    {% block body %}
        ...
    {% endblock %}
  4. These are the special Twig blocks:
    {% block to %} ... {% endblock %}
    {% block from %} ... {% endblock %}
    {% block subject %} ... {% endblock %}
    {% block body %} ... {% endblock %}
    {% block body_html %} ... {% endblock %}
    {% block body_text %} ... {% endblock %}
  5. If both the Twig block and the parameter are given, the block is used. This allows to use the following:
    $this->get('mailer')->renderAndSend('email/notification.html.twig', array(
        'event' => $event,
        'to' => 'PI:EMAIL',
        'user' => $user,
    ));
    {# app/Resources/views/email/notification.html.twig #}
    {% block to %}{{ user.name }} {% endblock %}
    ...
  6. The `sendAndRender()` method would define a third optional parameter to set the file attachments:
    $this->get('mailer')->renderAndSend(
        'email/notification.html.twig',
        array('event' => $event),
        array(
            $this->container->getParameter('log_dir').'/traces/'.$event->getId(),
            $this->container->getParameter('log_dir').'/console_output/'.$event->getId(),
        )
    );
If the attachments array is associative, the keys are used as the file names:
    $this->get('mailer')->renderAndSend(
        'email/notification.html.twig',
        array('event' => $event),
        array(
            'trace.txt'  => $this->container->getParameter('log_dir').'/traces/'.$event->getId(),
            'output.txt' => $this->container->getParameter('log_dir').'/console_output/'.$event->getId(),
        )
    );