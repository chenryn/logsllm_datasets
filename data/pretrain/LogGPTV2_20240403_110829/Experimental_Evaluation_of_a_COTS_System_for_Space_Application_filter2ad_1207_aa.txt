# Experimental Evaluation of a COTS System for Space Applications

**Authors:**
- Henrique Madeira, University of Coimbra, Coimbra, Portugal
- Raphael R. Some, Jet Propulsion Laboratory, Pasadena, CA, USA
- Francisco Moreira, Critical Software, Coimbra, Portugal
- Diamantino Costa, University of Coimbra, Coimbra, Portugal
- David A. Rennels, University of California, Los Angeles, CA, USA

## Abstract

This paper evaluates the impact of transient errors on the operating system of a COTS-based system (CETIA board with two PowerPC 750 processors running LynxOS) and quantifies their effects at both the OS and application levels. The study was conducted using a Software-Implemented Fault Injection tool (Xception) and involved both realistic programs and synthetic workloads to focus on specific OS features. The results provide a comprehensive understanding of the impact of faults on key LynxOS features (process scheduling and frequent system calls), data integrity, error propagation, application termination, and the correctness of application results.

## 1. Introduction

The use of Commercial Off-The-Shelf (COTS) components in space missions is particularly attractive due to the higher performance-to-power consumption ratio and lower cost compared to radiation-hardened components. However, COTS components are not typically designed to meet the stringent requirements of space applications. Therefore, their use in space missions must be preceded by a careful study of the impact of faults, such as those caused by space radiation (e.g., Single Event Upsets (SEUs)), to identify weak points that need to be strengthened with specific fault tolerance techniques.

One proposed approach for using COTS-based systems in space applications is to employ them for scientific data processing rather than spacecraft control. An example of this is the Remote Exploration and Experimentation (REE) Project at the Jet Propulsion Laboratory, where an external, radiation-hardened Spacecraft Control Computer (SCC) handles overall spacecraft control, while scientific computations are performed by COTS-based systems. In this scenario, Software-Implemented Fault Tolerance (SIFT) techniques can be used to tolerate transient faults in the COTS-based systems.

This paper evaluates the impact of transient errors in a CETIA board with two PowerPC 750 processors running LynxOS, quantifying their effects at both the OS and application levels. The focus is on the system behavior when errors are induced into the operating system, examining application termination, data integrity, error propagation, and the correctness of application results. A fault injection tool [3] was used to emulate the effects of SEUs by inserting bit-flip errors in processor structures and memory while the processor executes OS or application code.

The structure of the paper is as follows:
- Section 2 presents the experimental setup.
- Section 3 discusses the experiments and results.
- Section 4 summarizes the contributions and concludes the paper.

## 2. Experimental Setup

### 2.1. Target System and Xception Fault Injector

Figure 1 shows the test bed layout used in these experiments. The target system is a COTS CETIA board with two PowerPC 750 processors and 128 Mbytes of memory, running LynxOS version 3.0.1. The host is a Sun UltraSparc-II with SunOS 5.5.1.

![Test Bed Layout](path_to_figure_1)

The fault injection tool used is Xception PowerPC705/LynxOS, a port of the Xception tool [4] to the PowerPC705 and LynxOS. Xception uses the debugging and performance monitoring features available in the processors to inject faults by software and monitor their impact on the target system. The target applications are executed at full speed without modification, and faults can affect any process, including the kernel code. Faults consist of single bit-flips injected into various units, such as processor registers, integer unit, internal processor buses, floating-point unit, cache, and memory.

The fault injection process, including fault parameter definition, injection, and result collection, is controlled by the host system. Figure 2 illustrates the key steps of the fault injection process. The target system is restarted after each injection to ensure independent experiments. Faults are injected after the workload starts and are either uniformly distributed over time or injected during the execution of specific portions of code. Results are collected after resetting the system to ensure stability and accurate data transmission to the host.

![Fault Injection Process](path_to_figure_2)

### 2.2. Workload

#### 2.2.1. Synthetic Workload

To evaluate the impact of transient faults on key features of LynxOS, a synthetic workload was defined to exercise core functions of the operating system, such as process management (scheduling, creation, termination, waiting), memory allocation and deallocation, and I/O operations (open, read, write). The synthetic workload executes a given number of iterations, performing buffer and matrix manipulations and executing system calls related to the core OS functions. After each step, the program stores a footprint in a file, such as return codes and checksum values. At the end of each cycle, additional tests are performed, and the final result is compared with a gold version to check for errors. The synthetic workload uses 1 Mbyte of memory for buffer manipulations and performs matrix operations on three 250 x 250 integer matrices defined as static variables.

Three instances of the synthetic program were used to test the effect of kernel errors on other processes in a multiprogramming environment. Faults were injected into the first process (P1) during its execution or during the execution of kernel code, while processes P2 and P3 were used to evaluate error propagation and the operating system's response. Figure 3 illustrates this configuration.

![Process Configuration: Synthetic Workload](path_to_figure_3)

#### 2.2.2. Realistic Workloads

Realistic workloads were used to evaluate the effects of OS errors on application termination and result correctness. Three applications with different profiles were chosen:

- **Gravity:** Calculates the trajectory of a small mass attracted by a larger one, modeled by Newton's Law of Gravity.
- **PI:** Computes the value of π with a large number of decimal digits by numerically calculating the area under the curve 4/(1+X^2).
- **Matmult:** Matrix multiplication program, multiplying two 400 x 400 integer and floating-point matrices.

These workloads were used to evaluate the influence of different parameters, such as processor and memory usage, on the impact of faults.

## 3. Results and Analysis

The experiments had the following goals:

- **Synthetic Applications:**
  - Evaluate the impact of faults injected while the processor was executing OS code (Section 3.1.1).
  - Compare the effects of application faults versus OS faults (Section 3.1.2).
  - Evaluate error propagation from the OS to application processes and between processes (Section 3.1.3).

- **Realistic Applications:**
  - Evaluate the impact of faults on application termination and the correctness of application results (Section 3.2).

### 3.1. Impact of Faults in the OS and Error Confinement & Propagation: Experiments with the Synthetic Workload

In this set of experiments, the synthetic workload was used in the scenario shown in Figure 3. Faults injected while P1 was scheduled and the processor was executing OS code were classified as OS faults (or kernel mode faults). Faults injected while the processor was executing P1 code were classified as application faults (or user mode faults).

Table 1 shows the fault distribution by process. The fault distribution by target unit was weighted by the relative sizes of the silicon areas of the corresponding processor structures. Some faults (23%) were injected in key locations of the memory to emulate faults in the processor cache.

| Distribution by Processes | All Faults | User Mode | Kernel Mode |
|---------------------------|------------|-----------|-------------|
| Inj. while P1 is scheduled | 2013 (52%) | 1038 (48%) | 975 (44%) |
| Inj. while executing OS code | 233 (33%) | 0 (0%) | 233 (67%) |
| Inj. while executing other proc. | 30 (10%) | 0 (0%) | 10 (1%) |
| Totals | 2276 (100%) | 1038 (48%) | 1281 (56%) |

Figure 4 shows the impact of the faults injected while P1 was scheduled (2013 faults) from the point of view of process P1 only. A general observation is that a large percentage of faults had no effect because the modified state was unused or soon-to-be overwritten.

![Impact of Faults on P1](path_to_figure_4)

## 4. Conclusion

This paper provides a comprehensive evaluation of the impact of transient errors on a COTS-based system running LynxOS. The results highlight the importance of understanding and mitigating the effects of faults on key OS features, data integrity, error propagation, and application correctness. Future work will focus on developing and implementing specific fault tolerance techniques to strengthen the weak points identified in this study.

---

**References:**

[1] JPL REE Project.  
[2] SIFT Techniques for COTS Systems.  
[3] Xception Fault Injection Tool.  
[4] Xception Tool for PowerPC705.  

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)**  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:24:52 UTC from IEEE Xplore. Restrictions apply.