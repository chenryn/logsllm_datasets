0.0.0.0`。端口的话一般不会与其他服务重复，所以直接默认5601端口就行。现在重启Kibana：`sudo systemctl restart
kibana`。
现在，可以在浏览器访问Kibana了：`http://服务器ip:5601`。
进入Kibana的页面后，享受它令人惊讶的用户体验，并尝试一些仪表盘样例和数据。
> **声明：** 因为安全问题，不建议将Kibana的server.host设置为0.0.0.0，特别是在生产环境中。文中的配置只是在原型设计阶段。
##### C. Logstash配置
现在我们来解决logstash的配置问题：
`sudo cat /etc/logstash/logstash-sample.conf`  
该配置文件包含了Logstash的必要配置。因此，我们需要将它复制到目录`/etc/logstash/conf.d/`下，并将其名称改为logstash.conf。
不要忘记重启服务：`sudo systemctl restart logstash`。
##### D. 服务检查
正确配置好logstash、kibana 和elasticsearch 的配置文件后，可以启动服务并检查它们：
你可以检查这些服务的端口监听，是tcp6还是tcp这都没有关系，不影响服务。
> Kibana : 5601
>
> Elasticsearch : 9200
>
> Logstash : 5044
### 2.2 Beats配置和数据传输
#### 2.2.1 Winlogbeat的下载和安装
下载链接：
安装方法：
#### 2.2.2 Winlogbeat的配置
在我们的项目中，我们使用winlogbeat.yml的如下配置：
**理解winlogbeat.event_logs：**
winlogbeat.yml中的winlogbeat部分指定了所有针对Winlogbeat的选项。最重要的是，它包含了要监控的事件日志列表。我们可以看到Sysmon模块是默认启用的。要添加更多的模块，你可以参考如下链接：
**理解分片数（shards）和副本数（replicas）：**
  * **index.number_of_shards ：** 一个索引可能会存储大量数据，甚至会超过单节点的硬件配置。为了解决这个问题，Elasticsearch提供了将索引细分为多个“碎片”的功能（就是分片），每个“碎片”都保存在不同的机器上。
  * **index.number_of_replicas :** 是Elasticsearch要存储的副本数量。当有个组网多机器运行Elasticsearch时，该功能很有用。如果一台机器挂掉了，数据不会丢失。
**Output :**
对于Elasticsearch output和Logstash output，在启动服务或检查配置时 **必须只启用其中一个** 。
**Processors(处理器)和logging(日志)的配置:**
下图包含winlogbeat使用的默认processors和一个logging设置的样例：
**Index Lifecycle Managment ( ILM ) -索引生命周期管理：**
最后，我们不得不禁用ILM(索引生命周期管理)。ILM是集成在ELK stack Basic版本中的一个免费的x-pack功能，但是在ELK
oss版本里不是。你可以根据机器性能、服务韧性和是否保留的需求，使用ILM来自动管理索引。例如：每天、每周或每月创建一个新的索引，并对之前的索引进行归档。当一个索引达到一定大小时，运行一个新的索引，或者删除旧的索引以执行数据保留的标准。
ILM功能在ELK stack
basic版本中是默认启用的。但是当你的beats没有直接到Elasticsearch时，它需要进一步的配置。ILM功能超出了本文的范围，所以我们将它禁用。
#### 2.2.3 Sysmon配置，并与MITRE ATT&CK整合
我们将在加载索引模板之前设定新的Sysmon配置，以确保新的Sysmon字段和配置在ELK stack中能被正确加载。
**System Monitor (Sysmon)**
是一个Windows系统服务和设备驱动程序，一旦安装在系统上，在系统重启时仍然驻留。以监视和记录系统活动，记录到Windows事件日志中。它提供有关进程创建、网络连接和文件创建时间变更的详细信息。通过收集事件，它可以通过Windows
Event Collection或SIEM代理生成并随后对其进行分析，从而识别恶意或异常活动，并了解入侵者或恶意软件如何在网络上运行。
**MITRE ATT &CK**是一个全球可访问的基于真实世界观察的对抗战术和技术的知识库。
ATT&CK知识库被用做在私人部门、政府和网络安全产品和服务社区开发特定威胁模型和方法的基础。
  * **Sysmon下载：**
  * **下载包含MITRE ATT &CK的sysmon的xml配置：**
参考链接：
  * **使用配置文件安装Sysmon:**
`sysmon64 -accepteula -i sysmonconfig-export.xml`
  * **检查当前配置：**
`sysmon64 –c`
#### 2.2.4 设置索引模板、仪表盘和索引格式
**A. 加载索引模板**
索引模板允许你定义模板，这些模板将在创建新索引的时候自动应用。模板包括设置和映射，以及一个简单的模式模板，用于控制模板是否应应用于新索引中。
加载索引模板需要连接到Elasticsearch。如果输出的不是Elasticsearch，则必须手动加载模板。在我们的例子中，winlogbeat不会直接连接到Elasticsearch，因此我们必须在启动服务之前手动设置索引模板。
需要暂时禁用Logstash输出，并启用Elasticsearch输出。
>  template.html#load-template-manually>
**B. 加载仪表盘和索引格式**
>  dashboards.html>
#### 2.2.5 更改输出（output）
索引模板、索引模式和仪表盘加载正确后，可以在Kibana界面查看。  
加载成功后如下图所示：
现在，在打开配置文件后，我们将通过注释来禁用Elasticsearch的输出，然后我们将通过删除注释来启用Logstash的输出。
#### 2.2.6 将数据传输到ELK stack
现在我们可以通过PowerShell或者使用services.msc(Windows服务)来启动winlogbeat和sysmon服务，并在Kibana界面查看数据。
当启动winlogbeat后，ELK Stack将使用Logstash中的配置来创建索引，从而实现数据的存储。
winlogbeat的默认dashboard(仪表盘)：
在Discover下，我们可以使用新配置（MITRE引用）检查sysmon日志：
其他的beats无论在配置还是安装上都与winlogbeat差别不大。我们使用的beats有：
  * Winlogbeat
  * Filebeat
  * Packetbeat
  * Metricbeat
我们要提到的是，某些beats，如metricbeat或filebeat有几个模块可以使用。  
例如，我们使用filebeat中的system模块来监控ubuntu机器上的ssh认证、sudo命令，我们使用Suricata模块来收集Suricata
IDS的日志。
#### 2.2.7 启用Suricata模块
我们使用这个命令来启用filebeat中的Suricata模块：
`sudo filebeat modules enable Suricata`
要查看filebeat中可用的模块，可以查看如下目录：
`/etc/filebeat/modules.d/`
要查看正在使用的模块，使用如下命令：
`filebeat modules list`
在我们设备上安装Suricata的方法，参照如下链接：
正常完成安装的话，你应该得到一个和这个比较相似的dashboard。如果你没有得到完全一样的页面也不用担心，我们会在接下来的文章中介绍如何处理dashboard。
也可以将Suricata接口集成到ELK stack中，可以参考下面的链接：  
## 0x03 Open Distro(AWS开源的Elasticsearch发行版)演示
Open Distro可用的插件包括：
  * Security(高级安全性)
  * Alerting(事件监控和通知)
  * SQL(SQL查询功能)
  * Index State Management(索引状态管理)
  * Performance Analyzer(性能分析)
在这个项目中，我们只安装Security和Alerting两个插件。
### 3.1 Alerting(事件监控和通知)功能
**Open Distro for Elasticsearch**
允许我们监控数据，并给相关人员自动发送告警信息。配置和管理起来是很简单的，并且它拥有强大的api去调用Kibana的接口。
Alerting功能允许我们配置规则，当数据中一些我们关注的内容发生更改时，可以收到通知。任何可以查询的东西，都可以配置Alerting。当一个或多个Elasticsearch索引的数据满足特定条件时，Alerting功能将会通知您。
下面的链接提供了 **Open Distro** 的历史版本（在我们本次案例中，使用的是1.6.0版本）：
要安装Open Distro的 Alerting功能，得先管理elasticsearch和kibana的插件：
插件管理位于：
  * **/usr/share/elasticsearch** : Elasticsearch
  * **/usr/share/kibana** : Kibana
#### 3.1.1 为Elasticsearch安装 **Alerting** 插件：
    cd /usr/share/elasticsearch
    sudo bin/elasticsearch-plugin install https://d3g5vo6xdbdb9a.cloudfront.net/downloads/elasticsearch-plugins/opendistro-sql/opendistro_sql-1.6.0.0.zip
#### 3.1.2 为Kibana安装相应的 **Alerting** 插件：
    cd /usr/share/kibana
    sudo bin/kibana-plugin install — allow-root https://d3g5vo6xdbdb9a.cloudfront.net/downloads/kibana-plugins/opendistro-alerting/opendistro-alerting-1.6.0.0.zip
#### 3.1.3 要列出或删除插件，所用命令如下：
> **Kibana:**
    sudo bin/kibana-plugin list
    sudo bin/kibana-plugin remove 
> **Elasticsearch:**
    sudo bin/elasticsearch-plugin list
    sudo bin/elasticsearch-plugin remove 
#### 3.1.4 现在应重启Kibana和Elasticsearch：
    systemctl restart kibana elasticsearch
**注意：**
安装完成后，移除或更新Kibana/Elasticsearch的插件后，大约需要几分钟才能正常重启成功，而且Kibana服务器会一直响应（”kibana
is not ready yet“）。我们可以使用`top`命令实时查看kibana和elasticsearch进程。
#### 3.1.5 现在可以在kibana界面中查看插件：
#### 3.1.6 Alerting插件的使用：