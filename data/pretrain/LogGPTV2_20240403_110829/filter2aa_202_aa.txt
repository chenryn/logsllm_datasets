针对⼤家在作业⾥⾯常⻅的⼀些问题作了⼀些汇总。
1. goby的指纹感觉不那么好 会有很多误报 ，对goby指纹⼀些字段的理解不太清晰，如何处理goby的指纹？
2. 如何实现程序让速度和效率最⼤化
这⾥给出我的⼀些思考的想法和过程。
goby指纹的处理
第⼀期作业中提取出了goby指纹并将它转换为了json格式。第⼀期我的提取⽅法：https://t.zsxq.com/eiQVRZv
多看⼏个规则差不多就能把规则了解清楚了。
{
        "rule_id": "1", // id没啥⽤
        "level": "5",   // 暂时不知道有什么⽤
        "softhard": "2", // 是否是硬件 1 硬件 2 软件
        "product": "PHPSHE", // 产品名称
        "company": "haovip", // 产品公司
        "category": "Other Software System", // 类别
可以看到每个规则都有个match字段，代表如何匹配的，我们可以写个python程序看看有多少种匹配的⽅式以及
分别有多少。
输出
        "parent_category": "Software System", // 上⼀类
        "rules": [
            [
                {
                    "match": "body_contains",
                    "content": "powered by phpshe"
                }
            ],
            [
                {
                    "match": "body_contains",
                    "content": "content=\"phpshe"
                }
            ]
        ]
      // rules是⼀个list，每个list是 or 关系
      // list下⾯也是list，这个list是 and 关系
    }
import json
filename = "fofa.json"
with open(filename, 'r', encoding="utf-8") as f:
    data = json.load(f)
print("count", len(data))
i = 0
dd = {}
for item in data:
    for rules in item["rules"]:
        for rule in rules:
            match = rule["match"]
            if match not in dd:
                dd[match] = 0
            dd[match] += 1
import json
print(json.dumps(dd,indent=4))
count 6098 // 指纹总数
{
    "body_contains": 5685,
    "protocol_contains": 209,
    "title_contains": 1880,
    "banner_contains": 3532,
再看看每个类别的数⽬是多少,python代码如下
输出
    "header_contains": 1597,
    "server_contains": 454,
    "server": 5,
    "title": 171,
    "cert_contains": 203,
    "port_contains": 6,
    "protocol": 1
}
import json
filename = "fofa.json"
with open(filename, 'r', encoding="utf-8") as f:
    data = json.load(f)
i = 0
dd = {}
for item in data:
    parent_category = item["parent_category"]
    category = item["category"]
    if parent_category not in dd:
        dd[parent_category] = {}
    if category not in dd[parent_category]:
        dd[parent_category][category] = 0
    dd[parent_category][category] += 1
import json
print(json.dumps(dd, indent=4))
{
    "Software System": {
        "Other Software System": 339,
        "Database System": 32,
        "Operating System": 60
    },
    "Enterprise Application": {
        "OA": 61,
        "Other Enterprise Application": 653,
        "Electronic Mail System": 106,
        "CRM": 38,
        "ERP": 26,
        "Project Management System": 31,
        "FMS": 21,
        "HRM": 13,
        "SCM": 3
    },
    "Network Security": {
        "NAC": 17,
        "Other Network Security": 131,
        "VPN Products": 95,
        "WEB Application Firewall": 46,
        "Website Security Monitoring System": 10,
        "Firewall": 153,
        "Data Certificate": 13,
        "Host Monitoring and Auditing": 22,
        "Load Balance": 21,
        "Log Analysis and audit": 26,
        "Traffic Analysis": 34,
        "File Management and Encryption": 17,
        "Tamper Resistance": 2,
        "Anti-Virus Product": 10,
        "Anti-Spam System": 5,
        "Operation and Maintenance Audit Fortres Machine": 13,
        "Online Behavior Management System": 21,
        "Antivirus Gateway": 82,
        "Threat Analysis and Management": 19,
        "Network Intrusion Detection and Defense": 23,
        "Baseline Management System": 1,
        "Database Auditing and Protection": 10,
        "Anti-DDOS Attack System": 4,
        "Audit": 11,
        "Vulnerability Scanning": 14,
        "Data Leakage Prevention": 5,
        "DNS Device": 9,
        "Identity Authentication and Authority Management": 19,
        "Web Content Security Monitoring": 1,
        "Network Isolation and One-way Import": 4,
        "Bandwidth Management System": 1,
        "Network Traffic Aggregation and Distribution Device": 1,
        "APT Attack Detection": 1,
        "WEB Security Analysis System": 1,
        "Data Desensitization System": 2
    },
    "Support System": {
        "Development Framework": 96,
        "Component": 187,
        "Other Support System": 104,
        "Service": 403,
        "Middleware": 9,
        "Virtualization": 31,
        "Scripting Language": 13,
        "Big Data Pocessing": 29,
        "Cloud Computing": 28,
        "Machine Learning": 4
可以看到，类别挺多的，虽然这些类别对识别指纹⽤处很⼩，但是指纹分类时的⽤处很⼤。
我们能不能设计⼀个归⼀化的格式，把goby指纹囊括进来，同时还能⽅便我们⾃⼰添加指纹呢？
指纹的进化过程
识别指纹定义⼀个字段去描述，我最开始的gwhatweb就是这样做的。ref:https://github.com/boy-hack/gwhatw
eb/blob/master/data.json
    },
    "IoT Device": {
        "Cameras and Surveillance": 360,
        "Other IoT Device": 231,
        "Voice Video": 127,
        "Burglar alarm": 21,
        "Entrance Guard System": 14,
        "Industrial Control": 58,
        "Smart Home": 50
    },
    "Network Device": {
        "Other Network Equipment": 253,
        "Router": 881,
        "Server": 219,
        "ADSL": 124,
        "Switch": 268,
        "Wireless Network": 113,
        "Network Storage": 86
    },
    "Office Equipment": {
        "Multifunctional": 24,
        "Printer": 112,
        "Fax Machine": 2,
        "Other Office Equipment": 9
    },
    "": {
        "": 15
    }
}
这样做⽐较⽼套，既⽆法有效的管理指纹，也⽆法优化识别效率。我后⾯的 goWhatweb 和 w11scan ，都注重在效
率上进⾏提升，尝试⽤go以及分布式的⽅式，以及根据识别结果优先使⽤指纹的⽅式、缓存同⼀url的uri等等。
指纹脚本化
之后看了fofa的指纹后，看到可以⽤另⼀种⽅式来表达指纹。ref：https://x.hacking8.com/post-383.html
使⽤简单的表达式来表达指纹，这样我们根据每个指纹编写不同的表达式，这样分类⽅便，使⽤也⽅便。我们再写
个脚本将指纹转换为表达式看看。
body="copyright by hacking8" || title= "hacking8"
import json
filename = "fofa.json"
with open(filename, 'r', encoding="utf-8") as f:
    data = json.load(f)
i = 0
dd = {}
for item in data:
    product = item["product"]
    item_or = []
    for rules in item["rules"]:
⼤概就这种感觉。。
但是还可以再优化⼀下识别的⽅式。
指纹匹配的类型有这么⼏类
它是将每⼀种匹配作为⼀个函数进⾏调⽤。这其实还可以在优化⼀下。
body 、 header 、 banner 都可以看作是⼀个字符串或⼀个字符集，⽽ contains 可以看作⼀个调⽤⽅法。goby
的指纹是函数式的，要为所有的字符和字符集进⾏组合添加⽅法，这样不够精简。
我们可以将 body 当作⼀个⽂本， contains 当作⽅法，直接使
⽤ body.contains("xxx") 、 header.contains("xxx") 调⽤即可。
指纹识别引擎
因为goby指纹只需要访问⼀次⾸⻚，这和httpx天然相似，我想直接在httpx加上这个功能。
        item_and = []
        for rule in rules:
            match = rule["match"]
            content = rule["content"]
            dsl = f"{match}(\"{content}\")"
            item_and.append(dsl)
        item_or.append("({})".format(" and ".join(item_and)))
    dsl = " or ".join(item_or)
    print("cms:{} 识别规则:{}".format(product, dsl))
[
    "body_contains",
    "protocol_contains",
    "title_contains",
    "banner_contains",
    "header_contains",
    "server_contains",