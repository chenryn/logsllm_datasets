S cc -o assert assert,c -1a
sqrt +21.41421
S./asnert
Aborted (core dunped)
assert.c:7: ny_sqrt: Assertion ‘x >= 0.0 failed.
操作注释：
当我们试图用一个负数来调用my_sqrt的时候，假设验证失败了。assert宏给出了发生假设验
加入jaVa编程群：524621833
/
---
## Page 312
294Linux程序设计
证冲突的文件名和行号，还给出了假设验证的条件。程序被一个abort中断陷阱结束了运行：这
就是assert调用abort的结果。
用“-DNDEBUG”选项重新编译这个程序，假设验证功能将被排除在编译结果之外。当我
们再次通过my_sqrt调用sqrt函数的时候得到的是一条算术运算错误，如下所示：
S cc -o aasert -DNDEBUG assert.c-1n
有些版本的数学函数库会返回一个NaN值（“NotaNumber”，不是一个数字）指示一个无效
的操作结果。比如：
sqrt -2 = nan
9.6内存调试
动态内存分配是个很容易出现程序漏洞的领域，漏洞一旦出现，还很难查找。如果在程序
里使用了malloc和free来分配内存，就必须对自己分配过的每一块内存都做到心中有数，并且绝
不要使用已经释放了的内存块，这一切都是非常重要的。
内存块通常都是用malloc分配的，它们会被赋给一个指针变量。如果该指针变量发生了变化，
又没有其他指针指向这块内存，就无法继续对它进行访问了。这是一种内存流失现象，它会使
你程序的长度增大。如果你流失了大量内存，你的系统就会越来超慢，最终的结局是耗尽内存。
如果在一个已分配内存块尾部的后面（或内存块头部的前面）写数据，你就很可能损坏
malloc库用来记录内存分配情况的数据结构。出现这种问题以后，经过一段时间，一个malloc调
用，甚至是一个free调用，都可能会引发一次内存段冲突，面你的程序也就崩溃了。要想查出错
误发生的准确位置是十分困难的，因为内存段发生冲突的现象是没有规律的，在引发程序崩溃
的事件发生之前，谁也说不准要等多长的时间。
帮助解决这两类问题的工具（有商业版也有免费版）都已经被开发出来了、对此我们不应
该感到吃惊。有许多不同版本的malloc和free，其中一些添加了检查内存分配和内存回收情况的
代码，它们尝试并可能解决的问题包括一个内存块被释放了两次以及其他一些错误的用法。
9.6.1 ElectricFence
ElectricFence库是由BrucePerens开发的，在RedHat等Linux发行版本上它是一个可选组件，
在因特网上也很容易找到它。它尝试使用UNIX的虚拟内存功能来保护malloc和fre使用的内存。
它的目标是在内存被破坏之前让程序停止运行。
动手试试：ElectricFence
下面这个efence.c程序用malloc分配了一个内存块，然后在这个内存块尾部以外的地方写数
据。我们米看看将会发生什么事情。
加入jaVva编程群：524621833
---
## Page 313
第9章调试与纠错
295
#include 
#include 
int nain()
chax *ptr=(char *) na11cc(1024):
ptr[0] = 0:
/*Now wtite beyond the block */
ptr[1024]=0;
exit (0) ;
7
当我们编译并运行这个程序的时候，看不到任何异常的现象。但malloc的内存区却可能已经
受到了一定程度的破坏，我们迟早会遇到麻烦。如下所示：
S cc -o efence efence.c
S./efence
接下来，我们用ElectricFence库libefence.a来链接同一个程序，我们马上就收到响应了，如
下所示：
Scc -o efence efence.c -lefence
5./etence
Electric Fence 2.0.5 Copyright (C) 1987- 1998 Bruce Perens
Segnentaticn fault
在调试器下运行这个程序，找出问题根源：
Scc-g-o efence efence.c-lefenca
Sgdb efence
Starting progran: /home/nei1/efence
(gdb)run
Electric Fence 2.0.5 Copyright (C) 1987-1996 Bruce Perens.
Progran received signal SIGSEGV. Segmentation fault.
0xs0o08e4 in nain ()at efence.c:11
(gdb)
11
ptr[1024] = 0;
操作注释：
ElectricFence把malloc及其关联函数替换为使用计算机处理器硬件虚拟内存功能的版本，用
这种办法保护系统不受无效内存访问的损害。在出现一个无效内存访问的时候，它会引发一个
内存段冲突信号，而程序也就停止了。
9.6.2 Checker
Checker是由TristanGingold开发的，它是一个适用于Linux和UNIx操作系统的改进版编译
器后端和C语言库，它能够检查出我们前面讨论过的许多问题。特别值得一提的是它能够检查出
不正确的指针引用、数组访问错误和内存流失。它一般不包括在Linux的发行版本里，但可以在
http://www.gnu.org/software/checker/checker.html处找到。
加入jaVa编程群：524621833
---
## Page 314
296
Linux程序设计
要想使用Checker，程序和函数库都必须重新编译。好在Linux上绝大多数软件都找得到源代
码，这也就算不上什么限制了。与Checker一起使用的预编译库也很容易在网上找到。
动手试试：Checker
下面的程序checker.c分配了.些内存，然后进行了以下儿种操作：从内存块未初始化的单元
里读数据、在内存块尾部以外写数据，最后把内存块的指针弄乱了。
include 
#include 
int main()
chat *ptr
=(cha1 *) ma11oc(1024):
char ch;
/* Uninitial1zed read */
ch = ptr[0]:
/*Write beyond the block */
0=1201]x
/* Orphan the block */
exit(01:
ptr = 0:
在使用Checker的时候，我们只需简单地把我们的编译器命令替换为checkergcc就可以了。
这是一个驱动性程序，负责调用正确的编译器版本和用特殊的Checkered库链接程序。
运行这个程序，我们看到它查找出许多问题：
$checkergcc ·o checker checker.c
Checker version 0.7 Copyright ^IC) 1993,1994.1995 Tristan Gingold.
S./checker
Checker is a nenory access detector.
Checker is distributed in the hope that it will be useful,
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU
For more infornation. set CHECKERoPTS to-help
General Public License for more details.
From Checker (pid:01359): (ruh) read uninitialized byte(s) in a block
When Reading 1 byte(s)at address 0x0801el2c, inside the heap (sbrk）.
0bytes into a block (start:0x801e12c,length:1024.mdesc: 0x0）.
The block was allocated from:
pc=0x080099db in _ma11oc()at./1-ma11oc/ma11oc.c:211
pc=0x08009a3d
pc=0x080001df
in ma1loc() at./1-malloc/nal1oc.e:232
pc=0x0800010c in_start（） at:0
in mein(} at checker.c:6
Stack frames are:
pc=0x08000200 in maint) at checker.c:10
pc=0x0800010c 1n _start() at:0
Wenwriting1 byte(s) at addreos 0x0801e52c.1nside the heap
0bytes after a block (start: 0x801e12c,length:1024,mdesc:0x0).
(sbrk)
The block was allocated from:
pc=0x080099db in_ma11oe()at./1-ma11oe/ma11oc.c:211
pc=0x08009a3din mal1oc1)at./1-na1loc/ma11oc.c:232
pc=0x0800010c in_start() at :0
pc=0x080001df
in main() at. checker.c:5
Stsck frames are:
加入jaVa编程群：524621833
---
## Page 315
第9章调试与纠错
297
pe=0x08000225 in main(} at checker.c:13
pc=0x0800010c in _start1l at :0
这里，我们看到它查出了不良的读写操作，同时还给出了与之对应的内存块和内存块的分
配位置。我们可以通过调试器给程序在错误地点设置一个断点。
Checker有许多选项，包括捕获某些特定类型错误和内存流失检查等在内。要检查我们例子
里的内存流失，我们必须使用一个由CHECKEROPTS环境变量传递选项，经这个环境变盘传递
的选项还有其他几个。要想在程序运行结束后检查有无内存流失现象，我们需要指定“-D=end
选项，如下所示：
CKECKXROPTS=-D=end checker
1 1 -
From Cheeker tpid:01407):tyat)garbage Getector results
There is 1leak and 0 potential
Leaks consume 1024 bytes (1 KB) .131193 KB.
Block at ptr=0x801e40c
pc=0x08009a3d in mal1oc() at ./1-ma11oc/ma11oc.c:232
pc=0x08009900
jn _na11oc() at./1-ma11oc/ma11oc,c:174
pe=0x080001df in ma1nt) at checker.c:6
pc=0x0800010c in _start() at :0
操作注释：
checkergcc编译器会给我们的程序额外添上一些代码，对程序里出现的每·-个指针引用进行
检查。如果某个访问与某个已分配的内存块有关但又是无效的，Checker就给出一个错误提示消
息。在程序即将结束的时候，回收例程开始运行，它的作用是检查有没有程序分配了但忘记释
放的内存块。如果有，这类失去程序依托的内存块也会报告出来。
9.7资源
本章介绍讨论的工具程序差不多都能从因特网上FTP站点那里找到。注意有些工具软件的作
者可能保留了版权。这些工具程序有许多是来自著名的Linux软件站点ftp：//metalab.unc
.edw/pub/linux，我们希望能够在它们发行的第一时间找到新的版本。
其他因特网上的资源请参考附录C。
9.8本章总结
在这一章里，我们学习了一些调试工具和技巧。UNIX，特别是Linux里有不少工具能够帮
助大家把程序漏洞找出来，修补掉。
我们用gdb查出并纠正了示例程序中的缺陷和漏润，并向大家介绍了几个静态分析工具，其
中包括cflow和lclinte
最后，我们对使用动态分配内存时可能出现的问题进行了讨论，有几个工具可以帮助我们
对它们进行诊断，比如ElectricFence和Checker。
加入java编程群：524621833
---
## Page 316
第10章进程和信号
进程和信号是构成UNIX操作环境的-块基石。它们控制着一台UNIX计算机系统上的绝大
部分活动：不管你是系统程序员、应用程序员、还是系统管理员，弄明白UNIX的进程管理将使
你“一切尽在掌握”。
在这一章里，我们将看到Linuix环境中的进程是如何被操作和管理的，怎样才能查明计算
机在任一给定时刻在干些什么。我们还将学习如何在自已的程序里启动和停止其他的进程、
如何让进程收发消息，以及如何避免进程“死”等内容。总之，我们将在以下几个方面进
行学习：
·进程的结构、类型和时间安排。
·以多种方法启动新进程。
·父进程、子进程、髓进程。
·什么是信号以及如何使用它们。
10.1什么是进程
《统一UNIX技术规范》第二版（“SingleUNIX Specification，Version2"，即我们常说的
或者多个线程的地址空间和线程要求使用的系统资源。”我们将在下一章对线程进行讨论。现在，
我们可以把一个进程看成是一个运行中的程序。
像UNIX这样的多任务操作系统能够让许多程序同时运行。每一个运行着的程序就构成了一
个进程，这在X窗口系统（有时简单地称为X）等菌口化系统上证据就更充分了。X窗口系统和
微软的Windows一样提供了-个图形化的用户操作界面，允许许多应用程序同时运行。每个应
用程序可以显示一个或者多个窗口。我们将在第16章对X窗口系统做进一步学习。
UNIX又是一个多用户系统，它能够让许多个用户在间一时间访问系统。每个用户又可以同
时运行许多个程序，甚至可以是同一个程序的多次运行。系统本身也运行着一些管理系统资源
和控制用户权限的程序。
我们在第4章曾经学过，一个正在运行的程序（或者叫进程），是由程序代码、数据、变量
（占用着系统内存）、打开的文件（文件描述符）和一个环境组成。通常，UNIX系统会让进程共
享代码和系统库，所以在任何时刻内存里都只有代码的一份拷贝。
10.2进程的结构
我们来看看操作系统是如何管理两个进程的。如果两个用户，比如说neil和rick，为了在不
同的文件里查找不同的字符申而同时运行了grep程序，他们使用的进程如图10-1所示。
加入java编程群：524621833
---
## Page 317
第10章进程和信号
299
rick
$gze kck trek. text
$grep troi oaxtgen. doc
PID101
PID 102 
：
code
+gep coe
code
xigss
data
s=tro
data
C
fMes
fies
图10-1
我们运行ps命令（马上就会介绍到），其输出情况应该和下面这些内容差不多：
$ pa -af
PID
PPIDCSTIMETTYTIME
00:00:cogrep pid_t/usr/include/sys*.h