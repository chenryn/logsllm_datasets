---
## Page 410
if pattern ==
"11len(patternByte)!=len(strList){
return false
pMap := map[byte]string{}
sMap := map[string]byte{}
for index,b := range patternByte {
if _， ok = pMap[b]; !ok {
if _, ok = sMap[strList[index]];!ok {
pMap[b]  = strList[index]
sMap[strList[index]] =b
}else{
if sMap[strList[index]] !=b {
return false
}else{
if pMap[b]!= strList[index]{
return false
return true
3oo.LongestIncreasingSubsequence
题目
Given an unsorted array of integers, find the length of longest increasing subsequence.
Example:
Input: [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the
length is 4.
Note:
● There may be more than one LIS combination, it is only necessary for you to return the
length.
● Your algorithm should run in O(n^2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
题目大意
---
## Page 411
给定一个无序的整数数组，找到其中最长上升子序列的长度。
解题思路
·给定一个整数序列，求其中的最长上升子序列的长度。这一题就是经典的最长上升子序列的问题。
·dp[i]代表为第i个数字为结尾的最长上升子序列的长度。换种表述，dp[]代表[0,]范围内，选
择数字nums[i]可以获得的最长上升子序列的长度。状态转移方程为dp[i]=max（1+
dp[j]），其中jnums[i]，取所有满足条件的最大值。时间复杂度
O(n^2)
·这道题还有一种更快的解法。考虑这样一个问题，我们是否能用一个数组，记录上升子序列的最末
尾的一个数字呢？如果这个数字越小，那么这个子序列往后面添加数字的几率就越大，那么就越可
能成为最长的上升子序列。举个例子：nums=[4,5,6,3]，它的所有的上升子序列为
len = 1
：
[4]， [5], [6], [3]
=> tails[0] = 3
1en = 2
：
[4, 5], [5, 6]
=> tails[1] = 5
len = 3
：
[4, 5, 6]
=> tails[2] = 6
·其中tails[i]中存储的是所有长度为i+1的上升子序列中末尾最小的值。也很容易证明
tails数组里面的值一定是递增的（因为我们用末尾的数字描述最长递增子序列)。既然tails是有
序的，我们就可以用二分查找的方法去更新这个taill数组里面的值。更新策略如下：（1）.如果x比
所有的tails元素都要大，那么就直接放在末尾，并且tails数组长度加一；（2).如果tails[i-1]
 1
sumRange(2, 5) -> -1
sumRange(0，5)->-3
Note:
1. You may assume that the array does not change.
2. There are many calls to sumRange function.
题目大意
给定一个整数数组nums，求出数组从索引i到j（i≤j)范围内元素的总和，包含i,j两点。
示例：
给定nums=[-2，0，3，-5，2，-1]，求和函数为sumRange（)
sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0,5) -> -3
---
## Page 413
说明：
·你可以假设数组不可变。
·会多次调用sumRange方法。
解题思路
·给出一个数组，数组里面的数都是**不可变*的，设计一个数据结构能够满足查询数组任意区间
内元素的和。
·这一题由于数组里面的元素都是*不可变**的，所以可以用2种方式来解答，第一种解法是用
prefixSum，通过累计和相减的办法来计算区间内的元素和，初始化的时间复杂度是O（n)，但是查
询区间元素和的时间复杂度是O（1)。第二种解法是利用线段树，构建一颗线段树，父结点内存的
是两个子结点的和，初始化建树的时间复杂度是O（logn)，查询区间元素和的时间复杂度是O（log
n)。
代码
package leetcode
import（
"github.com/halfrost/LeetCode-Go/template"
//解法一线段树，sumRange时间复杂度o（1）
// NumArray define
type NumArray struct {
st *template.SegmentTree
// Constructor303 define
func Constructor303(nums []int) NumArray {
st := template.SegmentTree{}
st.Init(nums,func(i,j int) int {
return i+j
3)
return NumArray{st: &st]
// SumRange define
func (ma *NumArray) SumRange(i int,j int) int{
return ma.st.Query(i, j)
//解法二prefixSum，sumRange 时间复杂度o（1)
//// NumArray define
// type NumArray struct {
---
## Page 414
//prefixSum []int
//}
//// Constructor303 define
//func Constructor303(nums []int) NumArray{
for i := l; i  0 {
//
return this.prefixSum[j] - this-prefixSum[i-1]
//
/1
return this.prefixsum[j]
//}
/
 Your NumArray object will be instantiated and called as such:
*obj := Constructor(nums);
* param_1 := obj.SumRange(i,j) ;
*/
306.AdditiveNumber
题目
Addlitive number is a string whose dligits can form adlditive sequence.
A valid additive sequence should contain at least three numbers. Except for the first two
numbers, each subsequent number in the sequence must be the sum of the preceding two.
Given a string containing only digits *o'-'9*, write a function to determine if it's an adlditive
number.
Note: Numbers in the addlitive sequence cannot have leading zeros, so sequence 1, 2, 03 or
1, 02, 3 is invalid.
Example 1:
Input: "112358"
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8.
1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:
---
## Page 415
Input: "199100199“
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199.
1 + 99 = 100, 99 + 100 = 199
saau ndu ae a o, moao apueq no pnom mo:dn moo
题目大意
累加数是一个字符串，组成它的数字可以形成累加序列。一个有效的累加序列必须至少包含3个数。除
了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。给定一个只包含数字“0-"9
的字符串，编写一个算法来判断给定输入是否是累加数。说明：累加序列里的数不会以0开头，所以不
会出现1,2,03或者1,02,3的情况。
解题思路
·在给出的字符串中判断该字符串是否为斐波那契数列形式的字符串。
·由于每次判断需要累加2个数字，所以在DFS遍历的过程中需要维护2个数的边界，firstEnd
和secondEnd，两个数加起来的和数的起始位置是secondEnd+1。每次在移动firstEnd
和secondEnd 的时候，需要判断 strings.HasPrefix（num[secondEnd+1:]，
strconv.Itoa（xl+x2）），即后面的字符串中是否以和为开头。
·如果第一个数字起始数字出现了0，或者第二个数字起始数字出现了0，都算非法异常情况，都应
该直接返回false。
代码
package leetcode
import(
"strconv"
"strings"
// This function controls various combinations as starting points
func isAdditiveNumber(num string) boo1{
if 1en(num)0{
break
first, _ := strconv.Atoi(num[:firstEnd+1])
for secondEnd := firstEnd + 1; max(firstEnd, secondEnd-firstEnd)  1 {
break
上
second, _ := strconv.Atoi (num[firstEnd+l : secondEnd+1])
if recursivecheck(num, first, second, secondEnd+l) {
return true
3
return false
//propagate for rest of the string
func recursiveCheck(num string, x1 int, x2 int, left int) bool {
if left == len(num){
return true
if strings.HasPrefix(num[left:], strconv.Itoa(xl+x2)) {
return recursiveCheck(num, x2, x1+x2,1eft+len(strconv.Itoa(x1+x2)))
return false
307.RangeSumQuery-Mutable
题目
aisnpui ( > )  pue I saipul uaamaq sjuawala au jo wns au puy swnu Aeue agaui ue uaai
The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]
sumRange(0, 2) -> 9
update(1, 2)
sumRange(0,2) -> 8
Note:
1. The array is only modifiable by the update function.
2. You may assume the number of calls to update and sumRange function is distributed
evenly.
题目大意
给定一个整数数组nums，求出数组从索引i到j（i≤j)范围内元素的总和，包含ij两点。
---
## Page 417
update(i,val)函数可以通过将下标为i的数值更新为val，从而对数列进行修改。
示例：
Given nums = [1, 3, 5]
sumRange(0, 2) -> 9
update(1, 2)
sumRange(0,2)-> 8
说明：
·数组仅可以在update函数下进行修改
·你可以假设update函数与sumRange函数的调用次数是均匀分布的。
解题思路
·给出一个数组，数组里面的数都是**可变**的，设计一个数据结构能够满足查询数组任意区间内
元素的和。
·对比第303题，这一题由于数组里面的元素都是可变的，所以第一个想到的解法就是线段树，构
建一颗线段树，父结点内存的是两个子结点的和，初始化建树的时间复杂度是O（logn)，查询区间
元素和的时间复杂度是O（logn），更新元素值的时间复杂度是O（logn）。
·如果此题还用prefixSum的思路解答呢？那每次update操作的时间复杂度都是O（n)，因为每次
更改一个值，最坏情况就是所有的prefixSum都要更新一次。prefixSum的方法在这道题上面也
可以AC，只不过时间排名在5%，非常差。
代码
package leetcode
import（
"github.com/halfrost/LeetCode-Go/template"
// Constructor307 define
func Constructor307(nums []int) NumArray {
st := template.SegmentTree{}
st.Init(nums, func(i,j int) int {
return i + j
3)
return NumArray(st: &st]
// update define
func (this *NumArray) Update(i int, val int) {
this.st.Update(i, va1)
---
## Page 418
//解法二prefixSum，sumRange 时间复杂度o（1)
// // NumArray define
// type NumArray307 struct {
//
prefixSum []int
data
[]int
//}
//// Constructor307 define
// func Constructor307(nums []int) NumArray307 {
data := make([]int, len(nums))
for i= 0;io{
//
return this.prefixSum[j] - this.prefixSum[i-1]
//
{
//
return this.prefixSum[j]
//}
* Your NumArray object will be instantiated and called as such:
*obj := Constructor(nums);
obj.update(i,val);
*param_2:= obj.SumRange(i,j);
309.BestTimetoBuyandSellStockwithCooldown
题目
---
## Page 419
Say you have an array for which the ith element is the price of a given stock on day 1.
no se suoesue ue se aado Ae no od wnwxew au puy o wyuole ue uisag
like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:
● You may not engage in multiple transactions at the same time (ie, you must sell the stock
before you buy again).
●After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:
Input: [1,2, 3 ,0, 2]
Output: 3
Explanation: transactions = [buy, sel1, cooldown, buy, se11]
题目大意
给定一个整数数组，其中第1个元素代表了第1天的股票价格。
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一
支股票）：
·你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
·卖出股票后，你无法在第二天买入股票（即冷冻期为1天）。
解题思路
·给定一个数组，表示一支股票在每一天的价格。设计一个交易算法，在这些天进行自动交易，要
求：每一天只能进行一次操作；在买完股票后，必须卖了股票，才能再次买入；每次卖了股票以
后，在下一天是不能购买的。问如何交易，能让利润最大？
●这一题是第121题和第122题的变种题。
·每天都有3种操作，buy，sel1，cooldown。sel1之后的一天一定是cooldown，但是
cooldown 可以出现在任意一天。例如：buy，cooldown，cooldown，sel1，cooldown，
cooldown。buy[i]代表第i天通过buy或者cooldown结束此天能获得的最大收益。例
如：buy，sel1，buy 或者buy，cooldown，cooldown。se11[i]代表第i天通过 se11
或者cooldown结束此天能获得的最大收益。例如：buy，sel1，buy，sel1或者buy，
sel1，cooldown，cooldown。price[i-1]代表第i天的股票价格（由于price是从0开始