them  for the  life  of  the  project.  There is a CTE for each 
of  the  6  clusters  into  which  the  Pentium@ 4  processor 
design is logically subdivided (actually, microcode can be 
considered to be a seventh logical cluster, and it too has a 
test  environment  equivalent  to  the  other  CTEs).  These 
CTEs are groupings of logically  related  units (e.g. all  the 
execution  units  of  the  machine  constitute  one  CTE) 
surrounded  by  code 
interfaces  to 
adjacent  units  outside  of  the  cluster  and  provides  an 
environment for  creating  and  running  tests  and  checking 
results. 
that  emulates 
The  CTEs  took  a  good  deal  of  effort  to  develop  and 
maintain,  and  were  themselves  a  source  of  a  significant 
number  of bugs (not counted in the 7855 total).  However, 
they provided a number of key advantages: 
the 
to 
us 
allowed 
provoke 
Trying to produce precise microarchitectural behavior 
from macroinstruction sequences has been  likened to 
pushing  on  a  piece  of  string.  This  problem  is 
particularly  acute for the  back  end  of  the  machine - 
the  memory  and  bus  clusters  which  lie  beyond  the 
out-of-order section of the microarchitecture pipeline. 
CTEs 
specific 
microarchitectural behavior on demand. 
Second, CTEs allowed  us  to make  significant  strides 
in early validation of  the Pentium  4 processor SRTL 
even  before  a  full-chip  model  was  available.  As 
described  below,  integrating  and  debugging  all  the 
logic  and  microcode  needed  to  produce  even  a 
minimally  functional  full-chip  model  was  a  major 
undertaking;  it  took  more  than  6  months  from  the 
time  we  started  until  we  had  a  "mostly  functional" 
IA-32  machine  that  we  could  start  to  target  for 
aggressive  full-chip  testing.  Because  we  had  the 
CTEs, we  were  able to  start  testing  as soon  as there 
was released  code in a particular unit, long before we 
could  have  even  tried  to  exercise  it  at  the  full-chip 
level. 
Even  after  we  had  a  full-chip  model,  the  CTEs 
essentially  decoupled  validation  of  individual  unit 
features  from  the  health  of  the  full-chip  model.  A 
killer  bug  in  (say)  the  front  end  of  the  machine did 
not  prevent  us  from  continuing  to  validate  in  other 
In  fact,  though,  we  rarely  encountered  this 
areas. 
kind  of  blockage;  our  development  methodology 
required  that  all  changes be  released  at  cluster  level 
first, and only when they had been  validated there did 
we  propagate  them  to  full-chip.  Even  then,  we 
required  that  all  full-chip  model  builds  pass  a  mini- 
regression  test  suite  before  they  could  be  released  to 
the  general  population.  This  caught  most  major 
cross-unit  failures  that  could  not  be  detected  at  the 
CTE level. 
like 
First and foremost, they  provided  controllability that 
was  otherwise  lacking  at  the  full-chip level.  An  out 
of  order,  speculative  execution  engine 
the 
Pentium'  Pro  or  Pentium'  4  processor  is  inherently 
difficult  to  control  at  the  instruction  set  architecture 
level. 
instructions 
(macroinstructions) are broken  down by  the  machine 
that  may  be 
into  sequences  of  microinstructions 
executed  in  any  order (subject  to data dependencies) 
relative  to one another and  to microinstructions  from 
other  preceding  or 
'following  macroinstructions. 
Assembly-language 
I  The probability  of  hitting  the FMUL condition  with  purely  random 
operands Is approximately  1 in 5* lo"', or 1 in 500 million trillion! 
The  CTEs  caught  341 1  of  the  5809  bugs  found  by 
dynamic testing,  with  the  other  2398  being  found  at  the 
full-chip  SRTL  level.  Code  inspection  accounted  for 
another  1554  bugs,  with 
the  remaining  492  being 
accounted for by Formal Verification, SRTL-to-schematic 
equivalence  verification, 
several  other  minor 
categories. 
and 
7. Power Reduction Validation 
From  the  earliest  days  of  the  PentiumO  4  processor 
design, power consumption was a concern.  Even with the 
lower operating voltages offered by  P858, it was clear that 
at the  operating  frequencies we  were targeting  we would 
have difficulty  fitting  within  the  "thermal  envelope"  that 
495 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:57:13 UTC from IEEE Xplore.  Restrictions apply. 
was  needed  so  that  a  desktop  system  would  not  require 
exotic and  expensive cooling technology.  This  led  us  to 
include  in  the  design  two  main  mechanisms  for  active 
power reduction: clock gating and thermal management. 
We  needed 
Clock gating  a5 a concept is not new:  previous designs 
have  attempted  to  power  down  discrete  structures  like 
caches  when  there  were  no  accesses pending.  What was 
different about the  Pentium@ 4  processor design  was  the 
extent to which clock gating was taken.  Every unit on the 
chip  had  a  power  reduction  plan,  and  almost  every 
functional unit block contained clock-gating logic - in all, 
there  were  around  350  unique  clock-gating  conditions 
identified.  Every one of them needed to be validated  from 
several different perspectives: 
to  verify 
that  each  condition  was 
implemented  as  per  plan  and 
it  functioned  as 
originally  intended.  We  needed  to  verify  this  not  once, 
but  continually 
the 
Pentium@ 4 processor,  as  otherwise  it  was  possible  for 
power  savings to  be  eroded  over  time  as  an  unintended 
side effect  of  other  bug  or  speedpath fixes.  We tackled 
this  problem  by  constructing  a  master  list  of  all  the 
planned  clock  gating  features,  and  writing  checkers  in 
proto  for  each  condition  to  tell  us  if  the  condition  had 
occurred  and  to  make  sure  that  the  power  down  had 
occurred when  it  should have.  We ran  these checkers on 
cluster  regressions  and 
to  develop 
baseline  coverage,  and  then  wrote  additional  tests  as 
necessary  to hit uncovered conditions. 
throughout  the  development  of 
low-power 
tests 
that 
level) 
While establishing this coverage, we had  to make sure 
that 
the  clock  gating  conditions  did  not  themselves 
introduce new  logic bugs into the design.  It is not hard to 
imagine  all  sorts  of  nightmare  scenarios:  unit  A  is  late 
returning  data to unit B because part of  A was clock gated, 
or  unit  C  samples  a  signal  from  unit  D  that  is  undriven 
because  of  clock gating, or other variations  on this theme. 
In  fact, we found  many  such  bugs,  mostly  as  a  result  of 
(unit 
full-chip 
microarchitecture  validation,  using  the  standard  set  of 
checkers that we employed to catch such implementation- 
level  errors.  We had  the  ability  to override clock gating 
either  selectively  or  globally,  and  developed  a  random 
power  down  ,4PI  that  could  be  used  by  any  of  the 
validation  teams to piggyback clock gating on top of their 
regular  testing.  Once  we  had  developed confidence  that 
the mechanism was fundamentally sound, we built all our 
SRTL models to have clock gating enabled by default. 
validation 
design 
or 
that 
Once we had  implemented all the planned  clock gating 
conditions,  and  verified 
they  were  functioning 
correctly,  we  relied  primarily  on  measures  of  clock 
activity  to  make  sure  that  we  didn’t  lose  our  hard-won 
power  savings.  W e   used  a  special  set  of  tests  that 
attempted  to  power  down  as  much  of  each  cluster  as 
possible, and collected data to see what percentage of  the 
time lsach clock in  the machine was toggling.  We did this 
at  the: cluster level  and at  full-chip.  W e  investigated  any 
appreciable  increase  in  clock  activity  from  model  to 
model, and made sure that  (t was explainable and not due 
to designer error. 
Last, but by  no means least, we tried to make sure that 
the  design  was  cycle-for-cycle  equivalent  with  clock 
gating enabled and disabled.  We had established  this as a 
project  requirement, to lessen the likelihood  of undetected 
logic  bugs  or  performance  degradation  caused  by  clock 
gating.  To  do  this,  we  developed  a  methodology  for 
temporal  divergence  testing  which  essentially  ran  the 
same: set  of  tests  twice,  with  clock  gating  enabled  and 
disatded,  and  compared  the  results  on  a  cycle-by-cycle 
basis. 
We  organized  a  dedicated  Power  Validation  team  to 
f0Cu;j exclusively  on  this  task.  At  peak,  there  were  5 
people  working  on  this  team,  and  even  in  steady-state 
when  we  were  mostly  just  regressing  the  design  it  still 
required  2  people  to  keep  this  activity  going.  However, 
the results exceeded our fondest expectations: clock gating 
was fully functional on initial silicon, and we were able to 
meaisure approximately 20W of  power saving in a system 
running  typical  workloads.  The  Power  Validation  team 
filed  over  200 bugs themselves  as  a  result  of  pre-silicon 
validation  (we  filed  “power  bugs”  whenever  the  design 
did  not  implement  a  power-saving  feature  correctly, 
whether or not it resulted  in a functional failure). 
8. Full-chip Integration and Testing 
the 
lead 
took 
(AV)  team 
With a design as complex as the Pentium@ 4 processor, 
integrating  the  pieces  of  SRTL  code  together  to  get  a 
functioning  full-chip  model  (let  alone  one  capable  of 
executing IA-32 code) is not a trivial  task.  We developed 
an  elaborate  staging plan  that  detailed just  what  features 
the 
were  to  be  available  in  each  stage,  and  phased 
integration  over  a  roughly  12-month  period. 
The 
architecture  validation 
in 
developing  tests  that  would  exercise  the  new  features  as 
they  became  available in  each  phase, but  did  not  depend 
upon  any  as-yet  unimplemented  IA-32  features.  These 
tests  were  throwaway  work  -  their  main  purpose  was  to 
drive the  integration effort, not  to find bugs.  Along with 
these  tests we developed a methodology which we called 
feamre  pioneering:  when  a  new  feature  was  released  to 