title:NetPlier: Probabilistic Network Protocol Reverse Engineering from
Message Traces
author:Yapeng Ye and
Zhuo Zhang and
Fei Wang and
Xiangyu Zhang and
Dongyan Xu
NETPLIER: Probabilistic Network Protocol Reverse
Engineering from Message Traces
Yapeng Ye, Zhuo Zhang, Fei Wang, Xiangyu Zhang, Dongyan Xu
Department of Computer Science, Purdue University
{ye203, zhan3299, feiwang, xyzhang, dxu}@purdue.edu
Abstract—Network protocol reverse engineering is an impor-
tant challenge with many security applications. A popular kind
of method leverages network message traces. These methods
rely on pair-wise sequence alignment and/or tokenization. They
have various limitations such as difﬁculties of handling a large
number of messages and dealing with inherent uncertainty. In this
paper, we propose a novel probabilistic method for network trace
based protocol reverse engineering. It ﬁrst makes use of multiple
sequence alignment to align all messages and then reduces the
problem to identifying the keyword ﬁeld from the set of aligned
ﬁelds. The keyword ﬁeld determines the type of a message. The
identiﬁcation is probabilistic, using random variables to indicate
the likelihood of each ﬁeld (being the true keyword). A joint
distribution is constructed among the random variables and
the observations of the messages. Probabilistic inference is then
performed to determine the most likely keyword ﬁeld, which
allows messages to be properly clustered by their true types and
enables the recovery of message format and state machine. Our
evaluation on 10 protocols shows that our technique substantially
outperforms the state-of-the-art and our case studies show the
unique advantages of our technique in IoT protocol reverse
engineering and malware analysis.
I.
INTRODUCTION
Network protocol reverse engineering is an important
challenge to cyber-security. Many applications that are of
interest for security analysts often have their own undocu-
mented communication protocols. For example, autonomous
vehicles utilize CAN bus and FlexRay, control systems use
Modbus and DNP3, online chatting/conferencing applications
have their customized protocols. Many security analysis such
as static/symbolic vulnerability scanning [40], [24], exploit
generation [79], [19], fuzzing [65], [43], [44], [31], attack
detection [15], [29], and malware behavior analysis [75], [18]
require precise modeling of the network protocol. For instance,
knowing the protocol of a networking application is critical
to seed input generation in fuzzing; malware analysis often
requires composing well-formed messages to the Command
and Control (C&C) server so that hidden behaviors can be
triggered by the appropriate server responses [23], [83]; and
static/symbolic analysis needs to properly model networking
functions otherwise a lot of false positives may be generated.
Existing protocol reverse engineering techniques fall into
a few categories. The ﬁrst category leverages program anal-
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24531
www.ndss-symposium.org
ysis [28], [57], [82], [33], [59], [32]. By analyzing the rich
semantics of the application implementation (e.g., how input
buffer is accessed), these techniques may achieve high accu-
racy in reverse engineering. However, most of these techniques
require access to program binaries, which is often infeasible in
practice. For example, some IoT ﬁrmware is not accessible due
to their protection mechanism; it is hard to conduct dynamic
analysis if the binaries are packed or obfuscated. Even if the
binaries for a client application were available, its counterpart
on the server side would be much more difﬁcult to acquire.
Therefore, the other category focuses on using network traces,
which could be acquired by eavesdropping on the network.
There are two main techniques for network trace based reverse
engineering: alignment based (e.g., PIP [22], ScritGen [55],
and Netzob [26]) and token based (e.g., Veritas [81] and
Discoverer [35]). The former leverages various sequence align-
ment algorithms to align message pairs and compute similarity
scores. Messages are clustered based on such scores. Formats
are then derived by analyzing the commonality of messages
within clusters. However, the diversity of message contents
substantially degrades the quality of alignment, causing prob-
lems for downstream analysis. Token based methods propose
to ﬁrst tokenize the messages (e.g., to textual ﬁelds and binary
ﬁelds) before alignment to reduce variations. However, these
techniques often require delimiters to identify tokens (which
may not exist for binary protocols) or generate excessive
clusters as tokenization is based on deterministic heuristics.
That is, ad-hoc rules are used to perform tokenization and
these rules may not hold in many cases. Existing techniques
do not model such uncertainty and hence often yield incorrect
results. More discussion of such limitations can be found in
Section II.
We observe that the key to network protocol reverse engi-
neering is to identify the keyword ﬁeld that determines the type
of a message. While there are many heuristics to help locating
such keywords,
these heuristics are largely uncertain. The
reverse engineering of both the client side and the server side
can be coupled to achieve synergy because they have strong
correspondences. Based on these observations, we propose a
novel probabilistic approach to reverse engineering network
protocols. Our technique is completely network trace based and
does not require access to source code or binary code. Speciﬁ-
cally, it leverages multiple sequence alignment (MSA) [39] that
is widely used in biometrics to avoid the expensive pair-wise
alignment in existing work. The alignment is conservative and
initially performed on all the messages. As such, the common
structure shared by all messages can be disclosed and such
structure ought to include the keyword ﬁeld as the parser needs
to parse the keyword ﬁeld before it can perform type-speciﬁc
parsing. After the alignment, a probabilistic method is used to
determine which (aligned) ﬁeld is the keyword. To model the
inherent uncertainty, we introduce a random boolean variable
that predicates if a ﬁeld is the keyword. We speculatively
classify all the messages based on the values of the tentative
keyword. Observations can be made from the clustering results,
such as if messages within a cluster have similarity and if the
corresponding messages from the client side and the server
side fall into corresponding clusters. Random variables are
introduced to denote the conﬁdence of these observations. A
joint probability distributions is constituted by considering the
correlations between the keyword variable and observation
variables. Posterior marginal probabilities can be computed
for keyword variables to indicate the likelihood of individual
ﬁelds being the true keyword. Once the keyword is identiﬁed,
messages are clustered based on the keyword values and type
speciﬁc structures can be disclosed by aligning and analyzing
messages in clusters.
Our contributions are summarized as follows.
• We address a key challenge in network protocol
reverse engineering – keyword identiﬁcation, which
allows correctly clustering network messages and en-
ables high precision in downstream analysis such as
ﬁeld identiﬁcation and state machine reconstruction.
• We formulate keyword identiﬁcation as a probabilistic
inference problem, which allows us to naturally model
the inherent uncertainty.
• We build an end-to-end system NETPLIER, which
stands for “Probabilistic NETwork ProtocoL Reverse
EngIneERing”. It takes network traces as input and
produces the ﬁnal message format.
• We evaluate NETPLIER on 10 protocols commonly
used in competitor projects. Our results show that
NETPLIER can achieve 100% homogeneity and 97.9%
completeness, whereas the state-of-the-art techniques
can only achieve around 92% homogeneity and 52.3%
completeness. To validate generality, we use NET-
PLIER to reverse engineer wireless physical-layer pro-
tocols and multiple unknown protocols used in real
IoT devices. We also perform two case studies: (i)
reverse engineering the protocol for Google Nest, a
real world IoT smart app, allowing us to manipulate
the A/C unit controlled by the app, and (ii) reserve
engineering the C&C protocol for a recent malware,
allowing us to expose its hidden malicious behaviors.
NETPLIER and data are publicly available at [6].
II. MOTIVATION
In this section, we use an example to illustrate the limi-
tations of existing network trace based protocol reverse engi-
neering methods and motivate our technique.
A. Motivation Example
The trace snippet
in Figure 1 contains a sequence of
messages of Distributed Network Protocol 3 (DNP3), which is
a communication protocol used in industrial control systems.
The trace records information about sent time, IP addresses and
ports of the source and destination, and data for each message.
2
The message data includes contents of protocols ranging from
application layer to physical layer. Each protocol’s message
data is composed of several ﬁelds. Consider the message
data of DNP3 in Figure 1. The bytes in bold are a speciﬁc
ﬁeld denoting message type. It is also called the keyword.
Each message type has its own format, which deﬁnes the
syntax of this type. The sending and receiving of messages are
stateful within a network session. State transitions are usually
described by a state machine. To be speciﬁc, when a client
or server receives a new message, it determines its message
type by the keyword, parses the remaining ﬁelds following
the format of this type, and then takes actions according to
the state machine. For example in Figure 1, there are four
communication connections, which start with an Unsolicited
Response message mc0, mc2, mc3, and mc4 from the client and
a corresponding Conﬁrm message ms0, ms2, ms3, and ms4
from the server, respectively. After a connection is established,
the server could make requests with different commands, e.g.,
to Write like ms1, ms5, and ms6 or to Read like ms7, and the
client would conﬁrm with the Response messages (e.g., mc1,
mc5, mc6, and mc7).
The main goal of protocol reverse engineering is to infer
a protocol’s syntax and semantics. The ﬁrst step of protocol
reverse engineering is to group messages of the same type into
a cluster. Clustering is a crucial step as its results determine
the accuracy of further format and state machine inference.
Existing works usually consider messages from different di-
rections separately. In the following, we use messages from
the client as an example (mc0 −mc7) and discuss how existing
techniques and our technique conduct clustering. The ideal
clustering result is to put messages mc0, mc2, mc3, mc4 into
a cluster, and messages mc1 , mc5 , mc6, and mc7. into another
cluster.
B. Alignment-based Clustering
Sequence alignment algorithms, such as Needleman &
Wunsch [64], are originally used in Biology for the purpose
of arranging DNA, RNA, and protein sequences to identify
regions of similarity. This idea was borrowed by a large body
of existing network trace based protocol reverse engineering
methods, such as PIP [22], ScriptGen [55], and Netzob [26].
They use pairwise sequence alignment algorithms to align
each pair of messages and compute a similarity score by the
alignment results. After constructing a similarity matrix, the
messages/clusters with the highest similarity are recursively
merged by a clustering algorithm, such as UPGMA [74].
Protocol format and state machine are then derived from the
clustering results.
The alignment-based clustering methods work on an as-
sumption that messages are of the same type if they have
similar sequences of values. However, this assumption is not
true all the time. For messages of the same type, they may
have different values for same ﬁelds. For messages of different
types, they may share some common ﬁelds and have the same
values. Figure 2a shows the alignment results of message pair
(cid:104)mc0, mc2(cid:105) and (cid:104)mc0 , mc1(cid:105). The red bytes are the same value
aligned together. We can see that although mc0 and mc2 are
of the same type, their similarity is lower than mc0 and mc1,
which are of different types (illustrated by the shade). Based on
this weak assumption, the clustering results are problematic.
Fig. 1: Motivation example: establishing multiple DNP3 (an industrial control protocol) connections and performing some data
transfer; plain and shaded messages originate from the client and server side, respectively.
(a) Pairwise sequence alignment example
(b) Clustering results
Fig. 2: Clustering by Netzob. Plain-text and shaded messages
belong to two respective types
Figure 2b shows the clustering results by Netzob. It generates
two clusters and both contain messages of different types.
Based on the wrong clustering results, the further format and
state machine inference will also be inaccurate.
Another limitation of alignment-based clustering methods
is that it requires a threshold of similarity score to decide which
clusters should be merged together in the recursive clustering
step when using algorithms such as UPGMA. The clustering
results are sensitive to this threshold and different protocols
should use different thresholds. However, when reverse engi-
neering an unknown protocol, it is hard to compute the optimal
threshold without the ground truth. Normally, we can only use
a general threshold trained from other well studied protocols.
As such, the clustering accuracy likely degenerates.
C. Token-based Clustering
Token-based clustering methods split a message into tokens
and then group messages by speciﬁc token values or token
types. Most methods in this line, such as ASAP [52], Veri-
tas [81], Prisma [51], and ProDecoder [80], rely on predeﬁned
delimiters or n-grams to split messages into tokens, and then
search for the ones with the most frequent values which can
be further used to cluster messages.
Another token-based clustering strategy is to use token
type patterns. Discoverer [35], the state-of-the-art token based
3
method, uses token type patterns to conduct initial clustering,
followed by a combination of representative token values and
sequence alignment algorithms to improve clustering results.
Figure 3a shows the tokenization results by Discoverer. It
considers consecutive bytes with printable ASCII values as
a text token, leveraging the observation that the same type of
network messages have the same mixture of binary sequences
and textual strings. So the second to the fourth bytes in
mc2, mc3, and mc7 are marked as a text token T, and the
other individual bytes are marked as binary tokens B. After
tokenization, it observes two different token patterns, sequence
“BBBB ... B” for mc0, mc1, mc4, etc. and sequence “BTBB
... B” for mc2, mc3, and mc7. The differences of the two
patterns are highlighted in red. As such, Discoverer produces
two initial clusters as shown in Figure 3b. Then it divides each
cluster into sub-clusters by values of potential representative
(PR). Finally, it utilizes message alignment to merge some of
the sub-clusters to a larger cluster to avoid over-partitioning.
For example, in the ﬁrst cluster (mc0, mc4, mc1, mc5, mc6),
the token in red (‘B’) contains only two different values (81
and 82), which could be considered as a representative token
and used to obtain new sub-clusters (Cluster 1 and Cluster 2
in Figure 3c).
Finally it produces four clusters as shown in Figure 3c.
Although there is only one type in each cluster, each ground-
truth type (denoted by shade or no-shade) is suboptimally
divided into two smaller types (clusters). There are many
reasons causing this issue. First, there are no clear delimiters
in binary protocols. Hence most bytes are considered as
individual tokens, diminishing the value of tokenization as little
structural information is exposed. Also, the values of binary
tokens sometimes lie in the range of text tokens so that these
binary tokens could be mistaken for text tokens (e.g., the text
tokens in Figure 3a). A text string shorter than the minimum
length (for qualifying as a text token) is also wrongly marked
as binary tokens. Another problem is that
there could be
multiple representative tokens found in the recursive clustering
and merging step. All these reasons lead to excessive token
types. In our experiments (Section V), Discoverer always
suffers from redundant clusters, which indicates its clustering