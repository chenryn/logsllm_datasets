makes the evasion less stealthy. To make up for this weakness, the
adversary was observed to place redirection websites in front of
Bars, running cloaking techniques there to hide the repositories.
• Obfuscation. We found that the attack payloads in the repositories
were often obfuscated. Various kinds of obfuscation techniques
were found from simply Base64 encoding to online obfuscation
tools (e.g., api.myobfuscate.com). Actually, even the links to refer
15502014/06/25, 2014/01/27, 2014/02/26, 2013/06/23, 2011/11/08, 2010/
09/28). These attacks caused different types of malicious payloads
to be uploaded to their repository, including Adware, Trojan, virus
and others. Even though the bucket owner changed the access con-
trol policy in 2012 to prevent the unauthorized party from directly
listing the bucket content through browser, it remained accessible
by our tool mentioned in Section 4.2, which constructs an Autho-
rization ﬁeld in HTTP header, and unauthorized listing, upload and
even modiﬁcation can still occur.
5. DISCUSSION
Limitations of BarFinder. As mentioned earlier, Bar detection is
hard, since cloud repositories cannot be directly accessed by the
parties outside the cloud. Therefore, the goal of BarFinder is to
leverage the sites served by Bars to ﬁnd suspicious repositories. For
this purpose, we chose to utilize the collective features of these
sites, such as their topological relations, content shared across sites,
etc. This strategy could make the approach more robust, as the
collective features are more difﬁcult to evade compared with those
from individual sites. On the other hand, it requires that the party
running the system ﬁrst makes efforts to gather the sites using cloud
buckets, the more the better. Further, there are repositories that only
serve a small set of front-end sites: e.g., we found that among the
Alexa top 3K sites, 67 sites are connecting to the cloud buckets
only used by themselves. Those “self-serving” buckets are rather
popular in reputable websites such as appspot.com_android-site
only used by android.com, s3.amazonaws.com_ttv-backgroundart
only used by twitch.tv, etc. This fact makes the bad apples among
them hard to catch by BarFinder simply because not enough sites
using them are out there to allow us to differentiate these two types
of repositories. Detection techniques covering this type of Bars need
to be developed in the follow-up research.
Other defenses against Bars. Besides the detection effort made
by the third party, as BarFinder does, more can be done to mitigate
the threats posed by Bars, from the ends of the website owner, the
bucket owner and the service provider. The website owner could
perform integrity checks on the resources her website retrieves
from the bucket, making sure that it is not compromised. The
cloud bucket owner should carefully conﬁgure her cloud bucket to
avoid the issue we found and other misconﬁguration ﬂaws. In this
case, an automatic conﬁguration checker could be helpful. Most
importantly, the cloud provider does have the responsibility to move
more aggressively on detecting and removal of Bars from their
systems. This, however, is non-trivial, given the privacy concern
and the fact that some Bars can only be considered to be malicious
by looking at the malicious activities they are involved in, such as
those hosting Phishing pictures. Further research is needed to better
understand what the provider can do to address the issue.
Ethical issues. Most ﬁndings of the paper were made through an-
alyzing the data crawled from the public domain. Regarding the
study on the misconﬁguration problem we found, our scanner was
designed to minimize the privacy impacts on vulnerable reposito-
ries: speciﬁcally, it only tried out the functionality like ﬁle listing,
uploading and downloading. The impact of such operations are
very much in line with those of running online web testing tools
(e.g., Sucuri [?]) on others’ websites. Most importantly, we did
this with the full intention to protect such repositories from future
exploits, and also carefully avoided changing any existing content
there and deleted from our system all the ﬁles downloaded. Further,
we have already contacted the major vendors such as Groupon and
the cloud providers like Amazon about those security breaches, and
will continue to notify others and help them ﬁx the conﬁguration
problem. So far, Groupon has acknowledged the importance of our
ﬁndings and expressed gratitude for our help.
6. RELATED WORK
Bad site detection. Malicious web activities have been extensively
studied [?][?][?][?]. Most related to our work here is the use of
HTML content and redirection paths to detect malicious or com-
promised websites. Examples for the content-based detection in-
clude a DOM-based clustering systems for monitoring Scam web-
sites [?], classiﬁcation of websites for predicting whether some of
them will turn bad based on the features extracted from HTML
sources, and a monitoring mechanism [?] (called Delta) to keep
track of the changes made to the content of a website for detecting
script-injection campaigns. For those using malicious redirection
paths, prominent prior approaches use short redirection sequences
to capture bad sites [?], unique properties of malicious infrastruc-
ture (its density) for detecting drive-by downloads [?] or malware
distribution [?] and a trace-back mechanism that goes through the
redirection paths [?] for labeling malware download sites. Com-
pared with those prior studies, which all rely on the properties of the
targets they try to capture, BarFinder utilizes the features found from
the front-end websites using cloud buckets, as those repositories
may not be directly accessible. Also, our approach leverages a set
of unique collective features, based on the connected components
of a graph, which, to our knowledge, has never been used before.
Cloud security. Previous studies on security and privacy issues
in cloud storage primarily focus on the conﬁdentiality of the data
stored in the cloud or the attacks targeting the cloud computing
infrastructure. Examples include the study on co-locating attack
virtual machines (VM) with the target one on Amazon EC2 [?],
which enables a cache-based side-channel attack to infer sensitive
user information from the target [?], and the work on controlled-
channel attacks on multi-user cloud hosting environment [?], which
allows an untrusted VM to extract sensitive information from pro-
tected applications. More recently, attention has moved to abuse of
cloud-based services for fraudulent activities. For example, prior
research [?] analyzed Dropbox client software and discovered that
it can be exploited to hide ﬁles with unlimited storage capacity. Ad-
ditionally, [?] studied the use of the Amazon EC2 to host malicious
domains acting as command and control centers, exploit servers by
downloading malware samples and executing them in sandbox envi-
ronments to analyze their interactions with the cloud. [?] studied
the long-tail SEO spam on cloud platforms and measured its effec-
tiveness. Our study differs from these works by proposing BarFinder
to identify malicious cloud repositories and provide an in-depth anal-
ysis of the use of cloud repositories in malicious campaigns and how
they correlate with the websites they serve.
In another study, researchers [?] inspected the fraudulent trafﬁc
to cloud-hosted pages for the purpose of squandering the user’s
resources and raising her cloud-usage cost. They also proposed
detection methods based on the consistency of the requests. Unlike
these works, our research investigated the abuse of cloud bucket as
a malicious service, an emerging new cloud-based security threat
that has never been studied before.
7. CONCLUSION
The emergence of using cloud repositories as a malicious service
presents a new challenge to web security. This new threat, how-
ever, has not been extensively studied and little is known about its
scope and magnitude and the techniques the adversary employs. In
this paper, we report the ﬁrst systematic study on malicious and
compromised cloud repositories and the illicit online activities built
1551around them. We collected a small set of seeding Bars and iden-
tiﬁed a set of collective features from the websites connecting to
them. These features describe the effort made by the adversary to
protect Bars and utilize them to quickly build up a large campaign.
Using these features, we developed a new scanner that detected
over 600 Bars on top-of-the-line cloud platforms, including Google,
Amazon, and others. Over these Bars, we performed a large-scale
measurement study that led to surprising ﬁndings of such attacks.
Examples include the central roles those buckets play at each stage
of a web attack (redirection, displaying Phishing content, exploits,
attack payload delivery, etc.), the strategy to separate malware code
and conﬁguration ﬁles to avoid detection, and a conﬁguration ﬂaw
never reported before that was likely exploited to compromise many
cloud buckets. Our ﬁndings made an important step toward better
understanding and effective mitigating of this new security threat.
8. ACKNOWLEDGMENT
This work was supported in part by the National Science Founda-
tion (grants CNS-1223477, 1223495, 1527141 and 1618493); We
thank our anonymous reviewers for their useful comments.
9. REFERENCES
[1] Buckets. https://cloud.google.com/storage/docs/json_api/v1/buckets. [Online].
[2] Servnet. https://servnetshsztndci.onion. [Online].
[3] A. authors. Details omitted for double-blind reviewing.
[4] C. M. Bishop. Pattern recognition and machine learning. springer, 2006.
[5] K. Borgolte, C. Kruegel, and G. Vigna. Delta: automatic identiﬁcation of
unknown web-based infection campaigns. In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security, pages 109–120.
ACM, 2013.
[6] BuiltWith. Builtwith. http://builtwith.com/, 2015. [Online].
[7] Clean-MX. Clean mx realtime database.
http://support.clean-mx.de/clean-mx/viruses.php, 2015. [Online].
[8] W. Cohen, P. Ravikumar, and S. Fienberg. A comparison of string metrics for
matching names and records. In Proceedings of Kdd workshop on data cleaning
and object consolidation, 2003.
[9] C. Crawl. Common crawl. https://commoncrawl.org/, 2015. [Online].
[10] damballa. Dgas in the hands of cyber-criminals:examining the state of the art in
malware evasion techniques. https://www.damballa.com/downloads/r_pubs/
WP_DGAs-in-the-Hands-of-Cyber-Criminals.pdf, 2015. [Online].
[11] M. F. Der, L. K. Saul, S. Savage, and G. M. Voelker. Knock it off: proﬁling the
online storefronts of counterfeit merchandise. In Proceedings of the 20th ACM
SIGKDD international conference on Knowledge discovery and data mining,
pages 1759–1768. ACM, 2014.
[12] DNSDB. Passivedns. https://www.dnsdb.info/, 2015. [Online].
[13] Google. Google hosted libraries.
https://developers.google.com/speed/libraries/?csw=1, 2015. [Online].
[14] Google. Publish website content.
https://developers.google.com/drive/web/publish-site, 2015. [Online].
[15] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko,
P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis, et al. Manufacturing
compromise: the emergence of exploit-as-a-service. In Proceedings of the 2012
ACM conference on Computer and communications security, pages 821–832.
ACM, 2012.
[16] X. Han, N. Kheir, and D. Balzarotti. The role of cloud services in malicious
software: Trends and insights. In DIMVA 2015, 12th Conference on Detection
of Intrusions and Malware & Vulnerability Assessment, July 9-10, 2015, Milan,
Italy, Milan, ITALY, 07 2015.
[17] J. Idziorek, M. Tannian, and D. Jacobson. Detecting Fraudulent Use of Cloud
Resources. In Proc. 3rd ACM Workshop on Cloud Computing Security
Workshop, Chicago, IL, Oct. 2011.
[18] L. Invernizzi, P. M. Comparetti, S. Benvenuti, C. Kruegel, M. Cova, and
G. Vigna. Evilseed: A guided approach to ﬁnding malicious web pages. In
Security and Privacy (SP), 2012 IEEE Symposium on, pages 428–442. IEEE,
2012.
[19] L. Invernizzi, S. Miskovic, R. Torres, S. Saha, S. Lee, M. Mellia, C. Kruegel,
and G. Vigna. Nazca: Detecting malware distribution in large-scale networks.
In Proceedings of the Network and Distributed System Security Symposium
(NDSS), 2014.
[20] Z. Li, S. Alrwais, X. Wang, and E. Alowaisheq. Hunting the red fox online:
Understanding and detection of mass redirect-script injections. In Security and
Privacy (SP), 2014 IEEE Symposium on, pages 3–18. IEEE, 2014.
[21] Z. Li, S. Alrwais, Y. Xie, F. Yu, and X. Wang. Finding the linchpins of the dark
web: a study on topologically dedicated hosts on malicious web infrastructures.
In Security and Privacy (SP), 2013 IEEE Symposium on, pages 112–126. IEEE,
2013.
[22] X. Liao, C. Liu, D. Mccoy, E. Shi, and R. Beyah. Characterizing long-tail seo
spam on cloud web hosting services. In Proceedings of the International World
Wide Web Conference, 2016.
[23] T. Moore, N. Leontiadis, and N. Christin. Fashion crimes: trending-term
exploitation on the web. In Proceedings of the 18th ACM conference on
Computer and communications security, pages 455–466. ACM, 2011.
[24] M. Mulazzani, S. Schrittwieser, M. Leithner, and M. Huber. Dark Clouds on the
Horizon: Using Cloud Storage as Attack Vector and Online Slack Space. In
Proc. 20th USENIX Security Symposium, San Francisco, CA, Aug. 2011.
[25] T. Nelms, R. Perdisci, M. Antonakakis, and M. Ahamad. Webwitness:
Investigating, categorizing, and mitigating malware download paths. In 24th
USENIX Security Symposium (USENIX Security 15), pages 1025–1040,
Washington, D.C., Aug. 2015. USENIX Association.
[26] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my
cloud: exploring information leakage in third-party compute clouds. In
Proceedings of the 16th ACM conference on Computer and communications
security, pages 199–212. ACM, 2009.
[27] Scipy. scipy.cluster.hierarchy.linkage. http://docs.scipy.org/doc/scipy/reference/
generated/scipy.cluster.hierarchy.linkage.html, 2015. [Online].
[28] Sklearn. sklearn.svm.svc.
http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html, 2015.
[Online].
[29] Snort. Snort ssl and tls. http://manual.snort.org/node147.html, 2015. [Online].
[30] solutionary. Threat-intelligence. https://www.solutionary.com/_assets/pdf/
research/sert-q4-2013-threat-intelligence.pdf, 2015. [Online].
[31] G. Stringhini, C. Kruegel, and G. Vigna. Shady paths: Leveraging surﬁng
crowds to detect malicious web pages. In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security, pages 133–144.
ACM, 2013.
[32] Sucuri. Sucuri. https://sucuri.net/, 2015. [Online].
[33] Symantec. The future of ids.
http://www.symantec.com/connect/articles/future-ids, 2015. [Online].
[34] VirusTotal. Virustotal. https://www.virustotal.com/, 2015. [Online].
[35] WhatWeb. Whatweb. http://www.morningstarsecurity.com/research/whatweb,
2015. [Online].
[36] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deterministic side
channels for untrusted operating systems. In Proceedings of the 36th IEEE
Symposium on Security and Privacy (Oakland). IEEE â ˘A¸S Institute of
Electrical and Electronics Engineers, May 2015.
[37] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-Tenant Side-Channel
Attacks in PaaS Clouds. In Proc. 21st Conference on Computer and
Communications Security (CCS), Scottsdale, AZ, Oct. 2014.
Appendices
A List of cloud hosting platforms
Table 7: List of cloud hosting platforms.
Cloud Platform
Domain
heroku
amazon S3
cloudfront
windowsnet
azure
google
appspot
msecdn
bitbucket
github
sina
olympe
rackcdn
baiduyun
qiniu
akamaihd
yahoo
sogo
go2cloud
aliyun
herokuapp.com
s3.amazonaws.com
cloudfront.net
windows.net
azurewebsites.net
googledrive.com
appspot.com
msecdn.net
bitbucket.org
github.io
sinaapp.com
olympe.in
rackcdn.com
duapp.com
qiniucdn.com
akamaihd.net
hostingprod.com
sogoucdn.com
go2cloud.org
aliyuncs.com
1552