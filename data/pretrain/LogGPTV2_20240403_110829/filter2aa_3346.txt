前⾔
常规的shellcode注⼊⼀般是通过 VirtualAllocEx , WriteProcessMemory  和 
CreateRemoteThread  来实现的，但是这种⽅式是被安全软件重点监控的，同时微软提供的
ETW接⼝也是可以轻易检测出上述⽅式进⾏代码注⼊的痕迹。本⽂的核⼼是讲解怎么利⽤具
备 RWX-S 权限且⾃身有签名的⽩DLL进⾏⼀种⽐较隐蔽的shellcode注⼊，
并讲解具体的代码实现以及在写代码实现的过程中遇到的坑。本⽅法是由⽂章提出的：https:
//billdemirkapi.me/sharing-is-caring-abusing-shared-sections-for-code-injection/ ，详情可
以参考此⽂章。
基础知识回顾
PE⽂件的每个section都具备⾃⼰的权限，表明他被映射到虚拟内存之后的操作权限，也就是 
SECTION_CHARACTERISTICS  这个字段，占四个字节。
通常来讲 .text  节区只具备 IMAGE_SCN_MEM_READ  和 IMAGE_SCN_MEM_EXECUTE  权
限， .data  节区⼀般只具备 IMAGE_SCN_MEM_READ , IMAGE_SCN_MEM_WRITE  权限。 当PE⽂
件被映射到内存后，对⼀个不具备 IMAGE_SCN_MEM_WRITE  权限的节区进⾏写操作或者对⼀
个没有 IMAGE_SCN_MEM_EXECUTE  的节区进⾏执⾏时，都会报异常。
看微软的⽂档：document, 会发现⼀个权限叫做 IMAGE_SCN_MEM_SHARED 。 那共享到底意味
着什么？据测试显示：具备此权限的section会被当前系统所有的进程共享，如果进程A和进
程B都加载了具备IMAGE_SCN_MEM_SHARED权限的模块C，那么模块C的此section在系
统层⾯上只有⼀份，这也就意味着A进程对C的修改（有IMAGE_SCN_MEM_WRITE权限）
会影响到B进程
那么思路就来了，如果⼀个模块的某个节区是具备 RWX-S  权限，我只需要把它加载到进程A
中，然后修改它的内容为恶意代码，然后想办法让他加载到进程B中，就可以实现在B中执⾏
恶意代码了， 那这种利⽤主要分为如下⼏个步骤：
⾄于怎么去找⼀个具备 RWX-S权限的签名dll，原⽂作者也提供了⼀个yara规则在virustotal上
来筛选，不再细说:
这⾥提供⼀个我找到的DLL: https://www.virustotal.com/gui/file/855277c0aeea89d17a07e27
e9cf79c98b26e70e8e57561c4b592097e0032c4e9，
以后的代码都是基于此DLL完成的。
1. 找到⼀个有签名的并且具备 RWX-S 权限的dll。(不具备RWX-S权限也可以，可以patch系
统内的已签名的dll，但是这样会破坏签名，不够隐蔽)
2. 将DLL加载到进程A的内存⾥，修改 RWX-S 权限的section的代码进⾏patch
3. 调⽤  SetWindowsHookEx，使⽤DLL中的某个函数指针作为 HOOKPROC 参数，使得DLL被
注⼊到⽬标进程B中。
4. ⽬标进程B加载DLL，并触发恶意代码执⾏。
import "pe"
rule RWX_S_Signed_Search
{
  meta:
    description = "Detects RWX-S signed binaries. This only verifies 
that the image contains a signature, not that it is valid."
    author = "Bill Demirkapi"
  condition:
    for any i in (0..pe.number_of_sections - 1): (
      (pe.sections[i].characteristics & pe.SECTION_MEM_READ) and
      (pe.sections[i].characteristics & pe.SECTION_MEM_EXECUTE) and
      (pe.sections[i].characteristics & pe.SECTION_MEM_WRITE) and
      (pe.sections[i].characteristics & pe.SECTION_MEM_SHARED) )
    and pe.number_of_signatures > 0
}
其实这⾥⾯最关键的是步骤⼆，主要涉及两个问题：
1. patch什么位置可以保证此DLL被进程B加载之后，恶意代码⼀定会被执⾏
2. patch成什么样的代码才能保证进程B不会因为运⾏异常⽽崩溃
先回答问题1：当前DLL被进程B加载后⼀定会被执⾏的有两个函数，分别是 DllMain  和 设
置给 SetWindowsHookEx  的消息hook函数, 我觉得这两个函数中 DllMain 更合适被patch为
恶意代码，理由是 hook procedure  在每次有对应消息需要处理的时候都会被调⽤，这会导
致我们的恶意代码被执⾏很多次，这显然不是我们想要的。同时 DllMain  在被进程加载的那
⼀刻就会执⾏，能够保证我们的shellcode在第⼀时间被执⾏。
patch DllMain为恶意代码
此时就有⼈说了，patch DllMain很简单啊，加载这个dll之后，获取 imagebase，然后解析PE
头找到entrypoint，将 msfvenom ⽣成的shellcode直接复制 imagebase + entrypoint 的位置
就可以了。 开始我也是这么认为的，但是事实证明，这样不⾏。
我们来看 DllMain的函数声明：
BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,  // handle to DLL module
    DWORD fdwReason,     // reason for calling function
    LPVOID lpReserved )  // reserved
{
    // Perform actions based on the reason for calling.
    switch( fdwReason ) 
    { 
        case DLL_PROCESS_ATTACH:
         // Initialize once for each new process.
         // Return FALSE to fail DLL load.
            break;
        case DLL_THREAD_ATTACH:
         // Do thread-specific initialization.
            break;
此函是有返回值的，当对应的 fdwReason  操作成功后，必须返回 TRUE/FALSE。 此函数直
接被替换为 meterpreter 的 shellcode，就会导致此函数⽆法返回。这种情况下的DLL加载是
在系统新开的⼀个线程中完成的，如果 DllMain  回调函数不返回，系统就会kill掉这个线
程，以⾄于我们⾃⼰的恶意代码⽆法持续的执⾏，那解决办法就是要在 DllMain  中新开⼀个
线程，在线程⾥执⾏恶意代码，然后此函数返回。
由于这⼀段代码需要在B进程的进程空间中执⾏，此时没有任何地址相关的信息，所以这⼀段
代码必须要写成shellcode才能正常执⾏
由于要⾃⼰写⼀段shellcode，那我们就没有必要再去使⽤ meterpreter  的shellcode了，也
就是说这⼀段代码要完成 meterpreter  第⼀阶段的功能，直接下载stage2 的代码，然后使
⽤ CreateThread 进⾏执⾏，所以基本的代码框架：
        case DLL_THREAD_DETACH:
         // Do thread-specific cleanup.
            break;
        case DLL_PROCESS_DETACH:
         // Perform any necessary cleanup.
            break;
    }
    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}
BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,  // handle to DLL module
    DWORD fdwReason,     // reason for calling function
    LPVOID lpReserved )  // reserved
{
    switch( fdwReason ) 
    { 
        case DLL_PROCESS_ATTACH:{
            // 1. 加载 ws2_32.dll 
            // 2. 获取与socket相关的函数的地址
            // 3. 连接socket, 如果连接失败，返回FALSE 
            // 4. 申请内存空间,下载payload
要完成这样⼀段shellcode，我们是需要再创建⼀个项⽬，然后编写相关的c或者汇编代码，编
译完成之后把相对于的16进制copy到当前的项⽬中来，这样做⼀⽅⾯⽐较麻烦，容易出错；
另⼀⽅⾯不太灵活，不便于替换c2地址等操作。
我想要就在当前项⽬中完成，编译完之后，运⾏时patch进去，要怎么做呢？
仔细想⼀下，当 DllMain 回调函数被执⾏的时候，难道真的任何地址信息都没有提供吗？其
实不然。
看 DllMain  的第⼀个参数 hinstDLL  的值其实就是当前被加载模块的基址，有了这个基
址，理论上我们就可以访问到当前模块任何地址空间数据。
那思路有了: 我们可以让进程A向 DLL 相对于 imageBase  固定偏移的地⽅写⼊⼀些必要的函
数指针和数据，例如 LoadLibraryA ， GetProcAddress 的函数的地址，以及 c2 的ip 和端⼝
信息，然后 DllMain  被调⽤的时候会到指定偏移的地⽅读取这些数据，完成⾃⼰的功能，示
意图如下：
            // 5. 调⽤ CreateThread 执⾏payload ，然后返回 TRUE
            break;
        }
        case DLL_THREAD_ATTACH:
            break;
        case DLL_THREAD_DETACH:
            break;
        case DLL_PROCESS_DETACH:
            break;
    }
    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}
下⾯实现就⽐较简单了，⾸先需要定义⼀下要向DLL中写⼊的数据的结构：
其中 fn  开头的存储的是对应函数的指针， char 数组保存的是⼀些字符串信息，便于利⽤
这些字符串获取到socket相关的函数的地址。最后 host 和 port 存储的c2的信息，flag
是 meterpreter 第⼀阶段向第⼆阶段的传参约定数据。不了解的可以去读⼀下 
meterpreter 的源码，这⾥不再细说他的相关细节。
接下来将这个结构体初始化，然后放到固定偏移 OFFSET_TO_SHELLCODE  上去：
然后开始编写伪造的DllMain，也就是shellcode的主体代码，如下:
⾸先读取指定偏移获取之前存储的数据：
然后当 DLL_PROCESS_ATTACH  发⽣时，调⽤执⾏相关的操作加载远程的恶意代码：
然后将这段代码patch到DllMain的位置：
ShellCodeEnd  是我定义的⼀个空的函数，他紧跟在 myDllMain 后⾯，主要是为了帮助我们
定位出函数 myDllMain 在⽂件中的⼤⼩。
patch hook procedure 函数防⽌程序崩溃
只经过上述patch的DLL是可以满⾜执⾏恶意代码的功能，但是会引起被注⼊程序的异常或者
崩溃，因为我们是调⽤ SetWindowsHookEx  设置的消息钩⼦，我们传⼊的 hook procedure  
也并⾮⼀个钩⼦处理函数，它并不会调⽤ CallNextHookEx  ，就导致被注⼊的进程⽆法响应
相关的消息，甚⾄运⾏异常代码⽽崩溃，这样会导致获取的session挂掉， 因此这⾥也需要对 
hook procedure  进⾏代码patch。
这⾥就是使⽤传统的shellcode的写法，就是获取 PEB ，遍历dll，然后加载 
CallNextHookEx  并调⽤，这⾥使⽤了 lazy_import  的宏 LI_FN ,他是可以⾃动展开为
shellcode的，不需要⾃⼰再写了。
主程序
加载相关 RWX-S的模块，解析PE结构，获取相关的地址：
设置消息钩⼦，进⾏dll注⼊。
我这⾥sleep了200秒，然后卸载掉钩⼦，这个时间⻓度⾜够 explorer.exe  触发 
WH_GETMESSAGE  消息，并上线了。
当钩⼦被卸载之后， KbdEditDllPremium.dll  也会从内存中卸载，此时主程序其实可以直
接删掉 KbdEditDllPremium.dll 进⾏彻底的毁⼫灭迹。
内存⾥虽然已经没有了 KbdEditDllPremium.dll  模块，但是却依然不影响我们的session交
互，因为此时的恶意代码运⾏在 explorer.exe  申请的堆空间上。
这对于⼊侵痕迹的隐藏是⾮常有⽤的⼀个技巧。
补充说明
最后还需要再补充⼀下，因为要在此项⽬中要编译⽣成shellcode，所以要对⼀些编译选项就
⾏⼀些调整，防⽌⽣成的代码⽆法在其他进程空间中运⾏。
运⾏库选择MT，然后禁⽤GS保护。
代码优化也需要调整⼀下。
最后扩展⼀句：如果⽆法找到⼀个已经签名的RWX-S权限的dll，我们甚⾄可以修改系统的dll
添加S权限，然后保存到临时⽬录，注⼊完成之后删除掉。
为了避免安全⻛险，代码以及有RWX-S权限的签名DLL就不发源⽂件了，如果感兴趣，可以
联系我获取。