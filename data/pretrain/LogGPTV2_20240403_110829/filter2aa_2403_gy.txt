POP：出栈指令。它从 SS：［ESP］中取值，再执行 ESP=ESP+4（或 8）的操作。 
PUSH：入栈指令。它先进行 ESP=ESP+4（或 8），再向地址 SS：［ESP］存储数据。 
RET：子程序返回函数，相当于 POP tmp 或 JMP tmp。 
实际上 RET 是汇编语言的宏。在 Windows 和*NIX 环境中，它会被解释为 RETN（“return near”）；在
MS-DOS 的寻址方式里，它被解释为 RETF（参见本书第 94 章）。 
RET 指令可以有操作数。在这种情况下，它等同于 POP tmp、ADD ESP op1 及 JMP tmp。在符合调用
约定 stdcall 的程序里，每个函数最后的 RET 指令通常都有相应的操作数。有关细节请参见本书的 64.2。 
SAHF：标识传送指令。它把 AH 寄存器的值，复制到 CPU 到标识上。对应的数权关系如下表所示。 
7 
6 
5 
4 
3 
2 
1 
0 
SF 
ZF 
AF 
PF 
CF 
SBB：借位减法运算指令。计算出操作数间的差值之后，如果 CF 标识位为 1，则将差值递减。SBB
指令常见于大型数据的减法运算。例如，在 32 位系统上计算 2 个 64 位数据的差值时，编译器通常组合使
用 SUB 和 SBB 指令： 
; 计算两个 64 位数的差值；val1＝val1-val2 
; .lo 代表低 32 位； .hi 代表高 32 位 
SUB val1.lo, val2.lo 
SBB val1.hi, val2.hi ; 使用了前一个指令设置的 CF 标识位 
本书第 24 章还有更详细的介绍。 
SCASB/SCASW/SCASD/SCASQ（M）：比较 8 位单字节数据（Byte）/16 位 Word 数据（Word）/32 位
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
921 
双字型数据（Dword）/64 位四字型数据（Qword）的指令。它将 AX/EAX/RAX 寄存器里的值当作源操
作数，另一个操作数则取自 DI/EDI/RDI 寄存器。在比较结果之后再设置标识位，设置标识位的方式和
CMP 指令相同。 
这些指令通常与 REPNE 指令前缀组合使用。在这种情况下，组合指令将把寄存器 AX/EAX/RAX 里存
储的值当作关键字，在缓冲区里进行搜索。此时，REPNE 里的 NE 就意味着：如果值不相等，则继续进行
比较（搜索）。 
这种指令常常用于实现 strlen() 函数，以判明 ASCIIZ 型字符串的长度。例如： 
lea 
   edi, string 
mov 
   ecx, 0FFFFFFFFh ; 扫描 232−1 bytes, 即, 接近“无限” 
xor 
   eax, eax 
    ; 0 作终止符 
repne scasb 
add 
   edi, 0FFFFFFFFh ; 修正 
; 现在，EDI 寄存器的值指向里 ASCIIZ 字符串的最后一个字符 
; 接下来将计算字符串的长度 
; 目前 ECX = -1-strlen 
not 
   ecx 
dec 
   ecx 
; 此后，ECX 的值是字符串的长度值 
如果 AX/EAX/RAX 里存储的值不同，那么这个函数的功能就和标准 C 函数 memchr() 一致，即搜索特
定 byte。 
SHL：逻辑左移指令。 
SHR：逻辑右移指令。 
指令常用于乘以/除以 2n 乘除运算。此外，它们还常见于字段处理的各种实践方法（请参见本书第
19 章）。 
SHRD op1，op2，op3：双精度右移指令。把 op2 右移 op3 位，移位引起的空缺位由 op1 的相应位进
行补足。详细介绍，请参见本书第 24 章。 
STOSB/STOSW/STOSD/STOSQ：8 位单字节数据（Byte）/16 位 Word 数据（Word）/32 位双字型数
据（Dword）/64 位四字型数据（Qword）的输出指令。它把 AX/EAX/RAX 的值当作源操作数，存储到
DI/EDI/RDI 为目的串地址指针所寻址的存储器单元中去。指针 DI 将根据 DF 的值进行自动调整。 
在与 REP 前缀组合使用时，它将使用 CX/ECX/RCX 寄存器作循环计数器、进行多次循环；工作方式
与 C 语言到 memset() 函数相似。如果编译器能够在早期阶段确定区间大小，那么将通过 REP MOVSx 指令
实现 memset() 函数，从而减少代码碎片。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
922 
逆向工程权威指南（下册） 
例如，memset（EDI，0xAA，15）对应的汇编指令是： 
;在 EDI 中存储 15 个 0xAA 
CLD                     ; set direction to "forward" 
MOV EAX, 0AAAAAAAAh 
MOV ECX, 3 
REP STOSD              ; write 12 bytes 
STOSW                   ; write 2 more bytes 
STOSB                   ; write remaining byte 
在复制 15 字节的内容时，从寄存器读取的操作效率来看，上述代码的效率要高于 15 次数据读写（REP 
STOSB）的操作效率。 
SUB：减法运算指令。常见的“SUB 寄存器，寄存器”指令可进行寄存器清零。 
TEST：测试指令。在设置标识位方面，它和 AND 指令相同，但是它不存储逻辑与的运算结果。详细
介绍请参见本书的第 19 章。 
XCHG：数据交换指令。 
XOR op1，op2：逻辑异或运算指令。常见的“XOR reg，reg”用于寄存器清零。 
XOR 指令普遍用于“翻转”特定比特位。无论以哪个操作符作为源数据，只要另外一个操作符（参照
数据）的指定位为 1，那么运算结果里的那一位数据都是源数据相应位的非值。 
输入 A 
输入 B 
运 算 结 果 
0 
0 
0 
0 
1 
1 
1 
0 
1 
1 
1 
0 
另外，如果参照数据的对应位为 0，那么运算结果里的那一位数据都是源数据相应位的原始值。这是
XOR 操作非常重要的特点，应当熟练掌握。 
A.6.3  不常用的汇编指令 
BSF：顺向位扫描指令。详情请参见本书 25.2 节。 
BSR：逆向位扫描指令。 
BSWAP：重新整理字节次序的指令。它以字节为单位逆序重新排列字节序，用于更改数据的字节序。 
BTC：位测试并取反的指令。 
BTR：位测试并清零的指令。 
BTS：位测试并置位的指令。 
BT：位测试指令。 
CBW/CWD/CWDE/CDQ/CDQE：signed 型数据的类型转换指令： 
 CBW：把 AL 中的字节（byte）型数据转换为字（word）型数据，存储于 AX 寄存器。 
 CWD：把 AX 中的字（word）型数据转换为双字（Dword）型数据、存储于 DX-AX 寄存器对。 
 CWDE：把 AX 中的字（word）型数据转换为双字字（Dword）型数据，存储于 DAX 寄存器。 
 CDQ：把 EAX 中的双字（word）型数据转换为四字（Qword）型数据，存储于 EDX：EAX 寄存
器对。 
 CDQE（x64 指令）：把 EAX 中对双字（Dword）型数据转换为四字（Qword）型数据，并存储于
RAX 寄存器。 
上述五个指令均能正确处理 signed 型数据中对符号位、对高位进行正确的填补。详情请参见本书的
第 24 章第 5 节。 
CLD 清除 DF 标识位。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
923 
CLI（M）：清除 IF 标识位。 
CMC（M）：变换 CF 标识位。 
CMOVcc：条件赋值指令。如果满足相应的条件代码（cc），则进行赋值。有关条件代码 cc 的各种代表意，
请参见前文 A.6.2 对 Jcc 的详细说明。 
CMPSB/CMPSW/CMPSD/CMPSQ（M）：比较 8 位单字节数据（Byte）/16 位 Word 数据（Word）/32
位双字型数据（Dword）/64 位四字型数据（Qword）的指令。它将 SI/ESI/RSI 寄存器里的值当作源操作数
的地址，另一个操作数的地址则取自 DI/EDI/RDI 寄存器。在比较结果之后再设置标识位，设置标识位的方
式和 CMP 指令相同。 
这些指令通常与指令前缀 REP 组合使用。在这种情况下，组合指令将 CX/ECX/RCX 寄存器的值当作
循环计数器进行多次循环比较，直至 ZF 标识位为零。也就是说，它也常用作字符比较（或搜索）。 
它的工作方式和 C 语言的 memcmp() 函数相同。 
以 Windows NT 内核（WindowsResearchKernel v1.2）为例，base\ntos\rtl\i386\movemem.asm 代码如下所示。 
指令清单 A.3  base\ntos\rtl\i386\movemem.asm 
; ULONG 
; RtlCompareMemory ( 
;     IN PVOID Source1, 
;     IN PVOID Source2, 
;     IN ULONG Length 
;     ) 
; 
; Routine Description: 
; 
;     This function compares two blocks of memory and returns the number 
;     of bytes that compared equal. 
; 
; Arguments: 
; 
;     Source1 (esp+4) - Supplies a pointer to the first block of memory to 
;         compare. 
; 
;     Source2 (esp+8) - Supplies a pointer to the second block of memory to 
;         compare. 
; 
;     Length (esp+12) - Supplies the Length, in bytes, of the memory to be 
;         compared. 
; 
; Return Value: 
; 
;     The number of bytes that compared equal is returned as the function 
;     value. If all bytes compared equal, then the length of the original 
;     block of memory is returned. 
; 
;-- 
RcmSource1       equ      [esp+12] 
RcmSource2       equ      [esp+16] 
RcmLength         equ      [esp+20] 
CODE_ALIGNMENT 
cPublicProc _RtlCompareMemory,3 
cPublicFpo 3,0 
          push 
esi               
; save registers 
          push 
edi 
          cld                       
; clear direction 
          mov  
esi,RcmSource1  
; (esi) -> first block to compare 
          mov  
edi,RcmSource2  
; (edi) -> second block to compare 
; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
924 
逆向工程权威指南（下册） 
;     Compare dwords, if any. 
; 
rcm10:  mov  
ecx,RcmLength 
; (ecx) = length in bytes 
         shr  
ecx,2          
; (ecx) = length in dwords 
         jz   
rcm20          
; no dwords, try bytes 
         repe 
cmpsd          
; compare dwords 
         jnz  
rcm40            
; mismatch, go find byte 
; 
;  Compare residual bytes, if any. 
; 
rcm20:  mov  
ecx,RcmLength 
; (ecx) = length in bytes 
         and  
ecx,3          
; (ecx) = length mod 4 
         jz   
rcm30          
; 0 odd bytes, go do dwords 
         repe 
cmpsb          
; compare odd bytes 
         jnz  
rcm50          
; mismatch, go report how far we got 
; 
;  All bytes in the block match. 
; 
rcm30:  mov       eax,RcmLength   
; set number of matching bytes 
         pop       edi               
; restore registers 
         pop       esi               
; 
         stdRET   _RtlCompareMemory 
; 
;  When we come to rcm40, esi (and edi) points to the dword after the 
;  one which caused the mismatch.  Back up 1 dword and find the byte. 
;  Since we know the dword didn't match, we can assume one byte won't. 
; 
rcm40:  sub     esi,4            
; back up 
         sub     edi,4            
; back up 
         mov     ecx,5            
; ensure that ecx doesn't count out 
         repe    cmpsb            
; find mismatch byte 
; 
;  When we come to rcm50, esi points to the byte after the one that 
;  did not match, which is TWO after the last byte that did match. 
; 
rcm50:  dec     esi              
; back up 
         sub     esi,RcmSource1 
; compute bytes that matched 
         mov     eax,esi  
; 
         pop     edi             
; restore registers 
         pop     esi 
; 
         stdRET  _RtlCompareMemory 
stdENDP _RtlCompareMemory 
当内存块的尺寸是 4 的倍数时，这个函数将使用 32 位字型数据的比较指令 CMPSD，否则使用逐字比
较指令 CMPSB。 
CPUID：返回 CPU 信息的指令。详情请参见本书的 21.6.1 节。 
DIV：无符号型数据的除法指令。 
IDIV：有符号型数据的除法指令。 
INT（M）：INT x的功能相当于 16 位系统中的PUSHF；CALL dwordptr[x*4]。在MS-DOS中，INT指令普
遍用于系统调用（syscall）。它调用AX/BX/CX/DX/SI/DI寄存器里的中断参数，然后跳转到中断向量表
①
① Interrupt Vector Table。它位于地址空间的开头部分，是实模式中断机制的重要组成部分，表中记录所有中断号对应的中断服
务程序的内存地址。 
。因为
INT的opcode很短（2 字节），而且通过中断调用MS-DOS服务的应用程序不必去判断系统服务的入口地址，所以
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
925 
INT指令曾盛行一时。中断处理程序通过使用IRET指令即可返回程序的控制流。 
最常被调用的MS-DOS中断是第 0x21 号中断，它负责着大量的API接口。有关MS-DOS各中断的完整
列表，请参见Ralf Brown撰写的《The x86 Interrupt List》
①
MSVC编译器有INT3 对应的编译器内部函数—__debugbreak()。
。 
在 MS-DOS 之后，早期的 Linux 和 Windows（参见本书第 66 章）系统仍然使用 INT 指令进行系统调
用。近些年来，它们逐渐使用 SYSENTER 或 SYSCALL 指令替代了 INT 指令。 
INT 3（M）：这条指令有别于其他的 INT 指令。它的 opcde 只有 1 个字节，即（0xCC），普遍用于程序
调试。一般来说，调试程序就是在需要进行调试的断点地址写上 0xCC（opcode 替换）。当被调试程序执
行 INT3 指令而导致异常时，调试器就会捕捉这个异常从而停在断点处，然后将断点处的指令恢复成原
来指令。 
在 Windows NT 系统里，当 CPU 执行这条指令时，系统将会抛出 EXCEPTION_BREAKPOINT 异常。
如果运行了主机调试程序/ host debugger，那么这个调试事件将会被主机调试程序拦截并处理；否则，Windows
系统将会调用系统上注册了的某个调试器/system debugger 进行响应。如果安装了 MSVS（Microsoft Visual 
Studio），在执行 INT3 时，Windows 可能会启动 MSVS 的 debugger，继而调试这个进程。这种调试方法改
变了原程序的指令，容易被软件检测到。人们开发出了很多反调试技术，通过检查加载代码的完整性防止
他人进行逆向工程的研究。 
②
Kernel32.dll里还有win32 的系统函数DebugBreak()，专门执行INT 3。
③
This branch of cryptography is fast-paced and very politically charged. Most designs are secret; a majority of 
military encryptions systems in use today are based on LFSRs. In fact, most Cray computers (Cray 1, Cray 
X-MP, Cray Y-MP) have a rather curious instruction generally known as “population count.” It counts the 1 
bits in a register and can be used both to efficiently calculate the Hamming distance between two binary words 
and to implement a vectorized version of a LFSR. I’ve heard this called the canonical NSA instruction, 
demanded by almost all computer contracts. 
IN（M）：数据输入指令，用于从外设端口读取数据。这个指令常用于 OS 驱动程序和 MS-DOS 的应
用程序。详细介绍请参见本书的 78.3 节。 
IRET：在 MS-DOS 环境中调用 INT 中断之后，IRET 指令负责返还中断处理程序（interrupt handler）。它
相当于 POP tmp；POPF；JMP tmp。 
LOOP（M）：递减计数器 CX/ECX/RCX，在计数器不为零的情况下进行跳转。 
OUT（M）：数据输出指令，用于向外设端口传输数据。这个指令常用于 OS 驱动程序和 MS-DOS 的