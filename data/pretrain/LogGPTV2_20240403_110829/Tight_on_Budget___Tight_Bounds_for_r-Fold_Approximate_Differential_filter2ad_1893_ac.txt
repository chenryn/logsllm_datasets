δ(x, ε) + δ(y, ε).
Constructing privacy buckets from atomic events To render our approach feasible, we ﬁx a ﬁnite
set of privacy loss values {f i|i ∈ {−n, . . . , n}} based on a factor f that parametrizes the coarseness of the
values and a limit n ∈ N that limits the number of values we consider. We then collect all atomic events x
with a similar privacy loss into one combined event, which we call a bucket as follows.
(A||B) ≤ f i
(illustrated in Figure 4). The value of B(i) is the sum over the probabilities PA(x) of all those atomic events
Given a factor f > 1, the bucket B(i) summarizes all atomic events where f i−1  f nPB(x).
(cid:17)
(cid:16) 1
(according to distribution A). Here, eL(x)
(A||B) limits
the imprecision of our approximation: For each PB(x) we introduce an error of (cid:96)(x) = PB(x) − PA(x)
f i ≤
PA(x) ·
. We deﬁne “corner buckets” that collect all atomic events with privacy loss outside
of [f−n, f n], where B(−n) contains all atomic events with a very small privacy loss and B(∞) contains all
atomic events with a very large (or even inﬁnite) privacy loss. Using these n+2 buckets, we can now compute
(A||B) ≤ f i guarantees soundness, whereas f i−1 fnIndex:−n−n+1...−2−1012...n−1n∞the probability that x happens in A.
parameters for ADP.
universe of all atomic events.
factor (close to 1) with f > 1.
PA(x)
ε, δ
U
f
∞ symbol for any ratio > f n.
n index of the last bucket before ∞.
N bucket indexes {−n, . . . , n}.
N∞ bucket indexes with ∞, N ∪ {∞}.
T
l(A, B, f, n)
composition tree
leaf node of A/B privacy buckets without
error correction with indexes N∞
and ratios {≤ f−n, . . . ,≤ f n, > f n}.
node for composition of T1 and T2
node for squaring of T
(A1, . . . , Ak) for a composition tree T with
leafs l(Ai, Bi, f, n)k
(B1, . . . , Bk) for a composition tree T with
leafs l(Ai, Bi, f, n)k
i=1
i=1
T1 × T2
sT
AT
BT
(cid:96)T (i), (cid:96)
C
T (x) for x ∈ U
C
T (x)
BT (i) for i ∈ N∞ privacy bucket of tree T with index i.
B
impact of the atomic event x in tree T .
“real” error correction term for index i
or atomic event x.
bound on the maximum error,
“virtual” error correction term.
index of x w.r.t. composition tree T .
smallest integer j such that f j ≥ eε.
the set of atomic events that contribute to B(i).
C
˜(cid:96)T (i), ˜(cid:96)
T (x)
ιT (x)
jε
Si
Figure 6: Notation for our privacy buckets.
(cid:0)
distributions, but the fewer compositions before a signiﬁcant amount of events reaches the corner buckets
B(−n) and B(∞)(cid:1), which again reduces the precision. To counter this eﬀect, we introduce an additional
operation which we call squaring: we square the factor f , thus halving the precision of the privacy buckets,
and merge the privacy buckets into these new, more coarse-grained privacy buckets. Squaring allows us to
start with much more ﬁne-grained privacy buckets and reduce the granularity as we compose, which can
signiﬁcantly improve the overall precision of the approach. We choose to square f instead of increasing it
to an arbitrary f(cid:48) to ease the computation of the new privacy buckets: we simply combine buckets 2i − 1
and 2i with factors f 2i−1 and f 2i into the new bucket i with factor (f 2)i = f 2i. We refer to Figure 9 for
a graphical depiction of squaring.Figure 10 describes as an algorithm how we suggest buckets to be created
for practical purposes.
3.2 A formal description of privacy buckets
We now formalize privacy buckets, our approximation of the pair of distributions based on the privacy loss
of all atomic events, which is suﬃcient for calculating (ε, δ)-ADP, the privacy buckets, and that comes with
an eﬃcient way for computing r-fold (ε, δ)-ADP from a sequence of privacy buckets.
The inﬁnity symbol ∞ In this paper we will write ∞ to describe the corner case accumulated in the
largest bucket B(∞) of our bucket lists. We consider ∞ to be a distinct symbol and in an abuse of notation,
we use the following mathematical rules to interact with it: ∞ > i for all i ∈ Z. ∞ + i = ∞ for all i ∈ Z.
The composition of privacy buckets is commutative but not associative. For example, consider three
13
Bucket composition example for two events for n = 4.
Figure 7: Depiction of how individual events x1 with index −2 and x2 with index 4 compose into their new
bucket with index −2 + 4 = 2.
Bucket composition for bucket index 2, n = 4.
Figure 8: Depiction of the bucket composition for the (new) bucket with index i = 2. We calculate the value
of bucket i by summing over the product of all B1(jt) · B2(kt) for t ∈ {1, . . . , 7}. Graphically, buckets with
the same color are combined. Note that none of the buckets ∞,−3 and −4 are used for the composition, as
for all j ∈ {−4, . . . , 4}, ∞ + j (cid:54)= 2,−3 + j (cid:54)= 2 and −4 + j (cid:54)= 2.
events x, y, z in buckets with factors f−0.6n, f−0.6n, f 0.5n respectively. If we compose x with y and the result
(which is in f−n) with z, the event will land in f−0.5n. If we compose y with z and then the result (which
is in f−0.1n) with x they will land in f−0.7n. Moreover, when and how often the squaring is performed
inﬂuences the resulting privacy buckets. Hence, we need to keep track of the order in which we applied
composition and squaring. To this end, we deﬁne composition trees.
Deﬁnition 3 (Composition trees). For two tuples of distributions (A1, . . . , AW ) and (B1, . . . , BW ) of the
same size W, a composition tree is a tree with three kinds of nodes: leaves (T = l(Ai, Bi, f, n)) that are
labeled with a pair of distributions Ai and Bi a factor f > 1 and a n ∈ N; squaring nodes (T = sT1) with
exactly one child node; and composition nodes (T = T1 × T2) with exactly two child nodes.
The bucket factor fT for a composition tree T is fl(A,B,f,n) := f , fsT1 := (fT1 )2, and fT1×T2 := fT1 if
fT1 = fT2 and undeﬁned otherwise. The last bucket index nT of a composition tree T is always constant:
nl(A,B,f,n) := n, nsT = nT , and nT1×T2 := nT1 if nT1 = nT2 and undeﬁned otherwise.
For the distributions over which each composition tree is deﬁned, we write Al(A,B,f,n) = A, Bl(A,B,f,n) =
B, AT1×T2 = AT1 × AT2, and AsT1 = AT1 and analogously BT1×T2 = BT1 × BT2 , and BsT1 = BT1. We write
UT for their support as UT = [AT ] ∪ [BT ].
We call a composition tree T valid if for the product distributions AT = ΠWk=1Ak all Aj, As are pairwise
independent (j, s ∈ {1, . . . ,W}) and analogously for BT = ΠWk=1Bk all Bj, Bs are pairwise independent
(j, s ∈ {1, . . . ,W}), fT and nT are deﬁned, fT > 1 and nT is an even natural number (i.e., there is a q ∈ N
such that n = 2q). We sometimes write f instead of fT , n instead of nT , A instead of AT , and B instead of
BT if T is clear from the context.
We now deﬁne the privacy buckets associated with a valid composition tree T , starting with the base
case of leaf nodes.
14
B1:B2:B1×B2:Index:x1x2x1·x2−4−3−2−101234∞B1:B2:B1×B2:Index:j1j2j3j4j5j6j7k7k6k5k4k3k2k1Pqjqkq−4−3−2−101234∞Bucket squaring example for n = 4.
Figure 9: Depiction of the bucket squaring. Events from each bucket B(i) are moved into bucket B((cid:100)i/2(cid:101)),
with the exception of B(∞), which remains unchanged.
BucketDelta(A, B, f, n, t, ε):
T = Construct privacy buckets with (A, B, f, n)
for i from 0 to t do
T (cid:48) = T × T (Compose T with itself, without squaring)
if BT (cid:48) (∞) > 2.2 · BT (∞) then
T = sT (Apply squaring to T , changing f to f 2)
T = T × T (Compose T with itself, now after squaring)
(cid:16)(cid:16)
(cid:17)
(cid:17)
return δT (ε) =(cid:80)
BT (i) · max
1 − eε
f i
+ BT (∞)
, 0
i∈{−n,...,n}
Figure 10: Depiction of how we create buckets – for simplicity without error correction terms and for the
common special case where we compose the same distributions (A1 = A2 = . . . = Ar and B1 = B2 =
. . . = Br). We use repeated squaring to compute r-fold DP for r = 2t compositions. Here T tracks the
compositions and squarings we have already performed.
Computing delta and evaluating a composition tree
Deﬁnition 4 (Privacy buckets of a composition tree). Let T be a valid composition tree with f := fT ,
U := UT and n := nT . For N∞ := {−n,−n + 1, . . . , n} ∪ {∞}, we deﬁne the AT /BT privacy buckets
BT : N∞ → [0, 1] recursively as follows.
If T = l(A, B, f, n), we deﬁne for i ∈ N∞,
where the sets Si are deﬁned as follows:
∀i ∈ {−n + 1, . . . , n} Si =(cid:8)x ∈ U. f i−1PB(x)  f nPB(x)}
S−n =(cid:8)x ∈ U.PA(x) ≤ f−nPB(x)(cid:9) .
(cid:80)
(cid:80)
(cid:80)
BT1(2i − 1) + BT1 (2i)
j+k=i BT1(j) · BT2 (k)
j+k≤−n BT1 (j) · BT2(k) i = −n
j+k>n BT1(j) · BT2(k)
i = ∞
BT1(∞)
0
i ∈ [−n/2 + 1, n/2]
i = ∞
otherwise
i ∈ N \ {−n}
15
If T = T1 × T2, we deﬁne
BT1×T2(i) :=
If T = sT1,
BsT1(i) :=
B:sB:Index:−4−3−2−101234∞(cid:80)
Note that since the sets Si for i ∈ {−n, . . . , n} ∪ {∞} describe a partitioning of U, we have
i∈{−n,...,n}∪{∞} B(i) = 1.
We next deﬁne ADP directly on a privacy bucket list. For all atomic events x in Si (cid:54)= S∞, we
know that PA(x) ≤ f iPB(x). We perform a slight over-approximation by treating this inequality as an
equality and then use PA(x)− PA(x)/f i as in Lemma 1. For x ∈ S∞, we add PA(x) to δ, counting them
as total privacy-breakdowns.
Deﬁnition 5 (Delta). Let T be a valid composition tree labeled with f := fT and n := nT , then
δT (ε) = BT (∞) +(cid:80)
i∈{−n,...,n}
max(0,BT (i) · (1 − eε
f i ))
We say that the privacy buckets with composition tree T are (ε, δ)-ADP, if δT (ε) ≤ δ.
3.3 Buckets per atomic event
For discussing our results and their soundness, we compare the diﬀerential privacy guarantees of privacy
buckets with the real diﬀerential privacy guarantees (calculating which might not be feasible). To this end
and for talking about individual atomic events, we assign an index to each such event. The index speciﬁes the
(one) bucket the respective event inﬂuences. For privacy buckets that have been created from distributions
(and not composed), this index is simply the bucket the event was assigned to. After composition, the index
depends on how the indexes of the respective buckets interacted: in the most simple case, if x1 and x2 are
events with indexes i and j, then the event (x1, x2) will have the index i + j. However, the corner cases can
modify the index, as the index can only be in the set {−n, . . . , n,∞}.
Deﬁnition 6 (Index of an event according to a composition tree). For a valid composition tree T with
AT = ΠWk=1Ak and BT = ΠWk=1Bk, and UT = ΠWk=1Ui, f := fT , and n := nT , we deﬁne the set of indexes
for atomic events x = (x1, . . . , xW ) ∈ ΠWk=1Uk as follows.
First, we deﬁne for T = l(Ak, Bk, f, n) and consequently for atomic elements xk ∈ Uk with k ∈
{1, . . . ,W}, the index of xk as
l
ιT (xk) :=
if l ∈ {−n + 1, . . . , n}∧
f l−1PBk (xk)  f nPBk (xk)
−n
otherwise
For a pair of composition trees T1, T2 and for T = T1 × T2 we deﬁne the index of x = (x1, x2) ∈ AT1 × AT2
as
−n
∞
ιT1(x1)+ιT2(x2)
where we assume that ∀y, z ∈ Z, y + ∞ = ∞ > z.
(cid:40)