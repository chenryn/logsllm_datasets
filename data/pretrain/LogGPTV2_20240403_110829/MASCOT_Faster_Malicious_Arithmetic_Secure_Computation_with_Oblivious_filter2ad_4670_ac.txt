where we have deﬁned m(1) = t + (cid:104)g ∗ x, ∆(1)(cid:105) for convenience.
1 ’s input is later opened, then to pass the MAC check, P ∗
1 essentially needs to come up with
a value x and a valid MAC share m∗ such that m∗ + m(2) = x · ∆. One possibility is to guess the
ﬁrst k/2 bits of ∆, denoted ∆(cid:48), and compute
m∗ = m(1) − (cid:104)g, ∆(cid:48)
B(cid:105)
which gives a valid MAC relation for x = 0. However, P ∗
1 could similarly try to guess the latter k/2
bits of ∆, which corresponds to opening to x = 1. Note that each of these openings only succeeds
with probability 2−k/2, but for eﬃciency we would like to achieve a failure probability much closer
to 2−k.
12
Protocol 3 Π(cid:74)·(cid:75), creating(cid:74)·(cid:75) elements
This protocol additively shares and authenticates inputs in F, and allows linear operations and
openings to be carried out on these shares. Note that the Initialize procedure only needs to be
called once, to set up the MAC key.
Initialize: Each party Pi samples a MAC key share ∆(i) ∈ F. Each pair of parties (Pi, Pj) (for
i (cid:54)= j) calls FCOPEe.Initialize(F) where Pj inputs ∆(j).
Input: On input (Input, id1, . . . , idl, x1, . . . , xl, Pj) from Pj and (Input, id1, . . . , idl, Pj) from all other
$← F.
2: For h = 0, . . . , l, Pj generates a random additive sharing(cid:80)
parties:
1: Pj samples x0
h = xh and sends x(i)
3: For every i (cid:54)= j, Pi and Pj call FCOPEe.Extend, where Pj inputs (x0, . . . , xl) ∈ Fl+1.
4: Pi receives q(i,j)
and Pj receives t(j,i)
such that
i x(i)
h
h
h to Pi.
q(i,j)
h + t(j,i)
h = xh · ∆(i), for h = 0, . . . , l.
5: Each Pi, i (cid:54)= j, deﬁnes the MAC shares m(i)
, and Pj computes the MAC shares
h = q(i,j)
h = xh · ∆(j) +(cid:88)
h
m(j)
t(j,i)
h
j(cid:54)=i
6: The parties sample r ← FRand(Fl+1).
to obtain(cid:74)xh(cid:75), for h = 0, . . . , l.
7: Pj computes and broadcasts y =(cid:80)l
8: Each party Pi computes m(i) =(cid:80)l
h=0 rh · xh.
h=0 rh · m(i)
h .
9: The parties execute ΠMACCheck with y and {m(i)}i∈[n].
10: All parties store their shares and MAC shares under the handles id1, . . . , idl.
Linear comb.:
On input (LinComb, id, id1, . . . , idt, c1, . . . , ct, c), the parties retrieve their shares and MAC shares
{x(i)
j , m(xj)(i)}j∈[t],i∈[n] corresponding to id1, . . . , idt, and each Pi computes:
(cid:40)
t(cid:88)
t(cid:88)
j=1
y(i) =
m(y)(i) =
cj · x(i)
j +
i = 1
c
0 i (cid:54)= 1
cj · m(xj)(i) + c · ∆(i),
They then store the new share and MAC of(cid:74)y(cid:75) under the handle id.
j=1
The main problem here is that P ∗
1 can choose, at the time of opening, what to open to, and
is not committed to one particular value. This means the simulator cannot compute a valid input
during the Input stage, and we cannot securely realize the functionality.
To get around this problem, we require two changes to the Input stage. Firstly, P1 samples
$← F, and authenticates this as well as the m actual inputs. Secondly,
a random dummy input x0
13
Protocol Π(cid:74)·(cid:75) (continued)
Open: On input (Open, id):
2: Parties reconstruct x =(cid:80)n
2: Compute y ← (cid:80)t
1: Each Pi retrieves and broadcasts their share x(i).
i=1 x(i) and output it.
1: Sample a public, random vector r ← FRand(Ft).
j=1 rj · xj and m(y)(i) ← (cid:80)t
share stored under idj for all i ∈ [n] and j ∈ [t].
3: Execute ΠMACCheck with y and m(y)(i).
Check: On input (Check, id1, . . . , idt, x1, . . . , xt), the parties do the following:
j=1 rj · m(i)
idj
, where m(i)
idj
denotes Pi’s MAC
after computing the MACs using FCOPEe, P1 opens a random linear combination of the inputs
x0, . . . , xl, and the MAC on this is checked by all parties. This ensures that P1 is committed to
their inputs during the input stage and cannot later open to a diﬀerent value, whilst x0 masks the
actual inputs in this opening.
We now examine in more detail why this suﬃces. Suppose a corrupt P ∗
values to be shared, in the actual protocol Π(cid:74)·(cid:75). A dummy value x0 ∈ F is sampled, and P ∗
1 is meant to input m
1 , P2 can
obtain MAC shares such that:
m(1)
h + m(2)
h = (cid:104)g ∗ xh, ∆B(cid:105),
for h = 0, . . . , l
where xh are P ∗
random r ∈ Fl+1, and P ∗
computes during steps 8–9 the values:
1 ’s inputs to FCOPEe. In the MAC check of the Input stage, the parties sample a
1 can force to be any value. Next, P2
1 then opens the value y, which P ∗
l(cid:88)
m(2) =
rh · m(2)
σ(2) = m(2) − y · ∆.
h=0
h
P ∗
1 must then come up with a value σ(1) such that σ(1) + σ(2) = 0, which implies:
σ(1) = −σ(2) = y · ∆ − l(cid:88)
h = y · ∆ − l(cid:88)
rh · m(1)
h=0
h
h=0
⇔ σ(1) −(cid:88)
rh · ((cid:104)g ∗ xh, ∆B(cid:105) − m(1)
h )
rh · (cid:104)g ∗ xh, ∆B(cid:105).
(1)
Since rh, m(1)
h are known to P ∗
choosing xh (independently of rh) and y.
1 , this is equivalent to guessing the right-hand side of (1), after
14
that (cid:104)g ∗ xh, ∆B(cid:105) = xh · ∆, and letting y =(cid:80)l
Clearly, one way of achieving this is letting xh = (xh, . . . , xh) for some xh ∈ F, which implies
h=0 rh · xh. This corresponds to the honest behavior.
Otherwise, we prove in the full version that for P ∗
1 , passing the check implies being able to compute
a correct MAC share for xh. Once a correct MAC share for a speciﬁc value is known, passing a
later MAC check for another value implies knowledge of the MAC key.
As an example, consider the case of xh = (0, xh, . . . , xh) for some xh (cid:54)= 0, h ∈ [l]. This implies
that
l(cid:88)
l(cid:88)
h=0
h=0
l(cid:88)
i=0
rh · (cid:104)g ∗ xh, ∆B(cid:105) =
=
rh · (xh · ∆ − xh · ∆1)
rh · xh · (∆ − ∆1),
If y (cid:54)=(cid:80)l
where ∆1 denotes the ﬁrst bit of ∆B. Deﬁne ∆(cid:48) = ∆ − ∆1. Then, (1) can be written as
σ(1) − l(cid:88)
h = (y − l(cid:88)
rh · xh) · ∆(cid:48) − l(cid:88)
rh · m(1)
h=0
h=0
h=0
rh · xh · ∆1.
h=0 rh · xh, P ∗
1 has only negligible chance of passing the check. Otherwise, P ∗
1 can compute m(1)
1 can succeed
h + xh · ∆1, which is a
with probability 1/2 by “guessing” ∆1. If successful, P ∗
correct MAC share for xh because
h + xh · ∆1 + m(2)
m(1)
h = (cid:104)g ∗ xh, ∆B(cid:105) + xh · ∆1
= (cid:104)g · xh, ∆B(cid:105)
= xh · ∆.
This means that P ∗
1 is eﬀectively committed to xh. Finally, the simulation involves solving
(cid:69)
rh · xh, ˜∆B
(cid:68)
g · y − g ∗ l(cid:88)
l(cid:88)
rh · xh · ˜∆1
h=0
0 =
=
for ˜∆. Clearly, the ﬁrst bit of any solution ˜∆ must be zero. It is easy to see that
h=0
˜∆−1 · (cid:104)g ∗ xh, ˜∆(cid:105) = xh
for any such ˜∆. This is how the simulator in our proof computes the value P ∗
after passing the check.
We need that, once P ∗
1 has passed the check in the input phase, they are committed to a
particular value. However, the adversary has an edge because only a random combination of inputs
can be checked (otherwise all the inputs would be revealed). This can be seen as follows: Denote
by xh,g the g-th entry of the vector xh input when authenticating the h-th value, and denote by
{rh}h∈[l] the random coeﬃcients generated using FRand. For g (cid:54)= g(cid:48) ∈ [k], if xh,g (cid:54)= xh,g(cid:48), there is a
1 is committed to
15
1/|F| chance that(cid:80) rhxh,g =(cid:80) rhxh,g(cid:48). Because the check only relates to the randomly weighted
sum, the adversary could therefore act as if xh,g = xh,g(cid:48) and decide later between {xh,g}h∈[l] and
{xh,g(cid:48)}h∈[l]. The fact that there are log |F|(log |F| − 1)/2 such pairs g (cid:54)= g(cid:48) explains the 2 log log |F|
subtrahend in the theorem below. It is easy to see that a repeated check would suﬃce for security
parameter log |F|.
allows Pj to obtain an authenticated share under the global MAC key, ∆ = (cid:80)
Extension to more than two parties. Extending the authentication protocol to n parties is
relatively straightforward. When party Pj is inputing a value x, Pj runs FCOPEe (on input x) with
every other party Pi (cid:54)= Pj, who each inputs the MAC key share ∆(i). Summing up these outputs
i ∆(i). Note that
this introduces further potential avenues for cheating, as Pj may provide inconsistent x’s to FCOPEe
with diﬀerent parties, and the other parties may not use the correct ∆(i). However, it is easy to see
that except with probability 1/|F|, these deviations will cause the MAC check to fail in the Input
stage, so are not a problem.
The security of our authentication and MAC checking protocols is given formally in the following
theorem, which we prove in Appendix B.
Theorem 2. The protocol Π(cid:74)·(cid:75) securely implements F(cid:74)·(cid:75) in the (FCOPEe,FComm,FRand)-hybrid
model, with statistical security parameter log |F| − 2 log log|F|.
5 Multiplication triples using oblivious transfer
In the previous section we showed how parties can compute linear functions on their private inputs
using the authentication and MAC checking protocols. We now extend this to arbitrary functions,
protocol is straightforward, using Beaver’s method for multiplying two secret-shared values [4]. For
completeness, this is detailed in Appendix 6.
by showing how to create multiplication triples using F(cid:74)·(cid:75) and OT.
Recall that a multiplication triple is a tuple of shared values ((cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75)) where a, b $← F and
c = a· b. Given F(cid:74)·(cid:75) and a protocol for preprocessing triples, the online phase of the resulting MPC
Our protocol is designed to use F(cid:74)·(cid:75) and an ideal OT functionality to securely implement the
functionality FTriple, which has all of the same features as F(cid:74)·(cid:75), with the following additional com-
mand:
FTriple: On input (Triple, ida, idb, idc) from all parties, sample two random values a, b $← F and set
(Val[ida], Val[idb], Val[idc]) ← (a, b, a · b).
Figure 5: Triple generation command for FTriple
Throughout this section, we write(cid:74)x(cid:75) to mean that each party holds a random, additive share
of x, and the value of x is stored in the ideal functionality F(cid:74)·(cid:75).
The protocol ΠTriple (Protocol 4) begins with the Multiply step, which uses FOT to compute
a secret sharing of the product of b ∈ F and a ∈ Fτ , where τ ≥ 3 is a parameter aﬀecting security.
This is done by running τ copies of the basic two-party product sharing protocol between every
pair of parties (steps (a)–(g)), followed by each party locally summing up their shares.
16
Protocol 4 Triple generation protocol, ΠTriple
The integer parameter τ ≥ 3 speciﬁes the number of triples to be generated per output triple.
Multiply:
1: Each party samples a(i) $← Fτ , b(i) $← F.
2: Every ordered pair of parties (Pi, Pj) does the following:
1 , . . . , a(i)
h = q(j)
a(i)
h ,h
(a) Both parties call F τ k,k
(b) Pj receives q(j,i)
0,h , q(j,i)
h = q(j,i)
ROT where Pi inputs (a(i)
1,h ∈ F and Pi receives s(i,j)
0,h − q(j,i)
h + a(i) · d(j,i)
τ k ) and (q(j,i)
1,h + b(j), h ∈ [τ k].