Andreas Zeller
IsolatingIntrusionsbyAutomaticExperimentsStephanNeuhausDepartmentofComputerScienceSaarlandUniversityStephan.Neuhaus@acm.orgAndreasZellerDepartmentofComputerScienceSaarlandUniversityzeller@acm.orgAbstractWhendealingwithmalwareinfections,oneoftheﬁrsttasksistoﬁndtheprocessesthatwereinvolvedintheattack.WeintroduceMalfor,asystemthatisolatesthoseprocessesautomatically.Incontrasttoothermethodsthathelpana-lyzeattacks,Malforworksbyexperiments:ﬁrst,werecordtheinteractionofthesystemunderattack;aftertheintru-sionhasbeendetected,wereplaytherecordedeventsinslightlydifferentconﬁgurationstoseewhichprocesseswererelevantfortheintrusion.Thisapproachhasthreeadvan-tagesoverdeductiveapproaches:ﬁrst,theprocessesthatarethusfoundhavebeenexperimentallyshowntoberel-evantfortheattack;second,theamountofevidencethatmustthenbeanalyzedtoﬁndtheattackvectorisgreatlyreduced;andthird,Malforitselfcannotmakewrongde-ductions.Inaﬁrstexperiment,Malforwasabletoextractthethreeprocessesresponsibleforanattackfrom32candi-datesinaboutsixminutes.1.IntroductionWhenanalyzinganattack,oneoftheﬁrsttasksisﬁnd-ingoutwhichprocessesparticipatedintheattackandhowtheyarerelated.Ifwedon’thavestatisticalinformationthatcanhelpusclassifyandisolatemalicioustrafﬁc[24,28],thismusthappenbeforewecanlookfortheinputthatcausedtheintrusion,theattackorinfectionvector.Forex-ample,whenweanalyzeaninfectionwiththeLinuxSlap-perworm,wecouldarriveatthisanalysis[21]:“Attack-ershavingtheIPaddress10.120.130.140sentamalformedclientkeyinanHTTPSrequesttoourWebserver.ThiscausedabufferoverrunintheWebserverandinvokedtheshell.Therunningshellthensavedauuencodedcopyoftheworm’ssource-code,decodedandcompiledit,andranthegeneratedexecutableunderthename.bugtraq.Oncerun-ning,thewormtriedtocontactothercomputersonthenet-work.”Inthisexample,therelevantprocessesaretheWebserver,theshell,thecat,uudecode,andCcompilercom-mands,andﬁnallythe.bugtraqprocess.Toﬁndthesepro-cesses,weusuallystartfromanobservedfailureofthese-curitypolicy(suchasanunknownprocessnamed.bugtraq)anduselogﬁlesortoolslikeTheCoroner’sToolkit[6,7]toreasonbackwardstoitsrootcause(themalformedHTTPSrequest).However,dealingexclusivelywithevidenceafterthefactseverelylimitsevenanexpert’schancesofreconstructingtheeventchain:Completeness.Theevidencemightnotbeenoughfortheeventchaintobereliablyestablished.Minimality.Therelevantevidencemightbeburiedinahostofotherevidenceandmaythusbehardtosee.Correctness.Ourreasoning(byhumanormachine)mightbefaulty,leadingtowrongconclusions.Toalleviatetheseproblems,weareexploringanovelapproachwithoursystem,calledMalfor(shortforMAL-wareFORensics).Inatypicalscenario,Malforwouldbedeployedonahoneypot,capturingallattackableprocesses.Whenthehoneypotisattacked,ahostIDSsignalsacom-promiseandtriggersMalfor’sreplaycomponent.Insteadofdeducingafterthefactwhatmusthavehappened,weexper-iment:inordertolearnwhichprocessesarenecessaryforthebreak-intooccur,werepeatedlyreplayslightlymodi-ﬁedversionsofthecapturedattack(Section2)usingacap-tureandreplayinfrastructurethatenablesnotonlyverbatimreplay,butreplayunderalteredcircumstances(Section3).Malforthenﬁndstheprocessesthatwererelevantfortheat-tackandnotiﬁesasystemadministrator,whocanthencom-pletetheanalysiswithamuchsmallerbodyofrelevantev-idence.Thisworkswithoutknowingtheattackvectorbe-forehand.Malforcanalsobedeployedonproductionsys-temsatthepriceofsomeperformanceoverhead.Weevalu-atethetechniqueusinganexampleandﬁndthattheextrac-tionofthreerelevantprocessesfromatotalof32processestookaboutsixminutes(Section4).WereviewrelatedworkinSection5,listsomeassumptionsandlimitationsofMal-forinSection6anddetailsomeofourfutureplansinSec-tion7.2.FindingrelevantprocessesHowcanweefﬁcientlyﬁndthoseprocessesthatarerele-vantforabreak-in,possiblyamongthousands?Ifwecouldcapturetheinteractionoftheattackedsystem,wecouldviewablow-by-blowaccountofitinslowmotionandan-alyzewhatmusthavehappened.Thisiscertainlyusefulinordertostudytheattack,butisneithercomplete,minimal,orcorrect,aswasindicatedabove.Ifwewanttoﬁndwhichprocesseswereactuallyrelevantforanintrusion,weneedtobeabletomakeexperiments.Forexample,ifwewanttocheckwhethertheinetdprocesswasrelevantfortheat-tackornot,wewouldliketoreplaytheattackwithouttheinetdprocess.Iftheattackstillsucceeds,wehaveexperi-mentalandincontrovertibleevidencethatinetdwasindeednotrelevant.Iftheattacknowfails,itmusthavebeennec-essaryfortheattack.Ifwecancaptureandreplaytheprocessesinasystemsothatwecancontrolwhichprocesseswillbeexecutedandwhichwillnot,wewanttoﬁndaminimalprocesssetthatisnecessaryfortheintrusion.Iftherearenprocesses,thiswouldtakeontheorderof2nreplaysintheworstcase,sowearewillingtosettleforaprocesssubsetthatissmallbutnotnecessarilyminimal,ifwecanonlycomputeitwithlessreplays.ThisproblemissolvedbyDeltaDebugging,atechniquethatoriginatedinautomateddebuggingandtestsupport.Deltadebuggingrepeatedlyrunsvariousprocesssubsetsandusesatestfunctionthatyields!(successfultermina-tion,nobreak-in),"(thebreak-inoccurred)or(some-thingunexpectedhappened).Theseresultsdriveastrategythatﬁndsasmallsubsetofprocessesthatmakethebreak-inhappen,butwhereremovinganysingleprocessfromthatsubsetcausesthebreak-innottohappenanymore.ItiscomprehensivelydescribedinthepapersbyZeller[31]andZellerandHildebrandt[32].Deltadebuggingislikebinarysearch:ithalvesthepro-cesssetandtrieseachhalfseparately.However,complica-tionsarisebecausetherelevantprocessesneednotallbeinonehalf,whichmakesdeltadebuggingsomewhatmorecomplicatedthanstraightforwardbinarysearch.Incontrasttoothermethodsinthesamegeneralareasuchasslic-ing[27],whichusededuction,deltadebuggingusesexper-imentstoarriveatitsconclusions:itactuallytriesvarioussubsetsofprocessesandletstheoutcomeofthetestfunc-tiondriveitsstrategy.Itdoesnotnecessarilyﬁndthesmall-estprocesssubsetthatcausesthefailure,butinpracticeweﬁndthatresultsfromdeltadebuggingareclosetooptimal.Inaddition,deltadebuggingisnotrestrictedtosourcecodeanalysis.Deltadebuggingisapracticalmethod.Ithasalreadybeenusedsuccessfullytoautomaticallyﬁnddefectsinpro-gramsaslargeastheGNUCCompiler[3].ItsworstcaserunningtimeisO(n2)iftherearenprocessesandexecutingaprocesstakesunittime,butitusuallyﬁnishesinO(logn)time.Letusapplydeltadebuggingtoanexamplenetworkserverprocesstoseehowdeltadebuggingcanﬁndthepro-cessesinvolvedintheintrusion.Thisnetworkserver,namedSpud1,readsandparsesaHTTP-likecommandsetfromanetworksocket.Oneofthesecommandswillcausetheﬁle/tmp/pwnedtobecreated.Inourevaluation,weusetheex-istenceofthisﬁleasabreak-inindicator:assoonasthisﬁlehasbeensuccessfullycreated,wesaythatabreak-inhashappened.Spudhasthefollowingstructurewhichistypi-calofmanynetworkserverprograms(seealsoFigure1):1.itdetachesitselffromthecontrollingterminal,becom-ingasessionleader;2.thesessionleaderopensasocketandbindsittoawell-knownportnumber;3.itacceptsaconnectiononthatsocket;4.itforksaworkerprocess;and5.whilethesessionleadercontinueslistening,theworkerreadsarequestfromthenewlyopenedsocket,per-formstherequestedaction(possiblyusingsubpro-cessesthatrunotherprograms),andexits.2Inthisexample,theintrusioniscausedbyasinglesys-temcall,theonethatcreatestheﬁle/tmp/pwned.Thesetofrelevantprocessesthencontainstheprocessmakingthatsystemcall,anditsancestors.Assumethatwehave32processes:thecommand-lineprogramC,thesessionleaderSandthirtyworkersW1,...,W30,whereW20executestheintrusion-causingsys-temcall.Deltadebuggingwilltrydifferentsubsetsofthesetofallprocesses{C,S,W1,...,W30}andtestwhethertheintrusionstillhappens.Inourexample,thesetofrele-vantprocesseswouldbe{C,S,W20}.Theactualsequenceofprocesssubsetstriedbydeltade-buggingisshowninTable1.Thecolumnmarked“R”con-tainstheresultofthetest:"iftheintrusionoccurs,and!ifitdoesnotoccur.Theothercolumnscontainabulletifthecorrespondingprocessisincludedinthetest.Forexam-ple,inrow1,processesC,S,andW1throughW14arein-cluded,butW15throughW30arenot.SinceW20isthecul-prit,andsinceitisnotexecuted,theintrusiondoesnothap-penandtheoutputis!.1AfteracharacterfromTrainspotting[29].2Spuddoesnotuseanysubprocesses.Figure1.Typicalprocessstructureofanetworkserver.Lines1–3trytoﬁndasubsetoftheoriginalprocessesthatproduce",ﬁrstbysplittingtheoriginalsetinroughlyequalpartsandthensubdividingitfurtherandtryingcom-plementswhenthatdoesnotwork.Line14containstheminimalsubsetneededfortheintrusion.Furthersubsetsneednotbeconsidered,becausetheyhavealreadybeentested(lines9and13).Deltadebuggingﬁndstheculprits(processesC,S,andW20)withonlyfourteentries.Fromthis,wecanseethatinthisexample,Malfor’sre-sultiscomplete,minimalandcorrect:theprocessesthatMalforfound,andonlythose,reallywererelevantforthebreak-in.WeemphasizethatMalfor’sresultdoesnotonlycon-taintherootcauseoftheattack,butallintermediateattack-relevantprocessestoo.Soifanattackinvolvesalongchainofevents,Malforwillproducealltheintermediatestepsthatareneededtoreproducetheattack.Oneconcernisthataprocesscouldnotexhibititsorig-inalbehaviorduringreplaybecauseittookadifferentcon-trolpath.Forexample,whatifaprocesslaunchesanat-tackonlyupontheexistenceofcertainﬁles,orasuccess-fulchallenge-responseauthenticationwitharemoteserver?Inthesecases,theprocessmusthavemadesystemcallsthatcausedtheseactionstobeperformed.Malforthencapturesthesesystemcallsandreplaysthem.Forexample,ifapro-cesscreatesarandomchallengeaspartofthechallenge-responseprotocol,itwillhavetoissuesystemcallstodoso(forexample,inordertoread/dev/random).Whenwereplaytheprocess,wealsoreplaythesesystemcalls,sowewillhaverecreatedthestateoftheprocessasitwaswhenitmadetheoriginalchallenge-responseauthentica-tionandthecomputedchallengewillbethesameinbothcases.Inthecaseofﬁlesonthelocalﬁlesystem,Mal-foractuallyexecutesthesystemcalls;inthecaseofare-motechallenge-responseauthentication,itreplaysaprevi-ouslyrecordedconversation.3.CaptureandreplayInthissection,wegivesometechnicaldetailsonourcap-tureandreplayinfrastructure.Inparticular,wewillfocusonhowwecanaltercapturedeventsonreplayandhowwecantestspeciﬁcprocesssubsets.3.1.OverviewSecurityincidentshappenbecauseintruderssendmali-ciousinputs(attackvectors)toprocesses,whichthenis-suesystemcallsthatcausesomesecuritypolicytobevi-olated[22].Forexample,ifweassumethattherearenocovertchannelsandthatconﬁdentialdatawasdisclosed,someprocessmusthaveissuedawrite()systemcallthatwrotethisdatatoitsforbiddendestination.Thesemaliciousinputsaredeliveredtotheprocessesalsobysystemcalls.Therefore,ifwewanttousedeltadebuggingtoﬁndout#ProcessesRCS0102030405060708091011121314151617181920212223242526272829301••••••••••••••••!2••••••••!3••••••••••••••••••••••••"4••••••••••••••••!5••••••••••••••••"6••••!7••••••••••••"8••••••••"9••!10••••••"11••••!12••••"13•!14•••"Table1.ProcesssubsetsactuallytriedbydeltadebuggingSpudwithMalfor.howapolicyviolationhappened,wemustbeabletocap-tureandreplaythesystemcallsthatthoseprocessesmake.Inordertocaptureandreplaysystemcalls,Malforusesasubsystemthatsitsbetweenaprocessunderobservationandtheoperatingsystem(seeFigure2).Whencapturing,allinterestingsystemcallsareinterceptedbythatsubsys-temandcapturedinadatabase(steps1,2,2a,3,and4a).Whenreplaying,therequestedsystemcallismatchedinthedatabase,modiﬁed,andreturned;theoriginalsystemcallisneverexecuted(steps1,2,3,and4b).3Sinceaprocesshasnoreliablemethodofﬁndingoutwhetherasystemcallactuallyexecutedorwhetheritwasreplayedfromadatabaseexceptbymakingasystemcall,weplaywiththeprocess’snotionoftheoutsideworld.ThispartofMalforisthereforenamedSolipsy4.Sincecaptur-ingtakesplaceonarealsystem,andsincesystemcallsarefaithfullyreplayed,anattackingprogramcannoteasilyﬁndoutwhetheritisbeingfedreplayedinformationorresultsfromactualsystemcalls.OurimplementationofSolipsyrunsonLinux.Inordertospeedupreplay,weuseUserModeLinux(UML)[4]withcopy-on-write(COW)diskimages.Weinitiallycre-atetwodiskimages,oneforcaptureandoneforreplay.Onecontainsthecapturedaemonandtheotherthereplaydaemon,butbothareotherwiseidentical.Tostartreplay-ing,webootUMLfromthereplaydiskimage.Duringop-eration,theCOWﬁlecontainsonlythoseblocksthathavechangedwithrespecttotheoriginaldiskimage,soinor-dertoresetthereplaysystemtoitsinitialstate,wecansim-plydeletetheCOWﬁleandrebootUML.3Somesystemcallsareproblematicorimpossibletoreplay,amongthemfork()orexecve()(thesechangethecontrolﬂowinawaythatisdifﬁcultifnotimpossibletoreplaywithoutactuallycreatinganewprocessorexecutinganewprogram,respectively);brk()(onsuccess,memorymustactuallybeallocated);andmmap(),shmat()andrelatedones(theyallowaprocesstodoI/Owithoutextrasystemcalls).Allthesesystemcallsarenotreplayed,butactuallyexecuted.4Fromsolipsism,theideathattheoutsideworldcomestousonlythroughoursensesandisthereforenotnecessarilyreal.3.2.MatchingsystemcallsWhenwewanttoreplayasystemcall,wehavetoﬁnditsmatchingcounterpartinthedatabase.Ifreplaywereper-fect,theneverythingduringreplaywouldbethesameasitwasduringcapture:systemcallparameters,ﬁledescriptornumbers,andprocessIDswouldallbeunchanged.Inprac-tice,thisisnotthecase.Forexample,processIDsduringcapturewillgenerallydifferfromthoseduringreplaybe-causeofun-replayedprocesses,andﬁledescriptornumberswilldifferbecausesomeﬁleoperationsarereplayedfromthedatabase(bypassingtheoperatingsystem)andsomeareexecuted(goingthroughit).Theseparametersaremappedbetweentheuser-modeprocess,theoperatingsystem,andthereplaydaemon.Somesystemcallparametersmaybejudgedirrelevantformatchingbecausetheycanchangefromruntorunwith-outaffectingthemappingofcapturedtoreplayedcalls.Anexampleistheexactvalueofabufferaddressinaread()systemcall.Whileirrelevantparametersareignored,allothersareusedasakeyintothedatabase.Whenasystemcallisthusmatchedandretrieved,itismarkedas“spent”andcannotbereplayedagain.Thisisneededtodistinguishbetweenotherwiseidenticalsystemcalls:aprocesscancallread()repeatedlywiththeexactsameparameters.Inthiscase,wetaketheearliestunspentmatch.3.3.SignalsSignalsareeventsthatareasynchronouslydeliveredtoaprocess.Inotherwords,asignalisdeliveredtoaprocesswithouttheprocesshavingtoaskforit.Thisisincontrasttosystemcalls,whereprocessesmustexplicitlyrequesttheirservices.Whenasignalarrives,processexecutionissus-pendedandaspecialroutineintheprocess,calledasig-nalhandler,isexecuted.Signalsmayoccuratanytimedur-ingprocessexecution,evenwhileexecutingasignalhan-dler.TypicalexamplesareSIGSEGV,whichoccurswhenFigure2.ArchitectureofSolipsy.PartsofSolipsyareshowndarker.aprocessreferencesmemorythatitcannotaccess,suchasanullpointer;SIGCHLD,whichoccurswhenachildpro-cessdies;SIGALRM,whichoccurswhenatimerexpires;orSIGINT,whichoccurswhenauserinterruptsaprocessfromthekeyboard.Forexternally-generatedsignalssuchasSIGINT,itiscertainlypossibletocaptureandtoreplaythemattheex-acttimetheyoccurredduringcapturing[5].However,ourmethodworksbyalteringtheprocess’scontrolﬂowinor-dertoﬁndoutwhichcircumstancesarerelevant.Therefore,replaywithMalforisnotverbatim,anditbecomesimpos-sibletosaywhenorifasignalshouldbedelivered.Forthisreason,Solipsycurrentlydoesnotcaptureorreplaysignals.Fortunately,manyimportantsignalswillbedeliveredcorrectly,eveniftheyarenotcapturedorreplayed.Forex-ample,SIGSEGV,SIGCHLDandSIGALRMwillbedeliv-eredatthecorrecttimeanyway,becausetheyhavetheirori-gindirectlyinaprocess’sformeractions:accessinginvalidmemory,creatingachildprocesswhichthenexited,orin-stallingatimer,respectively.3.4.Changingaprocess’sexecutionpathMalforworksbytestingvarioussubsetsofprocessestoseeiftheintrusionhappenswhenonlytheseprocessesarepresent.However,Malforcannotpreventaprocessfromcallingfork(),soifwewanttotestaprocesssubsetthatdoesnotcontainaprocessP,butP’sparentforks,weletitfork,butassoonasPmakesasystemcall,wemaketheprocessexitinsteadofreplayingthecall.Tosupportthisbehavior,thereplaydaemonregisterseventhandlersandwillforwardsystemcallstothesehan-dlerswhichthendecidewhattodowiththesystemcallandwiththecallingprocess:•thesystemcallcanbematchedinthedatabase(thede-faultaction);•thesystemcallcanbeexecutedbytheoperatingsys-tem(thedefaultactionifthecallcannotbefoundinthedatabase);•theprocesscanbemadetoexitinsteadofexecutingthesystemcall;•ifthesystemcallisfork(),thenewlycreatedchildpro-cesscanbemadetoexitatthenextcall;or•theresultofthesystemcallcanbecomputedontheﬂy.Thisframeworkismoregeneralthanisstrictlyneededtocontrolprocesscreation,butitallowsustoextendMalfortoﬁndnotonlytherelevantprocesses,butalsotherelevantinputstothoseprocesses(seeSection7onfurtherwork).4.InitialexperienceIfMalforistobeapracticalsystem,itneedstobeac-curate,fastandeasilydeployed.Malfor’saccuracyiscur-WhatTotalMedianµσUML+Replay364s26s26.0s3.7sReplayonly174s13s12.4s3.3sTable2.PerformancewhenanalyzingthesampleattackonSpud(14tests).Alltimesareinseconds.Thecolumnlabeledµholdsthemeanandthecolumnlabeledσholdsthestandarddeviation.rentlybeingevaluated.Allwecansayatthispointisthatithassofarfoundtherelevantprocessesinallourtests.Thenexttwosectionscontainapreliminaryperformanceeval-uation,whichhasresultsonlyforcapturingandfordeltadebuggingtheexamplefromtheprevioussection.Wecanshowonlyafewresultshere;wearecurrentlyworkingonamorecompletesetofstatistics.ThelastsectionlooksatMalfor’sdeployability.Fortheseexperiments,the(un-tuned)MySQLdatabase,UMLwithSolipsyandtheoutside“attacker”wereallonthesamehost,a3GHzPentium4PCrunningLinux2.4,bothasthehostkernelandtheUMLkernel.Allkernelswereoth-erwiseunoccupied.4.1.PerformanceofdeltadebuggingWhenweactuallyanalyzedtheexampleattackfromSec-tion2withMalfor,wegottheresultssummarizedinTa-ble2.WecanseethatthetimespentreplayingtheprocessesisonaverageonlyabouthalfoftheUMLrunningtime.Inotherwords,abouthalfthetimeisspentbootingandshut-tingdownLinuxkernels.Linuxstartuptimeishardtospeedup;inourcase,wehavealreadydisabledallunneededser-vices.ShuttingdownaUML,however,takesabouttentoelevensecondsinoursetup,soifwejustkilledtheUMLinsteadofshuttingitdowncleanly,wewouldsavebetween14·10s=140sand14·11s=154sofruntime.Ifwedidthat,theproportionofreplaytimetototalrunningtimewouldrisetoabout75percentandthetotalrunningtimeit-selfwoulddecreasebyabout40percent,toabout217s.4.2.PerformanceofcapturingInordertomeasuretheperformanceofcapturing,weranSpudinsuccessivelymorecompleteSolipsyenvironments,asexplainedbelow.Ineachenvironment,wecalledSpud257timesinrapidsuccession.Oneofthesetimes,theser-vicewasmadetoexhibititsvulnerability.Overall,wethere-forehaveonecommand-lineprocess,onesessionleader,oneintrusion-causinginteractionand256harmlessinterac-tions.Table3hasourresults.OHOHEnvironmentTimeDed.UMLDedicatedmachine21.5s0%UMLw/oSolipsy22.4s4%0%UMLw/Solipsy,disabled24.0s12%7%UMLw/fullSolipsy24.3s13%8%Table3.PerformanceofSpudinvariousenvi-ronments.Thecolumnlabeled“OHDed.”hastheoverheadofrunningSpudinthegivenenvironmentrelativetorunningitonadedi-catedmachine;thecolumnlabeled“OHUML”hasthesameoverheadrelativetorunningSpudonaUMLwithoutSolipsy.OnadedicatedsystemthatdidnotruninsideUMLoruseSolipsy(thatis,Spudperformedonlysteps1and2ainFigure2),thistook21.5s.OnanUMLsystemthatdidnothaveSolipsy(steps1and2aareperformed,butthenet-workI/Ohastocrossamachineboundary),ittook22.4s.OnceSolipsywasloadedandenabled,buttheservicenottraced(steps1,2,and2a),executiontimeroseto24.0s.Whenthevulnerableservicewasalsotracedandtheresultsputinadatabase(steps1,2,2a,3,and4a),executiontimewas24.3s.Whilethesepreliminaryresultscannotbedeﬁnitive,wefeelthatthesystemcallscapturedinthisexperiment(seeTable4)aretypicaloflargersystemsandthatthereforethenumbersobtainedinthisexperimentarerepresentative.Ifthatisindeedthecase,theoverheadofcapturingwouldbeabout8%whencomparedtoanun-tracedprocessrun-ninginsideUML(the“OverheadUML”columnTable3),orabout13%whencomparedtoadedicatedmachinewith-outeitherUMLorSolipsy(the“OverheadDedicated”col-umn).Ontheonehand,bothresultsareexcellent.TheyalsocomparewellwiththosebyDunlapandothers[5].Ontheotherhand,itseemsasifthesenumbersaresogoodonlybecausetheprogramtakessolong,evenonadedicatedma-chine(theﬁrstrowinTable3).Itsperformanceisaboutsixrequestspersecond,whichseemsratherslow.Itremainstobeseenwhethertheperformanceﬁguresareindeedrepre-sentativeoflargernetworkservices,suchasApache.4.3.DeployabilityAllofMalfor’scomponentsareeasilyinstalled:Solipsyisaloadablekernelmodule,thecaptureandreplaydae-monsareordinaryprocesses,thedeltadebuggerisalsoanordinaryprocessthatcanadditionallyresideonaremotemachine,andthedatabaseisanordinaryMySQLdatabaseacceptaccessbindbrkcloseconnectexecveexitfcntl64forkfstat64listenllseekmmapmunmapopenreadsetsockoptsocketstat64unlinkwait4writeTable4.Listofcapturedsystemcallsintheexperiment.Solipsycapturesmanymoresystemcallsthangiveninthistable;theyjustweren’tusedbySpud.withoutanytuning.Neitherthekernelimagenorthecap-turedprocessesneedtobechanged.Thelatterisparticu-larlyimportantifwewanttoanalyzeprocesseswhosepro-gramswecannotdebug.WethereforebelievethatMalforiseasilydeployed.5.RelatedworkThereareanumberoftoolsthatenabledeterministicre-playdebugging.Oneoftheﬁrstproposalsforadeterminis-ticreplaydebuggingsystemwasFlightDataRecorder[30].FlightDataRecorderisgearedatreplayinganentiremul-tiprocessorsystemfaithfully.Itworksbycheckpointingthesystemandrecordingrace-relevantinformationthatwouldbeneededtoallowfaithfulreplayfromthelastcheckpoint.Torecordthisinformation,itneedssomeextrahardware.FlightDataRecorderitselfdoesnotreplay;thisislefttootherprogramslikeInstantReplay[13].Flashback[26]wasmotivatedbytheneedforarollbackfacilitytoallowdebugginglargeandverylong-runningpro-gramsthatmightdisplayabugonlyafterdaysofexecution,oronlyinspeciﬁccircumstances.Itworksbyprovidingfa-cilitiesforcheckpointinganddeterministicreplay.Check-pointingisdonebyusingshadowprocesses:acopyofthecurrentlyrunningprocessiscreatedatsomespeciﬁctimeusingfork(),andsuspendedimmediately.Thisshadowpro-cessisthenreanimatedwhentheexecutionisrolledbacktothecreationpoint.Replayisdonebyhijackingthesys-temcallhandler,substitutingone’sown,andcapturingsys-temcallsandtheirsideeffects.Solipsyusesessentiallythesametechnique.SignalsarealsohandledasinSolipsy,thatis,theyareignored.AnothersystemfordeterministicreplaydebuggingisBugNet[16].BugNet’sgoalistorecordenoughinforma-tiontoreplaytheinstructionsimmediatelyprecedingapro-gramcrash.BugNetaimsonlytoreplaytheusercodeandsharedlibraries;theuserwillnotbeabletoseewhatgoesonduringinterruptsorsystemcalls.BugNetworksbysav-ingtheprocessorregistersatthebeginningofacheckpointandthencapturingthevalueofloadinstructionstoregisters.Onreplay,theinitialprocessorstateisrestoredandloadin-structionsarereplayed.LikeFlightDataRecorder,BugNetneedshardwaresupport.DunlapandothersdevelopedReVirt,anadditiontoUserModeLinuxthatcapturesandreplaysthesequenceofma-chineinstructionsduringanexecutionofLinux[5].Re-Virtworksbyvirtualizingtheprocessestobelogged—wrappingtheminavirtualmachine—andloggingasyn-chronouseventstoguaranteeinstruction-levelreplay.Thenovelideahereisthatitisnotthehostmachinethatisbeinglogged,butthevirtualmachine.ThisobviatestheneedforhardwareextensionsthatsystemslikeFlightDataRecorderorBugNetneed.Allthesesystemsweredesignedtofacilitateorenabledeterministicreplay,thatis,replayingtheexactsequenceofinstructionsthatwereexecutedpreviously.Malformakesnoclaimofdeterminism.Infact,thewholepointofMal-foristochangetheexecutionﬂowoftheparticipatingpro-cessestoseewhethertheintrusionstilloccurs.Whenthereplayedprocess’scontrolﬂowchanges,thewholenotionof“deterministic”replaybecomesproblematicbecausethechangedruncannotbecomparedtoanypreviousrun.Systemcallcapturingorinterpositionhasbeeninuseforsometimetoenablesecurityanalysesorpolicyenforce-ment[9,10].Systemcallinterpositioninthefaceofhos-tileapplicationsisdifﬁcultandmostresearchinthatareaisaimedatovercomingthesedifﬁculties[8].ThesystemthatismostsimilartoSolipsyisprobablySystrace[22],asys-temthathelpsformulateandenforcesystemcallpolicies,whichalsomodiﬁessystemcallsontheﬂy.KingandothersusedReVirttodevelopBacktracker,asystemthatbuildsagraphofdependenciesbetweeneventssuchasprocesscreation,I/O,orﬁledeletionandusesthesedependenciesforbreak-inanalysis[12].Forexample,ifBacktrackerwantstoﬁndthecauseforamodiﬁcationoftheﬁle/etc/passwd,itwilllookthroughitsdependencegraph,ﬁndtheprocessPthatlastmodiﬁedtheﬁleandwillthenrecursivelyﬁndalleventsandprocessesthatcouldhavein-ﬂuencedP.AninherentlimitationofBacktrackeristhatitcannotﬁndeffectswhosecausedoesnotappearinthedependencygraph.Inouraboveexample,ifBacktrackerwantstoﬁndamodiﬁcationto/etc/passwd,itwilllookforsystemcallsthatopenandwritethepasswordﬁle.Wehavewrittenaprogramthatcreatesanewrootaccountinthepasswordﬁlewithoutleavingtracesinsystemcalls.Thisprogramworksasfol-lows:1.Itloadsapurpose-builtkernelmodule.55Thispresupposesthattheattackerhasalreadygainedrootaccess.However,thisprogram’spurposeisnottoattack,buttoinstallabackdoorthatcannotbeanalyzedbyBacktracker.2.Uponmoduleinitialization,thekernelmodulecausesanewrootaccounttobeaddedtothepasswordﬁle.Itdoessobycallingfunctionsinsidethekernelandnotbymakingadditionalsystemcalls.3.Finally,theprogramunloadsthekernelmodule.Backtrackerwillnotbeabletoanswerthequestion“Whicheventscausedtheextrarootaccounttoappearinthepasswordﬁle?”becauseitlooksatthesystemcallsandde-ducesthatthereisnorelationshipbetween/etc/passwdandtheprocessthatloadsthekernelmodule.Malforwillac-tuallyexecutetheprocessesinquestionandwillbeabletoproduceafairlysmalllistofprocessesthathaveexperimen-tallybeenfoundtoberesponsibleforthealterationofthepasswordﬁle.Thislimitationexistsforallpurelydeduc-tivemethodsandisnotspeciﬁctoBacktracker.Wecanalsomodifytheattacksothatthekernelmoduledelaysinstallingthenewrootaccount.Thismeansthatsys-temsarefooledthatfreezethesystemassoonastheydetectacompromiseinordertoﬁndtheresponsibleprocesses.JamesNewsomeandothershavedevelopedTaintcheck[20].Taintcheckandproducesattacksignaturesforcertaincommonexploitssuchasbufferoverﬂowsorformatstringvulnerabilitiesbytaintingalluser-suppliedinputandfol-lowingitthroughthecomputationwiththehelpofVal-grind[18].Taintchecklooksforpotentiallyharmfulusesofuser-suppliedinput,whereasMalforlooksforthecausesofspeciﬁcevents,regardlessofwhethertheyarebasedonharmfulusesofinput.Ifthereismuchmalicioustrafﬁc,suchasinawormattack,thistrafﬁcmaybecharacterizedandcharacteristicfeaturesexploitedsothatitmaybepossibletoextractat-tackvectorswithoutdeductionorexperimentation.Exam-plesofsuchsystemsareAutograph[11],EarlyBird,[24]andPAYL[28].Iftheattackisnotonlymassive,butalsopolymorphic,Polygraphcanbeused[19].However,sincethesesystemsarestatisticalinnature,theyallneedlargeamountsofattacktrafﬁcinordertowork.Incontrasttothis,Malforﬁndstherelevantprocessesinasingletargetedat-tack.Anothersystemtodetecttargetedattacksisshadowhon-eypots,introducedbyAnagnostakisandothers[1].Trafﬁcthatisclassiﬁedasanomalousisprocessedseparatelyonashadowhoneypot,inordertoseewhetheritleadstoanat-tack.Ifitdoes,thetrafﬁcisdiscarded.Ifitdoesnot,thetrafﬁcistransparentlyforwardedtotheproductionsystem.Thisapproachwillworkwellforattacksthatmovethesys-temfromasecuretoaninsecurestateinashortamountoftime.Attackswherethesystemisgraduallyandgen-tlynudgedtoaninsecurestatethroughmultiplestagesofattackaremoredifﬁculttohandlebecauseeachstageex-ceptthelastonemightescapedetection.TheseattacksareatleastinprincipleanalyzablebyMalfor.SidiroglouandKeromytisintroduceatechniquethatpatchesavulnerableprogram’ssourcecodeontheﬂy,oncetheinfectionvectorisisolated[23].Theyfocusonstack-basedbufferoverﬂowsanduseheuristicsthattransformtheprogram’ssourcecodesothatthebufferoverﬂowiscon-tained.Thepatchedprogramistestedinaclean-roomenvi-ronment,bothagainsttheoriginalattackvectorandagainstalocaltestsuitetoensurethatitisnolongervulnerableandthatitstillworksasexpected.Theirtechniquepresup-posesthattheattackvectorhasalreadybeenisolated,some-thingthatMalforisdesignedtodo.6.AssumptionsandlimitationsMalforworksonlyundercertainassumptions.Iftheseassumptionsdon’thold,Malforcanbedefeated.Thissec-tionlistssomeoftheseassumptions.Determinism.Malforwillhaveproblemsanalyzingat-tacksthatuseraceconditionsorotherformsofnon-determinismtosucceed.Inprinciple,contextswitchescouldbeaddedtothesetofdebuggableitems,anddeltadebugginghasevenbeenusedtoﬁndfailure-inducingthreadschedules[2],butitwouldbeimprac-ticaltoimplementthisinMalfor,sinceMalforisverymuchgearedtowardsreplayingsystemcallswithoutmodifyingtheoperatingsystemoranyapplications.FocusonProcesses.Ifanattacksucceedsbecauseofabuginasharedlibrary,Malforwillonlyﬁndtheprocessesthatwereinvolvedinthisparticularattack,nottheli-brarythatistherealculprit.Wehope,however,thatMalfor’sdiagnosisenablesadministratorstoanalyzetheattackfurtherandultimatelytoﬁndthebuginthelibrary.SuitableTest.Malforusesanautomatedtesttocheckforanintrusion.Ifthistestisfuzzyorproducesfalsepos-itivesornegatives,Malfor’sdiagnosiscanbefaulty.Thiscanhappenforexampleiftheattackhasadelayedeffect.Thiscanbeavoidedbylettingmalforreplayallprocessespriortotestingsubsets.IfMalfordoesnotdetectanattackimmediatelyafterreplayingallpro-cesses,thetestisnotsuitableforMalforandneedstobeadjusted.StateEquivalence.Forourprototype,wecannotformallyprovethatsystemstatesareequalduringcaptureandreplay,becausethereexistsnoformalspeciﬁcationforLinux’sbehavior.Inpractice,itisalsounrealistictoin-sistonbit-by-bitidentity.Wesettleinsteadforaformofisomorphismbetweensystemstates,plusmappingsthatmakethatisomorphism(hopefully)undetectabletouser-modeprocesses.Findingoutthesystemcallsthatneedtobereplayedandﬁndingouttherightmap-pingsisamanualprocessthatisimperfectbynature(becauseitreliesonourunderstandingoftheseman-ticsofLinuxsystemcalls),butwebelievethatsuchisomorphismscanbecreated,givenenoughresources.Undetectablilty.Atthemoment,Malforcanbecircum-ventedonceaprocesshasgainedsufﬁcientprivileges.Thismeansthataprocesscoulddeliberatelyperformdifferentlyduringreplaythanduringcapturing.Inte-gratingMalformoretightlywiththekernelandus-ingmandatoryaccesscontrolslikeSELinux[17]couldmitigatethisproblem;thesemeasureswouldleaveMalforvisible,buttheattackercouldnoteasilyﬁndoutwhetheritisinthecaptureorthereplayphase.7.ConclusionandfurtherworkWehaveintroducedMalfor,asystemthatusesanewexperiment-basedapproachtoanalyzesecurityinci-dents.Malforproducesresultsthatarecomplete,minimal,andcorrectbecausetheprocessesitﬁnds—andonlytheseprocesses—havebeenexperimentallyshowntoberele-vant.Theamountofinformationthatneedstobeexam-inedinordertoﬁndtheattackvectorisgreatlyreduced,sotherelevantevidencehasamuchhighervisibility.Attack-ingprocessescannoteasilydistinguishbetweentheirattackandareplayedversion.Inthefuture,weplantoextendMalforinseveralways.Theseextensionsinclude:Findingattackvectors.Mostimportantly,wearealreadyworkingonapplyingthesamesimpletechniquetoﬁndtherelevantinputs,thatis,theinfectionvector.Infact,oneoftheoriginalapplicationsofdeltadebuggingwastominimizeinputstofailingtestcases[32].ThiscouldleadtotheautomaticgenerationofasignatureforaNIDSlikesnort[25],ortoavectorthatcanbeusedbySidiroglouandKeromytis’spatchgenerationsys-tem[23].Usingintrusion-causingandharmlessrunstogether.Currently,weusedeltadebuggingonlyonerun—therunthatcausestheintrusion.Wecouldalsouseitwithtworuns:onethatcausestheintrusion,andan-othersimilaronethatdoesnot.Withthesetworuns,wecanﬁndarelevantdifferencebetweentwosimi-larruns.Deltadebuggingismuchfasterforthiscasethanusingonlyonerun.HarmlessrunsareeasytocomebyfornetworkserviceslikeSpudorApachebe-causethesessionleaderforksmanysimilarworkers,mostofwhichwillnotbecausingintrusions.Suggestingﬁxesinconﬁgurations.Ifwehavetwosys-tems,oneofwhichisvulnerabletoanattackandan-otherthatisnot,wecanusedeltadebuggingtoﬁndarelevantdifferenceinthetwosystems’conﬁgurations.Whichconﬁgurationﬁlesarereadisapparentfromtheprocess’ssystemcalls.Infact,thisinformationisal-readyextractedfromthesystemcallsbasedonheuris-tics.Thiscouldleadtoanautomated“quickﬁx”fea-turethatsuggeststoapplyaminimalsetofchangestothevulnerablesysteminordertomakeitimmunetoaspeciﬁcattack.Analyzingdistributedattacks.Atthemoment,weana-lyzebreak-insthathappenonasinglecomputer.Manyimportantsystemstodayaredistributed,however,andincidentanalysisondistributedsystemsisarelevantproblem.Apartfromtheproblemofsynchronizingeventstreamsbetweenmachines[14],thisworkcouldalsomakeuseofresultsderivedbyMatternandoth-ers[15]toﬁndeventsthatcannotbethecauseofthebreak-inbecausetheyhappenconcurrentlywithit.Itiseasiertoﬁndconcurrenteventsinadistributedsys-temthanonasinglemachine,soitcouldturnoutthatﬁndingcausesofbreak-insiseasierindistributedsys-tems.Ourbroadvisionisthatofaself-diagnosingandself-healingsystem:computersdetectwhentheyareunderat-tack,useMalfortoﬁndtheattackvectorsandpossiblyevenﬁxes,applytheﬁxesanddeploytheﬁxedcomponents.Intheracebetweenattackersandadministrators,thisshouldgivetheadministratorssomebreathingspaceinwhichtheycanfortifytheirsystemsanddeviseanddeploymoregen-eraldefenses.InformationaboutMalforcanbeobtainedfromhttp://www.st.cs.uni-sb.de/malfor/.8.AcknowledgementsThankstoSilviaBreu,HolgerCleve,ValentinDallmeier,ChristianLindigandThomasZimmermannfortheirvalu-ablecommentsonearlierrevisionsofthispaper.ValentinDallmeierandThomasZimmermannalsogavegoodadviceonsomeofthedatabaseimplementationdetailsinSolipsy.Theanonymousreviewersmademanyhelpfulcomments.ThanksarealsoduetoMichaelMiroldforthenameSolipsyandforvaluableearlydiscussionsaboutSolipsy’sarchitec-ture.References[1]K.G.Anagnostakis,S.Sidiroglou,P.Akritidis,K.Xinidis,E.Markatos,andA.Keromytis.Detectingtargetedattacksusingshadowhoneypots.InProceedingsofthe14thUsenixSecuritySymposium,Berkeley,CA,USA,Aug.2005.UsenixAssociation.[2]J.-D.ChoiandA.Zeller.Isolatingfailure-inducingthreadschedules.InISSTA’02:Proceedingsofthe2002ACMSIGSOFTInternationalSymposiumonSoftwareTestingandAnalysis,pages210–220,NewYork,NY,USA,2002.ACMPress.[3]H.CleveandA.Zeller.Locatingcausesofprogramfail-ures.InProceedingsofthe27thInternationalConferenceonSoftwareEngineering,pages342–351,NewYork,NY,USA,May2005.ACMPress.[4]J.Dike.Theuser-modelinuxkernelhomepage.http://user-mode-linux.sourceforge.net/,Jan.2005.[5]G.W.Dunlap,S.T.King,S.Cinar,M.A.Basrai,andP.M.Chen.ReVirt:Enablingintrusionanalysisthroughvirtual-machineloggingandreplay.InProceedingsofthe5thSymposiumonOperatingSystemsDesignandImplementa-tion,pages211–224,NewYork,NY,USA,Dec.2002.ACMPress.[6]D.Farmer.Frequentlyaskedquestionsaboutthecoroner’stoolkit.http://www.fish.com/tct/FAQ.html,Jan.2005.[7]D.FarmerandV.Venema.ForensicDiscovery.Addison-Wesley,Jan.2005.[8]T.Garﬁnkel.Trapsandpitfalls:Practicalproblemsinsys-temcallinterpositionbasedsecuritytools.InProceedingsoftheInternetSocietySymposiumonNetworkandDistributedSystemSecurity,pages19–34,Reston,VA,USA,Feb.2003.InternetSociety.[9]I.Goldberg,D.Wagner,R.Thomas,andE.A.Brewer.Ase-cureenvironmentforuntrustedhelperapplications(conﬁn-ingthewilyhacker).InProceedingsofthe6thUsenixSecu-ritySymposium,Berkeley,CA,USA,July1996.UsenixAs-sociation.[10]K.JainandR.Sekar.User-levelinfrastructureforsystemcallinterposition:Aplatformforintrusiondetectionandconﬁne-ment.InProceedingsoftheInternetSocietySymposiumonNetworkandDistributedSystemSecurity,pages19–34,Re-ston,VA,USA,Feb.2000.InternetSociety.[11]H.-A.KimandB.Karp.Autograph:Towardautomated,dis-tributedwormsignaturedetection.InProceedingsofthe13thUsenixSecuritySymposium,Berkeley,CA,USA,Aug.2004.UsenixAssociation.[12]S.T.KingandP.M.Chen.Backtrackingintrusions.InPro-ceedingsoftheNineteenthACMSymposiumonOperatingSystemsPrinciples,pages223–236,NewYork,NY,USA,2003.ACMPress.[13]T.J.LeBlancandJ.M.Mellor-Crummey.Debuggingparal-lelprogramswithinstantreplay.IEEETransactionsonCom-puters,36(4):471–482,1987.[14]F.Mattern.Logicaltime.InJ.U.P.Dasgupta,editor,Ency-clopediaofDistributedComputing.KluwerAcademicPub-lishers,1999.[15]F.MatternandR.Schwarz.Detectingcausalrelationshipsindistributedcomputations:Insearchoftheholygrail.Dis-tributedComputing,7(3):149–174,1994.[16]S.Narayanasamy,G.Pokam,andB.Calder.BugNet:Con-tinuouslyrecordingprogramexecutionfordeterministicre-playdebugging.InProceedingsoftheInternationalSympo-siumonComputerArchitecture2005,NewYork,NY,USA,June2005.ACMPress.[17]NationalSecurityAgency.Security-EnhancedLinuxhome-page.http://www.nsa.gov/selinux/.[18]N.Nethercote.DynamicBinaryAnalysisandInstrumenta-tion.PhDthesis,UniversityofCambridge,Nov.2004.[19]J.Newsome,B.Karp,andD.Song.Polygraph:Automati-callygeneratingsignaturesforpolymorphicworms.InPro-ceedingsofthe2005IEEESymposiumonSecurityandPri-vacy,May2005.[20]J.NewsomeandD.Song.Dynamictaintanalysisforau-tomaticdetection,analysis,andsignaturegenerationofex-ploitsoncommoditysoftware.InProceedingsofthe12thInternetSocietySymposiumonNetworkandDistributedSys-temSecurity,Reston,VA,USA,Feb.2005.InternetSociety.[21]F.PerriotandP.Szor.Ananalysisoftheslapperwormex-ploit.http://securityresponse.symantec.com/avcenter/reference/analysis.slappe%r.worm.pdf,2002.[22]N.Provos.Improvinghostsecuritywithsystemcallpoli-cies.InProceedingsofthe12thUsenixSecuritySymposium,pages257–272,Berkeley,CA,USA,Aug.2003.UsenixAs-sociation.[23]S.SidiroglouandA.D.Keromytis.Counteringnetworkwormsthroughautomaticpatchgeneration.IEEESecurity&Privacy,2005.Toappear.[24]S.Singh,C.Estan,G.Varghese,andS.Savage.TheEarly-Birdsystemforreal-timedetectionofunknownworms.TechnicalReportCS2003-0761,UniversityofCalifornia,SanDiego,Aug.2003.[25]Sourceﬁre,Inc.Snorthomepage.http://www.snort.org/,June2005.[26]S.M.Srinivasan,S.Kandula,C.R.Andrews,andY.Zhou.Flashback:Alightweightextensionforrollbackanddeter-ministicreplayforsoftwaredebugging.InProceedingsofthe2005UsenixAnnualTechnicalConference,Berkeley,CA,USA,2005.UsenixAssociation.[27]F.Tip.Asurveyofprogramslicingtechniques.Technicalre-port,CWI(CentreforMathematicsandComputerScience),Amsterdam,TheNetherlands,1994.[28]K.WangandS.J.Stolfo.Anomalouspayload-basednet-workintrusiondetection.InProceedingsoftheSeventhIn-ternationalSymposiumonRecentAdvancesinIntrusionDe-tection,LNCS3224.Springer,Sept.2004.[29]I.Welsh.Trainspotting.W.W.Norton&Company,June1996.[30]M.Xu,R.Bodik,andM.D.Hill.A”ﬂightdatarecorder”forenablingfull-systemmultiprocessordeterministicreplay.InProceedingsofthe30thAnnualInternationalSymposiumonComputerArchitecture,pages122–135,NewYork,NY,USA,2003.ACMPress.[31]A.Zeller.Isolatingcause-effectchainsfromcomputerpro-grams.InProceedingsofthe10thACMSIGSOFTInter-nationalSymposiumontheFoundationsofSoftwareEngi-neering,pages1–10,NewYork,NY,USA,Nov.2002.ACMPress.[32]A.ZellerandR.Hildebrandt.Simplifyingandisolatingfailure-inducinginput.IEEETransactionsonSoftwareEn-gineering,26(2):183–200,Feb.2002.