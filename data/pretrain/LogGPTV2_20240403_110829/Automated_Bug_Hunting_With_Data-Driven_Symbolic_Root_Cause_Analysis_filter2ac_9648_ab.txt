processors made by ARM, AMD, and others.
Intel PT records traces of user space execution directly to phys-
ical memory, where it can then be forwarded by a kernel driver
to persistent storage or remote endpoints. Its recording can be
restricted to a particular process at the hardware level using a con-
figuration register that accepts a CR3 value representing the process‚Äô
page table address.
Traces consist of a stream of packets, each recording the outcome
of a branching instruction, indirect call/jump, return, or interrupt.
Binary branches are recorded as a single taken-not-taken (TNT)
bit, whereas other events yield a target instruction pointer (TIP).
To decode the trace into an instruction sequence, the decoder also
needs additional side-band data about the traced process‚Äô memory
space and thread scheduling, which we describe next.
First, the decoder needs the process‚Äô executable pages in order
to recover instructions. Bunkerbuster‚Äôs kernel driver handles this
by hooking relevant system calls (e.g., mmap, mprotect) and record-
ing memory pages alongside the PT trace. Bunkerbuster can then
linearly disassemble the memory, starting at the program‚Äôs entry
point and consulting the next PT packet whenever a branch is
encountered, to recover every executed instruction.
Second, in order to distinguish threads that share the same page
table (CR3 value), the kernel driver also hooks context switches to
record when threads are swapped in and out of CPU cores. The
driver also hooks the fork and exec system calls so it can detect
and trace child processes created by the target program.
Trace Filtering. Unlike prior PT systems, Bunkerbuster has to
account for the fact that users and services may engage in repetitive
tasks, yielding partially redundant execution traces. To address this,
our driver quickly hashes trace segments on-the-fly and compares
them against a global map, discarding ones that have already been
observed, using the following algorithm:
(ùë¢, ùë£) ‚àà ùëá : ùë¢ ‚â™ 1 ‚äï ùë£ mod ùëÜ
(1)
where ùë¢ and ùë£ are virtual address offsets, relative to their object
bases to account for ASLR, recovered from trace ùëá . The result is
a bit offset within a map of size ùëÜ bits corresponding to the edge
(ùë¢, ùë£). The global map is initialized with all bits set to 0 and then as
edges are decoded from the PT trace, their corresponding bits are
set to 1. If a trace segment adds any novel bits to the global map, it
is forwarded for analysis, otherwise it is discarded.
3.2 Symbolizing Memory Snapshots
Alongside the data described in Subsection 3.1, the end-host driver
also records snapshots of register values and memory that will serve
as starting states for symbolic execution. Specifically, when the pro-
gram is loaded at runtime, the driver hooks the program‚Äôs main
entry point and any entrances to imported APIs (i.e., library func-
tions) by placing traps in the process‚Äô procedure linkage table (PLT).
Once captured, Bunkerbuster symbolizes the input data, which for
the main entry point is the program‚Äôs input arguments and for
APIs are the called function‚Äôs parameters. This data is replaced
with unconstrained symbolic variables, enabling Bunkerbuster to
Figure 3: Binary-only scenario, with color added for clarity.
The boxes show the usage of non-clobbered values. The first
snippet reveals foobar has 3 arguments, the next reveals that
the RDI argument is a char pointer (denoted [s8]), and the
last reveals RDX is a code pointer ([c]).
reason about all possible input values to the program and imported
APIs. For this reason, each trap only needs to be used once, and
is then removed, minimizing runtime overhead. This also allows
Bunkerbuster to analyze snapshots (and their corresponding trace
segments) in any order because there are no prior constraints.
Generally speaking, under-constrained symbolic execution can
result in false positive detections, i.e., bugs that cannot actually
be reached in real executions. However, because we are careful to
only snapshot the entry points to the program and its imported
libraries, Bunkerbuster‚Äôs results do not have this issue. Bugs found
using snapshots of the program‚Äôs entry point will be inherently
reachable, and of relevance to the program‚Äôs developers. Conversely,
for API snapshots, so long as Bunkerbuster halts its analysis at the
return from the called function,4 any discovered bugs may not be
reachable within the context of the program that was recorded, but
may be reachable by other programs that also import the same
library, making the results relevant to library developers. In this
way, Bunkerbuster decomposes long traces into smaller segments,
simplifying the symbolic execution.
One small caveat we discovered while designing Bunkerbuster
is that while most inputs within snapshots should be symbolized,
code pointers passed to APIs should not. The reason is that some APIs
are designed to accept code pointers, which may serve as callback
functions, helper functions, and more. If these are replaced with
unconstrained symbolic variables, then their use will be difficult
to distinguish from control flow hijacking, despite being intended
behavior. The reason why will become clearer in Subsection 3.5,
which describes how Bunkerbuster detects overflow bugs.
Whereas program arguments adhere to a fixed memory layout,
as specified by the operating system, the locations and types of
API arguments has to be recovered by Bunkerbuster. Recall from
Subsection 2.2 that we aim to handle both public and private APIs.
Consequently, we propose two approaches for inferring and sym-
bolizing the input arguments, one based on parsing C/C++ headers
and the other based on binary-only analysis.
4Analysis beyond this point can yield false positives because the returned value is
under-constrained.
0000000000001142 :...114a: mov    %rdi,-0x18(%rbp)114e: mov    %esi,-0x1c(%rbp)1151: mov    %rdx,-0x28(%rbp)...1164: mov    -0x18(%rbp),%rax1168: add    %rdx,%rax116b: movzbl (%rax),%eax116e: movsbl %al,%eax...1183: mov    -0x28(%rbp),%rax...118c: callq  *%raxu:{rdi}u:{rdi,esi}u:{rdi,esi,rdx}u:{rdi[s8],esi,rdx}u:{rdi[s8],esi,rdx[c]}Session 2A: Fuzzing and Bug Finding CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea323Source-Based Inference. When source headers are available, we
use a C/C++ parser to read the API‚Äôs function prototype into an ab-
stract syntax tree (AST), terminating with basic data types of known
size (e.g., int, void pointer). All non-pointer types are treated as
data. For pointers, if the type is a function prototype, then it is a
code pointer. Similarly, pointers to basic data types are data. How-
ever, it is ambiguous when the type is void, which could point to
data or code. In such cases, the parser assumes the pointer points to
code to remain conservative. The result is a data structure defining
the offset, size, and type of each element for each argument. This
is then combined with the calling convention for the architecture
being analyzed to pinpoint these elements in registers and memory.
Notice that because libraries are shared between programs, factors
like padding are treated consistently across systems and is easy to
account for. When data pointers point to buffers of arbitrary length,
they are replaced with new large buffers of unconstrained symbolic
bytes to test for overflows.
Binary-Based Inference. When headers are unavailable, our anal-
ysis leverages the recorded trace, shown with a concrete example
in Figure 3. Bunkerbuster steps through the traced basic blocks
in order and tracks where registers and stack values are used in
operations versus being clobbered by writes. If a non-clobbered
value is used, it is likely an argument. The type is inferred based
on how the loaded value is manipulated. If it appears in a call, it is
treated as a code pointer. If it is used in subsequent loads, it is a data
pointer. Otherwise it is treated as a basic data type. It is possible
for this approach to miss a parameter if it is never used, however
we did not observe this in our evaluation.
During implementation, we tested the robustness of this ap-
proach by comparing its outputs against those of the source-based
technique and verifying that they match. We include a breakdown
of the tested libraries in Table 5 of the Appendix.
3.3 Symbolic State Reconstruction
Once Bunkerbuster has a symbolized snapshot for a starting state
(Subsection 3.2), and a corresponding trace segment (Subsection 3.1),
it then needs to recover the intermediate program states that cover
the recorded execution path. Notice that Bunkerbuster cannot sim-
ply take more snapshots because doing so comes at a performance
cost, so instead our solution is to use symbolic execution to re-
cover the missing states. As an added benefit, this will also enable
Bunkerbuster to consider states beyond what was concretely exe-
cuted, potentially finding additional bugs.
To perform the reconstruction, each instruction is emulated and
constraints are added to the programs state to encode all possible
data that can reach the current point in the execution. When a
branching instruction is encountered, a satisfiability modulo the-
ories (SMT) solver evaluates the accumulated constraints to yield
reachable successor states. However, Bunkerbuster initially focuses
on only recovering the path that was recorded, so it only keeps the
successor that matches the next address in the trace. In this way,
there is only 1 active state per step.
CPU Architecture-Specific Considerations. Although following a
linear sequence of executed addresses is conceptually intuitive, in
practice real-world encoding schemes can introduce ambiguities
Figure 4: CFG created by the UAF module for a real-world
case (subgraph shown for brevity). Black edges are the path
traced by PT and blue nodes are states the module discov-
ered. The blue edges show a discovered path leading to a free,
followed by the red path leading to a UAF bug (red node).
that must be resolved carefully. One prevalent case occurs in proces-
sors supporting extended instruction sets (ISAs), such as IA64 and
AMD64. Among the added instructions are complex operations like
Intel‚Äôs ‚Äúrepeat‚Äù instructions, which allow compilers to implement
an entire loop in one instruction.5 When executing concrete mem-
ory in a real processor, these instructions are deterministic, so Intel
PT ignores them. However, in symbolic analysis, two successor
states become reachable if symbolic memory is accessed: one that
completes the instruction and another that continues its iterating.
Since the trace offers no guidance, our solution is to ‚Äúiterate‚Äù on the
repeat instruction as many times as possible, given the symbolic
constraints, because this is most likely to reveal to an overflow bug.
Once the analysis must advance past the complex instruction, it
synchronizes back to the trace and continues.
3.4 Use-After-Free & Double Free Bugs
The UAF module (also covering DF) relies on a value set analysis
(VSA) over the symbolic states. However, unlike a typical VSA that
tracks the concrete pointers to allocated and freed memory buffers,
Bunkerbuster‚Äôs VSA is performed using symbolic pointers, con-
strained by the symbolic execution to encode all possible values at
the current program state. This carries several advantages. For ex-
ample, in the evaluation presented in Subsection 4.3, we encounter
a case where AddressSanitizer, having access to only a single con-
crete input provided by a fuzzer, concluded that a pointer passed to
free could cause an invalid free, since the pointer‚Äôs value was an
address that was not allocated. However Bunkerbuster, using the
symbolic representation of that same pointer, detected that there
were other satisfiable values for it, some of which corresponded to
addresses that were allocated, revealing the bug to really be a UAF.
Detection. To perform the VSA, we assume knowledge of the
syntax of memory management functions in advance, which is
easily achievable in practice because most programs rely on a few
5strlen can be implemented in IA64 using a single repnz scas instruction.
validate_image+0x0 (0x1243)validate_image+0x41 (0x1284)validate_image+0x1b (0x125e)main+0x29 (0x12b4)main+0x4f (0x12da)printf+0x0 (0xf8)main+0x2d (0x12b8)main+0x68 (0x12f3)main+0x9b (0x1326)free_image+0x0 (0x11f6)free_image+0x13 (0x1209)free_image+0x20 (0x1216)free+0x0 (0xe8)free_image+0x3c (0x1232)free_image+0x30 (0x1226)free_image+0x48 (0x123e)free_image+0x4b (0x1241)main+0xa7 (0x1332)validate_image+0x3a (0x127d)validate_image+0x2e (0x1271)validate_image+0x46 (0x1289)fwrite+0x0 (0x110)main+0x4d (0x12d8)Session 2A: Fuzzing and Bug Finding CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea324standard implementations. Even when a wrapper is placed around
memory management functions for portability across systems, we
find that Bunkerbuster can track the underlying standard library
while disregarding the wrapper. In the case of the real-world pro-
grams in our evaluation dataset, they all rely on either libc or
jemalloc. There are also algorithms to automatically detect and in-
fer memory management functions [26], which can be incorporated
in future work, but are not implemented in our initial prototype.
When the program calls into an allocation function, Bunker-
buster records the locations of the pointer, the allocated buffer, and
its size, in an allocated set. If the size is symbolic, Bunkerbuster
evaluates it to its maximum satisfiable value. When a pointer is
passed to a free function, Bunkerbuster evaluates the symbolic con-
straints to determine which buffer is being referenced and moves
it into a freed set. Notice that the referenced buffer could be one
that is already freed, in which case a DF bug is detected. Similarly,
Bunkerbuster checks any dereferenced pointers in each discovered
state, and if one can point to a freed buffer, it is a UAF bug.
Search. With symbolic buffer and pointer metadata recovered via
VSA, Bunkerbuster‚Äôs search strategy first recovers function bound-
aries, which are determined based on the calls and returns contained
within the trace, and then labels which functions manipulate heap
based on the collected pointer metadata. The implementation of the
algorithm to recover all the accessed memory addresses for a basic
block is provided in the Appendix as Algorithm 1. Bunkerbuster
then searches these functions for additional states using depth-
first-search to see if they can cause a UAF or DF. By sticking only
to functions reached during tracing, Bunkerbuster can avoid path
explosion by returning to any of the traced states reconstructed in
Subsection 3.3.
Figure 4 shows a partial control flow graph (CFG) for a UAF bug
found with this strategy. The initial states from the trace are shown
in white, connected by black edges. Nearby states found during
exploration are shown in blue, revealing the blue path to a free.
Further exploration of this and other traced functions then reveals
the red path leading to a UAF.
Root Cause. Once detected, the symbolic root cause report pre-
pared for the developers contains the basic block that allocated the
accessed buffer, the one that freed it, and the one that performed
the buggy access. To propose a preliminary patch, the module con-
structs a control dependency graph (CDG) over the path leading to
the UAF, revealing all the conditional branches the violating basic
block‚Äôs reachability depends on. The branch nearest to the violator
is selected (based on shortest path) and the state for the alternate
branch (which did not cause a bug) is checked for its constraints. If
these constraints contradict the UAF state, this becomes the prelim-
inary patch, otherwise the report advises the developers to place a
new guard condition before the violating basic block.
3.5 Overflow & Format String Bugs
Detection. Bunkerbuster‚Äôs overflow detection module focuses on
bugs that can manifest into control flow hijacking, taking advan-
tage of the fact that all external input data is symbolized in the
starting memory snapshot (Subsection 3.2). Consequently, if the
program counter for a state ever becomes symbolic due to one of
these variables, this means external input can directly control the
execution of the code via crafted inputs, which is a serious vulnera-
bility. Notice that symbolic constraints are already propagated by
the symbolic execution, so detection is performed by querying the
SMT solver to check whether the program counter is symbolic (i.e.,
has more than 1 satisfiable value). If it is, an overflow has occurred.
Search. Bunkerbuster searches for overflows by identifying all
the loops that appear in the trace, which is accomplished by trans-
forming the linear execution into a CFG and then using a depth-first
search to find all the backward edges in the graph.6 Once identi-
fied, the module‚Äôs search strategy is to stress the known loops by
iterating through them as much as possible (given the symbolic
constraints) and then observe the side effects in subsequent suc-
cessor states. However, stressing every loop encountered in the
trace is time consuming, so Bunkerbuster employs two strategies
to prioritize loops that are more likely to lead to overflows.
First, not all loops write to memory and for the ones that do,
not all writes rely on a changing pointer value or offset, which is
necessary to cause an overflow. We coin this behavior as stepping
and Bunkerbuster checks for instances of it in the recorded trace.
Specifically, for each visit to each loop in the reconstructed CFG,
Bunkerbuster collects the target memory address of each write in-
struction and examines how its target changes over each iteration.
If there exists a write instruction such that each invocation targets
an always increasing (or decreasing) memory address, then the loop
is prioritized as a candidate for overflow analysis. An implementa-
tion of this algorithm is provided in the Appendix as Algorithm 2.
Notice that since symbolic states are examined, the pointers can
have multiple satisfiable values, so the satisfiability test for the
stepping criteria is performed by the SMT solver.
Next, the module takes into special consideration loops that en-
gage in counting behavior because subsequent overflow candidates
may have control dependencies to the computed value. For example,
a string copying method can be implemented as two loops, the first
counting how many bytes are in the string and the second copying
them, as shown in Figure 5. If our algorithm blindly stresses the
counting loop, its final written value will be maximized and then
the subsequent copying loop will have to iterate the appropriate
number of times. However, once the module detects that a code
or return pointer in memory has been corrupted, continuing to
stress the loop is excessive. Our solution is to detect counting loops,
similarly to how stepping is detected, and replace the final value
with a new symbolic variable constrained to all of the original‚Äôs
intermediate values. For example, if the counting loop in Figure 5
can iterate up to 4,096 times, rather than constraining length to
4096, it is replaced with the symbolic integer set [1, 4096]. This
allows it to discover the subsequent bug in fewer steps.
Once candidate loops have been stressed by iterating them as
much as possible (or until a return pointer on the stack is overwrit-
ten), the module explores successor states until a return executes.
If a control flow hijack is not detected by this point, it moves on to
the next candidate until none remain.
Root Cause. To generate a report, the module first includes the ba-
sic block where the hijack occurred. Next, it identifies the memory
6See NetworkX‚Äôs find_cycle algorithm for a suitable implementation.
Session 2A: Fuzzing and Bug Finding CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea325(1) Is Bunkerbuster able to detect bugs within our covered classes?
We select 15 widely-used commodity programs and generate
a corpus of benign inputs. After analysis, Bunkerbuster finds
39 bugs, of which 8 are new, never before reported cases.
We manually verify the presence of all bugs. 1 EDB and 3
CVE IDs have been issued and patched by developers using
Bunkerbuster‚Äôs reports. We also measure Bunkerbuster‚Äôs code
coverage to show that its exploration converges.
(2) Is Bunkerbuster‚Äôs exploration effective compared to prior tech-
niques? We compare against AFL [112] and QSYM [111] on
our target programs, starting from similar seeds. After 1 week,
Bunkerbuster finds 8 bugs missed by the other systems.
(3) Is Bunkerbuster‚Äôs root cause analysis valuable compared to
existing instrumentation? We compare Bunkerbuster‚Äôs root
cause reports for Autotrace against those from QSYM with
AddressSanitizer [91]. Bunkerbuster provides more accurate
class labels in 4 cases.
(4) Are Bunkerbuster‚Äôs exploration heuristics effective? We com-
pare the exploration techniques described in Section 3 against
breadth-first and depth-first search and find that Bunker-
buster outperforms across all trials by better managing path
explosion.
(5) Is Bunkerbuster feasible to deploy in terms of runtime and
storage overhead? We measure the performance and storage
overheads of tracing programs using the SPEC CPU 2006
benchmark and Nginx, averaging 7.21% runtime overhead.
(6) Is Bunkerbuster‚Äôs symbolic root cause analysis over partial paths
correct? We repeat the main experiment from the original
symbolic root cause analysis work [106] using Bunkerbuster