        }    else {
                rax = var_28;
        }    if (rax != 0x0) {
                rax = check_license(var_30, _g_license_name, _g_license_seats, var_4C);
                *(int8_t *)_g_valid_license = COND_BYTE_SET(E);            if (rax == 0x1) {
                        encode_decode_license(var_30);
                        get_license_path();                    if ((var_68 & 0x1) == 0x0) {
                                rdi = var_67;
                        }                    else {
                                rdi = var_58;
                        }
                        rdx = var_30 & 0xff;                    if ((rdx & 0x1) == 0x0) {
                                rsi = var_2F;
                                rdx = rdx >> 0x1;
                        }                    else {
                                rdx = var_28;
                                rsi = var_20;
                        }
                        rbx = write_file(rdi, rsi, rdx, 0x1);                    std::__1::basic_string, std::__1::allocator >::~basic_string(var_68);                    if (rbx == 0x0) {
                                r14 = control::get_px_window();
                                get_license_path();
                                rax = std::__1::basic_string, std::__1::allocator >::insert(var_98, 0x0, "Unable to write license file: ");
                                var_70 = *(rax + 0x10);
                                rcx = *rax;
                                var_80 = rcx;
                                *(rax + 0x10) = 0x0;
                                *(rax + 0x8) = 0x0;
                                *rax = 0x0;                            if ((var_80 & 0x1) == 0x0) {
                                        rsi = var_7F;
                                }                            else {
                                        rsi = var_70;
                                }
                                px_show_message(r14, rsi);                            std::__1::basic_string, std::__1::allocator >::~basic_string(var_80);                            std::__1::basic_string, std::__1::allocator >::~basic_string(var_98);
                        }
                        create_thread(notify_license_entered_thread(void*), sign_extend_64(var_4C));
                        rax = var_4C;                    if ((rax > 0xcf20b) && (rax > 0xab247)) {
                                rax = control::get_px_window();
                                px_show_message(rax, "Thanks for purchasing!");
                        }                    else {
                                rax = control::get_px_window();
                                px_show_message(rax, "Thanks for trying out Sublime Text 3!nnSublime Text 3 is a paid upgrade from Sublime Text 2, and an upgrade will be required for use when 3.0 is released.nnUntil then, please enjoy Sublime Text 3 Beta.");
                        }
                }            else {                    if (rax != 0x4) {                            if (rax == 0x3) {
                                        rax = control::get_px_window();
                                        px_show_error(rax, "That license key is no longer valid.");
                                }                            else {                                    if (rax == 0x2) {
                                                rax = control::get_px_window();
                                                px_show_error(rax, "That license key doesn't appear to be valid.nnPlease check that you have entered all lines from the license key, including the BEGIN LICENSE and END LICENSE lines.");
                                        }
                                }
                        }                    else {
                                rax = control::get_px_window();
                                px_show_error(rax, "That license key has been invalidated, due to being shared.nnPlease email PI:EMAIL to get your license key reissued.");
                        }
                }
        }    else {
                get_license_path();            if ((var_B0 & 0x1) == 0x0) {
                        rdi = var_AF;
                }            else {
                        rdi = var_A0;
                }
                delete_file(rdi);            std::__1::basic_string, std::__1::allocator >::~basic_string(var_B0);
        }    if (*(r15 + 0x150) != 0x0) {            std::__1::function, std::__1::allocator >::~basic_string(var_30);    return rax;
    }
现在，如果我们仔细观察可以发现注册码检测位于以下几行代码中：
    rax = check_license(var_30, _g_license_name, _g_license_seats, var_4C);  
                *(int8_t *)_g_valid_license = COND_BYTE_SET(E);
然后程序将根据rax的值做出相应的一个或多个处理动作。通过在if块中包含的字符串进行判断，以下是check_license函数可能的返回值：
0x1：注册码合法，将显示“Thanks for purchasing”消息。
0x2：注册码非法，将显示“That license key doesn't appear to be valid.nnPlease check that
you have entered all lines from the license key, including the BEGIN LICENSE
and END LICENSE lines.”消息。
0x3：注册码已不再可用。
0x4：由于盗版问题，注册码已被取消。
因此，如过我们将if中进行比较的值由0x1改为0x2，那么我们就可以使用任意字符串进行注册了。
回到asm代码中，很明显比较操作位于以下位置：
check_license被调用，然后返回结果(rax)被改为与2进行比较，然后……