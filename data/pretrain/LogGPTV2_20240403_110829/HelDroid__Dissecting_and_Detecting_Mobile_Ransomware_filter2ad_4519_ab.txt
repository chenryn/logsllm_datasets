that the application is actively performing either action on the infected device. In
this case, we label the sample as “ransomware”. We designed deterministic deci-
sion criteria based on static analysis to detect encryption or locking operations.
Note that if the Threatening Text Detector is not triggered, the sample is
discarded and cannot be considered as ransomware or scareware. Although these
three detectors could be combined in other ways (e.g., by including weighting),
in this work we consider the presence of threatening text as mandatory for a
ransomware author to reach her goal. This aspect is discussed thoroughly in
Sect. 7.
388
N. Andronio et al.
3.1 Threatening Text Detector
The goal of this analysis is to recognize menacing phrases in statically and
dynamically allocated strings (i.e., sequences of printable characters).
Text Extraction. HelDroid ﬁrst extracts and analyzes static strings by pars-
ing the disassembled code and resource ﬁles (e.g., assets, conﬁguration ﬁles). If
HelDroid detects no threatening text, then it analyzes dynamically allocated
strings: It runs the sample in a sandbox, captures a network traﬃc dump (i.e.,
PCAP), decodes application-layer protocols (e.g., HTTP) and extracts strings
from the resulting data. The sandbox that we employ also extracts strings allo-
cated dynamically (e.g., as a result of a decryption), but none of the current
samples used these measures.
Text Classiﬁcation. To estimate whether a string contains threatening sen-
tences, we use a natural language processing (NLP) supervised classiﬁer. We
train it on generic threatening phrases, similar to (and including) those that
typically appear in ransomware or scareware samples. More precisely, we train
the classiﬁer using phrases labeled by us as threat, law, copyright, porn, and
money, which typically appear in scareware or ransomware campaigns. Note
that no ransomware samples are actually needed to train our classiﬁer: All we
need are the sentences. As opposed to being able to isolate a sample, knowing
the sentences early is easy (e.g., by taking a screenshot or by leveraging reports
given by the ﬁrst victims).
This phase is further detailed in Sect. 4.1. Its output is a ternary decision:
“ransomware” threatening text (i.e., accusing the user and asking for payment),
“scareware” text (i.e., accusing the user), or “none”.
Localization. Our NLP classiﬁer supports localization transparently: It tells
whether a given sentence is “threatening” in any of the languages on which it
has been trained on. In the unlucky case where localized training phrases are
unavailable for training, in Sect. 6.2 we show, as a proof of concept, that these
can be easily obtained by running automatic translators on existing sentences
found in known ransomware or scareware.
Other Sources of Text. From a technical point of view, the text can be
displayed via other means than strings (e.g., images). However, we focus on
the core problem, which is that of deciding whether a text contains threatening
phrases. As discussed in Sect. 7, extracting text from images and videos is easily
performed with oﬀ-the-shelf OCR software. Recall that, among the goals of the
attacker, the ransom-requesting message must be readable and understandable
by the victim: It is thus against his or her goals to try to evade OCRs, making
the text diﬃcult to read as a side eﬀect.
HELDROID: Dissecting and Detecting Mobile Ransomware
389
3.2 Encryption Detector
We check whether the (disassembled) code of the sample under analysis contains
traces of unsolicited ﬁle-encryption operations.
Unsolicited ﬁle-encryption operations are usually implemented by reading the
storage (e.g., external storage), looping over the ﬁles, invoking encryption rou-
tines on each of them, and deleting the original ﬁles. Therefore, we are interested
in ﬁnding execution ﬂows that originate from ﬁle-reading operations and termi-
nate into encryption routines. To this end, we rely on a fast, static taint-analysis
technique to track ﬂows originating from functions that access the storage (e.g.,
getExternalStorageDirectory()), ending into functions that write encrypted
content and delete the original ﬁles (e.g., CipherOutputStream, delete()). We
are well aware that a malware author can embed cryptographic primitives rather
than using the Android API. Fortunately, recent research [15,16] has already
tackled this problem.
Details aside, the output of this phase is a binary decision on whether there
are signiﬁcant traces of unsolicited ﬁle-encryption operations or not.
3.3 Locking Detector
We check if the application under analysis is able to lock the device (i.e., to
prevent navigation among activities). This can be achieved in many ways in
Android, including the use of the native screen locking functionality, dimming,
immortal dialogs, and so forth. Focusing on the most common techniques that we
encountered in real-world Android ransomware we designed a series of heuristics
based on lightweight emulation, which can be extended to include other locking
techniques in the future.
The most common technique to enact device locking consists in inhibiting nav-
igation among activities through the Home and Back buttons. This is achieved
by handling the events that originate when the user clicks on such buttons on
the phone and preventing their propagation. The net result is that the ran-
somware application eﬀectively forces the device to display an arbitrary activity.
Another technique consists in asking the user to let the application become a
device administrator, thus allowing it to lock the device. This functionality is
part of Android and is normally used for benign purposes (e.g., remote device
administration in enterprise scenarios).
To detect if any of these locking technique is executed, we implemented a
static code-analysis technique, described in Sect. 4.3. Essentially, we track each
Dalvik instruction, including method calls, and check whether there exists an
execution path that matches a given heuristic. We created one heuristic per
locking strategy. For example, we verify whether the event handler associated
to the Home button returns always true, which means that the event handling
cannot propagate further, resulting in a locked screen.
Details aside, the output of this phase is a binary decision on whether there
are signiﬁcant traces of device-locking implementations or not.
The overall ﬁnal output of HelDroid, obtained by aggregating the outputs
of the three detectors, is a ternary decision: ransomware, scareware, or none.
390
N. Andronio et al.
4 System Details
This section describes the details of HelDroid. The technical implementation
details are glanced in Sect. 5.
4.1 Threatening Text Detector Details
We use a supervised-classiﬁcation approach that works on the text features
extracted as follows:
1. Language Detection: a simple frequency analysis determines the language
of the text (see Sect. 5.1 for the implementation details).
2. Sentences Splitting: we use a language-speciﬁc segmenter that splits the
3. Stop-word Removal: we remove all stop words (e.g., “to”, “the”, “an”,
4. Stemming: we reduce words to their stems (e.g., “ﬁshing,” “ﬁshed,” and
text into sentences.
“and”).
“ﬁsher” become “ﬁsh”).
5. Stem Vectors: We map each sentence to a set of stem vectors, which are
binary vectors that encode which stems are in the sentence.
In training mode, each stem vector t is stored in a training set T . At runtime,
the stem vectors obtained from the app under analysis are used to query the
classiﬁer, which answers “ransomware,” “scareware,” or “other,” based on the
following scoring algorithm.
Scoring. As suggested in the text-classiﬁcation literature [17], scoring is based
on the cosine similarity s(x, t) ∈ [0, 1] between the query stem vector x and
every t ∈ T . Since we operate in a boolean space, it can be reduced to s(ˆx, ˆt) =
√
|ˆx∩ˆt|√
|ˆt|, where ˆx and ˆt are the stem sets (i.e., the set data structures that
|ˆx|·
contain strings denoting each stem), which is computed in O(min(|ˆx|,|ˆt|)).
To score the entire text x, the classiﬁer categorizes its sentences ∀c ∈ x by
maximizing the cosine similarity s(c, t) ∀t ∈ T . We denote the score of the
best-scoring sentence c(cid:2) as m(c(cid:2)). The best score is calculated within each cate-
gory. We actually computes two scores, m(c(cid:2))money for the best-scoring sentences
about “money,” and m(c(cid:2))accusation for other “accusation” sentences (i.e., threat,
law, copyright, porn).
Decision. We label the text as “scareware” if maccusation exceeds a threshold,
and “ransomware” if also mmoney exceeds. The threshold is set adaptively based
on the minimum required score for a sentence to be considered relevant for our
analysis. The idea is that short sentences should have a higher threshold, since
it is easier to match a greater percentile of a short sentence; instead, longer
sentences should have a lower threshold, for the same reason.
Setting thresholds is typically a problematic, yet diﬃcult-to-avoid part of any
heuristic-based detection approach. Setting one single threshold is easier, but
HELDROID: Dissecting and Detecting Mobile Ransomware
391
makes the decision more sensitive to changes (i.e., one single unit above the
threshold could signify a false detection). Therefore, we set bounds rather than
single threshold values, which we believe leave more room for customization. By
no means we claim that such bounds are good for future ransomware samples.
As any heuristic-based system, they must be adjusted to keep up with the evolu-
tion of the threat under consideration. However, by setting them on the known
ransomware samples of our dataset, our experiments show that HelDroid can
detect also never-seen-before samples. More details are in Sect. 5.2.
4.2 Encryption Detector Details
Using a static taint-tracking technique, we detect ﬁle encryption operations as
ﬂows from Environment.getExternalStorageDirectory() (1 source) to the
CipherOutputStream constructor, Cipher.doFinal methods, or its overloads
(8 sinks). Clearly, tracked ﬂows can involve other, intermediate function calls
(e.g., copy data from ﬁlesystem to memory, then pass the reference to the buﬀer
to an encryption function, and ﬁnally write on the ﬁlesystem).
An explanatory example taken from a real-world ransomware sample2 follows:
The underlined lines mark the tracked ﬂow. More sources and sinks can be
ﬂexibly added by simple conﬁguration changes, although our results show that
the aforementioned ones are enough for current families.
Listing 1.1. Flow source of an encryption operation
.class public final Lcom/free/xxx/player/d;
#...
.method public constructor (Landroid/content/Context;)V ...
# getExternalStorageDirectory is invoked to get the SD card root
invoke-static {},Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
move-result-object v0
invoke-virtual {v0}, Ljava/io/File;->toString()Ljava/lang/String;
move-result-object v0
new-instance v1, Ljava/io/File;
invoke-direct {v1, v0}, Ljava/io/File;->(Ljava/lang/String;)V
# This invocation saves all files with given extensions in a list
# and then calls the next method
invoke-direct {p0, v1}, Lcom/free/xxx/player/d;->a(Ljava/io/File;)V
return-void
.end method
.method public final a()V
# ...
# A new object for encryption is instantiated with key
# 12345678901234567890
new-instance v2, Lcom/free/xxx/player/a;
const-string v0, "12345678901234567890"
invoke-direct {v2, v0}, Lcom/free/xxx/player/a;->(Ljava/lang/String;)V ...
# If files were not encrypted, encrypt them now
const-string v3, "FILES_WERE_ENCRYPTED"
invoke-interface {v2, v3, v0}, Landroid/content/SharedPreferences;->getBoolean(Ljava/lang/String;Z)Z
move-result v2
if-nez v2, :cond_1
invoke-static {}, Landroid/os/Environment;->getExternalStorageState()Ljava/lang/String;
move-result-object v2
const-string v3, "mounted"
# ...
# Inside a loop, invoke the encryption routine a on file v0, and
# delete it afterward
invoke-virtual {v2, v0, v4}, Lcom/free/xxx/player/a;->a(Ljava/lang/String;Ljava/lang/String;)V
new-instance v4, Ljava/io/File;
invoke-direct {v4, v0}, Ljava/io/File;->(Ljava/lang/String;)V
invoke-virtual {v4}, Ljava/io/File;->delete()Z
# ...
.end method
.end class
2 MD5: c83242bfd0e098d9d03c381aee1b4788.
392
N. Andronio et al.
Listing 1.2. Flow sink of an encryption operation.
.class public final Lcom/free/xxx/player/a;
# ...
.method public final a(Ljava/lang/String;Ljava/lang/String;)V
.locals 6
# A CipherOutputStream is initialized and used to encrypt the file
# passed as argument, which derives from an invocation to
new-instance v0, Ljava/io/FileInputStream;
invoke-direct {v0, p1}, Ljava/io/FileInputStream;->(Ljava/lang/String;)V
new-instance v1, Ljava/io/FileOutputStream;
invoke-direct {v1, p2}, Ljava/io/FileOutputStream;->(Ljava/lang/String;)V
iget-object v2, p0, Lcom/free/xxx/player/a;->a:Ljavax/crypto/Cipher;
const/4 v3, 0x1
iget-object v4, p0, Lcom/free/xxx/player/a;->b:Ljavax/crypto/spec/SecretKeySpec;
iget-object v5, p0, Lcom/free/xxx/player/a;->c:Ljava/security/spec/AlgorithmParameterSpec;
invoke-virtual {v2, v3, v4, v5}, Ljavax/crypto/Cipher;>init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V
new-instance v2, Ljavax/crypto/CipherOutputStream;
iget-object v3, p0, Lcom/free/xxx/player/a;->a:Ljavax/crypto/Cipher;
invoke-direct {v2, v1, v3}, Ljavax/crypto/CipherOutputStream;->(Ljava/io/OutputStream;Ljavax/crypto/Cipher;)V
# ...
.end method
.end class
If any of these ﬂows are found, HelDroid marks the sample accordingly.
4.3 Locking Detector Details
As a proof of concept, we implement a detection heuristic for each of the three
most common screen-locking techniques found in Android ransomware.
– Require administration privileges and call DevicePolicyManager.
lockNow(), which forces the device to act as if the lock screen timeout expired.
– Immortal Activity. Fill the screen with an activity and inhibit naviga-
tion through back and home buttons by overriding the calls to onKeyUp and
onKeyDown. Optionally, the activity cover the software-implemented naviga-
tion buttons if the application declares the SYSTEM_ALERT_WINDOW permission.
– Immortal Dialog. Show an alert dialog that is impossible to close and set a
ﬂag in the window parameters.
Detecting whether an app calls the lockNow method is easy. We start from
searching for the speciﬁc permission bit (BIND_DEVICE_ADMIN) in the manifest.
If found, we parse the Smali assembler code of the application until we ﬁnd a
call to the lockNow method.
For the immortal activity technique we are interested in the handling of the
onKeyDown and onKeyUp methods, which are called when a key is pressed or
released. They accept as ﬁrst argument a parameter p1 containing the numeric
code of target key; their return value determines whether the event is considered
handled or not (i.e., whether to pass the same event to other underlying View
components). An example3 follows.
3 MD5 b31ce7e8e63fb9eb78b8ac934ad5a2ec.
HELDROID: Dissecting and Detecting Mobile Ransomware
393
Listing 1.3. Locking operation example.
.method public onKeyDown(ILandroid/view/KeyEvent;)Z
.locals 1
# p1 = integer with the key code associated to the pressed key.
const/4 v0, 0x4 # 4 = back button
if-ne p1, v0, :cond_0
iget-object v0, p0, Lcom/android/x5a807058/ZActivity;->q:Lcom/android/zics/ZModuleInterface;
if-nez v0, :cond_0
iget-object v0, p0, Lcom/android/x5a807058/ZActivity;->a:Lcom/android/x5a807058/ae;
# we track function calls as well invoke-virtual {v0},
Lcom/android/x5a807058/ae;->c()Z :cond_0
const/4 v0, 0x1 # True = event handled -> do not forward
return v0
.end method
We ﬁrst locate the onKeyDown and onKeyUp methods and parse their Smali
code. Then we proceed by performing a lightweight Smali emulation. Essentially,
we parse each statement and “execute” it according to its semantic. The goal is
to verify the existence of an execution path in which the return value is true.
We examine those if statements that compare p1 with constant integer values.
Our emulation technique tracks function calls as well.
Similarly, we detect immortal dialogs by checking if FLAG_SHOW_WHEN_LOCKED
is set when calling Landroid/view/Window;->setFlags in an any AlertDialog
method, usually in the constructor, and that the same dialog is marked as
uncancelable via setCancelable(false).
The immortal activity and dialog techniques can be implemented with a Win-
dow instead of an Activity or Dialog object, but we consider this extension
exercise for the reader.
5 Implementation and Technical Details
This section describes the relevant technical details of HelDroid.