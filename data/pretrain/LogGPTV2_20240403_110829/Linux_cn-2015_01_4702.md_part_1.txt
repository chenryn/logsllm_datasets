---
author: titanous
category: 观点
comments_data:
- date: '2015-01-19 18:33:01'
  message: '@SecPulse @DockerOne @Docker中文社区 @FreeBuf黑客与极客'
  postip: 223.104.11.227
  username: 微博评论
- date: '2015-01-19 18:33:01'
  message: '@有道笔记'
  postip: 223.104.11.227
  username: 微博评论
- date: '2015-01-21 10:03:01'
  message: '@我的印象笔记'
  postip: 123.125.71.110
  username: 微博评论
count:
  commentnum: 3
  favtimes: 3
  likes: 0
  sharetimes: 5
  viewnum: 17654
date: '2015-01-19 15:36:00'
editorchoice: false
excerpt: '最近使用Docker下载官方容器镜像的时候，我发现这样一句话： ubuntu:14.04: The image you are pulling
  has been verified （您所拉取的镜像已经经过验证）  起初我以为这条信息引自Docker大力推广的镜像签名系统，因此也就没有继续跟进。后来，研究加密摘要系统的时候Docker用这套系统来对镜像进行安全加固我才有机会更深入的发现，逻辑上整个与镜像安全相关的部分具有一系列系统性问题。  Docker所报告的，一个已下载的镜像经过验证，它基于的仅仅是一个标记清单（signed
  manifest)，而Docker却从未据此清单对镜像的校验和进行验证。一'
fromurl: https://titanous.com/posts/docker-insecurity
id: 4702
islctt: true
largepic: /data/attachment/album/201501/19/104004n7eort68zxjslt72.png
permalink: /article-4702-1.html
pic: /data/attachment/album/201501/19/104004n7eort68zxjslt72.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: '最近使用Docker下载官方容器镜像的时候，我发现这样一句话： ubuntu:14.04: The image you are pulling
  has been verified （您所拉取的镜像已经经过验证）  起初我以为这条信息引自Docker大力推广的镜像签名系统，因此也就没有继续跟进。后来，研究加密摘要系统的时候Docker用这套系统来对镜像进行安全加固我才有机会更深入的发现，逻辑上整个与镜像安全相关的部分具有一系列系统性问题。  Docker所报告的，一个已下载的镜像经过验证，它基于的仅仅是一个标记清单（signed
  manifest)，而Docker却从未据此清单对镜像的校验和进行验证。一'
tags:
- Docker
- 镜像
- 安全
thumb: false
title: Docker 的镜像并不安全！
titlepic: false
translator: tinyeyeser
updated: '2015-01-19 15:36:00'
---
最近使用Docker下载“官方”容器镜像的时候，我发现这样一句话：
```
ubuntu:14.04: The image you are pulling has been verified （您所拉取的镜像已经经过验证）
```
起初我以为这条信息引自Docker[大力推广](https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/)的镜像签名系统，因此也就没有继续跟进。后来，研究加密摘要系统的时候——Docker用这套系统来对镜像进行安全加固——我才有机会更深入的发现，逻辑上整个与镜像安全相关的部分具有一系列系统性问题。
![](/data/attachment/album/201501/19/104004n7eort68zxjslt72.png)
Docker所报告的，一个已下载的镜像经过“验证”，它基于的仅仅是一个标记清单（signed manifest)，而Docker却从未据此清单对镜像的校验和进行验证。一名攻击者以此可以提供任意所谓具有标记清单的镜像。一系列严重漏洞的大门就此敞开。
镜像经由HTTPS服务器下载后，通过一个未加密的管道流进入Docker守护进程：
```
[decompress] -> [tarsum] -> [unpack]
```
这条管道的性能没有问题，但是却完全没有经过加密。不可信的输入在签名验证之前是不应当进入管道的。不幸的是，Docker在上面处理镜像的三个步骤中，都没有对校验和进行验证。
然而，不论Docker如何[声明](https://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/)，实际上镜像的校验和（Checksum）从未经过校验。下面是Docker与镜像校验和的验证相关的代码[片段](https://titanous.com/posts/docker-insecurity#fn:0)，即使我提交了校验和不匹配的镜像，都无法触发警告信息。
```
if img.Checksum != "" && img.Checksum != checksum {
  log.Warnf("image layer checksum mismatch: computed %q,
             expected %q", checksum, img.Checksum)
}
```
### 不安全的处理管道
**解压缩**
Docker支持三种压缩算法：gzip、bzip2和xz。前两种使用Go的标准库实现，是[内存安全（memory-safe)](https://en.wikipedia.org/wiki/Memory_safety)的，因此这里我预计的攻击类型应该是拒绝服务类的攻击，包括CPU和内存使用上的当机或过载等等。
第三种压缩算法，xz，比较有意思。因为没有现成的Go实现，Docker 通过[执行(exec)](https://github.com/docker/docker/blob/0874f9ab77a7957633cd835241a76ee4406196d8/pkg/archive/archive.go#L91-L95)xz二进制命令来实现解压缩。
xz二进制程序来自于[XZ Utils](http://tukaani.org/xz/)项目，由[大概](https://titanous.com/posts/docker-insecurity#fn:1)2万行C代码生成而来。而C语言不是一门内存安全的语言。这意味着C程序的恶意输入，在这里也就是Docker镜像的XZ Utils解包程序，潜在地存在可能会执行任意代码的风险。
Docker以root权限*运行* xz 命令，更加恶化了这一潜在威胁。这意味着如果在xz中出现了一个漏洞，对docker pull命令的调用就会导致用户整个系统的完全沦陷。