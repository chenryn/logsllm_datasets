action sequence then U (seq, vn) (resp. S(seq, vn)).
The second point says that any action speciﬁed (by the ap-
provability graph) from vi and which is a predecessor to vn
must be traversable. Hence, all paths to vn must be possible.
Note that s-approvable says there is some sequence of user
actions to reach state vn. It does not say that any sequence
can reach approval. In Figure 6 for example, consider the
user-role assignment r0 has members u0, u1; r1 has members
u1, u2; and r2 has members u0, u2. Then [v0, u0, v1, u1, v2]
is s-approvable to v3 since [v0, u0, v1, u1, v2, u2, v3] but

v0
v1
v2
v3
r0
r1
r2
Figure 6: An approvability graph which is s-
approvable but not u-approvable (depending on role
assignment)
[v0, u0, v1, u2, v2] is not s-approvable to v3. Note that se-
quences which are only s-approvable may lock speciﬁc indi-
viduals into performing future actions, even in the absence
of same user constraints, and hence the completion of the
task may depend upon the availability of speciﬁc users.
In contrast, u-approvability says that any user u which is the
member of a role and which does not have a SoD conﬂict
with a previous action can perform that action while en-
suring that any reachable action can be performed. Hence,
u-approvability looks only at past actions yet also ensures
that the workﬂow does not get stuck.
(We shall develop
suitable restrictions both on the approvability graph and on
the cardinality of each role associated with an edge to show
that u-approvability holds.)
The above deals with particular ﬁnal nodes; the next deﬁ-
nition deﬁnes system-wide properties.
Definition 3. The system is s-approvable (resp. sys-
tem is u-approvable) if for all v ∈ I and v ∈ F it holds
that S([v], v) (resp. U ([v], v)).
4.2 Bounding the paths in the approvability
graph
Note that although the number of states and successors is
bounded, the length of paths is not bounded since there can
be cycles. We next analyze cycles to bound the number of
edges that need to be considered in a user-action assignment.
Definition 4. An edge e in an approval graph consumes
a user if there exists e reachable from e in the approvability
graph and there is a diﬀerent user constraint between e and
e.
If an edge consumes a user, then the ability to complete
the approval sequence depends on more than just the role
being nonempty. Note that in SSoD users are not consumed,
and hence the role must only be non-empty for the approval
sequence to complete. Of course, more users can be hired to
complete a DSoD task but it is neither practical nor secure
to add new users because your access control system is stuck!
Definition 5. An edge e in the approval graph cycli-
cally consumes a user if e is part of a cycle, e consumes
a user, and there is not a self-same user constraint on e.
Without the self-same user constraint, successive iterations
of an action (in a loop) may be performed by diﬀerent users.
Hence, these users become unavailable for any future action
which has a diﬀerent user constraint with e. This limits
the organization’s ﬂexibility to assign users to actions, and
hence delays tasks until a speciﬁc individual is available.
Proposition 6. If there exists an edge in an approvabil-
ity graph which cyclically consumes a user, then the number
of users necessary for u-approvability may be unbounded.
Figure 7: Unbounded number of users needed
Proof. Consider the loop in the Figure 7. Assume that
there are n users in a role: By traversing the loop n times
and using a diﬀerent user on each iteration of the bottom
edge of the loop it will be impossible to reach the ﬁnal
node.
in the sequence (since cycles would be superﬂuous).
It is
suﬃcient to consider all such paths where e0’s from node
is an initial node and en’s to node is a ﬁnal node, since
other paths just repeat edges which by the conditions of the
theorem have no eﬀect.
For each such sequence s, compute the minimum cardinal-
ity ns,r of each role r for which unscheduled approvability
holds using its deﬁnition. We then compute for each r the
maximum over all s of ns,r. (Note that ns,r ≤ N ).
To obtain the more general case which allows diﬀerent user
constraints between diﬀerent roles, it is suﬃcient to merge
together the roles and then apply the resulting cardinality
constraints to each of the roles. The algorithm for these
cardinality constraints is given in the next theorem. The
diﬀerence between the next theorem and Theorem 8 is that
this one allows actions labeled with diﬀerent roles to have
diﬀerent user constraints between them and in turn gives up
minimality.
Note that the graph in Figure 7 is s-approvable, since the
same user can be used for the action corresponding to a
given action speciﬁer.
Theorem 9. If an approval graph does not have any edges
which cyclically consume a user, there is an algorithm which
can determine the number of users in each role and which
guarantees u-approvability, if u-approvability is possible.
Proposition 7. If no edge in the approvability graph cycli-
cally consumes a user, then it suﬃces to consider sequences
of actions in which duplicate actions have been removed to
determine whether it is u-approvable or s-approvable.
Proof. We note that each edge in a successive iteration
either has no SoD constraint with successive edges or is re-
quired to be performed by the same user each time. Hence,
multiple iterations of the loop do not change the assignment
problem for later actions.
The previous lemma gives suﬃcient conditions to ensure
that multiple traversals of an edge are the same as a sin-
gle traversal with respect to approvability. The next theo-
rem gives minimum role cardinality to ensure tasks do not
get stuck for approvability graphs in which constraints are
always between edges labeled with the same role.
Theorem 8. If an approval graph does not have any edges
which cyclically consume a user, and all of the diﬀerent user
constraints are between edges labeled with the same role,
there is an algorithm which can determine the minimum
number of users in each role and which guarantees
u-approvability, if u-approvability is possible.
Proof. Let N be the number of edges in the approvabil-
ity graph. Consider a sequence of edges [e0, e1, . . . , en] where
each edge in the approval graph appears at most once. A
sequence is used to list the edges in an approval sequence in
the order they were ﬁrst visited. Then if there is a path in
the approval graph which traverses the edges in sequence,
then that path can have at most N edges between each edge
Proof. We once again consider the sequences [e0, e1, . . . , en]
of Theorem 8 and show a bound on role size so they are u-
approvable. First we merge together all roles which have a
diﬀerent user constraint between them (recall there are no
same user constraints possible between diﬀerent roles) and
compute by Theorem 8 the cardinality of each role. The
merged roles conceptually constitute a new role.
If after a set of roles {r0, r1, . . . rn} have been merged, the
new composite role requires user cardinality c then it suﬃces
if each one of the roles ri, i = 0, 1, . . . n, has cardinality c.
The set of diﬀerent user constraints on each role can be
satisﬁed since each role has a subset of the constraints as
the merged role but the same number of users.
For example, to apply Theorem 9 to the example in Fig-
ure 6, roles r0, r1, and r2 are merged; the result is that
three users per role are suﬃcient to ensure u-approvability.
If each role contains the same users, three users are neces-
sary. In general, however, tighter bounds on role size can
be obtained if more is known about the relationship of the
roles (for example, if a user in role r1 can never have been a
user in role r2), but that is beyond the scope of this paper.
In the absence of loops, any approvability graph which is
u-approvable is also s-approvable, since the same number of
users per role who enable u-approvability will certainly en-
able s-approvability. In the presence of loops, s-approvability
is possible where u-approvability is not: For example, the
approvability graph in Figure 7 is s-approvable by assigning
the same user each time to the edge which cyclically con-
sumes a user. Thus, by adding a self-same user constraint
to edges which cyclically consume a user, any s-approvable
graph can be converted into a u-approvable graph.

We note that by removing duplicate edges in a path, each
action speciﬁer is eﬀectively traversed at most once, and
we can extend BFA to always ﬁnd an s-approvable schedule
under reasonable conditions.
4.3 Conﬂict graph
We say that an approvability graph is well formed if given
a suﬃcient number of users per role it will not get stuck.
In the section, the conﬂict graph is introduced and used to
(1) determine whether an approvability graph is well formed
and (2) provide a polynomial-time algorithm to determine
a bound on the number of users needed for u-approvability.
The conﬂict graph is an undirected graph whose nodes
correspond to edges in the approvability graph. The con-
ﬂict graph can be constructed only when no edge cyclically
consumes a user. Further we assume, without loss of gener-
ality, that there does not exist two edges in the approvability
graph with a same user constraint between then unless both
edges can be in a path from an initial node.
The conﬂict graph is constructed as follows:
initialization of the graph
the approvability graph and
• nodes in the conﬂict graph correspond to edges in
• if two nodes n and n in the conﬂict graph corre-
spond to edges in the approvability graph with
a diﬀerent user constraint between them, then
there is an edge between n and n.
collapse the graph by repeating the following step until
there are no more nodes to be merged: If there are two
edges in the approvability graph which have a same
user constraint between them then merge the two cor-
responding nodes in the conﬂict graph.
For example, Figure 8 is the conﬂict graph corresponding to
the approvability graph in Figure 6.
v0, v1
v1, v2
v2, v3
Figure 8: Conﬂict graph for Fig. 6. (The nodes are
labeled with the edges of Fig. 6 from which they are
derived.)
Theorem 10. The conﬂict graph has self loops iﬀ the
approvability graph has a sequence of edges [e0, e1, . . . en]
where there is a same user constraint between ei and ei+1
for 0 ≤ i < n and a diﬀerent user constraint between en and
e0.
Proof. ⇐ The approvability graph cannot have diﬀerent
user constraints between the same action speciﬁer, therefore
prior to merging nodes in the conﬂict graph there are no self
loops in the conﬂict graph. Hence, to form a loop a sequence
of nodes must be merged until one contains a diﬀerent user
constraint to another previously merged action. Let the
diﬀerent user constraint be between en and e0. Then there
must be a path of same user constraints in the merged node
from e0 to en, otherwise e0 would not have been merged
with en.
⇒ Just merge the nodes in the order e0, e1, . . . , en and there
will be a self loop.
A self-cycle in the conﬂict graph means that the constraints
can prevent some paths from being traversed. By eliminat-
ing conﬂict graph self cycles and approvability graph edges
which cyclically consume a user, every traversal in the ap-
provability graph is an approvability sequence.
Theorem 11. If the number of users at each node in the
conﬂict graph is greater than or equal to the degree plus one
of the node and there are no self loops then unscheduled ap-
provability holds.
Proof. Assign one user to each node of the conﬂict graph
so that any two adjacent nodes are assigned a diﬀerent user.
This can be done in a single pass over the nodes, as there is
always one more user than adjacent nodes, we simply select
a user who has not been assigned to any of its neighbors.
Sufﬁcient conditions for unscheduled approvability of
a system
We note that the suﬃcient conditions are not necessary.
Consider a conﬂict graph where n0 conﬂicts with n1 and
n1 conﬂicts with n2. The degree of the graph is 2, and thus
Theorem 11 says that 3 users will be suﬃcient, even though
2 users suﬃce.
4.4 DSoD is NP-Complete
We next show that whether a simple SoD task can com-
plete is inherently NP-Complete. More exactly, given a con-
ﬂict graph and the users that can assume a role, determine
whether there is an assignment of users to actions that sat-
isﬁes both the roles and the conﬂicts. We shall call this later
problem SDSoD, for Simple DSoD. The proof is by reducing
3SAT to SDSoD.
Our goal is to show that DSoD even in its simplest form
is NP-Complete. Hence, the SDSoD problem will rely on
a ﬁxed number of actions all of which need to be executed
(that is, there are neither alternative outcomes nor loops).
The order that actions are performed is immaterial, as there
are no loops. Moreover, we shall consider only diﬀerent user
constraints between actions. Clearly, if this most simple
form of SDSoD is NP-Complete, then any more complex
formulation will of necessity need to be able to represent
this simpler form and hence be NP-Hard.
We next review 3SAT and then show its correspondence to
SDSoD.
3SAT:
Consider 3SAT, which is NP-Complete. Given a boolean
expression of the form:
(v0,0∨v0,1∨v0,2)∧(v1,0∨v1,1∨v1,2)∧···∧(vC,0∨vC,1∨vC,2)

where each vi,j is either xk or ¬xk for some 0 ≤ k ≤ N
and where the clauses are numbered 0 to C. The problem
is whether there some boolean assignment to x0, x1, . . . , xN
such that the expression is true. For example, consider the
below boolean expression:
(x0 ∨ ¬x2 ∨ x3) ∧ (¬x1 ∨ x2 ∨ ¬x3) ∧ (x0 ∨ ¬x0 ∨ x1)
(1)