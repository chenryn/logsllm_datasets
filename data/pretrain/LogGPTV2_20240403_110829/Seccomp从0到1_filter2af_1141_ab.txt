为了保证安全性，需要将PR_SET_NO_NEW_PRIVSW位设置位1。这个操作能保证seccomp对所有用户都能起作用，并且会使子进程即execve后的进程依然受控，意思就是即使执行execve这个系统调用替换了整个binary权限不会变化，而且正如其名它设置以后就不能再改了，即使可以调用ptctl也不能再把它禁用掉。
    prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&prog);
PR_SET_SECCOMP指明我们正在为进程设置seccomp；  
SECCOMP_MODE_FILTER将seccomp的过滤规则指向&prog；  
&prog就是我们定义的过滤规则
###  实例
代码：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main() {
        struct sock_filter filter[] = {
        BPF_STMT(BPF_LD+BPF_W+BPF_ABS,4),
        BPF_JUMP(BPF_JMP+BPF_JEQ,0xc000003e,0,2),
        BPF_STMT(BPF_LD+BPF_W+BPF_ABS,0),
        BPF_JUMP(BPF_JMP+BPF_JEQ,59,0,1),
        BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_KILL),
        BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_ALLOW),
        };
        struct sock_fprog prog = {
        .len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),
        .filter = filter,
        };
        prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);
        prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&prog);
        printf("start!n");
        system("id");
        return 0;
    }
添加多条规则建议使用[seccomp-bpf.h](https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h)库,简单方便
例如
    #define _GNU_SOURCE 1
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "seccomp-bpf.h"
    static int install_syscall_filter(void)
    {
        struct sock_filter filter[] = {
            /* Validate architecture. */
            VALIDATE_ARCHITECTURE,
            /* Grab the system call number. */
            EXAMINE_SYSCALL,
            /* List allowed syscalls. */
            ALLOW_SYSCALL(rt_sigreturn),
    #ifdef __NR_sigreturn
            ALLOW_SYSCALL(sigreturn),
    #endif
            ALLOW_SYSCALL(exit_group),
            ALLOW_SYSCALL(exit),
            ALLOW_SYSCALL(read),
            ALLOW_SYSCALL(write),
            KILL_PROCESS,
        };
        struct sock_fprog prog = {
            .len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),
            .filter = filter,
        };
        if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
            perror("prctl(NO_NEW_PRIVS)");
            goto failed;
        }
        if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog)) {
            perror("prctl(SECCOMP)");
            goto failed;
        }
        return 0;
    failed:
        if (errno == EINVAL)
            fprintf(stderr, "SECCOMP_FILTER is not available. :(n");
        return 1;
    }
    int main()
    {
        if (install_syscall_filter())
            return 1;
        return 0;
    }
## seccomp库函数
seccomp库可以提供一些函数实现prctl类似的效果，库中封装了一些函数，可以不用了解BPF规则而实现过滤。
需要安装一些库文件
    sudo apt install libseccomp-dev libseccomp2 seccomp
实例
    #include 
    #include 
    #include 
    int main(void){
        scmp_filter_ctx ctx;
        ctx = seccomp_init(SCMP_ACT_ALLOW);
        seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0);
        seccomp_load(ctx);
        char * str = "/bin/sh";
        write(1,"hello worldn",12);
        syscall(59,str,NULL,NULL);//execve
        return 0;
    }
scmp_filter_ctx是过滤器的结构体
seccomp_init对结构体进行初始化，若参数为SCMP_ACT_ALLOW，则过滤为黑名单模式；若为SCMP_ACT_KILL，则为白名单模式，即没有匹配到规则的系统调用都会杀死进程，默认不允许所有的syscall。
seccomp_rule_add用来添加一条规则，arg_cnt为0,表示我们直接限制execve,不管参数是什么，如果arg_cnt不为0,那arg_cnt表示后面限制的参数的个数,也就是只有调用execve,且参数满足要求时,才会拦截
seccomp_load是应用过滤器,如果不调用seccomp_load则上面所有的过滤都不会生效
注意：编译的时候要在最后面加 -lseccomp
## seccomp-tools
项目地址：
可以用来查看过滤规则
    $ seccomp-tools dump ./a.out 
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
     0002: 0x20 0x00 0x00 0x00000000  A = sys_number
     0003: 0x35 0x00 0x01 0x40000000  if (A read->write的方式读flag
做题这部分网上的例题和参考资料很多，我就不说了
我讲一下如何出seccomp类型的题：
1.栈类型的题使用ptrcl或seccomp库都行;
2.堆类型需要用ptrcl函数，因为seccomp库会留下堆的使用痕迹，如下图所示;
我查看seccomp.c的源码，发现了内核空间使用的kmalloc、kfree等函数
3.出堆题时将seccomp库的规则放到最后
[GKCTF2020]Domo 这道题的师傅是这样做的，但是会出现非预期解
## 总结
seccomp的pwn题近两年算是一个热点，搞懂这种机制运行原理很重要，希望能对大家有帮助。
## 参考资料