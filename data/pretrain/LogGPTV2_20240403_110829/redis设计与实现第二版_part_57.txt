1）
(integer) 1378781447
(integer)
"msg"
"10086"
"5"
"slowlog-max-len"
"CONFIG"
"number"
"SET"
"Redis"
"database"
"SET"
11
1378781425
world"
6
1378781436
10
1378781439
3
4
---
## Page 385
图 23-2 展示了服务器状态中和慢查询功能有关的属性：
图 23-1展示的就是该日志所对应的slowlogEntry结构。
slowlogEntry结构，每个 slowlogEntry结构代表一条慢查询日志：
性的值增一，以此类推。
slowlog_entry_id 的值 1 就会成为第二条慢查询日志的 ID，然后服务器再次对这个属
日志的 ID，而之后服务器会对这个属性的值增一；当服务器再创建新的慢查询日志的时候，
slowlog 链表保存了服务器中的所有慢查询日志，链表中的每个节点都保存了一个
举个例子，对于以下慢查询日志来说：
} slowlogEntry;
typedef struct slowlogEntry I
例如，
(integer)
(integer)
2）
C
(integer)
int argc;
11命令与命令参数的数量
robj **argv;
1/命令与命令参数
longlongduration;
/！执行命令消耗的时间，以微秒为单位
time_t time;
/1命令执行时的时间，格式为UNIX时间戳
long long id;
！/唯一标识符
"10086"
"number"
"SET"
slowlogEntry
1378781439
duration
10
1378781439
argc
Ab1e
time
10
图 23-1slowlogEntry结构示例
StringobjectStringobject
 argv[0]
"SET"
argv[1]
Stringobject
argv[2]
"10086"
第23章慢壹询日志◆381
---
## Page 386
382
日志的 SLOWLOG GET 命令：
23.2
注意
●第四部分独立功能的实现
弄清楚了服务器状态的slowlog 链表的作用之后，我们可以用以下伪代码来定义查看
def SLOWLOG_GET(number=None) :
因为版面空间不足，所以图23-2展示的各个slowlogEntry结构都省略了argv 数组。
 slowlog-max-len属性记录了服务器配置 slowlog-max-len 选项的值 5，表
口slowlog 链表包含了 id为 5至1 的慢查询日志，最新的 5号日志排在链表的表头
口 slowlog_entry_id 的值为 6，表示服务器下条慢查询日志的 id 值将为 6。
示服务器最多储存五条慢查询日志。
选项的值0，表示任何执行时间超过0微秒的命令都会被慢查询日志记录。
式来添加新日志的。
慢查询日志的阅览和删除
而最旧的1号日志排在链表的表尾，这表明slowlog 链表是使用插人到表头的方
for log in redisServer.slowlog:
if number is None:
遍历服务器中的慢查询日志
ueua 1aMoTs boT 6orMo1s
else:
if number  EXPIRE msg 10086
函数中的大部分代码我们已经介绍过了，唯一需要说明的是slowlogCreateEntry
while
1！如果日志数量过多，那么进行删除
H
/1如果执行时间超过服务器设置的上限，那么将命令添加到慢查询日志
slowlog_log_slower_than
/1新日志添加到链表表头
slowlog_max_len
slowlog_entry_id
(listLength(server.slowlog) > server.slowlog_max_len)
redisServer
slowlog
图 23-3EXPIRE命令执行之后的服务器状态
slowlogEntry
1378800320
duration
argc
argv
time
14
id
1378781425
slowlogEntry
duration
argc
argv
time
11
ia
---
## Page 389
23.4
口新的慢查询日志会被添加到 slowlog 链表的表头，如果日志的数量超过 slowlog-
口 slowlog 链表的长度就是服务器所保存慢查询日志的数量。
口打印和删除慢查询日志可以通过遍历slowlog链表来完成。
口 Redis 服务器将所有的慢查询日志保存在服务器状态的 slowlog 链表中，每个链表
口 Redis 的慢查询日志功能用于记录执行时间超过指定时长的命令。
max-len 选项的值，那么多出来的日志会被删除。
日志。
节点都包含一个 slowlogEntry结构，每个 slowlogEntry 结构代表一条慢查询
重点回顾
siowlog_log_slower_than
slowlog_max_len
redisServer
 slowlog
图23-4删除id为1的慢查询日志之后的服务器状态
5
slowlogEntry
1378800320
duration
argc
argv
time
m
14.
id
·
slowlogEntry
duration
argc
argv
18
第23章慢查询日志·385
3
---
## Page 390
还会将关于这条命令请求的信息发送给所有监视器，如图 24-1所示。
务器当前处理的命令请求的相关信息：
每当一个客户端向服务器发送一条命令请求时，服务器除了会处理这条命令请求之外，
redis> MONITOR
通过执行MONITOR命令，客户端可以将自己变为一个监视器，实时地接收并打印出服
1378822258.690131 [0 127.0.0.1:56604] "DBSIZE"
1378822257.329412 [0 127.0.0.1:56604]
1378822154.117160
1378822109.036925
1378822105.089572
1378822099.421623 [0 127.0.0.1:56604] "PING"
吴
78822140.
监视器
第24章
.649496
客户端
To
[0 127.0.0.1:56604]
127.0.0.
127.0.0.1:56604]
127.0.0,1:56604]
图24-1命令的接收和信息的发送
发送命令请求
.1:56604
服务器
"KEYS"
"SET" "number"
"SET#
发送命令信息
发送命令信息
发送命令信息
"msg" "hello world"
"fruits"
监视器
监视器2
监视器
"123"
---
## Page 391
创建信息，然后将信息发送给所有监视器：
这个函数将被处理的命令请求的相关信息发送给各个监视器。
24.2
为图 24-3 所示的状态。
那么在服务器执行客户端c10086发送的MONITOR命令之后，monitors 链表将被更新
REDIS_MONITOR 标志会被打开，并且这个客户端本身会被添加到 monitors 链表的表尾。
以下伪代码来实现：
24.1
以下是replicationFeedMonitors 函数的伪代码定义，函数首先根据传人的参数
假设客户端c10086 发送MONIrOR 命令之前，monitors 链表的状态如图 24-2所示，
服务器在每次处理命令请求之前，都会调用replicationFeedMonitors 函数，由
举个例子，如果客户端c10086向服务器发送MONITOR命令，那么这个客户端的
发送 MONITOR命令可以让一个普通客户端变为一个监视器，该命令的实现原理可以用
 def replicationFeedMonitors (client, monitors, dbid, argv, argc):
def MONITOR() :
向监视器发送命令信息
#根据执行命令的客户端、当前数据库的号码、命令参数、命令参数个数等参数
send_reply("ok")
鲁向客户端返回 OK 
server.monitors.append (client)
# 将客户端添加到服务器状态的 monitors 链表的末尾
#打开客户端的监视器标志
成为监视器
图 24-3客户端 c10086 执行 MONITOR 命令之后的 monitors 链表
图24-2客户端c10086执行MONITOR 命令之前的 monitors 链表
redisServer
monitors
redisServer
 monitors
*+*
c128c256c512c10086
c128c256 c512
第24章蓝视器387
---
## Page 392
388◆第四部分独立功能的实现
24.3
给c128、c256、c512和c10086四个监视器，如图24-4所示。
以下信息：
号为56604的客户端发送的命令请求，对0号数据库执行命令KEYS*，那么服务器将创建
口客户端可以通过执行MONITOR命令，将客户端转换成监视器，接收并打印服务器
如果服务器 monitors 链表的当前状态如图 24-3所示，那么服务器会分别将信息发送
口每次处理命令请求时，服务器都会遍历monitors 链表，将相关信息发送给监视器。
口服务器将所有监视器都记录在monitors 链表中。
口
举个例子，假设服务器在时间1378822257.329412，根据IP为127.0.0.1、端口
打开。
处理的每个命令请求的相关信息。
重点回顾
for monitor in monitors:
#遍历所有监视器
msg = create_message(client, dbid, argv, argc)
#创建要发送给各个监视器的信息
send_message (monitor, msg)
#将信息发送给监视器
图 24-4服务器将信息发送给各个监视器
服务器
[0 127.0.0.1:56604]
1378822257.329412
1378822257.329412
[0 127.0.0.1:56604]
1378822257.329412
1378822257.329412
c10086
c512
c256
c128
---