enable fewer transitions than the original one. We observe
that many protocols deﬁne reply transitions where a process
receives one or more messages and sends messages only to
the senders of these messages (e.g., acknowledgement).
For example, consider the READ transition of Paxos
written in MP (Figure 6, guard is not depicted). Before a new
value can be proposed in Paxos, the proposer process asks
all acceptors about the values they have previously seen by
sending a READ message to every acceptor. If an acceptor
receives such a message, it executes a reply-transition to
send a READ REPL message to this proposer. Formally,
we have the following.
Deﬁnition 4: Given an MP protocol and a process i,
is a reply transition if for all s, s′ ∈ S and
implies that
ti ∈ Ti
for all subsets X of messages: s
{j | s(ci,j ) ⊂ s′(ci,j)} = senders(X).
ti(X)
−−−→ s′
We call the quorum-split of reply-transitions reply-split.
The additional beneﬁt of reply-split is that the split transition
tk can only enable transitions executed by processes in Qk.
For example, the reply-split of READ for proposer 1 can
only enable transitions of this proposer.
Implementation. For example, it is possible to automat-
ically detect that a transition t is a single-message reply-
transition if the recipient argument of any send operation
appearing in t is message.sender, where message is
the message consumed by t and message.sender is the
sender of this message (Figure 6).
IV. THE MP-BASSET MODEL CHECKER
We implemented a tool called MP-Basset to model check
protocol-level speciﬁcations written in MP. The architecture
of MP-Basset is illustrated in Figure 7. The intuition is that
the inclusion of a box denotes that it is “subsumed” by
the outer boxes, e.g., JavaPathﬁnder (JPF) runs within the
Java Virtual Machine (JVM). MP-Basset is built upon Basset
[23], a model checker that supports a subset of ActorFoundry
[19].4 Therefore, protocols using only single-message tran-
sitions (the common subset of MP and ActorFoundry) are
supported by both MP-Basset and Basset.
4Basset also supports a subset of Scala Actors, an actor programming
language within Scala [25].
7
Figure 7. MP-Basset architecture illustration.
While Basset supports a wide range of DPOR algorithms,
MP-Basset implements a new SPOR algorithm called MP-
LPOR [9]. The novelty of MP-LPOR is two-fold: (1) it uses
pre-computation to decrease the time overhead of SPOR
and (2) it speciﬁes independent transitions in the message-
passing model. Despite these special characteristics, MP-
LPOR is essentially an SPOR algorithm as discussed in
Section III-A. Therefore, we expect that transition reﬁne-
ment can improve the reduction achieved by MP-LPOR.
In the following sections, we present the architecture
of MP-Basset and key design issues. The complete source
code and installation instructions of MP-Basset are available
online [43].
A. Leveraging JPF & Basset
MP-Basset extends Basset, which runs as a Java applica-
tion within the JPF model checker [39]. While JPF is written
in Java itself and is executed by the JVM, the execution of
target Java programs is “modeled” within JPF’s model layer.
We call this layer JPF-VM to refer to its functional similarity
with the host JVM. Basset is an ordinary Java program that
runs within the JPF-VM. JPF deﬁnes a gateway called Model
Java Interface (JPF-MJI) between the modeled program
and the core of JPF (JPF-Core). JPF-Core implements the
search (model checking) functionalities of JPF such as the
computation of concurrently enabled transitions in each
state. By default, JPF assumes a ﬁne-grained interleaving
of Java threads. In order to prevent JPF from exploring un-
necessary interleavings, Basset uses JPF-MJI (a) to impose
the concurrency of the message-passing computation model,
e.g., the execution of a transition is an atomic event, and
(b) to implement different DPOR algorithms. In Basset, the
model checking of an actor program written in ActorFoundry
starts with creating the processes of the input actor program
and sending an initial message. Then, JPF explores the state
space of the program corresponding to interleavings deﬁned
by (a) and (b).
MP-Basset utilizes Basset’s core architecture and imple-
ments quorum transitions by extending Basset’s concept of
“enabled message” into “enabled set of messages”. More
precisely, set X of messages in the current state s is
“enabled” if there is a transition t and a state s′ such that
t(X)
−−−→ s′. Note that computing these sets is time-expensive;
s
in worst case they compose the powerset of all pending
messages, which is an exponential overhead compared to
the single-message case. Therefore, using quorum transitions
can only reduce veriﬁcation time if the space-reduction can
compensate for the increased time overhead.
Example. Consider a state s where some process has
three pending messages m1, m2 and m3 in its input buffers.
In order to ﬁnd the enabled sets of messages, MP-Basset
generates every set X in the powerset of {m1, m2, m3} to
check if X is enabled for some transition t, i.e., the guard gt
is true for X in s. These are 23 sets compared to only three
messages that need to be considered in a model of single-
message transitions. Intuitively, this is the price we pay for
the memory gain with quorum transitions as discussed in
Section II-C.
B. Efﬁcient Design of MP-Basset
We observe the following issues that are important with
respect to the design of MP-Basset:
• Executing code within MP-Basset. Due to the indirec-
tion that MP-Basset runs in JPF-VM, any piece of
code executed in MP-Basset is slower than in native
Java. Fortunately, most message-passing protocols de-
ﬁne simple code. However, other computation-intensive
functionality such as stubborn set computation can be
ineffective if executed within MP-Basset.
• State size. The larger the state of the modeled program
the less the throughput of JPF, i.e., number of visited
states per time unit. Reasons for this include that
the time for hashing, storing, and state comparison
increases with the size of the state.
• MJI overhead. Communication through JPF-MJI is
expensive and tedious because JPF-MJI calls are imple-
mented via Java methods that can only pass primitive
type parameters. Therefore, the conversion (serializa-
tion and de-serialization) of complex types is required,
which comes at the price of increased invocation time
and additional code.
These issues necessitate tuning of how and where MP-
Basset is implemented in the JPF architecture. It turned out
to be efﬁcient to compute enabled message sets entirely
within MP-Basset (without JPF-MJI calls). However, the
efﬁcient design of MP-LPOR was more elaborate. It
is
possible for MP-LPOR to compute independent transitions
before model checking as MP-LPOR uses a notion of
independency that is unconditional, i.e., it is not a function
of the system state. This information is queried (and not
re-computed) repeatedly during the search. We perform pre-
computation outside MP-Basset, i.e., through JPF-MJI calls,
for two reasons. First, even if pre-computation is a one-time
cost, it takes considerably longer when executed within the
modeled program. Second, the pre-computed data is state
unconditional, thus, it need not be stored in the state (an
expensive measure as explained above).
An obvious approach to pre-compute and query indepen-
dent transitions through JPF-MJI calls would be to serialize,
pass, and de-serialize transitions as primitive types. To avoid
this expensive and tedious task, we instantiate an exact copy
of each transition within JPF-Core. As a result JPF-MJI calls
can simply address transitions and the result of the queries
(whether or not two transitions are independent) is passed
through primitive boolean types. Note that this solution is
only possible because the set of all transitions is ﬁxed.
V. EVALUATION
In this Section, we ﬁrst brieﬂy discuss the protocols we
selected for analysis and how they are modeled in MP
(Section V-A). Next we detail the veriﬁcation results using
Basset and MP-Basset (Section V-B).
A. Target Systems and Protocol-Level Abstractions
We use three widely used and representative fault-tolerant
protocols to demonstrate the beneﬁts of our approach. Each
protocol assumes a threshold of the minimum number of
correct processes. However, they deﬁne different fault mod-
els and also specify different properties. We now introduce
these protocols and the properties that we analyzed with MP-
Basset. Note that the goal of this evaluation is to evaluate
the beneﬁt of quorum transitions and transition reﬁnement,
and not a complete veriﬁcation of these protocols.
• The Paxos protocol solves consensus, a fundamental
primitive that can be used to implement state-machine
replication [20]. Intuitively, consensus means that at
most one value is “chosen”, i.e., all processes agree
on this value. Paxos solves consensus if a minority of
processes can fail by crashing.
• Our second example is a consistent multicast protocol
called Echo Multicast [26]. The agreement property
of consistent multicast speciﬁes that no two processes
receive different messages. Echo Multicast implements
agreement in a Byzantine environment [22] where up
to one third of the processes can fail arbitrarily and the
remaining processes are called honest.
• Our third example is regular storage protocol in the
style of [3]. The objective of distributed storage is to
reliably store data despite failures of the base (storing)
objects. A regular storage guarantees that a read op-
eration returns a value not older than the one written
by the latest preceding write operation. The protocol
assumes a crash-tolerant setting where a minority of
all base objects might crash.
We remark that none of our target protocols assumes
synchrony, i.e., an upper-bound of the worst-case message
delivery time. Synchrony is required only for progress, e.g., a
8
value is eventually chosen in Paxos. Furthermore, messages
can be delivered out-of-order.
Protocol settings. The protocols are parametric in the
number of processes. In addition, processes can be of
different type. In a given protocol setting we specify the
number of processes of each type. Next we summarize the
different process types in each protocol:
• Paxos deﬁnes proposer, acceptor, and learner processes.
A proposer can initiate a consensus instance by propos-
ing a value to be chosen. Acceptors store values pro-
posed by proposers. Learners receive messages from
acceptors to learn about proposals and output a chosen
value. A Paxos setting (P,A,L) gives the number of
proposers, acceptors, and learners, respectively. For
example, Paxos (2,3,1) (as in Tables I-II) speciﬁes two
proposers, three acceptors, and a single learner.
• Echo Multicast deﬁnes initiator and receiver processes.
In a setting (HR,HI,BR,BI), we deﬁne the number
of honest receivers, initiators, Byzantine receivers and
initiators, respectively.
• Every storage protocol deﬁnes writers, base objects,
and readers. Since the selected protocol is a single-
writer one, a setting (B,R) deﬁnes the number of base
objects and readers, respectively.
Process faults. The above protocols tolerate two classes
of faults, crash (Paxos and regular storage) and Byzantine
(multicast). We do not explicitly model crash faults. This is
because MP-Basset schedules processes in all possible ways
and the effect of crash is implicitly modeled by scheduling
other (non-crashed) processes ﬁrst. In other words, crashed
and correct processes taking no steps are equivalent. To
model Byzantine faults, we specify processes that do not
obey the protocol. We consider different attack strategies
to challenge the multicast protocol. A complete model of
Byzantine faults is beyond the scope of this paper.
We distinguish Byzantine processes whether they are
initiators or receivers:
• A Byzantine initiator attempts to violate the agreement
property by sending different messages to each of two
groups of honest receivers.
• A Byzantine receiver sends invalid conﬁrmations to
an honest initiator and cooperates with a Byzantine
initiator by conﬁrming (signing) both of its messages.
Fault injection. For debugging purposes we also inject
faults into (a) correct processes and (b) the speciﬁcation
of the protocols. In particular, we specify “Faulty Paxos”,
where learners do not compare the values received from the
acceptors. In case of Echo Multicast and regular storage
we utilize deliberately incorrect speciﬁcations. For example,
in Echo Multicast we exceed the threshold of the number
of maximum Byzantine processes (“wrong agreement”). For
storage we require that a read operation that completes after
a write has to return the value written by the write even if
the two operations are concurrent (“wrong regularity”).
B. Evaluation Strategy and Results.
We perform three experiments for each protocol setting:
• (Table I) We show that using quorum semantics reduces
the size of the overall state space. We run our exper-
iments with POR-optimization. We use two stubborn
set-based POR implementations, a DPOR algorithm
[13] implemented in Basset and an SPOR algorithm [9]
(see Section IV).5 As Basset does not support quorum
transitions, we apply DPOR only for models with
single-message transitions. Furthermore, as the safety
property of regular storage (a form of linearizability) is
not preserved by the DPOR implementations of Basset,
we use unreduced search for veriﬁcation in this case.
• (Table II) We show that transition reﬁnement can addi-
tionally save model checking resources. As our split
strategies reﬁne transitions of the same process, the
reﬁned transitions are inter-dependent. Thus, transition
reﬁnement is ineffective with dynamic POR (see discus-
sion in Section III-B) and the results are not depicted.
In Table II we measure the performance of SPOR [9]
for models splitting only reply transitions (reply-split),
only non-reply quorum transitions (quorum-split), and
all of these transitions (combined-split).
• (Across Tables I-II) We demonstrate that our approach
can be used for efﬁcient debugging. We show that
ﬁnding the ﬁrst bug6 in faulty protocols or in protocols
with wrong speciﬁcation requires little resources.
Seed transitions. As explained in Section III-A,
the
performance of POR depends on the ﬁrst
transition in
the stubborn set. We use a heuristic where transitions are
preferred that either start a new instance of the protocol (e.g.,
READ transition in Paxos) or, if there is no such transition,
do not terminate an ongoing instance (e.g., READ REPL
or WRITE transitions but not an ACCEPT transition). This
heuristic shows good performance in our POR experiments.
Intuitively, the execution of such a transition “delays” the
decision of which instance is pursued at a given process.
Surprisingly,
this heuristic suggests the opposite of the
transaction strategy proposed in [5]. We speculate that
the difference lies in that our target protocols allow more
concurrency than the cache coherence protocol analyzed
in [5]. There, the processing of further client requests is
blocked until the centralized cache controller (assumed to
be fault-free) completes the ongoing instance of the protocol
started by another client.
Note that our heuristic depends on the semantics of the
protocol, which might be hard to automate. In fact, our seed
5Other DPOR algorithms in Basset such as [27] have property preser-
vation guarantees other than stubborn sets. We chose [13] for a fair
comparison with the stubborn-set based SPOR algorithm of MP-Basset.
6The bug ﬁrst found by the model checker, after which the search is
terminated and a counterexample is returned.
9
Protocol
Property
Result
Paxos (2,3,1)
Faulty Paxos (2,3,1)
Echo Multicast (3,0,1,1)
Echo Multicast (2,1,0,1)
Echo Multicast (2,1,2,1) Wrong agreement
Consensus
Consensus
Agreement
Agreement
Veriﬁed >16,087,468
CE5
Veriﬁed
Veriﬁed
CE5
162
2911
2010
66
Table I