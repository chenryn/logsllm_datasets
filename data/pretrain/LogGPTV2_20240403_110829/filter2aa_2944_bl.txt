method by loading rules from the classpath using KieServices.get().getKie-
ClasspathContainer(). 
 To query the rules for a decision, you should first create a new KIE session and set
an instance of the Decision class from the previous section as a global variable that the
rules can access. Each rule can then call the deny() or permit() methods on this
object to indicate whether the request should be allowed. The attributes can then be
added to the working memory for Drools using the insert() method on the session.
Because Drools prefers strongly typed values, you can wrap each set of attributes in a
simple wrapper class to distinguish them from each other (described shortly). Finally,
call session.fireAllRules() to evaluate the rules against the attributes and then
check the value of the decision variable to determine the final decision. Create a new
file named DroolsAccessController.java inside the controller folder and add the con-
tents of listing 8.11.
package com.manning.apisecurityinaction.controller;
import java.util.*;
import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
public class DroolsAccessController extends ABACAccessController {
    private final KieContainer kieContainer;
    public DroolsAccessController() {
        this.kieContainer = KieServices.get().getKieClasspathContainer(); 
    }
    @Override
    boolean checkPermitted(Map subject,
                           Map resource,
                           Map action,
                           Map env) {
        var session = kieContainer.newKieSession();      
        try {
            var decision = new Decision();             
            session.setGlobal("decision", decision);   
            session.insert(new Subject(subject));     
            session.insert(new Resource(resource));   
            session.insert(new Action(action));       
            session.insert(new Environment(env));     
            session.fireAllRules();           
            return decision.isPermitted();    
Listing 8.11
Evaluating decisions with Drools
Load all rules
found in the
classpath.
Start a new 
Drools session.
Create a Decision
object and set it as
a global variable
named “decision.”
Insert facts for 
each category 
of attributes.
Run the rule engine
to see which rules
match the request
and check the
decision.
287
Attribute-based access control
        } finally {
            session.dispose();     
        }
    }
}
As mentioned, Drools likes to work with strongly typed values, so you can wrap each
collection of attributes in a distinct class to make it simpler to write rules that match
each one, as shown in listing 8.12. Open DroolsAccessController.java in your editor
again and add the four wrapper classes from the following listing as inner classes to
the DroolsAccessController class.
public static class Subject extends HashMap {   
    Subject(Map m) { super(m); }                
}                                                               
public static class Resource extends HashMap {  
    Resource(Map m) { super(m); }               
}                                                               
public static class Action extends HashMap {
    Action(Map m) { super(m); }
}
public static class Environment extends HashMap {
    Environment(Map m) { super(m); }
}
You can now start writing access control rules. Rather than reimplementing all the
existing RBAC access control checks, you will just add an additional rule that prevents
moderators from deleting messages outside of normal office hours. Create a new file
accessrules.drl in the folder src/main/resources to contain the rules. Listing 8.13 lists
the example rule. As for Java, a Drools rule file can contain a package and import
statements, so use those to import the Decision and wrapper class you’ve just created.
Next, you need to declare the global decision variable that will be used to communi-
cate the decision by the rules. Finally, you can implement the rules themselves. Each
rule has the following form:
rule "description"
    when
       conditions
    then
       actions
end
The description can be any useful string to describe the rule. The conditions of the
rule match classes that have been inserted into the working memory and consist of
Listing 8.12
Wrapping attributes in types
Dispose of the 
session when 
finished.
Wrapper for 
subject-related 
attributes
Wrapper for 
resource-related 
attributes
288
CHAPTER 8
Identity-based access control
the class name followed by a list of constraints inside parentheses. In this case,
because the classes are maps, you can use the this["key"] syntax to match attributes
inside the map. For this rule, you should check that the HTTP method is DELETE
and that the hour field of the timeOfDay attribute is outside of the allowed 9-to-5
working hours. If the rule matches, the action of the rule will call the deny() method
of the decision global variable. You can find more detailed information about writing
Drools rules on the https://drools.org website, or from the book Mastering JBoss Drools 6,
by Mauricio Salatino, Mariano De Maio, and Esteban Aliverti (Packt, 2016).
package com.manning.apisecurityinaction.rules;       
import com.manning.apisecurityinaction.controller.
➥ DroolsAccessController.*;                         
import com.manning.apisecurityinaction.controller.
➥ ABACAccessController.Decision;                    
global Decision decision;    
rule "deny moderation outside office hours"    
    when                                       
        Action( this["method"] == "DELETE" )      
        Environment( this["timeOfDay"].hour  17 )      
    then                                       
        decision.deny();     
end
Now that you have written an ABAC rule you can wire up the main method to apply
your rules as a Spark before() filter that runs before the other access control rules.
The filter will call the enforcePolicy method inherited from the ABACAccess-
Controller (listing 8.9), which populates the attributes from the requests. The base
class then calls the checkDecision method from listing 8.11, which will use Drools to
evaluate the rules. Open Main.java in your editor and add the following lines to the
main() method just before the route definitions in that file:
    var droolsController = new DroolsAccessController();
    before("/*", droolsController::enforcePolicy);
Restart the API server and make some sample requests to see if the policy is being
enforced and is not interfering with the existing RBAC permission checks. To check
that DELETE requests are being rejected outside of office hours, you can either adjust
your computer’s clock to a different time, or you can adjust the time of day environ-
ment attribute to artificially set the time of day to 11 p.m. Open ABACAccessController
.java and change the definition of the timeOfDay attribute as follows:
envAttrs.put("timeOfDay", LocalTime.now().withHour(23));
Listing 8.13
An example ABAC rule
Add package 
and import 
statements just 
like Java.
Declare the
decision
global
variable.
A rule has a description, 
a when section with 
patterns, and a then 
section with actions.
Patterns
match the
attributes.
The action can call the permit or 
deny methods on the decision.
289
Attribute-based access control
If you then try to make any DELETE request to the API it’ll be rejected:
$ curl -i -X DELETE \
  -u demo:password https://localhost:4567/spaces/1/messages/1
HTTP/1.1 403 Forbidden
…
TIP
It doesn’t matter if you haven’t implemented any DELETE methods in
the Natter API, because the ABAC rules will be applied before the request is
matched to any endpoints (even if none exist). The Natter API implementa-
tion in the GitHub repository accompanying this book has implementations
of several additional REST requests, including DELETE support, if you want
to try it out.
8.3.3
Policy agents and API gateways
ABAC enforcement can be complex as policies increase in complexity. Although gen-
eral-purpose rule engines such as Drools can simplify the process of writing ABAC rules,
specialized components have been developed that implement sophisticated policy
enforcement. These components are typically implemented either as a policy agent that
plugs into an existing application server, web server, or reverse proxy, or else as stand-
alone gateways that intercept requests at the HTTP layer, as illustrated in figure 8.4.
For example, the Open Policy Agent (OPA, https://www.openpolicyagent.org) imple-
ments a policy engine using a DSL designed to make expressing access control deci-
sions easy. It can be integrated into an existing infrastructure either using its REST
Policy agents
can plug into an
application server,
web server, or
reverse proxy.
Application server
API
Policy agent
Reverse proxy
Policy agent
HTTP requests
API gateway
Policy engine
Some API gateways
can also enforce
ABAC policies.
Figure 8.4
A policy agent can plug into an application server or reverse 
proxy to enforce ABAC policies. Some API gateways can also enforce policy 
decisions as standalone components.
290
CHAPTER 8
Identity-based access control
API or as a Go library, and integrations have been written for various reverse proxies
and gateways to add policy enforcement.
8.3.4
Distributed policy enforcement and XACML
Rather than combining all the logic of enforcing policies into the agent itself, another
approach is to centralize the definition of policies in a separate server, which provides
a REST API for policy agents to connect to and evaluate policy decisions. By centraliz-
ing policy decisions, a security team can more easily review and adjust policy rules for
all APIs in an organization and ensure consistent rules are applied. This approach is
most closely associated with XACML, the eXtensible Access-Control Markup Language
(see http://mng.bz/Qx2w), which defines an XML-based language for policies with a
rich set of functions for matching attributes and combining policy decisions. Although
the XML format for defining policies has fallen somewhat out of favor in recent years,
XACML also defined a reference architecture for ABAC systems that has been very
influential and is now incorporated into NIST’s recommendations for ABAC (http://
mng.bz/X0YG).
DEFINITION
XACML is the eXtensible Access-Control Markup Language, a
standard produced by the OASIS standards body. XACML defines a rich
XML-based policy language and a reference architecture for distributed pol-
icy enforcement.
The core components of the XACML reference architecture are shown in figure 8.5,
and consist of the following functional components:
 A Policy Enforcement Point (PEP) acts like a policy agent to intercept requests to
an API and reject any requests that are denied by policy.
 The PEP talks to a Policy Decision Point (PDP) to determine if a request should
be allowed. The PDP contains a policy engine like those you’ve seen already in
this chapter.
 A Policy Information Point (PIP) is responsible for retrieving and caching values
of relevant attributes from different data sources. These might be local data-
bases or remote services such as an OIDC UserInfo endpoint (see chapter 7).
 A Policy Administration Point (PAP) provides an interface for administrators to
define and manage policies.
The four components may be collocated or can be distributed on different machines.
In particular, the XACML architecture allows policy definitions to be centralized
within an organization, allowing easy administration and review. Multiple PEPs for dif-
ferent APIs can talk to the PDP via an API (typically a REST API), and XACML sup-
ports the concept of policy sets to allow policies for different PEPs to be grouped
together with different combining rules. Many vendors offer implementations of the
XACML reference architecture in some form, although often without the standard
XML policy language, providing policy agents or gateways and PDP services that you
291
Attribute-based access control
can install into your environment to add ABAC access control decisions to existing
services and APIs.
8.3.5
Best practices for ABAC
Although ABAC provides an extremely flexible basis for access control, its flexibility
can also be a drawback. It’s easy to develop overly complex rules, making it hard to
determine exactly who has access to what. I have heard of deployments with many
thousands of policy rules. Small changes to rules can have dramatic impacts, and it
can be hard to predict how rules will combine. As an example, I once worked on a sys-
tem that implemented ABAC rules in the form of XPath expressions that were applied
to incoming XML messages; if a message matched any rule, it was rejected. 
 It turned out that a small change to the document structure made by another team
caused many of the rules to no longer match, which allowed invalid requests to be
processed for several weeks before somebody noticed. It would’ve been nice to be able
The Policy
Enforcement Point
ensures access
control decisions
are enforced.
PEP
PDP
PAP
PIP
User
API
Policy admin
data
source
data
source
Data
sources
A Policy Decision
Point evaluates the
logic of access
control rules.
A Policy Administration Point
provides an interface to
deﬁne policies.
The Policy Information
Point gathers attributes
from information sources
and caches them.
Attributes can come from
local information sources
or remote API calls.
Figure 8.5
XACML defines four services that cooperate to implement an ABAC system. The 
Policy Enforcement Point (PEP) rejects requests that are denied by the Policy Decision Point 
(PDP). The Policy Information Point (PIP) retrieves attributes that are relevant to policy 
decisions. A Policy Administration Point (PAP) can be used to define and manage policies.
292
CHAPTER 8
Identity-based access control
to automatically tell when these XPath expressions could no longer match any mes-
sages, but due to the flexibility of XPath, this turns out to be impossible to determine
automatically in general, and all our tests continued using the old format. This anec-
dote shows the potential downside of flexible policy evaluation engines, but they are
still a very powerful way to structure access control logic.
 To maximize the benefits of ABAC while limiting the potential for mistakes, con-
sider adopting the following best practices:
 Layer ABAC over a simpler access control technology such as RBAC. This pro-
vides a defense-in-depth strategy so that a mistake in the ABAC rules doesn’t
result in a total loss of security.
 Implement automated testing of your API endpoints so that you are alerted
quickly if a policy change results in access being granted to unintended parties.
 Ensure access control policies are maintained in a version control system so that
they can be easily rolled back if necessary. Ensure proper review of all policy
changes.
 Consider which aspects of policy should be centralized and which should be left
up to individual APIs or local policy agents. Though it can be tempting to cen-
tralize everything, this can introduce a layer of bureaucracy that can make it
harder to make changes. In the worst case, this can violate the principle of least
privilege because overly broad policies are left in place due to the overhead of
changing them.
 Measure the performance overhead of ABAC policy evaluation early and often.
Pop quiz
7
Which are the four main categories of attributes used in ABAC decisions?
a
Role
b
Action
c
Subject
d
Resource
e
Temporal
f
Geographic 
g
Environment
8
Which one of the components of the XACML reference architecture is used to
define and manage policies?
a
Policy Decision Point
b
Policy Retrieval Point
c
Policy Demolition Point
d
Policy Information Point
e
Policy Enforcement Point
f
Policy Administration Point
The answers are at the end of the chapter.
293
Summary
Answers to pop quiz questions
1
True. Many group models allow groups to contain other groups, as discussed in
section 8.1.
2
a, c, d. Static and dynamic groups are standard, and virtual static groups are
nonstandard but widely implemented.
3
d. groupOfNames (or groupOfUniqueNames).
4
c, d, e. RBAC only assigns permissions using roles, never directly to individuals.
Roles support separation of duty as typically different people define role per-
missions than those that assign roles to users. Roles are typically defined for
each application or API, while groups are often defined globally for a whole
organization.
5
c. The NIST model allows a user to activate only some of their roles when creat-
ing a session, which enables the principle of least privilege.
6