### Methodology for Classifying the r.tgz Rootkit Exploit

#### 1. Kernel Integrity Verification
The first step in our methodology is to verify the integrity of the kernel. We use the `kern_check` program, which compares the system calls of the target system with a known good `/boot/System.map` file. The results show a mismatch of 21 system calls, indicating potential kernel compromise (Figure 5).

**Figure 5: Results of kern_check Program**

This discrepancy suggests that the kernel on the target system may have been compromised by the r.tgz rootkit. Further verification involves comparing the current kernel text segment code with an archived version, confirming the kernel's compromise.

#### 2. Kernel Analysis Using kdb
Using the kdb debugger, we analyze the kernel and find that the pointer to the system call table has been redirected. The correct system call table address, as per the `/boot/System.map` file, is `0xc0248928`, but the current address in kernel memory is `0xc31ac000`. A kdb query on the system call interrupt within kernel space confirms this redirection (Figure 6).

**Figure 6: kdb Query Results**

```plaintext
kdb> id 0xc0109d84  // Address of system call interrupt from /boot/System.map
system_call + 0x2d:  call *0xc31ac000(,%eax,4)
```

This indicates that the system call table is being redirected by a kernel rootkit.

#### 3. Examination of the r.tgz Rootkit
To understand the method used by the r.tgz rootkit to compromise the system, we analyze the install scripts and code. The main install file calls several script files, including `startfile` and `replace`.

- **Startfile Script**: This script copies the `init` file from the r.tgz rootkit to the `/etc/rc.d/init.d` directory. The `init` script executes several binary files, including `sendmail` and `write` (both run as daemons), and two instances of the `all` executable with the ‘i’ switch and a PID.
- **Replace Script**: This script replaces system binaries.

The `init` file, which calls these three instances of the `all` file, is placed in the `/etc/rc.d/init.d` directory, ensuring it runs upon system reboot. The use of file names like `init`, `sendmail`, and `write` is a direct masquerade, as described by Thimbleby, Anderson, and Cairns [12].

#### 4. Analysis of the all Program
The `all` program is a binary executable. Using the `strings` command, we analyze the `all` binary and identify it as a kernel-level rootkit called INKIT (Figure 7). However, no references to INKIT are found online. The strings output also mentions the SuckIT rootkit, suggesting that INKIT is a modification or copy of SuckIT.

**Figure 7: Strings Output of r.tgz all Program**

#### 5. Uninstalling the INKIT Rootkit
We attempt to uninstall the INKIT rootkit using the ‘u’ switch, as indicated by the `strings` output. This successfully uninstalls the kernel-level rootkit. We then re-run the `kern_check` program, which now shows no system call redirections. The system call interrupt now references the correct system call table, and the kernel text segment matches the original archived version.

#### 6. File Integrity Check
With the kernel no longer compromised, we re-run the AIDE file integrity checker and known rootkit detection programs. The AIDE program now indicates that 196 files have changed, an increase from the previous 177 files. This suggests that the kernel element of the r.tgz rootkit was hiding 19 changed programs from the AIDE program (Figure 8).

**Figure 8: New AIDE Results on Target System**

#### 7. Virus and Trojan Detection
Analysis of the AIDE results shows that all executable files in the `/bin` directory have increased in size by 8759 bytes, a signature of the Linux.OSF.8759 virus. This virus is associated with the hax.tgz rootkit [13]. The r.tgz rootkit is thus composed of elements from both the INKIT kernel-level rootkit and the hax.tgz binary-level rootkit.

A trojan port at 3049 is detected by the `chkrootkit` program. The `clean.OSF.8759-ps` utility can clean the infection, but the root user cannot do so after the r.tgz rootkit installation due to the `chattr +ASacdisu` command applied to files in the `/bin`, `/sbin`, and `/usr/bin` directories.

#### 8. Accurate Count of Changed Files
To accurately count the number of binary files added, deleted, or changed by the r.tgz rootkit, we reset the attributes of the files in the `/bin`, `/sbin`, and `/usr/bin` directories and disinfect them using the `clean.OSF.9759-ps` utility. The AIDE program then provides an accurate count, showing that 2 files have been added and 14 files have been changed (Figure 9).

**Figure 9: Accurate AIDE Count of Changed Files**

#### 9. Rootkit Characteristics and Signatures
The `chkrootkit` program detects only 5 of the 14 changed files. New signatures for the undetected files include:
- `/usr/bin/dir`: "stpcpy"
- `/usr/bin/vdir`: "/usr/include/file.h"
- `/usr/bin/md5sum`: "/usr/local/share/locale"
- `/usr/bin/top`: "proc_hackinit"
- `/usr/bin/strings`: "/bin/su –"
- `/usr/bin/socklist`: "bin/egrep –v"
- `/bin/ps`: "/tmp/extfsRNV23Z"
- `/bin/netstat`: "__bzero"
- `/bin/login`: "cococola"

The r.tgz rootkit is a blended rootkit containing elements of the INKIT kernel rootkit (based on SuckIT) and the hax.tgz binary rootkit (based on bigwar.tgz).

#### 10. Summary
Our methodology enabled us to identify and characterize the binary elements replaced by the r.tgz rootkit, detect new signatures, and uninstall the kernel-level rootkit. This analysis benefits network administrators, researchers, and security personnel in characterizing and detecting rootkits.

#### 11. References
[1] D. Dettrich, (2002, 5 JAN) “Root Kits” and hiding files directories/processes after a break-in, [Online]. Available: http://staff.washington.edu/dittrich/misc/faqs/rootkits.faq

[2] L. Spitzner, Honeypots- Tracking Hackers, Indianapolis, IN: Addison-Wesley, 2003, p. 69.

[3] The Honeynet Project, Know Your Enemy, Indianapolis, IN: Addison-Wesley, 2002, p. 19.

[4] http://www.linuxsecurity.com/feature_stories/feature_story-141.html, Nov 2003.

[5] http://www.packetfu.org/hpa.html, Nov 2003.

[6] J. Levine, J. Grizzard, H. Owen, “A Methodology to Characterize Kernel Level Rootkit Exploits Involving Redirection of the System Call Table”, to be presented at the 2nd International Information Assurance Workshop, Charlotte, NC, 8-9 Apr 2004.

[7] http://la-samhna.de/library/rootkits/detect.html, Sep 2003

[8] J. Levine, J. Grizzard, P. Hutto, H. Owen, “A Methodology to Characterize Kernel Level Rootkit Exploits that Overwrite the System Call Table”, to be presented at SoutheastCon 2004, Greensboro NC, 26-28 Mar, 2004.

[9] http://www.chkrootkit.org, Dec 2003.

[10] Zovi, D., “Kernel Rootkits”, http://www.cs.unm.edu/~ghandi/lkr.pdf, 3 July 2001, Oct 2003.

[11] http://www.cs.tut.fi/~rammer/aide.html, Sep 2002.

[12] Thimbleby, S. Anderson, p. Cairns, “A Framework for Modeling Trojans and Computer Virus Infections,” The Computer Journal, vol. 41, no.7 pp. 444-458, 1998.

[13] http://www.honeylux.org.lu/project/honeyluxR1/result/sub01/report/hax.html, Aug 2003.

[14] http://packetstormsecurity.nl/trojans/indexdate.shtml/clean-osf.8759.tgz/README, Dec 2003.

[15] J. Levine, H. Owen, B. Culver, “A Methodology for Detecting New Binary Rootkit Exploits”, presented at the 2003 IEEE SoutheastCon 2003, Ocho Rios, Jamaica, 4-6 Apr 2003.

[16] J. Levine, A Methodology for Detecting and Classifying Rootkit Exploits, PhD Thesis, Georgia Institute of Technology, Atlanta, GA, to be published.