methodology to classify this rootkit exploit. 
The next step in the methodology is to verify the integrity 
of the kernel.  Running the kernel check program 
(kern_check) on the target system utilizing  a known good 
/boot/System.map file indicates that there is a mismatch of 
21 system calls between the kernel and the known good 
/boot/System.map file.  The results of the kern_check 
program are shown in figure 5. 
Figure 5: Results of kern_check program 
This is an indication that the kernel of the target system 
may have been compromised by the r.tgz rootkit.  Checking 
the current kernel text segment code against the previously 
archived version of the kernel text segment code indicates 
that the kernel has been compromised.  The previously 
archived version of the kernel text segment code was built 
when the target system was first compiled. 
  Analysis of the kernel using kdb indicates that the pointer 
to the system call table is being redirected to a new instance 
of this table. The correct system call table address is 
0xc0248928 
and 
can 
be 
retrieved 
from 
the 
/boot/System.map file.   The current system call table 
address as displayed by kdb in kernel memory is 
0xc31ac000.  The following is the results of running a kdb 
query on the system call interrupt within kernel space.  The 
returned call statement should refer to the address of the 
system call statement that is stored in the /boot/System.map 
file (0xc024928) and it does not.  
      kdb> id 0xc0109d84 ~ (address of system call interrupt 
from /boot/System.map) 
       system_call + 0x2d:  call *0xc31ac000(,%eax,4) 
This is an indication that the system call table is being 
redirected by a kernel rootkit 
Since the kernel is a fundamental part of the computer 
operating system we will first examine this aspect of the 
r.tgz rootkit to determine the method that this rootkit used to 
compromise the target system.   You can not trust any of the 
system output if the kernel has been compromised. 
As previously mentioned, the Honeynet allowed us to 
retrieve the install scripts and code that is utilized by the 
r.tgz rootkit.  The main install file for the r.tgz rootkit calls a 
series of script files to install the rootkit.  Analysis of these 
scripts indicates that the startfile script is the script that 
compromises the kernel on the target system.  The replace 
script is used to replace the system binaries.   
The startfile script  copies the r.tgz file init to the 
/etc/rc.d/init.d directory.  Analysis of the r.tgz init file 
indicated that this is the script that compromises the kernel.  
The init script file executes several binary files named 
sendmail (executed as a daemon),  write (executed as a 
daemon),  and two instances of the executable all with the 
‘i’ switch and a pid.  The sendmail binary file is actually 
another instance of the all program that is copied over in the 
createdir script file that is executed by the r.tgz startup script 
file.  This analysis resulted in the identification of three 
instances of the all binary executable file being executed by 
the r.tgz rootkit.  Two of these instances of the all binary 
file have pid’s  associated with them.   The fact that the init 
file, which calls these three instances of the all file, has been 
copied into the /etc/rc.f/init.d  directory is an indication that 
the r.tgz rootkit developer wanted this code to be executed 
upon system reboot, making the kernel compromise portion 
of this rootkit resident within memory.  The use of file 
names such as init, sendmail, and write are examples of a 
direct masquerade as described by Thimbleby, Anderson, 
and Cairns.  Direct masquerades are files that pretend to be 
normal programs [12].  As a result of this analysis, we 
choose to examine the all program.  This program is a 
binary executable file and we do not have the underlying 
source code that was used to create this rootkit.  We choose 
to use a tool such as strings on this file initially in 
conducting our analysis.  An segment of the results of 
running the strings  command on the r.tgz all binary file are 
indicated in Figure 6. 
Figure 6: strings output of r.tgz all program 
The strings output of this program indicates that the all 
program is a kernel level rootkits known as INKIT.  A 
search on the Internet for a kernel rootkit called INKIT does 
not result in any references to this particular rootkit.  
According to the use statement that is output by the strings 
command, the ‘i’ switch that is used in the init script with a 
particular pid is used to make that pid invisible.  The last 
string displayed in Figure 6 is significant to note.  This text 
string makes reference to the SuckIT rootkit.  We presented 
an in depth analysis of the SuckIT  kernel level rootkit in 
[6].  The fact that this string appears in INKIT, including the 
misspelling of successfully just like the actual SuckIT 
rootkit, leads us to believe that INKIT is a modification or a 
copy of the SuckIT kernel level rootkit.  Next we attempted 
to uninstall the INKIT kernel level rootkit using the ‘u’ 
switch as indicated by the use statement in Figure 7.   
Figure 7: Uninstall of INKIT kernel rootkit 
This command was successful in uninstalling the kernel 
level rootkit.  We then verified the integrity of the kernel 
with the kern_check kernel integrity check program.  The 
indication was that there are no system calls currently being 
redirected by the kernel.  An examination of the kernel 
using kdb indicated that the system call interrupt is now 
referencing the correct system call table.  As a final check, 
we compared the current kernel text segment against the 
original archived text segment.  These files now match.  At 
this point the kernel is no longer compromised and we reran 
the file integrity checker and known rootkit detection 
programs on the target system since we can now trust the 
kernel output.  The output from the AIDE file integrity 
checker program now indicates that 196 files have changed.  
This is an increase of 19 files from the previous check of the 
AIDE program where 177 files were detected as being 
changed by the r.tgz rootkit.  It appears that the kernel 
element of the r.tgz rootkit was hiding these 19 changed 
programs from the AIDE program.  Next in the analysis 
process we analyzed these changed files and the r.tgz install 
scripts to determine how these files had been changed.  The 
results of the new instance of the AIDE program are 
indicated in Figure 8. 
Figure 8: New AIDE results on target system. 
Analysis of the install scripts for the r.tgz rootkit does not 
indicate that 196 files are being changed when the rootkit is 
installed.    Analysis of the AIDE results indicates that all of 
the executable files in the /bin directory are changing.   
Comparison of the files in the /bin directory with known 
good files indicates that the files that are not being changed 
by the r.tgz rootkit are increasing in size by 8759 bytes.  
This increase in file size is a signature of the 
Linux.OSF.8759 virus.  This virus is associated with the 
hax.tgz rootkit [13]. Application of the methodology thus 
far has indicated that r.tgz is composed of elements of two 
rootkits; the INKIT kernel level rootkit which is based on 
SuckIT, and the hax.tgz binary level rootkit.   
Another signature of the Linux.OSF.8759 virus is that a 
trojan port is opened on the target system at 3049.  This 
trojan port is detected by the chkrootkit program which 
checks for processes listening on ports with the use of the 
netstat command with the –anp switch to detect open ports 
on the system in question.   Other Trojan ports can be 
detected in a similar fashion. 
There is a utility named clean.OSF.8759-ps that can be 
used to clean infection of the Linux.OSF.8759 virus [14].  
However, these files can not be cleaned by the root user 
after the r.tgz rootkit is installed on the target system.  This 
is a result of the socklist script within the r.tgz rootkit 
changing the attributes on all of the files in the /bin directory 
with the chattr  +ASacdisu command.  Attributes on 
selected files in the /sbin and /usr/bin directories are also 
reset by the replace script within the r.tgz rootkit after these 
files are infected with the Linux.OSF.8759 virus.  Files and 
directories with their attributes reset could be used as an 
indication that a possible rootkit is installed on the target 
system.  These attributes must be turned off using the chattr  
-ASacdisu command to disinfect these files.   
To produce an accurate count of the number of binary files 
that are added, deleted, or changed by the r.tgz rootkit the 
attributes of the files within the /bin, /sbin, and /user/bin 
directories must first be reset.  Then these directories can be 
disinfected with the clean.OSF.9759-ps utility.    Once these 
files and directories have been disinfected the AIDE 
program is run to provide an accurate count of the files that 
have been changed on the target system by the r.tgz rootkit.  
Figure 9 shows the results of this instance of the AIDE 
program on the target system.  The results are that 2 files 
have been added and 14 files have been changed by r.tgz.  
These results correspond with the install scripts for the r.tgz 
rootkit. 
Figure 9: Accurate AIDE count of changed files 
IV. ROOTKIT CHARACTERISTICS 
The chkrootkit program only detects 5 of the 14 files that 
are detected as being changed by the AIDE program.  It may 
be possible to develop new signatures for the 9 changed 
files that are not detected by chkrootkit.  These files are: dir, 
vdir, md5sum, top, and strings in the /usr/bin directory; ps, 
netstat, and login in the /bin directory; and ifconfig in the 
/sbin directory.  Two other possible signatures are the two 
added files, /usr/bin/strings and /sbin/sendmail.   There are 
currently two instances of the strings command in the 
/usr/bin directory.  The socklist script of the r.tgz rootkit 
copies the original /usr/bin/strings file to the following file: 
/usr/bin/strings.  This would make it hard to 
detect that this file has been tampered with under a visual 
examination.  However, this is a signature that can be used 
to detect the presence of either the r.tgz rootkit of the binary 
elements that make up the r.tgz rootkit on the target system.   
Using the elements of the methodology to detect unique 
rootkit string signatures that we have presented in our paper 
“A Methodology for Detecting New Binary Rootkit 
Exploits”  we are able to detect some possible unique string 
signatures in the binary files that are replaced by the r.tgz 
rootkit [14].  The following are potential string signatures 
that can be used by a program such as chkrootkit to detect 
the presence of the r.tgz rootkit binary file replacements.   
 /usr/bin/dir   
“stpcpy” 
/usr/bin/vdir  
“/usr/include/file.h” 
/usr/bin/md5sum 
“/usr/local/share/locale” 
/usr/bin/top 
“proc_hackinit” 
/usr/bin/strings  
“/bin/su  –“ 
/usr/bin/socklist  
“bin/egrep  –v” 
/bin/ps  
“/tmp/extfsRNV23Z” 
/bin/netstat 
“__bzero” 
/bin/login 
“cococola” 
We have already characterized the kernel rootkit that is an 
element of r.tgz.  This kernel rootkit is one that redirects the 
system call table to an entirely new system call table as 
previously described by the authors in [6].  Based on other 
analysis that we have done, we were able to uninstall and 
reinstall this rootkit on the target system.  It is significant to 
note that every new reinstallation of this kernel level rootkit 
will results in a new address in kernel space for the new 
instance of the compromised system call table.   
As previously stated, we concluded that the r.tgz rootkit is 
a blended rootkit that contains elements of the INKIT kernel 
rootkit and the hax.tgz binary rootkit.   The INKIT rootkit is 
based on SuckIT.  The hax.tgz rootkit is based on bigwar.tgz 
rootkit [13]. 
V. SUMMARY 
We have applied our methodology to a rootkit that we 
were able to acquire on the Honeynet research network that 
we established at Georgia Tech.  Our methodology enabled 
us to identify the binary elements that this rootkit replaced 
on the target system.  New signatures were identified that 
can help to detect the presence of this rootkit.  
The methodology enabled us to characterize the kernel 
element of this rootkit as a modification to an already 
existing kernel rootkit.  We were able to uninstall this kernel 
rootkit on the target system. 
We have also applied this methodology to nine additional 
rootkits.  This analysis enable us to characterize these 
rootkits and identify specific signatures that could be used in 
subsequent detection and analysis [15]. 
The analysis that we have presented concerning the 
application of our methodology to a rootkit would benefit 
network administrators, researchers, and network security 
personnel in characterizing rootkits as well as provide 
methods to detect these rootkits. 
VI. REFERENCES 
[1] D. Dettrich,  (2002, 5 JAN) “Root Kits” and hiding 
files directories/processes after a break-in,  [Online].  
Available: 
http://staff.washington.edu/dittrich/misc 
/faqs/rootkits.faq 
[2] L. Spitzner,   Honeypots- Tracking Hackers, 
Indianapolis, IN: Addison-Wesley, 2003, p. 69. 
[3] The 
Honeynet 
Project, 
Know 
Your 
Enemy, 
Indianapolis, IN: Addison-Wesley, 2002,  p. 19. 
[4] http://www.linuxsecurity.com/feature_stories 
/feature_story-141.html, Nov 2003. 
[5] http://www.packetfu.org/hpa.html, Nov 2003. 
[6] J. Levine, J. Grizzard,  H. Owen,   “A Methodology to 
Characterize Kernel Level Rootkit Exploits Involving 
Redirection of the System Call Table”, to be presented at 
the 2nd International Information Assurance Workshop,  
Charlotte, NC, 8-9 Apr 2004. 
[7] http://la-samhna.de/library/rootkits/detect.html, 
Sep 
2003 
[8] J. Levine, J. Grizzard,  P. Hutto, H. Owen,   “A 
Methodology to Characterize Kernel Level Rootkit 
Exploits that Overwrite the System Call Table”, to be 
presented at SoutheastCon 2004,  Greensboro NC, 26-28 
Mar, 2004. 
[9] http://www.chkrootkit.org, Dec 2003. 
[10] Zovi, D., “Kernel Rootkits”,  http://www.cs.unm.edu 
/~ghandi/lkr.pdf, 3 July 2001, Oct 2003. 
[11] http://www.cs.tut.fi/~rammer/aide.html, Sep 2002. 
[12] Thimbleby, S. Anderson, p. Cairns, “A Framework for 
Modeling Trojans and Computer Virus Infections,” The 
Computer Journal, vol. 41, no.7 pp. 444-458, 1998.  
[13] http://www.honeylux.org.lu/project/honeyluxR1/result
/sub01/report/hax.html, Aug 2003. 
[14] http://packetstormsecurity.nl/trojans/indexdate.shtml/c
lean-osf.8759.tgz /README, Dec 2003. 
[15] J. Levine, H. Owen, B. Culver, “A Methodology for 
Detecting New Binary Rootkit Exploits”,   presented at 
the 2003 IEEE SoutheastCon 2003,  Ocho Rios, 
Jamaica,  4-6 Apr 2003.  
[16] J. Levine,  A Methodology for Detecting and 
Classifying Rootkit Exploits, PhD Thesis, Georgia 
Institute of Technology, Atlanta, GA, to be published.