# Generating Policies for Defense in Depth

**Authors:**
- Paul Rubel, BBN Technologies, Cambridge, MA, USA
- Michael Ihde, University of Illinois at Urbana-Champaign, Urbana, IL, USA
- Steven A. Harp, Adventium Labs, Minneapolis, MN, USA
- Charles N. Payne, BBN Technologies, Cambridge, MA, USA

**Abstract:**
Coordinating multiple overlapping defense mechanisms across different levels of abstraction is challenging and prone to misconfiguration. To mitigate this risk, generating policies from a single specification is often considered. This paper presents our experience and lessons learned in developing, validating, and coordinating network communication security policies for a defense-in-depth (DiD) enabled system that successfully withstood sustained red team attacks. The network communication was secured by host-based firewalls, process domain mechanisms, and application-level security policies enforced by the Java Virtual Machine. We used various tools to coordinate these policies, but we found that, for DiD systems, creating a single specification from which all policies are derived may not be practical or desirable.

## 1. Introduction
Defense in Depth (DiD) aims to ensure that security defenses can compensate for each other's failures. However, implementing redundant security measures is costly and complex, and there is limited guidance on how to do so effectively. Consistent security policies across all defense layers are essential, but the varying semantics of underlying defense mechanisms make it difficult to achieve policy consistency.

A single specification from which all policies are derived has been a focus of significant research, demonstrating its potential to eliminate unnecessary duplication and facilitate effective analysis. However, most of this research has focused on coordinating policies within a single defense layer. Coordinating policies across multiple layers, with their varying abstractions and enforcement targets, presents additional challenges. A master specification would need to contain many details at discordant levels of abstraction, potentially complicating the reasoning process at each layer. Additionally, hidden assumptions in a master specification could introduce exploitable vulnerabilities, undermining the benefits of DiD.

This paper documents our experience in defining and coordinating network communication policies for a DiD-enabled system. We deployed defense technologies from the network layer to the application layer to address threats from sophisticated attackers. Each layer, to the greatest extent possible, repeated the logical network communication rules of the layers below it.

Initially, we pursued a master specification approach for selected layers, such as generating the host layer policy from the application layer policy. However, we soon realized that a hybrid approach, where policies are created in a coordinated but largely independent manner, provided the best balance of flexibility, autonomy, and assurance of correctness. This hybrid approach minimized misconfigurations by coordinating static policy elements, such as host names and port numbers, from a single source. It also reduced the risk of hidden assumptions by specifying each policy separately using different authors, structuring policies to deny everything not explicitly allowed, and supporting each policy with validation tools. These tools enabled software developers to review policies for correctness, even if they did not understand the syntax of the policy enforcement mechanism.

The next section discusses the complexity of our DiD problem and the network communication requirements. We then describe the policy construction and validation process for each defense layer, concluding with lessons learned and thoughts for future work.

## 2. The DARPA Challenge
In 2002, DARPA challenged the research community to design and demonstrate an unprecedented level of survivability for an existing DoD information system using DARPA-developed and COTS technologies. Specifically, the defended system had to survive 12 hours of sustained attack from a class A red team. DARPA chose a large, distributed, publish/subscribe/query (PSQ) system implemented using the Joint Battlespace Infosphere (JBI), which relies on a public transport network to deliver "the right information to the right people at the right time."

Our team, led by BBN Technologies, designed and developed a candidate solution architecture called DPASA. DPASA aimed to deflect or prevent attacks, detect and report attack-related events, and change the system’s configuration or behavior in response to damages caused by an attack. Key features included communication isolation zones, redundant but diverse host enclaves, Byzantine agreement for attack response, and prevention, detection, and monitoring technologies strategically placed throughout every defense layer and on every host.

The DPASA design resulted in a Core made up of four redundant quads (groups of management hosts) interacting with clients through an Access Proxy (AP) on the edge of each quad, bridging the core and client networks. The physical network topology provided some protection, as clients could not directly interact with core components except through the AP. Host, process, and application layer defenses further restricted client communication options, allowing interaction only with established services on the APs. The APs were configured to accept traffic only from known client hosts, preventing rogue clients from being introduced into the system.

Access within the Core was similarly restricted. High-level management functionality resided on the System Manager (SM) host, but there was no direct route to the SM from the AP in case the AP was compromised. Host-resident defenses enforced separation and least privilege on each host. Each core and client process was granted access to only the files and directories required for its job, with limited permissions. File systems containing non-changing data were mounted read-only to bolster policy-provided protection. Dynamic code loading was disabled for Java processes, and each client and management process ran as a unique user, allowing further restrictions on file access.

For the remainder of this paper, we focus on defining and deploying network communication policies. From a prevention perspective, DPASA aimed to block the attacker using the DiD strategy illustrated in Figure 2. At the system layer, redundant hosts were deployed to ensure that the failure of a single host would not stop the entire system. At the network layer, authorized enclave-to-enclave communication was enforced and encrypted by a VPN firewall/router. At the host layer, authorized host-to-host communication was enforced by the Autonomic Distributed Firewall (ADF). ADF, implemented on the host’s network interface card (NIC), performed ingress and egress packet filtering, protecting both the host and the network. All host-to-host communication was encrypted using ADF’s Virtual Private Groups (VPG), providing a unique encryption key for each collection of hosts. At the process layer, authorized process behavior was enforced either by NSA’s SELinux or Cisco Corp’s Cisco Security Agent (CSA) for non-Linux hosts. At the application layer, authorized JBI application behavior was enforced by the Java Virtual Machine (JVM).

Constructing network communication security policies proved challenging due to the vertical and horizontal duplication of logical policy rules across the defense layers and redundant enclaves. For example, each quad contained a different mix of operating systems to minimize common mode failures, resulting in significantly different policies enforced by similar hosts in each quad, even though they performed identical logical functions.

Table 1 illustrates the challenge by listing the policies affected and rules required for authorizing a simple network communication from a JBI Client A in enclave EA to the JBI core (B). The table shows that even a simple permission can affect almost a dozen policies, and most of the required policy rules, except for the network layer (VPN), are specific to the communication and cannot be reused.

This example highlights the complexity of enforcing even a simple network communication rule across various layers. DPASA’s network communication needs were far more complex, involving over 570 network communication requirements across more than 40 hosts, each subject to the analysis described in Table 1. Figure 3 illustrates the...

---

This revised version improves the clarity, coherence, and professionalism of the text. It maintains the original content while enhancing the structure and readability.