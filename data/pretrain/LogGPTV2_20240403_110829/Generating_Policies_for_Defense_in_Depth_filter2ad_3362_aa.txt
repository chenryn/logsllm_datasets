title:Generating Policies for Defense in Depth
author:Paul Rubel and
Michael Ihde and
Steven A. Harp and
Charles N. Payne
Generating Policies for Defense in Depth (cid:3)
Paul Rubel
Michael Ihde
Steven Harp, Charles Payne
BBN Technologies University of Illinois
Cambridge, MA
at Urbana-Champaign
PI:EMAIL
Urbana, IL
PI:EMAIL
Adventium Labs
Minneapolis, MN
PI:EMAIL
PI:EMAIL
Abstract
Coordinating multiple overlapping defense mecha-
nisms, at di(cid:11)ering levels of abstraction, is fraught with
the potential for miscon(cid:12)guration, so there is strong
motivation to generate policies for those mechanisms
from a single speci(cid:12)cation in order to avoid that risk.
This paper presents our experience and the lessons
learned as we developed, validated and coordinated net-
work communication security policies for a defense-
in-depth enabled system that withstood sustained red
team attack. Network communication was mediated by
host-based (cid:12)rewalls, process domain mechanisms and
application-level security policies enforced by the Java
Virtual Machine. We coordinated the policies across
the layers using a variety of tools, but we discovered
that, at least for defense-in-depth enabled systems, con-
structing a single speci(cid:12)cation from which to derive all
policies is probably neither practical nor even desirable.
1. Introduction
Defense in Depth (DiD) [18], or loosely the ability
of security defenses to compensate for each other’s fail-
ures, is rarely achieved in real systems. Redundant
security enforcement is expensive to implement, con-
(cid:12)gure and maintain, and there is little guidance for
doing so e(cid:11)ectively. The correctly functioning system
requires consistent security policies across all defense
layers; however, the varying semantics of the under-
lying defense mechanisms make it di(cid:14)cult to measure
consistency between their disparate policies.
Thus, there is a strong motivation to develop a sin-
gle speci(cid:12)cation from which all policies will be derived.
This topic has been the focus of signi(cid:12)cant research
(cid:3)This work was supported by DARPA under contract number:
F30602-02-C-0134
(c.f., [8, 20, 13, 9]) that has demonstrated that the
master speci(cid:12)cation can eliminate unnecessary duplica-
tion and be analyzed e(cid:11)ectively for desired properties.
However, those research e(cid:11)orts focused on coordinat-
ing policies for identical or similar defenses within a
single defense layer. What about coordinating poli-
cies across multiple defense layers? The variety of en-
forcement targets, and range of abstractions (from IP
addresses and gateways to network services and pro-
cesses), means that any useful master speci(cid:12)cation will
need to contain many details at discordant levels of
abstraction. That is, not all details are required at all
defense layers, so they tend to get in the way when rea-
soning about a layer where they are not required. A
master speci(cid:12)cation also raises concerns about hidden
assumptions that might yield exploitable vulnerabili-
ties and circumvent any gains promised by DiD.
This paper documents our experience de(cid:12)ning and
coordinating the network communication policies for
a DiD enabled system. Defense technologies from the
network layer to the application layer were deployed to
address potential threats from a sophisticated attacker.
Each layer, to the greatest extent, repeated the logical
network communication rules of layers below it.
We initially pursued the master speci(cid:12)cation ap-
proach for selected layers. For example, we began by
generating the host layer policy automatically from the
application layer policy. However, we soon realized
that a hybrid approach that created policies in a co-
ordinated but largely independent fashion would yield
the best balance of (cid:13)exibility, autonomy (an important
quality for DiD) and assurance of correctness. Our hy-
brid approach avoided simple mis-con(cid:12)gurations by co-
ordinating static policy elements shared by all policies,
such as host names and port numbers, from a single
source. Then we minimized the risk of hidden assump-
tions by (a) specifying each policy separately using a
di(cid:11)erent author, (b) structuring each policy to deny
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 
everything that was not explicitly allowed and then
de(cid:12)ning the policy according to observed failures in
order to achieve a policy that was minimally su(cid:14)cient,
and (c) supporting each policy with validation tools.
The policy validation tools enabled software develop-
ers to review policies for correctness even if they did
not understand the syntax of the policy enforcement
mechanism. Using the validation tools, they discov-
ered policy miscon(cid:12)gurations and fed this information
back to the policy authors.
The next section discusses our DiD problem and
the complexity of its network communication require-
ments. Then we describe for each defense layer the pol-
icy construction and validation process. We conclude
with lessons learned and some thoughts for future work.
2. The DARPA Challenge
In 2002, DARPA challenged the research commu-
nity to design and demonstrate an unprecedented level
of survivability for an existing DoD information sys-
tem using DARPA-developed and COTS technologies.
In particular, DARPA required that the defended sys-
tem must survive 12 hours of sustained attack from
a class A red team. DARPA chose as its target a
large, distributed, publish/subscribe/query (PSQ) sys-
tem implemented using the Joint Battlespace Infos-
phere (JBI)1, which relies on a public transport net-
work to support its objective to deliver \the right in-
formation to the right people at the right time". The
notional JBI system is illustrated on the left in Fig-
ure 1.
A candidate solution architecture, shown on the
right in Figure 1, called DPASA2 [6, 10], was designed
and developed by our team,
led by BBN Technolo-
gies. The DPASA team recognized that the surviv-
able JBI must de(cid:13)ect or prevent attacks, detect
and report attack related events, and change the
system’s con(cid:12)guration or behavior in response to dam-
ages caused by an attack. Key features of the DPASA
solution included communication isolation zones, re-
dundant but diverse host enclaves (each containing a
complete set of management and PSQ functionality),
Byzantine agreement for attack response, and preven-
tion, detection and monitoring technologies strategi-
cally placed throughout every defense layer, and on
every host, throughout the system.
The (cid:12)elded DPASA design resulted in a Core made
of four redundant quads (groups of management hosts)
interacting with clients through an Access Proxy (AP)
on the edge of each quad, bridging the core and
client networks. The physical network topology pro-
vided some protection in this design, as clients could
not directly interact with core components other than
through the Access Proxy. Host, process and applica-
tion layer defenses further restricted the client’s com-
munication options so that they could not interact with
one another but only with the established services on
the Access Proxies. The Access Proxies were also con-
(cid:12)gured to only accept tra(cid:14)c from the known client
hosts, stopping rogue clients from being introduced
into the system.
Access within the Core was similarly restricted. The
high-level management functionality resided on the
System Manager (SM) host, but there was no direct
route to the SM from the AP, in the event the AP was
compromised. Host-resident defenses enforced separa-
tion and least privilege on each host. Each core and
client process was granted access to only the (cid:12)les and
directories required for its job and then with limited
permissions on those (cid:12)les. File systems that contained
non-changing data were mounted read-only to bolster
the policy-provided protection. Dynamic code loading
was also disabled for Java processes. At a host-level
each client and management process ran as a unique
user, which allowed further restrictions to be placed on
(cid:12)le access.
For the remainder of this paper, however, we focus
only on de(cid:12)ning and deploying network communica-
tion policies. From a prevention perspective, DPASA’s
goal was to block the attacker using the DiD strat-
egy illustrated in Figure 2 (the defense layer is shown
in boldface while the prevention technology(s) used at
that layer appears in italics). At the system layer, re-
dundant hosts were deployed so that the failure of a
single host would not stop the entire system. At the
network layer, authorized enclave-to-enclave commu-
nication was enforced and encrypted by a VPN (cid:12)re-
wall/router. At the host layer, authorized host-to-host
communication was enforced by the Autonomic Dis-
tributed Firewall (ADF)[16]. ADF is a host-based,
embedded, distributed (cid:12)rewall that is implemented on
the host’s network interface card (NIC) and performs
ingress and egress packet (cid:12)ltering. It protects the host
from the network, and it protects the network from
the host. In addition, all host-to-host communication
was encrypted using ADF’s Virtual Private Groups
(VPG)[15], which provided a unique encryption key for
each collection of hosts. At the process layer, autho-
rized process behavior was enforced either by NSA’s
SELinux3 or by Cisco Corp’s Cisco Security Agent4
1http://www.infosperics.org
2Designing Protection and Adaptation into a Survivability
Architecture
3http://www.nsa.gov/selinux
4http://www.cisco.com
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Baseline JBI (left) and Survivable JBI
(CSA) for non-Linux hosts. At the application layer,
authorized JBI application behavior was enforced by
the Java Virtual Machine (JVM).
Redundant Hosts
VPN Firewall/Router
ADF
SELinux / CSA
JVM
JBI
Applic.
Process
Host
Network
System
Figure 2. An attacker’s perspective of DPASA
Defense in Depth
Constructing network communication security pol-
icy proved challenging on several fronts. Clearly the
richness of DPASA’s DiD strategy meant signi(cid:12)cant
vertical duplication of logical policy rules across the
defense layers, but there was also signi(cid:12)cant horizontal
duplication of those rules due to the redundant enclaves
or quads in the DPASA JBI. For example, each quad
contained a di(cid:11)erent mix of operating systems in or-
der to minimize common mode failures, so the actual
policies enforced by similar hosts in each quad di(cid:11)ered
signi(cid:12)cantly (e.g., between an SELinux host versus a
CSA-enabled host) even though those hosts were per-
forming identical logical functions.
To illustrate the policy author’s challenge, Table 1
lists the policies a(cid:11)ected and rules required for autho-
rizing a simple network communication c from a JBI
Client A, in enclave EA, to the JBI core (B). The
hosts receiving the rules appear in square brackets.
Since there are four, redundant entry points into the
JBI core (called Access Proxies), we can denote them
collectively as B or individually as B1, B2, B3 and
B4. They are each in a separate enclave, denoted EB1
through EB4 , respectively. Assume that B1 is imple-
mented on a Windows host, that B2 and B3 and A are
implemented on SELinux hosts, and that B4 is imple-
mented on a Solaris host. CSA is enforced on all non-
SELinux hosts. Further assume that all Access Proxy
applications are written in Java and that while there
are six di(cid:11)erent JVM executables (Sun’s JVM on So-
laris, Windows and SELinux, BEA’s JVM on Windows
and SELinux, and IBM’s JVM on SELinux), all can en-
force the same policy. The table illustrates that even
a simple permission can a(cid:11)ect almost a dozen policies.
In addition, all of the required policy rules, except for
the network layer (VPN), are speci(cid:12)c to c and cannot
be reused.
This simple example highlights the challenge of en-
forcing even a simple network communication rule
across the various layers, but DPASA’s network com-
munication needs were far more complex. While
DPASA relied on only 25 or so distinct network ser-
vices, there were more than 570 network communica-
tion requirements, across more than 40 hosts, naming
these services, and each requirement was subject to the
analysis described in Table 1. Figure 3 illustrates the