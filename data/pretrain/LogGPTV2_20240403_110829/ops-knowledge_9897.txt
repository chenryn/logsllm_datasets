User: 请回答以下安全问题密码散列还有更多的功能吗？你有一个纯文本密码和salt。明文密码被认为是安全随机的，只有用户知道，salt不是秘密，不一定是唯一的，而是与生成的哈希一起存储。单独调用以下内容并存储结果是否足够？
password_hash=哈希（password||salt）
其中Hash当前被认为是“安全”的哈希函数（sha512、BCrypt等）
人们做得更多吗？例如：
多次迭代：运行多次迭代有巨大的好处吗？如果是，这纯粹是成本优势吗？迭代次数是动态的还是静态的？有多少次迭代？
多重散列函数：使用多重散列函数会有优势吗？例如，三轮，sha512-&gt；B加密-&gt；sha512？
盐混合人们是在密码中嵌套盐，还是只是在末尾/开头连接？例如，将普通密码分成四个部分，将salt分成三个部分，并将每个salt部分连接到每个密码部分之间。
独特的方案：为每个不同的项目编写一个独特的password_hash函数会有什么好处吗？例如，项目A的password_hash函数运行SHA512 20次，项目B的password_hash函数在每次迭代中在密码的不同端应用salt运行BCrypt 10次。
“黑魔法”：在哈希函数中添加自己的“黑魔法”有好处吗？例如，在每次迭代之前，您可以应用一些基本的逐位操作或基于简单算法混合字符。
混淆：对生成的哈希进行编码或混淆以隐藏其原始哈希函数会产生巨大的影响吗？例如在散列中添加或删除N个字符以隐藏其原始长度。
这些行动真的有必要吗？它们会产生巨大的影响吗（如果是的话，以什么方式）？人们在实践中会使用像上面提到的那样的额外行动吗？
我的想法：
最终，对密码所做的一切都不会阻止某人使用愚蠢的密码（如“密码”或“123”）；将不得不采取与这个问题无关的其他方法。但通过多次迭代可能会使计算成本更高，从而减慢或使暴力攻击变得不可行。
上面提到的大多数操作都会对那些已经访问了用户列表（电子邮件、密码哈希和salts）并希望恢复普通密码的人产生很大的影响。它不会阻止一个坚定的黑客，但会阻止并希望减缓他们的速度，让你有足够的时间做出适当的更改或行动，以保护被泄露的账户。
然而，这在很大程度上违背了“攻击者无所不知”的观点。假设攻击者能够看到密码散列是如何生成的（源代码和模式），那么就没有什么区别了。这与将数据库表的列名从password更改为ahoy一样重要
无论如何，仅仅使用password_hash=hash（password||salt）似乎太简单了。人们肯定会做得更多吗？

Assistant: 多次迭代-这很有帮助。它被称为密钥增强，并提高了计算的复杂性。例如，如果你的密钥强化因子为1000，攻击者可以在相同的GPU/CPU时间内尝试1000个可能更少的密码。
多个散列函数-理论上这是有帮助的，但在实践中却没有。这种情况是，如果使用的一个哈希函数以某种方式被破坏（例如，您可以通过尝试明显少于2256个密码来反转任何256位哈希，或者在尝试常见密码时可以显著简化暴力强制过程），但链中使用的其他哈希函数没有被破坏。例如，您的攻击者已经破解了迭代的sha512，因此可以快速想出一个适用于sha512密钥强化N次的密码，但不能用于sha512（salt||bcrypt（salt|| sha512（salt||pw））。然而，在我看来，对于现代加密哈希函数和典型的攻击者来说，这是一种相当不可能的攻击场景——有一些唾手可得的成果不需要攻击者在计算机科学方面取得根本性进展。美国国家安全局或严肃的学术计算机科学家可能会想出破解哈希算法的聪明方法，但不是普通的恶意攻击者。此外，即使在被破坏并且通常应该避免的哈希算法（例如，MD5和SHA-1）中，它们通常也只会被破坏为冲突攻击（找到一对满足hash（s1）==hash（s2）的不同字符串s1、s2比预期快得多），而不会被破坏为镜像前攻击（给定hash h，找到满足hash的s），这是对密码哈希的相关攻击。
盐混合-这是一个实现细节，这样做不会给攻击者增加复杂性。（不存在用于复杂关键字强化的salted散列的预先计算的彩虹表。）
独特的方案-同样是一个实施细节，并且不增加任何安全性。也不要多次运行bcrypt；这太傻了。密件加密已得到密钥强化。例如，如果您使用成本为16的bcrypt进行哈希，这意味着密钥经过了2^16~65536轮，因此如果您想要更强的哈希，只需增加成本（每增加1；意味着bcrypt的速度将慢一倍）。
黑色魔法-作为一名程序员，我不建议这样做；因为黑魔法对你和你的团队来说是一场维护噩梦，对攻击者来说也不太重要。决定采用一种新技术，所以你必须在新平台上用新语言重写非标准哈希例程，除非它有很好的文档记录，否则你可能会以稍微不同的方式破坏系统。如果有充分的记录，攻击者可能会窃取你的源代码；看看这个函数对密码做了什么，然后可以用来进行暴力强制。如果他们设法窃取了你的哈希，他们可能至少有一个知道密码并窃取了哈希的帐户，所以可以尝试对其进行反向工程（即使他们没有获得源代码）。这就像在自己的服务器上破坏源代码一样。这对开发人员/维护人员来说更麻烦，而不是对攻击者来说。
困惑-不要这样做。看黑色魔法。或者只是按照Kerckhoff的原则，也就是Shannon的格言：即使敌人完全了解这个系统，也要让这个系统变得强大。困惑/黑魔法可以通过一点分析来克服，并提供一些安全性（深度防御），但不多。然而，在计算机科学没有重大进展的情况下（例如，量子计算机或破坏哈希函数），可以很容易地构建具有高熵初始密码短语/密码的强密钥增强密码哈希，使其具有数千年来完全不可行的计算复杂性，无法用宇宙中的所有计算机进行攻击。
最终，无论对密码做什么，都不会阻止某人使用愚蠢的密码（如“密码”或“123”）
事实上，我不同意这一点。根据受众的受约束程度（例如，员工必须在工作中使用它），每当设置新密码时，您可能会使简单密码无效（例如，检查泄露的约一百万个常见密码的密码列表，使所有匹配项无效，或者未通过其他最低标准：必须是8个以上的字符，带有上/下/数字/符号或20个以上的密码短语）。基本上，如果这是一个安全的应用，如果帐户被破坏，会对您的终端产生严重影响，那么这样做是个好主意。
如果你过于严格，授权用户将有负面的用户体验（因此，如果你是一个简单的网络应用或在线零售商，想要大量用户，并且并不真正担心账户被弱密码窃取，你可能不想实施严格的密码规则；但零售商应该做一些事情，比如在电子邮件/发货地址更改后要求重新输入信用卡信息，并在所有购买后发送收据电子邮件）。此外，请注意，用户在普通工作环境中将密码张贴在显示器上，最终会削弱安全性；因此，要明确用户的帐户被破坏会带来后果。