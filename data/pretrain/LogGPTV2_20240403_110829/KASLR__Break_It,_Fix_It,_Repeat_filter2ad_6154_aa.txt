title:KASLR: Break It, Fix It, Repeat
author:Claudio Canella and
Michael Schwarz and
Martin Haubenwallner and
Martin Schwarzl and
Daniel Gruss
KASLR: Break It, Fix It, Repeat
Claudio Canella
Graz University of Technology
Michael Schwarz
Graz University of Technology
Martin Haubenwallner
Graz University of Technology
Martin Schwarzl
Graz University of Technology
Daniel Gruss
Graz University of Technology
ABSTRACT
In this paper, we analyze the hardware-based Meltdown mitigations
in recent Intel microarchitectures, revealing that illegally accessed
data is only zeroed out. Hence, while non-present loads stall the
CPU, illegal loads are still executed. We present EchoLoad, a novel
technique to distinguish load stalls from transiently executed loads.
EchoLoad allows detecting physically-backed addresses from un-
privileged applications, breaking KASLR in 40 µs on the newest
Meltdown- and MDS-resistant Cascade Lake microarchitecture. As
EchoLoad only relies on memory loads, it runs in highly-restricted
environments, e.g., SGX or JavaScript, making it the first JavaScript-
based KASLR break. Based on EchoLoad, we demonstrate the first
proof-of-concept Meltdown attack from JavaScript on systems that
are still broadly not patched against Meltdown, i.e., 32-bit x86 OSs.
We propose FLARE, a generic mitigation against known microar-
chitectural KASLR breaks with negligible overhead. By mapping
unused kernel addresses to a reserved page and mirroring neigh-
boring permission bits, we make used and unused kernel memory
indistinguishable, i.e., a uniform behavior across the entire kernel
address space, mitigating the root cause behind microarchitectural
KASLR breaks. With incomplete hardware mitigations, we propose
to deploy FLARE even on recent CPUs.
CCS CONCEPTS
• Security and privacy → Operating systems security.
KEYWORDS
meltdown; side-channel attack; transient execution; kaslr; counter-
measure; reverse engineering
ACM Reference Format:
Claudio Canella, Michael Schwarz, Martin Haubenwallner, Martin Schwarzl,
and Daniel Gruss. 2020. KASLR: Break It, Fix It, Repeat. In Proceedings of
the 15th ACM Asia Conference on Computer and Communications Security
(ASIA CCS ’20), October 5–9, 2020, Taipei, Taiwan. ACM, New York, NY, USA,
13 pages. https://doi.org/10.1145/3320269.3384747
1 INTRODUCTION
CPUs are optimized for performance and efficiency. Some optimiza-
tions are exposed to the user via the instruction-set architecture
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6750-9/20/10...$15.00
https://doi.org/10.1145/3320269.3384747
(ISA), the hardware-software interface, but most are transparent
to the developer. CPU vendors can implement any optimizations
while still adhering to the ISA, without taking security into account.
As a consequence, many attacks on the microarchitectural CPU
state have been published [25]. Most of these are side-channel at-
tacks, including attacks on cryptographic algorithms [4, 45, 46, 60,
69, 71, 96], on user interactions [34, 58, 78], but also covert data
transmission [60, 62, 94, 95]. Meltdown [59], Foreshadow [87, 93],
RIDL [89], ZombieLoad [79], and Fallout [9] are recent microarchi-
tectural attacks that go beyond side-channel attacks and directly
leak (arbitrary) data instead of metadata. These attacks, commonly
referred to as Meltdown-type transient-execution attacks [10], ex-
ploit the lazy fault handling property of some CPUs. With lazy fault
handling, the CPU continues using data in the out-of-order execu-
tion even if the loading of the data resulted in a fault, e.g., failed
the privilege-level check. While the data never becomes visible on
the architectural level, it is encoded in the microarchitectural state,
i.e., in the cache. From there, it is made visible on the architectural
level using microarchitectural side-channel attacks.
Meltdown-type transient-execution attacks [10] break the hard-
ware enforced-isolation between the trusted kernel and untrusted
user programs. These attacks, which are present in most Intel CPUs,
showed that it is not always possible to protect an application
against side-channel attacks. This is contrary to the belief that side-
channel attacks have to be prevented by the application itself [5, 46].
Deeply rooted in the CPU, either close to or in the critical path,
most transient-execution attacks cannot be fixed with microcode
updates. However, on recent CPUs, Intel introduced hardware mit-
igations for the first Meltdown-type attacks [17, 39, 40]. On the
latest microarchitecture (Cascade Lake), all known Meltdown-type
attacks are mitigated in hardware [41]. However, due to their sever-
ity and the ease of exploitation, operating systems (OSs) rolled
out software-based mitigations to prevent Meltdown [30]. These
software mitigations introduce a stricter separation of user and
kernel space [31, 32]. This stricter separation does not only prevent
Meltdown but also prevents other microarchitectural attacks on the
kernel [31], e.g., KASLR (kernel address space layout randomiza-
tion) breaks [32, 37, 49] which allow an attacker to de-randomize
the location of the kernel in the address space. As a drawback,
these software mitigations may introduce significant performance
overhead. This is especially true for workloads that need frequent
switching between user and kernel space [30]. Consequently, hard-
ware manufacturers solved the underlying root cause directly in
recent CPUs, making the software mitigations obsolete.
Even though new CPUs are not vulnerable anymore to the
original Meltdown attack, we show that they still show signs of
Meltdown-type effects. In this paper, we investigate CPUs that have
hardware-based Meltdown mitigations. We analyze these fixes and
develop the hypothesis that they only prevent the data from being
used in subsequent operations, not the actual load. We confirm this
hypothesis by showing that the fixes introduce new side effects,
namely that on illegal accesses to kernel addresses, the CPU zeroes
out the data but still performs the load. In contrast, loads from non-
present pages stall the CPU. We present a method based on Flush+
Reload [96] to distinguish the stalling behavior of loads. With this
method, we can exploit the side effects of the Meltdown mitigations
to break KASLR reliably. By probing the kernel space for load stalls,
we detect whether the probed virtual address is physically backed,
revealing the location of the kernel. We demonstrate that these
effects can also be exploited on older CPUs, which are affected by
Meltdown but protected by software mitigations.
Our KASLR break, EchoLoad, works on all major OSs (Linux,
Windows, macOS, and Android x86_64). We tested the KASLR break
on Intel microarchitectures from Arrandale (2010) to Cascade Lake
(2019) on Atom, Core, and Xeon CPUs. Even on Cascade Lake with
fixes for Meltdown and MDS [41], we de-randomize the kernel in
40 µs (F-score 1, n = 109). Hence, our KASLR break is the fastest
and most reliable one published. Moreover, EchoLoad is the only
KASLR break that only relies on memory loads and works on Intel
microarchitectures since at least 2010. EchoLoad even works on
KPTI, the Linux software mitigation for Meltdown.
As EchoLoad does not require anything but memory loads, it
works in restricted environments such as SGX and JavaScript. We
highlight that EchoLoad can aid kernel exploitation from within
SGX enclaves, facilitating SGX malware [81, 82]. In contrast to
previous ASLR breaks from JavaScript [7, 29, 76], we are the first
to demonstrate a microarchitectural KASLR break from JavaScript
on x86 OSs. We also show that on older unpatched x86 OSs, Melt-
down can even be exploited from JavaScript. This is particularly
dangerous for any Windows XP machines (1–3% of Desktop com-
puters [68]), for which no software patches are available, but which
are still running in official, commercial, industrial, or personal en-
vironments. Our attack will also soon be possible on unprotected
64-bit systems as WebAssembly plans to extend the size of linear
memory indices to 64 bit [91]. We pinpoint the remaining challenges
for widely deployable JavaScript-based Meltdown exploits.
To mitigate all microarchitectural attacks on KASLR, including
EchoLoad, we present FLARE (Fake Load Address REsponse). The
basic idea is to back the entire kernel address space with physical
pages. FLARE prevents previous attacks [9, 32, 37, 49, 76] by hiding
the kernel within a virtual-address range appearing to be valid. Our
proof-of-concept implementation has a memory overhead of only
12 kB, and no measurable runtime overhead.
FLARE is compatible with KPTI on Meltdown-affected CPUs,
and forms a low-cost mitigation on CPUs with hardware fixes. We
evaluated our open-source proof-of-concept implementation of
FLARE1 for Linux for both cases. Our results show that FLARE
indeed prevents all known microarchitectural attacks on KASLR.
We conclude that while the hardware mitigation for Meltdown
fixes the problem of Meltdown-US [10], they introduce a new side
effect by merely zeroing out data that is illegally accessed, enabling
EchoLoad. Based on our analysis of the behavior of AMD and ARM
CPUs, we believe that the only complete solution for Meltdown is
1https://github.com/IAIK/FLARE
to treat inaccessible pages the same way as unmapped pages. Fur-
thermore, the software-based isolation of user and kernel space [31]
is not sufficient, and we thus suggest to deploy FLARE to prevent
microarchitectural attacks on the kernel.
Contributions. The contributions of this work are:
(1) We analyze Meltdown hardware fixes on Intel CPUs and dis-
cover a Meltdown-related effect on Meltdown-fixed Intel CPUs.
(2) We present KASLR and ASLR breaks, even from SGX and in-
cluding the first KASLR break from JavaScript.
(3) We show a JavaScript Meltdown attack on 32-bit x86.
(4) We propose FLARE, a mitigation preventing currently known
microarchitectural attacks on KASLR with negligible overhead.
Outline. Section 2 provides background on ASLR and attacks on
ASLR. We analyze Meltdown hardware fixes in Section 3. Section 4
presents our new mitigation for microarchitectural KASLR breaks.
Section 5 evaluates FLARE’s performance and efficacy against at-
tacks. Section 6 discusses related work. Section 7 concludes.
Responsible Disclosure. We responsibly disclosed our findings
to Intel on August 5, 2019, and Intel acknowledged them.
2 BACKGROUND
In this section, we provide the background on caches, transient
execution and transient-execution attacks, virtual memory, Intel
SGX, and address space layout randomization (ASLR).
2.1 Cache Attacks
Caches were designed to hide the latency of memory accesses, creat-
ing a timing side channel. Over the past two decades, many different
attack techniques have been proposed [5, 33, 54, 69, 96]. Two of
these attacks are Prime+Probe [69, 71] and Flush+Reload [96]. In a
Prime+Probe attack, an attacker constantly measures how long it
takes to fill a cache set with the same set of data. Whenever a victim
accesses a cache line mapping to the same cache set, the attacker
will measure a higher runtime for the filling. In a Flush+Reload
attack, an attacker constantly flushes a cache line and reloads the
data. By measuring how long the reload takes, the attacker can
infer whether a victim has accessed the data in the meantime. As
Flush+Reload exhibits low noise and has a fine granularity, it has
been used for attacks on user input [34, 58, 78], cryptographic
algorithms [4, 46, 96], and web server function calls [97].
Side channels can also be used to build covert channels. In a
covert channel, the attacker controls both the sender and receiver.
The goal is then to leak information from one security domain to
another, bypassing isolation on both the functional and system
level. Both Prime+Probe and Flush+Reload have been used in high-
performance covert channels [33, 60, 62].
2.2 Transient-execution Attacks
Another optimization is out-of-order execution, avoiding CPU stalls
when in-order instructions wait for operands. Instructions are
decoded into micro-operations (µOPs) [22] and placed in the Re-
Order Buffer (ROB), along with their operands. While waiting for
operands, µOPs whose operands are already available are scheduled
in the meantime. Results of the out-of-order executed instructions
are stored until they can be retired.
Modern software is rarely linear but contains branches. To avoid
pipeline stalls upon unresolved branch conditions, modern CPUs
implement speculative execution, predicting the most likely out-
come of the branch and starting execution along the predicted
path. The results are again placed in the ROB until retirement, i.e.,
the prediction has been verified. If the prediction was correct, a
significant speedup is achieved. Otherwise, the CPU has to revert
all results and needs to flush the pipeline and the ROB. Unfor-
tunately, microarchitectural state changes, such as loading data
into the cache or TLB, are not reverted. This allows an attacker to
use microarchitectural covert channels to exfiltrate the secret data.
Speculative or out-of-order executed instructions that were never
committed to the architectural state are also referred to as transient
instructions [10, 53, 59]. Spectre-type attacks exploit transient exe-
cution before a misprediction is discovered [10, 36, 51, 53, 55, 61].
Meltdown-type attacks exploit transient execution before a fault or
interrupt is handled [3, 9, 10, 39, 40, 51, 59, 79, 85, 87, 89, 93].
Meltdown. Meltdown exploited lazy exception handling in mod-
ern CPUs [59]. The attacker triggers a page fault but suppresses
it via fault handling, TSX transactions, or misspeculation. While
the CPU knows that the access is not allowed, the exception is
only raised at the retirement stage. Hence, dependent instructions
receive the data and can then, e.g., encode the value in the cache
which the attacker can leak using a technique like Flush+Reload.
2.3 Intel SGX
In recent years, software vendors discovered that specific security
properties, e.g., for DRM, in theory, are much easier to achieve
with trusted-execution mechanisms. Consequently, hardware ven-
dors reacted and developed different trusted-execution environ-
ments [1, 42, 50]. Intel developed an instruction-set extension called
Software Guard Extension (SGX) [42]. With SGX, an application is
split into a trusted and an untrusted part. To protect the former, it
is executed within a hardware-backed enclave. In the SGX threat
model, neither the OS nor any other application is trusted. There-
fore, the CPU guarantees that any memory belonging to the enclave
cannot be accessed by anyone else than the enclave. The SGX threat
model also allows the remaining hardware to be malicious or com-
promised. Consequently, the SGX memory is encrypted, protecting
it from being directly read from the DRAM module. Additional
threats like memory-safety violations [56], side channels [8, 82], or
race conditions [77, 92] are considered out of scope and remain an
enclave developer’s responsibility.
The SGX interface to let the untrusted part enter an enclave
conceptually resembles system calls. Once the trusted execution is
finished, the result of its computation as well as the control flow
is returned to the callee. However, SGX protection mechanisms
are one-sided: SGX allows data sharing between the trusted and
the untrusted part by giving enclaves full access to the entire host
application’s address space. Recently, it has been shown that this
asymmetric protection gives rise to enclave malware [81].
2.4 Address Translation
Modern OSs rely on memory isolation for security purposes. Hence,
CPUs support virtual memory for abstraction and memory iso-
lation. Processes work on virtual addresses and cannot architec-
turally interfere with each other as the virtual address spaces are
non-overlapping and overlapping areas are protected according to
the processes’ requirements. These virtual addresses have to be
translated to physical addresses using multi-level page tables. A
dedicated translation-table register indicates the location of the
first-level table, e.g., CR3 on Intel architectures. Upon a context
switch, the OS updates the translation-table register with the phys-
ical address of the first-level page table of the process scheduled
next. Page-table entries do not only provide translations but also
define properties of memory regions, e.g., executable or not.
2.5 Address Space Layout Randomization
Since the introduction of non-executable (NX) bits, memory cor-
ruption attacks have to rely on existing code in the victim pro-
cess instead of code injection [86]. Shacham et al. [83] generalized
the concept of code-reuse attacks, which is now widely known as
return-oriented programming (ROP). Subsequently, a variety of
code-reuse attack techniques have been described [6, 12, 13, 28, 75].
Code-reuse attacks require knowing addresses of specific code
snippets. Similarly, data-only attacks [11, 47] require knowledge
of addresses, e.g., of specific data structures. Over the years, many
different mitigation techniques have been developed [86], e.g., NX
stacks, stack canaries, and ASLR. The idea behind ASLR is to make
the addresses of code and data unknown to an attacker by ran-
domizing them. Typically, ASLR randomizes the base address of
the executable, stack, heap, and shared libraries. Hence, even if an
attacker hijacks the control flow, it is significantly harder to exploit
bugs in an application as the location of code snippets usable for
code-reuse attacks is unknown. By brute-forcing the location, the
chances are high that the process will crash, and any ongoing attack
is unsuccessful. Furthermore, an application is re-randomized on
every startup, reducing the chances of a successful attack.
General Idea of KASLR. While ASLR initially only protected