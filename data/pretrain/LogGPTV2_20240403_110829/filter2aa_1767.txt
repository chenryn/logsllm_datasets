>>
>>
Process injection
Breaking All macOS Security Layers
With a Single Vulnerability
>>
Hello!
I’m
Security researcher at Computest
Thijs Alkemade
>Thijs Alkemade (@xnyhps)
>Security researcher at Computest
>Computest research lab: Sector 7
>Other recent work includes:
- 0click Zoom RCE at Pwn2Own 
Vancouver 2021
- Winning Pwn2Own Miami 2022 with 5 
ICS vulnerabilities
About me
1. macOS security model
2. CVE-2021-30873: process injection using saved states
3. Using process injection for:
- Sandbox escape
- Privilege escalation
- SIP bypass
In this talk
macOS security model
In macOS 12 Monterey
>Users are security boundaries, 
processes are not
>File permissions: POSIX flags
>Attach debugger: target must run 
as same user
>root has full access
Old *NIX security model
>“Dangerous” operations now require the application to have an 
entitlement
- Loading a kernel extension
- Modifying system files
- Debugging system processes
>More and more restrictions in each macOS release
- Debugging any app is now restricted
- “Data vaults” with restricted file access
SIP restrictions
>Process A executing code “as” 
process B
>Many techniques are restricted by 
SIP
>Hardened runtime prevents it in 
apps:
- No DYLD_* environment variables
- Library validation
>But macOS is old, and large…
Process injection
>Common in third-party app
>Abuse TCC permissions: access webcam, microphone, etc.
>Downgrade attacks often work
>What’s better than process injection in one app? Process injection 
everywhere!
Process injection
CVE-2021-30873
Process injection in AppKit
>Re-opening the windows of an app 
when relaunched
>Restores unsaved documents
>Works automatically, can be 
extended by developers
Saved state feature
>Stored in:
- ~/Library/Saved Application 
State/.savedState
>windows.plist
- array of all windows, each with an 
encryption key
>data.data
- custom format, AES-CBC encrypted 
serialized object per record
Saved state storage
>Insecure deserialization can lead 
to RCE
- Well known in C#, Java, Python, Ruby…
>Apple’s serialization is NSCoding
>Added NSSecureCoding in 10.8 
(2012)
Serialization vulnerabilities
// Insecure
id obj = [decoder decodeObjectForKey:@"myKey"];
if (![obj isKindOfClass:[MyClass class]]) { /* ...fail... */ 
}
// Secure
id obj = [decoder decodeObjectOfClass:[MyClass class]
forKey:@"myKey"];
1. Create a saved state using a malicious serialized object
2. Write it to the saved state directory of the other app
3. Launch other app
4. App automatically deserializes our object
5. Execute code in the other app!
Exploiting for process injection
>ysoserial-objective-c?
>Google Project Zero writeups?
What object to write?
Insecure deserialization with NSCoding
And defeating the hardened runtime by executing Python
>Disassemble -initWithCoder: methods
>Surprisingly, many classes do not support secure coding!
>…but in most cases it only recursively decodes instance variables
Search for an object chain
> NSRuleEditor creates a binding to a keypath also from the archive:
ID NSRuleEditor::initWithCoder:(ID param_1,SEL param_2,ID unarchiver)
{
...
id arrayOwner = [unarchiver decodeObjectForKey:@"NSRuleEditorBoundArrayOwner"];
...
if (arrayOwner) {
keyPath = [unarchiver decodeObjectForKey:@"NSRuleEditorBoundArrayKeyPath"];
[self bind:@"rows" toObject:arrayOwner withKeyPath:keyPath options:nil];
}
...
}
> Result: call any zero-argument method on a deserialized object
Step 1: NSRuleEditor
> NSCustomImageRep obtains an object and selector from the archive:
ID NSCustomImageRep::initWithCoder:(ID param_1,SEL param_2,ID unarchiver)
{
...
self.drawObject = [unarchiver decodeObjectForKey:@"NSDrawObject"];
id drawMethod = [unarchiver decodeObjectForKey:@"NSDrawMethod"];
self.drawMethod = NSSelectorFromString(drawMethod);
...
}
Step 2: NSCustomImageRep
> NSCustomImageRep in –draw then calls the selector on the object:
void ___24-[NSCustomImageRep_draw]_block_invoke(long param_1)
{
...
[self.drawObject performSelector:self.drawMethod withObject:self];
...
}
> Result: call any method on a deserialized object (limited control over arguments)
Step 2: NSCustomImageRep
1. Call zero-argument methods on deserialized objects
2. Call any method on deserialized objects
3. Create objects not implementing NSCoder
4. Call zero-argument methods on arbitrary objects
5. Call any method on arbitrary objects
6. Evaluate AppleScript
7. Evaluate AppleScript with the AppleScript-Objective-C bridge
8. Evaluate Python
9. Import ctypes
10.Execute code equivalent to native code
Deserialization to arbitrary code execution
Exploitation
Sandbox escape
Window: the app
Contents: openAndSavePanelService
>Open/save panel loaded its saved 
state from the same files as the 
app!
- Write new object in the app’s own 
saved state directory
- Open a panel
- Sandbox escaped!
>Fixed in 11.3: no long shares 
directory
Sandbox escape
Exploitation
Privilege escalation to root
>Use the same technique as 
“Unauthd - Logic bugs FTW” by 
Ilias Morad
>First, find an app with 
entitlement:
com.apple.private.AuthorizationServices
containing:
system.install.apple-software
Privelege escalation
>Then, install this package to a 
RAM disk
>It runs a post-install script from 
the target disk as root
- Target disk may not even have macOS!
- Mounting a RAM disk does not require 
root
Privilege escalation
Exploitation
SIP filesystem bypass
>App from the macOS Big Sur beta 
installation dmg
>Has the entitlement:
- com.apple.rootless.install.her
itable
>Very powerful entitlement: access 
all SIP protected files!
- Heritable as a bonus, so can spawn a 
reverse shell
SIP filesystem bypass
>Read mail, messages, Safari 
history, etc. of all users
>Grant ourselves permission for 
webcam, microphone, etc.
>Powerful persistence (SIP 
protected locations, delete MRT)
>Load a kernel extension without 
user approval
SIP filesystem bypass: result
The fixes
>In Monterey, apps can indicate if it accepts only secure serialized objects in 
its saved state
- Already enabled for Apple’s apps
- Existing apps may want to store objects that do not implement secure deserialization
- Unclear if exploitable when apps don’t use custom serialized objects
>Reported December 4, 2020
>Sandbox escape fixed (CVE-2021-30659) in 11.3 (April 26, 2021)
>Fix introduced in macOS Monterey 12.0.1 (October 25, 2021)
- Not backported to Big Sur or Catalina!
The fixes
Conclusion
>macOS has a security boundary between processes
>Process injection vulnerabilities can be used to break those boundaries
>CVE-2021-30873 was a process injection vulnerability affecting AppKit apps
>We used it to escape the sandbox, privilege escalation, bypassing SIP
>Fixed by Apple in Monterey (only!)
Conclusion
>macOS security keeps adding more and more defensive layers
>Adding new layers to an established system is hard
- Code written 10+ years ago without security requirements is today’s attack surface
>Effort of attackers may not increase with more layers
- Use the same bug for multiple layers or skip layers
Black Hat Sound Bytes
> https://wojciechregula.blog/post/abusing-electron-apps-to-bypass-macos-security-
controls/
> https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-1.html
> https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html
> https://a2nkf.github.io/unauthd_Logic_bugs_FTW/
> https://mjtsai.com/blog/2015/11/08/the-java-deserialization-bug-and-nssecurecoding/
> https://developer.apple.com/documentation/foundation/nssecurecoding?language=objc
> https://github.com/frohoff/ysoserial
> https://github.com/pwntester/ysoserial.net
References