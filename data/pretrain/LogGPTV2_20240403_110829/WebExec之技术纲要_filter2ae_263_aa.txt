# WebExec之技术纲要
这是我们称之为“WebExec”的漏洞的技术纲要。
摘要：WebEx的WebexUpdateService中的缺陷允许任何登录到安装了WebEx的Windows系统的人远程执行SYSTEM级命令。这个不在任何端口上侦听的客户端应用程序实际上容易受到远程代码执行的攻击！本地用户或者域用户将使其成为通过网络进行转换的有效方式，直到它被修复。
 上的高级详细信息和常见问题解答！下面是我们如何发现错误及其工作原理的技术文章。
# 关于漏洞
此漏洞被[我](https://twitter.com/iagox86)和来自 [Counter
Hack](https://www.counterhackchallenges.com/)的[Jeff
McJunkin](https://twitter.com/jeffmcjunkin)在一次常规的渗透测试发现。感谢[Ed
Skoudis](https://twitter.com/edskoudis)允许发布此文章。
如果您有任何问题或疑虑，我专门针对此问题制作了电子邮件；[PI:EMAIL](PI:EMAIL)！
你可以下载一个存在漏洞的的[安装版本](https://downloads.skullsecurity.org/webexapp-2018-08-30.msi)和[补丁](https://downloads.skullsecurity.org/webexapp-2018-10-03.msi)，如果你想用这个自己玩，那不言而喻，但如果你运行易受攻击的版本，请小心！
# 介绍
在最近的一次测试中，我们在尝试提升最终终端用户笔记本电脑上的本地权限时，在WebEx客户端软件中发现了一个有趣的漏洞。最终，我们意识到此漏洞也可远程利用（给定任何域用户帐户）并决定为其命名：WebExec。因为每个好漏洞都有一个名字！
据我们所知，对第三方Windows服务的远程攻击是一种新型攻击。我们称这堂课为"thank you for your
service"，因为我们可以祈祷我们能有更多利用的点。  
WebEx的实际版本是截至2018年8月的最新客户端版本：版本3211.0.1801.2200,修订版7/19/2018SHA1：bf8df54e2f49d06b52388332938f5a875c43a5a7。从那时起，我们测试了一些较旧版本和较新版本，但它们仍然很脆弱。
WebEx在10月3日发布补丁，但要求我们不要披露，直到他们发布他们的公告。您可以在webexec.org上找到所有修补说明。
好消息是，此服务的修补版本只会运行由WebEx签名的文件。坏消息是，那里有很多(包括易受攻击的服务版本!)，服务仍然可以远程启动。如果您担心任何用户(您应该是!)可以远程启动该服务，则以下命令将禁用该功能：
`c：\> sc sdset webexservice D：（A ;; CCLCSWRPWPDTLOCRRC ;;; SY）（A ;;
CCDCLCSWRPWPDTLOCRSDRCWDWO ;;; BA）（A ;; CCLCSWRPWPLORC ;;; IU）（A ;;
CCLCSWLOCRRC ;;; SU）S ：（AU; FA; CCDCLCSWRPWPDTLOCRSDRCWDWO ;;; WD）`
这将从服务中删除远程和非交互式访问。但是，如果没有补丁，它仍然会受到本地特权升级的影响。
# 提升权限
最初引起我们注意的是文件夹`(c：\ ProgramData \ WebEx \ WebEx \
Applications\)`是每个人都可读写的，它安装了一个名为“webexservice”的服务，可以由任何人启动和停止。这不好！用我们喜欢的任何东西替换.exe或相关的.dll，并在服务级别（即SYSTEM）执行代码是微不足道的。这是一个直接的漏洞，我们报道过，ZDI显然比我们抢先一步，因为根据他们的[报告](https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20180905-webex-pe)，这个漏洞是在2018年9月5日确定的
由于应用程序白名单，然而，在这个特定的评估上，我们不能简单地用一个shell替换它!服务非交互式地启动(例如，没有窗口和命令行参数)。我们探索了许多不同的选项，例如用其他二进制文件(例如cmd.exe)替换.exe，但是没有GUI就意味着不能运行命令。
一个近乎有效的测试是将.exe替换为另一个列入白名单的应用程序msbuild.exe，该应用程序可以从同一目录中的.vbproj文件中读取任意C＃命令。但因为它是一个服务，它运行在工作目录`c：\windows\system32`，我们无法写入该文件夹！
在那一刻，我的好奇心占了上风，我决定研究一下`webexservice.exe`实际上在引擎盖下面。这次深度潜水最终发现了金子!让我们来看看
# 深入研究WebExService.exe
这不是一个很好的座右铭，但是当我有疑问的时候，我倾向于在IDA中打开一些东西。了解进程在IDA中的作用的两种最简单的方法是strings窗口(shift-F12)和import窗口。以webexservice.exe为例，大多数字符串都与Windows服务相关，但有些东西吸引了我：
    .rdata：0040543 8  ; wchar_t aSCreateprocess 
      .rdata：0040543 8  aSCreateprocess :                         ; DATA XREF：sub_4025A0 + 1E8o 
      .rdata：0040543 8                  unicode  0， ，0
我在advapi32.dll中找到了 **CreateProcessAsUserW** 的导入，并查看了它的调用方式：
    .text:0040254E                 push    [ebp+lpProcessInformation] ; lpProcessInformation
      .text:00402554                 push    [ebp+lpStartupInfo] ; lpStartupInfo
      .text:0040255A                 push    0               ; lpCurrentDirectory
      .text:0040255C                 push    0               ; lpEnvironment
      .text:0040255E                 push    0               ; dwCreationFlags
      .text:00402560                 push    0               ; bInheritHandles
      .text:00402562                 push    0               ; lpThreadAttributes
      .text:00402564                 push    0               ; lpProcessAttributes
      .text:00402566                 push    [ebp+lpCommandLine] ; lpCommandLine
      .text:0040256C                 push    0               ; lpApplicationName
      .text:0040256E                 push    [ebp+phNewToken] ; hToken
      .text:00402574                 call    ds:CreateProcessAsUserW
最后的 **W** 指的是函数的UNICODE("wide")版本。在开发Windows代码时，开发人员通常在代码中使用
**CreateProcessAsUser** ，编译器将其扩展为 **CreateProcessAsUserA** (ASCII)和
**CreateProcessAsUserW** (UNICODE)。如果您查找 **CreateProcessAsUser**
的函数定义，您将找到需要知道的所有内容。
在任何情况下，这里最重要的两个参数是 **hToken** \- 它创建进程的用户 - 和 **lpCommandLine** \-它实际运行的命令。我们来看看每一个参数！
# hToken
**hToken**
后面的代码实际上非常简单。如果我们在调用CreateProcessAsUserW的函数中向上滚动，我们可以只查看API调用，以了解发生了什么。您很快就会看到，仅仅基于API调用序列来理解代码在做什么，在Windows应用程序中会运行得相当好。
在函数的顶部，我们看到：
`.text:0040241E call ds:CreateToolhelp32Snapshot`
这是在Win32中搜索特定进程的一种常见方式——它创建运行进程的“快照”，然后通常使用Process32FirstW和Process32NextW遍历这些进程，直到找到所需的进程。很久以前，当我编写[注入器工具](https://github.com/iagox86/old-injector)将一个定制的.dll加载到另一个进程中时，我甚至使用了[完全相同的技术](https://github.com/iagox86/old-injector/blob/master/Injection.h#L80)，这是我15年前写的)
基于对api的简单了解，我们可以推断出它正在搜索一个特定的进程。如果我们继续向下滚动，就可以找到对wcsicmp的调用，这是微软对UNICODE字符串使用stricmp的一种用法:
    .text:00402480                 lea     eax, [ebp+Str1]
      .text:00402486                 push    offset Str2     ; "winlogon.exe"
      .text:0040248B                 push    eax             ; Str1
      .text:0040248C                 call    ds:_wcsicmp
      .text:00402492                 add     esp, 8
      .text:00402495                 test    eax, eax
      .text:00402497                 jnz     short loc_4024BE
具体来说，就是将每个进程的名称与“winlogon.exe”进行比较——所以它试图获得一个“winlogon.exe”句柄的过程!
如果我们继续执行这个函数，您将看到它调用OpenProcess，然后是OpenProcessToken，然后是duplicateatetokenex。这是另一个常见的API调用序列——这是一个进程如何获得另一个进程令牌的句柄。不久之后，它复制的令牌作为hToken传递给CreateProcessAsUserW。
总结一下:这个函数获得了winlogon.exe的句柄，复制其令牌，并将新进程创建为相同的用户(系统)。现在我们要做的就是找出这个过程是什么!
这里有一个有趣的结论:我根本没有真正地阅读程序集来确定这些内容:我只是遵循API调用。通常来说，逆向Windows应用程序就是这么简单!
# lpCommandLine
这让事情变得有点复杂，因为需要遍历一系列函数调用来计算lpCommandLine。我必须使用倒车、调试、故障排除和eventlogs组合来确定lpCommandLine来自哪里。这花了整整一天的时间，所以不要因为这个简短的总结而气馁——我跳过了很多的死胡同和验证，只保留了有趣的部分。
一个这样的死胡同:我最初从CreateProcessAsUserW开始向后工作，或者从main()开始向前工作，但是我很快就迷失在杂草中，决定走另一条路。然而，在滚动时，我注意到许多调试字符串和对事件日志的调用。这给了我一个主意——我打开了Windows事件查看器(eventvwr.msc)，并尝试用sc
start webexservice开始这个过程:
    C：\ Users \ ron> sc start webexservice SERVICE_NAME：webexservice
             TYPE                ：10 WIN32_OWN_PROCESS STATE               ：2 START_PENDING 
                                    （NOT_STOPPABLE，NOT_PAUSABLE，IGNORES_SHUTDOWN）
    [...]
您可能需要配置事件查看器来显示应用程序日志中的所有内容，我并不知道自己在做什么，但最终我为WebExService.exe找到了一个日志条目:
`ExecuteServiceCommand::Not enough command line arguments to execute a service
command.`
那很方便!让我们在IDA (alt+T)中搜索它!这样就引出了这个代码:
    .text:004027DC                 cmp     edi, 3
      .text:004027DF                 jge     short loc_4027FD
      .text:004027E1                 push    offset aExecuteservice ; "ExecuteServiceCommand"
      .text:004027E6                 push    offset aSNotEnoughComm ; "%s::Not enough command line arguments t"...
      .text:004027EB                 push    2               ; wType
      .text:004027ED                 call    sub_401770
一个很小的实际反转:比较edit和3，如果大于或等于就跳转，否则打印输出提示我们需要更多命令行参数。确定我们需要2个或更多命令行参数并不需要很大的逻辑飞跃(因为进程的名称也总是被计算在内)。让我们试一试:
    C：\ Users \ ron> sc start webexservice ab 
    [...]
然后再次检查事件查看器:
`ExecuteServiceCommand::Service command not recognized: b.`
你不喜欢冗长的错误信息吗?就好像我们根本不需要思考!再一次，在IDA(alt+T)中搜索那个字符串，我们发现自己在这里:
    .text:00402830 loc_402830:                             ; CODE XREF: sub_4027D0+3Dj
      .text:00402830                 push    dword ptr [esi+8]
      .text:00402833                 push    offset aExecuteservice ; "ExecuteServiceCommand"
      .text:00402838                 push    offset aSServiceComman ; "%s::Service command not recognized: %ls"...
      .text:0040283D                 push    2               ; wType
      .text:0040283F                 call    sub_401770
如果我们向上滚动一点来确定如何得到错误信息，我们会发现:
    .text:004027FD loc_4027FD:                             ; CODE XREF: sub_4027D0+Fj
      .text:004027FD                 push    offset aSoftwareUpdate ; "software-update"
      .text:00402802                 push    dword ptr [esi+8] ; lpString1
      .text:00402805                 call    ds:lstrcmpiW
      .text:0040280B                 test    eax, eax
      .text:0040280D                 jnz     short loc_402830 ; <-- Jumps to the error we saw
      .text:0040280F                 mov     [ebp+var_4], eax
      .text:00402812                 lea     edx, [esi+0Ch]
      .text:00402815                 lea     eax, [ebp+var_4]