实例2.8、2.9、2.12、2.14和2.15
66第2章
www.TopSage.com
---
## Page 83
2.14消除不必要的回溯
问题描述
上一个实例解释了贪心和懒情量词之间的区别，以及它们是如何进行回溯的。在有些
情形下，这种回溯是不必要的。
\b\d+\b>使用了一个贪心量词，而\b\d+?\b>使用的是懒情量词。它们都会匹配相同的
内容：一个整数。如果给它们同样的目标文本，它们都会找到完全一样的匹配。在这
里所做的任何回溯都是不必要的。试着改写这个正则表达式，明确地消除所有回溯，
使正则表达式更加高效。
解决方案
\b\d++\b
正则选项：无
正则流派：Java、PCRE、Per15.10、Ruby1.9
最容易的解决方案是使用一个占有量词。但是它只在几种最近的正则流派中才提供支持。
\b(?>\d+)\b
正则选项：无
正则流派：.NET、Java、PCRE、Perl、Ruby
一个原子分组可以提供完全一样的功能，但是需要使用稍微不是那么易读的语法。对
原子分组的支持相比占有量词来说更为广泛。
JavaScript和Python都不支持占有量词或原子分组。因此在这两种正则流派中无法消除
不必要的回溯。
讨论
占有量词（possessivequantifier）与贪心量词是类似的：它也会试图去重复尽可能多的次
数。它们之间的区别是占有量词永远不会回退，即使在回退是能够匹配正则表达式剩余
部分的唯一手段的时候也不会这样去做。占有量词也不会记录任何可能的回溯位置。
可以通过在一个量词之后添加一个加号来把它变成占有量词。例如，、
和{7,42}+>都是占有量词。
在Java4或者更新版本中，也就是在Java发布中包含了java.util.regex包之后，就提供
了对占有量词的支持。本书中介绍的PCRE的所有版本（版本4～7）都支持占有量词。
Perl从5.10版本也开始支持它们。经典的Ruby正则表达式不支持占有量词，但是
Oniguruma引擎，也就是Ruby1.9中使用的默认引擎是支持占有量词的。
在原子分组（atomicgroup）外面包-个贪心量词同使用一个占有量词会产生完全相同
正则表达式的基本技巧
67
www.TopSage.com
---
## Page 84
的效果。当正则引擎退出原子分组的时候，量词会记住所有的回溯位置，并且分组中
的可选项都会被丢弃。所使用的语法是(?>regex》，其中regex)可以是任意正则表达式。
一个原子分组本质上是-个非捕获分组，加上拒绝回溯的功能。这里的问号不是量词；
原子分组的起始括号中包括了三个字符)。
当把正则表达式\b\d++\b>（占有版本）应用到123abc456的时候，\b）会匹配目标文
本的开始，则会匹配123。到目前为止，这和。
使用原子分组的匹配过程本质上是一样的。当你把正则表达式（b（?>\d+)\b>（占有版本）
应用到123abc456之上时，在目标文本的开始处会匹配单词边界。接着正则引擎会进
入原子分组，会匹配123。现在引擎退出原子分组。在这一点上，由所记住
的回溯位置都被丢弃了。当第二个失败的时候，正则引擎没有其他选择，只能离
开，因此会导致这次匹配尝试立即失败。与占有量词的版本一样，最终456会被找到。
在我们的解释中，占有量词不会去记住回溯位置，而原子分组则会把回溯位置丢弃。
这样会更容易理解匹配过程，但是读者也不要太在意这里的区别，因为很可能在你所
使用的正则流派中根本不存在这样的区别。在许多流派中，（x++>仅仅是(?>x+)语法
上的简写，而二者的实现则完全是一模一样的。至于引擎是从来没有记住回溯位置，
还是说它稍后会把这些位置丢弃，对于匹配尝试的最后结果来说是根本无关紧要的。
占有量词和原子分组的不同之处是占有量词只应用于单个正则表达式记号，而原子分
组则可以把整个正则表达式包起来。
{w++\d++)和\w+\d+))是完全不一样的。（\w++\d++>与\w+)(?>\d+)则是一样
的，二者都无法匹配abc123。（w++>可以整个匹配abc123。然后，正则引擎会在自标
文本的结尾处试图匹配。因为现在并不存在任何可以匹配的多余字符，所以
\d++会匹配失败。如果不存在任何记住的回溯位置的话，匹配尝试就会失败。
《(?>w+\d+)在同一个原子分组中拥有两个贪心量词。在这个原子分组中，回溯会正常
发生。回溯的位置只有当引擎退出整个分组的时候才会被丢弃。当目标文本是abc123
68第2章
www.TopSage.com
---
## Page 85
的时候，（w+>会匹配abc123。贪心量词则会记住回溯的位置。当匹配失败的时
候，（w+>会主动放弃一个字符。这样接着就可以匹配3。现在，引擎会退出这个
原子分组，并且丢弃掉为（w+>和\d+>记住的所有回溯位置。因为此时正则表达式已
经到达了结尾，所以这并不会造成任何问题。结果是找到了整体匹配。
如果结尾还没有到达，像是在lw+\d+)\d+>中一样，我们就会遇到与。因为这时回
溯位置已经被丢弃了，所以正则引擎只能宣布匹配失败。
占有量词和原子分组所做的不仅仅是对正则表达式进行优化。它们也可能会利用消除
那些通过回溯可能会到达的匹配，而改变一个正则表达式最终找到的匹配。
本实例展示了如何使用占有量词和原子分组来进行一些较小的优化，而这些优化在实
际例子中甚至可能不会表现出任何区别。下一个实例会讲解原子分组如何能够产生更
加显著的影响。
参见
实例2.12和2.15。
2.15避免重复逃逸
问题描述
使用一个正则表达式来匹配一个完整的HTML文件，并检查其中的html、head、title
和body标记是否进行了正确嵌套。当HTML文件中不拥有正确标记的时候，该正则表
达式必须能够高效地宣布匹配失败。
解决方案
(?>.*?)(?>.*?)(?>.*?)
(?>.*?)(?>.*?]*>)(?>,*?).*?
正则选项：不区分大小写、点号匹配换行符
正则流派：.NET、Java、PCRE、Perl、Ruby
JavaScript和Python不支持原子分组。因此在这两种正则流派中无法消除不必要的回溯。
当使用JavaScript或者Python编程时，可以通过对这些标记一一进行字面文本查找来
解决这个问题，在找到一个标记之后，再在剩余的目标文本中查找下一个标记。
讨论
如果从下面这个最原始的解答人手，那么对这个问题的正确解答会更加容易理解：
.*?.*?.*?
.*?.*?]*>.*?.*?
正则表达式的基本技巧
69
www.TopSage.com
---
## Page 86
正则选项：不区分大小写、点号匹配换行符
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
当你在一个正确的HTML文件上测试这个正则表达式的时候，它会完全正常地运行。
.*？会略过所有的内容，因为我们打开了“点号匹配换行符”的选项。情性的星号量
词会确保这个正则表达式一次只会前进一个字符，每次都会检查是否匹配到了下一个
标记。实例2.4和2.13中已经讲解过这一切。
但是，当这个正则表达式需要处理并不包含所有HTM亿L标记的目标文本的时候，你就
会遇到困难。最坏的情形是当缺失的时候。
想像一下正则引擎已经匹配了所有前面的标记，现在正在忙着扩展最后的.*？>。因为
《永远不会产生匹配，所以.*?>会一直扩展到文件的结尾。当它无法再进行扩
展的时候，就会宣布匹配失败。
步扩展。当最后一个匹配失败的时候，它前面的那个会进行扩展，逐步匹配匹配。这个.*?>也会一直扩
展到文件的结尾，在它之前所有的*?情性点号量词也同样会这样做。只有当第一个到
达了文件末尾的时候，正则引擎才会宣布匹配失败。
这个正则表达式拥有最坏情形的复杂度O（n，也就是目标文本长度的7次方。其中包
括7个情性点号量词，可能会一直扩展到文件的结尾。如果文件的大小增加一倍，正
则表达式就可能需要128倍的步骤才能计算出它无法匹配。
我们把这种情形称作灾难性回溯（catastrophicbacktracking）。由于出现了太多的回溯，
所以正则表达式或者会无休止的匹配下去，或者会让你的应用程序死掉。一些正则表
达式实现会比较聪明，可能会及早退出这种逃逸的匹配尝试，但是即使在这种情况下，
正则表达式也还是会毁掉程序的性能。
提示
灾难回溯是一种被称作组合爆炸（combinatorialexplosion）的现象的一种
说正则表达式是不同重复操作符的笛卡尔乘积。
Y
解决方案是使用原子分组来避免不必要的回溯。在匹配成功之后，第6个*？
就没有必要进行扩展。如果（匹配失败的话，那么扩展第6个情性点号也不可能
神奇地变出一个终止的html标记。
当紧随其后的分界符匹配之后，要想使一个量词化的正则表达式记号停止扩展，就需
要把正则表达式的量词部分与分界符一起放到一个原子分组中：.*?)。这
样正则引擎就会在（被找到之后丢弃（.*?所有的匹配位置。如果
（随后匹配失败的话，那幺正则引擎已经忘记了.*?的回溯位置，所
70第2章
www.TopSage.com
---
## Page 87
以不会进行任何扩展。
如果我们对正则表达式中所有其他的.*?>都做同样的操作，那么它们就都不会再继续扩
展。虽然在正则表达式中还是存在7个情性点号，但是它们永远也不会产生交叉。这
样就会把正则表达式的复杂度降低到O（n，这与自标文本的长度相比是线性的。而正
则表达式的效率不可能比此更高了。
变体
如集你确实想知道灾难性回溯如何执行，那么可以在xxxxxxxxxx之上测试一下
。如果它很快就会失败，那么在目标文本中再添加-个x。重复这个过程，
直到正则表达式开始要花费很长的时间来产生匹配，或者你的应用程序崩溃。除非你
使用的是Perl，否则并不需要添加太多的x字符就会出问题。
在本书中讨论的所有正则流派中，只有Perl有能力检测正则表达式太复杂的情形，并
且会终止匹配尝试，而不会造成程序崩溃。
这个正则表达式的复杂度是O(2")。当y>匹配失败的时候，正则引擎会尝试所有可能的排列
组合，重复每个x+>以及包含它们的分组。例如，在尝试的过程深处，会出现一个这样的排
列：（x+>匹配xXX，第二个x+>匹配x，然后接着这个分组会被重复3次，其中每个x+匹配
区。如果存在10个x字符的话，那么就会存在1024种组合。如果把这个数量加到32，那么
我们就会要处理4000000000（40亿）种这样的组合，这肯定会让所有的正则引擎出现内存
不足，除非它包含一个安全开关，能够自已放弃，并且宣希你的正则表达式过于复杂。
该例中，这个没有多大意义的正则表达式可以很容易被重写为（xx+y>，这样它就可以
在线性时间内找到完全一样的匹配。在实践中，对于更加复杂的正则表达式可能就不
会很容易找到这样的解决方案了。
本质上来说，必须要小心当某个正则表达式的两个或者更多个部分会匹配相同文本的
情形。在这些情形中，可能会需要原子分组来确保正则引擎不会去尝试所有的方式以
把目标文本根据正则表达式的这两个部分进行分割。在测试你的正则表达式时，应该
总要使用包含部分可以匹配，但是又不能整体被正则表达式匹配的（较长）测试目标。
参见
实例2.13和2.14
2.16检查一个匹配，但不添加到整体匹配中
9
问题描述
找出在一对HTML粗体标记之间的任何单词，但是不要把标记包含到正则表达式匹配
正则表达式的基本技巧
71
www.TopSage.com
---
## Page 88
中。例如，如果目标文本是Mycatisfurry，那么唯一的匹配应当是cat。
解决方案
(?)\w+(?=）
正则选项：不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby 1.9
JavaScript和Ruby1.8支持向前看的))，但是不支持向后看的(?)》。
讨论
环视
现代的正则流派都支持四种类型的环视（lookaround），它们拥有特殊的性质，可以放
弃在环视内部的正则表达式部分所匹配的文本。实质上，环视会检查某些文本是否可
以被匹配，但是并不会实际去匹配它。
向后看的环视被称作是逆序环视（lookbehind)。这是唯一可以从右向左遍历目标文本
的正则表达式结构。肯定型逆序环视（positivelookbehind）的语法是4个字符构成了起始括号。可以在环视内部放人什么内容（也就是这里的)。
逆序环视会检查在逆序环视中的文本是否会出现在紧挨着正则表达式引擎所到达位
置的左边。如果用)）来匹配Mycatisfurry，逆序环视只有到正则表
达式在目标文本中的字母c处开始进行匹配尝试时，才会匹配成功。正则引擎接着会
进人逆序环视分组，告诉它向左边看。（在c的左边产生了匹配。引擎会在这个
时候退出逆序环视，并且丢弃从匹配尝试开始由逆序环视所匹配到的任何文本。换句
话说，正在进行的匹配会回到引擎刚刚进人逆序环视的地方。在这个例子中，正在进
行匹配的是目标字符串中c之前的一个长度为0的匹配。逆序环视只会检查或者测试
(是否可以被匹配；但是它并不会实际上去匹配它。环视结构因此也被称作长度
为0的断言。