# 对PHP中文件读漏洞利用的新方式
## 传统的文件读漏洞
传统的漏洞模型可以抽象为如下代码
    startBuffering();
        $phar->setStub("GIF89a".""); //设置stub，增加gif文件头
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
## 反序列化临时文件
通过上述分析，如果我们可以获得临时文件的地址，我们便可以使用`phar`包含达到反序列化的目的。这里我们便需要利用两者的时间差进行利用。
## 时间差的制造
制造时间差，我们有两种主要的方法
  1. 大文件
  2. 利用协议
## Phar协议
Phar协议定义在`ext/phar/phar.c`中，其会对文件名称，路径进行一系列的检查，如下图  
由于phar协议使用方法形如`phar://dir1/dir2/phar.phar/file1.txt`,为了有效判别其对应的phar文件,因为相关文件地址可以为
  1. `dir1/dir2/phar.phar`
  2. `dir1/dir2/phar.phar/file1.txt` 其中phar.phar为目录名
Phar协议进行了如下处理
  1. 检查是否开头为`phar://`  
  2. 然后根据文件中的`.`,`/`穷举判断后缀名
  3. 最终根据第一次匹配结果进行解析
在上述步骤中我们发现，如果我们生成的文件名没有后缀名是无法利用的，这里用两种方案
  1. 在Windows上使用Windows相关特性
  2. 使用可以产生文件名带有后缀名Wrapper
### Windows相关特性
我们知道在Windows中会忽略文件末尾的`.`以及空格，所以我们可以使用`.`假装为文件的后缀名，实际解析时并不会有影响  
### 使用可以产生临时文件的Wrapper
事实上，这个Wrapper并不存在。  
类似情况参见Pwnhub比赛中的`imageConvent`题目
综上我们可以利用这个Windows特征进行利用
## 文件格式
我们发现,使用`compress.zlib://`构造临时文件时，其临时文件中的内容与原内容是相同的，这给我们的利用提供了极大的方便。
## 综合利用
这里我们可以描绘出在Windows环境下一个具体的攻击流程
  1. 使用`compress.zlib`协议产生临时文件，并保留临时文件
  2. 通过某种列目录方式列举出该临时文件名
  3. 使用phar协议加上WindowsTrick使用该临时文件