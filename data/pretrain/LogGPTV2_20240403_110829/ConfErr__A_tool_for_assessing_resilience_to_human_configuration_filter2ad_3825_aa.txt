title:ConfErr: A tool for assessing resilience to human configuration
errors
author:Lorenzo Keller and
Prasang Upadhyaya and
George Candea
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
ConfErr: A Tool for Assessing Resilience to Human Configuration Errors
Lorenzo Keller, Prasang Upadhyaya, George Candea
Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
We present ConfErr, a tool for testing and quantify(cid:173)
ing the resilience ofsoftware systems to human-induced
configuration errors. ConfErr uses human error mod(cid:173)
els rooted in psychology and linguistics to generate re(cid:173)
alistic configuration mistakes; it then injects these mis(cid:173)
takes and measures their effects, producing a resilience
profile of the system under test. The resilience pro(cid:173)
file, capturing succinctly how sensitive the target soft-
ware is to d(fferent classes 0.(c0l1:{iguration errors, can
be used for improving the software or to compare sys(cid:173)
tems to each other. ConfErr is highly portable, be(cid:173)
cause all mutations are performed on abstract repre(cid:173)
sentations ofthe configurationfiles. Using ConfErr, we
found several serious flaws in the MySQL and Postgres
databases, Apache web server, and BIND and djbdns
name servers; we were also able to directly compare
the resilience offunctionally-equivalent systems, such
as MySQL and Postgres.
1. Introduction
Human error has long been a dominant cause of
downtime in computer systems, especially in mission(cid:173)
critical infrastructures. More than two decades ago,
42% of incidents in high-end mainframe installations
were found to be due to human operators [4]. Later on,
human errors were found to be the cause of33% of fail(cid:173)
ures at a major Internet portal and 36% at a global con(cid:173)
tent hosting service [9]. A recent study attributed 58%
of reported problems in database systems to mistakes
made by database administrators [8].
Configuration errors form a significant fraction of
human administrator mistakes. Studies have shown that
more than 50% of human-induced errors observed in
Internet services are configuration errors [7, 9]. A field
study found that 24% of Microsoft Windows NT down(cid:173)
time was caused by system configuration and mainte(cid:173)
nance errors [19]. Configuration errors are particularly
pernicious, because they take a long time to discover
and fix, thus leading to long repair times [9] and having
wide-reaching effects (e.g., a mere DNS misconfigura(cid:173)
tion made Microsoft's MSN hosting services unavail(cid:173)
able worldwide for 24 hours [12]).
Better operator training helps, but often has lim(cid:173)
ited benefits. First, even highly-trained humans work(cid:173)
ing on well-studied tasks with clear life-safety im(cid:173)
plications face significant error rates; e.g., nuclear
plant operators-required by law to undergo extensive
training-were deemed responsible for 44%-52% of all
significant reactor problems [13]. Second, large soft(cid:173)
ware systems exhibit complex behaviors controlled by
a dizzying array of configuration "knobs," which over(cid:173)
whelm even the best administrators; for instance, the
Oracle 1Og DBMS has 220 initialization parameters and
1,477 tables of system parameters [11], along with a
875-page "Administrator's Guide" [10].
It is therefore imperative that critical software sys(cid:173)
tems be resilient to configuration mistakes, since com(cid:173)
pensating for a poorly designed system is difficult. For
example, redundancy and replication have been shown
to not improve availability in the face of operator er(cid:173)
rors [9]. Better user interfaces can help, but cannot turn
a system vulnerable to configuration errors into a re(cid:173)
silient one (e.g., graphical interfaces do not prevent er(cid:173)
rors in firewall configuration [16]).
In order to design systems that are less vulnerable
to configuration errors, software engineers need tools
that quantitatively measure the benefits offered by dif(cid:173)
ferent techniques and implementations. A suitable, ob(cid:173)
jective benchmark may also encourage system design(cid:173)
ers to compete on resilience to configuration errors.
Benchmarking methodologies have already been pro(cid:173)
posed in the past: some take system-specific errors and
manually port them to different systems, where they can
be injected [15, 7], while others use real human opera(cid:173)
tors [3]; these approaches can be expensive and do not
always yield objective results.
Automating configuration error testing is key to
making such benchmarks uniform, economical, and
comprehensive.
In this paper, we present ContErr, a
tool that embodies these goals. ContEer converts the
1-4244-2398-9/08/$20.00 ©2008 IEEE
157
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
understanding of human errors developed by psychol(cid:173)
ogists and linguists [13, 14] into an automated bench(cid:173)
mark for measuring systems' resilience to configuration
errors. To our knowledge, this is the first error injection
tool to do so.
ConfErr automatically generates and injects real(cid:173)
istic errors into a system's configuration files, assesses
the target's resilience to the injected errors, and com(cid:173)
putes the system's resilience profile. This profile can
be used for prompt feedback during development (e.g.,
to quantify the impact of a new feature/design on the
ultimate reliability of the system) or as a benchmark to
compare different functionally-equivalent systems (e.g.,
databases from different vendors).
Despite the emergence of configuration wizards
and graphical user interfaces, configuration files still
represent the primary means of communicating the de(cid:173)
sired configuration to programs. Moreover, configura(cid:173)
tion files typically have a pre-defined syntactic struc(cid:173)
ture, making them amenable to systematic, quantitative
evaluation. We designed ContErr to be extensible and
accommodate arbitrary error generation plugins;
this
enables a wide array ofconfiguration errors types, while
preserving both the complete automation and efficiency
of testing and benchmarking.
This paper makes three contributions: First, we
show how models of human error can be turned into
practical, realistic error injection tools. Second, we
show that using simple abstract representations of con(cid:173)
figuration files enables these models to be applied
portably across different systems. Third, we show that,
after running for less than one hour, ConfErr reveals on
its own serious design flaws in systems that are critical
components of many computing infrastructures today.
In the rest of the paper we describe the human er(cid:173)
ror models used by ConfErr (§2), present the design of
the tool (§3), and describe three error generator plug(cid:173)
ins for ConfErr (§4). Then we present case studies of
using ConfErr to find weaknesses in MySQL, Postgres,
Apache, BIND, and djbdns, as well as to compare the
error resilience of MySQL to that of Postgres (§5). We
then review related work (§6) and conclude (§7).
2. Configuration Error Models
Psychology offers insights into why human mis(cid:173)
takes occur. Several researchers have studied the psy(cid:173)
chological underpinnings of human error, with one of
the most succinct presentations being the Generic Error(cid:173)
Modeling System (GEMS) framework [13].
GEMS identifies multiple cognitive levels at which
humans solve problems. The lowest skill-based level
is used for common, repetitive tasks. Simple slips and
lapses at this level account for about 60% of general
human errors; typos and mistakes in digit recognition
are examples of such slips. The next level up is the
rule-based level of cognitive processing, where rea(cid:173)
soning and problem-solving are performed by pattern(cid:173)
matching the situation at hand with previously-seen sit(cid:173)
uations and applying the solutions discovered in those
previous instances (e.g., applying the configuration
principles of one database system to another). Mistakes
caused by misapplying such rules account for roughly
another 30% of human errors. Finally, the highest cog(cid:173)
nitive level is the knowledge-based level, where tasks
are approached by reasoning from first principles, with(cid:173)
out the direct use of previously-formed rules or skills
(e.g., configuring a piece offunctionality that was previ(cid:173)
ously never encountered). Mistakes at this level account
for the remaining 10% of human errors.
to lower ones:
Training and experience move task processing
from higher cognitive levels
a
knowledge-based task may move over time to the rule(cid:173)
based level, as it becomes familiar and encoded into
mental rules. Similarly, tasks performed on the rule(cid:173)
based level may move to the skill-based level, if they
become so familiar as to be "second nature."
The ContErr error generators embody three error
models that span all these cognitive levels: one models
mistakes at the level of individual words in configura(cid:173)
tion files (§2.1), one models mistakes in the structure
of configuration files (§2.2) and another one models se(cid:173)
mantic errors (§2.3).
2.1. Spelling Mistakes
Typographical errors (typos) occur during the pro(cid:173)
cess of typing. Highly disciplined individuals will
proofread just-edited configuration files before apply(cid:173)
ing them to the corresponding systems; others rely on
the system to identify such problems upon startup. As
computers become faster, this latter approach becomes
increasingly widely spread, in much the same way pro(cid:173)
grammers type up programs and invoke the compiler
without re-reading their code.
Adapting the classification in [14], we divide one(cid:173)
letter typos into the following categories:
• Omissions: One character in a word is missing;
this corresponds to characters being missed dur(cid:173)
ing hurried typing.
Intuitively, we would expect
single-letter omissions to be more likely in prac(cid:173)
tice than multi-letter omissions, because more than
one missing character is generally easier to notice.
• Insertions: A spurious letter is introduced in a
word.
• Substitutions: A letter is replaced with another (in(cid:173)
correct) letter. As will be seen later, we use the
1-4244-2398-9/08/$20.00 ©2008 IEEE
158
DSN 2008: Keller at al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
keyboard layout to produce realistic single-letter
substitutions, based on the model of operators ac(cid:173)
cidentally pressing nearby keys.
• Case alterations: This is special substitution error,
in which the case ofadjacent letters is swapped due
to a miscoordination in pressing the Shift key.
• Transpositions: Two adjacent letters in a word are
swapped. Letters in different words are rarely
swapped, because humans automatically place
cognitive boundaries between words.
2.2. Structural Errors
Configuration files generally have a well-specified
structure; mistakes related to this structure trace their
roots to all three cognitive levels. We reflect this in our
model of structural mistakes.
At the skill-based level, we capture mistaken repe(cid:173)
titions of configuration directives and misplacement of
directives in sections of the configuration file, as might
result from copy-paste operations. Another type of er(cid:173)
ror is omission on account of configuration complexity:
while editing a configuration with many parameters re(cid:173)
quired in a section (or many sections required overall),
one of these may be simply forgotten.
At the rule-based level, we model operator mis(cid:173)
takes resulting from the use of a configuration format
that is similar but incorrect. An example of such a mis(cid:173)
take would be the "borrowing" of a configuration direc(cid:173)
tive or section from another program configured by the
same operator.
Mistakes at the knowledge-based level tend to re(cid:173)
sult from a mismatch between the mental model the op(cid:173)
erator has of the system and the actual operation of the
system [13]. For example, reverting a non-functioning
configuration to the default configuration "just to get the
system started" may omit critical directives without the
operator realizing it.
Structural configuration errors abound in prac(cid:173)
tice. For example, numerous cases for the Apache
web server can be found in [1]: a common mistake
is the omission of a directive that has to be present
in each subsection (e.g., the ServerNarne directive in
VirtualHosts sections) or the duplication of a direc(cid:173)
tive (such as Listen or NarneVirtualHost), with the
final replica overriding all previous ones. Other com(cid:173)
mon mistakes are the addition of wrong directives or
entire sections of directives via copy-paste or moving
directives to similar kinds of sections (e.g., access re(cid:173)
strictions in Directory sections, index options for a
ScriptAl ias directory).
2.3. Semantic Errors
In addition to mistakes in syntax and structure, con(cid:173)
figuration errors can take on a semantic nature, resulting
from the administrator's wrong understanding of how
the system works. Semantic errors are introduced solely
when operating at the highest cognitive level.
In our model, we capture two classes of seman(cid:173)
tic errors. The first one is inconsistent configurations,
in which required constraints are not satisfied. For in(cid:173)
stance, the value of one parameter (e.g., shared mem(cid:173)
ory pool) may be related in a specific way to that of
another (e.g., maximum number of client connections),
and an ignorant operator may generate a configuration
that does not satisfy this relation. A properly config(cid:173)
ured domain name service (DNS), for example, should
provide both forward and reverse mappings for a given
name-IP pair, but an operator might forget to set up one
of the two mappings.
The second type of semantic errors occurs when the
operator does not know exactly the meaning of a given
parameter and uses it to configure a similar but differ(cid:173)
ent aspect of the system. For instance, DNS provides
multiple record types, and an inexperienced administra(cid:173)
tor may associate an address to a domain via a CNAME
record (normally used to declare aliases, not to assign
addresses); this results in all other records associated
with the domain name becoming inaccessible, since the
unaliased domain name is necessary for correct name
resolution.
3. The ContErr Framework
The goal of ConfErr is to tum error models, such as
the ones described above, into practical tools. ConfErr
allows error models to be encoded in generator plug(cid:173)
ins and glued together into an end-to-end injection and
measurement system. ConfErr automatically drives all
parsing of initial configuration files, generation of er(cid:173)
injection, startup and shutdown of the system(cid:173)
rors,
under-test (SUT), and measurement of the impact of
each error on the system; none of these require human
intervention.
After a brief overview of ConfErr's design (§3.1),
we describe how it creates and uses abstract repre(cid:173)
sentations of configuration files (§3.2) and how er(cid:173)
ror generation models are described (§3.3). Com(cid:173)
plete source code and documentation can be found at
http://conferr.epfl.ch/.