# Title: Tangler: A Censorship-Resistant Publishing System Based on Document Entanglements

## Authors:
- Marc Waldman
- David Mazières

### Abstract
We present the design of a censorship-resistant system that employs a unique document storage mechanism. In this system, newly published documents are dependent on the blocks of previously published documents, a relationship we term "entanglement." This entanglement ensures that the replication of previously published content is an integral part of the publication process. Groups of files, referred to as collections, can be published together and named in a manner independent of any specific host. Individual documents within a collection can be securely updated, ensuring that future readers see and verify the updates. The system utilizes a self-policing network of servers designed to detect and expel non-compliant servers, thereby preventing them from causing significant harm.

### 1. Introduction
This paper advocates for censorship-resistant publishing through document entanglement. While the Internet is often considered difficult to censor, there are numerous instances where material has been effectively suppressed. For example, attempts to suppress DVD decoding software led to widespread replication and increased availability of the software, with publishers receiving legal support from non-profit organizations. However, such high-profile cases are exceptions. In less prominent situations, individuals expressing unpopular views, exposing corruption, or criticizing powerful entities often receive little support.

Censoring documents on the Internet is often straightforward. Web pages can typically be traced back to a specific server, and from there to the individual responsible. Censors can use legal, coercive, or technical means to compel the removal of content or to identify the author. Even if these methods fail, denial-of-service attacks can render the page inaccessible. Unless the website operator has a strong interest in preserving the content, removal is often the easiest solution.

This research was supported in part by the National Science Foundation Career award CCR–0093361.

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**CCS'01, November 5–8, 2001, Philadelphia, Pennsylvania, USA.**
**Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.**

### 2. Censorship Resistance and Design Goals
The primary goal of a censorship-resistant system is to ensure the continued availability of published documents despite attempts to censor them. This section examines the types of threats such systems may face and outlines the design goals for Tangler.

#### 2.1 Attacks on Storage
A censorship-resistant system must replicate published documents to prevent a single point of failure. Many systems rely on volunteers to donate disk space, but this finite capacity can be exhausted by an attacker flooding the system with random files, making it unusable for legitimate publishers. Charging for disk space, either through anonymous e-cash or CPU-based payment systems, can help mitigate this threat.

#### 2.2 Document Deletion
The most direct form of censorship is deleting a document from all hosting servers. Adversaries can use threats or legal pressure to force administrators to delete documents or remove servers from the network. Replicating documents across multiple servers in different jurisdictions can make such attacks more difficult to execute successfully.

#### 2.3 Document Tampering
Another form of censorship involves modifying the content of published documents. Server volunteers, who control the donated disk space, can arbitrarily change stored files. Providing a tamper-check mechanism, such as embedding a cryptographic hash in the document's name, allows readers to verify the integrity of retrieved documents.

#### 2.4 Rubber-Hose Cryptanalysis
Some systems allow publishers to update or delete previously published content, which can be exploited by adversaries. If an adversary identifies the publisher, they can use coercion to force the deletion or modification of the document. Anonymity services can help, but their effectiveness depends on the adversarial model.

#### 2.5 Design Goals
- **Dynamic Server Participation:** New servers should be able to join, and existing servers should be allowed to leave.
- **Previous Document Replication:** Replication of previously published material should be an integral part of the publication process.
- **Publisher and Reader Anonymity:** The system should provide anonymity to both publishers and readers.
- **Secure Update:** Publishers should be able to securely update previously published material.
- **Publisher Caching Incentive:** Publishers should have an incentive to cache blocks of previously published documents.
- **Publishing Limit:** Publishers should be limited in the amount of content they can publish relative to what they are willing to store.
- **Location-Independent Naming:** Document names should not be tied to specific network addresses.
- **Self-Policing:** Misbehaving nodes should be identified and temporarily ejected from the system.
- **All Servers Perform Useful Work:** Servers must perform useful work before being granted full access to the system.
- **Document Links:** A method for linking to previously published documents, including a tamper-check mechanism.

### 3. Related Work
This section describes the relevant characteristics of other censorship-resistant systems and some peer-to-peer systems that could be used as building blocks for such systems.

#### 3.1 Censorship-Resistant Systems
Current systems distribute documents in one of two ways: redundant storage on a large collection of servers (e.g., Freenet, Publius) or breaking documents into smaller blocks stored independently (e.g., Free Haven, Intermemory, Mojonation). In block-based systems, each file block typically belongs to exactly one document, making it easy for adversaries to target and delete specific blocks. Stubblefield and Wallach's "intertwine" method, while similar, requires retrieving all intertwined documents, unlike our entanglement approach.

Some systems suffer from flat name spaces, leading to file name collisions and "name squatting," where adversaries publish empty or meaningless files to reserve names. Pseudonymous publishing, allowing groups of documents to be linked to a single, anonymous publisher, is another related issue.

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.