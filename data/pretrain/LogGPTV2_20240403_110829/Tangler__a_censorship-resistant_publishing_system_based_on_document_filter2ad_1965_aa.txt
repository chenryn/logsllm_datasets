title:Tangler: a censorship-resistant publishing system based on document
entanglements
author:Marc Waldman and
David Mazières
Tangler: A Censorship-Resistant Publishing System Based
On Document Entanglements
Marc Waldman
Computer Science Department
New York University
PI:EMAIL
ABSTRACT
We describe the design of a censorship-resistant system that em-
ploys a unique document storage mechanism. Newly published
documents are dependent on the blocks of previously published
documents. We call this dependency an entanglement. Entangle-
ment makes replication of previously published content an intrinsic
part of the publication process. Groups of ﬁles, called collections,
can be published together and named in a host-independent manner.
Individual documents within a collection can be securely updated
in such a way that future readers of the collection see and tamper-
check the updates. The system employs a self-policing network of
servers designed to eject non-compliant servers and prevent them
from doing more harm than good.
1.
INTRODUCTION
This paper makes the case for censorship-resistant publishing
through document entanglement. The Internet is widely regarded
as difﬁcult to censor. Indeed, in a handful of well-known cases,
such as the attempt to suppress DVD decoding software, the ma-
terial being censored instead became widely replicated and more
highly available. In addition, those responsible for publishing the
software received free legal representation from non-proﬁt organi-
zations. However, DVD viewing is a particularly popular cause. In
contrast, censorship-resistance is most important for those express-
ing unpopular views. In less high-proﬁle cases, people often enjoy
far less support for exposing corruption or criticizing schools, em-
ployers, and particularly litigious organizations.
In many cases, censoring documents on the Internet is fairly
straight-forward. Almost any web page can be traced back to a
speciﬁc server, and from there to an individual responsible for the
material. Someone wishing to censor a web page can use the courts,
threats, or other means of intimidation to compel the server admin-
istrator to remove the contents or reveal the author’s identity. Even
if these methods prove unsuccessful, various denial of service at-
tacks can be launched against the server to make the page difﬁcult
or impossible to retrieve. Unless a web site’s operator has a strong
interest in preserving a particular web page, removing it is often the
easiest course of action.
This research was supported in part by National Science Foundation Career
award CCR–0093361.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’01, November 5–8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
David Mazi`eres
Computer Science Department
New York University
PI:EMAIL
Several properties can make a publishing system far more difﬁ-
cult to censor than the web. First, to thwart censorship, documents
should not be associated with any particular server. Data should pe-
riodically migrate from server to server, and multiple servers should
store copies of a document and share responsibility for serving its
contents.
In addition to diffusing the responsibility for serving documents,
a censorship-resistant system should allow the source of a docu-
ment to remain anonymous, so as to avoid real-world intimida-
tion of the author. Unfortunately, attackers can themselves ex-
ploit anonymity in mounting attacks. For example, an attacker may
attempt to exceed the capacity of a publishing system by anony-
mously publishing huge numbers of documents. Alternatively, the
attacker may attempt to replace published documents with censored
versions, preventing readers from obtaining the original.
Several past projects have explored censorship-resistant systems,
with designs ranging from true peer-to-peer systems with thousands
of nodes constantly coming and going to single servers that simply
cannot delete one document without inﬂicting intolerable damage
on others. In this paper, we propose a system called Tangler with
a design that lies somewhere between current anonymous remailer
networks and the Usenet news hierarchy.
As with anonymous remailers, we envision 10–30 Tangler servers,
operated by volunteers around the world, with a general consensus
of which servers are currently operational. Over time, servers will
leave and new ones will appear. New servers, even if malicious,
cannot seriously damage the system, leaving little incentive to ex-
clude any volunteers. As with Usenet, servers have large storage
capacities and good network connectivity, and each server stores
an important fraction of the content of the entire system.
One of the key properties of Tangler is the lack of a one-to-one
mapping from the stored blocks to published ﬁles. Rather, a stored
block can be used to reconstruct several different ﬁles. Newly pub-
lished documents are broken into blocks that must be combined
with previously published blocks. The newly published documents
are dependent on the previously published blocks. We call this de-
pendency an entanglement. Entanglements not only break the one-
to-one correspondence between blocks and ﬁles, but also provide a
publisher with some incentive to replicate and store the blocks of
other documents. Thus, replication becomes a fundamental part of
publishing.
We have implemented entanglement, and believe the technique
would apply to many existing censorship-resistant publishing projects.
This paper also gives the design of a Tangler block storage network
intended to accentuate the beneﬁts of entanglements. The Tan-
gler network resists many potential attacks to which anonymous
publishing systems can fall prey and additionally makes auditing
servers’ behavior a fundamental part of publishing.
1262. CENSORSHIP RESISTANCE AND DESIGN
GOALS
The main goal of a censorship-resistant system is to keep pub-
lished documents available in the face of attempts to censor them.
Therefore a censorship-resistant system is in large part shaped by
the threats it faces.
In this section we examine the types of threats that a publish-
ing system may face and brieﬂy describe ways to cope with these
threats. At the end of this section we list the design goals of our
censorship-resistant system called Tangler.
2.1 Attacks on Storage
A censorship-resistant system must replicate published documents.
A sole replica presents a single point of failure that can be exploited
by an adversary or, for example, made unavailable by an act of na-
ture.
In order to achieve a high degree of replication many censorship-
resistant systems rely on volunteers to donate disk space. This do-
nated disk space allows the censorship-resistant system to be used
like a distributed ﬁle store. However, even with a large number of
participating servers, a publishing system only has a ﬁnite capac-
ity. Once this storage has been ﬁlled, new documents cannot be
published until old documents expire or are deleted. By ﬁlling the
system with random ﬁles, an attacker can exhaust available disk
space and therefore make the system unusable to other publishers.
This sort of block ﬂooding attack is a form of denial of service,
as it prevents future publishers from using the system. The usual
way of combating this type of attack is to charge the publisher for
disk space. This charge can take the form of anonymous e-cash or
a CPU-based payment system that forces the publisher to perform
some sort of work—possibly even of use to the censorship-resistant
system.
2.2 Document Deletion
The most obvious way to censor a published document is to
delete it from all hosting servers. An attack with the same end
result is to simply force the hosting servers off the network so that
potential readers cannot contact the servers.
An adversary can use threats or the legal system to force individ-
ual server administrators to delete certain documents. In addition,
the adversary can attempt to remove the servers from the network
by threatening the server’s network provider. These attacks clearly
show how the power of the adversary can affect the censorship re-
sistance properties of a system. While a single individual or com-
pany might not be able to successfully remove a document from all
participating servers, a government certainly might possess such
power.
The main way of dealing with these types of attacks is to highly
replicate the published documents.
Ideally, the replicated docu-
ments would be stored on servers in many different countries and
judicial domains. This clearly makes these sorts of adversarial at-
tacks harder to execute successfully.
2.3 Document Tampering
A less obvious form of censorship is the modiﬁcation of previ-
ously published documents. If an adversary can arbitrarily change
the content of a document then he has succeeded in censoring it.
This form of censorship is especially easy for server volunteers to
perform. Each server volunteer completely controls the disk space
that he has donated to the censorship-resistant service. Therefore
he can arbitrarily modify any of the stored ﬁles.
The most effective way of combating this form of censorship
is to provide a tamper-check mechanism for retrieved documents.
This is usually done by embedding a cryptographic hash of the pub-
lished document in its name. Thus, anyone who possess the doc-
ument’s name can verify the integrity of a copy retrieved from a
server.
2.4 Rubber-Hose Cryptanalysis
Some censorship-resistant systems allow publishers to update or
delete previously published content. These features make the sys-
tem more usable as opposed to censorship-resistant. A system that
supports document updates allows the publisher to change the pub-
lished document and republish it in such a way that a reader will
always view the latest version of the document.
The delete operation allows publishers to delete content that has
been accidentally published or is simply no longer relevant. How-
ever, both of the update and delete operation can be exploited by an
adversary. If an adversary ﬁnds the individual responsible for pub-
lishing a particular document, the adversary can use threats, torture,
blackmail, etc. to force the publisher to delete or update the offend-
ing document.
Many censorship-resistant systems provide some sort of anonymity
service that allows an individual to publish anonymously. However,
the degree of anonymity usually depends on the adversarial model.
For example, most anonymizing systems assume that an adversary
can only control a certain number of servers or that he can view
only a portion of the network trafﬁc.
2.5 Goals
Below we list the design goals that were important in shaping
Tangler.
Dynamic Server Participation. New servers should be allowed
to join and participating servers allowed to leave. This means that
possible adversaries could join the system and attempt to corrupt
other servers, learn the identity of a publisher or try to subvert the
rules of the system.
Previous Document Replication. The replication of previously
published material should be an integral part of the publication pro-
cess. This increases the number of replicas of previously published
documents and therefore makes the censor’s work a bit harder.
Publisher and Reader Anonymity. The system should provide
a degree of anonymity to both document readers and publishers.
Secure Update. A publisher can securely update previously
published material.
Publisher caching incentive. The publisher of a document has
some incentive to cache the blocks belonging to previously pub-
lished documents. This leads to greater replication.
Publishing limit. A publisher can publish no more than a certain
fraction of what he is willing to store. This is intended to limit the
damage done by a malicious publishers trying to ﬁll up all available
space—a denial of service attack.
Location-independent naming. The name of a document should
not be tied to a speciﬁc network address. This helps prevent ad-
versarial attacks against speciﬁc network locations that are holding
the published material. It also allows published material to be relo-
cated.
Self-policing. As long as a majority of the participating servers
are honest, misbehaving nodes can be identiﬁed and temporarily
ejected from the system. The reason for the “temporarily” qualiﬁer
is that misbehaving nodes can always reappear under a new name
(IP address and public key), and can therefore rejoin the system.
All servers perform useful work. Before being allowed to join
the system a server must perform some useful work for the system.
This work may include redundantly storing or indexing documents.
This ensures that a server bent on adversarial behavior performs
127useful work before being allotted full access to the system.
Document links. Similar to the world wide web’s hyperlinks
there should be a method of linking to previously published docu-
ments. These links should point to the latest version of the particu-
lar document and contain an embedded tamper-check mechanism.
This mechanism is used to tamper-check the retrieved document.
3. RELATED WORK
In this section we brieﬂy describe the relevant characteristics
of other censorship-resistant systems.
In addition, we describe
some peer-to-peer systems that were not designed to be censorship-
resistant but could conceivably be used as building blocks for such
a system.
3.1 Censorship-Resistant Systems
Current censorship-resistant publishing systems use a variety of
techniques for document distribution and storage. Roughly speak-
ing, current systems distribute documents in one of two ways. The
ﬁrst is to redundantly store the document on a large collection of
servers participating in the publishing system. One of the advan-
tages of this approach is that only one server needs to be available
in order to successfully retrieve the document. Systems that ﬁt into
this category are Freenet [4] and Publius [21]. In Freenet, docu-
ments are named by the cryptographic hash of the title or descrip-
tion of the document (e.g.
the hash of the phrase “The Declara-
tion of Independence”). In Publius, documents are encrypted and
named by a special URL that speciﬁes the various hosts that are
storing the document. In addition, possession of the URL allows
one to perform a tamper check on the retrieved document. Pub-
lius redundantly splits the document’s decryption key and stores the
pieces on various servers. Therefore, at least some of the servers
that hold a piece of the decryption key must be available in order to
read a Publius document.
The second category, into which Tangler falls, consists of sys-
tems that break the published document into a number of smaller
blocks. Each of these blocks is treated independently and stored
on a subset of the participating servers. In order to reconstruct the
document, requests for the component blocks are sent to a subset
of participating servers. The servers that possess these blocks send
them back to the requester. Frequently the component blocks are
redundantly stored such that a document can be reconstructed even
if a portion of the participating servers are unavailable. Systems
that fall into this category are Free Haven [6], Intermemory [9] and
Mojonation [12]. For each published document a structure simi-
lar to an inode needs to be created to store the name or address of
the document’s component blocks. Systems in both categories may
encrypt or otherwise obscure the contents of the document so that
the servers cannot readily identify the content they are hosting and
therefore have less of an incentive to censor it.
In each of these block based systems, an individual ﬁle block
belongs to exactly one document. This usually means that a server
administrator has no plausible excuse for retaining a particular ﬁle
block when he is being pressured or threatened to delete it. The
document inode itself becomes a very attractive adversarial target
as the document cannot be retrieved without it.
Stubbleﬁeld and Wallach in [20] describe a publication method
that is somewhat similar to our entanglement. They use the term
“intertwine” to describe the XORing of newly published documents
with those of previously published documents. Newly published
documents are “intertwined” with previously published ones. How-
ever, in order to read a published document one must retrieve all of
the documents that were intertwined with it. This is not the case
with entanglements.
Some of the previously mentioned censorship-resistant systems
suffer from a ﬂat name space which can lead to to ﬁle name colli-
sions and so-called “name squatting.” In this context, “name squat-
ting” refers to the adversarial practice of publishing an empty or
meaningless ﬁle with a speciﬁc ﬁle name in order to prevent others
from using that same name.
An issue somewhat related to naming is that of pseudonymous
publishing. A pseudonymous publishing system allows groups of
documents to be be linked to one publisher while the publisher him-
self may remain anonymous. This allows the publisher to gain