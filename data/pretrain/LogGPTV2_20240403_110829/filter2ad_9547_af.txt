            if (++idx == VMACACHE_SIZE)
                idx = 0;
        }
        return NULL;
    }
### insert_vm_struct(vma插入)
    int insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
    {
        struct vm_area_struct *prev;
        struct rb_node **rb_link, *rb_parent;
        // 定位插入vma的目标位置
        // prev = rb_parent对应的vm_area_struct
        // rb_link = 待插入的位置
        // rb_parent = rb_link的父结点
        if (find_vma_links(mm, vma->vm_start, vma->vm_end,
                   &prev, &rb_link, &rb_parent))
            return -ENOMEM;
        if ((vma->vm_flags & VM_ACCOUNT) &&
             security_vm_enough_memory_mm(mm, vma_pages(vma)))
            return -ENOMEM;
        // 匿名vma要设置页偏移
        if (vma_is_anonymous(vma)) {
            BUG_ON(vma->anon_vma);
            vma->vm_pgoff = vma->vm_start >> PAGE_SHIFT;
        }
        // 将vma插入vma管理体系
        // vma_link -> __vma_link -> __vma_link_list, 将vma插入双链表
        // vma_link -> __vma_link -> __vma_link_rb, 将vma插入红黑树
        vma_link(mm, vma, prev, rb_link, rb_parent);
        return 0;
    }
#### find_vma_links
    static int find_vma_links(struct mm_struct *mm, unsigned long addr,
            unsigned long end, struct vm_area_struct **pprev,
            struct rb_node ***rb_link, struct rb_node **rb_parent)
    {
        struct rb_node **__rb_link, *__rb_parent, *rb_prev;
        __rb_link = &mm->mm_rb.rb_node;
        rb_prev = __rb_parent = NULL;
        while (*__rb_link) {
            struct vm_area_struct *vma_tmp;
            __rb_parent = *__rb_link;
            vma_tmp = rb_entry(__rb_parent, struct vm_area_struct, vm_rb);
            if (vma_tmp->vm_end > addr) {
                // 如果vma_tmp_end_addr大于vma_end_addr且vma_start_end_addr小于vma_start_addr, 说明vma_tmp和vma重合, 函数报错
                if (vma_tmp->vm_start rb_left;
            } else {
                rb_prev = __rb_parent;
                // 继续遍历右节点
                __rb_link = &__rb_parent->rb_right;
            }
        }
        // 当__rb_link为空, 即对应结点为空时, 退出遍历红黑树循环
        // __rb_link对应空结点, 即目标插入位置
        // __rb_parent对应__rb_link的父结点
        // pprev对应rb_prev指向的vm_arena_struct
        *pprev = NULL;
        if (rb_prev)
            *pprev = rb_entry(rb_prev, struct vm_area_struct, vm_rb);
        *rb_link = __rb_link;
        *rb_parent = __rb_parent;
        return 0;
    }
#### 红黑树规则
  * 红黑树规则: 
    * 节点是红色或黑色
    * 根节点是黑色
    * 每个叶节点都是黑色的空节点
    * 每个红色节点的两个子节点都是黑色(从每个叶子到根的所有路径上不能有两个连续的红色节点)
    * 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点
  * 插入节点时通过变色或者旋转维持红黑树规则
## 缺页中断
    /*
     * Page fault error code bits:
     *
     *   bit 0 ==    0: no page found   1: protection fault
     *   bit 1 ==    0: read access     1: write access
     *   bit 2 ==    0: kernel-mode access  1: user-mode access
     *   bit 3 ==               1: use of reserved bit detected
     *   bit 4 ==               1: fault was an instruction fetch
     *   bit 5 ==               1: protection keys block access
     */
    enum x86_pf_error_code {
        X86_PF_PROT =       1 mm->mmap_sem);
        // mmiotrace跟踪器, 用于跟踪基于内存映射的io设备
        if (unlikely(kmmio_fault(regs, address)))
            return;
        // 判断缺页中断发生在内核态还是用户态
        if (unlikely(fault_in_kernel_space(address)))
            do_kern_addr_fault(regs, hw_error_code, address);
        else
            do_user_addr_fault(regs, hw_error_code, address);
    }
### fault_in_kernel_space
  * vsyscall和vdso的作用与区别
    * 作用: 一般来说, 用户态与内核态通过系统调用进行交互, 但是这种交互非常浪费时间, 那么对于需要实时性的api如gettimeofday等就不太适用, 使用vsyscall或vdso可以加速
    * 区别: 
      * vsyscall是一种比较古老的机制, 他在固定地址映射内核内存页实现快速执行内核功能, 但安全性不高, 被vdso逐渐替代, 但是vdso只存在与动态链接, 静态链接程序没有vdso, 所以为了兼容性, vsyscall被保留下来
      * vdso可以应用aslr实现地址随机化, 而且无需考虑cpu差异性
    static int fault_in_kernel_space(unsigned long address)
    {
        // x86_64架构下vsyscall在TASK_SIZE_MAX之上, 但并非内核空间, 所以单独列出
        // #define VSYSCALL_ADDR (-10UL = TASK_SIZE_MAX;
    }
### do_kern_addr_fault
    static void
    do_kern_addr_fault(struct pt_regs *regs, unsigned long hw_error_code,
               unsigned long address)
    {
        // X86_PF_PK存在于用户页, 并非内核页
        WARN_ON_ONCE(hw_error_code & X86_PF_PK);
        // 检测错误是否由于vmalloc fault导致
        if (!(hw_error_code & (X86_PF_RSVD | X86_PF_USER | X86_PF_PROT))) {
            if (vmalloc_fault(address) >= 0)
                return;
        }
        // 检测错误是否是由于TLB表项陈旧(内核页权限变更后, TLB没有更新)
        // 如果TLB表项陈旧导致错误, 那么只有两种可能. 1. 数据写入时TLB(), 2. 指令执行时TLB(NX)
        if (spurious_kernel_fault(hw_error_code, address))
            return;
        // 判断kprobe是否hook了缺页错误
        if (kprobe_page_fault(regs, X86_TRAP_PF))
            return;
        // 非法地址访问导致页错误
        bad_area_nosemaphore(regs, hw_error_code, address);
    }
#### vmalloc_fault
    static noinline int vmalloc_fault(unsigned long address)
    {
        pgd_t *pgd, *pgd_k;
        p4d_t *p4d, *p4d_k;
        pud_t *pud;
        pmd_t *pmd;
        pte_t *pte;
        // #define high_memory (-128UL = VMALLOC_START && address  __bad_area_nosemaphore
    static void
    __bad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,
                   unsigned long address, u32 pkey, int si_code)
    {
        struct task_struct *tsk = current;
        // 如果请求来自用户态, 说明想要越界访问内核空间
        if (user_mode(regs) && (error_code & X86_PF_USER)) {
            local_irq_enable();
            /*
             * Valid to do another page fault here because this one came
             * from user space:
             */
            // 不忽略nx页上的取指错误 
            if (is_prefetch(regs, error_code, address))
                return;
            if (is_errata100(regs, address))
                return;
            // 为了防止内核页表布局被泄露, 这里把用户态访问内核空间错误伪造成protection faults
            if (address >= TASK_SIZE_MAX)
                error_code |= X86_PF_PROT;
            if (likely(show_unhandled_signals))
                // 打印错误信息
                show_signal_msg(regs, error_code, address, tsk);
            set_signal_archinfo(address, error_code);
            if (si_code == SEGV_PKUERR)
                force_sig_pkuerr((void __user *)address, pkey);
            // 发送SIGSEGV信号
            force_sig_fault(SIGSEGV, si_code, (void __user *)address);
            return;
        }
        if (is_f00f_bug(regs, address))
            return;
        // 在内核中发生内核缺页
        no_context(regs, error_code, address, SIGSEGV, si_code);
    }
##### no_context
    static noinline void
    no_context(struct pt_regs *regs, unsigned long error_code,
           unsigned long address, int signal, int si_code)
    {
        struct task_struct *tsk = current;
        unsigned long flags;
        int sig;
        if (user_mode(regs)) {
            // 用户模式访问内核态, 直接oops
            goto oops;