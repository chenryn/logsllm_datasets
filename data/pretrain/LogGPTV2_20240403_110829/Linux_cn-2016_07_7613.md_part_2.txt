```
reboot   system boot  4.4.0-28-generic Thu Jul  7 08:14   still running
```
这只是一台服务器，如果你有许多服务器的话，你可以自动化这个过程。我在 WSL 里我的主目录下创建了一个名为 servers.txt 的文件，它包含了一系列 Linux 服务器/设备的名称，每个一行。然后我就可以创建一个脚本来读取这个文件。
在使用了很多年像树莓派这样的设备之后，我已经变成了一个 nano 人（在 VMS 上我是一个 LSEdit 人），下面是我用我喜爱的 nano 编辑器打开的脚本。
![](/data/attachment/album/201607/25/140846fw4owiv3vvrqqq4h.png)
当然，你也可以使用 vim 、 emacs 或者其它可以用在 Ubuntu 终端上的编辑器。
该脚本是 Bash 脚本，要执行该脚本，输入：
```
$ ./foreachserver.sh 'last -x|grep reboot'
```
它将迭代输出文件中的每个服务器/设备，然后通过 ssh 远程执行该命令。当然，这个例子非常简单，但是你可以像这样把你的本地脚本或其它命令变成远程的。Bash 脚本语言足够丰富，所以你可以使用它来完成你的大多数远程管理任务。你可以用你下载到 WSL 或远程系统中的其它应用来扩展它的使用。
> 
> 你是否需要在工作中把本地的 Windows 文件或资源用于其它的 Linux 计算机吗？或者，你根本不使用 Linux ？Bash 可以操作本地的 Windows 文件或资源，还是说它就是一个完全独立的环境？
> 
> 
> 
### 使用 Windows 文件
WSL 系统可以通过 `/mnt//` 目录（挂载点）来访问你计算机上的文件系统。举个例子，你的 Windows 上的 C:\ 和 D:\ 根目录可以在 WSL 中相应地通过 /mnt/c 和 /mnt/d 访问。当你要把你的 Windows 下的项目文件、下载的内容和其它文件用到 Linux/Bash 之中时这很有用。
![](/data/attachment/album/201607/25/140846n75duzv9h9h5h3u5.png)
上图显示的两个目录分别对应于我的计算机上的 SSD 和硬盘：
![](/data/attachment/album/201607/25/140847vl6rpr3o6zuunx6n.png)
这是逻辑挂载，所以当你在 shell 中使用类似 `mount` 这样的命令时它们不会显示。但是它们可以如你预期的那样工作。举个例子，在 Windows 中，我在我的 C 盘根目录下放了一个名为 test.txt 的文件，我可以在 WSL 中如下访问它： 
![](/data/attachment/album/201607/25/140847mbdtdn4dl0azt4tz.png)
在 Build Tour 大会期间，我们要确保所有的演示都可以在没有互联网时也能正常工作（你绝不会知道会场的网络是什么样子的） ，所以为了让 Bash/WSL 可以演示 Git 操作，该演示访问的是本地计算机上的 Windows 文件，我在 Windows 上的 C:\git\NetHack 下设置一个本地仓库。 要在 WSL 中进行 clone 操作，我执行了如下命令：
```
$ git –clone file:///mnt/c/git/NetHack
```
该命令告诉 git 使用 `file://` 协议，并 clone 了位于 /mnt/c/git/NetHack 下的仓库。你可以以类似的方式来访问你的 Windows 下的所有文件。
警示：就像在其它终端中一样，如果你不小心的话，你可以在 Bash 中修改/删除 Windows 文件系统中的文件。举个例子，你可以像下面这样来干掉你的 Windows ，假如你有合适的权限的话。
```
$ rm -rf /mnt/c/  [千万别试！][千万别试！][千万别试！]
```
我之所以郑重提醒是因为我们很多人都是刚刚接触 Linux 命令，它们不是 Windows 命令。
这种可以让文件系统集成到一起的魔法来自 DrvFs。如果你希望了解该文件系统的更多细节，以及它是如何工作在 WSL 中的，WSL 团队为此写了一篇[详细的文章](https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/)。
> 
> 当然， 文件系统访问只是 WSL 其中的一部分功能而已，许多开发任务还需要通过 HTTP 或其它网络协议访问远程资源。
> 
> 
> 
### 发起 HTTP 请求
从脚本或命令行而不是从一个编译好的程序或 Web 页面上发起 REST 或其它 HTTP（或 FTP）请求是很有用的。就像在大多数 Linux 发行版一样，WSL 也包括了类似 curl 或 wget 获取资源这样的标准功能，它们可以用来发起 HTTP 或者其它网络请求。举个例子，下面是使用 curl 对 Github 发起 REST 请求来获取我个人的属性信息：
```
$ curl -i https://api.github.com/users/Psychlist1972
HTTP/1.1 200 OK
Server: GitHub.com
Date: Wed, 13 Jul 2016 02:38:08 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 1319
Status: 200 OK
...
{
  "login": "Psychlist1972",
  "avatar_url": "https://avatars.githubusercontent.com/u/1421146?v=3",
  "url": "https://api.github.com/users/Psychlist1972",
  "name": "Pete Brown",
  "company": "Microsoft",
   ...
}
$
```
你可以用它和 Bash 脚本来创建一个 REST API 的快速测试客户端，也可以用来探测一个 Web 页面或服务器并报告其返回的状态。它用来从网上下载文件也很棒，你可以简单地重定向输出到一个文件而不是在屏幕上显示它：
```
$ curl -i https://api.github.com/users/Psychlist1972 > pete.json
```
我也是一个 PowerShell 用户，甚至还使用 [Windows 10 MIDI in PowerShell](https://github.com/Psychlist1972/Windows-10-PowerShell-MIDI) 创建了一些有趣的扩展，也[修复](https://github.com/Psychlist1972/Fix-SoundDevices-File-Corruption)过出现在特定的录音硬件设备上的一些文件问题。作为长时间的 .NET 开发者和爱好者，我经常使用和扩展 PowerShell 以满足我的项目需求。但是 PowerShell 并不是一个可以运行所有的那些 Bash 脚本和针对 Linux 的开源工具的地方。我希望以一种最简单、最舒服的方式来完成这些任务，在某种意义上，这意味着我们需要在 Bash 中完成它们。
> 
> 我已经一掠而过的介绍了 Bash、Bash 脚本以及你可以在 shell 中完成的任务。到目前为止，我谈论的都是有助于开发工作的那些功能。但是在 WSL 中实际的开发和编译工作是怎样的？我在 Build Tour 大会上演示了下面这个部分。
> 
> 
> 
### Build Tour 大会上的演示：NetHack
这个夏初，来自微软的讲演者们向大家演示了一些来自 Windows 和微软云上的很酷的开发者新功能。作为其中的一部分，我以一种好玩的方式来演示了 WSL，而且这是一种和开发者们相关的方式。
我个人想要展示使用 git 和一些传统的终端开发工具，我已经写好了 Bash 的演示程序，包括了这些基础的东西（用 Python 和 Ruby 写的“Hello World”），不过我还是想要更有冲击力一些。
我回想起我在大学的时光，那时我们在 Unix（DEC Ultrix 及 SunOS）和 VAX/VMS 之间折腾，Unix 几乎全是命令行环境。在我们学校，绝大多数使用图形工作站的用户只是为了在不同的窗口打开多个终端会话而已，当然，会在桌面背景放上一张超酷的月相图。大部分学生都是使用 VT-220 终端来打开他们的会话（学校离波士顿不远，所以我们有很多 DEC 设备）。
那时，计算机系的学生们主要玩两大游戏：MUD （主要是 lpMUD 和当时刚出的 DikuMUD）和 [NetHack](https://en.wikipedia.org/wiki/NetHack)。NetHack 和其它的 [Roguelikes](https://en.wikipedia.org/wiki/Roguelike) 类游戏被视为历史上最有影响力的游戏之一，它们是许多现在流行的地牢冒险和角色扮演类游戏的鼻祖。
NetHack 有很长的历史，现在的它包含了来自几十年前的几十万行 \*nix 代码，以及后来补充的一些代码。该游戏使用 [curses](https://en.wikipedia.org/wiki/Curses_(programming_library)) （及其替代品）作为终端交互方式，需要通过 lex、 yacc（或 flex 和 bison）和 cc（或 gcc），以及一堆其它的开发工具构建。
它是由 C 语言编写的，并包括了一些用 [Bourne shell](https://en.wikipedia.org/wiki/Bourne_shell) 编写的复杂的脚本配置功能。我觉得它是一个体现 WSL 和 Bash on Windows 10 的开发者能力的不错而有趣的方式。由于使用了 curses（在 Linux 和 WSL 中是 libncurses 库），它也可以用来展示 Windows 10 中命令行窗口中的终端模拟能力。
以前，在我们的分时 Ultrix 服务器上从源代码构建 NetHack 要花费掉我们很多时间，而现在我的个人计算机上只需要几分钟就可以搞定。我喜欢这种技术进步。在 Linux 或 WSL 上配置和编译 NetHack 有容易和复杂两种方式。为了节省时间，我们会以容易的方式来进行。
#### 前置需求
首先，更新你的 WSL 环境，确保你的软件是最新的。在安装新的软件包之前，这是一个好的做法。
```
$ sudo apt update
$ sudo apt upgrade
```
然后，安装必须的开发工具。最简单的办法就是使用 build-essential 软件包，它包括了 Linux 开发者构建以 C/C++ 开发的软件时所需的绝大部分程序。
```
$ sudo apt install build-essential
```
这要花几分钟。如果你想更加深入地了解，你可以分别安装 gcc、gdb、make、flex、bison 以及 NetHack 文档中提到的其它工具。不过如果你是一位开发者，有时候你可能还需要一些其它工具。 build-essential 基本上提供了你所需的工具集。
然后，安装 git。如你所想，很容易：
```
$ sudo apt install git
```
就像在 Linux 中一样，你可以添加一个 git 的 PPA 来获取较新的版本，不过这里我们有一个就行了。
最后，我们需要安装 curses（实际上是 ncurses）来进行终端屏幕交互。
```
$ sudo apt install libncurses-dev
```
当我们完成这些步骤之后，就可以开始构建 NetHack 了。