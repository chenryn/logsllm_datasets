# 【木马分析】针对升级后Shifu银行木马的深度分析
|
##### 译文声明
本文是翻译文章，文章来源：researchcenter.paloaltonetworks.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**翻译：**[ **myswsun**
****](http://bobao.360.cn/member/contribute?uid=2775084127)
**预估稿费：260RMB**
******投稿方式：发送邮件至**[ **linwei#360.cn**](mailto:PI:EMAIL) **，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿******
**  
**
**0x00 前言**
银行木马Shifu在2015年首次被披露。Shifu是基于Shiz的代码整合了Zeus的技术。攻击者用Shifu盗取俄罗斯、英国、意大利等其他国家的网上银行的网站的证书。
Palo Alto Networks Unit
42研究发现Shifu的作者在2016年更新了。我们的研究发现Shifu整合了多种新技术和躲避检测技术。有些如下：
利用Windows的CVE-2016-0167的提权漏洞获得SYSTEM权限。之前的Shifu使用CVE-2015-0003达到相同的目的
用一个Windows的atom来判断之前版本是否感染。
用“push-calc-ret”API混淆技术在恶意软件分析时隐藏函数调用
用可变的.bit域名
我们也确认了新的链接暗示了Shifu可能不是基于Shiz木马，但是可能是最新版Shiz的变种。
本文主要的目的是介绍Shifu的新特征。下面是新特征的概述，在最后的附录包括详细的技术细节。
**0x01 Shifu的开发与新特征**
本文分析的Shifu是由几步payload组成，在2016年编译的。下图说明了在执行后解密的原始loader包含的不同的文件：
图1. Shifu的文件结构
原始的混淆的loader（x86 exe）包含加密的二级injector（x86
exe）。它用了3层解密，子过程用函数VirtualAlloc()为下一层分配内存。二级injector被解密到内存中并且原始loader覆写它。接下来节标志被调整和IAT重建。最后跳转到二级injector的入口点执行。
二级injector包含两个CVE-2016-0167（x86/x64）的利用，编译于2016年2月。在这个编译的时间这个漏洞的补丁还不存在。然而这个恶意程序的编译时间是2016年6月。这个可能暗示在这个版本之后有人在那时能获得0day利用。这个利用用了一个有趣的技术使复制原始数据到内存成为可能。为了使可执行文件能在内存中执行，它用了一个自定义的shellcode型PE加载器作为PE
overlay数据追加在这两个版本的利用后面。Shellcode充分调整内存数据以获得一个可靠的可执行文件的内存映像并执行利用。这么做，文件只需要被拷贝进内存中，通过shellcode就能执行。
我们也发现多种其他的独立版本的利用（x86/x64），但是也是像Shifu一样被嵌入在injector中。另外，我们确定一个版本的Vawtrak包含了早期的利用，根据编译时间可以追溯到2015年11月。这个Vawtrak样本自己的编译时间是2016年1月，因此是第一个为我们知道的利用这个漏洞的样本。
二级injector包含了集中反分析技巧，由于之前版本相同。它也包含两种命令行参数说明这个恶意程序还在开发中。另外，二级injector用一个atom校验系统是否已经被感染，而不是使用现在最常用的互斥量。Atom的用法不是一个新的技术但是没有被广泛使用。
Main payload加密压缩的存储与二级injector的.tls节中。它首先用aPlib库解密解压。Main
payload把原始loader拷贝到AppData目录并在启动目录创建一个Jscript文件。二级injector将main
payload注入到32位的svchost实例中，用一个混淆技术给它的API函数打补丁，使得静态和动态分析变得更加困难。
和前一个版本比较，这个main payload包含了一些更新。包括在受害者系统上搜索的字符串、浏览器列表、命令。Main
payload用顶级域名.bit作为C&C服务器。域名、user-agent字符串和URL参数用修改版的RC4算法加密。域名暗示了攻击者可能位于乌克兰或有乌克兰背景。
不幸的是，在分析时这个C&C服务器不能响应任何命令了，因此进一步的分析不太可能。这个信息被正常的下载到受害者的磁盘上。功能上，这个main
payload挂钩svchost.exe进程的一些API函数。而且，它用Apache服务器做web注入。如果成功的从C&C服务器，恶意软件利用分层服务挂钩winsock
API，用于拦截和修改出入的网络流量。它也使用在其他银行木马中发现的正常的方法挂钩到浏览器网络函数。
二级injector和main payload都包含了大量的从没使用过的字符串。这个说明作者不是匆忙编译了恶意程序就是开发过程缓慢。
“IntelPowerAgent6”能在上个版本看见，这个版本没看见有“IntelPowerAgent32“。为了二级injector能够创建一个用来校验系统是否被感染的atom，这个main
payload也创建了一个基于相同方法的互斥量（详见附录）。然而这个互斥量用了一个硬编码的前缀“DAN6J0-”放在一个字节序列的前面：“{DAN6J0-ae000000d2000000e100}”。
图2. Shifu的互斥量和相关的svchost进程
**0x02 Shifu,Shiz和其他相关的工具**
银行木马Shifu是基于一个目前还存活的比较老的名为Shiz/iBank的源码。Shiz首先被发现于2006年，已经发展了好几代。它以前专注于俄罗斯经融机构。后来变得国际化转向了意大利的银行。过去5年我们跟踪到了多个版本：2代到4代（2011年），5代（2013年/2014年）。上一次看到还是在2014年（内部版本是5.6.25）,并且它的代码风格不同于第4代。它看起来像是另一个人开发的，可能说明代码被卖或分享。连接C&C服务器的查询字符串很好的支持了我们的想法：
    botid=%s&ver=5.0.1&up=%u&os=%03u&ltime=%s%d&token=%d&cn=reborn&av=%s
我们看到组织名包含字符串“reborn”（重生）。
Shifu首先被发现于2015年中期，并且我们认为Shiz发展了5代，变得更加国际化。
过去几年我们不仅跟踪了Shiz，也发现了几个号称来自相同作者的其他的恶意工具。收集样本说明了作者已经开发了一整套金融相关的恶意程序。不清楚作者是不是为一个组织工作或者他们自己单独行动。这些工具主要第五代Shiz的代码。
我们能将这些工具联系在一起，因为他们都包含相同根目录的PDB路径：
    Z:coding…
而且，大部分工具也是基于Shiz代码的，因为代码风格和使用的API很相似。同时用bindiff比较工具代码也高度相似。这些工具网络功相关的字符串也和Shiz连接C&C服务器的类似。
根据去年来自FireEye的同事描述，PDB路径也是如下：
    Z:codingprojectmainpayloadpayload.x86.pdb
其他工具有以下的PDB路径，很像来自同一个作者：
    Z:codingcryptorReleasecrypted.pdb
    Z:codingmalwaretestsReleasecryptoshit.pdb
    Z:codingmalwareRDPoutputReleaserdp_bot.pdb
    Z:codingmalwareScanBotReleasebot.pdb
内部名为“cryptor”的恶意程序包含了一个加密的样本“BifitAgent”，这个恶意程序攻击金融业软件。BifitAgent的作者也可能是同一个，不过我们没有发现一些证据。根据编译时间，大部分样本创建于2013年的10月和11月。
名为“rdp_bot”是一个用远程桌面协议获取访问计算机的权限的恶意程序。它用和Shifu一样的被修改的RC4加密算法。这个工具可能和Shiz一起使用，因为攻击者能够直接用受害者的电脑做欺诈行为。通过这么做，能够欺骗银行的校验IP地址、浏览器指纹或键盘布局的反欺诈系统。这个工具基于Alisa
Esage的RDP研究。这个样本可以追溯到2013年11月。
名为“cryptoshit”的工具包含了加密的rdp_bot样本，并且用了相同的修改版RC4加密算法。这个样本追溯到2013年9月和10月，2014年的1月。
内部名为“ScanBot”的恶意程序是一个小的后门程序，它使用了一个超级轻量的正则库来扫描受害者电脑的文件。这个样本追溯到2013年6月。
**0x03 样本**
Initial obfuscated loader
    d3f9c4037f8b4d24f2baff1e0940d2bf238032f9343d06478b5034d0981b2cd9
    368b23e6d9ec7843e537e9d6547777088cf36581076599d04846287a9162652b
    e7e154c65417f5594a8b4602db601ac39156b5758889f708dac7258e415d4a18
    f63ec1e5752eb8b9a07104f42392eebf143617708bfdd0fe31cbf00ef12383f9
Second stage injector
    003965bd25acb7e8c6e16de4f387ff9518db7bcca845502d23b6505d8d3cec01
    1188c5c9f04658bef20162f3001d9b89f69c93bf5343a1f849974daf6284a650
Exploit injector
    e7c1523d93154462ed9e15e84d3af01abe827aa6dd0082bc90fc8b58989e9a9a
CVE-2016-0167 exploit (x86)
    5124f4fec24acb2c83f26d1e70d7c525daac6c9fb6e2262ed1c1c52c88636bad
CVE-2016-0167 exploit (x64)
    f3c2d4090f6f563928e9a9ec86bf0f1c6ee49cdc110b7368db8905781a9a966e
Main payload
    e9bd4375f9b0b95f385191895edf81c8eadfb3964204bbbe48f7700fc746e4dc
    5ca2a9de65c998b0d0a0a01b4aa103a9410d76ab86c75d7b968984be53e279b6
**0x04 附录——技术细节**
**Second Stage Injector 分析**
这个second stage injector是包含了一个利用injector（x86
DLL），继而包含两个内嵌的CVE-2016-0167利用（x86/x64 DLL）。second stage
injector也包含一个加密的并用aPlib压缩的main payload（x86
DLL），位于它的.tls节区。为了解密，它用一个修改版RC4加密算法解密存储在.rsrc节的数据。重要的字符串在.data节，并用密码0x8D异或加密。解密后的字符串如下：
    AddMandatoryAce
    ADVAPI
    Advapi32.dlladvapi32.dllws2_32.dll
    WPUCloseEvent
    WPUCloseSocketHandleWPUCreateEvent
    WPUCreateSocketHandle
    WPUFDIsSet
    WPUGetProviderPath
    WPUModifyIFSHandle
    WPUPostMessage
    WPUQueryBlockingCallbackWPUQuerySocketHandleContext
    WPUQueueApc
    WPUResetEvent
    WPUSetEvent
    WPUOpenCurrentThreadWPUCloseThread
    WSPStartup
     > %1rndel %0
    software\microsoft\windows\currentversion\run
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/echo 
    rundll32.exe shell32.dll, ShellExec_RunDLL %s
    Microsoft\Microsoft AntimalwareSoftware\Coranti
    Software\risingSoftware\TrendMicroSoftware\Symantec
    Software\ComodoGroup
    Software\Network Associates\TVD
    Software\Data Fellows\F-SecureSoftware\Eset\Nod
    Software\Softed\ViGUARD
    Software\Zone Labs\ZoneAlarm
    Software\Avg
    Software\VBA32
    Software\Doctor WebSoftware\G DataSoftware\Avira
    Software\AVAST Software\Avast
    Software\KasperskyLab\protected
    Software\Bitdefender
    Software\Panda SoftwareSoftware\Sophos.bat\\.\%C:
    |$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\]^_`abcdefghijklmnopq
    conhost
    CreateProcessInternalW
    ConvertStringSecurityDescriptorToSecurityDescriptorWContent-Type: multipart/form-data; boundary=---------------------------%srn
    Content-Type: application/x-www-form-urlencodedrn
    Host: %srn%d.%d.%d.%d
    %d.%d.%d.%d.%x
    %temp%\debug_file.txt
    [%u][%s:%s:%u][0x%x;0x%x] %sDnsFlushResolverCache
    \*.*
    dnsapi.dll
    DnsGetCacheDataTable.dll.exedownload.windowsupdate.com
    vk.com
    yandex.ru
    HTTP/1.1https://http://%s
    IsWow64Process
    kernel
    kernel32.dllLdrGetProcedureAddress
    Microsoft
    NtAllocateVirtualMemory
    CLOSED
    LAST_ACKTIME_WAIT
    DELETE_TCB
    LISTEN
    SYN_SENTSYN_RCVDESTAB
    FIN_WAIT1
    FIN_WAIT2
    CLOSE_WAIT
    CLOSING
    TCPt%s:%dt%s:%dt%sn
    netstatnPrototLocal addresstRemote addresstStaten
    ntdll.dll
    NtResumeProcess
    NtSuspendProcess\\?\globalroot\systemroot\system32\drivers\null.sys
    NtWriteVirtualMemoryopenRegisterApplicationRestart
    RtlCreateUserThread
    ResetSR
    RtlComputeCrc32
    rundll32SeDebugPrivilegeSystemDrive
    \StringFileInfo\%04x%04x\ProductName
    software\microsoft\windows nt\currentversion\winlogon
    shell
    Sleep
    srclient.dllSeShutdownPrivilege
    "%s"
    %dt%sntaskmgrnPIDtProcess namennet usern
    the computer is joined to a domainn..
    \VarFileInfo\Translation
    %windir%\system32\%windir%\syswow64\POST*.exe
    %SystemDrive%\
    *SYSTEM*%02x%s:Zone.Identifier
    GetProcessUserModeExceptionPolicy
    SetProcessUserModeExceptionPolicy
    %ws\%wsn
    WORKGROUP
    HOMESoftware\Microsoft\Windows\CurrentVersion\Policies\ExplorerDisableCurrentUserRun
    %s.dat
    software\microsoft\windows%OS%_%NUMBER_OF_PROCESSORS%
    S:(ML;;NRNWNX;;;LW)D:(A;;GA;;;WD)
    S:(ML;;NRNWNX;;;LW)D:(A;;GA;;;WD)(A;;GA;;;AC)
    \\.\AVGIDSShim
    FFD3\\.\NPF_NdisWanIpc:\sample\pos.exe
    ANALYSERS
    SANDBOX
    VIRUS
    MALWARE
    FORTINETMALNETVMc:\analysis\sandboxstarter.exec:\analysisc:\insidetmc:\windows\system32\drivers\vmmouse.sys
    c:\windows\system32\drivers\vmhgfs.sys
    c:\windows\system32\drivers\vboxmouse.sys
    c:\iDEFENSEc:\popupkiller.exe
    c:\tools\execute.exe
    c:\Perlc:\Python27api_log.dll
    dir_watch.dll
    pstorec.dll
    dbghelp.dll
    Process32NextW
    Software\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3
    1406.bitMiniDumpWriteDump
    rnReferer: %srn
    \Google\Chrome\User Data\Default\Cache
    var %s = new ActiveXObject("WScript.Shell"); %s.Run("%s");
    IntelPowerAgent32
    %OS%_%NUMBER_OF_PROCESSORS%
    %scmd.exe
    ComSpec
    ConsoleWindowClass
    .exekernel32.dllntdll.dll
    ZwQuerySystemInformationZwAllocateVirtualMemory
    PsLookupProcessByProcessId
    PsReferencePrimaryToken
    Class
    Window
    open "%s" -q%windir%\system32\sdbinst.exe
     /c "start "" "%s" -d"
    %windir%\system32\sndvol.exe
     "%s" -u /c "%s\SysWOW64\SysSndVol.exe /c "start "" "%s" -d""
    %temp%\%u
    %u.tmp
    Wow64DisableWow64FsRedirection
    Wow64RevertWow64FsRedirection
    runas.exe
    %systemroot%\system32\svchost.exe
    %systemroot%\system32\wscript.exe
    snxhk.dll
    sbiedll.dll
     /c start "" "%s" " "
    cmd.exe
    runas
     --crypt-test
    It work's!
     --vm-test
**内嵌CVE-2016-0167利用的exploit injector**
Exploit
injector被用来在被感染的主机上面获取SYSTEM权限。这个注入器同时包含x86和x64利用。“MZ”字符用null字节替换用来防止被检测。
Second stage injector会校验当前京城的完整性级别和操作系统版本。如果进程的完整性级别是低并且操作系统版本是6.1（Windows
7/Windows Server 2008 R2），second stage injector将exploit
injector文件写入内存。然后在exploit injector中搜索0x99999999。当地址被找到时，12个字节被添加并且second stage
injector跳转到PE loader中。调用到shellcode的如下：
    00401EF5   pusha
    00401EF6   add esi, 0Ch
    00401EF9   call esi   -> PE loader shellcode in overlay