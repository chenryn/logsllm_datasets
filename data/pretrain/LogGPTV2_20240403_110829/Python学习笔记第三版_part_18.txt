点是性能要差上⼀些。但考虑到它只存储数据，实际执⾏过程依然在系统栈完成，倒也能
接受。
栈帧使⽤频繁，系统最多缓存 200 个栈帧对象，并按函数实际所需调整其内存⼤⼩。
操作系统对栈⼤⼩限制可使⽤ ulimit -s 查看，最新 64 位系统通常为 8 MB。
⼀旦函数执⾏（⽐如递归）内存超出限制，就会引发堆栈溢出（stack overflow）错误。
栈帧内，变量内存通常固定不变，执⾏内存视具体指令重复使⽤。
!166
学习笔记 . 第三版
def add(x, y):
return x + y
def test():
x = 10
y = 20
z = add(x, y)
print(z)
>>> dis.dis(test)
2 0 LOAD_CONST 1 (10)
2 STORE_FAST 0 (x)
3 4 LOAD_CONST 2 (20)
6 STORE_FAST 1 (y)
4 8 LOAD_GLOBAL 0 (add) # 将待调⽤用函数 add ⼊入栈。
10 LOAD_FAST 0 (x) # 将变量量 x ⼊入栈。
12 LOAD_FAST 1 (y) # 将变量量 y ⼊入栈。
14 CALL_FUNCTION 2 # 调⽤用函数（2 为参数数量量）。
16 STORE_FAST 2 (z) # 将返回值从栈保存到变量量区。
5 18 LOAD_GLOBAL 1 (print)
20 LOAD_FAST 2 (z)
22 CALL_FUNCTION 1
24 POP_TOP # 清除 print 返回值，确保栈平衡。
26 LOAD_CONST 0 (None)
28 RETURN_VALUE
test frame test frame test frame
y = 20
x = 10 z = 30
CALL_FUNCTION
add return 30 print
FAST: x, y, z FAST: x, y, z FAST: x, y, z
调⽤堆栈常出现调试⼯具中，⽤于检视调⽤过程，以及各级环境变量取值。当然，也可在
代码中使⽤，⽐如获取上级函数设置的上下⽂信息。函数 sys._getframe 可访问调⽤堆栈内
不同层级栈帧对象。参数 0 表⽰当前函数，1 为上⼀级函数，如此类推。
!167
学习笔记 . 第三版
def A():
x = "func A"
B()
def B():
C()
def C():
f = sys._getframe(2) # 向上 2 级，获取 A 栈帧。
print(f.f_code) # A 代码对象。
print(f.f_locals) # A 名字空间。（此时为运⾏行行期）
print(f.f_lasti) # A 最后执⾏行行指令偏移量量。（以确定继续执⾏行行位置）
>>> A()
{'x': 'func A'}
6
>>> dis.dis(A)
2 0 LOAD_CONST 1 ('func A')
2 STORE_FAST 0 (x)
3 4 LOAD_GLOBAL 0 (B)
6 CALL_FUNCTION 0  10
如果只是简单查看调⽤过程，可直接⽤ traceback 模块，类似解释器输出错误信息那般形式。
递归
递归深度受限，可使⽤ sys.getrecursionlimit、setrecursionlimit 查看和调整。
import sys
sys.setrecursionlimit(50)
def test():
test() # 递归调⽤用。
test()
输出：
$ python demo.py
RecursionError: maximum recursion depth exceeded
递归常被⽤来改善循环操作，⽐如树状结构遍历。当然，它须承担函数调⽤的额外开销，
类似栈帧创建等。尤其在不⽀持尾递归优化的情况下，这种负担尤为突出。
如函数 A 的最后动作是调⽤ B，并直接返回 B 结果。那么 A 的栈帧状态就⽆需保留，其内存可
直接被 B 覆盖使⽤。另外，还可将函数调⽤指令优化跳转指令，⼤⼤提升执⾏性能。如此⽅式，
被称作尾调⽤消除或尾调⽤优化（Tail Call Optimization，TCO）。
!169
学习笔记 . 第三版
如果 A 尾调⽤⾃⾝，那么就成了尾递归。鉴于重复使⽤同⼀栈帧内存，可避免堆栈溢出。不过
Python 因实现⽅式不同，对此并不⽀持。
包装
对已有函数，可通过包装形式改变其参数列表，使其符合特定调⽤约束。
def test(a, b, c):
print(locals())
>>> import functools
>>> t = functools.partial(test, b = 2, c = 3)
>>> t(1)
{'c': 3, 'b': 2, 'a': 1}
原理很简单，⽤包装函数合并相关参数后，再调⽤原⽬标即可。
示意伪码
def partial(func, *part_args, **part_kwargs):
def wrap(*call_args, **call_kwargs):
kwargs = part_kwargs.copy() # 复制包装键值参数。
kwargs.update(call_kwargs) # 使⽤用调⽤用键值参数更更新包装键值参数。
return func(*part_args, *call_args, **kwargs) # 按顺序展开参数。
return wrap
按此流程，可确定基本合并规则：
1. 包装位置参数优先。
2. 调⽤键值参数覆盖包装键值参数。
3. 合并后不能对单个⽬标参数多次赋值。
>>> functools.partial(test, 1, 2)(3) # 包装位置参数优先。
{'c': 3, 'b': 2, 'a': 1}
!170
学习笔记 . 第三版
>>> functools.partial(test, 1, c = 3)(2, c = 100) # 调⽤用键值参数覆盖包装参数。
{'c': 100, 'b': 2, 'a': 1}
包装函数内存储有相关信息，可供查阅。
>>> t = functools.partial(test, 1, c = 3)
>>> t.func # 原⽬目标函数。
>>> t.args # 包装位置参数。
(1,)
>>> t.keywords # 包装键值参数。
{'c': 3}
!171
学习笔记 . 第三版
五. 迭代器
1. 迭代器
迭代是指重复从对象中获取数据，直⾄结束。⽽所谓迭代协议，概括起来就是⽤ __iter__
⽅法返回⼀个实现了 __next__ ⽅法的迭代器对象。
实现 __iter__ ⽅法，表⽰⽬标为可迭代（iterable）类型，允许执⾏⼿动或⾃动迭代操作。
该⽅法新建并返回⼀个具体的迭代器（iterator）实例。随后，通过调⽤ iterator.__next__
依次返回结果，直⾄抛出 StopIteration 异常表⽰结束。
我们注意到，迭代器使⽤了分离设计。⾸先，对⽬标对象⽽⾔，迭代器只是⼀种与⾃⾝逻
辑⽆关的⽤户接⼜，组合显然⽐内联更合适；其次，迭代分多次完成，需保存其进度。这
其中还包括重复迭代，以及同时有多个迭代等情形。如何存储并管理这些状态？莫不如每
次按需新建实例，单向存储当前进度。⽤完即毁，⽆需考虑太多。
__iter__ __next__
iterator foreach
data
__iter__ __next__
iterator foreach
数据源 迭代接口和状态
可迭代类型未必就是序列数据，也可能是按前后顺序操作的栈、队列，随机返回键值的哈希表，
甚⾄是未知终点的⽹络数据流。
内置容器类型，还有些常⽤函数均实现了迭代接⼜。
>>> issubclass(list, collections.Iterable)
True
>>> isinstance(range(3), collections.Iterable)
True
!172
学习笔记 . 第三版
>>> isinstance(zip([1, 2]), collections.Iterable)
True
自定义类型
以 Python 包办家长的性格，肯定有便捷⽅式创建迭代器类型。但为更好理解协议流程和
操作⽅式，我们先⽤笨⽅法逐⼀实现。
class Data:
def __init__(self, n):
self.data = list(range(n))
def __iter__(self):
return DataIter(self.data) # 返回新迭代器器实例例。
class DataIter:
def __init__(self, data):
self.data = data
self.index = 0
def __next__(self):
if not self.data or self.index >= len(self.data):
raise StopIteration # 抛出异常表示迭代结束。
d = self.data[self.index] # 本次迭代返回数据。
self.index += 1 # 存储迭代进度。
return d
⼿手⼯工迭代
>>> d = Data(2)
>>> x = d.__iter__()
>>> x.__next__()
0
>>> x.__next__()
1
>>> x.__next__()
StopIteration
!173
学习笔记 . 第三版
⾃自动迭代
>>> for i in Data(2): print(i)
0
1
因⽆法通过 __next__ ⽅法传⼊参数，⾃然也就⽆从重置状态或调整进度。迭代器实例本质
上属⼀次性消费，这也是每次在 __iter__ ⾥新建的理由。
按理说，迭代器本⾝也应该是可迭代类型。但因缺少 __iter__ 实现，⽆法使⽤。
>>> x = Data(2).__iter__()
>>> x.__iter__()
AttributeError: 'DataIter' object has no attribute '__iter__'
如此，可为其添加 __iter__ ⽅法，⽤于返回⾃⾝。
class DataIter:
def __iter__(self):
return self
...
辅助函数
前⽂⽰例有些笨拙，因为其内在列表容器已经实现迭代接⼜，直接返回便可，⽆需画蛇添
⾜。当然，按照名字约定，我们不能直接调⽤ __iter__ ⽅法，⽽应改⽤ iter 函数。
class Data:
def __init__(self, n):
self.data = list(range(n))
def __iter__(self):
return iter(self.data)
!174
学习笔记 . 第三版
>>> Data(2).__iter__()
作为辅助函数，iter 还可为序列对象（__getitem__）⾃动创建迭代器包装。
class Data:
def __init__(self, n):
self.n = n
def __getitem__(self, index):
if index = self.n: raise IndexError
return index + 100
>>> iter(Data(2))
更甚⾄于对函数、⽅法等可调⽤类型（callable）进⾏包装。
可⽤于⽹络和⽂件等 IO 数据接收，⽐起循环语句更优雅⼀些。
>>> x = lambda: input("n : ") # 被 __next__ 调⽤用，⽆无参数。
>>> for i in iter(x, "end"): print(i) # 函数 x 返回值等于 end 时结束。
n : 1
1
n : 2
2
n : end
与 __next__ ⽅法对应的则是 next 函数，可⽤于⼿动迭代。
>>> x = iter([1, 2])
>>> while True:
try:
print(next(x))
except StopIteration:
break
!175
学习笔记 . 第三版
1
2
自动迭代
对于 for 循环语句，编译器会⽣成迭代相关指令，以实现对协议⽅法调⽤。
def test():
for i in [1, 2]: print(i)
>>> dis.dis(test)
2 0 SETUP_LOOP 20 (to 22)
2 LOAD_CONST 3 ((1, 2))
4 GET_ITER # 调⽤用 __iter__ 返回迭代器器对象（或包装）。