首先是随机生成1000个字符串，每个字符串15字节，构成一个对象数组，字符串的字符种类有3种，分别是大写字母、小写字母和数字
然后循环100次
  1. 计算每个字符串和标准字符串的相似度，具体计算方法为逐字符做差取绝对值累加，将相似度保存在对象中，然后对整个数组按照相似度排序
  2. 求出相似度的平均值，乘以一个比例0.0018（double类型，根据IEEE标准解析），得到值X
  3. 遍历所有字符串，相似度小于X的打上标记
  4. 随机选取1000对字符串，如果都具备标记则随机交换后半部分，交换完后计算相似度，如果降低则保留，否则还原
  5. 遍历带有标记的字符串，随机选取一个值做+1/-1浮动，选择相似度较小的保留
  6. 判断相似度最小的字符串的相似度是否小于某个值0x147，若小于则取相似度排名200-300的带有标记的字符串进行两两异或，从尾部开始逐字符计算，若相等则中断并判断下标是否小于某个值Len=0x4E57795F，若小于则判断Len+4是否大于等于30，是则退出，否则从Len开始重复该串的0-Len位，并在最后附加fill_value=”5mE9″。这一段逻辑比较绕，建议自己调试两遍看看memmove的作用  
根据逻辑想到遗传算法
> 遗传算法（Genetic Algorithm,
> GA）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。
>
>
> 其主要特点是直接对结构对象进行操作，不存在求导和函数连续性的限定；具有内在的隐并行性和更好的全局寻优能力；采用概率化的寻优方法，不需要确定的规则就能自动获取和指导优化的搜索空间，自适应地调整搜索方向。
>
>
> 遗传算法以一种群体中的所有个体为对象，并利用随机化技术指导对一个被编码的参数空间进行高效搜索。其中，选择、交叉和变异构成了遗传算法的遗传操作；参数编码、初始群体的设定、适应度函数的设计、遗传操作设计、控制参数设定五个要素组成了遗传算法的核心内容
>
> 摘自简书[超详细的遗传算法(Genetic Algorithm)解析](https://www.jianshu.com/p/ae5157c26af9)
上述所有参数都是对象的成员
由于我们之前对虚拟机的逆向已经知道有任意写的能力，于是这里的所有参数我们都是可以修改的
那么问题就在于修改哪些了
默认情况下怎么跑都会由于X=平均值*选优比例0.0018=0而没有字符串被标记，于是后面几个函数就都没有用了
所以首先要修改的就是比例0.0018，虽然对象中有几个备选比例成员，测试发现都还是不行，于是大胆给他上了200（……
这个200也是需要用double类型存储的，用matlab转换
octave:3> num2hex(200)
ans = 4069000000000000
发现经过100轮遗传以后产生了很多字符串，但相似度仍然很低，于是再把max_loop遗传代数调大到1000，发现出现了很多跟标准字符串相似的串
注意特征是不同的字符全部位于尾端，猜测是因为交换的算法是两串交换尾端部分
再观察排名200-300的串
确认猜想，就是尾部若干字符不同
那么flag为啥还没出现呢？
因为数据成员中还有一个Len，默认值高达0x4E57795F，会导致任何串都无法进入
而怎么调整也并没有任何线索，它从0-23全部可取，每一个值都会导致解锁密钥不同，且进入解密时会破坏原密文
暴力试了所有值都无果，最终想到了对标准串暴力枚举所有Len和相同的值下标
结果正确的标准是对数据RC4解密后hash的值为36468080
    class RC4:
        def __init__(self, public_key=None):
            if not public_key:
                public_key = 'none_public_key'
            self.public_key = public_key
            self.index_i = 0;
            self.index_j = 0;
            self._init_box()
        def _init_box(self):
            """
            初始化 置换盒
            """
            self.Box = [i for i in range(256)]
            key_length = len(self.public_key)
            j = 0
            for i in range(256):
                index = ord(self.public_key[(i % key_length)])
                j = (j + self.Box[i] + index) % 256
                self.Box[i], self.Box[j] = self.Box[j], self.Box[i]
        def do_crypt(self, string):
            """
            加密/解密
            string : 待加/解密的字符串
            """
            out = []
            for s in string:
                self.index_i = (self.index_i + 1) % 256
                self.index_j = (self.index_j + self.Box[self.index_i]) % 256
                self.Box[self.index_i], self.Box[self.index_j] = self.Box[self.index_j], self.Box[self.index_i]
                r = (self.Box[self.index_i] + self.Box[self.index_j]*2 + self.index_i + self.index_j) % 256
                # r = (self.Box[self.index_i] + self.Box[self.index_j]) % 256
                R = self.Box[r]  # 生成伪随机数
                out.append(((s) ^ R))
            return (out)
    # c = [0x7f, 0x2e, 0x79, 0x56, 0x6, 0xc2, 0xb8, 0x47, 0x52, 0xe1, 0xb9, 0x7f, 0x38, 0x1b, 0xa, 0xcc, 0x18, 0x7a, 0xec, 0xf8, 0xa2, 0x89, 0x91, 0x78, 0xa6, 0x4b, 0x1b, 0x85, 0x93, 0x9a, 0x4c, 0x59, 0x6e, 0xf5, 0xf4, 0x7c, 0xd2, 0xf4, 0x2, 0x6, 0xe4, 0xfb, 0xcb, 0xd7, 0x7c, 0xa9, 0x85, 0xe5, 0x0, 0x15, 0x90, 0x6, 0x4f, 0x1f, 0x52, 0x54, 0xf, 0x5a, 0x3d, 0x87, 0x32, 0x5b, 0xd6, 0xb2]
    c = [0xbe, 0x70, 0x48, 0xc6, 0xa1, 0x60, 0x68, 0xcf, 0xd2, 0x6e, 0x9e, 0x60, 0x81, 0x1a, 0x5d, 0x4a, 0x71, 0x9b, 0xea, 0x51, 0x2c, 0xb7, 0x46, 0xa1, 0x15, 0xb9, 0xee, 0xc6, 0xc8, 0x0, 0x8f, 0x10, 0xd, 0xc0, 0xe2, 0x79, 0xa5, 0x88, 0xcc, 0x6f, 0xc2, 0x1d, 0xd7, 0x8e, 0x2, 0xf6, 0x1b, 0x7a, 0x5f, 0x5b, 0x6f, 0xe3, 0x59, 0xe, 0x3f, 0x91, 0x16, 0x3c, 0x32, 0x95, 0x29, 0xec, 0xcb, 0xec]
    def hash1(x):
        r = 0
        for i in x:
            if(i>0x7f):
                i = i+0xffffff00
            r = r*16 + i
            v46 = r&0xf0000000
            if(v46!=0):
                r = r^(v46>>24)
            r = (~v46) & r & 0xffffffff
        return r
    true_h1 = 36468080
    ori = "rXWZ2OGQwo8Em9y"
    for final_len in range(24):
        for i in range(len(ori)):
            if(i>final_len):
                continue
            ss = ["" for k in range(48)]
            tmp = ["" for k in range(24)]
            s = ""
            for k in range(len(ori)):
                ss[k] = ori[k]
            ss[i]=""
            for k in range(final_len):
                tmp[k] = ss[k]
            for k in range(final_len):
                ss[final_len+k-1] = tmp[k]
            for k in range(len(ss)):
                if(ss[k]==""):
                    ss[k] = "8"
                    ss[k+1] = "E"
                    ss[k+2] = "m"
                    ss[k+3] = "9"
                    break
            print(ss)
            for k in ss:
                if(k==""):
                    break
                s += k
            print(final_len, i, s)
            rc4 = RC4(s)
            p = rc4.do_crypt(c)
            print("".join(map(chr,p)))
            h1 = hash1(p)
            print((i,s,h1))
            if(h1==36468080):
                print("!"*150)
打印出的值检索”!!!”可以发现flag
事后跟出题老师交流了一下发现问题出在min_value上，期望解法应该是将其改为1，这样当最优解即跟标准串完全一致的串出现时，排名200-300的串才具备N个字符不同的特征
默认的0x147出现时，排名200-300的串可能有N+1，N+2个字符不同，而RC4解密是一次性的，如果第一个进行解密的串不符标准就会破坏密文导致后续正确key即使出现也无法解密出flag
赛时写了一个方便Patch的IDA脚本，在generation之前执行即可Patch各个参数
    from ida_bytes import patch_bytes
    import struct
    base = idaapi.get_imagebase()
    GA = Qword(base+0x286a8)+Qword(base+0x286b0)
    print(hex(GA))
    min_value = GA+0x14
    loop_size = GA+0x18
    weight = GA+0x30
    ptr_str = GA+0x60
    final_len = GA+0x40
    w = "3ff0000000000000"
    #w = "3FF007D4E4D205F3"
    w = w.decode("hex")[::-1]
    patch_bytes(weight, w)
    patch_bytes(final_len, struct.pack("=min_value):
        break
      if(i<300):
        s = ""
        ptr_s = Qword((data3+16+24*i))
        for j in range(16):
          s += chr(Byte(ptr_s+j))
        print("[%d]:\t%d\t%s"%(i+1,v,s))
    print("alive:%d, v=%d"%(i+1,v))
想了解更多 题目出题人视角解析，请关注：滴滴安全应急响应中心（DSRC）公众号查看：