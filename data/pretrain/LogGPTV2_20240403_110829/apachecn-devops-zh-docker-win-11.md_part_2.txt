========== Debugging ==========
docker ps --filter "status=running" --filter "name=dockercompose1902887664513455984_webapi.netfx_" --format {{.ID}} -n 1
3e2b6a7cb890
docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}" 3e2b6a7cb890
172.27.58.105 
docker exec 3e2b6a7cb890 cmd /c "C:\Windows\System32\inetsrv\appcmd.exe set config -section:system.applicationHost/applicationPools /[name='DefaultAppPool'].processModel.identityType:LocalSystem /commit:apphost & C:\Windows\System32\inetsrv\appcmd.exe set config -section:system.webServer/security/authentication/anonymousAuthentication /userName: /commit:apphost"
Applied configuration changes to section "system.applicationHost/applicationPools" for "MACHINE/WEBROOT/APPHOST" at configuration commit path "MACHINE/WEBROOT/APPHOST"
Applied configuration changes to section "system.webServer/security/authentication/anonymousAuthentication" for "MACHINE/WEBROOT/APPHOST" at configuration commit path "MACHINE/WEBROOT/APPHOST"
Launching http://172.27.58.105/ ...
```
这是 Visual Studio 获取它用 Docker Compose 启动的容器的 ID，然后运行`appcmd`来设置 IIS 应用池使用管理帐户，并设置 web 服务器允许匿名认证。
当您停止调试时，Visual Studio 2017 会保持容器在后台运行。如果您对程序进行更改并重新构建，将使用相同的容器，这样就不会有启动延迟。通过将项目位置装载到容器中，内容或二进制文件中的任何更改都会在您重建时得到反映。通过从主机挂载远程调试器，您的映像中没有任何开发工具；他们留在主机上。
这是一个内部循环过程，在这里你会得到快速的反馈。每当您更改和重建应用时，您都会在容器中看到这些更改。但是，调试模式下的 Docker 映像不可用于外环配置项进程；该应用未复制到映像中；只有当您将应用从本地源装载到容器中时，它才能工作。
为了支持外部循环，在第二个隐藏的覆盖文件`docker-compose.vs.release.g.yml`中还有一个用于发布模式的 Docker 编写覆盖文件:
```
services:
  webapi.netfx:
    build:
      args:
        source: obj/Docker/publish/
    volumes:
      - C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE\Remote Debugger:C:\remote_debugger:ro
    entrypoint: cmd /c "start /B C:\\ServiceMonitor.exe w3svc & C:\\remote_debugger\\x64\\msvsmon.exe /noauth /anyuser /silent /nostatus /noclrwarn /nosecuritywarn /nofirewallwarn /nowowwarn /timeout:2147483646"
    labels:
      com.microsoft.visualstudio.debuggee.program: "C:\\app\\WebApi.NetFx.dll"
      com.microsoft.visualstudio.debuggee.workingdirectory: "C:\\app"
```
这里的区别在于，在容器中没有将本地源位置映射到 web 根目录的卷。在发布模式下编译时，源参数的值是包含 web 应用的发布位置。Visual Studio 通过将发布的应用打包到容器中来构建发布映像。
在发布模式下，您仍然可以在 Docker 容器中运行应用，并且仍然可以调试应用。但是您失去了快速反馈循环，因为要更改应用，Visual Studio 需要重建 Docker 映像并启动一个新的容器。
这是一个公平的妥协，Visual Studio 2017 中的 Docker 工具为您提供了无缝的开发体验，以及您的 CI 构建的基础。Visual Studio 2017 没有做的一件事是使用多阶段构建，因此项目编译仍然发生在宿主上，而不是容器内。这使得生成的 Docker 工件不太容易移植，所以您需要的不仅仅是 Docker 在服务器上构建这个应用。
# Visual Studio 2015 中的 Docker
Visual Studio 2015 有一个名为**的插件可以从市场上获得。这为您提供了 Docker 文件的语法高亮显示，但是它没有将 Visual Studio 与 Docker 集成在一起.NET 框架应用。使用 Visual Studio 2015，您可以将 Docker 支持添加到. NET Core 项目中，但是您需要手动编写自己的 Dockerfile 和 Docker Compose 文件来实现完整的. NET**
此外，在 Windows 容器中运行的应用没有集成调试。您仍然可以调试在容器中运行的代码，但是您需要手动配置设置。我将演示如何使用与 Visual Studio 2017 相同的方法，以及一些相同的妥协来实现这一点。
在 Visual Studio 2017 中，您可以将包含远程调试器的文件夹从主机装载到容器中。当您运行项目时，Visual Studio 启动一个容器，并从作为远程调试器代理的主机执行`msvsmon.exe`。您不需要在映像中安装任何东西来提供调试体验。
Visual Studio 2015 中的远程调试器不是那么便携。您可以从容器中的主机装载调试器，但是当您尝试启动代理时，您将看到关于丢失文件的错误。相反，您需要将远程调试器安装到映像中。
我在一个名为`ch11-webapi-vs2015`的文件夹中设置了这个。在此映像的 Dockerfile 中，如果`configuration`值设置为`debug.`，我使用构建时参数来有条件地安装调试器。这意味着我可以在安装调试器的情况下在本地构建，但是当我为部署而构建时，映像没有调试器:
```
ARG configuration
 RUN if ($env:configuration -eq 'debug') `
 { Invoke-WebRequest -OutFile c:\rtools_setup_x64.exe -UseBasicParsing -Uri http://download.microsoft.com/download/1/2/2/1225c23d-3599-48c9-a314-f7d631f43241/rtools_setup_x64.exe; `
 Start-Process c:\rtools_setup_x64.exe -ArgumentList '/install', '/quiet' -NoNewWindow -Wait }
```
在调试模式下运行时，我使用与 Visual Studio 2017 相同的方法将主机上的源目录装载到容器中，但是我创建了一个自定义网站，而不是使用默认网站:
```
ARG source
WORKDIR C:\web-app
RUN Remove-Website -Name 'Default Web Site';`
New-Website -Name 'web-app' -Port 80 -PhysicalPath 'C:\web-app'
COPY ${source:-.\Docker\publish} .
```
如果没有提供`source`参数，`COPY`指令中的`:-`语法指定了默认值。除非在`build`命令中指定，否则默认为从发布的 web 应用复制。我有一个带有基本服务定义的核心`docker-compose.yml`文件和一个`docker-compose.debug.yml`文件，该文件装载了主机源位置，映射了调试器端口，并指定了`configuration`变量:
```
services:
  ch11-webapi-vs2015:
    build:
      context: ..\
      dockerfile: .\Docker\Dockerfile
    args:
      - source=.\Docker\empty
      - configuration=debug
  ports:
    - "3702/udp"
    - "4020"
    - "4021"
  environment:
    - configuration=debug
  labels:
    - "com.microsoft.visualstudio.targetoperatingsystem=windows"
  volumes:
    - ..\WebApi.NetFx:C:\web-app
```
The label specified in the compose file attaches a key-value pair to the container. The value isn't visible inside the container, unlike an environment variable, but it is visible to external processes on the host. In this case, it is used by Visual Studio to identify the operating system of the container.
要在调试模式下启动应用，我使用两个编写文件来启动应用:
```
docker-compose -f docker-compose.yml -f docker-compose.debug.yml up -d
```
现在，容器正在使用容器内的**互联网信息服务** ( **IIS** )运行我的 web 应用，Visual Studio 远程调试器代理也在运行。我可以在 Visual Studio 2015 中连接到远程进程，并使用容器的 IP 地址:
![](img/3909f411-ca1a-4d71-a1c8-f10ecdc8607e.png)
Visual Studio 中的调试器连接到容器中运行的代理，我可以添加断点和查看变量，就像调试本地进程一样。在这种方法中，容器使用主机装载 web 应用的内容。我可以停止调试器，进行更改，重新构建应用，并在同一个容器中查看更改，而无需启动新的容器。
这种方法与 Visual Studio 2017 中集成的 Docker 支持具有相同的优点和缺点。我在本地调试的容器中运行我的应用，因此我获得了 Visual Studio 调试器的所有功能，并且我的应用运行在我将在其他环境中使用的同一平台上。但是我不会使用相同的映像，因为 Dockerfile 有条件分支，所以它为调试和发布模式产生不同的输出。
在 Docker 工件中手动构建调试器支持是有好处的。您可以使用条件构建您的 Dockerfile，以便默认的`docker image build`命令生成生产就绪映像，而不需要任何额外的工件。不过，这个例子仍然没有使用多阶段构建，因此 Dockerfile 是不可移植的，应用需要在打包之前进行编译。
在开发中，您可以在调试模式下构建一次映像，运行容器，然后在需要时附加调试器。您的集成测试构建并运行产品映像，因此只有内部循环具有额外的调试器组件。
# Visual Studio 代码中的 Docker
Visual Studio Code 是一种新的跨平台 IDE，用于跨平台开发。C#扩展安装了一个调试器，可以附加到.NET Core 应用，但不支持完全调试.NET 框架应用。
Docker 扩展增加了一些非常有用的功能，包括能够将 Dockerfiles 和 Docker Compose 文件添加到已知平台的现有项目中，例如 Go 和.NET 核心。您可以将 Docker 文件添加到. NET Core 项目中，并在使用 Windows 或 Linux 容器作为基础之间进行选择-点击 *F1* ，键入`docker`，然后选择将 Docker 文件添加到工作区:
![](img/d6ee79a9-f1d5-4c77-81bf-dbee789ba6b1.png)
下面是为. NET 核心网络应用编程接口项目生成的 Dockerfile:
```
FROM microsoft/dotnet:2.2-aspnetcore-runtime-nanoserver-1803 AS base
WORKDIR /app
EXPOSE 80
FROM microsoft/dotnet:2.2-sdk-nanoserver-1803 AS build
WORKDIR /src
COPY ["WebApi.NetCore.csproj", "./"]