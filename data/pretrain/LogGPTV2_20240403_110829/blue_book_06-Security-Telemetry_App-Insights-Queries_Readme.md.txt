## IMPORTANT: DevOps Kit (AzSK) is being sunset by end of FY21. More details [here](../../ReleaseNotes/AzSKSunsetNotice.md)
----------------------------------------------
> The Secure DevOps Kit for Azure (AzSK) was created by the Core Services Engineering & Operations (CSEO) division at Microsoft, to help accelerate Microsoft IT's adoption of Azure. We have shared AzSK and its documentation with the community to provide guidance for rapidly scanning, deploying and operationalizing cloud resources, across the different stages of DevOps, while maintaining controls on security and governance.
AzSK is not an official Microsoft product â€“ rather an attempt to share Microsoft CSEO's best practices with the community..
### Contents
- [Overview](#overview)
- [Usage statistics](#usage-statistics) 
    - [Total number of subscriptions evaluated per day](#Total-number-of-Subscriptions-evaluated-per-day)
    - [Total number of resources evaluated per day](#Total-number-of-resources-evaluated-per-day)
    - [Total number of controls evaluated per day](#Total-number-of-controls-evaluated-per-day)
- [AzSK Version statistics](#azsk-version-statistics)
    - [Org AzSK version vs latest available AzSK version](#Org-AzSK-version-vs-latest-available-AzSK-version)
    - [CA AzSK version Summary](#CA-AzSK-version-Summary)
    - [SpotCheck AzSK version summary](#SpotCheck-AzSK-version-summary)
    - [CICD SVT Task AzSK version summary](#CICD-SVT-Task-AzSK-version-summary)
- [Continuous Assurance Health Monitoring](#Continuous-Assurance-Health-Monitoring)
    - [CA reporting exceptions](#CA-reporting-exceptions)
    - [Calculate resources scan time in CA](#Calculate-resources-scan-time-in-CA)
- [Controls statistics](#controls-statistics)
    - [Controls status trend](#Controls-status-trend)
    - [Drift in failing controls](#drift-in-failing-controls)
    - [Drift in attested controls](#drift-in-attested-controls)
- [Resource Inventory](#Resource-Inventory)
     - [Resource inventory all over the subscription](#Resource-inventory-all-over-the-subscription)
     - [Resource inventory for particular subscription](#Resource-inventory-for-particular-subscription)
     - [Virtual Machines OS Type Summary](Virtual-Machines-OS-Type-Summary)
## Overview
The telemetry data can be leveraged by org policy owners to understand AzSK usage, monitor compliance drift, CA health, resource inventory, troubleshooting etc.
## Usage statistics
#### _Total number of Subscriptions evaluated per day_
Get an idea of overall AzSK usage in the org. Query displays unique number of subscriptions scanned by AzSK (through CA runbook/SpotCheck (Adhoc scan)/VSO task) per day over last 7 days period. 
``` AIQL
customEvents
| where timestamp >= ago(7d)
| where name == "Control Scanned"
| summarize arg_max(timestamp, *)  by Day = bin(timestamp,1d), ScanSource = tostring(customDimensions.ScanSource),tostring(customDimensions.SubscriptionId) 
| summarize SubscriptionCount = count() by Day, ScanSource
| render barchart
```
**Below is the sample graph generated by App Insights for above query.**
![AIGraph_Usage.PNG](/Images/06_AIGraph_Usage.PNG)
#### _Total number of resources evaluated per day_
Number of resources scanned (through CA runbook/SpotCheck (Adhoc scan)/VSO task) per day over last 7 days period.  
``` AIQL
customEvents
| where timestamp >= ago(7d)
| where name == "Control Scanned"
| summarize arg_max(timestamp, *)  by Day = bin(timestamp,1d), ScanSource = tostring(customDimensions.ScanSource),tostring(customDimensions.ResourceId) 
| summarize ResourceCount = count() by Day, ScanSource
| render barchart
```
#### _Total number of controls evaluated per day_
Number of controls scanned (through CA runbook/SpotCheck (Adhoc scan)/VSO task) per day over last 7 days period.
``` AIQL
customEvents
| where timestamp >= ago(7d)
| where name == "Control Scanned"
| summarize arg_max(timestamp, *)  by Day = bin(timestamp,1d), ScanSource = tostring(customDimensions.ScanSource),tostring(customDimensions.ResourceId),tostring(customDimensions.ControlId)  
| summarize ResourceCount = count() by Day, ScanSource
| render barchart
```
### AzSK Version statistics
#### _Org AzSK version vs latest available AzSK version_ 
Get current AzSK version configured in Org vs latest available version. If version differs, consider updating it to latest version
``` AIQL
customEvents
| where timestamp > ago(2d) and name == "Control Scanned" 
| summarize  arg_max(timestamp, *) 
| project OrgAzSKVersion=tostring(customDimensions.OrgVersion),LatestAzSKVersion=tostring(tostring(customDimensions.LatestVersion))
```
#### _CA AzSK version Summary_
Display AzSK module version used by CA. This graph plays important role for monitoring CA AzSK auto upgrade scenario when Org policy AzSK version is updated with latest version. CA will pick AzSK version from policy file (AzSK.Pre.json) and start installing/running with it.
``` AIQL
customEvents
| where timestamp >= ago(7d)
| where name == "Control Scanned"
| where customDimensions.ScanSource =="Runbook"
| summarize arg_max(timestamp, *) by SubId = tostring(customDimensions.SubscriptionId)
| summarize CurrentRunningCAAzSKVersion= count() by Version = tostring(customDimensions.ScannerVersion)
| render piechart
```
#### _SpotCheck AzSK version summary_
Number of subscriptions scanned with AzSK module version by developers or application teams in local scan. 
``` AIQL
customEvents
| where timestamp >= ago(3d)
| where name == "Control Scanned"
| where customDimensions.ScanSource =="SpotCheck"
| summarize arg_max(timestamp, *)  by Version = tostring(customDimensions.ScannerVersion), SubId = tostring(customDimensions.SubscriptionId)
| summarize SubscripitionScanned=count() by tostring(Version) 
| render piechart
```
#### _CICD SVT Task AzSK version summary_
Number of subscriptions scanned with AzSK module version by CICD SVT task in VSO. 
``` AIQL
customEvents
| where timestamp >= ago(3d)
| where name == "Control Scanned"
| where customDimensions.ScanSource =="VSO"
| summarize arg_max(timestamp, *)  by Version = tostring(customDimensions.ScannerVersion), SubId = tostring(customDimensions.SubscriptionId)
| summarize SubscripitionScanned=count() by tostring(Version) 
| render piechart
```
## Continuous Assurance Health Monitoring
#### _CA reporting exceptions_
Exceptions reporting always does not mean CA is not in healthy state.  It may throw exceptions due to multiple reasons like target Sub id not correctly provided in central CA etc.
Most of the issue with CA health can be determined from _Get-AzSKContinuousAssurance_ cmdlet.
``` AIQL
customEvents
    | where name contains "Error" and name contains "CA"  
    | where timestamp > ago(7d) 
    | summarize count() by name, tostring(customDimensions.SubscriptionId),bin(timestamp,1d)
    | summarize count() by name,bin(timestamp, 1d) 
    | render barchart 
```
#### _Calculate resources scan time in CA_
Calcuate total time taken for subscriptions to scan all resources in CA. 
**Note:** This query gives only subscriptions timings for which scan got completed within single job. 
``` AIQL
// Get the scan identifiers for which all resources scan completed within single CA job
customEvents
| where timestamp > ago(3d) and  name == "Command Started" 
and customDimensions.Command == "Get-AzSKAzureServicesSecurityStatus" and customDimensions.ScanSource == "Runbook"
| summarize TotalJobsRequiredToCompleteScan= count() by  UniqueRunIdentifier = tostring(customDimensions.UniqueRunIdentifier) 
| where  TotalJobsRequiredToCompleteScan == 1
| join kind= inner (
    // Get the start time using command started
    customEvents
    | where timestamp > ago(3d) and  name == "Command Started" 
    and customDimensions.Command == "Get-AzSKAzureServicesSecurityStatus" 
    and customDimensions.ScanSource == "Runbook"
    | summarize arg_max(timestamp, *) by SubId = tostring(customDimensions.SubscriptionId), RunIdentifier = tostring(customDimensions.RunIdentifier) 
    | join (
    // Get scan completed time 
        customEvents
        | where timestamp > ago(3d) and  name == "Command Completed" 
        and customDimensions.Command == "Get-AzSKAzureServicesSecurityStatus" 
        and customDimensions.ScanSource == "Runbook"
        | summarize arg_max(timestamp, *) by SubId = tostring(customDimensions.SubscriptionId), RunIdentifier= tostring(customDimensions.RunIdentifier) 
    ) on SubId, RunIdentifier
    | extend ScanTimeInMins = datetime_diff('minute',timestamp1,timestamp)
    | project SubId, UniqueRunIdentifier = tostring(customDimensions.UniqueRunIdentifier),SubName = tostring(customDimensions.SubscriptionName), ScanTimeInMins  
) 
// Filter results for only subs for which scan completed within single job using identifier
on UniqueRunIdentifier 
| join kind= inner (
    // Get the number of resources scanned for particular  run identifier
    customEvents
    | where timestamp > ago(3d) and name == "Control Scanned" 
    | summarize arg_max(timestamp, *) by UniqueRunIdentifier = tostring(customDimensions.UniqueRunIdentifier), tostring(customDimensions.ResourceId)
    | summarize TotalResourcesScanned = count() by UniqueRunIdentifier
) on UniqueRunIdentifier 
| project SubId, SubName, TotalResourcesScanned, ScanTimeInMins 
``` 
## Controls statistics
#### _Controls status trend per day_
``` AIQL
customEvents
| where timestamp >= ago(7d)
| where name == "Control Scanned"
| summarize count() by bin(timestamp, 1d), tostring(customDimensions.ResourceId), VerificationResult = tostring(customDimensions.VerificationResult) 
| summarize count() by Day = bin(timestamp, 1d), VerificationResult 
| render barchart
```
**Below is the sample graph generated by App Insights for above query.**
![AIGraph_ScanResultDistribution.PNG](/Images/06_AIGraph_ScanResultDistribution.PNG)
#### _Drift in failing controls_
You can monitor the increase/decrease in "Failed" controls in last two days with this query. 
Positive drift needs your attention. Examine the resources whose controls are showing positive drift. Negative drift shows that controls are being fixed in last two days which is positive sign. 
``` AIQL
let combinedResult = customEvents
| where timestamp = ago(4d)
| where  customDimensions.ScanSource =="Runbook" and name == "Control Scanned"
| summarize arg_max(timestamp, *) by tostring(customDimensions.SubscriptionId), tostring(customDimensions.SubscriptionName), tostring(customDimensions.ControlId)
| project tostring(customDimensions.SubscriptionId), tostring(customDimensions.SubscriptionName),tostring(customDimensions.ResourceId), tostring(customDimensions.ControlId), oldresult =tostring(customDimensions.VerificationResult)
| join
(
    customEvents
    | where timestamp >= ago(2d)
    | where  customDimensions.ScanSource =="Runbook" and name == "Control Scanned"
    | summarize arg_max(timestamp, *) by tostring(customDimensions.SubscriptionId), tostring(customDimensions.SubscriptionName), tostring(customDimensions.ControlId)
    | project tostring(customDimensions.SubscriptionId), tostring(customDimensions.SubscriptionName),tostring(customDimensions.ResourceId), tostring(customDimensions.ControlId), newresult = tostring(customDimensions.VerificationResult)
)
on customDimensions_SubscriptionId, customDimensions_SubscriptionName,customDimensions_ResourceId, customDimensions_ControlId
| project tostring(customDimensions_SubscriptionId), tostring(customDimensions_SubscriptionName),tostring(customDimensions_ResourceId), tostring(customDimensions_ControlId),oldresult,newresult;
let oldScan = combinedResult
| where oldresult == "Failed"
| summarize oldScanCount = count() by tostring(customDimensions_ControlId);
let newScan = combinedResult
| where newresult == "Failed"
| summarize newScanCount = count() by tostring(customDimensions_ControlId);
oldScan
| join
(
    newScan
)
on customDimensions_ControlId
| project ControlId=tostring(customDimensions_ControlId),BeforeCount=oldScanCount,CurrentCount=newScanCount
| where BeforeCount != CurrentCount
| extend Drift =CurrentCount-BeforeCount
| order by Drift desc
| project ControlId,BeforeCount,CurrentCount,Drift
| project ControlId, BeforeCount, CurrentCount, Drift
```
#### _Drift in attested controls_
You can monitor the increase/decrease in "Attested" controls in last two days with this query. 
Positive drift needs your attention. Find out the reason behind attesting controls instead of fixing them. Best security practice is to fix the controls rather than attesting. 
``` AIQL
let combinedResult = customEvents
| where timestamp > now(-4d) and timestamp = now(-2d)
    | where  customDimensions.ScanSource =="Runbook" and name == "Control Scanned"
    | summarize arg_max(timestamp, *) by tostring(customDimensions.SubscriptionId), tostring(customDimensions.SubscriptionName), tostring(customDimensions.ControlId)
    | project tostring(customDimensions.SubscriptionId), tostring(customDimensions.SubscriptionName),tostring(customDimensions.ResourceId), tostring(customDimensions.ControlId), newresult = tostring(customDimensions.AttestationStatus)
)
on customDimensions_SubscriptionId, customDimensions_SubscriptionName,customDimensions_ResourceId, customDimensions_ControlId
| project tostring(customDimensions_SubscriptionId), tostring(customDimensions_SubscriptionName),tostring(customDimensions_ResourceId), tostring(customDimensions_ControlId),oldresult,newresult;
let oldScan = combinedResult
| summarize oldScanCount = count() by tostring(customDimensions_ControlId),oldresult;
let newScan = combinedResult
| summarize newScanCount = count() by tostring(customDimensions_ControlId),newresult;
oldScan
| join
(
    newScan
)
on customDimensions_ControlId,$left.oldresult==$right.newresult
| project ControlId=tostring(customDimensions_ControlId),AttestationStatus=oldresult,BeforeCount=oldScanCount,CurrentCount=newScanCount
| where BeforeCount != CurrentCount and AttestationStatus != "None"
| extend Drift =CurrentCount-BeforeCount
| order by Drift desc
| project ControlId, AttestationStatus, BeforeCount, CurrentCount,Drift
| project ControlId, AttestationStatus, BeforeCount, CurrentCount,Drift
```
**Below are the sample graphs generated by App Insights for above two queries.**
![AIGraph_FailednAttestation_Drift.PNG](/Images/06_AIGraph_FailednAttestation_Drift.PNG)
## Resource Inventory
#### _Resource inventory all over the subscription_
Resource inventory details for subscriptions running CA 
``` AIQL
customEvents
| where timestamp > ago(3d) and name == "Resource Inventory" 
| summarize arg_max(timestamp, *) by tostring(customDimensions.ResourceId)
| summarize ResourceCount= count() by ResourceType= tostring(customDimensions.ResourceType)
```
#### _Resource inventory for particular  subscription_
Replace SubscriptionId with value
``` AIQL
customEvents
| where timestamp > ago(3d) and name == "Resource Inventory" and customDimensions.SubscriptionId ~= ""
| summarize arg_max(timestamp, *) by tostring(customDimensions.ResourceId)
| summarize ResourceCount= count() by ResourceType= tostring(customDimensions.ResourceType)
```
#### _Virtual Machines OS Type Summary_
Get number of Windows vs Linux VM present all over subscriptions
``` AIQL
customEvents
| where timestamp > ago(3d) and  name == "Control Scanned" and customDimensions.ControlId contains "Azure_VirtualMachine_"  
| extend VMProperties = parse_json(tostring(customDimensions.ResourceMetadata)) 
| extend OSType = VMProperties.VMDetails.OSType 
| summarize arg_max(timestamp, *) by tostring(customDimensions.ResourceId)
| summarize count() by tostring(OSType)
```