auto len = stack->Parameters.Write.Length;
return CompleteIrp(Irp, STATUS_SUCCESS, len);
}
Note that we don’t even bother calling MmGetSystemAddressForMdlSafe, as we don’t need to access
the actual buffer. This is also the reason this call is not made beforehand by the I/O manager: the driver
may not even need it, or perhaps need it in certain conditions only; so the I/O manager prepares everything
(the MDL) and lets the driver decide when and if to map the buffer.
Test Application
We’ll add a new console application project to the solution to test the read and write operations.
Here is some simple code to test these operations:
int Error(const char* msg) {
printf("%s: error=%u\n", msg, ::GetLastError());
return 1;
}
int main() {
HANDLE hDevice = CreateFile(L"\\\\.\\Zero", GENERIC_READ | GENERIC_WRITE,
0, nullptr, OPEN_EXISTING, 0, nullptr);
if (hDevice == INVALID_HANDLE_VALUE) {
return Error("Failed to open device");
}
// test read
BYTE buffer[64];
// store some non-zero data
for (int i = 0; i MajorFunction[IRP_MJ_DEVICE_CONTROL] = ZeroDeviceControl;
All the work is done in ZeroDeviceControl. First, some initialization:
NTSTATUS ZeroDeviceControl(PDEVICE_OBJECT, PIRP Irp) {
auto irpSp = IoGetCurrentIrpStackLocation(Irp);
auto& dic = irpSp->Parameters.DeviceIoControl;
auto status = STATUS_INVALID_DEVICE_REQUEST;
ULONG_PTR len = 0;
The details for IRP_MJ_DEVICE_CONTROL are located in the current I/O stack location in the Parame-
ters.DeviceIoControl structure. The status is initialized to an error in case the control code provided
is unsupported. len keeps track of the number of valid bytes returned in the output buffer.
Implementing the IOCTL_ZERO_GET_STATS is done in the usual way. First, check for errors. If all goes
well, the stats are written to the output buffer:
Chapter 7: The I/O Request Packet
221
switch (dic.IoControlCode) {
case IOCTL_ZERO_GET_STATS:
{
// artificial scope so the compiler doesn not complain
// about defining variables skipped by a case
if (dic.OutputBufferLength AssociatedIrp.SystemBuffer;
if (stats == nullptr) {
status = STATUS_INVALID_PARAMETER;
break;
}
//
// fiil in the output buffer
//
stats->TotalRead = g_TotalRead;
stats->TotalWritten = g_TotalWritten;
len = sizeof(ZeroStats);
break;
}
Once out of the switch, the IRP would be completed. Here is the stats clearing Ioctl handling:
case IOCTL_ZERO_CLEAR_STATS:
g_TotalRead = g_TotalWritten = 0;
break;
}
All that’s left to do is complete the IRP with whatever status and length values are:
return CompleteIrp(Irp, status, len);
For easier viewing, here is the complete IRP_MJ_DEVICE_CONTROL handling:
Chapter 7: The I/O Request Packet
222
NTSTATUS ZeroDeviceControl(PDEVICE_OBJECT, PIRP Irp) {
auto irpSp = IoGetCurrentIrpStackLocation(Irp);
auto& dic = irpSp->Parameters.DeviceIoControl;
auto status = STATUS_INVALID_DEVICE_REQUEST;
ULONG_PTR len = 0;
switch (dic.IoControlCode) {
case IOCTL_ZERO_GET_STATS:
{
if (dic.OutputBufferLength AssociatedIrp.SystemBuffer;
if (stats == nullptr) {
status = STATUS_INVALID_PARAMETER;
break;
}
stats->TotalRead = g_TotalRead;
stats->TotalWritten = g_TotalWritten;
len = sizeof(ZeroStats);
break;
}
case IOCTL_ZERO_CLEAR_STATS:
g_TotalRead = g_TotalWritten = 0;
break;
}
return CompleteIrp(Irp, status, len);
}
The stats have to be updated when data is read/written. It must be done in a thread safe way, as multiple
clients may bombard the driver with read/write requests. Here is the updates ZeroWrite function:
Chapter 7: The I/O Request Packet
223
NTSTATUS ZeroWrite(PDEVICE_OBJECT, PIRP Irp) {
auto stack = IoGetCurrentIrpStackLocation(Irp);
auto len = stack->Parameters.Write.Length;
// update the number of bytes written
InterlockedAdd64(&g_TotalWritten, len);
return CompleteIrp(Irp, STATUS_SUCCESS, len);
}
The change to ZeroRead is very similar.
Astute readers may question the safety of the Ioctl implementations. For example, is reading the total
number of bytes read/written with no multithreaded protection (while possible read/write operations
are in effect) a correct operation, or is it a data race? Technically, it’s a data race, as the driver might be
updating to the stats globals while some client is reading the values, that could result in torn reads. One
way to resolve that is by dispensing with the interlocked instructions and use a mutex or a fast mutex to
protect access to these variables. Alternatively, There are functions to deal with these scenario, such as
ReadAcquire64. Their implementation is CPU dependent. For x86/x64, they are actually normal reads,
as the processor provides safety against such torn reads. On ARM CPUs, this requires a memory barrier
to be inserted (memory barriers are beyond the scope of this book).
Save the number of bytes read/written to the Registry before the driver unloads. Read it back
when the driver loads.
Replace the Interlocked instructions with a fast mutex to protect access to the stats.
Here is some client code to retrieve these stats:
ZeroStats stats;
if (!DeviceIoControl(hDevice, IOCTL_ZERO_GET_STATS,
nullptr, 0, &stats, sizeof(stats), &bytes, nullptr))
return Error("failed in DeviceIoControl");
printf("Total Read: %lld, Total Write: %lld\n",
stats.TotalRead, stats.TotalWritten);
Summary
In this chapter, we learned how to handle IRPs, which drivers deal with all the time. Armed with this
knowledge, we can start leveraging more kernel functionality, starting with process and thread callbacks
in chapter 9. Before getting to that, however, there are more techniques and kernel APIs that may be useful
for a driver developer, described in the next chapter.
Chapter 8: Advanced Programming
Techniques (Part 1)
In this chapter we’ll examine various techniques of various degrees of usefulness to driver developers.
In this chapter:
• Driver Created Threads
• Memory Management
• Calling Other Drivers
• Putting it All Together: The Melody Driver
• Invoking System Services
Driver Created Threads
We’ve seen how to create work items in chapter 6. Work items are useful when some code needs to execute
on a separate thread, and that code is “bound” in time - that is, it’s not too long, so that the driver doesn’t
“steal” a thread from the kernel worker threads. For long operations, however, it’s preferable that drivers
create their own seperate thread(s). Two functions are available for this purpose:
NTSTATUS PsCreateSystemThread(
_Out_ PHANDLE ThreadHandle,
_In_
ULONG DesiredAccess,
_In_opt_
POBJECT_ATTRIBUTES ObjectAttributes,
_In_opt_
HANDLE ProcessHandle,
_Out_opt_ PCLIENT_ID ClientId,
_In_ PKSTART_ROUTINE StartRoutine,
_In_opt_ PVOID StartContext);
NTSTATUS IoCreateSystemThread(
// Win 8 and later
_Inout_ PVOID IoObject,
_Out_ PHANDLE ThreadHandle,
_In_
ULONG DesiredAccess,
_In_opt_
POBJECT_ATTRIBUTES ObjectAttributes,
Chapter 8: Advanced Programming Techniques (Part 1)
225
_In_opt_
HANDLE ProcessHandle,
_Out_opt_ PCLIENT_ID ClientId,
_In_ PKSTART_ROUTINE StartRoutine,
_In_opt_ PVOID StartContext);
Both functions have the same set of parameters except the additional first parameter to IoCreateSys-
temThread. The latter function takes an additional reference on the object passed in (which must be
a device object or a driver object), so the driver is not unloaded prematurely while the thread is alive.
IoCreateSystemThread is only available for Windows 8 and later systems. Here is a description of the
other parameters:
• ThreadHandle is the address of a handle to the created thread if successful. The driver must use
ZwClose to close the handle at some point.
• DesiredAccess is the access mask requested. Drivers should simply use THREAD_ALL_ACCESS
to get all possible access with the resulting handle.
• ObjectAttributes is the standard OBJECT_ATTRIBUTES structure. Most members have no
meaning for a thread. The most common attributes to request of the returned handle is OBJ_KER-
NEL_HANDLE, but it’s not needed if the thread is to be created in the System process - just pass
NULL, which will always return a kernel handle.
• ProcessHandle is a handle to the process where this thread should be created. Drivers should
pass NULL to indicate the thread should be part of the System process so it’s not tied to any specific
process’ lifetime.
• ClientId is an optional output structure, providing the process and thread ID of the newly created
thread. In most cases, this information is not needed, and NULL can be specified.
• StartRoutine is the function to execute in a separate thread of execution. This function must
have the following prototype:
VOID KSTART_ROUTINE (_In_ PVOID StartContext);
The StartContext value is provided by the last parameter to Ps/IoCreateSystemThread. This could
be anything (or NULL) that would give the new thread data to work with.
The function indicated by StartRoutine will start execution on a separate thread. It’s executed with
the IRQL being PASSIVE_LEVEL (0) in a critical region (where normal kernel APCs are disabled).
For PsCreateSystemThread, exiting the thread function is not enough to terminate the thread. An
explicit call to PsTerminateSystemThread is required to properly manage the thread’s lifetime:
NTSTATUS PsTerminateSystemThread(_In_ NTSTATUS ExitStatus);
The exit status is the exit code of the thread, which can be retrieved with PsGetThreadExitStatus if
desired.
For IoCreateSystemThread, exiting the thread function is sufficient, as PsTerminateSystemThread
is called on its behalf when the thread function returns. The exit code of the thread is always STATUS_-
SUCCESS.
Chapter 8: Advanced Programming Techniques (Part 1)
226
IoCreateSystemThread is a wrapper around PsCreateSystemThread that increments
the ref count of the passed in device/driver object, calls PsCreateSystemThread and then
decrements the ref count and calls PsTerminateSystemThread.
Memory Management
We have looked at the most common functions for dynamic memory allocation in chapter 3. The most
useful is ExAllocatePoolWithTag, which we have used multiple times in previous chapters. There are
other functions for dynamic memory allocation you might find useful. Then, we’ll examine lookaside lists,
that allow more efficient memory management if fixed-size chunks are needed.
Pool Allocations
In addition to ExAllocatePoolWithTag, the Executive provides an extended version that indicates the
importance of an allocation, taken into account in low memory conditions:
typedef enum _EX_POOL_PRIORITY {
LowPoolPriority,
LowPoolPrioritySpecialPoolOverrun = 8,
LowPoolPrioritySpecialPoolUnderrun = 9,
NormalPoolPriority = 16,
NormalPoolPrioritySpecialPoolOverrun = 24,
NormalPoolPrioritySpecialPoolUnderrun = 25,
HighPoolPriority = 32,
HighPoolPrioritySpecialPoolOverrun = 40,
HighPoolPrioritySpecialPoolUnderrun = 41
} EX_POOL_PRIORITY;
PVOID ExAllocatePoolWithTagPriority (
_In_ POOL_TYPE PoolType,
_In_ SIZE_T NumberOfBytes,
_In_ ULONG Tag,
_In_ EX_POOL_PRIORITY Priority);
The priority-related values indicate the importance of succeeding an allocation if system memory is low
(LowPoolPriority), very low (NormalPoolPriority), or completely out of memory (HighPoolPriority).
In any case, the driver should be prepared to handle a failure.
The “special pool” values tell the Executive to make the allocation at the end of a page (“Overrun” values)
or beginning of a page (“Underrun”) values, so it’s easier to catch buffer overflow or underflow. These
values should only be used while tracking memory corruptions, as each allocation costs at least one page.
Starting with Windows 10 version 1909 (and Windows 11), two new pool allocation functions are supported.
The first is ExAllocatePool2 declared like so:
Chapter 8: Advanced Programming Techniques (Part 1)
227
PVOID ExAllocatePool2 (
_In_ POOL_FLAGS Flags,
_In_ SIZE_T NumberOfBytes,
_In_ ULONG Tag);
Where the POOL_FLAGS enumeration consists of a combination of values shown in table 8-1:
Table 8-1: Flags for ExAllocatePool2
Flag (POOL_FLAG_)
Must recognize?
Description
USE_QUOTA
Yes
Charge allocation to calling process