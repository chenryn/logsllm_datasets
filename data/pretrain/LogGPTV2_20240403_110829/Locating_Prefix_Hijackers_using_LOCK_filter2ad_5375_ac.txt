The hijacker may forge traceroute results if a traceroute
triggering message actually passes through the hijacker.
Since the preﬁx has been hijacked, triggering messages
with large enough initial TTL values, at least larger than
the hop distance between the probing monitor and the
hijacker, will inevitably pass through the hijacker. For a
sophisticated hijacker, this is a good opportunity to fabri-
cate responses to these triggering messages to conceal its
own identity. As a result, the AS paths mapped from such
a fake traceroute results may contain erroneous ASes as
well.
It is easy to see that these “noises” only appear
in the later portion of a path because the portion that is
before the hijacker cannot be altered by the hijacker, –
the ICMP triggering messages do not reach the hijacker.
Hence if a node in a path is determined to be a fake
node, we really do not need to consider any nodes beyond
that point because this point must be already beyond the
hacker’s position in the path.
In the pre-processing part, we consider the duplicated
appearances of AS nodes. If a node appears more than
once in a path, any appearance beyond the ﬁrst is consid-
ered fake. This is because real traceroute results should
not contain loops.
5.2 Basic Algorithm
We denote the set of monitors that have detected the hi-
jacking and reported their altered monitor-to-preﬁx paths
by M. For each monitor mi within M, there is an
AS level monitor-to-preﬁx path Pi, either computed by
pre-processing traceroute path or obtained directly from
BGP routes. We deﬁne the neighborhood set of a spe-
ciﬁc path Pi, denoted as N (Pi), as the union of all path
nodes and their one-hop neighbors. The target preﬁx’ AS
should be removed from all N (Pi). The reason is simple,
– it is not the hijacker AS. Note that LOCK computes the
neighborhood set based on AS topology inferred from
RouteView [3] before the hijacking is detected, rather
than real-time BGP data when the hijacking is ongoing.
Though the hijacker can try to pollute the AS topology
information before launching real hijacking attack on the
victim preﬁx, the impact of such evasion is minimal on
the neighborhood set computation because it is difﬁcult
for hijacker to “remove” an observed true link from the
AS topology by announcing fake routes.
We are interested in the neighborhood sets of the AS
paths instead of just the AS paths themselves because
the hijacker may actually not show up in any of the AS
paths if it manipulates traceroute results. However, even
under this condition the ASes which are immediately
before the hijacker along the paths are real. Thus, the
union of all neighborhood sets of all reported AS paths,
H = Si N (Pi), form our search space for the hijacker.
We denote each node in this search space as ak. The
hijacker-locating algorithm is essentially a ranking algo-
rithm which assigns each node in H a rank based on their
suspicious level of being the hijacker.
The LOCK algorithm ranks each AS node ak ∈ H
based on two values, covered count C(ak) and total dis-
tance to monitors D(ak). The covered count is simply
computed by counting ak appearing in how many path
neighborhood sets. For each neighborhood set N (Pi)
that ak is a member, we compute the distance between
ak and the monitor of the path mi, d(mi, ak). This dis-
tance equals to the AS-level hop count from mi to ak
along the path Pi if ak is on the path Pi. Otherwise,
d(mi, ak) equals to the distance from mi to ak’s neigh-
bor, who is both on Pi and the closest to mi, plus 1. If
ak is not a member of a path neighborhood set N (Pi),
the distance d(mi, ak) is set to 0. The total distance to
Algorithm 2: The pseudo-code of locating algorithm
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Initializing
set H, C, D empty;
Updating
foreach mi in the monitor set M
foreach ak ∈ N (Pi)
if ak ∈ H
D(ak) += d(mi, ak);
C(ak) += 1;
else
insert ak in H ;
C(ak) = 0;
D(ak) = d(mi, ak);
Ranking
sort ak ∈ H by C(ak);
for ak with the same value of C(ak);
sort ak by D(ak);
monitors equals to the summation of all d(mi, ak).
After for each ak in H both covered count C(ak) and
total distance to monitors D(ak) are computed, we rank
all nodes in H ﬁrstly based on their covered count. The
greater the covered count a node ak has, the higher it is
ranked. Then for nodes having the same covered count,
ties are broken by ranking them based on their total
distance to monitors, –the lower the total distance, the
higher the rank. If there are still ties, node ranks are de-
termined randomly.
Hence, the ﬁnal result of the locating algorithm is a list
of nodes ak, ordered based on how suspicious each node
is being the hijacker. The most suspicious AS appears
on the top of the list. The pseudo-code of the locating
algorithm is shown in Algorithm 2.
The ranking algorithm described here may seem
overly complicated for ﬁnding where the reported paths
converge. However it is designed speciﬁcally to be ro-
bust against various measurement errors and possible hi-
jacker countermeasures. One particular reason for this
design is to reduce the effect of individual false paths. If
a monitor-to-preﬁx path is changed due to reasons other
than being hijacked and the monitor falsely assesses the
situation as hijack, the path reported by this monitor may
cause confusion on where the paths converge. Since it
is difﬁcult to distinguish this kind of paths beforehand,
our algorithm has adopted the approach as described
above to discredit the effect of these individual erroneous
paths. For similar reasons, our ranking algorithm is ro-
bust against the IP-to-AS mapping errors if any.
Another reason for outputting an ordered list is that
there are cases that hijacked paths converge before these
paths reach the hijacker (early converge). This is more
likely to happen when the hijacker is located far away
from the Internet core where the connectivity is rich. In
this case the hijacked paths may converge at an upstream
provider of the hijacker in stead of the hijacker itself.
Although as we will show later these hijacking scenarios
typically have small impacts, in other words the portion
of the Internet that is affected by such hijacks is small;
still we wish to locate the hijacker. A list of suspects
ranked by level of suspicion is well suited for addressing
this issue.
5.3
Improvements
After the suspect list is computed, we can apply addi-
tional post-processing methods to further improve our re-
sults. The basic algorithm is very conservative in the way
that H includes all possible candidates. Now we look
into ways that H may be reduced. The hope is that with
a trimmed suspect set to begin with, the locating algo-
rithm can get more focused on the hijacker by increasing
the rate that the most suspicious node on the list is the hi-
jacker. Both improvements are designed to alleviate the
early converge problem we mentioned before. Note that
the improvements may exclude the real hijacker from the
suspect set, but the evaluation (in Section 6.3.5) shows
that chance is very small.
5.3.1
Improvement One: AS Relationship
In the basic algorithm, we have only taken AS topology
into account. In other words, all topological neighbors
of nodes on a reported AS path are added to the path’s
neighborhood set. In reality, not all physical connections
between ASes are actively used for carrying trafﬁc. In
particular, some connections may be used only for traf-
ﬁc of one direction but not the other. This is largely due
to proﬁt-driven routing policies between different ISPs.
Internet paths have been found to follow the “valley-
free” property [10], i.e. after traversing a provider-to-
customer edge or a peer edge, a path will not traverse
another customer-to-provider path or another peer edge.
If we constrain our suspect set using this AS relationship
based property by removing the neighbors that do not
follow the “Valley-free” property from the neighborhood
set of each reported path, we are able to reduce the size
of the neighborhood set and further on the suspect set H.
One matter needs to be pointed out is that not all links
on the reported paths are necessarily real due to the hi-
jacker’s countermeasures. Since we do not know what
links are fabricated we should not trim the neighborhood
sets too aggressively. We only perform this improvement
on path links that we are reasonably certain that they are
real. In particular, as we know that an attacker cannot
forge path links that are before itself, thus we can rea-
sonably consider that on each reported path the links that
are before the node immediately before the most suspi-
cious node are real, and the trimming is only done on
neighbors of these links.
This AS relationship based improvement is incorpo-
rated into the basic algorithm in an iterative fashion.
We ﬁrst pre-compute AS relationship information using
method proposed in [10]. Note that this is done ofﬂine
and does not require any real time access to the control
plane information because AS relationship rarely change
over time. After each execution of the basic algorithm
produces a ranked suspect list, we can assume that on
each path from the path’s reporting monitor to the node
immediately before the most suspicious node, all AS
paths are valid. Based on these valid links, we can fur-
ther infer the valid link in each neighborhood set. When
there is any change of neighborhood set, we run the lo-
cating algorithm again to update the suspicious list. The
iteration will stop if there is no change of suspicious list.
5.3.2
Improvement Two: Excluding Innocent ASes
The second improvement focuses on removing nodes
from the suspect set H of whose innocence we are rea-
sonably certain. One group of these nodes are the ones
that are on the reported paths that actually pass through
the most suspicious node and before the most suspicious
node. The reason for this exclusion is again that the at-
tacker cannot forge the identity of these nodes.
The second group of the innocent nodes are selected
based on the path disagreement test described in [45].
In path disagreement test, a reference point that is out-
side of the target preﬁx but topologically very close to
the preﬁx is selected and the path from a monitor to this
reference point and the path from same monitor to the
target preﬁx are compared. If they differ signiﬁcantly it
is highly likely that the preﬁx has been hijacked. The
high accuracy of this test leads us to believe that nodes
on monitor-to-reference point paths are not likely to be
the hijacker. They can be excluded from the suspect set.
The second improvement is again incorporated into
the basic algorithm in an iterative fashion. After each ex-
ecution of the basic algorithm, the suspect set is reduced
by removing nodes of the two aforementioned innocent
groups. Then basic algorithm is executed again using the
reduced suspect set. The iteration is repeated until the
basic suspect set is stable.
6 Evaluation
We implemented and deployed LOCK on Planet-
Lab [31]. This is a necessary step to show that LOCK
is deployable in real world system. Also using the Plan-
etLab testbed, we evaluated the performance of LOCK
based on measurements of the deployed LOCK system.
In this section, we ﬁrst present our measurement setup
and evaluation methodology. Then we evaluate the per-
formance of the monitor selection algorithm in LOCK,
and the effectiveness of LOCK against against syn-
thetic hijacks, reconstructed previously-known hijacking
events, and real hijacking attacks launched by us.
6.1 Measurement Setup
6.1.1 Candidate Monitors
In our experiments, we ﬁrst chose a number of geograph-
ically diversiﬁed PlanetLab [31] nodes as candidate net-
work location monitors. We manually selected 73 Plan-
etLab nodes in 36 distinct ASes in different geographical
regions. More speciﬁcally, relying on their DNS names,
half of the nodes are in the U.S., covering both coasts
and the middle. The other half were selected from other
countries across multiple continents. Among these can-
didate monitors, a set of monitors were selected using the
algorithm presented in Section 4 to monitor each target
preﬁx.
6.1.2 Target Preﬁxes
We selected target preﬁxes from four different sources:
(i) Multiple Origin ASes (MOAS) preﬁxes, (ii) Single
Origin AS (SOAS) preﬁxes with large trafﬁc volume,
(iii) preﬁxes of popular Web sites, and (vi) preﬁxes of
popular online social networks. To get preﬁxes from
sources (i) and (ii), we ﬁrst use BGP tables obtained
from RouteViews [3] and RIPE [2] to identify the ini-
tial candidates of MOAS and SOAS preﬁxes. Then for
each candidate preﬁx, we tried to identify a small num-
ber (up to 4) of live (i.e. responsive to ping) IP addresses.
To avoid scanning the entire candidate preﬁxes for live IP
addresses, we mainly used the preﬁxes’ local DNS server
IP addresses to represent the preﬁx. If we failed to verify
any live IP address for a particular preﬁx, we discarded
this preﬁx from our experiments. Using this method, we
selected 253 MOAS preﬁxes. We also ranked all SOAS
preﬁxes based on “popularity” (i.e.
trafﬁc volume ob-
served at a Tier-1 ISP based on Netﬂow) of the preﬁx
and selected top 200 preﬁxes with live local DNS server
IP addresses.
We also selected preﬁxes that correspond to popular
applications on the Internet: Web and online social net-
works.
In particular, we selected the top 100 popular
Web sites based on the Alex [5] ranking and obtain their
IP addresses and corresponding preﬁxes. We also ob-
tained IP addresses and preﬁxes of YouTube and 50 pop-
ular online social networks. Each of the selected online
social networks has at least 1 million registered users in
multiple countries. Combining preﬁxes from all above
four sources, we have a total of 451 target preﬁxes.
6.1.3 Measurement Data Gathering
In our experiments, each monitor measures its paths to all
selected IP addresses in all target preﬁxes via traceroute.
We also measured paths from each monitor to reference
points of target preﬁxes [45].
In addition, each moni-
tor also measures its paths to other monitors. We obtain
AS-level paths of above measured paths by mapping IP
addresses to their ASes based on the IP-to-AS mapping
published at iPlane [15].
The results presented here are based on monitoring
data collected from March 20th, 2008 to April 20th,
2008. In particular, we measured each path (from a mon-
itor to a target preﬁx) every 5 minutes.
In addition, we obtained the AS topology data during
the same time period from [16]. We also used the AS re-
lationship information captured for customer-to-provider
and peer links over 6 month (from June 2007 to Decem-
ber 2007) using the inferring technique described in [24].
6.2 Evaluation Methodology
We evaluated LOCK based on three sets of preﬁx hi-
jacking experiments: (i) synthetic preﬁx hijacking events
based on Internet measurement data; (ii) reconstructed
previously-known preﬁx hijacking events based on In-
ternet measurement data; and (iii) preﬁx hijacking events
launched by us on the Internet.
6.2.1 Simulating Synthetic Preﬁx Hijacking Events
We consider commonly used interdomain routing poli-
cies: “prefer customer routes” and “valley-free routing”.
In particular, an AS prefers routes announced from its
customer ASes over those announced from its peer ASes,
further over those announced from its provider ASes.
These policies are driven by ﬁnancial proﬁt of ASes. If
two routes have the same proﬁt-based preference, then
the shorter route (i.e., fewer AS hop count) is preferred.
When the hijacker announces a fake preﬁx, we assume
that it does this to all its neighbors (i.e. providers, peers,
and customers) to maximize hijacking impact.
For each attack scenario, we simulated all three types
of hijacking scenarios, namely imposture, interception,
malicious, as shown in Figure 2 in Section 3. Each attack
scenario is simulated as follows. In each attack scenario,
we selected one PlanetLab node as the hijacker h and an-
other PlanetLab node as the target preﬁx t. The hijacking
is then observed from the monitors.
In the imposture scenario, the path from s to t will
become the path from s to h if s is polluted by h’s at-
tack. Otherwise, the path from s to t remains the same as
before the attack. This was repeated for all possible se-
lections of h, t, and s, except for cases where t’s AS is on
the AS path from s to h because the hijack will never suc-
ceed in these cases. In addition, since some paths were
not traceroute-able, we had to discard combinations that
require these paths.
The setup for simulating interceptions and malicious
scenarios is similar to that of the imposture scenario. In
the interception scenario, the path from s to t will be
the concatenation of paths from s to h and from h to t
if s is polluted by h’s attack. However, we exclude the
cases that there is one or more common ASes between
these two paths. This is because the hijacker h cannot
successfully redirect the trafﬁc back to the target preﬁx