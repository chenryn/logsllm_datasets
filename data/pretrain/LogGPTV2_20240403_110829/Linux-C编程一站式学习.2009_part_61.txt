link
link search(unsigned char key)
 dequeue(void)
else {
insert(p);
for
link
return 
for
link 1
free(p);
"doublylinkedlist.h"
e
i1
ad
(tail->prev 
->nex
lext
NULL;
return
delete(1
link p
 return NULL;
db
visit(p);
->prev
if (p->item
=
=
=
p)
P)
 p->next;
P;
 head->next;
(*visit)(link))
 tail;
!d
(p);
= tail->prev;
==
14ads-a 
 return
head)
!d
key)
 tail; p = p->next)
---
## Page 496
改成：
串成首尾相接的。把上面的程序改成环形链表（Circular Linked List）也非常简单，只需要
队列，
现在结合第5节“环形队列"想一想，
这个例子也实现了队列的enqueue和dequeue操作，现在每个节点有了prev指针，可以反过来
我们还需要“假想"它是首尾相接的，
空链表
图26.6.带Sentinel的双向链表
static 
struct node
struct 
struct
一般情况
 node
int main(void)
 node
 tailsentinel
tail
 headsentinel
tailsentinel;
return 0;
enqueue(p);
enqueue(p);
destroy();
free_node(p);
delete(p);
insert(p);
insert(p);
printf("%d\n", p->item);
d
d
P
n= make_node(100);
make
 &tailsentinel
free_node(p);
print
node(90);
node(250);
node(200) ;
node(5);
，其实用链表实现环形队列是最自然的，以前基于数组实现环形
dequeue()） {
 而如果基于链表实现环形队列，
NULL，
 &tailsentinel};
tall
，我们本来就可以用指针
---
## Page 497
1、Josephus是公元1世纪的著名历史学家，
1.4.本节综合练习请点评
上图中的第6、4、2、1、0个元素串成一条链表。
保存一个数组下标，指向数组中的另一个元素，这其实也是链表的一种形式，称为静态链表，例如
这是一个静态分配的数组，
回想一下我们在例12.4“用广度优先搜索解迷宫问题"中使用的数据结构，我把图重新画在下面。
1.3.静态链表请点评
再把doublylinkedlist.c中所有的tail替换成head即可，相当于把head和tail合二为一了。
predecessor
图 26.8.广度优先搜索的队列数据结构
一般情况
空链表
图 26.7.环形链表
row
0
0
2
head
一
7
o
3
 &sentinel;
G
2
4
0
相传在一次战役中他和另外几个人被围困在山洞里，
里enqueue
predecessor成员
497
---
## Page 498
第26章链表、
重新排序输出的文件内容是：
文件的内容是：
个链表，
序的，
2
次是1~N，打印每次被杀者的编号
简
复
果一开始的人数为n，
个朋友不想死,
他们宁死不屈，
单的练习，
杂，
日期、时间三个字段组成，
在第2.11节“本节综合练习"的习题1中规定了一种日志文件的格式，
 对于日期相同的记录再按时间排序。现在要求从这样的一个日志文件中读出所有记录组成一
，在链表中首先按时间排序，对于时间相同的记录再按日期排序，最后写回文件中。比如原
009
C
009-
009
0
00
D
6
6
9
1
于是串通好了站在适当的位置上，
二叉树和哈希表
决定站成一
7
7
1
一
L
3
31
30
31
3
3
3
30
1
O
，每次数到M个人就杀一个，
15:16:44
15:16:43
15:16:41
15:16:44
16:4
:16:4
一圈，
BB
3
12
23
由于记录是按时间先后顺序写入的，
每次数到三个人就杀-
号，打印最后-
全国嵌入式人才培训基地
起始页
上一级
个幸存者的编号。
那么要想不死应该站在什么位置呢？这个问题比较
，最后只剩下他们俩的时候这个游戏就停止了。如
，有兴趣的读者可以参考。现在我们做个比较
一个
直到全部死光为止。
，可以看作所有记录是按日期排
每行是一条记录，
 Josephus和他的-
2.二叉树
由行
---
## Page 499
这样的节点可以组织成下图所示的各种形态。
定义二叉树的节点：
链表的每个节点可以有一个后继，而二叉树（Binary Tree）的每个节点可以有两个后继。比如这样
2.1.二叉树的基本概念请点评
2.二叉树 请点评
上一页
图26.9.二叉树的定义和举例
举例
二叉树的递归定义
左子树
×
第 26 章链表、
全国嵌入式人才培训基地
2.二叉树
二叉树和哈希表
子树
空二叉树
右子
---
## Page 500
上图举例示意了几种情况。
二叉树可以这样递归地定义：
7
1．就像链表有头指针一
分别是另外两个二叉树（左子树和右子树）的根指针。
根指针可以指向一个节点，
可以是NULL，表示空二叉树，或者
11
有右子树
股的
H
×
一样，
口
00
每个二叉树都有一个根指针（上图中的root指针）指向它。根指针
，这个节点除了有数据成员之外还有两个指针域，这两个指针域又
×
X
500
---
## Page 501
叉树。过程如下图所示：
前序和中序遍历的结果合在一起可以唯一确定二叉树的形态，也就是说根据遍历结果可以构造出二
深度优先搜索的顺序类似，层序遍历（Level-order Traversal）和广度优先搜索的顺序类似。
前序（Pre-order Traversal）
都走一遍不重不漏呢？有以下几种方法：
链表的遍历方法是显而易见的：从前到后遍历即可。二叉树是一种树状结构，
·只有右子树的二叉树：左子树是空二叉树。
·只有左子树的二叉树：右子树是空二叉树。
这种简化图示法，在圈中标上该节点数据成员的值。
一般的二叉树：左右子树都不为空。
单节点的二叉树：左子树和右子树都是空二叉树。
图 26.11.根据前序和中序遍历结果构造二叉树
图 26.10.二叉树的遍历
、中序（In-order Traversal）、后序遍历（Post-order Traversal）和
层序遍历：425136
后序遍历：132654
中
前序遍历：421356
序遍
，注意右侧由圈和线段组成的简化图示，以后我们都采用
编历：123456
如何做到把所有节点
5
---
## Page 502
想一想，
例26.3.二叉
根据中序和后序遍历结果能否构造二叉树？
static link make_node(unsigned char item)
#include
#include
#endif
void destroy(link t);
int
void post_
n)
link
struct node
typedef struct node 
#define
int
*
id
.fndef
 depth(link
pre_order(link t, void (*visit)(link));
 init(unsigned char VLR[], unsigned char LVR[], int 
unsigned
树
in
link
p->item = item;
link p = malloc(sizeof 
order(iink 
BINARYTREE
1，
r;
 char item;
t);
开
右前
中序遍历
左前
中序遍历：
前序遍历
*link;
序遍！
子树
void
历
历
根x左
5
左
2根
4
左
X左5根
1左2根
左
213
!(d
4根
）根据前序和后序
6右6右
3右3右
65右5右
序遍历结果能否构造二叉树?
502
---
## Page 503
void destroy(link t)
int depth(link
int count(link
void post_order(link t, void
void in_order(link
void pre_order(link 
u
link init(unsigned char VLR[], unsigned char LVR[］, int
static void free_node(link p)
post_order(t, 
re
return
if
if (!t)
i
if
visit(t)
if (!t)
return
for (k = O; VLR[O]
link t;
free(p);
ost_order(t->1,
->1 
turn
(n
(!t)
(!t)
t);
L
return 0;
 dr;
t)
L
return 0;
 return;
return;
 return NULL;
+
:('dr ? dl : dr);
 visit);
void
visit);
 void
viait);
(ATSTA
(*visit)(link))
!= LVR[k]; k++);
(*visit)(link))
(*visit)(link)）
 n-k-1);
503
---
## Page 504
数据成员。排序二叉树的中序遍历结果是从小到大排列的，其实上一节的图 26.10“二叉树的遍
左子树或右子树,
排序二叉树（BST,
2.2.排序二叉树 请点评
历"就是排序二叉树。
递归实现单链表的各种操作函数：
1、本节描述了二叉树的递归定义，
习题请点评
例 26.4.排序二叉树
void destroy(link t);
int 
void
pre_