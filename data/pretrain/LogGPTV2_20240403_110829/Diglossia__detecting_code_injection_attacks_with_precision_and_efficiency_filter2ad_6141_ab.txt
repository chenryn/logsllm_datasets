called on tainted inputs, but not whether sanitization is performed
correctly. Since incorrectly sanitized input may cause an injection
attack, it is essential to precisely model the semantics of string op-
erations performing sanitization. Wassermann and Su model string
operations as transducers and check whether non-terminals in the
query are tainted by user input [24]. Static dataﬂow analysis must
be conservative, thus static methods inevitably suffer from false
positives.
Dynamic methods. Most dynamic methods aim to precisely track
the source of every byte and thus determine which parts of the
query come from tainted user input and which come from the ap-
plication itself [3, 5, 13, 16, 26]. All of these tools use a simple,
imprecise deﬁnition of “code” and consequently suffer from false
positives and false negatives (see Table 1).
To avoid the expense of byte-level taint tracking, several dy-
namic methods modify and examine inputs and generated queries.
For example, Su and Wassermann wrap user input with meta-
characters, propagate meta-characters through string operations in
the program, parse the resulting query, and verify that if a meta-
character appears in the parse tree, then it is in a terminal node and
has a parent non-terminal such that the meta-characters wrap the
descendant terminal nodes in their entirety [20]. This approach suf-
fers from false positives and false negatives because how to wrap
input (e.g., the entire input string, each word, and/or each numeric
value) depends on the application generating the query.
To infer the tainted parts of the query, Sekar proposes to mea-
sure similarity between the query and user input [18], while Liu et
al. compare the query to previous queries generated from benign
inputs [8]. In addition to being unsound, these heuristics do not use
a precise deﬁnition of code and non-code and thus suffer from false
positives and false negatives.
CANDID performs a shadow execution of the program on a be-
nign input “aaa. . . a”, compares the resulting query with the actual
query, and reports a code injection attack if the queries differ syn-
tactically [1]. As Ray and Ligatti point out, this analysis is insufﬁ-
cient to differentiate code from non-code [17]. Furthermore, CAN-
DID cannot tell which parts of the query came from user input and
which came from the application itself, and thus cannot detect in-
jected identiﬁers (where user input injects a bound variable name
that occurs elsewhere in the query), injected method invocations,
and incorrect types of literals—see examples in Section 3.3.
Randomization and complementary encoding. To prevent injec-
tion of SQL commands, SQLrand remaps SQL keywords to secret,
hard-to-guess values [2]. Applications must be modiﬁed to use the
remapped keywords in the generated queries, and database middle-
ware must be modiﬁed to decrypt them back to original keywords.
The mapping must remain secret from all users. This approach
requires pervasive changes to applications and database implemen-
tations and is thus difﬁcult to deploy.
Mui et al. suggest using complementary encoding for user in-
put [11]. The goal is to strictly separate the character set appearing
in user input from the character set used by the system internally.
This approach cannot be deployed without changing databases,
Web browsers, and all other systems dealing with user input.
In contrast, DIGLOSSIA is a simple PHP extension that does not
require any modiﬁcations to applications or databases.
3. EXAMPLES OF CODE INJECTION
This section gives examples of SQL, NoSQL, and syntax mimicry
code injection attacks.
3.1 SQL injection attacks
We illustrate SQL injection attacks using 11 canonical examples
described by Ray and Ligatti [17]. Table 1 shows how ﬁve prior
tools and DIGLOSSIA classify these cases. Underlined terms are
user input. Below, we review each attack and non-attack on this list
and explain how DIGLOSSIA improves over prior work.
1. SELECT bal FROM acct WHERE pwd=‘’ OR 1=1 - -’
This case is the classic SQL injection attack with a backquote
that ends a string and injects user input as code into the query.
All tools detect this code injection. DIGLOSSIA detects it be-
cause the injected code “OR”, “=”, and “-” appears in original
characters in the shadow query.
2. SELECT balance FROM acct WHERE pin= exit()
User input injects exit(), which is a built-in function call.
SQLCHECK misclassiﬁes this case because the function call
is an ancestor of complete leaf nodes (injected) in the query’s
parse tree. DIGLOSSIA detects this injection because exit is a
1183bound variable (and, therefore, code), yet appears in original
characters in the shadow query.
3. ...WHERE ﬂag=1000>GLOBAL
The injected “>” is code that SQLCHECK misses because,
again,
this input is correctly positioned in the parse tree.
DIGLOSSIA detects it because > is code, yet appears in original
characters in the shadow query.
4. SELECT * FROM properties WHERE ﬁlename=‘f.e’
Even if f.e is an object reference, the quotes enforce its interpre-
tation as a string. SQLCHECK strips off quotes and misclas-
siﬁes f.e as a reference, generating a false positive. All other
tools, including DIGLOSSIA, correctly classify this input as a
string literal and not an injection.
5. ...pin=exit()
All tools except DIGLOSSIA miss the injection of the exit
identiﬁer because they do not reason about bound names at
all. DIGLOSSIA detects code injection because exit is bound
(and, therefore, code), yet appears in original characters in the
shadow query.
6. ...pin=aaaa()
When the identiﬁer is undeﬁned, only DIGLOSSIA correctly de-
tects code injection.
7. SELECT * FROM t WHERE ﬂag=TRUE
Since the injected TRUE is a literal value, this case is not an
attack. CANDID incorrectly classiﬁes this input as code injec-
tion because the TRUE literal is parsed to a different terminal
than the benign input “aaaa”, which is parsed to an identiﬁer.
DIGLOSSIA correctly parses this input as a literal in both the
actual query and its shadow, and does not report an attack.
8. SELECT * FROM t WHERE ﬂag=aaaa
This attack injects a bound identiﬁer (equal to the benign input
used by CANDID) into the query.
It is missed by all prior
methods. DIGLOSSIA detects code injection because aaaa is
bound (and, therefore, code), yet appears in original characters
in the shadow query.
9. SELECT * FROM t WHERE ﬂag=password
This attack injects a bound identiﬁer into the query and is
missed by all prior methods. DIGLOSSIA detects code injec-
tion because password is bound (and, therefore, code), yet
appears in original characters in the shadow query.
10. CREATE TABLE t (name CHAR(40))
DIGLOSSIA does not detect this case as code injection. Unlike
Ray and Ligatti, we consider integer literals, even in SQL type
deﬁnitions, to be values, thus this case is not an injection attack
from our viewpoint.
11. SELECT * FROM t WHERE name=‘x’
Since the injected ‘x’ is a string literal, this case is not an attack.
CANDID uses ‘aaa’ instead of ‘x’ in the shadow execution;
they are different terminals and CANDID incorrectly reports
a code injection attack. Xu et al. classify this case as an attack
because tainted meta-characters (quotes) appear in the query.
Halfond et al. also classify this case as an attack because quotes
do not come from a trusted source. DIGLOSSIA, on the other
hand, parses ‘x’ into a literal in both the actual query and its
shadow, and correctly does not report an attack.
3.2 NoSQL injection attacks
Modern Web applications are increasingly using NoSQL back-
end data stores instead of relational SQL databases. NoSQL is a
new class of distributed, scalable databases [14] that store data in
mongodbadmin.php
( ! $document ) {
$document = findMongoDbDocument ( $_REQUEST [ ' s e a r c h ' ] ,
true ) ;
$_REQUEST [ ' db ' ] , $_REQUEST [ ' c o l l e c t i o n ' ] ,
$customId = true ;
. . .
f u n c t i o n findMongoDbDocument ( $id , $db , $ c o l l e c t i o n ,
$ f o r c e C u s t o m I d = f a l s e )
1 
g l o b a l $mongo ;
$ c o l l e c t i o n = $mongo−>s e l e c t D B ( $db )−> s e l e c t C o l l e c t i o n
( $ c o l l e c t i o n ) ;
. . .
$document = $ c o l l e c t i o n −>findOne ( array ( ' _ i d ' => $ i d ) ) ;
. . .
Attack URL
http://victimHost/mongodbadmin.php?search[$ne]=1&db=test&collection=test
Figure 1: JSON injection vulnerability.
key-value pairs. NoSQL databases include Amazon’s DynamoDB,
MongoDB, CouchDB, and several others. For example, MongoDB
is an open-source, document-oriented NoSQL database that sup-
ports JSON and JavaScript as query languages. It has been adopted
by Craigslist, Foursquare, and other popular Web services [10].
NoSQL databases are as vulnerable to code injection attacks as
SQL databases. For example, we found four PHP MongoDB-based
applications in GitHub with injection vulnerabilities.
Figure 1 shows a PHP application with a JSON injection vul-
nerability. Line 13 of mongodbadmin.php in Figure 1 builds
an array consisting of a single key-value pair, where the key
is “_id” and the value is equal to the user input obtained from
$_REQU EST [‘search’]. The Mongo API transforms this array
into a JSON query and sends it to MongoDB. The intention is to re-
turn all database items whose _id ﬁeld is equal to the user-supplied
value.
A malicious user, however, can set the search variable to be an
array value, array($ne => 1). In the resulting JSON query, line
13 of Figure 1 no longer compares _id for equality with $id, but
instead interprets the ﬁrst element of $id as a function, $ne, the
second element, 1, as the argument to this function, and returns all
database items whose _id is not equal to 1. In this case, user input
is supposed to be a string constant, but instead symbols $ne are
interpreted as code in the query.
Figure 2 shows another vulnerable PHP application. Lines 3 to
18 build a query string from user input, Line 21 sends the resulting
JavaScript program to MongoDB. MongoDB evaluates this pro-
gram on every key-value pair in the database and returns the pairs
on which the program evaluates to “true”.
The query is supposed to retrieve data whose privilege keys are
the same as userType. The malicious URL, however, tricks the
application into generating a tautology query, which always returns
“true”. Note that user-injected symbols ;, return, }, and // are
parsed into code in the JavaScript query:
f unction q(){ var def ault_user = ‘normal(cid:48);
var admin_passwd = ‘guessme(cid:48);
var userT ype = 1; return true;}//....
1184vulfquery.php
f u n c t i o n q u e r y from u s e r
i n p u t
/ / B u i l d a J a v a S c r i p t
f u n c t i o n q ( ) {
1 
WHERE e m a i l = ‘{$_REQUEST [ ‘ e m a i l ’ ] } ’
AND password = ‘{$_REQUEST [ ‘ password ’ ] } ’
LIMIT 1 " ;
http://victimHost/login.php?email=no\&password=AND others=‘any
Attack URL
)
e l s e
userType = ‘ admin ’ ;
userType = ‘ normal ’ ;
i f (
t h i s . s h o w p r i v i l e g e == userType )
r e t u r n t r u e ;
e l s e
r e t u r n f a l s e ;
10
11
12
13
14
15
16
17
18
19
20
} " ;
. . . .
/ /
22
23 ?>
Actual query
SELECT
users
password=’ AND others=‘any’ LIMIT 1
FROM
*
WHERE
email=‘no\’
AND
Query on a benign input
SELECT * FROM users WHERE email=‘aaa’ AND password=‘aaaaaaaaaaaaaaaa’
LIMIT 1
) ;
Figure 4: SQL syntax mimicry attack on minibill.
reset_password_save.php in phpAddressBook 8.2.5
I n i t i a t e a f u n c t i o n q u e r y
21 $ r e s u l t = $ c o l l e c t i o n −>f i n d ( array (
‘ $where ’ => $query_body )
Attack URL
http://victimHost/vulfquery.php?user=1;return true;}//
Figure 2: JavaScript injection vulnerability.
3.3 Syntax mimicry attacks
The query containing injected code need not be syntactically dif-
ferent from a benign query (we call such injections syntax mimicry
attacks). Consequently, detection tools such as CANDID that look
for syntactic discrepancies between the actual query and the query
on a benign input will miss some attacks.
vulnerable.php
1 <?
2
/ / B u i l d a J a v a S c r i p t q u e r y
t h a t
c h e c k s w h e t h e r pwd
f i e l d i s
t h e same as u s e r
i n p u t $_GET [ ’ i d ’]
s e c r e t _ n u m b e r = t h i s . pwd ; " ;
. $_GET [ ‘ i d ’ ]
3
4 $query = " f u n c t i o n q ( ) { " ;
5 $query . = " v a r
6 $query . = " v a r u s e r _ t r y = ’
7 $query . = " i f
8 $query . = " r e t u r n t r u e ; " ;
9 $query . = " } " ;