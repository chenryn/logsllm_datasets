I Know Where You Are:
基于LBSN APP的地理位置追踪
2015年9月1日
赵 双(DFlower)
罗夏朴(Xiapu Luo)
1
Who AM I
 赵双 （DFlower, PI:EMAIL）
•
Insight-Labs Team 成员 (http://insight-labs.org)
•
研究领域：漏洞挖掘／恶意代码分析／手机安全
•
《0day安全：软件漏洞分析技术》(第2版)作者之一
•
OWASP China 2010、 Xcon 2011 Speaker
 罗夏朴 (Xiapu Luo, PI:EMAIL)
•
RAP in HKPolyU
•
研究领域：手机安全，网络安全
•
Papers published in major security conferences 
(e.g., NDSS, BlackHat, Defcon, etc.)
2
目录
 LBSN APP 介绍
 基于LBSN APP进行地理位置追踪
 实例: 追踪全北京新浪微博用户的地理位置
 给APP厂商的建议
3
LBSN APPs
 LBSN: Location-based Social Network，基于位置的
社交网络
 很多LBSN APP具有“发现附近的人(Nearby)”功能
微信 Wechat
米聊 Mitalk
陌陌 Momo
新浪微博 Weibo
4
LBSN APPs
 很多LBSN APP具有“发现附近的人(Nearby)”功能
SKOUT
SayHi
Badoo
LOVOO
5
LBSN APPs
 很多LBSN APP具有“发现附近的人(Nearby)”功能
当用户使用Nearby功能时：
•
上传自己位置信息
•
寻找自己所处位置周边的陌生人
•
允许其他人在一定时间内发现自己
…………………………………………………………………
User
Server
Database
t
t
search people in 
database
save user1’s 
location
User1 searches 
people nearby
User1 is found 
by user2
User1 is not 
found by 
user3
save user2’s 
location
User2 searches 
people nearby
Save user3’s 
location
User3 searches 
people nearby
search people in 
database
search people in 
database
Result
6
目录
 LBSN APP 介绍
 基于LBSN APP进行地理位置追踪
 数据发送
 数据获取
 数据挖掘
 DEMO: Mitalk, Wechat, Weibo
 实例: 追踪全北京新浪微博用户的地理位置
 给APP厂商的建议
7
如何基于LBSN APP进行位置追踪？
1. 数据发送：
登录APP并在不同的地理位置搜索附近的人
2. 数据获取：
获得｛时间，地点，人｝数据集
3. 数据挖掘：
数据集信息足够多的情况下，可对目标的日常活动范围和轨迹
进行追踪
8
数据发送
针对不同类型的APP，采用不同的数据发送方式：
1.
构造数据包
2.
模拟器仿真
APP信息
数据安全性
利用难度
APP
Googlepl
ay下载量
(million)
360电子市
场下载量
(million)
位置精确
度( APP中)
数据传输方式
爬取APP位置数据方式
利用难度
Weibo
5-10
456
100m 
明文
构造数据包
低
MeetMe
10-50
0.001
100m
明文
构造数据包
低
Skout
10-50
0.06
1000m
明文
构造数据包
低
SayHi
10-50
0.04
100m
明文
构造数据包
低
Badoo
50-100
0.07
1000m
SSL单向认证
（参数不明）
构造数据包
／模拟器仿真
?
Momo
1-5
168
10m
SSL单向认证
构造数据包
低
Mitalk
0.5-1
17
100m
带加密参数的明文
破解加密参数&构造数据包
／模拟器仿真
高
LOVOO
10-50
0.001
0.1mile
SSL单向认证，带
加密参数
破解加密参数&构造数据包
／模拟器仿真
高
Wechat
100-500
455
100m
SSL双向认证
替换证书&构造数据包
／模拟器仿真
高
9
1. 数据发送
1.
APP数据明文传输
典型APP：Weibo，Meetme，SayHi, Skout
方式：构造并发送包含特定地理位置的数据包，获取该位置附近的人
•
Weibo
•
Meetme
•
SayHi
•
Skout
10
1. 数据发送
2. APP数据采用HTTPS传输（SSL单向认证）
典型APP：Momo 2014
方式：使用伪造证书的方式还原HTTPS数据包，然后构造并发送包含特定地理
位置的数据包，获取该位置附近的人
•
Momo
11
1. 数据发送
3.  APP数据采用HTTPS传输（SSL双向认证/SSL Pinning）
典型APP：Wechat, Momo 2015
方式：Android模拟器＋UIAutomator等自动化测试架构模拟用户操作，通过
修改模拟器地理位置获取获取该位置附近的人
模拟Wechat用户操作：
getUiDevice().pressHome(); 
//点击“Home”
UiObject wxApp = new UiObject(new UiSelector().text(“WeChat”));                 //寻找Wechat图标
wxApp.clickAndWaitForNewWindow();                                                               //启动Wechat
UiObject discoverTab = new UiObject(new UiSelector().text(“Discover”)); 
//点击
“Discover”标签
UiSelector uiSelector = new UiSelector().text(“People Nearby”);                       //寻找“People 
Nearby“按钮
UiObject nearbyButton = new UiObject(uiSelector);
nearbyButton.clickAndWaitForNewWindow();                                                    //点击“People 
Nearby“按钮
12
1. 数据发送
4.  APP数据明文传输，但包含加密参数
典型APP：Mitalk，LOVOO
抓取方式：
1)破解加密参数，构造并发送包含特定地理位置的数据包，获取该位置附近的人
2)Android模拟器+自动化测试框架
13
DEMO - mitalk加密参数破解
• 数据包分析
1)抓取APP获取“附
近的人”时发送的数
据包
2）更改数据包中的
latitude/longitude
值后重放
3）返回Error
4）多次对比APP发送
的数据包发现，uuid
是账号，token在登
录之后保持不变，参
数s是对所有其他参数
的校验，服务器通过
校验s的值来判断数据
包是否被篡改
14
DEMO - mitalk加密参数破解
• 破解参数s的计算过程
s = b(name1=value1&name2=value2&...&paramString1)
s由paramList和paramString1计算而来，跟踪a(paramList, paramString)函数
逆向mitalk的APK（apktool/dex2jar/JD-GUI……）,寻找s参数的生成过程
可以看出，函数把paramList中的各个参数按照字母顺序排序后用
“[name1]=[value1]&[name2]=[value2]...”的形式连接，最后再加上"&paramString1"
15
DEMO - mitalk加密参数破解
• 破解参数s的计算过程
将apk反编译为smali代码，加入Logcat代码打印paramString1，之后重打包
APK，安装到手机，运行mitalk并查看Logcat日志，即可得到paramString1
的值（也是登录之后固定不变的）
至此，我们得到的结果是：
s = b(name1=value1&name2=value2&...&paramString1)，每个参数的值
都是已知的，只要破解出加密算法com.xiaomi.channel.d.f.a.b就可以了
16
DEMO - mitalk加密参数破解
• 破解参数s的计算过程
而函数com.xiaomi.channel.d.f.a.b也是用Java写的，因此也很容易被反编译
（比如使用dex2jar/JD-GUI/
AndroChef Java Decompiler等）
至此，s参数破解完成，便可以用
程序来模拟mitalk在不同的地理
位置发送数据包获得“附近的
人”了。
17
2. 数据接收
1. 构造数据包方式：
返回结果解析(Json/XML…)
2. 模拟器仿真方式：
UIAutomator识别界面文字
18
2. 数据接收
• 返回结果解析
米聊（Mitalk）
19
2. 数据接收
• 返回结果解析
很多APP虽然在界面中降低了地理位置精度（如只精确到100m），
但是在抓取到的数据包中，却能获取到许多额外的结果
20
2. 数据接收
• 返回结果解析
陌陌（Momo）
APP中地理位置精度：0.01km=10m（距离）
数据包中地理位置精度：0.000000000001m  (距离)
21
2. 数据接收
• 返回结果解析
SayHi
APP中地理位置精度：0.01km=10m（距离）