### Optimized Text

#### Equation
\[
M = \frac{1}{\ln\left(2N/S\right) (1 - p)}
\]
For \( N = 2^{64} \) and \( S = 1,825,000 \) sessions, assuming an attacker can monitor 5,000 sessions per day for 365 days, the number of messages per session that result in a collision with a probability of \( P = 10^{-6} \) is \( M = 4,496 \). We recommend using a counter that forces the session to be re-established once this number of messages is reached.

#### Enforcement of Message Count Bound
For infrastructure managers and manufacturers, such a bound could be enforced at various points: either at the Radio Block Center (RBC), where all trains entering a control area are subject to this message count limit, or as an onboard software update. However, enforcing the bound at the RBC is more effective, as there are fewer RBCs in a country, reducing implementation costs. This approach can also be developed and tested as a software update in a shorter timeframe compared to updating onboard software. The enforcing entity would maintain a counter, in addition to the clock for messages sent and received, which increments each time a message is sent or received from a train. We recommend counting the number of messages sent and received from the train, rather than relying on the existing clock, to eliminate considerations of data speeds. This solution is fully backward-compatible with no identified limitations, as the current EuroRadio specification already supports session termination by the train and RBC.

#### Security of DES and 3DES Ciphers
Another issue is that EuroRadio still relies on the security of the DES and 3DES ciphers. While DES has been shown to be feasibly broken, 3DES does not yet have a full key recovery attack, but it is estimated that brute-forcing 3DES will become feasible by 2030. Therefore, longer-term solutions, such as changing the Message Authentication Code (MAC) scheme, will require significant changes to software and, for some ciphers, extending key lengths. For infrastructure managers, updating the derivation key on every train and RBC is not a simple process, as all trains and RBCs must be updated simultaneously to support such changes. This would likely result in significant implementation and deployment costs. While we believe the current setup is not an immediate threat to rail infrastructure, these longer-term solutions should be considered as part of the rationalization process for updated ERTMS standards as alternative safety features.

#### Alternative MAC Schemes
As alternative MAC schemes, AES and HMAC-based MACs were considered, with efficiency and long-term viability being key factors. Any proposed MAC changes should be quantum-resistant to prevent key recovery in a post-quantum world. To evaluate the performance impact and resistance to collisions, we carried out the same collision detection code under different MAC algorithms. Where the key size under proposed algorithms was too short, the same prefix was used and extended with distinctly different bits. These computations were also timed to measure relative performance against the current MAC algorithm, which was used as a baseline. Our results are given in Table 8.

#### Performance Impact
We show that using a DES-based MAC algorithm has a significant impact on the generation of the MAC compared to the proposed alternatives. However, theoretical performance improvements do not directly translate to real-life functionality improvements. For example, the train’s stopping distance is not significantly affected by changing the MAC algorithm, as the time to generate a MAC under the current scheme at 200 km/h can be quantified to be 0.05 cm. Therefore, improvements in terms of distance traveled are minimal.

#### Combining ERTMS Specifications
Finally, if some ERTMS specifications were to be combined, the EuroRadio and Application Layers, which provide independent defenses, may be combined into a unified layer that provides authenticity, integrity, and replay protection. This, however, requires significant changes to the underlying specifications, involving cost, development, and rationalization.

### Conclusion
We have presented the results of our analysis of the EuroRadio MAC algorithm, which is used to secure communication between trains and backend equipment. On the ERTMS stack, EuroRadio provides the safety-critical function of message authentication. We assessed each layer to determine potential weaknesses that could be exploited, allowing us to develop a key recovery attack by leveraging collisions in the MAC for different messages. By recovering one of the keys used in the generation of the MACs, it is then possible to exploit cryptographic weaknesses in EuroRadio. We combined this with a second vulnerability in the Application Layer protocol to forge a Movement Authority with a valid MAC. The forged messages would be accepted by a train, potentially placing it in an unsafe situation. We have discussed the risk this poses to train networks and proposed possible mitigations, such as restricting the number of messages per session.

### Acknowledgements
Funding for this paper was provided by the UK's Centre for the Protection of National Infrastructure (CPNI) and the Engineering and Physical Sciences Research Council (EPSRC) via the SCEPTICS: A Systematic Evaluation Process for Threats to Industrial Control Systems project.

### References
[1] ANSI. ANSI X9.19:1998 Financial Institution Retail Message Authentication. Technical report, ANSI, 1998.
[2] E. Barkan, E. Biham, and N. Keller. Instant ciphertext-only cryptanalysis of GSM encrypted communication. In D. Boneh, editor, Advances in Cryptology - CRYPTO 2003, volume 2729 of Lecture Notes in Computer Science, pages 600–616. Springer Berlin Heidelberg, 2003.
[3] R. Bloomfield, I. Gashi, and R. Stroud. How secure is ERTMS? In F. Ortmeier and P. Daniel, editors, Computer Safety, Reliability, and Security, volume 7613 of Lecture Notes in Computer Science, pages 247–258. Springer Berlin Heidelberg, 2012.
[4] A. Dabrowski, N. Pianta, T. Klepp, M. Mulazzani, and E. Weippl. IMSI-catch me if you can: IMSI-catcher-catchers. In Proceedings of the 30th Annual Computer Security Applications Conference, ACSAC '14, pages 246–255, New York, NY, USA, 2014. ACM.
[5] A. DasGupta. The matching, birthday and the strong birthday problem: a contemporary review. Journal of Statistical Planning and Inference, 130(1):377–389, 2005.
[6] J. de Ruiter, R. J. Thomas, and T. Chothia. A formal security analysis of ERTMS train to trackside protocols. In A. R. Thierry Lecomte, Ralf Pinger, editor, Reliability, Safety and Security of Railway Systems: Modelling, Analysis, Verification and Certification. International Conference, Paris, France, June 28-30, 2016, Proceedings, Lecture Notes in Computer Science, 2016.
[7] ERA. SUBSET-026: System requirements specification, version 3.5.0. Technical report, 2015.
[8] M. Franekova and P. Chrtiansky. Key Management System in ETCS. Transport System Telematics, 2009.
[9] M. Franekova, K. Rastocny, A. Janota, and P. Chrtiansky. Safety Analysis of Cryptography Mechanisms used in GSM for Railway. International Journal of Engineering, 11(1):207–212, 2011. http://annals.fh.upt.ro/pdf-full/2011/ANNALS-2011-1-34.pdf.
[10] GSM-R Functional Group. EIRENE Functional Requirements Specification, version 7.4.0. Technical report, 2014.
[11] GSM-R Functional Group. EIRENE System Requirements Specification, version 15.4.0. Technical report, 2014.
[12] H. Handschuh and B. Preneel. Minding your MAC algorithms. Information Security Bulletin, 9(6):213–221, 2004.
[13] ISO/IEC. ISO/IEC 9797-1:2011 - Information technology - Security techniques - Message Authentication Codes (MACs) - Part 1: Mechanisms using a block cipher. Technical report, ISO/IEC, 2011.
[14] M. Kalenderi, D. Pnevmatikatos, I. Papaefstathiou, and C. Manifavas. Breaking the GSM A5/1 cryptography algorithm with rainbow tables and high-end FPGAs. In 22nd International Conference on Field Programmable Logic and Applications (FPL), pages 747–753. IEEE, 2012.
[15] L. Karstensen. GSM A5/1 rainbow tables in Oslo, Norway. Available: https://lassekarstensen.wordpress.com/2013/08/08/gsm-a51-rainbow-tables-in-oslo-norway/, 2015. Online.
[16] J. Lu, Z. Li, and M. Henricksen. Time-Memory Trade-off Attack on the GSM A5/1 Stream Cipher Using Commodity GPGPU. In 13th International Conference on Applied Cryptography and Network Security (ACNS 2015), 2015.
[17] C. J. Mitchell. Key recovery attack on ANSI retail MAC. Electronics Letters, 39(4):361–362, 2003.
[18] F. Pépin and M. G. Vigliotti. Risk Assessment of the 3DES in ERTMS, pages 79–92. Springer International Publishing, Cham, 2016.
[19] S. Petrovic and A. Fuster-Sabater. Cryptanalysis of the A5/2 Algorithm. Cryptology ePrint Archive, Report 2000/052, 2000. http://eprint.iacr.org/.
[20] B. Preneel and P. Van Oorschot. On the security of iterated message authentication codes. Information Theory, IEEE Transactions on, 45(1):188–199, Jan 1999.
[21] B. Preneel and P. C. van Oorschot. Key recovery attack on ANSI X9.19 retail MAC. Electronics Letters, 32(17):1568–1569, 1996.
[22] SR Labs. Decrypting GSM phone calls. Available: https://srlabs.de/decrypting-gsm/, 2010. Online.
[23] UNISIG. SUBSET-037 - EuroRadio FIS, version 3.2.0. Technical report, 2015.
[24] J. Wolff. What is the value of preventing a fatality? In T. Lewens, editor, Risk: Philosophical Perspectives. Routledge, 2007.

### Appendix

#### A. Collisions
As part of our analysis of the collision resistance of the MAC algorithm used in EuroRadio, we found 8 separate collisions for the Acknowledgement Message (Message 146). This was only for the intermediate MAC value (i.e., \( H_n \)), which is sufficient to detect collisions, as the 3DES transformation is deterministic. The collisions are shown in Table 4.

| Intermediate MAC (\( H_n \)) | Plaintexts |
|-----------------------------|------------|
| 365CA0E4D4901E85            | 00120000020A9203A2105E0480000062105DFF8000000000 |
| 410F1B9C2C09E958            | 00120000020A9203AAE360078000006AE360028000000000 |
| 4BBDFBABD9757A38            | 00120000020A9203970598C5C00000570598C34000000000 |
| 7A3D01D36BE88B21            | 00120000020A9203B04EA8D7C00000704EA8D54000000000 |
| 80B7557F31566DBB            | 00120000020A9203A9D9B5FDC0000069D9B5FB4000000000 |
| A7A3AD4FA4C6D433            | 00120000020A9203AC38CEEA8000006C38CEE58000000000 |
| BE23849D77705C72            | 00120000020A920385CCD6F280000045CCD6EB0000000000 |
| F813AED5FE3D445F            | 00120000020A920386E4CFBCC0000046E4CFB7C000000000 |

Table 4: Pairs of messages which result in the same MAC under key \( k_1 = 01020407080B0D0E \)

#### Speed Results
- Speed.Dev.#5: 174.4 MH/s (483.27ms)
- Speed.Dev.#6: 175.3 MH/s (480.53ms)
- Speed.Dev.#7: 175.9 MH/s (483.79ms)
- Speed.Dev.#8: 175.9 MH/s (483.84ms)
- Speed.Dev.#9: 175.1 MH/s (481.23ms)
- Speed.Dev.#10: 177.5 MH/s (479.46ms)
- Speed.Dev.#11: 177.4 MH/s (479.99ms)
- Speed.Dev.#12: 174.8 MH/s (486.82ms)
- Speed.Dev.#13: 177.6 MH/s (484.14ms)
- Speed.Dev.#14: 175.8 MH/s (484.19ms)
- Speed.Dev.#15: 176.8 MH/s (481.54ms)
- Speed.Dev.#16: 175.0 MH/s (481.54ms)
- Speed.Dev.#*: 2814.1 MH/s

We estimate the cost of breaking the EuroRadio MAC on a p2.16xlarge instance as follows: the instance produces 2,814,100,000 outputs per second. As this involves 25 rounds of DES, the actual indicative speed is 70,352,500,000 per second. To break DES on a single instance in terms of time can be calculated by the below equation:

\[
\frac{2^{56}}{(70,352,500,000 \times 60 \times 60)} \approx 284 \text{ hours}
\]

On 400 p2.16xlarge instances, this would take approximately 42 hours. As the EuroRadio MAC involves 6 DES encryptions (32-byte messages with 3 DES encryptions each, totaling 6 to test the key), we can use the below equation to give a time of 30 minutes on 3,400 simultaneous instances:

\[
\frac{6 \times 2^{56}}{(70,352,500,000 \times 60 \times 3400)} \approx 30 \text{ minutes}
\]

As a p2.16xlarge instance costs $14.40 per hour to rent, this would cost (for 3,400 instances) $48,960.

#### B. Benchmarking
The Amazon EC2 instance hired to perform the hashcat benchmarking was a p2.16xlarge instance. This type of instance is designed for high-performance GPU computation and costs $14.40 per hour to use. This instance comes with 64vCPUs, 734GiB of local RAM, and an 8GB SSD-backed storage facility on the same network for minimal latency.

Each p2 instance is equipped with an NVIDIA Tesla K80 GPU, with 5000 CUDA cores and 24GB of GDDR5 RAM. Our benchmarking instance was fitted with 16 K80 GPUs. At the time of benchmarking, the latest version of NVIDIA GPU Drivers and hashcat source were compiled and installed. hashcat is optimized for OpenCL, allowing the GPUs to be leveraged for GPU-accelerated computation, and using the GPUs on board, our results are provided in the following section.

**hashcat results**

hashcat supports a benchmarking mode, allowing it to state the number of hashes, or values it is able to produce per second. The argument set and results presented below are broken down:

- `-m 1500`: Message Type: descrypt, DES(Unix), Traditional DES
- `-b`: Benchmark Mode
- `-w 4`: Workload Profile 4 - Extreme
- `--powertune-enable`: Enable automatic power tuning option on GPU

We use the descrypt message type, as this is the closest family of algorithm to simple DES encryption. descrypt works by taking a password as a 56-bit key, taking a 64-bit zeroed data input block, and encrypts this 25 times, where the hash is the output of this process. Thus, we state that the output speed from the 2.16xlarge instance has a 25x factor improvement in speed, due to descrypt carrying out 25 rounds of DES encryption.

```
$ hashcat -m 1500 -b -w 4 --powertune-enable
hashcat (v3.10) starting in benchmark-mode...
OpenCL Platform #1: NVIDIA Corporation
======================================
- Device #1: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #2: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #3: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #4: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #5: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #6: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #7: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #8: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #9: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #10: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #11: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #12: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #13: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #14: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #15: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #16: Tesla K80, 2859/11439 MB allocatable, 13MCU
Hashtype: descrypt, DES(Unix), Traditional DES
Speed.Dev.#1: 176.5 MH/s (482.39ms)
Speed.Dev.#2: 174.6 MH/s (482.68ms)
Speed.Dev.#3: 176.2 MH/s (483.11ms)
Speed.Dev.#4: 175.4 MH/s (485.09ms)
```

#### C. Data Capture
**Figure 7**: RF waterfall graph output from gnuradio. Potential GSM-R data (red areas) is shown on frequencies 923.6MHz and 924.4MHz.

**Figure 8**: Wireshark screenshot showing captured GSM-R packets. The packets captured allow recovery of the TMSI value.