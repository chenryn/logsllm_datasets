√
M (cid:25)
(cid:1) ln
2N
S
1
1 (cid:0) p
(8)
For N = 264 and S = 1825000 sessions, assuming an attacker
that can monitor 5000 sessions per day for 365 days, the
number of messages per session that result in a collision
(cid:0)6 is M = 4496. We recommend using
probability of P = 10
a counter that forces the session to be re-established once
this number of messages is reached.
For infrastructure managers and manufacturers, such a
bound could be enforced in a range of places: either at the
RBC where all trains coming into an area of control are
subject to this message count bound, or as an onboard soft-
ware update, although this limits the mitigation. Having
the bound enforced by the RBC is a stronger proposition,
as there are fewer operating in a country, reducing costs to
the infrastructure manager to implement, and can be built
and tested as a software update in a shorter timeframe than
updating onboard software. For the ‘enforcing’ entity, a
counter simply is maintained, in addition to the clock for
messages sent and received, incremented each time a mes-
sage is sent or received to or from a train. We recommend
counting the number of messages send and received from
the train, rather than relying on the existing clock, as one
no longer has to consider data speeds. This solution is fully
backwards-compatible with no identi(cid:12)ed limitations, where
the current EuroRadio speci(cid:12)cation already has support for
the train and RBC terminating sessions.
Another problem is that EuroRadio still relies on the se-
curity of the DES and 3DES ciphers. Whilst DES has been
shown to be feasibly broken, 3DES does not yet have a full
key recovery attack, however it is estimated that it will be
feasible to brute-force 3DES by 20307. Therefore, longer-
term solutions, like changing the MAC scheme, will require
signi(cid:12)cant changes to software and, for some ciphers, even
extending key length. For infrastructure managers, updat-
ing the derivation key on every train and RBC is not a simple
process, where all trains and RBCs must be updated at the
same time to support such changes. This would likely result
in signi(cid:12)cant implementation and deployment cost. While
we believe the current setup is no immediate threat to rail
infrastructure, these longer-term solutions should be consid-
ered as part of the rati(cid:12)cation process of updated ERTMS
standards as alternative safety features.
As alternative MAC schemes, AES and HMAC-based MACs
were considered, where eﬃciency and long-term viability
7https://www.keylength.com/en/3/
were considered. Any proposed MAC changes should be
considered to be quantum resistant to prevent key recovery
in a ‘post-quantum world’. In order to evaluate the perfor-
mance impact and resistance to collisions, we carried out
the same collision detection code under the diﬀerent MAC
algorithms. Where key size under proposed algorithms was
too short, the same pre(cid:12)x was used and extended with dis-
tinctly diﬀerent bits. These computations were also timed
to measure relative performance against the current MAC
algorithm, which was used as a baseline. Our results are
given in Table 8.
We show that the impact of using a DES-based MAC al-
gorithm has a signi(cid:12)cant impact on the generation of the
MAC, compared to the proposed alternatives. The theo-
retical performance improvements, however, do not directly
translate to real-life functionality improvements. For exam-
ple, the train’s stopping distance is not signi(cid:12)cantly aﬀected
by changing the MAC algorithm as the time to generate a
MAC under the current scheme can be quanti(cid:12)ed to be at
200km/h to be 0.05cm. Improvements, therefore are mini-
mal in terms of distance travelled.
Finally, if some ERTMS Speci(cid:12)cations were to be com-
bined, the EuroRadio and Application Layers, which them-
selves provide independent defences, may be combined as a
uni(cid:12)ed layer which provides authenticity, integrity and re-
play protection. This, however, requires signi(cid:12)cant changes
to the underlying speci(cid:12)cations to support this change, with
cost, development and rati(cid:12)cation involved.
9. CONCLUSION
We have presented the results of our analysis of the Euro-
Radio MAC algorithm, the algorithm used to secure com-
munication between trains and backend equipment. On the
ERTMS stack EuroRadio provides the safety-critical func-
tion of message authentication. We assessed each layer to de-
termine potential weaknesses that could be exploited. This
allowed us to develop a key recovery attack by leveraging
collisions in the MAC for diﬀerent messages. By recovering
one of the keys used in the generation of the MACs, it is then
possible to exploit cryptographic weaknesses in EuroRadio.
We combined this with a second vulnerability in the Appli-
cation Layer protocol to forge a Movement Authority with
a valid MAC. The forged messages would be accepted by a
train, potentially placing it in an unsafe situation. We have
discussed the risk this poses to train networks and we have
propose possible mitigations, such as restricting the number
of messages per session.
We have discussed our attack with Maria Grazia Vigliotti
at the UK’s Rail Safety and Standards Board (RSSB), and
Network Rail, they have agreed that EuroRadio is not safe to
be used with a transport protocol faster than GSM-R. They
also agree with the fact that monitoring the whole rail back-
bone is theoretically possible. However, they consider this
to be more diﬃcult than breaking into a key management
centre and/or bribing train staﬀ. RSSB has no objection to
us publishing our results.
Acknowledgements
Funding for this paper was provided by the UKs Centre for
the Protection of National Infrastructure (CPNI) and En-
gineering and Physical Sciences Research Council (EPSRC)
via the SCEPTICS: A SystematiC Evaluation Process for
Threats to Industrial Control Systems project.
10. REFERENCES
[1] ANSI. ANSI X9.19:1998 Financial Institution Retail
Message Authentication. Technical report, ANSI,
1998.
[2] E. Barkan, E. Biham, and N. Keller. Instant
ciphertext-only cryptanalysis of GSM encrypted
communication. In D. Boneh, editor, Advances in
Cryptology - CRYPTO 2003, volume 2729 of Lecture
Notes in Computer Science, pages 600{616. Springer
Berlin Heidelberg, 2003.
[3] R. Bloom(cid:12)eld, R. Bloom(cid:12)eld, I. Gashi, and R. Stroud.
How secure is ERTMS? In F. Ortmeier and P. Daniel,
editors, Computer Safety, Reliability, and Security,
volume 7613 of Lecture Notes in Computer Science,
pages 247{258. Springer Berlin Heidelberg, 2012.
[4] A. Dabrowski, N. Pianta, T. Klepp, M. Mulazzani,
and E. Weippl. Imsi-catch me if you can:
Imsi-catcher-catchers. In Proceedings of the 30th
Annual Computer Security Applications Conference,
ACSAC ’14, pages 246{255, New York, NY, USA,
2014. ACM.
[5] A. DasGupta. The matching, birthday and the strong
birthday problem: a contemporary review. Journal of
Statistical Planning and Inference, 130(1):377{389,
2005.
[6] J. de Ruiter, R. J. Thomas, and T. Chothia. A formal
security analysis of ERTMS train to trackside
protocols. In A. R. Thierry Lecomte, Ralf Pinger,
editor, Reliability, Safety and Security of Railway
Systems: Modelling, Analysis, Veri(cid:12)cation and
Certi(cid:12)cation. International Conference, Paris, France,
June 28-30, 2016, Proceedings, Lecture Notes in
Computer Science, 2016.
[7] ERA. SUBSET-026: System requirements
speci(cid:12)cation, version 3.5.0. Technical report, 2015.
[8] M. Franekova and P. Chrtiansky. Key Management
System in ETCS. Transport System Telematics, 2009.
[9] M. Franekova, K. Rastocny, A. Janota, and
P. Chrtiansky. Safety Analysis of Cryptography
Mechanisms used in GSM for Railway. International
Journal of Engineering, 11(1):207{212, 2011.
http://annals:(cid:12)h:upt:ro/pdf-full/2011/ANNALS-
2011-1-34:pdf.
[10] GSM-R Functional Group. EIRENE Functional
Requirements Speci(cid:12)cation, version 7.4.0. Technical
report, 2014.
[11] GSM-R Functional Group. EIRENE System
Requirements Speci(cid:12)cation, version 15.4.0. Technical
report, 2014.
[12] H. Handschuh and B. Preneel. Minding your MAC
algorithms. Information Security Bulletin,
9(6):213{221, 2004.
[13] ISO/IEC. ISO/IEC 9797-1:2011 { Information
technology { Security techniques { Message
Authentication Codes (MACs) { Part 1: Mechanisms
using a block cipher. Technical report, ISO/IEC, 2011.
[14] M. Kalenderi, D. Pnevmatikatos, I. Papaefstathiou,
and C. Manifavas. Breaking the GSM A5/1
cryptography algorithm with rainbow tables and
high-end FPGAS. In 22nd International Conference
on Field Programmable Logic and Applications (FPL),
pages 747{753. IEEE, 2012.
[15] L. Karstensen. GSM A5/1 rainbow tables in Oslo,
Norway. Available:
https://lassekarstensen:wordpress:com/2013/08/08/
gsm-a51-rainbow-tables-in-oslo-norway/, 2015.
Online.
[16] J. Lu, Z. Li, and M. Henricksen. Time-Memory
Trade-oﬀ Attack on the GSM A5/1 Stream Cipher
Using Commodity GPGPU. In 13th International
Conference on Applied Cryptography and Network
Security (ACNS 2015), 2015.
[17] C. J. Mitchell. Key recovery attack on ANSI retail
MAC. Electronics Letters, 39(4):361{362, 2003.
[18] F. P(cid:19)epin and M. G. Vigliotti. Risk Assessment of the
3Des in ERTMS, pages 79{92. Springer International
Publishing, Cham, 2016.
[19] S. Petrovic and A. F(cid:18)uster-Sabater. CRYPTANALYSIS
OF THE A5/2 ALGORITHM. Cryptology ePrint
Archive, Report 2000/052, 2000.
http://eprint:iacr:org/.
[20] B. Preneel and P. Van Oorschot. On the security of
iterated message authentication codes. Information
Theory, IEEE Transactions on, 45(1):188{199, Jan
1999.
[21] B. Preneel and P. C. van Oorschot. Key recovery
attack on ANSI X9. 19 retail MAC. Electronics
Letters, 32(17):1568{1569, 1996.
[22] SR Labs. Decrypting GSM phone calls. Available:
https://srlabs:de/decrypting gsm/, 2010. Online.
[23] UNISIG. SUBSET-037 - EuroRadio FIS, version 3.2.0.
Technical report, 2015.
[24] J. Wolﬀ. What is the value of preventing a fatality? In
T. Lewens, editor, Risk: Philosophical Perspectives.
Routledge, 2007.
APPENDIX
A. COLLISIONS
As part of our analysis of collision resistance of the MAC
algorithm used in EuroRadio, we found 8 separate collisions
for the Acknowledgement Message (Message 146). This was
only for the intermediate MAC value (i.e. Hn), which is
suﬃcient to detect collisions, as the 3DES transformation is
deterministic. The collisions are shown in Table 4.
Intermediate
MAC (Hn)
365CA0E4D4901E85
410F1B9C2C09E958
4BBDFBABD9757A38
7A3D01D36BE88B21
80B7557F31566DBB
A7A3AD4FA4C6D433
BE23849D77705C72
F813AED5FE3D445F
Plaintexts
00120000020A9203A2105E0480000062105DFF8000000000
00120000020A9203AAE360078000006AE360028000000000
00120000020A9203970598C5C00000570598C34000000000
00120000020A9203B04EA8D7C00000704EA8D54000000000
00120000020A9203A9D9B5FDC0000069D9B5FB4000000000
00120000020A9203AC38CEEA8000006C38CEE58000000000
00120000020A920385CCD6F280000045CCD6EB0000000000
00120000020A920386E4CFBCC0000046E4CFB7C000000000
00120000020A9203A2105E0480000062105DFD0000000000
00120000020A9203AAE360078000006AE360000000000000
00120000020A9203A16580E0400000616580DDC000000000
00120000020A9203A34C8FAF400000634C8FAA4000000000
00120000020A920398952D5AC0000058952D534000000000
00120000020A9203B553FC648000007553FC5D0000000000
00120000020A9203A16580E0400000616580DB4000000000
00120000020A9203A34C8FAF400000634C8FACC000000000
Table 4: Pairs of messages which result in the same
MAC under key k1 = 01020407080B0D0E
174.4 MH/s (483.27ms)
175.3 MH/s (480.53ms)
175.9 MH/s (483.79ms)
175.9 MH/s (483.84ms)
175.1 MH/s (481.23ms)
Speed.Dev.#5:
Speed.Dev.#6:
Speed.Dev.#7:
Speed.Dev.#8:
Speed.Dev.#9:
Speed.Dev.#10:
Speed.Dev.#11:
Speed.Dev.#12:
Speed.Dev.#13:
Speed.Dev.#14:
Speed.Dev.#15:
Speed.Dev.#16:
Speed.Dev.#*.: 2814.1 MH/s
177.5 MH/s (479.46ms)
177.4 MH/s (479.99ms)
174.8 MH/s (486.82ms)
177.6 MH/s (484.14ms)
175.8 MH/s (484.19ms)
176.8 MH/s (481.54ms)
175.0 MH/s (481.54ms)
We estimate the cost of breaking the EuroRadio MAC on
a p2.16xlarge instance as follows: the instance produces
2,814,100,000 outputs per second. As this involves 25 rounds
of DES, the actual indicative speed is 70,352,500,000 per
second. To break DES on a single instance in terms of time
can be calculated by the below equation:
256
(70; 352; 500; 000 (cid:3) 60 (cid:3) 60)
(cid:25) 284 hours
On 400 p2.16xlarge instances, this would take (cid:24) 42 hours.
As the EuroRadio MAC involves 6 DES encryptions (32
byte messages with 3 DES encryptions each, totalling 6 to
test the key), we can use the below equation to give a time
of 30 minutes on 3,400 simultaneous instances:
6 (cid:1) 256
(70; 352; 500; 000 (cid:3) 60 (cid:3) 3400)
(cid:25) 30 mins
As a p2.16xlarge instance costs $14.40 per hour to rent,
this would cost (for 3,400 instances) $48,960.
B. BENCHMARKING
The Amazon EC2 instance which was hired to perform the
hashcat benchmarking was a p2.16xlarge instance. This
type of instance is designed for high performance GPU com-
putation8 and costs $14.40 per hour to use. This instance
comes with 64vCPUs, 734GiB of local RAM and, for our
setup, an 8GB SSD-backed storage facility on the same net-
work for minimal latency.
Each p2 instance is equipped with an NVIDIA Tesla K80
GPU, with 5000 CUDA cores, 24GB of GDDR5 RAM. Our
benchmarking instance was (cid:12)tted with 16 K80 GPUs. At the
time of benchmarking, the latest version of NVIDIA GPU
Drivers and hashcat source were compiled and installed.
hashcat is optimised for OpenCL, allowing the GPUs to
be leveraged for GPU-accelerated computation, and using
the GPUs on board, our results are provided in the following
section.
hashcat results
hashcat supports a benchmarking mode, allowing it to state
the number of hashes, or values it is able to produce per
second. The argument set and results presented below are
broken down:
(cid:15) -m 1500 : Message Type: descrypt, DES(Unix), Tradi-
(cid:15) -b : Benchmark Mode
(cid:15) -w 4 : Workload Pro(cid:12)le 4 { Extreme
(cid:15) -powertune-enable : Enable automatic power tuning
tional DES
option on GPU
We use the descrypt message type, as this is the clos-
est family of algorithm to simple DES encryption. descrypt
works by taking a password as a 56-bit key, taking a 64-bit
zeroed data input block, and encrypts this 25 times, where
the hash is the output of this process. Thus, we state that
the output speed from the 2.16xlarge instance has a 25x
factor improvement in speed, due to descrypt carrying out
25 rounds of DES encryption.
$ hashcat -m 1500 -b -w 4 --powertune-enable
hashcat (v3.10) starting in benchmark-mode...
OpenCL Platform #1: NVIDIA Corporation
======================================
- Device #1: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #2: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #3: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #4: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #5: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #6: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #7: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #8: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #9: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #10: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #11: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #12: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #13: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #14: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #15: Tesla K80, 2859/11439 MB allocatable, 13MCU
- Device #16: Tesla K80, 2859/11439 MB allocatable, 13MCU
Hashtype: descrypt, DES(Unix), Traditional DES
Speed.Dev.#1:
Speed.Dev.#2:
Speed.Dev.#3:
Speed.Dev.#4:
176.5 MH/s (482.39ms)
174.6 MH/s (482.68ms)
176.2 MH/s (483.11ms)
175.4 MH/s (485.09ms)
8https://aws:amazon:com/ec2/details/
C. DATA CAPTURE
Figure 7: RF waterfall graph output from gnuradio. Potential GSM-R data (red areas) is shown on frequencies
923.6MHz and 924.4MHz.
Figure 8: Wireshark screenshot showing captured GSM-R packets. The packets captured allow recovery of
the TMSI value.