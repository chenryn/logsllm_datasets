    +----------------------------------------------------------------------+
    | $t8─$t9 |  $24─$25  |  Temporary registers                           |
    +----------------------------------------------------------------------+
    | $k0─$k1 |  $26─$27  |  Reserved for kernel                           |
    +----------------------------------------------------------------------+
    |  $gp    |  $28      |  Global pointer                                |
    +----------------------------------------------------------------------+
    |  $sp    |  $29      |  Stack pointer                                 |
    +----------------------------------------------------------------------+
    |  $fp    |  $30      |  Frame pointer                                 |
    +----------------------------------------------------------------------+
    |  $ra    |  $31      |  Return address                                |
    +---------+-----------+------------------------------------------------+
最重要的是：
  * 前四个函数参数移入`$a0 - $a3`，其余参数置于堆栈顶部； 
  * 函数返回被放置，`$v0`并最终在`$v1`第二个返回值存在时被放置； 
  * `$ra`通过跳转和链接（JAL）或跳转和链接寄存器（JALR）执行功能调用时，返回地址存储在寄存器中； 
  * `$sX` 寄存器在过程调用之间保留（子例程可以使用它们，但必须在返回之前将其还原）； 
  * `$gp` 指向静态数据段中64k内存块的中间； 
  * `$sp` 指向堆栈的最后一个位置； 
  * _叶子_ 与 _非叶子_ 子例程之间的区别：
  * 叶子：请勿调用任何其他子例程，也不要使用堆栈上的内存空间。没有建立堆栈框架，因此不需要更改`$sp`。
  * 带数据的叶：与叶相同，但它们需要堆栈空间，例如：用于局部变量，将推动堆栈框架，可省略不需要的堆栈框架部分。
  * 非叶程序：将调用其他子例程，很可能具有完整的堆栈框架。
  * 在有PIC的Linux上，`$t9`应该包含被调用函数的地址。
                  +                 +-------------------+  +-+
                  |                 |                   |    |
                  |                 +-------------------+    |
                  |                 |                   |    |   Previous
                  |                 +-------------------+    +-> Stack
                  |                 |                   |    |   Frame
                  |                 +-------------------+    |
                  |                 |                   |    |
                  |                 +-------------------+  +-+
                  |                 |  local data x─1   |  +-+
                  |                 +-------------------+    |
                  |                 |                   |    |
                  |                 +-------------------+    |
                  |                 |  local data 0     |    |
                  |                 +-------------------+    |
                  |                 |  empty            |    |
        Stack     |                 +-------------------+    |
        Growth    |                 |  return value     |    |
        Direction |                 +-------------------+    |
                  |                 |  saved reg k─1    |    |
                  |                 +-------------------+    |   Current
                  |                 |                   |    +-> Stack
                  |                 +-------------------+    |   Frame
                  |                 |  saved reg 0      |    |
                  |                 +-------------------+    |
                  |                 |  arg n─1          |    |
                  |                 +-------------------+    |
                  |                 |                   |    |
                  |                 +-------------------+    |
                  |                 |  arg 4            |    |
                  |                 +-------------------+    |
                  |                 |  arg 3            |    |
                  |                 +-------------------+    |
                  |                 |  arg 2            |    |
                  |                 +-------------------+    |
                  |                 |  arg 1            |    |
                  |                 +-------------------+    |
                  |                 |  arg 0            |    |
                  v                 +-------------------+  +-+
                                              |
                                              |
                                              v
### 常用操作
熟悉其他汇编语言的人将很快上手，以下为可快速入门本系列第2部分的精选内容：
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  Mnemonic        |  Full name                                         |  Syntax                 |  Operation                                               |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  ADD             |  Add (with overflow)                               |  add $a, $b, $c         |  $a = $b + $c                                            |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  ADDI        |  Add immediate (with overflow)                     |  addi $a, $b, imm       |  $a = $b + imm                                           |
        +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  ADDIU       |  Add immediate unsigned (no overflow)              |  addiu $a, $b, imm      |  see ADDI                                                |
        +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  ADDU        |  Add unsigned (no overflow)                        |  addu $a, $b, $c        |  see ADD                                                 |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  AND*            |  Bitwise and                                       |  and $a, $b, $c         |  $a = $b & $c                                            |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  B**             |  Branch to offset unconditionally                  |  b offset               |  goto offset                                             |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  BEQ         |  Branch on equal                                   |  beq $a, $b, offset     |  if $a == $t goto offset                                 |
        +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
            |  BEQZ    |  Branch on equal to zero                           |  beqz $a, offset        |  if $a == 0 goto offset                                  |
        +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  BGEZ        |  Branch on greater than or equal to zero           |  bgez $a, offset        |  if $a >= 0 goto offset                                  |
        +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
            |  BGEZAL  |  Branch on greater than or equal to zero and link  |  bgezal $a, offset      |  if $a >= 0: $ra = PC+8 and goto offset                  |
        +---+----------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  BAL         |  Branch and link                                   |  bal offset             |  $ra=PC+8 and goto offset                                |
        +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  BNE         |   Branch on not equal                              |  bne $a, $b, offset     |  if $a != $b: goto offset                                |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  DIV(U)          |  Divide (unsigned)                                 |  div $a, $b             |  $LO = $s/$t, $HI = $s%$t (LO/HI are special registers)  |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  J**             |  Jump                                              |  j target               |  PC=target                                               |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  JR          |  Jump register                                     |  jr target              |  PC=$register                                            |
        +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  JALR        |  Jump and link register                            |  jalr target            |  $ra=PC+8, PC=$register                                  |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  L(B/W)          |   Load (byte/word)                                 |  l(b/w) $a, offset($b)  |  $a = memory[$b + offset]                                |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  LWL         |  Load word left                                    |  lwl $a, offset(base)   |                                                          |
        +--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
        |  LWR         |  Load word right                                   |  lwr $a, offset(base)   |                                                          |
    +---+--------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  OR*             |  Bitewise or                                       |  or $a, $b, $c          |  $a = $b|$c                                              |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  S(B/W)          |  Store (byte/word)                                 |  s(w/b) $a, offset($b)  |  memory[$b + offset] = $a                                |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  SLL**           |  Shift left logical                                |  sll $a, $b, h          |  $a = $b > h                                            |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    | SYSCALL          |  System call                                       |  syscall                |  PC+=4                                                   |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
    |  XOR*            |  Bitwise exclusive or                              |  xor $a, $b, $c         |  $a = $b^$c                                              |
    +------------------+----------------------------------------------------+-------------------------+----------------------------------------------------------+
_注意_ ：
1.未明确声明PC更改的人可以假定在执行时PC + = 4；  
2.标有星号的标记至少具有一个即时版本;  
3.带有双星号的标记还有许多其他变体;  
4.`ADD`变体只能将`SUB(U)`作为对应物;  
5.`DIV`变体有一个`MULT(U)`对应物;  
6.`j`和`b`指令之间的一般区别是分支使用PC相对位移，而跳转使用绝对地址，当考虑使用PIC时，这一点非常重要。
最初的侦查阶段就到这里了，上面的MIPS32汇编表只是所有可用指令的超集，即使不熟悉MIPS组装，以上表格也足以应对[第二部分](https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/)的内容学习了！ 本系列的[第二部分](https://0x434b.dev/breaking-the-d-link-dir3060-firmware-encryption-static-analysis-of-the-decryption-routine-part-2-1/)，我们将深入研究IDA中的`imgdecrypt`二进制文件，敬请关注！
## 参考
  * [MIPS® Architecture for Programmers Volume II-A: The MIPS32® Instruction Set Manual](https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00086-2B-MIPS32BIS-AFP-6.06.pdf)
  * [MIPS32® Instruction Set Quick Reference](https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00565-2B-MIPS32-QRC-01.01.pdf)
  * [MIPS Instruction Reference](http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html)
  * [MIPS Architecture and Assembly Language Overview](https://minnie.tuhs.org/CompArch/Resources/mips_quick_tutorial.html)
* * *