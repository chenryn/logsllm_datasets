known WNF state names), SEB is a central powerhouse of system notification capabilities, replacing 
the legacy role that the Window Manager provided through messages such as WM_DEVICEARRIVAL, 
WM_SESSIONENDCHANGE, WM_POWER, and others. 
SEB pipes into the Broker Infrastructure (BI) used by UWP applications and allows applications, even 
when running under an AppContainer, to access WNF events that map to systemwide state. In turn, for 
WinRT applications, the Windows.ApplicationModel.Background namespace exposes a SystemTrigger 
class, which implements IBackgroundTrigger, that pipes into the SEB’s RPC services and C++ API, for 
certain well-known system events, which ultimately transforms to WNF_SEB_XXX event state names. 
It serves as a perfect example of how something highly undocumented and internal, such as WNF, can 
ultimately be at the heart of a high-level documented API for Modern UWP application development. 
SEB is only one of the many brokers that UWP exposes, and at the end of the chapter, we cover back-
ground tasks and the Broker Infrastructure in full detail.
CHAPTER 8 System mechanisms
239
User-mode debugging
Support for user-mode debugging is split into three different modules. The first one is located in the 
executive itself and has the prefix Dbgk, which stands for Debugging Framework. It provides the neces-
sary internal functions for registering and listening for debug events, managing the debug object, and 
packaging the information for consumption by its user-mode counterpart. The user-mode component 
that talks directly to Dbgk is located in the native system library, Ntdll.dll, under a set of APIs that begin 
with the prefix DbgUi. These APIs are responsible for wrapping the underlying debug object implemen-
tation (which is opaque), and they allow all subsystem applications to use debugging by wrapping their 
own APIs around the DbgUi implementation. Finally, the third component in user-mode debugging 
belongs to the subsystem DLLs. It is the exposed, documented API (located in KernelBase.dll for the 
Windows subsystem) that each subsystem supports for performing debugging of other applications. 
Kernel support
The kernel supports user-mode debugging through an object mentioned earlier: the debug object. It 
provides a series of system calls, most of which map directly to the Windows debugging API, typically 
accessed through the DbgUi layer first. The debug object itself is a simple construct, composed of a 
series of flags that determine state, an event to notify any waiters that debugger events are present, 
a doubly linked list of debug events waiting to be processed, and a fast mutex used for locking the 
object. This is all the information that the kernel requires for successfully receiving and sending debug-
ger events, and each debugged process has a debug port member in its executive process structure 
pointing to this debug object.
Once a process has an associated debug port, the events described in Table 8-32 can cause a debug 
event to be inserted into the list of events.
Apart from the causes mentioned in the table, there are a couple of special triggering cases outside 
the regular scenarios that occur at the time a debugger object first becomes associated with a pro-
cess. The first create process and create thread messages will be manually sent when the debugger is 
attached, first for the process itself and its main thread and followed by create thread messages for all 
the other threads in the process. Finally, load dll events for the executable being debugged, starting 
with Ntdll.dll and then all the current DLLs loaded in the debugged process will be sent. Similarly, if a 
debugger is already attached, but a cloned process (fork) is created, the same events will also be sent 
for the first thread in the clone (as instead of just Ntdll.dll, all other DLLs are also present in the cloned 
address space).
There also exists a special flag that can be set on a thread, either during creation or dynamically, 
called hide from debugger. When this flag is turned on, which results in the HideFromDebugger flag in 
the TEB to be set, all operations done by the current thread, even if the debug port has a debug port, 
will not result in a debugger message.
240 
CHAPTER 8 System mechanisms
TABLE 8-32 Kernel-mode debugging events
Event dentifier
Meaning
riggered 
DbgKmExceptionApi
An exception has occurred.
KiDispatchException during an exception that occurred in 
user mode.
DbgKmCreateThreadApi
A new thread has been created.
Startup of a user-mode thread.
DbgKmCreateProcessApi
A new process has been created.
Startup of a user-mode thread that is the first thread in 
the process, if the CreateReported flag is not already set 
in EPROCESS.
DbgKmExitThreadApi
A thread has exited.
Death of a user-mode thread, if the ThreadInserted flag is 
set in ETHREAD.
DbgKmExitProcessApi
A process has exited.
Death of a user-mode thread that was the last thread in 
the process, if the ThreadInserted flag is set in ETHREAD.
DbgKmLoadDllApi
A DLL was loaded.
NtMapViewOfSection when the section is an image file 
(could be an EXE as well), if the SuppressDebugMsg flag is 
not set in the TEB.
DbgKmUnloadDllApi
A DLL was unloaded.
NtUnmapViewOfSection when the section is an image file 
(could be an EXE as well), if the SuppressDebugMsg flag is 
not set in the TEB.
DbgKmErrorReportApi
A user-mode exception must be 
forwarded to WER.
This special case message is sent over ALPC, not the de-
bug object, if the DbgKmExceptionApi message returned 
DBG_EXCEPTION_NOT_HANDLED, so that WER can now 
take over exception processing.
Once a debugger object has been associated with a process, the process enters the deep freeze state 
that is also used for UWP applications. As a reminder, this suspends all threads and prevents any new 
remote thread creation. At this point, it is the debugger’s responsibility to start requesting that debug 
events be sent through. Debuggers usually request that debug events be sent back to user mode by 
performing a wait on the debug object. This call loops the list of debug events. As each request is re-
moved from the list, its contents are converted from the internal DBGK structure to the native structure 
that the next layer up understands. As you’ll see, this structure is different from the Win32 structure as 
well, and another layer of conversion has to occur. Even after all pending debug messages have been 
processed by the debugger, the kernel does not automatically resume the process. It is the debugger’s 
responsibility to call the ContinueDebugEvent function to resume execution.
Apart from some more complex handling of certain multithreading issues, the basic model for 
the framework is a simple matter of producers—code in the kernel that generates the debug events 
in the previous table—and consumers—the debugger waiting on these events and acknowledging 
their receipt.
Native support
Although the basic protocol for user-mode debugging is quite simple, it’s not directly usable by 
Windows applications—instead, it’s wrapped by the DbgUi functions in Ntdll.dll. This abstraction is 
required to allow native applications, as well as different subsystems, to use these routines (because 
code inside Ntdll.dll has no dependencies). The functions that this component provides are mostly 
analogous to the Windows API functions and related system calls. Internally, the code also provides 
the functionality required to create a debug object associated with the thread. The handle to a debug 
CHAPTER 8 System mechanisms
241
object that is created is never exposed. It is saved instead in the thread environment block (TEB) of the 
debugger thread that performs the attachment. (For more information on the TEB, see Chapter 4 of 
Part 1.) This value is saved in the DbgSsReserved[1] field.
When a debugger attaches to a process, it expects the process to be broken into—that is, an int 3 
(breakpoint) operation should have happened, generated by a thread injected into the process. If this 
didn’t happen, the debugger would never actually be able to take control of the process and would 
merely see debug events flying by. Ntdll.dll is responsible for creating and injecting that thread into the 
target process. Note that this thread is created with a special flag, which the kernel sets on the TEB, which 
results in the SkipThreadAttach flag to be set, avoiding DLL_THREAD_ATTACH notifications and TLS slot 
usage, which could cause unwanted side effects each time a debugger would break into the process.
Finally, Ntdll.dll also provides APIs to convert the native structure for debug events into the struc-
ture that the Windows API understands. This is done by following the conversions in Table 8-33.
TABLE 8-33 Native to Win32 conversions
Native State Change
Win32 State Change
Details
DbgCreateThreadStateChange
CREATE_THREAD_DEBUG_EVENT
DbgCreateProcessStateChange
CREATE_PROCESS_DEBUG_EVENT
lpImageName is always NULL, and fUnicode is 
always TRUE.
DbgExitThreadStateChange
EXIT_THREAD_DEBUG_EVENT
DbgExitProcessStateChange
EXIT_PROCESS_DEBUG_EVENT
DbgExceptionStateChange 
DbgBreakpointStateChange 
DbgSingleStepStateChange
OUTPUT_DEBUG_STRING_EVENT, 
RIP_EVENT, or  
EXCEPTION_DEBUG_EVENT
Determination is based on the Exception Code 
(which can be DBG_PRINTEXCEPTION_C /  
DBG_PRINTEXCEPTION_WIDE_C,  
DBG_RIPEXCEPTION, or something else).
DbgLoadDllStateChange
LOAD_DLL_DEBUG_EVENT
fUnicode is always TRUE
DbgUnloadDllStateChange
UNLOAD_DLL_DEBUG_EVENT
EXPERIMENT: Viewing debugger objects
Although you’ve been using WinDbg to do kernel-mode debugging, you can also use it to de-
bug user-mode programs. Go ahead and try starting Notepad.exe with the debugger attached 
using these steps:
1.
Run WinDbg, and then click File, Open Executable.
2.
Navigate to the \Windows\System32\ directory and choose Notepad.exe.
3.
You’re not going to do any debugging, so simply ignore whatever might come up.
You can type g in the command window to instruct WinDbg to continue executing
Notepad.
Now run Process Explorer and be sure the lower pane is enabled and configured to show 
open handles. (Select View, Lower Pane View, and then Handles.) You also want to look at un-
named handles, so select View, Show Unnamed Handles And Mappings.
EXPERIMENT: Viewing debugger objects
Although you’ve been using WinDbg to do kernel-mode debugging, you can also use it to de-
bug user-mode programs. Go ahead and try starting Notepad.exe with the debugger attached 
using these steps:
1.
Run WinDbg, and then click File, Open Executable.
2.
Navigate to the \Windows\System32\ directory and choose Notepad.exe.
3.
You’re not going to do any debugging, so simply ignore whatever might come up. 
You can type g in the command window to instruct WinDbg to continue executing 
Notepad.
Now run Process Explorer and be sure the lower pane is enabled and configured to show 
open handles. (Select View, Lower Pane View, and then Handles.) You also want to look at un-
named handles, so select View, Show Unnamed Handles And Mappings.
242 
CHAPTER 8 System mechanisms
Next, click the Windbg.exe (or EngHost.exe, if you’re using the WinDbg Preview) process 
and look at its handle table. You should see an open, unnamed handle to a debug object. (You 
can organize the table by Type to find this entry more readily.) You should see something like 
the following:
You can try right-clicking the handle and closing it. Notepad should disappear, and the 
following message should appear in WinDbg:
ERROR: WaitForEvent failed, NTSTATUS 0xC0000354 
This usually indicates that the debuggee has been 
killed out from underneath the debugger. 
You can use .tlist to see if the debuggee still exists.
In fact, if you look at the description for the NTSTATUS code given, you will find the text: “An 
attempt to do an operation on a debug port failed because the port is in the process of being 
deleted,” which is exactly what you’ve done by closing the handle.
As you can see, the native DbgUi interface doesn’t do much work to support the framework except 
for this abstraction. The most complicated task it does is the conversion between native and Win32 
debugger structures. This involves several additional changes to the structures.
Windows subsystem support
The final component responsible for allowing debuggers such as Microsoft Visual Studio or WinDbg to 
debug user-mode applications is in KernelBase.dll. It provides the documented Windows APIs. Apart 
from this trivial conversion of one function name to another, there is one important management 
job that this side of the debugging infrastructure is responsible for: managing the duplicated file and 
thread handles.
Recall that each time a load DLL event is sent, a handle to the image file is duplicated by the kernel 
and handed off in the event structure, as is the case with the handle to the process executable dur-
ing the create process event. During each wait call, KernelBase.dll checks whether this is an event that 
Next, click the Windbg.exe (or EngHost.exe, if you’re using the WinDbg Preview) process 
and look at its handle table. You should see an open, unnamed handle to a debug object. (You 
can organize the table by Type to find this entry more readily.) You should see something like 
the following:
You can try right-clicking the handle and closing it. Notepad should disappear, and the 
following message should appear in WinDbg:
ERROR: WaitForEvent failed, NTSTATUS 0xC0000354
This usually indicates that the debuggee has been
killed out from underneath the debugger.
You can use .tlist to see if the debuggee still exists.
In fact, if you look at the description for the NTSTATUS code given, you will find the text: “An 
NTSTATUS code given, you will find the text: “An 
NTSTATUS
attempt to do an operation on a debug port failed because the port is in the process of being 
deleted,” which is exactly what you’ve done by closing the handle.
CHAPTER 8 System mechanisms
243
results in a new duplicated process and/or thread handles from the kernel (the two create events). If so, 
it allocates a structure in which it stores the process ID, thread ID, and the thread and/or process handle 
associated with the event. This structure is linked into the first DbgSsReserved array index in the TEB, 
where we mentioned the debug object handle is stored. Likewise, KernelBase.dll also checks for exit 
events. When it detects such an event, it “marks” the handles in the data structure.
Once the debugger is finished using the handles and performs the continue call, KernelBase.dll 
parses these structures, looks for any handles whose threads have exited, and closes the handles for 
the debugger. Otherwise, those threads and processes would never exit because there would always be 
open handles to them if the debugger were running.
Packaged applications
Starting with Windows 8, there was a need for some APIs that run on different kind of devices, from a 
mobile phone, up to an Xbox and to a fully-fledged personal computer. Windows was indeed starting 
to be designed even for new device types, which use different platforms and CPU architectures (ARM 
is a good example). A new platform-agnostic application architecture, Windows Runtime (also known 
as “WinRT”) was first introduced in Windows 8. WinRT supported development in C++, JavaScript, and 
managed languages (C#, VB.Net, and so on), was based on COM, and supported natively both x86, 
AMD64, and ARM processors. Universal Windows Platform (UWP) is the evolution of WinRT. It has 
been designed to overcome some limitations of WinRT and it is built on the top of it. UWP applications 
no longer need to indicate which OS version has been developed for in their manifest, but instead they 
target one or more device families. 
UWP provides Universal Device Family APIs, which are guaranteed to be present in all device fami-
lies, and Extension APIs, which are device specific. A developer can target one device type, adding the 
extension SDK in its manifest; furthermore, she can conditionally test the presence of an API at runtime 
and adapt the app’s behavior accordingly. In this way, a UWP app running on a smartphone may start 
behaving the way it would if it were running on a PC when the phone is connected to a desktop com-
puter or a suitable docking station.
UWP provides multiple services to its apps:
I 
Adaptive controls and input—the graphical elements respond to the size and DPI of the screen
by adjusting their layout and scale. Furthermore, the input handling is abstracted to the under-
lying app. This means that a UWP app works well on different screens and with different kinds
of input devices, like touch, a pen, a mouse, keyboard, or an Xbox controller
I 
One centralized store for every UWP app, which provides a seamless install, uninstall, and
upgrade experience
I 
A unified design system, called Fluent (integrated in Visual Studio)
I 
A sandbox environment, which is called AppContainer
244 
CHAPTER 8 System mechanisms
AppContainers were originally designed for WinRT and are still used for UWP applications. We 
already covered the security aspects of AppContainers in Chapter 7 of Part 1. 
To properly execute and manage UWP applications, a new application model has been built in 
Windows, which is internally called AppModel and stands for “Modern Application Model.” The 
Modern Application Model has evolved and has been changed multiple times during each release of 
the OS. In this book, we analyze the Windows 10 Modern Application Model. Multiple components are 
part of the new model and cooperate to correctly manage the states of the packaged application and 
its background activities in an energy-efficient manner. 
I 
ost Activit anager A The Host activity manager is a new component, introduced
in Windows 10, which replaces and integrates many of the old components that control the
life (and the states) of a UWP application (Process Lifetime Manager, Foreground Manager,
Resource Policy, and Resource Manager). The Host Activity Manager lives in the Background
Task Infrastructure service (BrokerInfrastructure), not to be confused with the Background
Broker Infrastructure component, and works deeply tied to the Process State Manager. It is
implemented in two different libraries, which represent the client (Rmclient.dll) and server
(PsmServiceExtHost.dll) interface.
I 
Process State Manager (PSM) PSM has been partly replaced by HAM and is considered
part of the latter (actually PSM became a HAM client). It maintains and stores the state of
each host of the packaged application. It is implemented in the same service of the HAM
(BrokerInfrastructure), but in a different DLL: Psmsrv.dll.
I 
Application Activation Manager (AAM) AAM is the component responsible in the dif-
ferent kinds and types of activation of a packaged application. It is implemented in the
ActivationManager.dll library, which lives in the User Manager service. Application Activation