# 怎么做…
现在我们已经建立了一个运行 Docker 的虚拟机，并且安装了 OpenShift 二进制文件，我们可以使用`oc`二进制文件启动我们的集群。OpenShift 有一个可以登录的网络控制台，但是为了让它正常工作，OpenShift 将需要能够确定您的 IP 地址。如果您的虚拟机有多个，您可能需要明确告诉 OpenShift 在启动集群时使用哪个。在这里的例子中，我的公共 IP 地址是`142.93.14.79`；您的知识产权将有所不同:
```
$ oc cluster up --public-hostname=
```
![](img/f8036e4c-12fe-4b6a-bd6e-6692ee2e7cde.png)
几分钟后，集群启动并运行，您将看到如下内容:
![](img/274037d2-3898-4285-b0ca-c01dd7661ec8.png)
此时，我们有两个选择；我们可以通过 SSH shell 安装我们的应用，也可以使用 web 控制台。让我们先试试 web 控制台，确保它工作正常。在浏览器中打开 web 控制台 URL，并在启动集群时使用输出中显示的凭据登录。
You will probably get a warning from your browser that the SSL/TLS certificate doesn't match. That is fine, and expected; you can bypass this warning and continue.
现在您已经登录，让我们部署一个示例应用。点击目录中的红宝石图标:
![](img/7efe6d25-1436-4559-aebd-780f8ca197d9.png)
这将打开一个向导，帮助我们将应用添加到集群中。单击下一步按钮:
![](img/01bd8286-09c6-4a49-bc6e-a568173a3aec.png)
单击“尝试样本存储库”链接，它将自动为我们填充表单；然后，单击创建按钮:
![](img/f66ec675-3ccc-444a-954c-885019892eb4.png)
就这样，我们的 ruby-ex 应用被创建了。单击关闭按钮:
![](img/4c4dab62-820b-4f56-87eb-18632f283c9d.png)
现在，您应该看到 web 控制台中列出的应用；一旦应用启动并运行，您将看到一个 URL，您可以在其中看到应用正在运行:
![](img/43c0fd6c-6d29-4647-ac4c-5611bd8b7c06.png)
在浏览器中打开应用网址，您应该会看到如下内容:
![](img/68ccfc78-55bd-4bc3-835d-a77437c198f6.png)
现在我们已经启动并运行了示例 Ruby 应用，让我们删除它，并做同样的事情，但是使用 SSH 外壳。在应用下，您可以单击操作选项并选择删除。这将为我们删除应用:
![](img/8e9e1182-470d-4a11-abb1-c5ea652856bc.png)
回到 SSH 外壳，让我们创建一个新的应用，但这次使用的是`oc`二进制。对于本例，我们将使用 OpenShift 附带的其他内置示例之一。我们将使用`django-psql-persistent`示例，它有两个服务，一个 Django web 服务和一个 PostgreSQL 数据库服务:
```
$ oc new-app django-psql-persistent
```
![](img/47e59b0e-2beb-4ad6-a05e-6ebeb432b155.png)
几分钟后，您的应用被创建，您应该会看到如下内容:
![](img/a23b9eb8-d440-4cca-9b26-9e65e7ebb4d8.png)
当我们运行`oc status`命令时，我们可以看到我们项目的网址:
```
$ oc status
```
![](img/76a35b77-5f6b-4a0a-899e-9b21e4d8a58d.png)
当我们在浏览器中打开该 URL 时，您可以看到应用已经启动并运行:
![](img/5ae61b10-ba04-452b-a35e-7cfb610c3042.png)
当您返回 web 控制台时，您可以看到刚刚部署的应用的详细信息:
![](img/116a97c3-ef00-4867-8e2d-9f5df4459c44.png)
如果我们想使用`oc`二进制删除应用，这是相当容易的。我们只需要使用`delete`命令:
```
$ oc delete dc/django/psql-persistent
$ oc delete dc/postgresql
```
![](img/a159bf4d-9973-4adf-ac3d-25f8f886e382.png)
# 它是如何工作的…
当 OpenShift 启动时，所有 Kubernetes 服务也会启动。然后，我们通过命令行界面连接到 OpenShift 主机，并请求它启动一个 pod。该请求随后被转发到 Kubernetes，后者启动 pod。OpenShift 充当您和 Kubernetes 之间的中间人。
# 还有更多…
*   如果运行`docker container ls`命令，您将看到相应的容器正在运行
*   如果要停止 OpenShift 集群，可以运行以下命令:
```
 $ oc cluster down
```
# 请参见
*   [https://github.com/openshift/origin](https://github.com/openshift/origin)的“了解更多”部分。
*   在[https://docs.okd.io/latest/welcome/index.html](https://docs.okd.io/latest/welcome/index.html)打开 Shift 文档。
# 从源代码在 OpenShift 上构建和部署应用
OpenShift 提供了从源代码构建映像的构建过程。以下是构建映像时可以遵循的构建策略:
*   **Docker 构建**:在这种情况下，用户会向 Docker 提供上下文(Dockerfile 和支持文件)，可以用来构建镜像。OpenShift 只是触发 docker build 命令来创建映像。
*   **源代码到映像(S2I)构建**:这里，开发者定义了源代码库和构建器映像，构建器映像定义了用于创建应用的环境。然后，S2I 使用给定的源代码和构建器映像为应用创建一个新的映像。更多关于 S2I 的细节可以在[https://github.com/openshift/source-to-image](https://github.com/openshift/source-to-image)找到。
*   **定制构建**:这类似于 Docker 构建策略，但是用户可能会定制将用于构建执行的构建器映像。
在这个食谱中，我们将看看 S2I 建造过程。我们将从 OpenShift Origin repo([https://github . com/open shift/Origin/tree/master/examples/sample-app](https://github.com/openshift/origin/tree/master/examples/sample-app)中查看示例-app。相应的 S2I 构建文件位于[https://github . com/open shift/origin/tree/master/examples-app/application-template-stibuild . JSON](https://github.com/openshift/origin/tree/master/examples/sample-app/application-template-stibuild.json)。
在 BuildConfig 部分，我们可以看到源代码指向一个 GitHub repo([https://github.com/openshift/ruby-hello-world](https://github.com/openshift/ruby-hello-world))，而策略部分下的映像指向`centos/ruby-22-centos7`映像。因此，我们将使用`centos/ruby-22-centos7`映像，并使用来自 GitHub repo 的源构建一个新映像。在将构建推送到本地或第三方 Docker 注册表后，新映像取决于设置。BuildConfig 部分还定义了何时触发新构建的触发器，例如，当构建映像发生变化时。
在同一个 S2I 构建文件(`application-template-stibuild.json`)中，您会发现多个`DeploymentConfig`部分，每个窗格一个。`DeploymentConfig`部分包含诸如导出的端口、副本、pod 的环境变量等信息。简单来说，您可以将`DeploymentConfig`视为 Kubernetes 的扩展复制控制器。它还具有触发新部署的触发器。每次创建新部署时，`DeploymentConfig`的`latestVersion`字段都会递增。一个`deploymentCause`也被添加到`DeploymentConfig`中，描述导致最新部署的变化。
ImageStream 是一个相关映像的流。`BuildConfig`和`DeploymentConfig`观察`ImageStream`寻找映像变化，并根据各自的触发做出相应的反应。
您将在 S2I 构建文件中找到的其他部分是 pods 服务(数据库和前端)、可通过其访问应用的前端服务的路由以及模板。模板描述了一组打算一起使用的资源，这些资源可以被定制和处理以产生配置。每个模板可以定义一个参数列表，这些参数可以被修改以供容器使用。
与 S2I 构建类似，在同一个示例应用示例文件夹中有 Docker 和自定义构建的示例。我假设你有早期的食谱，所以我们将从那里继续。
# 准备好
您应该已经使用 OpenShift Origin 配方完成了较早的*设置 PaaS。*
确保您的群集已启动并正在运行:
```
$ oc cluster status
```
将 OpenShift Git repo 克隆到`/opt/openshift/origin`目录中:
```
$ mkdir -p /opt/openshift
$ cd /opt/openshift
$ git clone https://github.com/openshift/origin.git
$ cd origin/examples/sample-app
```
您当前的工作目录应该是虚拟机内部的`/opt/openshift/origin/examples/sample-app`。
# 怎么做…
使用`oc`命令提交申请模板进行处理:
```
$ oc new-app application-template-stibuild.json
```
![](img/972419fb-4f8c-4de6-b993-5a434da7a0a2.png)
监控构建并等待状态进入`complete`(这可能需要几分钟时间):
```
$ oc get builds
```
![](img/6e7afaaf-ea48-443e-872b-bb8ee67d8e4e.png)
获取豆荚列表:
```
$ oc get pods
```
![](img/c2346795-25c2-4be8-805e-e8f4c0a155d5.png)
获取服务列表:
```
$ oc get services
```
![](img/37895cb0-9643-4e76-bf16-46c335d134e0.png)
# 它是如何工作的…
在 BuildConfig ( `ruby-sample-build`)部分，我们将我们的源代码指定为 ruby-hello-world Git repo ( `git://github.com/openshift/ruby-hello-world.git`)并将我们的映像指定为`centos/ruby-22-centos7`。因此，构建过程采用了该映像，在`centos/ruby-22-centos7`上构建我们的源代码后，使用 S2I 构建器创建了一个名为`origin-ruby-sample`的新映像。然后，新映像被推送到 OpenShift 内置的 Docker 注册表中。
使用 DeploymentConfig，前端和后端单元也被部署并链接到相应的服务。
# 还有更多…
*   在多节点设置中，可以在不同的系统上调度您的 pods。OpenShift 通过覆盖网络连接 pod，因此运行在一个节点上的 pod 可以访问另一个节点。叫做`openshift-sdn`。更多详情请访问[https://docs . open shift . com/container-platform/3.10/architecture/networking/sdn . html](https://docs.openshift.com/container-platform/3.10/architecture/networking/sdn.html)。
# 请参见
*   [https://github.com/openshift/origin.](https://github.com/openshift/origin)的了解更多部分
*   在[https://docs.openShift.com 打开 shift 文档。](https://docs.openshift.com)