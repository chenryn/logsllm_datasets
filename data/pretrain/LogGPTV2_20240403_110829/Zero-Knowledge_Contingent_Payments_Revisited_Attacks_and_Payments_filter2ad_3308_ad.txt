focus on attacks that allow us to compute a single coefficient cj.
Choosing τ as one of the roots of Z In the correct CRS genera-
tion, τ is chosen at random in the field Fr . It turns out that if one
selects τ as one of the roots of Z (x ), then τ is also the root of all the
polynomials A, B, C except for one of them, say Bj (x ), for which
Bj (τ ) (cid:44) 0. In this case the component πB of the proof produced by
the prover reveals the value γj = cjϕBP2 which allows to recover cj
since it can only assume a binary value. This attack is not detected
in libsnark on the prover side (it would be easily detected by check-
ing the public key pk and see if it contains the identity in either
G1 or G2, but this check is not performed in libsnark). However
the attack does not work in the “Pay-to-Sudoku” ZKCP for a very
interesting reason. The prover code actually produces the “wire
value leaking” proof πB without an error, but then before sending
it out to the Verifier, the PtS code has the Prover run a verification
of its own proof π. This verification fails because the polynomial
H (x ) is computed by dividing via the polynomial Z (x ) and so when
evaluated at τ the QAP divisibility check fail. Moreover, because
of an optimization step of the verification procedure that does not
expect to compute a pairing operation where the input in G2 is the
identity, the proof fails even before getting to the QAP divisibility
check (this will happen in the verification equation since Z (τ ) = 0
implies that vkZ = 0P2 = 0 ∈ G2 and this value is placed in the G2
pairing input of one of the verification equations).
Setting all the pk eqal to the identity, except for one
wire This is the attack that works. The attack is described in
B,i
B, j
A, pkC , pk′
detail below, but here we give an informal explanation. Here τ is
selected at random, but it is not used to evaluate the polynomials.
Similar to the attack above, the malicious verifier will set all the
pkA, pk′
C ∈ G1 equal to 0 instead of setting them as the
evaluation “in the exponent” of the polynomials A, C evaluated at
τ. Similarly pkB,i = 0 ∈ G2 and pk′
= 0 ∈ G1 for all i (cid:44) j and
pkB, j = φBP2, pk′
= αBφBP1 for known αB , φB. By setting the
pk, pk′ values this way, the proof π will reveal the value γj as above,
and therefore the value cj. Since the prover checks its own proof
before releasing it, we need to make sure that the proof verifies. We
do that by setting pkH,i = 0 ∈ G1 which will force the value πH
produced by the prover to be πH = 0 ∈ G1. Moreover since all the
identities are now only in the group G1, the error caused by the
optimization in the libsnark implementation will not appear and
indeed the proof is produced by the Prover (seller) and sent out to
the Verifier (buyer), who will recover the value cj.
More in details:
Public Parameters: Both the buyer and the prover get the
public parameters and pp := (r , e, P1, P2, G1, G2, GT , C)
which include the description of the circuit C.
Key Generation: The buyer takes the circuit C : Fn
r →
r and outputs a proving key pk and a verification key vk as
Fℓ
follows:
(1) Honestly computes (A, B, C, Z ) with respect to the cir-
i =0, C :=
i =0, B := {Bi (x )}m
r × Fh
cuit C, where A := {Ai (x )}m
{Ci (x )}m
i =0.
Now he extends A, B, C via
Am+1 = Am+2 = Am+3 = 0,
Bm+1 = Bm+2 = Bm+3 = 0,
Cm+1 = Cm+2 = Cm+3 = 0.
$← Fr .
:= 0 ∈ G1,
:= 0 ∈ G1 for all i (cid:44) j and
= αBφBP1,
(2) Sample τ , φA, φB , αA, αB , αC , β, γ
(3) For i = 0, . . . , m + 3, let
pkA,i := 0 ∈ G1, pk′
:= 0 ∈ G1,
A,i
pkB,i := 0 ∈ G2 for all i (cid:44) j and pkB, j := φBP2,
pk′
B,i
pk′
B, j
pkC,i := 0 ∈ G1, pk′
pkK,i := 0 ∈ G1 for all i (cid:44) j, pkK, j := βφBP1.
For i = 0, . . . , d let pkH,i := 0 ∈ G1, and set
B , pkC , pk′
pk := (pkA, pk′
C , pkK , pkH ).
(4) Let vkA := αAP2, vkB := αBP1, vkC := αCP2
:= γ βP1, vk
vkγ := γP2, vk
:= γ βP2
2
γ β
{vkIC,i}n
vkZ := Z (τ )φAφBP2,
i =0 := {0 ∈ G1}n
i =0
and set
2
vk := (vkA, vkB , vkC , vkγ , vk
γ β , vkZ , vkIC ).
A, pkB , pk′
1
γ β , vk
1
γ β
C,i
(5) Output (pk, vk )
It is not hard to see that all the verification equations are satisfied,
and that the proof leaks the value cj. If used against the PtS code
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA236for contingent payments for Sudoku solutions, this attack allows
to find out the value for a Sudoku cell with probability 1/9. We
provide an implementation for the attack above; see Section 5.1 for
more details.
3.3 Countermeasures
In this section we show some possible countermeasures to our
attack above.
Checking the CRS. As already discussed in the original paper
on QSP/QAP [29] the prover can check that the CRS is “correctly
formed" and in this case the protocol is witness indistinguishable (WI)
[27]. In the QAP-based SNARK described in the previous section, it
is sufficient that the prover/seller checks that
• The polynomials A, B, C, Z are well formed with respect to
the circuit C.
• The elements pkAm+1, pk′
are
not equal to 0 ∈ G1 and the element pkBm+2 is not equal to
0 ∈ G2
• All the elements pkH,i are not 0 ∈ G1.
• The element vkZ is such that vkZ (cid:44) 0 ∈ G2.
, pkCm+3, pk′
, pk′
Am+1
Bm+2
Cm+3
since this will guarantee that the proof is a uniformly distributed
random value no matter what witness is used (see [29] ). This could
be a good option for some applications of ZKCP, but unfortunately
not for the PtS application since a Sudoku puzzle typically has only
one solution and witness indistinguishability guarantees only that
proofs “look the same" no matter what witness is used in the case
that there are two or more such witnesses. It does not guarantee
that no knowledge is leaked about a unique witness.
Subversion Resistant ZK. In a recent paper Bellare et al. introduce
the notion of Subversion Zero Knowledge [7], i.e. the ability to
prove ZK even when the CRS is maliciously selected by the verifier.
Note that given some well known impossibility results [30, 31], the
notion of ZK obtained in this case is somewhat weak (ZK does not
hold with respect to arbitrary auxiliary inputs the verifier might
have). One could then run a ZKCP with a subversion resistant ZK
protocol.
The proposed solution in [7] is not a SNARK (the proof is not
succinct), but it is not hard to see that their techniques extend to
the original QSP/QAP protocol in [29]. Indeed subversion-ZK can
be obtained as long as the above “WI checks" are performed and
the value τ can be extracted by the simulator from the Verifier
when it produces the CRS. Following the approach in [7] one could
use a “knowledge of exponent" type of assumption to extract τ
after checking that each pkH,i is correct, i.e pkH,i = τ iP1. In the
original QSP/QAP protocol in [29], where G1 = G2, this can be
checked using the bilinear map by checking that e (P1, pkH,i ) =
e (pkH,1, pkH,i−1) for all i. The above intuition is actually formalized
in [28] (a different subversion-ZK SNARK is presented in [1]).
Note that this check requires the computation of m bilinear maps,
a much more expensive task than the simple checks required for WI.
Moreover it is not clear if those techniques extend to Pinocchio [40],
the optimized version of the QSP/QAP protocol used by Libsnark
[8], since in that case G1 (cid:44) G2 and the above check cannot be
performed. Our experimental results suggests that running the
subversion-resistant checks of [28] for the pay-to-sudoku example
would take more than an hour on our benchmark machine. See the
extended version of this paper for full details.
So to summarize, one could obtain (a weak non-aux input notion
of) zero-knowledge by using subversion resistant ZK, but it would
require major changes in the current implementation of ZKCP
protocols, and increase the computation required of the Prover.
Distributed Generation of the CRS. Another possible solution
is to have buyer and seller run a two-party secure computation
protocol to compute the CRS together. Note that due to the algebraic
structure of the CRS, this could be done via a much more efficient
ad-hoc protocol, rather than say a generic solution such as Yao’s
protocol. A similar approach was followed by the designers of
Zcash [9, 19] to remove a trusted generation of the CRS in their the
QAP-based SNARKs4.
Using Contingent Payments for Services. At the end the best
solution in our opinion is to use the protocol for ZK Contingent
Service Payments that we describe in the Section 4.3. In contrast to
the protocol of [28] that would take an hour to run, this protocol
adds less than a minute to the prover’s runtime. See the extended
version of this paper for full details.
4 CONTINGENT SERVICE PAYMENTS
In this section we discuss Contingent Payments for services such as
auditing. Consider for example the case where Alice (the seller) is a
data storage company, and Bob (the buyer) is a customer. Bob will
store his files with Alice, and will pay her for this service. Assume
that the contract between Bob and Alice is that periodically Alice
will prove to Bob that his files are all correctly stored, and upon
that proof Bob will pay the contracted rent.
There are several cryptographic protocols that allow a data stor-
age provider to efficiently prove the integrity of the stored files to
a customer. These are known under the name of Proofs of Retriev-
ability (PoR) [32] and they all work by requiring that the prover
shows the possession of a certain number of blocks previously
authenticated by the client5.
This can be achieved easily using a smart contract over a blockchain
with a sufficiently rich scripting language. The client simply posts
a transaction that pays whoever shows possession of such authen-
ticated blocks. When the server posts those blocks, it will receive
payment and the client will be assured all its files are still correctly
stored.
But it does not work using the generic blueprint for ZKCP over
Bitcoin described earlier. Indeed that blueprint requires the Server
to prove possession of such blocks during the offline phase, but at
this point the client has the desired knowledge (the server knows
those blocks, therefore it must know the entire file) without having
paid for it, and indeed the client does not have to post the payment
transaction on the Bitcoin blockchain. The reason is that the ZKCP
4 We also point out that the CRS in their case is an “extended" version of the Pinocchio
CRS, where both τ i P1 and τ i P2 appear in the CRS. This allows anybody to verify the
correctness of the CRS via bilinear maps. Moreover, even if this CRS was computed by
a single malicious party, rather than distributively, subversion ZK is guaranteed since
the value τ can be extracted via a “knowledge of exponent" type of assumption.
5 Trivially the client can ask the prover to send back all the data originally stored and
authenticated by the client, but this is not efficient. PoR protocols allow the server to
prove that all the data is there by showing only a small number of blocks authenticated
by the client (see appendix).
Session A5:  CryptocurrencyCCS’17, October 30-November 3, 2017, Dallas, TX, USA237blueprint is designed for the sale of digital goods, but not digital
services. In the ZKCP protocol described earlier the prover proves
possession of a certain string, without revealing it, and the payment
is contingent on the disclosure of the string. But in this case it’s the
proof of possession itself that is the valuable “service” desired by
the buyer.
In the following we show how to design a ZKCP for digital
services such as auditing and the other applications discussed in
the Introduction.
4.1 Defining ZKCP for Services (ZKCSP)
We are looking for a protocol where a server A proves to a client
B that he (the server) knows s such f (s) = 1 for an efficiently
: {0, 1}∗ → {0, 1} and needs
computable verification function f
to be paid for this information. Informally the properties that we
would like to have are
• If a possibly malicious ˆA is paid then ˆA must “known” a value
s such that f (s) = 1;
• If a possibly malicious ˆB does not pay then ˆB has learned no
information
• additionally, a possibly malicious ˆB who pays, learns only
that A knows s such that f (s) = 1 and nothing else.
The latter condition can be relaxed in some settings, but by enforc-
ing it we really limit the knowledge disclosure from A to B to a
minimum.
We use a trusted party T which models a blockchain. T maintains
a ledger of all the “coin balances” of each party. Moreover T accepts
messages from A and B of only two types, and will execute the
instructions honestly:
Contingent Payments from B which are of the form
Transfer m of my coins to a party who publishes x such
that when you run this program P on x you get P (x ) = 1
In this case T checks that B has more than m coins and if
so accepts the message and publishes it on the blockchain,
otherwise it rejects it.
Redemption Payments from A which are of the form
Transfer m coins to my account since I am publishing x
such that when you run P on x you get P (x ) = 1
In this case T checks that there is a previously accepted
Contingent Payment message that refers to this program
P, and that P (x ) = 1. If so it will posts the message to the
blockchain and will deduct m coins from the balance of the
party B who posted the message, and adds has those m coins
to the balance of A.
A Zero-Knowledge Contingent Service Payment (ZKCSP) pro-
tocol is a three party protocol defined by the interactive machines
A, B,T where A runs on a private input s, and all parties run on
public input a function f . We define the view of B, V iew ˆB (s, f ) as
his coin tosses together with all the messages exchanged during
the protocol:
V iew ˆB (s, f ) :=
[Coins ˆB||Messaдes[A(s, f ), ˆB( f ),T ( f )]||
Out (A(s, f ), ˆB( f ),T ( f )]
We say that (A, B,T ) is a secure ZKCSP protocol if the following
conditions are satisfied (all parties run on a security parameter 1n)
Extraction For any possibly malicious efficient ˆA, if at the end
of the protocol ˆA’s balance increases with non-negligible
probability, then there exists an efficient extractor Ext ˆA
,