concolic execution. When the fuzzing component has gone through a
predetermined amount (proportional to the input length) of mutations without
identifying new state transitions, we consider it “stuck”. Driller then retrieves the
inputs that the fuzzer has deemed “interesting” in the current compartment and
invokes the concolic execution engine on them.
The fuzzer identifies inputs as interesting if one of two conditions holds:
The path that the input causes the application to take was the first to trigger
some state transition.
The path that the input causes the application to take was the first to be
placed into a unique “loop bucket”.
选择性混合执行
1765
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
When Driller determines that the fuzzer is unable to find additional state
transitions, the concolic execution engine is invoked. The concolic execution
engine is used to leverage a symbolic solver to mutate existing inputs that reach
but fail to satisfy complex checks into new inputs that reach and satisfy such
checks.
When Driller invokes the concolic execution engine, it passes all of the
“interesting” inputs that were identified by the fuzzing engine. Each input is traced,
symbolically, to identify state transitions that the fuzzing engine was unable to
satisfy. When such a transition is identified, the concolic execution engine
produces input that would drive execution through this state transition.
After the concolic execution engine finishes processing the provided inputs, its
results are fed back into the fuzzing engine’s queue and control is passed back to
the fuzzing engine.
Concolic Execution
We leveraged angr for Driller’s concolic execution engine. The engine is based on
the model popularized and refined by Mayhem and S2E.
Driller’s symbolic memory model can store both concrete and symbolic values. It
uses an index-based memory model in which read addresses may be symbolic,
but write address are always concretized. This approach, popularized by Mayhem,
is an important optimization to keep the analysis feasible.
Limitations
The traditional approach to concolic execution involves beginning concolic
execution from the beginning of a program and exploring the path state with the
symbolic execution engine to find as many bugs as possible. However, this
approach suffers from two major limitations.
First, concolic execution is slow. Specifically, the latter operation involves the
solution of an NP-complete problem, making the generation of potential
inputs time-consuming.
Worse, symbolic execution suffers from the state explosion problem. The
number of paths grows exponentially as the concolic execution engine
1766
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
explores the program.
Concolic Execution in Driller
In most cases, most of the work is offloaded from the concolic execution engine to
the fuzzer, which will find many paths quickly, letting the concolic engine just work
on solving the harder constraints.
Pre-constrained Tracing
A key factor in the effectiveness of this approach is that it allows Driller to
avoid the path explosion inherent in concolic exploration, because only
the path representing the application’s processing of that input is
analyzed. When Driller comes upon a conditional control flow transfer, it
checks if inverting that condition would result in the discovery of a new
state transition. If it will, Driller produces an example input that will drive
execution through the new state transition instead of the original control
flow. After producing the input, Driller continues following the matching
path to find additional new state transitions.
Input Preconstraining
Driller uses preconstraining to ensure that the results of the concolic
execution engine are identical to those in the native execution while
maintaining the ability to discover new state transitions. In preconstrained
execution, each byte of input is constrained to match each actual byte
that was output by the fuzzer. When new possible basic block transitions
are discovered, the preconstraining is briefly removed, allowing Driller to
solve for an input that would deviate into that state transition.
Limited Symbolic Exploration
This symbolic exploration stub explores the surrounding area of the state
transition until a configurable number of basic blocks has been traversed
by the explorer. Once this number of blocks has been discovered, Driller
concretizes inputs for all paths discovered by the explorer.
Re-randomization
Once a vulnerability is discovered, we use symbolic execution to trace
crashing inputs and recover input bytes that need to satisfy dynamic
checks posed by the target binary. By inspecting the symbolic state at
crash time and finding the relationships between the application’s output
1767
8.26 Driller: Augmenting Fuzzing Through Selective Symbolic Execution
and the crashing input, Driller can determine the application’s challenge-
response protocol.
1768
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
8.27 Firmalice - Automatic Detection of
Authentication Bypass Vulnerabilities in
Binary Firmware
paper slides video
简介
这篇文章提出了 Firmalice，一种二进制分析框架，以支持对嵌入式设备上所运行的
固件进行分析。Firmalice 构建在符号执行引擎之上，并且提供了程序切片之类的技
术来提高其可扩展性。此外，Firmalice 构建了一种新型的认证旁路漏洞模型，基于
攻击者的能力来确定执行特权操作所需要的输入。
Detecting authentication bypasses in firmware is challenging for several reasons:
The source code of the firmware is not available.
Firmware often takes the form of a single binary image that runs directly on
the hardware of the device, without an underlying operating system.
Embedded devices frequently require their firmware to be cryptographically
signed by the manufacturer, making modification of the firmware on the
device for analysis purposes infeasible.
认证旁路漏洞
Many embedded devices contain privileged operations that should only be
accessible by authorized users . To protect these privileged operations, these
devices generally include some form of user verification. This verification almost
always takes the form of an authentication of the user’s credentials before the
privileged functionality is executed.
The verification can be avoided by means of an authentication bypass attack.
Authentication bypass vulnerabilities, commonly termed “backdoors,” allow an
attacker to perform privileged operations in firmware without having knowledge of
the valid credentials of an authorized user.
1769
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
To reason about these vulnerabilities, we created a model based on the concept
of input determinism . Our authentication bypass model specifies that all
paths leading from an entry point into the firmware to a privileged operation must
validate some input that the attacker cannot derive from the firmware image itself
or from prior communication with the device. In other words, we report an
authentication bypass vulnerability when an attacker can craft inputs that lead the
firmware execution to a privileged operation.
方法概述
The identification of authentication bypasses in firmware proceeds in several
steps. At a high level, Firmalice loads a firmware image, parses a security policy,
and uses static analysis to drive a symbolic execution engine. The results from
this symbolic execution are then checked against the security policy to identify
violations.
Firmware Loading. Before the analysis can be carried out, firmware must be
loaded into our analysis engine.
Security Policies. Firmalice takes the privileged operation , described
by a security policy, and identifies a set of privileged program points ,
which are points in the program that, if executed, represent the privileged
operation being performed.
Static Program Analysis. This module generates a program dependency
graph of the firmware and uses this graph to create an authentication
slice from an entry point to the privileged program point.
Symbolic Execution. The symbolic execution engine attempts to find paths
that successfully reach a privileged program point .
Authentication Bypass Check. This module uses the concept of input
determinism to determine whether the state in question represents the use
of an authentication bypass vulnerability.
1770
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
The example is a user-space firmware sample with a hardcoded backdoor, wihch
is the check in lines 2 and 3. The security policy provided to Firmalice is: “The
Firmware should not present a prompt for a command (specifically, output the
string "Command:") to an unauthenticated user.”
Firmalice first loads the firmware program and carries out its Static Program
Analysis. This results in a control flow graph and a data dependency graph. The
latter is then used to identify the location in the program where the string
1771
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
"Command:" is shown to the user. This serves as the privileged program point for
Firmalice’s analysis.
Firmalice utilizes its Static Program Analysis module to create an authentication
slice to the privileged program point. The extracted authentication slice is then
passed to Firmalice’s Symbolic Execution engine. This engine explores the slice
symbolically, and attempts to find user inputs that would reach the privileged
program point. In this case, it finds two such states: one that authenticates the
user via the backdoor, and one that authenticates the user properly.
As these privileged states are discovered, they are passed to the Authentication
Bypass Check module. In this case, the component would detect that the first
state (with a username of “GO” and a password of “ON”) contains a completely
deterministic input, and, thus, represents an authentication bypass.
固件加载
Firmware takes one of two forms:
user-space firmware. Some embedded devices actually run a general-
purpose OS, with much of their functionality implemented in user-space
programs. All of the OS primitives, program entry points, and library import
symbols are well-defined.
Binary-blob firmware. Firmware often takes the form of a single binary image
that runs directly on the bare metal of the device, without an underlying
operating system. OS and library abstractions do not exist in such cases, and
it is generally unknown how to properly initialize the runtime environment of
the firmware sample, or at what offset to load the binary and at what address
to begin execution.
Disassembly and Intermediate Representation
Firmalice supports a wide range of processor architectures by carrying out its
analyses over an intermediate representation (IR) of binary code.
Base Address Determination
1772
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
Firmalice identifies the expected location of a binary-blob firmware in memory by
analyzing the relationship between jump table positions and the memory access
pattern of the indirect jump instructions.
Entry Point Discovery
Firmalice attempts to automatically identify potential execution entry points:
First, Firmalice attempts to identify functions in the binary blob.
Next, Firmalice creates a coarse directed call graph from the list of functions,
and identifies all the weakly-connected components of this graph. Any root
node of a weaklyconnected component is identified as a potential entry point.
安全策略
Firmalice requires a human analyst to provide a security policy. For our purposes,
a security policy must specify what operations should be considered privileged.
When provided a security policy, Firmalice analyzes the firmware in question to
convert the policy into a set of privileged program points . This set of
program points is then utilized by Firmalice in its analysis to identify if the
execution can reach the specified program point without proper authentication.
The policies that Firmalice supports:
Static output. A security policy can be specified as a rule about some static
data the program must not output to a user that has not been properly
authenticated.
Firmalice searches the firmware for the static data and utilizes its data
dependency graph to identify locations in the program where this data
can be passed into an output routine.
Behavioral rules. Another policy that Firmalice supports is the regulation of
what actions a device may take without authentication.
Firmalice analyzes its control flow graph and data dependency graph for
positions where an action is taken that matches the parameters specified
in the security policy.
Memory access. Firmalice accepts security policies that reason about access
to absolute memory addresses.
1773
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
Firmalice identifies locations in the data dependency graph where such
memory locations are accessed.
Direct privileged program point identification. The privileged program points
can be specified directly as function addressed in the security policy.
静态程序分析
The identification of privileged program points specified by a security policy, and
the creation of backward slices leading to them, requires the use of a program
dependency graph (PDG) to reason about the control and data flow required to
arrive at a specific point in the program. The program dependency graph
comprises a data dependency graph (DDG) and a control dependency graph
(CDG).
Control Flow Graph
The first step in creating a PDG is the creation of a CFG. Firmalice creates a
context-sensitive CFG by statically analyzing the firmware, starting from each of
the entry points and looking for jump edges in the graph.
To increase the precision of its CFG, Firmalice utilizes forced execution to
systematically explore both directions of every conditional branch. When it
encounters a computed or indirect jump, Firmalice can leverage its symbolic
execute engine to reason about the possible targets of that jump.
Control Dependency Graph
We use a context sensitivity of 2 when generating the CDG, which allows
Firmalice to reason about not only the basic block that needs to execute so that a
given statement is reached, but also the call context from which that basic block
must be executed. The CDG is generated via a straightforward transformation of
the CFG.
Data Dependency Graph
1774
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
Firmalice adopts an existing, worklist-based, iterative approach to data flow
analysis. The approach is an inter-procedural data flow analysis algorithm that
uses def-use chains, in addition to use-def chains, to optimize the worklist
algorithm.
Backward Slicing
Using the PDG, Firmalice can compute backward slices. That is, starting from a
given program point, we can produce every statement on which that point
depends.
符号执行引擎
The implementation of this module of Firmalice follows ideas presented in
Mayhem, adding support for symbolic summaries of functions, to automatically
detect common library functions and abstract their effects on the symbolic state.
Symbolic State and Constraints
Firmalice’s symbolic analysis works at the level of symbolic states . Whenever
a path reaches the privileged program point, its associated state is labeled as a
privileged state and passed to the Authentication Bypass Check module for
further analysis, based on constraint solving.
Symbolic Summaries
Firmalice adopts the concept of “symbolic summaries”, which involves
descriptions of the transformation that certain commonly-seen functions have on a
program state. A symbolic summary acts in the same way as a binary instruction:
it consumes an input state and produces a set of output states.
When Firmalice symbolically calls a function for the first time, the analysis is
paused and the function-testing phase begins. Firmalice first attempts to run the
function with the test case states. If all of the test cases of a symbolic summary
pass, Firmalice replaces the entry point to the function in question with that
symbolic summary, and continues its analysis. Any subsequent jumps to that
1775
8.27 Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in
Binary Firmware
address will instead trigger execution of the symbolic summary. If no symbolic
summary is identified as the right summary for a function, the function is analyzed
normally.
Lazy Initialization
Firmalice adopts a lazy approach to firmware initialization. When the execution
engine encounters a memory read from uninitialized memory, it identifies other
procedures that contain direct memory writes to that location, and labels them as
initialization procedures . If an initialization procedure is identified, the
state is duplicated: one state continues execution without modification, while the
other one runs the initialization procedure before resuming execution.
认证旁路检查
Given an privileged state from the Symbolic Execution engine, the
Authentication Bypass Check module identifies the input and output from/to the