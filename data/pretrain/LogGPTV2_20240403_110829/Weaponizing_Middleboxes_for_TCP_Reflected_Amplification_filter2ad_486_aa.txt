title:Weaponizing Middleboxes for TCP Reflected Amplification
author:Kevin Bock and
Abdulrahman Alaraj and
Yair Fax and
Kyle Hurley and
Eric Wustrow and
Dave Levin
Weaponizing Middleboxes for 
TCP Reflected Amplification
Kevin Bock, University of Maryland; Abdulrahman Alaraj, University of Colorado 
Boulder; Yair Fax and Kyle Hurley, University of Maryland; Eric Wustrow, 
University of Colorado Boulder; Dave Levin, University of Maryland
https://www.usenix.org/conference/usenixsecurity21/presentation/bock
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Weaponizing Middleboxes for TCP Reﬂected Ampliﬁcation
Kevin Bock∗ Abdulrahman Alaraj† Yair Fax∗ Kyle Hurley∗ Eric Wustrow† Dave Levin∗
∗University of Maryland
†University of Colorado Boulder
Abstract
Reﬂective ampliﬁcation attacks are a powerful tool in the
arsenal of a DDoS attacker, but to date have almost exclu-
sively targeted UDP-based protocols. In this paper, we demon-
strate that non-trivial TCP-based ampliﬁcation is possible and
can be orders of magnitude more effective than well-known
UDP-based ampliﬁcation. By taking advantage of TCP-non-
compliance in network middleboxes, we show that attackers
can induce middleboxes to respond and amplify network traf-
ﬁc. With the novel application of a recent genetic algorithm,
we discover and maximize the efﬁcacy of new TCP-based
reﬂective ampliﬁcation attacks, and present several packet
sequences that cause network middleboxes to respond with
substantially more packets than we send.
We scanned the entire IPv4 Internet to measure how many
IP addresses permit reﬂected ampliﬁcation. We ﬁnd hundreds
of thousands of IP addresses that offer ampliﬁcation factors
greater than 100×. Through our Internet-wide measurements,
we explore several open questions regarding DoS attacks,
including the root cause of so-called “mega ampliﬁers”. We
also report on network phenomena that causes some of the
TCP-based attacks to be so effective as to technically have
inﬁnite ampliﬁcation factor (after the attacker sends a constant
number of bytes, the reﬂector generates trafﬁc indeﬁnitely).
We have made our code publicly available.
1 Introduction
Volume-based distributed denial of service (DDoS) attacks
operate by producing more trafﬁc at a victim’s network than
its capacity permits, resulting in decreased throughput and
limited availability. An important component in the arsenal of
a DDoS attacker is the ability to amplify its trafﬁc. Instead of
sending trafﬁc directly to a victim V , the attacker spoofs V ’s
source address, sends b bytes to some ampliﬁer host A, who
then “replies” to V with α· b bytes for some α > 1. In this
manner, the attacker hides its IP address(es) from the victim,
making it difﬁcult to simply ﬁlter the attack trafﬁc at a ﬁrewall,
and increases its effective capacity by the ampliﬁcation factor
α.
Some reﬂected ampliﬁcation attacks can elicit impressive
ampliﬁcation factors. Among the most notable, DNS has been
shown to have an ampliﬁcation factor of 54, while NTP offers
up to 556.9 [32]. Misconﬁgured Memcached [37] servers can
Figure 1: The maximum ampliﬁcation factor we obtained per
IPv4 address, based on several Internet-wide scans. (Note: the
axes are log-scale.)
provide ampliﬁcations over 51,000 [8, 40], and were used
against Github in 2018 in the largest known DDoS attack to
date, achieving 1.35 Tbps at peak [14].
To date, almost all reﬂected ampliﬁcation attacks have lever-
aged UDP. In fact, to the best of our knowledge, there are no
known TCP-based reﬂected ampliﬁcation attacks that send
beyond a single SYN packet.1 This is because such attacks ap-
pear virtually impossible: to go beyond the SYN would seem
to require an attacker to (1) guess the ampliﬁer’s 32-bit ini-
tial sequence number (ISN) in their SYN+ACK packet2 and
(2) prevent the victim from responding to the ampliﬁer with a
RST [23].
In this paper, we show that it is indeed possible to launch
reﬂected ampliﬁcation attacks with TCP beyond a single SYN
packet without having to guess initial sequence numbers. The
key insight is to not elicit responses from the destination, but
rather from middleboxes on the path to the destination.
Many middleboxes (especially nation-state censors) inject
block pages or other content (such as RST packets) [13, 31,
42, 46] into established TCP connections when they detect
forbidden requests. Moreover, because middleboxes cannot
rely on seeing all packets in a connection [7], they are often
designed to operate even when they see only one side of
the connection. Our attacks tend to leverage non-compliant
middleboxes that respond without having to observe both
ISNs. Our measurements show that such middleboxes are
surprisingly common on today’s Internet, and that they can
1We discuss non-reﬂected TCP-based ampliﬁcation attacks in Section 8.
2We will use + to denote when a single packet has multiple TCP ﬂags set.
USENIX Association
30th USENIX Security Symposium    3345
100101102103104105106107108109100101102103104105106107108Memcached(51,000x)NTP(556.9x)Amplification FactorIP Address Ranklead to ampliﬁcation factors surpassing even many of the best
UDP-based ampliﬁcation factors to date.
We introduce a novel application of a recent network-based
genetic algorithm [6] that discovers sequences of TCP packets
that elicit large ampliﬁcation factors from middleboxes.
We perform a series of IPv4-wide scans of the Internet
using ZMap [10], to identify how many hosts can serve as
ampliﬁers and quantify their ampliﬁcation factor. Figure 1
provides an overview of the maximum ampliﬁcation factor we
were able to get from all IP addresses after several Internet-
wide scans. We ﬁnd 386,187 IP addresses that yield an am-
pliﬁcation factor of at least 100×; 97,079 IP addresses that
elicit a larger ampliﬁcation factor than the infamous NTP
attack [32], and over 192 IP addresses that responded with a
higher ampliﬁcation factor than Memcached [8].
Compared to SYN-only reﬂective ampliﬁcation attacks,
our attack identiﬁes two orders of magnitude more IP ad-
dresses [15, 16], and we also ﬁnd ampliﬁcation factors above
2,500×.
In fact, we ﬁnd many hosts that effectively have an inﬁnite
ampliﬁcation: in response to one or two attack packets, these
machines respond at their full capacity indeﬁnitely (barring
packet drops) without any additional attacker involvement.
Czyz et al. [9] observed similar behavior when studying NTP
ampliﬁcation, and called such hosts “mega-ampliﬁers.” We at
last answer the open question of why some hosts provide such
abnormally high ampliﬁcation factors: we show that many
are actually sustained by the victims themselves, and others
are due to routing loops.
Collectively, our results show that there is signiﬁcant, un-
tapped potential for TCP-based reﬂective ampliﬁcation at-
tacks. To enable this new area of study, we have made our
code publicly available at https://geneva.cs.umd.edu/
weaponizing.
Contributions We make the following contributions:
• We introduce a novel application of genetic algorithms to
discover and maximize the efﬁcacy of TCP-based reﬂective
ampliﬁcation attacks, and identify 5 attacks in total.
• We scan the IPv4 Internet to determine how many IP ad-
dresses can be used as TCP-based ampliﬁers, and their
ampliﬁcation factor.
• We conﬁrm that these ampliﬁed responses typically come
from network middleboxes, including government censor-
ship infrastructure and corporate ﬁrewalls.
• We resolve the open question of the root causes of “mega-
ampliﬁers.” We attribute them to inﬁnite routing loops and
what we call “victim-sustained ampliﬁcation”, in which
victims’ default responses (RSTs) actually induce the re-
ﬂector to send more data without additional effort from the
attacker, leading to virtually inﬁnite ampliﬁcation.
The rest of this paper is organized as follows. We review
background in §2. In §3, we present novel techniques for dis-
covering new TCP-based ampliﬁcation attacks, and the results
from applying these techniques to live censoring middleboxes.
Next, we describe our methodology (§4) and results (§5) from
scanning the entire IPv4 Internet with our newfound attacks.
We explore “mega-ampliﬁers” in §6. We discuss ethical con-
siderations and our responsible disclosure in §7, related work
in §8, potential countermeasures in §9, and conclude in §10.
2 Background
Here, we deﬁne our threat model and review details of TCP
and in-network middleboxes that are relevant to our attacks.
Threat Model To maximize the applicability of our attacks,
we make very few assumptions about the adversary’s capa-
bilities. In particular, we assume a completely off-path at-
tacker: it cannot eavesdrop, intercept, drop, or alter any pack-
ets other than the ones destined to it. We also assume that the
attacker has the ability to source-spoof its victim’s IP address.
This would not be possible if the attacker’s network performs
egress ﬁltering—that is, if it veriﬁed that the packets leav-
ing its network had IP addresses originating from within its
network—but egress ﬁltering is still not yet widely deployed
in practice [4, 15, 39].
TCP Basics To ensure in-order delivery of bytes, both ends
of a TCP connection assign 32-bit sequence numbers to the
bytes they send. TCP connections begin with a three-way
handshake, during which the end-hosts inform one another of
their (random) initial sequence number (ISN). In a standard
three-way handshake, the client sends a SYN packet contain-
ing its ISNclient, to which the server responds with a SYN+ACK
that contains both its own ISNserver and ISNclient + 1 to ac-
knowledge the client’s ISN. Finally, the client acknowledges
ISNserver by including it (plus one) in an ACK packet. Follow-
ing this, a typical client sends a PSH+ACK packet containing
its application-layer data (e.g., an HTTP GET request).
For a TCP connection to complete, the ISNs must be ac-
knowledged with perfect accuracy. If the client were to send
an ACK acknowledging anything but ISNserver + 1, the server
would not accept the connection.
TCP-based Reﬂection Attacks
In a reﬂection attack, an
adversary sends to a destination r a packet that spoofs the
source IP address to be that of victim v. As a result, r will
believe v sent the packet, and will send its response to v.
Reﬂection can be useful to hide the attacker’s identity from
the victim, and is commonly used when the reﬂector r is also
an ampliﬁer, sending more data to v than r received from the
attacker.
Note that an adversary within our threat model cannot fea-
sibly complete a three-way handshake in a reﬂection attack.
The adversary would send the SYN while source-spooﬁng v,
and thus the server’s SYN+ACK—with ISNserver—would be
sent to v, not the attacker. To complete the handshake, the
3346    30th USENIX Security Symposium
USENIX Association
attacker would have to send a source-spoofed ACK, but would
only have 2−32 chance of guessing the correct ISNserver. More-
over, even if the adversary were to guess ISNserver, the victim
(if online) will respond to the server’s spurious SYN+ACK with
a RST, thereby tearing down the connection at the server.
Given these challenges, prior work assumed that TCP-
based reﬂection attacks were limited to the initial handshake,
in which the attacker sends a source-spoofed SYN and does not
try to guess the appropriate ACK, let alone send an application-
layer PSH+ACK [15,16]. Kührer et al. [16] showed that a single
TCP SYN can result in a surprising amount of ampliﬁcation.
Compliant servers amplify a small amount because they re-
transmit SYN+ACKs a handful of times, until they timeout,
receive the appropriate ACK, or receive a RST from the victim.
Kührer et al. also found a few non-compliant machines on
the Internet that respond to SYNs with many more packets,
affording a greater ampliﬁcation [15, 16].
In this work, we discover that middleboxes enable more so-
phisticated TCP-based reﬂected attacks beyond a single SYN.
Compared to prior work, these new middlebox-enabled at-
tacks yield even higher ampliﬁcation rates and provide larger
numbers of ampliﬁers that attackers can use.
Middleboxes A middlebox is an in-network device that sits
on the path between two communicating end-hosts, and can
monitor, ﬁlter, or transform packet streams in-ﬂight. Unlike
traditional network devices like routers and switches, middle-
boxes operate not only on packets’ headers, but also on their
payloads using Deep Packet Inspection (DPI).
Middleboxes have been used for myriad network function-
ality applications [2, 35, 44], including ﬁrewalls. Firewalls
allow administrators to limit what content is viewable by
end-hosts within their networks.
Some of the most widespread and pernicious deployments
of ﬁrewall middleboxes are by nation-state censors, often
in an attempt to suppress access to information. Censoring
middleboxes are typically located at the nation’s borders (or
within the nation’s ISPs), and are commonly deployed at
massive scales so that they may monitor all trafﬁc traversing
the censoring nation-state [3, 24, 45].
Censoring ﬁrewalls typically identify forbidden keywords
or domains in plaintext trafﬁc, DNS requests, or TLS server
name indication (SNI) ﬁelds. Once a censoring middlebox
determines a connection should be censored, it can do so in
different ways: by dropping offending packets [5], injecting
RST packets to tear down the connection [6,42], injecting false
DNS responses [42,46] or—critical to this work—by injecting
block pages in response to forbidden HTTP requests [22, 41].
Middleboxes often track the content of connections across
multiple packets to handle re-ordered or dropped packets.
However, middleboxes may not see packets in both directions.
This is because the Internet can exhibit route asymmetry,
whereby packets between two end-hosts may traverse dif-
ferent paths [26]. Consequently, a middlebox may only see
one side of a TCP connection (e.g., the packets from client
to server). To handle this asymmetry, middleboxes often im-
plement non-compliant or partial TCP reassembly, allowing
them to still block connections even though they don’t see all
of the packets in a connection.
Middleboxes’ resilience to missing packets presents an op-
portunity to attackers: a reﬂecting attacker may not need to
complete the three-way handshake so long as it can convince
the middlebox that the handshake had been completed. Com-
bined with the packets they inject—especially block pages—
middleboxes could be attractive targets for reﬂected ampliﬁca-
tion. In the remainder of this paper, we show packet sequences
that trick middleboxes into responding, and we show that mid-
dleboxes can yield very large ampliﬁcation factors.
3 Discovering TCP-based Reﬂection Attacks
In this section, we present the ﬁrst non-trivial, TCP-based
reﬂected ampliﬁcation attacks. We present a novel way to
automatically discover new ampliﬁcation attacks (§3.1), train
it against a set of censoring middleboxes (§3.2), and report
on the ampliﬁcation attacks we discovered (§3.3).
3.1 Automated Discovery of Ampliﬁcation
Our goal is to identify sequences of packets that will elicit
ampliﬁed responses from middleboxes, without requiring
us to establish a legitimate TCP connection or guess ISNs.
This requires identifying non-compliant TCP behavior. Un-