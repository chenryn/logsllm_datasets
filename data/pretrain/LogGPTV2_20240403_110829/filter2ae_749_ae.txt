            "hash": "0x4c661b558a6a2325aa36c5ce42ece7e3cce0904807a5af8e233083c556fbdebc"
    }
由于 `hash` 可以根据其它值算出来，所以对除 `hash` 外的所有值进行 `RLP` 编码，即可得到签名后的交易内容。
在以太坊的其它节点接受到该交易后，会通过 `RLP` 解码得到对应的值并算出 `hash` 的值。由于椭圆曲线数字签名算法可以在知道 `hash` 和
`s`、`r`、`v`的情况下得到公钥的值、公钥经过 `sha3_256`
加密，后四十位就是账户地址，所以只有在所有参数没有被篡改的情况下，才能还原出公钥，计算出账户地址。因此确认该交易是从这个地址签名的。
根据上述的签名流程，也可以看出，在对应的字段中，缺少了签名时间这一字段，这也许会在区块链落地的过程中带来一定的阻碍。
##### 3.4.2.2 交易签名流程 与 eth_sign签名流程对比
根据官网的描述，`eth_sign` 的实现是 `sign(keccak256("\x19Ethereum Signed Message:\n" +
len(message) + message)))`
这与 `3.4.2.1` 节中交易签名流程有着天壤之别， **所以`eth_sign` 接口并不能实现对交易的签名！**
注：我们的蜜罐未抓取到离线漏洞相关攻击流量，上述攻击细节是知道创宇404区块链安全团队研究后实现的攻击路径，可能和现实中黑客的攻击流程有一定的出入。
### 3.5 蜜罐捕获攻击JSON‐RPC相关数据分析
> 在偷渡漏洞曝光后，知道创宇404团队有针对性的开发并部署了相关蜜罐。 该部分数据统计截止 `2018/07/14`
#### 3.5.1 探测的数据包
对蜜罐捕获的攻击流量进行统计，多个 `JSON-RPC` 接口被探测或利用：
其中 `eth_blockNumber`、`eth_accounts`、`net_version`、`personal_listWallets`
等接口具有很好的前期探测功能，`net_version` 可以判断是否是主链，`personal_listWallets` 则可以查看所有账户的解锁情况。
`personal_unlockAccount`、`personal_sendTransaction`、`eth_sendTransaction`
等接口支持解锁账户或直接进行转账。
可以说，相比于第一阶段的攻击，`后偷渡时代` 针对 `JSON-RPC` 的攻击正呈现多元化的特点。
#### 3.5.2 爆破账号密码
蜜罐在 `2018/05/24` 第一次检测到通过 `unlockAccount` 接口爆破账户密码的行为。截止 `2018/07/14` 蜜罐一共捕获到
`809` 个密码在爆破中使用，我们将会在最后的附录部分给出详情。
攻击者主要使用 `personal_unlockAccount` 接口进行爆破，爆破的 payload 主要是：
    {"jsonrpc":"2.0","method":"personal_unlockAccount","params":["0x96B5aB24dA10c8c38dac32B305caD76A99fb4A36","katie123",600],"id":50}
在所有的爆破密码中有一个比较特殊：`ppppGoogle`。该密码在 `personal_unlockAccount` 和
`personal_sendTransaction` 接口均有被多次爆破的痕迹。是否和[《Microsoft Azure
以太坊节点自动化部署方案漏洞分析》](https://paper.seebug.org/638/)案例一样，属于某厂商以太坊节点部署方案中的默认密码，仍有待考证。
#### 3.5.3 转账的地址
蜜罐捕获到部分新增的盗币地址有：
#### 3.5.4 攻击来源IP
### 3.6 其它的威胁点
正如本文标题所说，区块链技术为金融行业带来了丰厚的机遇，但也招来了众多独行的大盗。本节将会简单介绍在研究偷渡漏洞过程中遇到的其它威胁点。
#### 3.6.1 parity_exportAccount 接口导出账户信息
在 `3.5.1` 节中，蜜罐捕获到对 `parity_exportAccount`
接口的攻击。根据官方手册，攻击者需要输入账号地址和对应的密码，如果正确将会导出以json格式导出钱包。
看过 `1.2`、`1.3` 节中的知识点、偷渡漏洞、后偷渡时代的利用方式的介绍，需要意识到：一旦攻击者攻击成功，私钥将会泄漏，攻击者将能完全控制该地址。
#### 3.6.2 clef 中的 account_export 接口
该软件是 `geth` 中一个仍未正式发布的测试软件。其中存在一个导出账户的接口 `account_export`。
通过 `curl -XPOST http://localhost:8550/ -d '{"id": 5,"jsonrpc": "2.0","method"
: "account_export","params": ["0xc7412fc59930fd90099c917a50e5f11d0934b2f5"]}'
--header "Content-Type: appli cation/json"`
命令可以调用该接口导出相关账号信息。值得一提的是，在接口存在一定的安全机制，需要用户同意之后才会导出账号。
虽然该接口目前仍算安全，但由于不需要密码即可导出keystore文件内容的特性，值得我们持续关注。
### 3.7 后偷渡时代的防御方案
相较于 `3.1` 节已有的防御方案，后偷渡时代更加关注账户和私钥安全。
  1. 对于有被偷渡漏洞攻击的痕迹或可能曾经被偷渡漏洞攻击过的节点，建议将节点上相关账户的资产转移到新的账户后废弃可能被攻击过的账户。
  2. 建议用户不要使用弱口令作为账户密码，如果已经使用了弱口令，可以根据1.2节末尾的内容解出私钥内容，再次通过 `geth account import` 命令导入私钥并设置强密码。
  3. 如节点不需要签名转账等操作，建议节点上不要存在私钥文件。如果需要使用转账操作，务必使用 `personal_sendTransaction` 接口，而非 `personal_unlockAccount` 接口。
## 0x04 总结
在这个属于区块链的风口上，实际落地仍然还有很长的路需要走。后偷渡时代的离线漏洞中出现的 `区块链记录的交易时间不一定是交易签名时间`
这一问题就是落地过程中的阻碍之一。
区块链也为攻击溯源带来了巨大的阻碍。一旦私钥泄漏，攻击者可以在任何地方发动转账。而由于区块链分布式存储的原因，仅仅通过区块链寻找攻击者的现实位置也变得难上加难。
就 `Go Ethereum JSON-RPC` 盗币漏洞而言，涉及到多个方面的多个问题：以太坊底层签名的内容、`geth` 客户端
`unlockAccount`
实现的问题、分布式网络导致的重放问题，涉及的范围之广也是单个传统安全领域较难遇到的。这也为安全防御提出了更高的要求。只有从底层了解相关原理、对可能出现的攻击提前预防、经验加技术的沉淀才能在区块链的安全防御方面做到游刃有余。
虚拟货币价值的攀升，赋予了由算法和数字堆砌的区块链巨大的金融价值，也会让 `盗币者`
竭尽所能从更多的方面实现目标。`金钱难寐，大盗独行`，也许会是这个漏洞最形象的描述。
* * *
**智能合约审计服务**
针对目前主流的以太坊应用，知道创宇提供专业权威的智能合约审计服务，规避因合约安全问题导致的财产损失，为各类以太坊应用安全保驾护航。
知道创宇404智能合约安全审计团队：   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
**区块链行业安全解决方案**
黑客通过DDoS攻击、CC攻击、系统漏洞、代码漏洞、业务流程漏洞、API-Key漏洞等进行攻击和入侵，给区块链项目的管理运营团队及用户造成巨大的经济损失。知道创宇十余年安全经验，凭借多重防护+云端大数据技术，为区块链应用提供专属安全解决方案。
欢迎扫码咨询：
## 参考链接
  1. [What is an Ethereum keystore file?](https://medium.com/@julien.maffre/what-is-an-ethereum-keystore-file-86c8c5917b97)
  2. [Key_derivation_function](https://en.wikipedia.org/wiki/Key_derivation_function)
  3. [15.1. hashlib — Secure hashes and message digests](https://docs.python.org/3/library/hashlib.html)
  4. [对比一下ecdsa与secp256k1-py从私钥生成公钥](https://steemit.com/python/@oflyhigh/ecdsa-secp256k1-py)
  5. [Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC)
  6. [how-to-create-raw-transactions-in-ethereum-part-1-1df91abdba7c](https://medium.com/blockchain-musings/how-to-create-raw-transactions-in-ethereum-part-1-1df91abdba7c)
  7. [椭圆曲线密码学和以太坊中的椭圆曲线数字签名算法应用](https://blog.csdn.net/teaspring/article/details/77834360)
  8. [Web3-Secret-Storage-Definition](https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition)
  9. [Management-APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_unlockaccount)
  10. [RPC: add personal_signTransaction: [tx, pw]](https://github.com/ethereum/go-ethereum/issues/15953)
  11. [Possible BUG - somebody took 50 ETH from my wallet immediately after successful transaction](https://github.com/ethereum/go-ethereum/issues/17011)
  12. [RLP 英文版](https://github.com/ethereum/wiki/wiki/RLP)
  13. [RLP 中文版](https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-RLP)
  14. [Private-network](https://github.com/ethereum/go-ethereum/wiki/Private-network)
  15. [How do I get the raw private key from my Mist keystore file?](https://ethereum.stackexchange.com/questions/3720/how-do-i-get-the-raw-private-key-from-my-mist-keystore-file)
  16. [以太坊源码分析-交易](https://tianyun6655.github.io/2017/09/24/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E4%BA%A4%E6%98%93/)
  17. [Ethereum交易详解](https://github.com/linjie-1/guigulive-operation/wiki/Ethereum%E4%BA%A4%E6%98%93%E8%AF%A6%E8%A7%A3)
  18. [Life Cycle of an Ethereum Transaction](https://medium.com/blockchannel/life-cycle-of-an-ethereum-transaction-e5c66bae0f6e)
  19. [以太坊生态缺陷导致的一起亿级代币盗窃大案](https://mp.weixin.qq.com/s/Kk2lsoQ1679Gda56Ec-zJg)
  20. [揭秘以太坊中潜伏多年的“偷渡”漏洞，全球黑客正在疯狂偷币](https://paper.seebug.org/547/)
  21. [慢雾社区小密圈关于以太坊情人节升级攻击的情报](https://wx.zsxq.com/mweb/views/topicdetail/topicdetail.html?topic_id=48528228854228&user_id=28284511858111)
  22. [以太坊离线钱包](https://www.jianshu.com/p/4c106ccd2aa9)
  23. [以太坊实战之《如何正确处理nonce》](https://blog.csdn.net/wo541075754/article/details/78081478)
## 附录
### 1\. 爆破 unlockAccount 接口使用的密码列表
[密码列表](https://images.seebug.org/archive/password_8545_eth.dat)
* * *