```  
/*----------  
 * Operator selectivity estimation functions are called to estimate the  
 * selectivity of WHERE clauses whose top-level operator is their operator.  
 * We divide the problem into two cases:  
 *              Restriction clause estimation: the clause involves vars of just  
 *                      one relation.  一种是符合WHERE条件的选择性（百分比）。  
 *              Join clause estimation: the clause involves vars of multiple rels.  
 * Join selectivity estimation is far more difficult and usually less accurate  
 * than restriction estimation.  -- JOIN的选择性评估通常没有WHERE条件的选择性准确。  
 *  
 * When dealing with the inner scan of a nestloop join, we consider the  
 * join's joinclauses as restriction clauses for the inner relation, and  
 * treat vars of the outer relation as parameters (a/k/a constants of unknown  
 * values).  So, restriction estimators need to be able to accept an argument  
 * telling which relation is to be treated as the variable.  
在使用nestloop JOIN时，一个表的字段将作为变量，另一个表的字段（及其统计信息）与操作符作为JOIN评估子句。  
 *  
 * The call convention for a restriction estimator (oprrest function) is  
 *  
 *              Selectivity oprrest (PlannerInfo *root,  
 *                                                       Oid operator,  
 *                                                       List *args,  
 *                                                       int varRelid);  
 * 评估选择性需要4个参数:  
 * root: general information about the query (rtable and RelOptInfo lists  
 * are particularly important for the estimator).   plannerinfo信息。  
 * operator: OID of the specific operator in question. 操作符的OID  
 * args: argument list from the operator clause.  操作符子句中的参数列表  
 * varRelid: if not zero, the relid (rtable index) of the relation to  
 * be treated as the variable relation.  May be zero if the args list  
 * is known to contain vars of only one relation.   表示where条件所包含的参数来自哪些relation。  
 *  
 * This is represented at the SQL level (in pg_proc) as  
 *  
 *              float8 oprrest (internal, oid, internal, int4);   在pg_proc数据字典中表示为oprrest指定的函数。  
 *  
 * The result is a selectivity, that is, a fraction (0 to 1) of the rows  
 * of the relation that are expected to produce a TRUE result for the  
 * given operator.  选择性函数的评估结果就是一个百分比。乘以pg_class.reltuples就可以得到记录数。  
 *  
 * The call convention for a join estimator (oprjoin function) is similar  
 * except that varRelid is not needed, and instead join information is  
 * supplied:  
 * JOIN选择性的计算函数与WHERE选择性的计算函数参数有轻微差别，么有varRelid, 增加了join信息的参数。  
 *              Selectivity oprjoin (PlannerInfo *root,  
 *                                                       Oid operator,  
 *                                                       List *args,  
 *                                                       JoinType jointype,  
 *                                                       SpecialJoinInfo *sjinfo);  
 *  
 *              float8 oprjoin (internal, oid, internal, int2, internal);  
 *  
 * (Before Postgres 8.4, join estimators had only the first four of these  
 * parameters.  That signature is still allowed, but deprecated.)  The  
 * relationship between jointype and sjinfo is explained in the comments for  
 * clause_selectivity() --- the short version is that jointype is usually  
 * best ignored in favor of examining sjinfo.  
 *  
 * Join selectivity for regular inner and outer joins is defined as the  
 * fraction (0 to 1) of the cross product of the relations that is expected  
 * to produce a TRUE result for the given operator.  For both semi and anti  (半连接与预连接)  
 * joins, however, the selectivity is defined as the fraction of the left-hand  
 * side relation's rows that are expected to have a match (ie, at least one  
 * row with a TRUE result) in the right-hand side.  
 *  
 * For both oprrest and oprjoin functions, the operator's input collation OID  
 * (if any) is passed using the standard fmgr mechanism, so that the estimator  
 * function can fetch it with PG_GET_COLLATION().  Note, however, that all  
 * statistics in pg_statistic are currently built using the database's default  
 * collation.  Thus, in most cases where we are looking at statistics, we  
 * should ignore the actual operator collation and use DEFAULT_COLLATION_OID.  
 * We expect that the error induced by doing this is usually not large enough  
 * to justify complicating matters.  
 *----------  
```  
4\. join，是joinsel即join的选择性计算函数。  
对应pg_operator.oprjoin  
```  
postgres=# select distinct oprjoin from pg_operator order by 1;  
     oprjoin        
------------------  
 -  
 eqjoinsel  
 neqjoinsel  
 scalarltjoinsel  
 scalargtjoinsel  
 areajoinsel  
 positionjoinsel  
 contjoinsel  
 iclikejoinsel  
 icnlikejoinsel  
 regexeqjoinsel  
 likejoinsel  
 icregexeqjoinsel  
 regexnejoinsel  
 nlikejoinsel  
 icregexnejoinsel  
 networkjoinsel  
 tsmatchjoinsel  
 arraycontjoinsel  
(19 rows)  
```  
5\. hashes  
6\. merges  
hashes和merges表示该操作符是否允许hash join和merge join, 只有返回布尔逻辑值的二元操作符满足这个要求。  
我们在pg_operator这个catalog中也可以查看到对应的介绍：  
Name|	Type|	References|	Description  
---|---|---|---  
oid|	oid|	 - |	Row identifier (hidden attribute; must be explicitly selected)  
oprname|	name|	- | 	Name of the operator  
oprnamespace|	oid|	pg_namespace.oid|	The OID of the namespace that contains this operator  
oprowner|	oid|	pg_authid.oid|	Owner of the operator  
oprkind|	char|	 - |	b = infix ("between"), l = prefix ("left"), r = postfix ("right") 指定操作符在什么位置，例如中间，左侧，右侧  
oprcanmerge|	bool|	 - |	This operator supports merge joins 此操作符是否支持merge join  
oprcanhash|	bool|	 - |	This operator supports hash joins 此操作符是否支持hash join  
oprleft|	oid|	pg_type.oid|	Type of the left operand 操作符左侧的数据类型  
oprright|	oid|	pg_type.oid|	Type of the right operand 操作符右侧的数据类型  
oprresult|	oid|	pg_type.oid|	Type of the result 返回结果的数据类型  
oprcom|	oid	pg_operator.oid|	Commutator of this operator, if any  
oprnegate|	oid|	pg_operator.oid|	Negator of this operator, if any  
oprcode|	regproc|	pg_proc.oid|	Function that implements this operator  
oprrest|	regproc|	pg_proc.oid|	Restriction selectivity estimation function for this operator  
oprjoin|	regproc|	pg_proc.oid|	Join selectivity estimation function for this operator  
## 参考  
1\. http://www.postgresql.org/docs/9.4/static/sql-createoperator.html  
2\. http://www.postgresql.org/docs/9.4/static/xoper-optimization.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")