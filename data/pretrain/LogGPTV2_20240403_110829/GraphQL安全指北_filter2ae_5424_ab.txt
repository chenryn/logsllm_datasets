                        user: user,
                        exp: Math.floor(Date.now() / 1000) + (60 * 60), // 60 seconds * 60 minutes = 1 hour
                    }, 'your secret'),
                };
            }
        }
登录成功后，我们继续把Token设置在请求头中，请求GraphQL的其他接口。这时我们要对ApolloServer进行如下配置：
        const server = new ApolloServer({
            typeDefs: schemaText,
            resolvers: resolverMap,
            context: ({ ctx }) => {
                const token = ctx.req.headers.authorization || '';
                const user = getUser(token);
                return {
                    ...user,
                    ...ctx,
                    ...app.context
                };
            },
        });
实现`getUser`函数：
        const getUser = (token) => {
            let user = null;
            const parts = token.split(' ');
            if (parts.length === 2) {
                const scheme = parts[0];
                const credentials = parts[1];
                if (/^Bearer$/i.test(scheme)) {
                    token = credentials;
                    try {
                        user = jwt.verify(token, JWT_SECRET);
                        console.log(user);
                    } catch (e) {
                        console.log(e);
                    }
                }
            }
            return user
        }
配置好ApolloServer后，在Resolver中校验`user`：
        import { ApolloError, ForbiddenError, AuthenticationError } from 'apollo-server';
        export const blogs = async (_, args, context) => {
            const db = await context.getDb();
            const user = context.user;
            if(!user) {
                throw new AuthenticationError("You must be logged in to see blogs");
            }
            const { blogId } = args;
            const cursor = {};
            if (blogId) {
                cursor['_id'] = blogId;
            }
            const blogs = await db
                .collection('blogs')
                .find(cursor)
                .sort({ publishedAt: -1 })
                .toArray();
            return blogs;
        }
这样我们即完成了通过GraphQL认证的主要代码。继续使用GraphiQL代替前端请求GraphQL登录接口：
得到Token后，设置Token到请求头 完成后续操作。如果请求头失效，则得不到数据：
### **权限控制**
在认证过程中，我们只是识别请求是不是由合法用户发起。权限控制可以让我们为用户分配不同的查看权限和操作权限。如上，我们已经将`user`放入GraphQL
Sever的`context`中。而`context`的内容又是我们可控的，因此`context`中的`user`既可以是`{ loggedIn: true
}`，又可以是`{ user: { _id: 12345, roles: ['user', 'admin'] }
}`。大家应该知道如何在Resolver中实现权限控制了吧，简单的举个例子：
        users: (root, args, context) => {
            if (!context.user || !context.user.roles.includes('admin'))
                throw ForbiddenError("You must be an administrator to see all Users");
            return User.getAll();
        }
## GraphQL注入
> [@gyyyy](https://github.com/gyyyy "@gyyyy")：  
>  有语法就会有解析，有解析就会有结构和顺序，有结构和顺序就会有注入。
前端使用变量构建带参查询语句：
        const id = props.match.params.id;
        const queryUser = gql`{
            user(_id: ${id}) {
                _id
                username
                email
            }
        }`
`name`的值会在发出GraphQL查询请求前就被拼接进完整的GraphQL语句中。攻击者对`name`注入恶意语句：
        -1)%7B_id%7Dhack%3Auser(username%3A"admin")%7Bpassword%23
可能GraphQL语句的结构就被改变了：
        {
            user(_id: -1) {
                _id
            }
            hack: user(username: "admin") {
                password #) {
                _id
                username
                email
            }
        }
因此，带参查询一定要保证在后端GraphQL引擎解析时，原语句结构不变，参数值以变量的形式被传入，由解析器实时赋值解析。
> @图南：  
>  幸运的是，GraphQL同时提供了‘参数’和‘变量’给我们使用。我们可以将参数值的拼接过程转交给后端GraphQL引擎，前端就像进行参数化查询一样。
例如，我们定义一个带变量的Query：
        type Query {
            user(
                username: String!
            ): User
        }
请求时传入变量：
        query GetUser($name: String!) {
            user(username: $name) {
                _id
                username
                email
            }
        }
        // 变量
        {"name": "some username"}
## 拒绝服务
> [@gyyyy](https://github.com/gyyyy "@gyyyy")：  
>  做过代码调试的同学可能会注意过，在观察的变量中存在相互关联的对象时，可以对它们进行无限展开 _（比如一些Web框架的Request-> Response对）_
> 。如果这个关联关系不是引用而是值，就有可能出现OOM等问题导致运算性能下降甚至应用运行中断。同理，在一些动态求值的逻辑中也会存在这类问题，比如XXE的拒绝服务。
GraphQL中也允许对象间包含组合的嵌套关系存在，如果不对嵌套深度进行限制，就会被攻击者利用进行拒绝服务攻击。
> @图南：  
>  在开发中，我们可能经常会遇到这样的需求：
>
>   1. 查询所有文章，返回内容中包含作者信息
>   2. 查询作者信息，返回内容中包含此作者写的所有文章
>
>
> 当然，在我们开发的前端中这两个接口一定是单独使用的，但攻击者可以利用这它们的包含关系进行嵌套查询。
如下面例子，我们定义了`Blog`和`Author`：
        type Blog {
            _id: String!
            type: BlogType
            avatar: String
            title: String
            content: [String]
            author: Author
            # ...
        }
        type Author {
            _id: String!
            name: String
            blog: [Blog]
        }
构建各自的Query：
        extend type Query {
            blogs(
                blogId: ID
                systemType: String!
            ): [Blog]
        }
        extend type Query {
            author(
                _id: String!
            ): Author
        }
我们可以构造如下的查询，此查询可无限循环下去，就有可能造成拒绝服务攻击：
        query GetBlogs($blogId: ID, $systemType: String!) {
            blogs(blogId: $blogId, systemType: $systemType) {
                _id
                title
                type
                content
                author {
                    name
                    blog {
                        author {
                            name
                            blog {
                                author {
                                    name
                                    blog {
                                        author {
                                            name
                                            blog {
                                                author {
                                                    name
                                                    blog {
                                                        author {
                                                            name
                                                            blog {
                                                                author {
                                                                    name
                                                                    blog {
                                                                        author {
                                                                            name
                                                                            # and so on...
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        title
                        createdAt
                        publishedAt
                    }
                }
                publishedAt
            }
        }
避免此问题我们需要在GraphQL服务器上限制查询深度，同时在设计GraphQL接口时应尽量避免出现此类问题。仍然以Node.js为例，[graphql-depth-limit](https://github.com/stems/graphql-depth-limit)就可以解决这样的问题。
        // ...
        import depthLimit from 'graphql-depth-limit';
        // ...
        const server = new ApolloServer({
            typeDefs: schemaText,
            resolvers: resolverMap,
            context: ({ ctx }) => {
                const token = ctx.req.headers.authorization || '';
                const user = getUser(token);
                console.log('user',user)
                return {
                    ...user,
                    ...ctx,
                    ...app.context
                };
            },
            validationRules: [ depthLimit(10) ]
        });
    // ...
添加限制后，请求深度过大时会看到如下报错信息：
## 它只是个接口
> [@gyyyy](https://github.com/gyyyy "@gyyyy")：  
>  作为Web API的一员，GraphQL和RESTful
> API一样，有可能被攻击者通过对参数注入恶意数据影响到后端应用，产生XSS、SQL注入、RCE等安全问题。此外，上文也提到了很多GraphQL的特性，一些特殊场景下，这些特性会被攻击者利用来优化攻击流程甚至增强攻击效果。比如之前说的内省机制和默认开启的GraphiQL调试工具等，还有它同时支持GET和POST两种请求方法，对于CSRF这些漏洞的利用会提供更多的便利。
当然，有些特性也提供了部分保护能力，不过只是‘部分’而已。
> @图南：  
>  GraphQL的类型系统对注入是一层天然屏障，但是如果开发者的处理方式不正确，仍然会有例外。
比如下面的例子，参数类型是字符串：
        query GetAllUsers($filter: String!) {
            users(filter: $filter) {
                _id
                username
                email
            }
        }
假如后端没有对`filter`的值进行任何安全性校验，直接查询数据库，传入一段SQL语句字符串，可能构成SQL注入：
        {"filter": "' or ''='"}
或者JSON字符串构成NoSQL注入：
        {"filter": "{"$ne": null}"}
## 结语
GraphQL真的只是一个API技术，它为API连接的前后端提供了一种新的便捷处理方案。无论如何，该做鉴权的就鉴权，该校验数据的还是一定得校验。
而且各GraphQL引擎在编程语言特性、实现方式等因素的影响下，都一定会有细微的差异。除了文章里提到的这些内容，还可以对每个引擎内部的执行流程、语法解析、校验和数据编解码等环节进行审计，发掘更多有意思的内容。
不过我们的文章就先到这了，感谢阅读！
###  参考
  1. [GraphQL Learn](https://graphql.org/learn/)
  2. [GraphQL Fundamentals – Security](https://www.howtographql.com/advanced/4-security/)
  3. [GraphQL – Security Overview and Testing Tips](https://blog.doyensec.com/2018/05/17/graphql-security-overview.html)
  4. [A guide to authentication in GraphQL](https://blog.apollographql.com/a-guide-to-authentication-in-graphql-e002a4039d1)
  5. [Apollo Developer Guides – Security](https://www.apollographql.com/docs/guides/security.html)
  6. [Apollo Developer Guides – Access control](https://www.apollographql.com/docs/guides/access-control.html)
  7. [GraphQL NoSQL Injection Through JSON Types](http://www.petecorey.com/blog/2017/06/12/graphql-nosql-injection-through-json-types/)