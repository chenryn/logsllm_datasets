changing the memory protections of the original code segment to inaccessible
using VirtualProtectEx.
Dynamic Reconstruction of Relocation Information
79
In order to improve the performance of certain runtime operations, a hash
table of all possible code pointer values is built. This is done by scanning all
sections and inserting any four-byte values (assuming 32-bit processes) that fall
into the address range of the original code segment. Finally, we check whether
there is a ﬁle that contains relocation information that was discovered as part
of previous runs, and apply them.
4.2 Runtime
After initialization is completed and control is given back to the child process,
the parent blocks while waiting for the next debugging event. Usually, we expect
memory access violation exceptions to be generated after this stage. New DLL
loaded events might happen as well, but rarely. Whenever a new DLL is loaded
in the address space of the child process, the system checks whether it contains
relocations. In case it does not, the same initialization steps that were previously
described are performed.
As described in Section 3, the core of our technique is implemented as part of
the handling mechanism of memory access violation exceptions. Each exception
record contains information about the location of the instruction that caused
it, along with the faulting address. Based on this information, we distinguish
between two main cases: i) the instruction pointer falls within the address range
of the original (inaccessible) code segment (instruction address and faulting ad-
dress are the same), and ii) an illegal memory access was made by an instruction
located in the relocated code segment (instruction address and faulting address
are diﬀerent).
If the instruction pointer after a memory exception is received falls within the
original code segment, this means that the control ﬂow was transfered there and
the program failed when it tried to execute the next instruction. In this case, the
faulting address corresponds to the location of the instruction in the exception
record. The exception is handled by ﬁrst looking up the faulting address in the
hash table—which is constructed during the initialization phase. A single hit is
the simplest case, because it means that this is the source of the exception. If
there are more than one hits, each one is veriﬁed using the rules described in
Section 3 for immediate values or function pointers.
Alternatively, if the faulting instruction belongs to the relocated code segment,
this means that one of its operands caused the fault. This happens under two
circumstances: the instruction is an indirect jump, reading a jump table target
from the original code location, or an instruction that uses a copy of a relocatable
value from dynamic data.
5 Evaluation
In this section we present the results of the experimental evaluation of our pro-
totype in terms of correctness and performance overhead. For the largest part of
our evaluation, we used benchmarks from SPEC CPU2006 [4], as well as some
80
V. Pappas, M. Polychronakis, and A.D. Keromytis
real-world applications, such as Internet Explorer and Adobe Reader. All the ex-
periments were performed on a computer with the following speciﬁcations: Intel
Core i7 2.00GHz CPU, 8GB RAM, 256GB SSD with 64-bit Windows 8.1 Pro.
5.1 Statistics
We started our evaluation with the goal of getting a better feeling on the diﬀer-
ences of applying our technique to programs with distinct characteristics. First,
we selected all the test programs in the integer suite that come with the SPEC
benchmark and stripped the relocation information from the compiled binaries.
Out of the twelve programs in that set, only libquantum had to be left out be-
cause it uses some C99 features that are not supported by Visual C++ (as noted
in the SPEC conﬁguration ﬁle Example-windows-ia32-visualstudio.cfg). Then, we
executed each one using our prototype and gathered some valuable statistics that
provide insights about the runtime behaviour of our technique. At the same time,
we checked that the output of the benchmark test runs was correct, which in turn
veriﬁed the correctness of our implementation under these cases.
Table 1 shows the results of this run. The ﬁrst column contains the name
of each SPEC test program, followed by the number of possible pointers that
we identiﬁed for each during the initialization phase. The next three columns
show the number of identiﬁed jump tables and the number of veriﬁed pointers
along with the percentage of them that had a single hit in the possible pointers
set. Next, we have the number of times that an already ﬁxed relocatable oﬀset
reappeared at runtime because of copies of it in dynamic data, followed by the
number of global pointer copies that we were able to apply the optimization
described in the last part of Section 3. Finally, the number of actual relocatable
oﬀsets that we were able to reconstruct their relocation information in shown in
the last column.
Table 1. Statistics from running the SPEC benchmarks using the reference input data
(largest dataset)
Program
Possible
Pointers Tables Pointers
Jump
Verified Single Dynamic Global Reconst.
Hit
Data
Opt.
Reloc.
perlbench 31,260
2,147
bzip2
gcc
98,955
1,875
mcf
69,852
gobmk
4,798
hmmer
8,460
sjeng
h264ref
17,526
24,861
omnetpp
astar
2,690
xalancbmk 141,246
118
4
510
1
21
15
12
17
13
2
54
633
11
1,008
13
968
17
17
27
1,509
20
4,402
83.0%
84.6%
65.2%
100.0%
63.5%
94.4%
100.0%
71.0%
90.6%
100.0%
84.2%
43M
25
73M
19
4M
42
18
320K
269K
31
9M
41
4
269
-
54
2
-
61
8
-
24
2,614
76
7,849
22
1,270
152
135
209
1,669
42
5,392
Dynamic Reconstruction of Relocation Information
81
Discovery run
Second run
32
16
8
4
2
1
0
)
e
m
i
t
n
u
R
d
e
z
i
l
a
m
r
o
N
(
n
w
o
d
w
o
S
l
perlbench bzip2
gcc
mcf
gobmk hmmer
sjeng
h264ref omnetpp astar xalancbmk
Fig. 3. Normalized slowdown compared to normal execution (no relocation). Dark-
colored bars show the slowdown during the ﬁrst run, where most of the relocations
are discovered and there are still copies of them in dynamic data. Light-colored bars
show the slowdown during the second run (and any subsequent runs) where most of
the relocations have already been discovered.
An interesting observation is that most of the times we have a single hit during
the veriﬁcation of a code pointer, which simpliﬁes the overall procedure. Another
interesting thing to note is that there is a very high variation in the number of
times that a copy of an already ﬁxed relocatable oﬀset in dynamic data is used.
This ranges from a few tens to tens of millions using these test cases. At the
same time, we note that there does not seem to be any signiﬁcant correlation of
this number and the actual number of the reconstructed relocatable oﬀsets.
5.2 Performance Overhead
Next, we focus on evaluating the performance overhead. As already mentioned,
the only case where we expect our technique to aﬀect the performance of a target
application is during the ﬁrst (or, few ﬁrst) times we execute it, where most of
the relocations are being discovered. Any consecutive execution should have a
minimal runtime overhead impact.
Figure 3 shows the normalized slowdown for the ﬁrst execution of the SPEC
programs under our prototype (Discovery run) and another execution after the
relocations have been discovered (Second run). In both cases, the slowdown is
compared to a normal execution without relocating the program (baseline). Also,
the input data used for this experiment was the reference dataset (i.e., the largest
dataset), where the average completion time for each test program is a couple
of minutes. As expected, we see that the overhead of the second run is mini-
mal (less than 5% on average) and mostly attributed to the unoptimized way
of applying the discovered relocation information. Currently, in our prototype
implementation we relocate every oﬀset separately. For each of them, we read its
value, change the memory permissions, update its value and restore the memory
permissions. The unusually high performance overhead that we observed when
82
V. Pappas, M. Polychronakis, and A.D. Keromytis
)
e
m
i
t
n
u
R
d
e
z
i
l
a
m
r
o
N
(
n
w
o
d
w
o
S