title:CrawlPhish: Large-scale Analysis of Client-side Cloaking Techniques
in Phishing
author:Penghui Zhang and
Adam Oest and
Haehyun Cho and
Zhibo Sun and
RC Johnson and
Brad Wardman and
Shaown Sarker and
Alexandros Kapravelos and
Tiffany Bao and
Ruoyu Wang and
Yan Shoshitaishvili and
Adam Doup&apos;e and
Gail-Joon Ahn
1
2
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
CrawlPhish: Large-scale Analysis of
Client-side Cloaking Techniques in Phishing
Penghui Zhang∗, Adam Oest∗†, Haehyun Cho∗, Zhibo Sun∗, RC Johnson†, Brad Wardman†, Shaown Sarker‡,
Alexandros Kapravelos‡, Tiffany Bao∗, Ruoyu Wang∗, Yan Shoshitaishvili∗, Adam Doup´e∗ and Gail-Joon Ahn∗§
∗Arizona State University, †PayPal, Inc., ‡North Carolina State University, §Samsung Research
∗{penghui.zhang, aoest, haehyun, zhibo.sun, tbao, ﬁshw, yans, doupe, gahn}@asu.edu
†{raouljohnson, bwardman}@paypal.com, ‡{ssarker, akaprav}@ncsu.edu
Abstract—Phishing is a critical threat to Internet users. Al-
though an extensive ecosystem serves to protect users, phishing
websites are growing in sophistication, and they can slip past
the ecosystem’s detection systems—and subsequently cause real-
world damage—with the help of evasion techniques. Sophisti-
cated client-side evasion techniques, known as cloaking, leverage
JavaScript to enable complex interactions between potential
victims and the phishing website, and can thus be particularly
effective in slowing or entirely preventing automated mitigations.
Yet, neither the prevalence nor the impact of client-side cloaking
has been studied.
In this paper, we present CrawlPhish, a framework for
automatically detecting and categorizing client-side cloaking used
by known phishing websites. We deploy CrawlPhish over 14
months between 2018 and 2019 to collect and thoroughly analyze
a dataset of 112,005 phishing websites in the wild. By adapting
state-of-the-art static and dynamic code analysis, we ﬁnd that
35,067 of these websites have 1,128 distinct implementations of
client-side cloaking techniques. Moreover, we ﬁnd that attackers’
use of cloaking grew from 23.32% initially to 33.70% by the
end of our data collection period. Detection of cloaking by our
framework exhibited low false-positive and false-negative rates of
1.45% and 1.75%, respectively. We analyze the semantics of the
techniques we detected and propose a taxonomy of eight types
of evasion across three high-level categories: User Interaction,
Fingerprinting, and Bot Behavior.
Using 150 artiﬁcial phishing websites, we empirically show
that each category of evasion technique is effective in avoiding
browser-based phishing detection (a key ecosystem defense).
Additionally, through a user study, we verify that the techniques
generally do not discourage victim visits. Therefore, we propose
ways in which our methodology can be used to not only improve
the ecosystem’s ability to mitigate phishing websites with client-
side cloaking, but also continuously identify emerging cloaking
techniques as they are launched by attackers.
I. INTRODUCTION
Despite extensive research by the security community,
phishing attacks remain proﬁtable to attackers and continue to
cause substantial damage not only to the victim users that they
target, but also the organizations they impersonate [27, 55]. In
recent years, phishing websites have taken the place of mal-
ware websites as the most prevalent web-based threat [22, 52].
Even though technical countermeasures effectively mitigate
web-based malware, phishing websites continue to grow in
sophistication and successfully slip past modern defenses [46].
In a cat-and-mouse game with the anti-phishing ecosystem,
sophisticated phishing websites implement evasion techniques
to delay or avoid detection by automated anti-phishing sys-
tems, which,
in turn, maximizes the attackers’ return-on-
investment [43]. Such evasion—known as cloaking—typically
seeks to determine if a visitor to the website is a bot, and
shows benign content if so. The danger posed by successful
evasion is exacerbated by these websites’ efforts to steal more
than just usernames and passwords: today’s phishing attacks
seek to harvest victims’ full identities, which can cause wider
damage throughout the ecosystem and is more challenging to
effectively mitigate [54].
Thwarting phishers’ evasion efforts is, thus, an important
problem within the anti-phishing community, as timely de-
tection is the key to successful mitigation. Prior research has
characterized server-side cloaking techniques used by phishing
websites [30, 37, 44] and showed that they can defeat key
ecosystem defenses such as browser-based detection [43].
However,
the nature and prevalence of advanced cloaking
techniques, such as those implemented on the client-side using
JavaScript, is poorly understood. Client-side cloaking can be
particularly dangerous because it enables the implementation
of complex interactions with potential victims.
By analyzing—at scale—the client-side source code of
known phishing websites in the wild, we can not only gain
an understanding of the evasion techniques used by phish-
ers, but also leverage this understanding to improve existing
phishing detection systems and guide the mitigations used
by the ecosystem. Unlike server-side code used by phishing
websites, client-side code can trivially be obtained through
web crawling. However, a key challenge in gaining further
insights from this data is the dynamic nature of JavaScript
code, which hampers automated analysis [32]. In this paper,
we overcome this challenge and evaluate client-side evasion
by developing CrawlPhish.
CrawlPhish is a robust framework that harvests the source
code of live, previously reported phishing websites in the
wild and automatically detects and categorizes the client-
side cloaking techniques used by these websites. By efﬁ-
ciently adapting advanced program analysis techniques in-
spired by prior research of JavaScript malware [18, 32, 34, 36],
our framework can not only identify the semantics of these
cloaking techniques, but also track the evolution of code
written by speciﬁc phishing kit authors [16].
We use the CrawlPhish framework to perform a large-scale
© 2021, Penghui Zhang. Under license to IEEE.
DOI 10.1109/SP40001.2021.00021
1109
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:33 UTC from IEEE Xplore.  Restrictions apply. 
evaluation of the landscape of client-side cloaking used by
phishing websites. In total, over a period of 14 months from
mid-2018 to mid-2019, we collected and thoroughly analyzed
112,005 phishing websites. We measured the prevalence of
client-side cloaking techniques within these websites and
discovered that 35,067 (31.3%) use such cloaking. Thereof,
we identiﬁed 1,128 groups of related implementations which
we believe stem from distinct threat actors. Moreover, we
observed that the percentage of phishing websites with client-
side cloaking grew from 23.32% in 2018 to 33.70% in 2019.
To understand why client-side cloaking is used so fre-
quently, we characterize the ways in which it functions, and we
deﬁne eight different types of evasion techniques in three high-
level categories: User Interaction, Fingerprinting, and Bot
Behavior. Respectively, the techniques within these categories
require human visitors to perform a task, proﬁle the visitor
based on various attributes, or exploit technical differences
between browsers used by crawlers and real browsers.
We evaluated CrawlPhish and found that it could detect the
presence of cloaking with low false-positive (1.45%) and false-
negative (1.75%) rates, while requiring an average of 29.96
seconds to analyze each phishing website. Once CrawlPhish
has detected cloaking,
it can then reliably categorize the
semantics of the cloaking technique by using both static and
dynamic code features.
Finally, to show that client-side cloaking poses a real-world
threat, we deploy 150 carefully-controlled artiﬁcial phishing
websites to empirically demonstrate that all three categories
of evasion can successfully bypass browser-based detection
by Google Chrome, Microsoft Edge, and other major web
browsers. We also demonstrate that these websites remain ac-
cessible to potential human victims. As a result, we disclosed
our ﬁndings to the aforementioned browser developers, who
are working to improve the timeliness of the detection of the
corresponding phishing websites.
Our analysis furthers the understanding of the nature of
sophisticated phishing websites. In addition, the CrawlPhish
framework can be deployed to continuously monitor trends
within complex evasion techniques while identifying new
types of techniques as they are introduced by attackers. Our
methodology can not only directly help address gaps in the
ecosystem’s detection of sophisticated phishing websites, but
can also aid in the development of attributes to improve exist-
ing anti-phishing mitigations such as browser-based detection.
Our contributions are thus as follows:
• A scalable, automated framework for evaluating client-
side evasion techniques used by phishing websites in
the wild, supported by a novel adaptation of multiple
JavaScript code analysis approaches.
• The ﬁrst in-depth study of the nature and prevalence
of client-side evasion techniques used by sophisticated
phishing websites, and a taxonomy of these techniques
based on semantic categorization.
• Measurements indicating the increasing use of client-
side evasion techniques by phishers, and an empirical
Cloaking Type
Attributes
Examples
Server-side
HTTP Request
Repeat Cloaking
IP Cloaking
User-agent Cloaking
Referrer Cloaking
Client-side
Client-side Characteristics
Execution of JavaScript
Redirection
Cloaking
TABLE I: Summary of cloaking types from previous studies.
evaluation showing that
threat to the current ecosystem.
these techniques represent a
• Methodology for improving the ability of ecosystem
anti-phishing defenses to detect highly evasive phishing
websites.
II. BACKGROUND
Over the past years, a myriad of techniques have been
implemented by the anti-phishing ecosystem to detect and
mitigate phishing attacks [44]. Analysis of phishing URLs [11,
12, 29, 33] and website content [10, 13, 62, 64, 67] has given
rise to ecosystem-level defenses such as e-mail spam ﬁlters,
malicious infrastructure detection, and URL blacklists.
Speciﬁcally, systems such as Google Safe Browsing [61]
and Microsoft SmartScreen [40] power
the anti-phishing
backends that display prominent warnings across major web
browsers when phishing is detected. These warnings are pri-
marily blacklist-based: they rely on content-based detection.
Evasion techniques commonly used by phishing websites are
capable of bypassing or delaying such blacklisting [38, 43, 45].
A. Cloaking Techniques in Phishing
Attackers leverage cloaking techniques to evade detection
by anti-phishing systems: phishing websites with cloaking
display benign-looking content instead of the phishing page
whenever they suspect that a visit originates from security
infrastructure [44]. Cloaking techniques can be categorized
into two groups: server-side and client-side (Table I shows
examples of each type). Server-side cloaking techniques iden-
tify users via information in HTTP requests [59]. Client-side
cloaking is implemented through code that runs in the visitor’s
browser (JavaScript) to apply ﬁlters using attributes such as
cookies or mouse movement.
Existing anti-cloaking methodologies focus on bypassing
server-side cloaking by comparing the visual and textual
features of different versions of a crawled website retrieved
by sending multiple web requests with different conﬁgurations
(e.g., user agents or IP addresses) [25, 30, 59]. Client-side
cloaking techniques, however, are still poorly understood due
to challenges in automatically analyzing JavaScript code and
understanding its semantics. Moreover, neither the prevalence
nor impact of client-side cloaking has been investigated in the
context of phishing.
Figure 1 shows how client-side cloaking techniques are used
in phishing websites. Cloaking code embedded in the HTTP
response payload shows different web page content based on
the identiﬁcation of visitors (as either potential victims or
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:32:33 UTC from IEEE Xplore.  Restrictions apply. 
1110
Cloaking Category