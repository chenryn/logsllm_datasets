# Hybrid Fuzzing Paper Summary
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 简介
Hybrid Fuzzing 是结合了 Fuzzing 和 Symbolic Execution
的分析技术，能够结合两种技术的优点，同时互补不足。但是在两者的结合中，涌现出一些新的问题。本文对近年来在顶会及相关知名会议中发表的 hybrid
fuzzing 论文进行梳理。
## 背景
###  Fuzzing
fuzzing 又称模糊测试，是一种轻量级的动态测试方法，通过不停变异输入，输入给测试程序，观察程序运行是否表现异常来检测是否存在漏洞。fuzzing
以其快速高效的效果，成为近年来较为流行的漏洞挖掘技术。
fuzzing 的优点在于快速高效，以 AFL 为代表，AFL 是一种 Coverage-guided
fuzzing，追求尽可能的覆盖到多的代码，每当有变异的输入覆盖到新的代码，就将该输入保存下来作为
seed，后续在其之上继续变异。通过这样不停迭代，探索到更多的代码区域。
但由于 fuzzing 的变异通常是随机的，对于一些简单的条件分支语句，因为 fuzzing
的速度够快，能够很快的探索输入空间从而满足条件，但是对于一些复杂的条件语句，fuzzing 需要探索的输入空间巨大，很难在有限的时间内探索到。
###  Symbolic/Concolic Execution
symbolic execution
符号执行是程序分析技术的一种，通过采用抽象的符号来代替实际执行值，作为程序的输入变量，得到每个路径抽象的符号表达式，最后对符号表达式进行求解，得到一个具体的变量值，该具体值就可以执行该条路径。
这里提到的符号执行是静态的，并不是真实的执行，每分析到一个分支语句，需要构建 true 和 false
两条路径的表达式，故复杂的程序路径数量往往成指数倍的增长，导致路径爆炸 (path exploration) 的问题。
动态符号执行 (Dynamic symbolic execution) 是传统静态符号执行的一种变体，是同时使用符号值和具体值进行执行的一种方法，所以又称为
concolic execution，意为 concrete + symbolic (实际执行 + 符号执行)。concolic
执行会首先产生一些随机输入，用这些输入喂给程序运行，在运行过程中同时符号化的执行程序。因为采用的是具体的输入，所以执行该输入的时候，只会沿着这个输入的路径进行执行，在分支处对条件进行取反，求解得到该路径分支上另一条路径的解，生成新的测试输入，再将新的输入让程序执行，就会得到另一条没有被执行过的路径，如此循环，来完成对所有路径的探索。
所以实际上，concolic 执行采用的是深度优先的搜索策略，每次 concolic
执行会沿着某一个输入的路径，完整执行程序到结束，然后再对路径上没有测试的路径约束条件取反，得到新的输入，再将新输入给程序执行，进入新的路径。
符号执行技术无论是静态还是动态，相对于 fuzzing 来说，开销是很大的，但是其针对复杂的条件语句是非常有效的，能够求解很多仅仅依靠 fuzzing
随机变异策略无法满足的约束条件。
###  Hybrid fuzzing
hybrid fuzzing 混合模糊测试，实际上就是将 fuzzing 和 concolic execution 结合起来，在 fuzzing 的同时，用
fuzzing 产生的输入给 concolic execution 执行。
由于 fuzzing 的高效，能够快速探索大部分的程序路径，生成大量的输入，当遇到复杂的约束条件时，可以求助于 concolic execution。
concolic execution 可以帮助 fuzzing 求解复杂的约束条件，而 fuzzing 可以为 concolic execution
快速探索程序路径。
####  Driller
hybrid fuzzing 的概念提出的很早，但2016年的 Driller 是最早将 hybrid fuzzing 应用实际的论文，Driller
本质上是将 AFL 和 angr 简单结合起来，当 AFL 停滞不前的时候，就切换 angr 进行求解，帮助 fuzzing 过复杂的约束。
####  QSYM
2018年 QSYM 被提出，文章中提到现有的 concolic execution engine 并不是为 hybrid fuzzing
定制的，存在很多性能上的瓶颈，QSYM进行很多优化：
(1) 首先，用动态二进制翻译 (Dynamic Binary Translation) 取代 IR (Inter
Representation)来执行，现有的符号执行引擎采用 IR 来执行处于工程上的考量，因为 IR 指令数量少，实现相对容易，但是将二进制程序指令转化为
IR 只能以基本块为单位，但是基本块中的指令并不是全部与输入有关，一些无关指令可以跳过，但是基于 IR 的符号执行无法进行指令级的优化。所以 QSYM 放弃
IR，转而使用DBT，对每条二进制指令进行动态插桩，进行符号执行。
(2) 放弃了符号执行中的快照机制，因为传统的符号执行需要在分支处进行分叉，分为 true 和 false
两个分支，故路径是成指数倍增长，为了避免多条路径重复执行的开销，引入了快照机制，将分支处的状态保存下来，以待后续继续执行。但在 hybrid fuzzing
的场景中，fuzzing 产生的输入完全是随机的，并不一定是有相同的前缀路径，快照对于 hyrbrid fuzzing 中的 concolic engine
来说没有什么用，所以直接放弃快照。
(3) 对求解的优化，有时候符号执行会遇到 over-constraint 问题，此时对收集的部分约束进行求解，即便它不完整，能够解决over-constraint的问题。
(4)
对基本块进行剪枝，记录下已经求解的分支，后续不再求解，并对基本块出现的次数进行检测，如果基本块重复出现多次，则进行剪枝，同时记录基本块出现的上下文，当上下文不同时则会保留，避免过度剪枝。
QSYM 的效果很好，且完全适配 AFL，缺点是只支持 X86 的部分指令。
## 问题
当然，hybrid fuzzing 也不是那么无敌，也存在很多问题：
(1) 由于 symbolic execution 自身的原因，执行起来很慢，开销很大。
(2) concolic execution 和 fuzzing 的结合，由于 fuzzing 产生输入的速度很快，concolic execution
不可能将这些seed全部执行一遍，所以需要对这些输入进行调度，换句话说，就是对 seed/path 进行排序，决定哪些输入应该先被执行。
(3) 当符号执行构建的约束过于复杂时，求解器也无法对这些约束求解。
(4) 在将hybrid fuzzing 应用到其他领域时，例如 OS kernel 上，需要解决特定的应用问题。
## 分类
本文提到的论文都是近年来，发表在安全类会议较为知名会议上的 hybrid fuzzing 相关论文。
按照采用的方法和应用做一个简单的分类：
Prioritization/scheduling
  * Digfuzz (NDSS 2019)
  * Savior (S&P 2020)
  * MEUZZ (USENIX RAID 2020)
Improvement of constraint solving
  * Intriguer (CCS 2019)
  * PANGOLIN (S&P 2020)
Applying to OS kernel
  * CAB-Fuzz (Usenix Security 2017)
  * HFL (NDSS 2020)
## 论文解读
###  DigFuzz
本文认为，现有的 hybrid fuzz 存在两种策略：
(1) 一种是 demand launch，即按照需要，在 fuzzing 过程停滞不前时，采用 concolic execution
帮助求解分支条件。这种方式比较笨拙，当 fuzzing 进行的过程中的时间被浪费了。
(2) 还有一种是 optimal switch，即对一条路径用 fuzzing 探索和用 concolic execution
进行探索的代价进行评估，用代价最小的方式。但是评估 concolic execution 的开销需要收集路径约束，这个代价本身就很大了。
所以本文提出一种 discriminative dispatch
的策略，用一种代价较小的方法评估每条路径的难度，按照探索难度对路径进行排序，将难度最大的路径留给 concolic execution 进行探索。
这里的难点在于，如何用一种轻量级的方法评估一条路径的探索难度，DigFuzz 提出基于蒙特卡洛的路径概率排序模型 (Monte Carlo Based
Probabilistic Path Prioritization Model, MCP3)，在 fuzzing 的过程中，用 seed 的 trace
构建执行路径树，用覆盖率计算每个分支的概率，路径的概率为路径上分支的概率相乘，最后基于路径的概率对路径进行排序，概率越小代表路径越难探索，将最难探索的路径优先给
concolic execution 进行探索。
###  Savior
本文认为，现有的 coverage-guided hybrid fuzzing 忽略了对漏洞的检测问题：
(1) 存在漏洞的代码是少数，所以以coverage为导向引导不是最佳策略
(2) 即便能够到达存在漏洞的代码位置，很多漏洞因为没有满足特定的数据条件，也未必能触发漏洞。
Savior 认为应该以 bug 为导向，针对上述两个问题，Savior 采用两个方法来解决：
(1) bug-driven prioritization：采用静态分析得到每个分支可以到达的基本块数量，动态分析得到 seed
执行路径上未探索分支，综合可以得到这些未探索分支可以到达的基本块数量。利用 UBSan (Undefined Behavior Sanitizer)
在每个基本块上标记的数量来表示存在漏洞的可能性大小，综合上述 metric 用于对 seed 进行排序。
(2) bug-guided verification：提取执行路径上的 UBSan label，并对这些 label 中的 predicate
进行验证，即用 concolic execution 为这些 label 生成约束并求解，验证 label 中的 predicate 是否满足。
虽然 Savior 的 key idea 是 bug-driven hyrbrid fuzzing，实际上也是对 seed 做了一个排序，只是这个排序是基于
UBsan 和 trace 中到达基本块数量做的。