Scan无关的事情。
虽然关闭了端口和被过滤的端口会发生的事情稍微有点点不同，但是攻击者处理的方法都一样，IPID都只是增加1。所以，在Idel
Scan中无法区别端口到底是关闭的还是已经过滤了。当Nmap记录的IPID增加了1，也就被标记成了close丨filterred。
以下三张图大略可以说明端口被打开，关闭，过滤的情况。
端口开放：
端口关闭：
端口被过滤：
Idel Scan根本上来讲就是一个隐性扫描，Nmap提供了decoy scanning (-D)，帮助使用者保护自己的身份。如果不是使用的（类似Idel
Scan扫描方式）仍然需要攻击者通过自身真实IP向目标发送数据包以获取扫描结果。Idel
Scan扫描结果其中之一就有入侵检测系统通常会发送一个Zombie主机已经开始扫描的通知。所以它可以作为一个框架去扫描另外一个目标，当你查阅入侵检测系统（IDS）时，请记住这种可能性。
Idel
Scan的一个独特优势便是，它可以绕开某些过滤防火墙和路由器。IP源地址过滤，是一种常见的（虽然很弱）用于限制机器连接到敏感主机或者说网络上的安全机制。举个例子，一个公司数据库服务器，只允许公共网络连接。或者，家庭用户只允许SSH连接到工作机上面。
Idel Scanning有时也可以被用来映射信任关系，关键在于Idel
Scan最终会从Zombie主机获取开放端口列表。一个正常的扫描对于上述数据库服务器可能会显示没有端口开放，但是当将Zombie主机作为Web
Sever的IP，使用Idel Scan就可能将数据库相关开放端口暴露出来。
映射出的这些信任关系就可能作为攻击者优先考虑的目标，上面所讨论的方式手法很猥琐哇！
Idel Scan有一个缺点就是它比其他一些扫描方式所花费的时间更长。尽管在《[Idel
Scan算法实现](http://nmap.org/book/idlescan.html#scan-methods-idle-scan-algorithms)》章节中有对Idel Scan的优化算法，一个只需要15秒就可以完成的SYN，Idel
Scan或许需要15分钟才能够完成。另一个问题就是你必须能够发送欺骗包，伪装成好像他们来自Zombie主机一般，让他们到达目标主机。许多ISP服务商（特别是拨号和住宅宽带供应商）目前执行出口过滤来防止这类数据包欺骗。高端供应商（比如说主机托管，T1-Services）就不太可能这么做。如果实际存在这个过滤，Nmap会在你尝试的每一个Zombie主机上显示一个快速错误消息。如果不能够更换ISP服务商，那么最好尝试在让ISP服务商给你更换一个IP。有时候这个过滤仅仅只是阻止了客户使用范围之外的欺骗IP地址。Idel
Scan另外一个难点就是你必须寻找一个正在工作的Zombie主机。
上述描述的是Idel Scan的基础水平。在Nmap上实现却是有些复杂，最关键的差异在于Nmap能够同时执行，而且误报少。
Parallelizing idle
scan由于是间接推导出端口所以，他比其他扫描方式要更加的猥琐。如果Nmap探测目标主机上的多个端口，然后检测Zombie主机上新的IP ID值，IP
ID的值增加了多少就显示出目标开放了多少个端口。实际上这并不是一个和严重的问题，绝大多数端口在大型扫描结果中基本上都是被关闭或者被过滤。由于只有开放端口才可以让IP
ID值增加，Nmap会认为没有增加量，然后整个组的端口就被标记成了关闭或者被过滤。Nmap可以并行扫描一百组端口。如果Nmap在探测一组端口的时候Zombie主机IP
ID同时也增加了，就说明在这一组端口中一定有开放的端口。Nmap继而使用二进制搜索发现开放的端口。它将数据组分成两份，分别发送探测信息，如果一个数据组显示没有开放端口，那么这一数据组的端口都将被标记为被关闭或者被过滤。如果一个数据组显示有开放端口，那么在把这个数据组分成两份，重复以上步骤，直到最终将开放端口都找出来。虽然这种方式更复杂，但是这种方式可以节约扫描时间。
可靠性是Idel Scan的另一个问题。如果Zombie主机在扫描时向任何不相干的机器发送数据包，其IP
ID会增加。这就会让Nmap误以为已经寻找到开放的端口了。幸运的是，并行扫描在这里也是有很大作用的。如果Nmap在一个组中扫描100个端口，那么IP
ID就会增加标识两个开放端口，Nmap将这组数据分成50端口一个小组。当Nmap同时在两个小组中进行IP ID扫描时，Zombie主机IP
ID总的增加量就在加了一次。另外，Nmap如果探测到不一致，那么它会重新探测。基于检测可靠的Zombie主机，Nmap还会修改组大小以及扫描时间。如果Nmap发现有大量不一致的结果，它将退出，并提示用户选择更好的Zombie主机。
具体操作可以参考[TCP Idle Scan (-sI)](https://nmap.org/book/idlescan.html)
## TCP Maimon Scan
Maimon Scan 以其发现者 Uriel Maimon 命名。 他在 Phrack 杂志第49期（1996年11月）中描述了这种技术。
除了探测器是FIN / ACK之外，此技术与NULL，FIN和Xmas扫描完全相同。 根据RFC
793（TCP），响应于这样的探测，应该生成RST分组，无论端口是打开还是关闭。 但是，如果端口打开，许多BSD派生系统只会丢弃数据包。
Nmap利用这一点来确定开放端口，如下表所示：
Nmap 对 TCP Maimon Scan 的处理：
Probe Response | Assigned State  
---|---  
No response received (even after retransmissions) | `open | filtered`  
TCP RST packet | `closed`  
ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) | `filtered`  
### usage
    nmap -sM para
    Starting Nmap ( http://nmap.org )
    All 1000 scanned ports on para (192.168.10.191) are: closed
    MAC Address: 00:60:1D:38:32:90 (Lucent Technologies)
    Nmap done: 1 IP address (1 host up) scanned in 4.19 seconds
## TCP FTP Bounce Scan
FTP协议（RFC
959）的一个有趣特性是支持代理FTP连接。这允许用户连接到一个FTP服务器，然后要求将文件发送到第三方服务器。这样的功能在很多层面上被滥用，因此大多数服务器已停止支持它。此功能允许的滥用功能之一是通过
FTP 服务器进行扫描其他主机端口。只需要求 FTP
服务器依次将文件发送到目标主机的每个端口就可以了。回显消息将描述端口是否打开。这是绕过防火墙的好方法，因为内部的 FTP 服务器通常放置在比旧的
Internet 主机都能访问到的其他主机的位置上。
Nmap支持使用-b选项进行FTP反弹扫描。它采用`:@:`形式的参数。
``是易受攻击的FTP服务器的名称或IP地址。与普通URL一样，您可以省略`:`，在这种情况下，将使用匿名登录凭据（`user:anonymous
password:-wwwuser@`）。端口号（和前面的冒号）也可以省略，在这种情况下，使用``上的默认FTP端口（21）。
使用 FTP Bounce Scan
较为频繁的用户更好地习惯了对回显消息的处理。这个漏洞在1997年Nmap发布时很普遍，但已在很大程度上得到修复。易受攻击的服务器仍然存在，所以当其他所有服务器都失败时，这个方法值得一试。如果您的目标是绕过防火墙，请扫描目标网络以查找开放的21端口（如果使用版本检测扫描所有端口，则扫描任何FTP服务），然后尝试使用每个端口进行
Bounce Scan。
Nmap会告诉您主机是否容易受到攻击。如果您只是试图掩盖您的曲目，您不需要（事实上，不应该）限制目标网络上的主机。在为易受攻击的FTP服务器扫描随机Internet地址之前，请考虑系统管理员可能不会允许这样滥用其服务器。
### usage
Nmap 扫描方式：
    nmap -p 22,25,135 -Pn -v -b XXX.YY.111.2 scanme.nmap.org
    Starting Nmap ( http://nmap.org )
    Attempting connection to ftp://anonymous:-wwwuser@@XXX.YY.111.2:21
    Connected:220 JD FTP Server Ready
    Login credentials accepted by ftp server!
    Initiating TCP ftp bounce scan against scanme.nmap.org (64.13.134.52)
    Adding open port 22/tcp
    Adding open port 25/tcp
    Scanned 3 ports in 12 seconds via the Bounce scan.
    Nmap scan report for scanme.nmap.org (64.13.134.52)
    PORT    STATE    SERVICE
    22/tcp  open     ssh
    25/tcp  open     smtp
    135/tcp filtered msrpc
    Nmap done: 1 IP address (1 host up) scanned in 21.79 seconds
# UDP
在TCP/IP模型中，UDP为网络层以上和应用层以下提供了一个简单的接口。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验字段。
UDP适用于不需要或在程序中执行错误检查和纠正的应用，它避免了协议栈中此类处理的开销。对时间有较高要求的应用程序通常使用UDP，因为丢弃数据包比等待或重传导致延迟更可取。
## UDP SCAN
UDP扫描比较简单，一般如果返回`ICMP port
unreachable`说明端口是关闭的，而如果没有回应或有回应(有些UDP服务是有回应的但不常见)则认为是`open`，但由于UDP的不可靠性，无法判断报文段是丢了还是没有回应，所以一般扫描器会发送多次，然后根据结果再判断。这也是为什么UDP扫描这么慢的原因。
虽然因特网上最流行的服务运行在TCP协议上，但UDP服务被广泛部署。 DNS，SNMP和DHCP（注册端口53,161 /
162和67/68）是最常见的三种。 由于UDP扫描通常比TCP更慢且更困难，因此某些安全审核员会忽略这些端口。
这是一个错误，因为可利用的UDP服务非常普遍，攻击者肯定不会忽略整个协议。
UDP扫描通过向每个目标端口发送UDP数据包来工作。 对于大多数端口，此数据包将为空（无有效负载），但对于一些更常见的端口，将发送特定于协议的有效负载。
根据响应或缺少响应，端口被分配给四种状态之一，如下表所示：
Nmap 对 UDP Scan 的处理：
Probe Response | Assigned State  
---|---  
Any UDP response from target port (unusual) | `open`  
No response received (even after retransmissions) | `open | filtered`  
ICMP port unreachable error (type 3, code 3) | `closed`  
Other ICMP unreachable errors (type 3, code 1, 2, 9, 10, or 13) | `filtered`  
### usage