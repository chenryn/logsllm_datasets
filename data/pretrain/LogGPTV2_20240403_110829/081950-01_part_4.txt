endswith(suffix,beg=0,end=len(string)) 检查字符串是否以obj结束，如果beg或end指定，则检查指
定的范围内是否以obj结束，是则返回True，否则返回False
expandtabs(tabsize=8) 把字符串string中的tab符号转换为空格，tab符号默认的空
格数是8
find(str,beg=0,end=len(string)) 检测str是否包含在字符串中，如果指定范围beg和end，则
检查是否包含在指定范围内，包含返回开始的索引值，否则
返回-1
index(str,beg=0,end=len(string)) 与 find()方法一样，但是如果 str 不在字符串中，则会报一个
异常
isalnum() 如果字符串至少有一个字符并且所有字符都是字母或数字，
则返回True，否则返回False
isalpha() 如果字符串至少有一个字符并且所有字符都是字母，则返回
True，否则返回False
isdigit() 如果字符串只包含数字，则返回True否则返回False
islower() 如果字符串中包含至少一个区分大小写的字符，并且所有这
些（区分大小写的）字符都是小写，则返回 True，否则返回
False
isnumeric() 如果字符串中只包含数字字符，则返回True，否则返回False
isspace() 如果字符串中只包含空白，则返回True，否则返回False
istitle() 如果字符串是标题化的（见 title()）则返回 True，否则返回
False
isupper() 如果字符串中包含至少一个区分大小写的字符，并且所有这
些（区分大小写的）字符都是大写，则返回 True，否则返回
False
join(seq) 以指定字符串作为分隔符，将 seq 中所有的元素合并为一个
新的字符串
len(string) 返回字符串长度
ljust(width[,fillchar]) 返回一个原字符串左对齐，并使用 fillchar 填充至长度 width
的新字符串，fillchar默认为空格
lower() 转换字符串中所有大写字符为小写
29
Python自动化运维快速入门
（续表）
函数 功能
lstrip() 截掉字符串左边的空格或指定字符
maketrans() 创建字符映射的转换表，对于接受两个参数比较简单的调用
方式，第一个参数是字符串，表示需要转换的字符，第二个
参数也是字符串，表示转换的目标
max(str) 返回字符串str中最大的字母
min(str) 返回字符串str中最小的字母
replace(old,new[,max]) 将字符串中的str1替换为str2，如果max指定，则替换不超
过max次
rfind(str,beg=0,end=len(string)) 类似于find()函数，不过是从右边开始查找
rindex(str,beg=0,end=len(string)) 类似于index()，不过是从右边开始
rjust(width,[,fillchar]) 返回一个原字符串右对齐，并使用 fillchar（默认空格）填充
至长度width的新字符串
rstrip() 删除字符串末尾的空格
split(str="",num=string.count(str)) num=string.count(str))以 str 为分隔符截取字符串，如果 num
有指定值，则仅截取num个子字符串。
splitlines([keepends]) 按照行（'\r','\r\n',\n'）分隔，返回一个包含各行作为元素的列
表，如果参数 keepends 为 False，则不包含换行符；如果为
True，则保留换行符
startswith(str,beg=0,end=len(string)) 检查字符串是否以obj开头，是则返回True，否则返回False。
如果beg和end指定值，则在指定范围内检查
strip([chars]) 在字符串上执行lstrip()和rstrip()
swapcase() 将字符串中大写转换为小写，小写转换为大写
title() 返回"标题化"的字符串，也就是说所有单词都是以大写开始，
其余字母均为小写（见istitle()）
translate(table,deletechars="") 根据str给出的表（包含256个字符）转换string的字符，要
过滤的字符放到deletechars参数中
upper() 转换字符串中的小写字母为大写
zfill(width) 返回长度为width的字符串，原字符串右对齐，前面填充0
isdecimal() 检查字符串是否只包含十进制字符，如果是，则返回true，否
则返回false
int(x) 将x转换为一个整数
1.5.3 列表与元组
列表是Python常用的数据类型，也是最基本的数据结构。Python的列表是由方括号“[]”
[]括起，使用“,”分隔的序列，序列中的数据类型不要求一致，序列的索引从0开始。
【示例1-1】创建一个列表，只要把逗号分隔的不同数据项使用方括号括起来即可。
>>> list1 = ['Google', 'Huawei', 1997, 2000];
>>> list2 = [1, 2, 3, 4, 5 ];
>>> list3 = ["a", "b", "c", "d"];
30
第1章 自动化运维与Python
>>> list4=["all of them",list1,list2,list3]
>>> print ("list1[0]: ", list1[0])
list1[0]: Google
>>> print ("list2[1:5]: ", list2[1:5])
list2[1:5]: [2, 3, 4, 5]
>>> print(list4)
['all of them', ['Google', 'Huawei', 1997, 2000], [1, 2, 3, 4, 5], ['a', 'b', 'c',
'd']]
>>> print(list4[1][1])
Huawei
【示例 1-2】更新一个列表，可以对列表的数据项进行修改，也可以使用 append()方法添
加列表项。
>>> list = ['Google', 'Huawei', 1997, 2000]
>>> print ("第三个元素为 : ", list[2])
第三个元素为 : 1997
>>> list[2] = 2001
>>> print ("更新后的第三个元素为 : ", list[2])
更新后的第三个元素为 : 2001
>>> list.append('xiaomi')
>>> print ("追加后的最后一个元素为 : ", list[-1])
追加后的最后一个元素为 : xiaomi
>>> list.insert(2,'qq')
>>> print ("在第三个位置上插入的元素为 : ", list[2])
在第三个位置上插入的元素为 : qq
【示例1-3】删除列表中的某个元素。
>>> list = ['Google', 'Huawei', 1997, 2000]
>>> del list[0]
>>> print(list)
['Huawei', 1997, 2000]
列表还有一些其他操作，如列表对 + 和 * 的操作符与字符串相似，+ 号用于组合列表，
* 号用于重复列表。
>>> len([1, 2, 3]) #获取列表元素个数len()
3
>>> [1, 2, 3] + [4, 5, 6] #+号用于组合列表
[1, 2, 3, 4, 5, 6]
>>> ['Hi!'] * 10 # *号用于重复列表
['Hi!', 'Hi!', 'Hi!', 'Hi!', 'Hi!', 'Hi!', 'Hi!', 'Hi!', 'Hi!', 'Hi!']
>>> 3 in [1, 2, 3] #判断元素是否在列表中
True
>>> for x in [1, 2, 3]: print(x, end=" ") #遍历列表元素
...
1 2 3 >>> max([1,2,3]) #返回列表最大值
3
>>> min([1,2,3]) #返回列表最小值
1
31
Python自动化运维快速入门
列表的常用方法可参见表1-5。
表1-5 列表的常用方法
名称 功能
list.append(obj) 在列表末尾添加新的对象
list.count(obj) 统计某个元素在列表中出现的次数
list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
list.index(obj) 从列表中找出某个值第一个匹配项的索引位置
list.insert(index, obj) 将对象插入列表
list.pop(obj=list[-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list.remove(obj) 移除列表中某个值的第一个匹配项
list.reverse() 反向列表中元素
list.sort([func]) 对原列表进行排序
list.clear() 清空列表
list.copy() 复制列表
元组与列表类似，用“()”括起，“,”分隔的序列，不同于列表的是，元组是只读的，无
法被修改，在定义时其元素必须确定下来，也可以像列表一样使用索引来访问。
【示例1-4】元组的应用。
>>> t = ('Google', 'Huawei', 1997, 2000) #定义一个元组
>>> t[0] #使用和列表一样的方式访问相应元素
'Google'
>>> t[-1]
2000
>>> t[0]='Baidu' #修改元组的值将会抛出异常
Traceback (most recent call last):
File "", line 1, in 
TypeError: 'tuple' object does not support item assignment
>>> t=() #定义一个空的元组
>>> t
()
>>> type(t)
>>> t=(1,) #定义一个只有一个元素的元组，“,”是元组的特征
>>> （1）==1 # 注意（1）等于1，不是元组
True
注意，元组元素不变是指元组每个元素指向永远不变，如果元组的某个元素是一个列表，
那么这个列表的元素是可以被改变的，但元组指向这个列表永远不变。
【示例1-5】元组的某个元素是列表。
>>> a=['a','b'] #定义一个列表a
>>> b=['c','d'] #定义一个列表b
>>> t=('e','f',a) #定义一个元组t，第三个元素指向列表a
>>> t
32
第1章 自动化运维与Python
('e', 'f', ['a', 'b'])
>>> t[2][0]='x' #这一步相当于修改a[0]=x
>>> t[2][1]='y' #这一步相当于修改a[1]=y
>>> a #验证a
['x', 'y']
>>> t
('e', 'f', ['x', 'y'])
>>> t[2]=b #t[2]指向的是列表a，这个指向无法被修改
Traceback (most recent call last):
File "", line 1, in 
TypeError: 'tuple' object does not support item assignment
如果希望元组中的每个元素无法被修改，就必须保证元组的每一个元素本身也不能变，如
数字、字符串、元组等不可变数据类型。
1.5.4 字典
一提到字典，我们就会想到中华字典、英语词典等，通过给定的单词（key）查找其含义
（value）。在字典里，要查找的单词（key）是唯一的，但不同的单词其含义（value）可能相
同。Python里的字典就是键值对（key-value）组成的集合，且可存储任意类型对象。定义一个
字典非常简单：使用一对花括号{}括起，键值对之间使用“,”分隔。例如：
>>> dict = { 'hello':'你好','world':'世界',} #定义一个字典dict
>>> dict
{'hello': '你好', 'world': '世界'}
>>> dict['hello']
'你好'
>>> len(dict) #计算字典元素个数，即键的总数
2
>>>str(dict) #输出字典，以可打印的字符串表示
"{'hello': '你好', 'world': '世界'}"
字典值可以是任何的 Python 对象，既可以是标准对象，也可以是用户自定义的对象，但
键不行。两个重要的点需要记住：
（1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值就会被记住。
【示例1-6】不允许同一个键出现两次。
>>> dict = { 'hello':'你好','world':'世界','hello':'world'} #键hello的值被更新为
world
>>> dict
{'hello': 'world', 'world': '世界'}
（2）因为键必须不可变，所以可以用数字、字符串或元组充当，用列表则不行，即键必
须为不可变数据类型。
【示例1-7】键必须为不可变数据类型。
>>> d = { 'a':1,'b':2, ['a']:'abc'} #键是列表，会报错
33
Python自动化运维快速入门
Traceback (most recent call last):
File "", line 1, in 
TypeError: unhashable type: 'list'
【示例1-8】遍历字典。
>>> d = { 'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6 } #定义一个字典
>>> for key,value in d.items(): #d.items()方法返回一个键值对的元组（key,value）
... print(key,value)
...
a 1
b 2
c 3
d 4
e 5
f 6
>>> for key in d: #以键来取值
... print(key,d[key]) #python强制缩进，与上一行比有4个空格
...
a 1
b 2
c 3
d 4
e 5
f 6
>>>
【示例1-9】修改字典。
>>> d = { 'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6 }
>>> d['b']='b'
>>> d
{'a': 1, 'b': 'b', 'c': 3, 'd': 4, 'e': 5, 'f': 6}
【示例 1-10】删除字典元素。可以删除单一的元素，也可以一次性删除所有元素，清空
字典，显式地删除一个字典用del命令。
>>> del d['b'] #删除键b
>>> d #删除键b后
{'a': 1, 'c': 3, 'd': 4, 'e': 5, 'f': 6}
>>> d.clear() #清空字典
>>> d
{}
>>> del d #删除字典
>>> d #删除字典后，字典d已不存在
Traceback (most recent call last):
File "", line 1, in 
NameError: name 'd' is not defined
Python字典的内置方法可参见表1-6。
34
第1章 自动化运维与Python
表1-6 字典的常用方法
名称 功能
radiansdict.clear() 删除字典内所有元素
radiansdict.copy() 返回一个字典的浅复制
radiansdict.fromkeys() 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典
所有键对应的初始值
radiansdict.get(key, default=None) 返回指定键的值，如果值不在字典中，则返回default值
key in dict 如果键在字典dict中，则返回true，否则返回false
radiansdict.items() 以列表返回可遍历的元组数组
radiansdict.keys() 以列表返回一个字典所有的键
radiansdict.setdefault(key, default=None) 与get()类似, 但如果键不存在于字典中，则会添加键并将值设
置为default
radiansdict.update(dict2) 把字典dict2的键/值对更新到dict中