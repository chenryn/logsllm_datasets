recompilation. The basic idea is to reserve a large fraction
(actually half) of the IPv6 address space to represent host
identiﬁers [8]. That is, the IPv6 compatible format would
be that of an Host Identity Tag (HIT), which basically is the
result of applying a hash function on the Host Identiﬁer. 
In an HIP aware host the DNS resolver library would re-
turn an HIT if one is available, and otherwise an IPv6 ad-
dress.  Transport  protocols  can  then  handle  the  HITs  or
IPv6 addresses transparently. In the case of HITs, the host
identity layer would then perform the appropriate conver-
sion to both incoming and outgoing packets in a way that is
very similar to the so called host NAT [3].
4.5.
Internal interfaces and APIs
5.
Security
The  conceptual  structure  of  a  node  hosting  end-points  is
depicted in Figure 12. The node has a number of interfaces,
both  physical  and  virtual.  Within  the  host,  the  network
layer implementation takes care of routing, interface selec-
tion  and  other  functions  as  today.  The  new  host  identity
layer implements the new functionality. It is responsible for
implementing the HLP/HIP end-to-end signalling protocol,
and  also  the  forwarding  control  and  directory  query  and
update protocols. 
The transport layer implements transport protocols, e.g.
TCP and UDP, like today. The only difference is that the
transport layer sockets are bound to Host Identiﬁers instead
In the original TCP/IP architecture, a host’s identity is im-
plicitly authenticated by the routing infrastructure. That is,
since the hosts are identiﬁed with IP addresses, and since
IP addresses are the fundamental piece of data used in rout-
ing, the very deﬁnition of the internetwork assures that the
IP packets are indeed sent to the intended hosts. (See also
[24].) In the new architecture, there is no implicit binding
between the host identiﬁers and the routing infrastructure.
Thus, the implicit authentication does not exist any more,
and must be replaced with an explicit one. Additionally, we
must address the problems of address stealing and address
ﬂooding that were described in Section 2.3.
The address stealing and address ﬂooding problems are
not introduced with the end-point concept or the new host
identiﬁers. Instead, they originate from the dynamic bind-
ing  between  the  hosts  themselves  and  their  IP  addresses.
Thus, they exist already in environments that use dynamic
IP  address  assignment:  the  address  stealing  and  ﬂooding
problems are present even in plain vanilla Mobile IP. Fortu-
nately,  introducing  public  key  cryptography  based  host
identiﬁers  that  are  public  keys  makes  it  easier  to  address
these  problems.  In  this  section  we  look  at  the  situation
more closely, starting from the nature of the new identiﬁ-
ers, and continuing to the properties of the new signalling
protocols and new functions.
Initiator
Responder
I1: 
R1: 
I2: 
R2: 
Security Context established
ESP protected messages
I
n
e
x
c
h
a
n
g
e
i
t
i
a
l
5.1. Host Identiﬁers
Figure 13: A typical HIP session
The cryptographic nature of the Host Identiﬁers is the se-
curity cornerstone of the new architecture. Each end-point
generates exactly one public key pair. The public key of the
key pair functions as the Host Identiﬁer. The end-point is
supposed to keep the corresponding private key secret and
not to disclose it to anybody. (Note, however, that e.g. due
to privacy reasons a single user may want to be represented
by several end-points at the network.)
The use of the public key as the name makes it possible
to directly check that a party is actually entitled to use the
name. A simple public key authentication protocol, such as
the one included in the HIP exchange, is sufﬁcient for that.
Compared  to  solutions  where  names  and  cryptographic
keys are separate, the key-oriented naming does not require
any external infrastructure to authenticate identity. In other
words,  no  explicit  Public  Key  Infrastructure  is  needed.
Since  the  identity  is  represented  by  the  public  key  itself,
and  since  any  proper  public  key  authentication  protocol
can be used to check that a party indeed possesses the pri-
vate key corresponding to a public key, a proper authentica-
tion  protocol  sufﬁces  to  verify  that  the  peer  indeed  is
entitled to the name.
This property of being able to verify the identity of any
party without any explicit external infrastructure is the very
cornerstone of our architecture. It allows the architecture to
scale naturally, without requiring extra administrative over-
head.
5.2. Host Layer Protocol (HLP)
The Host Layer Protocol/Host Identity Payload (HLP/HIP)
is the end-point to end-point signalling protocol in our ar-
chitecture. The details of the current protocol proposal are
available as internet drafts [1][7][8] and beyond the scope
of this paper. However, the security properties of the proto-
col are signiﬁcant and explained brieﬂy.
Most importantly, the HLP/HIP protocol performs mu-
tual end-to-end authentication. This is accomplished with a
four-way handshake, consisting of messages I1, R1, I2 and
R2. After exchanging the initial HLP messages, both com-
municating hosts know that at the other end-point there in-
deed  is  an  entity  that  possesses  the  private  key  that
corresponds  to  its  Host  Identiﬁer.  Additionally,  the  ex-
change creates a pair of IPSEC Encapsulated Security Pay-
load (ESP) security associations, one in each direction. The
hosts are supposed to use the ESP security associations to
protect the integrity of the packets ﬂowing between them;
optionally, ESP can also be used to encrypt the packets. 
More formally, the initial HLP/HIP message exchange
creates an Host Identity Security Context that contains the
public keys of the communicating end-points, the ESP se-
curity associations, and implicit knowledge that the public
keys were authenticated and present when the context was
created. The ﬂow of a typical HIP session is illustrated in
Figure 13.  Note  that  in  the  ﬁrst  message  (I1)  the  re-
sponder’s  HIT  may  be  NULL,  indicating  opportunistic
mode of operation.
In addition to protecting the network layer integrity of
the  payload  trafﬁc,  the  Host  Identity  Security  Context  is
used to secure the signalling messages exchanged between
the end-points. For example, once the initial messages are
exchanged  and  the  security  context  is  in  place,  the  end-
points inform their peers about the interfaces they have and
the  current  IP  addresses  assigned  to  the  interfaces.  In  ef-
fect, this shares information about the current multi-hom-
ing  situation  of  the  end-points.  Each  end-point  has
complete freedom to select which interfaces to announce to
the peer. 
To the peer, it is immaterial whether the announced in-
terfaces are real or virtual. All it needs to know is to make
sure  that  the  end-point  is  indeed  reachable  through  the
claimed  IP  addresses.  The  reachability  needs  to  be
checked,  or  otherwise  the  mechanism  may  be  used  to
launch a number of complicated Denial-of-Service attacks.
At  the  IETF  mobile-ip  Working  Group,  the  reachability
veriﬁcation requirement has been extensively studied, and
recently named Return Routability (RR).
Thus, initially all announced addresses should be con-
sidered as unveriﬁed. Using an RR protocol the peers can
verify the reachability of the addresses given. Since there is
already  a  pair  of  ESP  Security Associations,  the  simplest
way of implementing RR is to send an ESP protected chal-
lenge packet to the given address, and making sure that an
ESP  protected  response  is  received.  Once  a  challenge-re-
sponse pair has been exchanged for a given address, the ad-
dress can be marked functional. 
5.3. Packet forwarding
From the security point of view, packet forwarding creates
new  security  vulnerabilities.  Firstly,  packet  forwarding
could  allow  packets  going  to  a  legitimate  host  to  be  di-
verted either to an attacker or to a bogus location. For ex-
ample, if an access router acts as a packet forwarder, this
kind of attack could be used to create Man-in-the-Middle,
masquerade,  or  Denial-of-Service  situations  against  any
host behind the access router. Secondly, packet forwarding
could  be  used  to  divert  existing  packet  streams  to  a  host
that  is  a  target  of  a  Distributed  Denial-of-Service  attack,
see e.g. [11][27]. Thus, before starting to forward packets,
the forwarding agent must make sure that there is nobody
else but the requestor who wants to receive packets sent to
the intercepted address, and that the requestor itself is able
to receive packets sent to the new destination.
To generalize, we want to have an architecture where a
mobile  host  may  ask  for  a  forwarding  agent  to  be  estab-
lished (almost) anywhere in the network, and may establish
a  temporary  virtual  interface  with  the  help  of  such  a  for-
warding agent. However, from the security point of view, it
is easier to ask a current or former Access Router to act as a
packet forwarder than to request a generic node to provide
packet forwarding service. We next look at these two situa-
tions.
Access Router as Forwarding Agent. If 
end-point
wants to use its current or recent Access Router as a packet
forwarder, the case is security wise slightly easier than the
generic  case. As  we  discussed  earlier,  in  our  architecture
we assume that the network assigns addresses (or at least
routing  preﬁxes)  to  the  interfaces.  Now,  under  these  ar-
rangements, the Access Router could easily know to whom 
it has assigned (or who has claimed ownership over) an ad-
dress and for how long. Thus, if the end-point later, while
the  address  assignment  is  still  valid,  requests  the Access
Router to start forwarding packets sent to that address, the
Access Router can protect against address stealing just by
an 
checking  that  the  requestor  is  indeed  the  same  end-point
that the address was assigned to.That is, the forwarding re-
quest needs to be signed by the end-point, and the access
router  simply  checks  that  the  signature  matches  with  the
address owner’s public key. 
Unfortunately the simple signature check does not com-
pletely  protect  against  packet  ﬂooding  denial-of-service,
and  therefore  a  Return  Routability  challenge-response  is
still needed.
Arbitrary node as Forwarding Agent. To  support  packet
forwarding at an arbitrary location, e.g. for Local Mobility
Management  (LMM),  one  possibility  is  to  devise  virtual
access  routers. A  virtual  access  router  would  be  a  router
that serves addresses for forwarding purposes only. That is,
any node in the network could ask for an address from it,
and if given an address, ask packets sent to that address to
be forwarded to another address. Thus, an end-point need-
ing a virtual interface at a location served by such a virtual
access router would contact the virtual access router for a
new address. The access router assigns an unused address
to  the  end-point,  and  the  end-point  requests  that  packets
sent to that address are forwarded another address, the end-
points current real address. The access router then checks
that the end-point is really reachable at the forward destina-
tion, and given so, starts forwarding packets.
5.4. Privacy
Using public keys as primary identiﬁers is clearly a poten-
tial source of privacy problems. If each user had just a sin-
gle public key and that key is repeatedly used by the user,
the very nature of public key cryptography leads to a situa-
tion where it is fairly easy to link together all the transac-
tions  made  by  the  user.  In  the  case  of  the  HLP/HIP 
architecture,  the  situation  does  not  need  to  be  that  bad.
Since  a  single  computer  may  host  several  end-points  and
therefore have several Host Identiﬁers, it is easy for a user
to have several public keys instead of just one. One public
key can be used as a more permanent identiﬁer, allowing
others  to  contact  the  user,  while  other  keys  can  be  com-
pletely temporary and periodically replaced with new ones.
A temporary Host Identiﬁer needs to be valid only as long
as there are active connections associated with it.
5.5. Security summary
From the discussion so far it should be clear that address-
ing the mobility and multi-homing related security issues is
much easier with the presence of cryptographic Host Iden-
tiﬁers than without them. Basically, we have two security
issues that we have to address: ﬁrstly, we have to take care
of basic identity authentication and related issues, and sec-
application
Daemon
Socket Layer
TCP/UDP
IP + IPsec
HLP kernel
module
Figure 14: Implementation architecture
ondly we must take care of packet forwarding security. As
an added beneﬁt, we are also able to enhance privacy.
Since  we  are  using  public  keys  as  the  names  for  end-
points, identity authentication is trivial. All that is required
is  a  good  authentication  and  key  agreement  protocol;  no
certiﬁcates  or  external  entities  are  needed.  Basic  multi-
homing and mobility brings in the requirement of checking
each new IP address for reachability, to make sure that the
host currently is reachable at the IP addresses it claims to
be at.
Packet forwarding brings forth a couple of new security
issues,  and  the  node  receiving  a  forwarding  request  must
take care of these. Firstly, the forwarding agent either must
know that the intercepted address really has been assigned
to the requesting node and that the assignment is still valid,
or it must know that the address is currently completely un-
assigned, and that it therefore can be securely assigned to
the requesting node. 
The  second  issue  with  packet  forwarding  is  to  make
sure that the requestor is reachable at the address where the
forwarded packets should be sent to. The easy way to take
care of that is to use a challenge-response protocol to check
that the requestor is reachable at the target address. 
6.
Implementation status
We have implemented HLP/HIP for NetBSD 1.6. The de-
sign  consists  of  the  daemon  and  loadable  kernel  module;
see Figure 14. The kernel module registers hooks at the IP 
and socket layers. The core protocol state-machine and ac-
tual packet handling are implemented in the kernel while
the multi-threaded daemon takes care of cryptographic cal-
culations. Communication between the daemon and kernel
is asynchronous. 
To get an idea about performance, we measured the time
taken  by  the  four-way  handshake,  with  different  puzzle
challenge values K [1]. The K is sent by the responder to
the  initiator,  and  a  larger  K  value  forces  the  initiator  to