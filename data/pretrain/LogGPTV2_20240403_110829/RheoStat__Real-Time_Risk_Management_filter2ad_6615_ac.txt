(17)
There are O(2|P|) ways of choosing subsets ρ(Ω(P )) ⊆ Ω(P ) for risk reduction
or subsets ρ(Ψ(P )) ⊆ Ψ(P ) for risk relaxation. When selecting from the possibilities,
the primary objective is the maintenance of the bound R(cid:3)(cid:3)  R0 then the system repeats the above from Step 3 onwards. If
Step 6 The set of safeguards ρ(Ω(P )) must be activated and ρ(Ω(P )) should be
R(cid:3)(cid:3) ≤ R0 then proceed to the next step.
transferred from Ω(P ) to Ψ(P ).
The time complexity is O(|ρ(Ω(P ))|). In the worst case, this is O(|Ω(P )|) ≤
O(|P|). Unless a large variety of attacks are simultaneously launched against the target,
the response set will be small.
Risk Relaxation. In the case of risk relaxation, the algorithm becomes:
Step 1 For pλ ∈ Ψ(P ) calculate:
κ(pλ) =
{T (tα) ×
(cid:1)
tα:pλ∈( ˆP (tα)∩Ψ (P ))
v(pλ) × (1 − v(cid:3)(pλ))
| ˆP (tα)|
f(pλ)
× C(tα)}
(25)
(26)
Step 2 Set ρ(Ψ(P )) = φ.
Step 3 Find the safeguard which yields the least risk reduction per instance of use:
pmin = min κ(pλ), pλ ∈ Ψ(P )
Add it to ρ(Ψ(P )).
Step 4 Calculate R(cid:3)(cid:3)
:
(cid:1)
R(cid:3)(cid:3) = Ra +
κ(pλ) × f(pλ)
(27)
Step 5 If R(cid:3)(cid:3)  R0, undo the last iteration of Step 3.
7
Implementation
Our prototype augments Sun’s Java Runtime Environment (version 1.4.2) running on
Redhat Linux 9 (with kernel 2.4.20). Security in the Java 2 model is handled by the
AccessController class, which in turn invokes the legacy SecurityManager. We in-
strumented the latter to invoke an Initialize class which constructs and initializes an
instance of the RheoStat class [Gehani03]. A shutdown hook is also registered with
the SecurityManager so that the intrusion detector is terminated when the user appli-
cation exits. The ActiveMonitor class initializes the ﬁrst time the AccessController’s
checkPermission() method is invoked.
RheoStat implements a limited state transition analysis intrusion detector, based on
the methodology of [Ilgun95]. It adds a pre-match timer and post-match timer for each
signature. The ﬁrst handles false partial matches by reseting the signature if the match
doesn’t complete in a pre-determined interval. The second is used to reset the system
after a signature match completes and sufﬁcient time has elapsed to deem that the threat
has passed.
308
Ashish Gehani and Gershon Kedem
Disabled
Responses
Heap
Activate response
Deactivate response
Enabled
Responses
Heap
Safeguard
Frequency in Workload
Key =
Risk Reduction
Safeguard
Key =
Risk Relaxation
Frequency in Workload
Fig. 4. When the Risk Manager needs to activate a response to effect risk reduction, it attempts to
select the one which will minimize the runtime overhead while maximizing the risk reduction.
7.1 Risk Manager
A RiskManager class uses events generated by RheoStat and invokes the ActiveMon-
itor’s enableSafeguard() and disableSafeguard() methods as required. The µ matching
function, described in Section 4.1, is used for estimating the threat from a partial match.
We use:
µ(tα, E
≺∩ S(tα)) =
(28)
|E
≺∩ S(tα)|
|S(tα)|
The new risk level is calculated with the updated threat levels. If the risk level increases
above or decreases below the risk tolerance threshold, the following course of action
occurs.
The RiskManager maintains two heap data structures as illustrated in Figure 4. The
ﬁrst one contains all the permissions for which the ActiveMonitor has predicates but
are currently unused. The objects are stored in the heap using the cost-to-beneﬁt ratios
as the keys. The second heap contains all the permissions for which the ActiveMonitor
is currently evaluating predicates before it grants permissions. The objects in this heap
are keyed by the beneﬁt-to-cost ratios. When the risk level rises, the RiskManager
extracts the minimum value element from the ﬁrst heap, and inserts it into the second
heap. The corresponding predicate evaluation is activated. The risk level is updated. If
it remains above the risk tolerance threshold the process is repeated until the risk has
reduced sufﬁciently. Similarly, when an event causes the risk to drop, the RiskManager
RheoStat: Real-Time Risk Management
309
extracts the minimum element repeatedly from the second heap, inserting it into the ﬁrst
heap, disabling predicate checks for the permission, while the risk remains below the
threshold of tolerance. In this manner, the system is able to adapt its security posture
continuously.
8 Evaluation
The NIST ICAT database [ICAT] contains information on over 6, 200 vulnerabilities in
application and operating system software from a range of sources. These are primarily
classiﬁed into seven categories. Based on the database, we have constructed a suite of
attacks, with each attack illustrating the exploitation of a vulnerability from a different
category. In each case, the system component which includes the vulnerability is a Java
servlet that we have created and installed in the W3C’s Jigsaw web server (version
2.2.2) [Jigsaw]. While our approach is general, we focus below only on 4 categories for
brevity. We describe a scenario that corresponds to each attack, including a description
of the vulnerability that it exploits, the intrusion signature used to detect it and the way
the system responds. The global risk tolerance threshold is set at 20.
8.1 Conﬁguration Error
A conﬁguration error introduces a vulnerability into the system due to setting that are
controlled by the user. Although the conﬁguration is implemented faithfully by the sys-
tem, it allows the security policy to be subverted. In our example, the servlet authen-
ticates the user before granting access to certain documents. The password used is a
permutation of the username. As a result, an attacker can guess the password after a
small number of attempts. The ﬂaw here is the weak conﬁguration.
When the following sequence of
events is detected, an attack that exploits
this vulnerability is deemed to have oc-
curred. First, the web server accepts a
connection to port 8001. Second, it serves
the speciﬁc HTML document which in-
cludes the form which requests authenti-
cation information as well as the desired
document. Third, the server receives an-
other connection. Fourth, the servlet that
veriﬁes if the ﬁle can be served to the
client, based on the authentication infor-
mation provided, will execute. Fifth, the decision to deny the request is logged. If this
sequence of events repeats twice again within the pre-match timeout of the signature,
which is 1 minute, an intrusion attempt is deemed to have occurred.
In Figure 5, events 7− 18 and 20− 22 correspond to this signature. Events 1− 6 are
of other signatures that cause the risk level to rise. Event 18 causes the risk threshold
to be crossed. As a result, the RiskManager searches for and ﬁnds the risk reduction
measure which has the lowest cost-beneﬁt ratio. The system enables a predicate for
the permission that controls whether the servlet can be executed. This is event 19 and
reduces the risk. The predicate checks whether the current time is within the range of
Fig. 5. Attack exploiting a conﬁguration error.
310
Ashish Gehani and Gershon Kedem
business operating hours. It allows the permission to be granted only if it evaluates to
true. During operating hours, it is likely that the intrusion will be ﬂagged and seen by
an administrator and it is possible that the event sequence occurred accidentally, so the
permission continues to be granted. Outside those hours, it is likely that this is an attack
attempt and no administrator is present, so the permission is denied thereafter, till the
post-match timer expires after one hour and the threat is reset.