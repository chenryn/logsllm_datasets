# 生成静态网页内容
如果浏览到`http://localhost:8000/todos`，虽然应用不再返回错误，但是网页的格式还是被破坏了。这里的问题是，Django 要求您运行一个名为`collectstatic`的单独的`manage.py`管理任务，该任务生成静态内容并将其放置在`STATIC_ROOT`设置定义的位置。我们应用的发布设置将文件位置定义为`/public/static`，因此我们需要在应用启动之前运行`collectstatic`任务。请注意，Django 提供来自`/static`网址路径的所有静态内容，例如`http://localhost:8000/static`。
有几种方法可以用来解决这个问题:
*   创建一个在启动时运行的入口点脚本，并在启动应用之前执行`collectstatic`任务。
*   创建一个外部卷并运行一个执行`collectstatic`任务的容器，在该卷中生成静态文件。然后，在装载外部卷的情况下启动应用，确保它可以访问静态内容。
这两种方法都是有效的，但是，为了介绍 Docker 卷的概念以及如何在 Docker Compose 中使用它们，我们将采用第二种方法。
要在 Docker Compose 中定义卷，可以使用顶层`volumes`参数，该参数允许您定义一个或多个命名卷:
```
version: '2.4'
volumes:
 public:
 driver: local
services:
  test:
    ...
    ...
  release:
    ...
    ...
  app:
    extends:
      service: release
    depends_on:
      db:
        condition: service_healthy
    volumes:
 - public:/public
    ports:
      - 8000:8000
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
 - --check-static=/public
  migrate:
    ...
    ...
  db:
    ...
    ...
```
在前面的示例中，您添加了一个名为`public`的卷，并将驱动程序指定为本地，这意味着它是一个标准的 Docker 卷。然后使用应用服务中的`volumes`参数将公共卷装载到容器中的`/public`路径，最后配置`uwsgi`来服务来自`/public`路径的静态内容请求，这避免了为服务静态内容而对 Python 解释器进行昂贵的应用调用。
在拆除您当前的 Docker Compose 环境后，生成静态内容所需的只是`docker-compose run`命令:
```
> docker-compose down -v ...
...
> docker-compose up migrate
...
...
> docker-compose run app python3 manage.py collectstatic --no-input
Starting todobackend_db_1 ... done
Copying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/prepopulate.js'
Traceback (most recent call last):
  File "manage.py", line 15, in 
    execute_from_command_line(sys.argv)
  File "/usr/lib/python3.6/site-packages/django/core/management/__init__.py", line 371, in execute_from_command_line
    utility.execute()
...
...
PermissionError: [Errno 13] Permission denied: '/public/static'
```
在前面的示例中，`collectstatic`任务失败，因为默认情况下，卷是作为根创建的，容器作为应用用户运行。为了解决这个问题，我们需要在`Dockerfile`预先创建`/public`文件夹，并使应用用户成为该文件夹的所有者:
```
# Test stage
...
...
# Release stage
FROM alpine
LABEL application=todobackend
...
...
# Copy and install application source and pre-built dependencies
COPY --from=test --chown=app:app /build /build
COPY --from=test --chown=app:app /app /app
RUN pip3 install -r /build/requirements.txt -f /build --no-index --no-cache-dir
RUN rm -rf /build
# Create public volume
RUN mkdir /public
RUN chown app:app /public
VOLUME /public
# Set working directory and application user
WORKDIR /app
USER app
```
请注意，上面显示的方法仅适用于使用 Docker 卷装载创建的卷，如果您没有在 Docker 引擎上指定主机路径，Docker Compose 将使用这种方法。如果指定主机路径，卷将被绑定装载，这将导致默认情况下卷具有根所有权，除非您在主机上预先创建了具有正确权限的路径。我们将在以后使用弹性容器服务时遇到这个问题，所以请记住这一点。
因为您修改了 Dockerfile，所以您需要告诉 Docker Compose 重建所有映像，这可以通过使用`docker-compose build`命令来完成:
```
> docker-compose down -v
...
...
> docker-compose build Building test
Step 1/13 : FROM alpine AS test
...
...
Building release
...
...
Building app
...
...
Building migrate
...
...
> docker-compose up migrate
...
...
> docker-compose run app python3 manage.py collectstatic --no-input
Copying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/prepopulate.js'
Copying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/SelectFilter2.js'
Copying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/change_form.js'
Copying '/usr/lib/python3.6/site-packages/django/contrib/admin/static/admin/js/inlines.min.js'
...
...
> docker-compose up app
```
如果现在浏览到`http://localhost:8000`，应该会显示正确的静态内容。
When you define a local volume in Docker Compose, the volume will be automatically be destroyed when you run the `docker-compose down -v` command. If you wish to persist storage independently of Docker Compose, you can define an external volume, which you are then responsible for creating and destroying.  See [https://docs.docker.com/compose/compose-file/compose-file-v2/#external](https://docs.docker.com/compose/compose-file/compose-file-v2/#external) for more details.
# 创建验收测试
既然应用已经正确配置，那么为发布阶段配置的最后一项任务就是定义验收测试，验证应用是否按预期工作。验收测试是为了确保您构建的发布映像在尽可能接近生产的环境中运行，并且在本地 Docker 环境的约束下运行。至少，如果您的应用是一个 web 应用或 API 服务，例如 todobackend 应用，您可能只是验证应用返回了一个有效的 HTTP 响应，或者您可能会运行一些关键功能，例如创建一个项目、更新一个项目和删除一个项目。
对于 todobackend 应用，我们将使用一个名为 BATS (Bash 自动化测试系统)的工具创建一些基本测试来演示这种方法。BATS 非常适合使用 bash 的系统管理员，它利用现成的工具来执行测试。
要开始使用 BATS，我们需要使用 BATS 语法在**到**存储库的`src`文件夹中创建一个名为`acceptance.bats`的测试脚本，您可以在[https://github.com/sstephenson/bats](https://github.com/sstephenson/bats)了解更多信息:
```
setup() {
  url=${APP_URL:-localhost:8000}
  item='{"title": "Wash the car", "order": 1}'
  location='Location: ([^[:space:]]*)'
  curl -X DELETE $url/todos
}
@test "todobackend root" {
  run curl -oI -s -w "%{http_code}" $APP_URL
  [ $status = 0 ]
  [ $output = 200 ]
}
@test "todo items returns empty list" {
  run jq '. | length' <(curl -s $url/todos)
  [ $output = 0 ]
}
@test "create todo item" {
  run curl -i -X POST -H "Content-Type: application/json" $url/todos -d "$item"
  [ $status = 0 ]
  [[ $output =~ "201 Created" ]] || false
  [[ $output =~ $location ]] || false
  [ $(curl ${BASH_REMATCH[1]} | jq '.title') = $(echo "$item" | jq '.title') ]
}
@test "delete todo item" {
  run curl -i -X POST -H "Content-Type: application/json" $url/todos -d "$item"
  [ $status = 0 ]
  [[ $output =~ $location ]] || false
  run curl -i -X DELETE ${BASH_REMATCH[1]}
  [ $status = 0 ]
  [[ $output =~ "204 No Content" ]] || false
  run jq '. | length' <(curl -s $APP_URL/todos)
  [ $output = 0 ]
}
```
BATS 文件包括一个`setup()`函数和多个测试用例，每个测试用例前面都有`@test`标记。`setup()`函数是一个特殊的函数，将在每个测试用例之前运行，对于定义公共变量和确保应用状态在每个测试之前是一致的非常有用。您可以看到，我们设置了一些变量，用于各种测试用例:
*   `url`:定义被测应用的 URL。这是由`APP_URL`环境变量定义的，如果没有定义`APP_URL`，则默认为`localhost:8000`。
*   `item`:定义一个 JSON 格式的测试待办事项，在测试过程中通过 Todos API 创建。
*   `location`:定义一个正则表达式，用于定位和捕获位置头的值，每当您创建 Todo 项时，都会在 HTTP 响应中返回该值。正则表达式的`([^[:space:]]*)`部分捕获零个或多个字符，直到遇到空白(由`[:space:]`指示符指定)。例如，如果位置头是`Location: http://localhost:8000/todos/53`，正则表达式将捕获`http://localhost:8000/todos/53`。
*   `curl`命令:最后的设置任务是删除数据库中的所有待办事项，可以通过向`/todos` URL 发送 delete 请求来完成。这确保了 todobackend 数据库在每次测试运行时都是干净的，从而降低了不同测试引入破坏其他测试的副作用的可能性。
BATS 文件接下来定义了几个测试用例:
*   `todobackend root`:这包括`run`功能，运行指定的命令，在一个名为 status 的变量中捕获命令的退出代码，在一个名为`output`的变量中输出命令。对于这个场景，测试运行`curl`命令的特殊配置，只捕获返回的 HTTP 状态码，然后通过调用`[ $status = 0 ]`验证`curl`命令成功完成，通过调用`[ $output = 200 ]`验证返回的 HTTP 状态码是 200 码。这些测试是常规 shell *测试表达式*，相当于许多编程语言中的规范`assert`语句。
*   `todo items returns empty list`:这个测试用例使用`jq`命令传递调用`/todos`路径的输出。请注意，因为您不能将管道与特殊的`run`函数结合使用，所以我使用了 bash 进程替换语法`<(...)`，以使`curl`命令的输出显示为由`jq`命令读取的文件。
*   `create todo item`:首先创建一个 todo 项，检查返回的退出代码是否为零，然后使用 *bash 条件表达式*(如`[[...]]`语法所示)来验证`curl`命令的输出在 HTTP 响应中包含`201 Created`，这是创建项时的标准响应。当使用 bash 条件表达式时，需要注意的是，如果条件表达式失败，BATS 将不会检测到错误，因此我们使用`|| false`特殊语法，该语法仅在条件表达式失败并返回非零响应`false`的情况下进行评估，如果测试表达式失败，将导致测试用例失败。条件表达式使用`=~`正则表达式运算符(该运算符在条件表达式中不可用，因此我们使用 bash 测试表达式)，第二个条件表达式计算设置函数中定义的`location`正则表达式。最后一个命令使用特殊的`BASH_REMATCH`变量，该变量包含最近一次条件表达式求值的结果，在这种情况下，它是位置头中匹配的网址。这允许我们在创建 Todo 项目时捕获返回的位置，并验证创建的项目是否与我们发布的项目匹配。
*   `delete todo item`:这将创建一个 Todo 项目，捕获为该项目返回的位置，删除该项目，然后通过验证删除后数据库中 Todo 项目的数量为零来验证该项目实际上已被删除。回想一下，setup 函数在每个测试用例之前运行，它会清除所有的 Todo 项，因此在这个测试用例的开始，Todo 项的计数总是为零，并且创建然后删除一个项的动作应该总是将计数返回到零。这个测试用例中使用的各种命令是基于`create todo item`测试用例中引入的概念，因此我不会详细描述每个命令。
现在我们已经定义了一套验收测试，现在是时候修改 Docker 环境，以便在应用成功启动后支持这些测试的执行。
我们首先需要将`curl`、`bats`和`jq`包添加到 todobackend 存储库根的`Dockerfile`中:
```
# Test stage
FROM alpine AS test
LABEL application=todobackend
...
...
# Release stage
FROM alpine
LABEL application=todobackend
# Install dependencies
RUN apk add --no-cache python3 mariadb-client bash curl bats jq
...
...
```
接下来，我们需要向`docker-compose.yml`文件中添加一个名为`acceptance`的新服务，它将等待`app`服务运行正常，然后运行验收测试:
```
version: '2.4'
volumes:
  public:
    driver: local
services:
  test:
    ...
    ...
  release:
    ...
    ...