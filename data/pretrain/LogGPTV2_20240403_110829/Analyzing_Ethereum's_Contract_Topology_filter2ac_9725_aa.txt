title:Analyzing Ethereum's Contract Topology
author:Lucianna Kiffer and
Dave Levin and
Alan Mislove
Analyzing Ethereum’s Contract Topology
Lucianna Kiffer
Northeastern University
PI:EMAIL
Dave Levin
University of Maryland
PI:EMAIL
Alan Mislove
Northeastern University
PI:EMAIL
ABSTRACT
Ethereum is the second most valuable cryptocurrency today, with
a current market cap of over $68B. What sets Ethereum apart from
other cryptocurrencies is that it uses the blockchain to not only
store a record of transactions, but also smart contracts and a his-
tory of calls made to those contracts. Thus, Ethereum represents a
new form of distributed system: one where users can implement
contracts that can provide functionality such as voting protocols,
crowdfunding projects, betting agreements, and many more. How-
ever, despite the massive investment, little is known about how
contracts in Ethereum are actually created and used.
In this paper, we examine how contracts in Ethereum are created,
and how users and contracts interact with one another. We modify
the geth client to log all such interactions, and find that contracts
today are three times more likely to be created by other contracts
than they are by users, and that over 60% of contracts have never
been interacted with. Additionally, we obtain the bytecode of all
contracts and look for similarity; we find that less than 10% of user-
created contracts are unique, and less than 1% of contract-created
contracts are so. Clustering the contracts based on code similarity
reveals even further similarity. These results indicate that there is
substantial code re-use in Ethereum, suggesting that bugs in such
contracts could have wide-spread impact on the Ethereum user
population.
ACM Reference Format:
Lucianna Kiffer, Dave Levin, and Alan Mislove. 2018. Analyzing Ethereum’s
Contract Topology. In 2018 Internet Measurement Conference (IMC ’18), Oc-
tober 31-November 2, 2018, Boston, MA, USA. ACM, New York, NY, USA,
6 pages. https://doi.org/10.1145/3278532.3278575
1 INTRODUCTION
Ethereum is a novel cryptocurrency that uses a blockchain not only
to store a record of transactions, but also to store user-generated
programs called smart contracts and a history of calls made to those
contracts. Smart contracts expand the functionality and usability of
blockchain-based cryptocurrencies; users have developed contracts
to implement voting protocols, funding programs, gambling, and
many more. As a result, Ethereum is currently the second most valu-
able cryptocurrency with a market cap of over 68 billion dollars as
of May 2018, and various other cryptocurrencies are incorporating
smart contracts.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5619-0/18/10...$15.00
https://doi.org/10.1145/3278532.3278575
Smart contracts introduce a new layer of complexity and inter-
activity to the already-diverse ecosystem of cryptocurrencies. At
the bottommost layer, most cryptocurrencies are built on top of
a peer-to-peer communication substrate (e.g., the Kademlia [15]
distributed hash table in Ethereum), which have received significant
study [17]. At the topmost layer, users interact with one another,
perform transactions, and make large protocol decisions such as
when to fork—these dynamics, as well, have been studied exten-
sively [13]. Smart contracts sit somewhere in the middle: users
create them and interact with them (e.g., by contributing to a “go-
fund-me” contract), but they also serve as an intermediate layer, as
contracts can be built to rely on other contracts.
Although smart contracts are in many ways the essence of
Ethereum and other contract-based cryptocurrencies, surprisingly
little is known about them empirically. Many open questions re-
main: How many distinct contracts are there? How long-lived are
they? To what extent are users creating wholly new contracts versus
copying existing code? How many contracts rely on the availability
of a given contract?
To answer these questions and more, this paper initiates the study
of Ethereum’s smart contract topology. Viewing contracts as nodes
and contract calls as edges, we are able to measure the importance,
connectivity, and central points of failure of Ethereum’s smart
contracts. To do so, we collect the bytecode of all contracts published
to the Ethereum blockchain during its first 5 million blocks (almost
three years), and also collect a trace of an instrumented Ethereum
virtual machine (geth) to log all interactions between users and
contracts. We apply the results of this analysis to answer two broad
questions:
1. How is Ethereum being used? With the rampant speculation in
the cryptocurrency markets (e.g., Bitcoin), one may wonder how
this has impacted Ethereum. We find that while Ethereum’s mar-
ket cap and exchange rate has grown over 1,000-fold during our
measurement period, the fraction of activity on Ethereum that in-
volves contracts has remained relatively constant (roughly 1/3 of all
transactions are destined to contracts, rather than users). However,
we do observe evidence of a number of attacks on the Ethereum
platform, often exploiting mis-priced virtual machine operations
that were later adjusted.
2. How are contracts being used? Given the high level of interaction
with contracts, we examine how these contracts are created and
how they interact. Surprisingly, we find that roughly three times
more contracts today are created by other contracts than are created
by users; many of these contracts are sub-currency contracts, or
cryptocurries built on top of Ethereum. Additionally, we find that
roughly 60% of all contracts that have been created have never
been interacted with, suggesting there exists significant amounts
of dormant code and currency. Finally, we find extremely high
levels of code re-use and code similarity: the 1.2M user-created
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Lucianna Kiffer, Dave Levin, and Alan Mislove
contracts can be reduced to 5,877 contract “clusters” that have
highly-similar bytecode. This high level of code re-use suggests
that bugs or vulnerabilities in these contracts could easily impact
thousands more; such vulnerabilities have been discovered in the
past, and have led to hundreds of millions of dollars in lost value [12,
23].
2 BACKGROUND
We now provide background on Ethereum, how it works, and the
dataset that we collected for this paper.
2.1 Ethereum
Ethereum is a blockchain-based distributed system, much in the
spirit of related systems such as Bitcoin. However, it has a number
of unique features that make it distinct. Most notably, unlike other
blockchain-based systems that primarily serve as a virtual currency,
Ethereum serves both as a virtual currency and a distributed virtual
machine.1 Users can upload code to Ethereum—called contracts—
that are run in a deterministic fashion by all participants; each
contract has its own memory state and currency balance. The cre-
ating user and others can later invoke (or call) these contracts, in
response to which contracts can transfer funds or call and even
create other contracts.
Internally, Ethereum is based on accounts, which can either be
controlled by a public/private key pair (called external accounts;
these are for users) or controlled by code (called contract accounts).
Both types of accounts have storage (essentially a random-access
memory that maps 256-bit addresses to 256-bit values) and a credit
balance of Ether (the unit of currency in Ethereum). Accounts can
interact via messages that can come in multiple forms; one of these
is transactions that appear on the blockchain. Each transaction
contains a payload (which may be empty) as well as an amount of
Ether (which may be 0). The payload and Ether are used differently
in different contexts, as described below.
Ethereum has experienced a number of attacks on different as-
pects of its distributed virtual machine during its short lifetime.
These include attacks on coding errors in popular contracts (such
as the DAO attack that allowed an attacker to steal $50M and re-
sulted in a hard fork [13]), attacks on incorrect settings of the cost
of virtual machine opcodes (such as the “Spurious Dragon” and
“Tangerine Whistle” hard forks that changed the price of certain
operations [2, 3]), and contracts whose popularity inadvertently led
to denial-of-service-like behavior (such as the massive popularity
of “Crypto Kitties” that slowed the entire Ethereum network [4]).
As we will see later in the paper, responding to each of these attacks
has significantly altered the behavior of many contracts.
2.2 Opcodes
The Ethereum VM supports over 100 different instructions called
opcodes [26]. Each opcode has a different cost to execute, based on
the amount of resources that it requires. Many of these provide
typical low-level features like mathematical operations (e.g., ADD),
memory loads and stores (e.g., MLOAD), and other bookkeeping (e.g.,
GETPC). However, there are a few opcodes that we use when trying
to understand the Ethereum contract ecosystem, which we describe
1Technically, Ethereum offers a stack-based virtual machine and does not use registers.
below. First, contracts are created and destroyed using one of three
mechanisms:
Users create new contracts by sending a transaction to a special
0x0 address; the payload of this transaction is the bytecode
of the new contract.
CREATE is an opcode that allows a contract to create another
contract. One of the arguments is the raw bytecode that the
new contract should use.
SELFDESTRUCT is an opcode that allows a contract to self-destruct.
One of the arguments is a destination address to transfer the
remaining balance of the contract to.
Second, there are a few ways in which one account can call another
contract’s code:
Users can call contracts by sending a transaction to the contract’s
address, with the function being called and the inputs to the
function in the payload. This call may result in messages to
other contracts in the form of the opcodes below.
CALL is an opcode that allows a contract A to call contract C, and
C’s code runs in the context of C. In other words, C’s storage
is used, so C’s code can read/write from C’s storage.
CALLCODE is an opcode that allows a contract A to call contract C,
and C’s code runs in the context of A. Thus, A’s storage is
used for all reads and writes. Unfortunately, CALLCODE had a
bug in its implementation and has been deprecated in favor
of DELEGATECALL.
DELEGATECALL is a newer version of CALLCODE that fixes
CALLCODE and was released in 2015.
STATICCALL is the same as CALL, except that it does not allow any
state modifications during execution of the callee (or any
sub-calls). It was introduced in 2017 in response to certain
reentrancy attacks.
2.3 Dataset
One feature of Ethereum is that all contract state and code is public;
this is necessary to implement the distributed virtual machine.
This allows us to obtain data on how Ethereum is actually used by
running a modified version of the geth Ethereum client. As part of
its operation, the geth client will download and execute the entire
history of the Ethereum distributed virtual machine; we modify
this client to log all of the operations above (contract creations,
deletions, and calls) that were successfully executed. We ran this
client up through the 5,000,000th block, covering a time period
from inception (in 2015) through January 30, 2018. Additionally,
we query the geth client for all transaction data including the