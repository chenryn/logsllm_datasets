            }
        ],
        "sessionId": "test-demo-session-id_anystr"
    }
测试成功。
Response如下(可能不重要，仅供参考)
    HTTP/1.1 200 OK
    Connection: close
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept
    Access-Control-Allow-Credentials: true
    Access-Control-Allow-Methods: OPTIONS, POST, GET
    Set-Cookie: context-profile-id=281304ce-0687-42cb-9899-d596421bbb9e; Path=/; Expires=Wed, 24-Nov-2021 03:26:27 GMT; Max-Age=31536000
    Expires: Thu, 01 Jan 1970 00:00:00 GMT
    Set-Cookie: context-profile-id=54d3f93c-0b12-4a4c-9843-87738cdc986b; Path=/; Expires=Wed, 24-Nov-2021 03:26:27 GMT; Max-Age=31536000
    Content-Type: application/json;charset=utf-8
    Server: Jetty(9.4.22.v20191022)
    {"profileId":"54d3f93c-0b12-4a4c-9843-87738cdc986b","sessionId":"test-demo-session-id_anystr","profileProperties":null,"sessionProperties":null,"profileSegments":null,"filteringResults":{"myfilter1_anystr":false},"processedEvents":0,"personalizations":null,"trackedConditions":[{"parameterValues":{"formId":"testFormTracking","pagePath":"/tracker/"},"type":"formEventCondition"}],"anonymousBrowsing":false,"consents":{}}
### 漏洞危害
成功绕过：  
这2种方法都成功绕过了1.5.1版本中引入的"安全管控"(security control)，在2个不同的位置都实现了RCE。
漏洞危害：  
Unomi可以与(通常在内网中的)各种数据存储、和数据分析系统紧密集成。该漏洞通过公开endpoint触发，攻击者可在服务器上运行OS命令。  
该漏洞可作为内网横向移动中的一环。
### 修复过程
大致过程：Apache Unomi开发者的第1次修复，没修复完全，第2次(最终修复方案)算是修复了漏洞CVE-2020-13942。
【第1次修复】  
为了缓解这2个漏洞, Unomi开发人员提出了一系列控制措施：  
1.默认情况下，对于公开的endpoints的MVEL表达式的计算/运行处于关闭状态，但对于非公开的endpoints仍然存在漏洞。  
默认情况下，OGNL表达式的计算/运行在任何地方都处于关闭状态。
2.使用正则表达式来过滤掉MVEL脚本中不期望出现的对象，例如Runtime，ProcessBuilder等。  
具体代码如下  
    // ExpressionFilter.java
    public String filter(String expression) {
            if (forbiddenExpressionPatterns != null && expressionMatches(expression, forbiddenExpressionPatterns)) {
                logger.warn("Expression {} is forbidden by expression filter", expression);
                return null;
            }
            if (allowedExpressionPatterns != null && !expressionMatches(expression, allowedExpressionPatterns)) {
                logger.warn("Expression {} is not allowed by expression filter", expression);
                return null;
            }
            return expression;
        }
3.Potentially dangerous classes like Runtime, ProcessBuilder, etc. are
pointing to String class inside the MVEL runtime. (MvelScriptExecutor file in
the right pane)
有潜在危险的类(如Runtime、ProcessBuilder等)，指向MVEL runtime中的`String`类。  
具体代码如下  
    // MvelScriptExecutor.java
                        // override hardcoded Class Literals that are inserted by default in MVEL and that may be a security risk
                        parserContext.addImport("Runtime", String.class);
                        parserContext.addImport("System", String.class);
                        parserContext.addImport("ProcessBuilder", String.class);
                        parserContext.addImport("Class", String.class);
                        parserContext.addImport("ClassLoader", String.class);
                        parserContext.addImport("Thread", String.class);
                        parserContext.addImport("Compiler", String.class);
                        parserContext.addImport("ThreadLocal", String.class);
                        parserContext.addImport("SecurityManager", String.class);
【第1次修复】中提出的修复方案中的过滤是基于deny-list(黑名单)方法。这种方法从来都不是坚如磐石的安全管控，可能会被绕过。
这个filter允许计算/执行(经过过滤的那个MVEL表达式之内的)另一个MVEL表达式。这样做可以计算/执行恶意的MVEL表达式，从而避免了在MvelScriptExecutor中引入的潜在的危险的类覆盖。  
Doing so allows evaluating the malicious MVEL expression avoiding the
potentially dangerous classes override introduced in the MvelScriptExecutor.
下面这个MVEL表达式调用了`MVEL.eval`，实现了在不受限制的环境中计算/执行另一个MVEL表达式。
其中那个将被执行的表达式的字符串由多个字符串拼接而成，通过使用"字符串拼接"来绕过正则表达式检查危险的类(如Runtime)，这些字符串会拼成一个字符串，作为一个参数，传入`MVEL.eval`。
可以绕过第1次修复：
    java.util.Map context = new java.util.HashMap();
    org.mvel2.MVEL.eval(
      \" Runt\"+
      \"ime r = Run\"+
      \"time.getRu\"+
      \"ntime();r.exe\"+
      \"c('calc.exe') \", context);
【最终修复方案】  
commits如下  
最终修复方案引入了 对MVEL表达式的基于allow-list(白名单)的检查。 这个方案仅执行了明确允许了的表达式，因此不可能执行任意表达式。
能修改allowed-list吗？  
表达式由`ExpressionFilter`类基于应用程序配置中定义的allowed-list进行过滤。 这个allowed-list在应用程序启动期间被加载，并且在应用程序运行时是不可变的，因此，不能在运行时修改这个allowed-list。
具体代码如下  
附该文件的完整代码。
    package org.apache.unomi.scripting;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import java.util.Set;
    import java.util.regex.Pattern;
    /**
     * An expression filter is used to allow/deny scripts for execution.
     */
    public class ExpressionFilter {
        private static final Logger logger = LoggerFactory.getLogger(ExpressionFilter.class.getName());
        private final Set allowedExpressionPatterns;
        private final Set forbiddenExpressionPatterns;
        public ExpressionFilter(Set allowedExpressionPatterns, Set forbiddenExpressionPatterns) {
            this.allowedExpressionPatterns = allowedExpressionPatterns;
            this.forbiddenExpressionPatterns = forbiddenExpressionPatterns;
        }
        public String filter(String expression) {
            if (forbiddenExpressionPatterns != null && expressionMatches(expression, forbiddenExpressionPatterns)) {
                logger.warn("Expression {} is forbidden by expression filter", expression);
                return null;
            }
            if (allowedExpressionPatterns != null && !expressionMatches(expression, allowedExpressionPatterns)) {
                logger.warn("Expression {} is not allowed by expression filter", expression);
                return null;
            }
            return expression;
        }
        private boolean expressionMatches(String expression, Set patterns) {
            for (Pattern pattern : patterns) {
                if (pattern.matcher(expression).matches()) {
                    return true;
                }
            }
            return false;
        }
    }
### 总结
从这个例子看出，有的漏洞修复代码只针对了特定的payload，再次证明了黑名单的修复方案往往容易被绕过。
"用户定义的表达式语言语句"(user-defined expression language statements)的计算/执行，非常危险且难以约束。
Struts 2是一个经典的例子，说明限制动态OGNL表达式(避免RCE)有多困难。  
这些尝试是从EL内部/在EL上实施了使用限制，而不是出于通用目的"限制污染了的EL的使用"，这是一种反复迭代的修复方案(总被绕过)，而不是最终修复方案。
最终修复方案:  
防止RCE的一种更可靠的方法是彻底删除对任意EL expressions的支持，创建一组依赖于 "动态参数"(dynamic parameters) 的
"静态表达式"(static expressions)。