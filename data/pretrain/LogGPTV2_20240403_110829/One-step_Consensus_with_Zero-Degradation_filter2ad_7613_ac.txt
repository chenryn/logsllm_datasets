Case 1: pi blocks forever in a round. Let k be the ﬁrst
round in which some correct process is blocked. pi can only
be blocked at one of the wait statements (line 2 or 3).
- Case I: pi is blocked at line 2 of round k. Since k is the
ﬁrst round in which some correct process blocks at line 2,
all correct processes have broadcast a round k message at
line 1. As communication links are reliable and there are at
least n − f correct processes, pi eventually receives n − f
round k messages and completes line 2.
- Case II: pi is blocked at line 3 of round k. As in the case
above, every correct process broadcasts a round k message.
Consider ld, which is the leader process output by Ω at pi. If
ld is correct, then pi eventually receives a round k message
from ld and completes line 3. Otherwise, if ld is faulty, then
either pi eventually receives a round k message from ld, or
Ω eventually outputs a correct process different from ld and
pi completes line 3. Thus, pi cannot block at line 3.
Case 2: All correct processes execute an inﬁnite number
of rounds without deciding. From the deﬁnition of a faulty
process, there is a time t1 such that every faulty process
has crashed before t1. From the deﬁnition of Ω there is a
time t2 such that Ω outputs the same correct process pl at
every correct process forever. Let t := max{t1, t2} and k
be the ﬁrst round after t. In round k, every correct process
sets ld to l and sends a message (k, ∗, l) to all processes.
Since no correct process decides, no correct process exe-
cutes line 5. As there is a majority of correct processes and
pl is not suspected by any correct process, every correct pro-
cess receives a majority of round k messages including one
message from pl, and every correct process sets its est vari-
able to the same value (line 8). Therefore, at round k + 1
every process including pl sends a (k + 1, v, l) message.
Thus, at round k + 1 every correct process receives n − f
equal messages including a (k + 1, v, l) message from pl.
Therefore, the condition at line 4 evaluates to true and every
(cid:1)
correct process decides at line 5; a contradiction.
Lemma 2 (Agreement) No two processes decide differ-
ently.
Proof : A process can decide either at line 5 of some round
or at line 16 of task T 2. If a process decides v at line 16,
then some other process has decided v at line 5. Let k be the
lowest round in which some process p decides v at line 5.
We claim that each process that decides v at line 5 of round
Case 2: q
k decides v, and that every process that completes round k
does so with est = v. This implies that the est value of
every process after round k is always v. Thus, in round k
and after round k, v is the only value that can be decided
at line 5. As k is the lowest round in which some process
decides, this implies that v is the only value that can be de-
cided in a round at line 5. This also implies that no process
decides a value different from v at line 16 of task T 2. Now
we prove the above claim. Suppose that a process q (cid:6)= p
decides d in round k. Since n − f > n/2, both p and q
receive equal values v and d respectively from a majority
of processes. As any two majorities intersect in at least one
process, it follows that d = v. Now, consider any process
(cid:1) that completes round k without deciding. We show that
q
(cid:1) completes round k with est = v. There are two cases
q
(cid:1) evaluates the condition at line 7 to
to consider: Case 1: q
false. We show that q necessarily evaluates the condition at
line 9 to true. At round k there are at least n − f values v
(cid:1) has received n − f values at line 2 of round k. Any
and q
two sets of n − f elements have n − 2f elements in com-
mon, thus among the n − f values q
(cid:1) receives at round k,
at least n − 2f values are equal to v and at most f values
are distinct from v. Since n− 2f > f, v is a majority value
(cid:1). Value v is unique as there
among the values received by q
(cid:1) completes
cannot be two distinct majority values. Thus q
round k with est = v.
(cid:1) evaluates the condition at line 7 to true. Thus,
there must be a process pl such that a majority of processes
send messages with ld = l. Since p decides in round k,
there must be a process pl(cid:1), such that n − f processes send
(cid:1). As any two majorities have a process
messages with ld = l
(cid:1). Thus q completes round
in common, it follows that l = l
(cid:1)
k with est = v.
6 Circumventing the Impossibility with 3P
In this section we present a one-step and zero-degrading
algorithm that uses the 3P failure detector. The proposed
P-Consensus algorithm 2 is based on a simple observation
that was originally discovered by Lamport [15]. One of
the necessary conditions for the impossibility of section 4
is that processes receive messages from different quorums
in the ﬁrst communication round. If all processes received
the same set of messages, then they could deterministically
pick the same value to propose in the second round. Conse-
quently, consensus is obtained in two communication steps.
The idea behind P-Consensus is to use the 3P failure
detector to build a consistent quorum from which every
process delivers ﬁrst round messages in case it cannot de-
cide. In every stable run, 3P suspects exactly the faulty
processes and its output does not change during that run.
Hence, every process that does not decide during the ﬁrst
round computes the same quorum (line 5) and subsequently
receives a message from every quorum member. The sets of
messages received by different processes from the quorum
are equal and the functions applied to pick a value are de-
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:34 UTC from IEEE Xplore.  Restrictions apply. 
terministic (lines 9-12). Hence, all processes start the next
round with the same value and consequently every correct
process decides in the second round.
Algorithm 2: The P-Consensus Algorithm
Function Consensus(vi)
start T 1, T 2;
task T 1: ri ← 0; esti ← vi;
while true do
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
∀j do send PROP(ri, esti) to pj enddo ;
wait until received PROP(ri, ∗) from n − f processes;
if received PROP(ri, v) from n − f processes then
∀j do send DECIDE(v) to pj enddo; return v;
let Qi = { the ﬁrst n − f processes
pj : j /∈ 3P.suspected };
wait until received PROP(ri, ∗) from every
pj : j ∈ Qi\3P.suspected;
let Qlisti = (v | PROP(ri, v) has been received from
pj : j ∈ Qi);
if |Qlisti| = n − f then
if ∃v ∈ Qlisti : #(v) ≥ n − 2f then
else
esti ← v;
esti ← estmin{j|j∈Qi};
else %ensure agreement%
let vlisti = (v | PROP(ri, v) has been received);
if ∃v ∈ vlisti : #(v) > |vlisti|/2 then
esti ← v;
ri ← ri + 1;
end
task T 2: upon reception of DECIDE(v): ∀j (cid:6)= i do send
DECIDE(v) to pj enddo; return v;
6.1 Detailed Description
The P-Consensus algorithm consists of two parallel tasks
T 1 and T 2 that are initiated when a process proposes a
value. The Consensus function eventually returns the
same decision value to every correct process. Since the sec-
ond task is identical to task T 2 of the L-Consensus protocol,
we conﬁne ourselves to describing task T 1.
The algorithm executes a sequence of asynchronous
rounds of one communication step each. In each round k, a
process sends a round k message containing its current pro-
posal to all processes and waits for round k messages from
n − f distinct processes, computes its new state based on
the messages received and tries to decide. If it cannot de-
cide then it possibly waits for more messages, computes its
new state and moves to the next round.
A process pi maintains two local variables: the round
number ki initialized to 1 and an estimate of the decision
value esti initialized to the proposal value vi. At the be-
ginning of each round, pi broadcasts a message that con-
tains the following ﬁelds: ki, esti. A process pi can send
two different types of messages in round ki. If pi has de-
cided, then it broadcasts a decision value, otherwise it sends
a PROP(ki, esti) message to all processes and we say that
pi proposes esti in round ki.
Subsequently, pi waits for a message from n− f distinct
processes. If pi receives n − f identical values it decides.
Otherwise, pi additionally waits for messages from a quo-
rum Q that is computed deterministically as the set that con-
tains the ﬁrst n − f nonsuspected processes. We say that Q
is complete iff it has n − f members.
At the end of round k, pi updates its esti variable as fol-
lows: if there is a complete quorum Q such that pi receives
a message from each process in Q and there is a majority
value v among the n − f values received, then esti = v. If
there is no such value v, then no process decided in round
k. Thus, p can propose any value in the next round. Sub-
sequently, p picks the estimate of the leader, the process
with the smallest index among all nonsuspected processes.
In case that there is no such process, p simply keeps its es-
timate. If Q is not complete and there is a majority value v
among the values received in round k then esti = v. If no
such value exists, then pi moves to the next round.
6.2 Correctness
Lemma 3 (Termination) Every correct process decides.
Proof : We follow the same strategy as in section 5.2 and
show that if some correct process never decides then ev-
ery correct process eventually decides. Assuming that some
correct process never decides yields two cases. Either some
correct process decides or no correct process decides. The
latter case implies that some correct process never decides.
Thus, either 1) it is blocked in a round or 2) it executes an
inﬁnite number of rounds.
- Case 1): The proof is similar to the one of section
5.2. A process cannot block at one of the wait statements
(at lines 2, 6) because at most f processes are faulty and
(cid:8)P.suspected eventually contains all crashed processes.
- Case 2): All correct processes execute an inﬁnite num-
ber of rounds without deciding. From the deﬁnition of a
faulty process, there is a time t1 such that every faulty pro-
cess has crashed before t1. From the deﬁnition of (cid:8)P there
is a time t2 such that after t2, (cid:8)P outputs exactly the crashed
processes forever. Let t := max{t1, t2} and k be the ﬁrst
round after t. Since no correct process decides, no cor-
rect process executes line 4 and every correct process ex-
ecutes lines 5, 6 and 7. As (cid:8)P behaves perfectly in round
k, every quorum Q contains exactly the correct processes.
The fact that Q is complete and identical and every correct
process receives a message from every member of Q im-
plies that Qlist is the same at every correct process and that
|Qlist| = n − f. Hence, the condition at line 8 evaluates to
true and all correct processes pick the same value either at
line 10 or at line 12. Therefore, in round k + 1, all correct
processes send a message with the same value and hence
every correct process receives n − f identical values and
(cid:1)
consequently decides at line 4; a contradition.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:34 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 3: The C-Abcast Algorithm
Initialization:
ki ← 1; estimatei ← ⊥; adeliveredi ← ⊥;
a-broadcast(m):
estimatei ← estimatei ∪ {m};
a-deliver(∗):
while true do
w-broadcast(ki, estimatei);
wait until w-deliver of the ﬁrst message (ki, v);
msgSeti ← Consensus(ki, v);
adeliveri ← msgSeti − adeliveredi;
deliver all messages in adeliveri atomically in some
deterministic order;
adeliveredi ← adeliveredi ∪ adeliveri;
estimatei ← estimatei − adeliveredi;
ki ← ki + 1;
if estimatei = ∅ then
wait until w-deliver of the ﬁrst message (ki, v)
∨ estimatei (cid:6)= ∅
end
upon w-deliver(∗, v) of the second, third etc. message of any round
estimatei ← estimatei ∪ v;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
Lemma 4 (Agreement) No two processes decide differ-
ently.
Proof : We claim that each process that decides at line 4 of
round k decides v, and that every process that completes
round k without deciding does so with est = v. As al-
ready shown in 5.2, if this claim is true then agreement
holds. Now, we prove the above claim. It is easy to see
that if two distinct processes p and q decide in round k,
(cid:1) be a correct pro-
then they decide the same value v. Let q
(cid:1) receives at least
cess that does not decide in round k. As q
x ≥ n − f messages, it receives at most f values w (cid:6)= v.
Since x−f ≥ n−2f > f, v is a majority among the values
(cid:1) in round k which implies that one of the con-
received by q
(cid:1) completes
ditions at line 9 or 14 evaluates to true. Thus, q
(cid:1)
round k with est = v, which concludes the proof.
7 The Atomic Broadcast Protocol
The proposed C-Abcast protocol 3 represents a modiﬁ-
cation of the WABcast atomic broadcast algorithm of [19].
Like the Chandra & Toueg’s (CT) Atomic Broadcast pro-
tocol [5], C-Abcast reduces atomic broadcast to consensus.
It executes a series of consensus instances to determine a
single message delivery sequence at all processes. Unlike
the CT Atomic Broadcast, C-Abcast assumes an underly-
ing consensus module that is very efﬁcient in case that all
proposals are equal. In order to exploit the efﬁciency of the
underlying consensus, C-Abcast uses a WAB oracle to pro-
vide the consensus module with equal input values. When
the oracle outputs the same proposal to every process, C-
Abcast has a latency of two message delays, i.e., 2δ; one
for asking the oracle plus one communication step for con-
sensus. In case of collisions, consensus is obtained in two
communication steps. Hence, C-Abcast has a latency of
three message delays, i.e, 3δ in the common case.
The protocol consists of three concurrent tasks. A pro-
cess can either a-broadcast a message (line 2), a-deliver
a message (line 4), or w-deliver a message (line 16). A
process p a-broadcasts a message m by including m in a
set estimatep. This set contains the messages that have
not been yet a-delivered by p. The a-deliver(∗) task exe-
cutes in a round by round fashion. In round k, process p
w-broadcasts the set estimatep and waits to w-deliver the
ﬁrst value v output by its oracle. Then, p proposes v to the
k-th consensus instance and waits for the decision. After
it decides, p atomically delivers all messages contained in
the k-th decision in some deterministic order, removes from
estimatep every message a-delivered so far and moves to
the next round. In order to ensure validity, every message a-
broadcast by some correct process must eventually be con-
tained in the proposal of every correct process. Thus, in the
third task (line 16), every process p includes in estimatep
all messages w-broadcast so far.
7.1 Correctness
Lemma 5 states that ∀k ∈ N, a) if a process delivers the