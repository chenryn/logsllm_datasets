SELECT setval('foo', 42);           Next nextval will return 43  
SELECT setval('foo', 42, true);     Same as above  
SELECT setval('foo', 42, false);    Next nextval will return 42  
```  
#### 条件表达式  
CASE表达式 1  
```  
CASE WHEN condition THEN result  
     [WHEN ...]  
     [ELSE result]  
END  
```  
例子  
```  
SELECT * FROM test;  
 a  
---  
 1  
 2  
 3  
SELECT a,  
       CASE WHEN a=1 THEN 'one'  
            WHEN a=2 THEN 'two'  
            ELSE 'other'  
       END  
    FROM test;  
 a | case  
---+-------  
 1 | one  
 2 | two  
 3 | other  
```  
CASE表达式 2  
```  
CASE expression  
    WHEN value THEN result  
    [WHEN ...]  
    [ELSE result]  
END  
```  
例子  
```  
SELECT a,  
       CASE a WHEN 1 THEN 'one'  
              WHEN 2 THEN 'two'  
              ELSE 'other'  
       END  
    FROM test;  
 a | case  
---+-------  
 1 | one  
 2 | two  
 3 | other  
SELECT ... WHERE CASE WHEN x <> 0 THEN y/x > 1.5 ELSE false END;  -- 不符合条件的then不会被执行，所以这里不会报除以0的错误  
```  
COALESCE表达式  
输出第一个不为空的参数，都为空则输出空  
```  
COALESCE(value [, ...])  
```  
例子  
```  
SELECT COALESCE(description, short_description, '(none)') ...  
```  
NULLIF表达式  
v1,v2相等时返回NULL, 否则返回v1。  
```  
NULLIF(value1, value2)  
```  
GREATEST and LEAST表达式  
忽略NULL，仅仅当所有值都为NULL时返回NULL。  
```  
返回最大值  
GREATEST(value [, ...])  
返回最小值  
LEAST(value [, ...])  
```  
#### 数组  
操作符  
![pic](20170412_02_pic_050.jpg)  
函数  
![pic](20170412_02_pic_051.jpg)  
![pic](20170412_02_pic_052.jpg)  
#### 范围  
操作符  
![pic](20170412_02_pic_053.jpg)  
函数  
![pic](20170412_02_pic_054.jpg)  
#### 聚合  
参考章节 - 高级SQL  
![pic](20170412_02_pic_055.jpg)  
![pic](20170412_02_pic_056.jpg)  
![pic](20170412_02_pic_057.jpg)  
![pic](20170412_02_pic_058.jpg)  
![pic](20170412_02_pic_059.jpg)  
#### 窗口  
参考章节 - 高级SQL  
![pic](20170412_02_pic_060.jpg)  
#### 子查询表达式  
exists表达式  
```  
EXISTS (subquery)  
```  
例子   
```  
SELECT col1  
FROM tab1  
WHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);  
```  
in表达式  
```  
expression IN (subquery)  
row_constructor IN (subquery)  
```  
not in表达式  
```  
expression NOT IN (subquery)  
row_constructor NOT IN (subquery)  
```  
any, some表达式(一个意思)  
```  
expression operator ANY (subquery)  
expression operator SOME (subquery)  
row_constructor operator ANY (subquery)  
row_constructor operator SOME (subquery)  
```  
all表达式  
```  
expression operator ALL (subquery)  
row_constructor operator ALL (subquery)  
```  
OP单行子查询表达式  
```  
row_constructor operator (subquery)  
```  
#### 行与数组表达式  
in表达式  
```  
expression IN (value [, ...])  
等同于  
expression = value1  
OR  
expression = value2  
OR  
...  
```  
not in表达式  
```  
expression NOT IN (value [, ...])  
等同于  
expression <> value1  
AND  
expression <> value2  
AND  
...  
```  
any, some(array)表达式  
```  
expression operator ANY (array expression)  
expression operator SOME (array expression)  
```  
all(array)表达式  
```  
expression operator ALL (array expression)  
```  
行与行构造器的比较操作表达式  
```  
row_constructor operator row_constructor  
operator is =, <>,  or >=  
row_constructor IS DISTINCT FROM row_constructor  
row_constructor IS NOT DISTINCT FROM row_constructor  
```  
复合类型比较表达式  
```  
record operator record  
```  
#### 返回集合的函数  
返回多行（集合）的函数，常用于构造测试数据  
![pic](20170412_02_pic_061.jpg)  
![pic](20170412_02_pic_062.jpg)  
例子  
```  
SELECT * FROM generate_series(2,4);  
 generate_series  
-----------------  
               2  
               3  
               4  
(3 rows)  
SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,  
                              '2008-03-04 12:00', '10 hours');  
   generate_series     
---------------------  
 2008-03-01 00:00:00  
 2008-03-01 10:00:00  
 2008-03-01 20:00:00  
 2008-03-02 06:00:00  
 2008-03-02 16:00:00  
 2008-03-03 02:00:00  
 2008-03-03 12:00:00  
 2008-03-03 22:00:00  
 2008-03-04 08:00:00  
(9 rows)  
-- basic usage  
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;  
 s   
---  
 1  
 2  
 3  
 4  
(4 rows)  
-- set returning function WITH ORDINALITY  
SELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);  
       ls        | n  
-----------------+----  
 pg_serial       |  1  
 pg_twophase     |  2  
 postmaster.opts |  3  
 pg_notify       |  4  
 postgresql.conf |  5  
 pg_tblspc       |  6  
 logfile         |  7  
 base            |  8  
 postmaster.pid  |  9  
 pg_ident.conf   | 10  
 global          | 11  
 pg_clog         | 12  
 pg_snapshots    | 13  
 pg_multixact    | 14  
 PG_VERSION      | 15  
 pg_xlog         | 16  
 pg_hba.conf     | 17  
 pg_stat_tmp     | 18  
 pg_subtrans     | 19  
(19 rows)  
```  
#### 系统信息函数  
系统信息函数，可以帮助用户了解数据库的运行情况，配置情况等。  
很多系统信息查看函数返回的是record类型，关于返回的结构解释，请参考  
https://www.postgresql.org/docs/9.6/static/functions-info.html  
会话信息函数  
![pic](20170412_02_pic_063.jpg)  
检查是否有访问指定对象的权限  
![pic](20170412_02_pic_064.jpg)  
检查资源是否可见  
![pic](20170412_02_pic_065.jpg)  
查看系统表相关的信息  
![pic](20170412_02_pic_066.jpg)  
![pic](20170412_02_pic_067.jpg)  
获得数据库对象的信息或address等信息  
![pic](20170412_02_pic_068.jpg)  
获得对象的注释信息  
![pic](20170412_02_pic_069.jpg)  
获得数据库当前的事务快照信息  
![pic](20170412_02_pic_070.jpg)  
已提交事务的时间戳等信息  
![pic](20170412_02_pic_071.jpg)  
数据库的控制信息  
![pic](20170412_02_pic_072.jpg)  
#### 系统管理函数  
读取、设置参数值  
![pic](20170412_02_pic_073.jpg)  
信号相关函数（cancel query,杀死会话,reload配置文件,切换log文件）  
![pic](20170412_02_pic_074.jpg)  
物理备份、备份控制、redo文件 相关函数  
![pic](20170412_02_pic_075.jpg)  
物理、流式recovery信息读取、恢复控制 相关函数  
![pic](20170412_02_pic_076.jpg)  
![pic](20170412_02_pic_077.jpg)  
快照导出函数（生成一致性快照）  
![pic](20170412_02_pic_078.jpg)  
流复制相关函数(创建slot, decode等)  
![pic](20170412_02_pic_079.jpg)  
![pic](20170412_02_pic_080.jpg)  
获取数据库对象的空间占用情况的函数  
![pic](20170412_02_pic_081.jpg)  
获得对象物理存储位置（文件名）函数  
![pic](20170412_02_pic_082.jpg)  
索引维护函数  
![pic](20170412_02_pic_083.jpg)  
服务端文件操作函数  
![pic](20170412_02_pic_084.jpg)  
用户AD lock函数  
![pic](20170412_02_pic_085.jpg)  
### 2. 过程语言  
PostgreSQL支持多种过程语言，包括plpgsql, sql, c, python, perl, java等等。  
其中plpgsql是使用较多的过程语言，与Oracle的PL/SQL功能类似。  
#### 语法  
```  
CREATE [ OR REPLACE ] FUNCTION  
    name ( [ [ argmode ] [ argname ] argtype [ { DEFAULT | = } default_expr ] [, ...] ] )  
    [ RETURNS rettype  
      | RETURNS TABLE ( column_name column_type [, ...] ) ]  
  { LANGUAGE lang_name  
    | TRANSFORM { FOR TYPE type_name } [, ... ]  
    | WINDOW  
    | IMMUTABLE | STABLE | VOLATILE | [ NOT ] LEAKPROOF  
    | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT  
    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER  
    | PARALLEL { UNSAFE | RESTRICTED | SAFE }  
    | COST execution_cost  
    | ROWS result_rows  
    | SET configuration_parameter { TO value | = value | FROM CURRENT }  
    | AS 'definition'  
    | AS 'obj_file', 'link_symbol'  
  } ...  
    [ WITH ( attribute [, ...] ) ]  
```  
plpgsql支持任意参数、任意返回值、返回多行、返回数组、复合类型等。  
#### plpgsql函数内部结构  
```  
[ > ]  
[ DECLARE  
    declarations ]  
BEGIN  
    statements  
END [ label ];  
```  
例子1  
```  
CREATE FUNCTION somefunc() RETURNS integer AS $$  
>  
DECLARE  
    quantity integer := 30;  
BEGIN  
    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 30  
    quantity := 50;  
    --  
    -- Create a subblock  
    --  
    DECLARE  
        quantity integer := 80;  
    BEGIN  
        RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 80  
        RAISE NOTICE 'Outer quantity here is %', outerblock.quantity;  -- Prints 50  
    END;  
    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 50  
    RETURN quantity;  
END;  
$$ LANGUAGE plpgsql;  
```  
变量声明语法  
```  
name [ CONSTANT ] type [ COLLATE collation_name ] [ NOT NULL ] [ { DEFAULT | := | = } expression ];  
```  
例子  