enter this command:
$ ./hello
Hello, Black Hat Gophers!
This should run the standalone binary file.
By default, the produced binary file contains debugging information 
and the symbol table. This can bloat the size of the file. To reduce the file 
size, you can include additional flags during the build process to strip this 
information from the binary. For example, the following command will 
reduce the binary size by approximately 30 percent:
$ go build -ldflags "-w -s"
Having a smaller binary will make it more efficient to transfer or embed 
while pursuing your nefarious endeavors.
Cross-Compiling
Using go build works great for running a binary on your current system or 
one of identical architecture, but what if you want to create a binary that 
can run on a different architecture? That’s where cross-compiling comes 
in. Cross-compiling is one of the coolest aspects of Go, as no other language 
can do it as easily. The build command allows you to cross-compile your pro-
gram for multiple operating systems and architectures. Reference the offi-
cial Go documentation at https://golang.org/doc/install/source#environment/ 
for further details regarding allowable combinations of compatible operat-
ing system and architecture compilation types. 
To cross-compile, you need to set a constraint. This is just a means to 
pass information to the build command about the operating system and 
architecture for which you’d like to compile your code. These constraints 
include GOOS (for the operating system) and GOARCH (for the architecture).
You can introduce build constraints in three ways: via the command 
line, code comments, or a file suffix naming convention. We’ll discuss the 
command line method here and leave the other two methods for you to 
research if you wish.
Let’s suppose that you want to cross-compile your previous hello.go 
program residing on a macOS system so that it runs on a Linux 64-bit 
8   Chapter 1
architecture. You can accomplish this via the command line by setting the 
GOOS and GOARCH constraints when running the build command:
$ GOOS="linux" GOARCH="amd64" go build hello.go
$ ls
hello  hello.go
$ file hello
hello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
The output confirms that the resulting binary is a 64-bit ELF (Linux) file.
The cross-compilation process is much simpler in Go than in just about 
any other modern programming language. The only real “gotcha” happens 
when you try to cross-compile applications that use native C bindings. We’ll 
stay out of the weeds and let you dig into those challenges independently. 
Depending on the packages you import and the projects you develop, you 
may not have to worry about that very often.
The go doc Command
The go doc command lets you interrogate documentation about a package, 
function, method, or variable. This documentation is embedded as com-
ments through your code. Let’s take a look at how to obtain details about 
the fmt.Println() function:
$ go doc fmt.Println
func Println(a ...interface{}) (n int, err error)
    Println formats using the default formats for its operands and writes to
    standard output. Spaces are always added between operands and a newline
    is appended. It returns the number of bytes written and any write error
    encountered.
The output that go doc produces is taken directly out of the source code 
comments. As long as you adequately comment your packages, functions, 
methods, and variables, you’ll be able to automatically inspect the docu-
mentation via the go doc command.
The go get Command
Many of the Go programs that you’ll develop in this book will require third-
party packages. To obtain package source code, use the go get command. 
For instance, let’s assume you’ve written the following code that imports the 
stacktitan/ldapauth package:
package main
import (
"fmt"
"net/http"
u "github.com/stacktitan/ldapauth"
)
Go Fundamentals   9
Even though you’ve imported the stacktitan/ldapauth package u, you 
can’t access the package quite yet. You first have to run the go get com-
mand. Using go get github.com/stacktitan/ldapauth downloads the actual 
package and places it within the $GOPATH/src directory. 
The following directory tree illustrates the placement of the ldapauth 
package within your GOPATH workspace:
$ tree src/github.com/stacktitan/
u src/github.com/stacktitan/
└── ldapauth
    ├── LICENSE
    ├── README.md
    └── ldap_auth.go
Notice that the path u and the imported package name are constructed 
in a way that avoids assigning the same name to multiple packages. Using 
github.com/stacktitan as a preface to the actual package name ldapauth ensures 
that the package name remains unique.
Although Go developers traditionally install dependencies with go 
get, problems can arise if those dependent packages receive updates that 
break backward compatibility. Go has introduced two separate tools—dep 
and mod—to lock dependencies in order to prevent backward compatibil-
ity issues. However, this book almost exclusively uses go get to pull down 
dependencies. This will help avoid inconsistencies with ongoing depen-
dency management tooling and hopefully make it easier for you to get 
the examples up and running.
The go fmt Command
The go fmt command automatically formats your source code. For example, 
running go fmt /path/to/your/package will style your code by enforcing the 
use of proper line breaks, indentation, and brace alignment. 
Adhering to arbitrary styling preferences might seem strange at first, 
particularly if they differ from your habits. However, you should find this 
consistency refreshing over time, as your code will look similar to other 
third-party packages and feel more organized. Most IDEs contain hooks 
that will automatically run go fmt when you save your file, so you don’t need 
to explicitly run the command.
The golint and go vet Commands
Whereas go fmt changes the syntactical styling of your code, golint reports 
style mistakes such as missing comments, variable naming that doesn’t fol-
low conventions, useless type specifications, and more. Notice that golint 
is a standalone tool, and not a subcommand of the main go binary. You’ll 
need to install it separately by using go get -u golang.org/x/lint/golint.
Similarly, go vet inspects your code and uses heuristics to identify suspi-
cious constructs, such as calling Printf() with the incorrect format string 
types. The go vet command attempts to identify issues, some of which might 
be legitimate bugs, that a compiler might miss.
10   Chapter 1
Go Playground
The Go Playground is an execution environment hosted at https://play.golang 
.org/ that provides a web-based frontend for developers to quickly develop, 
test, execute, and share snippets of Go code. The site makes it easy to try 
out various Go features without having to install or run Go on your local 
system. It’s a great way to test snippets of code before integrating them 
within your projects. 
It also allows you to simply play with various nuances of the language 
in a preconfigured environment. It’s worth noting that the Go Playground 
restricts you from calling certain dangerous functions to prevent you from, 
for example, executing operating-system commands or interacting with 
third-party websites.
Other Commands and Tools
Although we won’t explicitly discuss other tools and commands, we 
encourage you to do your own research. As you create increasingly com-
plex projects, you’re likely to run into a desire to, for example, use the go 
test tool to run unit tests and benchmarks, cover to check for test cover-
age, imports to fix import statements, and more. 
Understanding Go Syntax
An exhaustive review of the entire Go language would take multiple chapters,  
if not an entire book. This section gives a brief overview of Go’s syntax, partic -
ularly relative to data types, control structures, and common patterns. This 
should act as a refresher for casual Go coders and an introduction for those 
new to the language. 
For an in-depth, progressive review of the language, we recommend 
that you work through the excellent A Tour of Go (https://tour.golang.org/) 
tutorial. It’s a comprehensive, hands-on discussion of the language broken 
into bite-sized lessons that use an embedded playground to enable you to 
try out each of the concepts. 
The language itself is a much cleaner version of C that removes a lot of 
the lower-level nuances, resulting in better readability and easier adoption.
Data Types
Like most modern programming languages, Go provides a variety of primi-
tive and complex data types. Primitive types consist of the basic building 
blocks (such as strings, numbers, and booleans) that you’re accustomed to 
in other languages. Primitives make up the foundation of all information 
used within a program. Complex data types are user-defined structures com-
posed of a combination of one or more primitive or other complex types.
Go Fundamentals   11
Primitive Data Types
The primitive types include bool, string, int, int8, int16, int32, int64, uint, 
uint8, uint16, uint32, uint64, uintptr, byte, rune, float32, float64, complex64, and 
complex128.
You typically declare a variable’s type when you define it. If you don’t, 
the system will automatically infer the variable’s data type. Consider the 
following examples: 
var x = "Hello World"
z := int(42)
In the first example, you use the keyword var to define a variable 
named x and assign to it the value "Hello World". Go implicitly infers x to 
be a string, so you don’t have to declare that type. In the second example, 
you use the := operator to define a new variable named z and assign to it 
an integer value of 42. There really is no difference between the two opera-
tors. We’ll use both throughout this book, but some people feel that the := 
operator is an ugly symbol that reduces readability. Choose whatever works 
best for you.
In the preceding example, you explicitly wrap the 42 value in an int 
call to force a type on it. You could omit the int call but would have to 
accept whatever type the system automatically uses for that value. In some 
cases, this won’t be the type you intended to use. For instance, perhaps you 
want 42 to be represented as an unsigned integer, rather than an int type, 
in which case you’d have to explicitly wrap the value.
Slices and Maps
Go also has more-complex data types, such as slices and maps. Slices are 
like arrays that you can dynamically resize and pass to functions more effi-
ciently. Maps are associative arrays, unordered lists of key/value pairs that 
allow you to efficiently and quickly look up values for a unique key. 
There are all sorts of ways to define, initialize, and work with slices and 
maps. The following example demonstrates a common way to define both 
a slice s and a map m and add elements to both:
var s = make([]string, 0)
var m = make(map[string]string)
s = append(s, "some string")
m["some key"] = "some value"
This code uses the two built-in functions: make() to initialize each 
variable and append() to add a new item to a slice. The last line adds the 
key/value pair of some key and some value to the map m. We recommend 
that you read the official Go documentation to explore all the methods 
for defining and using these data types. 
12   Chapter 1
Pointers, Structs, and Interfaces 
A pointer points to a particular area in memory and allows you to retrieve 
the value stored there. As you do in C, you use the & operator to retrieve the 
address in memory of some variable, and the * operator to dereference the 
address. The following example illustrates this:
u var count = int(42)
v ptr := &count
w fmt.Println(*ptr)
x *ptr = 100
y fmt.Println(count)
The code defines an integer, count u, and then creates a pointer v by 
using the & operator. This returns the address of the count variable. You 
dereference the variable w while making a call to fmt.Println() to log the 
value of count to stdout. You then use the * operator x to assign a new value 
to the memory location pointed to by ptr. Because this is the address of the 
count variable, the assignment changes the value of that variable, which you 
confirm by printing it to the screen y. 
You use the struct type to define new data types by specifying the type’s 
associated fields and methods. For example, the following code defines a 
Person type:
u type Person struct {
    v Name string
    w Age int
}
x func (p *Person) SayHello() {
    fmt.Println("Hello,", p.Namey)
} 
func main() {
    var guy =  newz(Person)
    { guy.Name = "Dave"
    | guy.SayHello()
}
The code uses the type keyword u to define a new struct containing two 
fields: a string named Name v and an int named Age w. 
You define a method, SayHello(), on the Person type assigned to variable 
p x. The method prints a greeting message to stdout by looking at the 
struct, p y, that received the call. Think of p as a reference to self or this 
in other languages. You also define a function, main(), which acts as the 
program’s entry point. This function uses the new keyword z to initialize 
a new Person. It assigns the name Dave to the person { and then tells the 
person to SayHello() |.
Structs lack scoping modifiers—such as private, public, or protected—
that are commonly used in other languages to control access to their 
members. Instead, Go uses capitalization to determine scope: types and 
fields that begin with a capital letter are exported and accessible outside 
Go Fundamentals   13
the package, whereas those starting with a lowercase letter are private, 
accessible only within the package.
You can think of Go’s interface type as a blueprint or a contract. This 
blueprint defines an expected set of actions that any concrete implementa-
tion must fulfill in order to be considered a type of that interface. To define 
an interface, you define a set of methods; any data type that contains those 
methods with the correct signatures fulfills the contract and is considered 
a type of that interface. Let’s take a look at an example:
u type Friend interface {
    v SayHello()
}
In this sample, you’ve defined an interface called Friend u that requires 
one method to be implemented: SayHello() v. That means that any type that 
implements the SayHello() method is a Friend. Notice that the Friend interface 
doesn’t actually implement that function—it just says that if you’re a Friend, 
you need to be able to SayHello().
The following function, Greet(), takes a Friend interface as input and 
says hello in a Friend-specific way:
func Greetu (f Friendv) {
    f.SayHello()
}
You can pass any Friend type to the function. Luckily, the Person type 
used in the previous example can SayHello()—it’s a Friend. Therefore, if a 
function named Greet() u, as shown in the preceding code, expects a Friend 
as an input parameter v, you can pass it a Person, like this:
func main() {
    var guy = new(Person)
    guy.Name = "Dave"
    Greet(guy)
}
Using interfaces and structs, you can define multiple types that you 
can pass to the same Greet() function, so long as these types implement the 
Friend interface. Consider this modified example:
u type Dog struct {}
func (d *Dog) SayHello()v {
    fmt.Println("Woof woof")
} 
func main() {
    var guy = new(Person)
    guy.Name = "Dave"
    w Greet(guy)
    var dog = new(Dog)
    x Greet(dog)
}
14   Chapter 1
The example shows a new type, Dog u, that is able to SayHello() v and, 
therefore, is a Friend. You are able to Greet() both a Person w and a Dog x, 
since both are capable of SayHello().
We’ll cover interfaces multiple times throughout the book to help you 
better understand the concept.
Control Structures
Go contains slightly fewer control structures than other modern languages. 
Despite that, you can still accomplish complex processing, including condi-
tionals and loops, with Go. 
Go’s primary conditional is the if/else structure:
if x == 1 {
    fmt.Println("X is equal to 1")
} else {
    fmt.Println("X is not equal to 1")
}
Go’s syntax deviates slightly from the syntax of other languages. For 
instance, you don’t wrap the conditional check—in this case, x == 1—in 
parentheses. You must wrap all code blocks, even the preceding single-line 
blocks, in braces. Many other modern languages make the braces optional 
for single-line blocks, but they’re required in Go.
For conditionals involving more than two choices, Go provides a switch 
statement. The following is an example:
switch xu {
    case "foo"v:
        fmt.Println("Found foo")
    case "bar"w:
        fmt.Println("Found bar")
    defaultx:
        fmt.Println("Default case")
}
In this example, the switch statement compares the contents of a 
variable x u against various values—foo v and bar w—and logs a mes-
sage to stdout if x matches one of the conditions. This example includes 
a default case x, which executes in the event that none of the other 
conditions match. 
Note that, unlike many other modern languages, your cases don’t have 