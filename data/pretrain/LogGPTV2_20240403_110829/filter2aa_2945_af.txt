This button displays an icon that looks like a bolt of lightning, as
demonstrated here:
Download from finelybook PI:EMAIL
81
The Properties window displays a list of event names for the Button
control. An event indicates a significant action that usually requires a
response, and you can write your own code to perform this response.
4. In the box adjacent to the Click event, type okClick, and then press
Enter.
The MainPage.xaml.cs file appears in the Code and Text Editor window,
and a new method named okClick is added to the MainPage class. The
method looks like this:
Click here to view code image
private void okClick(object sender, RoutedEventArgs e)
{
}
Do not worry too much about the syntax of this code just yet—you will
learn all about methods in Chapter 3.
5. Add the following using directive shown in bold to the list at the top of
the file (the ellipsis character […] indicates statements that have been
omitted for brevity):
Click here to view code image
using System;
...
using Windows.UI.Xaml.Navigation;
using Windows.UI.Popups;
6. Add the following code shown in bold to the okClick method:
Click here to view code image
private void okClick(object sender, RoutedEventArgs e)
{
    MessageDialog msg = new MessageDialog("Hello " +
userName.Text);
    msg.ShowAsync();
}
This code will run when the user clicks the OK button. Again, do not
worry too much about the syntax, just be sure that you copy the code
exactly as shown; you will find out what these statements mean in the
next few chapters. The key things to understand are that the first
Download from finelybook PI:EMAIL
82
statement creates a MessageDialog object with the message “Hello
”, where  is the name that you type into the
TextBox on the form. The second statement displays the MessageDialog,
causing it to appear on the screen. The MessageDialog class is defined
in the Windows.UI.Popups namespace, which is why you added it in
step 5.
Note You might notice that Visual Studio 2017 adds a wavy green
line under the last line of code you typed. If you hover over this
line of code, Visual Studio displays a warning that states “Because
this call is not awaited, execution of the current method continues
before the call is completed. Consider applying the ‘await’
operator to the result of the call.” Essentially, this warning means
that you are not taking full advantage of the asynchronous
functionality that the .NET Framework provides. You can safely
ignore this warning.
7. Click the MainPage.xaml tab above the Code and Text Editor window to
display the form in the Design View window again.
8. In the lower pane displaying the XAML description of the form,
examine the Button element, but be careful not to change anything.
Notice that it now contains an attribute named Click that refers to the
okClick method.
Click here to view code image
9. On the Debug menu, click Start Debugging.
10. When the form appears, in the text box, type your name over the
existing text, and then click OK.
A message dialog box appears displaying the following greeting:
Download from finelybook PI:EMAIL
83
11. Click Close in the message box.
12. Return to Visual Studio 2017 and then, on the Debug menu, click Stop
Debugging.
Other types of graphical applications
Apart from Universal Windows apps, Visual Studio 2017 also lets you
create other types of graphical applications. These applications are
intended for specific environments and do not include the adaptability
to enable them to run across multiple platforms unchanged.
The other types of graphical applications available include:
WPF App. You can find this template in the list of Windows
Classic Desktop templates in Visual Studio 2017. WPF stands for
“Windows Presentation Foundation.” WPF is targeted at
Download from finelybook PI:EMAIL
84
applications that run on the Windows desktop, rather than
applications that can adapt to a range of different devices and
form factors. It provides an extremely powerful framework based
on vector graphics that enable the user interface to scale smoothly
across different screen resolutions. Many of the key features of
WPF are available in UWP applications, although WPF provides
additional functionality that is only appropriate for applications
running on powerful desktop machines.
Windows Forms App. This is an older graphical library that dates
back to the origins of the .NET Framework. You can also find
this template in the Class Desktop template list in Visual Studio
2017. As its name implies, the Windows Forms library is
intended for building more classical forms-based applications
using the Graphics Device Interface (GDI) libraries provided with
Windows at that time. While this framework is quick to use, it
provides neither the functionality and scalability of WPF nor the
portability of UWP.
If you are building graphical applications, unless you have good
reasons not to do so, I would suggest that you opt for the UWP
template.
Summary
In this chapter, you saw how to use Visual Studio 2017 to create, build, and
run applications. You created a console application that displays its output in
a console window, and you created a Universal Windows Platform
application with a simple GUI.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to Chapter 2.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes to save the project.
Download from finelybook PI:EMAIL
85
Quick reference
To
Do this
Create a
new
console
application
using
Visual
Studio
2017
On the File menu, point to New, and then click Project to open
the New Project dialog box. In the left pane, expand Installed,
and then click Visual C#. In the middle pane, click Console
Application. In the Location box, specify a directory for the
project files. Type a name for the project, and then click OK.
Create a
new
Universal
Windows
app using
Visual
Studio
2017
On the File menu, point to New, and then click Project to open
the New Project dialog box. In the left pane, expand Installed,
expand Visual C#, expand Windows, and then click Universal.
In the middle pane, click Blank App (Universal Windows). In
the Location box, specify a directory for the project files. Type
a name for the project, and then click OK.
Build the
application
On the Build menu, click Build Solution.
Run the
application
in debug
mode
On the Debug menu, click Start Debugging.
Run the
application
without
debugging
On the Debug menu, click Start Without Debugging.
Download from finelybook PI:EMAIL
86
CHAPTER 2
Working with variables, operators,
and expressions
After completing this chapter, you will be able to:
Understand statements, identifiers, and keywords.
Use variables to store information.
Work with primitive data types.
Use arithmetic operators such as the plus sign (+) and the minus sign
(–).
Increment and decrement variables.
Chapter 1, “Welcome to C#,” presents how to use the Microsoft Visual
Studio 2017 programming environment to build and run a console program
and a graphical application. This chapter introduces you to the elements of
Microsoft Visual C# syntax and semantics, including statements, keywords,
and identifiers. You’ll study the primitive types that are built into the C#
language and the characteristics of the values that each type holds. You’ll
also see how to declare and use local variables (variables that exist only in a
method or another small section of code), learn about the arithmetic operators
that C# provides, find out how to use operators to manipulate values, and
learn how to control expressions containing two or more operators.
Understanding statements
Download from finelybook PI:EMAIL
87
A statement is a command that performs an action, such as calculating a
value and storing the result or displaying a message to a user. You combine
statements to create methods. You’ll learn more about methods in Chapter 3,
“Writing methods and applying scope,” but for now, think of a method as a
named sequence of statements. Main, which was introduced in the previous
chapter, is an example of a method.
Statements in C# follow a well-defined set of rules describing their format
and construction. These rules are collectively known as syntax. (In contrast,
the specification of what statements do is collectively known as semantics.)
One of the simplest and most important C# syntax rules states that you must
terminate all statements with a semicolon. For example, Chapter 1
demonstrates that without the terminating semicolon, the following statement
won’t compile:
Click here to view code image
Console.WriteLine("Hello, World!");
Tip C# is a “free format” language, which means that white space, such
as a space character or a new line, is not significant except as a
separator. In other words, you are free to lay out your statements in any
style you choose. However, you should adopt a simple, consistent
layout style to make your programs easier to read and understand.
The trick to programming well in any language is to learn the syntax and
semantics of the language and then use the language in a natural and
idiomatic way. This approach makes your programs easier to maintain. As
you progress through this book, you’ll see examples of the most important C#
statements.
Using identifiers
Identifiers are the names that you use to identify the elements in your
Download from finelybook PI:EMAIL
88
programs, such as namespaces, classes, methods, and variables. (You will
learn about variables shortly.) In C#, you must adhere to the following syntax
rules when choosing identifiers:
You can use only letters (uppercase and lowercase), digits, and
underscore characters.
An identifier must start with a letter or an underscore.
For example, result, _score, footballTeam, and plan9 are all valid
identifiers, whereas result%, footballTeam$, and 9plan are not.
Important C# is a case-sensitive language: footballTeam and
FootballTeam are two different identifiers.
Identifying keywords
The C# language reserves 77 identifiers for its own use, and you cannot reuse
these identifiers for your own purposes. These identifiers are called
keywords, and each has a particular meaning. Examples of keywords are
class, namespace, and using. You’ll learn the meaning of most of the C#
keywords as you proceed through this book. The following is the list of
keywords:
abstract
do
in
protected
true
as
double
int
public
try
base
else
interface
readonly
typeof
bool
enum
internal
ref
uint
break
event
is
return
ulong
byte
explicit
lock
sbyte
unchecked
case
extern
long
sealed
unsafe
catch
false
namespace
short
ushort
char
finally
new
sizeof
using
Download from finelybook PI:EMAIL
89
checked
fixed
null
stackalloc
virtual
class
float
object
static
void
const
for
operator
string
volatile
continue
foreach
out
struct
while
decimal
goto
override
switch
default
if
params
this
delegate
implicit
private
throw
Tip In the Visual Studio 2017 Code and Text Editor window, keywords
are colored blue when you type them.
C# also uses the following identifiers. These identifiers are not reserved
by C#, which means that you can use these names as identifiers for your own
methods, variables, and classes, but you should avoid doing so if at all
possible.
add
global
select
alias
group
set
ascending
into
value
async
join
var
await
let
when
descending
nameof
where
dynamic
orderby
yield
from
partial
get
remove
Using variables
A variable is a storage location that holds a value. You can think of a
Download from finelybook PI:EMAIL
90
variable as a box in the computer’s memory that holds temporary
information. You must give each variable in a program an unambiguous
name that uniquely identifies it in the context in which it is used. You use a
variable’s name to refer to the value it holds. For example, if you want to
store the value of the cost of an item in a store, you might create a variable
simply called cost and store the item’s cost in this variable. Later on, if you
refer to the cost variable, the value retrieved will be the item’s cost that you
stored there earlier.
Naming variables
You should adopt a naming convention for variables that helps you avoid
confusion concerning the variables you have defined. This is especially
important if you are part of a project team with several developers working
on different parts of an application; a consistent naming convention helps to
avoid confusion and can reduce the scope for bugs. The following list
contains some general recommendations:
Don’t start an identifier with an underscore. Although this is legal in
C#, it can limit the interoperability of your code with applications built
by using other languages, such as Microsoft Visual Basic.
Don’t create identifiers that differ only by case. For example, do not
create one variable named myVariable and another named MyVariable
for use at the same time because it is too easy to confuse one with the
other. Also, defining identifiers that differ only by case can limit the
ability to reuse classes in applications developed with other languages
that are not case-sensitive, such as Visual Basic.
Start the name with a lowercase letter.
In a multi-word identifier, start the second and each subsequent word
with an uppercase letter. (This is called camelCase notation.)
Don’t use Hungarian notation. (If you are a Microsoft Visual C++
developer, you are probably familiar with Hungarian notation. If you
don’t know what Hungarian notation is, don’t worry about it!)
For example, score, footballTeam, _score, and FootballTeam are all valid
variable names, but only the first two are recommended.
Download from finelybook PI:EMAIL
91
Declaring variables
Variables hold values. C# has many different types of values that it can store
and process: integers, floating-point numbers, and strings of characters, to
name three. When you declare a variable, you must specify the type of data it
will hold.
You declare the type and name of a variable in a declaration statement.
For example, the statement that follows declares that the variable named age
holds int (integer) values. As always, you must terminate the statement with a
semicolon.
int age;
The variable type int is the name of one of the primitive C# types, integer,
which is a whole number. (You’ll learn about several primitive data types
later in this chapter.)
Note If you are a Visual Basic programmer, you should note that C#
does not allow implicit variable declarations. You must explicitly
declare all variables before you use them.
After you’ve declared your variable, you can assign it a value. The
statement that follows assigns age the value 42. Again, note that the
semicolon is required.
age = 42;
The equal sign (=) is the assignment operator, which assigns the value on
its right to the variable on its left. After this assignment, you can use the age
variable in your code to refer to the value it holds. The next statement writes
the value of the age variable (42) to the console:
Console.WriteLine(age);
Download from finelybook PI:EMAIL
92
Tip If you leave the mouse pointer over a variable in the Visual Studio
2017 Code and Text Editor window, a ScreenTip indicates the type of
the variable.
Specifying numeric values
It’s important to understand the impact of variable type on the data that a
variable can hold, and how this data is handled. For example, it should be
obvious that a numeric variable cannot hold a string value such as “Hello.”
However, in some cases, the type of a value being assigned to a variable is
not always so clear-cut.
Take the literal value 42 as an example. It is numeric. Furthermore, it is an
integer, and you can assign it directly to an integer variable. But what
happens if you try and assign this value to a non-integer type, such as a
floating-point variable? The answer is that C# will silently convert the integer
value to a floating-point value. This is relatively harmless but is not
necessarily good practice. You should really specify that you intended to treat
the literal value 42 as a floating-point number and haven’t mistakenly
assigned it to the wrong type of variable. You can do this by appending the
“F” suffix to the numeric literal, like this:
Click here to view code image
float myVar; // declare a floating-point variable
myVar = 42F; // assign a floating-point value to the variable
How about the value 0.42; what is the type of this expression? The answer
is that, like all numeric literals that include a decimal point, it is actually a
double-precision floating-point number, referred to as a double for short. You