# Secure Computation Frameworks and Protocols

## Support Vector Machines and Decision Boundaries
The margin, support vectors, and decision boundary in support vector machines (SVMs) are key concepts [22–25, 65]. Additionally, server-aided secure computation can enhance security against active adversaries [44]. The secure computation framework detailed in [47, Chapter 6] leverages correlated randomness, providing both passive and active security, as well as support for multiple semi-trusted parties (STPs).

## Garbled Circuit (GC)-based Frameworks
- **Fairplay** [64]: This was the first implementation of a GC protocol, allowing users to write programs in a high-level language called Secure Function Definition Language (SFDL), which is then translated into a Boolean circuit.
- **FairplayMP** [15]: An extension of Fairplay to the multiparty setting.
- **FastGC** [48]: Introduces pipelining to reduce the running time and memory requirements of GC execution.
- **TinyGarble** [81]: A recent GC framework that generates compact and efficient Boolean circuits using industrial logic synthesis tools. It supports both sequential and combinational circuits.
- **ObliVM** [61]: Provides a domain-specific programming language and secure computation framework to facilitate development.
- **Frigate** [67]: A validated compiler and circuit interpreter for secure computation. The authors also test and validate several secure computation compilers and report their limitations.
- **PCF (Portable Circuit Format)** [53]: Introduces a compact representation of Boolean circuits, enabling better scaling of secure computation programs.

## Secret Sharing-based Frameworks
- **Sharemind** [18]: Based on additive secret sharing over the ring \( \mathbb{Z}_{2^{32}} \). It requires three nodes and is secure in the honest-but-curious adversary model.
- **SEPIA** [21]: A library for privacy-preserving data aggregation, based on Shamir’s secret sharing scheme, where computation is performed by three or more privacy peers.
- **VIFF** [30]: A framework implementing asynchronous secure computation protocols, also based on Shamir’s secret sharing.
- **PICCO** [85]: A source-to-source compiler that generates secure multiparty computation protocols from C functions. The output is a C program that runs the secure computation using linear secret sharing.
- **SPDZ** [31]: A secure computation protocol based on additive secret sharing, secure against \( n-1 \) corrupted computation nodes in the malicious model.
- **Recent Work** [3, 4, 40]: Introduces an efficient protocol for three-party secure computation. Generally, secret-sharing-based frameworks require communication among three or more computation nodes, often with quadratic communication complexity. However, Chameleon reduces this by not involving the third node (STP) in the online phase, thereby reducing communication and running time.

## Mixed Protocol Frameworks
- **TASTY** [43]: A compiler that produces mixed-protocols based on GC and homomorphic encryption.
- **Application-Specific Solutions**: Various mixed-protocol solutions have been proposed for applications such as privacy-preserving ridge-regression [69], matrix factorization [69], iris and finger-code authentication [17], and medical diagnostics [9].
- **Chameleon**: Provides a unified framework utilizing three different secure computation protocols for efficient realization of virtually any application.
- **EzPC** [28]: A new framework for compiling two-party protocols, using ABY as its cryptographic back-end. EzPC is cost-aware, automatically inserting type conversion operations to minimize the total cost of the resulting protocol.

## Our Framework
Our framework extends the ABY framework [34] by adding support for signed fixed-point numbers, essential for machine learning applications like deep neural networks. It also supports sequential circuits using the TinyGarble methodology [81], providing more scalability. Our framework offers a faster online phase and more efficient offline phase due to the use of a STP, and we implement a highly efficient vector dot product protocol based on correlated randomness generated by a STP.

## Automatic Protocol Selection
The authors of [51] propose methods, one heuristic and one based on integer programming, to find an optimal combination of two secure computation protocols: HE and GC. While the current version of Chameleon does not provide automatic protocol selection, we consider the solution of [51] and EzPC [28] valuable for future work, though the methods must be adapted to choose between the three secure computation protocols used in Chameleon: additive secret sharing, GC, and GMW.

## Conclusion
We introduced Chameleon, a novel hybrid secure computation framework based on ABY [34], achieving unprecedented performance through:
1. Integration of sequential garbled circuits.
2. An optimized vector dot product protocol for fast matrix multiplications.
3. Employment of a semi-honest third party in the offline phase for generating correlated randomness used for pre-computing OTs and multiplication triples.

Chameleon supports signed fixed-point numbers and outperforms previous state-of-the-art frameworks, processing images of handwritten digits 110x faster than Microsoft CryptoNets [35] and 3.5x faster than MiniONN [62].

## Acknowledgements
This work was co-funded by the DFG as part of project E3 within the CRC 1119 CROSSING, the German Federal Ministry of Education and Research (BMBF), and the Hessen State Ministry for Higher Education, Research, and the Arts (HMWK) within CRISP.

## References
[References listed as provided in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical details and references.