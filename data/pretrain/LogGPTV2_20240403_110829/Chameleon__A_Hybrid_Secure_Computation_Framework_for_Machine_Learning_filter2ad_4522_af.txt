MMarginwbClass -1Class 1Decision BoundrySupportVectors[22–25, 65]. Furthermore, server-aided secure computation can be
used to achieve stronger security against active adversaries [44].
The secure computation framework of [47, Chapter 6] also uti-
lizes correlated randomness. Beyond passive security and one STP,
this framework also covers active security and multiple STPs.
GC-based Frameworks. The first implementation of the GC
protocol is Fairplay [64] that allows users to write the program in
a high-level language called Secure Function Definition Language
(SFDL) which is translated into a Boolean circuit. FariplayMP [15] is
the extension of Fairplay to the multiparty setting. FastGC [48] re-
duces the running time and memory requirements of the GC execu-
tion by introducing pipelining. TinyGarble [81] is one of the recent
GC frameworks that proposes to generate compact and efficient
Boolean circuits using industrial logic synthesis tools. TinyGarble
also supports sequential circuits (cyclic graph representation of
circuits) in addition to traditional combinational circuits (acyclic
graph representation). Our GC engine implementation is based on
TinyGarble. ObliVM [61] provides a domain-specific programming
language and secure computation framework that facilitates the
development process. Frigate [67] is a validated compiler and cir-
cuit interpreter for secure computation. Also, the authors of [67]
test and validate several secure computation compilers and report
the corresponding limitations. PCF (Portable Circuit Format) [53]
has introduced a compact representation of Boolean circuits that
enables better scaling of secure computation programs. Authors
in [54] have shown the evaluation of a circuit with billion gates in
the malicious model by parallelizing operations.
Secret Sharing-based Frameworks. The Sharemind frame-
work [18] is based on additive secret sharing over the ring Z232.
The computation is performed with three nodes and is secure in the
honest-but-curious adversary model where only one node can be
corrupted. SEPIA [21] is a library for privacy-preserving aggrega-
tion of data for network security and monitoring. SEPIA is based on
Shamir’s secret sharing scheme where computation is performed
by three (or more) privacy peers. VIFF (Virtual Ideal Functionality
Framework) [30] is a framework that implements asynchronous
secure computation protocols and is also based on Shamir’s secret
sharing. PICCO [85] is a source-to-source compiler that generates
secure multiparty computation protocols from functions written
in the C language. The output of the compiler is a C program that
runs the secure computation using linear secret sharing. SPDZ [31]
is a secure computation protocol based on additive secret sharing
that is secure against n − 1 corrupted computation nodes in the
malicious model. Recent work of [3, 4, 40] introduces an efficient
protocol for three-party secure computation. In general, for se-
cret sharing-based frameworks, three (or more) computation nodes
need to communicate in the online phase and in some cases, the
communication is quadratic in the number of computation nodes.
However, in Chameleon, the third node (STP) is not involved in the
online phase which reduces the communication and running time.
While Chameleon offers more flexibility compared to secret-
sharing based frameworks, it is computationally more efficient
compared to Sharemind and SEPIA. To perform each multiplica-
tion, Sharemind needs 6 instances of the Du-Atallah protocol [18]
while Chameleon needs 1 (when one operand is shared) or 2 (in
the general case where both operands are shared). In SEPIA [21],
all operations are performed modulo a prime number which is
less efficient compared to modulo 2l and also requires multiple
multiplications for creating/reconstructing a share.
Mixed Protocol Frameworks. TASTY [43] is a compiler that
can produce mixed-protocols based on GC and homomorphic
encryption. Several application-specific mixed-protocol solutions
have been proposed for privacy-preserving ridge-regression [69],
matrix factorization [69], iris and finger-code authentication [17],
and medical diagnostics [9]. However, Chameleon provides a uni-
fied framework that utilizes three different secure computation
protocols for efficient realization of virtually any application.
Recently, a new framework for compiling two-party protocols
called EzPC [28] was presented. EzPC uses ABY as its cryptographic
back-end: a simple and easy-to-use imperative programming lan-
guage is compiled to ABY input. An interesting feature of EzPC
is its “cost awareness”, i.e. its ability to automatically insert type
conversion operations in order to minimize the total cost of the re-
sulting protocol. However, they claim that ABY’s GC engine always
provides better performance for binary operations than GMW and
thus convert only between A-SS and GC.
Our framework extends the ABY framework [34]. Specifically,
we add support for signed fixed-point numbers which is essential
for almost all machine learning applications such as processing deep
neural networks. In addition to combinational circuits, Chameleon
also supports sequential circuits by incorporating TinyGarble-
methodology [81] which provides more scalability. Our framework
provides a faster online phase and more efficient offline phase in
terms of computation and communication due to the usage of a
STP. Moreover, we implement a highly efficient vector dot product
protocol based on correlated randomness generated by a STP.
Automatic Protocol Selection. The authors of [51] propose
two methods, one heuristic and one based on integer programming,
to find an optimal combination of two secure computation protocols,
HE and GC. The current version of Chameleon does not provide
automatic protocol selection. However, we find the solution of [51]
and the aforementioned EzPC [28] valuable as a future direction
of this work; although, the methods must be modified in order to
choose between the three secure computation protocols that are
used in Chameleon: additive secret sharing, GC, and GMW.
8 CONCLUSION
We introduced Chameleon, a novel hybrid (mixed-protocol) secure
computation framework based on ABY [34] that achieves unprece-
dented performance by (i) integrating sequential garbled circuits,
(ii) providing an optimized vector dot product protocol for fast ma-
trix multiplications, and (iii) employing a semi-honest third party in
the offline phase for generating correlated randomness that is used
for pre-computing OTs and multiplication triples. In contrast to
previous state-of-the-art frameworks, Chameleon supports signed
fixed-point numbers. We evaluated our framework on convolutional
neural networks where it can process an image of hand-written dig-
its 110x faster compared to the prior art Microsoft CryptoNets [35]
and 3.5x faster than the most recent MiniONN [62].
Acknowledgements. This work has been co-funded by the DFG
as part of project E3 within the CRC 1119 CROSSING and by the
German Federal Ministry of Education and Research (BMBF) as well
13
as by the Hessen State Ministry for Higher Education, Research
and the Arts (HMWK) within CRISP.
[2] Mehrdad Aliasgari, Marina Blanton, Yihua Zhang, and Aaron Steele. 2013. Secure
REFERENCES
[1] Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey
Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, Manju-
nath Kudlur, Josh Levenberg, Rajat Monga, Sherry Moore, Derek Gordon Murray,
Benoit Steiner, Paul A. Tucker, Vijay Vasudevan, Pete Warden, Martin Wicke,
Yuan Yu, and Xiaoqiang Zheng. 2016. TensorFlow: A System for Large-Scale
Machine Learning. In Operating Systems Design and Implementation (OSDI).
Computation on Floating Point Numbers. In NDSS.
[3] Toshinori Araki, Assi Barak, Jun Furukawa, Tamar Lichter, Yehuda Lindell, Ariel
Nof, Kazuma Ohara, Adi Watzman, and Or Weinstein. 2017. Optimized Honest-
Majority MPC for Malicious Adversaries - Breaking the 1 Billion-Gate Per Second
Barrier. In IEEE S&P.
[4] Toshinori Araki, Jun Furukawa, Yehuda Lindell, Ariel Nof, and Kazuma Ohara.
2016. High-Throughput Semi-Honest Secure Three-Party Computation with an
Honest Majority. In CCS.
[5] Gilad Asharov, Abhishek Jain, Adriana López-Alt, Eran Tromer, Vinod Vaikun-
tanathan, and Daniel Wichs. 2012. Multiparty Computation with Low Communi-
cation, Computation and Interaction via Threshold FHE. In EUROCRYPT.
[6] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013.
More efficient oblivious transfer and extensions for faster secure computation.
In CCS.
[7] Raad Bahmani, Manuel Barbosa, Ferdinand Brasser, Bernardo Portela, Ahmad-
Reza Sadeghi, Guillaume Scerri, and Bogdan Warinschi. 2017. Secure multiparty
computation from SGX. In FC.
[8] Elaine Barker and John Kelsey. 2015. NIST Special Publication 800-90A Revision 1:
Recommendation for Random Number Generation Using Deterministic Random Bit
Generators. Technical Report.
[9] Mauro Barni, Pierluigi Failla, Vladimir Kolesnikov, Riccardo Lazzeretti, Ahmad-
Reza Sadeghi, and Thomas Schneider. 2009. Secure evaluation of private linear
branching programs with medical applications. In ESORICS.
[10] Mauro Barni, Pierluigi Failla, Riccardo Lazzeretti, Ahmad-Reza Sadeghi, and
Thomas Schneider. 2011. Privacy-Preserving ECG Classification With Branching
Programs and Neural Networks. TIFS 6, 2 (2011).
In CRYPTO.
[11] Donald Beaver. 1991. Efficient multiparty protocols using circuit randomization.
[12] Donald Beaver. 1995. Precomputing oblivious transfer. In CRYPTO.
[13] Donald Beaver. 1996. Correlated pseudorandomness and the complexity of private
[19] Raphael Bost, Raluca Ada Popa, Stephen Tu, and Shafi Goldwasser. 2015. Machine
[16] Aner Ben-Efraim, Yehuda Lindell, and Eran Omri. 2016. Optimizing Semi-Honest
[17] Marina Blanton and Paolo Gasti. 2011. Secure and efficient protocols for iris and
[15] Assaf Ben-David, Noam Nisan, and Benny Pinkas. 2008. FairplayMP: a system
[18] Dan Bogdanov, Sven Laur, and Jan Willemson. 2008. Sharemind: A framework
[20] Justin Brickell, Donald E Porter, Vitaly Shmatikov, and Emmett Witchel. 2007.
[14] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip Rogaway. 2013.
computations. In STOC.
Efficient garbling from a fixed-key blockcipher. In IEEE S&P.
for secure multi-party computation. In CCS.
Secure Multiparty Computation for the Internet. In CCS.
fingerprint identification. In ESORICS.
for fast privacy-preserving computations. In ESORICS.
Learning Classification over Encrypted Data. In NDSS.
Privacy-preserving remote diagnostics. In CCS.
[21] Martin Burkhart, Mario Strasser, Dilip Many, and Xenofontas Dimitropoulos.
2010. SEPIA: Privacy-preserving aggregation of multi-domain network events
and statistics. USENIX Security (2010).
garbled circuit generation for mobile devices. In ACSAC.
[23] Henry Carter, Benjamin Mood, Patrick Traynor, and Kevin R. B. Butler. 2013.
Secure Outsourced Garbled Circuit Evaluation for Mobile Devices. In USENIX
Security.
[24] Henry Carter, Benjamin Mood, Patrick Traynor, and Kevin R. B. Butler. 2015.
Outsourcing Secure Two-Party Computation as a Black Box. In CANS.
[25] Henry Carter, Benjamin Mood, Patrick Traynor, and Kevin R. B. Butler. 2016.
Secure outsourced garbled circuit evaluation for mobile devices. Journal of
Computer Security (2016).
[26] Octavian Catrina and Amitabh Saxena. 2010. Secure Computation with Fixed-
Point Numbers. In FC.
[27] Hervé Chabanne, Amaury de Wargny, Jonathan Milgram, Constance Morel,
and Emmanuel Prouff. 2017. Privacy-Preserving Classification on Deep Neural
Network. IACR Cryptology ePrint Archive 2017/035 (2017).
[28] Nishanth Chandran, Divya Gupta, Aseem Rastogi, Rahul Sharma, and Shardul
Tripathi. 2017. EzPC: Programmable, Efficient, and Scalable Secure Two-Party
[22] Henry Carter, Charles Lever, and Patrick Traynor. 2014. Whitewash: outsourcing
14
Computation. IACR Cryptology ePrint Archive 2017/1109 (2017).
[29] Francois Chollet. 2015. keras. https://github.com/fchollet/keras. (2015).
[30] Ivan Damgård, Martin Geisler, Mikkel Krøigaard, and Jesper Buus Nielsen. 2009.
[31] Ivan Damgård, Valerio Pastro, Nigel Smart, and Sarah Zakarias. 2012. Multiparty
Asynchronous multiparty computation: Theory and implementation. In PKC.
computation from somewhat homomorphic encryption. In CRYPTO.
[32] Daniel Demmler, Ghada Dessouky, Farinaz Koushanfar, Ahmad-Reza Sadeghi,
Thomas Schneider, and Shaza Zeitouni. 2015. Automated synthesis of optimized
circuits for secure computation. In CCS.
[33] Daniel Demmler, Thomas Schneider, and Michael Zohner. 2014. Ad-Hoc Secure
Two-Party Computation on Mobile Devices using Hardware Tokens.. In USENIX
Security.
[34] Daniel Demmler, Thomas Schneider, and Michael Zohner. 2015. ABY-A Frame-
work for Efficient Mixed-Protocol Secure Two-Party Computation.. In NDSS.
[35] Nathan Dowlin, Ran Gilad-Bachrach, Kim Laine, Kristin Lauter, Michael Naehrig,
and John Wernsing. 2016. CryptoNets: Applying neural networks to encrypted
data with high throughput and accuracy. In ICML.
access with approximate matching. In E-Commerce Security and Privacy.
[37] Zekeriya Erkin, Martin Franz, Jorge Guajardo, Stefan Katzenbeisser, Inald La-
gendijk, and Tomas Toft. 2009. Privacy-Preserving Face Recognition. In PETS.
[38] David Evans, Yan Huang, Jonathan Katz, and Lior Malka. 2011. Efficient privacy-
preserving biometric identification. In NDSS.
[39] Joan Feigenbaum, Benny Pinkas, Raphael Ryger, and Felipe Saint-Jean. 2004.
Secure computation of surveys. In EU Workshop on Secure Multiparty Protocols.
[40] Jun Furukawa, Yehuda Lindell, Ariel Nof, and Or Weinstein. 2017. High-
Throughput Secure Three-Party Computation for Malicious Adversaries and
an Honest Majority. In EUROCRYPT.
Cambridge university press.
[41] Oded Goldreich. 2009. Foundations of cryptography: volume 2, basic applications.
[42] Oded Goldreich, Silvio Micali, and Avi Wigderson. 1987. How to play any mental
[36] Wenliang Du and Mikhail J Atallah. 2001. Protocols for secure remote database
game. In STOC.
[43] Wilko Henecka, Stefan Kögl, Ahmad-Reza Sadeghi, Thomas Schneider, and Immo
Wehrenberg. 2010. TASTY: tool for automating secure two-party computations.
In CCS.
Party Computation. In ARES.
Neural Networks over Encrypted Data. (2017).
[44] Amir Herzberg and Haya Shulman. 2012. Oblivious and Fair Server-Aided Two-
[45] Ehsan Hesamifard, Hassan Takabi, and Mehdi Ghasemi. 2017. CryptoDL: Deep
[46] Andreas Holzer, Martin Franz, Stefan Katzenbeisser, and Helmut Veith. 2012.
Secure two-party computations in ANSI C. In CCS.
University of Virginia.
[47] Yan Huang. 2012. Practical Secure Two-Party Computation. Ph.D. Dissertation.
[48] Yan Huang, David Evans, Jonathan Katz, and Lior Malka. 2011. Faster Secure
[51] Florian Kerschbaum, Thomas Schneider, and Axel Schröpfer. 2014. Automatic
[52] Vladimir Kolesnikov and Thomas Schneider. 2008. Improved garbled circuit: Free
[49] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. 2003. Extending oblivious
[50] Seny Kamara, Payman Mohassel, and Ben Riva. 2012. Salus: a system for server-
Two-Party Computation Using Garbled Circuits.. In USENIX Security.
transfers efficiently. In CRYPTO.
aided secure function evaluation. In CCS.
protocol selection in secure two-party computations. In ACNS.
XOR gates and applications. In ICALP.
[53] Benjamin Kreuter, Abhi Shelat, Benjamin Mood, and Kevin RB Butler. 2013.
PCF: A Portable Circuit Format for Scalable Two-Party Secure Computation.. In
USENIX Security.
Computation with Malicious Adversaries.. In USENIX Security.
numbers in secure multiparty computations. In ISC.
private support vector machines. In SIGKDD.
[57] Yoshinori Aono Le Trieu Phong, Takuya Hayashi, Lihua Wang, and Shiho Mo-
riai. [n. d.]. Privacy-Preserving Deep Learning via Additively Homomorphic
Encryption. ([n. d.]).
[56] Sven Laur, Helger Lipmaa, and Taneli Mielikäinen. 2006. Cryptographically
[54] Benjamin Kreuter, Abhi Shelat, and Chih-Hao Shen. 2012. Billion-Gate Secure
[55] Toomas Krips and Jan Willemson. 2014. Hybrid model of fixed and floating point
[58] Yann LeCun, Corinna Cortes, and Christopher Burges. 2017. MNIST dataset.
http://yann.lecun.com/exdb/mnist/. (2017).
[59] Yehuda Lindell and Benny Pinkas. 2000. Privacy Preserving Data Mining. In
[60] Yehuda Lindell and Benny Pinkas. 2002. Privacy Preserving Data Mining. J.
[61] Chang Liu, Xiao Shaun Wang, Kartik Nayak, Yan Huang, and Elaine Shi. 2015.
CRYPTO.
Cryptology 15, 3 (2002), 177–206.
ObliVM: A programming framework for secure computation. In IEEE S&P.
Predictions via MiniONN transformations. In CCS. http://ia.cr/2017/452.
[63] Ximeng Liu, Robert H Deng, Wenxiu Ding, Rongxing Lu, and Baodong Qin.
2016. Privacy-preserving outsourced calculation on floating point numbers. TIFS
(2016).
[62] Jian Liu, Mika Juuti, Yao Lu, and N. Asokan. 2017. Oblivious Neural Network
[78] Thomas Schneider and Michael Zohner. 2013. GMW vs. Yao? Efficient Secure
Multi-Class Support Vector Machine for Outsourcing the Data Classification in
Cloud. TDSC 11, 5 (2014).
[75] Bita Darvish Rouhani, M Sadegh Riazi, and Farinaz Koushanfar. 2017. DeepSecure:
Scalable Provably-Secure Deep Learning. arXiv preprint arXiv:1705.08963 (2017).
[76] Ahmad-Reza Sadeghi, Thomas Schneider, and Immo Wehrenberg. 2009. Efficient
Privacy-Preserving Face Recognition. In ICISC.
[77] Ahmad-Reza Sadeghi and Thomas Schneider. 2009. Generalized Universal Circuits
for Secure Evaluation of Private Functions with Application to Data Classification.
In ICISC.
Two-Party Computation with Low Depth Circuits. In FC.
CCS.
[80] Suphannee Sivakorn, Iasonas Polakis, and Angelos D. Keromytis. 2016. I am
Robot: (Deep) Learning to Break Semantic Image CAPTCHAs. In IEEE EuroS&P.
[81] Ebrahim M Songhori, Siam U Hussain, Ahmad-Reza Sadeghi, Thomas Schneider,
and Farinaz Koushanfar. 2015. TinyGarble: Highly Compressed and Scalable
Sequential Garbled Circuits. In IEEE S&P.
classification. Knowledge and Information Systems 14, 2 (2008), 161–178.
[82] Jaideep Vaidya, Hwanjo Yu, and Xiaoqian Jiang. 2008. Privacy-preserving SVM
[79] Reza Shokri and Vitaly Shmatikov. 2015. Privacy-preserving deep learning. In
[83] Andrew Yao. 1986. How to generate and exchange secrets. In FOCS.
[84] Samee Zahur, Mike Rosulek, and David Evans. 2015. Two Halves Make a Whole.
[85] Yihua Zhang, Aaron Steele, and Marina Blanton. 2013. PICCO: a general-purpose
In EUROCRYPT.
compiler for private distributed computation. In CCS.
[64] Dahlia Malkhi, Noam Nisan, Benny Pinkas, and Yaron Sella. 2004. Fairplay-Secure
[66] Payman Mohassel and Yupeng Zhang. 2017. SecureML: A System for Scalable
[65] Payman Mohassel, Ostap Orobets, and Ben Riva. 2016. Efficient Server-Aided
[68] Moni Naor, Benny Pinkas, and Reuban Sumner. 1999. Privacy preserving auctions
Two-Party Computation System.. In USENIX Security.
2PC for Mobile Phones. In PoPETs.
Privacy-Preserving Machine Learning.. In IEEE S&P.
[67] Benjamin Mood, Debayan Gupta, Henry Carter, Kevin Butler, and Patrick Traynor.
2016. Frigate: A validated, extensible, and efficient compiler and interpreter for
secure computation. In IEEE EuroS&P.
and mechanism design. In ACM Conference on Electronic Commerce.
[69] Valeria Nikolaenko, Udi Weinsberg, Stratis Ioannidis, Marc Joye, Dan Boneh, and
Nina Taft. 2013. Privacy-preserving ridge regression on hundreds of millions of
records. In IEEE S&P.
[70] Claudio Orlandi, Alessandro Piva, and Mauro Barni. 2007. Oblivious Neural Net-
work Computing via Homomorphic Encryption. EURASIP Journal on Information
Security 2007, 1 (2007).
[71] Margarita Osadchy, Benny Pinkas, Ayman Jarrous, and Boaz Moskovich. 2010.
SCiFI - A System for Secure Face Identification. In IEEE S&P.
[72] Nicolas Papernot, Patrick D. McDaniel, Somesh Jha, Matt Fredrikson, Z. Berkay
Celik, and Ananthram Swami. 2016. The Limitations of Deep Learning in Adver-
sarial Settings. In IEEE EuroS&P.
circuits for efficient private IEEE 754 floating-point computations. In FC.
[74] Yogachandran Rahulamathavan, Raphael C.-W. Phan, Suresh Veluru, Kanap-
athippillai Cumanan, and Muttukrishnan Rajarajan. 2014. Privacy-Preserving
[73] Pille Pullonen and Sander Siim. 2015. Combining secret sharing and garbled
15