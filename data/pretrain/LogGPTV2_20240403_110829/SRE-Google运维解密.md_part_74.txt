期内感觉很好，但在SRE环境下，员工在项目工作和中断性工作模式下找到某种平衡一
职处理中断性工作时，之前的项目工作反而是分心的事情了。虽然中断性工作可能是短
修复了X个Bug，或者是紧急警报不再发生了。剩下的问题就是一些分心的事情。当专
式的系统改进、处理工单、修复问题等突然有了明确的目标、界限，以及清晰的反馈：
如果某个人可以全职处理中断性任务，中断性任务就不再是中断性的了。进行一些渐进
打断的工作环境中，压力非常大。
能是在进行项目工作的同时兼职on-call，处理中断性事务，这使得他们处于一种不停被
有些工程师将on-call当作是中断性任务，紧急警报过多给他们造成了很大压力。他们可
与其他人协作，可以明显改善系统整体健康程度的过程中感到极大的满足。恰恰相反
确的途径。某些SRE在on-call值班的时候可以进入这个状态。他们在追寻问题的原因，
每个人都喜欢做自己知道如何处理的事情。事实上，执行这类任务是进入流状态的最明
认知流状态：愤怒的小鸟
的模式中。
持续导致很沮丧。又或者，这些人没有试着去进入这种状态，而是一直处于不停被打断
不幸的是，很多SRE成员花费了很多时间进入这个状态，但是被各种事情所打断而无法
不知道合适的平衡点在哪里，或者和你预想的完全不一样。
·Fred的团队使用随机工单分配系统，某个需要今天处理的工单被分配给了他。
第29章处理中断性任务
一每个人都可以自由安排自己的时间。
一切正常，对吗？
---
## Page 401
报降级为工单，也可以找副on-call来共同处理。
责。这个概念很显然适用于工单，但是也适用于紧急警报。on-call工程师可以将紧急警
不论哪种中断性任务，如果中断性任务的量对一个人来说太高，那么应该增加一个人负
一般性建议
如果本章中描绘的模型不适用于你，那么下面列出了一些具体的建议，可以选用。
实际一点的建议
被那些他们本不应该负责的事情所打扰。
还是只是做中断性工作。这意味着他们可以更长时间地专注于手上的工作，不会不停地
极化时间意味着当每个人来上班时，他们应该清晰地知道自己今天是否只是做项目工作，
这种经常性的生产力丧失，我们应该延长每种工作模式的时间，
任务需要进行两次上下文切换，而这种切换会造成数个小时的生产力的丧失。为了避免
断性任务是无法避免的。然而，将工程师当成是可以随时中断、上下文切换没有成本是
为了限制干扰数量，我们应该减少上下文切换（指工作类型、环境等的改变）。某些中
极化时间
甩不掉的Bug，同事之间也会有关系的产生与职责的分配。然而，作为团队来说，是有
我们可以说某种程度的干扰是不可避免的，也是有意为之的。这是正确的：每个人都有
以及一些无法避免的责任造成的。
通过关闭E-mail、关掉IM,或者其他手段来减少一定的干扰。但是某些干扰是政策造成的，
不正确的。给每次上下文切换加上成本的考虑。在项目工作中，一次20分钟的中断性
最后结果是，虽然Fred有一整天的时间分配给项目工作，他还是很容易被分心。他可以
一些管理方式能使更多的员工不受干扰的。
●Fred的同事目前负责on-call,收到了一个紧急警报。发出警报的组件Fred最熟悉，
·等等。
?
某个用户过来咨询一个问题，因为Fred为人和善。
中的事情检查发布的状态，回滚这个发布等。
某个已经持续了三四周的发布到Fred的时候突然出现了问题，Fred需要停下手
就在处理的。
某个用户将某个工单的优先级提高了，这个工单是上周Fred轮值on-call的时候
所以这个同事过来咨询意见。
不完美的机器
一天甚至半天都可以。
359
<412
---
## Page 402
413
360
错误的。这意味着该成员效率不高，他们会影响对于工单数量的统计。如果某个人负责
有的时候员工在非值班时间也会处理工单，因为这样是显得很忙的好办法。这种行为是
下，这种情况不应该发生，但是还是偶尔会发生，我们应该尽一切努力避免这种情况。
有的时候，某个中断性任务只有某个目前不在值班的成员能够妥善处理。虽然理想情况
负责中断性事务，或者不负责
交接过程一这有一定成本，但是却保障了接下来的人不受打扰。
个发布管理者的角色来由on-call和其他中断性任务处理者来承担。同时应该进行正式化
有非常清晰的流程定义，那么就没有任何理由让任何一个人专门负责这件事情。定义一
尽可能地让整个团队共同负责这件事。例如变更发布、配置文件修改等，如果这项工作
持续性的运维工作
干扰员工，降低他们的工作效率。
有两个全职员工处理工单。不要将复杂分散到整个团队中去。人不是机器，这样做只会
call和副on-call都处理不完，那么需要重新架构整个工单的处理流程，保障任何时间都
工单处理应该由全职人员负责，同时保证占用合理的时间。如果团队目前的工单主on-
和让成员尽可能不被打扰的目标背道而驰。
如果目前你是随机分配工单给团队成员，请立刻停止。这样做对团队的时间非常不尊重，
工单
你了！）
整理的配置文件等。未来的on-call工程师可以从这些活动中受益。他们就不会再来打扰
（另外：总有一些清理工作要做，工单数量可能是0，但是总会有需要更新的文档，需要
on-call工程师实际帮助主on-call工程师解决问题，那么他也应该专注于中断性任务。
有其他人负责工单等工作，可以考虑将这两个角色合并。如果由于警报数量原因需要副
on-call工程师做后备，那么可以认为副on-call工程师能够在项目上取得一些进展。如果
副on-call工程师的责任取决于这些责任的繁重程度。如果副on-call的工作仅仅是给主
期望员工在on-call的同时还能在项目上有所进展（或者其他高上下文切换成本的活动）。
这个人就不应该参与on-call。管理层应该介入，安排其他人替代on-call。管理层不应该
这一周他应该完全排除在项目进度之外。如果某个项目非常重要，不能等待一周，那么
放下的工单，或者其他中断性事务应该由on-call人员处理。当某个工程师on-call一周时，
主on-call工程师应该专注于on-call工作。如果目前紧急警报较少，那么一些可以随时
on-call
第29章处理中断性任务
---
## Page 403
注2参看http://en.wikipedia.org/wiki/Running_the_gauntlet
理团队的负载。策略可以是临时的，也可以是永久的，取决于具体情况。制定这种策略
如果团队负责解决客户发出的工单，或者其他中断性任务，我们可以创建一些策略来管
源问题）该问题。这样可以给处理中断性事务的人争取一些时间，同时也设置了一个截
断性问题，看是否能够找到根本原因。如果这个根本原因是可以在合理时间范围内修复
我们应该定期进行工单与紧急警报的整理会议，在这个会议上应该讨论出现的每一类中
出现的频率。很多团队都会进行on-call交接与紧急警报评审会议，但是没有几个团队也
享状态。有的时候只是简单地交流就可以触发某种好的解决方案的产生，从而降低整体
何进展，每个人都会不停地被同样的问题不停地打扰。
接下来的人也会如此，这些工单的根源问题没有人去修复。这样做，整个团队不会有任
几个月才值班一次的时候，简单补救一下准2，叹口气，然后就恢复日常工作是很正常的。
很多工单轮值和on-call轮值就跟轮流射击差不多，对大型团队来说更是如此。当每隔
实际分析工单
列方式可以降低整体的工单负载。
如果团队中需要很多人同时进行中断性任务，那么可能这种负载是不能持久的。有一系
减少中断
平是否可行。
处理工单，但是其他两三个人也来参与，可能管理层就没法知道到底目前的工单数量水
可以在尊重用户与尊重自己之间选择一个更好的平衡点。有的时候策略和代码一样有用。
使用一些策略来缓解这种问题。
这条格言主要适用于用户产生的中断性任务。如果工单很多，解决方法烦琐，我们可以
尊重自己，
止期限。
的，我们应该在修复根本原因之前，静音（指暂时不再进行临时处理，而是直接修复根
这样对待工单。
工单的处理也应该有个交接过程，和on-call一样。交接过程可以保证每个处理人之间共
一定要记住：
·团队应该为自己的服务设置合理的服务水平。
）将某些事务推回给客户解决是可以的。
也尊重用户
不完美的机器
361
415
414
---
## Page 404
362
材料。同样，我们处理这样的请求也应该是非常及时而且有效的。
思想应该是确保用户发来的请求应该是有意义的、合理的，同时提供了所有需要准备的
这个解决方案的一个问题是要在尊重用户和尊重自己之间寻找一个平衡点。我们的指导
他们应该自己准备好，花一定的精力来做这件事。
他们来完成这些步骤，最后发给SRE评审。一定要记住，如果客户需要某种事情发生，
资源，我们可以实现准备好代码，或者配置文件的改动模板，同时给用户清晰的指示让
完成，这时应该考虑将这种请求交给用户自己完成。例如，如果用户需要贡献一些计算
如果某个中断性任务的处理非常复杂，耗时很长，但是却不需要SRE具有的高级权限来
称该组件退役，用其他组件来替代，或者采用其他任何更有效的解决办法。
可能这个组件并不是那么重要。我们可以考虑将紧急警报职责还给开发者，或者可以宣
系统上的时间，看看是否值得。在某些时候，如果我们无法说服开发者来修复根源问题，
批挑剔的用户非常需要这个工具，我们可以用其他选项达成目标。要衡量花在维护这个
例如，如果我们负责支持一个经常出问题，但是没有开发者支持的工具，同时又有一小
第29章处理中断性任务
---
## Page 405
接下来的部分是给即将嵌入团队的SRE的一些指导。
经验，同时应该看一下本书的第6章。
之前，你应该花一些时间来回顾一下Ben Treynor Sloss的介绍中提到的 SRE理念和实践
歧途，退化成那种只专注于工单处理的传统运维团队。在决定采用这种嵌人SRE的方式
当你开始构建自己的第一个SRE团队时，采用本章中介绍的方法可以帮助避免团队走入
定会产生更好的结果。对那些防御性比较强的团队来说，可能会激发问题的发生。
注意，当采用这个方法的时候，只需要调入一名SRE就够了。同时调入两名SRE不一
通过观察团队的日常工作，提出改善性意见，该SRE可以帮助团队用全新的视角来审视
该SRE应该关注于改善这个团队的行事方式，而不是简单地帮助团队清理积压的工单
解决这个问题的一种方式是给处于过载状态的团队临时调入一个SRE。调人该团队后
就会减少花在改进服务上的时间，服务的可扩展性和可靠性肯定会随之变差。
不能在项目工作上取得任何进展。当一个团队被迫花费过多时间解决工单的时候，他们
久。长时间承担非常繁重的Ops类型的工作是非常危险的，团队成员可能会劳累过度，
在实际工作中，这种平衡可能会被每天工单数量的不断增加而被打乱，甚至持续数月之
Google的SRE团队的标准政策要求团队在项目研发和被动式工作之间均匀分配时间。
自己的日常工作。这往往是团队本身的成员做不到的。
通过嵌入SRE的方式帮助团队从运
维过载中恢复
作者：Randall Bosetti
编辑：DiameBates
第30章
363
417
---
## Page 406
第一阶段：了解服务，
419
364
一旦你确定了该团队现有的最大问题之后，下一步就应该关注那些即将要发生的紧急情
找到导火索
而他们自己却不知道。
住，由于团队的历史和视角问题，一些非常小的问题可能其实正在给团队带来很大负担，
你应该花一些时间来根据历史上各种服务中断造成团队压力的程度将其排序。一定要记
真实存在的还是想象中的。在你对服务了解足够深刻、可以讨论设计和部署问题之后，