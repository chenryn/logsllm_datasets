高级加密标准(AES)协议，使用端对端安全机制保障认证通信的机密性和完整性，有助于预防
窃听和重放攻击。它的体系包括几个重要元素：（如果不理解这些要素，先看看 Kerboros 的
—152—
认证流程就好）
Kerberos 用的是 KDC，另外有一个技术是 PKI，用到了 CA、RA 什么的，这里不讲了，都
学完了建议联系起来理解。
①委托人 principal（主体/客体）
任何主体（用户、应用程序）和任何客体（数据、文件）都是委托人，委托人之间的访问
信任必须通过 KDC 来建立，整个系统只是 KDC 是完全可靠可信的；客体接不接受你的访问，全
看你有没有 KDC 给你的“票”，没票免谈。
为了安全、方便的保存和使用那么多委托人的账户数据，就需要所谓的“目录访问服务”
了，即账户数据库。那么多的不同部门、不同系统的委托人，一般会分组来管理，这就是所谓
的域了（realm）；KDC 可以对多个不同的域提供身份认证服务。
强调一下，每个委托人都必须安装 Kerboros 的客户端软件的，不然无法实现与 KDC 的验
证，而且那个所谓的每个委托人与 KDC 之间的唯一的“对称密钥”是由这个客户端和 KDC 同步
生成的。
②密钥分发中心 The key distribution center (KDC)
KDC 是提供身份认证服务的可信第三方。所有委托人（用户和服务）都在 KDC 做了注册，
并由 KDC 维持一个属于该委托人的密钥（所谓的对称密码学）。委托人的身份通过这个密钥来
向 KDC 来验证（不需要发送真实的密码）。KDC 与委托人之间传输的只有密钥和票据。
③Kerberos 身份认证服务器（TGS+AS）KDC=TGS+AS
身份认证服务器就是 KDC 的服务器，是 KDC 功能的实现，包括 2 个重要部分：票据授予服
务/票证发放服务器 TGS（ticket-granting service）和身份认证服务 AS（authentication
servi）。TGS 也就是 KDC 服务器，发票的；AS 对票证真实性和实效性进行验证，验票的。
④授予票证 ticket-granting ticket（TGT）
TGT 是用户登录时，KDC 验证完自己身份后派发的一个根票据，相当于是委托人的“身份
证”，拿到 TGT 就证明我是有身份的人了（证明了我是我自己，我妈是我妈）。它被叫做“票
证授予的票证”，意思是要想被授予票证去访问某个资源，你得先有这个证才行。TGT 进行了
加密，包括一个对称密钥、一个过期时间和用户的 IP 地址；TGT 的有效期一般为几个小时；
主体在请求得到访问某个客体的票据时，先向 KDC 出示自己的 TGT。TGT 就相当于获得了“护
照”，而下面的 ST 就相当于去某国的“签证”。
⑤票据 ticket（ST）
票据就是票，也有称为票证，还有的称为服务票据(ST)service ticket。是一个加密的信
息，是主体访问客体的唯一凭证，由 KDC 的 KGS 生成并发给主体，代表给主体被授予了访问某
个客体的权限。Kerberos 的票据有特定的寿命和使用参数，一旦票据到期，就得续期或者重
新申请。也就是说 KDC 给了你什么票，你就能去什么场，要想去很多场地，就要有很多票。
Kerberos 用户的登录过程（目的是证明自己，拿到 TGT）：
1.用户向客户端输入用户名和密码。
2.客户端使用 AES 加密用户名，然后传输至 KDC。（AES 使用客户端的初始密钥）这个过
程其实也可以不加密，直接发送出去，并不影响安全。
3.KDC 的 AS 负责验证身份，它向账户数据库验证用户名。
—153—
4.用户名验证通过后，KDC 的 AS 生成一个对称密钥，再生成一个时间戳的授予票证(TGT)，
并向账户数据库读出用户密码；然后用对称密钥加密 TGT，再使用用户密码的散列值来加密对
称密钥。
5.KDC 将加密的对称密钥和 TGT 传输给客户端。
6.客户端使用用户密码的散列值来解密对称密钥，用得到的对称密钥再解密 TGT。客户端
安装 TGT，一直使用至其期满。如果用户不知道自己的密码，就得不到对称密钥，也就得不到
TGT，而整个过程密码并不在网上传播，是通过散列认证的。
用户请求访问资源的过程（目的是获取授权，访问服务或数据）：
1.客户端将 TGT 发送回 KDC，同时请求访问某个数据或服务。
2.KDC 验证 TGT 的有效性，对比查看其访问控制表，确认用户是否拥有所请求资源的访问
权限。
3.KDC 的 TGS 生成一个服务票据（ST），就是票据，然后发送至客户端。这个票据 ST 里
有这些信息：一是 TGS 生成的一个会话密钥，用于随后主体（客户端）与客体（服务）间建立
加密通信；这个会话密钥是加密后才发出来的，一个用主体的密钥加密，一个用客体的密钥加
密；此外，票据里还有 1 个身份验证器，包含这些信息：主体的身份标识（用户名）、IP、序
列号和时间戳。（注意，这第一个身份验证器不用发给主体，直接发给客体就好）
4.客户端得到票据，先解密出会话密钥，用后随后的通信加密；再把自己的身份信息写入
票据，这样票据有了第 2 个身份验证器（身份验证信息都是用会话密钥加密的）；最后把新的
票据发送给要访问的服务器或主机（客体）。
5.服务器或主机（客体）得到票据，先解密出会话密钥（如果能解密出来，说明这个票据
是可信的，是来源于 KDC 的，因为只有 KDC 知道它的密钥）；然后用会话密钥解密分别来自主
体和 KDC 的 2 个身份验证器，如果是一样的，说明对方身份是正确的。
6.一旦票据被认证合法，Kerberos 的任务就完成了。用户客户端与服务器或主机随后建
立加密通信会话，开始数据传输。身份验证信息里的时间戳和序列号都可以防范重放攻击。
这里面的考点很多，其中秘密密钥是委托人与 KDC 之间用的，会话密钥是主体访问客体时
用的，两者都是 KDC 随机生成再分发的。
Kerberos 的缺点：
①存在单点故障。如果 KDC 被破解，所有系统的秘钥也都会被破解；如果 KOC 离线，那么
就无法完成身份认证过程。
②有严格的时间要求。即所有的系统彼此要在五分钟内同步时间，如果一个系统不同步或
时间被改变了，以前发出的 TGT 将不再是有效的，系统将无法接收任何新的票据。实际上，客
户端将被拒绝访问任何受保护的网络资源。反正客户端必须要与 KDC 服务器的时间同步。
③KDC 的性能要够好，能满足大量认证需求，并且是可扩展的，不然就跑不动了。
④不加密通信流量。
⑤其密码或密钥可能遭受暴力破解/蛮力攻击/字典攻击。
—154—
2.其它单点登陆的技术
①欧洲安全多环境应用系统(SESAME) Secure European System for Applications in a
Multivendor Environment
这是一个基于邀请的认证系统，其开发是为了解决 Kerberos 的缺点。不过，最终还是新
一代的 Kerberos 更好，SESAME 已经不再用了。SESAME 混合使用对称密钥和非对称密钥，而
Kerberos 只用了对称密钥。
Kerberos 通过使用票证来让主体通过客体的身份验证，而 SESAME 则使用特权属性证书
PAC(Privileged Attribute Certificate),PAC 包含主体的身份、对客体的访问能力、访问时
间段以及 PAC 的生命期。PAC 具有数字签名，因此客体能够确保其来自可信任的身份验证服务
器，这种服务器被称为特权属性服务器 PAS(privileged Attribute Server)。PAS 扮演与
Kerberos 内的 KDC 类似的角色。用户成功通过身份验证服务的身份验证之后就会得到一个要
提交给 PAS 的令牌。PAS 随后为用户生成一个 PAC ，该 PAC 用于提交给要访问的资源。
②凭证库思想(Krypto Knight)
是 IBM 开发的一个基于邀请的认证系统。它与 Kerberos 相似，但是使用对等认证而非第
三方认证。KryptoKnight 被纳入 NetSP 产品。不过，SESAME、KryptoKnight 和 NetSP 从未
盛行，并再也不会被广泛使用。
这里讲的“基于邀请”是指“ticket-based”，就是基于“邀请函、请帖”，即“票”。
③OAuth (意为公开认证)和 OpenID 是应用于网络单点登录的较新的例子。
OAuth 协议是一个开放标准，它与 HTTP 协作，允许用户以单一账户登录。例如，谷歌支
持 OAuth 2.0。
Open ID 也是一个开放标准，但是它由电脑软件公司 the OpenID Foundation 保持，并不
是 IETF RFC 标准。OpenID 可与 OAuth 共同使用，也可单独使用。
区别与联系：
OAuth>OpenID；OpenID 是身份验证 Authentication；OAuth 是授权 Authorization。
—155—
前者是网站对用户进行认证，让网站知道“你是你所声称的 URL 的属主”；后者其实并不
包括认证，只不过“只有认证成功的人才能进行授权”，结果类似于“认证+授权”了。OAuth
相当于：A 网站给 B 网站一个令牌，然后告诉 B 网站说根据这个令牌你可以获取到某用户在 A
网站上允许你访问的所有信息。
3.集中式单点登录系统的缺点
①用户的凭证都是由一个密码保护，如果有人破解了，那么攻击者就能访问整个系统中所
有应用的权限。
②所有的用户凭证和身份验证信息都存储在一个数据库中，系统需要实施强大的监控和检
测，以确保任何问题都捕获并尽快处理。
B.2 单/多因素认证（例如： 因素、强度、错误、生物识别）
主体是活动的实体，它通过访问被动客体去获得客体的信息或数据。主体可以是用户、程
序、进程、文件、计算机或者去访问资源的任何东西。当通过授权，主体就可以修改客体。客
体客体是提供信息给话动主体的被动实体。客体可以是文件、数据库、计算机、程序、进程、
打印机和存储介质等。通常用“用户”一词代替主体，用“文件”一词代替客体。
1.认证因素 Authentication Factors
一般严格的身份验证多是多因素的，需要几个东西一起来证明身份。认证因素主要有 4 类：
①类型 1：Know 你知道什么？消息验证。例如：密码、个人标识码(PIN)或密码短语。
②类型 2：Have 有拥有什么？所有权验证。例如：智能卡、硬令牌、记忆卡和 USB 驱动器。
智能卡和记忆卡之间的主要差异是：智能卡有处理数据的能力，而记忆卡只用于存储信息。
③类型 3：Who 你是什么？特征验证。指某个身体部分或人的物理特征，例如：指纹、语
音、波纹、视网膜、虹膜、脸、掌纹和手型等；当然还包括你做什么？如：签名和击键力度。
其实还有第 4 因素：你在哪里？地址验证。例如终端 IP、电话号码或国家等物理位置信
息，只有和其它因素联合使用时才会有效。
当使用两个相同的因素，系统的强度并不会超过只单独使用其中一个因素的系统强度。
2.密码
密码其实很好理解，弱密码强密码什么的，这里补充些别的内容。
①密码短语 Password Phrases
比基本密码更有效的密码机制是密码短语，类似于密码字符的字符串，但对于用户具有独
特的意义。为了简化记忆，密码短语往往是修改过的自然语言语句。例如：“1 passed the CISSP
exam”会被转换为这样的密码短语“IP@$$edTheCISSPEx@m”。密码短语难以被破解，还很容
易记住。
②认知密码 Cognitive Passwords（考点）
认知密码是另一种密码机制，通常是一系列问题，一般用做帐户的密保问题，例如：你的
生日是哪一天?你喜欢的运动是什么?等等。就像是找回密码时用的密保问题，但密保问题并不
是一个密码概念，更不是题目中的正确答案。有的地方也会出现基于知识的认证方法
Knowledge-based authentication，也用这种密保问题。
3.智能卡和令牌 Smartcards and Tokens
—156—
智能卡和信息就是第二类认证因素：你拥有什么？
①智能卡
智能卡有多种形式，最新的智能卡包含一个微处理器和一个或多个证书。证书用于非对称
加密，比如加密数据或数字签名的电子邮件等。智能卡既可以进行身份识别，也可以进行身份
认证。但卡容易丢失，使用智能卡时大多会要求用户再设置另一个身份认证因素，如 PIN 码。
②令牌
一次性密码 OTP(One-Time Password)也称为动态密码，用于身份验证，只能使用一次。
令牌和密码短信都是，现在金融网站都用软令牌了（通过短信，灵活方便自控）。
令牌或硬件令牌是一种密码生成设备，用户可以随身携带，网上银行用的特别多，形式也
很多。类型有两种：同步动态密码令牌，和异步动态密码令牌。
同步动态密码令牌创建同步动态密码的硬件令牌是基于时间的（或基于计数器/事件型生
成器），并与身份认证服务器保持同步。他们定期生成一个新密码，如每隔 60 秒。这也就要
求令牌和服务器必须有精确的时间。
异步动态密码不用时间，依据算法和递增计数器生成密码。有些令牌则是由用户输入认证
服务器提供的 PIN 码后，会生成一次性密码。
最后讲讲软令牌：
软令牌存储在计算机上，需要通过身份验证的第二个因素来激活，如 PIN 密码或生物特征。
相较于硬件令牌，软令牌比较便宜，易于实现和管理，能避免一些物理安全风险。然而，软令
牌也很容易受到计算机病毒，中间人攻击，钓鱼，和其他软件的攻击。使用软令牌要遵循以下
准则：
①私钥必须是不可导出的。
②密钥必须是加密存储的。
③种子记录和初始密码短语的分发必须加密。安装软令牌软件通常有两条信息：种子记录
和密码，两者都需要安装和初始化令牌生成引擎。这两条信息，如果被未经授权的用户捕获，
可能导致未授权软件的安装和未经授权的使用。
④每次使用软令牌的用户必须进行身份验证，令牌必须被激活。
⑤令牌时限必须少于 2 分钟。
⑥软令牌软件的密码应符合密码管理原则
⑦审计所有软件令牌的访问。
⑧使用软件令牌之前，必先安装最新的防病毒软件。
⑨始终使用 FIPS 140-2 验证的加密模块。其加密模块必须被验证，以满足 FIPS 140-2 第
1 级标准。
③ISO/IEC14443，智能卡标准
14443-1——物理特性
14443-2——射频功能及信号接口