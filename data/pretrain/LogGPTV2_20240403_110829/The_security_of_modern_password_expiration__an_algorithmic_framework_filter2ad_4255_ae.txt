### Evaluation of Accounts with a History of Transform Use (§4.2)

**Figure 10: Evaluation of Accounts with a History of Transform Use**

- **Tpast = T 1 past, d = 3**
- **Averages of 10 trials**

| Transform | Probability |
|-----------|-------------|
| .75       |             |
| .55       |             |
| .63       |             |
| .52       |             |
| .55       |             |
| .55       |             |
| .68       |             |
| .55       |             |
| .54       |             |
| .54       |             |
| .53       |             |
| .57       |             |
| .58       |             |
| .70       |             |
| .60       |             |
| .59       |             |
| .53       |             |
| .77       |             |
| .69       |             |
| .71       |             |
| .66       |             |

Transforms:
- T 1
- past
- T 1
- past
- Tcap
- Tdel
- Tdup
- Tsub
- Tins
- Tleet
- Tmov
- Tkey
- Tcap
- Tdel
- Tdup
- Tsub
- Tins
- Tleet
- Tmov
- Tkey

### Discussion

Password expiration policies are often implemented to revoke access from attackers who have learned or broken the passwords. However, this study suggests that such policies may be less effective than intended and can cause significant user frustration.

#### Challenges in Proactive Password Checking

When using a transform-based framework, explaining to users why their chosen password is unacceptable can be challenging. For instance, our most effective framework involves applying 534 transforms at a depth of three levels. This complexity makes it difficult to provide clear and concise explanations to users, further exacerbating their frustration with password expiration policies.

#### Findings and Recommendations

Our study indicates that at least 41% of passwords can be broken offline from previous passwords for the same accounts within seconds. Additionally, five online password guesses are sufficient to break 17% of accounts. As we consider other types of transform trees, these success rates are likely to increase significantly.

Given the annoyance caused by password expiration and the limited effectiveness of such policies, we recommend reevaluating the utility of forced password expiration. Instead, users could be required to select significantly stronger passwords, such as longer passphrases.

In the long term, our findings support the conclusion that simple password-based authentication should be abandoned. Human-chosen passwords are often too weak to withstand patient brute-force attacks. Alternative authentication methods, such as biometrics and device-based solutions, should be considered. While a detailed discussion of these alternatives is beyond the scope of this paper, we believe many of them are preferable to the current status quo and will become even more so as the imbalance between attacker resources and user memory grows.

### Conclusion

This study provides a large-scale measurement of the extent to which password expiration policies are effective. Our novel search framework and algorithm confirm that the effectiveness of expiration in meeting its intended goal is weak. We also evaluate the susceptibility of accounts to our search techniques, even when individual passwords are strong, and the extent to which specific types of transforms predict future user behavior. Our findings call into question the continued use of password expiration and provide evidence to support a move away from passwords altogether.

### Acknowledgements

We thank Alex Everett and Karsten Honeycut for facilitating access to the data used in this study; Anupam Gupta for helpful discussions on approximation algorithms; and the anonymous reviewers for their comments. This work was supported in part by NSF grants 0756998 and 0910483.

### References

[1] A. Adams and M. A. Sasse. Users are not the enemy. Comm. ACM, 42(12):40–46, December 1999.
[2] S. Alexander, Jr. In defense of password expiration. Post to LOPSA blog, April 2006. http://lopsa.org/node/295 as of March 28, 2010.
[3] S. M. Bellovin. Unconventional wisdom. IEEE Security & Privacy, 4(1), January–February 2006.
[4] M. Bishop. Proactive password checking. In Proc. 4th Workshop on Computer Security Incident Handling, 1992.
[5] S. L. Brand and J. Makey. Department of Defense password management guideline. CSC-STD-002-85, Department of Defense Computer Security Center, April 1985.
[6] W. E. Burr, D. F. Dodson, W. T. Polk, P. J. Bond, and A. L. Bement. NIST special publication 800-63, version 1.0.1, 2004.
[7] S. Chiasson, A. Forget, E. Stobert, P. C. van Oorschot, and R. Biddle. Multiple password interference in text passwords and click-based graphical passwords. In 16th ACM Conference on Computer and Communications Security, pages 500–511, November 2009.
[8] G. Cormode and S. Muthukrishnan. The string edit distance matching problem with moves. ACM Transactions on Algorithms, 3:1–19, February 2007.
[9] A. M. De Alvare. How crackers crack passwords or what passwords to avoid. In Second Security Workshop Program, pages 103–112. USENIX, August 1990.
[10] A. M. De Alvare and E. E. Schultz, Jr. A framework for password selection. In UNIX Security Workshop Proceedings, pages 8–9. USENIX, August 1988.
[11] U. Feige, L. Lovász, and P. Tetali. Approximating min sum set cover. Algorithmica, 40:219–234, 2004.
[12] D. Florêncio and C. Herley. A large-scale study of web password habits. In WWW 2007, May 2007.
[13] A. Forget, S. Chiasson, P. C. van Oorschot, and R. Biddle. Improving text passwords through persuasion. In SOUPS, 2008.
[14] D. V. Klein. Foiling the cracker: A survey of, and improvements to, password security. In Second Security Workshop Program, pages 5–14. USENIX, August 1990.
[15] C. Kuo, S. Romanosky, and L. F. Cranor. Human selection of mnemonic phrase-based passwords. In SOUPS, pages 67–78, July 2006.
[16] B. Lu and M. B. Twidale. Managing multiple passwords and multiple logins: MiFA minimal-feedback hints for remote authentication. In IFIP INTERACT 2003 Conference, pages 821–824, 2003.
[17] N. Massad and J. Beachboard. A taxonomy of service failures in electronic retailing. In 41st Hawaii International Conference on System Sciences, 2008.
[18] R. Morris and K. Thompson. Password security: A case history. Comm. ACM, 22:594–597, November 1979.
[19] A. Narayanan and V. Shmatikov. Fast dictionary attacks on passwords using time-space tradeoff. In 12th ACM Conference on Computer and Communications Security, pages 364–372, November 2005.
[20] P. Oechslin. Making a faster cryptanalytic time-memory trade-off. In Advances in Cryptology – CRYPTO 2003, pages 617–630, August 2003.
[21] B. Patterson. Letter to Comm. ACM. Comm. ACM, 43(4):11–12, April 2000.
[22] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. Mazurek, L. Bauer, N. Christin, and L. F. Cranor. Encountering stronger password requirements: User attitudes and behaviors. In 6th Symposium on Usable Privacy and Security, July 2010.
[23] E. H. Spafford. Opus: Preventing weak password choices. Computers & Security, 11:273–278, 1991.
[24] G. Spafford. Security myths and passwords. Post to CERIAS blog, April 2006. http://www.cerias.purdue.edu/site/blog/post/password-change-myths/ as of March 28, 2010.
[25] J. M. Stanton, K. R. Stam, P. Mastrangelo, and J. Jolton. Analysis of end user security behaviors. Computers & Security, 24(2):124–133, 2005.
[26] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek. Password cracking using probabilistic context-free grammars. In 2009 IEEE Symposium on Security and Privacy, pages 391–405, May 2009.
[27] J. Yan. A note on proactive password checking. In ACM New Security Paradigms Workshop, pages 127–135, 2001.
[28] J. Zhang, X. Luo, S. Akkaladevi, and J. Ziegelmayer. Improving multiple-password recall: an empirical study. European Journal of Information Systems, pages 1–12, 2009.

### Appendix

#### A. Transform Sets TLI and TLIP

In this appendix, we elaborate on two sets of primitive transforms used in our experiments: TLI and TLIP. TLIP consists of the top 50 transforms in TLI. These 50 transforms are listed in Figure 11 in Perl regular expression syntax. For each transform \( t \) in the column labeled \( P(t(\sigma_r) = \pi_r) \), the probability, under random choice \( r \) of account, that \( t(\sigma_r) = \pi_r \) is averaged over 1000 trials where \( \sigma_1..n \) and \( \pi_1..n \) are populated as in §4.1.

**Figure 11: Composition of TLIP, Perl Regular Expression Syntax**

| Transform \( t \) | \( P(t(\sigma_r) = \pi_r) \) |
|-------------------|-----------------------------|
| s/1/2/            | 0.0126                      |
| s/2/3/            | 0.0096                      |
| s/3/4/            | 0.0085                      |
| s/4/5/            | 0.0079                      |
| s/!/@/            | 0.0067                      |
| s/5/6/            | 0.0062                      |
| s/6/7/            | 0.0056                      |
| s/@/#/            | 0.0051                      |
| s/#/$/            | 0.0050                      |
| s/7/8/            | 0.0050                      |
| s/1/3/            | 0.0046                      |
| s/\$/%/            | 0.0045                      |
| s/8/9/            | 0.0045                      |
| s/2/4/            | 0.0044                      |
| s/!/!!/           | 0.0044                      |
| s/3/5/            | 0.0038                      |
| s/!/#/            | 0.0034                      |
| s/4/6/            | 0.0030                      |
| s/@/$/            | 0.0028                      |
| s/(\W+)(.+)/$2$1/  | 0.0027                      |
| s/!/$/            | 0.0026                      |
| s/2/5/            | 0.0025                      |
| s/6/8/            | 0.0025                      |
| s/5/7/            | 00.0025                     |
| s/0/1/            | 0.0025                      |
| s/#/%/            | 0.0025                      |
| s/%/!/            | 0.0025                      |
| s/1/4/            | 0.0025                      |
| s/7/9/            | 0.0025                      |
| s/\*/!/           | 0.0025                      |
| s/([a-zA-Z]+)(.+)/$2$1/ | 0.0023                      |
| s/&/*/            | 0.0023                      |
| s/5/1/            | 0.0021                      |
| s/%/&/            | 0.0020                      |
| s/9/1/            | 0.0019                      |
| s/\$/!/           | 0.0019                      |
| s/!/*/            | 0.0019                      |
| s/(\D+)(\d+)/$2$1/ | 0.0019                      |
| s/%/*/            | 0.0018                      |
| s/#/!/            | 0.0018                      |
| s/(\d)(\W)/$2$1/   | 0.0017                      |
| s/4/1/            | 0.0017                      |
| s/3/1/            | 0.0016                      |
| s/@/!/            | 0.0016                      |
| s/2/1/            | 0.0016                      |
| s/1/5/            | 0.0016                      |
| s/\*/@/           | 0.0015                      |
| s/5/8/            | 0.0015                      |
| s/@/%/            | 0.0015                      |
| s/3/6/            | 0.0015                      |
| s/(\d+)(\D+)/$2$1/ | 0.0014                      |
| s/(\w+)(\d+)/$2$1/ | 0.0014                      |
| s/(\D+)(\w+)/$2$1/ | 0.0014                      |
| s/(\W+)(\d+)/$2$1/ | 0.0014                      |

The complete set of transforms in TLI is shown in Figure 12. TLI is composed of transforms from eight non-overlapping sets: Tcap, Tdel, Tdup, Tsub, Tins, Tleet, Tmov, and Tkey. These sets capture various behaviors, such as capitalization, deletion, duplication, substitution, insertion, leet transformations, substring moves, and key substitutions. Many of these transform sets are not exhaustive, making our results conservative.