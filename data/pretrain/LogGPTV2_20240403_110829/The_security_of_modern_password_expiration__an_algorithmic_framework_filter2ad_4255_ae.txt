.75
.55
.63
.52
.55
.55
.68
.55
.54
.54
.53
.57
.58
.70
.60
.59
.53
.77
.69
.71
.66
T 1
past
T 1
past
Tcap
Tdel
Tdup
Tsub
Tins
Tleet
Tmov
Tkey
Tcap
Tdel
Tdup
Tsub
Tins
Tleet
Tmov
Tkey
(b) P (πr ∈ T (σr)), T = TLI
Figure 10: Evaluation of accounts with history of transform use
(§4.2), Tpast = T 1
past, d = 3. Averages of 10 trials.
past ∪ T 2
to explain to a user the new passwords she must avoid (or why
her chosen password is unacceptable), thereby compounding the
already considerable frustration that users already experience due
to password expiration (e.g., [1, 17]). For example, the most effec-
tive instance of our transform-based framework that we report here
involves applying 534 transforms at a depth of three levels; were
this used as a proactive password checker, explaining the unaccept-
able passwords to users would be a challenge, to say the least.
We believe our study casts doubt on the utility of forced pass-
word expiration. Even our relatively modest study suggests that at
least 41% of passwords can be broken ofﬂine from previous pass-
words for the same accounts in a matter of seconds, and ﬁve online
password guesses in expectation sufﬁces to break 17% of accounts.
As we expand our consideration to other types of transform trees,
we would not be surprised to see these success rates jump signiﬁ-
cantly. Combined with the annoyance that expiration causes users,
our evidence suggests it may be appropriate to do away with pass-
word expiration altogether, perhaps as a concession while requiring
users to invest the effort to select a signiﬁcantly stronger password
than they would otherwise (e.g., a much longer passphrase).
In the longer term, we believe our study supports the conclu-
sion that simple password-based authentication should be aban-
doned outright. There is already considerable evidence that human-
chosen passwords are typically too weak to survive a patient brute-
force attacker; see the related works discussed in §2, not to men-
tion our own password cracking activity described in §4 to support
our study. The alternatives are well-known: biometrics, device-
based solutions, etc. While debating these alternatives is outside
the scope of the present paper, we believe that many should be
preferable to the status quo, and will only become more so as the
imbalance between attacker resources and user memory grows.
6. CONCLUSION
have learned (or broken) the passwords. In this paper we present
the ﬁrst large-scale measurement (we are aware of) of the extent to
which this potential is realized in practice. Our study is grounded
in a novel search framework and an algorithm for devising a search
strategy that is approximately optimal. Using this framework, we
conﬁrm previous conjectures that the effectiveness of expiration in
meeting its intended goal is weak. Our study goes beyond this,
however, in evaluating susceptibility of accounts to our search tech-
niques even when passwords in those accounts are individually
strong, and the extent to which use of particular types of transforms
predicts the transforms the same user might employ in the future.
We believe our study calls into question the continued use of expi-
ration and, in the longer term, provides one more piece of evidence
to facilitate a move away from passwords altogether.
Acknowledgements.
We thank Alex Everett and Karsten Honeycut for facilitating ac-
cess to the data used in this study; Anupam Gupta for helpful dis-
cussions on approximation algorithms; and the anonymous review-
ers for their comments. This work was supported in part by NSF
grants 0756998 and 0910483.
7. REFERENCES
[1] A. Adams and M. A. Sasse. Users are not the enemy. Comm.
ACM, 42(12):40–46, December 1999.
[2] S. Alexander, Jr. In defense of password expiration. Post to
LOPSA blog, April 2006.
http://lopsa.org/node/295 as of March 28, 2010.
[3] S. M. Bellovin. Unconventional wisdom. IEEE Security &
Privacy, 4(1), January–February 2006.
[4] M. Bishop. Proactive password checking. In In Proc. 4th
Workshop on Computer Security Incident Handling, 1992.
[5] S. L. Brand and J. Makey. Department of Defense password
management guideline. CSC-STD-002-85, Department of
Defense Computer Security Center, April 1985.
[6] W. E. Burr, D. F. Dodson, W. T. Polk, P. J. Bond, and A. L.
Bement. NIST special publication 800-63, version 1.0.1,
2004.
[7] S. Chiasson, A. Forget, E. Stobert, P. C. van Oorschot, and
R. Biddle. Multiple password interference in text passwords
and click-based graphical passwords. In 16th ACM
Conference on Computer and Communications Security,
pages 500–511, November 2009.
[8] G. Cormode and S. Muthukrishnan. The string edit distance
matching problem with moves. ACM Transactions on
Algorithms, 3:1–19, February 2007.
[9] A. M. De Alvare. How crackers crack passwords or what
passwords to avoid. In Second Security Workshop Program,
pages 103–112. USENIX, August 1990.
[10] A. M. De Alvare and E. E. Schultz, Jr. A framework for
password selection. In UNIX Security Workshop
Proceedings, pages 8–9. USENIX, August 1988.
[11] U. Feige, L. Lovász, and P. Tetali. Approximating min sum
set cover. Algorithmica, 40:219–234, 2004.
[12] D. Florêncio and C. Herley. A large-scale study of web
password habits. In WWW 2007, May 2007.
[13] A. Forget, S. Chiasson, P. C. van Oorschot, and R. Biddle.
Improving text passwords through persuasion. In SOUPS,
2008.
[14] D. V. Klein. Foiling the cracker: A survey of, and
Password expiration is widely practiced, owing to the potential
it holds for revoking attackers’ access to accounts for which they
improvements to, password security. In Second Security
Workshop Program, pages 5–14. USENIX, August 1990.
184[15] C. Kuo, S. Romanosky, and L. F. Cranor. Human selection of
mnemonic phrase-based passwords. In SOUPS, pages 67–78,
July 2006.
[16] B. Lu and M. B. Twidale. Managing multiple passwords and
multiple logins: MiFA minimal-feedback hints for remote
authentication. In IFIP INTERACT 2003 Conference, pages
821–824, 2003.
[17] N. Massad and J. Beachboard. A taxonomy of service
failures in electronic retailing. In 41st Hawaii International
Conference on System Sciences, 2008.
[18] R. Morris and K. Thompson. Password security: A case
history. Comm. ACM, 22:594–597, November 1979.
[19] A. Narayanan and V. Shmatikov. Fast dictionary attacks on
passwords using time-space tradeoff. In 12th ACM
Conference on Computer and Communications Security,
pages 364–372, November 2005.
[20] P. Oechslin. Making a faster cryptanalytic time-memory
trade-off. In Advances in Cryptology – CRYPTO 2003, pages
617–630, August 2003.
[21] B. Patterson. Letter to Comm. ACM. Comm. ACM,
43(4):11–12, April 2000.
[22] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L.
Mazurek, L. Bauer, N. Christin, and L. F. Cranor.
Encountering stronger password requirements: User attitudes
and behaviors. In 6th Symposium on Usable Privacy and
Security, July 2010.
[23] E. H. Spafford. Opus: Preventing weak password choices.
Computers & Security, 11:273–278, 1991.
[24] G. Spafford. Security myths and passwords. Post to CERIAS
blog, April 2006. http://www.cerias.purdue.edu/
site/blog/post/password-change-myths/ as of
March 28, 2010.
[25] J. M. Stanton, K. R. Stam, P. Mastrangelo, and J. Jolton.
Analysis of end user security behaviors. Computers &
Security, 24(2):124–133, 2005.
[26] M. Weir, S. Aggarwal, B. de Medeiros, and B. Glodek.
Password cracking using probabilistic context-free
grammars. In 2009 IEEE Symposium on Security and
Privacy, pages 391–405, May 2009.
[27] J. Yan. A note on proactive password checking. In ACM New
Security Paradigms Workshop, pages 127–135, 2001.
[28] J. Zhang, X. Luo, S. Akkaladevi, and J. Ziegelmayer.
Improving multiple-password recall: an empirical study.
European Journal of Information Systems, pages 1–12, 2009.
APPENDIX
A. TRANSFORM SETS TLI AND TLIP
In this appendix, we elaborate on two of the sets of primitive
transforms used in our experiments, namely TLI and TLIP. TLIP is
comprised of the top 50 transforms in TLI. These 50 transforms are
listed in Figure 11 in Perl regular expression syntax; e.g., s/1/2/
replaces the ﬁrst occurrence of “1” with “2”. Also listed for each
transform t in the column labeled P (t(σr) = πr) is the probabil-
ity, under random choice r of account, that t (σr) = πr, averaged
over 1000 trials in which σ1..n and π1..n are populated as in §4.1.
This is the criterion by which these transforms were selected for
inclusion in TLIP, and so all other transforms in TLI succeeded on
fewer password pairs than these 50.
The complete set of transforms in TLI is shown in Figure 12.
TLI is composed of transforms from eight nonoverlapping sets, de-
noted Tcap, Tdel, Tdup, Tsub, Tins, Tleet, Tmov, and Tkey. The trans-
Transform t
P (t(σr ) = πr )
s/1/2/
s/2/3/
s/3/4/
s/4/5/
s/!/@/
s/5/6/
s/6/7/
s/@/#/
s/#/$/
s/7/8/
s/1/3/
s/\$/%/
s/8/9/
s/2/4/
s/!/!!/
s/3/5/
s/!/#/
s/4/6/
s/@/$/
s/(\W+)(.+)/$2$1/
s/!/$/
s/2/5/
s/6/8/
s/5/7/
s/0/1/
s/#/%/
s/%/!/
s/1/4/
s/7/9/
s/\*/!/
s/([a-zA-Z]+)(.+)/$2$1/
s/&/*/
s/5/1/
s/%/&/
s/9/1/
s/\$/!/
s/!/*/
s/(\D+)(\d+)/$2$1/
s/%/*/
s/#/!/
s/(\d)(\W)/$2$1/
s/4/1/
s/3/1/
s/@/!/
s/2/1/
s/1/5/
s/\*/@/
s/5/8/
s/@/%/
s/3/6/
0.0126
0.0096
0.0085
0.0079
0.0067
0.0062
0.0056
0.0051
0.0050
0.0050
0.0046
0.0045
0.0045
0.0044
0.0044
0.0038
0.0034
0.0030
0.0028
0.0027
0.0026
0.0025
0.0025
0.0025
0.0025
0.0025
0.0023
0.0023
0.0021
0.0020
0.0019
0.0019
0.0019
0.0019
0.0018
0.0018
0.0017
0.0017
0.0016
0.0016
0.0016
0.0016
0.0015
0.0015
0.0015
0.0015
0.0014
0.0014
0.0014
0.0014
Figure 11: Composition of TLIP, Perl regular expression syntax
form sets Tdel, Tsub and Tdup are motivated by the hypothesis that
users simply delete, substitute, or repeat one or more characters in
the non-alphabetic part of their old passwords when creating new
ones. These transform sets capture such behaviors, though the spe-
cial character substitutions, duplications or deletions they encom-
pass are those involving only the characters of which the password
is required to contain one or more (see §4). Tins includes inserting a
new number following an existing number, and of value either one
more or one less than that existing number. Capitalization (or re-
moving capitalization) of alphabetic characters is captured in Tcap.
Tkey contains substitutions that replace a character by the character
sharing the same keyboard key, and is restricted to only the nu-
meric keys. Tleet contains only the single-character leet transforms
shown at http://qntm.org/l33t at the time of this writing.
Finally, Tmov contains substring moves in which two adjacent sub-
strings of the password, one or both consisting of only one “type”
of character, are swapped. As these descriptions reveal, many of
these transform sets are not exhaustive, and so in this respect, the
pessimistic results of this paper are conservative.
185Tins
Tcap
Tdel
Tdup
Tkey
Tleet
Tsub
Tmov
s/3/34/
s/3/32/
s/c/C/
s/m/M/
s/w/W/
s/G/g/
s/Q/q/
s/4/45/
s/4/43/
s/d/D/
s/n/N/
s/x/X/
s/H/h/
s/R/r/
s/2/23/
s/2/21/
s/b/B/
s/l/L/
s/v/V/
s/F/f/
s/P/p/
s/Z/z/
s/2//
s/@//
s/\?//
s/2/22/
s/@/@@/
s/\?/??/
s/2/@/
s/@/2/
s/a/@/i
s/h/#/i
s/t/+/i
s/s/c/
s/\|/l/
s/0/2/
s/1/3/
s/2/4/
s/3/5/
s/4/6/
s/5/7/
s/6/8/
s/7/9/
s/9/0/
s/!/#/
s/!//*/
s/"/@/
s/"/?/
s/’/*/
s/1/12/
s/1/10/
s/a/A/
s/k/K/
s/u/U/
s/E/e/
s/O/o/
s/Y/y/
s/1//
s/!//
s/}//
s/1/11/
s/!/!!/
s/}/}}/
s/1/!/
s/!/1/
s/a/4/i
s/g/6/i
s/s/$/i
s/k/c/
s/!/i/
s/0/1/
s/1/2/
s/2/3/
s/3/4/
s/4/5/
s/5/6/
s/6/7/
s/7/8/
s/8/9/
s/!/@/
s/!/?/
s/@/*/
s/#/!/
s/#/?/
s/\$/*/
s/%/!/