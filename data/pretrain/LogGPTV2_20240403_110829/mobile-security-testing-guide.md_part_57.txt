Overview
In contrast to Android, where each app runs on its own user ID, iOS makes all third-party apps run under the non-
privileged mobile user. Each app has a unique home directory and is sandboxed, so that they cannot access
protected system resources or files stored by the system or by other apps. These restrictions are implemented via
sandbox policies (aka. profiles), which are enforced by the Trusted BSD (MAC) Mandatory Access Control Framework
via a kernel extension. iOS applies a generic sandbox profile to all third-party apps called container. Access to
protected resources or data (some also known as app capabilities) is possible, but it's strictly controlled via special
permissions known as entitlements.
Some permissions can be configured by the app's developers (e.g. Data Protection or Keychain Sharing) and will
directly take effect after the installation. However, for others, the user will be explicitly asked the first time the app
attempts to access a protected resource, for example:
Bluetooth peripherals
Calendar data
Camera
Contacts
Health sharing
Health updating
HomeKit
Location
Microphone
Motion
Music and the media library
Photos
Reminders
Siri
Speech recognition
the TV provider
Even though Apple urges to protect the privacy of the user and to be very clear on how to ask permissions, it can still
be the case that an app requests too many of them for non-obvious reasons.
Some permissions like camera, photos, calendar data, motion, contacts or speech recognition should be pretty
straightforward to verify as it should be obvious if the app requires them to fulfill its tasks. For example, a QR Code
scanning app requires the camera to function but might be requesting the photos permission as well which, if granted,
gives the app access to all user photos in the "Camera Roll" (the iOS default system-wide location for storing photos).
A malicious app could use this to leak the user pictures. For this reason, apps using the camera permission might
rather want to avoid requesting the photos permission and store the taken pictures inside the app sandbox to avoid
other apps (having the photos permission) to access them. Additional steps might be required if the pictures are
considered sensitive, e.g. corporate data, passwords or credit cards. See the chapter "Data Storage" for more
information.
Other permissions like Bluetooth or Location require deeper verification steps. They may be required for the app to
properly function but the data being handled by those tasks might not be properly protected. For more information and
some examples please refer to the "Source Code Inspection" in the "Static Analysis" section below and to the
417
iOS Platform APIs
"Dynamic Analysis" section.
When collecting or simply handling (e.g. caching) sensitive data, an app should provide proper mechanisms to give
the user control over it, e.g. to be able to revoke access or to delete it. However, sensitive data might not only be
stored or cached but also sent over the network. In both cases, it has to be ensured that the app properly follows the
appropriate best practices, which in this case involve implementing proper data protection and transport security.
More information on how to protect this kind of data can be found in the chapter "Network APIs".
As you can see, using app capabilities and permissions mostly involve handling personal data, therefore being a
matter of protecting the user's privacy. See the articles "Protecting the User's Privacy" and "Accessing Protected
Resources" in Apple Developer Documentation for more details.
Device Capabilities
Device capabilities are used by App Store and by iTunes to ensure that only compatible devices are listed and
therefore are allowed to download the app. They are specified in the Info.plist file of the app under the
UIRequiredDeviceCapabilities key.
UIRequiredDeviceCapabilities
armv7
Typically you'll find the armv7 capability, meaning that the app is compiled only for the armv7 instruction set, or
if it’s a 32/64-bit universal app.
For example, an app might be completely dependent on NFC to work (e.g. a "NFC Tag Reader" app). According to
the archived iOS Device Compatibility Reference, NFC is only available starting on the iPhone 7 (and iOS 11). A
developer might want to exclude all incompatible devices by setting the nfc device capability.
Regarding testing, you can consider UIRequiredDeviceCapabilities as a mere indication that the app is using some
specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or
access to protected resources. Additional configuration steps might be required for that, which are very specific to
each capability.
For example, if BLE is a core feature of the app, Apple's Core Bluetooth Programming Guide explains the different
things to be considered:
The bluetooth-le device capability can be set in order to restrict non-BLE capable devices from downloading
their app.
App capabilities like bluetooth-peripheral or bluetooth-central (both UIBackgroundModes ) should be added if
BLE background processing is required.
However, this is not yet enough for the app to get access to the Bluetooth peripheral, the
NSBluetoothPeripheralUsageDescription key has to be included in the Info.plist file, meaning that the user has to
actively give permission. See "Purpose Strings in the Info.plist File" below for more information.
Entitlements
According to Apple's iOS Security Guide:
Entitlements are key value pairs that are signed in to an app and allow authentication beyond runtime factors,
like UNIX user ID. Since entitlements are digitally signed, they can’t be changed. Entitlements are used
extensively by system apps and daemons to perform specific privileged operations that would otherwise require
the process to run as root. This greatly reduces the potential for privilege escalation by a compromised system
app or daemon.
418
iOS Platform APIs
Many entitlements can be set using the "Summary" tab of the Xcode target editor. Other entitlements require editing a
target’s entitlements property list file or are inherited from the iOS provisioning profile used to run the app.
Entitlement Sources:
1. Entitlements embedded in a provisioning profile that is used to code sign the app, which are composed of:
Capabilities defined on the Xcode project's target Capabilities tab, and/or:
Enabled Services on the app's App ID which are configured on the Identifiers section of the Certificates, ID's
and Profiles website.
Other entitlements that are injected by the profile generation service.
2. Entitlements from a code signing entitlements file.
Entitlement Destinations:
1. The app's signature.
2. The app's embedded provisioning profile.
The Apple Developer Documentation also explains:
During code signing, the entitlements corresponding to the app’s enabled Capabilities/Services are transferred to
the app's signature from the provisioning profile Xcode chose to sign the app.
The provisioning profile is embedded into the app bundle during the build ( embedded.mobileprovision ).
Entitlements from the "Code Signing Entitlements" section in Xcode's "Build Settings" tab are transferred to the
app's signature.
For example, if a developer wants to set the "Default Data Protection" capability, he would go to the "Capabilities" tab
in Xcode and enable "Data Protection". This is directly written by Xcode to the .entitlements file as the
com.apple.developer.default-data-protection entitlement with default value NSFileProtectionComplete . In the IPA we
might find this in the embedded.mobileprovision as:
Entitlements
...
com.apple.developer.default-data-protection
NSFileProtectionComplete
For other capabilities such as HealthKit, the user has to be asked for permission, therefore it is not enough to add the
entitlements, special keys and strings have to be added to the Info.plist file of the app.
The following sections go more into detail about the mentioned files and how to perform static and dynamic analysis
using them.
Static Analysis
Since iOS 10, these are the main areas which you need to inspect for permissions:
Purpose Strings in the Info.plist File
Code Signing Entitlements File
Embedded Provisioning Profile File
Entitlements Embedded in the Compiled App Binary
Source Code Inspection
Purpose Strings in the Info.plist File
Purpose strings or usage description strings are custom texts that are offered to users in the system's permission
request alert when requesting permission to access protected data or resources.
419
iOS Platform APIs
If linking on or after iOS 10, developers are required to include purpose strings in their app's Info.plist file.
Otherwise, if the app attempts to access protected data or resources without having provided the corresponding
purpose string, the access will fail and the app might even crash.
If having the original source code, you can verify the permissions included in the Info.plist file:
Open the project with Xcode.
Find and open the Info.plist file in the default editor and search for the keys starting with "Privacy -" .
You may switch the view to display the raw values by right-clicking and selecting "Show Raw Keys/Values" (this way
for example "Privacy - Location When In Use Usage Description" will turn into NSLocationWhenInUseUsageDescription ).
If only having the IPA:
Unzip the IPA.
The Info.plist is located in Payload/.app/Info.plist .
Convert it if needed (e.g. plutil -convert xml1 Info.plist ) as explained in the chapter "iOS Basic Security
Testing", section "The Info.plist File".
Inspect all purpose strings Info.plist keys, usually ending with UsageDescription :
NSLocationWhenInUseUsageDescription
Your location is used to provide turn-by-turn directions to your destination.
For an overview of the different purpose strings Info.plist keys available see Table 1-2 at the Apple App Programming
Guide for iOS. Click on the provided links to see the full description of each key in the CocoaKeys reference.
Following these guidelines should make it relatively simple to evaluate each and every entry in the Info.plist file to
check if the permission makes sense.
For example, imagine the following lines were extracted from a Info.plist file used by a Solitaire game:
NSHealthClinicalHealthRecordsShareUsageDescription
Share your health data with us!
NSCameraUsageDescription
We want to access your camera
420
iOS Platform APIs
It should be suspicious that a regular solitaire game requests this kind of resource access as it probably does not
have any need for accessing the camera nor a user's health-records.
Apart from simply checking if the permissions make sense, further analysis steps might be derived from analyzing
purpose strings e.g. if they are related to storage sensitive data. For example, NSPhotoLibraryUsageDescription can be
considered as a storage permission giving access to files that are outside of the app's sandbox and might also be
accessible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this
case). For other purpose strings like NSLocationAlwaysUsageDescription , it must be also considered if the app is
storing this data securely. Refer to the "Testing Data Storage" chapter for more information and best practices on
securely storing sensitive data.
Code Signing Entitlements File
Certain capabilities require a code signing entitlements file ( .entitlements ). It is automatically generated by
Xcode but may be manually edited and/or extended by the developer as well.
Here is an example of entitlements file of the open source app Telegram including the App Groups entitlement
( application-groups ):
...
com.apple.security.application-groups
group.ph.telegra.Telegraph
...
The entitlement outlined above does not require any additional permissions from the user. However, it is always a
good practice to check all entitlements, as the app might overask the user in terms of permissions and thereby leak
information.
As documented at Apple Developer Documentation, the App Groups entitlement is required to share information
between different apps through IPC or a shared file container, which means that data can be shared on the device
directly between the apps. This entitlement is also required if an app extension requires to share information with its
containing app.
Depending on the data to-be-shared it might be more appropriate to share it using another method such as through a
back end where this data could be potentially verified, avoiding tampering by e.g. the user himself.
Embedded Provisioning Profile File
When you do not have the original source code, you should analyze the IPA and search inside for the embedded
provisioning profile that is usually located in the root app bundle folder ( Payload/.app/ ) under the name
embedded.mobileprovision .
This file is not a .plist , it is encoded using Cryptographic Message Syntax. On macOS you can inspect an
embedded provisioning profile's entitlements using the following command:
$ security cms -D -i embedded.mobileprovision
and then search for the Entitlements key region ( Entitlements ).
Entitlements Embedded in the Compiled App Binary
421
iOS Platform APIs
If you only have the app's IPA or simply the installed app on a jailbroken device, you normally won't be able to find
.entitlements files. This could be also the case for the embedded.mobileprovision file. Still, you should be able to
extract the entitlements property lists from the app binary yourself (which you've previously obtained as explained in
the "iOS Basic Security Testing" chapter, section "Acquiring the App Binary").
The following steps should work even when targeting an encrypted binary. If for some reason they don't, you'll have to
decrypt and extract the app with e.g. Clutch (if compatible with your iOS version), frida-ios-dump or similar.
Extracting the Entitlements Plist from the App Binary
If you have the app binary in your computer, one approach is to use binwalk to extract ( -e ) all XML files ( -y=xml ):
$ binwalk -e -y=xml ./Telegram\ X
DECIMAL HEXADECIMAL DESCRIPTION
--------------------------------------------------------------------------------
1430180 0x15D2A4 XML document, version: "1.0"
1458814 0x16427E XML document, version: "1.0"
Or you can use radare2 ( -qc to quietly run one command and exit) to search all strings on the app binary ( izz )
containing "PropertyList" ( ~PropertyList ):
$ r2 -qc 'izz~PropertyList' ./Telegram\ X
0x0015d2a4 ascii \n\n
...com.apple.security.application-groups\n\t\t
\n\t\t\tgroup.ph.telegra.Telegraph...
0x0016427d ascii H\n\n\n
\n\tcdhashes...
In both cases (binwalk or radare2) we were able to extract the same two plist files. If we inspect the first one
(0x0015d2a4) we see that we were able to completely recover the original entitlements file from Telegram.
Note: the strings command will not help here as it will not be able to find this information. Better use grep with
the -a flag directly on the binary or use radare2 ( izz )/rabin2 ( -zz ).
If you access the app binary on the jailbroken device (e.g via SSH), you can use grep with the -a, --text flag (treats
all files as ASCII text):
$ grep -a -A 5 'PropertyList' /var/containers/Bundle/Application/
15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/Telegram X.app/Telegram\ X
com.apple.security.application-groups
...
Play with the -A num, --after-context=num flag to display more or less lines. You may use tools like the ones we
presented above as well, if you have them also installed on your jailbroken iOS device.
This method should work even if the app binary is still encrypted (it was tested against several App Store apps).
Source Code Inspection
422
iOS Platform APIs
After having checked the .entitlements file and the Info.plist file, it is time to verify how the requested
permissions and assigned capabilities are put to use. For this, a source code review should be enough. However, if
you don't have the original source code, verifying the use of permissions might be specially challenging as you might
need to reverse engineer the app, refer to the "Dynamic Analysis" for more details on how to proceed.
When doing a source code review, pay attention to:
whether the purpose strings in the Info.plist file match the programmatic implementations.
whether the registered capabilities are used in such a way that no confidential information is leaking.
Users can grant or revoke authorization at any time via "Settings", therefore apps normally check the authorization
status of a feature before accessing it. This can be done by using dedicated APIs available for many system
frameworks that provide access to protected resources.
You can use the Apple Developer Documentation as a starting point. For example:
Bluetooth: the state property of the CBCentralManager class is used to check system-authorization status for
using Bluetooth peripherals.
Location: search for methods of CLLocationManager , e.g. locationServicesEnabled .
func checkForLocationServices() {
if CLLocationManager.locationServicesEnabled() {
// Location services are available, so query the user’s location.
} else {
// Update your app’s UI to show that the location is unavailable.
}
}
See Table1 in "Determining the Availability of Location Services" (Apple Developer Documentation) for a
complete list.
Go through the application searching for usages of these APIs and check what happens to sensitive data that might
be obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data
protection and transport security should be additionally verified.
Dynamic Analysis
With help of the static analysis you should already have a list of the included permissions and app capabilities in use.
However, as mentioned in "Source Code Inspection", spotting the sensitive data and APIs related to those
permissions and app capabilities might be a challenging task when you don't have the original source code. Dynamic
analysis can help here getting inputs to iterate onto the static analysis.
Following an approach like the one presented below should help you spotting the mentioned sensitive data and APIs:
1. Consider the list of permissions / capabilities identified in the static analysis (e.g.
NSLocationWhenInUseUsageDescription ).
2. Map them to the dedicated APIs available for the corresponding system frameworks (e.g. Core Location ). You
may use the Apple Developer Documentation for this.
3. Trace classes or specific methods of those APIs (e.g. CLLocationManager ), for example, using frida-trace .
4. Identify which methods are being really used by the app while accessing the related feature (e.g. "Share your
location").