### 4.2 Model of Corda in the iUC Framework

Our model \( P_c \) of Corda within the iUC framework closely aligns with the previously described architecture. Formally, \( P_c \) is a protocol consisting of a client, an internal notary, and three ideal functionalities: \( F_{\text{unicast}} \), \( F_{\text{cert}} \), and \( F_{\text{ro}} \). These functionalities represent secure authenticated channels, certificate-based signatures using a EUF-CMA signature scheme, and idealized hash functions, respectively (see Figure 4). In a single run, multiple instances of these machines can exist, representing different participants in the protocol. We consider a static but unbounded number of participants, including both clients and notaries. The following sections detail the technical aspects of our model.

#### Agreement and Transaction Submission
Participants are free to agree or decline incoming transactions based on their higher-level protocols' requirements. We model this agreement by having the higher-level protocol submit the transaction (but not its dependencies) to the signee first. When a new transaction is received from an initiator, the signee checks if it has previously received the same transaction from the higher-level protocol and responds accordingly. This approach is realistic because, in practice, users of the initiator and signee clients would typically need to agree on a transaction out-of-band before inputting it into the protocol. Transactions indicate which party is responsible for initiation, ensuring that both the initiator and signee roles are clearly defined.

#### Pushing Transactions
In addition to explicit agreement, we also model the process of pushing a transaction to another client. Technically, this is achieved via a special submit request that instructs a client to push one of its known transactions to a client with a specific PID. Explicitly modeling these processes, rather than assuming they occur out-of-band, allows for more realistic privacy results.

#### Notary Modeling
A notary in Corda can be a distributed service across multiple machines. For simplicity, we model a notary as a single machine. However, the iUC framework's composition theorem allows us to replace this single machine with a distributed system that provides the same guarantees, extending our results to distributed notaries.

#### Network Communication
All network communication between Corda participants is modeled using the ideal functionality \( F_{\text{unicast}} \), which represents authenticated and secure unicast channels. This functionality also provides a notion of time and ensures eventual message delivery, meaning time does not advance if there are undelivered messages that have been sent at least \( \delta \) time units ago.

#### Dynamic Corruption
We allow dynamic corruption of clients and notaries. The adversary gains full control over corrupted entities and can send/receive messages on their behalf. While the ideal subroutines are not directly corruptible, the adversary can corrupt the client or notary using the subroutine, allowing them to, for example, sign messages in the name of the corrupted entity.

Additionally, clients consider themselves implicitly corrupted if they know a transaction that relies on a corrupted notary. This reflects Corda's requirement that notaries must be honest to provide security guarantees. If a client relies on a corrupted notary, it cannot obtain the intended security guarantees, such as double-spending protection. Our model assumes that only the notaries a specific client relies on must be honest, providing security guarantees even in the presence of some corrupted notaries.

### 4.3 Corda Realizes \( F_{c\text{ledger}} \)

In this section, we present our security analysis of Corda. We will show that Corda satisfies the following security properties:

- **Partial Consistency**: All honest parties read subsets of the same global transaction graph, agreeing on the contents and dependencies of each transaction.
- **Double Spending Protection**: The global graph, as read by honest parties, does not contain double spending.
- **Liveness**: If a transaction involves only honest clients, it will be included in the global graph within a bounded time frame once approved by all clients. After another bounded time frame, all participating clients will consider this transaction part of their local state.
- **Privacy**: A dishonest party (or an outside attacker) does not learn the body of a transaction unless they are involved in it (e.g., as an initiator, signee, or notary) or if an honest client pushes the transaction to them.

We define \( F_{c\text{ledger}} \), an instantiation of \( F_{\text{ledger}} \), to formalize and enforce these properties. This is the first formalization of the novel notion of partial consistency. As part of defining \( F_{c\text{ledger}} \), we identify the precise privacy level provided by Corda, including several (partly unexpected) privacy leakages. We then show that Corda realizes \( F_{c\text{ledger}} \) and discuss why this result implies that Corda enjoys the above-mentioned properties.

**Subroutines of \( F_{c\text{ledger}} \)**:
- **\( F_{c\text{init}} \)**: Parameterized by a set of participants, it provides this set to \( F_{\text{ledger}} \).
- **\( F_{c\text{submit}} \)**: Handles transaction and attachment submission and pushing transactions between parties. It ensures that incoming transactions and attachments are valid according to a validation algorithm. For valid transactions, it generates an object ID and leaks meta-information to the adversary. If a corrupted party is involved, it also leaks the transaction body.
- **\( F_{c\text{update}} \)**: Handles updates to the state proposed by the adversary. It ensures that all participants agreed to a transaction, all dependencies are included in the global graph, and there is no double spending.
- **\( F_{c\text{read}} \)**: Enforces local read operations. For honest parties, it returns a self-consistent and complete subgraph of the global graph. For corrupted parties, it returns an empty response.
- **\( F_{c\text{updRnd}} \)**: Checks whether a transaction in the buffer can be advanced in time based on the last acknowledgment and network delay.
- **\( F_{c\text{storage}} \)**: Provides an interface for querying potential knowledge, generating unique IDs, storing and distributing them, and accessing transactions/attachments by ID.
- **\( F_{c\text{leak}} \)**: Computes and forwards the potential knowledge of a corrupted client to the adversary.
- **\( F_{c\text{update}} \)**: Allows the adversary to query for new transaction and attachment IDs.
- **\( F_{c\text{read}} \)**: Allows the adversary to query the validity of transactions regarding a party's current state.

**Main Theorem**:
\[ \text{Theorem 4.1.} \quad P_c \leq F_{c\text{ledger}} \]

**Proof Sketch**:
We show that \( F_{c\text{ledger}} \) leaks just enough details for a simulator to internally simulate a blinded version of the Corda protocol. All leakages defined by \( F_{c\text{ledger}} \) are necessary for a successful simulation, capturing the actual privacy level of Corda. The simulator \( S \) uses dummy transactions generated from the submission leakage, ensuring that all steps in \( P_c \) can be derived without access to the full data. \( S \) can keep states of honest parties in \( P_c \) and \( F_{c\text{ledger}} \) synchronous, ensuring that read requests lead to the same output in both the real and ideal worlds. The interaction with the network is handled indistinguishably between \( P_c \) and \( F_{c\text{ledger}} \).

**Implications**:
- **Partial Consistency**: By definition of \( F_{c\text{read}} \), responses to read requests of honest parties are subsets of the global graph, ensuring consistent partial views.
- **Double Spending Protection**: By definition of \( F_{c\text{update}} \), the global graph, as read by honest parties, does not contain double spending.

This concludes our security analysis of Corda, demonstrating that it realizes the desired security properties.