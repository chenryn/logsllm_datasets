participants enjoy security guarantees as long as they do not rely
on a dishonest notary (even if other notaries are dishonest).
4.2 Model of Corda in the iUC Framework
Our model Pc of Corda in the iUC framework closely follows
the above description. Formally, Pc is the protocol (client |
notary, Funicast, Fcert, Fro) consisting of a client machine that
is accessible to other (higher-level) protocols/the environment, an
internal notary machine, and three ideal subroutines Funicast, Fcert,
and Fro modeling secure authenticated channels, certificate based
signatures using a EUF-CMA signature scheme, and idealized hash
functions respectively (cf. Figure 4). In a run, there can be multiple
instance of machines, modeling different participants of the proto-
col. We consider a static but unbounded number of participants, i.e.,
clients and notaries. We discuss technical details of our modeling
in what follows.
Recall from above that signees are free to agree or decline an
incoming transaction, depending on whether their higher-level pro-
tocol wants to perform that transaction. We model agreement to a
transaction by letting the higher-level protocol submit the transac-
tion (but not its dependencies) to the signee first. Upon receiving a
new transaction from an initiator, the signee then checks whether
it has previously received the same transaction from the higher-
level protocol and accepts or declines accordingly. This modeling
is realistic: in practice, the users of the initiator and signee clients
would typically have to first agree on some transaction out of band,
and can then input this information into the protocol. Since this
modeling means that transactions are submitted to both clients in
the initiator and the signee roles, we assume w.l.o.g. that transac-
tions indicate which party is supposed to perform the initiation
process (e.g., by listing this party first in the list of participants).
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1052In addition to explicit agreement of signees, we also model the
process of pushing a transaction to another client. On a technical
level, this is modeled via a special submit request that instructs a
client to push one of its known transactions to some client with a
certain PID. Explicitly modeling agreement of signees and pushing
of transactions, instead of assuming that this is somehow done
out-of-band, allows for obtaining more realistic privacy results.
A notary in Corda may not just be a single machine but a ser-
vice distributed across multiple machines. In our modeling, for
simplicity of presentation, we model a notary as a single machine.
However, the composition theorem of the iUC framework then
allows for replacing this single machine with a distributed system
that provides the same guarantees, thereby extending our results
also to distributed notaries.
All network communication between parties of Corda is via an
ideal functionality Funicast, modeling authenticated secure unicast
channels between all participants. This functionality also offers
a notion of time and guarantees eventual message delivery, i.e.,
time may not advance if there is any message that still needs to be
delivered and has been sent at least 𝛿 time units ago.
We allow dynamic corruption of clients and notaries. The ad-
versary gains full control over corrupted clients and notaries and
can receive/send messages in their name from/to other parts of
the protocol/higher-level protocols. While the ideal subroutines
are not directly corruptible, the adversary can simply corrupt the
client/notary using the subroutine to, e.g., sign messages in the
name of that client/notary.
In addition to being explicitly corruptible by the adversary, clients
also consider themselves to be (implicitly) corrupted – they set a
corruption flag but otherwise follow the protocol honestly – if they
know a transaction that relies on (signatures of) a corrupted no-
tary.5 More specifically, we capture the fact that Corda needs to
assume honesty of notaries to be able to provide its security guar-
antees. Consequently, if a client relies on a corrupted notary, then
it cannot obtain the intended security guarantees such as double
spending protection anymore. Note that this modeling actually cap-
tures a somewhat weaker security assumption than Corda: Corda
officially requires all notaries to be honest in order to provide se-
curity guarantees. Our modeling only assumes that those notaries
that a specific client actually relies on are honest, i.e., our analysis
shows that security guarantees can be given to clients even in the
presence of corrupted notaries as long as these notaries are not
used by the clients.
4.3 Corda Realizes F cledger
In this section, we present our security analysis of Corda. On a high-
level, we will show the following security properties for Corda:
Partial consistency: All honest parties read subsets of the same
global transaction graph. Hence, for every transaction ID they
in particular also agree on the contents and dependencies of the
corresponding transaction.
Double spending protection: The global graph, which honest
parties read from, does not contain double spending.
5Here we use the more general corruption model we proposed in Section 2 to capture
the security assumption of honest notaries in Corda. Using this modeling, we do not
have to hardwire this assumption explicitly into Fledger.
Liveness: If a transaction involves honest clients only, then, once
it has been approved by all clients, it will end up in the global graph
within a bounded time frame. Further, after another bounded time
frame, all participating clients will consider this transaction to be
part of their own partial view of the local state, i. e., this transaction
will be part of the output of read requests from those participants.
Privacy: A dishonest party (or an outside attacker) does not
learn the body of a transaction 𝑡𝑥6 unless he is involved in 𝑡𝑥
(e.g., (i) because he is an initiator, signee, or the notary of 𝑡𝑥, or
(ii) because one of the honest clients who has access to 𝑡𝑥 pushes
𝑡𝑥 or a transaction that depends on 𝑡𝑥 to the dishonest party).
Formally, we first define F cledger, an instantiation of Fledger, which
formalizes and enforces the above security properties. This is the
first formalization of the novel notion of partial consistency. As
part of defining this instantiation, we also identify the precise pri-
vacy level provided by Corda, including several (partly unexpected)
privacy leakages. That is, we define F cledger to leak only the informa-
tion that an attacker on Corda can indeed obtain but not anything
else, as discussed at the end of this section. We then show that
Corda indeed realizes F cledger and discuss why this result implies
that Corda itself in fact enjoys the above mentioned properties.
Technically, we define the subroutines of Fledger to obtain the
instantiation F cledger = (Fledger | F csubmit, F cread, F cupdate, F cupdRnd,
F cinit, F cleak, F cstorage) as described next (cf. Figure 1, the additional
subroutine F cstorage is explained below). We provide formal specifi-
cations of the subroutines in F cledger in the technical report [22].
In what follows, we call the set of transaction and attachment IDs
a party pid may have access to in plain its potential knowledge. More
specifically, the potential knowledge of pid includes all transactions
from the buffer and global graph that involve only honest clients
and which either directly involve pid, or which have been pushed to
pid by another honest party that knows the transaction. In addition,
it also contains arbitrary transactions that involve at least one
corrupted client, with the exact set of transactions determined
by A. We use the term current knowledge to describe the set of
transactions that a party pid currently knows, where we allow A
to determine this set as a growing subset of the potential knowledge.
• F cinit is parameterized by a set of participants. It provides this
set to Fledger.
• F csubmit handles (i) transaction and attachment submission, and
(ii) pushing transactions from one party to another party. In
Case (i), F csubmit ensures that incoming transactions and attach-
ments are valid according to a validation algorithm, a parameter
of F csubmit. If pid is the initiator of the transaction, F csubmit also
checks that pid can execute the validation, i. e., whether all
dependent objects of the transaction are in pid’s current knowl-
edge. For valid transactions and attachments, F csubmit generates
an object ID and leaks all meta-information (e.g., involved par-
ties, IDs of dependent objects, ...) to A plus the length of the
transaction/attachment body. If a corrupted party is involved,
6We consider the “transaction body” to consist of the bit string contained in the
transaction (and which might contain, e.g., inputs for the smart contracts) as well as
the bit strings contained in output states (encoding, e.g., assets modeled by those states).
We consider everything else to be meta-information of the transaction, including its
ID, references to input states and smart contracts, and the set of participants.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1053then F csubmit also leaks the body. If a party pid𝑎 (tries to) push a
transaction identified by txID to a party pid𝑏 (Case (ii)), F csubmit
first ensures that all dependencies of tx are in the current knowl-
edge of pid𝑎 and, if so, then leaks to A that pid𝑎 shared txID
with pid𝑏. From then on, tx and all of its dependencies are
considered to be part of the potential knowledge of pid𝑏.
• F cupdate mainly handles updates to the state (proposed by A).
The adversary A can specify a set of IDs of transactions/attach-
ments that have previously been submitted by honest parties
and submit a set of transactions/attachments from dishonest
parties to extend the transaction graph. F cupdate ensures that
(i) all (honest) participants agreed to a transaction, (ii) all de-
pendencies are included in the global graph, (iii) dishonest
transactions are valid, and (iv) there is no double spending. If
any of the checks fails, the graph update is rejected.
• F cread always enforces local read operations. Upon receiving
such a read request for an honest party pid, the adversary is
expected to provide a subgraph 𝑔 of the global graph. This graph
𝑔 must also be a subset of pid’s current knowledge, must be
self-consistent, i. e., it must contain at least the previous outputs
to pid’s read requests, and it must be complete, i. e., the graph 𝑔
contains all dependencies of objects in 𝑔. Furthermore, if there is
a transaction tx in the global graph which has an honest initiator,
pid is a participant, and which has been submitted at least
2𝛿 time units ago, where 𝛿 is a parameter which specifies the
network delay, then tx must be included in 𝑔. The graph 𝑔 is then
returned as response to the read request. For read requests from
corrupted parties F cread returns an empty response. Intuitively,
this is because Fsubmit and Fleak already leak all information
known to corrupted parties.
• Whenever A requests to advance time, F cupdRnd checks whether
a transaction 𝑡𝑥 exists in the buffer where all participants are
honest, agreed on the transaction, and the last acknowledgment
respectively the initiation (if no signees are involved) was re-
ceived more than 𝜔(tx) time units ago.7 If such a transaction
exists, then the time increment request is denied. Otherwise, it
is accepted.
• As explained in Section 2, the subroutines of Fledger can them-
selves share other subroutines, e.g, to exchange shared state.
We use this feature by adding an additional subroutine F cstorage
which provides an interface for all other F cledger subroutines
(i) to query the potential knowledge of a party, (ii) to gen-
erate unique IDs, to store them, and to distribute them, and
(iii) to access transactions/attachments by ID. F cstorage simpli-
fies the specification as it allows to easily synchronize internal
state used for bookkeeping purposes across the subroutines of
Fledger.
• Upon corruption of a client, F cleak computes its potential knowl-
edge and forwards this information to A.
• To capture Pc’s random oracle, the adversary A is also allowed
to query F cupdate for (new) transaction and attachment IDs.
7𝜔(tx) is a function that linearly depends on the network delay 𝛿 and the size of the
subgraph defined by the transaction tx and all of its inputs (including their respective
inputs, etc.). Such a function is necessary due to the way parties in Corda retrieve
unknown dependencies for transactions.
• To capture that Corda might leak the validity of a transaction,
F cread allows the adversary to query the validity of transactions
regarding a parties pid current state.
Using this instantiation of Fledger, we can state our main theorem.
Theorem 4.1. Let Pc and F cledger be as described above. Then,
Pc ≤ F cledger.
Here we provide a proof sketch with the core intuition. We provide
the full proof in our technical report [22].
Sketch. We show that F cledger leaks just enough details for a simu-
lator to internally simulate a blinded version of the Corda protocol.
As mentioned and discussed at the end of this section, all leakages
defined by F cledger are indeed necessary for a successful simulation
since the same information is also leaked by Corda. Hence, F cledger
precisely captures the actual privacy level of Corda. As explained
above, all meta-information of transactions leak, only transaction
bodies stay private. The meta data information already allows to ex-
ecute all checks in the Corda protocol except for the validity check
of the transaction body. For honest participants, we can directly
derive the validity of the transaction body from the leakage during
transaction submission of the transaction’s initiator and use this
during the simulation.
Our simulator S internally simulates a blinded instance of Pc,
in the following called Pc. During the simulation, S uses dummy
transactions generated from the submission leakage. The dummy
transaction is identified by the original transaction ID, contains all
leaked data and pads the transaction body such that the dummy
version has the same length as the original transaction. As S can
extract the knowledge of honest parties, the transaction graph struc-
ture, and the validity of transactions, S can derive all steps in Pc
without having access to the full data. In particular, S knows for all
honest parties which transaction/attachment IDs are in the parties
knowledge. This allows it to perfectly simulate all network inter-
action of Pc as S knows when a party needs to trigger, e. g., the
SendTransactionFlow subprotocol instead of directly simulating
the approval to a transaction. Further, S can keep states of honest
parties in Pc and F cledger synchronous such that read requests lead
to the same output in real and ideal world. We observe that the out-
put from S to F cledger never fails. Pc ensures that knowledge does
not violate the boundaries of F cledger, e. g., Pc’s build-in network
Funicast ensures delivery boundaries.
Regarding S interaction with the network. As corrupted parties
send transactions and attachments in plain to S and S can evaluate
the validity of transactions (according to a parties knowledge), S
has access to all relevant information to answer request/handle
operations indistinguishably between Pc and F cledger. This is due
to the fact that S replaces the dummy transaction by the original
transaction as soon as they leak (and regenerate dependent data,
especially signatures, to make both worlds indistinguishable).
We highlight two edge cases: Firstly, an attacker may try to break
privacy of transactions by brute forcing the hashes. As S queries
F cledger for IDs, this attack would be successful in both real and ideal
world. Secondly, when corrupted parties push arbitrary transactions
to honest parties, S might not know whether the validity check
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1054properties of Corda.
succeeds (since this transaction might reference input states that
the corrupted party and hence S does not know). In this case (and
only in this case), S directly queries F cledger for the validity of the
transaction according to the honest party’s knowledge. We will
discuss both cases in more detail in the following discussion.
□
We now discuss the implications of Theorem 4.1 for the security
Partial consistency. By definition of F cread, the responses to
read requests of honest parties are subsets of the global graph.
This directly implies that honest clients (i. e., clients that are neither
controlled by the adversary nor rely on a malicious notary) of Corda
obtain consistent partial views of the same global state.
Double spending protection. By definition of F cupdate, the global