While the CFG recover and the latter steps are described
separately in this paper, there is a backward ﬂow of information
in our implementation. If the later Content Classiﬁcation step
identiﬁes a code reference (i.e., a hardcoded pointer in the
data segment of the binary that points to the code segment),
we inject it into angr as an additional target of a fake control
ﬂow transition, so that the recursive CFG recovery can explore
that code block 3.
VI. CONTENT CLASSIFICATION
To avoid the pitfalls discussed in Section III, we leverage
advanced static analysis techniques to classify potential sources
of references. We detail these techniques, and their application,
in this section, and describe how they are ultimately used for
symbolization in Section VII.
Our analyses add a reasonable runtime requirement to the
reassembling process. In addition, they yield a certain level
of functionality guarantee (discussed below), which makes
it possible for reassembler to opt-out when facing binaries
with bizarre features, rather than reassemble and break them.
That being said, in cases when reassembly speed is absolutely
critical, we have developed workarounds that avoid the runtime
of the static analysis in exchange for a lower functionality
guarantee of the resulting binary. Those are discussed in
Section VIII.
Our approach to content classiﬁcation uses two fundamen-
tal analyses:
Intra-function Data Dependence Analysis. We perform a
blanket execution [8] on basic blocks in a speciﬁc func-
tion, from which we recover data dependencies between
variable and constant deﬁnitions. Variable deﬁnitions in-
clude registers, stack variables, and memory cells. The
2PE ﬁles do not have segments, while ELF ﬁles normally have both sections
and segments, sections are not necessary for execution.
3Although linear sweeping will always ﬁnd the code block eventually,
ﬁnding the basic block as early as possible, and starting decoding the basic
block at a correct location is still beneﬁcial with respect to reducing the number
of overlapping or incorrectly-started blocks caused by inline data or function
alignments.
scope of this execution is strictly conﬁned to the current
function. We assume all calls to other functions return an
unconstrained value 4, as long as the callee returns.
Localized Value-set Analysis. Value-set analysis is ﬁrst pro-
posed as an abstract interpretation technique to statically
analyze machine code [2], [18]. Instead of running value-
set analysis on the entire binary, or a whole function,
we designed a constrained version of value-set analysis,
called localized value-set analysis, that only runs on a
slice of the binary, such as a set of basic blocks, a
loop, etc. With the result from data dependence analysis,
we are able to build a program slice with respect to a
memory access that acts on data representing potential
mis-classiﬁcations of content. Running localized value-set
analysis on the slice usually gives us enough information
regarding the classiﬁcation of the content used by the ﬁnal
memory access.
Unlike traditional static analyses, those two analyses used
in our approach are heavily constrained and localized in order
to make them fast and tractable. Empirically speaking, those
localized analyses are generally sufﬁcient for the use cases in
our approach: resolving jump tables, recovering primitive data
types, and retrieving the sizes of arrays accessed in simple
loops. We use these analyses to support the data type recovery
and the segregation of different blocks of data from each other.
Both are used to reduce symbolization mis-classiﬁcations in
the next step of the reassembly process.
A. Data Identiﬁcation and Type Recognition
By analyzing a recovered CFG, some data in the binary can
be identiﬁed and its type recognized, a procedure we call data
identiﬁcation and type recognition. Several approaches, includ-
ing data dependence analysis, program slicing, and value-set
analysis are integrated in our solution to recognize data types
with a high identiﬁcation rate. Data identiﬁcation and type
recognition, although not evaluated in this paper, is very useful
in generating correct disassembly when inline data exists in the
binary, as it avoids symbolization classiﬁcation errors in the
symbolization step.
Here we use jump table recovery as an example to demon-
strate how this approach works: a local backward program
slice is ﬁrst generated with respect to the jump target, followed
by the application of value-set analysis on the generated slice
to recover the entries of the jump table and addresses of all
possible jump targets. Once the entries of the jump table are
recovered, we mark the range as data with a data type of
“pointer array”.
For binary reassembling, it is important to correctly differ-
entiate symbolizable and non-symbolizable data, since sym-
bolizing a non-symbolizable data entry or vice versa will lead
to a broken resulting binary. Table I shows all types of data
that Ramblr recognizes at the moment. They fall into several
broad categories:
Primitives. This includes pointers, bytes, shorts,
integers,
ﬂoats, doubles, and so on. They are recognized by an-
4The notion of unconstrained values is not employed in blanket execution.
This can be seen as an abstract value that satisﬁes any comparisons.
5Depends on the bit-width of the binary.
7
Data type
Size
Symbolizable
pointer array
region boundary
DWORD
QWORD
32-bit ﬂoating point
64-bit ﬂoating point
80-bit ﬂoating point
128-bit ﬂoating point
null-terminated string
non-null-terminated string
null-terminated UTF-16 string
non-null-terminated UTF-16 string
multiple of 4/85
0
4
8
4
8
10
16
variable
variable
variable
variable
Yes
Yes
No
No
No
No
No
No
No
No
No
No
TABLE I: All data types Ramblr currently recognizes.
alyzing instruction and data access patterns during CFG
recovery and localized value-set analysis.
Strings. ASCII strings and Unicode strings. Identiﬁed by
propagating types from known string manipulating func-
tions (like strlen, strcpy, etc.) and scanning print-
able characters.
Jump tables. Jump tables, from indirect jump resolution.
Arrays of primitives. These are recognized by performing
an intra-function data dependence analysis and localized
value-set analysis.
B. Data Block Sanitization
All data blocks recognized from the previous step are
sanitized to avoid overlapping data. The requirement is simple:
any identiﬁed data block should not overlap with another
identiﬁed data block. Data block overlapping arises when
one data block is part of another data block or due to a
misidentiﬁcation occurring during data type recognition. The
ﬁrst case is common, and is easy to handle - Ramblr simply
merges the two data blocks. Handling the second case is
more difﬁcult, as it is not always clear which data blocks are
misidentiﬁed, or both of them are misidentiﬁed. We discuss
ways to handle misidentiﬁcation in Subsection VI-C.
C. Handling Misidentiﬁcation
Misidentiﬁcation of data blocks usually arises from the
following scenarios:
A data block being accessed in multiple ways. A
data
block might be accessed in a different manner
in
different places. Consider Listing 7 as an example:
the personal_info struct
is accessed as a whole
in function zero_fill(), and then each ﬁeld of
the struct
is accessed individually later. During data
identiﬁcation and type recovery, multiple data blocks
spanning personal_info are seen, and they have
conﬂicting types: the one accessed from zero_fill()
is a 12-byte “unknown” block, while the other one
accessed from initialize() contains two integers
and one pointer-array of length 1.
Failure in localized value-set analysis. Due to the fact that
our localized value-set analysis runs on a slice of the
program generated from a best-effort (and, thus, poten-
tially incomplete) data dependence analysis, the value-
set analysis might be processing incomplete code when
recovering data sizes and types. Generally, a data block
spanning from the beginning address to the maximum
address (e.g., upper bound of the section it belongs to) is
seen when such failures occur.
struct personal_info_t {
unsigned char* name;
unsigned int age;
} personal_info;
void zero_fill()
{
/* memset() is inlined by the compiler. */
memset(&personal_info, 0, sizeof(personal_info));
}
void initialize()
{
personal_info.name = "Beatrice";
personal_info.age = 25;
}
void rename(char* new_name)
{
/* from the assembly, we can only say
* personal_info.name is a four-byte integer. */
personal_info.name = new_name;
}
Listing 7: An example of a data block being accessed at
multiple locations in different ways.
The strategy we take to handle misidentiﬁcation is two-
fold. First, we prioritize smaller data blocks over larger ones.
This is because, like in our example, programs tend to initialize
data in bulk, then access individual ﬁelds in the proper, type-
dependent manner. In the example of Listing 7, since the 12-
byte block identiﬁed from zero_fill() is larger than other
three blocks identiﬁed from initialize(), the latter ones
are taken as identiﬁcation result. Second, we prioritize sym-
bolizable data types over non-symbolizable data types. This is
because if a piece of data is ever accessed as a symbol by the
program, then it should be treated in one during reassembly.
Since personal_info.name is identiﬁed as an integer
from rename() function and a pointer in initialize(),
we correctly prioritize the symbolizable data type.
In many cases, static analyses we perform are not sufﬁcient
to ﬁnd all data blocks used in binaries. Usually there are
gaps between identiﬁed data blocks, in which case, Ramblr
resorts to workarounds to ﬁnd pointers inside, as described
later in Section VIII. Note that the static analyses performed
here signiﬁcantly reduce the number of unsafe assumptions
that Ramblr has to make during symbolization, which in turn
reduces false positives.
VII. SYMBOLIZATION
During the original linking process of the target binary, all
labels in the object ﬁles are converted to absolute addresses.
During reassembly, the location of the data and code in a target
binary will likely change due to the modiﬁcations performed
on it. If there are hard-coded pointer addresses or absolute
jumps in the binary, they must be adjusted to target the new
locations of the data or code to which they used to point. In
fact, even relative jumps must be adjusted, as the insertion of
code into or removal of code from basic blocks will change
the offsets of basic blocks from one another.
The assembler can make these adjustments during the
reassembly step (see Section IX), but it needs to be provided
the information of what references reference which locations.
To do this, we convert
these references from hard-coded
8
s
e
i
r
a
n
i
B
n
i
s
r
e
g
e
t
n
I
f
o
n
o
i
t
r
o
P
0.8
0.6
0.4
0.2
0
-O0
-O1
-O2
-O3
-Os
0-28
28-216
216-224
224-232 Within binary
Fig. 2: Distribution of integers (instruction operands and data)
in the 32-bit Coreutils and CGC datasets. (The ﬁrst four
buckets exclude integers within the binary.)
numerical references (absolute addresses or relative offsets)
to symbols. This procedure, called Symbolization, converts
absolute addresses back to labels, allowing relocation of the
binary during the reassembly step.
However, not all immediate values should be converted
to symbols, i.e., symbolized. We call all immediate values
that must be symbolized in reassembling symbolizable imme-
diates, and all other immediates (i.e., actual constants) non-
symbolizable immediates. A successful binary reassembling
requires that all symbolizable immediates are converted to
correct symbols, and none of the non-symbolizable immediates
are converted.
Symbolizable immediates exist in both code and data. In
code, symbolizable immediates must be part of instructions,
used as pointers pointing to either code or data. In data,
symbolizable immediates are integers that are of machine’s
bit-width, which is also used as pointers pointing to either
code or data.
Figure 2 illustrates a distribution of integers in an x86
binary. It is worth noting that most integers fall in the range
between the beginning and the ending of memory regions of
the binary, because those integers are used as code or data
references. If all immediate values falling in the range or
memory regions are symbolizable, and all immediate values
falling outside are non-symbolizable, then symbolization is
simply mapping those values within the range into symbol
references. This is a common case, but it is not the general
case. In Section III, we described several challenges that cause
mis-classiﬁed symbols and result in broken reassembled bina-
ries. In this section, we detail how Ramblr surmounts these
challenges to properly handle binaries that current techniques
fail to reasssemble.
the ideal case is that all integers (including immediate operands
or integers in data) in the binary can be categorized into
two groups solely based on their values, which is described
as classiﬁcation in symbolization in Uroboros [25]. Their
approach, in short, symbolizes integers to point to offsets in
each memory region of the binary as long as the value of the
integer falls into that region. If the integer does not fall into
any memory region, it is marked as an integer, and will not
be symbolized.
The original approach seems plausible. However, it does
not always hold in real-world binaries, especially in bina-
ries compiled with optimization enabled, due to constant
propagation and constant folding performed during compiler
optimization (as described in Section III. Consider the sample
C code shown in Listing 8, and its assembly shown in Listing 9
compiled by gcc with ﬂag -O1. For the ease of understanding,
some unnecessary assembly lines are omitted, and the C code
is put on top of each corresponding line of assembly.
int counters[2] = {0};
int main()
{
int input;
input = getchar();
switch(input - 'A')
{
case 0:
puts("option A");
break;
case 1:
puts("option B");
break;
default:
puts("Unknown option.");
_exit(1);
}
counters[input - 'A'] ++;
}
Listing 8: An example of a base pointer pointing to outside of
any memory region.
call
mov
__IO_getc
ebx, eax
.text
; input = getchar();
80484ff
8048504
; switch(input - 'A')
8048506
8048509
...
; counters[input - 'A'] ++;
8048557
cmp
jz
eax, 0x42
short 0x8048523
add
DWORD PTR 0x8049f30[ebx*4], 1
.bss
; int counters[2] = {0};
804a034
804a038
counters[0]
counters[1]
A. Base Pointer Reattribution