    A route block defines a node in a routing tree and its children. Its optional
    configuration parameters are inherited from its parent node if not set.
    Every alert enters the routing tree at the configured top-level route, which
    must match all alerts (i.e. not have any configured matchers). It then traverses
    the child nodes. If continue is set to false, it stops after the first matching
    child. If continue is true on a matching node, the alert will continue matching
    against subsequent siblings. If an alert does not match any children of a node
    (no matching child nodes, or none exist), the alert is handled based on the
    configuration parameters of the current node.
    A basic configuration would be:
    ```yaml
    route:
      group_by: [job, alertname, severity]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'email'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
    ```
* New: Add Wazuh SIEM.
    [Wazuh](https://wazuh.com/)
### [Blackbox Exporter](blackbox_exporter.md)
* New: [Check TCP with TLS.](blackbox_exporter.md#check-tcp-with-tls)
    If you want to test for example if an LDAP is serving the correct certificate on the port 636 you can use:
    ```yaml
    tcp_ssl_connect:
      prober: tcp
      timeout: 10s
      tls: true
    ```
    ```yaml
    - name: Ldap
      url: my-ldap-server:636
      module: tcp_ssl_connect
    ```
### [Node Exporter](node_exporter.md)
* Correction: Improve how to install it.
## Authentication
### [Authentik](authentik.md)
* New: Introduce Authentik.
    [Authentik](https://goauthentik.io/) is an open-source Identity Provider focused on flexibility and versatility.
    What I like:
    * Is maintained and popular
    * It has a clean interface
    * They have their own [terraform provider](https://registry.terraform.io/providers/goauthentik/authentik/latest/docs/resources/application) Oo!
    What I don't like:
    * It's heavy focused on GUI interaction, but you can export the configuration to YAML files to be applied without the GUI interaction.
    * The documentation is oriented to developers and not users. It's a little difficult to get a grasp on how to do things in the platform without following blog posts.
    In the article you can also find:
    * [How to install it](authentik.md#installation)
    * [How to configure and use the terraform provider](authentik.md#terraform)
    * [How to configure some applications, such as gitea](authentik.md#gitea)
    * [How to configure the user registration by invitation
      link](authentik.md#configure-the-invitation-flow)
    * [How to use blueprints](authentik.md#use-blueprints)
* Correction: [Configure the invitation flow with terraform.](authentik.md#configure-the-invitation-flow)
* New: [Hide and application from a user.](authentik.md#hide-and-application-from-a-user)
    Application access can be configured using (Policy) Bindings. Click on an application in the applications list, and select the Policy / Group / User Bindings tab. There you can bind users/groups/policies to grant them access. When nothing is bound, everyone has access. You can use this to grant access to one or multiple users/groups, or dynamically give access using policies.
    With terraform you can use `authentik_policy_binding`, for example:
    ```terraform
    resource "authentik_policy_binding" "admin" {
      target = authentik_application.gitea.uuid
      group  = authentik_group.admins.id
      order  = 0
    }
    ```
* New: [Configure password recovery.](authentik.md#configure-password-recovery)
    Password recovery is not set by default, in the article you can find the
    terraform resources needed for it to work.
* New: [Protect applications that don't have authentication.](authentik.md#protect-applications-that-don't-have-authentication)
    Some applications don't have authentication, for example [prometheus](prometheus.md). You can use Authentik in front of such applications to add the authentication and authorization layer.
    Authentik can be used as a (very) simple reverse proxy by using its Provider feature with the regular "Proxy" setting. This let's you wrap authentication around a sub-domain / app where it normally wouldn't have authentication (or not the type of auth that you would specifically want) and then have Authentik handle the proxy forwarding and Auth.
    In this mode, there is no domain level nor 'integrated' authentication into your desired app; Authentik becomes both your reverse proxy and auth for this one particular app or (sub) domain. This mode does not forward authentication nor let you log in into any app. It's just acts like an authentication wrapper.
    It's best to use a normal reverse proxy out front of Authentik. This adds a second layer of routing to deal with but Authentik is not NGINX or a reverse proxy system, so it does not have that many configuration options.
    We'll use the following fake domains in this example:
    - Authentik domain: auth.yourdomain.com
    - App domain: app.yourdomain.com
    - Nginx: nginx.yourdomain.com
    - Authentik's docker conter name: auth_server
    The steps are:
    - Configure the proxy provider:
      ```terraform
      # ---------------
      # -- Variables --
      # ---------------
      variable "prometheus_url" {
        type        = string
        description = "The url to access the service."
      }
      # ----------
      # -- Data --
      # ----------
      data "authentik_flow" "default-authorization-flow" {
        slug = "default-provider-authorization-implicit-consent"
      }
      # --------------------
      # --    Provider    --
      # --------------------
      resource "authentik_provider_proxy" "prometheus" {
        name               = "Prometheus"
        internal_host      = "http://prometheus:9090"
        external_host      = var.prometheus_url
        authorization_flow = data.authentik_flow.default-authorization-flow.id
        internal_host_ssl_validation = false
      }
      ```
* Correction: Finish the installation of prometheus.
* New: [Disregard monitorization.](authentik.md#monitorization)
    I've skimmed through the prometheus metrics exposed at `:9300/metrics` in the core and they aren't that useful :(
* New: [Troubleshoot I can't log in to authentik.](authentik.md#i-can't-log-in-to-authentik)
    In case you can't login anymore, perhaps due to an incorrectly configured stage or a failed flow import, you can create a recovery key.
    To create the key, run the following command:
    ```bash
    docker run --it authentik bash
    ak create_recovery_key 1 akadmin
    ```
    This will output a link, that can be used to instantly gain access to authentik as the user specified above. The link is valid for amount of years specified above, in this case, 1 year.
# Operating Systems
## [Linux](linux.md)
* New: Interesting learning pages.
    - https://explainshell.com/
    - https://linuxcommandlibrary.com/
### [Linux Snippets](linux_snippets.md)
* New: [Use a `pass` password in a Makefile.](linux_snippets.md#use-a-pass-password-in-a-makefile)
    ```makefile
    TOKEN ?= $(shell bash -c '/usr/bin/pass show path/to/token')
    diff:
    	@AUTHENTIK_TOKEN=$(TOKEN) terraform plan
    ```
* New: [Install a new font.](linux_snippets.md#install-a-new-font)
    Install a font manually by downloading the appropriate `.ttf` or `otf` files and placing them into `/usr/local/share/fonts` (system-wide), `~/.local/share/fonts` (user-specific) or `~/.fonts` (user-specific). These files should have the permission 644 (`-rw-r--r--`), otherwise they may not be usable.
* New: [Get VPN password from `pass`.](linux_snippets.md#get-vpn-password-from-pass)
    To be able to retrieve the user and password from pass you need to run the openvpn
    command with the next flags:
    ```bash
    sudo bash -c "openvpn --config config.ovpn  --auth-user-pass  {{ path_to_public_key_file }}
      ```
    * Get fingerprint of key
      ```bash
      ssh-keygen -lf {{ path_to_key }}
      ```
* New: [Measure the network performance between two machines.](linux_snippets.md#measure-the-network-performance-between-two-machines)
    Install `iperf3` with `apt-get install iperf3` on both server and client.
    On the server system run:
    ```bash
    server#: iperf3 -i 10 -s
    ```
    Where:
    * `-i`: the interval to provide periodic bandwidth updates
    * `-s`: listen as a server
    On the client system:
    ```bash
    client#: iperf3 -i 10 -w 1M -t 60 -c [server hostname or ip address]
    ```
    Where:
    * `-i`: the interval to provide periodic bandwidth updates
    * `-w`: the socket buffer size (which affects the TCP Window). The buffer size is also set on the server by this client command.
    * `-t`: the time to run the test in seconds
    * `-c`: connect to a listening server at…
    Sometimes is interesting to test both ways as they may return different outcomes
* New: [Force umount nfs mounted directory.](linux_snippets.md#force-umount-nfs-mounted-directory)
    ```bash
    umount -l path/to/mounted/dir
    ```
* New: [Configure fstab to mount nfs.](linux_snippets.md#configure-fstab-to-mount-nfs)
    NFS stands for ‘Network File System’. This mechanism allows Unix machines to share files and directories over the network. Using this feature, a Linux machine can mount a remote directory (residing in a NFS server machine) just like a local directory and can access files from it.
    An NFS share can be mounted on a machine by adding a line to the `/etc/fstab` file.
    The default syntax for `fstab` entry of NFS mounts is as follows.
    ```
    Server:/path/to/export /local_mountpoint nfs  0 0
    ```
    Where:
    * `Server`: The hostname or IP address of the NFS server where the exported directory resides.
    * `/path/to/export`: The shared directory (exported folder) path.
    * `/local_mountpoint`: Existing directory in the host where you want to mount the NFS share.
    You can specify a number of options that you want to set on the NFS mount: