### Adversary Identification and Trust Validation

Ad hoc methods for identifying potential attack sources often overlook certain adversaries or misidentify trusted entities as false adversaries. These methods are one-dimensional, focusing solely on trust or distrust, which limits their ability to accurately determine whether adversaries are being missed or misclassified.

To address these limitations, we propose a method that considers both the best-case and worst-case trust scenarios to derive per-subject adversary sets. For the worst-case scenario, we utilize the conservative integrity wall approach developed by Vijayakumar et al. [50]. This approach identifies the minimal set of subjects that must be trusted to prevent trivial compromises, thereby establishing a minimal Trusted Computing Base (TCB). For the best-case scenario, we employ the process privilege levels defined by Google [17], which categorize subjects into classes based on mutual trustworthiness. By examining trust from both perspectives, we can validate the consistency of the combined trust sets. Although this method provides only limited validation, it represents a novel approach, as no prior work has validated adversary sets in this manner.

#### Integrity Wall Method

The integrity wall method computes per-subject TCBs by ensuring that two conditions are met:
1. The subject must trust any other subjects authorized to modify files that the subject may execute (e.g., executable and library files).
2. The subject must trust any other subjects authorized to modify kernel resources.

We compute worst-case per-subject TCBs using Mandatory Access Control (MAC) Type Enforcement (TE) policies. On the other hand, Android specifies "privilege levels" [17] that describe which subjects should mutually trust each other, implying a best-case TCB. Google defines six privilege levels in an Android system [17], which we group into five levels for evaluation in Section 7:
- **T5: Root processes** (e.g., MAC labels kernel and init)
- **T4: System processes** (e.g., MAC label system server)
- **T3: Service processes** (e.g., MAC labels bluetooth and mediaserver)
- **T2: Trusted application processes** (e.g., MAC labels platform_app and priv_app)
- **T1: Untrusted application processes and isolated processes** (e.g., MAC label untrusted_app)

In our analysis, we do not consider attacks on untrusted apps by lower-privileged isolated apps. Table 1 lists these privilege levels based on their User ID (UID) and MAC labels.

Using Google's privilege levels, we assume that a subject trusts all subjects at its level or higher. For example, untrusted apps trust other untrusted apps and any subjects at higher privilege levels, such as Android system services (e.g., system server). This assumption is reasonable because higher-privileged subjects provide functionality that lower-privileged subjects depend on. However, assuming mutual trust among untrusted apps may be more challenging to accept, but we do not focus on attacks between untrusted apps in this paper. Determining how to identify adversaries among untrusted apps, such as deciding whether mutual trust for all is appropriate, is a topic for future research.

To produce an accurate adversary set, we validate the consistency between the best-case and worst-case trust sets. Specifically, PolyScope checks whether the worst-case trust set for each subject is a subset of that subject’s best-case trust set. If this condition holds, then there are no adversaries relative to the best-case trust set that are not also adversaries relative to the worst-case trust set. An inconsistency implies that the Android privilege levels are missing a fundamental trust requirement, potentially leading to trivial compromises.

### Permission Expansion

A key challenge for Original Equipment Manufacturers (OEMs) is predicting which resources may be accessible to adversaries and victims to derive accurate attack operations. While MAC policies are essentially fixed, Discretionary Access Control (DAC) permissions can be modified by adversaries to increase their attack capabilities. We identify two ways that adversaries may modify permission assignments on Android systems:
1. **Adversary Permission Expansion**: Adversaries may obtain Android permissions that augment their own DAC permissions.
2. **Victim Permission Expansion**: Adversaries may delegate DAC permissions for objects they own to potential victims.

For some Android permissions, adversaries gain new DAC permissions to access additional resources, enabling attacks. By delegating DAC permissions to objects they own, adversaries can lure potential victims to resources under their control.

#### Adversary Permission Expansion

In Android systems, some Android permissions are implemented using DAC groups. A process is associated with a single UID and GID, as well as an arbitrarily large set of supplementary groups that enable further "group" permissions. When a user grants an Android permission associated with one or more DAC groups to an app, the app's DAC permissions expand directly. Since MAC policies are generally lenient in Android systems, these new DAC permissions may grant privileges that enable attacks. For PolyScope, we assume that subjects can obtain all of their "normal" Android permissions and are granted all of their "dangerous" permissions by users for analysis. One of the vulnerability case studies highlighted in Section 7.6 exploits adversary permission expansion.

#### Victim Permission Expansion

Researchers have long known that allowing adversaries to manage DAC permissions for their own objects can complicate the prediction of possible permission assignments. The safety problem of predicting whether a particular unsafe permission will ever be granted to a particular subject in a typical DAC protection system is undecidable in the general case [21]. As a result, researchers have explored alternative DAC models, such as the take-grant model [26], the typed access matrix [38], and policy constraints [45].

Using the ability to manage DAC permissions for objects they own, adversaries can grant permissions to their resources to victims, expanding the set of resources that victims may be lured to use. In many cases, victims have MAC permissions that grant them access to adversary directories, but vendors use DAC permissions to block access. However, since adversaries own these directories, they can simply grant the removed permissions to potential victims themselves.

### Integrity Violations

In this section, we show how to compute integrity violations for file-IVs, binding-IVs, and pathname-IVs, as defined in Section 4. Recall from Section 2.2 that integrity violations are a tuple of resource, adversary, and victim, where the adversary is authorized to modify the resource and the victim is authorized to use (e.g., read, write, or execute) the resource.

#### Computing File Integrity Violations

A file vulnerability may be possible if a subject uses (read, write, or execute) a file that can be modified by an adversary. Many subjects read files that their adversaries may write (read-IVs) with adequate defenses, but the risks are greater if the subject executes (exec-IVs) or modifies such files (write-IVs). Executing input from an adversary enables the adversary to control the victim’s executable code. If a subject writes to a file that its adversaries can also write, then adversaries may be able to undo or replace valid content.

```plaintext
{read|write|exec}(file, victim) && // victim can access file,
adv-expand(file, adversary) &&
write(file, adversary)
// but adv-expanded perms
// enable to modify file
-->
{read|write|exec}-IV(file, victim, adversary)
```

This rule determines whether the victim is authorized by the combination of access control policies for reading, writing, or executing files, using the {read|write|exec} predicate. The rule accounts for the adversary’s expansion of their own permissions, as indicated by the predicate `adv-expand`. If the adversary also has write permission to the file (`write` predicate), then the associated integrity violation is created.

#### Computing Binding Integrity Violations

A binding vulnerability is possible if a subject may use a binding in resolving a file name that adversaries can modify.

```plaintext
use(binding, victim) &&
adv-expand(file, adversary) &&
write(binding, adversary)
// victim can use binding,
// but adv-expanded perms
// enable to modify binding
-->
binding-IV(binding, victim, adversary)
```

This rule parallels the rule for file-IVs, except that it applies to a victim having the permission to use a binding in name resolution (use predicate).

#### Computing Pathname Integrity Violations

Pathname integrity violations are binding integrity violations that are possible when a subject uses input from an adversary to build file pathnames used in name resolution. First, adversaries must be authorized to communicate with the victim. Second, through their input, adversaries can lure victims to any bindings they choose, enabling them to expand the IVs available for exploitation by victim permission expansion.

```plaintext
// may send IPCs to victim
write(ipc, adv, vic) &&
vic-expand(binding, adv, vic) && // and expand victim perms
binding-IV(binding, vic, adv)
// to lure victim
-->
pathname-IV(binding, vic, adv)
```

Adversaries must be granted write privilege to communicate with the victim, as defined in the `write` predicate. Android services may use Binder IPCs, and we further limit `write` to use IPCs that communicate URLs for Android services. The adversary can use victim expansion to increase the set of bindings the victim is authorized to use by `vic-expand`. If that binding meets the requirements of a binding-IV (see above), then a pathname-IV is also possible for this victim.

### Attack Operations

We define how PolyScope computes attack operations from the integrity violations computed in the previous section and the relevant system configurations. We identify four types of attack operations that an adversary could use to exploit the three types of integrity violations:
1. **File Modification for File IVs**
2. **File Squatting for Binding-IVs**
3. **Link Traversal for Binding-IVs**
4. **Luring Traversal for Pathname-IVs**

#### File Modification Attacks

For read/write/exec IVs, the attack operation is to modify the objects involved in each IV. However, Android uses some read-only filesystems, so not all files to which adversaries have write privilege are modifiable. Thus, the rule for file modification operations additionally checks whether the file is in a writable filesystem.

```plaintext
{read|write|exec}-IV(file, victim, adversary) &&
fs-writable(file)
// file's filesystem is writable
-->
file-mod(file, victim, adversary)
```

#### File Squatting Attack

In a file squatting attack, adversaries plant files that they expect the victim will access. The adversary grants access to the victim to allow the victim to use the adversary-controlled file. This attack operation gives the adversary control of the content of a file that the victim will use. To perform a file squatting attack operation, the adversary must be able to write to the directory to plant the file.

```plaintext
binding-IV(binding, victim, adversary) &&
fs-writable(binding)
// binding's filesystem is writable
-->
file-squat(binding, victim, adversary)
```

In this rule, we assume that the adversary predicts the filenames used by the victim. In the future, we will explore extending the rule to account for that capability.

#### Link Traversal

A link traversal attack is implemented by planting a symbolic link at a binding modifiable by the adversary. However, Android also uses some filesystem configurations that prohibit symbolic links, so not all bindings to which adversaries have write privilege and are in writable filesystems allow the creation of the necessary symbolic links. Thus, the rule for link traversal operations extends the rule for file squatting to account for this additional requirement.

```plaintext
binding-IV(binding, victim, adversary) &&
fs-writable(binding) &&
symlink(binding) &&
// binding's filesystem is writable
// and allows symlinks
-->
link-traversal(binding, victim, adversary)
```

#### Luring Traversal

An adversary may lure a victim to a binding controlled by the adversary to launch an attack operation. However, the Android `FileProvider` class can prevent such attacks. Specifically, the `FileProvider` class requires that clients open files themselves and provide the `FileProvider` with the resultant file descriptor. Since the clients open the file, they perform any name resolution, making the potential victim no longer prone to pathname vulnerabilities. Thus, the rule for luring traversal operations extends the rule for link traversal for pathname-IVs by requiring the absence of any `FileProvider` class usage. OEMs still have many services and privileged apps that do not employ the `FileProvider` class, leaving opportunities for pathname-IVs to be attacked.

```plaintext
pathname-IV(binding, victim, adversary) &&
fs-writable(binding) &&
symlink(binding) &&
no-file-provider(victim)
// binding's filesystem is writable
// and allows symlinks
// victim does not use FileProvider
-->
luring-traversal(binding, file, victim, adversary)
```

### Implementation

While it is possible that the victim has implemented extra defenses in Android middleware (e.g., Customized Android Permissions) to prevent IPCs, we do not yet account for these defenses. Including these defenses is a topic for future work.

The PolyScope tool is implemented fully in Python, consisting of approximately 1500 lines of code, and is compatible with Android version 5.0 and above. After data collection gathers access control policies, PolyScope implements the logical flow shown in Figure 2 in a slightly different manner described below. First, PolyScope computes integrity violations in steps one to three in Figure 2, but only for the SEAndroid TE policy, which we call TE IV Computation. Next, PolyScope computes whether the TE integrity violations are authorized by the remaining Android access control policies by re-running steps two and three in Figure 2, but only for resources associated with the TE IVs, which we call TE IV Validation. This separation enables us to parallelize the validation step, which has a significant performance impact, as discussed in Section 7.7. Finally, PolyScope leverages the validated IVs to compute attack operations. Below, we discuss the major phases of the implementation and how we use the results in testing for vulnerabilities.

#### Data Collection

We implemented multiple data collection scripts that gather access control data for subjects and objects from an Android phone. The methods are relatively straightforward for accessible files and processes, detailed in Appendix A.1. However, we are not authorized to access all files, particularly those owned by root, so we run these scripts on rooted phones. Recent work by Hernandez et al. [22] is able to extract MAC policy and part of DAC configuration from Android firmware images without rooting devices. However, this method is not yet integrated into our tool.