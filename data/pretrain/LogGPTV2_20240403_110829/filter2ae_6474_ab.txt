    chrome-extension://[32_CHAR_EXTENSION_ID]/example.html
这两个页面都可以访问彼此的DOM和JavaScript命名空间，因为它们具有相同的来源。请注意，这意味着在通过[iframe
contentWindow](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow)或[window.opener](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)进行访问时，每个后台页面的变量命名空间不会以任何全局方式彼此之间进行共享（除了[多个后台页面脚本](https://developer.chrome.com/extensions/background_pages)在运行时被整合到一个后台页面的情况）。您可以通过在Chrome中启用开发者模式来查看和调试后台页面。
内容脚本的工作方式略有不同，它们在其[作用范围内](https://developer.chrome.com/extensions/match_patterns)操作网页的来源。因此，如果您在
上运行内容脚本，则其有效来源就为 。这意味着它可以执行一些操作，诸如和
的DOM进行交互，添加事件侦听器以及执行XMLHTTPRequest以检索此来源的网页等。但是，它不能修改相应扩展的后台页面的DOM，因为它们的来源是不一样的。话虽如此，内容脚本确实有更多的权限，可以向后台页面发送消息，并调用一些[有条件限制的Chrome扩展API](https://developer.chrome.com/extensions/content_scripts#capabilities)。这是很怪异的设置，因为感觉就像是即使它们仍然共享一个DOM，但你的内容脚本和你的网页也会由于命名空间隔离而在单独的“pages”中运行。如果想要在Chrome中查看内容脚本并对其进行调试的话，您可以通过点击
选项>更多工具>开发者工具，然后弹出Chrome开发者工具菜单，显示开发人员工具后，单击“源”选项卡，然后单击子选项卡“内容脚本”。在这里，您可以看到各种扩展运行的内容脚本，并可以设置断点来监视执行的流程：
我审核Chrome扩展程序所花的时间大部分都在上面的Chrome开发人员面板上，即设置断点并执行。
#### 通过注入和消息传递来跨越障碍
然而，尽管命名空间分离，但Chrome扩展程序仍有足够的空间来完成自己的工作。例如，假设内容脚本需要检索网页命名空间中定义的变量的值，虽然它无法直接访问网页的命名空间，但它可以访问网页的DOM并向其中注入新的脚本标签(``)。然后，这个注入的脚本标签将在网页的命名空间中执行，并且可以访问它的变量。获取变量后，注入的脚本可以通过postMessage()函数将值传递回内容脚本。这是通过在父“网页的DOM”框中包含内容脚本和网页来显示的，它们都可以访问网页的DOM但是无法访问彼此的名称空间。下图演示了从网页中抓取变量并将其传递回内容脚本的流程：
在Chrome扩展审计过程中，重要的事情之一就是了解这些独立的领域之间是如何协同工作的。答案是(主要)通过消息传递。在Chrome扩展程序中，有几种不同的方式可以传递消息，例如[chrome.runtime.sendMessage()](https://developer.chrome.com/extensions/runtime#method-sendMessage)用于将消息从内容脚本发送到后台页面，或者[window.addEventListener()](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)用于将消息从网页传递到内容脚本。从安全角度来看，每当消息从较低特权空间中传递到较高特权空间时（例如，从内容脚本到后台页面的消息），通过非预期的输入获取可能的利用途径。因此消息传递的范围必须正确合理，以确保敏感数据不会被发送到非预期的来源。对于[postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)，就不能使用通配符“*”来发送消息，因为任何带有引用窗口的网页都可能监听它们。
#### Web可访问资源和导航阻塞
似乎命名空间隔离还不够，Chrome扩展资源还加了另外一层保护。默认情况下，Chrome扩展程序中的文件不能通过iframed、sourced或者是其他的方式包含网络上的常规网页。因此，
可能无法使用chrome-extension://pflahkdjlekaeehbenhpkpipgkbbdbbo/test.html
。然而，Chrome的扩展API却允许你通过使用扩展清单中的`web_accessible_resources`指令来声明这些资源，进而放宽这一限制条件。如果您希望常规网页可以包含扩展程序中的JavaScript，图像或者其他的资源，那么这个功能将非常重要。从安全角度来看，这个问题的缺点在于，任何设置了该标志的HTML页面都可以通过[clickjacking(点击劫持)](https://www.owasp.org/index.php/Clickjacking)，将恶意的输入传递到`location.hash`，通过postMessage()传递非预期的消息，或者通过非预期的顺序来嵌入和运行后台页面。所以，开发人员使用这个指令对大量资源进行通配是很危险的。此外，如果Chrome扩展程序通过这个指令公开所有的内容，Internet上的所有网页都可以使用这些可溯源的资源来指纹识别用户运行的特定扩展程序，这在开发和一般的网络跟踪中都有很多的用途。
#### 后台页面和内容安全策略
后台页面在各种领域中具有最高权限，因为它可以调用扩展程序[清单](https://developer.chrome.com/extensions/manifest)中声明的所有Chrome扩展API。这些API是扩展程序功能强大的核心，能够进行[管理cookie，书签，历史记录，下载，代理设置等操作](https://developer.chrome.com/extensions/api_index)。鉴于这些页面的强大性质，Chrome要求开发人员以[特定的最小要求](https://developer.chrome.com/extensions/contentSecurityPolicy#restrictions)声明[内容安全策略](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)（CSP）。默认情况下的Chrome扩展程序文档声明的策略如下：
    script-src 'self'; object-src 'self'
这是正确的，但值得一提的是，默认策略实际上是（您可以使用Chrome开发人员工具的网络面板自行验证）：
    script-src 'self' blob: filesystem: chrome-extension-resource:; object-src 'self' blob: filesystem:;
上述的策略略微宽松，以允许一些常规的JavaScript操作，例如创建blob:
URIs、和文件系统交互。当然，开发人员经常会看到这个默认策略，并对它的严格程度感到很反感。这种反感经常会促使开发人员尝试尽可能地放宽CSP以便“使其工作”。Chrome团队预料到了这种危险，并附加了额外的要求，以防止开发人员让他们的CSP变得过于宽松。因此，无法在Chrome扩展程序CSP中使用‘unsafe-inline（不安全内联）’的源代码（[
保留带有nonce的script](https://developer.chrome.com/extensions/contentSecurityPolicy#relaxing-inline-script) ）。这意味着开发人员永远不会使用类似于以下的内联 JavaScript 执行：
    Name: 
    …
    Click to start
    …
虽然这对于已经习惯了这种Web开发风格的开发人员来说很痛苦，但就其安全优势而言，作用不可估量。在这个过程中，Chrome使开发人员在其后台页面中编写跨站点脚本（XSS）漏洞变得更加困难。据我审核了数不胜数的Chrome扩展程序的经验来看，这是一个完全可利用的漏洞中唯一存在的缓解因素。此外，值得一提的是，这个要求通常会迫使开发人员用更简洁明了的方式来编写扩展程序，因为他们必须将视图和核心逻辑分开。
但是，您仍然会犯很多您在CSP中看到的常见错误。开发人员会（并且经常）将‘unsalf-eval’添加
到他们的CSP，并经常使用通配符CDN，并且任何人都可以上传其他来源的源脚本。这一系列操作通常让攻击者绕过CSP的所有保护措施有机可乘。
[突破限制—一份安全编写和审计Chrome扩展程序的指南(下)](https://xz.aliyun.com/t/2717)