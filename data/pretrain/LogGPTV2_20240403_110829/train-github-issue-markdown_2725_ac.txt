    self = 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    item = 
        def pytest_runtest_call(item):
            _update_current_test_var(item, 'call')
            try:
    >           item.runtest()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:106: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
        def runtest(self):
            """ execute the underlying test function. """
    >       self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:1171: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'pyfuncitem': }
    notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    hook = 
    methods = [, ]
    kwargs = {'pyfuncitem': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, ]
    kwargs = {'pyfuncitem': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    pyfuncitem = 
        @hookimpl(trylast=True)
        def pytest_pyfunc_call(pyfuncitem):
            testfunction = pyfuncitem.obj
            if pyfuncitem._isyieldedfunction():
                testfunction(*pyfuncitem._args)
            else:
                funcargs = pyfuncitem.funcargs
                testargs = {}
                for arg in pyfuncitem._fixtureinfo.argnames:
                    testargs[arg] = funcargs[arg]
    >           testfunction(**testargs)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:147: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    func = 
    kwargs = {'baseline_images': ['simple'], 'extensions': ['png', 'png', 'png']}
    errors = []
    failures = [(, 'images not close'), (, 'images not close'), (, 'images not close')]
    dots = 'FFF'
    monkeypatch = 
        @pytest.mark.parametrize(
            'func, kwargs, errors, failures, dots',
            [
                (nosetest_empty, {'baseline_images': []}, [], [], ''),
                (nosetest_empty, {'baseline_images': ['foo']},
                 [(AssertionError,
                   'Test generated 0 images but there are 1 baseline images')],
                 [],
                 'E'),
                (nosetest_simple_figure,
                 {'baseline_images': ['basn3p02'], 'extensions': ['png'],
                  'remove_text': True},
                 [],
                 [(ImageComparisonFailure, 'Image sizes do not match expected size:')],
                 'F'),
                (nosetest_simple_figure,
                 {'baseline_images': ['simple']},
                 [],
                 [(ImageComparisonFailure, 'images not close')] * 3,
                 'FFF'),
                (nosetest_simple_figure,
                 {'baseline_images': ['simple'], 'remove_text': True},
                 [],
                 [],
                 '...'),
                (nosetest_manual_text_removal,
                 {'baseline_images': ['simple']},
                 [],
                 [],
                 '...'),
            ],
            ids=[
                'empty',
                'extra baselines',
                'incorrect shape',
                'failing figure',
                'passing figure',
                'manual text removal',
            ])
        def test_nose_image_comparison(func, kwargs, errors, failures, dots,
                                       monkeypatch):
            nose = pytest.importorskip('nose')
            monkeypatch.setattr('matplotlib._called_from_pytest', False)
            class TestResultVerifier(nose.result.TextTestResult):
                def __init__(self, *args, **kwargs):
                    super(TestResultVerifier, self).__init__(*args, **kwargs)
                    self.error_count = 0
                    self.failure_count = 0
                def addError(self, test, err):
                    super(TestResultVerifier, self).addError(test, err)
                    if self.error_count        assert output.getvalue() == dots
    E       AssertionError: assert '...' == 'FFF'
    E         - ...
    E         + FFF
    build/lib.linux-x86_64-2.7/matplotlib/tests/test_compare_images.py:199: AssertionError
    ----------------------------- Captured stdout call -----------------------------
    images not close (RMS 12.955):
    	result_images/test_compare_images/simple.png
    	result_images/test_compare_images/simple-expected.png 
    images not close (RMS 12.955):
    	result_images/test_compare_images/simple.png
    	result_images/test_compare_images/simple-expected.png 
    images not close (RMS 12.955):
    	result_images/test_compare_images/simple.png
    	result_images/test_compare_images/simple-expected.png 
    ------------------------------ Captured log call -------------------------------
    importer.py                143 DEBUG    Add path /build/matplotlib-2.2.2
    suite.py                   418 DEBUG    Create suite for 
    suite.py                   420 DEBUG    tests  context 
    suite.py                   148 DEBUG    Context suite for  () (139723701656336)
    suite.py                   481 DEBUG    suite  has context nosetest_simple_figure
    suite.py                   435 DEBUG    get ancestry 
    suite.py                   452 DEBUG      ancestors ['matplotlib', 'tests', 'test_compare_images']
    util.py                    311 DEBUG    __import__ matplotlib.tests.test_compare_images
    util.py                    320 DEBUG    resolve: ['tests', 'test_compare_images'], matplotlib.tests.test_compare_images, , 
    suite.py                   485 DEBUG    suite  has ancestor matplotlib.tests.test_compare_images
    suite.py                   452 DEBUG      ancestors ['matplotlib', 'tests']
    util.py                    311 DEBUG    __import__ matplotlib.tests
    util.py                    320 DEBUG    resolve: ['tests'], matplotlib.tests, , 
    suite.py                   485 DEBUG    suite  has ancestor matplotlib.tests
    suite.py                   452 DEBUG      ancestors ['matplotlib']
    util.py                    311 DEBUG    __import__ matplotlib
    util.py                    320 DEBUG    resolve: [], matplotlib, , 
    suite.py                   485 DEBUG    suite  has ancestor matplotlib
    suite.py                   201 DEBUG    suite 139723701656336 () run called, tests: 
    suite.py                   269 DEBUG    suite 139723701656336 setUp called, tests: 
    suite.py                    79 DEBUG    tests in 139723701656336?
    suite.py                   288 DEBUG    ancestor  may need setup
    suite.py                   291 DEBUG    ancestor  does need setup
    suite.py                   302 DEBUG     setup context 
    suite.py                   288 DEBUG    ancestor  may need setup
    suite.py                   291 DEBUG    ancestor  does need setup
    suite.py                   302 DEBUG     setup context 
    util.py                    470 DEBUG    call fixture .setup
    suite.py                   288 DEBUG    ancestor  may need setup
    suite.py                   291 DEBUG    ancestor  does need setup
    suite.py                   302 DEBUG     setup context 
    suite.py                   288 DEBUG    ancestor  may need setup
    suite.py                   291 DEBUG    ancestor  does need setup
    suite.py                   302 DEBUG     setup context 
    util.py                    470 DEBUG    call fixture .setup
    suite.py                   298 DEBUG    completed suite setup
    suite.py                    94 DEBUG    precache is [matplotlib.tests.test_compare_images.nosetest_simple_figure(0, 'simple', 'png')]
    suite.py                   323 DEBUG    context teardown
    suite.py                   341 DEBUG    ancestor  may need teardown
    suite.py                   349 DEBUG     setup ancestor 
    suite.py                   356 DEBUG     teardown context 
    util.py                    470 DEBUG    call fixture .teardown
    suite.py                   341 DEBUG    ancestor  may need teardown
    suite.py                   349 DEBUG     setup ancestor 
    suite.py                   356 DEBUG     teardown context 
    suite.py                   341 DEBUG    ancestor  may need teardown
    suite.py                   349 DEBUG     setup ancestor 
    suite.py                   356 DEBUG     teardown context 
    suite.py                   341 DEBUG    ancestor  may need teardown
    suite.py                   349 DEBUG     setup ancestor 
    suite.py                   356 DEBUG     teardown context 
    suite.py                   341 DEBUG    ancestor  may need teardown
    suite.py                   346 DEBUG    ancestor  already torn down
    =============================== warnings summary ===============================
    build/lib.linux-x86_64-2.7/matplotlib/tests/test_axes.py::test_fill_units[png]
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/axes/_base.py:2504: RuntimeWarning: invalid value encountered in double_scalars