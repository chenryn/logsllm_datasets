User: How to install and use Docker containers on Linux systems, including basic operations in image management, container creation and startup.
Assistant: Install Docker 1. Install Docker’s dependent libraries and tools, execute the following commands: ``` sudo apt-get update sudo apt-get install apt-transport-https ca-certificates curl software-properties-common ``` 2. Add Docker official GPG key, execute the following command: ``` curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - ``` 3. Add Docker’s official APT source, Execute the following command: ``` sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" ``` 4. Update the APT repository and Install Docker: ``` sudo apt-get update sudo apt-get install docker-ce ``` After the installation is complete, execute the following command to verify that Docker is running properly: ``` sudo systemctl status docker ``` If the output is similar to the following The message means the installation is successful: ``` docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: active (running) since Mon 2018-04 -09 22:05:43 CST; 2min 13s ago ... ``` Image Management - A Docker image is built from a Dockerfile (or pulled from another Docker image) and contains a file system that can be used to build containers , applications and commands. (similar to an image file in a virtual machine). - Through the Docker image, we can directly build a container. If the Docker image does not contain the required application, you need to write the Dockerfile yourself to build it. 1. Pull images Docker officially provides a large number of images, we can directly pull the corresponding images from Docker Hub: ``` docker pull [imageName] ``` For example, pull the official Ubuntu image: ``` docker pull ubuntu ``` 2. View the image list ``` docker images ``` 3. Delete the image ``` docker rmi [imageName] ``` For example, delete the Ubuntu image: ``` docker rmi ubuntu ``` container management - A Docker container is an instance of a Docker image, similar to an instance in a virtual machine (also can be understood as a process). - When we start a container through the Docker command, Docker will create a file system, read-write layer, and network; and run the container's application on the file system. - Containers can be managed through commands. 1. Create a container ``` docker run [imageName] ``` For example, to create an Ubuntu container locally: ``` docker run -it ubuntu /bin/bash ``` - `-it`: means to run in interactive mode Container; - `ubuntu`: means to use the Ubuntu image to create a container; - `/bin/bash`: means to specify the command to run by default after the container starts. 2. View the container list ``` docker ps ``` If you want to view all containers (including stopped containers), add the parameter `-a`: ``` docker ps -a ``` 3. Start and stop containers- Start container: ``` docker start [containerName|containerID] ``` - View container running status: ``` docker ps [containerName|containerID] ``` Parameters: - `-a`: View all containers (including stopped container); - `-q`: only display the container ID. - Stop the container: ``` docker stop [containerName|containerID] ``` 4. Remove the container ``` docker rm [containerName|containerID] ``` For example, remove the container named my-ubuntu: ``` docker rm my-ubuntu ``` Reference link: - Official Docker documentation: https://docs.docker.com/ - Docker tutorial by Ruan Yifeng: http://www.ruanyifeng.com/blog/2018/02/docker-tutorial .html