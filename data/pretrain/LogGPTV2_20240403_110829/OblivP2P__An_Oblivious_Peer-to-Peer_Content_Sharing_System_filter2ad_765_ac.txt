ond, the tracker creates a bottleneck in the network.
3.4 OBLIVP2P-0 Analysis
Our analysis follow from Ring ORAM construction. To
access a block the tracker has to transmit ∼ 2.5logN · B
bits per access. During a block access or eviction, any
peer at any time transmits O(B) bits. The tracker’s main
computational time consists of decrypting and encrypt-
ing the stash. Since the stash has a size of O(logN)
blocks, the tracker does O(logN) blocks encryption/de-
cryption.
In terms of storage, every peer has (z + s)
blocks to store, where z is number of real blocks and s
is a parameter for dummy blocks. From a security per-
spective, it is clear that if there are two sequences veri-
fying the constraints of Deﬁnition 2.2, a malicious peer
monitoring their access pattern cannot infer the retrieved
blocks, since after every access the block is assigned to a
random path in the simulated ORAM.
4 OBLIVP2P-1: Distributed Protocol
In this section, we describe our main contribution,
OBLIVP2P-1 protocol that provides both security and
scalability properties. In designing such a protocol, our
main goal is to avoid any bottleneck on the tracker i.e.,
none of the real blocks should route through the tracker
for performing an access or evict operations of ORAM.
We outline the challenges in achieving this property
while still retaining the obliviousness in the network.
4.1 Challenges
First Attempt. A ﬁrst attempt to reduce tracker’s over-
head is to modify OBLIVP2P-0 such that the heavy com-
putation of fetching the path of a tree and decrypting the
correct block is ofﬂoaded to the initiator peer. On getting
a resource request from a peer, the tracker simply sends
information to the peer that includes the path of the tree
to fetch, the exact position of the requested block and the
key to decrypt it. However, unlike standard ORAM, the
peer in our model is not trusted. Giving away the exact
position of the block to the initiator peer leaks additional
information about the requested resource in our model,
as we explain next.
Recall that in a tree-based ORAM, blocks are dis-
tributed in the tree such that the recently accessed blocks
remain in the top of the tree. In fact, after every evic-
tion the blocks in the path are pushed down as far as
possible from the root of the tree. As an instance, af-
ter N deterministic evictions, all blocks that were never
accessed are (very likely) in the leaves. Conversely, con-
sider that an adversarial peer makes two back-to-back ac-
cesses. In the ﬁrst access, it retrieves a block from the top
of the tree while in the second access it retrieves a block
from a leaf. The adversarial peer (initiator) learns that
the ﬁrst block is a popular resource and is requested be-
fore by other peers while the second resource is a less
frequently requested resource. This is a well known is-
sue in tree-based ORAM, and is recently formulated as
the block history problem [57]. Disclosing the block po-
sition, while hiding the scheme obliviousness requires to
950  25th USENIX Security Symposium 
USENIX Association
6
address the block history challenge in ORAM. Unfortu-
nately, an ORAM hides the block history only if the com-
munication spent to access a block dominates the num-
ber of blocks stored in the entire ORAM. This would
be asymptotically equivalent to downloading the entire
ORAM tree from all the peers. We refer readers to [57]
for more details.
Second Attempt. Our second attempt is a protocol that
selects a block while hiding the block position from the
adversary i.e., to hide which node on the path holds the
requested block. Note that in a tree-based ORAM, dis-
closing the path does not break obliviousness, but leak-
ing which node on the path holds the requested block is
a source of leakage. One trick is to introduce a circuit,
a set of peers from the P2P network, that will simulate
the operations of a mixnet. That is, the peers holding the
path of the tree send their content to the ﬁrst peer in the
circuit, who then applies a random permutation, adds a
new encryption layer, and sends the permuted path to the
second peer and so on. The tracker, who knows all the
permutations, can send the ﬁnal block position (unlinked
from original position) to the initiator, along with the
keys to decrypt the block. The mixing guarantees that the
initiator does not learn the actual position of the block.
We note that mixing used here is for only one accessed
“path”, which is already randomized by ORAM. Hence,
it is not susceptible to intersection attack discussed in
Section 2.3. Finally, the initiator then peels off all layers
of the desired block to output the plaintext block.
However, there is an important caveat remaining in us-
ing this method. Note that the initiator has the keys to
peel off all the layers of encryption and hence it has ac-
cess to the same encrypted block fetched from the path in
the tree. Thus, it can determine which peer’s encrypted
block was ﬁnally selected as the output of the mixnet.
Hence, delegating the keys to the initiator boils down to
giving her the block position. One might think of elimi-
nating this issue by routing the block through the tracker
to peel off all layers, but this will just make the tracker
again a bottleneck.
So far, our attempts have shown limitations, but
pointed out that there is a need to formally deﬁne the
desired property. Considering a tracker, the initiator, and
the peers holding the path, we seek a primitive that given
a set of encrypted blocks, the initiator can get the desired
plaintext block, while no entity can infer the block posi-
tion but the tracker. We refer to this primitive as Oblivi-
ous Selection (OblivSel) and describe it next.
4.2 Oblivious Selection
4.2.1 Deﬁnitions
We deﬁne OblivSel and its properties as follows:
(cid:5)(cid:24)(cid:15)(cid:1)(cid:2)(cid:22)(cid:25)(cid:15)(cid:21)(cid:36)(cid:1)
(cid:5)(cid:24)(cid:15)(cid:1)(cid:2)(cid:22)(cid:25)(cid:15)(cid:21)(cid:37)(cid:1)
(cid:5)(cid:24)(cid:15)(cid:1)(cid:2)(cid:22)(cid:25)(cid:15)(cid:21)(cid:38)(cid:1)
Step 1 
Step 2 
Step 3 
Step 4 
(cid:11)(cid:17)(cid:22)(cid:17)(cid:15)(cid:29)(cid:1)(cid:2)(cid:1)(cid:27)(cid:13)(cid:24)(cid:16)(cid:25)(cid:23)(cid:1)(cid:26)(cid:17)(cid:17)(cid:27)(cid:28)(cid:1)
(cid:3)(cid:25)(cid:23)(cid:26)(cid:30)(cid:29)(cid:17)(cid:1)(cid:13)(cid:24)(cid:1)(cid:5)(cid:24)(cid:15)(cid:27)(cid:32)(cid:26)(cid:29)(cid:17)(cid:16)(cid:1)(cid:11)(cid:19)(cid:13)(cid:27)(cid:17)(cid:1)
(cid:34)(cid:30)(cid:28)(cid:20)(cid:24)(cid:18)(cid:1)(cid:8)(cid:12)(cid:33)(cid:9)(cid:8)(cid:10)(cid:35)(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:4)(cid:17)(cid:15)(cid:27)(cid:32)(cid:26)(cid:29)(cid:1)(cid:29)(cid:19)(cid:17)(cid:1)(cid:10)(cid:17)(cid:29)(cid:27)(cid:20)(cid:17)(cid:31)(cid:17)(cid:16)(cid:1)(cid:11)(cid:19)(cid:13)(cid:27)(cid:17)(cid:1)
(cid:34)(cid:30)(cid:28)(cid:20)(cid:24)(cid:18)(cid:1)(cid:11)(cid:7)(cid:33)(cid:9)(cid:10)(cid:6)(cid:35)(cid:1)
(cid:3)(cid:25)(cid:23)(cid:14)(cid:20)(cid:24)(cid:17)(cid:1)(cid:4)(cid:17)(cid:15)(cid:27)(cid:32)(cid:26)(cid:29)(cid:17)(cid:16)(cid:1)(cid:11)(cid:19)(cid:13)(cid:27)(cid:17)(cid:28)(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:2)(cid:4)(cid:7)(cid:6)(cid:8)(cid:3)(cid:5)(cid:7)(cid:1)
(cid:4)(cid:17)(cid:15)(cid:1)(cid:2)(cid:22)(cid:25)(cid:15)(cid:21)(cid:38)(cid:1)
Figure 2: Oblivious Selection protocol using IT-PIR and Seed
Homomorphic PRG as base primitives
Deﬁnition 4.1. (Oblivious Selection). OblivSel is a tuple
of two probabilistic algorithms (Gen, Select) such that:
• (σ ,r) ← Gen(k, pos): a probabilistic algorithm run
by the tracker,
takes as input a key k and the
block position pos, picks uniformly at random m
peers (P1,··· ,Pm), and outputs (σ ,r) where σ =
{σ1,··· ,σm} andr = {r1,··· ,rm} such that (σi,ri)
is given to the ith peer Pi.
• Δ← Select(σ ,r, Enc(k1, block1),··· , Enc(kL, blockL)):
a probabilistic algorithm run by m peers,
takes
as input σ, r, and a set of encrypted blocks
Enc(ki, blocki), for i ∈ [L], and outputs the value Δ.
Deﬁnition 4.2. OblivSel, is correct, if
Pr[∀ pos ∈ [L], k ∈ {0,1}λ , (σ ,r) ← Gen(k, pos);
Δ ← Select(σ ,r, Enc(k1, block1),··· , Enc(kL, blockL));
Δ = Dec(k, Enc(kpos, blockpos))] = 1
For instance, if (Enc, Dec) is a private key encryption,
OblivSel returns a decrypted block when the key given as
input to the Gen function is the same as the private key
of the block i.e., Δ = blockpos if k = kpos.
Deﬁnition 4.3. (Position Hiding.) We say that OblivSel
is a position hiding protocol if for all probabilistic poly-
nomial time global adversaries, including the initiator
and the m peers, guess the position of the block pos with
a negligible advantage in the implicit security parameter.
4.2.2 OblivSel Overview
The intuition for constructing OblivSel stems from the
fact that the tracker cannot give the position or private
key of the desired block to the peers in the network.
To privately select a block from the path without leak-
ing its position, we propose to use an existing crypto-
graphic primitive, called information-theoretical private
USENIX Association  
25th USENIX Security Symposium  951
7
Structure
FileMap
TagMap
NetMap
PosMap
KeyMap
StashList
Mapping
B ]
$
block address adr to tag
peer id pid to network info
ﬁle id ﬁd to block addresses {adri}i∈[ f
←− [NB]
(cid:31)IP, port(cid:30) ∈ {0,1}128+16
pos ∈ [Np]× [L· z +|stash|]
block address adr to key value k
peers’ identiﬁers {pidi}i∈[|stash|]
←− Zq
$
block address adr to path and bucket position
Purpose
Blocks identiﬁcation
Path identiﬁcation
Network representation
Block exact localization
Input of key block generation
Stash localization
Table 1: Various meta-information contained in the state s, for OBLIVP2P-0 and OBLIVP2P-1. B is the block size in bits, NP the
number of peers, NB number of blocks, L the path length, and z the bucket size.
information retrieval (IT-PIR) [58].
IT-PIR requires
a linear computation proportional to the data size that
makes it expensive to use for real time settings. How-
ever, note that in our setting, we want to obliviously se-
lect a block from a logarithmic number of blocks (i.e., a
path of the tree). Thus, applying IT-PIR over tree-based
ORAM comes with signiﬁcant computational improve-
ment, hence making it practical to use in our protocol.
The high level idea is to apply IT-PIR primitive only on
one path since the obliviousness is already guaranteed by
the underlined tree-based ORAM construction.
Figure 2 shows the steps involved in our OblivSel
primitive. As a ﬁrst step, the tracker randomly samples
m peers from the network. For a bounded number of col-
luding adversarial peers in the system, this sample will
contain at least one honest peer with high probability.
The blocks of the path are fetched by all of the m peers.
Each of the m peers then locally computes an encrypted
share of the desired block using IT-PIR from the set of
input blocks. Note that the tracker must not download
the shares or it will violate our scalability requirement.
On the other hand, we require to decrypt the block with-
out giving away the private key to the network’s peers.
For this purpose, we make use of a second cryptographic
primitive — a seed homomorphic pseudo-random gener-
ator (SH-PRG) [59]. The tracker generates a valid key
share for each of the m peers to be used as seeds to the
PRG function. Each peer decrypts (or unblinds) its en-
crypted share using its own key share such that the com-
bination of decrypted shares results in a valid decryption
of the original encrypted block in the tree. This property
is ensured by SH-PRG and explained in detail in Sec-
tion 4.2.3. Finally, each peer submits its decrypted share
to the initiator peer who combines them to get the desired
plaintext block. The colluding peers cannot recover the
private key or the encrypted block since there is at least
one honest peer who does not disclose its private infor-
mation. This solves the issues raised in our second at-
tempt.
Remark. OblivSel primitive can be used as a black box
Algorithm 1: IT-PIR protocol by Chor et al. [58]
1 (r1,··· ,rm) ← Query(q, L, pos)
• randomly generate m− 1 random vectors such that ri
• compute rm such that for all j ∈ [L]\{pos}, set
k=1 rk, j, otherwise, rm,pos = 1− ∑m−1
rm, j = −∑m−1
k=1 rk, j
$
←− ZL
q
Ri ← Compute(ri, DB)
• parse database such as DB = (block1,··· , blockL)
• compute Ri = ∑L
j=1 ri, jBlockj
blockpos ← Recover(R1,··· , Rm): compute blockpos = ∑m
j=1 Ri
in different settings such as distributed ORAMs to de-
crease the communication overhead. We further show in
Section 4.2.4 that OblivSel is highly parallelizable and
can leverage peers in the network such that the computa-
tion takes constant time.
4.2.3 Base Primitives
Information-theoretic PIR. Information-theoretic pri-
vate information retrieval (IT-PIR) [58] is a crypto-
graphic primitive that performs oblivious read opera-
tions while requiring multiple servers m ≥ 2. In the fol-
lowing, we present the details of one of the ﬁrst con-
structions of IT-PIR by Chor et al. [58] which is se-
cure even when m − 1 among m servers collude pas-
sively, i.e., the servers collude in order to recover the
retrieved block while not altering the protocol. An
IT-PIR is a tuple of possibly randomized algorithms
IT− PIR = (Query, Compute, Recover). Query takes as
an input the block position pos to be retrieved, and out-
puts an IT-PIR query for m servers. Compute runs inde-