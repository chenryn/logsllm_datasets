    order by i_pos1  pos for update skip locked limit 1
Limit  (cost=0.41..1.50 rows=1 width=50) (actual time=0.482..0.482 rows=1 loops=1)
  Output: id, pos, (('0101000020E61000000000000000005E400000000000003E40'::geometry  pos)), ctid
  Buffers: shared hit=9
  ->  LockRows  (cost=0.41..1269428.33 rows=1169416 width=50) (actual time=0.481..0.481 rows=1 loops=1)
        Output: id, pos, (('0101000020E61000000000000000005E400000000000003E40'::geometry  pos)), ctid
        Buffers: shared hit=9
        ->  Index Scan using idx_car_pos_1 on public.car  (cost=0.41..1257734.17 rows=1169416 width=50) (actual time=0.465..0.465 rows=1 loops=1)
              Output: id, pos, ('0101000020E61000000000000000005E400000000000003E40'::geometry  pos), ctid
              Order By: (car.pos  '0101000020E61000000000000000005E400000000000003E40'::geometry)
              Filter: ((((car.rest_sites > 0) AND (car.rest_sites >= '1'::smallint)) OR (car.rest_sites IS NULL)) AND pg_try_advisory_xact_lock((car.id)::bigint) AND ((car.order_pos IS NULL) OR f_isbulk('0101000020E61000000000000000005E409A99999999193E40'::geometry, car.order_pos)))
              Buffers: shared hit=7
LOG:  duration: 0.102 ms  plan:
Query Text: update car set   
    rest_sites=coalesce(rest_sites-i_sites, sites-i_sites),         -- 减少剩余座位  
    order_pos=coalesce(order_pos||i_pos2, array[i_pos2])            -- 将目的地追加到车辆所有目的地中  
    where id=v_carid    
    and coalesce(rest_sites-i_sites, sites-i_sites) >= 0  
    returning id
Update on public.car  (cost=0.43..2.67 rows=1 width=86) (actual time=0.098..0.099 rows=1 loops=1)
  Output: id
  Buffers: shared hit=15
  ->  Index Scan using car_pkey on public.car  (cost=0.43..2.67 rows=1 width=86) (actual time=0.017..0.018 rows=1 loops=1)
        Output: id, pos, sites, COALESCE((rest_sites - '1'::smallint), (sites - '1'::smallint)), mod_time, COALESCE((order_pos || '0101000020E61000000000000000005E409A99999999193E40'::geometry), '{0101000020E61000000000000000005E409A99999999193E40}'::geometry[]), ctid
        Index Cond: (car.id = 1112283)
        Filter: (COALESCE((car.rest_sites - '1'::smallint), (car.sites - '1'::smallint)) >= 0)
        Buffers: shared hit=4
LOG:  duration: 0.032 ms  plan:
Query Text: insert into orders (carid, uid, crt_time, pos1, pos2, sites, status)   
    values(v_carid, i_uid, now(), i_pos1, i_pos2, i_sites, 2)   -- 状态为进行中  
    returning id
Insert on public.orders  (cost=0.00..0.02 rows=1 width=96) (actual time=0.030..0.031 rows=1 loops=1)
  Output: id
  Buffers: shared hit=8
  ->  Result  (cost=0.00..0.02 rows=1 width=96) (actual time=0.010..0.010 rows=1 loops=1)
        Output: nextval('orders_id_seq'::regclass), 1112283, '1'::bigint, now(), '0101000020E61000000000000000005E400000000000003E40'::geometry, '0101000020E61000000000000000005E409A99999999193E40'::geometry, '1'::smallint, '2'::smallint
        Buffers: shared hit=1
LOG:  duration: 1.686 ms  plan:
Query Text: select getcar_isbulk(1, st_setsrid(st_point(120,30),4326), st_setsrid(st_point(120,30.1),4326), 1::int2);
Result  (cost=0.00..0.26 rows=1 width=8) (actual time=1.681..1.681 rows=1 loops=1)
  Output: getcar_isbulk('1'::bigint, '0101000020E61000000000000000005E400000000000003E40'::geometry, '0101000020E61000000000000000005E409A99999999193E40'::geometry, '1'::smallint)
  Buffers: shared hit=56
 getcar_isbulk 
---------------
      18854017
(1 row)
```
还有一种方法是使用plprofiler   
[《PostgreSQL 函数调试、诊断、优化 & auto_explain & plprofiler》](../201611/20161121_02.md)    
### 分库  
通常分库的目的是降低单库的请求量，但是对于时空库，如何分区好呢？  
1、如果按空间分库，涉及地理边界问题  
2、如果按其他分库，由于任一空间数据可能在所有分库，查询车辆时，涉及所有分库全部搜索的问题  
思路：  
为了降低请求量，还是需要按空间来分区，但是需要克服边界的问题，以及车辆位置迁移的问题。  
1、首先，按车辆经常活动的位置分库, 构建元数据，保存：多边形  库 映射关系.     
2、根据用户上车位置，选择覆盖它的多边形，找到这个多边形对应的一个或多个库，多边形选择的性能，PG非常的好：  
[《HTAP数据库 PostgreSQL 场景与性能测试之 5 - (OLTP) 空间应用 - 空间包含查询(表内多边形 包含 输入空间对象)》](../201711/20171107_06.md)    
3、订单映射关系, 表示一个订单在哪个库生成的，这个数据可以按订单号分库，不存在空间这种交错问题。  
4、最后，车辆位置修订（比如某个车辆因订单跑到很远的地方，点更新所属位置，将车辆信息进行迁移（从一个分库改到另一个分库），这样目标位置库内就有它的车辆信息了，可以被用户看到。）。  
车辆位置修订，可以用电子围栏，比如当车辆出了围栏，可以让用户选择是否重新选择上线位置（就类似我们有一些APP，出差换了个城市，它就会提醒你是否更新到其他城市）。让司机自己操作。又或者设置回城单等。    
## 小结  
PostgreSQL 是一个非常棒的全栈式数据库，本例用到了PG的几个特性：  
1、空间数据库插件PostGIS  
2、数组，为拼车提供了算法基础  
3、部分索引，只对需要检索的数据创建索引  
4、UDF，数据库端编程，本例的派单完全由PG的PLPGSQL函数完成  
5、skip lock, advisorry lock。与秒杀类似，用于提高高峰期的打车吞吐，不会造成一辆车被多个客户抢锁，白白等待。  
测试机位56核的阿里云ECS虚拟机，SSD云盘。  
性能  
在混合场景，这样一个主机，每秒约处理1万笔派单。如果峰值有达到每秒100万比订单，可以分100个库。  
### 算笔账  
假设平均每笔订单30元，提成20%，以每秒结束订单为例，这一个PG库最多带来的盈利为 每秒```22692*6 = 13.6```万RMB。 一天117亿RMB。(当然不可能一直处于高潮状态，这个是夸张说法，不过一天1小时高潮还是要有的，5亿也足矣啊。)       
而购买一个类似规格的[阿里云RDS PostgreSQL](https://www.aliyun.com/product/rds/postgresql)实例(56核，480G内存，2TB SSD云盘存储)，成本仅需6140每月(还包含了云盘本身的可靠性、数据库的高可用、备份、等等。关键是数据库内核级的支持与服务，你值得拥有)。   
### 优化  
本文即兴而写，内容可能会很糙，主要是提供一些思路和DEMO，后面肯定还有很多的优化空间，比如下面的几个思路，仅供参考，谢谢观赏。  
未来优化1：对于不能被叫的车辆，行驶过程中可以不更新(或降低更新频率，积攒多个点后一次更新)其位置，减少更新量。本例中已优化(insert on conflict语法内支持)。  
未来优化2：高峰期，撮合同一方向的订单。可以利用类似数据库的分组提交，打车时HOLD一定时间窗口，按目标方向，比如使用k-means，按目的地位置聚集归类进行撮合（当然还可以扩展更多的撮合方法）。  
未来优化3：对于同一个时刻，同一个地点，有多人打车时，如果都按同样的就近选择CAR的规则，会导致同一辆CAR被多次挑选中，本文使用了ADVISORY LOCK来避免行锁冲突。但是依旧有更好的优化，因为这种方法虽然没有了锁冲突，但是扫描依旧是从近到远的，所以可能并发时，一些会话存在多行扫描才找到没有被锁定的行。    有一种方法，比如，类似组提交，对同一个地点同时打车的多人，一次取多辆CAR，在程序中分配给不同的人。  还有一种方法，需要数据库内来实现，给一个离散因子，每次获取到的可能不是最近的CAR，满足多少米内的周边的CARs，随机挑选，但是这个随机挑选必须在INDEX中完成，必须保证在库中的index scan, heap scan都只扫一条。（类似索引的位点随机扫）   
未来优化4：由于car表经常更新可以设计一个合理fillfactor，包括它的索引。例如设置为70.   
一些有趣的相关文章：  
[《人分九等，数有阶梯 - PostgreSQL 阶品（颗粒）分析函数width_bucket, kmean应用》](../201707/20170715_01.md)    
[《在PostgreSQL中如何生成测试kmean算法的数据》](../201606/20160614_04.md)    
[《K-Means 数据聚集算法》](../201508/20150817_01.md)    
[《一张图看懂MADlib能干什么》](../201511/20151111_01.md)    
[《PostgreSQL 多元线性回归 - 1 MADLib Installed in PostgreSQL 9.2》](../201307/20130731_01.md)    
[《PostGIS 空间数据学习建议》](../201708/20170809_01.md)    
http://postgis.net/docs/manual-2.4/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")