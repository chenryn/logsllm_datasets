title:Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel
Hazards in SGX
author:Wenhao Wang and
Guoxing Chen and
Xiaorui Pan and
Yinqian Zhang and
XiaoFeng Wang and
Vincent Bindschaedler and
Haixu Tang and
Carl A. Gunter
Leaky Cauldron on the Dark Land: Understanding Memory
Side-Channel Hazards in SGX
Wenhao Wang1, Guoxing Chen3, Xiaorui Pan2, Yinqian Zhang3, XiaoFeng Wang2,
Vincent Bindschaedler4, Haixu Tang2, Carl A. Gunter4∗
1SKLOIS, Institute of Information Engineering, Chinese Academy of Sciences & Indiana University Bloomington
2Indiana University Bloomington
3The Ohio State University
4University of Illinois at Urbana-Champaign
ABSTRACT
Side-channel risks of Intel SGX have recently attracted great atten-
tion. Under the spotlight is the newly discovered page-fault attack,
in which an OS-level adversary induces page faults to observe the
page-level access patterns of a protected process running in an SGX
enclave. With almost all proposed defense focusing on this attack,
little is known about whether such efforts indeed raise the bar for
the adversary, whether a simple variation of the attack renders
all protection ineffective, not to mention an in-depth understand-
ing of other attack surfaces in the SGX system. In the paper, we
report the first step toward systematic analyses of side-channel
threats that SGX faces, focusing on the risks associated with its
memory management. Our research identifies 8 potential attack
vectors, ranging from TLB to DRAM modules. More importantly, we
highlight the common misunderstandings about SGX memory side
channels, demonstrating that high frequent AEXs can be avoided
when recovering EdDSA secret key through a new page channel
and fine-grained monitoring of enclave programs (at the level of
64B) can be done through combining both cache and cross-enclave
DRAM channels. Our findings reveal the gap between the ongoing
security research on SGX and its side-channel weaknesses, rede-
fine the side-channel threat model for secure enclaves, and can
provoke a discussion on when to use such a system and how to use
it securely.
1 INTRODUCTION
A grand security challenge today is how to establish a trusted
execution environment (TEE) capable of protecting large-scale,
data-intensive computing. This is critical for the purposes such
as outsourcing analysis of sensitive data (e.g., electronic health
records) to an untrusted cloud. Serving such purposes cannot solely
rely on cryptographic means, for example, fully homomorphic en-
cryption, which is still far too slow to handle the computing task
∗Work was done when the first author was at Indiana University Bloomington.
Email: {ww31, xiaopan, xw7, hatang}@indiana.edu, {chenguo, yinqian}@cse.ohio-
state.edu, {bindsch2, cgunter}@illinois.edu.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134038
1
of a practical scale. A promising alternative is made possible by
recent hardware progress such as Intel Software Guard Extension
(SGX) [10]. SGX offers protection for data and code with a secure
enclave designed to be resilient to attacks from its host operating
system or even system administrators. Such protection is offered as
a feature of Intel’s mainstream CPUs (i.e., Skylake and Kaby Lake),
and characterized by its small trusted computing base (TCB), includ-
ing just the CPU package, and the potential to scale its performance
with the capability of the processors. However, the simplicity of
the design forces an enclave program to utilize resources (mem-
ory, I/O, etc.) partially or fully controlled by the untrusted OS, and
therefore potentially subjects it to side-channel attacks, in which
the adversary outside the enclave could infer sensitive information
inside from observed operations on the shared resources.
SGX side-channel hazards. Unfortunately, the threat has been
found to be more realistic and serious than thought: prior studies
have shown that an adversary with a full control of the OS can
manipulate the page tables of the code running in the enclave-
mode—a CPU mode protected by SGX—to induce page faults during
its execution; through monitoring the occurrences of the faults in a
relatively noise-free environment created by the adversary, he could
identify the program’s execution trace at the page level, which is
shown to be sufficient for extracting text documents, outlines of
images from popular application libraries [43] and compromising
cryptographic operations [39]. In our paper, we call these attacks
the page-fault side-channel attacks.
Intel’s position on these side-channel attacks offers much food
for thought. They admit that SGX does not defend against four side-
channel attack vectors: power statistics, cache miss statistics, branch
timing and page accesses via page tables [2]. Facing the security
threats due to these side channels, Intel recommends that “it would
be up to the independent software vendors to design the enclave in
a way that prevents the leaking of side-channel information. [7]”,
though they actually work actively with academia and open source
partners to help mitigate the threats [6].
It is clear, from Intel’s statements, radical hardware changes to
address these side-channel problems (e.g., defeating page-fault side
channels by keeping the entire page tables inside the enclave [16])
are unlikely to happen. As a result, software vendors are left with
the daunting tasks of understanding the security impacts of the
SGX side channels and developing practical techniques to mitigate
the threats when building their SGX applications.
Given the importance of the problem, recent years have already
witnessed mushrooming of the attempts to address SGX side chan-
nel threats [15, 38, 39], for example, by placing sensitive code and
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2421data within the same page [39], or by detecting page faults through
hardware supports [38] or timed-execution [15]. However, these
studies were primarily targeting the page-fault attacks. Although
the concern about this demonstrated attack vector is certainly jus-
tified, the sole attention on the page-fault attack can be inadequate.
After all, tasking a safe heaven built upon minimum software sup-
port with complicated computing missions (e.g., data-intensive
computing) can potentially open many avenues for inside informa-
tion to trickle out during the interactions with the outside, when
the external help is needed to accomplish the missions. Focusing
on memory alone, we can see not only a program’s virtual memory
management but that its physical memory control are partially or
fully exposed to the untrusted OS, not to mention other system
services an enclave program may require (process management,
I/O, etc.). Even only looking at page tables, we are not sure whether
the known paging attack is the only or the most effective way to
extract sensitive information from the enclave process. In the ab-
sence of a comprehensive understanding of possible attack surfaces,
it is not clear whether all proposed protection, which tends to be
heavyweight and intrusive, can even raise the bar to side-channel
attacks, and whether an adversary can switch to a different tech-
nique or channel, more lightweight and equally effective, to extract
the information these approaches were designed to protect.
Understanding memory side channels. As a first step toward a
comprehensive understanding of side-channel threats software ven-
dors face, in this paper, we focus on memory-related side channels,
which is an important, and arguably the most effective category of
side channels that has ever been studied. Of course, the page-fault
side channel falls in the scope of our discussion. To deepen the
community’s understanding of the memory side-channel attack
surfaces and guide the design of defense mechanisms, we believe
that it is important to make the following three key points: First,
page faults are not the only vector that leaks an enclave program’s
memory access patterns. Any follow-up attempt to mitigate mem-
ory side-channel leaks should take into account the entire attack
surfaces. Second, not every side-channel attack on enclave induces a
large number of Asynchronous Enclave eXits (AEXs) as demonstrated
in the page-fault attacks. This is important because the anomalously
high AEX interrupt rate has been considered to be a key feature
of SGX side-channel attacks, which can be defeated by the protec-
tion designed to capture this signal [15, 38]. Our finding, however,
shows that such interrupt-based protection is fragile, as more so-
phisticated attacks can avoid producing too many interrupts. Third,
it is possible to acquire a fine-grained side-channel observation, at the
cache-line level, into the enclave memory. Hence, defense that places
sensitive code and data on the same page [39] will not be effective
on the new attacks.
In this paper, we hope to get across these messages through the
following research efforts:
• Exploration of memory side-channel attack surfaces. In our research,
we surveyed SGX side-channel attack surfaces involving memory
management, identifying 8 types of side-channel attack vectors
related to address translation caches in CPU hardware (e.g., TLB,
paging-structure caches), page tables located in the main memory,
and the entire cache and DRAM hierarchy. This study takes into
account each step in the address translation and memory operation,
and thus to our knowledge presents the most comprehensive analy-
sis on memory side-channel attack surfaces against SGX enclaves.
• Reducing side effects of memory side-channel attacks. To demon-
strate that a large number of AEXs are not a necessary condition
of memory side-channel attacks, we develop a new memory-based
attack, called sneaky page monitoring (SPM). SPM attacks work by
setting and resetting a page’s accessed flag in the page table entry
(PTE) to monitor when the page is visited. Unlike the page-fault
attacks [43], in which a page fault is generated each time when a
page is accessed, manipulation of the accessed flags does not trigger
any interrupt directly. However, the attack still needs to flush the
translation lookaside buffer (TLB) from time to time by triggering
interrupts to force the CPU to look up page tables and set accessed
flags in the PTEs. Nevertheless, we found that there are several
ways to reduce the number of the interrupts or even completely
eliminate them in such attacks. Particularly, we can avoid tracking
the access patterns between the entry and exit pages of a program
fragment (e.g., a function) and instead, use the execution time mea-
sured between these pages to infer the execution paths in-between.
This approach can still work if all secret-dependent branches are
located in the same page (i.e., a mechanism proposed by [39]), as
long as there is still a timing difference between the executions of
these branches. Further, we present a technique that utilizes Intel’s
HyperThreading capability to flush the TLBs through an attack
process sharing the same CPU core with the enclave code, which
can eliminate the need of interrupts, when HyperThreading is on.
We demonstrate the effectiveness of SPM through attacks on
real-world applications. Particularly, we show that when attacking
EdDSA (Section 4.3), our timing enhancement only triggers 1,300
interrupts, compared with 71,000 caused by the page-fault attack
and 33,000 by the direct accessed flags attack, when recovering the
whole 512-bit secret key. This level of the interrupt rate makes our
attack almost invisible to all known interrupt-based defense [15, 38],
given the fact that even normal execution of the target program
generates thousands of interrupts.
• Improving attack’s spatial granularity. Page-fault attacks allow
attackers to observe the enclave program’s memory access pattern
at the page granularity (4KB), therefore existing solutions propose
to defeat the attacks by aligning sensitive code and data within
the same memory pages. To show that this defense strategy is
ineffective, we demonstrate a series of memory side-channel attacks
that achieve finer spatial granularity, which includes a cross-enclave
Prime+Probe attack, a cross-enclave DRAMA attack, and a novel
cache-DRAM attack. Particularly, the cache-DRAM attack leverages
both Prime+Probe cache attacks and DRAMA attacks to improve
the spatial granularity. When exploiting both channels, we are able
to achieve a fine-grained observation (64B as apposed to 16KB
for Prime+Probe and ≥1KB for the DRAMA attack alone), which
enables us to monitor the execution flows of an enclave program
(similar to Flush+Reload attacks). Note that this cannot be done
at the cache level since in our case the attacker does not share
code with the target enclave program, which makes Flush+Reload
impossible.
Implications. Our findings point to the disturbing lack of under-
standing about potential attack surfaces in SGX, which can have a
serious consequence. Not only are all existing defense mechanisms
2
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2422vulnerable to the new attacks we developed, but some of them only
marginally increase the cost on the attacker side: as demonstrated
in our study, for the channels on the virtual memory, the page-fault
attack is not the most cost-effective one and a large number of AEX
interrupts are not necessary for a successful attack; all existing
protection does not add much burden to a more sophisticated at-
tacker, who can effectively reduce the frequency of AEXs without
undermining the effectiveness of the attack. Most importantly, we
hope that our study can lead to rethinking the security limitations
of SGX and similar TEE technologies, provoking a discussion on
when to use them and how to use them properly.
Contributions. In this paper, we make the following contributions:
• The first in-depth study on SGX memory side-channel attack sur-
faces. Although only focusing on the memory management, our
study reveals new channels that disclose information of the enclave,
particularly accessed flags, timing and cross-enclave channels.
• New attacks. We developed a suite of new attack techniques that
exploit these new channels. Particularly, we show multiple channels
can complement each other to enhance the effectiveness of an at-
tack: timing+accessed flags to reduce AEXs (rendering existing pro-
tection less effective) and DRAM+Cache to achieve a fine-grained
observation into the enclave (64B).
• New understanding. We discuss possible mitigations of the new
threats and highlight the importance of a better understanding of
the limitations of SGX-like technologies.
2 BACKGROUND
2.1 Memory Isolation in Intel SGX
Memory isolation of enclave programs is a key design feature of
Intel SGX. To maintain backward-compatibility, Intel implements
such isolation via extensions to existing processor architectures,
which we introduce below.
Virtual and physical memory management. Intel SGX reserves
a range of continuous physical memory exclusively for enclave
programs and their control structures, dubbed Processor Reserved
Memory (PRM). The extended memory management units (MMU)
of the CPU prevents accesses to the PRM from all programs outside
enclaves, including the OS kernel, virtual machine hypervisors,
SMM code or Direct Memory Accesses (DMA). Enclave Page Cache
(EPC) is a subset of the PRM memory range. The EPC is divided
to pages of 4KBs and managed similarly as the rest of the physical
memory pages. Each EPC page can be allocated to one enclave at
one time.
The virtual memory space of each program has an Enclave Lin-
ear Address Range (ELRANGE), which is reserved for enclaves and
mapped to the EPC pages. Sensitive code and data is stored within
the ELRANGE. Page tables responsible for translating virtual ad-
dresses to physical addresses are managed by the untrusted system
software. The translation lookaside buffer (TLB) works for EPC
pages in traditional ways. When the CPU transitions between non-
enclave mode and enclave mode, through EENTER or EEXIT instruc-
tions or Asynchronous Enclave Exits (AEXs), TLB entries associated
with the current Process-Context Identifier (PCID) as well as the
global identifier are flushed, preventing non-enclave code learning
information about address translation inside the enclaves.
3