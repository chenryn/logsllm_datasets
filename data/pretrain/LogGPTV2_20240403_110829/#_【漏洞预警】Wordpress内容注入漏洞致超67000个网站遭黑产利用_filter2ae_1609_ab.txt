                array(
                    'methods'             => WP_REST_Server::DELETABLE,
                    'callback'            => array( $this, 'delete_item' ),
                    'permission_callback' => array( $this, 'delete_item_permissions_check' ),
                    'args'                => array(
                        'force' => array(
                            'type'        => 'boolean',
                            'default'     => false,
                            'description' => __( 'Whether to bypass trash and force deletion.' ),
                        ),
                    ),
                ),
                'schema' => array( $this, 'get_public_item_schema' ),
            ) );
可以看到在register_rest_route中对路由进行了正则限制：
也就是防止攻击者恶意构造ID值，但是我们可以发现$_GET和$_POST值优先于路由正则表达式生成的值：
这边没有找到ID为123hh的项目，所以返回rest_invalid。
现在我们可以忽略路由正则的限制，来传入我们自定义的ID。
接下来在审查各个端点方法中，找到了update_item这个方法，及其权限检查方法update_item_permissions_check：
    public function update_item_permissions_check( $request ) {
            $post = get_post( $request['id'] );
            $post_type = get_post_type_object( $this->post_type );
            if ( $post && ! $this->check_update_permission( $post ) ) {
                return new WP_Error( 'rest_cannot_edit', __( 'Sorry, you are not allowed to edit this post.' ), array( 'status' => rest_authorization_required_code() ) );
            }
            if ( ! empty( $request['author'] ) && get_current_user_id() !== $request['author'] && ! current_user_can( $post_type->cap->edit_others_posts ) ) {
                return new WP_Error( 'rest_cannot_edit_others', __( 'Sorry, you are not allowed to update posts as this user.' ), array( 'status' => rest_authorization_required_code() ) );
            }
            if ( ! empty( $request['sticky'] ) && ! current_user_can( $post_type->cap->edit_others_posts ) ) {
                return new WP_Error( 'rest_cannot_assign_sticky', __( 'Sorry, you are not allowed to make posts sticky.' ), array( 'status' => rest_authorization_required_code() ) );
            }
            if ( ! $this->check_assign_terms_permission( $request ) ) {
                return new WP_Error( 'rest_cannot_assign_term', __( 'Sorry, you are not allowed to assign the provided terms.' ), array( 'status' => rest_authorization_required_code() ) );
            }
            return true;
        }
可以看到，此函数通过检查文章是否实际存在，以及我们的用户是否有权限编辑这边文章来验证请求。但是当我们发送一个没有响应文章的ID时，就可以通过权限检查，并允许继续执行对update_item方法的请求。
具体到代码，就是让$post为空，就可以通过权限检查，接下来跟进get_post方法中看一下：
    function get_post( $post = null, $output = OBJECT, $filter = 'raw' ) {  
        if ( empty( $post ) && isset( $GLOBALS['post'] ) )
            $post = $GLOBALS['post'];
        if ( $post instanceof WP_Post ) {
            $_post = $post;
        } elseif ( is_object( $post ) ) {
            if ( empty( $post->filter ) ) {
                $_post = sanitize_post( $post, 'raw' );
                $_post = new WP_Post( $_post );
            } elseif ( 'raw' == $post->filter ) {
                $_post = new WP_Post( $post );
            } else {
                $_post = WP_Post::get_instance( $post->ID );
            }
        } else {
            $_post = WP_Post::get_instance( $post );
        }
        if ( ! $_post )
            return null;
从代码中可以看出，它是用wp_posts中的get_instance静态方法来获取文章的，跟进wp_posts类，位于/wp-includes/class-wp-post.php中：
    public static function get_instance( $post_id ) {  
            global $wpdb;
            if ( ! is_numeric( $post_id ) || $post_id != floor( $post_id ) || ! $post_id ) {
                return false;
            }
可以看到，当我们传入的ID不是全由数字字符组成的时候，就会返回false，也就是返回一个不存在的文章。从而get_post方法返回null，从而绕过update_item_permissions_check的权限检测。
回头再看一下可执行方法upload_item：
    public function update_item( $request ) {  
            $id   = (int) $request['id'];
            $post = get_post( $id );
            if ( empty( $id ) || empty( $post->ID ) || $this->post_type !== $post->post_type ) {
                return new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );
            }
            $post = $this->prepare_item_for_database( $request );
            if ( is_wp_error( $post ) ) {
                return $post;
            }
            // convert the post object to an array, otherwise wp_update_post will expect non-escaped input.
            $post_id = wp_update_post( wp_slash( (array) $post ), true );
在这边将ID参数装换为一个整数，然后传递给get_post。而PHP类型转换的时候回出现这样的情况：
所以，也就是说，当攻击者发起/wp-json/wp/v2/posts/1?id=1hhh请求时，便是发起了对ID为1的文章的请求。下面为利用[exploit-db][2]上的POC来进行测试：
新建文章：
测试：
测试结果：
**多想了一下**
乍一看，感觉这个洞并没有什么太大的影响，但是仔细想了一下，危害还是很大的。先不说WordPress页面执行php代码的各种插件，还有相当一部分的WordPress文章可以调用短代码的方式来输出特定的内容，以及向日志中添加内容，这是一个思路。
另一个思路就是可以进行对原来文章中的指定超链接进行修改，从而进行钓鱼。
还有一个思路，就是利用WordPress文章中解析html以及JavaScript文件包含的做法，辅助其他方法，进行攻击。
**0x03 diff比较**
对于该漏洞，关键的修改在/wp-includes/class-wp-post.php中：
更改了对于$post_id的参数的传入顺序和判断条件，防止了我们传入数字+字母这样的格式进行绕过。
**0x04 修补方案**
将WordPress更新到最新版本。
**0x05 参考链接**
[https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html](https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html)