String[] hostAndPort = args[0] -split (*:“);
String host = hostAndPort[0]:
// if port blank assume 443
int port = (hostAndPort.length "= 1) ? 443 : Integer
parseInt (hostAndPort [1]) 
224
---
## Page 243
第7章网络安全
try1
CalcPins calc = new CalcPins() :
calc,fetchAndPrintPinHashs (host, port) 
}catch (Exception e)(
e-printStackTrace ();
}9sto[
System,out ,println (*Usage: java CalcPins [:port]*);
return,
2.接下来，我们定义PublicKeyExtractingTrustManager 类，它实际上是用来提
取公钥的。在建立socket连接时（下一步中予以说明）将会调用
checkServerTrusted 方法，并把完整的X509Certificates 证书链作为参数传递
给它。这样我们会获得整个证书链（用一个X509Certificate[数组表示），针
对其中每个公钥，都会调用一次cert.getPublicKeyO.getEncodedO，并由此得
到一个表示该公钥的byte数组。
然后，使用MessageDigest 类来计算密钥的 SHA1hash。因为这只是一个简单
的控制台应用程序，我们把 SHA1hash 输出到 System.out中。
pub1ic class Pub1icKeyExtractingTrustManager implement.8
X509TrustManager (
public X509Certificate[]getAcceptedIssuers ()(
throv new UnsupportedOperationException () 
pub1ic void checkClientTrusted (X509Certiflcate[] chain, String
authType)
throws CertificateException (
throv nev UnsupportedOperationExcept.ion ()
public void checkServerTrusted (x509Certificate[] chain, String
authType)
throws CertificateException (
for (x509Certificate cert : chain) {
byte[] pubKey = cert ,getPub1icKey () -getEncoded () 
final byte[1 hash = digest, digest (pubKey) :
Systen out -printIn (bytesTolex (hash) ) ;
225
---
## Page 244
Android安全攻防实战
3.然后，我们写一个bytesToHexO方法，其中代码如下所示。
public static String bytesToex(byte [] bytes)(
final char[] hexArray -(*o*, *1*, *2', '3', *4', '5′,
6°，7，8,9，*A,′B′,C，D，E,F ）;
char[] hexChars = nev char [bytes .lengt.h • 2]
for (int ) - 0; ) >> 4];
hexChars[3 * 2 + 1] - hexArray[v & 0x0F]
return new String(hexChars) 
在打印到System.out前，我们用这个方法将字节数组转换成大写的十六进制
字符串，这样，在编写我们的Android app时就能直接使用这些hash了。
4.最后，我们用main 方法传来的目标主机和端口，打开一个连到目标主机上
的 SSLSocket 连接。
private void fetchAndPrintPinllashs (String host, int port) throv8
Exception {
SSLContext context = SSLContext,getInstance (*TLS") ;
Pub1icKeyExtractingTrustManager tm = new
PublieKeyExtractingTrustManager () :
context.Init (null, new TrustManager[1 ( tm ), nu11) 
 () Axooeg4axoogo6 *4xaquoo  Kxooeg Kxoeg4axo09199
SSLSocket socket = (SSLSocket)
factory.createSocket (host, port) 
socket ,startHandshake () :
socket.setSoTimeout (10000) :
socket.close ()
我们用 SSLContext对象初始化我们编写PublicKeyExtractingTrustManager 类，
它将依次将每个证书的公钥hash打印到控制台上，以便我们把这些hash写
入 Android app-
5.在终端窗口中，用 javac 编译CalcPins.java，然后，用hostname:port 作为命
令行参数，运行这个命令。在这个例子中我们把Android.com作为示例主机。
$ javac CalcPins java
$ java -cp . CalcPins Android.com:443
226
---
## Page 245
第7章网络安全
此外，你可能会觉得：在你的 IDE中，用CalcPinsjava创建一个简单的Java
项目，并将其导出为一个可以直接运行的jar文件，使用起来会更方便些。
生成一个可以直接运行的jar文件的终端命令如下所示。
$ java -jar calcpins.jar android.com:443
如果公钥提取成功，你会看到hash 输出。这个样本输出显示Android.com
主机上有三个需设为受信任的 SSL证书公钥（pin 码）。
B3A3B5195E7C0D39B8FA68D41A64780F79FD4EE9
43DAD630EE53F8A980CA6EFD85F46AA37990E0EA
C07A98688D89FBAB05640C117DAA7D65B8CACC4E
现在我们继续进行实验的第二个部分：在Androidapp项目中验证SSL链接。
6.现在我们已经有了pin码，接下来要把它们从终端中复制出来并写到一个字
符串数组中去。
private static String[] pins = nev String[] {
“43DAD630&E53F8A980CA6EFD85F46AA37990E0EA*,
"B3A3B5195E7C0D39B8FA68D41A64780F79FD4EB9",
7.编写一个自定义的，用以验证这些pin 码的 TrustManager 类。
pub1ic class PubKeyPinningTrustManager implements X509TrustXanager
private fLnal Stxing[] mPLns;
private final MessageDigest mDigest;
pub1ic PubKeyPinningTrustManagez (String[1 pins)
throws GeneralSecurityException (
this,mPIns = pins;
mDigest = MessageDigest .getInstance (*SHA1") :
BOverr.de
public void checkServerTrusted (x509Certificate[] chain, String
authType)
throus CertificateException {
//valldate al1 the pins
for (X509Certificate cert : chain)(
final boolean expected - validateCertificatePin (cert) :
① Android 的开机图形锁，开机口令，也是把图形或口令转换成hash 存放在本机中的，也被称为
pin码。译者注
227
---
## Page 246
Android安全攻防实战
i.f (!expected) (
throw new CertificateExoeption(*could not find a valid
pin*);
BOverr1de
public void checkClientTrusted (X509Certificate[] chain, String
(adzqgne
throws CertificateException {
poqueeerdurT qou sT sTua os pue xeszes eta peqepttea ere en //
thxow new CextificateException (*Cilent valdation not
1mplemented*) /
BOverride
public X509Certificate[]  getAcceptedIssvers ()[
return nu11J
PubKeyPinningTrustManager 的构造方法需要把pin码数组作为参数传递进
米，用于内部验证。此外，这个构造方法中还会创建一个MessageDigest类
的实例，用以生成传入的 SSL证书公钥的 SHA1hash。请注意：在这个例子
里，我们没有实现checkClientTrustedO或 gctAcceptedIssuersO方法，参见“改
进方案”一节，
8.验证证书。
private boolean validateCertificatePin (x509Certificate
certiflcate)
throws CertificateExceptlon(
final byte[1 pubKeyInfo = certificate,getPublicKey () -
get&ncoded () :
flnal byte [] pi.n = mDigest ,digest (pubKeyInfo) :
final String pinAsfex = bytesTolex (pin) 
for (String validPin : mPins)(
if (validPin,equalsIgnoreCase (pinAsHex) ){
return true:
return false,
我们提取了公钥，计算了它的SHA1hash，然后像上面讲过的那样，用
228
---
## Page 247
第7章网络安全
bytesToHexO方法将其转换成十六进制字符串，验证过程接下来就归结成了
一个简单的 String.isEquals 操作（在实际编程时，我们改用了equalsIgnoreCaseO
方法，以防止出现只是因为大小写不一致而导致程序认为它们是两个不同的
hash 的情况）。如果证书的pin 码配不上之前写入的任何一个pin 码，就会抛
出一个CertificateException异常，连接也将不被允许。
9.我们可以效仿本章之前讨论过的LocalTrustStoreTrustManager 类，把所有的
操作都集成到PubKeyPinningTrustManager 类中。下面就是如何在
HttpsURLConnection使用它的例子。
TrustManager[] trustManagers = nev TrustManager[] ( new
PubKeyPinningTrustManager (pins) 1
SSLContext ss1Context - SSLContext getInstance (*TLS") ;
ss1Context.init (null, trustManagers, nu11) /
HttpsURLConnection ur1Connection = (HttpsURLConnection)
ur1 openConnection () 
ur1Connection,setSSLSocketFactory (
ss1Context . getSocketFactory ()):
ur1Connection, connect () 
总之，我们提取证书公钥，生成其SHAIhash，并将其写到我们的app中。在运
行时用这些hash 去验证 SSL连接中的 SSL证书的公钥是否可信。这不仅可以保护
app免受其他CA被黑事件的波及，也能使中间人（MITM）攻击更加难以进行。最
为重要的是：我们是以严格的方式，使用工业标准的SSL基础设施的。
进一步说明
了解这一实验可改进的地方和它的局限所在是非常重要的。
改进方案
为了获得最大的安全性，每次连接服务器的时候，你都应该验证一下SSLpin码。
不过每次连接时都这样做一下肯定会对性能有一定影响。因此，你必需改造前面的
代码，只在每次会话的第一次握手时进行检查。这显然也兼顾了安全性。此外，如
果再加上 Android 默认的 trust manager 的验证，还能再进一步增加安全性。由
MoxieMarlinspike 编写的，名为AndroidPinning 的开源库就是这样一个增强版的实
现。你也可以把hash算法改为更强版本的SHA。
validatcCertificatePinO方法是个理想的，用DexGuard’'sAPI予以隐藏保护的对象，
我们在第5章“保护app”中介绍过这一方法。
229
---
## Page 248
Android安全攻防实战
局限性
尽管SSLpinning，会使中间人（MITM）攻击变得更为困难，但它还不是一个万
无一失的解决方案（没有哪个安全方案是万无一失的）。iSECPartners里有一个很有意
思的库，就是专为搞定SSLpinning 而写的（https://github.com/iSECPartners/
android-ssl-bypass ) .
但是，第5章保护app中的那个防止程序被修改的实验，可以用来防止.apk文件
遭到修改和在模拟器上运行。
拓展阅读
·了解更多关于中间人攻击的内容请至：https://www.owasp.org/index.php/
Man-in-the-middle_attack。
°OpenSSL命令行使用方法指南。位于http:/www.madboa.com/gceck/openssl/.
。OWASP证书及限定受信公钥指南，位于https://www.owasp.org/index.php/
Certificate_and_Public_Key_Pinning-
·AndroidPinning 项目，Moxie Marlinspike 编写的开源 pinning 库，位于：
https:/github.com/moxie0/AndroidPinning。
●Google Chrome 如何使用 pin 码，在 https:/www.imperialviolet.org/2011/05/04/
pinning.html处会有详解。
230
---
## Page 249
第8章原生代码中漏洞的利用与分析
在这一章里，我们将进行以下实验：
·检查文件的权限；
·交叉编译原生可执行程序：
·竞争条件类漏洞的利用：
·溢出漏洞的利用：
·自动进行Android原生代码的fuzzing测试。
8.1简介
迄今为止，我们已经从绝大多数的高级视角讨论了Android平台上的app。这一
章里，我们将把重点转向原生代码（native）一即支持应用层组件的所有事物。这
些原生代码包括：系统守护进程、专为指定系统架构编译的二进制可执行文件以及
文件系统组件和设备级配置。以任何一个视角看待Android系统，都能发现一些安全
漏洞并能导致Android设备—特别是智能手机—被root。因此要在Android系统
上做一个彻底的安全检查就不能忽视它们中的任何一个。
本章还将介绍一些简单易学的基本内存溢出类漏洞的利用技巧。但是，请注意：
这一章里并没有涵盖所有已知的内存溢出漏洞的利用模式和技巧。不过，本章中所
本章还为那些愿意尝试一题多解的读者介绍了一些好文章和其他技术信息来源。
为什么要研究原生代码中漏洞的利用技术呢？嗯…，你还有什么别的方法root
你的手机吗？root技术的原理，一般都是通过滥用Android设备里原生代码中的漏洞
完成提取操作，使得我们能永久性地访问Android设备上的root（或称超级用户）账
户。当然，root在为用户随心所欲地定制自己的Android设备提供了方便的同时，也
---
## Page 250
Android安全攻防实战
为恶意软件和远程攻击打开了方便之门。所以不难理解，为什么在你的手机上留一
个能让他人获取超级用户权限的漏洞是一个多么糟糕的主意！因此，每一位称职的
手机安全审计员都应该能识别出任何可能导致这一间题的漏洞。
8.2检查文件的权限
滥用操作系统在设置文件系统权限（或访问权限）上的差异和不足，是本地提
权的最常见方式之一。无数个漏洞和许多提权攻击方式中溢用了文件的权限。比如
用 su 或 symlink在一个有漏洞的全局可执行的二进制可执行文件上设置 setuid 位，
或者像CVE-2009-1894pulseaudio漏洞那样，对一个全局可读/写的，超级用户拥有
的应用程序执行竞争条件攻击。
定义Android原生系统的受攻击面时，明确地识别出文件系统中所有可能会成为
攻击点的文件是一个良好的开端。这一节的练习中，会详解一些，通过ADBshell
与设备进行交互，找出可能会被利用的，危险的或可能构成危险的文件的方法。
由于以下教程的重点是教你如何寻找权限设置不正确或有问题的文件的具体方
法，所以为了明白为什么要执行这些指令，你需要理解Linux或基于UNIX的操作系
统是怎样定义权限的这一基本技能。小注脚：在一些Linux圈子里，常常也把文件和