Xperia SL
Total
3
15
26
40
8
Post-2012 devices
AOSP app 1
# of vulnerabilities
vendor app
third-party app
2
12
17
20
6
1
2
9
12
1
0
1
0
8
1
This category contains apps that exist in the AOSP and may (or may not) be customized by the vendor – Section 2.1.
1
n
o
i
t
u
l
o
v
e
s
e
i
t
i
l
i
b
a
r
e
n
l
u
v
f
o
%
Inherited
Introduced
  70%
  60%
  50%
  40%
  30%
  20%
  10%
  0%
s
e
i
t
i
l
i
b
a
r
e
n
l
u
v
p
p
a
−
s
s
o
r
c
f
o
%
  14%
  12%
  10%
  8%
  6%
  4%
  2%
  0%
N
exus S
N
exus 4
Wildfire S
O
ne X
O
ptim
O
ptim
us P350
us P880
G
G
alaxy S2
alaxy S3
X
X
peria Arc S
peria S
L
Figure 5: Distribution of cross-app vulnerabilities
conﬁrmed, other vendors have still not spoken with us even after
several months. Among the detected vulnerabilities, we believe
cross-app ones are the most challenging to detect. Figure 5 gives
the percentage of cross-app vulnerabilities. On average, 8.90% vul-
nerabilities are of this type. In the following, we describe some
speciﬁc vulnerabilities introduced due to vendor customizations.
3.3.1 Case Study: Samsung Galaxy S3
In the Samsung Galaxy S3, there is a pre-loaded app named
Keystring_misc. This particular app has a protected component
PhoneUtilReceiver that leads to a dangerous path for performing
a factory reset, thus erasing all user data on the device. This path
ends in the phoneReset method, which will broadcast an intent
android.intent.action.MASTER_CLEAR to perform the operation.
At ﬁrst sight, this path seems to be safe because this component is
protected by the com.sec.android.app.phoneutil.permission.-
KEYSTRING permission, which is deﬁned with the restrictive syste-
mOrSignature protection level (i.e., only other ﬁrmware apps, or
apps from Samsung, can invoke it).
Unfortunately, there exists another app named FactoryTest that
contains a feasible path which is able to start up this very com-
ponent in the Keystring_misc app. This arrangement is an exam-
ple of a cross-app vulnerable path, which can be used to launch
a reﬂection attack (Figure 6). Speciﬁcally, this app exports a ser-
vice called FtClient without any protection. After being launched,
the service will start a thread and then try to build connections
with two hard-coded local socket addresses: FactoryClientRecv
and FactoryClientSend. The established connections can be ex-
ploited to send commands through the ﬁrst socket. Our manual
investigation shows that there are many dangerous operations that
can be triggered by this exploit, including MASTER_CLEAR, REBOOT,
SHUTDOWN and SEND_SMS.
In our study, we also discover a number of other vulnerabilities.
For example, there are four content providers in the sCloudBackup-
Provider app (with the package name of com.sec.android.sCloud
BackupProvider). They expose access interfaces to speciﬁc databases,
including calllogs.db, sms.db, mms.db and settings.db. Each
of them is protected by two permissions, but with normal (non-
sensitive) protection levels. Apparently, they are accessible to any
One X
Optimus P880
Galaxy S3
Xperia SL
Figure 4: Vendor-speciﬁc vulnerability evolution
only 37.50% of vulnerabilities were caused by vendor customiza-
tions. In fact, one of Sony’s modiﬁcations to the AOSP actually
mitigated a pre-existing bug in it.
We can also apply vertical differential analysis to this data, and
therefore look at the evolution of vulnerabilities over time. The
post-2012 devices may have inherited some vulnerabilities that were
never caught during the lifetime of the pre-2012 devices, as they
often have code in common with earlier devices by the same man-
ufacturer6; alternatively, they may have introduced new vulnerabil-
ities in their new and altered features. Figure 4 depicts this evo-
lutionary information, which varies wildly in proportion between
different vendors. For example, for the HTC One X, about 60.00%
of its vulnerabilities were inherited from the previous device, while
the Samsung Galaxy S3 has more introduced vulnerabilities than
inherited ones (47.50% vs. 35.00%).
Table 6: Classiﬁcation of detected vulnerabilities
Name
CALL_PRIVILEGED
Description
Initiate a phone call (including emergency
number) without requiring conﬁrmation
MASTER_CLEAR Wipe out user data and factory reset
REBOOT
RECORD_AUDIO
SEND_SMS
SHUTDOWN
WRITE_SMS
OTHER
Reboot the device
Allows an application to record audio.
Allows an application to send SMS messages.
Power off the device
Allows an application to write SMS messages
All the other dangerous/critical operations
No treatment of this topic would be complete without discussing
the distribution of vulnerabilities that we found. Table 6 lists the
vulnerabilities we focus on. We use the names of permission to
represent the most common (i.e., shared by devices of different
vendors) vulnerabilities for permission re-delegation attacks with
explicit permission names, and use OTHER to represent all other vul-
nerabilities (including both types of studied vulnerabilities). Note
that vulnerabilities belong to OTHER do not mean they are not crit-
ical, and the only reason is that they are more vendor- and model-
speciﬁc. Table 7 lists the distribution of these vulnerabilities.
With these detected vulnerabilities, we have attempted to contact
the corresponding vendors. While some of them have already been
6The relationship between each pair of devices may be not di-
rect (i.e., predecessor and successor), but we can still regard these
vulnerabilities as an inheritance because they are vendor-speciﬁc.
630Name
CALL_PRIVILEGED
MASTER_CLEAR
REBOOT
RECORD_AUDIO
SEND_SMS
SHUTDOWN
WRITE_SMS
OTHER
Total
Table 7: Distribution of vulnerabilities among examined devices
# of vulnerabilities
Google
HTC
LG
Samsung
Sony
Nexus S
Nexus 4 Wildﬁre S
One X
P350
P880
Galaxy S2
Galaxy S3
Xperia Arc S
Xperia SL
1
0
0
0
3
0
2
2
8
0
0
0
0
2
0
0
1
3
2
1
0
1
6
0
5
25
40
1
0
0
0
3
0
6
5
1
0
0
0
4
0
3
9
15
17
3
0
1
1
4
0
3
14
26
2
3
4
1
7
0
4
18
39
4
2
4
1
7
1
4
17
40
1
0
0
0
3
0
2
2
8
1
0
0
0
3
0
2
2
8
FactoryTest
com.sec.factory.aporiented.FtClient
void onCreate()
ConnectionThread
void run()
com.sec.factory.aporiented.AtParser
void process(String,ResponseWriter)
com.sec.factory.aporiented.athandler.AtFactorst
java.lang.String handleCommand(java.lang.String[])
void DoFactoryReset()
Keystring_misc
com.sec.android.app.phoneutil.PhoneUtilReceiver
void onReceive(android.content.Context,android.content.Intent)
void DoFactoryReset(android.content.Context)
com.sec.android.app.sysdump.FactoryReset
void onCreate(Bundle)
void startFactoryReset()
void phoneReset()
Figure 6: An example path of reﬂection attack
third-party app. Also, notice that this app exports four receivers
without any protection, and it is able to craft speciﬁc intents that
trigger corresponding backup actions to save various private infor-
mation into these databases (e.g., standard SMS messages stored in
mmssms.db will be copied into sms.db). After that, any app can
simply retrieve these sensitive information (e.g., SMS messages
and contacts information) through the corresponding four content
providers without acquiring any sensitive permission.
3.3.2 Case Study: LG Optimus P880
The LG Optimus P880 has a number of vulnerabilities; here, we
will detail two of them, leading to a permission re-delegation at-
tack and a content leak respectively. However, unlike the Samsung
vulnerabilities, neither of the ones we will describe are reﬂection
attacks, making them easier to detect, describe, and exploit.
The ﬁrst one is related to REBOOT, a permission reserved for sys-
tem or pre-loaded apps. In the LG Optimus P880, there is an app
named LGSettings, which is a customized version of the AOSP Set-
tings app. This particular app exports an activity com.android.-
settings.Reboot (completely without permission protection). This
activity will be triggered if an android.intent.action.MAIN intent
is received, and its invocation will simply reboot the device directly.
Note that the AOSP does not have the corresponding vulnerable
component.
The second one is a rather direct content leak vulnerability. The
com.lge.providers.lgemail content provider in the LGEmail app
is not protected, and therefore exposes access to the EMAIL.db, a
database that contains three tables named EAccount, EMessageBox
and EMessage. These tables are very sensitive, as through them, all
account and message related information (including message con-
tents) can be exposed. Note that this app is customized from the
AOSP Email app; however, in the AOSP, the corresponding con-
tent provider is protected by a permission named com.android.-
email.permission.ACCESS_PROVIDER with the systemOrSignature
protection level. Therefore, LG’s customization here adds a vulner-
ability to an otherwise-secure AOSP app.
4. DISCUSSION
While collecting the data for our evaluation, we saw some indi-
rect evidence of software development policies in place at the var-
ious vendors. This evidence may be anecdotal, but we feel it is in-
teresting enough to warrant mention. For example, Sony’s standout
performance does not appear to be accidental; in both their devices
that we studied, the eventstream content provider (which was im-
plemented as an SQLite database, as many are) actually had explicit
checks for SQL injection attacks. Furthermore, Sony’s customized
version of the AOSP Mms app actually mitigated problems found
in the unaltered problem. Similarly, as we remarked in Section 2.3,
HTC made considerable progress between the release of the HTC
Wildﬁre S and the One X, possibly due to early exposure of a large
proportion of security vulnerabilities in earlier HTC’s devices [39]
and the efforts made by the corporation to take security to heart
ever since. The One X makes extensive use of custom permissions
to prevent further vulnerabilities from creeping into its ﬁrmware –
a relatively straightforward approach to take, yet an effective one,
as shown by our vulnerability analysis.