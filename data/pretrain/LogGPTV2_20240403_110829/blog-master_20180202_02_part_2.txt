postgres=# explain select a.* from a join b on (a.id=b.bid);  
                               QUERY PLAN                                  
-------------------------------------------------------------------------  
 Merge Join  (cost=873.67..3060.30 rows=144075 width=44)  
   Merge Cond: (b0.bid = a0.id)  
   ->  Sort  (cost=415.07..427.82 rows=5100 width=4)  
         Sort Key: b0.bid  
         ->  Append  (cost=0.00..101.00 rows=5100 width=4)  
               ->  Seq Scan on b0  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b1  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b2  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b3  (cost=0.00..20.20 rows=1020 width=4)  
               ->  Seq Scan on b4  (cost=0.00..20.20 rows=1020 width=4)  
   ->  Sort  (cost=458.61..472.73 rows=5650 width=44)  
         Sort Key: a0.id  
         ->  Append  (cost=0.00..106.50 rows=5650 width=44)  
               ->  Seq Scan on a0  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a1  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a2  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a3  (cost=0.00..21.30 rows=1130 width=44)  
               ->  Seq Scan on a4  (cost=0.00..21.30 rows=1130 width=44)  
(18 rows)  
```  
## LIST分区智能JOIN例子  
1、创建两个结构一样的测试分区表  
```  
CREATE TABLE aa (  
    city_id      bigserial not null,  
    name         text not null,  
    population   bigint  
) PARTITION BY LIST (left(lower(name), 1));  
CREATE TABLE aa0  
    PARTITION OF aa (  
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)  
) FOR VALUES IN ('a', 'b');  
CREATE TABLE aa1  
    PARTITION OF aa (  
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)  
) FOR VALUES IN ('c', 'd');  
```  
```  
CREATE TABLE bb (  
    city_id      bigserial not null,  
    name         text not null,  
    population   bigint  
) PARTITION BY LIST (left(lower(name), 1));  
CREATE TABLE bb0  
    PARTITION OF bb (  
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)  
) FOR VALUES IN ('a', 'b');  
CREATE TABLE bb1  
    PARTITION OF bb (  
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)  
) FOR VALUES IN ('c', 'd');  
```  
2、使用了并行分区JOIN  
```  
postgres=# explain select aa.* from aa join bb on (left(lower(aa.name), 1)=left(lower(bb.name), 1));  
                                    QUERY PLAN                                       
-----------------------------------------------------------------------------------  
 Append  (cost=149.08..616.51 rows=11448 width=48)  
   ->  Merge Join  (cost=149.08..308.25 rows=5724 width=48)  
         Merge Cond: (("left"(lower(aa0.name), 1)) = ("left"(lower(bb0.name), 1)))  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=48)  
               Sort Key: ("left"(lower(aa0.name), 1))  
               ->  Seq Scan on aa0  (cost=0.00..20.70 rows=1070 width=48)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=32)  
               Sort Key: ("left"(lower(bb0.name), 1))  
               ->  Seq Scan on bb0  (cost=0.00..20.70 rows=1070 width=32)  
   ->  Merge Join  (cost=149.08..308.25 rows=5724 width=48)  
         Merge Cond: (("left"(lower(aa1.name), 1)) = ("left"(lower(bb1.name), 1)))  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=48)  
               Sort Key: ("left"(lower(aa1.name), 1))  
               ->  Seq Scan on aa1  (cost=0.00..20.70 rows=1070 width=48)  
         ->  Sort  (cost=74.54..77.21 rows=1070 width=32)  
               Sort Key: ("left"(lower(bb1.name), 1))  
               ->  Seq Scan on bb1  (cost=0.00..20.70 rows=1070 width=32)  
(17 rows)  
```  
3、当结构不一致时，不会使用并行分区JOIN  
```  
CREATE TABLE aa2  
    PARTITION OF aa (  
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)  
) FOR VALUES IN ('e', 'f', 'g');  
CREATE TABLE bb2  
    PARTITION OF bb (  
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)  
) FOR VALUES IN ('e', 'f');  
postgres=# explain select aa.* from aa join bb on (left(lower(aa.name), 1)=left(lower(bb.name), 1));  
                                   QUERY PLAN                                     
--------------------------------------------------------------------------------  
 Merge Join  (cost=498.11..1834.26 rows=51520 width=48)  
   Merge Cond: (("left"(lower(aa0.name), 1)) = ("left"(lower(bb0.name), 1)))  
   ->  Sort  (cost=249.06..257.08 rows=3210 width=48)  
         Sort Key: ("left"(lower(aa0.name), 1))  
         ->  Result  (cost=0.00..62.10 rows=3210 width=48)  
               ->  Append  (cost=0.00..62.10 rows=3210 width=48)  
                     ->  Seq Scan on aa0  (cost=0.00..20.70 rows=1070 width=48)  
                     ->  Seq Scan on aa1  (cost=0.00..20.70 rows=1070 width=48)  
                     ->  Seq Scan on aa2  (cost=0.00..20.70 rows=1070 width=48)  
   ->  Sort  (cost=249.06..257.08 rows=3210 width=32)  
         Sort Key: ("left"(lower(bb0.name), 1))  
         ->  Result  (cost=0.00..62.10 rows=3210 width=32)  
               ->  Append  (cost=0.00..62.10 rows=3210 width=32)  
                     ->  Seq Scan on bb0  (cost=0.00..20.70 rows=1070 width=32)  
                     ->  Seq Scan on bb1  (cost=0.00..20.70 rows=1070 width=32)  
                     ->  Seq Scan on bb2  (cost=0.00..20.70 rows=1070 width=32)  
(16 rows)  
```  
## HASH分区智能JOIN例子  
1、创建HASH分区表  
```  
CREATE TABLE aaa (  
    order_id     bigint not null,  
    cust_id      bigint not null,  
    status       text  
) PARTITION BY HASH (order_id);  
CREATE TABLE aaa0 PARTITION OF aaa  
    FOR VALUES WITH (MODULUS 4, REMAINDER 0);  
CREATE TABLE aaa1 PARTITION OF aaa  
    FOR VALUES WITH (MODULUS 4, REMAINDER 1);  
CREATE TABLE aaa2 PARTITION OF aaa  
    FOR VALUES WITH (MODULUS 4, REMAINDER 2);  
CREATE TABLE aaa3 PARTITION OF aaa  
    FOR VALUES WITH (MODULUS 4, REMAINDER 3);  
```  
```  
CREATE TABLE bbb (  
    order_id     bigint not null,  
    cust_id      bigint not null,  
    status       text  
) PARTITION BY HASH (order_id);  
CREATE TABLE bbb0 PARTITION OF bbb  
    FOR VALUES WITH (MODULUS 4, REMAINDER 0);  
CREATE TABLE bbb1 PARTITION OF bbb  
    FOR VALUES WITH (MODULUS 4, REMAINDER 1);  
CREATE TABLE bbb2 PARTITION OF bbb  
    FOR VALUES WITH (MODULUS 4, REMAINDER 2);  
CREATE TABLE bbb3 PARTITION OF bbb  
    FOR VALUES WITH (MODULUS 4, REMAINDER 3);  
```  
2、当结构一样时，会使用分区并行JOIN  
```  
postgres=#  explain select aaa.* from aaa join bbb on (aaa.order_id = bbb.order_id);  
                                QUERY PLAN                                   
---------------------------------------------------------------------------  