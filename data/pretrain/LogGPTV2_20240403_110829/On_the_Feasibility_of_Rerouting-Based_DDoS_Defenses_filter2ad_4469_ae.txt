her bots (or compromised ASes) to the destination AS. When
a poisoning BGP UPDATE message arrives at a compromised
AS, the adversary does not directly see the message. Yet, the
adversary can detect the sudden changes in proactive route
measurements from the bots. Note that traceroute mea-
surement is highly effective for end-to-end route investigation
because the majority of transit ISPs do allow traceroute
measurements [20].
Ideally, the adversary may want to infer the full detour path
from C to D. Then, with the full detour path, the adversary
picks any link on the detour path to be the next target-link.
However, each AS-level path measured by a bot may provide
only some partial views of the detour path but no single
path measurement gives the full detour path.5 Achieving the
accurate next target-link on the detour path thus turns out to
be non-trivial and easily error prone. Figure 12 illustrates the
challenges of the choice of the correct new target link.6 As
a na¬®ƒ±ve approach, the adversary may pick the most popular
link from all compromised-to-destination route measurements
to be the next target link (e.g., link (E-Y )). However, this
does not guarantee the correct choice of the next target-link
because each measurement has a different partial view of the
detour path and thus the most popular link may happen to be
the one that is not on the detour path. In Figure 12, there are
more compromised-to-destination routes crossing the link (E-
Y ) than the link (Y -X) because AS E connects with more
compromised ASes.
We propose a simple distance-based target-link selection
algorithm to choose the link that is on the detour path. Our al-
gorithm prefers the compromised-to-destination measurement
that is made closer to the critical AS. We use the BGP path
length between the compromised ASes and critical AS (see
the BGP routing policy used in Section IV-A) as the distance
metric. Our intuition is that the ASes in the close proximity
may share similar AS paths to a destination AS. For example,
5Unless an adversary has bots in the critical AS C.
6Notice that the adversary would not pick the links that directly connect
to the destination AS (e.g., link (Y -D)) because such attack becomes a
traditional, direct server Ô¨Çooding attack that can be immediately detected and
mitigated via traditional server-based solutions (e.g., scrubbing and Ô¨Åltering).
(cid:18)(cid:18)(cid:24)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:09 UTC from IEEE Xplore.  Restrictions apply. 
F
D
C
1
0.8
0.6
0.4
0.2
0
Mirai
Mirai-5K
Mirai-1K
101
102
103
104
105
Number of compromised ASes 
       that observe path leakage
1
0.8
0.6
0.4
0.2
0
Mirai
Mirai-5K
Mirai-1K
101 102 103 104 105 106 107
Number of Mirai botnet traffic flows 
      that include the target link
(a)
(b)
Figure 13: Effectiveness of the detour-learning attack. (a)
Distribution of the number of compromised ASes that observe
path leakage. (b) Distribution of the number of default paths
from a compromised AS to any other AS that contain the target
link.
in Figure 12, I is closer to C than F , J and H in terms
of BGP path length and its compromised-to-destination route
shares more common links with the detour path (see the thicker
traceroute measurement in red dashed line from I).
Evaluation of the detour-learning attack. We now evaluate
the effectiveness of the detour-learning link Ô¨Çooding attack
against the RAC defense. In our evaluation, we consider the
Mirai botnet [15] as a real DDoS botnet to model the ASes
that host compromised bots. The Mirai botnet is distributed
in 11K ASes [8], representing a large-size DDoS botnet. To
model small to mid-size botnets, we artiÔ¨Åcially create two
more botnets by random sampling Mirai botnets: Mirai-1K
and Mirai-5K botnet models have 1K and 5K compromised
ASes, respectively.
1. Detection of detour path establishment. We evaluate the de-
tection of the detour establishment by counting the number
of compromised ASes in three botnet sets that receive the
BGP poisoning message. We assume the RAC defender
uses the greedy algorithm as proposed in Section V-B to
minimize the path leakage.
Figure 13a shows the distribution of the results in 1,000
cases. As we see from the Figure 13a, even with the botnet
set including only 1,000 and 5,000 compromised ASes, the
adversary is able to observe the path leakage in 96.0% and
99.0% of the cases, respectively. When the adversary gains
control of the full Mirai botnet, she always sees the RAC
operation in real-time, as there is at least one compromised
AS receiving the BGP poisoning message.
2. Accuracy of target-link selection algorithm. We show that
our distance-based target-link selection algorithm chooses
the next target-link on the detour path with high accuracy.
The target-link selection is said to be successful when there
exists some compromised ASes observing the BGP poison-
ing message (hence detecting the detour path change) and
the selected link is indeed on the detour path. The algorithm
is evaluated with three mentioned botnet dataset, i.e., Mirai,
Mirai-5K and Mirai-1K.
The success rate of selecting the correct next target-link
are 94.1%, 86.4% and 79.2% with the Mirai, Mirai-5K,
and Mirai-1K, respectively. Even the adversary with 1K
compromised ASes can Ô¨Ånd the correct next target-link
accurately in the majority of cases.
3. Link-Ô¨Çooding attack using botnet dataset. Additionally, we
.(








.+








.)






.,



















	


!
"
#
$

  
 
  
 
 
 
 

 
.*








.-

















		
Figure 14: An example of how path hunting occurs with BGP
message withdrawal. Assume that each BGP message prop-
agates one hop per unit time, the withdrawal message takes
4 units (T=2,3,4,5) to be converged while the advertisement
takes only 2 units (T=0,1).
would like to conÔ¨Årm if the correctly selected next target-
links from the experiments with the three Mirai botnet sets
(941, 864 and 792 links from Mirai, Mirai-5K, Mirai-1K
sets, respectively) can be indeed targeted and Ô¨Çooded by
link-Ô¨Çooding attacks with the Mirai botnet trafÔ¨Åc.
Figure 13b shows that in Mirai, Mirai-5K, Mirai-1K sets,
there are 94.69%, 93.17% and 90.4% of the selected target-
links are included in one or more Mirai botnet Ô¨Çows,
respectively. Moreover, even when the adversary controls
the vast majority (> 83%) of the
only 1,000 botnets,
next
link targets would have more than hundred (and
easily several thousand) AS-level attack Ô¨Çows. Thus, the
adversary can easily generate large numbers of legitimate-
looking attack Ô¨Çows while congesting the next link target.
B. Slow Reaction of RAC Defense against Adaptive Attacks
To react against adaptive transit-link Ô¨Çooding attacks, the
RAC defense may change the detour path nearly instantly
whenever it observes congestion. However, as we show in
the following evaluation, the RAC mechanism inÔ¨Çicts a long
waiting time to switch to a new detour path (e.g., 85 seconds
in even small topology size of 1,000 ASes). The main reason
is that, before the RAC deployer can establish a new detour
path, it is required to undo any changes made by its old
BGP poisoning messages with the hole-punching preÔ¨Åxes.
However, because the BGP poisoning message is leaked to
multiple non-critical ASes, withdrawal messages in RAC suffer
from the BGP path hunting problem [1], [19] and thus their
convergences are signiÔ¨Åcantly delayed. The chasm between
such a slow reaction of the route changes and the fast-moving
attacks makes the RAC defense nearly unusable in practice.
Path hunting and slow convergence. Path hunting is a
well-known problem to BGP, which refers to a phenomenon
where the withdrawal of a preÔ¨Åx causes other ASes to keep
exploring for a route to reach that preÔ¨Åx until knowing all
routes are invalid. In BGP, an AS selects the best path among
(cid:18)(cid:18)(cid:24)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:09 UTC from IEEE Xplore.  Restrictions apply. 
all paths advertised by its neighbors, which are kept in its
routing table 7. A new best path is re-computed and propagated
whenever the routing table is changed. When the best path for
a preÔ¨Åx is withdrawn, the AS will select and propagate the
second best path found on its current routing table; however,
this second best path might also be invalid (in the sense
that it also depends on the withdrawn preÔ¨Åx) but yet to be
withdrawn, because the withdrawal message takes longer to
traverse the second best path. Once the second best path is
again withdrawn, the AS has to explore the third best path
and so on.
Figure 14 illustrates an example of how the path hunting
occurs when AS A withdraws its preÔ¨Åx at T = 2. Consider
AS C at T = 3, because the best path {A} is withdrawn,
AS C propagates its second best path {B, A} to AS D,
not before it knows the path {B, A} is also withdrawn by
AS B. This process is iterated with all other ASes until all
possible paths from B, C, D, E to A are withdrawn, which
consumes 4 time units in total (e.g., T = 2, 3, 4, 5), assuming
messages propagate one hop per time unit. This convergence
is signiÔ¨Åcantly delayed, compared to the advertisement takes
only 2 time units (e.g., T = 0, 1).
Because a non-isolated detour path leaks BGP poisoning
messages to almost every AS in the Internet (see Section V-B),
there exist many possible paths from each AS to the destination
AS. Therefore, the withdrawal of a poisoning message will
inevitably encounter the path hunting problem, causing an
enormous number of update and withdrawal messages to be
propagated until the network is converged. Worse yet, path
hunting has a prolonged effect on RAC due to its use of hole
punching and BGP poisoning. That is, because BGP prefers
messages with hole-punching preÔ¨Åxes and shorter AS-path
lengths, an AS would keep hunting for paths that are advertised
by old RAC poisoning messages. Therefore, before a new RAC
poisoning message can take effect, the RAC defender must
completely and explicitly eradicate its old RAC poisoned paths
from every routing table of all ASes that have path leakage.
Evaluation of path hunting in RAC. To investigate the con-
vergence time when path hunting occurs in realistic settings,
we use SSFNet [13] and add BGP poisoning and hole punching
capabilities to it, instead of using the Chaos simulator because
SSFNet can faithfully simulates BGP message propagation and
processing based on RFCs. Such a Ô¨Åne-grained simulation is
resource-consuming and thus prevents SSFNet from scaling to
an Internet-size topology. To synthesize smaller-size realistic
network topology graphs, we use a topology generation tool
called BRITE [2] and adopt the Barab¬¥asi-Albert model to
generate a random scale-free network topology [16], which is
similar to the structure of the Internet [9]. We Ô¨Åx the number
of directional edges per node to be four according to CAIDA
AS relationships statistics [3].
In each simulation run, a randomly selected destination AS
will send a BGP poisoning message and then withdraw it. We
measure the convergence time of those BGP advertisement and
withdrawal messages, which is deÔ¨Åned as the time elapsed
since the message is Ô¨Åred until all routing tables reach a
stable state. Besides, we also consider other factors that may
7More speciÔ¨Åcally, a BGP speaker keeps its neighbors‚Äô advertisements in
the RIB-in tables in its Route Information Base (RIB).
Figure 15: Convergence time of withdrawal messages increases
signiÔ¨Åcantly with the topology size.
Figure 16: Convergence delay vs. MRAI value when RFD is
enabled or disabled.
inÔ¨Çuence BGP convergence, such as Route Flap Damping
(RFD) which is designed to suppress excessive path changes in
a short time [54] and Minimum Route Advertisement Interval
(MRAI) which deÔ¨Ånes the time that an AS should wait before
sending an update for the same preÔ¨Åx [49]. We consider the
recommended practice where RFD is disabled [41] and MRAI
is set to a small value, 0.5 seconds [25], [5], [11].8
Figure 15 shows the convergence time of withdrawal mes-
sages on topology graphs ranging from 50 to 1,000 ASes. Each
data point is computed over 10 randomly generated topology
graphs. We see that the convergence time grows up to about
85 seconds on the 1000-AS topology. On the other hand, the
convergence time of update messages are within 1.2‚Äì2.2s with
a mean of 1.6s and a standard deviation of 0.2s, regardless
of the topology size. These results conÔ¨Årm that RAC severely
suffers from the path hunting problem, and an 85-second delay
to establish a detour path is too slow to react to the detour-
learning adversary. Moreover, because the 85-second delay is
measured on a topology 60x smaller than the current Internet,
we speculate that reaction time of RAC could be much worse
in practice.
We also examine the convergence time of withdrawal
messages under various MRAI and RFD conÔ¨Ågurations. In
Figure 16, each data point is computed over 20 randomly
generated topology graphs, each of which has 500 ASes.
The simulation results conÔ¨Årm that the path hunting problem
persists regardless of the MRAI and RFD conÔ¨Ågurations: the
minimum convergence time when MRAI = 0.5s and RFD
is enabled is 21s. Although withdrawal messages converge
faster when RFD is enabled than disabled because RFD is
designed to prevent frequent path changes, enabling RFD will
exacerbate convergence delay of subsequent BGP poisoning
messages [41].
8We acknowledge that setting MRAI to zero can evaluate the optimal case
for the RAC defense, but simulation with MRAI = 0 is not supported in
SSFNet, and thus we set MRAI to a small value to ensure our simulation
completes within a reasonable timeout.
(cid:18)(cid:18)(cid:24)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:09 UTC from IEEE Xplore.  Restrictions apply. 
Table II: The measured and estimated number of ASes in the
sets that either allow or drop BGP UPDATE messages based
on their length.
A[30,255) A‚â•255
(A[30,255) \ A‚â•255)
(= D‚â•255)
Cardinality
654
156
498
VII. BEST-EFFORT DETOUR PATH ESTABLISHMENT FOR
DETOUR PATH ISOLATION
We have discussed,
in Section V and Section VI,