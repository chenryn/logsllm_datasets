Service 
Device handler 
Service 
Service 
Service 
Device handler 
Device driver 
Transmit buffer 
Transmit buffer 
Transmit buffer 
Device driver 
Device driver 
Hardware Abstraction Layer  
Receive buffer 
Receive buffer 
Receive buffer 
Mutex 
Mutex 
Mutex 
It is worth explaining that the last option exists for throttling purposes and why we need this. CAN buses can be pretty congested, meaning 
that CAN devices will be naturally throttled by the congestion and that the ID-based priority management mechanism will be essential in 
order for all messages to meet their deadlines. However, if we use CANSPY to separate a device from its CAN bus (see Figure 5 in section 
3.2 for a diagram of this situation), depending on the filtering rules, this device may have a less congested bus dedicated to itself, thus 
gaining the ability to transmit more frames that we can forward. Temporarily making CANSPY silent on the bus dedicated to the isolated 
device (i.e., no acknowledgement) will prevent that device from sending new CAN frames until the last received one has been properly 
forwarded on the other bus. It is also worth noting that this option is registered at handler level so that this throttling mechanism can be 
used by multiple services (i.e., forward and filter services). 
The device handler dedicated to the UART device only has one option, uart_dbg. It specifies the level of debug messages that should be 
printed on the UART console (by default, boot and fatal messages are printed). Similarly, the Ethernet device handler is pretty simple as 
most of the options are configurable at service level. Nonetheless, the following options are supported: 
eth_mac: the MAC address of the CANSPY device itself (different from the ones used for the CAN devices). 
eth_dbg: specifies the level of debug messages that should be sent over Ethernet (by default, boot and fatal messages are sent). 
Regarding this last option, it is worth mentioning that an additional objective of the CANSPY platform is to be totally operable, including 
debugging and configuration features, over Ethernet (i.e., without the need to use the UART connectivity). As for the SDCARD device, it 
does not have any options since all the available ones are configurable at service level. 
4.2.3 CANSPY SERVICES 
In this section, we described the services registered to every CANSPY devices as well as their respective options. First and foremost, as 
previously stated, there is one instance of every CAN services for each of the two CAN device handlers. There are listed hereafter with 
their respective options: 
inject: frame injection from outside the CAN devices. 
filter: traffic filtering based on locally-stored rules. 
flt_rul: the list of rules to use to filter CAN frames. 
flt_def: the default action (rule 0) for CAN frames when no defined rules matches. 
flt_dmy: specifies if a dummy frame should be sent when dropping a frame from the CAN interface. 
forward: traffic forwarding (completely bypass the filtering engine). 
It is worth mentioning that inject services exist because of the functional segmentation explained in section 4.2. Indeed, since services 
cannot transmit data using a device they are not registered to, they need to request transmission to another service from that device. This is 
achieved using a simple inter-service communication mechanism. Furthermore, in this particular case, disabling the inject service for a 
given CAN device provides the user with the guarantee that no injection from other devices can happen unintentionally. 
Another thing worth explaining is the flt_dmy option. In section 4.2.2, we explained that there are cases when a man-in-the-middle setup 
can impact congestion on the CAN buses and thus put us in a situation where we are forced to drop frames. Precisely, this might happen 
when using a filter service: if it drops a frame from the source bus instead of forwarding it, this increases the bandwidth on the destination 
bus, thus putting us in a situation where we might not be able to forward all the traffic the other way around. The idea behind the flt_dmy 
option is, instead of dropping the frame, it may be better to replace it with a dummy frame (i.e., padded with zeros) of the same priority. 
After the CAN services, the Ethernet services are the most important services regarding the man-in-the-middle capabilities. There are 
listed hereafter with their respective options: 
wiretap: send the whole CAN traffic to the host computer (SocketCAN encapsulation). 
bridge: perform network bridging with the CAN buses (wiretapping and injection to and from the host computer). 
bri_ack: specifies, if needed, how to acknowledge the injection of CAN frame. 
command: shell execution from the host computer. 
cmd_typ: the Ethertype used for commands (the local experimental value 0x88b6 allowed by RFC7042 is the default). 
cmd_out: specifies if commands received over Ethernet should return their output. 
That last service is here to fulfill an objective already exposed in this section: making the CANSPY platform operable, including debugging 
and configuration features, over Ethernet (i.e., without the need to use the UART connectivity). It is absolutely necessary that this service 
relies on an Ethertype different than the one used to encapsulate CAN frames (cf. the can_typ options). Let us now focus on SDCARD 
services and their respective options: 
capture: dump the whole traffic in a PCAP file. 
cap_pre: the prefix used to create a capture file. 
cap_inj: specifies whether to capture injected frames. 
cap_fil: specifies when to capture a frame based on filtering rules. 
logging: write all events in a log file. 
log_pre: the prefix used to create the log file. 
log_dbg: specifies the level of debug messages that should be logged (by default, all messages are logged) 
replay: generate traffic from a PCAP file. 
rep_fil: the PCAP file to replay. 
rep_can: the CAN interfaces on which to replay frames (by default, the MAC addresses are used). 
rep_inf: specifies whether to replay indefinitely (repeat loop). 
It should be mentioned that behind the SDCARD services, there is another additional objective of the CANSPY platform: to be fully 
functional without a host computer connected to it. In section 4.1, we explained that it can be powered by the 12-volt line of a car. If, in 
addition to this, a Micro SD card is plugged into the STM32F4DIS-BB extension board, then the CANSPY platform has the ability to 
monitor, inject and alter CAN traffic autonomously. Finally, even though they were primarily designed with debugging purposes in mind 
(they do not have any options), let us have a look at UART services and especially at the shell service: 
print: synchronous printing (optional). 
monitor: print the whole traffic in the console. 
viewing: print all events in the console. 
shell: an interactive shell providing the following commands: 
help: display help for commands 
stats: display information about the platform 
device: display or change device status 
service: display or change service status 
option: display or change service/device options 
filter: display or change filtering rules 
inject: inject frames on a CAN bus 
ls: list the content of directories 
rm: remove files or empty directories 
mv: move files or directories 
cd: change the current directory 
pwd: print the current/working directory 
cat: concatenate and print files 
xxd: print the hexadecimal dump of a file 
pcap: print a capture file (PCAP format) 
mkdir: create new directories 
rmdir: remove non-empty directories 
One last thing worth mentioning that concerns the print service. In section 4.2.1, we presented the scheduling mechanism we designed in 
order to meet with the timing constraints required by the objectives of the CANSPY platform. However, we also stated that the debugging 
and configuration features (mainly UART services) were explicitly allowed to not meet with these constraints. In case the user really needs 
to not impair timings while still having a constant and heavy use of the UART console, enabling the print service do the job. Consequently, 
it will limit the amount of bytes that can be printed on the UART console which might also limits debugging capabilities. 
4.2.4 CANSPY FILTERING 
With the CANSPY platform, there are two approaches to filter CAN frames in a man-in-the-middle setup. The first one uses the host 
computer: disable forward and filter services, enable inject and bridge services, then it is up to the user to decide whether or not to send 
back the received CAN frames, altered or not, using its favorite packet manipulation framework (we provide the layers for Scapy [5]). 
The second approach uses the internal filtering capabilities of the CANSPY platform. These capabilities rely on a simple pattern-matching 
mechanism for each field of the CAN frame format (see section 2 for details). A set of patterns is then associated with an action that might 
include altering operations. A filtering rule typical looks like this: 
IF: [CAN1|CAN2] 
ID: [=|>||130 DATA ANY END:"\x44\x45" ALTR "\x42" 
# Forward ANY frames when they start and end respectively with 0x44 and 0x45 
# after replacing these 2 bytes respectively with 0x34 and 0x35 
Filter add ANY ANY DATA ANY REG:"^(\x44).*(\x45)$" ALTR "\x34" "\x35" 
# Drop all RTR frame 
Filter add ANY ANY RTR ANY ANY DROP 
One last thing worth mentioning about the way regular expressions are processed internally. First and foremost, the CANSPY firmware 
relies on the SRLE library [6]. We encourage you to have a look at the supported syntax when crafting filtering rules based on regular 
expressions. Furthermore, the possibility to use regular expressions is overlapping with the other keywords which thus may seem 
redundant. Remember that we want to have a constant upper bound to how long any service will take to complete its current job (see 
section 4.2.1 for details). This is not something that we can guarantee with regular expressions, hence the other keywords which should be 
given an absolute priority over regular expressions. In the general case, always be careful with regular expressions and make sure the total 
number of rules does not induce frame dropping. 
5. APPLICATION ON OBD-II 
In section 3.2, we explained that, in order to set up a man-in-the-middle configuration, it is mandatory to either physically cut the bus or to 
unplug a particular ECU. However, from the point of view of security auditors, this is not something difficult to achieve. Indeed, as stated 
in section 3.1, auditors rely on gray-box testing, meaning that the automobile manufacturer is providing them with assistance. As such, they 
can for example request access to the integration bench the automobile manufacturer is using for validation. If that is not possible, they can 
instead ask for input specifications in order to build their own testbed. 
However, there is one case where anyone can easily set up a man-in-the-middle configuration or build a custom testbed: On-Board 
Diagnostics or OBD. This term describes the vehicle self-diagnostic and reporting capabilities offered to automotive technicians in order to 
access to the status of the various ECUs. Furthermore, the OBD-II standard, allowing five signaling protocols including CAN, has been 
mandatory for all cars for two decades now. More recently, the CAN protocol has become mandatory in itself. Any car that is more-or-less 
modern will thus expose a CAN interface in the cabin of the vehicle. 
In the remainder of this section, in order to demonstrate the versatility and the efficiency of the CANSPY platform, we will focus on this 
specific use case: auditing automotive diagnostic software, first by intercepting and modifying CAN frames while connected to an actual 
car, then by partially simulating the car on a custom testbed. Indeed, there are an increasing number of OBD-II devices and we argue that, 
if compromised, they might expose the other cars these devices will be connected to [7] and potentially the infrastructure they interconnect 
with. It is important to highlight that the purpose of this section is not to release vulnerabilities on any diagnostic software but to lay the 
groundwork needed to audit a device that connects to an OBD-II connector. 
ELM327 is a programmed microcontroller that provides an abstraction layer with the OBD-II protocols. It is used by numerous OBD-II 
adapters that are compatible with most consumer-grade diagnostic tools, including those that are available on smartphones. The work that 
follows has been conducted on our own cars using such set of adapters and software. 
First, to set up the man-in-the-middle configuration on one of our cars, we had to build a DB9 cable with a routing identical to the one used 
by the Goodthopter [3] but with a female OBD-II connector on the other end. Once this was done, all that was left to do was to plug a 
CANSPY device in-between the car and the ELM327 cable and to start the forward and the wiretap services (see section 4.2.3 for details). 
To easily dissect the captured CAN frames and visualize the whole traffic, it is possible to use Wireshark as it natively supports the 
SocketCAN format. All that is needed to achieve this is to associate the SocketCAN dissector with the Ethertype 0x88b5. As shown by 
Code 1, a simple Lua script can do this with just a few lines. 
Code 1. Lua script associating the SocketCAN dissector with the Ethertype 0x88b5 in Wireshark 
At this point, it is easy to see that the CAN frames are complying with the ISO 15765-2 standard (ISO-TP) for the network and transport 
layers and with the SAE J1939 standard for the codes used to request data from ECUs. This result was very much expected as this is now 
the standard on any recent car. Nonetheless, this is an opportunity to demonstrate the filtering engine of the CANSPY platform. Based on 
the OBD PIDs defined by the SAE J1939 standard [8], the vehicle speed should be provided by the PID 0x0d in the mode 0x01 of 