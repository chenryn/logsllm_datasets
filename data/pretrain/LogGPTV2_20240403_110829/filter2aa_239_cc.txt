方法继续排序。这两个方法需要IOrderEnumerable接口才能工作，但也返回这
个接口。所以，可以添加任意多个ThenBy（）和ThenByDescending（）方法，对集合排
序。
使用LINQ查询时，只需要把所有用于排序的不同关键字（用逗号分隔开）添加到
orderby子句中。在下例中，所有的赛车手先按照国家排序，再按照姓氏排序，最后按照
名字排序。添加到LINQ查询结果中的Take（）扩展方法用于返回前10个结果：
    var racers = (from r in Formula1.GetChampions()
                  orderby r.Country, r.LastName, r.FirstName
                  select r).Take(10);
排序后的结果如下：
    Argentina: Fangio, Juan Manuel
    Australia: Brabham, Jack
    Australia: Jones, Alan
    Austria: Lauda, Niki
    Austria: Rindt, Jochen
    Brazil: Fittipaldi, Emerson
    Brazil: Piquet, Nelson
    Brazil: Senna, Ayrton
    Canada: Villeneuve, Jacques
    Finland: Hakkinen, Mika
使用OrderBy（）和ThenBy（）扩展方法可以执行相同的操作：
    var racers = Formula1.GetChampions()
        .OrderBy(r => r.Country)
        .ThenBy(r => r.LastName)
        .ThenBy(r => r.FirstName)
        .Take(10);
13.2.6 分组
要根据一个关键字值对查询结果分组，可以使用group子句。现在一级方程式冠军应
按照国家分组，并列出一个国家的冠军数。子句group r by r.Country into g根据Country属
性组合所有的赛车手，并定义一个新的标识符g，它以后用于访问分组的结果信息。group
子句的结果根据应用到分组结果上的扩展方法Count（）来排序，如果冠军数相同，就根
据关键字来排序，该关键字是国家，因为这是分组所使用的关键字。where子句根据至少
有两项的分组来筛选结果，select子句创建一个带Country和Count属性的匿名类型（代码文
件EnumerableSample/Program.cs）。
        var countries = from r in Formula1.GetChampions()
                        group r by r.Country into g
                        orderby g.Count() descending, g.Key
                        where g.Count() >= 2
                        select new {
                                    Country = g.Key,
                                    Count = g.Count()
                                    };
        foreach (var item in countries)
        {
          WriteLine($"{item.Country, -10} {item.Count}");
        }
结果显示了带Country和Count属性的对象集合：
    UK        10
    Brazil    3
    Finland   3
    Australia 2
    Austria   2
    Germany   2
    Italy     2
    USA       2
要用扩展方法执行相同的操作，应把groupby子句解析为GroupBy（）方法。在
GroupBy（）方法的声明中，注意它返回实现了IGrouping接口的枚举对象。IGrouping接
口定义了Key属性，所以在定义了对这个方法的调用后，可以访问分组的关键字：
    public static IEnumerable> GroupBy(
        this IEnumerable source, Func keySelector);
把子句group r by r.Country into g解析为GroupBy（r => r.Country），返回分组序列。
分组序列首先用OrderByDescending（）方法排序，再用ThenBy（）方法排序。接着调用
Where（）和Select（）方法。
    var countries = Formula1.GetChampions()
        .GroupBy(r => r.Country)
        .OrderByDescending(g => g.Count())
        .ThenBy(g => g.Key)
        .Where(g => g.Count() >= 2)
        .Select(g => new { Country = g.Key,
                            Count = g.Count() });
13.2.7 LINQ查询中的变量
在为分组编写的LINQ查询中，Count方法调用了多次。使用let子句可以改变这种方
式。let允许在LINQ查询中定义变量：
    var countries = from r in Formula1.GetChampions()
                    group r by r.Country into g
                    let count = g.Count()
                    orderby count descending, g.Key
                    where count >= 2
                    select new
                    {
                      Country = g.Key,
                      Count = count
                    };
使用方法语法，Count方法也调用了多次。为了定义传递给下一个方法的额外数据
（let子句执行的操作），可以使用Select方法来创建匿名类型。这里创建了一个带Group和
Count属性的匿名类型。带有这些属性的一组项传递给OrderByDescending方法，基于匿名
类型Count的属性排序：
    var countries = Formula1.GetChampions()
      .GroupBy(r => r.Country)
      .Select(g => new { Group = g, Count = g.Count() })
      .OrderByDescending(g => g.Count)
      .ThenBy(g => g.Group.Key)
      .Where(g => g.Count >= 2)
      .Select(g => new
      {
        Country = g.Group.Key,
        Count = g.Count
      });
应考虑根据let子句或Select方法创建的临时对象的数量。查询大列表时，创建的大量
对象需要以后进行垃圾收集，这可能对性能产生巨大影响。
13.2.8 对嵌套的对象分组
如果分组的对象应包含嵌套的序列，就可以改变select子句创建的匿名类型。在下面
的例子中，所返回的国家不仅应包含国家名和赛车手数量这两个属性，还应包含赛车手的
名序列。这个序列用一个赋予Racers属性的from/in内部子句指定，内部的from子句使用分
组标识符g获得该分组中的所有赛车手，用姓氏对它们排序，再根据姓名创建一个新字符
串（代码文件EnumerableSample/Program.cs）：
    var countries = from r in Formula1.GetChampions()
                    group r by r.Country into g
                    let count = g.Count()
                    orderby count descending, g.Key
                    where count >= 2
                    select new
                    {
                      Country = g.Key,
                      Count = count,
                      Racers = from r1 in g
                                orderby r1.LastName
                                select r1.FirstName + " " + r1.LastName
                    };
    foreach (var item in countries)
    {
      WriteLine($"{item.Country, -10} {item.Count}");
      foreach (var name in item.Racers)
      {
        Write($"{name}; ");
      }
      WriteLine();
    }
结果应列出某个国家的所有冠军：
    UK        10
    Jenson Button; Jim Clark; Lewis Hamilton; Mike Hawthorn; Graham Hill;
    Damon Hill; James Hunt; Nigel Mansell; Jackie Stewart; John Surtees;
    Brazil    3
    Emerson Fittipaldi; Nelson Piquet; Ayrton Senna;
    Finland   3
    Mika Hakkinen; Kimi Raikkonen; Keke Rosberg;
    Australia  2
    Jack Brabham; Alan Jones;
    Austria   2
    Niki Lauda; Jochen Rindt;
    Germany   2
    Michael Schumacher; Sebastian Vettel;
    Italy     2
    Alberto Ascari; Nino Farina;
    USA       2
    Mario Andretti; Phil Hill;
13.2.9 内连接
使用join子句可以根据特定的条件合并两个数据源，但之前要获得两个要连接的列
表。在一级方程式比赛中，有赛车手冠军和车队冠军。赛车手从GetChampions（）方法中
返回，车队从GetConstructorChampions（）方法中返回。现在要获得一个年份列表，列出
每年的赛车手冠军和车队冠军。
为此，先定义两个查询，用于查询赛车手和车队（代码文件
EnumerableSample/Program.cs）：
    var racers = from r in Formula1.GetChampions()
                  from y in r.Years
                  select new
                  {
                  Year = y,
                  Name = r.FirstName + " " + r.LastName
                  };
    var teams = from t in Formula1.GetContructorChampions()
                from y in t.Years
                select new
                {
                  Year = y,
                  Name = t.Name
                };
有了这两个查询，再通过join子句，根据赛车手获得冠军的年份和车队获得冠军的年
份进行连接。select子句定义了一个新的匿名类型，它包含Year、Racer和Team属性。
    var racersAndTeams = (from r in racers
                          join t in teams on r.Year equals t.Year
                          select new
                          {
                            r.Year,
                            Champion = r.Name,
                            Constructor = t.Name
                          }).Take(10);
    WriteLine("Year  World Champion\t  Constructor Title");
    foreach (var item in racersAndTeams)
    {
      WriteLine($"{item.Year}: {item.Champion, -20} {item.Constructor}");
    }
当然，也可以把它们合并为一个LINQ查询，但这只是一种个人喜好的问题：
    var racersAndTeams =
        (from r in
          from r1 in Formula1.GetChampions()
          from yr in r1.Years
          select new
          {
            Year = yr,
            Name = r1.FirstName + " " + r1.LastName
          }
        join t in
        from t1 in Formula1.GetContructorChampions()
          from yt in t1.Years
          select new
          {
            Year = yt,
            Name = t1.Name
          }
        on r.Year equals t.Year
        orderby t.Year
        select new
        {
          Year = r.Year,
          Racer = r.Name,
          Team = t.Name
        }).Take(10);
结果显示了在同时有了赛车手冠军和车队冠军的前10年中，匿名类型中的数据：
    Year  World Champion      Constructor Title
    1958: Mike Hawthorn       Vanwall
    1959: Jack Brabham        Cooper
    1960: Jack Brabham        Cooper
    1961: Phil Hill          Ferrari
    1962: Graham Hill         BRM
    1963: Jim Clark          Lotus
    1964: John Surtees        Ferrari
    1965: Jim Clark          Lotus
    1966: Jack Brabham        Brabham
    1967: Denny Hulme         Brabham
13.2.10 左外连接
上一个连接示例的输出从1958年开始，因为从这一年开始，才同时有了赛车手冠军和
车队冠军。赛车手冠军出现得更早一些，是在1950年。使用内连接时，只有找到了匹配的
记录才返回结果。为了在结果中包含所有的年份，可以使用左外连接。左外连接返回左边
序列中的全部元素，即使它们在右边的序列中并没有匹配的元素。
下面修改前面的LINQ查询，使用左外连接。左外连接用join子句和DefaultIfEmpty方
法定义。如果查询的左侧（赛车手）没有匹配的车队冠军，那么就使用DefaultIfEmpty方
法定义其右侧的默认值（代码文件EnumerableSample/Program.cs）：
    var racersAndTeams =
      (from r in racers
      join t in teams on r.Year equals t.Year into rt
      from t in rt.DefaultIfEmpty()
      orderby r.Year
      select new
      {
        Year = r.Year,
        Champion = r.Name,
        Constructor = t == null ? "no constructor championship" : t.Name
      }).Take(10);
用这个查询运行应用程序，得到的输出将从1950年开始，如下所示：
    Year  Champion             Constructor Title
    1950: Nino Farina          no constructor championship
    1951: Juan Manuel Fangio   no constructor championship
    1952: Alberto Ascari       no constructor championship
    1953: Alberto Ascari       no constructor championship
    1954: Juan Manuel Fangio   no constructor championship
    1955: Juan Manuel Fangio   no constructor championship
    1956: Juan Manuel Fangio   no constructor championship
    1957: Juan Manuel Fangio   no constructor championship
    1958: Mike Hawthorn        Vanwall
    1959: Jack Brabham         Cooper
13.2.11 组连接
左外连接使用了组连接和into子句。它有一部分语法与组连接相同，只不过组连接不
使用DefaultIfEmpty方法。
使用组连接时，可以连接两个独立的序列，对于其中一个序列中的某个元素，另一个
序列中存在对应的一个项列表。
下面的示例使用了两个独立的序列。一个是前面例子中已经看过的冠军列表。另一个
是一个Championship类型的集合。下面的代码段显示了Championship类型。该类包含冠军
年份以及该年份中获得第一名、第二名和第三名的赛车手，对应的属性分别为Year、
First、Second和Third（代码文件DataLib/Championship.cs）：
    public class Championship
    {
      public int Year { get; set; }
      public string First { get; set; }
      public string Second { get; set; }
      public string Third { get; set; }
    }
GetChampionships方法返回了冠军集合，如下面的代码段所示（代码文件
DataLib/Formula1.cs）：
    private static List championships;
    public static IEnumerable GetChampionships()
    {
      if (championships == null)
      {
        championships = new List();
        championships.Add(new Championship
        {
        Year = 1950,
        First = "Nino Farina",
        Second = "Juan Manuel Fangio",
        Third = "Luigi Fagioli"
        });
        championships.Add(new Championship
        {
        Year = 1951,
        First = "Juan Manuel Fangio",
        Second = "Alberto Ascari",