them easy to differentiate from other response headers [41].
Note that the IA removes CSP directives in  elements
to avoid interference with the CSP of the IA itself. The CSP
deployment occurred after previous research had identiﬁed
the possibility of maliciously tampering with historical results
through the use of externally-hosted scripts [20]. This ﬁltering
has a minor effect on our experiments since few sites deploy
CSP through a meta tag (Section III-B).
Naturally, not all sites have daily snapshots in the IA. On
average, a site had snapshots for 1,031 of the 2,557 days in our
analysis timeframe. Hence, whenever there is no snapshot for
a given day di, we use di−1 instead as a basis for our analysis,
in a recursive fashion. This means that for every gap in the
snapshot data, we use the last entry before that gap as the data
point. This approach suffers from a certain level of impreci-
sion, as it might be unclear exactly when a change in a CSP
has occurred. This loss of ﬁne-grained information, however,
does not signiﬁcantly affect the class of observations pursued
in our work. For each collected CSP policy, we normalized all
randomized elements as nonces are meant to used be just once,
and the violation reporting URL may also contain random
strings. For those, we removed the random parts, allowing us
to properly analyze actual changes. All normalized policies are
available at https://archive-csp.github.io.
B. Threats to Validity
Given that our analysis uses the IA to extract information,
it is prone to the following threats to the validity of the results.
1) Incorrect Archival Data: It is not clear to what extent
the data collection process in the IA might
inﬂuence our
results, since a speciﬁc browser version might yield a different
server response. To determine this IA-speciﬁc inﬂuence, we
chose a second archive service to corroborate the IA’s data.
In particular, Common Crawl (CC) [10] has been collecting
snapshots of popular sites since 2013. For each date on which
we found a CSP in the IA, we queried the CC API for
a matching snapshot. Overall, we found 38,129 overlapping
snapshots for 940 sites. Out of these, 729 (1.9%) on 127 sites
were inconsistent between the two archives. For 96 cases the
3
Fig. 2: Usage of CSP only, CSP-RO only, or both
Fig. 3: Maintenance of CSPs over time
difference was the lack of block-all-mixed-content
or upgrade-insecure-requests in the CC data. Fur-
ther investigation showed that in the IA, these directives were
separated from the remaining CSP with a comma instead of a
semicolon. This likely relates to the IA joining headers with
the same name with a comma. For those pages, we could
always only ﬁnd a single CSP header in the CC response.
Moreover, starting from August 2018, these sites still used the
aforementioned directives in the IA data, but CC returned two
CSP headers (one including only those directives). Hence, we
speculate this relates to a bug in CC, which was ﬁxed around
August 2018. 23 cases showed evidence for a difference in
crawling time; e.g., taking the IA policy from the following
day matched the CC. Additionally, 29 differences can be
attributed to whitelisting different edge CDNs based on the
crawler’s IP. For the remaining 581 cases, the exact cause
of the difference was not detectable. Notably though, in only
238/38,129 cases (0.6%) did those policies have a different use
case (see Section II). Overall, this conﬁrmation from a second
source gives us high conﬁdence in our utilized dataset.
2) CSP Through Meta Tags: As mentioned, CSP can also
be deployed via HTML meta tags which are currently removed
by the IA. To understand the potential impact of this drawback,
we crawled the live main page of all 10,000 Web sites from our
dataset on June 10, 2019. We collected CSP headers and also
checked the content for CSP meta elements. In this experiment,
a total of 1,206 sites deployed CSP, and, of those, 78 (6.4%)
sites set their policy only through a meta element. Of the 1,147
sites that sent a CSP header, 19 also set the meta element.
Notably though, only 3 with both meta and HTTP header CSPs
had policies which differed in their use case (see Section IV-B).
Hence, we are conﬁdent the archived headers provide a valid
dataset for our large-scale historical analysis.
IV. HISTORICAL EVOLUTION OF CSP
In this section, we provide an overview of how CSP
deployment evolved, studying the adoption and maintenance
of CSPs, and the changing use cases we observed over time.
A. Adoption and Maintenance of CSP
Figure 2 shows the number of Web sites utilizing CSP
in enforcement mode, in report-only mode (CSP-RO), and
in both modes in parallel. The ﬁgure does not include the
CSP adoption from 2012 to 2014, since only 8 different sites
deployed CSP before 2014. In our dataset, lastpass.com
and adblockplus.org were the ﬁrst Web sites to adopt
CSP in January 2012, while the other six sites joined in 2013.
In total, we ﬁnd that 1,233 out of the 10,000 sites in our dataset
used CSP in enforcement mode for at least a single day in
our analysis period. Notably though, in the last month of our
analysis, only 1,032 domains enforced a CSP.
The plot also shows that
We draw two main observations based on the plot. First,
even though CSP offers the report-only mode to enable de-
velopers to experiment with policies before deployment, this
mode is not nearly as popular as the enforcement mode. This
means that most developers are rolling out policies without
having a chance to test them on their user base. We suspect
that this is one of the main reasons why CSPs in the wild are
so relaxed since they have not been appropriately evaluated
and the developers eventually opted for utility over security
(see Section V). Second, we observe even fewer Web sites
utilizing CSP in enforcement and report-only mode at the
same time, which is the preferred way of gradually testing and
deploying more restrictive policies. These two observations
together suggest that developers are likely confused about the
role of report-only and therefore do not take advantage of it.
the overall adoption of CSP
is consistently increasing over time. Given that our list of
Web sites remains stable, we can attribute the increased CSP
adoption to Web developers deciding to use it, rather than
CSP-capable Web sites suddenly climbing in Alexa popularity.
Speciﬁcally, in 2017 and 2018 anywhere between 18 and 65
Web sites in our dataset were adopting CSP in enforcement
mode for the ﬁrst time every single month. Considering the
ever-increasing complexity of Web sites and their deployed
JavaScript code [41], the rising adoption of CSP seems to be
a positive sign for security. Given the low adoption of report-
only, the next sections focus primarily on enforcement mode.
Since CSP is one of many security mechanisms deployed
by servers and enforced by browsers (like HSTS [29]) one
may think that similar to other mechanisms, once a policy is
curated, that policy can be deployed and used for a prolonged
period. Unfortunately, CSP — especially for its original use
case of script content restriction — is way more complicated
than other security mechanisms and requires constant mainte-
nance to ensure that the appropriate sources are whitelisted so
that the site remains operational and secure. Figure 3 quantiﬁes
the burden of keeping deployed CSPs up to date. The dashed
red line shows that, in many cases, sites needed to modify
their policies tens of times each month. Even though we see
the average number of changes going down towards a steady
state, we later show that this is rather caused by CSP being
used for non-traditional reasons (such as for TLS enforcement)
than by stabilized whitelists. The blue line shows the fraction
of sites with changed policies. We still observe the need to
regularly maintain CSPs since by the end of our analysis, still
roughly 10% of sites changed their policy at least monthly.
B. Use Cases for CSP
Even though CSP was initially developed as a measure to
mitigate the impact of script injection, the multitude of direc-
tives available nowadays allows site operators to control much
4
02505007501000201420162018# of sitesonly CSPonly CSP−ROBoth1020304050510152025201420162018% of sites with changeaverage number of changesaverage number of changesfraction of changed sitesFig. 4: Classiﬁed policies over time
Fig. 5: Overall adoption of content restriction and insecure practices
more than included content. Speciﬁcally, we classify policies
in the following (overlapping) categories: Script Content Re-
striction (policies using script-src or default-src);
TLS Enforcement (policies using upgrade-insecure-
requests, block-all-mixed-content, or whitelist-
ing only HTTPS sources); and Framing Control (policies
using frame-ancestors). Figure 4 shows the number of
sites applying CSP for the identiﬁed use cases over time. When
comparing the numbers to Figure 2, we ﬁnd that the increase
in the deployment of CSP starting from 2015 coincides with
the increased usage of framing control. Similarly, the increase
in the overall usage of CSP from 2017 onwards aligns with
the increased enforcement of TLS connections, mostly through
upgrade-insecure-requests. Moreover, the decrease
in maintenance shown in Figure 3 is evidence of easily
deployable mechanisms like TLS enforcement, rather than
reduced effort to keep policies up to date. This clearly indicates
that while CSP was meant as a tool to mitigate script injection,
new additions to the set of the CSP directives have shifted CSP
into new use cases. In the following, we analyze each category
separately, discuss its evolution, and highlight key insights.
V. CSP FOR SCRIPT CONTENT RESTRICTION
In this section, we analyze how CSP has evolved with
respect to its content restriction capabilities. This not only
allows us to conﬁrm ﬁndings of prior work through the
longitudinal lense of the IA, but also to highlight unknown
trends in the increasing trust of operators into lower-ranked
domains, to investigate the success of newly introduced CSP
features, and to identify previously unexplored attacks related
to hijacking whitelisted domains. Finally, given the unique
vantage point of an archival analysis, we conduct a number
of case studies which document the long-lasting struggle of
Web sites to deploy an effective policy.
The ﬁrst observation we make is that, out of the 1,032
sites in the dataset that enforced a CSP by the end of our
analysis period, only 421 sites shipped policies aimed at
restricting script content. This clearly shows that although CSP
was initially meant to mitigate script injections, this is only
attempted by about 41% of the deployed policies. We now
present insights gained from the deployed policies.
A. Insecure Practices Die Hard
Figure 5 shows the evolution in the number of sites using
CSP for content restriction, and how many of them have been
using various unsafe practices therein. The two most popular
unsafe practices are the use of unsafe-inline (without the
use of hashes/nonces) and the use of unsafe-eval. While
unsafe-eval must be considered the lesser evil, given that
its presence does not immediately nullify CSP’s security, we
observe almost all the policies deployed in 2014 and 2015
made use of unsafe-inline. We attribute this to the inﬂex-
ibility of early versions of CSP. However, it is noteworthy that
even at the end of our analysis period, this trivially insecure
directive is contained in almost 90% of the policies. While we
can only speculate about the exact reason for this trend, we
opine that it is likely due to event handlers which cannot be
whitelisted with hashes or nonces. Checking merely the start
pages for the 378 sites which deployed unsafe-inline in
December 2018, 180 (48%) of them carried event handlers.
The actual number of sites making use of them is likely
even higher, but we could not conﬁrm this without adding a
signiﬁcant load on the IA by crawling sub-pages. The bottom
two lines of Figure 5 refer to the whitelisting of entire schemes.
In particular, the ﬁrst line shows that developers are declaring
that any HTTP/HTTPS origin is permitted, which obviously
voids security. The second line represents the whitelisting of
the data scheme, which can be used to add arbitrary code,
e.g., through data:;alert(1) [23].
Our analysis also indicates that
the numerous features
added to CSP to ease its secure deployment are not success-
ful. Table I reports on the adoption of hashes, nonces, and
strict-dynamic on a yearly basis. Note that, although
strict-dynamic has recently been shown to be bypassable
through Script Gadgets [19], we still treat it as an improvement
since it should ease CSP deployment. The table highlights that
while the usage of CSP to control scripts has constantly grown,
neither hashes nor nonces have gained signiﬁcant adoption.
We also ﬁnd that in both 2017 and 2018, at most 8 sites
made use of strict-dynamic. While we are only checking
start pages and might therefore miss wider-spread deployment,
this still highlights that the new directive is not widely used.
Overall, we can conclude that insecure practices are present
in 90% of policies, whereas secure practices like nonces or
hashes, reach less than a 5% adoption rate.
B. Whitelisted Sources
We now complement the ﬁndings of Weichselbaum et al.
[50] regarding the insecurity of whitelists by quantifying the
evolution of the number of whitelisted script sources over time
(Figure 6). We observe that even though the median remains
relatively stable, the number and magnitude of outliers expand
year after year with some Web sites whitelisting over 200
Year
2014
2015
2016
2017
2018
Controls script
Hashes
Nonces
strict-dynamic
27
75
135
296
478
0 (0%)
1 (1%)
1 (1%)
4 (1%)
6 (1%)
1 (4%)
2 (3%)
3 (2%)
14 (5%)
24 (5%)
0 (0%)
0 (0%)
0 (0%)
7 (2%)
8 (1%)
TABLE I: Number of sites per year restricting script content, and
using hashes, nonces, and strict-dynamic.
5
0100200300400500201420162018# of sitesScript Content ControlTLS EnforcementFraming Control0100200300400500201420162018# of sitesScript Content Control'unsafe−eval''unsafe−inline' w/o nonceshttp / https / *data:Fig. 6: Boxplot showing the number of elements in script whitelist
unique sources for their scripts. The low median must be
interpreted in light of the unsafe practices described earlier.
Whitelisting an entire scheme (such as https) and allowing
unsafe-inline may result in short policies (in terms of the
number of entries) which are, however, still more vulnerable
than explicitly trusting hundreds of remote third parties.
The ranking of whitelisted sources is an important di-
mension of CSPs, since site popularity is often used as a
proxy for security. This stems from the reasonable assumption
that, on average, the developers of more popular Web sites
have more know-how and resources to help secure their code.
For example, Van Goethem et al. [45] discovered that more
popular Web sites tend to utilize more security mechanisms
than less popular ones. To analyze this, Figure 7 shows
information about the ranking of Web sites that are whitelisted
as script sources. In particular, this contains all hosts that were
whitelisted; i.e., even in the presence of *, we analyzed the
remaining contained sites. We argue that this is useful, given
that remote sources contained in the whitelist are explicitly
trusted by the site, and the existence of * often is a byproduct
of attempting to curate a limited whitelist (cf. Section V-D1).
For this analysis, we used the publicly available historical
dataset of Scheitle et al. [37], extracting the rank from each site
on the day when it was whitelisted. To combat the ﬂuctuation
of these lists, we aggregate the results on a monthly basis. We
ﬁnd that starting from 2017, the average rank of trusted CSP
sources increases, although the average number of elements in
whitelists does not (cf. Figure 6). This means that developers
are explicitly trusting less popular Web sites through their
CSPs to host JavaScript code, thereby weakening their security.
C. Abusing Whitelisted Domains
Given the observed trend in trusting lower-ranked sites,
we ﬁnd that such domains are valuable targets for an attacker.
Even though whitelisting domains can prevent script injections
from arbitrary sources, this can be bypassed by an attacker who
is able to serve content from a whitelisted source. Speciﬁcally,
referring to trusted sources by domain names carries with it
the typical security problems of domain names. In our dataset,
the CSPs of 373/422 (89%) of sites trying to restrict content
whitelisted at least one domain for script inclusion. We discuss
three attacks to leverage trusted domains and determine how
many sites could have had their policies bypassed.
1) Expired Domains: First, domains that expire while still