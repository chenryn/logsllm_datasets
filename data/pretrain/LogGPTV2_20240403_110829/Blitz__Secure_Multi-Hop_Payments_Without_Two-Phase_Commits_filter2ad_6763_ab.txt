which holds the outputs representing the current state of the
payment channel. We further assume that the current txstate
can always be published on the blockchain and if an old state
is published by a dishonest user, the honest user gets the total
channel balance through some punishment mechanism.
Formally, we deﬁne a channel γ as the following attribute
tuple γ := (id, users, cash, st). Here, γ.id ∈ {0,1}∗ is a unique
identiﬁer of the channel, γ.users ∈ P 2 denotes the two parties
that participate in the channel out of the set of all parties P .
Further, γ.cash ∈ R≥0 stores the total number of coins held
in the channel and γ.st := (θ1, . . . ,θn) is the current state of
the channel consisting of a list of outputs. For convenience,
we also deﬁne a channel skeleton γ with respect to a chan-
nel γ as the tuple γ := (γ.id,γ.users). When the channel is
used along a payment path as shown in the next section, we
say the γ.left ∈ γ.users accesses the user that is closer to the
sender and γ.right ∈ γ.users the one closer to the receiver. The
balance of each user can be inferred from the state γi.st, how-
ever for convenience we deﬁne a function γi.balance(U), that
returns the coins of user U ∈ γi.users in this channel.
2.3 Payment channel networks
Since maintaining a payment channel locks a certain
amount of coins for a party, it is economically prohibitive
to set up a payment channel with every party that one poten-
tially wants to interact with. Instead, each party may open
channels with a few other parties, creating thereby a network
of channels. A payment channel network (PCN) [19] is thus a
graph where vertices represent the users and edges represent
channels between pairs of users. In a PCN, a user can pay
any other user connected through a path of payment channels
between them. Suppose user U0 wants to pay some amount α
to Un, but does not have a payment channel directly with it.
Now assume that instead, U0 has a payment channel γ0 with
U1, who in turn has a channel γ1 with U2 and so on, until the
receiver Un. We say that U0 and Un are connected by a path
and denote a payment using it as multi-hop payment (MHP).
Optimistic payment schemes In an MHP, the main chal-
lenge is to ensure that the payment happens atomically and
for everyone, so that no (honest) user loses any money. In fact,
there exists payment-channel network constructions where
this security property does not hold. We call them optimisic
payment schemes and give Interledger [27] as an example. In
this scheme, the users on the path simply forward the payment
without any guarantee of the payment reaching the receiver.
The sender U0 starts by performing an update for channel γ0,
where γ0.balance(U1) is increased by α (and γ0.balance(U0)
is decreased by α) compared to the previous state. U1 does the
same with U2 and this step is repeated until the receiver Un is
reached. This scheme works if every user is honest. However,
a malicious intermediary can easily steal the money by simply
stopping the payment and keeping the money for itself.
Secure MHPs Since the assumption that every user is honest
is infeasible in practice, most widely deployed systems instead
ensure that no honest user loses coins. The Lightning Network
(LN) [22] uses so called Hash Time-Lock Contracts (HTLCs).
An HTLC works as follows. In a payment channel between
Alice and Bob, party Alice locks some coins that belong to
her in an output that is spendable in the following fashion: (i)
After some pre-deﬁned time t, Alice will get her money back.
(ii) Bob can also claim the money at any time, if he knows a
pre-image rA for a certain hash value H (rA), which is set by
Alice.
For an MHP in the LN, suppose again that we have a sender
U0 who wants to pay α to a receiver Un via some interme-
diaries Ui with i ∈ [1,n− 1], and that two users Uj and Uj+1
for j ∈ [0,n− 1] have an opened payment channel. Now for
the ﬁrst step, Un samples a random number r, computes the
hash of it y := H (r) and sends y to U0. In the second step, the
sender U0 sets up an HTLC with U1 by creating a new state
with three outputs θ1,θ2,θ3 that correspondingly hold the
amount of coins: α, U0’s balance minus α and U1’s balance.
While θ2 and θ3 are spendable by their respective owners, θ1
is the output used by the HTLC. The HTLC that is constructed
spends the output containing α back to U0 after n time, let us
say n days, or to U1 if it knows a value x such that H (x) = y.
Now U1 repeats this step with its right neighbor, again using
y but a different time, (n− 1) days, in the HTLC. This step is
repeated until the receiver is reached, with a timeout of one
day.
Now if constructed correctly, the receiver Un can present r
to its left neighbor Un−1, which is the secret required in the
HTLC for giving the money to Un. We call this opening the
HTLC. After doing that, the two parties can either agree to up-
date their channel to a new state, where Un has α coins more,
or otherwise the receiver can publish the state and a transac-
tion with witness r spending the money from the HTLC to
itself on-chain. When a user Ui reveals the secret r to its left
neighbor Ui−1, Ui−1 can use r to continue this process. For
this continuation, Ui−1 needs to have enough time. Otherwise,
Ui could claim the money of the HTLC it has with Ui−1 by
4046    30th USENIX Security Symposium
USENIX Association
spending the HTLC on-chain at the last possible moment.
Because of the blockchain delay, user Ui−1 will notice this
too late and will not be able to claim the money of the HTLC
with Ui−2 anymore. This is the reason why the timelocks on
the HTLCs are staggered, i.e., increasing from right to left.
The aforementioned process where each user presents r to
the left neighbor is repeated until the sender U0 is reached, at
which point the payment is completed. We call this approach
of performing MHPs 2-phase-commit.
3 Solution overview
The goal of this work is to achieve the best of the two multi-
hop payment (MHP) paradigms existing nowadays (optimistic
and 2-phase-commit), that is, an MHP protocol with a single
round of communication that overcomes the drawbacks of the
current LN MHP protocol and yet maintains the security and
privacy notions of interest.
For that, we propose a paradigm shift, which we call pay-
or-revoke. The idea is to update the payment channels from
sender to receiver in a single round of communication. The
key technical challenge is thus to design a single channel
update that can be used simultaneously for sending coins from
the left neighbor to the right one if the payment is successful
and for a refund of the coins to the left neighbor if the payment
is unsuccessful (e.g., one intermediary is ofﬂine).
We present the pay-or-revoke paradigm in an incremental
way, starting with a naive design, discussing the problems
with it, and presenting a tentative solution. We iterate these
steps until we ﬁnally reach our solution.
Naive approach Assume a setting with a sender U0 who
wants to pay α coins to a receiver Un via a known path of
some intermediaries Ui (i ∈ [1,n − 1]), where each pair of
consecutive users Uj and Uj+1 for j ∈ [0,n−1] has a payment
channel γ j, where γ j.balance(Uj) ≥ α. We start out with an
optimistic payment scheme, as presented in Section 2.3. We
already explained that the success of such a payment relies on
every intermediary behaving honestly and really forwarding
the α coins. Should an intermediary not forward the payment,
Un will never receive anything. Additionally, a receiver could
claim that it never received the money even though it actually
did and it would be difﬁcult for the sender to prove otherwise.
To solve these problems the sender faces when using this
form of payment we introduce a possibility for the sender
to step back from a payment, that is, refund itself and all
subsequent users the α coins that they initially put, should the
payment not reach Un. With such a refund functionality, the
sender can now check if a receiver is giving a conﬁrmation
that it got the payment. This conﬁrmation is external to the
system (e.g., a digital payment receipt) and serves additionally
as a proof that the money was received. If such a conﬁrmation
is not received, the sender simply steps back from the payment
and the payments in every channel are reverted.
Adding refund functionality Adding a refund functionality
while avoiding additional security problems is challenging.
Two neighbors can no longer simply update their channel
γi to a state where α coins are moved from the left to the
right neighbor, as this only encodes the payment. Instead, we
need to introduce an intermediate channel state txstate, which
encodes the possibility for both a refund and a payment.
We realize that as follows. This new state has an output
holding α coins coming from γi.left (= Ui) while leaving
the rest of the balance in the channel untouched. The output
containing α coins becomes then the input for two mutu-
ally exclusive transactions: refund and payment. We denote
i, which spends the money back
the refund transaction as txr
to γi.left (= Ui). We denote the payment transaction as txp
i ,
which spends the money to γi.right (= Ui+1). The refund
should only be possible until a certain time T . This gives the
sender time to wait for the payment to reach the receiver and
for the receiver to give a (signed) conﬁrmation. Should some-
thing go wrong, the sender starts the refund procedure. After
time T , if no refund happened, the payment is considered
successful and the payment transaction becomes valid.
The latter condition can easily be expressed in the scripting
language of virtually any cryptocurrency including Bitcoin,
by making use of absolute timelocks, which in this work we
deﬁned as AbsTime(T ), meaning an output can be spent only
after some time T . Unfortunately, the same cannot be done
for expressing the condition that an output is spendable only
before time T (e.g., see [13] for details).
i will always be accepted over txr
i and the payment transaction txp
We overcome this problem in a different way. Instead of
i only valid before T , we
making the refund transaction txr
allow both txr
i to be valid
after time T and encode a condition that, should both be
posted after T , txp
i. We can
achieve this by adding a relative timelock on the input of txr
i
of the blockchain delay ∆. In other words, should a user try
to close the channel with txstate appearing on the chain after
time T , the other user will have enough time to react and post
txp
i , which will get accepted before the relative timelock of txr
i
expires. For the honest refund case nothing changes: If txstate
i gets posted before T − ∆, it will always
is on-chain and txr
be accepted over txp
i , since the latter transaction is only valid
after time T .
Making the refund atomic So far, we added a refund func-
tionality that is (i) not atomic and (ii) triggerable by every
user on the path. An obvious attack on this scheme would be
for any user on the path to commence the refund in a way that
i is accepted on the ledger just before T . Other users would
txr
not have enough time to react accordingly and lose their funds.
Also, allowing intermediary users to start the refund opens up
the door to grieﬁng, where malicious users start a refund even
though the payment reached the receiver. We therefore need
a mechanism that (i) ensures the atomicity of the refund (or
payment) and (ii) is triggerable only by the sender.
Following the LN protocol, one could add a condition
H (rA) on the refund transaction, such that the refund can
only happen when a pre-image rA chosen by the sender is
USENIX Association
30th USENIX Security Symposium    4047
known. To prevent the sender from publishing at the last mo-
ment however, the timing for the refund in the next channel
would have to be T + ∆ to give U1 enough time to react. In
subsequent channels, this time would grow by ∆ for every
hop and we would then have an undesirable staggered time
delay. Additionally, this approach would rely on the scripting
language supporting hash-lock functionality.
To keep the time delay constant, we instead make the refund
transactions dependent on a transaction being published by
the sender. First, the sender creates a transaction that we name
enable-refund and denote by txer. The unsigned transaction
txer is then passed through the path and is used at each channel
γ j as an additional input for txr
i.
This makes the refund transaction at every channel depen-
dent on txer and gives the sender and only the sender the
possibility to abort the payment until time T in case some-
thing goes wrong along the path (e.g., a user is ofﬂine or the
enable-refund transaction is tampered), and the receiver the
guarantee to get the payment after time T otherwise.
In order to use the same txer for the refund transaction txr
i
of every channel γi, we proceed as follows. For every user
on the path (except for the receiver) there needs to exist an
output in txer which belongs to it. Additionally, we observe
that an intermediary Ui whose left neighbor Ui−1 has used txer
as input for its refund transaction txr
i−1 can safely construct
a refund transaction txr
i dependent on the same txer, because
it will know that if its left neighbor refunded, txer has to be
on-chain, which means that it can refund itself. Also, since
the appearance of txer on the ledger is a global event that is
observable by everyone at the same time, the time T used for
the refund can be the same for every channel, i.e., constant.
Putting everything together Our approach is depicted in
Figure 2, txer is shown in Figure 3, and the transaction struc-
ture between two users is shown in Figure 4. Note that we
change the payment value from α to αi to embed a per-hop fee
(see Appendix A for details). After the payment is set up from
sender to receiver, the receiver sends a conﬁrmation of txer
back to U0, which acts both as veriﬁcation that txer was not
tampered and as a payment conﬁrmation. Should the sender
receive this in time, it will wait until time T , after which the
payment will be successful. If no conﬁrmation was received
in time, or txer was tampered, the sender will publish txer in
time to trigger the refund.
We remark that it is crucial that every intermediate user
can safely construct txr
i only observing txer, but not the input
funding it (or not even knowing whether it will be funded at
all in the ﬁrst place). Indeed, an intermediary Ui does not care
if the transaction txer is spendable at all, it only cares that its
left neighbor Ui−1 uses an output of the same transaction txer
as input for its refund transaction txr
In UTXO based cryptocurrencies, using the jth output of
a transaction tx as input of another transaction tx(cid:48) means ref-
erencing the hash of the transaction body H (tx), which we
deﬁned as tx.id, plus an index j. A transaction txr
i that was
i−1, as Ui does in txr
i.
txer
enables refunds
Figure 4
U0
1.
≥ T
U1
2.
≥ T
U2
3.
≥ T
U3
4.
≥ T
U4
Figure 3
5. verify txer
Figure 2: Illustration of the pay-or-revoke paradigm.
txin
n· ε
...
pkU0
txer
ε
...
ε
+tc + ∆
pkU0
+tc + ∆
pkUn−1
Figure 3: Transaction txer, which enables the refunds and,
here, spends the output of some other transaction txin.
i without ﬁnding a collision in H . Further, as txr
created with an input referencing txer.id and some index j,
can only be valid if txer is published. This means, in particu-
lar, that it is computationally infeasible to create a different
transaction txer(cid:48) (cid:54)= txer and use one of txer(cid:48)’s outputs as input
of txr
i requires
the signatures of both Ui and Ui+1, a malicious Ui on its own
(cid:48) that does not
cannot create a different refund transaction txr
i
depend on txer.
A ﬁnal timelock There is however still one subtle problem
with the construction up to this point regarding the timing
coming from the fact that the sender has the advantage of
being the only one able to trigger the refund by publishing
txer. In a bit more detail, as closing a channel takes some
time, a malicious sender U0 can forcefully close its channel
with U1 beforehand. Then, when txstate
is on the ledger, the
sender publishes txer so that it appears just before T − ∆. The
0 just in time before T . All other
sender is able to publish txr
intermediaries however, who did not yet close their channel,
is not on the ledger, will not be able
with the result that txstate
to do this and publish txr
i in time.
To solve this problem, we introduce a relative timelock on
the outputs of txer of exactly tc + ∆, as shown in Figure 3 and
0