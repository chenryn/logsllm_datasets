anism is data-dependent. We experimentally evaluated the
risk of unique identi(cid:12)cation with the disease susceptibility
of obesity, y = f (x). Fig. 3 portrays the distribution of
f (x) for all possible points in the input domain. In the (cid:12)g-
ure above, we divide X into two sets: x 2 X with x2 = 0
and x 2 X with x2 = 1. In the (cid:12)gure below, X is divided
into two sets in the same manner with respect to x6. The
vertical lines in the (cid:12)gures display intervals when the output
domain is partitioned into (cid:12)ve sections. Given x, the mech-
anism outputs one of these (cid:12)ve intervals. The cross (green)
and circle (blue) points in the (cid:12)gure above (resp. below)
show the distribution of f (x) when x2 = 1 and x2 = 0
(resp. x6 = 1 and x6 = 0).
[
)
1
5 ; 2
5
.
536Table 1: The rate of genetic features identi(cid:12)ed uniquely from the disease susceptibilities.
signi(cid:12)cant
digit of w
1
2
3
4
5
6
input attribute
x1
0.0441
0.4886
0.9650
0.9950
1.0000
1.0000
x2
0.4559
0.7188
0.8576
1.0000
1.0000
1.0000
x3
0.0441
0.5341
0.9813
0.9821
1.0000
1.0000
x4
0.0441
0.5312
0.9627
0.9821
1.0000
1.0000
x5
0.2500
0.5625
0.9405
0.9861
1.0000
1.0000
x6
0.1912
0.4659
0.9463
0.9861
1.0000
1.0000
x7
0.3382
0.4886
0.9533
0.9950
1.0000
1.0000
x8
0.6618
0.6875
0.8623
1.0000
1.0000
1.0000
x9
0.6618
0.5483
0.9592
0.9821
1.0000
1.0000
x10
0.6765
0.4688
0.9405
0.9950
1.0000
1.0000
in the sense of the utility de(cid:12)ned in Section 2 under the con-
straints of (cid:11)-obscure privacy. The optimal interval mecha-
nism is de(cid:12)ned as a mechanism that outputs the narrowest
interval with the guarantee that the input inference risk ((cid:11)-
obscure privacy) is kept lower than acceptable levels spec-
i(cid:12)ed by the publisher. The mechanism we present in this
section can explicitly restrict (cid:11) of (cid:11)-obscure privacy as con-
straints. In the following, (cid:11) denotes the privacy measure of
intervals provided by the mechanism. On the other hand,
~(cid:11) represents the constraint on the privacy measure, which
is given as the input of the mechanism before releasing the
intervals. We call (cid:11) privacy measure and ~(cid:11) privacy budget.
We formulate the problem of (cid:12)nding the optimal interval
mechanism as a constraint maximization problem. Then we
derive an algorithm that derives the optimal interval mech-
anism.
6.1 Mechanism Design by Constraint Optimiza-
tion
Two constraints are necessary for the mechanism to out-
put useful intervals. First, given x, the output interval of
the mechanism should include f (x). This constraint is nec-
essary because false intervals can be released without this
constraint. This constraint is represented by the following
expression.
8x2X; f (x) 2 M(x)
Second, we require that all intervals released by the mech-
anism be mutually disjoint. For example, let f (x1) = 1:2
and f (x2) = 1:2 be the outputs of x1 and x2. Also, let
[0; 2] = M(x1) and [1; 3] = M(x2) be the corresponding
output intervals of the mechanism. This mechanism satis-
(cid:12)es the (cid:12)rst constraint. However, the mechanism outputs
diﬀerent intervals for same true outputs; f (x1) = f (x2).
If this happens, one might misunderstand that the second
output shows higher susceptibility than the (cid:12)rst. To avoid
this misunderstanding, we introduce the second constraint,
which requires that all the intervals be mutually disjoint:
8x;x′2X;M(x)̸=M(x′);M(x) \ M(x
′
) = ∅
Let I be the set of intervals over the output domain of
f . The mechanism is de(cid:12)ned as a map from an input to
an interval, M : X ! I. Putting the privacy constraint
and the two constraints for the intervals all together, we
can formulate the optimization problem A to ascertain the
optimal interval. Let M be the set of mapping X ! I.
utility (M)
maximizeM2M
subject to 81(cid:20)i(cid:20)d;M is ~(cid:11)i-obscure private
8x;x′2X;M(x)̸=M(x′);M(x) \ M(x
8x2X; f (x) 2 M(x):
(A)
′
) = ∅
Figure 3: Distribution of f (x) (obesity) for all possible
In the (cid:12)gure above, X is di-
points in the input domain.
vided into two sets: x 2 X with x2 = 1 and x 2 X with
x2 = 0. Also, f (x) of x in the former and latter set are
denoted respectively by blue cross points and green circle
points.
In the (cid:12)gure below, the distributions of f (x) are
shown with respect to x6 in the same manner.
As the (cid:12)gure shows, it is readily apparent that when the
leftmost interval I is released by the mechanism, one can
uniquely identify that x2 is 1 because this interval includes
no cross (green) point. The same holds for the rightmost
interval. x2 is always 0 if the rightmost interval is released.
In contrast, as the (cid:12)gure below shows, the release of none
of the intervals cause unique identi(cid:12)cation of x6. This dif-
ference is explainable by the model parameter. Looking
at details of the model parameter, w2, the model param-
eter corresponding to x2, has the largest absolute value, as
w2 = (cid:0)0:38. However, the model parameter corresponding
to x6 has a smaller absolute value, as w6 = (cid:0)0:05. From
these, it is apparent that x2 has a greater impact on the
outputs than x6, and that x2 is uniquely identi(cid:12)ed much
more easily than x6.
In Figure Fig. 3, since there exists
an interval that causes unique identi(cid:12)cation of x2, (cid:11) of (cid:11)-
obscure privacy w.r.t. x2 reaches upper bound whereas (cid:11)
of (cid:11)-obscure privacy w.r.t. x6 does not. This means that
the partitioning number of this mechanism can improve the
privacy, but it can control neither (cid:11) nor the probability of
unique identi(cid:12)cation.
To conclude, the partitioning number should be set to
less than four for this model to avoid this unique identi(cid:12)-
cation. The variation of the outputs of the original model
is jYj = 210. Abstraction of the outputs by four sections
might be acceptable if the outputs are disease susceptibil-
ities. However, if the outputs are the dosage amount of
personalized medicine, then four-level categorization can be
too abstract.
6. RELEASING DISEASE SUSCEPTIBILITY
WITH OPTIMAL INTERVAL
In this section, we propose a mechanism that is optimal
537Because M is an in(cid:12)nite set and because this has no struc-
ture behind, this optimization problem is intractable. To
solve this problem, we introduce the notions of the (cid:11)-obscure set
and (cid:11)-obscure private function.
Definition 2. Let S (cid:18) X. S is an (cid:11)-obscure set with
respect to the i-th attribute if, for all a 2 Xi,
jPr [xi = ajX 2 S] (cid:0) Pr [xi = a]j (cid:20) (cid:11):
Let (cid:25) be a partition of X. We de(cid:12)ne function ϕ(cid:25) : X ! (cid:25)
with partition (cid:25) as
ϕ(cid:25)(x) = S where S 2 (cid:25) such that x 2 S:
The following theorem characterizes mechanisms with (cid:11)-
obscure privacy by partitions for which the elements are all
(cid:11)-obscure sets.
Theorem 1. Let (cid:25) be a partition of X. Then, ϕ(cid:25) is an
(cid:11)-obscure private function with respect to the i-th attribute
if and only if every element of (cid:25) is an (cid:11)-obscure set with
respect to the i-th attribute.
Proof. The preimage of S 2 (cid:25) with ϕ(cid:25) is
(cid:25) [fSg] = S:
(cid:0)1
ϕ
[
(cid:12)(cid:12)Pr
(cid:12)(cid:12)X 2 ϕ
When ϕ(cid:25) is (cid:11)-obscure private with respect to the i-th at-
tribute, the following holds.
] (cid:0) Pr [Xi = a]
Xi = a
8x2X; jPr [Xi = ajY = ϕ(cid:25)(x)] (cid:0) Pr [Xi = a]j (cid:20) (cid:11)
8S2(cid:25);
8S2(cid:25); jPr [Xi = ajX 2 S] (cid:0) Pr [Xi = a]j (cid:20) (cid:11)
8a2Xi
,8a2Xi
,8a2Xi
By De(cid:12)nition 2, the last statement means that S is (cid:11)-
obscure set with respect to the i-th attribute for any S 2 (cid:25),
which concludes the proof.
(cid:25) [fSg]
(cid:0)1
(cid:12)(cid:12) (cid:20) (cid:11)
Accordingly, we can obtain an ~(cid:11)-obscure private function
by designing (cid:25), a partition of X, so that all elements of (cid:25)
are ~(cid:11)-obscure sets. ϕ(cid:25) is useful as a mechanism with the
guarantee of ~(cid:11)-obscure privacy, but it outputs a set of x,
not interval. To transform ϕ(cid:25) to a mechanism that outputs
an interval, we apply a function   : P(X) ! I to ϕ(cid:25) where
[
P(X) is the power set of X:
]
 (S) =
min
x2S f (x); max
x2S f (x)
:
Using ϕ(cid:25) and  , we can de(cid:12)ne a mechanism M(cid:25) that
outputs an interval as
M(cid:25)(x) =   ◦ ϕ(cid:25)(x):
By Theorem 1, the problem of (cid:12)nding an ~(cid:11)-obscure mech-
anism is reduced to the problem of (cid:12)nding a partition for
which the elements are all ~(cid:11)-obscure sets. We can next re-
formulate Problem A as the following optimization problem
of M(cid:25):
utility (M(cid:25))
(cid:25)2(cid:5)
maximize
subject to 8i8S2(cid:25);S is ~(cid:11)i-obscure set
8S;S′2(cid:25);S̸=S′ ;   (S) \  
(S′)
(B)
= ∅:
One can show that the solution to Problem A is equivalent
to the solution to Problem B. Let M : X ! I be a mech-
anism that satis(cid:12)es the (cid:12)rst constraint (privacy constraint)
in Problem A. Because M satis(cid:12)es the privacy constraint
in Problem A, if we group all x 2 X by M(x), then it al-
ways forms a partition (cid:25) of X so that each element of (cid:25) is
~(cid:11)-obscure set by Theorem 1.
Given such (cid:25), let us consider a mechanism that outputs
an interval that includes all values in ff (x)jx 2 ϕ(cid:25)(x)g to
satisfy the third constraint in Problem A. There are in-
(cid:12)nitely many mechanisms satisfying the condition, but the
mechanism with the largest utility among such mechanisms
is readily determined as M(cid:25)(x) because   outputs the nar-
rowest interval that covers all elements in ff (x)jx 2 ϕ(cid:25)(x)g.
Noting that enumeration of M 2 M with the (cid:12)rst con-
straint in Problem A is equivalent to enumeration of parti-
tion (cid:25) of X for which elements are ~(cid:11)-obscure sets, the solu-
tion to Problem B is equivalent to that of Problem A.
6.2 Partitioning Algorithm
Algorithm 1 Partitioning Algorithm
(cid:3)
1(cid:20)i(cid:20)d
Require: Input dimension:d,
real-valued function:f , privacy
budget:f ~(cid:11)ig
Ensure: optimal partition of X: (cid:25)
1: m(cid:25)[0]   ∅
2: mexist[0]   true
3: for i : 1; (cid:1) (cid:1) (cid:1) ; jTj do
4:
5:
6:
7:
8:
9:
10:
(cid:3)
(cid:25)
(cid:3)
i
u
existi   false
i
for j : 0; (cid:1) (cid:1) (cid:1) ; i (cid:0) 1 do
Ti;j   ftkg
j+1(cid:20)k(cid:20)i
Si;j   f
(cid:0)1 [Ti;j ]