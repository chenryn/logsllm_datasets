==== Bernoulli Naive Bayes
关于朴素贝叶斯分类器的wiki：
朴素贝叶斯分类器的基本模型如下:
image::images/ml-naive-bayes-model.png[]
y为目标值，xi为样本特征，即要计算某个样本特征xi属于某一类Ck的最大概率。伯努利朴素贝叶斯和高斯朴素贝叶斯两个不同的分类器主要区别在于：对P(xi | Ck)概率分布的不同假设，从而导致的不同概率分布。
下面先介绍伯努利朴素贝叶斯分类器。
image::images/ml-bernoulli-nb-model.png[]
伯努利朴素贝叶斯假设样本值的分布符合伯努利分布。需要注意的是伯努利朴素贝叶斯模型要求样本值都为独立的二值变量（如布尔值）；如果输入不符合要求的话此模型会把输入的样本值转化为二值型再进行模型训练。因而我们可以得出，伯努利模型适用于离散的样本特征的情况。上式的含义可以分为两部分理解：
* 当特征值xi为1时，P(xi|y)=P(xi=1|y)
* 当特征值xi为0时，P(xi|y)=1−P(xi=1|y)
Syntax：
    fit BernoulliNB [algo_params]  from  [into model_name]
Parameters:
* ：使用本模型对目标字段进行训练，必选
*  ：使用这些特征字段对目标字段进行分类和预测的训练，字段个数须>=1
* [into model_name]：保存下来的模型名称，可选，若不填将不做保存
* [algo_params]：针对BernoulliNB模型的参数设置，可选，不填时用默认参数设置
** alpha float, optional (default=1.0)
+
Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing).
** binarize float or None, optional (default=0.0)
+
Threshold for binarizing (mapping to booleans) of sample features. If None, input is presumed to already consist of binary vectors.
** fit_prior boolean, optional (default=True)
+
Whether to learn class prior probabilities or not. If false, a uniform prior will be used.
以某公司2010.1.12到2010.9.12之间在英国线上销售的交易记录为例, 样本数据字段如下:
1. InvoiceNo: Invoice number. Nominal, a 6-digit integral number uniquely assigned to each transaction. If this code starts with letter 'c', it indicates a cancellation. 
2. StockCode: Product (item) code. Nominal, a 5-digit integral number uniquely assigned to each distinct product. 
3. Description: Product (item) name. Nominal. 
4. Quantity: The quantities of each product (item) per transaction. Numeric.
5. InvoiceDate: Invice Date and time. Numeric, the day and time when each transaction was generated. 
6. UnitPrice: Unit price. Numeric, Product price per unit in sterling. 
7. CustomerID: Customer number. Nominal, a 5-digit integral number uniquely assigned to each customer. 
8. Country: Country name. Nominal, the name of the country where each customer resides.
对属性分析可以看出我们应该用其余7个feature来训练并预测第八个属性也就是购买物品所属于的国家，样本量一共20000条。
首先使用训练集中前2000条进行fit训练数据
  appname:ml_spl AND tag:classification_ly | limit 2000 | where empty(json.UnitPrice) == false | eval price = todouble(json.UnitPrice) | fit BernoulliNB alpha=0.8, binarize=0.5, fit_prior=false json.Country from json.InvoiceNo, json.StockCode, json.Description, json.Quantity, json.InvoiceDate, json.CustomerID, json.UnitPrice  into bernoulli_with_parameter2 | table json.Country, predicted_json.Country
image::images/ml-bnb-example-1.png[]
然后对上述练出的模型bernoulli_with_parameter2剩下的数据，得出的结果如下
  appname:ml_spl AND tag:classification_ly | sort by +timestamp | limit 2000 | where empty(json.UnitPrice) == false | eval price = todouble(json.UnitPrice) | apply bernoulli_with_parameter2 | table json.Country, predicted_json.Country
image::images/ml-bnb-example-2.png[]
由结果我们可以看出，伯努利朴素贝叶斯分类器对非二值型的分类表现并不好，即使它可以将非二值类型转化为二值，尤其是当target字段的distinct值变多后误差尤为明显，sklearn实现的bernoullinb模型还对target的distinct值最大个数进行了限制，经过测试为100个。
==== Gaussian Naive Bayes
image::images/ml-gaussian-nb-model.png[]
一般处理连续的特征变量，多采用高斯模型。高斯朴素贝叶斯假设样本值的分布符合高斯分布。通过此模型来计算每个样本值属于某个类别的概率。
Syntax：
    fit GaussianNB [algo_params]  from  [into model_name]
Parameters:
* ：使用本模型对目标字段进行训练，必选
*  ：使用这些特征字段对目标字段进行分类和预测的训练，字段个数须>=1
* [into model_name]：保存下来的模型名称，可选，若不填将不做保存
* [algo_params]：针对本模型并未对外开放参数设置