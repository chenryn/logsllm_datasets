Hi,
We are currently implement b3dm (a format that encapsulates glTF) support in
our project and have encountered a few problems with the current GLTFLoader
implementation.
We need to support addition attribute (`batchid`, used to identify the
different objects packed in the geometry), extensions (CESIUM_RTC) and
potentially additional uniforms. However, there does not seem to be any way to
add these new features without modifying the GLTFLoader file itself.
So my question is: how to support the extensible nature of glTF? Do we
contribute directly to the source and add the attributes/extensions/uniforms
that we need? Or does the loader need to be modified so extensions can be
"plugged in" without changing the source?
Related question: when loading glTFs in a scene rendered using a logarithmic
depth buffer, the model's shader are not modified to account for it, resulting
in depth issues: http://jsfiddle.net/x6ufnz3y/. I implemented a small hack to
fix the problem. Should this process be added to the loader natively? Or could
Three provide a helper function to patch the materials?