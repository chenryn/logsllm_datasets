### 反向工程 APK

#### 功能
- **资源反编译**：将资源（如 resources.arsc、classes.dex、*.png 和 XML 文件）解码为接近原始形式。
- **资源重建**：将解码后的资源重新打包成二进制 APK/JAR 文件。
- **依赖处理**：管理和处理依赖于框架资源的 APK。
- **Smali 调试**：支持 Smali 代码调试。

#### 系统要求
- Java 7 (JRE 1.7)
- 基本的 Android SDK、AAPT 和 Smali 知识

资料来源：[http://ibotpeaches.github.io/Apktool/](http://ibotpeaches.github.io/Apktool/)

### Smali 与 Classes.dex 的对比

#### *.smali
- 一种汇编语言
- 非常接近 Dalvik VM 接受的 DEX 格式
- 与 Java 不同，通过 Apktool 生成

#### Classes.dex
- Java 字节码的二进制代码
- Android 使用的 Dalvik 虚拟机与标准 Java 虚拟机不兼容
- DEX 文件与 CLASS 文件在文件结构和操作码上不同
- 通过 unzip 命令生成

### 工具介绍

#### Dex2jar
- 将 *.dex 文件转换为 *.jar 文件
- 其他功能包括：
  - `d2j-apk-sign.sh`：签名 APK
  - `d2j-jar2dex.sh`：将 JAR 转换为 DEX
  - `d2j-asm-verify.sh`：验证字节码
  - `d2j-jar2jasmin.sh`：将 JAR 转换为 Jasmin 汇编
  - `d2j-decrypt-string.sh`：解密字符串
  - `d2j-jasmin2jar.sh`：将 Jasmin 汇编转换为 JAR
  - `d2j-dex-assembler.sh`：将 DEX 文件转为汇编
  - `dex-dump.sh`：转储 DEX 文件信息

#### JD-GUI
- 可以反编译 *.jar 文件，还原 Java 源代码
- 通过代码审查理解程序逻辑和重要函数

### 修改 APK 的方法
- 只能修改 Smali 代码，因为原生语言无法重新编译回 *.jar。修改 *.smali 文件只需将其导入 IDE 中进行编辑，保存后重新打包 APK。
- 今天的目标是帮助大家理解程序逻辑、系统逻辑以及文件格式。

### Smali 跳跃指令
- `if-testz vAA, +BBBB`：条件跳跃指令。比较寄存器 vAA 与 0，如果结果满足或值为 0，则跳转到偏移量 BBBB 处。偏移量不能为 0。
- `if-eqz`：如果 vAA 为 0 则跳转。Java 语法表示为 `if(!vAA)`。
- `if-nez`：如果 vAA 不为 0 则跳转。Java 语法表示为 `if(vAA)`。

### 重新打包 APK
- 使用 Apktool 打包反编译后的文件夹。
- 使用 jarsigner 对 APK 进行签名。

### META-INF 文件分析
- 比较发现，RDSS.SF 比 MANIFEST.MF 多了一个 SHA1-Digest-Manifest 值，该值是 MANIFEST.MF 文件的 SHA1 值经过 Base64 编码的结果。

### 保护 APP 的方法
- **隔离 Java 程序**：将敏感或重要的类文件放在服务器中，通过动态加载避免黑客反编译整个程序。
- **加密类文件**：使用 AES、DES 等算法加密重要类文件，即使反编译也只能看到乱码。
- **转换为本地代码**：利用 Android NDK 在项目中编写 C/C++ 代码，提高反编译难度，特别是加密算法部分。
- **代码混淆**：使用 ProGuard 移除未使用的代码，并用混淆的名字重命名类、字段和方法。
- **在线加密**：[http://sourceforge.net/projects/apkprotect/](http://sourceforge.net/projects/apkprotect/) 提供跨语言保护；[https://dexprotector.com/node/4627](https://dexprotector.com/node/4627) 直接对 *.dex 文件进行保护，加密文件、隐藏函数调用并确保完整性。

### 结论
- 学习 Android 逆向工程需从基础开始，逐步理解文件、系统和格式。
- 掌握工具的使用，减少时间和精力的浪费。
- 学习签章和密码学，提升信息安全水平。
- 学习过程中不要急躁，经验和知识需要积累。

### 延伸议题及 Q&A
- 一般 APK 的签名有效期是多久？
- 更新 APK 是否需要相同的签名？
- 使用 jarsigner 签名的 APK 与之前的签名是否相同？
- 重新打包 APK 是否存在风险？
- 是否可以在不解压缩的情况下向 APK 中添加文件？