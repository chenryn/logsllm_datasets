  for	
  Reverse	
  APK
•  Features	
–  Disassembling	
  resources	
  to	
  nearly	
  original	
  form	
(including	
  resources.arsc,	
  classes.dex,	
  *.png.	
  and	
XMLs)	
–  Rebuilding	
  decoded	
  resources	
  back	
  to	
  binary	
  APK/JAR	
–  Organizing	
  and	
  handling	
  APKs	
  that	
  depend	
  on	
framework	
  resources	
–  Smali	
  Debugging	
•  Requirements	
–  Java	
  7	
  (JRE	
  1.7)	
–  Basic	
  knowledge	
  of	
  Android	
  SDK,	
  AAPT	
  and	
  smali
资料来源：hgp://ibotpeaches.github.io/Apktool/
Smali	
  V.S	
  Classes.dex
•  *.smali	
–  一种组合语言	
–  极为贴近 Dalvik	
  VM	
  所接受的 DEX	
  档案的组合语言形式	
–  不同于Java	
–  使用apktool	
  才会出现	
•  Classes.dex	
–  Java	
  位元的	
  Binary	
  code	
–  Android使用的dalvik虚拟机器与标准的java虚拟机器是
不相容的	
–  dex档与class档相比，不论是档结构还是opcode都不一
样	
–  使用unzip才会出现
神器：dex2jar,	
  JD-­‐GUI
•  Dex2jar	
– 将*.dex转换成*.jar	
– 其他功能 ex	
  :	
  d2j-­‐apk-­‐sign.sh,	
  d2j-­‐jar2dex.sh,	
  d2j-­‐
asm-­‐verify.sh,	
  d2j-­‐jar2jasmin.sh,	
  d2j-­‐decrpyt-­‐
string.sh,	
  d2j-­‐jasmin2jar.sh,	
  d2j-­‐dex-­‐asmiﬁer.sh,	
dex-­‐dump.sh,	
  d2j-­‐dex-­‐dump.sh…	
•  JD-­‐GUI	
– JD-­‐GUI	
  可反编译*.jar，将	
  java	
  原始码还原	
– 透过	
  code	
  review	
  理解程式的逻辑与重要的
funccon
篡改修改	
  APK	
  的方法
•  只能修改 smali,	
  因为原生语言无法重新编译
回	
  *.jar	
  ，但是修改	
  *.smali	
  他只需要拉进	
IDE	
  修改组合语言的部分，存档再重新打包 
Apk	
•  今天不是来教大家看组合语言	
•  今天希望大家能够理解程式逻辑、系统逻
辑以及档案格式
Smali	
  的跳跃指令
•  “if-­‐testz	
  vAA,	
  +BBBB”	
  条件跳跃指令。拿 vAA	
暂存器与0比较，如果比较结果满足或值为
0时就跳跃到	
  BBBB	
  指定的偏移处。偏移量	
BBBB	
  不能为0。	
•  “if-­‐eqz”	
  如果 vAA	
  为0则跳跃。Java	
  语法表
示”if(!vAA)”	
•  “if-­‐nez”	
  如果 vAA	
  不为0则跳跃。Java	
  语法表
示”if(vAA)”	
程式逻辑(科技始终来自于人性)
重新打包回APK
•  Apktool	
  b	
  ﬀ	
  （打包
刚刚反编译出来的
资料夹）	
•  但是Apk尚未签章	
•  jarsigner	
  -­‐verbose	
  -­‐
keystore	
rdss.keystore	
  -­‐
signedjar	
  ﬀx.apk	
ﬀ.apk	
  rdss	
深入浅出	
  META-­‐INF
•  ⽐比较发现	
  RDSS.SF	
  ⽐比	
  MANIFEST.MF	
  多了⼀一个
SHA1-­‐Digest-­‐Manifest	
  的值，这个值其实是
MANIFEST.MF	
  ⽂文件的	
  SHA1	
  接著用 base64	
编码的值，可以⼿手动验证，也可以从
android/tool源码分析。	
•  SHA1-­‐Digest-­‐Manifest	
  是	
  MANIFEST.MF	
  文件
的	
  SHA1	
  接著用	
  base64	
  编码的结果。
保护APP(1)
•  Isolate	
  Java	
  Program	
– 将较敏感或重要的	
  class	
  档案放在	
  server	
  中，利
用动态载入的方法，来避免骇客去反编译整支
程式	
•  Encrypt	
  Class	
  File	
– 使用	
  AES,	
  DES…	
  去加密重要的	
  class	
  档案，使骇
客即使反编译，也只能看到乱码	
•  Convert	
  to	
  Nacve	
  Codes	
– 利用	
  Android	
  NDK	
  在	
  Project	
  里面写	
  C/C++	
  使得
反编译的易读大大提升难度，更别提程式中的
加密演算法
保护APP(2)
•  Code	
  Obfuscacon	
– 可以使用”ProGuard”通过移除不用的代码，用
语义上混淆的名字来重命名分类、栏位和方法
等手段来压缩、优化和混淆你的代码	
•  Online	
  Encrypcon	
– hgp://sourceforge.net/projects/apkprotect/	
  这个
网站提供了跨语言（Java,	
  C/C++）的保护，可
以达到反编译反组译的的功能	
– hgps://dexprotector.com/node/4627	
  直接针对	
*.dex	
  档案进行保护，加密档案、讯息，隐藏	
funccon	
  call	
  ，确保完整性
结论
•  学习	
  Android	
  逆向，一步一步来，从根本出
发，从档案、系统、格式都要理解	
•  学习工具的使用，再强的高手都要使用工
具来帮助自己，减少时间的耗费	
•  学习签章、密码学，资讯安全最后的一道
防线，系统会有漏洞，人为会有疏失，密
码系统虽不保证绝对但增加了一定的难度	
•  学习不要心急，经验与知识是靠累积，大
家一起努力，加油	
延伸议题	
  and	
  Q&A
•  一般 Apk	
  的签章期限多久？	
•  Update	
  Apk	
  需要一样的签章吗？	
•  利用 jarsigner	
  签的Apk跟之前的签章相同吗？	
•  重新打包 Apk	
  会有风险吗？	
•  可以在不反编译或解压缩的情况下塞档案
进 Apk	
  吗？