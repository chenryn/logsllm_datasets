Control Plane Verification: Other tools verify properties of a
network’s control plane routing processes [1, 3, 4, 10, 12, 24, 31, 33].
These tools can be adapted to perform router equivalence check-
ing, as we showed for Minesweeper [3] in § 2. However, when
verification fails, these tools only provide individual, concrete coun-
terexamples, while Campion localizes to both headers and configu-
ration text. As we have seen by the experiment in Section 2, even
if we extend Minesweeper to produce multiple counterexamples
it is still not able to quickly find all errors. Further, this still leaves
the question as to which parts of the text caused each error. Re-
cent work extends Minesweeper to localize errors by leveraging an
SMT solver’s ability to provide unsatisfiable cores when verification
fails [28]. The approach localizes errors to specific SMT constraints,
but not to configuration lines or headers. Campion leverages the
BDD encoding of ACLs and route maps from Bonsai [4], which uses
BDDs to perform network abstraction, not router differencing or de-
bugging. Campion’s structural checks are reminiscent of rcc [11],
but our checks are designed to ensure behavioral equivalence and
to do so without incurring additional false positives over a modular
semantic check.
Outlier Detection: Benson et al. [5, 6] infer data-plane reach-
ability specifications from a network’s forwarding tables and use
these specifications in part to identify outliers. However, they only
consider the data plane and cannot localize back to the original
3https://github.com/google/capirca
758
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tang et al.
configurations. SelfStarter [16] infers parameterized configuration
templates for ACLs and route maps and uses them for outlier de-
tection. This approach uses sequence alignment and so requires
router configurations to be structurally similar. Further, SelfStarter
localizes configuration text but cannot localize headers.
Equivalence Checking: Equivalence checking is an old idea
beyond networks, and our SemanticDiff algorithm is similar in
spirit to prior work. For example, Ramos et al. [26] perform equiv-
alence checking of two C functions via pairwise comparisons of
execution paths. Because network ACLs and route maps are loop-
free, Campion is exhaustive, finding all differences and localizing
to all IP prefixes; equivalence checking of software is undecidable
in general.
7 Conclusion
Campion is a tool for debugging router configurations intended
to be behaviorally equivalent but which in fact are not. Unlike
prior work, Campion uses modular structural or semantic checks
to localize errors to the affected message headers and relevant
configuration lines. Our experience with a cloud provider and a
university indicates that Campion satisfies a real need by localizing
crucial errors.
Prior control-plane verification tools model a configuration
monolithically as a set of constraints. In contrast, Campion exploits
the modular structure of configurations to break up complex checks
of whole router behavior into smaller per-component checks. This
"bottom up" style eases localization, sidesteps reasoning about the
routing protocols, and allows simple structural checks to often be
used without additional loss of precision. None of these capabilities
would be possible without exploiting modularity. As in other forms
of verification, we believe exploiting modularity will be critical to
making real-world network verification and debugging effective.
Acknowledgments
Thanks to the SIGCOMM reviewers for their helpful comments.
Thanks to the network operators for using Campion and providing
feedback on its results. This work was supported in part by NSF
grants CNS-1704336 and CNS-1901510.
References
[1] Anubhavnidhi Abhashkumar, Aaron Gember-Jacobson, and Aditya Akella. 2020.
Tiramisu: Fast Multilayer Network Verification. In 17th USENIX Symposium
on Networked Systems Design and Implementation (NSDI 20). USENIX Associa-
tion, Santa Clara, CA, 201–219. https://www.usenix.org/conference/nsdi20/
presentation/abhashkumar
[2] Carolyn Jane Anderson, Nate Foster, Arjun Guha, Jean-Baptiste Jeannin, Dexter
Kozen, Cole Schlesinger, and David Walker. 2014. NetKAT: Semantic Foundations
for Networks. In Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages (San Diego, California, USA) (POPL ’14).
Association for Computing Machinery, New York, NY, USA, 113–126. https:
//doi.org/10.1145/2535838.2535862
[3] Ryan Beckett, Aarti Gupta, Ratul Mahajan, and David Walker. 2017. A General
Approach to Network Configuration Verification. In Proceedings of the Conference
of the ACM Special Interest Group on Data Communication (Los Angeles, CA,
USA) (SIGCOMM ’17). Association for Computing Machinery, New York, NY,
USA, 155–168. https://doi.org/10.1145/3098822.3098834
[4] Ryan Beckett, Aarti Gupta, Ratul Mahajan, and David Walker. 2018. Control
Plane Compression. In Proceedings of the 2018 Conference of the ACM Special
Interest Group on Data Communication (Budapest, Hungary) (SIGCOMM ’18).
Association for Computing Machinery, New York, NY, USA, 476–489. https:
//doi.org/10.1145/3230543.3230583
[5] Theophilus Benson, Aditya Akella, and David Maltz. 2009. Unraveling the
Complexity of Network Management. In Proceedings of the 6th USENIX Sympo-
sium on Networked Systems Design and Implementation (Boston, Massachusetts)
759
(NSDI’09). USENIX Association, Berkeley, CA, USA, 335–348. http://dl.acm.org/
citation.cfm?id=1558977.1559000
[6] Theophilus Benson, Aditya Akella, and David A. Maltz. 2009. Mining Policies
from Enterprise Network Configuration. In Proceedings of the 9th ACM SIGCOMM
Conference on Internet Measurement (Chicago, Illinois, USA) (IMC ’09). ACM, New
York, NY, USA, 136–142. https://doi.org/10.1145/1644893.1644909
[7] TODD Bishop. 2013. Xbox Live outage caused by network configuration prob-
https://www.geekwire.com/2013/xbox-live-outage-caused-network-
lem.
configuration-problem/
[8] Nikolaj Bjørner, Garvit Juniwal, Ratul Mahajan, Sanjit A. Seshia, and George
Varghese. 2016. ddNF: An Efficient Data Structure for Header Spaces. In Hard-
ware and Software: Verification and Testing, Roderick Bloem and Eli Arbel (Eds.).
Springer International Publishing, Cham, 49–64.
[9] Dragos Dumitrescu, Radu Stoenescu, Matei Popovici, Lorina Negreanu, and
Costin Raiciu. 2019. Dataplane equivalence and its applications. In 16th USENIX
Symposium on Networked Systems Design and Implementation (NSDI 19). USENIX
Association, Boston, MA, 683–698. https://www.usenix.org/conference/nsdi19/
presentation/dumitrescu
[10] Seyed K. Fayaz, Tushar Sharma, Ari Fogel, Ratul Mahajan, Todd Millstein, Vyas
Sekar, and George Varghese. 2016. Efficient Network Reachability Analysis
Using a Succinct Control Plane Representation. In Proceedings of the 12th USENIX
Conference on Operating Systems Design and Implementation (Savannah, GA, USA)
(OSDI’16). USENIX Association, USA, 217–232.
[11] Nick Feamster and Hari Balakrishnan. 2005. Detecting BGP Configuration Faults
with Static Analysis. In Proceedings of the 2Nd Conference on Symposium on
Networked Systems Design & Implementation - Volume 2 (NSDI’05). USENIX
http://dl.acm.org/citation.cfm?id=
Association, Berkeley, CA, USA, 43–56.
1251203.1251207
[12] Ari Fogel, Stanley Fung, Luis Pedrosa, Meg Walraed-Sullivan, Ramesh Govindan,
Ratul Mahajan, and Todd Millstein. 2015. A General Approach to Network
Configuration Analysis. In 12th USENIX Symposium on Networked Systems Design
and Implementation (NSDI 15). USENIX Association, Oakland, CA, 469–483. https:
//www.usenix.org/conference/nsdi15/technical-sessions/presentation/fogel
[13] Aaron Gember-Jacobson, Raajay Viswanathan, Aditya Akella, and Ratul Mahajan.
2016. Fast Control Plane Analysis Using an Abstract Representation. In Proceed-
ings of the 2016 ACM SIGCOMM Conference (Florianopolis, Brazil) (SIGCOMM ’16).
ACM, New York, NY, USA, 300–313. https://doi.org/10.1145/2934872.2934876
[14] Karthick Jayaraman, Nikolaj Bjørner, Jitu Padhye, Amar Agrawal, Ashish Bhar-
gava, Paul-Andre C Bissonnette, Shane Foster, Andrew Helwer, Mark Kasten, Ivan
Lee, Anup Namdhari, Haseeb Niaz, Aniruddha Parkhi, Hanukumar Pinnamraju,
Adrian Power, Neha Milind Raje, and Parag Sharma. 2019. Validating Datacenters
at Scale. In Proceedings of the ACM Special Interest Group on Data Communication
(Beijing, China) (SIGCOMM ’19). Association for Computing Machinery, New
York, NY, USA, 200–213. https://doi.org/10.1145/3341302.3342094
[15] Karthick Jayaraman, Nikolaj Bjørner, Geoff Outhred, and Charlie Kaufman. 2014.
Automated Analysis and Debugging of Network Connectivity Policies. Technical
Report MSR-TR-2014-102. Microsoft.
[16] Siva Kesava Reddy Kakarla, Alan Tang, Ryan Beckett, Karthick Jayaraman, Todd
Millstein, Yuval Tamir, and George Varghese. 2020. Finding Network Misconfig-
urations by Automatic Template Inference. In 17th USENIX Symposium on Net-
worked Systems Design and Implementation (NSDI 20). USENIX Association, Santa
Clara, CA, 999–1013. https://www.usenix.org/conference/nsdi20/presentation/
kakarla
[17] Peyman Kazemian, George Varghese, and Nick McKeown. 2012. Header Space
Analysis: Static Checking for Networks. In Proceedings of the 9th USENIX Confer-
ence on Networked Systems Design and Implementation (San Jose, CA) (NSDI’12).
USENIX Association, Berkeley, CA, USA, 9–9. http://dl.acm.org/citation.cfm?id=
2228298.2228311
[18] Ahmed Khurshid, Wenxuan Zhou, Matthew Caesar, and P. Brighten Godfrey.
2012. Veriflow: Verifying Network-wide Invariants in Real Time. SIGCOMM
Comput. Commun. Rev. 42, 4 (Sept. 2012), 467–472. https://doi.org/10.1145/
2377677.2377766
[19] TOM Krazit. 2019.
Networking issues take down Google Cloud in
the U.S. and Europe, YouTube and Snapchat also affected.
parts of
https://www.geekwire.com/2019/networking-issues-take-google-cloud-
parts-u-s-europe-youtube-snapchat-also-affected/
[20] Nuno P. Lopes, Nikolaj Bjørner, Patrice Godefroid, Karthick Jayaraman, and
George Varghese. 2015. Checking Beliefs in Dynamic Networks. In 12th USENIX
Symposium on Networked Systems Design and Implementation (NSDI 15). USENIX
Association, Oakland, CA, 499–512. https://www.usenix.org/conference/nsdi15/
technical-sessions/presentation/lopes
[21] Haohui Mai, Ahmed Khurshid, Rachit Agarwal, Matthew Caesar, P Brighten
Godfrey, and Samuel Talmadge King. 2011. Debugging the data plane with
anteater. ACM SIGCOMM Computer Communication Review 41, 4 (2011), 290–
301.
[22] Timothy Nelson, Christopher Barratt, Daniel J. Dougherty, Kathi Fisler, and
Shriram Krishnamurthi. 2010. The Margrave Tool for Firewall Analysis. In
Campion: Debugging Router Configuration Differences
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
//doi.org/10.1145/3341302.3342088
[30] DYLAN TWENEY. 2013.
5-minute outage costs Google $545,000 in rev-
https://venturebeat.com/2013/08/16/3-minute-outage-costs-google-
enue.
545000-in-revenue/
[31] Konstantin Weitz, Doug Woos, Emina Torlak, Michael D. Ernst, Arvind Krish-
namurthy, and Zachary Tatlock. 2016. Scalable Verification of Border Gateway
Protocol Configurations with an SMT Solver. SIGPLAN Not. 51, 10 (Oct. 2016),
765–780. https://doi.org/10.1145/3022671.2984012
[32] Hongkun Yang and Simon S Lam. 2015. Real-time verification of network proper-
ties using atomic predicates. IEEE/ACM Transactions on Networking 24, 2 (2015),
887–900.
[33] Fangdan Ye, Da Yu, Ennan Zhai, Hongqiang Harry Liu, Bingchuan Tian, Qiaobo
Ye, Chunsheng Wang, Xin Wu, Tianchen Guo, Cheng Jin, Duncheng She, Qing
Ma, Biao Cheng, Hui Xu, Ming Zhang, Zhiliang Wang, and Rodrigo Fonseca.
2020. Accuracy, Scalability, Coverage: A Practical Configuration Verifier on a
Global WAN. In Proceedings of the Annual Conference of the ACM Special Interest
Group on Data Communication on the Applications, Technologies, Architectures,
and Protocols for Computer Communication (Virtual Event, USA) (SIGCOMM ’20).
Association for Computing Machinery, New York, NY, USA, 599–614. https:
//doi.org/10.1145/3387514.3406217
[34] Ennan Zhai, Ang Chen, Ruzica Piskac, Mahesh Balakrishnan, Bingchuan Tian,
Bo Song, and Haoliang Zhang. 2020. Check before You Change: Preventing
Correlated Failures in Service Updates. In 17th USENIX Symposium on Networked
Systems Design and Implementation (NSDI 20). USENIX Association, Santa Clara,
CA, 575–589. https://www.usenix.org/conference/nsdi20/presentation/zhai
Proceedings of the 24th International Conference on Large Installation System
Administration (San Jose, CA) (LISA’10). USENIX Association, USA, 1–8.
[23] Networkworld.
2015.
What was wrong with United’s
router?
https://www.networkworld.com/article/2946070/what-was-wrong-with-
uniteds-router.html
[24] Santhosh Prabhu, Kuan Yen Chou, Ali Kheradmand, Brighten Godfrey, and
Matthew Caesar. 2020. Plankton: Scalable network configuration verification
through model checking. In 17th USENIX Symposium on Networked Systems Design
and Implementation (NSDI 20). USENIX Association, Santa Clara, CA, 953–967.
https://www.usenix.org/conference/nsdi20/presentation/prabhu
[25] Steve Ragan. 2016. BGP errors are to blame for Monday’s Twitter outage, not
DDoS attacks. https://www.csoonline.com/article/3138934/bgp-errors-are-to-
blame-for-monday-s-twitter-outage-not-ddos-attacks.html
[26] David A. Ramos and Dawson R. Engler. 2011. Practical, Low-Effort Equivalence
Verification of Real Code. In Computer Aided Verification, Ganesh Gopalakrishnan
and Shaz Qadeer (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 669–685.
[27] STAN Schroeder. 2013. Facebook Suffers Sitewide Errors for Many Users. https:
//mashable.com/2013/10/21/facebook-currently-doesnt-allow-status-updates/
[28] Ruchit Shrestha, Xiaolin Sun, and Aaron Gember-Jacobson. 2020. Localizing
Router Configuration Errors Using Unsatisfiable Cores. (2020).
[29] Bingchuan Tian, Xinyi Zhang, Ennan Zhai, Hongqiang Harry Liu, Qiaobo Ye,
Chunsheng Wang, Xin Wu, Zhiming Ji, Yihong Sang, Ming Zhang, Da Yu, Chen
Tian, Haitao Zheng, and Ben Y. Zhao. 2019. Safely and Automatically Updating
In-Network ACL Configurations with Intent Language. In Proceedings of the ACM
Special Interest Group on Data Communication (Beijing, China) (SIGCOMM ’19).
Association for Computing Machinery, New York, NY, USA, 214–226. https:
760
SIGCOMM ’21, August 23–27, 2021, Virtual Event, USA
Tang et al.
Dest-equivalence. We have 𝑓 (𝑑) = I(𝑑) which is the destination
router for N∗ and 𝑓 (𝑥) ≠ 𝐼(𝑑) for any 𝑥 ≠ 𝑑 by virtue of I being
an isomorphism.
Orig-equivalence. We have ℎ(𝑑𝑟) = 𝑑𝑟 since ℎ is the identify
function, which by construction is the route used at N∗.
Drop-equivalence. We have ℎ(𝑟) = 𝑟 since ℎ is the identity func-
tion, which trivially satisfies the drop-equivalence requirement that
ℎ(𝑟) = ⊥ ⇐⇒ 𝑟 = ⊥.
Rank-equivalence. By definition, we have 𝑟1 ⪯𝑝 𝑟2 ⇐⇒
ℎ(𝑟1) ⪯𝑝 ℎ(𝑟2) since ℎ is the identity function.
Trans-equivalence. From the fact that N and N∗ are equivalent
for I, it follows that F𝑝(C𝑝(𝑒), 𝑒, 𝑟) = F ∗
𝑝 (𝐼(𝑒)), 𝐼(𝑒), 𝑟). This
means that we have trans(𝑒, 𝑟) = trans∗(𝐼(𝑒), 𝑟) by definition. Sub-
stituting the definition of 𝑓 and ℎ, this gives us the equivalence:
ℎ(trans(𝑒, 𝑟)) = trans∗(𝑓 (𝑒), ℎ(𝑟)), which is the desired result.
Topology-abstraction. Finally,
from [4] are trivially satisfied since I is a homomorphism.
This result demonstrates that each protocol will compute the same
set of routing solutions. Thus the composition of the protocols will
also compute and select the same set of routes.
the topology requirements
𝑝 (C∗
□
Appendices are supporting material that has not been peer-
reviewed.
Appendix
Theorem 3.3 (Soundness). If networks N and N∗ are locally
equivalent for isomorphism I, then they have the same set of routing
solutions.
Proof. The proof is by a reduction to the stable routing prob-
lem [4]. First, we show that each protocol 𝑝 ∈ P forms a stable
routing problem (SRP). In particular for any given destination router
𝑑 ∈ V advertising initial route 𝑑𝑟 , 𝐼(𝑑) ∈ V∗ must also advertise
𝑑𝑟 since the protocol-specific advertisement configurations must be
the same. Given this, we can construct the SRP (T , R, 𝑑𝑟 , ⪯𝑝, trans)
for N and (T ∗, R, 𝑑𝑟 , ⪯𝑝, trans∗) for N∗, where:
= F𝑝(C𝑝(𝑒), 𝑒, 𝑟)
𝑝 (𝑒), 𝑒, 𝑟)
trans(𝑒, 𝑟)
trans∗(𝑒, 𝑟) = F ∗
𝑝 (C∗
We further relate the two SRPs with the abstraction (𝑓 , ℎ) where
𝑓 (𝑒) = I(𝑒) and ℎ(𝑟) = 𝑟.
The main theorem for abstract SRPs is that of equivalent routing
solutions when the abstractions are sound [4]. Thus, we must simply
prove that this is a sound abstraction. To do so, we prove each of
the sufficient conditions in [4]:
761