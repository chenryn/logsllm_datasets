To show that with this change the adversary and extractor still have negligible probability of
making the knowledge soundness experiment output 1, we closely follow the analysis we already
carried out by equations 1 through 8 above. We slightly deviate after (3) and obtain
Pr[GameKSND
CP.RGCom,CP.Z,CP.A,CP.E = 1]
...
≤ Pr[GdPf(π(cid:48)) ∧ ¬R(x, ulink) ∧ Rlink(c(cid:48), ulink, ωlink)] + negl(λ)
≤ Pr[GdPf(π(cid:48))∧¬R(x, ulink)∧Rlink(c(cid:48),ulink,ωlink)∧(¬Rlink(c(cid:48),u(cid:48),o(cid:48))∨u(cid:48) = ulink)] +
Pr[GdPf(π(cid:48))∧¬R(x, ulink)∧Rlink(c(cid:48),ulink,ωlink)∧Rlink(c(cid:48),u(cid:48),o(cid:48))∧u(cid:48)(cid:54)= ulink] + nλ
(3)
For the case u(cid:48) = ulink we proceed exactly as before. For the case u(cid:48) (cid:54)= ulink, deﬁning comsOpen :=
Rlink(c(cid:48), ulink, ωlink) ∧ Rlink(c(cid:48), u(cid:48), o(cid:48)), we have
Pr[GdPf(π(cid:48))∧¬R(x, ulink)∧comsOpen∧ u(cid:48) (cid:54)= ulink]
≤ Pr[GdPf(π(cid:48))∧¬R(x, ulink)∧comsOpen ∧ u(cid:48) (cid:54)= ulink∧R(u(cid:48), w(cid:48))] + nλ
≤ negl(λ)
where the two inequalities follow respectively from knowledge soundness and weak binding of ccΠ.
(cid:3)
B.2 Proof of Zero-Knowledge
, td
Skg(ck, R)
k) ← S(cid:48)
(cid:48)
k ) ← S◦
(cid:48)
(crs
,Dlink
(crslink, tdlink
(cid:48)
return (crs := (crslink, crs
(cid:48)
kg((ck
kg(R) ; Parse crs
(cid:48) as (ck
(cid:48)
u ,Dlink
w ))
), tdk := (tdlink
k
(cid:48)
, ek
(cid:48)
, vk
)
(cid:48)
k))
, td
Sprv(crs, tdk, x, (cj)j∈[(cid:96)])
(cid:48)
(cid:48)
Parse crs as (crslink, crs
); crs
, ek
k, x) ; πlink ← S◦
(cid:48)
, td
(cid:48) as (ck
(cid:48)
) ← S(cid:48)
(cid:48)
(c
, π
(cid:48)
(cid:48)
return π :=
c
, πlink, π
(cid:16)
prv(crs
(cid:48)
(cid:48)(cid:17)
(cid:48)
, vk
); tdk as (tdlink
k
(cid:48)
k)
, td
prv(crslink, tdlink
k
, c
, (cj)j∈[(cid:96)])
(cid:48)
Figure 13: Zero-knowledge simulators for our generic CP.
25 We can do this through an adversary that would ﬁrst run A and E and then return (c(cid:48), (ulink, ωlink), (u(cid:48), o(cid:48))).
53
HS kg(ck, R)
HS prv(crs, tdk, x, w)
(cid:48) ← ccΠ.KeyGen(R)
(cid:48)
(cid:48)
, vk
)
,Dlink
(cid:48)
crs
(cid:48) as (ck
(cid:48)
Parse crs
, ek
k ) ← S◦
(crslink, tdlink
(cid:48)
crs := (crslink, crs
return (crs, tdk)
x ,Dlink
kg(ck
) ; tdk := tdlink
k
u ,Dlink
ω )
(cid:48)
Parse x as (x, (cj)j∈[(cid:96)]) ; crs as (crslink, crs
Parse w as ((uj)j∈[(cid:96)], (oj)j∈[(cid:96)], ω) ; tdk as (tdlink
) ; crs
, td
(cid:48) as (ck
(cid:48)
k)
k
(cid:48)
(cid:48)
, ek
(cid:48)
, vk
)
(cid:0)c
(cid:48)
(cid:48)(cid:1) ←ccΠ.Prove(ek
(cid:16)
prv(crslink, tdlink
(cid:48)(cid:17)
, c
(cid:48)
(cid:48)
k
, πlink, π
c
(cid:48)
(cid:48)
, π
, o
πlink ← S◦
return
, x, (uj)j∈[(cid:96)], ω)
, (cj)j∈[(cid:96)])
Figure 14: Hybrids for proof of ZK of Theorem B.1 (diﬀerences with original simulators in blue).
Let A be an adversary. Since the scheme CPlink is zero-knowledge there exists a simulator
Proof
prv) such that keys and proof indistinguishability hold for A as in Deﬁnition 2.2.
S◦ = (S◦
kg,S◦
Similarly, since the scheme ccΠ is zero-knowledge26 there exists a simulator S(cid:48) = (S(cid:48)
prv) such
that keys and proof indistinguishability hold for A as in Deﬁnition 3.3. In Figure 13 we show
simulators S = (Skg,Sprv) for the CP scheme of Figure 2, and below we argue that keys and proof
indistinguishability hold for such simulators.
Proof Indistinguishability. ﬁxed arbitrary A, x, (cj)j∈[(cid:96)], (oj)j∈[(cid:96)], (uj)j∈[(cid:96)], ω, we deﬁne three
hybrids (Figure ??): H0,H1 and Hsim, and claim that H0 ≈ H1 ≈ Hsim, which, by deﬁnition of
the hybrids, implies proof indistinguishability. We skip the proof of the claim as it follows from a
standard hybrid argument.
kg,S(cid:48)
Below we use the same notation as in Deﬁnition 3.1: deﬁne x := (x, (cj)j∈[(cid:96)]), w :=
((uj)j∈[(cid:96)], (oj)j∈[(cid:96)], ω); the relation R over pairs (x, w) both tests commitment openings and
the underlying relation R. H0 is deﬁned as the probability that an adversary outputs 1 when a
proof is computed through CP.Prove. This is the same as in Deﬁnition 2.2 for the case in which
A takes in input an actual proof:
H0 := Pr
(R, auxR) ← RGCom(1λ) ; (crs, tdk) ← Skg(R) ; π ← CP.Prove(crs, x, w)
R(x, w) = 1 ∧ A(crs, auxR, π) = 1
:
In H1 we replace the sub-proof πlink for CPlink with its respective simulated version (see Figure
14 for a deﬁnition of HS prv):
(cid:35)
(cid:35)
(cid:35)
(cid:34)
(cid:34)
(cid:34)
H1 := Pr
(R, auxR) ← RGCom(1λ) ; (crs, tdk) ← Skg(R) ; π ← HS prv(crs, tdk, x, w)
R(x, w) = 1 ∧ A(crs, auxR, π) = 1
:
We deﬁne Hsim as the simulated proof output as in the standard zero-knowledge experiment
(Deﬁnition 2.2). We point out that the only change from H(cid:96) consists in replacing the actual
proof for ccΠ with its simulated version:
Hsim := Pr
(R, auxR) ← RGCom(1λ) ; (crs, tdk) ← Skg(R) ; π ← Sprv(crs, tdk, x)
R(x, w) = 1 ∧ A(crs, auxR, π) = 1
:
Figure 15: Hybrids for proof indistinguishability of CP.
26 We notice that for this proof we only need the zero-knowledge of ccΠ, and it does not matter if ccΠ has binding
or weak binding.
54
Keys indistinguishability: we proceed by a standard hybrid argument. Consider the hybrid
simulator HS kg in Figure 14. By construction of HS kg and the keys indistinguishability for S(cid:48)
kg,S◦
we have that:
kg
Pr(cid:2)(ck, R, auxR) ← RGCom(1λ), crs ← CP.KeyGen(ck, R) = 1 : A(ck, crs, auxR) = 1]
≈ Pr(cid:2)(ck, R, auxR) ← RGCom(1λ), (crs, tdk) ← HS kg(ck, R) : A(ck, crs, auxR) = 1(cid:3)
≈ Pr(cid:2)(ck, R, auxR) ← RGCom(1λ), (crs, tdk) ← Skg(ck, R) : A(ck, crs, auxR) = 1(cid:3)
(cid:3)
C Supplementary Results on CPlink
This section contains the security proof and an extension of the CPlink scheme.
C.1 Proof of CPlink Security
The following theorem shows that CPlink is knowledge-sound and zero-knowledge assuming so is ssΠ.
Theorem C.1. Let CPlink.RG be a relation generator and CPlink.Z be an auxiliary input distri-
bution. If ssΠ is KSND(ssΠ.RG, ssΠ.Z) where ssΠ.RG is a relation generator as in Figure 16 and
ssΠ.Z = CPlink.Z,then the CP-SNARK construction CPlink given above is KSND(CPlink.RG, CPlink.Z).
Furthermore, if ssΠ is composable ZK for ssΠ.RG, then CPlink is composable ZK for CPlink.RG.
ssΠ.RG(1λ) → ([M]1, auxlink
R )
[h]1 ← Ped.Setup(1λ) using distribution D
(Rlink, auxlink
Deﬁne [M]1 from [h]1, Rlink
R ) ← CPlink.RG(1λ)
Figure 16: Relation generator on which we base ssΠ security.
Knowledge Soundness. Consider an arbitrary adversary A against CPlink. From A we can con-
struct an adversary A(cid:48) against ssΠ as follows.
(cid:48)
return (c
Extract [f ]1, [h]1 from [M]1 ; ([x]1, π) ← A(cid:0)([h]1, Rlink), crs, auxR, auxZ
A(cid:48)([M]1, crs, auxR, auxZ) :
E(([h]1, Rlink), crs, auxR, auxZ) :
Compute matrix [M]1 ; w ← ssΠ.E([M]1, crs, auxR, auxZ ) ; Parse w as ((oj)j∈[(cid:96)], o
return ((uj)j∈[(cid:96)], (oj)j∈[(cid:96)], o
, (cj)j∈[(cid:96)], π)
(cid:48)
)
(cid:1) ; Parse [x]1 as ( (cj)j∈[(cid:96)], c
(cid:48)
)
(cid:48)
, (uj)j∈[(cid:96)])
55
j∈[(cid:96)]
By knowledge soundness of ssΠ, for every such A(cid:48) there is an extractor ssΠ.E, that we can use to
build the above extractor E for A. In particular, the knowledge soundness of ssΠ and the deﬁnition
of M give us that E’s output is such that the following probability is negligible:
Pr(cid:0)ssΠ.VerProof(vk, (cj)j∈[(cid:96)], c(cid:48)) = 1 ∧(cid:0) (cid:95)
(cid:1) ∨ c(cid:48) (cid:54)= (o(cid:48), u(cid:62)
negl(λ) using: GdPf := CPlink.VerProof(vk, c(cid:48), (cj)j∈[(cid:96)], π) = 1, BadComm := (cid:87)
(cid:0)cj (cid:54)= (oj, u(cid:62)
Hence we can conclude that Pr[GameKSND