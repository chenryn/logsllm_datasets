title:A study of the internal and external effects of concurrency bugs
author:Pedro Fonseca and
Cheng Li and
Vishal Singhal and
Rodrigo Rodrigues
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
A Study of the Internal 
and External Effects of Concurrency 
Bugs 
Pedro Fonseca, Cheng Li, Vishal Singhal and Rodrigo Rodrigues 
Max Planck Institute 
for Software Systems (MPI-SWS) 
Abstract 
and therefore 
server. 
difficult 
important 
for handling 
programming 
Concurrent 
performance 
understanding 
to avoid and diagnose, 
of their characteristics. 
In this paper 
bugs in MySQL, a widely 
is increasingly 
gains in the multi-core 
a study of concurrency 
W hile previous 
studies 
bugs exist, they have centered 
for 
era, but it is 
task. Concurrency 
bugs are 
in 
such bugs, we need a 
achieving 
also a difficult and error-prone 
particularly 
order to improve methods 
better 
we present 
used database 
concurrency 
on the causes of these bugs. In this paper we provide a 
complementary 
for 
understanding 
time. Our study uncovered 
as the existence 
rency bugs, which silently 
exposed to the user potentially 
light several 
reliable 
data structures 
and are 
much later. We also high­
of our findings for the design of 
focus on their effects, 
how to detect or tolerate 
of a significant 
corrupt 
such bugs at run­
interesting 
facts, 
number of latent concur­
which is important 
implications 
concurrent 
systems. 
several 
such 
of real-world 
their attention 
1 Introduction 
We are witnessing 
an unprecedented 
rise in the paral­
The number of cores in com­
and quad-core processors 
increasing. 
Today, 
are commonplace; 
In­
announced 
systems. 
has been steadily 
lelism of computer 
modity processors 
dual-core 
tel has recently 
specialized 
ing manufactured 
of processors 
have traditionally 
ware. Clock speeds no longer increase 
as a result, 
icantly 
for software 
processing 
software 
to extract 
capacity, 
in a more parallel 
way. 
programmers 
performance 
increased 
software 
an 8-core processor 
[3],  and 
CPUs with  even  more  cores 
be­
[1,2].  However, 
increasing 
are currently 
the number 
is not the way by which CPU manufacturers 
the performance 
of their hard­
no longer automatically 
at a significant 
rate; 
runs signif­
faster as new chips are deployed. 
Consequently, 
gains out of the extra 
will have to design their 
that can occur in concurrent 
programming 
for programmers 
applications; 
thread interleavings 
combined with all possible 
It is difficult enough 
is challenging 
and of­
to 
and the flow of execu­
about all the 
reasoning 
However, parallel 
ten error prone. 
reason about all the possible inputs 
tion in single-threaded 
different 
programs, 
difficult. 
to concurrency 
thread interleavings, 
tify, analyze, 
the same time this 
dling them (e.g., 
fault recovery) 
executions 
non-determinism 
using fault detection, 
iden­
to reproduce, 
mistakes. 
But at 
can be essential 
in han­
fault tolerance, 
or 
redundant, 
diverse 
thread interleavings. 
that is inherent 
under certain 
bugs, which are only triggered 
the non-determinism 
such programming 
Additionally, 
makes it difficult 
using different 
since it enables 
exploring 
or correct 
is even more 
inputs, 
To improve methods for addressing 
of these bugs. While a few studies 
understanding 
concurrency 
bugs, it 
of the char­
of concur­
they either focus on artificially 
bugs, or, in the few cases where real applications 
they mostly focus on the causes ofthese bugs, 
to whether they cause 
to have a thorough 
is important 
acteristics 
rency bugs exist [11,14,22], 
injected 
were studied, 
and limit the study of their effects 
deadlocks 
or not. Such studies 
what kinds of programming 
applications, 
tools for 
finding these bugs [27]. 
are useful for determining 
mistakes 
are typical 
of such 
and can drive the design of program analysis 
However understanding 
the effects of concurrency 
set of reasons 
bugs 
allows 
existing 
detection 
Analyzing 
for a different 
development 
to study their causes. 
than why it is in­
the effects 
approaches 
it can serve 
is important 
teresting 
us to assess how efficiently 
handle these bugs. And, more importantly, 
as a guide for further 
methodologies 
from the faults and 
gies designed 
errors caused by such bugs. To give a simple example, 
it is 
important 
failure 
a Byzantine 
using multi-threaded 
Byzantine-fault-tolerant 
the server returns 
in order to gauge the effectiveness 
replicas 
but also of tools and methodolo­
and recover 
bugs cause 
replies 
of 
in a 
that detect, 
to tolerate 
to ensure fault diversity 
how often concurrency 
to understand 
replication 
modes where 
not only  of 
failure), 
incorrect 
scheme [10]. 
(i.e., 
tools and 
In this paper we provide the complementary 
angle of 
studying 
lel applications. 
the effects of concurrency 
bugs that affect paral­
study real 
we exhaustively 
In particular, 
·Currently 
a student at BITS Pilani, India.  Work  done  during  his  in­
ternship 
at MPI-SWS. 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
221 
DSN 2010: Fonseca et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:53 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
concurrency 
widely-used 
bugs that were found in MySQL [5], a mature, 
database 
server application. 
Our study  produced 
several  interesting 
findings. 
First, 
number of latent concurrency 
visible 
bugs, when triggered, 
do not be­
to users.  Instead, 
and 
much later cause an application 
to 
we found a non-negligible 
bugs. Latent concurrency 
come immediately 
rency bugs first silently 
only potentially 
become externally 
been anecdotally 
their extent, 
visible!.  Latent 
and their internal 
concurrency 
and external 
[13], but we are the first to study 
failure 
bugs have 
these concur­
reported 
internal 
corrupt 
data structures, 
effects in detail. 
A second finding is related 
to bugs that cause the ap­
We 
failures 
Byzantine 
to fail in ways other than silently 
plication 
crashing. 
characterize 
that are caused by concur­
rency bugs. Some of our findings were surprising, 
like the 
fact that these bugs cause subtle changes in the output that 
would be difficult 
ing tools, or the fact that there exists a strong correlation 
between bugs that cause Byzantine 
to find using existing 
and latent 
run-time 
failures 
monitor­
bugs. 
Our findings have implications 
for the 
that address 
concurrency 
design of tools and 
bugs. For the con­
of the reader we present 
a summary of our main 
methodologies 
venience 
findings together 
The remainder 
with their implications 
in Table 1. 
of the paper is organized 
our methodology. 
of the MySQL application 
in Section 
of our study are presented 
2 we describe 
as follows. 
In 
We then present 
in Section 
3. The 
4 and in Sec­
We survey related 
work 
Section 
an overview 
results 
tion 5 we discuss 
in Section 6 
their implications. 
and we conclude 
in Section 
7. 
2 Methodology 
In this section we present the methodology 
that we 
adopted to find and analyze 
ology is similar 
to one used in previous 
bugs. Our method­
work [22]. 
concurrency 
2.1 Choice of concurrent application 
We selected 
MySQL as the target of our study for three 
of the IT infrastructure 
component 
database. 
are a critical 
and MySQL represents 
a substantial 
database 
sys­
for 
that there is market pressure 
this is 
process, so 
where finding 
and 
main reasons. First, it is a widely deployed 
Databases 
of many corporations, 
share of that market (about 1/3 of deployed 
tems [4]). This implies 
a quality 
development 
an instance 
Second, it is an open source appli­
eliminating 
cation with a well-maintained 
Having 
access to the source code and the bug logs is necessary 
it is a  highly 
an in-depth 
concurrent 
plication 
and it has a large code base. 
of well-maintained 
bugs matters. 
with rich semantics, 
bug report database. 
and maintenance 
analysis. 
for 
ap­
software 
Finally, 
lThe term latent 
bug is used in other papers [8,18,20] with an unrelated 
meaning -that of a bug that went undetected 
by the programmer. 
These characteristics 
of the biggest 
applications 
challenges 
make MySQL representative 
that we will be facing as complex 
of some 
become more and more concurrent. 
on 
understanding 
we provide some brief background 
our results. 
MySQL, which will help in better 
In  Section  3 
2.2 Concurrency bug selection 
The MySQL versions 
that are affected 
by the bugs that 
in the bug report database 
were reported 
3.x to 6.x and the oldest bug reports date 
contains 
The MySQL bug report database 
range from version 
back to 2003. 
a very large 
number of bugs. Therefore, 
automatically 
by performing 
bugs that are not likely to be relevant 
filtered 
a search query on the bug report database. 
bugs based on (1) the keywords 
to make the task feasible, 
we 
Our search query filtered 
contained 
and (3) the bug category. 
in the bug description, 
(2) the status of the bug 
synchroniza­
for bugs 
terms: 
atomic, 
keywords 
with concur­
compete, 
the following 
concurrency, 
commonly associated 
the MySQL bug report database 
We searched 
that contained 
rency bugs. Such keywords included 
lock, acquire, 
tion, etc. In addition 
tus was closed (i.e., 
by the developers/debuggers). 
ing to also consider 
and can't repeat) 
detailed 
won't contain 
reports 
the bugs they report. 
discussions 
patches. 
bugs with other status (such as won'tfix 
to have 
they 
in general, 
Without  reasonably 
complete 
bug 
to this we searched 
bugs that are no longer under analysis 
It would have been interest­
and more importantly, 
it would not be possible 
but these bug reports 
to thoroughly 
for bugs whose sta­
are not likely 
understand 
Next, to exclude bugs from stand-alone 
to the multi-threaded 
server, 
utilities 
that are 
our search query also 
the search to bugs that were related 
including 
to MySQL 
those that were within the Storage En­
unrelated 
limited 
Server, 
gines category 
[26]. 
analyzed 
revealed 
Finally, 
we randomly 
sampled a subset of the bugs that 
them. 
that some of the bugs that 
matched our search query and manually 
The manual inspection 
matched the search query were not concurrency 
fined in Section 
tion, we excluded 
tain enough information 
obtained 
alyzed, 
number of bugs analyzed 
bugs for which the bug log did not con­
we 
bugs that were an­
a number that is very close (or even superior) 
to the 
[11,22]. 
bugs (de­
them. In addi­
a final set with 80 concurrency 
3) and so we also excluded 
in previous 
to analyze 
studies 
them. After filtering, 
Table 2 shows the bug count across the different 
stages 
of the bug selection 
process. 
Note that this selection 
process 
has two main limitations. 
the search query can miss some actual concurrency 
First, 
bugs. However, 
tain any of the main keywords 
is also more likely 
a concurrency 
bug report that does not con­
associated 
with concurrency 
to be incomplete 
and therefore 
more dif-
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
222 
DSN 2010: Fonseca et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:53 UTC from IEEE Xplore.  Restrictions apply. 
20lO IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
of concurrency 
to the opening dates of our sampled bugs,  This 
bugs 
shows the increasing 
need for new tools and 
of fixed bugs that involved 
concurrency 
methodologies 
to handle concurrency 
bugs. 
Implication 
effects 
of concurrency 
Finding 
Evolution 
According 
the proportion 
more than doubled over the last 6 years. 
External 
We found slightly 
deadlock 
bugs (40%). 
We found a significant 
bugs (15%). 
Immediacy 
Latent concurrency 
numbers (15%). 
of effects 
fraction 
bugs 
concurrency 
Of the latent 
mantic bugs and conversely 
were also latent 
Semantic 
The vast majority 
subtle violations 
concurrency 
of semantic 
bugs 
bugs. 
of application 
more non-deadlock 
bugs (63%) than Having good tools to handle deadlock 
of semantic/Byzantine 
bugs is not 
enough -we also need to handle non-deadlock 
bugs. 
Techniques 
for Byzantine 
handle a considerable 
of concurrency 
bugs. 
fault tolerance 
fraction 
can potentially 
bugs were also found in significant 
such as proactive 
recovery 
Tools and methodologies 
can be leveraged 
numbers of concurrency 
bugs. 
to mask errors caused by a significant 
bugs analyzed, 
92% of the semantic 
92% were se-Given the high correlation  between 
of 
that handle one class should also han-
bugs bugs, techniques 
these classes 
die the other. 
bugs (92%) generated Run-time 
semantics.  application-specific 
monitoring 
checks to detect the presence 
of se-
tools will have to devise complex 
data structures 
Internal 
Most of the examined 
tiple data structures. 
latent 
bugs (92%) corrupted 
that detect inconsistencies 
mul-Techniques 
structures 
ing data structures 
could be used to detect latent 
individually 
might not suffice. 
among data 
bugs. Analyz-
mantic bugs. 
of bugs 
and fixing complexity 
Severity 
Latent bugs were found to be slightly 
non-latent 
bugs. 
Latent bugs were found to be easier to fix than non-Further 
latent 
bugs. 
ity and, therefore, 
latent 
bugs should also be addressed. 
studies 
should be performed 
to analyze 
the rea-
sons for this difference. 
more severe than Latent bugs are an important 
threat 
to software 
reliabil-
Table 1. Main findings of this study and their implications. 
presented here is described in Section 2 and the results are explained in detail in Section 4. 
The methodology for collecting 
the data 
Phase 
Total MySQL server closed bugs 
Concurrency 
Sampled bugs 
Concurrency 
bugs analyzed 