Certainly! Here is a more polished and coherent version of your text:

---

In other words, I believe this is a substitution cipher converted to hexadecimal. The even distribution suggests that it is some form of ciphertext.

There are other similar message clusters, so if you're interested in this type of analysis, feel free to dive in!

Next, let's examine the percentage of messages delivered to AAM via a nymserver or remailer. These figures may be somewhat imprecise, as some PGP-encrypted or remailed messages are actually sent to nyms, and some PGP messages might go through unknown remailers. However, we can see that a significant portion of the messages are directed to nyms, which will be important when I later discuss the number of active nymservers.

Moving on to the more intriguing statistics, let's delve into the hundreds of thousands of encrypted messages. For those unfamiliar, OpenPGP consists of various packet types, each serving a different function. There is a packet type for messages encrypted with a public key and another for messages encrypted with a passphrase.

Let's explore these packet types. The graphs below show the prevalence of each packet type, such as packet 1 followed by packet 9. The top five, listed at the bottom, are the most common ones.

- Packet 1: Messages encrypted to a public key.
- Packet 3: Messages encrypted to a passphrase.
- Packet 9 (or 18 for the new style): The actual ciphertext of the message. I have also distinguished between messages sent to a single public key and those sent to multiple keys.

Two packet types are unusual: packets 6 and 7, which are typically seen after decrypting a message. These are plaintext packets. There are a few messages that appear to be OpenPGP data, complete with the "BEGIN PGP MESSAGE" header and base64 encoding, but they are actually plaintext. They are simply hiding in plain sight.

Packet type 8, on the other hand, contains compressed plaintext data. Unfortunately, it appears to be nonsensical. I did not spend much time on it, assuming "Iran ongoing bizarre sabbatical" was generated by a Markov chain. 

Now, let's analyze the messages sent to public keys. It's straightforward to do so based on the public keys in the message. I promise the analysis will become more complex later, but for now, let's look at KeyIDs.

KeyIDs are a powerful tool for segmenting the data. I'll illustrate a couple of examples where KeyIDs provide additional insights. One KeyID was consistently messaged through a nymserver, except for two messages sent via EasyNews. By tracking the unique EasyNews gateway and User Agent, we found that the same person also messaged another KeyID. This allows us to make inferences across multiple types of metadata.

I mentioned earlier that I separated messages sent to a single public key from those sent to multiple keys. If a message is sent to a single key, we can't determine much, especially since the key ID is often obscured. However, if a message is sent to multiple public key IDs, we can create communication graphs. While these are not strict communication graphs (i.e., Alice sending a message to Bob), they show that Alice and Bob both received the same message. In many cases, people include themselves in messages they send, allowing them to read their own sent mail.

Here's a quick legend for the graphs:
- Green nodes: Public keys found on a keyserver.
- Circular nodes: Keys that received messages individually. The size of the circle and the width of the line indicate the number of messages received.

We have a symmetrical 5-person graph, larger communication networks, and a massive web of messages. Some graphs show central communication points, while others suggest that not everyone knows everyone else, reflecting a more realistic model of the Internet.

After the PRISM revelations, I felt uncomfortable imagining that the NSA might be doing something similar to me and my friends. Nonetheless, let's discuss brute-forcing ciphertext. Recall that packet type '9' was the most common, with over 700,000 instances. This packet contains the actual ciphertext, but it doesn't specify the encryption algorithm or how to obtain the key.

The key is in another packet: packet type 1 (for public keys) or packet type 3 (for passphrases). However, there are no preceding packets for packet type 9, indicating a discrepancy between the specification and the observed data.

Further investigation revealed that the IDEA algorithm is used with the session key calculated as the MD5 hash of the passphrase. This is an outdated method, and better alternatives have been available in OpenPGP since the late 1990s. Given that my dataset is from 2003 onwards, this is a concerning situation.

MD5 hashes can be computed very quickly, but that's only half the challenge. We must then use the output to decrypt the IDEA-encrypted data and detect if the result is valid plaintext. While randomness tests can be slow, we need to go as fast as possible. I spent a lot of time writing CUDA-powered code and brute-forced these on GPUs for many months. One of the first results I obtained was:

[Insert Result]

This didn't make me feel great, but I persisted.

More encrypted messages were recursively encrypted PGP messages. Here's a breakdown of the recursion levels:
- About 10,000 decryptions into a public key message.
- Another 2,200 into a password-protected PGP message.
- 49 messages went two layers deeper.
- 5 messages went four layers deep.

While these numbers may not seem impressive given the number of messages I was trying to brute-force, it's worth noting that I was attempting to crack encryption keys used by some of the most paranoid individuals on the Internet. I'm sure others could do better, but I'm not too disappointed with these results.

To explain the high number of recursively encrypted messages, I need to discuss remailers. How many of you have heard of Mixmaster and Mixminion? These tools are known as Type II and Type III remailers, implying the existence of a Type I remailer. Type I remailers are largely defunct, but their protocol is still used in Mixmaster.

Type I remailers have a complex protocol. The manual for using most, but not all, of the options supported by Type I remailers is extensive. The differences between Remail-To, Remix-To, Anon-To, and Encrypt-To are not immediately clear, and using a Type I remailer requires manually typing out each option, as there is usually no graphical user interface.

Earlier, I mentioned Type I nymservers. These are the primary recipients of these directives. You would create a mix network chain of directives, encrypting them to different nodes, which would serve as your reply block. When someone emails your nym, the nymserver executes your reply block, routing the message through each step until it reaches your real email address or a Usenet group like AAM.

We still see these messages posted, though only two Type I Nymservers are currently operational: Zax and Paranoici. Paranoici is run by a group of Italian hackers in Milan, who also manage Autistici and Inventati, which can be thought of as an Italian version of RiseUp.

In conclusion, the nested PGP messages are Type I nymserver messages, with the keyID being the ultimate nym owner. If I don't have a keyID, there's an additional layer of symmetric encryption I haven't cracked. When you download Type I nymserver messages, you know all the passwords, peel them off one by one, and finally use your private key.

This is a list of recipients with more than five messages, showing a concentration towards a few nyms.

Communication graphs and brute-forcing are just the beginning of my analysis of AAM. The majority of my time was spent on correlation. Even if I don't know who a message is to or what it says, it's valuable to know that it's to the same person as another message or was sent by the same sender.

Why is this valuable? Let's revisit this slide. You can't tell if someone has received a message in a shared mailbox. But if I can correlate one message with another, I can start determining that an unknown person has received a message. Once I know these two messages are related, I can pay attention to the timestamp and length. This goes further because people tend to respond to messages they receive. Since I know if someone has sent a message, it might be a reply to a message they just received.

Let's discuss correlation and more analysis of AAM. First, it's obvious that you can correlate messages with a single, constant subject. Nearly half of all messages posted to AAM have such subjects. These tend to be older and have tapered off recently, which makes sense.

If you've looked at AAM, you've probably seen random hexadecimal subjects. Let's correlate them. There are two algorithms for generating these subjects: Esubs (Encrypted Subjects) and Hsubs (Hashed Subjects). The purpose is to quickly identify which messages are for you and which you should ignore, saving you an expensive public key operation. Personally, I think we could probably eliminate this step, but it remains in use.

Esubs have two secrets: a subject and a password. Hsubs have a single secret: a password. Brute-forcing esubs is more difficult, and I ran out of time. Interestingly, hsubs, created by Zax, are newer and make up an increasing percentage of subjects. Hsubs include a random piece that acts as an Initialization Vector or salt. While I could try to integrate these into existing SHA256 password crackers, it would be cumbersome due to truncation. So, I had to write my own GPU cracker again.

I cracked about 3,500 hsubs, a better percentage than the messages I brute-forced, but still not a great one. Keep in mind, these are passwords of the most paranoid people on the Internet.

I found an interesting set of messages with the hsub "DANGER WILL ROBINSON," used by some, but not all, messages to a couple of particular KeyIDs. I cracked all the hsubs of another KeyID with the passwords "testicular" and "panties."

If you don't know what schmegma is, don't look it up.

If HSUBs and ESUBs are used to let a nym owner identify their messages, can we do something similar? Suppose we want to target the nym Bob. We can send a large, nonsense-filled message to Bob and wait for a large message to appear in AAM. Zax's nymserver is instantaneous, making size-based correlation easy. Type I nymservers are not necessarily instantaneous, making it a bit more challenging, but it's still feasible by carefully tracking the size and repeating the process a few times.

This method works efficiently, allowing us to target a specific message for hsub cracking.

---