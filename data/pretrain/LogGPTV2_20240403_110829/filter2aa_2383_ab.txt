In other words, I think it’s a substitution cipher into Hexadecimal.  And the even 
distribution implies it’s ciphertext of some sort. 
And there are other message clumps similar to this, so if you’re into this sort of 
analysis, have at it! 
30 
So the next thing to look at is what percentage of messages were delivered to AAM 
via a nymserv or a remailer.   
These numbers are going to be a bit off, since some of the PGP or Remailed messages 
are actually to nyms, and some of the PGP messages may be through remailers I 
don’t know about.  But it’s something.  We can see that a large portion are messages 
to nyms, which will be important when I eventually tell you how many nymservs are 
actually running. 
31 
All right, so those somewhat interesting statistics aside – let’s start diving into all of 
those hundreds of thousands of encrypted messages.  So if you didn’t know, 
OpenPGP consists of packets, and each packet type does something slightly different.  
There’s a packet type for a message encrypted to a public key, and a different packet 
type for a message encrypted to a passphrase. 
32 
So what are these packet types.  These graphs show the popularity of each of the 
different packet signatures, i.e. packet 1, followed by packet 9 
The top 5, the ones on the bottom, are the ones you’d expect to see.   
33 
1 is messages encrypted to a public key.   
34 
3 is Messages encrypted to a passphrase.   
35 
The actual ciphertext of a message is 9 or 18 for old-style or new-style.  And I 
separated out the messages sent to a single public key vs. ones sent to multiple. 
36 
There are two that are weird.  These are packet types you’d expect to see after you 
*decrypted* a message.  These are plaintext packets.  There are actually a small 
number of messages that look like OpenPGP data – they’ve got the BEGIN PGP 
MESSAGE ticker and they’re base64ed – but they’re actually plaintext.  Just hiding in 
plain sight.   
37 
And if we look at packet type 8 – this is what we get.  It really just is compressed 
plaintext data.  Unfortunately, it’s also nonsense.  I don’t know if there’s a code there 
or not, but I didn’t spend any time on it, I figured “Iran ongoing bizarre sabbatical” 
probably came out of some makov generator somewhere.  So I moved on to… 
39 
The messages that were sent to public keys. It’s super obvious to do analysis based 
on the public keys in the message.  I promise you the analysis gets more complex 
later.  But lets look at KeyIDs. 
40 
So obviously the KeyIDs are a pretty powerful segmenting tool.  So I wanted to 
illustrate a couple of examples where the KeyIDs tell us more. 
There was one KeyID that was messaged very reliably through a nymserv.  Except for 
2 messages sent through EasyNews.  If you track down the very unique easynews 
gateway + User Agent, we find that that person also messages another KeyID.  We 
can start making inferences across multiple types of metadata. 
41 
Now I mentioned that I separated the messages that were sent to a single public key 
from the ones sent to multiple.  If a message was sent to a single key, we don’t know 
too much about it, especially because usually they throw the key ID, so you can’t tell 
what public key it was encrypted to.  But if a message is sent to more than one public 
key ID, then… 
42 
You can draw communication graphs.  Now it’s not a strict communication graph in 
the sense that a message was sent from Alice to Bob, technically it’s that Alice and 
Bob both received the same message.  But in some, if not most, situations, people 
include themselves on messages they send… so they can read their own sent mail. 
43 
So a quick legend to these graphs, if a node is green, that means I was able to find the 
public key on the a keyserver. 
If the node is a circle, that means that key received messages individually.  And the 
size of the circle, and the width of the line, means how many messages they received. 
So we have this very nice symmetrical 5-person graph here. 
44 
And then we’ve got these much larger communication networks here. 
45 
And then we’ve got this huge spiderweb of messages. 
46 
And we’ve got a couple of interesting graphs with central communication points. 
47 
And then we’ve got a couple of more interesting networks.  And I think these are 
interesting because they imply that not everybody knows everybody else.  This graph 
and the next one really may be a model of the actual Internet where people will 
email other people and in a complex, interconnected, but not fully connected way.  
This is a fairly low-volume network 
48 
While this one has quite a few higher-volume folks participating. 
49 
And then here’s the rest of them the simpler, 2-person communications.   
50 
So I was working on the communication graphs after all the PRISM stuff came out, 
and I was feeling distinctly uncomfortable imagining that this is what the NSA is 
probably doing to me and my friends.   
But the show must go on, so let’s talk about brute forcing ciphertext.  Now if you’ll 
recall this graph, you saw that packet type ‘9’ was by far the most common packet 
type found – over 700,000 of them.  Now this packet type is interesting so let’s dive 
into a little bit. 
51 
This packet is the actual ciphertext of the message.  It is only, the encrypted data.  It 
doesn’t say what algorithm it is, and it doesn’t explain how to get the key. 
52 
The key, is in another packet.  It’s in packet type 1 (for public keys) or 3 (for 
passphrases). 
53 
But if you’ll recall from that graph, there aren’t any packets that precede packet type 
9.  We’ve got a disconnect from what the spec says, and the data we see. 
54 
Well if we keep reading, we’ll find this gem.   
“the IDEA algorithm is used with the session key calculated as the MD5 hash of the 
passphrase” 
55 
Yea.  The MD5 of the password. 
This is absolutely legacy, and we’ve had better ways of doing this in OpenPGP since 
the late 90s.  So while in the very beginning of AAM, this might have been excusable, 
the fact that my dataset was from 2003 onwards makes this a pretty horrible 
situation. 
So we know how to MD5s really, really fast.  But that’s only half of this.  We have to 
take the output and use it in an IDEA decryption.  And then we have to detect if what 
we decrypted to was an actual plaintext, or just random.  And while you can run 
randomness tests – they’re slow, and we’re brute forcing here – we want to go as fast 
as possible.  So while I spent a lot of time at this point, wrote a lot of code and did a 
lot of optimizations, it doesn’t play very well into the slides, so I’ll just say that I wrote 
a lot of CUDA-powered code and brute forced these on GPUs for many months. 
And one of the first results I got, actually a few dozen of these messages, was 
56 
This did not make me feel terribly good about myself.  But I persevered. 
57 
58 
More encrypted messages.  Recursively encrypted PGP messages. 
59 
In fact, here’s a breakdown of how many recursions I hit.  I got about 10,000 
decryptions into a public key message, and another 2200 into another password-
protected PGP  message.  I was able to take 49 messages two layers deeper, and 5 
messages 4 layers deep. 
Now, for the number of messages I was trying to brute force, these numbers may not 
seem very impressive.  While I certainly am not the best password cracker here at 
Defcon, I think it’s worth bearing in mind that I am not trying to crack passwords, I’m 
trying to crack encryption keys used by some of the most paranoid people on the 
Internet.  So I’m sure people can do better, but I don’t feel too bad about these 
results. 
But I haven’t explained why there are so many recursively encrypted messages. 
60 
And to explain that I have to talk about Remailers.  So how many have heard of 
Mixmaster and Mixminion.   
Okay a good number of you.  Well these tools have been dubbed Type II and Type III 
remailers.  Which means there must be a Type I remailer somewhere.  Well, Type I 
remailers are basically dead, but their protocol lives on in Mixmaster.   
61 
And boy, what a protocol. 
This is the manual of how to use most, but not even all, of the options supported by 
Type I remailers.   
62 
Some of the Type I directives are on the left.  Now, what’s the difference between 
Remail-To, Remix-To, Anon-To, and Encrypt-To?  I sure as heck don’t remember, and 
I’ve been studying this for a while.  And to use a Type-I, you have to type each of 
these options out, yourself.  There’s usually no GUI here. 
I had talked in the beginning about Type I nymservs?  Well, Type I nymservs are the 
main recipient of these directives.  You would string together a mix network chain of 
directives, encrypted to different nodes, and that would be your reply block.  When 
someone emails your nym, the nymserv would basically execute your reply block, 
sending the message off through each of the steps, ultimately coming out to either 
your real email address, or a Usenet group like AAM. 
We’re still seeing these messages posted.  But there are only 2 Type I Nymservs 
operating.  One is Zax, of course, the other is paranoici.  Paranoici is run by a group of 
Italian Hackers in Milan, they also run Autistici, Inventati – which you can think of as 
an Italian version of RiseUp. 
63 
So, in conclusion what are those nested PGP messages?  They’re Type I nymserver 
messages, where the keyID is the ultimate nym owner.  If I don’t have a keyid, there’s 
another layer of symmetric encryption I didn’t crack.  When you download Type I 
nymserver messages, you know all the passwords, peel them off one by one, and 
then finally use your private key. 
This is all the recipients with >5 messages.  Pretty top heavy towards just a few nyms. 
64 
So Communication Graphs and brute forcing is really just the first, quarter, I would 
say, of the analysis I did on AAM.  A majority of my time was spent doing Correlation.  
Even if I don’t know who a message is to, or what it says, it’s valuable to know that 
it’s to the same person as another message, or was sent by the same sender. 
65 
And why is that valuable?  Well, let’s go back to this slide.  You can’t tell if someone 
has even received a message in a shared mailbox.  But if I can correlate one message 
with another,  
66 
Then I can start determining that some unknown person _has_ received a message.  
And once I know these two message are related, well I can pay attention to the 
timestamp and the length. This goes even further,  
67 
because people tend to respond to messages they receive.  And since I know If 
someone has _sent_ a message, it might be that they are replying to a message they 
just received. 
So let’s talk a lot about correlation, and more analysis on what’s in AAM. 
68 
So first off, it’s obvious that you can correlate messages that use a single, constant 
subject.  But there are a lot of messages like these!  Nearly half of all the messages 
posted to AAM! 
They tend to be older, and have tapered off more recently.  Which makes sense.   
69 
And if you’ve looked at AAM, what you’ve probably seen is the random Hexadecimal 
subjects.  Those look random.  Let’s correlate them. 
So there are two algorithms to generate these subjects.  Esubs, or Encrypted 
Subjects, and Hsubs, or Hashed Subjects.  And the point of these is to quickly identify 
which messages are for you, and which you should ignore.  This saves you an 
expensive public key operation.  Now personally, I think we’re at the point we could 
probably cut this step out, but nonetheless, it’s there. 
So esubs have two secrets – a subject, and a password.  Hsubs have a single secret, a 
password.  If you want to brute force these, it’s considerably more difficult to brute 
force the esubs – and I ran out of time.  Now you’d think that esubs must be newer, 
but actually it’s the hsubs. 
70 
Hsubs were created by Zax actually, and as his services are used more and more, they 
make up an increasing percentage of the subjects. 
Now, hsubs have a random piece in them that you can think of as an Initialization 
Vector, or as a salt.  While I could try to shoe-horn these into the existing SHA256 
password crackers out there, it’d be really painful, because hsubs will truncate the 
output to match the length of esubs.  So I had to write my own GPU cracker, again. 
71 
And I cracked about 3,500 hsubs.  Better than the percentage of messages I brute 
forced, but again, not a great percentage.  But keep in mind these are passwords of 
the most paranoid people on the Internet. 
I found an interesting set of messages with the hsub DANGER WILL ROBINSON, which 
was used by some, but of all, of the messages to a couple of particular KeyIDs.   
I cracked all the hsubs of another Key ID, with the two passwords testicular and 
panties. 
If you don’t know what schmegma is, don’t urban dictionary it. 
72 
So if HSUBs and ESUBs are used to let a nym own identify their messages, can we do 
something similar?  Let’s say we want to target the nym Bob.  Well, what we can do it 
send a particularly large message to Bob, full of nonsense.  And then we wait for a 
large message to pop out into AAM.  Zax’s nymserv is instantaneous, so this size-
based correlation is easy.  Type I nymservs are not necessarily instantaneous, so 
they’re a little more difficult, but it’s not _too_ difficult.  We can get a very good idea 
by keeping careful track of the size and maybe doing it a couple times. 
And this works, easily and efficiently.  And what we get is a specific message we know 
is to a particular nym, that we can then target for hsub cracking.     