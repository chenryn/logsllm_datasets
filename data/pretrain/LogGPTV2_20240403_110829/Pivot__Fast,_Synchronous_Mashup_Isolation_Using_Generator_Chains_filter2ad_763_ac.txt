currency semantics. This is because the browser’s JavaScript
scheduler is unaware of Pivot’s application-level scheduler.
For example, suppose that a satellite frame deﬁnes a callback
handler for mouse clicks. If the frame makes an RPC, the
frame’s generator chain will yield to Pivot, and Pivot will
consider the frame to be paused. However, while the RPC is
in-ﬂight, the user may click on a visual element within the
frame, causing the browser to ﬁre the mouse callback. The
callback will ﬁre while the RPC is still in-ﬂight, violating
developer expectations that Pivot RPCs act like regular, non-
yielding function calls.
To preserve the expected concurrency semantics, Pivot
rewrites asynchronous event handlers so that they are sched-
uled by Pivot instead of the browser. Pivot’s scheduler then
ensures that each satellite has only one active call chain
at any given time. Whereas Pivot uses static rewriting to
instrument function call sites, it uses dynamic patching of the
JavaScript runtime [21], [23] to help the static rewriter en-
force single-threaded semantics. Pivot redeﬁnes the registra-
tion interfaces for asynchronous event handlers, interposing
on timer interfaces like window.setTimeout(), GUI inter-
faces like DOMNode.addEventListener(), and network
interfaces like XMLHttpRequest.addEventListener().
The modiﬁed registration interfaces simply wrap each han-
dler in code that adds the real handler to Pivot’s deferred
execution queue.
267
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
sha1(“foo”) postMessage()
program()
Pivot.run()
1”,
1
sha1(“foo”)
program()
2
Pivot.routeRPC()
Satellite1
Master
Satellite2
Satellite1
Master
Satellite2
i
l
,
t e 1 "
p o s t M e s s a g e (
3
sha1(“foo”)
program()
)
sha1(“foo”)
Pivot.run()
Pivot.handlePM()
Pivot.handlePM()
R e s u m e
1
s
s
d
“
b
4
t M e
s
o
p
2 … ”
e
g
a
Pivot.routeRPC()
(
)
4
Master
Satellite2
Satellite1
Master
Satellite2
sha1(“foo”)
program()
Satellite1
Figure 10: The control ﬂow of the RPC from the running example.
Step 1: The satellite frame begins to execute. Pivot.run() invokes the satellite’s generator function program() (see
Figure 7(b)); in turn, this generator invokes the RPC stub sha1(). The stub issues a postMessage() to the master frame
and then yields control. Upon detecting that sha1() has yielded, program() yields too. Pivot.run() then terminates.
Step 2: Satellite frame 1 saves the generator chain belonging to program() and sha1(). Meanwhile, the master frame
handles the incoming postMessage(), routing it to satellite frame 2, which implements RPCs belonging to the “crypto”
namespace.
Step 3: Satellite frame 2 receives the RPC request, invokes the sha1() function, and returns the result to the master frame,
tagging the result with the name of the destination frame.
Step 4: The master frame delivers the RPC response to satellite frame 1. The postMessage() handler invokes
Pivot.run(), which invokes the paused program() function; in turn, program() invokes the yielded sha1() stub,
which returns the RPC result to the call site in program().
Pivot.__setTimeout__ = window.setTimeout;
window.setTimeout = function(rewrittenCb, ms){
var wrappedCb = function(){
Pivot.deferredQ.append(rewrittenCb);
};
Pivot.__setTimeout__(wrappedCb, ms);
};
Figure 11: Dynamically interposing on the browser’s inter-
face for registering timer callbacks.
The JavaScript language has powerful reﬂection capabil-
ities, and to a ﬁrst approximation, all JavaScript objects
are mutable, enumerable dictionaries. Thus, to interpose on
an event registration interface, Pivot simply assigns Pivot-
deﬁned code to the relevant object property, as shown in
Figure 11. In practice, JavaScript’s reﬂection interfaces have
subtle semantics, and these interfaces are implemented in
semi-incompatible ways across different browsers. Thus,
Figure 11 provides a simpliﬁed description of Pivot’s dy-
namic patching. We defer a detailed description of JavaScript
reﬂection semantics to other work [21], [23].
So, whenever the browser tries to execute an asynchronous
handler, Pivot just adds that handler to a Pivot-controlled
queue. To maintain the illusion of single-threaded exe-
cution, Pivot only drains this queue when a frame has
no in-ﬂight RPCs. Pivot detects this condition inside the
local scheduler (Figure 8). When a generator chain yields
Pivot.CALL_CHAIN_FINISHED, Pivot is guaranteed that
there are no active generator chains inside that frame. Thus,
Pivot.drainQueue() can safely iterate through the list of
deferred callbacks and execute each one.
Pivot rewrites all function call sites, including those inside
event handlers. Thus, deferred event handlers can invoke
RPCs. As shown in Figure 12, Pivot.drainQueue()
detects when a callback cb returns Pivot.RPC_YIELD.
When this happens, Pivot.drainQueue() sets the global
variable program to cb, and then immediately terminates
execution. Pivot’s standard RPC mechanisms will then en-
sure that the RPC is completed, and that the rest of the
deferred handlers are eventually executed.
Pivot executes callbacks in FIFO order to prevent star-
vation of early-arriving callbacks. If a callback executes a
268
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
Pivot.drainQueue = function(){
while(Pivot.deferredQ.length > 0){
var cb = Pivot.deferredQ.pop();
var retVal = cb.next();
switch(retVal){
case Pivot.RPC_YIELD:
//The callback made an RPC!
//We cannot issue any more
//deferred handlers until
//this RPC completes . . .
program = cb;
return;
case Pivot.CALL_CHAIN_FINISHED:
//The deferred handler did
//not issue an RPC, so it’s
//safe to execute another one.
break;
default:
alert("Error!");
break;
}
}
};
Figure 12: Executing deferred asynchronous callbacks.
long-running Pivot RPC, other callbacks will stall. This is
no different than the impact of a slow local function call
in a single-frame system like Jigsaw. However, Pivot uses
RPC timeouts to keep a buggy or malicious satellite from
indeﬁnitely blocking a caller frame (§III-D).
C. Sandboxed Iframes
By default, iframes from the same origin can interact
with each other’s JavaScript state using references like
window.parent. If a developer wishes to self-host multiple
untrusted libraries, the developer should use the best practice
of serving each library from a separate origin. Alternatively,
Pivot can automatically place each library into a “sand-
boxed” iframe [35] which we describe below.
The new HTML5 standard extends the  tag
with an optional sandbox attribute. By default, sandboxed
frames can only display visual content—they cannot run
plugins, execute JavaScript code, or include forms. By
specifying parameters for the sandbox tag, e.g., , the creator of the frame
can selectively enable permissions. However, if the sand-
boxed iframe does not have the allow-same-origin per-
mission,
the browser gives the frame a unique, random
origin that is only known to the browser. The browser uses
this unique origin, not the true one, when applying the
same-origin policy to the sandboxed frame. So, by default,
JavaScript in the sandboxed frame cannot access content
belonging to any real origin. For example, the frame will
be unable to access cookies or other client-side storage
belonging to its true origin; the frame will also be unable
to send XMLHttpRequests to its home server. Even if the
sandboxed frame has the same true origin as its parent frame,
it cannot use JavaScript references like window.parent to
inspect the JavaScript state of its parent. Sandboxed frames
are allowed to communicate with their parent frames using
postMessage(), and they can display visual information
if their parent frames have given them a non-zero sized
viewport.
Pivot can optionally place each untrusted library into
a sandboxed frame that
lacks the allow-same-origin
permission. By doing so, Pivot frees the developer from the
burden of maintaining separate origins for each self-hosted
library. Furthermore, if a master frame gives a sandboxed
satellite frame a zero-sized viewport, the satellite is restricted
to performing pure computation. All accesses to the network,
the visual display, user input, and local storage must be
requested through postMessage(), such that the master
frame vettes each request and executes the authorized ones
on behalf of the untrusted satellite.
D. Discussion
The JavaScript runtime provides built-in functions like
Math.random() and Date(). These functions never return
Pivot.RPC_YIELD. Thus, Pivot correctly treats these func-
tions like application-deﬁned functions that are not RPCs
(although Pivot does need a call-site check not shown in
Figure 7(b) which tests whether a function is an application-
deﬁned generator or a built-in function). A few built-in
methods internally call an application-deﬁned function; for
example, Array.sort() uses such a function to compare
array elements. Pivot disallows such functions from invoking
RPCs, since Pivot cannot force C++ code inside the browser
to yield to Pivot’s application-level scheduler.
Figure 7(b) provides a simple example of how Pivot
rewrites a function call that is the right-hand side for an
assignment operation. Function calls can arise in a variety
of additional contexts—a function’s return value can be the
test condition for an if-statement, the argument to another
function, and so on. For a given function call, Pivot’s
general rewriting strategy is to ﬁnd the lowest ancestor
in the abstract syntax tree that is a block statement. The
hoisted, rewritten call which checks for Pivot.RPC_YIELD
is inserted as a new AST child for the block; this child
immediately precedes the one which contained the original
function call. Pivot then replaces the original function call
with the temporary value set by the hoisted, rewritten call.
A buggy or malicious satellite that is servicing an RPC
may hang, i.e., the satellite may never return a value to
the Pivot scheduler. To prevent a denial-of-service attack on
the RPC initiator, Pivot will timeout an RPC that is taking
too long to complete, forcing the RPC to return an error
value to the initiator. The Pivot scheduler (Figure 8) imple-
ments these semantics by setting a JavaScript timer when
a generator yields the value Pivot.RPC_YIELD (the actual
timer code is not shown in the simpliﬁed ﬁgure). When the
Pivot postMessage() handler receives an RPC response
(Figure 9), Pivot cancels the relevant timer. If the timer is
269
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:50 UTC from IEEE Xplore.  Restrictions apply. 
not canceled, it will eventually restart the satellite frame
which initiated the hung RPC, setting Pivot.RPCRetVal
to an error value.
Pivot relies on the browser to enforce memory isolation
between the trusted master frame and the untrusted satellite
frames. However, nothing prevents a satellite from trying to
subvert the Pivot infrastructure within its own frame. For
example, a satellite can directly generate RPC requests by
crafting its own postMessage() calls. A satellite can also
try to attack Pivot’s virtualized event framework, e.g., by
looking for baroque JavaScript aliases to the underlying non-
virtualized functions [19]. Such chicanery does not affect
end-to-end application security because Pivot does not trust
anything in a satellite, including the satellite’s local Pivot
code. The master frame veriﬁes that all RPC messages
are well-formed, destined for extant frames, and sent from
domains which are allowed to contact the speciﬁed destina-
tions. Thus, if a satellite directly invokes postMessage(),
it can only invoke RPCs that the trusted master frame already
allows. The postMessage() interface only exchanges im-
mutable strings, so it cannot be used to tamper with master
frame objects by reference. If a satellite disrupts Pivot’s
local scheduling framework, the satellite may disrupt its own
single-threaded execution semantics, but other frames will
not be affected.
Ideally, a mashup isolation system would provide syn-
chronous RPC semantics with pass-by-reference sharing.
Pivot provides the former by interposing on function calls
and translating cross-domain calls into generator yields.
However, Pivot uses postMessage() as its cross-domain
transport
im-
mutable strings, Pivot provides pass-by-value cross-domain
sharing. One could emulate pass-by-reference by interposing
on object property accesses, and translating each write to an
RPC that is reﬂected to the object’s “home” frame. However,
it seems difﬁcult to make such a scheme fast.
since postMessage() exchanges
layer;
IV. IMPLEMENTATION
that
is used by the ﬁrst
system consists of
Our client-side Pivot
three li-
braries: Pivot-satellite.js, Pivot-master.js, and
pmLib.js, which implements a postMessage() RPC pro-
tocol
two libraries. The three
libraries are 21 KB in total. To rewrite code, we use an
ANTLR [28] toolchain similar to the one used by Jigsaw.
The ANTLR parser translates JavaScript libraries into ASTs;
a custom Pivot rewriter modiﬁes those libraries as described
in Section III and then converts the ASTs back to JavaScript.
V. EVALUATION
In this section, we compare Pivot
to Jigsaw [22], a
state-of-the-art mashup framework that places all JavaScript
libraries in the same frame. Our evaluation demonstrates
three major points:
270
Intra-Library Call Edges
Cross-Library Call Edges
s
e
g
d
E
5000
4000
3000
2000
1000
0
L
O
A
g
n
B
i
n
o
z
a
m
A
N
N
C
t
o
p
S
g
o
B
l
y
a
B
e
t
s
i
l
s
g
a
r
C
i
k
o
o
b
e
c
a
F
o
G
l
e
g
o
o
G
I
n
d
e
k
n
i
L
e