cused on single-keyword search, and after several solutions
with complexity linear in the database size, Curtmola et
al. [13] present the ﬁrst solution for single-keyword search
whose complexity is linear in the number of matching doc-
uments. They also improve on previous security models, in
particular by providing an adaptive security deﬁnition and
a solution in this model.
Extending single-keyword SSE to search by conjunctions
of keywords was considered in [16, 7, 2], but all these schemes
had O(|DB|) search complexity. The ﬁrst SSE which can
handle very large DBs and supports conjunctive queries is
the OXT protocol discussed above, given by Cash et al. [9].
The MC-SSE and OSPIR schemes we present are based on
this protocol and they preserve its performance and privacy
characteristics.
Extension of the two-party client-server model of SSE to
the multi-client setting was considered by Curtmola et al,
[13], but their model disallowed per-query interaction be-
tween the data owner and the client,
leading to a rela-
tively ineﬃcient implementation based on broadcast encryp-
tion. Multi-client SSE setting which allows such interac-
tion was considered by Chase and Kamara [11] as SSE with
“controlled disclosure”, and by Kamara and Lauter [23], as
“virtual private storage”, but both considered only single-
keyword queries and did not support query privacy from the
data owner. De Cristofaro et al. [12] extended multi-client
SSE to the OSPIR setting, which supports query privacy,
but only for the case of single-keyword queries.
In recent
independent work, Pappas et al. [27] provide support for
boolean queries in a setting similar to our OSPIR setting
(but with honest-but-curious clients).
SSE schemes which support eﬃcient updates of the en-
crypted database appeared in [30, 24] for single-keyword
SSE. The OXT SSE scheme of [9] which supports arbitrary
boolean queries, has been extended to the dynamic case in
[8], and the same techniques apply to the MC-SSE and OS-
PIR schemes presented in this paper.
Recently Islam et al. [19] showed that frequency analy-
sis revealed by access control patterns in SSE schemes can
be used to predict single-keyword queries. Such attacks, al-
though harder to stage, are possible for conjunctive queries
as well, but the general masking and padding countermea-
sures suggested in [19] are applicable to the MC-OXT and
OSPIR-OXT protocols.
In other directions, SSE was extended to the public key
setting, allowing any party to encrypt into the database, ﬁrst
for single-keyword search [5, 31, 1, 3, 6, 28], and later for
conjunctive queries as well [6], but all these PKSE schemes
have O(|DB|) search complexity. Universally composable
SSE was introduced by [25], also with O(|DB|) search com-
plexity.
Multi-client SSE and OSPIR models are related to the
work on multi-client ORAM, e.g. see the recent work of
Huang and Goldberg [17], which aims for stronger privacy
protection of client’s queries from server E , but multi-client
ORAM supports DB lookups by (single) indexes instead of
(boolean formulas on) keywords, and they can currently sup-
port much smaller DB sizes.
Paper organization. We ﬁrst present our protocols for
the case of conjunctive queries:
in Section 2 we recall the
basic OXT protocol [9], suitably reformulated for our gen-
eralizations, in Section 3 we address the multi-client SSE
model, and in Section 4 we handle the OSPIR model.
In
Section 4.2 we explain how to extend support for general
boolean queries. Our security models and claims are pre-
sented concisely in Section 5 — a complete treatment is
deferred to the full version [20]. While the main implemen-
tation details and performance analysis is deferred to a com-
panion paper [8], we provide some information on computa-
tional cost and performance measurements from our imple-
mentation in Section 4.3 and 4.4, respectively.
2. SSE AND THE OXT PROTOCOL
We ﬁrst recall the SSE OXT protocol from [9] that forms
the basis for our solution to searchable encryption in the
more advanced MC and OSPIR models.
SSE protocols and formal setting [9]. Let λ be a se-
curity parameter. A database DB = (indi, Wi)d
i=1 is a list
of identiﬁer and keyword-set pairs, where indi ∈ {0, 1}λ is a
document identiﬁer and Wi ⊆ {0, 1}∗ is a list of keywords
in that document. We set W to Sd
i=1 Wi. A query ψ( ¯w) is
speciﬁed by a tuple of keywords ¯w ∈ W∗ and a boolean for-
mula ψ on ¯w. We write DB(ψ( ¯w)) for the set of identiﬁers
of documents that “satisfy” ψ( ¯w). Formally, this means that
indi ∈ DB(ψ( ¯w)) iﬀ the formula ψ( ¯w) evaluates to true when
we replace each keyword wj with true or false depending on if
wj ∈ Wi or not (in particular DB(w) = {indi s.t. w ∈ Wi}).
Below we let d denote the number of records in DB, m = |W|,
and N = Pw∈W |DB(w)|.
A searchable symmetric encryption (SSE) scheme Π con-
sists of an algorithm EDBSetup and a protocol Search ﬁtting
the following syntax. EDBSetup takes as input a database
DB and a list of document decryption keys RDK, and outputs
a secret key K along with an encrypted database EDB. The
search protocol proceeds between a client C and server E ,
where C takes as input the secret key K and a query ψ( ¯w)
and E takes as input EDB. At the end of the protocol C
outputs a set of (ind, rdk) pairs while E has no output. We
say that an SSE scheme is correct if for all DB, RDK and all
queries ψ( ¯w), for (K, EDB) ← EDBSetup(DB, RDK), after
running Search with client input (K, φ( ¯w)) and server in-
put EDB, the client outputs DB(φ( ¯w)) and RDK[DB(φ( ¯w))]
where RDK[S] denotes {RDK[ind] | ind ∈ S}. Correctness
can be statistical (allowing a negligible probability of er-
ror) or computational (ensured only against computation-
ally bounded attackers - see [9]).
Note (conjunctive vs. Boolean queries). Throughout the
paper we present our protocols for the case of conjunctive
queries where a query consists of n keywords ¯w = (w1, . . . , wn)
and it returns all documents containing all these keywords.
The adaptation to the case of boolean queries is described
in Section 4.2.
Note (the array RDK). Our SSE syntax, and the OXT de-
scription in Figure 1, includes as input to EDBSetup an array
RDK that contains, for each document in DB, a key rdk used
877to encrypt that document. When a client retrieves the in-
dex ind of a document matching its query, it also retrieves
the record-decrypting key rdk needed to decrypt that record.
This mechanism is not strictly needed in the SSE setting
(where rdk could be derived from ind using a PRF with a
secret key known to C) and it is not part of the original OXT
in [9], but it is needed in the more advanced models consid-
ered later. This extension does not change the functionality
and security properties of OXT as analyzed in [9]).
Note (retrieval of matching encrypted records). Our formal-
ism deﬁnes the output of the SSE protocol as the set of ind
identiﬁers pointing to the encrypted records matching the
query, together with the associated record decryption key.
For the sake of generality, we do not model the processing
and retrieval of encrypted records. This allows us to decou-
ple the storage and processing of document payloads (which
can be done in a variety of ways, with varying types of leak-
age) from the storage and processing of the metadata, which
is the focus of our protocols.
SSE Security. The SSE setting considers security w.r.t.
an adversarial server E , hence security is parametrized via
a leakage function capturing information learned by E from
the interaction with C. See Section 5.
2.1 The OXT Protocol
The OXT protocol [9] is presented in Figure 1; see [9] for
full design rationale and analysis. Here we provide a high
level description as needed for the extensions to this protocol
we introduce in the following sections.
The basis of OXT is the following simple search algorithm
over unencrypted databases. The algorithm uses two types
of data structures. First, for every keyword w there is an
inverted index (a list) Iw pointing to the indices ind of all
documents that contain w. Then, for every document ind
there is a list Lind of all keywords contained in document
ind. To search for a conjunction ¯w = (w1, . . . , wn), the
client chooses the estimated least frequent keyword 2 in ¯w,
say w1, and checks for each ind ∈ Iw1 whether wi ∈ Lind,
i = 2, . . . , n. If this holds for all 2 ≤ i ≤ n then ind is added
to the result set. As a performance optimization, instead
of maintaining a list Lind for each ind, one can ﬁx a hash
function f and keep a data structure representing the set
X = {f (w, ind) : w ∈ W, ind ∈ DB(w)}. Thus, the check
w ∈ Lind can be replaced with the check f (w, ind) ∈ X. Pro-
tocol OXT adapts this algorithm to the encrypted setting as
follows (we start with the description of a simpliﬁed version,
corresponding to protocol BXT in [9], and then move to the
more speciﬁc details of OXT).
For each keyword w ∈ W an inverted index (corresponding
to Iw above), referred to as TSet(w), is built pointing to all
the ind values of documents in DB(w). Each TSet(w) is iden-
tiﬁed by a string called stag(w) and ind values in TSet(w)
are encrypted under a secret key Ke. Both stag(w) and
Ke are computed as a PRF applied to w with secret keys
known to C only. In addition, a data structure called XSet is
built as an “encrypted equivalent” of the above set X as fol-
lows. First, for each w ∈ W, a value xtrap(w) = F (KX , w)
is computed where KX is a secret PRF key then for each
ind ∈ DB(w) a value xtag = f (xtrap(w), ind) is added to
XSet where f is an unpredictable function of its inputs (e.g.,
2
The estimated least frequent keyword is called the conjunction’s s-
term; the other terms in a conjunction are called x-terms.
f can be a PRF used with xtrap(w) as the key and ind as
input). The output EDB from the EDBSetup phase includes
TSet = {TSet(w)}w∈W and the set XSet. In the Search pro-
tocol for a conjunction (w1, . . . , wn), the client C chooses
the conjunction’s s-term (i.e., the estimated least frequent
keyword in the conjunction, which we assume to be w1),
computes stag(w1) and Ke using C’s secret keys and com-
putes xtrapi = F (KX , wi) for each i = 2, . . . , n.
It then
sends (Ke, stag, xtrap2, . . . , xtrapn) to the server E . E uses
stag to retrieve TSet(w1), uses Ke to decrypt the ind val-
ues in TSet(w1), and sends back to C those ind for which
f (xtrapi, ind) ∈ XSet for all i = 2, . . . , n.
The OXT protocol from Figure 1 follows the above logic
but instantiates it in a way that minimizes leakage to E .
Rather than assuming a speciﬁc implementation of TSet,
[9] abstracts this data structure through an API that we
adopt here. Speciﬁcally, the abstract TSetSetup operation
receives a collection T of lists t(w) for each w ∈ W and
builds the TSet data structure out of these lists; it returns
TSet and a key KT . Then, TSetRetrieve(TSet, stag(w)) in-
stantiates the retrieval of a TSet(w) via its handle stag(w)
which is computed by a function TSetGetTag(KT , w) (typ-
ically a PRF). The elements in the t(w) lists are called tu-
ples and their contents are deﬁned by the OXT protocol.
A TSet implementation provides two crucial security prop-
erties [9]: privacy in that the TSet datastructure does not
reveal anything about the tuple lits in T except their sum-
mary length Pw |T[w]|; and correctness in that (except for
negligible probability) TSetRetrieve(TSet, stag) returns T[w]
for stag = TSetGetTag(KT , w), and it returns an empty set
for all other stag values.
Next, we note that using the protocol described above
leads to signiﬁcant leakage in that the xtrap value allows E to
check whether xtag = f (xtrap, ind) ∈ XSet for each value ind
ever seen by E , revealing correlation statistics between each
s-term and each x-term ever queried by C. This motivates
the main mechanism in OXT, i.e. the instantiation of the
function f via a two-party computation in which E inputs an
encrypted value ind, C inputs xtrap and the ind-decryption
key, and E gets the value of xtag = f (xtrap, ind) without
learning either the xtrap or ind values themselves. For this
OXT uses a blinded DH computation over a group G (with
generator g of prime order p). However, to avoid the need
for interaction between E and C in the Search phase, the
blinding factors are pre-computed and stored as part of the
tuples in the TSet lists. Speciﬁcally, indexes ind are replaced
in the computation of f with dedicated per-record values
xind ∈ Z ∗
p (computed as Fp(KI , ind) where Fp is a PRF
p ), xtrap(w)’s are implemented as gFp(KX ,w)
with range Z ∗
(KI and KX are secret keys kept by C), and xtag is re-deﬁned
as (xtrap(w))xind. The blinding factor in the underlying two-
party computation is pre-computed during EDBSetup and
stored in the TSet. Namely, each tuple corresponding to a
keyword w and document index ind contains a blinded value
yc = xind · z−1
for xind = Fp(FI , ind) where zc is an element
in Z ∗
p derived (via a PRF) from w and a tuple counter c
(this counter, incremented for each tuple in the tuple list
associated with w, ensures independence of each blinding
value zc).
c
During search, the server E needs to compute the xtag val-
ues gFp(KX ,wi)·xind for each xind in TSet(w1) and then test