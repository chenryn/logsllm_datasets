and a message being broadcast to the group. The network protocol
we describe in Section 5.1 ensures that messages from the same
sender are processed in the order they were sent. Thus, if B first
broadcasts B1 (the acknowledgment of A1), then broadcasts B2 (the
addition of C), and so on, then all group members will first process
B1, then B2, etc., and so all group members will update their copy
of B’s ratchet with the same sequence of update secrets.
Figure 3 shows in detail how we generate the sequence of update
secrets for each group member. We use a second ratchet, based on a
key derivation function KDF, in addition to the ratchet from Figure 1.
While the Figure 1 ratchet moves forward for every application
message sent, the Figure 3 ratchet moves forward every time we
produce an update secret for a given group member. Formally, this
ratchet can be modeled as a PRF-PRNG [2, §4.3].
In the example of Figure 3, users A and B concurrently initiate a
PCS update. Each user generates a random seed secret and sends
it to the group. To incorporate a seed secret into its ratchet, a user
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2028first uses a KDF to combine the seed with their user ID, producing
a member secret, and then combines the member secret with their
ratchet state in a second invocation of the KDF (the reason for using
two KDF invocations is explained in Section 6.2). In Figure 3, user A
first applies the seed secret from A’s own update, producing update
secret IA, and then applies B’s seed secret when acknowledging
the receipt of B’s update, producing update secret I′
. User B first
A
applies the seed from their own update, producing IB, then applies
A’s seed secret when acknowledging its receipt, producing I′
B
5 BUILDING BLOCKS
Our protocol makes use of several underlying modules and services,
which we discuss in this section. We mostly use existing published
algorithms, so we only briefly outline their required properties here.
.
processed by x before sending m2;
member sent m1 before sending m2;
5.1 Authenticated Causal Broadcast (ACB)
In a decentralized setting, the same messages may be delivered in a
different order to different users. For example, during a network
partition, users immediately receive messages from people on their
side of the partition, but messages from the other side may be
delivered much later. While we cannot guarantee that users will
see all messages in the same order, we provide a weaker ordering
guarantee called causal broadcast.
Definition 1. The causal order is a partial order ≺ on messages.
m1 ≺ m2 (m1 causally precedes m2) if one of the following holds:
• m1 and m2 were sent by the same group member, and that
• m2 was sent by group member x, and m1 was received and
• there exists m3 such that m1 ≺ m3 and m3 ≺ m2.
We say m1 and m2 are concurrent if m1 ⊀ m2 and m2 ⊀ m1.
Causal broadcast requires that before processing m, a group member
must process all preceding messages {m′ | m′ ≺ m}. Algorithms
typically implement causal broadcast using vector clocks [18, 30]
or by including hashes of causal predecessors in each message [24],
and by requesting retransmission of any dropped or corrupted
messages. The vector clocks/hashes also help prevent replay attacks.
Our causal broadcast module authenticates the sender of each
message, as well as its causal ordering metadata, using a digital
signature under the sender’s identity key. This prevents a passive
adversary from impersonating users or affecting causally ordered
delivery [24]. On every PCS update, a user generates a new identity
keypair and broadcasts it (signed by the old key), so that an adver-
sary who has compromised the user loses the ability to impersonate
them [15, §5]. Because our algorithm knows the current set of group
members (Section 5.2) it can reject messages from non-members.
Our DCGKA protocol uses two types of messages: broadcast
messages are sent to all members of the group, while direct messages
are sent to one specified recipient. We make this distinction only
for reasons of efficiency; our security properties hold regardless
of who receives which message. Even if the underlying network
supports only unicast, a gossip protocol [27] or multicast tree [20]
can disseminate a broadcast message to all group members at con-
stant cost per node. If the network only supports broadcast, then
all direct messages can be bundled into a single broadcast message
and sent to the entire group. Each group member can then pick out
the direct message intended for them from the broadcast message.
5.2 Decentralized Group Membership (DGM)
In a decentralized setting, it is not always obvious who the current
group members are. For example, say user A removes user B from
the group, while concurrently B removes A. Some users may first
process A’s removal of B and then ignore B’s operation (because B
is no longer a group member at that point), while other users may
first process B’s removal of A and then ignore A’s operation. If this
sort of situation is not handled carefully, users could end up with
inconsistent views of the group membership.
Matrix implements one approach for resolving such conflicts: it
first sorts membership changes so that revocations happen before
other changes, then sorts by a timestamp included in each message,
and applies changes in that order [21]. Another approach is to use
Conflict-free Replicated Data Types (CRDTs) [35, 37]. For space
reasons we elide a detailed discussion of these algorithms.
Instead, we assume a Decentralized Group Membership (DGM)
function that takes a set of membership change messages and their
causal order relationships, and returns the current set of group
members. The result must be deterministic and depend only on the
causal order, not the exact order in which a given user received the
messages. This function may also take permissions into account (e.g.
allowing only admins to add or remove members). For simplicity
we store the set of all membership changes that have occurred in a
group’s history, although in practice it is possible to discard details
of members who were added and then removed again.
5.3 Two-Party Secure Messaging (2SM)
Definition 2. A bidirectional two-party secure messaging scheme
consists of three algorithms 2SM-Init, 2SM-Send, and 2SM-Receive:
Initialization: 2SM-Init(ID1, ID2) takes two IDs: ID1 is the local
user and ID2 is the other party. It returns an initial protocol
state σ. The 2SM protocol must use a Public Key Infrastruc-
ture (PKI) or key server to map these IDs to public keys. In
practice, the PKI should include ephemeral prekeys, as intro-
duced by Signal [28]. This allows users to send messages to a
new group member, even if that member is currently offline.
Send: 2SM-Send(σ, m) takes a state σ and a plaintext message m,
and outputs a new state σ ′ and a ciphertext c.
Receive: 2SM-Receive(σ, c) takes a state σ and a ciphertext c, and
outputs a new state σ ′ and a plaintext message m.
The Signal protocol is a popular implementation of 2SM, but it
does not suffice for our purposes because it heals from a compromise
only after several rounds of communication, not with each message
sent. Instead, we use a protocol with optimal forward secrecy and
PCS [23, §2.2], described formally in an extended version of this
paper [42]. The security of 2SM is formalized in Appendix B.
6 DECENTRALIZED CONTINUOUS GROUP
KEY AGREEMENT (DCGKA)
DCGKA generates a sequence of update secrets for each group
member, which are used as input to a ratchet to encrypt/decrypt
application messages sent by that member, as described in Section 4.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2029Only group members learn these update secrets, and fresh secrets
are generated every time a user is added or removed, or a PCS
update is requested. The DCGKA protocol ensures that all users
observe the same sequence of update secrets for each group member,
regardless of the order in which concurrent messages are received.
turns an initial state γ.
IDs, and creates a new group with those members.
6.1 The DCGKA Abstraction
Definition 3. A decentralized continuous group key agreement
scheme consists of the algorithms DCGKA = (init, create, add,
remove, update, process). Except for init, all of the algorithms take
a state γ and further arguments as specified below.
Initialization: init(ID) takes the ID of the current user, and re-
Group creation: create(γ , IDs) takes a state γ and a set of users
Member addition: add(γ , ID) takes a state γ and a user ID, and
Member removal: remove(γ , ID) takes a state γ and a user ID,
PCS update: update(γ) takes a state γ and performs a key update.
Message processing: process(γ , sender, control, dmsg) is called
when a control message is received. It takes a state γ, the
user ID of the message sender (authenticated as discussed in
Section 5.1), a control message control, and a direct message
dmsg (or ε if there is no associated direct message).
and removes that user from the group.
adds that user to the group.
create, add, remove and update return a tuple of four variables
(γ ′, control, dmsgs, I), where γ ′ is a new state for the current user,
control is a control message that should be broadcast to the group
(or ε if no message needs to be sent), dmsgs is a set of (u, m) pairs
where m is a direct message that should be sent to user u, and I
is a new update secret for the current user. process returns a 5-
tuple (γ ′, control, dmsgs, Is , Ir), where Is is an update secret for the
sender of the message being processed, Ir is an update secret for
the recipient, and the other variables are as before.
The control message and direct messages must be distributed to
the other group members through Authenticated Causal Broadcast
as discussed in Section 5.1, calling the process function on the
recipient when they are delivered. If direct messages are sent along
with a control message, we assume that the direct message for
the appropriate recipient is delivered in the same call to process.
Our algorithm never sends a direct message without an associated
broadcast control message.
6.2 Our DCGKA Protocol
Figure 4 contains the full specification of our protocol. The variable
γ denotes the state, which consists of the variables initialized in
the function init. The notation 2sm[·] ← ε means that 2sm is a
dictionary where every key is initially mapped to the default value
ε, representing the empty string.
Every control message is a triple of the form (type, seq, content).
The message type is one of "create", "ack", "update", "remove",
"add", or "add-ack". The seq field is a sequence number, which
consecutively numbers successive control messages from the same
sender. The content depends on the type. The process function
unpacks the message tuple and then calls one of the six func-
tions process-create, process-ack, process-update, process-remove,
process-add, or process-add-ack, depending on the message type.
To simplify the presentation, we assume that each ID added to
the group is unique. We also assume the DGM (Section 5.2) is such
that create, add, and remove messages have the usual sequential
semantics from their sender’s perspective, and that users can only
be added by add messages targeting them, not as a side-effect of
other messages (e.g., a remove “undoing” a concurrent remove).
6.2.1 Helper Functions. We start by explaining several helper func-
tions that appear in the right-hand column of Figure 4.
encrypt-to uses 2SM (Section 5.3) to encrypt a direct message
for another group member. The first time a message is encrypted
to a particular recipient ID, the 2SM protocol state is initialized on
line 2 and stored in γ .2sm[ID]. We then use 2SM-Send on line 4 to
encrypt the message, and store the updated protocol state in γ.
decrypt-from is the reverse of encrypt-to. It similarly initializes
the protocol state on first use, and then uses 2SM-Receive to decrypt
the ciphertext, with the protocol state stored in γ .2sm[ID].
update-ratchet generates the next update secret for group mem-
ber ID. It implements the outer KDF of the ratchet illustrated in
Figure 3. The ratchet state is stored in γ .ratchet[ID]; we use a
HMAC-based key derivation function HKDF [25, 26] to combine
the ratchet state with an input, producing an update secret and a
new ratchet state.
member-view computes the set of group members at the time of
the most recent control message sent by user ID. It works by filtering
the set of group membership operations to contain only those seen
by ID, and then invoking the Decentralized Group Membership
function DGM (Section 5.2) to compute the group membership.
generate-seed generates a seed secret using KGen, a secure
source of random bits, then calls encrypt-to to encrypt it for each
other group member using the 2SM protocol. It returns the updated
protocol state and the set of direct messages to send.
6.2.2 Group Creation. A group is created in three steps: 1. one user
calls create and broadcasts a control message of type "create"
(plus direct messages) to the initial members; 2. each member pro-
cesses that message and broadcasts an "ack" control message;
3. each member processes the ack from each other member.
The create function constructs the "create" control message
and calls generate-seed to generate the set of direct messages to
send. It then calls process-create to process the control message
for this user (as if it had received the message) before returning.
process-create returns a tuple including an updated state γ and an
update secret I; we use these and ignore the rest of the tuple.
process-create is called both by the sender and each recipient
of the "create" control message. It first records the information
from the create message in γ .history, which we use to track group
membership changes, and then calls process-seed.
process-seed first uses member-view to determine the set of
users who were group members at the time the control message
was sent, and hence the set of recipients of the message. It then
attempts to obtain the seed secret: 1. if the control message was
sent by the local user, the last call to generate-seed placed the seed
secret in γ .nextSeed, so we read that variable and then delete its
contents (lines 2–3); 2. if the control message was sent by another
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2030return γ
control ← ("create", ++γ .mySeq, IDs)
(γ , dmsgs) ← generate-seed(γ , IDs)
(γ , _, _, I , _) ← process-create(γ , γ .myId, γ .mySeq, IDs, ε)
return (γ , control, dmsgs, I)
return process-seed(γ , sender, seq, dmsg)
init(ID)
1 : γ .myId ← ID
2 : γ .mySeq ← 0
3 : γ .history ← ∅
4 : γ .nextSeed ← ε
5 : γ .2sm[·] ← ε
6 : γ .memberSecret[·, ·, ·] ← ε
7 : γ .ratchet[·] ← ε
8 :
process(γ , sender, controlMsg, dmsg)
(type, seq, info) ← controlMsg
1 :
2 :
if type = "create" then
return process-create(γ , sender, seq, info, dmsg)
3 :
4 :
else if type = "ack" then etc . . .
create(γ , IDs)
1 :
2 :
3 :
4 :
process-create(γ , sender, seq, IDs, dmsg)
1 : op ← ("create", sender, seq, IDs)
2 : γ .history ← γ .history ∪ {op}
3 :
process-ack(γ , sender, seq, (ackID, ackSeq), dmsg)
if (ackID, ackSeq) was a create/add/remove then
1 :
op ← ("ack", sender, seq, ackID, ackSeq)
2 :
γ .history ← γ .history ∪ {op}
3 :
s ← γ .memberSecret[ackID, ackSeq, sender]
4 :
5 : γ .memberSecret[ackID, ackSeq, sender] ← ε
if s = ε ∧ dmsg = ε then return (γ , ε , ε , ε , ε)
6 :
if s = ε then (γ , s) ← decrypt-from(γ , sender, dmsg)
7 :
(γ , I) ← update-ratchet(γ , sender, s)
8 :
return (γ , ε , ε , I , ε)
9 :
update(γ)
1 :
2 :
3 :
4 :
5 :
process-update(γ , sender, seq, _, dmsg)
1 :
remove(γ , ID)
1 :
2 :
3 :
4 :
5 :
return process-seed(γ , sender, seq, dmsg)
control ← ("update", ++γ .mySeq, ε)
recipients ← member-view(γ , γ .myId) \ {γ .myId}
(γ , dmsgs) ← generate-seed(γ , recipients)
(γ , _, _, I , _) ← process-update(γ , γ .myId, γ .mySeq, ε , ε)
return (γ , control, dmsgs, I)
control ← ("remove", ++γ .mySeq, ID)