## Page 165
6.4对Android上的Chrome进行模糊测试149
可以直接使用原生表示进行方便、高效地操作。图形处理库就是一个很好的例子，这些类型数组的
数据无须在JavaScript表示和原生表示之间来回转换，浏览器就可以极大地提高效率和性能。
在2013年的Pwn2Own移动终端竞赛当中，研究人员PinkiePie成功地演示了如何攻破搭载
当时最新Android4.3系统的Nexus 4上的Chrome。不久之后，PinkiePie所利用的漏洞就被修补
并提交到了开源代码仓库。MWRLabs的Jon Butler进一步分析之后，发现V8JavaScript引擎中
类型数组的实现发生了一个小变化，于是他在Twiter上发了一条消息，给出了触发这个漏洞的
最短代码，如图62所示。
JonButler
 @securtea
Trigger for the bug (fixed): x = new
Float64Array(length: ox24924925))
Rapb t Ree # raots ***sor
4.40.AM - 1 Niv 1
图6-2触发CVE-2013-6632漏润的最短代码
看到这段验证代码之后，我们受到启发，想到开发一个模棚测试工具来进一步测试Android
类型数组的实现代码。如果这个问题还在，那我们可能会发现隐藏在背后的更进一步的问题。现
在我们已经选好了目标，可以开始编写代码进行测试了。
6.4.2生成输入
下一步就是编写代码来生成测试用例。与基于变异的非智能模糊测试的方法不同，我们采用
生成式方法。从JonButler公布的这一最短概念验证代码，我们可以开发出一个初步的页面生成
器。每个页面引l用了一些相同的代码，这些代码在页面加载完毕之后立即执行一个Javacript函数。
然后，我们在这个函数中随机生成一些JavaScript代码来测试类型数组的功能。这样，生成式算
法的核心部分就在于生成这个JavaScript函数体本身。
首先，我们将最短的触发代码拆分成两个独立数组的创建语句。在概念验证代码中，第一个
数组是一个传统的JavaScript数组，在创建时被分配一个固定的长度。数组元素的默认值为0。
这个数组的创建在JonButler的概念验证代码中被嵌套了，但实际上可以将其分开。经过分拆后、
代码变成了：
var arr1 = new Array(0x24924925) ;
var arr2 = new Float64Array (arr1) :
在我们的模棚测试工具中，我们采用上述写法，这样我们就可以把传统的JavaScriptArray
类型换掉，来尝试其他的类型数组类型。
我们使用如下代码来生成第一个数组：
---
## Page 166
150第6章使用模测试来挖掘漏润
45page +- *try ( * +generate_var() + *} catch(e)( console.log(e);
)`n*
这里，generate_var函数用于创建第一个数组。我们把第一条语句放在一个try-catch
块中，并且把异常输出到浏览器的控制台中。这种方法会帮助我们很快找到生成代码产生的问题。
generate_var函数的代码如下所示：
64 def generate_var() :
59
vtype = random. choice (TYPEDARRAY_TYPES)
66
L9
vlen = xand_num()
静态数组TYPEDARRAY_TYPES中包含了所有支持的类型，我们首先从中随机选择一个作为
类型数组的类型。然后，我们用rand_num函数随机选定一个数组长度。最后，我们使用上面选
定的类型和长度来生成创建第一个数组的语句
现在我们来关注第二个数组的生成。第二个数组在创建时分配了与第一个数组相同的长度。
第一个数组的长度是触发这个漏洞的关键，有两个原因。其一，计算第二个数组所需分配的内存
时发生了整数溢出；其二，这个长度需要绕过某些整数溢出检查的验证，有漏洞的代码给出的验
证是错误的。下面就是生成第二个数组的部分代码：
49page ** *try (* + generate_assignment() +
*)catch(e) (console.log(e): )\n*
与创建第一个数组类似，我们在外面包裹了try-catch块，这次没有使用generate_var
函数，面是使用了一个generate_assignment 函数。代码如下所示；
69 def generate_assignment ()1
70
vtype = random, choLce (TYPEDARRAY_TYPES)
这个函数更加简单，因为我们无需生成一个随机长度。我们仅仅是选择一个随机类型，并用
它作为类型数组的类型生成第二个数组。
在我们的模测试工具中，rand_num函数是非常严格的。最短漏洞触发代码使用了一个非
常大的数。为了生成类似的值，我们对它的算法稍作修改如下：
def rand_num() :
+（gxo）efuexpuexwpuex=xosAp
dividend = (0x100000000 / divi8or)
if random.randrange(3) s= 0:
addend = randon.randrange(10)
dividend += addend
addend -= 5
return dividend
首先从1~8中选一个数作为除数。不能用0，因为除0错误会导致模测试工具崩溃。也不
用大于8的数，因为8字节是类型数组的元素的最大长度（F1oat64Array）。然后我们用这个
随机的除数去除2”。这样，整个数组的总长度更容易触发整数溢出。最后，我们以大约1/3的概
率去加上一个-5-4内的数，这能够帮助我们测试一些发生了整数溢出，但并没有产生错误的极
---
## Page 167
6.4对Android上的Chrome进行模棚测试
151
编情况。
最后，我们根据规范构造一个类型数组类型列表。规范的链接在附录C中可以找到。我们把
这些类型放进Python 的全局变量TYPEDARRAY_TYPES 中，generate_Var 和generate
assignment函数都用过这个变量。我们把生成的JavaScript函数与其余引用的代码相结合，就
得到了可以用来测试类型数组实现的HTML5页面。现在我们完成了输人生成的任务，可以开始
用Android设备去处理它了。
6.4.3处理输入
现在我们的测览器模测试工具可以生成一些有趣的输人了，下一步就是让浏览器去处理它
们。尽管这一步往往是最难实现的，但是如果实现不好，你的模糊测试工具将无法实现自动化。
浏览器以统一资源定位符（URL）为输入，本章不会深入介绍URL的构造、解析的知识。最重
要的是，URL会告诉测览参使用什么协议来获取输人。基于选定的协议，相应的输入就会传递
过去。
BrowserFuzz使用HTTP协议来传递输人。其他协议（如file:/URL）可能也可以用来传递输
人，但我们在这里不研究它。我们用Twisted这个Python框架构造一个初级的HTTP服务器来传
递输入。相关代码如下：
14 from tvisted.internet import reactor
13 from twisted.web inport server,resource
83 class PuzzServer(resource.Resource) :
84
isLeaf = True
85
98
def render_G&r (aelf, request) ;
page = None
87
path = request.postpath[0]
88
if path -- *favicon.ico*:
89
request ,setResponseCode (404)
90
return *Not found*
91
self.page - generate_page()
92
return self.page
94if
93
95
_name__ =s *_nain__'1
# Start the HrTP server
96
server_thread = PuzzServer()
97
reactor.listenTCP(LIsrex_poRr, server.Site(server_thread))
98
threading.Thread (target=reactor,run, args= (False.1) start ()
这个HTTP服务器十分简单，只能响应GET请求，而且对于返回结果几乎没有什么逻辑。
请求favicon图标时，会返同一个404错误来告诉测览器这个文件无法访问。对于其他的请求，
浏览器会永远返回一个生成的页面。作为模期测试工具的一个主要部分，HTTP服务器在自己的
后台线程中运行。由于有Twisted框架，无须做其他工作就能把生成的页面架设起来。
HTTP服务器运行起来后，为了实现自动化我们还需要做一件事情，就是操纵浏览器去不断
地加载相应URL的页面。由于有ActivityManager，在Android上实现这一步是十分容易的。使
---
## Page 168
152
第6章使用模糊测试来挖振漏润
用am命令发送一个Intent，你就可以持续不断地启动测览器并指定它打开任何页面。BrowserFuzz
中的execute_test 函数代码如下：
57
tmpuri = *fuzzryou?id=ed*  (time.time (1)
58
output = subprocess.Popen([ *adb′, *shell', *am',*start′,
59
'-a',
‘android. intent . action.vIeW',
60
-d',
'http://hs: &d/%s' & (LISTEN_HOST, LISTBN_PORT,
61
'-e', *com.android.browser, application_id', *vooo*,
tmpuri),
62
*com android. chrome*
63
1.stdout=subprocess.PIPE,
stderr=subprocess,Sroour) communicate() [0]
第57行代码在请求的URL中添加了时间字符串，这是为了让浏览器每次请求一个新的内容，
面不是重用缓存中的内容。第58行~第63行代码通过ADB在Android设备上来执行am命令。
BrowserFuzz中所使用的命令比较长，我们来解释一下。am命令的start子命令用来启动
Acticity，后面是几个Intent选项。-a开关指定了Intent的动作（android.intent.action.VIEw）。
这个动作让ActicityManager决定如何处理请求，然后进一步根据-d开关来获取请求相关的数据。
BrowserFuzz让ActicityManager启动默认浏览器，并且使用我们的HTTP服务器的URL作为数据。
接下来，-e 开关为 Chrome 提供了extra数据，把com.android.browser.application_id
设为wooo，这样做是为了每次都在同一个标签页中打开页面，面不是每次打开一个新的标签页。
这一点很重要，因为创建非常多的标签页会导致内存过度使用，进而导致浏览器重启，这样会浪
费更多的时间。面且，浏览器重启时去打开之前的测试用例并不会对寻找bug带来帮助，因为之
前的输人已经被测试过了。命令的最后一部分指定的是要启动的程序包名，这里使用的是
com.android.chrome，换成其他浏览器当然也是可行的。例如，可以使用包名com.google，
android.browser 来启动 Galaxy Nexus 手机上的 Android浏览器。
BrowserFuzz的目的是自动测试大量输人，因此最后一步就是把上面的执行测试步骤放人一
个简单的循环中，代码如下：
45
def run(self) :
47
9
while self.keep_going:
self.execute_test ()
只要keep_going标志为真，BrowserFuzz就会连续执行这一测试。接下来的工作就是去监
视那些异常行为。
6.4.4监控测试
本章前面讲过，想要知道是否发现了有价值的东西，监视目标程序是十分必要的。尽管监视
技术有很多，但BrowserFuzz使用一种极为简化的方法。
回忆一下第2章，Android系统中可以使用1ogcat 命令来获取系统日志。这个命令在所有
Android设备中都有，并且可以直接通过ADB来使用。Android系统中也包含一个特殊的系统进
程debuggerd。当一个进程前溃后，debuggerd会把前溃信息写入系统日志。BrowserFuzz依靠这
两个工具进行监视。
---
## Page 169
6.4对Android上的Chrome进行模潮测试