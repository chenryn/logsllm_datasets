return '' 
def SendCmd(self,cmd,interactive=False): 
log.info("Cmd : " + cmd) 
self.IO.sendline(cmd) 
if interactive: 
self.IO.interactive() 
else: 
self.ReadMap() 
# Reload Map 
self.DumpInfo() 
return 
def DumpInfo(self): 
print self.MAXX, self.MAXY 
for i in range(self.MAXX): 
for j in range(self.MAXY): 
sys.stdout.write(self.MAP[i][j]) 
sys.stdout.write('\n') 
print self.MAXY * '-' 
''' 
for i in self.PIVOT: 
print 'PIVOT : ', i 
for i in self.BLOCK: 
print 'BLOCK : ', i 
''' 
return 
def ClearVisited(self): 
self.VISITED = [] 
for i in range(self.MAXX): 
self.VISITED.append([]) 
for j in range(self.MAXY): 
self.VISITED[i].append(0) 
return 
def MoveFromTo(self,f,t,num=-1): 
k = num 
if num == -1: k = 99999 
for i in range(k): 
if len(self.BLOCK[f]) == 0: break 
self.PO_FOUND = 0 
self.ClearVisited() 
self.GetPivotOutsideBlock(self.GetPivotPos(f)) 
if self.PO_FOUND == 0: 
log.warning("Cannot find an outside block!") 
exit(0) 
pos = self.PO_RESULT 
self.SendCmd(self.GotoPos(pos) + 'L') 
self.PA_FOUND = 0 
self.ClearVisited() 
self.GetPivotAdjacentFreeSpace(self.GetPivotPos(t)) 
if self.PA_FOUND == 0: 
log.warning("Cannot find an outside block!") 
exit(0) 
pos = self.PA_RESULT 
self.SendCmd(self.GotoPos(pos,False) + 'P') 
return 
def BackToOrigin(self,interactive=False): 
self.SendCmd(self.GotoPos((1,1),True),interactive) 
return 
def CloseGame(self): 
self.IO.close() 
return 
def Solve(self): 
self.MoveFromTo(3,4,10) 
self.BackToOrigin(True) 
return 
def main(): 
io.recvuntil('Email Addr :') 
io.sendline(EMAIL) 
io.recvuntil('Password   :') 
io.sendline(PWD) 
try: 
Game = GameSolver(io) 
Game.StartGame() 
Game.Solve() 
Game.CloseGame() 
except Exception,e: 
print e 
io.interactive 
return 0 
if __name__ == '__main__': 
main() 
效果： 
wtf... 
解密和溢出（Crypto&Exploit） 
Crypto&Exploit100(HeHeDa) 
简单看下，发现可以逐位爆破，直接上 python 脚本 
先爆破 key： 
def LShift(t, k): 
    k %= 8 
    return ((t > (8 - k))) & 0xff 
def encode(p): 
    ret = "" 
    for i in range(8): 
        ret = ('|' if (p >> i) & 1 else 'O') + ret 
    return ret 
A = [85, 128, 177, 163, 7, 242, 231, 69, 185, 1, 91, 89, 80, 156, 81, 9, 102, 221, 195, 33, 
31, 131, 179, 246, 15, 139, 205, 49, 107, 193, 5, 63, 117, 74, 140, 29, 135, 43, 197, 212, 
0, 189, 218, 190, 112, 83, 238, 47, 194, 68, 233, 67, 122, 138, 53, 14, 35, 76, 79, 162, 
145, 51, 90, 234, 50, 6, 225, 250, 215, 133, 180, 97, 141, 96, 20, 226, 3, 191, 187, 57, 
168, 171, 105, 113, 196, 71, 239, 200, 254, 175, 164, 203, 61, 16, 241, 40, 176, 59, 70, 
169, 146, 247, 232, 152, 165, 62, 253, 166, 167, 182, 160, 125, 78, 28, 130, 159, 255, 
124, 153, 56, 58, 143, 150, 111, 207, 206, 32, 144, 
     75, 39, 10, 201, 204, 77, 104, 65, 219, 98, 210, 173, 249, 13, 12, 103, 101, 21, 
115, 48, 157, 147, 11, 99, 227, 45, 202, 158, 213, 100, 244, 54, 17, 161, 123, 92, 181, 
243, 184, 188, 84, 95, 27, 72, 106, 192, 52, 44, 55, 129, 208, 109, 26, 24, 223, 64, 114, 
19, 198, 23, 82, 120, 142, 178, 214, 186, 116, 94, 222, 86, 251, 36, 4, 248, 132, 25, 211, 
199, 30, 87, 60, 127, 155, 41, 224, 151, 237, 136, 245, 37, 170, 252, 8, 42, 209, 46, 108, 
88, 183, 149, 110, 66, 235, 229, 134, 73, 38, 118, 236, 119, 154, 216, 217, 240, 22, 121, 
174, 93, 126, 230, 228, 18, 148, 220, 172, 2, 137, 34] 
B = [0, 2, 3, 7, 1, 5, 6, 4] 
C = [179, 132, 74, 60, 94, 252, 166, 242, 208, 217, 117, 255, 20, 99, 225, 58, 54, 184, 
243, 37, 96, 106, 64, 151, 148, 248, 44, 175, 152, 40, 171, 251, 210, 118, 56, 6, 138, 77, 
45, 169, 209, 232, 68, 182, 91, 203, 9, 16, 172, 95, 154, 90, 164, 161, 231, 11, 21, 3, 97, 
70, 34, 86, 124, 114, 119, 223, 123, 167, 47, 219, 197, 221, 193, 192, 126, 78, 39, 233, 
4, 120, 33, 131, 145, 183, 143, 31, 76, 121, 92, 153, 85, 100, 52, 109, 159, 112, 71, 62, 
8, 244, 116, 245, 240, 215, 111, 134, 199, 214, 196, 213, 180, 189, 224, 101, 202, 201, 
168, 32, 250, 59, 43, 27, 198, 239, 137, 238, 50, 
     149, 107, 247, 7, 220, 246, 204, 127, 83, 146, 147, 48, 17, 67, 23, 93, 115, 41, 
191, 2, 227, 87, 173, 108, 82, 205, 49, 1, 66, 105, 176, 22, 236, 29, 170, 110, 18, 28, 
185, 235, 61, 88, 13, 165, 188, 177, 230, 130, 253, 150, 211, 42, 129, 125, 141, 19, 190, 
133, 53, 84, 140, 135, 10, 241, 222, 73, 12, 155, 57, 237, 181, 36, 72, 174, 207, 98, 5, 
229, 254, 156, 178, 128, 55, 14, 69, 30, 194, 122, 46, 136, 160, 206, 26, 102, 218, 103, 
139, 195, 0, 144, 186, 249, 79, 81, 75, 212, 234, 158, 163, 80, 226, 65, 200, 38, 187, 
113, 63, 24, 25, 142, 51, 228, 35, 157, 216, 104, 162, 15, 89] 
D = [2, 4, 0, 5, 6, 7, 1, 3] 
plain = bytearray("asdfghjk") 
print plain 
#key = bytearray('12345678') 
#assert len(key) == 8 
ss=[chr(x) for x in range(0x20,0x80)] 
res='OO|OO||OO|||||OO|OO||O||O|O||O|||O|OOOOOOO|O|O|O|||||OO|||
O|||OO||O|OOOOOO|O|OO|OO||||OO|||OOOO|||||O||||O|OO|O|O|O||OO|
O||O|OO|O||O|||O||O|OO|OOOOOO||OOO|O|O|O|||O|OO|O|O||O||O||OO
OOO|||OO|O|' 
def fuzz(key): 
 t1 = bytearray() 
 for i in plain[0:len(key)]: 
    t1.append(A[i]) 
 t2 = bytearray() 
 for i in range(len(t1)): 
    t2.append(LShift(t1[i], B[i % 8])) 
 for times in range(16): 
    for i in range(len(t2)): 
        t2[i] = C[t2[i]] 
    for i in range(len(t2)): 
        t2[i] = LShift(t2[i], i ^ D[i % 8]) 
    for i in range(len(t2)): 
        t2[i] ^= key[i % 8] 
 out = "" 
 for i in t2: 
    out += encode(i) 
 if out==res[0:8*len(key)]: 
   #print out 
   print key 
for t1 in ['@','^']: 
  for t2 in ['N','&']: 
    for t3 in ['9','T']: 
      for t in ss: 
             key=t1+t2+'#qD'+t3+'3'+t 
             fuzz(bytearray(key)) 
得到 key 为^&#qD93_ 
再爆破 flag 
def LShift(t, k): 
    k %= 8 
    return ((t > (8 - k))) & 0xff 
def encode(p): 
    ret = "" 
    for i in range(8): 
        ret = ('|' if (p >> i) & 1 else 'O') + ret 
    return ret 
A = [85, 128, 177, 163, 7, 242, 231, 69, 185, 1, 91, 89, 80, 156, 81, 9, 102, 221, 195, 33, 
31, 131, 179, 246, 15, 139, 205, 49, 107, 193, 5, 63, 117, 74, 140, 29, 135, 43, 197, 212, 
0, 189, 218, 190, 112, 83, 238, 47, 194, 68, 233, 67, 122, 138, 53, 14, 35, 76, 79, 162, 
145, 51, 90, 234, 50, 6, 225, 250, 215, 133, 180, 97, 141, 96, 20, 226, 3, 191, 187, 57, 
168, 171, 105, 113, 196, 71, 239, 200, 254, 175, 164, 203, 61, 16, 241, 40, 176, 59, 70, 
169, 146, 247, 232, 152, 165, 62, 253, 166, 167, 182, 160, 125, 78, 28, 130, 159, 255, 
124, 153, 56, 58, 143, 150, 111, 207, 206, 32, 144, 
     75, 39, 10, 201, 204, 77, 104, 65, 219, 98, 210, 173, 249, 13, 12, 103, 101, 21, 
115, 48, 157, 147, 11, 99, 227, 45, 202, 158, 213, 100, 244, 54, 17, 161, 123, 92, 181, 
243, 184, 188, 84, 95, 27, 72, 106, 192, 52, 44, 55, 129, 208, 109, 26, 24, 223, 64, 114, 
19, 198, 23, 82, 120, 142, 178, 214, 186, 116, 94, 222, 86, 251, 36, 4, 248, 132, 25, 211, 
199, 30, 87, 60, 127, 155, 41, 224, 151, 237, 136, 245, 37, 170, 252, 8, 42, 209, 46, 108, 
88, 183, 149, 110, 66, 235, 229, 134, 73, 38, 118, 236, 119, 154, 216, 217, 240, 22, 121, 
174, 93, 126, 230, 228, 18, 148, 220, 172, 2, 137, 34] 
B = [0, 2, 3, 7, 1, 5, 6, 4] 
C = [179, 132, 74, 60, 94, 252, 166, 242, 208, 217, 117, 255, 20, 99, 225, 58, 54, 184, 
243, 37, 96, 106, 64, 151, 148, 248, 44, 175, 152, 40, 171, 251, 210, 118, 56, 6, 138, 77, 
45, 169, 209, 232, 68, 182, 91, 203, 9, 16, 172, 95, 154, 90, 164, 161, 231, 11, 21, 3, 97, 
70, 34, 86, 124, 114, 119, 223, 123, 167, 47, 219, 197, 221, 193, 192, 126, 78, 39, 233, 
4, 120, 33, 131, 145, 183, 143, 31, 76, 121, 92, 153, 85, 100, 52, 109, 159, 112, 71, 62, 
8, 244, 116, 245, 240, 215, 111, 134, 199, 214, 196, 213, 180, 189, 224, 101, 202, 201, 
168, 32, 250, 59, 43, 27, 198, 239, 137, 238, 50, 
     149, 107, 247, 7, 220, 246, 204, 127, 83, 146, 147, 48, 17, 67, 23, 93, 115, 41, 
191, 2, 227, 87, 173, 108, 82, 205, 49, 1, 66, 105, 176, 22, 236, 29, 170, 110, 18, 28, 
185, 235, 61, 88, 13, 165, 188, 177, 230, 130, 253, 150, 211, 42, 129, 125, 141, 19, 190, 
133, 53, 84, 140, 135, 10, 241, 222, 73, 12, 155, 57, 237, 181, 36, 72, 174, 207, 98, 5, 
229, 254, 156, 178, 128, 55, 14, 69, 30, 194, 122, 46, 136, 160, 206, 26, 102, 218, 103, 
139, 195, 0, 144, 186, 249, 79, 81, 75, 212, 234, 158, 163, 80, 226, 65, 200, 38, 187, 
113, 63, 24, 25, 142, 51, 228, 35, 157, 216, 104, 162, 15, 89] 
D = [2, 4, 0, 5, 6, 7, 1, 3] 
#plain = bytearray("asdfghik123456") 
#print plain 
key = bytearray('^&#qD93_') 
#assert len(key) == 8 
ss=[chr(x) for x in range(0x0,0xff)] 
res='OO|OO||OO|||||OO|OO||O||O|O||O|||O|OOOOOOO|O|O|O|||||OO|||
O|||OO||O|OOOOOO|O|OO|OO||||OO|||OOOO|||||O||||O|OO|O|O|O||OO|
O||O|OO|O||O|||O||O|OO|OOOOOO||OOO|O|O|O|||O|OO|O|O||O||O||OO
OOO|||OO|O|' 
flag='OO||O||O|O|||OOOO||||||O|O|||OOO||O|OOOO||O|O|OO|||||OOOO|
|||O||OO|OO||O||O|O|O|||||OOOOOO|O|O||OOOOOOO||O|||OOOO||OO|O
O|||O|OO|O|||O|O|OO|OOOO|OOO|OOO|OOOO||O|OO||||OO||||OOO|O|O
||OO||||O||OOO|||O|OO|OO||OO||OOOO|O|' 
def fuzz(plain): 
 t1 = bytearray() 
 for i in plain: 
    t1.append(A[i]) 
 t2 = bytearray() 
 for i in range(len(t1)): 
    t2.append(LShift(t1[i], B[i % 8])) 
 for times in range(16): 
    for i in range(len(t2)): 
        t2[i] = C[t2[i]] 
    for i in range(len(t2)): 
        t2[i] = LShift(t2[i], i ^ D[i % 8]) 
    for i in range(len(t2)): 
        t2[i] ^= key[i % 8] 
 out = "" 
 for i in t2: 
    out += encode(i) 
 if out in flag: 
   #print out 
   print repr(plain) 
for t in ss: 
     #f='SSCTF{'+'\x98qaz9ol.\xabhy64rfvQujm'+t 
     f='SSCTF{1qaz9ol.nhy64rfv7ujm'+t 
     fuzz(bytearray(f)) 
得到 SSCTF{1qaz9ol.nhy64rfv7ujm} 
Crypto&Exploit200(Chain Rule) 
将所有 zip 以密码 start 解压后，发现一个解开的 1.txt 
内容为 Next password is [hh.M5Px4U%8]*2z 
再用这个密码去解压所有 zip 就是了，机智的队友很快编写了脚本，最后解开得
到 flag.zip 和 pwd.zip 
pwd.zip 里有很多 txt，需要找到一条路径，从 start.txt 到达 376831.txt,得到提示 
Follow the path, collect the comments. Avoid the BLACKHOLE! 
爆破压缩包密码的脚本： 
import zipfile 
import os 
from threading import Thread 
import time 
nowDir = '.' 