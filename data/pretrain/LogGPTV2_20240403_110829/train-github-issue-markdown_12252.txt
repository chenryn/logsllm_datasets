According to the manual — by default — the compiler option `strict` is set to
`true`, and the option `useUnknownInCatchVariables` is currently set to
`false`.
That manual page also shows an example of what an implied `tsconfig.json`
looks like — which doesn't currently depict the state of this relationship,
but that's not the focus of this issue...
The TSConfig reference includes this documentation:
> ## `useUnknownInCatchVariables`
>
> In TypeScript 4.0, support was added to allow changing the type of the
> variable in a catch clause from `any` to `unknown`. Allowing for code like:
>  
>  
>     try {
>       // ...
>     } catch (err) {
>       // We have to verify err is an
>       // error before using it as one.
>       if (err instanceof Error) {
>         console.log(err.message);
>       }
>     }
>
> This pattern ensures that error handling code becomes more comprehensive
> because you cannot guarantee that the object being thrown is a Error
> subclass ahead of time. With the flag `useUnknownInCatchVariables` enabled,
> then you do not need the additional syntax (`: unknown`) nor a linter rule
> to try enforce this behavior.
>
> * * *
>
> **Default:**  
>  `true` if `strict`, `false` otherwise.
>
> Related:  
>  `strict`
>
> Released:  
>  4.4
Here are two links to the TS playground comparing the two behaviors (based on
the code above):
  * enabled (`true`)
  * disabled (`false`)
As the documentation describes: this feature is enabled by default when
`strict` is enabled, but **that's not currently the case in Deno** — and, as
the code in the playground links demonstrate, this feature is useful in
providing better type safety in `catch` blocks — helping prevent further
potential exceptions.
I would like to see Deno set this compiler option to `true` by default, just
like vanilla TS does — and have better type safety in `catch` blocks.