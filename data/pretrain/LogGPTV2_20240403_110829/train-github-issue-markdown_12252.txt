According to the manual, the compiler option `strict` is set to `true` by default, while the option `useUnknownInCatchVariables` is currently set to `false`. The manual also provides an example of an implied `tsconfig.json`, but it does not reflect the current state of this relationship, which is not the primary focus of this issue.

The TSConfig reference includes the following documentation for `useUnknownInCatchVariables`:

### `useUnknownInCatchVariables`

In TypeScript 4.0, support was added to change the type of the variable in a `catch` clause from `any` to `unknown`. This allows for code like:

```typescript
try {
  // ...
} catch (err) {
  // We have to verify that err is an error before using it as one.
  if (err instanceof Error) {
    console.log(err.message);
  }
}
```

This pattern enhances the comprehensiveness of error handling because you cannot guarantee that the thrown object is an `Error` subclass. When the `useUnknownInCatchVariables` flag is enabled, you do not need to add the `: unknown` type annotation or a linter rule to enforce this behavior.

- **Default:** `true` if `strict` is enabled, `false` otherwise.
- **Related:** `strict`
- **Released:** TypeScript 4.4

Here are two links to the TypeScript playground comparing the behaviors with and without `useUnknownInCatchVariables` enabled:
- [Enabled (`true`)](link_to_playground_enabled)
- [Disabled (`false`)](link_to_playground_disabled)

As the documentation states, this feature is enabled by default when `strict` is enabled. However, this is not currently the case in Deno. The code in the playground links demonstrates that this feature provides better type safety in `catch` blocks, helping to prevent potential exceptions.

I would like to see Deno set the `useUnknownInCatchVariables` compiler option to `true` by default, just as vanilla TypeScript does, to improve type safety in `catch` blocks.