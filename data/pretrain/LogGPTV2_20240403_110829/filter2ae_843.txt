# Google Search XSS漏洞分析

##### 译文声明
本文是翻译文章，原文作者为kinugawamasato，来源：[kinugawamasato](kinugawamasato)。译文仅供参考，具体内容及含义以原文为准。

## 引言
最近在YouTube上看到一个关于Google搜索XSS（跨站脚本攻击）的视频，令人震惊的是，在2019年，竟然还能在Google首页找到XSS漏洞。本文将探讨这个看似简单的payload是如何导致XSS的。

## HTML净化
为了防止XSS攻击，通常会对用户的输入进行净化处理，即对可能导致XSS的部分进行编码或过滤，同时保留用户输入内容的完整性。许多Web框架已经具备这种功能。然而，针对HTML的过滤仍存在一些挑战，尤其是在需要保留某些HTML标签的情况下。例如，在Gmail页面中，`<b>`标签表示加粗，`<i>`标签表示倾斜。

### 服务端解析
对于需要过滤掉XSS并保留部分HTML标签的情况，可以考虑在服务端实现一个HTML净化器。然而，实现这样的净化器并不容易。通过以下例子来说明其复杂性：

```html
1. <div><script title="</script>"></div>
2. <div><script title="</script><img src=x onerror=alert(1)>"></div>
```

这两个代码片段虽然结构相似，但浏览器对其解析方式不同。对于第一个片段，浏览器将其解析为一个包含`<script>`标签的`<div>`，而对于第二个片段，浏览器会将`<script>`标签的内容插入到`<div>`中，从而触发XSS攻击。

## 使用`<template>`元素
使用`<template>`元素可以避免上述问题。`<template>`元素中的内容不会被立即解析和执行，而是作为一个DOM片段存储。因此，可以在解析后对其进行净化处理。

```javascript
// 创建一个template元素
const template = document.createElement('template');
// 将payload插入template中
template.innerHTML = '<div><script title="</script><img src=x onerror=alert(1)>"></div>';
// 查看解析后的HTML
console.log(template.content.children[0]);
// 删除可能导致XSS的危险属性
template.content.children[0].removeAttribute("onerror");
// 将安全的HTML插入最终需要渲染的DOM节点上
const div = document.createElement('div');
div.innerHTML = template.content.children[0].outerHTML;
```

这样，我们就可以利用浏览器的解析器来解析HTML，并对解析后的HTML进行净化，确保最终输出的安全性。

## Google Search XSS漏洞
Google Search XSS漏洞的原因与上述示例类似。由于Google已经修复了此问题，无法亲自验证。以下是根据YouTube视频截图的分析：

1. **Payload**:
   ```html
   "><img src=x onerror=alert(1)>
   ```

2. **断点调试**:
   通过设置断点发现，在某处执行了`a.innerHTML = b`，其中`b`的内容为`"><img src=x onerror=alert(1)>`。这表明这段代码是有危害的。

3. **修复过程**:
   通过对比修复前后的JavaScript文件，发现某处的`a.innerHTML`被修改为带有净化器的实现。Google使用的JavaScript库是Google Closure，这是一个开源的JavaScript框架。在[修复XSS的commit](https://github.com/google/closure-library/commit/c79ab48e8e962fee57e68739c00e16b9934c0ffa)中，可以看到这是对之前某个commit的回滚。而[导致XSS的commit](https://github.com/google/closure-library/commit/16201e8c00b98aa4d46a2c6830006ed4608532f4)删除了某些净化语句，并直接使用了`innerHTML`。

## 总结
1. Google在HTML净化时使用了`<template>`元素，该元素处于JavaScript禁用环境。
2. `noscript`标签在JavaScript启用和禁用环境中的解析不一致，给XSS创造了可能。
3. Google本身有额外的净化措施，但在某个修复其他问题的commit中被删掉了。

尽管当前流行的Web框架对XSS防御的支持已经相当完善，但通过这个案例可以看出，挖掘XSS漏洞仍然需要深入的技术知识和经验。

## 参考资料
- YouTube: [链接]
- 漏洞发现者Twitter: [链接]