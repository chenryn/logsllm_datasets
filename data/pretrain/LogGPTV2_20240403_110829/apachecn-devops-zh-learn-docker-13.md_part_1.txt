# 十三、使用 Kubernetes 部署、更新和保护应用
在最后一章中，我们学习了容器编排器 Kubernetes 的基础知识。我们对 Kubernetes 的架构有了一个高层次的概述，并了解了 Kubernetes 用来定义和管理容器化应用的重要对象。
在本章中，我们将学习如何将应用部署、更新和扩展到 Kubernetes 集群中。我们还将解释如何实现零宕机部署，以实现任务关键型应用的无中断更新和回滚。最后，在本章中，我们将介绍 Kubernetes 机密，作为配置服务和保护敏感数据的一种手段。
本章涵盖以下主题:
*   部署第一个应用
*   零停机部署
*   不可告人的机密
完成本章后，您将能够:
*   将多服务应用部署到 Kubernetes 集群中
*   更新在 Kubernetes 中运行的应用服务，而不会导致停机
*   定义 Kubernetes 集群中的机密
*   配置应用服务以使用 Kubernetes 机密
# 技术要求
在本章中，我们将在本地计算机上使用 Minikube。有关如何安装和使用 Minikube 的更多信息，请参考[第 2 章](02.html)、*设置工作环境、*。
本章的代码可以在`labs`文件夹的`ch13`子文件夹中找到。请确保您已经在[https://github.com/fundamentalsofdocker/labs,](https://github.com/fundamentalsofdocker/labs)克隆了 GitHub 存储库，如[第 2 章](02.html)、*设置工作环境*中所述。
在您的终端中，导航至文件夹`labs/ch13`。
# 部署第一个应用
我们将采用我们在[第 8 章](08.html)、 *Docker Compose、*中首次介绍的 pets 应用，并将其部署到 Kubernetes 集群中。我们的集群将是 Minikube，正如您所知，它是一个单节点集群。但是，从部署的角度来看，集群有多大以及位于何处并不重要，无论是在云中、公司的数据中心还是个人工作站上。
# 部署 web 组件
提醒一下，我们的应用由两个应用服务组成，基于 Node.js 的 web 组件和支持 PostgreSQL 的数据库。在前一章中，我们了解到需要为每个要部署的应用服务定义一个 Kubernetes `Deployment`对象。让我们首先为 web 组件做这件事。在本书中，我们将一如既往地选择声明性的方式来定义我们的对象。下面是 YAML 为 web 组件定义的`Deployment`对象:
![](img/ee799c98-eede-4082-b45f-65563a238983.png)
Kubernetes deployment definition for the web component 
前面的部署定义可以在`ch13`文件夹中的`web-deployment.yaml`文件中找到。代码行如下:
*   **在第 4 行**:我们将`Deployment`对象的`name`定义为`web`
*   **在第 6 行**:我们声明我们想要让`web`组件的一个实例运行
*   **从 8 号线到 10 号线**:我们定义了哪些吊舱将成为我们部署的一部分，即那些分别带有标签`app`和`service`以及数值`pets`和`web`的吊舱
*   **第 11 行**:在从第 11 行开始的豆荚模板中，我们定义每个豆荚将应用两个标签`app`和`service`
*   **从第 17 行**:我们定义将在吊舱中运行的单个容器。容器的映像是我们熟知的`fundamentalsofdocker/ch08-web:1.0`映像，容器的名称将是`web`
*   **端口**:最后，我们声明容器为 TCP 类型的流量公开端口`3000`
Please make sure that you have set the context of `kubectl` to `Minikube`. See [Chapter 2](02.html), *Setting up a Working Environment,* for details on how to do that.
我们可以使用`kubectl`部署这个`Deployment`对象:
```
$ kubectl create -f web-deployment.yaml
```
我们可以使用 Kubernetes CLI 再次检查部署是否已经创建，我们应该会看到以下输出:
![](img/8537e86a-505d-4aa3-925c-7d9b2c818469.png)
Listing all resources running in Minikube At the time of writing, there seems to be a bug in Minikube or `kubectl` that displays certain resources twice when using the command `kubectl get all`. You can just ignore the duplicate output.
在前面的输出中，我们看到 Kubernetes 创建了三个对象——部署、一个附属的`ReplicaSet`和一个单独的 pod(记得我们指定我们只需要一个副本)。当前状态对应于所有三个对象的期望状态，因此到目前为止我们都很好。
现在，网络服务需要向公众公开。为此，我们需要定义一个类型为`NodePort`的 Kubernetes `Service`对象。这是定义，可以在`labs`文件夹`ch13`的`web-service.yaml`文件中找到:
![](img/3f972d7c-821e-4f0e-99df-d3dc915e0bac.png)
Definition of the Service object for our web component
前面几行代码如下:
*   **第 4 行**:我们将这个`Service`对象的名称设置为`web`。
*   **第 6 行**:我们定义正在使用的`Service`对象的类型。由于`web`组件必须可以从集群外部访问，因此它不能是`ClusterIP`类型的`Service`对象，而必须是`NodePort`或`LoadBalancer`类型。在前一章中，我们已经讨论了各种类型的 Kubernetes 服务，因此不再赘述。在我们的示例中，我们使用的是`NodePort`类型的服务。
*   **在第 8 行和第 9 行**:我们指定要公开端口`3000`以便通过 TCP 协议进行访问。Kubernetes 会自动将容器端口`3000`映射到 30，000 到 32，768 范围内的自由主机端口。Kubernetes 有效选择的端口可以在服务创建后使用`kubectl get service`或`kubectl describe`命令来确定。
*   **从 10 号线到 12 号线**:我们为豆荚定义了过滤标准，对于豆荚，该服务将是一个稳定的端点。在这种情况下，所有的豆荚都有标签`app`和`service`，分别带有数值`pets`和`web`。
有了这个`Service`对象的规范，我们可以使用`kubectl`来创建它:
```
$ kubectl create -f web-service.yaml
```
我们可以列出所有服务来查看前面命令的结果:
![](img/d6189ac0-51c8-4b88-aba0-0a9a07f02f6c.png)
The Service object created for the web component
在输出中，我们看到已经创建了一个名为`web`的服务。唯一的`clusterIP` `10.103.113.40`已分配给该服务，容器港口`3000`已在所有集群节点的港口`30125`上发布。
如果我们想要测试这个部署，我们需要首先找出 Minikube 有什么 IP 地址，然后使用这个 IP 地址来访问我们的`web`服务。下面是我们可以用来执行此操作的命令:
```
$ IP=$(minikube ip)
$ curl -4 $IP:30125/
Pets Demo Application
```
好的，回应是`Pets Demo Application`，这也是我们所期待的。web 服务在 Kubernetes 集群中启动并运行。接下来，我们要部署数据库。
# 部署数据库
数据库是有状态的组件，必须与无状态组件区别对待，比如我们的 web 组件。我们已经在[第 6 章](06.html)、*分布式应用架构、*和[第 9 章](09.html)、*orchestrator*中详细讨论了分布式应用架构中有状态和无状态组件之间的区别。
Kubernetes 为有状态组件定义了一种特殊类型的`ReplicaSet`对象。这个物体叫做`StatefulSet`。让我们使用这种对象来部署我们的数据库。定义可以在`labs/ch13/db-stateful-set.yaml`文件中找到。详情如下:
![](img/28812bec-ec2b-40d5-bbf4-08a4f3faa52d.png)
A StatefulSet for the DB component
好吧，这看起来有点可怕，但事实并非如此。它比 web 组件的部署定义要长一点，因为我们还需要定义一个 PostgreSQL 数据库可以存储数据的卷。批量索赔定义在第 25 行到第 33 行。我们想创建一个名为`pets-data`的卷，其最大大小等于 100 兆字节。在第 22 行到第 24 行，我们使用这个卷，并将其安装到 PostgreSQL 期望的容器`/var/lib/postgresql/data`中。在第 21 行，我们还声明 PostgreSQL 正在端口`5432`监听。
一如既往，我们使用`kubectl`来部署`StatefulSet`:
```
$ kubectl create -f db-stateful-set.yaml
```
如果我们现在列出集群中的所有资源，我们可以看到创建的附加对象:
![](img/a631c270-2c53-48fe-a742-4ef0c2f19ccc.png)
The StatefulSet and its pod
我们看到一个`StatefulSet`和一个豆荚已经被创造出来。对于这两种情况，当前状态对应于期望的状态，因此系统是健康的。但这并不意味着`web`组件此时可以访问数据库。服务发现目前还行不通。请记住，`web`组件想要以`db`的名称访问`db`服务。
为了使服务发现在集群中工作，我们还必须为数据库组件定义一个 Kubernetes `Service`对象。因为数据库应该只能从集群内部访问，所以我们需要的对象类型是`ClusterIP`。这是说明书，可以在`labs/ch13/db-service.yaml`文件中找到:
![](img/aa404f7c-a9fc-40f0-8a29-bd2d6cddae1a.png)
Definition of the Kubernetes Service object for the database
数据库组件将由这个`Service`对象表示，并且可以通过名称`db`到达，这是服务的名称，如第 4 行所定义的。数据库组件不必是公共可访问的，所以我们决定使用类型为`ClusterIP`的`Service`对象。第 10 行到第 12 行的选择器定义了该服务代表了定义了相应标签的所有吊舱的稳定端点，即`app: pets`和`service: db`。
让我们使用以下命令部署该服务:
```
$ kubectl create -f db-service.yaml
```
我们现在应该准备好测试应用了。这次我们可以使用浏览器欣赏有趣的猫形象:
![](img/a2a36764-2f6d-4be7-98b5-a7c102bfcb33.png)
Testing the pets application running in Kubernetes `192.168.99.100` is the IP address of my Minikube. Verify your address using the command `minikube ip`. The port number `30125` is the number that Kubernetes automatically selected for my web `Service` object. Replace this number with the port that Kubernetes assigned to your service. Get the number by using the command **`kubectl get services`**.
现在，我们已经成功地将 pets 应用部署到 Minikube，这是一个单节点 Kubernetes 集群。为此，我们必须定义四个工件，如下所示:
*   网络组件的一个`Deployment`和一个`Service`对象
*   数据库组件的一个`StatefulSet`和一个`Service`对象
要从集群中删除应用，我们可以使用以下小脚本:
```
kubectl delete svc/web
kubectl delete deploy/web
kubectl delete svc/db
kubectl delete statefulset/db
```
# 简化部署
到目前为止，我们已经创建了四个需要部署到集群的工件。这只是一个非常简单的应用，由两个组件组成。想象一下有一个更复杂的应用。这将很快成为一场维护噩梦。幸运的是，关于如何简化部署，我们有几个选项。我们将在这里讨论的方法是在一个文件中定义构成 Kubernetes 应用的所有组件的可能性。
本书范围之外的其他解决方案包括使用包管理器，例如 **Helm** 。
如果我们有一个由许多 Kubernetes 对象组成的应用，例如`Deployment`和`Service`对象，那么我们可以将它们都保存在一个文件中，并用三个破折号分隔各个对象定义。例如，如果我们希望将 web 组件的部署和服务定义放在一个文件中，这将如下所示:
```
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pets
      service: web
  template:
    metadata:
      labels:
        app: pets
        service: web
    spec:
      containers:
      - image: fundamentalsofdocker/ch08-web:1.0
        name: web
        ports:
        - containerPort: 3000
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  type: NodePort