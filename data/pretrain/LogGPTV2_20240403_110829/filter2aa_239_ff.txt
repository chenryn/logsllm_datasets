      await _booksService.LoadBooksAsync();
      _canGetBooks = false;
      (GetBooksCommand as DelegateCommand)? .RaiseCanExecuteChanged();
    }
图书服务定义的LoadBooksAsync方法在下一节中实现。
从XAML代码中，GetBooksCommand可以绑定到Button的Command属性上。创建视图
时会详细讨论它：
  注意： 在WPF中，当前的数据绑定不能用于事件。当处理程序添加到事件中
时，处理程序会与XAML代码紧密耦合。命令在视图和视图模型之间提供了这个分
离，以允许数据绑定。使用与UWP的编译绑定，数据绑定也可以用于事件。在这里，
命令为事件处理程序提供了额外的功能，因为如果命令可用，它们就提供信息。
31.6.2 服务和依赖注入
BooksViewModel利用实现IBooksService接口的服务。IBooksService使用
BooksViewModel的构造函数注入（代码文件ViewModels /BooksViewModel.cs）：
    private IBooksService _booksService;
    public BooksViewModel(IBooksService booksService)
    {
      _booksService = booksService;
      // etc.
    }
BookViewModel也是如此；它使用相同的IBooksService（代码文件
ViewModels/BookViewModel. cs）：
    private IBooksService _booksService;
    public BookViewModel(IBooksService booksService)
    {
      _booksService = booksService;
      // etc.
    }
接口IBooksService定义了视图模型访问图书所需的所有特性。这个协定在一个移动库
中定义，与视图模型相同，所以视图模型项目可以引用服务协定的项目（代码文件
Contracts/IBooksService.cs）：
    public interface IBooksService
    {
      Task LoadBooksAsync();
      IEnumerable Books { get; }
      Book GetBook(int bookId);
      Task AddOrUpdateBookAsync(Book book);
    }
接口IBooksService使用OnGetBooks方法中的BooksViewModel——GetBooksCommand
的处理程序（代码文件ViewModels / BooksViewModel.cs）：
    public async void OnGetBooks()
    {
      await _booksService.LoadBooksAsync();
      _canGetBooks = false;
      (GetBooksCommand as DelegateCommand)? .RaiseCanExecuteChanged();
    }
另外，BookViewModel使用IBooksService 
（代码文件
ViewModels/BookViewModel.cs）：
    private async void OnSaveBook()
    {
      Book = await _booksService.AddOrUpdateBookAsync(Book);
    }
视图模型不需要知道IBooksService的具体实现——只需要该接口。这称为控制反转
（Inversion of Control, IoC）原则或好莱坞原则（“不要打电话给我们，我们会给你打电
话”）。该模式命名为依赖注入。所需的依赖项从别的地方注入（在例子中，它在WPF或
UWP应用程序中）。
服务本身可以用与移动库不兼容的一个项目实现。它只需要兼容UI技术，如WPF或
UWP。视图模型不直接依赖服务的实现，因为它只使用接口协定。
类BooksService实现了接口IBooksService来加载图书，访问一本书，添加或更新图
书。接着它利用先前创建的存储库。BooksService也使用依赖注入。在构造函数中，传递
实现接口IBooksRepository的实例（代码文件Services / BooksService.cs）：
    public class BooksService: IBooksService
    {
      private ObservableCollection _books = new ObservableCollection(
);
      private IBooksRepository _booksRepository;
      public BooksService(IBooksRepository repository)
      {
        _booksRepository = repository;
      }
      public async Task LoadBooksAsync()
      {
        if (_books.Count > 0) return;
        IEnumerable books = await _booksRepository.GetItemsAsync();
        _books.Clear();
        foreach (var b in books)
        {
          _books.Add(b);
        }
      }
      public Book GetBook(int bookId)
      {
        return _books.Where(b => b.BookId == bookId).SingleOrDefault();
      }
      public async Task AddOrUpdateBookAsync(Book book)
      {
        Book updated = null;
        if (book.BookId == 0)
        {
          updated = await _booksRepository.AddAsync(book);
          _books.Add(updated);
        }
        else
        {
          updated = await _booksRepository.UpdateAsync(book);
          Book old = _books.Where(b => b.BookId == updated.BookId).Single();
          int ix = _books.IndexOf(old);
          _books.RemoveAt(ix);
          _books.Insert(ix, updated);
        }
        return updated;
      }
      IEnumerable IBooksService.Books => _books;
    }
注入IBooksRepository发生在WPF应用程序的App类中。属性BooksService实例化一个
BooksService对象，并在第一次访问属性时，传递一个新BooksSampleRepository （代码文
件BooksDesktopApp / App.xaml.cs）：
    private BooksService _booksService;
    public BooksService BooksService =>
      _booksService ? ? (_booksService =
        new BooksService(new BooksSampleRepository()));
BooksViewModel在BooksView类中用ViewModel属性初始化器实例化。在这里，创建
BooksViewModel时，注入BooksService的具体实现（代码文件
BooksDesktopApp/Views/BooksView. xaml.cs）：
    public partial class BooksView: UserControl
    {
      // etc.
      public BooksViewModel ViewModel { get; } =
          new BooksViewModel((App.Current as App).BooksService);
    }
31.7 视图
前面介绍了视图模型的创建，现在该学习视图了。在BooksDesktopApp和
BooksUniversalApp项目中，视图定义为Views子目录中的用户控件。
BooksView包含两个按钮（Load和Add）和一个列表框，来显示所有图书，如图31-9
所示。BookView显示一本书的细节，包含一个按钮Save和两个文本框控件，如图31-10所
示。
图31-9
图31-10
主要视图在网格的两列中显示两个用户控件（代码文件BooksDesktopApp 
/
MainWindow xaml）：
在UWP项目中，网格以相同的方式定义，但使用Page来替代Window，使用using关键
字而不是clr-namespace定义映射到.NET名称空间的XML别名（代码文件
BooksUniversalApp/MainPage.xaml）：
 注意： 
UWP项目的示例不使用通用Windows平台可用的特定控件，比如
CommandBar和RelativePanel，因为本章的重点是可维护、灵活的应用程序架构。具体
的UWP UI控件参见第32章。
31.7.1 注入视图模型
对于视图，重要的是视图模型是如何映射的。为了把视图模型映射到视图上，在后台
代码中定义ViewModel属性，在其中实例化所需的视图模型。代码在WPF和UWP中一
样，但UWP的密封类除外（代码文件BooksDesktopApp/Views/BookView.xaml.cs和
BooksUniversalApp/Views/Book-View.xaml.cs）：
    public sealed partial class BookView: UserControl
    {
      // etc.
      public BooksViewModel ViewModel { get; } =
        new BooksViewModel((App.Current as App).BooksService);
    }
31.7.2 用于WPF的数据绑定
对于用于WPF的数据绑定，需要在XAML代码中设置DataContext。在每一个用于元
素的数据绑定中，要在父元素的树中检查DataContext，找出绑定的来源。通过它，可以
根据需要使用不同的来源。然而，为了方便地切换到下一节所示的延迟绑定上，只为根元
素设置一次DataContext。通过表达式{Binding ElementName = booksView}使用元素绑定，
把上下文直接设置为根元素。UserControl本身称为booksView 
（代码文件
BooksDesktopApp / Views / BooksView.xaml）：
在Button控件中，Command属性绑定到视图模型的GetBooksCommand上。因为
BooksView的DataContext设置为BooksView, 
BooksView的ViewModel属性返回
BooksViewModel，所以使用句点符号和带ViewModel前缀的属性名，把命令绑定到
GetBooksCommand和AddBookCommand属性上。因为命令不会改变，所以使用模式
OneTime是最好的选择：
数据绑定模式OneTime没有注册更改通知。模式设置为OneWay，就注册了数据源的
更改通知，根据源是实现为一个依赖属性，还是实现INotifyPropertyChanged接口，来更新
用户界面。模式设置为TwoWay不仅从来源中更新UI，而且从UI中更新来源。
ListBox的ItemsSource属性绑定到图书列表上。这个列表可以改变；因此使用模式
OneTime进行数据绑定。对于列表的更新，源需要实现INotifyCollectionChanged。为此，
可以给图书使用ObservableCollection类型，如前面的BooksService实现所示。在列表框中
选择一项，会更新SelectedBook属性，这也会更新BookViewModel。其他视图模型的更新
目前缺失，因为需要实现一个消息传递机制，参见本章后面的“使用事件传递消息”一节。
为了显示列表框中的每一项，使用一个DataTemplate，其中TextBlock绑定到Book的Title属
性上：
  注意： XAML语法参见第29章。XAML的样式化和数据模板参见第30章。
在BookView中，没有什么特别的，所有内容都在BooksView中介绍过了。只是注
意，两个TextBox控件绑定到Book的Title和Publisher属性上，Mode设置为TwoWay，因为
用户应该能够改变其值，更新Book源（代码文件BooksDesktopApp 
/ 
Views 
/
BookView.xaml）：
  注意： 绑定的默认模式在不同技术之间是不同的。例如，用TextBox元素的
Text属性绑定，对于WPF默认为TwoWay绑定。对于编译绑定，使用相同的属性和元
素，就默认为OneTime模式。为了避免混淆，最好总是显式地定义模式。
  注意： 用于WPF的数据绑定的所有功能参见第34章。WPF比UWP支持更多
的绑定选项。另一方面，UWP提供了编译的数据绑定，而不能用于WPF。本章的重点
是数据绑定，很容易在用于WPF示例的传统数据绑定和用于UWP应用程序示例的已编
译数据绑定之间转换。
就应用程序的当前状态而言，可以运行WPF应用程序，在单击Load按钮后，查看填
充的图书列表。还没有实现的是在列表框中选择书后，填充BookView，因为
BookViewModel需要了解变更。在“消息传递”一节实现用于UWP项目的数据绑定后，就
完成它。
31.7.3 用于UWP的已编译数据绑定
在UWP中，可以使用与WPF相同的数据绑定。然而，绑定表达式利用了.NET反射。
Microsoft Office和Windows 10中的一些工具利用了XAML，这里使用了数以百计的控件，
绑定就太慢了。直接设置属性会快很多。直接设置属性的缺点是，代码共享和单元测试不
像使用本章前面介绍的视图模型那么容易实现。因此，XAML团队发明了已编译的数据绑
定，它现在可以用于UWP，但还不能用于WPF。
当使用已编译的数据绑定时，就使用x: Bind标记扩展，而不是使用Binding。除了标
记扩展元素的名称之外，比较x: 
Bind和Binding，看起来很类似，如下面的代码片段所
示：
在后台，直接访问TextBox的Text属性，在设置TextBox时检索图书的Title属性。除了
更快之外，已编译的绑定还有一个优点：当没有使用正确的属性名时，会得到编译器错
误。在传统的数据绑定中，默认忽略绑定错误，也看不到结果。
下面看看BooksView的XAML代码。DataContext不需要用已编译的绑定设置，因为没
有使用它。相反，绑定总是直接映射到根元素。这就是为什么在WPF示例中，
DataContext也设置为根元素，使绑定看起来很相似。
在UserControl定义中，需要打开更多的.NET名称空间，来映射Models名称空间中的
Book类型，还需要BooksUniversalApp.Converters名称空间中定义的一个转换器（代码文件
BooksUniversalApp / Views/ BooksView.xaml）：
Button控件的Command属性以之前的方式绑定，但这次使用了x:Bind标记表达式：
  注意： 不是使用Command属性与数据绑定，当使用已编译的数据绑定时，也
可以把事件处理程序绑定到事件上。可以把Click事件绑定到一个没有参数的void方法