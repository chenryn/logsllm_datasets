A variable is considered secret when the adversary has no
information on it, that is, the adversary cannot distinguish
it from a random number. CryptoVerif distinguishes two
notions of secrecy.
• A process Q preserves the one-session secrecy of x
when, with overwhelming probability, the adversary in-
teracting with Q cannot distinguish any element of the
array x from a uniformly distributed random number
by a single test query. The test query returns either
the desired element of x or a freshly generated random
number, and the adversary has to distinguish between
these two situations. (This notion of secrecy does not
guarantee that the random numbers in x are indepen-
dent.)
• A process Q preserves the secrecy of x when, with over-
whelming probability, the adversary interacting with Q
cannot distinguish the elements of the array x from in-
dependent, uniformly distributed random numbers. In
this notion of secrecy, the adversary can perform sev-
eral test queries on the various elements of the array x,
which either all return elements of x or all return in-
dependent random numbers. This corresponds to the
“real-or-random” deﬁnition of security [2]. (As shown
in [2], this notion is stronger than the more standard
approach in which the adversary can perform a single
test query and some reveal queries, which always reveal
an element of x.)
When the array x contains a single element (that is, x is
deﬁned under no replication), the notions of one-session se-
crecy and of secrecy are equivalent. The one-session secrecy
of x is coded in CryptoVerif by the query secret1 x, while
the secrecy of x is coded by secret x. The formal deﬁnitions
of these two notions can be found in [11].
4. RESULTS
We have used CryptoVerif 1.06pl3 to prove secrecy and
authentication properties for Kerberos (with and without
PKINIT). In the following we will ﬁrst discuss the assump-
tions on the cryptographic primitives used in our Cryp-
toVerif proofs, and then present the authentication and se-
crecy results.
The main challenges we faced in achieving the results be-
low were the following:
• The user needs to know the process calculus well enough
to understand how exactly CryptoVerif applies the se-
curity of cryptographic primitives and to be able to read
the last game of a CryptoVerif proof (which is not triv-
ial and needs some practice). The latter is particularly
important for interactive proofs.
• The user must know the underlying cryptography well
enough to be able to specify the security of crypto-
graphic primitives through indistinguishable oracles, al-
though many primitives have already been speciﬁed in
previous examples [11] and the user can copy them from
there.
Furthermore, we note that Kerberos is a well-studied pro-
tocol and we found the previous work on Kerberos 5 [17,
19, 4] very valuable, as it gave us a good sense for which
results we could expect to be veriﬁed by CryptoVerif in the
computational model. This helped us, in cases in which we
initially could not verify an expected property, to narrow
down the cause—mostly issues with the underlying cryptog-
raphy but, in rare cases, also issues with CryptoVerif itself
(see also Section 4.5).
4.1 Cryptographic Assumptions
In our analysis, the public-key encryption scheme is as-
sumed to be indistinguishable under adaptive chosen ci-
phertext attacks (IND-CCA2), and the signature scheme is
assumed to be unforgeable under chosen message attacks
(UF-CMA). Symmetric encryption is assumed to be indis-
tinguishable under chosen plaintext attacks (IND-CPA) and
91
to satisfy ciphertext integrity (INT-CTXT). These proper-
ties guarantee indistinguishability under adaptive chosen ci-
phertext attacks (IND-CCA2), as shown in [9]. These as-
sumptions are the same as in [4], and Boldyreva and Kumar
showed in [16] that the encryption of the simpliﬁed proﬁle of
basic Kerberos satisﬁes these properties for symmetric en-
cryption. They also showed that the general proﬁle encryp-
tion is weak, and propose a corrected version of the general
proﬁle encryption that satisﬁes these properties.
The keyed hash function used to compute the check-
sum in PKINIT is assumed to be a message authentica-
tion code, weakly unforgeable under chosen message attacks
(UF-CMA), which is in accordance with [8] and which also
matches the assumptions in [4]. As it is unwise to use
the same key for multiple cryptographic operations, a key
derivation function is used to generate multiple keys from a
base key; this key derivation function takes as input the base
key and publicly known integer called usage number [35].
We assume that the key derivation function is a pseudo-
random function and use it to derive, from a base key, a
key for the message authentication code and another key for
the encryption of the message component that includes the
authentication key for the client (denoted k in Figure 2).
We note that in the speciﬁcations [23, 34] a key derivation
function is used not only for the key mentioned above but
for all symmetric keys (even if they are not used for multiple
cryptographic operations); we, however, restrict the use of a
key derivation function to the key above. Implementing the
use of a key derivation function for all symmetric keys will
be part of future work.
For basic Kerberos, we assume that the long-term key kC
shared between the client and the KAS is generated from a
random seed, although in practice this key is usually gen-
erated from a password and is vulnerable to dictionary at-
tacks [10].
Furthermore, we assume that concatenations of some
types of bitstrings (e.g., a key followed by a timestamp fol-
lowed by a client name) cannot be confused with other such
concatenations (e.g., a key followed by a nonce followed by
a timestamp followed by a TGS name). The assumptions of
this type that we make are justiﬁable in view of the diﬀer-
ences between the various Kerberos data structures.
4.2 Authentication Results
Here we present authentication properties directly proved
in the computational model by CryptoVerif 1.06pl3 under
the assumptions from Section 4.1.
We formalize Property 1(a) as the following theorem.
Theorem 1 (Authentication of KAS to client)
basic and public-key Kerberos, for each instance of:
• an honest client C completing the AS exchange with
In
KAS K,
• in which the client sent the request mreq to receive a
• received what appears to be a valid reply m(cid:48)
TGT for the use with honest TGS T ,
rep
there exists, with overwhelming probability, a distinct corre-
sponding instance of:
• the KAS completing the AS exchange with C,
• in which the KAS received the request mreq for a TGT
for the use between C and T ,
92
new r : keyseed;
!i(cid:48)≤n(cid:48)(cid:48)
(!i≤n(x : maxenc) → new r
!i≤n(cid:48)
≈ !i(cid:48)≤n(cid:48)(cid:48)
(y : bitstring) → dec(y, kgen(r)))
new r : keyseed;
(cid:48)
: seed; enc(x, kgen(r), r
(cid:48)
),
(!i≤n(x : maxenc) → new r
(cid:48)
: seed;
!i≤n(cid:48)
let z : bitstring = enc(x, kgen
(y : bitstring) →
ﬁnd j ≤ n suchthat deﬁned(x[j], z[j]) ∧ z[j] = y
) in z,
(r), r
(cid:48)
(cid:48)
then injbot(x[j]) else ⊥
(INT-CTXT)
!i(cid:48)≤n(cid:48)
≈ !i(cid:48)≤n(cid:48)
new r
new r : keyseed; !i≤n(x : maxenc) →
(cid:48)
)
new r : keyseed; !i≤n(x : maxenc) →
(r), r
: seed; enc(x, kgen
(Z(x), kgen
: seed; enc
new r
(r), r
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
)
(IND-CPA)
Figure 4: Deﬁnition of INT-CTXT and IND-CPA
symmetric encryption in CryptoVerif
rep.
• sent reply mrep, where all message components of mrep,
except the TGT, are equal to the corresponding compo-
nents in m(cid:48)
Proof. Basic Kerberos case: when the client process
completes its participation in an AS exchange, it executes an
event fullCK (hostT , n1, TGT , m2) that contains the name
hostT of the TGS and the nonce n1 from the client’s ﬁrst
message, and the reply from K in TGT and m2, where m2 is
the reply component encrypted under C’s long-term shared
key and TGT is assumed to be a ticket granting ticket.
When the KAS process completes its participation in an
AS exchange, it executes an event fullKC (hostY , hostW , n(cid:48)
1,
TGT (cid:48), e4 ) that contains the name hostY of the client, the
name hostW of the TGS and the nonce n(cid:48)
1 listed in the re-
quest. Furthermore, it contains ticket granting ticket TGT (cid:48)
generated by the KAS containing the authentication key
AK (cid:48), and the reply component e4 encrypted under hostY ’s
long-term shared key. CryptoVerif can then automatically
prove the query: inj-event(fullCK (T, n, x, y)) ⇒
inj-event(fullKC (C, T, n, z, y)).
The proof done by CryptoVerif consists essentially in ap-
plying, after some minor simpliﬁcations, the security as-
sumptions on symmetric key encryption for each key kS, kT ,
and kC . In more detail, CryptoVerif performs the following
transformations:
• It removes assignments on kS, that is, it replaces kS with
its value kgen(rKs): kS is generated from a random seed
rKs by the key generation algorithm kgen.
• The variable Pkey is assigned at two places in the game,
either with the key kS = kgen(rKs), when T and S are
honest, or with a key coming from the adversary. Cryp-
toVerif renames these two assignments to Pkey to dis-
tinct names Pkey 88 and Pkey 87 respectively, which
leads to distinguishing two cases, depending on whether
Pkey is shared between honest T and S or not.
• CryptoVerif removes assignments on Pkey 88 , that is,
it replaces Pkey 88 with its value kgen(rKs).
• CryptoVerif applies the INT-CTXT property of the
symmetric encryption on the key kS = kgen(rKs). The
INT-CTXT property is represented in CryptoVerif by
the equivalence (INT-CTXT) of Figure 4. In this equiv-
alence, the left-hand side chooses a random seed r and
provides two oracles: the ﬁrst one encrypts its argument
x under key kgen(r) generated from r, using fresh coins
r(cid:48); the second one decrypts its argument y with key
kgen(r). The right-hand side provides two correspond-
ing oracles: the ﬁrst one still encrypts under kgen(r),
but additionally stores the ciphertext in the variable z.
This variable is implicitly an array indexed by the num-
ber of the call to the encryption oracle. The second
oracle, instead of decrypting its argument y, looks for y
in the array z that contains all computed ciphertexts.
When y is found in this array, that is, there exists j
such that z[j] = y, the oracle returns the corresponding
plaintext x[j], injected by i⊥ into the set of bitstrings
union the special symbol ⊥. When no such y is found,
the oracle returns ⊥, meaning that decryption failed.
Ciphertext integrity implies that the left-hand side and
the right-hand side are indistinguishable for an attacker:
with overwhelming probability, the attacker is unable to
produce a valid ciphertext without calling the encryp-
tion oracle, so the valid ciphertexts are those stored in
z and decryption succeeds if and only if the ciphertext
is found in the array z.
Using this equivalence, CryptoVerif can transform a
game by replacing the left-hand side of the equiv-
alence with its right-hand side as follows: provided
rKs is a random number used only in terms of the
form enc(M, kgen(rKs), r(cid:48)) for a fresh random number
r(cid:48) and dec(M(cid:48), kgen(rKs)), it replaces occurrences of
enc(M, kgen(rKs), r(cid:48)) with let x = M in let z = enc(x,
kgen(cid:48)(rKs), r(cid:48)) in z for some new variables x and z, and
dec(M(cid:48), kgen(rKs)) with a lookup that looks for M(cid:48) in
all variables z and returns the corresponding value of
injbot(x) in case of success and ⊥ in case of failure.
(The previous game transformations were useful in or-
der to make terms of the form enc(M, kgen(rKs), r(cid:48)) and
dec(M(cid:48), kgen(rKs)) appear.)
As a ﬁnal technical detail, the right-hand side of the
equivalence uses the function symbol kgen(cid:48) instead of
kgen: this prevents repeated application of the game
transformation since after transformation, terms of the
form enc(x, kgen(r), r(cid:48)) are no longer found.
• After each cryptographic transformation, the game
is simpliﬁed. CryptoVerif uses essentially equational
reasoning to replace terms with simpler terms and
tries to determine the result of tests, thus removes
branches that cannot be executed.
if
the initial game contained a statement of the form
let injbot(concat2(SK , tt, hostC )) = dec(M, kS) in . . .,
the decryption has been replaced by a lookup that re-
turns plaintexts, so simpliﬁcation can then select only
the branche(s) of the lookup that return a value that
can be equal to i⊥(concat2(SK , tt, hostC )).
In particular,
The simpliﬁcation also removes collisions between ran-
dom numbers: