common primitive element h.  They each independently choose a random,  secret 
number  known  only  to  themselves.  We  shall  call  these  numbers  XA  and  XB, 
respectively. Using these numbers they compute, in GF(p), the information: 
... (5.17) 
and  publish  the  numbers YA  and YB  in  a  public  directory.  Alice  now  obtains YB 
from this directory and Bob likewise obtains YA- Alice now computes, in GF(p): 
KA  = YB  = I-' 
XA 
r/BxA 
and Bob computes, in GF(i): 
x 
xBxA 
KB  =  YB  B  =  ~ 
=  KA 
... (5.18) 
...  (5.19) 
Alice and Bob now share a common number which can be used as a key in a 
secret-key cryptosystem.  If Eve,  the eavesdropper,  wishes  to  find  this  common 
number, she must attempt to reconstruct it from knowledge of YA  and YB'  Assum(cid:173)
ing she knows the common modulus and primitive element, this entails her being 
able to invert the OWF. Inversion of the Diffie-Hellman OWF is the well-known 
discrete  logarithm  problem  and  for  large  numbers  of  the  order  of p  '"  10100 
appears to be an extremely difficult problem requiring years on a computer cap(cid:173)
able  of performing  104  mips.  It also  appears  that  breaking  the  Diffie-Hellman 
system  is  equivalent to  solving the discrete logarithm problem.  There are,  how(cid:173)
ever, no formal proofs of these two statements. 
As we have already mentioned the weak link in such a system is the ability of 
an attacker to  masquerade as  either Bob or Alice.  An authenticated Diffie-Hell(cid:173)
man system where each user can be authenticated to every other user is therefore 
essential for  the  secure  operation of this  kind of key  exchange.  An example of 
this kind of authenticated exchange is the station-to-station protocol [14]. 
PUBLIC-KEY CRYPTOGRAPHY  79 
The security of the Diffie-Hellman key exchange is based upon the  supposed 
and unproven difficulty of finding discrete logarithms. Modular exponentiation is 
by  contrast a very  quick process  and  there  exist very  fast  algorithms  to  achieve 
this.  The  security  achieved  in  public-key  systems  is  based  upon  very  different 
principles  to  those  of secret-key  systems  which  rely  on  complex  mathematical 
permutations  to  achieve  confusion  and  diffusion.  Cryptographers  using  public(cid:173)
key  cryptography  have  to  make  the  assumption,  albeit  a  reasonable  one,  that 
advances  in mathematics will  not  spectacularly change the  ability  of an  attacker 
to  compute  these  difficult  problems.  The  reasoning  is  based  on  complexity 
classes  and  the  theoretical  computing  time  that  is  required  to  solve  a  particular 
problem.  It seems  quite  likely  that the  discrete  log  problem  and  the  problem of 
factoring belong to  a class of problems that are,  in  a computational  sense,  'hard' 
problems. 
5.3.3 
The  RSA  cryptosystem 
In  1978 Rivest, Shamir and Adleman published a public-key cryptosystem which 
has  become  known  as  RSA  [12].  This  cryptosystem  relies  on  the  supposed 
difficulty of factoring  and,  like the  discrete log problem used  in  Diffie-Hellman 
key exchange, no formal proof of its difficulty exists. Each user calculates a key 
pair  consisting  of a  private  and  public  key.  The  public  key  is  placed  in  some 
trusted public directory and used to encrypt messages for that user. 
The RSA encryption and decryption functions  [12,  13]  are given by: 
f(x)  = xe 
-I 
d 
(y)  = y 
f 
...  (5.20) 
where both power functions are computed in Zm.  The numbers e and d are multi(cid:173)
plicative  inverses  of each  other  in  the  finite  field  Zq,(m)'  The  number  m  is  the 
product of two large distinct primes, p and q.  Euler's function for m = pq is given 
simply by (m)  = (p -I)(q -1). To encrypt, therefore, the data, x,  is  raised to the 
power of e modulo m to form  the ciphertext y.  Decryption takes y and raises it to 
the power of d modulo m. 
If Alice wishes to  send an  encrypted message to  Bob she  must first obtain m 
and e from  Bob,  or from  some  trusted directory.  The  pair of numbers  (m,e)  are 
Bob's public key.  As  we have seen,  to  decrypt Bob must take  Alice's ciphertext 
and raise it to the power of d modulo m.  The two numbers (m,d)  form  Bob's pri(cid:173)
vate key. 
In order to see  where the security comes from we recall that the  pair (e,d)  are 
multiplicative inverses of each other in the field Zq,(m)'  In order to generate a pri(cid:173)
vate key Bob takes his prime numbers p  and q and calculates the value of Euler's 
function (m).  He then randomly selects an e such that  I:(m),  and checks to 
see whether this is  a unit of Zq,(m)'  i.e.  he checks to see whether this element has 
an  inverse.  If so,  this  is  chosen as  e and (m,e)  becomes  the  public  key.  He  then 
80  CRYPTOGRAPHY 
calculates the corresponding inverse d and this, together with m,  becomes his pri(cid:173)
vate key.  The algorithms to check for an inverse element of a finite  field  and to 
calculate that  inverse are  very  quick.  In  order to  be  able  to  decrypt,  an  attacker 
needs  to have access  to d.  This is  easy to calculate if e and the  value of Euler's 
function  are known.  However, in order for an attacker to calculate Euler's func(cid:173)
tion  she  must know  the  individual primes p  and  q.  In  other words  she  must be 
able  to  divide m into  its  prime factors.  It can be  shown  that calculating Euler's 
function  cp(m) for m = pq is computationally equivalent to factoring m. 
In order to see that RSA correctly decrypts we must show that: 
inZm 
... (5.21) 
(x")d=X 
We shall show this only for the case where x is a unit of Zm.  It does not hap(cid:173)
pen with significant probability that x is not a unit of Zm.  This is because a neces(cid:173)
sary  and  sufficient  condition  for  x  to  be  a  unit  of Zm  is  that  gcd(m,x)  = 1. 
However, it can be shown that, even when x is not a unit, RSA correctly decrypts 
[13]. 
Suppose then that x is a unit of Zm. We know that e and d are inverses of each 
other in Zm so that we can write: 
e-d = 1  modcp(m) 
=>e-d = Qcp(m) + 1  modm 
The decryption function can now be written as: 
e-d 
x 
QC\I(m) + 1 
=  x 
= x_xQC\I(m) 
=  x- (x(m»)Q 
... (5.22) 
... (5.23) 
where  all  calculations  are  performed  mod  m.  We  now  make  use  of  Euler's 
theorem which states that if u is a unit of Zm then: 
u(m)  = 1  modm 
... (5.24) 
Using  this  in  equation  (5.23)  we  find  that  equation  (5.21)  is  valid  and  that 
RSA correctly decrypts when x is a unit of Zm' 
There are a number of things to note about RSA. The key size, effectively the 
size of the product, needs to be much larger than those of secret-key systems for 
equivalent security.  The current recommendations  are  that at least 512-bit keys 
are  used.  This  is  based  upon  the  estimated  difficulty  of factoring  a  512-bit 
number into its composite primes. All of the sieving algorithms for factoring pro(cid:173)
posed  so  far  have  running  times,  proven  or  conjectured,  which  vary  with  the 
input mas: 
Aexp(AJlnmlnOnm» 
... (5.25) 
PUBLIC-KEY CRYPTOGRAPHY  81 
where A  and  A are  constants.  Roughly  speaking  increasing  the  size  of m by  15 
decimal digits increases the factoring time by a factor of ten. 
It  is  important  to  note  that  while  being  able  to  factor  large  numbers  would 
certainly give the ability to break RSA,  it has not been proven that factoring is the 
fastest method of attack. In other words it is not known whether breaking RSA is 
equivalent to factoring. Indeed, as we have stressed, it is not proven that factoring 
is a 'hard' problem. We do not, therefore, have any mathematical guarantees that 
fast  factoring  algorithms  will not be  developed or that another way  of breaking 
RSA  will  not  be  found.  However,  both  the  general  area  of factoring  and  RSA 
itself have been the subjects of intense study and our conjectures about the diffi(cid:173)
culty of breaking RSA and factoring seem to  be borne out at  least by  the empiri(cid:173)
cal evidence to date. 
This difficulty of factoring also implies something about the ease with which 
prime numbers  can be found.  The  primes  Bob  generates must  be  kept  secret so 
that,  if a  deterministic  method  for  prime  generation  is  used,  knowledge  of this 
might allow  an  attacker to  quickly generate  Bob's primes  for  herself.  There  are 
basically  two  methods  open  to  Bob  to  generate  primes.  He  can  generate  a ran(cid:173)
domly  chosen  probable  prime  or  a  probably  random  prime.  The  first  method 
involves choosing a number at  random  and using tests for  primality  which give 
probabilistic answers. By repeating these tests sufficiently many times  he  can be 
reasonably confident that his number is prime. The other method of prime gener(cid:173)
ation  involves  generating  a number that is  definitely prime  but is  probably  ran(cid:173)
domly chosen. 
5.3.4 
The  use of public-key cryptography 
The  public-key  techniques  we  have  described  are  beautiful  applications  of 
number  theoretic  concepts  and  make  very  elegant  cipher  systems.  However, 
elegance, while satisfying, is hardly our primary concern in  designing or using  a 
cipher system.  One  of the  main  obstacles  to  the  use  of RSA  for  encryption,  for 
example,  is  its  speed.  In  general  secret-key  algorithms  perform  an  order  of 
magnitude  quicker  than  public-key  algorithms.  For  this  reason  secret-key 
systems  and public-key systems  are  often used  together in  hybrid  systems.  The 
most celebrated example  of this  is  PGP.  This  was  written  by  Phil  Zimmerman 
and he  combined RSA and  the  IDEA algorithm to  create  a strong cryptosystem 
[15].  Basically the public-key component of the algorithm is  used to  exchange a 
128-bit secret key for use in IDEA. The data is then encrypted using IDEA which 
is thought to be an extremely strong cipher [4].  PGP has become a common tool 
for  encryption  of  personal  e-mail  and  is  also  used  extensively  in  mix master 
anonymous  remailers.Itis  not  an  appropriate  tool  for  use  within  large 
organizations  in  its  current  form,  however,  because  it  relies  on  a  questionable 
system of key management. 
82  CRYPTOGRAPHY 
With slightly different key management systems PGP would be a very strong 
cipher appropriate  for  use  within  corporate  organizations.  We  shall  address  the 
question of key-management and public-key systems in the next section. 
5.4  DIGITAL SIGNATURES  AND TRUSTED  THIRD  PARTIES 
5.4.1 
Digital signatures 
The  practice  of cryptography  either for  confidentiality  or for  authenticity  is  about 
shared secrets. Two initially disjoint universes must be correlated in some way before 
secure communication can take place. In secret-key cryptography these universes 
are correlated by key distribution so that Alice and Bob possess the same  secret. 
Public-key  cryptography  was  designed  to  overcome  the  problem  of  key 
distribution.  However,  it  cannot  of  itself  provide  the  correlation  required  for 
these  universes  to  share  a  secret.  In  public-key  systems  this  problem  manifests 
itself in the authenticity of the key. If Alice is to use Bob's public key safely she 
must have confidence that it is indeed the public key (or one of the public keys) 
belonging to Bob. This entails both an identity check and an integrity check. We 
want  to  be  certain  both  that  the  key  is  Bob's  and  that  it  has  not  been  altered. 
Surprisingly,  public-key  cryptography  helps  us  to  find  a  solution  to  these 
problems in the form of digital signature techniques. 
A digital signature is the electronic equivalent of its handwritten counterpart. 
In a conventional signature we would attach a private 'secret', our signature, to a 
document.  More  specifically  we  implicitly  make  the  assumption  when  writing 
and accepting  signatures that a signature is  unique to the signer and no-one else 
knows  how  to  reproduce  it.  Digital  signatures  achieve  a  similar goal.  A  digital 
signature is  simply a piece of data attached to an  electronic document.  We shall 
examine exactly how  a digital  signature is constructed in  a moment.  In  general, 
digital  signatures  are  far  stronger than  handwritten  signatures  and possess addi(cid:173)
tional  useful  properties.  Given  the  obvious  inadequacies  of handwritten  signa(cid:173)
tures  it  is  surprising  that  digital  signatures  have  not  yet  enjoyed  a  more 
widespread use. 
There are several digital signature schemes based on public-key cryptography 
available  for  use.  We shall  look at just one  scheme  based on  RSA.  In  order  to 
sign some data using RSA Bob would encrypt a copy using his private key form(cid:173)
ing the signature, which we called ciphertext previously, as: 
S (x,  d) =xt 
modm 
...  (5.26) 
DIGITAL SIGNATURES AND TRUSTED THIRD PARTIES  83 
He  would  then  attach x to  S and  send the  resultant data to  Alice.  To check the 
signature  Alice  would  obtain  Bob's  public  key  and  raise  the  signature  to  the 
power of e modulo m so that: 
modm 
...  (5.27) 
If the two copies of the data Alice possesses are identical  she accepts this as 
a valid signature. 
There are several things to note about this signature: 
• 
• 
• 
• 
• 
• 
it is almost unforgeable -
have to be able to break RSA; 
to forge this kind of signature an  attacker would 
it is bound to both the identity of the signer and the data itself -
if Bob were 
to  sign  another  piece  of  data  the  signature  would  be  different  but  still 
provably Bob's; 
Bob cannot later deny his  signature without claiming that his  key has  been 
compromised  -
this  non-repudiation  is  an  important  feature  of a  digital 
signature; 
it cannot be copied and appended to another document; 
anyone with access to Bob's public key can verify the signature; 