# Module 2: Typical Goals of Malware and Their Implementations

## Overview
This module covers the typical goals of malware, focusing on persistence mechanisms. We will explore various legitimate and custom methods used by malware to ensure it starts after each reboot. The content is based on the following resource:
- [Malware Training Vol. 1 by hasherezade](https://github.com/hasherezade/malware_training_vol1)

## Persistence Basics

### What is Persistence?
- **Who?** Most malware requires persistence, with some exceptions like certain ransomware.
- **Why?** To start the application after each reboot.
- **How?** Using legitimate persistence methods or custom, creative methods.

### Legitimate Persistence Methods in Windows
Windows offers several legitimate ways for applications to achieve persistence. Here are some common methods:

#### Registry Keys
- **HKCU\Software\Microsoft\Windows\CurrentVersion\Run**
- **HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce**
- **HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run**

These keys are commonly used by both legitimate software and malware to ensure that an application runs at startup. For more information, see:
- [Microsoft Support: Run, RunOnce, RunServices, RunServicesOnce, and Startup](https://support.microsoft.com/pl-pl/help/179365/info-run,-runonce,-runservices,-runservicesonce-and-startup)

#### Startup Links
- **%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup**

#### Scheduled Tasks
- **Task Scheduler**: Malware can create scheduled tasks to run at specific times or events.

#### System Services
- **Administrator Rights Required**: Creating a service typically requires elevated privileges.
- **Creating a Service**:
  ```shell
  sc create <service_name> binPath= <path_to_executable> DisplayName= <display_name> start= auto
  ```
- **Related Registry Keys**:
  - **HKLM\SYSTEM\ControlSet001\services\**
  - **HKLM\SYSTEM\ControlSet002\services\**
  - **HKLM\SYSTEM\CurrentControlSet\services\**

For more details, see:
- [Regedit View](#)

### Tools for Detecting Persistence Artifacts
- **Autoruns**: A tool from SysInternals that displays auto-starting programs.
  - [SysInternals Autoruns](https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns)
- **RegShot**: A tool for monitoring changes in the Windows Registry.
  - [RegShot on SourceForge](https://sourceforge.net/projects/regshot)

## Hiding Persistence

### Techniques for Hiding Persistence
- **Abuse of Other Mechanisms**:
  - **AppInit_DLL**: Injects DLLs into every application that uses user32.dll.
  - **COM Hijacking**: Substitutes legitimate COM objects with malicious ones.
  - **Shims**: Uses Microsoft Application Compatibility Toolkit to inject patches.
  - **MS Application Verifier Provider (DoubleAgent)**: Abuses the Application Verifier to inject code.
  - **User-Triggered Persistence**: Hides in elements likely to be clicked by the user.

### Examples of Hidden Persistence

#### Last Minute Persistence
- **Dridex v. 3**:
  1. Inject and delete itself, leaving no malicious PE on the disk.
  2. Set callbacks on messages like `WM_QUERYENDSESSION` and `WM_ENDSESSION` to detect system shutdown.
  3. On detecting a shutdown event, write itself to the disk and the Run key for persistence.
  4. On system startup, delete the Run key and repeat the process.

  For more details, see:
  - [Analysis of Dridex AnD for IT](https://www.cyberbit.net/wp-content/uploads/2016/09/Analysis-of-Dridex-AnD-for-IT.pdf)

#### Make File Inaccessible
- **Special Folders**:
  - **Example: Diamond Fox**:
    - **Folder Name**: `lpt8.{20D04FE0-3AEA-1069-A2D8-08002B30309D}`
    - **Benefits**: Users cannot access the content, and the folder cannot be removed or renamed in a typical way.
    - **Restricted Names**: CON, PRN, NUL, LPT1, LPT2, etc.
    - **Special CLSIDs**: GodMode, Administrative Tools, All Tasks, History, etc.

  For more details, see:
  - [Diamond Fox Analysis](https://blog.malwarebytes.com/threat-analysis/2017/03/diamond-fox-p1)
  - [Windows XP Create Folder Any Name](http://windows.mercenie.com/windows-xp/create-folder-any-name)
  - [The Secret Behind the Windows 7 GodMode](http://www.thewindowsclub.com/the-secret-behind-the-windows-7-godmode)

- **Alternate Data Streams (ADS)**:
  - **Feature of NTFS File System**: Only the main stream of the file is listed/accessible in a typical way.
  - **Format**: `<file>:<stream>`
  - **Example**:
    ```shell
    type demo.dll > test.txt:demo
    regsvr32.exe /s test.txt:demo
    rundll32.exe test.txt:demo,Test1
    ```

  For more details, see:
  - [Introduction to ADS](https://hshrzd.wordpress.com/2016/03/19/introduction-to-ads-alternate-data-streams/)

- **Malformed Registry Keys**:
  - **Example: Kovter**:
    - **Key**: `\0c:\\users\\tester\\appdata\\local\\bcd7\\62d2.lnk`
    - **Result**: Regedit cannot display it, but Autoruns can still view it.

  For more details, see:
  - [Kovter Analysis](https://hshrzd.wordpress.com/2016/03/19/introduction-to-ads-alternate-data-streams/)

- **Hiding Behind Legitimate Applications**:
  - **Korplug (PlugX)**: Uses a vulnerable, digitally signed, legitimate application to exploit DLL side loading.
  - **Terdot Zbot (Zeus-based Banking Trojan)**: Uses PHP to deploy obfuscated scripts that decrypt and load the malware in memory.

  For more details, see:
  - [Korplug Analysis](https://blog.malwarebytes.com/threat-analysis/2016/08/unpacking-the-spyware-disguised-as-antivirus/)
  - [Terdot Zbot Analysis](https://blog.malwarebytes.com/cybercrime/2017/01/zbot-with-legitimate-applications-on-board/)

- **Fileless Malware**:
  - **Examples**: Phasebot, Poweliks, Gootkit, Kovter, PoshSpy (APT29) using WMI and PowerShell.
  - **Technique**: Stores the malicious code in the registry and loads it into memory.

  For more details, see:
  - [Kovter Analysis](https://blog.malwarebytes.com/threat-analysis/2016/07/untangling-kovter/)

### Abusing Legitimate Features

#### AppInit_DLLs
- **Definition**: Defines DLLs injected into every application that uses user32.dll.
- **Registry Keys**:
  - **32-bit OS + 32-bit DLL**: `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs`
  - **64-bit OS + 64-bit DLL**: `HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs`
  - **64-bit OS + 32-bit DLL**: `HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs`

  For more details, see:
  - [Working with the AppInit_DLLs Registry Value](https://support.microsoft.com/pl-pl/help/197571/working-with-the-appinit-dlls-registry-value)

#### Shim Databases
- **Microsoft Application Compatibility Toolkit**: Creates patches that can be used to inject malicious modules.
- **Installation**: Requires elevated privileges.
- **Example**: Ramnit malware deploying sdbinst.

  For more details, see:
  - [Fin7 Shim Databases Persistence](https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html)
  - [Persistence Demos on GitHub](https://github.com/hasherezade/persistence_demos/tree/master/shim_persist)

#### COM Hijacking
- **Component Object Model (COM)**: Enables interaction between software components through the operating system.
- **Keys**:
  - **32-bit OS + 32-bit DLL**: `HKCU\Software\Classes\CLSID\[hijacked CLSID]\InprocServer32`
  - **64-bit OS + 64-bit DLL**: `HKCU\Software\Classes\CLSID\[hijacked CLSID]\InprocServer32`
  - **64-bit OS + 32-bit DLL**: `HKCU\Software\Classes\Wow6432Node\CLSID\[hijacked CLSID]\InprocServer32`

  For more details, see:
  - [COM Object Hijacking](https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence)
  - [COM Hijack Demos on GitHub](https://github.com/hasherezade/persistence_demos/tree/master/com_hijack)

#### User-Triggered Persistence
- **Link Hijacking**:
  - **Example: Spora Ransomware**:
    1. Disable showing link indicators.
    2. Hide folders and substitute them with links.
    3. Clicking the link deploys the dropped malware.

  For more details, see:
  - [Spora Ransomware Analysis](https://blog.malwarebytes.com/threat-analysis/2017/03/spora-ransomware)

- **Handler Hijacking**:
  - **Applications Handling Particular Extensions**: Defined in the registry.
  - **Globally Defined Extensions and Handlers**: `HKEY_CLASSES_ROOT`
  - **Per User Definitions**: `HKEY_USERS -> _Classes`

  For more details, see:
  - [Extension Hijack Demos on GitHub](https://github.com/hasherezade/persistence_demos/tree/master/extension_hijack)
  - [Hijacking Extensions Handlers as a Malware Persistence Method](https://hshrzd.wordpress.com/2017/05/25/hijacking-extensions-handlers-as-a-malware-persistence-method/)

## Conclusions
- **Creativity of Malware Authors**: Malware authors are highly creative in finding new ways to hide persistence.
- **Detection**: Observing the installation process is the easiest way to detect persistence; post-infection analysis is much harder.
- **Fileless Malware**: Even "fileless" malware creates artifacts that can be detected through standard methods.