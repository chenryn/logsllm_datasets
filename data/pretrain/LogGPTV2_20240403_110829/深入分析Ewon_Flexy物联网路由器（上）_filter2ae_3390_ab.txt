现在让我们从硬件角度研究一下这款设备。
这是一款IoT设备，包含各种有用的功能，因此我觉得肯定存在各种各样的问题。
拆解Ewon Flexy设备，将主板剥离出来。这看上去是外围板/子板的一个单控制器，背面插着一个OS板。
主板上为子板预留了4个插槽，还有一个SD卡槽以及4个ETH口：
背面有个OS板槽以及若干个测垫（test pad）。
比较有意思的是OS板上的NAND Flash、OS板左上角的测垫（2×5的圆形焊点）以及主板背板上靠近盒式插槽的3个测垫（靠近TP12）。
## 0x08 硬件：JTAG
当看到2×5的圆形测垫时，我立刻想到了“JTAG”。实话实说，初始测试及开发主板时使用该工具也非常正常。大家可以看到左上角有个2-20插槽连接器，我猜测这个连接器可以用来快速连接到JTAG编程器，烧录设备。
我在每个测垫上焊接导线，启动[JTAGulator](http://www.grandideastudio.com/jtagulator/)。
这里别在意五颜六色的导线，这是我手头上仅有的材料。
事实证明这就是JTAGulator可用的引脚。
提取设备ID，结果如下所示：
    JTAG > d
    TDI not needed to retrieve Device ID.
    Enter TDO pin [1]:
    Enter TCK pin [4]:
    Enter TMS pin [2]:
    All other channels set to output HIGH.
    Device ID #1: 0000 0001001010000001 00000100001 1 (0x01281043)
    -> Manufacturer ID: 0x021
    -> Part Number: 0x1281
    -> Version: 0x0
Google搜索一番后，看起来这是一款莱迪思（Lattice）半导体设备，而不是ATMEL（参考[此处](http://bsdl.info/details.htm?sid=89730f33d939207188ca59b002289d77)详细信息）。
很快JTAG枚举及连接就被中断，我不清楚具体原因。
    > halt
    halt
    Halt timed out, wake up GDB. timed out while waiting for target halted
## 0x09 硬件：串口
接下来我开始分析看上去比较有趣的另一组测垫。看上去这3个测垫像是串口（Serial）或者SWD，因此我首先需要将Saleae Logic
Analyser连接到这3个引脚。
我们可以通过设备底部访问这3个引脚，切开外壳会更方便些。
将一些导线焊接到测垫上，连接到Saleae，观察是否能得到一些信息：
放大后的局部图像如下：
这应该是BootLoader！
现在我需要与设备交互。我拆开了USB转串口连接设备，引出导线，使用终端连接到该设备：
这是`Linux-3.2.11`，我们可以尝试停止启动进程，希望能拿到一个shell：
    MMC: mci: 0
    In: serial
    Out: serial
    Err: serial
    Net: macb0
    Hit any key to stop autoboot: 0
    Net: enable eth switch
    U-Boot> help
    U-boot console is locked
    U-Boot> ?
    U-boot console is locked
    U-Boot>
接下来怎么办？试一下运气好不好：
    U-Boot> unlock pw
    Var pw not def
    U-boot console is locked
看上去希望更大了一些，但这里困扰了我一段时间，回头我们再讨论这一点。
## 0x0A 硬件：导出NAND Flash
研究受阻后，我剥离出NAND
Flash，将其与DATAMAN读取器连接。几分钟后，我成功导出了Flash。为了确保数据准确，我执行了两次导出操作，两次导出结果都比较理想。
拿到NAND转储文件后，我们可以开始深入分析提取出的固件，了解文件结构（希望一切顺利）。
首先我下载如下工具，这是处理NAND转储文件的首选工具：
我在Google上搜了一下NAND
FLASH芯片组MT29F1G08ABADA。虽然该芯片能够处理1G存储空间，但我们手上的这一款并没有这么大容量，读取器拿到的NAND转储数据只有138.4MB。
这个操作比较繁琐，感谢PTP的Dave（@tautology0）指引我走向正确的方向。
接下来看Binwalk的处理结果：
文件中有许多有趣的点。首先来看一下UBI。我们使用DD从`dump.bin`文件中提取这部分数据：
非常好，来看一下实际内容：
内容也正确，继续研究：
现在我们已经成功提取出固件，看起来我们已经拿到根文件系统以及Ewon Application文件系统。
我准备先分析根文件系统，这样能更好理解Ewon系统的构建方式。
其实只有`init.d`中的一个文件比较有意思，这个文件的功能就是启动Ewon服务。没有其他用户、没有ssh私钥、没有密码哈希。
接着开始分析Ewon SquashFS。
SquashFS文件结构貌似非常贴合Ewon环境，挂载目录为`/opt/ewon`。
我提取出的大多数文件目录都为空，除了`bin/`及`patch/`目录，其中包含一些有价值的信息。`patch/`目录如下：
这些文件位于`patch/`目录中，是最近一次固件更新所使用的更新文件，还包含更新的一些二进制文件、程序库等。
其他大多数都价值不大，但可以看出设备更新中经常会添加一些linux-arm程序及程序库。
根据Andrew（[cybergibbons](https://twitter.com/cybergibbons)）给的提示，我扫描了文件结构，看是否存在可执行脚本（bash脚本）：
这两个文件是基本的bash脚本，只包含版本信息，现在并不是特别有价值。
继续查看`bin/`目录：
现在事情变得有趣起来。我们已经拿到二进制文件、一些配置脚本以及一些bash脚本，还有一些貌似是Java程序以及jar文件。我们首先来看一下配置文件，最后再分析Ewon二进制文件。
配置文件非常简单，只适配了几个不同的环境：[At91sam9g](https://www.microchip.com/design-centers/32-bit-mpus/microprocessors/sam9)、QEMU（可能是用来调试）以及RaspberryPi（调试及编译）。
这些配置文件非常相似，大多数值都相同，只有名称和os依赖项有点出入。
`all_config.conf`文件示例如下：
根据第二行，这是所有产品的共同组件（“Common part to all product”），也列出了Flexy和Cosy
Ewon产品，这是否意味着这两款是同一个产品？
这两个产品有很多相似性，也有一些比较大的差异。
根据网页描述：“（该设备）能通过互联网提供便捷的远程访问”，此外还用到了443端口（HTTPS）。那么为什么Cosy使用https，而Flexy没有呢？
我尝试运行Java程序，虽然运行错误，但也提供了其他一些文件的信息：
使用[JD-Gui](https://java-decompiler.github.io/)，我反编译JAR文件进行分析：
后面我们再来研究这个点，现在我们可以先来分析Ewon二进制文件。