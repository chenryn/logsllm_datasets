在WCTF中，sshlyuxa被评为了best challenge，这是一道很有的Java Pwn题，利用Java Attach进行RCE。
## 题目描述
这道题目给出了源码及docker环境。题目通过ssh的方式登录，然后可以选择创建/销毁一个App，创建完App后，在这个App中可做如下三个操作。
  * **Register **。应用程序请求输入public key并将其存储在当前的keys目录中，存储文件名为username.pub。
  * **Auth **。应用程序会产生一个随机值并要求用户用key加密以验证其身份，验证成功会创建一个socket文件，监听消息，socket文件存储在当前的socket目录中，文件名为username。
  * **msgto **。应用程序会显示接收方()的public key内容，接收加密的message并发送至相应的socket。
## 漏洞点分析
通过分析源码可以得知，无论是在生成public key或socket文件时，以及读取显示public key时都存在很明显的目录遍历漏洞。  
综上，可以做的操作有:
  1. 读取任意的.pub文件
  2. 写入任意的.pub文件(限制为512字节)
  3. 写入任意的socket文件
以上就是这道题目用到的所有的漏洞点，非常地显而易见。最关键的是将其和Java Attach机制联想起来，利用Java
Attach动态加载Agent的特性，来实现RCE。
## Java Attach机制分析
这道题的关键在于Java Attach机制。Java Attach机制通过启动目标JVM的Attach Listener线程，然后Attach
Listener线程监听命令来实现的。  
Attach Listener线程的启动方式有2种，一是目标JVM启动时通过jvm参数指定，二是依靠Signal
Dispatcher线程启动。这道题只能通过第二种方式，正常情况下是通过外部程序调用VirtualMachine.attach(pid)来实现attach上目标JVM。在无法调用attach()方法的情况下，分析attach()方法的源码，查看在整个attach过程中，到底做了哪些操作。
定位到attach()方法中的LinuxVirtualMachine构造函数。
    LinuxVirtualMachine(AttachProvider provider, String vmid)
            throws AttachNotSupportedException, IOException
        {
            ...
            path = findSocketFile(pid);
            if (path == null) {
                File f = createAttachFile(pid);
                try {
                    if (isLinuxThreads) {
                        int mpid;
                        try {
                            mpid = getLinuxThreadsManager(pid);
                        } catch (IOException x) {
                            throw new AttachNotSupportedException(x.getMessage());
                        }
                        assert(mpid >= 1);
                        sendQuitToChildrenOf(mpid);
                    } else {
                        sendQuitTo(pid);
                    }
                    ...
                    do {
                        ...
                        path = findSocketFile(pid);
                        i++;
                    } while (i >> 输入Jar包内容
然后向目标JVM发送动态加载Jar包的命令，由于向`/tmp/.java_pid46439`发送命令，需要使用msgto
。因此需要注册一个`../../../../../tmp/.java_pid46439`用户。  
在注册完后，即可向其发送消息，消息内容为十六进制编码的命令。
    1\x00load\x00instrument\x00false\x00/tmp/pld.pub=sh -c $@|sh . echo /readflag /FLAG>/tmp/flag.pub\x00
发送完之后，这条指令就会被执行，因此flag内容被存入了/tmp/flag.pub中，此时只需要向../../../../../tmp/flag发送消息，就会将/tmp/flag.pub内容十六进制编码后显示出来。最后获取到了flag。  
## 小结
这道题目提供了一个利用Java
Attach的攻击方式，是一个很好的思路，值得学习。在遇到Java的各种机制时，尤其涉及数据传输(反序列化)、执行Java代码等时，不妨详细了解整个机制的情况，思考恶意利用的条件和可能场景。
## 参考