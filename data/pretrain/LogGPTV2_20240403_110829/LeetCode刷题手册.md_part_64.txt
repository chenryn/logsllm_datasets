代码
解题思路
注
张 m*n 的乘法表，以及正整数k，你需要返回表中第k小的数字。
几乎每一个人都用乘法表。但是你能在乘法表中快速找到第k小的数字吗？给定高度 m、宽度n的一
题目大意
Note:
Example 2: 
·给出3 个数字，m，n，k。m 和n 分别代表乘法口诀表的行和列。要求在这个乘法口诀表中找第
●k的范围在[1,m*n] 之间。
●m 和n 的范围在[1,30000] 之间。
 2. The k will be in the range [1, m * n] 
1. The m and n will be in the range [1, 30000].
The 6-th smallest number is 6 (1, 2,2,3,4,6).
24
12
The Multiplication Table:
Input: m = 2， n = 3，k = 6 
The 5-th smallest number is 3 (1, 2,2, 3, 3).
36
Explanation:
Output:
24
12
The Multiplication Table:
Explanation:
Output:
Input: m = 3，n = 3，k = 5 
378 题一起练习。
计 mid 数字的个数。由于是在两数乘法构成的矩阵中计数，知道乘数，被乘数也就知道了，所
这一题是第 378 题变种题。利用二分搜索，在 [1,m*n］ 的区间内搜索第 K 小的数。每次二分统
k小的数字。
以计数只需要一层循环。整体代码和第 378 题完全一致，只是计数的部分不同罢了。可以对比第
9
3
9
3
---
## Page 655
Note:
Example 1: 
 character into anothercharacter in this word, the modified word is in the dictionary you just 
For the method buildpict, you'll be given a list of non-repetitive words to build a dictionary.
 676. Implement Magic Dictionary.
built.
For the method search, youll be given a word, and judge whether if you modify exactly one
Implement a magic directory with buildDict, and search methods.
题目
1. You may assume that allthe inputs are consist of lowercase letters a-z.
Input: search("leetcoded"), Output: False
Input: search("hell"), Output: False 
Input: search("hhllo"), Output: True 
Input: search("hello")， Output: False 
Input: buildDict(["hello", "leetcode"]), Output: Nul]
func counterKthNum(m, n, mid int) int {
func findkthNumber(m int, n int,k int) int {
import "math"
package leetcode
return count
for i := l; i = k { 
mid := low + (high-low)>>1 
high = mid 
low = mid + 1
else { 
---
## Page 656
代码
解题思路
母换成另一个字母，使得所形成的新单词存在于你构建的字典中。
单词来构建一个字典。对于 search 方法，你将被给定一个单词，并且判定能否只将这个单词中一个字
实现一个带有 buildDict,以及 search 方法的魔法字典。对于 buildDict 方法，你将被给定一串不重复的
题目大意
·这题的解题思路比较简单，用 Map 判断即可。
·实现 MagicDictionary 的数据结构，这个数据结构内会存储一个字符串数组，当执行 Search
 3. Please remember to REsET your class variables declared in class MagicDictionary, as 
 2. For contest purpose, the test data is rather small by now. You could think about highly
func (this *MagicDictionary) Search(word string) bool {
after modifying exactly one character */ 
/** Returns if there is any word in the trie that equals to the given word
func (this *MagicDictionary) BuildDict(dict []string） {
/** Build a dictionary through a list of words */ 
func Constructor676() MagicDictionary {
/** Initialize your data structure here. */
type MagicDictionary struct {
package leetcode
 return MagicDictionary{rdict: make(map[int]string)}
 rdict map[int]string 
MagicDictionary 中存储的字符串，如果可以，就输出 true，如果不能，就输出 false。
efficient algorithm after the contest.
for -, V := range this.rdict {
for k, v := range dict { 
操作的时候要求判断传进来的字符串能否只改变一个字符(不能增加字符也不能删除字符)就能变成
 details.
 static/class variables are persisted across multiple test cases. Please see here for more 
ｎ:=0
 this.rdict[k] =v 
if len(word) == len(v) {
for i := O; i  2
Explanation: The given directed graph will be like this:
Output: [4,1] 
Input: [[1,2]， [2,3]，[3,4]，[4,1]，[1,5]]
2-->3
Explanation: The given directed graph will be like this:
Output: [2,3] 
Input: [[1,2], [1,3], [2,3]] 
这一题的解法也是用并查集，不过需要灵活一点，不要用模板，因为在模板中，存在路径压缩和
二维数组中的每个整数在1到N 之间，其中 N是二维数组的大小。
二维数组大小的在 3 到1000 范围内。
input array.
rank（）优化，这些优化会改变有向边原始的方向。所以并查集只需要记录 parent(）就够用
4<-
3
---
## Page 663
代码
那么跳过新来的这条边candidate2，并记录下和这条边冲突的边candidatel
[]int{}
·再来看看情况1。如果一路合并到结束也没有发现出现入度为2的情况，那么说明遇到了情况1
·经过分析，可以得到上面这 3 种情况，红色的边是我们实际应该删除的。先来看情况2 和情况 3 
func findRedundantDirectedConnection(edges [][]int) []int {
package leetcode
parent,
if len(edges) == 0 { 
释
情况1会出现环的情况。题目中说如果要删除边，就删除最后出现的那条边。具体实现见代码注
明candidate2 是黑色的边，candidate1 才是红色的边，那么candidate1 是要删除的边。
candidate2就是红色的边，即找到了要删除的边了。如果合并到最后出现了环的问题了，那说
union（）。如果candidate2是红色的边，那么合并到最后，也不会出现任何异常，那么
candidate1 和candidate2。将后加入的 candidate2 这条边先放在一边，继续往下
。当不断 union（）时，加入一条边以后，会使一个节点的入度变成2，那么记录下这两条边为
}else{//如果一个节点已经有父亲节点了，说明入度已经有1了，再来一条边，入度为2
 return []int{}
 parent[edge[1]] = edge[0]
edge[1］=〇/／做标记，后面再扫到这条边以后可以直接跳过
candidate2 = append(candidate2, edge[1])
candidatel =
candidatel = append(candidatel, parent[edge[1]])
candidatel, candidate2 := make([]int,len(edges)+l)，[]int{},
= append(candidatel,
 edge[1]]
@
@halfrost
---
## Page 664
Example 2: 
Example 1:
 always have different values. 
Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will
题目
693. Binary Number with Alternating Bits
The binary representation of 5 is: 101
Explanation:
Output: True
Input: 5 
func findRoot(parent *[]int, k int) int {
这条边 
if （*parent)[k] != k { 
return (*parent)[k]
returncandidate2／／当最后什么都没有发生，则candidate2是答案
for i := l; i <= len(edges); i++ {
(*parent)[k] = findRoot(parent, (*parent)[k])
 parent[i] =i 
parent[v]=pu// 没有发现环，继续合并 
if edge[1]==0{// 跳过candidate2 这条边
iflen（candidate1）==〇{/／ 如果没有出现入度为2 的情况，那么对应情况1，就删除
nd
 continue
return candidatel//出现环并且有入度为2的情况，说明candidatel 是答案
:= findRoot(&parent, u)
v := edge[0]， edge[1]
return edge
---
## Page 665
代码
解题思路
给定一个正整数，
题目大意
 Example 4:
 Example 3: 
·判断一个数的二进制位相邻两个数是不相等的，即 0101 交叉间隔的，如果是，输出 true。这一
func hasAlternatingBits(n int) bool {
//解法一
package leetcode
The binary representation of 10 is: 1010.
Explanation:
Output: True
Input: 10 
The binary representation of 11 is: 1011.
Explanation:
Output: False
Input: 11 
The binary representation of 7 is: 111.
Explanation:
Output: False