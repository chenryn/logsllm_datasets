title:Uni-directional trusted path: Transaction confirmation on just one
device
author:Atanas Filyanov and
Jonathan M. McCune and
Ahmad-Reza Sadeghi and
Marcel Winandy
Uni-directional Trusted Path:
Transaction Conﬁrmation on Just One Device
Atanas Filyanov∗, Jonathan M. McCune†, Ahmad-Reza Sadeghi‡, Marcel Winandy∗
∗ Horst G¨ortz Institute for IT-Security, Ruhr-University Bochum, Germany
{atanas.ﬁlyanov, marcel.winandy}@rub.de
†CyLab, Carnegie Mellon University, USA
‡ Center for Advanced Security Research Darmstadt / Technical University Darmstadt, Germany
PI:EMAIL
PI:EMAIL
Abstract—Commodity computer systems today do not in-
clude a full trusted path capability. Consequently, malware can
control the user’s input and output in order to reveal sensitive
information to malicious parties or to generate manipulated
transaction requests to service providers. Recent hardware
offers compelling features for remote attestation and isolated
code execution, however, these mechanisms are not widely used
in deployed systems to date. We show how to leverage these
mechanisms to establish a “one-way” trusted path allowing
service providers to gain assurance that users’ transactions
were indeed submitted by a human operating the computer,
instead of by malware such as transaction generators. We
design, implement, and evaluate our solution, and argue that
it is practical and offers immediate value in e-commerce, as a
replacement for captchas, and in other Internet scenarios.
Keywords-security; transaction conﬁrmation; trusted path;
trusted computing;
I. INTRODUCTION
For decades a signiﬁcant challenge in computer security
has been realizing a mechanism for establishing a full
trusted path, i.e., a mechanism that (i) isolates the input
and output channels of different applications to preserve
the integrity and conﬁdentiality of data exchanged with the
user, (ii) provides a technical means that assures the user
of a computer system that she is truly interacting with the
intended software, and (iii) assures running applications that
user inputs truly originate from the actions of a human (as
opposed to being synthesized or injected by other software).
Software vulnerabilities in the increasingly complex soft-
ware stack on commodity computing devices offer a large
attack surface that attackers can exploit to inject malicious
Trojan horse software, such as keyloggers [1] or transaction
generators [2]. These software-based attacks can eavesdrop
on user input or modify transactions in a malicious way, e.g.,
waiting until the user has legitimately authenticated to the
web server, and then issuing illegitimate transactions using
this channel (e.g., by faking or scripting user input).
Some trusted path proposals suggest the use of an exter-
nal veriﬁer device. However, the increasing use of mobile
devices for sensitive online transactions and e-commerce
When implemented properly, the client-side user experi-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:44:30 UTC from IEEE Xplore.  Restrictions apply. 
applications make these solutions inconvenient, especially
given today’s trend in device convergence (e.g., smartphones
including cameras, web access, GPS, etc.). Using one’s
mobile phone to verify one’s laptop may be reasonable in
some scenarios, but there are no veriﬁers available if the
transaction itself is taking place on the mobile device while
on-the-go. Thus, the challenge remains to somehow provide
a trustworthy mechanism on just one device that can defend
against transaction generators and malicious scripting that
imitates actions intended to be performed only by humans.
An additional disincentive for existing solutions is that
end users are rarely exposed to the liability for fraud.
In the US and much of Europe, credit card companies,
banks, and online merchants absorb this liability. Thus, it
is these institutions that have the incentive to make online
transactions more resilient to attacks.
We design, implement, and evaluate a secure transaction
conﬁrmation architecture that can provide assurance to a
remote server that the user of a client system has indeed
conﬁrmed a proposed action. With this property, a service
provider can ensure that it only commits transactions on the
user’s behalf if the user has actually conﬁrmed the transac-
tion. We are able to realize such a system by providing the
properties of a trusted path in one direction only.
Restricting ourselves to a uni-directional
trusted path
enables us to realize a signiﬁcantly more practical implemen-
tation, remaining compatible with legacy operating systems
and applications. Our goal is to provide remotely-veriﬁable
evidence to service providers of events taking place on the
physical user-centric I/O devices. That is, we wish to prove to
a remote server that an actual user typed something or saw
something displayed on-screen. This makes it possible to
achieve trusted transaction conﬁrmation on just one device.
Online service providers using our system are able to detect
and reject transaction generators. In contrast to a full trusted
path, we do not provide local, user-veriﬁable evidence of the
genuineness of output, i.e., malicious code may still fake the
conﬁrmation process from the perspective of the user.
978-1-4244-9233-6/11/$26.00 ©2011 IEEE1ence need not deviate from what users expect today. This
same technology also enables a more usable captcha [3]
mechanism, since our framework enables client platforms
to generate evidence of events originating on user-controlled
peripherals. We consider application scenarios where human
users can perform actions (e.g., enroll for services or issue
transactions) on Internet services that require a veriﬁcation
of the user’s intent. E-commerce web sites, online banking,
e-government services, and even e-voting are all examples.
Based on a uni-directional trusted path, we architect a
trusted conﬁrmation and optionally authentication (§III-D)
agent that executes in CPU-provided isolation. The trusted
computing base (TCB) of the trusted agent is relatively small
compared to prior works (a few thousand lines of code), and
remains compatible with users’ existing operating system
and application environments. We evaluate the performance
and security of our implementation, and provide an esti-
mation of the efforts needed to port our solution to other
hardware architectures, such as smartphones.
II. PROBLEM DEFINITION
A. Background: Trusted Path
Several approaches for realizing a full trusted path have
been proposed over the years, though none enjoy widespread
adoption on commodity systems. We brieﬂy review some
representative designs, and their drawbacks.
One approach is to use a full trusted OS and window man-
ager, where a dedicated area of the screen is reserved for the
exclusive use of a trusted software component that shows the
identity and status of the current application [4]. While this
concept has been implemented in some research systems [5],
[6], the goal of widespread adoption has remained elusive.
A closely related variant leverages the notion of a secure
attention sequence, e.g., “Press Control-Alt-Delete to log
on.” The assumption here is that the OS kernel remains
uncompromised, and will always be the ﬁrst software layer
to process keyboard input. Thus, any spoofed login dialog
box will be immediately overwritten by the legitimate box.
However, users must be taught to always press the necessary
key sequence. Another approach for indicating a trusted state
of a computer system is based on its ability to display
a “secret picture” [7] (or any other human-recognizable
secret). The system is architected such that the image data
can only be decrypted if the system is running approved
software, and the user must diligently remember to look
for her designated image whenever she performs a security-
sensitive operation. A ﬁnal approach is to use some form
of dedicated additional hardware as an axiomatically trust-
worthy indicator, in the limit something as simple as a dual-
color LED [8]. This design is compelling as it still enables
full screen applications, which must otherwise be disallowed
given their ability to spoof other security indicators.
Unfortunately, none of these designs enjoy widespread de-
ployment for online transactions. While additional hardware
costs are sometimes a factor, we believe a signiﬁcant barrier
to adoption on commodity systems is a lack of interest
from users. Vendors and ﬁnancial institutions absorb the
majority of the risk in fraudulent online transactions today.
A conﬁrmation system can be constructed based on a uni-
directional trusted path that does not strictly require any
additional work from the user, beyond reading a transaction
summary before ﬁnalizing a transaction (an action that is
already a standard part of online purchases).
B. Adversary Model
The model we consider involves four parties: (1) the user,
(2) the user’s computing device, (3) the service provider,
and (4) an attacker. The attacker has complete control over
the network between the service provider and the user’s
device. Thus, the attacker may try to impersonate the service
provider to trick the user. Moreover, the attacker is able to
install malware on the user’s computing platform or modify
any existing software there. The goal of the attacker is to
issue transactions to the service provider illegitimately on
behalf of the user.
C. Assumptions
While the adversary has control over the user’s software
environment, we make the following exception. We assume
the device has some form of secure execution environment
that is protected against software-based attacks, and that the
hardware is correctly implemented and protects the integrity
of the secure environment. Note that AMD SVM [9] and
Intel TXT [10] are examples of widely deployed hardware
capabilities that can provide the necessary properties. More-
over, we assume that the attacker cannot gain physical access
to the user’s platform. We assume that the service provider
is honest, and that the service provider’s servers are secure.
We do not consider denial-of-service attacks.
D. Security Objectives
Our main security requirements are the following:
1) Mutual authenticity of the user and service provider:
The user must somehow authenticate herself to the service
provider, and the user’s device must somehow authenticate
the service provider on behalf of the user.
2) Integrity of the transaction: Authenticated users can
engage in transactions with the service provider. Transac-
tion requests must be integrity-protected both during ﬁnal
conﬁrmation on the user’s computing device and during
transmission to the service provider.
3) Intention of the human user: The service provider
must gain assurance that a requested transaction is indeed
submitted by a human user, and not by malware. For this, the
service provider must be able to reliably verify that a certain
action (e.g., receive keypress events from a keyboard) has
been performed in a secure execution environment.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:44:30 UTC from IEEE Xplore.  Restrictions apply. 
24) Binding between user and machine: The service
provider must be able to verify the binding between a
conﬁrmation and a particular transaction request from a
certain machine.
The last requirement prevents proxy attacks, where con-
ﬁrmations are re-directed to other machines to get other
users perform the required action. However, where privacy
is a concern, the real identity of the user’s hardware device
should be appropriately anonymized, e.g., via a trusted third
party or cryptographic protocols [11].
These requirements are typical for e-commerce scenarios.
We prioritize application scenarios’ integrity requirements
over their secrecy requirements (excluding authentication).
For example, in e-commerce or online banking applications,
a Trojan horse plug-in that resides in the web browser may
eavesdrop on account balances or what items have been
recently ordered. However, the malware is prevented from
generating or modifying transactions.
III. ARCHITECTURE AND DESIGN
In this section we describe the architecture and design of
our uni-directional trusted path (UTP) solution. Our primary
design goal is to provide an integrity-protected conﬁrmation
facility even when client users possess only a single device
without full trusted path capabilities.
A. High-Level Design of UTP
The main property of UTP is to enable a remote server
to gain a high level of assurance that a certain action
submitted by a client system was initiated at the behest
of its physically-present human user, and not by malware
such as a transaction generator. This means UTP realizes
properties (i) and (iii) of a trusted path (c.f. §I), but not
necessarily property (ii). Hence, users might not be able
to verify that they have been interacting with the intended
application or web site. The underlying motivation for such
an architecture is the simple fact that most users do not
actually pay attention to security indicators [12], [13], [14].
If anything goes wrong, e.g., malware tries to modify a
requested transaction or generate a new one, the remote
server in our design will notice this and discard such
malicious transactions. This is the essence of the value
provided by UTP. The trusted path goes (veriﬁably) from
the user to the server, and enables the server to signiﬁcantly
reduce its exposure to transaction generators and other large-
scale, automated malicious client-side behavior.
UTP must enable a remote server to gain assurance
that the client platform is running a software conﬁguration
that can take total control of the user-centric I/O devices,
including the keyboard, display, and optionally the mouse.
The client system must have the capability (via hardware
or software mechanisms) to construct a trustworthy channel
between these platform components, and to generate some
form of remotely-veriﬁable evidence that it is indeed in
control of these devices. We explicitly do not require local,
user-veriﬁable evidence of the presence of these channels,
as this implies the full trusted path capability.1
One viable approach for providing such a capability is
an isolated execution environment with remote attestation
capabilities, such as Flicker [15]. Flicker enables security-
sensitive code to execute in hardware-enforced isolation
from all other code and devices on the system, and to
generate attestations enabling remote veriﬁcation that the ex-
ecution environment is established as intended. The security-
sensitive code can be constructed to take control of the
user-centric I/O devices (i.e., keyboard and display), and
the remote veriﬁer can ascertain, given the code and as-
sumed correct hardware, that user-centric I/O is working as
intended.
Figure 1. General architecture of UTP.
Figure 1 shows the high-level design of UTP. When the
client requests an action from the server that requires a
conﬁrmation of the user’s intent, the server establishes the
uni-directional trusted path by sending a message to the
client (and a random nonce for the purpose of preventing
replay attacks). The (untrusted) client program invokes the
execution of the UTP code in the CPU’s secure execution
mode. This mode ensures that the UTP code executes iso-
lated from other software and successfully takes control of
the user-centric I/O devices. The UTP program displays the
message provided by the server (e.g., a transaction summary)
to the user. Once the user has viewed the message and
acted as required (e.g., conﬁrmed her intention to submit the
transaction), UTP assembles the necessary data to generate
an attestation that these events transpired while in the se-
cure execution mode. This information is cryptographically
signed by a keypair that is accessible only while the isolated
1Note that our UTP architecture can readily support the “secret picture”
form of full trusted path [7]. However, we are highly skeptical of users’
motivation to diligently remember to check for their picture, and to actually
stop their primary task if it is missing [12], [13], [14]. Our emphasis in this
paper is on the utility of a mechanism for which users need not dedicate
any additional time or attention, as compared to existing systems.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:44:30 UTC from IEEE Xplore.  Restrictions apply. 
ClientServerUTPCodeUTP3execution environment is active, in order to demonstrate its
authenticity and integrity. The data and its signature are then
sent to the server. The server can verify the signature with
the provided and (e.g., from a trusted third party) certiﬁed
public key of the client platform, and subsequently veriﬁes
the attestation information in order to get assurance about
the execution of UTP. Note that UTP is more than just
TCG-style attestation [16] (see also the Appendix): If the
veriﬁcation succeeds, the server knows that a uni-directional
trusted path to the human user has been established and that
the transaction can be processed.
Advantages: The realization of UTP as a small trusted
program using a secure execution mode of the CPU has
some advantages over solutions based on a secure OS: