ﬁrst place. It does affect the β reconstruction technique.
• Changing T into a cryptographically strong keyed-hash
function – while this change eliminates the original at-
tack, it is still possible to mount a weaker attack that
only tracks a device while its IPSRC does not change. In
fact, this applies to the entire abstract scheme proposed
in [7, Section 5.3]. See the extended paper for details.
• Changing the algorithm altogether (this is our recom-
mendation). A robust algorithm relies on industrial-
strength cryptography,
large enough key space, and
strong entropy source for the key, and uses them to gen-
erate IP IDs which (a) have guaranteed non-repetition
period; (b) are difﬁcult to predict; and (c) do not leak
useful data. The algorithm used in macOS/iOS [30] is a
good example. This eliminates the attack altogether.
5 Field Experiment – Attacking Windows
Machines in the Wild
We set up a fully operational system to test the IP ID behav-
ior in the wild, as well as to verify that the technique for ex-
tracting device IDs for Windows machine works as expected.
5.1 Setup
As explained in Appendix A.1.3, in order to avoid false posi-
tives (which almost always happen due to false keys that dif-
fer from the true key in a few most signiﬁcant bits), we need
to trim the most signiﬁcant bits from the key – i.e. use the
key’s tail. For the full production setup (30 IP addresses),
we calculated that a tail of 41 bits will sufﬁce. Due to lo-
gistic and budgetary constraints, in our experiment we used
only 15 IP addresses (rather than 30) for the key extraction
(and 2 more IPs for veriﬁcation), with J = 5,G = 5,Q = 1.
Thus we lowered the tail length to 40, and used the 40 bits
K23, . . . ,K62 as a device ID. That is, for this experiment, we
traded the device ID space size for a smaller probability of
false positives.
We then used WebSocket trafﬁc to the additional pair of
IP addresses (from a class B network that is different than
those in the initial set of 15 IPs) to verify the correctness of
the key bits extracted. In this experiment, since we do not
extract K17,...,22 we can only compute the least signiﬁcant 9
bits of the IPID, adapting eq. (5) into:
IPIDg,1 mod 29 = IPIDg,0 ± 1 + Sg,1 − Sg,0 mod 29
(We need to use ±1 since we cannot know the order of packet
generation. Thus given knowledge of IPIDg,0 we have two
candidates for IPIDg,1, out of a space of 29 = 512 values.)
A random choice of two values yields a success rate of 1/256.
We deem our algorithm to be valid if it consistently yields
the correct value (in one of the candidates) in all tests.
We asked “Friends and Family” to browse to the demo site
using Windows 8 or later, from various networks.
5.2 Results
Network distribution The experiment was conducted
from July 22nd, 2018 to October 20th, 2018. We collected
data on 75 different class B networks. The networks are well
dispersed across 18 countries and 4 continents. The networks
are also usage-diverse (home networks, SMB networks, cor-
porate networks, university networks, public hotspots and
cellular networks). We asked the users who connected to
our demo site to use multiple regular browsers and networks,
and connect at different times, and veriﬁed that the device ID
remained the same in all these connections.
Failures to extract a key – IP ID modiﬁcation In only 6
networks out of 75 (8%) we could not extract the key and
therefore concluded that the IP ID was not preserved by the
network. These six networks did not include any major ISP
and seem to be used by relatively few users: they included an
airport WiFi network, a government ofﬁce, and a Windows
machine connecting through one cellular hotspot (hotspots
that we tested in other cellular networks did not change the
IP ID). Of those six networks, in 3 networks we had clear
indication that a transparent proxy or a web security gate-
way was in path. In such cases, moving to WebSocket over
HTTPS, or to UDP would probably have addressed the issue.
Another case was a forward proxy (moving to UDP would
have possibly addressed it). In the two ﬁnal cases, the exact
USENIX Association
28th USENIX Security Symposium    1071
nature of interference was not identiﬁed. We can say then
that optimistically, only 2 networks out of 75 (2.7%) are in-
compatible with the tracking technique, maybe even less (as
it is still quite possible these two TCP gateways are actually
transparent proxies).
Positive results
In the remaining 69 networks, for 4 net-
works we did not keep trafﬁc for the additional two IPs, thus
we could not verify the key extraction. For the rest 65 net-
works, our algorithm extracted a single 40-bit key, and cor-
rectly predicted the least signiﬁcant 9 bits of the IPID of the
second IP in the last pair (i.e. the correct value was one of
the two candidates computed by the algorithm). This veriﬁes
the correctness of the algorithm and the key bits it extracts.
Lab veriﬁcation We tested a machine in the lab with
the above test setup to obtain 40 bits of K.
Then,
using WinDbg in local kernel mode, we obtained
tcpip!TcpToeplitzHashKey, extracted the 40 bits from
it and compared to the 40 bits calculated by the snippet – as
expected, they came out identical.
Actual run time We estimate the overall runtime for J =
6,G = 12 on a single Azure B1s machine to be 0.73 seconds.
Packet loss and false negatives We analyzed 79 valid tests
and found only 3 cases wherein the analysis logic failed to
provide a device ID (additional test from the same devices
succeeded in extracting a key).
In all such cases a man-
ual analysis indicates that this is due to packet loss. Ap-
pendix A.1.4 describes additional logic that can be used to
reduce false negatives to a negligible level.
6 Linux and Android
The scope of our research is Linux kernel 3.0 and above.
Also, we only investigated the x64 (typical desktop Linux)
and ARM64 (Android) CPU architectures, although almost
all of the analysis is not architecture-speciﬁc.
6.1 Attack Outline
In order to track a Linux/Android device, the tracker needs
to control several hundred IP addresses. The tracking snip-
pet forces the browser to rapidly emit UDP packets to each
such IP (using WebRTC and speciﬁcally the STUN proto-
col, which enables sending bursts of packets closely spaced
in time to controlled destination addresses). It also collects
the device’s source IP address (using WebRTC as well or a
different approach described in the extended paper.)
The tracker collects IP IDs from all IP addresses, and iden-
tiﬁes bucket collisions by looking for IP pairs whose IP IDs
are in close proximity. Recall that the choice of the bucket
is a function of the source and destination IP addresses, and
a device key. The tracker enumerates over the key space to
ﬁnd the (correct) key which generates collisions for the same
pairs for which collisions were observed. The key that is
found is the device ID.
IP ID Generation in Linux
6.2
The Linux kernel implementation of IP ID differs between
TCP and UDP [16]. The TCP implementation always used
a counter per TCP connection (initialized with a hash of the
connection endpoints and a secret key, combined with a high
resolution timer) and as such, is not interesting to us (col-
lisions are meaningless). The implementation of IP ID for
stateless over-IP protocols (e.g. UDP) has gone through an
interesting evolution process. We focus on short datagrams,
i.e. datagrams shorter than MTU (maximum transmission
unit), that do not undergo fragmentation. We designate the
IP ID generation algorithms as A0,A1,A2 and A3, in their or-
der of evolution.
A0: In early Linux kernels, the IP ID for short datagrams
was simply set to 0.
A1 and A2: In Linux kernel 3.16.0 (released August 2014),
IP ID for short datagrams became dynamic (just like it has al-
ways been for long UDP datagrams).11 This was back-ported
to various active Linux 3.x branches (see Table 2). The gen-
eration algorithm in general has an array of M = 2048 buck-
ets, each containing a value 0 ≤ β  0 – a PRNG (a 96/128 bit Tausworthe
Generator) which receives x as a parameter and pro-
vides a random integer in the range [0,x). (We deﬁne
RANDOM(0) = 0). Note that RANDOM(1) = 0.
The IP ID generation algorithm is deﬁned in Algorithm 2.
The procedure picks an index to a counter as a function of the
source and destination IP address, the protocol and the key.
It picks a random value which is smaller than or equal to the
time that passed (measured in ticks, with tick frequency of f
per second) since the last usage of this counter, increments
the counter by this value, and outputs the result.
A3: Starting with Linux 4.1, the net namespace of the
kernel context, net (a 64-bit pointer in kernel space) is in-
cluded in the hash calculation, conditional on a compilation
ﬂag CONFIG_NET_NS (which is on by default for Linux 4.1
11See function __ip_select_ident in https://elixir.bootlin.
com/linux/v3.16/source/net/ipv4/route.c.
1072    28th USENIX Security Symposium
USENIX Association
Algorithm 2 Linux IP ID Generation (A1/A2)
1: procedure GENERATE-IPID
2:
3:
4:
5:
6:
i ← h(IPDST ,IPSRC, protocol,key) mod M
hop ← 1 + RANDOM(tnow − τ[i])
β [i] ← (β [i] + hop) mod 216
τ[i] ← tnow
return β [i]
and later, and for Android kernel 4.4 and later). The modiﬁ-
cation is for step 2, which now reads:
i ← h(IPDST ,IPSRC, protocol ⊕ g(net),key) mod M
where g(x) is a right-shift (by ρ bits) and a truncation func-
tion that returns 32 bits from x. We designate this algorithm
as A3.
To summarize, there are four ﬂavors of IP ID generation
(for short stateless protocol datagrams) in Linux:
1. A0 - IP ID is always 0 (in ancient kernel versions)
2. A1 / A2 - Both versions use Algorithm 2, with the dif-
ferent implementations of h.
3. A3 - Algorithm 2, adding net namespace to the calcula-
tion.
Of interest to us are algorithms A1 to A3. We focus mostly
on UDP, as this is a stateless protocol which can be emitted
by browsers.
The resolution f of the timer t in the algorithm is deter-
mined by the kernel compile-time constant CONFIG_HZ. A
common value for older Android Linux kernels is 100(Hz).
Newer Android Linux kernels (4.4 and above) use 300 or
100 (or rarely, 250). The default for Linux is f = 250.12 In
general, for tracking purposes, a lower value of f is better.
Note that key and net are generated during the operating
system initialization, which, unlike Windows, happens dur-
ing restart and during (shutdown+)start.
6.3 Setting the Stage
Our technique for tracking Android (and Linux) devices uses
HTML5’s WebRTC[1] both to discover the internal IP ad-
dress of the device and to send multiple UDP packets.
It
works best when the WebRTC STUN [21] trafﬁc is bursty. In
order to analyze the effectiveness of the technique we inves-
tigated the following features, focusing on Android devices.
Android Versions and Linux Kernel Versions The An-
droid operating system is based on the Linux kernel. How-
ever, Android versions do not map 1:1 to Linux kernel ver-
sions. The same Android version may be built with different
Linux kernel versions by different vendors, and sometimes
12https://elixir.bootlin.com/linux/v4.19/source/kernel/
Kconfig.hz
by the same vendor. Moreover, when an Android device up-
dates its Android operating system, typically its Linux kernel
remains on the same branch (e.g. 3.18.x). Android vendors
also typically use somewhat old Linux kernels. Therefore,
many Android devices in the wild still have Linux 3.x ker-
nels, i.e. use algorithm A1 or A2.
Sending Short UDP Datagrams to Arbitrary Destina-
tions, or “Set Your Browsers to STUN” The technique
requires sending UDP datagrams from the browser to mul-
tiple destinations. The content of the datagrams is immate-
rial, as the tracker is interested only in the IP ID ﬁeld. We
use WebRTC (speciﬁcally – STUN) to send short UDP data-
grams (with no control over their content) to arbitrary hosts.
The RTCPeerConnection interface can be used to instruct
the browser’s WebRTC engine to use a list of presumably
STUN servers, and even allows setting the UDP destination
port per each host. The browser then sends STUN “Binding
Request” (UDP short datagram) to the destination host and
port.
create
then
servers
to multiple
To send STUN requests
strings
the
A}, ...)
(in
in the
an array A of
Javascript),
form stun:host:port,
constructor
invoke
in
RTCPeerConnection({iceServers:
a regular WebRTC ﬂow e.g. [13] (applying the ﬁx from [8]).
Another option (speciﬁc to Google Chrome) is to send
requests over gQUIC (Google QUIC) protocol, which uses
UDP as its transport. This is less ideal since the trafﬁc is less
bursty, its transmission order isn’t deterministic, and there is
an overhead in HTTPS requests and in gQUIC packets.
Browser Distribution in Android We want to estimate
the browser market share of “supportive” browsers (Chrome-
like and Firefox) in the Android OS. Based on April
2018 ﬁgures for operating systems,13 combined with mo-
bile browsers distribution in April 2018,14 we conclude that
the Chrome-like browsers (Google Chrome, Opera Mini,
Baidu, Opera) comprise 90% of the browser usage in An-
droid. Adding Firefox (even though its STUN trafﬁc is less
bursty, Firefox can still be tracked at least for f = 100) gets
this ﬁgure up to 92%.
Chrome’s STUN Trafﬁc Shape Chrome sends the STUN
requests to the list of supposedly STUN servers, in bursts. A
single burst may contain the full list of the requested STUN
servers (in ascending order of destination IP address), or a