User: Spinning off from another thread, when is it appropriate to use os.system() to issue commands like rm -rf, cd, make, xterm, ls ?
Considering there are analog versions of the above commands (except make and xterm), I'm assuming it's safer to use these built-in python commands instead of using os.system()
Any thoughts? I'd love to hear them.
Assistant: One of the problems with system() is that it implies knowledge of the shell's syntax and language for parsing and executing your command line.  This creates potential for a bug where you didn't validate input properly, and the shell might interpet something like variable substitution or determining where an argument begins or ends in a way you don't expect.  Also, another OS's shell might have divergent syntax from your own, including very subtle divergence that you won't notice right away.  For reasons like these I prefer to use execve() instead of system() -- you can pass argv tokens directly and not have to worry about something in the middle (mis-)parsing your input.
Another problem with system() (this also applies to using execve()) is that when you code that, you are saying, "look for this program, and pass it these args".  This makes a couple of assumptions which may lead to bugs.  First is that the program exists and can be found in $PATH.  Maybe on some system it won't.  Second, maybe on some system, or even a future version of your own OS, it will support a different set of options.  In this sense, I would avoid doing this unless you are absolutely certain the system you will run on will have the program.  (Like maybe you put the callee program on the system to begin with, or the way you invoke it is mandated by something like POSIX.)
Lastly...  There's also a performance hit associated with looking for the right program, creating a new process, loading the program, etc.  If you are doing something simple like a mv, it's much more efficient to use the system call directly.
These are just a few of the reasons to avoid system().  Surely there are more.