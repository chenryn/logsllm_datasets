### Title: Tackling Privilege Escalation in JavaScript APIs: A Dual Approach of Offense and Defense

Over the past few years, security researchers have meticulously examined various JavaScript APIs for classic memory corruption vulnerabilities, such as buffer overflows, use-after-frees, and type confusions. However, a distinct class of vulnerabilities has emerged that requires manual auditing rather than automated fuzzing. These vulnerabilities, first identified in 2015, allow attackers to bypass built-in security restrictions within the JavaScript engine. By chaining these privilege escalations with undocumented features in Adobe Reader, researchers were able to achieve reliable arbitrary code execution.

Each time a bypass was patched, new and innovative methods were discovered to circumvent the restrictions. This led to the exploitation of less-audited, security-relevant JavaScript APIs, which opened the door to numerous memory corruption issues. Even with sandbox protection, an untrusted document executing JavaScript code in a privileged context can provide avenues for abuse.

To address this class of vulnerabilities, both offensive and defensive efforts were initiated. This presentation will focus on the collaborative efforts to combat these vulnerabilities, leveraging the expertise of researchers and engineers to implement effective mitigations.

**Offensive Efforts:**
- Researchers conducted in-depth analyses to identify how JavaScript APIs could be abused to escalate execution from an unprivileged to a privileged context.
- The Zero Day Initiative program played a crucial role in uncovering and verifying these vulnerabilities, leading to significant discoveries that informed the hardening of applications.

**Defensive Efforts:**
- Engineers used instances of privilege escalation to develop methods that interpret each escalation in the context of general security invariant violations.
- These security invariants are described and understood through a formal framework of information flow security properties, enabling the design of robust mitigations.

Through this multi-pronged approach, a large set of vulnerabilities inherent in the security model of JavaScript engines has been eliminated over the years. This presentation will delve into the key findings and strategies that have been instrumental in this ongoing effort to secure JavaScript environments.