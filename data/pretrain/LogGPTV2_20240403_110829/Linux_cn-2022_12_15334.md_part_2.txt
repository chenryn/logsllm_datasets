> 
> 最初是 1996 年，SixDegrees 开始运营；接着是去年，出现了 Friendster；上周是 Orkut；下周 Flickr 也会登上舞台。这些网站不胜枚举，都是为了建立社交网络。如今，它们处在互联网发展的最前沿。但是，如果它们无法提供更实质性的好处，在 FOAF 标准得到广泛应用之后，它们就会很难存活下去。   [2] 
> 
> 
> 
文章继续指出，社交网络面临的最大问题就是社交网站数量过多。这就需要一种能够将所有这些网站连接起来的手段。可行方案就是 FOAF ，它终将变革整个社交网络。
根据该文章，FOAF 可将不同的社交网站紧密连接起来，实现途径有三个要点：
* FOAF 将创建机器可读的社交数据格式，可为各个社交网站识别读取，避免让用户在不同的网站上重复输入信息。
* FOAF 标准下， 联系人   Contacts （个人信息管理程序）可生成上述格式的文件，供用户在各社交网站使用。
* FOAF 标准下，这种机器可读的文件可寄放在个人主页上，可为各社交网站读取。这样一来，用户只需将修改过的信息推到自己的主页，其他平台就会同步更新。
在今天可能难以想象，但在 2004 年，至少在熟悉技术的网民和技术专栏记者看来，当时社交网络并不算少，但是每个网络的用户群体都很小。考虑到这个问题，虽然对现在的我们来说很陌生，我们就会明白为什么需要建立单一标准是有意义的，这个标准可以使网络的激增不再是一个负担。
### FOAF 规范
根据 FOAF 项目官网现有的介绍，FOAF 是“一种计算机语言，用于生成与人相关的各种条目的字典，条目以结构化数据的形式储存”。2000 年，FOAF 的创始人 Dan Brickley 和 Libby Miller 发表了一份关于该项目目标的文件，给出了不同的解释，强调了 FOAF 的最终目标：作为工具，FOAF 可让计算机像人类一样读取用户主页的个人信息    [3] 。FOAF 将会“帮助网络提供当前只有中心化平台才能提供的服务”   [4] 。通过为个人以及人际关系定义一个标准词汇，FOAF 可以理解用户输入的内容，比如“找找今天推荐的医院医疗人员”，或者“找找曾与我合作撰写过文件的人最近发表的文章”。
由于 FOAF 是标准化的词汇表，所以该项目最重要的成果莫过于 FOAF 规范。FOAF 规范规定了 RDF 类 和 RDF 属性（这里我不再解释什么是 RDF，如果感兴趣可查阅 [我关于语义网的文章](https://twobithistory.org/2018/05/27/semantic-web.html)）。RDF 的类由 FOAF 规范规定，表示要描述的对象，比如人（`Person` 类）和组织（`Organization` 类）。RDF 属性由 FOAF 规范规定，表示针对不同对象所做的逻辑声明。例如，一个人可以有一个名字（`givenName` 属性）、一个姓氏（`familyName` 属性），可能还有人格类型（`myersBriggs` 属性）以及与他人的距离或者位置信息（`based_near` 属性）。FOAF 规范的思想是，这些类和属性要足以表示人们在个人主页上显示的身份信息和朋友信息。（LCTT 译注：Myers–Briggs 即迈尔斯布里格斯类型指标，是一种人格类型理论模型。）
FOAF 规范给出了一份 FOAF 文档的范例。该实例的格式是 XML，不过也可以使用 JSON 等格式进行编写：
```
  Dan Brickley
```
这份 FOAF 文件对一个人进行了描述，他的名字叫做 Dan Brickley（该规范的作者之一），他的主页在 `http://danbri.org`，他还有个叫做“open ID”的东西，还有一张图片在 `/images/me.jpg` —— 估计是 Brickley 的主页地址的相对链接。FOAF 的元素名称都会有 `foaf:` 前缀，表示它们是 FOAF 命名空间的一部分。相应地，RDF 的元素名称前面也都会有 `rdf:`。
为了说明 FOAF 不限于 XML 格式，这里从维基百科摘取了一个相似的例子，格式为 JSON-LD    [5] ：
```
{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "homepage": {
      "@id": "http://xmlns.com/foaf/0.1/workplaceHomepage",
      "@type": "@id"
    },
    "Person": "http://xmlns.com/foaf/0.1/Person"
  },
  "@id": "https://me.example.com",
  "@type": "Person",
  "name": "John Smith",
  "homepage": "https://www.example.com/"
}
```
上面这份 FOAF 文件也描述了一个人，他的名字叫 John Smith，他的主页在 `www.example.com`。
理解 FOAF 原理的最好方法可能就是体验一下 [FOAF-a-matic](http://www.ldodds.com/foaf/foaf-a-matic)，一个在线生成 FOAF 文档的工具。你可以在工具页面的表单里输入自己的相关信息，创建表示自己的 FOAF 文档（XML 格式）。FOAF-a-matic 说明了 FOAF 是如何避免在注册不同社交网站账号时重复输入社交信息的麻烦：如果每个社交网站都可以读取 FOAF，你只需要在没有注册过帐号的网站上引用你在 FOAF-a-matic 生成的 FOAF 文档，就可以注册一个新帐号了。
下面这个实例是我用 FOAF-a-matic 生成的稍微复杂一些的例子，表示我自己：
```
    Sinclair Target