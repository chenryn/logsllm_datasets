`Role`和`ClusterRole`资源指定一组权限，但不将这些权限分配给任何特定用户。使用`resources`和`verbs`指定权限。这是一个 YAML 文件样本，指定了一个`Role`。不要太担心 YAML 文件的前几行，我们很快就会看到。关注`resources`和`verbs`行，了解如何将操作应用于资源:
只读角色. yaml
```
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: read-only-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
```
`Role`和`ClusterRole`之间唯一的区别是,`Role`被限制在一个特定的命名空间(在本例中是默认的命名空间),而`ClusterRole`可以影响对集群中该类型的所有资源以及集群范围的资源(如节点)的访问。
`RoleBinding`和`ClusterRoleBinding`是将`Role`或`ClusterRole`与用户或用户列表相关联的资源。以下文件代表一个`RoleBinding`资源，用于将我们的`read-only-role`与一个用户`readonlyuser`连接起来:
只读-rb.yaml
```
apiVersion: rbac.authorization.k8s.io/v1namespace.
kind: RoleBinding
metadata:
  name: read-only
  namespace: default
subjects:
- kind: User
  name: readonlyuser
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: read-only-role
  apiGroup: rbac.authorization.k8s.io
```
`subjects`键包含与角色相关联的所有实体的列表；在这种情况下，用户`alex`。`roleRef`包含要关联的角色的名称和类型(或者`Role`或者`ClusterRole`)。
## ABAC
**ABAC** 代表**基于属性的访问控制**。ABAC 使用*策略*而不是角色工作。 API 服务器以 ABAC 模式启动，其中有一个名为授权策略文件的文件，该文件包含一个名为策略对象的 JSON 对象列表。要启用 ABAC 模式，可以使用`--authorization-mode=ABAC`和`--authorization-policy-file=filename`参数启动应用编程接口服务器。
在策略文件中，每个策略对象包含关于单个策略的信息:首先，它对应于哪些主题，哪些可以是用户或组，其次，哪些资源可以通过策略访问。此外，可以包括布尔`readonly`值，以将策略限制为`list`、`get`和`watch`操作。
次要类型的策略不与资源相关联，而是与非资源请求类型相关联，例如对`/version`端点的调用。
当在 ABAC 模式下向应用编程接口发出请求时，应用编程接口服务器将根据策略文件中的列表检查用户及其所属的任何组，并查看是否有任何策略与用户试图访问的资源或端点匹配。匹配时，应用编程接口服务器将授权该请求。
您现在应该很好地理解了 Kubernetes API 是如何处理身份验证和授权的。好消息是，虽然您可以直接访问该 API，但是 Kubernetes 提供了一个优秀的命令行工具来简单地验证和发出 Kubernetes API 请求。
# 使用库贝斯克和 YAML
kubectl 是官方支持的访问 Kubernetes API 的命令行工具。它可以安装在 Linux、macOS 或 Windows 上。
## 设置 kubectl 和 kubeconfig
要安装 kubectl 最新的版本，可以使用[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)的安装说明。
一旦安装了 kubectl ，就需要对其进行设置，以便向一个或多个集群进行身份验证。这是使用`kubeconfig`文件完成的，如下所示:
示例-kube nfig
```
apiVersion: v1
kind: Config
preferences: {}
clusters:
- cluster:
    certificate-authority: fake-ca-file
    server: https://1.2.3.4
  name: development
users:
- name: alex
  user:
    password: mypass
    username: alex
contexts:
- context:
    cluster: development
    namespace: frontend
    user: developer
  name: development
```
该文件是在 YAML 编写的，与我们将很快进入的其他 Kubernetes 资源规范非常相似——除了该文件只存在于您的本地机器上。
YAML 文件有三个部分:`clusters`、`users`和`contexts`:
*   `clusters`部分是一个集群列表，您可以通过 kubectl 访问，包括 CA 文件名和服务器应用编程接口端点。
*   `users`部分列出了您可以授权的用户，包括任何用户证书或用于身份验证的用户名/密码组合。
*   最后， `contexts`部分列出了一个集群、一个名称空间和一个用户的组合，这些组合构成了一个上下文。使用`kubectl config use-context`命令，您可以在上下文之间轻松切换，这允许在集群、用户和名称空间组合之间轻松切换。
## 命令式命令与声明式命令
与 Kubernetes API 对话有两种模式:命令式和声明式。命令式命令允许您向 Kubernetes 指示“要做什么”——即“旋转两个 Ubuntu 副本”、“将此应用扩展到五个副本”等等。
另一方面，声明性命令允许您编写一个文件，其中包含应该在集群上运行的内容的规范，并让 Kubernetes API 确保配置与集群配置相匹配，必要时进行更新。
虽然命令式命令允许您快速开始使用 Kubernetes，但是在运行生产工作负载或任何复杂的工作负载时，编写一些 YAML 并使用声明性配置要好得多。这样做的原因是，可以更容易地跟踪变化，例如通过 GitHub 回购，或者将 Git 驱动的**连续集成/连续**交付 ( **CI/CD** )引入集群。
一些基本的 kubectl 命令
kubectl 提供了许多方便的命令来检查集群的当前状态、查询资源和创建新的资源。kubectl 是结构化的，因此大多数命令可以以相同的方式访问资源。
首先，让我们了解如何在集群中查看 Kubernetes 资源。您可以通过使用`kubectl get resource_type`来做到这一点，其中`resource_type`是 Kubernetes 资源的全名，或者是一个更短的别名。别名(和`kubectl`命令)的完整列表可以在位于[https://kubernetes.io/docs/reference/kubectl/overview](https://kubernetes.io/docs/reference/kubectl/overview)的库贝斯克文档中找到。
我们已经知道节点，所以让我们从这开始。要找出集群中存在哪些节点，我们可以使用`kubectl get nodes`或别名`kubectl get no`。
kubectl 的`get`命令返回当前在集群中的 Kubernetes 资源列表。我们可以用任何 Kubernetes 资源类型运行这个命令。要向列表中添加附加信息，您可以添加`wide`输出标志:`kubectl get nodes -o wide`。
列出资源当然是不够的——我们需要能够看到特定资源的细节。为此，我们使用`describe`命令，其工作方式类似于`get`，只是我们可以选择性地传递特定资源的名称。如果省略最后一个参数，Kubernetes 将返回该类型所有资源的详细信息，这可能会导致您的终端出现大量滚动。
例如，`kubectl describe nodes`将返回集群中所有节点的详细信息，而`kubectl describe nodes node1`将返回名为`node1`的节点的描述。
您可能已经注意到，这些命令都是命令式的，这很有意义，因为我们只是获取关于现有资源的信息，而不是创建新的资源。要创建 Kubernetes 资源，我们可以使用以下内容:
*   `kubectl create -f /path/to/file.yaml`，这是一个命令
*   `kubectl apply -f /path/to/file.yaml`，是陈述性的
这两个命令都有一个文件路径，可以是 YAML 或 JSON，也可以使用`stdin`。您也可以传入一个文件夹的路径，而不是一个文件，这将创建或应用该文件夹中的所有 YAML 或 JSON 文件。`create`强制工作，因此它将创建一个新的资源，但是如果您用相同的文件再次运行它，该命令将失败，因为该资源已经存在。`apply`以声明的方式工作，所以如果你第一次运行它，它会创建资源，随后的运行会用任何变化更新 Kubernetes 中正在运行的资源。您可以使用`--dry-run`标志查看`create`或`apply`命令的输出(即，将创建哪些资源，或者是否存在任何错误)。
要强制更新现有资源，请使用类似这样的`edit`命令:`kubectl edit resource_type resource_name`–就像我们的`describe`命令一样。这将使用现有资源的 YAML 打开默认的终端编辑器，无论您是强制创建还是声明性创建。您可以像往常一样编辑并保存它，这将在 Kubernetes 中触发资源的自动更新。
要以声明方式更新现有的资源，您可以首先编辑用于创建资源的本地 YAML 资源文件，然后运行`kubectl apply -f /path/to/file.yaml`。删除资源最好通过命令`kubectl delete resource_type resource_name`来完成。
我们将在本节中讨论的最后一个命令是`kubectl cluster-info`，它将显示运行主要 Kubernetes 集群服务的 IP 地址。
## 正在编写 Kubernetes 资源 YAML 文件
为了以声明方式与 Kubernetes 应用编程接口进行通信，允许使用 YAML 和 JSON 两种格式。为了这本书的目的，我们将坚持 YAML，因为它更干净一点，并且在页面上占用更少的空间。典型的 Kubernetes 资源 YAML 文件如下所示:
resource.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: ubuntu
    image: ubuntu:trusty
    command: ["echo"]
    args: ["Hello Readers"]
```
一个有效的 Kubernetes YAML 文件至少有四个顶级密钥。分别是`apiVersion`、`kind`、`metadata`和`spec`。
`apiVersion`指示将使用哪个版本的 Kubernetes API 来创建资源。`kind`指定 YAML 文件引用的资源类型。`metadata`提供了一个为资源命名的位置，以及添加注释和名称间距信息(稍后将详细介绍)。最后，`spec`键将包含 Kubernetes 在集群中创建资源所需的所有特定于资源的信息。
不要担心`kind`和`spec`了——我们将了解`Pod`在 [*第 3 章*](03.html#_idTextAnchor091)*中是如何在 Kubernetes* 上运行应用容器的。
# 总结
在本章中，我们学习了容器编排背后的背景、Kubernetes 集群的架构概述、集群如何验证和授权 API 调用，以及如何使用 Kubernetes 官方支持的命令行工具 Kubernetes 通过命令式和声明式模式与 API 通信。
在下一章中，我们将学习开始使用测试集群的几种方法，并掌握利用到目前为止所学的 kubectl 命令。
# 问题
1.  什么是容器编排？
2.  Kubernetes 控制飞机的组成部分是什么，它们是做什么的？
3.  如何在 ABAC 授权模式下启动 Kubernetes API 服务器？
4.  为什么生产 Kubernetes 集群有多个主节点很重要？
5.  `kubectl apply`和`kubectl create`有什么区别？
6.  如何使用`kubectl`在上下文之间切换？
7.  声明性地创建一个 Kubernetes 资源，然后强制性地编辑它有什么缺点？
# 进一步阅读
*   Kubernetes 官方文件:[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)
*   *硬道*:[https://github . com/keleyhightower/kubrites—硬道](https://github.com/kelseyhightower/kubernetes-the-hard-way)