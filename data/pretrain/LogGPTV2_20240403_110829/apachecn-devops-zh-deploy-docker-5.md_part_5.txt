这一部分不像我放在其他地方那样放在一个小的信息框中，因为这是一个足够大的问题，也足够有问题，值得拥有自己的部分。要了解容器**用户标识** ( **UID** )和**组标识** ( **GID** )会发生什么，我们需要了解主机的系统权限是如何工作的。当您有一个具有组和用户权限的文件时，它们实际上都在内部映射到数字，而不是作为用户名或组名保存，当您使用常规`ls`开关列出内容时会看到这些用户名或组名:
```
$ # Create a folder and a file that we will mount in the container
$ mkdir /tmp/foo
$ cd /tmp/foo
$ touch foofile
$ # Let's see what we have. Take note of owner and group of the file and directory
$ ls -la
total 0
drwxrwxr-x  2 user user   60 Sep  8 20:20 .
drwxrwxrwt 56 root root 1200 Sep  8 20:20 ..
-rw-rw-r--  1 user user    0 Sep  8 20:20 foofile
$ # See what our current UID and GID are
$ id
uid=1001(user) gid=1001(user) 
$ # How about we see the actual values that the underlying system uses
$  ls -na
total 0
drwxrwxr-x  2 1001 1001   60 Sep  8 20:20 .
drwxrwxrwt 56    0    0 1200 Sep  8 20:20 ..
-rw-rw-r--  1 1001 1001    0 Sep  8 20:20 foofile
```
当您执行`ls`时，系统读入`/etc/passwd`和`/etc/group`来显示权限的实际用户名和组名，这是 UID/GID 映射到权限的唯一方式，但基础值是 UID 和 GID。
正如您可能已经猜到的，这种用户到 UID 和组到 GID 的映射可能(并且通常不会)很好地转换为容器化系统，因为容器将不会有相同的`/etc/passwd`和`/etc/group`文件，但是外部卷上的文件权限与数据一起存储。例如，如果容器有一个 GID 为`1001`的组，它将匹配我们的`foofile`上的组权限位`-rw`，如果它有一个 UID 为`1001`的用户，它将匹配我们的`-rw`文件上的用户权限。相反，如果您的 uid 和 GID 不匹配，即使您在容器和主机上有一个同名的组或用户，您也没有正确的 uid 和 GID 来进行适当的权限处理。是时候看看我们能把这弄得一团糟了:
```
$ ls -la
total 0
drwxrwxr-x  2 user user   60 Sep  8 21:16 .
drwxrwxrwt 57 root root 1220 Sep  8 21:16 ..
-rw-rw-r--  1 user user    0 Sep  8 21:16 foofile 
$ ls -na
total 0
drwxrwxr-x  2 1001 1001   60 Sep  8 21:16 .
drwxrwxrwt 57    0    0 1220 Sep  8 21:16 ..
-rw-rw-r--  1 1001 1001    0 Sep  8 21:16 foofile
$ # Start a container with this volume mounted
$ # Note: We have to use the -v form since at the time of writing this
$ #       you can't mount a bind mount with absolute path :(
$ docker run --rm \
             -it \
             -v $(pwd)/foofile:/tmp/foofile \
             ubuntu:latest /bin/bash
root@d7776ec7b655:/# # What does the container sees as owner/group?
root@d7776ec7b655:/# ls -la /tmp
total 8
drwxrwxrwt 1 root root 4096 Sep  9 02:17 .
drwxr-xr-x 1 root root 4096 Sep  9 02:17 ..
-rw-rw-r-- 1 1001 1001    0 Sep  9 02:16 foofile 
root@d7776ec7b655:/# # Our container doesn't know about our users
root@d7776ec7b655:/# # so it only shows UID/GID 
root@d7776ec7b655:/# # Let's change the owner/group to root (UID 0) and set setuid flag
root@d7776ec7b655:/# chown 0:0 /tmp/foofile 
root@d7776ec7b655:/# chmod +x 4777 /tmp/foofile 
root@d7776ec7b655:/# # See what the permissions look like now in container
root@d7776ec7b655:/# ls -la /tmp
total 8
drwxrwxrwt 1 root root 4096 Sep  9 02:17 .
drwxr-xr-x 1 root root 4096 Sep  9 02:17 ..
-rwsrwxrwx 1 root root    0 Sep  9 02:16 foofile
root@d7776ec7b655:/# # Exit the container
root@d7776ec7b655:/# exit
exit
$ # What does our unmounted volume looks like?
$ ls -la
total 0
drwxrwxr-x  2 user user   60 Sep  8 21:16 .
drwxrwxrwt 57 root root 1220 Sep  8 21:17 ..
-rwsrwxrwx  1 root root    0 Sep  8 21:16 foofile
$ # Our host now has a setuid file! Bad news! 
```
Warning! The ability to set the `setuid` flag on files is a really big security hole that executes the file with the file owner's permissions. If we decided to compile a program and set this flag on it, we could have done a massive amount of damage on the host. Refer to [https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid) for more information on this flag.
正如你所看到的，如果我们决定对我们的`setuid`旗帜更加恶意，这可能是一个严重的问题。此问题扩展到我们使用的任何已装载的卷，因此请确保在处理它们时保持适当的谨慎。
Docker has been working on getting user namespaces working in order to avoid some of these security issues, which work by re-mapping the UIDs and GIDs to something else within the container through `/etc/subuid` and `/etc/subgid` files so that there is no `root` UID clashing between the host and the container, but they're not without their problems (and there's plenty of them at the time of writing this book). For more information on using user namespaces, you can find more information at [https://docs.docker.com/engine/security/userns-remap/](https://docs.docker.com/engine/security/userns-remap/).
使这个 UID/GID 问题复杂化的是这种单独的环境中发生的另一个问题:即使您在两个容器之间以相同的顺序安装所有相同的包，由于用户和组通常是按名称创建的，而不是特定的 UID/GID，您不能保证在容器运行之间保持这些一致，如果您想在升级或重建的容器之间重新装载相同的卷，这是一个严重的问题。因此，在为将要处理卷数据的用户和组安装软件包之前，您必须通过执行类似于下面的操作来确保 uid 和 GID 在卷上是稳定的，就像我们在前面的一些示例中所做的那样:
```
RUN groupadd -r -g 910 mongodb && \
 useradd -r -u 910 -g 910 mongodb && \
 mkdir -p /data/db && \
 chown -R mongodb:mongodb /data/db && \
 chmod -R 700 /data/db && \
 apt-get install mongodb-org
```
在这里，我们用 GID `910`创建一个组`mongodb`，用 UID `910`创建一个用户`mongodb`，然后在安装 MongoDB 之前确保我们的数据目录归它所有。通过这样做，当安装`mongodb-org`包时，运行数据库的组和用户已经在那里，并且具有不会改变的确切 UID/GID。有了稳定的 UID/GID，我们可以在任何已构建的容器上装载和重新装载卷，配置相同，因为两个数字都将匹配，并且它应该可以在我们将卷移动到的任何计算机上工作。
唯一需要担心的最后一件事(在最后一个示例中，这也是一个问题)是，挂载文件夹会将其自身覆盖在主机上已经创建的文件夹上，并替换其权限。这意味着，如果您将新文件夹装载到容器上，您必须手动更改卷的权限，或者在容器启动时更改所有权。让我们看看我的意思:
```
$ mkdir /tmp/some_folder
$ ls -la /tmp | grep some_folder
drwxrwxr-x  2 sg   sg        40 Sep  8 21:56 some_folder
$ # Mount this folder to a container and list the content
$ docker run -it \
             --rm \
             -v /tmp/some_folder:/tmp/some_folder \
             ubuntu:latest \
             ls -la /tmp
total 8
drwxrwxrwt 1 root root 4096 Sep  9 02:59 .
drwxr-xr-x 1 root root 4096 Sep  9 02:59 ..
drwxrwxr-x 2 1000 1000   40 Sep  9 02:56 some_folder
$ # Somewhat expected but we will do this now by overlaying
$ # an existing folder (/var/log - root owned) in the container
$ # First a sanity chech
$ docker run -it \
             --rm \
             ubuntu:latest \
             ls -la /var | grep log
drwxr-xr-x 4 root root  4096 Jul 10 18:56 log 
$ # Seems ok but now we mount our folder here
$ docker run -it \
             --rm \
             -v /tmp/some_folder:/var/log \
             ubuntu:latest \
             ls -la /var | grep log
drwxrwxr-x 2 1000  1000   40 Sep  9 02:56 log
```
正如您所看到的，容器内的文件夹上已经设置的任何权限都被我们挂载的目录卷完全践踏了。如前所述，避免有限用户在容器和装载的卷中运行服务时出现权限错误的最佳方法是从包装脚本开始更改容器上装载路径的权限，或者从装载的卷开始容器并手动更改，前者是更好的选择。最简单的包装脚本是这样的:
```
#!/bin/bash -e
# Change owner of volume to the one we expect
chown mongodb:mongodb /path/to/volume
# Optionally you can use this recursive version too
# but in most cases it is a bit heavy-handed
# chown -R mongodb:mongodb /path/to/volume
su -  -c ''
```
将它放在容器的`/usr/bin/wrapper.sh`中，并将下面的代码片段添加到`Dockerfile`的某个地方，在那里它作为根运行，应该足以解决这个问题:
```
CMD [ "/usr/bin/wrapper.sh" ]
```
当容器启动时，卷将已经装入，脚本将在将命令传递给容器的原始运行程序之前，将卷的用户和组更改为正确的用户和组，从而解决了我们的问题。
本节最大的收获应该是，当您处理卷时，您应该注意用户权限，因为如果您不小心，它们可能会导致可用性和安全性问题。当您开发您的服务和基础设施时，这些类型的陷阱可能会导致从小问题到灾难性故障的一切，但是现在您对它们有了更多的了解，我们有希望防止最坏的情况。
# 摘要
在本章中，您已经学习了大量围绕 Docker 数据处理的新内容，包括 Docker 映像内部和运行您自己的 Docker 注册表。我们还介绍了临时的、节点本地的和可重定位的数据存储，以及在云中有效部署服务所需的相关卷管理。后来，我们花了一些时间来介绍卷编排生态系统，以帮助您了解 Docker 卷驱动程序不断变化的环境，因为这个领域的情况变化很快。当我们到达最后时，包含了对各种陷阱(如 UID/GID 问题)的覆盖，以便您可以在自己的部署中避免它们。
当我们继续进入下一章时，我们将讨论集群强化以及如何以有序的方式在大量服务之间传递数据。