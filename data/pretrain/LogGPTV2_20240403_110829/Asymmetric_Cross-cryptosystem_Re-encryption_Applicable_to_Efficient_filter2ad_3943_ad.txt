dure in the ACCRE. In this table, m denotes the maximum
number of users authorized to access an IBBE secured ﬁle
and n(< m) denotes the number of users speciﬁed by the
data owner in ﬁle creation. Table 1 clearly reveals the ef-
ﬁciency of the ﬁle conversion mechanism: the data owner
just needs four exponentiations to produce a conversion key
that can transform his/her IBBE encrypted ﬁle into an IBE
encrypted one; and the data consumer with correct IBE de-
cryption key takes only two bilinear pairing operations to
recover the symmetric key. This allows a resource-limited
mobile to take little energy to access an encrypted ﬁle. Be-
sides, since the proxy in the ﬁle conversion actually decrypts
the IBBE ciphertext to obtain a blinded symmetric key, the
computation complexity of the ﬁle conversion is the same as
that of the original ﬁle access (decryption for an IBBE ci-
phertext), which means that the proxy does not need to take
extra costs to convert a ﬁle other than a normal IBBE de-
cryption. These features show that our ACCRE scheme pro-
vides a promising method to securely transform encrypted
data from the IBBE cryptosystem to the diﬀerent IBE cryp-
tosystem.
Table 2 compares our ACCRE scheme with some related
work that also achieve transforming a ciphertext for a pub-
lic key into a ciphertext for another public key, in terms
of the performance, interaction (required or not) and the
cross-cryptosystem (supported or not).
In this table, the
schemes proposed in [14] and [9] are constructed in identity-
based settings. Although these schemes achieve the constant
size of public key, secret key, original ciphertext, conversion
key and converted ciphertext, they transform encrypted ﬁles
in the same identity-based encryption system. Hence, the
data owner cannot specify a group of users to access the
data at ﬁrst, but only one single user. This restricts the
schemes from being employed for more complicated data
sharing systems allowing multiple authorized visitors. The
schemes [24] and [29] are constructed in attribute-based en-
cryption and thus allow multiple matching visitors to access
a ﬁle. However, in accessing a converted ﬁle, the number
of the time-consuming bilinear pairings required in the de-
cryption is linear with the number N of total attributes in
the system. This would be unaﬀordable to mobile devices
such as mobile phones and tablets that usually possess lim-
ited computing capability. The scheme [31] supports the
cross-cryptosystem that allows to transform a ﬁle encrypted
in one PKE cryptosystem into a ﬁle encrypted in another
cryptosystem (IBE), whereas it requires the interaction be-
tween the data owner who delegates the access rights and
the data consumer authorized to access converted ﬁle during
the conversion process.
Table 2 reveals the superior practicality of our scheme. It
can be seen that the users in IBE store very short public
key and secret decryption keys and take only two bilinear
pairings in accessing a converted ﬁle. Compared to [24] and
[29], the original ﬁle, the conversion key, the converted ﬁle of
our scheme are very short. Our scheme allows many autho-
rized users to access the original ﬁle, in contrast to allowed
single one in [14, 9, 31]. Our scheme does not require any
participation of the Admin or the speciﬁed data consumer in
the ﬁle conversion, hence the data owners can convert their
ﬁles more conveniently. Moreover, our ACCRE supports the
cross-cryptosystem re-encryption that allows to transforms
an IBBE encrypted ﬁle into an IBE encrypted one. There-
fore, a mobile user equipped with an IBE decryption can
at a low cost access a data previously encrypted by a more
complicated encryption system. These conﬁrm the practical
attractiveness of our ACCRE scheme.
Our ACCRE solution allows a mobile user with resource-
limited devices to access encrypted ﬁles at a low cost. We
note that there exist some other solutions that also result
less consumptions for the mobile users to access encrypted
ﬁles. Table 3 compares our ACCRE with these solutions.
We are interested on the public key, decryption key, cipher-
text to be stored on a mobile user and the number of bilinear
pairings computed by a mobile user in decryption. Hence,
we evaluate the size of the public key, decryption key and
ciphertext needed to be stored and the bilinear pairings re-
quired to be computed by a mobile user in this comparison.
Table 3 reveals the advantageous features of ACCRE in
its applications to mobile access. Compared to the stan-
dard IBE scheme [3] that does not support ﬁle conversion,
our scheme achieves the similar size of both public key and
decryption key and the same number of required bilinear
pairings. The solution [15] provides an outsourcing mecha-
nism to convert a long ABE ciphertext (linear in the number
l of attributes associated with the ciphertext) into a short
ElGamal-type one so that the mobile user can decrypt with-
out performing any bilinear pairing. This solution reduces
the computations of decryption performed by a mobile user,
but it does not support the access rights delegation that the
data owners are allowed to delegate the access rights to their
data to other users. The solution [33] provides a delegation
in ABE that allows a ciphertext to be re-encrypted to a
more restrictive policy. In a trivial application of [33], one
could transform a ciphertext into a ciphertext for the access
policy that contains only the identity of the mobile user.
Thus, the complicated ciphertext is converted into a short
one that the mobile user only needs few bilinear pairing to
decrypt. However, this use of [33] requires the identity of the
mobile user to be in advance speciﬁed in the access policy of
the original ciphertext, while in some applications the data
owners may not know who will ask to access their data in
the future. The IBBE scheme [10] that our scheme bases on
also achieves less consumption on mobile users except more
space to store the longer public key. Similar with [33], it also
requires the identity of the mobile user to be pre-speciﬁed
in encryption. Our ACCRE scheme achieves the less con-
sumption of mobile users. Furthermore, it allows the data
owner to delegate the access rights to his encrypted data to
a mobile user who is not involved in the access policy be-
forehand. These comparisons show the charming features of
Public Key
Secret key Original Conversion Converted
ˆe(, ) in
Table 2: Comparison with Related Work
[14]
[9]
[31]
[24]
[29]
Size
2
3
PKE: 3
IBE: 4
3N + 3
3N + 5
Ours
IBBE: m + 3
IBE: 4
Size
CT Size
Key Size
CT Size
Decryption
1
2
PKE: 3
IBE: 2
2N
2N + 1
IBBE: 1
IBE: 1
2
3
4
3
5
3
N + 3
N + 3
3N + 4
3N + 4
3
3
4
5
3
N + 6
N + 6
4
2
3
2
N + 3
2N + 2
2
interaction
Non-
√
√
×
√
√
√
Cross-
cryptosystem
×
×
√
×
×
√
Table 3: Comparison with Related Work Resulting Less Consumptions on Mobile Users
Public Key
Secret Key Original Converted
[3]
[10]
[15]
[33]
Ours
Size
4
m + 3
3
3
4
Size
CT Size
2
1
1
3
1
3
3
2l + 2
l + 2
3
CT Size
⊥
⊥
2
3
4
our scheme to convert encrypted data for mobile access in
data outsourced environments.
6.2 Experimental Results
We conducted a series of experiments to evaluate the per-
formance of ACCRE system in isolation (i.e., without con-
sidering the network lag, ﬁle I/O, etc.). The experiments are
performed on two hardware platforms: a PC desktop with
a 4-core Intel Core i3-2130 CPU running 3.40GHz and a
Samsung mobile phone I9100 with a dual-core Exynos 4210
CPU, running at 1.2GHz. The operations in bilinear groups
are implemented by using the Standford PBC library 0.5.12
(available at http://crypto.stanford.edu/pbc).
In the ex-
periments, we evaluate the performance of each procedure
of ACCRE.
In the ACCRE, the performance of ﬁle creation and con-
version key generation both depend on the parameter n, i.e.,
the number of users allowed to access a data encrypted in
an IBBE ciphertext. To reﬂect the aﬀection of the parame-
ter n on the system performance, we conducted experiments
with diﬀerent number of allowed users. In a practical exam-
ple such as a company’s data sharing system, it seems rea-
sonable to assume that the maximum number of employees
authorized to access a ﬁle would be no more than one hun-
dred. Therefore, we evaluated the performance of ACCRE
with parameter n = 10, 20, 30, ..., 100.
In the system setup procedure, the Admin outputs the
public key of size linear in m. For a ﬁxed m = 100, the time
to generate the system public key is about 435 ms, which is
a negligible consumption to an Admin that usually possesses
more powerful computing capability than our PC desktop.
In the user admission procedure, the Admin generates a
decryption key for a user no matter in IBBE or IBE. The
time consumed by the Admin to generate a decryption key
is just nearly 8.10 ms, which is also a negligible cost to the
Admin.
ˆe(, ) in
Ciphertext
Decryption Conversion
2
2
0
3
2
Non-pre-
Access rights
Speciﬁcation
⊥
⊥
×
×
√
Delegation
×
×
×
√
√
×
×
√
√
√
Figure 2: Time Consumed in File Creation
Figure 2 shows the time consumed by a data owner to
create an IBBE secured ﬁle to be stored in DSP. It can be
seen that the time consumed in the IBBE encryption is linear
with the number of users allowed to access the same data.
Even for the largest number n = 100, the time consumed by
the asymmetric encryption in this procedure is just about
0.4 s, which is very low cost for the data owners to encrypt
their data to be outsourced.
Figure 3 shows the time consumed in conversion key (CK)
generation procedure and ﬁle conversion procedure respec-
tively. In the CK generation, for an IBBE ciphertext, the
data owner generating CK runs an IBE encryption for the
identity of the intended data consumer. Although the data
owner computes a product of the hash values of the identi-
ties involved in the IBBE ciphertext, the computations are
performed in Zp and the cost time are negligible compared
to the time cost by the operations in G. Therefore, the time
01020304050607080901000.10.20.30.4nTimeinSecondsIBBEFileCreationFigure 3: Time Consumed in Conversion Key Gen-
eration and File Conversion
Figure 4: Time Consumed in IBBE File and Con-
verted File Access on Mobile Phone
consumed by the conversion key generation is almost inde-
pendent of the number of authorized users. We simulated
the ﬁle conversion procedure of the proxy also on the PC
platform. Figure 3 shows that the time consumed by the
proxy to convert an IBBE ciphertext into an IBE ciphertext
is linear with the number of users authorized to decrypt the
IBBE ciphertext. This conﬁrms that the proxy performs one
decryption of IBBE to convert an IBBE encrypted ﬁle.
Figure 4 shows the time consumed by the mobile phone
to access a converted ﬁle is much less that that to access an
IBBE encrypted ﬁle (original ﬁle). It can be seen that the
time cost by the IBBE decryption grows linearly with the
number of authorized users. Due to the less powerful com-
puting capability than the PC desktop, the mobile phone
takes much more time to decrypt an IBBE encrypted ﬁle.
For the largest number n = 100, the time consumed by the
IBBE decryption performed on the mobile phone is nearly
1.4 s. Figure 4 demonstrates that the time consumed by
the mobile phone to access a converted ﬁle is independent
of the number of authorized users. Since the decryption
for a converted ﬁle only requires two bilinear pairings, the
time consumed by the mobile phone in this procedure is