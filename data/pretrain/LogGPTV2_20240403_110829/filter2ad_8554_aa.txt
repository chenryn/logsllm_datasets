## 漏洞原理
D-Link DIR-818LW Rev.A 2.05.B03和DIR-822 B1
202KRb06中，通过HNAP1协议访问`SetRouterSettings`时，`RemotePort`参数存在操作系统命令注入漏洞。在`SetRouterSettings.php`源码中，`RemotPort`参数没有经过任何检查，直接存放于`$path_inf_wan1."/web"`，并且在`iptwan.php`中的IPTWAN_build_command函数中使用`$path_inf_wan1."/web"`变量作为`iptables`的参数，同样未做检查。构造`SetRouterSettings.xml`，使`RemotePort`中包含如`telnetd`的shell命令，利用该漏洞执行非法操作系统命令。
./etc/templates/hnap/SetRouterSettings.php：
    $path_inf_wan1 = XNODE_getpathbytarget("", "inf", "uid", $WAN1, 0);
    #$WAN1  = "WAN-1";
    $nodebase="/runtime/hnap/SetRouterSettings/";
    ……
    $remotePort = query($nodebase."RemotePort");
    ……
    set($path_inf_wan1."/web", $remotePort);
./etc/services/IPTABLES/iptwan.php
    function IPTWAN_build_command($name){
      $path = XNODE_getpathbytarget("", "inf", "uid", $name, 0);
      ……
      $web = query($path."/web");
      ……
      #web作为iptables的参数写入$_GLOBALS["START"]
      if (query($path."/inbfilter") != "")
          $inbfn = cut(query($path."/inbfilter"), 1, "-");
          $hostip = query($path."/weballow/hostv4ip");
          if ($hostip != "")
          {
              if (query($path."/inbfilter")!="") fwrite("a",$_GLOBALS["START"], $iptcmd." -p tcp --dport ".$web." "."-j CK_INBOUND".$inbfn."\n");
              fwrite("a",$_GLOBALS["START"], $iptcmd." -s ".$hostip." -p tcp --dport ".$web." -j ACCEPT\n");
          }
          else
          {
              if (query($path."/inbfilter")!="") fwrite("a",$_GLOBALS["START"], $iptcmd." -p tcp --dport ".$web." "."-j CK_INBOUND".$inbfn."\n");
              fwrite("a",$_GLOBALS["START"], $iptcmd." -p tcp --dport ".$web." -j ACCEPT\n");
          }
      ……
    }
PS：服务器的web目录为/htdocs/web/
## 漏洞分析
### 关于HNAP
> The Home Network Administration Protocol (HNAP) is an HTTP-Simple Object
> Access Protocol (SOAP)-based protocol that can be implemented inside of
> network devices to allow advanced programmatic configuration and management
> by remote entities.
HNAP是由Pure
Networks开发的协议，后续由Cisco管理与开发。HNAP用于网络设备之间的交互，该协议基于SOAP和HTTP，以post的方式发包。
使用HNAP：在HTTP
header中加入SOAPAction，该字段中会指明请求的操作，如Login，并向
举个栗子，下图是登录时的抓包：
192.168.0.1向路由器192.168.0.2发送数据，在SOAPAction中指定了请求内容。
路由器收到之后以LoginResponse回复发送方，返回了一些登录需要的关键数据.
发送方收到之后，login的action由request变成了login，即发送用户名密码的过程，密码是由用户私钥处理过的数据。
路由器验证登录的用户名和密码，返回登录成功信息。
### 理解HNAP
为了再深入理解HNAP，查看/htdocs/cgibin二进制文件，简化流程如下：
    hnap_main(){
      memset(acStack1708,0,0x100);
      getenv("HTTP_AUTHORIZATION");
      soapaction = getenv("HTTP_SOAPACTION");
      request_method = getenv("REQUEST_METHOD");
      hnap_auth = getenv("HTTP_HNAP_AUTH");
      cookie = getenv("HTTP_COOKIE");
      referer = getenv("HTTP_REFERER");
      memset(php_path,0,0x100);
      //当未指定soapaction时，默认请求为GetDeviceSettings
      if (soapaction == (char *)0x0) {
        soapaction = "http://purenetworks.com/HNAP1/GetDeviceSettings";
        ……
        }
       else{
            ……
            __s1 = strstr(soapaction,"http://purenetworks.com/HNAP1/Login");
            if (__s1 != (char *)0x0) {
                ……
                parse_param_value(uVar2,"Action",action);
                parse_param_value(uVar2,"Username",username);
                parse_param_value(uVar2,"LoginPassword",pwd);
                parse_param_value(uVar2,"Captcha",captcha);
                iVar1 = strcmp(action,"request");
                //当action为request时
                if (iVar1 == 0) {
                    //产生一个长度为0X32的随机字符串
                    //例：LVy04tz2fCRlZIu8vefr1OCKu9qTOQaktWkwOhy3rNnQfhWaKB
                    get_random_string(random_string,0x32);
                    //cookie_value为前十个字符
                    //例：LVy04tz2fC
                    strncpy(cookie_value,random_string,10);
                    //challenge为接下来20个字符
                    //例：RlZIu8vefr1OCKu9qTOQ
                    strncpy(random_challenge,random_string_10,0x14);
                    //public key为接下来20个字符
                    //例：aktWkwOhy3rNnQfhWaKB
                    strncpy(public_key,random_string_30,0x14);
                    sprintf(public_key_and_0,"%s%s",public_key,0);
                    strcpy(COOKIE,cookie_value);
                    strcpy(CHALLENGE,random_challenge);
                    //HMAC_MD5就是常见的HMAC，hash算法为MD5。这里函数的输出放在第三个参数中
                    //例：hmac_1=E188583458DE427B6A71C2DD04CB632C
                    HMAC_MD5(random_challenge,public_key_and_0,hmac_1);
                    ……
                    //set challenge,privatekey,captcha
                    //返回soap xml
                }//end of action=request
                else{
                    if(strcmp(action,"login")==0 && cookie !=0)
                    {
                        find_uid = strstr(cookie,"uid=");
                        if (find_uid == (char *)0x0) goto LAB_004137fc;
                        //获取cookie的值
                        strncpy(cookie_value,find_uid + 4,10);
                        //检查cookie
                        __fd=get_cgdata_by_uid(acStack1904,cookie_value);
                        if (__fd < 0) {
                            iVar1 = -2;
                            goto LAB_004137fc;
                        }
                        ……
                        //由HMAC计算口令，以hmac_1作为key,对challenge进行hmac
                        HMAC_MD5(CHALLENGE,hmac_1,PWD);
                        ……
                        //将计算的口令与发送方中的口令比较
                        __fd = strcmp((char *)PWD,pwd);
                        if (__fd == 0) {
                            login_response_xml("success");
                            ……
                        }
                    }//end of action=login
                }
              } //end of Login
              //不是login的情况
              if (hnap_auth != (char *)0x0){
                    ……
                    //hnap_auth用空格分为两部分
                    auth_1 = strtok(hnap_auth," ");
                    auth_2 = strtok((char *)0x0," ");
                    //将auth_2和soapaction连接起来
                    strcpy(auth_2_soapaction,auth_2);
                    strcat(auth_2_soapaction,soapaction);
                    ……
                    HMAC_MD5(auth_2_soapaction,hmac_1,HMAC_AUTH);
                    //比较auth_1和计算后的值
                    __fd = strcmp(auth_1,HMAC_AUTH);