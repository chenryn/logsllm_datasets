# Scary Tickets：第三方服务系统存在的安全风险（下）
|
##### 译文声明
本文是翻译文章，文章原作者 sites.google.com，文章来源：sites.google.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、利用Zendesk配置
根据前面对Zendesk的了解，我们想挖掘如何利用这种处理过程来攻击正常客户。为了避免重复造轮子，我决定再次阅读Inti的研究报告，看他是否忽视过其他攻击方法。在Inti的研究报告中，他提到了利用类似系统来访问Slack以及Yammer。我觉得还有其他利用场景能够造成更严重的后果，比如在Google上获得有效的`[@domain](https://github.com/domain
"@domain").com`邮箱，然后利用该邮箱获得访问权限。在下文中，我将与大家分享我在漏洞报告中使用的几个案例。
###  攻击Zendesk
**1、获得Google账户**
每次渗透测试我们都可以先从定位公司的支持邮箱开始。为了完成该任务，我使用[hunter.io](https://hunter.io/try/search/domain.com)来寻找可能存在的支持邮箱列表。找到目标邮箱后，我使用自己的账户往该邮箱发送了一封简单邮件，请求提供帮助。如前文所述，如果目标服务使用的是Zendesk，那么通常就会自动回复邮件表示已确认收到我们发送的邮件。收到回复邮件后，我们就可以从中提取出哈希值。
然后，我访问`accounts.google.com`开始注册账户。Google有一个注册功能，可以让我们绑定域名。这个功能非常有用，我们可以在Google上注册自己公司的域名，然后使用日历、群组等功能，无需创建GSuite账户或者注册GSuite服务。还有一点比较有趣，Google上大多数“Sign
in with Google”使用的是Google的OpenID，当用户注册或者登录时只会检查邮箱的域名。因此这就会让这种攻击技术变得更加危险。
为了获得有效的`support+[PI:EMAIL](mailto:PI:EMAIL)`邮箱，首先我回复自动回复邮件，将`no-[PI:EMAIL](mailto:PI:EMAIL)`添加为ticket的CC，完成该操作后再访问Google注册账户。注册账户时，我在名字（First
Name）和姓氏（Last
Name）字段填入的时ticket的哈希值。之所以这么做，是因为在发送验证码时，Google会向`support+[PI:EMAIL](mailto:PI:EMAIL)`邮箱发送一封邮件，邮件正文中包含`Hi
{firstname}
{lastname}`。成功完成测试后，我已经得到了经过验证的`[@domain](https://github.com/domain
"@domain").com`邮箱，并且可以在“Sign in with Google”的大多数页面上使用。
**2、利用已验证的邮箱**
 登录内部域名：
在Google上获得已验证的邮箱后，我想测试能否在目标公司（Gitlab）内部或者敏感的环境中使用这个邮箱。其中有个网址为`https://prometheus.gitlab.com/`，该站点需要`[@gitlab](https://github.com/gitlab
"@gitlab").com`域名才能登陆。
然而需要注意的是，这里可能存在两种不同的Oauth：在某些站点中，Oauth使用的是简单的登录策略，会检查用来登录的域名是否与公司域名（`gitlab.com`）相匹配，并检查用户账户是否存在于目标系统中（`Prometheus`）。在类似`Prometheus`的某些服务中，用户账户采用自动配置（auto-provisioned）策略，这意味着只要用户使用`[@gitlab](https://github.com/gitlab
"@gitlab").com`域名，即使该用户在目标系统中不存在，也能成功登录，使用有限的访问权限。在某些情况下，有些公司会使用基于GSuite的Oauth。在这种情况下，虽然我们能看到同样的Google登录页面，但后台的登录过程有所不同。登录函数会检查该组织的GSuite用户列表中是否存在该邮箱地址。通过Zendesk漏洞验证的任何邮箱并不存在于GSuite中，因为我们只能在Google中验证不存在的邮箱。如果目标企业使用的是GSuite
SSO，那么我们就无法利用这个登录过程。
回到Gitlab，我尝试使用已获得账户登录`Prometheus`。（对我而言）幸运的是，Gitlab使用的是常规的Oauth，这样我就能成功登录`Prometheus`（出于安全保护考虑这里不展示截图）。
 登录Atlassian实例：
在某些情况下，我无法找到能够登录的任何内部域。我测试的某个公司最近已经将所有Oauth迁移到GSuite
SSO，因此我登录内部域的所有尝试都以失败告终。然而在某些情况下，我发现有些公司会通过Atlassian的云功能来运行公司的JIRA实例。除了将JIRA安装在本地服务器以外，我们还能在Atlassian自己的域中（`atlassian.net`）运行JIRA，这是一种开箱即用的服务方式。对于这类实例，大多数都允许带有公司域名的任何人登录并查看JIRA
ticket。对于这个公司，虽然所有的实例都已迁移到GSuite SSO上，但他们忘了将JIRA登录口迁移到GSuite
SSO上，因此我可以登录并查看系统中的JIRA ticket。
使用内部域名的Google和Atlassian登录口并不是这个漏洞的唯一攻击点。我们可以在其他第三方服务（如Zoom和Asana）上利用这个漏洞，获得目标公司的受限访问资源，包括视频（Zoom）以及内部项目管理信息（Asana）。接下来我们将分析Help
Scout利用方法以及这种攻击方法的局限性。
###  攻击Help Scout
在针对支持系统的测试报告中，Inti最令人激动的一个发现就是成功进入了目标公司的Slack实例。Inti在测试Zendesk时发现，如果攻击者可以使用`no-[PI:EMAIL](mailto:PI:EMAIL)`注册公司的Zendesk实例，那么就可以加入目标Slack实例，因为Slack会通过这个`no-reply`邮箱发送邀请链接。发现这个问题后，Slack决定在`no-reply`后面加一串随机的字母数字（比如`no-reply-[PI:EMAIL](mailto:PI:EMAIL)`）来保护客户，导致攻击者无法准确猜出正确的邮箱。对于Help
Scout，当我们利用Slack实例时事情变得更加有趣起来。
在进入Slack利用环节之前，我们需要重点关注Slack的某些功能，这样攻击起来更加方便。与其他服务一样，Slack也为企业提供了不同选购方案。免费版最为简单，没有集成类似SSO之类的企业工具。Slack实例还支持域限制，使企业能限制可以自动加入Slack的用户。此外，Slack还支持查找用户加入、受邀以及所属的所有工作区（workspace），如果我们加入太多的workspace，以至于无法跟踪特定的实例，那么这个功能就非常有用。在本次研究中，我们会利用到这些功能，配合Help
Scout来获得目标企业内部Slack实例的访问权限。需要强调的是，我们并没有刻意去加入某些Slack实例，只加入了其中一个实例，并且整个过程都已获得目标企业授权，处于目标企业监控下，确保我们没有执行任何恶意操作。