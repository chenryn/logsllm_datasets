97, 118, 97, 47, 108,
            97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 0, 33, 0, 3, 0, 4, 0, 
0, 0, 0, 0, 2, 0, 1,
            0, 5, 0, 6, 0, 1, 0, 7, 0, 0, 0, 29, 0, 1, 0, 1, 0, 0, 0, 5, 42, 
-73, 0, 1, -79, 0, 0, 0,
            1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 7, 0, 1, 0, 9, 0, 10, 0, 1, 0, 
7, 0, 0, 0, 27, 0, 1,
            0, 1, 0, 0, 0, 3, 18, 2, -80, 0, 0, 0, 1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 
0, 0, 10, 0, 1, 0, 11,
            0, 0, 0, 2, 0, 12
    };
    public Class findClass(String name) throws ClassNotFoundException{
        //只处理testHelloWorld类
        if (name.equals(testClassName)){
            return defineClass(testClassName,testClassBytes,0, 
testClassBytes.length);
        }
        return super.findClass(name);  //如果不是testHelloWorld返回父类的findClass方
法，即类不存在
    }
    public static void main(String[] args) {
        selfClassLoader loader=new selfClassLoader();
        try {
            Class testClass=loader.loadClass(testClassName); //调用loadClass方法加
载类，返回一个Class类对象
            Object testInstance=testClass.newInstance();//// 反射创建
TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();
            Method method=testInstance.getClass().getMethod("hello");
            String str=(String) method.invoke(testInstance);
            System.out.println(str);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
3. defineClass把字节码转换为Class类对象。
URLClassLoader
TemplatesImpl 加载字节码
package com.sec.classloader;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.net.URLClassLoader;
/*
URLClassLoader继承了ClassLoader，URLClassLoader提供了加载远程资源的能力
在写漏洞利用的payload或者webshell的时候我们可以使用这个特性来加载远程的jar来实现远程的类方法
调用。
 */
public class urlClassLoaderDemo {
    public static void main(String[] args) {
        try {
            // 定义远程加载的jar路径
            URL url = new URL("http://localhost/java/calc.jar");
            // 创建URLClassLoader对象，并加载远程jar包
            URLClassLoader ucl = new URLClassLoader(new URL[]{url});
            // 定义需要执行的系统命令
            String cmd = "whoami";
            // 通过URLClassLoader加载远程jar包中的CMD类
            Class cmdClass = ucl.loadClass("calc");
            // 调用CMD类中的exec方法，等价于: Process process = CMD.exec("whoami");
            Process process = (Process) cmdClass.getMethod("exec", 
String.class).invoke(null, cmd);
            // 获取命令执行结果的输入流
            InputStream in = process.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] b = new byte[1024];
            int a = -1;
            // 读取命令执行结果
            while ((a = in.read(b)) != -1) {
                baos.write(b, 0, a);
            }
            // 输出命令执行结果
            System.out.println(baos.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
说明
利用 classloader 中的 defineClass 直接加载字节码。每一个类加载器最后都是通过
defineClass 方法来加载字节码。在 TemplatesImpl 类中有实现自定义的 defineClass ，可以
通过这个 TemplatesImpl 类来加载我们自己的代码。调用链：
TemplatesImpl#getOutputProperties() -> TemplatesImpl#newTransformer() -
>TemplatesImpl#getTransletInstance() -> TemplatesImpl#defineTransletClasses()-> 
TransletClassLoader#defineClass()
package SecurityRambling.TemplatesImpl_;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javax.xml.transform.TransformerConfigurationException;
import java.io.*;
import java.lang.reflect.Field;
import java.util.Base64;
public class TemplatesImpl_ {
    public static void main(String[] args) throws 
TransformerConfigurationException, IOException {
        String str="yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAG" +
 "AcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3h" +
 "zbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZ" +
 "XJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb" 
+
 "25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb" 
+
 "20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW" 
+
 "4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsp
" +
 "VgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADg
AP" +
 "BwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcG
wBAEBjb" +
 "20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5
zbGV0AQA" +
 "5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uA
QAQamF2Y" +
 "S9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnR
TdHJlYW0" +
 "BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAA
BkAAAADAAA" +
 "AAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKA
AAABgABAAAA" +
 "CgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAw
AAAA0ABAAO" +
            "AAwADwABABAAAAACABE=";
        //System.out.println(str);
        byte[] code = Base64.getDecoder().decode(str);
        byteToFile(code);
        String s = fileToBase64();
        System.out.println(s);
        //System.out.println(new String(code));
        TemplatesImpl templates = new TemplatesImpl();
        TemplatesImpl_.setFieldValue(templates,"_name","HelloTemplatesImpl");
        TemplatesImpl_.setFieldValue(templates,"_bytecodes",new byte[][]{code});
        TemplatesImpl_.setFieldValue(templates,"_tfactory",new 
TransformerFactoryImpl());
        templates.newTransformer();
    }
    private static void setFieldValue(Object obj,String FieldName,Object setObj)
{
        try {
            Field field = obj.getClass().getDeclaredField(FieldName);
            field.setAccessible(true);
            field.set(obj,setObj);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    private static byte[] fileToByte() throws IOException {  //文件转字节
        File file = new File("E:\\技术文章\\自己的\\代码审计
\\java\\ysoserial\\src\\main\\java\\SecurityRambling\\TemplatesImpl_\\test.class"
);
        FileInputStream inputStream = new FileInputStream(file);
        ByteArrayOutputStream byteArrayOutputStream = new 
ByteArrayOutputStream();
        byte[] bytes = new byte[1024];
        int n;
        while ((n=inputStream.read(bytes))!=-1){
            byteArrayOutputStream.write(bytes,0,n);
        }
        inputStream.close();
        byteArrayOutputStream.close();
        return byteArrayOutputStream.toByteArray();
    }
    private static void byteToFile(byte[] bytes) throws IOException{  //字节转文件
        if(bytes.length == 0){
            return;
        }
几点疑问
1. 
利用 TemplatesImpl 加载字节码之后是不会自动创建类对象的，这个对象需要显示的创建。
在上面的 demo 当中创建对象的代码位于 getTransletInstance 方法当中。通过反射创建。 
tomcat的类加载机制
        File file = new File("E:\\技术文章\\自己的\\代码审计
\\java\\ysoserial\\src\\main\\java\\SecurityRambling\\TemplatesImpl_\\test.class"
);
        FileOutputStream fileOutputStream = new FileOutputStream(file);
        BufferedOutputStream bufferedOutputStream = new 
BufferedOutputStream(fileOutputStream);
        bufferedOutputStream.write(bytes);
        bufferedOutputStream.close();
        fileOutputStream.close();
    }
    private static String fileToBase64() throws IOException{  //文件转base64编码
        byte[] bytes = fileToByte();
        byte[] encode = Base64.getEncoder().encode(bytes);
        return new String(encode);
    }
}
BootStrap中定义类加载器 
为什么tomcat要打破双亲委派模型