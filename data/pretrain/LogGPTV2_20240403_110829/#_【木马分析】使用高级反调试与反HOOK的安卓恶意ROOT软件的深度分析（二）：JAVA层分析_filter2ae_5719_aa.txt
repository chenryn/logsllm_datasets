# 【木马分析】使用高级反调试与反HOOK的安卓恶意ROOT软件的深度分析（二）：JAVA层分析
|
##### 译文声明
本文是翻译文章，文章来源：fortinet.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[ **shinpachi8**](http://bobao.360.cn/member/contribute?uid=2812295712)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**  
**
**前言**
在这篇博客的[第一部分](http://bobao.360.cn/learning/detail/3463.html)，我们完成了Native层的分析，并获得了解密的辅助dex文件。
在这一部分我们继续分析它。为了保持连续性，我们将保持第一部分的章节和图片下标。
**辅助的dex文件**
下边的是一解密出的文件，是一个jar文件。 它通过MultiDex机制来动态加载为第二个DEX文件
图25 解密的包含DEX文件的APK文件
在解压"decrypt.dump"文件之后，你可以在文件夹内看到一个名为"class.dex"的文件。
图26
接下来，我们分析这个DEX文件
图27 反编译DEX文件及它的AndroidManifest.xml文件
从上图中，我们可以看到"class.dex"是名为"file Helpler"的恶意软件的主要逻辑。 下图是 com.sd.clip.activity.
FileManagerActivity类的onCreate
函数
图28 FileManagerActivity类的onCreate函数
图29 initadv函数
图30 Nws类
Nws类的getStart函数是用来启动 com.hg.mer.PG 服务。下边是PG类的定义。
图31 com.hg.mer.PG服务类
当startService函数被调用了之后，紧接着onCreate函数被调用,
然后调用onHandleIntent函数。在上边的图中，我们用红线标明了四个关键代码，接下来我们按顺序分析它们。
**  
**
**readDex()**
下图是readDex函数的代码片段。
图32 readDex函数
基于我的分析，Shen类是使用了base64 的类, 所以Sheu.decode("S0suYmlu") 的结果是字符串 "KK.bin"。
下一步，程序在它的资产文件夹就打开KK.bin文件并读取其中的一些有用的信息。
下边是KK.bin的内容
图33 在文件夹中的KK.bin文件
程序可以从KK.bin文件末尾提取出一些内容。有七个使用Base64编码的字符串存储在数组列表中，getAppid函数是用来解码这些字符串。
图34 getAppid函数
解码的七个字符串如下：
    Pls.Kbin: wddex.jar
    Pls.OI: xdt
    Pls.PL: com.svq.cvo.Rtow
    Pls.Jr: getDex
    Pls.Wv: sgdex
    Pls.As: dos.jar
    Pls.NQ: KK.bin
**dxfile()**
下边是dxfile的代码片段:
图35 dxfile函数
图36 UnZipFolder函数
Pls.UnZipFolder函数从KK.bin文件中提取加密的内容。其在KK.bin中的位置是从偏移位0X20至偏移位0x1CDB,
然后保存为/data/data/com.web.sdfile/files/wddex.jar 文件。 其内容是使用的DES算法来加密的。
在dxfile函数中，程序将/data/data/com.web.sdfile/files/wddex.jar
解密至文件/data/data/com.web.sdfile/app_sgdex/dos.jar中
**  
**
**DexClassLoader()**
它的构造函数如下：
在这个调用中，dexPath的值是"/data/data/com.web.sdfile/app_sgdex/dos.jar",
optimizedDirectory的值是 "/data/data/com.web.sdfile/app_xdt"
这个函数从.jar,.apk文件中加载包含 class.dex入口的类。这个函数是用来执行应用未安装的那一部分的代码。优化的DEX文件被写入
data/data/com.web.sdfile/app_xdt 文件夹下的dos.dex中。
一旦加载完 data/data/com.web.sdfile/app_sgdex/dos.jar 中的类，这个文件就会被删除。
1\. 在com.svq.cvo.Rtow dynamically类中调用getDex()函数
接下来，让我们检查一下dos.dex文件。
图37 反编译dos.dex
下图是com.svq.cvo.Rtow类的getDex函数
图38 com.svq.cvo.Rtow类的getDex函数
图39 Dwol类的构造函数
com.kdw.xoa.Dwol类的构造函数中，一个新文件mda.ico 在文件夹
/data/data/com.web.sdfile/files/中被创建。然后它调用downloadFile函数来从远端服务器http://gt.rogsob.com/stmp/ad.png
下载一个payload 并保存至/data/data/com.web.sdfile/files/mda.ico.
这个payload使用DES加密算法来加密。
图40 downloadFile函数
图41 initData函数
接下来是silentInstall的定义
图42 silentInstall函数
以红线标记的五个部分在下边解释
a. Dwol的dxfile函数是用来对 /data/data/com.web.sdfile/files/mda.ico
这个payload来解密的，解密完的payload保存在 /data/data/com.web.sdfile/app_snex/dkt.jar
b. Ngss类的upZipFile函数将解密的payload 即 dkt.jar解压至/data/data/com.web.sdfile/files/
文件夹内。它包括以下几个文件
图43 payload文件
c. 在解压完之后，它删除了文件/data/data/com.web.sdfile/app_snex/dkt.jar和
/data/data/com.web.sdfile/files/mda.ico ,并将目录
/data/data/com.web.sdfile/app_snex/也删除了。
d. 在文件夹/data/data/com.web.sdfile/files/ 中将class.dex重命名为wsh.jar
e. 在/data/data/com.web.sdfile/files/wsh.jar 中动态加载类，最优的目录app_outdex
存储dex的缓存文件为wsh.dex。
f. 调用com.rootdex.MainActivity类的getDex函数
接下来，我们深入wsh.dex， 它主要是执行root工具来root设备并在系统目录里安装文件。
图44 反编译wsh.dex
下图是com.rootdex.MainActivity类的getDex函数的定义。
图45 com.rootdex.MainActivity类的getDex函数的定义
a. GetActive函数是用来收集用户信息然后传给服务器。服务器的URL是：
http://grs[.]gowdsy[.]com:8092/active.do 下边是流量:
图46 发送收集的信息至服务器的流量
b. 查看在文件夹/data/data/com.web.sdfile/files/
下是否有文件,然后将它们的文件名保存至下一步用来root设备的数组列表中。 c. 在设备中执行root工具。
然后，run函数会调用HandleRoot函数
图47 HandleRoot函数
下边是copyRootFile函数的关键代码
图48 copyRootFile函数
在这个函数中，主要有四步：
1\. FileUtil.dxfile函数用来解密 文件 /data/data/com.web.sdfile/files/png.ico，
然后将它保存成文件/data/data/com.web.sdfile/app_dex/.do 。