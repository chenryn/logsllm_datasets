0
ture is used by subsequent stages of the compiler.
(cid:2) ∈ D
(cid:2)
Minimization, the next step, is not possible for
XFAs as there is no single canonical minimal form for
an XFA. Instead of a minimization stage, we developed
two separate algorithms: one for reducing the number
of data domain values possible in each state, and one
for reducing the number of states. Currently, our com-
piler only uses the data reduction algorithm which is
194
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
[^ab]
3ĺ3
3ĺ5
5ĺ5
7ĺ6
{3,5}
G
[^a]
3ĺ3
3ĺ5
5ĺ5
7ĺ6
3ĺ3
3ĺ5
3ĺ4
a
b
a
H
F={(G,6), (H,6)}
3ĺ3
3ĺ5
3ĺ4
3ĺ3
3ĺ5
5ĺ5
7ĺ6
4ĺ7
{3,4,5}ĺ{3,5}
[^ab]
{3,4,5}ĺ{3,4,5}
Determinize
Data Domain
{3,5}
G
{3,5}ĺ{3,4,5}
{3,5,7}ĺ{3,4,5}
{3,5,6}ĺ{3,4,5}
a
b
a
H
{3,5}ĺ{3,5}
{3,5,7}ĺ{3,5,6}
{3,5,6}ĺ{3,5}
[^a]
F={(G,{3,5,6})}
QD={(G,   {3,5}), 
(G,{3,5,7}), 
(G,{3,5,6}), 
(H,{3,4,5})}
{3,4,5}ĺ{3,5,7}
Renaming 
to simplify 
next figure
{3,5}
8
{3,5,7}
9
{3,5,6}
10
{3,4,5}
11
Figure 9. Applying algorithm 3 (data determinization) to the NXFA produced in Figure 8.
applied to the XFA produced by Algorithm 3. Due to
space constraints, we eliminate a detailed description of
these algorithms.
4.2.4. Finding efﬁcient implementations. The last
step in the compilation process is to map abstract data
domain operations to efﬁcient, concrete instructions for
manipulating data values.
Intuitively, this step deter-
mines the structure of the scratch memory. Figure 10
gives a simpliﬁed view of how this step works for the
XFA produced in Figure 9. More formally, in this step
the compiler ﬁnds a mapping from data domain ope-
rations in an XFA to an efﬁciently implementable data
domain (EIDD), which we deﬁne as follows:
Deﬁnition 3 An efﬁciently implementable data domain
(EIDD) is a 6-tuple (D,d0,E,UE ,C,AC), where
• D is the ﬁnite set of values in the data domain,
• d0 is the initial data domain value,
• E is a set of symbolic names for efﬁcient-to-compute
update functions,
• UE : E → DD is a mapping from these names to fully
deﬁned (deterministic) update functions on D that
can be associated with XFA transitions,
• C is a set of symbolic names for efﬁcient-to-check
acceptance conditions,
• and AC : C → 2D is a mapping from these names
to acceptance conditions that can be associated with
XFA states.
The XFA does not rely explicitly on Uδ and F dur-
ing its operation. Instead, it uses Eδ, which maps each
transition from δ to an update function from E, and CQ,
which maps each state from Q to an acceptance condi-
tion in C. Although deﬁnition 3 speciﬁes that the update
functions in E must be “efﬁcient to compute” and the
acceptance conditions from C “efﬁcient to check”, it is
out of scope to give a deﬁnition for what it means to be
efﬁcient as this depends strongly on the platform XFAs
run on. For example, on some platforms we may de-
ﬁne efﬁciency as the use of ﬁve or fewer machine code
instructions to perform the update or to check the con-
dition, on others we may use different deﬁnitions.
(cid:2)
0
Algorithm 4 presents the basic procedure for map-
ping to EIDDs. Note the use of two unconventional no-
tations. First, for some sets A we use A[0] to denote
an arbitrary element of the set; the correctness of the
algorithm does not depend on which element gets cho-
sen and whenever we use this notation we know that
A (cid:13)= /0. Second, the conditions of some while loops and
if-statements are of the form ∃a ∈ A, and in these cases
we assume that inside the body of the loop or the if-
statement a is bound to one of the elements of A. As
above, it is not important for the correctness of the al-
gorithm which element is chosen.
Given an XFA (Q,D,Σ,δ,Uδ,(q0,d0), F) and an
(cid:2), d
EIDD (D
,E,UE ,C, AC), this algorithm computes a
(cid:2)
QD :
mapping that consists of three components: (1) D
Q×D→ D
(cid:2)
maps all conﬁgurations from QD (produced
(cid:2)
by Algorithm 3) to values in the new data domain D
, (2)
Eδ : Q× Σ → E maps all transitions to efﬁcient update
functions, and (3) CQ : Q → C maps all states to efﬁ-
cient acceptance conditions. Note that the mapping for
, rather than from
data domain values is from QD to D
D to D
can be much smaller than D (and typ-
. Thus D
ically is) because different values of D can map to the
(cid:2)
without affecting semantics, as long as
same value of D
there is no state where both values from D can occur. In
Figure 10, for example, the data domain size is reduced
from 4 to 3. Below are the conditions that a valid map-
, Eδ,CQ) satisﬁes to ensure that it preserves
ping (D
the semantics of the XFA.
(cid:2)
QD
(cid:2)
(cid:2)
(cid:2)
(q,c) ∈ CQ
(cid:2)) ∈ D
(cid:2)
((q, d),d
QD
((qi, s), e) ∈ Eδ
(cid:2)
(cid:2)
QD(q0, d0) = d
D
0
QD(q,d) ∈ AC(CQ(q))
(cid:2)
QD(q,d) /∈ AC(CQ(q))
(cid:2)
(cid:2)
QD(δ(qi, s),Uδ(qi, s)(di)) =
D
(cid:2)
QD(qi, di))
UE (Eδ(qi, s))(D
D
D
∀q ∈ Q,∃c ∈ C s.t.
s.t.
s.t.
∀(q, d) ∈ QD,∃d
(cid:2) ∈ D
(cid:2)
∀(qi, s) ∈ Q× Σ,∃e ∈ E
∀(q,d) ∈ F
∀(q,d) ∈ QD− F
∀((qi,di), s) ∈ QD×Σ
195
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
EIDD
D’={0,1,invalid}    
“counter++;”ļ{0ĺ
1,  
1ĺinvalid, 
invalidĺinvalid}
8
0, 
0,              
0}
0,               
8ĺ8
1,     
9ĺ10
10ĺ8
invalidĺinvalid}
“counter=0;”ļ{0ĺ
1ĺ
invalidĺ
“;”ļ{0ĺ
1ĺ
[^a]
11ĺ8
[^ab]
8ĺ11
9ĺ11
10ĺ11
a
b
F={(G,10)}
G
QD={(G,  8), 
(G,  9),  
(G,10), 
(H,11)}
a
H
Find mapping
to EIDD
Mapping for 
data values
(G,  8)ļinvalid 
1 
(G,  9)ļ
2 
(G,10)ļ
(H,11)ļ
1
Mapping for 
update functions
11ĺ11
11ĺ9
(G,       a)ļ “counter=1;”
(G,   [^a])ļ“counter++;”
(H,       a)ļ“;”
(H,       b)ļ“;”
(H, [^ab])ļ“;”
if (counter==1) {
accept();
}
invalid
G
[^a]
counter++;
[^ab]
a
b
a
H
counter=1;
Figure 10. Finding a mapping to an EIDD for the XFA produced in Figure 9.
Algorithm 4 ﬁnds a mapping if one exists or de-
clares failure by returning an empty mapping. The
(cid:2)
loop at line 11 expands D
QD when it ﬁnds situations in
which a transition t = δ(qi,s) has already been mapped
in Eδ and a conﬁguration (qi,di) of the source state
(cid:2)
for t also has been mapped in D
QD, but the conﬁgu-
ration resulting from applying the update function for t,
(q f ,d f ) = (δ(qi,s),Uδ(qi, s)(di)), has not been mapped
(cid:2)
QD yet. In this case (q f ,d f ) can be mapped to the
in D
which is the output of Eδ(qi, s) for input
value from D
(qi,di). Eδ is expanded by choosing an unmapped
D
transition on line 15 and by trying all possible mappings
for it in the loop on line 16. Some mappings for edges
can lead to conﬂicting mappings for certain conﬁgu-
rations; the FindInconsistency function detects
such mappings.
(cid:2)
QD
(cid:2)
(cid:2)
The recursive calls in FindValidMapping con-
tinue until all transitions are labeled with a symbolic
update function. When this happens (or even earlier)
(cid:2)
QD to all
the loop at line 11 will assign a mapping in D
conﬁgurations that are reachable from (q0,d0). Thus if
the function ever returns on line 14, all transitions from
δ have a mapping in Eδ, and all the conﬁgurations from
(cid:2)
QD have a mapping in D
QD. Since the loop on line
16 tries all possible update functions, we know that if
there is a mapping from transitions to update functions
that leads to a valid mapping of conﬁgurations to values
, the algorithm will ﬁnd it. Otherwise, it will
from D
signal failure by returning (/0, /0).
This algorithm has O(|E||δ|) worst-case complex-
ity and thus is not practical, but it is the starting point
for the more complex algorithm used in our implemen-
tation. One improvement, which cuts down unneces-
sary exploration, is to greedily pick the transitions for
which the number of possible symbolic functions that
can be mapped to without leading to inconsistencies is
minimal. We also perform pre-computation to rule out
symbolic functions that cannot map to given transitions
because of mismatches in the number of input values
mapped to an output value. These optimizations are
196
sound; neither of them can cause the algorithm to miss
an existing solution.
4.3. Combining XFAs
For combining XFAs recognizing individual signa-
tures into a single XFA that recognizes an entire signa-
ture set we extend the algorithm for combining DFAs
with provisions for manipulating the scratch memo-
ries and the associated operations. The example from
Figure 2 illustrates these extensions. The scratch mem-
ory of the combined XFA holds the scratch memories
of the two input XFAs side by side. For each state, the
acceptance condition combines the acceptance condi-
tions of the two states it corresponds to in the two input
XFAs. Similarly, for each transition, the update func-
tion combines the update functions of the corresponding
transitions. Since the combined XFA contains separate
copies of the scratch memories of the input XFAs, the
update functions and update conditions from different
automata never interfere.
There is one exception to this property of
sharing scratch memory objects.
In our
the form
set
there are 338 signatures of
not
test
.*]*classid=11cf-9377
that differ only in the hexadecimal class identiﬁer
following the classid string (signature simpliﬁed
for presentation purposes). The XFA corresponding
to such a signature resembles those in Figure 2. A bit
is set when ’ is seen. The XFA accepts after seeing
classid=11cf-9377 if the bit is set. The bits for
all 338 XFAs corresponding to such signatures encode
the same information (whether the input processed so
far contains a ’) and
can actually share a single bit without interference. We
have deﬁned a heuristic that determines when bits in
XFAs such as these and others can safely be shared,
and in such cases this allows us to reduce the amount
of needed scratch memory. We also use this heuristic
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:01 UTC from IEEE Xplore.  Restrictions apply. 
1
2
3
4
5
6
7
8
9
10
11
12