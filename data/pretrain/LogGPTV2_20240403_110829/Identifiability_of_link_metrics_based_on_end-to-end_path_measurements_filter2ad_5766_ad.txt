explore the possibility of identifying Wvw in these two cases
by (9), i.e., to investigate whether vw in Fig. 7(b) and 7(c)
can be characterized as a shortcut.
The third step is to show that any link of Case B-1 or
B-2 is indeed a shortcut. We prove this by showing that
for any Case B link, we can ﬁnd a detour path connecting
its end-points such that all the links in this detour path are
cross-links, and thus can be identiﬁed by (7). To this end,
we show the following lemma.
Lemma 5.2. Let m∗
1, m∗
2 ∈ {m1, m2} with m∗
1 6= m∗
2. If G
satisﬁes Conditions 1(cid:13) and 2(cid:13), then
(a) for any non-separating cycle in G, there is at most one
Case B link in this non-separating cycle;
(b) for any Case B link vw in the interior graph of G, there
exists a non-separating cycle Fvw with vw ∈ L(Fvw) and
m1, m2 /∈ V (Fvw). For this non-separating cycle Fvw,
there exist disjoint simple paths P(m∗
2, w),
each intersecting with Fvw only at the end-point, i.e.,
1, v) and P(m∗
V(cid:0)P(m∗
{w}.
1, v) ∩ Fvw(cid:1) = {v} and V(cid:0)P(m∗
2, w) ∩ Fvw(cid:1) =
Proof. See [26].
Lemma 5.2-(b) implies that a Case B link y must reside on
a non-separating cycle F within the interior graph. Mean-
while, Lemma 5.2-(a) implies that all the other links on cycle
F are cross-links, as there is at most one Case B link on each
non-separating cycle. Furthermore, we show in Lemma 5.2-
(b) that there exist disjoint simple paths P1 and P2 con-
necting the end-points of link y to diﬀerent monitors, each
sharing only one common node with F at the end-points of
link y. Together, these allow us to construct two measure-
ment paths PA and PB as in (8), where P3 = F − y consists
of only cross-links whose metrics are known from (7). Thus,
a Case B link y is a shortcut and can be identiﬁed by (9).
Therefore, under Conditions 1(cid:13) and 2(cid:13), every interior link
is identiﬁable. (cid:3)
As an example, Fig. 6 displays a network satisfying Condi-
tions 1(cid:13) and 2(cid:13), where each interior link can be characterized
as either a cross-link or a shortcut.
6.
IDENTIFIABILITY WITH THREE OR
MORE MONITORS
Since two monitors are not suﬃcient to identify all link
metrics in G, we explore in this section the case where the
network contains three or more monitors.
6.1 Conversion into Two-Monitor Problem
Section 5 suggests that it is easier to identify links that
are one-hop away from the monitors. This observation moti-
vates us to construct an extended graph Gex of G (see Fig. 3),
so that all links of interest (actual links in G) are at least
one-hop away from virtual monitors m′
2. This con-
struction immediately converts the problem of identifying
G using κ monitors to a problem of identifying the interior
graph of Gex using two monitors (again we have no prior
knowledge of link metrics in G or Gex). Therefore, we can
apply Theorem 3.2 to obtain the following result.
1 and m′
Lemma 6.1. Employing κ (κ ≥ 3) monitors to measure
simple paths, the necessary and suﬃcient condition on the
network topology G for identifying all link metrics in G is
that the associated extended graph Gex has an identiﬁable
interior graph, i.e., Gex satisﬁes Conditions 1(cid:13) and 2(cid:13) in
Theorem 3.2.
1 and m′
Proof. Since G is the interior graph of Gex, it suﬃces to
show that the information attainable by the real monitors
m1, . . . , mκ is the same as the information attainable by the
virtual monitors m′
2, if the virtual monitors can
make end-to-end measurements along simple paths in Gex.
First, we show that any measurement between the real
monitors can be obtained from measurements between m′
and m′
2. To this end, consider a path miPmj (i, j ∈ {1, . . . ,
κ}, i 6= j) in G, as shown in Fig. 3(b). Four simple paths
between m′
2 can be constructed:
1 and m′
1
PA = m′
PB = m′
PC = m′
PD = m′
1mim′
2,
1mjm′
2,
1miPmjm′
2,
1mjPmim′
2.
(10)
Viewing miPmj as a “cross-link”, we can compute WmiPmj
from the measurements on these four paths via (7) (replacing
Wy by WmiPmj ).
Moreover, we show that measurements between m′
1 and
m′
2 in Gex do not provide extra information for identifying
links in G compared with measurements attainable by the
real monitors. This is proved by observing that for any
m′
2 (i, j ∈ {1, . . . , κ}, i 6=
j) containing at least one link in G, the information relevant
for identifying links in G can be obtained by measuring its
mi → mj sub-path miPmj, which must also be a simple
path.
2 simple path m′
1miPmjm′
1 → m′
6.2 Sketch of Proof for Theorem 3.3
The special structure of Gex allows us to consolidate the
two Conditions 1(cid:13) and 2(cid:13) into a single condition as stated
in Theorem 3.3, based on the following arguments.
From the structure of Gex (see Fig. 3), we can prove in
Propositions A.3 and A.4 (Appendix) that Gex satisﬁes Con-
ditions 1(cid:13) and 2(cid:13) in Theorem 3.2 if and only if Gex is both 3-
edge-connected and 3-vertex-connected. According to Propo-
sition 1.4.2 in [25], a 3-vertex-connected graph is also 3-edge-
connected. Thus, the necessary and suﬃcient conditions in
Lemma 6.1 can be simpliﬁed to a single condition that Gex
be 3-vertex-connected. (cid:3)
7. TESTING AND ENSURING IDENTIFIA-
BILITY
The conditions we have derived have broader impact than
mere theoretical interest. A major beneﬁt of characteriz-
ing network identiﬁability in terms of network topology is
that we can leverage existing graph-processing algorithms
to eﬃciently test for or ensure the identiﬁability of a given
network. In this section, we present eﬃcient algorithms that
can (i) test for the identiﬁability of a given network with a
given monitor placement, and (ii) place the minimum num-
ber of monitors in a given network to identify all its link
metrics.
7.1 Efﬁcient Identiﬁability Test
The ﬁrst question we want to answer is: Given a net-
work topology G and a placement of κ ≥ 2 monitors, how
do we eﬃciently determine if G is identiﬁable or not? If
κ = 2, then we know from Theorem 3.1 that it is impos-
sible to identify the entire G. Nevertheless, we can test
whether the interior graph is identiﬁable using Conditions 1(cid:13)
and 2(cid:13) in Theorem 3.2, which transform into multiple tests
of edge/vertex connectivity. The problem of determining
whether a given graph is k-edge/vertex-connected has been
well studied. Speciﬁcally, fast algorithms have been pro-
posed to test if a graph is: (i) 2-edge-connected [27], or (ii)
3-vertex-connected [28], both in time O(|V |+|L|) (|V |: num-
ber of nodes; |L|: number of links). Using these algorithms,
we can test for the identiﬁability of the interior graph of G
as follows:
1. For each interior link l, apply the 2-edge-connectivity
test in [27] to G − l. G is unidentiﬁable if the test fails;
2. Apply the 3-vertex-connectivity test in [28] to G +
m1m2. G is unidentiﬁable if the test fails.
The interior graph of G is identiﬁable if all the tests succeed.
The overall complexity is O(|L(G)|(|V (G)| + |L(G)|)).
Similarly, if κ ≥ 3, then we can test for the identiﬁability
of the entire G using the condition in Theorem 3.3:
1. Construct the extended graph Gex as in Fig. 3;
2. Apply the 3-vertex-connectivity test in [28] to Gex. G
is identiﬁable if the test succeeds, and unidentiﬁable
otherwise.
The complexity of this algorithm is O(|V (Gex)| + |L(Gex)|),
which is the same as O(|V (G)| + |L(G)|).
7.2 Optimal Monitor Placement
The next question we want to answer is: Given an arbi-
trary topology G, what is the minimum number of monitors
needed and where should they be placed to identify all link
metrics in G? While one can enumerate all possible place-
ments for κ = 3, 4, . . . monitors and test for identiﬁability
until an identiﬁable placement is found, what we really want
is an eﬃcient algorithm to achieve the same. This requires
a deeper understanding of the structure of an identiﬁable
graph.
We illustrate our idea by an example in Fig. 8(a). We ﬁrst
consider the minimum deployment: Using fewer monitors
monitor
virtual link
G1
b
a
w
r
c
d
e
s
l
v
(a)
q
h
u
f
g
x
G2
b
p
i
j
k
a
w
w
s
q
G4
r
r
o
G3
t
d
e
s
h
l
v
f
c
d
d
j
i
j
k
o
t
b
w
q
g
x
k
p
r
r
d
i
i
d
x
j
d
k
c
j
l
f
f
g
k
p
o
t
a
d
w
w
e
s
h
v
u
s
v
u
(c)
u
(b)
Figure 8: (a) Original graph; (b) biconnected com-
ponents; (c) triconnected components.
certainly renders the network unidentiﬁable. This yields the
following rules:
(i) Dangling node (e.g., h) must be a monitor, as other-
wise its adjacent link cannot be measured using simple
paths;
(ii) A node on a tandem of links (e.g., j) must be a mon-
itor, as otherwise we can only identify the sum of its
adjacent link metrics (Wdj and Wjk) and not the indi-
vidual metrics;
(iii) For a sub-graph with two cut-vertices 8 (e.g., G1) or a
2-vertex cut 9 (e.g., G2), at least one node other than
those cuts must be a monitor, as otherwise even if all
links outside this sub-graph have been identiﬁed, the
vertices in the cuts (w and d for G1, f and i for G2)
are eﬀectively the two “monitors” for this sub-graph,
and Theorem 3.1 states that this sub-graph cannot be
identiﬁed;
(iv) Similarly, for a sub-graph with one cut-vertex (e.g.,
G3), at least two nodes other than the cut-vertex must
be monitors.
Our strategy is to use the above four rules to deploy the
necessary monitors.
If we can prove that these necessary
monitors are also suﬃcient to identify all links, then our
deployment is optimal. To formally present the algorithm,
we introduce the following deﬁnitions.
Definition 5. A k-connected component of G is a max-
imal sub-graph of G that is either (i) k-vertex-connected, or
(ii) a complete graph with up to k vertices. The case of
k = 2 is also called a biconnected component, and k = 3 a
triconnected component.
Intuitively, a biconnected component is a sub-graph con-
nected to the rest of the graph by cut-vertices, and a tri-
connected component (within a biconnected component) is
a sub-graph connected to the rest by 2-vertex cuts. For
instance, Fig. 8(b) shows the biconnected components of
Fig. 8(a), separated by cut-vertices d, j, k, w, s, and r.
Fig. 8(c) shows the triconnected components, separated by
the above cut-vertices and 2-vertex cuts {w, d}, {f, i}, and
8A cut-vertex is a vertex whose removal will disconnect the
graph.
9A 2-vertex cut is a set of two vertices {v1, v2} such that
removing v1 or v2 alone does not disconnect G, but removing
both disconnects G.
Algorithm 1: Minimum Monitor Placement (MMP)
input : Connected graph G
output: A subset of nodes in G as monitors
1 choose all the nodes with degree less than 3 as monitors;
2 partition G into biconnected components B1, B2, . . .;
3 foreach biconnected component Bi with |Bi| ≥ 3 do
4
partition Bi into triconnected components T1, T2, . . .;
foreach triconnected component Tj of Bi with |Tj | ≥ 3
do
5
6
7
8
9
10
11
if 0 < sTj < 3 and sTj + MTj < 3 then
randomly choose 3 − sTj − MTj nodes in Tj that
are neither separation vertices nor monitors as
monitors;
end
end
if 0 < cBi < 3 and cBi + MBi < 3 then
randomly choose 3 − cBi − MBi nodes in Bi that are
neither cut-vertices nor monitors as monitors;
end
12
13 end
14 if the total number of monitors κ < 3 then
15
16 end
randomly choose 3 − κ non-monitor nodes as monitors;
{u, v}. To identify the triconnected components, we process
the graph by adding virtual links as follows: if ∃ a minimal
2-vertex cut10 whose vertices are not neighbors (e.g., {u, v}),
connect them by a virtual link; repeat this on the resulting
graph until no such cut exists.
In the sequel, nodes that
are cut-vertices or part of 2-vertex cuts are called separation
vertices (e.g., w, d, f , i, j, k, s, r, u, and v).
Monitor Placement Algorithm: There exist fast al-
gorithms to partition an arbitrary graph G into biconnected
components [29] and then into triconnected components [28].
Note that the output of [28] is the set of triconnected com-
ponents of G augmented with the virtual links11. Based on
these algorithms, we propose a master algorithm, Minimum
Monitor Placement (MMP), to place the minimum number
of monitors needed to identify G. As shown in Algorithm 1,
MMP ﬁrst applies rules (i) and (ii) to select all the dangling
vertices and vertices on tandems as monitors (line 1), and
then applies rules (iii) and (iv) to select additional moni-
tors in each12 triconnected/biconnected component. For a
component D, let sD denote the number of separation ver-
tices, cD the number of cut-vertices, and MD the number of
(already selected) monitors in D. MMP goes through each
triconnected and then biconnected component that contains
three or more nodes to ensure that: (i) each triconnected
component has at least three nodes that are either separa-
tion vertices or monitors (lines 6–8), and (ii) each bicon-
nected component has at least three nodes that are either
cut-vertices or monitors (lines 10–12). Finally, it selects ad-
ditional monitors as needed to ensure that the total number
of monitors is at least three (lines 14–16).
Optimality:
It is easy to see from rules (i)–(iv) that
MMP only deploys monitors when needed, and thus no al-
gorithm can achieve identiﬁability with fewer monitors; on
the other hand, we show that the monitor placement by
MMP is also suﬃcient, i.e., all link metrics can be iden-
10That is, neither of the vertices are cut-vertices.
11The algorithm in [28] does not require a separate step to
add virtual links; it adds virtual links as needed in the pro-
cess of graph partitioning.