check ($4 = $6 * $1)
subi $3 $3 #1
beg $0 #0 loop
prints "Factorial = "
--- initial product p = 1
--- read i from input
--- for comparison purposes
--- start ofloop
---- p = p *i
---- i = i - 1
--- loop backedge
Figure 3: Factorial program with error detectors
The execution is forked once again at the second
detector into true and false cases. The true case con(cid:173)
tinues execution and propagates the error in the pro(cid:173)
gram as before. The false case of the check throws an
exception, and the detector fails, thereby detecting the
error. The constraints for thefalse case, namely, ($6 x
$3 2:: $6 x $1) are also remembered. Based on this
constraint, as well as the earlier constraint ($3 > $4),
the constraint-solver deduces that the second detector
will detect the error if and only if the fault in register
$3 causes it to have a value greater than the initial
value read from the input (stored in register $1).
The programmer can then formulate a detector to
handle the case when the error causes the value of
register $3 to be less than the original value in register
$1. Therefore, the errors that evade detection are made
explicit to the programmer (or to an automated me(cid:173)
chanism) who can then make an informed decision
about handling the errors.
The error considered above is only one of many
possible errors that may evade detection in the pro(cid:173)
gram. These errors are too numerous for manual in(cid:173)
spection and analysis as done in this example. Moreo(cid:173)
ver, not all errors that evade detection lead to program
failure (due to logical masking and dead values).
The main advantage of SymPLFIED is that it can
quickly isolate the errors that would evade detection
and cause program failure from the set of all possible
transient errors that can occur in the program. It can
also show an execution trace of how the error evaded
detection and led to the failure. This is important in
order to understand the weaknesses in existing detec(cid:173)
tion mechanisms and improve them.
5 Implementation
We have implemented the SymPLFIED frame(cid:173)
work using the Maude rewriting logic system. Rewrit-
ing logic is a general-purpose logical framework for
specification of programming languages and systems
[12]. Maude is a high-performance reflective lan(cid:173)
guage and system that supports rewriting logic specifi(cid:173)
cation and programming for a wide range of applica(cid:173)
tions [12]. Maude allows a wide variety of formal
analysis techniques to be applied on the same specifi(cid:173)
cation.
5.1 Machine Model
This section describes the machine model for ex(cid:173)
ecuting assembly language programs using Maude.
Equations and Rules: As far as possible, we
have used equations instead of rewrite rules for speci(cid:173)
fying the models. The main advantage of using equa(cid:173)
tions is that Maude performs rewriting using equations
much faster than using rewrite rules. However, equa(cid:173)
tions must be deterministic and cannot accommodate
ambiguity. The machine model is completely determi(cid:173)
nistic because, for a given instruction sequence, the
final state can be uniquely determined in the absence
the machine model can be
of errors. Therefore,
represented entirely using equations. However,
the
error model is non-deterministic and requires rules.
Assumptions: The following assumptions are
made by the machine model:
•
An attempt to fetch an instruction from an invalid
code address results in an "illegal instruction" ex(cid:173)
ception being thrown. The set of valid addresses
is defined at program load time by the loader.
•
•
• Memory locations are defined when they are first
written to (by store instructions). An attempt to
read from an undefined memory location results
in an "illegal address" exception being thrown. It
is assumed that the program loader initializes all
locations prior to their first use in the program.
Program instructions are assumed to be immuta(cid:173)
ble and hence cannot be overwritten during ex(cid:173)
ecution or affected by data errors.
Arithmetic operations are supported only on in(cid:173)
tegers and not on floating point numbers.
Machine State: The central abstraction used in
the machine model is the notion of machine state,
which consists of the mutable components of the ma(cid:173)
chine's structures. The machine state is carried from
instruction to instruction in program execution order,
with each instruction optionally looking up and/or
updating the state's contents. For example, PC(pc)
represents a
regs(R) mem(M)
machine state in which the current program counter is
pc, register file is R, memory is M, and input and out(cid:173)
put streams are in and out, respectively.
input(In) output(out)
Instruction Execution: We consider example in(cid:173)
structions from two different instruction classes and
illustrate the Maude equations used to model them.
1-4244-2398-9/08/$20.00 ©2008 IEEE
477
DSN 2008: Pattabiraman et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
These equations use the fetch primitive to retrieve in(cid:173)
structions from memory, as well as the standard loo(cid:173)
kup and update operations of registers and memory.
These details are skipped due to space constraints.
1.
Arithmetic Instruction: Consider the execu(cid:173)
tion of the addi instruction, which adds the value 1 v to
the register given by rs and stores the result in register
rd. In the equation given below, C represents the code,
which is assumed to be immutable and hence is shown
to be unchanged by the instruction execution. The
 operator represents the new machine state ob(cid:173)
tained by executing an instruction (the first argument)
on a machine state (the second argument).
eq (C,  } = (C,  } .
The elements of the machine state in the above
equations are composable and hence can be matched
with a generic symbol S representing the rest of the
state. This allows new machine-state elements to be
added without modifying existing equations.
2.
Branch Instructions: Consider the example
of the beq rs, v, I instruction, which branches to the
code label I if and only if the register rs contains the
constant value v. The equation for beq is similar to the
equation for the addi operation except that it uses the
in-built if-then-else operator of Maude.
eq (C,  =
ifisEqual(R[rs], v)
then (C, } else (C, }fi .
Note the use of the isEqual primitive rather than a
direct == to compare the values of the register rs and
the constant value v. This is because the register rs
may contain the symbolic constant err and hence
needs to be resolved according to the error model.
Similarly, memory instructions, input/output op(cid:173)
erations, and special
instructions such as halt and
throw are modeled by the framework. The details are
skipped due to space constraints, but may be found in
the technical report version of the paper [14].
5.2 Error Model
The overall approach to error injection and propa(cid:173)
gation was discussed in Section 3.2. In this section we
discuss the implementation of the approach using re(cid:173)
writing logic in Maude. The implementation of the
error model is divided into the following sub-models.
is responsible for
Error Injection Sub-Model: The error-injection
sub-model
introducing symbolic
errors into the program during its execution. The injec(cid:173)
tor can be used to introduce the err symbol into regis(cid:173)
ters, memory locations, or the program counter when
the program reaches a specific location in the code.
This is implemented by adding a breakpoint mechan(cid:173)
ism to the machine model. The choice of the register
or memory location to inject
into is made non-
1 The term value is used to refer to both integers and the err symbol.
deterministically by the injection sub-model using
rewrite rules (not shown due to space reasons).
Error Propagation Sub-Model: Once an error
has been injected, it is allowed to propagate through
the equations for executing the program in the ma(cid:173)
chine model. The rules for error propagation are de(cid:173)
scribed independently of the machine model using
equations as follows:
eq err + err = err.
eq err - err = err.
eq err + 1 = err.
eq err - 1 = err.
eq 1 + err = err.
eq 1- err = err.
eq err *1 = if(1==0) then 0 else errfi .
eq 1 *err = if(1==0) then 0 else errfi .
eq err /1= if(1==0) then throw "div--zero" else errfi .
eq 1/ err = ifisEqual(err, 0) then throw "div- zero" else errfi
eq err *err = ifisEqual(err, 0) then 0 else errfi .
eq err / err = ifisEqual(err, 0) then throw "div.. " else errfi
In the equation above,
I represents an integer.
Note that any arithmetic operation involving err also
evaluates to err (unless it is multiplied by 0). Note also
how the divide-by-zero case is handled in the equation
for the divide operation.
Comparison Handling Sub-Model: The rules
for comparisons involving one or more err values are
expressed
non(cid:173)
deterministic in nature. For example, the rewrite rules
for the isEqual operator are as follows:
rewrite-rules,
as
as
they
are
rl isEqual(L err) => true. rl isEqual(L err) => false.
rl isEqual(err, err) => true. rl isEqual(err, err) => false.
The comparison operators involving err operands
evaluate to either true or false non-deterministically.
This is equivalent to forking the program's execution
into the true and false cases. However, once the execu(cid:173)
tion has been forked, the outcome of the comparison is
deterministic and subsequent comparisons involving
the same unmodified locations must return the same
outcome (otherwise false positives will result). This
can be accomplished by updating the state (after fork(cid:173)
ing the execution) with the results of the comparison.
This is handled by the constraint solving sub-model.
More details may be found in the technical report [14].
Memory- and Control-Handling Sub-Model:
Memory and control errors are handled using rewrite
rules (because they are non-deterministic) as follows:
Errors in jump or branch targets: The program
either jumps to an arbitrary (but valid) code location or
throws an "illegal instruction" exception.
Errors in pointer values of loads: The program
either retrieves the contents of an arbitrary memory
location or throws an "illegal-address" exception.
Errors in pointer values of stores: The program
either overwrites the contents of an arbitrary memory
location or creates a new value in memory.
5.3 Detector Model
Error detectors are defined as executable checks
in the program that test whether a given memory loca-
1-4244-2398-9/08/$20.00 ©2008 IEEE
478
DSN 2008: Pattabiraman et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:30:25 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
tion or register satisfies an arithmetic or logical ex(cid:173)
pression. For example, a detector can check if the val(cid:173)
ue of register $(5) equals the sum of the values in reg(cid:173)
ister $(3) and memory location (1000) at a given pro(cid:173)
gram counter location. If the values do not match, an
exception is thrown and the program is halted.
In our implementation, each detector is assigned a
unique identifier, and the CHECK instructions encode
the identifier of the detector they want to invoke in
their operand fields. The detectors themselves are
written outside the program, and the same detector can
be invoked at multiple places within the program's
code. We assume that the execution of a detector does
not fail, Le., the detectors themselves are error-free.
A detector is written in the following format:
det (ID, Register Name or Memory Location to Check,
Comparison Operation, Arithmetic Expression)
The arguments of the detector are as follows:
(1) The first argument of the detector is its identifier.
(2) The second argument is the register or memory
location checked by the detector.
(3) The third argument is the comparison operation,
which can be any of==, =/=, >, =.
(4) The final argument is the arithmetic expression
is used to check the detector's register or
that
memory location and is expressed as:
Expr :: = Expr + Expr I Expr - Expr I Expr *
Expr I Expr / Expr I (c) I (Reg Name) I *(memory ad(cid:173)
dress)
For example, the detector introduced above would
be written as: det(4, ($5), == , ($3) + *(1000)).
5.4 Model Checking
Bounded model checking of programs [13] is per(cid:173)
formed using the search command in Maude [12]. The
aim is to expose outcomes of the program caused by
errors. The outcome is a user-defined function on the
machine state described in Section 5.1 and must be
specified as part of the search command. For exam(cid:173)
ple, the following search command obtains the set of
all executions of the program that will print a value of
err under all single errors in registers (one error per
execution).
search regErrors( start(program, first, detectors) ) =>!
(S:MachineState) such that ( output(S) contains err) .
The search command systematically explores the
search space in a breadth-first manner starting from
the initial state and obtaining all final states that satisfy
the user-defined predicate, which can be any formula
in first-order logic. The programmer can query how
specific final states were obtained or print out
the
search graph, which will contain the entire set of states
that have been explored by the model checker. This
can help the programmer understand how the injected
error(s) lead to the outcome(s) printed by the search.
Termination: To ensure that the model checking
terminates, the number of instructions that is allowed
to be executed by the program must be bounded. This
bound is referred to as the timeout and must be con(cid:173)
servatively chosen to encompass the number of in(cid:173)
structions executed by the program during all possible
correct executions (in the absence of errors). After the
specified number of instructions is exceeded, a ''timed
out" exception is thrown and the program is halted (we
assume a watchdog mechanism is present).
6 Case Study
We have implemented SymPLFIED using Maude
version 2.1. Our implementation consists of about
2000 lines of uncommented Maude code split into 35
modules. It has 54 rewrite rules and 384 equations.
This
section reports our experience in using
SymPLFIED on the teas application [15], which is
widely used as an advisory tool in air traffic control to
ensure minimum vertical separation between two air(cid:173)
crafts (and hence avoid collisions). Other studies have
extensively verified the safety of the teas application
from software defects (bugs) [16], but to the best of
our knowledge, ours is the first study to verify teas in
the presence of hardware transient errors.