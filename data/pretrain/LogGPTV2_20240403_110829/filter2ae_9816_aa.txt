**作者：Spoock**  
**来源：**
### 说明
估计平时大部分人都是通过`netstat`来查看网络状态，但是事实是`netstat`已经逐渐被其他的命令替代，很多新的Linux发行版本中很多都不支持了`netstat`。以`ubuntu
18.04`为例来进行说明：
    ~ netstat 
    zsh: command not found: netstat
按照[difference between netstat and ss in
linux?](https://stackoverflow.com/questions/11763376/difference-between-netstat-and-ss-in-linux)这篇文章的说法,
> NOTE This program is obsolete. Replacement for netstat is ss. Replacement
> for netstat -r is ip route. Replacement for netstat -i is ip -s link.
> Replacement for netstat -g is ip maddr.
中文含义就是:`netstat`已经过时了，`netstat`的部分命令已经被`ip`这个命令取代了，当然还有更为强大的`ss`。
`ss`命令用来显示处于活动状态的套接字信息。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比`netstat`更快速更高效。`netstat`的原理显示网络的原理仅仅只是解析`/proc/net/tcp`,所以如果服务器的socket连接数量变得非常大，那么通过`netstat`执行速度是非常慢。而`ss`采用的是通过`tcp_diag`的方式来获取网络信息，`tcp_diag`通过netlink的方式从内核拿到网络信息，这也是`ss`更高效更全面的原因。
下图就展示了`ss`和`nestat`在监控上面的区别。
[
`ss`是获取的`socket`的信息，而`netstat`是通过解析`/proc/net/`下面的文件来获取信息包括`Sockets`,`TCP/UDP`，`IP`，`Ethernet`信息。
`netstat`和`ss`的效率的对比，找同一台机器执行:
    time ss
    ........
    real    0m0.016s
    user    0m0.001s
    sys     0m0.001s
    --------------------------------    time netstat
    real    0m0.198s
    user    0m0.009s
    sys     0m0.011s
`ss`明显比`netstat`更加高效.
### netstat简介
`netstat`是在`net-tools`工具包下面的一个工具集，[net-tools](https://github.com/ecki/net-tools)提供了一份`net-tools`的源码，我们通过`net-tools`来看看`netstat`的实现原理。
#### netstat源代码调试
下载`net-tools`之后，导入到`Clion`中，创建`CMakeLists.txt`文件，内容如下：
    cmake_minimum_required(VERSION 3.13)
    project(test C)
    set(BUILD_DIR .)
    #add_executable()
    add_custom_target(netstat command -c ${BUILD_DIR})
修改根目录下的`Makefile`中的59行的编译配置为：
    CFLAGS ?= -O0 -g3
[
按照如上图设置自己的编译选项
以上就是搭建`netstat`的源代码调试过程。
#### tcp show
在netstat不需要任何参数的情况，程序首先会运行到2317行的`tcp_info()`
    #if HAVE_AFINET
        if (!flag_arg || flag_tcp) {
            i = tcp_info();
            if (i)
            return (i);
        }
        if (!flag_arg || flag_sctp) {
            i = sctp_info();
            if (i)
            return (i);
        }
    .........
跟踪进入到`tcp_info()`:
    static int tcp_info(void)
    {
        INFO_GUTS6(_PATH_PROCNET_TCP, _PATH_PROCNET_TCP6, "AF INET (tcp)",
               tcp_do_one, "tcp", "tcp6");
    }
参数的情况如下：
  * _PATH_PROCNET_TCP，在`lib/pathnames.h`中定义，是`#define _PATH_PROCNET_TCP "/proc/net/tcp"`
  * _PATH_PROCNET_TCP6, 在`lib/pathnames.h`中定义, 是`#define _PATH_PROCNET_TCP6 "/proc/net/tcp6"`
  * `tcp_do_one`,函数指针，位于1100行，部分代码如下：
    static void tcp_do_one(int lnr, const char *line, const char *prot)
    {
    unsigned long rxq, txq, time_len, retr, inode;
    int num, local_port, rem_port, d, state, uid, timer_run, timeout;
    char rem_addr[128], local_addr[128], timers[64];
    const struct aftype *ap;
    struct sockaddr_storage localsas, remsas;
    struct sockaddr_in *localaddr = (struct sockaddr_in *)&localsas;
    struct sockaddr_in *remaddr = (struct sockaddr_in *)&remsas;
    ......
`tcp_do_one()`就是用来解析`/proc/net/tcp`和`/proc/net/tcp6`每一行的含义的，关于`/proc/net/tcp`的每一行的含义可以参考之前写过的[osquery源码解读之分析process_open_socket](https://blog.spoock.com/2018/12/06/osquery-source-analysis-process-open-socket/)中的扩展章节。
#### INFO_GUTS6
    #define INFO_GUTS6(file,file6,name,proc,prot4,prot6)    \
     char buffer[8192];                 \
     int rc = 0;                        \
     int lnr = 0;                       \
     if (!flag_arg || flag_inet) {              \
        INFO_GUTS1(file,name,proc,prot4)            \
     }                          \
     if (!flag_arg || flag_inet6) {             \
        INFO_GUTS2(file6,proc,prot6)            \
     }                          \
     INFO_GUTS3
`INFO_GUTS6`采用了`#define`的方式进行定义，最终根据是`flag_inet`(IPv4)或者`flag_inet6`(IPv6)的选项分别调用不同的函数，我们以`INFO_GUTS1(file,name,proc,prot4)`进一步分析。
#### INFO_GUTS1
    #define INFO_GUTS1(file,name,proc,prot)         \
      procinfo = proc_fopen((file));            \
      if (procinfo == NULL) {               \
        if (errno != ENOENT && errno != EACCES) {       \
          perror((file));                   \
          return -1;                    \
        }                           \
        if (!flag_noprot && (flag_arg || flag_ver))     \
          ESYSNOT("netstat", (name));           \
        if (!flag_noprot && flag_arg)           \
          rc = 1;                       \
      } else {                      \
        do {                        \
          if (fgets(buffer, sizeof(buffer), procinfo))  \
            (proc)(lnr++, buffer,prot);         \
        } while (!feof(procinfo));              \
        fclose(procinfo);                   \
      }
  1. `rocinfo = proc_fopen((file))` 获取`/proc/net/tcp`的文件句柄
  2. `fgets(buffer, sizeof(buffer), procinfo)` 解析文件内容并将每一行的内容存储在buffer中
  3. `(proc)(lnr++, buffer,prot)`，利用`(proc)`函数解析buffer。`(proc)`就是前面说明的`tcp_do_one()`函数
#### tcp_do_one
以`" 14: 020110AC:B498 CF0DE1B9:4362 06 00000000:00000000 03:000001B2 00000000
0 0 0 3 0000000000000000`这一行为例来说明`tcp_do_one()`函数的执行过程。
[
由于分析是`Ipv4`，所以会跳过`#if HAVE_AFINET6`这段代码。之后执行：
    num = sscanf(line,
        "%d: %64[0-9A-Fa-f]:%X %64[0-9A-Fa-f]:%X %X %lX:%lX %X:%lX %lX %d %d %lu %*s\n",
             &d, local_addr, &local_port, rem_addr, &rem_port, &state,
             &txq, &rxq, &timer_run, &time_len, &retr, &uid, &timeout, &inode);
    if (num sin_addr.s_addr);
    sscanf(rem_addr, "%X", &remaddr->sin_addr.s_addr);
    localsas.ss_family = AF_INET;
    remsas.ss_family = AF_INET;
将`local_addr`使用`sscanf(,"%X")`得到对应的十六进制，保存到`&localaddr->sin_addr.s_addr`(即`in_addr`结构体中的`s_addr`)中,同理`&remaddr->sin_addr.s_addr`。运行结果如下所示:
[
#### addr_do_one
    addr_do_one(local_addr, sizeof(local_addr), 22, ap, &localsas, local_port, "tcp");
    addr_do_one(rem_addr, sizeof(rem_addr), 22, ap, &remsas, rem_port, "tcp");
程序继续执行，最终会执行到`addr_do_one()`函数，用于解析本地IP地址和端口，以及远程IP地址和端口。
    static void addr_do_one(char *buf, size_t buf_len, size_t short_len, const struct aftype *ap,
                const struct sockaddr_storage *addr,
                int port, const char *proto
    )
    {
        const char *sport, *saddr;
        size_t port_len, addr_len;
        saddr = ap->sprint(addr, flag_not & FLAG_NUM_HOST);
        sport = get_sname(htons(port), proto, flag_not & FLAG_NUM_PORT);
        addr_len = strlen(saddr);
        port_len = strlen(sport);
        if (!flag_wide && (addr_len + port_len > short_len)) {
            /* Assume port name is short */
            port_len = netmin(port_len, short_len - 4);
            addr_len = short_len - port_len;
            strncpy(buf, saddr, addr_len);
            buf[addr_len] = '\0';
            strcat(buf, ":");
            strncat(buf, sport, port_len);
        } else
              snprintf(buf, buf_len, "%s:%s", saddr, sport);
    }
  1. `saddr = ap->sprint(addr, flag_not & FLAG_NUM_HOST);` 这个表示是否需要将`addr`转换为域名的形式。由于`addr`值是`127.0.0.1`，转换之后得到的就是`localhost`，其中`FLAG_NUM_HOST`的就等价于`--numeric-hosts`的选项。
  2. `sport = get_sname(htons(port), proto, flag_not & FLAG_NUM_PORT);`,`port`无法无法转换,其中的`FLAG_NUM_PORT`就等价于`--numeric-ports`这个选项。
  3. `!flag_wide && (addr_len + port_len > short_len` 这个代码的含义是判断是否需要对`IP`和`PORT`进行截断。其中`flag_wide`的等同于`-W, --wide don't truncate IP addresses`。而`short_len`长度是22.
  4. `snprintf(buf, buf_len, "%s:%s", saddr, sport);`,将`IP:PORT`赋值给`buf`.
#### output
最终程序执行
    printf("%-4s  %6ld %6ld %-*s %-*s %-11s",
               prot, rxq, txq, (int)netmax(23,strlen(local_addr)), local_addr, (int)netmax(23,strlen(rem_addr)), rem_addr, _(tcp_state[state]));
按照制定的格式解析，输出结果
#### finish_this_one
最终程序会执行`finish_this_one(uid,inode,timers);`.
    static void finish_this_one(int uid, unsigned long inode, const char *timers)
    {
        struct passwd *pw;
        if (flag_exp > 1) {
        if (!(flag_not & FLAG_NUM_USER) && ((pw = getpwuid(uid)) != NULL))
            printf(" %-10s ", pw->pw_name);
        else
            printf(" %-10d ", uid);
        printf("%-10lu",inode);
        }
        if (flag_prg)
        printf(" %-" PROGNAME_WIDTHs "s",prg_cache_get(inode));
        if (flag_selinux)
        printf(" %-" SELINUX_WIDTHs "s",prg_cache_get_con(inode));
        if (flag_opt)
        printf(" %s", timers);