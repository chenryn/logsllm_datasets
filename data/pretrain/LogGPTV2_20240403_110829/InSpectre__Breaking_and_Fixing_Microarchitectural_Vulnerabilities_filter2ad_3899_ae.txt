later in this section.
(Rollback) A microinstruction t can be rolled back when it is found
to transitively reference a value that was wrongly speculated. Œis
is determined by comparing t’s dependencies at execution time
(δ (t )) with the current storage assignment (s). In case of a discrep-
ancy, if t is not a program counter store, the assignment to t can
simply be undone, leaving speculated microinstructions t ′ that ref-
erence t to be rolled back later, if necessary.
(Rbk)
(I , s, C, F) /t (I , δ (t ), C, F)
t < P
(I , s, C, F , δ , P) −→→→ (I , s \ {t }, C, F , δ \ {t }, P)
t < F
For example, in state h7 the program counter update t6 can be
rolled back because s(t2) = 1 , 0 = δ (t6)(t2). Œe transition moves
the microinstruction t6 back to the decoded state (i.e., the storage
and snapshot h8 are undeﬁned for t6) and removes every microin-
struction that have been decoded by t6 (i.e., t ′
1 and t ′
2).
Notice that rollbacks can be performed out of order and that
loads can be retired even in case of mispredictions if their depen-
dencies have been enforced. Œis permits to model advanced re-
covery methods used by modern processors, including concurrent
and partial recovery in case of multiple mispredictions.
Speculation of load/store dependencies Since the predicted val-
ues of internal operations (cf. rule Prd) can aﬀect conditions and
targets of program counter stores, the speculative semantics sup-
ports speculation of control ﬂow, as well as speculative execution
of cross-dependencies resulting from prediction of load/store’s ad-
dresses. We illustrate these features with an example (Figure 3),
which depicts one possible execution of the program in Example 3.
Consider the state h0 a‰er the CPU has executed and retired
microinstructions t11, t12, t21, t22, and t41, thus resolving the ﬁrst
two stores and the load’s address. In state h0 the CPU can predict
the address (i.e., the value of t31) of the third store as 0 and modify
the state as in h1 (rule Prd).
Œis prediction enables speculative execution of the load t42 in
state h1: the active store’s bounded names bn(str-act(σ1, t42)) con-
sist of the singleton set {t12}, since s1(t21) = s1(t31) = 0, while
s1(t41) = 1. Hence, we can apply rule Exe to execute t42, thus
updating the storage with t42 7→ 1, and recording the snapshot
{t11 7→ 1, t21 7→ 0, t31 7→ 0, t41 7→ 1, t12 7→ 1} for t42. Concretely,
t42’s dependencies in state h1 consists of the local dependencies
(i.e., the load’s address t41), and the cross dependencies containing
t12 (i.e., active store it loads the value from), as well as the potential
sources of t42, that is, the addresses of all stores between the active
store t12 and the load t42, namely t11, t21 and t31.
At this point, load t42 cannot be retired by rule Ret in state h2
since its dependencies, e.g., t31, are yet to be retired. However, we
can execute t31 by applying rule Pexe. Œe execution updates the
state by removing t31 from the prediction set and storing its correct
value, as well as extending the snapshot with t31 7→ ∅, as depicted
in state h3.
Œe execution of t31 enables the premises of rule Rbk to capture
that the dependency misprediction led to misspeculation of the ad-
dress of the load t42. Speciﬁcally, the set asn at the time of t42’s
execution bn(str-act((I3, δ3(t42), C3, F3), t41)) = {t12} diﬀers from
the active store set bn(str-act(σ3, t41))) = {t32} in the current state.
9
1
0
t11
t21
t31
t41
1
t12
t22
t32
t42
h0
1
0
1
1
1
0
1
1
h4
h′
4
1
2
1
2
1
2
1
Prd, t31
Rbk, t42
Ret, t42
1
2
1
2
1
1
2
1
1
0
0
1
1
0
1
1
1
0
5
1
h1
1
0
0
1
h3
1
0
0
1
h′
3
Exe, t42
1
0
0
1
1
0
0
1
1
2
1
1
Pexe, t31
h2
1
1
Figure 3: Speculation of load/store dependencies
Œerefore, we roll back the execution removing the mappings for
t42 from the storage and the snapshot as in h4.
Finally, we remark that the speculative execution of loads is
rolled back only if a misprediction causes a violation of load/store
dependencies. For instance, if the value of t31 was 5 instead of 1, as
depicted in h′
3, the misprediction of t31’s value as 0 in h1 does not
enable a rollback of the load. Œis is because the actual value of t31
does not change the set of active stores. In fact, the set of active
stores at the time of t42’s execution bn(str-act((I ′
{t12} is the same as the active store’s set bn(str-act(σ ′
{t12} in the current state.
3(t42), C ′
3, t41))) =
3, δ ′
3, F ′
3), t41)) =
6 IN-ORDER SEMANTICS
We deﬁne the in-order (i.e., sequential) semantics by restricting the
scheduling of the OoO semantics and enforcing the execution of
microinstructions in program order.
A microinstruction ι = t ← c?o is completed in state σ (wriŠen
C(σ , ι)) if one of the following conditions hold:
• Œe instruction’s guard evaluates to false in σ , i.e. ¬[c](σ ).
• Œe instruction has been executed and is not a memory
or a program counter store, i.e., o , st M ta tv ∧ o ,
st P C tv ∧ σ (t )↓.
• Œe instruction is a commiŠed memory store or a fetched
and decoded program counter store, i.e., t ∈ C ∪ F
Œe in-order transition rule allows an evaluation step to proceed
only if program-order preceding microinstructions have been com-
pleted.
l
−→→ σ ′
σ
step-param(σ , σ ′) = (α , t )
∀ι ∈ σ if bn(ι) < t then C(σ , ι)
l
−→ σ ′
σ
10
It is easy to show that the sequential model is deterministic. In
fact, the OoO model allows each transition to modify one single
name t, while the precondition of the in-order rule forces all previ-
ous instructions to be completed, therefore only one transition at
a time is enabled.
Deﬁnition 6.1. Let σ1 :: · · · :: σn be the sequence of states of
execution π , then commits(π , a) is the list of memory commits at
address a in π , and is empty if n < 2; v :: commits(σ2 :: · · · :: σn , a)
if step-param(σ1, σ2) = (Cmt(a, v), t ); and commits(σ2 :: · · · :: σn , a)
otherwise.
We say that two models are memory consistent if writes to the
same memory location are seen in the same order.
Deﬁnition 6.2. Œe transition systems →1 and →2 are memory
consistent if for any program and initial state σ0, for all executions
π = σ0 →∗
1 σ , there exists π ′ = σ0 →∗
2 σ ′ such that for all a ∈ M
commits(π , a) is a preﬁx of commits(π ′
, a).
Intuitively, two models that are memory consistent yield the
same sequence of memory updates for each memory address. Œis
ensures that the ﬁnal result of a program is the same in both mod-
els. Notice that since we do not assume any fairness property for
the transition systems then an execution π of →1 may indeﬁnitely
postpone the commits for a given address. For this reason we only
require to ﬁnd an execution such that commits(π , a) is a preﬁx of
commits(π ′
, a). We obtain memory consistency of both the OoO
and the speculative semantics against the in-order semantics.
Theorem 6.3. −→→ and −→ are memory consistent.
Proof. See Appendix A.2.
Theorem 6.4. −→→→ and −→ are memory consistent.
Proof. See Appendix A.3.
✷
(cid:3)
✷
(cid:3)
7 ATTACKS AND COUNTERMEASURES
InSpectre can be used to model and analyze (combinations of) mi-
croarchitectural features underpinning Spectre aŠacks [9, 31, 37],
and, importantly, to discover new vulnerabilities and to reason
about the security of proposed countermeasures. Observe that
these results hold for our generic microarchitectural model, while
speciﬁc CPUs would require instantiating InSpectre to model their
microarchitectural features. We remark that real-world feasibility
of our new vulnerabilities falls outside the scope of this work.
Speciﬁcally, we use the following recipe: We model a speciﬁc
prediction strategy in InSpectre and try to prove conditional non-
interference for arbitrary programs. Failure to complete the secu-
rity proof results in new classes of counterexamples as we report
below.
Concretely, prediction strategies and countermeasures are mod-
eled by constraining the nondeterminism in the microinstruction
scheduler and in the prediction semantics (see rule Prd). Œe pre-
diction function predp : Σ → N ⇀ 2V captures a prediction
strategy p by computing the set of predicted values for a name
t ∈ N and a state σ ∈ Σ. We assume the transition relation sat-
isﬁes the following property: If (σ , δ , P)
, P ∪ {t }) then
t ∈ dom(predp (σ )) and σ ′(t ) ∈ predp (σ )(t ). Œis property ensures
l
−→→→ (σ ′
, δ ′
that the transition relation chooses predicted values from function
predp .
Following the security model in Section 2, we check conditional
noninterference by: (a) using the in-order transition relation −→ as
reference model and speculative (OoO) transition relation −→→→ (−→→)
as target model; (b) providing the security policy ∼ for memory
and registers. To invalidate conditional noninterference it is suf-
ﬁcient to ﬁnd two ∼-indistinguishable states that yield the same
observations in the reference model and diﬀerent observations in
the target model. We use the classiﬁcation by Canella et al. [9] to
refer to existing aŠacks.
7.1 Spectre-PHT
Spectre-PHT [31] exploits the prediction mechanism for the out-
come of conditional branches. Modern CPUs use Paˆern History
Tables (PHT) to record paŠerns of past executions of conditional
branches, i.e., whether the true or the false branch was executed,
and then use it to predict the outcome of that branch. By poisoning
the PHT to execute one direction (say the true branch), an aŠacker
can fool the prediction mechanism to execute the true branch, even
when the actual outcome of the branch is ultimately false. Œe fol-
lowing program (and the corresponding MIL) illustrates informa-
tion leaks via Spectre-PHT:
a1 : r1 = A1.size;
a2 : if (r0 < r1)
t11
t12
t13
l d M A1 .size
st R r1 t11
st P C a2
t21
t23
t22
l d R r0
t21 < t22
l d R r1
t24
t25
t23
st P C a3
¬t23
st P C a4
a3 :
y = A2[A1[r0]];
t31
t32
t35
l d R r0
l d M (A1 + t31)
st P C a4
t33
t34
l d M (A2 + t32)
st R r0 t33
Suppose the security policy labels as public the data in arrays A1
and A2, and in register r0, and that the aŠacker controls the value
of r0. Œis program is secure at the ISA level as it ensures that r0
always lies within the bounds of A1. However, an aŠacker can fool
the prediction mechanism by ﬁrst supplying values of r0 that exe-
cute the true branch, and then a value that exceeds the size of A1.
Œis causes the CPU to perform an out-of-bounds memory access
of sensitive data, which is later used as index for a second memory
access of A2, thus leaving a trace into the cache.