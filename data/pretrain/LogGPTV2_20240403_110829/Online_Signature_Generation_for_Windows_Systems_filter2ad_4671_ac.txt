between locations C1−k1∗|value| through Cn+k2∗|value|.
Note, however, that the CTI step won’t return a sequence
of locations just because a jump address is replicated: in
particular, in the case of /GS or /SafeSEH protections, as
well as heap overﬂows, our CTI step will be able to pinpoint
the candidates since it has accurate information on the
locations of security-sensitive targets.
D. Signature Generation
Our focus in this work is on length-based signatures.
They take the form {Name=name, MAXLEN=l}, where
name is the name of a message ﬁeld, and l speciﬁes the
maximum length of this ﬁeld. Unlike previous approaches
such as COVERS [10], our technique is able to set a
maximum length without having to rely entirely on training
data. However, if there are multiple candidates returned by
the input correlation step — a situation that we have not
encountered in our experiments — then we can select the
one that yields the best signature in terms of the separation
between the lengths of benign (i.e., training) inputs and
malicious input(s).
The value of MAXLEN is determined as follows. If a gap
is present, then the maximum length of ﬁeld name is set as
6In our experiments, we set d to be 0.2, which roughly means that there
can be at most 20% difference between two strings.
the distance between the beginning of u and the beginning
of the gap. A gap usually occurs because some variable that
resides past the end of a vulnerable buffer was modiﬁed.
Thus the beginning of the gap serves as a good indicator of
where the vulnerable buffer ends.
When no gap is present, we treat C (the corruption target)
as an upper bound, and set MAXLEN as the distance between
the beginning of u and C. This makes sense because C
denotes the location of a security-sensitive target that was
corrupted by the attack, and this target should reside past the
end of the buffer. In many cases, including heap metadata
corruption and /GS cookie and /SafeSEH corruption, the CTI
step provides an accurate value for C, and hence there is
a high conﬁdence in MAXLEN. But in some cases, we do
not have sufﬁcient conﬁdence in C, e.g., when the entire
stack is scanned for occurrences of a faulting address, and
this address is repeated many times in consecutive memory
locations L1 through Ln. In such a case, to avoid false
positives, we should use Ln to set the maximum length.
There may be instances where the signature generated as
described in the above paragraph may not be satisfactory. In
particular, the maximum length l computed may be too long
or too short. The former case leads to false negatives, i.e.,
an input that satisﬁes the length constraint still leads to an
exploit. The online nature of our technique enables tuning
of the length to address this problem. In particular, when
false negatives are encountered, we can adjust the maximum
length to be the geometric mean of bmax and l, where bmax
denotes the maximum length of this ﬁeld among benign
inputs. It is possible that this new value of l is still too
long, and needs to be further reﬁned. The use of geometric
mean limits the number of such reﬁnement steps needed to
log(mmax − bmax), where mmax denotes the largest length
of this ﬁeld among malicious inputs.
Alternatively, the maximum length could be too short,
leading to false positives. To reduce their likelihood, our
approach compares the maximum length computed as de-
scribed above with bmax. If bmax > l then MAXLEN is set to
the geometric mean of bmax and mmin, where mmin denotes
the minimum length of this ﬁeld among all malicious inputs.
Clearly, the signatures described above have a simple
structure, and hence may not be able to address complex
vulnerabilities. In particular, vulnerabilities whose exploita-
tion relies on the relationship between multiple message
ﬁelds are not handled. For instance, there is a class of buffer
overﬂows where a vulnerable program reads the value of a
message ﬁeld, and uses it to allocate a buffer, and copies
another message ﬁeld into this buffer [20]. More sophisti-
cated machine learning techniques could potentially address
such vulnerabilities. However, our focus in this paper has
been on post-crash analysis techniques that leverage modern
memory corruption defenses, and showing the feasibility of
using these techniques for light-weight signature generation.
294
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
Field
Vulnerability
name
description
method RA
16-byte stack BO, no /GS
16-byte stack BO with /GS
method RA
16 byte stack BO, 32-byte local array method RA
SEH
32-byte stack BO
SEH
32-byte stack BO, 4-byte local integer
UEF
64-byte Heap BO Freelist[00]
64-byte Heap BO Freelist[1-127]
UEF
SEH
260-byte Heap BO Lookaside list
128-byte Heap BO triggering coalesce
RA
source
source
data
data
data
data
Attack Gap size MAX benign Attack
length
target
1.1K
1.1K
1.1K
1.1K
1.1K
1.1K
1.1K
1.1K
1.1K
(Bytes)
0
0
32
0
4
0
0
0
0
9
9
9
15
15
60
60
256
112
length
Signature
length
48
48
16
36
32
64
64
260
128
Figure 2. Generation of Input Filters for Synthetic Application MEVS.
IV. SYSTEM IMPLEMENTATION
A. User Environment
We assume our system will run on a typical Windows
platform, Windows XP or Vista. Our focus is on applications
such as a web server, FTP server and other network tools
that are popular targets for remote attacks. Our system does
not assume the availability of source code or debug symbols.
B. System infrastructure
We use Detours [8] from Microsoft Research to imple-
ment interceptors for input capture and ﬁltering (currently,
network inputs). Detours is a library for intercepting ar-
bitrary Win32 binary functions on x86 machines. Detours
are inserted at execution time, with the code of the tar-
get function modiﬁed in memory and the original target’s
functionality still available as a general subroutine. We
used Detours to intercept network socket APIs and capture
network input to a program. The input is passed to LSA
through a named pipe. We also intercepted malloc to keep
track of memory blocks in the heap.
For LSA, we used the Windows Debug Engine (WDE)
[12] to implement our analysis techniques. This choice
was motivated by the facts that the same debug engine is
used for both Windows user and kernel level debugging,
and it can support both live debugging and post-mortem
debugging using the same API. WDE also supports remote
debugging so that post-crash analysis can be done at a
remote site instead of local host. WDE is used by popular
Microsoft debuggers such as Windbg, Visual Studio and
other command line debuggers like KD, CDB and NTSD.
V. EVALUATION
Our evaluation made use of synthetic as well as real-
world vulnerabilities. The former were incorporated in a
synthetic vulnerable server MEVS (Memory Error Vul-
nerability Server), which provides a “string processing”
service. A request to the server has three ﬁelds: a method,
which speciﬁes the operation to be performed by the server,
and is one of {“ECHO”, “REVERSE”, “UPPERCASE”,
“LOWERCASE”}; a source, which is a machine name or
an IP address; and data, which provides the operand for the
operation speciﬁed by method. MEVS design is extensible,
allowing new vulnerabilities to be introduced easily. It is
designed in a way that simpliﬁes the use of Metasploit to
attack these vulnerabilities.
The use of synthetic server enabled us to experiment
with many different vulnerabilities and exploit variations,
including: use of working payload vs random data, use of
text string vs binary data, enabling of and disabling of
/GS protection, overwrite of RA (return address) vs SEH
vs Function Pointer, exploits that lead to gaps and those
that lead to no gaps, etc. For heap based buffer overﬂow,
we experimented with neighboring block in four different
locations: Freelist [00], Freelist [1 - 127], Look-aside list
and overﬂow to trigger coalescing of heap blocks.
Figure 2 summarizes our results for MEVS. Signatures
were generated for all exploits of the synthetic vulnera-
bilities. For stack buffer overﬂows, signature precision is
improved when a gap is identiﬁed. For instances, in the
case of 16-byte stack buffer overﬂow, after identifying the
gap, our system generates a signature of length 16, which
corresponds to the buffer boundary. This length is more
precise than the 48-byte length that was generated in the
absence of a gap. Similarly, a gap caused by a local integer
increased the signature precision too. For heap based buffer
overﬂow, our CTI and input correlation steps are very
accurate in determining the maximum length from the length
of the heap block involved in the overﬂow.
Figure 3 summarizes our results for real-world vulnera-
bilities on popular applications such as IIS and FTP. Each
of the vulnerabilities shown in this ﬁgure are described in
more detail below.
The ﬁrst vulnerability we examined was a stack buffer
overﬂow in the w3who ISAPI extension DLL (CVE-2004-
1134). The w3who.dll library is a utility designed to provide
auditing of server conﬁguration remotely through a Web
browser. When a long parameter is passed in as http query
string, a stack buffer overﬂow results. Our working exploit
295
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:11:07 UTC from IEEE Xplore.  Restrictions apply. 
Target
application
IIS5
FreeFTPd 1.08
Quick TFTP Pro 2.1
Steamcast 0.9.75
POP Peeper 3.4.0.0
TalkativeIRC 0.4.4.16
Vulnerability
identiﬁcation
Field
name
20
CVE-2004-1134 QueryString
14
OSVDB-20909
user
4
BugTraq-28459 mode
16
CVE-2008 0550 User-Agent
32
BugTraq-34192
56
BugTraq 34141
Figure 3. Generation of Input Filters for Real World Applications.
From
PRIVMSG
length
Gap size MAX benign Attack
length
8.0K
1.8K
1.3K
1.1K
1.1K
1.0K
(bytes)
0
0
0
0
8
30
Signature
length
248
1002
1004
1005
328
232
targets Windows 2000 and Windows XP (SP2), and uses a
stack overﬂow to overwrite the return address and/or SEH.
Real world vulnerability OSVDB-20909, is a stack buffer
overﬂow in a freeware FreeFTPd version 1.0.8, at its multi-
protocol ﬁle transfer service. The vulnerability is related to
handling the ﬁeld of “user”. The exploit overwrites a stack
buffer in freeFTPd service, and involves return address and
SEH overwrite as well.
Quick Tftp Server Pro version 2.1 has a buffer-overﬂow
vulnerability. Because the application fails to properly
bounds-check user-supplied data for the “mode” ﬁeld, an