# Required Permissions in AOSP 6.0.1

- **ACCESS_FINE_LOCATION** (Dangerous)
- **USE_SIP** (Dangerous)
- **BLUETOOTH** (Normal)
- **WAKE_LOCK** (Normal)
- **GET_PACKAGE_SIZE** (Normal)
- **READ_PHONE_STATE** (Dangerous)
- **CHANGE_NETWORK_STATE** (Normal)
- **ACCESS_NETWORK_STATE** (Normal)

## Vulnerable IPC Interfaces Protected by Service Helper

| Service Name | Service Helper Class | Vulnerable IPC Interface |
|--------------|----------------------|--------------------------|
| Clipboard    | ClipboardManager     | addPrimaryClipChangedListener |
| Accessibility| AccessibilityManager | addClient                 |
| LauncherApps | LauncherApps         | addOnAppsChangedListener  |
| TV Input     | TvInputManager       | registerCallback          |
| Ethernet     | EthernetManager      | addListener               |
| Wi-Fi        | WifiManager          | acquireWifiLock, acquireMulticastLock, addGpsMeasurementsListener, addGpsNavigationMessageListener |

### Example: Wi-Fi Lock Management

When a third-party app calls `WifiManager.acquire()` multiple times, the `WifiManager` checks if the total number of requests exceeds the maximum lock number an app can acquire. If the threshold is exceeded, the `WifiManager` releases the lock immediately. This mechanism, as noted in AOSP comments, is designed to prevent Denial of Service (DoS) attacks.

#### Code-Snippet 1: Protection Code in `WifiManager.java`

```java
/* Maximum number of active locks we allow. This limit was added to prevent apps from creating a ridiculous number of locks and crashing the system by overflowing the global ref table. */
private static final int MAX_ACTIVE_LOCKS = 50;

public void acquire() {
    mService.acquireWifiLock(mBinder, mTag);
    if (mActiveLockCount >= MAX_ACTIVE_LOCKS) {
        mService.releaseWifiLock(mBinder);
        throw new Exception("Exceeded maximum number of wifi locks");
    }
    ...
}
```

#### Code-Snippet 2: Sample Attack Code on Wi-Fi Service

```java
IWifiManager wifiService = IWifiManager.Stub.asInterface(ServiceManager.getService("wifi"));
for (int i = 0; i < 100; i++) {
    try {
        wifiService.acquireWifiLock();
    } catch (Exception e) {
        // Handle exception
    }
}
```

## Implementation Flaws on Per Process Constraint

An alternative defense approach is to limit the request number per process at the system service side. We identified four interfaces with such constraints:

### Example: Toast Enqueue Limit in `NotificationManagerService`

The `NotificationManagerService.enqueueToast()` method limits the number of toasts that can be enqueued by each process, except for system toasts. The first parameter is the caller's package name, and it considers the toast as a system toast if this parameter is set to "android". However, an attacker can bypass this restriction by directly invoking `INotificationManager.enqueueToast()` and passing "android" as the first parameter.

#### Code-Snippet 3: Protection Code in `NotificationManagerService`

```java
if (count >= MAX_PACKAGE_NOTIFICATIONS) {
    Slog.e(TAG, "Package has already posted " + count + " toasts. Not showing more");
    return;
}
mToastQueue.add(record);
...
```

## Vulnerabilities in Apps

In addition to system services, we studied prebuilt core apps for potential JGR DoS vulnerabilities. Among 88 prebuilt core apps, we found three vulnerabilities in two apps: Bluetooth and PicoTts.

### Table IV: Vulnerable Prebuilt Core Apps

| App         | Code Path in AOSP              | Vulnerable IPC Method             |
|-------------|--------------------------------|-----------------------------------|
| PicoTts     | external/svox/pico             | PicoService.setCallback()         |
| Bluetooth   | packages/apps/Bluetooth        | AdapterService.registerCallback() |

### Third-Party Apps

We also extended our study to third-party apps. Comparing to system services, third-party apps have fewer JGR vulnerabilities, as few apps open IPC interfaces to other third-party apps. We downloaded 1000 Android apps from Google Play and found only three vulnerable to JGRE attacks.

### Table V: Vulnerable Third-Party Apps

| App                       | # of Downloads | Vulnerable IPC Interface           |
|---------------------------|----------------|------------------------------------|
| Google Text-to-speech     | 1*910-5*910   | TextToSpeechService.setCallback()  |
| Supernet VPN              | 1*106-5*106   | IOpenVPNAPIService.registerStatusCallback() |
| SnapMovie                 | 1*106-5*106   | IMainService.a()                   |

## JGRE Countermeasure

Based on two key observations on JGR usage, we developed a JGRE countermeasure to effectively defeat all identified JGRE attacks.

### Observation 1: Stable and Small JGR Usage

The number of JGR for each system service used by each benign app is stable and small. We studied the number of system services' JGR by downloading the top popular free apps from Google Play and installing them on a Nexus 5X. Due to the 16 GB internal storage limitation, we installed up to 100 apps simultaneously and measured 300 top popular apps in three rounds using MonkeyRunner. Each app was run for two minutes.

### Figure 4: System Server Process JGR Table Size and Running Processes

- **Left Y Axis**: Size of system server processâ€™s JGR table
- **Right Y Axis**: Number of running processes

This figure illustrates the relationship between the size of the JGR table and the number of running processes over time.