# Pwnhub & Always be with U & Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
正逢pwnhub有比赛，于是做了一下题目，以下是题解
## Happy Tree Friends
###  题目概述
拿到题目
    #!/usr/bin/env python3
    import zlib
    from Crypto.Cipher import AES
    import sys
    import os
    from hashlib import md5
    flag = open("flag.txt").read()
    while True:
        data = input()
        data = "message: %s, flag: %s" % (data, flag)
        compressed = zlib.compress(data.encode())
        if len(compressed) % 16:
            compressed += b"x00" * (16 - len(compressed) % 16)
        encrypted = AES.new(
            md5(flag.encode()).digest(), AES.MODE_CBC, os.urandom(16)
        ).encrypt(compressed)
        print(encrypted.hex())
发现有如下操作  
1.接收输入的值  
2.将输入值和flag放在一起  
3.使用zlib进行压缩  
4.将压缩结果进行padding  
5.使用AES加密  
6.返回加密值
###  漏洞点分析
本想对AES进行攻击，但只可控明文，还要经过zlib压缩，应该不太靠谱，于是往zlib压缩算法上考虑  
查阅资料得知  
zlib应该是参考了Rabin–Karp字符串查找算法，即使用hash方法来确定一个字符串是否在前面出现过。zlib压缩过程中会维护一个比较大的hash值数组，这个数组存储了数据流中每3个字符组成的字符串的hash值，例如4、5、6号字符计算一个hash值，5、6、7号字符也计算一个hash值。  
计算出的hash值作为下标，用来在hash值数组里存储当前三字字符串的下标。当数据流中出现一个新字符时，和之前的两个字符组成一个字符串，计算hash值，看在hash数组里该值的位置是否已经有值，有的话就取出这个值(上一次得到这个hash值的三个字符的下标)，检查是否是有效匹配。可以将查找过程理解为一个查字典的过程，只不过这个字典的条目也是处理过程中逐渐生成、逐渐抛弃的。  
我们编写测试脚本可以发现
    import zlib
    flag = 'flag{148731984637}'
    data1 = 'fla'
    data1 = "message: %s, flag: %s" % (data1, flag)
    data2 = 'dfa'
    data2 = "message: %s, flag: %s" % (data2, flag)
    print len(zlib.compress(data1.encode()))
    print len(zlib.compress(data2.encode()))
由于压缩算法：  
data1字符串中存在2次flag，如果data中有fla存在，则fla存在3次，压缩结果最短  
而data2字符串中除了fla外，任意3种字符串，压缩后都没有data1压缩长度短  
那么我们可以利用这种方式，通过长度进行侧信道，进行flag碰撞爆破，一旦出现flag中的字符，则加密结果明显变短  
同时我们发现
当我们已知前几位后，后面爆破的结果，一旦匹配，则长度始终为最短值，即39  
这样，如果开头是flag{，那么我们即可1位1位匹配，寻找长度为最短值的字符即可
###  题目测试
知道原理后，我们测试题目
    flag
    496f7e60ae407bb1020fc5d97898270cec9c8495cf0ca52d93d3dd74d4ae8cb0732dd45736a79ec8f921cd9cc893c08eb250f54ca27c1bf5e74b69fdcfef7ba4
    flag{
    bfe7b29ddccb4d0b4e538f224247801fdc9d8a518070cc38527152f1237cb6b96f22d30de1d7658bd71513bf1fcc58c950114a5c1c25907087d599fd83ef7a83
    flag{a
    b8c5ce562800a8209ddc31527a76758a50568cd51d256730be9ba0850cdaeae092656f305a92d1ff6bea09ea25745067aa27e16003acdf9e8a599f296d43b4b8d326ac1a9176be5ebc2866f8eb75ab56
    flag{b
    6a2b03216022caa3d7958767a86ef304858e9bf3e7303df3d27deaad6a9ddfa2603ee16dfe9b6b967805a527dd944a508d81b56a1bf32e4ea770b1334b17b6e17b93d95badb2429bf0f1a591c7cd914d
    flag{c
    ebfd61a158e220ce16fd53b31c1e4e67df928a883b187c66c98be71f11cf43df1abe6cfd3365da603c92beaa8e30c23cb94d420c8d392fa6b457369263e35bb0847a116cb31135ea57e6bcf18a083e42
    flag{d
    aef61242ad1cf6f7b645b73c486df9d9a8985eeb38c7c4e16d71c19b9ed05cf6def29c3c236ed126af90f2c467507a3a3b4fecdb4129f257bf567935f43e2b84
发现如果是flag的格式，并与flag一致，则长度为129，其余都为161，于是可以按位爆破，写出脚本如下
    from pwn import *
    import itertools
    import string
    dic = string.digits + 'abcdef-'
    s = remote("40.73.22.31", "2333")
    flag = 'flag{de12473b-'
    while True:
        for i in dic:
            tmp = flag+i
            print tmp
            s.sendline(tmp)
            res = s.recvline()
            print len(res)
            if len(res)==129:
                flag +=i
                print flag
                break
但发现跑完只得到
    flag{de12473b-    
后面字母跑出来，长度都是161，思考一下  
发现这里还有AES，如果我输入的太长，就算原文被压缩，长度变短后，加密后还是会变长  
所以并不能带这么一长串进行攻击，需要几个几个一爆。  
同时发现
flag和de12虽然都在flag{}里出现，但是flag时候明显短  
估计是因为消息如下
    data = "message: %s, flag: %s" % (data, flag)
填充flag后，flag出现了3次，而de12只有2次，所以对zlib来说flag出现3次，压缩的更短，导致AES加密后只有128，即分了8组，而其他时候分了10组  
同时，在原文足够长的时候
    flag{de12473b-    
无论是否压缩，压缩后结果都比较长，经过AES后依旧会分10组  
这时候，我决定找到一个`de1`经过压缩会加密分组会变短，而`de2`经过压缩会加密分组不变的垃圾数据  
(因为flag不太靠谱，出现过3次，不具有普遍意义)  
垃圾数据填充到
    ~!@#$%^&*()_+{}SKYISC(4&^@)#%^de1
    ~!@#$%^&*()_+{}SKYISC(4&^@)#%^de2
发现长度明显不同