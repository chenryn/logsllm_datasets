chrome document.
For evalInSandbox and wrappedJSObject, prob-
lems can only result
if the return values of these
constructs are executed with chrome privileges. For
evalInSandbox this means comparing return values us-
ing == or != from code running with chrome privileges.
For wrappedJSObject, this means making method calls
on returned objects from code running with chrome priv-
ileges.
Such ﬂow patterns may occur
the extensions that use these constructs.
in only a few
of
Ac-
cording to the Mozilla extension review web page,
reviewers have an open-source automatic tool
to
help with reviews (see https://addons.mozilla.org/
4
en-US/firefox/pages/validation), but this tool just
greps for strings that indicate dangerous patterns. Af-
terward, the reviewer must go through the code of each
suspect extension to understand the ﬂows and determine
which constitute vulnerabilities and which are benign.
As this task is difﬁcult, painful, and error-prone, we de-
signed the VEX tool to help extension reviewers vet the
ﬂows in extensions automatically, greatly reducing the
number of extensions that need manual review.
4 Static information ﬂow analysis
We develop a general explicit information ﬂow static
analysis tool VEX for JavaScript that computes ﬂows be-
tween any source and sink, including the ﬂows described
in Section 3.3. While we could develop analysis tech-
niques for a particular source and sink, we prefer a more
general technique that will perform the analysis once,
and from the results, allow us to search for any source-
to-sink ﬂow. This allows VEX to be run in a single pass
over thousands of extensions, rather than using separate
passes for each target pattern.
To support ﬁne-grained information-ﬂow analysis,
VEX tracks the precise dependencies of ﬂows from vari-
ables to objects created in the JavaScript extension, using
a taint-based analysis. Motivated by the fact that every
ﬂow reported needs to be checked manually for attacks,
which can take considerable human effort, we aim for
an analysis that admits as few false positives as possi-
ble (false positives are non-existent ﬂows reported by the
tool).
Statically analyzing JavaScript extensions for ﬂows is
JavaScript extensions have a large
a non-trivial task.
number of objects and functions. In addition to the ob-
jects deﬁned in the program, the extensions can also ac-
cess the browser’s DOM API and the Firefox Extension
API provided by XPCOM components. The objects are
also dynamic, in the sense that new object properties can
be created dynamically at run-time. Functions are ob-
jects in JavaScript, and hence can be created, redeﬁned
dynamically, and passed as parameters. The challenge is
to accurately keep track of such objects, properties, and
the corresponding ﬂows to them.
Our analysis keeps track of an abstract heap (AH) that
is not a priori bounded, and keeps track of the precise
heap nodes and ﬁeld relations and corresponding ﬂows,
but ignores the exact primitive values in the heap (like
integers). However, we bound the number of iterations
in computing the least ﬁxed-point, and hence the abstract
heap gets bounded implicitly.
The abstract heap transformations for any statement
closely mimic a big-step operational semantics for
JavaScript, except that primitive values are forgotten, and
hence conditionals are not evaluated; we refer the reader
to work on operational semantics of JavaScript [27, 18].
Apart from tracking heap structures, the abstract heap
also records explicit-ﬂow dependencies to heap nodes,
and the rules for updating ﬂows naturally depend on the
program’s semantics. Also, as we talk about in more
detail below, there are some aspects of the heap (such
as prototype ﬁelds) that are not currently supported in
our tool. The static analysis itself is ﬂow-sensitive and
context-sensitive, and the context-sensitivity is handled
using classical function-summary based methods.
The above choices, namely the choice of abstract
heaps, and the context-sensitive ﬂow-sensitive analysis,
are design choices we have made, based on our exper-
iments with extensions for over a year, and were moti-
vated to reduce false positives. However, we have not
tried all variants of these choices, and it is possible that
other choices (for example, choosing to bound abstract
heaps by merging objects created at a program site), may
also work well on extensions. However, we do know that
context-sensitivity is important (in several extensions we
manually examined) and further ﬂow-sensitivity seems
important if the tool is extended to consider sanitization
routines as ﬂow-stoppers.
The rest of this section is structured as follows. First
we explain our analysis using abstract heaps for a core
subset of JavaScript, which does not have statements like
eval, associative array accesses, calls to Firefox APIs,
etc. Subsequently, we describe how we handle the as-
pects not covered in the core.
4.1 Analysis of a core subset of JavaScript
Core JavaScript: A core subset of JavaScript is given
in Figure 2; this core reﬂects the aspects of JavaScript de-
scribed above, but omits certain features (such as eval)
which we will describe later.
Abstract Heaps: Our analysis keeps track of a one ab-
stract heap at each program point. This abstract heap
tracks JavaScript objects and functions and the relation-
ships between them in the form of a graph. Each node
in the graph is a heap location generated by the program.
Two different nodes, n1 and n2 are connected by an edge
labeled f, if node n1’s property f may refer to n2. To
keep track of the actual information ﬂows between differ-
ent program variables, we also keep track of all the pro-
gram variables that ﬂow into the nodes in abstract heap.
Let PVar be the set of all the program variables in the
JavaScript program.
More precisely, an abstract heap σ is a tuple (ns, n,d,
fr, dm, tm), where:
• ns is a set of heap locations,
5
EXPRESSIONS ::=
STATEMENTS ::=
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
c
x
x.f
x.prot
eop e
this
{f1 : e1, . . . , fn : en}
function (p1, . . . , pn){S}
f (a1, . . . , an)
new f (a1, . . . , an)
(CONSTANT)
(VARIABLE)
(FIELD ACCESS)
(PROTO ACCESS)
(BINARY OP)
(THIS)
(OBJECT LITERAL)
(FUNCTION DEF)
(FUNCTION CALL)
(NEW)
skip
S1; S2
var x
x := e
x.f := e
if e then S1 else S2
while e do S od
return e
(SKIP)
(SEQ)
(VARIABLE DECL.)
(ASSIGN 1)
(ASSIGN 2)
(CONDITIONAL)
(WHILE)
(RETURN)
Figure 2: Core JavaScript syntax.
• n ∈ (ns ∪ {⊥}) represents the current node, and is
either a node in the heap or the symbol ⊥,
• d ⊆ PVar represents the subset of program vari-
ables that ﬂow in to the current node n,
• fr ⊆ ns × PVar × (ns ∪ {⊥}) encodes the
pointers representing properties (ﬁelds). A triple
(n1, f, n2) ∈ fr means that the property f of the
object n1 may be located at n2.
• dm ⊆ ns × PVar is a relation that denotes a depen-
dency map. A pair (n1, x) ∈ dm denotes that the
program variable x ﬂows into the node n1.
• tm : ns × ns is a “this-map” relation, which is actu-
ally the relation of a function. A pair (n1, n2) ∈ tm
means that the scope of n1 is n2.
Notation: The relation tm will always be a function; we
deﬁne formally the function tm : ns → ns as tm(n) =
n(cid:48), where (n, n(cid:48)) ∈ tm. Let dm : ns → 2PVar be the
function that corresponds to the relation dm, dm(n) =
{x|(n, x) ∈ dm}, i.e. the set of all the program variables
that ﬂow into the node n.
The Analysis: We now describe our analysis for the
core subset of JavaScript. VEX handles functions and
objects by creating a node for every object or func-
tion and their properties. Relationships between various
nodes are accurately generated and tracked in the anal-
ysis. JavaScript uses prototype-based inheritance; how-
ever, our analysis does not track prototypes. Instead, a
6
new property insertion into the prototype ﬁeld of an ob-
ject is treated as if the property is being inserted into the
object itself. We found that this is sufﬁcient in case of
JavaScript extensions as the inheritance chain is not deep
in most cases. VEX keeps track of the accurate scope
information using the this-map.
Our analysis consists of a set of rules for generating
abstract heaps at program points, and is deﬁned by es-
sentially capturing the effect of statements on the abstract
heap. These rules follow a big-step operational seman-
tics adapted to work on the abstracted heap.
The big step operational semantics on abstract heaps
is deﬁned as a relation , (P rog, σ) ⇓ σ(cid:48), where Prog is
an program expression or statement and σ and σ(cid:48) are ab-
stract heaps. Such a relation intuitively means that σ(cid:48) is
the heap obtained from the complete evaluation of Prog
starting from the heap σ. This resulting heap, in every
iteration, will be merged with the current heap after the
program, conservatively taking the union of dependen-
cies.
We now deﬁne this relation for expressions and state-
ments.
Notation: For any abstract heap σ, let σ = (ns σ, nσ,
dσ, fr σ, dm σ, tm σ).
In other words, nσ refers to the
second component of σ, etc. The function fresh() cre-
ates a new heap location. A special node nG repre-
sents the global heap, which consists of the objects like
Object, Array, etc.
Evaluating expressions:
Figure 3 gives the rules for evaluating expressions in the
program.
Rule (CONSTANT) evaluates to a ⊥ node with empty
dependencies. Rule (THIS) extracts the scope of the cur-
rent node. The next ﬁve rules describe the variable and
ﬁeld access expressions.
In case of a variable access, the existence property x
is checked in the current scope (represented by nσ(rule
(VAR))), and returned if it exists. If it is not in the cur-
rent scope, then the global node (rule (GLOBAL VAR))
is checked for property x. If it exists, then it is returned
with dependencies. If the location for a particular vari-
able is found in neither the current scope nor the global
scope, using rule (UNINITIALIZED VAR) we create a
new node nnew and add it to the global scope. Similar
rules apply for ﬁeld accesses in rules (FIELD ACCESS)
and (UNINIT FLD).
For binary operators(rule (BINARY OP)), we return
the union of dependencies of both the expressions. When
an object literal expression((OBJ. LIT.)) is encountered,
a summary is computed by recursively creating heap lo-
cations for each of its properties and then creating the
.
(c, σ) ⇓ (ns σ, ⊥, ∅, fr σ, dm σ, tm σ)
(nσ, x, nx) ∈ fr σ
(CONSTANT)
(this , σ) ⇓ (ns σ, tm σ(nσ), dm σ(tm σ(nσ)), fr σ, dm σ, tm σ)
.
(THIS)
(VAR)
x.(nσ, x, n(cid:48)
(cid:54) ∃n(cid:48)
(nG, x, nx) ∈ fr σ
(x, σ) ⇓ (ns σ, nx, dm σ(nx), fr σ, dm σ, tm σ)
x) ∈ fr σ
(GLOBAL VAR)
(x, σ) ⇓ (ns σ, nx, dm σ(nx), fr σ, dm σ, tm σ)
x.(nG, x, n(cid:48)(cid:48)
x.(nσ, x, n(cid:48)
x) ∈ fr σ
(cid:54) ∃n(cid:48)(cid:48)
(cid:54) ∃n(cid:48)
x) ∈ fr σ nG (cid:54)= nσ
(x, σ) ⇓ (ns σ ∪ {nnew}, nnew , ∅, fr σ ∪ {(nG, x, nnew )}, dm σ, tm σ ∪ {(nnew , nG)})
(UNITIALIZED VAR)
where, nnew = fresh()
(x, σ) ⇓ σ(cid:48)
(nσ(cid:48) , f, nf ) ∈ fr σ(cid:48)
(x.f, σ) ⇓ (ns σ(cid:48) , nf , dσ(cid:48) ∪ dm σ(cid:48) (nf ), fr σ(cid:48) , dm σ(cid:48) , tm σ(cid:48) )
(FIELD ACCESS)
(x, σ) ⇓ σ(cid:48)
(x.prot, σ) ⇓ σ(cid:48)
(PROT ACCESS)
(x.f, σ) ⇓ (ns σ(cid:48) ∪ {nnew}, nnew , dσ(cid:48) , fr σ(cid:48) ∪ {(nσ(cid:48) , f, nnew )}, dm σ(cid:48) , tm σ(cid:48) ∪ {(nnew , nσ(cid:48) )})
(x, σ) ⇓ σ(cid:48)
(cid:54) ∃nf .(nσ(cid:48) , f, nf ) ∈ fr σ(cid:48)
(UNINIT FLD)
where, nnew = fresh()
(e1op e2, σ) ⇓ (ns σ1 ∪ ns σ2 , ⊥, dσ1 ∪ dσ2 , fr σ1
, dm σ1 ∪ dm σ2 , tm σ1 ∪ tm σ2 )
(e1, σ) ⇓ σ1
(e2, σ) ⇓ σ2
∪ fr σ2
(BINARY OP)
(e1, σ) ⇓ σ1
(en, σ) ⇓ σn
({f1 : e1, . . . , fn : en}, σ) ⇓ σ(cid:48)
. . .
(OBJ. LIT.)
where,
(S, σ(cid:48)(cid:48)) ⇓ σ(cid:48)
(function (p1, . . . , pn){S}, σ) ⇓ σ(cid:48)
(FUN-DEF)
where,
(f, σ) ⇓ σ(cid:48)(cid:48)
(nσ(cid:48)(cid:48) , RET, n(cid:48)) ∈ fr σ
(e1, σ) ⇓ σ1
(f (e1, . . . , en), σ) ⇓ (ns σ, ⊥, d(cid:48), fr σ, dm σ, tm σ)
. . .
n(cid:83)
i=1
i=1
ns σi )
dm σi )
nσ(cid:48) = fresh() = nnew
ns σ(cid:48) = ns σ ∪ {nnew} ∪ (
dm σ(cid:48) = dm σ ∪ (
n(cid:83)
ns σ(cid:48)(cid:48) = ns σ ∪ {n 0
new} ∪ (
new = fresh() ∀i ∈ {1, . . . , n}.n pi
n RET
fr σ(cid:48)(cid:48) = fr σ ∪ {(n 0
dm σ(cid:48)(cid:48) = dm σ ∪ ((cid:83)n
new )} ∪ (
new , RET, n RET
i=1{( RET, i), (n pi
new , nσ)} ∪ {(n RET
n(cid:83)
tm σ(cid:48)(cid:48) = tm σ ∪ {(n 0
(en, σ) ⇓ σn
i=1
(FUN-CALL1)
n(cid:83)
i=1
n(cid:83)
dσ(cid:48) =
dσi
fr σ(cid:48) = fr σ ∪ (
n(cid:83)
tm σ(cid:48) = tm σ ∪ (
i=1
(nnew , fi, nσi ))
(nσi , nnew ))