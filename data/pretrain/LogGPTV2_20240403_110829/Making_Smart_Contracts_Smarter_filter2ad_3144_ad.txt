typically pushes certain “special” value onto the stack:
in
particular, the current timestamp, block id, remaining gas,
current balance, and this contract’s own address. Note that
some of these values should be thought of as constants (e.g.
current timestamp, block id), while others are updated in
tandem with the execution of a transaction (e.g. remaining
gas, current balance).
4.2 Recommendations for Better Semantics
We propose improvements to the operational semantics
of Ethereum to ﬁx the security problems discussed in Sec-
tion 3. To deploy these proposals, all clients in the Ethereum
network must upgrade.
4.2.1 Guarded Transactions (for TOD)
Recall that a TOD contract is vulnerable because users are
uncertain about which state the contract will be in when
their transactions is executed. This seems inevitable be-
cause miners can set arbitrary order between transactions
(rule Propose). To eliminate the TOD problem, we need
to guarantee that an invocation of a contract code either
returns the expected output or fails, even given the inherent
non-deterministic order between selected transactions.
TX-stale T ≡ (cid:104)g,•,•,•(cid:105)
T−→ σ
σ
σ (cid:54)(cid:96) g
TX-success
T ≡ (cid:104)g, id, v, l(cid:105)
σ (cid:96) g
σ
(cid:48)
M ← Lookup(σ, id)
← σ[id][bal (cid:55)→ (σ[id][bal] + v)]
(cid:105) ;∗
(cid:48)
(cid:104), σ
(cid:105)
(cid:48)(cid:48)
(cid:104)(cid:104)M, 0, l, (cid:105) · , σ
T−→ σ
σ
(cid:48)(cid:48)
TX-exception
T ≡ (cid:104)g, id, v, l(cid:105)
σ (cid:96) g
σ
(cid:48)
(cid:48)
M ← Lookup(σ, id)
← σ[id][bal (cid:55)→ (σ[id][bal] + v)]
(cid:105) ;∗
T−→ σ
(cid:104)(cid:104)e(cid:105)exc · ,•(cid:105)
(cid:104)(cid:104)M, 0, l, (cid:105) · , σ
σ
Figure 10: New Rules for Transaction Execution.
Guard Condition. Our new rules for transaction execu-
tion are given in Figure 10. A transaction T now addition-
ally speciﬁes a guard condition g; the current state σ needs
to satisfy g for the execution of T to go through. If g is not
satisﬁed, the transaction is simply dropped by the new rule
TX-stale. For transactions which do not provide g, we sim-
ply consider g ≡ true. This solution guarantees that either
the sender gets the expected output or the transaction fails.
The solution is also backward-compatible because we do not
require changes in existing contract code: old transactions
can simply take the default guard condition true.
To illustrate, let us revisit the Puzzle contract in Sec-
tion 3.1. A user who submits a transaction Tu to claim
the reward should specify the condition g ≡ (reward == R),
where R is the current reward stored in the contract. If the
owner’s transaction is executed ﬁrst, g is invalidated and
the user’s transaction Tu will abort, meaning the owner will
not get the solution4. Note that Puzzle is only one example
of a more serious class of contracts serving as decentralized
exchanges or market places (see Section 3.1). With our so-
lution, buyers can easily avoid paying a price much higher
than what they observe when issuing the buy orders.
Note that “guarded transactions” resemble the “compare-
and-swap” (CAS) instruction supported by most modern
processors. CAS is a key standard multithreaded synchro-
nization primitive, and “guarded transactions” equips Ether-
eum with equivalent power.
4.2.2 Deterministic Timestamp
Allowing contracts to access to the block timestamp is
essentially a redundant feature that renders contracts vul-
nerable to manipulation by adversaries. Typically, block
timestamp is used for two purposes:
serving as a deter-
ministic random seed (e.g., in theRun contract) and as a
global timestamp in a distributed network (in [25, 26, 28]).
Using block timestamp as a random seed is not wise since
the entropy is low and the timestamp is easy to manipu-
late. There are ways to obtain better random seeds on the
blockchain [29, 30].
Rather than using the easily-manipulable timestamp, con-
tracts should use the block index—a new block is created ap-
proximately every 12 seconds in Ethereum—to model global
time. The block index always increments (by one), removing
any ﬂexibility for an attacker to bias the output of contract
executions that access the time.
A practical ﬁx is to translate existing notions of times-
tamp into block numbers. The change can be implemented
by returning the block id for the instruction TIMESTAMP and
translating the associated expressions. For example, the
condition timestamp - lastTime > 24 hours can be rewrit-
ten as blockNumber - lastBlock > 7,200. This implementa-
tion requires changes to only the getstate instruction from
Section 4.1.
4.2.3 Better Exception Handling
A straightforward solution is to check the return value
whenever a contract calls another. Currently, the Solid-
ity compiler inserts a code snippet to perform exception
forwarding, except when the call is made via send or call,
which are considered low-level instructions (from Solidity
point of view). This half-way solution still leaves the “atom-
icity property” broken.
A better solution is to automatically propagate the excep-
tion at the level of EVM from callee to caller; this can be
easily implemented but requires all clients to upgrade. We
can additionally provide a mechanism for proper exception
handling, e.g., by having explicit throw and catch EVM in-
structions. If an exception is (implicitly or explicitly) thrown
in the callee and not properly handled, the state of the caller
can be reverted. This approach and has been used in many
popular programming languages including C++, Java and
Python. Note that adding throw and catch instructions
4Owners can read the solution from the transaction data if
it is in plain-text, but solutions to this are well-studied [6,
14, 27].
Figure 11: Overview Architecture of Oyente. Main components
are within the dotted area. Shaded boxes are publicly available.
does not help when the contract owner/writer is malicious
and deliberately plants a bug in the contract.
5. THE Oyente TOOL
Our solutions proposed in the previous Section do require
all clients in the network to up-grade, thus running the risk
of not seeing real deployment. As a pre-deployment mitiga-
tion, we provide a tool called Oyente to help: (1) develop-
ers to write better contracts; and (2) users to avoid invoking
problematic contracts. Importantly, other analyses can also
be implemented as independent plugins, without interfering
with our existing features. E.g., a straightforward exten-
sion of Oyente is to compute more precise estimation of
worst-case gas consumption for contracts.
Our analysis tool is based upon symbolic execution [31].
Symbolic execution 5 represents the values of program vari-
ables as symbolic expressions of the input symbolic values.
Each symbolic path has a path condition which is a formula
over the symbolic inputs built by accumulating constraints
which those inputs must satisfy in order for execution to fol-
low that path. A path is infeasible if its path condition is
unsatisﬁable. Otherwise, the path is feasible.
We choose symbolic execution because it can statically
reason about a program path-by-path. On one hand, this is
superior to dynamic testing, which reasons about a program
input-by-input. For Ethereum, dynamic testing would even
require much more eﬀort to simulate the execution envi-
ronment. As an example, to detect the transaction-ordering
dependence, we must compare the outcomes of the interleav-
ing of diﬀerent execution paths. It is diﬃcult to approach
this with dynamic testing, given the non-determinism and
complexity of the blockchain behaviors.
On the other hand, by reasoning about one path at a
time, symbolic execution can achieve better precision (or
less false positives) compared to traditional approaches us-
ing static taint analysis or general data ﬂow analysis.
In
those approaches, abstract program states are often merged,
admitting states that never happen in a real execution, and
eventually lead to high false positives.
5.1 Design Overview
Figure 11 depicts the architecture overview of Oyente.
It takes two inputs including bytecode of a contract to be
analyzed and the current Ethereum global state. It answers
whether the contract has any security problems (e.g., TOD,
timestamp-dependence, mishandled exceptions), outputting
“problematic” symbolic paths to the users. One by-product
of our tool is the Control Flow Graph (CFG) of the contract
5Symbolic execution can also be viewed as abstract inter-
pretation [32].
EXPLORER	CORE	ANALYSIS	Z3	Bit-Vector	Solver	VALIDATOR	ByteCode	Ethereum	State	CFG	Builder	Visualizer	bytecode. We plan that in the future Oyente will be able
to work as an interactive debugger, thus we feed the CFG
and the problematic paths into a Graph Visualizer.
The bytecode is publicly available on the blockchain and
Oyente interprets EVM instruction set to faithfully maps
instructions to constraints, i.e., bit-level accuracy. The Ether-
eum global state provides the initialized (or current) values
of contract variables, thus enabling more precise analysis.
All other variables including value, data of message call are
treated as input symbolic values.
Oyente follows a modular design. It consists of four main
components, namely CFGBuilder, Explorer, CoreAnalysis and
Validator. CFGBuilder constructs a Control Flow Graph of
the contract, where nodes are basic execution blocks, and
edges represent execution jumps between the blocks. Ex-
plorer is our main module which symbolically executes the
contract. The output of Explorer is then fed to the CoreAnal-
ysis where we implement our logic to target the vulnerabili-
ties identiﬁed in Section 3. Finally, Validator ﬁlters out some
false positives before reporting to the users.
5.2
Implementation
We implement Oyente in Python with roughly 4, 000
lines of code. Currently, we employ Z3 [33] as our solver to
decide satisﬁability. Oyente faithfully simulates Ethereum
Virtual Machine (EVM) code which has 64 distinct instruc-
tions in its language. Oyente is able to detect all the three
security problems discussed in Section 3. We describe each
component below.
CFG Builder. CFGBuilder builds a skeletal control ﬂow
graph which contains all the basic blocks as nodes, and some
edges representing jumps of which the targets can be de-
termined by locally investigating the corresponding source
nodes. However, some edges cannot be determined stat-
ically at this phase, thus they are constructed on the ﬂy
during symbolic execution in the later phase.
Explorer. Our Explorer starts with the entry node of the
skeletal CFG. At any one time, Explorer may be executing a
number of symbolic states. The core of Explorer is an inter-
preter loop which gets a state to run and then symbolically
executes a single instruction in the context of that state.
This loop continues until there are no states remaining, or
a user-deﬁned timeout is reached.
A conditional jump (JUMPI) takes a boolean expression
(branch condition) and alters the program counter of the
state based on whether the condition is true or false. Ex-
plorer queries Z3 to determine if the branch condition is ei-
ther provably true or provably false along the current path;
if so, the program counter is updated to the appropriate tar-
get address. Otherwise, both branches are possible: we then
explore both paths in Depth First Search manner, updating
the program counter and path condition for each path ap-
propriately. More edges might be added to the skeletal CFG.
At the end of the exploration phase, we produce a set of
symbolic traces. Each trace is associated with a path con-
straint and auxiliary data that the analyses in later phase
require. The employment of a constraint solver, Z3 in par-
ticular, helps us eliminate provably infeasible traces from
consideration.
Core Analysis. CoreAnalysis contains sub-components to
detect contracts which are TOD, timestamp-dependent or
mishandled exceptions. Currently, the Explorer collects only
paths which exhibit distinct ﬂows of Ether. Thus, we detect
if a contract is TOD if it sends out Ether diﬀerently when
the order of transactions changes. Similarly, we check if a
contract is timestamp-dependent if the condition to send in-
cludes the block timestamp. We describe how we implement
our analyses as below.
• TOD detection. Explorer returns a set of traces and the
corresponding Ether ﬂow for each trace. Our analysis thus
checks if two diﬀerent traces have diﬀerent Ether ﬂows. If
a contract has such pairs of traces, Oyente reports it as
a TOD contract.
• Timestamp dependence detection. We use a special sym-
bolic variable to represent the block timestamp. Note that
the block timestamp stays constant during the execution.
Thus, given a path condition of a trace, we check if this
symbolic variable is included. A contract is ﬂagged as
timestamp-dependent if any of its traces depends on this
symbolic variable.
• Mishandled exceptions. Detecting a mishandled exception
is straightforward. Recall that if a callee yields an excep-
tion, it pushes 0 to the caller’s operand stack. Thus we
only need to check if the contract executes the ISZERO
instruction (which checks if the top value of the stack is
0) after every call. If it does not, any exception occurred
in the callee is ignored. Thus, we ﬂags such contract as a
contract that mishandles exceptions.
• Reentrancy Detection. We make use of path conditions in
order to check for reentrancy vulnerability. At each CALL
that is encountered, we obtain the path condition for the
execution before the CALL is executed. We then check if
such condition with updated variables (e.g., storage val-
ues) still holds (i.e., if the call can be executed again). If
so, we consider this a vulnerability, since it is possible for
the callee to re-execute the call before ﬁnishing it.
Validation. The last component is Validator which at-
tempts to remove false positives. For instance, given a con-
tract ﬂagged as TOD by CoreAnalysis and its two traces t1
and t2 exhibiting diﬀerent Ether ﬂows, Validator queries Z3
to check if both ordering (t1, t2) and (t2, t1) are feasible. If
no such t1 and t2 exist, the case is considered as a false
positive. However, because we have not fully simulated the
execution environment of Ethereum, Validator is far from
being complete. For the results presented in Section 6, we
resort to best-eﬀort manual analysis to conﬁrm the security
bugs. In other words, the current main usage of Oyente
is to ﬂag potentially vulnerable contracts; full-ﬂedged false
positive detection is left for future work.
6. EVALUATION
We measure the eﬃcacy of Oyente via quantitative and
qualitative analyses. We run Oyente on all contracts in the
ﬁrst 1, 459, 999 blocks of Ethereum. Our goals are three-
fold. First, we aim to measure the prevalence of the security
bugs discussed in Section 3 in the real Ethereum contracts.
Second, we highlight that our design and implementation
choices are driven by the characteristics of real-life smart
contracts, and that Oyente is robust enough to handle
them. Lastly, we present several case studies demonstrat-
ing misunderstandings that many contract developers have
about the subtle semantics of Ethereum.
Figure 12: Number of buggy contracts per each security problem
reported by Oyente.
6.1 Benchmarks and Tool Robustness
We collected 19, 366 smart contracts from the blockchain
as of May 5, 2016. These contracts currently hold a total
balance of 3, 068, 654 Ether, or 30 Million US dollars at the
time of writing. The balance in contracts vary signiﬁcantly:
most of contracts do not hold any Ether (e.g., balance is
zero), 10% of them have at least 1 Ether, while the highest
balance (2, 401, 557 Ether) accounts for 38.9% of the total
balance in all contracts. On an average, a contract has 318.5
Ether, or equivalently 4523 US dollars. This suggests that
attackers are well-incentivized to target and exploit ﬂaws in
smart contracts to gain proﬁt.
Ethereum contracts vary from being simple to fairly com-
plex. Figure 13 shows that the number of instructions in a
contract ranges from 18 to 23, 609, with an average of 2, 505
and a median of 838. The number of distinct instructions
used in a single contract is shown in Figure 13.
It shows
that to handle these real-world contracts, Oyente needs
to correctly handle the logic of 63 instructions. We choose
to build Oyente on EVM bytecode rather than the source
code (e.g., Solidity [16]) because only a small number con-
tracts have source code publicly available on public repos-
itories [34, 35]. Oyente ﬁnds a total number of 366, 213
feasible execution paths which took a total analysis time of
roughly 3, 000 hours on Amazon EC2.
6.2 Quantitative analysis
Experimental setup. We run Oyente on 19, 366 con-
tracts in our benchmark. All experiments are conducted on
4 Amazon EC2 m4.10xlarge instances, each has 40 Ama-
zon vCPU with 160 GB of memory and runs 64-bit Ubuntu
14.04. We use Z3 v4.4.1 as our constraint solver [33]. We
set a timeout for our symbolic execution (e.g.,Explorer com-
ponent) of 30 mins per contract. The timeout for each Z3
request is set to 1 second.
Performance. On average, Oyente takes 350 seconds to
analyze a contract. 267 contracts require more than 30 min-
utes to analyze. The number of paths explored by Oyente
ranges from 1 to 4613 with an average of 19 per contract
and a median of 6. We observe that the running time de-
pends near linearly on the number of explored paths, i.e.,
the complexity of contracts.
6.2.1 Results
Figure 12 reports our results. Oyente ﬂags 8, 833 con-
Figure 13: Number of instructions in each contract
tracts which have at least one security issue discussed in
Section 3. Out of these, 1, 682 are distinct (by direct com-
parison of the bytecode). Of these, we were able to collect
source code for only 175 contracts to conﬁrm the tool’s cor-
rectness; we manually check for false positives. Among all
contracts with source, Oyente has a low false positive rate
of 6.4%, i.e., only 10 cases out of 175.
Mishandled exceptions. 5, 411 contracts have mishan-