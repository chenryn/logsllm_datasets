title:Accountable-subgroup multisignatures: extended abstract
author:Silvio Micali and
Kazuo Ohta and
Leonid Reyzin
Accountable-Subgroup Multisignatures
[Extended Abstract]
Silvio Micali
MIT
Lab for Computer Science
545 Technology Square
Cambridge, MA 02139
USA
Kazuo Ohta
The University of
Electro-Communications
1-5-1 Chofugaoka, Chofu-shi
Tokyo 182-8585, JAPAN
PI:EMAIL
Leonid Reyzin
Boston University
Dept. of Computer Science
111 Cummington St
Boston, MA 02215 USA
PI:EMAIL
ABSTRACT
Formal models and security proofs are especially important
for multisignatures: in contrast to threshold signatures, no
precise deﬁnitions were ever provided for such schemes, and
some proposals were subsequently broken.
In this paper, we formalize and implement a variant of
multi-signature schemes, Accountable-Subgroup Multisigna-
tures (ASM). In essence, ASM schemes enable any subgroup,
S, of a given group, G, of potential signers, to sign eﬃciently
a message M so that the signature provably reveals the iden-
tities of the signers in S to any veriﬁer.
Speciﬁcally, we provide:
1. The ﬁrst formal model of security for multisignature
schemes that explicitly includes key generation (with-
out relying on trusted third parties);
2. A protocol, based on Schnorr’s signature scheme [33],
that is both provable and eﬃcient:
• Only three rounds of communication are required
per signature.
• The signing time per signer is the same as for
the single-signer Schnorr scheme, regardless of the
number of signers.
• The veriﬁcation time is only slightly greater than
that for the single-signer Schnorr scheme.
• The signature length is the same as for the single-
signer Schnorr scheme, regardless of the number
of signers.
Our proof of security relies on random oracles and the hard-
ness of the Discrete Log Problem.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection—Authentication; C.2.2
[Computer-Communication Networks]: Network Pro-
tocols; K.4.4 [Computers and Society]: Electronic Com-
merce
General Terms
Algorithms, Design, Security, Theory
Keywords
Digital Signature, Multisignature
1.
INTRODUCTION
Since their introduction by Itakura and Nakamura in [19],
multisignatures have been extensively studied, and yet no
formal deﬁnition of this notion has been provided to date.
This lack of formalism has led to some confusion as to the
precise meaning of multisignature, as well as to some pro-
posals that have been subsequently broken. We thus wish
to address both problems.
1.1  Defining Multisignatures
1.1.1 The Need for Flexible Accountability
Given a group of potential signers G = P1, . . . , PL, mul-
tisignatures allow certain subsets S of signers (henceforth
called subgroups) to sign messages together. A simple case,
explicitly addressed, for example, in [27, 29], envisages S =
G, that is, every signer in G must participate in producing
a multisignature. The case of more general subgroups S has
been, in particular, addressed in [19, 17, 22, 18].
General subgroups of signers are needed in many applica-
tions. (For example, if a certiﬁcation authority is distributed
on L servers, it would be useful that only a subset of the
servers is needed to issue a valid certiﬁcate.) But: what
properties should such general multisignatures satisfy? We
suggest the following two (informally, for now):
• Flexibility. Flexibility means that any subgroup S of
G may easily jointly sign a document. It is then up
to the veriﬁer of the signature to decide whether S
was “suﬃcient” for the signature to be deemed valid.
245This places no restriction on the size of S. In fact, it
allows complex rules about S to be enforced, such as,
for example, the following: “either the CEO is in S, or
three senior VPs are in S.”
• Accountability. Accountability means that, without
use of trusted third parties, individual signers can be
identiﬁed from the signed document. This is desirable
in many settings: if an incorrectly issued certiﬁcate is
discovered, it is important to identify the corrupted
servers.
Notice that, in the “paper world,” these two properties are
satisﬁed by the traditional solution in which every member
of S appends his own signature to the document to be jointly
signed.
1.1.2 The Need for a Formal Model
Because of the lack of a formal model of security for
multisignatures, there has been no consensus on the pre-
cise meaning of the term. Even more troublesome is the
fact that few of the previous proposals for multisignature
schemes ever attempted a formal security proof, and some
proposals turned out, in fact, to be insecure. For example,
the proposals of [17] and [22] were subsequently cryptana-
lyzed by [18], [21] and [26].
Absent a complete formal model, even schemes that have
formal proofs of “security” are vulnerable to attacks: the
“Type II” scheme of [29] is subject to a previously known at-
tack on key generation, even though the paper contains for-
mal statements about the scheme’s security (see footnote 3
in Section 3.2 for more details). This is so not because the
theorems of [29] are wrong, but rather because the deﬁni-
tion of security simply does not address adversarial behavior
during key generation.
1.1.3 Our Model
In Section 2, we provide a formal model for multisigna-
tures that requires both ﬂexibility and accountability. To
avoid confusion with other similar notions, we use the term
“accountable-subgroup multisignatures” (ASM) to describe
the schemes in our model. The model is precise enough to
allow for formal security proofs, and, unlike the deﬁnition of
[29], encompasses key generation. The adversary allowed in
our model is quite strong, thus ensuring that ASM schemes
are, in fact, secure.
1.1.4 ASM vs. Other Notions
There have been a number other notions proposed for sig-
natures by multiple signers. The terms “multisignature,”
“group signature,” and “threshold signature” are not always
used consistently; moreover, other terms, such as “threshold-
multisignatures” [22] are also sometimes used. We focus here
only on the most commonly used models and terminology.
Group signatures.
In a group signature [8, 6]), there
is a total group G of potential signers, but each signature
is produced by any (anonymous) individual member on be-
half of the entire group. Therefore, group signatures are
not ﬂexible: there is no mechanism for enforcing larger than
one-member subgroups. Furthermore, group signatures oﬀer
only partial accountability: the identity of the signing mem-
ber is unknown to a signature veriﬁer, though it is available
to a trusted party, the group manager, in case problems
arise.1
Threshold signatures.
In a threshold signature scheme
(see, e.g., [10, 13, 14]), a message can be signed only by
a suﬃciently large subgroup. Therefore, threshold schemes
are reasonably ﬂexible, but do not oﬀer accountability. In
fact, there is no way of identifying the members of S from a
signature.2
Such anonymity, while desirable in some settings, is dan-
gerous in others. By removing accountability for what is
signed, one may actually encourage cheating. If some senior
oﬃcers of a corporation can enrich themselves (e.g., by sign-
ing the sale of certain corporate assets) with a mathemat-
ical guarantee of anonymity, then such enrichments would
become more frequent than desirable.
1.2 Designing Multisignatures
1.2.1 The Key Generation Problem
Vulnerabilities in the key generation stage are a main
problem in discrete-logarithm-based multisignatures. In par-
ticular, they are the basis for the aforementioned attacks on
[17], [22] and [29]. The problem stems from the fact that
adversarial signers can choose their keys after seeing other
signers’ keys, and can therefore potentially aﬀect the joint
public key of the subgroup S.
Past discrete-logarithm-based multisignatures have there-
fore required a trusted third party for key generation (in
particular, [18] suggests using a trusted third party to ﬁx
the problem in [17]).
Key generation has also been a problem for threshold sig-
natures.
In this case, fortunately, the problem has been
resolved, at least for the discrete logarithm case (see, e.g.,
[31], [15]). However, threshold signatures, by design, exclude
accountability, and thus the solutions available for them do
not easily extend to multisignatures (see 2.1).
1.2.2 Our Implementation
In Section 3, we provide an eﬃcient implementation of
ASM schemes, based on the Discrete Logarithm problem
and the Schnorr [33] signature scheme. Our starting point
is a “two-cycle” scheme suggested brieﬂy in Section 6 of [29].
We modify it extensively, however, to obtain a scheme that
is provably secure in our model and does not suﬀer from
the vulnerabilities during key generation that the original
scheme has.
Our scheme has the following desirable eﬃciency prop-
erties, when compared to the obvious solution that simply
uses multiple single-signer signatures:
• The signature length does not grow with the number
it is the same as that of a single-signer
of signers:
Schnorr signature.
1This reliance on the trusted manager, who could be “elimi-
nated” (at least electronically —e.g., by destroying its com-
puter) to avoid accountability, is a drawback in many set-
tings.
2In essence, in most threshold schemes, signing involves (im-
plicitly) interpolating an ((cid:8) − 1)-degree polynomial from (cid:8)
point-value pairs. Thus, once the polynomial is (implicitly)
reconstructed, there is no way of knowing which (cid:8) out of
the possible L point-value pairs were actually used in the
interpolation.
246• The veriﬁcation is almost the same as the time needed
to verify a single Schnorr signature.
The cost of these improvements is quite moderate:
• The signing protocol requires only three rounds of com-
munication among the members of S, irrespective of
the size of S.
• The signing time per member of S is almost the same
as the time required to produce a single-signer Schnorr
signature.
• Only the key generation protocol (done once for a group
G) requires each member of G to perform communica-
tion and computation that is linear in the size of G.
1.2.3 Comparison with Prior Implementations
Implementations based on repeated use of trapdoor per-
mutations (such as [19] and [30]) require as many rounds
of communication as there are signers; the veriﬁcation time
grows linearly with the number of signers as well. Addi-
tionally, they are not provable in our model (although it is
possible to modify the scheme of [30] to make it provable at
the expense of some eﬃciency loss).
Implementations based on discrete logarithms or the Fiat-
Shamir scheme (such as, for example, [27, 18, 28, 29], and
the ﬁrst scheme of [22]) require a trusted third party for key
generation. Implementations that do not require a trusted
party include the second scheme of [22] and the multisig-
nature scheme of [17], both of which, however, have been
successfully attacked (e.g., by [21, 26]). An implementation
that does not require a trusted party and can be proven se-
cure in our model without major modiﬁcations is the “Type
III” scheme of [28, 29]. However, its security holds only
for logarithmically many signers, and the scheme requires
signiﬁcantly more veriﬁcation time per signature.
2. THE NOTION OF AN ASM
2.1 The Informal Notion
Let us now informally express what an ASM scheme is,
that is, what it means to eﬃciently allow any subgroup S of a
group G of signers to sign a message, keeping each individual
member of S accountable for what S signs.
Informal Deﬁnition An accountable-subgroup multisig-
nature of a subgroup of signers S for a message M pro-
vides, without any trusted managers or third parties, a self-
contained and universally veriﬁable proof of (1) the compo-
sition of S and (2) the fact that each member of S stood
behind M .
The above deﬁnition, due to its informality, is quite vague.
For instance, it does not specify whether S should be chosen
in advance, or whether the members of S are aware of their
co-signers. To remove such ambiguities, ASM schemes are
best deﬁned by specifying a basic solution that may be quite
ineﬃcient, but spells out the rules of the game. The goal of
an ASM scheme will then be achieving the properties of the
basic solution more eﬃciently.
The Ineﬃcient Solution: Let G be a group of sign-
ers, in which each member Pi has his own individual
public key P Ki and corresponding secret key SKi. Ar-
bitrarily order the members of the group. Then, the
signature of subgroup S = (Pi1 , . . . , Pim ) of a mes-
sage M consists of the sequence (σ1, . . . , σm), where
σj is Pij ’s individual signature (relative to public key
P Kij ) of the pair (M, S).
A formal deﬁnition of an ASM scheme is essentially obtained
by adding a proper adversarial model to the basic solution.
We do this in Section 2.2. For now, let us understand better
the properties of our basic solution. To this end, it is im-
portant to realize that the following simple-minded attempt
at adding accountability to existing threshold schemes does
not work.
A Non-Solution: Start with any threshold signature
scheme, and add the requirement that each signed mes-
sage include the list of the members of S who partici-
pated in the signing protocol.
This does not work, because any player P not belonging
to S can be “framed” by the members of S, who can simply
add P ’s name to the list. Moreover, the real signers may not
include their own names in the list. In a 3-out-of-6 scheme,
for example, this would be particularly unacceptable: the
signers may be a, b, and c, but they may pretend to be d,
e and f instead. Indeed, even if the threshold were to be
higher than half of G, one could only conclude that one of
the purported signers is genuine, but it is still impossible to
determine which one.
2.1.1 Understanding the informal notion
We take our ineﬃcient basic solution to be the ideal in
terms of the properties we want from ASM schemes. Our
goal is to deﬁne a model that captures these properties, and
come up with schemes in this model that are more eﬃcient
than the basic solution (note that the basic solution is quite
ineﬃcient: both the signature size and the veriﬁcation time
grow linearly with the size of S). We therefore gain better
understanding of the new notion by further examining the
basic solution.
The Role of S. Specifying S in the signed message en-
sures that each signer know his co-signers in advance: if all