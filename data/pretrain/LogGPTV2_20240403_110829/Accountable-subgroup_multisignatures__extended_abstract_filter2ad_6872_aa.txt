# Accountable-Subgroup Multisignatures: Extended Abstract

**Authors:**
- Silvio Micali, MIT Lab for Computer Science, 545 Technology Square, Cambridge, MA 02139, USA
- Kazuo Ohta, The University of Electro-Communications, 1-5-1 Chofugaoka, Chofu-shi, Tokyo 182-8585, Japan
- Leonid Reyzin, Boston University, Dept. of Computer Science, 111 Cummington St, Boston, MA 02215, USA

## Abstract

Formal models and security proofs are crucial for multisignature schemes. Unlike threshold signatures, no precise definitions have been provided for multisignatures, leading to some proposals being subsequently broken. In this paper, we formalize and implement a variant of multisignature schemes called Accountable-Subgroup Multisignatures (ASM). ASM schemes enable any subgroup \( S \) of a given group \( G \) of potential signers to efficiently sign a message \( M \), such that the signature provably reveals the identities of the signers in \( S \) to any verifier.

Specifically, we provide:
1. The first formal model of security for multisignature schemes that explicitly includes key generation without relying on trusted third parties.
2. A protocol based on Schnorr's signature scheme [33] that is both provable and efficient:
   - Only three rounds of communication are required per signature.
   - The signing time per signer is the same as for the single-signer Schnorr scheme, regardless of the number of signers.
   - The verification time is only slightly greater than that for the single-signer Schnorr scheme.
   - The signature length is the same as for the single-signer Schnorr scheme, regardless of the number of signers.

Our proof of security relies on random oracles and the hardness of the Discrete Log Problem.

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

CCS'01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.

**Categories and Subject Descriptors:**
- K.6.5 [Management of Computing and Information Systems]: Security and Protectionâ€”Authentication
- C.2.2 [Computer-Communication Networks]: Network Protocols
- K.4.4 [Computers and Society]: Electronic Commerce

**General Terms:**
- Algorithms, Design, Security, Theory

**Keywords:**
- Digital Signature, Multisignature

## 1. Introduction

Since their introduction by Itakura and Nakamura in [19], multisignatures have been extensively studied, yet no formal definition has been provided. This lack of formalism has led to confusion and some insecure proposals. We address these issues by providing a formal model and an efficient implementation.

### 1.1 Defining Multisignatures

#### 1.1.1 The Need for Flexible Accountability

Given a group of potential signers \( G = \{P_1, \ldots, P_L\} \), multisignatures allow certain subsets \( S \) (subgroups) to sign messages together. A simple case, where \( S = G \), requires every signer in \( G \) to participate. More general subgroups \( S \) have been addressed in [19, 17, 22, 18].

General subgroups are needed in many applications, such as distributed certification authorities. We suggest two properties for such multisignatures:
- **Flexibility:** Any subgroup \( S \) of \( G \) can easily jointly sign a document. The verifier decides if \( S \) is sufficient for the signature to be valid.
- **Accountability:** Individual signers can be identified from the signed document without trusted third parties. This is desirable for identifying corrupted servers in case of incorrect certificates.

#### 1.1.2 The Need for a Formal Model

The lack of a formal security model for multisignatures has led to inconsistent definitions and insecure proposals. For example, the proposals in [17] and [22] were later cryptanalyzed by [18, 21, 26]. Even schemes with formal proofs, like the "Type II" scheme in [29], are vulnerable due to inadequate security definitions during key generation.

#### 1.1.3 Our Model

In Section 2, we provide a formal model for multisignatures that requires both flexibility and accountability. We use the term "accountable-subgroup multisignatures" (ASM) to describe our schemes. Our model is precise enough for formal security proofs and encompasses key generation. The adversary in our model is strong, ensuring the security of ASM schemes.

#### 1.1.4 ASM vs. Other Notions

Other notions for multiple signers include:
- **Group Signatures:** Each signature is produced by an anonymous individual member on behalf of the entire group. They offer partial accountability through a trusted group manager.
- **Threshold Signatures:** A message can be signed by a sufficiently large subgroup. They do not offer accountability, as the members of the subgroup cannot be identified.

### 1.2 Designing Multisignatures

#### 1.2.1 The Key Generation Problem

Vulnerabilities in key generation are a major issue in discrete-logarithm-based multisignatures. Adversarial signers can choose their keys after seeing others' keys, affecting the joint public key of the subgroup \( S \). Past solutions have required trusted third parties, but we aim to avoid this.

#### 1.2.2 Our Implementation

In Section 3, we provide an efficient implementation of ASM schemes based on the Discrete Logarithm problem and the Schnorr [33] signature scheme. Our scheme is secure in our model and does not suffer from key generation vulnerabilities. It has the following efficiency properties:
- **Signature Length:** Does not grow with the number of signers; it is the same as a single-signer Schnorr signature.
- **Verification Time:** Almost the same as verifying a single Schnorr signature.
- **Communication Rounds:** Only three rounds of communication among the members of \( S \), irrespective of the size of \( S \).
- **Signing Time:** Almost the same as producing a single-signer Schnorr signature.
- **Key Generation:** Requires each member of \( G \) to perform linear communication and computation once.

#### 1.2.3 Comparison with Prior Implementations

- **Trapdoor Permutations:** Require as many communication rounds as there are signers and have linear verification time growth.
- **Discrete Logarithms/Fiat-Shamir:** Require a trusted third party for key generation.
- **Other Implementations:** Some, like the second scheme in [22] and the multisignature scheme in [17], have been successfully attacked. The "Type III" scheme in [28, 29] is secure but only for logarithmically many signers and requires more verification time.

## 2. The Notion of an ASM

### 2.1 The Informal Notion

An accountable-subgroup multisignature of a subgroup \( S \) for a message \( M \) provides, without trusted managers or third parties, a self-contained and universally verifiable proof of (1) the composition of \( S \) and (2) the fact that each member of \( S \) stood behind \( M \).

**Inefficient Solution:** Let \( G \) be a group of signers, each with their own public and secret keys. The signature of subgroup \( S = \{P_{i1}, \ldots, P_{im}\} \) for a message \( M \) consists of the sequence \( (\sigma_1, \ldots, \sigma_m) \), where \( \sigma_j \) is \( P_{ij} \)'s individual signature of the pair \( (M, S) \).

**Non-Solution:** Adding the list of members of \( S \) to a threshold signature does not work, as non-members can be framed, and real signers may exclude themselves.

### 2.1.1 Understanding the Informal Notion

We take the inefficient basic solution as the ideal in terms of desired properties. Our goal is to define a model that captures these properties and develop more efficient schemes. Specifying \( S \) in the signed message ensures that each signer knows their co-signers in advance.