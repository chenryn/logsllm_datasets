        bx lr
    adr_var1: .word var1
    adr_var2: .word var2
下面来分别调试这三条关键指令。在执行完基于偏移量的取址模式的STR操作后，R2的值被存在了地址0x1009c + 0x3 =
0x1009F处。下面一段是执行完对应STR操作后对应内存位置的值。
    gef> x/w 0x0001009F
     0x1009f : 0x00000003
下一条STR操作使用了基于索引前置修改的取址模式，R1的值被更新为R1+R2的值。下面一段是执行完对应STR操作后寄存器的值。
    gef> info register r1
     r1     0x1009f      65695
最后一个LDR操作使用了基于索引后置的取址模式。将R1指向的值加载到R2之后，更新了R1寄存器的值(R1+R2 = 0x1009f + 0x3 =
0x100a2)。下面一段是执行完对应LDR操作后对应内存位置以及寄存器的值。
    gef> info register r1
     r1      0x100a2     65698
    gef> info register r3
     r3      0x3       3
下图是这个操作发生的动态示意图。
**第三种偏移形式：寄存器缩放值作偏移**
    LDR    Ra, [Rb, Rc, ]
    STR    Ra, [Rb, Rc, ]
在这种偏移形式下，第三个偏移量还有一个寄存器做支持。Rb是基址寄存器，Rc中的值作为偏移量，或者是要被左移或右移的次的值。这意味着移位器shifter被用来用作缩放Rc寄存器中存放的偏移量。下面的样例代码展示了对一个数组的循环操作。同样的，我们也会用GDB调试这段代码。
    .data
    var1: .word 3
    var2: .word 4
    .text
    .global _start
    _start:
        ldr r0, adr_var1         @ 将存放var1值的地址adr_var1加载到寄存器R0中 
        ldr r1, adr_var2         @ 将存放var2值的地址adr_var2加载到寄存器R1中 
        ldr r2, [r0]             @ 将R0所指向地址中存放的0x3加载到寄存器R2中  
        str r2, [r1, r2, LSL#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处。R1寄存器不会被修改。
        str r2, [r1, r2, LSL#2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处，之后R1寄存器中的值被更新,也就R1 = R1 + R2 info register r1
    r1      0x100a8      65704
最后一个LDR操作使用了基于索引后置的取址模式。将R1指向的值加载到R2之后，更新了R1寄存器的值(R1+R2 = 0x100a8 + (0x3 info register r1
    r1      0x100b4      65716
**小结**
LDR/STR的三种偏移模式：
立即数作为偏移
    ldr   r3, [r1, #4]
寄存器作为偏移
    ldr   r3, [r1, r2]
寄存器缩放值作为偏移
    ldr   r3, [r1, r2, LSL#2]
如何区分取址模式：
如果有一个叹号!，那就是索引前置取址模式，即使用计算后的地址，之后更新基址寄存器。
    ldr   r3, [r1, #4]!
    ldr   r3, [r1, r2]!
    ldr   r3, [r1, r2, LSL#2]!
如果在[]外有一个寄存器，那就是索引后置取址模式，即使用原有基址寄存器重的地址，之后再更新基址寄存器
    ldr   r3, [r1], #4
    ldr   r3, [r1], r2
    ldr   r3, [r1], r2, LSL#2
除此之外，就都是偏移取址模式了
    ldr   r3, [r1, #4]
    ldr   r3, [r1, r2]
    ldr   r3, [r1, r2, LSL#2]
地址模式：用作偏移
地址模式：前向索引
地址模式：后向索引
**关于PC相对取址的LDR指令**
有时候LDR并不仅仅被用来从内存中加载数据。还有如下这操作:
    .section .text
    .global _start
    _start:
       ldr r0, =jump        /* 加载jump标签所在的内存位置到R0 */
       ldr r1, =0x68DB00AD  /* 加载立即数0x68DB00AD到R1 */
    jump:
       ldr r2, =511         /* 加载立即数511到R2 */ 
       bkpt
这些指令学术上被称作伪指令。但我们在编写ARM汇编时可以用这种格式的指令去引用我们文字标识池中的数据。在上面的例子中我们用一条指令将一个32位的常量值放到了一个寄存器中。为什么我们会这么写是因为ARM每次仅仅能加载8位的值，原因倾听我解释立即数在ARM架构下的处理。
**在ARM中使用立即数的规律**
是的，在ARM中不能像X86那样直接将立即数加载到寄存器中。因为你使用的立即数是受限的。这些限制听上去有些无聊。但是听我说，这也是为了告诉你绕过这些限制的技巧(通过LDR)。
我们都知道每条ARM指令的宽度是32位，所有的指令都是可以条件执行的。我们有16中条件可以使用而且每个条件在机器码中的占位都是4位。之后我们需要2位来做为目的寄存器。2位作为第一操作寄存器，1位用作设置状态的标记位，再加上比如操作码(opcode)这些的占位。最后每条指令留给我们存放立即数的空间只有12位宽。也就是4096个不同的值。
这也就意味着ARM在使用MOV指令时所能操作的立即数值范围是有限的。那如果很大的话，只能拆分成多个部分外加移位操作拼接了。
所以这剩下的12位可以再次划分，8位用作加载0-255中的任意值，4位用作对这个值做0~30位的循环右移。这也就意味着这个立即数可以通过这个公式得到：v =
n ror 2*r。换句话说，有效的立即数都可以通过循环右移来得到。这里有一个例子
有效值:
    #256        // 1 循环右移 24位 --> 256
    #384        // 6 循环右移 26位 --> 384
    #484        // 121 循环右移 30位 --> 484
    #16384      // 1 循环右移 18位 --> 16384
    #2030043136 // 121 循环右移 8位 --> 2030043136
    #0x06000000 // 6 循环右移 8位 --> 100663296 (十六进制值0x06000000)
    Invalid values:
    #370        // 185 循环右移 31位 --> 31不在范围内 (0 – 30)
    #511        // 1 1111 1111 --> 比特模型不符合
    #0x06010000 // 1 1000 0001.. --> 比特模型不符合
看上去这样并不能一次性加载所有的32位值。不过我们可以通过以下的两个选项来解决这个问题：
用小部分去组成更大的值。
比如对于指令 MOV r0, #511
将511分成两部分：MOV r0, #256, and ADD r0, #255
用加载指令构造‘ldr r1,=value’的形式，编译器会帮你转换成MOV的形式，如果失败的话就转换成从数据段中通过PC相对偏移加载。
    LDR r1, =511
如果你尝试加载一个非法的值，编译器会报错并且告诉你 invalid
constant。如果在遇到这个问题，你现在应该知道该怎么解决了吧。唉还是举个栗子，就比如你想把511加载到R0。
    .section .text
    .global _start
    _start:
        mov     r0, #511
        bkpt
这样做的结果就是编译报错:
    azeria@labs:~$ as test.s -o test.o
    test.s: Assembler messages:
    test.s:5: Error: invalid constant (1ff) after fixup
你需要将511分成多部分，或者直接用LDR指令。
    .section .text
    .global _start
    _start:
     mov r0, #256   /* 1 ror 24 = 256, so it's valid */
     add r0, #255   /* 255 ror 0 = 255, valid. r0 = 256 + 255 = 511 */
     ldr r1, =511   /* load 511 from the literal pool using LDR */
     bkpt
如果你想知道你能用的立即数的有效值，你不需要自己计算。我这有个小脚本，看你骨骼惊奇，传给你呦
[rotator.py](https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py)。用法如下。
    azeria@labs:~$ python rotator.py
    Enter the value you want to check: 511
    Sorry, 511 cannot be used as an immediate number and has to be split.
    azeria@labs:~$ python rotator.py
    Enter the value you want to check: 256
    The number 256 can be used as a valid immediate number.
    1 ror 24 --> 256
**译者注：这作者真的是用心良苦，我都看累了，但是怎么说，反复练习加实践，总归是有好处的。**
**  
**
****
传送门
[【系列分享】ARM
汇编基础速成1：ARM汇编以及汇编语言基础介绍](http://bobao.360.cn/learning/detail/4070.html)
**[【系列分享】ARM
汇编基础速成2：ARM汇编中的数据类型](http://bobao.360.cn/learning/detail/4075.html)**
[**【系列分享】ARM
汇编基础速成3：ARM模式与THUMB模式**](http://bobao.360.cn/learning/detail/4082.html)
**  
**