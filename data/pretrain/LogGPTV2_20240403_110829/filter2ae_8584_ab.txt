](https://images.seebug.org/content/images/2019/03/556358df-b683-4640-b06f-1cecb43c841f.jpg-w331s)
可以看到，当为GCLP_MENUNAME时，会在1567行释放掉旧内存！所以我们就有了第2个问题的解决方案，让MenuName指向的内存块释放掉：
![
](https://images.seebug.org/content/images/2019/03/67b13f96-66f1-4cf6-be8b-3726ebc46c59.png-w331s)
![
](https://images.seebug.org/content/images/2019/03/77adf7e1-db76-4eea-9da9-3b85d6bbd7b6.jpg-w331s)
![
](https://images.seebug.org/content/images/2019/03/901be4f8-058b-4e3c-8c63-c4dcbbeec88a.jpg-w331s)
可以看到，释放了lpszMenuName成员指向的内存块：
![
](https://images.seebug.org/content/images/2019/03/2ca60bbe-d755-4263-a6c3-aa9e4813cf94.jpg-w331s)
然而，在baseCLS中的lpszMenuName成员，还是依然指向这块内存：
![
](https://images.seebug.org/content/images/2019/03/e4d9760d-d5f1-486e-bb73-bc072efded51.jpg-w331s)
可以看到，baseCLS中的MenuName成员指向的数据，已经不再是UNICODE的xxxxxx了！如何还剩下最后一个问题：如何让baseCLS的MenuName释放呢？也就是问题3。我们知道，tagCLS结构，在内核中就是一个内核结构，产生可以RegisterClassExA，那么销毁也自然简单：UnregisterClass就行！但在测试中，发现直接调用该API，在系统调用完成后，user32.dll中的代码会导致在用户态的某处内存错误，所以这里是直接调用了系统调用的销毁API：NtUserUnregisterClass
![
](https://images.seebug.org/content/images/2019/03/eb2e6df0-b95d-436d-ad4b-c8bb7f776f92.png-w331s)
调用即触发重复释放内存块：
![
](https://images.seebug.org/content/images/2019/03/c0f3f614-69d9-4498-94e2-424809b591d7.jpg-w331s)
![
](https://images.seebug.org/content/images/2019/03/bd592bad-61e3-4c55-90c0-600bfd2640d4.jpg-w331s)
![
](https://images.seebug.org/content/images/2019/03/bdf060e0-8f99-410e-a67c-ff32c82fd51d.jpg-w331s)
可以看到该内存被再次释放！继而引发BSOD（这里由于为了后补一张截图，重新运行了POC，所以RCX并不完全一样）：
![
](https://images.seebug.org/content/images/2019/03/6b78f5ea-6bcc-47a5-902d-2f6b81b73b28.jpg-w331s)
![
](https://images.seebug.org/content/images/2019/03/7cda29df-744f-4486-8946-d5596b7525fa.png-w331s)
至此，我们已经成功触发了漏洞！
接下来，就是如何利用此漏洞。我们经过上面的分析可知，该漏洞就是个double-free，所以利用流程如下：第一次释放->重新占用刚刚释放的内存->触发第二次释放->再次占用内存->使用第一次占用对象句柄来更改内存内容->获取一个损坏的对象！这个流程不再多说，有兴趣的可以参照本人之前的文章《从补丁diff到EXP
--CVE-2018-8453漏洞分析与利用》。这里仅贴出关键代码和简单流程说明：
  1. 创建触发环境：
![
](https://images.seebug.org/content/images/2019/03/4224bde7-dbae-4e77-a10a-4653e5425e53.png-w331s)
  2. 触发第一次释放：
![
](https://images.seebug.org/content/images/2019/03/ace62ce8-0b36-49b1-8d6a-260c484f7b88.png-w331s)
  3. 马上占用被释放的内存：
![
](https://images.seebug.org/content/images/2019/03/732419b0-77a2-4248-acc9-1bf9c06718a8.png-w331s)
  4. 触发第二次释放：
![
](https://images.seebug.org/content/images/2019/03/e742aa6e-e1f3-41c8-9eee-0dfe06786045.png-w331s)
  5. 创建palette对象，再次占用被释放的内存：
![
](https://images.seebug.org/content/images/2019/03/d992b1ff-b015-4549-94bf-b1b22d500293.png-w331s)
  6. 使用第4步中创建的DC对象来重写Palette结构，我们这里更改Palette结构中的大小，造成越界访问，从而更改紧临后面的Palette对象的地址指针等：
![
](https://images.seebug.org/content/images/2019/03/b1cdc575-af35-4d1e-8b56-f4a309fbabdc.png-w331s)
  7. 使用越界的Palette(Manger)来控制后面的Palette（worker）地址指针成员，完成获取token、替换token工作。然后创建CMD进程实现提权：
![
](https://images.seebug.org/content/images/2019/03/b3c22f1f-aed7-4635-a0c6-7547c249de04.png-w331s)
最后，由于上面第4步中，有一个DC对象的成员是被释放了的，如果退出EXP，则会导致释放这个DC对象的时候，导致系统BSOD（重复释放内存）。所以我们需要修正这个成员：只要把这个成员的值改为0即可，但获取该DC对象的地址却相当麻烦。
查看win32k的转换过程，发现如下：
![
](https://images.seebug.org/content/images/2019/03/da46378b-0a80-47b1-b88f-2236c4b3f80f.png-w331s)
所以重点是如何获取gpentHmgr表，win32k.sys+固定偏移的方式固然可以，但是兼容性太不好，只能是在本环境中可以，这是本人所不愿看到的。最后采用函数搜索的办法：
![
](https://images.seebug.org/content/images/2019/03/61d7d239-ddd5-4246-a620-4c1f31e2fdde.png-w331s)
Win32k.sys导出了EngCopyBits函数，该函数内引用了gGdiInPageErrors全局变量：
![
](https://images.seebug.org/content/images/2019/03/8e00597f-4c10-4200-9ea9-5aa29aa31b9d.png-w331s)
而该变量的附近就是gpentHmgr:
![
](https://images.seebug.org/content/images/2019/03/7afa79b6-9165-4ec1-846e-769fa90daf26.png-w331s)
所以只要从win32k.sys中，从导出表找到这个位置，然后减固定偏移就是gpentHmgr的指针！而寻找内存中win32k.sys模块的基址，本人从nt!PsLoadedModuleList中找到win32k.sys的基址，然后加上上面获取到的偏移获得gpentHmgr指针的地址，然后读取该地址通过换算即得到DC的地址，之后将目的成员值为0即可：
![
](https://images.seebug.org/content/images/2019/03/30d1d13b-10f7-4d49-a968-fb902d0b7d2a.png-w331s)
之后即可直接退出进程：
![
](https://images.seebug.org/content/images/2019/03/f6de48ec-d9dc-4cce-9a24-82613fa3c7fb.png-w331s)
* * *