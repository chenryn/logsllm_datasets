only open when gŒµ  0, the client can follow a single path
Figure 5. Example Find Closest Match Circuit
through the tree, learning the keys along that path, and even-
tually the key needed to decrypt the encrypted record infor-
mation at the leaf. When he evaluates the garbled SubRe-
duceMin circuit, the client obtains either Œª 0
hi from
each label pair. Since each key in the backtracking tree de-
pends on a complete path from the root to that tree, this
means the client can only open a single path through the
tree; speciÔ¨Åcally, the single path from the root to the leaf
corresponding to the closest match.
hi or Œª 1
Figure 7 summarizes the backtracking protocol. The
algorithms to generate and evaluate the tree are shown in
Algorithm 1 and Algorithm 2. For the tree generation al-
gorithm (Algorithm 1), the inputs a vector of the proÔ¨Åle
data to send and an array of the wire label pairs for each
comparison gate in the generated circuit. The output is the
backtracking tree, but only the node labels are transmitted
to the evaluator. For the tree evaluation algorithm (Algo-
rithm 2), the inputs are the tree (where the label for each
node is the encrypted label in the generated tree) and the
wire labels learned by the evaluator in evaluating the gar-
bled circuit. The output is the decrypted proÔ¨Åle information
for the closest matching entry, if there is one within Œµ.
Security. The backtracking tree protocol is secure if both
of the following properties hold:
1. The generator (the server) gains nothing.
2. The evaluator (the client) gains nothing other than the
data associated with the closest match.
The Ô¨Årst property trivially holds since the client sends noth-
ing back to the server. The second property follows from
two facts:
1. With a semantically secure encryption scheme, no in-
formation is leaked by the encryption (i. e., without
also revealing the keys).
2. Wire labels in a garbled circuit convey no information
unless their mappings to wire signals are known some-
how. This follows from the garbled circuit security
proof [10].
In every iteration of the loop in Algorithm 2, the client
only gets to know the nonce of one of current node‚Äôs two
children, and proceeds using that value. The whole subtree
of the failed branch remains unknown to the client since the
nonce is needed to open any conÔ¨Ågurations on that subtree.
Thus, the client can only follow a single path in the tree
corresponding to the path leading to the closest match.
Figure 6. Backtracking Tree Example
Input to Tree-Generator:
Input to Tree-Evaluator:
Backtracking Tree Protocol
(1) an array @=J=1     @=J=M denoting M pieces of data stored in the database;
(2) a number of pairs =>A F=EH1     =>A F=EHM‡¢§1,
where =>A F=EH
def
=>A0 =>A1, organized as a tree.
(1) a backtracking tree JHAA;
(2) a number of labels =>A1     =>AM‡¢§1 organized as a tree.
Protocol Output: Tree-Evaluator learns @=J=i‡¢©, where di‡¢©  minM
Execution:
i1di. Tree-Generator learns nothing new.
Tree-Generator
Tree-Evaluator
x JHAA=treeGen(@=J=, =>A F=EH)
‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢ê z @=J=i‡¢©  JHAA-L=JHAA =>A
y JHAA
Figure 7. The Backtracking Tree Protocol.
Note that if the server‚Äôs database is released in encrypted
format beforehand as in the Improved Euclidean Distance
protocol, the server may not want the client to learn extra in-
formation from the position of the matched records. Hence,
the server should randomly permute the order of database
records before beginning the Euclidean distance protocol.
This random permutation needs only to be done once, since
once the database is permuted relative positions of opened
records reveal no information.
Multiple matches. In the unlikely case where multiple Ô¨Ån-
gerprints match the candidate Ô¨Ångerprint equally well, a
straightforward implementation of garbled circuits always
returns either the left-most or the right-most matched leaf
node. This poses potential threats to the server‚Äôs privacy.
For example, if the minimum tree is known to always re-
turn the left-most matched leaf node, then the client learns
there can‚Äôt be another equally-well matched Ô¨Ångerprint in
the server‚Äôs database. A straightforward but costly way to
Ô¨Åx this vulnerability would be to add an equality test circuit
and a MUX for each 2-to-1 Min to randomly choose a num-
ber to output. Instead, we use a simple Ô¨Åx that does not re-
quire adding any new circuitry. We modify the circuit gen-
erator to randomly choose the internal carry-in bit for GT,
instead of always using signal 0. Setting this internal carry-
in bit to 1 is equivalent to making the GT test x1  y. This
change does not affect the functionality when x  y. When
x  y, the modiÔ¨Åed GT outputs 0 (if the internal carry-in
bit is 0) and 1 (if the internal carry-in bit is 1) with equal
probability 1
2.
7 Evaluation
To measure the impact of our improvements and eval-
uate the practicality of privacy-preserving biometrics, we
implemented a privacy-preserving Ô¨Ångerprint matching sys-
tem. Our implementation comprises about 5400 lines of
Java 1.6 code, available from http://mightbeevil.org.
We set up the server and the client on separate machines
@A?A
U‡¢é 01k;
Algorithm 1 treeGen(@=J= =>A F=EHI)
Require: @=J=ACJD  M; =>A F=EHIACJD  M ‡¢§ 1; M  2D, where D is an integer.
1: Generate a perfect tree tree of size 2M ‡¢§ 1.
2: Fill the M leaf nodes with the M values in @=J=.
3: for all @A in JHAA do
4:
5: end for
6: for ‡°Å ‡¢é D‡¢§ 1 to 1 do
7:
8:
9:
10:
11:
12: end for
13: return JHAA;
for all @A at level ‡°Å do
F ‡¢é =>A F=EHIFI@A, the labels for the gate corresponding to @A in the JHAA;
@AABJ+DE@=>A ‡¢é -?@A?A‡¢Ø‡¢ØF=>A@AABJ+DE@?A;
@AHECDJ+DE@=>A ‡¢é -?@A?A‡¢Ø‡¢ØF=>A@AHECDJ+DE@?A;
end for
if  is valid then
Algorithm 2 treeEval(JHAA MEHA =>AI)
1: IC ‡¢é 0;
2: ?KHHAJ @A ‡¢é JHAAHJ;
3: while ?KHHAJ @A has children do
4:  ‡¢é ,A?IC‡¢Ø‡¢ØMEHA =>AIFI?KHHAJ @A?KHHAJ @AABJ+DE@=>A;
5:
6:
7:
8:
9:
10:
11:
12: end while
13: return IC;
IC ‡¢é ;
?KHHAJ @A ‡¢é ?KHHAJ @AABJ+DE@;
IC ‡¢é ,A?IC‡¢Ø‡¢ØMEHA =>AIFI?KHHAJ @A?KHHAJ @AHECDJ+DE@=>A;
?KHHAJ @A ‡¢é ?KHHAJ @AHECDJ+DE@;
end if
else
connected by a LAN. Both machines are homogeneously
conÔ¨Ågured, each with an Intel Xeon CPU (E5504) running
at 2.0GHz. The JVMs are conÔ¨Ågured with a memory cap of
4GB, both on the server and the client.
We use randomly generated 640-entry vectors as our
benchmark. Note that we are not evaluating the Ô¨Ånger-
print matching algorithm here, since our privacy-preserving
protocol uses exactly the original Ô¨Ålterbank-based Ô¨Ånger-
print matching algorithm which has been extensively eval-
uated [7]. The evaluation time is independent of the actual
Ô¨Ångerprint vectors. In our experiments, the client‚Äôs feature
vector is randomly picked from the feature vectors in the
database.
Our implementation used the following parameters: in
the Euclidean-distance protocol, the bit length allocated for
each packed value (i.e., Œ∏) was 64 and the bit length of the
random mask was 45. We use Paillier encryption with a
1024-bit modulus. We set Œµ to be a 16-bit integer. In our
garbled circuit implementation, 80-bit wire labels are used.
Table 4 shows the running time and bandwidth usage for
our protocol as a function of M, the number of entries in the
database. We report the computation time and bandwidth
for each of eight protocol sub-stages. The Ô¨Årst three sub-
stages are preparation sub-stages, which do not depend on
the candidate Ô¨Ångerprint and only need to be done once: (1)
Euclidean distance preparation (Distance): the server com-
puting and transmitting the encrypted packed columns and
(cid:74)S1(cid:75)); (2) Garbled circuit preparation (Circuit): the server
generating the SubReduceMin garbled circuit (except for
the wire labels and garbled tables, which must be regen-
erated for each execution); (3) OT preparation (OT): the
preparation steps for the oblivious transfer. The prepara-
tion time is dominated by the time required to compute the
encrypted distance vectors, which scales approximately lin-
early with the size of the database. Since this is done only
once by the server, though, it is not prohibitively expen-
sive even for large databases. The preparation phase of the
OT protocol depends only on the security parameters we
choose, so its cost does not scale with M.
The Ô¨Ånal Ô¨Åve sub-stages are the execution sub-stages
which must be done once for each candidate Ô¨Ångerprint ex-
ecution: (4) Euclidean distance protocol execution (Dis-
tance), (5) the server resetting the initial input wire la-
bels and transmitting the wire labels representing her in-
put to the client (Reset Labels), (6) the client learning the
wire labels corresponding to his inputs obliviously (OT);
(7) garbled circuit evaluation, including the server‚Äôs gen-
erating and transmitting the intermediate wire labels and
garbled truth tables and the client‚Äôs evaluating the circuit
(Circuit), and (8) the backtracking protocol (Backtracking),
which comprises generating, transmitting, and evaluating
the backtracking step.
The distance protocol dominates the execution time.
The other two substantial sub-stages are circuit and OT, and
the time for the backtracking protocol is negligible. As ex-
pected, the results in Table 4 conÔ¨Årm that every sub-stage of
the execution phase scales approximately linearly with the
size of the database. The bandwidth in the execution phase
is dominated by the circuit, due to transmitting a large num-
ber of garbled truth tables. This is dominated by trafÔ¨Åc from
the server to the client, which accounts for 88% of the over-
all trafÔ¨Åc.
8 Related Work
The protocols presented here build upon, and could be
applied to improve the efÔ¨Åciency of, several previous sys-
tems for privacy-preserving biometric identiÔ¨Åcation.
Erkin et al. [5] developed an efÔ¨Åcient privacy-preserving
face recognition system based on the standard Eigenfaces
recognition algorithm. Similar to our work, it also com-
putes Euclidean distances between vectors using additive
homomorphic encryption. Their work does not use garbled
circuits but relies heavily on homomorphic encryption for
Database Size (M)
Time/Bandwidth
Distance
Circuit
Prep.
OT
Distance
Reset Labels
OT
Circuit
Backtracking
Exec.
Exec Sub-Total
128
256
512
1024
s
145.08
0.35
0.52
1.68
0.01
0.13
0.39
0.01
2.22
KB
1288.99
None
21.91
2.93
57.94
237.13
656.14
12.70
966.84
s
277.35
1.09
0.48
3.36
0.03
0.25
0.67
0.02
4.33
KB
2577.25
None
21.91
5.21
115.72
467.69
1313.64
25.45
1927.71
s
555.87
2.95
0.48
6.82
0.08