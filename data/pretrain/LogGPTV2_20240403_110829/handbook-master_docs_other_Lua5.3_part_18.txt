> math.asin (x)
返回 x 的反正弦值（用弧度表示）。
### math.atan
> math.atan (y [, x])
返回 y/x 的反正切值（用弧度表示）。 它会使用两个参数的符号来找到结果落在哪个象限中。 （即使 x 为零时，也可以正确的处理。）
默认的 x 是 1 ， 因此调用 math.atan(y) 将返回 y 的反正切值。
### math.ceil
> math.ceil (x)
返回不小于 x 的最小整数值。
### math.cos
> math.cos (x)
返回 x 的余弦（假定参数是弧度）。
### math.deg
> math.deg (x)
将角 x 从弧度转换为角度。
### math.exp
> math.exp (x)
返回 ex 的值 （e 为自然对数的底）。
### math.floor
> math.floor (x)
返回不大于 x 的最大整数值。
### math.fmod
> math.fmod (x, y)
返回 x 除以 y，将商向零圆整后的余数。 (integer/float)
### math.huge
浮点数 HUGE_VAL， 这个数比任何数字值都大。
### math.log
> math.log (x [, base])
返回以指定底的 x 的对数。 默认的 base 是 e （因此此函数返回 x 的自然对数）。
### math.max
> math.max (x, ···)
返回参数中最大的值， 大小由 Lua 操作  math.min (x, ···)
返回参数中最小的值， 大小由 Lua 操作  math.modf (x)
返回 x 的整数部分和小数部分。 第二个结果一定是浮点数。
### math.pi
π 的值。
### math.rad
> math.rad (x)
将角 x 从角度转换为弧度。
### math.random
> math.random ([m [, n]])
当不带参数调用时， 返回一个 [0,1) 区间内一致分布的浮点伪随机数。 当以两个整数 m 与 n 调用时， math.random 返回一个 [m, n] 区间 内一致分布的整数伪随机数。 （值 m-n 不能是负数，且必须在 Lua 整数的表示范围内。） 调用 math.random(n) 等价于 math.random(1,n)。
这个函数是对 C 提供的位随机数函数的封装。 对其统计属性不作担保。
### math.randomseed
> math.randomseed (x)
把 x 设为伪随机数发生器的“种子”： 相同的种子产生相同的随机数列。
### math.sin
> math.sin (x)
返回 x 的正弦值（假定参数是弧度）。
### math.sqrt
> math.sqrt (x)
返回 x 的平方根。 （你也可以使用乘方 x^0.5 来计算这个值。）
### math.tan
> math.tan (x)
返回 x 的正切值（假定参数是弧度）。
### math.tointeger
> math.tointeger (x)
如果 x 可以转换为一个整数， 返回该整数。 否则返回 nil。
### math.type
> math.type (x)
如果 x 是整数，返回 "integer"， 如果它是浮点数，返回 "float"， 如果 x 不是数字，返回 nil。
### math.ult
> math.ult (m, n)
如果整数 m 和 n 以无符号整数形式比较， m 在 n 之下，返回布尔真否则返回假。
## 输入输出库
I/O 库提供了两套不同风格的文件处理接口。 第一种风格使用隐式的文件句柄； 它提供设置默认输入文件及默认输出文件的操作， 所有的输入输出操作都针对这些默认文件。 第二种风格使用显式的文件句柄。
当使用隐式文件句柄时， 所有的操作都由表 io 提供。 若使用显式文件句柄， io.open 会返回一个文件句柄，且所有的操作都由该文件句柄的方法来提供。
表 io 中也提供了三个 和 C 中含义相同的预定义文件句柄： io.stdin， io.stdout， 以及 io.stderr。 I/O 库永远不会关闭这些文件。
除非另有说明， I/O 函数在出错时都返回 nil （第二个返回值为错误消息，第三个返回值为系统相关的错误码）。 成功时返回与 nil 不同的值。 在非 POSIX 系统上， 根据错误码取出错误消息的过程可能并非线程安全的， 因为这使用了 C 的全局变量 errno 。
### io.close
> io.close ([file])
等价于 file:close()。 不给出 file 时将关闭默认输出文件。
### io.flush
> io.flush ()
等价于 io.output():flush()。
### io.input
> io.input ([file])
用文件名调用它时，（以文本模式）来打开该名字的文件， 并将文件句柄设为默认输入文件。 如果用文件句柄去调用它， 就简单的将该句柄设为默认输入文件。 如果调用时不传参数，它返回当前的默认输入文件。
在出错的情况下，函数抛出错误而不是返回错误码。
### io.lines
> io.lines ([filename ···])
以读模式打开指定的文件名并返回一个迭代函数。 此迭代函数的工作方式和用一个已打开的文件去调用 file:lines(···) 得到的迭代器相同。 当迭代函数检测到文件结束， 它不返回值（让循环结束）并自动关闭文件。
调用 io.lines() （不传文件名） 等价于 io.input():lines("*l")； 即，它将按行迭代标准输入文件。 在此情况下，循环结束后它不会关闭文件。
在出错的情况下，函数抛出错误而不是返回错误码。
### io.open
> io.open (filename [, mode])
这个函数用字符串 mode 指定的模式打开一个文件。 返回新的文件句柄。 当出错时，返回 nil 加错误消息。
mode 字符串可以是下列任意值：
- "r": 读模式（默认）；
- "w": 写模式；
- "a": 追加模式；
- "r+": 更新模式，所有之前的数据都保留；
- "w+": 更新模式，所有之前的数据都删除；
- "a+": 追加更新模式，所有之前的数据都保留，只允许在文件尾部做写入。
mode 字符串可以在最后加一个 'b' ， 这会在某些系统上以二进制方式打开文件。
### io.output
> io.output ([file])
类似于 io.input。 不过都针对默认输出文件操作。
### io.popen
> io.popen (prog [, mode])
这个函数和系统有关，不是所有的平台都提供。
用一个分离进程开启程序 prog， 返回的文件句柄可用于从这个程序中读取数据 （如果 mode 为 "r"，这是默认值） 或是向这个程序写入输入（当 mode 为 "w" 时）。
### io.read
> io.read (···)
等价于 io.input():read(···)。
### io.tmpfile
> io.tmpfile ()
返回一个临时文件的句柄。 这个文件以更新模式打开，在程序结束时会自动删除。
### io.type
> io.type (obj)
检查 obj 是否是合法的文件句柄。 如果 obj 它是一个打开的文件句柄，返回字符串 "file"。 如果 obj 是一个关闭的文件句柄，返回字符串 "closed file"。 如果 obj 不是文件句柄，返回 nil 。