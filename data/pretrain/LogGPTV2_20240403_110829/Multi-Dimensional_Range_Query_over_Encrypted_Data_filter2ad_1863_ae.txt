yky2}, where(cid:11)µ
and(cid:11)µ
(cid:11)µx and(cid:11)µy. Of course, in the real construction, (cid:11)µx and(cid:11)µy (
(cid:11)µ
x and (cid:11)µ
(e.g., (cid:11)µx(cid:11)µy = (cid:11)µ
x(cid:11)µ
time we issue a decryption key. Likewise, when releasing
(cid:1)
x
(cid:1)
y are two random numbers picked independently from
(cid:1)
y) also need to satisfy certain algebraic properties
(cid:1)
y = some invariant) to preserve the in-
ternal consistency of our scheme. In this way, components in
the decryption key for R1 cannot be used in combination with
components in the decryption key for R4.
xkx2,(cid:11)µ
(cid:1)
(cid:1)
(cid:1)
(cid:1)
5.2 The Main Construction
We are now ready to describe our construction. Deﬁne
L = O(log T ) to represent the height of a tree. Assume
that node IDs are picked from Z∗
p. We append a message
Msg ∈ {0, 1}m with a series of trailing zeros, 0m(cid:1)
, prior to
encryption. Assume that {0, 1}m+m(cid:1) ⊆ G(cid:1)
Setup(Σ, L∆) To generate public parameters and the mas-
ter private key, the setup algorithm ﬁrst generates a bilinear
, g,e] R← Gen(Σ). Then, the setup
instance G = [p, G, G(cid:1)
algorithm does the following.
.
random the following parameters
from
1. Select at
:
Z8DL+1
p
(cid:12)
(cid:13)
(cid:1)
ϕ,1, θ
(cid:1)
ϕ,2
ϕ=(d,l)
∈[D]×[L]
ω,
αϕ,1, αϕ,2, βϕ,1, βϕ,2, θϕ,1, θϕ,2, θ
In addition, we require that the α’s and the β’s be
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007forcibly non-zero. At this point, we give a brief expla-
nation of our notation. The variable ϕ is used to index a
tuple (d, l) ∈ [D] × [L], where d denotes the dimension
and l denote the depth of a node in the corresponding
tree.
2. Publish G and the following public parameters PK ∈
G(cid:1) × G8DL:
 aϕ,1 ← gαϕ,1θϕ,1, aϕ,2 ← gαϕ,2θϕ,2,
Ω ← e(g, g)ω,
ϕ,2 ← gαϕ,2θ(cid:1)
ϕ,1 ← gαϕ,1θ(cid:1)
(cid:1)
(cid:1)
ϕ,1, a
ϕ,2,
a
bϕ,1 ← gβϕ,1θϕ,1, bϕ,2 ← gβϕ,2θϕ,2,
ϕ,1 ← gβϕ,1θ(cid:1)
ϕ,2 ← gβϕ,2θ(cid:1)
(cid:1)
(cid:1)
ϕ,2,
ϕ,1, b
b
ϕ=(d,l)∈
[D]×[L]
3. Retain a master private key SK ∈ G8DL+1 comprising
ϕ=(d,l)
∈[D]×[L]
the following elements:
(cid:11)ω ← gω,
 aϕ,1 ← gαϕ,1 ,
bϕ,1 ← gβϕ,1,
yϕ,1 ← gαϕ,1βϕ,1θϕ,1,
ϕ,1 ← gαϕ,1βϕ,1θ(cid:1)
(cid:1)
ϕ,1,
y
aϕ,2 ← gαϕ,2,
bϕ,2 ← gβϕ,2,
yϕ,2 ← gαϕ,2βϕ,1θϕ,2,
ϕ,2 ← gαϕ,2βϕ,1θ(cid:1)
(cid:1)
y
ϕ,2
Notice that in the public parameters and the master key,
we have different versions of the same variable, e.g.,
(cid:1)
(cid:1)
ϕ,2. Although they seem to be redun-
aϕ,1, aϕ,2, a
ϕ,1, a
dant, they are actually need to provide sufﬁcient degrees
of randomness for our proof to go through. The reasons
for having these different versions will become clear
once the reader has gone over the detailed proof pro-
vided in the technical report version [43].
(cid:12)(cid:11)µd
(cid:20)
DeriveKey(PK, SK, B) The following steps compute the
decryption key for hyper-rectangle B, given public key PK
and master private key SK.
1. Pick O(D · L) random integers from GD × Z
(cid:13)
d∈[D](cid:11)µd = (cid:11)ω. The reason for having an
overhead tilde for the variable(cid:11)µd is to associate it with
the variable (cid:11)ω, since they both belong to the group G,
(cid:20)
d∈[D](cid:11)µd = (cid:11)ω. We
note that the random(cid:11)µd’s generated in this stage are later
and they satisfy the condition that
[λID,1, λID,2]ID∈Λ∪(B)
2|Λ∪(B)|
p
such that
d∈[D],
:
used to re-randomize the components of the decryption
key.
In this way, components in different dimensions
are tied to each other; and components from one decryp-
tion key cannot be used in combination with components
from another decryption key. This is how we prevent the
collusion attack as shown in Figure 2 (b).
2. Compute and release a decryption key DK ∈
G5|Λ∪(B)|
. DK is composed of a portion DK(ID)
for each ID ∈ Λ∪(B). In the following deﬁnition for
DK(ID), ϕ = (d, l) = Φ(ID) represents the dimen-
sion and depth of node ID; without risk of ambiguity,
denote λ1 = λID,1, λ2 = λID,2. DK(ID) is deﬁned
below:
yID
ϕ,1y
(cid:1)
ϕ,1
yID
ϕ,2y
(cid:1)
ϕ,2
, a−λ1
ϕ,1 , b−λ1
ϕ,1 , a−λ2
ϕ,2 , b−λ2
ϕ,2
(cid:5)λ1
(cid:4)
(cid:5)λ2
(cid:4)
(cid:11)µd
Observe that we release a portion of the decryption key
for each node in Λ∪(B), as opposed to for each hyper-
rectangle in Λ×(B). In this way, the size of the private
key is O(DL), instead of O(LD). Also observe that we
multiply the ﬁrst element of DK(ID) by(cid:11)µd. This illus-
trates the binding technique used to tie together compo-
nents in different dimensions. In this way, components
in one decryption key cannot be used in combination
with components in another decryption key; therefore,
we successfully prevent the collusion attack.
,
ϕ=(d,l)∈
[D]×[L]
Encrypt(PK, X, Msg) We create a block in the ciphertext
for every ID ∈ P∪(X). Equivalently, for each dimension d
and depth l, denote ϕ = (d, l), we create a portion of the ci-
phertext corresponding to the node Iϕ, residing in the dth tree
at depth l, on the path Pd(X) to the root. We now describe
the Encrypt algorithm in the following steps:
1. Select 2DL + 1 random integers: select r ∈R Zp, select
2. For ϕ = (d, l) ∈ [D] × [L], deﬁne Iϕ = Iϕ(X), i.e.,
the node at depth l in Pd(X) in the dth dimension. Now
compute and output the following ciphertext C ∈ G(cid:1) ×
(cid:21)
G4DL+1:
[rϕ,1, rϕ,2]ϕ=(d,l)∈[D]×[L] ∈R Z2DL
(cid:22)
p
.
rϕ,1
) · Ω−r, gr,
, (aϕ,1
, (aϕ,2
rϕ,2
(Msg||0m(cid:1)
Iϕ b
(cid:1)
ϕ,1)
(bϕ,1
Iϕ b
(cid:1)
ϕ,2)
(bϕ,2
(cid:9)
ϕ,1)r−rϕ,1
Iϕa
(cid:1)
ϕ,2)r−rϕ,2
(cid:1)
Iϕa
(cid:10)
(cid:1)(cid:1) ID ∈ Λ∪(B)
DK(ID)
QueryDecrypt(PK, DK, C) We ﬁrst give an overview
on how QueryDecrypt works. Recall that a decryption
key DK =
is composed of a
portion DK(ID) for each ID ∈ Λ∪(B). We now re-
construct a decryption key for each simple hyper-rectangle
idB0 ∈ Λ×(B) as below. We grab from DK a sub-key from
each dimension: for each d ∈ [D], grab a sub-key DK(IDd)
from the dth dimension, where IDd ∈ Λd(B). The collec-
tion of sub-keys {DK(ID1), DK(ID2), . . . , DK(IDD)}
can now be jointly used to decrypt a message encrypted under
the simple hyper-rectangle idB0 = (ID1, . . . , IDD).
(cid:24)
We also need to ﬁnd the correct blocks in the ciphertext
to apply this key for idB0. Recall that the ciphertext is of
c, c0, [cϕ,1, cϕ,2, cϕ,3, cϕ,4]ϕ=(d,l)∈[D]×[L]
the form C =
.
For convenience, denote cϕ := [cϕ,1, cϕ,2, cϕ,3, cϕ,4] for
ϕ = (d, l) ∈ [D] × [L]. cϕ is the block in the ciphertext
corresponding to a node in the dth dimension and at depth l
of the tree. Deﬁne Φ(ID) := (d, l) to extract the dimension
and depth of the node ID. Now for a sub-key DK(ID), de-
ﬁne ϕ = Φ(ID), it is not hard to see that DK(ID) should
be used in combination with the block cϕ in the ciphertext.
(cid:23)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:54:17 UTC from IEEE Xplore.  Restrictions apply. 
2007 IEEE Symposium on Security and Privacy(SP'07)0-7695-2848-1/07 $20.00  © 2007For
each
simple
=
The following algorithm iterates through the simple hyper-
rectangles in Λ×(B) and checks if the ciphertext can de-
crypt to a valid message under each simple hyper-rectangle
in Λ×(B).
{(ID1, ID2, . . . , IDD)} ⊆Λ ×(B),
(1) Let DK(IDd) = (kIDd,0, kIDd,1, kIDd,2, kIDd,3, kIDd,4)
hyper-rectangle Λ×(B0)
represent the element in DK for IDd, where d ∈ [D].
(2) Try to decrypt C under B0 with the collection
{DK(ID1), DK(ID2), . . . , DK(IDD)} of sub-keys:
V ← c ·
(cid:8)
e(c0, kIDd,0) · e(cϕd,1, kIDd,1)
(cid:25)
ϕd=Φ(IDd)
d∈[D],
(cid:7)
· e(cϕd,2, kIDd,2) · e(cϕd,3, kIDd,3) · e(cϕd,4, kIDd,4)
If V is of the form (cid:2)Msg||0m(cid:1)
decrypted plaintext and exit.
, then output (cid:2)Msg as the
If for all simple hyper-rectangles in Λ×(B), the previous step
fails to produce the plaintext, then output ⊥.
When done naively, the above QueryDecrypt algo-
rithm takes O(D(log T )D) time. However, if one saves in-
termediate results, it can be done in O((log T )D) time with
O(D log T ) storage. The above numbers takes into account
all group operations, include multiplication, exponentiation
and bilinear pairing. However, since a pairing operation is
typically more expensive than exponentiation (and far more
expensive than multiplication) in known bilinear groups, we
are particularly interested in reducing the number of pair-
ings at time of decryption. Notice that we can precompute
all pairings e(c0, kIDd,0) and pairings e(cϕd,i, kIDd,i) for
1 ≤ i ≤ 4, and store the results in a look-up table. There-
fore, the decryption algorithm requires O(D log T ) pairings
in total.
6 Consistency, Security
The following two theorems state the consistency and se-
curity of our MRQED construction.
Theorem 6.1 (Internal consistency). The above deﬁned
MRQED construction satisﬁes the consistency requirement
posed by Equation (1).
Theorem 6.2 (Selective security). The above deﬁned
MRQED construction