  * thread apply all bt：查看所用线程堆栈调用信息。
  * info locals（简写 i locals）：显示当前堆栈页的所有变量。
  * info functions sefunction：查询函数sefunction的信息（函数定义实现的位置信息：文件、行号、代码）。
  * stack n: 显示n个单元的栈信息。
**《扩展指令》**
  * peda/pwndbg：查看可用命令（使用对应插件时使用）
**插件辅助**
GDB调试常用插件：peda、pwndbg、gef，每次启动GDB只能加载一个插件，针对多个插件的处理可以写一个启动选择脚本或者在gdb的配置文件中手动生效某个插件（看个人习惯）。
**peda**
  * 安装
    git clone https://github.com/longld/peda.git ~/peda
    echo "source ~/peda/peda.py" >> ~/.gdbinit
  * 关闭peda插件因每次启动使用而自动生成session文件
在peda目录下，`cd lib`进入`lib`目录，在config.py里找到autosave选项，然后找到on这个词，改成off，即可关闭。
**pwndbg**
  * 安装
    git clone https://github.com/pwndbg/pwndbg
    cd pwndbg
    ./setup.sh
**gef**
  * 安装
    $ wget -O ~/gdbinit-gef.py --no-check-certificate http://gef.blah.cat/py
    $ echo source ~/gdbinit-gef.py >> ~/.gdbinit
####  Glibc
**1、基础介绍**
`GNU C`库项目提供了`GNU`系统和`GNU/Linux`系统以及使用Linux作为内核的许多其他系统的核心库。这些库提供了关键的API，包括ISO
C11，POSIX.1-2008，BSD，特定于操作系统的API等。
官方：介绍、Wiki
  * [The GNU C Library (glibc)](http://www.gnu.org/software/libc/)
  * [Glibc Wiki](https://sourceware.org/glibc/wiki/HomePage)
**2、系统查看**
  * 查看系统信息：GNU/Linux
     → Qftm :/# uname -a
    Linux toor 5.9.0-kali1-amd64 #1 SMP Debian 5.9.1-1kali2 (2020-10-29) x86_64 GNU/Linux
     → Qftm :/#
  * Debian下查看共享链接库
查看共享链接库版本信息
     → Qftm :~/Desktop# dpkg -l libc6 
    Desired=Unknown/Install/Remove/Purge/Hold
    | Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
    |/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
    ||/ Name           Version      Architecture Description
    +++-==============-============-============-=================================
    ii  libc6:amd64    2.31-5       amd64        GNU C Library: Shared libraries
     → Qftm :~/Desktop#
编写简单的C程序来查看系统的动态链接库位置
    #include
    int main(){
        printf("Hello World!\n");
        return 0;
    }
编译运行
     → Qftm ← :~/桌面# gcc te.c -o te
     → Qftm ← :~/桌面# ./te
    Hello World!
     → Qftm ← :~/桌面#
查看系统的动态链接库位置
     → Qftm ← :~/桌面# ldd te
        linux-vdso.so.1 (0x00007ffee03a7000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc1bf9b2000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fc1bfb8d000)
     → Qftm ← :~/桌面#
**3、在线源码**
woboq提供的项目，可以在线查看glibc源代码
    https://code.woboq.org/userspace/glibc/
**4、源码下载**
各版本glibc源码下载地址
    官方镜像仓库：http://ftp.gnu.org/gnu/glibc/
    华中科技大学镜像仓库：http://mirror.hust.edu.cn/gnu/glibc/
由于测试系统Glibc版本为2.31，所以这里下载`glibc-2.31`源代码项目，后续底层审计分析需要用到。
####  Source Insigh
在Windows平台使用`Source Insight 4`进行PHP内核源码的审计工作，具体参考上述`PHP for Windows`部分介绍。
###  源码编译
进入php7.2.9源码项目中，先构建生成`configure`文件：默认官方下载的源码项目中包含`configure`，这里为了避免出现不必要的错误，采取强制重新生成`configure`文件。
    ~/php-7.2.9-linux-debug# ./buildconf --force
生成configure脚本文件后，就可以开始编译了。为了调式PHP源码，这里同`PHP for
Windows`部分，编译disable所有的扩展（除了一些必须包含的），使用下面的命令来完成编译安装的工作，安装的路径为`/mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/Debug`：
    ~/php-7.2.9-linux-debug# ./configure --disable-all --enable-debug --prefix=/mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/Debug
    ............
    ~/php-7.2.9-linux-debug# make -j4
    ............
    ~/php-7.2.9-linux-debug# make install
    ............
注意这里的`prefix`的参数必须为绝对路径，所以不能写成`./Debug`这类形式。需要注意一下，这里是以调试模式在编译PHP内核源码，所以需要设置一下`prefix`参数，不然PHP会被安装到系统默认路径中，影响后续的调试。另外两个编译参数，一个是`--disable-all`，这个表示禁止安装所有扩展（除了一个必须安装的），另外一个就是`--enable-debug`，这个选项表示以debug模式编译PHP源码，相当于`gcc`的`-g`选项编译c代码，它会把调试信息编译进最终的二进制程序中以方便对程序的调试。
上面的命令`make -jN`，N表示你的CPU数量（或者是CPU核心的数量），设置了这个参数后就可以使用多个CPU进行并行编译，这可以提高编译效率。
编译完成后，最终用于调式的PHP二进制可执行程序会安装在`./Debug`这个文件夹中。
查看编译的php.exe
     → Qftm :/mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/Debug/bin# ./php -v
    PHP 7.2.9 (cli) (built: Nov 20 2020 01:34:01) ( NTS DEBUG )
    Copyright (c) 1997-2018 The PHP Group
    Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
     → Qftm :/mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/Debug/bin#
###  源码调试
####  Visual Studio Code
同`PHP for Windows->源码调试`创建相应的`launch.json`调试配置文件，修改配置如下
    {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Linux PHP7.2.9 Source Code Debug",
                "type": "cppdbg",
                "request": "launch",
                "program": "${workspaceRoot}/Debug/bin/php",
                "args": ["${file}"],
                "stopAtEntry": false,
                "cwd": "${workspaceRoot}/Debug/bin",
                "environment": [],
                "externalConsole": false,
                "MIMode": "gdb",
                "miDebuggerPath": "/bin/gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ]
            }
        ]
    }
PS：注意这里需要存在扩展 `C/C++`。
打开`php-7.2.9-linux-debug/sapi/cli/php_cli.c`源文件，定位到1200行的main函数内打上断点。【在想要调试的源代码特定位置上打上特定的断点即可】
####  GDB
进入编译好的PHP可执行文件目录下
    $ cd Debug/bin
加载待调式的PHP文件
    # gdb --args ./php -f test1.php      
    GNU gdb (Debian 10.1-1+b1) 10.1
    Copyright (C) 2020 Free Software Foundation, Inc.                                                                                                                              
    License GPLv3+: GNU GPL version 3 or later 
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.
    Type "show copying" and "show warranty" for details.
    This GDB was configured as "x86_64-linux-gnu".
    Type "show configuration" for configuration details.
    For bug reporting instructions, please see:
    .
    Find the GDB manual and other documentation resources online at:
        .
    For help, type "help".
    Type "apropos word" to search for commands related to "word"...
    pwndbg: loaded 188 commands. Type pwndbg [filter] for a list.
    pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
    Reading symbols from ./php...
    pwndbg>
对程序入口函数下断点，并查看断点信息
    pwndbg> b main
    Breakpoint 1 at 0x46430e: file /mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/sapi/cli/php_cli.c, line 1216.
    pwndbg> i b
    Num     Type           Disp Enb Address            What
    1       breakpoint     keep y   0x000000000046430e in main at /mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/sapi/cli/php_cli.c:1216
    pwndbg>
运行至断点处
    pwndbg> r
单步调式：n、ni、s、si
    pwndbg> n
###  源码执行
####  任务执行
同`PHP for Windows->源码执行->任务执行`创建相应的tasks.json任务文件，修改配置如下
    // tasks.json
    {
        "version": "2.0.0",
        "tasks": [
            {
                "label": "Linux php",
                "type": "shell",
                "command": "/mnt/hgfs/QSec/Code-Audit/PHP/PHP-Source-Code/php-7.2.9-linux-debug/Debug/bin/php",
                "args": [
                    "${file}"
                ]
            }
        ]
    }
任务执行效果
####  插件执行
除了上方创建任务执行程序外，还可以借助插件`code runner`更加方便的去执行程序
`code runner`自带的默认对PHP运行的配置规则如下
    "code-runner.executorMap": {
         "php": "php"
    }
默认配置使用的是环境变量中的php去执行的，可以更改设置为自己的php路径【避免与环境变量中其它的php发生冲突】
点击`settings->Extensions->Run Code configuration->Executor Map->Edit in
settings.json`进行设置
插件运行效果
## 参考链接
  * [Build your own PHP on Windows](https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2)
  * [Visual Studio docs](https://visualstudio.microsoft.com/zh-hans/vs/)
  * [Visual Studio Code docs](https://code.visualstudio.com/docs)
  * [《PHP 7底层设计与源码实现+PHP7内核剖析》](https://item.jd.com/28435383700.html)
  * [深入理解 PHP 内核](https://www.bookstack.cn/books/php-internals)
  * [WINDOWS下用VSCODE调试PHP7源代码](https://www.jianshu.com/p/29bc0443b586)
  * [调式PHP源码](https://gywbd.github.io/posts/2016/2/debug-php-source-code.html)
  * [用vscode调试php源码](https://blog.csdn.net/Dont_talk/article/details/107719466)
  * [GDB: The GNU Project Debugger](http://www.gnu.org/software/gdb)
  * [CreateProcessW function](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw)
  * [命令注入成因小谈](https://xz.aliyun.com/t/6542)
  * [浅谈从PHP内核层面防范PHP WebShell](https://paper.seebug.org/papers/old_sebug_paper/pst_WebZine/pst_WebZine_0x05/0x07_%E6%B5%85%E8%B0%88%E4%BB%8EPHP%E5%86%85%E6%A0%B8%E5%B1%82%E9%9D%A2%E9%98%B2%E8%8C%83PHP_WebShell.html)
  * [Program execution Functions](https://www.php.net/manual/en/ref.exec.php)
  * [linux系统调用](http://huhaipeng.top/2019/04/20/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/)
  * [system calls](https://fedora.juszkiewicz.com.pl/syscalls.html)