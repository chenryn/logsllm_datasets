primitives and types inhabited by keys. In contrast to SImp,
12
/
/
)
)
/
5
5








KDLM security typing is nominal‚Äîlabels have names and
each name corresponds to a unique cryptographic key.
While they prove type soundness, Chothia and colleagues
do not provide more speciÔ¨Åc security theorems such as non-
interference.
Our pack/unpack language feature can be compared
with both dynamic types [2] and standard existential types
[24]. Like typecase, unpack may fail at runtime; the stan-
dard existential unpack always succeeds. As with dynam-
ic/typecase, our pack/unpack does not provide direct sup-
port for abstract datatypes; existentials usually do. A more
reÔ¨Åned approach to pack/unpack might use type annota-
tion to expose the internal structure of encrypted values; this
would resemble a existential package with a bounded type
variable.
Sumii and Pierce [31] studied Œªseal, an extension to
lambda calculus with terms of form {e}e0, meaning e
sealed-by e0, and a corresponding elimination form. Like
Askarov and colleagues, they make seal (i.e. key) genera-
tion explicit in program text; however their dynamic seman-
tics, which include runtime checking of seals, is simpler
than Askarov‚Äôs. Œªseal includes black-box functions that an-
alyze sealed values, but cannot be disassembled to reveal
the seal (key). It is not clear how to interpret such functions
in a cryptographic model.
Heintze and Riecke‚Äôs SLam calculus [19] is an infor-
mation Ô¨Çow lambda calculus in which the right to read a
closure corresponds to the right to apply it. This sidesteps
the black-box function issue from Œªseal. In SLam, some
expressions are marked with the authority of the func-
tion writer. The annotations control declassiÔ¨Åcation, and,
we conjecture, are analogous to the pretranslated labels in
SImp. Additionally SLam types have a nested form where,
for example, the elements in a list and the list itself may be
given different security annotations. Combined with pack,
such nesting could facilitate deÔ¨Åning data structures with
dynamic and heterogeneous security properties.
We use the algebraic Dolev-Yao model to study the con-
nection connection between information Ô¨Çow and cryptog-
raphy. Laud and Vene [21] examined this problem using a
computational model of encryption. More recently, Smith
and Alp¬¥ƒ±zar extended this work to include a model of de-
cryption [30]. They prove noninterference for a simple lan-
guage without declassiÔ¨Åcation (or packing) and a two-point
security lattice. Like Chothia and colleagues, they map la-
bels to Ô¨Åxed keys.
Abadi and Rogaway proved that Dolev-Yao analysis is
sound with respect to computational cryptographic analysis
in a setting similar to our own [3]. While the inference sys-
tem in Figure 7 was inÔ¨Çuenced by their formalism, there are
signiÔ¨Åcant differences in approach. In particular, Abadi and
Rogaway do not discuss public key cryptography, which we
use extensively. Backes and PÔ¨Åtzmann [6] with Waidner [7]
have also investigated the connection between symbolic and
computational models of encryption. They deÔ¨Åne a Dolev-
Yao style library and show that protocols proved secure with
respect to library semantics are also secure with respect to
computational cryptographic analysis. This library might
provide an excellent foundation for further rigorous analy-
sis of SImp.
5 Discussion
Information Ô¨Çow languages often provide escape hatches
to declassify secrets or endorse untrusted input. While these
mechanisms allow violations of language policies, they iso-
late locations where leaks can occur and are quite useful
in practice. Unfortunately, languages with unrestricted de-
classiÔ¨Åcation and endorsement no longer enjoy simple non-
interference, leading to complex metatheory [10]. SImp‚Äôs
pack and unpack operators provide a middle ground. Like
declassify, pack lowers conÔ¨Ådentiality policies, and, like
endorse, unpack lowers integrity label policies. However,
packing and unpacking are not as general as declassiÔ¨Åca-
tion and endorsement. For example, pack/unpack cannot be
used to make public the result of a password check‚Äîa clas-
sic use of declassiÔ¨Åcation. The advantage of pack/unpack,
is that they preserve non-interference and are thus safer than
declassify/endorse. Thus these constructs are complemen-
tary. We believe a practical information Ô¨Çow language could
include both.
5.1 Comparison with other DLMs
Several decentralized label models are discussed in the
literature. As originally formulated by Myers and Liskov,
structurally deÔ¨Åned labels described only conÔ¨Ådentiality
(or, dually, integrity) policies [22]. Later research treated
conÔ¨Ådentiality and integrity simultaneously. Zdancewic
and Tse examined a DLM where integrity polices deÔ¨Åne
a ‚Äútrusted by‚Äù relation [32]. In contrast, Myers and Chong
treat integrity as we do, with the ‚Äúwritten by‚Äù interpreta-
tion [10]. Lastly, Chothia, Duggan, and Vitek‚Äôs KDLM
blends structural and nominal label semantics [12].
Our DLM differs signiÔ¨Åcantly from Myers and Liskov‚Äôs
original presentation [22], which gives labels a more restric-
tive interpretation. For example, in our setting label
‚Äò = {Alice : Alice, Charlie !‚àÖ; Bob : Bob, Charlie !‚àÖ}
can be read with the authority of {Alice, Bob} or just
Charlie. Myers requires Charlie‚Äôs authority to read ‚Äò. (Of
course, Alice and Bob may conspire to Ô¨Årst declassify and
then read‚Äîbut it‚Äôs important not to conÔ¨Çate this with sim-
ple reading.) Our choice of interpretation was motivated
by the constraints inherent in cryptographically translating
13
In particular, Lemma 3 would not hold under
packages.
Myers and Liskov‚Äôs interpretation. However, we could re-
tain this result by changing the deÔ¨Ånition of V[[¬∑]]¬∑ to use
share semantics. Under share semantics, hvi‚Äò is translated
by generating a fresh key pair and encrypting v with the
public key. Cryptographic shares of the fresh keys are dis-
tributed according to each owner‚Äôs read and write policy.
With mutual distrust among owners, no owner should be
able to learn the fresh keys except as permitted by the reads
and writes relations. This requires generating key shares
without revealing the underlying keys. We hoped to do so
with threshold cryptography [15], but current approaches
expose one key of the pair.
Previous DLMs include a partial order on principals
called the acts-for hierarchy [22]. If p (cid:31) q then principal
p is assumed to have the authority of q. If œÉ is p‚Äôs crypto-
graphic state, œÉ ‚Äòu K‚àí
q models this acts-for relation in our
setting. This is a course-grained form of delegation. The
correct cryptographic implementation of the acts for hier-
archy is not clear. A naive implementation might provide
Alice with Bob‚Äôs private key when Alice (cid:31) Bob. However
this has practical shortcomings: revocation is impossible,
and Bob cannot selectively grant Alice rights. A more so-
phisticated protocol might require that Bob provide Alice
with a network service or a smart card that can selectively
provide encryption and signing services.
5.2 Language Extensions
SImp is a core language for programming with informa-
tion Ô¨Çow and packing. Future work may extend it with sev-
eral new constructs.
Currently SImp programs must unpack packages to com-
pute with their contents. Alternatively, the rule
p; M ‚Äò v1 + v2 ‚Üí v3
p; M ‚Äò hv1i‚Äò + hv2i‚Äò ‚Üí hv3i‚Äò
BIND
would permit computation within packages.
(The name
BIND follows the monadic interpretation of security state-
ments in Abadi‚Äôs Dependency Core Calculus [1].) While
BIND can be implemented using the homomorphic proper-
ties of the Goldwasser-Micali cryptosystems, they cannot
sustain an analogous multiplication rule. Other systems
(e.g. RSA) would support multiplication but not addition.
Unfortunately, current cryptosystems can only provide efÔ¨Å-
cient homomorphic computation over a single algebraic op-
erator. A more general bind would require an efÔ¨Åcient ho-
momorphic algebraic (i.e. additive and multiplicative) cryp-
tosystem; the existence of such schemes is an open prob-
lem [26].
Imperative update of packed values is compatible with
SImp‚Äôs semantics. The operational semantics might look
like
p writes ‚Äò
p; M ‚Äò put v in hv0i‚Äò ‚Üí inl hvi‚Äò
PUT
.
PUT assigns a low (trusted, public) value into a high
(tainted, secret) package; this is straightforward to type-
check and dynamically safe. What distinguishes packing
and writing? Compiling a pack requires the creation of
a new envelope, which in turn requires the owners‚Äô keys.
In contrast, a put reuses dynamically acquired envelopes
and requires no compile-time keys. Our model assumes that
programs are compiled with the authority of all owners; thus
PUT conveys no particular advantage. It may be useful un-
der weaker assumptions, such as those encountered in the
context of program partitioning [35].
Lastly, SImp could allow programs to strengthen the la-
bel of a (potentially unreadable) package. In full generality,
‚Äò1 ‚â§ ‚Äò2
.
STRENGTHEN
p; M ‚Äò strengthen hvi‚Äò1 to ‚Äò2 ‚Üí hvi‚Äò2
In the case of a DLM, ‚Äò2 may be more restrictive than ‚Äò1
in two ways: ‚Äò2 may have new that policies ‚Äò1 does not, or
‚Äò2 may have more restrictive policies than ‚Äò1. In the former
case, it is straightforward to append the new policy‚Äôs seal to
‚Äò1‚Äôs envelope and Ô¨Ånish the construction of V[[hvi‚Äò2]]. How-
ever, it is not clear what to do in the second case.
Conclusion It is important to consider the interplay be-
tween cryptography and information-Ô¨Çow in the context of
language-based security. This paper has investigated one
design for high-level language features that make it easy for
to connect a secure program‚Äôs conÔ¨Ådentiality and integrity
labels with an underlying cryptographic implementation.
Our package mechanism complements existing, more gen-
eral approaches to downgrading, but has the advantage of
yielding a strong noninterference result against Dolev-Yao
attackers. We expect that such packages will be useful for
building systems that enforce strong security policies, even
when conÔ¨Ådential data must leave the conÔ¨Ånes of the trusted
run-time environment.
Acknowledgments We would like to thank the anony-
mous reviewers for their helpful comments and Peeter Laud
for his suggestions regarding the cryptographic semantics.
References
[1] M. Abadi. Access control in a core calculus of depen-
In ICFP ‚Äô06: Proceedings of the eleventh ACM
dency.
SIGPLAN international conference on Functional Program-
ming, pages 263‚Äì273, Portland, Oregon, USA, September
2006.
14
[2] M. Abadi, L. Cardelli, B. Pierce, and D. R¬¥emy. Dynamic
Journal of Functional
typing in polymorphic languages.
Programming, 5(1):111‚Äì130, January 1995.
[3] M. Abadi and P. Rogaway. Reconciling two views of cryp-
tography (the computational soundness of formal encryp-
tion). Journal of Cryptology, 15(2):103‚Äì127, 2002.
[4] A. Askarov, D. Hedin, and A. Sabelfeld. Cryptographically
masked information Ô¨Çows. In Proceedings of the Interna-
tional Static Analysis Symposium, LNCS, Seoul, Korea, Au-
gust 2006.
[5] A. Askarov and A. Sabelfeld. Security-typed languages for
implementation of cryptographic protocols: A case study. In
Proceedings of the 10th European Symposium on Research
in Computer Security (ESORICS), Milan, Italy, September
2005.
[6] M. Backes and B. PÔ¨Åtzmann. Relating symbolic and cryp-
tographic secrecy. IEEE Trans. Dependable Secur. Comput.,
2(2):109‚Äì123, 2005.
[7] M. Backes, B. PÔ¨Åtzmann, and M. Waidner. A composable
cryptographic library with nested operations. In CCS ‚Äô03:
Proceedings of the 10th ACM conference on Computer and
communications security, pages 220‚Äì230, Washington D.C.,
USA, 2003. ACM Press.
[8] D. E. Bell and L. J. LaPadula. Secure computer system: Uni-
Ô¨Åed exposition and Multics interpretation. Technical Report
ESD-TR-75-306, MITRE Corp. MTR-2997, Bedford, MA,
1975. Available as NTIS AD-A023 588.
[9] R. Chapman. Industrial experience with spark. Ada Lett.,
XX(4):64‚Äì68, 2000.
[17] D. Duggan. Cryptographic types. In CSFW ‚Äô02: Proceed-
ings of the 15th IEEE Computer Security Foundations Work-
shop (CSFW‚Äô02), page 238, Washington, DC, USA, 2002.
IEEE Computer Society.
[18] J. A. Goguen and J. Meseguer. Security policies and security
models. In Proc. IEEE Symposium on Security and Privacy,
pages 11‚Äì20. IEEE Computer Society Press, Apr. 1982.
[10] S. Chong and A. C. Myers. Decentralized robustness.
In
Proceedings of the 19th IEEE Computer Security Founda-
tions Workshop (CSFW‚Äô06), pages 242‚Äì253, Los Alamitos,
CA, USA, July 2006.
[11] S. Chong, A. C. Myers, K. Vikram, and L. Zheng.
Available from
June 2006.
Jif Reference Manual,
http://www.cs.cornell.edu/jif.
[12] T. Chothia, D. Duggan, and J. Vitek. Type based distributed
access control. In Proceedings of the 16th IEEE Computer
Security Foundations Workshop (CSFW‚Äô03), Asilomar, Ca.,
USA, July 2003.
[13] D. E. Denning. Secure Information Flow in Computer Sys-
tems. PhD thesis, Purdue University, W. Lafayette, Indiana,
USA, May 1975.
[14] D. E. Denning and P. J. Denning. CertiÔ¨Åcation of Pro-
grams for Secure Information Flow. Comm. of the ACM,
20(7):504‚Äì513, July 1977.
[15] Y. G. Desmedt and Y. Frankel. Threshold cryptosystems.
In CRYPTO ‚Äô89: Proceedings on Advances in cryptology,
pages 307‚Äì315, New York, NY, USA, 1989. Springer-Verlag
New York, Inc.
[16] D. Dolev and A. Yao. On the security of public key pro-
IEEE Transactions on Information Theory, 2(29),
tocols.
1983.
[19] N. Heintze and J. G. Riecke. The SLam calculus: program-
ming with secrecy and integrity. In POPL ‚Äô98: Proceedings
of the 25th ACM SIGPLAN-SIGACT symposium on Princi-
ples of programming languages, pages 365‚Äì377, New York,
NY, USA, 1998. ACM Press.
[20] B. Hicks, K. Ahmadizadeh, and P. McDaniel. Understand-
ing practical application development in security-typed lan-
In 22st Annual Computer Security Applications
guages.
Conference (ACSAC), Miami, Fl, December 2006.
[21] P. Laud and V. Vene. A type system for computationally
secure information Ô¨Çow. In Proceedings of the 15th Interna-
tional Symposium on Fundamentals of Computational The-
ory, volume 3623, pages 365‚Äì377, L¬®ubeck, Germany, 2005.
[22] A. C. Myers and B. Liskov. Protecting privacy using the
decentralized label model. ACM Transactions on Software
Engineering and Methodology, 9(4):410‚Äì442, 2000.
[23] A. C. Myers, A. Sabelfeld, and S. Zdancewic. Enforcing
robust declassiÔ¨Åcation and qualiÔ¨Åed robustness. Journal of
Computer Security, 2006. To appear.
[24] B. C. Pierce. Types and Programming Languages. MIT
Press, Cambridge, Massachusetts, 2002.
[25] F. Pottier and V. Simonet.
Information Ô¨Çow inference for
ML. In Proc. 29th ACM Symp. on Principles of Program-
ming Languages (POPL), pages 319 ‚Äì 330, Portland, Ore-
gon, Jan. 2002.
[26] D. K. Rappe. Homomorphic Cryptosystems and Their Ap-
plications. PhD thesis, University of Dortmund, Germany,
2004.
[27] A. Sabelfeld and A. C. Myers. Language-based information-
Ô¨Çow security. IEEE Journal on Selected Areas in Communi-
cations, 21(1):5‚Äì19, Jan. 2003.
[28] Security-enhanced Linux. Project website http://www.
nsa.gov/selinux/ accessed November, 2006.
[29] V. Simonet. Flow Caml in a nutshell. In G. Hutton, editor,
Proceedings of the Ô¨Årst APPSEM-II workshop, pages 152‚Äì
165, Mar. 2003.
[30] G. Smith and R. Alp¬¥ƒ±zar. Secure information Ô¨Çow with ran-
dom assignment and encryption. In Proceedings of The 4th
ACM Workshop on Formal Methods in Security Engineer-
ing: From SpeciÔ¨Åcations to Code (FSME‚Äô06), pages 33‚Äì43,
Alexandria, Virgina, USA, November 2006.
[31] E. Sumii and B. C. Pierce. A bisimulation for dynamic seal-
ing. In Principals of Programming Languages, Venice, Italy,
January 2004.
[32] S. Tse and S. Zdancewic.
Run-time principals in
information-Ô¨Çow type systems. In IEEE Symposium on Se-
curity and Privacy, 2004.
[33] D. Volpano, G. Smith, and C. Irvine. A sound type sys-
tem for secure Ô¨Çow analysis. Journal of Computer Security,
4(3):167‚Äì187, 1996.
[34] G. Winskel. The Formal Semantics of Programming Lan-
guages: An Introduction. MIT Press, Cambridge, Mas-
sachusetts, 1993.
[35] L. Zheng, S. Chong, S. Zdancewic, and A. C. Myers. Build-
ing Secure Distributed Systems Using Replication and Parti-
tioning. In IEEE 2003 Symposium on Security and Privacy.
IEEE Computer Society Press, 2003.
15