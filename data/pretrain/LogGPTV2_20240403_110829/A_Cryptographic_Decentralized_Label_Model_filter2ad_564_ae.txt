### Primitives and Types Inhabited by Keys

In contrast to SImp, KDLM (Key-Dependent Label Model) security typing is nominal. This means that labels have names, and each name corresponds to a unique cryptographic key. While Chothia and colleagues prove type soundness, they do not provide more specific security theorems such as non-interference.

### Comparison with Dynamic and Existential Types

Our pack/unpack language feature can be compared with both dynamic types [2] and standard existential types [24]. Similar to typecase, unpack may fail at runtime, whereas standard existential unpack always succeeds. Like dynamic/typecase, our pack/unpack does not directly support abstract datatypes, which existentials typically do. A more refined approach to pack/unpack might use type annotations to expose the internal structure of encrypted values, resembling an existential package with a bounded type variable.

### λseal: An Extension to Lambda Calculus

Sumii and Pierce [31] studied λseal, an extension to lambda calculus with terms of the form {e}e0, meaning e sealed-by e0, and a corresponding elimination form. Like Askarov and colleagues, they make seal (i.e., key) generation explicit in program text; however, their dynamic semantics, which include runtime checking of seals, is simpler than Askarov’s. λseal includes black-box functions that analyze sealed values but cannot be disassembled to reveal the seal (key). It is unclear how to interpret such functions in a cryptographic model.

### SLam Calculus: Information Flow Lambda Calculus

Heintze and Riecke’s SLam calculus [19] is an information flow lambda calculus where the right to read a closure corresponds to the right to apply it. This sidesteps the black-box function issue from λseal. In SLam, some expressions are marked with the authority of the function writer. The annotations control declassification and are analogous to the pretranslated labels in SImp. Additionally, SLam types have a nested form, where, for example, the elements in a list and the list itself may be given different security annotations. Combined with pack, such nesting could facilitate defining data structures with dynamic and heterogeneous security properties.

### Dolev-Yao Model and Cryptography

We use the algebraic Dolev-Yao model to study the connection between information flow and cryptography. Laud and Vene [21] examined this problem using a computational model of encryption. More recently, Smith and Alpízar extended this work to include a model of decryption [30]. They prove noninterference for a simple language without declassification (or packing) and a two-point security lattice. Like Chothia and colleagues, they map labels to fixed keys.

Abadi and Rogaway proved that Dolev-Yao analysis is sound with respect to computational cryptographic analysis in a setting similar to our own [3]. While the inference system in Figure 7 was influenced by their formalism, there are significant differences in approach. In particular, Abadi and Rogaway do not discuss public key cryptography, which we use extensively. Backes and Pfitzmann [6], along with Waidner [7], have also investigated the connection between symbolic and computational models of encryption. They define a Dolev-Yao style library and show that protocols proven secure with respect to library semantics are also secure with respect to computational cryptographic analysis. This library might provide an excellent foundation for further rigorous analysis of SImp.

### Discussion

Information flow languages often provide escape hatches to declassify secrets or endorse untrusted input. While these mechanisms allow violations of language policies, they isolate locations where leaks can occur and are quite useful in practice. Unfortunately, languages with unrestricted declassification and endorsement no longer enjoy simple non-interference, leading to complex metatheory [10]. SImp’s pack and unpack operators provide a middle ground. Like declassify, pack lowers confidentiality policies, and, like endorse, unpack lowers integrity label policies. However, packing and unpacking are not as general as declassification and endorsement. For example, pack/unpack cannot be used to make public the result of a password check—a classic use of declassification. The advantage of pack/unpack is that they preserve non-interference and are thus safer than declassify/endorse. Thus, these constructs are complementary. We believe a practical information flow language could include both.

### Comparison with Other DLMs

Several decentralized label models (DLMs) are discussed in the literature. As originally formulated by Myers and Liskov, structurally defined labels described only confidentiality (or, dually, integrity) policies [22]. Later research treated confidentiality and integrity simultaneously. Zdancewic and Tse examined a DLM where integrity policies define a “trusted by” relation [32]. In contrast, Myers and Chong treat integrity as we do, with the “written by” interpretation [10]. Lastly, Chothia, Duggan, and Vitek’s KDLM blends structural and nominal label semantics [12].

Our DLM differs significantly from Myers and Liskov’s original presentation [22], which gives labels a more restrictive interpretation. For example, in our setting, the label
‘ = {Alice : Alice, Charlie !∅; Bob : Bob, Charlie !∅}
can be read with the authority of {Alice, Bob} or just Charlie. Myers requires Charlie’s authority to read ‘. (Of course, Alice and Bob may conspire to first declassify and then read—but it’s important not to conflate this with simple reading.) Our choice of interpretation was motivated by the constraints inherent in cryptographically translating packages. Specifically, Lemma 3 would not hold under Myers and Liskov’s interpretation. However, we could retain this result by changing the definition of V[[·]]· to use share semantics. Under share semantics, hvi‘ is translated by generating a fresh key pair and encrypting v with the public key. Cryptographic shares of the fresh keys are distributed according to each owner’s read and write policy. With mutual distrust among owners, no owner should be able to learn the fresh keys except as permitted by the reads and writes relations. This requires generating key shares without revealing the underlying keys. We hoped to do so with threshold cryptography [15], but current approaches expose one key of the pair.

Previous DLMs include a partial order on principals called the acts-for hierarchy [22]. If p (cid:31) q, then principal p is assumed to have the authority of q. If σ is p’s cryptographic state, σ ‘u K−q models this acts-for relation in our setting. This is a coarse-grained form of delegation. The correct cryptographic implementation of the acts-for hierarchy is not clear. A naive implementation might provide Alice with Bob’s private key when Alice (cid:31) Bob. However, this has practical shortcomings: revocation is impossible, and Bob cannot selectively grant Alice rights. A more sophisticated protocol might require that Bob provide Alice with a network service or a smart card that can selectively provide encryption and signing services.

### Language Extensions

SImp is a core language for programming with information flow and packing. Future work may extend it with several new constructs.

Currently, SImp programs must unpack packages to compute with their contents. Alternatively, the rule
```
p; M ‘ v1 + v2 → v3
p; M ‘ hv1i‘ + hv2i‘ → hv3i‘
BIND
```
would permit computation within packages. (The name BIND follows the monadic interpretation of security statements in Abadi’s Dependency Core Calculus [1].) While BIND can be implemented using the homomorphic properties of the Goldwasser-Micali cryptosystems, they cannot sustain an analogous multiplication rule. Other systems (e.g., RSA) would support multiplication but not addition. Unfortunately, current cryptosystems can only provide efficient homomorphic computation over a single algebraic operator. A more general bind would require an efficient homomorphic algebraic (i.e., additive and multiplicative) cryptosystem; the existence of such schemes is an open problem [26].

Imperative update of packed values is compatible with SImp’s semantics. The operational semantics might look like:
```
p writes ‘
p; M ‘ put v in hv0i‘ → inl hvi‘
PUT
```
PUT assigns a low (trusted, public) value into a high (tainted, secret) package; this is straightforward to type-check and dynamically safe. What distinguishes packing and writing? Compiling a pack requires the creation of a new envelope, which in turn requires the owners’ keys. In contrast, a put reuses dynamically acquired envelopes and requires no compile-time keys. Our model assumes that programs are compiled with the authority of all owners; thus, PUT conveys no particular advantage. It may be useful under weaker assumptions, such as those encountered in the context of program partitioning [35].

Lastly, SImp could allow programs to strengthen the label of a (potentially unreadable) package. In full generality,
```
‘1 ≤ ‘2
.
STRENGTHEN
p; M ‘ strengthen hvi‘1 to ‘2 → hvi‘2
```
In the case of a DLM, ‘2 may be more restrictive than ‘1 in two ways: ‘2 may have new policies that ‘1 does not, or ‘2 may have more restrictive policies than ‘1. In the former case, it is straightforward to append the new policy’s seal to ‘1’s envelope and finish the construction of V[[hvi‘2]]. However, it is not clear what to do in the second case.

### Conclusion

It is important to consider the interplay between cryptography and information flow in the context of language-based security. This paper has investigated one design for high-level language features that make it easy to connect a secure program’s confidentiality and integrity labels with an underlying cryptographic implementation. Our package mechanism complements existing, more general approaches to downgrading but has the advantage of yielding a strong noninterference result against Dolev-Yao attackers. We expect that such packages will be useful for building systems that enforce strong security policies, even when confidential data must leave the confines of the trusted runtime environment.

### Acknowledgments

We would like to thank the anonymous reviewers for their helpful comments and Peeter Laud for his suggestions regarding the cryptographic semantics.

### References

[1] M. Abadi. Access control in a core calculus of dependency. In ICFP '06: Proceedings of the eleventh ACM SIGPLAN international conference on Functional Programming, pages 263–273, Portland, Oregon, USA, September 2006.

[2] M. Abadi, L. Cardelli, B. Pierce, and D. Rémy. Dynamic typing in polymorphic languages. Journal of Functional Programming, 5(1):111–130, January 1995.

[3] M. Abadi and P. Rogaway. Reconciling two views of cryptography (the computational soundness of formal encryption). Journal of Cryptology, 15(2):103–127, 2002.

[4] A. Askarov, D. Hedin, and A. Sabelfeld. Cryptographically masked information flows. In Proceedings of the International Static Analysis Symposium, LNCS, Seoul, Korea, August 2006.

[5] A. Askarov and A. Sabelfeld. Security-typed languages for implementation of cryptographic protocols: A case study. In Proceedings of the 10th European Symposium on Research in Computer Security (ESORICS), Milan, Italy, September 2005.

[6] M. Backes and B. Pfitzmann. Relating symbolic and cryptographic secrecy. IEEE Trans. Dependable Secur. Comput., 2(2):109–123, 2005.

[7] M. Backes, B. Pfitzmann, and M. Waidner. A composable cryptographic library with nested operations. In CCS '03: Proceedings of the 10th ACM conference on Computer and communications security, pages 220–230, Washington D.C., USA, 2003. ACM Press.

[8] D. E. Bell and L. J. LaPadula. Secure computer system: Unified exposition and Multics interpretation. Technical Report ESD-TR-75-306, MITRE Corp. MTR-2997, Bedford, MA, 1975. Available as NTIS AD-A023 588.

[9] R. Chapman. Industrial experience with SPARK. Ada Lett., XX(4):64–68, 2000.

[17] D. Duggan. Cryptographic types. In CSFW '02: Proceedings of the 15th IEEE Computer Security Foundations Workshop (CSFW'02), page 238, Washington, DC, USA, 2002. IEEE Computer Society.

[18] J. A. Goguen and J. Meseguer. Security policies and security models. In Proc. IEEE Symposium on Security and Privacy, pages 11–20. IEEE Computer Society Press, Apr. 1982.

[10] S. Chong and A. C. Myers. Decentralized robustness. In Proceedings of the 19th IEEE Computer Security Foundations Workshop (CSFW'06), pages 242–253, Los Alamitos, CA, USA, July 2006.

[11] S. Chong, A. C. Myers, K. Vikram, and L. Zheng. Jif Reference Manual, June 2006. Available from http://www.cs.cornell.edu/jif.

[12] T. Chothia, D. Duggan, and J. Vitek. Type based distributed access control. In Proceedings of the 16th IEEE Computer Security Foundations Workshop (CSFW'03), Asilomar, Ca., USA, July 2003.

[13] D. E. Denning. Secure Information Flow in Computer Systems. PhD thesis, Purdue University, W. Lafayette, Indiana, USA, May 1975.

[14] D. E. Denning and P. J. Denning. Certification of Programs for Secure Information Flow. Comm. of the ACM, 20(7):504–513, July 1977.

[15] Y. G. Desmedt and Y. Frankel. Threshold cryptosystems. In CRYPTO '89: Proceedings on Advances in cryptology, pages 307–315, New York, NY, USA, 1989. Springer-Verlag New York, Inc.

[16] D. Dolev and A. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 2(29), 1983.

[19] N. Heintze and J. G. Riecke. The SLam calculus: programming with secrecy and integrity. In POPL '98: Proceedings of the 25th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, pages 365–377, New York, NY, USA, 1998. ACM Press.

[20] B. Hicks, K. Ahmadizadeh, and P. McDaniel. Understanding practical application development in security-typed languages. In 22nd Annual Computer Security Applications Conference (ACSAC), Miami, Fl, December 2006.

[21] P. Laud and V. Vene. A type system for computationally secure information flow. In Proceedings of the 15th International Symposium on Fundamentals of Computational Theory, volume 3623, pages 365–377, Lübeck, Germany, 2005.

[22] A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering and Methodology, 9(4):410–442, 2000.

[23] A. C. Myers, A. Sabelfeld, and S. Zdancewic. Enforcing robust declassification and qualified robustness. Journal of Computer Security, 2006. To appear.

[24] B. C. Pierce. Types and Programming Languages. MIT Press, Cambridge, Massachusetts, 2002.

[25] F. Pottier and V. Simonet. Information flow inference for ML. In Proc. 29th ACM Symp. on Principles of Programming Languages (POPL), pages 319 – 330, Portland, Oregon, Jan. 2002.

[26] D. K. Rappe. Homomorphic Cryptosystems and Their Applications. PhD thesis, University of Dortmund, Germany, 2004.

[27] A. Sabelfeld and A. C. Myers. Language-based information-flow security. IEEE Journal on Selected Areas in Communications, 21(1):5–19, Jan. 2003.

[28] Security-enhanced Linux. Project website http://www.nsa.gov/selinux/ accessed November, 2006.

[29] V. Simonet. Flow Caml in a nutshell. In G. Hutton, editor, Proceedings of the first APPSEM-II workshop, pages 152–165, Mar. 2003.

[30] G. Smith and R. Alpízar. Secure information flow with random assignment and encryption. In Proceedings of The 4th ACM Workshop on Formal Methods in Security Engineering: From Specifications to Code (FSME'06), pages 33–43, Alexandria, Virgina, USA, November 2006.

[31] E. Sumii and B. C. Pierce. A bisimulation for dynamic sealing. In Principles of Programming Languages, Venice, Italy, January 2004.

[32] S. Tse and S. Zdancewic. Run-time principals in information-flow type systems. In IEEE Symposium on Security and Privacy, 2004.

[33] D. Volpano, G. Smith, and C. Irvine. A sound type system for secure flow analysis. Journal of Computer Security, 4(3):167–187, 1996.

[34] G. Winskel. The Formal Semantics of Programming Languages: An Introduction. MIT Press, Cambridge, Massachusetts, 1993.

[35] L. Zheng, S. Chong, S. Zdancewic, and A. C. Myers. Building Secure Distributed Systems Using Replication and Partitioning. In IEEE 2003 Symposium on Security and Privacy. IEEE Computer Society Press, 2003.