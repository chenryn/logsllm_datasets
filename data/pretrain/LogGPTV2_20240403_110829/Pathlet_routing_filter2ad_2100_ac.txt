using pathlets which never extend beyond X’s neighboring
vnodes—hence, the policy is local. (Note that LT policies
concern only how traﬃc may transit X’s network; X may
still have arbitrary preferences on the paths taken by traﬃc
that X sends.)
An important example of LT policies is valley-freeness [11],
a common export policy in BGP today. Valley-free routes
can be deﬁned as follows: each neighbor is labeled as a cus-
tomer, provider, or peer; a BGP route is exported to a neigh-
bor X if and only if either the next hop of the route is a
customer or X is a customer. This is a function only of the
ingress and egress points, and hence is an LT policy.
To the best of our knowledge, other multipath routing pro-
tocols [8, 28, 30, 18, 23, 32] cannot implement local transit
policies, though some [30] can implement special cases.
Advantages, disadvantages, incentives. LT policies are
an example of policies in which constraints are local.
In
general, this locality leads to two advantages over BGP-style
policies. First, the pathlets can be combined in potentially
an exponentially large number of ways, leading to improved
performance and reliability for senders. Second, they can be
represented with a small number of pathlets, leading to small
forwarding tables. (We will demonstrate both advantages in
Sec. 6.)
The primary disadvantage is that policies cannot depend
on a route’s destination. Such policies are used in BGP,
where ASes select and advertise their most preferred route
on a per-destination basis. Thus, ASes would end up per-
mitting routes other than the one for each destination that
is cheapest. A more minor issue is that LT policies use
slightly more control plane state than BGP (as we will see
in Sec. 6), but this is not as constrained a resource as data
plane memory.
We argue that for a large fraction of ASes, the advantages
of LT policies may outweigh the disadvantages. LT-capable
routers require less data plane memory and hence less cost,
and are much less susceptible to scalability problems as the
Internet grows; and providing more path choice is a ser-
vice that customers may be willing to pay for. Providing
more paths may also attract more traﬃc and hence more
revenue. Moreover, the disadvantage of policy locality is
limited since the common BGP export policy of enforcing
valley-free routes is an LT policy. At a higher level, we note
that oﬀering multipath network services at a constant price
regardless of the path may be a feasible business model for
the same reasons that today’s transit services have a ﬁxed
rate regardless of the destination.
Ultimately, whether ASes choose to use LT policies de-
pends on business decisions and payment mechanisms, but
pathlet routing makes it feasible at a technical level. Fur-
thermore, as we will see in Section 4.2, this is a decision that
can be made by each AS individually.
Implementation. Figure 2 depicts two ways of implement-
ing LT policies in pathlet routing. The simplest way uses
one ingress vnode for each neighbor. Then, the AS con-
structs a pathlet between each ingress-egress pair for which
it wants to allow transit service. However, this results in
O(δ2) pathlets for a network with δ neighbors.
Fortunately, we can use our vnode abstraction for a much
more compact representation. We assign each neighbor to a
“class”, an abstract group of neighbors which are equivalent
from a policy standpoint. Examples are business relation-
ships (customer, provider, peer) or potentially geographic
regions. We have vnodes representing ingress and egress for
each class (rather than each neighbor), and then construct
the appropriate pathlets between these vnodes.
This reduces the number of pathlets from O(δ2) to O(c2 +
δ), where c is the number of classes. We argue that the num-
ber of classes would typically be small. For example, in the
case of valley-free routes, we need only 2 classes, customer
and provider/peer, for a total of 4 + δ pathlets per AS. This
is depicted in Fig. 2.
115pathlet which adds one hop to one of the pathlets it learned
from a neighbor. This is depicted below in a topology with
a single IP preﬁx destination:
To mimic BGP’s export rules, in which routes are ex-
ported to only certain neighbors, there are two options.
First, the router may simply not announce certain path-
lets to its neighbors. This mimics BGP “too closely”, since
a neighbor could still use a prohibited path if, for example,
it managed to guess the pathlet’s FID. (Similarly, in BGP,
a neighbor could send a packet even when there is no an-
nounced route for the destination IP.) A solution which is
better than BGP is to enforce policy in the forwarding tables
themselves. For the common valley-free export policy, this
can be done with a small constant number of additional vn-
odes and pathlets, similar to the LT construction of Fig. 2;
we omit the details.
A BGP-policy router in a mixed setting. In the previ-
ous example all routers used BGP-style policies. Now con-
sider a “mixed” network, where the leftmost router in the
previous example continues using BGP-style policies, but
the others use LT policies. It runs the same algorithm as
before, building a pathlet to each destination. However, it
may now have an exponentially large set of possible paths to
each destination, rather than one path through each neigh-
bor. This necessitates a generalization of the BGP decision
process to select the best path without constructing each op-
tion explicitly. For example, it could run a least-cost path
algorithm, with large costs assigned to its provider links, less
cost on its peering links, and lowest cost on its customer
links.
The resulting pathlet is also slightly diﬀerent: instead of
adding one hop to a multihop pathlet, it is built by con-
catenating multiple short pathlets from the LT nodes, high-
lighted below:
The result is a single long pathlet:
An LT-policy router in a mixed setting. Due to lo-
cality, an LT router’s pathlets do not depend on pathlets
constructed elsewhere. Therefore, it has the same number
of pathlets originating from its vnodes, and hence the same
small routing tables regardless of what other routers do.
However, it does have to deal with disseminating other
routers’ pathlets in the control plane. If an LT node has δ
neighbors using BGP-style policies, then it receives O(δn)
pathlets for a network of size n, and all of these are reach-
able from its ingress vnodes. The router would therefore
be happy to disseminate them all. In fact, a mixed setting
of BGP-style and LT policy routers could result in O(n2)
pathlets usable by LT nodes. However, our dissemination-
limiting mechanisms from Sec. 3.3 will take eﬀect, and only
a small number of these will be propagated.
Figure 2: Two ways to implement a local transit
policy are to connect the appropriate ingress-egress
pairs (left), or to group neighbors into classes and
connect the appropriate classes (right). Here we
show the vnodes and pathlets in one AS to permit
valley-free routes.
One diﬃculty arises with class-based LT policies.
If an
AS is internally partitioned, it may not be able to represent
reachability as a class-based LT policy, which implicitly as-
sumes that if the provider class can reach the customer class,
then all providers can reach all customers. A solution is for
the AS to advertise two sets of LT policies, one on each
side of the partition, in the rare case that it becomes inter-
nally partitioned. Alternately, the AS can simply continue
announcing the pathlets; sources will realize that some path-
lets have failed and will switch to a diﬀerent route, assuming
another is available.
4.2 Mixed Policies
In this section we describe how pathlet routing supports
mixed policies, in particular with some ASes using tradi-
tional BGP-style policies, and some using LT-style. Mixed
policies are important because it allows ASes to make in-
dependent choices about their policies. Some may require
restrictive BGP style policies; others may use LT-style poli-
cies, giving up some control but getting the beneﬁt of small
forwarding tables and providing many possible paths. It is
unlikely that either choice would be preferred by all ASes.
We require no new protocol mechanisms to support mixed
policies; routers run the algorithms we have already de-
scribed in Sections 2 and 3, constructing the pathlets ap-
propriately to match their routing policy. However, since
we believe this is an important way of using pathlet routing,
we illustrate the process here.
Emulating BGP. As a prelude, we illustrate the non-mixed
case when all ASes use BGP-style policies. To emulate BGP,
each AS constructs one vnode v from which all its pathlets
originate, and which is its ingress vnode for all neighbors. If
it owns an IP preﬁx, then it has a second vnode w tagged
with the preﬁx, from which no pathlets depart.
It then
constructs a pathlet from v to every destination it can reach,
along its most-preferred available path. If the destination is
at w, this is a one-hop pathlet; otherwise it is a multihop
inoutinoutproviders and peersproviders and peerscustomerscustomersdestination vnode(tagged with IP preﬁx)vnodepathletASwv1164.3 Quality of Service
We discuss one ﬁnal novel use of pathlet routing. Our
protocol’s abstraction of the topology results in a convenient
mechanism to set up multiple paths along the same physical
path. In particular, an AS can construct multiple “parallel”
pathlets, over the same sequence of vnodes. Packets can
then be treated diﬀerently depending on which pathlet is
used. For example, an AS could provide better or worse
throughput or delay, or more non-traditional services like
reliable packet delivery across that pathlet rather than a full
end-to-end route, similar to new services proposed by Ford
and Iyengar [10]. To inform sources of these diﬀerent types
of service, pathlet announcements can be tagged with labels,
or sources could discover performance by measurement or
by a third-party routing appraisal service, as discussed in
Section 2.5.
This approach is more ﬂexible and extensible than other
approaches for several reasons. First, the service is selected
for a speciﬁc segment of a path, rather than for the entire
path. Thus, diﬀerent combinations of services are possible
and an AS which is not involved in providing a particular
type of service does not need to support that service or even
be aware of what services a packet is using in other ASes.
Second, the bits in the packet header are not tied to a small
number of predetermined meanings (as in, for example, IP’s
Type of Service bits). Instead, the header bits (FIDs) are
tied to a much more extensible control plane announcement
by the AS providing the service.
One drawback is that the amount of routing state in-
creases as more types of service are oﬀered. However, in
terms of forwarding plane state, this only aﬀects the ASes
that are oﬀering the service; and if an AS is using policies
like Local Transit policies, the amount of forwarding plane
state is quite small to begin with.
5. POLICY EXPRESSIVENESS ANALYSIS
In this section, we develop a framework for comparing
routing protocols. We show that pathlet routing’s data
plane can emulate any policy expressible in the data plane
of several existing protocols using a similar amount of state,
even though these protocols have substantially diﬀerent for-
warding architectures. Our goal is to support the claim that
pathlet routing is highly expressive, but we also believe this
framework is of independent interest since it takes a step
towards making sense of the large number of proposed pro-
tocols in this area.
We begin by discussing intuition for pathlet routing’s ﬂex-
ibility (§5.1). We then we deﬁne policy emulation (§5.2) and
discuss the protocols pathlet routing can emulate (§5.3) and
those it cannot (§5.4), highlighting some limitations of our
protocol. These results are summarized in Figure 3.
5.1 Intuition
Why does pathlet routing appear to be so ﬂexible, gener-
alizing multiple other routing protocols? One piece of the
intuition is that many protocols incorporate some variant of
tunneling. Our pathlet construct elevates the tunnel to be
a “ﬁrst-class object” that can be advertised, concatenated,
and source-routed. We will repeatedly use pathlets to emu-
late tunnel-like features of other protocols. However, this is
only part of the story since we also utilize vnodes.
At a higher level, the following intuition is simple yet pow-
erful. One of the most ﬂexible and general abstractions is
Figure 3: Relative policy expressiveness of the data
planes of routing protocols. P → Q indicates P can
emulate the routing policies of Q.
the graph. Pathlet routing allows routing policies to be spec-
iﬁed as an arbitrary virtual graph, whose nodes are vnodes
and whose directed edges are pathlets.
5.2 Deﬁnition of policy emulation
Our analysis focuses on the data plane: the information
carried in a packet and in the forwarding table, and forward-
ing operations. We found that considering only the data
plane gives a much cleaner and more well-deﬁned way of rea-
soning about protocols, compared with modeling both the
data and control planes. We will also discuss control plane
diﬀerences between the protocols, leaving rigorous analysis
of their control planes to future work.
A conﬁguration of a protocol is deﬁned by an arrange-
ment of forwarding table state at each router. Given a con-
ﬁguration c1 from protocol P and a conﬁguration c2 from
protocol Q, we say that c1 covers c2 when
• every end-to-end route which is allowed in c1 is also
allowed in c2, and every end-to-end route which is pro-
hibited in c1 is also prohibited in c2; and
• for each router i, |c1(i)| = O(|c2(i)|), where |cj(i)| de-
notes the amount of forwarding state for router i in
conﬁguration j.