```  
create or replace function array_regroup(  
  i_arr int[],    -- 输入数组  
  i_elems int,    -- 打散成固定长度的组合  
  i_arr_contain int[]  -- 包含了这些商品ID的数组  
) returns setof int[] as $$  
declare  
  v_arr_len int := array_length(i_arr, 1);  -- 输入的数组长度  
begin  
  -- 保护  
  if i_elems > v_arr_len then  
    raise notice 'you cann''t return group len % more then %', i_elems, v_arr_len;  
    return;  
  elsif i_elems = v_arr_len then  
    return next i_arr;  
    return;  
  elsif i_elems = 1 then  
    return query select array(select i) from unnest(i_arr) t(i);  
    return;  
  end if;  
  return query  
  WITH RECURSIVE   
  t(i) AS (  
      select array(select i) from unnest(i_arr) t(i)  
  ),   
  cte AS (  
     SELECT i AS combo, i, 1 AS ct   
     FROM t   
   UNION ALL   
     SELECT array(select i from (select unnest(array_cat(cte.combo, t.i)) order by 1) t(i)), t.i, ct + 1   
     FROM cte, t   
     WHERE cte.ct  t.i)   -- 新加入的值不在已组合的值中  
       AND (cte.combo @> i_arr_contain)  
  )   
  SELECT combo FROM cte where array_length(combo,1)=i_elems group by combo;   
  return;  
end;  
$$ language plpgsql strict;  
```  
```  
postgres=# select array_regroup(array[1,2,3,4,5],2,array[1]);  
 array_regroup   
---------------  
 {1,2}  
 {1,3}  
 {1,4}  
 {1,5}  
(4 rows)  
Time: 1.150 ms  
```  
## 求单品的最佳一级组合  
例如，找出面包的1个最佳搭档。  
假设面包的商品ID=6537  
```  
postgres=# select item_id from buy where item_id @> array[6537];  
......  
 {60573,17248,6537,77857,43349,66208,13656}  
 {97564,50031,79924,24255,6537,21174,39117}  
 {24026,78667,99115,87856,64782,8344,73169,41478,63091,29609,6537,71982,75382}  
 {53094,97465,26156,54181,6537}  
(1101 rows)  
Time: 5.791 ms  
postgres=# explain select item_id from buy where item_id @> array[6537];  
                                   QUERY PLAN                                      
---------------------------------------------------------------------------------  
 Bitmap Heap Scan on buy  (cost=457.45..51909.51 rows=55000 width=60)  
   Recheck Cond: (item_id @> '{6537}'::integer[])  
   ->  Bitmap Index Scan on idx_buy_item  (cost=0.00..443.70 rows=55000 width=0)  
         Index Cond: (item_id @> '{6537}'::integer[])  
(4 rows)  
```  
组合，寻找出现次数最多的组合。  
```  
postgres=# select count(*), array_regroup(item_id,2,array[6537]) from buy where item_id @> array[6537] group by 2 order by 1 desc;  
 count | array_regroup   
-------+---------------  
     3 | {6537,55286}  
     3 | {6537,48661}  
     3 | {6537,78337}  
     3 | {6537,72623}  
     3 | {6537,81442}  
     3 | {6537,66414}  
     3 | {6537,35346}  
     3 | {6537,79565}  
     3 | {3949,6537}  
......  
Time: 286.859 ms  
```  
## 求单品的最佳二级组合  
例如，找出面包的两个最佳搭档。  
```  
postgres=# select count(*), array_regroup(item_id,3,array[6537]) from buy where item_id @> array[6537] group by 2 order by 1 desc;  
 count |   array_regroup      
-------+--------------------  
     1 | {32,999,6537}  
     1 | {6537,49957,91533}  
     1 | {6537,49957,88377}  
     1 | {6537,49957,57887}  
     1 | {6537,49957,55192}  
     1 | {6537,49952,95266}  
     1 | {6537,49952,56916}  
     1 | {6537,49945,60492}  
     1 | {6537,49940,92888}  
......  
Time: 1055.414 ms  
```  
## 统计全网数据的最佳一级组合  
可能需要很久  
```  
select count(*), array_regroup(item_id,2) from buy group by 2 order by 1 desc limit 10;  
```  
## 统计全网数据的最佳N级组合  
可能需要很久  
```  
select count(*), array_regroup(item_id, n) from buy group by 2 order by 1 desc limit 10;  
```  
## 小结  
1\. 这个案例并没有什么高超的技术含量，仅仅是将数组按推荐级数进行分裂，统计出现的次数。  
用到的数据库特性包括：  
1\.1\. 数组类型的支持  
1\.2\. plpgsql服务端编程  
1\.3\. 数组元素的索引检索(包含某个元素)  
1\.4\. MPP, 分布式数据库架构，提升运算速度。可以参考阿里云的HybridDB for PostgreSQL产品。  
2\. 注意, 本文统计方法限制  
本文涉及的统计方法只能用于计算直接关联的商品（表现为在同一个订单中的数据）的最佳组合。  
如果你要计算间接关联的商品组合，例如A用户买了1,2，B用户买了2,3，实际上1,3是存在间接关联关系的。那么你需要用到recDB中提到的推荐算法，或者使用类似图式搜索。  
参考  
[《金融风控、公安刑侦、社会关系、人脉分析等需求分析与数据库实现 - PostgreSQL图数据库场景应用》](../201612/20161213_01.md)     
3\. 阿里云HybridDB for PostgreSQL提供了MPP的能力，可以水平扩展，非常适合OLAP场景。例如本案涉及的大量group by的操作，可以得到很好的性能提升。  
4\. PostgreSQL 9.6开始加入了基于CPU的多核并行计算功能，对于OLAP场景也有非常大的性能提升，例如本案涉及的大量group by的操作，可以得到很好的性能提升。 
## 参考              
https://github.com/DataSystemsLab/recdb-postgresql    
https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy1/index.html    
[《推荐系统分析 - 推荐算法, RecDB推荐数据库介绍》](../201704/20170410_01.md)    
[《分析加速引擎黑科技 - LLVM、列存、多核并行、算子复用 大联姻 - 一起来开启PostgreSQL的百宝箱》](../201612/20161216_01.md)   
[《PostgreSQL 向量化执行插件(瓦片式实现) 10x提速OLAP》](../201702/20170225_01.md)    
[《ApsaraDB的左右互搏(PgSQL+HybridDB+OSS) - 解决OLTP+OLAP混合需求》](../201701/20170101_02.md)   
[《金融风控、公安刑侦、社会关系、人脉分析等需求分析与数据库实现 - PostgreSQL图数据库场景应用》](../201612/20161213_01.md)     
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")