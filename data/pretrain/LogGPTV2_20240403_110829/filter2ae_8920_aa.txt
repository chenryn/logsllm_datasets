## 找到RTF的token参数解析器

此时，我们仍然位于“sub_431D38”函数内。虽然可以通过对照（Ctrl + X）指向此处分配的token数组的一些指针，并最终找到处理这些token及其参数的函数，但存在一种更简便的方法。

### 方法概述
我们可以对数据库中的每个函数标记所有开关，并在处理过程中计算每个开关的样例数量。这样可以快速查询具有最多案例的函数。通过使用`function.switches()`枚举函数中的所有开关，返回IDA-minsc的`switch_t`实例，进而计算非默认事例的总数。

### 定义标记函数
首先定义一个用于标记开关数量和总案例数的函数：

```python
def tag_switches(ea):
    count, total = 0, 0
    for sw in func.switches(ea):
        count += 1
        total += len(sw.cases)
    if count > 0:
        func.tag(ea, 'switch.count', count)
        func.tag(ea, 'switch.cases', total)
```

此函数会为每个函数添加两个标签：“switch.count”表示开关数量，“switch.cases”表示案例总数。

### 应用标记函数
接下来，遍历数据库中的所有函数并应用上述标记函数：

```python
for ea in db.functions():
    tag_switches(ea)
```

为了监控进度，可以使用IDA-minsc提供的`tools.map`工具：

```python
_ = tools.map(tag_switches)
```

### 查询和排序
现在，我们已经标记了每个函数的开关信息，可以查询整个数据库并对它们进行排序。首先收集结果：

```python
results = []
for ea, tags in db.select('switch.cases'):
    results.append((tags['switch.cases'], ea))

results = sorted(results, key=lambda x: x[0], reverse=True)
print(len(results))  # 输出结果数量
```

查看具有最多案例的函数：

```python
max_cases, max_ea = results[-1]
go(max_ea)
```

### 检查特定函数
检查找到的函数以确认其开关数量：

```python
print(func.tag(max_ea, 'switch.count'))
```

分析该开关的具体情况：

```python
sw = db.get.switch()
print(f'number of cases: {len(sw)}')
print(f'number of default cases: {len(sw) - len(sw.cases)}')
```

### 标记每个案例
使用存储在“tokens”列表中的内容来标记每个案例：

```python
for case in sw.cases:
    handler = sw.case(case)
    db.tag(handler, 'token', tokens[case])
```

处理每个处理程序可能涉及多个令牌的情况：

```python
for ea, tags in func.select('token'):
    toks = [tokens[case] for case in sw.handler(ea)]
    db.tag(ea, 'token', toks)
```

### 查找调用指令
遍历标记为“token”的每个地址，查找第一个调用指令或无条件分支：

```python
for ea, tags in func.select('token'):
    next_call = db.address.next(ea, lambda ea: ins.is_jmp(ea) or ins.is_call(ea))
    if ins.is_call(next_call):
        db.tag(ea, 'rtf-parameter', ins.op(next_call, 0))
    elif ins.is_jmp(next_call):
        print(f"found an unconditional branch with the target: {ins.op(next_call, 0):x}")
```

### 总结结果
查询被标记为第一个调用指令的结果，并将其映射为名称：

```python
found = set(tags['rtf-parameter'] for ea, tags in func.select('rtf-parameter'))
map(func.name, found)
```

手动检查每个函数后，总结如下：
- `sub_431A20`：处理数字和连字符，可能是范围。
- `sub_640B40`：未知功能。
- `sub_407E48`：从对象中获取属性，不调用其他函数。
- `sub_58766C` 和 `sub_587490`：复杂，难以理解。
- `sub_407D0C` 和 `sub_407E50`：从数组中获取属性。
- `sub_431A78`：调用两个函数，处理空格和数字连字符。
- `sub_587560`：调用字符串相关函数。
- `sub_407D94`：调用分配函数，可能是列表。
- `sub_5871C0`：引用RTF特定字符。
- `sub_587618` 和 `sub_580334`：调用当前列表中的函数。
- `sub_62FC5C`：调整对象大小。

### 筛选相关函数
将与解析相关的函数转换回地址，并存储在一个集合中：

```python
res = map(func.address, ['sub_431A20', 'sub_431A78', 'sub_5871c0', 'sub_587618'])
match = set(res)

cases = []
for ea, tags in func.select('rtf-parameter'):
    if tags['rtf-parameter'] in match:
        cases.append((ea, tags['rtf-parameter']))
```

这样，我们就可以进一步分析这些案例和它们所调用的函数。