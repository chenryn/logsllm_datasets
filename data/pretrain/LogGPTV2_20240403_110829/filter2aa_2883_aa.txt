**Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper**

### Table of Contents
- **Foreword** ................................................................................................................... 3
- **Executive Summary** ................................................................................................. 4
  - RBAC Misconfigurations are Easy to Miss ............................................................ 4
  - Powerful Permissions are Widespread .................................................................. 4
  - Excessive Permissions Lead to Impactful Attacks ............................................... 4
  - RBAC Misconfigurations are Solvable ................................................................. 5
- **Role-Based Access Control 101** .............................................................................. 6
- **Classifying Powerful Kubernetes Permissions** ....................................................... 7
  - Acquire Tokens ..................................................................................................... 8
  - Remote Code Execution (RCE) ............................................................................. 8
  - Manipulate Authentication/Authorization (AuthN/AuthZ) .................................. 8
  - Steal Pods ........................................................................................................... 8
  - Meddler-in-the-Middle (MitM) ............................................................................. 9
- **Container Escapes and Powerful DaemonSets: A Toxic Combination** .................. 9
  - Arenâ€™t Nodes Powerful by Default? ................................................................... 10
  - Powerful DaemonSets in Popular Kubernetes Platforms ................................. 10
  - Container Escape Blast Radius .......................................................................... 12
  - Powerful Kubelets in Popular Platforms ........................................................... 13
  - Fixes and Mitigations by Affected Platforms ..................................................... 13
  - Toward Better Node Isolation .......................................................................... 14
- **Identifying Powerful Permissions** ........................................................................ 14
  - rbac-police ......................................................................................................... 15
  - Checkov ............................................................................................................ 16
  - Recommendations ............................................................................................. 16
- **Detecting Attacks with Admission Control** .......................................................... 17
  - Suspicious SelfSubjectReviews ......................................................................... 17
  - Suspicious Assignment of Controller Service Accounts ................................. 17
- **Conclusion** ........................................................................................................... 17
- **About** .................................................................................................................... 18
  - Prisma Cloud ...................................................................................................... 18
  - Unit 42 ............................................................................................................... 18
  - Authors ............................................................................................................. 18
  - Contributors ..................................................................................................... 18
- **Appendix A: Powerful Permissions by Attack Class** ........................................... 19
  - Manipulate Authentication/Authorization (AuthN/AuthZ) ............................... 19
  - Acquire Tokens .................................................................................................. 19
  - Remote Code Execution (RCE) .......................................................................... 19
  - Steal Pods .......................................................................................................... 20
  - Meddler-in-the-Middle (MitM) .......................................................................... 20

---

**Foreword**

Kubernetes adoption has surged in recent years, with more users deploying, testing, and contributing to the project. Weak defaults are a common challenge for emerging and complex platforms, and Kubernetes is no exception. However, most Kubernetes platforms have now addressed insecure defaults, and previously widespread misconfigurations, such as Kubelets that allow unauthorized access, are becoming less common. Threat actors who once exploited clusters through simple attacks are likely frustrated by these improvements, but the more pragmatic ones are evolving to target subtler issues.

Unit 42 recently observed this trend in the wild with the discovery of Siloscape, one of the most sophisticated Kubernetes malware samples to date. Siloscape combined multiple exploits to compromise pods, escape and take over nodes, and ultimately gain control over entire clusters. Notably, Siloscape checked for excessive permissions after compromising a node and did not proceed if they were not present.

As simpler Kubernetes attacks become less effective, adversaries are increasingly targeting excessive permissions and Role-Based Access Control (RBAC) misconfigurations. Kubernetes RBAC has the potential to enforce least-privileged access and deter attackers, but misconfigurations are easy to miss. Even seemingly restricted permissions can be surprisingly powerful, making it difficult to answer basic questions like "Which pods can escalate privileges?" This report aims to address this problem by introducing a framework that classifies powerful permissions based on the attacks they enable, mapping dozens of the most powerful Kubernetes permissions, and releasing `rbac-police`, an open-source tool that can identify powerful permissions and privilege escalation paths in Kubernetes clusters.

To understand the prevalence and impact of powerful permissions, we analyzed popular Kubernetes platforms, including managed services, distributions, and container network interfaces (CNIs), and looked for infrastructure components running with excessive permissions. In 62.5% of the reviewed Kubernetes platforms, powerful DaemonSets distributed powerful credentials across every node in the cluster. As a result, in 50% of platforms, a single container escape was enough to compromise the entire cluster.

We collaborated with affected platforms to address these findings and strip excessive permissions. From the original 62.5% that ran powerful DaemonSets, only 25% remain. Similarly, the percentage of platforms where a container escape would result in cluster takeover dropped from 50% to just 25%, with more improvements expected. While this is a step in the right direction, RBAC misconfigurations and excessive permissions are likely to remain a significant Kubernetes security risk in the near future.

Read on to gain a better understanding of RBAC risks and how you can address them using open-source tools and best practice configurations. Learn to transform RBAC from a blind spot into an additional layer of defense.

---

**Executive Summary**

Kubernetes platforms have made significant strides in security in recent years, addressing critical misconfigurations and establishing secure baselines. With fewer clusters vulnerable to straightforward attacks, threat actors are adapting and looking for techniques that exploit subtler issues. Recent malware samples indicate that Kubernetes threat actors are beginning to target excessive permissions.

Kubernetes Role-Based Access Control (RBAC) is an authorization scheme that governs the permissions of users, groups, service accounts, and pods over Kubernetes resources. When used correctly, RBAC can enforce least-privileged access and demoralize attackers. When misconfigured, excessive permissions expose the cluster to privilege escalation attacks and increase the blast radius of compromised credentials and container escapes.

**RBAC Misconfigurations are Easy to Miss**

Seemingly restricted permissions can be surprisingly powerful and, in some cases, on par with cluster admin. As a result, open-source add-ons and infrastructure components inadvertently request powerful permissions, and users grant them without fully understanding the impact on their cluster's security.

Prisma Cloud researchers identified dozens of powerful Kubernetes permissions, both known and novel, and classified them based on the attacks they enable into five major Kubernetes attack types.

**Powerful Permissions are Widespread**

To understand the prevalence of powerful permissions, Prisma Cloud researchers analyzed popular Kubernetes platforms, including managed services, distributions, and container network interfaces (CNIs), to identify powerful DaemonSets that distribute powerful credentials across every node in the cluster. Out of the Kubernetes distributions and managed services examined, 75% ran powerful DaemonSets by default. The remaining 25% did so when a recommended feature was enabled. Examining mainstream Container Network Interfaces (CNIs), 50% installed powerful DaemonSets by default.

**Excessive Permissions Lead to Impactful Attacks**

When powerful permissions are loosely granted, they are more likely to fall into the wrong hands. In Kubernetes, this can occur in several ways, but it is most easily visible with powerful DaemonSets and container escapes.

The blast radius of a container escape drastically increases when powerful tokens are distributed across every node by powerful DaemonSets. Based on the identified DaemonSets, in 50% of the Kubernetes platforms reviewed, a single container escape was enough to compromise the entire cluster.

In 12.5% of platforms, a single container escape was likely enough to take over some clusters. For another 12.5%, a container escape was enough to compromise the entire cluster given a recommended feature was enabled.

**RBAC Misconfigurations are Solvable**

Prisma Cloud researchers worked with vendors and open-source projects to strip excessive permissions and reduce the distribution of powerful credentials. From the original 62.5% running powerful DaemonSets, only 25% remain. Similarly, the number of platforms where a container escape is guaranteed to result in cluster takeover dropped from 50% to just 25%. This demonstrates that RBAC misconfigurations are solvable and that powerful permissions can often be removed. It also highlights the commitment of the reviewed vendors and open-source projects to the security of their platforms.

To help Kubernetes users evaluate and improve the RBAC posture of their clusters, this report is released alongside `rbac-police`, a new open-source tool that can identify powerful permissions and privilege escalation paths in Kubernetes clusters. New RBAC checks were also contributed to Checkov, a leading open-source infrastructure as code (IaC) scanner.

Finally, the Recommendations section explores best practices that decrease the distribution of powerful credentials and limit the blast radius of compromised ones, along with admission policies that can detect and prevent privilege escalation attacks in real time.

---

**Role-Based Access Control 101**

Kubernetes RBAC is an authorization scheme that governs access to Kubernetes resources. Permissions are grouped into Roles or ClusterRoles and can be granted via RoleBindings or ClusterRoleBindings to users, groups, and service accounts. Permissions granted via RoleBindings are scoped to a namespace, while those granted via ClusterRoleBindings are in effect cluster-wide.

For example, the following ClusterRoleBinding grants the `pod-reader` ClusterRole to the `reader-sa` service account:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: read-pods-global
subjects:
- kind: ServiceAccount
  name: reader-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
```

In this example, the `reader-sa` service account is now authorized to perform the operations listed in the `pod-reader` ClusterRole.

Kubernetes permissions are expressed by rules. Each rule permits one or more verbs over one or more resources in one or more API groups. Common verbs include:

- `get`: retrieve a resource by name
- `list`: retrieve all resources
- `create`: create a resource
- `update`: replace an existing resource
- `patch`: modify an existing resource
- `delete`: delete a resource

Roles and ClusterRoles (i.e., permissions) can be granted to a pod by binding them to its service account, as illustrated in Figure 3. A pod assigned the `reader-sa` service account, for example, will be able to retrieve pods cluster-wide.

![A Role granted to a pod](figure3.png)

---

**Classifying Powerful Kubernetes Permissions**

To understand the potential impact of powerful permissions, we classified them based on the attacks they enable. The five major Kubernetes attack types are:

1. **Acquire Tokens**
2. **Remote Code Execution (RCE)**
3. **Manipulate Authentication/Authorization (AuthN/AuthZ)**
4. **Steal Pods**
5. **Meddler-in-the-Middle (MitM)**

**Figure 1: Powerful Kubernetes permissions by attack class**

| Attack Type                | Number of Powerful Permissions |
|----------------------------|--------------------------------|
| Manipulate AuthN/Z         | 7                              |
| Acquire Tokens             | 6                              |
| RCE                        | 7                              |
| Steal Pods                 | 6                              |
| Meddler-in-the-Middle      | 1                              |

**Acquire Tokens**

Permissions that allow acquiring tokens can be used to impersonate other users or service accounts, potentially leading to further privilege escalation.

**Remote Code Execution (RCE)**

Permissions that enable remote code execution can be used to run arbitrary code on the cluster, allowing attackers to execute malicious commands.

**Manipulate Authentication/Authorization (AuthN/AuthZ)**

Permissions that allow manipulation of authentication and authorization can be used to bypass security controls and gain unauthorized access to resources.

**Steal Pods**

Permissions that allow stealing pods can be used to take control of running containers, potentially leading to data exfiltration or further attacks.

**Meddler-in-the-Middle (MitM)**

Permissions that enable man-in-the-middle attacks can be used to intercept and manipulate network traffic, potentially leading to eavesdropping and data theft.

---

**Container Escapes and Powerful DaemonSets: A Toxic Combination**

**Arenâ€™t Nodes Powerful by Default?**

By default, nodes in a Kubernetes cluster have limited permissions. However, powerful DaemonSets can distribute powerful credentials across every node, significantly increasing the blast radius of a container escape.

**Powerful DaemonSets in Popular Kubernetes Platforms**

In 62.5% of the reviewed Kubernetes platforms, powerful DaemonSets distributed powerful credentials across every node in the cluster. As a result, in 50% of platforms, a single container escape was enough to compromise the entire cluster.

**Container Escape Blast Radius**

The blast radius of a container escape is significantly increased when powerful tokens are distributed across every node by powerful DaemonSets. In 50% of the Kubernetes platforms reviewed, a single container escape was enough to compromise the entire cluster.

**Powerful Kubelets in Popular Platforms**

Kubelets, which are the primary nodes in a Kubernetes cluster, can also have powerful permissions. In 12.5% of the reviewed platforms, a single container escape was likely enough to take over some clusters. For another 12.5%, a container escape was enough to compromise the entire cluster given a recommended feature was enabled.

**Fixes and Mitigations by Affected Platforms**

We partnered with affected platforms to address these findings and strip excessive permissions. From the original 62.5% that ran powerful DaemonSets, only 25% remain. Similarly, the percentage of platforms where a container escape would result in cluster takeover dropped from 50% to just 25%.

**Toward Better Node Isolation**

To reduce the impact of container escapes, it is essential to isolate nodes and limit the distribution of powerful credentials. Best practices include using network policies, limiting the use of powerful DaemonSets, and regularly reviewing and auditing RBAC configurations.

---

**Identifying Powerful Permissions**

To help Kubernetes users identify and mitigate powerful permissions, we developed `rbac-police`, an open-source tool that can identify powerful permissions and privilege escalation paths in Kubernetes clusters.

**rbac-police**

`rbac-police` is an open-source tool that scans Kubernetes clusters for powerful permissions and potential privilege escalation paths. It provides detailed reports and recommendations for mitigating identified risks.

**Checkov**

We also contributed new RBAC checks to Checkov, a leading open-source infrastructure as code (IaC) scanner. These checks help identify and prevent RBAC misconfigurations in Kubernetes manifests and configurations.

**Recommendations**

- Regularly review and audit RBAC configurations.
- Use the principle of least privilege to minimize the permissions granted to users, groups, and service accounts.
- Limit the use of powerful DaemonSets and ensure they are only used when necessary.
- Implement network policies to isolate nodes and limit the blast radius of container escapes.
- Use tools like `rbac-police` and Checkov to identify and mitigate powerful permissions and RBAC misconfigurations.

---

**Detecting Attacks with Admission Control**

Admission control can be used to detect and prevent privilege escalation attacks in real time. Two key areas to focus on are:

**Suspicious SelfSubjectReviews**

SelfSubjectReviews are used to check the permissions of the current user or service account. Suspicious SelfSubjectReviews can indicate that an attacker is attempting to enumerate permissions and find a path to escalate privileges.

**Suspicious Assignment of Controller Service Accounts**

Assigning powerful roles to controller service accounts can be a sign of a privilege escalation attempt. Monitoring and alerting on such assignments can help detect and prevent attacks.

---

**Conclusion**

Kubernetes RBAC holds the potential to enforce least-privileged access and demoralize attackers, but misconfigurations are easy to miss. Seemingly restricted permissions can be surprisingly powerful, making it difficult to answer basic questions about cluster security. By understanding the prevalence and impact of powerful permissions and using tools like `rbac-police` and Checkov, Kubernetes users can better protect their clusters from privilege escalation attacks.

---

**About**

**Prisma Cloud**

Prisma Cloud by Palo Alto Networks is a comprehensive cloud-native security platform that provides visibility, protection, and compliance across the full application lifecycle. Prisma Cloud helps organizations secure their cloud environments, including Kubernetes clusters, by identifying and mitigating security risks.

**Unit 42**

Unit 42 is the threat intelligence and research team at Palo Alto Networks. Unit 42 conducts in-depth research on the latest threats and vulnerabilities, providing actionable insights and recommendations to help organizations stay ahead of emerging threats.

**Authors**

- [Author 1]
- [Author 2]

**Contributors**

- [Contributor 1]
- [Contributor 2]

---

**Appendix A: Powerful Permissions by Attack Class**

**Manipulate Authentication/Authorization (AuthN/AuthZ)**

- `impersonate`
- `approve signers`
- `update certificatesigningrequests/approval`

**Acquire Tokens**

- `list secrets`
- `create serviceaccounts/token`

**Remote Code Execution (RCE)**

- `create pods/exec`
- `update pods/ephemeral-containers`
- `create nodes/proxy`

**Steal Pods**

- `control pod controllers`
- `delete pods`

**Meddler-in-the-Middle (MitM)**

- `modify endpoints`
- `control mutating webhooks`
- `control validating webhooks`

---