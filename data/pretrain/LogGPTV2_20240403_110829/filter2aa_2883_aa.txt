Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
1
Kubernetes Privilege 
 Escalation: Excessive 
Permissions in  
Popular Platforms
2
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Table of Contents
Foreword .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 3
Executive Summary  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4
RBAC Misconfigurations are Easy to Miss .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4
Powerful Permissions are Widespread  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4
Excessive Permissions Lead to Impactful Attacks  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4
RBAC Misconfigurations are Solvable   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .5
Role-Based Access Control 101  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 6
Classifying Powerful Kubernetes  Permissions   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 7
Acquire Tokens .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .8
Remote Code Execution  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .8
Manipulate Authentication/Authorization (AuthN/AuthZ) .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .8
Steal Pods  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .8
Meddler-in-the-Middle .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .9
Container Escapes and Powerful DaemonSets: A Toxic Combination  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 9
Aren’t Nodes Powerful by Default? .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .10
Powerful DaemonSets in Popular Kubernetes Platforms  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 10
Container Escape Blast Radius  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 12
Powerful Kubelets in Popular Platforms  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 13
Fixes and Mitigations by Affected Platforms  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 13
Toward Better Node Isolation  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 14
Identifying Powerful Permissions  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 14
rbac-police  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 15
Checkov  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 16
Recommendations  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 16
Detecting Attacks with Admission Control  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 17
Suspicious SelfSubjectReviews .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 17
Suspicious Assignment of Controller Service Accounts  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 17
Conclusion .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 17
About .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 18
Prisma Cloud  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 18
Unit 42  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 18
Authors  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 18
Contributors  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 18
Appendix A: Powerful Permissions by Attack Class  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 19
Manipulate Authentication/Authorization (AuthN/AuthZ) .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 19
Acquire Tokens .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 19
Remote Code Execution  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 19
Steal Pods  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 20
Meddler-in-the-Middle .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 20
3
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Foreword
Kubernetes adoption has skyrocketed in recent years, with more users deploying, testing, and con-
tributing to the project. Weak defaults are a typical growing pain for emerging and complex platforms, 
and Kubernetes has been no exception. Today though, most Kubernetes® platforms have rooted out 
insecure defaults, and previously widespread misconfigurations like Kubelets that allow unauthorized 
access are becoming less and less common. Threat actors who were used to compromising clusters 
through blatantly simple attacks are probably not very pleased with new improvements, but it seems 
like the pragmatic ones are starting to evolve and target subtler issues.
Unit 42 recently witnessed that trend in the wild as they caught a sample of Siloscape—one of the most 
sophisticated Kubernetes malware samples to date. Siloscape chained together multiple exploits to 
compromise pods, escape and take over nodes, and ultimately gain control over entire clusters. Siloscape 
demonstrated an approach that wasn’t previously seen in the wild: after compromising a node, it checked 
whether it had excessive permissions and didn’t bother continuing the attack if it didn’t.
As simpler Kubernetes attacks lose relevance, adversaries have begun targeting excessive permissions 
and Role-Based Access Control (RBAC) misconfigurations.
Kubernetes RBAC holds the potential to enforce least-privileged access 
and demoralize attackers, but misconfigurations are easy to miss. Seem-
ingly restricted permissions are often surprisingly powerful, making basic 
questions like “Which pods can escalate privileges?” difficult to answer. In 
this report, we aim to address that problem. We introduce a framework that 
classifies powerful permissions by the attacks they enable; map dozens of 
the most powerful Kubernetes permissions to it; and release rbac-police, 
an open source tool that can identify powerful permissions and privilege 
escalation paths in Kubernetes clusters.
To understand the prevalence and impact of powerful permissions, we’ve 
analyzed popular Kubernetes platforms—managed services, distributions, 
and container network interfaces (CNIs)—and looked for infrastructure 
components running with excessive permissions. In 62.5% of the Kubernetes 
platforms reviewed, powerful DaemonSets distributed powerful creden-
tials across every node in the cluster. As a result, in 50% of platforms, a single 
 container escape was enough to compromise the entire cluster.
We partnered with affected platforms to address these findings and strip 
 excessive permissions. From the original 62.5% that ran powerful DaemonSets, 
only 25% remain. Likewise, the percentage of platforms where container escape 
was guaranteed to result in cluster takeover dropped from 50% to just 25%, with 
more soon to follow. While this moves the needle in the right direction, RBAC 
misconfigurations and excessive permissions are likely to remain a significant 
Kubernetes security risk for the near future.
Read on to gain a better understanding of RBAC risks and how you can address them through open 
source tools and best practice configurations. Learn to transform RBAC from a blind spot into an 
additional layer of defense.
Kubernetes Role-Based  Access 
 Control (RBAC) is the main 
 authorization scheme in  Kubernetes, 
and governs the permissions of 
users, groups, pods, and nodes over 
 Kubernetes resources .
DaemonSets are commonly used 
to deploy infrastructure pods onto 
all worker nodes .
4
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Executive Summary 
Kubernetes platforms have made significant strides in security in recent years, rooting out critical 
misconfiguration and establishing secure baselines. With fewer clusters vulnerable to straightforward 
attacks, threat actors are starting to adapt and look for techniques abusing subtler issues. Recent malware 
samples indicate Kubernetes threat actors are beginning to target excessive permissions.
Kubernetes Role-Based Access Control (RBAC) is an authorization scheme that governs the permissions 
of users, groups, service accounts, and pods over Kubernetes resources. When used correctly, RBAC can 
enforce least-privileged access and demoralize attackers. When misconfigured, excessive permissions 
expose the cluster to privilege escalation attacks and increase the blast radius of compromised creden-
tials and container escape.
RBAC Misconfigurations are Easy to Miss
Seemingly restricted permissions can be surprisingly powerful and, in some cases, on par with cluster 
admin. As a result, open source add-ons and infrastructure components inadvertently ask for powerful 
permissions, and users grant them without realizing the full impact on their cluster’s security.
Prisma® Cloud researchers identified dozens of powerful Kubernetes permissions, known and novel, 
and classified them based on the attacks they enable into five major Kubernetes attack types.
Figure 1: Powerful Kubernetes permissions by attack class
Manipulate AuthN/Z
Acquire Tokens
RCE
Steal Pods
Meddler-in-the-Middle
1
6
0
2
4
6
8
7
6
# of powerful permissions
7
7
Powerful Permissions are Widespread 
To understand the prevalence of powerful permissions, Prisma Cloud researchers analyzed popular 
Kubernetes platforms—managed services, distributions, and container network interfaces (CNIs)—to 
identify powerful DaemonSets that distribute powerful credentials across every node in the cluster. 
Out of the Kubernetes distributions and managed services examined, 75% ran powerful DaemonSets 
by default. The remaining 25% did so as well given a recommended feature was enabled. Examining 
mainstream Container Network Interfaces (CNIs), 50% installed powerful DaemonSets by default.
Excessive Permissions Lead to Impactful Attacks 
When powerful permissions are loosely granted, they’re more likely to fall into the wrong hands. In Ku-
bernetes, that could occur in a number of ways, but it's most easily visible with powerful DaemonSets 
and container escapes.
The blast radius of container escape drastically increases when powerful tokens are distributed across 
every node by powerful DaemonSets. Based on the identified DaemonSets, in 50% of the Kubernetes 
platforms reviewed, a single container escape was enough to compromise the entire cluster. 
In 12.5% of platforms, a single container escape was likely enough to take over some clusters. For 
another 12.5%, container escape was enough to compromise the entire cluster given a recommended 
feature was enabled.
5
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Yes
50%
25%
No
12.5%
Likely in Some Clusters
12.5%
With Certain Features
Container Escape == Cluster Admin?
Figure 2: Impact of container escape in the analyzed Kubernetes platforms
RBAC Misconfigurations are Solvable 
Prisma Cloud researchers worked with vendors and open source projects to strip excessive  permissions 
and reduce the distribution of powerful credentials. From the original 62.5% running powerful 
 DaemonSets, only 25% remain. Likewise, the number of platforms where container escape is guaran-
teed to result in cluster takeover dropped from 50% to just 25%. This demonstrates that RBAC mis-
configurations are solvable and that powerful permissions can often be removed. It also highlights the 
commitment of the reviewed vendors and open source projects to the security of their platforms.
To help Kubernetes users evaluate and improve the RBAC posture of their clusters, this report is 
released alongside rbac-police, a new open source tool that can identify powerful permissions and 
privilege escalation paths in Kubernetes clusters. New RBAC checks were also contributed to Checkov, 
a leading open source infrastructure as code (IaC) scanner. 
Finally, the Recommendations section explores a number of best practices that decrease the distri-
bution of powerful credentials and limit the blast radius of compromised ones, along with admission 
policies that can detect and prevent privilege escalation attacks in real time.
6
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
The ‘reader-sa’ service account is now authorized to perform the operations listed in the ‘pod-reader’ 
ClusterRole.
As seen above, Kubernetes permissions are expressed by rules. Each rule permits one or more verbs 
over one or more resources in one or more API groups. The rule above permits listing and getting pods 
in the core API group. Common verbs include:
• get: retrieve a resource by name
• list: retrieve all resources
• create: create a resource
• update: replace an existing resource
• patch: modify an existing resource
• delete: delete a resource
Roles and ClusterRoles (i.e., permissions) can be granted to a pod by bind-
ing them to its service  account, as illustrated in figure 3. A pod assigned 
the ‘reader-sa’ service account, for example, will be able to retrieve pods 
cluster-wide.
Role
RoleBinding
Pod
ServiceAccount
Figure 3: A Role granted to a pod
Role-Based Access Control 101
Kubernetes RBAC is an authorization scheme that governs access to Kubernetes resources. Permissions 
are grouped into Roles or ClusterRoles, and can be granted via RoleBindings or ClusterRoleBindings to 
users, groups, and service accounts. Permissions granted via RoleBindings are scoped to a namespace, 
while ones granted via ClusterRoleBindings are in effect cluster-wide.
The ClusterRoleBinding that follows, for example, grants the ‘pod-reader’ ClusterRole to the ‘read-
er-sa’ service account.
7
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Table 1: Powerful Kubernetes Permissions by Attack Class
Manipulate AuthN/Z
Acquire Tokens
RCE
Steal Pods
MitM
impersonate
list secrets
create pods/exec
modify nodes
control  endpointslices
escalate
create secrets
update pods/ephemeral-
containers
modify nodes/status
modify endpoints
bind
create serviceaccounts/
token
create nodes/proxy
create pods/eviction
modify services/status
approve signers
create pods
control pods
delete pods
modify services/status
update certificatesignin-
grequests/approval
control pod controllers
control pod controllers
delete nodes
modify pods
control mutating 
 webhooks
control validating 