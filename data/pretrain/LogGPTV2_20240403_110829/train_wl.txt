in the forward direction,
assigning each element in turn to
.ir var .
.\" .pp
.\" .br stailq_foreach_from ()
.\" behaves identically to
.\" .br stailq_foreach ()
.\" when
.\" .i var
.\" is null, else it treats
.\" .i var
.\" as a previously found stailq element and begins the loop at
.\" .i var
.\" instead of the first element in the stailq referenced by
.\" .ir head .
.\" .pp
.\" .br stailq_foreach_safe ()
.\" traverses the tail queue referenced by
.\" .i head
.\" in the forward direction, assigning each element
.\" in turn to
.\" .ir var .
.\" however, unlike
.\" .br stailq_foreach ()
.\" here it is permitted to both remove
.\" .i var
.\" as well as free it from within the loop safely without interfering with the
.\" traversal.
.\" .pp
.\" .br stailq_foreach_from_safe ()
.\" behaves identically to
.\" .br stailq_foreach_safe ()
.\" when
.\" .i var
.\" is null, else it treats
.\" .i var
.\" as a previously found stailq element and begins the loop at
.\" .i var
.\" instead of the first element in the stailq referenced by
.\" .ir head .
.ss removal
.br stailq_remove ()
removes the element
.i elm
from the tail queue.
.pp
.br stailq_remove_head ()
removes the element at the head of the tail queue.
for optimum efficiency,
elements being removed from the head of the tail queue should
use this macro explicitly rather than the generic
.br stailq_remove ()
macro.
.\" .pp
.\" .br stailq_remove_after ()
.\" removes the element after
.\" .i elm
.\" from the tail queue.
.\" unlike
.\" .br stailq_remove (),
.\" this macro does not traverse the entire tail queue.
.ss other features
.br stailq_concat ()
concatenates the tail queue headed by
.i head2
onto the end of the one headed by
.i head1
removing all entries from the former.
.\" .pp
.\" .br stailq_swap ()
.\" swaps the contents of
.\" .i head1
.\" and
.\" .ir head2 .
.sh return value
.br stailq_empty ()
returns nonzero if the queue is empty,
and zero if the queue contains at least one entry.
.pp
.br stailq_first (),
and
.br stailq_next ()
return a pointer to the first or next
.i type
structure, respectively.
.pp
.br stailq_head_initializer ()
returns an initializer that can be assigned to the queue
.ir head .
.sh conforming to
not in posix.1, posix.1-2001, or posix.1-2008.
present on the bsds
(stailq macros first appeared in 4.4bsd).
.sh notes
some bsds provide simpleq instead of stailq.
they are identical, but for historical reasons
they were named differently on different bsds.
stailq originated on freebsd, and simpleq originated on netbsd.
for compatibility reasons, some systems provide both sets of macros.
glibc provides both stailq and simpleq,
which are identical except for a missing simpleq equivalent to
.br stailq_concat ().
.sh bugs
.br stailq_foreach ()
doesn't allow
.i var
to be removed or freed within the loop,
as it would interfere with the traversal.
.br stailq_foreach_safe (),
which is present on the bsds but is not present in glibc,
fixes this limitation by allowing
.i var
to safely be removed from the list and freed from within the loop
without interfering with the traversal.
.sh examples
.ex
#include 
#include 
#include 
#include 
struct entry {
    int data;
    stailq_entry(entry) entries;        /* singly linked tail queue */
};
stailq_head(stailhead, entry);
int
main(void)
{
    struct entry *n1, *n2, *n3, *np;
    struct stailhead head;                  /* singly linked tail queue
                                               head */
    stailq_init(&head);                     /* initialize the queue */
    n1 = malloc(sizeof(struct entry));      /* insert at the head */
    stailq_insert_head(&head, n1, entries);
    n1 = malloc(sizeof(struct entry));      /* insert at the tail */
    stailq_insert_tail(&head, n1, entries);
    n2 = malloc(sizeof(struct entry));      /* insert after */
    stailq_insert_after(&head, n1, n2, entries);
    stailq_remove(&head, n2, entry, entries); /* deletion */
    free(n2);
    n3 = stailq_first(&head);
    stailq_remove_head(&head, entries);     /* deletion from the head */
    free(n3);
    n1 = stailq_first(&head);
    n1\->data = 0;
    for (int i = 1; i data = i;
    }
                                            /* forward traversal */
    stailq_foreach(np, &head, entries)
        printf("%i\en", np\->data);
                                            /* tailq deletion */
    n1 = stailq_first(&head);
    while (n1 != null) {
        n2 = stailq_next(n1, entries);
        free(n1);
        n1 = n2;
    }
    stailq_init(&head);
    exit(exit_success);
}
.ee
.sh see also
.br insque (3),
.br queue (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/exec.3
.so man3/resolver.3
.\" copyright (c) 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 21:25:52 1993 by rik faith (PI:EMAIL)
.\" modified 11 june 1995 by andries brouwer (PI:EMAIL)
.th closedir 3  2021-03-22 "" "linux programmer's manual"
.sh name
closedir \- close a directory
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.bi "int closedir(dir *" dirp );
.fi
.sh description
the
.br closedir ()
function closes the directory stream associated with
.ir dirp .
a successful call to
.br closedir ()
also closes the underlying file descriptor associated with
.ir dirp .
the directory stream descriptor
.i dirp
is not available
after this call.
.sh return value
the
.br closedir ()
function returns 0 on success.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
invalid directory stream descriptor
.ir dirp .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br closedir ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
.sh see also
.br close (2),
.br opendir (3),
.br readdir (3),
.br rewinddir (3),
.br scandir (3),
.br seekdir (3),
.br telldir (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/cmsg.3
.so man3/getspnam.3
.so man3/key_setsecret.3
.so man3/getcwd.3
.\" copyright (c) 2014 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\"
.th sched_setscheduler 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
sched_setscheduler, sched_getscheduler \-
set and get scheduling policy/parameters
.sh synopsis
.nf
.b #include 
.pp
.bi "int sched_setscheduler(pid_t " pid ", int " policy ,
.bi "                       const struct sched_param *" param );
.bi "int sched_getscheduler(pid_t " pid );
.fi
.sh description
the
.br sched_setscheduler ()
system call
sets both the scheduling policy and parameters for the
thread whose id is specified in \fipid\fp.
if \fipid\fp equals zero, the
scheduling policy and parameters of the calling thread will be set.
.pp
the scheduling parameters are specified in the
.i param
argument, which is a pointer to a structure of the following form:
.pp
.in +4n
.ex
struct sched_param {
    ...
    int sched_priority;
    ...
};
.ee
.in
.pp
in the current implementation, the structure contains only one field,
.ir sched_priority .
the interpretation of
.i param
depends on the selected policy.
.pp
currently, linux supports the following "normal"
(i.e., non-real-time) scheduling policies as values that may be specified in
.ir policy :
.tp 14
.br sched_other
the standard round-robin time-sharing policy;
.\" in the 2.6 kernel sources, sched_other is actually called
.\" sched_normal.
.tp
.br sched_batch
for "batch" style execution of processes; and
.tp
.br sched_idle
for running
.i very
low priority background jobs.
.pp
for each of the above policies,
.ir param\->sched_priority
must be 0.
.pp
various "real-time" policies are also supported,
for special time-critical applications that need precise control over
the way in which runnable threads are selected for execution.
for the rules governing when a process may use these policies, see
.br sched (7).
the real-time policies that may be specified in
.ir policy
are:
.tp 14
.br sched_fifo
a first-in, first-out policy; and
.tp
.br sched_rr
a round-robin policy.
.pp
for each of the above policies,
.ir param\->sched_priority
specifies a scheduling priority for the thread.
this is a number in the range returned by calling
.br sched_get_priority_min (2)
and
.br sched_get_priority_max (2)
with the specified
.ir policy .
on linux, these system calls return, respectively, 1 and 99.
.pp
since linux 2.6.32, the
.b sched_reset_on_fork
flag can be ored in
.i policy
when calling
.br sched_setscheduler ().
as a result of including this flag, children created by
.br fork (2)
do not inherit privileged scheduling policies.
see
.br sched (7)
for details.
.pp
.br sched_getscheduler ()
returns the current scheduling policy of the thread
identified by \fipid\fp.
if \fipid\fp equals zero, the policy of the
calling thread will be retrieved.
.sh return value
on success,
.br sched_setscheduler ()
returns zero.
on success,
.br sched_getscheduler ()
returns the policy for the thread (a nonnegative integer).
on error, both calls return \-1, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
invalid arguments:
.i pid
is negative or
.i param
is null.
.tp
.b einval
.rb ( sched_setscheduler ())
.i policy
is not one of the recognized policies.
.tp
.b einval
.rb ( sched_setscheduler ())
.i param
does not make sense for the specified
.ir policy .
.tp
.b eperm
the calling thread does not have appropriate privileges.
.tp
.b esrch
the thread whose id is \fipid\fp could not be found.
.sh conforming to
posix.1-2001, posix.1-2008 (but see bugs below).
the \fbsched_batch\fp and \fbsched_idle\fp policies are linux-specific.
.sh notes
further details of the semantics of all of the above "normal"
and "real-time" scheduling policies can be found in the
.br sched (7)
manual page.
that page also describes an additional policy,
.br sched_deadline ,
which is settable only via
.br sched_setattr (2).
.pp
posix systems on which
.br sched_setscheduler ()
and
.br sched_getscheduler ()
are available define
.b _posix_priority_scheduling
in \fi\fp.
.pp
posix.1 does not detail the permissions that an unprivileged
thread requires in order to call
.br sched_setscheduler (),
and details vary across systems.
for example, the solaris 7 manual page says that
the real or effective user id of the caller must
match the real user id or the save set-user-id of the target.
.pp
the scheduling policy and parameters are in fact per-thread
attributes on linux.
the value returned from a call to
.br gettid (2)
can be passed in the argument
.ir pid .
specifying
.i pid
as 0 will operate on the attributes of the calling thread,
and passing the value returned from a call to
.br getpid (2)
will operate on the attributes of the main thread of the thread group.
(if you are using the posix threads api, then use
.br pthread_setschedparam (3),
.br pthread_getschedparam (3),
and
.br pthread_setschedprio (3),
instead of the
.br sched_* (2)
system calls.)
.sh bugs
posix.1 says that on success,
.br sched_setscheduler ()
should return the previous scheduling policy.
linux
.br sched_setscheduler ()
does not conform to this requirement,
since it always returns 0 on success.
.sh see also
.ad l
.nh
.br chrt (1),
.br nice (2),
.br sched_get_priority_max (2),
.br sched_get_priority_min (2),
.br sched_getaffinity (2),
.br sched_getattr (2),
.br sched_getparam (2),
.br sched_rr_get_interval (2),
.br sched_setaffinity (2),
.br sched_setattr (2),
.br sched_setparam (2),
.br sched_yield (2),
.br setpriority (2),
.br capabilities (7),
.br cpuset (7),
.br sched (7)
.ad
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.