Certainly! Below is the optimized and more professional version of your text:

---

### Singly Linked Tail Queue (STAILQ) Macros

#### Traversal
- **`stailq_foreach(var, head)`**: Iterates through the tail queue referenced by `head` in the forward direction, assigning each element in turn to `var`.
- **`stailq_foreach_from(var, head)`**: Behaves identically to `stailq_foreach()` when `var` is null. If `var` is a previously found STAILQ element, it starts the loop from `var` instead of the first element in the tail queue.
- **`stailq_foreach_safe(var, head)`**: Traverses the tail queue in the forward direction, similar to `stailq_foreach()`. However, it allows the removal and freeing of `var` within the loop without interfering with the traversal.
- **`stailq_foreach_from_safe(var, head)`**: Behaves like `stailq_foreach_safe()` when `var` is null. If `var` is a previously found STAILQ element, it starts the loop from `var` instead of the first element in the tail queue.

#### Removal
- **`stailq_remove(head, elm)`**: Removes the element `elm` from the tail queue.
- **`stailq_remove_head(head)`**: Removes the element at the head of the tail queue. For optimal efficiency, use this macro explicitly for removing elements from the head rather than the generic `stailq_remove()` macro.
- **`stailq_remove_after(head, elm)`**: Removes the element after `elm` from the tail queue. Unlike `stailq_remove()`, this macro does not traverse the entire tail queue.

#### Other Features
- **`stailq_concat(head1, head2)`**: Concatenates the tail queue headed by `head2` onto the end of the one headed by `head1`, removing all entries from the former.
- **`stailq_swap(head1, head2)`**: Swaps the contents of `head1` and `head2`.

### Return Values
- **`stailq_empty(head)`**: Returns a non-zero value if the queue is empty, and zero if the queue contains at least one entry.
- **`stailq_first(head)`** and **`stailq_next(elm)`**: Return a pointer to the first or next `type` structure, respectively.
- **`stailq_head_initializer()`**: Returns an initializer that can be assigned to the queue `head`.

### Conformance
These macros are not part of POSIX.1, POSIX.1-2001, or POSIX.1-2008. They are present on BSDs, with `stailq` macros first appearing in 4.4BSD.

### Notes
- Some BSDs provide `simpleq` instead of `stailq`. These are identical, but named differently for historical reasons. `stailq` originated on FreeBSD, and `simpleq` on NetBSD. For compatibility, some systems provide both sets of macros.
- glibc provides both `stailq` and `simpleq`, which are identical except for the missing `simpleq` equivalent to `stailq_concat()`.

### Bugs
- **`stailq_foreach()`**: Does not allow `var` to be removed or freed within the loop, as it would interfere with the traversal.
- **`stailq_foreach_safe()`**: Fixes this limitation by allowing `var` to be safely removed and freed within the loop. This macro is available on BSDs but not in glibc.

### Example
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/queue.h>

struct entry {
    int data;
    STAILQ_ENTRY(entry) entries;  // Singly linked tail queue
};

STAILQ_HEAD(stailhead, entry);

int main(void) {
    struct entry *n1, *n2, *n3, *np;
    struct stailhead head;  // Singly linked tail queue head
    STAILQ_INIT(&head);     // Initialize the queue

    n1 = malloc(sizeof(struct entry));  // Insert at the head
    STAILQ_INSERT_HEAD(&head, n1, entries);
    n1 = malloc(sizeof(struct entry));  // Insert at the tail
    STAILQ_INSERT_TAIL(&head, n1, entries);
    n2 = malloc(sizeof(struct entry));  // Insert after
    STAILQ_INSERT_AFTER(&head, n1, n2, entries);

    STAILQ_REMOVE(&head, n2, entry, entries);  // Deletion
    free(n2);

    n3 = STAILQ_FIRST(&head);
    STAILQ_REMOVE_HEAD(&head, entries);  // Deletion from the head
    free(n3);

    n1 = STAILQ_FIRST(&head);
    n1->data = 0;
    for (int i = 1; i < 10; i++) {
        np = malloc(sizeof(struct entry));
        np->data = i;
        STAILQ_INSERT_TAIL(&head, np, entries);
    }

    // Forward traversal
    STAILQ_FOREACH(np, &head, entries)
        printf("%i\n", np->data);

    // Tail queue deletion
    n1 = STAILQ_FIRST(&head);
    while (n1 != NULL) {
        n2 = STAILQ_NEXT(n1, entries);
        free(n1);
        n1 = n2;
    }

    STAILQ_INIT(&head);
    exit(EXIT_SUCCESS);
}
```

### See Also
- `insque(3)`
- `queue(7)`

### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---

### `closedir` - Close a Directory

#### Synopsis
```c
#include <dirent.h>
#include <unistd.h>

int closedir(DIR *dirp);
```

#### Description
The `closedir()` function closes the directory stream associated with `dirp`. A successful call to `closedir()` also closes the underlying file descriptor. The directory stream descriptor `dirp` is no longer available after this call.

#### Return Value
- On success, `closedir()` returns 0.
- On error, -1 is returned, and `errno` is set to indicate the error.

#### Errors
- **`EBADF`**: Invalid directory stream descriptor `dirp`.

#### Attributes
For an explanation of the terms used in this section, see `attributes(7)`.

| Interface | Attribute | Value |
|-----------|-----------|-------|
| `closedir()` | Thread Safety | MT-Safe |

#### Conformance
POSIX.1-2001, POSIX.1-2008, SVR4, 4.3BSD.

#### See Also
- `close(2)`
- `opendir(3)`
- `readdir(3)`
- `rewinddir(3)`
- `scandir(3)`
- `seekdir(3)`
- `telldir(3)`

### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---

### `sched_setscheduler`, `sched_getscheduler` - Set and Get Scheduling Policy/Parameters

#### Synopsis
```c
#include <sched.h>

int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);
int sched_getscheduler(pid_t pid);
```

#### Description
- **`sched_setscheduler(pid, policy, param)`**: Sets the scheduling policy and parameters for the thread whose ID is specified in `pid`. If `pid` is zero, the scheduling policy and parameters of the calling thread will be set.
- **`sched_getscheduler(pid)`**: Returns the current scheduling policy of the thread identified by `pid`. If `pid` is zero, the policy of the calling thread will be retrieved.

The scheduling parameters are specified in the `param` argument, which is a pointer to a structure of the following form:
```c
struct sched_param {
    int sched_priority;
};
```
The interpretation of `param` depends on the selected policy.

#### Supported Policies
- **`SCHED_OTHER`**: Standard round-robin time-sharing policy.
- **`SCHED_BATCH`**: For "batch" style execution of processes.
- **`SCHED_IDLE`**: For running very low priority background jobs.
- **`SCHED_FIFO`**: First-in, first-out real-time policy.
- **`SCHED_RR`**: Round-robin real-time policy.

For `SCHED_FIFO` and `SCHED_RR`, `param->sched_priority` specifies a scheduling priority in the range returned by `sched_get_priority_min(2)` and `sched_get_priority_max(2)`.

Since Linux 2.6.32, the `SCHED_RESET_ON_FORK` flag can be ORed into `policy` to prevent children created by `fork(2)` from inheriting privileged scheduling policies.

#### Return Value
- On success, `sched_setscheduler()` returns 0.
- On success, `sched_getscheduler()` returns the policy for the thread (a non-negative integer).
- On error, both calls return -1, and `errno` is set to indicate the error.

#### Errors
- **`EINVAL`**: Invalid arguments: `pid` is negative or `param` is null.
- **`EINVAL`**: (for `sched_setscheduler()`) `policy` is not one of the recognized policies.
- **`EINVAL`**: (for `sched_setscheduler()`) `param` does not make sense for the specified `policy`.
- **`EPERM`**: The calling thread does not have appropriate privileges.
- **`ESRCH`**: The thread whose ID is `pid` could not be found.

#### Conformance
POSIX.1-2001, POSIX.1-2008. The `SCHED_BATCH` and `SCHED_IDLE` policies are Linux-specific.

#### Notes
- Further details of the semantics of all the above "normal" and "real-time" scheduling policies can be found in the `sched(7)` manual page.
- POSIX systems on which `sched_setscheduler()` and `sched_getscheduler()` are available define `_POSIX_PRIORITY_SCHEDULING` in `<unistd.h>`.
- The scheduling policy and parameters are per-thread attributes on Linux. The value returned from `gettid(2)` can be passed in the `pid` argument. Specifying `pid` as 0 will operate on the attributes of the calling thread, and passing the value returned from `getpid(2)` will operate on the attributes of the main thread of the thread group.

#### Bugs
POSIX.1 says that on success, `sched_setscheduler()` should return the previous scheduling policy. Linux `sched_setscheduler()` does not conform to this requirement, as it always returns 0 on success.

#### See Also
- `chrt(1)`
- `nice(2)`
- `sched_get_priority_max(2)`
- `sched_get_priority_min(2)`
- `sched_getaffinity(2)`
- `sched_getattr(2)`
- `sched_getparam(2)`
- `sched_rr_get_interval(2)`
- `sched_setaffinity(2)`
- `sched_setattr(2)`
- `sched_setparam(2)`
- `sched_yield(2)`
- `setpriority(2)`
- `capabilities(7)`
- `cpuset(7)`
- `sched(7)`

### Colophon
This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at https://www.kernel.org/doc/man-pages/.

---