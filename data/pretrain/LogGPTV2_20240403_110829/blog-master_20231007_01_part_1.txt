## 沉浸式学习PostgreSQL|PolarDB 18: 通过GIS轨迹相似伴随|时态分析|轨迹驻点识别等技术对拐卖、诱骗场景进行侦查    
### 作者    
digoal    
### 日期    
2023-10-07  
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 通过GIS轨迹相似伴随|时态分析|轨迹驻点识别等技术对拐卖、诱骗场景进行侦查      
拐卖、诱骗场景假设:     
当我们手机开启定位功能和流量时, 可能会透过监控工具或移动APP, 定时上报手机的定位信息. 因此就形成了人的轨迹数据.    
在被害前, 嫌疑人可能会与受害人进行接触(例如电话、短信、聊天工具等).     
在拐卖、诱骗过程中, 受害人的轨迹 与 犯罪嫌疑人的轨迹有相似性.    
在在拐卖、诱骗的中转过程中, 受害人的轨迹 与 转运人员的轨迹有近距点接触.     
通过GIS轨迹相似伴随|时态分析 结合 嫌疑人名单进行撞库分析, 可以更高效的锁定犯罪嫌疑人, 对拐卖、诱骗案件侦破有帮助.    
思考:    
根据轨迹还可以分析在哪里停留过, 停留了多长时间? 每个时间点的速度是多少, 可能使用了什么交通工具等.    
结合交通工具的轨迹, 可以碰撞出车牌等.    
### 实现和对照      
#### 传统方法 设计和实验       
传统数据库对GIS支持不够完善, 例如类型不够完善, 索引不够完善, GIS类型的数据处理不够完善(例如可能不支持 轨迹相似伴随|时态分析).    
#### PolarDB|PG新方法1 设计和实验  
### 准备测试环境和数据  
创建postgis插件, 用于记录用户轨迹和轨迹计算.    
```  
create extension if not exists postgis;  
```  
1、用户表   
```  
create unlogged table users (   -- 为测试方便使用unlogged table  
  id int8 primary key, -- 用户ID  
  sfz text unique, -- 身份证号, 随机生成   
  info text, -- 其他信息, 随即填充  
  ts timestamp -- 时间戳  
);  
```  
生成随机身份证号的函数      
```    
create or replace function gen_id(      
  a date,      
  b date      
)       
returns text as $$      
select lpad((random()*99)::int::text, 2, '0') ||       
       lpad((random()*99)::int::text, 2, '0') ||       
       lpad((random()*99)::int::text, 2, '0') ||       
       to_char(a + (random()*(b-a))::int, 'yyyymmdd') ||       
       lpad((random()*99)::int::text, 2, '0') ||       
       random()::int ||       
       (case when random()*10 >9 then 'X' else (random()*9)::int::text end ) ;      
$$ language sql strict;      
```    
生成10万测试用户数据.    
```  
insert into users select generate_series(1,100000), gen_id('1900-01-01', '2023-10-01'), md5(random()::text), clock_timestamp();  
```  
2、设计一张用户轨迹表, 记录每个用户在任意时刻的位置信息    
```  
create unlogged table user_pos (   -- 为测试方便使用unlogged table  
  id serial8 primary key,  -- 主键  
  uid int8, -- 用户ID  
  pos geometry, -- 位置信息  
  ts timestamp, -- 时间  
  unique(uid,ts)  -- 为了测试方便, 同一个轨迹每个point 的M值(位置序号)都不一样. 一样的序号将导致轨迹无效(开源版本PostGIS限制.)    
);    
```  
参考各省份经纬度数据: https://blog.csdn.net/esa72ya/article/details/114642127    
时间转换方法:    
```  
postgres=# select extract(epoch from '2023-10-01'::date);  
  extract     
------------  
 1696118400  
(1 row)  
postgres=# select extract(epoch from '2023-10-08'::date);  
  extract     
------------  
 1696723200  
(1 row)  
postgres=# select to_timestamp(1696118400);  
      to_timestamp        
------------------------  
 2023-10-01 00:00:00+00  
(1 row)  
postgres=# select to_timestamp(1696723200);  
      to_timestamp        
------------------------  
 2023-10-08 00:00:00+00  
(1 row)  
```  
生成10万用户`ID: 1-100000`在7天 `(2023-10-01, 2023-10-08)` 的轨迹, 每个用户平均每天100个位置, 得到7000万条位置数据.  经度范围 118-122, 纬度范围 26-31    
```  
-- 经纬度取到小数点后4位  
-- 位置序号使用时间戳  
vi t1.sql  
\set uid random(1,100000)  
\set lon random(1180000,1220000)  