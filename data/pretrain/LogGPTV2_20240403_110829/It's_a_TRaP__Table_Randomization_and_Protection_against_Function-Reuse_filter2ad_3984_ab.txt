be usable as an ML-G. On x86-64, for example, the calling
convention speciﬁes a set of registers that are used for passing
explicit arguments to C++ functions and which should not
be overwritten within the ML-G’s loop. The ML-G is the
ﬁrst virtual function that is executed in a COOP attack and
its role is to dispatch to the other virtual functions, called
vfgadgets, that make up the COOP attack. Similar to ROP
gadgets, vfgadgets fall into diﬀerent categories such as those
that perform arithmetic and logic operations, read and write
Figure 1: Left: C++ code example of a REC-
G (Z::~Z()); right:
the corresponding adversary-
induced control ﬂow; arrows indicate a calls rela-
tionship and are numbered in the order of their ex-
ecution. The labels A and B refer to the call sites
in Z::~Z() respectively.
to memory, manipulate the stack and registers, etc. We refer
to Schuster et al. for a full treatment of COOP [31].
3. EXTENDING COOP
It is natural to ask whether COOP attacks can be miti-
gated by eliminating potential ML-Gs in an application. To
disprove this hypothesis, we developed two reﬁned versions of
COOP that do not require ML-Gs and emulate the original
main loop through recursion and loop unrolling. For brevity,
we only discuss the x86-64 platform in this section. However,
the described concepts directly extend to other platforms
such as x86-32.
Recursive COOP. In general, all computation expressed
through iteration can also be expressed via recursion. This
also applies to COOP’s main loop. We identiﬁed a common
C++ code pattern that can be used to emulate an ML-G
using recursion without compromising the expressiveness
of COOP. We refer to a virtual function that follows this
pattern as a REC-G (recursion vfgadget). To understand how
a REC-G works, consider the C++ code in Figure 1: Z::~Z()
is a typical (virtual) destructor. It deletes the object objA
and removes a reference to objB. Consequently, a virtual
function is invoked on both objects objA and objB. In case
Z::~Z() is invoked on an adversary-controlled counterfeit
object, the adversary eﬀectively controls the pointers *objA
and *objB and he can make these pointers point to injected
counterfeit objects.
Accordingly, Z::~Z(), and REC-Gs in general, allow the
adversary to make two consecutive COOP-style vfgadget
invocations; we refer to these as invocations A and B . How-
ever, by using B to repeatedly invoke the REC-G itself again,
the adversary can invoke a new vfgadgets via A with each
recursion. This eﬀectively enables the adversary to invoke an
arbitrary number of vfgadgets given a REC-G. The right side
of Figure 1 schematically depicts the adversary-induced con-
trol ﬂow in a REC-G-based COOP attack: actual vfgadgets
are invoked via A , whereas B is used to branch recursively
to the REC-G (here Z::~Z()). Note how any compiler-
 virtual ~Z() {             } };  delete objA;  objB->unref();class X {public:  virtual ~X(); };class Y {public:  virtual void unref(); };class Z {public:  X *objA;  Y *objB;Z::~Z()vfgadget #1vfgadget #2...initial attacker-controlled virt. function call02, 4, ...1AABB3A5Acontrol flow in REC-G-based COOPREC-G code example245generated x86-64 assembly implementation of Z::~Z() is
unlikely to touch argument registers: Y::unref() does not
take any arguments and, by deﬁnition, the same applies to
the destructors X::~X() and Z::~Z(). Accordingly, for the
REC-G Z::~Z(), the adversary can freely use these registers
to pass arguments from one vfgadget to another (all invoked
via call site A ) as described by Schuster et al. [31]. We stress
that not only destructors but any virtual function that fol-
lows the pattern of Z::~Z() and consecutively invokes virtual
functions on (at least) two distinct and adversary-controlled
object pointers may be used as a REC-G.
Intuitively, REC-Gs should generally be prevalent in C++
applications. Indeed, by applying basic pattern matching on
x86-64 assembly code, we were able to identify a range of
easy-to-use REC-Gs in diﬀerent common C++ libraries and
popular applications. For example, Figure 8 in the Appendix
shows the C++ code of a side-eﬀect free REC-G in the Boost
C++ library collection; ﬁgures 9, 10, and 11 depict similar
REC-Gs in the Qt C++ framework, Microsoft’s Visual C++
runtime, and the Chromium web browser respectively.
Unrolled COOP. Given a virtual function with not only
two consecutive virtual function invocations (like a REC-G)
but many, it is also possible to mount a simple unrolled
COOP attack that does not rely on a loop or recursion.
Consider for example the following virtual function:
void C :: func () {
delete obj0 ; delete obj1 ; delete obj2 ; delete obj3 ;}
If objects obj0 through obj3 each feature a virtual destruc-
tor, C::func() can be misused to consecutively invoke four
vfgadgets. We refer to virtual functions that enable un-
rolled COOP as UNR-Gs. Observe that, similar to Z::~Z(),
a compiler-generated x86-64 assembly implementation of
C::func() is unlikely to touch any argument registers. This
again enables the adversary to freely pass arguments from
one vfgadget to another.
We found that even long UNR-Gs are not uncommon in
larger C++ applications. For example, in recent Chromium
versions, the virtual destructor of the class SVGPatternEle-
ment is an UNR-G allowing for as many as 13 consecutive
virtual function invocations. In practice, much shorter UNR-
Gs are already suﬃcient to compromise a system; we demon-
strate in Section 7 that the execution of three vfgadgets is
suﬃcient for an adversary to execute arbitrary code.
4. ADVERSARY MODEL
We consider a powerful, yet realistic adversary model that
is consistent with previous work on code-reuse attacks and
mitigations [11, 13, 24, 31, 35]. We rely on several existing
and complementary mitigations for comprehensive coverage.
Adversarial Capabilities.
• System Conﬁguration: The adversary is aware of
the applied defenses and has access to the source and
non-randomized binary of the target application.
• Vulnerability: The target application suﬀers from a
memory corruption vulnerability that allows the adver-
sary to corrupt memory objects. We assume that the
attacker can exploit this ﬂaw to read from and write
to arbitrary memory addresses.
• Scripting Environment: The attacker can exploit
a scripting environment to process memory disclosure
information at run time, adjust the attack payload, and
subsequently launch a code-reuse attack.
Defensive Requirements.
• Writable ⊕ Executable Memory: The target sys-
tem ensures that memory can be either writable or
executable, but not both. This prevents an attacker
from either injecting new code or modifying existing
executable code.
• Execute-only Memory: We build on previous sys-
tems which enforce execute-only memory pages, i.e., the
CPU can fetch instructions but normal read or write
accesses trigger an access violation. See Section 5.2 for
further discussion of this component.
• JIT Protection: We assume mitigations are in place
to prevent code injection into the JIT code cache and
prevent reuse of JIT compiled code [11, 18, 36]. These
protections are orthogonal to Readactor++.
• Brute-forcing Mitigation: We require that the pro-
tected software does not automatically restart after
hitting a booby trap which terminates execution. In
the browser context, this may be accomplished by dis-
playing a warning message to the user and closing the
oﬀending process.
5. Readactor++
We start by giving a conceptual overview of our approach,
Readactor++, and then discuss each of its major components.
5.1 Overview
Our goal is to show that probabilistic defenses can thwart
function-reuse attacks. When combined with memory leakage
resilient code randomization, we can protect against the full
range of known code-reuse attacks.
Unlike ROP attacks, which reuse short instruction se-
quences, COOP and RILC reuse dynamically-bound func-
tions called through code pointers in read-only memory. To
construct a COOP payload, the adversary must know (or
disclose) the exact representations of objects and vtables.
Similarly, RILC attacks invoke functions through the PLT
which requires knowledge of the layout of this table. Our key
insight is that we can permute and hide the contents of these
tables even from an adversary that can disclose arbitrary
readable memory.
Figure 2 shows a system overview. We use a staged random-
ization approach [5, 24] in which binaries are instrumented
during compilation so that they randomize themselves when
loaded into memory. Our compiler maintains all necessary
information for load-time randomization and stores this meta-
data in the binary for use at load time. Since we gather this
information during compilation, our prototype does not need
to perform static analysis at load time. Note that although
our prototype uses a compiler, our approach is compatible
with binary rewriting as long as the vtable hierarchy and all
virtual and PLT call sites can be recovered through static
analyis, as in VTint [40].
During compilation (left side of Figure 2), we ﬁrst ensure
that code can be mapped in execute-only memory and per-
form code-pointer hiding to prevent function pointers and
return addresses from disclosing the code layout [11]. Most
importantly, we use a novel transformation step to make
vtables compatible with execute-only memory and protect
function pointers from disclosure. We split virtual tables into
246Figure 2: System overview. A specialized compiler (left) creates Readactor++ apps (middle) that randomize
their in-memory representation (right). A small runtime component, RandoLib, uses TRaP meta-data em-
bedded in binaries to safely permute the layout of vtables and procedure linkage tables without the need to
disassemble the entire application. We prevent disclosure of randomized code using execute-only memory.
The right side of Figure 2 gives an overview of the in-
memory representation of applications protected by Readac-
tor++. Global variables, the program stacks, and the heap
are stored in readable and writable memory. All code areas
are subject to ﬁne-grained randomization and are protected
against direct and indirect disclosure of the code layout;
Section 5.2 provides additional details. Vtables, which are
normally stored in read-only memory, are split into a read-
only part (rvtable) and an execute-only part (xvtable) which
is randomized. Because rvtables can be read by attackers,
they do not store any code pointers directly. Instead, rvtables
contain a pointer to their corresponding xvtable. Each entry
in an xvtable is a direct jump rather than a code pointer so
the table can be stored in execute-only memory to prevent
adversaries from reading its contents.
5.2 Countering Memory Disclosure
Attacks against web browsers and other software that host
scripting engines are particularly powerful because the com-
bination of adversarial scripting and memory corruption can
often allow adversaries to access arbitrary memory pages. In
general, we distinguish between direct memory disclosure,
where the adversary read code pages as data [35], and in-
direct memory disclosure, where the adversary reads code
pointers stored in program vtables, stacks, and heaps to
learn the code layout while avoiding direct accesses to code
pages [13]. Execute-only schemes such as XnR [3] and Hi-
deM [17] prevent direct memory disclosure. Readactor [11]
oﬀers additional protection against indirect disclosure of
code through code pointer harvesting. To prevent indirect
disclosure, the Readactor system uses a technique called
code-pointer hiding. They replace all code pointers stored
into memory with pointers to trampolines instead as shown
in Figure 3. Trampolines are simply direct jumps with the
same target as the code pointer it replaces. Because tram-
polines are code stored in execute-only memory, adversaries
cannot “dereference” trampolines to disclose the code lay-
out. Execute-only memory and code-pointer hiding provides
the foundation that we build upon when randomizing tables
containing code pointers.
5.3 Vtable Randomization
C++ objects contain a hidden member, vptr, which points
to a vtable. We could randomize the layout of objects to
make the vptr harder to locate. However, C++ objects are
stored on the heap and stack which are necessarily readable,
so an adversary can use a memory disclosure vulnerability
Figure 3: In traditional apps, adversaries can locate
and read functions by following code pointers (left).
We only store pointers to trampolines in readable
memory (right). Trampolines prevent indirect dis-
closure of the function layout because trampolines
are non-readable and their layout is randomized in-
dependently of other code.
a read-only part (rvtable) and an execute-only part (xvtable),
which we randomize at load time. Section 5.3 elaborates on
this step.
Second, we insert booby trap entries [10] in the xvtables.
We also insert booby traps into the PLT during linking.
Booby traps are code snippets that lie dormant during nor-
mal program execution and terminate the program and alert
the host system if they are ever invoked. Booby traps pre-
vent adversaries from randomly executing the vtable or PLT
entries to indirectly disclose the table layout; Section 5.5
provides the details.
The third compilation step collects meta-data which we
call “TRanslation and Protection” (TRaP) information. We
embed TRaP information in the output binaries to support
rapid load-time randomization. We link our runtime ran-
domization engine, RandoLib, into the output binary in the
ﬁnal and fourth step.
The middle third of Figure 2 shows the contents of a
protected binary. The main executable and each program
library contains TRaP information that is read by RandoLib
and used to randomize the vtables and PLT at load time. We
elaborate on our vtable and PLT randomization techniques
in Section 5.3 and 5.4, respectively.
  Compiler & LinkerVirtual table splittingBooby trapping  Protected App  Protected ProcessEmbed RandoLib124ExecutableLibraryRandoLibTraP InfoTraP InfoRWR-onlyX-onlyHeapStacksFunctionsPLTsRVTablestrampolinesXVTablesCollect TRaP info3Data pages (RW)Function foo:ins1Code pages (RX)&fooadversaryCode disclosure preventedCode disclosurepossibleTrampoline foo_tramp: JMP &fooCode pages (X-only)  Traditional App Readactor++ AppData pages (RW)&foo_trampFunction foo:ins1Code pages (X-only)247randomizing the function ordering in the vtables, we must
rewrite all virtual call sites in the program to use the new,
permuted ordering. These virtual calls use a static oﬀset
from the start of a vtable to dispatch to the correct function.
We rewrite this oﬀset to correspond to the new, randomized
index of the callee. As Readactor++ extends Readactor, all
virtual call sites are also augmented with trampolines that
hide actual return addresses at run time.
5.4 Procedure Linkage Table Randomization
A call to a dynamically linked function goes though the
PLT of the calling module. Each entry in the PLT is a code
sequence that (i) loads a function pointer from the GOT into
a register and (ii) transfers control to the target function
through an indirect jump. To enable lazy binding, each
function’s default address in the GOT initially points to a
function that resolves the external function address. The left
side of Figure 5 shows the lazy binding process.
RILC attacks must know or discover the layout of the
PLT to succeed. For ASLR’ed Linux applications, PLT
entries are laid out contiguously and only the base address
is randomized. One way to improve security is to eliminate
the PLT altogether. However, this approach is problematic
because the PLT or similar tables on Windows are essential
to support dynamically linked functions.
As shown on the right side of Figure 5, we chose to random-
ize the order of PLT entries, insert booby traps, and store the
result in execute-only memory. If we had only done this, an
adversary could still read GOT or relocation information to
disclose the ordering of PLT entries indirectly. We therefore
switch from lazy to eager binding resolution of PLT entries.
This allows us to discard the GOT. Our specialized compiler
determines which calls will be routed through the PLT and
stores the location of each such call site in the TRaP section
of the output ELF ﬁle. At load time, our runtime randomiza-
tion engine, RandoLib, converts all pointers in the readable