as in the ﬁrst attack, but with the operands in the inverse
order, such that the computed address is stored directly in the
dereferenced entry of the GOT. Finally, the ret instruction of
the gadget is used to return directly to the PLT entry of open,
in order to use its jump stub to invoke the function through
the GOT.
IV. ATTACK MITIGATION
This section presents various protections mechanisms pro-
posed in literature, and discusses their effectiveness at pre-
venting our attack, when used in combination with W⊕X and
ASLR. Furthermore, this section presents a new protection that
can be used to block both variants of our attack.
A. Existing mitigation strategies
Table I reports the existing protections included in our analysis
and compares them against the two variants of the attack we
have developed. The highlighted row of the table is relative to
the new mitigation technique proposed in the paper.
64
PLT of open() →
Chunk 3 →
got(open) − 0x83d8 →
Chunk 2 →
oﬀset(system) − oﬀset(open) →
Saved EIP Chunk 1 →
Saved EBP →
Stack
0805f7d8
08052313
deadbeef
deadbeef
08057ccc
08053123
deadbeef
00005124
08054341
deadbeef
3
2
1
S
t
a
c
k
g
r
o
w
t
h
→
8052313 add %eax,0x83d8(%ebx)
8052319 ret
Text
8053123 mov %ebx,%eax
8053125 pop %ebx
8053126 pop %esi
8053127 pop %ebp
8053128 ret
8054341 pop %ebx
8054342 pop %ebp
8052343 ret
C
h
u
n
k
3
C
h
u
n
k
2
C
h
u
n
k
1
Fig. 6. Sample stack conﬁguration for the GOT overwriting attack
Bhaktar et al. [12] proposed a randomization scheme that
uses binary rewriting to periodically re-obfuscate an exe-
cutable, including the layout of the code section. The ran-
domization of the code section could prevent an attacker from
using the chunks available in the executable. However, since
re-obfuscation is periodic, a local attacker that can access the
executable on disk can successfully mount both variants of
our attack, within the time window in which the executable
does not change. Xu et al. [13] designed a runtime system
that randomizes the location of the GOT and patches the PLT
accordingly. This system essentially just adds a fake layer of
security: the sensitive information (the content of the GOT) is
stored at a random location, but the address of this location
remains accessible in memory (in the PLT). Through our attack
it is possible to dereference the PLT, discover the address
of the GOT, and then overwrite or dereference any GOT
entry. However, to perform GOT overwriting, the code chunks
necessary for a dereference must be available in the executable.
Recent versions of binutils include support for producing
executables with a read-only GOT [14]. A similar protection
could also be implemented at runtime, by adopting a system
like the one proposed by Xu et al. Clearly such protection
prevents our GOT overwriting attack, but it cannot mitigate
the ﬁrst variant of the attack. Unfortunately, despite the fact
that this protection has been available in binutils for years,
our experimental analysis demonstrated that this protection is
not yet adopted by any distribution (numbers are reported in
Section V).
RedHat extended the idea of position independent code to
executables. Like shared objects, position independent exe-
cutables (PIE) can be loaded at arbitrary memory locations [7].
None of the variants of our attack can be applied to position
independent executables because, as for randomized libraries,
the address of code chunks varies from one execution to
another. Therefore, guessing the absolute address of a code
chunk in an executable becomes as hard as reusing the code
of a shared library. To further complicate the exploitation,
position independent executables can also be used to construct
self-randomizing executables [15], executables that rearrange
automatically, at each execution, the disposition of their func-
tions.
B. Preventing unsafe accesses to GOT
Our attack is not possible on position independent executables
for the aforementioned reasons. However, this feature is not
yet widely adopted by modern UNIX distribution, but the
motivations for such a choice are not clear (numbers are given
in Section V). We speculate that vendors are afraid of the
performance penalties PIE could introduce and are also not
aware of its real importance. Although we strongly encourage
vendors to move to position independent executables, we
propose a new runtime solution that, being applicable without
recompilation, can be used during the transition to PIE-enabled
distributions and on operating systems where PIE is not yet
available, but ASLR is (e.g., OpenBSD).
Our solution is inspired by the randomized GOT protection
proposed by Xu et al. [13], and relies on encrypting the content
of the GOT. The idea is to encrypt GOT entries, to prevent
all but legitimate accesses. With the exception of the accesses
performed by the dynamic linker to bind the executable with
the shared libraries, all further accesses to the GOT are reads
and occur only from the PLT (see Figure 3). Therefore,
besides the linker, only the accesses originating from the PLT
should be considered legitimate and authorized to access to
unencrypted content of the GOT and to transfer the execution
to the functions in shared libraries. To ease the presentation
we assume preemptive binding (i.e., LD_BIND_NOW is set).
In such a situation all legitimate accesses to the GOT originate
from the PLT. However, the approach we are proposing could
be extended to work also with lazy binding, by customizing
the dynamic linker.
In more detail, our scheme operates as follows. We encrypt
all the entries of the GOT such that attacker’s attempts to read
the content of the GOT to guess the random base address of the
library fail; without the decryption key, the retrieved content
of the GOT is meaningless. Similarly, attempts to modify the
GOT fail as well. Obviously, encryption interferes with the
correct execution of the program. For this reason, we rewrite
the program to make it able to decrypt the protected data when
it legitimately accesses the GOT. As all legitimate accesses
go through the PLT, it is sufﬁcient to patch each stub of the
PLT to dereference and decrypt the corresponding GOT entry,
and then to transfer the execution to the decrypted address.
The weakness of the randomized GOT protection proposed
65
W⊕X and ASLR
Periodic re-randomization [12]
GOT randomization [13]
GOT read-only [14]
PIE [7]
Self-randomization [15]
Encrypted GOT
−
−
−
−
(cid:88)
(cid:88)
(cid:88)
GOT dereferencing GOT overwriting
−
−
−
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Requires recompilation
No
Yes
No
No
Yes
Yes
No
COMPARISON OF EXISTING PROTECTIONS WITH RESPECT TO OUR ATTACK AND TO THE NEW PROPOSED PROTECTION ((cid:88) DENOTES THAT THE DEFENSE
TABLE I
TECHNIQUE PREVENTS THE ATTACK)
by Xu et al. is that the PLT leaks the address of the GOT, and
consequently an attacker can mount both a GOT dereferencing
and GOT overwriting attacks. As we adopt a similar strategy,
we are exposed to the same risk. Therefore, we have to protect
the patched PLT to avoid any information leak that can be
exploited by the attacker.
Each PLT entry is patched to perform the following opera-
tions: (I) to read the corresponding GOT entry, (II) to decrypt
the address read, (III) and to jump to the decrypted address.
Because of the aforementioned problem, the decryption key
cannot be stored directly in the code of the patched jump
stub, nor can it be referenced explicitly from the code. The
solution we adopt inlines in the ith jump stub a key generation
function that computes dynamically the decryption key to use
for the decryption of the ith entry of the GOT. Encryption
keys and key generation functions are generated at runtime
and differ from one GOT/PLT entry to another. The rationale
behind this choice is that, although an attacker could read
(using our GOT dereferencing attack) the code of the patched
jump stub that performs the decryption, and try to “borrow”
the decryption code, he does not know how to use this code.
Indeed, this code is generated randomly at each execution,
and to construct useful gadgets from it the attacker would
have to analyze (i.e., disassemble) the code, and the only
way to do that
is
theoretically possible, such a complex analysis requires an
arsenal of gadgets that are practically impossible to construct
even from a large executable.
is to use other gadgets. Although that
We have developed a prototype implementation of the pro-
posed protection, for GNU/Linux (x86). For simplicity the pro-
totype requires preemptive binding of shared libraries and does
not support dynamic loading of shared objects (e.g., dlopen).
However, the dynamic linker could be extended to support our
protection also with lazy binding and dynamic library loading.
Lazy binding typically introduces less overhead and reduces
startup costs, and consequently the overhead introduced by
our protection could be reduced by completing the prototype.
Our prototype consists of a shared library that is injected in the
address space of the program to protect (using LD_PRELOAD).
The library encrypts all the entries of the GOT and then
patches the jump stubs of the PLT as described above. Since
the size of PLT entries is insufﬁcient to hold our patched
code and cannot be enlarged without breaking the functionality
of the program, we allocate a new executable section, and
store in it the new patched entries. Additionally, we update
PLT entries to redirect the execution to the corresponding
entries in PLT ENC. Keys generation functions are constituted
of a random number (up to a dozen) of different assembly
instructions, and are crafted to be unpredictable. Figure 7
shows the memory layout of our sample process with the
randomized GOT protection in action. The extra section called
PLT ENC is the section created to hold the new encryption-
aware jump stubs. When the program calls the open function,
the execution ﬂows, through the patched PLT, to the jump stub
of open in the PLT ENC section (at address 0x08078177).
The code we use to decrypt the GOT entry of open and then
to invoke the function looks like the code in the ﬁgure, but
it is different in each entry and execution. The code performs
the three operations necessary to invoke the function (load,
decryption, and control transfer) and takes the precaution of
preserving all registers.
V. EVALUATION
We evaluated the proposed attack and solution. Overall, the
evaluation demonstrated the wide-scale applicability of our
attack, and the effectiveness of the proposed protection. Details
of the evaluation are reported separately in the following
sections.
A. Evaluation of the attack
We performed two independent evaluations for our attack.
First, we tested our attack against a version of Ghostscript vul-
nerable to a stack-based overﬂow. We successfully exploited
the vulnerable program with both variations of our attack.
Second, we tested a large corpus of programs, collected from
different UNIX distributions for the x86 and x86-64 architec-
tures and supporting both W⊕X and ASLR, to measure how
many of them were predisposed to the attack (i.e., whether the
attack would be possible if the programs were vulnerable to
a stack-based buffer overﬂow). For the x86 architecture, the
majority of the programs tested, about 95.6%, were found to
be predisposed to the attack. For the x86-64 architecture we
found less predisposed programs, only about 61.8%. This is
due to the fact that on x86-64 instructions with 64-bit operands
requires a special preﬁx, and consequently the code chunks
needed for the attack are less frequent.
66
0x8048000
1
Text
PLT
GOT
PLT ENC
Text
s
s
e
c
o
r
p
e
l
b
a
r
e
n
l
u
V
0x8080000
0xb7f50000
c
b
i
l
0xb7f80000
RX
RX
RO
RX
RX
4
2
PLT ENC
:
8078177 push %eax
8078378 mov
807837c shl
807837f mov
8078383 xor
8078389 xchg %eax,(%esp)
807838c ret