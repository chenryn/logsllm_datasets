### Hashing@Home (pwn, 231+10 pts, 14 solved)

The server employs the memory addresses of `hash_rpc_context` structures as request IDs to track work delegated to its clients. However, the verification of these request IDs in client responses is inadequate, allowing clients to potentially overwrite any memory locations that pass a simple check for a valid `hash_rpc_context` structure header.

Additionally, clients can send arbitrary response data, which the server will store in the `data_to_hash` member of existing `hash_rpc_context` structures in its memory. This capability enables clients to craft fake `hash_rpc_context` structures that pass the server's validation checks.

By overwriting the `hash_rpc_context` structure of `first_context` and then triggering the `hash_together_the_first_two` function, clients can read arbitrary server memory. This function XORs an arbitrary memory location with known bytes and sends the result as a new request to the client.

My [exploit](exploit.py) leverages this vulnerability to extract the contents of `key_bytes`, which contains the flag.