# ESAPI WAF配置文件
ESAPI
WAF由XML策略文件驱动，该文件告诉应用程序在应用程序中执行哪些规则，这些规则可以做很多事情，从简单的虚拟补丁到使用BeanShell脚本复杂授权
该文档描述了策略文件的结构，每一个规则及其工作原理。这里也会提供一些示例去引导整个实验过程，下图直观展示了XSD策略文件，这里策略文件的正式规范  
[  
如图所示，策略文件的根元素是”policy”,并且没有任何属性。在”policy”根元素里面有很多规则标签，这些只是帮助组织策略文件的规则类别。如图所示，只有标签”aliases”和”settings”是必要的，考虑到这一点，下面是一个没有任何规则的框架示例
          block
          JSESSIONID
             /error.jsp
             500
如果你正在编写自己的策略文件，从这个空文件开始是最好的选择。每一条规则都有一个可选的ID属性，可用于每个规则的唯一标识。虽然id属性也不是必须的，不过你可以在日志中搜索它，来发现具体触发了哪些规则。  
下面的内容即专门讨论上述的每个规则细节。
### Aliases标签
``标签为在整个策略文件定义公用的字符串，该标签中可以用0个或多个子标签。
想象一下，在/admin目录中发现了若干漏洞，由于有很多规则会引用网站的这一部分，因此需要有一个配置来定义它。它减少了错误的规则，并有助于使规则更有条理。示例如下：
       ^/admin/.*
属性`name`是必须的，用于之后在策略中引用的别名，所以应使用便于理解的单词。  
属性`type`是可选项，用于告诉WAF该字符串是一个JAVA正则表达式。若没有指定，默认为普通字符串，建议使用`regex`
### settings标签
``标签是WAF的全局配置，本节内容主要讲解了WAF的两个基本内容：WAF的运行模式和error-hadling执行。示例如下：
       redirect
        /security/error.jsp
          403
#### 子标签
子标签``是必须的，`mode`表示高等级该如何处理严重的安全事件。安全事件发生在某些规则与传入的请求相匹配时，例如，如果用户访问``规则时，应用应执行该模式配置的内容。然而,一条``规则企图在每一个请求上触发,通常安全性的最佳实践是不依赖于其它操作。
`Mode`有三个配置可选项：redirect,block,log。
`log`  
当``配置为`log`时，WAF仅执行记录日志，并且在安全规则被触发时不执行任何其它操作。此模式可用于测试生产环境中的规则，以便在短时间调整安全规则。设置``为其它任何值与设置成log相同，指定为log只是告诉WAF不要执行任何其它操作
`redirect`  
当``配置为redirect时，应用程序会重定向至302或者JavaScript客户端重定向的错误页面，具体取决于触发规则时应用程序的状态。用户被重定向的目标URL配置在``标签中
`block`  
当配置为block时，应用程序在发生严重的安全错误时会简单的停止处理请求，并且返回一个空响应
#### 子标签
子标签``是可选的，该值告诉WAF应用程序容器中session的cookie名称是什么，如果为空，则默认值为JSESSIONID。该标签尚为实验功能，不推荐使用。
#### 子标签
在该项中配置两个值：``(默认重定向URL)和``（状态值）。
``  
配置的是WAF处于`redirect`是发生严重安全事件后重定向的地址。它可以是一个相对或者绝对的URL地址，应用于客户端的302跳转和JavaScript中。建议将此值设置为通用错误页面
``  
配置的是WAF处于`block`发生严重安全事件时要使用的HTTP状态码，常见的值为：401，302和500。当mode为log或者redirect时，此值不起作用。
### Authentication-rules标签
``标签允许WAF执行典型的J2EE认证请求。
典型的J2EE应用程序认证模式需确保session变量存在于某些基础action类中，如果该变量不存在，即表示该请求被认为是未经认证的并作适当的处理。但是，由于应用程序支持广泛的功能与服务，在保护所有需要认证的功能方面经常出现配置错误。
如果这种模式不能用于您的应用程序对用户进行认证操作，你可以不使用它。下面是一个``标签的使用实例，它保护应用程序所有的URL，除了一些公开的静态内容和首页:
       /
       /index.html
       /login.jsp
       /index.jsp
       /images/.*
       /css/.*
       /help/.*
属性`path`是必须的，告诉WAF哪些URL是需要经过认证的，属性值为正则表达式。在上述的实例中，path的值为`/.*`,意思是对任何请求都将强制进行认证。
属性`key`是必须的，告诉WAF应该检查存在的`session`属性,如果此`session`属性具有任何非空值，即表示该用户已认证。
#### 子标签
有很多规则可以嵌套在``中，意思是告诉WAF不要将给定的规则应用于特定的URL中，即白名单。如果该标签的type属性设置为”regex”,才解析以正则表达式形式出现的路径URL。这些路径通用应用于放行静态资源文件，和其它任何用户不用登陆就能访问到的页面。
### Authorization-rules标签
`` 标签允许WAF执行典型的J2EE授权请求。该标签支持两种不同类型的规则：``和``。
子标签
大多数应用都有普通用户和管理员用户，由于它们部署在同一个应用程序中，普通用户可以访问管理员页面，只要保险公司能够得到正确的URL或者窃取管理员的cookie/session。
``规则通过IP限制对某些URL的访问来解决这个问题，通过这种方法有助于缩减暴露的管理员证书/登陆凭证带来的危害，允许颗粒度的网络策略来请求不同层次的应用程序。
       /admin/.*
``规则允许访问`/admin/.`的任何URL只能是本地局域网IP(192.168.1.*)或是服务器本身。
属性`type`被设置为`regex`,告诉WAF被保护的路径是正则表达式形式的字符串
属性`ip-header`告诉WAF请求头将控制用户原始的IP地址，应用程序通常设置在一个或多个代理服务器的下游，这将掩盖请求的真实原始IP，这种情况下，应用通常会使用请求的真实IP填充请求头。在上述实例中，用户的IP地址可以在`X-ORIGINAL-IP`中找到，若不指定该字段，默认在`HttpServletRequest`对象中查找IP地址。
属性`ip-regex`，应该包含一个正则表达式，当匹配到一个传入的请求IP时，即表明该请求已被授权。
#### 子标签
``规则是功能强大的标签，可以用来实现诸多不同的功能，特别是授权(基于角色的访问控制核查)  
从技术上来讲必须``规则是这样的：  