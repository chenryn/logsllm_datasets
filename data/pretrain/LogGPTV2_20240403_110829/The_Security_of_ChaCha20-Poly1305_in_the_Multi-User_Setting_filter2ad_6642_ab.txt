the output to 𝑦. By convention, the running time of an adversary
is the sum of its running time, the time to answer all of its oracle
queries, and the size of its description.
AEAD Syntax. A nonce-based authenticated encryption scheme
with associated data 𝛱 = (K, E, D) is a triple of algorithms:
• The key generation algorithm K takes no input and returns a
secret key 𝐾. We overload K to also represent the key space
associated to the key generation algorithm.
• The deterministic encryption algorithm E : K × N × AD ×
M → C takes as input a secret key 𝐾 ∈ K, a nonce 𝑁 ∈ N,
associated data 𝐴𝐷 ∈ AD, and a message 𝑀 ∈ M and returns
a ciphertext 𝐶 ∈ C. We require E to have constant expansion,
i.e. for any (𝐾, 𝑁 , 𝐴𝐷, 𝑀) ∈ (K,N, AD,M), the expansion 𝑡 =
|E(𝐾, 𝑁 , 𝐴𝐷, 𝑀)| − |𝑀| is constant.
• The deterministic decryption algorithm D : K×N ×AD×C →
M ∪ {⊥} takes as input a secret key 𝐾 ∈ K, a nonce 𝑁 ∈ N,
associated data 𝐴𝐷 ∈ AD, and a ciphertext 𝐶 ∈ C and returns
either a message 𝑀 ∈ M or the symbol ⊥ to indicate an invalid
ciphertext.
We refer to the associated sets K, N, AD, M, and C as the key
space, the nonce space, the associated-data space, the message or
plaintext space and the ciphertext space, respectively. We require
every nonce-based AEAD to satisfy correctness, namely for all
(𝐾, 𝑁 , 𝐴𝐷, 𝑀) ∈ (K,N, AD,M), it must hold that if 𝐶 ← E(𝐾, 𝑁 ,
𝐴𝐷, 𝑀) then 𝑀 ← D(𝐾, 𝑁 , 𝐴𝐷, 𝐶).
AEAD Multi-User Security. We use the multi-user security defi-
nition for authenticated encryption put forward by Bellare and
Tackmann [4] adapted to the ideal permutation model. Here, the
encryption oracle Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀) and the verification oracle
Vf(𝑖, 𝑁 , 𝐴𝐷, 𝐶) can be queired for distinct users (identified by the
integer 𝑖). The adversary A is also given access to the ideal permu-
tation 𝜋 through the oracle Prim(𝑋) and its inverse Prim−1(𝑌).
An adversary is said to be nonce-respecting if it never repeats a
pair (𝑖, 𝑁) across encryption queries. Throughout, we require that
every adversary be nonce-respecting and never asks a verification
query Vf(𝑖, 𝑁 , 𝐴𝐷, 𝐶) with 𝐶 being the output of a previous en-
cryption query Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀) (since such queries permit trivial
wins). Without loss of generality, we will assume that an adversary
does not repeat any queries.
At points in our analysis, we will require that an adversary A
be 𝑑-repeating, meaning that A does not repeat the same nonce
with more than 𝑑 users in its encryption queries. A is strongly
𝑑-repeating if it is 𝑑-repeating and additionally does not repeat the
same nonce across verification queries for more than 𝑑 users.
Definition 2.1 (Multi-user AE advantage).
Let 𝛱[𝜋] = (K, E, D) be a nonce-based AEAD scheme constructed
from an ideal permutation 𝜋 : X → X with expansion 𝑡. We define
the multi-user AE advantage of adversary A against 𝛱[𝜋] as:
𝛱 [𝜋] ⇒ 1
𝛱 [𝜋] ⇒ 1
A𝐺Ideal-muAE
A𝐺Real-muAE
− Pr
(cid:21)
,
Adv
𝛱 [𝜋] (A) = Pr
muAE
(cid:20)
(cid:21)
(cid:20)
where games 𝐺Real-muAE
𝛱 [𝜋]
and 𝐺Ideal-muAE
𝛱 [𝜋]
are defined in Figure 1.
procedure Initialize
1 : 𝐾1, 𝐾2, · · · ←$ K
procedure Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀)
1 : 𝐶 ← E(𝐾𝑖, 𝑁 , 𝐴𝐷, 𝑀)
2 :
procedure Prim(𝑋)
1 :
return 𝜋 (𝑋)
return 𝐶
Game 𝐺Real-muAE
𝛱 [𝜋]
procedure Vf(𝑖, 𝑁 , 𝐴𝐷, 𝐶)
1 : 𝑀 ← D(𝐾𝑖, 𝑁 , 𝐴𝐷, 𝐶)
2 :
procedure Prim−1(𝑌)
1 :
return (𝑀 ≠ ⊥)
return 𝜋−1(𝑌)
procedure Enc(𝑖, 𝑁 , 𝐴𝐷, 𝑀)
1 : 𝐶 ←$ {0, 1}|𝑀|+𝑡
2 :
procedure Prim(𝑋)
1 :
return 𝜋 (𝑋)
return 𝐶
Game 𝐺Ideal-muAE
𝛱 [𝜋]
procedure Vf(𝑖, 𝑁 , 𝐴𝐷, 𝐶)
1 :
return false
procedure Prim−1(𝑌)
1 :
return 𝜋−1(𝑌)
Figure 1: Games used to define the multi-user AE advantage.
Adversarial Parameters. In the following, for an associated adver-
sary A, we will denote by 𝑞𝑒 its maximum number of encryp-
tion queries and by 𝜎𝑒 an upper bound on its total number of
encrypted blocks. We denote by 𝑞𝑣 the maximum number of de-
cryption/verification queries of A and by 𝜎𝑣 an upper bound on its
total number of decrypted/verified blocks. Further, let ℓ𝑚 denote
the maximum size in 𝑡-bit blocks (including associated data) that
A is allowed to query to its encryption and decryption/verification
oracles. Finally, for the multi-user setting, 𝑝 denotes the maximum
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1983number of ideal permutation queries and 𝑑 denotes the maximum
number of users queried with the same nonce during encryption
(i.e. for a 𝑑-repeating or strongly 𝑑-repeating adversary A).
Δ-Universal Hash Functions. Let 𝐻 : R ×D → {0, 1}𝑡 be a family of
keyed hash functions with key space R, domain D and digest space
{0, 1}𝑡, for some positive integer 𝑡. We will consider hash function
families over strings and string pairs. When D = {0, 1}∗, for any
positive real number 𝑐, we say that 𝐻 is 𝑐-almost Δ-universal if for
all distinct 𝑀, 𝑀′ ∈ {0, 1}∗ and all 𝑧 ∈ {0, 1}𝑡, it holds that
(cid:104)𝐻𝑟 (𝑀) = 𝐻𝑟 (𝑀′) (𝑡)+ 𝑧(cid:105) ≤ 𝑐 · max (|𝑀|𝑡 , |𝑀′|𝑡)
(cid:104)𝐻𝑟 (𝐴𝐷, 𝐶) = 𝐻𝑟 (𝐴𝐷′, 𝐶′) (𝑡)+ 𝑧(cid:105)
Alternatively, when D = {0, 1}∗ × {0, 1}∗, for any distinct (𝐴𝐷, 𝐶),
(𝐴𝐷′, 𝐶′) ∈ {0, 1}∗ × {0, 1}∗ and all 𝑧 ∈ {0, 1}𝑡, we require that
Pr𝑟 ←$ R
Pr𝑟 ←$ R
2𝑡
.
≤ 𝑐 · max (|𝐴𝐷|𝑡 + |𝐶|𝑡 , |𝐴𝐷′|𝑡 + |𝐶′|𝑡)
.
2𝑡
of input-output pairs 𝜏 = (cid:0)(𝑥1, 𝑦1), (𝑥2, 𝑦2), . . . , (𝑥𝑞, 𝑦𝑞)(cid:1). We use
H-coefficient Technique. The H-coefficient technique [11, 25] is
a method for bounding the advantage of a computationally un-
bounded adversary A, which wlog can be assumed to be deter-
ministic, attempting to distinguish between a real and an ideal
game. The technique focusses on the transcripts generated when
A interacts with the oracles in these games, namely, the sequence
Tideal to denote the random variable corresponding to the transcript
generated by A in the ideal game. Then, Pideal(𝜏) and Preal(𝜏) de-
note the probabilities that a given transcript 𝜏 is generated in the
corresponding game when interacting with A. A transcript 𝜏 is said
to be attainable if there exists an adversary such that the probability
of generating 𝜏 in the ideal game is strictly greater than 0.
The H-coefficient technique relies on identifying a suitable parti-
tion of attainable transcripts, applying the following theorem, and
then calculating 𝜖1 and 𝜖2 (for a proof, see [11]):
Theorem 2.2 (H-coefficient Techniqe). Let A be a computa-
tionally unbounded adversary trying to distinguish between a real
game 𝐺Real and an ideal game 𝐺Ideal. Let 𝑇 = 𝑇good ⊔ 𝑇bad be a
partition of the set of attainable transcripts. If there exist 𝜖1, 𝜖2 ≥ 0
such that ∀𝜏 ∈ 𝑇good, Preal(𝜏)
Pideal(𝜏) ≥ 1 − 𝜖1 and Pr[Tideal ∈ 𝑇bad] ≤ 𝜖2,
then
(cid:12)(cid:12)(cid:12)Pr(cid:104)A𝐺Real ⇒ 1(cid:105) − Pr(cid:104)A𝐺Ideal ⇒ 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ 𝜖1 + 𝜖2.
3 THE CHACHA20-POLY1305 SCHEME
In this section, we provide a brief overview of ChaCha20-Poly1305,
as defined in RFC 8439 [23], and lay some of the groundwork for
our security analysis.
The AEAD Composition. Pseudocode for ChaCha20-Poly1305 is
shown in Figure 3, consisting of the encryption algorithm E, the
decryption algorithm D, and their subcomponents: the ChaCha20
stream cipher, the one-time MAC Poly1305_Mac, and the MAC’s
key-generation algorithm Poly1305_Key_Gen. In turn, these sub-
components are based on the ChaCha20 block function CC_block
and the Δ-universal hash function family 𝐻 over string pairs.
The encryption algorithm E is represented in Figure 2. It takes
as input a 256-bit secret key 𝐾, a 96-bit nonce 𝑁 , a variable-length
Associated Data
𝐴𝐷
Key
𝐾
Nonce
𝑁
Plaintext
𝑀
Counter=0
Counter=1
Counter=ℓ
CC_block
CC_block
. . .
CC_block
2𝑡 bits
Poly1305_Key_Gen
Keystream
ChaCha20
𝐴𝐷
pad(𝐴𝐷)
𝐶
pad(𝐶)
len(𝐴𝐷)
len(𝐶)
One-time key (𝑟, 𝑠)
Poly1305
Authentication tag 𝑇
Ciphertext 𝐶
Poly1305_Mac
Figure 2: The encryption procedure in ChaCha20-Poly1305.
byte string of associated data 𝐴𝐷, and a variable-length byte-string
message 𝑀. It returns a ciphertext 𝐶 consisting of the ChaCha20
encryption of 𝑀, and a 128-bit tag 𝑇 , computed over 𝐴𝐷 and 𝐶 using
Poly1305_Mac with a one-time key (𝑟, 𝑠) consisting of two 128-bit
strings. The one-time key (𝑟, 𝑠) is derived anew in each encryption
by running the ChaCha20 block function in Poly1305_Key_Gen on
𝐾, 𝑁 , and the counter value zero—which is reserved solely for this
purpose. The decryption algorithm D proceeds analogously: it first
derives the one-time key, it recomputes the MAC tag and checks
whether it matches that supplied in the ciphertext. If so, it proceeds
to decrypt the rest of the ciphertext using ChaCha20 and returns
the decrypted message. Otherwise it returns ⊥, indicating error.
Chacha20. Designed by Bernstein, the ChaCha20 stream cipher [7]
is a refinement of the Salsa stream cipher [6]. It uses a 256-bit secret
key 𝐾 and a 96-bit nonce 𝑁 to encrypt (or decrypt) an arbitrary-
length message 𝑀 (or ciphertext 𝐶). As with any stream cipher, it
generates a pseudorandom keystream that is XORed to the mes-
sage. The keystream is generated in blocks of 512 bits through
the ChaCha20 block function CC_block. The CC_block function
is keyed with 𝐾 and is evaluated over an input composed of the
96-bit nonce 𝑁 and a 32-bit block counter 𝑖. This way, it is em-
ployed as a pseudorandom function, but under the hood it really
consists of a 512-bit permutation 𝜋 in a Davies–Meyer-type con-
figuration. More specifically, the key, counter, and nonce are con-
catenated and prepended with a constant to form the input to the
ChaCha20 permutation and then added once again to the permu-
tation’s output using modulo 232 addition on word-by-word basis,
i.e., CC_block(𝐾, 𝑁 , 𝑖) = 𝜋(𝑍∥𝐾∥𝑖∥𝑁) (32)+ (𝑍∥𝐾∥𝑖∥𝑁), where 𝑍 is a
128-bit constant.
Poly1305. The Poly1305 algorithm [5] is a one-time MAC, also
designed by Bernstein. It takes a key consisting of two 128-bit
strings (𝑟, 𝑠); the tag corresponding to a message 𝑀 is computed as
𝐻𝑟 (𝑀) (𝑡)+ 𝑠. Its security relies on the 𝑐-almost Δ-universality of the
hash function 𝐻, as shown by Bernstein [5]. The hash function 𝐻
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1984return 𝐶 ∥𝑇
𝑟 ∥𝑠 ← Poly1305_Key_Gen(𝐾, 𝑁)
if 𝑇 ≠ 𝑇′ then return ⊥
return ChaCha20(𝐾, 𝑁 , 𝐶)
procedure E(𝐾, 𝑁 , 𝐴𝐷, 𝑀)
1 :
2 : 𝐶 ← ChaCha20(𝐾, 𝑁 , 𝑀)
3 : 𝑇 ← Poly1305_Mac((𝑟, 𝑠), 𝐴𝐷, 𝐶)
4 :
procedure D(𝐾, 𝑁 , 𝐴𝐷, 𝐶∥𝑇)