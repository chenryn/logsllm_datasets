title:ROPMEMU: A Framework for the Analysis of Complex Code-Reuse Attacks
author:Mariano Graziano and
Davide Balzarotti and
Alain Zidouemba
ROPMEMU: A Framework for the
Analysis of Complex Code-Reuse Attacks
Mariano Graziano
Cisco Systems, Inc.
Davide Balzarotti
Eurecom
Alain Zidouemba
Cisco Systems, Inc.
ABSTRACT
Code reuse attacks based on return oriented programming
(ROP) are becoming more and more prevalent every year.
They started as a way to circumvent operating systems
protections against injected code, but they are now also
used as a technique to keep the malicious code hidden from
detection and analysis systems. This means that while in
the past ROP chains were short and simple (and therefore
did not require any dedicated tool for their analysis), we
recently started to observe very complex algorithms – such
as a complete rootkit – implemented entirely as a sequence
of ROP gadgets.
In this paper, we present a set of techniques to analyze
complex code reuse attacks. First, we identify and dis-
cuss the main challenges that complicate the reverse engi-
neer of code implemented using ROP. Second, we propose
an emulation-based framework to dissect, reconstruct, and
simplify ROP chains. Finally, we test our tool on the most
complex example available to date: a ROP rootkit contain-
ing four separate chains, two of them dynamically gener-
ated at runtime.
1.
INTRODUCTION
Memory analysis and memory forensics are active re-
search ﬁelds that have rapidly evolved over the past decade
and they are now a popular, complementary approach to
support modern malware analysis and inspect potentially
compromised machines. The main focus on memory foren-
sics (from a malicious code perspective) is to ﬁnd intrusion
evidences in the physical memory. Commonly, these evi-
dences involve artifacts that has been created or injected in
memory by malicious components. Volatility plugins like
psxview and malfind are good example of tools that per-
form this task. Unfortunately, the current focus on “code
injection” is unable to cope with the emerging trend of ad-
vanced threats that adopt “code reuse” techniques (such as
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897894
return oriented programming) as a mean of obfuscation, to
perform malicious computation without injected code.
Return oriented programming (ROP) is a technique to
execute code by reusing instructions already present in a
program. Each sequence of instructions (called gadget)
is responsible to fetch the address of the next one (typi-
cally from the stack using the ret instruction), thus gluing
together many small gadgets to perform a predeﬁned com-
putation.
The ROP paradigm is in constant evolution due to the
frequent release of new countermeasures against code reuse.
In particular, tools like EMET [37] and kBouncer [45] con-
siderably raised the bar and made simple techniques in-
eﬀective, forcing oﬀensive researchers to devise more ad-
vanced forms of ROP. At the same time, software and
hardware vendors introduced sandboxing mechanisms and
light forms of control ﬂow integrity in userspace, as well
as several security enhancements in kernel-space. For ex-
ample, UDEREF [54], SMAP [29], SMEP [17], NX re-
gions, driver signing and KASLR [31] signiﬁcantly hinder
the kernel exploitation phase, and even when the attacker
is able to control the instruction pointer, a considerable
eﬀort is still required to create a functional exploit. To
cope with all these security improvements, attackers also
adopted ROP chains as part of kernel exploits. The same
trend can also be observed in other architectures. Jail-
break communities for Android and iOS are also responsi-
ble for some of the most complex public ROP chains, for
instance as part of the Comex’s iOS jailbreaks [26, 59]. As
a last step of this constant evolution, in 2014 researchers
were able to implement the ﬁrst prototype of a complete
and functional persistent rootkit in ROP [58].
Meanwhile, over the last decade, hundreds of academic
papers and underground presentations focused on ROP.
On the one hand, researchers proposed a wide range of
defense mechanisms. On the other hand, they introduced
improved ROP variations as well as tools to automate the
chain creation phase. This constant arms race is still in
progress today and resulted in a considerable increase in
the complexity of ROP chains. While both the attack and
the defense sides have been widely covered, the analysis of
ROP chains has been completely overlooked and, in 2016,
there is still not a single available framework to support
their analysis.
In comparison, reverse engineering relies on a broad
range of tools that have been perfected over the years,
such as debuggers, disassemblers, and decompilers. Unfor-
tunately, all these products were designed for “EIP-based”
programming and are of very little use to analyze stack-
based return oriented programming payloads.
This is the problem we address in this paper. Speciﬁ-
cally, two main observations motivate our work: the lack
of public tools to analyze ROP payloads and the observa-
tion that ROP chains are rapidly growing both in size and
in complexity.
To tackle these problems, we propose ROPMEMU –
a framework for the automated analysis of ROP chains.
We assume that, using existing techniques [55, 47, 33], a
forensic investigator discovers a chain in system memory
and needs to investigate its behavior. At ﬁrst glance, the
problem may seem trivial: it would be enough to dump the
memory region containing the chain, reconstruct the en-
tire code by appending the instructions contained in each
gadget, and then analyze it like any other sequence of as-
sembly instructions. However, in this paper we show that
this procedure is in fact very complex and requires a num-
ber of dedicated tools and techniques.
ROPMEMU leverages techniques from the ﬁelds of mem-
ory forensics, emulation, multi-path execution, and com-
piler transformations to analyze complex ROP chains and
recover their precise control ﬂow graphs. Moreover, by
using a novel multi-path emulation approach, our system
is also able to reconstruct chains which are dynamically-
generated at runtime, allowing an analyst to capture the
behavior of the most complex attacks that can be encoun-
tered in the wild.
To summarize, this paper makes the following contribu-
tions:
• We propose the ﬁrst memory analysis framework to
analyze, dissect, reconstruct and simplify malicious
code based on code reuse techniques.
• We discuss a number of practical challenges that
need to be addressed to reverse engineer code im-
plemented using return oriented programming. This
goes far beyond what was observed in the past in
simple exploits and what was discussed in previous
papers.
• We tested our tool with the most complex example
of this kind: a ROP rootkit containing chains with a
total of 215,913 gadgets.
2. BACKGROUND
In this section, we provide the technical background re-
quired to understand the remaining part of the paper. We
ﬁrst introduce the return oriented programming paradigm
and we summarize the available analysis techniques. We
then provide an overview of the current trends and evolu-
tion of rootkit technologies as well as the recently-proposed
concept of an ROP rootkit. Finally, we introduce in more
detail the ROP rootkit proposed by Vogl et al. [58], that we
will use as a case study throughout the rest of the paper.
2.1 Return Oriented Programming
Security countermeasures introduced in the last decade
in modern operating systems forced attackers to adapt and
ﬁnd new ways to exploit programs. To overcome hard-
ware defenses – such as the no-execute bit (NX) in PAE
and IA-32e modes on Intel processors, software protec-
tions trying to emulate the NX bit behavior [53, 56, 57],
and code signing [2, 3, 1] techniques – oﬀensive researchers
proposed several forms of code reuse attacks [39, 51, 50].
Over the years, code reuse attacks have been ported to
diﬀerent architectures [34, 12] and have evolved in a mul-
titude of diﬀerent techniques, such as return oriented pro-
gramming without returns [13], jump return oriented pro-
gramming [10], blind ROP [9], and sigreturn oriented pro-
gramming [11].
ROP is now one of the most prevalent and widespread
techniques adopted in the majority of the exploits observed
in the wild. It is a particular instance of code reuse attack
in which the attacker uses instructions already present in
memory and chains them together to perform arbitrary
computation. A single block of assembly instructions ter-
minated by a ret (in its most traditional form) is called a
gadget. A sequence of gadgets is then connected to form
a ROP chain by putting their addresses on the stack and
leveraging the ret instruction to return from one gadget
to the next one. Please refer to the original formulation
from Shacham [51] for a more detailed presentation of the
internal details of return oriented programming.
ROP Analysis – In the past, ROP payloads were mainly
used by exploits to disable the protection enforced by the
NX bit and then execute a normal shellcode.
In these
cases, the ROP chain is generally very short, as its only
goal is to invoke functions (e.g., VirtualProtect or mprotect)
to change the page permissions of the memory containing
the shellcode. As a consequence, the vast majority of ROP
chains were in fact composed of a straight sequence of in-
structions without any branch or complex control ﬂow.
There exists a countless number of oﬀensive tools to sim-
plify the creation of ROP chains – ranging from simple
techniques [16, 30, 49, 7] to disassemble binaries, ﬁnd gad-
gets and group them together – to more advanced tools [44,
40, 6] that use constraint solvers, intermediate languages
and even emulators [42] to automate the chain creation
as much as possible. Unfortunately, because of the simple
form of the existing chains, to date no existing tool has
been proposed to analyze ROP payloads.
More recently, researchers and malware writers discov-
ered that return oriented programming is not only a useful
technique to run exploits, but it also provides a very eﬀec-
tive way to hide the malicious code. In fact, since ROP al-
lows the implementation of a new functionality by reusing
existing sequences of instructions, it makes the malicious
code much more complex to identify, isolate, and analyze.
As part of this emerging phenomenon, chains have started
to contain complex application logic, therefore becoming
much longer and much more complex. As a ﬁrst exam-
ple, malware samples have adopted ROP payloads to im-
plement a dropper/downloader that fetches and runs the
second stage [24]. Even more worrying, in 2014 Vogl et
al. [58] presented the ﬁrst complete example of a rootkit
implemented in ROP.
In this paper we show that the complexity of these chain
is well beyond what can be manually investigated by a
human analyst. Therefore, we believe that this opens a
new era for malicious code execution, and calls for a new
set of tools and techniques to perform its analysis.
2.2 Rootkits
Rootkits are malicious software designed to gain per-
sistent, stealth access to a compromised machine. In the
last few years, rootkit technology has been rapidly evolv-
ing and increasing in sophistication. In order to conceal
their presence and information, modern rootkits typically
run at ring 0. This places the attacker at the same level
as the OS kernel, so that the rootkit can undermine the
security of the operating system and, potentially, remain
undetectable for a long time. Several defensive mecha-
nisms have been proposed to address this issue, but, un-
fortunately, ring 0 rootkits are still a severe threat. Of-
fensive researchers have also investigated further possible
ways to subvert the operating system security model mov-
ing deeper in the execution stack: prototypes exist for
virtualization rootkits (ring -1) [32, 27, 19], SMM rootkits
(ring -2) [20] and Intel ME rootkits (ring -3) [46]. The idea
is to place the rootkit always a level lower than the defen-
sive monitor in order to stay hidden on the compromised
system.
Fortunately, all rootkits share a common weakness: they
need to load their code into the running system. Modern
countermeasures, such as secure boot and code signing,
signiﬁcantly hinder this process and make traditional at-
tacking techniques no more eﬀective against recent sys-
tems. To bypass these protection mechanisms, malware
authors can use the same code reuse techniques adopted
by exploit writers. A completely ROP rootkit was ﬁrst
theorized by Hund et al [23] in 2009. The authors pro-
posed a proof of concept with several limitations. First
of all, the malware had to repeatedly exploit a kernel vul-
nerability to execute arbitrary ROP payloads (e.g., to hide
system processes). Second, this initial rootkit was not per-
sistent – making it of little use in practice. In 2014, Vogl
et al. [58] succeeded in making a ROP rootkit persistent
and presented an open-source POC of their creation. In
particular, the authors have shown how it is possible to
perform hooking without injecting a single line of code in
the kernel.
In this case, the malware has to exploit the
vulnerability only once to escalate privileges and trigger
the persistent ROP payload.
Chuck – Chuck is the name of the persistent ROP rootkit
proposed by Vogl et al [58], the only public example of this
kind to date.
It includes four separate ROP chains: one persistent in
memory and the other three dynamically generated at run-
time. The ﬁrst chain is the initialization chain and it is
executed only once, the ﬁrst time the kernel vulnerability
is exploited (in this particular case CVE-2013-2094 [28]).
This chain sets the hooks in the system, sets up the switch-