char greeting[50] = "Hello, ""how are you ""today!";
char greeting[50] = "Hello, how are you today!";
这种新写法⽀持多⾏字符串的合并。
char greeting[50] = "Hello, "
"how are you "
"today!";
使⽤占位符 输出字符串。
printf() %s
printf("%s\n", "hello world")
字符串变量的声明 #
字符串变量可以声明成⼀个字符数组，也可以声明成⼀个指针，指向字符数组。
char s[14] = "Hello, world!";
char* s = "Hello, world!";
上⾯两种写法都声明了⼀个字符串变量 。如果采⽤第⼀种写法，由于字符数组的⻓度可以让编译器⾃动
s
计算，所以声明时可以省略字符数组的⻓度。
char s[] = "Hello, world!";
上⾯示例中，编译器会将数组 指定为 14，正好容纳后⾯的字符串。
s
字符数组的⻓度，可以⼤于字符串的实际⻓度。
char s[50] = "hello";
上⾯示例中，字符数组 的⻓度是 ，但是字符串 “hello” 的实际⻓度只有 6（包含结尾符号 ），
s 50 \0
所以后⾯空出来的 44 个位置，都会被初始化为 。
\0
字符数组的⻓度，不能⼩于字符串的实际⻓度。
char s[5] = "hello";
上⾯示例中，字符串数组 的⻓度是 ，⼩于字符串 “hello” 的实际⻓度 6，这时编译器会报错。因为如
s 5
果只将前 5 个字符写⼊，⽽省略最后的结尾符号 ，这很可能导致后⾯的字符串相关代码出错。
\0
字符指针和字符数组，这两种声明字符串变量的写法基本是等价的，但是有两个差异。
第⼀个差异是，指针指向的字符串，在 C 语⾔内部被当作常量，不能修改字符串本身。
char* s = "Hello, world!";
s[0] = 'z';
上⾯代码使⽤指针，声明了⼀个字符串变量，然后修改了字符串的第⼀个字符。这种写法是错的，会导致
难以预测的后果，执⾏时很可能会报错。
如果使⽤数组声明字符串变量，就没有这个问题，可以修改数组的任意成员。
char s[] = "Hello, world!";
s[0] = 'z';
为什么字符串声明为指针时不能修改，声明为数组时就可以修改？原因是声明为指针时，字符串是⼀个保
存在内存 “栈区”（stack）的常量，“栈区” 的值由系统管理，⼀般都不允许修改；声明为数组时，字符串
的副本会被拷⻉到内存 “堆区”（heap），“堆区” 的值由⽤户管理，是可以修改的。
为了提醒⽤户，字符串声明为指针后不得修改，可以在声明时使⽤ 说明符，保证该字符串是只读
const
的。
const char* s = "Hello, world!";
上⾯字符串声明为指针时，使⽤了 说明符，就保证了该字符串⽆法修改。⼀旦修改，编译器肯定会
const
报错。
第⼆个差异是，指针变量可以指向其它字符串。
char* s = "hello";
s = "world";
上⾯示例中，字符指针可以指向另⼀个字符串。
但是，字符数组变量不能指向另⼀个字符串。
char s[] = "hello";
s = "world";
上⾯示例中，字符数组的数组名，总是指向初始化时的字符串地址，不能修改。
同样的原因，声明字符数组后，不能直接⽤字符串赋值。
char s[10];
s = "abc";
上⾯示例中，不能直接把字符串赋值给字符数组变量，会报错。原因是字符数组的变量名，跟所指向的数
组是绑定的，不能指向另⼀个地址。
解决⽅法就是使⽤ C 语⾔原⽣提供的 函数，通过字符串拷⻉完成赋值。
strcpy()
char s[10];
strcpy(s, "abc");
上⾯示例中， 函数把字符串 拷⻉给变量 ，这个函数的详细⽤法会在后⾯介绍。
strcpy() abc s
strlen() #
函数返回字符串的字节⻓度，不包括末尾的空字符 。该函数的原型如下。
strlen() \0
size_t strlen(const char* s);
它的参数是字符串变量，返回的是 类型的⽆符号整数，除⾮是极⻓的字符串，⼀般情况下当作
size_t
类型处理即可。下⾯是⼀个⽤法实例。
int
char* str = "hello";
int len = strlen(str);
的原型在标准库的 ⽂件中定义，使⽤时需要加载头⽂件 。
strlen() string.h string.h
#include 
#include 
int main(void) {
char* s = "Hello, world!";
printf("The string is %zd characters long.\n", strlen(s));
}
注意，字符串⻓度（ ）与字符串变量⻓度（ ），是两个不同的概念。
strlen() sizeof()
char s[50] = "hello";
printf("%d\n", strlen(s));
printf("%d\n", sizeof(s));
上⾯示例中，字符串⻓度是 5，字符串变量⻓度是 50。
如果不使⽤这个函数，可以通过判断字符串末尾的 ，⾃⼰计算字符串⻓度。
\0
int my_strlen(char *s) {
int count = 0;
while (s[count] != '\0')
count++;
return count;
}
strcpy() #
字符串的复制，不能使⽤赋值运算符，直接将⼀个字符串赋值给字符数组变量。
char str1[10];
char str2[10];
str1 = "abc";
str2 = str1;
上⾯两种字符串的复制写法，都是错的。因为数组的变量名是⼀个固定的地址，不能修改，使其指向另⼀
个地址。
如果是字符指针，赋值运算符（ ）只是将⼀个指针的地址复制给另⼀个指针，⽽不是复制字符串。
=
char* s1;
char* s2;
s1 = "abc";
s2 = s1;
上⾯代码可以运⾏，结果是两个指针变量 和 指向同⼀字符串，⽽不是将字符串 的内容复制给
s1 s2 s2
。
s1
C 语⾔提供了 函数，⽤于将⼀个字符串的内容复制到另⼀个字符串，相当于字符串赋值。该函数
strcpy()
的原型定义在 头⽂件⾥⾯。
string.h
strcpy(char dest[], const char source[])
接受两个参数，第⼀个参数是⽬的字符串数组，第⼆个参数是源字符串数组。复制字符串之前，
strcpy()
必须要保证第⼀个参数的⻓度不⼩于第⼆个参数，否则虽然不会报错，但会溢出第⼀个字符串变量的边
界，发⽣难以预料的结果。第⼆个参数的 说明符，表示这个函数不会修改第⼆个字符串。
const
#include 
#include 
int main(void) {
char s[] = "Hello, world!";
char t[100];
strcpy(t, s);
t[0] = 'z';
printf("%s\n", s);
printf("%s\n", t);
}
上⾯示例将变量 的值，拷⻉⼀份放到变量 ，变成两个不同的字符串，修改⼀个不会影响到另⼀个。
s t
另外，变量 的⻓度⼤于 ，复制后多余的位置（结束标志 后⾯的位置）都为随机值。
t s \0
也可以⽤于字符数组的赋值。
strcpy()
char str[10];
strcpy(str, "abcd");
上⾯示例将字符数组变量，赋值为字符串 “abcd”。
的返回值是⼀个字符串指针（即 ），指向第⼀个参数。
strcpy() char*
char* s1 = "beast";
char s2[40] = "Be the best that you can be.";
char* ps;
ps = strcpy(s2 + 7, s1);
puts(s2);
puts(ps);
上⾯示例中，从 的第 7 个位置开始拷⻉字符串 ，前⾯的位置不变。这导致 后⾯的内容都被
s2 beast s2
截去了，因为会连 结尾的空字符⼀起拷⻉。 返回的是⼀个指针，指向拷⻉开始的位置。
beast strcpy()
返回值的另⼀个⽤途，是连续为多个字符数组赋值。
strcpy()
strcpy(str1, strcpy(str2, "abcd"));
上⾯示例调⽤两次 ，完成两个字符串变量的赋值。
strcpy()
另外， 的第⼀个参数最好是⼀个已经声明的数组，⽽不是声明后没有进⾏初始化的字符指针。
strcpy()
char* str;
strcpy(str, "hello world");
上⾯的代码是有问题的。 将字符串分配给指针变量 ，但是 并没有进⾏初始化，指向的
strcpy() str str
是⼀个随机的位置，因此字符串可能被复制到任意地⽅。
如果不⽤ ，⾃⼰实现字符串的拷⻉，可以⽤下⾯的代码。
strcpy()
char* strcpy(char* dest, const char* source) {
char* ptr = dest;
while (*dest++ = *source++);
return ptr;
}
int main(void) {
char str[25];
strcpy(str, "hello world");
printf("%s\n", str);
return 0;
}
上⾯代码中，关键的⼀⾏是 ，这是⼀个循环，依次将 的每个字符赋值
while (*dest++ = *source++) source
给 ，然后移向下⼀个位置，直到遇到 ，循环判断条件不再为真，从⽽跳出循环。其中，
dest \0
这个表达式等同于 ，即先返回 这个地址，再进⾏⾃增运算移向下⼀个位置，⽽
*dest++ *(dest++) dest
可以对当前位置赋值。
*dest
函数有安全⻛险，因为它并不检查⽬标字符串的⻓度，是否⾜够容纳源字符串的副本，可能导致
strcpy()
写⼊溢出。如果不能保证不会发⽣溢出，建议使⽤ 函数代替。
strncpy()
strncpy() #
跟 的⽤法完全⼀样，只是多了第 3 个参数，⽤来指定复制的最⼤字符数，防⽌溢出⽬
strncpy() strcpy()
标字符串变量的边界。
char *strncpy(
char *dest,
char *src,
size_t n
);
上⾯原型中，第三个参数 定义了复制的最⼤字符数。如果达到最⼤字符数以后，源字符串仍然没有复制
n
完，就会停⽌复制，这时⽬的字符串结尾将没有终⽌符 ，这⼀点务必注意。如果源字符串的字符数⼩
\0
于 ，则 的⾏为与 完全⼀致。
n strncpy() strcpy()
strncpy(str1, str2, sizeof(str1) - 1);
str1[sizeof(str1) - 1] = '\0';
上⾯示例中，字符串 复制给 ，但是复制⻓度最多为 的⻓度减去 1， 剩下的最后⼀
str2 str1 str1 str1
位⽤于写⼊字符串的结尾标志 。这是因为 不会⾃⼰添加 ，如果复制的字符串⽚段不包含
\0 strncpy() \0
结尾标志，就需要⼿动添加。
也可以⽤来拷⻉部分字符串。
strncpy()
char s1[40];
char s2[12] = "hello world";
strncpy(s1, s2, 5);
s1[5] = '\0';
printf("%s\n", s1);
上⾯示例中，指定只拷⻉前 5 个字符。
strcat() #
函数⽤于连接字符串。它接受两个字符串作为参数，把第⼆个字符串的副本添加到第⼀个字符串
strcat()
的末尾。这个函数会改变第⼀个字符串，但是第⼆个字符串不变。
该函数的原型定义在 头⽂件⾥⾯。
string.h
char* strcat(char* s1, const char* s2);
的返回值是⼀个字符串指针，指向第⼀个参数。
strcat()
char s1[12] = "hello";
char s2[6] = "world";
strcat(s1, s2);
puts(s1);
上⾯示例中，调⽤ 以后，可以看到字符串 的值变了。
strcat() s1
注意， 的第⼀个参数的⻓度，必须⾜以容纳添加第⼆个参数字符串。否则，拼接后的字符串会溢
strcat()
出第⼀个字符串的边界，写⼊相邻的内存单元，这是很危险的，建议使⽤下⾯的 代替。
strncat()
strncat() #
⽤于连接两个字符串，⽤法与 完全⼀致，只是增加了第三个参数，指定最⼤添加的
strncat() strncat()
字符数。在添加过程中，⼀旦达到指定的字符数，或者在源字符串中遇到空字符 ，就不再添加了。它
\0
的原型定义在 头⽂件⾥⾯。
string.h
int strncat(
const char* dest,
const char* src,