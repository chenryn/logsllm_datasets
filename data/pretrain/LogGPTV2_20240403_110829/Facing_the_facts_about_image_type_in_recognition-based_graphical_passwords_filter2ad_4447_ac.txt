presented with one panel of images and they must identify
their portfolio images from among decoys. Images in their
user study contained everyday objects, places, or people. Story
introduced a sequential component: users must select images
in the correct order. To aid memorability, users were instructed
to mentally construct a story to connect the images in their
set. In the test system, a panel had 9 images and a password
involved selecting a sequence of 4 images from this panel.
Story was user-tested along with Faces in a ﬁeld study.
Davis et al. [51] found that user choices in Story were
more varied but still displayed exploitable patterns, such as
differences between male and female choices. Users had more
difﬁculty remembering Story passwords (≈ 85% success rate)
and most frequently made ordering errors. Surveys with par-
ticipants revealed that they were unlikely to have formulated
a story as a memory aid, despite the designers’ intentions;
this may explain the high number of ordering errors. Different
instructions or more user experience might possibly result in
greater usage of a story strategy.
In D´ej`a Vu [56] (see Figure 5), users select and memorize
a subset of “random art” images from a larger sample to
create their portfolio. To log in, users must recognize images
belonging to their pre-deﬁned portfolio from a set of decoy
images; in the test system, a panel of 25 images is displayed, 5
of which belong to the user’s portfolio. Users must identify all
images from their portfolio and only one panel is displayed.
Images of random art are used to make it more difﬁcult for
images in the panel, and M portfolio images shown. For
M
5
users to write down their password or share it with others by
describing the images from their portfolio. The authors suggest
that a ﬁxed set of 10000 images sufﬁces, but that “attractive”
images should be hand-selected to increase the likelihood that
images have similar probabilities of being selected by users.
The theoretical password space has(cid:0)N
example, (cid:0)25
(cid:1) passwords, for N
(cid:1) = 53130 ≈ 216. D´ej`a Vu was asserted [56]
to be resistant to dictionary attacks because few images in
the user study were selected by more than one user. This
claim remains to be rigourously tested. D´ej`a Vu is somewhat
more resistant to shoulder-surﬁng than previously described
schemes, as only a portion of the user’s portfolio is revealed
during each login. Several logins would need to be observed to
identify all images in a user’s portfolio. Participants in the user
study found it difﬁcult to describe their portfolio images and
users who had the same image gave different descriptions from
each other. This may stop social engineering attacks trying
to gather enough information to log in by tricking the user
to verbalize a password. Similarly, it would seem difﬁcult
to identify images belonging to a particular user based on
knowing other information about that user; however problems
resulting from predictable user choice remain possible, such
as users selecting images that include their favourite colour.
Weinshall [57] proposed a graphical password scheme (see
Figure 6) intended to be safe against spyware and shoulder
surﬁng. Keyboard input
is used rather than a mouse and
users must recognize images belonging to their previously
TR-09-09: GRAPHICAL PASSWORDS
7
must select images from their portfolio among decoys. Differ-
ent conﬁgurations allow for multiple rounds or sequencing of
images. In the Photographic Authentication system of Pering
et al. [60], users initially provide their own set of digital photos
and must identify these from among decoys, with panels of
4 images, and 10 rounds. The decoy images are randomly
selected from the pool of images collected from other users.
Use Your Illusion, by Hayashi et al. [61], also requires that
users select portfolio images from among panels of decoys; the
selected images are distorted after original selection, the idea
being that the legitimate user can still recognize the images
despite the distortion, while the distortions create difﬁculties
for others. The distortion is intended to protect against social
engineering and shoulder-surﬁng attacks. In the Convex Hull
Click Scheme of Wiedenbeck et al. [62], users once again
memorize a portfolio of images, and must recognize these
images from among decoys displayed, over several rounds.
The images are small icons and several dozen are randomly
positioned on the screen. Each panel contains at least 3 of
the user’s icons. Users must identify their icons, visualize the
triangle they form, and click anywhere within this triangle.
This design is intended to protect against shoulder-surﬁng, but
comes at a cost of longer login times.
Renaud [63] completed a ﬁeld study comparing different
types of user involvement in selecting the portfolio images for
recognition-based schemes. Users could select images from a
photo archive, could take their own photos, or could draw doo-
dles that were subsequently scanned and converted to JPEG
format. Results show a signiﬁcant increase in login success
rates when user portfolios contain self-drawn doodles rather
than either type of photos. The memorability improvements,
however, need to be balanced with the additional risk of
personalized attacks if attackers know a user’s drawing style or
recognize personally-identiﬁable features within the doodles.
An important feature in these schemes is the challenge-
response approach where users are presented with a panel of
images and must respond based on knowledge of a shared
secret. In the simplest case, users select their portfolio im-
ages directly, while other schemes require additional mental
processing from users to identify the correct response. A
key issue with these early recognition-based schemes is the
compromise between the size of the theoretical password space
and usability in terms of memorability and time to log in. As
proposed, most schemes offer a password space comparable to
a 4-digit PIN which, while useful in some environments, does
not offer a substitute (with respect to security) for common
text passwords. Everitt et al.’s [55] study of interference in
Passfaces is a positive step in understanding multiple password
interference in recognition-based schemes. Further work is
needed to better understand whether exposure to multiple sets
of portfolio and decoy images increases chances of memory
interference over time, especially as the decoys also become
familiar.
Fig. 6. Sample panel of Weinshall’s cognitive authentication scheme [57]
memorized portfolio. The login task involves computing a
path through a panel of images starting from the top-left
corner, based on whether particular images belong to the
user’s portfolio: move down if you stand on a picture from
your portfolio, move right otherwise. On reaching the right or
bottom edge of the panel, identify the corresponding label for
that row or column. A multiple-choice question is presented,
which includes the label for the path’s correct end-point. Users
perform several such rounds, each on a different panel. After
each round, the system computes the cumulative probability
that the correct answer was not entered by chance. When the
probability passes a certain threshold, login succeeds. This
tolerates some user error. If the threshold is not passed within
a certain number of rounds, the login fails.
Users receive a system-assigned portfolio of a large number
(about 100) of randomly chosen images, and extensive initial
training to memorize it. No times are reported for this training
phase. Average login time is 1.5 to 3 minutes. In a user study
with 9 participants, a 95% login success rate is reported, with
users logging on over a period of 10 weeks.
(cid:1), based
(cid:1) = 273 passwords.
M
30
The main claim [57] of resisting shoulder-surﬁng was
proven false [58] (see Section VIII). Nonetheless, Weinshall’s
scheme offers interesting lessons. The number of different
passwords possible from a user’s viewpoint is (cid:0)N
displayed, e.g., N=80, M=30, yields (cid:0)80
on unique collections of images. Here N is the number of
images in a panel, and M is the number of portfolio images
However, the redundancy which encodes the user’s portfolio
images into row and column labels apparently results in a
many-to-one mapping of image sets onto system passwords,
reducing the effective size of the password space. For example,
for exactly 5 rounds and 4 different multiple choice answers,
there are 45 = 210 distinct system passwords. Dictionary
and personalized attacks have no advantage over exhaustive
attacks, due to the random assignment of images. It appears
impossible to verbalize enough information to convey a pass-
word to an attacker to allow successful login, making such
social engineering attacks also improbable.
Other recognition-based systems have been proposed, with
similar usability and security proﬁles as those above. We there-
fore mention them here only brieﬂy. In the VIP system of De
Angeli et al. [25], [59], a panel of images is displayed. Users
VI. CUED-RECALL SYSTEMS
Cued-recall systems typically require that users remember
and target speciﬁc locations within a presented image. This
TR-09-09: GRAPHICAL PASSWORDS
8
feature, intended to reduce the memory load on users, is an
easier memory task than pure recall. Such systems may also
be called locimetric [25] due to their reliance on identifying
speciﬁc locations. This is a different memory task than simply
recognizing an image as a whole. Hollingworth and Hender-
son [64] show that people retain accurate, detailed, visual
memories of objects to which they previously attended in
visual scenes; this suggests that users may be able to accurately
remember speciﬁc parts of an image as their password if they
initially focused on them. In an ideal design, the cue in an
authentication system is helpful only to legitimate users (not
to attackers trying to guess a password).
Cued-recall graphical password systems date back to Blon-
der’s 1996 patent [65]. The PassPoints successor of that
scheme launched research in the cued-recall subclass that we
call click-based graphical passwords.
These schemes discussed below share a vulnerability to
shoulder-surﬁng and malware, and are vulnerable to MITM
phishing attacks similar to recognition-based schemes. To
capture a click-based graphical password using malware, a
mouse-logger may sufﬁce if the attacker can also determine
the position of the image on the screen. Alternatively, a screen
scraper would be necessary to identify the image location. The
screen scraper may be sufﬁcient if the attacker can identify
when the user clicked the mouse button (some users very
familiar with their password may not necessarily stop moving
the cursor while clicking). Shoulder-surﬁng may also reveal a
user’s password in a single login, as the entire password may
be observable on the screen as the user enters it.
A. Canonical Example: PassPoints
The literature on cued-recall graphical password systems is
dominated by PassPoints [66]–[68] and its variations. During
creation of a PassPoints password (see Figure 7), users are
presented with an image. A password is a sequence of any
n = 5 user-selected click-points (pixels) on this image. The
user selects points by clicking on them using a mouse. During
login, re-entry of the click-points must be in the correct order,
and accurate within a system-speciﬁed tolerance. The image
acts as a memory prompt of the location of the originally
chosen click-points. Note that this is not an optimal cued-recall
scenario: users are presented with only one cue, but must recall
5 pieces of information, in the correct order. The standard
parameterization provides a theoretical password space of 243
conceivable passwords; this increases with larger n and smaller
tolerance, though usability impacts are expected.
An important implementation detail is the type of discretiza-
tion used — this is related to how the system determines
if entered click-points are acceptably close to the original
points, and affects whether the system-side passwords stored
for veriﬁcation can be hashed. Robust discretization [69],
centered discretization [70], and optimal discretization [71]
are possible alternatives. Kirovski et al. [72] suggest how
discretization could be implemented using Voronoi polygon
tiling by analyzing image features and centering likely click-
points within the polygons.
Wiedenbeck et al. [66]–[68] conducted three lab-based user
studies of PassPoints. Users took 64 seconds to initially create
Fig. 7.
ordinarily visible to users) illustrate the tolerance area around click-points.
PassPoints password example [67]. The 5 numbered boxes (not
a password, and required an additional 171 seconds of training
time on average to memorize their password. Login took
between 9 and 19 seconds on average. Login success rates
varied from 55-90%, with users returning at different intervals
to log in again. User performance was found to be similar
on the four images tested, and it was recommended that
tolerance areas around click-points be at least 14×14 pixels for
acceptable usability. Chiasson et al. [73] conducted a lab study
and a large ﬁeld study, ﬁnding that image choice does impact
usability, that tolerance areas could be further reduced, and that
memory interference from remembering multiple PassPoints
passwords may be problematic. Later security analyses found
it to be vulnerable to hotspots and simple patterns within
images [39], [74]–[78], as elaborated in Section VIII. Bicakci
et al. [79] conducted a lab study where a PassPoints password
was used as the master password for a web-based password
manager and concluded that
it was more usable than an
alphanumeric master password. Their implementation used a
visible grid dividing the image into discrete sections rather
than any of the aforementioned discretization methods.
A commercial version of PassPoints for the PocketPC is
available from visKey [80] for screen-unlock by tapping on
the correct sequence of click-points using a stylus or ﬁnger.
Users may deﬁne settings such as n, the size of the tolerance
regions, and which image is displayed.
B. Other cued-recall variants
PassPoints has received attention from others, who have
proposed modiﬁcations. To address shoulder-surﬁng, Suo [81]
proposes a shoulder-surﬁng resistant version as follows. Dur-
ing login, the image is blurred except for a small focus area.
Rather than using a mouse to select click-points, users enter
Y (for yes) or N (for no) on the keyboard, or use the right
and left mouse buttons, to indicate if their click-point is within
the focused area. The process repeats for at most 10 rounds,
until all 5 click-points are identiﬁed. We note as the user’s
click-points are guaranteed to be within the 10 focus areas,
observing one login narrows the search space considerably,
and observing a few logins would allow password recovery.
Cued Click-Points (CCP) [82] is a click-based scheme
where users select one click-point on each of 5 images
TR-09-09: GRAPHICAL PASSWORDS
9
primarily by participants who shufﬂed repeatedly, though most
shufﬂed relatively infrequently), and 8 seconds to log in.
Proposed implementations of PassPoints, CCP, and PCCP
use a grid-based discretization algorithm, as mentioned earlier,
for determining whether login click-points are within toler-
ance. In system-side storage for veriﬁcation, these passwords
can be hashed; additional information, however, is stored in a
manner accessible to the system, such as a grid identiﬁer (for
each click-point) to allow the system to use the appropriate
grid to verify login attempts. It is unclear if attackers gaining
access to the server-side storage can use information about the
grid identiﬁers to their advantage.
Inkblot Authentication [84] (see Figure 9) is not strictly a
graphical password system, but uses images as a cue for text
password entry. During password creation, users are shown
a series of computer-generated “inkblots” and asked to type