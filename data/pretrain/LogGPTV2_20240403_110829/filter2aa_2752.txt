0x01 起因
前两天和朋友聊天，他发现了⼀家在hackerone上赏⾦颇⾼的Program，并且发现了其中的漏洞
让⽼夫羡慕不已
去hackerone看了看⼚商信息，漏洞奖励确实是⾮常诱⼈的
⽽且BugBounty Program Launched on Apr 2015....
8年hackerone的⽼⼚商了，业务点本来就不多，⼜被世界各国⽜逼的⿊客们挖了⼋年，难度可想⽽知
但是为了赏⾦迎难⽽上，才应该是真正的漏洞猎⼈该有的⻛格。
0x03 ⾛业务点万念俱灰到发现敏感请求
从Hackerone的Program scope中搜集了⼀下业务信息，虽然展开测试
测试了常规的⼀些WEB漏洞，IDOR等漏洞，发现完全没有⼀点机会，Filter和鉴权写的⾮常过硬，⽽且⽤户都是通
过uuid类型来传参进⾏身份鉴权
⾸先⽬标没有IDOR，其次哪怕有IDOR也⾮常难以利⽤
从晚上九点测到了第⼆天凌晨两点，啥也没测出来，万念俱灰准备洗洗睡了
但是⼼想还是看看Burp的HttpHistory吧，万⼀有⾃⼰没注意的敏感请求呢
结果没想到。。。还真就看到了⼀个graphql的敏感查询请求
url在json中传参，测啥漏洞，我想⼤家应该都懂
⽴⻢⽤Burp的Collaborator测试dnslog
POST /agw/graphql?op=UrlReachableVerifierQuery&client_trace_id=09bee58d-8358-4f00-acc0-
8d26d0018d32,rst:1678201703792 HTTP/1.1
Host: xxxxx
Cookie: xxxx
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 
Firefox/110.0
Accept: */*
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Content-Type: application/json
Authorization: xxxxx
Content-Length: 386
Origin: https://xxxxx
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-site
Te: trailers
Connection: close
{"operationName":"UrlReachableVerifierQuery","variables":{
"url":"http://xxxx.com/"},"query":"query UrlReachableVerifierQuery($url: String!) {\n  
verifyUrlReachable(url: $url) {\n    ... on UrlReachableResult {\n      url\n       
__typename\n    }\n    ... on GenericError {\n      errorCode\n      message\n      
__typename\n    }\n    __typename\n  }\n}\n"}
果不其然，收到了来⾃两个IP的Http Request，但是⽬标的回显少的可怜
只有url，__typename两个键的JSON返回了回来
查了⼀下，两台发送请求的服务器都部署在GoogleCloud，瞬间就让⼈兴奋了起来
但是想了⼀下⼜萎了，GoogleCloud meta data(元数据)的获取不像国内的某某云，其必须带有特定的Header
这个SSRF点既没有回显也没法通过构造恶意⻚⾯的js发送带有header的数据，真是操蛋
request example:
curl "http://metadata.google.internal/computeMetadata/v1/instance/image" -H "Metadata-
Flavor: Google"
思前想后，寻思也算个盲SSRF，先交了再说
0x04 秒忽略NoBugBounty到利⽤Graphql发掘新的攻击⾯
交完这个盲SSRF点，睡了⼀觉起来，发现直接被⼚商的安全团队给忽略了
真是操蛋，盲SSRF看样不太⾏，混不到钱，我们必须得发掘新的攻击⾯
（不了解Graphql的兄弟可以看下下⾯这张图，⽣动地解释了Restful类型接⼝和Graphql接⼝的区别，上⽅为
restful接⼝请求样式，下⽅为graphql的接⼝请求样式）
既然这个点是基于Graphql进⾏查询的
那么我们可以⾃定义查询的column(param)，如果存在该column，那么就会返回这个参数的有效结果，⼆话不说
开始FUZZ
最终结果让⼈⾮常寒⼼，啥勾⼋东⻄也没有(这⾥当时的图忘存了)
再次陷⼊万念俱灰，但是仔细观察graphql查询请求的op参数，让我有了⼀点想法
op字段为UrlReachableVerifierQuery，我们为啥不试试拿他当query的column呢？
结果发现测试到UrlReachable这个字段时，reponse中出现了有效回显"Reachable"
nice，现在我们可以⽤这个接⼝来探测内⽹端⼝开放情况了
我直接使⽤GoogleCloud的meta data地址来探测端⼝连通性
没想到直接告诉我了个"Not_Reachable"。。
那么就得⽤点⽅法绕过了
0x05 绕过SSRF限制探测内⽹
试了试302跳转，短连接等⽅式，都不好使
于是寄出dns rebinding
在ceye上配置好dns rebinding的IP地址（googleCloud meta data的ip地址为169.254.169.254，借此来验证内
⽹连通性）
直接dns rebinding来绕过SSRF限制
发现我们成功获得了“Reachable”的结果！
接下来就是常规操作了，探测端⼝连通性
80端⼝reachable，其他端⼝Not_Reachable，已经证明了此处SSRF可探测内⽹
0x06 再次提交漏洞到triage
再次提交后漏洞得到了Triage