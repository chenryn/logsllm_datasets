### 0x01 起因
前两天与朋友聊天时，他提到在HackerOne平台上发现了一个提供高额奖金的漏洞赏金计划，并成功找到了其中的一个漏洞。这让我十分羡慕。查看了该厂商在HackerOne上的信息后，我了解到其提供的奖金确实非常诱人。此外，该厂商自2015年4月便已加入HackerOne平台，至今已有8年之久。考虑到其业务范围并不广泛，且在此期间已被全球众多顶尖黑客反复挖掘过，找到新的漏洞难度可想而知。然而，为了丰厚的奖金，勇于面对挑战才是真正的漏洞猎人应有的精神。

### 0x03 从绝望中寻找希望：发现敏感请求
根据HackerOne上列出的项目范围，我对目标进行了初步的信息收集，并随即展开了一系列常规WEB漏洞测试（包括IDOR等）。遗憾的是，由于对方的安全措施相当严密，所有尝试均未取得任何进展。特别是用户身份验证采用了UUID形式进行，使得即便存在IDOR漏洞也难以利用。
  
从晚上9点一直持续到次日凌晨两点，尽管投入了大量的时间和精力，却一无所获，心情沮丧至极。正当准备放弃之际，突然想到或许可以在Burp Suite的历史记录中再仔细检查一遍，万一遗漏了某些关键信息呢？结果出乎意料地发现了某个GraphQL查询请求看起来颇为可疑。

这个请求通过URL参数传递，并且似乎可以用来测试DNS日志泄露漏洞。于是立即使用Burp Collaborator对该请求进行了进一步测试。经过一番努力，虽然最终只收到了两个来自不同IP地址但内容极为有限的响应（仅包含`url`和`__typename`字段），但这足以激发起我的兴趣——因为这两个IP地址都隶属于Google Cloud服务。

尽管如此，由于Google Cloud对于元数据访问有着严格限制（必须携带特定头部信息才能访问），而当前环境无法满足这一要求，因此暂时无法直接利用此SSRF漏洞获取更多有价值的信息。不过考虑到这仍然属于盲SSRF范畴，我还是决定先将其提交给厂商审核。

### 0x04 从被忽略到深入探索GraphQL接口
提交之后不久，就收到了厂商安全团队的反馈——他们认为这只是个无害的盲SSRF问题而不予采纳。面对这种情况，我意识到需要更加深入地挖掘其他潜在攻击面才行。

鉴于之前发现的问题是基于GraphQL实现的，那么是否可以通过自定义查询参数来尝试获取更多信息呢？带着这样的想法开始了新一轮的Fuzzing测试。不幸的是，这次尝试同样没有带来实质性突破。然而，在仔细分析GraphQL请求中的`op`参数后，灵光一闪——为什么不试着将它作为查询条件之一呢？

经过几次调整后，终于得到了一个有意义的响应：“Reachable”。这意味着现在我们已经能够利用这个接口来探测内部网络端口状态了！接下来便是尝试连接Google Cloud Metadata服务地址以验证连通性。不出所料，初次尝试并未成功，显示为"Not_Reachable"。显然还需要采取更巧妙的方法绕过现有限制。

### 0x05 绕过SSRF限制探测内网
起初尝试了几种常见的绕过技术如302重定向、短链接等均告失败。最后决定采用DNS Rebinding技术来解决问题。通过在CEYE平台上设置好相应的DNS Rebinding IP地址（即Google Cloud Metadata服务使用的169.254.169.254），最终成功绕过了SSRF防护机制并获得了“Reachable”的响应！

随后按照标准流程对内部网络进行了端口扫描，结果显示仅有80端口处于开放状态，其余均为不可达状态。至此，已经充分证明了此处确实存在可用于探测内网的SSRF漏洞。

### 0x06 再次提交漏洞至Triage
将上述研究成果整理成报告后重新提交给了厂商。这一次，经过评估小组的审核，该漏洞得到了正式确认。