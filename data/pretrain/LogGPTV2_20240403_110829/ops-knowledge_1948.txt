Subject: Managing Multiple Python Versions with Anaconda on Ubuntu 16

Dear Bruce,

I understand your concerns regarding the installation and management of multiple Python versions, particularly when using Anaconda. Here’s a more structured approach to address your questions:

### Anaconda Installation
When you install Anaconda, it typically creates a self-contained environment in your home directory. This is normal and ensures that Anaconda's Python and packages do not interfere with the system Python. For Ubuntu 16, you can download and install Anaconda3-4.2.0-Linux-x86_64.sh, which includes Python 3.5. You can find this version in the [Anaconda installer archive](https://repo.anaconda.com/archive/).

### Using System Python vs. Anaconda
If you have Anaconda installed, you don’t necessarily need to use the system Python 3.5 that comes with Ubuntu. Anaconda provides its own Python interpreter and package management, which can be more convenient for managing scientific computing environments.

### Virtual Environments
You mentioned using `virtualenv` and `virtualenvwrapper`. While these tools are useful, they can sometimes cause confusion if the default Python version is not set correctly. To avoid this, you can create virtual environments specifically with the Python version you want to use. For example, to create a virtual environment with Python 3.5 using Anaconda, you can use:

```bash
conda create --name myenv python=3.5
conda activate myenv
```

### Docker as an Alternative
Docker is indeed a powerful tool for creating isolated environments. If you are working on projects that require specific Python versions or dependencies, Docker can provide a consistent and reproducible environment. You can create Dockerfiles to specify the exact Python version and other dependencies.

### Managing Multiple Python Versions
To manage multiple Python versions, you can use tools like `pyenv` along with `virtualenv` or `conda`. `pyenv` allows you to switch between different Python versions globally or per-project. Here’s a basic setup:

1. **Install `pyenv`**:
   ```bash
   curl https://pyenv.run | bash
   ```

2. **Add `pyenv` to your `.bashrc`**:
   ```bash
   export PATH="$HOME/.pyenv/bin:$PATH"
   eval "$(pyenv init -)"
   eval "$(pyenv virtualenv-init -)"
   ```

3. **Install multiple Python versions**:
   ```bash
   pyenv install 3.5.0
   pyenv install 2.7.18
   ```

4. **Set the global Python version**:
   ```bash
   pyenv global 3.5.0
   ```

5. **Create and manage virtual environments**:
   ```bash
   pyenv virtualenv 3.5.0 myenv
   pyenv activate myenv
   ```

By using `pyenv`, you can easily switch between different Python versions and manage your virtual environments more effectively.

I hope this helps clarify your options and provides a clear path forward for managing multiple Python versions on your system.

Best regards,
[Your Name]