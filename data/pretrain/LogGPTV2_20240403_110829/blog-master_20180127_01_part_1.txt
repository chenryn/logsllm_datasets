## Greenplum roaring bitmap与业务场景 (类阿里云RDS PG varbitx, 应用于海量用户 实时画像和圈选、透视)
### 作者      
digoal      
### 日期      
2018-01-27      
### 标签      
PostgreSQL , Greenplum , varbitx , roaring bitmap , pilosa , varbit , hll , 多阶段聚合       
----      
## 背景      
roaring bitmap是一个压缩比很高同时性能不错的BIT库，被广泛使用（例如Greenplum, ES, InfluxDB......）：  
Roaring bitmaps are compressed bitmaps which tend to outperform conventional compressed bitmaps such as WAH, EWAH or Concise. They are used by several major systems such as Apache Lucene and derivative systems such as Solr and Elasticsearch, Metamarkets' Druid, LinkedIn Pinot, Netflix Atlas, Apache Spark, OpenSearchServer, Cloud Torrent, Whoosh, InfluxDB, Pilosa, Bleve, Microsoft Visual Studio Team Services (VSTS), and eBay's Apache Kylin.  
[《Roaring Bitmap - A better compressed bitset》](../201505/20150507_01.md)    
https://github.com/RoaringBitmap/CRoaring  
在PostgreSQL中内置了varbit的数据类型，阿里云在其基础上扩展了对varbit的操作符：  
[《阿里云RDS for PostgreSQL varbitx插件与实时画像应用场景介绍》](../201705/20170502_01.md)    
是的阿里云RDS PG支持以更低的成本、更高的性能支持海量画像的实时计算：  
[《阿里云RDS PostgreSQL varbitx实践 - 流式标签 (阅后即焚流式批量计算) - 万亿级，任意标签圈人，毫秒响应》](../201712/20171212_01.md)    
[《基于 阿里云 RDS PostgreSQL 打造实时用户画像推荐系统(varbitx)》](../201610/20161021_01.md)    
[《惊天性能！单RDS PostgreSQL实例 支撑 2000亿 - 实时标签透视案例》](../201712/20171223_01.md)    
对于Greenplum，同样有社区的朋友贡献的插件，让Greenplum可以支持roaringbitmap类型。  
开源代码如下（感谢贡献代码的小伙伴）：  
https://github.com/zeromax007/gpdb-roaringbitmap  
（目前这个版本没有将聚合做到计算节点，而是走了gather motion再聚合的方式，聚合性能不佳）。  
```  
postgres=# explain select rb_cardinality(rb_and_agg(bitmap)) from t1;  
                                       QUERY PLAN                                         
----------------------------------------------------------------------------------------  
 Aggregate  (cost=1.05..1.07 rows=1 width=4)  
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1.05 rows=1 width=1254608)  
         ->  Seq Scan on t1  (cost=0.00..1.01 rows=1 width=1254608)  
(3 rows)  
Time: 0.727 ms  
```  
建议有兴趣的同学可以改进一下 roaringbitmap for Greenplum 聚合代码，改成多阶段聚合，让聚合先在计算节点做。   
自定义分布式聚合的方法参考如下：  
[《PostgreSQL 10 自定义并行计算聚合函数的原理与实践》](../201801/20180119_04.md)    
[《Postgres-XC customized aggregate introduction》](../201305/20130502_01.md)    
[《PostgreSQL aggregate function customize》](../201212/20121218_02.md)    
[《Greenplum 最佳实践 - 估值插件hll的使用(以及hll分式聚合函数优化)》](../201608/20160825_02.md)    
接下来简单介绍一下roaringbitmap的安装与功能点。  
## 安装  
1、首先你需要安装好greenplum。  
2、然后你需要下载gpdb-roaringbitmap  
```  
git clone https://github.com/zeromax007/gpdb-roaringbitmap  
```  
3、编译gpdb-roaringbitmap  
```  
If $GPHOME is /usr/local/gpdb .  
gcc -march=native -O3 -std=c11 -Wall -Wpointer-arith  -Wendif-labels -Wformat-security \
-fno-strict-aliasing -fwrapv -fexcess-precision=standard -fno-aggressive-loop-optimizations \
-Wno-unused-but-set-variable -Wno-address -fpic -D_GNU_SOURCE \
-I/usr/local/gpdb/include/postgresql/server \
-I/usr/local/gpdb/include/postgresql/internal \
-c -o roaringbitmap.o roaringbitmap.c  
或如下，主要看你的头文件在哪里  
gcc -march=native -O3 -std=c11 -Wall -Wpointer-arith  -Wendif-labels -Wformat-security \
-fno-strict-aliasing -fwrapv -fexcess-precision=standard -fno-aggressive-loop-optimizations \
-Wno-unused-but-set-variable -Wno-address -fpic -D_GNU_SOURCE \
-I/usr/local/gpdb/include/server \
-I/usr/local/gpdb/include/internal \
-c -o roaringbitmap.o roaringbitmap.c  
gcc -O3 -std=gnu99 -Wall -Wpointer-arith  -Wendif-labels -Wformat-security \
-fno-strict-aliasing -fwrapv -fexcess-precision=standard -fno-aggressive-loop-optimizations \
-Wno-unused-but-set-variable -Wno-address  -fpic -shared --enable-new-dtags \
-o roaringbitmap.so roaringbitmap.o  
```  
4、将so文件拷贝到所有gpdb节点(所有master, slave, segment, mirror等)的软件目录对应的lib目录中.  
```  
cp ./roaringbitmap.so /usr/local/gpdb/lib/postgresql/  
```  
5、在MASTER节点，连接到需要使用roaringbitmap的DB中，执行如下SQL，安装对应的类型，操作符，函数等。  
```  
psql -f ./roaringbitmap.sql  
```  
## 使用DEMO  
1、建表，使用roaringbitmap数据类型  
```  
CREATE TABLE t1 (id integer, bitmap roaringbitmap);  
```  
2、使用rb_build生成roaringbitmap的数据(输入为数组，输出为roaringbitmap。含义：数组位置对应的bit值设置为1)。  
```  
INSERT INTO t1 SELECT 1,RB_BUILD(ARRAY[1,2,3,4,5,6,7,8,9,200]);  
-- 将输入的多条记录的值对应位置的BIT值设置为1，最后聚合为一个roaringbitmap  
INSERT INTO t1 SELECT 2,RB_BUILD_AGG(e) FROM GENERATE_SERIES(1,100) e;    
```  
3、两个roaringbitmap的BIT计算（OR, AND, XOR, ANDNOT）。andnot表示第一个参数与第二个参数的NOT进行AND操作，等同于```andnot(c1,c2)==and(c1, not(c2))```  
```  
SELECT RB_OR(a.bitmap,b.bitmap) FORM (SELECT bitmap FROM t1 WHERE id = 1) AS a, (SELECT bitmap FROM t1 WHERE id = 2) AS b;  
```  
4、一些聚合操作，并生成新的roaringbitmap (OR, AND, XOR, BUILD)  
```  
SELECT RB_OR_AGG(bitmap) FROM t1;  
SELECT RB_AND_AGG(bitmap) FORM t1;  
SELECT RB_XOR_AGG(bitmap) FROM t1;  
SELECT RB_BUILD_AGG(e) FROM GENERATE_SERIES(1,100) e;  
```  
5、Cardinality，即roaringbitmap中包含多少个位置为1的BIT位。  
```  
SELECT RB_CARDINALITY(bitmap) FROM t1;  
```  
6、从roaringbitmap返回位置为1的BIT的下标（位置值）。  
```  
SELECT RB_ITERATE(bitmap) FROM t1 WHERE id = 1;  
postgres=# select rb_iterate(rb_build('{1,4,100}'));  
 rb_iterate   
------------  
          1  
          4  
        100  
(3 rows)  
```  
7、一些bit设置操作  
```  
postgres=# select rb_iterate(rb_flip(rb_build('{1,2,3,100,4,5}'),7,10));  
 rb_iterate   
------------  
          1  
          2  
          3  
          4  
          5  
          7  
          8  
          9  
        100  
(9 rows)  
```  
## 内置计算函数说明  
```  
                                              List of functions  
   Schema   |          Name          | Result data type |            Argument data types             |  Type    
------------+------------------------+------------------+--------------------------------------------+--------  
 public     | rb_and                 | roaringbitmap    | roaringbitmap, roaringbitmap               | normal  
 public     | rb_and_cardinality     | integer          | roaringbitmap, roaringbitmap               | normal  
 public     | rb_andnot              | roaringbitmap    | roaringbitmap, roaringbitmap               | normal  
 public     | rb_andnot_cardinality  | integer          | roaringbitmap, roaringbitmap               | normal  
 public     | rb_build               | roaringbitmap    | integer[]                                  | normal  
 public     | rb_cardinality         | integer          | roaringbitmap                              | normal  
 public     | rb_equals              | boolean          | roaringbitmap, roaringbitmap               | normal  
 public     | rb_flip                | roaringbitmap    | roaringbitmap, integer, integer            | normal  
 public     | rb_intersect           | boolean          | roaringbitmap, roaringbitmap               | normal  
 public     | rb_is_empty            | boolean          | roaringbitmap                              | normal  
 public     | rb_iterate             | SETOF integer    | roaringbitmap                              | normal  
 public     | rb_maximum             | integer          | roaringbitmap                              | normal  
 public     | rb_minimum             | integer          | roaringbitmap                              | normal  
 public     | rb_or                  | roaringbitmap    | roaringbitmap, roaringbitmap               | normal  
 public     | rb_or_cardinality      | integer          | roaringbitmap, roaringbitmap               | normal  
 public     | rb_rank                | integer          | roaringbitmap, integer                     | normal  
 public     | rb_remove              | roaringbitmap    | roaringbitmap, integer                     | normal  
 public     | rb_xor                 | roaringbitmap    | roaringbitmap, roaringbitmap               | normal  
 public     | rb_xor_cardinality     | integer          | roaringbitmap, roaringbitmap               | normal  
```  
Function	|Input	|Output	|Desc	|Example
---|---|---|---|---
rb_build	|integer[]	|roaringbitmap	|Build a roaringbitmap tuple from integer array.	|rb_build('{1,2,3,4,5}')
rb_and	|roraingbitmap,roaringbitmap	|roaringbitmap	|Two roaringbitmap tuples and calculation.	|rb_and(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_or	|roraingbitmap,roaringbitmap	|roaringbitmap	|Two roaringbitmap tuples or calculation.	|rb_or(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_xor	|roraingbitmap,roaringbitmap	|roaringbitmap	|Two roaringbitmap tuples xor calculation.	|rb_xor(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_andnot	|roraingbitmap,roaringbitmap	|roaringbitmap	|Two roaringbitmap tuples andnot calculation.	|rb_andnot(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_cardinality	|roraingbitmap	|integer	|Retrun roaringbitmap tuple's cardinality.	|rb_cardinality(rb_build('{1,2,3,4,5}'))
rb_and_cardinality	|roraingbitmap,roaringbitmap	|integer	|Two roaringbitmap tuples and calculation, return cardinality.	|rb_and_cardinality(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_or_cardinality	|roraingbitmap,roaringbitmap	|integer	|Two roaringbitmap tuples or calculation, return cardinality.	|rb_or_cardinality(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_xor_cardinality	|roraingbitmap,roaringbitmap	|integer	|Two roaringbitmap tuples xor calculation, return cardinality.	|rb_xor_cardinality(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_andnot_cardinality	|roraingbitmap,roaringbitmap	|integer	|Two roaringbitmap tuples andnot calculation, return cardinality.	|rb_andnot_cardinality(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_is_empty	|roraingbitmap	|boolean	|Check if roaringbitmap tuple is empty.	|rb_is_empty(rb_build('{1,2,3,4,5}'))
rb_equals	|roraingbitmap,roaringbitmap	|boolean	|Check two roaringbitmap tuples are equal.	|rb_equals(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_intersect	|roraingbitmap,roaringbitmap	|boolean	|Check two roaringbitmap tuples are intersect.	|rb_intersect(rb_build('{1,2,3}'),rb_build('{3,4,5}'))
rb_remove	|roraingbitmap,integer	|roraingbitmap	|Remove the specified offset from roaringbitmap tuple.	|rb_remove(rb_build('{1,2,3}'),3)
rb_flip	|roraingbitmap,integer,integer	|roraingbitmap	|Flip the specified offsets range (not include the end) from roaringbitmap tuple.	|rb_flip(rb_build('{1,2,3}'),7,10) -- 翻转BIT位置为7到10（不含10）的BIT值
rb_minimum	|roraingbitmap	|integer	|Return the smallest offset in roaringbitmap tuple. Return UINT32_MAX if the bitmap tuple is empty.	|rb_minimum(rb_build('{1,2,3}')) -- 返回该roaringbitmap中bit值设置为1的最小位置
rb_maximum	|roraingbitmap	|integer	|Return the greatest offset in roaringbitmap tuple. Return 0 if the bitmap tuple is empty.	|rb_maximum(rb_build('{1,2,3}')) -- 返回该roaringbitmap中bit值设置为1的最大位置
rb_rank	|roraingbitmap,integer	|integer	|Return the number of offsets that are smaller or equal to the specified offset.	|rb_rank(rb_build('{1,2,3}'),3) -- BIT位置小于等于N的BIT中，有多少个bit位置被设置为1
rb_iterate	|roaringbitmap	|SETOF integer	|Bitmap to SETOF integer	|rb_iterate(rb_build('{1,2,3,100}'))
## 内置聚合函数说明  
```  
                                                    List of functions  
 Schema |          Name           |     Result data type      |               Argument data types                |  Type    
--------+-------------------------+---------------------------+--------------------------------------------------+--------  
 public | rb_and_agg              | roaringbitmap             | roaringbitmap                                    | agg  
 public | rb_and_cardinality_agg  | integer                   | roaringbitmap                                    | agg  
 public | rb_build_agg            | roaringbitmap             | integer                                          | agg  
 public | rb_or_agg               | roaringbitmap             | roaringbitmap                                    | agg  
 public | rb_or_cardinality_agg   | integer                   | roaringbitmap                                    | agg  
 public | rb_xor_agg              | roaringbitmap             | roaringbitmap                                    | agg  
 public | rb_xor_cardinality_agg  | integer                   | roaringbitmap                                    | agg  
```  
Function	|Input	|Output	|Desc	|Example
---|---|---|---|---
rb_build_agg	|integer	|roraingbitmap	|Build a roaringbitmap tuple from a integer set.	|rb_build_agg(1)
rb_or_agg	|roraingbitmap	|roraingbitmap	|Or Aggregate calculations from a roraingbitmap set.	|rb_or_agg(rb_build('{1,2,3}'))
rb_and_agg	|roraingbitmap	|roraingbitmap	|And Aggregate calculations from a roraingbitmap set.	|rb_and_agg(rb_build('{1,2,3}'))
rb_xor_agg	|roraingbitmap	|roraingbitmap	|Xor Aggregate calculations from a roraingbitmap set.	|rb_xor_agg(rb_build('{1,2,3}'))
rb_or_cardinality_agg	|roraingbitmap	|integer	|Or Aggregate calculations from a roraingbitmap set, return cardinality.	|rb_or_cardinality_agg(rb_build('{1,2,3}'))
rb_and_cardinality_agg	|roraingbitmap	|integer	|And Aggregate calculations from a roraingbitmap set, return cardinality.	|rb_and_cardinality_agg(rb_build('{1,2,3}'))
rb_xor_cardinality_agg	|roraingbitmap	|integer	|Xor Aggregate calculations from a roraingbitmap set, return cardinality.	|rb_xor_cardinality_agg(rb_build('{1,2,3}'))
## 例子  
[《惊天性能！单RDS PostgreSQL实例 支撑 2000亿 - 实时标签透视案例》](../201712/20171223_01.md)    
### 背景：  
有20亿个BIT，有几千万的标签。意味着有几千万行，每一行有20亿个BIT组成的roaringbitmap。  
求任意标签组合的cardinate. (rb_???_cardinality_agg)     
### 设计：  
数据按标签字段分布：  
```  
create table tbl (tagid int primary key, bitmap roaringbitmap)   
distributed by (tagid) ;  
```  
### SQL：  
1、求合并的BIT中有多少为1的BIT  
```  