    Test Web Server - Running on port 80
```
第二，映像中安装了许多网络工具。您会注意到我正在安装以下软件包:
*   `net-tools`:这提供了查看和配置接口的网络工具
*   `inetutils-ping`:这提供了 ping 功能
*   `curl`:这是从其他网络端点拉文件
*   `dnsutils`:这是解析 DNS 名称和其他 DNS 追踪
*   `ethtool`:这是从界面获取信息和统计
*   `tcpdump`:这是从容器内部进行数据包捕获
如果您定义了这个 Dockerfile，以及它所需要的支持文件(一个索引页)，您可以如下构建映像:
```
sudo docker build -t  
```
### 注
构建映像时，您可以定义许多选项。更多信息请看`docker build --help`。
Docker 随后将处理 Dockerfile，如果成功，它将生成一个`docker image`文件，然后您可以将该文件推送到您选择的容器注册表，以便在具有`docker pull`的其他主机上使用。
一旦构建完成，您就可以运行它并验证工具是否如预期的那样工作。容器中有`ethtool`意味着我们可以很容易地确定 VETH 对的主机端 VETH 端:
```
user@docker1:~$ docker run -dP --name nettest jonlangemak/net_tools
user@docker1:~$ docker exec -it nettest /bin/bash
root@2ef59fcc0f60:/# ethtool -S eth0
NIC statistics:
 peer_ifindex: 5
root@2ef59fcc0f60:/#
```
我们还可以执行本地`tcpdump` 操作来验证到达容器的流量:
```
root@2ef59fcc0f60:/# tcpdump -qnn -i eth0
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
15:17:43.442243 IP 10.20.30.41.54974 > 172.17.0.3.80: tcp 0
15:17:43.442286 IP 172.17.0.3.80 > 10.20.30.41.54974: tcp 0
```
当你的用例改变时，你可以修改 Dockerfile，使其更具体到你自己的用例。在诊断连接问题时，能够从容器内部进行故障排除可能会有很大帮助。
### 注
这张图片只是一个例子。有很多方法可以让它变得更轻。我决定用 Ubuntu 作为基础图片，只是为了熟悉。因此，前面描述的映像相当重。
# 重置本地 Docker 网络数据库
随着用户定义网络的出现，用户能够为他们的容器定义自定义网络类型。一旦定义，这些网络将在系统重新启动后持续存在，直到被管理员删除。为了使这种持久性发挥作用，Docker 需要一些地方来存储与用户定义的网络相关的信息。答案是主机本地的数据库文件。在极少数情况下，该数据库可能会与主机上容器的当前状态不同步或损坏。这可能会导致与删除容器、删除网络和启动 Docker 服务相关的问题。在本食谱中，我们将向您展示如何删除数据库，以将 Docker 恢复到其默认网络配置。
## 做好准备
在本食谱中，我们将使用单个 Docker 网络主机。假设 Docker 已安装并处于默认配置。您还需要根级访问权限，以便检查和更改主机的网络和防火墙配置。
## 怎么做…
Docker 将与用户定义的网络相关的信息存储在本地主机上存储的数据库中。该数据库在定义网络时写入，在服务启动时读取。在此数据库不同步或损坏的极少数情况下，您可以删除数据库并重新启动 Docker 服务，以便重置 Docker 用户定义的网络并恢复三种默认网络类型(网桥、主机和无)。
### 注
警告:删除此数据库会删除主机上的所有 Docker 用户定义的网络。只有在万不得已的情况下，并且如果您有能力重新创建以前定义的网络，这样做才是明智的。在尝试此操作之前，应使用所有其他故障排除选项，并且应在删除文件之前创建文件备份。
数据库名为`local-kv.db`，存储在路径`/var/lib/network/files/`中。访问和/或删除文件需要根级访问权限。在本例中，我们将切换到 root 用户，以便更轻松地浏览这个受保护的目录:
```
user@docker1:~$ sudo su
[sudo] password for user:
root@docker1:/home/user# cd /var/lib/docker/network/files
root@docker1:/var/lib/docker/network/files# ls -al
total 72
drwxr-x--- 2 root root 32768 Aug  9 21:27 .
drwxr-x--- 3 root root  4096 Apr  3 21:04 ..
-rw-r--r-- 1 root root 65536 Aug  9 21:27 local-kv.db
root@docker1:/var/lib/docker/network/files#
```
为了演示当我们删除这个文件时会发生什么，让我们首先创建一个新的用户定义的网络，并为其附加一个容器:
```
root@docker1:~# docker network create -d bridge mybridge
c765f1d24345e4652b137383839aabdd3b01b1441d1d81ad4b4e17229ddca7ac
root@docker1:~# docker run -d --name web1 --net mybridge jonlangemak/web_server_1
24a6497e99de9e114b617b65673a8a50492655e9869dbf7f7930dd7f9f930b5e
root@docker1:~#
```
现在我们删除文件`local-db.kv`:
```
root@docker1:/var/lib/docker/network/files# rm local-kv.db
```
虽然这对正在运行的容器没有直接影响，但它确实阻止我们添加、删除或启动与此用户定义网络相关联的新容器:
```
root@docker1:/~# docker run -d --name web2 --net mybridge \
jonlangemak/web_server_2
2ef7e52f44c93412ea7eaa413f523020a65f1a9fa6fd6761ffa6edea157c2623
docker: Error response from daemon: failed to update store for object type *libnetwork.endpointCnt: Key not found in store.
root@docker1:~#
```
删除`boltdb`数据库文件`local-kv.db`后，您需要重新启动 Docker 服务，以便 Docker 使用默认设置重新创建它:
```
root@docker1:/var/lib/docker/network/files# cd
root@docker1:~# systemctl restart docker
root@docker1:~# ls /var/lib/docker/network/files
local-kv.db
root@docker1:~# docker network ls
NETWORK ID          NAME                DRIVER
bfd1ba1175a9        none                null
0740840aef37        host                host
97cbc0e116d7        bridge              bridge
root@docker1:/var/lib/docker/network/files#
```
现在文件被重新创建，您将再次能够创建用户定义的网络。但是，连接到以前配置的用户定义网络的任何容器现在都将无法启动:
```
root@docker1:~# docker start web1
Error response from daemon: network mybridge not found
Error: failed to start containers: web1
root@docker1:~#
```
这是预期的行为，因为 Docker 仍然认为容器应该在网络上有一个接口:
```
root@docker1:~# docker inspect web1
……
            "Networks": {
                "mybridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "c765f1d24345e4652b137383839aabdd3b01b1441d1d81ad4b4e17229ddca7ac",
……
root@docker1:~#
```
要解决这个问题，你有两个选择。首先，您可以使用与最初配置时相同的配置选项重新创建名为`mybridge`的用户定义网络。如果这不起作用，您唯一的选择是删除容器并重新启动引用新创建或默认网络的新实例。
### 注
在使用`docker network disconnect`子命令时，关于支持`--force`标志的新版 Docker 的 GitHub 有过一些讨论。在 1.10 版本中，这个参数是存在的，但是仍然不喜欢用户定义的网络不存在。如果你正在运行一个更新的版本，这可能也值得一试。