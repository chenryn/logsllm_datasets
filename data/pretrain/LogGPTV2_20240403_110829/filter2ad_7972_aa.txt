原文：[《Exploiting Windows 10 in a Local Network with WPAD/PAC and
JScript》](https://googleprojectzero.blogspot.com/2017/12/apacolypse-now-exploiting-windows-10-in_18.html "《Exploiting Windows 10 in a Local Network
with WPAD/PAC and JScript》")  
译者： c1tas，de4dcr0w @ 360CERT  
译者公众号：
#### 0x00 aPAColypse now: Exploiting Windows 10 in a Local Network with
WPAD/PAC and JScript by Ivan Fratric, Thomas Dullien, James Forshaw and Steven
Vittitoe
by Ivan Fratric, Thomas Dullien, James Forshaw and Steven Vittitoe
#### 0x01 Intro
许多广泛部署的技术在经过 20/20 hindsight(判断方式) 之后发现都是一些奇怪的或不必要 的冒险想法
在 IT 里的工程决定往往在不完善的信息和时间压力下完成, 一些古怪的 IT 设置可能被解 释为" 在这时候这看起来是个好的方案", 在这篇文章的作者中,
一些人发现 WPAD("Web Proxy Auto Discovery Protocol") 更多被称为 ("Proxy Auto-Config"),
就是一个奇怪的点
在互联网的早期，在 1996 之前，Netscape 的工程师们决定 JavaScript 是一种很好的语言 来编写配置文件。其结果是 PAC-配置文件格式，其工作方式如下：浏览器连接到预先配置的 服务器，下载 PAC 文件，并执行特定的 JavaScript 函数以确定适当的代理配置。为什么不呢？
它肯定比 XML 更具表达性和更少的细节，似乎是向许多客户提供配置的合理方式。
PAC 本身加上一个叫做 WPAD-一个协议，使浏览器不必有一个预配置的服务器用来连接 协议。相反，WPAD 允许计算机查询本地网络来确定从哪个服务器下载的
PAC 文件。 不知怎么的，这项技术最终成为了一个 1999 到期的 IETF 的草案，现在，在 2017，每台 Windows
机器都会问本地网络：“嘿，我在哪里可以找到一个 JavaScript 文件来执行？“。这可 以通过多种机制来实现：DNS、WINS，但也许最有趣的是
DHCP。
近年来，浏览器的开发已经从最初的 DOM 转向直接针对 JavaScript 引擎，所以仅仅提到 我们可以在没有浏览器的情况下在网络上执行
JavaScript 是一种激励。初步调查显示 JS 引擎 负责执行这些配置文件是 jscript.dll-遗留的 JS 引擎，也带动了 IE7 和
IE8（和仍然可在 IE11 在 IE7 / 8 兼容模式如果使用适当的脚本属性）。这有好有坏——一方面，它意味着不是每一个 Chakra bug
都是自动的本地网络远程攻击，但另一方面，它意味着一些相当旧的代码将负责执 行我们的 JavaScript。
早先, 安全研究人员就警告过 WPAD 的危险性, 但这貌似我们知道的第一例, 证明利用 WPAD 进攻击是可以危害到用户机的 。
windows 不是唯一在使用 WPAD 的软体, 其他的操作系统和软件同样有在使用.Google Chrome 就同样具有 WPAD 解释器, 但是
Chrome 会把 PAC 文件中的 JS 代码放在沙箱中运 行, 但其他的操作系统就没有这么做, 这就是 windows 为何是这种攻击最有兴趣的目标。
#### 0x02 Web Proxy Auto-Discovery
1.Intro
如上所述，WPAD 将查询 DHCP 和 DNS（按此顺序）以获取要连接的 URL-如果没有来 自 DNS 的响应，则显然 LLMNR 和 Netbios
也可以使用。WPAD-over-DNS 的一些特性使得 中间人攻击能够出人意料地发挥作用。
2.Attack scenario: Local network via DHCP
在最常见的场景中，机器将使用 option code 252 查询本地 DHCP 服务器。DHCP 服务器
返回一个字符串如，指定一个 URL 的配置文件应该被加
载。然后，客户端继续获取该文件，并将内容作为 JavaScript 执行。 在本地网络中，攻击者可以简单地模仿 DHCP 服务器 - 可以通过 ARP
欺骗或通过合法的 DHCP 进行竞争。然后，攻击者可以提供一个恶意 JavaScript 文件所在的 URL。
3.Attack scenario: Remote over the internet via privileged position and DNS
除了当地的网络攻击的情况下，事实上，查找 WPAD 这一请求也可能通过 DNS 查询发生 的这一情况, 也就产生了更多攻击场景。许多用户配置他们的计算机执行
DNS 查找某个公共 DNS，全局可见的 DNS 服务器（如 8.8.8.8、8.8.4.4，地址 208.67.222.222 和
208.67.220.220）。 在这样的情况下，机器会发出 DNS 查询（如 wpad.local），位于本地网络服务器之外。攻击者
在网络上的特权位置（例如网关或任何其他上行主机）可以监视 DNS 查询并欺骗应答，指示 客户端下载并执行恶意 JavaScript 文件。
像这样的设置似乎很常见-根据这一[维基百科](https://en.wikipedia.org/wiki/.local#Global_DNS_queries
"维基百科")条目，DNS 根服务器所看到的流量中的一大 部分是本地请求。
4.Attack scenario: Remote over the internet via malicious wpad_tld
WPAD 的特殊之处在于递归地遍历本地机器名称以查找要查询的域。如果一台机器被称为
“laptop01.us.division.company.com”，则按照以下方式查询以下域名：
  * wpad.us.division.company.com
  * wpad.division.company.com
  * wpad.company.com 
  * wpad.com
这（根据这个[维基百科](https://en.wikipedia.org/wiki/Web_Proxy_Auto-Discovery_Protocol
"维基百科")条目）过去导致人们注册 wpad.co.uk 并将流量重定向到在线拍卖 网站。进一步引用该条目： 通过 WPAD
文件，攻击者可以将用户的浏览器指向自己的代理，拦截并修改所有的 WWW 流量。尽管在 2005 年对 Windows WPAD
处理进行了简单的修复，但它只解决了.com 域的问题。在 Kiwicon 的一个演示显示，世界其他地区仍然严重受到这个安全漏洞的威胁, 在
新西兰注册了一个样本域名，用于测试目的，接收来自全国各地的代理请求，速度为几秒钟。 几个 wpad.tld 域名（包括 COM，NET，ORG 和
US）现在指向客户端回送环回地址，以帮助 防止此漏洞，尽管某些名称仍然被注册（wpad.co.uk）。
因此，管理员应该确保用户可以信任组织中的所有 DHCP 服务器，并且保证组织的所有 可能的 WPAD 域都受到控制。此外，如果没有为组织配置 wpad
域，用户将转到域分层结构 中具有下一个 wpad 站点的任何外部位置，并将其用于其配置。这允许只要注册了特定国家的 wpad
子域名，通过设置自己作为所有流量或感兴趣的站点的代理，就可以对该国的大部分互 联网流量进行中间人攻击。
另一方面，IETF 草案明确要求客户只允许“规范”（例如非顶级域名）。我们还没有调查是
否有人在什么程度上实施这个攻击，或者二级域名（如.co.uk）是否是流量重定向的历史案例 的罪魁祸首。 无论哪种方式, 如果一个管理员注册
wpad.$TLD 给定组织的 TLD, 前提是该 TLD 没有被 客户端实施明确列入黑名单, 那么在 JavaScript
引擎的漏洞就可以被通过互联网远程利用. 鉴于 1999 年的 IETF 草案提到了 1994 年的 TLD
列表（RFC1591），客户不太可能已经更新以反映 新 TLD 的扩散。
我们尝试为各种 TLD 注册 wpad.co.$TLD 尚未成功。
#### 0x03 Bugs
我们花了一些时间在寻找`jscript.dll`, 采用手工分析和 fuzzing,JScript最初的挑战是许许多 多的"feature" 能在
javascript engines 触发 bugs 的 tips 无法在其工作, 应为它太陈旧而不支持 它们. 举个例子
  * 没有多种的 array tpyes(int array, float array etc.). 因此混淆一个数组类型是不可能的
  * 没有更多的优化例如 ("fast paths"), 在更新的更快的 Javascript engines 中这些 fast path 的优化常常是 bug 的来源
  * 不能对一个通常的 JavaScript 对象定义 getter/setter. 只在 dom 对象中可以调用的定义 的属性, 但在 WPAD 进程中没有 DOM. 并且 DOM 对象中大量的 JScript 函数将 fail 并伴随一个消息"JScript object expected"
  * 只要在一个对象被创建后, 不允许修改他的属性 (i.e. 这里没有 **proto** 属性)
然而,JScript 会遭受更多"old school" 的漏洞, 比如 use-after-free. JScript 的垃圾收集器 ([a
post](https://blogs.msdn.microsoft.com/ericlippert/2003/09/17/how-do-the-script-garbage-collectors-work/ "a post")).Jscript 使用了非世代 (no-generational)
的标记和清理垃圾收集器. 从本质上讲, 无论 何时垃圾收集被触发, 它都会标记所有的 JScript 对象. 然后从一组"root" 对象 (有时候被称
为"scavengers"(清道夫)) 开始扫描他们, 并从所有的对象中清除标记. 所有仍被标记的对象都将 被删除. 一个经常出现的问题是, 默认情况下,
堆栈上的本地变量不会添加到根对象列表中, 这 意味着程序员需要记住将他们添加到垃圾收集器的根列表, 特别是这些变量引用对象, 在函数的
生命周期中可以被删除的时候.
另一种可能的漏洞类型包括 buffer overflows(缓冲区溢出),uninitialized variables 等等 Fuzzing,
我们使用了基于语法的Domato fuzzing 引擎, 并且写了一套新的 JScript 语法. 我 们把发现的有趣的内置的属性和函数添加到这个语法中,
通过观察不同 JScript 对象的EnsureB uildin方法. 被添加的 JScript 语法在 Doamto
repository([here](https://github.com/google/domato/tree/master/jscript
"here"))
在 fuzzing 和手工测试中我们发现了 7 个安全漏洞, 整理如下表
在发布这篇文章的时候, 所有的 bugs 已经被修复了 这个表格通过漏洞触发类别, 和所需要的兼容模式来区分.JScript 在 WPAD 中相当于在 IE