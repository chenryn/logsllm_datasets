# MIPS漏洞调试环境安装及栈溢出
近来这段时间开始学习设备相关漏洞，自然一开始就是装环境和调试一个栈溢出漏洞来体验下MIPS指令和x86的区别。这篇文章是看《揭秘家用路由器0day漏洞挖掘技术》前六章以及在网上进行学习的小结。
## 环境安装
环境安装主要包括三个部分，分别是：
  * 静态分析环境安装
  * MIPS交叉编译环境安装
  * 动态调试环境安装
  * qemu模拟运行mips系统
### 静态分析环境安装
主要是IDA，IDA的安装就不用多说了。这里说明的是辅助插件MIPSROP这些插件的安装，书里面给的插件的[链接](https://github.com/devttys0/ida)已经无法支持IDA
6.7以后的版本，主要是由于版本以后的API有更新，具体原因IDA的官方博客也给出了[说明](http://www.hexblog.com/?p=886)，查看了issue以后，发现有大佬已经写了能够支持IDA7.0的[插件](https://github.com/fuzzywalls/ida)，安装的命令照着readme做即可顺利的装上。
MIPSROP的主要用法如下，文章后续用到的命令是`mipsrop.stackfinders()`：
    mipsrop.help()
    mipsrop.find(instruction_string)
    -------------------------------------------------------------------------------            Locates all potential ROP gadgets that contain the specified instruction.
    mipsrop.system()
    -------------------------------------------------------------------------------            Prints a list of gadgets that may be used to call system().
    mipsrop.doubles()
    -------------------------------------------------------------------------------            Prints a list of all "double jump" gadgets (useful for function calls).
    mipsrop.stackfinders()
    -------------------------------------------------------------------------------            Prints a list of all gadgets that put a stack address into a register.
    mipsrop.tails()
    -------------------------------------------------------------------------------            Prints a lits of all tail call gadgets (useful for function calls).
    mipsrop.set_base()
    -------------------------------------------------------------------------------            Set base address used for display
    mipsrop.summary()
    -------------------------------------------------------------------------------            Prints a summary of your currently marked ROP gadgets, in alphabetical order by the marked name.
            To mark a location as a ROP gadget, simply mark the position in IDA (Alt+M) with any name that starts with "ROP".
另外就是反编译插件，找了下寻找到[`Retdec`](https://github.com/avast-tl/retdec-idaplugin)，可以用来反编译。
还有一个静态分析工具，就是jeb
mips，它可以看汇编代码，同时也支持反编译，但是在官网下载的体验版的是不支持反编译功能的，同时我也搜了一些破解版也没找到能用的，如果大佬有的话，跪求。jeb
mips也有rop插件，名字是[`PleaseROP`](https://github.com/pnfsoftware/PleaseROP)。
### MIPS交叉编译环境环境安装
buildroot是Linux平台上一个构建嵌入式Linux系统的框架。整个Buildroot是由Makefile脚本和Kconfig配置文件构成的。可以和编译Linux内核一样，通过buildroot配置，menuconfig修改，编译出一个完整的可以直接烧写到机器上运行的Linux系统软件(包含boot、kernel、rootfs以及rootfs中的各种库和应用程序)。
  1. 下载buildroot
        wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2
    tar -jxvf buildroot-snapshot.tar.bz2
    cd buildroot
  2. 配置buildroot
        sudo apt-get install libncurses-dev patch
    make clean
    make menuconfig
在出现界面后，选择第一项“Target Architecture”，改成MIPS（little
endian），另外，选择“Toolchain”，务必将“Kernel
Headers”的Linux版本改成你自己主机的Linux版本（因为我们编译出的MIPS交叉工具是需要在我们的主机上运行的）
  3. 安装
        sudo apt-get install texinfo
    sudo apt-get install bison
    sudo apt-get install flex
    sudo make
经过约一小时，编译完成后，在buildroot文件夹下多了一个output文件夹，其中就是编译好的文件，可以在buildroot/output/host/usr/bin找到生成的交叉编译工具，编译器是该目录下的mips-linux-gcc文件。
  4. 配置环境变量，使得可以直接使用命令编译文件。
        gedit ~/.bashrc
    export PATH=$PATH:/Your_Path/buildroot/output/host/usr/bin
    source ~/.bashrc
  5. 测试
    #include
    int vul(char* src)
    {
        char output[20]={0};
        strcpy(output,src);
        printf("%s\n",output);
        return 0;
    }
    int main(int argc,char *argv[])
    {
        if(argc<2){
            printf("need more argument\n");
            return 1;
        }
        vul(argv[1]);
        return 0;
    }
静态编译生成二进制文件`mips-linux-gcc -o hello hello.c
-static`，使用`file`查看文件类型，可以看到生成了mips的elf文件。
### 动态调试环境安装
需要事先声明的是我安装的环境是ubuntu
16.4，一开始我是在18.4上面安装的，但是好像由于pwndbg对18.4支持不友好，导致远程调试的时候失败，换成了16.4就好了。
主要包括binwalk、qemu、pwndbg以及gdb-multidbg。
binwalk主要用于从固件镜像中提取文件。  
安装命令：
    sudo apt-get update  
    sudo apt-get install build-essential autoconf git
    # https://github.com/devttys0/binwalk/blob/master/INSTALL.md  
    git clone https://github.com/devttys0/binwalk.git  
    cd binwalk
    # python2.7安装  
    sudo python setup.py install
    # python2.7手动安装依赖库  
    sudo apt-get install python-lzma
    sudo apt-get install python-crypto
    sudo apt-get install libqt4-opengl python-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip  
    sudo pip install pyqtgraph
    sudo apt-get install python-pip  
    sudo pip install capstone
    # Install standard extraction utilities（必选）  
    sudo apt-get install mtd-utils gzip bzip2 tar arj lhasa p7zip p7zip-full cabextract cramfsprogs cramfsswap squashfs-tools
    # Install sasquatch to extract non-standard SquashFS images（必选）  
    sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev  
    git clone https://github.com/devttys0/sasquatch  
    (cd sasquatch && ./build.sh)
    # Install jefferson to extract JFFS2 file systems（可选）  
    sudo pip install cstruct  
    git clone https://github.com/sviehb/jefferson  
    (cd jefferson && sudo python setup.py install)
    # Install ubi_reader to extract UBIFS file systems（可选）  
    sudo apt-get install liblzo2-dev python-lzo  
    git clone https://github.com/jrspruitt/ubi_reader  
    (cd ubi_reader && sudo python setup.py install)
    # Install yaffshiv to extract YAFFS file systems（可选）  
    git clone https://github.com/devttys0/yaffshiv  
    (cd yaffshiv && sudo python setup.py install)
    # Install unstuff (closed source) to extract StuffIt archive files（可选） 
    wget -O - http://my.smithmicro.com/downloads/files/stuffit520.611linux-i386.tar.gz | tar -zxv  
    sudo cp bin/unstuff /usr/local/bin/
使用命令：
    binwalk -Me firmware.bin
qemu为模拟器，主要用于模拟mips程序的运行。主要有两种模式：
  1. User Mode，亦称为用户模式。qemu能启动那些为不同处理器编译的Linux程序。
  2. System Mode，亦称为系统模式。qemu能够模拟整个计算机系统。
qemu使用者模式mips程序共有两种模拟程序，分别是运行大端机格式的qume-mips和小端机格式的qume-mipsel，他们的执行参数都是一样的。我主要用的是用户模式。
安装命令：
    sudo apt-get install qemu
    apt-get install qemu binfmt-support qemu-user-static
运行：
    qemu-mipsel  ./hello
对于没有添加静态编译选项`-static`的elf文件，在运行的时候会报错，报错为：`/lib/ld-uClibc.so.0: No such file
or directory`，原因是没有库的链接，这时我们只需要找到该库，使用`qemu-mipsel -L
/Your_Path/buildroot/output/target/ hello`即可运行。
对于动态调试，书上推荐的是IDA远程调试，网上教程也很多，方法也比较简单，不再描述。习惯了gdb调试的我，用不习惯ida，于是在网上找到了gdb远程调试的教程。
首先是安装pwndbg，peda对于mips的动态调试没有太好的支持。pwndbg的安装命令：
    git clone https://github.com/pwndbg/pwndbg
    cd pwndbg
    ./setup.sh
接着是安装`gdb-multiarch`，安装命令：
    sudo apt-get install gdb-multiarch
安装完毕后，整个远程动态调试的过程为：
  1. 使用命令`qemu-mipsel -g 1234 -L /Your_Path/buildroot/output/target/ hello`将程序运行起来，`-g 1234`的意思表示为监听端口1234，用于远程调试。
  2. 使用`gdb-multiarch ./hello`来开启gdb。
  3. 进入gdb后，使用命令`target remote 127.0.0.1:1234`，即开始调试程序。
用gdb-multiarch调试，相较于ida远程调试来说，对于用习惯了gdb调试的人来说应该会方便不少，而且还有pwndbg的支持。
### qemu模拟运行mips系统
#### 配置网络环境
  1. 获取安装依赖文件：
        sudo apt-get install bridge-utils uml-utilities
  2. 配置网卡。  
首先打开配置文件：
    sudo gedit /etc/network/interfaces
写入以下内容：
    auto lo
    iface lo inet loopback