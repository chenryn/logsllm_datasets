创建侦测器
这里就介绍这种方法。
大多数情况下我们希望在任意位置通过指定源代码中的变量名来显示变量的值。
这种方法查看变量的值，就必须分析汇编代码，并查看寄存器或栈。可能的话，
[HACK#49]介绍了利用kprobes在函数的任意位置插入侦测器的方法，但是使用
函数替换
#50
数名④，以避免符号名冲突。然后添加printk(）语句以查看变量值。在侦测器
HACK
本hack介绍了将kprobes插入任意地址，在内核函数源代码中获取变量值的方法。
总结
因此，调查的问题可能无法复现。
但是，这种方法需要改变源代码，生成的二进制代码也可能发生大规模的变动。
使用kprobes在内核内部任意位置通过
变量名获取信息
指令的地址。
这条test指令被保存到内核中的其他位置并执行。rip显示的地址就是临时保存
令执行前的侦测器，do_execve+50的test指令被int3指令覆盖而破坏，实际上
此外，指令执行后的rip值与侦测对象的地址大相径庭。这是因为，为了调用指
CPU的TRAP功能（每执行一条指令都引发异常）。
这是因为kprobes为了在指令执行之后插入侦测器，在禁止中断的状态下使用了
名获取信息的方法。
本hack介绍利用kprobes将内核函数整体替换，在任意位置通过变量
HACK#50使用kprobes 在内核内部任意位置通过变量名获取信息
www.TopSage.com
——大和一洋
#287月
294
---
## Page 306
无法编译。
必需的声明等。这些函数写在了fs/exec.c 中，因此必须在该文件中声明，否则
my_do_execve()。①到@为中断运行中的侦测程序的处理，①到③为编译④的函数
288 1
struct kprobe kp;
int copy_strings(int argc, char __user * __user * argv,
#define free_arg_pages(bprm) do {} while (0) -
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
struct pt_regs * regs)-
第 6章高手们的调试技术
/*下面与原来的代码相同*/
retval = PTR_ERR(file);
file = open_exec(filename);
printk("bprm: %p, filename: &s\n", bprm, filename);
if (!bprm)
bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
retval = -ENOMEM;
int i;
int retval;
struct file *file;
struct linux_binprm *bprm;
 goto out_ret;
struct linux_binprm *bprm);
www.TopSage.com
-_user * argv, int max);
?
?
①②
---
## Page 307
函数，因此发生了这种问题。
用这些数据的许可。上述源代码中(不是模块中)复制了内核中使用的 do_execve()
然，有些被复制的内核函数不会输出这种错误信息)，这是因为模块没有得到使
是 insmod时，在笔者的环境下发生了下面的错误。一般说，这个问题经常发生（当
上面的代码用内核的标准方法可以编译成模块（这里模块的名字为kpro3.ko），但
安装侦测器的模块及回避问题
MODULE_LICENSE("GPL");
module_exit(cleanup_kprobe_sample);
static __exit void cleanup_kprobe_sample(void)
module_init(init_kprobe_sample);
static __init int init_kprobe_sample(void)
int handler(struct kprobe *p, struct pt_regs *regs) {
unregister_kprobe(&kp);
return 0;
register_kprobe(&kp);
kp.pre_handler = handler;
/* kp.addr = (kprobe_opcode_t *)kallsyms_lookup_name("do_execve"); */ 
/*如果内核版本在2.6.18以下 */
kp.symbol_name = "do_execve";
return 1; -
preempt_enable_no_resched();
reset_current_kprobe(); —
regs->rip = (unsigned long)my_do_execve;
HACK#50 使用 kprobes 在内核内部任意位置通过变量名获取信息|  289
www.TopSage.com
---
## Page 308
297
290 1   第 6章高手们的调试技术 
后，就得到了下面的内核消息。
如上所示,强行解析地址问题后对模块执行insmod,执行某些命令调用do_execve(）
/proc/kallsyms 或 vmlinux文件中获得。
addrs.dat 文件中记载了符号名及其地址，各符号的值可以用下面的方法从
下调试，因此用下面的方法给出模块中无法解析的符号的地址，就能回避该问题。
这个限制是Linux 的策略，普通方法无法解决。但是，我们只是为了在特定环境
kernel: bprm: fff81001ffla800, filename: /bin/ls
# cat /proc/kallsyms | grep init_new_context
# nm vmlinux | grep per_cpu_current_kprobe
# ld -r -o kpro3a.ko kpro3.ko -R addrs.dat 
fffffff8006d7f7 T init_new_context
fffff804052a0 D per_cpu__current_kprobe 
SECTIONS
# cat addrs.dat
kernel: kpro3: Unknown symbol copy_strings 
kernel: kpro3: Unknown symbol count
kernel: kpro3: Unknown symbol
kernel: kpro3:Unknown symbol sched_exec
kernel: kpro3: Unknown symbol acct_update_integrals
kernel: kpro3: Unknown symbol mm_alloc
kernel: kpro3: Unknown symbol init_new_context
kernel: kpro3: Unknown symbol per_cpu__current_kprobe
mm_alloc
copy_strings 
count
do puu 
sched_exec
acct_update_integrals
init_new_context
per_cpu__.current_ kprobe
www.TopSage.com
= 0xffffffff8004ecd8;
= oxfffff8006d7f7;
= oxffffff804052a0;
=
11
θxffffffff8004c098;
oxffffffff80017381;
oxffffffff80039821;
exffffffff8008d5e2;
oxffffffff800457be;
---
## Page 309
量的值。例如，用优化选项（-02）试着编译-下下面这段源代码。
话)，那么给出变量名就能显示出变量的值。但是，优化之后有可能无法获取变
器、内存的值。如果被调试进程的可执行文件中包含调试信息（用-g选项构建的
优化和变量显示
量信息的方法。
本 hack 介绍了使用 kprobes 整个替换内核函数，以通过变量名查看任意位置的变
本书许多地方都说过，使用GDB可以在任意地点暂停进程，并显示当时的寄存
总结
int main(void)
int func(int x)
#include 
#include 
[calc.c]
int i = 1;
return a;
printf("a: %d\n", a);
a = a0 + al + a2;
a2 =x / 2 + al;
al = ×+ 2- a0;
a0 =x *× * 2 + 1;
int a, a0, al, a2;
本hack介绍利用KAHO替换进程中的函数.以获取被优化掉导致GDB
量的值
使用KAHO获取被编译器优化掉的变
无法检测到的变量的值的方法。
HACK#51 使用 KAHO 获取被编译器优化掉的变量的值 | 291 
www.TopSage.com
-大和一洋
298
---
## Page 310
299
导致调试无法高效率地进行。一个简单的解决方法就是改变源代码，用printf()
时，如果出现被Optimizedout（优化掉）的变量，确认程序行为时就会遇到阻碍，
大多数程序在编译时都启用了优化，因此这种情况十分常见。用GDB单步执行
optimizedout>，无法显示变量的值。
来试试显示该程序中的func（）中的变量a0、al。在笔者的环境中显示出
$1=
(gdb)n
(gdb)n
（gdb）n
Breakpoint1,func（x=1l)at opt.c:7
Startingprogram:/home/kyamato/DebugHacks/kyamato/chapter5/kaho.work/opt2
(gdb)pal
(gdb)pa0
11
(gdb）n
10
(gdb）n
(gdb)n
10
(gdb)run
Breakpoint 1at 0x4004c0:file opt.c,line7.
(gdb)bfunc
return EXIT_SUCCESS;
while(1){
sleep(3);
printf("a:&d\n"，a）;
++0=
a0=×*x*2+1;
al=x+2-a0;
++0=
a0=×*x*2+1;
a=a0+al+a2;
www.TopSage.com
---
## Page 311
接下来将 KAHO的内核补丁放在 SOURCES/目录下，构建内核并安装。
在 1360 行前后的# END OF PATCH APPLICATIONS 行之前插入下面这一行。
件的第15行的 buildid的定义注释掉，并将.local改成,kaho。
~/rpmbuild/SPECS/kernel.spec。为标识加入了 KAHO 功能的内核，可以将 spec文
编辑spec 文件以应用KAHO的内核补丁。Spec 文件解压后位于
首先下载内核源代码，并用下面的命令打补丁。
成。从下面的网站可以下载。
这里介绍在Fedoral0 中安装KAHO 的方法，KAHO由内核补丁和命令行工具构
安装 KAHO (Fedora10)
程，也就是说，无须等待初始化，就能输出变量的值。
量所在的函数整个用包含printf()等调试输出的函数替换，这样无须重新启动进
修正。这里介绍一种方法，利用KAHO 获取运行进程中的变量。把想要显示的变
程序原本用于高可用性系统，这样无须重新启动进程就能对 bug 和安全漏洞进行
像这种情况下，可以尝试使用 live patch，也称 runtime binary patch 的程序。这种
http://sourceforge.net/projects/kaho-01/
调试更换进程的函数
量值被显示出来，需要等待很长时间，导致调试无法顺利进行。
X11，以及由众多进程构成的大型应用程序等)，重新构建并执行，直到实际的变
显示 a0、al 等。但是这种方法对于启动或初始化需要花费很长时间的程序（如
ApplyPatch kaho_kernel_fedora10.patch 
 %define buildid .kaho
# rpm -ihv kernel-2.6.27.9-159.fc10.src.rpm
 # yumdownloader --source kernel
可能导致问题不再复现。
此，与[HACK#50]相同，插入printf()语句后，生成的代码也有可能发生变化,
[HACK#50]替换了内核中的函数。本 hack的方法可以说是它的用户进程版。因
HACK#51 使用 KAHO 获取被编译器优化掉的变量的值| 293
www.TopSage.com
300
---
## Page 312
302
301
至于命令行工具，上面的网站中包含了用于Fedoral0的二进制 RPM 文件，只需
安装后重新启动新内核。
294丨第6章高手们的调试技术
上用于输出变量的 printf()语句①。下面就是源代码和构建方法。
要调试的函数 func()从 calc.c中完整地复制过来，并改名为func_debug()，再加
是将下面的源代码 debug.c用跟 calc 同样的编译选项构建出的共享库。debug.c把
calc 就是开头介绍的calc.c用优化选项（-02）构建出的可执行文件，而 debug.so
首先准备下面3个文件。
使用KAHO进行调试
下载并安装即可。
# rpm -ihv rpmbuitd/RPMS/kernel-2.6.27.9.x86_64.rpm
# rpmbuild -bb rpmbuild/SPECS/kernel. spec
 # cp ~/kaho_kernel_fedora10.patch ~/rpmbuild/souRCES
int func_debug(int x)
#include 
# cat debug.c
/home/kaho_dbg/1/debug. cmd
/home/kaho_dbg/1/debug.s0
/home/kaho_dbg/calc
a = a0 + al + a2;
a2 = x / 2 + al;
al=×+2- a0;
a0 =x*x*2+ 1;
int a, a0, al, a2;
http://www.atmarkit.co.jp/flinux/rensai/linuxtips/al13rebuild.html
必须同时应用UTRACE补丁和KAHO补丁。UTRACE补丁可以从下面的 Web
Asianux中，但还没被合并到主线上。因此，要想在主线内核上使用KAHO，就
KAHO 用到了名为 UTRACE 的功能，该功能包含在 RHEL、Fedora、Cent OS、
另外，Fedoral0的内核构建方法可以参考以下网站。
http://people.redhat.com/roland/utrace/
页面获得。
www.TopSage.com
---
## Page 313
为.cmd的文件）。
条 KAHO命令执行实际的替换操作（该操作称为激活（activation））。此外，KAHO命
函数 func_debug()加载到 calc进程的内存空间中，但是这个状态尚未替换。第 2 
接下来在终端 B上输入两次 KAHO命令，如下所示。第1条KAHO命令把要替换的
终端 B)，首先在终端A上启动calc。
来看看实际的运行情况。为便于显示，我们准备了两个终端（分别称为终端A和
以下的运行示例中所用的文件如下。
debug.cmd是记载KAHO命令的文件，其格式如下。
?
 # cat debug.cmd
# gcc -o debug.so debug.c -fPIC -shared -02 -g
# kaho -l 'pidof calc` 1
pad =IWOH OHY HOdxa #
# cd /home/kaho_dbg 
[终端B上的操作】
a:-145
a: 3
# ./calc
[在终端A上操作]
] func func_debug 
patch-file debug.so
]func 替换函数的名称（符号名）
patch-file 替换函数所在的共享库名
-8
return a
printf("a; %d\n", a);
printf("[Debug]a0: %d, al: %d, a2: %d\n", a0, al, a2);
的不是数据而是函数。
KAHO 不仅能替换函数，还能替换数据。第 2行的］func关键字指示了要替换
HACK#51 使用 KAHO 获取被编译器优化掉的变量的值 295 
www.TopSage.com
303
---
## Page 314
304