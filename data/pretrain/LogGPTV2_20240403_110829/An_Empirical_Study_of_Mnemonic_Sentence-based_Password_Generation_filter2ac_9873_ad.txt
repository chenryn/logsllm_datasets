the most popular one was chosen 6 times (˜λ10 = 0.7%), and ˜λ10
was 2.2%. ˜λ10 from MnePer was signiﬁcantly smaller than that
from MneGenEx (z = 5.41, p < 0.001), and was larger than that
from MnePerEx (z = 1.39, p = 0.083). There was no signiﬁcant
difference between the MnePer and MneEx.
An unexpected ﬁnding is that in MnePer, while the 10 most pop-
ular sentences were chosen only 19 times, ˜λ10 in password choices
was 5.6% (top10 = 42). In all other variants, the ˜λ10 in password
selections was less than that in sentence selections, since the same
sentence can result in different passwords. Why do we have higher
frequency in popular passwords than in popular sentences? Exam-
ining the dataset we found that a signiﬁcant fraction of users chose
pure digit sequence passwords (such as 12345678, 233425233525)
that did not appear to match the sentences. (Since we allow letters
to be replaced with digits, we did not check for such situations.) It
appears that when users are not shown any examples, some users
do not know how to follow the instruction.
Overal, our results suggest that neither explicit request for per-
sonalized sentences nor high-quality examples by itself sufﬁce (in
fact, neither appears to be more important than the other), and one
needs both to get high security.
4.3 Cracking Mnemonic Passwords
We now develop a method for cracking passwords generated us-
ing the mnemonic strategy. Our goal is to demonstrate that the step
of converting sentences to passwords provides only limited extra
entropy. Given the sentences, we can crack more than half of the
passwords selected by the users in between 5 and 10 guesses.
For ease of exposition, we ﬁrst explain our method for case-
insensitive passwords. When generating passwords by following
the mnemonic strategy, a word can theoretically be mapped to any
character; however, given a word, the number of characters that are
chosen by users is limited in practice. People generally just pick
the ﬁrst letter of each word. When ignoring case differences, on
average, each word is converted to 4 possible characters. From Ta-
ble 6, we can see that on average 81.2% of the words are converted
into their ﬁrst character; furthermore, about 3.3% of the time, an
additional leet substitution is applied. For mappings not using the
ﬁrst letters, the characters chosen are almost ﬁxed for a given word;
most of them are based on pronunciation or the meaning of the
word. For instance, “to” is mapped to “2”, “question” is mapped to
“?”, and “ﬁrst” is mapped to “1”.
Given a training dataset which contains pairs of sentences and
passwords, we ﬁrst learn the probability distribution of the word-
to-character mappings. We classify words into normal words and
special words. Normal words are typically mapped to the ﬁrst char-
acter, with a possible leet substitution. For each letter, we maintain
a probability distribution of how that letter is likely to mapped into.
Special words are often not mapped to its ﬁrst letter. For each spe-
cial word, we maintain a probability distribution for its mappings.
The classiﬁcation of words is an iterative process. At the begin-
ning, we assume that all words which appear at least 5 times are
normal words. In each iteration, we ﬁrst calculate the probability
distribution of each character by averaging the converted charac-
ter distribution of all corresponding words. Then, we ﬁnd the L1
distance between the converted character distribution of each word
and the probability distribution of its ﬁrst character. If the L1 dis-
tance is larger than a certain threshold, we say that the word is a
special word. In our experiment, the threshold value we use is 0.6.
We repeat the process until no words are removed from normal
words.
For password cracking, given a sentence, we ﬁrst generate a
guess by taking the ﬁrst character of all the words. Then, we gen-
erate the passwords by converting words into characters. We as-
sume that in a sentence, the same words are always converted in
the same way, and different words are converted into characters in-
dependently. Therefore, the probability of each generated password
is the product of the probabilities of the transitions from all unique
words to characters. We generate passwords in the descending or-
der of probability.
We evaluate the method on the sentences and passwords we col-
lected from MneGenEx, MnePerEx, MnePer, MneEx by cross val-
idation, i.e., we train the model on data from three variants and
attempt to crack passwords in the other variant. MneSchEx and
MneYanEx are excluded in the evaluation, as in the two variants,
a word is not always converted into one character. The percentage
of passwords cracked when varying the number of guesses is illus-
trated in Figure 2(a). For all of the variants, we can crack 60% of
the passwords within 10 guesses, where most of them are in the
ﬁrst 5 attempts.
The method performs less effective on MnePer and MneEx.
From Table 6, we can observe that the percentages of unique con-
versions from a word to a character contribute to 32.8% and 31.3%
of all such conversions in MnePer and MneEx. The quantities are
much higher than those from MneGenEx (22.1%) and MnePerEx
(24.1%). The more unique conversions leads to more character
mappings that are never guessed. Table 6 also shows that partic-
ipants in MneEx and MnePer are more likely to use digits, sym-
bols, and upper-case letters than participants in MneGenEx and
MnePerEx. One likely explanation is that just a single example
is presented in MneGenEx and MnePerEx; while no example is
presented in MnePer and six examples are given for MneEx. It is
possible that both no example and lots of examples cause people to
be more creative in mapping words to characters.
We adapt our method to be case-sensitive when guessing as fol-
lows. The training process is identical to the case-insensitive con-
dition. When generating password guesses, every time a password
(with the highest probability) is generated, instead of 1 guess, 4
guesses are made. We try the original password, capitalize all let-
ters, capitalize the ﬁrst letter, and capitalize all letters whose corre-
sponding words are capitalized. The performance of the method on
case-sensitive passwords is shown in Figure 2(b). More than 50%
of passwords in all the 4 variants can be guessed in 20 attempts,
with most successes from the ﬁrst 10 guesses.
Cracking from scratch. Now, we apply the cracking method de-
scribed above to a real-world scenario, in which sentence selection
in the testing dataset is unknown. Given a training dataset, we gen-
erate candidate passwords as follows. We ﬁrst order the sentences
selected in the training dataset by the descending order of their fre-
quencies. Then, starting from the most popular sentence, for each
sentence, we generate 20 case-sensitive guesses.
Fig 3 shows the effect of our method evaluated on the four
datasets by cross validation, i.e., for each testing dataset, the train-
ing dataset is the union of the other three datasets. In the graphs,
each curve represents a cracking method, and a point (x, y) on
the curve means y percentage of passwords in the testing dataset
are cracked within x attempts. We also plot the curves of 5-order
Markov Model (MC5), PCFG method (PCFG) trained on Rock-
you dataset, and two blacklist-based methods, which use Rock-
you (Rockyou) dataset and the passwords in the training datasets
(Train), respectively. Because of the limited number of sentences
in the training dataset (less than 2400), we are able to generate less
than 50,000 candidate passwords using the new method, and used
50,000 as the number of passwords generated for all methods.
The evaluation on MneGenEx is illustrated in Fig 3(a). From the
ﬁgure, we can observe that all the generic cracking methods per-
form poorly, and can crack no more than 0.4% passwords within
50,000 guesses. In fact, the only passwords covered by the meth-
ods are “!@#$%^” and “!@#$%^&*”, which are apparently cre-
ated without following the strategy. On the other hand, 3.2% of
the passwords in MneGenEx are covered in the 211 passwords in
the training datasets, which conﬁrm the need to using strategy-
speciﬁc methods. Our proposed method can crack 6.4% pass-
words with 50,000 guesses. We expect performance of the method
will increase with the size of training data. The performance of
our method as well as the dictionary obtained from the training
dataset drops signiﬁcantly on the other datasets, and passwords
from MnePerEx appears to the strongest. Less than 1% passwords
in MnePerEx are cracked with 50,000 guesses. The reduced per-
Table 6: Character usage in mnemonic strategy variants. Upper, Lower, Digit and Symbol means the number of corresponding type of
character used in passwords. First means the number of words whose ﬁrst character is directly used in the password. First + Leet means the
number of words whose ﬁrst character or the Leet substitution of the ﬁrst character is used in the password. Total Trans means the total
number of pairs of word and resulted characters. Unique Trans means the number of word-character pairs that only appear once in the
dataset. Distinct Words are the number of distinct words used in all sentences.
Variant
MneGenEx
MnePerEx
MnePer
MneEx
Digit
Lower
Symbol
Upper
3995.0% 663383.5%
6838.6%
5597.8%
3645.1% 608085.3%
81712.0% 429063.2% 112316.6% 5548.2% 502774.1%
99412.2% 553968.1% 104612.9% 5536.8% 665181.8%
607376.4%
546576.7%
79210.0%
74110.4%
First+Leet
1942.4%
1742.4%
3324.9%
2773.4%
First
Total Trans Unique Trans Distinct Words
7947
7129
6784
8132
175822.1%
171824.1%
222832.8%
254731.3%
2034
1954
2334
2207
(a) case-insensitive
(b) case-sensitive
Figure 2: Percentage of passwords cracked within 10 attempts for case-insensitive passwords, and 20 attempts for case-sensitive passwords.
(a) MneGenEx
(b) MnePer
(c) MnePerEx
(d) MneEx
Figure 3: Guess number graph on passwords created by using the mnemonic strategy.
formance of the methods is mainly due to the requirement of per-
sonalized sentence choice and the resulted increasing number of
unique sentences. The result is consistent with the ﬁndings from
˜λ1 and ˜λ10 analysis described in Section 4.2.
One may also notice that in MnePer,
the relative order of
the methods is quite different. This is because of high fre-
quency of passwords generated not following the strategy, such as
12345678 (17), !@#$%^&* (6), 123456789 (5). These passwords
are hard to predict based on our method, but are easy to guess based
on the other methods. As a result, our method performs worse than
all the other methods in the graph.
5. STUDY 2: USABILITY
We conducted another user study evaluating the usability of the
mnemonic strategy from two aspects: (I) Creation usability: Time
and effort required from the user to generate a password by follow-
ing the given strategy; (II) Memorability: recall of the password
generated with the given strategy about 1 week later. In this study,
three variants were evaluated, MneGenEx, MnePerEx, which were
evaluated as the most and the least secure mnemonic variant in the
previous analysis, and Control, which serves as a baseline.
Time used for password generation, the success rate of password
recall, and password recall time were measured. We also examined
the effort that participants spent during password generation and
recall utilizing the NASA-Task Load Index (TLX) [18], which has
been widely used in human factors research to assess the perceived
workload during a task. In the NASA-TLX, workload is rated on
6 subscales: mental demand, physical demand, temporal demand,
performance, effort and frustration. Participants rated the workload
of each subscale ranging on a linear scale from 0 to 20, where 0
means very low workload and 20 means very high workload.
5.1 Study Overview
This study was conducted on MTurk in two phases. The ﬁrst
phase was similar to the previous experiment except as noted. At
the beginning, we explicitly told participants that they would be
asked to return and use the password in about one week, and they
could take whatever measures they would normally take to remem-
ber and protect the passwords. Also, a concrete creation scenario
was provided to simulate a real-world password generation con-
text. Speciﬁcally, each participant was asked to create an online
account for a bank named “Provident Citizens Bank”. One vari-
ant randomly selected from Control, MneGenEx, and MnePerEx
was assigned to each participant for password generation. For par-
ticipants using MneGenEx and MnePerEx, the sentence creation
and password generation were separated into two pages, such that
the created sentence was not visible to participants during password
generation, in order to mimic the password generation environment
in practice. Participants were allowed to arbitrarily switch back and
forth between the two pages. After the password generation, each
participant was asked to measure the workload spent on creating
the passwords utilizing the NASA-Task Load Index. About half of
the participants were randomly selected to recall the password that
they had just created at the end of the study, to evaluate the impact
of short-term retrieval on password recall 1 week later.
Participants were invited back for the second phase by email.
We sent the invitation emails through MTurk starting from the 6th
day after participants ﬁnished the ﬁrst phase. For those participants
who did not come back to the study, we re-sent the same invitation
email for another two days. In the second phase, participants were
instructed to login to “Provident Citizens Bank” with the password
they created and then to update the password. Each participant
was allowed up to 4 attempts until failure. If a participant could
not recall the password within the ﬁrst 2 attempts, the strategy was
displayed as a hint. Regardless of the performance in the login
process, all participants were asked to evaluate the workload during
password recall by using the NASA-TLX afterwards.
Table 7 lists the general statistics of the study. In the ﬁrst phase,
for each condition, we list the number of participants, average pass-
word creation time, and statistics for short-term password recall (if
applicable) including success rate before and after seeing the strat-
egy as a hint, failure rate after 4 attempts, and time used in pass-
word recall. In the second phase, we list the number (percentage)
of participants that returned to the study; statistics about long-term
password recall, including the number (percentage) of participants
who did not write down passwords; the success/failure rate and av-
erage time used in password recall for those who did not write pass-
words down; the number (percentage) of participants who used the
strategy provided to update their passwords.
5.2 First Phase Results
We recruited 224, 250, and 278 participants for Control,
MneGenEx, and MnePerEx, accordingly, with a total of 752 (346
females). The participants’ ages ranged from 18 to over 50, with
76% between 23 to 50 years. Most participants were college stu-
dents or professionals who had bachelor or higher degrees.
Password creation time. The average time used in password cre-
ation for each variant is listed in Table 7. The password creation
time was signiﬁcantly different among the three conditions. As
expected, participants spent the least time when there was no re-
striction (Control), and time spent in Control is signiﬁcantly less
than that MneGenEx and MnePerEx (p < 0.001). Compared with
MneGenEx, password generation time was shorter in MnePerEx
(t = 2.45, p = 0.014). That’s mainly due to the additional re-
quirement for personalized choice that narrowed down the search
space of sentences and resulted in a faster decision.
Workload. Fig 4(a) shows the average ratings in each subscale of
NASA-TLX for the three variants. Overall, the perceived work-
load was relatively low, with the average ratings for all subscales
being below or close to 10. The workloads required in Control
were lower than that from the two mnemonic strategy variants (p <
0.001). There was no signiﬁcant difference between MneGenEx
and MnePerEx (p = 0.101).
Short-term recall. About half of the participants in each variant
were asked to recall the password at the end of the ﬁrst phase. From
Table 7, we can observe that regardless of the strategy used, almost
all participants could enter the correct password.
5.3 Second Phase Results
Approximately around 70% of participants from each condition
returned to the second phase of the study.
Long-term recall. For participants who came back for the study