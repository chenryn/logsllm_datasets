$ kubectl proxy &
$ curl localhost:8001/api/v1/namespaces/default/services/my-app-svc:80/proxy/
OK
```
我们在本节中构建和演示的管道是在 Kubernetes 中连续交付代码的经典流程。尽管如此，由于不同团队的工作风格和文化不同，为您的团队设计一个量身定制的持续交付管道会提高效率。
# 加深对 PODS 的理解
虽然出生和死亡只是一个生命周期中的一个瞬间，但它们是服务中最脆弱的一点。现实世界中常见的情况，比如将请求路由到一个未准备好的盒子，或者残忍地切断所有与终端机器的空中连接，都是我们想要避免的。因此，即使是 Kubernetes 也为我们处理了大多数事情，我们应该知道如何正确配置它，以便在部署时获得更大的信心。
# 启动 Pod 
默认情况下，一旦 Pod 启动，Kubernetes 就会将 Pod 的状态转换为“正在运行”。如果 pod 在服务后面，端点控制器会立即向 Kubernetes 注册一个端点。稍后 kube-proxy 会观察端点的变化，并相应地向 iptables 添加规则。来自外部世界的请求现在转到了 pods。Kubernetes 使 pod 注册变得非常快，所以变化是请求在应用准备就绪之前到达 pod，尤其是在庞大的软件上。另一方面，如果一个 Pod 在运行中出现故障，我们应该有一个自动的方法来立即移除它。
The `minReadySeconds` field of Deployment and other controllers doesn't postpone a pod from becoming ready. Instead, it delays a pod from becoming available, which is meaningful during a rollout process: a rollout is successful only when all pods are available.
# 活跃度和就绪性探测器
探测器是容器健康的指示器。它通过 kubelet 定期对容器执行诊断操作来判断健康状况:
*   **活跃度** **探头**:表示容器是否还活着。如果一个容器在这个探测器上失败了，kubelet 会杀死它，并可能基于一个容器的`restartPolicy`重新启动它。
*   **准备状态探测器**:指示容器是否准备好接收交通。如果服务后面的 pod 还没有准备好，那么直到 pod 准备好，它的端点才会被创建。
`retartPolicy` tells how Kubernetes treats a pod on failures or terminations. It has three modes: `Always`, `OnFailure`, or `Never`. Default is set to `Always`.
可以配置三种操作处理程序来针对容器执行:
*   `exec`:在容器内部执行定义的命令。退出代码为`0`视为成功。
*   `tcpSocket`:通过 TCP 测试给定端口，如果端口打开则成功。
*   `httpGet`:对目标容器的 IP 地址执行`HTTP GET`。要发送的请求中的头是可定制的。如果状态代码满足:`400 > CODE >= 200`，则该检查被认为是健康的。
此外，有五个参数可以定义探测器的行为:
*   `initialDelaySeconds`:在第一次探查之前，kubelet 应该等待多长时间。
*   `successThreshold`:当连续探测成功次数超过该阈值时，容器被认为是健康的。
*   `failureThreshold`:同上，但定义了负边。
*   `timeoutSeconds`:单个探头动作的时间限制。
*   `periodSeconds`:探测动作之间的间隔。
下面的代码片段演示了就绪探测器的用法，完整的模板在这里:[https://github.com/DevOps-with-·Kubernetes/示例/blob/master/chapter 7/7-3 _ on _ pods/probe . yml](https://github.com/DevOps-with-Kubernetes/examples/blob/master/chapter7/7-3_on_pods/probe.yml)
```
...
 containers:
 - name: main
 image: devopswithkubernetes/my-app:b5
 readinessProbe:
 httpGet:
 path: /
 port: 5000
 periodSeconds: 5
 initialDelaySeconds: 10
 successThreshold: 2
 failureThreshold: 3 
 timeoutSeconds: 1
 command:
...
```
下图说明了探针的行为:
![](img/00114.jpeg)
上面的时间线是一个 Pod 的真正准备状态，下面的另一条线是在 Kubernetes 看来它的准备状态。第一次探测在 pod 创建后 10 秒执行，在两次探测成功后 pod 被视为就绪。几秒钟后，Pod 由于未知原因停止工作，在接下来的三次故障后，它变得没有准备好。尝试部署前面的示例并观察其输出:
```
...
Pod is created at 1505315576
starting server at 1505315583.436334
1505315586.443435 - GET / HTTP/1.1
1505315591.443195 - GET / HTTP/1.1
1505315595.869020 - GET /from-tester
1505315596.443414 - GET / HTTP/1.1
1505315599.871162 - GET /from-tester
stopping server at 1505315599.964793
1505315601 readiness test fail#1
1505315606 readiness test fail#2
1505315611 readiness test fail#3
...
```
在我们的示例文件中，还有另一个 pod `tester`，它不断地向我们的服务发出请求，而我们服务中的日志条目`/from-tester`就是由其测试人员引起的。从测试仪的活动日志中，我们可以观察到来自`tester`的流量在我们的服务未准备就绪后被停止:
```
$ kubectl logs tester
1505315577 - nc: timed out
1505315583 - nc: timed out
1505315589 - nc: timed out
1505315595 - OK
1505315599 - OK
1505315603 - HTTP/1.1 500
1505315607 - HTTP/1.1 500
1505315612 - nc: timed out
1505315617 - nc: timed out
1505315623 - nc: timed out
...
```
由于我们没有在服务中配置活跃度探测器，不健康的容器不会被重新启动，除非我们手动杀死它。因此，一般来说，我们会同时使用两个探针，从而使愈合过程自动化。
# 初始化容器
即使`initialDelaySeconds`允许我们在接收流量之前封锁一个 Pod 一段时间，它仍然是有限的。想象一下，如果我们的应用正在提供一个在初始化时从某个地方获取的文件，那么准备时间可能会因文件大小而有很大不同。因此，初始化容器在这里就派上了用场。
Init 容器是一个或多个容器，它们在应用容器之前启动，并按顺序一个接一个地运行到完成。如果任何一个容器出现故障，它会以一个容器的`restartPolicy`为准，重新开始，直到所有容器都以代码`0`退出。
定义初始化容器类似于常规容器:
```
...
spec:
 containers:
 - name: my-app
 image: 
 initContainers:
 - name: init-my-app
 image: 
...
```
它们的不同之处仅在于:
*   Init 容器没有就绪探测器，因为它们会一直运行到完成
*   初始化容器中定义的端口不会被 pod 前面的服务捕获
*   资源的请求/限制用`max(sum(regular containers), max(init containers))`计算，这意味着如果一个初始化容器设置了比其他初始化容器更高的资源限制以及所有常规容器的资源限制之和，Kubernetes 根据初始化容器的资源限制调度 pod
init 容器的用处不仅仅是阻塞应用容器。例如，我们可以利用它们来配置一个映像，方法是共享一个`emptyDir`卷到 Init 容器和应用容器，而不是构建另一个只在基础映像上运行`awk` / `sed`的映像，在 Init 容器而不是应用容器中安装和使用机密。
# 终止 Pod 
关闭事件的顺序类似于启动 pod 时的事件。接收到删除调用后，Kubernetes 向待删除的 pod 发送`SIGTERM`，pod 的状态变为终止。与此同时，如果 pod 正在支持一项服务，Kubernetes 会删除该 pod 的端点以停止进一步的请求。有时候，有些 PODS 根本不会放弃。这可能是 Pod 不尊重`SIGTERM`，或者仅仅是因为他们的任务没有完成。在这种情况下，Kubernetes 会派一个`SIGKILL`在终止期后强行杀死那些 PODS。在 pod 规范下，周期长度设置在`.spec.terminationGracePeriodSeconds`。尽管如此，尽管 Kubernetes 有回收这种 PODS 的机制，我们仍然应该确保我们的 PODS 可以被正确关闭。
此外，就像启动 pod 一样，这里我们还需要处理一个可能影响我们服务的情况，也就是说，在相应的 iptables 规则被完全移除之前，在 pod 中服务请求的过程被关闭。
# 处理 SIGTERM
优雅的终止并不是一个新的想法，它是编程中的一种常见做法，对于关键业务任务尤其重要。
实施主要包括三个步骤:
1.  添加一个处理程序来捕获终止信号。
2.  执行处理程序中要求的所有操作，如返回资源、释放分发锁或关闭连接。
3.  程序关闭。我们前面的例子演示了这个想法:关闭处理程序`graceful_exit_handler`中`SIGTERM`上的控制器线程。代码可以在这里找到。
事实上，未能顺利退出的常见陷阱不在程序方面:
# SIGTERM 不会被转发到容器进程
在[第 2 章](02.html#1CQAE0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *DevOps with Container* 中，我们了解到在编写 Dockerfile 时有两种形式可以调用我们的程序，即 shell 形式和 exec 形式，运行 shell 形式命令的 shell 在 Linux 容器上默认为`/bin/sh`。让我们看看下面的例子([https://github.com/DevOps-with-·Kubernetes/例子/树/主/第 7 章/7-3 _ on _ pods/manner _ docker](https://github.com/DevOps-with-Kubernetes/examples/tree/master/chapter7/7-3_on_pods/graceful_docker)):
```
--- Dockerfile.shell-sh ---
FROM python:3-alpine
EXPOSE 5000
ADD app.py .
CMD python -u app.py
```
我们知道发送到容器的信号会被容器内的`PID 1`进程捕获，所以让我们构建并运行它。
```
$ docker run -d --rm --name my-app my-app:shell-sh
8962005f3722131f820e750e72d0eb5caf08222bfbdc5d25b6f587de0f6f5f3f 
$ docker logs my-app