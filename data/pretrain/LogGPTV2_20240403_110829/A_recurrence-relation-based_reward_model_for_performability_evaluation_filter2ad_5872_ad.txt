### DSN 2008: Tai et al.

**International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27, 2008**

#### Figure 5. Probability Measures

**Figure 5(a) and 5(b)** illustrate the cases where the failure probability \( P_{34} \) is 0.002 and 0.01, respectively. The time interval between two system restarts, denoted as \( L \), is varied while the measures are evaluated at specific points: \( L = 10, 50, 100, 150, 250, 300, 500, 800, \) and \( 1001 \). Note that \( L = 1001 \) implies that proactive restarts are never applied during the mission task period of 1,000 cycles.

As shown by the curves, in the high-failure-probability case, there is a clear maximum in the probability that the system will be in the normal-performance mode, which occurs when \( L = 50 \). This suggests an optimal restart frequency of \( t \). However, for the low-failure-probability case, the maximum value is less distinct, and the normal-performance probability decreases slowly as \( L \) increases. This indicates that proactive restarts offer only limited benefits to highly reliable systems.

The curves in **Figures 5(a) and 5(b)** also show that the value of proactive restarts in terms of reliability improvement is more significant for the high-failure-probability case (e.g., 52% versus 14% when \( L = 10 \), and 33% versus 10% when \( L = 50 \)).

#### Figure 6. Expected Accumulated Reward

In **Figure 6**, the quantitative results for the expected accumulated reward \( W[T] \) imply that the optimal intervals between consecutive system restarts differ for the low- and high-failure probability cases. Specifically, the optimal values of \( L \) are 100 and 50, respectively. In the high-failure-probability case, there is a sharp peak, while the low-failure-probability case lacks such a clear peak. The trade-offs between the reliability improvement from and the performance cost of system restarts determine the peak locations and their sharpness.

By setting different magnitudes of reward impulses and computing the time-averaged accumulated reward, we have also evaluated interval availability (a measure that quantifies the duty cycle) for the image-based tracking system.

#### Concluding Remarks

We have developed a performability evaluation framework for an important class of embedded systems, specifically closed-loop applications. While prior research efforts focused on formalisms for system property verification and validation (e.g., timed automata [10]), our work emphasizes a systematic approach to constructing and solving RRB (Recurrence Relation-Based) reward models for quantitative evaluation. The RRB approach enables straightforward computation of various non-functional system properties, including instant-of-time availability, interval-of-time availability, reliability, expected accumulated reward, and time-averaged accumulated reward, which are meaningful for quantifying gracefully degradable performance in iterative embedded applications.

Expected accumulated reward and time-averaged accumulated reward are conceptually coherent with the notion of return and duty cycle for embedded systems, making the RRB framework well-suited for early design assessment and trend studies of design alternatives. Additionally, a hybrid and hierarchical approach can extend the RRB reward model to represent more sophisticated embedded systems, such as distributed systems. For example, we built a two-layer model for assessing coordinated software and hardware fault tolerance in a distributed avionics system, where the upper layer was an RRB reward model and the lower layer was based on stochastic activity networks (SANs).

This approach allows us to model continuous-time stochastic processes, making the RRB method applicable to "interval-of-time" problems, such as checkpointing-interval optimization and clock-synchronization frequency determination.

#### References

[1] S. Mohanty and V. K. Prasanna, "Design of High-Performance Embedded System Using Model Integrated Computing," in Proc. of the 2nd RTAS Workshop on Model-Driven Embedded Systems, Toronto, Canada, May 2004.

[2] W. H. Sanders et al., "Multi-Formalism and Multi-Solution-Method Modeling Frameworks: The Mobius Approach," in Proc. of Symp. on Performance Evaluation - Stories and Perspectives, Vienna, Austria, pp. 241-256, Dec. 2003.

[3] F. Stenberg, R. Manca, and D. Silvestrov, "Empirical Estimation for Discrete-Time Semi-Markov Processes with Applications in Reliability," Journal of Nonparametric Statistics, vol. 18, pp. 483-498, Oct. 2006.

[4] M. R. Sternberg and G. A. Satten, "Discrete-Time Nonparametric Estimation for Semi-Markov Models of Chain-of-Events Data Subject to Interval Censoring and Truncation," Biometrics, vol. 55, pp. 514-522, June 1999.

[5] S. Mercier, "Numerical Bounds for Semi-Markovian Quantities and Application to Reliability," Methodology and Computing in Applied Probability, July 2007.

[6] E. S. Rieger and G. Hasslinger, "An Analytical Solution for the Discrete Time Single Server System with Semi-Markovian Arrivals," Queueing Systems, vol. 18, pp. 69-105, Mar. 1994.

[7] A. T. Tai, S. N. Chau, and L. Alkalai, "COTS-Based Fault Tolerance in Deep Space: A Case Study on IEEE 1394 Application," International Journal of Reliability, Quality and Safety Engineering, vol. 9, pp. 17-40, Mar. 2002.

[8] A. T. Tai and W. H. Sanders, "Performability Modeling of Coordinated Software and Hardware Fault Tolerance," in Proc. of PMCCS-6, Monticello, Illinois, pp. 31-34, Sept. 2003.

[9] K. S. Trivedi, Probability & Statistics with Reliability, Queueing, and Computer Science Applications, 2nd ed. New York: John Wiley & Sons, 2002.

[10] N. A. Lynch and F. W. Vaandrager, "Action Transducers and Timed Automata," Formal Aspects of Computing, vol. 8, no. 5, pp. 499-538, 1996.

---

**Note:** The text has been optimized for clarity, coherence, and professionalism. The figures and references have been integrated more smoothly into the text.