strategies lead to almost the same performance on the FTSPM
and the baseline SRAM SPM.
V. SIMULATION SETUP AND RESULTS
To evaluate the proposed approach, FaCSim, a cycle-
accurate ARM processor simulator is used [25]. In the ex-
periments, FTSPM has been compared to two baselines SPM
structures, i.e., a pure SRAM-based structure protected by
SEC-DED and a pure STT-RAM-based structure. A pure STT-
RAM-based structure is completely immune against radiation-
induced soft errors. The Ô¨Årst baseline suffers from high static
power and vulnerability to MBUs and the second one suffers
from the endurance as well as energy consumption and the
latency of write operations. The detail characteristics of each
structure are presented in Table IV.
The latency and the energy consumption of the memory
subsystem are calculated using NVSIM [26]. Synopsis Design
Compiler c‚Éù
[27] is also used to measure the latency and
energy consumption of the parity and SEC-DED combinational
circuits. MiBench benchmark suite [28] has been used as the
workload. Performance, energy consumption, endurance, and
reliability of the system which runs this benchmark suite are
measured to evaluate the efÔ¨Åciency of the proposed method.
Dynamic energy consumption per access of each region
is depicted in Fig. 3, while the static power consumption of
the proposed method, baseline SRAM, and baseline STT-RAM
are 7.1 mW, 15.8 mW, and 3 mW, respectively. As mentioned
in section III, the reliability of the SPM is measured based
on Architectural Vulnerability Factor (AVF) [24]. To measure
Fig. 3. Dynamic energy consumption per access in different structures
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:05 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV.
CONFIGURATION PARAMETERS USED IN ùêπ ùëéùê∂ùëÜùëñùëö
Baseline pure SRAM SPM
Baseline pure NVM SPM
Type
Size
8KB
16KB
Read
Latency
1 Clock
2 Clocks
Write
Latency
1 Clock
2 Clocks
Cache Inst./Data
Inst. SPM
Data SPM
(1)
(3)
(3)
Read
Latency
1 Clock
1 Clock
Write
Latency
1 Clock
10 Clocks
Type
Size
8KB
16KB
(1)
(4)
(4)
16KB
2 Clocks
2 Clocks
16KB
1 Clock
10 Clocks
Type
Size
(1)
(4)
(2)
(3)
(4)
8KB
16KB
2KB
2KB
12KB
FTSPM
Read
Latency
1 Clock
1 Clock
1 Clock
2 Clocks
1 Clock
(4): STT-RAM
Write
Latency
1 Clock
10 Clocks
1 Clock
2 Clocks
10 Clocks
(1): Unprotected SRAM
(2): Parity protected SRAM
(3): SEC-DED protected SRAM
Fig. 4. Distribution of read/write operations alongside FTSPM structure
the vulnerability of the SPM, vulnerable intervals of each
block is multiplied by the probability of MBUs in the case of
particles strike, which is reported in [6]. Fig. 4 illustrates the
read/write distribution of each benchmark alongside FTSPM
structure. Fig. 5 presents the vulnerability of FTSPM and the
pure SRAM SPM. It is noteworthy that the pure STT-RAM
SPM is supposed to be immune against soft errors.
According to Fig. 5, the vulnerability of the pure SRAM
SPM is about 7x more than FTSPM. As it can be observed
in Fig. 5, the vulnerability of the baseline SRAM structure
is a constant value and it is independent from the behavior
of the workload. It was revealed that this observation relies
on the distribution of radiation induced soft errors across the
surface of uniform baseline SRAM structure and non-uniform
FTSPM structure. As it was anticipated, the shortcoming of
ECC method against MBUs resulted in higher vulnerability
of the baseline SRAM structure, while the robustness of the
NVM part of FTSPM structure against MBUs and the proper
distribution of more vulnerable blocks across more reliable
area in FTSPM resulted in less SPM vulnerability.
Static energy consumption of the baseline structures and
FTSPM is depicted in Fig. 6. As expected, the static energy
consumption of FTSPM is signiÔ¨Åcantly less than that of the
pure SRAM SPM due to replacement of a large fraction of
SRAM cells by STT-RAM cells; however, the static energy
consumption of FTSPM is higher than that of pure STT-RAM
SPM due to high static energy of included SRAM cells. Static
energy consumption of the proposed hybrid SPM and pure
Fig. 5. Vulnerability results for different structures
STT-RAM SPM is about 45% and 25% less than that of the
of the pure SRAM SPM, respectively.
On the other hand, as presented in Fig. 7, the dynamic
energy consumption of FTSPM is 47% less than that of the
pure SRAM SPM and 77% less than that of pure STT-RAM
SPM. Besides, lower read energy and higher write energy of
STT-RAM cells compared to SRAM cells and the intelligent
distribution of program blocks in SPM regions using the
FTSPM mapping algorithm made the FTSPM hybrid structure
considerably more dynamic energy efÔ¨Åcient than the pure SPM
and the pure STT-RAM SPM baseline.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:05 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 6. Static energy consumption results for different structures
Fig. 8. Endurance results for different structures
the pure STT-RAM-based SPM baseline, FTSPM increases the
endurance of SPM by three orders of magnitude and decreases
the dynamic energy consumption up to 23%. Moreover, the
performance overhead of FTSPM is less than 1%.
REFERENCES
[1] P. Marwedel, Embedded systems design, Second edition, Springer,
Fig. 7. Dynamic energy consumption results for different structures
[2]
2010.
International Technology Road-map for Semiconductors
(ITRS),
‚ÄúERD ERM 2010 Ô¨Ånal report memory assessment,‚Äù Final report, 2010.
[3] F. Li, G. Chen, M. Kandimer, ‚ÄúImproving scratch-pad memory reliabil-
ity through compiler-guided data block duplication,‚Äù Proc. IEEE/ACM
International Conference on Computer-Aided Design (ICCAD 05), pp.
1002-1005, USA, November 6-10, 2005.
I. Lee, J. Leung, S. Son, Handbook of real-time and embedded sys-
tems, First edition, Chapman and Hall/CRC Computer and Information
Science Series, 2008.
[4]
Fig. 8 illustrates the endurance of FTSPM and the pure
STT-RAM SPM baseline. Fig. 8 conÔ¨Årms that by distributing
program blocks between STT-RAM and SRAM regions of
SPM, the proposed algorithm enhances the STT-RAM en-
durance of the hybrid SPM compared to a pure STT-RAM
SPM by three orders of magnitude. Note that the endurance of
the pure SRAM SPM is not reported because it is supposed that
there is no endurance limitation in the SRAM cells. Finally,
due to the strategy of the FTSPM algorithm which tries to
decrease the write aggregation of program alongside STT-
RAM cells, the simulation results shows that the performance
overhead of the proposed method is negligible in comparison
to pure SRAM-based SPM.
[5] H. Takase, H. Tomiyama, H. Takada, ‚ÄúPartitioning and allocation of
scratch-pad memory for priority-based preemptive multi-task systems,‚Äù
Proc. Design, Automation and Test in Europe (DATE 10), pp. 1124-
1129, Germany, March 8-12, 2010.
[6] A. Dixit, A. Wood, ‚ÄúThe impact of new technology on soft error rates,‚Äù
Proc. IEEE International Reliability Physics Symposium (IRPS 11), pp.
5B.4.1-5B.4.7, USA, April 10-14, 2011.
[7] H. Farbeh, M. Fazeli, F. Khosravi, S. G. Miremadi, ‚ÄúMemory mapped
SPM: protecting instruction scratchpad memory in embedded systems
against soft errors,‚Äù Proc. European Dependable Computing Conference
(EDCC 12), pp. 218-226, Romania, May 8-11, 2012.
[8] L. A. D. Bathen, N. D. Dutt, ‚ÄúE-RoC: embedded RAIDs-on-chip for
low power distributed dynamically managed reliable memories,‚Äù Proc.
Design, Automation and Test in Europe Conference and Exhibition
(DATE 11) , pp. 1-6, France, March 14-18, 2011.
VI. CONCLUSION
This paper proposed a method which called FTSPM to
protect SPM against soft errors. FTSPM utilizes a hybrid
STT-RAM/SRAM structure for SPM in order to improve the
reliability of SPM. FTSPM also employs a reliability-aware
mapping algorithm to allocate SPM hybrid regions to program
blocks. According to the simulation results, vulnerability of
the FTSPM structure to soft error is about 7x less than
that of the pure SRAM-based SPM baseline, in addition to
about 55% and 47% reduction in static energy and dynamic
energy consumption, respectively. Furthermore compared to
[10]
[11]
[9] S. Guangyu, E. Kursun, J. A. Rivers, X. Yuan, ‚ÄúExploring the vulner-
ability of CMPs to soft errors with 3D stacked non-volatile memory,‚Äù
Proc. IEEE International Conference on Computer Design (ICCD 11),
pp. 366-372, USA, October 9-12, 2011.
J. Hu, C. J. Xue, Q. Zhuge, W. C. Tseng, E. H. M. Sha, ‚ÄúTowards
energy efÔ¨Åcient hybrid on-chip scratch pad memory with non-volatile
memory,‚Äù Proc. Design, Automation and Test in Europe (DATE 11),
pp. 1-6, France, March 14-18, 2011.
I. M. Aouad, R. Schott, O. Zendra, ‚ÄúA tabu search heuristic for scratch-
pad memory management,‚Äù Proc. International Conference on Software
Engineering and Technology (ICSET 10), pp. 386-390, Italy, April 28-
30, 2010.
I. M. Aouad, O. Zendra, ‚ÄúA survey of scratch-pad memory manage-
ment techniques for low-power and low-energy,‚Äù Proc. International
Workshop on Implementation, Compilation, Optimization of Object-
[12]
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:05 UTC from IEEE Xplore.  Restrictions apply. 
Oriented Languages, Programs and Systems (ICOOOLPS 07), pp. 31-
38, Germany, July 30, 2007.
[13] D. Yoon, M. Erez, ‚Äúmemory mapped ECC: low-cost error protection
for last level caches,‚Äù Proc. International Symposium on Computer
Architecture (ISCA 09), pp. 116-127, USA, June 24-29, 2009.
[14] D. F. Heidel, P. W. Marshall, J. A. Pellish, K. P. Rodbell, K. A. LaBel, J.
R. Schwank, S. E. Rauch, M. C. Hakey, M. D. Berg, C. M. Castaneda,
P. E. Dodd, M. R. Friendlich, A. D. Phan, C. M. Seidleck, M. R.
Shaneyfelt, M. A. Xapsos, ‚ÄúSingle-event upsets and multiple-bit upsets
on a 45 nm SOI SRAM,‚Äù IEEE Transactions on Nuclear Science (TNS
09), vol. 56, no. 6, pp. 3499-3504, December, 2009.
[15] S. Steinke, L. Wehmeyer, B. S. Lee, P. Marwedel, ‚ÄúAssigning program
and data objects to scratchpad for energy reduction,‚Äù Proc. Design
Automation and Test in Europe (DATE 02), pp. 409-415, France, March
4-8, 2002.
[16] A. Janapsayta, S. Parameswaran, A. Ignjatovic, ‚ÄúHardware/software
managed scratchpad memory for embedded system,‚Äù Proc. International
Conference on Computer-Aided Design (ICCAD 04), pp. 370-377,
USA, November 7-11, 2004.
[17] L. Li, L. Gao, J. Xue, ‚ÄúMemory coloring: a compiler approach for
scratchpad memory management,‚Äù Proc. International Conference on
Parallel Architectures and Compilation Techniques (PACT 05), pp. 329-
338, USA, September 17-21, 2005.
[18] K. Swaminathan, R. Pisolkar, X. Cong, V. Narayanan, ‚ÄúWhen to forget:
a system-level perspective on STT-RAMs,‚Äù Proc. Asia and South PaciÔ¨Åc
Design Automation Conference (ASP-DAC 12), pp. 311-316, Australia,
January 30- February 2, 2012.
[19] M. Wang, Y. Wang, D. Liu, Z. Shao, ‚ÄúImproving the reliability of
embedded systems with cache and SPM,‚Äù Proc. IEEE 6th International
Conference on Mobile Adhoc and Sensor Systems (MASS 09), pp.
825-830, China, October 12-15, 2009.
[20] M. Damavandpeyma, S. Stuijk, T. Basten, M. Geilen, H. Corporaal,
‚ÄúThermal-aware scratchpad memory design and allocation,‚Äù Proc. IEEE
International Conference on Computer Design (ICCD 10), pp. 118-124,
Netherlands, October 3-6, 2010.
[21] T. Perez, A. F. Cesar, De-Rose, ‚ÄúNon-volatile memory: emerging
technologies and their impacts on Memory Systems,‚Äù Technical report,
PontiÔ¨Åcia Universiadae, Brazil, September, 2010.
[22] S. Rodriguez, B. Jacob, ‚ÄúEnergy/power breakdown of pipelined
nanometer caches (90nm/65nm/45nm/32nm),‚Äù Proc. International Sym-
posium on Low Power Electronics and Design (ISLPED 06), pp. 25-30,
Germany, October 4, 2006.
[23] V. Chandra, R. Aitken, ‚ÄúImpact of technology and voltage scaling on the
soft error susceptibility in nanoscale CMOS,‚Äù Proc. IEEE International
Symposium on Defect and Fault Tolerance of VLSI system (DFT 08),
pp. 114-122, USA, October 1-3, 2008.
[25]
[24] S. S. Mukherjee, C. T. Weaver, J. Emer, S. K. Reinhardt, T. Austin,
‚ÄúMeasuring architectural vulnerability factors,‚Äù Proc. IEEE Micro, pp.
70-75, USA, December 3-5, 2003.
J. Lee, J. Kim, C. Jang, S. Kim, B. Egger, K. Kim, S. Y. Han,
‚ÄúFaCSim: a fast and cycle-accurate architecture simulator for embedded
systems,‚Äù Proc. ACM SIGPLAN/SIGBED International Conference on
Languages, Compilers, and Tools for Embedded Systems, pp. 89-99,
USA, June 12-13, 2008.
[26] X. Dong, C. Xu, Y. Xie, N. P. Jouppi, ‚ÄúNVSim: a circuit-level
performance, energy, and area model for emerging nonvolatile memory,‚Äù
IEEE Transactions on Computer-Aided Design of Integrated Circuits
and Systems (TCAD 12), vol. 31, no. 7, pp. 994-1007, July, 2012.
[27] Synopsys Design Compiler, www.synopsys.com, 2010.
[28] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T . Mudge,
R. B. Brown, ‚ÄúMibench: A free, commercially representative embed-
ded benchmark suite,‚Äù Proc. International Workshop of the Workload
Characterization (WWC 01), pp. 314, USA, December 2, 2001.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:45:05 UTC from IEEE Xplore.  Restrictions apply.