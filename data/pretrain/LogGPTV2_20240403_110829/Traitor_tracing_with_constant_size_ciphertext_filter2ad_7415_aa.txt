title:Traitor tracing with constant size ciphertext
author:Dan Boneh and
Moni Naor
Traitor Tracing with Constant Size Ciphertext
[Extended Abstract]
∗
†
Dan Boneh
Stanford University
PI:EMAIL
ABSTRACT
A traitor tracing system enables a publisher to trace a pirate
decryption box to one of the secret keys used to create the
box. We present a traitor tracing system where ciphertext
size is “constant,” namely independent of the number of users
in the system and the collusion bound. A ciphertext in our
system consists of only two elements where the length of
each element depends only on the security parameter. The
down side is that private-key size is quadratic in the collusion
bound. Our construction is based on recent constructions for
ﬁngerprinting codes.
Categories and Subject Descriptors
E.3 [Data encryption]:
General Terms
Security
Keywords
traitor tracing, ﬁngerprinting codes, encryption
1.
INTRODUCTION
Traitor tracing systems, introduced by Chor, Fiat, and
Naor [8], help content distributors identify pirates who vio-
late copyright restrictions. To be concrete, consider a satel-
lite radio system (such as XM Satellite Radio) where broad-
casts should only be played on certiﬁed radio receivers. We
let n denote the total number of radio receivers and assume
that each receiver contains a unique secret key: radio re-
ceiver number i contains secret key sk i. Broadcasts are en-
crypted using a broadcast key bk and any certiﬁed receiver
∗
The full version of this paper is available at [2]
†
Supported by NSF and the Packard Foundation.
‡
Incumbent of the Judith Kleeman Professorial Chair. Sup-
ported by a grant from the Israel Science Foundation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
‡
Moni Naor
Weizmann Institute of Science
PI:EMAIL
can decrypt using its secret key. Certiﬁed players, of course,
can enforce digital rights restrictions such as “do not copy”
or “play once”.
Clearly a pirate could hack a number of certiﬁed players
and extract their secret keys. The pirate could then build a
pirate decoder PD that will extract the cleartext content and
ignore any relevant digital rights restrictions. Even worse,
the pirate can make its pirate decoder widely available so
that anyone can extract the cleartext content for themselves.
DeCSS [17], for example, is a widely distributed program for
decrypting encrypted DVD content.
This is where traitor tracing is helpful — when the pirate
decoder PD is found, the distributor can run a tracing al-
gorithm that interacts with the pirate decoder and outputs
the index i of at least one of the keys sk i that the pirate
used to create the pirate decoder. The distributor can then
choose to take action against the owner of this sk i.
A precise deﬁnition of traitor tracing systems is given in [4]
and is reproduced here in Appendix A. For now we give some
intuition that will help explain our results. A traitor tracing
system consists of four algorithms Setup, Encrypt, Decrypt,
and Trace. The Setup algorithm generates the broadcaster’s
key bk , a tracing key tk , and n recipient keys sk 1, . . . , sk n.
The Encrypt algorithm encrypts the content using bk and
the Decrypt algorithm decrypts using one of the sk i. The
tracing algorithm Trace is the most interesting — it takes tk
as input and interacts with a pirate decoder, treating it as
a black-box oracle. It outputs the index i ∈ {1, . . . , n} of at
least one key sk i that was used to create the pirate decoder.
We describe our system as a public-key scheme, namely
bk is public and anyone who knows it can create broadcast
messages (we could equally have described it as a secret
key scheme). As in many traitor tracing constructions, the
tracing key tk in our system must be kept secret. Our tracing
algorithm is black-box: it need not look at the internals of
the pirate decoder PD and only interacts with PD as if it
were a decryption oracle.
A traitor tracing system is said to be t-collusion resistant
if tracing succeeds as long as the pirate has fewer than t
user keys at his disposal. If t = n the system is said to be
fully collusion resistant. While ciphertext-size in our system
is independent of n or t, private-key size is quadratic in
t. More precisely, our basic system provides the following
parameters as a function of the total number of users n,
collusion bound t, and security parameter λ:
CT-len = O(λ)
SK-length = O(t2λ2
log n)
Tracing-time = O(t2λ log n)
Setting t ← n gives the parameters for full collusion resis-
tance. Note that ciphertext length is independent of n or t.
Related work
Traitor tracing systems have been studied extensively. We
refer to [4] for various properties of traitor tracing systems.
Traitor tracing constructions generally fall into two cate-
gories: combinatorial, as in [8, 25, 34, 35, 12, 13, 9, 30, 1,
33, 31, 24], and algebraic, as in [21, 3, 26, 20, 10, 23, 37,
7, 4, 6]. The broadcaster’s key bk in combinatorial systems
can be either secret or public. Algebraic traitor tracing use
public-key techniques and are often more eﬃcient than the
public-key instantiations of combinatorial schemes. In these
systems the ciphertext length (for short messages) depends
linearly on the collusion bound t. One exception is [4] which
is fully collusion resistant with ciphertext size O(
n).
√
Some systems, including ours, only provide tracing capa-
bilities. Other systems [26, 24, 16, 14, 10, 6] combine tracing
with broadcast encryption to obtain trace-and-revoke fea-
tures — after tracing, the distributor can revoke the pirate’s
keys without aﬀecting any other legitimate decoder.
Kiayias and Yung [20] and others [7, 11] describe a black-
box tracing system that achieves constant rate for long mes-
sages, where rate is measured as the ratio of ciphertext
length to plaintext length. For full collusion resistance, how-
ever, the ciphertext size is linear in the number of users n.
For comparison, our system generates ciphertexts of con-
stant size. It can provide constant rate (rate = 1) for long
messages by using hybrid encryption (i.e. encrypt a short
message-key using the traitor tracing system and encrypt
the long data by using a symmetric cipher with the message-
key).
In most traitor tracing systems, including ours, the tracing
key tk must be kept secret. Some systems, however, support
public key tracing [27, 28, 38, 19, 7].
Stateful vs. Stateless decoders: a stateless decoder is one
that does not keep state between decryptions. For instance,
software decoders, such as DeCSS, cannot keep any state.
However, pirate decoders embedded in tamper resistant hard-
ware, such as a pirate cable box, can keep state between
successive decryptions. When the decoder detects that it is
being traced it could shutdown and refuse to decrypt fur-
ther inputs. A software decoder cannot do that. Kiayias
and Yung [18] and others [22, 29, 32] show how to convert
tracing systems for stateless decoders into tracing systems
for stateful decoders by embedding robust watermarks in
the content. Consequently, most tracing systems in the lit-
erature, as do we, focus on the stateless settings.
2. COLLUSION RESISTANT
FINGERPRINTING CODES
Since our construction is based on collusion resistant ﬁn-
gerprinting codes, we ﬁrst review their deﬁnition [5]. Col-
lusion resistant codes are designed for ﬁngerprinting digital
content, but are also used in traitor tracing systems (e.g. [8,
20, 11, 32]). Here we will use them to construct a traitor
tracing system with short ciphertexts. We are only inter-
ested in binary codes, namely codes deﬁned over {0, 1} (as
opposed to a larger alphabet).
• For a word ¯w ∈ {0, 1}(cid:2) we write ¯w = w1 . . . w(cid:2) where
wi ∈ {0, 1} is the ith letter of ¯w for i = 1, . . . , (cid:3).
• Let W = { ¯w(1), . . . , ¯w(t)} be a set of words in {0, 1}(cid:2).
We say that a word ¯w ∈ {0, 1}(cid:2) is feasible for W if
for all i = 1, . . . , (cid:3) there is a j ∈ {1, . . . , t} such that
¯wi = ¯w(j)
. For example, if W consists of the two
words:
i
„
«
´
`
´˜
0
1
are feasible
0 1 0 1 0
0 0 1 1 1
`
´`
ˆ
0
0
1
0
1
1
then all words of the form
for W .
• For a set of words W ⊆ {0, 1}(cid:2) we say that the feasible
set of W , denoted F (W ), is the set of all words that
are feasible for W .
• For a set of words W ⊆ {0, 1}(cid:2) we say that position
j ∈ {1, . . . , (cid:3)} is critical for W if the words in W are
all ‘0’ or all ‘1’ at position j.
A ﬁngerprinting code is a pair of algorithms (G, T ) de-
ﬁned as follows:
• Algorithm G, called a code generator, is a prob-
abilistic algorithm that takes a pair (n, ) as input,
where n is the number of words to output and  ∈ (0, 1)
is a security parameter. The algorithm outputs a pair
(Γ, tk ). Here Γ (called a code) contains n words in
{0, 1}(cid:2) for some (cid:3) > 0 (called the code length). The
output tk is called the tracing key.
• Algorithm T , called a tracing algorithm, is a deter-
ministic algorithm that takes as input a pair ( ¯w∗, tk )
where ¯w∗ ∈ {0, 1}(cid:2). The algorithm outputs a subset S
of {1, . . . , n}. Informally, elements in S are “accused”
of creating the word ¯w∗
.
We require that G and T run in polynomial time in n log(1/).
Security of a ﬁngerprinting code (G, T ) is deﬁned using a
game between a challenger and an adversary. Let n be an
integer and  ∈ (0, 1). Let C be a subset of {1, . . . , n}. Both
the challenger and adversary are given (n, , C) as input.
Then the game proceeds as follows:
1. The challenger runs G(n, ) to obtain (Γ, tk )
where Γ = { ¯w(1), . . . , ¯w(n)}. It sends the set
W := { ¯w(i)}i∈C to the adversary.
2. The adversary outputs a word ¯w∗ ∈ F (W ).
We say that the adversary A wins the game if
T ( ¯w∗, tk ) is empty or not a subset of C.
Let CR Adv[(G(n, ), T, C),A] be the probability
that A wins the game.
Deﬁnition 1. We say that a ﬁngerprinting code (G, T ) is
fully collusion resistant if for all adversaries A, all n > 0,
all  ∈ (0, 1), and all subsets C ⊆ {1, . . . , n}, we have that
CR Adv[(G(n, ), T, C),A]  t, all  ∈ (0, 1), and all subsets C ⊆
{1, . . . , n} of size at most t, we have
CR Adv[(G(n, ), T, C),A] < 
Full collusion resistance
t-collusion resistance
(cid:3) = O
(cid:3) = O
Boneh-Shaw [5]
Tardos [36]
´
n3 log(n/)
`
`
t4 log(n/) log(1/)
´
´
´
(cid:3) = O
(cid:3) = O
n2 log(n/)
t2 log(n/)
Table 1: Lengths of ﬁngerprinting codes obtained by running G(n, )
`
`
´
2.1 Known results on collusion resistant codes
Boneh and Shaw [5] constructed a fully collusion resis-
tant ﬁngerprinting code as well as t-collusion resistant codes.
Tardos [36] improved these results by constructing shorter
codes. The resulting code lengths are summarized in Ta-
ble 1. Throughout the paper, except for Section 4, we will
primarily rely on the Tardos construction.
We note that Chor et al. [8] constructed collusion resistant
codes, but their codes are deﬁned over a much larger alpha-
bet, namely Γ is a subset of {1, . . . , t}(cid:2) rather than {0, 1}(cid:2).
For the application we have in mind it is crucial that we use
a ﬁngerprinting code deﬁned over a binary alphabet. Other
constructions over large alphabets include [34, 35, 13, 33,
31]
3. A TRAITOR-TRACING SYSTEM WITH
SHORT CIPHERTEXTS
Let E := (Genc, Eenc, Denc) be a public-key encryption
system. We let Mλ denote the ﬁnite message space of E
with security parameter λ. Throughout the paper we assume
that its size |Mλ| is ﬁnite, but exponential in the security
parameter. For simplicity we write M rather than Mλ.
Let (Gtt , Ttt ) be a ﬁngerprinting code. Our traitor tracing
system TT works as follows: (traitor tracing systems are
deﬁned in Appendix A)
Setup(n, λ): Let  := 1/2λ. The algorithm works as follows:
1. Generate a ﬁngerprinting code by running
R← Gtt (n, ).
Let Γ = {w(1), . . . , w(n)} ⊆ {0, 1}(cid:2).
(Γ, tk )
2. Generate 2(cid:3) public/secret key pairs by running Genc
2(cid:3) times:
for i = 1, . . . , (cid:3) and j = 0, 1 do:
R← Genc(λ)
(pk [i, j], sk [i, j])
3. For i = 1, . . . , n deﬁne
sk i ←`
4. Deﬁne bk ←`
¯w(i),
sk [1, w(i)
1 ], . . . , sk [(cid:3), w(i)
(cid:2) ]
An example secret key is shown in Figure 1.
pk [1, 0], pk [1, 1], . . . , pk [(cid:3), 0], pk [(cid:3), 1]
´
.
´
5. Output bk , tk , and (sk 1, . . . , sk n)
Encrypt(bk , m): Choose random j R← {1, . . . , (cid:3)}
and compute
c0
R← Eenc(pk [j, 0], m),
R← Eenc(pk [j, 1], m)
output c ← (j, c0, c1). Note that the ciphertext is short.
c1
`
Decrypt
i, sk i, (j, c0, c1)
if w(i)
j = 0 output Denc(sk [j, 0], c0);
otherwise output Denc(sk [j, 1], c1).
:
Including the index j in the ciphertext is done for conve-
nience. In principle, j can be removed at the cost of forcing
the decryptor to try all 1 ≤ j ≤ n until a j is found for
which decryption succeeds (assuming the encryption system
E embeds an integrity tag in ciphertexts). Clearly this is
undesirable in all but extreme cases where the cost of band-
width is much higher than the cost of computation.
The tracing algorithm: intuition
Suppose the adversary obtains a set of t secret keys and
uses them to build a pirate decoder PD. For now let us