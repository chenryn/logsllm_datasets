我们即能使用时间的索引，也能使用文本的索引, 还可以使用partial index, 表达式索引来达到特殊的目的。   
## MySQL 5.7 如何处理闰秒?  
MySQL目前还不支持60秒的写法，闰秒时必须使用unix time来表示时间，否则会报错。  
例如 '2008-12-31 23:59:60' 这种写法会报错    
如下  
http://dev.mysql.com/doc/refman/5.7/en/time-zone-leap-seconds.html  
Leap second values are returned with a time part that ends with :59:59.   
This means that a function such as NOW() can return the same value for two or three consecutive seconds during the leap second.   
It remains true that literal temporal values having a time part that ends with :59:60 or :59:61 are considered invalid.  
```  
mysql> CREATE TABLE t1 (  
         a INT,  
         ts TIMESTAMP DEFAULT NOW(),  
         PRIMARY KEY (ts)  
       );  
Query OK, 0 rows affected (0.01 sec)  
mysql> -- change to UTC  
mysql> SET time_zone = '+00:00';  
Query OK, 0 rows affected (0.00 sec)  
mysql> -- Simulate NOW() = '2008-12-31 23:59:59'  
mysql> SET timestamp = 1230767999;  
Query OK, 0 rows affected (0.00 sec)  
mysql> INSERT INTO t1 (a) VALUES (1);  
Query OK, 1 row affected (0.00 sec)  
mysql> -- Simulate NOW() = '2008-12-31 23:59:60'  
mysql> SET timestamp = 1230768000;  
Query OK, 0 rows affected (0.00 sec)  
mysql> INSERT INTO t1 (a) VALUES (2);  
Query OK, 1 row affected (0.00 sec)  
mysql> -- values differ internally but display the same  
mysql> SELECT a, ts, UNIX_TIMESTAMP(ts) FROM t1;  
+------+---------------------+--------------------+  
| a    | ts                  | UNIX_TIMESTAMP(ts) |  
+------+---------------------+--------------------+  
|    1 | 2008-12-31 23:59:59 |         1230767999 |  
|    2 | 2008-12-31 23:59:59 |         1230768000 |  
+------+---------------------+--------------------+  
2 rows in set (0.00 sec)  
mysql> -- only the non-leap value matches  
mysql> SELECT * FROM t1 WHERE ts = '2008-12-31 23:59:59';  
+------+---------------------+  
| a    | ts                  |  
+------+---------------------+  
|    1 | 2008-12-31 23:59:59 |  
+------+---------------------+  
1 row in set (0.00 sec)  
```  
MySQL 不支持60秒的写法，如果用户的应用程序使用UTC的话，就会因为闰秒产生问题。    
```  
mysql> -- the leap value with seconds=60 is invalid  
mysql> SELECT * FROM t1 WHERE ts = '2008-12-31 23:59:60';  
Empty set, 2 warnings (0.00 sec)  
To work around this, you can use a comparison based on the UTC value actually stored in column, which has the leap second correction applied:  
mysql> -- selecting using UNIX_TIMESTAMP value return leap value  
mysql> SELECT * FROM t1 WHERE UNIX_TIMESTAMP(ts) = 1230768000;  
+------+---------------------+  
| a    | ts                  |  
+------+---------------------+  
|    2 | 2008-12-31 23:59:59 |  
+------+---------------------+  
1 row in set (0.00 sec)  
```  
## 参考  
https://en.wikipedia.org/wiki/Universal_Time  
https://en.wikipedia.org/wiki/Coordinated_Universal_Time  
https://en.wikipedia.org/wiki/Unix_time  
https://en.wikipedia.org/wiki/Solar_time  
https://en.wikipedia.org/wiki/Leap_second  
https://time.is/time_zone_news/2016_will_end_with_a_leap_second  
https://time.is/leapsecond  
http://stackoverflow.com/questions/16539436/unix-time-and-leap-seconds  
https://en.wikipedia.org/wiki/Unix_time  
https://www.postgresql.org/docs/9.1/static/functions-datetime.html  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=675684fc23fd4287966694b1f108846bc14b6895  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=4fd8d6b3e77eb00cfd7bb8d3d130b147ba0d60f3   
https://www.postgresql.org/message-id/flat/84BC7AB0D621A74893EC9C9E151293B022653DDD%40ESESSMB207.ericsson.se#PI:EMAIL  
http://dev.mysql.com/doc/refman/5.7/en/time-zone-leap-seconds.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")