Clocks: We outline a security policy implementing a determin-
istic scheduling in Listing 3. The policy arranges all the events,
such as onmessage, in a deterministic order. Particularly, the
policy creates a pending onmessage for each callback of
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
policy_cve-2018-5092 = {
main: { // policy for main thread
JSKernel_WorkerPrototypeOnmessage: (e) => {
if (e.command == "pendingChildFetch") {
//inform the worker thread
this.postSysMsg("confirmFetch", e.id);
// close the worker if it is freed after fetch
var cleanWorker = new Event(() => {
if (!this.alive) this.terminate()
});
event_queue.push(cleanWorker,
expectedTimeforFetch);
}
}
},
worker: { // policy for worker thread
JSKernel_Fetch: (url) => {
//inform main thread
var kernelFetch = new Event(legacy_fetch, [url], "
pending");
postSysMsg("pendingChildFetch", kernelFetch.id);
event_queue.push(kernelFetch,
expectedTimeforConfirm);
return kernelFetch.stub;
},
JSKernel_onmessage: (e) => {
if (e.command == "confirmFetch")
event_queue.lookup(e.command).status = "
confirmed";
}
}
}
26
27
28
Listing 4: A Manually-speciﬁed Scheduling Policy to Defend
against CVE-2018-5092
postMessage (Line 4), predicts a deterministic time (Line
5), and then pushes the pending event into an event queue
(Line 6). Once the real onmessage event happens, the policy
changes the status of the pending event to “conﬁrmed” (Line
10) and waits until its turn to execute the event.
Such a policy can defend against the aforementioned impli-
cit clock. Due to the deterministic scheduling policy, all the
onmessage and callback invocations are arranged determin-
istically in the time axis. There, the number of onmessage
invocations in between the starting and ending of callback in
Listing 1 is deterministic, i.e., count (Line 24) is ﬁxed, and
so is asyncTimerDuration.
2) A Scheduling Policy Preventing Triggering Condition of
CVE-2018-5092: In this part, we show a scheduling policy
in Listing 4 to defend against the aforementioned use-after-
free vulnerability. When a worker thread initiates a fetch
call, the policy asks the kernel code at the worker thread
to send a “pendingChildFetch” message to the main thread
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
66
1
2
3
4
5
6
7
8
// kernelworker.js:
function(){
kernelWorkerInterface = (function(){
kernelPostMessage = postMessage;
postMessage = function (e) {...};
return {src:...};
})();
importScripts(kernelWorkerInterface.src); //
kernelWorkerInterface.src="worker.js"
}
// Kernel script in main thread:
var kernelInterface = (function(){
kernelWorker = Worker;
constructWorker = function (userWorker) {...};
registerMsg = function () {...};
requestAnimationFrame = function () {...};
return {constructWorker, registerMsg, ...};
})();
var worker_handler = {
set: (obj, prop, val) => {
if (prop=="onmessage")
kernelInterface.registerMsg(...);
},// kernel trap
construct: (obj, prop) => {
var myworker = {name:prop[0]};
kernelInterface.constructWorker(myworker);
return new Proxy(myworker, worker_handler);
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
Listing
Communication
}
}
var Worker=new Proxy(Function, worker_handler);
// original attack scripts
var worker = new Worker("worker.js");
worker.onmessage = function (event) {...};
5: Kernel
Interface Code
for User-Kernel
creating kernel threads, which will spawn user threads. Thread
communication is also handled by the thread manager.
B. Kernel Interface
The kernel interface provides a set of APIs for the user
space, i.e., the website JavaScript ops. When the user-level
code calls the corresponding APIs, the kernel code will be
invoked instead of the browser native code. Listing 5 provides
an example: Worker (Line 29) and postMessage (Line 5)
are user-space APIs. When the user code tries to create a new
worker thread, our kernel code will ﬁrst create a kernel worker
thread (Line 2–9). Then, the kernel code in main thread will
communicate the user creation request to the kernel worker,
which will then subsequently import the user worker (Line 10)
under a similar environment like the main thread.
nications: user→kernel and kernel→user.
We now categorize the interfaces into two types of commu-
1) User→Kernel Communication: The user space may
invoke a kernel space function via the following three methods:
• Kernel API calls. Kernel API calls are that a user-space
script calls an API, such as setTimeout and postMessage,
which are redeﬁned by the kernel space. This redeﬁned API
will call the corresponding functions in the kernel space.
• Kernel Traps. Kernel traps result when a user-space script
access an object property, the access will be automatically
trapped to the kernel. We implement traps via the setter
function provided by JavaScript. For example, the code, i.e.,
Object.deﬁneProperty (this, ‘onmessage’, { set: function(e)
{ ... } }); deﬁnes a setter function for onmessage such that
when the user space accesses onmessage, the access will be
trapped to the setter function in the kernel space.
Figure 1: JSKERNEL Architecture
(Line 19), which conﬁrms the receipt of the message via
a “conﬁrmFetch” and also creates a “cleanWorker” event to
check the liveness of the worker thread and prevent any abort
signal from the main thread by closing the worker thread
(Lines 6–11). This policy can defend against attacks targeting
CVE-2018-5092 because the main thread will be aware of the
termination of a worker and thus avoid sending an abort signal
to the fetch function.
3) Policy Speciﬁcation: Currently, there are two types of
policies, general and speciﬁc, which are allowed in JSKER-
NEL. The aforementioned examples belong to these two types.
The policy in Listing 3 is a general one that defends against
timing attacks. The policy in Listing 4 is speciﬁc to CVE-
2018-5092. The writing of speciﬁc policies is manual and
requires the understanding of the vulnerability triggering con-
dition. We utilize CVE-2018-5092 to explain how a policy
is written. An expert reads and understands the exploit code
in Bugzilla to extract two critical triggering conditions: (i)
a fetch call that causes a false termination in one thread
and (ii) a reload that causes another termination in another.
Subsequently, the expert writes the policy in Listing 4 to model
the interplay between these two triggering conditions.
III. JSKERNEL DESIGN
We now outline the design of JSKERNEL.
A. Overall Architecture
The architecture of JSKERNEL, similar to an OS kernel,
has two areas classiﬁed per their privilege levels, i.e., the
kernel and the website (or called the user space as borrowed
from OS). Our kernel has four major components: a storage
place of kernel objects, a scheduler, a dispatcher, and a
thread manager. The storage place holds all the kernel-related
objects, such as a clock, an event queue, JavaScript objects
(undeﬁned and Worker) used in the kernel along with event
and thread structures. The scheduler handles all the user-to-
kernel communication and places events into the event queue,
e.g., a manually speciﬁed policy or a deterministic scheduling.
The dispatcher, essentially an event loop, fetches and invokes
all the ready events following the time sequence determined
by the scheduler. The thread manager is responsible for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:51 UTC from IEEE Xplore.  Restrictions apply. 
67
• User-space Stub. The stub provides a user-space object,
which calls a corresponding kernel space function. The
Worker object (Line 27 in Listing 5) is such an example
stub—all the accesses to the Worker object will be redir-
ected to the worker handler in the user space. Then, the
worker handler invokes methods provided by the kernel.
Take the new operation for example. When the website
JavaScript creates a Worker object, i.e., a Proxy instance,
the Proxy will invoke the constructor in worker handler,
which then calls constructWorker method provided by the
kernel interface.
Note that the user-space script is free to redeﬁne any API
or objects provided in the kernel interface. There could be two
reasons. First, as a legitimate case, the user-space script may
obtain the old deﬁnition and call the old one in the newly
deﬁned function. For example, requestAnimationFrame is ob-
tained as a backup copy and then redeﬁned in youtube.com. In
such cases, the user-space script obtains our kernel interface
API but thinks that it is the original deﬁnition. The user-
space function will eventually call our kernel interface API
in their backup copy invocation. Second, as an adversarial
case, an attacker may try to bypass our kernel
interface
by redeﬁnition. In such an example, although the attacker
can bypass our kernel, she cannot launch any attacks either
because timing-related objects are encapsulated in the kernel,
which the attacker cannot access. The attacker cannot use
Object.deﬁneProperty to redeﬁne setter functions of critical
properties like onmessage either, because such properties are
not conﬁgurable.
2) Kernel→User Communication: When a user-space
script requests the kernel to ﬁnish a task, the kernel needs to
communicate with the user space after fulﬁlling the tasks—
such communication is done via a callback function. Usually,
the callback function is passed to the kernel when the user-
space script requests the task. For example, the function passed
to onmessage at Line 30 of Listing 5 is a callback. When the
kernel decides to invoke the callback, i.e., via the dispatcher
component, the kernel needs to prepare the correct execution
context and the arguments. For example, consider the onload
event in the document object model (DOM). The onload event
of a DOM element needs to be executed with the this object
as the element. Therefore, the kernel ﬁrst binds the callback
function with the correct this object, and then applies the
callback with the arguments returned from the browser under
the correct execution context.
C. Kernel Objects
We now introduce two key types of kernel objects.
1) Event Queue: An event queue arranges all the events,
i.e., items in the queue, based on the predicted time. The
event queue supports regular queue APIs. For example, a pop
API returns the event with the smallest predictedTime and
removes it from the queue. Similarly, a top API returns the
same event but still keeps it in the queue. Next, the push
API inserts an event into the queue and puts it along with
other events based on their predictedTime value. Lastly, the
remove API removes an event from the queue regardless of
its predictedTime.
2) Clock: A clock in JSKERNEL is simply a counter that
ticks based on certain information, which could be a physical
clock tick or speciﬁc API calls. A clock object provides two
APIs in the kernel space: ticking and displaying. First, the
ticking API allows the clock to tick either by or to a certain
value. Second, the displaying API allows the clock to return
the current
time, when a kernel function asks for it. For
example, both performance.now and the callback function
of requestAnimationFrame need to use this API to query
current time.
D. Scheduler and Dispatcher
We now detail event scheduling and cancelling in JSKER-
NEL.
1) Event Scheduling: The JSKERNEL schedules an event
via two steps: registration and conﬁrmation. In the registration
step, the scheduler pushes a pending event with a predicted
time into the event queue. In the conﬁrmation step,
the
scheduler conﬁrms the arguments, this object, and sometimes
callback for the pending event to result in the change of its
status to ready.
First,
the
scripts
initiated
stage,
typically
registration
calling a kernel API
by
the user-space
such as
requestAnimationFrame, prepares an event object with its
predicted invocation time and callback function. Speciﬁcally,
the scheduler creates an empty, pending event object, and
predicts the time for the event based on the current time,
i.e., querying the clock, and the registration type—the
prediction depends on the detailed scheduling algorithm,
such as determinism and fuzzy time. Next,
the scheduler
prepares the callback function for the event. In some cases
like setTimeout, the callback is unique; in some cases, such
as image loading, the callback varies on external factors—an
onload callback is ﬁred if
the image is available, and
otherwise an onerror. The scheduler puts all the possible
callbacks in the event object and pushes the event object
into the event queue. After that, the scheduler registers a
kernel callback function with the browser under the original
registration type to trigger the conﬁrmation stage with the
created event object.
Second, when the browser initiates the kernel callback
function, the conﬁrmation stage is automatically triggered. In
this stage, the scheduler needs to put the event arguments
and this object
into the event object. If the event object
has multiple callbacks, the scheduler conﬁrms the triggered
callback and deletes others from the callback list. For example,
if the image is correctly loaded, the onerror callback will be
deleted. Then, the scheduler will change the event status to
ready so that the dispatcher can fetch and execute the event.
is scheduled by
JSKERNEL in the event queue, a user-space script may
request
the event, e.g., via clearTimeout and
cancelRequestAnimation. When our scheduler receives a
cancellation request, usually accompanied by the return value
2) Event Cancellation: Once an event
to cancel