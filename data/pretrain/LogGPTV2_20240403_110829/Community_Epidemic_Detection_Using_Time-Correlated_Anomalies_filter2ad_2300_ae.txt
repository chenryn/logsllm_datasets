●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
374
A.J. Oliner, A.V. Kulkarni, and A. Aiken
Table 2. Training data. The Unique column indicates the number of unique length-six
sequences. Ti is the maximum time from the beginning of one system call to the start
of the next.
Application Version
Adium
Camino
Mail
TextEdit
1.2.7
6,595,834
1.6.1Int-v2 113,341,557
3.3 106,774,240
176,170
1.5 (244)
Calls Time (sec) Rate (calls/sec) Unique Ti (sec)
198.204
50,514 54.451
1975.11 103,634 7.2605
2195.65 126,467 896.85
5.54098
4469 6031.4
33,278
57,385
48,630
31,794
classiﬁes them based on V , reporting an epidemic when it sees the ﬁrst score from
the infected community.
We repeat this randomized process 1000 times per example to get statistically
meaningful metrics. We always present Syzygy with an equal number of healthy
and infected examples, though Syzygy does not use this fact in any way. This
is not meant to reﬂect the base rate of intrusions in a system, but increases the
precision of the metrics. As the size of the training set goes to inﬁnity, it becomes
irrelevant as to whether or not we remove the current trace ﬁle from the training
set because its inﬂuence goes to zero. It is suﬃcient to select random windows
from the traces because Syzygy is memoryless outside of each sample. Unless
noted otherwise, we set Wi = 1000 sequences and V = μH + 2σH, where H is
the distribution of community scores for a community of size n, as in Section 3.3.
We present the results of our controlled experiments in Sections 6.2–6.5.
6.1 Data
We collect system call and timing traces from commercial, oﬀ-the-shelf software
under normal usage by the authors, using the utility dtrace. We use several
desktop applications: a chat program (Adium), a web browser (Camino), a mail
client (Mail), and a simple text editor (TextEdit). A summary of these data
is provided in Table 2. When compared to the real deployments in Sections 4
and 5, we ﬁnd that our simulations are a reasonable approximation. Note that,
although Syzygy must build a dynamic model of application behavior, it does
not need to learn exploit signatures.
Many exploits currently found in the wild are brazen about their misbehavior
(large δ) and are therefore easy for Syzygy to detect (see Section 3.3). Instead, we
focus in this section on Syzygy’s distinguishing ability to detect next-generation
exploits under adverse conditions. These exploits can infect the application at
any execution point (i.e., multiple infection vectors), are privy to all of Syzygy’s
data and parameters, and can perform skillful mimicry. The adverse conditions
include client heterogeneity and tainted training data.
In order to simulate such behavior, we use four next-generation exploits:
mailspam infects Mail, then composes and sends a large number of emails (based
on the open mail relay in the Sobig worm’s trojan payload); prompttext infects
TextEdit, then asks the user for input that it writes to a ﬁle (based on ﬁle cre-
ation and deletion seen in SirCam, Chernobyl, or Klez [40]); screenshot infects
Community Epidemic Detection Using Time-Correlated Anomalies
375
0
1
.
8
0
.
6
0
.
4
0
.
.
2