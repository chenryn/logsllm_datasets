the article and transformed them into interactive ads that
“pop up” when the user hovers the mouse cursor over a
keyword. This allowed us to evaluate the intricate syn-
chronization capabilities of our architecture, such as ad
script modifying existing page content and event forward-
ing. The pop-ups consisted of a decorative window border
around the actual advertisement. AdBrite worked well in
this experiment; its ads were simply s wrapped
by the decorative border. Clicksor also worked without
any noticeable differences.
Minimum permissions For each tested ad network, we
enabled the strictest set of permissions that would per-
mit ads to function without impairment. These permis-
sions are summarized in Table 3. To arrive at the set of
permissions, we started with the base read and write ac-
cess needed by the ad. We then enabled support in the
content whitelist based on the needs of the ad. Finally,
for ﬁxed-size banner ads we set the maximum width and
height policies.
Google AdSense was conﬁgured to serve text ads, so
we were hoping to conﬁne it with a strict text-only pol-
icy. Unfortunately the text ads were contained in an
, thus we had to set the enable-iframe per-
mission.
AdBrite and Clicksor needed append write permission
on the  element to create their pop-ups. White-
list customization was also required for the pop-ups, as
they contained custom HTML elements to prevent inher-
itance of publishers’ CSS formatting rules [4]. AdBrite
was easier to support as we only had to whitelist their cus-
tom  element. Clicksor used a randomly gen-
erated element tag name consisting of the word “span”
followed by digits (e.g., ). To accommo-
date Clicksor we modiﬁed the whitelist to accept element
tag names that matched the JavaScript regular expression
/ˆspan[0-9]{5,7}$/. Also we note that Clicksor was
the only ad network to require  and  ele-
ments in its whitelist.
Click and impression counts To measure the number of
clicks and impressions caused by ads, we conﬁgured our
browser to route all trafﬁc through a web proxy running
the Squid proxy software. We rendered each ad script with
and without sandboxing, and clicked on the displayed ads
in each case. For this experiment, the web page hosting
the ad script was completely blank except for a single
paragraph of text, which was used for rendering inline text
ads and contextual ad targeting.
A given ad script may show a different ad each time
it is rendered. To ensure consistency in our evaluation,
multiple renderings were sometimes performed for an ad
network to ensure we clicked on the same advertisement
with and without sandboxing. In between renderings, we
cleared the browser’s cache to ensure proxy access pat-
terns were not affected by prior tests.
After performing the experiment, we analyzed the
proxy’s access logs. We discarded all log entries that re-
ferred back to our server hosting the test pages and AD-
JAIL source code. Comparing the remaining log entries,
we did not ﬁnd any differences in the HTTP requests gen-
erated by sandboxed versus non-sandboxed ads. Thus we
conclude that in our experiment, ads using our sandbox
environment did not impose any additional impressions
or generate any additional clicks, thereby preserving traf-
ﬁc patterns crucial to the web advertising revenue model.
5.2 Security
To evaluate the security provided by ADJAIL we in-
stalled the RoundCube webmail v0.3.1 software on our
web server. We integrated two ad network scripts on the
main webmail interface: one ad script was included di-
rectly on the page, and the other was embedded using
ADJAIL. A single trial consisted of replacing each of
the two ad scripts with a malicious script designed to per-
form one speciﬁc attack or policy violation. We then ob-
served if the malicious script functioned correctly in the
non-sandboxed location, and whether the attack was pre-
vented in the sandboxed location. Several trials were con-
ducted to assess different attack vectors, and to determine
the least restrictive policy required to defend each vector.
Our experiments were designed to support our claims in
§1 of strong defense against several potent attack vectors
to which ad publishers are routinely exposed. However,
we did not evaluate the threats discussed in §2 that are be-
yond the scope of our current work: drive-by downloads,
Flash exploits, privacy attacks, covert channels, and frame
busting.
Results of the security evaluation are included on the
right side in Table 3. With appropriate policies in ef-
fect, ADJAIL blocked all of the in-scope threats. We note
that for each ad, write access was allowed for the subtree
rooted at the  element designated for ad content.
However, every ad policy denied write access (the default
setting) for the rest of the document. A degree of leniency
is required in our policies for compatibility with existing
ads, which opens the door to some of the secondary at-
tacks. However, every ad network we tested was protected
from our primary threats: conﬁdential data leaks and con-
tent integrity violations.
13
Ad Network Element
AdBrite
Article 
Clicksor
Article 
read
access
none
subtree subtree
none
subtree subtree
Computed Policy (Annotated policy in bold)
max
ﬂash width height
none
write
access
append allow allow deny
enable enable enable max
images
iframe
none
deny
deny
deny
none
none
append allow deny
deny
deny
deny
deny
none
none
none
Attack resistance
E C I C U A O
X B V J
I P A
over-
ﬂow
deny (cid:88) (cid:88) (cid:88)
deny (cid:88) (cid:88)
deny (cid:88) (cid:88) (cid:88) (cid:88)
deny (cid:88) (cid:88)
(cid:88)
subtree
allow allow allow 90px
none
deny
deny
deny
Federated
Media
Google
Microsoft
Media
Yahoo!
Ad 
Rest of page
Ad 
Rest of page
Ad 
Rest of page
Ad 
Rest of page
none
none
none
none
none
none
none
none
subtree
none
subtree
none
subtree
none
deny
deny
deny
deny
deny
deny
allow deny
none
600px 160px deny (cid:88) (cid:88) (cid:88)
none
none
728px deny (cid:88) (cid:88) (cid:88)
none
(cid:88) (cid:88)
deny (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
(cid:88) (cid:88)
deny (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
(cid:88) (cid:88)
deny (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
(cid:88) (cid:88)
deny (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
none
780px deny (cid:88) (cid:88) (cid:88) (cid:88)
none
none
deny
deny
allow allow 300px 250px deny (cid:88) (cid:88) (cid:88)
deny
none
deny
deny
deny
allow 90px
deny
none
Table 3: Policy annotations required to support several popular ad networks, and attacks prevented in policy enforcement regions.
Attacks prevented are: EX: Execute arbitrary code in context of real page (non-XSS), CB: Data conﬁdentiality breach, IV: Content
integrity violation, CJ: Clickjacking, UI: UI spooﬁng, AP: Arbitrary ad position, OA: Oversized ad. Default link-target policy
used for all.
Below we brieﬂy describe our objectives and method-
ology for testing each attack.
Execute arbitrary code in context of real page In this
attack we attempted to break out of the sandbox, by caus-
ing the browser to execute ad script code in context of the
real page. This attack is critical because, if successful,
malicious code can disable all policy enforcement logic in
the real page and subsequently mount any of the other at-
tacks. Speciﬁcally excluded from this vector is code injec-
tion by reﬂected, DOM0, and stored XSS attacks, which
the web application can defend by other means.
We attempted to inject script code in the real page via
DOM traversal, but this was blocked by the browser’s
SOP policy. Next, we evaluated 7 different real-world at-
tacks sourced from the XSS Cheat Sheet [16]. Each at-
tack demonstrated a unique code injection vector, such as
embedded script element, event handler, javascript:
URI, CSS expression, and more. These code injection at-
tempts were blocked by enforcing a no-script policy on
content models when constructing the mirrored ad in the
real page, using the technique we developed in prior work
[46].
To evaluate our defense against Flash-based script in-
jection attacks, we created a Flash application that uses
the ExternalInterface API to extract conﬁdential
data from the DOM. Flash regulates access to this API
to always.
via the allowScriptAccess attribute of  el-
ements, and value attribute of  elements when
the name attribute is set to allowScriptAccess. With-
out ADJAIL, the ad network’s script can create Flash
objects on the real page with allowScriptAccess
set
This setting permits Flash Action-
Script code to fully access the real page’s JavaScript
environment,
including sensitive page content via the
DOM. Our defense blocks this attack vector by forc-
ing the allowScriptAccess attribute to never on
all  elements and relevant  ele-
ments.
This action effectively disables the Flash
ExternalInterface API.
All script injection attacks were prevented even with the
most permissive policy that can be written using our pol-
icy language. Thus the script injection vector is defended
for every possible policy conﬁguration.
Conﬁdential information leak For this attack we re-
trieved two items of conﬁdential data from the real page:
the user’s session cookie and list of email contacts. Due
to SOP restrictions, the sandboxed attack could not ac-
cess the information by DOM traversal. (We note DOM
traversal is also an ineffective strategy for all remaining
evaluated attacks.) The only way the attack could access
conﬁdential data was when the data was given a policy
granting full read access.
14
Figure 7: Rendering latencies: (a) time spent loading the ad, and (b) time from start of page load until ad appears.
Content integrity violation This attack tampers with
trusted content on the real page:
the user’s email mes-
sage headers. Speciﬁcally the attack makes all messages
appear to be sent by prominent government ofﬁcials. The
sandboxed attack was unsuccessful except when the mes-
sage headers were given a policy with full write access.
Clickjacking The clickjacking attack attempts to entice
the user to unknowingly click on an  element.
The attack script is based on detailed technical analy-
sis of the vector [17, 54]. With a policy that disallows
 elements, the sandboxed attack was unsuc-
cessful because the policy prevents any  on the
(hidden) shadow page from being brought up to the real
page where the user can click it. Since any 
embedded by the ad is unclickable to the end user, typi-
cal tricks to mask the clickjacking attack (e.g., hiding the
 using transparency) are not a factor.
User interface spooﬁng We made an ad appear identi-
cal to trusted webmail user interface components in an at-
tempt to lure users into interacting with the ad (i.e., an in-
terface spooﬁng attack [26]). This attack was defeated by
denying images, s and Flash, and further con-
straining the ad with policies that disallow the ad from
overlapping other parts of the trusted interface. Since the
ad can still make use of textual elements, we note there
exists a very small likelihood for an attacker to succeed
through very nuanced UI spooﬁng attack using very small
(single pixel) elements or text, such that images can be
rendered in HTML one pixel at a time. Mitigating this
threat may require advanced analysis of ad content or re-
stricting the color palette available to ads.