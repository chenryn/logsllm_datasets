### Interactive Ads and Synchronization Capabilities

We transformed the article into interactive ads that "pop up" when a user hovers the mouse cursor over a keyword. This allowed us to evaluate the intricate synchronization capabilities of our architecture, such as ad scripts modifying existing page content and event forwarding. The pop-ups consisted of a decorative window border around the actual advertisement. AdBrite worked well in this experiment; its ads were simply wrapped by the decorative border. Clicksor also functioned without any noticeable differences.

### Minimum Permissions for Ad Networks

For each tested ad network, we enabled the strictest set of permissions necessary for the ads to function without impairment. These permissions are summarized in Table 3. To determine the set of permissions, we started with the base read and write access required by the ad. We then enabled support in the content whitelist based on the ad's needs. Finally, for fixed-size banner ads, we set the maximum width and height policies.

- **Google AdSense**: Configured to serve text ads, we aimed to confine it with a strict text-only policy. However, the text ads were contained in an `<iframe>`, necessitating the enable-iframe permission.
- **AdBrite and Clicksor**: Required append write permission on the `<div>` element to create their pop-ups. Whitelist customization was also needed, as the pop-ups contained custom HTML elements to prevent inheritance of publishers’ CSS formatting rules [4]. AdBrite was easier to support, requiring only the whitelisting of their custom `<div>` element. Clicksor used a randomly generated element tag name consisting of the word "span" followed by digits (e.g., `<span12345>`). To accommodate Clicksor, we modified the whitelist to accept element tag names matching the JavaScript regular expression `/^span[0-9]{5,7}$/`. Additionally, Clicksor was the only ad network to require `<img>` and `<script>` elements in its whitelist.

### Measuring Clicks and Impressions

To measure the number of clicks and impressions caused by ads, we configured our browser to route all traffic through a web proxy running Squid proxy software. We rendered each ad script with and without sandboxing and clicked on the displayed ads in each case. For this experiment, the web page hosting the ad script was completely blank except for a single paragraph of text, which was used for rendering inline text ads and contextual ad targeting.

A given ad script may show a different ad each time it is rendered. To ensure consistency, multiple renderings were sometimes performed for an ad network to ensure we clicked on the same advertisement with and without sandboxing. In between renderings, we cleared the browser’s cache to ensure proxy access patterns were not affected by prior tests.

After performing the experiment, we analyzed the proxy’s access logs. We discarded all log entries referring back to our server hosting the test pages and ADJAIL source code. Comparing the remaining log entries, we found no differences in the HTTP requests generated by sandboxed versus non-sandboxed ads. Thus, we conclude that in our experiment, ads using our sandbox environment did not impose any additional impressions or generate any additional clicks, thereby preserving traffic patterns crucial to the web advertising revenue model.

### Security Evaluation

To evaluate the security provided by ADJAIL, we installed RoundCube webmail v0.3.1 software on our web server. We integrated two ad network scripts on the main webmail interface: one ad script was included directly on the page, and the other was embedded using ADJAIL. A single trial involved replacing each of the two ad scripts with a malicious script designed to perform a specific attack or policy violation. We observed if the malicious script functioned correctly in the non-sandboxed location and whether the attack was prevented in the sandboxed location. Several trials were conducted to assess different attack vectors and determine the least restrictive policy required to defend each vector.

Our experiments were designed to support our claims in §1 of strong defense against several potent attack vectors to which ad publishers are routinely exposed. However, we did not evaluate the threats discussed in §2 that are beyond the scope of our current work: drive-by downloads, Flash exploits, privacy attacks, covert channels, and frame busting.

Results of the security evaluation are included on the right side in Table 3. With appropriate policies in effect, ADJAIL blocked all in-scope threats. We note that for each ad, write access was allowed for the subtree rooted at the `<div>` element designated for ad content. However, every ad policy denied write access (the default setting) for the rest of the document. A degree of leniency is required in our policies for compatibility with existing ads, which opens the door to some secondary attacks. However, every ad network we tested was protected from our primary threats: confidential data leaks and content integrity violations.

### Attack Resistance

The results of the security evaluation are summarized in Table 3. Below, we briefly describe our objectives and methodology for testing each attack:

- **Execute Arbitrary Code in Context of Real Page**: We attempted to break out of the sandbox by causing the browser to execute ad script code in the context of the real page. This attack is critical because, if successful, malicious code can disable all policy enforcement logic in the real page and subsequently mount any of the other attacks. We attempted to inject script code via DOM traversal, but this was blocked by the browser’s SOP policy. We evaluated 7 different real-world attacks sourced from the XSS Cheat Sheet [16], each demonstrating a unique code injection vector. These attempts were blocked by enforcing a no-script policy on content models when constructing the mirrored ad in the real page. We also evaluated Flash-based script injection attacks, creating a Flash application that uses the ExternalInterface API to extract confidential data from the DOM. Our defense blocks this attack vector by forcing the `allowScriptAccess` attribute to `never` on all `<object>` and relevant `<param>` elements, effectively disabling the Flash ExternalInterface API.

- **Confidential Information Leak**: For this attack, we retrieved two items of confidential data from the real page: the user’s session cookie and list of email contacts. Due to SOP restrictions, the sandboxed attack could not access the information by DOM traversal. The only way the attack could access confidential data was when the data was given a policy granting full read access.

- **Content Integrity Violation**: This attack tampers with trusted content on the real page, specifically making all messages appear to be sent by prominent government officials. The sandboxed attack was unsuccessful except when the message headers were given a policy with full write access.

- **Clickjacking**: The clickjacking attack attempts to entice the user to unknowingly click on an `<input>` element. With a policy that disallows `<input>` elements, the sandboxed attack was unsuccessful because the policy prevents any `<input>` on the (hidden) shadow page from being brought up to the real page where the user can click it.

- **User Interface Spoofing**: We made an ad appear identical to trusted webmail user interface components in an attempt to lure users into interacting with the ad. This attack was defeated by denying images, `<iframe>`s, and Flash, and further constraining the ad with policies that disallow the ad from overlapping other parts of the trusted interface. While the ad can still make use of textual elements, there exists a very small likelihood for an attacker to succeed through very nuanced UI spoofing attacks using very small (single pixel) elements or text. Mitigating this threat may require advanced analysis of ad content or restricting the color palette available to ads.