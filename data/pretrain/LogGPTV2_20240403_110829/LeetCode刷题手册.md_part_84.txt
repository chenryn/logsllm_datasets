leaders, votes := make([]int, len(persons)), make([]int, len(persons))
times
persons []int
大时刻，再在选票领先的数组里面输出对应时刻领先的人的编号即可。
数组中，实现查询函数的时候，只需要先对times[］数组二分搜索，找到比查询时间 七小的最
刻。times［】 数组默认是有序的，从小到大排列。先计算出每个时刻哪个人选票领先，放在一个
 TopVotedCandidate.q(int t) 被调用时总是满足 t >= times[0]。
if votes[p] >= votes[leader] {
votes[p]++ 
p := persons[i] 
leaders[i] = leader
 leader = p 
[]int
---
## Page 877
 Example 4:
 Example 3: 
 Example 2:
Example 1:
into 1 or more groups of cards, where:
Return true if and only if you can choose × >= 2 such that it is possible to split the entire deck
In a deck of cards, each card has an integer written on it.
题目
914. X of a Kind in a Deck of Cards
·  All the cards in each group have the same integer.
Explanation: No possible partition.
● Each group has exactly × cards.
Explanation: No possible partition.
Output: false
Input: deck = [1]
Output: false'
Input: deck = [1,1,1,2,2,2,3,3]
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]
Output: true 
Input: deck = [1,2,3,4,4,3,2,1]
func （tvc *TopvotedCandidate) Q(t int） int {
// Q define 
 return tvc.persons[i-1]
:uons se palles pue paneiauessus aa llim ioatqo arepipuepatondol unos :
param_l := obj.Q(t); 
 obj := Constructor(persons, times);
---
## Page 878
代码
解题思路
仅当你可选的×>=2 时返回 true。
则分成1组或更多组：
给定一副牌，每张牌上都写着一个整数。此时，你需要选定一个数字×，使我们可以将整副牌按下述规
题目大意
Constraints:
 Example 5: 
·给定一副牌，要求选出数字×，使得每组都有×张牌，每组牌的数字都相同。当×≥2 的时候，输
·组内所有的牌上都写着相同的整数。
·每组都有×张牌。
●1 =
题目
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10 
output: 10
Input: [5,-3,5]
Explanation: Subarray [3] has maximum sum 3 
Output:3
Input: [1,-2,3,-2]
func gcd(a, b int) int {
if a == 0 {
return gcd(b%a, a)
return g >= 2
 return b
 if g == -1{
} else{
g = gcd(g, v)
g=v
---
## Page 880
解题思路
提示：
C[j], 不存在 i =>‘）
3
这
---
## Page 881
different) songs during your trip. You create a playlist so that:
Your music player contains N different songs and she wants to listen to L (not necessarily
题目
920. Number of Music Playlists
代码
● Every song is played at least once 
func kadane(a []int) int {
import "math"
·还有一些边界的情况，例如，[1，2，-2，-3，5，5，-4，6］ 和[1，2，-2，-3，5，5，-4,
func maxSubarraySumcircular(A []int) int {
package leetcode
for i := l; i K，那么选择歌曲只能从－ 里面选，因为不能选择－ 1
里不需要变化。如果是添加一首存在的歌曲，这个时候就会受到K的限制了。如果当前播放列表
入K这个限制条件以后，状态转移方程该如何推导。
。但是这个方程是在不考虑K的限制条件下得到的，距离满足题意还差一步。接下来需要考虑加
转移方程是dp[i][j] = dp[i- 1][j － 1]*（N-（j- 1 ））+ dp[i -1][j] * j
歌，那么新歌有N-（j-1）首，如果是第二种情况，添加一首已经存在的歌，歌有j首，所以状态
dp[i－ 1][j－ 1] 得到，也可以由 dp[i－ 1][j] 得到。如果是第一种情况，添加—首新 
的新歌曲，或者由i－1 首歌的列表中添加一首列表中已经存在的歌曲。即，dp[i][j] 可以由
表当前需要组成首歌，有 2种方式可以得到，由－1 首歌的列表中添加一首列表中不存在
首不同的歌曲，那么题目要求的最终解存在 dp[L][N] 中。考虑 dp[i][j] 的递归公式，音乐列
先不考虑K的限制，只考虑 N和L。定义 dp[i][j］ 代表播放列表里面有  首歌，其中包含 j
 dp[i] = make([]int，N+1)
for j := 1; j K{ 
dp[i][j] =(dp[i-1][j-1] *(N -（j － 1))） % mod 
 dp[i][j] =（dp[i][j] +（dp[i-1][j]*(j-K)]%mod） % mod
J≤k
27
---
## Page 884
Note:
Example 4: 
Example 3: 
Example 2: 
Example 1: 
Formally, a parentheses string is valid if and only if:
and in any positions ) so that the resulting parentheses string is valid.
Given a string S of '( and ')' parentheses, we add the minimum number of parentheses ('' or '), 
题目
921. Minimum Add to Make Parentheses Valid
1. S.length <= 1000
Output: 4
Input: "())(("
Output: 0
Input: "()"
Output:3
Input: "((("
Output:1
Input: "()"
● It can be written as AB (A concatenated with B), where A and B are valid strings, or 
●It is the empty string, or 
It can be written as (A), where A is a valid string.
make the resulting string valid.
Given a parentheses string, return the minimum number of parentheses we must add to
---
## Page 885
Example 1:
ouon sr sases u ree samsue Aue unan ew no
Sort the array so that whenever A[i] is odd, i is odd; and whenever Ali] is even, i is even.
integers are even.
Given an array A of non-negative integers, half of the integers in A are odd, and half of the 
题目
922. Sort Array By Parity Il
代码
这题也是栈的题目，利用栈进行括号匹配。最后栈里剩下几个括号，就是最少需要添加的数目。
解题思路
匹配的最少添加数是多少。
给一个括号的字符串，如果能在这个括号字符串中的任意位置添加括号，问能使得这串字符串都能完美
题目大意
 2. S only consists of (' and ') characters.
func minAddToMakeValid(S string) int 
package leetcode 
if len(s) == 0 {
return len(stack)
stack := make([]rune, 0) 
if  == '（' { 
 return o
} else {
 ， == [-()u  < (s)u  （（ == ）   {
stack = append(stack, v)
 stack = stack[:len(stack)-1]
-, v := range S {
---
## Page 886
923. 3Sum With Multiplicity
代码
可以是无序的。
这题比较简单，用两个下标控制奇数，偶数放置在哪个下标即可。奇数奇数之间，偶数偶数之间的顺序
解题思路
要求数组中奇数下标位置上放奇数，偶数下标位置上放偶数。
题目大意
Note:
●0<=A[i]<=1000
●2 <= A.length <= 20000 
func sortArrayByParityII(A []int) []int {
package leetcode
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
Output: [4,5,2,7]
Input: [4,2,5,7]
if len(A) == 0 I1 len(A)%2 != 0 { 
return res
for i := O; i < len(A); i++ {
evenIndex := 0
oddIndex := 1 
res := make([]int, len(A))
A.length % 2 == 0 
if A[i]%2 == 0 {
return []int{}
res[evenIndex] = A[i]
oddIndex += 2 
res[oddIndex] = A[i]
else { 
evenIndex += 2 
---
## Page 887
代码
解的个数都加起来就可以了。
一样的数，需要计算Cn 3，去2 个相同的数字的时候，计算Cn 2，取一个数字就正常计算。最后所有
这一题大体解法和第15题一样的，只不过算所有解组合的时候需要一点排列组合的知识，如果取3个
解题思路
且要求i<j<k。解的组合个数不需要去重，相同数值不同下标算不同解(这里也是和第 15 题的区别)
这道题是第15 题的升级版。给出一个数组，
题目大意
Note:
Example 2: 
Example 1: 
k and A[i] + A[j] + A[k] == target.
Given an integer array A, and an integer target, return the number of tuples i, j, k such that i <j <
题目
●0<=A[i]<=100
and two 2s from [2,2,2,2] in 6 ways.
we choose one 1 from [1,1] in 2 ways,
A[i] = 1, A[j] = A[k] = 2 occurs 12 times:
Explanation: 
Output: 12
Input: A =
2
2
(1，2， 5) occurs 8 times;
Enumeratingbythevalues
Explanation:
Output: 20 
Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8 
（1，3
3，
2，
3, 4) occurs 8 times;
3) occurs 2 times.