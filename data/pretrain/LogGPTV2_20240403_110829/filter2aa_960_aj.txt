https://api.shodan.io/api-info?key={YOUR_API_KEY}
The response returned resembles the following structure. Obviously, the 
values will differ based on your plan details and remaining subscription credits.
{
 "query_credits": 56,
 "scan_credits": 0,
 "telnet": true,
 "plan": "edu",
 "https": true,
 "unlocked": true,
}
First, in api.go, you’ll need to define a type that can be used to unmarshal 
the JSON response to a Go struct. Without it, you won’t be able to process or 
interrogate the response body. In this example, name the type APIInfo:
type APIInfo struct {
    QueryCredits int    `json:"query_credits"`
    ScanCredits  int    `json:"scan_credits"`
    Telnet       bool   `json:"telnet"`
    Plan         string `json:"plan"`
    HTTPS        bool   `json:"https"`
    Unlocked     bool   `json:"unlocked"`
}
The awesomeness that is Go makes that structure and JSON alignment 
a joy. As shown in Chapter 1, you can use some great tooling to “automagically” 
parse JSON—populating the fields for you. For each exported type on the 
struct, you explicitly define the JSON element name with struct tags so you 
can ensure that data is mapped and parsed properly. 
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    55
Next you need to implement the function in Listing 3-8, which makes 
an HTTP GET request to Shodan and decodes the response into your 
APIInfo struct:
func (s *Client) APIInfo() (*APIInfo, error) {
    res, err := http.Get(fmt.Sprintf("%s/api-info?key=%s", BaseURL, s.apiKey))u
    if err != nil {
        return nil, err
    }
    defer res.Body.Close()
    var ret APIInfo
    if err := json.NewDecoder(res.Body).Decode(&ret)v; err != nil {
        return nil, err
    }
    return &ret, nil
}
Listing 3-8: Making an HTTP GET request and decoding the response (/ch-3/shodan 
/shodan/api.go)
The implementation is short and sweet. You first issue an HTTP GET 
request to the /api-info resource u. The full URL is built using the BaseURL 
global constant and s.apiKey. You then decode the response into your 
APIInfo struct v and return it to the caller.
Before writing code that utilizes this shiny new logic, build out a second, 
more useful API call—the host search—which you’ll add to host.go. The 
request and response, according to the API documentation, is as follows:
https://api.shodan.io/shodan/host/search?key={YOUR_API_KEY}&query={query}&facets={facets}
{
    "matches": [
    {
        "os": null,
        "timestamp": "2014-01-15T05:49:56.283713",
        "isp": "Vivacom",
        "asn": "AS8866",
        "hostnames": [ ],
        "location": {
            "city": null,
            "region_code": null,
            "area_code": null,
            "longitude": 25,
            "country_code3": "BGR",
            "country_name": "Bulgaria",
            "postal_code": null,
            "dma_code": null,
            "country_code": "BG",
            "latitude": 43
        },
        "ip": 3579573318,
        "domains": [ ],
前沿信安资讯阵地  公众号：i nf osrc
56   Chapter 3
        "org": "Vivacom",
        "data": "@PJL INFO STATUS CODE=35078 DISPLAY="Power Saver" ONLINE=TRUE",
        "port": 9100,
        "ip_str": "213.91.244.70"
    },
    --snip--
    ],
    "facets": {
        "org": [
        {
            "count": 286,
            "value": "Korea Telecom"
        },
        --snip--
        ]
    },
    "total": 12039
}
Compared to the initial API call you implemented, this one is signifi-
cantly more complex. Not only does the request take multiple parameters, 
but the JSON response contains nested data and arrays. For the following 
implementation, you’ll ignore the facets option and data, and instead focus 
on performing a string-based host search to process only the matches element 
of the response. 
As you did before, start by building the Go structs to handle the 
response data; enter the types in Listing 3-9 into your host.go file.
type HostLocation struct {
    City         string  `json:"city"`
    RegionCode   string  `json:"region_code"`
    AreaCode     int     `json:"area_code"`
    Longitude    float32 `json:"longitude"`
    CountryCode3 string  `json:"country_code3"`
    CountryName  string  `json:"country_name"`
    PostalCode   string  `json:"postal_code"`
    DMACode      int     `json:"dma_code"`
    CountryCode  string  `json:"country_code"`
    Latitude     float32 `json:"latitude"`
}
type Host struct {
    OS        string       `json:"os"`
    Timestamp string       `json:"timestamp"`
    ISP       string       `json:"isp"`
    ASN       string       `json:"asn"`
    Hostnames []string     `json:"hostnames"`
    Location  HostLocation `json:"location"`
    IP        int64        `json:"ip"`
    Domains   []string     `json:"domains"`
    Org       string       `json:"org"`
    Data      string       `json:"data"`
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    57
    Port      int          `json:"port"`
    IPString  string       `json:"ip_str"`
}
type HostSearch struct {
    Matches []Host `json:"matches"`
}
Listing 3-9: Host search response data types (/ch-3 /shodan/shodan/host.go)
The code defines three types:
HostSearch Used for parsing the matches array
Host Represents a single matches element
HostLocation Represents the location element within the host
Notice that the types may not define all response fields. Go handles 
this elegantly, allowing you to define structures with only the JSON fields 
you care about. Therefore, our code will parse the JSON just fine, while 
reducing the length of your code by including only the fields that are most 
relevant to the example. To initialize and populate the struct, you’ll define 
the function in Listing 3-10, which is similar to the APIInfo() method you 
created in Listing 3-8.
func (s *Client) HostSearch(q stringu) (*HostSearch, error) {
    res, err := http.Get( v
        fmt.Sprintf("%s/shodan/host/search?key=%s&query=%s", BaseURL, s.apiKey, q),
    )
    if err != nil {
        return nil, err
    }
    defer res.Body.Close()
    var ret HostSearch
    if err := json.NewDecoder(res.Body).Decode(&ret)w; err != nil {
        return nil, err
    }
    return &ret, nil
}
Listing 3-10: Decoding the host search response body (/ch-3/shodan /shodan/host.go)
The flow and logic is exactly like the APIInfo() method, except that 
you take the search query string as a parameter u, issue the call to the 
/shodan/host/search endpoint while passing the search term v, and decode 
the response into the HostSearch struct w.
You repeat this process of structure definition and function implemen-
tation for each API service you want to interact with. Rather than wasting 
precious pages here, we’ll jump ahead and show you the last step of the pro-
cess: creating the client that uses your API code. 
前沿信安资讯阵地  公众号：i nf osrc
58   Chapter 3
Creating a Client
You’ll use a minimalistic approach to create your client: take a search term 
as a command line argument and then call the APIInfo() and HostSearch() 
methods, as in Listing 3-11.
func main() {
    if len(os.Args) != 2 {
        log.Fatalln("Usage: shodan searchterm")
    }
    apiKey := os.Getenv("SHODAN_API_KEY")u
    s := shodan.New(apiKey)v
    info, err := s.APIInfo()w
    if err != nil {
        log.Panicln(err)
    }
    fmt.Printf(
        "Query Credits: %d\nScan Credits:  %d\n\n",
        info.QueryCredits,
        info.ScanCredits)
    hostSearch, err := s.HostSearch(os.Args[1])x
    if err != nil {
        log.Panicln(err)
    }
    y for _, host := range hostSearch.Matches {
        fmt.Printf("%18s%8d\n", host.IPString, host.Port)
    }
}
Listing 3-11: Consuming and using the shodan package (/ch-3/shodan/cmd/shodan 
/main.go)
Start by reading your API key from the SHODAN_API_KEY environment vari-
able u. Then use that value to initialize a new Client struct v, s, subsequently 
using it to call your APIInfo() method w. Call the HostSearch() method, pass-
ing in a search string captured as a command line argument x. Finally, loop 
through the results to display the IP and port values for those services match-
ing the query string y. The following output shows a sample run, searching 
for the string tomcat:
$ SHODAN_API_KEY=YOUR-KEY go run main.go tomcat
Query Credits: 100
Scan Credits:  100
    185.23.138.141    8081
   218.103.124.239    8080
     123.59.14.169    8081
      177.6.80.213    8181
    142.165.84.160   10000
--snip--
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    59
You’ll want to add error handling and data validation to this project, 
but it serves as a good example for fetching and displaying Shodan data 
with your new API. You now have a working codebase that can be easily 
extended to support and test the other Shodan functions.
Interacting with Metasploit
Metasploit is a framework used to perform a variety of adversarial techniques, 
including reconnaissance, exploitation, command and control, persistence, 
lateral network movement, payload creation and delivery, privilege escala-
tion, and more. Even better, the community version of the product is free, 
runs on Linux and macOS, and is actively maintained. Essential for any 
adversarial engagement, Metasploit is a fundamental tool used by penetra-
tion testers, and it exposes a remote procedure call (RPC) API to allow remote 
interaction with its functionality.
In this section, you’ll build a client that interacts with a remote Metasploit 
instance. Much like the Shodan code you built, the Metasploit client you  
develop won’t cover a comprehensive implementation of all available func-
tionality. Rather, it will be the foundation upon which you can extend 
additional functionality as needed. We think you’ll find the implementation 
more complex than the Shodan example, making the Metasploit interac-
tion a more challenging progression.
Setting Up Your Environment
Before you proceed with this section, download and install the Metasploit 
community edition if you don’t already have it. Start the Metasploit console 
as well as the RPC listener through the msgrpc module in Metasploit. Then 
set the server host—the IP on which the RPC server will listen—and a pass-
word, as shown in Listing 3-12.
$ msfconsole
msf > load msgrpc Pass=s3cr3t ServerHost=10.0.1.6
[*] MSGRPC Service:  10.0.1.6:55552
[*] MSGRPC Username: msf
[*] MSGRPC Password: s3cr3t
[*] Successfully loaded plugin: msgrpc
Listing 3-12: Starting Metasploit and the msgrpc server
To make the code more portable and avoid hardcoding values, set the 
following environment variables to the values you defined for your RPC 
instance. This is similar to what you did for the Shodan API key used to 
interact with Shodan in “Creating a Client” on page 58.
$ export MSFHOST=10.0.1.6:55552
$ export MSFPASS=s3cr3t
You should now have Metasploit and the RPC server running. 
前沿信安资讯阵地  公众号：i nf osrc
60   Chapter 3
Because the details on exploitation and Metasploit use are beyond the 
scope of this book,1 let’s assume that through pure cunning and trickery 
you’ve already compromised a remote Windows system and you’ve leveraged 
Metasploit’s Meterpreter payload for advanced post-exploitation activities. 
Here, your efforts will instead focus on how you can remotely communicate 
with Metasploit to list and interact with established Meterpreter sessions. As 
we mentioned before, this code is a bit more cumbersome, so we’ll purposely 
pare it back to the bare minimum—just enough for you to take the code and 
extend it for your specific needs. 
Follow the same project roadmap as the Shodan example: review the 
Metasploit API, lay out the project in library format, define data types, imple-
ment client API functions, and, finally, build a test rig that uses the library.
First, review the Metasploit API developer documentation at Rapid7’s 
official website (https://metasploit.help.rapid7.com/docs/rpc-api/). The function-
ality exposed is extensive, allowing you to do just about anything remotely 
that you could through local interaction. Unlike Shodan, which uses JSON, 
Metasploit communicates using MessagePack, a compact and efficient binary 
format. Because Go doesn’t contain a standard MessagePack package, you’ll 
use a full-featured community implementation. Install it by executing the 
following from the command line:
$ go get gopkg.in/vmihailenco/msgpack.v2
In the code, you’ll refer to the implementation as msgpack. Don’t worry 
too much about the details of the MessagePack spec. You’ll see shortly that 
you’ll need to know very little about MessagePack itself to build a work-
ing client. Go is great because it hides a lot of these details, allowing you 
to instead focus on business logic. What you need to know are the basics 
of annotating your type definitions in order to make them “MessagePack-
friendly.” Beyond that, the code to initiate encoding and decoding is identi-
cal to other formats, such as JSON and XML.
Next, create your directory structure. For this example, you use only 
two Go files:
$ tree github.com/blackhat-go/bhg/ch-3/metasploit-minimal
github.com/blackhat-go/bhg/ch-3/metasploit-minimal
|---client
|   |---main.go
|---rpc
    |---msf.go
The msf.go file resides within the rpc package, and you’ll use client/main.go 
to implement and test the library you build.
1. For assistance and practice with exploitation, consider downloading and running 
the Metasploitable virtual image, which contains several exploitable flaws useful for 
training purposes.
前沿信安资讯阵地  公众号：i nf osrc
HTTP Clients and Remote Interaction with Tools    61
Defining Your Objective
Now, you need to define your objective. For the sake of brevity, implement 
the code to interact and issue an RPC call that retrieves a listing of current 
Meterpreter sessions—that is, the session.list method from the Metasploit 
developer documentation. The request format is defined as follows:
[ "session.list", "token" ]
This is minimal; it expects to receive the name of the method to imple-
ment and a token. The token value is a placeholder. If you read through the 
documentation, you’ll find that this is an authentication token, issued upon 
successful login to the RPC server. The response returned from Metasploit 
for the session.list method follows this format:
{
"1" => {
    'type' => "shell",
    "tunnel_local" => "192.168.35.149:44444",
    "tunnel_peer" => "192.168.35.149:43886",
    "via_exploit" => "exploit/multi/handler",
    "via_payload" => "payload/windows/shell_reverse_tcp",
    "desc" => "Command shell",
    "info" => "",
    "workspace" => "Project1",
    "target_host" => "",