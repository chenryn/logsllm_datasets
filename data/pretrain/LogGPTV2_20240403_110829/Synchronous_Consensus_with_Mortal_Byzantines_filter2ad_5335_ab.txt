Correct process p halts if all processes that it considers
to be alive have decided, otherwise, a new phase is started.
In the remainder of this section we prove that our algo-
rithm solves consensus by separately proving the required
properties. We commence with preliminary deﬁnitions.
Deﬁnition 4.1 (Last Decision). We deﬁne rd as the maxi-
mum round in an execution for which it holds that at least
one correct process has not decided in some round less than
rd in this execution. Further, d is such a correct process.
Deﬁnition 4.2 (First Halt). We deﬁne h as the maximum
round in an execution for which it holds that no correct pro-
cess has halted in some round less than h in this execution.
We start our analysis with some preliminary lemmas.
First, we make some statements about the decision value
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007// round number
// the set of processes that are not detected faulty by p
// possible number of not yet detected faulty processes
// proposed value
// initially ⊥
// proposed value received from i in the current round
// decision value received from i in the current round
// the proposed values as seen by other processes
// the set of alive processes as seen by other processes
// the decided values as seen by other processes
// i is faulty
4:
5:
3:
Algorithm 1 Synchronous, Mortal Byzantine Tolerant Consensus
Code for processes p (if they are correct):
1: variables
rp ← 0
2:
πp ← Π
fp ← t
propp ∈ {0, 1}
decisionp ∈ {0, 1, ⊥} ← ⊥
rcvpropp[n] ∈ {0, 1, ⊥}
rcvdecp[n] ∈ {0, 1, ⊥, †}
c propp[n][n] ∈ {0, 1, ⊥}
c πp[n]
c decp[n][n] ∈ {0, 1, ⊥, †}
10:
9:
6:
7:
8:
11:
12: repeat
13:
if rp(mod)2 = 0 then
send (INFORM, propp, decisionp) to all
receive
for all i ∈ Π do
if no message from i was received in some round then
if received (INFORM, propi, decisioni) from i in current round then
rcvpropp[i] ← propi
rcvdecp[i] ← decisioni
if rp(mod)2 = 1 then
send (ECHO, rcvpropp, πp, rcvdecp) to all
receive
for all i ∈ Π do
if received (ECHO, rcvpropi, πi, rcvdeci) from i then
rcvdecp[i] ← †
rcvpropp[i] ← ⊥
πp ← πp − i
fp ← t − |Π − πp|
else
else
c propp[i] ← rcvpropi
c πp[i] ← πi
c decp[i] ← rcvdeci
c propp[i] ← ⊥
c πp[i] ← ⊥
c decp[i] ← ⊥
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:
42:
43:
if decisionp = ⊥ ∧ ∀i, j ∈ πp : c propp[i] = c propp[j] ∧ c πp[i] = c πp[j] ∧ c decp[i] = c decp[j] then
W ← {w : w ∈ {0, 1} ∧ |{j ∈ πp : rcvpropp[j] = w}| ≥ fp + 1 ∧ ∀i ∈ Π : rcvdecp[i] 6= (1 − w)}
if |W| > 0 then
decide min W
decisionp ← min W
rp ← rp + 1
44: until ∀i ∈ Π : rcvdecp[i] 6= ⊥
45: halt
decisionp which are quite obvious from code inspection:
Lemma 4.3 (Decision). If p is a correct process, then the
following statements hold:
p = ⊥.
(1) decision0
(2) If decisionp is updated to value v, then v ∈ {0, 1}.
(3) Variable decisionp is changed at most once.
Basically, this lemma says that the initial value of the
decision variable at correct processes is ⊥, and that a correct
process changes it only once to a value of either 0 or 1.
Now, we consider how a correct process q is perceived by
another correct process p via the variables rcvdecp and πp.
Lemma 4.4 (Perception of Decisions). If p and q both are
correct processes, then the following statements hold:
(1) If decisionr
s ≤ r + 1.
q = ⊥, then rcvdecs
p[q] = ⊥ in all rounds
p[d] = ⊥ in all rounds r ≤ rd.
(10) rcvdecr
(2) rd  r.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007This lemma basically states that while a correct process
q has not yet decided, value rcvdecp[q] will remain at ⊥
for at least another round. In consequence, rcvdecp[d] will
remain at ⊥ until round rd, and therefore no correct process
can halt before round rd + 1. Once a correct process makes
a decision, this decision is known by all correct processes in
the next round, and will be kept in rcvdecp[q] at least until
round rd + 1. Finally, if in some round no message does
arrive from process i, which means that process i is faulty,
then from (at least) the next round on, rcvdecp[i] = † for the
remainder of the algorithm.
Lemma 4.5 (Failure Detection). If p and q both are correct
processes, then the following statements hold:
(1) q ∈ πr
(2) |πr
(3) For each round r ≤ rd it holds that no more than f r
p in all rounds r ≤ rd.
p| > t in all rounds r ≤ rd.
p
faulty processes are in πr
p.
(4) If a message from process i does not arrive at p in
round r, then i 6∈ πs
p in all rounds s > r.
This lemma is concerned with who a correct process p
considers faulty. It states that correct processes are in the
“non yet faulty” set π until the last correct process has made
its decision, that in consequence there are at least t + 1 pro-
p contains the maximum number of
cesses in π, and that f r
p.
faulty processes in πr
Equipped with these basic facts, we can now start to con-
sider the consensus properties of the algorithm.
Theorem 4.6 (Validity). If a correct process decides on
some value v, then v was proposed by a correct process.
Proof. By line 39, correct process p only decides in some
p + 1
round r on a value v that was received by at least f r
(INFORM, v,
p in
round r − 1. By Lemma 4.5 (3), there are no more than f r
p
p such that at least 1 correct process
faulty processes in πr
must have proposed v.
) messages from distinct processes in πr
After validity, we now turn our attention towards agree-
ment, for which we employ the following lemmas.
Lemma 4.7. If two correct processes p, q both decide in
some round r, then both decide on the same value v.
Proof. By line 39 and line 41, the decision value is a de-
terministic function (identical at all correct processes) of
s for correct process s ∈
rcvpropr
{p, q}. We thus have to show that these four variables must
have identical values at correct processes p and q in some
round r in which both decide.
s , and rcvdecr
s, f r
s, πr
From Lemma 4.5 (1) it follows that q ∈ πr
p and p ∈
q for r ≤ rd. Since both decide in line 41 in round r,
πr
line 38 must have evaluated to TRUE in this round at both
p =
processes. It follows that rcvpropr
rcvdecr
q by line 21. From the
deterministic decision function, our lemma follows.
q, and thus f r
p = rcvpropr
q, rcvdecr
q, πr
p = πr
p = f r
Theorem 4.8 (Agreement). No two correct processes de-
cide differently.
Proof. By Lemma 4.7, two correct processes do not decide
differently if they decide in the same round. It remains to
show that a correct process p does not decide on a different
value from the value another correct process q has decided
in some earlier round.
Assume by contradiction that a correct process p decides
on w ∈ {0, 1} in round r and some distinct correct process
q decides 1 − w in some round s > r. By line 39, ∀i ∈
Π : rcvdecs
q[p] = w
which provides the required contradiction.
q[i] 6= w, but by Lemma 4.4 (3), rcvdecs
As seen above, agreement and validity can be proven in-
dependently of the rounds processes crash in; what is still
missing is liveness. We will see in the following section
that the relation of decision rounds and rounds in which
processes crash is inherent to the problem. In our analy-
sis we hence have to use the round in an execution at which
the last faulty process crashes in order to show termination
(and halting) of our algorithm.
Deﬁnition 4.9 (Last Crash). We deﬁne rc as the minimum
round such that all processes that crash in an execution are
crashed by (i.e., before or in) round rc and all messages
sent by faulty processes are received by round rc.
Observation 4.10 (Clean Round). All rounds r > rc are
clean rounds, i.e., no messages by faulty processes are re-
ceived in rounds r.
Until now we considered safety, i.e., we ensured that if
a correct process decides in line 41, validity and agreement
hold.
In the following, we show liveness, i.e., line 41 is
eventually reached by every correct process in every execu-
tion. We prove that if all faulty processes are crashed and
their messages are received, the system is in a “clean” state
such that the consistency checks in line 38 and line 39 allow
to reach a decision at every correct process.
Theorem 4.11 (Termination). Eventually, every correct
process decides.
Proof. Let r be the minimal round such that r > rc and
r(mod)2 = 0. If all correct processes decide before round r
we are done. So in the remainder of this proof we consider
only the case where at least one correct process p does not
decide before round r.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007In the following we will show that every correct process
that does not decide before round r decides at the end of
round r + 1 by executing line 41. By observing the code,
a correct process executes line 41 only if the statement in
line 38 evaluates to TRUE and if |W| > 0, where W is com-
puted in line 39. We will show that these two requirements
are met in Lemma 4.14, Lemma 4.15, and Lemma 4.16 af-
ter the following preliminary lemmas. We start with the
following corollary which follows from Lemma 4.4 (4).
Corollary 4.12. For every correct process p and every
faulty process i it holds that rcvdecr+1
Lemma 4.13. For every two correct processes p and q
=