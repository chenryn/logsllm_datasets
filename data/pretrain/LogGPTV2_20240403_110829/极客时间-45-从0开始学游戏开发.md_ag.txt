## 3. 选择编程语言版本 {#07.html#3-}在开发的过程中，一定会用到 C/C++ 语言。如果你要使用 VC++的话，会涉及购买、安装和配置等情况。为了使这个专栏的内容尽量简洁、可用，我建议使用Windows 下，移植版本的 GCC 和 G++ 进行编译（也就是 MinGW 移植版），GCC版本为 4.2.x或者以上版本。有人说这些版本太老了，我认为，**初学阶段，版本越新，意味着你需要知道的编译器内容和编译器开关就越多，]{.orange}**因此建议你选择较为稳定的4.2.x 或以上版本。对于 C++ 而言，我们也不需要用到最新的 C++ 标准，比如 C++11 等。对于 C语言，我们默认使用 C89 或者 C99都是可以的。简洁、高效、显而易见，是我一向遵从的原则。
## 4. 下载编译器 {#07.html#4-}关于 C/C++，你可以去 MinGW 官网下载 4.2.x版本。当然如果你希望使用其他更新的版本也不是不行，你可以直接下载安装器，来获取编译器的版本。下载地址是这个：你也可以按照你的需求定制下载。如果要成为完整的编译器，必须下载这些内容：``{=html}-   MinGW (C/C++) Compiler-   Binutils-   Windows32 API-   MinGW Runtime Libraries-   GNU Debugger (GDB)-   GNU Make一般来讲，使用安装器下载的编译器都是最新版本的，如果你需要下载特定的版本号，你可以在这个网址下，找到相应的编译工具目录和对应的版本号。这样，C/C++编译器就下载完成了。如果你是自己下载特定版本号的话，需要将所有包解压缩在一个指定的目录下，解压缩出来的目录结构一般有这几个常用子目录：bin、include、lib、share、local、etc、var。
## 5. 选择 C/C++ 和 Python 的 IDE {#07.html#5-c-c-python-ide}接下来，我们需要一套 IDE 来帮助我们进行 C/C++ 和 Python 的开发。**C/C++ 方面，我选择使用免费的 MinGW Studio 来完成。**MinGW Studio的界面绝大部分模仿了经典的 VC6 的 IDE界面。虽然相对于更时髦的收费编译器来说，MinGW Studio没有特别智能的代码提示，但是可以方便我们完成程序的调试。我们可以通过搜索引擎搜索到并且顺利地下载 MinGW Studio。有一些 IDE 是自带C/C++ 编译器的，这种包也没有问题。如果你对 C/C++这部分设置比较熟悉，你也可以自由选择其他 IDE，比如DevCpp、CodeLite、CodeBlocks 等等。**至于 Python 方面，我们可以使用 WingIDE。**这是一个付费项目。也可以使用国内程序员编写的Ulipad，另一个付费软件 Komodo，用来做 Python、Ruby 的 IDE 都很合适。至于Wing IDE，我们可以在 wingware.com 下载最新版本。
## 6. 带你一起测试编译器的运作 {#07.html#6-}首先，我们需要先测试编译器是否运作顺利，所以我选择 Lua来进行编译。在将来，需要使用 Lua的时候，必须将之编译为**静态库**或者**可执行文件**。我们打开 MinGW Studio，界面是这样的：![](Images/91f06a646c6762b57f4623f049966496.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/e9/13/e9ff8b431d455f4a03cef636dd838e13.jpg"}我们可以在 Edit-\>Options-\>Compiler 选项里设置具体的编译器路径，以便让IDE 找到编译器来开始工作。![](Images/cc33dc94aa5c67cc138974178b8ff337.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/d8/e0/d8affea68aed61a67f25a8bd04d766e0.jpg"}一般编译器的路径都会自带 bin 目录，所以设置的目录必须在 bin目录的上级目录。比如我们设置的 MinGW 编译器路径为 C:\\MinGW，那么 bin目录就是 C:\\MinGW\\bin，所以在 IDE 的设置下，只需要设置为 C:\\MinGW就可以了。我们将下载到的 Lua5.x.x.tar.gz 解压缩到某个目录。在我写文章的时候，Lua的最新版本是 5.3.4。在这个目录下，并没有我们所需要的 MinGW Studio的项目文件，所以我们需要手工建立一个。我们在 File-\>New-\>Projects选项下，建立一个 Win32 Static Library，也就是 Windows 静态库，将名字设为lua。![](Images/7033dd75a7f1a14e562c27ee25a2dc30.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/01/84/016bd92e192c42b2b53aa076c6277f84.jpg"}然后我们将文件添加到项目里面，在项目虚拟目录里面，点击鼠标右键。![](Images/df02e3220099aacae514853d151cc65f.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/0b/29/0bf22ba55c20fd93198d335260842629.jpg"}在弹出的选择文件对话框里，选中刚才解压缩出来的 Lua 目录，选择 src目录下的所有或椎为.c 的文件，随后，我们将 lua.c排除在外（选中，右键，选择移除出项目）。因为我们制作静态库的时候，可以不用这个文件。![](Images/9589c4aa318bd25137d6aedc7ce3e296.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/90/d2/90a6974f6a57c8530f52dda064878ad2.jpg"}我们可以点击 Build-\>Build选项来进行编译，编译完成后，如果编译成功的话，我们会在 Debug目录下看到一个.a 文件。如果你的项目名叫 lua，那么制作出来的静态库就是liblua.a，所以个文件就是我们以后要用到**Lua 静态库**。如果你有一定的编程经验的话，可能已经看到，我们现在编译出来的是Debug，是调试版本，我们暂且不去管它。这个在后面我们会进行详细地探讨，目前我们只需要知道这一系列的使用方式和方法就可以了。我们已经将 Lua 编译完毕了，后续的文章中我会教你使用 Lua 静态库。接下来，我们尝试使用 Python 语言。你可以使用任何一个上述推荐的专业 IDE来编写 Python 代码。实际上，Python 的 IDE 不需要过多的配置。因为安装在Windows 机器上后，Python 的路径会被注册到系统。通常 IDE 会自动找到Python 执行文件，并且，IDE 的 Shell 窗口将会正确地找到 Python并看到其互动窗口，就像这张图的内容：![](Images/0c2354629d8b93143d31b9712ba00458.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/05/82/057511edf04d2d71904b44f1462c2182.jpg"}现在，我们尝试在 IDE 中编写一小段 Python测试代码，然后跑一下。程序运行结果就是打印一个 test 字符串。    import os, sysif __name__ == '__main__':   print 'test'最后，将该文件保存后缀为.py 的文件，这就是 Python 源代码。
## 7. 专为 Python 开发的游戏库 Pygame {#07.html#7-python-pygame}在这里，为你介绍一个专门为 Python 开发的游戏库 Pygame。至于为什么选择Pygame，我在第四节讲底层绘图接口的时候已经解释了一些。这里再说一下。Pygame 包装了 SDL 的实现。在编写 2D游戏方面，它的表现可以用三个词来形容：**成熟，稳定，简单**。它把一些细枝末节隐藏在了Python 语法背后，当然也有 Ruby 语言封装的RubyGame，但是很多人对于这种魔幻的语言并不是特别了解，所以选择简洁的Python 语法 +SDL 库封装是最合适的选择。今后我们会编写游戏的示例Demo，一些轻量级的、游戏的某一部分的说明和介绍，我会使用 Pygame进行简单的阐述。Windows 版本我们点击这个网址下载这个版本的源代码。如果你不愿意下载源代码，也可以根据自己对应的 Python版本号下载对应的二进制包，支持 Python 2.4 到 3.2 的版本。    pygame-1.9.1.win32-py2.7.msi 3.1MBpygame-1.9.1release.win32-py2.4.exe 3MBpygame-1.9.1release.win32-py2.5.exe 3MBpygame-1.9.1.win32-py2.5.msi 3MBpygame-1.9.1.win32-py2.6.msi 3MBpygame-1.9.2a0.win32-py2.7.msi 6.4MBpygame-1.9.1.win32-py3.1.msi 3MBpygame-1.9.2a0.win32-py3.2.msi 6.4MB如果你安装的是 64 位 Windows 和 64 位 Python，注意 Pygame 版本和 Python都需要是 32 位的，才能完美兼容和使用。
## 小结 {#07.html#-}好了，这节内容差不多了。我来总结一下。在这一节中：-   我先从各操作系统下的调试工具、IDE    开发环境、显卡驱动等三个方面，分析了为什么选择在 Windows    环境下进行开发；-   然后，我还带你梳理了一遍开发所需要的语言和工具，并且提供了下载的网址和安装的方法；-   之后，我还带你测试了 Lua    脚本语言在编译器中的编译并且生成了静态库文件。-   最后给你介绍了 Pygame，今后将会用到这个 Python 下的 2D    游戏开发引擎。最后，给你留一个思考题吧。你可以结合之前几节的内容，思考一下，Pygame 绑定 SDL绘图接口是如何实现的？欢迎留言说出你的看法，我在下一节的挑战中等你！![](Images/687aa95b3803eb0079b384dbad39d165.png){savepage-src="https://static001.geekbang.org/resource/image/1d/cf/1dddc22b262072c5c2e8b4937907f7cf.jpg"}
# 第7讲 \| 如何建立一个Windows窗体？今天，我要跟你分享开发 Windows 游戏的第一步，建立窗体。上一节，我讲解 Python 和 C++ 的编译器，以及它们各自对应的 IDE该如何选择，并且测试了 C/C++ 的运行，编译了一个 Lua静态库。准备工作基本上算是完成了。如果你有一些编程功底，应该知道建立 Windows的窗体所需的一些基础知识。如果你经验稍丰富一些，还应该知道Delphi、C++Builder、C#等等。这些工具都可以帮助你非常方便地做出一个空白窗体，但是这些窗体并没有游戏的绘图系统，所以它们只是"建立了一个标准窗体"而已。因此，虽然建立窗体是我们这一节的内容，但**我们要探讨的是，在窗体背后，Windows系统做了什么。**