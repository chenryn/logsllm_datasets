built this model in Appendix A.2.
To compute the induced cache inclusion function ˜𝜏 for (𝑝, 𝜏 )
and TypTop with a given caching policy, we simulate the asso-
ciated transcript generator 𝒯 using the password distribution 𝑝
and the typo distribution 𝜏. For each password 𝑤, we sample 𝑛
strings ˜𝑤1, . . . , ˜𝑤𝑛 according to 𝜏𝑤. This captures a user with reg-
istered password 𝑤 who makes a series of login attempts including
some typos. We run PChecker (with default parameters) on in-
put (𝑤, ˜𝑤1, . . . , ˜𝑤𝑛, 𝑤), where the final correct password entry is
included to ensure at least one cache update occurs. We ran the
simulation 𝑚 times for each password 𝑤, and set ˜𝜏𝑤 ( ˜𝑤) to be the
fraction of these 𝑚 runs that the typo ˜𝑤 lies in the final cache of
the password 𝑤. We repeat this process for all four caching policies
described in Section 4. Via preliminary simulations on a small sub-
set of randomly sampled passwords with different values of 𝑚 and
𝑛, we found that ˜𝜏𝑤 changed very little for 𝑛 ≥ 1000 and 𝑚 ≥ 200;
therefore we set 𝑛 = 1000 and 𝑚 = 200 for our full simulation.
Running the simulation for each of the passwords in the RockYou
leak would be very slow, so we estimate ˜𝜏𝑤 using the 𝑘 most proba-
ble passwords in the RockYou leak for 𝑘 ∈ {1, . . . , 10}× 104. With
this in place, we compute the edge-weight 𝑏 ˜𝜏 ( ˜𝑤) =
𝑤 ˜𝜏𝑤 ( ˜𝑤)
for each possible typo ˜𝑤, and report the maximum observed edge-
weight for each 𝑘 and caching policy in Figure 6.
For all four caching policies, we found that ˜𝜏𝑤 comfortably sat-
isfies the desired 5-sparsity condition (recall that we implement
TypTop with cache size 𝑡 = 5) for all 𝑘 ≤ 105. The largest ob-
served edge-weight was 4.2 for the MFU caching policy, with a
204060801001234Numberofpasswordsconsidered(×103)max𝑏˜𝜏(˜𝑤)LFUPLFULRUMFUCCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
Another variety of online attack against adaptive checkers con-
siders an adversary who is able to interleave his guesses with correct
password submissions by the legitimate user. For TypTop these cor-
rect submissions trigger cache updates, so it is possible that one of
the attacker’s guesses, stored in the wait list, is allowed into the
cache.
Recall that we set TypTop’s admissible typo policy so only typos
within DL distance one of the real password are allowed in the
cache. This in itself provides a degree of protection against these
interleaving attacks. We additionally propose a simple countermea-
sure which virtually eliminates them. We can associate an origin
tag (such as an IP in the web login setting, or TTY id in an SSH
login) to each entry in the wait list; only entries originating from
destinations at which the user has successfully authenticated are
allowed to enter the cache. This may exclude the occasional typo
made by a legitimate user from a new location; we defer a detailed
treatment of this attack and countermeasures to future work.
6 EVALUATING UTILITY
In this section, we investigate how successful TypTop is at correct-
ing user’s password typos under different parameter settings and
ultimately select the best performing ones for real world deploy-
ment. To gather data about user’s password typing patterns, we
conducted an experiment on Amazon Mechanical Turk (MTurk).
We define the utility of a typo-tolerant PBAS to be the frac-
tion of typos accepted by the checker taken across the popula-
tion; formally the utility of a PBAS Π is defined Utility(Π) =
# (typos accepted by Π) / # (typos observed). The same utility met-
ric is used by Chatterjee et al. in [8], allowing for a direct comparison
of results.
6.1 Data Collection From MTurk
Our study — designed to capture the password typing behavior of a
user who first registers a password with a service, and then reenters
this password to authenticate himself at subsequent logins — asks
an MTurk worker to choose a password and type it repeatedly over
a period of time. The design is similar to that of Komanduri et al.
in [19], and has two stages: registration and login. Registration
consists of a single MTurk HIT (Human Intelligence Task) in which
we ask the worker to choose a password that is at least 8 characters
long, as if they were registering with an email provider. They are
encouraged to choose a password which is strong and distinct from
any of their existing passwords, and are informed that they must
memorize this password for future logins. As with many registration
forms, they must type the password twice. The user then fills in a
short survey (1–2 questions) as means of distraction, and then is
instructed to attempt to login with their registered password via
a login form. The worker has to type the password correctly to
be able to submit the HIT. An option for a “forgotten password”
link is provided; however this link delays the HIT by 20 seconds,
discouraging them from clicking it frequently. We informed workers
that they must type their passwords manually and avoid browser
auto-fills. We recorded every keypress made inside the password
boxes and used heuristics to reject any submissions that did not
appear to have been typed in.
After this registration step is complete, we create a sequence of
10
50 user-specific HITs for the worker, which they alone may view
and complete; this allows us to track individual user’s typing habits
over different login attempts, while keeping their chosen password
confidential. Each HIT consists of the same login form used in
the final step of the registration stage. The user must complete
the login, then answer a few questions on their demographics or
password typing behavior. New HITs are created an hour after the
submission of the last HIT to prevent workers from completing
them back-to-back; we notify the workers when a new HIT is
available. The workers are paid $0.05 for each HIT they complete,
with an additional bonus of $0.04 for completing every five HITs.
Data cleansing and demographics. Due to various incompat-
ibility issues with rare browser versions and submissions which
appeared to have been auto-filled, data from 42 workers had to be
discarded. Of the remaining 438 workers, 271 (61.9%) made at least
10 login attempts. In all subsequent analysis, we only consider the
data from these 271 workers. Based on the demographics survey,
we found that 48% of the 271 workers are males and 52% female;
only 35 (13%) of the users are left handed with the rest right handed.
117 (43%) of the users belong to the age group 18–30, 108 (40%)
belong to the age group 31–45, 30 (11%) to the age group 46–60,
and 16 (6%) are above the age of 60.
6.2 Analysis of Passwords and Typos
All of the passwords chosen by the MTurk workers were unique,
with a median and average length of 10 and 10.9 characters respec-
tively, and average estimated zxcvbn strength of 31.5 bits. Most
passwords included special characters, numbers and different case
letters. Overall the passwords chosen by MTurk workers were
stronger than those seen in most password leaks (e.g., passwords
in the RockYou leak have a median password length of 7 charac-
ters and average zxcvbn entropy of 14.2 bits). While we expect our
results to hold for weaker password choices, further studies will
need to be performed to confirm this.
The workers made a median of 30 login attempts per person
and 8,739 login attempts in total; 491 (5.6%) of these contained at
least one incorrect password submission. Within the login attempts,
there were a total of 9,440 password submissions; of these 701 (7.4%)
were incorrect, with 484 (70%) of these incorrect submissions lying
within DL distance 2 of the real password — as per the discussion in
Section 3, we classify these 484 incorrect submissions as typos, and
therefore eligible for typo-tolerance in our subsequent analysis. A
classification of typos into exclusive categories is shown in Figure 7;
our study finds similar user typo behavior to that observed by
Chatterjee et al. in [8]. Looking ahead, we will calculate the utility
of a given implementation of TypTop to be the fraction of these
484 typos accepted by that implementation.
A graph depicting the DL distances of incorrect password sub-
missions is given in Figure 9a (the blue line). In total, 366 separate
login attempts (4.2%) required at least one password resubmission
due to a typo. We found that 167 users (62%) made at least one
typo, with 95 (35%) making at least two typos in two different login
attempts.
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Typo Category
Caps Lock
Shift first char
One insertion
One deletion
One replacement
Transposition
Two insertions
Two deletions
Two replacements
Other
% of Typos % of Users
21
7
28
25
47
7
5
5
20
16
14
4
12
12
31
4
3
3
10
8
Figure 7: Categorization of typos observed in the MTurk study. The
middle column gives the percentage of observed typos which were
of each category. The rightmost column gives the percentage of
users who made a typo of that category.
6.3 Simulation Setup
We perform simulations using the data from our MTurk study to
evaluate the utility of various combinations of cache sizes, caching
schemes, and typo admission policies. In more detail, we consider:
∙ Cache size: While a larger cache allows us to accept more
typos and increases utility, this benefit needs to be weighed up
against the greater computational power required to process
larger caches, and the potential degradation in online security
from allowing more typos to authenticate. We consider caches
of size 𝑡 for 𝑡 ∈ {2, 3, 5} in our simulations.
∙ Caching Schemes: We consider all of the caching schemes
discussed in Section 4: LRU, LFU, PLFU, MFU, and Best-𝑡. To see
how TypTop compares with the relaxed checking approach of
Chatterjee et al., we also run simulations for the relaxed checker
using the Top-𝑡 corrector functions as per [8], which in order of
their efficacy are: flipping the case of all characters, flipping the
case of the first character, removing the last character, removing
the first character, and applying shift to switch the last digit to
a symbol.
∙ Typo admission policy: As discussed in Section 4, admissible
typos must satisfy three criteria:
(2) 𝜇 ˜𝑤 > 𝑚; and (3) 𝜇 ˜𝑤 > 𝜇𝑤 − 𝜎. We
(1) DL(𝑤, ˜𝑤) ≤ 𝑑;
investigated all combinations of the values 𝑑 ∈ {1, 2}, 𝑚 ∈
[0, 40], and 𝜎 ∈ [0, 9].
∙ Warming up the cache: Since warming up the cache allows
us to tolerate typos from the very first login, it can only in-
crease utility. Additionally our security simulations in Section 5,
which were all performed with warmed caches, indicate that
this practice does not negatively impact security. As such we
warm caches with the 𝑡 most probable typos according to our
typo model (see Appendix A.2).
For each set of parameter choices in the scope of the above, we
simulate each worker’s login behavior by replaying their password
submissions to the password checker being evaluated. We report the
utility for each of these configurations below; recall that the utility
of a checker Π is defined to be Utility(Π) = # (typos accepted by Π) /
# (typos observed), where both numerator and denominator are
taken across all users.
11
CP
LFU
PLFU
MFU
LRU
Best-𝑡
Top-𝑡
𝑑 = 1
𝑡=3
21
22
21
21
19
19
𝑡=2
18
19
18
17
16
18
𝑡=5
26
27
26
27
23
22
𝑑 = 2
𝑡=3
24
26
25
25
19
19
𝑡=2
19
22
19
19
16
18
𝑡=5
31
32
30
32
23
22
Figure 8: The utility of different caching policies (CP), cache sizes
(𝑡) and edit distance cutoff (𝑑) for admissible typos, when applied to
the login transcripts of all MTurk workers who made at least one
typo. We impose no guessability restrictions on admissible typos.