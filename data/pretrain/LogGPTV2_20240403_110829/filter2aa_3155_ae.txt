NodeJS
Slash  
Confusion 
http:///foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Invalid URL
Host:None 
Path:/foo.com
Host:foo.com 
Path:None
Invalid URL
Host:foo.com 
Path:None
Invalid URL
Host:None 
Path:/foo.com 
Host:None 
Path:/foo.com
Invalid URL
Host:None 
Path:/foo.com
Lib
urllib 
urlsplit
urllib 
urlparse
urllib 
urlopen
rfc3986
httptools
urllib3
curl lib
wget
Chrome
Uri 
URL 
URI
parse_url
url
Backslash  
Confusion 
http:\\foo.com
Host:None 
Path:/\\foo.com
Host:None 
Path:/\\foo.com
Host:None 
Path:/\\foo.com
Host:None 
Path:%5c%5cfoo.com
Invalid URL
Host:None 
Path:/%5c%5cfoo.com
Invalid URL
Host:None 
Path:/%5c%5cfoo.com
Host:foo.com 
Path:None
Host:foo.com 
Path:None
Host:None 
Path:\\foo.com
Invalid URL 
Host:None 
Path:\\foo.com
Host:foo.com 
Path:None
Scheme  
Confusion 
foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Invalid URL
Host:foo.com 
Path:None
Host:foo.com 
Path:None
Host:foo.com 
Path:None
Behaviour  
changes based  
on usage
Invalid URL
Invalid URL
Host:None 
Path:/foo.com
Host:None 
Path:foo.com
Host:None 
Path:foo.com
URL-Encoded  
Confusion 
http://%66%6f%6f%2e%63%6f%6d
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Host:foo.com 
Path:None
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Invalid URL
Host:foo.com 
Path:None
*Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Host:foo.com 
Path:None
Host:foo.com 
Path:None
Invalid URL 
Host:foo.com 
Path:None
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
SUMMARY
claroty.com
24
Copyright © 2021 Claroty Ltd. All rights reserved
* Following our report, this was fixed in cURL to be compatible with RFC 3986.
NodeJS
Go
Ruby
Perl
Host:foo.com 
Path:None
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
Host:None 
Path:/foo.com
url-parse
net/url
uri
URI
Host:foo.com 
Path:None
Invalid URL
Invalid URL
Host:None 
Path:%5c%5cfoo.com
Host:None 
Path:foo.com
Host:None 
Path:foo.com
Host:None 
Path:foo.com
Host:None 
Path:foo.com
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Invalid URL
Host:%66%6f%6f%2e%63%6f%6d 
Path:None
Host:foo.com 
Path:None
claroty.com
25
Copyright © 2021 Claroty Ltd. All rights reserved
EXPLOITING URL CONFUSION 
VULNERABILITIES
Different parsing primitives of URLs could actually lead to many different vulnerabilities and security issues. As a rule of 
thumb, when parsing the same data, all parsers should be deterministic and return the same results. By not doing so, the 
parsers introduce a level of uncertainty to the process, and create a wide range of possible vulnerabilities. 
An attacker, for example, could bypass most validations performed by the server using a crafted, malicious URL that a  
server would parse incorrectly. This validation bypass exposes a wide range of vulnerabilities to the malicious actor, 
enabling many kinds of vulnerabilities to be exploited. For example, secure filter bypass, SSRF, open redirect attacks, denial 
of service, and more. 
Let’s illustrate these scenarios through some of the vulnerabilities we uncovered: 
CLEARANCE (RUBY)
CVE-2021-23435: Open Redirect Vulnerability
An open redirect vulnerability is most prevalent in the world of phishing and man-in-the-middle attacks (MITM). This 
vulnerability occurs when a web application accepts a user-controlled input that specifies a URL that the user will be 
redirected to after a certain action. The most common actions are a successful login, log out, and others. In order to protect 
the users from an open redirect attack, the web server validates the given URL and allows only URLs that belong to the 
same site or to a list of trusted domains.
An example of an attacker sending a user a malicious link to a vulnerable site, 
that will redirect the user to an attacker-controlled site.
evil.com
foo.com
Hi,foo.com
Check this website
foo.com?u=///evil.com
Go to ///evil.com
claroty.com
26
Copyright © 2021 Claroty Ltd. All rights reserved
Our vulnerability was identified in the Clearance Ruby gem. Clearance is a library meant to enhance and extend the 
capabilities of Ruby’s Rails framework by adding simple and secure email and password authentication. 
Since Clearance is a third-party add-on to Rails, many applications choose to use Clearance instead of implementing their 
own authentication, making them vulnerable to open redirect attacks in proxy. Thus, this vulnerability could put thousands 
of  web applications at risk.
Clearance derives the redirection URL from the path segment of the supplied URL and stores it in a session variable:
The vulnerable function inside Clearance is return_to. This function is meant to be called after a login/logout procedure, 
and should redirect the user safely to the page they requested earlier:
In order to eliminate a potential open redirect vulnerability, return_to does not allow users to freely supply a return_to 
URL, instead whenever a user tries to access a URL and they’re  not logged in, the server keeps the URL they’ve tried to 
access inside the session variable. However, the user can control this variable in two cases:
1. The developer explicitly retrieves it from the request: 
  session[:return_to] = controller.params[:return_to] 
2. Accessing a route without being logged-in. In this case Clearance automatically redirects the user to the login page  
    and sets the session[:return_to] variable to the requested path.
Given these conditions, if a malicious actor is able to convince a user to press on a specifically crafted URL of the following 
form, they could trigger the open redirect vulnerability:
Since Clearance is a third-party add-on to Rails, many applications choose to use Clearance 
instead of implementing their own authentication, making them vulnerable to open redirect 
attacks in proxy. Thus, this vulnerability could put thousands of  web applications at risk. 
Clearance derives the redirection URL from the path segment of the supplied URL and stores it 
in a session variable: 
The vulnerable function inside Clearance is return_to. This function is meant to be called 
after a login/logout procedure, and should redirect the user safely to the page they requested 
earlier: 
In order to eliminate a potential open redirect vulnerability, return_to does not allow users to 
freely supply a return_to URL, instead whenever a user tries to access a URL and they're  
not logged in, the server keeps the URL they’ve tried to access inside the session variable. 
However, the user can control this variable in two cases: 
1. The developer explicitly retrieves it from the request:  
session[:return_to] = controller.params[:return_to]  
2. Accessing a route without being logged-in. In this case Clearance automatically redirects 
the user to the login page and sets the session[:return_to] variable to the 
requested path. 
Given these conditions, if a malicious actor is able to convince a user to press on a specifically 
crafted URL of the following form, they could trigger the open redirect vulnerability: 
Since Clearance is a third-party add-on to Rails, many applications choose to use Clearance 
instead of implementing their own authentication, making them vulnerable to open redirect 
attacks in proxy. Thus, this vulnerability could put thousands of  web applications at risk. 
Clearance derives the redirection URL from the path segment of the supplied URL and stores it 
in a session variable: 
The vulnerable function inside Clearance is return_to. This function is meant to be called 
after a login/logout procedure, and should redirect the user safely to the page they requested 
earlier: 
In order to eliminate a potential open redirect vulnerability, return_to does not allow users to 
freely supply a return_to URL, instead whenever a user tries to access a URL and they're  
not logged in, the server keeps the URL they’ve tried to access inside the session variable. 
However, the user can control this variable in two cases: 
1. The developer explicitly retrieves it from the request:  