pk and pk(cid:48) in the construction of B). All in all we have shown AdvANON
S,Sim,B(λ), which is
negligible by assumption. The implication IND-FKE ⇒ ANON-FKE is shown analogously.
(cid:117)(cid:116)
Lemma 5 (IND ⇒ CONF, IND-FKE ⇒ CONF-FKE). Every indistinguishable signature scheme is conﬁden-
tial. The same implication holds in presence of full key exposure.
Proof. Let S be an indistinguishable signature scheme with simulator Sim. For a CONF-adversary A con-
∗
(λ), except challenge signatures σ∗ are computed as
S,Sim,A(λ), which is like ExpCONF,0
sider experiment Exp
σ∗ ← Sim(1λ,|m0|). Construct IND-adversary B deﬁning B1,B2 as follows: B1, on input pk and with or-
acle Sign(sk,·), runs ASign(sk,·),Sign(sk(cid:48),·)
(pk) twice as a black-box, relaying oracle queries to Sign(sk,·) and
answering Sign(sk(cid:48),·) queries itself, to obtain (m0, t0) and (m1, t1), respectively. Algorithm B1 aborts if
|m0| (cid:54)= |m1|. Else it outputs (m0, t0) and stops. B2, on input pk and challenge signatures σ, feeds σ into A2
(together with pk). Value t(cid:48) output by A2 is used as return value t(cid:48) of B2. Now we have
S,A
1
(λ) = 1(cid:3) − Pr(cid:2)Exp
(cid:12)(cid:12)(cid:12)Pr(cid:2)ExpCONF,0
Equality(cid:12)(cid:12)Pr[ExpCONF,1
S,A
S,A
(λ) = 1]−Pr[Exp
∗
∗
S,Sim,A(λ) = 1(cid:3)(cid:12)(cid:12)(cid:12) =
(cid:12)(cid:12)(cid:12)Pr(cid:2)ExpIND,0
S,Sim,A(λ) = 1](cid:12)(cid:12) = AdvIND
= AdvIND
S,Sim,B(λ) = 1(cid:3) − Pr(cid:2)ExpIND,1
S,Sim,B(λ) = 1(cid:3)(cid:12)(cid:12)(cid:12)
S,Sim,B(λ).
S,Sim,B(λ) can be shown similarly (by letting B1
S,Sim,B(λ), which is
(cid:117)(cid:116)
S,A (λ) ≤ 2 · AdvIND
output (m1, t1) instead of (m0, t0)). All in all we have shown AdvCONF
negligible by assumption. The implication IND-FKE ⇒ CONF-FKE is shown analogously.
4.1 Techniques and Examples
We now exemplify IND constructions using three known signature schemes: FDH-RSA [4], Schnorr [25], and
Boneh-Boyen [5]. That is, we show that indistinguishable schemes can be obtained in diﬀerent cryptographic
setting, i.e. RSA, discrete logarithms (DL), and pairings. We notice that our techniques can be applied to
many existing schemes that either fulﬁll this privacy notion directly or can be slightly modiﬁed to become
indistinguishable.
RSA-based Construction. On the example of FDH-RSA [4], which is neither conﬁdential nor anonymous,
we demonstrate two techniques to obtain indistinguishability. First, we apply a randomized hash [2], where
a message m is hashed together with some randomness r, which is chosen within the signing procedure.
The hash value H(m, r) is then used in the signing algorithm (instead of m), and r is appended to the
resulting signature. This method eliminates information recovery since the output of Inf(pk, m) depends now
on H(m, r) (and not only on m), and the probability that the ﬁrst stage IND adversary learns information
about H(m, r) is negligible (given that r is suﬃciently long and chosen in the challenge phase). We can
then apply padding to hide the length of signature components that are elements of ZN , and by this protect
anonymity [28]. These methods turn out to be suﬃcient for the indistinguishability of the scheme.
Randomized FDH-RSA with Padding. Let GenRSA(1λ) denote an algorithm that outputs tuples (N, e, d)
where N is an RSA modulus, i.e. N = pq for two prime numbers p and q of length λ/2, and e, d ∈ Z×
with ed = 1 mod ϕ(N ), where ϕ(N ) = (p − 1)(q − 1). Let HN : {0, 1}∗ → ZN be a hash function modeled as
random oracle and Zλ be a ﬁxed number of 2λ bits, independently of N . The randomized FDH-RSA scheme
with padding is deﬁned as follows.
ϕ(N )
11
FDH-RSA.KGen(1λ) :
FDH-RSA.Sign(sk, m) :
FDH-RSA.Ver(pk, m, σ) : Parse σ as (σ(cid:48), r). Let h(cid:48) ← HN (m(cid:107) r) and h := (σ(cid:48))e mod N . Output h = h(cid:48).
Let (N, e, d) ← GenRSA(1λ), pk := (N, e), and sk := d. Output (sk, pk).
Choose r ∈R {0, 1}λ and k ∈R [0,(cid:98)Zλ/N(cid:99) − 1]. Let σ(cid:48) := HN (m (cid:107) r)d mod N .
Output σ := (σ(cid:48) + kN, r).
Observe that on each signature σ(cid:48) a probabilistic padding is applied, computing k ∈R [0,(cid:98)Zλ/N(cid:99)−1], σ :=
σ(cid:48) + kN , which can be reversed by computing σ(cid:48) := σ mod N . It maps uniformly distributed integers from
[0, N − 1] to (nearly) uniformly distributed integers in [0, Zλ − 1] (cf. Lemma 13).
Lemma 6. The probabilistic FDH-RSA scheme with padding is indistinguishable with full key exposure, in
the random oracle model.
Proof. We will consider the simulator Sim that, on input security parameter 1λ and message number (cid:96),
outputs a vector of (cid:96) integers in [0, Zλ − 1], drawn uniformly at random. Let A = (A1,A2) be any indistin-
guishability adversary against the modiﬁed FDH-RSA scheme. Consider experiments ExpIND,0,j
FDH-RSA,Sim,A(λ),
FDH-RSA,Sim,A(λ), except that the ﬁrst j signatures in σ∗ are simulated using Sim(1λ, j), i.e.
similar to ExpIND,0
ExpIND,0
FDH-RSA,Sim,A(λ) for some (cid:96) polyno-
mially bounded by λ. It will suﬃce to prove that
FDH-RSA,Sim,A(λ) and ExpIND,1
FDH-RSA,Sim,A(λ) = ExpIND,0,0
FDH-RSA,Sim,A(λ) = ExpIND,0,(cid:96)
(cid:105) − Pr
(cid:104)
(cid:105)(cid:12)(cid:12)(cid:12)
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
ExpIND,0,j
FDH-RSA,Sim,A(λ) = 1
ExpIND,0,j+1
FDH-RSA,Sim,A(λ) = 1
Let Exp be the experiment which is like ExpIND,0,j
is negligible for all j.
FDH-RSA,Sim,A(λ) except that, in the generation of the (j + 1)th
signature of σ∗, we replace the output of hash function HN by a value h ∈R ZN , picked uniformly at random
(or, equivalently, we use the value hd, for h ∈R ZN ). By the Random Oracle Model, this change can only be
detected by adversaries that correctly guess both: message m and randomizer r. But this will happen only
with negligible probability, since A1 would have to guess r ∈ {0, 1}λ, and A2 would have to guess m, which
has large entropy. Consider now the hop to experiment ExpIND,0,j+1
FDH-RSA,Sim,A(λ), which is exactly like Exp, except
that the returned (j + 1)th ‘signature’ is not computed via the padding, i.e. σ = (h + kN, r), but instead
via σ = (h(cid:48), r), where h(cid:48) ∈R [0, Zλ − 1]. We will show in Lemma 13 (1) that this introduces only a negligible
(cid:117)(cid:116)
statistical diﬀerence between the output distributions of Exp and ExpIND,0,j+1
FDH-RSA,Sim,A(λ).
DL and Pairing-Based Constructions. We now move to the DL and pairing-based settings and focus
on the signature schemes by Schnorr [25] and by Boneh and Boyen [5], respectively.
Schnorr Signature Scheme. Let G = (cid:104)g(cid:105) be a cyclic group of prime order q, where |q| = λ, and H : {0, 1}∗ →
Zq be a hash function modeled as random oracle. Schnorr’s signature scheme is speciﬁed as follows.
SCH.KGen(1λ) :
SCH.Sign(sk, m) : Choose r ∈R Zq. Let c ← H(gr (cid:107) m) and s := sk · c + r mod q. Output σ := (c, s).
SCH.Ver(pk, m, σ) : Parse σ as (c, s). Compute c(cid:48) ← H(pk−c · gs(cid:107) m). Output c = c(cid:48).
Choose x ∈R Zq. Output (sk, pk) := (x, gx).
In the indistinguishability analysis (akin to prior work on anonymity and conﬁdentiality of the scheme [16,28])
we assume that all signers use the same group G.
Lemma 7. The (generalized) Schnorr signature scheme is indistinguishable with full key exposure, in the
random oracle model.
Proof. Consider the following simulator Sim: On input security parameter 1λ and message number (cid:96), Sim
(cid:96)) ∈R Zq × Zq and outputs σ∗ = (σi)1≤i≤(cid:96), where
independently samples (cid:96) random pairs (c(cid:48)
i). Let A = (A1,A2) be any indistinguishability adversary against the Schnorr signature scheme.
σi = (c(cid:48)
SCH,Sim,A(λ), except that the ﬁrst j signatures in σ∗
Denote by ExpIND,0,j
SCH,Sim,A(λ) the experiment that is like ExpIND,0
1), . . . , (c(cid:48)
1, s(cid:48)
(cid:96), s(cid:48)
i, s(cid:48)
12
are simulated using Sim(1λ, j), i.e. ExpIND,0
for some (cid:96) polynomially bounded by λ. It suﬃces to prove that, for all j,
SCH,Sim,A(λ) = ExpIND,0,0
SCH,Sim,A(λ) and ExpIND,1
SCH,Sim,A(λ) = ExpIND,0,(cid:96)
SCH,Sim,A(λ)
(cid:105)− Pr
(cid:104)
(cid:105)(cid:12)(cid:12)(cid:12)
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
ExpIND,0,j
SCH,Sim,A(λ) = 1
ExpIND,0,j+1
SCH,Sim,A(λ) = 1
Denote by Exp the experiment which is like ExpIND,0,j
is negligible.
SCH,Sim,A(λ) except that, in the generation of the (j + 1)th
signature of σ∗, we replace the output of hash function H by a value c(cid:48) ∈R Zq, picked uniformly at random.
By the Random Oracle Model, this change can only be detected by adversaries that correctly guess both:
group element gr and message m. This will happen only with negligible probability, since A1 would have
q ≈ 2−λ), and A2 would have to guess m, which has large entropy.
to guess gr (with success probability 1
Note that c is now independent of r, i.e., in the calculation of s := sk · c + r, variable r acts like a one-
time pad on sk · c. It follows that also s can be replaced by a uniformly random value s(cid:48) ∈R Zq, without
A noticing it. We have just shown that |Pr[ExpIND,0,j
SCH,Sim,A(λ) = 1] − Pr[Exp = 1]| is negligible, and that
(cid:117)(cid:116)
|Pr[Exp = 1] − Pr[ExpIND,0,j+1
SCH,Sim,A(λ) = 1]| = 0. This concludes the proof.
Boneh-Boyen Signature Scheme. The signature scheme by Boneh and Boyen [5] based on pairings works over
cyclic groups G1, G2, GT of prime order q (with |q| = λ) for which an eﬃcient bilinear map e : G1× G2 → GT
is known. Let g1 and g2 be generators of G1 and G2, respectively. The scheme is speciﬁed for message space
Zq as follows.
BB.KGen(1λ) :
BB.Sign(sk, m) :
BB.Ver(pk, m, σ) : Parse σ as (σ(cid:48), r). Output e(σ, ugm
Lemma 8. The “hash-then-sign” version of the signature scheme by Boneh and Boyen is indistinguishable
with full key exposure, in the random oracle model.
Choose x, y ∈R Zq \ {0}. Let sk := (x, y) and pk := (u, v) = (gx
Choose r ∈R Zq \ {− x+m
y }. Let σ(cid:48) := g1/(x+m+yr)
2 vr) = e(g1, g2).
. Output σ := (σ(cid:48), r).
2 ). Output (sk, pk).
2 , gy
1
We ﬁrst prove that this construction is indistinguishable (in the standard model), yet for uniform message
distributions only, and then generalize this result to arbitrary distributions in {0, 1}∗ (in the random oracle
model).
Lemma 9. Signature scheme BB is (perfectly) indistinguishable with respect to full key exposure, for uni-
formly distributed messages.
BB,Sim,A(λ) = ExpIND,0,(cid:96)
Note that in BB.Sign the mapping r (cid:55)→ σ(cid:48) = g1/(x+m+yr)
BB,Sim,A(λ) the experiment that is like ExpIND,0
BB,Sim,A(λ) = ExpIND,0,0
Proof. Consider the following simulator Sim: On input security parameter 1λ and message number (cid:96), Sim in-
dependently samples (cid:96) random pairs (σ(cid:48), r) ∈R (G1 \{1})× Zq. Let A = (A1,A2) be any indistinguishability
adversary against the BB signature scheme such that A1 outputs uniformly distributed messages in Zq. De-
BB,Sim,A(λ), except that the ﬁrst j signatures in σ∗ are
note by ExpIND,0,j
simulated using Sim(1λ, j), i.e. ExpIND,0
BB,Sim,A(λ) and ﬁnally ExpIND,1
BB,Sim,A(λ)
for some (cid:96) polynomially bounded by λ.
is one-to-one between domain Zq \ {− x+m
y }
and range G1 \ {1}. Basically, this is due to the fact that Zq is a ﬁnite ﬁeld, in which all elements but
zero can be multiplicatively inverted. It follows that, if r is picked uniformly at random from the given
domain, then r acts like a one-time pad on m and makes σ(cid:48) uniformly distributed, in A1’s eyes. The analog
holds for A2: This time, it is uniformly distributed message m that makes σ(cid:48) look uniform. This shows that
(cid:117)(cid:116)
Pr[ExpIND,0,j
In general, digital signature schemes are expected to support arbitrary message spaces, i.e. messages
m ∈ {0, 1}∗. As pointed out by Boneh and Boyen [5], their scheme can be converted into an unforgeable
signature scheme for arbitrary long messages by using the “hash-then-sign” approach, for a suitable hash
function H : {0, 1}∗ → Zq. Such ‘hybrid’ version of BB can still be proven unforgeable in the standard model,
as the only condition posed on H is that of collision-resistance. If, on the other hand, the hash function H
is additionally modeled as a random oracle (that smoothes the entropy in the message space to a uniform
distribution) the proof of Lemma 8 follows directly from Lemma 9.
BB,Sim,A (λ) = 1] for all j, and hence concludes the proof.