the blacklist. When the first args of "file_put_contents" is “"yu.php/.", the *yu.php”"
ssedkq on sAem oo pug on peou no. rooap peodn, a u ag alqeinoaxa ou
Fig, 2.142 Execution process
---
## Page 194
178
2 Advanced Web
=$_POST[nane”];
bstr(st
rchr(Sname,**),1));
t'];
fe_put_contents(Sname,content）;
else
exit("ok”);
sexit(*forbid');
Fig, 2.143 PHP code
3
http://127.8.8.1/bc
//127.0.0.1/book/uplood/yu.php
8b'.539 (22.2..65)
llo
p²v f22·2-
Fig, 2.144 Executioe process
file can be written nommally, and the suffix obtained by the code is an empty string,
so the blacklist can be bypassed, as shown in Fig. 2.144.
When using °file_put_contents*, call the “tsrm_realpath_r” method to standard-
ize the path in the “virtual_file_ex” method of “"zend_virtual_cwd.c”. Part of the call
stack of the *file_put_contents” method is as follows.
viztual_file_ex zend_virtual_cwd.c:1390
expand_filepath_vith_mode fopen_wrappers .c:820
expand_filepath_ex fopen_wrappers . c: 758
expand_filepath fopen_wrappers . c: 750
php_plain_files_strean_opener plain_wrapper.c:1080
_php_stream_fopen plain_wrapper, c:994
_php_stream_open_wrapper_ex streams .c:2055
zif_file_put_contents file .c:610
Add the following code in the °tsrm_realpath_r” method:
while (1) {
if (len  start && !IS_SLASH (path [i-1])) 
1 -- ;
if (1 == len |1 (1 == 1en - 1 && path [i] == + , *)) {
len = 1 - 1;
/* renove double slashes and *, * */
is_dir = 1;
continue;
else if (i == len - 2 && path[1] == ', + && path [1+1] == 1 , ) {
/* remove '. , ' and previous directory */
1s_dir = 1;
if (1ink_is_dir) {
=x+
path [1en] = 0;
In this method, if the path ends with *.", *len will be defined as the index of the
“/" character, and then execute:
path[1en] = 0;
Truncate the *7.° character and process it become a normal path. However, this
method can only create a new file, and an eror will thrown when overwriting an
existing file, as shown in Fig. 2.145.
Similarly, the following code exists in the “tsrm_realpath_r” method:
save = (use_realpath I= CWD_EXPAND) ;
if (save && php_sya_lstat (path, &st)  at the
beginning of the file. In the code in Fig. 2.146, the user can fully control the filename, 
including the protocol.
In the official manual (https://www.php.net/manual/zh/ilters.string.php), you can
find that there are many filters, so here you can use some string filters to process “exit
( )", so that the code written later can be executed and can be processed using
“base64_decode".
---
## Page 197
2.4 File Upload Vulnerability
181
Fig, 2.146 PHP code
c?php
$content="\n;
$filer
$content .=$_POST[content'];
file_put_contents(sfilenane,$content);
exit("upload success');
PHPAPI zend_string *php_base64_decode_ex (const unsigned char *str,
size_t length, zend_bool strict) {
const unsigned char *current = str;
/+ 11} +/
int ch, 1 = 0, j = 0, padding = 0; 
zend_string *result ;
result = zend_string_alloc (length, 0) ;
while (1ength-- > 0) (
/* run through the whole string, converting as
we go */
if (ch == base64_pad) {
ch = +current++;
padding++;
continue;
ch = base64_reverse_table [ch] :
if (!strict){
/+ skip unknown characters and whitespace */
f (ch =0" is true only when the ASCII value of the character is 43, 47-57, 65-90,
97-122, and the corresponding characters are °+, /, 0-9, aZ, A~Z", the rest of the
characters will be skipped. “>n" removes the skipped characters, and
the remaining “phpexit". It is a group of 4 bytes in base64 decoding, so it needs to be
filled with 1 byte. After being finally decoded, the code behind the Mojibake can be
executed normally, as shown in Fig. 2.147.
2.4.9Upload Problems Caused by ZIPFileUpload
In order to realize batch upload, many systems support uploading ZIP archives, then
decompress ZIP files on the backend. If the decompressed files are not handled
properly, it will cause security problems. In the past, PHPCMS had security prob-
lems caused by not handling the uploaded ZIP files.
1. The unzipped file was not processed
The code in Fig. 2.148 only restricts the file suffix to be zip when uploading, but does
not do any processing on the decompressed file. So, compress the PHP file into a ZIP
file, and then upload the ZIP file, the backend decompresses it to achieve arbitrary
File upload, see Fig. 2.149.
2. Unrecursive detection of uploaded directories leads to bypass
In order to solve the security problems caused by decompressing files, many pro-
grams will detect whether there are script files in the upload directory after the ZIP is
decompressed, and delete them if they exist.
For example, the code in Fig. 2.150, after the decompression is completed, all
files and directories in the upload directory will be obtained through “readdir*. If
files with suffixes other than jipg, gif, or png” are found, they will be deleted. But the
above code only detects the upload directory, and does not recursively detect all the
directories under the upload directory. So, if a directory is extracted, the files in the
---
## Page 199
2.4 File Upload Vulnerability
183
sname
=sfile['name'];
/peodn,=ps
sext
=strtolower(substr（strrchr($name，°.),1));
$path = $dir.$name;
if(in_array($ext，a
array('zip')))
true）{
szip->close();
}else{
echo
.x0,
echo
'error';
unlink($path);
Jelsef
exit（·仅允许上传zip文件'）；
月
Fig, 2.148 PHP code
FFTe-/tmp/0zipP5Thttp:/ocalhost/boo/plood.p
24.5.54
ello WorLd
Fig, 2.149 Execution process
directory will not be detected. Although the suffix of the *hello" directory is not in
the whitelist, °unlink" a directory will not succeed and only throw a warning. So, the
directory and the files in the directory are retained, as shown in Fig. 2.151.
Of course, you can also create a new directory “x.jpg in the compressed package,
which can skip the “unlink?" directly, and even the waming will not be thrown, as
shown in Fig. 2.152.
3. Conditional competition leads to bypass
In the code shown in Fig. 2.153, all directories under the upload directory are
recursively detected, so the previous bypass method is no longer valid.
---
## Page 200
184
2 Advanced Web
sfile=s_FILES[·file];
?php
$nane =sfile[name′];
$ext = strtotower(substr(strrchr($nane，.)，1）);
,/peodn,nps
Spath = $dir.Sname;
if(tn_array($ext,arraytzip））
move_uploaded_file(sfile['tnp_name'],$path);
$zip = new ZipArchive(）;
if（$zip->open(Spath) true）{
szip->extractTo(sdir);
shandle=opendir($dir);
$zip->close();
while(($f =readdir(Shandle)) != false）
if(!in_array（sf，array（',
sext= strtolower(substr(strrchr（sf，*.)，1));
..H
if（in_array（$ext，array（jpg’，gif'，‘png′））
unlink($dir.$f);
exit（'ok");
）else{
echo
'error';
Jelset
exit（“仅允许上传zip文件）；
Fig, 2.150 PHP code
Fig, 2.151 Execution process
---
## Page 201
2.4 File Upload Vulnerability
185
$1s -01 he11o.jg9
wheel
Hho
96 Moy 12 16:86
rw-r--r-.
 yulegeyu wheel
28 May 12 16:06 hel1o.ph
(6.2.:
tb.....6,
Fig, 2.152 Executioe process
In this scenario, it can be bypassed by means of conditional competition, that is,
acces the file before the file is deleted, and generate another script file to the
non-upload directory, as shown in Figs. 2.154 and 2.155.
By continuously uploading files and accessing files, the files are accessed before
the files are deleted, and finally the script files are generated to other directories to
achieve bypass, as shown in Fig. 2.156.
4. Decompression exception exit lead to bypass
In order to avoid the problem of conditional competition, the code in Fig. 2.157
decompresses the file into a random directory. Because the name of the directory is
unpredictable, conditional competition is no longer possible. The “extractTo"
method in the *ZipArchive” object will return false when the decompression fails.
Many programs will exit the program immediately after the decompression fails, but
in fact, it is possible to construct a ZIP package that decompresses halfway and then
fails to decompress. Use “010 Editor" to modify the generated ZIP package, modify
the content after “2.php" to *Oxff" and then save the generated new ZIP file, as
shown in Fig. 2.158.
Because the decompression failed, “exit”" was executed before the “check_dir"
method, and the decompressed script file will not be deleted. Then enumerate all the
possibilities of the directory, and finally run to the script file, as shown in Fig. 2.159.
5. Decompress special files lead to bypass
In order to fix the bypass caused by the abnormal exit, the code is modified to the
following code. After the decompression fails, the check_dir method will be called
to delete the illegal files in the directory, so it is no longer valid to use the abnormal
exit method at this time.
---
## Page 202
186
2 Advanced Web
sfile=s_FILES[fAle'];
?php
Sname = $ftle[nane′];
$dir =*upload/';
Spath= sdr.Snane;
sext = strtolower(substr(strrchr(Sname,)， 1));
functton check_dir(sdir)
whitle(($f =readdir($handle)) I= false)
$handle = opendir($dir);
f(ts_dir(sdtr.st)）
check_dir（sdir.sf.*/);
Jelsef
sext = strtolower(substr(strrchr(sf,
.），11);
unlink($dir-$f);
if(in_array（$ext,arrayt'zip）））
szip=new ZipArchtve（）;
move_uploaded_fite(sfite['tmp_name
e1,$path);
tf （$zip->open[Spath） …
szip->extractTo（sdir);
true)（
check_dir(sdir);
sztp->close[);
}else(
echo
"error";
Jelsef
exit（仅允许上传zip文件“）；
Fig, 2.153 PHP code
Fig, 2.154 Execution process
---
## Page 203
2.4 File Upload Vulnerability
187
Request
269
Payload
Status
Error
TimeoutLength
null
200
161
C
409
null
null
200
200
161
477
null
200
161
161
17
727
nullI
null
404
口
口
口
161
26
null
404
口