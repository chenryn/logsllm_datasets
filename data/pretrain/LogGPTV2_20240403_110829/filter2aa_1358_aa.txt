### Cyber Grand Shellphish: DEFCON 24 Overview

**Event Details:**
- **Date:** August 7, 2016
- **Time:** 3 PM
- **Track:** 2
- **Speakers:**
  - Giovanni Vigna
  - Christopher Kruegel
  - zanardi
  - void
  - HEX on the beach
  - UC Santa Barbara
  - nullptr
  - balzaroth
  - sicko irish
  - TU Vienna
  - engiman
  - pizzaman

### Team Evolution (2004 - Modern Day)

**2004:**
- **Team Members:**
  - virus weaver
  - marco
  - beetal
  - Northeastern and Boston University
  - UC Santa Barbara
  - zanardi
  - balzaroth
  - sicko irish
  - TU Vienna
  - void
  - nullptr
  - engiman
  - pizzaman
  - odo
  - adamd
  - giullo
  - voltaire
  - bboe
  - gianluca
  - zardus cavedon spermachine
  - kirat
  - hacopo
  - reyammer
  - anton00b
  - mw

**2005:**
- **Team Members:**
  - virus weaver
  - marco
  - beetal
  - Northeastern and Boston University
  - UC Santa Barbara
  - zanardi
  - balzaroth
  - sicko irish
  - TU Vienna
  - void
  - nullptr
  - engiman
  - pizzaman
  - odo
  - giullo
  - voltaire
  - bboe
  - gianluca
  - zardus cavedon spermachine
  - kirat
  - hacopo
  - reyammer
  - anton00b
  - mw
  - collin
  - acez
  - fish
  - cao
  - salls
  - subwire
  - mossberg
  - crowell
  - nezorg
  - rhelmot
  - jay
  - vitor

**2006 - 2011:**
- **Team Members:**
  - collin
  - Northeastern and Boston University
  - UC Santa Barbara
  - zanardi
  - balzaroth
  - sicko irish
  - virus weaver
  - marco
  - beetal
  - void
  - odo
  - giullo
  - voltaire
  - bboe
  - pizzaman
  - gianluca
  - zardus cavedon spermachine
  - kirat
  - hacopo
  - reyammer
  - anton00b
  - engiman
  - nullptr
  - mw
  - collin
  - pizzaman
  - acez
  - fish
  - cao
  - salls
  - subwire
  - mossberg
  - crowell
  - nezorg
  - rhelmot
  - jay
  - vitor

**2011 - 2014:**
- **Team Members:**
  - mw
  - collin
  - Eurecom
  - ASU
  - UCL
  - Northeastern and Boston University
  - UC Santa Barbara
  - zanardi
  - sicko irish
  - virus weaver
  - marco
  - beetal
  - mossberg
  - crowell
  - nezorg
  - rhelmot
  - jay
  - vitor
  - void
  - odo
  - giullo
  - voltaire
  - bboe
  - balzaroth
  - adamd
  - gianluca
  - zardus cavedon spermachine
  - kirat
  - hacopo
  - reyammer
  - anton00b
  - engiman
  - nullptr
  - mw
  - collin
  - pizzaman
  - acez
  - fish
  - cao
  - salls
  - subwire
  - mike_pizza
  - donfos
  - double
  - acez
  - balzaroth
  - adamd
  - gianluca

**2015:**
- **Team Members:**
  - Eurecom
  - ASU
  - UCL
  - Northeastern and Boston University
  - UC Santa Barbara
  - zanardi
  - mossberg
  - crowell
  - nezorg
  - rhelmot
  - jay
  - void
  - odo
  - zardus cavedon spermachine
  - kirat
  - hacopo
  - reyammer
  - anton00b
  - engiman
  - nullptr
  - mw
  - irish
  - weaver
  - giullo
  - voltaire
  - virus
  - sicko
  - marco
  - beetal
  - vitor
  - bboe
  - collin
  - pizzaman
  - fish
  - cao
  - salls
  - subwire
  - mike_pizza
  - donfos
  - double
  - acez
  - balzaroth
  - adamd
  - gianluca

**Modern Day:**
- **Team Members:**
  - Eurecom
  - ASU
  - UCL
  - Northeastern and Boston University
  - UC Santa Barbara
  - zanardi
  - mossberg
  - crowell
  - nezorg
  - rhelmot
  - jay
  - void
  - odo
  - zardus cavedon
  - hacopo
  - reyammer
  - anton00b
  - engiman
  - nullptr
  - mw
  - pizzaman
  - fish
  - cao
  - salls
  - subwire
  - mike_pizza
  - donfos
  - acez
  - balzaroth
  - adamd
  - gianluca

### DARPA Competitions and Self-Driving Cars

**DARPA Cyber Grand Challenge (CGC):**
- **Key Dates:**
  - 2013: First commit to the CRS
  - 2014: Second commit to the CRS
  - 2015: CGC Quals (3 weeks of insanity)
  - 2016: CGC Finals (3 months of insanity)

**CGC Environment:**
- **Linux-inspired environment with 7 syscalls:**
  - `transmit`, `receive`, `fdwait` (similar to `select`)
  - `allocate`, `deallocate`
  - `random`
  - `terminate`
- **No filesystem, no flag.**
- **Exploits in CGC:**
  - **Quals:** Crash == Exploit
  - **Finals:**
    - "Flag overwrite": Set a register to X, crash at Y
    - "Flag read": Leak the "secret flag" from memory

**Challenges:**
- **Functionality Checks:**
  - Simple programs like `int main() { return 0; }` fail functionality checks.
  - Signal handling is not allowed, e.g., `signal(SIGSEGV, exit)`.

**Mechanical Phish:**
- **CQE (Completely autonomous system):**
  - Patch
  - Crash
- **CFE (Completely autonomous system):**
  - Patch
  - Crash
  - Exploit

**CGC Final Event (CFE) Structure:**
- **Rounds:** 96 rounds with short breaks between each.
- **Challenge Binaries (CBs):** Provided by the system to teams' CRSs.
  - Each CB provides a service (e.g., an HTTP server).
  - Initially, all teams run the same binaries for each service.
- **Scoring:**
  - **Availability:** How well did you maintain the binary?
  - **Security:** Did you defend against all exploits?
  - **Evaluation:** How many other teams did you exploit?

**Code Freeze:**
- **Incident:** Code freeze was accidentally broken 15 hours before access shutdown.
- **Components:**
  - Farnsworth: Object-relational model for database.
  - Meister: Job scheduler.
  - TI API: IDS tap.
  - Ambassador: Network Dude.
  - Scriba: Poll Creator.
  - Tester: Patcherex.
  - AFL: Driller.
  - Colorguard: Rex.
  - POV Fuzzer: POV Tester.
  - Worker: Farnsworth.

### Fuzzing and Symbolic Execution

**Fuzzing:**
- **Definition:** Automated procedure to send inputs and record safety condition violations as crashes.
- **Assumption:** Crashes are potentially exploitable.
- **Dimensions:**
  - Input generation
  - Input supply to the program under test
  - Generation of more relevant crashes
  - Feedback mechanisms to change inputs between runs
- **Goal:** Maximize the effectiveness of the process.

**American Fuzzy Lop (AFL):**
- **Example:**
  ```python
  x = int(input())
  if x >= 10:
      if x == 10:
          if x**2 == 152399025:
              print("You win!")
          else:
              print("You lose!")
      else:
          print("You lose!")
  else:
      print("You lose!")
  ```
  - **Fuzzing Output:**
    - 1 ⇒ "You lose!"
    - 593 ⇒ "You lose!"
    - 183 ⇒ "You lose!"
    - 4 ⇒ "You lose!"
    - 498 ⇒ "You lose!"
    - 42 ⇒ "You lose!"
    - 3 ⇒ "You lose!"
    - …
    - 57 ⇒ "You lose!"

- **Limitations:**
  - Unable to handle magic numbers, hashes, and specific identifiers.

**Symbolic Execution:**
- **Example:**
  ```python
  x = input()
  if x >= 10:
      if x % 1337 == 0:
          print("You win!")
      else:
          print("You lose!")
  else:
      print("You lose!")
  ```
  - **Symbolic Path:**
    - `x = 10`
    - `x >= 10`
    - `x % 1337 != 0`
    - `x >= 10`
    - `x % 1337 == 0`

**Conclusion:**
- **Fuzzing and symbolic execution are powerful tools for finding and exploiting vulnerabilities.**
- **Combining these techniques can lead to more effective and robust security testing.**

This document provides a comprehensive overview of the Cyber Grand Shellphish team's evolution, their participation in the DARPA Cyber Grand Challenge, and the use of fuzzing and symbolic execution in their approach to cybersecurity.