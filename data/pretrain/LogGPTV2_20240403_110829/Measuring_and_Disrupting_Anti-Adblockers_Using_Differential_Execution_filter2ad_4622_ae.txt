to be true, as the second branch will still turn out to be false,
resulting in adblock detection.
Our solution to this problem is to iteratively collect such
nested divergences. More speciﬁcally, once we ﬁnish one
round of differential trace analysis (with the corresponding
JavaScript rewrite rules being produced), we deploy the rule
and continue a new round of instrumentation and differential
analysis. This way, we will be able to capture the second
branch divergence and incrementally include it in our rewrite
rules. The iteration stops when no more new divergences are
detected.
Implementation and preliminary results. Ideally, we should
be able to implement JavaScript rewrite using a browser
extension. Unfortunately, JavaScript rewrite is not natively
supported by most browser extension APIs. In lieu of that, we
implement the rewrite system using the mitmproxy [23]. The
downside is that a user needs to install an external program
(and certiﬁcate) as opposed to only an extension. The beneﬁt is
that this proxy-based solution is browser-independent and can
be deployed across different platforms. As mitmproxy already
provides nice abstractions for HTTP(S) request and response
manipulation, our implementation of JavaScript rewrite is only
less than 200 lines of python code. The whole system is
completely automated in rewriting the right conditions without
any human intervention.
To evaluate the effectiveness of the Javascript rewrite, we
choose to test the anti-adblocking websites that are known to
have visible reactions. After the Javascript rewrite, if the visible
reactions are eliminated, we consider it a success. In addition,
we will check for any functionality breakage by interacting
with the website with modiﬁed Javascript.
Overall, for the 428 detected positive websites with visible
reactions (from §V-A), we ﬁnd that the JavaScript rewrite can
11
successfully evade 352 websites (82.2%), evident by the lack
of warning or popup messages after the rewrite. Here we
follow the same manual inspection methodology in §V-A. The
failed cases are mostly due to the same reasons as outlined in
§V-A. Only one website is found to have broken functionality
where the Javascript is mistakenly considered to be disabled.
B. Hiding Adblockers with API Hooking
While Javascript rewriting is a promising direction, it has
several drawbacks and limitations. First, it requires a MITM
proxy (or with browser modiﬁcation) and cannot be imple-
mented as a browser extension. Second, it is more intrusive
and likely to cause breakage of site functionality. We next
consider an alternative solution that aims to address the above
shortcomings.
Our key observation is that all API calls used by publisher
scripts to examine the state of the page (e.g., whether an ad is
visible) can be intercepted and modiﬁed by a browser extension
[8, 50]. In Chrome extensions, for example, a content script
can run before the page is loaded (no other script can run
yet), i.e., document_start. This allows one to inject script
in the page which can deﬁne wrapper functions for existing
objects. However, many objects are created on demand and
therefore are not available for interception in the beginning.
Unfortunately, it may become too late to inject any script after
a page is loaded, i.e., document_end as other scripts might
have already executed (and race conditions may occur). This
makes API call interception a challenging task.
To understand how this problem can be overcome, we ob-
serve that there are generally two sources of variables/objects
that are checked for adblocker detection: (1) DOM elements
which are either statically or dynamically created; (2) variables
unrelated to DOM elements (deﬁned elsewhere and potentially
nested in other objects).
such
This
object
all
calls
document
retrieved
built-in
(1) — DOM element
checks,
through API
For
in
fact
browser
objects
from
are
as
the
document.getElementByName(arg).
allows
our injected script to intercept the element retrieval. If the
object is deemed a bait or a real ad (based on its name, id,
or source, etc.), we can simply return a fake object prepared
ahead of time. Later when the object is checked for size,
visibility, and other attributes, we can simply return the values
according to what we have learned during the analysis of
anti-adblocking scripts. If the object is dynamically created, it
is more challenging to decide if it is an ad object (as its div
id, class and other properties are all dynamically assigned),
and therefore may require more monitoring at runtime. An
example is shown below:
1 $(window).load(function() {
2
3
if(typeof canRunAds != ’undefined’){ // check level 1
var adFilled = $(’.adsbygoogle’).find(’ins’).
length;
if(adFilled!=0){ // check level 2
// return okay
} else {
$(’.layerPubAdBg’).fadeIn();
}
} else {
$(’.layerPubAdBg’).fadeIn();
}
4
5
6
7
8
9
10
11
12 });
Fig. 14: An example anti-adblocker with two levels of adblock detection
1 var bait = document.createElement (’div’) ;
2 bait.setAttribute (’class’, this.options.baitClass);
3 bait = body.appendChild(bait);
4 if (bait == undefined || bait.height == 0) { /*
adblock detected */ }
In this case, bait may become null and therefore trigger
the adblock detection. Unfortunately, we don’t know at the
creation time whether the div will be blocked by adblocker
and cannot simply return a fake object (as it could be a useful
div not related to ads). However, it is possible that we still
instrument document.createElement() and inside of
it we can add additional hooks to intercept future method
invocations on this object (e.g., setAttribute), which will
allow us to determine the true class of the object. Below is the
code snippet to illustrate the instrumentation logic.
var temp = old_createElement(type);
1 var old_createElement = document.createElement();
2 document.createElement = function(type) {
3
4
5
6
var old_setAttribute = temp.setAttribute();
temp.setAttribute = function(key, value) {
// check if it is an ad-related element by
consulting the adblocker filter list
7
8 }
}
This allows us to keep monitoring the future development
of a newly created element. If it does turn out to become an
ad-related element, we will mark it so. In the future, when the
element is checked for its height or other attributes, we can
similarly return expected results from the ofﬂine knowledge.
Note that an ideal solution would require us to link the
object used for adblock detection to its name, id, or classname,
etc. This way we will know precisely what values to return
when their properties are checked. For instance, if the condi-
tion is obj.height <= 20, then we need to fake a number
that is larger than 20 for the speciﬁc obj. Such analysis is
more complex and will likely involve symbolic execution. We
leave implementation of this approach for future work.
For (2) — non-DOM element checks, if the checked vari-
ables are not related to DOM elements, the only possibility we
have observed is related to Javascript blocking. In such cases,
there is typically a global variable (or a variable nested in other
global objects) deﬁned in an ad-related script. If the script is
blocked, then the variable becomes undeﬁned and therefore
trips the adblocker detection. Fortunately, if the variable is a
12
global one and directly accessible from the browser built-in
window object, we can intercept it and return any expected
result to pass the detection check with the following single
line of code:
1 // intercept access to window.adblockV1, and always
2 window.__defineGetter__(’adblockV1’, function() {
return true;
return true; });
However, if it is a nested variable deﬁned in other objects,
as mentioned earlier we will not be able to intercept
its
accesses. As a workaround, we propose to let the ad-related
script load (instead of blocking it) and rely other adblocking
ﬁlter rules to remove any injected ads. After all, ads have to
be inserted into the DOM tree in order to be rendered (and
trigger adblockers to block them). If the ad-related script is
not injecting any ads and instead only serving as a bait to
deﬁne some variables, not blocking the script itself actually can
already successfully avoid anti-adblocking. Interestingly, we
ﬁnd many bait scripts such as the one at https://tags.news.com.
au/prod/adblock/adblock.js that do exactly this. In the more
general case though, this transforms the problem into DOM
element checks which we already have a solution for.
Implementation and preliminary results. Without loss of
generality, we have implemented a proof-of-concept Chrome
extension that works for a randomly selected subset of websites
and third-party scripts for which we have ground truth (able to
manually analyze the script and conﬁrm their behaviors). We
have picked 15 websites, 5 with popular third-party scripts
(silent reporting), 5 with less popular or custom scripts (silent
reporting), and 5 with visible reactions (ad switching or
warning messages).2 Our solution works well against all of
these websites, i.e., it successfully avoids the anti-adblockers.
Speciﬁcally, we can always successfully either avoid the
warning messages or change the reporting messages (e.g.,
from adp = 1 to adp = 0). We ﬁnd that 8 websites (and
their corresponding scripts) check attributes of DOM elements
2 They are: popular third-party scripts: https://mc.yandex.ru/metrika/
watch.js, http://static.criteo.net/js/ld/publishertag.js, http://widgets.outbrain.
com/outbrain.js, https://cdn.taboola.com/libtrc/impl.254-8-RELEASE.js, http:
//asset.pagefair.com/measure.min.js; and websites with less popular or custom
scripts: philly.com, foxsports.com.au, cda.pl, bt.dk, boredomtherapy.com; and
websites with visible anti-adblockers (ﬁrst with ad-switching and others
with warning messages): memburn.com, pasty.link, exspresiku.blogspot.co.id,
ani-short.net, gta.com.ua.
2.No block?4. Really no block?10. PenaltyTrueFalse7. Penalty5. PassTrueFalseand 7 websites check values of variables other than DOM
elements (e.g., deﬁned or not). Out of the 7, 6 check a global
variable such as window.adblockV1 and therefore can be
easily intercepted and tricked. One website, however, checks
a nested variable window.utag_data.no_adblocker.
Interestingly, both utag_data and no_adblocker are
deﬁned in a bait script. Simply allowing the script to execute
can trick the adblock detector without any other implications.
We analyze a few more scripts below as case studies.
One of the most popular anti-adblocking third-party scripts
from Taboola has a complex logic of adblock detection span-
ning several functions (the simpliﬁed code snippet already ex-
plained in §V-B). Speciﬁcally, the script is written generically
so that it can load a list of bait DOM elements dynamically
by iterating through a list of predeﬁned element ids (strings).3
Despite this, as soon as we can track the origin of the element
ids in the array, the rest can follow our procedure as described
earlier (about how to deal with DOM element checking).
As
to detect
the
failure of
ad switching behavior
an interesting example, we
show that mem-
(described in Fig-
burn.com’s
is now completely disabled as they are un-
ure 3(a))
able
ad
through the simple check window.advertsAvailable
=== undefined. This is because we can intercept all ac-
cesses to window.advertsAvailable and simply fake
any arbitrary value. The page will now simply contain an
empty white space in place of the original ad frame.
loading the
initial
Finally, we revisit the website bild.de for which Javascript
rewrite has caused functionality breakage. By manual inspec-
tion, we have found that Javascript rewrite targeted a wrong
function which is general and used by legitimate part of the
website. By applying the analysis procedure outlined in this
section, we simply hook the access to window._art and
provide a ﬁxed constant to solve this issue.
Fundamentally, the API hooking based solution operates
on the source of the problem — DOM elements or ad-related
scripts that get blocked by adblockers; it is therefore more
precise and less likely to cause side effects, compared to
Javascript rewrite. In addition, since our solution is readily
deployable in a standard browser extension, it has potentials
to inﬂuence the future design of adblockers.
VII. LIMITATIONS AND DISCUSSION
As we have seen, applying differential trace analysis to
detect and analyze anti-adblockers is a promising direction,
and it has validated our idea to a large extent. Future di-
rections include improving the differential execution analysis
by considering the value differences, as well as investigating
the feasibility of the techniques to hide adblockers. Below we
discuss the limitations of our solution at the implementation
level and design level.
Completeness of instrumentation. Our system is as good as
the capability of the instrumentation. At the moment, we do
not cover all branch statements. It is especially challenging
to catch implicit branching operations such as callbacks (as
mentioned in §IV-A). To overcome this, one strategy is to
3More details can be found in our project website at https://sites.google.
com/view/antiadb-proj/.
catch the registration of callbacks (e.g., onsuccess() and
onerror() that are associated to the same event. This way,
we will be aware of which one of the callbacks is taken
in the A/B testing and catch the implicit branch divergence.
Nevertheless, in theory an our system becomes popular and
the instrumentation details are made known to the websites,
they could easily counteract by hiding the adblocker detection
logic in the form that we do not capture. In addition, we also
acknowledge that in theory both ﬂow differences and value
differences need to be considered, as anti-adblockers in theory
can hide its logic without changing control ﬂows. One other
issue is the dynamically generated code through eval(),
which can be addressed with improvement of instrumentation
as well — after all, we are instrumenting the Javascript engine.
Robustness of differential execution analysis. Assuming a
perfect instrumentation capability, we should be able to catch
most state-of-the-art anti-adblockers. However, we point out
three different cases where randomness can interfere or defeat
our differential analysis. First, we ﬁnd that ﬂuctuations in the
network speed and system load can affect the load time of
the ads. Since adblocker detection in many cases is triggered
by a timeout callback (1s or 2s), an ad may or may not
be completely loaded when the detection logic is triggered,
introducing randomness its execution trace. To mitigate this
unintentional randomness, we can force objects to be loaded
from cache. Next, the randomization can happen at two levels:
(1) behavioral randomization — same script, different behav-
ior; (2) content randomization — different script, different
behavior. For content randomization, as we discussed, can
be addressed by forcing the same exact webpage/scripts to
be reloaded during A/B testing. For behavioral randomization
where multiple anti-adblocking modules exist and one of them
will be randomly selected in each run, we envision that it can
be addressed based on the following observation: the random