8
9
10
11
# Unmaps the corresponding shadow memory.
unmap_shadow_memory(start, end)
return
# Mark memory space to be deallocated inaccessible.
mprotect(start, end-start, PROT_NONE)
(b) Redzone management after deallocation
Fig. 5: Pseudo-code algorithms on redzone management (per-byte
granularity) of MEDS.
Fig. 6: Redzone management on memory (de)allocation
physical page will be automatically returned to kernel because
there is no virtual pages associated with the physical page.
Optimization. MEDS employs an optimization scheme in
allocating objects larger than a page size (i.e., 4 KB, or 2 MB
if a huge page is used). In particular, since there is almost no
advantage of performing page aliasing—the physical page will
be fully occupied for such objects thus no space is left for
aliasing, we directly allocate these objects from physical pages
without searching through a free-list.
C. Redzone Management and Enforcement
We need additional mechanisms, which we call redzone
management and enforcement, to detect spatial memory error.
The MEDSALLOC itself does not provide access control. For
example, in Figure 4, using an address pointing to the objk,
7
other objects including obj1 and obj2 can also be accessible.
To capture such an offending access, one may simply adopt
shadow-memory-based redzone enforcement exercised in ASAN.
However, since MEDS utilizes much larger redzones than ASAN,
the shadow memory usage for maintaining the redzones would
lead to high memory consumption. Because of the problem, the
simple redzone scheme is not practical for MEDS. Therefore,
MEDS employs two different redzone management schemes,
page level redzone and sub-page level redzone, where only the
sub-page level redzone is actually represented with shadow-
memory. In the following, we first describe how MEDS manages
these two different redzones and then explain how MEDS
enforces redzones (i.e., detecting memory accesses to redzones).
Managing Redzone.
In order to manage redzones, MEDS
basically intercepts all allocation and deallocation functions
invoked by the target application in runtime and updates the
shadow memory. A particular challenge here is the memory
consumption, if such redzones are all represented using shadow
memory. That is, MEDS by design produces very large redzones
between memory objects. If MEDS commits dedicated shadow
memory for entire redzones, then shadow memory itself will
occupy a lot of physical memory.
In order to address this challenge, we first categorize
redzones into two different types, a page level redzone (i.e.,
a gap between virtual pages) and a sub-page level redzone
(i.e., gaps within a page). Then we leverage the observation
that one shadow memory page governs exactly 32 KB memory
(i.e., 8 virtual pages), which means our page level redzones
(4 MB) consume shadow memory in the granularity of 128
pages. Since every byte in page level redzones are inaccessible,
the corresponding shadow memory page will be filled with 1.
However, we do not need to allocate individual shadow pages
for page level redzones—we can simply leave those shadow
pages as unmapped so checking against those shadow pages
will always trigger a page fault that will be captured by our
signal handler.
Based on the observation above, MEDS only maintains sub-
page level redzones in shadow memory, and page level redzones
do not impose any physical memory use. Figure 5 shows pseudo
algorithms on how MEDS manages the shadow memory, where
a snapshot of virtual memory changes are illustrated in Figure 6.
At the time of the object allocation (Figure 5-(a)), because the
allocated virtual page is used to be a page level redzone (i.e.,
its corresponding shadow memory is unmapped), MEDS first
mmap new physical page(s) from the kernel for its shadow
memory page(s) and initializes the entire page(s) as INVALID
(line 8). Then MEDS sets the corresponding shadow memory
(i.e., a range of object addresses to be allocated, from addr to
addr+size) as VALID (line 12).
At the time of object deallocation (Figure 5-(b)), MEDS first
marks the virtual page(s) which is being deallocated inaccessible
using mprotect (line 7). This permission setting on page level
redzones is always possible in MEDS, because all virtual pages
are always exclusively associated with a single object in the
virtual memory space. Moreover, instead of explicitly marking
the corresponding shadow memory space as INVALID, MEDS
simply unmaps the shadow memory space to mark them as
a redzone (line 10). Again, any attempt to access this freed
memory region will be anyway detected through page fault,
mmapPROT_NONEVALID bitsPage-alignedstart addrPage-alignedend addrBefore DeallocationStart addrEnd addrAllocatedmemoryINVALID bitsINVALID bitsAllocationShadowmemorySub-page level redzonePage level redzoneShadowmemorymappingmmapPROT_NONE1 // Before instrumentation
2 value = *load_addr;
3
4 // After instrumentation
5 if (!check_shadow_memory(load_addr))
6
7 value = *load_addr; // Safe to load.
report_and_terminate();
(a) Load instrumentation
1 // Before instrumentation
2 *store_addr = value;
3
4 // After instrumentation
5 if (!check_shadow_memory(store_addr))
6
7 *store_addr = value; // Safe to store.
report_and_terminate();
(b) Store instrumentation
Fig. 7: Redzone enforcement (per-byte granularity) using memory
access instrumentation on load and store instructions.
because the associated shadow memory is not accessible.
Enforcing Redzone. MEDS ensures that all memory accesses
are valid by enforcing redzones. The security guarantee that all
memory accesses are properly safeguarded is made by the fact
that any access attempt touching redzones is detected because
(1) MEDS explicitly checks shadow memory (for sub-page level
redzones) or (2) MEDS implicitly captures page fault events
(for page level redzones). More specifically, MEDS instruments
all memory access instructions, including load and write, such
that the access is only permitted after checking the validity
through the shadow memory.
Figure 7 illustrates how MEDS instruments load and store
instructions. For load instructions (Figure 7-(a)), MEDS first
checks the shadow memory for a given address to be accessed
(line 5). If the given address points to page level redzones,
MEDS will capture page faults while loading the corresponding
shadow memory bit, because such shadow memory space is
not accessible. If the shadow memory bit is properly loaded
but indicates INVALID (i.e., sub-page level redzones), MEDS
does not permit the original load instruction being executed
(line 6). For both of these violation attempts, either through
capturing page fault events or detecting the INVALID shadow
memory bit, MEDS reports a detailed information on violation
such that developers or users can easily understand the cause
of access violation. If the bit indicates VALID, MEDS allows
to perform the original load operation (line 7) so that the
program execution semantics are kept intact for benign load
operations. Store instructions are handled in a similar way as
for the load.
Optimization. Similar to ASAN, for memory intrinsic func-
tions like memset() and memcpy(), instead of checking the safety
of all repeated load/store instructions within these memory
intrinsic functions, MEDS checks its safety using its parameters.
However, due to its small redzone size, after checking the start,
end, and mid of the buffer, if all checks succeed, ASAN still
needs to check the shadow values for all the bytes of the buffer.
However, because MEDS uses a much larger gap between
objects, we only need to check the start, end, and well-aligned
bytes (e.g., 4 MB-aligned, which is the current default redzone
size of MEDS).
8
D. Memory Object Allocation
MEDS allocates all memory objects using MEDSALLOC
(§IV-B), such that all memory objects are surrounded by
approximated infinite gap and its allocation pool follows the
concept of approximated infinite heap. Generally there can be
three different types of memory objects depending on where
an object is allocated—heap, stack, and global objects. As
each object type goes through a different allocation mechanism,
MEDS properly caters its allocation process per allocation type
so that all memory objects are allocated using MEDSALLOC.
Heap Objects. Heap objects are allocated through a limited
set of runtime functions (e.g., malloc, calloc, etc.1). Similar to
ASAN, we install interception hooks to these functions so that
MEDS can take control over allocation processes. Then, upon
receiving a heap allocation request from a user program, MEDS
simply leverages MEDSALLOC to return an aliased memory
object.
Stack Objects. Stack objects are allocated within a corre-
sponding function’s stack frame. Unlike heap objects, MEDS
takes different approaches in handling stack objects depending
on whether they are allocated implicitly or explicitly. For the
implicitly allocated stack objects such as return addresses and
spilled registers, since accesses to them are always safe, MEDS
does not need to protect them (a.k.a., safe stack [19]) with
redzones. On the other hand, MEDS migrates the explicitly
allocated stack objects (i.e., stack variables) into heap space
using MEDSALLOC so as to easily leverage the features of
MEDSALLOC for safeguarding them with redzones. For each
stack object in a function, MEDS instruments a runtime function
call alloc_stack_obj(size, alignment) at the corresponding
function’s prologue. This function performs dynamic heap
allocation using MEDSALLOC for a given size while observing
the alignment constraint for the allocated object. MEDS also
instruments another runtime function call free_stack_obj(ptr)
at the function’s epilogue, which properly frees a stack object
(located in heap space under MEDS) right before the function
returns. MEDS also registers this free runtime function call to
exception handling chains so that the stack objects can be freed
when a stack unwinding happens due to an exception. In this
way, MEDS places all the stack variables in heap, where its
allocation is always performed by MEDSALLOC.
Global Objects. Unlike stack and heap objects, the addresses
for global objects are located at the time of loading a program.
More precisely, in the case of an ELF executable, the ELF
loader maps virtual memory pages as specified in a program
header section of the ELF format.
A straightforward design decision leveraging MEDSALLOC
would be simply creating aliased memory pages for each global
object, while considering mapped data pages by the loader as
packed physical memory pages. However, we found this is
not feasible without compromising compatibility. Because the
built-in ELF loader implemented in the Linux kernel always
assigns MAP_PRIVATE (instead of assigning MAP_SHARED) when
mapping data memory pages, those memory pages cannot be
aliased. We may workaround this issue through either 1) using a
1Handling malloc() typically covers cases using C++ allocation operators
(i.e., new), as generated code for a new operator eventually invokes malloc to
allocate memory space.
user-level custom ELF loader instead of using the built-in ELF
loader or 2) simply modifying the built-in ELF loader to specify
MAP_SHARED. Both of these workaround approaches may have
negative impacts on compatibility. It might be cumbersome to
setup an execution environment using a custom loader for end-
users, or it is generally discouraged to modify the underlying
kernel.
Therefore, in order to preserve compatibility, MEDS im-
plements user-level re-allocation schemes for global objects.
After loading a target program but before executing the original
entry point of the program, MEDS enumerates a list of global
objects and re-allocates each of them using MEDSALLOC. If
a global object requires initialization (i.e., data with non-zero
bytes), MEDS accordingly copies those underlying data as well.
Since now the locations of global objects have been migrated to
heap space, MEDS relocates all the references (which pointed
to original global objects) to reallocated ones in heap space
by referring a relocation table in ELF. While this scheme for
global objects may seem performance expensive, we highlight
that this procedural only needs to be performed once and thus
it only adds an one-time fixed cost to the program loading
procedural.
E. User-level Copy-on-Write (CoW)
As noted in §IV-B, MEDS uses mmap() syscall with a
MAP_SHARED flag to alias a physical page with multiple virtual
pages, but this approach has compatibility issue with the CoW
scheme of the Linux kernel. More specifically, when the fork()
syscall is invoked, the child process shares the same physical
pages with its parent process. Then, the kernel CoW to perform
lazy copy and unshare the modified physical pages. However,
pages mapped with the MAP_SHARED are not subjected for CoW,
as the kernel interprets that such pages should be shared
between a parent and child process. As a result, for process
protected by MEDS, fork() will break the normal isolation
guarantees between processes.
To address this issue, MEDS designs a user-level copy-on-
write mechanism. First, MEDS intercepts all fork-like syscalls.
Right before fork(), MEDS marks all virtual pages allocated by
MEDS with MAP_SHARED as non-writable. After fork(), when
a process attempts to write any of such pages, a pre-installed
signal handler catches the attempt via page fault. Then MEDS
allocates a new physical page, maps it to a temporary virtual
address (with MAP_SHARED), hard-copies the content from the
old physical page, unmaps the old physical page, remaps a
new physical page to the old virtual address, unmaps the new
physical page from the temporary address, and then passes
control back to the process to continue the write operation.
This mechanism can also be implemented at the kernel-level
by adding a dedicated flag for page aliasing, but we chose
to implement user-level solutions to avoid installing a kernel
extension for better compatibility.
V.
IMPLEMENTATION
We have implemented a prototype of MEDS based on the
LLVM Compiler project (version 4.0). MEDS is implemented
in total 10,812 lines of c and c++ code. Overall, MEDS
takes C or C++ source code of a target application as input,
and generates executables. The instrumentation module is
implemented as an extra LLVM pass. The runtime library
module is based on sanitizer routines in LLVM. All standard
allocation and deallocation functions are hooked to be delegated
by MEDSALLOC. Copy-on-write (COW) is implemented by
hooking fork() and installing a custom signal handler to
capture invalid memory access attempts.
VI. EVALUATION
In this section, we evaluate our prototype of MEDS against
to our target large-scale production programs? (§VI-A)
our objectives (§III) by answering the following questions:
• Compatibility. Does MEDS introduce compatibility issue
• Detectability. Does MEDS properly detect memory er-
rors against attacking exploits (§VI-B) and in fuzz test-
ing (§VI-C)?
• Performance. How much performance overhead does
MEDS impose? (§VI-D)
Experimental Configuration. MEDS is configured to have
4 MB of the redzone and 80 TB of the quarantine zone. ASAN
is configured to have default parameters—from 16 Byte to
2,048 Byte to the redzone2, and 256 MB of the quarantine zone.
As noted before, enlarging ASAN’s parameters ends up having
out-of-memory issues due to heavy physical memory uses.
Experimental Setup. All our evaluations were performed
on Intel(R) Xeon(R) CPU E5-4655 v4 @ 2.50GHz (30MB
cache) with 512GB RAM. We ran Ubuntu 16.04 with Linux
4.4.0 64-bits. We have used MEDS to build the following
five applications for evaluation: Chrome browser (58.0.2992.0),
Firefox browser (53.0a1), Apache web server (2.4.25), Nginx
web server (1.11.8), and OpenSSL library (1.0.1f).
A. Compatibility
One of the key goals of MEDS is to maintain compatibility
in running target applications, especially for the large-scale
commodity programs. In order to check such compatibility, we
ran the basic functionality unit tests provided by respected
vendors: 2,242 test cases in Chrome, 781 test cases in
Firefox, and 1,772 test cases in Nginx. MEDS passed all of
these unittests, implying that MEDS truly meets compatibility
requirements for complex programs.
B. Detectability against Attacking Exploits
Recall that MEDS detects memory errors by approximating
the concept of the infinite gap and heap. In this subsection, we
first test the detection capability of MEDS on a set of simple
unit tests that cause memory corruptions. Then we use real-
world vulnerabilities to see MEDS’s detection capability in
practical use-cases. Lastly, we show various measures showing
the effectiveness of MEDS’s approximation on the infinite gap
and heap.
Memory Error Unit Tests. To see whether MEDS can detect
all different kinds of memory errors, we ran a set of unit
2ASAN takes the minimum and maximum size of redzone. Then, depending
on the allocation size, ASAN picks the redzone size within this minimum and
maximum range.
9
tests available in the LLVM ASAN. It has 50 unit test cases,
including stack overflows, heap overflows, use-after-free, etc.
In addition to these cases, in order to better compare MEDS
against ASAN and demonstrate MEDS’s limitation as well, we
also added the following four tests: two heap overflow cases
accessing beyond the redzone of either ASAN or MEDS (4 MB),
respectively; and two heap use-after-free cases which allocate
either less or more than the quarantine zone size, respectively.
In all of these tests, a simple vulnerable program is run with a
specific input triggering a memory error, and the test passes
if the program properly stops and reports an error. Overall,
MEDS was able to pass most of these tests except one, showing
that MEDS does handle all different memory error cases. This
exception case, as expected, was in heap overflows accessing
beyond MEDS’s redzone size (4 MB). As for ASAN, it failed
to detect three cases due to its small redzone and quarantine
zone size. According to these unit test results, the detection