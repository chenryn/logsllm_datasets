        Command
    -----------------------------------------    S    
    T
    U
    KT
    HTTP
  * 上报Bot信息，[idp]字段触发，上报的内容为Bot的ID，IP，PORT，文件名（全路径），网关，cpu架构。  
  * 执行指定URL的payload,[dr]字段触发。  
  * 从指定的URL更新，[ud]字段触发。关闭当前节点的网络连接和相关进程，从指定URL下载新版本，保存DHT节点,ID等数据，将它们做为参数提供给新版体使用。  
  * 执行系统或Bot自定义命令，[rn]字段触发。 
    * 系统命令  
    * 自定义GET命令，将Bot ID发送给对端。  
    * 自定义run命令，执行对端下发的命令，并将结果回传。  
### DHT
Ｍozi
Botnet使用自己扩展的DHT协议构建p2p网络，这样做有俩个好处，一来使用标准的DHT能够快速组网，二来使用自己的扩展能够将有效payload的流量隐匿于海量的正常DHT流量中，躲避检测。Mozi使用8组公共节点以及Config文件的[nd]字段指定的节点作为bootstrap
nodes。引导新节点加入其DHT网络。
  * 公共节点，样本内嵌
    dht.transmissionbt.com:6881
    router.bittorrent.com:6881
    router.utorrent.com:6881
    bttracker.debian.org:6881
    212.129.33.59:6881
    82.221.103.244:6881
    130.239.18.159:6881
    87.98.162.88:6881
  * Config文件中[nd]指定  
#### ID生成
ID20字节，由样本内嵌的prefix(888888)或config文件[hp]指定的prefix，加随机生成的字串构成。
#### 结点识别
为了快速区分流量，Mozi使用1:v4:flag(4 bytes)这样的标识来识别流量是否由其结点发出，
flag字节含义如下，
    flag(4 bytes)
    ----------------------------------------------    offset:
    	0  -----random
    	1  ----- hard-code(0x42) or from [ver]
        2  -----calc by algorithm
        3  -----calc by algorithm
第１个字节是随机产生的，第２个字节是硬编码的0x42或由config文件中[ver]字段指定。
第3,４字节由算法得来，
    ver algorithm
    ----------------------------------------------    	int first,sec;
    	string ver="\x31\x3a\x76\x34\x3a\x00\x00"s;
    	cout > hex >> first >> sec;
    	ver[5] = char(first);
    	ver[6] = char(sec);
    	uint32_t va = 0;
    	for(int i = 0; i  0x8000)
    		{
    			tmp *= 2;
    			tmp ^= 0xffff8005;
    		}
    		else
    			tmp *= 2;
    	}
    	va = tmp&0xffff;
    	}
    	cout   Please input the two number: (0x00-0xff)  
>  0x44 0x42  
>  Final 1f71  
>  输入0x44 0x42,得到0x1f71,和数据包里结果一致。
#### 网络请求
Mozi节点收到的网络请求可以分成２大类，DHT请求和非DHT请求。依据前文所述的节点识别，DHT请求分为Mozi-DHT请求,非Mozi-DHT请求。Mozi支持ping,find_node,get_peers３种。对于非DHT请求，依据网络数据包长度大于99与否分成２种。
Mozi将不同的请求编号如下所示，不同的请求有不同的处理逻辑
  * 编号２： ping ，DHT请求，按标准DHT流程处理直接回复pong。  
  * 编号3：find_node，DHT请求。
  * 编号4：get_peers，DHT请求。  
Mozi
将find_node,get_peers合二为一，如果请求来自Mozi节点，有一定的概率把自身的Config内容发送给对方;如果来请求来自非Mozi节点，则按标准DHT的流程处理。  
    原始数据内容(节选前128字节):
    00000000  64 31 3a 72 64 32 3a 69 64 32 30 3a 38 38 38 38  |d1:rd2:id20:8888|
    00000010  38 38 38 38 b7 96 a0 9e 66 e1 71 98 e5 4d 3e 69  |8888·. .fáq.åM>i|
    00000020  35 3a 6e 6f 64 65 73 36 32 34 3a 15 15 29 d2 f3  |5:nodes624:..)Òó|
    00000030  a3 f7 0c fe df 1a 5d bd 3f 32 46 76 5e 62 b7 b8  |£÷.þß.]½?2Fv^b·¸|
    00000040  f0 94 78 a2 c4 37 5b 8e 2c 00 0b 20 12 07 e7 f4  |ð.x¢Ä7[.,.. ..çô|
    00000050  bc dc 19 a2 83 2e 67 fb 7a 5e 50 22 07 75 e8 ef  |¼Ü.¢..gûz^P".uèï|
    00000060  f9 93 4a e9 91 75 36 e4 76 57 4b 7c 51 7c ff f5  |ù.Jé.u6ävWK|Q|ÿõ|
    00000070  f5 c4 57 f9 dc 62 35 b4 6a 5d 18 6b 54 3c ed e1  |õÄWùÜb5´j].kT;. ã|
    加密的Config位于"5:nodes624:"之后，使用xor key(4E 66 5A 8F 80 C8 AC 23 8D AC 47 06 D5 4F 6F 7E) 解密后:
    原始数据部分：
    00000000  64 31 3a 72 64 32 3a 69 64 32 30 3a 38 38 38 38  |d1:rd2:id20:8888|
    00000010  38 38 38 38 b7 96 a0 9e 66 e1 71 98 e5 4d 3e 69  |8888·. .fáq.åM>i|
    00000020  35 3a 6e 6f 64 65 73 36 32 34 3a 				   |5:nodes624:
    Config部分:
    00000000  5b 73 73 5d 73 6b 5b 2f 73 73 5d 5b 68 70 5d 38  |[ss]sk[/ss][hp]8|
    00000010  38 38 38 38 38 38 38 5b 2f 68 70 5d 5b 63 6f 75  |8888888[/hp][cou|
    00000020  6e 74 5d 68 74 74 70 3a 2f 2f 69 61 2e 35 31 2e  |nt]http://ia.51.|
    00000030  6c 61 2f 67 6f 31 3f 69 64 3d 32 30 31 39 38 35  |la/go1?id=201985|
    00000040  32 37 26 70 75 3d 68 74 74 70 25 33 61 25 32 66  |27&pu=http%3a%2f|
  * 编号5：announce_peer，不支持  
  * 编号6：非DHT请求，数据包长99字节，当节点收到此请求，说明收到的数据为加密的Config文件，执行流程参照前文。  
## 处置建议
我们建议用户及时更新补丁，并根据Mozi Botnet创建的进程，文件名以及HTTP,DHT网络连接特征，判断是否被感染，然后清理它的相关进程和文件。
相关安全和执法机构，可以邮件联系netlab[at]360.cn交流更多信息。
## 联系我们
感兴趣的读者，可以在 [twitter](https://twitter.com/360Netlab) 或者在微信公众号 360Netlab 上联系我们。
## IoC list
样本MD5:
    eda730498b3d0a97066807a2d98909f3
    849b165f28ae8b1cebe0c7430f44aff3