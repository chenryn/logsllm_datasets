### Memory Mapping and Houdini Emulator Details

#### Memory Mapping
The following memory regions and their permissions are listed:

- **Anonymous Memory Regions:**
  - `[anon:Mem_0x10001000]`
    - `12100000-12122000 rw-p 00000000`
    - `12153000-1218c000 rw-p 00000000`
  - `[anon:Mem_0x10000000]`
    - `ee0da000-ee0dc000 rwxp 00000000`
    - `ff26d000-ffa6c000 rw-p 00000000`
  - `[anon:Mem_0x10000002]`
    - `0c000000-0c001000 r--p 00000000`
    - `0c001000-0c002000 r--p 00000000`
  - `[anon:Mem_0x20000000]`
    - `12000000-12100000 rwxp 00000000`

- **Shared Libraries:**
  - `/vendor/lib/libhoudini.so`
    - `e5502000-e598d000 r-xp 00000000`
    - `e598d000-e59bf000 r--p 0048a000`
    - `e59bf000-e59ff000 rw-p 004bc000`
  - `/system/lib/libc.so`
    - `ecdb0000-eceaa000 r-xp 00000000`
    - `eceaa000-eceae000 r--p 000f9000`
    - `eceae000-eceb0000 rw-p 000fd000`
  - `/vendor/lib/arm/nb/libdl.so`
    - `0c000000-0c001000 r--p 00000000`
    - `0c001000-0c002000 r--p 00000000`
  - `/data/app/com.nccgroup.research.../lib/arm/libnative-lib.so`
    - `0c200000-0c203000 r--p 00000000`
    - `0c203000-0c204000 r--p 00002000`
    - `0c204000-0c205000 rw-p 00003000`
  - `/vendor/lib/arm/nb/libc.so`
    - `0c500000-0c5d6000 r--p 00000000`
    - `0c5d6000-0c5da000 r--p 000d5000`
    - `0c5da000-0c5dc000 rw-p 000d9000`

- **System Binaries:**
  - `/system/bin/linker`
    - `ee1b5000-ee303000 r-xp 00000000`
    - `ee303000-ee309000 r--p 0014d000`
    - `ee309000-ee30a000 rw-p 00153000`

- **Stack:**
  - `[stack]`
    - `00008000-0000a000 rw-p 00000000`

#### Houdini Emulator Details

- **Execution:**
  - The emulator uses a state machine (switch inside while loop) to fetch, decode, and dispatch instructions.
  
- **Instruction Table:**
  - The instruction table is indexed using bits 27-20 and 7-4 of the instruction.
  - Example:
    - Instruction: `mov r0, r1` (0xE1A00001)
    - Offset: `instr[27:20] ∥ instr[7:4] → 0x1A1`
    - Address in table: `0x1A1 * 4 = 0x684`
    - Final address: `0x4BB9C0 + 0x684 = 0x4BC044`

- **Processor State:**
  - The processor state is stored in a `struct proc_state` which includes ARM registers, thumb mode status, and other fields.
  - ARM registers can be accessed from both ARM and x86 code.

- **Syscall Handling:**
  - ARM syscalls are handled by userland x86 code that issues x86 syscalls.

- **Fork/Clone Handling:**
  - Houdini intercepts and re-implements `fork(2)` and `clone(2)`.
  - The child process handles the child fork/clone logic.
  - The parent process handles the fork/clone logic.
  - An empty RWX page is passed as the child stack instead of the actual stack.

- **Detection:**
  - Java architecture checking:
    - `System.getProperty("os.arch")` returns `armv7l`.
    - `/proc/cpuinfo` shows ARMv8 processor details.
  - Memory mapping checking:
    - `/proc/self/maps` shows dual x86/ARM shared libraries.
  - Houdini hides these details to maintain the appearance of an ARM environment.

© NCC Group 2021. All rights reserved.