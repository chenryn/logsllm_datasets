### NetLock: Fast, Centralized Lock Management Using Programmable Switches

**Abstract:**
NetLock is a new centralized lock management architecture that co-designs programmable switches and servers to achieve high performance and rich policy support. By offloading most of the lock management tasks to a fast switch, NetLock significantly reduces fail-and-retry operations and improves transaction throughput and latency compared to existing systems.

#### 1. Introduction
In traditional distributed systems, treating both shared and exclusive locks as exclusive locks leads to numerous fail-and-retry operations, degrading performance. NetLock, through the co-design of the switch and lock servers, minimizes these fail-and-retry operations, thereby enhancing performance. Clients only need to retry in cases of packet loss or deadlock. This design results in significant improvements in transaction throughput and reduced latencies.

#### 2. Performance Improvements
Compared to NetChain, NetLock achieves:
- **Throughput:** 
  - Low contention: 14.9× (28.6×, 3.5×)
  - High contention: 18.4× (33.5×, 4.4×)
- **Latency:**
  - Average: up to 20.3× (66.8×, 5.4×)
  - Tail: up to 18.4× (653.9×, 23.1×)

#### 3. System Comparison
Figures 10 and 11 illustrate the system's performance under TPC-C with varying numbers of clients and lock servers. In the second scenario, using six machines as clients and six as lock servers, NetLock still outperforms DSLR (DrTM, NetChain) by:
- **Transaction Throughput:** up to 17.5× (33.1×, 5.5×)
- **Average Latency:** up to 11.8× (65.6×, 7.7×)
- **Tail Latency:** up to 10.5× (602.8×, 34.4×)

#### 4. Policy Support
NetLock supports flexible policies, including starvation-freedom, which reduces tail latency. Additionally, it supports:
- **Service Differentiation:** Prioritizing high-priority tenants over low-priority ones.
- **Performance Isolation:** Ensuring each tenant receives an equal share of resources, preventing one tenant from starving another.

#### 5. Memory Management
NetLock uses an optimal knapsack algorithm for memory allocation, maximizing the use of limited switch memory. Compared to a random allocation approach:
- **Throughput:** Improved by 2.95×
- **Latency:** Significantly reduced, especially at the tail

The impact of switch memory size on performance depends on think time and memory allocation. With efficient allocation, NetLock can achieve high throughput even with limited memory.

#### 6. Failure Handling
NetLock handles failures gracefully. During a switch failure, the system throughput drops to zero. Upon reactivation, the system quickly returns to its pre-failure throughput level. NetChain can be used to chain multiple NetLock switches, reducing downtime.

#### 7. Related Work
- **Lock Management:** Traditional centralized lock managers (e.g., [3, 23, 24, 29, 48]) are flexible but have limited performance. Decentralized solutions (e.g., [17, 40, 46, 49]) offer high performance but limited policy support. NetLock combines high performance with rich policy support.
- **Fast Distributed Transactions:** Systems like [11, 14, 19, 30, 34, 39, 44, 45, 47, 50, 51] use various techniques to improve performance. NetLock can be integrated into these systems without modifying transaction protocols.
- **In-Network Processing:** Recent work (e.g., [28, 36-38, 42, 43, 52]) leverages programmable switches for distributed systems. NetLock provides a new solution for lock management, integrating switch and server memory efficiently.

#### 8. Conclusion
NetLock is a novel centralized lock management architecture that leverages programmable switches and servers to achieve high performance and rich policy support. It provides orders-of-magnitude higher throughput with microsecond-level latency, making it suitable for IO-intensive workloads in the post-Moore's law era.

---

**Ethics:**
This work does not raise any ethical issues.

**Acknowledgments:**
We thank our shepherd Kun Tan and the anonymous reviewers for their valuable feedback. This work is supported in part by NSF grants CCF-1629397, CRII-1755646, CNS-1813487, CNS-1845853, and CCF-1918757, a Facebook Communications & Networking Research Award, and a Google Faculty Research Award.