handles, are not inherited by forking processes. The Binder
driver data structures are not
integrated with the kernel’s
process management and, hence, new processes always start
with an empty set of Binder references/nodes.
c) Capability merging: Every Binder reference and
hence capability is a one-to-one mapping to a Binder node and
for every Binder object exists exactly one Binder node. Thus, if
a process would receive a Binder reference to a Binder node for
which it already holds a reference, Binder would simply abort
the redundant operation. However, with Binder capabilities,
the access rights and string permissions of two capabilities for
the same Binder node would be merged if the parent ﬁeld
matches, i.e., we assign the union set of the access rights
and string permissions to the existing capability. Supporting
merging of capabilities from different parents, would require
per-parent access rights lists to support different revocation
strategies (e.g., consensus or priority).
d) Delegation paths: DROIDCAP provides three paths
for inter-process delegation of Binder capabilities:
(1) Bound services: A process holding a Binder reference
to another process executing a bound Service can transfer a
capability directly as part of a Binder transaction. This path is
used, e.g., to delegate capabilities to isolated processes.
(2) Intents: A process can attach a capability to an Intent mes-
sage. Since all Intent messages are routed to their destinations
through the AMS, the capability is transferred ﬁrst into the
AMS’ Binder context and from there to the Intent receivers’
context. To ensure that the parent ﬁeld of the capability is
correct, AMS uses its special role and instructs the Binder
driver to not update the parent ﬁeld when transferring the
capability to a receiver. This mechanism is used, for instance,
when delegating a URI permission to another app via an Intent.
(3) ioctl command: A process can also instruct the Binder
driver to delegate a capability to another process for which
the delegator knows the PID. If the delegatee already has a
capability for the same Binder node, the privileges are merged.
If not, this capability of the delegatee is initially dormant, i.e.,
the process has no handle to use it until a transaction transfers
a reference to the same node to the delegatee. This path is
used during the grantUriPermission method. If an app grants
access to a URI to another process and that process has not yet
a ContentResolver to the corresponding ContentProvider, the
capability is dormant until the ContentResolver is requested
from the AMS ( 5 in Figure 3).
4) Revocation: To support
the dynamic permissions of
stock Android where users can revoke app’s permissions at
runtime, DROIDCAP enables revocation and downgrading of
access rights at runtime. We found that in stock Android an
app’s processes are killed when permission settings change.
Although this is a rather crude approach for revocation, it
is effective and in line with stock Android for revocation
of Binder capabilities in DROIDCAP. Binder capabilities are
removed from the kernel when the owning process dies (Q2)
and they have to be requested again when the process restarts,
with changes on permissions encoded.
To support app developers in revoking delegated capabil-
ities (Q2), we introduced new commands to the ioctl call to
9
Fig. 5. Enforcing permissions of broadcast sender and receiver in the AMS
the Binder driver. First, if the delegating process has a Binder
handle to the delegatee process (e.g., bound service), the del-
egator can present the driver with its handle to the delegatee’s
process and the capability of the delegator that was passed on.
Using those credentials, the delegator can instruct the driver
to revoke access rights from the delegatee’s capability. If the
Binder driver can locate a corresponding capability in the
delegatee’s Binder context and that capability’s parent ﬁeld
points back to the delegator process, the Binder driver can
revoke (or increase) the delegatee’s access rights within the
bounds of the delegator’s access rights. Second, if the delegator
has no handle to the delegatee’s process (e.g., delegation via
Intents or grantUriPermission) but has a PID or UID (e.g., the
delegatee’s packagename is known), the delegator can instruct
the Binder driver to revoke a capability or access right of the
UID’s processes or process under the PID. Third, the delegator
can purge a capability by instructing the driver to remove a
capability it holds from all processes in the system to which
the delegator transfered that capability.
5) Invocation: From developer’s point of view, invoking
a Binder capability is identical to invoking a regular Binder
handle. However, the driver additionally injects the caller’s
access rights and delegated URIs from the caller’s capability
into the transaction data before passing the request to the target
process ( E in Figure 3). The target process, e.g., a system
service or a Content Provider, can use two new API methods
getCallingRights and getCallingDelegatedURIs to check the
calling process’ permissions ( F ). Given that getSystemService
and getContentResolver are the only ways to retrieve Binder
handles of system services and content providers (except for
delegation within logical apps), it is guaranteed that those
permissions were authorized by the system.
As such, our current DROIDCAP design diverges from a
pure object-capability system, where the access to the target
service would be enforced within the Binder driver, while we
defer the enforcement of capabilities to the target processes.
We adopted this design from stock Android to avoid mixing
middleware semantics (i.e., permissions) with kernel-level se-
mantics and to ease backward compliance to stock Android.
In addition to checking the access rights of the calling
processes, the application framework enables apps to control
which processes are allowed to handle speciﬁc events initiated
by the caller. For example, an app might require a Broad-
cast receiver to hold speciﬁc permissions where sending the
Broadcast itself requires a permission from the sender. In stock
Android, this situation is handled by the AMS (see Figure 5),
which receives the send broadcast request ( 1 ), resolves target
Broadcast Receiver and checks sender’s permissions to broad-
cast this speciﬁc Intent ( 2 ), and ﬁnally delivers the Broadcast
message ( 6 ). To cover this scenario in DROIDCAP, without
diverging from the object-capability model where access rights
Send broadcastReceiver ProcessCheck sender’s access rights & resolve target(s)Deliver broadcastSenderProcessNotify: there is a messageActivityManagerServiceBroadcast ReceiverInvoke AMS to read msg4Check receiver’s access rights63215Operations of DroidCapOperations of Stock Androidto those used in the bionic library, and Android P enforces even
more restrictions [4]. Fortunately, this signiﬁcantly reduces the
effort required for porting the Capsicum’s seccomp policy to
Android. By comparing the Android and Capsicum policies we
ﬁnd that Android’s policy is more relaxed than Capsicum’s.
For our integration, we used the policy of Android 9 after
making sure none of the whitelisted syscalls is likely to break
the conditions of the capability mode mentioned above. The
only modiﬁcation to Android’s seccomp policy was setting the
OPENAT BENEATH ﬂag in the process. Capsicum requires
this ﬂag to prevent processes from escaping the directory
referenced by the ﬁle descriptor passed to the *at() syscall, i.e.,
the relative path is not allowed to contain ”..” nor to start with
”/”. Using this policy, when zygote calls SetUpSeccompFilter()
(see Figure 6), Capsicum’s capability mode becomes effective
immediately. Naturally, app processes will crash in capability
mode unless they are supplied with necessary ﬁle descriptors
for the operation. However, supplying processes with necessary
ﬁle descriptors is a non-trivial task and the primary challenge
for putting app processes into Capsicum’s capability mode:
Capsicum assumes that the creator of a process in capability
mode has an operational relationship with that process (e.g.,
same developer) and knows exactly which ﬁle descriptors to
pass on; however, for zygote it is impossible to predict all re-
quired ﬁle descriptors an app might need, given the complexity
of Android apps that are composed of several libraries running
on different threads and continually accessing the ﬁle-system.
Passing necessary ﬁle descriptors to app processes in capability
mode at runtime—they cannot open them themselves—is not
an option, since it would require an all-privileged delegator
process that can open all requested ﬁles and delegate their
descriptors to app processes. Not only would this be inefﬁcient,
but also be a direct violation of least-privilege design.
the existing SELinux rules restrict
Instead, we solve this challenge with a combination of
statically opening possible root directories of needed ﬁles
prior to entering capability mode and relying on SELinux’
mandatory access control to constrain app behavior. We imple-
mented a proof-of-concept prototype of this solution as part of
DROIDCAP. We instrument zygote (see Figure 6) to statically
supply forked processes with valid ﬁle descriptors for common
root directories (i.e., /dev, /system, and /data). To do so,
we relax SELinux’ policy to allow zygote and apps to create
ﬁle descriptors for root directories with necessary POSIX
permissions to be able to use them in *at syscalls. Allow such
to Android’s security,
operations might seems decremental
however,
the resources
accessible by the process inside those directories. For example,
there is an SELinux rule that permits apps to access the
/dev/socket/netd interface but there is no rule to allow
access to /dev/kmsg. However, using those ﬁle descriptors
requires all call-sites to switch to openat() syscalls instead
of open(). Since the default seccomp policy prohibits open(),
all call-sites in fact already use openat(), but unfortunately
Android’s libraries show a persistent pattern of using openat()
with AT FDCWD as the ﬁrst argument and an absolute path as
the second argument, which yields the same semantics of using
an open() syscall. Due to the additional OPENAT BENEATH
ﬂag in capability mode, this patter fails and causes apps to
crash due to denied openat() syscalls. To avoid refactoring the
entire Android SDK to change those calls to be compliant with
the OPENAT BENEATH ﬂag, we implemented a proxy for
Fig. 6. Sandboxing app processes using Capsicum capability mode
of Binder capabilities are checked on IPC-recipient’s side, we
introduce a callback from the AMS to the Broadcast Receivers,
triggering them to invoke the AMS ( 3 ) and request
that
Broadcast message to be delivered ( 4 ). At this point, the AMS
can check the access rights of the receivers’ capabilities to
authorize delivery of this Broadcast according to the sender’s
speciﬁcation ( 5 ) and delivers the Broadcast message only if
successfully authorized ( 6 ). This extension to the Android
SDK preserves backward compatibility with existing apps.
E. Capsicum Capabilities
The bulk of Android’s permissions are enforced by the
application frameworks services and apps, which are called via
Binder IPC. However, a handful of permissions are enforced
by the Linux kernel (using GIDs) and do not involve IPC,
hence, excluding Binder references as technical realization
of capabilities for those ﬁle-system-related permissions. To
also cater for those ﬁle-system permissions, we integrated
Capsicum for Linux [20] into DROIDCAP and ported the
Capsicum userspace library [3] into Android’s middleware.
Although Android is based on Linux, this integration was a
non-trivial technical task, which we elaborate on the following.
Generally, the capability mode, as implemented in Cap-
sicum for Linux project, enforces four conditions: 1) A process
that entered the capability mode cannot exit it and this mode
is inherited by all its child processes. 2) In capability mode, a
process has only access to whitelisted syscalls with whitelisted
parameters (e.g., open syscall is prevented whereas openat
is allowed). Blocking syscalls forces developers to rely only
on ﬁle descriptors, which are wrapped as capabilities, for
ﬁle-system operations. Whitelisting policies are enforced by
Linux seccomp. 3) A process in capability mode can create new
ﬁle descriptors only under the directories for which they were
delegated access to. File descriptors are either delegated stati-
cally, by means of opening them before entering the capability
mode (e.g., using open syscall), or dynamically by receiving
them over IPC (e.g., sockets) from another process. 4) To
invoke a syscall on a ﬁle descriptor, this ﬁle descriptor has to
be associated with the necessary capabilities, otherwise the call
will fail (e.g., reading a ﬁle and changing its offset requires the
CAP READ and CAP SEEK Capsicum capabilities). Those
capabilities are enforced when resolving the ﬁle descriptor to
a ﬁle struct in the kernel.
1) Integration into Android: Starting from Android 8, sec-
comp policies restrict the number of syscalls available to apps
10
1. fork()ZygoteApp’s processSetUpSeccompFilter()setresuid()setresgid()selinux_setcontext()Initialization phaseopen ﬁlesOperation phaseOpeneddirectorieslist()ProxyVirtual File System2. open common root directories(e.g., /etc, /data, /system)and store their fds3. open directory4. store fd5. openat(FDCWD,absPath)6. get dirFD7. openat(dirFD, relPath) Introduced by DroidCapModiﬁed for DroidCapkerneluserspace open common dirs(zygote’s selinux context)openat() syscalls inside the kernel that draws from the design
of syscall interposition techniques [53]. When zygote opens
the root directories (step 2), we intercept the call (see Proxy in
Figure 6), open the directories, and store their ﬁle descriptors
along with the paths they reference in a special table for
the designated process inside the kernel (step 4). When the
openat() syscall is invoked (step 5), we again intercept the
call in the proxy, get the root directory of the absolute path,
retrieve the ﬁle descriptor for that directory from the table of
root directories (step 6), and rewrite the call such that a relative
path is opened under the ﬁle descriptor of the directory (step 7).
2) Delegation of Capsicum Capabilities: Transferring Cap-
sicum capabilities over sockets is the natural way for delega-
tion, but since the Binder framework also enables transfer of
ﬁle descriptors, it can be instrumented to transfer Capsicum
capabilities making delegation/revocation more convenient to
app developers. However, in either case, the kernel has to
be aware of all delegated Capsicum capabilities to enable
revocation, and more importantly, to prevent arbitrary accesses
to ﬁle-system resources. To understand how delegation works,
we consider a scenario where an app delegates access to the
Internet, enabling the receiver to open an Internet socket. Upon
transferring of the Capsicum capability to the receiver, the
kernel creates a new entry inside the table of delegations. The
entry identiﬁes the source, the target, delegated rights, and the
inode of the ﬁle descriptor. Further checks are made to ensure
the source has access to the delegated object with the rights
to be delegated or has the necessary privileges (e.g., Zygote).
When the receiver of the delegation tries to make use
of the delegated capability to the Internet driver and tries
to create a new Internet socket, it opens the driver using
the openat syscall. The kernel would immediately retrieve
the source’s inode identiﬁed by the relative path and the ﬁle
descriptor of the parent directory, and compares it with the one
delegated and previously stored in the table of delegations, if
any. This is to ensure that both operations (i.e., delegation and
opening of delegated capability) address the same resource.
Checking the table of delegations is an inevitable operation
to guarantee that all delegations are considered. Given that
DAC would prevent the receiver process from opening the
ﬁle because it does not hold the necessary DAC privileges
(identiﬁed by the group ID), our kernel extension overrules
DAC. Then, the kernel sets the delegated rights on the ﬁle
descriptor forming a Capsicum capability, and ﬁnally marks
it with the delegated ﬂag before returning it. This form of
delegation happens when Zygote forks new processes whose
apps are granted the Internet permission. To enable usage
of delegated Capsicum capabilities without triggering a clash
between security policies of Capsicum and DAC, we disable
GID-based checks for ﬁle-system accesses only when the ﬁle
descriptor in use is a delegated Capsicum capability, identiﬁed
by the delegated ﬂag. This technique can work for delegating
access to ﬁles in the private directory.
3) External Storage: Given Android’s unconventional
mechanism [5] in mounting different storage devices that
differ in ﬁle-system permissions based on the granted runtime
Android permissions for reading and writing to the external
storage, access to ﬁles stored on the external storage using
Capsicum capabilities would require integration with the vold
daemon which is beyond the scope of our prototype.
Fig. 7. Compartmentalizing an app to form a logical app.
F. Case Studies
In this section, we present two case studies that show
DROIDCAP’s potential in supporting app developers in com-
partmentalizing their apps using Binder capabilities. We defer