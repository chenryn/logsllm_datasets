in the example above. So it is necessary to preserve policy secrecy
from legitimate recipients (apart from general public) to prevent a
recipient satisfying one sub policy to obtain the data from knowing
other sub policies. While PBES provides policy secrecy from gen-
eral public and from legitimate recipients it is possible to gain some
information about the policy by gaming the system and from side
channels such as trafﬁc patterns. Some of this information leak-
age to outsiders can be mitigated by using secure TLS channels
to upload and download data from the data repositories but a full
analysis of policy information leakage is out of the scope of this
paper.
Choosing ISOs to act as KDCs to enforce access control on data
owned by utilities under their jurisdiction has the following two
advantages. First, the trust relationships of the ISO with all the
utilities under its jurisdiction are leveraged to enable data sharing
between utilities without the need to establish pairwise trust. Cur-
rently ISOs already administer Certiﬁcate Authorities (CAs) that
issue certiﬁcates to users in the utilities based on the federated user
identity databases at the utilities that it has access to. Second, an
ISO is ideally suited to enforce certain context based policies that
condition upon prevailing conditions in the grid, as in the example
above, as it has a much wider view of the grid than any single util-
ity. The environment/context attributes extracted from the current
state of the power grid by the ISO along with the federated identity
and attribute databases that the ISO has access to constitute the At-
tribute Database shown in Figure 2. In terms of key management,
in our system data owners only need to obtain the public keys of
KDCs in order to encrypt objects intended for any recipient that
trusts those KDCs. In the power grid knowing the public keys of
the dozen or so ISOs sufﬁces to reach all users registered in those
ISO domains. For data recipients we do not add any additional key
management burden but we require recipients to contact the KDC
for every decryption, which also provides support for immediate
revocation because the KDC veriﬁes policies for every object it de-
crypts. In systems where objects can potentially reside in reposito-
ries for a long time, immediate revocation provides effective policy
compliance at the time of access.
While the ISO is able to enforce the access policy it is unlikely to
have the resources to manage the data itself. This is because ISOs
may oversee many BAAs, e.g., Midwest ISO (MISO) manages 37
BAAs, and they might have to manage large amounts of data (tens
of thousands of objects adding up to hundreds of petabytes) and
enforce different access policies on data from different control ar-
eas and utilities. A more feasible solution is the utilization of data
warehousing solutions whereby encrypted data with an associated
(encrypted) access policy is posted on a semi-trusted storage facil-
ity. The facility may be trusted to enforce coarse-grained access
control such as limiting write operations to trusted utilities and en-
sure availability but should not be trusted for access to content; oth-
erwise, it will become an attack target for access to all data [33].
So either utilities themselves might host repositories for data they
are willing to share or utilize an external data warehousing facility
to provide semi-trusted storage. Table 2 shows which power grid
entities play the roles of the components in the PBES architecture
presented in Figure 2.
Table 2: PBES Entities vs. Power Grid Entities
PBES Entities
Data Owner/Sender
Data Repository
KDC
Receiver
Attribute Database
Power Grid Entities
Utilities
Hosted by BAs/Utilities or Data Warehousing
Providers
ISO
Utilities, BAs
Environmental Attributes based on Power Grid
State observed at the ISO along with Federated
Identity/Attribute Databases at utilities
7. APPLICATION DESIGN ISSUES
We now discuss some design challenges that need to be addressed
when developing applications with PBES and certain properties of
PBES that potentially limit PBES’ suitability for certain kinds of
applications. We then present the design choices we made for the
power grid data sharing application.
Trust Model for KDCs An important issue in deploying PBES
for an application in a distributed setting is identifying a trust model,
i.e., identifying KDCs that an object encryptor can trust to dis-
tribute the object decryption key to appropriate recipients. A simple
trust model is for all users to trust a single KDC to appropriately
distribute decryption keys for their objects. However, a more scal-
able model would be to have multiple KDCs that users can trust
for different sets of users and objects. For example, every domain
may have its own KDC that is responsible for distributing mes-
sage decryption keys to users within the domain appropriately as
was proposed for IBE [36]. The choice of trust model varies from
application to application and we believe that a domain-based ap-
proach will be suitable for many applications. This trust model is
similar to that of other policy-based encryption schemes that trust
key distribution servers in recipient domains to distribute keys to
appropriate users. In the power grid data sharing application we
adopt a simple approach that each ISO/RTO will manage a KDC
and provide mediated policy enforcement for users within the ISO
oversight.
KDC Public-Key Distribution and Revocation Another chal-
lenge is distributing authentic public-keys of KDCs and timely re-
vocation information for those keys. Recently, schemes to dis-
tribute keys via DNS have been proposed [29, 36] and such an
approach would be suitable for distribution of KDC public keys.
While these schemes do not provide strong security guarantees (e.g.,
they are vulnerable to DNS cache poisoning attacks), wider deploy-
ment of the secure version of DNS, namely, DNSSEC [4], will im-
prove the security. In the power grid data sharing application we
recommend that NERC make the public keys of the ISOs avail-
able in a trusted manner; e.g., using regular trusted communication
channels.
Policy Speciﬁcation Language and Enforcement Engine An-
other issue is the identiﬁcation, deployment and use of an appro-
priate policy speciﬁcation language and enforcement engine. The
language should be sufﬁciently expressive and the engine should
be user-friendly, have strong performance and ideally should have
formally veriﬁed assurances. Furthermore, standardization of tools
can signiﬁcantly aid in achieving software and interface compati-
bility when exchanging objects across domains. While there are a
range of potential languages and tools we believe that tools based
on XACML are a good candidate for PBES. These tools have been
used to specify ﬂexible policies in various types of access control
systems4. In particular, they allow us to specify ﬂexible policies
of the types described above including the use of attribute based
expressions with string and numerical attributes that may be com-
bined with AND, OR and NOT operands as well as context vari-
ables (e.g., time of day). The XACML language has been standard-
ized and there exist several implementations of engines for policy
veriﬁcation among which Sun’s implementation is quite popular
and Margrave has been formally veriﬁed [21]. For the power grid
data sharing application PBES uses XACML based tools.
Key escrow Given the PKEM part of any encrypted object the
KDC can always decrypt it to reveal the DEM decryption keys for
the object. Therefore, our system provides key escrow service via
the KDC for the symmetric object keys. Note that in regular mode
of operation the KDC never sees the encrypted objects, just the en-
crypted object DEM keys. This kind of key escrow is common to
several encryption systems that minimize encryption key distribu-
4http://www.oasis-open.org/committees/download.php/
27298/xacmlRefs-V1-84-1.htm
tion tasks. For example, in IBE [11] or CP-ABE [10] the PKG can
always generate a private key for any given public key, however,
under normal mode of operation the PKG never sees encrypted
messages. The difference being that a PKG provides escrow for
private keys while we provide escrow for symmetric keys. This
key escrow property may limit the applicability of our scheme in
certain applications that demand strong end-to-end conﬁdentiality
assurances. For example, exchange of sensitive content between
two parties that know each other. However, in the power grid data
sharing application the ISOs are already entrusted with access to
most of this data for regulatory purposes. (ISOs keep this data only
for a short time to ensure reliability and safety but do not typically
store the data for long-term use.) In general, in large systems where
senders wish to send conﬁdential messages to a set of (possibly un-
known) recipients that satisfy a given policy such strong assurances
may not be needed.
Online nature Since recipients need to contact the KDC for
every decryption, the KDC needs to be always online and have ad-
equate throughput to support this mediated decryption. This prop-
erty of being always online may limit the applicability of our scheme
for applications that have an ofﬂine nature. For example, exchange
of secure messages in a sensor network that have limited connec-
tivity to CAs/KDCs. However, we observe that the power grid and
many distributed applications being developed and deployed today
have a largely online nature in that users usually access objects over
the network. For example, utilities regularly deliver data to ISOs
over wide-area networks. We argue that in such an online world
many of these applications can accommodate the presence of an
online KDC. Furthermore, in applications where auditing and ac-
countability is needed, mediated decryption offers an ideal oppor-
tunity for providing such capabilities. In Section 8 we study the
throughput of a prototype implementation of a KDC and demon-
strate that adequate throughput can be achieved with today’s gen-
eral purpose compute systems.
Arguments that support the need for online key generation/ dis-
tribution servers have also been implicitly made by other policy
encryption systems such as IBE and CP-ABE for PKGs to be avail-
able to generate and distribute private keys to users on a regular ba-
sis as these system employ short-lived keys to support revocation
capabilities. Other systems such as PEAPOD [30] require recipi-
ents to contact an online CA for every object as well. In all these
systems a security concern that arises from their online nature is
the potential compromise of the KDC/CA/PKG private keys. To
minimize this possibility, threshold decryption and key generation
functions can be deployed over multiple servers to provide both
increased intrusion tolerance and availability [7, 24, 28].
8. PROTOTYPE IMPLEMENTATION AND
PERFORMANCE
We have implemented the PBES system and the PKEM-DEM
construction and measured its performance. The implementation
is aimed at releasing an easy-to-use toolkit in the near future that
allows for integration in distributed applications. The implementa-
tion is built using the Java Bouncycastle Library and its S/MIME
and CMS Processors. These libraries and processors were chosen
to allow for platform independence, ﬂexible licensing of the toolkit
and a simpliﬁed process for its standardization. Bouncycastle has
an open source license, CMS is a well accepted standard for mes-
sage encapsulation and S/MIME is a well accepted standard for
public key encryption for multi-part messages (typically used in
e-mail systems).
The PBES implementation provides interfaces for the following
components: 1) object encryption, 2) policy decryption and veriﬁ-
cation and 3) object decryption. KDC private/public keys are as-
sumed to be pre-created (e.g., using RSA key generation tools) and
installed. Using the provided KDC public key, the object encryp-
tion component expects as input two ﬁles − one providing the mes-
sage and one providing the policy. It then encrypts these ﬁles using
the PKEM-DEM encryption scheme. While the object encryption
interface treats both ﬁles as arbitrary strings, we use XACML as
the policy language in our system. To allow for the encryption and
transmission of the XACML policy within the S/MIME processors,
we use the OtherRecipientInfo type and value ﬁelds in S/MIME to
specify the policy. The policy decryption and veriﬁcation inter-
face expects as input an S/MIME encrypted object with the PKEM
format, the KDC private key, and an authenticated user identity.
For authentication we require users to initiate a TLS channel and
provide a username/password, which are checked against a salted
password database. This component then contacts the Attribute
Database, which in our case is a SQL server, using a SQL query
with the authenticated identity. After receiving the attributes it uses
the XACML engine (in our case Sun’s Java implementation5) to
verify the decrypted policy. If the policy is satisﬁed it releases the
DEM keys over the secure channel. Finally, the object decryption
component expects as input an encrypted ﬁle and a DEM key us-
ing which it applies the DEM decryption and outputs a ﬁle with the
decrypted message.
Performance We instantiate our PKEM-DEM scheme using an
RSA-based CCA secure KEM, RSA-KEM [35], and an OTCCA
secure DEM, DEM1 [15,35] (essentially symmetric encryption with
a message authentication code) as shown in Figure 3. We use a
sample XACML policy with rules that involve the combination of
10 different attributes each. We use boolean, string and numerical
attributes as well as a range of operands including AND, OR and
NOT. Note that we do not limit the number of attributes used in the
system but just those used in each policy rule for this evaluation.
Such policies intuitively match the complexity of policies that users
can typically conceive of to protect data. Since PKEM-DEM is
essentially a very efﬁcient encryption/decryption scheme the only
potential performance bottleneck for an application is the policy de-
cryption and veriﬁcation component. To evaluate the performance
we measure the throughput of this component, which involves the
following tasks: perform a RSA and an AES decryption, verify the
MAC, setup and message exchange over secure TLS channel, fetch
attributes from the Attribute Database and verify the policy. We use
a 1024 bit RSA, 128 bit and 256 bit SHA-1, 128 bit AES, a SQL
Attribute Database server located in the same subnet over a gigabit
link and the Sun XACML engine placed on the same server as the
KDC. The KDC server is a workstation with a 32-bit, 2.4 Ghz Pen-
tium 4 processor while the database is a Windows 2003 Server with
dual Intel Xeon 3.2GHz processors. Averaged over 10,000 runs the
latency for the various tasks is as follows: 20.2ms for the RSA and
AES decryption, negligible for the MAC, 44.7ms for the TLS chan-
nel, 40ms to fetch attributes and 12.8ms to verify the policy for a
total of 117.7ms. That is, we can support 510 requests/min.
Performance Comparison PEAPOD requires mediated access
similar to PBES and while they do not implement their system,
their calculations indicate a similar performance of hundreds of re-
quests per minute for the mediation server. Both PBES and PEA-
POD require mediated access while CP-ABE does not, therefore,
it is hard to compare the performance of these systems. However,
we would like to note that in practice CP-ABE also needs to be on-
line for the simple reason that in any system with a large number
5http://sunxacml.sourceforge.net/
Table 3: Characteristics of schemes providing policy based encryption capabilities
Policy
Type
And Flexibility
PKI
Recipient Identity
IBE [11]
Flexible
context
based policy tied
to an identity
Policy Secrecy
Not supported
Not supported
Collusion
Not applicable
Not applicable
End-to-end
Encryption
Encryption
Key Distribu-
tion
Decryption
Key Distribu-
tion