architecture and the operation of the Windows operating system (such as
internal kernel structures and functions), this content is subject to change
between releases. By “subject to change,” we don’t necessarily mean that
details described in this book will change between releases, but you can’t
count on them not changing. Any software that uses these undocumented
interfaces, or insider knowledge about the operating system, might not work
on future releases of Windows. Even worse, software that runs in kernel
mode (such as device drivers) and uses these undocumented interfaces might
experience a system crash when running on a newer release of Windows,
resulting in potential loss of data to users of such software.
In short, you should never use any internal Windows functionality, registry
key, behavior, API, or other undocumented detail mentioned in this book
during the development of any kind of software designed for end-user
systems or for any other purpose other than research and documentation.
Always check with the Microsoft Software Development Network (MSDN)
for official documentation on a particular topic first.
Assumptions about you
The book assumes the reader is comfortable with working on Windows at a
power-user level and has a basic understanding of operating system and
hardware concepts, such as CPU registers, memory, processes, and threads.
Basic understanding of functions, pointers, and similar C programming
language constructs is beneficial in some sections.
Organization of this book
The book is divided into two parts (as was the sixth edition), the second of
which you’re holding in your hands.
■    Chapter 8, “System mechanisms,” provides information about the
important internal mechanisms that the operating system uses to
provide key services to device drivers and applications, such as
ALPC, the Object Manager, and synchronization routines. It also
includes details about the hardware architecture that Windows runs
on, including trap processing, segmentation, and side channel
vulnerabilities, as well as the mitigations required to address them.
■    Chapter 9, “Virtualization technologies,” describes how the Windows
OS uses the virtualization technologies exposed by modern processors
to allow users to create and use multiple virtual machines on the same
system. Virtualization is also extensively used by Windows to provide
a new level of security. Thus, the Secure Kernel and Isolated User
Mode are extensively discussed in this chapter.
■    Chapter 10, “Management, diagnostics, and tracing,” details the
fundamental mechanisms implemented in the operating system for
management, configuration, and diagnostics. In particular, the
Windows registry, Windows services, WMI, and Task Scheduling are
introduced along with diagnostics services like Event Tracing for
Windows (ETW) and DTrace.
■    Chapter 11, “Caching and file systems,” shows how the most
important “storage” components, the cache manager and file system
drivers, interact to provide to Windows the ability to work with files,
directories, and disk devices in an efficient and fault-safe way. The
chapter also presents the file systems that Windows supports, with
particular detail on NTFS and ReFS.
■    Chapter 12, “Startup and shutdown,” describes the flow of operations
that occurs when the system starts and shuts down, and the operating
system components that are involved in the boot flow. The chapter
also analyzes the new technologies brought on by UEFI, such as
Secure Boot, Measured Boot, and Secure Launch.
Conventions
The following conventions are used in this book:
■    Boldface type is used to indicate text that you type as well as
interface items that you are instructed to click or buttons that you are
instructed to press.
■    Italic type is used to indicate new terms.
■    Code elements appear in italics or in a monospaced font, depending
on context.
■    The first letters of the names of dialog boxes and dialog box elements
are capitalized—for example, the Save As dialog box.
■    Keyboard shortcuts are indicated by a plus sign (+) separating the key
names. For example, Ctrl+Alt+Delete means that you press the Ctrl,
Alt, and Delete keys at the same time.
About the companion content
We have included companion content to enrich your learning experience.
You can download the companion content for this book from the following
page:
MicrosoftPressStore.com/WindowsInternals7ePart2/downloads
Acknowledgments
The book contains complex technical details, as well as their reasoning,
which are often hard to describe and understand from an outsider’s
perspective. Throughout its history, this book has always had the benefit of
both proving an outsider’s reverse-engineering view as well as that of an
internal Microsoft contractor or employee to fill in the gaps and to provide
access to the vast swath of knowledge that exists within the company and the
rich development history behind the Windows operating system. For this
Seventh Edition, Part 2, the authors are grateful to Andrea Allievi for having
joined as a main author and having helped spearhead most of the book and its
updated content.
Apart from Andrea, this book wouldn’t contain the depth of technical
detail or the level of accuracy it has without the review, input, and support of
key members of the Windows development team, other experts at Microsoft,
and other trusted colleagues, friends, and experts in their own domains.
It is worth noting that the newly written Chapter 9, “Virtualization
technologies” wouldn’t have been so complete and detailed without the help
of Alexander Grest and Jon Lange, who are world-class subject experts and
deserve a special thanks, in particular for the days that they spent helping
Andrea understand the inner details of the most obscure features of the
hypervisor and the Secure Kernel.
Alex would like to particularly bring special thanks to Arun Kishan,
Mehmet Iyigun, David Weston, and Andy Luhrs, who continue to be
advocates for the book and Alex’s inside access to people and information to
increase the accuracy and completeness of the book.
Furthermore, we want to thank the following people, who provided
technical review and/or input to the book or were simply a source of support
and help to the authors: Saar Amar, Craig Barkhouse, Michelle Bergeron, Joe
Bialek, Kevin Broas, Omar Carey, Neal Christiansen, Chris Fernald, Stephen
Finnigan, Elia Florio, James Forshaw, Andrew Harper, Ben Hillis, Howard
Kapustein, Saruhan Karademir, Chris Kleynhans, John Lambert, Attilio
Mainetti, Bill Messmer, Matt Miller, Jake Oshins, Simon Pope, Jordan Rabet,
Loren Robinson, Arup Roy, Yarden Shafir, Andrey Shedel, Jason Shirk,
Axel Souchet, Atul Talesara, Satoshi Tanda, Pedro Teixeira, Gabrielle Viala,
Nate Warfield, Matthew Woolman, and Adam Zabrocki.
We continue to thank Ilfak Guilfanov of Hex-Rays (http://www.hex-
rays.com) for the IDA Pro Advanced and Hex-Rays licenses granted to Alex
Ionescu, including most recently a lifetime license, which is an invaluable
tool for speeding up the reverse engineering of the Windows kernel. The
Hex-Rays team continues to support Alex’s research and builds relevant new
decompiler features in every release, which make writing a book such as this
possible without source code access.
Finally, the authors would like to thank the great staff at Microsoft Press
(Pearson) who have been behind turning this book into a reality. Loretta
Yates, Charvi Arora, and their support staff all deserve a special mention for
their unlimited patience from turning a contract signed in 2018 into an actual
book two and a half years later.
Errata and book support
We’ve made every effort to ensure the accuracy of this book and its
companion content. You can access updates to this book—in the form of a
list of submitted errata and their related corrections at
MicrosoftPressStore.com/WindowsInternals7ePart2/errata
If you discover an error that is not already listed, please submit it to us at
the same page.
For additional book support and information, please visit
http://www.MicrosoftPressStore.com/Support.
Please note that product support for Microsoft software and hardware is
not offered through the previous addresses. For help with Microsoft software
or hardware, go to
http://support.microsoft.com.
Stay in touch
Let’s keep the conversation going! We’re on Twitter: @MicrosoftPress.
CHAPTER 8
System mechanisms
The Windows operating system provides several base mechanisms that
kernel-mode components such as the executive, the kernel, and device drivers
use. This chapter explains the following system mechanisms and describes
how they are used:
■    Processor execution model, including ring levels, segmentation, task
states, trap dispatching, including interrupts, deferred procedure calls
(DPCs), asynchronous procedure calls (APCs), timers, system worker
threads, exception dispatching, and system service dispatching
■    Speculative execution barriers and other software-side channel
mitigations
■    The executive Object Manager
■    Synchronization, including spinlocks, kernel dispatcher objects, wait
dispatching, and user-mode-specific synchronization primitives such
as address-based waits, conditional variables, and slim reader-writer
(SRW) locks
■    Advanced Local Procedure Call (ALPC) subsystem
■    Windows Notification Facility (WNF)
■    WoW64
■    User-mode debugging framework
Additionally, this chapter also includes detailed information on the
Universal Windows Platform (UWP) and the set of user-mode and kernel-
mode services that power it, such as the following:
■    Packaged Applications and the AppX Deployment Service
■    Centennial Applications and the Windows Desktop Bridge
■    Process State Management (PSM) and the Process Lifetime Manager
(PLM)
■    Host Activity Moderator (HAM) and Background Activity Moderator
(BAM)
Processor execution model
This section takes a deep look at the internal mechanics of Intel i386–based
processor architecture and its extension, the AMD64-based architecture used
on modern systems. Although the two respective companies first came up
with these designs, it’s worth noting that both vendors now implement each
other’s designs, so although you may still see these suffixes attached to
Windows files and registry keys, the terms x86 (32-bit) and x64 (64-bit) are
more common in today’s usage.
We discuss concepts such as segmentation, tasks, and ring levels, which
are critical mechanisms, and we discuss the concept of traps, interrupts, and
system calls.
Segmentation
High-level programming languages such as C/C++ and Rust are compiled
down to machine-level code, often called assembler or assembly code. In this
low-level language, processor registers are accessed directly, and there are
often three primary types of registers that programs access (which are visible
when debugging code):
■    The Program Counter (PC), which in x86/x64 architecture is called
the Instruction Pointer (IP) and is represented by the EIP (x86) and
RIP (x64) register. This register always points to the line of assembly
code that is executing (except for certain 32-bit ARM architectures).
■    The Stack Pointer (SP), which is represented by the ESP (x86) and
RSP (x64) register. This register points to the location in memory that
is holding the current stack location.
■    Other General Purpose Registers (GPRs) include registers such as
EAX/RAX, ECX/RCX, EDX/RDX, ESI/RSI and R8, R14, just to
name a few examples.
Although these registers can contain address values that point to memory,
additional registers are involved when accessing these memory locations as
part of a mechanism called protected mode segmentation. This works by
checking against various segment registers, also called selectors:
■    All accesses to the program counter are first verified by checking
against the code segment (CS) register.
■    All accesses to the stack pointer are first verified by checking against
the stack segment (SS) register.
■    Accesses to other registers are determined by a segment override,
which encoding can be used to force checking against a specific
register such as the data segment (DS), extended segment (ES), or F
segment (FS).
These selectors live in 16-bit segment registers and are looked up in a data
structure called the Global Descriptor Table (GDT). To locate the GDT, the
processor uses yet another CPU register, the GDT Register, or GDTR. The
format of these selectors is as shown in Figure 8-1.
Figure 8-1 Format of an x86 segment selector.
The offset located in the segment selector is thus looked up in the GDT,
unless the TI bit is set, in which case a different structure, the Local
Descriptor Table is used, which is identified by the LDTR register instead
and is not used anymore in the modern Windows OS. The result is in a
segment entry being discovered—or alternatively, an invalid entry, which
will issue a General Protection Fault (#GP) or Segment Fault (#SF)
exception.
This entry, called segment descriptor in modern operating systems, serves
two critical purposes:
■    For a code segment, it indicates the ring level, also called the Code
Privilege Level (CPL) at which code running with this segment
selector loaded will execute. This ring level, which can be from 0 to
3, is then cached in the bottom two bits of the actual selector, as was
shown in Figure 8-1. Operating systems such as Windows use Ring 0
to run kernel mode components and drivers, and Ring 3 to run
applications and services.
Furthermore, on x64 systems, the code segment also indicates
whether this is a Long Mode or Compatibility Mode segment. The
former is used to allow the native execution of x64 code, whereas the
latter activates legacy compatibility with x86. A similar mechanism
exists on x86 systems, where a segment can be marked as a 16-bit
segment or a 32-bit segment.
■    For other segments, it indicates the ring level, also called the
Descriptor Privilege Level (DPL), that is required to access this
segment. Although largely an anachronistic check in today’s modern
systems, the processor still enforces (and applications still expect) this
to be set up correctly.
Finally, on x86 systems, segment entries can also have a 32-bit base
address, which will add that value to any value already loaded in a register
that is referencing this segment with an override. A corresponding segment
limit is then used to check if the underlying register value is beyond a fixed
cap. Because this base address was set to 0 (and limit to 0xFFFFFFFF) on
most operating systems, the x64 architecture does away with this concept,
apart from the FS and GS selectors, which operate a little bit differently:
■    If the Code Segment is a Long Mode code segment, then get the base
address for the FS segment from the FS_BASE Model Specific
Register (MSR)—0C0000100h. For the GS segment, look at the
current swap state, which can be modified with the swapgs
instruction, and load either the GS_BASE MSR—0C0000101h or the
GS_SWAP MSR—0C0000102h.
If the TI bit is set in the FS or GS segment selector register, then get
its value from the LDT entry at the appropriate offset, which is
limited to a 32-bit base address only. This is done for compatibility
reasons with certain operating systems, and the limit is ignored.
■    If the Code Segment is a Compatibility Mode segment, then read the
base address as normal from the appropriate GDT entry (or LDT entry
if the TI bit is set). The limit is enforced and validated against the
offset in the register following the segment override.
This interesting behavior of the FS and GS segments is used by operating
systems such as Windows to achieve a sort of thread-local register effect,
where specific data structures can be pointed to by the segment base address,
allowing simple access to specific offsets/fields within it.
For example, Windows stores the address of the Thread Environment
Block (TEB), which was described in Part 1, Chapter 3, “Processes and
jobs,” in the FS segment on x86 and in the GS (swapped) segment on x64.
Then, while executing kernel-mode code on x86 systems, the FS segment is
manually modified to a different segment entry that contains the address of
the Kernel Processor Control Region (KPCR) instead, whereas on x64, the
GS (non-swapped) segment stores this address.
Therefore, segmentation is used to achieve these two effects on Windows
—encode and enforce the level of privilege that a piece of code can execute
with at the processor level and provide direct access to the TEB and KPCR
data structures from user-mode and/or kernel-mode code, as appropriate.
Note that since the GDT is pointed to by a CPU register—the GDTR—each
CPU can have its own GDT. In fact, this is exactly what Windows uses to
make sure the appropriate per-processor KPCR is loaded for each GDT, and
that the TEB of the currently executing thread on the current processor is
equally present in its segment.
EXPERIMENT: Viewing the GDT on an x64 system
You can view the contents of the GDT, including the state of all
segments and their base addresses (when relevant) by using the dg
debugger command, if you are doing remote debugging or
analyzing a crash dump (which is also the case when using
LiveKD). This command accepts the starting segment and the
ending segment, which will be 10 and 50 in this example:
Click here to view code image
0: kd> dg 10 50
                                                    P Si Gr 
Pr Lo
Sel        Base              Limit          Type    l ze an 
es ng Flags
---- ----------------- ----------------- ---------- - -- -- 
-- -- --------
0010 00000000`00000000 00000000`00000000 Code RE Ac 0 Nb By 
P  Lo 0000029b
0018 00000000`00000000 00000000`00000000 Data RW Ac 0 Bg By 
P  Nl 00000493
0020 00000000`00000000 00000000`ffffffff Code RE Ac 3 Bg Pg 
P  Nl 00000cfb
0028 00000000`00000000 00000000`ffffffff Data RW Ac 3 Bg Pg 
P  Nl 00000cf3
0030 00000000`00000000 00000000`00000000 Code RE Ac 3 Nb By 
P  Lo 000002fb
0050 00000000`00000000 00000000`00003c00 Data RW Ac 3 Bg By 
P  Nl 000004f3
The key segments here are 10h, 18h, 20h, 28h, 30h, and 50h.
(This output was cleaned up a bit to remove entries that are not
relevant to this discussion.)
At 10h (KGDT64_R0_CODE), you can see a Ring 0 Long Mode
code segment, identified by the number 0 under the Pl column , the
letters “Lo” under the Long column, and the type being Code RE.
Similarly, at 20h (KGDT64_R3_CMCODE), you’ll note a Ring 3
Nl segment (not long—i.e., compatibility mode), which is the
segment used for executing x86 code under the WoW64
subsystem, while at 30h (KGDT64_R3_CODE), you’ll find an
equivalent Long Mode segment. Next, note the 18h
(KGDT64_R0_DATA) and 28h (KGDT64_R3_DATA) segments,
which correspond to the stack, data, and extended segment.
There’s one last segment at 50h (KGDT_R3_CMTEB), which
typically has a base address of zero, unless you’re running some
x86 code under WoW64 while dumping the GDT. This is where
the base address of the TEB will be stored when running under
compatibility mode, as was explained earlier.
To see the 64-bit TEB and KPCR segments, you’d have to dump
the respective MSRs instead, which can be done with the following
commands if you are doing local or remote kernel debugging (these
commands will not work with a crash dump):
Click here to view code image
lkd> rdmsr c0000101
msr[c0000101] = ffffb401`a3b80000
lkd> rdmsr c0000102
msr[c0000102] = 000000e5`6dbe9000
You can compare these values with those of @$pcr and @$teb,
which should show you the same values, as below:
Click here to view code image
lkd> dx -r0 @$pcr
@$pcr                 : 0xffffb401a3b80000 [Type: _KPCR *]
lkd> dx -r0 @$teb
@$teb                 : 0xe56dbe9000 [Type: _TEB *]
EXPERIMENT: Viewing the GDT on an x86 system
On an x86 system, the GDT is laid out with similar segments, but at
different selectors, additionally, due to usage of a dual FS segment
instead of the swapgs functionality, and due to the lack of Long
Mode, the number of selectors is a little different, as you can see
here:
Click here to view code image
kd> dg 8 38
                                  P Si Gr Pr Lo
Sel    Base     Limit     Type    l ze an es ng Flags
---- -------- -------- ---------- - -- -- -- -- --------
0008 00000000 ffffffff Code RE Ac 0 Bg Pg P  Nl 00000c9b
0010 00000000 ffffffff Data RW Ac 0 Bg Pg P  Nl 00000c93
0018 00000000 ffffffff Code RE    3 Bg Pg P  Nl 00000cfa
0020 00000000 ffffffff Data RW Ac 3 Bg Pg P  Nl 00000cf3
0030 80a9e000 00006020 Data RW Ac 0 Bg By P  Nl 00000493
0038 00000000 00000fff Data RW    3 Bg By P  Nl 000004f2
The key segments here are 8h, 10h, 18h, 20h, 30h, and 38h. At
08h (KGDT_R0_CODE), you can see a Ring 0 code segment.
Similarly, at 18h (KGDT_R3_CODE), note a Ring 3 segment.
Next, note the 10h (KGDT_R0_DATA) and 20h
(KGDT_R3_DATA) segments, which correspond to the stack,
data, and extended segment.
On x86, you’ll find at segment 30h (KGDT_R0_PCR) the base