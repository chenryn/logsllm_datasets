### Different Commit-and-Prove Schemes and Universal Commitment Scheme

Different commit-and-prove (CP) schemes must be compatible with the same commitment scheme (and commitment key). Essentially, we need a universal commitment scheme that is as decoupled as possible from the specific argument systems that will operate on it. This notion can be described in terms of coupling, a common measure of how interconnected two components are in a software system.

### Challenges with State-of-the-Art zkSNARKs

Achieving such universality with state-of-the-art zkSNARKs entails major challenges:

1. **Non-Commit-and-Prove zkSNARKs**:
   - Most popular zkSNARKs, such as [PHGR13] and [Gro16], do not natively support commit-and-prove functionality.
   - A workaround involves proving the correct opening of the commitment, i.e., \( R(x, w) \land \text{"}c_{ck}(x) \text{ opens to } x\text{"}\).
   - This approach has two main drawbacks:
     - The SNARK \(\Pi\) must be expressive enough to include the commitment verification in its language, which may not be the case for specialized tasks.
     - Even if \(\Pi\) is expressive enough, encoding commitment verification incurs significant overheads. For example, handling a Pedersen commitment to a vector of length 2048 with [Gro16] results in a proving overhead of 428 seconds (7 minutes).

2. **Existing Commit-and-Prove SNARKs**:
   - Some existing SNARKs, such as [Gro10, CFH+15, Lip16, Vee17], have commit-and-prove capabilities but use their own specific commitment schemes.
   - In some cases, like [CFH+15], the commitment keys are relation-dependent, meaning commitments cannot be generated before fixing one or more relations.
   - In other cases, despite being relation-independent, commitment keys have a very specific structure that may not fit other proof systems.
   - The main limitation of existing commit-and-prove SNARKs is their incompatibility with each other and with potentially more efficient candidates.

### Our Results

#### LegoSNARK Framework
We present LegoSNARK, a framework for commit-and-prove zk-SNARKs (CP-SNARKs) that includes:

- **Definitions**: Formalize CP-SNARKs and their variants.
- **Composition Recipes**: Show how to use different CP-SNARKs in a generic and secure way for handling conjunction, disjunction, and sequential composition of relations. This enables the use of modularity in designing CP-SNARKs for complex relations out of schemes for simpler relations.
- **Generic Construction**: Efficiently turn a broad class of zkSNARKs into CP-SNARKs that can be composed together. This class includes several existing schemes such as those based on quadratic arithmetic programs [PHGR13, CFH+15, Gro16] or zk-vSQL [ZGK+17a, ZGK+17b]. For this transformation, we only need a "minimal" CP-SNARK, CPlink, for proving that two commitments (under different schemes) open to the same value.

#### LegoSNARK Gadgets
We construct new CP-SNARKs for several basic relations, such as:

- **CPlink**: Proves that two different Pedersen-like commitments open to the same vector. Plugging CPlink into our generic construction solves the challenges mentioned above and provides interoperable versions of several existing schemes.
- **CPlin**: Proves that a linear relation \( F \cdot u = x \) holds for a committed vector \( u \), a public matrix \( F \), and a public vector \( x \).
- **CPhad**: Proves that a vector \( u_0 \) is the Hadamard product of \( u_1 \) and \( u_2 \), when all three vectors are committed.
- **CPsfprm**: Proves a self-permutation, i.e., that \( y_i = y_{\phi(i)} \) for a public permutation \( \phi \) and a committed vector \( y \).
- **CPmm**: Proves that matrix \( X \) is the product of committed matrices \( A \) and \( B \).

All these schemes have succinct proofs and work for Pedersen-like commitments in bilinear groups. Using our generic construction with CPlink, they can be turned to support the same commitment and then be composed.

#### LegoSNARK Applications and Evaluation
Using our initial set of specialized proof gadgets, we combine them to build new succinct proof systems for various use cases, offering improvements over the state of the art. We have also implemented some of our solutions to test their concrete performance.

1. **Efficient Commit-Ahead-of-Time**:
   - Through our generic construction instantiated with CPlink, we obtained commit-and-prove versions of popular efficient zkSNARKs, such as Groth’s [Gro16], that can prove statements about data committed using the Pedersen scheme for vectors [Ped92].
   - Such commit-and-prove schemes are useful in applications where one needs to commit before the SNARK keys for a relation are created, e.g., to post commitments on a blockchain so that one can later prove statements about the committed data.
   - By applying our solution to [Gro16], we obtain a scheme that is 5000× faster than Groth16, where the commitment is encoded in the circuit.

2. **CP-SNARKs for Parallel Computation**:
   - Consider the problem of proving (in zero-knowledge) the correctness of a computation consisting of the same subcircuit executed in parallel.
   - The recent Hyrax system [WTs+18] is designed for and shows good performance on this type of circuit but requires an additional verification cost whenever the repeated subcircuits share (non-deterministic) inputs.
   - Using our LegoSNARK framework, we show how to build a new CP-SNARK based on Hyrax that avoids this problem by expressing parallel computation on joint inputs as a combination of fully parallel computation and a permutation check.

3. **CP-SNARKs for Arithmetic Circuits**:
   - We give two main constructions of CP-SNARKs for arithmetic circuit (AC) satisfiability.
   - **LegoAC**: Relies on an encoding of AC based on Hadamard products and linear constraints from [BCC+16] and can be built from CPlin and CPhad gadgets.
     - **LegoAC1**: From our CPlin and a CPhad from [Lip16], secure in the generic group model (GGM), enjoys constant-size proofs, and has a log n factor in proving time.
     - **LegoAC2**: From our CPlin and CPhad gadgets, secure in the GGM and random oracle model, has log n-size proofs but only linear proving time.
   - **LegoUAC**: Builds on an encoding of AC based on Hadamard products, additions, and permutations from [Gro09, BCG+17] and can be built from our CPhad and CPsfprm gadgets.
     - Admits a universal, circuit-independent CRS in the “specialization” model of [GKM+18], with a CRS size of O(N) where N is an upper bound on the number of gates of the circuits.

### Related Work

The idea of combining two different NIZKs to improve efficiency when handling heterogeneous computations has been considered by Chase et al. [CGM16] and more recently by Agrawal et al. [AGM18]. In [AGM18], they propose combining the Pinocchio scheme [PHGR13] with Sigma-protocol-based NIZKs and show an efficient construction for computations that combine algebraic relations in a cryptographic group and arbitrary computation. Their approach improves performance but is tailored to specific proof systems and does not always preserve succinctness. In contrast, our techniques are general, apply to a variety of existing proof systems, and preserve succinctness.

### Roadmap

- **Section 2**: Introduces notation and preliminary definitions.
- **Section 3**: Provides the basis for building our framework: composing CP-SNARKs, the notion of cc-SNARKs, and our compiler to import existing schemes into the framework.
- **Sections 4 and 5**: Present constructions for both Pedersen-like commitments and polynomial commitments.
- **Section 6**: Explains how to apply LegoSNARK to build schemes for arithmetic circuits.
- **Section 7**: Gives experimental details of our library.
- **Section 8**: Concludes the paper.

This text is the full work of our shorter version published at CCS’19. Several results, including security proofs, formal definitions, more schemes and constructions, and further details, only appear in this long version.