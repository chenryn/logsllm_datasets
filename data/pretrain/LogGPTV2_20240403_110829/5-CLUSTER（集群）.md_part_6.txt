notification_email {
PI:EMAIL //设置报警收件人邮箱
}
notification_email_from ka@localhost //设置发件人
smtp_server 127.0.0.1 //定义邮件服务器
smtp_connect_timeout 30
\# vrrp_strict #此行要么注释掉要么删掉
router_id lvs1 //设置路由ID号(实验需要修改)
}
vrrp_instance VI_1 {
state MASTER //主服务器为MASTER
interface eth0 //定义网络接口
virtual_router_id 50 //主辅VRID号必须一致
priority 100 //服务器优先级
advert_int 1
authentication {
auth_type pass
auth_pass 1111 //主辅服务器密码必须一致
}
virtual_ipaddress { 192.168.4.15 } //配置VIP（实验需要修改）
}
virtual_server 192.168.4.15 80 { //设置ipvsadm的VIP规则（实验需要修改）
delay_loop 6
lb_algo wrr //设置LVS调度算法为WRR
lb_kind DR //设置LVS的模式为DR
#persistence_timeout 50
#注意这样的作用是保持连接，开启后，客户端在一定时间内始终访问相同服务器
protocol TCP
real_server 192.168.4.100 80 { //设置后端web服务器真实IP（实验需要修改）
weight 1 //设置权重为1
TCP_CHECK { //对后台real_server做健康检查
connect_timeout 3 #每隔3s检查一次
nb_get_retry 3 #每次检查测三次
delay_before_retry 3
}
}
real_server 192.168.4.200 80 { //设置后端web服务器真实IP（实验需要修改）
weight 2 //设置权重为2
TCP_CHECK {
connect_timeout 3
nb_get_retry 3
delay_before_retry 3
}
}
}
\[root@proxy1\~\]# ipvsadm -C
\[root@proxy1 \~\]# systemctl start keepalived
\[root@proxy1 \~\]# iptables -F #清空防火墙规则
\[root@proxy1 \~\]# ipvsadm -Ln #查看LVS规则
\[root@proxy1 \~\]# ip a s #查看VIP配置
### 2）LVS2调度器设置Keepalived
\[root@proxy2 \~\]# vim /etc/keepalived/keepalived.conf
global_defs {
notification_email {
PI:EMAIL //设置报警收件人邮箱
}
notification_email_from ka@localhost //设置发件人
smtp_server 127.0.0.1 //定义邮件服务器
smtp_connect_timeout 30
\# vrrp_strict #此行要么注释掉要么删掉
router_id lvs2 //设置路由ID号（实验需要修改）
}
vrrp_instance VI_1 {
state BACKUP //从服务器为BACKUP（实验需要修改）
interface eth0 //定义网络接口
virtual_router_id 50 //主辅VRID号必须一致
priority 50 //服务器优先级（实验需要修改）
advert_int 1
authentication {
auth_type pass
auth_pass 1111 //主辅服务器密码必须一致
}
virtual_ipaddress { 192.168.4.15 } //设置VIP（实验需要修改）
}
virtual_server 192.168.4.15 80 { //自动设置LVS规则（实验需要修改）
delay_loop 6
lb_algo wrr //设置LVS调度算法为WRR
lb_kind DR //设置LVS的模式为DR
\# persistence_timeout 50
#注意这样的作用是保持连接，开启后，客户端在一定时间内始终访问相同服务器
protocol TCP
real_server 192.168.4.100 80 {
//设置后端web服务器的真实IP（实验需要修改）
weight 1 //设置权重为1
TCP_CHECK { //对后台real_server做健康检查
connect_timeout 3 //超时3S
nb_get_retry 3 // 连续3次
delay_before_retry 3
}
}
real_server 192.168.4.200 80 {
//设置后端web服务器的真实IP（实验需要修改）
weight 2 //设置权重为2
TCP_CHECK {
connect_timeout 3
nb_get_retry 3
delay_before_retry 3
}
}
\[root@proxy2 \~\]# systemctl start keepalived
\[root@proxy2 \~\]# ipvsadm -Ln #查看LVS规则
\[root@proxy2 \~\]# ip a s eth0 #查看VIP设置
## 步骤五：客户端测试
客户端使用curl命令反复连接http://192.168.4.15，查看访问的页面是否会轮询到不同的后端真实服务器。
# 3 案例1：配置HAProxy负载平衡集群
HAProxy是一个使用C语言编写的自由及开放源代码软件\[1\]，其提供高可用性、负载均衡，以及基于TCP和HTTP的应用程序代理。
HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中，
同时可以保护你的web服务器不被暴露到网络上。
HAProxy实现了一种事件驱动,
单一进程模型，此模型支持非常大的并发连接数。多进程或多线程模型受内存限制
、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。事件驱动模型因为在有更好的资源和时间管理的用户空间(User-Space)
实现所有这些任务，所以没有这些问题。此模型的弊端是，在多核系统上，这些程序通常扩展性较差。这就是为什么他们必须进行优化以
使每个CPU时间片(Cycle)做更多的工作。
包括 GitHub、Bitbucket\[3\]、Stack
Overflow\[4\]、Reddit、Tumblr、Twitter\[5\]\[6\]和
Tuenti\[7\]在内的知名网站，及亚马逊网络服务系统都使用了HAProxy。
3.1 问题
准备4台Linux服务器，两台做Web服务器，1台安装HAProxy，1台做客户端，实现如下功能：
客户端访问HAProxy，HAProxy分发请求到后端Real Server
开启HAProxy监控页面，及时查看调度器状态
设置HAProxy为开机启动
3.2 方案
使用4台虚拟机，1台作为HAProxy调度器、2台作为Real
Server、1台作为客户端，拓扑结构如图-3所示，具体配置如表-3所示
![image003](media/image20.png){width="5.845138888888889in"
height="2.2583333333333333in"}
![table003](media/image21.png){width="5.948611111111111in"
height="1.5104166666666667in"}
3.3 步骤
实现此案例需要按照如下步骤进行。
注意事项：
将前面实验VIP、LVS等实验的内容清理干净！！！！！！
删除所有设备的VIP，清空所有LVS设置，关闭keepalived！！！
## 清理环境:
web1关闭多余的网卡与VIP，配置本地真实IP地址。
\[root@web1 \~\]# ifdown eth0
\[root@web1 \~\]# ifdown lo:0
\[root@web1 \~\]# nmcli connection modify eth1 ipv4.method manual \\
ipv4.addresses 192.168.2.100/24 connection.autoconnect yes
\[root@web1 \~\]# nmcli connection up eth1
Web2关闭多余的网卡与VIP，配置本地真实IP地址。
\[root@web2 \~\]# ifdown eth0
\[root@web2 \~\]# ifdown lo:0
\[root@web2 \~\]# nmcli connection modify eth1 ipv4.method manual \\
ipv4.addresses 192.168.2.200/24 connection.autoconnect yes
\[root@web2 \~\]# nmcli connection up eth1
proxy关闭keepalived服务，清理LVS规则。
\[root@proxy \~\]# systemctl stop keepalived
\[root@proxy \~\]# systemctl disable keepalived #禁止开机自启
\[root@proxy \~\]# ipvsadm -C #清除规则
\[root@proxy \~\]# nmcli connection modify eth0 ipv4.method manual \\
ipv4.addresses 192.168.4.5/24 connection.autoconnect yes
\[root@proxy \~\]# nmcli connection up eth0
\[root@proxy \~\]# nmcli connection modify eth1 ipv4.method manual \\
ipv4.addresses 192.168.2.5/24 connection.autoconnect yes
\[root@proxy \~\]# nmcli connection up eth1
## 步骤一：配置后端Web服务器
设置两台后端Web服务（如果已经配置完成，可用忽略此步骤）
\[root@web1 \~\]# yum -y install httpd
\[root@web1 \~\]# systemctl start httpd
\[root@web1 \~\]# echo \"192.168.2.100\" \> /var/www/html/index.html
\[root@web2 \~\]# yum -y install httpd
\[root@web2 \~\]# systemctl start httpd
\[root@web2 \~\]# echo \"192.168.2.200\" \> /var/www/html/index.html
## 步骤二：部署HAProxy服务器
### 1）配置网络，安装软件
\[root@haproxy \~\]# echo \'net.ipv4.ip_forward = 1\' \>\>
/etc/sysctl.conf //开启路由转发
\[root@haproxy \~\]# sysctl -p
\[root@haproxy \~\]# yum -y install haproxy
**配置文件参考(配置不对):**
global #软件全局设置
\# local2.\* /var/log/haproxy.log #日志路径
\#
log 127.0.0.1 local2 #日志默认在本机\[err warning info debug\]
chroot /var/lib/haproxy #默认工作目录不用修改
pidfile /var/run/haproxy.pid
#haproxy的pid存放路径,不用ps去查询,起了服务才有
maxconn 4000 #最大连接数，默认4000
user haproxy #软件启用用户
group haproxy #软件启用组
daemon #创建1个进程进入deamon模式运行
defaults #集群设置默认参数
mode http #默认的模式mode { tcp\|http\|health }
,tcp(四层调度),http(七层调度)
log global #采用全局定义的日志
option dontlognull #不记录健康检查的日志信息
option httpclose #每次请求完毕后主动关闭http通道
option httplog #日志类别http日志格式
option forwardfor #后端服务器可以从Http Header中获得客户端ip
option redispatch #serverid服务器挂掉后强制定向到其他健康服务器
timeout http-request 10s
timeout connect 10000 #如果backend没有指定，默认为10s
timeout client 300000 #客户端连接超时
timeout server 300000 #服务器连接超时
maxconn 60000 #最大连接数
retries 3 #3次连接失败就认为服务不可用，也可以通过后面设置
listen stats #开监控
bind 0.0.0.0:1080 #监听端口
stats refresh 30s #统计页面自动刷新时间
stats uri /stats #统计页面url
stats realm Haproxy Manager #统计页面密码框上提示文本
stats auth admin:admin #统计页面用户名和密码设置
#stats hide-version #隐藏统计页面上HAProxy的版本信息
listen websrv-rewrite 0.0.0.0:80
balance roundrobin #轮询算法
server web1 192.168.2.100:80 check inter 2000 rise 2 fall 5
#web1名字随便取
server web2 192.168.2.200:80 check inter 2000 rise 2 fall 5 #web2
名字随便取
#balance roundrobin 轮询算法 leastconn 最少连接算法
#rise 2 连续两次测试没问题,视为恢复Fall 5 连续五次连不上,视为坏
### 修改配置文件
\[root@haproxy \~\]# vim /etc/haproxy/haproxy.cfg
\-\-\--前面内容不做修改
#\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\# main frontend which proxys to the backends
#\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
####删除这个main
frontend以下所有的东西,那是以前老的配置方法,添加如下调度算法
listen webs :80