0.78
0.11
5.72
0.04
0.82
0.09
1.24
0.06
0.28
0.07
0.03
0.04
0.15
0.06
6.84
0.04
1.23
9.46
0.03
0.11
Table 3: Unsupervised Protocol Discovery: Matched cells using
Product Distributions between two halves of the Departmental
trace where HTTP (in bold) was removed only from the ﬁrst
trace, ranked by match distance (strongest match to weakest).
Protocol labels for cells were not available until after the match-
ing was performed. Each row summarizes information for each
pair of matching cells including their distance, their cumulative
and individual percentage of ﬂows in their respective halves,
and the protocol label for the cell. The italicized protocols were
also absent from the ﬁrst half, although by coincidence and not
by construction.
protocol models over the excluded trafﬁc using a promotion thresh-
old of 500 and a merge threshold of 250 (as in the previous section).
We then examined the clusters and manually identiﬁed several pro-
tocols unknown to Ethereal, including SLP (Service Location Pro-
tocol) Advertisements, game trafﬁc, an implementation of Kadem-
lia [13], HTTP over SSL, as well as various Web exploits. The
ﬂows using each of these protocols fell into separate clusters, once
again showing that (1) our methodology can identify ﬂows from
one unknown application as distinct from another, and (2) it is suf-
ﬁcient for the network administrator to identify an instance of each
protocol rather than all ﬂows using a protocol.
8. DISCUSSION
We have presented a systematic framework for unsupervised pro-
tocol inference—protocol inference based on partial correlations
which are derived from unlabeled training data using simple as-
sumptions about protocol behavior. In the remainder of this sec-
tion, we discuss our experience with this framework, what we have
learned in evaluating three different protocol inference algorithms,
and how we envision our approach would be applied in practice.
Framework. While from an engineering point of view, a net-
0
S
0
S
1
S
1
S
2
H
2
H
3
-
3
-
4
5
2 84 .
1 16
4
5
2 53 .
1 47
6
7
0 84 -
9 16 9 16 -
5 )Y 80 91 E9 DE ubianSSSSSH_4.9-1.0-8. 1D + EC ) 86 l AA
SH-Open 12 dY FA 6w 83 13 lL99-2 0A A3 14 05 CD FF .1 0A E8 D2 B3 16 C3 0.1 0A J 8D * 80 DenSH_3.0-Op1.1 ( A5 ‘ D7 ˆ
Offset (Responder to Initiator)
Figure 7: Five samples of a Markov process distribution of both directions of SSH. Sequences like “SH” and “SSSSSH” appear
because transitions S → S and S → H occur with roughly the same probability in the process.
work protocol is an intricate set of rules dictating the interaction
between two processes, to the network, a protocol is just a distri-
bution on byte sequences induced by real implementations and us-
age. It is on this ability to learn and distinguish these distributions
that our protocol inference system is built. Doing so requires not
only that protocol distributions differ measurably, but also that we
be able to represent these distributions compactly while remaining
completely oblivious to their design. This is the main challenge
of designing protocol models.
In our three models we have ex-
plicitly or implicitly relied on two techniques for overcoming this
challenge and reducing the size and complexity of session distribu-
tions.
The ﬁrst is to introduce independence assumptions into the model,
as in the Naive Bayes assumption. For example, rather than treating
the 64-byte distribution as a whole, we factor it into a product of
64 individual byte distributions—the product distribution model.
At the cost of discarding correlations between bytes, we achieve
an exponential reduction in space. Our product distribution model
shows that this technique is remarkably effective, suggesting that
the presence of certain attributes (rather than their correlation) is
sufﬁcient to distinguish protocols.
The second technique is to ignore infrequent features. In other
words, the model assumes that distinguishing features are also fre-
quent features. This plays a central role in the CSG model, which
preserves more correlation by focusing on common high-frequency
substrings.
Models. Our most successful model is product distribution. Be-
cause it is offset-based, we expected it to perform well on binary
protocols where protocol “anchors” (i.e., byte sequences with low
variance) occur at ﬁxed offsets. Indeed, it did quite well on pro-
tocols such as NTP, and, surprisingly, also textual protocols like
HTTP and SMTP. It turned out that these text protocols have a
small number of distinguishing initial sequences that induce well-
discriminating byte distributions. Figure 6 shows the individual
byte distributions for SSH.
Our Markov process model was expected to capture “ﬂoating”
strings — those not tied to a particular offset — as might appear in
text protocols such as HTTP and SMTP. Unfortunately, a ﬁrst-order
Markov process cannot capture such strings perfectly. Moreover,
it turned out that for many protocols we saw, the distinguishing
strings do occur at ﬁxed offsets (e.g., “GET ” for HTTP or “SSH”
for SSH). Figure 7 shows some samples of the Markov process
distribution of SSH.
CSGs offer the unique beneﬁt of providing protocol-intrinsic sub-
strings in their entirety and with precise information about the loca-
tion of their occurrence along with their frequencies. CSG’s main
strength, the focus on common substrings, is also its main weak-
ness: only substrings that were observed during training can later
be used for classiﬁcation. Binary protocols make the presence of
such strings less certain, though the fact that we used a minimum
string length of 4 bytes shows that this is not a fundamental hurdle.
Figure 8 shows a CSG model for the SSH protocol.
Applications. We envision two usage scenarios for partially-
correlated protocol inference. The ﬁrst, modeled by the classiﬁca-
tion experiment (Section 7.2), is one in which protocol models are
learned in a semi-supervised manner. Rather than labeling training
instances, as in the case of fully-supervising learning, only the con-
structed protocol models need to be labeled — a dramatic reduction
in complexity. Our results show that our approach is competitive
with existing supervising techniques (i.e., Haffner et al. [8]).
In the protocol discovery experiment, we explored an aspect of
partially-correlated protocol inference not possible using supervised
techniques, namely the discovery of new protocols.
In this sce-
nario, a new protocol would appear as a new cluster distinct from
SSH-2.0-
SSH-
-PuTTY
-OpenSSH_
-OpenSSH_3.
.1p1
-OpenSSH_3.6
SSH-2.0
-OpenSSH_3.8
.1p1x0a
-OpenSSH_4.3x0a
-OpenSSH_4.
.1p1+CAN-2004-0175x0a
-http://www.sshtools
.com J2
SSH [CLIENT]x0dx0a
SSH-1.
99-3.2.
 for Windowsx0a
 Shell
99-3.2.9
 SSH 
Secure
Figure 8: The CSG model for SSH, showing nodes with at least
50 paths. Redundant paths are aggregated into single arcs;
darker nodes carry more paths.
known protocols (whether labeled or not). This allows for rapid
discovery and description of new protocols. Our results show that
our approach is effective for this problem as well.
Putting these together, consider a scenario in which a large in-
crease in trafﬁc is caused by a new peer-to-peer ﬁle sharing applica-
tion and a new network worm outbreak. Using our approach, a net-
work administrator could automatically determine that 70 percent
of this otherwise “unknown” trafﬁc belonged to one protocol and
30 percent to another. Moreover, the generated classiﬁers would be
sufﬁcient to discriminate future trafﬁc using these protocols. Thus,
after examining a single instance of each protocol and determining
its associated application for labeling purposes, the administrator
would once again have a comprehensive description of the trafﬁc
carried on their network.
Future Work. Our work naturally leads to several future di-
rections of research. Perhaps most immediately, our models can be
further improved to be more accurate and space-efﬁcient. Although
performance was not our primary objective, both the product distri-
bution and Markov process models may be suitable for on-line pro-
cessing; we plan to explore the performance aspect in future work.
CSG’s higher complexity makes operating at line-speeds challeng-
ing. However, we believe the unique strengths of CSGs can be put
to use in related but less time-critical settings.
9. CONCLUSION
Identifying application-layer protocols has become an increas-
ingly manual and laborious task as the historical association be-
tween ports and protocols deteriorates. To address this problem,
we propose a generic architectural and mathematical framework for
unsupervised protocol inference. We present three classiﬁcation
techniques for capturing statistical and structural aspects of mes-
sages exchanged in a protocol: product distributions of byte offsets,
Markov models of byte transitions, and common substring graphs
of message strings. We compare the performance of these classi-
ﬁers using real-world trafﬁc traces from three networks in two use
settings, and demonstrate that the classiﬁers can successfully group
protocols without a priori knowledge. Thus, labeling a single pro-
tocol instance is sufﬁcient to classify all such trafﬁc. In effect, we
have substituted the painful process of manual ﬂow analysis and
classiﬁer construction with the far easier task of recognizing a pro-
tocol instance.
Acknowledgments. We would like to thank Vern Paxson for
his helpful input on substring-based trafﬁc analysis methods, Jim
Madden and David Visick for their help understanding the UCSD
network, Sameer Agarwal for insightful discussions on clustering,
Andrew Moore for access to the Cambridge trace, and both Michael
Vrable and Michelle Panik for feedback on earlier versions of this
paper. This work was supported by NSF grant CNS-0433668, Intel
Research Cambridge, and the UCSD Center for Networked Sys-
tems.
10. REFERENCES
[1] Ethereal: A network protocol analyzer.
http://www.ethereal.com.
[2] S. Baset and H. Schulzrinne. An Analysis of the Skype Peer-to-Peer
Internet Telephony Protocol. Technical report, Columbia University,
New York, NY, 2004.
[3] L. Bernaille, R. Teixeira, I. Akodkenou, A. Soule, and K. Salamatian.
Trafﬁc classiﬁcation on the ﬂy. ACM SIGCOMM Computer
Communication Review, 36(2):23–26, April 2006.
[4] K. Claffy, G. Miller, and K. Thompson. The nature of the best:
Recent measurements from an Internet backbone. In Proc. of INET
’98, jul, 1998.
[5] T. M. Cover and J. A. Thomas. Elements of Information Theory. John
Wiley & Sons, 1991.
[6] C. Dewes, A. Wichmann, and A. Feldmann. An Analysis of Internet
Chat Systems. In Proc. of the Second Internet Measurement
Workshop (IMW), Nov 2002.
[7] C. Fraleigh, S. Moon, B. Lyles, C. Cotton, M. Khan, D. Moll,
R. Rockell, T. Seely, and C. Diot. Packet-level Trafﬁc Measurements
from the Sprint IP Backbone. IEEE Network, 17(6):6–16, 2003.
[8] P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS: Automated
construction of application signatures. In Proceedings of the 2005
Workshop on Mining Network Data, pages 197–202, 2005.
[9] IANA. TCP and UDP port numbers.
http://www.iana.org/assignments/port-numbers.
[10] T. Karagiannis, A. Broido, N. Brownlee, K. Claffy, and M. Faloutsos.
Is P2P dying or just hiding? In IEEE Globecom 2004 - Global
Internet and Next Generation Networks, Dallas/Texas, USA, Nov,
2004. IEEE.
[11] T. Karagiannis, A. Broido, M. Faloutsos, and K. Claffy. Transport
Layer Identiﬁcation of P2P Trafﬁc. In Proc. of the Second Internet
Measurement Workshop (IMW), Nov 2002.
[12] T. Karagiannis, D. Papagiannaki, and M. Faloutsos. BLINC:
Multilevel trafﬁc classiﬁcation in the dark. In Proceedings of the
2005 Conference on Applications, Technologies, Architectures, and
Protocols for Computer Communications, pages 229–240, 2005.
[13] P. Maymounkov and D. Mazi`eres. Kademlia: A peer-to-peer
information system based on the xor metric. In Proceedings of the
First International Workshop on Peer-to-Peer Systems (IPTPS), 2002.
[14] A. Moore and D. Papagiannaki. Toward the Accurate Identiﬁcation
of Network Applications. In Proc. of the Passive and Active
Measurement Workshop, mar 2005.
[15] A. W. Moore and D. Zuev. Internet trafﬁc classiﬁcation using
bayesian analysis techniques. In Proceedings of the 2005 Conference
on Measurement and Modeling of Computer Systems, pages 50–60,
2005.
[16] T. Oliver, B. Schmidt, and D. Maskell. Hyper customized processors
for bio-sequence database scanning on fpgas. In FPGA ’05: Proc. of
the 2005 ACM/SIGDA 13th international symposium on
Field-programmable gate arrays, pages 229–237, New York, NY,
USA, 2005. ACM Press.
[17] V. Paxson. Bro: A System for Detecting Network Intruders in
Real-Time. Computer Networks (Amsterdam, Netherlands: 1999),
31(23-24):2435–2463, 1998.
[18] D. Plonka. FlowScan: A Network Trafﬁc Flow Reporting and
Visualization Tool. In Proc. of USENIX LISA, jul, 2000.
[19] A. Sanfeliu and K. Fu. A Distance Measure Between Attributed
Relational Graphs for Pattern Recognition. IEEE Transactions on
Systems, Man and Cybernetics, SMC-13(3):353–362, 1981.
[20] S. Sen, O. Spatscheck, and D. Want. Accurate, Scalable In-network
Identiﬁcation of P2P Trafﬁc Using Application Signatures. In Proc.
of the 13th International World Wide Web Conference, may 2004.
[21] T. F. Smith and M. S. Waterman. Identiﬁcation of Common
Molecular Subsequences. Journal of Molecular Biology, 147, 1981.
http://gel.ym.edu.tw/∼chc/AB papers/03.pdf.
[22] G. Voss, A. Schr¨oder, W. M¨uller-Wittig, and B. Schmidt. Using
Graphics Hardware to Accelerate Biological Sequence Analysis. In
Proc. of IEEE Tencon, Melbourne, Australia, 2005.
[23] S. Zander, T. Nguyen, and G. Armitage. Self-learning IP Trafﬁc
Classiﬁcation based on Statistical Flow Characteristics. In Proc. of
the 6th Passive and Active Network Measurement Workshop, March
2005.