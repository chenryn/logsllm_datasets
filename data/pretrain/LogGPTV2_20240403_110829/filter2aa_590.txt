D E F C O N   1 3
Windows vs FreeBSD vs Linux
Windows vs FreeBSD vs Linux
Or: Why Deploying Linux in your 
Environment is Suicide
D E F C O N   1 3
Don’t Believe Anything I Say
Don’t Believe Anything I Say
•
"Do not believe in anything simply because you have 
heard it. Do not believe in anything simply because it is 
spoken and rumored by many. Do not believe in 
anything simply because it is found written in your 
religious books. Do not believe in anything merely on 
the authority of your teachers and elders. Do not 
believe in traditions because they have been handed 
down for many generations. But after observation and 
analysis, when you find that anything agrees with 
reason and is conducive to the good and benefit of one 
and all, then accept it and live up to it.” - Buddha
•
Daytime - Security consultant
– “Beltway bandit” in Linthicum MD
•
Night - Founder of the Shmoo Group, Capital Area Wireless 
Network, periodic author
D E F C O N   1 3
For Your Safety and The Safety of 
Those Around You
For Your Safety and The Safety of 
Those Around You
Linux Zealots
Linux Zealots
Windows / BSD / 
Others
Windows / BSD / 
Others
• This talk may be not much more than 
flamebait
– You may be reminded of a /. Discussion
• This talk is meant to be interactive
D E F C O N   1 3
Lets Talk about Security
Lets Talk about Security
• For the feds, “Information Assurance”
• Tactical Coding Error vs Design Flaw
• Script kiddie vs Dedicated Attacker
• Host Hardening vs Long term operational 
security
D E F C O N   1 3
Long term Operational Security
Long term Operational Security
• Often overlooked aspect of “security”
– We are not an end in and of ourselves.
– Further, an IDS does not operational security 
make
• Any idiot can be trained to secure a host
– Look at all the security books on the shelf
– Running a long term secure enterprise is the 
tough thing
D E F C O N   1 3
Enter Rant Mode
Enter Rant Mode
D E F C O N   1 3
Potter’s Pyramid of IT Security 
Needs
Potter’s Pyramid of IT Security 
Needs
IDS
Patch Mgt
Op. Procedures
Firewalls
Auth / Auth
Software ACLs
Sec
Honeypots
Sophistication and Operational Cost
D E F C O N   1 3
Why Does the Development 
Method Matter?
Why Does the Development 
Method Matter?
• You can certainly do belly button contemplation to 
say why it does or does not matter
– Structured process is the only way to build a secure and 
scalable system 
Or
– Having many eyeballs and lack of clear direction means the 
best and most useful stuff is what will get integrated, not all 
the fluff.
– There is no right answer…
• Process driven code can suck horribly
• There are often not “many eyes” looking at security
Corp
View
OSS
View
D E F C O N   1 3
But really, is there a difference?
But really, is there a difference?
• Beyond what the zealots say, and what the 
media says… Is there a real difference?
• Assessing this difference is a real PIA with 
lots of red herrings
• Methods of determining difference
– Examine the development processes
– Examine the history of security in the architecture
• Vulnerability statistics?
– Examine the future directions of security
– Ideally get statistics from enterprises on how they 
spend their security budgets and why
• I’m not Burton or IDG… So I just asked friends…
D E F C O N   1 3
Let’s talk about Vulnerability 
Statistics
Let’s talk about Vulnerability 
Statistics
• Vulnerability stats are (generally) an artifact 
of tactical coding errors, not bigger problems
• “In the last year we cut the number of patches 
we released from 35 to 12”
– Well, if you’re rolling up many vuln fixes to one 
patch, it doesn’t count
– Further, the impact from the vulns may vary  as 
well
– Not just an MS problem… MDKSA-2004-037
• Whose code was the vuln in?
– Kernel?  Integrated Application?  Third Party?
D E F C O N   1 3
But We’re ahead of ourselves.  
First, Windows!
But We’re ahead of ourselves.  
First, Windows!
• Developed as a complete system
– And then some… Applications are tightly 
integrated with operating system.
– Obviously, MS works as one organization, and 
Office upgrades are aware of Windows upgrades 
and vice versa
Kernel
MS Created
Core Sys Utils
MS Created
Applications
MS Created
D E F C O N   1 3
Windows Release Methodologies
Windows Release Methodologies
• Publicized well in advance
– Much of it is marketing spam, but there is 
obviously a HUGE developer network that seeds 
new technology info well in advance of release
• MS has a habit of once they’ve dominated a 
market, they stop dealing with the market
– IE is a prime example
– This has a negative impact on security
• MS will only integrate as much security as the market 
demands. 
• The OSS world will continue to integrate security b/c it’s 
the right thing to do
D E F C O N   1 3
Windows Security Roadmap
Windows Security Roadmap
• Many long term security initiatives
• Internal code security programs
– Security is woven through their entire 
development process
– Tho with the recent announcement of Land II, they 
may not quite be there yet
• Security functionality roadmap
– Including a full MLS compliant OS by 09
• Definitely aware of Security Operations
D E F C O N   1 3
FreeBSD
FreeBSD
• FreeBSD is designed and developed as a 
complete end to end system
– Kernel to userland system utilities
• Structured development process
– Core team, and accountability for all parts of the 
core OS
• Beyond userland system utilities, thirdparty
software is packaged by the FBSD team
– Either in binary or source packaging (or both)
Kernel
FBSD 
Created
Core Sys Utils
FBSD Created
Applications
FBSD 
packaged
D E F C O N   1 3
FreeBSD Release Methodologies
FreeBSD Release Methodologies
• For Core system, there is a FreeBSD 
Release Engineering team.
• For Third party software, there is also a team 
dedicated to “produce a high quality package 
set suitable for official FreeBSD release 
media.”
• More info at http://www.freebsd.org/releng/
D E F C O N   1 3
FreeBSD Security Roadmap
FreeBSD Security Roadmap
• FreeBSD provides EOL info WELL in 
advance of EOL occurring to give operators 
a heads up.
• Many integrated security features
– Securelevels are a great feature
– Expanded ACL control, jails (!chroot)
• While not a Roadmap ala Microsoft, still a 
great start.
D E F C O N   1 3
Linux
Linux
• It’s Bazaar, right?
• Linus et al control the kernel
• Community creates the rest with some loose 
coordination
• Distros use Duct Tape as a “value add” to put 
everything together
– While they’re all “Linux” they’re basically different 
OS’s
– Aren’t they? 
Kernel
Linus 
Created
Core Sys Utils
Community 
Created / Distro 
Pkg
Applications
Community 
Created / Distro 
Pkg
D E F C O N   1 3
A Choice Slashdot Quote
A Choice Slashdot Quote
My point with this is that it's not the kernel that's making
GNU/Linux systems crawl on o
lder  hardwar e. It's  the  newer  ver sions
of GNOME and KDE. A s long as you
 aren't  running  GNOME or  KDE, 
older hardw
are  work s just  fine.  My servers  chug  along  just  fine , and
my 233 MHz
 laptop  with  64  MBs of  RAM running  Sawfish  als o 
suffices just fine to do v
irtually all  m y common
 tasks  (except 
running any Mozilla 
product  :- P ). 
So, certainly
, GNU/Linux  ma y need  more  developers  fro m third 
world nations, a
s you  put  it. Linux,  however , does  not.  
• First, why do I care about the bloat of the
graphical environment vs the bloat of the 
kernel?  It’s all part of the OS as far as I care
• Second, stop with this GNU/Linux vs Linux
argument..
D E F C O N   1 3
Linux Kernel Release 
Methodologies
Linux Kernel Release 
Methodologies
• Whenever they feel like it
– Whenever they feel like iterating the third digit
• Changes with each major release
– 2.0 was different than 2.2 than 2.4 than 2.6
• Not necessarily done in conjunction with 
distros
– Distros released at the same time will often use 
different kernels
• Frankly, it’s all at Linus’ and his deputy’s 
control
D E F C O N   1 3
Distro Release Methodologies
Distro Release Methodologies
• Even tho they’re all “Linux”, they’re like their own OS
– So there…
• Some are very slow evolutions and rely on uber
admins
– Debian is the ultimate example
• Others attempt to have structure and make things 
easier on the user
– The Old ReadHet, Ubuntu, etc…
• However, since they’re really only responsible for the 
packaging and glue code, they’re at the whim of the 
community for features, especially security
– A distro will not, for instance, write their own firewall code
D E F C O N   1 3
Linux Security Roadmap
Linux Security Roadmap
• Not much out there for “Linux”
– There’s barely a kernel roadmap…
• RedHat released a security roadmap 2 
years ago that basically amounted to 
“Integrate SELinux into RH distro”
– Really, that’s about all I found… Others have 
insight?
• Lots of add-on things (GRSec, etc…)
D E F C O N   1 3
Vulnerability Statistics Revisited
Vulnerability Statistics Revisited
• Very interesting study - “Role Comparison Report -
Web Server Role” by Ford, Thompson, and Casteran
– Decomposed the vulns in RH Linux ES 3 and Windows 2k3
– Focused largely on installation and ops as they relate to the 
vulns (we’re looking for the root cause)
• Scary statistics (just a sample from the report)…
Severity
MS Server 2k3
RHEL ES 3 (min)
High
33
48
Med
17
60
Days of Risk
High
1145
2124
Med
426
4003
D E F C O N   1 3
And now, Patching
And now, Patching
• Patching is a core Security function, and 
releasing patches should be a core vendor 
function
• MS used to release patches whenever it 
“made sense”
– Now they’ve gone to monthly roll-up patches
– Concerns about losing resolution (aka: making 
0day attacks a problem) have not materialized
– Certainly simplifies ongoing Ops
• Regression testing / QA can be scheduled in advance 
and patch deployment times are reduced
D E F C O N   1 3
Patching on the *NIXs
Patching on the *NIXs
• FreeBSD Kernel
– Patches direct from FBSD developers
• Linux Kernel
– Patches can be applied from kernel.org code
– Patches can be applied from distro code
– Which is right?
• Third party patches (network stack, KDE, etc)
– Patches direct from developer
– Patches from distro
– Core system utils in FBSD come from FBSD developers
– Again, which is right?
• *NIX patches easier to understand, easy to mass 
deploy
– More difficult to determine if it’s needed
D E F C O N   1 3
Before the Debian Users get out of 
hand
Before the Debian Users get out of 
hand
• From the Deb Project Lead Report:
Woody Security Update Challenges and Progress
---------------------------------------------
The ARM problems we've had have also affected the 
timeliness with which we've been able to get security 
updates out.  A security fix to``xfree86``, for example, 
has been stalled for weeks because no ARM build 
daemon has been operational to compile it.  (See 
`Debian bug #298939`_ for details.)
D E F C O N   1 3
Lets not Forget about SnR
Lets not Forget about SnR
• So, it’s not just about the architecture
• Security admins have to stay up to date
– I.e. We can justify why see surf the net all day
• The hell that is the Linux Distro security 
announcements
– We whine about the bad SnR on an IDS, why 
don’t we whine about the SnR on disclosure lists
Vuln 
Disc.
Patch
Rel.
Ubuntu 
Rel.
Mandrake 
Rel.
Red Hat 
Rel.
Debian 
Rel.
OpenLin
Rel.
FBSD 
Rel.
Bugtraq 
Mod.
Approves
.
BillyJoe 
Rel.
V u l n e r a b I l I t y   T i m e l i n e
D E F C O N   1 3
The Future
The Future
• Linux continues to survive by brute force and 
a worldwide network of zealots
– The Linux zealots make Apple users look tame
• MS will continue to push the bounds of 
security beyond what the stereotypical OSS 
operating system can do
– Especially from an operational security 
perspective
• The BSD’s will continue to be the leaders in 
the OSS movement wrt operational security
D E F C O N   1 3
Questions?  Answers?
Questions?  Answers?
• Contact Info
– PI:EMAIL
– PI:EMAIL
• Flames
– /dev/null
• This talk will be available from 
www.shmoo.com/~gdead soonish
• Check out “Mastering FreeBSD and OpenBSD 
Security” from O’Reilly