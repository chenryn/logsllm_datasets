tfIpIncomingPacket()函数是处理IP包的主要函数，该函数主要流程如下图所示：
![
](https://images.seebug.org/content/images/2020/07/3e4754ce-7eb7-472b-9784-4e937a0e0a6a.png-w331s)
tfIpIncomingPacket()首先判断数据包合法性。tfIpIncomingPacket()函数除了验证IP头校验和，它还进行以下验证，如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/7f40a6b3-e900-4410-830c-375b8d30a46b.png-w331s)
然后如果所有合法性检查都通过，tfIpIncomingPacket()函数将检查IP报头中TotalLength
是否严格小于数据包的pktuChainDataLength，这表示实际接收的数据比IP报头中声明的数据多。如果是真的，则进行修剪操作，要删除额外的数据，如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/9a7ce1f7-5979-4d1e-ad4b-37e4255f7241.png-w331s)
再者如果IP数据包的MF为1或者Fragment
Offset大于0，则tfIpIncomingPacket()函数就要调用tfIpReassemblePacket()函数进行分片重组。如果IP分片数据接收不完整，则tfIpReassemblePacket()函数返回NULL。如果所有IP分片都到达并且没有错误，则Treck协议栈使用pktuLinkNextPtr字段将这些分片链接在一起，建立链表，并将包传递到下一层进行进一步处理，如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/6a537352-c239-483c-a795-ea40e06b8203.png-w331s)
最后如果已经收到完整的IP数据包，则tfIpIncomingPacket()函数根据IP数据包中的协议字段的协议号，调用相应的协议包处理函数进行处理。在下列代码中，当协议号为UDP时，则调用tfUdpIncomingPacket()函数，当数据包协议为IP-in-IP协议（协议号4）时，会递归调用tfIpIncomingPacket()函数，代码实现如下所示：
![
](https://images.seebug.org/content/images/2020/07/58c03be1-b111-421e-b496-7d243763f93b.png-w331s)
### 六、漏洞原理分析
#### 1、CVE-2020-11896
前文已经介绍tfIpIncomingPacket()函数的实现过程，第二步的数据裁剪是漏洞的原因，如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/312e3ec4-9819-402a-8375-888eb3158a83.jpg-w331s)
pktuLinkDataLength保留当前分片的大小，pktuChainDataLength保留整个IP数据包的大小。如果执行上述操作，将导致一个不一致性的状态，其中pkt->pktuChainDataLength==pkt->pktuLinkDataLength，但可能有pkt->pktuLinkNextPtr指向其他分片。更进一步的其中链表上分片的总数据大小可能大于存储在pktuChainDataLength变量中的大小。这种操作导致的不一致性将会导致后续报文处理发生异常。
通过简单地设置错误的IP包分片是无法触发漏洞的，因为裁剪过后的分片数据在后续的tfIpReassemblePacket()函数操作中会根据pktuChainDataLength的大小，重新建立分片链表，不会造成不一致的状态。理想的流程是先完成分片链表的建立，再进行链表数据总大小的裁剪流程，这样就会进入不一致的状态。
为了在IP层处理分片数据包并触发执行有问题的流程代码，可以使用IP-in-IP数据包。对于分片的IP-in-IP数据包，tfIpIncomingPacket()函数将至少递归调用两次，一次用于IP隧道包的内层IP数据包，多次用于外层IP数据包（每处理一个外层IP包分片算作一次）。
tfIpIncomingPacket()函数在处理IP隧道数据包的时候将内部IP数据包作为非分片数据包进行处理。内部数据包现在由多个分片组成，但在IP报头中标记为非分片（MF=0），所以它不会再进入tfIpReassemblePacket()函数进行重组。它现在由一个链表中的几个单独的tsPacket链接组成，每个链接都有一个单独的pktuLinkDataLength值。考虑下面的例子，它将有助于理解漏洞的成因：
  * Inner IP packet: IPv4{len=32, proto=17}/UDP{checksum=0, len=12}，其中包括1000字节的数据’A’。
  * Outer IP packet (fragment 1): IPv4{frag offset=0, MF=1, proto=4, id=0xabcd} ,其中包括40字节的IP数据。
  * Outer IP packet (fragment 2): IPv4{frag offset=40, MF=0, proto=4, id=0xabcd} ，其中数据负荷为988字节。
为了绕过UDP校验，将校验和字段checksum设置为0。实例中的分片结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/004bf1d6-2f96-4704-b2a6-7e81ced85a93.png-w331s)
当Treck协议栈处理外部分片时，它使用tsUserPacket结构中的pktuLinkNextPtr字段来链接它们。如前所述，当tfIpIncomingPacket()函数处理内部IP数据包（协议为4，IP-in-IP）时，它已经完成了分片数据的重组（内部IP数据包由链接在一起的两个tsPacket结构表示）。分片数据重组后的链表结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/d926346b-9ee4-47ac-b887-75c80ad93f1c.png-w331s)
由于tfIpIncomingPacket()函数在进行有效性判断时，只考虑tsUserPacket中的pktuChainDataLength字段（而不是pktuLinkDataLength），所以在处理内部IP包时将进入错误的链表长度的裁剪流程，从而导致了问题。
内部IP包通过了IP头完整性检查，在该例子中，内部IP包的总长度(32）小于链表数据长度（1000+8+20=1028），因此Treck协议栈将尝试错误地修剪数据包，方法是将字段pktuLinkDataLength和pktuChainDataLength设置为相同的值ipTotalLength（在我们的示例中为32）。这导致内部IP数据包由链接在一起的两个tsPacket结构表示，但它们的数据总长度大于pktuChainDataLength字段（修剪后pktuChainDataLength字段不是1028字节，而是等于32）。经过数据长度裁剪后的链表结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/c08868eb-4e7b-4a7a-af79-520a0761cf12.jpg-w331s)
现在已经使得链表达到了不一致的状态，下面将介绍如何利用这种不一致的状态来导致内存破坏。
在Treck协议栈代码中至少有一个代码路径可以将分片数据复制到单个连续缓冲区中。具体的执行路径为：tfUdpIncomingPacket() ->
tfSocketIncomingPacket() ->
tfCopyPacket()。下面的代码是tfSocketIncomingPacket()函数处理UDP数据报的代码的一部分，如下代码所示：
这段代码中tfSocketIncomingPacket()函数调用tfGetSharedBuffer()申请内存，其大小基于pktuChainDataLength字段的值，然后通过tfCopyPacket()函数将数据包的不同分片逐个复制到新分配的内存空间中，发生溢出的代码如下所示：
![
](https://images.seebug.org/content/images/2020/07/9541d638-61c2-4080-8bb7-810e40bc1176.png-w331s)
由于两个分片中的pktuLinkDataLength之和为1000字节，后续的tfCopyPacket函数将会把1000字节的数据拷贝到这段内存中，这将导致堆溢出。
#### 2、CVE-2020-11898
正如前文描述如何触发CVE-2020-11896漏洞那样，Treck TCP/IP协议栈无法正确处理通过IP-in-IP隧道传入的IPv4分片。这也可能允许未经身份验证的攻击者从堆中泄漏内存。可以采用以下示例进行漏洞触发：
  * 内部IP数据包：IPv4 {ihl = 0xf，len = 100，proto = 0}，有效载荷为'\ x00' _40 +'\ x41'_ 100。
  * 外部IP数据包（分片1）：IPv4 {frag offset = 0，MF = 1，proto = 4，id = 0xabcd}，其中24个字节来自内部IP数据包有效负载。这意味着将复制20个字节的IP标头，外加4个空字节。
  * 外部IP数据包（分片2）：IPv4 {frag offset = 24，MF = 0，proto = 4，id = 0xabcd}，来自内部IP数据包的其余字节作为有效负载。
实例中的分片结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/bce6e63d-ccef-462b-a658-0e0915a6c307.png-w331s)
这里ihl为0xf，表示为最大IP选项，长度为60字节，数据包总长度total_length为100。当网络协议栈收到两个分片时，它将使用tfIpReassemblePacket()函数重新组装它们。分片数据重组后的链表结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/66f1a55a-c308-48e6-bba7-b5d9db0e82bd.png-w331s)
该tfIpReassemblePacket()函数使用tsUserPacket结构中的字段pktuLinkNextPtr链接两个分片。如果启用了IP-in-IP隧道传输，则内部IP数据包将随后由tfIpIncomingPacket()函数中处理，修剪后的pktuChainDataLength字段不是160，而是等于100。经过数据长度裁剪后的链表结构如下图所示：
![
](https://images.seebug.org/content/images/2020/07/80ead16f-0741-4117-a848-42a9bbddc1a2.png-w331s)
内部IP数据包通过IP标头完整性检查，因为仅考虑了tsUserPacket的pktuChainDataLength字段（而不考虑pktuLinkDataLength）。因为在标准IP头部（20个字节）之后有4个空字节，并且一个空字节代表IP选项的末尾，IP选项解析通过检查。由于内部IP数据包包含无效的IPv4协议编号（Protocol为0），进入default分支，然后直接进入TM_IP_LOCAL_FLAG分支。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/8e66a9e3-fd48-4ba6-bcab-020817c3640d.png-w331s)
因此网络协议栈将通过发送类型为3（目标不可达）和代码为2（协议不可达）的ICMP错误消息来拒绝该数据包。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/dac0d96b-cfd4-497d-802f-68d122cf33fa.png-w331s)
负责创建错误数据包的是tfIcmpErrPacket()函数。它分配一个新的数据包，初始化一些ICMP头部字段。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/8d32cc8c-25c8-4592-8a34-5ad673d7b88e.png-w331s)
最后从后续数据包（内部IP数据包）中复制一些数据。复制部分如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/9f2e5eb5-fe44-4b8b-91ba-49dff8b90164.png-w331s)
如代码所见，tfIcmpErrPacket()函数通过获取IP报头长度（以字节为单位加上8，在实际情况下为60 + 8 =
68）与pktuLinkDataLength字段（以及被裁剪为100）之间的最小值来计算要复制的字节数
。由于发送数据包的第一个分片的实际链路数据长度为24（而不是100），因此tfIcmpErrPacket()函数将从堆中复制68-24 =
44字节的额外数据。然后设置v12_icmpErrPacket中相关数据。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/cbb61962-8666-47ef-9d83-33d750f28295.png-w331s)
最后调用tfIpSendPacket()函数发送icmp_ErrPacket包到目标地址，这将导致44字节的信息泄露。
#### 3、CVE-2020-11910
CVE-2020-11910是越界读漏洞，该漏洞存在tfIcmpIncomingPacket函数中，该函数主要是处理ICMP包。tfIcmpIncomingPacket函数在处理设备收到类型为3，code为4的ICMP包的时候，代码并没有验证后续数据的长度，直接就访问了对应位置的数据，造成了越界读漏洞。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/fdf762b5-abf0-4a61-bc45-4b9e1b8d3746.png-w331s)
#### 4、CVE-2020-11911
CVE-2020-11911是未授权的敏感信息更新漏洞，该漏洞存在tfIcmpIncomingPacket函数中，该函数主要是处理ICMP包。tfIcmpIncomingPacket函数在处理设备收到类型为18（Address
mask reply）包的时候，代码并没有验证设备是否发送过类型17（Address mask
request）请求，就直接更新了设备的子网掩码。如下代码所示：
![
](https://images.seebug.org/content/images/2020/07/bf874c0c-504a-4384-b87e-97ff5ad20524.png-w331s)
### 七、CVE-2020-11898漏洞验证
远程攻击打印机，如下视频所示：
### 八、参考
1、  
2、  
3、  
4、  
5、  
6、  
7、JSOF_Ripple20_Technical_Whitepaper_June20.pdf
* * *