类型 响应首部
基本语法 Accept-Ranges: 1# range-unit | none
举例 Accept-Ranges: none
Accept-Ranges: bytes
Age
Age首部可以告诉接收端响应已产生了多长时间。对于原始服务器是在多久之前产
生的响应或是在多久之前向原始服务器再次验证响应而言，这是发送端所做的最好
的猜测。首部的值是发送端所做的猜测，以秒为单位递增。更多有关Age首部的内
容参见第7章。
类型 响应首部
510 注释 HTTP/1.1缓存必须在发送的每条响应中都包含一个Age首部。
基本语法 Age: delta-seconds
举例 Age: 60
Allow
Allow首部用于通知客户端可以对特定资源使用哪些HTTP方法。
类型 响应首部
注释 发送405 Method Not Allowed响应的HTTP/1.1服务器必须包含Allow
首部。3
基本语法 Allow: #Method
注2：比如，状态码416（参见3.4.4节）。
注3：更多有关状态码405的内容参见3.4节。
536 ｜ 附录C
举例 Allow: GET, HEAD
Authorization
Authorization首部是由客户端发送的，用来向服务器回应自己的身体验证信息。
客户端收到来自服务器的401 Authentication Required响应后，要在其请求中包含这
个首部。这个首部的值取决于所使用的认证方案。有关Authorization首部的详
细讨论参见第14章。
类型 请求首部
基本语法 Authorization: authentication-scheme #authentication-
param
举例 Authorization: Basic YnJpYW4tdG90dHk6T3ch
Cache-Control
Cache-Control首部用于传输对象的缓存信息。这个首部是HTTP/1.1引入的比较
复杂的首部之一。它的值是一个缓存指令，给出了与某个对象可缓存性有关的缓存
特有指令。
第7章简要介绍了缓存，还说明了与这个首部有关的特定细节。
类型 通用首部
举例 Cache-Control: no-cache 511
Client-ip
Client-ip首部是一些比较老的客户端和代理使用的扩展首部，用来传输运行客户
端程序的计算机IP地址。
类型 扩展请求首部
注释 实现者应该了解这个首部的值所提供的信息是不安全的。
基本语法 Client-ip: ip-address
举例 Client-ip: 209.1.33.49
Connection
Connection首部是个多少有点儿过载了的首部，它可能会把你搞晕。这个首部用
于扩展了keep-alive连接的HTTP/1.0客户端，keep-alive连接用于控制信息。4在
注4：更多有关keep-alive和持久连接的内容参见第4章。
HTTP首部参考 ｜ 537
HTTP/1.1中，能识别出大部分较老的语义，但这个首部被赋予了新的功能。
在HTTP/1.1中，Connection首部的值是一个标记列表，这些标记对应各种首部名
称。应用程序收到带有Connection首部的HTTP/1.1报文后，应该对列表进行解
析，并删除报文中所有在Connection首部列表中出现过的首部。它主要用于有代
理网络环境，这样服务器或其他代理就可以指定不应传递的逐跳首部了。
close是一个典型的标记值。这个标记意味着响应结束之后，连接会被关闭。不
支持持久连接的HTTP/1.1应用程序要在所有请求和响应中插入带有close标记的
Connection首部。
类型 通用首部
注释 虽然RFC 2616没有专门声明将keep-alive作为连接标记使用，有些
（包括那些将HTTP/1.1作为版本号发送的）浏览器还是会在发起请求时
使用它。
基本语法 Connection: 1# (connection-token)
512 举例 Connection: close
Content-Base
服务器可以通过Content-Base首部为响应主体部分中要解析的URL指定一个基
础URL。5Content-Base首部的值是一个绝对URL，可以用来解析在实体内找到
的相对URL。
类型 实体首部
注释 RFC 2616中没有定义这个首部。它是早期在RFC 2068中定义的，RFC
2068是一个较早的HTTP/1.1规范草案，已经从官方规范中删除了。
基本语法 Content-Base: absoluteURL
举例 Content-Base: http://www.joes-hardware.com/
Content-Encoding
Content-Encoding首部用于说明是否对某对象进行过编码。通过对内容进行编
码，服务器可以在发送响应之前将其进行压缩。Content-Encoding首部的值可以
告诉客户端，服务器对对象执行过哪种或哪些类型的编码。有了这个信息，客户端
就可以对报文进行解码了。
注5：更多有关基础URL的信息参见2.3节。
538 ｜ 附录C
有时服务器会对某个实体进行多种编码，在这种情况下，必须按照执行的顺序将编
码列出来。
类型 实体首部
基本语法 Content-Encoding: 1# content-coding
举例 Content-Encoding: gzip
Content-Encoding: compress, gzip
Content-Language
Content-Language首部用来告诉想要理解对象的客户端，应该理解哪种自然语
言。比如说，一篇用法语编写的文档就应该有一个表示法语的Content-Language
值。如果在响应中没有提供这个值，对象就是提供给所有用户的。首部值中有多种
语言就说明对象适用于使用所列各种语言的用户。
这里需要说明的是，这个首部的值可能只表示了此对象目标用户的自然语言，而不
是对象中包含的所有或者任意一种语言。而且，此首部并不局限于文本或书面数据
513
对象；图像、视频和其他媒体类型也可以用其目标用户的自然语言来标识。
类型 实体首部
基本语法 Content-Language: 1# language-tag
举例 Content-Language: en
Content-Language: en, fr
Content-Length
Content-Length首部说明实体主体部分的长度或尺寸。如果对HEAD HTTP请求
的响应报文中有这个首部，此首部的值就表示如果发送的的话，实体主体部分的长
度（实际上并不发送主体）。
类型 实体首部
基本语法 Content-Length: 1*DIGIT
举例 Content-Length: 2417
Content-Location
Content-Location首部包含在一个HTTP报文中，给出了与报文的实体部分相对
应的URL。对可能有多个URL的对象来说，响应报文中可以包含一个Content-
Location首部，说明用来产生响应的对象的URL。Content-Location可以与所
请求的URL不同。服务器通常会用它将客户端导向或重定向到一个新URL上去。
HTTP首部参考 ｜ 539
如果URL是相对的，就应该相对于Content-Base首部加以解释。如果没有提供
Content-Base首部，就应该使用请求中的URL。
类型 实体首部
基本语法 Content-Location: (absoluteURL | relativeURL)
举例 Content-Location: http://www.joes-hardware.com/index.html
Content-MD5
Content-MD5首部是服务器用来对报文主体进行报文完整性检查的。只有原始服务
514
器或发起请求的客户端可以在报文中插入Content-MD5首部。首部值是（可能需
要编码的）报文主体的MD5摘要。6
通过这个首部的值可以端到端地检查数据，在检查传输过程中是否对数据进行了无
意的修改时非常有用。不应该将其用于安全目的。
RFC 1864更详细地定义了这个首部。
类型 实体首部
注释 根据RFC 1864的定义，MD5摘要值是一个Base-64（参见附录E）或
128位的MD5摘要。
基本语法 Content-MD5: md5-digest
举例 Content-MD5: Q2h1Y2sgSW51ZwDIAXR5IQ==
Content-Range
请求传输某范围内的文档时，产生的结果由Content-Range首部给出。它提供了
请求实体所在的原始实体内的位置（范围），还给出了整个实体的长度。
如果值为“*”，而不是整个实体的长度，就意味着发送响应时，长度未知。
更多有关Content-Range的内容请参见第15章。
类型 实体首部
注释 以206 Partial Content响应码进行响应的服务器，不能包含将“*”作为
长度使用的Content-Range首部。
举例 Content-Range: bytes 500-999 / 5400
注6：MD5摘要是在RFC 1864中定义的。
540 ｜ 附录C
Content-Type
Content-Type首部说明了报文中对象的媒体类型。
类型 实体首部
基本语法 Content-Type: media-type
举例 Content-Type: text/html; charset=iso-latin-1 515
Cookie
Cookie首部是用于客户端识别和跟踪的扩展首部。第11章详细讨论了Cookie首
部及其用法（还请参见Set-Cookie）。
类型 扩展请求首部
举例 Cookie: ink=IUOK164y59BC708378908CFF89OE5573998A115
Cookie2
Cookie2首部是用于客户端识别和跟踪的扩展首部。Cookie2用于识别请求发起者
能够理解哪种类型的Cookie。在RFC 2965中对其进行了更加详细的定义。
第11章详细地讨论了Cookie2首部及其用法。
类型 扩展请求首部
举例 Cookie2: $version="1"
Date
Date首部给出了报文创建的日期和时间。服务器响应中要包含这个首部，因为缓存
在评估响应的新鲜度时，要用到这个服务器认定的报文创建时间和日期。对客户端
来说，这个首部是可选的，但包含这个首部会更好。
类型 通用首部
基本语法 Date: HTTP-date
举例 Date: Tue, 3 Oct 1997 02:15:31 GMT
HTTP有几种特定的日期格式。这种格式是在RFC 822中定义的，这是
HTTP/1.1报文的优选格式。但在早期的HTTP规范中，没有明确说明
日期的格式，因此服务器和客户端的实现者使用了一些其他格式，为了
解决这些遗留问题仍然需要支持这些格式。你可能会碰到RFC 850中
说明的那些日期格式， asctime()系统调用产生的日期格式。下面是用
这些格式所表示的上述日期：
HTTP首部参考 ｜ 541
Date: Tuesday, 03-Oct-97 02:15:31 GMT RFC 850 format
Date: Tue Oct 3 02:15:31 1997 asctime( ) format
大家都不喜欢asctime()格式，因为它表示的是本地时间，而且没有说明时区
（比如，GMT）。总的来说，日期首部应该是GMT时间；但健壮的应用程序在处理
516 日期时，应该能够处理那些没有指定时区，或者包含了非GMT时间的Date值。
ETag
ETag首部为报文中包含的实体提供了实体标记。实体标记实际上就是一种标识资源
的方式。
第15章曾探讨过实体标记及其与资源之间的关系。
类型 实体首部
基本语法 ETag: entity-tag
举例 ETag: "11e92a-457b-31345aa"
ETag: W/"11e92a-457b-3134b5aa"
Expect
客户端通过Expect首部告知服务器它们需求某种行为。现在此首部与响应码100
Continue紧密相关（参见3.4.1节）。
如果服务器无法理解Expect首部的值，就应该以状态码417 Expectation Failed进
行响应。
类型 请求首部
基本语法 Expect: 1# ("100-continue" | expectation-extension)
举例 Expect: 100-continue
Expires
Expires首部给出了响应失效的日期和时间。这样，像浏览器这样的客户端就可以
缓存一份副本，在这个时间到期之前，不用去询问服务器它是否有效了。
第7章曾讨论过Expires首部的用法——尤其是，它是如何与缓存关联，怎样与原
始服务器进行响应再验证的。
类型 实体首部
基本语法 Expires: HTTP-date
举例 Expires: Thu, 03 Oct 1997 17:15:00 GMT
542 ｜ 附录C
From
From首部说明请求来自何方。其格式就是（RFC 1123规定的）客户端用户的有效