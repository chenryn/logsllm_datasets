test cases (45%) ﬁnish after a single instruction
only and, almost all test cases (>94%), either
diverge or cause an exception on QEMU after
executing the 5 instructions in our test programs.
Overall, our system analyzed over 1.06M CPU instructions. Table 1 presents an
overall view of the results by Proteus showing a comparison between QEMU
and Fast Models in terms of the exception behavior (Table 1a) as well as extent
of divergences per group (Table 1b).
Fig. 4. #Instructions before
divergence or exception.
Table 1. Proteus divergence statistics for 500K test cases containing 2.5M random
ARM instructions. Remaining instances of 500K programs (not shown in Table 1a)
are (1) 83,125 (17%) cases due to Unpredictable instructions, (2) 27,048 (5.4%) non-
divergent cases where programs ﬁnish successfully on both platforms and (3) 1216 cases
that diﬀer due to memory values. Note that we do not treat these 3 cases as divergent
(see Sect. 4.2).
Table 1a presents a summary of the cases where either QEMU terminates
the program or the CPU mode changes in Fast Models. Overall, we observe two
types of signals in QEMU (i.e., SIGILL, SIGSEGV) and CPU mode in Fast Models
cover und, abt, svc and usr modes. None represents the cases where QEMU
does not generate an exception. Most instances correspond to illegal instruction
() and valid memory access () cases in which
the behavior in QEMU complies with Fast Models (i.e., not divergent). A large
number of instances are Supervisor Call (svc) instructions which cover a large
encoding space in ARM ISA. svc instructions are used to request OS services and
are not a major point of interest for our work as we focus on the discrepancies
that are observable in the user space. In Table 1a, such non-divergent cases are
highlighted in gray. The remaining instances in Table 1a, along with the non-
exception related diﬀerences (i.e., memory operand and register) are grouped
into the divergence types as per the methodology described in Sect. 4.2.
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
15
Table 1b provides the number of instances per each divergence type. The
largest number of divergences (i.e., 2.6% of 500K test programs) belong to
 group which hints that QEMU does not correctly sanitize the
invalid memory references that cause data/prefetch aborts in CPU. Proteus
also ﬁnds a large number of instructions that are recognized as architecturally
Undefined only by the Fast Models (i.e.,  group). These point
to cases where QEMU does not properly validate the encoding before treating
the instruction as architecturally valid. We also ﬁnd a large number of instruc-
tions which are detected as illegal only by QEMU, executing without raising
an illegal instruction exception on the Fast Model (i.e.,  group).
Proteus also ﬁnds a smaller number of cases (i.e., 0.05%) with divergent reg-
ister update or memory operation which correspond to register_divergence
and mem_op_difference groups in Table 1b, respectively. These examples hint
at cases where the implementation of a valid instruction contains potential errors
in QEMU, causing a diﬀerent register or memory state than on a real CPU. Over-
all, despite the signiﬁcant testing of QEMU, we observe that there are still many
divergences where QEMU does not implement the ARM ISA faithfully.
5.2 Root Cause Analysis
While the Proteus system can identify large numbers of discrepancies between
real and emulated ARM CPU, it does not pinpoint the root causes in QEMU that
lead to a diﬀerent behavior than ground truth (i.e., Fast Model behavior). This
section presents our ﬁndings from an analysis of root causes of divergent behavior
in QEMU. This analysis gives us, compared to large number of divergences
identiﬁed, a smaller set of unique errors in QEMU that lead to divergence on
a wide set of programs (Table 1b). Analyzing the root causes also allows us to
pinpoint implementation ﬂaws and devise ﬁxes (Sect. 5.4).
In our analysis, for a divergence group, we ﬁrst identify common occurrences
in the bit ﬁelds [27:20] of a divergent 32-bit instruction encoding. In the ARM
architecture, these bits contain opcodes that are checked while decoding the
instruction on QEMU and real CPU. We identify the instructions with the most
commonly occuring opcodes to (1) consult the ISA speciﬁcation to check how
these instruction should be decoded and (2) check how QEMU processes these
instruction. We determine the root cause of the discrepancy by manually ana-
lyzing QEMU’s control ﬂow while executing a sample of these instructions. Once
we examine the source of discrepancy (e.g., a missing check, an unimplemented
feature of QEMU), we remove all possible encodings that stem from the same
root cause from our statistics to ﬁnd other unique instances of errors in QEMU.
Through this iterative procedure, we identiﬁed several important classes of
ﬂaws in QEMU that result in a diﬀerent instruction-level behavior than a real
CPU. We discuss some of our ﬁndings in the following paragraphs.
Incomplete Sanitization for Undefined Instructions: We discover that
QEMU does not correctly generate illegal instruction exception for a set of
Undefined instruction encodings. These cases are identiﬁed from the  group provided by Proteus. Thus, a malware can achieve evasion
simply by executing one of these instructions and ceasing malicious activity if
no illegal instruction exception is generated.
We ﬁnd that this particular group of divergences arises as QEMU relaxes the
number of checks performed on the encoding while decoding the instructions.
For instance, the ARM ISA deﬁnes a set of opcodes for which the synchroniza-
tion instructions (e.g., SWP, LDREX) are Undefined, and thus should generate
an illegal instruction exception. However, QEMU does not check against these
invalid opcodes while decoding the synchronization instructions, causing a set of
Undefined encodings to be treated as a valid SWP instruction. In fact, we iden-
tiﬁed 715 divergent test cases which are caused by this missing invalid opcode
check for the SWP instruction. In Table 2, we provide the encoding and the con-
ditions that cause divergent behavior for this SWP instruction example as well as
other similar errors in QEMU that we have identiﬁed.
During our root cause analysis, we ﬁnd that a large portion of the instances in
 group (87%) are due to instructions accessing the co-processors
with ids 1 and 2. These co-processors correspond to FPA11 ﬂoating-point proces-
sor that existed in earlier variants of the ARM architecture while newer architec-
tures (>ARMv5) use co-processor 10 for ﬂoating point (VFP) and 11 for vector
processing (SIMD). While accesses to co-processors 1 and 2 are Undefined on a
real CPU, QEMU still supports emulation of these co-processors [8]. Thus, these
instructions generate an illegal instruction exception only on the real CPU.
Misaligned Memory Access Checks: As hinted by Proteus with the large
number of instances in the  group in Table 1b, we identify that
QEMU does not enforce memory alignment requirements (e.g., alignment at
word boundaries) for the ARM instructions that do not support misaligned
memory accesses. The data aborts caused by such misaligned accesses would
take the CPU into abt mode and the program is expected to be signalled with
SIGBUS to notify that the memory subsystem cannot handle the request. Due
to missing alignment checks in QEMU, a malware can easily ﬁngerprint emula-
tion by generating a memory reference with a misaligned address and observing
whether the operation succeeds (i.e., in QEMU) or fails (i.e., on a real system).
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
17
The ARMv7 implementations can support misaligned accesses for the load-
/store instructions that access a single word (e.g., LDR, STR), a half-word (e.g.,
LDRH, STRH) or only a byte of data (e.g., LDRB, STRB). However, other instructions
that perform multiple loads/stores (e.g., LDM, STM) or memory-register swaps for
synchronization (e.g., SWP, LDREX, STREX) require proper alignment of the data
being referenced. The alignment requirement can be word, half-word or double-
word depending on the size of data being accessed by the instruction.
We demonstrate in Sect. 5.3 how the divergence due to missing alignment
enforcements in QEMU can enable evasion in a real-world scenario.
Updates to Execution State Bits: By analyzing the divergent instructions
reported by Proteus within the register_divergence group, we identiﬁed
another important root cause in QEMU due to masking out of the execution state
bits during a status register update. Speciﬁcally, we analyzed the cases where
execution state bits within CPSR diﬀer after an MSR (move to special registers)
instruction. Execution state bits in CPSR determine the current instruction set
(e.g., ARM, Thumb, Jazelle) and the endianness for loads and stores. While
MSR system instructions allow to update CPSR, writes to execution state bits
are not allowed with the only exception being the endianness bit (CPSR.E). The
ARM ISA speciﬁes that “CPSR.E bit is writable from any mode using an MSR
instruction” [4]. However, since updates on the CPSR.E bit by an MSR instruction
are ignored in current QEMU, software can easily ﬁngerprint the emulation by
simply trying to ﬂip this bit (e.g., using MSR CPSR_x, 0x200 instruction) and
checking whether the endianness has been succesfully changed.
Observations from Other Statistics: Our initial investigations on  and mem_op_divergence groups did not reveal any further root causes
as above. We ﬁnd that the majority of the divergent cases in mem_op_divergence
group (>97%) are due to VFP/SIMD instructions eﬀecting the extension reg-
isters. Our current work focuses on the user-mode general purpose registers
only. During analysis on  group, we identiﬁed divergences due
to Unpredictable instructions. This issue is due to the incomplete SML model
[15] which misses some Unpredictable instructions in our test cases (Fig. 2). For
instance, we ﬁnd that 761 divergence cases in  group are due to
Unpredictable encodings of a PLD (i.e., preload data) instruction, which behave
as a NOP in Fast Model but generate an illegal instruction exception in QEMU.
5.3 Demonstration with Real Smartphones and the SDK Emulator
In this section, we address our second research question on evaluating the eﬀec-
tiveness of the divergences found by Proteus for real-world emulation detection.
To tackle this objective, we evaluate the divergences described in Sect. 5.2 on a
physical mobile platform and Android emulator. We use Nexus 5 (ARMv7) and
Nexus 6P (ARMv8) smartphones as our real hardware test-beds and use the
full-system emulator from the Android SDK. We choose the SDK emulator as it
has been a popular base for Android dynamic analysis frameworks [23,28,30].
18
O. Sahin et al.
Evaluating Unsanitized Undefined Encodings: We use the detection bina-
ries generated by Proteus to evaluate the Undefined instructions that are
incompletely sanitized in QEMU (i.e.,  group). These cases are
expected to generate an illegal instruction exception only on a real CPU.
We ﬁnd that the SDK’s copy of QEMU does not incorporate the FPA11
ﬂoating point co-processor emulation which is supported in our version of QEMU
and accessed by the instructions that use co-processors 1 and 2. Thus, these
instructions are Undefined in SDK emulator as well and we cannot successfully
distinguish the emulator from the real hardware. As discussed in Sect. 5.1, FPA11
instructions account for 87% of the cases in  group. However,
we can successfully ﬁngerprint the SDK emulator using all the other divergent
Undefined instructions. Speciﬁcally, all the encodings described in Table 2 can
deterministically distinguish between SDK emulator and Nexus 5. The detector
programs (Sect. 4.2) simply register a set of signal handlers and detect the SDK
emulator if the program does not receive SIGILL upon executing the divergent
Undefined instruction.
1 /* Put some known data into memory */
2 int * ptr = calloc (1 , sizeof ( int ));
3 ptr [0] = 0 x12345678 ;
4 asm (" mov r8 ,%0 " : : "r"( ptr ));
5
6 /* Read ptr [0] with CPSR .E set to 1 */
7 asm (" msr CPSR_x , #0 x200 \n\t");
8 asm (" ldr r4 ,[ r8 ]\ n\t");
9 asm (" msr CPSR_x , #0 x000 \n\t");
10
11 asm (" mov %0 , r4 " : "=r"( val ) : : );
12 printf ("0x %08 X\n" , val );
13 /* Put some known data into memory */
14 int * ptr = calloc (1 , sizeof ( int ));
15 ptr [0] = 0 x12345678 ;
16
17 // Shift address to a non - word boundary
18 ptr = ( int *) (( char *) ptr + 0 x1 );
19
20 // Try to read from misaligned address
21 asm (" mov r3 ,%0 " : : "r"( ptr ));
22 asm (" LDM r3 ,{%0} ": "=r"( val ) : : );
23
24 printf ("0x %08 X\n" , val );
Listing 1.2. PoC for emulator de-
tection by ﬂipping endianness bit.
Listing 1.3. PoC for emulator de-
tection by misaligned memory read.
Evaluating Missing Alignment Checks and Endianness Support: We
also show that we can successfully detect the SDK emulator by leveraging the
ignored endianness bit updates as well as the missing memory address align-
ment checks. Listing 1.2 provides a proof-of-concept (PoC) code sample that
ﬁngerprints emulation by ﬂipping the endianness bit in the CPU (i.e., CPSR.E)
and performing a load operation on a known data value to determine whether
the endianness has been changed. Executing this code snippet on a real hard-
ware (i.e., Nexus 5 in our case) reads the array value as 0x78563412 instead of
0x12345678 as the CPSR.E bit is set to switch from little-endian to big-endian
operation for data accesses. However, since the CPSR.E bit update is ignored in
QEMU, the LDR instruction reads the array element into R4 as 0x12345678 on
the SDK emulator. Thus, a malware can easily ﬁngerprint emulation by sim-
ply checking the value of target register (i.e., R4 in this example). Similarly,
Listing 1.3 illustrates how the missing alignments checks in QEMU can be lever-
aged to ﬁngerprint emulation. We shift the word-aligned ptr pointer by one
byte to create a misaligned reference address. Reading from this misaligned
pointer with an LDM (i.e., load multiple) instruction causes a bus error (program
receives SIGBUS) on a real hardware while it succesfully reads the high-order part
(0x123456) of the target address on the SDK emulator. Thus, a malware can
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
19
simply determine emulation depending on whether a SIGBUS signal is received
(i.e., on a real system) upon intentionally causing a misaligned memory access.
Evaluation on a ARMv8 CPU: The 64-bit ARMv8 architecture, which is
used in recent smartphones, is compatible with ARMv7. Thus, the CPU semantic
attacks we demonstrate in this work also apply to devices powered with ARMv8
CPUs (e.g., Nexus 6P). We evaluated PoC detectors for each root cause we
discovered (i.e., Table 2, Listings 1.2 and 1.3) on a Nexus 6P smartphone and
successfully distinguished this device from the SDK emulator as well.