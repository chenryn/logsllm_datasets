type
Person = object
name: string
age: int
Analyzing this code to retrieve information about the Person type isn’t easy in a lan-
guage without metaprogramming. For instance, in Java, you could do it via reflection
at runtime. In other languages, you could attempt to treat the type definition as a
string and parse it, but doing so would be very error prone. In Nim, there are facilities
that allow you to analyze type definitions at compile time.
 You may, for example, wish to iterate over each of the fields in a specified type:
import macros
type
Person = object
name: string
age: int
static:
for sym in getType(Person)[2]:
echo(sym.symbol)
Compiling the preceding code will display the strings name and age among the com-
piler’s output.
 That’s just one example of what metaprogramming allows you to accomplish. You
might use this to serialize any data type, without having to write code specific to each
data type, whether defined by you or someone else. You’ll find that through this and
many other features, metaprogramming opens up a vast number of possibilities.
 Here are some other use cases for metaprogramming:
 Advanced control flow mechanisms, such as async procedures
 Lazy evaluation, used in the logging module to ensure that parameters are only
evaluated if logging is enabled
 Lexer and parser generation
Metaprogramming adds a lot of flexibility to Nim, and because it’s executed at com-
pile time, it does so without causing any decrease in your program’s execution time.
 In this chapter, you’ll learn about the three metaprogramming constructs, starting
with generics, moving on to templates, and finishing up with macros. At the end of the
chapter, you’ll see how you can write a simple DSL for configuration files. DSLs are lan-
guages that are specialized to a particular application domain; they’ll be discussed in
more detail in section 9.4.
9.1
Generics
As you already know, Nim is a statically typed programming language. This means that
each piece of data in Nim has a type associated with it. In some cases, these types are
distinct but very similar. For example, the int and float types both represent num-
bers, but the former can’t represent a fraction, whereas the latter can.
Licensed to   
251
Generics
 Generics are a feature that allows you to write your applications in a style called
generic programming, in which you write algorithms in terms of types that aren’t known
until the algorithms are invoked. Generic programming is useful because it offers a
reduction in code duplication.
 Generics are related to the two other metaprogramming components in Nim—
templates and macros—because they offer a way to generate repetitive code. This sec-
tion covers generics in procedures and types, showing how to best utilize them in
those contexts. It also briefly shows how generics can be constrained to make the defi-
nitions of algorithms more accurate.
 Some languages refer to generics as parametric polymorphism or as templates. Many
prominent statically typed programming languages include support for generics,
including Java, C#, C++, Objective C, and Swift. There are also a few that consciously
omit the feature; the Go programming language is infamous for doing so.
9.1.1
Generic procedures
To give you a better idea of how generics in Nim work, take a look at the following
implementation of a generic myMax procedure:
proc myMax[T](a, b: T): T =
if a 
252
CHAPTER 9
Metaprogramming
9.1.2
Generics in type definitions
When writing Nim code, you may run into cases where you’d like to specify the types
of one or more fields in an object during initialization. That way, you can have a single
generic type definition, and you can specialize it by specifying a particular type on a
case-by-case basis.
 This is useful for container types, such as lists and hash maps. A simple single-item
generic container can be defined as follows:
type
Container[T] = object
empty: bool
value: T
This code defines a Container type that accepts a generic type T. The type of the
value that the Container type stores is then determined by the generic type T speci-
fied when a Container variable is defined.
 A constructor for the Container type can be defined like this:
proc initContainer[T](): Container[T] =
result.empty = true
You can then call this constructor as follows:
var myBox = initContainer[string]()
Specifying the generic type in between the square brackets is currently mandatory.
This means that the following code will not work:
var myBox = initContainer()
Compiling this code will result in an “Error: cannot instantiate: 'T'” message. As men-
tioned previously, the compiler can’t always infer the generic type, and this is one case
where it can’t. 
9.1.3
Constraining generics
Occasionally, you may wish to limit the types accepted by a generic procedure or type
definition. This is useful for making the definition stronger and therefore more clear
to yourself and other users of your code. Consider the myMax procedure defined previ-
ously and what happens when it’s called with two strings:1
proc myMax[T](a, b: T): T =
if a 
253
Generics
If you save this code, compile, and run it, you’ll see the string World displayed.
 Let’s assume that you don’t want your algorithm to be used with a pair of strings,
but only with integers and floats. You can constrain the myMax procedure’s generic
type like so:
proc myMax[T: int | float](a, b: T): T =
if a  0
Many are already defined for you in the system module. There are also a number of
built-in type classes that match whole groups of types. You can find a list of them in the
Nim Manual: http://nim-lang.org/docs/manual.html#generics-type-classes. 
9.1.4
Concepts
Concepts, sometimes known as user-defined type classes in other programming languages,
are a construct that can be used to specify arbitrary requirements that a matched type
must satisfy. They’re useful for defining a kind of interface for procedures, but they’re
still an experimental Nim feature. This section will give you a quick overview of con-
cepts without going into too much detail, because their semantics may still change.
 The myMax procedure defined earlier includes a constraint that limits it to accept-
ing only int and float types as parameters. For the purposes of the myMax procedure,
though, it makes more sense to accept any type that has the 
254
CHAPTER 9
Metaprogramming
proc myMax(a, b: Comparable): Comparable =
if a 
255
Templates
 In general, templates offer a simple way to reduce code duplication. Some fea-
tures, like their ability to inject variables into the calling scope, are easiest to achieve
in Nim by defining a template.
 Templates are invoked in the same way as procedures. When the Nim compiler
compiles your source code, any template invocations are substituted with the contents
of the template. As an example, take a look at the following template from the stan-
dard library:
template `!=` (a, b: untyped) =
not (a == b)
It would be possible to define the != operator as a procedure, but that would require a
separate implementation for each type. You could use generics to get around this, but
doing so would result in a lot more call overhead.
 This template definition of != means that this line
doAssert(5 != 4)
gets rewritten as follows:
doAssert(not (5 == 4))
This is done during compilation, as shown in figure 9.1.
 The primary purpose of templates is to offer a simple substitution mechanism that
reduces the need for code duplication. In addition, templates offer one feature that
procedures don’t: a template can accept blocks of code.
Don’t worry about the 
“untyped” type right now. 
It will be explained later.
$ nim c file 
doAssert(5 != 4) 
Templates are
expanded 
Template expansion 
doAssert(not (5 == 4)) 
Compilation successful! 
File is loaded
and parsed 
After
expansion  
Before
expansion  
Figure 9.1
Templates are 
expanded during the compilation 
of Nim source code
Licensed to   
256
CHAPTER 9
Metaprogramming
9.2.1
Passing a code block to a template
Code blocks are composed of one or more statements, and in an ordinary procedure
call, passing multiple statements into the procedure can only be done using an anony-
mous procedure. With templates, you can pass a code block much more directly. Nim
supports a special syntax for templates that allows one or more code statements to be
passed to them.
 The following code shows a template definition that accepts a code block as one of
its parameters:
import os
template repeat(statements: untyped) =
while true:
statements
repeat:
echo("Hello Templates!")
sleep(1000)
CODE BLOCKS IN MACROS
Macros, which you’ll learn about in the next sec-
tion, also support code blocks as parameters.
The statements identifier in the body of the template is replaced with whatever code
block is passed into the template. After the compiler expands the template, the
remaining code looks like this:
import os
while true:
echo("Hello Templates!")
sleep(1000)
Figure 9.2 shows the code that’s generated by the repeat template, which accepts a
code block as an argument. This shows some of the amazing substitution capabilities
of templates.
 Of course, template parameters don’t always have to accept a code block. The next
section describes how template parameters are substituted into the body of a template
and how the parameter’s type affects this.
MULTIPLE CODE BLOCKS
There are also ways to pass multiple code blocks to a
template or macro via do notation, but this is beyond the scope of this chap-
ter. See the Nim manual’s discussion of do notation for more information:
http://nim-lang.org/docs/manual.html#procedures-do-notation.
Needed for the 
sleep procedure.
The template accepts a 
statements parameter that 
corresponds to the code block.
The code block is substituted into here.
Templates that accept code blocks are used like this.
Licensed to   
257
Templates
It’s important to know how code blocks and other parameters interact. The rule is
that when a code block is passed into a template, the last parameter always contains it.
Here’s an example:
import os
template repeat(count: int, statements: untyped) =
for i in 0 .. 
258
CHAPTER 9
Metaprogramming
When the declareVar template is called, it expands into a simple variable declaration.
The name and value of the variable is specified in the template using two arguments
that differ in type, the first being untyped and the second typed. Figure 9.3 shows how
the declareVar template produces code that defines a new variable.
 The difference between the untyped and typed argument types is simple:
 Untyped—An untyped template argument allows identifiers that haven’t been
declared yet to be specified. The reason this type is named untyped is because
undeclared identifiers have no type yet. The foo identifier in the preceding
example isn’t declared anywhere and is thus untyped.
 Typed—A typed template argument allows an identifier that has been declared,
or a value that has a type, to be specified. In the preceding example, the value
42 has the type int. The typed type allows any type to be specified, but tem-
plates also allow you to specify concrete types like int, float, and string.
To see the difference in more detail, take a look at the following declareVar calls:
var myInt = 42
declareVar(foo, myInt)
declareVar(foo, myUndeclaredVar)
Remember that the second parameter of declareVar is typed, so undeclared vari-
ables can’t be passed to it. Only if a variable has the specified identifier defined can it
be passed into declareVar.
 Compiling the preceding code listing will result in an “undeclared identifier”
error. 
template declareVar(varName: untyped, value: typed) =
  var varName = value 
declareVar(foo, 42)
var foo = 42
The identifier and integer
value are substituted in the
body of the template.
This code is generated
as a result.
This argument can be an
undefined identifier because
its type is untyped.
This argument must be a
defined variable or a
literal value because
its type is typed.
Figure 9.3
Arguments are substituted as-is in templates. Their types determine whether an undefined identifier 
is accepted.
This will compile because 
myInt is declared above.
This won’t compile because 
myUndeclaredVar is not 
declared anywhere.
Licensed to   
259
Templates
9.2.3