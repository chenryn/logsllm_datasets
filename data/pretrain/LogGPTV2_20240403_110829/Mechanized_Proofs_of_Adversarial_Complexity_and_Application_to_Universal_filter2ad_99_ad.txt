### Model for Communication and Machine-Checking UC Proofs

Expressing the model for communication in a procedure-based semantics, as provided by tools targeting game-based proofs, is challenging. To address these difficulties, we propose a new approach to machine-checking UC (Universal Composability) proofs. This approach shares many features with the simplified version of UC proposed by Canetti, Cohen, and Lindell in [19].

#### Key Features of the Proposed Approach

1. **Static Fixation of Machines/Modules**:
   - As in [19], we statically fix the machines/modules in the execution model.
   - An adversarial entity controls which module gets executed next, rather than allowing machines to pass control between them freely, as in the original UC execution model.

2. **Procedure-Based Interactions**:
   - The interactions are procedure-based, meaning that when the environment passes control to the protocol, the internal protocol structure follows a procedure call tree.
   - This ensures that control returns to the environment, excluding the possibility of non-terminating code.

3. **Expressiveness and Communication Models**:
   - While we lose some expressiveness, we do not hard-wire a specific communications model for protocols based on authenticated channels.
   - Instead, we allow the protocol designer to specify the communications model using an appropriate module structure.
   - We recover the authenticated communications model of [19] by explicitly defining a hybrid real-world where concrete modules for ideal authenticated channels are available to the communicating parties.

4. **Trade-offs**:
   - The trade-offs associated with our approach are discussed in more depth at the end of this section, drawing a parallel to the work in [20].

### Mechanized Formalization in EasyCrypt

We propose a natural simplification of the UC execution model based on EasyCrypt modules, which opens the way for a lightweight formalization of UC proofs. This formalization has been conducted in our extension of EasyCrypt, with fully mechanized proofs of the lemmas and theorems.

#### Protocol and Functionality as EasyCrypt Modules

The basic component in our UC execution model is a module of type `PROTOCOL` (Figure 7). This type represents either a full real-world configuration (a distributed protocol executed by a fixed number of parties) or an ideal-world configuration (an ideal functionality executing a protocol as a trusted third party).

- **Fixed Interface**:
  - `init`: Models global protocol setup.
  - `IO`: Captures the interaction of a higher-level protocol using this module as a sub-component.
  - `BACKDOORS`: Captures the interaction of an adversary with the protocol during its execution.

- **Real-World Protocols**:
  - A module of type `PROTOCOL` is constructed from sub-modules emulating various parties and communication channels.
  - `BACKDOORS` models adversarial power in this communication model.

- **Ideal-World Protocols**:
  - A `PROTOCOL` is typically a flat description of the ideal computation in a single module.
  - `BACKDOORS` models unavoidable leakage and external influence over the operation of the trusted third party.

### Execution Model

The real- and ideal-world configurations are composed by a statically determined set of modules, which communicate using hardwired interfaces. The execution model is defined by an experiment in which an external environment interacts with the protocol via its `IO` and `BACKDOORS` interfaces until it outputs a boolean value (Figure 8).

- **IO Interface**:
  - Allows the environment to pass input to the protocol using `inputs` or retrieve an output produced by the protocol using `outputs`.

- **BACKDOORS Interface**:
  - Allows the environment to read messages produced by the protocol using `backdoor` or make one of the protocol sub-components advance in its execution using `step`.

### UC Emulation

The central notion in Universal Composability is UC-emulation, which is a relation between two protocols \(\pi_1\) and \(\pi_2\). If \(\pi_1\) UC-emulates \(\pi_2\) with a small advantage \(\epsilon\), then \(\pi_1\) can replace \(\pi_2\) in any context within a complexity class.

- **Definition**:
  - \(\pi_1\) UC emulates \(\pi_2\) under complexity restrictions \(c_{sim}\) and \(c_{env}\) and advantage bound \(\epsilon\) if there exists a simulator \(S\) such that for all environments \(Z\):
    \[
    | \Pr[Z(\pi_1) : \top] - \Pr[Z(\langle \pi_2 \| S(\pi_2) \rangle) : \top] | \leq \epsilon
    \]
  - We denote this as \(\text{Adv}_{uc}^{c_{sim}, c_{env}}(\pi_1, \pi_2) \leq \epsilon\).

- **Transitivity**:
  - UC-emulation is transitive: if \(\pi_1\) UC-emulates \(\pi_2\) and \(\pi_2\) UC-emulates \(\pi_3\), then \(\pi_1\) UC-emulates \(\pi_3\).
  - The lemma is stated in EasyCrypt with the necessary cost restrictions and simulators (Lemma 5.1).

### Resource and Memory Restrictions

Our formalization quantifies over simulators and environments using types that provide a full characterization of their resource usage, including memory access, procedure calls, and computational costs (Figure 9).

- **Types of Z and S**:
  - The definition of emulation is parametric in the resource restrictions \(c_{sim}\) and \(c_{env}\).
  - The `IO` interface of \(\pi_2\) must match the type of the `IO` interface of \(\pi_1\).
  - The `BACKDOORS` interface in the ideal world specifies unavoidable leakage and adversarial control.
  - The type of the simulator \(S\) and the environment \(Z\) are restricted to exclude the memories of \(\pi_1\), \(\pi_2\), and \(S\).

This approach ensures a meaningful and secure definition of UC-emulation, providing a robust framework for analyzing and verifying cryptographic protocols.