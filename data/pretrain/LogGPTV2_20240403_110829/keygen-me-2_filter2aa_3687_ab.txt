|           ; arg int arg_8h @ ebp+0x8
|           ; CALL XREF from sym.validate_key (0x8048cd8)
|           0x08048796      55             push ebp
|           0x08048797      89e5           mov ebp, esp
|           0x08048799      53             push ebx
|           0x0804879a      83ec04         sub esp, 4
|           0x0804879d      8b4508         mov eax, dword [arg_8h]     ; [0x8:4]=-1 ; 8
|           0x080487a0      0fb600         movzx eax, byte [eax]
|           0x080487a3      0fbec0         movsx eax, al
|           0x080487a6      83ec0c         sub esp, 0xc
|           0x080487a9      50             push eax
|           0x080487aa      e809ffffff     call sym.ord
|           0x080487af      83c410         add esp, 0x10
|           0x080487b2      0fbed8         movsx ebx, al
|           0x080487b5      8b4508         mov eax, dword [arg_8h]     ; [0x8:4]=-1 ; 8
|           0x080487b8      83c001         add eax, 1
|           0x080487bb      0fb600         movzx eax, byte [eax]
|           0x080487be      0fbec0         movsx eax, al
|           0x080487c1      83ec0c         sub esp, 0xc
|           0x080487c4      50             push eax
|           0x080487c5      e8eefeffff     call sym.ord
|           0x080487ca      83c410         add esp, 0x10
|           0x080487cd      0fbec0         movsx eax, al
|           0x080487d0      01d8           add eax, ebx
|           0x080487d2      83ec08         sub esp, 8
|           0x080487d5      6a24           push 0x24                   ; '$' ; 36
|           0x080487d7      50             push eax
|           0x080487d8      e894ffffff     call sym.mod
|           0x080487dd      83c410         add esp, 0x10
|           0x080487e0      83f80e         cmp eax, 0xe                ; 14
|           0x080487e3      0f94c0         sete al
|           0x080487e6      8b5dfc         mov ebx, dword [local_4h]
|           0x080487e9      c9             leave
\           0x080487ea      c3             ret
```
In words, this means that `(ord(key[0]) + ord(key[1])) % 36` need to be equal 14. 
Note that `ord` is implemented in the program in a non-standard way.
Translating the whole set of constraints to Python provides the following result:
```python
import string
def ord2(c):
    o = ord(c)
    if o >= ord('0') and o = ord('A') and o <= ord('Z'):
        return o - ord('7')
    raise Exception("Invalid character: '{}'".format(c))
def uninit(k, arr):
    for i in arr:
        if k[i] == '?':
            return True
    return False
def c1(k):
    if uninit(k, [0, 1]):
        return True
    return (ord2(k[0]) + ord2(k[1])) % 36 == 14
def c2(k):
    if uninit(k, [2, 3]):
        return True
    return (ord2(k[2]) + ord2(k[3])) % 36 == 24
def c3(k):
    if uninit(k, [2, 0]):
        return True
    return (ord2(k[2]) - ord2(k[0])) % 36 == 6
def c4(k):
    if uninit(k, [1, 3, 5]):
        return True
    return (ord2(k[1]) + ord2(k[3]) + ord2(k[5])) % 36 == 4
def c5(k):
    if uninit(k, [2, 4, 6]):
        return True
    return (ord2(k[2]) + ord2(k[4]) + ord2(k[6])) % 36 == 13
def c6(k):
    if uninit(k, [3, 4, 5]):
        return True
    return (ord2(k[3]) + ord2(k[4]) + ord2(k[5])) % 36 == 22
def c7(k):
    if uninit(k, [6, 8, 10]):
        return True
    return (ord2(k[6]) + ord2(k[8]) + ord2(k[10])) % 36 == 31
def c8(k):
    if uninit(k, [1, 4, 7]):
        return True
    return (ord2(k[1]) + ord2(k[4]) + ord2(k[7])) % 36 == 7
def c9(k):
    if uninit(k, [9, 12, 15]):
        return True
    return (ord2(k[9]) + ord2(k[12]) + ord2(k[15])) % 36 == 20
def c10(k):
    if uninit(k, [13, 14, 15]):
        return True
    return (ord2(k[13]) + ord2(k[14]) + ord2(k[15])) % 36 == 12
def c11(k):
    if uninit(k, [8, 9, 10]):
        return True
    return (ord2(k[8]) + ord2(k[9]) + ord2(k[10])) % 36 == 27
def c12(k):
    if uninit(k, [7, 12, 13]):
        return True
    return (ord2(k[7]) + ord2(k[12]) + ord2(k[13])) % 36 == 23
ALPHA = string.ascii_uppercase + string.digits
def is_safe(k):
    for func in [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12]:
        if not func(k):
            return False
    return True
def try_place(k, index):
    if index == 16:
        print ("".join(k))
        return True
    for i in range(len(ALPHA)):
        k[index] = ALPHA[i]
        if is_safe(k):
            if try_place(k, index+1):
                return True
    k[index] = '?'
    return False
k = ['?']*16
try_place(k, 0)
```
The script searches for a result which fulfills all the constrains, and prints it.
The output:
```console
root@kali:/media/sf_CTFs/pico/keygen-me-2# python solve.py
A4G8MSBHA7AAAWD3
```
Using this key:
```console
$ ./activate A4G8MSBHA7AAAWD3
Product Activated Successfully: picoCTF{c0n5tr41nt_50lv1nG_15_W4y_f45t3r_2923966318}
```
The flag: picoCTF{c0n5tr41nt_50lv1nG_15_W4y_f45t3r_2923966318}