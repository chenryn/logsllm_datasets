ipant and |{tw ∈ Tw : w ∈ tw}| represents the number of tweets
containing the word w.
For any two tweets u and v, let the TFIDF feature vectors be U
and V, respectively. For example, if a tweet u consists of message "Hi
good morning hello hello" and tweet v consists of message "hi good
|Tw |
morning". The word "hello" is appearing twice in the tweet u. Thus
T F("hello", u) = 2/4 = 0.5, T F("hello", v) = 0/2 = 0 and IDF("hello",
Tw ) = log(2/1) = 0.301. Finally, T F IDF("hello", u, Tw ) = T F("hello",
u) × IDF("hello",Tw ) = 0.5 × 0.301 ≈ 0.150 and T F IDF("hello", v,
Tw ) = T F("hello", v) × IDF("hello",Tw ) = 0 × 0.301 = 0.
Let a denote the total number of tweets posted by pi, and let b
denote the total number of tweets posted by pj. A tweet-content
similarity matrix M = [ˆxij]a×b is calculated using the cosine simi-
larity measure. It is constructed such that each tweet of participant
pi is compared with all tweets of pj. The cosine similarity measure
of two TFIDF feature vectors U and V is defined as
xij =
(cid:113)m
k =1 UkVk
k =1 U 2
k
k =1 V 2
k
m
(cid:113)m
(cid:40)1,
ˆxij =
0,
If xij ≥ ς
If xij  for all participants. Each
element (wij) of the weighted behavioral similarity matrix S is
determined using Equation (9). For each directed edge, the sign
of a weighted edge is determined by Equation (12) which helps to
detect the signed weighted edge set E′ with a set of attack and non-
attack edges. Then the weighted signed Twitter network graph G′ =
(P, E′,T , S) is constructed (Lines 4-8). In each iteration, the signed
edge ∈ E′ with the lowest weighted behavioral similarity
value is removed, each disconnected component is considered as a
community, and matrix S is recomputed. This process is repeated
until the desired number of communities are obtained (Lines 9-
17). In Line 18, the disconnected components in G′ are shown as
C = {c1, ..., cm}. Line 20 executes Intra_Community_Reformation
(Procedure 2) to determine the updated communities for better
accuracy. This procedure removes legitimate participants from a
social botnet community and adds similar type of social bots to a
social botnet community based on the sign of the weighted edges.
Algorithm 1 Social Botnet Community Detection (SBCD)
Input: G = (P, E): Twitter graph, ς: Similarity threshold
Output: Legitimate and social botnet communities
Compute trust value Tpi using Equation (10)
1: for each participant pi ∈ P do
2:
3: end for
4: for ∈ E do
5:
ing Equation (9)
S[i][j] ← Compute weighted behavioral similarity wij us-
Compute sign of weighted edge using Equation (12)
6:
7: end for
8: Obtain G′ = (P, E′,T , S)
9: // Finding Primary Communities
10: for 1 ≤ i ≤ m do // m: desired number of communities
11:
12:
13:
for ∈ E′ do
if S[i][j]  0 and S[bm][i] ≥ ς then
end for
end if
higher value of υintr a(pi) =
Similarly, a higher value of υinter(pi) =
outgoing edge) should be added to the detected social botnet ci. A
pj ∈ci siдn(pi , pj) signifies whether
pi ∈ ci is more likely to be within the social botnet community ci.
pj (cid:60)ci siдn(pi , pj) signifies
whether a participant pi is more likely to have higher (malicious
or non-malicious) behavioral similarity with participants that are
outside the social botnet community. An improved way to detect a
social botnet community is to increase the number of non-attack
edges (between any two social bots) with higher behavioral simi-
larity and decrease the number of attack edges (between the social
bots and legitimate participants).
If υ(pi) = (υintr a(pi) − υinter(pi)) < 0, then we remove the
participant pi from ci. For each social botnet community, we com-
pute the weighted eigenvector centrality measure [16] to identify
the botmaster BM, the leader among the social bots. The weighted
eigenvector centrality quantifies the influence of a participant based
on the (intra community) strength and the number of social inter-
actions with neighboring participants. The weighted eigenvector
centrality of pi ∈ ci, denoted as ec(pi), is based on its neighbors’
j=1 wjiec(pj),
eigenvector centrality and computed as ec(pi) = 1
where λ is a constant and wji is behavioral similarity value be-
tween participants pj and pi (Lines 1-9, Procedure 2). The partic-
ipant with the highest weighted eigenvector centrality measure
is selected as the botmaster BM (Line 10, Procedure 2). If there
exists higher behavioral similarity between the botmaster BM and
participant pi, and υ(pi) ≥ 0, then the social bot pi is added to ci.
This process is repeated until the social botnet communities remain
unchanged over two consecutive iterations. The SBCD algorithm
returns C = {c1, ..., cm} as the detected social botnet communities
and legitimate communities (Lines 11-18, Procedure 2). Thus, the
community formation phase (SBCD algorithm) detects social bot-
net communities with different types of malicious behavior. In the
n
λ
Session 13: Malware ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan713next section, the output of each SBCD community is given as input
to the deep autoencoder model to detect different types of social
botnet communities more accurately.
4.5 Deep Autoencoder based SBCD Algorithm
We use a deep neural network autoencoder, one of the deep learning
techniques [11], that is trained to reconstruct the social botnet
communities more accurately. The deep autoencoder based SBCD
algorithm (DA-SBCD) is presented in Algorithm 3, for which the
inputs are the community set C = {c1, ....., cm} and the number κ
of hidden layers.
whereWh3,Wh4, bh3 and bh4 are respectively the weights and biases
of the decoding phase in the deep autoencoder. Thus, the deep
autoencoder model is defined as