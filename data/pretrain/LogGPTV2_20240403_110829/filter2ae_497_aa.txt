# HCTF逆向题目详析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
很有水平的一场比赛，RE的几道题目质量都非常高。
由于自己的原因，只是看了题，没做，感觉就算认真做，也做不出来几题，毕竟太菜。哈哈！
下面就先从最简单的开始写！
## seven
简单的签到题，只不过是放在了windows驱动里，从没接触过，稍微带来了一点麻烦，算法是很经典的吃豆子游戏，刚好看加解密时看到了，在键盘扫描码卡了很久。
关于驱动开发的一些API可以在[MDSN](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/index)上找到相关说明
如DriverEntry函数就是一个驱动程序的入口函数，过多的我就不班门弄斧了。
总之这个题就是有不认识的API，就直接在MDSN上找函数说明即可。
关于解题，还是搜索字符串，找到The input is the
flag字样，交叉引用到sub_1400012F0函数，如果看过加解密的同学，应该能一眼看出这是吃豆子游戏（这可不是打广告），细看还真是！
就是如下这个矩阵
从o开始，沿着.走，一直走到7即可。
0x11 表示向上
0x1f 表示向下
0x1e 表示向左
0x20 表示向右
当时一直在想0x11和输入的关系，最后才知道原来是键盘的扫描码，分别对应wasd
OK那么此题轻易的解决了！我是不是很水！
（下面几题都算是复现，我是一个没有感情的杀手！)
## LuckyStar
别看程序这么大只不是VS静态编译了而已。
其实也不难，一进来先搜索字符串，看到idaq.exe，x32dbg等常见调试器的字样，很明显有反调试，并且还看到一大段未识别的数据，感觉很像是自解码的部分，其实真正的加密部分就在这里。
关于反调试，不必紧张，动态调试时手动修改下寄存器即可。通过交叉引用找到TlsCallback_0函数，判断之前下断，绕过即可（直接patch比较方便）。
之后便是程序的自解密部分，最后便可以看到真正的加密的过程。
将00401780至00401939 undefine一下然后重新create
function，IDA便可以识别，接下来的一段解密也是类似的，最后进行一个比较。有一点需要注意，在动调时候不知道什么情况，程序就蹦了，需要手动在401780函数处set
ip然后跳转过去
加密部分其实就是变形的base64加上一个异或，类似的题目做的太多了，解密脚本如下：
    table='''abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/'''
    def mydecodeb64(enc):
        enc=enc.replace("=","")
        x="".join(map(lambda x:bin(table.index(x))[2:].zfill(6),enc))
        # print x
        for ap in range(8-(len(x)%8)):
            x+='0'
        # print x
        plain=[]
        for i in range((len(x))/8):
            plain.append(chr(eval('0b'+x[i*8:(i+1)*8])))
        return "".join(plain).replace("x00","")
    def myencodeb64(plain):
        en=[]
        encode=[]
        for d in list(plain):
            en.append(bin(ord(d))[2:].zfill(8))
        plain="".join(en)
        for ap in range(6-(len(plain)%6)):
            plain+='0'
        # print enc
        for i in range((len(plain))/6):
            encode.append(table[eval('0b'+plain[i*6:(i+1)*6])])
        return "".join(encode)
    in_base='D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3'
    enc=[0x49, 0xE6, 0x57, 0xBD, 0x3A, 0x47, 0x11, 0x4C, 0x95, 0xBC, 0xEE, 0x32, 0x72, 0xA0, 0xF0, 0xDE, 0xAC, 0xF2, 0x83, 0x56, 0x83, 0x49, 0x6E, 0xA9, 0xA6, 0xC5, 0x67, 0x3C, 0xCA, 0xC8, 0xCC, 0x05]
    rand=[0x4c,0xb2,0x7d,0xbe,0x04,0x3a,0x06,0x27,0x94,0xc1,0xdc,0x55,0x77,0xe5,0x8d,0x81,0x85,0xa6,0xf2,0x2d,0x83,0x1e,0x58,0xdc,0x96,0x81,0x1b,0x55,0xc8,0x8a,0xb5,0x0b]
    f=[]
    for i in range(32):
        f.append(chr(rand[i]^enc[i]^ord(in_base[i])))
    a = "".join(f)
    print a
    flag=mydecodeb64(a)
    print flag
## PolishDuck
比赛的时候就简单看了一眼，只知道是个arduino程序。
这题可以参考[文章](http://blog.leanote.com/post/sherlly/pwnhub-%E3%80%8A%E8%A1%80%E6%9C%88%E5%BD%92%E6%9D%A5%E3%80%8B-key-writeup)
对于hex文件，先使用hex2bin进行转化[在此下载](http://gnuwin32.sourceforge.net/packages/hex2bin.htm)
通过strings可知为Arduino Leonardo板子。
同样的为atmega32u4[在此](https://gist.github.com/thecamper/18fa1453091be4c379aa12bcc92f91f0)可以得到对应板子的IDA配置信息，此时再次载入bin文件，IDA如下配置。
既然后notepad.exe字样，那么就从这里开始分析，其实这里想到了badusb，正好我之前在大二的时候玩过这玩意，这时居然能派上用场.
使用Arduino编写一个简单的HID例程，设置如下：
代码如下：
    #include 
    void setup() {
      // put your setup code here, to run once:
      Keyboard.begin();
      delay(5000);
      Keyboard.press(KEY_LEFT_GUI);
      delay(500);
      Keyboard.press('r');
      delay(500);
      Keyboard.release(KEY_LEFT_GUI);
      Keyboard.release('r');
      Keyboard.press(KEY_CAPS_LOCK);
      Keyboard.release(KEY_CAPS_LOCK);
      delay(500);
      Keyboard.println("NOTEPAD.EXE");
      delay(800);
      Keyboard.println();
      delay(800);
    }
    void loop() {
      // put your main code here, to run repeatedly:
    }
并且导出编译后的二进制文件
此时会在目录下出现两个hex文件,其中bootloader是我们需要关注的，同样的使用hex2bin转化，丢入IDA进行查看。
OK，很明显，和题目的结构基本上一致，所以进行类比法即可。
我们关注到sub_9B5函数，前面一段无非是进行初始化操作
根据[Keyboard.h](https://github.com/arduino-libraries/Keyboard/blob/master/src/Keyboard.h)可以知道按键所对应的机器码，同时看网上一些文章可以知道println读取的数据是从RAM中获得，而__RESET函数中包含了初始化RAM的工作，结合着源代码，可以得到以下过程：
回到题目中来，也是类似的,这里需要确定println函数输出的偏移，在hex窗口确定数据范围，然后手动取得offset，通过python将每一个输出得到，最后eval计算即可。
    notepad.exe 对应 0x140
    44646        对应 0x14c
    遇到'x00'结束
    注意一点hex中显示的和实际的是不同的！！！
    因为println的参数中只确定了起始偏移，结束需要根据‘x00'来判断。
    所以有的符号会有重复！
    否则这题就太简单了！！！
脚本如下：
    from libnum import n2s,s2n
    a=open("PolishDuck2.bin",'rb').read()
    data=a[0x1a9c:0x1e3e]
    offset=[0x14C ,0x153 ,0x162 ,0x177 ,0x18B,0x1A9,0x1C8,0x1D3,0x1EB,0x1FE,0x25E ,0x207,0x21C,0x227 ,0x246 ,0x261 ,0x270 ,0x28B,0x298,0x2A3,0x2B1,0x25C ,0x2BA,0x2C5,0x2D0,0x2D7,0x2F2,0x307,0x310,0x25E ,0x327 ,0x346 ,0x3DC,0x34D ,0x364 ,0x373 ,0x38F,0x3A6,0x3B3,0x3BF,0x3D0,0x3DF,0x3EF,0x400,0x44B ,0x413,0x42C ,0x43B ,0x44F ,0x452 ,0x490,0x45F ,0x46C ,0x47D ,0x48E,0x497,0x49E,0x4B5,0x4CB,0x445 ,0x445 ,0x4D6,0x44D ,0x44D ,0x494,0x4E5,0x44f]
    flag=''
    for i in range(len(offset)):
        start = offset[i]-0x14c
        end = start+1
        index = start
        while end> 3;获取opcode
之后进入另一个函数，经过一个类似vm的过程得到data
并将op和data进行拼接
最后将拼接的数组同固定数组比较。
OK！我想第一部分对大多数人来说还是比较简单的，接下来我们便可以解出前半段flag。脚本如下：
    def gate_one():
        static_data=[0x07, 0xE7, 0x07, 0xE4, 0x01, 0x19, 0x03, 0x50, 0x07, 0xE4, 0x01, 0x20, 0x06, 0xB7, 0x07, 0xE4, 0x01, 0x22, 0x00, 0x28, 0x00, 0x2A, 0x02, 0x54, 0x07, 0xE4, 0x01, 0x1F, 0x02, 0x50, 0x05, 0xF2, 0x04, 0xCC, 0x07, 0xE4, 0x00, 0x28, 0x06, 0xB3, 0x05, 0xF8, 0x07, 0xE4, 0x00, 0x28, 0x06, 0xB2, 0x07, 0xE4, 0x04, 0xC0, 0x00, 0x2F, 0x05, 0xF8, 0x07, 0xE4, 0x04, 0xC0, 0x00, 0x28, 0x05, 0xF0, 0x07, 0xE3, 0x00, 0x2B, 0x04, 0xC4, 0x05, 0xF6, 0x03, 0x4C, 0x04, 0xC0, 0x07, 0xE4, 0x05, 0xF6, 0x06, 0xB3, 0x01, 0x19, 0x07, 0xE3, 0x05, 0xF7, 0x01, 0x1F, 0x07, 0xE4]
        s=''
        for i in range(0, len(static_data), 2):
            op = static_data[i]
            op_data = static_data[i+1]
            if op == 0:
                op_data-=34
            if op == 1:
                op_data-=19
            if op == 2:
                op_data-=70
            if op == 3:
                op_data-=66
            if op == 4:
                op_data^=0xca
            if op == 5:
                op_data^=0xfe
            if op == 6:
                op_data^=0xbe
            if op == 7:
                op_data^=0xef