# Towards Practical Reactive Security Audit Using Extended Static Checkers

**Authors:**
- Julien Vanegue, Bloomberg L.P., New York, NY, USA
- Shuvendu K. Lahiri, Microsoft Research, Redmond, WA, USA

**Conference:**
2013 IEEE Symposium on Security and Privacy

## Abstract
This paper describes our experience in performing reactive security audits for known vulnerabilities in core operating system and browser COM components using an extended static checker, HAVOC-LITE. We detail the modifications made to the tool to make it applicable to large C++ components and share our insights from using an extended static checker on a large scale. We argue that such checkers, when used as a configurable static analysis tool by security auditors, can effectively identify variations of known vulnerabilities. This effort has led to the discovery and resolution of approximately 70 previously unknown security vulnerabilities in over 10 million lines of operating system and browser code.

**Keywords:**
- Security audit
- Program verification
- Static analysis
- Extended static checkers

## I. Introduction
Ensuring the security of software is of paramount importance to the software industry. Every development team, whether small or large, mandates extensive testing and analysis to protect against security breaches. However, security flaws remain a persistent issue, especially in legacy applications that cannot be redesigned from scratch. In such cases, effective defense mechanisms are required to mitigate the impact of security vulnerabilities. Finding all possible variants of a known vulnerability can significantly enhance the security of a software system.

The Microsoft Security Response Center (MSRC) identifies, monitors, resolves, and responds to security incidents and vulnerabilities in Microsoft software. One of their key activities involves investigating the surrounding code and design to find other variants of known threats. This process is expensive and labor-intensive, involving manual testing, fuzzing, and extensive manual security audits. These audits must be responsive and timely to prevent attackers from exploiting similar vulnerabilities in the future. We define "reactive security audit" as the process of auditing for variants of known vulnerabilities over a large code base. While current practices are effective, they lack scalability and confidence in the audit results.

In this work, we explore the use of extended static checking tools to improve the productivity of auditors performing reactive security audits and to increase the confidence in the audit results. Extended static checking tools, such as ESC/Java and HAVOC, offer the potential to develop configurable static analysis tools with high coverage guarantees. These tools allow users to write contracts (specifications of procedures) in the form of preconditions, postconditions, and assertions, which are then discharged using modern Satisfiability Modulo Theories (SMT) solvers. The semantics of the source language are precisely defined by the tool, and assumptions are well-documented. Many such tools also include user-guided contract inference tools to reduce the manual overhead of writing simple intermediate contracts. Unlike full functional correctness verifiers, these tools make pragmatic assumptions to reduce proof complexity and provide more automation through inference. Although the use of extended static checkers was proposed for ensuring security a decade ago, practical adoption has been limited. We conjecture that the absence of a usable, robust, and scalable tool for core operating system and browser implementations has been a major barrier to adoption.

In this paper, we present a case study of using HAVOC-LITE, an extended static checker, to check for variants of security vulnerabilities in Microsoft Windows and Internet Explorer. We document the challenges encountered in deploying the previous version of the tool (HAVOC) and the extensions needed to apply it in a realistic setting. These extensions include modeling common C++ language features, scaling contract inference for large modules, and early annotation validation. Over the course of one year, this effort led to the discovery and resolution of around 70 previously unknown security vulnerabilities in over 10 million lines of production code. We discuss the effort involved in modeling, performing inference of annotations, and dealing with false alarms. Despite the current limitations, we conclude that such a tool can be cost-effective in complementing existing efforts based on fuzzing and manual audits. We believe it can improve the productivity of security auditors who invest in implementing ad-hoc tools to aid their manual audits.

The rest of the paper is organized as follows:
1. **Section II:** Overview of our approach using two simplified examples.
2. **Section III:** Description of the existing tool HAVOC and its limitations.
3. **Section IV:** Design of HAVOC-LITE, including the extensions and features added.
4. **Section V:** Application of HAVOC-LITE on core OS and browser components, including the properties modeled, candidate annotations, and representative errors.
5. **Section VI:** Discussion of related static analysis tools.
6. **Section VII:** Conclusion.

## II. Motivating Examples
In this section, we introduce two concrete examples that illustrate commonly found programming styles in C++ and COM (Component Object Model) applications. These examples highlight the need for precise bit-level reasoning and proper handling of object-oriented and interface-oriented programming by the extended static checker.

### A. Example 1: Inter-procedural and Bit-Precise Reasoning
The first example involves a generic container data structure called `VARIANT`, commonly used in C++/COM applications. This structure contains a special field `vt` and a union of data attributes. The value of the `vt` field indicates which union field is correctly initialized. Failure to check the `vt` field can lead to using the wrong union field, potentially resulting in a security vulnerability. Such checks are often performed in separate functions, requiring inter-procedural constraint propagation to avoid false positives. Additionally, since the `vt` attribute is a bit field, the static checker must support bit-level program semantics. Users must also be able to document the desired property by checking each dereference of the fields under consideration. HAVOC-LITE supports these features and was used to find multiple security vulnerabilities in a critical browser component.

```c
typedef struct tagVARIANT {
    VARTYPE vt;
    union {
        SAFEARRAY *parray;
        BYTE *pbVal;
        PVOID byref;
        // ... other fields
    };
} VARIANT;

bool t1good() {
    VARIANT v;
    v.vt = VT_ARRAY;
    v.parray = 0;
    return true;
}

bool t1bad() {
    VARIANT v;
    v.vt = VT_ARRAY;
    v.pbVal = 0; // Incorrect usage
    return true;
}
```

Figure 2 shows the annotations written by the user to create a checker for this property. There are two parts to the annotations: (a) devising the property and (b) creating an inter-procedural inference.

- **Field Instrumentations:** These instrumentations insert assertions at specific points in the code. For example, the `__instrument_write_array` method ensures that the `vt` field equals `VT_ARRAY` before writing to the `parray` field. Similarly, `__instrument_write_pbVal` ensures that `vt` equals `VT_BYREF | VT_UI1` before writing to the `pbVal` field.

- **Func Instrumentations:** These are used to write annotations on a set of methods. The `__instrument_universal_type` primitive specifies a parameter of type `VARIANT*`, and `__instrument_universal_include` restricts the instrumentation to methods matching a particular pattern. The `__cand_requires` and `__cand_ensures` annotations are candidate preconditions and postconditions, which are fed to the inter-procedural annotation inference engine to infer valid annotations.

```c
#include <havoc.h>

// Field Instrumentations
requires(v->vt == VT_ARRAY)
instrument_write_pre(v->parray);
void __instrument_write_array(VARIANT *v);

requires(v->vt == (VT_BYREF | VT_UI1))
instrument_write_pre(v->pbVal);
void __instrument_write_pbVal(VARIANT *v);

// Func Instrumentations
cand_requires(v->vt == (VT_BYREF | VT_UI1))
cand_requires(v->vt == VT_ARRAY)
cand_ensures(v->vt == (VT_BYREF | VT_UI1))
cand_ensures(v->vt == VT_ARRAY)
instrument_universal_type(v)
include("*")
void __instrument_cand_variant(VARIANT *v);
```

These examples and annotations demonstrate the capabilities of HAVOC-LITE in handling complex, real-world scenarios and the importance of precise and scalable static analysis in reactive security audits.