 Max failure ratio: 0
 Rollback order:    stop-first
ContainerSpec:
 Image:    nigelpoulton/tu-demo:v2@sha256:d3c0d8c9...cf0ef2ba5eb74c
 init: false
Resources:
Networks: uber-net
Endpoint Mode:  vip
Ports:
 PublishedPort = 80
  Protocol = tcp
  TargetPort = 80
  PublishMode = ingress 
```
 `您还应该注意关于服务网络配置的一些事情。群中运行服务副本的所有节点都将拥有我们之前创建的`uber-net`覆盖网络。我们可以通过在运行副本的任何节点上运行`docker network ls`来验证这一点。
您还应该注意`docker inspect`输出的`Networks`部分。这显示了`uber-net`网络以及群体范围的`80:80`端口映射。
#### 解决纷争
可以使用`docker service logs`命令查看群组服务日志。但是，并非所有日志记录驱动程序都支持该命令。
默认情况下，Docker 节点将服务配置为使用`json-file`日志驱动程序，但也存在其他驱动程序，包括:
*   `journald`(仅适用于运行`systemd`的 Linux 主机)
*   `syslog`
*   `splunk`
*   `gelf`
`json-file`和`journald`最容易配置，两者都使用`docker service logs`命令。命令的格式为`docker service logs `。
如果您使用第三方日志驱动程序，您应该使用日志平台的本地工具查看这些日志。
`daemon.json`配置文件的以下片段显示了配置为使用`syslog`的 Docker 主机。
```
{
  "log-driver": "syslog"
} 
```
 `通过将`--log-driver`和`--log-opts`标志传递给`docker service create`命令，可以强制各个服务使用不同的驱动程序。这些将覆盖`daemon.json`中设置的任何内容。
服务日志的工作前提是您的应用在其容器中作为 PID 1 运行，并将日志发送到`STDOUT`并将错误发送到`STDERR`。日志驱动程序将这些“日志”转发到通过日志驱动程序配置的位置。
以下`docker service logs`命令显示了`svc1`服务中所有副本的日志，这些副本在启动副本时经历了几次故障。
```
$ docker service logs svc1
svc1.1.zhc3cjeti9d4@wrk-2 | [emerg] 1#1: host not found...
svc1.1.zhc3cjeti9d4@wrk-2 | nginx: [emerg] host not found..
svc1.1.6m1nmbzmwh2d@wrk-2 | [emerg] 1#1: host not found...
svc1.1.6m1nmbzmwh2d@wrk-2 | nginx: [emerg] host not found..
svc1.1.1tmya243m5um@mgr-1 | 10.255.0.2 "GET / HTTP/1.1" 302 
```
 `输出被修剪以适合页面，但是您可以看到显示了来自所有三个服务副本的日志(两个失败，一个正在运行)。每一行都以复制副本的名称开始，包括服务名称、复制副本编号、复制副本标识和计划运行的主机名称。下面是日志输出。
这很难说，因为它被修剪以适应书本，但看起来前两个副本失败了，因为它们试图连接到另一个仍在启动的服务(当相关服务启动时，这是一种竞争情况)。
你可以跟踪日志(`--follow`)，跟踪日志(`--tail`)，获取额外的细节(`--details`)。
#### 备份群
备份群将备份在发生灾难性损坏故障时恢复群所需的控制平面对象。从备份中恢复群集是极其罕见的情况。但是，业务关键型环境应该始终为最坏的情况做好准备。
您可能会问，如果控制平面已经复制并且高度可用(高可用性)，为什么还需要备份。为了回答这个问题，考虑一个场景，一个恶意的参与者删除了一个群体的所有机密。在这种情况下，高可用性无能为力，因为机密将从自动复制到所有管理器节点的群集存储中删除。在这种情况下，高可用性的复制集群存储对您不利—快速传播删除操作。在这种情况下，您可以从源代码报告中保存的副本中重新创建已删除的对象，也可以尝试从最近的备份中恢复群。
以声明的方式管理集群和应用是防止需要从备份中恢复的一个好方法。例如，将群外的配置对象存储在源代码存储库中将使您能够重新部署网络、服务、机密和其他对象。然而，以声明的方式管理您的环境并严格使用源代码控制的回购需要纪律。
不管怎样，让我们看看如何**备份一群**。
群配置和状态存储在每个管理器节点上的`/var/lib/docker/swarm`中。配置包括；Raft 日志密钥、覆盖网络、机密、配置、服务等。群集备份是此目录中所有文件的副本。
由于此目录的内容被复制到所有管理器，您可以并且应该从多个管理器执行备份。但是，由于您必须停止正在备份的节点上的 Docker 守护程序，所以从非领导者管理器执行备份是一个好主意。这是因为停止对领导人的 Docker 将启动领导人选举。您还应该在业务不活跃的时候执行备份，因为如果另一个管理器在备份过程中出现故障，停止一个管理器会增加群丢失仲裁的风险。
我们将要遵循的过程是为演示目的而设计的，您需要根据您的生产环境进行调整。它还创建了几个群对象，以便后面的步骤可以证明恢复操作是有效的。
> **警告**:以下操作存在风险。您还应该确保定期执行测试备份和恢复操作，并测试结果。
以下命令将创建以下两个对象，以便您可以证明恢复操作:
*   名为“Unimatrix-01”的覆盖网络
*   一个名为“失踪的无人机”的机密，包含文本“九分之七”
```
$ docker network create -d overlay Unimatrix-01
w9l904ff73e7stly0gnztsud7
$ printf "Seven of Nine" | docker secret create missing_drones -
i8oj3b2lid27t5202uycw37lg 
```
 `让我们执行集群备份。
1.  Stop Docker on a non-leader swarm manager.
    如果有任何容器或服务任务在节点上运行，此操作可能会停止它们。
    ```
     $ service docker stop 
    ```
`*   Backup the Swarm config.
    本示例使用 Linux `tar`实用程序来执行将作为备份的文件拷贝。请随意使用不同的工具。
    ```
     $ tar -czvf swarm.bkp /var/lib/docker/swarm/
     tar: Removing leading `/' from member names
     /var/lib/docker/swarm/
     /var/lib/docker/swarm/docker-state.json
     /var/lib/docker/swarm/state.json
    ```
    `*   Verify the backup file exists.
    ```
     $ ls -l
     -rw-r--r-- 1 root   root   450727 May 4 14:06 swarm.bkp 
    ```
     `在现实世界中，您应该根据任何公司备份策略存储和轮换此备份。
    此时，群已备份，您可以在节点上重新启动 Docker。` `*   重启 Docker。
    ```
     $ service docker restart 
    ```
    ``` 
 ```现在您有了备份，让我们执行一次测试恢复。此过程中的步骤演示了操作。在现实世界中执行恢复可能略有不同，但总体过程是相似的。
> **注意**:如果您的群仍在运行，并且您只希望添加一个新的管理器节点，则不必执行恢复操作。在这种情况下，只需添加一个新经理。群集恢复仅适用于群集损坏或丢失，并且您无法从存储在源代码 repo 中的配置文件副本中恢复服务的情况。
我们将使用早期的`swarm.bkp`文件来恢复蜂群。**所有群节点必须停止其 Docker 守护程序，并删除其`/var/lib/docker/swarm`目录的内容。**
要使恢复操作起作用，以下条件也必须成立:
1.  您只能还原到运行与执行备份时相同版本的 Docker 的节点
2.  您只能恢复到与执行备份的节点具有相同 IP 地址的节点
从您希望恢复的群管理器节点执行以下任务。记住必须停止 Docker，必须删除`/var/lib/docker/swarm`的内容。
1.  Restore the Swarm configuration from backup.
    在这个例子中，我们将从一个名为`swarm.bkp`的压缩`tar`文件中恢复。此命令需要恢复到根目录，因为它将包含原始文件的完整路径，作为提取操作的一部分。这在您的环境中可能会有所不同。
    ```
     $ tar -zxvf swarm.bkp -C / 
    ```
`*   启动 Docker。启动 Docker 的方法因环境而异。
    ```
     $ service docker start 
    ```
    `*   Initialize a new Swarm cluster.
    请记住，您不是在恢复管理器并将其添加回工作集群。这个操作是为了恢复一个没有幸存管理器的失败群。`--force-new-cluster`标志告诉 Docker 使用您在步骤 1 中恢复的存储在`/var/lib/docker/swarm/`中的配置创建一个新集群。
    ```
     $ docker swarm init --force-new-cluster
     Swarm initialized: current node (jhsg...3l9h) is now a manager. 
    ```
    `*   Check that the network and service were recovered as part of the operation.
    ```
     $ docker network ls
     NETWORK ID          NAME                DRIVER              SCOPE
     z21s5v82by8q        Unimatrix-01        overlay             swarm
     $ docker secret ls
     ID                          NAME                DRIVER        
     i8oj3b2lid27t5202uycw37lg   missing_drones 
    ```
     `恭喜你。蜂群恢复了。` `*   添加新的管理节点和工作节点，并进行新的备份。````
 ```记住，定期彻底地测试这个程序。你不希望它在你最需要的时候失败！
### DockerSwarm-命令
*   `docker swarm init`是创建新蜂群的命令。运行该命令的节点将成为第一个管理器，并切换为在*集群模式*下运行。
*   `docker swarm join-token`揭示将工人和经理加入现有集群所需的命令和令牌。要公开加入新经理的命令，请使用`docker swarm join-token manager`命令。要获得加入工人的命令，请使用`docker swarm join-token worker`命令。
*   `docker node ls`列出群中的所有节点，包括哪些是管理者，哪些是领导者。
*   `docker service create`是创建新服务的命令。
*   `docker service ls`列出群中正在运行的服务，并给出服务及其正在运行的任何副本的状态的基本信息。
*   `docker service ps `给出了关于单个服务副本的更详细的信息。
*   `docker service inspect`给出服务的非常详细的信息。它接受`--pretty`标志，将返回的信息限制为最重要的信息。
*   `docker service scale`允许您上下扩展服务中的副本数量。
*   `docker service update`允许您更新正在运行的服务的许多属性。
*   `docker service logs`允许您查看服务的日志。
*   `docker service rm`是从群中删除服务的命令。请谨慎使用，因为它会删除所有服务副本，而不要求确认。
### 章节总结
Docker Swarm 是 Docker 用于管理 Docker 节点集群以及部署和管理云原生应用的原生技术。它类似于 Kubernetes。
Swarm 的核心是一个安全的集群组件和一个编排组件。
安全集群组件是企业级的，提供了大量的安全和高可用性功能，这些功能可以自动配置，修改起来也非常简单。
编排组件允许您以简单的声明方式部署和管理云原生微服务应用。
我们将在第 14 章更深入地探讨以声明方式部署云原生微服务应用。```````````````````````````````*```