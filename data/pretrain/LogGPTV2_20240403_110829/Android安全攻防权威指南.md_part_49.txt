#7
#80x5d486830 in WebCore::HTMLElement::~HTML81ement (this=0x5a8d36f0,
at external/webkit/Source/WebCore/dom/StyledElement,cpp:121
_in_chrg=)
at external/webkit/Source/WebCore/btm1/HMLglement.h:34
#90x5d486848 in WebCore: :HML8lement::~HTMLElement (this=0x5a8d36f0,
_in_chrg=)
#10 0x5d46fb9a in webCore: :TreeShared : :removedLast
at external/webkit/Source/WebCore/html/HrMLElement.h:34
Ref
(this=)
at external/webkit/Source/WebCore/platform/TreeShared.h:118
11 0x5d46aef0 in deref (this=) at
#12 WebCore::TreeShared1:deref (this=)
at external/webkit/Source/WebCore/platform/TreeShared.h:68
#13 0x5d46f69a in -RefPtr (this=0x5e9003e8, _in_chrg=coptimized out>) at
#14 WebCore::Position::~Position (this=0x5e9003e8, _in_chrg= unrendered;
291
for (sode* node = holder->firstchild(): node)
292
1f (1isNodeRendered (node)&s 1isTableStruetureNode (node))
node = node>traverseNextNode (holder) )
293
294
unrendered. append (node) ;
295
size_t n = unrendered.size[);
296
297
for (size_t  = 0; I nextSibling() && (1staywithin 11
const Node *n = this1
1125
1126
n = n->parentNode(1;
n->parentNode(1 1= stayWithin))
1127
if(n)
1128
return n->nextSibling():
1130)
1129
:0umaet
---
## Page 219
7.9漏洞分析
203
第1118行和1119行最能说明原因。这个函数会递归遍历子节点，因此unrendered容器中
会包含所有未渲染的节点及其子节点。正因为如此，当removeNode第一次返回时，
unrenderered容器中会包含第一个节点中已经删除的子节点。
可以通过查看第一次调用removeNode时unrendered容器的状态来验证这个想法。
Breakpoint 1, twebCore::ReplacementFragment11removeode (this=0x5ea004a8,
(***=apou
at external/webkit/Source/febCore/editing/ReplaceSelect lonCommand.
cpp:211
(gdb) up
1 0x5d675d5a in WebCore: :ReplacementFragment : :removeUnrenderedNodes
(this=0x5ea004a8, ho1der=0x5ab3e550)
at external/webkit/Source/HebCore/editing/ReplaceSelectionCommand.
L621dd
297
removeNode (unrendered [11 1] :
$1 = 0x2
(gdb) p/x n
(gdb) x/2wt unrendered.m_buffer.m_buffer
0x6038d8b8: 0x5edbf6200x595078c0
可以看到有两个条目指向Node对象，分别是0x5edbf620和0x595078c0。查看这些Node
对象的内容就能知道它们的关联，尤其是第一个节点是否为第二个节点的父节点。
(gdb) p/x *(Node *)0x5edbf620
$2 = (
[. ..]
[..-]
m_parent = 0x5ab3e550
008L0565x0(. apoN).x/d (qp6)
[...1
$3 = (
n_parent = 0x5edbf620
[-.-]
(gdb)
答案是肯定的！可以到此为止了，但是为了确定这个结论，还需要继续跟踪这两个对象（直
到崩溃）来确保没有意外发生。
可以看到容器中的第二个条目有一个=_parent域已经被释放了。在dlfree处下一个断点。
这一次，让GDB显示通常的断点提示消息，然后让程序继续自动执行。
Breakpoint 2 at 0x401259e2: fi1e
(gdb) break dlfree thread 2
bionic/1ibc/bionic/../up8tream-dlmalloc/ma11oc.c,
Line 4711.
(gdb) conmands
Type conmands for breakpoint (s) 2, one per line.
>cont
---
## Page 220
204
第7章调试与分析安全漏洞
>end
Continuing.
(gdb)cont
Breakpoint 2, dlfree (men=0x595078c0) at
[ - - - ]
bionic/1ibc/bionic/ . /upstream-dlma11oc/mal1oc c:4711
Breakpoint 2, dlfree (mem=0x5edbf620) at
[...]
bionic/1ibc/bionic/ . /upatreamdlma11oe/ma11oc c:4711
可以再次看到这两个指针被释放。第一次调用释放了子节点，第二次调用释放了第一个节点。
接下来，原本在removeNode处的断点会被命中。
Breakpoint 1., WebCore::ReplacementFragment::removeNode (this=0x5ea004a8,
node=,.-)
at external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.
cpp:211
211
(gdb) p/x node
$4 = {
n_ptr = 0x595078c0
最后，确认传入removeNode的节点确实是已经释放的子节点。如果继续执行，就会有未
定义的行为发生，因为将对已经释放的对象进行操作。
所以这个间题的根源是removeNode和removeUnrenderedNodes函数在删除节点时遍历
了所有的子节点。那么应该如何修复这个问题呢？
修复这个漏洞的方式有很多。事实上，该漏洞已经被WebKit开发者修复，并且赋予编号
CVE-2011-2817。Android中还存在这个漏洞其实是个疏漏，可能是由于谷歌对于安全优先级定义
的差异造成的。WebKit开发者官方推出的补丁如下：
b/Source/WebCore/editing/ReplaceSelectionCommand.cpp
index d4b0897..8670dfb 100644
--- a/Source/webCore/editing/ReplaceSelectionCommand.cpp
88 292,7 +292, 7 09
void ReplacementFragment: :removeUnrenderediodes (Node* ho1der)
Vector unrendered;
Vector > unrendered;
for (Node* node = holder->firstChi1d(); node)
node - node->traverseNextNode(holder))
LE (1laNodeRendered(node) && 1iaTableStructureNode (node) )
上面的补丁修改了unrendered容器的声明，让它成为一个引用计数的指针，面不是之前
的原始指针。虽然这个修复可以避免释放后重用漏润，但是还有一种更加高效的方法。
traverseNextSibling函数实现了和traverseNextNode同样的行为，除了一个关键的差异：
---
## Page 221
7.10小结205
前者并不遍历子节点。因为子节点会在removeNode中删除，所以这个函数更加适用于这个情
形。这样unrendered容器就不会包含这些待删除的子节点，从面避免了释放后重用漏洞。
7.9.2判断漏洞可利用性
分析清楚漏洞产生的原因后，下一个目标是判断利用这个漏洞的难度。不管最终的目标是修
复它还是利用它，根据利用的难度来划分优先级都有利于资源的合理调配。容易利用的漏洞应当
比难以利用的漏洞有更高的优先级。
精确判断一个漏洞能否被利用非常困难、复杂，需要漫长的过程。根据漏润和程序的需求，
完成这项任务的时间可能从几分钟到几个月不等。当然，修复漏洞的团队可能不需要考虑这个任
务，他们要做的只是修复这个漏润。如果要给很多漏润排出优先级，挑选出最先修复的漏润，考
虑这一问题会比较稳妥。然面，漏洞利用的研究人员就没那么轻松了，他们必须完成这个任务。