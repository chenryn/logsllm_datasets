# 0x00 前言
总结师傅们笔记，主要源码分析。
# 0x01 代码覆盖率
代码覆盖率是fuzz中基本概念，先了解清这个概念后面的插装编译等概念才好理解。
代码覆盖率是一种度量代码的覆盖程度的方式，也就是指源代码中的某行代码是否已执行；对二进制程序，还可将此概念理解为汇编代码中的某条指令是否已执行。对fuzz来说，当然希望每句代码都能被检测到，覆盖率越高越好。
计量方式主要为三种： **函数** ， **基本块** ， **边界**
# 插桩
插桩是为了覆盖率而实行的方法。
## afl-gcc.c
afl-gcc是gcc的一个封装(wrapper)
主要三个功能
    find_as(argv[0]);                     //找到gcc/clang/llvm编译器
      edit_params(argc, argv);               //处理参数
      execvp(cc_params[0], (char**)cc_params);//执行
打印出`cc_params`,看看真正的参数是什么
    gcc -o test test.c -B /usr/local/lib/afl -g -O3 -funroll-loops -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1
看看参数的意思。用了编译优化，指定了编译的标志，最终要的是`-B`指定了 **编译器** (Assembler)
    -funroll-loops      执行循环强度消除并消除在循环内部使用的变量。这是用简单而快速的操作（如加法和减法）替代耗时操作（如乘法和除法）的过程
    -B             将  添加到编译器的搜索路径中
    #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION     /* a flag also shared with libfuzzer) or */
    #ifdef __AFL_COMPILER                             /* (this one is just for AFL). */
这一步正是汇编文件通过as进一步编译成二进制文件，这里替换了Assembler，当然为了插桩
## afl-as.c和afl-as.h
反汇编刚才生成的test,会发现插了一些插入了额外的汇编指令
这两个文件被单独提出来可以来解释这里是怎么操作的
> The sole purpose of this wrapper is to preprocess assembly files generated
> by GCC / clang and inject the instrumentation bits included from afl-as.h.
> It is automatically invoked by the toolchain when compiling programs using
> afl-gcc / afl-clang.
主要是处理不同平台设置标志，处理参数等等.重要函数`add_instrumentation`
fprintf将插桩用的汇编用`fprintf`插如合适的地方
    static  void  add_instrumentation（void）{
        ......
        while (fgets(line, MAX_LINE, inf)) {//读取每行
        ......
          fprintf(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,
                  R(MAP_SIZE));//插入，注意R(MAP_SIZE)
        ......
            //下面有意思是怎么判断合适的地方插入，选择分支，有兴趣自己看看
        }
    }
下面分别是32位和64位的，和调试看的一样
    static const u8* trampoline_fmt_32 =
      "\n"
      "/* --- AFL TRAMPOLINE (32-BIT) --- */\n"
      "\n"
      ".align 4\n"
      "\n"
      "leal -16(%%esp), %%esp\n"    //太高栈
      "movl %%edi,  0(%%esp)\n"     //保存寄存器
      "movl %%edx,  4(%%esp)\n"
      "movl %%ecx,  8(%%esp)\n"
      "movl %%eax, 12(%%esp)\n"
      "movl $0x%08x, %%ecx\n"       //保存随机数
      "call __afl_maybe_log\n"      //调用__afl_maybe_log
      "movl 12(%%esp), %%eax\n"
      "movl  8(%%esp), %%ecx\n"
      "movl  4(%%esp), %%edx\n"
      "movl  0(%%esp), %%edi\n"
      "leal 16(%%esp), %%esp\n"
      "\n"
      "/* --- END --- */\n"
      "\n";
    static const u8* trampoline_fmt_64 =
      "\n"
      "/* --- AFL TRAMPOLINE (64-BIT) --- */\n"
      "\n"
      ".align 4\n"
      "\n"
      "leaq -(128+24)(%%rsp), %%rsp\n"
      "movq %%rdx,  0(%%rsp)\n"
      "movq %%rcx,  8(%%rsp)\n"
      "movq %%rax, 16(%%rsp)\n"
      "movq $0x%08x, %%rcx\n"
      "call __afl_maybe_log\n"
      "movq 16(%%rsp), %%rax\n"
      "movq  8(%%rsp), %%rcx\n"
      "movq  0(%%rsp), %%rdx\n"
      "leaq (128+24)(%%rsp), %%rsp\n"
      "\n"
      "/* --- END --- */\n"
      "\n";
所以能看到，插桩是为了统计覆盖率。至于具体怎么实现，继续看后面
# fork service
这是一种为了不使用`execve()`函数提高效率想出来的办法，省掉动态链接等过程，在lcamtuf的[blog](https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html)上也有详细的介绍。
## afl-fuzz.c
    EXP_ST void init_forkserver(char** argv) {
      int st_pipe[2], ctl_pipe[2];//命令管道和状态管道
        ......
     execv(target_path, argv);   //执行fork server
    }
有两个重点
  * 怎么高效重复执行测试样例
  * 记录样例的状态
开始fork service确认创建完毕
    /* Close the unneeded endpoints. */
    //关闭不需要的通道
      close(ctl_pipe[0]);
      close(st_pipe[1]);
    //读取通道状态命令
      fsrv_ctl_fd = ctl_pipe[1];
      fsrv_st_fd  = st_pipe[0];
    ......
      rlen = read(fsrv_st_fd, &status, 4);//从状态通道读取4个字节
      /* If we have a four-byte "hello" message from the server, we're all set.
         Otherwise, try to figure out what went wrong. */
      if (rlen == 4) {//判断读取是否成功
        OKF("All right - fork server is up.");
        return;
      }
## __afl_maybe_log()
这里因为AFL自带的延时检测，所以没法调试看，这里只有看源码
这里先检测是否分配到公共内存，`__afl_area_ptr`里面就是地址，否则先调用`__afl_setup`初始化
    .text:0000000000000950                 lahf
    .text:0000000000000951                 seto    al
    .text:0000000000000954                 mov     rdx, cs:__afl_area_ptr
    .text:000000000000095B                 test    rdx, rdx
    .text:000000000000095E                 jz      short __afl_setup
## __afl_forkserver
写4个字节到状态管道`st_pipe[0]`，forkserver告诉fuzzer自己准备好了，而这正好是`rlen = read(fsrv_st_fd,
&status, 4);`中等待的信息