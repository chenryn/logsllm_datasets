example, the subtrees beneath C and D in Figure 3b are re-
dundant, a phenomenon called a ﬁrewall explosion in [18].
Figure 3. The (a.) Full Graph, (b.) Predictive
Graph, and (c.) Multiple-Prerequisite Graph
for the Example Network
Predictive graphs are also unable to model credentials.
A multiple-prerequisite (MP) graph for the simple net-
work is shown in Figure 3c. The MP graph has contentless
edges and three node types, discussed in Section 5.1.
It
explicitly represents the prerequisites of an attack. In this
example, the only prerequisite is reachability.
The MP graph’s cycles embed the information contained
in full and predictive graphs without the redundant struc-
ture. If no credentials are used, we can build a full graph
from the MP graph by exploring the MP graph in a depth-
ﬁrst manner, stopping the exploration when we reach a vul-
nerability instance already used on the path from the root
to the current node. Similarly, we can build a predictive
graph from the MP graph by exploring the MP graph in a
breadth-ﬁrst manner.
During graph construction, both predictive and full
graphs must attempt actions which are not shown on the
graph. The bottom node F of the full graph of Figure 3a, for
example, must explore (and then prune) every possible vul-
nerability that could be reached from host F. The MP graph
avoids this problem by evaluating a prerequisite, such as the
ability to reach hosts E and F, only once. Full and predictive
graphs must evaluate a prerequisite once for each state that
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006provides the prerequisite.
The MP graph also shows all hosts which can be compro-
mised from any host the attacker has compromised. Host F,
for example, is capable of compromising host E. The MP
graph shows this (via backedges), but the other graph types
do not. We can take advantage of this property to generate
“all sources, all targets” MP graphs, showing every mali-
cious action that could take place from any host or attacker
starting location to any host in the network. Because it con-
tains every potential attack path in the network, such a graph
could be useful to tools attempting to correlate IDS alerts
with known attack paths.
5.1 MP Attack Graph Structure
The maximum number of nodes in an MP graph is lin-
early related to the source data. There is at most one node
for each vulnerability instance, state, reachability group,
and credential. The maximum number of reachability
groups is proportional to the number of interfaces, but is
generally much smaller.
The MP graph uses the following three node types:
State nodes represent an attacker’s level of access on a
particular host. Outbound edges from state nodes point to
the prerequisites they are able to provide to an attacker. In
Figure 3c, state nodes are circles.
Prerequisite nodes represent either a reachability group
or a credential. Outbound edges from prerequisite nodes
point to the vulnerability instances that require the prereq-
uisite for successful exploitation. In Figure 3c, prerequisite
nodes are rectangles.
Vulnerability instance nodes represent a particular vul-
nerability on a speciﬁc port. Outbound edges from vul-
nerability instance nodes point
to the single state that
the attacker can reach by exploiting the vulnerability.
In
Figure 3c, vulnerability instance nodes are triangles.
These three node types in turn deﬁne the sole ordering
of paths in the graph: a state provides prerequisites, which
allow exploitation of vulnerability instances, which provide
more states to the attacker.
5.2 Data Structures
This section and Section 5.3 cover the process of con-
structing MP attack graphs. We ﬁrst examine the necessary
data and how it may be stored in memory. Section 5.3 will
then use these data to efﬁciently construct the MP graph.
The data we store and abbreviations for each are shown
in Table 1. Most of the input data can be stored in ar-
rays, and other dynamic structures can be immediately allo-
cated as arrays because their maximum size is tractable and
known. We use the notation “X2Y” to indicate a data struc-
ture where the key is of type X and the value or values are
Symbol Name
C
H
I
L
N
P
R
S
T
V
Credential
Host
Interface
Link
Node in the MP graph
Prerequisite (a reachability group or a credential)
Reachability group
State (host and access level)
Target port
Vulnerability instance
Table 1. Data Types Used During Graph Gen-
eration
of type Y. For example, P2N is a mapping from a prerequi-
site to the unique node in the attack graph representing it.
The only data structures we dynamically resize are T2R and
R2T, which represent the collapsed reachability matrix dis-
cussed in Section 4. Their worst-case size is O(T I), but the
actual size of O(T R) is much smaller in practice. A reach-
ability group is only formed and placed in R if the attacker
has gained access to it.
The graph’s nodes and edges also need to be represented.
The root nodes, representing the attacker’s starting loca-
tions, are kept in an array because their number is known
at the outset. (Root nodes are states, so they are also noted
in the S2N structure.) Pointers to all other nodes are kept
in V2N, P2N, and S2N, as well as in edge pointers between
nodes. All nodes maintain parent and child adjacency lists
in balanced search trees, making it easy to traverse the graph
and determine if a node has a speciﬁc parent or child.
5.3 Graph Construction
The graph is built using a breadth-ﬁrst technique. No
node is explored more than once, and a node only appears
on the graph if the attacker can successfully obtain it. The
pseudocode for the process is shown in Figure 4. With the
exception of line 4, all of the lines in the pseudocode are
straightforward. We will discuss line 4 in detail, based on
the type of node being considered.
• if CurNode is a state, then DestSet includes all cre-
dentials from S2C for that state. If the state’s access
level is user or root, indicating the attacker has access
to the system, then we add all reachability groups from
I2R for every interface on the state’s host.
• if CurNode is a prerequisite that is a reachability
group, then DestSet is initially every vulnerability
instance that the reachability group can reach. We use
R2T to determine all reachable ports, and then use
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20061 BFSQueue starts with the root node(s),
representing the attacker’s
starting STATE(s)
2 while( BFSQueue is nonempty )
CurNode = BFSQueue.dequeue()
3
4
DestSet = all nodes that can be
reached from CurNode
5
6
7
8
foreach node DestNode in DestSet
add an edge from CurNode to DestNode
if DestNode is brand-new,
BFSQueue.enqueue( DestNode)
Figure 4. Pseudocode for Main Loop
1 VulnInst = the vulnerability instance
we’re evaluating
2 DestPort = V2T(VulnInst)
3 if T2R(DestPort) is empty
4
return Failure // there is no known
// reachability to the port
5 foreach Cred in V2C(VulnInst)
6
7
if P2N(Cred) is empty
return Failure // there is an
// unavailable credential
Figure 5. Pseudocode for Vulnerability Pre-
requisite Veriﬁcation
T2V for each port to determine the vulnerability in-
stances. If there is not yet a node for a given vulnera-
bility (V2N(VulnInst) is empty), we must further ver-
ify that all the vulnerability’s prerequisites are satisﬁed
before adding them to DestSet. Figure 5 contains
the pseudocode for the veriﬁcation step.
• if CurNode is a prerequisite that is a credential, then
DestSet is initially every vulnerability in C2V for
the given credential. If there is not yet a node for a
given vulnerability, ie. V2N(VulnInst) is empty, we
must perform the same veriﬁcation step as in the pre-
vious case.
• if CurNode is a vulnerability instance,
then
DestSet is the single state in V2S for the given vul-
nerability instance.
The most intricate step is the addition of vulnerability
instance nodes. The attacker can successfully exploit a vul-
nerability if it can be reached from at least one host the
attacker has access to, and if the attacker has obtained all
credentials required by the vulnerability. The pseudocode
in Figure 5 checks to ensure the needed prerequisites are
present. If they are, we draw edges to the new vulnerabil-
ity instance node from all of the reachability groups able to
reach it and from all of the credentials used to satisfy it.
An upper bound for the graph’s computational complex-
ity can be obtained by observing that the maximum number
of nodes is ﬁxed. Assume a network with V vulnerability
instances, T ports, C credentials, I interfaces, and R reach-
ability groups. For simplicity, assume T < V . The most ex-
pensive operation is the transition from reachability group
prerequisites to vulnerability instances, costing O(V +V C)
time to check every reachable vulnerability and determine
if the credentials it requires are present. Over all possible
reachability groups, computation is O(V R+V RC). In typ-
ical networks where C is small and R (cid:2) I, performance
is nearly linear in the overall network size. The expected
worst-case performance is O(max(V, T )RC).
6 Automated Graph Analysis
Attack graphs for all but the smallest networks are too
large for hand evaluation. We have considered two ap-
proaches to this problem: automatic graph simpliﬁcation
and automatic recommendation generation. The former
aims to reduce the size of the graph by collapsing similar
nodes together. The latter treats the attack graph as an in-
termediate structure, not a ﬁnal product, and extracts useful
information from the graph for presentation to the user.
6.1 Graph Simpliﬁcation
Although an MP graph is much smaller than the corre-
sponding full graph, it is still large, and the number of cycles
makes it difﬁcult to lay out coherently. We have developed a
simple algorithm to “collapse” many graph nodes together,
simplifying the visual presentation.
First, state nodes are combined when the prerequisites
that can be used to reach them, the prerequisites provided
by them, and the access levels match. Vulnerability instance
nodes are then combined when the prerequisites necessary
to exploit them and the collapsed state nodes they provide
match. The resulting simpliﬁed graph shows the relation-
ships between prerequisites and the quantity of compromise
they enable. In Figure 3c, the states C and D would col-
lapse, followed by the vulnerability instances VC and VD.
The simpliﬁed MP graph can be efﬁciently derived from
the original MP graph. Each pass visits the N nodes and E
edges of the graph a constant number of times, and we sort
hashes of the matching criteria to discover matches. The
resulting complexity is O(E + N lg N). Other forms of
graph simpliﬁcation may also prove valuable.
6.2 Recommendation Algorithms
Even visually simpliﬁed attack graphs can be large and
unwieldy. The core information from the graph should be
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006To protect 116 hosts, patch
the following 4 vulnerabilities:
on Host server01.example.gov @ 10.90.0.2,
on Port 25/tcp:
CAN-2003-0161: The prescan() function in the ad ...
CVE-2002-0906: Buffer overflow in Sendmail befo ...
CAN-2002-1337: Buffer overflow in Sendmail 5.79 ...
on Port 53/tcp:
nessus11318: The remote BIND 9 server, accordin ...
Figure 8. Recommendation Excerpt for Field
Test Network
the four links shown and copies of the rulesets of the two
ﬁrewalls. The ﬁeld test results were computed on a laptop
with a Pentium-M 1.6Hz processor and 1GB of main mem-
ory, running a 2.6 Linux kernel. We have used anonymized
hostnames and IP addresses. During normal network op-
erations, a computer from the external network should be
able to reach server01.example.gov on the internal
network only via SMTP.
NetSPA’s Perl frontend converted the source data to
NetSPA’s internal binary format. The ﬁrewall rulesets and
Nessus scans were automatically read and interpreted. All
of the vulnerabilities were read and classiﬁed as in [17, 18].
The entire import stage required 24 seconds.
Once converted, the network is read into the C++ stage of
the prototype. This stage computes reachability, generates
the MP attack graph, computes automated recommenda-
tions, and creates the simpliﬁed MP attack graph. It writes
the two graphs to disk in the DOT language [3] and the rec-
ommendations as text. When the attacker is hypothesized
on the “external network” segment of the network, the en-
tire time for load, computation, and write was 0.5 seconds.
The resulting MP graph contains 8,901 nodes and 23,315
edges. A total of 12 ﬁltered and four unﬁltered reachability
groups were formed. In order to evaluate the sixteen po-
tential recommendations, the MP graph was rebuilt sixteen
times in the 0.5 second runtime.
The simpliﬁed MP attack graph, presented in Figure 7,
is still too complicated to read and interpret despite an over
99% reduction in size. The graph contains 80 nodes and 190
edges. The attacker’s starting location is in the upper right.
States are represented by black nodes, prerequisites by dark
grey nodes, and vulnerability instances by light gray nodes.
The list of eleven automatically generated recommenda-
tions is far more helpful. The recommendation that protects
the most hosts is shown in Figure 8.
We expected reachability to the SMTP server on
server01.example.gov from the external network,
but not to the DNS server. We used the NetSPA prototype
to automatically generate a complete list of every port an at-
tacker could reach and how an attacker could get there. We
discovered a misconﬁgured ﬁrewall rule that allowed exter-
Figure 6. Field Test Network
extracted by the tool and presented to the user in a more
immediately useful form.
Often an attacker must compromise a directly-accessible
host through a ﬁltering device in order to attack a group of
hosts behind the ﬁltering device. Attack graphs can be used
to identify these bottlenecks and produce a list of the critical
vulnerabilities which allow the attacker to compromise the
bottleneck hosts. Defenders can then patch these vulnera-
bilities ﬁrst to protect all of the hosts beyond the bottleneck.
We form recommendations by computing, for each in-
dividual prerequisite in the graph, which vulnerability in-
stances need to be removed in order to prevent the attacker
from reaching the prerequisite, and which states the attacker
cannot reach with the prerequisite absent. We accomplish
this by rebuilding the MP graph for each potential recom-
mendation, noting which vulnerability instances are actu-
ally necessary to reach the selected prerequisite and which
states are no longer achievable. Some prerequisites may
yield identical recommendations. We discard duplicates.
We weight recommendations based on the number of
hosts denied the attacker. A user could supply per-host “as-
set values” or weights to prioritize steps that protect critical
servers. Other weighting metrics, such as the ratio of pro-
tected hosts to required patches, may be preferable.
7 Test Results
We have applied NetSPA in one ﬁeld test deployment
and successfully discovered a misconﬁgured ﬁrewall. We
have also veriﬁed our scaling assumptions by testing against
simulated networks.
7.1 Field Test Results
We have tested our prototype on a small operational