title:Siren: Catching Evasive Malware (Short Paper)
author:Kevin Borders and
Xin Zhao and
Atul Prakash
Siren: Catching Evasive Malware (Short Paper)
Kevin Borders, Xin Zhao, Atul Prakash 
Department of EECS 
University of Michigan, Ann Arbor, MI 48109 
{kborders, zhaoxin, aprakash}@umich.edu 
Abstract 
With  the  growing  popularity  of  anomaly  detection 
systems,  which  is  due  partly to the  rise in  zero-day 
attacks,  a  new  class  of  threats  have  evolved  where 
the attacker mimics legitimate activity to blend in and 
avoid  detection.  We  propose  a  new  system  called 
Siren  that  injects  crafted  human  input  alongside 
legitimate  user  activity  to  thwart  these  mimicry 
attacks.  The  crafted  input  is  specially  designed  to 
trigger a known sequence of network requests, which 
Siren  compares  to  the  actual  traffic.  It  then  flags 
unexpected  messages  as  malicious.  Using 
this 
method, we were able to detect ten spyware programs 
that we tested, many of which attempt to blend in with 
user  activity.  This  paper  presents 
the  design, 
implementation, and evaluation of the Siren activity 
injection  system,  as  well  as  a  discussion  of  its 
potential limitations. 
1. Introduction 
Malicious  programs  that  send  out  information 
over  the  internet  are  a  major  threat  on  the  internet 
today.  In  a  recent  survey,  businesses  identified 
spyware  as their number  one  security  issue  [21].  In 
addition 
to  spyware,  many  organizations  are 
concerned  about  Trojan  or  backdoor  programs  that 
can hide on a computer and give remote access to an 
attacker,  potentially  as  part  of  a  botnet.  Stopping 
these different types of malicious software (malware) 
presents  a  significant  challenge  to  the  security 
community. 
One  of 
the  biggest  problems  for  security 
researchers trying to combat malicious software is the 
plethora of new threats that emerge every day [24]. 
Most  anti-spyware  and  anti-virus  solutions  rely 
primarily  on  signature  detection  to  identify  attacks. 
Signature  analysis  systems  are  inherently  reactive
instead of proactive. When a new attack occurs, there 
will always be a delay before a signature is released. 
Furthermore, stealthy attacks by skilled hackers that 
target only a few machines may never be identified; a 
signature  analysis  system  cannot  tell  you  that  you 
have a problem until it has been detected elsewhere 
through other means. 
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
To  address 
the  shortcomings  of  signature 
detection  solutions,  researchers  have  developed  a 
number of anomaly detection systems that focus  on 
abnormal behavior rather than specific attacks [2, 13, 
16,  20].  These  systems  are  much  more  effective  at 
uncovering  novel  threats,  but  can  be  evaded  by  a 
clever adversary by blending with normal traffic [18], 
mimicking normal  system  behavior  [19,  26,  28],  or 
emulating normal user activity patterns [2]. In some 
cases [18, 19], such attacks can even be automated. 
Efforts  have  been  made  to  deal  with  this  problem, 
mainly by increasing the complexity of the IDS [10], 
but  they  have  only  lead  to  more  sophisticated 
mimicry attacks [19]. We interpret the term “mimicry 
attack”  here  in  a  broad  sense,  where  the  attacker 
attempts  to  evade  an  anomaly  detection  system  by 
emulating normal behavior. The focus of this paper is 
on  detecting  malware  that  mimics  human  input  in 
particular, but the techniques presented here could be 
generalized to detect malware mimicking other types 
of system activity. 
In  this  paper,  we  present  Siren,  an  activity 
injection  system  that  collaborates  with  an  intrusion 
detection  system  to  catch  malicious  software.  Siren 
operates  by  injecting  human  input  with  the  help  of 
virtual machine technology. The input is designed to 
generate a known sequence of network requests that 
Siren  sends to  the  IDS. Then,  if  the  actual network 
traffic differs from  what is expected, the IDS raises 
an alarm. If a malicious program attempts to mimic 
or blend in with Siren activity, it will be detected by 
the  IDS.  A  diagram  of  this  process  can  be  seen  in 
Figure  1.  An  exception  here  is  traffic  to  sites  on  a 
white  list.  This  helps  mitigate  false  positives  from 
trusted programs such as Google Toolbar. 
If Siren is able to generate activity that cannot be 
differentiated  from  normal  usage  by  an  attacking 
program,  and  that  program  continues  to  emulate 
activity  over  time,  then  the  probability  of  the 
malware avoiding detection will decay exponentially 
over time. 
If  an  attacker  can  distinguish  between  real  and 
injected input, however, then he or she would be able 
to evade detection by Siren. One way of doing this is 
to  identify  real  user activity  through  an  out-of-band 
channel. An example would be calling a user on the 
phone  and 
to  enter  a 
instructing  him  or  her 
dating  back  to  800  B.C.  in  Sun  Tzu’s  “The  Art  of 
War” [27]. An overview  of the history of deception 
and  a  high-level  cognitive  model  for  deception  in 
security  is  described  in  [8].  In  computer  security, 
much  of  the  use  of  deception  has  been  limited  to 
attacks. Some examples include stepping stones [29] 
and  social  engineering  techniques  [22].  Specific 
examples  of  using  deception  to  defend  computer 
systems  include  the  early  work  by  Cheswick  on 
tracking  a  hacker  [3]  and  the  more  recent  work  on 
Honeypots and Honeytokens [14, 25]. Siren provides 
a  deeper  form  of  deception  at  a  different  level  of 
abstraction  (within  a  host)  that  is  useful  against  a 
class  of  security  threats  that  also  uses  deception: 
mimicry attacks. 
Input  injection  is  similar  to  the  practice  of 
injecting faults into systems, which has been used in 
the past for dependability analysis, e.g., see [6]. The 
goal  of  previous  fault  injection  methods  is to  test  a 
system’s capability to tolerate failures by artificially 
inducing  them.  In  contrast,  Siren’s  goal  is  to  inject 
input that is as close to normal activity as possible so 
that it cannot be distinguished by an attacker from a 
real user. 
2. Siren Design 
One possible way of detecting malware that tries 
to blend in with normal user web activity would be to 
monitor  web  content  coming  into  the  browser  and 
human input such as link clicks and typing in URLs. 
Then,  one  could  compare  the  resulting  network 
traffic with what is expected and raise an alarm if it 
differs. Although this method might be very effective 
and  would  not  require  input  injection,  it  would  be 
extremely difficult to implement. Determining what a 
web  browser  is  supposed  to  do  given  arbitrary 
keyboard  and  mouse  events  would  require  complex 
modeling of application behavior akin to running the 
input  on  a  separate  machine.  This  problem  is 
exacerbated  by  the  user’s  ability  to  copy  and  paste 
data into forms and upload files. Instead of trying to 
predict  what  network  traffic  should  result  from 
arbitrary  human  input,  Siren  takes  the  approach  of 
injecting  a  known  sequence  of  input  so  that  it  has 
control  over  form  data,  file  uploads,  and  other 
browsing activity. 
Siren  takes  advantage  of  virtual machine  (VM) 
technology to inject input and achieve isolation from 
the  guest  operating 
system,  which  may  be 
compromised  or  infected  with  malicious  software. 
Virtual machines have very useful security properties 
and  can  with  run  low  performance  overhead  [1]. 
They have been successfully used for inspecting the 
state of a guest OS without perturbing it [11], and for 
Figure 1. Siren input injection system
predetermined  sequence  of  input  that  triggers  a 
malware program. In general, these attacks are very 
difficult to prevent and Siren is unable to stop them. 
Gathering information out-of-band, however, is also 
difficult  because  it  is  often  time-consuming  and 
unreliable. 
Automatically  identifying  real  human  input  in 
software  presents  a  problem  similar  to  the  reverse 
Turing test, with a few differences. In reverse Turing 
tests, or CAPTCHAs [4, 7, 23], a computer tries to 
distinguish  between  a  machine  and  a  human  by 
presenting a challenge problem to the person that he 
or  she  can  easily  solve,  but  computer  cannot.  With 
Siren, an attacking program could freely send traffic 
if it were able to give a reverse Turing test to the user 
and the user passes the test. Directly interacting with 
the user, however, will raise suspicion. The attacking 
program  will  have  to  differentiate  between  human 
and  computer  activity  through  passive  monitoring. 
For this reason, we describe the task of the attacking 
program  as  a  passive  reverse  Turing  test.  To 
completely  escape  detection,  malicious  software 
would need to perform such a test with a very high 
level of accuracy. 
One  of  the  main  challenges  identified  in  this 
paper is designing an input injection method that can 
fool  malware  and  prevent  it  from  being  able  to 
execute  a  passive  reverse  Turing  test.  This  is 
currently  an  open  problem.  For  our  evaluation,  we 
currently  inject  a  predetermined  input  sequence  and 
evaluate  results  by  hand.  Later  in  section  4,  we 
present  a  number  of  potential  approaches  for 
automatically  generating  human  input,  as  well  as 
weaknesses of each method.  
Siren  is  not  the  first  system  that  relies  on 
deceiving  the  enemy.  The  notion  of  deception  and 
information warfare can be found in historic literature 
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Table 1.  Evaluation results for ten different 
types of spyware 
Spyware Name  Communicated 
without input? 
Detected  by 
Web Tap 
Detected 
by Siren 
AzeSearch 
Bargain Buddy 
CoolWebSearch 
eXactSearch Bar 
Gator 
Get Mirar 
Internet 
Optimizer 
ISTBar 
Target Saver 
UCmore 
X 