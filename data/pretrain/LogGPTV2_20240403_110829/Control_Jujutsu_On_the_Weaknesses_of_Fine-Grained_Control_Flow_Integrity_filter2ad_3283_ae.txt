# Figure 10: `bucket_brigade_destroy` Macro Definition in APR-util

```c
result = xfr->stream->methods->next(xfr->stream);
```

# Figure 11: Example Call from BIND `xfrout.c`

## Security Implications of RTC

"Data flow" and "control flow" attacks present significant challenges, even for static analysis, let alone Control Flow Integrity (CFI).

### 6.3.2 Function Signature Analysis

Even with a correct, compatible, and performant type-checking runtime, in-graph control flow attacks remain possible due to many program functions having the same signature. To evaluate the extent of this flexibility, we developed a tool using the `libclang` library from Clang 3.6.0 to identify function signatures and indirect call signatures. We ran this tool on several popular server-side applications, reporting the number of matching function signatures for indirect call sites and function declarations. The numbers include functions from standard libraries and application libraries, as these are potential targets.

| Application | Unique Function Names | Unique Function Signatures | Indirect Call Signatures | Aliased Signatures | Aliased Functions |
|-------------|-----------------------|----------------------------|-------------------------|--------------------|-------------------|
| HTTPD + APR | 9158                  | 5307                       | 117                     | 81                 | 553               |
| BIND        | 10125                 | 5729                       | 135                     | 27                 | 328               |
| vsftpd      | 1421                  | 730                        | 5                       | 5                  | 68                |
| Nginx       | 2344                  | 1135                       | 3                       | 2                  | 119               |

**Table 8: Matching ICS & Function Signatures**

The versions of the applications in Table 8 are:
- Apache HTTPD 2.4.12
- APR 1.5.1
- BIND 9.10.2
- vsftpd 3.0.2
- Nginx 1.7.11

The number of unique aliased signatures refers to the number of signatures that match both an indirect call and a function declaration. This number should be at least equal to the number of indirect call sites in the program. The last entry, the number of unique aliased functions, refers to the total number of functions that could be potential targets of these indirect call sites. If at least one Argument Corruptible Indirect Call Site (ACICS) can be found for each aliased signature, the number of aliased functions is the number of functions that can be targeted while staying within the type system. Without programmer annotations, the true number of unintentionally aliased pairs cannot be determined.

Many pairings have few call sites but many target functions. For example, in BIND, the signature `void()` matches 3 indirect calls and 252 target functions. In Apache, the signature `void (apr_pool_t *, void *, void *)` matches 2 indirect calls and 59 target functions, and `apr_status_t(void *)` matches 3 indirect call sites and 93 target functions. Even the relatively small vsftpd has 48 matches for its one indirect call with `void()`, and 11 for its one call with signature `void(void *)`.

The principled solution to reducing this problem entirely would be explicit programmer annotations for any aliasing function signature. However, the effort required to annotate all programs at this level of detail would be immense.

## 7. Related Work

### Control Flow Bending (CFB)

Control Flow Bending [13] independently and concurrently with our work, demonstrates attacks against fine-grained CFI. CFB introduces the notion of printf-oriented programming, a form of ACICS gadgets, which can be used to perform Turing-complete computation. CFB assumes a fully-precise CFG, which we show is undecidable. CFB relies on manual analysis for attack construction and is only able to achieve remote code execution in one of their six benchmarks. In contrast, Control Jujutsu introduces a framework (policies and tools) that enable automatic attack construction. Both CFB and Control Jujutsu demonstrate that attacks against fine-grained CFI are possible in theory and practice.

### Out of Control

The "Out of Control" work by Göktas et al. [20] shows that coarse-grained implementations of CFI (with 2 or 3 tags) can be bypassed. In contrast, we show that even the fine-grained implementation of CFI with an unlimited number of tags and a shadow stack using state-of-the-art context- and field-sensitive static analysis is bypassable by a motivated attacker. By studying the inherent limitations of scalable static analysis techniques, we show that attacks such as Control Jujutsu are hard to prevent using CFI.

### Counterfeit Object-Oriented Programming (COOP)

COOP [44] is another recent attack on modern CFI defenses. COOP focuses exclusively on C++ by showing that protecting v-table pointers in large C++ programs is insufficient. Their work, like ours, highlights certain design patterns common in sufficiently large or complex applications that are not accounted for in the design of CFI defenses. There may be some extensions of the COOP approach to C programs, particularly those making heavy use of the patterns we described earlier; we leave this exploration to future work.

### Fine-Grained CFI Techniques

A number of recent fine-grained CFI techniques have been proposed in the literature. Forward-edge CFI [53] enforces fine-grained CFI on forward-edge control transfers (i.e., indirect calls, but not returns). Cryptographically enforced CFI [32] adds message authentication code (MAC) to control flow elements, preventing the usage of unintended control transfers in the CFG. Opaque CFI (OCFI) [34] transforms the problem of branch target check to bounds checking, preventing attacks on unintended CFG edges by applying code randomization. The authors of OCFI mention that it achieves resilience against information leakage (a.k.a. memory disclosure) attacks [45, 50] because the attacker can only learn about intended edges in such attacks, and not the unintended ones. Our attack shows that just the intended edges are enough for a successful attack.

### Coarse-Grained CFI Efforts

Coarse-grained CFI efforts include the original CFI implementation [4], CCFIR [59], and Bin-CFI [60], all of which are bypassed by the "Out of Control" attack.

### Software Fault Isolation (SFI) and SFI-like Techniques

SFI and SFI-like techniques also implement CFI at various granularities. Examples include Native Client [8, 58], XFI [18], and WIT [5].

### Other Defenses

Other randomization-based [25, 26, 55] and enforcement-based defenses [9, 56] against memory corruption attacks have been proposed and studied in the literature. Due to space limitations, we do not discuss them in detail here. Interested readers can refer to the surveys in the literature for a list of these defenses [37, 51].

## 8. Conclusion

We present a new attack, Control Jujutsu, that exploits the imprecision of scalable pointer analysis to bypass fine-grained enforcement of CFI (forward and backward edge). The attack uses a new "gadget" class, Argument Corruptible Indirect Call Site (ACICS), that can hijack control flow to achieve remote code execution while still respecting control flow graphs generated using context- and field-sensitive pointer analysis.

We show that preventing Control Jujutsu by using more precise pointer analysis algorithms is difficult for real-world applications. Code design patterns for standard software engineering practices such as extensibility, maintainability, and modularity make precise CFG construction challenging. Our results provide additional evidence that techniques that trade off memory safety (security) for performance are vulnerable to motivated attackers. This highlights the need for fundamental memory protection techniques such as complete memory safety and indicates that the true cost of memory protection is higher than what is typically perceived.

## 9. Acknowledgements

We thank the anonymous reviewers for their helpful feedback and our shepherd Hovav Shacham for his help with the camera-ready version of the paper. We also thank Deokhwan Kim and Vladimir Kiriansky for their feedback and suggestions for improving this paper. This research was supported by DARPA (Grant FA8650-11-C-7192).

## 10. References

[1] Apache Portable Runtime Project. https://apr.apache.org/.
[2] Clang. http://clang.llvm.org/.
[3] The LLVM Compiler Infrastructure. http://llvm.org/.
[4] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. Control-flow integrity. In Proc. of ACM CCS (2005).
[5] AKRITIDIS, P., CADAR, C., RAICIU, C., COSTA, M., AND CASTRO, M. Preventing memory error exploits with WIT. In Proc. of IEEE S&P (2008).
[6] ANDERSEN, L. O. Program analysis and specialization for the C programming language. Tech. rep., 1994.
[7] ANDERSON, J. P. Computer security technology planning study. Volume 2. Tech. rep., DTIC Document, 1972.
[8] ANSEL, J., MARCHENKO, P., ERLINGSSON, Ú., TAYLOR, E., CHEN, B., SCHUFF, D. L., SEHR, D., BIFFLE, C. L., AND YEE, B. Language-independent sandboxing of just-in-time compilation and self-modifying code.
[9] BACKES, M., HOLZ, T., KOLLENDA, B., KOPPE, P., NÜRNBERGER, S., AND PEWNY, J. You can run but you can’t read: Preventing disclosure exploits in executable code. In Proc. of ACM CCS (2014).
[10] BITTAU, A., BELAY, A., MASHTIZADEH, A., MAZIERES, D., AND BONEH, D. Hacking blind. In Proc. of IEEE S&P (2014).
[11] BLETSCH, T., JIANG, X., FREEH, V., AND LIANG, Z. Jump-oriented programming: A new class of code-reuse attack. In Proc. of ACM CCS (2011).
[12] BURROWS, M., FREUND, S. N., AND WIENER, J. L. Run-time type checking for binary programs. In Proc. of the CC (2003).
[13] CARLINI, N., BARRESI, A., PAYER, M., WAGNER, D., AND GROSS, T. R. Control-flow bending: On the effectiveness of control-flow integrity. In USENIX Security (2015).
[14] CARLINI, N., AND WAGNER, D. Rop is still dangerous: Breaking modern defenses. In USENIX Security Symposium (2014).
[15] CHEN, X., CASELDEN, D., AND SCOTT, M. New zero-day exploit targeting Internet Explorer versions 9 through 11 identified in targeted attacks, 2014.
[16] CHISNALL, D., ROTHWELL, C., WATSON, R. N., WOODRUFF, J., VADERA, M., MOORE, S. W., ROE, M., DAVIS, B., AND NEUMANN, P. G. Beyond the PDP-11: Architectural support for a memory-safe C abstract machine. SIGPLAN Not. (2015).
[17] COWAN, C., BEATTIE, S., DAY, R. F., PU, C., WAGLE, P., AND WALTHINSEN, E. Protecting systems from stack smashing attacks with StackGuard. In Linux Expo (1999), Citeseer.
[18] ERLINGSSON, U., ABADI, M., VRABLE, M., BUDIU, M., AND NECULA, G. C. XFI: Software guards for system address spaces. In Proc. of the OSDI (2006).
[19] EVANS, I., FINGERET, S., GONZÁLEZ, J., OTGONBAATAR, U., TANG, T., SHROBE, H., SIDIROGLOU-DOUSKOS, S., RINARD, M., AND OKHRAVI, H. Missing the point(er): On the effectiveness of code pointer integrity. In Proc. of IEEE S&P (2015).
[20] GÖKTAS, E., ATHANASOPOULOS, E., BOS, H., AND PORTOKALIDIS, G. Out of control: Overcoming control-flow integrity. In Proc. of IEEE S&P (2014).
[21] HARDEKOPF, B., AND LIN, C. Semi-sparse flow-sensitive pointer analysis. In Proc. of POPL (2009).
[22] HASTI, R., AND HORWITZ, S. Using static single assignment form to improve flow-insensitive pointer analysis. In Proc. of PLDI (1998).
[23] HIND, M. Pointer analysis: Haven’t we solved this problem yet? In Proc. of PASTE (2001).
[24] HIND, M., BURKE, M., CARINI, P., AND CHOI, J.-D. Interprocedural pointer alias analysis. ACM Trans. Program. Lang. Syst. (1999).
[25] HISER, J., NGUYEN, A., CO, M., HALL, M., AND DAVIDSON, J. ILR: Where’d my gadgets go. In Proc. of IEEE S&P (2012).
[26] HOMESCU, A., BRUNTHALER, S., LARSEN, P., AND FRANZ, M. Librando: Transparent code randomization for just-in-time compilers. In Proc. of ACM CCS (2013).
[27] INTEL. Introduction to Intel Memory Protection Extensions, 2013.
[28] JIM, T., MORRISETT, J. G., GROSSMAN, D., HICKS, M. W., CHENEY, J., AND WANG, Y. Cyclone: A safe dialect of C. In USENIX Technical Conference (2002).
[29] KUZNETSOV, V., SZEKERES, L., PAYER, M., CANDEA, G., SEKAR, R., AND SONG, D. Code-pointer integrity.
[30] KWON, A., DHAWAN, U., SMITH, J., KNIGHT, T., AND DEHON, A. Low-fat pointers: Compact encoding and efficient gate-level implementation of fat pointers for spatial safety and capability-based security. In Proc. of ACM CCS (2013).
[31] LATTNER, C., LENHARTH, A., AND ADVE, V. Making context-sensitive points-to analysis with heap cloning practical for the real world. In Proc. of PLDI (2007).
[32] MASHTIZADEH, A. J., BITTAU, A., MAZIERES, D., AND BONEH, D. Cryptographically enforced control flow integrity.
[33] MICROSOFT. A detailed description of the Data Execution Prevention (DEP) feature in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005, and Windows Server 2003. Online, September 2006.
[34] MOHAN, V., LARSEN, P., BRUNTHALER, S., HAMLEN, K., AND FRANZ, M. Opaque control-flow integrity. In Proc. of NDSS (2015).
[35] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND ZDANCEWIC, S. CETS: Compiler enforced temporal safety for C. In ACM Sigplan Notices (2010).
[36] NECULA, G. C., MCPEAK, S., AND WEIMER, W. Ccured: Type-safe retrofitting of legacy code. ACM SIGPLAN Notices 37, 1 (2002), 128–139.
[37] OKHRAVI, H., HOBSON, T., BIGELOW, D., AND STREILEIN, W. Finding focus in the blur of moving-target techniques. IEEE Security & Privacy 12, 2 (Mar 2014).
[38] ONE, A. Smashing the stack for fun and profit. Phrack magazine 7, 49 (1996), 14–16.
[39] OPENBSD. OpenBSD 3.3, 2003.
[40] PEARCE, D. J., KELLY, P. H., AND HANKIN, C. Efficient field-sensitive pointer analysis of C. ACM Trans. Program. Lang. Syst. 30, 1 (Nov. 2007).
[41] RAMALINGAM, G. The undecidability of aliasing. ACM Trans. Program. Lang. Syst. 16, 5 (Sept. 1994), 1467–1471.
[42] REPS, T. Undecidability of context-sensitive data-dependence analysis. ACM Trans. Program. Lang. Syst. 22, 1 (Jan. 2000), 162–186.
[43] RUGINA, R., AND RINARD, M. Pointer analysis for multithreaded programs. In Proc. of PLDI (1999).
[44] SCHUSTER, F., TENDYCK, T., LIEBCHEN, C., DAVI, L., SADEGHI, A.-R., AND HOLZ, T. Counterfeit object-oriented programming. In Proc. of IEEE S&P (2015).
[45] SEIBERT, J., OKHRAVI, H., AND SODERSTROM, E. Information Leaks Without Memory Disclosures: Remote Side Channel Attacks on Diversified Code. In Proc. of ACM CCS (2014).
[46] SEREBRYANY, K., BRUENING, D., POTAPENKO, A., AND VYUKOV, D. AddressSanitizer: A fast address sanity checker. In USENIX Technical Conference (2012).
[47] SHACHAM, H. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proc. of ACM CCS (2007).
[48] SNOW, K. Z., MONROSE, F., DAVI, L., DMITRIENKO, A., LIEBCHEN, C., AND SADEGHI, A.-R. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In Proc. of IEEE S&P (2013).
[49] SRIDHARAN, M., AND BODÍK, R. Refinement-based context-sensitive points-to analysis for Java. In Proc. of PLDI.
[50] STRACKX, R., YOUNAN, Y., PHILIPPAERTS, P., PIESSENS, F., LACHMUND, S., AND WALTER, T. Breaking the memory secrecy assumption. In Proc. of EuroSec (2009).
[51] SZEKERES, L., PAYER, M., WEI, T., AND SONG, D. SOK: Eternal war in memory. In Proc. of IEEE S&P (2013).
[52] THE PAX TEAM. Address Space Layout Randomization. http://pax.grsecurity.net/docs/aslr.txt.
[53] TICE, C., ROEDER, T., COLLINGBOURNE, P., CHECKOWAY, S., ERLINGSSON, Ú., LOZANO, L., AND PIKE, G. Enforcing forward-edge control-flow integrity in GCC & LLVM. In USENIX Security Symposium (2014).
[54] TRAN, M., ETHERIDGE, M., BLETSCH, T., JIANG, X., FREEH, V., AND NING, P. On the expressiveness of return-into-libc attacks. In Proc. of RAID’11 (2011).
[55] WARTELL, R., MOHAN, V., HAMLEN, K. W., AND LIN, Z. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In Proc. of ACM CCS (2012).
[56] WATSON, R. N., WOODRUFF, J., NEUMANN, P. G., MOORE, S. W., ANDERSON, J., CHISNALL, D., DAVE, N.,