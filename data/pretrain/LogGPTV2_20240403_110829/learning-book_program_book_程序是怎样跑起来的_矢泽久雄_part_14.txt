可用空间
5T，节
1. 20 0
图5-10仅有1个文字也会占用1额（512字节）
以簇为单位进行读写时，1簇中没有填满的区域会保持不被使用的
状态。虽然这看起来是有点浪费，不过该机制就是如此规定的，所以
我们也没有什么好办法。另外，如果减少簇的容量，磁盘访问次数就会
增加，就会导致读写文件的时间变长。由于在磁盘表面上，表示扇区区
分的领域是必要的，因此，如果簇的容量过小，磁盘的整体容量也会减
少。扇区和簇的大小，是由处理速度和存储容量的平衡来决定的。
阅读本章后，关于内存和磁盘的亲密关系，大家应该都清楚了吧。
虽然现在计算机中的内存和磁盘容量变得越来越大，不过还是要有节
约的精神。一个优秀的程序，不仅要运行速度快，还要小。因此，程
序员要时刻注意尽量让程序小一些。
下一章，我们将会介绍图像文件的数据形式及文件的压缩机制。
---
## Page 111
9
第
章
亲自尝试压缩数据
热身问答
阅读正文前，让我们先回答下面的问题来热热身吧。
1.文件储存的基本单位是什么？
2.DOC、LZH和TXT这些扩展名中，一个是压缩文件的扩
展名？
3.文件内容用“数据的值×循环次数”来表示的压缩方法是
RLE算法还是哈夫曼算法？
4.在Windows计算机经常使用的SHIFTJIS字符编码中，1
个半角英数是用几个字节的数据来表示的？
5.BMP（BITMAP）格式的图像文件，是压缩过的吗？
6.可逆压缩和非可逆压缩的不同点是什么？
更多资料请关注裁的新浪体客t
---
## Page 112
6章亲自尝试压维数据
怎么样？是不是发现有一些问题无法简单地解释清楚呢？下面
是笔者的答案和解析，供大家参考。
1.1字节（=8位）
2. LZH
3.RLE算法
4.1字节（=8位）
5.没有压缩过
6.压缩后的数据能复原的是可逆压缩，无法复原的是非可逆压缩
1.文件是字节数据的集合体。
2.LZH是用LHA等工具压缩过的文件的扩展名。
3.例如，AAABB这个数据压缩后就是A3B2。
4.半角英文数字是用1个字节来表示的，汉字等全角字符是用两
个字节来表示的。
5.因为BMP格式的图像文件是没有被压缩的，因此要比JPEG格
式等压缩过的图像文件大不少。
6.像照片（JPEG格式）这样，之所以压缩后也不会让人感到不自
然，就是因为使用了非可逆压缩。
---
## Page 113
6.1文件以字节为单位保存
本章
重点
前几章的内容可能有些难，而本章我们就可以端
口气喝喝茶了，请大家放松心情来阅读。本章的主题
是文件的压缩。
各位读者想必都使用过压缩文件吧。压缩文件的扩展名有LZH和
ZIP等。比如，文件太大无法放入软盘保存时，或将大附件添加到电
子邮箱时，相信大家都会采用压缩文件的方法。此外，当我们把数码
相机拍摄的照片保存到计算机上时，可能也会在不知不觉中使用JPEG
等压缩格式。那么，为什么文件可以压缩呢？想想真是不可思议。接
下来就让我们一起来看看文件的压缩机制吧。
6.1
文件以字节为单位保存
在解说文件的压缩机制之前，我们首先来了解一下保存在文件中
的数据形式。文件是将数据存储在磁盘等存储媒介中的一种形式。程序
文件中存储数据的单位是字节。文件的大小之所以用×xKB、××MB
等来表示，就是因为文件是以字节（B-Byte）为单位来存储的°。
文件就是字节数据的集合。用1字节（=8位）表示的字节数据有
256种，用二进制数来表示的话，其范围就是00000000~11111111。如
果文件中存储的数据是文字，那么该文件就是文本文件。如果是图形，
①LZH是用LHA等工具压缩过的文件的扩展名。该压缩格式有时也称为
LZH格式。
②ZIP是用PKZIP等工具压缩过的文件的扩最名。该压缩格式有时也称为
ZIP格式。
正如本书第5章所述，从物理上对确盘进行读写时是以扇区（512字节）为
单位的。但另一方面，程序则可以在逻辑上以字节为单位对文件的内容进
行读写。
更多资料请关注裁的新浪薄客http：//blor
---
## Page 114
第6章亲自尝试压缩数据
那么该文件就是图像文件。在任何情况下，文件中的字节数据都是连
续存储的，大家一定要认识到这一点（图6-1）。
文本文件
字节数据的集合
实际上
0101011000110
你好。
最近好吗？
1100101101010011
感谢您阅读本书
图像文件
字节数据的集合
买际上
1001110100001101
0101101100000011
0101001111010101
图6-1文件是字节数据的集合体
6.2RLE算法的机制
接下来就让我们正式看一下文件的压缩机制。首先让我们来尝试
一下对存储着AAAAAABBCDDEEEEEF这17个半角字符的文件（文
本文件）进行压缩。虽然这些文字没有什么实际意义，但是很适合用来
解说RLE算法的压缩机制。
由于半角字母中，1个字符是作为1个字节的数据被保存在文件中
的。因此上述文件的大小就是17个字节。那么如何才能压缩该文件
呢？大家也不妨考虑一下。只要能使文件小于17字节，我们可以使用
任何压缩方法。
这时，大家是不是会采取将文件的内容用字符×重复次数”这
样的表现方式来压缩呢。确实，在观察AAAAAABBCDDEEEEEF这个
100
---
## Page 115
6.3RLE算法的缺点
数据后，不难看出有不少字符是重复出现的。在字符后面加上重复
出现次数，AAAAAABBCDDEEEEEF就可以用A6B2C1D2E5F1来
表示。A6B2C1D2E5F1是12个字符也就是12字节，因此结果就将原
文件压缩了12字节+17字节=70%。恭喜你，压缩成功了！
像这样，把文件内容用“数据×重复次数”的形式来表示的压缩方
法称为RLE（RunLength Encoding，行程长度编码）算法（图6-2）。RLE
算法是一种很好的压缩方法，经常被用于压缩传真的图像等。因为图
像文件本质上也是字节数据的集合体，所以可以用RLE算法来压缩。
压始前的文件
压缩后的文件
AAAAAABBCDDEE
压
EEEF
A6B2C1D2E5F1
17个文字（17字节）
12个文字（12字节）
围6-2通过数据的重复次数来实现压缩的RLE算法
6.3
RLE算法的缺点
然面，在实际的文本文件中，同样字符多次重复出现的情况并不
多见。虽然针对相同数据经常连续出现的图像、文件等，RLE算法可
以发挥不错的效果，但它并不适合文本文件的压缩。不过，因为该压
①RLE算法经常被用于传真FAX等。G3类传真机是把文宇和图形都作为置
白图像来发通的。由于累白图像的数据中，白或黑通索是部分连续的，因
此就没有必要再发进这部分数据的值（白或者黑），而只需附带上重复次数
即可，这样压缩效率就得到了大幅提升。例如，像白色部分重复5次，累
色部分重复7次，白色部分重复4次，黑色部分重复6次这样的部分图像，
就可以用5746这样的重复次数数字来进行压缩。
更多资料请关注我的新浪博客http：//blog
---
## Page 116
第6章亲自尝试压维数据
缩机制非常简单，因此使用RLE算法的程序也相对更容易编写。笔者
曾用自己做成的RLE算法压缩程序对各种类型的文件进行过压缩，其
结果如表6-1所示。
表6-1借助RLE算法对各文件进行压维的结果
文件类型
压维前文件大小
压维后文件大小
压缩比率
文本文件
14862字节
29506字节
199%
图像文件
96062字节
38328字节
40%
EXE文件
24576字节
15198字节
62%
通过表6-1可以看出，使用RLE算法对文本文件进行压缩后，文
件却增大了，而且几乎是压缩前的2倍。这是因为文本文件中同样字
符连续出现的部分并不多。以存储着“Thisisapen.”这14个字符的文本
文件为例，使用RLE算法对其进行压缩后，就变成了“Tlhlilsllilsl
lalIplelnl.1"这样的28个字符，是压缩前的2倍。由于文章中字符大
量连续出现的情况并不多见，因此，使用RLE算法后，大部分字符后面
都会加上1，这样一来，压缩后的文件自然变成了之前的2倍。
与文本文件不同，图像文件的压缩比率达到了40%。程序的EXE
文件的压缩比率也达到了60%，这是因为EXE文件中连续的数据部
分，其初始值为0的情况很多。
此外，我们也可以在RLE算法的基础上再下点功夫，不以1个字
符为单位，而以字符串为单位来查找重复次数。例如，Thisisapen.
中，is重复了两次。通过利用这个压缩技巧，压缩后的文件也能小一
些。由此可见，压缩技巧的拙劣是由所花的功夫决定的。
①压端后同压缩前文件大小的比率，称为压缩比率或压缩比
---
## Page 117
6.4通过莫尔斯编码来看哈夫曼算法的基础
6.4通过莫尔斯编码来看哈夫曼算法的基础
压缩技巧实际上有很多种。接下来，我们就来看一下本章要介绍
的第二个压缩技巧，即哈夫曼算法。哈夫曼算法是哈夫曼
（D.A.Huffman）于1952年提出来的压缩算法。日本人比较常用的压缩
软件LHA，使用的就是哈夫曼算法。
为了更好地理解哈夫曼算法，首先大家要抛弃掉“半角英文数字的
1个字符是1个字节（8位）的数据”这一概念。文本文件是由不同类
型的字符组合面成的，而且不同的字符出现的次数也是不同的。例
如，在某一个文本文件中，A出现了100次左右，Q仅用到了3次，
类似这样的情况是很常见的。而哈夫曼算法的关键就在于“多次出现
的数据用小于8位的字节数来表示，不常用的数据则可以用超过8位
的字节数来表示”。A和Q都用8位来表示时，原文件的大小就是
100次×8位+3次×8位=824位，而假设A用2位、Q用10位来
表示，压缩后的大小就是100次×2位+3次×10位=230位。
不过有一点需要注意，不管是不满8位的数据，还是超过8位的
数据，最终都要以8位为单位保存到文件中。这是因为磁盘是以字
节（8位）为单位来保存数据的（图6-3）。为了实现这一处理，压缩
程序的内容会复杂很多，不过作为回报，最终得到的压缩率也是相
当高的。
下面让我们把当前的话题暂时放下，为了更好地理解哈夫曼算法，先
来看一下莫尔斯编码。莫尔斯编码是1837年莫尔斯（SamuelF.B.Morse）
提出的。莫尔斯编码不是通过语言，面是通过“嗒嘀嗒嘀”这些长点
①LHA是吉崎荣泰开发的一款免费压缩款件。
---
## Page 118
第6章亲自套试压缩数据
和短点的组合来传递文本信息的。想必大家在电影中也都看到过发送
莫尔斯电码的设备。
2位
2位
5位
4位
3位
01
11
10101
1001
101
数据
01
11
1010
1001
101
以8位为单位
保存在文件中
8位
8位
图6-3非8位数据的读写
接下来我们就来仔细讲解一下莫尔斯编码。对数字领域比较熟悉
的读者可能会认为“莫尔斯编码的短点是0，长点是1，其中1个字符
用8位来表示”，但实际上，根据字符种类的不同，莫尔斯电码符号的
长度也是不同的。表6-2是莫尔斯编码的示例。大家把1看作是短点
（嘀），把11看作是长点（嗒）即可。
表6-2莫尔斯编码和位长
字特
对应的位数
位卡