[INFO]004009a8                lw r2, [r30+0x18] 
[INFO]004009ac                  subu r2, r3, r2     // r2 = buflen - r18
[INFO]004009b0                      move r5, r2     // r5 = r2
[INFO]004009b4                     jal 0x400858     // call blue()
========
Basic block #14
[INFO]004009bc                    move r29, r30     // exit func
[INFO]004009c0               lw r31, [r29+0x2c]     // r31 = r29[0x2c]
[INFO]004009c4               lw r30, [r29+0x28]     // r39 = r29[0x28]
[INFO]004009c8             addiu r29, r29, 0x30     // r29 += 0x30
[INFO]004009cc                           jr r31     // ret
========
// main()
Basic block #15
[INFO]004009d4       addiu r29, r29, 0xfffffec8 
[INFO]004009d8              sw r31, [r29+0x134] 
[INFO]004009dc              sw r30, [r29+0x130] 
[INFO]004009e0                    move r30, r29 
[INFO]004009e4                    lui r28, 0x42 
[INFO]004009e8       addiu r28, r28, 0xffff8eb0 
[INFO]004009ec               sw r28, [r29+0x10]
[INFO]004009f0                     lui r2, 0x41 
[INFO]004009f4                lw r2, [r2+0xea0] 
[INFO]004009f8                      move r4, r2     // r4 = FLAG 
[INFO]004009fc                     jal 0x400770     // strlen(FLAG)
[INFO]00400a00                      move r1, r1 
========
Basic block #16
[INFO]00400a04               lw r28, [r30+0x10]     // r28 = r30[0x10]
[INFO]00400a08                sw r2, [r30+0x2c]     // r30[0x2c] = r2 (result of strlen)
[INFO]00400a0c                sw r0, [r30+0x18]     // r30[0x18] = 0
[INFO]00400a10                       j 0x400a4c 
[INFO]00400a14                      move r1, r1 
========
Basic block #17 - compute something funny, looks like abcdefghi... array
[INFO]00400a18                lw r2, [r30+0x18]     // r2 = r30[0x18] 
[INFO]00400a1c                andi r2, r2, 0xff     // r2 &= 0xFF
[INFO]00400a20               addiu r2, r2, 0x61     // r2 += 0x61   # += 'a'
[INFO]00400a24                andi r2, r2, 0xff     // r2 &= 0xFF
[INFO]00400a28                 sll r3, r2, 0x18     // r3 = r2 > 0x18
[INFO]00400a30              addiu r4, r30, 0x30     // r4 = r30 + 0x30
[INFO]00400a34                lw r2, [r30+0x18]     // r2 = r30[0x18]    # indekx
[INFO]00400a38                  addu r2, r4, r2     // r2 += r4          # bufer[index]?
[INFO]00400a3c                  sb r3, [r2+0x0]     // r2[0] = r3
[INFO]00400a40                lw r2, [r30+0x18]     // \
[INFO]00400a44                addiu r2, r2, 0x1     // r30[0x18] += 1
[INFO]00400a48                sw r2, [r30+0x18]     // /
// block
[INFO]00400a4c                lw r2, [r30+0x18]     // r2 = r30[0x18] (starting with 00
[INFO]00400a50                slti r2, r2, 0x1a     // while r2 >= 0x18
[INFO]00400a88              addiu r4, r30, 0x30     // r4 = r30 + 0x30  # another buffer?
[INFO]00400a8c                  addu r2, r4, r2     // r2 += r4         # buffer[index]?
[INFO]00400a90                  sb r3, [r2+0x0]     // r2[0] = r3
[INFO]00400a94                lw r2, [r30+0x1c]     // \
[INFO]00400a98                addiu r2, r2, 0x1     // r30[0x1c] += 1
[INFO]00400a9c                sw r2, [r30+0x1c]     // /
[INFO]00400aa0                lw r2, [r30+0x1c]     // stupid compiler
// block
[INFO]00400aa4                slti r2, r2, 0x1a     // loop 26 times
[INFO]00400aa8                bnez r2, 0x400a68
========
Basic block #20
[INFO]00400ab0                sw r0, [r30+0x20]     // r30[0x20] = 0
[INFO]00400ab4                       j 0x400af4 
[INFO]00400ab8                      move r1, r1 
========
Basic block #21
[INFO]00400abc                lw r2, [r30+0x20]     //
[INFO]00400ac0               addiu r2, r2, 0x34     //  offset in buffer
[INFO]00400ac4                lw r3, [r30+0x20]     //
[INFO]00400ac8                andi r3, r3, 0xff     //
[INFO]00400acc               addiu r3, r3, 0x30     //
[INFO]00400ad0                andi r3, r3, 0xff     //
[INFO]00400ad4                 sll r3, r3, 0x18     //
[INFO]00400ad8                 sra r3, r3, 0x18     //
[INFO]00400adc              addiu r4, r30, 0x30     //  create buffer filled with 012345...
[INFO]00400ae0                  addu r2, r4, r2     //
[INFO]00400ae4                  sb r3, [r2+0x0]     //
[INFO]00400ae8                lw r2, [r30+0x20]     //
[INFO]00400aec                addiu r2, r2, 0x1     //
[INFO]00400af0                sw r2, [r30+0x20]     //
[INFO]00400af4                lw r2, [r30+0x20]     //
[INFO]00400af8                 slti r2, r2, 0xa     //
[INFO]00400afc                bnez r2, 0x400abc     //
========
Basic block #22
[INFO]00400b04               addiu r2, r0, 0x7b     // r2 = 0x7b  # {
[INFO]00400b08                sb r2, [r30+0x6e]     // r30[0x6e] = r2
[INFO]00400b0c               addiu r2, r0, 0x7d     // r2 = 0x7d  # }
[INFO]00400b10                sb r2, [r30+0x6f]     // r30[0x6f] = r2
[INFO]00400b14                     lui r2, 0x41     // r2 = 0x41
[INFO]00400b18                lw r3, [r2+0xea0]     // r3 = &FLAG
[INFO]00400b1c              addiu r2, r30, 0x30     // r2 = r30 + 0x30   - start of buffer
[INFO]00400b20               addiu r2, r2, 0x40     // r2 += 0x40        - 40 byte offset
[INFO]00400b24                      move r4, r2     // r4 = r2           - copy there
[INFO]00400b28                      move r5, r3     // r5 = r3           - flag
[INFO]00400b2c                     jal 0x4007d0     // strcpy()
========
Basic block #23
[INFO]00400b34               lw r28, [r30+0x10]     // r28 = r30[0x10]
[INFO]00400b38              addiu r2, r30, 0x30     // r2 = r30 + 0x30
[INFO]00400b3c                      move r4, r2     // r4 = r2
[INFO]00400b40                     jal 0x400770     // strlen()    # wychodzi 90
========
Basic block #24
[INFO]00400b48               lw r28, [r30+0x10]     // r28 = r30[0x10]
[INFO]00400b4c                      move r3, r2     // r3 = r2
[INFO]00400b50              addiu r2, r30, 0x30     // r2 = r30 + 0x30
[INFO]00400b54                      move r4, r2     // r4 = r2  # r2 = buffer start
[INFO]00400b58                      move r5, r3     // r5 = r3  # r5 = 90 (strlen result)
[INFO]00400b5c                     jal 0x400858     // NIEBIESKA()
[INFO]00400b60                      move r1, r1 
========
Basic block #25
[INFO]00400b64               lw r28, [r30+0x10] 
[INFO]00400b68              addiu r2, r30, 0x30 
[INFO]00400b6c                      move r4, r2 
[INFO]00400b70                     jal 0x400770 
[INFO]00400b74                      move r1, r1 
========
Basic block #26
[INFO]00400b78               lw r28, [r30+0x10] 
[INFO]00400b7c                sw r2, [r30+0x2c] 
[INFO]00400b80                sw r0, [r30+0x24] 
[INFO]00400b84                sw r0, [r30+0x28] 
[INFO]00400b88                       j 0x400bd4 
[INFO]00400b8c                      move r1, r1 
========
Basic block #27
[INFO]00400b90              addiu r3, r30, 0x30 
[INFO]00400b94                lw r2, [r30+0x28] 
[INFO]00400b98                  addu r2, r3, r2 
[INFO]00400b9c                  lb r3, [r2+0x0] 
[INFO]00400ba0                lw r2, [r30+0x28] 
[INFO]00400ba4                addiu r2, r2, 0x1 
[INFO]00400ba8              addiu r4, r30, 0x30 
[INFO]00400bac                  addu r2, r4, r2 
[INFO]00400bb0                  lb r2, [r2+0x0] 
[INFO]00400bb4             beq r3, r2, 0x400bc8 
[INFO]00400bb8                      move r1, r1 
========
Basic block #28
[INFO]00400bbc                lw r2, [r30+0x24] 
[INFO]00400bc0                addiu r2, r2, 0x1 
[INFO]00400bc4                sw r2, [r30+0x24] 
[INFO]00400bc8                lw r2, [r30+0x28] 
[INFO]00400bcc                addiu r2, r2, 0x1 
[INFO]00400bd0                sw r2, [r30+0x28] 
[INFO]00400bd4                lw r2, [r30+0x2c] 
[INFO]00400bd8         addiu r3, r2, 0xffffffff 
[INFO]00400bdc                lw r2, [r30+0x28] 
[INFO]00400be0                   slt r2, r2, r3 
[INFO]00400be4                bnez r2, 0x400b90 
[INFO]00400be8                      move r1, r1 
========
Basic block #29
[INFO]00400bec                lw r3, [r30+0x24] 
[INFO]00400bf0               addiu r2, r0, 0x3f 
[INFO]00400bf4             beq r3, r2, 0x400c10 
[INFO]00400bf8                      move r1, r1 
========
Basic block #30
[INFO]00400c10              addiu r2, r30, 0x30 
[INFO]00400c14                      move r4, r2 
[INFO]00400c18          lw r2, [r28+0xffff8034] 
[INFO]00400c1c                     move r25, r2 
[INFO]00400c20                         jalr r25 
[INFO]00400c24                      move r1, r1 
```
This code also prints order in which blocks were executed. That allowed us to draw this pretty graph (I allowed myself to color functions):
![](./graph.png)
As you might have noticed, I recognised red and green function immediately (that's only because they were rather obvious) - they were strlen and strcpy respectively.
I also analysed what the code is doing at the beginnign (EP is in block 15) - it is creating one big buffer in memory, and appending flag to it.
So in the end, we are stuck with following blob in memory:
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}[FLAGFLAGFLAGFLAGFLAGFLAG]
And then, blue function is called. Blue function was really complex, so I took liberty to implement it in C:
```cpp
void blue(char *buffer, int buflen) 
{
    if (buflen > 1) {
        int r18 = 1;
        int r20 = buffer[0];
        int r21;
        for (int r1c = 1; r1c = r20) {
                continue;
            }
            r21 = buffer[r18];
            buffer[r18] = buffer[r1c];
            buffer[r1c] = r21;
            r18 += 1;
        }