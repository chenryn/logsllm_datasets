1.表不是文件，记录也没有顺序，所以SQL不进行排序。
2.SQL不是面向过程语言，没有循环、条件分支、赋值操作。
3.SQL通过不断生成子集来求得目标集合。SQL不像面向过程语言
那样通过画流程图来思考问题，而是通过画集合的关系图来思考。
4.GROUPBY子句可以用来生成子集。
5.WHERE子句用来调查集合元素的性质，而HAVING子句用来调查集
合本身的性质。
---
## Page 83
Q
—第1章神奇的SQL
怎么样，是否领略到了面向集合语言的魅力呢？如果想深入学习，可
以参考下面的资料。
1.C.J.Date，《深度探索关系数据库：实践者的关系理论》（电子工业出版，
2007年1
行了说明。笔者印象比较深的是书中关于除法运算的评论“我不想讨论
太多细节”，感觉很坦率。
2.JoeCelko，《SQL权威指南（第4版）》（人民邮电出版社，2013年）
在第31章“SQL中的描述性统计”里，有大量使用HAVING子句的示例。
3.JoeCelko，《SQL解慈（第2版）》（人民邮电出版社，2008年）
了用HAVING子句描述全称命题的高级技巧：“谜题21飞机与飞行员“
64盒子”介绍了多维关系除法运算这样的有趣内容。该书是理解面向集
合语言思想不可多得的著作。
4.Joe Celko, Joe Celko's Analytics and OLAP in SQL ( Morgan
Kaufmann Pub,2006 年 1
该书主要讲解了作为窗口函数工具的SQL，切入点很有趣。通过讲解购
物篮分析的方法深入介绍了关系除法运算。使用ROW_NUMBER函数求中
位数的方法很有趣，请一定读一下。
练习题
●练习题1-4-1：修改编号缺失的检查逻辑，使结果总是返回一行数据
在“寻找缺失的编号”部分，我们写了一条SQL语句，让程序只在
存在缺失的编号”
---
## Page 84
1-4 HAVING子句的力量 —
71
练习题1-4-2：练习“特征函数”
这里我们使用正文中的表Students，稍微练习一下特征函数的用法吧。
满足条件的只有经济学院。理学院学号为100的学生是10月份提交的报告，
所以不满足条件。文学院和工学院还有学生尚未提交报告，所以也不满足
条件。
练习题1-4-3：购物篮分析问题的一般化
在“用关系除法运算进行购物篮分析”部分，返回结果只选择了满足
条件的店铺。但是有时候会有不同的需求，比如对于没有备齐全部商品类
型的店铺，我们也希望返回的一览表能展示这些店铺缺少多少种商品。
请修改正文中的SQL语句，使程序能够返回下面这样展示了全部店
铺的结果的一览表。my_item_ent是店铺的现有库存商品种类数，diff_
cnt是不足的商品种类数。
abop my_item_cnt diff_cnt
仙台
大阪
2
东京
图灵社区会员非洲铜(PI:EMAIL）专享尊重版权
---
## Page 85
72
一第1章神奇的SOL
外连接的用法
SQL的弱点及其趋势和对策
数据库工程师经常面对的一个难题是无法将SQL语句的执行结果转换为想要的格式。因为SQL语
言本来就不是为了这个目的而出现的，所以需要费些工夫。本节，我们将通过学习格式转换中具有代表性
的行列转换和嵌套式侧栏的生成方法，深入理解一下其中起着重要作用的外连接。
写在前面
很多人对SQL有一个误解：它是一种用于生成报表的语言。确实，
SQL在生成各种定制化或非定制化报表或统计表的系统里有着广泛的应
用。这本身并没有什么间题，但“不幸”的是，数据库工程师开始要求
SQL具备并非它原本用途的功能一格式转换。说起来，SQL终究也只
是主要用于查询数据的语言而已。
但是同时，SQL比很多人想象得更加强大。特别是近些年，SQL引
入了许多便于生成报表的功能，其中的代表就是窗口函数。如果SQL既
可以简化系统整体的代码，同时也可以优化性能，使用起来是很有价值的。
本节，我们将学习一下使用外连接（outerjoin）进行格式转换的方法。
外连接是数据库工程师比较熟悉的一种运算，但这次我们将试着从不同的
角度来体会一下它的特性。就内容分布来说，本节前半部分主要讲解如何
使用外连接进行格式转换，后半部分则从集合运算的角度来了解外连接。
和“用外连接进行集合运算”两部分开始阅读。
用外连接进行行列转换（1）（行一列）：制作交叉表
在1-1节中，我们学习了将查询结果转换成交叉表的方法。这次，我
们来思考一下如何用外连接的方法实现同样的功能。例如，这里有一张用
于管理员工学习过的培训课程的表，如下所示。
---
## Page 86
1-5外连接的用法—
73
Courses
me（员工姓名）
courne[课程
赤井
SQL 入(门]
赤井
UNIX基础
铃木
SQL 入(门]
工藤
SQL 入(]
工藤
8中 BA
吉田
股查 XINn
渡边
SQL 入门
首先让我们利用上面这张表生成下面这样一张交叉表（“课程学习记
录一览表"）。O表示已学习过，NULL表示尚未学习。
■课程学习记录一览表（表头：课程：侧栏：员工姓名）
SOLA门
UNIX基础
Java中级
赤井
O
工藤
C
铃木
C
吉田
渡边
实际上，原来的表与刚刚生成的表在信息量上并没有区别。关于“谁
学习过哪些课程”，不管从哪张表都能看出来，区别只是外观。所以，这
本来并不是SQL应该做的工作。但是，练习用SQL进行这样的工作是本
节的主旨，所以我们尝试用外连接的思路来思考，这样就可以知道，以侧
栏（员工姓名）为主表进行外连接操作就可以生成表。
-水平展开求交叉表（1）：使用外连接
SELECT Co.name,
CASE KHEN C1.nane IS NOT NULL THEN +O+ SLSE NULL END AS *SQL 入]*,
CASE KHEN C2.nane IS NOT NULL THEN +O+ ELSE NULL END AS *UNIX 基础*,
CASE WHEN C3.nane IS NOT KULL THEN +O+ ELSE NULL END AS "Java 中级*
FROM (SELECT DISTINCT nane FRON Couxses) CO
--这里的CO是侧栏
LEFT OUTER JOIN
[SSLSCT name FBOM Courses HHERE couxse = +SQL ,A(]* ) C1
ON Co.nane = C1.nane
LEFT OUTER JOIN
{SELECT nane FRON Couxses WHERE course = +UNIx 基础* / C2
O8 co.nane - C2.nane
图灵社区会员非洲钢(PI:EMAIL）专享尊重版权
---
## Page 87
74
第1章神奇的 SQL
LEPT OUTER JOIN
(SELECT Dane FRON CourBes XHERE courBe - 'Java 中级* C3
OBCo.name - C3.name)
使用子查询，根据源表Courses生成C0~C3这4个子集。1-2节也
讲过，SQL中指定了名称的表和视图都相当于集合。因此，这里将生成下
面这样4个集合。
CO：主表
C1: SQL
C2: UNIX
C3: Java
ame
赤井
赤井
赤井
工
工蒂
工藤
吉田
铃木
铃木
吉田
波边
镀边
C0包含了全部员工，起到了“员工主表”的作用（如果原本就提供
了这样一张主表，请直接使用它）.CI～C3是每个课程的学习者的集合。
这里以C0为主表，依次对C1～C3进行外连接操作。如果某位员工学习
过某个课程，则相应的课程列会出现他的姓名，否则为NULL。最后，通
过CASE表达式将课程列中员工的姓名转换为O就算完成了。
这次，因为目标表格的表头是3列，所以进行了3次外连接。列数增
加时原理也是一样的，只需要增加外连接操作就可以了，想生成置换了表
头和表侧栏的交叉表时，我们也可以用同样的思路。这种做法具有比较直
观和易于理解的优点，但是因为大量用到了内嵌视图和连接操作，代码会
显得很雕肿。而且，随着表头列数的增加，性能也会恶化。
我们再考虑一下有没有更好的做法。一般情况下，外连接都可以用标
量子查询替代，因此可以像下面这样写。
--水平展开（2）：使用标量子查询
SEL&CT Co.name,
(SELECT O
XHERS course = 1SQL 入门
FROM Courses C1
AND C1.nane = Co -namel AS *sgt Ai7*,
(SELECT ·O
XHERE couEBe-UNIX基础
FROM Courses C2
---
## Page 88
1-5外连接的用法—75
AND C2.Dane = CO.nanel AS *UNIx 基B*,
(SELECT 'O'
MHERE courBe -Java 中级
FROM Courses C3
FROM（SELBCT DISTIBCTnaTe FROM Couree）CO）-这里的Co是表例栏
AND C3 Dane = CO.nanelAS *Java 中级*
这里的要点在于使用标量子查询来生成3列表头。最后一行FROM子
句的集合C0和前面的“员工主表”是一样的。标量子查询的条件也和外
连接一样，即满足条件时返回O，不满足条件时返回NULL。这种做法的
优点在于，需要增加或者减少课程时，只修改SELECT子句即可，代码修
改起来比较简单。
例如想加入第4列“PHP入门”时，只需要在SELECT子句的最后加
上下面这条语句就可以了（如果采用前面的写法，则必需修改SELECT子
句和FROM子句两个地方）。
(SELRCT·O
FROM Courses C4
KHERE course = 'PHP 入门
AND C4.nane = CO.nane ) AS "FHP 入门*
这种做法不仅利于应对需求变更，对于需要动态生成SQL的系统也
是很有好处的。缺点是性能不太好，目前在SELBCT子句中使用标量子查
询（或者关联子查询）的话，性能开销还是相当大的。
接下来介绍第三种方法，即嵌套使用CASE表达式。CASE表达式可以
写在SELECT子句里的聚合函数内部，也可以写在聚合函数外部（请参
考1-1节）。这里，我们先把SUN函数的结果处理成1或者NULL，然后在
外层的 CASE表达式里将1转换成O.
-水平展开（3）：嵌套使用CASE表达式
SELECT nane,
CASS KHEN SON(CASE WHEN cOUESe = 1SQL A]* THEN 1 ELSE MULL END) = 1
THEN +O+ ELSE NULL END AS *SQL 入门",
CASS KHEN SON(CASE KHEN cCOUYSe = +UNIX 基6: THEN 1 ELSE NULL END) = 1
THEN +O+ ELSE NULL END AS *UNIX 基础*,
CASS KHEN SON(CASE KHEN coUYSe = 'Java 中投+ THEN 1 ELSE NULL END) = 1
THEN O+ ELSE NULL END AS “Java 中级*
FROM Couxses
GROUP BY name;
---
## Page 89
76
—第1章神奇的 SOL
如果不使用聚合，那么返回结果的行数会是表Courses的行数，所以
这里以参加培训课程的员工为单位进行聚合。这种做法和标量子查询的做
法一样简洁，也能灵活地应对需求变更。关于将聚合函数的返回值用于条
件判断的写法，如果大家不习惯，可能会有点疑惑。但是，其实在
SELECT子句里，聚合函数的执行结果也是标量值，因此可以像常量和普
通列一样使用。如果明白这点，就不难理解了。
用外连接进行行列转换（2）（列一行）：汇总重复项于一列
前面，我们练习了从行转换为列，这回我们反过来，练习一下从列转
换为行。我们假设存在下面这样一张让数据库工程师想哭的表。
Personnel：员工子女信息
child_1(孩子 1)
child_2（孩子2)
ch子3
赤井
一邱
二郎
三邮
工藤
春子
夏子
铃木
夏子
吉田
这种结构的表大家应该都见过吧。将COBOL等语言中使用的平面文
件作为输入数据，简单地按照原来的格式进行提取，就可以得到这样的表。
这张表到底哪里让人想哭，我们暂时不提，我们需要做的是将这张表转换
成行格式的数据。这里使用UNIONALL来实现。
--列数据转换成行数据：使用UMIONALL
SBLSCT employee, child_1 AS child FRoM Personnel
UMIONALL
SSL&CT employee, child_2 AS child FRoM Personnel
IOM ALL
SBL8CT employee, child_3 AS child FRoM Personnel;
■执行结果
enp1oyee
chi1d
赤井
一邱
=
赤井
二邱
---
## Page 90
1-5外连接的用法
77
井
三邮
工藤
春子
工藤
夏子