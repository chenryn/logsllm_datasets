p) to revoke e (Lines 1-2 in Protocol 7). The base station updates
its public/private key pair and shares it with other AIAs, enabling
AIAs (including the base stations) to run the MABE system setup
for calculating M′
pk (Line 3). The base station then generates and
return contentCacheRetrieve(C1)
requestService(Req, σReq)
else
drop connection and return error
end if
end if
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1411{At Provider}
Protocol 6 User Revocation
1: delete Tpu for u from userT able and notify C.
{At Cloud}
2: receive {Tpu} from p.
3: E ← edgeServersWith([IDs]), E ⊂ E
4: for each e ∈ E do
5:
6: end for
notify e of revoked Tpu
{At Edge Server}
7: receive Tpu from C.
8: add Tpu to revocT able.
distributes a new set of secret keys for all of its PEC servers, except
the revoked one (Lines 5-11). Finally, the base station broadcasts
the new public parameters to the users in its vicinity (Line 12). This
revocation localizes the re-keying operation to only the PEC servers
associated with the revoking base station.
The PEC server revocation can be optimized if base stations are
more involved in service orchestration. In such case, on receiving a
service request, the base station acts as a broker and steers requests
away from revoked PEC servers. In addition, the service provider’s
AIA hosted on C can update the base stations’ revocT able with
a set of revoked PEC servers reported by other base stations to
prevent revoked PEC servers from migrating to other base stations.
Thus, minimizing the number of system re-keys and eliminating
the need to re-key the local PEC servers per revocation.
5.5 APECS PKC-based Design
We also propose APECS PKC as an alternative APECS design that
utilizes the traditional public key cryptosystem (PKC), which has a
less complex system and security configuration (using transport
layer security and the PKC infrastructure). APECS PKC is suitable
for static scenarios where the user is aware of the PEC servers and
their services (through a service discovery process, which we do not
discuss) and the user(s) and PEC servers can synchronously interact.
Protocol 7 Edge Server Revocation
{at Provider}
1: identify ˆe ∈ E that should be revoked.
2: notify base station bn ∈ B that ˆe is associated with.
3:
M′
pk
= (sysparam, apk1, . . . , apk′
n), ask1, . . . , ask′
n
{at AIAs}
(cid:17) ←
(cid:16)
ABE.Setup(1λ, n);
4: Ebn ⊂ E;
5: for each e ∈ Ebn do
6:
7:
8:
9:
end if
10:
11: end for
12: broadcast M′
pk to U
{updated bn’s public/private key pair}
{at Base Station}
{all PEC servers associated with bn}
if e (cid:44) ˆe then
[A′
e] ← ABE.KeyGen(M′
store {e,[A′
return {e,[A′
e]} in serverT able
e]} to e
pk , aske , ide ,[IDs])
Considering APECS PKC is an obvious choice for static environ-
ments, we will discuss its design and assess its efficacy. APECS PKC
also provides a very good foil to compare APECS more thoroughly.
In this approach, a PEC server has to obtain a customized token
(similar to users’ tokens) from each service provider and the base
station, it is associated with, to prove its affiliation with them to
the user (affiliation is the token pair from the provider and the
base station). This is in contrast with the APECS design where PEC
servers have to obtain MABE credentials. The tokens issued by the
providers and base stations are signed by them for authentication.
To request a service, after selecting a PEC server, the user es-
tablishes a Transport Layer Security (TLS) connection with the
PEC server to securely share her authentication token obtained
from the provider. Upon successful verification of the user’s token
(Lines 2-12 of Protocol 5), the PEC server shares its tokens (from
the service provider and the base station) with the user. This allows
the user to verify the shared tokens’ integrity and provenance (in a
process similar to Lines 2-12 of Protocol 5), and by extension, the
PEC server’s authenticity for the requested service. On success-
ful mutual authentication/authorization, the user securely shares
her data with the PEC server for service execution and the server
responds with the computation results. We note that the TLS chan-
nel should be established using the certificates that are contained
in the tokens (for both the user and the PEC server) to avoid a
challenge-response for mutual authentication.
6 APECS SECURITY ANALYSIS
6.1 Formal Security Analysis
We now provide a formal analysis of APECS in the Universal Com-
posability (UC) Framework [2]. The notion of UC security is cap-
tured by the pair of definitions below:
Definition 6.1. (UC-emulation [2]) Let π and ϕ be probabilistic
polynomial-time (PPT) protocols. We say that π UC-emulates ϕ if for
any PPT adversary A there exists a PPT adversary S such that for
any balanced PPT environment Z we have
EXECϕ,S,Z ≈ EXECπ,A,Z
Definition 6.2. (UC-realization [2]) Let F be an ideal function-
ality and let π be a protocol. We say that π UC-realizes F if π UC-
emulates the ideal protocol for F .
We define an ideal functionality, FAPECS, consisting of five inde-
pendent ideal functionalities, Fregister, Fresponse, Frevoke, Fsmt, Fsig.
Fregister models the user and edge servers’ registration processes,
Fresponse models the processing of a user’s service request, and
Frevoke models the revocation functionality. We use two helper func-
tionalities from [2], Fsig and Fsmt, to model ideal functionalities for
digital signatures and secure/authenticated channels, respectively.
We assume that FAPECS maintains internal state that is accessible
at any time to Fregister, Fresponse and Frevoke, specifically three ta-
bles, uTable, sTable and dTable. The parties that interact with the
ideal functionalities are the members of sets of edge servers, EC,
service providers, SP, base stations BS, and a user u. We assume
that each member of the three sets has a unique identifier. The
dTable contains all data provided by different service providers,
uTable contains details about the services a user is registered for,
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1412Functionality Fregister
to Fregister
(1) When a service provider, SP ∈ SP sends a request,
(register, spid, sname, scat, sdata, stype), Fregister adds td =
(spid, sname, scat, sdata, stype) to the dTable; if td already
exists, Fregister returns td. When an SP sends a request
(update, spid,·,·,·,·), Fregister updates td. When an SP sends
a request (deregister, spid, sname, scat), Fregister deletes the
corresponding tuple td from dTable.
(2)(a) When a user u sends a registration request,
(register, uid, scat, spid)
(where uid, spid
are the user’s and service provider’s unique identi-
fiers, scat is the category of the service u wishes to
subscribe to), Fregister checks if there exists a tuple
tu = (uid, scat, spid) in uTable. If yes, Fregister returns tu
to u, and forwards (exists, tu) to S. Else Fregister sends a
message, (register, uid, scat) to SP ∈ SP whose identifier
is spid. If SP responds with an “allow”, Fregister adds
tuple tu = (uid, scat, spid) to uTable, returns “success” to
u, and forwards (newreg, tu) to S. Else Fregister returns
⊥ to u, and forwards (failReg, uid, scat, spid) to S.
(b) When u sends a request(update, uid, scat′, spid), Fregister
retrieves a tuple tu = (uid,·, spid) in uTable. Fregister
sends a message, (update, uid, scat′), to SP.
If SP
replies with ⊥, Fregister returns ⊥ to u, and forwards
(failUpdate, tu) to S. Else Fregister updates or creates
(if the retrieval of tu returned ⊥) a tuple tu with
(uid, scat′, spid), and returns “success” to u, and forwards
(successUpdate, tu) to S. In case a new tu was created,
Fregister forwards (newreg, tu) to S.
(c) If a user sends a request (deregister, uid,·, spid), Fregister
deletes tuple tu = (uid,·, spid) in uTable and forwards
(deregister, uid,·, spid) to SP, and S.
(3)(a) When an edge server, EC ∈ EC, identified by ecid sends a
request to Fregister, (register, spid, ecid, bsid), where spid
is the identifier of a service provider SP ∈ SP whose
services EC wants to offer via bsid which denotes the
identifier of a base station BS ∈ BS, Fregister checks if
there exists a tuple in sTable, ts = (spid, ecid, bsid). If yes,
Fregister returns ts to EC, and forwards (exists, ts) to S.
Else Fregister sends a message (register, spid, ecid, bsid)
to SP and BS. If SP and BS both respond with “allow”,
Fregister adds tuple ts = (spid, ecid, bsid) to sTable, col-
lects all tuples td = (spid,·,·,·,·) from dTable, sends them
to EC, and forwards (newreg, ts , td) to S. If either of
them respond with ⊥, it returns ⊥ to EC, and forwards
(failReg, spid, ecid, bsid) to S.
(deregister, spid, ecid, bsid),
Fregister deletes tuples ts from sTable, and forwards
(deregister, spid, ecid, bsid) to SP, BS, and S.
(b) If EC sends a request
Figure 2: Ideal functionality for Service Registration
and sTable contains information about the service providers an
edge server provides services on behalf of. We now briefly describe
the design of our ideal functionalities.
Fregister: The Fregister functionality shown in Figure 2 handles
the system setup and registration/de-registration of a user u and
members of EC. This also handles registration of data associated
with members of SP, as well as service updates. When a service
provider SP wishes to register, it initiates contact with Fregister by
sending a tuple (register, spid, sname, scat, sdata, stype), where spid
denotes the unique identifier of SP, sname denotes the name of the
service SP is offering, scat denotes the service category of sname
(e.g., bronze, gold, silver), and stype indicates if a given sname is
associated with static or dynamic requests. For static requests, e.g.,
movies, sdata contains the relevant data files, for dynamic requests,
e.g., image annotation, sdata contains the algorithms needed to
process the user-supplied input. Fregister creates a new tuple in
dTable containing the data supplied by SP, if one does not exist.
Since each tuple is uniquely identified by (spid, sname, scat), when
SP de-registers, it just needs to send (spid, sname, scat) to Fregister,
who deletes the tuple from dTable.
When a user u, identified by uid, wants to register for a service,
it contacts Fregister with (register, uid, scat, spid). We assume that
a user can register for only one category of service with an spid.
If SP permits u to register, Fregister adds u’s information to uTable,
and forwards the registration information to S. Similarly, when an
already-registered u wishes to update their service category to scat′,
Fregister will check with SP and act accordingly. Fregister will also
notify S whether the update request was successful. When u termi-
nates its service and de-registers from an spid, Fregister deletes the
unique tuple (uid,·, spid) without needing to ask SP’s permission,
but informs SP and S about u’s de-registration.
An edge server EC will register with both a service provider
SP and a base station BS (with bsid) to model the fact that in the
real world, all entities communicate over networks through their
local base stations. We assume each EC will register with a unique
(SP, BS) pair, i.e., the tuple (spid, ecid, bsid) is unique. If both SP
and BS approve of EC’s request, Fregister will add EC’s information
to sTable, else it will notify EC and S that the registration request
was denied. At this point, Fregister will also send to EC and S in-
formation about all the services EC is registered for with all SPs.
When an EC wishes to stop providing services on behalf of an SP, it
de-registers itself. Fregister deletes the unique tuple (spid, ecid, bsid)
from sTable, without needing to ask SP’s or BS’s permission, but
informs them and S about it.
Fresponse: The Fresponse functionality shown in Figure 3 handles
a service request from a user identified by uid. When the uid, that
registered with service provider spid, submits a request to Fresponse
for a service identified by sname, it sends a request containing
(spid, sname, uid, bsid, udata). The bsid and spid in the request help
identify the list of ecids connected to the base station bsid that the
user is connected to, and that can process the user’s request. The
request also includes user data (udata) which would be used by ecid
if sname is a dynamic service that needs to process the user data,
udata would be ⊥ if the request is a static request.
Once Fresponse receives the request from the user, it forwards
(recvReq, spid, sname, uid, bsid, udata) to S and retrieves the tuple
td = (spid, sname, scat, sdata, stype) from dTable containing spid
and sname. If no such tuple exists, then the service requested by
uid is not offered by spid and a ⊥ is returned to the user along with
(failReq, spid, sname, uid, bsid, udata) toS, otherwise Fresponse con-
tinues to the next step. Next, Fresponse checks whether uid is au-
thorized to access service sname from spid. It retrieves tuple tu
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1413Functionality Fresponse
from user’s
S.
does not
exist
retrieves
the data
(3) Fresponse
then retrieves all
=
and sname
tuples matching ts
(spid, sname, scat, sdata, stype)
request
to
(1) Upon receipt of a request (spid, sname, uid, bsid, udata)
from a user, Fresponse
tuple,
containing
td