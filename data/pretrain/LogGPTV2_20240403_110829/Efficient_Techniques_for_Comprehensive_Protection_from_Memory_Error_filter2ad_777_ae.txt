### Address Space Randomization and Attack Mitigation

#### Base Address Randomization in DLLs
The randomization of the base address of Dynamic Link Libraries (DLLs) can be as high as \(2^{-26}\). Consequently, the probability \(P(\text{Eff})\) is bounded by \(2^{-14}\). This probability can be further reduced by performing code randomizations at load-time. When code randomizations are applied to disk images, the amount of "gaps" introduced between functions is kept low (approximately 64K in the above calculation) to avoid significant increases in file sizes. However, when randomization is performed in main memory, the space for randomization can be much larger, such as 128MB, thereby reducing the probability of successful attacks to \(2^{-25}\).

#### Corruption with Pointer to Injected Code
Code can only be injected into data areas and does not have any alignment requirements (on x86 architectures). Therefore, the probability of guessing the address of the injected code is \(2^{-27}\). The attacker can increase the success probability by using a large NOP-padding before the attack code. If a padding of approximately 4KB is used, then \(P(\text{Eff})\) becomes \(4K \times 2^{-27} = 2^{-15}\).

### Attacks Targeting ASR

#### Information Leakage Attacks
Programs may contain vulnerabilities that allow an attacker to read the memory of a victim process. For example, a format string vulnerability might cause the vulnerable code to print into a buffer that is sent back to the attacker. Such vulnerabilities are rare but can be exploited if present. The attacker can send a format string like `"%x %x %x %x"`, which will print the values of four words near the top of the stack at the point of the vulnerability. If some of these words are known to point to specific program objects, such as a function in the executable, the attacker can determine the locations of these objects.

We distinguish between two types of information leakage vulnerabilities: chosen pointer leakage and random pointer leakage. In chosen pointer leakage, the attacker can select the object whose address is leaked, allowing them to overwrite a vulnerable pointer and increasing \(P(\text{Eff})\) to 1. In random pointer leakage, the attacker knows the location of some object in memory but not the one of interest. Since relative address randomization makes it generally impossible to guess the location of one memory object from another, random pointer leakages do not significantly increase \(P(\text{Eff})\).

For both types of leakages, the attacker still needs to successfully exploit an overflow vulnerability. The probability of success \(P(\text{Owr})\) for this stage was previously discussed. The specific case of format-string information leakage lies between random and chosen pointer leakage, so the probability of mounting a successful attack based on this vulnerability is bounded by \(P(\text{Owr})\).

#### Brute Force and Guessing Attacks
Server programs like Apache pose a challenge for address randomization techniques because they present an attacker with many simultaneous child processes to attack and rapidly respawn processes that crash due to bad guesses. This makes them vulnerable to attacks where many guesses are attempted in a short period. In [27], these properties were exploited to successfully attack a typical Apache configuration within a few minutes. This attack does not work with our approach, as it relies on stack smashing. A similar attack could be mounted by exploiting other vulnerabilities (e.g., heap overflow) and making repeated attempts to guess the address of existing code. As discussed earlier, this can be done with a probability between \(2^{-14}\) to \(2^{-26}\). However, the technique used in [27] for passing arguments to this code won't work with heap overflows.

#### Partial Pointer Overwrites
Partial pointer overwrites replace only the lower byte(s) of a pointer, effectively adding a delta to the original pointer value. These are made possible by off-by-one vulnerabilities, where the vulnerable code checks the length of the buffer but underestimates the size needed by 1. These attacks are particularly effective against randomization schemes that only randomize the base address of each program segment and preserve the memory layout. By scrambling the program layout, our approach negates any advantage of a partial overwrite over a full overwrite.

### Related Work

#### Runtime Guarding
These techniques transform a program to prevent corruption of return addresses or other specific values. StackGuard [10] provides a gcc patch to generate code that places canary values around the return address at runtime, enabling the detection of overflows. StackShield [2] and RAD [7] provide similar protection but keep a separate copy of the return address instead of using canary values. Libsafe and Libverify [2] are dynamically loaded libraries that protect the return address without requiring recompilation. ProPolice [12] improves these approaches to protect pointers among local variables. FormatGuard [8] transforms source code to provide protection from format-string attacks. PointGuard [9] randomizes stored pointer values, providing protection against pointer-related attacks but not against attacks that modify non-pointer data.

#### Runtime Bounds and Pointer Checking
Several techniques [20, 1, 28, 17, 15, 18, 23, 26, 32] have been developed to prevent buffer overflows and related memory errors by checking every memory access. These techniques currently suffer from one or more of the following drawbacks: high runtime overheads, incompatibility with legacy C-code, and changes to the memory model or pointer semantics.

#### Compile-Time Analysis Techniques
These techniques [14, 25, 29, 11, 21] analyze a programâ€™s source code to detect potential array and pointer access errors. Although useful for debugging, they are not very practical due to high false alarm rates and scalability issues with large programs.

#### Randomizing Code Transformations
Address randomization is an instance of introducing diversity in non-functional aspects of software, as suggested by Forrest, Somayaji, and Ackley [13]. Recent works have applied it to randomization of address space [24, 4, 31], operating system functions [6], and instruction sets [19, 3]. Compared to instruction set randomization, which offers protection from injected code attacks, address space randomization provides broader protection, defending against existing code attacks and attacks that corrupt security-critical data.

Previous approaches in address space randomization focused only on randomizing the base address of different sections of memory. In contrast, our approach implements randomization at a finer granularity, achieving both relative and absolute address randomization. Moreover, it makes certain types of buffer overflows impossible. Our implementation achieves this while incurring overheads similar to previous techniques [4].

### Conclusion
Address space randomization (ASR) is a technique that provides broad protection from memory error exploits in C and C++ programs. However, previous implementations provided a relatively coarse granularity of randomization, leaving the randomized program vulnerable to guessing, partial pointer overwrites, and information leakage attacks. To address this, we presented a new approach that performs randomization at the granularity of individual program objects, making the relative distances between objects highly unpredictable. Our approach is implemented using a source-to-source transformation that produces a self-randomizing program, which randomizes its memory layout at load-time and runtime. This randomization makes it very difficult for memory error exploits to succeed. We presented an analysis showing that our approach can provide protection against known and unknown types of memory error exploits. Our experimental results establish that comprehensive address space randomization can be achieved with overheads comparable to coarser forms of ASR. Furthermore, our approach is portable, compatible with legacy code, and supports basic debugging capabilities, making it suitable for deployment in the field. It can be selectively applied to security-critical applications to enhance overall system security even in the absence of security updates to the underlying operating system.

### Acknowledgments
We are thankful to Wei Xu for his insightful comments on the implementation issues and the anonymous reviewers for their comments and suggestions. This research is supported by an ONR grant N000140110967 and NSF grants CCR-0098154 and CCR-0208877. Sekar's work was also partly supported by DARPA through an AFRL contract FA8750-04-0244.

### References
[References listed as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical details and structure of the original text.