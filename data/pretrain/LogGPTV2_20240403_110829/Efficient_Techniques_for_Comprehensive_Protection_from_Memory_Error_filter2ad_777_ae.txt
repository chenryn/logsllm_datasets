ization in the base address of DLLs can be as high as
2−26, so P (Eff) is bounded by 2−14.
This probability can be decreased by performing
code randomizations at load-time. When code random-
izations are performed on disk images, the amount of
“gaps” introduced between functions is kept low (on the
order of 64K in the above calculation), so as to avoid
large increases in ﬁle sizes. When the randomization is
performed in main memory, the space of randomization
can be much larger, say, 128MB, thereby reducing the
probability of successful attacks to 2−25.
Corruption with pointer to injected code. Code can be
injected only in data areas, and it does not have any
alignment requirements (on x86 architectures). There-
fore, the probability of guessing the address of the in-
jected code is 2−27. The attacker can increase the suc-
cess probability by using a large NOP-padding before
the attack code. If a padding of the order of 4KB is used,
then P (Eff) becomes 4K × 2−27 = 2−15.
5.2 Attacks Targeting ASR
Previous ASR approaches were vulnerable to the classes
of attacks described below. We describe how the ap-
proach presented in this paper fares against them.
5.2.1 Information leakage attacks
Programs may contain vulnerabilities that allow an at-
tacker to “read” the memory of a victim process. For
instance, the program may have a format string vulner-
ability such that the vulnerable code prints into a buffer
that is sent back to the attacker. (Such vulnerabilities are
rare, as pointed out in [27].) Armed with this vulnera-
bility, the attacker can send a format string such as "%x
%x %x %x", which will print the values of 4 words near
the top of the stack at the point of the vulnerability. If
some of these words are known to point to speciﬁc pro-
gram objects, e.g., a function in the executable, then the
attacker knows the locations of these objects.
We distinguish between two kinds of information
leakage vulnerabilities: chosen pointer leakage and ran-
dom pointer leakage. In the former case, the attacker is
able to select the object whose address is leaked. In this
case, the attacker can use this address to overwrite a vul-
nerable pointer, thereby increasing P (Eff) to 1. With
random pointer leakage, the attacker knows the location
of some object in memory, but not the one of interest to
him. Since relative address randomization makes it im-
possible in general to guess the location of one memory
object from the location of another memory object, ran-
dom pointer leakages don’t have the effect of increasing
P (Eff) signiﬁcantly.
For both types of leakages, note that the attacker
still has to successfully exploit an overﬂow vulnerability.
The probability of success P (Owr) for this stage was
previously discussed.
The speciﬁc case of format-string information
leakage vulnerability lies somewhere between random
pointer leakage and chosen pointer leakage. Thus, the
probability of mounting a successful attack based on this
vulnerability is bounded by P (Owr).
USENIX Association
14th USENIX Security Symposium
267
5.2.2 Brute force and guessing attacks
Apache and similar server programs pose a challenge
for address randomization techniques, as they present an
attacker with many simultaneous child processes to at-
tack, and rapidly re-spawn processes which crash due to
bad guesses by the attacker. This renders them vulnera-
ble to attacks in which many guesses are attempted in a
short period of time. In [27], these properties were ex-
ploited to successfully attack a typical Apache conﬁgu-
ration within a few minutes. This attack doesn’t work
with our approach, as it relies on stack smashing. A
somewhat similar attack could be mounted by exploit-
ing some other vulnerability (e.g., heap overﬂow) and
making repeated attempts to guess the address of some
existing code. As discussed earlier, this can be done with
a probability between 2−14 to 2−26. However, the tech-
nique used in [27] for passing arguments to this code
won’t work with heap overﬂows.
5.2.3 Partial pointer overwrites
Partial pointer overwrites replace only the lower byte(s)
of a pointer, effectively adding a delta to the original
pointer value. These are made possible by off-by-one
vulnerabilities, where the vulnerable code checks the
length of the buffer, but contains an error that underesti-
mates the size of buffer needed by 1.
These attacks are particularly effective against ran-
domization schemes which only randomize the base ad-
dress of each program segment and preserve the memory
layout. By scrambling the program layout, our approach
negates any advantage of a partial overwrite over a full
overwrite.
6 Related Work
Runtime Guarding These techniques transform a
program to prevent corruption of return addresses or
other speciﬁc values. Stackguard [10] provides a gcc
patch to generate code that places canary values around
the return address at runtime, so that any overﬂow which
overwrites the return address will also modify the ca-
nary value, enabling the overﬂow to be detected. Stack-
Shield [2] and RAD [7] provide similar protection, but
keep a separate copy of the return address instead of us-
ing canary values. Libsafe and Libverify [2] are dynam-
ically loaded libraries which provide protection for the
return address without requiring recompilation. ProPo-
lice [12] further improves these approaches to protect
pointers among local variables. FormatGuard [8] trans-
forms source code to provide protection from format-
string attacks.
The PointGuard [9] approach randomizes (“en-
crypts”) stored pointer values.
It provides protection
against pointer-related attacks, but not against attacks
that modify non-pointer data. Moreover, the approach
does not consider features of the C language, such as
type casts between pointers and integers, and aliasing
of pointer-valued variables with variables of other types.
As a result, PointGuard may break such programs.
Runtime Bounds and Pointer Checking Several
techniques [20, 1, 28, 17, 15, 18, 23, 26, 32] have been
developed to prevent buffer overﬂows and related mem-
ory errors by checking every memory access. These
techniques currently suffer from one or more of the fol-
lowing drawbacks:
runtime overheads that can often
be over 100%, incomaptibility with legacy C-code, and
changes to the memory model or pointer semantics.
Compile-Time Analysis Techniques These tech-
niques [14, 25, 29, 11, 21] analyze a program’s source
code to detect potential array and pointer access errors.
Although useful for debugging, they are not very prac-
tical since they suffer from high false alarm rates, and
often do not scale to large programs.
Randomizing Code Transformations Address ran-
domization is an instance of the broader idea of intro-
ducing diversity in nonfunctional aspects of software, an
idea suggested by Forrest, Somayaji, and Ackley [13].
Recent works have applied it to randomization of ad-
dress space [24, 4, 31], operating system functions [6],
and instruction sets [19, 3]. As compared to instruc-
tion set randomization, which offers protection from in-
jected code attacks, address space randomization offers
broader protection – it can defend against existing code
attacks, as well as attacks that corrupt security-critical
data.
Previous approaches in address space randomiza-
tion were focused only on randomizing the base address
of different sections of memory.
In contrast, the ap-
proach developed in this paper implements randomiza-
tion at a much ﬁner granularity, achieving relative as
well as absolute address randomization. Moreover, it
makes certain types of buffer overﬂows impossible. In-
terestingly, our implementation can achieve all of this,
while incurring overheads that are about the same as the
previous techniques [4].
7 Conclusion
Address space randomization (ASR) is an technique
which provides broad protection from memory error ex-
ploits in C and C++ programs. However, previous im-
plementations of ASR have provided a relatively coarse
granularity of randomization, with many program ob-
jects sharing the same address mapping, so that the
relative distance between any two objects is likely to
be the same in both the original and randomized pro-
gram. This leaves the randomized program vulnerable
268
14th USENIX Security Symposium
USENIX Association
to guessing, partial pointer overwrite and information
leakage attacks, as well as attacks that modify security-
critical data without corrupting any pointers. To address
this weakness, we presented a new approach in this pa-
per that performs randomization at the granularity of in-
dividual program objects — so that each function, static
variable, and local variable has a uniquely randomized
address, and the relative distances between objects are
highly unpredictable. Our approach is implemented us-
ing a source-to-source transformation that produces a
self-randomizing program, which randomizes its mem-
ory layout at load-time and runtime. This randomiza-
tion makes it very difﬁcult for memory error exploits to
succeed. We presented an analysis to show that our ap-
proach can provide protection against known as well as
unknown types of memory error exploits. We also an-
alyzed the success probabilities of typical attacks, and
showed that they are all very small. Our experimen-
tal results establish that comprehensive address space
randomization can be achieved with overheads that are
comparable to coarser forms of ASR. Furthermore, the
approach presented in this paper is portable, compatible
with legacy code, and supports basic debugging capa-
bilities that will likely be needed in software deployed
in the ﬁeld. Finally, it can be selectively applied to
security-critical applications to achieve an increase in
overall system security even in the absence of security
updates to the underlying operating system.
Acknowledgments
We are thankful to Wei Xu for his insightful comments
on the implementation issues, and the anonymous re-
viewers for their comments and suggestions.
This research is supported in by an ONR grant
N000140110967 and NSF grants CCR-0098154 and
CCR-0208877. Sekar’s work was also partly supported
by DARPA through an AFRL contract FA8750-04-0244.
References
[1] T. M. Austin, S. E. Breach, and G. S. Sohi. Efﬁcient de-
tection of all pointer and array access errors.
In ACM
SIGPLAN Conference on Programming Language Design
and Implementation, pages 290–301, Orlando, Florida,
20–24 June 1994.
[2] A. Baratloo, N. Singh, and T. Tsai. Transparent run-
time defense against stack smashing attacks. In USENIX
Annual Technical Conference, pages 251–262, Berkeley,
CA, June 2000.
[3] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer,
D. Stefanovi´c, and D. D. Zovi. Randomized instruction
set emulation to disrupt binary code injection attacks. In
ACM conference on Computer and Communications Se-
curity (CCS), Washington, DC, October 2003.
[4] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address obfus-
cation: An efﬁcient approach to combat a broad range of
memory error exploits. In USENIX Security Symposium,
Washington, DC, August 2003.
[5] CERT advisories. Published on World-Wide Web at URL
http://www.cert.org/advisories, May 2005.
[6] M. Chew and D. Song. Mitigating buffer overﬂows by
operating system randomization. Technical Report CMU-
CS-02-197, Carnegie Mellon University, December 2002.
[7] T. Chiueh and F.-H. Hsu. RAD: A compile-time solution
to buffer overﬂow attacks.
In IEEE International Con-
ference on Distributed Computing Systems, Phoenix, Ari-
zona, April 2001.
[8] C. Cowan, M. Barringer, S. Beattie, and G. Kroah-
Hartman.
FormatGuard: Automatic protection from
printf format string vulnerabilities. In USENIX Secu-
rity Symposium, Washington, DC, 2001.
[9] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. Point-
Guard: Protecting pointers from buffer overﬂow vulner-
abilities.
In USENIX Security Symposium, Washington,
DC, August 2003.
[10] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beat-
tie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. Stack-
Guard: Automatic adaptive detection and prevention of
buffer-overﬂow attacks. In USENIX Security Symposium,
pages 63–78, San Antonio, Texas, January 1998.
[11] N. Dor, M. Rodeh, and M. Sagiv. Cleanness checking
of string manipulations in C programs via integer analy-
sis. In Static Analysis Symposium, volume 2126 of Lec-
ture Notes in Computer Science, pages 194–212. Springer
Verlag, June 2001.
[12] H. Etoh and K. Yoda. Protecting from stack-smashing
Published on World-Wide Web at URL
attacks.
http://www.trl.ibm.com/projects/security/ssp/main.html,
June 2000.
[13] S. Forrest, A. Somayaji, and D. H. Ackley. Building di-
verse computer systems. In 6th Workshop on Hot Topics
in Operating Systems, pages 67–72, Los Alamitos, CA,
1997. IEEE Computer Society Press.
[14] J. S. Foster, M. F¨ahndrich, and A. Aiken. A theory of type
qualiﬁers.
In ACM SIGPLAN Conference on Program-
ming Language Design and Implementation, Atlanta, GA,
May 1999.
[15] R. Hastings and B. Joyce. Purify: A tool for detecting
memory leaks and access errors in C and C++ programs.
In USENIX Winter Conference, pages 125–138, Berkeley,
CA, USA, January 1992.
[16] T. Jim, G. Morrisett, D. Grossman, M. Hicks, J. Cheney,
and Y. Wang. Cyclone: a safe dialect of C. In USENIX
Annual Technical Conference, Monterey, CA, June 2002.
[17] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible
bounds checking for arrays and pointers in C programs. In
Third International Workshop on Automated Debugging.
Linkoping University Electronic Press, 1997.
[18] S. Kaufer, R. Lopez, and S. Pratap.
Saber-C: An
interpreter-based programming environment for the C
language.
In USENIX Summer Conference, pages 161–
171, San Francisco, CA, June 1988.
[19] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Counter-
ing code-injection attacks with instruction-set randomiza-
tion. In ACM conference on Computer and Communica-
tions Security (CCS), pages 272–280, Washington, DC,
October 2003.
[20] S. C. Kendall. Bcc: run–time checking for C programs.
In USENIX Summer Conference, El. Cerrito, CA, 1983.
USENIX Association
14th USENIX Security Symposium
269
[21] D. Larochelle and D. Evans. Statically detecting likely
buffer overﬂow vulnerabilities. In USENIX Security Sym-
posium, Washington, DC, August 2001.
[22] S. McPeak, G. C. Necula, S. P. Rahul, and W. Weimer.
CIL: Intermediate language and tools for C program anal-
ysis and transformation. In Conference on Compiler Con-
struction, 2002.
[23] G. C. Necula, S. McPeak, and W. Weimer. CCured:
type-safe retroﬁtting of legacy code. In ACM Symposium
on Principles of Programming Languages (POPL), pages
128–139, Portland, OR, January 2002.
[24] PaX.
Published on World-Wide Web at URL
http://pax.grsecurity.net, 2001.
[25] R. Rugina and M. Rinard. Symbolic bounds analysis of
pointers, array indices, and accessed memory regions. In
ACM SIGPLAN Conference on Programming Language
Design and Implementation, pages 182–195, Vancouver,
British Columbia, Canada, 2000.
[26] O. Ruwase and M. S. Lam. A practical dynamic buffer
overﬂow detector.
In Network and Distributed System
Security Symposium, pages 159–169, San Diego, CA,
February 2004.
[27] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu,
and D. Boneh. On the effectiveness of address-space ran-
domization. In ACM conference on Computer and Com-
munications Security (CCS), pages 298 – 307, Washing-
ton, DC, October 2004.
[28] J. L. Steffen. Adding run-time checking to the portable
C compiler. Software-Practice and Experience, 22:305–
316, April 1992.
[29] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A
ﬁrst step towards automated detection of buffer overrun
vulnerabilities. In Network and Distributed System Secu-
rity Symposium, San Diego, CA, 2000.
[30] Webstone,
the
benchmark
for web
servers.
http://www.mindcraft.com/webstone.
[31] J. Xu, Z. Kalbarczyk, and R. K. Iyer. Transparent run-
time randomization for security. In Symposium on Reli-
able and Distributed Systems (SRDS), Florence, Italy, Oc-
tober 2003.
[32] W. Xu, D. C. Duvarney, and R. Sekar. An efﬁcient and
backwards-compatible transformation to ensure memory
safety of C programs.
In ACM SIGSOFT International
Symposium on the Foundations of Software Engineering,
Newport Beach, CA, November 2004.
[33] L. Xun.
A linux
Masters Thesis,
executable
1999.
brary.
http://www.geocities.com/fasterlu/leel.htm.
editing
available
li-
at
270
14th USENIX Security Symposium
USENIX Association