Set bestCoordinate ← null
Set bestN umSat ← 0
for C ∈ CoordSpace:
Set numSat ← NumSatisﬁed(C)
if numSat > bestN umSat:
bestN umSat ← numSat
bestCoordinate ← C
Output: bestCoordinate
Procedure NumSatisﬁed(coordinate):
Set satisf iedN eighbors ← 0
For each Nj ∈ Ni do:
if relative error(coordinate, coordNj ) ≤ T :
Increment satisf iedN eighbors by 1
Output: satisf iedN eighbors
Figure 1: KoNKS algorithm
4.1 Algorithm
Figure 1 shows the algorithm for KoNKS. The set of n
nodes is represented as P. Every node Pi ∈ P maintains a
list of neighbors Ni. The bottom half of the ﬁgure outlines
how a peer will update its coordinate.
4.2 Why is KoNKS Secure?
We argue that KoNKS is secure – it meets our two security
goals from Section 2. We assume that it is possible to obtain
a T -embedding for the honest nodes in the network. This
means that it is possible to assign coordinates to honest
nodes such that the coordinate distance between any pair of
honest nodes will be diﬀerent from the real network distance
between that pair of nodes by a factor of at most T .
In
other words, the error for the network latency estimate will
be at most T . In Section 5.2, we show that experimentally,
T = 0.2 is adequate for the Internet. This means that all
honest neighbors can be satisﬁed – the individual relative
error of every honest neighbor will be less than T .
KoNKS satisﬁes the ﬁrst security goal due to multiple
reasons. First, each peer is inﬂuenced by its list of neighbors
and if the attacker is not in that list, it cannot inﬂuence the
peer’s coordinate. Second, even if the neighbor list contains
some adversarial nodes, the honest neighbors outnumber the
malicious neighbors. Thus, the inﬂuence that the malicious
neighbors can exert on the peer is limited. In the worst case,
1/4 of a peer’s neighbors are malicious. Thus, the peer can
satisfy 3
4 of its neighbors. Even if all malicious neighbors
are satisﬁed, at least half of the honest neighbors are also
satisﬁed, and thus the median relative error of honest peers
will be less than the threshold T .
KoNKS also satisﬁes our second security goal. A dishonest
node N can claim to have coordinates that make its distance
to peer P arbitrarily small. If N is on P ’s neighbor list, P
will try to ﬁnd coordinates that make its relative error to N
acceptable, while also making its relative error for the other
neighbors acceptable. Thus, N cannot reduce its apparent
network distance to P by a factor of more than 1 − T .
5. EVALUATION RESULTS
5.1 Setup
We implemented a simulator for our KoNKS algorithm
and evaluated its accuracy and resistance to known attacks.
For our simulation we used the King dataset [9] for latencies
between nodes. Each peer in the network computes its own
5-dimensional coordinate. Every 10 seconds, each node will
randomly select another peer in the network to SendUpdate.
Each peer maintains 50 neighbors. Neighbors are randomly
chosen from all the peers in the network. All attacks start
after time 80 ticks, to allow the network to stabilize – that
is, reach a stable median relative error. This translates to
about 13 minutes. All of our simulations were run on a
quad-core 2.67GHz Intel Xeon W3550 processor.
5.2 Simulation
Picking the threshold T : In the previous section, we men-
tioned the threshold T that all neighbor’s individual relative
error must satisfy. Recall that the relative error between two
. A low
peers A and B is deﬁned as
relative error means that the system is more accurate. We
now experimentally set the value of T and explain why this
value produces accurate latency predictions. Figure 2(a)
shows the median relative error for all the nodes in the net-
|distance(A,B)−rtt(A,B)|
rtt(A,B)
(a)
(b)
(c)
Figure 2: (a) The median relative error for Vivaldi and KoNKS with diﬀerent thresholds. (b) The average percentage
of honest neighbors whose individual relative error is less than T . (c) The intercluster/intracluster ratio for both
Vivaldi and KoNKS with 0% and 10% of frog-boiling attackers.
work over time. The diﬀerent lines indicate the diﬀerent val-
ues of T for KoNKS. The ﬁgure shows that decreasing the
threshold improves the accuracy of KoNKS – when T = 0.2,
KoNKS’s accuracy is comparable to Vivaldi’s accuracy. This
is expected as the lower the threshold, the lower the neigh-
bor’s relative error, and this implies that the median rela-
tive error should be lower than T . We note that the median
relative error is much lower than T . When T = 0.4, the
median relative error converges to 0.15. This means that the
network latency prediction has an error of 15%, that is, the
coordinate distance diﬀers from the real network distance
by 15%. The ﬁgure also shows that the lower the threshold,
the longer KoNKS takes to converge to a stable equilibrium.
From these observations, we picked T = 0.25 as our thresh-
old – each neighbor’s coordinate distance can diﬀer from the
real network distance by a factor of 0.25. Intuitively, a 25%
error when estimating network latencies on the Internet is
acceptable in practice. Moreover, from Figure 2(a), we see
that when T = 0.25, the median error is actually only 12%.
The median relative error does not show the whole pic-
ture. Figure 2(b) shows the percentage of neighbors satisﬁed
– their individual relative error is less than T . The higher
the threshold, the more likely it is to satisfy neighbors, and
the lower the threshold, the harder it is to choose a coordi-
nate that can satisfy all neighbors. At T = 0.25, 90% of the
neighbors can be satisﬁed. Although 10% of the neighbors
cannot be satisﬁed and are not considered when comput-
ing the optimal coordinate, this does not mean that these
neighbors are “bad”. These same peers might be satisﬁed
neighbors for another node.
5.3 Security
To empirically support our security argument, we imple-
mented three of the previously proposed attacks – the “ran-
dom” attack, the “inﬂation/deﬂation” attack, and the frog-
boiling attack [3]. Due to space constraints, we only show
our results for the frog-boiling attacks.
We implemented the frog-boiling attack from [3] in an at-
tempt to partition the KoNKS network into two independent
subnetworks. The malicious nodes pick the ﬁrst “half” of the
network N1 to “move” to the coordinate [−1000,−1000,
− 1000,−1000,−1000] and the second “half” of the network
N2 to move to [1000, 1000, 1000, 1000, 1000].
If successful,
this attack partitions the whole network into two indepen-
dent subnetworks N1 and N2. The malicious nodes behave
normally and compute their best coordinate just like any
honest peer. However, they lie about their location when
they report it to the honest nodes. When a malicious node
receives a SendUpdate request from an honest node, it will
ﬁrst determine which “half” that node falls into. If the hon-
est node has not previously contacted the attacker, it will
reply with its current best coordinate. If the honest node
has previously contacted the attacker, it will reply with the
last reported coordinate to that honest node ±δ (−δ if the
honest node falls into N1 and +δ if the honest node falls into
N2). As [3] showed, each lie is small and not detected by
anomaly detection, but cumulatively, the lies add up such
that the network is eﬀectively partitioned. We set δ = 20
in our experiments. The higher δ is, the faster the attack,
but the higher the chance of being detected. We expect that
KoNKS will not be aﬀected by this attack.
Figure 2(c) shows the intercluster/intracluster ratio for
both KoNKS and Vivaldi with no attackers and 10% of ma-
licious nodes. The intercluster/intracluster ratio indicates
how far apart the two networks are. A ratio of two means
that on average, nodes are twice as far from the center of
the opposite cluster as they are from the center of their own.
The higher the ratio, the further apart the two networks are.
With no attack, both KoNKS and Vivaldi stabilize to a ratio
of 1.2. The ratio is not 1 as we always use the same partition
of the network to be N1 and the same other half to be N2.
With 10% of attackers, the ratio for Vivaldi keeps increas-
ing over time. Although the intercluster/intracluster ratio
for KoNKS increases from 1.2 to 1.6, the ratio remains stable
over time. This reinforces our argument that the attacker’s
inﬂuence on honest KoNKS nodes is limited. The malicious
neighbors can aﬀect their honest peers only so much before
they stop having a malicious eﬀect. Figure 3(a) shows the
corresponding median relative error. Vivaldi’s median rel-
ative error keeps increasing with 10% of malicious nodes,
whereas KoNKS’ median relative error remains mostly un-
changed even under attack. We obtained a similar result for
higher percentages of frog-boiling attackers.
So far, we have shown that KoNKS is secure against all
the known attacks. Figure 2(b) shows the percentage of
neighbors which can be satisﬁed. We also show that even
under attack, honest KoNKS peers can still satisfy a high
percentage of honest neighbors, while not satisfying the ma-
licious neighbors. Figure 3(b) shows the percentage of hon-
est neighbors satisﬁed for varying percentages of malicious
nodes in the network. We observe that whichever attack is
used or the percentage of malicious peers, honest KoNKS
peers can still satisfy most honest neighbors.
 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0 50 100 150 200 250 300Median Relative ErrorTime (ticks)VivaldiKoNKS T=0.4KoNKS T=0.25KoNKS T=0.225KoNKS T=0.2 10 20 30 40 50 60 70 80 90 100 0 50 100 150 200 250 300% of honest neighbors satisfiedTime (ticks)KoNKS T=0.4KoNKS T=0.25KoNKS T=0.225KoNKS T=0.2 1 1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 0 50 100 150 200 250 300Intercluster/Intracluster RatioTime (ticks)Vivaldi 0%Vivaldi 10%KoNKS 0%KoNKS 10%(a)
(b)
(c)
Figure 3: (a) The median relative error for both Vivaldi and KoNKS with 0% and 10% of frog-boiling attackers. (b)
The average percentage of honest neighbors satisﬁed for honest nodes under attack in KoNKS with T = 0.25. (c) The
CDF for the time required to complete the search algorithm to ﬁnd the best coordinate for each update.
5.4 Overhead
As mentioned before, the communication overhead is small.
Coordinates can be piggybacked on top of application mes-
sages. The processing overhead (the search algorithm to ﬁnd
the optimal coordinate) is also small. Figure 3(c) shows that
the median time for a peer to pick its best coordinate at each
update is 10ms. The code is not multi-threaded, thus it is
expected that the update time can be further reduced.
5.5 Experiments
We also performed our experiments on PlanetLab [15],
with the same implementation details as for the simulator.
Similar results were obtained on PlanetLab and are omitted
due to space constraints.
6. CONCLUSION
Although network coordinate systems can accurately pre-
dict the network latency between two peers, current systems
are not secure in the sense that an adversary can disrupt the
whole network by increasing the error, which in turn means
that the network latency prediction is no longer accurate.
It was previously shown that even the “secure” schemes are
vulnerable to the frog-boiling attack. We introduce a new
decentralized network coordinate system, KoNKS, and ar-
gue that it will be secure not only against known attacks,
but also against future attacks that work within our threat
model. KoNKS aims to achieve consensus among all the
neighbors of a peer, such that, the individual relative error
of each neighbor is less than the threshold T = 0.2.
We found experimentally that setting the threshold to 0.2
produced a low relative error, comparable to Vivaldi, and
allows the network to converge quickly. The median relative
error for KoNKS with no attacker is 0.12, compared to 0.10
for Vivaldi. This means that the network distance prediction
diﬀers from the real network distance by 12%. With 10%
of malicious nodes, the intercluster/intracluster ratio – a
measure of how far away from each other the two networks
are – increases from 1.2 to 1.6, but remains stable, contrary
to the frog-boiling attack on Veracity or Vivaldi, where the
two networks keep getting further apart over time.
Acknowledgments: This work was supported by the Na-
tional Science Foundation under grant CNS-0716025.
7. REFERENCES
[1] I. Abraham and D. Malkhi. Compact routing on euclidian
metrics. In PODC: ACM symposium on Principles of
distributed computing, 2004.
[2] R. A. Bazzi and G. Konjevod. On the establishment of
distinct identities in overlay networks. In PODC: ACM
symposium on Principles of distributed computing, 2005.
[3] E. Chan-Tin, D. Feldman, Y. Kim, and N. Hopper. The
Frog-Boiling Attack: Limitations of Anomaly Detection for
Secure Network Coordinates. SecureComm, 2009.
[4] E. Chan-Tin and N. Hopper. Accurate and Provably Secure
Latency Estimation with Treeple. NDSS, 2011.
[5] D. R. Choﬀnes and F. E. Bustamante. Taming the torrent:
a practical approach to reducing cross-isp traﬃc in
peer-to-peer systems. SIGCOMM Comput. Commun. Rev.,
38(4):363–374, 2008.
[6] J. Cowling, D. Ports, B. Liskov, R. A. Popa, and
A. Gaikwad. Census: Location-Aware Membership
Management for Large-Scale Distributed Systems. In
proceedings of USENIX Technical Conference, 2009.
[7] F. Dabek, R. Cox, F. Kaashoek, and R. Morris. Vivaldi: a
decentralized network coordinate system. In SIGCOMM,
2004.
[8] J. R. Douceur. The sybil attack. In IPTPS ’01:
International Workshop on Peer-to-Peer Systems, 2002.
[9] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King:
estimating latency between arbitrary internet end hosts. In
IMW: ACM SIGCOMM Workshop on Internet
measurment, 2002.
[10] M. A. Kaafar, L. Mathy, C. Barakat, K. Salamatian,
T. Turletti, and W. Dabbous. Securing internet coordinate
embedding systems. SIGCOMM Comput. Commun. Rev.,
37(4):61–72, 2007.
[11] M. A. Kaafar, L. Mathy, T. Turletti, and W. Dabbous. Real
attacks on virtual networks: Vivaldi out of tune. In LSAD:
SIGCOMM workshop on Large-scale attack defense, 2006.
[12] C. Lumezanu, D. Levin, and N. Spring. Peer wise discovery
and negotiation of faster path. HotNets, 2007.
[13] T. S. E. Ng and H. Zhang. Predicting internet network
distance with coordinates-based approaches. In IEEE
INFOCOM, pages 170–179, 2001.
[14] T. S. E. Ng and H. Zhang. A network positioning system
for the internet. In USENIX Technical Conference, 2004.
[15] PlanetLab. http://planet-lab.org, Accessed 2011.
[16] M. Sherr, M. Blaze, and B. T. Loo. Veracity: Practical
Secure Network Coordinates via Vote-based Agreements. In
USENIX Annual Technical Conference, 2009.
[17] Vuze. http://azureus.sourceforge.net, Accessed 2011.
[18] G. Wang and T. E. Ng. Distributed algorithms for stable
and secure network coordinates. In IMC: ACM SIGCOMM
conference on Internet measurement, 2008.
[19] D. J. Zage and C. Nita-Rotaru. On the accuracy of
decentralized virtual coordinate systems in adversarial
networks. In CCS: Proceedings of the ACM conference on
Computer and communications security, 2007.
 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 0.6 0 50 100 150 200 250 300Median Relative ErrorTime (ticks)Vivaldi 0%Vivaldi 10%KoNKS 0%KoNKS 10% 20 30 40 50 60 70 80 90 100 0 50 100 150 200 250 300% of honest neighbors satisfiedTime (ticks)0%5%10%20%30% 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 20 40 60 80 100 120 140CDFTime (ms)