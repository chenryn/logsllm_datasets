另一方面，内核以及内核模式则是能够直接控制所有硬件以及存储的代码。
在内核当中，所有的代码都是共享虚拟地址，甚至可以访问用户模式所有进程的
地址。这也是非常危险的，必须确保内核模式的驱动触及的内容不会影响整个操
作系统的运转。
内核模式主要由一些管理类系统服务组成，例如缓存管理器、通信管理器、
I/O管理器，能源和存储管理器等等。这些服务又是由不同的模块构成，这些模
块专门执行某种任务，进行某种控制，对接硬件等等。
作者摘录了不少定义，接下来是关于虚拟内存的。
虚拟内存是操作系统用来获取比实际可用物理内存更多空间的技术，当物理
内存用完时，系统会采用其它的存储手段。
操作系统使用内存 RAM 来存储操作系统和应用程序运行所需要的文件和数
据。虽然RAM性能强大确保其顺利运行，但总有耗尽的时刻。此时Windows需
要依靠虚拟内存技术。
Windows 会在用户提供的存储单元（传统的机械硬盘或者 SSD）内创建一
个文件来创建虚拟内存。操作系统生成一个pagefile.sys的文件用来存储内
存空间无法存放但是系统运行必须的数据（这个文件隐藏在系统根目录下）。
309
从零开始学IDA逆向 50 Kernel Debugging
图 50-2 虚拟内存
所以当运行一些非常占用资源的程序（例如电子游戏，无需多言）或者几个
任务同时运行时，读者会明显感觉系统变慢，尤其是内存耗尽的时候。在这个时
候，由于内存耗尽，Windows 转向使用这个虚拟内存存储页，虽然避免了系统
不稳定或者崩溃，但是也会导致性能的显著下降。
那么很容易总结出，计算机的内存越多，就越能感受到不同应用程序占用资
源的时差别。尽管近年来内存的价格显著下降但是还是比较高，所以大部分情况
下，还是需要依靠虚拟内存手段。
如图 50-2，每个进程的虚拟地址都是从0x0到0xFFFFFFFF，而操作负
责将它和实际的物理内存进行交换。
310
从零开始学IDA逆向 50 Kernel Debugging
图 50-3 虚拟内存分配
图 50-3中演示了32位进程的虚拟内存分配，从0x0到0x7FFFFFFF是
用户空间，存放应用程序代码，而 0x7FFFFFFF 到 0xFFFFFFFF 是内核空间。
50.2 搭建调试环境
那么现在结束网络概念的摘抄来准备实际的内容，显然无法使用像OLLYDB
G 或者用户模式的 IDA 进行内核的调试，因为它们无法像获取用户模式的应用
程序一样来获取内核的内容，甚至不能进行调试。
首先需要准备一个调试内核的目标系统，而在这里，作者使用VMWARE WO
RKSTATION安装了一个32位Windows 7 sp1的系统，之后就没有进行过任
何更新。
而对于那些使用了更新版本的读者，有时候会发现部分技术不起作用，因为
这些漏洞被修复了，因为教程的目的是从基础开始，所以开始还是先介绍最简单
的内容，然后慢慢地深入。
一旦搭建好环境，作者还会发布一些视频教程，所以最好做好所有准备工作。
作者地本地主机是64位WINSOWS 7 Sp1，并且一直更新，虽然读者可以
使用其它地系统，但是一些操作过程可能会受影响，但结果总是能实现的。
311
从零开始学IDA逆向 50 Kernel Debugging
作者在主机中将会使用IDA6.8，不过有些读者提出已经有泄露版的IDA7.
0了，不过它有个bug，软件会在连接32位内核进行调试时会崩溃。因为作者
使用的是正版，所以收到了修补这个 bug 的补丁，但是显然作者不能发布这个
补丁。如果其它人能解决这个问题的话并且发布补丁的话，读者就可以避免这个
问题，但目前为止作者还是使用IDA6.8版本。
当然主机上还需要安装Windbg，并设置好符号文件下载后存放的路径，在
作者这边是symbols文件夹。
图 50-4 符号文件夹
并且在系统变量和用户变量添加_NT_SYMBOL_PATH。
312
从零开始学IDA逆向 50 Kernel Debugging
图 50-5 环境变量
变量值为：
SRV*c:\symbols*http://msdl.microsoft.com/download/symb
ols
这样就可以从微软符号服务器中下载符号文件了，显然读者也要配置好防火
墙、代理等其它内容，确保能够访问符号服务器。
作者在主机中也安装了旧版本的用于Windows 7的WDK 7.1.0，这个是
可选的。
https://www.microsoft.com/en-us/download/details.aspx?id=11800
而今后如果使用Windows 10主机的话，作者一样会安装Visual Studi
o 2015和WDK 10，而现在Visual Studio 2017已经不允许再使用WDK
了。
作者使用了 2 种方式编译了一个驱动程序，老方式是通过文本编辑器手动
实现，当然还有现代方式，作者要验证它们是否能运行以及有什么差别。
为了测试驱动，读者需要游览
http://www.osronline.com/article.cfm?article=157
注册并且下载OSR DRIVER LOADER，它能帮助读者更方便地加载和测试
驱动。
然后从Microsoft网站下载DEBUG VIEW
https://docs.microsoft.com/en-us/sysinternals/downloads/debugv
iew
313
从零开始学IDA逆向 50 Kernel Debugging
以上都准备好的话，最后下载Virtual KD。
http://virtualkd.sysprogs.org/download/
目前为止最新的版本是3.0，如果发布新版本的话，就用新版本。
双击自动解压。
图 50-6 自解压程序
图 50-7 Virtual KD
如图 50-7，target文件夹需要复制到远程虚拟机中，而其它文件保留在
主机中。
一旦将target文件夹复制到远程机器以管理者身份运行vminstall。
图 50-9中的选项作者尝试了几次，如果在Windows 7中不替换的话就
无法运行成功，读者可以保存一个虚拟机快照，如果不成功的话再回退重新尝试。
在点击安装之前，将这个名称保存到主机上的一个文本文件之中，然后按图
314
从零开始学IDA逆向 50 Kernel Debugging
50-10所示勾选并点击安装。
图 50-8 复制到远程机器
图 50-9 替换kdcom.dll
图 50-10 运行安装
315
从零开始学IDA逆向 50 Kernel Debugging
如果一切顺利的话，此时重启的时候会冻结，就是这样，因为这是错误的安
装方法。此时应该启动主机上的Virtual KD的另一部分，使用管理员身份运
行permissions.exe，启动之后再回到虚拟机中点击Yes重启。
图 50-11 先不要点yes
图 50-12 启动项
如图 50-12，启动管理器给出了正常启动和开始调试（高亮）2个选项，
316
从零开始学IDA逆向 50 Kernel Debugging
作者选择开始调试，但是系统正常启动，没有调试成功。这时候不是每个软件都
需要重新安装，所以作者又重新启动了一遍观察是否还是这样。
重启之后没有任何改变。
图 50-13 点击修复注册表
作者点击 kdpatch 文件修复注册表，然后重新安装 vminstall，查看这
次是否奏效。
图 50-14 vmmon64
而再次启动之后又是正常启动，在主机中如果 vmmon64 窗口 OS 一栏下没
有YES标记，说明某些东西运行失败。
经过几次尝试之后，作者觉得可能需要使用远程系统本身的重启而不是通过
vmware菜单，如果有效的话。
317
从零开始学IDA逆向 50 Kernel Debugging
图 50-15 通过系统本身进行重启
系统启动的时候被冻结。
图 50-16 YES
OS一列下面显示Yes，如果选择了START DEBUGGER AUTOMATICALLY，
318
从零开始学IDA逆向 50 Kernel Debugging
此时应该显示Yes，如果DEBUGGER PATH设置正确，vmmon64应该找到该路
径下的windbg.exe，并且启动Windbg。但是这次自动运行成功，说明路径是
正确的，所以RUN DEBUGGER选项会连接Windbg，启动并且开始调试整个系
统。
图 50-17 启动Windbg
50.3 查看进程命令
图 50-18 break
319
从零开始学IDA逆向 50 Kernel Debugging
在 Windbg 中按 G 键，然后系统继续启动，一旦登录远程系统，就可以完
全转到Windbg，从DEBUG菜单中选择break，或者ctrl+break键。
运行 !Process -1 0命令：
kd> !process -1 0
PROCESS 83fc4a20 SessionId: none Cid: 0004 Peb: 00000000 Paren
tCid: 0000
DirBase: 00185000 ObjectTable: 87c01a88 HandleCount: 466.
Image: System
这就是系统进程。
然后输入! Process 0 0命令查看进程清单
kd> !process 0 0
**** NT ACTIVE PROCESS DUMP ****
PROCESS 83fc4a20 SessionId: none Cid: 0004 Peb: 00000000 Paren
tCid: 0000
DirBase: 00185000 ObjectTable: 87c01a88 HandleCount: 466.
Image: System
PROCESS 8502b3f8 SessionId: none Cid: 010c Peb: 7ffdd000 Paren
tCid: 0004
DirBase: 3ec2d020 ObjectTable: 88c1f178 HandleCount: 29.
Image: smss.exe
PROCESS 85771d40 SessionId: 0 Cid: 016c Peb: 7ffdf000 ParentCi
d: 0164
DirBase: 3ec2d060 ObjectTable: 96a4b590 HandleCount: 504.
Image: csrss.exe
PROCESS 856cd530 SessionId: 0 Cid: 0194 Peb: 7ffdf000 ParentCi
d: 0164
DirBase: 3ec2d0a0 ObjectTable: 96a4d5e0 HandleCount: 75.
Image: wininit.exe
PROCESS 856f6530 SessionId: 1 Cid: 019c Peb: 7ffdd000 ParentCi
d: 018c
320
从零开始学IDA逆向 50 Kernel Debugging
DirBase: 3ec2d040 ObjectTable: 96a52b10 HandleCount: 179.
Image: csrss.exe
PROCESS 8573e530 SessionId: 1 Cid: 01d8 Peb: 7ffd6000 ParentCi
d: 018c
DirBase: 3ec2d0c0 ObjectTable: 96b9c620 HandleCount: 108.
Image: winlogon.exe
PROCESS 859ad030 SessionId: 0 Cid: 0208 Peb: 7ffdf000 ParentCi
d: 0194
DirBase: 3ec2d080 ObjectTable: 96a52ac8 HandleCount: 216.
Image: services.exe
PROCESS 84fbd9b0 SessionId: 0 Cid: 0218 Peb: 7ffdb000 ParentCi
d: 0194
DirBase: 3ec2d0e0 ObjectTable: 87cc3268 HandleCount: 556.
Image: lsass.exe
PROCESS 859c1030 SessionId: 0 Cid: 0220 Peb: 7ffdc000 ParentCi
d: 0194
DirBase: 3ec2d100 ObjectTable: 96b610d8 HandleCount: 141.
Image: lsm.exe
PROCESS 85a42708 SessionId: 0 Cid: 0278 Peb: 7ffdd000 ParentCi
d: 0208
DirBase: 3ec2d120 ObjectTable: 81f66f58 HandleCount: 352.
Image: svchost.exe
PROCESS 85a55030 SessionId: 0 Cid: 02b0 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d140 ObjectTable: 81faf9d8 HandleCount: 53.
Image: vmacthlp.exe
PROCESS 85a69030 SessionId: 0 Cid: 02d8 Peb: 7ffdd000 ParentCi
d: 0208
DirBase: 3ec2d160 ObjectTable: 81f699c8 HandleCount: 267.
Image: svchost.exe
PROCESS 8596e928 SessionId: 0 Cid: 0350 Peb: 7ffd4000 ParentCi
321
从零开始学IDA逆向 50 Kernel Debugging
d: 0208
DirBase: 3ec2d1a0 ObjectTable: 81f769d8 HandleCount: 412.
Image: svchost.exe
PROCESS 85abc030 SessionId: 0 Cid: 0378 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d1c0 ObjectTable: 8a6a1e98 HandleCount: 397.
Image: svchost.exe
PROCESS 85ac2030 SessionId: 0 Cid: 0394 Peb: 7ffd9000 ParentCi
d: 0208
DirBase: 3ec2d1e0 ObjectTable: 8a6ab3b0 HandleCount: 1027.
Image: svchost.exe
PROCESS 85b234b8 SessionId: 0 Cid: 0434 Peb: 7ffd6000 ParentCi
d: 0208
DirBase: 3ec2d200 ObjectTable: 8a6d6a08 HandleCount: 536.
Image: svchost.exe
PROCESS 85b5ec88 SessionId: 0 Cid: 0484 Peb: 7ffda000 ParentCi
d: 0208
DirBase: 3ec2d220 ObjectTable: 8a73fb70 HandleCount: 376.
Image: svchost.exe
PROCESS 85710148 SessionId: 0 Cid: 04f0 Peb: 7ffd8000 ParentCi
d: 0208
DirBase: 3ec2d240 ObjectTable: 81fac1b8 HandleCount: 335.
Image: spoolsv.exe
PROCESS 8571e030 SessionId: 0 Cid: 0514 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d260 ObjectTable: 91405ec8 HandleCount: 334.
Image: svchost.exe
PROCESS 85c02900 SessionId: 0 Cid: 05b0 Peb: 7ffdd000 ParentCi
d: 0208
DirBase: 3ec2d280 ObjectTable: 93cf2628 HandleCount: 83.
Image: VGAuthService.exe
322
从零开始学IDA逆向 50 Kernel Debugging
PROCESS 85c12bb8 SessionId: 0 Cid: 05dc Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d2a0 ObjectTable: 81ef5558 HandleCount: 291.
Image: vmtoolsd.exe
PROCESS 85c4d610 SessionId: 0 Cid: 06d0 Peb: 7ffdf000 ParentCi
d: 0208
DirBase: 3ec2d2c0 ObjectTable: 9168ae58 HandleCount: 101.
Image: svchost.exe
PROCESS 85761d40 SessionId: 0 Cid: 076c Peb: 7ffdf000 ParentCi