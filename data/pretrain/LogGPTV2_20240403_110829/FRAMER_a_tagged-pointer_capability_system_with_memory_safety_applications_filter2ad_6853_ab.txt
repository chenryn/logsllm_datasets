defined as memory blocks that are 2𝑛-sized and aligned by their
size, where 𝑛 is a non-negative integer. A frame of size 2𝑛 is called
n-frame. A memory object x will intrinsically lie inside at least one
bounding frame, and x’s wrapper frame is defined as the smallest
frame completely containing 𝑥, so there exists only one wrapper
frame for x. For instance, in Fig. 3, each sharp-cornered box repre-
sents a byte, and contiguous coloured bytes are objects allocated
in memory (e.g. object a has a size of 2 bytes). Memory space is
divided to frames illustrated as round-cornered boxes. Objects a,b
and c’s wrapper frames are (𝑛 = 1)-frame (or 1-frame), 4-frame,
and 3-frame, respectively. For 0 ≤ 𝑚 15
Figure 4: Tagged pointer: the tag depends on the value of N
(binary logarithm of the wrapper frame size of a referent
object).
𝑙𝑜𝑔22𝑁)
3.3 Metadata Storage Management
FRAMER’s memory manager places metadata in a header before
the object contents. For instance, in Fig. 5, a, b and c are all
objects containing a header. Using any bounding frame as a frame
of reference, we can encode the location of the object’s metadata
(i.e. header) relative to the base of this frame. We can then derive the
metadata location given an inbound pointer using the following:
(1) the binary logarithm of the bounding frame size (𝑁 =
(2) an offset to a header from the bounding frame base
Given an inbound pointer and a bounding 𝑁-frame, aligned by
2𝑁 by definition, we derive the bounding frame’s base by clearing
the pointer’s 𝑁 least significant bits. This means that once a bound-
ing frame’s 𝑁 value is known to us, we can obtain the frame’s
base without any other information but the address in an inbound
pointer’s 48 lower bits.
Having the value of 𝑁 at hand, we may tag pointers with the
offset from the bounding 𝑁-frame’s base to the header. However,
even with the value of 𝑁 provided, the 16 bits of the tag cannot
hold the large offsets required for some combinations of wrapper
frame size and header location. For instance, a (𝑁 = 20)-object’s
offset (20-frame’s base ∼ the header) may need up to 19 bits.
To stuff the limited space of unused 16 bits of a pointer with both
an arbitrary offset and 𝑁 value, FRAMER divides the virtual address
space into slots with a fixed size of 215 bytes, aligned to their size,
i.e., 15-frames. Slots are set to a size of 215 so that offsets to the
header of objects can be encoded in the unused 15 bits of a pointer
(one bit among 16 is reserved for a flag described subsequently). In
Fig. 5, 𝑑𝑎 is the offset to the header of the object a.
FRAMER then distinguishes between two kinds of objects, de-
pending on their wrapper frame size, namely small-framed and
large-framed objects. Small-framed objects are defined as (𝑁 ≤ 15)-
objects, i.e. objects whose wrapper frame size is less than/equal
to 215. Large-framed objects are defined as (𝑁 > 15)-objects. For
example, in Fig. 5, object a is small-framed, whereas b and c are
large-framed. One extra bit, in particular the most significant, is
used for a flag indicating if the object is small-framed or large-
framed as shown in Fig. 4. We handle objects differently depending
on their kind.
Small-framed Objects. Small-framed objects are completely
3.3.1
contained in a single slot, so any pointer to them is derived to the
slot base by zeroing the 15 least significant bits of the pointer. The
offset of a small-framed object 𝑥’s header from the base of the slot
containing 𝑥 is stored in the 15 bit pointer tag. For instance, in Fig. 5
FRAMER: A Tagged-Pointer Capability System with Memory Safety Applications
we tag pointers to the small-framed object a with 𝑑𝑎 (slot0’s
base ∼ a’s header).
We further turn on the most significant bit of the pointer to
indicate that the particular object is small-framed. FRAMER then
recognises a pointer to a small-framed object by the flag being on
and takes the 15-bit tag as an offset to its header from the base of
the slot containing the object. This way, we avoid storing the value
of 𝑁 for small-framed objects.
In summary, when we retrieve metadata from a header of a
small-framed object (i.e., flag is on), inbound (in-slot) pointers are
derived to the base of the slot by zeroing the 15 least significant
bits (𝑙𝑜𝑔2(𝑠𝑙𝑜𝑡 𝑠𝑖𝑧𝑒) = 15), and then to the address of the header
by adding the offset to the base address of the slot as follows:
// FLAGMASK: (1ULL ¡¡ 63)
// flag is on
offset = (taggedptr & FLAGMASK) ¿¿ 48;
slotbase = untaggedptr & (0ULL ¡¡ 15);
headeraddr = slotbase + offset;
objbase = headeraddr + headersize;
Small-framed objects are overwhelmingly common. Our experi-
ments showed the number of large-framed objects is very low com-
pared to small-framed ones: 1: > 200,000 on average and 1: millions
in some benchmarks. This is fortunate, because the header loca-
tion for small-framed objects is derived from tagged pointers alone,
while large-framed objects require additional bits of information.
These additional bits are provided by entries in a supplementary
table. We stress here that the location of this entry is also derived
using the tag in a way that enables much smaller tables than typical
shadow memory implementations. We describe this encoding next.
3.3.2 Large-framed Objects. Since large-framed objects span sev-
eral slots, zeroing the 15 least significant bits (𝑙𝑜𝑔2 of slot size) of a
pointer does not always lead to a unique slot base, thus the offset
in the tag cannot be solely used to derive their relative location. In
Fig. 5, a pointer to a 16-object b can derive two different slot bases
(slot0 and slot1) depending on the pointer’s value, and that
is the case for 17-object c (slot1 and slot2). In addition, the
offsets from the base of their wrapper frame ((𝑁 > 15)-frame) to
an (𝑁 > 15)-object’s header may not fit in spare bits. Hence, for
large-framed objects, we need to store additional location informa-
tion in our supplementary table, and use a different encoding in the
pointer tag to derive the address of the corresponding entry from
any pointer to the object.
During program initialisation, we create a table holding an entry
for each 16-frame. We call such a frame a division. Each entry
contains one sub-array and the sub-array per division is called
a division array. Each division array contains a fixed number of
entries potentially pointing to metadata headers, in the current
implementation as follows:
typedef struct ShadowTableEntryT –
HeaderTy *divisionarray[48]; // 64-16
DivisionT;
Contrary to small-framed objects, in the tag for large-framed
objects we store the binary logarithm of their wrapper frame size
(i.e., 𝑁 = 𝑙𝑜𝑔22𝑁) as shown in Fig. 4. The address of an entry in a
𝑑𝑎 |ℎ| |𝑡𝑎|
a
slot0
b
c
division0
slot1
17-frame0
slot2
division1
0
b
47 48 0
1 2
c
division0’s array
…
…
division1’s
215
216
217
…
Figure 5: Access to division array: the object a is small-
framed, while b and c are large-framed. 𝑑𝑎 is the offset to
a. ℎ denotes a header and |𝑡𝑎| is the size of a. b and c’s en-
tries are mapped to the same division array. The entries in
the division arrays store their corresponding object’s header
location, while the small-framed object a does not have an
entry. Only one entry of division1’s array is actually used,
since the division is not aligned by 217.
division array is then calculated from an inbound pointer and the
𝑁 value, and the entry holds the address of a header. By definition,
a wrapper frame of an (𝑁 ≥ 16)-object is aligned by its size,
2𝑁, therefore, the frame is also aligned by 216. This implies that a
(𝑁 ≥ 16)-frame shares the base address with a certain division,
and is mapped to that division.
Each (𝑁 ≥ 16)-object maps to one division array, but that
division array contains entries for multiple large-framed objects.
In Fig. 5, both division0 and 17-frame0 are mapped to
division0. Their mapped division (division0) is aligned by
217 at minimum, while division1 is aligned by 216 at max.
The tag 𝑁 can be used as an index into the division array to
associate a header pointer, stored in an entry in the division array,
with each large-framed object mapped to the same division. For
each 𝑁 ≥ 16, at most one 𝑁-object is mapped to one division
array, and the proof is presented in Appendix A.2. We use the value
𝑁 as an index of a division array, and tag 𝑁 in the pointer. Given
a 𝑁 value-tagged pointer (flag==0), we derive the address of an
entry as follows:
// UBASE: division base of userspace’s base
// SCALE: binary logarithm of divisionsize, i.e
. 16
// TABLE: address of a supplementary table
// flag is off
framebase = p & (0ULL ¡¡ N); // p is assumed
untagged here
tableindex = (framebase - UBASE) / (1ULL ¡¡
SCALE);
DivisionT *M = TABLE + tableindex;
headeraddr = M-¿divisionarray[N - SCALE];
The base of the wrapper frame (i.e. the base of the division) is
obtained by zeroing the least significant 𝑁 bits of the pointer. The
address of its division array is then derived from the distance from
C
code
static
lib
LLVM/CLANG
LLVM
IR
link
object
files
hardened
executable
FRAMER passes
binary
lib
FRAMER
other passes
Figure 6: Overall architecture of FRAMER
the base of virtual address space and 𝑙𝑜𝑔2(𝑑𝑖𝑣𝑖𝑠𝑖𝑜𝑛 𝑠𝑖𝑧𝑒) (216).
Finally we access the corresponding entry with the index 𝑁 in the
division array.
Entries in a division array may not always be used, since an entry
corresponds to one large-framed object, which is not necessarily
allocated at any given time, e.g. if object b is not allocated in the
space in Fig. 5, 0th element of division0’s array would be empty.
This feature is used for detecting some dangling pointers, and more
details are explained in Section 5.2.
Unlike existing approaches using shadow space, FRAMER does
not re-align objects to avoid conflicts in entries. Our wrapper frame-
to-entry mapping allows wrapper frames to be overlapped, that
gives full flexibility to memory manager.
We could use different forms of a header such as a remote header
or a shared header for multiple objects, with considering a cache
line, stack frame, or page. In addition, although we fixed the division
size (216), future designs may offer better flexibility in size.
We showed how to directly access per-object metadata only with
a tagged pointer. Our approach gives great flexibility to associate
metadata with each object; gives full freedom to arrange objects
in memory space, that removes padding objects unlike existing
approaches using shadow space. This mechanism can be exploited
for other purposes: the metadata can hold any per-object data.
4 FRAMER IMPLEMENTATION
This section describes the current implementation of FRAMER
which is largely built using LLVM. Additionally, we discuss how
we offer compatibility with existing code.
4.1 Overview
There are three main parts to our implementation: FRAMER LLVM
passes, and the static library (lib), and the binary lib in the dashed-
lined box in Fig. 6. The target C source code and our hooks’ functions
in the static lib are first compiled to LLVM intermediate represen-
tation (IR). Our main transformation pass instruments memory
allocation/release, access, or optionally pointer arithmetic in the
target code in IR. In general, instrumentation simply inserts a call
to lib functions, however, our use of header-attached objects and
tagged pointers requires more transformation at compile-time. The
third part is wrappers around malloc family routines and string
functions. Our customised compiler optimisations are discussed in
Section 6.
We also had to modify the LLVM framework slightly. Our main
transformation is implemented as a LLVM Link Time Optimisation
Myoung Jin Nam, et al.
(LTO) pass for whole program analysis, and runs as a LTO pass on
gold linker [30], however, incremental compilation is also possible.
We also insert a prologue that is performed on program startup.
The prologue reserves address space for the supplementary meta-
data table, but pages are only allocated on demand.
4.2 Memory Allocation Transformations
We instrument memory allocation and deallocation to prepend
headers and update metadata by transforming the target IR code at
compile time.
Stack-allocated Objects (address-taken locals). For each local
4.2.1
allocation of aggregate-type that needs a header, we create a new
object with a structure type that contains two fields, one for the