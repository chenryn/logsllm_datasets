  * `CorbaMessageMediator`初始化
  * `OutputObject`初始化
具体跟进一下代码`_request()`的具体实现在`com.sun.corba.se.impl.protocol.CorbaDelegateImpl#request`：
这里可以看到首先设置了客户端调用信息，之后获取到`ClientRequestDispatcher`也就是客户端请求分派器并调用了`beginRequest()`方法，由于`beginRequest()`方法过于长，我将比较重要的代码直接截下来分析：
首先初始化拦截器，这里的拦截器主要负责拦截返回信息。
之后根据连接状态来确定是否需要新建`CorbaConnection`，由于是第一次进行通信，没有之前的链接缓存，所以需要创建`CorbaConnection`。在创建新链接后，就创建了`CorbaMessageMediator`，这是完成后续数据处理过程中重要的一环。
紧接着通过`CorbaMessageMediator`来创建`OutputObject`，这里其实创建的是一个`CDROutputObject`：
所以底层的数据是由`CDROutputObject`及`CDRInputObject`来处理的。这一点会在后面的反序列化中有所提及。
完成上述初始化过程后需要首先开启拦截器，以防止初始片段在消息初始化期间发送。
最后完成消息的初始化：
将序列化字符写入请求头中，完成消息的初始化，这里所调用的序列化是是`OutputStream`的原生序列化过程。
### 3.2.2 发送并接收请求
发送并接收请求主要是在`_invoke()`方法中完成的：
首先获取到客户端请求分派器，之后调用`marshlingComplete()`方法完成具体的处理流程：
这里涉及到两个关键的处理流程`marshalingComplete1()`及`processResponse()`。
#### marshalingComplete1流程
首先先看一下`marshalingComplete1()`流程：
`finishSendingRequest()`中完成了请求的发送：
可以看到获取了连接信息，将`OutputObject`进行发送。
`waitForResponse()`完成了等待返回接收返回的功能：
通过标志位来判断是否已经接收到了请求，如果接收到请求则把序列化内容进行返回：
#### processResponse流程
`processResponse`的具体实行流程很长，但是关键的运行逻辑只是如下的代码：
这里的`handleDIIReply`是需要着重说明一下，其中`DII`的全名是`Dynamic Invocation
Interface`也就是动态调用接口，这是CORBA调用的一种方式，既可以用`Stub`方式调用，也可以通过`DII`方式调用。目前我们所需要知道的是`handleDIIReply`就是用于处理CORBA调用返回的方法就好：
这里会判断调用的请求是否是`DII`请求，如果是，则会对返回结果及参数进行处理，触发反序列化流程，
**这一点属于`client`端的反序列化利用手法，后面会有文章进行总结，**目前只是将这一个关键单抛出来详细的说一下流程。
这里的`switch
case`就是判断我们前面所提过的IDL的三种参数传递方式，当参数传递方式为`out`和`inout`时将会调用`Any.read_value`方法：
在`TCUtility.unmarshalIn()`中有一个很长的`switch case`，会根据类型来将调用分发到不同的处理方法中，其中有两个链路：
以`read_value()`来举例：
可以看到`read_value()`在选择具体实现的时候是有分支选项的，这其实都可以通过构造来进行指定，这里我们只看`IDLJavaSerializationInputStream`：
会直接触发JDK原生反序列化。
也就是只要在`server`端精心构造打包结果，当`client`端发起`DII`的rpc请求处理请求返回时会触发JDK原生的反序列化流程。
### 3.2.3 反序列化流程
反序列化触发在`org.omg.CORBA.ObjectHelper#read()`方法中，最终是调用`CDRInputStream_1_0#read_Object`来处理，这里我只截关键点：
`createStubFactory()`会指定class的加载地址为提取出来的`codebase`：
可以看到具体的远程调用逻辑还是使用的RMI完成的。当完成远程类加载后便初始化`StubFactoryStaticImpl`：
这里会设定`stubClass`，后面会使用使用`makeStub()`方法完成实例化。
在完成了远程类加载后，就需要将远程的类变为常规的本地类，这一部分的工作是由`internalIORToObject()`方法完成的：
红框所示的两处最终的逻辑都一样，都是`stubFactory.makeStub()`:
我们在`createStubFactory()`中已经将完成远程类加载的类置为`stub`，在`makeStub()`方法中则完成将其进行实例化的操作，至此便完成了全部的rpc流程。
## 3.3 小结
通过上文对代码的跟踪，不难看出三端都是通过序列化数据来进行沟通的，都是`CDROutputObject`与`CDRInputObject`的具体实现。所以说`CDROutputObject`与`CDRInputObject`是CORBA数据的底层处理类，当在实际序列化/反序列化数据时，具体的处理流程大致可分为两类：
  * `CDROutputStream_x_x`/`CDRInputStream_x_x`
  * `IDLJavaSerializationOutputStream`/`IDLJavaSerializationInputStream`
这里可以将这两类简述为：
  * CDR打/解包流程
  * JDK serial 序列化/反序列化流程
可以看到只有在JDK serial流程中，才会触发CORBA的反序列化流程。CDR更多是用于完成rpc流程。
无论是在接收或者发送的流程中，我们都可以看到本质上都是底层数据（`CDROutputObject`或`CDRInputObject`）->`CorbaMessageMediator`的处理过程，具体的发送与接收请求都是通过`CorbaMessageMediator`来管控与拦截的，所以想要具体分析CORBA通信过程中请求的发送与接收方式，只需要以`CorbaMessageMediator`为入手点即可。
无论`client
side`还是`servant`在接收请求时基本上都是通过`com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl#read`或`com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl#doWork`处理请求到`com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl#dispatch`，后续会因为message类型的不同而进入到不同的处理逻辑中。在选取处理逻辑时主要凭借2点：
  * header信息决定的版本
  * message信息决定的具体类型
# 0x04 CORBA网络通信分析
纵观整个CORBA的通信流程，不难看出大致分为3个部分：
  * 与`orbd`通信获取`NamingService`
  * `servant side`注册
  * rpc通信
在具体的流量中也可以清楚的看到整个过程。（由于我是在本地做的测试，所以在流量中的源地址和目的地址都是127.0.0.1）
这里的2条流量展现了与`orbd`通信获取`NamingService`的流程：
这里着重看一下返回包:
可以看到返回了`RootPOA`，且将`NameService`指向`orbd`处的NC0文件。
在获取到`NamingService`后，在`servant side`注册前，有如下两端流量：
这段流量对应的代码是：
主要的作用是用于检查获取到的`NamingService`是否是`NamingContextExt`的实现。
实现注册的流量如下:
`op=to_name`对应的代码是：
可以简单的理解为设定引用名。
`op=rebind`对应的代码是：
这一部分就是通过GIOP传输的CORBA接口的一部分，Wireshark可以将其解码，并将其协议类型标注为`COSNAMING`，具体来看一下请求包：
这里在IOR中我们注意到指定了：
  * `type_id`：用于指定本次（资料库或者说是引用）注册的id（实际上是接口类型，就是用于表示接口的唯一标识符），用于实现类型安全。
  * `Profile_host`、`Profile_port`：`servant side`地址。
  * `Profile ID`：指定了`profile_data`中的内容，例如这里的`TAG_INTERNET_IOP`所指定的就是`IIOP Profile`。
通过IOR信息表示了`servant side`的相关rpc信息。
在rpc流程中的关键流量就是rpc调用，这里不再赘述获取`NamingService`的流量，直接看远程调用流量：
这里涉及到3.2中所说到的发送和接受请求的流程，想要了解详情可以回看这一部分的内容。简单来说可以把这一部分理解成如下流程：
  * 根据引用名获取`servant side`的接口`Stub`。
  * 利用`Stub`中的代理方法二次发起请求，通过发送方法名在`servant side`调用具体的方法，`servant side`将方法的结果返回给`client side`完成rpc调用。
# 0x05 检测方式
由于CORBA的数据传递与传统的序列化传输方式不同，即在二进制流中没有`ac ed 00
05`的标识，所以单纯从流量的角度是很难识别的，只能从流量上下文中进行识别。
通常可以从这两个角度来进行判断：
  * 请求ip是否为白名单中的ip
  * 是否存在外部ip向`orbd`发送`COSNAMING`请求
以weblogic为例，正常的CORBA交互模型应为白名单（业务）ip向weblogic（codebase或中间件）发送rpc请求，完成远程类加载，同时白名单ip处应该有缓存机制以防止频繁向weblogic发送GIOP请求。而恶意攻击者在尝试进行攻击时可能产生如下的反常动作：
  * 非白名单ip向weblogic发送GIOP请求
  * 非白名单ip向weblogic发送`COSNAMING`请求
  * 白名单ip但是非开发机ip向weblogic发送`COSNAMING`请求
第一点就不赘述了，第二点和第三点解释一下。通过0x04中对流量的分析，我们知道当一个`servant
side`尝试向`orbd`注册新的引用时会产生`COSNAMING`类型的流量，那么`COSNAMING`类型的流量就可以作为一个判别注册的标志，如果是非权限区域（非开发机或者内部云平台）的机器尝试进行注册一个新的引用的话，就有可能标明存在攻击尝试。
当然这并不是一种非常准确且高效的检测方式，但是由于CORBA的特殊性，除非上RASP或者在终端agent上加行为检测规则，想要单纯的通过镜像流量做到监测，是非常难的。
Reference
  1. 
  2. 
  3. 
  4. 
  5. 
* * *