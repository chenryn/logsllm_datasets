相关机器配置需求可参考官方文档：服务器主机要求(
Server 2012虚拟机的配置如下：
> 6G内存、60GB硬盘空间、处理器核心总数4个
安装过程如下：
  1. 双击`CxSetup_8.6.0.exe`运行安装，当进行到“提示输入license文件”时，选择“Request New License”，随后等待安装完成；
  2. 待安装完成后，将`Crack`目录拷贝到Checkmarx的安装目录下（例如默认的安装目录：`C:\Program Files\Checkmarx`）；
  3. 随后进入Checkmarx安装目录下的`Crack`目录，以管理员权限运行`CRACK.bat`,待脚本执行完成，Checkmarx就被破解成功了；
  4. 双击桌面上的"Checkmarx Portal"图标开始使用Checkmarx 。
相关过程安装截图如下：
  * **运行** ：
第一次运行页面会提示设置用户名密码，随后即可使用用户名密码登录：
登录成功后，页面如下所示：
在“我的配置”页面，可配置语言为中文简体：
#### 2.5.3 扫描测试
点击“项目组和扫描”->
“创建新的扫描”，一步步进行配置，在源码获取方式处上传zip格式代码文件，配置调度（现在执行/或配置其他时间执行），随后即可进行扫描：
正在扫描中的任务，会在“项目组和扫描” -> “队列”中显示。扫描完成的任务，可以在“项目组和扫描” -> “全部扫描”或“仪表盘” ->
"项目状态"中显示：
扫描完成截图如下所示：
#### 2.5.4 扫描结果分析
汇总结果如下（ **误报率及漏报率仅根据官方最新版本默认配置，实际测试结果进行主观大致预估** ）：
Benchmark计分器自动分析Checkmarx结果如下图所示：
**上表中的关键字** ：
  * TP: 真实漏洞中，代码分析工具正确扫描出来的真实漏洞数量；
  * FN: 真实漏洞中，代码分析工具误报的漏洞数量；
  * TN: 假的漏洞中，代码分析工具正确未扫描出来的漏洞数量；
  * FP: 假的漏洞中，代码分析工具误报成真漏洞的数量；
  * TPR = TP / ( TP + FN ): 代码分析工具正确检出真实漏洞的检出率；
  * FPR = FP / ( FP + TN ): 代码分析工具将假漏洞报告为真实漏洞的误报率；
  * Score = TPR - FPR: 随机猜测与标准线的差距；
#### 2.5.5 调研结果
本次对Checkmarx的调研结果如下：
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 将代码进行语法树分析，分析代码中的数据流，并将整个代码中的数据流存储到sql
server数据库中，可以理解成一张庞大的数据流网，这个分析比较吃内存。随后匹配规则（checkmarx自带了各种规则，也可以自己编写规则），规则也叫query，意思就是从整个数据流网中查找我们关心的数据流。
| **优点** ：1. 误报率/漏报率表现良好；2. 对CI集成很友好，支持多种集成方式；3. 提供接口，可进行定制开发；4.
web页面操作简单，报告类型较丰富；  
是否支持持续集成 | Checkmarx支持与Jenkins、TFS、 Bamboo、TeamCity等做持续集成：[CI/CD
Plugins](https://checkmarx.atlassian.net/wiki/spaces/SD/pages/1339129990/CI+CD+Plugins)，也有提供接口可进行二次开发做持续集成
| **缺点：** 1\. 部署及扫描分析过程依赖机器配置；2. 默认的规则基本上实用性比较差，自己定制规则比较复杂费时；3.
前后端分离的项目分析无法支持，比如后端spring mvc，前端vue就无法关联分析了；4. 也不支持 vue、react等框架文件的分析；  
扫描速度 | 速度一般（依赖机器配置） |  
数据输入方式 | 通过git、svn、或者上传.zip格式的源码包 |  
部署方式 | Windows + SQL Server，支持集中部署、分布式部署、高可用部署 |  
支持语言 |
支持25+种开发语言（参见：
|  
漏洞覆盖 |
支持漏洞类型非常多（参见：  
#### 2.5.6 参考资料
  * [Checkmarx官方文档-知识中心](https://checkmarx.atlassian.net/wiki/home)；
### 2.6 SonarQube
#### 2.6.1 介绍
SonarQube通过检查代码并查找错误和安全漏洞来提供静态代码分析。SonarQube是由SonarSource开发的一款开源工具。其中Community
Edition版本提供静态代码分析功能，可支持Java，JavaScript to Go和Python等约15种语言。通过 SonarQube
可以检测出项目中潜在的Bug、漏洞、代码规范、重复代码、缺乏单元测试的代码等问题，并提供了 UI 界面进行查看和管理。
架构如下图所示：
#### 2.6.2 安装部署
  * **docker部署SonarQube：**
    # 创建个独立网段（因为在测试机部署，可能跟其他同事的业务网段冲突，所以我这边直接建个新网段）
    docker network create --subnet 172.41.0.0/16 --driver bridge sonarnet
    docker pull sonarqube:8.8-community
    docker run --name sonarqube --net=sonarnet \
       --restart always  \
       -p 9000:9000 \
       -v /sonarqube/data:/opt/sonarqube/data \
       -v /sonarqube/extensions:/opt/sonarqube/extensions \
       -v /sonarqube/logs:/opt/sonarqube/logs \
       -d sonarqube:8.8-community
  * **安装中文汉化包：**
Administration -> Marketplace ，搜索 chinese ， install Chinese Pack，随后重启即可：
  * **安全相关规则集成：**
SonarQube自带的规则对代码Bug的检查支持比较友好，跟安全相关的规则比较少。网上查找了很多相关资料，针对PHP的安全相关规则很少，故后文对PHP的扫描测试只能使用默认规则；针对Java比较好的方案是：在SonarQube使用Dependency-Check + SpotBugs的FindBugs Security Audit规则：
  * [Dependency-Check](https://www.owasp.org/index.php/OWASP_Dependency_Check)：Owasp开发的一款工具，用户检测项目中的依赖关系中是否包含公开披露的漏洞；
  * [SpotBugs](https://github.com/spotbugs/sonar-findbugs/)：是Findbugs的继任者（Findbugs已经于2016年后不再维护），用于对Java代码进行静态分析，查找相关的漏洞，SpotBugs比Findbugs拥有更多的校验规则。
> 安装FindBugs：
> 安装Dependency-Check：
#### 2.6.3 扫描测试
由于SonarQube对于安全问题的扫描，依赖第三方的规则。故下文的扫描测试，我们分别使用不同的规则进行测试。
##### 2.6.3.1 扫描PHP项目（使用SonarQube默认规则）
使用默认的规则，故直接默认配置即可。步骤如下：
新建项目 -> 创建令牌 -> 构建技术选择PHP、操作系统选择Linux：
参照上图中的示例命令，扫描端执行的命令如下：
    /home/sonar-scanner-4.6.0.2311-linux/bin/sonar-scanner \
    -Dsonar.projectKey=Dvwa-Scan \
    -Dsonar.sources=. \
    -Dsonar.host.url=http://10.0.3.158:9000 \
    -Dsonar.login=f3111c1b761d376c5091d5cf674390efdd41df09
待扫描完成后，页面上就可以看到扫描数据。
##### 2.6.3.2 扫描Java项目（使用SonarQube默认规则）
使用默认的规则，故也直接默认配置即可。步骤如下：
新建项目 -> 创建令牌 -> 构建技术选择Maven、操作系统选择Linux：
参照上图中的示例命令，扫描端执行的命令如下：
    mvn sonar:sonar \
    -Dsonar.projectKey=benchmark_findbugs_scan \
    -Dsonar.java.binaries=target/classes \
    -Dsonar.host.url=http://10.0.3.158:9000 \
    -Dsonar.login=27a9b110822fcfd1828d8ac0f1a07c6b857d331a
##### 2.6.3.3 扫描Java项目（使用Dependency-Check + SpotBugs的FindBugs Security
Audit规则）
扫描端执行的命令如下使用及扫描过程会相对繁琐，具体流程如下：
(1) 编译项目：
    # 扫描端：待扫描的源码目录下先编译项目
    mvn clean install -DskipTests
(2) Dependency扫描并生成xml报告：
    # 扫描端：使用Dependency进行扫描，并生成xml报告
    /home/dependency-check/bin/dependency-check.sh -s /home/source_code/java-sec-code-master/target/java-sec-code-1.0.0.jar -f XML -o /home/java-sec-code-report.xml
(3) SonarQube页面配置：
新建项目 -> 创建令牌 -> 构建技术选择其他、操作系统选择Linux：
(4) Dependency的xml报告导入SonarQube并执行SonarScanner扫描:
    /home/sonar-scanner-4.6.0.2311-linux/bin/sonar-scanner -Dsonar.host.url=http://192.168.50.168:9000 -Dsonar.login=28f66633ad3b5c89fcbd80022011f519f0868b85 -Dsonar.projectKey=java_sec_scan_dependency -Dsonar.java.binaries=/home/source_code/java-sec-code-master -Dsonar.dependencyCheck.reportPath=/home/java-sec-code-report.xml -Dsonar.dependencyCheck.htmlReportPath=/home/java-sec-code-report.html
> **故针对Java语言的扫描，使用Dependency-Check + SpotBugs的FindBugs Security
> Audit规则的方案，效果最好。**
扫描结果对比如下图所示：
#### 2.6.4 扫描结果分析
汇总结果如下（ **误报率及漏报率仅根据官方最新版本默认配置，实际测试结果进行主观大致预估** ）：
_注：针对PHP使用的是SonarQube默认规则，扫描结果中确认的安全漏洞基本很少，故我们使用需要界面复审Security
Reports中的结果和确认的安全漏洞进行对比分析。_
#### 2.6.5 调研结果
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 基于AST抽象语法树 | **优 点** ：1. 项目开源，便于做一些定制开发；2. 可针对不同的漏洞类型自定义规则；3.
对可持续集成支持较好；4. 插件支持，方便使用（例如findbugs等）;  
是否支持持续集成 | 对CI集成支持较好且配置较简单 | **缺点：** 1\. 偏代码质量检测，对安全漏洞检测效果一般；2.
因为findbugs、Dependency等插件支持，针对Java的安全扫描效果优于PHP；3.
Sonarqube与Rips合并之后，社区版本的部分功能被移到商业版本中，例如报告生成。  
扫描速度 | 良好 |  
数据输入方式 | 支持git链接输入或在sonar-scanner指定项目目录 |  
部署方式 | 可支持单节点部署/集群部署， SonarQube(提供web页面)可通过docker部署，sonar-scanner支持Linux/Windows等终端运行。详见：（SonarQube Server
安装方法： |  
支持语言 | 社区版本支持15种常见开发语言 |  