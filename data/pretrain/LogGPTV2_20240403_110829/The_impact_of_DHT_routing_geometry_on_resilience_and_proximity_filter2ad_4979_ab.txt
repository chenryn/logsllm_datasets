in slightly diﬀerent ways; Chord uses the clockwise distance
while Viceroy uses the minimum of the clockwise and anti-
clockwise distance. This diﬀerence only changes the con-
stants in our ﬂexibility bounds.
try. In Chord, a node with identiﬁer (say) a maintains log n
neighbors (called ﬁngers) where the ith neighbor is the node
closest to a + 2i on the circle. Hence, a node can route
to an arbitrary destination in log n hops because each hop
cuts the distance to the destination by half. Although the
original Chord proposal deﬁnes a speciﬁc set of neighbors
for a given node identiﬁer, this rigidity in neighbor selection
is in no way fundamental to a ring geometry.5 Speciﬁcally,
routing on a ring can be achieved in O(log n) hops even if
node a were to pick its ith neighbor as any node in the range
[(a + 2i), (a + 2i+1)] rather than the exact node closest to
a + 2i on the circle as originally deﬁned by Chord. This im-
plies that in terms of the ﬂexibility of neighbor selection, a
ring geometry (like the tree) has 2i possible options in pick-
ing its ith neighbor for a total of approximately n(log n)/2
possible routing tables for each node. Having selected one
of its possible routing tables, we examine the ﬂexibility in
route selection now available to the node in terms of which of
its neighbors make progress towards a destination. For two
nodes that are initially O(n) distance apart, the ﬁrst node
has approximately log n of its neighbors that make progress
towards the destination. After the ﬁrst hop, the next node
will have approximately (log n)−1 possible next hops and so
on to yield a total of approximately (log n)! possible routes
for a typical path. Note that all these paths respect the
eﬃciency bound of O(log n) hops. This is because routing
from the source to destination uses log n hops that span ex-
ponentially diﬀerent distances – while greedy routing takes
these hops in the decreasing order of their spans, any path
that takes each of the diﬀerent spans just once will reach the
destination in log n hops irrespective of the order in which
the spans are taken. Later, in section 4.1, we will deﬁne a
rule that allows Chord to take each of these diﬀerent spans
just once without imposing any order.
While our discussion above is limited to paths that are
bounded by log n hops, Chord also allows paths that are
much longer than log n. This is accomplished by taking
multiple hops of smaller spans instead of a single hop of
large span. For example, one could take two successive hops
using i − 1th neighbors of span 2i−1 each instead of a single
hop using ith neighbor of span 2i.
2.3.5 XOR
Kademlia [15] deﬁnes a novel routing metric – the distance
between two nodes is the numeric value of the exclusive OR
(XOR) of their identiﬁers. For lack of a more intuitive name,
we use the term XOR geometry to refer to the geometry in-
terpretation yielded by this XOR metric. A Kademlia node
picks log n neighbors, where the ith neighbor is any node
within an XOR distance of [2i, 2i+1] from itself. Examina-
tion of the above deﬁnition of neighbors reveals that Kadem-
lia’s routing table permits exactly the same routing entries
as for tree geometries such as PRR. Moreover, by routing
greedily on the XOR metric, Kademlia chooses exactly the
same routes as PRR when the routing table is fully popu-
lated (i.e., no failures); successive hops “ﬁx” bits from left
to right. Under failures, however, Kademlia behaves diﬀer-
ently since, unlike on the tree, even if a node cannot ﬁx the
highest diﬀering bit it can still make progress in the XOR
distance to the destination, eﬀectively ﬁxing a lower order
5This is a fairly well recognized fact in the DHT community
and by the developers of Chord, and we do not claim to be
the ﬁrst to make this observation.
property
tree
hypercube
ring
butterﬂy
xor
Neighbor Selection
Route Selection (optimal paths)
Route Selection (non-optimal paths)
Natural support for
sequential neighbors?
nlog n/2
1
-
no
1
c1(log n)
-
no
nlog n/2
c1(log n)
2c2(log n)
yes
1
1
-
no
nlog n/2
1
c2(log n)
no
hybrid
nlog n/2
1
c2(log n)
Default routing: no
Fallback routing: yes
Table 1: The neighbor and route selection ﬂexibility at any node in various routing geometries. c1 and c2 are
small constants.
bit. Thus, multiple paths exist between a source and desti-
nation, but these paths are not of equal lengths. This stems
from the fact that the distance of a node’s neighbors with
respect to the node have little bearing on their distance to
the destination. Intuitively, even though Kademlia oﬀers the
ﬂexibility of ﬁxing lower order bits before higher ones, the
lower order ﬁxed bit need not be preserved by later routing
hops that ﬁx higher order bits.
2.3.6 Hybrid
So far we have only presented pure geometric interpre-
tations. However, some routing algorithms employ dual
modes, where each mode inspires a diﬀerent geometric inter-
pretation; we call these hybrid geometries. We use Pastry
as our canonical example of a hybrid geometry because it
combines the use of a tree geometry with that of a ring ge-
ometry. Node identiﬁers are regarded as both the leaves of
a binary tree and as points on a one-dimensional circle. In
Pastry, the “distance” between a given pair of nodes is thus
computed in two diﬀerent ways – the ﬁrst is the tree distance
between them, the second is the cyclic numeric distance be-
tween them. By default, Pastry uses the tree distance as its
metric for routing and only falls back to using the ring ge-
ometry when the tree-based routing fails. Thus, its freedom
of neighbor selection is the same as Tree geometries. The
route selection ﬂexibility is more subtle. The hybrid geome-
try allows one to take hops that do not make progress on the
tree but do make progress on the ring; these paths however
do not necessarily retain the log n bound on the number of
hops.6
While we use Pastry as our canonical example, we point
out that other DHTs can, and do, make use of a similar
hybrid geometry, which we now discuss.
As mentioned earlier, sequential neighbors are those that
make progress towards all destination identiﬁers. This re-
quires a single global ordering on the distances between
nodes, and thus the ring is the only geometry that natu-
rally supports sequential neighbors. However, several of the
designs can be augmented to include sequential neighbors,
especially for recovery, essentially by deﬁning a separate or-
dering (aside from the ordering used for normal routing). In
particular, Viceroy and CAN (see [18]) have incorporated
sequential neighbors. They are examples, like Pastry, of
hybrid geometries. Our evaluation in this paper will ex-
plore the extent to which sequential neighbors, both nat-
6One might argue that even on the tree, similar multiple
paths exist if we were to allow “sideways” hops that main-
tain, but do not increase, the length of the longest preﬁx
matched. However this would require some rule to prevent
looping which would require an ordering of nodes that share
the same preﬁx. This is precisely what Pastry achieves in
deﬁning a second distance metric.
urally supported and artiﬁcially added, improve proximity
and resilience.
Table 1 summarizes our discussion on the diﬀerent routing
geometries and their ﬂexibility. Note that we enter slightly
diﬀerent constants for the ﬂexibility in route selection for
the diﬀerent geometries. Speciﬁcally, we claim that the Ring
and Hypercube have twice the ﬂexibility in route selection
compared to the Hybrid and XOR geometries.7 Our simu-
lation results in later sections validate this diﬀerence.
3. STATIC RESILIENCE
One of the reasons DHTs are seen as an excellent platform
for large scale distributed systems is that they are resilient
in the presence of node failures. This resilience has three
diﬀerent aspects, only one of which we explore here:
Data replication: When nodes fail, the data (or pointers)
they are holding go with them. Measures must be
taken so that this doesn’t result in the loss of data from
the system as a whole. Several (complementary) ap-
proaches have been proposed, most notably data repli-
cation [3, 4].
In our discussion, we assume that the
degree of replication is adequate to prevent data loss,
so the remaining question is whether one can route in
the presence of failures.
Routing recovery: When failures occur, they deplete the
routing tables in the remaining nodes. Recovery algo-
rithms are used to repopulate the routing tables with
live nodes, so that routing can continue unabated.
Static resilience: However, the recovery algorithms take
some time to restore the routing tables, so one should
still ask how well DHTs can route before routing state
is restored. We call this static resilience because we
keep the routing table static, except for deleting failed
nodes, and ask how well routing performs. Hence,
static resilience measures the extent to which DHTs
can route around trouble even without the aid of re-
covery mechanisms that ﬁx trouble. Thus, static re-
silience gives a measure of how quickly the recovery
algorithm has to work; DHTs with low static resilience
require much faster recovery algorithms to be similarly
robust.
7To see why this is true, consider a node on the ring routing
to a destination at a distance between [2i, 2i+1] from itself;
for this node all of its ﬁrst i neighbors make progress to
the destination. Likewise, on the Hypercube, if a node dif-
fers from the destination on k bits then its k corresponding
neighbors all make progress. In the Hybrid and XOR how-
ever, given a destination at a distance of between [2i, 2i+1],
a node’s ith neighbor will only make progress if its ith bit
diﬀers from the destination’s which is only true half the time.
While several papers consider resilience in the presence
of active recovery algorithms, only a few examine static re-
silience. References [18, 22] address this issue in the contexts
of CAN and Pastry respectively, while some recent work in
reference [13] examines how certain graph theoretic proper-
ties of a overlay structure aﬀect its static resilience.
Routing
Geometry Hopcount Hopcount
Average
Median
XOR
Ring
Tree
Butterﬂy
Hypercube
Hybrid
7.7
7.4
7.7
21.4
7.7
7.7
8
7
8
21
8
8
90 Percentile
Hopcount
10
10
10
28
10
10
Table 2: Comparing the hopcounts for diﬀerent
DHTs over a 65,536 node network with no failures.
To test for static resilience, we use a 65,536 node network.
We allow diﬀerent DHTs to populate their routing tables,
ensuring that all the geometries (with the exception of the
Butterﬂy8) store the same amount of state (number of the
routing table entries) at any node. As shown in Table 2, the
performance of the geometries (with the exception of the
Butterﬂy) are very similar when there are no node failures.
We now let some ﬁxed fraction of uniformly chosen nodes
fail and remove the entries corresponding to the failed nodes
from the routing tables. We then try to route from each live
node to every other live node and ask how often the routing
can succeed. In particular, we look at two metrics:
• % paths failed: this describes how often routing was
not able to connect two live nodes.
• % increase in path length: this describes the in-
crease in path length, compared to the path length
when there are no failed nodes.
In what follows, we consider the algorithms based on the
following routing geometries: XOR, Ring, Tree, Butterﬂy,
Hypercube, and Hybrid.
3.1 Performance Results
In this section, we discuss three questions:
Question #1: How does the static resilience of various
geometries compare? The left graph in Figure 1 shows the
results for % of failed paths as the % of failed nodes is var-
ied. The results are very consistent with the degree of route
selection ﬂexibility in each geometry (see Table 1). The
Tree and Butterﬂy have no route selection ﬂexibility, and
their resilience is quite poor; when 30% of the nodes have
failed, almost 90% of their paths have failed. To the other
extreme, the Ring and Hypercube geometries have the most
ﬂexibility in route selection, and their resilience is signiﬁ-
cantly better; when the same 30% of nodes are failed, under
7% of the routes have failed.9 Intermediate between these
two cases are the Hybrid and XOR geometries, which have
8Unlike other DHTs, the amount of state stored by a But-
terﬂy node is always a constant and cannot be controlled.
9Ring performs better than Hypercube as even though they
have the same number of log n length paths, Ring has many
alternate paths that are longer than log n, while Hypercube
has none.
about half the number of alternate paths (and hence, half
the routing ﬂexibility) that the Ring and Hypercube have.
Their resilience is correspondingly inferior to the Ring and
Hypercube, but far superior to the Tree and Butterﬂy; when
the same 30% of nodes are failed, about 20% of routes have
failed.
The right graph in Figure 1 shows the results for % in-
crease in the average path lengths (or path stretch) as the
% of failed nodes is varied. The path stretch of the Hyper-
cube is minimal, consistent with our observation that all its
alternative paths are of equal length. Ring suﬀers interme-
diate path stretch as some of its alternate paths are longer
than the rest. All the other geometries incur signiﬁcant path
stretch because they have only longer alternate paths. The
path stretch decreases as a large fraction of the nodes fail
because very few routes succeed at high node failure rates,
and those that succeed are very short.
Question #2: How does the addition of sequential neigh-
bors aﬀect the static resilience of various geometries? The
previous results did not include sequential neighbors.
In
Figure 2, we consider what happens when we add 16 sequen-
tial neighbors to the various algorithms. We eliminate the
XOR geometry because it doesn’t support sequential neigh-
bors, and the Tree is not included because it is represented
by Hybrid. The most obvious result here is that sequen-
tial neighbors greatly increase resilience to path failures; no
path failures are seen in any geometry even when 30% of
the nodes have been failed. This suggests that DHTs, when
equipped with sequential neighbors, can route successfully
even under high node failure rates. The Ring performs sig-
niﬁcantly better than the Hypercube and others whose se-
quential neighbors are artiﬁcially grafted on. However, the
increase in resilience to path failures comes at the cost of
path stretch. All the algorithms suﬀer signiﬁcantly greater
path stretch (now that the Hypercube has sequential neigh-
bors, not all paths are of equal lengths).
Question #3: Are sequential neighbors better than regu-
lar neighbors for ensuring static resilience? While the previ-
ous results were speciﬁc to sequential neighbors, one could
conjecture that increased resiliency could equally well be
achieved just by increasing the total number of neighbors
without insisting that they be sequential. Thus, we now ask
whether sequential neighbors are especially useful in increas-
ing resilience. We do this by considering the Ring geome-
try and compare cases where the total number of sequential
and regular neighbors are the same, but the number of se-
quential neighbors are diﬀerent. The results are shown in
Figure 3. The left graph in the ﬁgure indicates that at high
node failure rates, sequential neighbors are better than reg-
ular neighbors at increasing resilience to path failures but,
the right graph indicates that they can lead to signiﬁcantly
longer paths (note that the Y-axis of the right graph shows
path hop-counts and not path stretch). Hence, the use of se-
quential neighbors might be the preferred option if one were
only concerned with routing success and not other metrics
such as the total path latency.
To summarize, our results conﬁrm that the static resilience
of a geometry is largely determined by the amount of routing
ﬂexibility it oﬀers. Thus, the Ring which has the greatest
routing ﬂexibility has the highest resilience, while Tree and
Butterﬂy which have the least ﬂexibility in routing have the
least resilience. Further, the addition of sequential neighbors
can make DHTs signiﬁcantly more resistant to path fail-
100
80
60
40
20
)
%
(
s
h
t
a
p
d
e
l
i
a
F
0
0
)
%
(
s
t
n
u
o
c
-
p
o
h
h
t
a
p
.
g
v
A
n
i
e
s
a
e
r
c
n
I
80
60
40
20
0
XOR
Ring
Tree