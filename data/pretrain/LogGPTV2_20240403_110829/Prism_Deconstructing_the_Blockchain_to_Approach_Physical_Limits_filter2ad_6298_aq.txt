+ 1, Rℓ] ≥ k(cid:1)
(cid:27)
,
(1 − 2β)k
8
= (2β)k .
(Rℓ) ∼ Geometric(1 − 2β).
p
ℓ
Therefore W
G.2 Random walk proofs
Consider the following event from Equation (18)
E1(cid:2)r − r
, r(cid:3) := 
′
(cid:26)
a,b≥0
Y[r − r
′ − a, r + b] − Z[r − r
′ − a, r + b] >
for r′ = k
2 ¯fv
. The random variable W [r − r′, r] = Y[r − r′, r] − Z[r − r′, r] is a random walk with drift (1−2β)f
2
.
Lemma G.1. If W [r − r′, r] > c1k, for c2  0(cid:12)(cid:12) W [r − r
′
′
, r] > c1k) = 1 − (2β)(c1−c2)k
= 1 − e
log(2β)(c1−c2)k .
Proof. Refer [2].
□
If the random walk is to the right of c1k after r′ steps, the above lemma calculates the probability of that the
random walk remains to the right of c2k in all future rounds.
Lemma G.2. If W [r − r′, r] > c1k, for c2  0(cid:12)(cid:12) W [r − r
P(cid:0)W [r − r
, r] > c1k) = 1 − (2β)(c1−c2)k
= 1 − e
log(2β)(c1−c2)k .
Proof. Refer [2].
□
The above lemma is mathematically characterizing the same event as Lemma G.1.
39
Lemma G.3. If W [r − r′, r] > c1k,then for c3  0(cid:12)(cid:12) W [r − r
, r] > c1k(cid:1) ≥ 1 − 2(2β)(c1−c3)k/2
′
= 1 − 2e
(a)≥ 1 − 2e
log(2β)(c1−c3)k/2
−(1−2β)(c1−c3)k/2
.
Proof. Using c2 = (c1 − c3)/2 in the above two Lemmas G.1 and G.2, we get the required result. The
□
inequality (a) uses log 2β  0.
H THROUGHPUT OF BITCOIN
H.1 For β ≈ 0.5
Indeed, in order for Bitcoin to be secured against Nakamoto’s private attack [16] in that regime, it is necessary
that f ∆, the expected number of blocks mined per network delay round, approaches 0 so that very little forking
occurs among the honest nodes and the honest nodes can grow the longest chain faster than the adversary.
Note that for a given block size B, the throughput is bounded by:
f B = f ∆ · B/∆ = f ∆ · B/(B/C + D)  0),
i.e.
−(1−β)f ∆ blocks per round,
(65)
Notice that (65) is monotonically increasing in f ; hence to maximize throughput, we should choose as high a
mining rate as possible.
However, we are simultaneously constrained by security. For Bitcoin’s security, [9] shows that the main
chain must grow faster in expectation than any adversarial chain, which can grow at rates up to β f ∆ in
expectation. Hence we have the following (necessary) condition for security:
1 − e
Equation (66) gives the following upper bound on f ∆, the mining rate per round:
where ¯fBTC(β) is the unique solution to the equation:
1 − e
−(1−β)f ∆ > β f ∆.
f ∆ < ¯fBTC(β),
(66)
(67)
This yields an upper bound on the throughput, in transactions per second, achieved by Bitcoin as:
1 − e
−(1−β) ¯f = β ¯f .
λBTC ≤ [1 − e
−(1−β) ¯fBTC(β)]B/∆
(68)
where the last equality follows from (67). Substituting in ∆ = B/C + D and optimizing for B, we get the
following upper bound on the maximum efficiency of Bitcoin :
¯λBTC ≤ β ¯fBTC(β),
= β ¯fBTC(β)B/∆,
achieved when B ≫ CD and ∆ ≫ D.
40
Another upper bound on the throughput is obtained by setting f at the capacity limit: f = C/B (cf. section
(2)). Substituting into (65) and optimizing over B, this yields
¯λBTC ≤ 1 − e β−1
,
achieved when f ∆ = 1, B ≫ CD and ∆ ≫ D.
Combining the above two bounds, we get:
¯λBTC ≤ min(cid:110)
β ¯fBTC(β), 1 − e β−1(cid:111)
This is plotted in Figure 8. Note that for large values of β, the first upper bound is tighter; this is a security-limited
regime, in which the throughput efficiency goes to zero as β → 0.5. This is a manifestation of the (well-known)
fact that to get a high degree of security, i.e. to tolerate β close to 0.5, the mining rate of Bitcoin must be small,
resulting in a low throughput. Bitcoin currently operates in this regime, with the mining rate one block per 10
minutes; assuming a network delay of 1 minute, this corresponds to a tolerable β value of 0.49 in our model.
For smaller β, the second upper bound is tighter, i.e. this is the communication-limited regime. The crossover
point is the value of β such that
1 − e β−1 = β,
i.e., β ≈ 0.43.
I THROUGHPUT OF GHOST
The GHOST [25] protocol uses a different fork choice rule, which uses the heaviest-weight subtree (where
weight is defined as the number of blocks in the subtree), to select the main chain. To analyze the throughput
of GHOST, we first observe that when there are no adversarial nodes working, the growth rate of the main
chain of GHOST is upper bounded by the growth rate of the main chain under the longest chain rule. Hence,
the worst-case throughput of GHOST, worst-case over all adversary actions, is bounded by that of Bitcoin, i.e.
(69)
(cf. (65)). Notice that once again, this bound is monotonically increasing in f and we would like to set f largest
possible subject to security and network stability constraints. The latter constraint gives the same upper bound
as (70) for Bitcoin:
blocks per round,
−(1−β)f ∆
1 − e
¯λGHOST ≤ 1 − e β−1
(70)
?? We now consider the security constraint on f . Whereas our security condition for Bitcoin throughput was
determined by a Nakamoto private attack (in which the adversary builds a longer chain than the honest party),
a more severe attack for GHOST is a balancing attack, analyzed in the next subsection. As shown in that
analysis, the balancing attack implies that a necessary condition on f for robustness against an adversary with
power β is given by:
(71)
where H1[r], H2[r] are two independent Poisson random variables each with mean (1 − β)f ∆/2. Repeating the
same analysis as we did for Bitcoin, we get the following upper bound on the maximum efficiency of GHOST:
(72)
β f ∆ < E[|H1[r] − H2[r]|],
¯λGHOST ≤ β ¯fGHOST(β),
.
where ¯fGHOST(β) is the value of f ∆ such that (71) is satisfied with equality instead of inequality.
Combining this expression with the network stability upper bound, we get:
¯λGHOST ≤ min(cid:110)
β ¯fGHOST(β), 1 − e β−1(cid:111)
(73)
The throughput is plotted in Figure 8. As in Bitcoin, there are two regimes, communication-limited for β small,
and security-limited for β large. Interestingly, the throughput of GHOST goes to zero as β approaches 0.5, just
like Bitcoin. So although GHOST was invented to improve the throughput-security tradeoff of Bitcoin, the
mining rate f still needs to vanish as β gets close to 0.5. The reason is that although GHOST is indeed secure
against Nakamoto private attacks for any mining rate f [25], it is not secure against balancing attacks for f
above a threshold as a function of β. When β is close to 0.5, this threshold goes to zero.
.
41
I.1 Mining rate constraint
Similar to the balancing attack in [17], we would like to analyze its constraint on the mining rate f which in
turns constrains the throughput. The adversary strategy is to divide the work of honest users by maintaining
two forks:
(1) Say two blocks b1, b2 are mined over the main chain block b0 in the first round. Say the adversary mines
b1 and the honest nodes mine b2. The adversary will broadcast both these blocks (and all previous blocks)
to all the honest users. This is when the attack starts.
(2) At this time instance (say r = 1) all the honest nodes have the same view of the blocktree – which has two
(3) The honest users are divided into two equal groups G1 and G2, mining over b1 and b2 respectively, each at
main chains ending at blocks b1 and b2.
average rate (1 − β)f ∆/2 blocks per round each.
(4) The adversary’s goal is to maintain the forking - make sure that G1 chooses block b1 in its main chain,
whereas G2 chooses block b2 in its main chain. To do this, it divides its own resources into two equal
parts A1 and A2, each with average mining rate f ∆/2 blocks per round. The first part A1 mines only
(direct) children of block b1 and second part mines A2 (direct) children of block b2. Suppose at round r,
H1[r], H2[r] ∼ Poiss(1 − β)f ∆/2) honest blocks are mined in subtree 1 (below b1) and subtree 2 (below b2)
respectively.
• If H1[r] = H2[r], then the adversary does nothing.
• If say H1[r] is larger, then adversary releases H1[r] − H2[r] blocks that it has mined in subtree 2 (either
in private or just mined in this round). Vice versa for the case when H2[r] is larger. This (re)balances
the weight of the two subtrees and the honest work is again split in the next round.
(6) Analysis: The expected number of blocks the adversary needs to release in subtree 1 per round is E[(H2[r]−
H1[r])+]. A necessary condition for this attack to not be able to continue indefinitely with non-zero
probability is
(5) Attack Strategy:
β f ∆ < E[(H2[r] − H1[r])+]/2,
J ADDITIONAL SIMULATIONS
Here we show our simulations from Section 5 under additional parameter settings. First, we consider an active
adversary of hash power ˜β = 0.3 and ˜β = 0.15 with confirmation reliability ε = e−20 in Figure 19. Notice that
for ˜β = 0.3, the latency of confirming double-spent transactions exceeds that of the longest-chain protocol, as
explained in Section 4. The numeric latency values of the double-spent transaction curve are colored green to
clarify which numbers belong to which curve.
Since ε = e−20 ≈ 2.1 × 10−9 is fairly conservative (this corresponds to a latency on the order of 1 day at
Bitcoin’s current settings of 1 block every 10 minutes with β = 0.4), we also consider a weaker confirmation
guarantee of ε = e−10 ≈ 4.5 × 10−5. The results for this weaker confirmation reliability are shown in Figure 20.
As expected, all confirmation times are reduced, both for Bitcoin and for Prism. Another key difference relates
to double-spent transaction latency under balancing attacks. As ε grows, Prism’s latency overtakes that of the
longest-chain protocol for smaller values of β. (Recall that ˜β denotes the current fraction of hash power that is
actively launching the attack, while β is the maximum tolerable fraction of adversarial hash power against
which the system is secure.) This observation is expected. Prism’s latency does not grow significantly as ε
changes; notice the similarity in Prism’s numeric latency values between Figures 19 and 20. However, as ε
decreases, it significantly increases the latency of the longest-chain protocol.
To illustrate this effect more explicitly, Figure 21 shows the latency of Prism and the longest-chain protocol
as we vary ε for a fixed β = 0.4 and ˜β = 0.3. Notice that indeed, Prism’s latency changes very little as ε scales,
whereas the longest-chain latency grows much faster. Additionally, we observe that censorship attacks do
not appear to significantly affect latency compared to the non-adversarial setting, whereas balancing attacks
can incur a much higher latency than the longest-chain protocol, with an especially pronounced difference at
small values of ε. This disparity becomes less notable for smaller values of ˜β, as seen in the earlier plots.
42
Balancing attack
Censorship attack
Balancing attack
Active adversary ˜β = 0.3
Censorship attack
Active adversary ˜β = 0.15
Figure 19: Active adversary at confirmation reliability ε = e−20.
43
Balancing attack
Censorship attack
Balancing attack
Active adversary ˜β = 0.3
Censorship attack
Balancing attack
Active adversary ˜β = 0.25
Censorship attack
Active adversary ˜β = 0.15
Figure 20: Active adversary at confirmation reliability ε = e−10.
Non-adversarial setting
Balancing attack
Censorship attack
Figure 21: Latency vs. ε for a non-adversarial setting, a balancing attack, and a censorship attack
when β = 0.4 and the active adversarial hash power ˜β = 0.3.
44