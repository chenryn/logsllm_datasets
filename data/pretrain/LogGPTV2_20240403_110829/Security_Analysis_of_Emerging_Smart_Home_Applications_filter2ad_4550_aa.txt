title:Security Analysis of Emerging Smart Home Applications
author:Earlence Fernandes and
Jaeyeon Jung and
Atul Prakash
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Security Analysis of Emerging Smart Home Applications
Earlence Fernandes
University of Michigan
Jaeyeon Jung
Microsoft Research
Atul Prakash
University of Michigan
Abstract—Recently, several competing smart home program-
ming frameworks that support third party app development
have emerged. These frameworks provide tangible beneﬁts to
users, but can also expose users to signiﬁcant security risks.
This paper presents the ﬁrst in-depth empirical security analysis
of one such emerging smart home programming platform. We
analyzed Samsung-owned SmartThings, which has the largest
number of apps among currently available smart home platforms,
and supports a broad range of devices including motion sensors,
ﬁre alarms, and door locks. SmartThings hosts the application
runtime on a proprietary, closed-source cloud backend, making
scrutiny challenging. We overcame the challenge with a static
source code analysis of 499 SmartThings apps (called SmartApps)
and 132 device handlers, and carefully crafted test cases that
revealed many undocumented features of the platform. Our key
ﬁndings are twofold. First, although SmartThings implements a
privilege separation model, we discovered two intrinsic design
ﬂaws that lead to signiﬁcant overprivilege in SmartApps. Our
analysis reveals that over 55% of SmartApps in the store are
overprivileged due to the capabilities being too coarse-grained.
Moreover, once installed, a SmartApp is granted full access to a
device even if it speciﬁes needing only limited access to the device.
Second, the SmartThings event subsystem, which devices use to
communicate asynchronously with SmartApps via events, does
not sufﬁciently protect events that carry sensitive information
such as lock codes. We exploited framework design ﬂaws to
construct four proof-of-concept attacks that: (1) secretly planted
door lock codes; (2) stole existing door lock codes; (3) disabled
vacation mode of the home; and (4) induced a fake ﬁre alarm.
We conclude the paper with security lessons for the design of
emerging smart home programming frameworks.
I. INTRODUCTION
Smart home technology has evolved beyond basic conve-
nience functionality like automatically controlled lights and
door openers to provide several tangible beneﬁts. For instance,
water ﬂow sensors and smart meters are used for energy
efﬁciency. IP-enabled cameras, motion sensors, and connected
door locks offer better control of home security. However,
attackers can manipulate smart devices to cause physical,
ﬁnancial, and psychological harm. For example, burglars can
target a connected door lock to plant hidden access codes, and
arsonists can target a smart oven to cause a ﬁre at the victim’s
home [12].
Early smart home systems had a steep learning curve,
complicated device setup procedures, and were limited to
do-it-yourself enthusiasts.1 Recently, several companies have
introduced newer systems that are easier for users to setup,
are cloud-backed, and provide a programming framework for
third-party developers to build apps that realize smart home
beneﬁts. Samsung’s SmartThings [27], Apple’s HomeKit [7],
Vera Control’s Vera3 [1], Google’s Weave/Brillo [18], and
AllSeen Alliance’s2 AllJoyn [3] are several examples.
The question we pose is the following: In what ways are
emerging, programmable, smart homes vulnerable to attacks,
and what do these attacks entail? It is crucial to address this
question since the answer will initiate and guide research into
defenses before programmable smart homes become common-
place. Vulnerabilities have been discovered in individual high-
proﬁle smart home devices [17], [19], and in the protocols that
operate between those devices, such as ZWave and ZigBee [9],
[21]. However,
little or no prior research investigated the
security of the programming framework of smart home apps
or apps themselves.
We perform, to the best of our knowledge, the ﬁrst security
analysis of the programming framework of smart homes.
Speciﬁcally, we empirically evaluate the security design of a
popular programmable framework for smart homes—Samsung
SmartThings. We focus on the programming framework since
it
is the substrate that uniﬁes applications, protocols, and
devices to realize smart home beneﬁts. Attackers can remotely
and covertly target design ﬂaws in the framework to realize
the emergent threats outlined earlier.
We chose SmartThings for several reasons. First, at the
time of writing, SmartThings has a growing set of apps—
521 apps called SmartApps, with the distant second being
Vera that has 204 Lua-based apps on the MiOS store [1].
Other competing frameworks like HomeKit, Weave/Brillo, and
AllJoyn are in formative stages with less than 50 apps each.
Second, SmartThings has native support for 132 device types
from major manufacturers. Third, SmartThings shares key se-
curity design principles with other frameworks. Authorization
and authentication for device access is essential in securing
smart home app platforms and SmartThings has a built-in
mechanism to protect device operations against third-party
apps through so called capabilities. Event-driven processing
is common in smart home applications [30], and SmartThings
provides ways for apps to register callbacks for a given event
stream generated by a device. Other platforms support event-
driven processing too. For instance, AllJoyn supports the bus
signal [2], and HomeKit provides the characteristic notiﬁca-
tion API [6]. Therefore, we believe lessons learned from an
analysis of the SmartThings framework will inform the design
of security-critical components of many programmable smart
home frameworks in early design stages.
1Many forums exist for people to exchange know-how e.g., http://forum.
universal-devices.com/.
2AllSeen members include Qualcomm, Microsoft, LG, Cisco, and AT&T.
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Earlence Fernandes. Under license to IEEE.
DOI 10.1109/SP.2016.44
DOI 10.1109/SP.2016.44
636
636
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
The SmartThings framework recognizes the potential for
security vulnerabilities and incorporates several security mea-
sures. SmartThings has a privilege separation mechanism
called capabilities that specify the set of operations a Smart-
App may issue to a compatible smart home device. SmartApps
are provided secure storage, accessible only to the app itself.
Developers write SmartApps in a security-oriented subset of
Groovy. The Groovy-based apps run in a sandbox that denies
operations like reﬂection, external JARs, and system APIs.
The OAuth protocol protects third-party integrations with
SmartApps. SmartThings provides a capability-protected event
subsystem for SmartApps and device handlers to communicate
asynchronously.
Our security analysis explores the above security-oriented
aspects of the SmartThings programming framework. Per-
forming the security analysis was challenging because the
SmartThings platform is a closed-source system. Furthermore,
SmartApps execute only in a proprietary, SmartThings-hosted
cloud environment, making instrumentation-based dynamic
analysis difﬁcult. Because there is no publicly-available API
to obtain SmartApp binaries, binary analysis techniques too,
are inapplicable.
To overcome these challenges, we used a combination of
static analysis tools that we built, runtime testing, and manual
analysis on a dataset of 499 SmartApps and 132 device
handlers that we downloaded in source form. Our analysis
tools are available at https://iotsecurity.eecs.umich.edu.
Our Contributions. We discovered security-critical design
ﬂaws in two areas: the SmartThings capability model, and the
event subsystem.
We found that SmartApps were signiﬁcantly overprivileged:
(a) 55% of SmartApps did not use all the rights to device
operations that their requested capabilities implied; and (b)
42% of SmartApps were granted capabilities that were not
explicitly requested or used. In many of these cases, overpriv-
ilege was unavoidable, due to the device-level authorization
design of the capability model and occurred through no fault
of the developer (§IV-A, §V-B). Worryingly, we have observed
that 68 existing SmartApps are already taking advantage of the
overprivilege to provide extra features, without requesting the
relevant capabilities.
We studied the SmartThings event subsystem and discov-
ered that: (a) An app does not require any special privilege
to read all events a device generates if the app is granted at
least one capability the device supports; (b) Unprivileged apps
can read all events of any device using only a leaked device
identiﬁer; and (c) Events can be spoofed (§IV-B).
We exploited a combination of design ﬂaws and framework-
induced developer-bugs to show how various security prob-
lems conspire to weaken home security. We constructed four
proof-of-concept attacks:
• We remotely exploited an existing SmartApp available
on the app store to program backdoor pin-codes into
a connected door lock (§VI-A). Our attack made use
of the lockCodes capability that the SmartApp never
requested—the SmartApp was automatically overprivi-
leged due to the SmartThings capability model design.
• We eavesdropped on the event subsystem to snoop on
lock pin-codes of a Schlage smart lock when the pin-
codes were being programmed by the user, and leaked
them using the unrestricted SmartThings-provided SMS
API. Our attack SmartApp advertises itself as a battery
monitor and only requests the battery monitoring capa-
bility.
• We disabled an existing vacation mode SmartApp avail-
able on the app store using a spoofed event
to stop
vacation mode simulation (§VI-C). No capabilities were
required for this attack.
• We caused a fake ﬁre alarm using a spoofed physical de-
vice event (§VI-D). The attack shows how an unprivileged
SmartApp can escalate its privileges to control devices it
is not authorized to access by misusing the logic of benign
SmartApps.
All of the above attacks expose a household to signiﬁcant
harm—break-ins, theft, misinformation, and vandalism. The
attack vectors are not speciﬁc to a particular device and are
broadly applicable.
Finally, in our forward looking analysis, we distilled the key
lessons to constructing secure and programmable smart home
frameworks. We couple the lessons with an exploration of the
pros and cons of the trade-offs in building such frameworks.
Our analysis suggests that, although some problems are readily
solvable, others require a ﬁne balancing of several techniques
including designing risk-based capabilities and identity mech-
anisms (§VII).
II. RELATED WORK
Smart Home Security. Denning et al. outlined a set of
emergent threats to smart homes due to the swift and steady
introduction of smart devices [12]. For example, there are
threats of eavesdropping and direct compromise of various
smart home devices. Denning et al. also discussed the structure
of attacks that include data destruction, illegal physical entry,
and privacy violations, among others. Our work makes some
of these risks concrete and demonstrates how remote attackers
can weaken home security in practice. Although we are not
the ﬁrst in recognizing security risks of the modern home, we
present the ﬁrst study of the security properties of emerging
smart home applications and their associated programming
interfaces.
Current smart home security analyses are centered around
two themes: devices and protocols. On the device front, the
MyQ garage system can be turned into a surveillance tool that
informs burglars when the house is possibly empty; the Wink
Relay touch controller’s microphone can be switched on to
eavesdrop on conversations; and the Honeywell Tuxedo touch
controller has authentication bypass bugs and cross-site request
forgery ﬂaws [17], [19]. Oluwafemi et al. caused compact
ﬂorescent lights to rapidly power cycle, possibly inducing
seizures in epileptic users [23]. Ur et al. studied access control
of the Philips Hue lighting system and the Kwikset door lock,
637637
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
among others, and found that each system provides a siloed
access control system that fails to enable essential use cases
such as sharing smart devices with other users like children
and temporary workers [29]. In contrast, we study emerging
applications and the associated attack vectors of a smart home
programming platform, that are largely independent of the
speciﬁc devices in use at a home.
On the protocol front, researchers demonstrated ﬂaws in the
ZigBee and ZWave protocol implementations for smart home
devices [9], [21]. Exploiting these bugs requires proximity
to the target home. We demonstrated design ﬂaws in the
programming framework that can be used in attacks that do not
require physical access to the home. Furthermore, our remote
attacks are independent of the speciﬁc protocols in use.
Veracode performed a security analysis of several smart
home hubs, including SmartThings [32]. The security analysis
focused on infrastructure protection such as whether SSL/TLS
is used, whether there is replay attack protection, and whether
strong passwords are used. The Veracode study found that the
SmartThings hub had correctly deployed all studied infrastruc-
tural security mechanisms with the exception of an open telnet
debugging interface on the hub, which has since been ﬁxed. In
contrast, we perform an empirical analysis of the SmartThings
platform and its applications to discover framework design
ﬂaws.
Overprivilege and Least-Privilege. The principle of least
privilege is well-known and programming frameworks should
be designed to make it easier to achieve. In practice, however,
it can be difﬁcult to achieve, as evidenced most recently by
research in smartphones, where Felt et al. conducted a market-
scale overprivilege analysis for Android apps and determined
that one-third of 940 apps were overprivileged [13], citing
developer confusion as one prime factor for overprivileged
Android apps. Our work is along similar lines except that we
analyzed a relatively closed system in which the apps only run
on a proprietary cloud backend and control devices in a home
via a proprietary protocol with the hub over SSL-protected
sessions. We found that much of the overprivilege is not due
to developer confusion but due to the framework design itself.
Au et al. designed PScout, a static analysis framework
for Android source code to produce complete permission
speciﬁcations for different Android versions [8]. We used static
analysis on SmartApp source code to compute overprivilege.
However, unlike PScout, we could not use static analyses to
complete capability documentation because the SmartThings
runtime is closed-source. Instead, we relied on analyzing the
protocol operating between the SmartThings backend and the
client-side Web IDE.
Permission/Capability Model Design. Roesner et al. intro-
duced User-Driven Access Control where the user is kept in
the loop, at the moment an app uses a sensitive resource [24],
[25]. For instance, a remote control door lock app should only
be able to control a door lock in response to user action.
However, certain device types and apps are better suited to
install-time permissions. Felt et al. introduced a set of guide-
lines on when to use different types of permissions [14]. Our
work evaluates the effectiveness of the SmartThings capability
model in protecting sensitive device operations from malicious
or benign-but-buggy SmartApps. We leave determining the
grant modality of capabilities to future work.
III. SMARTTHINGS BACKGROUND AND THREAT MODEL
We ﬁrst describe the SmartThings platform architecture
and then discuss our threat model. Little is known about the
architectural details of SmartThings besides the developer doc-
umentation. Therefore, we also discuss the analysis techniques
we used to uncover architectural aspects of SmartThings when
appropriate.
A. SmartThings Background
The SmartThings ecosystem consists of three major compo-
nents: hubs, the SmartThings cloud backend, and the smart-
phone companion app (see Figure 1). Each hub, purchased
by a user, supports multiple radio protocols including ZWave,
ZigBee, and WiFi to interact with physical devices around
the user’s home. Users manage their hubs, associate devices
with the hubs, and install SmartApps from an app store using
the smartphone companion app (called SmartThings Mobile).
The cloud backend runs SmartApps. The cloud backend also
runs SmartDevices, which are software wrappers for physical
devices in a user’s home. The companion app, hubs, and
the backend communicate over a proprietary SSL-protected
protocol. Although there are no publicly available statistics
on the size of SmartThings user base, as a rough measure
of scale of adoption, we observe that there are 100K—500K
installations of the Android version of the companion app as
of March 2016 from the Google Play Store.
SmartApps and SmartDevices communicate in two ways.
First, SmartApps can invoke operations on SmartDevices via
method calls (e.g., to lock a door lock). Second, SmartApps
can subscribe to events that SmartDevices or other SmartApps
can generate. A SmartApp can send SMSs and make network
calls using SmartThings APIs. SmartDevices communicate
with the hub over a proprietary protocol.
1) SmartApps and SmartDevices: A programming frame-
work enables creating SmartApps and SmartDevices, that are
written in a restricted subset of Groovy3, a language that com-
piles to Java bytecode. Since SmartApps and SmartDevices
execute on the closed-source cloud backend, SmartThings pro-
vides a Web-based environment, hosted on the cloud backend,
for software development.
SmartApps and SmartDevices are published to the Smart-
Things app store that is accessible via the SmartThings com-
panion app (Figure 1). In addition to this main app store, there
is a secondary store where developers make their software
available in source code form.
Under the hood, a SmartApp does not directly communicate
with a physical device. Instead,
it communicates with an
instance of a SmartDevice that encapsulates a physical device.
A SmartDevice manages the physical device using lower level
3http://www.groovy-lang.org/
638638
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:33 UTC from IEEE Xplore.  Restrictions apply. 
EXAMPLES OF CAPABILITIES IN THE SMARTTHINGS FRAMEWORK
TABLE I
Capability
capability.lock
capability.battery
capability.switch
capability.alarm
Commands
lock(), unlock()