# Security Analysis of Emerging Smart Home Applications

**Authors:**
- Earlence Fernandes, University of Michigan
- Jaeyeon Jung, Microsoft Research
- Atul Prakash, University of Michigan

**Conference:**
2016 IEEE Symposium on Security and Privacy

**Title:**
Security Analysis of Emerging Smart Home Applications

**Abstract:**
Recently, several competing smart home programming frameworks that support third-party app development have emerged. These frameworks provide tangible benefits to users but also expose them to significant security risks. This paper presents the first in-depth empirical security analysis of one such emerging smart home programming platform, Samsung-owned SmartThings. SmartThings has the largest number of apps among currently available smart home platforms and supports a wide range of devices, including motion sensors, fire alarms, and door locks. The application runtime is hosted on a proprietary, closed-source cloud backend, making scrutiny challenging.

We conducted a static source code analysis of 499 SmartApps and 132 device handlers, and crafted test cases that revealed many undocumented features of the platform. Our key findings are twofold:

1. **Overprivilege in SmartApps:** Although SmartThings implements a privilege separation model, we discovered two intrinsic design flaws leading to significant overprivilege. Over 55% of SmartApps in the store are overprivileged due to coarse-grained capabilities. Additionally, once installed, a SmartApp is granted full access to a device, even if it specifies needing only limited access.
   
2. **Event Subsystem Vulnerabilities:** The SmartThings event subsystem, which devices use to communicate asynchronously with SmartApps via events, does not sufficiently protect events carrying sensitive information such as lock codes. We exploited these design flaws to construct four proof-of-concept attacks:
   - Secretly planting door lock codes.
   - Stealing existing door lock codes.
   - Disabling vacation mode.
   - Inducing a fake fire alarm.

We conclude the paper with security lessons for the design of emerging smart home programming frameworks.

**I. Introduction**

Smart home technology has evolved beyond basic convenience functionalities like automated lighting and door openers to provide tangible benefits such as energy efficiency and enhanced security. However, attackers can manipulate smart devices to cause physical, financial, and psychological harm. For example, burglars can target connected door locks to plant hidden access codes, and arsonists can target smart ovens to cause fires.

Early smart home systems were complex and limited to do-it-yourself enthusiasts. Recently, companies have introduced easier-to-use, cloud-backed systems with programming frameworks for third-party developers. Examples include Samsung’s SmartThings, Apple’s HomeKit, Vera Control’s Vera3, Google’s Weave/Brillo, and AllSeen Alliance’s AllJoyn.

The question we address is: In what ways are emerging, programmable smart homes vulnerable to attacks, and what do these attacks entail? It is crucial to address this before programmable smart homes become commonplace. While vulnerabilities have been discovered in individual high-profile smart home devices and protocols, little research has investigated the security of the programming framework or the apps themselves.

We perform, to the best of our knowledge, the first security analysis of the programming framework of smart homes, specifically Samsung SmartThings. We chose SmartThings because it has the largest number of apps (521 SmartApps) and supports 132 device types from major manufacturers. Additionally, SmartThings shares key security design principles with other frameworks, making our findings broadly applicable.

**II. Related Work**

**Smart Home Security:**
- Denning et al. outlined emergent threats to smart homes, including eavesdropping and direct compromise of devices [12].
- Current analyses focus on device and protocol vulnerabilities, such as the MyQ garage system, Wink Relay touch controller, and Honeywell Tuxedo touch controller [17], [19].
- Oluwafemi et al. demonstrated how compact fluorescent lights can be used to induce seizures in epileptic users [23].
- Ur et al. studied access control in Philips Hue and Kwikset door locks, finding siloed access control systems [29].

**Protocol Vulnerabilities:**
- Researchers have found flaws in ZigBee and ZWave protocols [9], [21].
- Veracode analyzed smart home hubs, including SmartThings, focusing on infrastructure protection [32].

**Overprivilege and Least-Privilege:**
- Felt et al. found that one-third of Android apps were overprivileged [13].
- Au et al. designed PScout, a static analysis framework for Android [8].

**Permission/Capability Model Design:**
- Roesner et al. introduced User-Driven Access Control [24], [25].
- Felt et al. provided guidelines on when to use different types of permissions [14].

**III. SmartThings Background and Threat Model**

**A. SmartThings Background:**
- **Ecosystem Components:**
  - Hubs: Support multiple radio protocols (ZWave, ZigBee, WiFi).
  - Cloud Backend: Runs SmartApps and SmartDevices.
  - Smartphone Companion App: Manages hubs, associates devices, and installs SmartApps.
- **Communication:**
  - SmartApps can invoke operations on SmartDevices via method calls.
  - SmartApps can subscribe to events generated by SmartDevices or other SmartApps.
  - SmartApps can send SMSs and make network calls using SmartThings APIs.
- **Programming Framework:**
  - SmartApps and SmartDevices are written in a restricted subset of Groovy.
  - Development environment is web-based and hosted on the cloud backend.
  - Apps are published to the SmartThings app store, accessible via the companion app.

**Table I: Examples of Capabilities in the SmartThings Framework**

| Capability         | Commands            |
|--------------------|---------------------|
| `capability.lock`  | `lock()`, `unlock()` |
| `capability.battery` | N/A                 |
| `capability.switch` | `on()`, `off()`      |
| `capability.alarm` | `alarm()`, `strobe()`|

This table provides a brief overview of some capabilities and their associated commands in the SmartThings framework.