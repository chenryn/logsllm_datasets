代理动物园
欢迎来到对象村动物园！
现在你知道什么是远程代理、虚拟代理和保护代理了。在野外，你
看到的代理还不只是这些。在动物园的代理区，我们展示了许多辛
苦捕捉来的野生的代理，供你研究。
我们的工作还没有完成，但是，我们相信以后你会在真实世界中看
到更多代理的变体，所以现在请你帮帮忙，帮我们编目。让我们看
看现有的代理：
栖息地：常出没于公司的防火墙系
防火墙代理（Firewall
统。
Proxy)
控制网络资源的访问，保
护主题免于“坏客户”的侵害。
帮助找到栖息地
智能引用代理（Smart
Reference Proxy)
当主题被引用时，进行额外的
动作，例如计算一个对象被引
用的次数。
缓存代理（CachingProxy）
为开销大的运算结果提供暂时
栖息地：常出没于Web服务器代理，以及内容管理
存储：它也允许多个客户共享
与出版系统。
结果，以减少计算或网络延迟。
488
第11章
---
## Page 525
代理模式
被发现出没于avaSpaces，为分散式
环境内的潜在对象集合提供同步访
问控制。
同步代理（Synchronization
Proxy）在多线程的情况
下为主题提供安全的访问。
复杂隐藏代理（ComplexityHiding
帮忙找出栖息地
Proxy)
用来隐藏一个类的复杂集合的复杂
度，并进行访问控制。有时候也称为
外观代理（FacadeProxy），这不难理
解。复杂隐藏代理和外观模式是不一样
的，因为代理控制访问，而外观模式只
提供另一组接口。
写入时复制代理（Copy-On-
Write Proxy)
用来控制对象的复制，方
栖息地：去看卷1ava5的
法是延迟对象的复制，直到
CopyOnWtiteAnaylist附近。
客户真的需要为止。这是虚拟代
理的变体。
注意：请将你在野外所观察到的其他代理写在这里
你现在的位置
489
---
## Page 526
填字游戏
这一章很长。在结束前，休闲一下吧！
横排提示：
竖排提示：
1. Group of first CD cover displayed (two words)
2. Java's dynamic proxy forwards allrequests to
3. Proxy that stands in for expensive objects
this (two words)
4. We took one of these to learn RM1
5.Group that did the album MCMxC A.D.
7.Remote
was used to implement
6.This utility acts as a lookup service for RMI
the gumball machine monitor (two words)
8. Why Elroy couldn't get dates
9. Software developer agent was being this kind
10.Similar to proxy,but with a different purpose
of proxy
12. Objectville Matchmaking gimmick (three
11. In RMl, the object that takes the network
words)
requests on the service side
13. Our first mistake: the gumball machine
14. Proxy that protects method calls from
reporting was not
unauthorized callers
15.A
proxy class is created at runtime
16. Place to learn about the many proxy variants
17. Commonly used proxy for web services (two
words)
18. In RMI, the proxy is called this
19. The CD viewer used this kind of proxy
490
第11章
---
## Page 527
代理模式
设计箱内的工具
要点
你的设计工具箱几乎满了。一路下来，你所学会的设
计模式，几乎可以解决任何设计问题了。
代理模式为另一个对象提供
代表，以便控制客户对对象
00
基础
的访问，管理访问的方式有
许多种。
00原则
象
远程代理管理客户和远程对
时装
象之间的交互。
封装变化
态
虚拟代理控制访问实例化开
多用组合，少用继承
承
销大的对象。
针对接口编程，不针对实现编
程
保护代理基于调用者控制对
为交互对象之间的松耦合设计
对象方法的访问。
而努力
代理模式有许多变体，例
类应该对扩展开效，对修改关
本章没有新的原则，
阅。
如：缓存代理、同步代理、
你可以闭上眼晴，今出
防火墙代理和写入时复制代
依赖抽象，不要依赖具体类。
有所有的原则吗？
理。
只和朋友交谈
别找我，我舍找你
代理在结构上类似装饰者，
类应该只有一个改变的理由
但是目的不同。
装饰者模式为对象加上行
为，而代理则是控制访问。
Java内置的代理支持，可以
00模式
新的模式。代理
根据需要建立动态代理，并
作为另一个对象
将所有调用分配到所选的处
的代表。
理器。
就和其他的包装者（wrapp-
er）一样，代理会造成你的
设计中类的数目增加。
代理模式—为另一个对象提供
一个替身或占位符以访问这个对象。
你现在的位置
491
---
## Page 528
习题解答
习题解答
NonOwnerlnvocationHandler工作的方式除了它允许调用sctHotOrNotRating和不允许
调用其他set方法之外，与OwnerInvocationHandler是很相似的。请写出NonOwnerlnvo
练习
cationHandler的代码：
import java.lang.reflect.*;
public class NonOwnerInvocationHandler implements InvocationHandler {
PersonBean person;
public NonOwnerInvocationHandler(PersonBean person) (
this.person = person;
public Object invoke (Object proxy, Method method, Object[] args)
throws IllegalAccessException {
try{
if （method.getName().startsWith("get")){
return method.invoke (person, args) ;
)else if(method.getName().equals("setHotOrNotRating")){
return method.invoke(person, args);
}else if (method.getName ().startsWith("set"))(
throw new IllegalAccessException ();
1catch (InvocationTargetException e){
e.printStackTrace();
return null;
设计迷题
ImageProxy类似乎有两个由条件语句控制的状态。你能否用另一个设
计模式清理这样的代码？你要如何重新设计lmageProxy？
使用状态模式：实现两个状态，分别是ImageLoaded和ImageNotLoaded。然后把if语句内的代码放进
各自的状态中。一开始的状态是ImageNotLoaded，当Imagelcon取回后就转换到ImageLoaded状态。
492
第11章
---
## Page 529
代理模式
习题解答
Sharpenyourpencil
虽然有一点复杂，但是创建动态代理所需要的代码其实很短。请你写下
getNonOwnerProxyO，该方法会返回NonOwnerInvocationHandler的代
理：
PersonBean getNonOwnerProxy (PersonBean person)
return (PersonBean) Proxy.newProxyInstance(
person.getClass () .getClassLoader() ,
person.getClass () .getInterfaces () ,
new NonOwnerInvocationHandler (person)) ;
AP
H
X
W
N
N
V
A
O
C
OIN
A
U
E
I
G
E
IT
N
I
H
N
A
H
E
R
ON
M
D
N
M
1
y
R
D
PDG
N
L
E
19IRTUAL
你现在的位置
493
---
## Page 530
待烘烤代码：CD封面浏览器
待烘烤
CD封面浏览器的代码
代码
package headfirst.proxy.virtualproxy;
import java.net.*;
import java,awt.*;
import java.awt.event. *;
import javax.swing.*;
import java.util. *;
public class ImageProxyTestDrive {
ImageComponent imageComponent;
JFrame frame = new JFrame("CD Cover Viewer") ;
JMenuBar menuBar;
JMenu menu;
Hashtable cds = new Hashtable ();
public static void main (String[] args) throws Exception {
ImageProxyTestDrive testDrive = new ImageProxyTestDrive () ;
public ImageProxyTestDrive () throws Exception{
cds.put ("Ambient: Music for Airports","http://images.amazon.com/images/P/
B000003S2K.01.LZZZ222Z.JPg");
cds .put ("Buddha Bar", "http://images.amazon.com/images/P/B0oo09xBYK.01.LZZZzzzz.
Jpg") ;
cds.put("Ima","http://images,amazon.com/images/P/B000005IRM.01 .Lzzzzzzz.jpg") ;
cds ,put ("Karma", "http://images,amazon.com/images/P/B000o05DCB.01.Lz2zzzzz.gif") ;
cds.put("MCMXC A.D.", "http://images.amazon.com/images/P/B000002URV.01.LZZZZ2zZ.
Jpg") ;
cds.put (*Northern Exposure", "http://images.amazon.com/images/P/B000003SFN.01.
cds.put("Selected Ambient Works, Vol. 2","http://images.amazon.com/images/P/
B000002MNZ.01.LZZZZZZZ.JPg");
cds.put("o1iver", "http://www.cs.yale.edu/homes/freeman-elisabeth/2004/9/Oliver
sm.jpg") ;
2")）;
URL initialURL = new URL((String) cds.get("Selected Ambient Works, Vol. 2
menuBar = new JMenuBar ();
menu = new JMenu("Favorite CDs");
menuBar,add (menu) ;
frame.setJMenuBar (menuBar) ;
494
第11章
---
## Page 531
代理模式
for (Enumeration e = cds.keys(); e.hasMoreElements () ;) {
String name = (String)e.nextElement () ;
JMenuItem menuItem = new JMenuItem(name);
menu.add (menuItem) ;
menuItem.addActionListener (new ActionListener () {
public void actionPerformed(ActionEvent event) {
imageComponent.setIcon (new ImageProxy (getCDUrl (event.
getActionCommand ()))) ;
frame.repaint() ;
);
//建立框架和菜单
Icon icon = new ImageProxy(initialURL) ;
imageComponent = new ImageComponent(icon);
frame .getContentPane () .add (imageComponent) ;
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) ;
frame.setSize (800, 600) ;
frame.setVisible (true) ;
URL getCDUrl (String name){
try
return new URL((String) cds.get (name));
}catch (MalformeaURLException e)(
e.printStackTrace ();
return null;
你现在的位置
495
---
## Page 532
待烘烤代码：CD封面浏览器
待烘烤
CD封面浏览器的代码
代码
继续··.··.
package headfirst.proxy.virtualproxy;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
class ImageProxy implements Icon (
ImageIcon imageIcon;
URL imageURL;
Thread retrieval7hread;
booiean retrieving = false;
public ImageProxy(URL url) ( imageURL = url;}
public int getIconWidth()(
if (imageIcon != null){
return imageIcon.getIconwidth();
}else{
return 800;
public int getIconHeight()
if (imageIcon != null)
return imageIcon.getIconHeight () ;
}else{
return 600;
public void paintIcon(final Component c,Graphics
g，int x，
if (imageIcon != null){
inty)
imageIcon.paintIcon(c,g，x,y）;
}else{
g.drawString("Loading CD cover, please wait...", x+300, y+190);
if (!retrieving)
retrieving = true;
retrievalThread = new Thread (new Runnable() {
public void run()
try{
imageIcon = new ImageIcon (imageURL, "CD Cover");
c.repaint ();
}catch （Exception e）{
496
第11章