2.0 have intentionally not built in support for channel bind-
ing, such as binding the token to a speciﬁc client address. In
conclusion, there are ways of mitigating the threat caused by
unsafe delegation of access tokens to client-side scripts, but it
might take some time for the problem to go away entirely.
Overall, we hope that this paper will attract more attention
to the area of cloud-application add-ons since further work
is clearly needed. There might be other attack vectors that al-
low the attacker to exploit non-malicious add-ons. Analyzing
threats from malicious add-ons could also be an interesting
area for future work.
8 Related work
In this section, we survey related literature about XSS at-
tacks and security analysis of add-on ecosystems outside the
domain of web applications.
XSS vulnerabilities. XSS has been one of the most com-
mon and harmful vulnerabilities in web applications. In spite
of the availability of detection and defense mechanisms and
changes in the architecture of web applications, XSS remains
a prevalent problem [13, 53]. Security research literature on
XSS includes a comprehensive overview [25], detection mech-
anisms [28, 30, 58], as well as preventive and defense solu-
tions [10, 31, 44, 55–57].
The rich literature on defenses again XSS includes both
client and server-side solutions. Many of them can help to
defend against the attacks presented in this paper.
Client-side solutions involve sanitizing user input before it
is sent to the server. However, distinguishing between trusted
and untrusted content and ﬁltering out any malicious scripts
are challenging tasks. This is why the sanitation of web pages
is sometimes outsourced to the browsers [55] or to web ﬁre-
walls that run on the client PC [28, 31]. Even though the XSS
attacks occur on the client-side, solutions often involve server
side mechanisms. For example, in the solution of Gundy et
al. [56], the potentially vulnerable website delivers a XHTML
document with randomized namespace preﬁxes and a pol-
icy to the client, and the client accepts only documents that
comply with the policy.
Taint checking is a popular server-side protection mech-
anism, where the input originating from untrusted sources
is ﬂagged as potentially malicious and subjected to further
scrutiny (e.g. sanitizing the input). The same techniques can
also be employed on the client side if combined with static
analysis of the input strings [57, 58]. There are server side
solutions, for example passive monitoring of the HTTP traf-
ﬁc [30] or by dynamically comparing HTTP responses with a
pre-deﬁned response [10].
Add-ons outside web applications. Even though there are
add-ons for almost any type of software, it is mostly the
browser add-ons which have undergone critical security
scrutiny. For example, Google Chrome has an add-on (or
browser extension) ecosystem, where the add-ons them-
selves [29], their architecture [11] and protection mecha-
nisms [27] have been undergone security evaluation. Similar
vetting has been done for Firefox add-ons [7–9]. As more
applications are moving to the cloud, we believe that cloud-
application add-ons deserve the same attention from the secu-
rity research community as browser add-ons.
Text editors also have add-on ecosystems (e.g. Sublime
plugins) that have been recently criticized for security vulner-
abilities. Azouri Dor analyzed several text editors, and found
that it is possible for a malicious add-on to achieve privilege
escalation on the victim’s computer [6]. The attack vector
here involves crafting a malicious add-on and tricking the
victim to install and use it within the text editor. Our attack
vector, on the other hand, simply involves injecting a mali-
cious script in a document or other item to be shared with the
victim.
9 Conclusion
Add-ons in cloud applications are a relatively new phe-
nomenon, whose vulnerabilities have not been widely studied.
In this work, we analyzed the security of these add-ons, and
we found that ﬂaws in add-ons may introduce new security
threats to their host applications. In particular, the add-ons
do not always take care when processing untrusted input,
which can make them vulnerable to XSS attacks. The attacker
can inject malicious scripts into shared documents or emails,
which are then processed by the vulnerable add-on. Our study
demonstrated that such vulnerable add-ons appear in the wild
and that exploiting them is not difﬁcult. Moreover, it seems
that cloud-application vendors could do more to limit what the
attacker can do once its XSS code is running in the add-on.
References
[1] G Suite marketplace.
https://gsuite.google.com/
marketplace.
[2] Google Docs. https://www.google.com/docs/about/.
[3] Microsoft AppSource.
https://appsource.microsoft.
com/en-us/marketplace/apps.
[4] Shopify app store. https://apps.shopify.com/.
[5] AngularJS. AngularJS strict contextual escaping. https:
//docs.angularjs.org/api/ng/service/$sce.
[6] Dor Azouri. Abusing text editors via third-party plugins.
SafeBreach Labs research, 2018. [Accessed: 2019-08-20].
13
[7] Sruthi Bandhakavi, Samuel T King, Parthasarathy Madhusu-
dan, and Marianne Winslett. VEX: Vetting browser extensions
for security vulnerabilities. In USENIX Security Symposium,
2010.
[8] Adam Barth, Adrienne Porter Felt, Prateek Saxena, and Aaron
Boodman. Protecting browsers from extension vulnerabilities.
2010.
[9] Anton Barua, Mohammad Zulkernine, and Komminist Welde-
mariam. Protecting web browser extensions from JavaScript
injection attacks. In 2013 18th International Conference on
Engineering of Complex Computer Systems. IEEE, 2013.
[10] Prithvi Bisht and VN Venkatakrishnan. XSS-GUARD: precise
dynamic prevention of cross-site scripting attacks. In Inter-
national Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment. Springer, 2008.
[11] Nicholas Carlini, Adrienne Porter Felt, and David Wagner. An
evaluation of the Google Chrome extension security architec-
ture. In 21st USENIX Security Symposium, 2012.
[12] CERT. Advisory CA-2000-02 malicious HTML tags embed-
ded in client web requests. 2000.
[13] XiaoLong Chen, Mohan Li, Yu Jiang, and Yanbin Sun. A
comparison of machine learning algorithms for detecting XSS
attacks. In International Conference on Artiﬁcial Intelligence
and Security, pages 214–224. Springer, 2019.
[14] New Visions Cloudlab.
"Form Ranger"
add-on.
https://gsuite.google.com/marketplace/app/form_
ranger/387838027286.
[15] Forsberg+two. "Order Printer Pro" add-on. https://apps.
shopify.com/order-printer-pro.
[16] Google. Go Templates. https://golang.org/pkg/html/
template/.
[17] Google. Google APIs explorer.
https://developers.
google.com/apis-explore.
[18] Google.
Google cloud platform projects.
https:
//developers.google.com/apps-script/guides/
cloud-platform-projects#standard_cloud_platform_
projects.
[19] Google.
Quickstart: Add-on
for Google Docs.
https://developers.google.com/gsuite/add-ons/
editors/docs/quickstart/translate.
[20] Google. What is Google Picker? https://developers.
google.com/picker/.
[21] Google.
Dialogs and sidebars
in G Suite docu-
ments. https://developers.google.com/apps-script/
guides/dialogs#file-open_dialogs, 2019.
[22] Google.
Google API
services: User data pol-
https://developers.google.com/terms/
icy.
api-services-user-data-policy, 2019.
[23] Google.
OAuth client veriﬁcation.
https:
//developers.google.com/apps-script/guides/
client-verification, 2019.
[25] Shashank Gupta and Brij Bhooshan Gupta. Cross-site script-
ing (XSS) attacks and defense mechanisms: classiﬁcation and
state-of-the-art. International Journal of System Assurance
Engineering and Management, 2017.
[26] Dick Hardt. The OAuth 2.0 authorization framework. RFC
6749, 2012.
[27] Stefan Heule, Devon Rifkin, Alejandro Russo, and Deian Ste-
fan. The most dangerous code in the browser. In 15th Workshop
on Hot Topics in Operating Systems, 2015.
[28] Omar Ismail, Masashi Etoh, Youki Kadobayashi, and Suguru
Yamaguchi. A proposal and implementation of automatic de-
tection/collection system for cross-site scripting vulnerability.
In 18th International Conference on Advanced Information
Networking and Applications. IEEE, 2004.
[29] Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis
Mavrommatis, Niels Provos, Moheeb Abu Rajab, and Kurt
Thomas. Trends and lessons from three years ﬁghting mali-
cious extensions. In 24th USENIX Security Symposium, 2015.
[30] Martin Johns, Björn Engelmann, and Joachim Posegga.
XSSDS: Server-side detection of cross-site scripting attacks.
In 2008 Annual Computer Security Applications Conference
(ACSAC). IEEE, 2008.
[31] Engin Kirda, Christopher Kruegel, Giovanni Vigna, and Ne-
nad Jovanovic. Noxes: a client-side solution for mitigating
cross-site scripting attacks. In Proceedings of the 2006 ACM
symposium on Applied computing. ACM, 2006.
[32] Amit Klein. DOM based cross site scripting or XSS of the
third kind. Web Application Security Consortium, 2005.
[33] Sebastian Lekies, Ben Stock, and Martin Johns. 25 million
ﬂows later: Large-scale detection of DOM-based XSS. In Pro-
ceedings of the 2013 ACM SIGSAC conference on Computer
& communications security. ACM, 2013.
[34] Jesse Mccabe.
"Doc Variables" add-on.
https:
//gsuite.google.com/marketplace/app/doc_
variables/232821636920.
[35] William Melicher, Anupam Das, Mahmood Sharif, Lujo Bauer,
and Limin Jia. Riding out DOMsday: Towards detecting and
preventing DOM cross-site scripting. In NDSS, 2018.
[36] Microsoft. Microsoft identity platform (v2.0) overview.
https://docs.microsoft.com/en-us/azure/
active-directory/develop/v2-overview.
Ofﬁce Online permissions.
[37] Microsoft.
https:
//docs.microsoft.com/en-us/office/dev/add-ins/
reference/manifest/permissions.
[38] Microsoft.
"Translator for Outlook" add-on.
https:
//appsource.microsoft.com/en-us/product/office/
WA104380627.
[39] Microsoft. Use the Outlook REST APIs from an Outlook
add-in. https://docs.microsoft.com/en-us/outlook/
add-ins/use-rest-api.
[24] Jeremiah Grossman, Seth Fogie, Robert Hansen, Anton Rager,
and Petko D Petkov. XSS attacks: cross site scripting exploits
and defense. Syngress, 2007.
[40] Microsoft.
Privacy and security for Ofﬁce Add-ins.
https://docs.microsoft.com/en-us/office/dev/
add-ins/concepts/privacy-and-security, 2019.
14
[41] MITRE. Common vulnerabilities and exposures - the standard
for information security vulnerability names. https://cve.
mitre.org/.
[52] Sid Stamm, Brandon Sterne, and Gervase Markham. Reining
in the web with content security policy. In Proceedings of the
19th international conference on World wide web. ACM, 2010.
[42] Mozilla. The inline frame element. https://developer.
mozilla.org/en-US/docs/Web/HTML/Element/iframe.
[43] Mozilla.
window.postmessage() method.
https:
//developer.mozilla.org/en-US/docs/Web/API/
Window/postMessage.
[44] Yacin Nadji, Prateek Saxena, and Dawn Song. Document struc-
ture integrity: A robust basis for cross-site scripting defense.
In NDSS, volume 20, 2009.
[45] OWASP. Cross-site scripting (XSS). https://www.owasp.
org/index.php/Cross-site_Scripting_(XSS), 2018.
[46] OWASP.
Types of Cross-Site Scripting.
https:
//www.owasp.org/index.php/Types_of_Cross-Site_
Scripting#Types_of_Cross-Site_Scripting), 2018.
[47] OWASP.
Cross-site scripting prevention.
https:
//cheatsheetseries.owasp.org/cheatsheets/Cross_
Site_Scripting_Prevention_Cheat_Sheet.html, 2019.
[48] OWASP. XSS ﬁlter evasion cheat sheet. https://www.owasp.
org/index.php/XSS_Filter_Evasion_Cheat_Sheet,
2019.
[49] Prateek Saxena, Steve Hanna, Pongsin Poosankam, and Dawn
Song. FLAX: Systematic discovery of client-side validation
vulnerabilities in rich web applications. In NDSS, 2010.
[50] Shopify. App Bridge library. https://help.shopify.com/
en/api/embedded-apps/app-bridge.
[51] Shopify.
Staff account permissions.
https:
//help.shopify.com/en/manual/your-account/
staff-accounts/staff-permissions.
[53] Marius Steffens, Christian Rossow, Martin Johns, and Ben
Stock. Don’t trust the locals: Investigating the prevalence of
persistent client-side cross-site scripting in the wild. In NDSS,
2019.
[54] Ben Stock, Stephan Pﬁstner, Bernd Kaiser, Sebastian Lekies,
and Martin Johns. From facepalm to brain bender: Exploring
client-side cross-site scripting. In Proceedings of the 22nd
ACM SIGSAC conference on computer and communications
security. ACM, 2015.
[55] Mike Ter Louw and VN Venkatakrishnan. Blueprint: Robust
prevention of cross-site scripting attacks for existing browsers.
In 30th IEEE symposium on security and privacy. IEEE, 2009.
[56] Matthew Van Gundy and Hao Chen. Noncespaces: Using
randomization to enforce information ﬂow tracking and thwart
cross-site scripting attacks. In NDSS, 2009.
[57] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda,
Christopher Kruegel, and Giovanni Vigna. Cross site scripting
prevention with dynamic data tainting and static analysis. In
NDSS, 2007.
[58] Gary Wassermann and Zhendong Su. Static detection of cross-
site scripting vulnerabilities. In 2008 ACM/IEEE 30th Interna-
tional Conference on Software Engineering. IEEE, 2008.
[59] Mike West.
Content security policy: Embedded en-
forcement. https://w3c.github.io/webappsec-cspee/
#dom-htmliframeelement-csp, 2018.
[60] Michal Zalewski. The Tangled Web: A Guide to Securing
Modern Web Applications. No Starch Press, 2012.
15