# PostgreSQL 数据库备份

## 目录
1. 备份术语
2. 备份工具
3. 备份模式
4. `pg_basebackup` 简介
5. 全库备份
6. 表空间备份
7. 只读数据库备份
8. 总结
9. 练习

## 1. 备份术语
- **全库备份**：
  - 目标数据库可以处于打开或关闭状态。
  - 备份 `$PGDATA` 目录下的所有数据文件。
- **部分备份**：
  - 备份除 `pg_global` 之外的其他表空间。
- **一致性备份**：确保备份在某个一致的时间点。
- **不一致性备份**：备份过程中可能包含不一致的数据。

## 2. 备份工具
- **操作系统命令**：直接对数据库文件进行备份和恢复。
- **`pg_basebackup`**：用于物理备份，支持压缩和流式传输。
- **`pg_rman`**：提供更高级的备份和恢复功能，包括增量备份。

## 3. 备份模式
- **关闭数据库**：
  - **NOARCHIVELOG 模式**：物理备份，数据库关闭状态下进行。
- **打开或关闭数据库**：
  - **ARCHIVELOG 模式**：物理备份，数据库可以处于打开或关闭状态。

### 物理备份
- **一致性备份（数据库关闭）**：
  - 备份 `$PGDATA` 目录下的所有文件，包括 `base/`、配置文件等。
- **在线备份（数据库打开）**：
  - 包括 `base/` 目录、在线 WAL 文件、归档文件、参数文件等。

#### 一致性全库备份的好处
- 概念简单
- 易于执行
- 需要很少的操作员交互

#### 在线备份的好处
- 保持高数据库可用性
- 支持不间断的业务运营

#### 在线备份的要求
- 启用 `walwriter`
- 设置 `ARCHIVELOG` 模式
- 启用 `archiver` 进程

## 4. `pg_basebackup` 简介
`pg_basebackup` 是一个用于创建 PostgreSQL 数据库物理备份的工具。它可以在数据库运行时进行备份，并支持压缩和流式传输。

### 工作原理
- **`pg_start_backup`**：
  - 强制进入全页写模式。
  - 切换到当前的 WAL 段文件（版本 8.4 或更高）。
  - 执行检查点。
  - 创建 `backup_label` 文件，包含备份的基本信息。

- **`backup_label` 文件内容**：
  - CHECKPOINT LOCATION：记录检查点的 LSN 位置。
  - START WAL LOCATION：用于流式复制。
  - BACKUP METHOD：备份方法（`pg_start_backup` 或 `pg_basebackup`）。
  - BACKUP FROM：备份来源（主服务器或备用服务器）。
  - START TIME：执行 `pg_start_backup` 的时间戳。
  - LABEL：指定的标签。
  - START TIMELINE：备份开始的时间线。

- **`pg_stop_backup`**：
  - 重置非整页写入模式。
  - 写入备份结束的 XLOG 记录。
  - 切换 WAL 日志。
  - 创建备份历史文件。
  - 删除 `backup_label` 文件。

## 5. 执行备份
### 使用 `pg_basebackup`
- **示例**：
  - 生成压缩的 tar 包：
    ```sh
    pg_basebackup -D bk1 -Ft -z -P
    ```
  - 生成原样格式的备份：
    ```sh
    pg_basebackup -D bk2 -Fp -P
    ```

### 用户管理全库备份
- **示例**：
  - 开始备份：
    ```sql
    SELECT pg_start_backup('full');
    ```
  - 使用 tar 命令备份：
    ```sh
    cd $PGDATA
    tar -zcf /backup/data.tar.gz .
    ```
  - 结束备份：
    ```sql
    SELECT pg_stop_backup();
    ```

## 6. 表空间备份
- **示例**：
  - 开始备份：
    ```sql
    SELECT pg_start_backup('tbs');
    ```
  - 使用 tar 命令备份：
    ```sh
    cd $PGDATA
    tar -zcf /backup/base.tar.gz base
    cp backup_label /backup
    ```
  - 结束备份：
    ```sql
    SELECT pg_stop_backup();
    ```

## 7. 只读数据库备份
- **示例**：
  - 将数据库设置为只读：
    ```sql
    ALTER DATABASE new_db1 SET default_transaction_read_only = on;
    ```
  - 使用 tar/cp 命令备份：
    ```sh
    cd $PGDATA/base
    tar -zcf /backup/90195.tar.gz 90195
    ```

## 8. 总结
- **备份术语**：了解不同类型的备份及其特点。
- **备份工具**：选择合适的工具进行备份。
- **备份模式**：根据需求选择适当的备份模式。
- **`pg_basebackup`**：使用 `pg_basebackup` 进行高效的物理备份。

## 9. 练习
1. 创建表空间外部目录，创建表空间，创建数据库 `db1`，默认表空间设置为新建的表空间。
2. 创建存放 WAL 归档文件的外部目录。
3. 配置 `postgresql.conf`，设置 `wal_level`，启用 `archive_mode`，设置 `archive_command`。
4. 重启数据库实例。
5. 使用 `pgbench` 连接 `db1`，进行 TPC-B 压测一段时间。
6. 在数据库中创建测试表，包含自增 ID 和时间戳。在压测过程中，开启一个会话，每隔 10 秒写入一条记录，持续 100 秒，总共写入 10 条。
7. 观察归档文件是否正常备份到外部目录。
8. 使用 `pg_basebackup` 备份数据库全量数据。
9. 使用 `CHECKPOINT` 创建检查点，使用 `pg_switch_wal` 切换 WAL 日志文件产生 WAL 归档。