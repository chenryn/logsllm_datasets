以下是经过优化的文本，使其更加清晰、连贯和专业：

---

### 项目配置与构建日志

#### 配置选项
- `USE_LITE_PROTO`：关闭
- `USE_LMDB`：关闭
- `USE_METAL`：关闭
- `USE_MKL`：启用
- `USE_MKLDNN`：启用
- `USE_MOBILE_OPENGL`：关闭
- `USE_NCCL`：关闭
- `USE_NNPACK`：启用
- `USE_NUMPY`：启用
- `USE_OBSERVERS`：启用
- `USE_OPENCL`：关闭
- `USE_OPENCV`：关闭
- `USE_OPENMP`：启用
- `USE_PROF`：关闭
- `USE_QNNPACK`：启用
- `USE_REDIS`：关闭
- `USE_ROCKSDB`：关闭
- `USE_ZMQ`：关闭
- `USE_DISTRIBUTED`：启用
  - `USE_MPI`：启用
  - `USE_GLOO`：启用
  - `USE_GLOO_IBVERBS`：关闭
- 公共依赖项：`Threads::Threads`, `caffe2::mkl`, `caffe2::mkldnn`
- 私有依赖项：`qnnpack`, `nnpack`, `cpuinfo`, `/usr/lib/x86_64-linux-gnu/libnuma.so`, `fp16`, `/usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi_cxx.so`, `/usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so`, `gloo`, `aten_op_header_gen`, `onnxifi_loader`, `rt`, `gcc_s`, `gcc`, `dl`

#### 配置与生成
- 配置完成
- 生成完成

#### CMake 警告
- 以下手动指定的变量未被项目使用：
  - `CUDNN_INCLUDE_DIR`
  - `CUDNN_LIBRARY`
  - `CUDNN_LIB_DIR`
  - `THD_SO_VERSION`

#### 构建文件已写入
- 目标路径：`/opt/pytorch/build`

#### 构建过程
- 执行命令：`make install -j8`

##### 依赖扫描与目标构建
- `js_embed` 目标
- `clog` 目标
- `gtest` 目标
- `pthreadpool` 目标
- `libprotobuf-lite` 目标
- `benchmark` 目标
- `libprotobuf` 目标
- `gloo` 目标
- `onnxifi_dummy` 目标
- `onnxifi_loader` 目标
- `python_copy_files` 目标
- `c10` 目标
- `mkldnn` 目标

##### 编译进度
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/js_embed.dir/__/src/google/protobuf/compiler/js/embed.cc.o`
- [0%] 开始编译 `confu-deps/clog/CMakeFiles/clog.dir/src/clog.c.o`
- [0%] 开始编译 `third_party/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.o`
- [0%] 开始编译 `confu-deps/pthreadpool/CMakeFiles/pthreadpool.dir/src/threadpool-pthreads.c.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/arena.cc.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/benchmark.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/arena.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/algorithm.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/arenastring.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/allgather.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/arenastring.cc.o`
- [0%] 开始编译 `third_party/onnx/CMakeFiles/onnxifi_dummy.dir/onnx/onnxifi_dummy.c.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/extension_set.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/generated_message_table_driven_lite.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/generated_message_util.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/extension_set.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/generated_message_table_driven_lite.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/allreduce_local.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/generated_message_util.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/broadcast.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/io/coded_stream.cc.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/benchmark_register.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/io/coded_stream.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/io/zero_copy_stream.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/io/zero_copy_stream_impl_lite.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/io/zero_copy_stream.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/context.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/gather.cc.o`
- [0%] 开始编译 `third_party/onnx/CMakeFiles/onnxifi_loader.dir/onnx/onnxifi_loader.c.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/message_lite.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/repeated_field.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/io/zero_copy_stream_impl_lite.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/Device.cpp.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/reduce.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/atomicops_internals_x86_msvc.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/message_lite.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/bytestream.cc.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/batch_normalization.cpp.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/DeviceType.cpp.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/repeated_field.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/common.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/scatter.cc.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/convolution.cpp.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/convolution_relu.cpp.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/Half.cpp.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/int128.cc.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/colorprint.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/atomicops_internals_x86_msvc.cc.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/commandlineflags.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/types.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/io_win32.cc.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/deconvolution.cpp.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/once.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/bytestream.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/Stream.cpp.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/console_reporter.cc.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/complexity.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/status.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/common/linux.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/common.cc.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/eltwise.cpp.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/statusor.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/core/dispatch/DeviceId.cpp.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/core/dispatch/DispatchKey.cpp.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/counter.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/int128.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/stringpiece.cc.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/engine.cpp.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/csv_reporter.cc.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/json_reporter.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/common/logging.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/io_win32.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/once.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/stringprintf.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/core/dispatch/DispatchTable.cpp.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/inner_product.cpp.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/structurally_valid.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/status.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/core/dispatch/Dispatcher.cpp.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/reporter.cc.o`
- [0%] 开始编译 `third_party/gloo/gloo/CMakeFiles/gloo.dir/mpi/context.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/strutil.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/statusor.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf.dir/__/src/google/protobuf/stubs/time.cc.o`
- [0%] 开始编译 `third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/lrn.cpp.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/sleep.cc.o`
- [0%] 开始编译 `third_party/protobuf/cmake/CMakeFiles/libprotobuf-lite.dir/__/src/google/protobuf/stubs/stringpiece.cc.o`
- [0%] 开始编译 `c10/CMakeFiles/c10.dir/core/dispatch/KernelRegistration.cpp.o`
- [0%] 开始编译 `third_party/benchmark/src/CMakeFiles/benchmark.dir/statistics.cc.o`

---

通过这种方式，整个日志变得更加结构化和易于阅读。希望这对你有帮助！