8
4
4
4
3
1
1
2
4
3
146
AP
0
0
0
0
0
0
0
2
1
0
0
1
0
0
0
1
3
2
1
0
0
0
0
7
2
4
3
0
0
2
2
0
1
2
0
0
0
0
2
2
38
E
0
0
2
0
0
0
8
6
5
0
0
5
0
0
1
5
1
5
5
1
1
0
0
4
4
4
9
4
4
4
4
4
3
2
3
1
1
2
1
1
100
N
0
0
1
1
0
0
10
8
6
0
0
6
0
0
1
6
1
7
6
1
1
1
0
13
6
8
12
4
4
6
8
4
4
4
3
1
1
2
4
3
143
AP
0
0
0
0
0
0
0
2
1
0
0
1
0
0
0
1
0
2
1
0
0
0
0
8
2
4
3
0
0
2
2
0
1
2
0
0
0
0
2
2
36
CogniCryptSAST
N
3
1
0
1
3
3
8
6
6
3
0
7
0
3
0
7
2
7
0
0
0
1
3
10
4
4
11
5
5
6
6
9
3
2
3
1
1
1
1
2
138
E
3
1
0
0
3
3
8
6
6
3
0
6
0
3
0
6
2
6
0
0
0
1
3
10
4
4
11
5
5
5
6
8
3
2
3
1
1
1
1
2
132
E
0
0
1
0
0
0
8
6
5
0
0
5
0
0
0
5
1
5
5
1
1
0
0
5
4
4
9
4
4
4
4
4
3
2
3
1
1
2
1
1
99
that, we perform all the tools on 40 APKs. The results are
given in Table VI, where N denotes the number of errors that
are reported by any tool, E denotes the number of actual errors
by manual inspection, AP denotes the errors that are caused
by argument passing in our models.
In total, Sym-HMM, Sym-NGM, and CogniCryptSAST re-
port 146, 143 and 138 errors for these 40 APKs, respectively.
On these reported errors, we perform a manual inspection
Java. Nadi et al. [26] performed an empirical investigation
into the obstacles developers face while using the Java crypto
APIs. Kr¨uger et al. [27] provided a toolkit CogniCrypt to
support Java developers with the use of crypto APIs. Paletov
et al. [28] proposed an approach to infer crypto API rules
for Java programs from code changes. Duncan et al. [29]
presented a methodology for automatically checking security
properties in JavaScript code. Wickert et al. [30] built a dataset
of parametric crypto misuses from real-world java projects,
with the help of CogniCryptSAST [6].
Apart from the Android platform or Java-speciﬁc applica-
tions, there are some other approaches for other platforms or
languages. Li et al. [31] developed a tool iCryptoTracer to
detect the crypto misusage for iOS applications, using the
rules similar to CryptoLint [3]. Gorski et al. [32] presented
an approach to help Python developers on crypto API misuse.
Mindermann et al. [33] performed an exploratory study on the
usage of Rust crypto APIs.
V. CONCLUSION
In this paper, we have proposed an approach based on prob-
abilistic models to analyzing crypto API usages in Android
applications. To build the models, we have created a dataset
consisting of crypto API sequences with arguments. We also
have carried out some interesting experiments to evaluate our
models, which show that our models are capable of capturing
the usages, detecting and locating the misuses; and perform
better than some existing approaches based on probabilistic
models.
As for future work, we will enhance our abstraction to
detect more misuses and consider more domain-speciﬁc API
libraries. We will also consider the crypto API recommenda-
tion as well as the usage rule mining from existing codes.
ACKNOWLEDGEMENTS
This work was partially supported by the National Natural
Science Foundation of China under Grants No. 61972260,
61772347, 61836005; Guangdong Basic and Applied Basic
Research Foundation under Grant No. 2019A1515011577; and
Guangdong Science and Technology Department under Grant
No. 2018B010107004.
REFERENCES
https://www.idc.com/promo/smartphone-market-
from IDC,
[1] Report
share/os.
[2] I. Muslukhov, Y. Boshmaf, C. Kuo, J. Lester, and K. Beznosov, “Know
your enemy: the risk of unauthorized access in smartphones by insiders,”
in MobileHCI, 2013, pp. 271–280.
[3] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in android applications,” in CCS, 2013,
p. 73–84.
[4] J. Gao, P. Kong, L. Li, T. F. Bissyand´e, and J. Klein, “Negative results
on mining crypto-api usage rules in android apps,” in MSR, 2019, pp.
388–398.
[5] S. Shuai, D. Guowei, G. Tao, Y. Tianchang, and S. Chenjie, “Modelling
analysis and auto-detection of cryptographic misuse in android applica-
tions,” in DASC, 2014, pp. 75–80.
[7] D. Chen, Yanduo Zhang, Rongcun Wang, W. Wei, Huabing Zhou,
Xun Li, and Binbin Qu, “Mining api protocols based on a balanced
probabilistic model,” in FSKD, 2015, pp. 2276–2282.
[6] S. Kr¨uger, J. Sp¨ath, K. Ali, E. Bodden, and M. Mezini, “CrySL: An
Extensible Approach to Validating the Correct Usage of Cryptographic
APIs,” in ECOOP, 2018, pp. 10:1–10:27.
[8] T. T. Nguyen, H. V. Pham, P. M. Vu, and T. T. Nguyen, “Recommending
api usages for mobile apps with hidden markov model,” in ASE, Nov
2015, pp. 795–800.
[9] T. T. Nguyen, H. V. Pham, P. M. Vu, and T. T. Nguyen, “Learning
api usages from bytecode: a statistical approach,” in ICSE, 2016, pp.
416–427.
[10] B. Rashidi, C. Fung, and E. Bertino, “Android resource usage risk
assessment using hidden markov model and online learning,” Comput.
Secur., vol. 65, no. C, pp. 90–107, 2017.
[11] J. Wang, Y. Dang, H. Zhang, K. Chen, T. Xie, and D. Zhang, “Mining
succinct and high-coverage api usage patterns from source code,” in
MSR, 2013, pp. 319–328.
[12] V. Raychev, M. Vechev, and E. Yahav, “Code completion with statistical
language models,” in PLDI, 2014, p. 419–428.
[13] S. Wang, D. Chollak, D. Movshovitz-Attias, and L. Tan, “Bugram: bug
detection with n-gram language models,” in ASE, 2016, pp. 708–719.
[14] X. Gu, H. Zhang, D. Zhang, and S. Kim, “Deep api learning,” in FSE,
2016, p. 631–642.
[15] M. Asaduzzaman, C. K. Roy, S. Monir, and K. A. Schneider, “Exploring
api method parameter recommendations,” in ICSME, 2015, pp. 271–280.
[16] A. Rice, E. Aftandilian, C. Jaspan, E. Johnston, M. Pradel, and
Y. Arroyo-Paredes, “Detecting argument selection defects,” OOPSLA,
pp. 104:1–104:22, 2017.
[17] R. Wi´sniewski and C. Tumbleson, Apktool: A tool for reverse engineer-
ing Android apk ﬁles, https://ibotpeaches.github.io/Apktool/.
[18] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. L.
Traon, D. Octeau, and P. D. McDaniel, “FlowDroid: precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for Android
apps,” in PLDI, 2014, pp. 259–269.
[19] Z. Xu, K. Ren, S. Qin, and F. Craciun, “CDGDroid: Android Malware
Detection Based on Deep Learning Using CFG and DFG,” in ICFEM,
2018, pp. 177–193.
[20] Dalvik Bytecode, https://source.android.com/devices/tech/dalvik/dalvik-
bytecode.
[21] L. R. Rabiner and B.-H. Juang, “An introduction to hidden markov
models,” IEEE ASSP Magazine, vol. 3, no. 1, pp. 4–16, 1986.
[22] P. F. Brown, P. V. deSouza, R. L. Mercer, V. J. D. Pietra, and J. C. Lai,
“Class-based n-gram models of natural language,” Comput. Linguist.,
vol. 18, no. 4, p. 467–479, 1992.
[23] K. Allix, T. F. Bissyand´e, J. Klein, and Y. Le Traon, “Androzoo:
Collecting millions of android apps for the research community,” in
MSR, 2016, pp. 468–471.
[24] A. Chatzikonstantinou, C. Ntantogian, G. Karopoulos, and C. Xenakis,
“Evaluation of cryptography usage in android applications,” in BICT,
2016, pp. 83–90.
[25] I. Muslukhov, Y. Boshmaf, and K. Beznosov, “Source attribution of
cryptographic api misuse in android applications,” in ASIA CCS, 2018,
p. 133–146.
[26] S. Nadi, S. Kr¨uger, M. Mezini, and E. Bodden, “Jumping through hoops:
Why do java developers struggle with cryptography apis?” in ICSE,
2016, pp. 935–946.
[27] S. Kr¨uger, S. Nadi, M. Reif, K. Ali, M. Mezini, E. Bodden, F. G¨opfert,
F. G¨unther, C. Weinert, D. Demmler, and et al., “Cognicrypt: Supporting
developers in using cryptography,” in ASE, 2017, p. 931–936.
[28] R. Paletov, P. Tsankov, V. Raychev, and M. Vechev, “Inferring crypto
api rules from code changes,” in PLDI, 2018, p. 450–464.
[29] D. Mitchell, L. T. van Binsbergen, B. Loring, and J. Kinder, “Checking
cryptographic api usage with composable annotations (short paper),” in
PEPM, 2017, p. 53–59.
[30] Wickert, Anna-Katharina and Reif, Michael and Eichberg, Michael and
Dodhy, Anam and Mezini, Mira, “A dataset of parametric cryptographic
misuses,” in MSR, 2019, pp. 96–100.
[31] Y. Li, Y. Zhang, J. Li, and D. Gu, “iCryptoTracer: Dynamic Analysis on
Misuse of Cryptography Functions in iOS Applications,” in NSS, 2014,
pp. 349–362.
[32] P. L. Gorski, L. L. Iacono, D. Wermke, C. Stransky, S. M¨oller, Y. Acar,
and S. Fahl, “Developers deserve security warnings, too: On the effect
of integrated security advice on cryptographic API misuse,” in SOUPS,
2018, pp. 265–281.
[33] K. Mindermann, P. Keck, and S. Wagner, “How usable are rust cryp-
tography apis,” in QRS, 2018, p. 143–154.