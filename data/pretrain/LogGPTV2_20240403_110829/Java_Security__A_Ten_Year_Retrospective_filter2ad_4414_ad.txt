### Incompatible Type Mistakenly Viewed
402

Provider-conscious design is relatively rare in software systems but has gained some popularity in cryptographic library designs. This approach offers several advantages. For instance, developers can integrate a native-code implementation to leverage an existing cryptographic package or a hardware-based solution. Additionally, users may have various reasons for preferring one provider over another.

Our design is open, allowing any cryptography provider to implement our APIs and make their implementations commercially available. We do not adopt a controlled-provider model and do not seek to certify or restrict providers based on export control or other reasons.

### Secure Communication
Applications built with the JDK can provide secure network-based communications at both the link level, as in Sun Microsystems' SKIP technology, and the session level, as in Netscape's SSL protocol (see Glossary). JavaSoft supports open standards that meet our customers' technical needs, but we must operate within our business restrictions.

### Flexible Security Policy
The current sandbox is fixed and difficult to change (and should not be altered lightly). To enable flexible security policies, we need mechanisms for fine-grained authentication and authorization. 

Java will be deployed on a wide range of platforms, where user authentication can vary from simple password-based logins to public-key technology with hardware support. Therefore, we must allow multiple ways to establish identity while providing a uniform way to access this information. This approach enables features like single sign-on and integration with legacy systems.

Runtime authorization depends on several factors, including the code base (whether it is local or remote and which hosts), whether the code is signed and by whom, and whether we recognize and trust the signers. We envision specifying a policy in terms of sets of permissions, where any piece of code runs with a specific permissions set in effect. The permissions format is extensible and customizable. For example, JavaSoft has specified the following permissions to permit reading a file, connecting to a specified host at a particular port number, and exiting the Java runtime:

- `COM.JavaSoft File read path`
- `COM.JavaSoft Net connect remoteIP:port`
- `COM.JavaSoft Runtime allow system.exit`

We expect this format to evolve, and we will publish a full specification for consultation.

### Protection Domains
A fundamental concept in system security is the protection domain. A domain can be defined by the set of objects currently directly accessible by a principal. A principal is an entity in the computer system to which the system grants authorizations (and, consequently, accountability). The Java sandbox is an example of a protection domain with a fixed boundary.

By default, the system must prevent protection domains from interacting with each other. Any permitted interaction must be through trusted system code or explicitly allowed by the concerned domains. Often, a domain supports inheritance, where a subdomain automatically inherits the parent domain’s security attributes. In certain cases, the parent further restricts the subdomain explicitly. Relaxing a subdomain is also possible with the notion of trusted code.

Protection domains generally fall into two categories: system and application. It is crucial that all protected external resources, such as the file system, networking facility, and the screen and keyboard, are only accessible via system domains. Figure 4 illustrates the domain composition of a Java runtime.

Each domain (system or application) may also implement additional protection of its internal resources within its own domain boundary. Because the JDK system cannot predict or enforce the semantics of such protection, this level of protection is best left to the application developers.

For example, in a banking application, the banking software can support and protect internal concepts such as checking accounts, deposits, and withdrawals. The developer can use the protection domain primitive in JDK to run the application in a domain, thus insulating it from other applications. The developer can also construct the system so that the handling of each separate account runs inside a distinct subdomain, ensuring that accounts do not get mixed up.

For convenience, we can think of the system domain as a single, large collection of all system code. For better protection, system code can run in multiple system domains, where each domain protects a particular type of resource and has a special set of rights. For example, as shown in Figure 5, file system code and network system code can run in two separate domains, where neither has rights to the other’s resources. This arrangement confines the risks and consequences of an error or security flaw within the boundary of the affected domain.

### Multidomain Computation
A thread of execution (not necessarily tied to a single thread) may occur entirely within a single protection domain or involve an application domain and the system domain, as shown in Figure 6.

For example, an application that prints a message must interact with the system domain, which is the only access point to an output stream. It is crucial that the application domain does not gain additional permissions at any time by calling the system domain, as this could have security implications.

In the reverse situation, a system domain invokes a method from an application domain, such as when the AWT system domain calls an applet’s paint method to display the applet. Here, it is crucial that the effective access rights remain the same as the current rights enabled in the application domain at all times. An execution thread can also traverse multiple protection domains, as shown in Figure 7.

An exceptional case is when a piece of trusted system code can temporarily exercise more permissions than are available directly to the application. For example, a user cannot have direct access to the password file but can call a trusted system utility to change the password on their behalf. In this situation, the system utility must enter a special privileged mode.

Simple and prudent rules of thumb for calculating permissions include:
- The permission of an execution thread is the intersection of the permissions of all protection domains traversed by the execution thread.
- When a piece of code in the execution thread has entered its privileged mode, the intersection of permissions is applied only to protection domains between the privileged code and the end of the thread.

### Conclusion
This article provides a brief overview of Java’s basic security mechanisms, both existing and planned. We have detailed the design of the cryptographic library and the concept of protection domains, but have not elaborated on other topics such as password-protected authentication protocols, access control and delegation, and secure remote method invocation. We plan to report our design and implementation experiences in future articles.

### Acknowledgments
Decades of research in computer security have influenced the ideas presented here. We regret that we cannot list all original publications or thank everyone who has contributed to our discussions.

This document is a purely technical discussion for the wider Java community and does not necessarily commit JavaSoft to any particular features or implementations.

### References
1. J. Gosling, B. Joy, and G. Steele, *The Java Language Specification*, Addison-Wesley, Menlo Park, Calif., 1996.
2. T. Lindholm and F. Yellin, *The Java Virtual Machine Specification*, Addison-Wesley, 1997.
3. J.C. Laprie, ed., *Dependability: Basic Concepts and Terminology*, Dependable Computing and Fault-Tolerant Systems, Vol. 5, Springer-Verlag, New York, 1992.
4. R.M. Needham, “Denial of Service: An Example,” *Comm. ACM*, Vol. 37, No. 11, Nov. 1994, pp. 42–46.
5. P.G. Neumann, *Computer-Related Risks*, Addison-Wesley, 1995.
6. “Information Security: Computer Attacks at Department of Defense Pose Increasing Risks,” US General Accounting Office, Tech. Report GAO/AIMD-96-84, Washington, D.C., 1996.
7. M. Gasser, *Building a Secure Computer System*, Van Nostrand Reinhold Co., New York, 1988.
8. J.H. Saltzer and M.D. Schroeder, “The Protection of Information in Computer Systems,” *Proc. IEEE*, Vol. 63, No. 9, Sept. 1975, pp. 1278–1308.
9. D. Dean, E.W. Felton, and D.S. Wallach, “Java Security: From HotJava to Netscape and Beyond,” *Proc. IEEE Symp. Research in Security and Privacy*, IEEE, Piscataway, N.J., 1996, pp. 190–200.
10. M.D. Schroeder, *Cooperation of Mutually Suspicious Subsystems in a Computer Utility*, doctoral dissertation, Dept. Electrical Eng., Massachusetts Institute of Technology, Cambridge, Mass., 1972.
11. A.K. Jones, *Protection in Programmed Systems*, doctoral dissertation, Dept. Computer Science, Carnegie Mellon Univ., Pittsburgh, Pa., 1973.
12. W.A. Wulf, R. Levin, and S.P. Harbison, *HYDRA/C.mmp–An Experimental Computer System*, McGraw-Hill, New York, 1981.
13. L. Gong et al., “Protecting Poorly Chosen Secrets from Guessing Attacks,” *IEEE J. Selected Areas in Comm.*, Vol. 11, No. 5, Jun. 1993, pp. 648–656.
14. B.W. Lampson, “Protection,” *Proc. Fifth Princeton Symp. Information Sciences and Systems*, Princeton University, Princeton, N.J., 1971. Reprinted in *ACM Operating Systems Review*, Vol. 8, No. 1, Jan. 1974, pp. 18–24.
15. J.H. Saltzer, “Protection and the Control of Information Sharing in Multics,” *Comm. ACM*, Vol. 17, No. 7, Jul. 1974, pp. 388–402.
16. B. Lampson et al., “Authentication in Distributed Systems: Theory and Practice,” *ACM Trans. Computer Systems*, Vol. 10, No. 4, Nov. 1992, pp. 265–310.

### Author Biography
Li Gong joined JavaSoft from Stanford Research Institute as Java security architect. His research interests include distributed systems and networking, especially security and fault tolerance issues. Gong received his PhD from the University of Cambridge, England, and the 1994 IEEE Communications Society Leonard G. Abraham award. He served as program co-chair of the third and fourth ACM Conferences on Computer and Communications Security and as program chair of the seventh and eighth IEEE Computer Security Foundations Workshops. He is currently program co-chair of the 1998 IEEE Symposium on Security and Privacy. He is an associate editor of *ACM Transactions on Information and System Security* and is on the editorial board of the *Journal of Computer Security*. He is a member of the IEEE and the ACM.

For questions regarding this article, please contact Li Gong, JavaSoft, MS UCUP02-102, 2550 Garcia Ave., Mountain View, CA 94043-1100; gong@eng.sun.com.

405
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 13:13:50 UTC from IEEE Xplore. Restrictions apply.