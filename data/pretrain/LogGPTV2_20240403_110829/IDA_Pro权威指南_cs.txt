  UPX1:00408888        xchg    eax, ebp  
  UPX1:00408889  
  UPX1:00408889 loc_408889:                          ; CODE XREF: start+146↓ j  
  UPX1:00408889        mov     al, [edi]  
  UPX1:0040888B        inc     edi  
  UPX1:0040888C        or      al, al  
  UPX1:0040888E        jz      short loc_40886C  
  UPX1:00408890        mov     ecx, edi  
  UPX1:00408892        push    edi  
  UPX1:00408893        dec     eax  
  UPX1:00408894        repne scasb  
  UPX1:00408896        push    ebp  
➋  UPX1:00408897        call    dword ptr [esi+8090h] ; GetProcAddress  
  UPX1:0040889D        or      eax, eax  
  UPX1:0040889F        jz      short loc_4088A8  
➌  UPX1:004088A1        mov     [ebx], eax            ; Save to import table  
  UPX1:004088A3        add     ebx, 4  
  UPX1:004088A6        jmp     short loc_408889
这个例子包含一个负责调用 LoadLibraryA
17
 （➊）的外层循环和一个负责调用 GetProcAddress
 （➋）的内层循环。每次成功调用 GetProcAddress
 后，新获取的函数地址存储在重建后的导入表中（➌）。
17. 许多接受字符串参战的Windows 函数分为两个版本：一种版本接受ASCII 字符串，一种版本接受Unicode字符串。这些函数的ASCII 版本带A 后缀，而Unicode版本则带W 后缀。
这些循环作为 UPX 去模糊存根的最后一部分执行，因为每个函数包含指向一个库名称或函数名称的字符串指针参数，且相关的字符串保存在压缩数据区域，以避免被 strings
 实用工具检测。因此，在 UPX 中，只有所需的字符串被解压后，相关库才能被加载。
回到tElock 示例，它遇到的问题有所不同。由于只有两个导入函数，既不是 LoadLibraryA
 也不是GetProcAddress
 ，那么，tElock 实用工具如何像UPX 一样执行函数解析任务呢？所有Windows 进程根据 kernel32.dll 运行，这表示 kernel32.dll 为所有进程保存在内存中。如果一个程序能够定位 kernel32.dll ，那么要定位这个 DLL 中的任何函数，包括 LoadLibraryA
 和GetProc- Address
 ，就相对容易一些。如前所述，使用这两个函数，你可以加载进程所需的任何其他库，并定位这些库中的所有必需函数。在论文“Understanding Windows shellcode ”18
 中，Skape 讨论了一些技巧，说明如何完成这个任务。虽然 tElock 并没有使用 Skape 详细介绍的技巧，但是它们之间有许多相似之处，其最终目的是模糊加载和链接过程。如果不仔细跟踪程序的指令，你很容易忽略程序加载了一个库或查询了一个函数地址。下面的代码片段说明了 tElock 如何定位LoadLibraryA
 的地址：
18. 参见http://www.hick.org/code/skape/papers/win32-shellcode.pdf
 ，尤其是第3 章的3.3节。
.shrink:0041D1E4                 cmp     dword ptr [eax], 64616F4Ch  
.shrink:0041D1EA                 jnz     short loc_41D226  
.shrink:0041D1EC                 cmp     dword ptr [eax+4], 7262694Ch  
.shrink:0041D1F3                 jnz     short loc_41D226  
.shrink:0041D1F5                 cmp     dword ptr [eax+8], 41797261h  
.shrink:0041D1FC                 jnz     short loc_41D226
很明显，这段代码快速连续进行了几次比较。但我们并不十分清楚这些比较的作用。重新格式化每次比较所使用的操作数，我们获得一些启示。格式化后的代码如下所示：
.shrink:0041D1E4                 cmp     dword ptr [eax], 'daoL'  
.shrink:0041D1EA                 jnz     short loc_41D226  
.shrink:0041D1EC                 cmp     dword ptr [eax+4], 'rbiL'  
.shrink:0041D1F3                 jnz     short loc_41D226  
.shrink:0041D1F5                 cmp     dword ptr [eax+8], 'Ayra'  
.shrink:0041D1FC                 jnz     short loc_41D226
每个十六进制常量实际上是一个由 4 个ASCII 字符组成的序列，它们按顺序（前面讲过，x86是一种小端处理器，因此我们需要颠倒顺序读取这些字符）拼写成 LoadLibraryA
 。如果这 3 个比较成功，则说明 tElock 已经定位了 LoadLibraryA
 的导出表条目，再经过几个简单的操作，将可以获得这个函数的地址，并用它加载其他库。使用tElock 进行函数查询有一个有趣的特点，即它似乎有些“抗拒”字符串分析，因为直接嵌入到程序指令中的4 字节常量看起来并不像更加标准的、以零为终止符的字符串，因而并未包含在 IDA 生成的字符串列表中。
使用UPX和tElock 时，通过仔细分析程序代码手动重建一个程序的导入表要更加容易一些，因为最终它们都将包含一些ASCII 字符数据，我们可以利用这些数据确定程序到底引用了哪些库和函数。Skape 的论文详细介绍了一个函数解析过程，在这个过程中，代码中根本没有出现任何字符串。论文讨论的基本概念是为你需要解析的每个函数的名称预先计算一个唯一的散列19
 值。要解析每一个函数，首先搜索一个库的导出名称表，然后对表中的每个名称进行散列处理，再将得到的散列值与为相关函数预先计算的散列值进行比较，如果这两个散列值相互匹配，则说明你已经找到这个函数的位置，并在相关库的导出地址表中轻易找到它的地址。为了静态分析以这种方式模糊处理的二进制文件，你需要了解对每个函数名称使用的散列算法，并将该算法应用于程序搜索的库导出的所有名称。拥有完整的散列表后，你就可以直接查询你在程序中遇到的每一个散列值，并确定该散列值对应哪一个函数。20
 如下所示是一个由kernel32.dll 生成的散列表的一部分：
19. 散列函数是一个算术过程，它由一个任意大小的输入（如一个字符串）获得一个固定大小（如4 字节）的结果。
20. Hex-Rays 在http://www.hexblog.com/?p=93
 中介绍了IDA 的调试功能以计算这些散列值。
➊  GetProcAddress : 8A0FB5E2  
  GetProcessAffinityMask : B9756EFE  
  GetProcessHandleCount : B50EB87C  
  GetProcessHeap : C246DA44  
  GetProcessHeaps : A18AAB23  
  GetProcessId : BE05ED07
需要注意的是，散列值特定于某个特殊的库所使用的散列函数，并且可能因库而异。使用这个特殊的表，如果在程序中遇到散列值 8A0FB5E2
 （➊ ），我们可以迅速确定程序正尝试查询GetProcAddress
 函数的地址。
Skape 用于解析函数名称的散列值，最初是为了供利用Windows 漏洞的破解程序使用而开发和记录的，但是它们已经被用在模糊程序中。例如，WinLincense模糊实用工具就利用这类散列技巧来隐藏它的行为。
关于导入表的最后一点提示是：IDA 有时会为你提供线索，指出一个程序的导入表存在问题。模糊Windows 二进制文件常常会使用经过大量修改的导入表，这时 IDA 会通知你，这样的二进制文件似乎有些不正常。在这类情况下，IDA 显示的警告对话框如图 21-3 所示。
图21-3 导入段被改编的警告对话框
这个对话框提供了一条最早的提示，指出一个二进制文件可能经过某种形式的模糊处理。该对话框可以作为一个警告，说明该二进制文件可能难以分析。因此，在分析该文件时，你应当小心行事。
21.1.4 有针对性地攻击分析工具
提到这类反逆向工程工具，是因为它具有阻止逆向工程的潜力。许多逆向工程工具都可以看成是高度专一化的解析器，它们处理输入数据，提供某种摘要信息或显示相关细节。作为软件，它们也和所有其他软件一样，存在各种类型的漏洞。具体来说，错误地处理用户提供的数据，有时可能会导致可被他人利用的条件。
除了我们已经讨论的技巧外，希望防止软件被分析的程序员可能会采取更加主动的方式阻止反逆向工程。利用精心构造的输入文件，可以创建一个特殊的程序，这个程序既能够正常运行，又存在很大的缺陷，足以利用逆向工程工具中存在的漏洞。这类漏洞并不常见，但已经被人们记录下来，包括 IDA 中的漏洞21
 。攻击者的目的是在某个时候将恶意软件加载到 IDA 中。至少，攻击者可以拒绝服务，这样，在能够创建数据库之前，IDA 就会崩溃。另外，攻击者可以访问分析人员的计算机和相关网络。关注这类攻击的用户应考虑在沙盒环境中执行所有初步分析任务。例如，你可以在一个沙盒中运行 IDA ，为所有二进制文件创建初始数据库。然后，再将初始数据库（理论上它们没有任何恶意功能）分发给其他分析人员，这样这些分析人员根本不需要接触原始的二进制文件。
21. 参见http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2005-0115
 。更多详情参见http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=189
 。
21.2 反动态分析技巧
我们在前面几节讨论的反静态分析技巧中，没有一种技巧会给一个程序是否运行造成任何影响。实际上，虽然它们使你仅仅通过静态分析技巧难以理解一个程序的真正行为，但是它们无法阻止该程序运行，否则，它们将使一个程序失去作用，因而我们也就完全没有必要分析这个程序。
程序必须运行才能有效地工作，鉴于此，动态分析旨在观察运动中（运行中）的程序行为，而不是观察静止的程序（如果程序并未运行，则使用静态分析）。本节中，我们将简单介绍一些更加常见的反动态分析技巧。多数情况下，这些技巧一般与静态分析工具无关，但如果它们的功能有重叠的地方，我们将会指出来。从第 24 章开始，我们将回过头来讨论这些技巧对 IDA 的集成调试器的影响。
21.2.1 检测虚拟化
配置沙盒环境的一个最常见的目的是利用虚拟化软件（如 VMware）为恶意软件（或者这方面的任何其他相关软件）提供一个执行环境。这类环境的优势在于它们通常提供检查点和回滚功能，能够迅速将沙盒恢复到一个已知的“清洁”状态。使用这类环境作为沙盒基础的缺点在于程序能够相对容易地检测出（特别是在 32 位x86 平台上），它在一个虚拟环境中运行。假设虚拟化等同于监视，那么许多希望保持隐秘的程序一旦确定自己在虚拟机中运行，将会立即关闭。
下面我们将介绍一些技巧，在虚拟环境中运行的程序使用这些技巧确定它们是在虚拟机中运行，还是在本地硬件上运行。
检测虚拟化软件
 。通常，用户会在虚拟机中安装帮助应用程序，以方便虚拟机与它的主机操作系统之间的通信，或者只是为了改善虚拟机的性能。VMware Tools就是一个这样的软件。在虚拟机中运行的程序能够轻易检测到这种类型的软件。例如，如果在一个微软Windows 虚拟机中安装 VMware Tools ，它会创建任何程序都可以读取的 Windows 注册表项。在虚拟机中运行恶意程序很少需要 VMware Tools，因此，你不应将它安装到虚拟机中，以避免在虚拟机中的程序轻易检测到虚拟机的存在。
检测虚拟化硬件
 。虚拟机利用虚拟硬件抽象层为虚拟机与主计算机的本地硬件提供接口。在虚拟机中运行的软件通常很容易检测到虚拟硬件的特性。例如，VMware 被分配了它自己的唯一标识符（OUI ）1
 ，供它的虚拟化网络适配器使用。观察到一个特定于VMware的OUI 是程序在虚拟机中运行的可靠证据。注意，使用主计算机上的配置选项，通常可以修改分配给虚拟网络适配器的 MAC地址。
1. 网络适配器厂家分配的MAC地址的前3 个字节由一个OUI 组成。
检测虚拟机的行为
 。一些虚拟化平台包含后门式的通信通道，以方便虚拟机与主机软件之间的通信。例如，下面的 4 行代码可用于确定你是否在一个 VMware 虚拟机中运行2
 ：
2. 参见http://www.codeproject.com/KB/system/VmDetect.aspx
 （作者：Elias Bachaalany ）。
   mov  eax, 0x564D5868    ; 'VMXh'
   mov  ecx, 10
   xor ebx, ebx
   mov  dx,  0x5658        ; 'VX'
➊ in   eax, dx
如果你在虚拟机中，这段代码将导致 EBX 寄存器包含 0x564D5868
 这个值。如果你不在虚拟机中，根据你使用的主机操作系统，这段代码将造成一个异常，或者不会改变EBX寄存器。这个指令序列利用了一个事实，即用户空间程序通常不使用或不允许使用x86 in
 指令（➊）。但是，在VMware 中，这个指令序列可用于检测一个特殊的通信通道，VMware客户操作系统使用这个通道与它们的主机操作系统进行通信。例如，VMware Tools使用这个通道在主机与客户操作系统之间交换数据（如剪贴板内容）。
检测特定于处理器的行为变化
 。完美的虚拟化很难实现。理想情况下，程序应该不能检测到虚拟化环境与本地硬件之间的任何差异。但是，这种情况很少发生。观察在本地硬件与虚拟机环境中执行的 x86 sidt
 指令的行为差异后，Joanna Rutkowska 开发出她的“红丸”3
 （redpill ）VMware 检测技巧。
3. 参见http://www.invisiblethings.org/papers/redpill.html
 。
虽然并不是相关主题的第一篇论文，但Tom Liston 与Ed Skoudis4
 的论文“On the Cutting Edge: Thwarting Virtual Machine Detection”为我们简要介绍了各种虚拟机检测技巧。
4. 参见http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf
 。
21.2.2 检测“检测工具”
创建沙盒环境后，在执行你想要观察的任何程序之前，你都要安装检测工具，以正确收集和记录与你所分析的程序的行为有关的信息。有大量工具可用于执行这类监控任务。Process Monitor5
 （来自微软Sysinternals6
 套件）和Wireshark7
 是两个被人们广泛使用的工具。Process Monitor是一种实用工具，它能够监控与任何正在运行的 Windows 进程有关的某些行为，包括访问Windows 注册表和文件系统活动。Wireshark是一个网络数据包捕获和分析工具，常用于分析恶意软件生成的网络流量。
5. 参见http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx
 。
6. 参见http://technet.microsoft.com/en-us/sysinternals/default.aspx
 。
7. 参见http://www.wireshark.org/
 。
生性多疑的恶意软件作者可能会指挥他们的软件搜索这类监控程序的运行实例。他们采用的技巧包括：扫描活动进程列表，查找已知与这类监控软件有关的进程名称，以及扫描所有活动Windows 应用程序的标题栏文本，从中搜索已知的字符串。你还可以进行更加深入的搜索，如使用一些软件搜索某个检测软件所使用的Windows GUI 组件的特定特征。例如，WinLincense模糊/ 保护程序使用下面的函数调用确定Filemon（Process Monitor 的前身）实用工具当前是否正在运行：
if (FindWindow("FilemonClass", NULL)) {  
   //exit because Filemon is running  
}
这里，FindWindow
 函数用于根据窗口的注册类名称"FilemonClass
 "（而非窗口标题）搜索一个顶级应用程序窗口。如果发现一个被请求类的窗口，则认为Filemon 正在运行，程序将立即终止。
21.2.3 检测调试器
除了简单地观察程序外，分析人员还可以使用调试器完全控制需要分析的程序的执行过程。对模糊程序使用调试器的一个惯常做法是运行模糊程序足够长的时间，以完成任何解压或加密任务，然后利用调试器的内存访问功能从内存中提取出“去模糊”后的进程映像。多数情况下，使用标准的静态分析工具和技巧就能够分析提取出的进程映像。
模糊实用工具的作者清楚地知道这类调试器辅助的去模糊技巧，因此，他们已经采取许多措施，防止他人使用调试器执行他们的模糊程序。检测到调试器确实存在的程序往往会选择立即终止，而不是继续执行操作，以免分析人员更加轻松地确定程序的行为。
检测调试器是否存在的技巧包括通过常用的 API 函数（如Windows IsDebuggerPresent
 函数）直接查询操作系统，或使用较为低级的方法，即检查因为使用调试器而生成的内存或处理器项目（artifact ）。例如，就后一种技巧而言，我们可以检测处理器是否设置了跟踪（单步）标志。有时，我们还可以检测到特定的调试器。例如，Windows 内核调试器 SoftIce 可以通过\\.\NTICE
 设备（用于与调试器通信）检测出来。
只要你知道自己到底想要搜索什么，那么检测调试器就并非难事，而且在静态分析过程中你也可以轻易发现这类检测尝试（除非同时使用了反静态分析技巧）。有关调试器检测的更多信息，请查阅Nicolas Falliere 的文章“Windows Anti-Debug Reference”8
 ，这篇文章全面讲述了各种Windows 反调试技巧。另外，OpenRCE维护着一个反逆向工程技巧数据库9
 ，其中包含大量特定于调试器的技巧。