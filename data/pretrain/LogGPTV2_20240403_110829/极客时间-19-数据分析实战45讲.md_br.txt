# -*- coding: utf-8 -*-
# 使用 RandomForest 对 IRIS 数据集进行分类
# 利用 GridSearchCV 寻找最优参数, 使用 Pipeline 进行流水作业from sklearn.ensemble import RandomForestClassifierfrom sklearn.model_selection import GridSearchCVfrom sklearn.datasets import load_irisfrom sklearn.preprocessing import StandardScalerfrom sklearn.pipeline import Pipelinerf = RandomForestClassifier()parameters = {"randomforestclassifier__n_estimators": range(1,11)}iris = load_iris()pipeline = Pipeline([        ('scaler', StandardScaler()),        ('randomforestclassifier', rf)])
# 使用 GridSearchCV 进行参数调优clf = GridSearchCV(estimator=pipeline, param_grid=parameters)
# 对 iris 数据集进行分类clf.fit(iris.data, iris.target)print(" 最优分数： %.4lf" %clf.best_score_)print(" 最优参数：", clf.best_params_)运行结果：最优分数： 0.9667最优参数： {'randomforestclassifier__n_estimators': 9}你能看到是否采用数据规范化对结果还是有一些影响的，有了 GridSearchCV 和Pipeline 这两个工具之后，我们在使用分类器的时候就会方便很多。
## 对信用卡违约率进行分析我们现在来做一个信用卡违约率的项目，这个数据集你可以从 GitHub上下载：。这个数据集是台湾某银行 2005 年 4 月到 9 月的信用卡数据，数据集一共包括25 个字段，具体含义如下：![](Images/ada4cadb76bfdd3f231cc1ea0b686cb8.png){savepage-src="https://static001.geekbang.org/resource/image/17/88/1730fb3a809c99950739e7f50e1a6988.jpg"}\现在我们的目标是要针对这个数据集构建一个分析信用卡违约率的分类器。具体选择哪个分类器，以及分类器的参数如何优化，我们可以用GridSearchCV 这个工具跑一遍。先梳理下整个项目的流程：![](Images/f57353fa3a065badaa31ae32e219ed0b.png){savepage-src="https://static001.geekbang.org/resource/image/92/a5/929c96584cbc25972f63ef39101c96a5.jpg"}1.  加载数据；2.  准备阶段：探索数据，采用数据可视化方式可以让我们对数据有更直观的了解，比如我们想要了解信用卡违约率和不违约率的人数。因为数据集没有专门的测试集，我们还需要使用    train_test_split 划分数据集。3.  分类阶段：之所以把数据规范化放到这个阶段，是因为我们可以使用    Pipeline    管道机制，将数据规范化设置为第一步，分类为第二步。因为我们不知道采用哪个分类器效果好，所以我们需要多用几个分类器，比如    SVM、决策树、随机森林和 KNN。然后通过 GridSearchCV    工具，找到每个分类器的最优参数和最优分数，最终找到最适合这个项目的分类器和该分类器的参数。基于上面的流程，具体代码如下：    
# -*- coding: utf-8 -*-
# 信用卡违约率分析import pandas as pdfrom sklearn.model_selection import learning_curve, train_test_split,GridSearchCVfrom sklearn.preprocessing import StandardScalerfrom sklearn.pipeline import Pipelinefrom sklearn.metrics import accuracy_scorefrom sklearn.svm import SVCfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.neighbors import KNeighborsClassifierfrom matplotlib import pyplot as pltimport seaborn as sns
# 数据加载data = data = pd.read_csv('./UCI_Credit_Card.csv')
# 数据探索print(data.shape) 
# 查看数据集大小print(data.describe()) 
# 数据集概览