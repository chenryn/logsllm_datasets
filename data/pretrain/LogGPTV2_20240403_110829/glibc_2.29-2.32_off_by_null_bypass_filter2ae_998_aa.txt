# glibc 2.29-2.32 off by null bypass
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 简介
在glibc2.29以上版本，glibc在unlink内加入了prevsize check，而通过off by
null漏洞根本无法直接修改正常chunk的size，导致想要unlink变得几乎不可能。
    /* consolidate backward */
    if (!prev_inuse(p)) {
      prevsize = prev_size (p);
      size += prevsize;
      p = chunk_at_offset(p, -((long) prevsize));
      if (__glibc_unlikely (chunksize(p) != prevsize))
        malloc_printerr ("corrupted size vs. prev_size while consolidating");
      unlink_chunk (av, p);
    }
通过这样的检测，使得我们无法使用[house_of_einherjar](https://github.com/shellphish/how2heap/blob/master/glibc_2.31/house_of_einherjar.c?fileGuid=HdcWcwpGpCrQpjXX)的方法进行构造堆重叠，所以在2.29以上版本，off
by null 的利用只有唯一的方法 —— 伪造 FD 和 BK。  
但是伪造 FD 和 BK也不是容易的事情，我们需要绕过以下检测
    if (__builtin_expect (FD->bk != P || BK->fd != P, 0))      
      malloc_printerr (check_action, "corrupted double-linked list", P, AV);
这个检测对于双向链表来说是显然成立的，但是对于我们想要伪造FD和BK来说却成为了一个大麻烦，本文将会根据不同的题目限制条件来讲解绕过方法。  
而且为了文章的全面性，我会加入一些老生常谈的绕过方法，如果读者觉得某一部分自己已经掌握则可以选择性的跳过。
## unlink
###  unlink的目的
当目前要 free 的位置旁边有空闲的块，则考虑 unlink 把将要 free 的块，和相邻空闲的块合并。
###  unlink 的类型
  1. 向前合并，也就是上面那块是空闲的，我们要 free 后面那一块
  2. 向后合并，也就是下面那一块是空闲的，我们要 free 前面那一块。
###  如何产生unlink
若本堆块 size 域中的 p 标志位为 0（前一堆块处于释放状态），则利用本块的 pre_size 找到前一堆块的开头，将其中 bin
链表中摘除（unlink），并合并这两个块，得到新的释放块。
也就是说，我们要 **让堆块 size 域中的 p 标志位为 0，并设置合适的pre_size** 。
###  注意
当申请size为0xF8，也就是说结构体中size = 0x101的时候，我们如果使用off by
null来覆盖，正好可以把该size的p标志位变成0，其他size的情况，可以考虑用off by one来设置。
而pre_size在我们的可控堆块中，可以直接修改。
在以下部分中，会着重于对于堆块FD和BK检测的构造，而 **不强调p标志位和prev_size**
的修改。（这两者的修改，在不同情况下也会遇到不同的阻碍，但由于篇幅问题，不是本文的重点）
## NO PIE
在NO PIE的情况下绕过对FD和BK的检测是非常容易的，所以这也同样是一种入门的堆题利用方法，是初学者一定要掌握的。
NO PIE意味着我们可以直接劫持程序中用于 **储存堆块指针的数组** ，因为在这个数组中储存着指向堆块内容部分的指针
### **unlink前的内存排布**
### **构造我们的堆块**
### **unlink后的chunk指针数组**
## 可泄露堆地址
在可泄露堆地址的题目中，我们也可以使用类似于NO PIE情况时候的方法，在堆块上伪造一个要unlink堆块的指针来绕过判定。
我们可以在堆上随便找个地址，比如0x20位置(fake_ptr)等等，并且把他的内容设置为chunk，这样fd和bk的内容就可以类似于 **NO PIE**
的情况时，让fd = fake_ptr – 0x18，bk = fake_ptr – 0x10，即可绕过检测实现unlink。
###  泄露堆基址的方法
**利用tcache**
构造两个相同size的堆块a和b，我们先free(a)让他进入到tcache中，再free(b)也让他进入到tcache中。这时候，在堆块b的next位置就存在着堆块a的地址，我们leak出来就能够得到堆地址。
**在glibc2.32版本中** 新加入了一个key会对tcache
next的内容进行异或，我们可以申请一个堆块a，并且free(a)，直接leak就可以得到堆地址 >> 12，我们计算一下就可以得到了。
关于这部分改动，想要了解的可以看：[http://blog.wjhwjhn.com/archives/186/](http://blog.wjhwjhn.com/archives/186/?fileGuid=HdcWcwpGpCrQpjXX)
**利用fastbin**
类似于tcache的思路，这里不再重复。
**利用unsorted bin**
当unsorted bin链上有两个堆块的时候，其中一个堆块的fd会指向另一个堆块，我们可以直接leak得到，并计算出堆基址。
**利用largebin**
如果堆块在largebin中，他的 **fd_nextsize** 和 **bk_nextsize** 都会指向堆块地址，可以泄露出。
## 不可泄露堆地址
不可泄露堆地址的各种方法归根结底都是通过 **部分写入** 和 **各种堆管理器的性质** 来达到目的。
这里会分成三种方法来讲，可以根据使用场景来选择，最好都要了解和掌握。
###  1.RPISEC战队的思路
这个方法我是从[Ex的博客](http://blog.eonew.cn/archives/1233?fileGuid=HdcWcwpGpCrQpjXX)上看到的，虽然复杂且不实用，但是构造巧妙，这里不得不提及一下。
**基本思路**
1.让一个堆块进入到largebin中，这时候他的fd_nextsize和bk_nextsize都是堆地址。我们从这个largebin chunk +
0x10的地方开始伪造堆块叫做fake chunk。
2.利用部分写入来覆盖fake
chunk的fd指针（largebin->fd_nextsize），使其指向一个有堆地址的堆块，并且再用部分写入把那个堆块的堆地址指向fake chunk。
3.利用fastbin或tcache在fd位置（largebin chunk + 0x10）踩出一个堆地址，并且部分写入指向fake
chunk。这时候由于fake chunk的bk指针（largebin->bk_nextsize）是指向这个地方的，所以绕过了检测。
首先我们来看一下large bin chunk是怎么样的
我们要伪造成
**1.修复 fake fd**
我们利用部分写入来修改fake fd修改到另一个可控堆块上，这个堆块上需要有一个堆地址（这个堆地址可以通过 unsorted bin、small
bin等等来实现）
然后我们部分写入，覆盖这个堆地址的低字节，使其指向我们伪造的fake chunk，也就是largebin chunk + 0x10的位置。
**2.修复 fake bk**
由于fake fd我们要部分写入来覆盖，所以fake bk的内容我们是无法修改的，这时候他指向的位置就是largebin chunk +
0x10，所以我们需要想办法在largebin chunk + 0x10的地方写入一个largebin chunk + 0x10的地址。
**方案1：使用tcache**
我们可以利用off by null将size改小一些，使得这个size在tcache的范围内。
然后先释放a，再释放largebin chunk，这时候再largebin chunk +
0x10的位置就会有一个a的指针。我们再用部分写入将指针改写成largebin chunk + 0x10的地址。