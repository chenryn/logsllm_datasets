在我们的例子中，我们已经在 mg0 上设置了一个 Docker Swarm 管理器。此外，我们希望通过为其远程端点启用 TLS 连接来保护 Docker 引擎。
Docker Machine 如何为我们做这项工作？首先，Docker Machine 通过 SSH 连接到主机；检测 mg0 的操作系统，在我们这里是 Ubuntu 在我们的例子中，供应方是系统。
之后，安装 Docker 引擎；但是，如果一个已经在适当的位置，像这里，它将跳过这一步。
然后，作为最重要的部分，它生成一个根证书颁发机构证书以及所有证书，并将它们存储在主机上。它还会自动配置 Docker 来使用这些证书。最后，它重新启动 Docker。
如果一切顺利，Docker 引擎将在启用 TLS 的情况下再次启动。
然后，我们使用 Docker Machine 为 mg0、mg1 和 mg2 上的引擎生成根 CA，并配置 TLS 连接。然后，我们后来使用 Docker 客户端来进一步控制 Swarm，而不需要 SSH，后者速度较慢。
```
$ docker-machine create \
 --driver generic \
 --generic-ip-address=$(belt ip mg0) mg0
Running pre-create checks...
Creating machine...
(mg0) No SSH key specified. Assuming an existing key at the default 
    location.
Waiting for machine to be running, this may take a few minutes...
Detecting operating system of created instance...
Waiting for SSH to be available...
Detecting the provisioner...
Provisioning with ubuntu(systemd)...
Installing Docker...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Then we can test our working swarm with `docker info`. We grep only 
    15 lines for the brevity.
$ docker $(docker-machine config mg0) info | grep -A 15 Swarm
Swarm: active
 NodeID: 24j7sytbomhshtayt74lf7njo
 Is Manager: true
 ClusterID: 8rshkwfq4hsil2tdb3idpqdeg
 Managers: 3
 Nodes: 3
 Orchestration:
 Task History Retention Limit: 5
 Raft:
 Snapshot Interval: 10000
 Heartbeat Tick: 1
 Election Tick: 3
 Dispatcher:
 Heartbeat Period: 5 seconds
 CA Configuration:
 Expiry Duration: 3 months
```
此外，`docker node ls`在这种设置下将正常工作我们现在验证了 3 个经理组成了最初的群体，并且能够接受一群工人:
```
$ docker $(docker-machine config mg0) node ls
ID                       HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
24j7sytbomhshtayt74lf7njo *  mg0       Ready   Active        Leader
2a4jcvp32aoa6olaxlelthkws    mg1       Ready   Active        Reachable
94po1ln0j0g5fgjnjfvm1w02r    mg2       Ready   Active        Reachable
```
### 类型
**这个集群有多安全？**
我们将使用 Docker 客户端连接到配备 Docker 引擎的 TLS 此外，群的节点之间还有另一个 TLS 连接，CA 将在三个月后到期，它将自动轮换。高级安全设置将在[第 9 章](09.html "Chapter 9. Securing a Swarm Cluster and the Docker Software Supply Chain")、*中讨论，以保护集群和 Docker 软件供应链*。
# 了解一些群体内部
在这一点上，我们通过创建具有 3 个副本的服务 nginx 来检查 Swarm 是否有效:
```
$ eval $(docker-machine env mg0)
$ docker service create --name nginx --replicas 3 nginx
du2luca34cmy
```
之后，我们找到了运行 Nginx 的网络命名空间标识在哪里。我们通过 SSH 连接到 mg0，通过 SSH 连接到 mg0。Swarm 的路由网格的网络名称空间与特殊网络名称空间`1-5t4znibozx`具有相同的时间戳。在这个例子中，我们要寻找的命名空间是`fe3714ca42d0`。
```
root@mg0:~# ls /var/run/docker/netns -al
total 0
drwxr-xr-x 2 root root 120 Aug 22 15:38 .
drwx------ 5 root root 100 Aug 22 13:39 ..
-r--r--r-- 1 root root   0 Aug 22 15:17 1-5t4znibozx
-r--r--r-- 1 root root   0 Aug 22 15:36 d9ef48834a31
-r--r--r-- 1 root root   0 Aug 22 15:17 fe3714ca42d0
```
我们可以用 ipvsadm 计算出我们的 IPVS 条目，并使用 nsenter 工具([https://github.com/jpetazzo/nsenter](https://github.com/jpetazzo/nsenter))在网络命名空间内运行它，如下所示:
```
root@node1:~# nsenter --net=/var/run/docker/netns/fe3714ca42d0 ipvsadm -L
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
 -> RemoteAddress:Port           Forward Weight ActiveConn InActConn
FWM  259 rr
 -> 10.255.0.8:0                 Masq    1      0          2
```
在这里，我们可以注意到有一个活跃的循环 IPVS 条目。IPVS 是内核级负载平衡器，它被 Swarm 用来与 iptables 一起平衡流量，iptables 用于转发和过滤数据包。
清理 nginx 测试服务(`docker service rm nginx`)后，我们将管理人员设置为 Drain 模式，以避免他们承担任务:
```
$ docker node update --availability drain mg0
$ docker node update --availability drain mg1
$ docker node update --availability drain mg2
```
现在，我们准备在推特和 Github 上宣布我们的经理的可用性，并开始实验！
## 加入工人
我们的贡献者开始将他们的节点作为工人加入到管理 mg0 中。任何人都使用自己喜欢的方法，包括以下几种:
*   循环`docker-machine ssh sudo docker swarm join`命令
*   Ansible
*   自定义脚本和程序
我们将在[第 5 章](05.html "Chapter 5. Administer a Swarm Cluster")、*管理蜂群*中介绍其中的一些方法。
过了一段时间，我们达到了 2300 名工人的配额，推出了复制因子为 10 万的**高山**服务:
![Joining workers](img/image_04_006.jpg)
## 升级经理
一段时间后，我们达到了经理的最大能力，我们不得不增加他们的物理资源。经理的实时升级和维护可能是生产中的预期操作。我们是这样做的。
### 经理的实时升级
法定人数为奇数时，可以安全地将经理降级进行维护。
```
$ docker node ls
ID                  HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
4viybni..h24zxde    mg1       Ready   Active        Reachable
6xxwumb..j6zvtyg *  mg0       Ready   Active        Leader
f1vs2e3..abdehnh    mg2       Ready   Active
```
在这里，我们将 mg1 作为可访问的管理器，并使用以下语法将其降级为 worker:
```
$ docker node demote mg1
Manager mg1 demoted in the swarm.
```
我们可以看到`mg1`的`Reachable`状态在成为工作者时从节点 ls 输出中消失。
```
$ docker node ls
ID                  HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
4viybni..h24zxde    mg1       Ready   Active 
6xxwumb..j6zvtyg *  mg0       Ready   Active        Leader
f1vs2e3..abdehnh    mg2       Ready   Active 
```
当节点不再是管理器时，关闭它是安全的，例如，使用 DigitalOcean CLI，正如我们所做的:
```
$ doctl compute droplet-action shutdown 23362382
```
列出节点后，我们注意到 mg1 已经关闭。
```
$ docker node ls
ID                   HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
4viybni0ud2gjpay6ih24zxde    mg1       Down    Active
6xxwumbdac34bbgh6hj6zvtyg *  mg0       Ready   Active        Leader
f1vs2e3hjiqjaukmjqabdehnh    mg2       Ready   Active
```
我们升级了它的资源，使其具有 16G 内存，然后我们再次启动机器:
```
$ doctl -c .doctlcfg compute droplet-action power-on 23362382
```
当这次列出时，我们可以预期一些延迟，因为 mg1 正在返回并重新进入集群。
```
$ docker node ls
ID                  HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS
4viybni..h24zxde    mg1       Ready   Active 
6xxwumb..j6zvtyg *  mg0       Ready   Active        Leader
f1vs2e3..abdehnh    mg2       Ready   Active
```
最后，我们可以将其提升回经理，如下所示:
```
$ docker node promote mg1
Node mg1 promoted to a manager in the swarm.
```
完成后，集群将正常运行。所以，我们对 mg0 和 mg2 重复操作。
# 监测群 2k
对于生产级集群，我们通常希望设置某种监控。到目前为止，还没有一种特定的方法可以在 Swarm 模式下监控 Docker 服务和任务。我们用 Telegraf、InfluxDB 和 Grafana 为 Swarm2k 做了这个。
## 流入数据库时间序列数据库
InfluxDB 是一个时间序列数据库，因为没有依赖性，所以很容易安装。InfluxDB 有助于存储指标、事件信息，并用于以后的分析。对于群集 2k，我们使用 InfluxDB 存储集群、节点、事件的信息，并使用 Telegraf 存储任务的信息。
Telegraf 是可插拔的，并且有一定数量的输入插件，对观察系统环境很有用。
### telegraph Swarm 插件
我们为 Telegraf 开发了一个新的插件，将统计数据存储到 InfluxDB 中。这个插件可以在[http://github.com/chanwit/telegraf](http://github.com/chanwit/telegraf)找到。数据可能包含*值*、*标签*和*时间戳*。将根据时间戳计算或汇总值。此外，标签将允许您根据时间戳将这些值组合在一起。
Telegraf Swarm 插件收集数据并创建以下包含值的系列，我们确定这些值是对 InfluxDB 中的 Swarmk2、标签和时间戳最感兴趣的:
*   系列`swarm_node`:该系列包含`cpu_shares`和`memory`作为值，允许您按`node_id`和`node_hostname`标签分组。
*   系列`swarm`:该系列包含节点数的【n_nodes】、服务数的`n_services`和任务数的`n_tasks`。本系列不包含标签。
*   系列`swarm_task_status`:该系列包含一次按状态分组的任务数。该系列的标签是任务状态名称，例如“已启动”、“正在运行”和“失败”。
要启用 Telegraf Swarm 插件，我们需要通过添加以下配置来调整`telegraf.conf`: