### System Information
- **OpenCV Version**: master, `834c992`
- **Operating System/Platform**: Ubuntu 18.04, Power 9
- **Compiler**: clang version 10.0.0 (Commit: 2f51a43f8c2b117e69a45eae6a7c849e035a793b)

### Detailed Description
When compiling the OpenCV project, an error occurs due to an invalid instruction in the `fast_math.hpp` file. The specific error message is as follows:

```
In file included from .../opencv/modules/core/src/arithm.cpp:50:
In file included from .../opencv/modules/core/src/precomp.hpp:49:
In file included from .../opencv/modules/core/include/opencv2/core/utility.hpp:56:
In file included from .../opencv/modules/core/include/opencv2/core.hpp:57:
In file included from .../opencv/modules/core/include/opencv2/core/matx.hpp:54:
In file included from .../opencv/modules/core/include/opencv2/core/saturate.hpp:49:
.../opencv/modules/core/include/opencv2/core/fast_math.hpp:200:5: error: invalid instruction
    CV_INLINE_ROUND_DBL(value);
    ^
.../opencv/modules/core/include/opencv2/core/fast_math.hpp:105:40: note: expanded from macro 'CV_INLINE_ROUND_DBL'
    __asm__( "fctiw %[temp],%[in]\n\tmffprwz %[out],%[temp]\n\t" : [out] "=r" (out), [temp] "=d" (temp) : [in] "d" ((double)(value)) : );
                                           ^
:2:2: note: instantiated into assembly here
    mffprwz 4,0
    ^~~~~~~
```

Upon further investigation, it was found that the most recent Power ISA (dated March 29, 2017, page 131 of the PDF or page 113 of the document) specifies that `mffprwz` is a mnemonic for `mfvsrwz`. Specifically:

- **Extended Mnemonics**        | **Equivalent To**
- `mffprwz RA,FRS`             | `mfvsrwz RA,FRS`
- `mfvrwz RA,VRS`              | `mfvsrwz RA,VRS+32`

However, the clang compiler does not implement `mffprwz`, only `mfvsrwz`. This issue can be resolved by updating the code to use the correct instruction. I have prepared a patch to address this and will also report this to the LLVM project.

### Steps to Reproduce
1. Checkout the OpenCV repository.
2. Create a build directory.
3. Configure the build with CMake:
   ```sh
   cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
   ```
4. Build the project:
   ```sh
   make -j###
   ```
5. Observe the error message as described above.