        where c3=1           -- 计算符合条件的  
        and c1 > (select c1 from tmp)   -- 下一个品牌  
        order by c3,c1 limit 1          -- 采用类似SKIP INDEX SCAN  
    ) t_max  
    where tbl.c3=1        -- 符合条件  
    and tbl.c1=(select c1 from tmp)     -- 商家ID等于上一次计算得到的下一个品牌  
    order by tbl.c3,tbl.c1,tbl.c2 limit 10     -- 每个品牌最多返回10个商品, 排序必须与distinct on子句一样  
  )  
  union all  
  (  
    -- 递归查询  
    select tbl.*, -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from   
    (select t_max_c1 from skip limit 1) s,  -- 得到上次计算的这次递归查询的品牌  
    LATERAL (select c1 from tbl   
             where c3=1                    -- 计算符合条件的  
	     and c1 > s.t_max_c1          -- 下一个品牌  
	     order by c3,c1 limit 1   
	    ) t_max,    
    LATERAL (select distinct on (tbl.c3,tbl.c1,tbl.c2) * from tbl         -- 当前计算品牌的10个商品  
             where tbl.c3=1   
	     and tbl.c1=s.t_max_c1     -- 当前品牌由上次的worker table. t_max_c1得到  
	     and tbl.* is not null   
	     order by tbl.c3,tbl.c1,tbl.c2 limit 10  -- 每个品牌10个商品, 排序必须与distinct on子句一样  
	    ) tbl   
  )  
)  
select * from skip  
union all  
-- 符合条件的最后一个品牌  
select tbl.*, t.* as t_max_c1 from   
  (select c1 from tbl where c3=1 order by c3,c1 desc limit 1) t,  
  LATERAL (select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.* from tbl   
    where  
    c3=1  
    and c1=t.c1  
    order by tbl.c3,tbl.c1,tbl.c2 limit 10) as tbl  
;  
```  
```  
select count(*) from   
(  
with recursive   
-- 符合条件的第一个品牌  
tmp as (select c1 from tbl where c3=1 order by c3,c1 limit 1),  
skip as (  
  (  
    -- 初始查询, 同时计算并输出下一个品牌ID  
    select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.*,   -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from tbl ,   
    (select c1 from tbl   
        where c3=1           -- 计算符合条件的  
        and c1 > (select c1 from tmp)   -- 下一个品牌  
        order by c3,c1 limit 1          -- 采用类似SKIP INDEX SCAN  
    ) t_max  
    where tbl.c3=1        -- 符合条件  
    and tbl.c1=(select c1 from tmp)     -- 商家ID等于上一次计算得到的下一个品牌  
    order by tbl.c3,tbl.c1,tbl.c2 limit 10     -- 每个品牌最多返回10个商品, 排序必须与distinct on子句一样  
  )  
  union all  
  (  
    -- 递归查询  
    select tbl.*, -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from   
    (select t_max_c1 from skip limit 1) s,  -- 得到上次计算的这次递归查询的品牌  
    LATERAL (select c1 from tbl   
             where c3=1                    -- 计算符合条件的  
	     and c1 > s.t_max_c1          -- 下一个品牌  
	     order by c3,c1 limit 1   
	    ) t_max,    
    LATERAL (select distinct on (tbl.c3,tbl.c1,tbl.c2) * from tbl         -- 当前计算品牌的10个商品  
             where tbl.c3=1   
	     and tbl.c1=s.t_max_c1     -- 当前品牌由上次的worker table. t_max_c1得到  
	     and tbl.* is not null   
	     order by tbl.c3,tbl.c1,tbl.c2 limit 10  -- 每个品牌10个商品, 排序必须与distinct on子句一样  
	    ) tbl   
  )  
)  
select * from skip  
union all  
-- 符合条件的最后一个品牌  
select tbl.*, t.* as t_max_c1 from   
  (select c1 from tbl where c3=1 order by c3,c1 desc limit 1) t,  
  LATERAL (select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.* from tbl   
    where  
    c3=1  
    and c1=t.c1  
    order by tbl.c3,tbl.c1,tbl.c2 limit 10) as tbl  
) t;  
 count    
--------  
 100010  
(1 row)  
Time: 726.006 ms  
```  
执行计划  
```  
                                                                                             QUERY PLAN                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=155.74..155.75 rows=1 width=8) (actual time=931.733..931.734 rows=1 loops=1)  
   Output: count(*)  
   Buffers: shared hit=513268  
   ->  Append  (cost=139.05..154.24 rows=120 width=24) (actual time=0.079..919.313 rows=100010 loops=1)  
         Buffers: shared hit=513268  
         CTE tmp  
           ->  Limit  (cost=0.44..0.48 rows=1 width=8) (actual time=0.039..0.040 rows=1 loops=1)  
                 Output: tbl_2.c1, tbl_2.c3  
                 Buffers: shared hit=4  
                 ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_2  (cost=0.44..180668.28 rows=5048333 width=8) (actual time=0.039..0.039 rows=1 loops=1)  
                       Output: tbl_2.c1, tbl_2.c3  
                       Index Cond: (tbl_2.c3 = 1)  
                       Heap Fetches: 1  
                       Buffers: shared hit=4  
         CTE skip  
           ->  Recursive Union  (cost=0.92..138.57 rows=110 width=24) (actual time=0.077..861.314 rows=100000 loops=1)  
                 Buffers: shared hit=513238  
                 ->  Limit  (cost=0.92..12.22 rows=10 width=24) (actual time=0.077..0.140 rows=10 loops=1)  
                       Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4, t_max.c1  
                       Buffers: shared hit=42  
                       InitPlan 2 (returns $2)  
                         ->  CTE Scan on tmp  (cost=0.00..0.02 rows=1 width=4) (actual time=0.042..0.043 rows=1 loops=1)  
                               Output: tmp.c1  
                               Buffers: shared hit=4  
                       ->  Unique  (cost=0.90..570.17 rows=504 width=24) (actual time=0.076..0.137 rows=10 loops=1)  
                             Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4, t_max.c1  
                             Buffers: shared hit=42  
                             ->  Nested Loop  (cost=0.90..568.91 rows=504 width=24) (actual time=0.075..0.130 rows=31 loops=1)  
                                   Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4, t_max.c1  
                                   Buffers: shared hit=42  
                                   ->  Index Scan using idx_tbl_1 on public.tbl tbl_3  (cost=0.44..562.07 rows=504 width=20) (actual time=0.059..0.096 rows=31 loops=1)  
                                         Output: tbl_3.c1, tbl_3.c2, tbl_3.c3, tbl_3.c4  
                                         Index Cond: ((tbl_3.c3 = 1) AND (tbl_3.c1 = $2))  
                                         Buffers: shared hit=38  
                                   ->  Materialize  (cost=0.46..0.55 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=31)  
                                         Output: t_max.c1  
                                         Buffers: shared hit=4  
                                         ->  Subquery Scan on t_max  (cost=0.46..0.54 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=1)  
                                               Output: t_max.c1  
                                               Buffers: shared hit=4  
                                               ->  Limit  (cost=0.46..0.53 rows=1 width=8) (actual time=0.013..0.013 rows=1 loops=1)  
                                                     Output: tbl_4.c1, tbl_4.c3  
                                                     Buffers: shared hit=4  
                                                     InitPlan 3 (returns $3)  
                                                       ->  CTE Scan on tmp tmp_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)  
                                                             Output: tmp_1.c1  
                                                     ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_4  (cost=0.44..122423.77 rows=1682778 width=8) (actual time=0.012..0.012 rows=1 loops=1)  
                                                           Output: tbl_4.c1, tbl_4.c3  
                                                           Index Cond: ((tbl_4.c3 = 1) AND (tbl_4.c1 > $3))  
                                                           Heap Fetches: 1  
                                                           Buffers: shared hit=4  
                 ->  Nested Loop  (cost=0.88..12.42 rows=10 width=24) (actual time=0.030..0.083 rows=10 loops=10000)  
                       Output: tbl_6.c1, tbl_6.c2, tbl_6.c3, tbl_6.c4, tbl_5.c1  
                       Buffers: shared hit=513196  
                       ->  Nested Loop  (cost=0.44..0.56 rows=1 width=8) (actual time=0.019..0.019 rows=1 loops=10000)  
                             Output: skip_1.t_max_c1, tbl_5.c1  
                             Buffers: shared hit=40011  
                             ->  Limit  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=10000)  
                                   Output: skip_1.t_max_c1  
                                   ->  WorkTable Scan on skip skip_1  (cost=0.00..2.00 rows=100 width=4) (actual time=0.000..0.000 rows=1 loops=10000)  
                                         Output: skip_1.t_max_c1  
                             ->  Limit  (cost=0.44..0.51 rows=1 width=8) (actual time=0.018..0.018 rows=1 loops=10000)  
                                   Output: tbl_5.c1, tbl_5.c3  
                                   Buffers: shared hit=40011  
                                   ->  Index Only Scan using idx_tbl_1 on public.tbl tbl_5  (cost=0.44..122423.77 rows=1682778 width=8) (actual time=0.018..0.018 rows=1 loops=10000)  
                                         Output: tbl_5.c1, tbl_5.c3  
                                         Index Cond: ((tbl_5.c3 = 1) AND (tbl_5.c1 > skip_1.t_max_c1))  
                                         Heap Fetches: 9999  
                                         Buffers: shared hit=40011  
                       ->  Limit  (cost=0.44..11.65 rows=10 width=20) (actual time=0.011..0.061 rows=10 loops=9999)  
                             Output: tbl_6.c1, tbl_6.c2, tbl_6.c3, tbl_6.c4  
                             Buffers: shared hit=473185  
                             ->  Unique  (cost=0.44..563.32 rows=502 width=20) (actual time=0.011..0.059 rows=10 loops=9999)  
                                   Output: tbl_6.c1, tbl_6.c2, tbl_6.c3, tbl_6.c4  
                                   Buffers: shared hit=473185  
                                   ->  Index Scan using idx_tbl_1 on public.tbl tbl_6  (cost=0.44..562.07 rows=502 width=20) (actual time=0.010..0.053 rows=44 loops=9999)  
                                         Output: tbl_6.c1, tbl_6.c2, tbl_6.c3, tbl_6.c4  
                                         Index Cond: ((tbl_6.c3 = 1) AND (tbl_6.c1 = skip_1.t_max_c1))  
                                         Filter: (tbl_6.* IS NOT NULL)  
                                         Buffers: shared hit=473185  
         ->  CTE Scan on skip  (cost=0.00..2.20 rows=110 width=24) (actual time=0.079..901.862 rows=100000 loops=1)  
               Output: skip.c1, skip.c2, skip.c3, skip.c4, skip.t_max_c1  
               Buffers: shared hit=513238  
         ->  Nested Loop  (cost=0.88..12.29 rows=10 width=24) (actual time=0.057..0.086 rows=10 loops=1)  
               Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4, tbl.c1  
               Buffers: shared hit=30  
               ->  Limit  (cost=0.44..0.48 rows=1 width=8) (actual time=0.039..0.039 rows=1 loops=1)  
                     Output: tbl.c1, tbl.c3  
                     Buffers: shared hit=4  
                     ->  Index Only Scan Backward using idx_tbl_1 on public.tbl  (cost=0.44..180668.28 rows=5048333 width=8) (actual time=0.038..0.038 rows=1 loops=1)  
                           Output: tbl.c1, tbl.c3  
                           Index Cond: (tbl.c3 = 1)  
                           Heap Fetches: 1  
                           Buffers: shared hit=4  
               ->  Limit  (cost=0.44..11.61 rows=10 width=20) (actual time=0.015..0.041 rows=10 loops=1)  
                     Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4  
                     Buffers: shared hit=26  
                     ->  Unique  (cost=0.44..563.33 rows=504 width=20) (actual time=0.014..0.039 rows=10 loops=1)  
                           Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4  
                           Buffers: shared hit=26  
                           ->  Index Scan using idx_tbl_1 on public.tbl tbl_1  (cost=0.44..562.07 rows=504 width=20) (actual time=0.013..0.033 rows=23 loops=1)  
                                 Output: tbl_1.c1, tbl_1.c2, tbl_1.c3, tbl_1.c4  
                                 Index Cond: ((tbl_1.c3 = 1) AND (tbl_1.c1 = tbl.c1))  
                                 Buffers: shared hit=26  
 Planning Time: 0.648 ms  
 Execution Time: 933.819 ms  
(106 rows)  
```  
### UDF  
```  
create or replace function get_res() returns setof tbl as $$  
declare  
  v_c1 int;  
begin  
  -- 初始递归条件  
  select c1 into v_c1 from tbl where c3=1 order by c1 limit 1;  
  -- 初始语句  
  return query select distinct on (c1,c2) * from tbl where c3=1 and c1=v_c1 order by c1,c2 limit 10;  
  loop  
    -- 递归条件  
    select c1 into v_c1 from tbl where c3=1 and c1>v_c1 order by c1 limit 1;  
    if not found then  
      return;  
    end if;  
    -- 返回加入递归条件后的结果  
    return query select distinct on (c1,c2) * from tbl where c3=1 and c1=v_c1 order by c1,c2 limit 10;  
  end loop;  
end;  
$$ language plpgsql strict;  
```  
```  
postgres=# select count(*) from get_res();  