APK ﬁle content is organized into directories (namely lib,
res, assets) and ﬁles (namely AndroidManifest.xml and
classes.dex). The purpose of each item is as follows:
i)
AndroidManifest.xml contains the app meta-data, e.g.,
name, version, required permissions, and used libraries.
ii)
The classes.dex contains the compiled classes of the Java
iii) The lib directory stores C/C++ native libraries
code.
[6].
iv) Finally, the resources directory contains the non-
source code ﬁles that are packaged into the APK ﬁle during
compilation. It mostly contains media ﬁles such as video,
image, and audio ﬁles.
4.2 N-grams
The N-gram technique is used to compute contiguous se-
quences of N items from a large sequence. For our pur-
pose, we use N-gram to extract the sequences employed by
Android malware to be able to distinguish between diﬀer-
ent malware samples. The N-gram on various Android app
package contents, such as classes.dex, reﬂect the APK pat-
terns and implicitly capture the underlying Android package
semantics. We compute multiple feature vectors for each
APK content. Each vector V ∈ D (|D| =Φ N where Φ rep-
resents all the possibilities of a given APK content). Each
element in the vector V contains the number of occurrences
of a particular APK content N-gram.
4.2.1 The classes.dex Bytes N-grams
To increase the extracted information, we leverage two
types of N-gram, namely opcodes N-grams and bytes N-
grams, which are extracted from the binary classes.dex ﬁle
and its assembly respectively. From the hexdump of the
classes.dex ﬁle, we compute Byted N-grams by sliding a win-
dow of the hex string, where one case in that string is a byte,
as depicted in Figure 2.
4.2.2 Assembly opcodes N-grams
The opcodes N-gram are the unique sequences in the dis-
assembly of classes.dex ﬁle, where the instructions are stripp-
ed from their operands. An example of this N-gram is shown
in Figure 2. We choose opcodes instead of the full instruction
for multiple reasons: i) Using opcodes tends to be more re-
silient to simple obfuscations that modifying some operands
such as hard-coded IPs or URLs. ii) Opcodes could be more
robust to modiﬁcations, caused by repackaging, that modify
or rename some operands. iii) In addition to being resilient
to changes, opcodes can be eﬃciently extracted from An-
droid apps.
The gained information from the opcode N-gram could be
increased by considering only functions that use a sensitive
API such as SMS API. Also, excluding the most common
opcode sequence decreases the noise for the N-gram informa-
tion. Also, the number of grams has a signiﬁcant inﬂuence
on the gathered semantics. The result of N-gram extraction
is the list of unique N-grams with the occurrence number for
each content category, i.e., opcode instructions, classes.dex.
Figure 2 illustrates diﬀerent N-grams on both instructions
and bytes of the ﬁrst portion of the AnserverBot malware.
In addition to the opcodes, we also consider the class names
and the methods’ names as assembly features.
(cid:1) (cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1) (cid:14)(cid:16)(cid:6)(cid:17)(cid:4)(cid:18)(cid:1) (cid:17)(cid:4)(cid:19)(cid:6)(cid:14)(cid:17)(cid:2)(cid:5)(cid:20)(cid:17)(cid:13)(cid:4)(cid:1) (cid:14)(cid:17)(cid:21)(cid:7)(cid:22)(cid:4)(cid:6)(cid:23)(cid:14)(cid:24)(cid:4)(cid:13)(cid:5)(cid:1) (cid:2)(cid:25)(cid:26)(cid:5)(cid:6)
(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1) (cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1) (cid:27)(cid:7)(cid:21)(cid:4)(cid:6)(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1) (cid:27)(cid:7)(cid:21)(cid:4)(cid:6)(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1) (cid:27)(cid:7)(cid:21)(cid:4)(cid:6)
(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1)(cid:27)(cid:7)(cid:21)(cid:4)(cid:6)(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1)(cid:27)(cid:7)(cid:21)(cid:4)(cid:6)(cid:7)(cid:8)(cid:9)(cid:4)(cid:13)(cid:5)(cid:1)(cid:14)(cid:17)(cid:21)(cid:7)(cid:22)(cid:4)(cid:6)(cid:21)(cid:14)(cid:24)(cid:5)(cid:26)(cid:20)(cid:28)(cid:29)(cid:24)(cid:20)(cid:17)(cid:3)(cid:4)(cid:1)
(cid:44)(cid:14)(cid:3)(cid:24)(cid:20)(cid:27)(cid:2)
(cid:39)(cid:6)(cid:3)(cid:24)(cid:20)(cid:27)(cid:2)
(cid:33)(cid:6)(cid:3)(cid:24)(cid:20)(cid:27)(cid:2)
(cid:30)(cid:31)(cid:1)(cid:30)(cid:33)(cid:1)(cid:35)(cid:37)(cid:1)(cid:38)(cid:20)(cid:1)(cid:39)(cid:38)(cid:1)(cid:39)(cid:39)(cid:1)(cid:39)(cid:33)(cid:1)(cid:38)(cid:38)(cid:1)(cid:13)(cid:41)(cid:1)(cid:23)(cid:33)(cid:1)(cid:13)(cid:20)(cid:1)(cid:39)(cid:16)(cid:1)(cid:43)(cid:41)(cid:1)(cid:20)(cid:43)(cid:1)(cid:39)(cid:43)(cid:1)(cid:4)(cid:4)(cid:1)(cid:38)(cid:41)(cid:1)(cid:8)(cid:39)(cid:1)(cid:1)
Figure 2: Opcodes & Bytes From AnserverBot
4.2.3 Native Library N-grams
The Native Library is part of the binary sub-ﬁngerprint,
which captures C/C++ shared libraries [6] used by mal-
ware. Using the native library for malware ﬁngerprinting is
essential in some cases to distinguish between two Android
malware samples. For instance, if the malware uses a na-
tive library, it is more likely to be DroidKungFu2 than
DroidKungFu1 because DroidKungFu2 malware family
uses C/C++ library and DroidKungFu1 uses only Java
byte code.
4.2.4 APK N-grams
The N-gram of the APK ﬁle can give an overview on the
APK ﬁle semantics. For instance, most of the repackaged
apps are built from an original app with minor modiﬁcations
[30]. Consequently, applying N-gram analysis on the APK
ﬁle can detect high similarity between the repackaged app
and the original one. Besides, some components in the APK
ﬁle, e.g., images and GUI layout structures, are preserved by
the adversaries, especially if the purpose of the repackaging
352
process is to develop a phishing malware. Both apps, in this
case, are visually similar, and hence the N-gram sequences
computed from both apps will be similar in the zone related
to the resource directory.
4.3 Manifest File Features
In our context, AndroidManifest.xml
is a source of es-
sential information that could help in identifying malicious
apps. The permissions required by apps are the most im-
portant features. For example, apps that require SMS send
permission are more suspicious than other apps since a big
portion of Android malware apps targets sending SMS to
premium phone numbers. In addition, we extract other fea-
tures from AndroidManifest.xml, namely, activities, services,
and receivers.
4.4 Android API Calls
The required permissions provide a global view of a pos-
sible app behavior. However, we could get a more granular
view by tracking the Android API calls, knowing that one
permission could allow access to multiple API calls. There-
fore, we consider the API list used by the apps as the feature
list. Furthermore, we use a ﬁlter list of API of the suspicious
APIs, such as sendTextMessage() and orphan APIs, which
is part of an undeclared permission. On the other hand, we
extract the list of permissions, where none of their APIs has
been used in the app.
4.5 Resources
In this category, we extract features related to the APK
resources such as text string, ﬁle names, and their content.
An important criterion when ﬁltering the ﬁles is to not in-
clude the names of standard ﬁles, e.g., String.xml. Also, we
include ﬁles’ contents by computing md4 hashes on each
resource ﬁle. At ﬁrst glance, it seems that the use of MD4
is not convenient compared to more modern cryptographic
hashing algorithms such as MD5 and SHA1. However, we
choose MD4 purposely because it is cheap in terms of com-
putation. Therefore, we enhance the scalability of the sys-
tem, yet, we achieve the goal of the ﬁle comparison between
the malicious apps of the active dataset. Finally, we make
a text string selection in the text resources, where we lever-
age tf-idf (term frequency-inverse document frequency) [15]
technique for this purpose.
4.6 APK Content Types
Table 1 summarizes the proposed feature categories based
on APK contents. It also depicts the features considered in
the current implementation of Cypider.
4.7 Feature Preprocessing
Feature extraction and similarity computation are the mo-
st atomic operations in the proposed framework. Therefore,
we need to optimize both their design and implementation to
get the intended scalability. The expected output from the
feature processing operation is a vector, which can straight-
forwardly be used to compute the similarity between apps.
Apps feature vectors are the input to the Cypider community
detection system.
N-gram technique, presented in Section 4.2, suﬀers from
its very high dimensionality D. The dimension number
D dramatically inﬂuences the computation and the mem-
ory needed by Cypider for Android malware detection. The
Content Type Features
APK Byte N-grams
Classes.dex Byte N-grams
Native Library Bytes N-grams
Assembly Opcodes Ngrams
Assembly Class Names
Assembly Method Names
Android API
Orphan Android API
Manifest Permissions
Manifest Activities
#
0
1
2
3
4
5
6
7
8
9
10 Manifest Services
11 Manifest Receivers
12
13
14
15
IPs & URLs
APK Files names
APK File light hashes (md4)
Text Strings
Implemented Feature
X
X
X
X
X
X
X
X
X
X
Table 1: Content feature categories
complexity of computing the extracted N-grams features in-
creases exponentially with N . For example, for the opcodes
N-grams, described in Section 4.2, the dimension D equals
to R2 for bi-grams, where R = 200, the number of possible
opcodes in Dalvik VM. Similarly, for 3-grams, the dimension
D = R3; for 4-grams, D = R4. Furthermore, N has to be at
least 3 or 5 to capture the semantics of some Android APK
content.
Algorithm 1: Feature Vector Computation
input : Content Features: Set,
L: Feature Vector Length
output: Feature Vector
vector = new vector[L];
for Item in Content Features do
H = hash(Item) ;
feature index = H mod L ;
vector[feature index] = vector[feature index] + 1 ;
end
To address this issue, we leverage the hashing trick tech-
nique [45] to reduce the high dimensionality of an arbitrary
vector to a ﬁxed-size feature vector. More formally, hashing
trick reduces a vector V with D = RN to a compressed ver-
sion with D = RM , where M << N . The compacted vector
boosts Cypider, both computation-wise and memory-wise,
by allowing the clustering system to handle a large volume
of Android apps. A previous research [51, 45] has shown
that the hash kernel approximately preserves the vector dis-
tance. Moreover, the computational cost incurred by us-
ing the hashing technique for reducing dimensionality grows
logarithmically with the number of samples and groups.
Algorithm 1 illustrates the overall process of computing the
compacted feature vector from a N-grams set. Furthermore,
it helps to control the length of the compressed vector in an
associated feature space.
5. LSH SIMILARITY COMPUTATION
Building the similarity network is the backbone of Cypider
framework. We generated the similarity network by com-
puting the pair-wise similarity between each feature vector
of the apps APKs. As a result, we obtain multiple similari-
ties according to the number of these content vectors. Using
various similarities gives ﬂexibility and modularity to Cypi-
der. In other words, we could add any new feature vector to
353
the similarity network without disturbing the Cypider pro-
cess. Also, we could remove features smoothly, which makes
the experimentation of selecting the best features more con-
venient. More importantly, having multiple similarities be-
tween apps static contents in the similarity network leads
to explainable decisions, where the investigator can track
based on which contents a pair of apps are similar in the
ﬁnal similarity network. Similarity computation needs to
be conducted in an eﬃcient way that is much faster than
the brute-force computation. For this purpose, we lever-
age Locality Sensitive Hashing (LSH) techniques, and more
precisely LSH Forest [21], a tunable high performance algo-
rithm for the similarity computation of Cypider framework.
The key idea behind LSH Forest is that similar items hashed
using LSH are most likely to be in the same bucket (collide)
and dissimilar items in diﬀerent ones. Many similarity mea-
sures correspond to LSH function with this property.
In
our case, we use the well-known Euclidean distance for this
purpose.
Figure 3: LSH Similarity Computational Time
A scalable community detection algorithm is essential to
extract suspicious communities. For this reason, we em-
power Cypider with the Fast unfolding community detection
algorithm [23], which can scale to billions of network links.
The algorithm achieves excellent results by measuring the
modularity of communities. The latter is a scalar value
M ∈ [−1, 1] that measures the density of edges inside a
given community compared to the edges between communi-
ties. The algorithm uses an approximation of the modularity
since ﬁnding the exact value is computationally hard [23].