e.g., a byte sequence resembling a jump address, and
randomizes it. Thus, exploits trigger an exception in
a vulnerable program. Next, it ﬁnds out information
about the attack (e.g., the corrupted pointer and its lo-
cation in the packet), and generates a signature, which
can be either based on determination of the roles played
by individual bytes, or it can be much like Covers [16].
In the former case, Packet Vaccine scrambles individ-
ual bytes in an eﬀort to identify the essential inputs.
In the latter case, the engine ﬁnds the ﬁeld containing
the jump address and estimate the length needed to
cause an overﬂow. These coarse signatures are subse-
quently reﬁned by trying variations of the vaccine, that
is, the engine iteratively alters the size of the crucial
ﬁeld, and checks for the program exception. Packet
Vaccine suﬀers from the same problems as Covers. It
neither checks for multiple separate ﬁelds, nor worries
about the granularity of the protocol dissector. Also, it
does not address the problem of attacks based on mal-
formed length ﬁelds mentioned earlier. By passing over
these issues, this approach may lead to false negatives
and positives.
3 Overﬂow attacks
Prospector caters to both heap and stack overﬂows.
Stack overﬂows are conceptually simple. Even so, they
prove to be hard to analyze automatically. Essentially,
a vulnerable buﬀer on the stack is overﬂown with net-
work data until it overwrites a target that may lead
to control ﬂow diversion (typically the return address).
Observe that the data that is used for the overﬂow
may originate in more than one set of bytes in the net-
work ﬂow (examples in practice include the well-known
Apache-Knacker exploit [28]). In Figure 1 this is illus-
trated by regions b1 andb2. Taking into account either
fewer or more protocol ﬁelds may lead both to false
positives and negatives. Covers [16], by using a single
protocol ﬁeld, lacks accuracy in a multi-ﬁeld attack.
There is another, more subtle reason why this may
occur, even if the attack does not use multiple ﬁelds:
the protocol dissector used to generate signatures may
work at diﬀerent protocol ﬁeld granularities than the
application. For instance, the dissector may iden-
tify subﬁelds in a record-like protocol ﬁeld as separate
ﬁelds, while the application simply treats it a single
protocol ﬁeld. As a consequence, the two types of
misclassiﬁcation described above may occur even for
‘single-ﬁeld’ exploits. As we often do not have detailed
information about the application, this scenario is quite
likely. Again, solving the problem requires handling
489489
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
‘multi-ﬁeld’ attacks properly.
Gaps. The naive solution for ﬁnding the bytes that
contribute to the attack is to start at the point of at-
tack (the target in Figure 1) and grab every tainted
byte below that address until we hit a non-tainted byte.
Unfortunately, while all bytes that contributed to the
attack were tainted at some point, such a naive solu-
tion is really not adequate. First, there may be gaps
in the tainted block of memory that was used in the
attack. For instance, the code in Listing 1 may lead
to a gap, because the assignment to n occurs after the
overﬂow.
Unrelated taints. Second, the naive solution gathers
tainted blocks that are unrelated to the attack. An
example is the region marked by x in Figure 1. It may
be caused by left-over data tainted from an old stack
frame, or by safe buﬀers adjacent to the vulnerable
buﬀer, such as the buﬀer unrelated in Listing 1.
In
this paper, we will informally refer to such unrelated
tainted data as unrelated taints.
Listing 1. Gaps and unrelated taints
( i n t f d ) {
1 . void r e a d f r o m s o c k e t
2 .
3 .
4 .
5 .
6 .
7 .
8 .
9 . }
i n t n ;
char v u l n e r a b l e b u f
char u n r e l a t e d [ 8 ] ;
r e a d ( v u l n e r a b l e b u f ,
r e a d ( u n r e l a t e d ,
n = 1 ; // u n t a i n t 4 p r e v i o u s l y t a i n t e d b y t e s
return ;
fd , 3 2 ) ;
fd , 8 ) ;
[ 8 ] ;
Heap corruption can be more complex than a stack
overﬂow and potentially more powerful. A simple over-
ﬂow occurs when critical data (e.g., a function pointer)
is overwritten from a neighboring chunk of memory, or
from another ﬁeld of a structure. In a more advanced
form, the attacker overﬂows link pointers that are used
to maintain a structure keeping free regions. It allows
an attacker to overwrite virtually any memory location
with any data [2]. The problem is caused by the imple-
mentation of memory allocation functions which store
control data together with the actual allocated mem-
ory, thus providing attackers potential access to infor-
mation used by the operating system memory manage-
ment.
The problem of gaps and unrelated taints also exists
for heaps and is mostly similar to that of the stack.
For heap overﬂows, instead of the occurrence of stale
tainted data from a previous function call, we may
encounter stale tainted data used in a previous func-
tion that allocated the memory region.
In addition,
there may be taints in adjacent ﬁelds of a structure.
Advanced heap corruption attacks yield an additional
complication. Since the attacker can overwrite any
memory location with any contents, it is possible that
at detection time the memory region which was holding
the vulnerable buﬀer is reused and contains unrelated
data. If left unhandled, such a scenario would prevent
us from pin-pointing exactly the data responsible for
the intrusion attempt.
Length ﬁeld attacks. Finally, numerous protocols
have ﬁelds specifying the length of another ﬁeld, say
lf deﬁning the length of ﬁeld f. Attackers may ma-
nipulate this length value, and via heap overﬂows take
control of the host. First, a malicious message may
provide l1, with l1 (cid:1) lf and close to the maximum size
of an integer. The application allocates l = l1 + k bytes
(where k bytes are needed to store some application-
speciﬁc data), and l ends up being a small number be-
cause of the integer wrap-around, l (cid:2) l1. As a result,
the application copies l1 bytes into the buﬀer leading to
overﬂow. In a second scenario, rarely seen in the wild,
the attacker provides l2 smaller than expected, l2 < lf ,
the application allocates a buﬀer of size l2 which is not
suﬃcient to hold the data, and a subsequent copy op-
eration without boundary checks spills network data
over adjacent memory. Notice that we cannot draw
any conclusions about a message containing such at-
tacks by relying only on the observation that n ﬁelds
where involved with a combined length of N.
We conclude this section with the assumption that
overﬂows occur by writing bytes beyond the high end of
the buﬀer, since it makes the explanation easier. How-
ever, it is trivial to extend our techniques to handle
the reverse direction (attacks overwriting memory be-
low the start of a buﬀer).
4 Design
The main steps of Prospector’s attack analysis are
sketched in Figure 1. In this section, we ﬁrst describe
how we instrument the execution and what data is pro-
duced by our taint-analysis emulator. We then show
how we use this data to determine the exact bytes in
the attack. The memory that constitutes these bytes
will be referred to as the crucial region. Finally, we cor-
relate the information with protocol ﬁelds in network
data to obtain signatures.
4.1 Dynamic taint analysis
Prospector employs an eﬃcient and reliable hard-
ware emulator that uses taint analysis to tag and track
network data [24]. Data originating in the network is
marked as tainted, and whenever it is copied to mem-
ory or registers, the new location is tainted also. We
raise an alert whenever the use of such data violates
security policies. To aid signature generation we dump
the content of all registers, as well as tainted memory
490490
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
blocks to ﬁle, with markers specifying the address that
triggered the violation, the memory area it was point-
ing to, etc.
In addition, we keep track of the exact
origin of a tainted memory area, in the form of an oﬀ-
set from the start of the network trace. In practice, the
oﬀset is used as (32 bit) tag.
Even with such accurate administration of oﬀsets,
the problem of identifying crucial regions remains. We
therefore extended the tracking in the temporal do-
main.
In the next few sections we will explain the
blocks that together form our information correlation
engine. We start with support for an advanced heap
corruption attack, and then explain how we pinpoint
the relevant tainted memory region.
4.2 Dealing with advanced heap overﬂows
In the case of stack overﬂows and simple heap cor-
ruption attacks, we know from where to look for the
crucial regions: in the memory area beneath the viola-
tion address reported by the emulator. In contrast, ad-
vanced heap corruption attacks, require us to ﬁnd ﬁrst
the memory region containing the vulnerable buﬀer.
Only then we can start marking the bytes that con-
tributed to the attack.
Such attacks may easily lead to a situation in which
at detection time, the memory region that was hold-
ing the vulnerable buﬀer is reused and contains unre-
lated data. Prospector therefore marks the bytes sur-
rounding an allocated chunk of memory as red. When
tainted data that is written to a red region (represent-
ing an overﬂow, but not necessarily an attack), we keep
the application running, but dump the memory re-
gion covering the whole vulnerable buﬀer for potential
later use. This works as common memory management
systems store control data in-line together with allo-
cated chunks of memory. Consequently, the ‘red’ bytes
surrounding an allocated buﬀer contain control data,
which should never be overwritten with data coming
from the network.
In the case of an intrusion attempt, we search for the
violation address and the network index in the dumped
heap areas in order to ﬁnd a memory region contain-
ing the buﬀer that contributed to the attack. These
chunks of memory allow us to perform further analysis
described in Section 4.8. Note that red markers are
quite diﬀerent from StackGuard’s canary values [8], as
they are maintained by the emulator and trigger action
immediately when they are overwritten.
4.3 Dealing with malformed messages
To handle heap corruption attacks that use mal-
formed length ﬁelds, we check whether allocating a
chunk of memory relies on remote data. Whenever an
application calls malloc (size) with the size variable
being tainted, we associate the network origins of the
length parameter with the new memory chunk. In the
case of an intrusion attempt, it enables us to determine
the real cause, and generate a correct signature. For
details, see Section 4.9.1.
4.4 Age stamps
In order to distinguish between stale and relevant
data both on stack and heap we introduce an age stamp
indicating the relative age of data regions. AgeStamp is
a global counter, common to the entire OS running on
the emulator. The need for a system-wide global vari-
able stems from the fact that memory may be shared.
AgeStamp is increased whenever a function is called (a
new stack frame is allocated) or returns. To be precise,
we update AgeStamp v1 to (v1 + 1) only if in epoch v1 a
tainted value was stored in the memory. Otherwise it is
not necessary, as we shall soon see. If a tainted value is
copied to memory, we associate the current AgeStamp
with the destination memory location, i.e., for each
tainted value we remember the epoch in which it was
stored. In addition, for each process and lightweight
process we allocate a history buﬀer, where we store in-
formation about allocation and release of stack frames,
as follows: for each function call and return we store
the value pair (stack pointer, AgeStamp). When an ap-
plication allocates a buﬀer on the heap, we associate
the current AgeStamp with this memory region. When
a memory ﬁeld becomes untainted, we do not clean the
age stamp value.
We observe that the order of age stamps in the cru-
cial region right after the overﬂow (before gaps appear)
is nondecreasing. We will use this observation in the
analysis phase to spot tainted bytes stored later than
the crucial tainted memory region, forming either a
gap, or an area of unrelated taints. For instance, the
unrelated buﬀer in Listing 1 has age stamps greater
than vuln buf, and so we can conclude that it does not
belong to the crucial memory region.
4.5 Additional indicators
Even though age stamps provide a crude separation
of unrelated taints, they are not powerful enough. Let
us consider an example vulnerable a fun function in
Figure 2. For simplicity we discuss a stack example,
491491
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
1  void a_fun(char *net_buf){
2    char buf[4];
3    char vuln_buf[4];
4    char *p;
5    p = net_buffer;
6    while(p)  
7     vuln_buf[i]=net_buf[++i]; 
8    for(i=0; i<4; i++) 
9      buf[i] = net_buf[i];
10 }
fresh tainted
unrelated tainted
stale tainted
untainted
1
1
1
1
1
0  0 
0 
1
0 
1
0  1
t
e
g
r
a
t
f
u
b
f
u
b
_
n
l
u
v
p
20
0 
20
1
0 
20
20 0 
20 0 
20
20
20
20
20
19
19
(f)
(a) memory allocation, AgeStamp=20; (b) assignment in line 5, and first iteration of the while loop, (c) second iteration of the while loop,  
(d) remaining iterations of the while loop, (e) first iteration of the for loop, (f) remaining iterations of the for loop
Since p is untainted, and we cannot deduce values of its associated indicators, they are left blank.
20
20
20
20
20
20
20
20
20
20
20
19
19
(d) 
20
20
20
20
20
20
20
20
20
20
19
19
(e) 
0 
1
0 
1