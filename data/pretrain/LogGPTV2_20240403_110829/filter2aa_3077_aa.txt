PUBLIC 
3/2/2022 
Controlling the Source: 
Abusing Source Code Management 
Systems 
Brett Hawkins 
Adversary Simulation, IBM X-Force Red 
X-Force Red | 3/2/2022 
2 
Document Tracking 
Data Classification: PUBLIC 
Version 
Date 
Author 
Notes 
1.0 
3/2/2022 
Brett Hawkins 
Release 
X-Force Red | 3/2/2022 
3 
TABLE OF CONTENTS 
ABSTRACT............................................................................................................................. 5 
BACKGROUND ...................................................................................................................... 6 
SOURCE CONTROL VS. VERSION CONTROL ............................................................................... 6 
SOURCE CONTROL VS. SOURCE CODE MANAGEMENT ................................................................ 6 
SOURCE CODE MANAGEMENT SYSTEMS ........................................................................... 6 
POPULAR SCM SYSTEMS ....................................................................................................... 7 
SCM SYSTEMS AND THE DEVOPS PIPELINE ............................................................................. 7 
SOFTWARE SUPPLY CHAIN ATTACKS ....................................................................................... 8 
LATERAL MOVEMENT TO OTHER DEVOPS SYSTEMS ................................................................... 9 
GITHUB ENTERPRISE ........................................................................................................20 
BACKGROUND ....................................................................................................................20 
ATTACK SCENARIOS ............................................................................................................22 
GITLAB ENTERPRISE .........................................................................................................49 
BACKGROUND ....................................................................................................................49 
ATTACK SCENARIOS ............................................................................................................51 
BITBUCKET .........................................................................................................................74 
BACKGROUND ....................................................................................................................74 
ATTACK SCENARIOS ............................................................................................................78 
SCMKIT................................................................................................................................94 
BACKGROUND ....................................................................................................................94 
RECONNAISSANCE ..............................................................................................................94 
PRIVILEGE ESCALATION ......................................................................................................97 
PERSISTENCE .....................................................................................................................98 
X-Force Red | 3/2/2022 
4 
DEFENSIVE CONSIDERATIONS...................................................................................... 102 
SCMKIT ......................................................................................................................... 102 
GITHUB ENTERPRISE ....................................................................................................... 103 
GITLAB ENTERPRISE ........................................................................................................ 105 
BITBUCKET ..................................................................................................................... 107 
CONCLUSION ................................................................................................................... 109 
ACKNOWLEDGMENTS ..................................................................................................... 110 
APPENDIX A: TABLE OF SCM ATTACK SCENARIOS...................................................... 111 
X-Force Red | 3/2/2022 
5 
Abstract 
Source Code Management (SCM) systems play a vital role within organizations and have 
been an afterthought in terms of defenses compared to other critical enterprise 
systems such as Active Directory. SCM systems are used in the majority of organizations 
to manage source code and integrate with other systems within the enterprise as part 
of the DevOps pipeline, such as CI/CD systems like Jenkins. These SCM systems 
provide attackers with opportunities for software supply chain attacks and can 
facilitate lateral movement and privilege escalation throughout an organization. 
This whitepaper will review a background on SCM systems, along with detailing ways 
to abuse some of the most popular SCM systems such as GitHub Enterprise, GitLab 
Enterprise and Bitbucket to perform various attack scenarios. These attack scenarios 
include reconnaissance, manipulation of user roles, repository takeover, pivoting to 
other DevOps systems, user impersonation and maintaining persistent access. X-Force 
Red’s source code management attack toolkit (SCMKit) will also be shown to perform 
and facilitate these attacks. Additionally, defensive guidance for protecting these SCM 
systems will be outlined. 
X-Force Red | 3/2/2022 
6 
Background 
There are many ways to interact with and track source code, along with compiled 
source code assets. Some of the common terms used in this process are source control, 
version control and source code management.  
SOURCE CONTROL VS. VERSION CONTROL 
The terms “source control” and “version control” are often used interchangeably with 
each other. However, there are differences between these two terms. Source control is 
specifically for tracking changes in source code, whereas version control also includes 
tracking changes for binary files and other file types. An example of this would be 
version control tracking changes to compiled executables, whereas source control 
would be tracking the changes to the underlying C# or C++ source files that were 
compiled into that executable. Git is a popular source control tool, and Subversion is a 
popular version control tool. 
SOURCE CONTROL VS. SOURCE CODE MANAGEMENT 
As previously mentioned, source control is in relation to tracking changes in source 
code. To use source control in a practical manner as part of the development process, 
source code management (SCM) systems are used. These systems allow tracking 
changes to source code repositories and allow developers to resolve conflicts when 
merging code commits from multiple people concurrently. 
Source Code Management Systems 
SCM systems provide a way for multiple team members to work on the same source 
code files simultaneously, along with keeping track of file history changes and resolving 
conflicts within source code files. There will typically be some type of user interface for 
users to interact with. Some of these SCM systems are more popular than others and 
have been adopted by enterprises, as they integrate into the development process in a 
more reliable manner. These SCM systems can be abused to facilitate software supply 
chain attacks1 and lateral movement within an organization. 
1 https://www.cisa.gov/publication/software-supply-chain-attacks 
X-Force Red | 3/2/2022 
7 
POPULAR SCM SYSTEMS 
A few of the more popular SCM systems that are used within enterprises are GitHub 
Enterprise2, GitLab Enterprise3 and Bitbucket4. These systems have different hosting 
options, as they can be hosted on-premise or in the cloud. They support Git source 
control and have multiple tiering models in terms of purchasing and setup. Additionally, 
these SCM systems support integration with other systems to help facilitate a DevOps 
pipeline5. 
SCM SYSTEMS AND THE DEVOPS PIPELINE 
SCM systems are heavily used during the “build” phase of a project in the DevOps 
pipeline as shown in the below diagram. All other phases depend on the source code 
that is developed and maintained within the SCM system. 
DevOps Pipeline Diagram6 
2 https://github.com/enterprise 
3 https://about.gitlab.com/enterprise/ 
4 https://bitbucket.org/product/ 
5 https://www.redhat.com/architect/devops-cicd 
6 https://medium.com/aws-cyber-range/secdevops-101-strengthen-the-basics-20f57197aa1c 
X-Force Red | 3/2/2022 
8 
Once a source code project is ready to be compiled and built, it will get pushed to a 
Continuous Integration (CI) server. After that, it will be tested, scanned, and deployed 
for use in production. 
DevOps Diagram7 
SOFTWARE SUPPLY CHAIN ATTACKS 
An attack that has been gaining popularity recently is software supply chain attacks8. 
In this attack, an attacker injects itself into the development process at one of the 
phases to deploy malicious code into production. This is typically performed in the 
“build” phase. For organizations that provide software to other organizations, this can 
enable the compromise of multiple organizations. One of the most notable software 
supply chain attacks was the SolarWinds breach9, which impacted many organizations 
in the private and public sector. The below diagram shows the opportunities an attacker 
has during the development process to implement a software supply chain attack. The 
research in this whitepaper focuses on the highlighted areas of “B” and “C”, as it relates 
to the compromise of SCM systems. However, the compromise of these SCM systems 
can also lead to other scenarios such as “D” where an attacker can use an SCM system 
to compromise a build platform system. 
7 https://devops.com/the-basics-devsecops-adoption 
8 https://www.crowdstrike.com/cybersecurity-101/cyberattacks/supply-chain-attacks/ 
9 https://www.mandiant.com/resources/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-
sunburst-backdoor 
X-Force Red | 3/2/2022 
9 
Software Supply Chain Attack Opportunity Diagram10 
LATERAL MOVEMENT TO OTHER DEVOPS SYSTEMS 
SCM systems can be used as an initial access point to other DevOps systems that are 
used in different phases of the DevOps lifecycle. Being able to pivot to the build system 
to compromise the CI/CD platform or pivoting to the package repository system to 
compromise the distribution platform are other scenarios where an attacker could 
perform a software supply chain attack. 
SCM Platform to CI/CD Platform 
One scenario where an attacker could laterally move from an SCM platform is to target 
the CI/CD platform. In this example, we will look at a scenario of performing lateral 
movement from the Bitbucket SCM system to the Jenkins build system11. 
When using Jenkins, you can provide a Jenkinsfile12, which is used as a configuration 
file of a Jenkins pipeline13. This file can be checked into an SCM system, and is what 
Jenkins uses to perform various actions as part of the build process. An attacker who 
has gained access to an SCM system will first need to discover any repositories that 
contain any files named “Jenkinsfile”. In this scenario, an attacker would need write 
access to the discovered repositories to modify the Jenkinsfile. In Bitbucket, this can 
be performed via the web interface or REST API. 
10 https://opensource.googleblog.com/2021/10/protect-your-open-source-project-from-supply-chain-attacks.html 
11 https://www.jenkins.io/ 
12 https://www.jenkins.io/doc/book/pipeline/jenkinsfile/ 
13 https://www.jenkins.io/doc/book/pipeline/ 
X-Force Red | 3/2/2022 
10 
Searching for Jenkins pipeline configuration file 
An attacker could simply modify the file to perform some malicious action, or they could 
be more targeted and perform reconnaissance in Jenkins to discover which Jenkins job 
is using these discovered files from Bitbucket. In the following example, an attacker 
has identified the Jenkins job using the “Cred-Decryption” Bitbucket repository as 
shown below. 
X-Force Red | 3/2/2022 
11 
Jenkins job Git build data 
To successfully authenticate to the Jenkins system via SSH, an attacker could add an 
SSH key under their control to the SSH directory for the Jenkins user account. An 
example of the Jenkinsfile modification in Bitbucket is shown below. 
X-Force Red | 3/2/2022 
12 
Snippet of code added 
Alternatively, an attacker could also wait for the Jenkins job to run on its own at its 
normal schedule or trigger the job themselves. One option is to use the Jenkins web 
interface to run the pipeline or via the Jenkins Remote Access API14 as shown in the 
example command below. 
curl -X POST 
https://Username:PI:EMAIL:jenkinsPort/job/JobName
/job/master/build 
Once the Jenkins job has been triggered manually or via an automated schedule, the 
output below shows the updated job output where the updated code in the Bitbucket 
hosted Jenkinsfile ran. The Jenkins job was able to successfully add the attacker’s 
SSH key to the Jenkins server. 
14 https://www.jenkins.io/doc/book/using/remote-access-api/ 
X-Force Red | 3/2/2022 
13 
Viewing Jenkins build information 
At this point, an attacker can now SSH to the Jenkins server using the SSH key under 
their control, as shown below. This allows the attacker to access the Jenkins server as 
the Jenkins user account, which gives the attacker the ability to perform various 
actions, such as extracting all passwords saved within the Jenkins server. 
X-Force Red | 3/2/2022 
14 
Successfully authenticating to Jenkins server via SSH 
This example has shown one method where an attacker could pivot from an SCM 
platform to a CI/CD platform such as Jenkins. 
SCM Platform to Distribution Platform 
Another scenario where an attacker could laterally move from an SCM platform is to 
target the distribution platform. In this example, we will look at a scenario of 
performing lateral movement from the GitLab Enterprise SCM system to the Artifactory 
packaging system. 
An attacker will need to identify any repositories that contain GitLab Runners15 they can 
access using a compromised account. A GitLab Runner is an application that runs jobs 
in a GitLab CI/CD pipeline. From an attacker perspective, these runners can be thought 
of as agents that can run on servers to execute system commands. Being able to control 
the CI/CD agent would allow potential compromise of the server that the agent runs on 
or any assets it interacts with. In the web interface, you can view whether a GitLab 
Runner is in use via the “CI/CD Settings” in a repository as shown below. 
15 https://docs.gitlab.com/runner/ 
X-Force Red | 3/2/2022 
15 
Listing repository with GitLab Runner configured 
This can also be identified via the GitLab Runners API16. An example command is shown 
below to get a listing of all runners that are available to the user being authenticated 
as. 
curl --header "PRIVATE-TOKEN: apiToken" 
https://gitlabHost/api/v4/runners 
16 https://docs.gitlab.com/ee/api/runners.html 
X-Force Red | 3/2/2022 
16 
Getting list of runners our user can access 
Once an attacker has a listing of the runners available, they need to determine which 
repository the runners are being used on. This can be performed using the below 
example request by passing the runner ID at the end of the request. 
curl --header "PRIVATE-TOKEN: apiToken" 
https://gitlabHost/api/v4/runners/RunnerIDNumber | python -m json.tool 
| grep -i http_url_to_repo 
Getting repos associated with GitLab runners 
Now that an attacker has identified they have access to a runner within a repository, 
they can modify the CI configuration file17. This by default is named “.gitlab-ci.yml”. In 
the below example, the CI configuration file is modified to print the Artifactory 
username and password to the console that was being used as a part of this CI/CD 
pipeline. 
17 https://docs.gitlab.com/ee/ci/yaml/ 
X-Force Red | 3/2/2022 
17 
Modifying CI configuration file 
After a CI configuration file is modified, it immediately triggers the pipeline to run with 
the new instructions that are given. When viewing the job that ran via the pipeline, you 
can see the Artifactory credentials have been displayed on the console. 
X-Force Red | 3/2/2022 
18 
Showing job output 
Next, those credentials are used to access the Artifactory system. 
X-Force Red | 3/2/2022 
19 
Proving access to Artifactory 
This successfully shows one method where an attacker could pivot from an SCM system 
to a distribution platform such as Artifactory. 
X-Force Red | 3/2/2022 
20 
GitHub Enterprise 
GitHub Enterprise is a popular SCM system used by organizations. In this section, there 
will be an overview of common terminology, the access model and API capabilities of 
GitHub Enterprise. Additionally, attack scenarios against GitHub Enterprise will be 
shown, along with how these attacks can be detected in system logs. 
BACKGROUND 
Terminology 
In GitHub Enterprise, a key use of terminology is the use of “enterprise” and 
“organization”.  The term “enterprise” refers to the entire GitHub Enterprise instance. 
One to many organizations can be contained within an enterprise, and the enterprise 
manages all organizations. A fully detailed list of common terminology used in GitHub 
Enterprise can be found at this resource18. 
Access Model 
Access Levels 
Users that have access to GitHub Enterprise are all members of the enterprise by 
default. The two primary enterprise roles are “Enterprise owner” and Enterprise 
member”. Enterprise owners can manage organizations in the enterprise, 
administrators, enterprise settings and enforce policy across organizations. Enterprise 
members are members of organizations that are owned by the enterprise and can 
collaborate in their assigned organization. Enterprise members cannot access or 
configure enterprise settings. Details on these enterprise roles can be found at this 
resource19. 
Within an organization, there are different roles as well. There are five main 
organization roles listed below. A detailed listing of organizations actions for these 
roles, along with a description of these roles can be found at this resource20. 
• Organization Owners 
• Organizations Members 
• Security Managers 
18 https://docs.github.com/en/enterprise-server@3.3/get-started/quickstart/github-glossary 
19 https://docs.github.com/en/enterprise-server@3.3/admin/user-management/managing-users-in-your-
enterprise/roles-in-an-enterprise 
20 https://docs.github.com/en/enterprise-server@3.3/organizations/managing-peoples-access-to-your-
organization-with-roles/roles-in-an-organization 
X-Force Red | 3/2/2022 
21 
• GitHub App Managers 
• Outside Collaborators 
There are also different roles that can be assigned for repositories within an 
organization. Five key repository roles are listed below. A detailed listing of repository 
actions for these roles, along with a description of these roles can be found at this 
resource21. 
• Read 
• Triage 
• Write 
• Maintain 
• Admin 
Access Token Scopes 
When assigning an API access token, there are multiple options for permissions to 
assign to that access token. In GitHub Enterprise, these are called “scopes”. These 
scopes determine whether the access token has access to repositories, SSH keys, 
users, and many other facets. A full and detailed listing of all available access token 
scopes in GitHub Enterprise is listed at this resource22. 
API Capabilities 
The GitHub Enterprise REST API enables a user to perform several actions such as 
interacting with repositories, access tokens, SSH keys and more. Administrative actions 
can also be performed via the REST API. Full documentation on the REST API is 
available at this resource23. 
21 https://docs.github.com/en/enterprise-server@3.3/organizations/managing-access-to-your-organizations-
repositories/repository-roles-for-an-organization 
22 https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes 
23 https://docs.github.com/en/enterprise-server@3.0/rest/guides/getting-started-with-the-rest-api 
X-Force Red | 3/2/2022 
22 
ATTACK SCENARIOS 
The below scenarios are notable for an attacker to attempt against GitHub Enterprise 
and have been useful as a part of X-Force Red’s Adversary Simulation engagements. 
This is not an exhaustive list of every single attack path available to execute on GitHub 
Enterprise. The below table summarizes the attack scenarios that will be described. 
Attack Scenario 
Sub-Scenario 
Admin Required? 
Reconnaissance 
-Repository 
-File 
-Code 
No 
Repository Takeover 
N/A 
Yes 
User Impersonation 
-Impersonate User Login 
-Impersonation Token 
Yes 
Promoting User to Site Admin 
N/A 
Yes 
Maintain Persistent Access 
-Personal Access Token 
-Impersonation Token 
-SSH Key 
No 
Yes 
No 
Management Console Access 
N/A 
Yes 
Table of GitHub Enterprise Attack Scenarios 
Reconnaissance 
The first step an attacker will take once access has been gained to a GitHub Enterprise 
instance is to start performing reconnaissance. Reconnaissance that could be of value 
to an attacker includes searching for repositories, files, and code of interest. 
Repository Reconnaissance 