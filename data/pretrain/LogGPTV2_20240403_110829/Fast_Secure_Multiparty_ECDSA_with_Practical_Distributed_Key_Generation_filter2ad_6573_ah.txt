a Paillier encryption and Pedersen commitment; this proof is taken from [2, Appendix A] with
appropriate modiﬁcations for Paillier.
Formally, we describe a Sigma protocol for the relation:
Req =
(C, ˜C, N, ˜N , g, h), (x, r, ρ)
(cid:17)(cid:12)(cid:12)(cid:12)C = (1 + N )x · rN mod N 2 ∧ ˜C = gx · hρ mod ˜N
(cid:111)
(cid:110)(cid:16)
where g, h ∈ Z∗
are random (with the discrete log of h relative to g and vice versa unknown to
˜N
the prover). The zero-knowledge property holds for x ∈ Zq (as is the case for our application);
technically, we do not include this requirement in the relation since that would mean that soundness
must ensure that x is in this range but this is what is covered by the range proof that follows this
one. The proof is parameterized by security parameter t; concretely we take t = 128 and compile
the Sigma protocol into a zero-knowledge proof of knowledge using the Fiat-Shamir transform (this
is true for all Sigma protocols that we use).
1. Prover P ’s ﬁrst message: P chooses random α ∈ Z
q·2t+(cid:96), β ∈ ZN and γ ∈ Z ˜N . Then, P
computes A = (1 + N )α · βN mod N 2 and B = gα · hγ mod ˜N , and sends (A, B) to V .
2. Veriﬁer V ’s challenge: V chooses a random e ∈ {0, 1}2t and sends it to P .
3. P ’s second message: P computes z1 = α + e· x (over the integers), z2 = β · re mod N , and
z3 = γ + ρ · e. P sends (z1, z2, z3) to V .
29
4. V ’s veriﬁcation: V accepts if and only if
2 = A · Ce mod N 2
(1 + N )z1 · zN
and gz1 · hz3 = B · ( ˜C)e mod ˜N .
We remark that when using the Fiat-Shamir paradigm, P computes e = H(C, ˜C, N, ˜N , A, B) and
N · (Ce)−1 mod N 2
deﬁnes the proof to be π = (e, z1, z2, z3) only. Then, V derives A = (1 + N )z1 · z2
and B = gz1 · hz3 · ( ˜Ce)−1 mod ˜N , and veriﬁes the hash.
6.2.5 Range Proof for Pedersen with Slack (ZK-CFT)
This proof is from [7], as described in [2, Section 1.2.3].
(cid:110)(cid:16)
(cid:105)
(cid:104)
Notation. Let t, (cid:96), s be security parameters (in the implementation, we take t = s = 128 and
(cid:96) = 80). Let ˜N be the modulus for Pedersen, and let g, h ∈ Z ˜N be random (with the discrete log
of h to base g and vice versa unknown to the prover). We denote by Pedg,h, ˜N (x; ρ) the Pedersen
commitment of x with randomness ρ; i.e., Pedg,h, ˜N (x; ρ) = gx · hρ mod ˜N .
The prover wishes to prove that x committed to in the Pedersen commitment lies in the interval
[0, q). Formally, we describe a Sigma protocol for the relation:
although the soundness of the protocol only guarantees that x ∈(cid:0)−2t+(cid:96) · q, 2t+(cid:96) · q(cid:1); this is what
( ˜C, ˜N , g, h), (x, ρ)
RPedRange =
(cid:17)(cid:12)(cid:12)(cid:12) ˜C = gx · hρ mod ˜N ∧ x ∈ Zq
(cid:111)
is meant by “slack” in the protocol.
1. P ’s ﬁrst message: P chooses random a ← Z
2t+(cid:96)·q and α ← Z ˜N and computes the commit-
ment A =
ga · hα mod ˜N
= Pedg,h, ˜N (a; α). P sends A to V .
2. V ’s challenge: V chooses a random e ← Z2t and sends it to P .
3. P ’s second message: P computes z1 = a + x · e (over the integers) and z2 = α + e · ρ. P
sends (z1, z2) to V .
4. V ’s veriﬁcation: V veriﬁes that z1 ∈ [2t · q, 2t+(cid:96) · q) and that gz1 · hz2 = A · ˜Ce mod ˜N .
We remark that when using the Fiat-Shamir paradigm, the proof is π = (e, z1, z2), and V derives
A = gz1 · hz2 · ( ˜Ce)−1 mod ˜N and veriﬁes the hash.
6.2.6 Range Proof for Paillier with Slack
In this section, we describe the full range proof for Paillier (with slack). The prover wishes to prove
that x encrypted in a Paillier ciphertext C lies in the interval [0, q). Formally, we describe a Sigma
protocol for the relation:
RPaillRange =(cid:8)((C, N ), (x, r))(cid:12)(cid:12)C = (1 + N )x · rN mod N 2 ∧ x ∈ Zq
(cid:9) .
As above, the soundness of the protocol only guarantees that x ∈(cid:0)−2t+(cid:96) · q, 2t+(cid:96) · q(cid:1).
This proof simply combines the proofs of Section 6.2.4 and 6.2.5. That is, the prover generates
a Pedersen commitment, proves that it commits to the same value as encrypted in the Paillier
ciphertext and then proves that the committed value is in the appropriate range. Formally:
30
1. Veriﬁer message: The veriﬁer V sends the prover P parameters ˜N , g, h for Pedersen com-
mitments (V chooses ˜N = p·q where p = 2p(cid:48) +1, q = 2q(cid:48) +1 are safe primes, and sets g, h to be
random elements QR ˜N ; since ˜N is a safe prime, the number of generators of QR ˜N is φ(p(cid:48) · q(cid:48))
and so the probability of a random quadratic residue not being a generator is negligible).
2. Prover message: P chooses a random ρ ← Z ˜N and computes ˜C = gx · hρ mod ˜N . Then,
P proves in zero-knowledge that
(C, ˜C, N, ˜N , g, h), (x, r, ρ)
tion 6.2.4) and that
( ˜C, N, ˜N , g, h), (x, ρ)
(cid:16)
(cid:16)
(cid:17) ∈ Req (using the proof of Sec-
(cid:17) ∈ RPedRange (using the proof of Section 6.2.5).
6.2.7 Zero-Knowledge Proof of Pailler-Pedersen Range-Bounded Aﬃne Operation
In this section, we describe a zero-knowledge proof that shows that a value D was generated from
C by carrying out a homomorphic aﬃne operation using values y, δ in a given range (such an aﬃne
operation is deﬁned by x · y + δ where x is the value encrypted in C). Formally, we are interested
in the relation:
RAﬃneRange =
(cid:12)(cid:12)(cid:12)D = Cy · (1 + N )δ mod N 2 ∧ y ∈ Zq ∧ δ ∈ Z
((C, D, N ), (y, δ))
q2·2t+(cid:96)+s
(cid:110)
(cid:111)
.
The proof is a generalization of the proofs in Sections 6.2.4 and 6.2.5, and works as follows:
1. Veriﬁer ﬁrst message: The veriﬁer V sends the prover P parameters ˜N , g, h for Pedersen
commitments (as in Section 6.2.6). (Note: in our speciﬁc usage, we can set N = ˜N since the
Paillier private key belongs to the veriﬁer.)
2. First prover message: P chooses random α ← Z
q2·22t+2(cid:96)+s, and ρ1, ρ2, ρ3, ρ4 ∈
Z ˜N . Then, P computes A = Cα · (1 + N )β mod N 2 and B1 = gα · hρ1 mod ˜N , B2 = gβ ·
hρ2 mod ˜N , B3 = gy · hρ3 mod ˜N and B4 = gδ · hρ4 mod ˜N . P sends (A, B1, B2, B3, B4) to V .
q·2t+(cid:96), β ← Z
3. Veriﬁer challenge: V sends the prover a random e ∈ Zt.
4. Second prover message: P computes z1 = α + e · y, z2 = β + e · δ, z3 = ρ1 + e · ρ3 and
z4 = ρ2 + e · ρ4. Send (z1, z2, z3, z4) to the veriﬁer.
5. Proof veriﬁcation: Accept if and only if
(a) z1 ∈ [2t · q, 2t+(cid:96) · q)
(b) z2 ∈ [2t · q2 · 22t+(cid:96)+s, 2t+(cid:96) · q2 · 22t+(cid:96)+s) = [q2 · 23t+(cid:96)+s, q2 · 23t+2(cid:96)+s)
(c) Cz1 · (1 + N )z2 = A · De mod N 2
(d) gz1 · hz3 = B1 · B3
(e) gz2 · hz4 = B2 · B4
e mod ˜N .
e mod ˜N .
We remark that here B3, B4 need to be sent, as well as (e, z1, z2, z3, z4) when using Fiat-Shamir.
Observe that the range proof is based on verifying the ranges of z1, z2, and it is valid since these
are proven to be the values committed in B3, B4 (for which the prover does not know the order of
the group).
31
7 Checking Diﬃe-Hellman Tuples
In this section, we show how to securely compute the FcheckDH functionality deﬁned in Section 4.2.
(cid:96)=1 P(cid:96),
a tuple (G,P, U, V ), and a share di such that Pi = di · G. The aim of the parties is to verify that
(cid:96)=1 di. Naively, each party Pi can send Ui = di · G to all other parties with a
zero-knowledge proof that (G, U,Pi, Ui) is a Diﬃe-Hellman tuple (using witness di). This ensures
that Pi computed Ui = di · G with the same di that deﬁnes Pi = di · G. Then, using all Ui received,
(cid:96)=1 d(cid:96) · U = d · U and check that it equals V . If the input
The idea behind the protocol is as follows. Each party holds P1, . . . ,Pn such that P =(cid:80)n
V = d· U where d =(cid:80)n
each party Pi can compute(cid:80)n
(cid:96)=1 U(cid:96) =(cid:80)n
is indeed a Diﬃe-Hellman tuple, then this equality will hold.
Unfortunately, however, the above method is not secure. This is due to the fact that by the
deﬁnition of FcheckDH (and what we need for securely computing Fmult), the parties should learn
nothing but whether or not the input is a Diﬃe-Hellman tuple.
In order to achieve this, the
parties ﬁrst need to randomize the ciphertext, and only then can they proceed as above. This
randomization is carried out by having each party Pi choosing random αi, ρi ∈ Zq and computing
(Ui, Vi) = (αi · U + ρi · G, αi · V + ρi · P). As described in Section 3.3 for relation RRE (and proven
in the proof of Theorem B.1; see Eq. Eq. (1)), this has the property that if (G,P, U, V ) is a Diﬃe-
(cid:96)=1 V(cid:96)) is a
Diﬃe-Hellman tuple. In contrast, if (G,P, U, V ) is not a Diﬃe-Hellman tuple, then the (G,P, Ui, Vi)
tuples generated by the honest parties are such that Ui and Vi are truly random and independent.
Thus, the resulting sum will be a Diﬃe-Hellman tuple with probability only 1/q. The protocol for
securely computing FcheckDH is described in Protocol 7.1.
Hellman tuple, then all (G,P, Ui, Vi) are Diﬃe-Hellman tuples, and so (G,P,(cid:80)n
(cid:96)=1 U(cid:96),(cid:80)n
PROTOCOL 7.1 (Securely Computing FcheckDH in the Fzk,Fcom-zk-Hybrid Model)
P =(cid:80)n
(cid:96)=1 P(cid:96). In addition, each party holds a unique session identiﬁer sid.
Input: Each party Pi holds a private key di.
Auxiliary Input: Each party holds public keys (cid:126)P = {P1, . . . ,Pn} and a pair (U, V ); denote
The init subprotocol: The init subprotocol is identical to init of Fmult; see Protocol 4.3. (Since it
is exactly the same protocol and exactly the same values, this is run once for both functionalities.)
The check subprotocol: Each party Pi works as follows:
1. Round 1: Party Pi chooses random αi, ρi ∈ Zq and computes (Ui, Vi) = (αi · U + ρi · G, αi ·
V + ρi · P). Then, Pi sends (ComProve, sid, i, (U, V, Ui, Vi), (αi, ρi)) to F RRE
com-zk.
2. Round 2: Upon receiving (ProofReceipt, sid, j) for all j ∈ [n], party Pi sends (DecomProof, sid)
to F RRE
com-zk.
3. Round 3:
(a) Pi receives (DecomProof, sid, j, (U, V, Uj, Vj), βj) from F RRE
com-zk for all j ∈ [n].
If some
βj = 0, then Pi aborts.
(b) Pi locally computes U(cid:48) =(cid:80)n
then Pi aborts. Pi checks that V (cid:48) = (cid:80)n
4. Output: Pi receives (proof, sid, j, (G, U(cid:48),Pi, U(cid:48)
(cid:96)=1 U(cid:48)
(c) Pi computes U(cid:48)
i=1 Ui and V (cid:48) =(cid:80)n
i=1 Vi.
outputs reject.
i = di · U(cid:48) and sends (proof, sid, i, (G, U(cid:48),Pi, U(cid:48)
i ), di) to F RDH
.
zk
j) from F RDH
i ), β(cid:48)
j = 0
(cid:96). If equality holds, it outputs accept; else, it
for all j ∈ [n]. If any β(cid:48)
zk
32
Complexity. The cost of Protocol 7.1 is 11 + 10(n − 1) exponentiations per party, each party
sending 7 group elements (or equivalent) to each other party, and 3 rounds of communication.
zk
,F RDH
output accept. This event happens when V (cid:54)= d · U but V (cid:48) = d · U(cid:48) (where d =(cid:80)n
Proposition 7.2 Assume that the DDH problem is hard in G. Then, Protocol 7.1 securely com-
putes Functionality 4.2 with abort in the (F RRE
com-zk)-hybrid model, in the presence of a mali-
cious adversary corrupting any t < n parties, with point-to-point channels.
Proof: Let bad be the event that (G,P, U, V ) is not a Diﬃe-Hellman tuple but the honest parties
i=1 di). Since the
corrupted parties are committed to their Ui, Vi values before seeing the honest parties’ values Uj, Vj,
it follows that U(cid:48), V (cid:48) is a true rerandomization of U, V . Thus, if (G,P, U, V ) is not a Diﬃe-Hellman
tuple, it follows that U(cid:48), V (cid:48) are uniformly and independently distributed in G. Thus V (cid:48) = d · U(cid:48)
with probability exactly 1/q, implying that Pr[bad] = 1/q.
We now describe the simulator S. Let A be the adversary in the real protocol. As in all our
previous proofs, we use I to denote the set of indexes of the corrupted parties and J for the set of