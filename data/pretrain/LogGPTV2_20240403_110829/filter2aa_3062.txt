Want strong isolation?
Just reset your processor.
How we can build more secure systems by applying 
the age-old wisdom of “turning it off and on again”
Anish Athalye, Adam Belay, Frans Kaashoek, Robert Morris, Nickolai Zeldovich
Security devices are increasingly common
Smartphone apps
Custom hardware
2
They are getting better
Smaller TCB
SMS 2FA
Smartphone
TOTP
Hardware
TOTP
Smartphone
U2F
Hardware
U2F
Hardware
Cryptocurrency
wallet
3
Paradigm shift
2FA: More secure login on PC
Transaction approval,
Removes PC from TCB
4
Can we make the PC secure instead?
5
• Endless bugs:
• Application bugs
• OS bugs (kernels > 20M LOC)
• Micro-architectural CPU bugs (Spectre, Meltdown, Foreshadow, Zombieload)
• Hardware bugs (Rowhammer, RAMBleed)
npm install event-stream
https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident
Transaction approval on simple devices
6
Remove PC from TCB
Untrusted PC
Trusted hardware
(has private key)
7
TX
Sign(TX)
Remove PC from TCB
8
Not just cryptocurrencies
9
Before: confirm on PC
After: must confirm on device, which signs transaction
Not just cryptocurrencies
10
Transaction approval everywhere!
•••
11
Transaction approval everywhere!
•••
12
Sharing results in isolation bugs
• Some past wallet bugs
• Bad argument validation in syscalls
• Bad configuration of MPU
[Riscure @ Black Hat 2018; Ledger Blog; 
Trezor Blog]
13
USB
SoC: 
CPU+RAM,
Flash,
Peripherals
Buttons
Display
Security through physical separation
14
Simulating physical separation
15
Reset-based design
16
CPU
RAM
CPU
RAM
UART
Flash
Buttons
Display
USB
Application core
Management core
Syscalls:
exit()
exit_state(state)
Runs third-party code;
has no persistent state
Manages persistent state;
never runs third-party code
What needs to be reset?
17
CPU
RAM
CPU
RAM
UART
Flash
Buttons
Display
USB
Application core
Management core
Purging state in a CPU, attempt #1
18
cut power
Purging state in a CPU, attempt #2
19
reset!
What does reset mean?
20
RISC-V Instruction Set Manual
Purging state in a CPU, attempt #3
21
reset!
+
mov r0, #0
mov r1, #0
mov r2, #0
...
Architectural and micro-architectural state
22
Examples of architectural state vs micro-architectural state
Minimizing complexity
23
Simpler processors have less micro-architectural state
Purging state in a CPU, final attempt
24
reset!
+
mov r0, #0
mov r1, #0
mov r2, #0
...
// do things that end up
// clearing internal state
...
These instructions affect
micro-architectural state
}
Check against CPU implementation
How do we know that reset is correct?
25
Arbitrary state
Reset / purge
Purged state
How do we know that reset is correct?
26
State (secret = 0)
Reset / purge
(Same) purged state
State (secret = 1)
Tool: Satisfiability Modulo Theories (SMT)
27
(x AND y) OR (NOT z)
SAT: {x = False, y = False, z = False}
(x AND y) AND ((NOT x) AND z)
UNSAT
SAT solvers
SMT: SAT on steroids
x: Int, y: Int
x + y  0
x: BitVec(8)
x > 0 AND x + 1  theorem is false
A counterexample to our 
theorem: an x where NOT (P(x))
UNSAT => theorem is proven
A proof that our theorem holds: because 
there is no x that makes NOT (P(x)) true,
P(x) must hold for all x
NOT (P(x))
Mechanical translation to SMT formula:
strip foralls, negate proposition
SMT solvers as theorem provers
29
Theorem: forall x y : Real,
min(x, y) >> from z3 import *
>>> x = Real('x'); y = Real('y'); s = Solver()
>>> Min = z3.If(x >> Max = z3.If(x >> avg = (x + y)/2
>>> theorem = And(Min >> s.add(Not(theorem))
>>> s.check()
unsat
Reset: theorem statement
30
forall s0 s1: CPU state,
purge(s0) = purge(s1)
Combinatorial circuits
31
Full adder
Combinatorial circuits
32
Combinatorial circuits
33
Prove:    a + b = b + a    (when c_in is the same)
Preconditions:
a/b are swapped
c_in is the same
Negated theorem statement:
result of adder is different
Verified!
Stateful circuits
34
Stateful circuits
35
Proof (attempt): as long as it’s not reset,
count doesn’t decrease
Preconditions:
s1 steps to s2,
counter is not reset
Negated theorem statement:
count decreases
Concrete counterexample!
Converting CPU implementation to SMT
36
Python / Z3 SMT model:
Describes 1 cycle of CPU execution
Verilog implementation:
Gate-level design of CPU
mechanical
translation
Symbolic simulation of the CPU
37
step
s0
step
s1 = step(s0)
step
s2 = step(s1)
step
s3 = step(s2)
step
s4 = step(s3)
step
s5 = step(s4)
...
Proving reset correct
38
reset
step
step
step
step
step ...
reset
step
step
step
step
step ...
Any possible initial states
Must converge to the same final state
Interactive development of reset code
39
Write reset code
Verifier
UNSAT
SAT
“Concrete counterexample:
state  is not cleared”
Done!
Demo (reset verification)
40
Demo (hardware)
46
Conclusion
• Users: Start using transaction authorization devices
• Developers:
• Support factoring out approval decisions (see WebAuthn)
• Steal our ideas
• Use verification as a tool to improve security
49
Code: git.io/shiva