### Limitations and Future Work

To avoid hindering the maximum clock frequency, our evaluation is confined to a research-grade hardware setup with a low clock speed. We hope that our work will inspire future studies and adoption on more powerful cores [58] and custom ASICs by processor vendors [38]. Additionally, while SNAP does not support kernel coverage filtered by privilege level, leveraging the hardware for tracing kernel space is not fundamentally restricted. SNAP is also unsuitable for tracking dynamic code generation with reused code pages, such as JIT and library loading/unloading, as this can affect the validity of the coverage bitmap. If needed, annotations with filters on the program space can be applied to reduce noise.

Future work could include repurposing a buffer dedicated to coverage bitmap storage to avoid extra cache misses, leveraging other micro-architectural states from hardware (such as memory access patterns) to identify dynamic memory allocations (e.g., heap) across program runs, or adopting operands of comparing instructions for feedback as suggested [41]. Alternatively, given filters in the debug unit of ARM’s CoreSight extension [2], the practicality of the design can be further demonstrated without relying on custom hardware.

### Related Work

#### Binary-Only Fuzzing

Runtime coverage tracing can be costly and becomes even more complicated when handling closed-source targets, such as COTS binaries. Typically, software-based solutions fall into either static or dynamic binary instrumentation, each with its own constraints. For example, DynInst [57] is not widely adopted due to the error-prone nature of its binary rewriting mechanism, making it unsuitable for many real-world use cases [15]. RetroWrite [15] requires relocation information for position-independent code to soundly instrument binaries. While most dynamic binary instrumentation schemes [4, 11, 44, 49, 63] are more accessible to fuzzers due to their ease of use, they often suffer from significant overhead due to runtime translation or callback routines. UnTracer [48] suggests coverage-guided tracing to achieve near-native execution speed for most non-interesting fuzzing test cases, but its current design and evaluation are based on basic block coverage, which is less accurate for branch transfers and loops. Although a revised edge coverage tracker (without edge count) has been proposed, the performance impact of switching to the new solution is unclear due to the potential increase in interesting test cases. In contrast, SNAP avoids these issues by tracing at the hardware level, removing the gap between source-based and binary-only tracing while providing richer execution feedback with near-zero performance overhead.

#### Hardware-Assisted Fuzzing

Besides software-based solutions, existing fuzzers [13, 26, 28, 53, 64] leverage available hardware extensions [31, 32, 36] for guidance when fuzzing binaries without source code. Intel PT [36] is the most commonly adopted, providing a highly compressed trace of an execution for efficiency. Despite its generality, using Intel PT for fuzzing can be ad-hoc, as it was originally designed for debugging with accurate and detailed traces without performance concerns. Therefore, it incurs at least a 20-40% combined overhead for tracing and decoding before a fuzzer can incorporate the feedback for further mutation [33, 48, 64]. PTrix [13] uses Intel PT to gather traces under a parallel scheme without recovering exact conditional branches for edge coverage to avoid major decoding overhead, but it only achieves comparable execution speed to source instrumentation. Similarly, PHMon [14], designed for various use cases like providing shadow stack and watchpoints for a debugger, is not optimized for tracing in fuzzing. In comparison, SNAP adopts a highly optimized design for fuzzing and shows its advantage over other approaches in §5.4. Despite the barrier to entry for a customized architecture, the benefits of SNAP under minimal changes to an existing CPU pipeline make it intriguing for commodity hardware. Motivated by existing hardware-accelerated infrastructures for machine learning [1, 23, 50] and the increasing industrial demand for fuzzing services [24, 47], SNAP demonstrates the feasibility of performance boost through hardware-assisted fuzzing, complementing Intel PT for various use cases.

### Conclusion

We present SNAP, a customized hardware platform that implements hardware primitives to enhance the performance and precision of coverage-guided fuzzing. SNAP is prototyped as a full FPGA implementation with the necessary OS support. By leveraging micro-architectural optimizations in the processor, our prototype enables transparent tracing and richer feedback on execution states with near-zero performance cost. Adopted fuzzers, such as AFL, can achieve 41% and 228× faster execution speed (and thus higher coverage) running on SNAP compared to existing tracing schemes like source instrumentation and DBI. The hardware design only imposes a 4.8% area and 6.5% power overhead, making it applicable to existing CPU architectures without significant changes.

### Acknowledgment

We thank the anonymous reviewers and our shepherd, David Chisnall, for their helpful feedback. This research was supported, in part, by the NSF awards CNS-1563848 and CNS-1749711, ONR grants N00014-18-1-2662, N00014-15-1-2162, N00014-17-1-2895, DARPA AIMEE HR00112090034 and SocialCyber HR00112190087, ETRI IITP/KEIT[2014-3-00035], and gifts from Facebook, Mozilla, Intel, VMware, and Google.

### References

[References listed here as provided in the original text.]

### Appendix

#### A.1 AFL Throughput on x86 Platforms

Although the fuzzing throughput from AFL-clang on the RISC-V platform is left out due to technical difficulties, a similar comparison for the numbers on x86 platforms is gathered instead. Specifically, we compile the Binutils binaries using AFL-gcc and AFL-clang and conduct five consecutive 12-hour fuzzing runs to reduce statistical noise. Figure 10 shows that AFL-clang consistently benefits from compiler-based optimizations over AFL-gcc, which manually instruments at the assembly level, and outperforms in all evaluated cases by an average of 6.96% faster execution speed.

**Figure 10: Average Execution Speed from Fuzzing with AFL-gcc and AFL-clang-fast for 12 Hours Across the Binutils Binaries.**

| Tool | cxxfilt | nm | objdump | readelf | size | strings | strip |
|------|---------|----|---------|---------|------|---------|-------|
| **AFL-gcc** | 1718 | 972 | 941 | 1112 | 932 | 171 | 932 |
| **AFL-clang-fast** | 1718 (5.06%) | 972 (7.10%) | 941 (4.04%) | 1112 (4.32%) | 932 (6.97%) | 171 (14.04%) | 932 (7.19%) |

The findings generally align with those of the AFL whitepaper [62], suggesting a performance gain of less than 10% for most binaries other than CPU-bound benchmarks. The only exception occurs when fuzzing strings (14.04%). This is because AFL’s feedback uses edge counters, driving the fuzzer to search for longer inputs with more printable strings, and the gain is magnified due to more iterations and branch encounters. Given the relative edges over AFL-gcc (Figures 8 and 10) and the posing overhead on the SPEC benchmarks (Tables 4 and 1), we expect SNAP to outperform AFL-clang on the RISC-V platform with higher fuzzing throughput.