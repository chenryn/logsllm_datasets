via malloc, data export is more diﬃcult. We solve this
problem by providing memory allocation from shared
memory. As a result, data stored in dynamically allo-
cated memory is also available in the address space of
the privileged monitor. Figure 2 shows the interface to
the shared memory allocator.
The two functions mm create and mm share sync
are responsible for permitting a complete export of
dynamically allocated memory. The mm create func-
tion creates a shared address space of the speciﬁed size.
There are several ways to implement shared memory,
we use anonymous memory maps. The returned value
is a pointer to a mm master structure that keeps track
of allocated memory. It is used as parameter in subse-
quent calls to mm malloc and mm free. Every call to
those two functions may result in allocation of addi-
tional memory for state that keeps track of free or al-
located memory in the shared address space. Usually,
that memory is allocated with libc’s malloc function.
However, the ﬁrst argument to the mm create func-
tion may be a pointer to another shared address space.
In that case, the memory manager allocates space for
additional state from the passed shared address space.
Figure 3 shows an overview of how allocation in the
shared address space proceeds. We create two shared
address spaces: back and mm. The address space mm
uses back to allocate state information. When the child
234
12th USENIX Security Symposium 
USENIX Association
Back
Mm
Parent
back = mm_create(NULL, 65536);
mm = mm_create(back, 655360);
Back
Mm
privileged
OpenSSH
Listen *:22
privileged
OpenSSH
Monitor
Network connection
fork unprivileged child
unprivileged
OpenSSH
Network
Processing
Key Exchange
Authentication
i
T
m
e
l
i
n
e
Request Auth
Auth Result
S t a t e   E x p o r
t
fork user child
Parent
pid = fork();
...
waitpid(pid, NULL, 0);
Child
p = mm_malloc(mm, size);
...
exit(0);
privileged
OpenSSH
Monitor
Request PTY
Pass PTY
user privileged
OpenSSH
User Request
Processing
User Network Data
Figure 3: The complete state of a slave process in-
cludes dynamically allocated memory. When exporting
this state, the dynamically allocated address space in
opaque data objects must not change. By employing a
shared memory allocator that is backed by another shared
address space, we can export state without changing the
addresses of dynamically allocated data.
wants to change its identity, it exits and the thread of
execution continues in the parent. The parent has ac-
cess to all the data that was allocated in the child.
However, one problem remains. The shared address
space back uses libc’s malloc that allocated memory
in the child’s address space to keep track of its state.
If this information is lost when the child process exits,
then subsequent calls to mm malloc or mm free fail. To
solve the problem, the parent calls the mm share sync
function which recreates the state information in the
shared address space back. Afterwards, freeing and al-
locating memory proceeds without any problems.
We use shared memory and XDR-like data marshal-
ing to export all state from the child to the parent. Af-
ter the child process exports its state and terminates,
the parent creates a new child process. The new pro-
cess changes to the desired UID and GID and then
imports the exported state. This eﬀects a change of
identity in the slave that preserves state information.
4 Separating Privileges in OpenSSH
In this section, we show how to use privilege sep-
aration in OpenSSH, a free implementation of the
SSH protocols. OpenSSH provides secure remote lo-
gin across the Internet. OpenSSH supports protocol
versions one and two; we restrict our explanation of
privilege separation to the latter. The procedure is
very similar for protocol one and also applies to other
services that require authentication.
Figure 4: Overview of privilege separation in OpenSSH.
An unprivileged slave processes all network communica-
tion.
It must ask the monitor to perform any operation
that requires privileges.
When the SSH daemon starts, it binds a socket to
port 22 and waits for new connections. Every new con-
nection is handled by a forked child. The child needs
to retain superuser privileges throughout its lifetime
to create new pseudo terminals for the user, to au-
thenticate key exchanges when cryptographic keys are
replaced with new ones, to clean up pseudo terminals
when the SSH session ends, to create a process with
the privileges of the authenticated user, etc.
With privilege separation, the forked child acts as
the monitor and forks a slave that drops all its priv-
ileges and starts accepting data from the established
connection. The monitor now waits for requests from
the slave; see Figure 4. Requests that are permitted
in the pre-authentication phase are shown in Figure 5.
If the child issues a request that is not permitted, the
monitor terminates.
First, we identify the actions that require special
privilege in OpenSSH and show which request types
can fulﬁll them.
4.1 Pre-Authentication Phase
In this section, we describe the privileged requests
for the pre-authentication phase:
(cid:127) Key Exchange:
SSH v2 supports the Diﬃe-
Hellman Group Exchange which allows the client
to request a group of a certain size from the
server [10]. To ﬁnd an appropriate group the
server consults the /etc/moduli ﬁle. However, be-
cause the slave has no privileges to access the ﬁle
system, it can not open the ﬁle itself, so, it is-
sues an informational request to the monitor. The
USENIX Association
12th USENIX Security Symposium 
235
struct mon_table mon_dispatch_proto20[] = {
{MONITOR_REQ_MODULI, MON_ONCE, mm_answer_moduli},
{MONITOR_REQ_SIGN, MON_ONCE, mm_answer_sign},
{MONITOR_REQ_PWNAM, MON_ONCE, mm_answer_pwnamallow},
{MONITOR_REQ_AUTHSERV, MON_ONCE, mm_answer_authserv},
{MONITOR_REQ_AUTHPASSWORD, MON_AUTH, mm_answer_authpassword},
[...]
{MONITOR_REQ_KEYALLOWED, MON_ISAUTH, mm_answer_keyallowed},
{MONITOR_REQ_KEYVERIFY, MON_AUTH, mm_answer_keyverify},
{0, 0, NULL}
};
Figure 5: The table describes valid requests that a slave may send to the monitor in the pre-authentication phase for
SSH protocol version two. After authentication, the set of valid requests changes and is described by a separate table.
monitor returns a suitable group after consulting
the moduli ﬁle. The returned group is used by the
slave for the key exchange. As seen in Figure 5,
the slave may issue this request only once.
(cid:127) Authenticated Key Exchange: To prevent man-in-
the-middle attacks, the key exchange is authenti-
cated. That means that the SSH client requires
cryptographic proof of the server identity. At the
beginning of the SSH protocol, the server sends
its public key to the client for veriﬁcation. As the
public key is public, the slave knows it and no spe-
cial request is required. However, the slave needs
to ask the monitor to authenticate the key ex-
change by signing a cryptographic hash of all val-
ues that have been exchanged between the client
and the server. The signature is obtained by an
informational request.
(cid:127) User Validation: After successful key exchange, all
communication is encrypted and the SSH client
informs the server about the identity of the user
who wants to authenticate to the system. At this
point, the server decides if the user name is valid
and allowed to login. If it is invalid, the protocol
proceeds but all authentication attempts from the
client fail. The slave can not access the password
database, so it must issue an informational request
to the server. The server caches the user name and
reports back to the slave if the name is valid.
(cid:127) Password Authentication: Several methods can be
used to authenticate the user. For password au-
thentication, the SSH client needs to send a cor-
rect login and password to the server. Once again,
the unprivileged slave can not access the password
database, so it asks the monitor to verify the pass-
word. The monitor informs the slave if the au-
thentication succeeds or fails. If it succeeds, the
pre-authentication phase ends.
(cid:127) Public Key Authentication: Public Key Authen-
tication is similar to password authentication. If
it is successful, the pre-authentication phase ends.
However, two informational requests are required
to use public keys for authentication. The ﬁrst re-
quest allows the slave to determine if a public key
presented by the client may be used for authenti-
cation. The second request determines if the sig-
nature returned by the client is valid and signs the
correct data. A valid signature results in success-
ful authentication.
At any time, the number of requests that the slave
may issue are limited by the state machine. When
the monitor starts, the slave may issue only the ﬁrst
two requests in Figure 5. After the key exchange has
ﬁnished, the only valid request is for user validation.
After validating the user, all authentication requests
are permitted. The motivation for keeping the number
of valid requests small is to reduce the attack proﬁle
available to an intruder who has compromised the slave
process.
All requests up to this point have been informa-
tional. The pre-authentication phase ends with suc-
cessful authentication as determined by the monitor.
At this point, the slave needs to change its identity
to that of the authenticated user. As a result, the
slave obtains all privileges of the user, but no other
privileges. We achieve this with a change of identity
request.
The monitor receives the state of the slave process
and waits for it to exit. The state consists of the fol-
lowing: the encryption and authentication algorithms
including their secret keys, sequence counters for in-
coming and outgoing packets, buﬀered network data
and the compression state.
236
12th USENIX Security Symposium 
USENIX Association
Exporting the cryptographic key material is uncom-
plicated. The main problem is exporting the compres-
sion state. The SSH protocols use the zlib compression
format [7, 8] which treats network data as a stream
instead of sequence of packets. Treating network data
as a stream allows zlib to improve its dictionary with
increasing amount of compressed data. On the other
hand, it also means that compression in the server can-
not be stopped and then restarted as the client uses a
dictionary that depends on all the preceding data. For-
tunately, zlib provides hooks for user supplied mem-
ory management functions. We provide it with func-
tions that use mm malloc and mm free as back end.
After the child exits, the monitor needs only to call
mm share sync to import the compression state.
4.2 Post-Authentication Phase
The monitor forks a new process that then changes
its process identiﬁcation to that of the authenticated
user. The slave process obtains all the privileges of
the authenticated user. At this point, we enter the
post-authentication phase which requires only a few
privileged operations. They are as follows:
(cid:127) Key Exchange: In SSH protocol version two, it
is possible to renew cryptographic keys. This re-
quires a new key exchange, so just as in the pre-
authentication phase, the monitor chooses a suit-
able group for the Diﬃe-Hellman key exchange
and signs for authentication.
(cid:127) Pseudo Terminal Creation: After authentication,
the user requires a pseudo terminal whose creation
requires superuser privileges. For a Unix applica-
tion, a pseudo terminal is just a ﬁle descriptor.
The slave issues a capability request to the moni-
tor. The monitor creates the terminal and passes
the corresponding ﬁle descriptor to the child pro-
cess. An informational request suﬃces when the
slave wants to close the pseudo terminal.
4.3 Discussion
Observe that the majority of all privileged opera-
tions can be implemented with informational requests.
In fact, some degree of privilege separation is possible
if neither capability nor change of identity requests are
available. If the operating system does not support ﬁle
descriptor passing, privilege separation perforce ends
after the pre-authentication phase. To fully support
the change of identify request shared memory is re-
quired. Without shared memory, the compression state
cannot be exported without rewriting zlib. Nonethe-
less, systems that do not support shared memory can
disable compression and still beneﬁt from privilege sep-
aration.
Using an alternative design, we can avoid the change
of identity request and shared memory. Instead of us-
ing only two processes: monitor and slave, we use three
processes: one monitor process and two slave processes.
The ﬁrst slave operates similarly to the slave process
described in the pre-authentication phase. However,
after the user authenticates, the slave continues to run
and is responsible for encrypting and decrypting net-
work traﬃc. The monitor then creates a second slave
to execute a shell or remote command with the cre-
dentials of the authenticated user. All communication
passes via the ﬁrst child process to the second. This
design requires no state export and no shared mem-
ory. Although the cryptographic processing is isolated
in the ﬁrst child, it has only a small eﬀect on security.
In the original design, a bug in the cryptographic pro-
cessing may allow an adversary to execute commands
with the privilege of the authenticated user. However,
after authentication, an adversary can already execute
any commands as that user. The three process design
may help for environments in which OpenSSH restricts
the commands a user is allowed to execute. On the
other hand, it adds an additional process, so that ev-
ery remote login requires three instead of two processes.
While removing the state export reduces the complex-
ity of the system, synchronizing three instead of two
processes increases it. An additional disadvantage is a
decrease in performance because the three process de-
sign adds additional data copies and context switches.
For the two process design, the changes to the ex-
isting OpenSSH sources are small. About 950 lines of
the 44,000 existing lines of source code, or 2%, were
changed. Many of the changes are minimal:
- authok = auth_password(authctxt, pwd);
+ authok = PRIVSEP(auth_password(authctxt, pwd);
The new code that implements the monitor and the
data marshaling amounts to about three thousand lines
of source code, or about seven percent increase in the
size of the existing sources.
While support for privilege separation increases the
source code size, it actually reduces the complexity of
the existing code. Privilege separation requires clean
and well abstracted subsystem interfaces so that their
privileged sections can run in a diﬀerent process con-
text. During the OpenSSH implementation, the inter-
faces for several subsystems had to be improved to fa-
cilitate their separation. As a result, the source code is
better organized, more easily understood and audited,
and less complex.
The basic functionality that the monitor provides
is independent of OpenSSH. It may be used to enable
USENIX Association
12th USENIX Security Symposium 
237
privilege separation in other applications. We beneﬁt
from reusing security critical source code because it
results in more intense security auditing. This idea
has been realized in Privman, a library that provides
a generic framework for privilege separation [12].
5 Security Analysis
To measure the eﬀectiveness of privilege separation
in OpenSSH, we discuss attacks that we protect against
and analyse how privilege separation would have af-
fected security problems reported in the past. We as-
sume that the employed cryptography is secure, there-
fore we do not discuss problems of cryptographic prim-
itives.
After privilege separation, two thirds of the source
code are executed without privileges as shown in Ta-
ble 1. The numbers include code from third-party li-
braries such as openssl and zlib. For OpenSSH itself,
only twenty ﬁve percent of the source code require priv-
ilege whereas the remaining seventy ﬁve percent are
executed without special privilege. If we assume that
programming errors are distributed fairly uniformly,
we can estimate the increase of security by counting
the number of source code lines that are now executed
without privileges. This back of the envelope analysis
suggests that two thirds of newly discovered or intro-
duced programming errors will not result in privilege
escalation and that only one third of the source code
requires intensive auditing.
We assume that an adversary can exploit a program-
ming error in the slave process to gain complete con-
trol over it. Once the adversary compromised the slave
process, she can make any system call in the process
context of the slave. We assume also that the system
call interface to the operating system itself is secure2.
Still, there are several potential problems that an im-
plementation of privilege separation needs to address:
(cid:127) The adversary may attempt to signal or ptrace
other processes to get further access to the system.
This is not possible in our design because the slave
processes use their own UID.
(cid:127) The adversary may attempt to signal or ptrace
the slave processes of other SSH sessions. When
changing the UID of a process from root to another
UID, the operating system marks the process as
P SUGID so that only root may signal or ptrace it.
Subsystem
Unprivileged
OpenSSH
Ciphers
Packet Handling