        SafeContinuation safeContinuation = new SafeContinuation(IntrinsicsKt.intercepted(continuation));
        final SafeContinuation safeContinuation2 = safeContinuation;
        okHttpClient.newCall(request).enqueue(new Callback() { // from class: google.h4ck1ng.secretcorgis.NetworkKt$makeRequest$2$1
            @Override // okhttp3.Callback
            public void onFailure(Call call, IOException e) {
                Intrinsics.checkNotNullParameter(call, "call");
                Intrinsics.checkNotNullParameter(e, "e");
                Continuation continuation2 = safeContinuation2;
                Result.Companion companion = Result.Companion;
                continuation2.resumeWith(Result.m4691constructorimpl(ResultKt.createFailure(e)));
            }
            @Override // okhttp3.Callback
            public void onResponse(Call call, Response response) {
                Intrinsics.checkNotNullParameter(call, "call");
                Intrinsics.checkNotNullParameter(response, "response");
                Response response2 = response;
                Continuation continuation2 = safeContinuation2;
                try {
                    Response response3 = response2;
                    if (response.code() == 401) {
                        Result.Companion companion = Result.Companion;
                        continuation2.resumeWith(Result.m4691constructorimpl(ResultKt.createFailure(new IllegalAccessException())));
                    } else if (response.code() == 404) {
                        Result.Companion companion2 = Result.Companion;
                        continuation2.resumeWith(Result.m4691constructorimpl(ResultKt.createFailure(new FileNotFoundException())));
                    } else if (response.isSuccessful()) {
                        Result.Companion companion3 = Result.Companion;
                        ResponseBody body = response.body();
                        Intrinsics.checkNotNull(body);
                        continuation2.resumeWith(Result.m4691constructorimpl(body.string()));
                    } else {
                        Result.Companion companion4 = Result.Companion;
                        continuation2.resumeWith(Result.m4691constructorimpl(ResultKt.createFailure(new UnknownError())));
                    }
                    Unit unit = Unit.INSTANCE;
                    CloseableKt.closeFinally(response2, null);
                } finally {
                }
            }
        });
        Object orThrow = safeContinuation.getOrThrow();
        if (orThrow == IntrinsicsKt.getCOROUTINE_SUSPENDED()) {
            DebugProbesKt.probeCoroutineSuspended(continuation);
        }
        return orThrow;
    }
    /* JADX INFO: Access modifiers changed from: private */
    public static final String generateSignature(CorgiRequest corgiRequest) {
        String sb;
        if (corgiRequest.isSubscriber()) {
            StringBuilder sb2 = new StringBuilder();
            String upperCase = DOC_ID_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            StringBuilder append = sb2.append(upperCase).append('=').append(corgiRequest.getCorgiId()).append(',');
            String upperCase2 = NONCE_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase2, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            StringBuilder append2 = append.append(upperCase2).append('=').append(corgiRequest.getNonce()).append(',');
            String upperCase3 = TIMESTAMP_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase3, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            StringBuilder append3 = append2.append(upperCase3).append('=').append(corgiRequest.getTimestamp()).append(',');
            String upperCase4 = SUBSCRIBER_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase4, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            sb = append3.append(upperCase4).append('=').append(corgiRequest.isSubscriber()).toString();
        } else {
            StringBuilder sb3 = new StringBuilder();
            String upperCase5 = DOC_ID_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase5, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            StringBuilder append4 = sb3.append(upperCase5).append('=').append(corgiRequest.getCorgiId()).append(',');
            String upperCase6 = NONCE_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase6, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            StringBuilder append5 = append4.append(upperCase6).append('=').append(corgiRequest.getNonce()).append(',');
            String upperCase7 = TIMESTAMP_HEADER.toUpperCase(Locale.ROOT);
            Intrinsics.checkNotNullExpressionValue(upperCase7, "this as java.lang.String).toUpperCase(Locale.ROOT)");
            sb = append5.append(upperCase7).append('=').append(corgiRequest.getTimestamp()).toString();
        }
        return sign(sb);
    }
    public static final String sign(String message) {
        Intrinsics.checkNotNullParameter(message, "message");
        byte[] decode = Base64.decode(CorgiNetwork.Companion.getSharedSecret(), 0);
        Mac mac = Mac.getInstance("HmacSHA256");
        mac.init(new SecretKeySpec(decode, "HmacSHA256"));
        Charset UTF_8 = StandardCharsets.UTF_8;
        Intrinsics.checkNotNullExpressionValue(UTF_8, "UTF_8");
        byte[] bytes = message.getBytes(UTF_8);
        Intrinsics.checkNotNullExpressionValue(bytes, "this as java.lang.String).getBytes(charset)");
        byte[] doFinal = mac.doFinal(bytes);
        Intrinsics.checkNotNullExpressionValue(doFinal, "getInstance(\"HmacSHA256\"…ardCharsets.UTF_8))\n    }");
        return ByteArraysKt.toHexString(doFinal);
    }
}
```
This is very interesting, we have different behavior for subscribers and non-subscribers in `generateSignature` and `makeSecretRequest`! What if we try to take the subscriber path?
To do that, we need to:
 * Include in our request all the headers as seen in `makeSecretRequest`
 * Sign the HMAC according to the logic in `generateSignature` and `sign`
Let's start collecting all the data we need for this. 
For the `DOC_ID_HEADER`, we'll use the `DOCID` that we were provided with, i.e. `flag`.
For the `NONCE_HEADER`, we'll generate a nonce according the the logic in `CorgiRequest$nonce$2.java`:
```java
MessageDigest messageDigest = MessageDigest.getInstance("sha-256");
messageDigest.update(Random.Default.nextBytes(32));
byte[] digest = messageDigest.digest();
Intrinsics.checkNotNullExpressionValue(digest, "getInstance(\"sha-256\").a…s(32))\n        }.digest()");
return ByteArraysKt.toHexString(digest);
```
For the `TIMESTAMP_HEADER`, we'll send the time according to the logic in `CorgiRequest.java`:
```java
public final String getTimestamp() {
    return String.valueOf(new Date().getTime() / 1000);
}
```
For the `SUBSCRIBER_HEADER` we'll return `true`:
```java
private final boolean isSubscriber;
public final boolean isSubscriber() {
    return this.isSubscriber;
}
```
We'll format it according to the `generateSignature()` logic and sign it with the shared secret, after tracking it down. We start from `CorgiNetwork.Companion.getSharedSecret()`
```java
public static final class Companion {
    public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
        this();
    }
    private Companion() {
    }
    public final String getSharedSecret() {
        return CorgiNetwork.sharedSecret;
    }
}
public CorgiNetwork(Context context) {
    Intrinsics.checkNotNullParameter(context, "context");
    String string = context.getString(R.string.hmac_shared_secret);
    Intrinsics.checkNotNullExpressionValue(string, "context.getString(R.string.hmac_shared_secret)");
    sharedSecret = string;
}
```
We can see that the shared secret comes from `R.string.hmac_shared_secret`, but `R` just contains an address:
```java
public static final class string {
    public static final int app_name = 0x7f090001;
    public static final int hmac_shared_secret = 0x7f090019;
    // ...
}
```
Luckily, we can find the actual value in `resources\res\values\strings.xml`:
```xml
    uBvB5rPgH0U+yPhzPq9y2i4f1396t/2dCpo3gd7l1+0=
```
Looks like we have everything, let's put it all together:
```python
import requests
import hmac
import hashlib
import base64
import random
import time
hmac_shared_secret = "uBvB5rPgH0U+yPhzPq9y2i4f1396t/2dCpo3gd7l1+0="
URL = "https://corgis-web.h4ck.ctfcompetition.com/corgi"
DOC_ID_HEADER = "X-Document-ID"
HMAC_SIG_HEADER = "X-Auth-MAC"
NONCE_HEADER = "X-Request-Nonce"
SUBSCRIBER_HEADER = "X-User-Subscribed"
TIMESTAMP_HEADER = "X-Timestamp"
def nonce():
    r = random.randbytes(4)
    return hashlib.sha256(r).hexdigest()
def generateSignature(headers):
    r = ",".join(h.upper() + "=" + headers[h] for h in sorted(headers.keys()))
    log(f"Signing '{r}'")
    return sign(r)
def sign(message):
    decode = base64.b64decode(hmac_shared_secret)
    return hmac.new(decode, msg = bytes(message , 'utf-8'), digestmod = hashlib.sha256).hexdigest()
def log(message):
    print(f"[-] {message}\n")
headers = {
    DOC_ID_HEADER: "flag",
    NONCE_HEADER: nonce(),
    TIMESTAMP_HEADER: str(int(time.time())),
    SUBSCRIBER_HEADER: "true"
}
s = generateSignature(headers)
r = requests.get(f"{URL}?_mac={s}", headers=dict({HMAC_SIG_HEADER: s}, **headers))
log(f"URL: {r.request.url}")
log("Headers: {}".format({k: v for k, v in r.request.headers.items() if k.startswith("X")}))
log(f"Response: {r.text}")
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/h4ck1ng.google/EP003/Challenge_03]
└─$ python3 solve.py
[-] Signing 'X-DOCUMENT-ID=flag,X-REQUEST-NONCE=25966b06a6d2c9195609fc6a5642a13fdeed98e78bef8d42b772cf4e3ed20fbf,X-TIMESTAMP=1665941119,X-USER-SUBSCRIBED=true'
[-] URL: https://corgis-web.h4ck.ctfcompetition.com/corgi?_mac=994224e088d5f14eedfa95970ce86c3547e4041cbceb110368b1f4107afe5e7b
[-] Headers: {'X-Auth-MAC': '994224e088d5f14eedfa95970ce86c3547e4041cbceb110368b1f4107afe5e7b', 'X-Document-ID': 'flag', 'X-Request-Nonce': '25966b06a6d2c9195609fc6a5642a13fdeed98e78bef8d42b772cf4e3ed20fbf', 'X-Timestamp': '1665941119', 'X-User-Subscribed': 'true'}
[-] Response: {"subscriberOnly":true,"text":"Secret message","title":"Secret flag data","url":"https://h4ck1ng.google/solve/c0rg15_4nd_th3ir_s3cr3ts_4r3_cu73"}
```