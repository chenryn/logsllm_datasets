```kusto
StormEvents 
| where StartTime > datetime(2007-06-04) and StartTime 
```kusto
StormEvents
| extend hour =bin(StartTime % 1d , 1h)
| summarize event_count=count() by hour
| sort by hour asc
| render timechart
```
:::image type="content" source="media/tutorial/time-count-hour.png" alt-text="Screenshot that shows a timechart count by hour.":::
Currently, `render` doesn't label durations properly, but we could use `| render columnchart` instead:
:::image type="content" source="media/tutorial/column-count-hour.png" alt-text="Screenshot that shows a column chart count by hour.":::
## Compare multiple daily series
How does activity vary over the time of day in different states?
```kusto
StormEvents
| extend hour= bin( StartTime % 1d , 1h)
| where State in ("GULF OF MEXICO","MAINE","VIRGINIA","WISCONSIN","NORTH DAKOTA","NEW JERSEY","OREGON")
| summarize event_count=count() by hour, State
| render timechart
```
:::image type="content" source="media/tutorial/time-hour-state.png" alt-text="Screenshot of a timechart by hour and state.":::
Divide by `1h` to turn the x-axis into an hour number instead of a duration:
```kusto
StormEvents
| extend hour= bin( StartTime % 1d , 1h)/ 1h
| where State in ("GULF OF MEXICO","MAINE","VIRGINIA","WISCONSIN","NORTH DAKOTA","NEW JERSEY","OREGON")
| summarize event_count=count() by hour, State
| render columnchart
```
:::image type="content" source="media/tutorial/column-hour-state.png" alt-text="Screenshot that shows a column chart by hour and state.":::
## Join data types
How would you find two specific event types and in which state each of them happened?
You can pull storm events with the first `EventType` and the second `EventType`, and then join the two sets on `State`:
```kusto
StormEvents
| where EventType == "Lightning"
| join (
    StormEvents 
    | where EventType == "Avalanche"
) on State  
| distinct State
```
:::image type="content" source="media/tutorial/join-events-lightning-avalanche.png" alt-text="Screenshot that shows joining the events lightning and avalanche.":::
## User session example of *join*
This section doesn't use the `StormEvents` table.
Assume you have data that includes events which mark the start and end of each user session with a unique ID.
How would you find out how long each user session lasts?
You can use `extend` to provide an alias for the two timestamps, and then compute the session duration:
```kusto
Events
| where eventName == "session_started"
| project start_time = timestamp, stop_time, country, session_id
| join ( Events
    | where eventName == "session_ended"
    | project stop_time = timestamp, session_id
    ) on session_id
| extend duration = stop_time - start_time
| project start_time, stop_time, country, duration
| take 10
```
:::image type="content" source="media/tutorial/user-session-extend.png" alt-text="Screenshot of a table of results for user session extend.":::
It's a good practice to use `project` to select just the relevant columns before you perform the join. In the same clause, rename the `timestamp` column.
## Plot a distribution
Returning to the `StormEvents` table, how many storms are there of different lengths?
```kusto
StormEvents
| extend  duration = EndTime - StartTime
| where duration > 0s
| where duration 
```kusto
StormEvents
| extend  duration = EndTime - StartTime
| where duration > 0s
| where duration 
```kusto
StormEvents
| where (InjuriesDirect > 0) and (InjuriesIndirect > 0) 
| extend Percentage = (  100 * InjuriesDirect / (InjuriesDirect + InjuriesIndirect) )
| project StartTime, InjuriesDirect, InjuriesIndirect, Percentage
```
The query removes zero count entries:
|StartTime|InjuriesDirect|InjuriesIndirect|Percentage
|---|---|---|---|
|2007-05-01T16:50:00Z|1|1|50|
|2007-08-10T21:25:00Z|7|2|77|
|2007-08-23T12:05:00Z|7|22|24|
|2007-08-23T14:20:00Z|3|2|60|
|2007-09-10T13:45:00Z|4|1|80|
|2007-12-06T08:30:00Z|3|3|50|
|2007-12-08T12:00:00Z|1|1|50|
## Assign a result to a variable: *let*
Use [let](./let-statement.md) to separate out the parts of the query expression in the preceding `join` example. The results are unchanged:
```kusto
let LightningStorms = 
    StormEvents
    | where EventType == "Lightning";
let AvalancheStorms = 
    StormEvents
    | where EventType == "Avalanche";
LightningStorms 
| join (AvalancheStorms) on State
| distinct State
```
> [!TIP]
> In Kusto Explorer, to execute the entire query, don't add blank lines between parts of the query.
> Any two statements must be separated by a semicolon.
## Combine data from several databases in a query
In the following query, the `Logs` table must be in your default database:
```kusto
Logs | where ...
```
To access a table in a different database, use the following syntax:
```kusto
database("db").Table
```
For example, if you have databases named `Diagnostics` and `Telemetry` and you want to correlate some of the data in the two tables, you might use the following query (assuming `Diagnostics` is your default database):
```kusto
Logs | join database("Telemetry").Metrics on Request MachineId | ...
```
Use this query if your default database is `Telemetry`:
```kusto
union Requests, database("Diagnostics").Logs | ...
```
The preceding two queries assume that both databases are in the cluster you're currently connected to. If the `Telemetry` database was in a cluster named *TelemetryCluster.kusto.windows.net*, to access it, use this query:
```kusto
Logs | join cluster("TelemetryCluster").database("Telemetry").Metrics on Request MachineId | ...
```
> [!NOTE]
> When the cluster is specified, the database is mandatory.
For more information about combining data from several databases in a query, see [cross-database queries](cross-cluster-or-database-queries.md).
## Related content
* View code samples for the [Kusto Query Language](samples.md?pivots=azuredataexplorer).