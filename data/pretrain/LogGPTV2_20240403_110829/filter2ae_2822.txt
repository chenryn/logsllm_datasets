# 内核漏洞利用轻松学系列预告

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 为什么学习内核漏洞利用？
如果你希望在操作系统上拥有最高权限，并能够执行以下操作：
1. 获取NT权限（系统最高权限）。
2. 制作Rootkit（隐藏进程、网络流量等），维持系统权限。
3. 关闭杀毒软件。
4. 截获聊天信息。
5. 开发远程Exploit。

那么，学习内核漏洞利用将是你的最佳选择。

## 如何学习？
该系列文章将通过以下四个步骤来讲解内核漏洞知识：
1. 漏洞复现
2. 漏洞原理
3. 利用代码
4. 修复方式或防护措施

我们将使用HEVD驱动（HackSysExtremeVulnerableDriver）作为示例程序，它是一个存在多个漏洞的驱动程序。通过这个驱动程序，我们可以学习一系列漏洞的触发原因及修复方法。

## 系列内容
1. 内核漏洞利用轻松学系列之-环境配置
2. 内核漏洞利用轻松学系列之-操作系统知识
3. 内核漏洞利用轻松学系列之-驱动入门知识
4. 内核漏洞利用轻松学系列之-Stack Overflow 栈溢出漏洞
5. 内核漏洞利用轻松学系列之-Stack Overflow GS 栈溢出漏洞
6. 内核漏洞利用轻松学系列之-Double Fetch 双重获取漏洞(竞争条件)
7. 内核漏洞利用轻松学系列之-Use After Free 释放重用
8. 内核漏洞利用轻松学系列之-Type Confusion 类型混淆
9. 内核漏洞利用轻松学系列之-Integer Overflow 整数溢出
10. 内核漏洞利用轻松学系列之-Pool Overflow 池溢出
11. 内核漏洞利用轻松学系列之-Null Pointer Dereference 空指针解引用
12. 内核漏洞利用轻松学系列之-Arbitrary Memory Overwrite 任意写
13. 内核漏洞利用轻松学系列之-Insecure Kernel File Access
14. 内核漏洞利用轻松学系列之-Uninitialized Heap Variable 未初始化堆变量
15. 内核漏洞利用轻松学系列之-Uninitialized Stack Variable 未初始化栈变量
16. 内核漏洞利用轻松学系列之-32位到64位利用代码转换
17. 内核漏洞利用轻松学系列之-防护技术总结

## 资源
- HackSysExtremeVulnerableDriver (hacksysteam) – [此处](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver "此处")
- VirtualKD – [此处](http://virtualkd.sysprogs.org/ "此处")
- VirtualKD-Redux（适用于VMware 15.5）– [此处](https://github.com/4d61726b/VirtualKD-Redux "此处")
- OSR驱动加载器 – [此处](https://www.osronline.com/article.cfm?article=157 "此处")
- WINDBG – [此处](https://down.52pojie.cn/Tools/Disassemblers/%22%E6%AD%A4%E5%A4%84%22)
- VMware 15.5 + Windows 7 SP1 32-bit – [Vmware下载](https://www.vmware.com/go/downloadworkstation-cn "此处") [Windows 7 SP1 下载](https://msdn.itellyou.cn/ "此处")
- VMware 15.5 + Windows 10 + Visual Studio 2019 + WDK 10 – [WDK下载](https://www.vmware.com/go/downloadworkstation-cn "此处") [Windows 10 下载](https://msdn.itellyou.cn/ "此处")

## 环境搭建
1. 安装 VMware 15.5。
2. 在 VMware 上安装 Windows 7 SP1 32-bit。
3. 将 VirtualKD 的 target 文件复制到目标机器，并运行 `vminstall.exe` 安装 VirtualKD。安装完成后，界面应如下图所示。
4. 在 VMware 上安装 Windows 10 + WDK 10 + SDK。确保 WDK 和 SDK 版本兼容（例如，均为 10.0.19041.0）。从 Windows Vista 开始，所有 64 位版本的 Windows 都需要对驱动程序进行数字签名。
5. 在物理机上安装 Windbg。
6. 打开物理机上的 VirtualKD，界面应如下图所示。
7. 在 VirtualKD 中设置 debugger path 为刚刚安装的 Windbg 程序路径。注意 Windbg 和操作系统的位数要一致。
8. 重启 Windows 7 SP1，系统会卡在登录界面。在物理机的 VirtualKD 中点击 "Run Debugger"。此时，Windbg 会在物理机上打开并连接到 Windows 7 SP1。
9. 在 Windows 10 上编译 HEVD.sys。打开项目目录 `\Driver\HEVD\Windows\HEVD.sln`，并在编译前设置以下项目属性：
   - 右键 -> 属性 -> C/C++ -> 警告等级 -> 设置为等级 3 (/W3)
   - 将警告视为错误 -> 改为 否 (/WX-)
   - 代码生成 -> 安全检查 -> 改为 禁用安全检查 (/GS-)
   - 链接器 -> 将链接器警告视为错误 -> 改为 否 (/WX:NO)
10. 将编译好的 HEVD.sys 复制到 Windows 7 SP1，并使用 OSR 驱动加载器分别点击 "Register" 和 "Start Service"。
11. 在 Windbg 中使用 `lm` 命令查看成功加载的 HEVD 驱动。
12. 在 Windows 10 上编译 `Exploit\HackSysEVDExploit.sln`。编译前设置以下项目属性：
    - C/C++ -> 代码生成 -> 运行时库 -> 改为多线程调试 (/MTd)，这样可以将所需的链接库一起打包到程序中，避免因缺少依赖库而提示错误。

## 实战开始
1. 在目标机器上运行 `HackSysEVDExploit.exe -u -c cmd.exe`，成功获取 NT 最高权限。是不是很刺激？接下来请继续阅读后续章节，开启你的内核 Exp 之旅！