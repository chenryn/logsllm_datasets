```
$ helm repo add $REPO_NAME $REPO_URL
```
为了安装在其中管理的图表，需要添加图表存储库。图表安装将在本书中详细讨论。
您可以通过利用`repo list`子命令来确认存储库是否已成功添加:
```
$ helm repo list
NAME 	      URL                 	 
bitnami         https://charts.bitnami.com
```
已添加到 Helm 客户端的存储库将出现在此输出中。前面的例子显示`bitnami`存储库被添加，因此它出现在 Helm 客户端已知的存储库列表中。如果添加了额外的存储库，它们也会出现在这个输出中。
随着时间的推移，图表的更新将发布到这些存储库中。存储库元数据缓存在本地。因此，当图表更新时，Helm 不会自动察觉。通过运行`repo update`子命令，您可以指示 Helm 检查每个添加的存储库的更新。执行此命令后，您将能够安装每个存储库中的最新图表:
```
$ helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the 'bitnami' chart repository
Update Complete. Happy Helming!
```
您可能还需要删除以前添加的存储库。这可以通过使用`repo` `remove`子命令来完成:
```
$ helm repo remove bitnami
'bitnami' has been removed from your repositories
```
最后剩下的`repo`子命令形式是`index`。存储库和图表维护者使用该子命令发布新的或更新的图表。这个任务将在 [*第 5 章*](05.html#_idTextAnchor265)*构建你的第一个舵轮图*中更广泛地介绍。
接下来，我们将讨论 Helm 插件配置。
## 添加插件
插件是附加功能，可用于向 Helm 提供附加功能。大多数用户用 Helm 就不用担心插件和插件管理了。Helm 本身是一个强大的工具，它承诺开箱即用的功能是完整的。也就是说，Helm 社区维护着各种不同的插件，可以用来增强 Helm 的能力。这些插件的列表可以在[https://helm.sh/docs/community/related/](https://helm.sh/docs/community/related/)找到。
Helm 提供了一个`plugin`子命令来管理插件，插件包含更多的子命令，如下表所述:
![](img/011.jpg)
插件可以提供各种不同的生产力增强。
以下是上游插件的几个例子:
*   `helm diff`:在部署的版本和建议的 Helm 升级之间执行差异
*   `helm secrets`:用于帮助隐藏 Helm 图表的机密
*   `helm monitor`:用于监控发布，如果发生某些事件，则执行回滚
*   `helm unittest`:用于在 Helm 图表上执行单元测试
我们将通过回顾不同的环境变量来继续讨论 Helm 配置选项，这些环境变量可以设置为改变 Helm 行为的各个方面。
## 环境变量
Helm 依靠外部化变量的存在来配置低级选项。Helm 文档列出了用于配置 Helm 的六个主要环境变量:
*   **XDG _ 缓存 _ 主页**:设置存储缓存文件的替代位置
*   **XDG _ 配置 _ 主页**:设置存储头盔配置的替代位置
*   **XDG _ 数据 _ 主页**:设置存储头盔数据的替代位置
*   **HELM_DRIVER** :设置后端存储驱动
*   **HELM_NO_PLUGINS** :禁用插件
*   **kubeeconfig**:设置替代的 Kubernetes 配置文件
Helm 遵循 **XDG 基本目录规范**，该规范旨在提供一种标准化的方式来定义不同文件在操作系统文件系统中的位置。基于 XDG 规范，Helm 根据需要在每个操作系统上自动创建三个不同的默认目录:
![](img/02.jpg)
Helm 将**缓存路径**用于从上游图表库下载的图表。已安装的图表会缓存到本地计算机，以便下次引用时能够更快地安装图表。要更新缓存，用户可以运行`helm repo update`命令，该命令将使用最新的可用信息刷新存储库元数据，并将图表保存到本地缓存中。
**配置路径**用于保存通过运行`helm repo add`命令添加的存储库信息。当安装了尚未缓存的图表时，Helm 使用配置路径来查找图表存储库的 URL。Helm 使用该网址来了解图表所在的位置，以便下载。
**数据路径**用于存储插件。当使用`helm plugin install`命令安装插件时，插件数据存储在这个位置。
关于我们之前详述的其余环境变量，`HELM_DRIVER`用于确定发布状态如何存储在 Kubernetes 中。默认值为`secret`，也是推荐值。`Secret`将以 Kubernetes**机密**对状态进行 Base64 编码。其他选项是`configmap`，它将以明文形式存储状态；以及`memory`，它将状态存储在本地进程的内存中。本地内存的使用旨在用于测试目的，不适用于通用或生产环境。
`HELM_NO_PLUGINS`环境变量用于禁用插件。如果取消设置，保持插件启用的默认值为`0`。要禁用插件，变量应该设置为`1`。
`KUBECONFIG`环境变量用于将用于身份验证的文件设置到 Kubernetes 集群。如果不设置，默认值为`~/.kube/config`。在大多数情况下，用户不需要修改这个值 ue。
Helm 可以配置的另一个组件是选项卡完成，接下来将讨论。
## 选项卡完成
Bash 和 Z shell 用户可以启用选项卡完成来简化 Helm 的使用。当按下*选项卡*键时，选项卡完成允许 Helm 命令自动完成，允许用户更快地执行任务，并有助于防止输入错误。
这类似于大多数现代终端仿真器的默认行为。当按下*选项卡*键时，终端试图通过观察命令和环境的状态来猜测下一个参数需要什么。例如，`cd /usr/local/b`输入可以在 Bash shell 中 tab-complete 到`cd /usr/local/bin`。类似地，诸如`helm upgrade hello-`之类的输入可以通过 tab 键完成，从而读取`helm upgrade hello-world`。
可以通过运行以下命令来启用选项卡完成:
```
$ source <(helm completion $SHELL)
```
`$SHELL`变量必须是`bash`或`zsh`。请注意，自动完成将只存在于运行上述命令的终端窗口中，因此其他窗口也需要运行此命令来体验自动完成有限元分析功能。
## 认证
Helm 需要能够通过 Kubernetes 集群进行身份验证，以便部署和管理应用。它通过引用`kubeconfig`文件进行身份验证，该文件指定了不同的 Kubernetes 集群以及如何针对它们进行身份验证。
在阅读本书时使用 Minikube 的人不需要配置身份验证，因为 Minikube 会在每次创建新集群时自动配置一个`kubeconfig`文件。然而，那些没有运行 Minikube 的人可能需要创建一个`kubeconfig`文件或者提供一个，这取决于你正在使用的 Kubernetes 发行版。
利用三个不同的`kubectl`命令可以创建一个`kubeconfig`文件:
*   The first command is `set-cluster`:
    ```
    kubectl config set-cluster
    ```
    `set-cluster`命令将在`kubeconfig`文件中定义一个`cluster`条目。它确定 Kubernetes 集群的主机名或 IP 地址，以及它的证书颁发机构。
*   The next command is `set-credentials`:
    ```
    kubectl config set-credentials
    ```
    `set-credentials`命令将定义用户的名称及其身份验证方法和详细信息。此命令可以配置用户名和密码对、客户端证书、承载令牌或身份验证提供程序，以允许用户和管理员指定不同的身份验证方法。
*   Then, we have the `set-context` command:
    ```
    kubectl config set-context
    ```
    `set-context`命令用于将凭证与集群相关联。一旦建立了凭据和群集之间的关联，用户将能够使用凭据的身份验证方法向指定的群集进行身份验证。
`kubectl config view`命令可用于查看`kubeconfig`文件。注意`kubeconfig`的`clusters`、`contexts`和`user`小节如何对应于前面描述的命令，如图所示:
```
$ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority: /home/helm-user/.minikube/ca.crt
    server: https://192.168.99.102:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /home/helm-user/.minikube/client.crt
    client-key: /home/helm-user/.minikube/client.key
```
一旦存在有效的 kubeconfig 文件，Kubectl 和 Helm 将能够与 Kubernetes 集群进行交互。
在下一节中，我们将讨论如何针对 Kubernetes 集群处理授权。
## 授权/RBAC
认证是一种确认身份的手段，而授权则定义了被认证用户被允许执行的动作。Kubernetes 使用**基于角色的访问控制** ( **RBAC** )对 Kubernetes 执行授权。RBAC 是一个设计角色和权限的系统，可以分配给给定的用户或用户组。允许用户在 Kubernetes 上执行的操作取决于用户被分配的角色。
Kubernetes 在平台上提供了许多不同的角色。这里列出了三个常见角色:
*   `cluster-admin`:允许用户对集群中的任何资源执行任何操作
*   `edit`:允许用户读写一个名称空间或 Kubernetes 资源的逻辑分组内的大多数资源
*   `view`:阻止用户修改已有资源，只允许用户读取命名空间内的资源
由于 Helm 使用`kubeconfig`文件中定义的凭据向 Kubernetes 进行身份验证，因此 Helm 被赋予了与文件中定义的用户相同的访问级别。如果`edit`访问被启用，在大多数情况下，可以假设 Helm 有足够的权限安装应用。对于仅查看访问，Helm 将无法安装应用，因为此级别的访问是只读的。
运行 Minikube 的用户在集群创建后默认给出`cluster-admin`。虽然这不是生产环境中的最佳实践，但对于学习和实验来说是可以接受的。运行 Minikube 的人不必担心配置授权，以便遵循本书中提供的概念和示例。那些使用其他 Kubernetes 集群而不是 Minikube 的人需要确保他们至少被赋予编辑角色，以便能够使用 Helm 部署大多数应用。这可以通过要求管理员运行以下命令来完成:
```
$ kubectl create clusterrolebinding $USER-edit --clusterrole=edit --user=$USER
```
当我们更详细地讨论与安全相关的概念时，将在第 9 章[](09.html#_idTextAnchor416)**中讨论 RBAC 的最佳实践，包括如何适当地应用角色来防止集群中的错误或恶意意图。**
 *# 总结
要开始使用 Helm，您需要有各种不同的组件。在本章中，您学习了如何安装 Minikube 来提供一个本地 Kubernetes 集群，该集群可以在本书中使用。您还学习了如何安装 Kubernetes，这是与 Kubernetes API 交互的官方工具。最后，您学习了如何安装 Helm 客户端，并探索了可以配置 Helm 的各种方法，包括添加存储库和插件、修改环境变量、启用选项卡完成以及针对 Kubernetes 集群配置身份验证和授权。
现在您已经安装了必备工具，您可以开始学习如何使用 Helm 部署您的第一个应用。在下一章中，您将从上游图表存储库中安装一个 Helm 图表，并了解生命周期管理和应用配置。完成本章后，您将了解 Helm 如何充当 Kubernetes 的包管理器。
# 进一步阅读
查看以下链接，了解更多关于 Minikube、Kubectl 和 Helm 可用安装选项的信息:
*   mini kube:t0]https://kubrites . io/docs/tasks/tools/install-mini kube/
*   忽必烈:[https://忽必烈. io/docs/tasks/tools/install-忽必烈/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
*   掌舵人:[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)
我们介绍了安装后配置 Helm 的各种不同方法。查看以下链接，了解有关以下主题的更多信息:
*   仓库管理:[https://helm . sh/docs/intro/quick start/# initialize-a-helm-chart-仓库](https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository)
*   Plugi [n 管理:https://helm.sh/docs/t](https://helm.sh/docs/topics/plugins/)opics/plugins/
*   环境变量和`helm help`输出:[https://helm.sh/docs/helm/helm/](https://helm.sh/docs/helm/helm/)
*   制表符结束:[https://helm.sh/docs/helm/helm_completion/](https://helm.sh/docs/helm/helm_completion/)
*   通过`kub` [`econfig`文件进行认证和授权:https://kubernetes . io/docs/tasks/access-application-cluster/configure-access-mult](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)iple-clusters/
# 问题
1.  你能列出你可以用来安装 Helm 客户端的各种方法吗？
2.  Helm 如何向 Kubernetes 集群进行身份验证？
3.  有什么机制向 Helm 客户端提供授权？管理员如何管理这些权限？
4.  `helm repo add`命令的目的是什么？
5.  Helm 使用的三个 XDG 环境变量是什么？他们的目的是什么？
6.  为什么 Minikube 是学习如何使用 Kubernetes 和 Helm 的好选择？Minikube 会自动为用户配置什么，让他们更快地开始使用？*