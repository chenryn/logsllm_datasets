### 管道化连接的限制

管道化连接在HTTP中有一些重要的限制，必须注意以下几点：

1. **确认持久连接**：如果客户端无法确定连接是持久的，就不应该使用管道化请求。
2. **响应顺序**：HTTP响应必须按照请求的顺序返回。由于HTTP报文中没有序列号标签，如果响应失序，将无法与请求匹配。
3. **连接关闭处理**：客户端必须准备好在任意时刻处理连接关闭，并能够重发所有未完成的管道化请求。例如，如果客户端在一个持久连接上发送了10个请求，而服务器只处理了5个请求后关闭连接，剩下的5个请求将失败，客户端需要重新发送这些请求。
4. **避免副作用请求**：不应使用管道化方式发送会产生副作用的请求（如POST）。因为出错时，管道化方式会阻碍客户端了解哪些请求已被执行。非幂等请求（如POST）在出错时不能安全地重试，存在某些方法永远不会被执行的风险。

### 连接管理

#### 4.7 关闭连接的奥秘

连接管理，特别是知道何时以及如何关闭连接，是HTTP中的一个重要且复杂的问题。以下是关于连接关闭的一些关键点：

##### 4.7.1 “任意”解除连接

所有HTTP客户端、服务器或代理都可以在任意时刻关闭一条TCP传输连接。通常会在一条报文结束时关闭连接，但在出错时，也可能在首部行的中间或其他地方关闭连接。对于管道化持久连接，这种情形较为常见。服务器可能在空闲一段时间后关闭持久连接，但此时客户端可能正在发送数据，导致写入半截请求时报错。

##### 4.7.2 Content-Length及截尾操作

每条HTTP响应都应包含精确的Content-Length首部，描述响应主体的尺寸。一些旧的HTTP服务器可能会省略或包含错误的长度指示，依赖于连接关闭来表示数据的真实末尾。如果实际传输的实体长度与Content-Length不匹配（或没有Content-Length），接收端应质疑长度的正确性。缓存代理不应缓存此类响应，以防止潜在的错误报文混合。代理应原封不动地转发有问题的报文，而不试图“校正”Content-Length，以维护语义透明性。

##### 4.7.3 连接关闭容限、重试以及幂等性

即使在非错误情况下，连接也可能在任意时刻关闭。HTTP应用程序应准备好正确处理非预期关闭。如果在事务处理过程中连接关闭，除非事务有副作用，否则客户端应重新打开连接并重试。对于管道化连接，这种情况更为严重。客户端可以将大量请求放入队列中，但如果服务器关闭连接，将留下大量未处理的请求，需要重新调度。

幂等性是一个重要问题。如果一个事务无论执行一次还是多次结果都相同，则该事务是幂等的。GET、HEAD、PUT、DELETE、TRACE和OPTIONS方法都是幂等的。客户端不应以管道化方式传送非幂等请求（如POST），否则传输连接的过早终止会导致不确定后果。要发送非幂等请求，需等待前一个请求的响应状态。尽管用户代理可能会让操作员选择是否重试请求，但一定不能自动重试非幂等方法或序列。

##### 4.7.4 正常关闭连接

TCP连接是双向的，每一端都有输入和输出队列。应用程序可以关闭TCP输入和输出信道中的任意一个，或者两者都关闭。完全关闭通过调用`close()`实现，半关闭通过调用`shutdown()`实现。简单的HTTP应用程序可以只使用完全关闭，但在使用管道化持久连接时，使用半关闭来防止对等实体收到非预期的写入错误变得重要。

总之，关闭连接的输出信道总是安全的，另一端会在读取完所有数据后收到流结束的通知。关闭输入信道较危险，除非你知道另一端不再发送数据。如果另一端向已关闭的输入信道发送数据，操作系统会回送TCP“连接被对端重置”的报文，这可能导致缓冲区中的数据丢失。

HTTP规范建议正常关闭连接时，首先关闭输出信道，然后等待对端关闭其输出信道。如果对端在一定时间内未关闭输入信道，应用程序可以强制关闭连接以节省资源。

### 更多信息

更多有关TCP性能和HTTP连接管理的内容，请参考以下资源：

- **HTTP连接**
  - [RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)：HTTP/1.1的官方规范，解释了并行、持久和管道式HTTP连接的使用。
  - [RFC 2068](http://www.ietf.org/rfc/rfc2068.txt)：HTTP/1.1协议的1997年版本，包含对HTTP/1.0+ keep-alive连接的解释。
  - [HTTP Connection Management](http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-connection-00.txt)：探讨了HTTP连接管理面临的问题。

- **HTTP性能问题**
  - [HTTP Performance Overview](http://www.w3.org/Protocols/HTTP/Performance/)：包含几篇与HTTP性能和连接管理有关的文章和工具。
  - [Analysis of HTTP Performance Problems](http://www.w3.org/Protocols/HTTP/1.0/HTTPPerformance.html)：早期对HTTP连接性能进行评估的文献之一。
  - [The Case for Persistent-Connection HTTP](ftp://gatekeeper.dec.com/pub/DEC/WRL/research-reports/WRL-TR-95.4.pdf)：持久连接HTTP的实例。
  - [Performance Interactions Between P-HTTP and TCP](http://www.isi.edu/lsam/publications/phttp_tcp_interactions/paper.html)：P-HTTP和TCP实现之间的性能交互。
  - [TCP Slow Start Tuning for Solaris](http://www.sun.com/sun-on-net/performance/tcp.slowstart.html)：介绍TCP慢启动的实际影响。

- **TCP/IP**
  - W. Richard Stevens的书籍：
    - [《TCP详解，卷1：协议》](https://www.awprofessional.com/)
    - [《UNIX网络编程，卷1：套接字联网API（第3版）》](https://www.pearson.com/)
    - [《UNIX网络编程，卷2：进程间通信（第2版）》](https://www.pearson.com/)

- **相关文章和规范**
  - [Rethinking the TCP Nagle Algorithm](http://www.acm.org/sigcomm/ccr/archive/2001/jan01/ccr-200101-mogul.pdf)：提出Nagle算法的现代视角。
  - [RFC 2001](http://www.ietf.org/rfc/rfc2001.txt)：TCP慢启动、避免拥塞、快速重传以及快速恢复算法。

希望这些优化后的文本能更清晰、连贯和专业。