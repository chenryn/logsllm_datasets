对管道化连接有几条限制。
• 如果HTTP客户端无法确认连接是持久的，就不应该使用管道。
• 必须按照与请求相同的顺序回送HTTP响应。HTTP报文中没有序列号标签，因
此如果收到的响应失序了，就没办法将其与请求匹配起来了。
• HTTP客户端必须做好连接会在任意时刻关闭的准备，还要准备好重发所有未完
成的管道化请求。如果客户端打开了一条持久连接，并立即发出了10条请求， 99
服务器可能在只处理了，比方说，5条请求之后关闭连接。剩下的5条请求会失败，
客户端必须能够应对这些过早关闭连接的情况，重新发出这些请求。
• HTTP客户端不应该用管道化的方式发送会产生副作用的请求（比如POST）。总
之，出错的时候，管道化方式会阻碍客户端了解服务器执行的是一系列管道化请
求中的哪一些。由于无法安全地重试POST这样的非幂等请求，所以出错时，就
存在某些方法永远不会被执行的风险。 100
连接管理 ｜ 105
(a) 串行连接
事务1 事务2 事务3 事务4
1 响 2 响 3 响 4 响
服务器 求 应 求 应 求 应 求 应
请 请 请 请
1 2 3 4
连接1 连接2 连接3 连接4 时间
客户端
(b) 持久连接
事务1 事务2 事务3 事务4
1 响 2 响 3 响 4 响
服务器 求 求 求 求
应 应 应 应
请 请 请 请
1 2 3 4
时间
客户端
(c) 管道化持久连接
服务器 求1 求2 响 求3响 求4响响
应应 应应
请 请 请 请
12 34
事务1 时间
事务2
客户端
事务3
事务4
图4-18 4个事务（管道化连接）
4.7 关闭连接的奥秘
连接管理——尤其是知道在什么时候以及如何去关闭连接——是HTTP的实用魔法之
一。这个问题比很多开发者起初意识到的复杂一些，而且没有多少资料涉及这个问题。
4.7.1 “任意”解除连接
所有HTTP客户端、服务器或代理都可以在任意时刻关闭一条TCP传输连接。通常
会在一条报文结束时关闭连接，18但出错的时候，也可能在首部行的中间，或其他
106 ｜ 第4章
奇怪的地方关闭连接。
对管道化持久连接来说，这种情形是很常见的。HTTP应用程序可以在经过任意一
段时间之后，关闭持久连接。比如，在持久连接空闲一段时间之后，服务器可能会
决定将其关闭。
但是，服务器永远都无法确定在它关闭“空闲”连接的那一刻，在线路那一头的客
户端有没有数据要发送。如果出现这种情况，客户端就会在写入半截请求报文时发
现出现了连接错误。
4.7.2 Content-Length及截尾操作
每条HTTP响应都应该有精确的Content-Length首部，用以描述响应主体的尺
寸。一些老的HTTP服务器会省略Content-Length首部，或者包含错误的长度指
示，这样就要依赖服务器发出的连接关闭来说明数据的真实末尾。
客户端或代理收到一条随连接关闭而结束的HTTP响应，且实际传输的实体长度与
Content-Length并不匹配（或没有Content-Length）时，接收端就应该质疑长
度的正确性。
如果接收端是个缓存代理，接收端就不应该缓存这条响应（以降低今后将潜在的错
误报文混合起来的可能）。代理应该将有问题的报文原封不动地转发出去，而不应该
试图去“校正”Content-Length，以维护语义的透明性。
4.7.3 连接关闭容限、重试以及幂等性
即使在非错误情况下，连接也可以在任意时刻关闭。HTTP应用程序要做好正确处
理非预期关闭的准备。如果在客户端执行事务的过程中，传输连接关闭了，那么，
除非事务处理会带来一些副作用，否则客户端就应该重新打开连接，并重试一次。
对管道化连接来说，这种情况更加严重一些。客户端可以将大量请求放入队列中排 101
队，但源端服务器可以关闭连接，这样就会留下大量未处理的请求，需要重新调度。
副作用是很重要的问题。如果在发送出一些请求数据之后，收到返回结果之前，连
接关闭了，客户端就无法百分之百地确定服务器端实际激活了多少事务。有些事务，
比如GET一个静态的HTML页面，可以反复执行多次，也不会有什么变化。而其
他一些事务，比如向一个在线书店POST一张订单，就不能重复执行，不然会有下
多张订单的危险。
注18： 除非服务器怀疑出现了客户端或网络故障，否则就不应该在请求的中间关闭连接。
连接管理 ｜ 107
如果一个事务，不管是执行一次还是很多次，得到的结果都相同，这个事务就是幂
等的。实现者们可以认为GET、HEAD、PUT、DELETE、TRACE和OPTIONS方
法都共享这一特性。19客户端不应该以管道化方式传送非幂等请求（比如POST）。
否则，传输连接的过早终止就会造成一些不确定的后果。要发送一条非幂等请求，
就需要等待来自前一条请求的响应状态。
尽管用户Agent代理可能会让操作员来选择是否对请求进行重试，但一定不能自动
重试非幂等方法或序列。比如，大多数浏览器都会在重载一个缓存的POST响应时
提供一个对话框，询问用户是否希望再次发起事务处理。
4.7.4 正常关闭连接
如图4-19所示，TCP连接是双向的。TCP连接的每一端都有一个输入队列和一个
输出队列，用于数据的读或写。放入一端输出队列中的数据最终会出现在另一端的
输入队列中。
输入 输出
输出 输入
客户端 服务器
图4-19 TCP连接是双向的
1. 完全关闭与半关闭
应用程序可以关闭TCP输入和输出信道中的任意一个，或者将两者都关闭了。套
102 接字调用close()会将TCP连接的输入和输出信道都关闭了。这被称作“完全关
闭”，如图4-20a所示。还可以用套接字调用shutdown()单独关闭输入或输出信
道。这被称为“半关闭”，如图4-20b所示。
2. TCP关闭及重置错误
简单的HTTP应用程序可以只使用完全关闭。但当应用程序开始与很多其他类型的
HTTP客户端、服务器和代理进行对话且开始使用管道化持久连接时，使用半关闭
来防止对等实体收到非预期的写入错误就变得很重要了。
注19： 基于GET构建动态表单的管理者们要确保这些表单是幂等的。
108 ｜ 第4章
(a)服务器完全关闭
输入 输出
输出 输入
客户端 服务器
(b)服务器输出信道半关闭（正常关闭）
输入 输出
输出 输入
客户端 服务器
(c)服务器输入信道半关闭
输入 输出
输出 输入
客户端 服务器
图4-20 完全关闭和半关闭
总之，关闭连接的输出信道总是很安全的。连接另一端的对等实体会在从其缓冲区
中读出所有数据之后收到一条通知，说明流结束了，这样它就知道你将连接关闭了。
关闭连接的输入信道比较危险，除非你知道另一端不打算再发送其他数据了。如果
另一端向你已关闭的输入信道发送数据，操作系统就会向另一端的机器回送一条
TCP“连接被对端重置”的报文，如图4-21所示。大部分操作系统都会将这种情况
作为很严重的错误来处理，删除对端还未读取的所有缓存数据。对管道化连接来说，
这是非常糟糕的事情。
重置
输入 输出
输出 输入
客户端 服务器
图4-21 将数据传送到已关闭连接时会产生“连接被对端重置”错误
比如你已经在一条持久连接上发送了10条管道式请求了，响应也已经收到了，正
在操作系统的缓冲区中存着呢（但应用程序还未将其读走）。现在，假设你发送了
第11条请求，但服务器认为你使用这条连接的时间已经够长了，决定将其关闭。那
么你的第11条请求就会被发送到一条已关闭的连接上去，并会向你回送一条重置信
息。这个重置信息会清空你的输入缓冲区。 103
连接管理 ｜ 109
当你最终要去读取数据的时候，会得到一个连接被对端重置的错误，已缓存的未读
响应数据都丢失了，尽管其中的大部分都已经成功抵达你的机器了。
3. 正常关闭
HTTP规范建议，当客户端或服务器突然要关闭一条连接时，应该“正常地关闭传
输连接”，但它并没有说明应该如何去做。
总之，实现正常关闭的应用程序首先应该关闭它们的输出信道，然后等待连接另一
端的对等实体关闭它的输出信道。当两端都告诉对方它们不会再发送任何数据（比
如关闭输出信道）之后，连接就会被完全关闭，而不会有重置的危险。
但不幸的是，无法确保对等实体会实现半关闭，或对其进行检查。因此，想要正常
关闭连接的应用程序应该先半关闭其输出信道，然后周期性地检查其输入信道的状
态（查找数据，或流的末尾）。如果在一定的时间区间内对端没有关闭输入信道，应
用程序可以强制关闭连接，以节省资源。
4.8 更多信息
到这里我们对HTTP通道事务处理的介绍就结束了。更多有关TCP性能和HTTP连
接管理功能的内容请参见下列参考资源。
4.8.1 HTTP连接
• http://www.ietf.org/rfc/rfc2616.txt
RFC 2616，“超文本传输协议——HTTP/1.1”是HTTP/1.1的官方规范；解释了
104 并行、持久和管道式HTTP连接的使用，以及用于实现这些连接的HTTP首部字
段。此文档并未涵盖对底层TCP连接的正确使用。
• http://www.ietf.org/rfc/rfc2068.txt
RFC 2068是HTTP/1.1协议的1997年的版本。其中包含了RFC 2616中没有的、
对HTTP/1.0+ keep-alive连接的解释。
• http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-connection-00.txt
这个过期的因特网草案“HTTP Connection Management”，（“HTTP连接管理”）
探讨了HTTP连接管理面临的问题。
4.8.2 HTTP性能问题
• http://www.w3.org/Protocols/HTTP/Performance/
110 ｜ 第4章
这个名为“HTTP Performance Overview”（“HTTP性能概览”）的W3C Web页
面包含了几篇与HTTP性能和连接管理有关的文章和一些工具。
• http://www.w3.org/Protocols/HTTP/1.0/HTTPPerformance.html
这个由Simon Spero制作的简短备忘录“Analysis of HTTP Performance Proble-
ms”(“HTTP性能问题分析”)是最早（1994年）对HTTP连接性能进行评估的
文献之一。对早期由于缺乏连接建立、慢启动和连接共享所造成的影响进行了一
些性能测试，这个备忘录给出了一些测试结果。
• ftp://gatekeeper.dec.com/pub/DEC/WRL/research-reports/WRL-TR-95.4.pdf
“The Case for Persistent-Connection HTTP.”（“持久连接HTTP的实例。”）
• http://www.isi.edu/lsam/publications/phttp_tcp_interactions/paper.html
“Performance Interactions Between P-HTTP and TCP”Implementations（“P-HTTP
和TCP实现之间的性能交互”）。
• http://www.sun.com/sun-on-net/performance/tcp.slowstart.html
“TCP Slow Start Tuning for Solaris”（“Solaris的TCP慢启动调试”）是Sun微系
统公司的一个Web页面，介绍了TCP慢启动带来的一些实际的影响。即使工作
在不同的操作系统上，读一读这份资料也是有所帮助的。
4.8.3 TCP/IP
下面三本W. Richard Stevens的书都非常棒，详细介绍了TCP/IP的工程问题。对使
用TCP的人来说尤其有用：
• TCP Illustrated, Volume 1: The Protocols20（《TCP详解，卷1：协议》）
W. Richard Stevens，Addison Wesley公司出版。
• UNIX Network Programming, Volume 1: Networking APIs21（《UNIX 网络编程，
卷1：套接字联网API（第3版）》）
W. Richard Stevens，Prentice-Hall公司出版。
• UNIX Network Programming, Volume 2: The Implementation22（《UNIX网络编程，
卷2：进程间通信（第2版）》）
W. Richard Stevens，Prentice-Hall公司出版。 105
注20： 本书影印版已由人民邮电出版社出版。（编者注）
注21~22： 两本书中文版已由人民邮电出版社出版。（编者注）
连接管理 ｜ 111
下面的文章和规范介绍了TCP/IP及影响其性能的特性。其中有些规范已经有20多年
的历史了，鉴于TCP/IP在全球范围内的成功，很可能已经可以将其归为历史宝藏了。
• http://www.acm.org/sigcomm/ccr/archive/2001/jan01/ccr-200101-mogul.pdf
在“Rethinking the TCP Nagle Algorithm”（“对TCP Nagle算法的反思”）一文
中，Jeff Mogul和Greg Minshall提出了Nagle算法的一种现代视角，概括了哪
些应用程序应该，哪些不应该使用这个算法，并提出了几条改进意见。
• http://www.ietf.org/rfc/rfc2001.txt
RFC 2001，“TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast
Recovery Algorithms”（“TCP慢启动、避免拥塞、快速重传以及快速恢复算法”）