do
's/socket=//g'`
-mysqldlgrep
-V
size,@@gtid
grep
awk
mode,@@datadir,
-F'--!
'{for
---
## Page 115
可读还可逆的，我们其实可以再加入一些复杂的因子来干扰。
码，
加密后的密码又被加密了。对文件加密有 shell 的方式还有使用 Python 等语言。
码的概率要低一些。
是内容中的密码还是可读的。
的环境配置。所以需求二的特点就是手工维护密码啰嗦，手工输入密码太原始。
你会发现这种操作真是原始，高级一点，用下 keypass 或者keepass 等，这个还得依赖于本地
但是密码很复杂。我们不能输入明文，那么就输入密码格式，那就意味着交互和手动输入，
很尴尬了。这是需求一。
密码的时候你别看，
还有一种场景，如果我们有大量的MySQL环境，每个环境的DBA账户密码是统一的，
所以这也算是一个风险点的入口，如果因为一些意外的情况登录，那么这种情况就
另外一类就是对文件加密，比如对整个文件加密，加密之后文件就没法读了。所以
下解密，得到真实的密码。这个过程是在脚本里的逻辑来实现，所以我们得到明文密
比如我得到了一个加密后的密码串。调用的解密逻辑是 decrypt _passwd，当然这个是
如果要调用脚本的时候，其实就是先解密文件，然后调用解密逻辑，得到真正的密
那我们写脚本，但是脚本里面的密码还是可见的，调用的明文密码问题解决了，但
echo
echo
port=$1
decrypt_passwd $sec_password
tmp_passwd=$1 
function decrypt_passwd
sec_password='RHB6WUF1dlc5TTEzabadfo='
脚本的初步内容如下：
P
ps
echo
instance
然后开启访问的请求。
其中一种是对密码加密，比如我们得到一个密码加密后的串，
所以这种情况下，一个很自然的方法就是加密。
我们设想一下，命令行的方式中，若输入明文密码，
案例3-2：MySQL密码加密认证的简单脚本
-eflgrep mysqldlgrep -v grep Igrep -v mysqld_safe
1p=S1
，但是 history 命令里面有啊。
]；then
##
那还要密码干嘛，干脆我输入
第3章MySQL 基础运维面面观丨93
，在需要调用的时候做
---
## Page 116
94丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
容易被鄙视。
权限故障，
是导出用户看起来都没有密码，只有权限，如果稀里糊涂这么做了，
user!='
'xxx"的组合形式，不断拼接解析。
掌握几种得到权限信息的方法。
者丢失，可以认为是一个大故障，
便的访问了。
1*3DCFB64FE0CB05D63B9AF64492B5CD6269D82EE8'
·mysql.procs_priv：存放存储过程和函数级别的权限。
·mysql.columns_priv：存放列级别的权限；
·mysql.tables_priv：存放表级别的权限信息;
·mysql.db：存放数据库级别的权限信息；
·mysql.user：存放用户账户信息以及全局级别（所有数据库）权限；
在 MySQL 中的权限配置大体会涉及如下的几个数据字典表：
方法2：导出 mysql 的权限配置
GRANT ALL PRIVILEGES ON
这一招在5.5、5.6中都是可行的，但是如果数据库是5.7版本的，会有一个坑，那就
GRANT ALL PRIVILEGES ON *.* TO
运行后的语句大体是如下的形式：
如果使用脚本化完成，基本是下面这样的形式即可，本意其实就是 show grants for
所以保险起见，我们是需要导出MySQL 库的相关数据的。
不评论，
所以回到问题，如果现在要解决，大体有以下的三种方式来同步权限。
如果在 MySQL5.5、5.6的版本中，
数据库的权限是很基础的信息，对于业务来说非常敏感，
案例3-3：MySQL中如何得到权限信息
这个文件就类似一个二进制文件，我们拷贝到任何服务器端，指定入口，就可以方
这样一个简单的文件，使用 gzexe 来加密即可，就是我们预期的效果了。
方
法1：重新导出导入整个数据库
，我绝对不会这么做，只是看起来是一个完整的过程，但是无用功太多，
PRIVILEGES ON
-e
"SELECT
grep
''@'mysqlactivity'
，对于权限的管理不求有功，但求无过，所以我们需要
-V
DISTINCT
'Grants
query
 asnbs但
DAS
'adm'@'localhost' IDENTIFIED BY PASSWORD
AS
forlquery'
TO
>/tmp/showgrants.sql
TO'phplamp'@'localhost
query
'adm'@'localhost'
CONCAT('show
FROM
，如果在数据迁移中遗漏或
 mysql.user
的数据即可，
：那么很可能是一个
grants
&&
mysql
where
for
---
## Page 117
么补充呢？
字符增长到了 32字符。
ALTER
CREATE USER
-- Grants for 'webadmin'@'10.127.8.207'
看起来之前的那种 show grants 得到的信息很有限，那么我们来看看 pt工具的效果，
基于这个安全策略，可以做很多的事情，5.7默认就是这种模式。
而在MySQL5.7中，结果却有所不同，如下：
MySQL 5.6中查看 mysql.user的数据结果如下：
authentication
max_connections:0
这就奇怪了，
（3）有个细节可能被忽略，那就是 MySQL 5.7的字段 user 相比 MySQL 5.6长度从16
（2）这么一看总数对不上，这是因为 MySQL 5.7相比 5.6少了 password字段。
password_lifetime
password_last_changed
（1）MySQL5.7中多了下面的3个字段，
这是表面现象，不是5.7多两个字段这么简单，我们看一下真实情况。
·MySQL 5.6 的 mysql.user 表含有 43个字段。
·MySQL 5.7 的 mysql.user 表含有 45个字段;
我对比了5.6和5.7 的表结构情况。不看不知道，一看差别还真不小。
password
account_locked
当然解决方法很多，我就说说方法2，方法3。
使用自定义脚本或者 pt工具来导出权限信息
方法3：pt工具导出
-个重要差别就在于mysql.user 表的字段值 plugin。
actv_test
gym
user
----
mysqlmon
app_live_im
user
USER
，为什么没有了 password 字段呢，没有了 password字段，这个功能该怎
 plugin: mysql_native_password
changed:
*82A4DC7B3F5E73E822529E9EF4DE8C042253445A
 authentication_string
*0571D080430BC7B60A3F4D41A8D71501E6B8FDAA
*E96DB97255EF3ED52454A10EDA1AE7BABC8D3700
'webadmin'@'10.127.8.207'
2016-11-09 11:38:39
enum('N',
smallint(5)
timestamp
admin
字段和数据类型如下：
unsigned
'10.127.8.207';
第3章MySQL基础运维面面观|95
IDENTIFIED
string
HLIM
---
## Page 118
96丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
式完成的，而在5.6中只需要通过 show grants for'xxx'即可。
个语句更加健壮。
特性的东西。
权限信息。
明白了原委和解决方法，这个问题处理起来其实就很简单了。
语句看起来丰满了很多，但是似乎还是少了些权限的信息。
我们使用 show create user*webadmin'@10.12.20.133'得到的结果如下：
pt-show-grants 里面是这样写的，对于 MySQL 5.7的处理方式。
为什么使用 pt 工具能够得到更多，不是这个工具有多神奇，而是里面充分利用了新
这样的语句相对来说就是完整的，使用 show grants 的结果少了很多，只包含基本的
简化一下就是使用 show create user 这种方式，在这个基础上额外补充一下，使得这
GRANT ALL PRIVILEGES ON *.*
另外，如果需要限制某个用户的连接数情况，可以使用如下的语句：
CREATE
# If MySQL 5.7.6+ then we need to use SHOW CREATE USER
PTDEBUG &&_d('CreateUser:
CREATE USER IF
@create_user = @{ $dbh->selectcol_arrayref("SHOW CREATE USER
VersionCompare::cmp($version,'5.7.6'） >=0）{
PASSWORD
PTDEBUG&&
dcr
$alter
$create
Screate
my $alter
my
$exit_status
PTDEBUG
($EVAL_ERROR)
USER
user;
=~
&&
'webadmin'@'10.12.20.133';
AS '*DA43F144DD67A3F00F086B0DA1288C1D5DA7251F' REQUIRE
EXPIRE
_d('AdjustedCreateUser:',
S{CREATE USER}(ALTER USER};
$create;
d($EVAL_ERROR);
'webadmin'@'10.12.20.133'
IDENTIFIED
NOT EXISTS
1；
DEFAULT
Screate
TO'webadmin'@'10.127.xx.xx';
USER}{CREATE USER IF NOT EXISTS};
ACCOUNT
 and then doing an ALTER USER
Salter
converting
Dumper(\@create_user));
UNLOCK;
',Dumper(\@create_user));
the CREATE USER into
IDENTIFIED
HLIM
---
## Page 119
以上的数据中心故障都是人为失误导致。
提供的数据显示，他们分析了4500起数据中心事故，其中包含400次完全宕机事件，发现70%
以看出服务器发生硬件的概率还是很高的。
的操作，一旦出现问题，影响范围就会无限放大。
故障是不可避免的，我们需要在服务可持续方向多下功夫，尽可能减少业务层的影响。
3.3.1
图通过一些案例的方式来让备份恢复工作具有实践性。
间内能够快速恢复数据，保障业务持续可用是我们始终恪守的服务底线。
辆在偏远地区高速行驶的汽车，如果出现了爆胎，但是没有备胎，后果将是灾难性的。
公司业务会完全停顿，43%的公司再也无法重新开业，20%的企业在两年之内被迫宣告破产。
43%的公司会彻底关门，51%的公司会在两年之内消失。
比例极高，接下来是内存故障，主板和内存都是一些不可控的硬件因素，从这个比例可
是最后的救命稻草。
有变坏的可能，不管这种可能性有多小，它总会发生。
3.3
再来说下人为故障，根据数据中心性能研究机构纽约正常运行时间学会（UPTIMEINSTITUTE）
如果发生了服务器宕机，会存在诸多的原因，如硬件、系统、软件层面等，当然也包括人为
Gartner 公司的一项调查表明，在灾难之后，如果无法在14天内恢复信息作业，有 75%的
所以一旦灾难发生，尤其是发生自然灾害，在不可抗因素的情况下，备份恢复往往
说到备份恢复，不管你对心理学是否感兴趣，建议你要理解下墨菲定律：如果事情
其中硬件故障占了大部分，基本是二八的比例分布，而硬件故障中主板故障造成的
而另外一类故障是系统层面的故障，它是不可控的，因为系统层的工作相对是底层
本小节我们会着重介绍下常见的备份恢复工具，并总结一些备份恢复的小技巧，试
所以作为 DBA，作为数据保障的最后一道防线，我们要完善备份恢复，在有限的时
在互联网业务高速的发展中，数据的价值和运营能力被极大地发挥出来，就好比
如果服务器发生了宕机，我们有条不紊的恢复，那么这种故障是可控的，毕竟硬件
在开始备份恢复之前，我们需要思考一个问题，为什么会有故障？
据美国德克萨斯州大学的调查显示，只有6%的公司可以在数据丢失后生存下来，
而数据库的备份恢复有多重要呢？来看一下下面的数据。
数据安全警示录
MySQL备份恢复
第3章MySQL基础运维面面观|97
---
## Page 120
98丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
别是数据备份恢复（库级别），数据导入导出（表级别）和日志恢复（日志级别)。
理了如下图3-21所示的一些工具和技巧总结，接下来的内容会通过三个维度来展开，分
3.3.2
备份就没有任何意义。
工欲善其事，必先利其器，我们需要对备份恢复工具有一个较为清晰地认识，我整
最后需要强调一下：备份重于一切，定期的恢复演练重于备份。如果数据恢复不了，
系统故障，
常规备份方案
地2
数据逻辑导出
表结构信息
逻辑备份工具
nysql-e
硬件故障，80
各故障类型占比（%）
mysqldump
PCI总线故障，8.3
数据交互
图3-21
图3-20
数据交互
Table
物理备份工具
内存故路，
日志信息
mysgl>notee
nysq
数据逻辑导入
mysqlimporttest.txt
xtrabackup
mysqlbackup
PCI总线故障
RAID卡故障
CPU故障
■主板故障
网络设备
■其他故障
■系统故障