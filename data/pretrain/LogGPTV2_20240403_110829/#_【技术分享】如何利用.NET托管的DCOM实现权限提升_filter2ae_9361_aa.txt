# 技术分享：如何利用.NET托管的DCOM实现权限提升

## 译文声明
本文为翻译文章，原文来源于googleprojectzero.blogspot.tw。译文仅供参考，具体内容和含义以原文为准。

**翻译：[华为未然实验室](http://bobao.360.cn/member/contribute?uid=2794169747)**
**稿费：160RMB**
**投稿方式：发送邮件至linwei#360.cn 或 登陆网页版在线投稿**

---

### 前言
影响互操作技术的安全漏洞是一类非常有趣的漏洞，因为它们通常会影响所有使用该技术的应用程序，无论这些应用程序具体执行什么操作。同样，在许多情况下，开发人员很难在不使用该技术的情况下推出缓解措施，有时甚至无法做到这一点。

我在.NET的组件对象模型（COM）互操作层中发现了一个这样的漏洞，这使得通过DCOM进行跨权限边界的.NET调用本质上是不安全的。本文将描述一些滥用此漏洞的方法，首先是获得提升的权限，然后是一个远程代码执行漏洞。

### 背景知识
回顾.NET的历史可以知道，其早期基础之一是试图创建一个更好的COM版本。因此，微软非常注重确保.NET虽然本身不是COM，但必须能够与COM互操作。这样，.NET就可以用于实现和使用COM对象。例如，您不需要在COM对象上调用QueryInterface，只需将对象投射到兼容COM的接口上即可。以下是一个简单的C#示例，展示了如何实现进程外COM服务器：

```csharp
[ComVisible(true)]
[Guid("...")]
[ClassInterface(ClassInterfaceType.None)]
public class MyComServer : IMyComInterface
{
    // 实现接口方法
}
```

客户端现在可以通过CLSID（由`ComClass`上的`Guid`属性定义）连接到COM服务器。实际上这很简单，因为.NET中的许多核心类被标记为COM可见，并注册为任何COM客户端（即使未用.NET编写）可用。

为了使这一切有效，.NET运行时向开发人员隐藏了大量的样板代码。尽管有一些机制可以影响这种样板互操作代码（例如`InterfaceType`属性，它定义了COM接口是源自`IUnknown`还是`IDispatch`），但在大多数情况下，你得到的就是所给予的。

开发人员可能没有意识到的一点是，不仅仅是您指定的接口从.NET COM对象导出，运行时还会添加一些“管理”接口。这些接口通过将.NET对象包装在COM可调用包装器（CCW）中来实现。

我们可以枚举CCW所暴露的接口。以`System.Object`为例，下表展示了支持的接口及其实现方式（动态或静态）。

| 接口 | 实现方式 |
|------|----------|
| _Object | 动态生成 |
| IManagedObject | 静态实现 |

 `_Object`接口指的是`System.Object`类的COM可见表示，它是所有.NET对象的根，必须动态生成，因为它依赖于被暴露的.NET对象。另一方面，`IManagedObject`由运行时本身实现，并且在所有CCW中共享。

我从2013年开始关注.NET暴露的COM攻击面，当时我正在研究IE沙箱逃逸。其中一个可以在沙箱之外访问的COM对象是.NET ClickOnce部署代理（DFSVC），它实际上是用.NET实现的。我发现了两个问题，不是在DFSVC本身，而是在所有.NET COM对象暴露的 `_Object`接口上。

`_Object`接口如下所示（以C++表示）：

```cpp
interface _Object {
    HRESULT GetType([out, retval] IUnknown** pRetVal);
    HRESULT GetLifetimeService([out, retval] IUnknown** pRetVal);
    HRESULT InitializeLifetimeService([out, retval] IUnknown** pRetVal);
    HRESULT GetHashCode([out, retval] LONG* pRetVal);
    HRESULT Equals([in] VARIANT obj, [out, retval] VARIANT_BOOL* pRetVal);
};
```

第一个漏洞（导致CVE-2014-0257）在于`GetType`方法。该方法返回一个可用于访问.NET反射API的COM对象。由于返回的`_Type` COM对象在服务器端运行，您可以调用一系列方法，从而访问`Process.Start`方法，实现沙箱逃逸。更多细节请参见我在GitHub上发布的PoC代码。微软通过阻止通过DCOM访问反射API解决了此问题。

第二个问题更为微妙，是.NET互操作特性的一个副产品，大概没有人认为这是安全隐患。加载.NET运行时需要相当多的额外资源，因此，默认情况下，对于本机COM客户端调用.NET COM服务器上的方法，COM和CCW会管理通信，即使这会影响性能。微软可以选择使用COM封送器强制.NET在客户端加载，但这似乎有点过头，更不用说客户端可能根本没有安装兼容的.NET版本。

当.NET与COM对象交互时，它会创建反向CCW——运行时可调用包装器（RCW）。这是一个.NET对象，其实现了COM接口的运行时版本，并将其编组到COM对象。现在，COM对象完全有可能实际上是用.NET编写的，甚至可能在相同的应用程序域中。如果.NET不做任何处理，可能会对性能造成双重影响，在RCW中编组，以调用一个实际上是托管对象的CCW的COM对象。

尝试从CCW“展开”托管对象并获取一个真正的.NET对象是很有意义的。这里的问题在于`IManagedObject`接口，如下所示：

当.NET运行时获得一个COM对象时，它会通过一个过程来确定是否可以从其CCW“展开”对象，并避免创建一个RCW。该过程记录如下：
1. 调用COM对象上的`QueryInterface`来确定其是否实现`IManagedObject`接口。如果没有，则返回合适的RCW。
2. 调用接口上的`GetObjectIdentity`。如果GUID与每次运行时GUID（在运行时启动时生成）匹配，且AppDomain ID与当前的AppDomain ID匹配，则在运行时表中查找CCW值，并提取指向真实托管对象的指针并将其返回。
3. 调用接口上的`GetSerializedBuffer`。运行时将检查.NET对象是否可序列化，如果可以，则将其传递给`BinaryFormatter::Serialize`，并将结果打包到二进制字符串（BSTR）中。这将返回给客户端，客户端现在将尝试通过调用`BinaryFormatter::Deserialize`将缓冲区反序列化到对象实例。

第2步和第3步似乎都是坏主意。例如，在第2步中，每运行时GUID不能被猜到，但如果您可以访问同一进程中的任何其他对象（例如由服务器本身暴露的COM对象），则可以调用对象上的`GetObjectIdentity`，并将GUID和AppDomain ID重播回服务器。这并没有给您带来太多好处，因为CCW值只是一个数字而不是指针，所以最多只能提取已经有CCW的对象。

相反，真正棘手的是第3步。无论是什么语言（如Java、PHP、Ruby等），任意反序列化都是危险的，.NET也不例外。显然，这是一个可以利用的问题，我们先从权限提升的角度来看一看。