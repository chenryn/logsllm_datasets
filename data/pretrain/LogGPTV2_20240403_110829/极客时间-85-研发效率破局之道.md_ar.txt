## 如何控制技术债？从我的经验看，控制技术债主要有以下 4 步：1.  让公司管理层意识到偿还技术债的重要性，从而愿意投入资源；2.  采用低成本的方式去预防；3.  识别技术债并找到可能的解决方案；4.  持续重构，解决高优先级技术债。接下来，我们分别看看这 4 步具体如何实施吧。
### 1. 让公司管理层意识到偿还技术债的重要性，从而愿意投入资源通常来说，开发人员能直观感受到技术债的坏处，大都愿意去偿还技术债，所以技术债累积的主要原因是，管理层不理解，或者说是没有认识到技术债累积给业务发展带来的巨大坏处。这也就意味着，解决技术债的第一步就是，让管理层意识到偿还技术债的重要性，从而愿意投入资源去解决。在我看来，让管理层理解技术债比较直观、有效的方式，就是上面提到的与经济债务的类比。另外一个办法是，将偿还技术债与业务发展联系起来。如果能够说明某一项技术债已经阻碍了公司重要业务的发展，说服管理层投入资源解决技术债就会比较容易。
### 2. 采用低成本的方式预防所谓具体问题具体分析，我们在预防技术债时，也需要根据技术债的成因采取不同的措施。对主动引入的技术债，要尽量让管理层和产品团队了解技术上的捷径将会带来的长期危害，从而在引入技术债时客观地权衡其带来的短期收益和长期损害，避免引入不必要的技术债。在被动引入的技术债中，由于产品演化导致设计落伍的问题不是很好预防。而由开发团队的能力问题引入的技术债，我们可以使用加强计划和代码审查等方法实现低成本的预防。其中，加强计划，可以帮助开发人员更合理地安排时间，从而有相对充裕的时间去学习并选择更优秀的功能实现方案。而代码审查的作用就更好理解了，它可以帮助我们在早期发现一些不必要引入的技术债，以更低的成本去解决它。关于技术债的预防，我还有一个小贴士，就是在接口部分多下功夫。因为接口涉及实现方和多个调用方，所以接口部分累积的技术债，影响范围通常比较大。而与之相对应的模块内部实现，技术债的影响范围就比较小。所以，在涉及主动引入的技术债时，我们需要区别对待接口部分和实现部分。
### 3. 识别技术债并找到可能的解决方案对不能预防的技术债，我们需要高效地把它们识别出来，并了解常见的解决办法。其中，对于主动引入的技术债，可以在引入的时候就添加任务到Backlog。而对于被动引入的技术债，则需要周期性的审视，这需要技术管理者主动地收集、整理技术债问题。总结来说，技术债可以分为两大类：复杂度相关和重用性相关。我们可以关注这两个方面来识别技术债。**第一是，复杂度相关。**史蒂夫 · 迈克康奈尔（SteveMcConnell）在其经典著作[代码大全](https://book.douban.com/subject/1477390/)（CodeComplete）中，提出的一个核心观点是：**如何处理复杂度是软件开发最核心的问题**。我非常认同这个观点，因为人类大脑容量有限，大概只能同时记住7 项内容，而软件包含的元素非常复杂远超过 7项。所以，要实现可维护的软件，我们必须想尽办法去降低其复杂度。具体来说，我们在开发时，要时刻注意会增加代码复杂度的"坏味道"，比如：-   组件间依赖混乱，职责不清晰；-   组件、文件、函数太大，包含的内容太多；-   使用不必要的、复杂的设计范式；-   函数、接口参数太多等。**解决复杂度问题的基本原则是，把一个系统拆解为多个子系统，用抽象和分层的方法，让我们同时只面对有限的信息，并且能够有条理地深入到每一个子系统中查看细节**。具体的解决方法有：-   对系统进行二进制组件或者代码层面的解耦；-   使用简单化的设计编码原则，避免不成熟的优化；-   对常见的代码"坏味道"做出一些规范，比如限制代码行的长度、禁止循环依赖、限制圈复杂度（Cyclomatic    complexity）；-   对复杂的设计添加注释。**第二是，重用性相关。**软件开发的另一个重要原则是 DRY，即 Don't repeatyourself。代码重复是一个很常见的技术债，在软件抽象的各个层次（比如应用、架构、组件、代码）都会出现。避免重复的具体方法有：-   应用层面，复用业务单元，典型案例就是业务中台；-   架构层面，复用基础设施后台；-   组件层面，避免出现责任重叠的组件、数据存储等；-   代码层面，避免出现重复函数、代码块。接下来最后一步，就是要持续性地重构，去解决高优先级的技术债任务。
### 4. 持续重构，解决高优先级的技术债作为技术管理者，除了业务目标外，还要制定团队的技术目标，来解决最重要、最紧急的技术债任务。技术债任务的具体处理方法有两种：一种是，把技术债的任务和业务相关的任务放到一起，在每一个迭代中持续完成；另一种方法是，采用突击的方式，在某个特定的时间段集中解决技术债问题。比如，我在 Facebook 和微软的时候，我们团队就都使用过 Bug Bash的工作方式，也就是在每几个迭代以后，专门花几天时间来解决前面遗留下来的Bug，而不开发新功能。这样做的好处有两个：-   第一，集中精力修复 Bug    可以减少上下文切换，能够更聚焦在提高产品质量上，因为提高质量和写新功能的思路是有区别的。-   第二，能够让团队成员短暂地从紧张的业务气氛中脱离出来，从而精力充沛地投入到下一个业务开发迭代中去。
## 小结在今天这篇文章中，我与你介绍了要想让开发工作能够持续地快下去，正确的做法是在恰当的时间"举债前行"，而在平时的开发工作中要持续定位技术债任务，并解决高优先级的部分。为了帮助你理解技术债与公司业务发展的关系，我再和你分享一个案例。A、B、C三个公司对待技术债的态度分别是：-   A 公司：只关注业务，不偿还技术债；-   B 公司：持续关注技术债，但对业务时机不敏感；-   C    公司：持续关注业务和技术债。对业务机会很敏感，敢放手一搏大量借贷，也知道什么时候必须偿还技术债。A公司在开始的时候，业务产出会比较多，但由于技术债带来的影响，效率会逐渐降低。B公司在开始的时候，业务产出比较少，但由于对技术债的控制，所以能够保持一个比较稳定的产出，在某一时间点超过A 公司。C公司在有市场机会的时候，大胆应用技术债，同时抽出一小部分时间精力做一些技术债预防工作。这样一来，在一开始的时候，C的业务产出输出介于 A 和 B 之间，但和 A 的差距不大。随后，在抢占到一定的市场份额之后，C公司开始投入精力去处理技术债，于是逐步超过 A。另外，虽然 C公司此时的生产效率低于 B 公司，但因为市场份额的优势，所以总业绩仍然超过B。并在高优先级技术债任务处理好之后，生产效率也得到了提升，将 B公司也甩在了身后。![](Images/35dd88a3fe9f288cbac5cf12dfcf23a3.png){savepage-src="https://static001.geekbang.org/resource/image/d8/e5/d8564265399a1f2da7191a94354557e5.jpg"}这个例子很有代表性，你可以用它来说服管理层在偿还技术债上做投入。
## 思考题经济债务可以申请破产保护，你觉得技术债可以有这样的福利吗？为什么呢？感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！![](Images/6476358e731920fbc927e278bae473aa.png){savepage-src="https://static001.geekbang.org/resource/image/ec/d8/ece1747e3a8f96aa76a8e57c94de94d8.jpg"}
# 15 \| 开源：从Phabricator的开源历程看开源利弊你好，我是葛俊。今天，我来和你聊聊开源这个话题。从克莉丝汀· 彼得森（Christine Peterson）1998年提出"开源"这个名词，到今天已经 21年了。可以说，在这些年里开源改变了软件开发世界。如今，开源覆盖了IDE、移动端开发、前后端开发、运维、服务治理、AI等众多领域的项目。比如，[GitHub 上 2018年最流行的前十个项目](https://octoverse.github.com/projects#repositories)，包括VSCode、React Native、Angular、Ansible、Kubernetes、TensorFlow等，对这些领域都有覆盖。![](Images/bb184ba7b461192634f60f60ffc37c8c.png){savepage-src="https://static001.geekbang.org/resource/image/a7/ad/a75f98e91a355d48be5f95e3ac4373ad.jpg"}从使用者的角度看，开源软件的价值不言自明。可以说，99%的科技公司都在使用开源软件。从贡献者的角度看，前十个项目中有 8个项目的背后都有公司做支撑。毫无疑问，开源对公司来说也有吸引力的。但是，很多公司并没有开源，尤其是国内做开源的公司更是比较少，原因是什么呢？其实，就是因为开源有很多坑。我在 Facebook 时参与了 Phabricator开源的全过程，见证了其为公司带来的好处，比如因为模块化带来的代码质量提升、从开源社区获得的资源支持，也见证了开源的一些弊端，比如因为和开源社区目标不一致而带来的运维成本增加，以及最终导致的项目Fork。``{=html}
## Phabricator 的整个开源过程一般来说，开源一个项目的流程包括以下九步：1.  公司 / 员工对某项目有开源的意愿；2.  权衡利弊决定是否开源，以及后续的维护计划；3.  法律和信息安全方面的审核；4.  选择 License；5.  选择 Contributor License Agreement；6.  选择版本控制代码服务商（比如，GitHub、GitLab、BitBucket 等）；7.  代码模块化，与公司代码分离；8.  正式开源，发布信息；9.  项目维护和持续开发。接下来，我就以 Phabricator的开源过程为例，帮助你理解公司进行开源的利弊，以及使用它来提高研发效能的一些原则和实践。