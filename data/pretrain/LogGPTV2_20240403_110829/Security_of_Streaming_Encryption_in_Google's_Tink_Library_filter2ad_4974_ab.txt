𝑓1, 𝑓2, . . . , ←$ Func(ℳ,{0, 1}𝑛)
procedure Finalize(𝑏′)
return (𝑏′ = 𝑏)
procedure Eval(𝑖, 𝑀)
𝑌1 ← 𝐹 (𝐾𝑖, 𝑀); 𝑌0 ← 𝑓𝑖(𝑀)
return 𝑌𝑏
Fig. 1: Game Gprf
𝐹 defining multi-user prf security of a function 𝐹.
procedure Initialize
𝐾1, 𝐾2, . . . ←$ 𝒦; 𝑏 ←$ {0, 1}
𝜋1, 𝜋2, . . . ←$ Perm(𝑛)
procedure Finalize(𝑏′)
return (𝑏′ = 𝑏)
procedure Eval(𝑖, 𝑀)
𝑌1 ← 𝐸(𝐾𝑖, 𝑀); 𝑌0 ← 𝜋𝑖(𝑀)
return 𝑌𝑏
Fig. 2: Game Gprp
𝐸 defining multi-user prp security of a blockcipher 𝐸.
Systems and Transcripts. Following the notation from [16], it is convenient to consider inter-
actions of a distinguisher 𝒜 with an abstract system S which answers 𝒜’s queries. The resulting
interaction then generates a transcript 𝜏 = ((𝑋1, 𝑌1), . . . , (𝑋𝑞, 𝑌𝑞)) of query-answer pairs. It is
known that S is entirely described by the probabilities pS(𝜏) that correspond to the system S
responding with answers as indicated by 𝜏 when the queries in 𝜏 are made.
We will generally describe systems informally, or more formally in terms of a set of oracles they
provide, and only use the fact that they define corresponding probabilities pS(𝜏) without explicitly
giving these probabilities.
Multi-user PRF. Let 𝐹 : 𝒦 × ℳ → {0, 1}𝑛 be a function. For an adversary 𝒜, let
Advprf
𝐹 (𝒜) = 2 Pr[Gprf
𝐹 (𝒜)] − 1 ,
be the advantage of the adversary against the multi-user PRF security of 𝐹, where game Gprf
defined in Fig. 1.
For any function 𝐹 of key length 𝑘, by adapting Biham’s key-collision attack on DES [5], one can
obtain PRF advantage 𝑝𝑞/2𝑘+2 using 𝑂(𝑞) queries and 𝑂(𝑝) calls to 𝐹. See Appendix B for a
description and a rigorous analysis of this attack.
Multi-user PRP. Let 𝐸 : 𝒦 × {0, 1}𝑛 → {0, 1}𝑛 be a blockcipher. For an adversary 𝒜, let
𝐹 is
Advprp
𝐸 (𝒜) = 2 Pr[Gprp
𝐸 (𝒜)] − 1 ,
be the advantage of the adversary against the multi-user PRP security of 𝐸, where game Gprp
𝐸 is
defined in Fig. 2. This game is written as a standard-model notion; in the ideal-cipher model, the
adversary will be given oracle access to 𝐸 and its inverse as well.
3 Nonce-based Online AE
In this section, we will recall the syntax and security notion for (nonce-based) online AE of Hoang
et al. [15]. We however present a single, unified security notion nOAE instead of giving separate
5
procedure Initialize
𝐾1, 𝐾2,··· ←$ 𝒦
𝑏 ←$ {0, 1}
procedure Enc(𝑖, 𝑁, 𝐴, 𝑀)
𝐶1 ← E(𝐾𝑖, 𝑁, 𝐴, 𝑀); 𝐶0 ←$ {0, 1}|𝐶1|
return 𝐶𝑏
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶)
if 𝑏 = 0 then return false
𝑀 ← D(𝐾𝑖, 𝑁, 𝐴, 𝐶)
return (𝑀 ̸= ⊥)
procedure Finalize(𝑏)
return (𝑏′ = 𝑏)
Fig. 3: Game Gae
(K, E, D).
𝛱(𝒜) that defines the (multi-user) security of a conventional AE scheme 𝛱 =
privacy and authenticity definitions. In addition, compared to the notion of Hoang et al., ours is
stronger, as (i) the adversary can target multiple users, and (ii) for each user, it is allowed to make
multiple forgery attempts.
The treatment in [15] however assumes that a receiver will perform decryption in an in-order fashion,
but there are applications that demand random-access decryption. We identify a class of online AE
schemes that can support random-access decryption, formalize a corresponding (multi-user) notion
nOAE2, and explore the relationship between nOAE and nOAE2.
As a warm-up, we will begin with the multi-user version of the classical security notion of conven-
tional AE schemes.
Conventional AE. A conventional AE scheme 𝛱 is a triple of algorithms (K, E, D); the last two
are deterministic. The key-generation algorithm K samples a key 𝐾 at random. The encryption
algorithm E takes as input a key 𝐾, a message 𝑀, a nonce 𝑁, and an associated data (AD) 𝐴
to produce a ciphertext 𝐶. Given a key 𝐾, a nonce 𝑁, an AD 𝐴, and a ciphertext 𝐶, the decryp-
tion algorithm D either produces a message 𝑀, or outputs a symbol ⊥ indicating invalidity. For
correctness, we require that decryption reverses encryption, meaning that if 𝐶 ← E(𝐾, 𝑁, 𝐴, 𝑀)
then 𝑀 ← D(𝐾, 𝑁, 𝐴, 𝐶). In this paper, we assume that there is a constant 𝜏 that a ciphertext is
always 𝜏-bit longer than its plaintext. For example, in GCM, 𝜏 = 128.
Given an adversary 𝒜, define
Advae
𝛱(𝒜) = 2 Pr[Gae
𝛱(𝒜)] − 1
as the advantage of the adversary against the (multi-user) nonce-based security of a conventional
AE scheme 𝛱, where game Gae
𝛱 is defined in Fig. 3. The adversary is given an encryption oracle and
a decryption one. For encryption queries Enc(𝑖, 𝑁, 𝐴, 𝑀), we require that the adversary be nonce-
respecting, meaning that each pair (𝑖, 𝑁) must never repeat. The adversary may repeat nonces in
decryption queries, but to avoid trivial wins, if the adversary queries Enc(𝑖, 𝑁, 𝐴, 𝑀) to receive 𝐶,
subsequently it is prohibited from querying Dec(𝑖, 𝑁, 𝐴, 𝐶). We note that the decryption oracle
only tells the adversary whether a query succeeds, but does not return the decrypted message.
For any conventional AE scheme of key length 𝑘, by adapting Biham’s key-collision attack on
DES [5], one can obtain advantage 𝑝𝑞/2𝑘+2 by making 𝑂(𝑞) encryption queries and 𝑂(𝑝) calls to
the encryption scheme. See Appendix B for a description and a rigorous analysis of this attack. Still,
this attack requires that some particular nonce is used for all users, which is a realistic scenario
if one implements nonces via a counter. However, if there is some variation in choosing nonces
among users—for example, if one picks nonces at random—then this attack can be mitigated.
6
Following Bose, Hoang, and Tessaro [6], we say that an adversary is 𝑑-repeating if among its
encryption queries, each nonce is used for at most 𝑑 users. Note that we levy no restriction on
nonces of decryption queries. If we restrict to 𝑑-repeating adversaries then the key-collision attack
only achieves advantage 𝑑𝑞/2𝑘+2.
Online AE. An online AE scheme 𝛱 is a triple (𝒦,ℰ,𝒟). The key-generation algorithm 𝒦, as
usual, samples a key 𝐾 at random. Messages, AD, and ciphertexts are vectors of strings. We
speak of segmented messages, segmented AD, and segmented ciphertexts to refer to those vectors,
and message segments, AD segments, and ciphertext segments when we refer to their components.
Nonces however are still short strings.
The encryption scheme ℰ consists of three deterministic algorithms (ℰ.init,ℰ.next,ℰ.last).
– Algorithm ℰ.init takes as input a key 𝐾 and a nonce 𝑁 to produce a state 𝑆. This is used to
– Algorithm ℰ.next takes as input a state 𝑆, an AD segment 𝐴, and a message segment 𝑀, to
– Algorithm ℰ.last takes as input a state, an AD segment, and a message segment, to produce
a ciphertext segment. This is used for the last AD segment and message segment, closing
the encryption.
initiate the encryption of a segmented message with a segmented AD.
produce a ciphertext segment 𝐶 and an updated state 𝑆*.
In particular, to encrypt a segmented message 𝑀 = (𝑀1, . . . , 𝑀𝑚) and a segmented AD 𝐴 =
(𝐴1, . . . , 𝐴𝑚) under a nonce 𝑁 and a key 𝐾, one runs the following code, resulting in a segmented
ciphertext 𝐶 = (𝐶1, . . . , 𝐶𝑚).
𝑆0 ← ℰ.init(𝐾, 𝑁)
for 𝑖 ← 1 to 𝑚 − 1 do (𝐶𝑖, 𝑆𝑖) ← ℰ.next(𝑆𝑖−1, 𝐴𝑖, 𝑀𝑖)
𝐶𝑚 ← ℰ.last(𝑆𝑚−1, 𝐴𝑚, 𝑀𝑚)
return (𝐶1, . . . , 𝐶𝑚)
The decryption scheme 𝒟 likewise consists of three deterministic algorithms (𝒟.init,𝒟.next,𝒟.last).
To decrypt a segmented ciphertext 𝐶 = (𝐶1, . . . , 𝐶𝑚) and a segmented AD 𝐴 = (𝐴1, . . . , 𝐴𝑚)
under a nonce 𝑁 and a key 𝐾, one runs the following code, resulting in a (possibly partial)
segmented message.
𝑆0 ← 𝒟.init(𝐾, 𝑁)
for 𝑖 ← 1 to 𝑚 − 1 do
(𝑀𝑖, 𝑆𝑖) ← 𝒟.next(𝑆𝑖−1, 𝐴𝑖, 𝐶𝑖)
if 𝑀𝑖 = ⊥ then return (𝑀1, . . . , 𝑀𝑖−1)
𝑀𝑚 ← 𝒟.last(𝑆𝑚−1, 𝐴𝑚, 𝐶𝑚)
if 𝑀𝑚 = ⊥ then return (𝑀1, . . . , 𝑀𝑚−1)
return (𝑀1, . . . , 𝑀𝑚)
Note that in the code above, if some (𝐴𝑖, 𝐶𝑖) is invalid and consequently 𝑀𝑖 = ⊥, then we immedi-
ately terminate the decryption process, returning the partial segmented message (𝑀1, . . . , 𝑀𝑖−1).
For correctness, we require that decryption reverses encryption.
The nOAE notion. Given an adversary 𝒜, define
Advnoae
𝛱 (𝒜) = 2 Pr[Gnoae
𝛱 (𝒜)] − 1
7
procedure Initialize
𝐾1, 𝐾2,··· ←$ 𝒦; 𝐽1, 𝐽2,··· ← 0; 𝑏 ←$ {0, 1}
procedure Enc.init(𝑖, 𝑁)
𝐽𝑖 ← 𝐽𝑖 + 1; 𝑗 ← 𝐽𝑖; 𝑆𝑖,𝑗 ← ℰ.init(𝐾𝑖, 𝑁); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐶1, 𝑆𝑖,𝑗) ← ℰ.next(𝑆𝑖,𝑗, 𝐴, 𝑀); 𝐶0 ←$ {0, 1}|𝐶1|
return 𝐶𝑏
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
𝐶1 ← ℰ.last(𝑆𝑖,𝑗, 𝐴, 𝑀); 𝐶0 ←$ {0, 1}|𝐶1|; 𝑆𝑖,𝑗 ← ⊥
return 𝐶𝑏
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶, 𝑎)
if 𝑏 = 0 or |𝐴| ̸= |𝐶| then return false
𝑆 ← 𝒟.init(𝐾𝑖, 𝑁); 𝑚 ← |𝐶|
for 𝑗 ← 1 to 𝑚 − 𝑎 do
(𝑀, 𝑆) ← 𝒟.next(𝑆, 𝐴[𝑗], 𝐶[𝑗])
if 𝑀 =⊥ then return false
return (𝑎 = 0 or 𝒟.last(𝑆, 𝐴[𝑚], 𝐶[𝑚]) ̸= ⊥)
procedure Finalize(𝑏′)
return (𝑏′ = 𝑏)
Fig. 4: Game defining the (multi-user) nOAE security of an online AE scheme 𝛱 =
(𝒦,ℰ,𝒟).
𝛱
as the advantage of the adversary against the (multi-user) nonce-based security of an online AE
scheme 𝛱, where game Gnoae
is defined in Fig. 4. In this game, the adversary is given access to