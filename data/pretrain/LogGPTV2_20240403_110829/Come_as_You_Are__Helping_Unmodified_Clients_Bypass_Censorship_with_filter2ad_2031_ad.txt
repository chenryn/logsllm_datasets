tamper{TCP:flags:replace:R},
tamper{TCP:ack:corrupt}),)-|
If our above new model for the resynchronization state holds
true, we expect the first RST packet of Strategy 7 to put the GFW
in the resynchronization state for every protocol but HTTPS, and
resynchronize not on the next packet it sees in the connection or
the next SYN+ACK, but on the next packet it sees from the client,
which is the induced RST with an incorrect sequence number.
To test this, we instrumented a client to adjust its sequence num-
bers to match that in the RST packet. This resulted in censorship,
593
Strategy 8: TCP Window Reduction (China)
DNS (3%), FTP (47%), HTTP (2%), HTTPS (3%), SMTP (100%)
[TCP:flags:SA]-
tamper{TCP:window:replace:10}(
tamper{TCP:options-wscale:replace:},)-|\/
indicating that the GFW indeed synchronized on this packet, and
confirming our new model of GFW’s resynchronization state.
TCP Window Reduction Strategy 8 works by reducing the
TCP window size and removing wscale options from the SYN+ACK
packet, inducing the client to segment the forbidden request. This
strategy is almost the exact same strategy identified by brdgrd [38]
in 2012. The fact that this strategy works at all is highly surprising—
the GFW has had the capacity to reassemble segments since brdgrd
became defunct in 2012. It appears that the portion of the GFW
responsible for FTP censorship is incapable of reassembling TCP
segments. This strategy is also the most effective at evading SMTP
censorship in China, and as we show next, it is highly effective in
other countries, as well.
5.2 Server-side Evasion in India & Iran
Our vantage points in India are all within the Airtel ISP, and we
confirm that Airtel only censors over HTTP [43]. Our vantage
points in Iran are in Zanjan and Tehran; here, HTTP, HTTPS, and
DNS is censored (though DNS-over-TCP is uncensored, so we will
focus on HTTP and HTTPS here).
Airtel’s censorship injects an HTTP 200 with a block page with a
FIN+PSH+ACK packet instead of tearing down the connection. Iran’s
censorship simply “blackholes” the traffic, dropping the offending
packet and all future packets from the client in the flow for 1 minute.
In India, as reported by Yadav et al., we also observe a follow-up
RST packet from the middlebox for good measure [43].
We find that both countries only censor on each protocol’s de-
fault ports (80, 443); hosting a web server on any other port defeats
censorship completely. Both countries’ middleboxes also do not
seem to track connection state at all: sending a forbidden request
without performing a three-way handshake to the server elicits a
censorship response.
Given the lack of state tracking for these middleboxes, the prob-
lem of server-side evasion becomes even more challenging: there is
no censor state to invalidate or teardown, so the only feasible strate-
gies are those that mutate the client’s forbidden request in a manner
that cannot be processed by the censor. When deployed from the
server side, Geneva identifies one such strategy in both countries
that we have already seen: TCP Window Reduction (Strategy 8).
Again, simply by reducing the TCP window size of the SYN+ACK
packet, it induces the client to segment the forbidden request. This
works because the middleboxes in both countries appear incapable
of reassembling TCP segments, so once the forbidden request is
segmented, it is uncensored.
This result, combined with the similar success of this strategy in
China against FTP and SMTP, suggests a pattern of generalizability
for client-side strategies. Client-side strategy species that work by
performing simple segmentation can be re-deployed at the server-
side in the form of a strategy that induces simple segmentation.
Come as You Are: Helping Unmodified Clients
Bypass Censorship with Server-side Evasion
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
We find the size of the payload injected by the server does not
affect the success of the strategy; whether just 1 byte is injected or
hundreds, the strategy is equally effective. This suggests that it is
the presence of the payloads, not the length of the payloads, that
causes the censor to fail.
We also find that it is critical that each of the SYN+ACK packets
have the payload. If we instrument the strategy instead to send just
one SYN+ACK with a payload (either first, in the middle, or last), the
strategy fails, or if we instrument the strategy to send two SYN+ACK
with a payload (back-to-back in the beginning, back-to-back at the
end, and with an empty SYN+ACK in between), the strategy fails. The
strategy only works if three back-to-back packets with a payload
are sent during the handshake.
We first test if this strategy is causing a desynchronization in the
censor. If the censor advances its TCB upon seeing the SYN+ACK
payload, we do not know if the censor will advance it for all of the
packets, or just some subset of them. To test each of these cases,
we instrumented the client to increment the sequence number of
its forbidden request by single, double, and triple the length of the
injected payload. However, none of these instrumented requests
trigger censorship, suggesting that this attack does not perform a
desynchronization attack against the censor.
Instead, we hypothesize the censor monitors connections specif-
ically for patterns that resemble normal HTTP connections, and
seeing payloads from the server during the handshake violates this
model, causing it to ignore the connection. However, we do not
understand why three payloads are required to enter this state. The
next strategies identified by Geneva support this hypothesis.
Strategy 10: Double GET (Kazakhstan)
HTTP (100%)
[TCP:flags:SA]-
tamper{TCP:load:replace:GET / HTTP1.}(
duplicate,)-| \/
Strategy 10 duplicates the outbound SYN+ACK packet and sets
the load to the first few bytes of a well-formed, benign HTTP GET
request. Since this payload is on the SYN+ACK, the client ignores it,
and the TCP connection is unharmed, but the payload is processed
by the censor. The above strategy shows the minimum portion of a
HTTP GET request required for the strategy to work (if the “.” is
removed, the strategy stops working). As long as the GET request
is well-formed up to the “.”, the strategy works; for example, the
strategy works equally well if we specify the rest of the GET request
or use a different or longer path. We also find that the duplicate is
required for this strategy to work; if the GET is only sent once, the
strategy does not work.
Frankly, we do not understand why this strategy works. We
hypothesize the request is just enough to pass a regular expression
or pattern matching inside the censor, and seeing the well-formed
GET request is sufficient for the censor to think the server is actually
the client. To confirm the censor is processing injected packets, we
try probing the censor by injecting forbidden GET requests. We
find two ways to inject the content such that it elicits a response
from the censor: injecting two GET requests during the handshake,
or performing simultaneous open and injecting one GET request
after during the handshake.
Figure 2: Server-side evasion strategies that are successful
against HTTP in Kazakhstan.
5.3 Server-side Evasion in Kazakhstan
Kazakhstan has deployed multiple types of censorship. Previous
works have explored weaknesses in their now-defunct HTTPS man-
in-the-middle [9]. Here, we focus on their in-network DPI censor-
ship of HTTP. Like the Airtel ISP, the censor steps in when a forbid-
den URL is specified in the Host: header of an HTTP GET request.
When the censor activates, it first performs a man-in-the-middle,
so all packets in the TCP stream (including the forbidden request)
for approximately 15 seconds are intercepted by the censor and
will not reach the server. The censor then injects a FIN+PSH+ACK
packet with a block page to inform the user the page is blocked and
the connection terminates.
We provide an overview of our successful server-side evasion
strategies against Kazakhstan in Figure 2.
Strategy 9: Triple Load (Kazakhstan)
HTTP (100%)
[TCP:flags:SA]-
tamper{TCP:load:corrupt}(
duplicate(
duplicate,),)-| \/
Strategy 9 takes the outbound SYN+ACK packet, adds a random
payload, and then duplicates it twice, effectively sending three
back-to-back SYN+ACK packets with payloads. The payloads and
duplicate packets are ignored by the client, and the client completes
the 3-way handshake. This strategy works 100% of the time in
Kazakhstan.
Strangely, we find that Strategy 9 is effective only if the packet
with the load is sent at least three times. Increasing the number
of duplicates does not reduce the effectiveness of the strategy, but
removing any of them renders the strategy unsuccessful.
594
Strategy 9Triple RandomPayloadClientServerSYNPSH/ACKACKPSH/ACK(response)(query)(rand load)SYN/ACK(rand load)SYN/ACKACK(rand load)SYN/ACKACKACKStrategy 11Null FlagsSYNंPSH/ACKACKPSH/ACK(response)(query)ACKClientServerSYN/ACK(no flags)Strategy 10Double BenignHTTP GETClientServerSYNPSH/ACKACKPSH/ACK(response)(query)(benign GET)SYN/ACK(benign GET)SYN/ACKACKACKSIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Bock et al.
We do not understand why two requests are required to elicit a
response during the handshake; we hypothesize the first request
is needed to break out of the censor’s “handshake” state and the
second request is then processed. To test this hypothesis, we try
injecting a forbidden request followed by a benign request, and
no censorship occurs. This indicates that when content is injected
before a connection is established, it is the second request that the
censor processes.
Strategy 11: Null Flags (Kazakhstan)
HTTP (100%)
[TCP:flags:SA]-
duplicate(
tamper{TCP:flags:replace:},)-| \/
Strategy 11 duplicates outbound SYN+ACK packet. To the first
duplicate, all of the TCP flags are cleared before it is sent, and the
second duplicate is sent unchanged. We find this strategy works
100% of the time. Although Geneva first discovered this strategy
by clearing the TCP flags, it also identified the strategy works as
long as FIN, RST, SYN, and ACK are not used. We hypothesize the
censor is monitoring for “normal” TCP handshake patterns, and
when those patterns are violated, the connection is ignored.
Finally, as expected, Strategy 8 also works in Kazakhstan: induc-
ing client segmentation is sufficient to defeat the censor.
6 MULTIPLE CENSORSHIP BOXES
The server-side evasion strategies from §5 exhibit a surprising prop-
erty: although they strictly operate at the level of TCP (specifically
the 3-way handshake), they have varying success rates depending
on the higher-layer application within a given country. This defies
expectation: our evasion strategies exploit gaps in censors’ logic or
implementation at the transport layer, and thus those same gaps
ought to be exploitable by all higher-layer applications. Exceptions
to this indicate either a cross-layer violation or a different network
stack implementation for each application—two phenomena that
are necessarily rare in the layered design of the Internet.
The remaining explanation is that China uses distinct boxes—
with distinct network stack implementations—for each of the appli-
cation protocols they censor. We depict this in Figure 3.
This raises an important question: how does the censor know
which box to apply? This is not as simple as triggering on port
numbers; recall that, in our experiments, we randomize the server’s
port numbers, and yet still experience censorship for each protocol.
Indeed, most of the GFW’s censorship is not port-specific.
We posit that each of the GFW’s separate censorship boxes in-
dividually track all TCP connections until it identifies network
traffic that matches its target protocol (i.e., until the request). Note,
however, that most of our strategies complete before the end of the
3-way handshake—before it can be determined which application
is using it. Thus, if our theory is correct, then when an application-
specific TCP-level strategy is used, all of the protocols’ processing
engines react, but only some of them respond incorrectly.
Separate censoring boxes would also explain why the GFW never
“fails closed”; i.e., it does not default to censorship if it observes
packets that are not associated with a TCB or that it cannot parse.
Figure 3: Single versus multiple censorship boxes. A standard
assumption is that evasion strategies that work for one application
will work for another within a given country. However, our results
indicate that China’s GFW uses distinct censorship boxes for each
protocol, each with their own network stacks (and bugs).
Our multi-box theory suggests that the GFW can never fail closed
because, although one box may not recognize a packet, it must
assume that another box might. If each censorship box were fail-
closed, the GFW would destroy every connection.
To see if we can detect the presence of multiple boxes, we sought
to locate them via TTL-limited censored probes [43]. We instru-
mented a client to perform 3-way handshakes with servers of vari-
ous protocols, and then send the query repeatedly with increment-
ing TTLs until it elicits a response from a censor. We found that, in
China, censorship occurred at the same number of hops for each
protocol at each vantage point. This indicates that, if there are
indeed multiple boxes, then China collocates them.
7 CLIENT COMPATIBILITY
The evasion strategies presented in §5 take advantage of esoteric
features of TCP that appear to have faulty implementations in
nation-state censors’ firewalls. Server-side deployment risks mak-
ing the server unreachable to any client that also has the same
shortcomings. Conversely, strategies that work for a diverse set of
clients are readily deployable. Here, we comprehensively evaluate
of all of the strategies against a diversity of client operating systems,
and we provide some anecdotal evidence across different link types.
Experiment Setup We formed a private network consisting of an
Ubuntu 18.04.3 server running each of the server-side TCP strate-
gies (using Apache2.4 for HTTP and HTTPS). For our clients, we
used 17 different versions of 6 popular operating systems: Win-
dows (XP SP3, 7 Ultimate SP1, 8.1 Pro, 10 Enterprise (17134), Server
2003 Datacenter, Server 2008 Datacenter, Server 2013 Standard,
Server 2018 Standard), MacOS (10.15), iOS (13.3), Android (10),
Ubuntu (12.04.5, 14.04.3, 16.04.4, 18.04.1), and CentOS (6, 7). We
tried each protocol and each server-side strategy against each client.
OS Results We found that all but three strategies worked on every
version of every client OS. The only exceptions were Strategies 5, 9,
and 10, each of which failed to work on any of the versions of
Windows and MacOS. These three strategies all involve sending
a SYN+ACK with a payload; Linux’s TCP stack ignores these, but
Windows’ and MacOS’s do not.
However, we can slightly alter Strategies 5, 9, and 10 to make
them work with all clients. The key insight is that these strategies
work on Linux precisely because Linux ignores the payload (but
censors do not). However, we can modify the strategy in other ways
595
IPTCPSMTPIPTCPHTTPSIPTCPHTTPIPTCPFTPIPTCPDNSIPTCPDNSFTPHTTPHTTPSSMTP(a) Single censorship box(b) Multiple censorship boxes……Network pathCome as You Are: Helping Unmodified Clients
Bypass Censorship with Server-side Evasion
to make the client ignore the packet while the censor still accepts
it; this is commonly referred to as an “insertion” packet, and there
are other ways to create insertion packets [9]. For instance, we can
send the payload packets with a corrupted chksum (so they are
processed by the censor but not the client), and send the original
SYN+ACK packet unmodified afterwards. We re-evaluated these
three strategies with this modification, and found that with this
small change, the strategies worked for all client operating systems.
An area of future work is evolving strategies directly against many
operating systems to avoid requiring these post-hoc modifications.
Results Can Vary by Network We close this section with an
anecdotal observation. In addition to the tests on our private net-
work, we also tested all strategies from a Pixel 3 running Android
10 on wifi and two cellular networks: T-Mobile, and AT&T in a
non-censoring country (anonymized for submission). All strategies
worked over wifi, and all worked on the two cellular networks
except Strategies 1 and 3 for T-Mobile and Strategies 1, 2, and 3
(all of the simultaneous open strategies) for AT&T. We speculate
that the failures were caused by other in-network middleboxes.
This indicates that, while the client may not be an issue with some
server-side strategies, the client’s network might.
These results collectively demonstrate that, when deploying
server-side strategies, it is important to test across a wide range of
clients and network middleboxes. Fortunately, many of the strate-
gies we have found appear to work across a very wide range of
networks and client types, but for practical deployments, a global
study of network compatibility would be an important and inter-
esting avenue of future work.
8 DEPLOYMENT CONSIDERATIONS
Where to Deploy? Though we refer to them as “server-side,” the
strategies we have presented could be deployed at any point in