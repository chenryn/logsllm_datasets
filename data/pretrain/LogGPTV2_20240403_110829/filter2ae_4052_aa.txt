**Author: Badcode@知道创宇404实验室  
Date: 2018/09/04**
### 背景
ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序。2018年6月13日，知道创宇404积极防御团队通过知道创宇旗下云防御产品“创宇盾”防御拦截并捕获到一个针对某著名区块链交易所网站的攻击，通过分析，发现攻击者利用的正式ECShop
2.x版本的0day漏洞攻击。于2018年6月14日，提交到知道创宇Seebug漏洞平台并[收录](https://www.seebug.org/vuldb/ssvid-97343)。
随后于2018年8月31日，ID为“ringk3y”研究人员在其博客公开这个[漏洞](http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/)，并做了详细分析，该分析收录在[Seebug
Paper](https://paper.seebug.org/691/)。
知道创宇404积极防御团队于2018年9月2日正式对外发布[《ECShop全系列版本的远程代码执行漏洞》](https://www.yunaq.com/news/5b8ca434796db41371c1cf45/)预警。
从2018年的6月13日首次拦截后，知道创宇404实验室多个团队对这个利用ECShop
0day攻击事件进行持续的监控分析，从下文的分析结果可以看出一个0day漏洞在实际攻击中的各个阶段的“堕落”过程。
### 漏洞分析
该漏洞影响ECShop
2.x和3.x版本，是一个典型的“二次漏洞”，通过`user.php`文件中`display()`函数的模板变量可控，从而造成SQL注入漏洞，而后又通过SQL注入漏洞将恶意代码注入到危险函数`eval`中，从而实现了任意代码执行。
值得一提的是攻击者利用的payload只适用于ECShop 2.x版本导致有部分安全分析者认为该漏洞不影响ECShop
3.x，这个是因为在3.x的版本里有引入防注入攻击的安全代码，通过我们分析发现该防御代码完全可以绕过实现对ECShop 3.x的攻击（详见下文分析）。
注：以下代码分析基于ECShop 2.7.3
#### SQL 注入漏洞
首先看到`ecshop/user.php`
    elseif ($action == 'login')
    {
        if (empty($back_act))
        {
            if (empty($back_act) && isset($GLOBALS['_SERVER']['HTTP_REFERER']))
            {
                $back_act = strpos($GLOBALS['_SERVER']['HTTP_REFERER'], 'user.php') ? './index.php' : $GLOBALS['_SERVER']['HTTP_REFERER'];
            }
            else
            {
                $back_act = 'user.php';
            }
        }
        $captcha = intval($_CFG['captcha']);
        if (($captcha & CAPTCHA_LOGIN) && (!($captcha & CAPTCHA_LOGIN_FAIL) || (($captcha & CAPTCHA_LOGIN_FAIL) && $_SESSION['login_fail'] > 2)) && gd_version() > 0)
        {
            $GLOBALS['smarty']->assign('enabled_captcha', 1);
            $GLOBALS['smarty']->assign('rand', mt_rand());
        }
        $smarty->assign('back_act', $back_act);
        $smarty->display('user_passport.dwt');
    }
可以看到`$back_act`是从`HTTP_REFERER`获取到的，`HTTP_REFERER`是外部可控的，这也是万恶的根源。
接着将`back_act`变量传递给`assign`函数，跟进`ecshop/includes/cls_template.php`
       /**
         * 注册变量
         *
         * @access  public
         * @param   mix      $tpl_var
         * @param   mix      $value
         *
         * @return  void
         */
        function assign($tpl_var, $value = '')
        {
            if (is_array($tpl_var))
            {
                foreach ($tpl_var AS $key => $val)
                {
                    if ($key != '')
                    {
                        $this->_var[$key] = $val;
                    }
                }
            }
            else
            {
                if ($tpl_var != '')
                {
                    $this->_var[$tpl_var] = $value;
                }
            }
        }
可以从注释了解这个函数的功能，是注册模板变量，也就是`$back_act`变成了`$this->_var[$back_act]=$back_act`，而后调用`display`函数
        function display($filename, $cache_id = '')
        {
            $this->_seterror++;
            error_reporting(E_ALL ^ E_NOTICE);
            $this->_checkfile = false;
            $out = $this->fetch($filename, $cache_id);
            if (strpos($out, $this->_echash) !== false)
            {
                $k = explode($this->_echash, $out);
                foreach ($k AS $key => $val)
                {
                    if (($key % 2) == 1)
                    {
                        $k[$key] = $this->insert_mod($val);
                    }
                }
                $out = implode('', $k);
            }
            error_reporting($this->_errorlevel);
            $this->_seterror--;
            echo $out;
        }
从`user.php`调用`display`函数，传递进来的`$filename`是`user_passport.dwt`，从函数来看，首先会调用`$this->fetch`来处理`user_passport.dwt`模板文件，`fetch`函数中会调用`$this->make_compiled`来编译模板。`user_passport.dwt`其中一段如下：
                &nbsp;
`make_compiled`会将模板中的变量解析，也就是在这个时候将上面`assign`中注册到的变量`$back_act`传递进去了，解析完变量之后返回到`display`函数中。此时`$out`是解析变量后的html内容，判断`$this->_echash`是否在`$out`中，若在，使用`$this->_echash`来分割内容，得到`$k`然后交给`insert_mod`处理。
由于`_echash`是默认的，不是随机生成的，所以`$val`内容可随意控制。跟进`$this->insert_mod`
        function insert_mod($name) // 处理动态内容
        {
            list($fun, $para) = explode('|', $name);
            $para = unserialize($para);
            $fun = 'insert_' . $fun;
            return $fun($para);
        }
`$val`传递进来，先用`|`分割，得到`$fun`和`$para`，`$para`进行反序列操作，`$fun`和`insert_`拼接，最后动态调用`$fun($para)`，函数名部分可控，参数完全可控。接下来就是寻找以`insert_`开头的可利用的函数了，在`ecshop/includes/lib_insert.php`有一个`insert_ads`函数，正好满足要求。看下`insert_ads`
    /**
     * 调用指定的广告位的广告
     *
     * @access  public
     * @param   integer $id     广告位ID
     * @param   integer $num    广告数量
     * @return  string
     */
    function insert_ads($arr)
    {
        static $static_res = NULL;
        $time = gmtime();
        if (!empty($arr['num']) && $arr['num'] != 1)
        {
            $sql  = 'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, ' .
                        'p.ad_height, p.position_style, RAND() AS rnd ' .
                    'FROM ' . $GLOBALS['ecs']->table('ad') . ' AS a '.
                    'LEFT JOIN ' . $GLOBALS['ecs']->table('ad_position') . ' AS p ON a.position_id = p.position_id ' .
                    "WHERE enabled = 1 AND start_time = '" . $time . "' ".
                        "AND a.position_id = '" . $arr['id'] . "' " .
                    'ORDER BY rnd LIMIT ' . $arr['num'];
            $res = $GLOBALS['db']->GetAll($sql);
        }
    ......
        $ads = array();
        $position_style = '';
        foreach ($res AS $row)
        {
            if ($row['position_id'] != $arr['id'])
            {
                continue;
            }
            $position_style = $row['position_style'];
            switch ($row['media_type'])
            {
    ......
        }
        $position_style = 'str:' . $position_style;
        $need_cache = $GLOBALS['smarty']->caching;
        $GLOBALS['smarty']->caching = false;
        $GLOBALS['smarty']->assign('ads', $ads);
        $val = $GLOBALS['smarty']->fetch($position_style);
        $GLOBALS['smarty']->caching = $need_cache;
        return $val;
    }
`$arr`是可控的，并且会拼接到SQL语句中，这就造成了SQL注入漏洞。
根据上面的流程，可以构造出如下形式的payload
    echash+fun|serialize(array("num"=>sqlpayload,"id"=>1))
实际可利用payload
    Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:"num";s:72:"0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -";s:2:"id";i:1;}
#### 代码执行
继续看`insert_ads`函数
    $position_style = '';
        foreach ($res AS $row)
        {
            if ($row['position_id'] != $arr['id'])
            {
                continue;
            }
            $position_style = $row['position_style'];
            switch ($row['media_type'])
            {
    ......
        $position_style = 'str:' . $position_style;
        $need_cache = $GLOBALS['smarty']->caching;
        $GLOBALS['smarty']->caching = false;
        $GLOBALS['smarty']->assign('ads', $ads);
        $val = $GLOBALS['smarty']->fetch($position_style);
        $GLOBALS['smarty']->caching = $need_cache;
        return $val;
可以看到在SQL查询结束之后会调用模板类的`fetch`方法，在`user.php`中调用`display`，然后调用`fetch`的时候传入的参数是`user_passport.dwt`，而在此处传入的参数是`$position_style`，向上溯源，发现是`$row['position_style']`赋值而来，也就是SQL语句查询的结果，结果上面这个SQL注入漏洞，SQL查询的结果可控，也就是`$position_style`可控。
要到`$position_style =
$row['position_style'];`还有一个条件，就是`$row['position_id']`要等于`$arr['id']`，查询结果可控，`arr['id']`同样可控。
之后`$position_style`会拼接`'str:'`传入`fetch`函数，跟进`fetch`
    /**
         * 处理模板文件
         *
         * @access  public
         * @param   string      $filename
         * @param   sting      $cache_id
         *
         * @return  sring
         */
        function fetch($filename, $cache_id = '')
        {
            if (!$this->_seterror)
            {
                error_reporting(E_ALL ^ E_NOTICE);
            }
            $this->_seterror++;