    script.async = false;
    var loc;
    if (AMP_MODE.test && window.testLocation) {
        loc = window.testLocation
    } else {
        loc = window.location;
    }
    if (AMP_MODE.localDev) {
        loc = loc.protocol + "//" + loc.host + "/dist"
    } else {
        loc = "https://cdn.ampproject.org";
    }
    var singlePass = AMP_MODE.singlePassType ? AMP_MODE.singlePassType + "/" : "";
    b.src = loc + "/rtv/" + AMP_MODE.rtvVersion; + "/" + singlePass + "v0/" + pluginName + ".js";
    document.head.appendChild(b);
代码比较简单，如果再要简化到核心代码就是：
    var script = window.document.createElement("script");
    script.async = false;
    b.src = window.testLocation.protocol + "//" +
            window.testLocation.host + "/dist/rtv/" +
            AMP_MODE.rtvVersion; + "/" +
            (AMP_MODE.singlePassType ? AMP_MODE.singlePassType + "/" : "") +
            "v0/" + pluginName + ".js";
    document.head.appendChild(b);
所以我们可以用 Dom Clobbering 来让它加载我们任意的 js 文件，直接劫持`protocol`到我们任意
URL，再利用`#`注释掉后面的即可。
虽然 URL 构造出来了，但是 Google 还有 CSP
    Content-Security-Policy: default-src 'none';
    script-src 'sha512-oQwIl...=='
      https://cdn.ampproject.org/rtv/
      https://cdn.ampproject.org/v0.js
      https://cdn.ampproject.org/v0/
虽然他当时没绕过，但是 Google 还是全额地给了他奖金。
另外这个 CSP 可以利用`..%252f`的 trick 进行绕过，由于不属于这篇文章的范围，这里就不详述了，感兴趣的同学可自行搜索。
这里由于篇幅关系，就不再列举更多的例子了，我会把最近自己做的一些 XSS Game 中涉及到 Dom Clobbering 的部分以 Tip 的形式写出来。
## Thinking
既然我们一开始提到过或许可以覆盖某些属性，那么我们可不可以覆盖或者说完全控制`document.cookie`呢？究竟我们可以覆盖哪些呢？又可以怎么利用呢？哪些可以用
ID 哪些用 Name呢？
接下来我们来看最后一个问题：哪些用 id 哪些用 name ？
### Document & Id
    var html = [...];//HTML elements array
    var log = [];
    var div = document.createElement("div");
    for (var i = 0; i ";
      document.body.appendChild(div);
      if (document.x == document.getElementById('x') && document.x != undefined) {
        log.push(html[i]);
      }
      document.body.removeChild(div);
    }
    console.log(log);
我们可以得到只有`object`标签`document`可以通过 id 进行直接获取
    ["object"]
### Document & Name
    document.x == document.getElementsByName("x")[0] && document.x != undefined
我们可以得到以下五个元素可以让`document`通过 name 进行直接获取
    ["embed", "form", "image", "img", "object"]
### Document & Name & Id
    var html = [...];//HTML elements array
    var log = [];
    var div = document.createElement("div");
    for (var i = 0; i ";
      document.body.appendChild(div);
      if (
        document.x == document.getElementsByName("y")[0] && document.x != undefined
      ) {
        log.push(html[i]);
      }
      document.body.removeChild(div);
    }
    console.log(log);
我们可以得到一下三个元素：
    ["image", "img", "object"]
### Window & Id
    var html = [...];//HTML elements array
    var log = [];
    var div = document.createElement("div");
    for (var i = 0; i ";
      document.body.appendChild(div);
      if (window.x == document.getElementById('x') && window.x != undefined) {
        log.push(html[i]);
      }
      document.body.removeChild(div);
    }
    console.log(log);
除了在 Not Clobbered 部分的标签，其他标签`window`均可通过 id 进行直接获取
    (128) ["a", "abbr", "acronym", "address", "applet", "area", "article", "aside", "audio", "b", "base", "basefont", "bdi", "bdo", "bgsound", "big", "blink", "blockquote", "br", "button", "canvas", "center", "cite", "code", "command", "content", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "embed", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "header", "hgroup", "hr", "i", "iframe", "iframes", "image", "img", "input", "ins", "isindex", "kbd", "keygen", "label", "legend", "li", "link", "listing", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "multicol", "nav", "nextid", "nobr", "noembed", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "plaintext", "pre", "progress", "q", "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "script", …]
### Window & Name
    window.x == document.getElementsByName("x")[0] && window.x != undefined
这里与 document 一致，只有五个标签可以让`window`通过 name 进行直接获取
    ["embed", "form", "image", "img", "object"]
### 'Not Clobbered'
    ["body", "caption", "col", "colgroup", "frame", "frameset", "head", "html", "tbody", "td", "tfoot", "th", "thead", "tr"]
PS: 这部分并不是真正不能 Clobbered ，因为比如说`body`，因为我本身界面存在一个`body`标签，只是在我测试构建的简单的 HTML
页面中，这些标签不能被 Clobbered ，而且在实际中也用到比较少。并且根据 Chromium 中的说法是"but anything by
id"，所以如果需要通过`Window.id`的形式去获取标签的话，还有很多标签可以使用，或者也可以尽力去构建下文的要求。
### Dom Doc
其实在 Dom 标准中也有提及过这部分，在[A part of Document
interface](https://html.spec.whatwg.org/multipage/dom.html#dom-document-currentscript) 这一段中，我们可以看到有相关规定：
> ​ The `Document` interface [supports named
> properties](https://heycam.github.io/webidl/#dfn-support-named-properties).
> The [supported property names](https://heycam.github.io/webidl/#dfn-> supported-property-names) of a `Document` object document at any moment
> consist of the following, in [tree
> order](https://dom.spec.whatwg.org/#concept-tree-order) according to the
> element that contributed them, ignoring later duplicates, and with values
> from `id` attributes coming before values from `name` attributes when the
> same element contributes both:
>
>   * the value of the `name` content attribute for all
> [exposed](https://html.spec.whatwg.org/multipage/dom.html#exposed) `embed`,
> `form`, `iframe`, `img`, and
> [exposed](https://html.spec.whatwg.org/multipage/dom.html#exposed) `object`
> elements that have a non-empty `name` content attribute and are [in a
> document tree](https://dom.spec.whatwg.org/#in-a-document-tree) with
> document as their [root](https://dom.spec.whatwg.org/#concept-tree-root);
>   * the value of the `id` content attribute for all
> [exposed](https://html.spec.whatwg.org/multipage/dom.html#exposed) `object`
> elements that have a non-empty `id` content attribute and are [in a document
> tree](https://dom.spec.whatwg.org/#in-a-document-tree) with document as
> their [root](https://dom.spec.whatwg.org/#concept-tree-root); and
>   * the value of the `id` content attribute for all `img` elements that have
> both a non-empty `id` content attribute and a non-empty `name` content
> attribute, and are [in a document tree](https://dom.spec.whatwg.org/#in-a-> document-tree) with document as their
> [root](https://dom.spec.whatwg.org/#concept-tree-root).
>
也有关于[ Window 对象的部分](https://html.spec.whatwg.org/multipage/window-object.html#named-access-on-the-window-object)：
> ​ The `Window` object [supports named
> properties](https://heycam.github.io/webidl/#dfn-support-named-properties).
> The [supported property names](https://heycam.github.io/webidl/#dfn-> supported-property-names) of a `Window` object window at any moment consist
> of the following, in [tree order](https://dom.spec.whatwg.org/#concept-tree-> order) according to the element that contributed them, ignoring later
> duplicates:
>
>   * window's [document-tree child browsing context name property
> set](https://html.spec.whatwg.org/multipage/window-object.html#document-> tree-child-browsing-context-name-property-set);
>   * the value of the `name` content attribute for all `embed`, `form`,
> `img`, and `object` elements that have a non-empty `name` content attribute
> and are [in a document tree](https://dom.spec.whatwg.org/#in-a-document-> tree) with window's [associated
> `Document`](https://html.spec.whatwg.org/multipage/window-> object.html#concept-document-window) as their
> [root](https://dom.spec.whatwg.org/#concept-tree-root); and
>   * the value of the `id` content attribute for all [HTML
> elements](https://html.spec.whatwg.org/multipage/infrastructure.html#html-> elements) that have a non-empty `id` content attribute and are [in a
> document tree](https://dom.spec.whatwg.org/#in-a-document-tree) with
> window's [associated
> `Document`](https://html.spec.whatwg.org/multipage/window-> object.html#concept-document-window) as their
> [root](https://dom.spec.whatwg.org/#concept-tree-root).
>
### Window
关于 window 对象，虽然 window 对象可以通过 id 直接获取标签，但是我目前还没发现可以直接通过标签 id 进行 clobber
的属性，毕竟是基于 Dom 的攻击技术。
### Document
至于 Document 对象，我列举了一下 Document 对象特有的属性以及其对应的类型：
Class | Attr  
---|---  
DOMImplementation | ["implementation"]  
HTMLCollection | ["images", "embeds", "plugins", "links", "forms", "scripts",
"anchors", "applets", "children"]  
String | ["documentURI", "compatMode", "characterSet", "charset",
"inputEncoding", "contentType", "domain", "referrer", "cookie",
"lastModified", "readyState", "title", "dir", "designMode", "fgColor",
"linkColor", "vlinkColor", "alinkColor", "bgColor", "visibilityState",
"webkitVisibilityState", "nodeName", "baseURI"]  
HTMLBodyElement | ["body", "activeElement"]  
HTMLHeadElement | ["head"]  
HTMLScriptElement | ["currentScript"]  
HTMLAllCollection | ["all"]  
NodeList | ["childNodes"]  
Window | ["defaultView"]  
DocumentType | ["doctype", "firstChild"]  
Boolean | ["xmlStandalone", "hidden", "wasDiscarded", "webkitHidden",
"fullscreenEnabled", "fullscreen", "webkitIsFullScreen",
"webkitFullscreenEnabled", "pictureInPictureEnabled", "isConnected"]  
FontFaceSet | ["fonts"]  
StyleSheetList | ["styleSheets"]  
Function | ["getElementsByTagName", "getElementsByTagNameNS",
"getElementsByClassName", "createDocumentFragment", "createTextNode",
"createCDATASection", "createComment", "createProcessingInstruction",
"importNode", "adoptNode", "createAttribute", "createAttributeNS",
"createEvent", "createRange", "createNodeIterator", "createTreeWalker",
"getElementsByName", "write", "writeln", "hasFocus", "execCommand",
"queryCommandEnabled", "queryCommandIndeterm", "queryCommandState",
"queryCommandSupported", "queryCommandValue", "clear", "exitPointerLock",
"createElement", "createElementNS", "caretRangeFromPoint", "elementFromPoint",
"elementsFromPoint", "getElementById", "prepend", "append", "querySelector",
"querySelectorAll", "exitFullscreen", "webkitCancelFullScreen",
"webkitExitFullscreen", "createExpression", "createNSResolver", "evaluate",
"registerElement", "exitPictureInPicture", "hasChildNodes", "getRootNode",
"normalize", "cloneNode", "isEqualNode", "isSameNode",
"compareDocumentPosition", "contains", "lookupPrefix", "lookupNamespaceURI",
"isDefaultNamespace", "insertBefore", "appendChild", "replaceChild",