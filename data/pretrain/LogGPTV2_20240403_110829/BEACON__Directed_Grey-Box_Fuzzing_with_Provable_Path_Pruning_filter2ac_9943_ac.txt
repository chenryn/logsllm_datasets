S1 Ð joinPathsp ˆwpplq, φ1q
if S1 ‰ ˆwpplq then
updated Ð true
ˆwpplq Ð S1
Algorithm 2 Backward interval analysis
Input: target t “ xl0 : i : l1
Output: ˆwp : Location Ñ tconditionu
1: procedure PRECONDINFER(t)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
end for
24:
end while
25:
26: end procedure
27: procedure JOINPATHS(conds, φ1)
28:
29:
30:
31:
32: end procedure
c Ð pickOnepcondsq
newabs Ð αpφ1q \ αpcq
c1 Ð γpnewabsq
return condsztcu Y tc1u
end if
if updated then
end if
end for
end if
$’&’%true,
a ď v ď b,
f alse,
vPdompΛq
if Λpvq “ J
else if Λpvq “ ra, bs
otherwise
conspvq “
With the help of interval abstraction, we soundly combine
different backward paths at l. ˆwpplq is a summary that records
the already propagated conditions at l, in the form of interval
abstractions. When a newly computed condition φ1 reaches
l, we ﬁrst check if ˆwpplq is empty (Line 9 of Algorithm 2,
for now assume threshold “ 1). If this is the case, φ1 is
recorded in ˆwpplq. Otherwise we combine φ1 with ˆwpplq in
joinPaths (Line 13) by joining2 αpφ1q and αpcq into a new
abstract element newabs, where c is the only condition in
ˆwpplq (Line 29). We then use the concretization function γ
to map newabs back to the constraints (Line 30), and set it
as the new value of ˆwpplq. Finally, if ˆwpplq has an update,
the newly added condition further propagates backwards by
entering the worklist (Lines 19-23).
Notice that the use of the interval abstraction enables us
to efﬁciently reason about path conditions. Additionally, by
always combining the newly discovered abstract elements
with the join operation, all backward paths are soundly over-
approximated without enumeration, alleviating the path explo-
sion problem. In the previous example, if ˆwppl8q “ tpc1u, and
a new condition pc2 propagates to l8, the abstraction of pc1
and pc2 are as follows:
Abstraction
αppc1q
αppc2q
αppc1q \ αppc2q
v
p´8, 60q
p´8, 60q
p´8, 60q
p´8, 5q
p25,`8q
w
J
x
r20, 40q
p´8, 20q
p´8, 40q
y
p´8, 100q
p´8, 80q
p´8, 100q
z
p´8, 200q
p´8, 160q
p´8, 200q
In joinPaths, we combine the two paths by joining the
interval abstractions of pc1 and pc2, and replace pc1 in ˆwppl8q
with c1 “ γpαppc1q \ αppc2qq ” v ă 60 ^ x ă 40 ^ y ă
100 ^ z ă 200. Since the new condition is different from
pc1 meaning that ˆwppl8q has been updated, c1 is propagated
backwards further, summarizing the effects of both paths.
The interval abstraction used in the above analysis can be
imprecise in practice. We propose two optimization methods
that improve its precision without harming its speed too much:
1) We design an interval abstraction α that tracks certain
inter-variable relations explicitly.
2) We design a bounded disjunction strategy that determines
when and how to perform the join operations.
C. Optimizations for Maintaining Precision
Relationship Preservation. The interval abstraction α is
used in Algorithm 2 to deduce ranges for variables occurring
in the path conditions. To make the inferred ranges both sound
and precise, we design the inference rules shown in Figure 5
to perform the interval abstraction.
2join is replaced by widening after a ﬁnite number of steps to ensure
termination, as is standard in abstract interpretation [32].
41
for all e “ xl2 : inst : ly do
wl Ð wlYtpe, ˆwpplq.lastAddedElemqu
As dicussed in II-B, reasoning complex conditions such as
pc1 and pc2 are hard, which usually requires a prohibitively
expensive SMT solver. Moreover, since the two paths p1 and
p2 conﬂuence at l8, their effects need to be combined in
ˆwppl8q to maintain soundness with certain precision loss. To be
efﬁcient, we propose to use an interval abstraction to support
both lightweight reasoning of path conditions and a sound
over-approximation of backward paths.
To this end, we utilize an abstraction function α (discussed
later) that abstracts the path condition into the lifted interval
domain Λ : V Ñ Interval, where Interval def“ tra, bs | a ď
b, a P IntegerYt´8u, b P IntegerYt`8uuYtKu. We use J
to denote the interval with a “ ´8, b “ `8, K to denote the
empty interval, and the notation pa, bq to represent an open
interval. Its corresponding concretization function γ maps the
abstracted value back to the logical constraints in a straightfor-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
e P E Y B, Λpeq P Interval
pΛ, eq ó val
updatepΛ, e, valq
pΛ, b1 ^ b2q ó true
pΛ, b1q ó true,pΛ, b2q ó true
pΛ,(cid:32)b1q ó b, b P ttrue, f alseu
pΛ, b1q ó (cid:32)b
pΛ, cq ó rc, cs
Λpe1q “ itv1, Λpe2q “ itv2
pΛ, e1 binOp e2q ó pitv1
{binOp itv2q
Λpe cmp cq “ true
$’&’%p´8, cq,
rc, cs,
pc,`8q
cmp “ “ ă ”
cmp “ “ “ ”
cmp “ “ ą ”
pΛ, eq ó
pΛ, e1q ó
ra, bs,
pa,`8q
Λpe1 cmp e2q “ true, Λpe2q “ ra, bs
cmp “ “ ă ”
cmp “ “ “ ”
cmp “ “ ą ”
Λpe1 op e2q “ ra, bs, Λpe2q “ rc, ds
$’&’%p´8, bq,
pΛ, e1q ó ra, bs revpxopq rc, ds
$’&’%Λre ÞÑ vs,
e R dompΛq
K,
Λpeq [ v “ K
Λre ÞÑ Λpeq [ vs, otherwise
updatepΛ, e, vq “
updatepΛ, e, valq “ K
U N SAT
(7)
(8)
(9)
(10)
(1)
(2)
(3)
(4)
(5)
(6)
Figure 5: Inference rules for interval abstraction. Especially, we design the rules (7) and (8) for interval analysis transformer
to maintain relations among variables during the precondition inference.
Newly Discovered Intervals
BEACON
Expression
1(cid:13) v ă 60
Rule (6), v P p´8, 60q
2(cid:13) x ă 20
Rule (6), x P p´8, 20q
3(cid:13) w ą 25
Rule (6), w P p25,`8q
4(cid:13) v “ y ´ x Rule p7q, y ´ x P p´8, 60q
5(cid:13) y ´ x
Rule p8q, y P p´8, 80q
Rule (5), 2y P p´8, 160q
6(cid:13) 2y
7(cid:13) z ă 2y
Rule p7q, z P p´8, 160q
Conventional
v P p´8, 60q
x P p´8, 20q
w P p25,`8q
v P p´8,`8q
N/A
N/A
Ź
Figure 6: Example of interval abstraction inference for pc2 “
tz ă 2y, v ă 60, x ă 20, v “ y ´ x, w ą 25u using
our inference rules and by conventional interval analysis. N/A
means no inference rule is applicable.
z P p´8,`8q
In the conventional interval analyses [38], [39], each state-
ment occurring in the program transforms the interval abstract
state. In similar spirits, we design a top-down analysis that
performs a recursive descent traversal over the path conditions
and propagates the known interval values along the way to
infer new interval values in a sound manner by respecting
laws of interval arithmetic [40]. Unlike conventional interval
analysis, our analysis tracks intervals for not only variables but
also expressions occurring in the path conditions. Afterward,
we propagate these value ranges of expressions to their parents
and child expressions to make the analysis more precise.
In Figure 5, we use Λ to represent a map from expressions
to their interval value ranges. For convenience, the boolean
constants true, f alse are represented as interval r1, 1s,r0, 0s
the inference starts with
respectively. Given constraint e,
pΛ, eq ó true. pΛ, eq ó val means that a new interval value val
has been inferred for e, and triggers updatepΛ, e, valq (Rule
(1)). If we derive a contradiction from the old interval Λpeq and
the new interval val, the entire condition is indeed unsatisﬁ-
able, and the computation ends. Otherwise, Λpeq is updated by
42
intersecting val (Rules (9)-(10)). Rules (2)-(3) recurses down
and carries the interval values to the sub-logical formulas.
Rules (4)-(6) corresponds to the abstract state transformer used
in conventional interval analysis: a constant c gets range rc, cs
(Rule (4)); In Rule (5), the arithmetic operation, op, and the
comparison operation, cmp, (denoted uniformly by binOp) are
replaced by their interval counterparts: pop P tp`,p´,pˆ,p˜u and
ycmp P tpă,pą,p“u, respectively; Rule (6) updates the range of
an expression based on the conditional test against a constant
(The case when Λpe1 cmp cq “ false is similar and omitted).
Rules (7)-(8) encode heuristics to improve the precision
of the interval abstraction. In these rules, we try to reﬁne
the range of a given expression based on the updated ranges
of other expressions. Rule (7) extends Rule (6) to consider
the comparison between any two expressions, utilizing the
range of one expression and the comparison result to reﬁne
the range of the other expression. In Rule (8), when the
parent expression is an arithmetic expression e1 op e2 and
its range is updated to ra, bs, we can reﬁne the range of
its operand by reversing the binary operator in the interval
domain: revpp`q “ p´, revppˆq “ p˜, etc. Since the expressions
in Rules (7)-(8) may preserve certain inter-variable relations
not captured by the conventional interval domain, these rules
may bring precision improvement through reﬁnement.
Figure 6 shows how we apply these inference rules on a
simpliﬁed version of condition pc2. Starting with pΛ, pc2q ó
true, we deduce from the conjunction in pc2 and rule (2) that
all conjunct subexpressions z ă 2y, v ă 60, x ă 20, v “
y ´ x, w ą 25 are true. Subexpreesions that compares a
variable with a constant enable us to infer ranges for the
involved variables (Steps 1(cid:13) ´ 3(cid:13)). Step 4(cid:13) propagates the
known interval for v to expression y ´ x. Step 5(cid:13) uses the
updated range of y´x to reﬁne the interval of its subexpression
y to Λpy´xqp`Λpxq “ p´8, 60qp`p´8, 20q “ p´8, 80q, and
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:18 UTC from IEEE Xplore.  Restrictions apply. 
the reﬁned interval for y in turn propagates to 2y, z in 6(cid:13)´ 7(cid:13).
Steps 4(cid:13), 5(cid:13), 7(cid:13) of our approach in Figure 6 clearly shows
that our additional
inference rules (7)-(8) utilize the rela-
tions among variables encoded in the form of expression
to propagate the interval values, and hence achieve higher
precison. If we solely apply the abstract state transformers
of the interval domain to conjuncts of pc2, as in conventional
interval analysis, the result is not as precise as what our rules
produce. The rightmost column of Figure 6 shows that the
conventional interval analysis can obtain the same intervals
for v, x, w in 1(cid:13) ´ 3(cid:13). However, it can not further reﬁne the
range for y and z: At Step 4(cid:13) when facing the expression,
v “ y ´ x, the conventional interval analysis tries to deduce
the interval of v by subtracting interval of x from the interval
of y. Since y is unbounded at 4(cid:13), no useful intervals can be
inferred. Moreover, since the conventional method does not
track the range of the expression v “ y ´ x, it has lost all the
relations among variables occurring in the expression, leading
to imprecise results for y and z.
Bounded Disjunctions. As discussed in Section III, by
keeping the propagated conditions from different paths sep-
arately, and selectively joining them, we stand a better chance
of gaining precision. Speciﬁcally, we design a bounded dis-
junctions strategy to maintain precision during the backward
propagation. With a given bound threshold, we preserve the
propagated conditions to a program location l in a set ˆwpplq,
detailed in Algorithm 2. When the number of paths reaching l
is less than the threshold, their conditions are kept separately
in ˆwpplq and propagate backwards individually (Lines 9-
11). Therefore, we can take the precision beneﬁts from the
disjunctive form whenever the size is less than threshold.
With threshold ą 1, Algorithm 2 outputs a set of abstracted
conditions in ˆwpplq when it ﬁnishes. We obtain the ﬁnal
precondition through a disjunction over ˆwpplq. For example,
with the two paths p1 and p2 reaching line, l8, in Figure 2,
the precondition at l8 on w is w P p´8, 5q_p25,`8q, which
comes from an explicit disjunction of interval abstractions
αppc1q and αppc2q. Nonetheless, the number of paths could
grow extremely large. Thus, we still need to join parts of the
interval abstraction from different paths for efﬁciency.
This is carried out by the joinPath function in Algorithm 2:
When a new condition, φ1, propagates to line, l, but the size of
ˆwpplq has already reached the predeﬁned threshold (Line 13),
we pick one of the stored conditions in ˆwpplq, denoted by c
(Line 28), and join the interval abstractions of φ1 and c (Line
29). The joint result is concretized, and replace c in ˆwpplq,
keeping the number of tracked conditions in ˆwpplq lower than
the threshold.
Different choices of conditions to join may lead to different
damages of precision. For example, in Figure 7, there are
different levels of precision losses of joining the interval ab-