115
字符表示法
Character Representations
这一组元字符能够以清晰美观的方式匹配其他方式中很难描述的某些字符。
字符缩略表示法
许多工具软件提供了表示某些控制字符的元字符，其中有一些在所有机器上都是不变的，
但也有些是很难输人或观察的：
a警报（例如，在“打印”时扬声器发声）。通常对应ASCII中的字符，八进
制编码007。
b退格通常对应ASCII中的字符，八进制编码010。（在许多流派中，\b只有
在字符组内部才表示这样的意义，否则代表单词分界符?133）。
\eEscape字符通常对应ASCII中的字符，八进制编码033。
\f进纸符通常对应ASCII中的字符，八进制编码014。
\n换行符出现在几乎所有平台（包括Unix和DOS/Windows）上，通常对应ASCII
的字符，八进制编码012。在MacOS中通常对应ASCII的字符，十进
制编码015。在Java或任意一种.NET语言中，不论采用什么平台，都对应
ASCII字符。
\r回车通常对应ASCII的字符。在MacOS中，对应到ASCII的字符。在
Java或任意一种.NET语言中，不论采用什么平台，都对应到ASCII的字符。
\t水平制表符对应ASCII的字符，八进制编码011。
Av垂直制表符对应ASCII的字符，八进制编码013。
表3-6列出了几种常用的工具及它们提供的某些字符缩略表示法。之前已经说过，某些语言
在支持字符串文字时已经提供了同样的字符缩略表示法。请不要忘记那一节（?101），因
为它涉及某些相关的陷阱。
会根据机器变化的字符？
从该表可以看出，在许多工具中，\n和\r的意义是随操作系统的变化而变化的（注11)，
请使用\n。如果需要一个对应特殊值的字符，例如HTTP协议定义的分隔符，请使用\012
注11：如果工具软件本身是用C或者C++写的，将其中的正则表达式反斜线转义转换为C的反
斜线转义，结果取决于编译器。在现实中，在特定平台的各种编译器对换行符的支持是
有统一标准的，所以我们可以认为这个问题只与操作系统相关。不过，因为只有r和\n
的惠义会根据操作系统的变化（在一定程度上，也与时间有关），可以认为其他的字符在
所有系统上都是统一的。
---
## Page 142
116
第3章：正则表达式的特性和流派概览
表3-6：几款工具软件及它们提供的元字符简写法
单词
退格
警报
ASCII
进纸符换行符回车符制表符垂直
分界符字符
Escape
制表符
1b
1b
la
le
\f
In
Ir.
21
1v
程序
字符简写
Python
√
c
Tcl
等于y
√
Perl
√c
√
Java
√x
s
√sR
√sR
ss
GNU awk
√
GNU sed
GNU Emacs
s
s
s
s
s
ds
.NET
c
PHP（preg套件）
√c
√
MySQL
GNU grep/egrep
flex
√
Ruby
√
c
√
√
√
√
√支持；√c只在字符组内部支持
√s支持（字符串文字也支持）
Vx支持（但在字符串文字中，同样的序列有不同的意义）
x不支持（但在字符串文字中，同样的序列有不同的意义）
不支持（但字符串文字支持）
本表格假设在每种程序中使用的都是最适合正则表达式的字符串类型
版本信息请参考第91页
之类标准规定的字符（\012是ASCII中的换行符的八进制编码）。如果你希望匹配DOS中
的行终结字符，请使用015\012。如果希望同时匹配DOS或Unix的换行字符，请使用
015？\012（它们通常是匹配行尾的字符，如果希望匹配行的开头位置或结尾位置，请使
用行锚点129)。
八进制转义\num
支持八进制（以8为基数）转义的实现方式通常容许以2到3位数字表示该值所代表的字
节或字符。例如，015\012表示ASCII的CR/LF序列。八进制转义可以很方便地在正则
表达式中插入平时难以输入的字符。例如，在Perl中，我们可以使用e作为ASCII的转
义字符，但是在awk中不行。
---
## Page 143
常用的元字符和特性
117
因为awk支持八进制转义，我们可以直接使用ASCII代码来表示escape字符：\0331。
下一页的表3-7列出了部分工具支持的八进制转义。
有些实现方式很特殊，在其中O能够匹配字节NUL。有的支持一位数字的八进制转义，
不过如果同时支持1之类的反向引用，就不会提供这种功能。如果两者发生冲突，则反
向引用一般要优先于八进制转义。有的容许出现4位数字的八进制转义，不过通常会要求
任何八进制转义都必须以0开头（例如java.uti1.regex)。
你可能会想，如果遇到\565之类超出范围的转义数值（8位的八进制数值范围从\000到
人377）会发生什么。大约一半的实现方式将其视为多余一个字节的值（如果支持Unicode，
则可能是Unicode字符），而其他实现方式会将其截断为一个字节。一般来说，最好的办法
还是不要使用超过\377的八进制转义。
十六进制及Unicode转义：\xnum、\x{num)、\unum、\unum
除了八进制转义之外，许多工具软件也支持十六进制转义（以16为基数），以\x、\u或者
是\U开头。如果支持\x，则\x0D\x0A匹配CR/LF序列。表3-7列出了部分工具软件支持
的十六进制转义。
除了知道采用的是哪种转义之外，你可能还希望知道各种转义能识别多少位的转义值，以
及是否能够（或者必须）在数字两端使用花括号。对此，表3-7同样作了说明。
控制字符：cchar
许多流派中可以用cchar来匹配编码值小于32的控制字符（有些能支持更大的值）。例如，
\cH匹配一个Control-H字符，也就是ASCII中的退格符，而'cJ匹配ASCII的换行符（通
常使用n，不过有时也使用r，这取决于具体的平台115)。
支持此结构的系统在细节上有所不同。与这个例子一样，通常使用大写英文字母是不会有
问题的。在大多数实现方式中，你也可以使用小写字每，不过也有的软件不支持它们，例
如Sun的JavaregexPackage。流派不同，对字母和数字之外的字符的处理是非常不同的，
所以我推荐在使用\c时只使用大写字母。
相关提示：GNUEmacs支持此功能，但它使用的元序列非常奇特?\^char（例如：？\^H匹
配ASCII编码中的退格字符）。
---
## Page 144
118
第3章：正则表达式的特性和流派概览
表3-7：部分工具软件及它们的正则表达式支持的八进制和十六进制转义
反向引用
八进制转义
十六进制转义
Python
\0、\07、\377
\xFF
Tcl
\0、\77、\377
\x.\uFFFF;\UFFFFFFFF
Perl
\0、\77、\377
\xF;\xFF;\x(.-)
Java
\07、\77、10377
\xFF;\uFFFF
GNU awk
\7、\77、1377
GNU sed
GNU Emacs
NET
\0、\77、\377
xFF;\uFFFF
PHP（preg套件）
\0、\77、1377
\xF,\xFF,\x()
MySQL
GNUegrep
GEUgrep
flex
\7、\77、\377
\xF;\xFF
Ruby
√
\7、\77、\377
\xF;\xFF
\0—0匹配字节NUL，而其他一位数字的八进制转义是不支持的。
\7，\77-一位和两位八进制转义都支持
\07——支持开头为0的两位八进制转义
077——支持开头为0的3位八进制转义
\377—支持不超过\377的3位八进制转义
\0377—支持不超过\0377的4位八进制转义
\777
支持不超过\777的3位八进制转义
容许出现任意多位数字
\x{…）一\x{}容许出现任意多位数字
XF、\xFF一以\x开头，容许出现一到两位十六进制转义
\uFFFF一以\u开头的4位十六进制转义
\UFFFF-以\U开头的4位十六进制转义
\UFFFFFFFF—以\U开头的8位十六进制数字（参考第91页的版本信息）
字符组及相关结构
及相天结
Character Classes and Class-Like Constructs
现在许多流派中，都有多种方法在正则表达式的某个位置指定一组字符，不过最通行的方
法还是使用普通字符组。
普通字符组：[a-z]和[^a-z]
我们已经介绍过字符组的基本概念，不过我还是要强调，元字符的规定在字符组内外是有
差别的。例如，在字符组内部*永远都不是元字符，而-通常都是元字符。有些元序列，
例如b，在字符组内外的意义是不一样的（116）。
---
## Page 145
常用的元字符和特性
119
在大多数系统中，字符组内部的顺序环视是无关紧要的，而且使用范围表示法而不是列出
范围内的所有字符并不会影响执行速度（例如，[0-9]与[908176354]是一样的）。相反，
某些实现方式不能完全优化字符组（比如Sun提供的Javaregexpackage），所以最好是使用
范围表示法，因为如果有差别，这种表示法的速度会快一些。
字符组通常表示肯定断言（positiveassertion）。也就是说，它们必须匹配一个字符。排除型
字符组仍然需要匹配一个字符，只是它没有在字符组中列出而已。把排除型字符组理解为
符组的警告）。（^LMNOP]通常等价于（\x00-kQ-\xFF]，即使在规定严格的8位系统中，
这仍然成立，但是在Unicode之类字符的值可能大于255（\xFF）的系统中，排除型字符组
[^LMNOP]可能包括成千上万个字符一只是不包含L、M、N、O和P。
请务必理解使用范围表示法的基本字符组。例如，用[a-Z]匹配字母就很可能存在遗漏，
而且在任何情况下显然都不是“所有字母”。而（a-zA-Z]则能匹配所有字母，至少对于ASCIl
编码来说是这样的（请参考“Unicode属性”中的\p(L)121）。当然，在处理二进制数据
时，字符组中的‘\x80-\xFF’范围表示法完全适用。
几乎能匹配任何字符的元字符：点号
在某些工具软件中，点号用来缩略表示可以匹配任何字符的字符组，而在其他工具中，点
号能匹配除了换行符之外的任何字符。这差别很细微，但如果所用的工具能够处理包含多
个逻辑行的目标文本（或者是文本编辑器中的多个逻辑行的文本），它就非常重要。关于点
号，需要注意的有：
·
在Sun的Javaregexpackage之类的支持Unicode的系统中，点号不能匹配Unicode的
行终结符（109)。
匹配模式（111）会改变点号的匹配规则
·
POSIX规定，点号不能匹配NUL（值为0的字符），尽管大多数脚本语言容许文本中
出现NULL（而且可以用点号来匹配）。
点号，还是排除型字符组
如果所使用的工具能够在多行文本中进行搜索，请务必注意点号，它在通常情况下不能匹
配换行符，而排除型字符组‘（~"]通常都可以。如果把“.*"替换为[^"]*"，可能会带
来意想不到的效果。点号的匹配规定一般可以通过变换匹配模式来更改一一请参考第111
页的“点号通配模式”。
---