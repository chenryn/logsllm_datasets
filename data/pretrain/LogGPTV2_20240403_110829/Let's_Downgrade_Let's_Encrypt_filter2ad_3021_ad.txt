vulnerable to our off-path server-elimination methodologies, but
we have not detected this. The reason is that automated evaluation
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1428is not sensitive to slightly different behaviours or implementations.
For instance, by manually adjusting the IP ID value prediction (see
more details in Appendix, Section E) the attacker has a higher suc-
cess rate to hit the correct IP ID value. An automated evaluation
may not predict the IP ID correctly, due to, say sudden change in
outbound traffic rate from the nameserver. Similarly, nameservers
employ different methodologies for limiting the rate of incoming
queries, e.g., per query, or per source IP, or may simply require a
slightly higher rate of incoming packets. Furthermore, our evalua-
tion against each domain is performed once, to avoid interfering
with the normal functionality of the domain. Our attacker host per-
ceives any losses or noise as a failed evaluation, without repeating
it again.
We do not have false positives. We only mark a successful down-
grade attack in the event when all the VAs in our setup are querying
a single nameserver which our attacker selected.
4 ATTACKS AGAINST LET’S ENCRYPT
In this section we combine the off-path downgrade attack with BGP
same- and sub-prefix hijacks, to obtain fraudulent certificates of
Let’s Encrypt for victim domains. To launch our attacks against
real Internet targets we develop an ethical ‘two-sided’ evaluation
methodology. In Section 4.1 we introduce our experimental setup.
Then, in Section 4.2, we launch our combined attack to issue fraudu-
lent Let’s Encrypt certificates for our own victim domains (which we
registered for that purpose). This demonstrates the vulnerabilities
in Let’s Encrypt. Second, in Section 4.3, we evaluate our combined
attack against our dataset of domains (Section 3.1). Since these are
real domains, in order to evaluate the attack against them ethically
we reproduce the exact setup of Let’s Encrypt in a controlled ex-
perimental environment set up by us. We create our own CA, issue
certificates for the domains in our dataset with our CAs, and then
launch the combined attack to obtain fraudulent certificates signed
by our CA for those domains. This enables us to identify domains
with which the VAs of Let’s Encrypt can be forced to query a server
of attacker’s choice, such that, that nameserver can either be same-
or sub-prefix hijacked by the attacker; because it is hosted on a
network block that can be sub-prefix hijacked, or because of a topo-
logical proximity between the attacker and the target nameserver.
The hijacking BGP announcements are sent locally only to the
router that connects the network with our CA to the Internet, and
are not distributed in the Internet, to avoid impacting the global
routing.
We extend our automated experimental evaluation in Section 3,
and as a next step to the evaluations in 3, we also evaluate prefix
hijack attacks of the nameservers that the VAs query, to obtain
fraudulent certificates, signed by our CA for the victim domains.
We then compare the security of Let’s Encrypt to other popular
CAs in the PKI ecosystem, in Section 4.4. We show that the down-
grade attacks apply to all other CAs. Although, in contrast to Let’s
Encrypt, the other CAs do not guarantee security against MitM
adversaries, our attack nevertheless makes it easier to attack them
even for off-path adversaries.
In Appendix, Section G we show how to exploit fraudulent cer-
tificates signed by our own CA to launch attacks against Email
servers and Web clients.
4.1 Control Setup
We prepare a control plane setup for experimental evaluation of
all our attacks in this section. Our setup of the control plane with
the relevant entities and components is illustrated in Figure 8. We
purchase under RIPE NCC two ASes: AS 1 and AS 6. AS 1 is as-
signed prefix 2.2.4.0/22 and AS 6 is assigned 6.6.6.0/248. AS 6 is the
network controlled by our attacker, which we use for hijacking
the prefix of the network on which the nameserver of our victim
domain is installed. The victim domain has three nameservers, two
nameservers, NS2 and NS3, are on AWS cloud and one nameserver
NS1 is hosted on 2.2.4.0/22. We also set up an Unbound 1.6.7 DNS
resolver on Linux 4.14.11 on 2.2.4.0/22.
From layer 3 point of view AS 6 is connected with a BGP router
to DE-CIX routeserver in Frankfurt through which we have peering
with many (mostly) small partners. AS 1 is connected via a different
upstream provider to the Internet. We configured the BGP routers
on both AS 1 and AS 6 as follows: the BGP router is a Dell run-
ning Ubuntu OS. The router is setup to handle 10Gbps traffic, the
NICs are prepared for XDP (eXpress Data Path), which enables it to
process tens of millions of packets per second per core with com-
modity hardware. We installed Bird 2 on both BGP servers since it
is configurable and provides MRT files (BGP message dumps) that
are easy to dump. We set up BGP sessions, such that the router for
AS 1 announces 2.2.4.0/22 and the router for AS 6 is announcing
the attacker’s prefix 6.6.0.0/24. The Validation Authorities (VAs) of
Let’s Encrypt are located on different network prefixes assigned to
two ASes: AS 16509 and AS 13649. Without the prefix hijack, the
traffic from AS 1 flows to Let’s Encrypt (AS 16509).
Issuing fraudulent Let’s Encrypt certs for our victim domains.
Figure 8: Experimental setup.
4.2 Fraudulent Let’s Encrypt Certificate for Our
Victim Domain
In this section we launch attacks against Let’s Encrypt using our
victim domains.
Setup. We setup a victim domain with three nameservers:
4.2.1
two nameservers NS2 and NS3 are on AWS cloud and one name-
server NS1 is hosted on 2.2.4.0/22, see Figure 8.
4.2.2 Attack. The attack proceeds in three steps. We illustrate the
conceptual components of the attack in Figure 13 in Appendix, Sec-
tion B. In step (A) the adversary applies methodologies in Section 3
to force all the VAs of Let’s Encrypt to perform lookups and domain
8The network prefixes used in the paper are anonymised.
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea14294.3 Attacking Let’s Encrypt-Certified Domains
In previous section we executed attacks against Let’s Encrypt and
issued fraudulent certificates for our own victim domains. During
the evaluation we showed that off-path adversaries can bypass the
validation of the multiVA of Let’s Encrypt, by eliminating name-
servers in a victim domain and forcing all the VAs to perform the
lookup and validation against the attacker-selected nameserver. In
this section we ask do our attacks apply against customer domains
of Let’s Encrypt? In particular, do the domains have the properties
needed for our attacks?
To answer these questions we develop an automated attack to
assess the attack surface of the domains that have certificates with
Let’s Encrypt. We execute our automated attack to perform the first
large scale evaluation of the domains for which off-path adversaries
can issue fraudulent certificates with Let’s Encrypt using our attack
methodologies. The challenge is, however, to develop and evaluate
real attacks, yet ethically, without issuing fraudulent Let’s Encrypt
certificates for real customer domains of Let’s Encrypt. To perform
a realistic execution of our attacks yet consistent with the ethics
we reproduce the deployment of Let’s Encrypt using only the com-
ponents that are relevant to validation and issuance of certificates.
In that setup we configure DNS resolvers on the VAs which we
control. We use these DNS resolvers to execute attacks against real
domains in an ethical way. We explain the setup below.
Setup. On the three9 VAs we set up an Unbound 1.6.7 DNS
4.3.1
resolver on Linux 4.14.11. The VAs are placed on three distinct pre-
fixes, that belong to AS 1. We setup an open-source Boulder ACME
(Automated Certificate Management Environment) implementa-
tion [13] used by Let’s Encrypt. ACME is used by Let’s Encrypt to
automate certificate issuance and management. The components of
Boulder relevant for our evaluation are Registration Authority (RA),
Validation Authority (VA) and Certificate Authority (CA). During
certificate issuance the client (we use Certbot [29]) submits a re-
quest for a certificate. The RA forwards the request to VAs. The
VAs perform validation and return the result to the RA. If validation
succeeds, RA requests the CA to sign the certificate. The RA returns
either a failure, if validation did not succeed, or a signed certificate
to the client that sent the request.
To simulate Let’s Encrypt and issue our own certificates to real
10, which
domains we need to set up a CA. We do this with step-ca
is an online CA supported by ACME. This enables us to use ACME
APIs to issue certificates from our own private CA. To set up the
ACME client we configure the URL and our root certificate. The
certificate issuance is similar to Let’s Encrypt: ACME client creates
an account with ACME server, and uses Certbot to request a certifi-
cate. Our client uses Certbot to send a certificate request to the RA.
The RA performs the domain validation using our three VAs.
4.3.2 Dataset. We search domains that have certificates of Let’s
Encrypt in CT (Certificate Transparency) with crt.sh 11, checking
for CA commonName: R3. We only collect certificates issued in a
single day, by limiting the search to ValidityNotBefore >= 01.04.2021
9Let’s Encrypt uses one primary and three remote VAs and validation succeeds when
correct responses are received at three VAs. Hence, in our evaluation of attacks three
VAs reflect the success of the attacks against the setup of Let’s Encrypt.
10https://github.com/smallstep/certificates
11https://crt.sh/
Figure 9: Obtaining fraudulent certs with each VA in Let’s Encrypt
(ms).
validation against a nameserver of its choice. In our evaluation
we select NS 1, on prefix 2.2.0.0/16 (this is the network which we
own and control). In second step (B) the adversary uses Certbot to
submit request for a certificate for our victim domain. Notice that
step (A) is also initiated with a certificate request for the victim
domain. However, since Figure 13 illustrates logical steps of the
attack, we omit this from the illustration; these steps are described
in detail in Section 3. In step (C) the attacker launches BGP prefix
hijacks to redirect the DNS packets to the attacker’s network (AS
6). The attacker concludes the validation and receives a fraudulent
certificate for our victim domain.
4.2.3 Evaluation. We ran multiple executions of the attack against
our victim domains. Our plot of the duration of the attack in Figure
9 shows that in 99% of the evaluations the attack completes within
2 seconds. The plot measures the time from the issuance of a hi-
jacking BGP announcement and until the fraudulent certificate is
received. The attack, starting with a certificate request submission
with Certbot (after the attacker eliminated the nameservers from
the list of usable nameservers at the VAs) and until the certificate
is received is automated. The duration of the attack is dominated
by the propagation of the malicious BGP announcement and the
convergence delays.
To understand the delays involved in propagation of BGP updates
and routing convergence and their contribution to the overall attack
duration, in addition to evaluations in the wild, we also evaluate
convergence of BGP updates on common routing platforms in a
controlled environment in Section 4.5.
4.2.4 Measurements. All the VAs of Let’s Encrypt are located on
prefixes smaller than /24, which makes them vulnerable to sub-
prefix hijack attacks. We plot the CAs and the domains vulnerable
to sub-prefix hijacks in Figure 10; ‘LE VAs’, in legend, refer to VAs of
Let’s Encrypt, ‘Other CAs’ refer to CAs we evaluated in Section 4.4,
‘LE Domains’ refer to Let’s Encrypt-certified domains, and ‘Alexa
Domains’ refer to our list of 857K-top Alexa domains. Sub-prefix
hijacks succeed deterministically irrespective of the location of
the attacker, however, since they affect the Internet globally they
are more visible. Nevertheless, such attacks often stay under the
radar over long time periods [2, 28]. Since our hijacks are short-
lived, their risk of exposure is significantly reduced. For details on
sub-prefix hijacks see Appendix, Section A.
10001200140016001800200022002400Latency0%20%40%60%80%100%CDFVA-PrimaryVA-EUVA-US-EASTVA-US-WESTSession 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea143000:00:00 and ValidityNotBefore < 02.04.2021 00:00:00. This resulted
in 1,014,056 domains issued by Let’s Encrypt on a single day in April.
We then extract the commonNames in the certificates and lookup
the nameservers for each commonName. For each nameserver we
map its IP address to the IP prefix and origin AS, using the BGP
updates in BGPStream of CAIDA [20] on 1 April.
4.3.3 Attack. The adversary receives a list of domains with name-
servers in an input. For each nameserver in each domain we include
information to which attacks (from Section 3) the nameserver is
vulnerable, the latency to each nameserver, and if the nameserver
is vulnerable to sub-prefix hijack attacks.
For each domain the adversary executes the following attack
steps: (1) submits a request for a certificate, (2) performs nameserver
elimination against the nameservers in the victim domain, (3) hijack
the DNS packet, (4) conclude DV, (5) obtain fraudulent certificate
for a real victim domain signed by our CA.
4.3.4 Measurements of attack surface of vulnerable domains. To
obtain insights about the sizes of the announced BGP prefixes in
the Internet we use the BGPStream of CAIDA [20] and retrieve the
BGP updates and the routing data from the global BGP routing table
from RIPE RIS [53] and the RouteViews collectors [58]. The dataset
used for the analysis of vulnerable sub-prefixes was collected by us
in April 2021.
There are currently 911,916 announced prefixes in the Internet.
From these prefixes we extracted all the announcements with pre-
fixes of ASes which host nameservers of the domains in our dataset
(Table 2). Then, we take the domains that we found vulnerable
to frag. and rate-limit server elimination attacks (Table 2 column
"#Vuln."), and check which domains have nameservers that are on
network blocks smaller than /24 or networks which are topologi-
cally closer to the attacker than to the VAs of Let’s Encrypt. The
former set contains domains on networks that can be hijacked via
a more specific BGP announcement which makes them vulnerable
to sub-prefix hijacks. We obtain 10.6% of the Let’s Encrypt certified
domains and 11.75% Alexa domains. Namely, against these domains
our off-path attacker can force Let’s Encrypt to query a nameserver
of its choice, which can be sub-prefix hijacked since it is on a net-
work block less than /24, see Figure 10; the legend is explained in
Section 4.2.4.
The latter contains domains on networks which can be inter-
cepted via same-prefix BGP hijacks. We find that our attacker can
intercept the prefixes from above 30% of the ASes with victim do-
mains, causing the network with the VAs in our setup to accept the
hijacking BGP announcements of the attacker and as a result send
DNS packets through the attacker.
4.4 Comparison to Other Popular CAs
We evaluated our attack methodologies also with other CAs that
control more than 95% of the certificates market, listed in Table
4. Our evaluation was performed against the popular 857K-top
Alexa domains. The results are listed in Table 4. For success, only
Let’s Encrypt requires that multiple vantage points receive the
same responses. In contrast, other CAs, even when selecting an IP
address from a large prefix, such as Certum-Google, perform the
validation with a single IP address.
Figure 10: Network prefixes of CAs’ resolvers and of domains’ name-
servers vulnerable to sub-prefix hijacks.
CA #Vantage
Points
Digicert
Sectigo
GoDaddy
GlobalSign
Certum-Google
Certum-Cloudflare
Let’s Encrypt
Actalis
1
1
1
1
20+
1
4
1
Sub-prefix
attack
✗
✗
✓
✓