### Party Activation for Session Initiation and Message Receiving/Sending
In both Π1 and Π2, the process of party activation for session initiation and message receiving/sending is identical, with one exception: in Π1, if the client (C) sends the last message to the server (S), the CSM message is sent immediately after this last message. In Π2, the CSM message is sent by C upon receiving the last message from S.

### Party Corruption
In both protocols, party corruption involves revealing all secret material of the corrupted party to the attacker, who then gains full control over that party. For Π2, client corruption specifically includes revealing the signing key of the client (C).

### Reveal Queries
Reveal queries can be applied to any completed session (except the test session) at an honest party and return the session key. Note that the timing of session completion may differ between Π1 and Π2.

### Session Tests
- **Π1**: Session tests are only allowed against (C, S, sid).
- **Π2**: Session tests are allowed against both (C, S, sid) and (S, C, sid).

### The Simulator
To prove Theorem 3, we define a simulator SIM that, given an MA-attacker A2 against protocol Π2, constructs a UA-attacker A1 against Π1 such that if A2 wins a test session in Π2, A1 also wins in Π1. SIM acts as the challenger for A2 and uses A2's actions to implement A1. We consider the parties running Π1 as real parties with their own secret keys, while those running Π2 are simulated by SIM with the same keys as in Π1, except for clients' signature keys, which exist in Π2 but not in Π1. SIM chooses these keys for honest clients in Π2, and the public keys for corrupted parties are chosen by the attacker.

#### CSM Message Implementation in Π2
When a session (C, S, sid) completes in Π1, SIM invokes A1 to run a reveal query on that session to obtain the session key K. From K, SIM derives keys Ka and Ks, and uses Ka and the signature key of C to compute the CSM message, which it hands to A2. Completion of sessions by honest parties in Π2 is decided by SIM:
- **Client**: A session is completed if and only if the corresponding session completes in Π1.
- **Server**: A session (S, C, sid) is completed if a valid CSM message is received, verified by a valid signature on sid* and the MAC under Ka. If the CSM message is not from a honest client, SIM verifies it by invoking A1 to reveal the corresponding completed server’s session (S, sid) in Π1 and deriving Ka from it. This action is valid according to Lemma 4(c).

### Actions of A1
The actions of A1, as decided by SIM, mostly mimic those of A2, with specific differences in handling corrupt, reveal, and test queries:

1. **Corruption**:
   - When A2 corrupts a party, SIM invokes A1 to do the same. A2 receives the secret information from this party, including the signature key for clients.

2. **Reveal Query**:
   - **Client (C, S, sid)**: SIM invokes A1 to reveal (C, S, sid) in Π1; A1 gets the session key K from Π1, while A2 gets the derived session key Ks from Π2.
     - **Validity (Lemma 4(b))**: These two sessions complete together and have consistent keys.
   - **Server (S, C, sid)**: SIM invokes A1 to reveal (S, sid) in Π1; A1 gets the session key K, while A2 gets the derived key Ks.
     - **Validity (Lemma 4(c))**: If S is honest and (S, C, sid) completes in Π2, then (S, sid) exists and completes in Π1, and the two sessions have consistent keys.

3. **Test Query**:
   - At the start, SIM selects a random session (the guess session) from all sessions to be created during the run of Π2.
   - If A2 disqualifies the guess session, SIM instructs A1 to output a random bit b and aborts.
   - **Client (C, S, sid)**: As soon as A2 delivers the last incoming message to this session, SIM invokes A1 to deliver this last message and issue a Test query on (C, S, sid) in Π1.
   - **Server (S, C, sid)**: As soon as A2 delivers the last message from S to (C, S, sid), SIM invokes A1 to deliver this last message and issue a Test query on (C, S, sid) in Π1.
   - SIM learns the value of the real-or-random key K from A1, derives Ka and Ks, and uses Ka to compute the outgoing CSM message from C in Π2. When A2 issues a Test query against the guess session, SIM provides Ks as the answer.
     - **Validity (Lemma 4(f))**: The test sessions invoked by A1 are valid, and Ks is real if K is real and (pseudo) random otherwise.

4. **Stopping the Run**:
   - When A2 stops its run with an output bit b, SIM instructs A1 to stop with the same bit.
   - **Validity**: A1 wins whenever A2 wins, bounding the advantage of A2 against Π2 by the advantage of A1 against Π1, up to a polynomial factor induced by the probability of a correct test session guess.

### Validity of SIM’s Actions
The proof of Theorem 3 relies on the following properties of the simulator’s actions and those induced on attacker A1, showing the validity of these actions in the corresponding models.

#### Lemma 4
- **(a)**: Π1 and Π2 have the same set of parties, including the same honest and corrupted parties.
- **(b)**: If C is honest, when (C, S, sid) completes in Π2, (C, S, sid) exists and has completed in Π1 with consistent session keys.
- **(c)**: If S is honest, when (S, C, sid) completes in Π2, (S, sid) exists and has completed in Π1 with consistent session keys.
- **(d)**: If (C, S, sid) is a valid test session in Π2, it is fresh in Π1 and has consistent session keys.
- **(e)**: Assuming Π1 is treplication-secure, if (S, C, sid) is a valid test session in Π2, (C, S, sid) exists, completes, and is fresh in Π1 with consistent session keys.
- **(f)**: If the test session in Π2 is valid and correctly guessed, the test session in Π1 is valid, and Ks is real if K is real and (pseudo) random otherwise.

### Additional Lemmas
- **Lemma 5**: If C and S are honest, (C, S, sid) is complete and unrevealed in Π1, and (S, sid) is complete in Π1, then in Π2, S either does not complete session sid or completes it as (S, C, sid) (except for negligible probability).
- **Lemma 6**: If Π1 is treplication-secure and (S, C, sid) is fresh in Π2, (C, S, sid) exists and completes in Π2 (except for negligible probability).

### Proof of Theorem 3
Consider simulation executions where SIM does not abort and negligible probability events from Lemmas 5 and 6 do not occur. Lemma 4 ensures the validity of A1 and A2's actions, consistent with the UA and MA models. The views of A1 and A2 under the simulated games are exactly as in a real run of Π1 and Π2, respectively. Thus, the winning probability of A2 is the same as in a real run of Π2, and A1 wins its test session whenever A2 does. Therefore, the winning advantage of A2 is upper bounded by that of A1. If any UA-attacker A1 against Π1 has only negligible advantage, so does any MA-attacker A2 against Π2, proving the MA-security of the compiled protocol Π2.

### Security Quantification
Lemmas 5 and 6 show that the selection of a test session for A1 fails due to adversarial actions with negligible probability. The probability is at most \(2 \cdot (n \cdot \lambda_{\text{sig}} + \lambda_{\text{mac}} + \lambda_{\text{kdf}}) + \lambda_{\text{UA}} + \lambda_{\text{tr}} + \lambda_{\text{nc}}\), where the \(\lambda\) values denote the security of various elements in the protocol. This expression is further multiplied by \(m\) (an upper bound on the number of sessions established by A2) to account for the probability that SIM guesses the correct test session.

### Streamlining the Reduction
The bound contains the additive term \(m \cdot \lambda_{\text{UA}}\). To avoid the squared degradation, we consider a "semi-adaptive" adversarial model where the attacker must declare the test session upon initiation. In this setting, SIM does not need to guess A2’s test session but learns it when A2 initiates and declares it. SIM then instructs the semi-adaptive A1 to declare the corresponding test session in Π1. This avoids the \(m^2\) factor, with the reduction between semi-adaptive UA and MA attackers without incurring the loss of the \(m\) factor.

### Signing S and C
Including the server's identity S under sid* (signed by the client) eliminates the need to include it under the MAC or rely on treplication security. However, if signing S is omitted (for privacy or other reasons), including it under the MAC is sufficient. Including the client's identity under the client’s signature but not under a MAC would fail to provide MA security.

### Post-Handshake and Encrypted Authentication
This section adapts the analysis of the SIGMAC compiler to specific settings in TLS 1.3. The SIGMAC compiler can be applied in TLS 1.3 when the client sends its authentication message (CSM) in the third handshake flight, immediately after verifying server authentication. However, TLS 1.3 also supports post-handshake and encrypted authentication, which require additional considerations.