scanf("%s",str);
printf("%s",str);
char str[100];
scanf("%s",str);
printf(str);
正常
错误
程序将格式化字符串的输入权交给用户，printf函数并不知道参数个数，它的内部
有个指针，用来索检格式化字符串。对于特定类型%，就去取相应参数的值，直
到索检到格式化字符串结束。所以没有参数，代码也会将format string 后面的内
存当做参数以16进制输出，这样就会造成内存泄露。
要利用格式化字符串漏洞，我们需要重点关注几个比较冷门的符号说明:
格式化字符串的“$”操作符，其允许我们从格式化字符串中选取一个作为特定的
printf("%3$s", 1, "b", "c", 4);
最终会显示结果“c”。这是因为格式化字符串“%3$s”，它告诉计算机“把格式
告诉我，然后将参数解释为字符串”。所以，我们也可以这样做
printf("AAAA%3$n");
printf函数将值“4”（输入的A的数量）写入第三个参数指向的地址。
PWN基础入门
Ø 格式化字符串漏洞
Input:BBBB%x,%x,%x,%x,%x,%x,%x,%x,%x
PWN基础入门
Ø 格式化字符串漏洞
printf函数调用下断
  [esp+1Ch]存储输入的BBBB十六进制
利用$,只输出第7位(BBBB)的ASCII码
PWN基础入门
Ø 栈溢出漏洞防护Canary绕过--泄露Canary(格式化字符串)
1
2
3
PWN基础入门
Ø 栈溢出漏洞防护Canary绕过--泄露Canary(格式化字符串)
思路:
1、先利用printf格式化字符串漏洞泄露Canary
2、利用泄露的Canary填充/覆盖栈上的Canary进行栈溢出漏洞利用,获取flag
printf(“%7$x”)泄露出Canary
PWN基础入门
Ø 栈溢出漏洞防护Canary绕过--泄露Canary(格式化字符串)
buf
. . . .
Canary
. . . .
ebp-70
ebp-C
低
高
s
r
ebp
ebp+4
栈溢出利用(getlag)
PWN基础入门
Ø 栈溢出漏洞防护Canary绕过--泄露Canary(格式化字符串)
exploit.py
get flag!
PWN基础入门
Ø 栈溢出漏洞利用之NX绕过—ret2libc
l
思路:通过把函数返回地址直接指向系统库(常用libc库)中的函数(如system函数），同时构造该函
数的输入参数栈，就可以达到代码执行的目的。对于NX/DEP防御来说，你不让我执行我的代码，我就
利用你的函数达到我的目的,这是面向返回编程的设计思路
NX开关打开且存在栈缓
冲区溢出漏洞!
PWN基础入门
Ø 栈溢出漏洞利用之NX绕过—ret2libc
溢出后的栈布局图
system("/bin/sh")
1.确定libc地址
2.确定sysytem函数地址
3.确定/bin/sh字符串地址
3个问题
PWN基础入门
Ø 栈溢出漏洞利用之NX绕过—ret2libc
exploit.py
               编译器层面(二进制本身)
                 系统层面(栈、库)
PWN基础入门
Ø 栈溢出漏洞防护PIE/ASLR绕过-return-to-plt
ASL
R
0:未开启
1:stack、libraries随机化
2:heap随机化
PIE
.text代码段
.data数据段
.bss未初始化
全局变量段
plt、got基址
sysctl -n kernel.randomize_va_space
cat /proc/sys/kernel/randomize_va_space
checksec ./bin
PWN基础入门
Ø 栈溢出漏洞防护ASLR绕过-return-to-plt
思路:在 ASLR 开到 2 时libc中的基址已经躲猫猫了,而 PLT 的函数却没有 (在执行前
就能知道),PLT表中包含全局函数的存根（stub）代码，.text 段中的call 指令并不直
接调用函数，而是先调用位于PLT表中的存根函数（func@PLT），使用 Ret2PLT 的原因
就在于在执行前它的地址并没有被随机化。因此可以把原打算ret2libc目标函数位置变成 
return 到plt里面的位置. ASLR doesn‘t randomize everything, ASLR不会随机化
本身程序的基址。
NX enabled
ASLR enabled(2)
PIE disabled
PWN基础入门
Ø 栈溢出漏洞防护ASLR绕过-return-to-plt
Dest[400]
Var_4
s
r
ebp+4
ebp-404
ebp
1032
Paddings(1032)
ROP-
Gadget(ret2plt)
strcpy@plt
ppr
bss
“s”
strcpy@plt
ppr
bss+1
“h”
strcpy@plt
ppr
bss+2
“;”
system@plt
“AAAA”
bss
PWN基础入门
Ø 栈溢出漏洞防护ASLR绕过-return-to-plt
思路:在 ASLR 开到 2 时libc中的基址已经躲猫猫了,而 PLT 的函数却没有 (在执行前
就能知道),PLT表中包含全局函数的存根（stub）代码，.text 段中的call 指令并不直
接调用函数，而是先调用位于PLT表中的存根函数（func@PLT），使用 Ret2PLT 的原因
就在于在执行前它的地址并没有被随机化。因此可以把原打算ret2libc目标函数位置变成 
return 到plt里面的位置. ASLR doesn't randomize everything
NX enabled
ASLR enabled(2)
PIE disabled
PWN基础入门
Ø 栈溢出漏洞防护ASLR绕过-return-to-plt
buf[100]
Var_4
s
r
ebp+4
ebp-404
ebp
268
Paddings(268)
Ret2plt(system)
A * 268
system@plt
i
0xdeadbeef
/bin/sh
system(“/bin/sh”)
argc
argv
方便演示,这里程序自身调用system(),/bin/sh作为常量放在.rodata段中
system_retaddr
PWN基础入门
Ø 栈溢出漏洞防护ASLR绕过-return-to-plt
system@pl
t
/bin/bash
PWN基础入门
Ø 栈溢出漏洞防护ASLR+NX绕过通用思路
这个思路是通解的思路，即不知道目标程序使用的动态库的版本。
•
同一个模块内，代码段和数据段之间的距离确定，不受随机化影响
•
同一动态库内，每个函数在动态库内部的偏移量是确定的
•
只要泄露出动态库中某个函数的地址，就可以知道该函数在动态库中的偏移。
•
不同动态库中相同函数的偏移量是不同的，那就可以通过这个泄露的偏移量
确定该程序使用的动态库的版本。
•
计算出动态库的基址：动态库的基址=泄露的函数的地址 - 该函数在动态库
中的偏移量
•
计算出system函数的地址：system函数的地址= 动态库的基址 + system函
数在动态库中的偏移量
•
找到 /bin/sh 这个字符串的所在位置，一般动态库里有这个字符串，如果没
有这个字符串就使用能写入的函数，将这个字符串读写到可写入的区域，这
就需要构造ROP链，pop pop pop ret 。
PWN基础入门
Ø ROP技术讲解
PWN基础入门
Ø SROP技术
PWN基础入门
Ø 其他漏洞(整数溢出,I/O File等)
PWN基础入门
Ø 汇编基础(参考REVERSE,这里不细述)
Ø 栈溢出
Ø Linux漏洞安全防护机制与绕过
Ø 其他漏洞(整数溢出、格式化字符串等）
Ø 堆漏洞
Ø ……..
PWN基础入门
Ø 堆漏洞
l 堆基础
l 堆漏洞原理
l 堆漏洞防护与利用(PWN中堆利用是王道!)
PWN基础入门
Ø 堆溢出
l 堆基础
1. 什么是堆?
首先先明确一下堆的概念，堆不同于栈，堆是动态分配的（由操作系统内核或者堆管理器），
只有在程序中需要时才会分配。在 CTF 的 pwn 程序中，栈是程序加载进内存后就会出现，
而堆是由 malloc、alloc、realloc 函数分配内存后才会出现。
windows 和 linux 下的堆分配、管理方式都不同，这里主要讲到的是 CTF 中常出现的 
linux 下的堆分配知识。
Linux对堆操作的是由glibc库下的堆管理器(ptmalloc2)来实现的，glibc是GNU发布的libc库，
即c运行库。glibc是linux系统中最底层的api，几乎其它任何运行库都会依赖于glibc。glibc
除了封装linux操作系统所提供的系统服务外，它本身也提供了许多其它一些必要功能服务的实
现。
举个简单的例子，C语言中：
char c[100];           分配在栈中 in stack
char *c = malloc(100); 分配在堆中 in heap
malloc函数的实现由libc提供
PWN基础入门
Ø 堆溢出
l 堆基础
2. 堆在什么位置
Linux为每个进程维护了一个单独的虚
拟地址空间，形式如图所示。内核虚拟
内存包含内核中的代码和数据结构。内
核虚拟内存的某些区域被映射到所有进
程共享的物理页面。每个进程共享内核