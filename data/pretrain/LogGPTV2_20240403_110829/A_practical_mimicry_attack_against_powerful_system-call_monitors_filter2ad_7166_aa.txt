title:A practical mimicry attack against powerful system-call monitors
author:Chetan Parampalli and
R. Sekar and
Rob Johnson
A Practical Mimicry Attack
Against Powerful System-Call Monitors∗
Chetan Parampalli†, R. Sekar and Rob Johnson
Department of Computer Science
Stony Brook University, Stony Brook, NY 11794.
ABSTRACT
System-call monitoring has become the basis for many host-
based intrusion detection as well as policy enforcement tech-
niques. Mimicry attacks attempt to evade system-call moni-
toring IDS by executing innocuous-looking sequences of sys-
tem calls that accomplish the attacker’s goals. Mimicry at-
tacks may execute a sequence of dozens of system calls in or-
der to evade detection. Finding such a sequence is diﬃcult,
so researchers have focused on tools for automating mimicry
attacks and extending them to gray-box IDS1. In this paper,
we describe an alternative approach for building mimicry at-
tacks using only skills and technologies that hackers possess
today, making this attack a more immediate and realistic
threat. These attacks, which we call persistent interposition
attacks, are not as powerful as traditional mimicry attacks
— an adversary cannot obtain a root shell using a persistent
interposition attack— but are suﬃcient to accomplish the
goals of today’s cyber-criminals. Persistent interposition at-
tacks are stealthier than standard mimicry attacks and are
amenable to covert information-harvesting attacks, features
that are likely to be attractive to proﬁt-motivated criminals.
Persistent interposition attacks are not IDS speciﬁc — they
can evade a large class of system-call-monitoring intrusion-
detection systems, which we call I/O-data-oblivious.
I/O-
data-oblivious monitors have perfect knowledge of the val-
ues of all system call arguments as well as their relation-
ships, with the exception of data buﬀer arguments to read
and write. Many of today’s black-box and gray-box IDS are
I/O-data-oblivious and hence vulnerable to persistent inter-
position attacks.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Invasive software; C.2.0
∗This research is supported in part by NSF grant CCR-0208877
and an ONR grant N000140110967.
†The author is currently at Google, Inc. This work was completed
while the author was at Stony Brook University.
1Gray-box IDS examine additional information at the point of
system call invocation, such as the code address at which the
system call was invoked [27], or the set of return addresses on the
stack [8, 10].
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’08, March 18-20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
[General]: Security and Protection
General Terms
Security
Keywords
Mimicry attack, Intrusion-detection, System-call monitor,
Memory error, Buﬀer overﬂow
1.
Introduction
System-call monitoring intrusion detection systems (IDS2)
have created an arms race between defenders, who create
new and more powerful monitors, and attackers, who create
new attacks to evade the monitors. Researchers have reﬁned
system-call monitoring defenses by capturing sequencing re-
lationships [16, 34], by using call-site [27], call-stack [8, 10],
and system-call argument [19, 30, 3] information. In paral-
lel, mimicry attacks, which achieve attacker-intended eﬀects
without modifying IDS-monitored aspects of an application
behavior, have evolved to evade these defenses. These con-
tinuing developments lead to the following question:
Can system-call monitoring be made powerful enough
to defeat current and future evasion attacks?
The answer to this question would be aﬃrmative if we were
to build a perfect system-call monitor that captures the to-
tality of interactions between an application and its OS.
Since these interactions deﬁne what we consider as an ap-
plication’s behavior, a monitor that can predict the totality
of these interactions has to eﬀectively duplicate the applica-
tion logic. Moreover, in order to provide eﬀective protection,
the monitor shouldn’t duplicate any of the application’s vul-
nerabilities! Since this isn’t a recipe for a practical system
call monitor, we formulate the notion of a I/O-data-oblivious
monitor that comes close to being perfect: the only diﬀer-
ence is that such monitors ignore the actual content of the
data that is read using the read system-call, or written us-
ing the write system-call. This eliminates the need for the
monitor to predict the application’s behavior as a function
of its inputs/outputs, thereby making it more practical. We
note that existing system-call monitoring techniques [16, 18,
28, 32, 27, 34, 23, 12, 25, 19, 30, 8, 14, 7, 10, 13, 3] are all
I/O-data-oblivious3.
2Henceforth, we use the term “IDS” to refer to system-call moni-
toring IDS.
3Content-based IDS, such as PAYL [33] aren’t I/O-data-oblivious,
but are vulnerable to attack techniques that are orthogonal to
ours [9]. By combining the two techniques, these IDS can likely
be evaded as well — See Section 5 for a more detailed discussion.
156
We show that, despite their power, I/O-data-oblivious
monitors can be defeated using an attack that we call as
“persistent interposition attacks.” An important implication
of this result is that current and future system call moni-
toring techniques, by themselves, are unlikely to provide a
good defense against attack vectors that permit injected code
execution.
Overview of Persistent Interposition Attacks
Like previous mimicry attacks, persistent interposition at-
tacks rely on code-injection vulnerabilities. They inject code
that interposes on I/O operations performed by the victim,
potentially modifying the data read or written by the vic-
tim but leaving the control-ﬂow and other system-call ar-
guments unmodiﬁed. (This strategy is similar to that of a
“man-in-the-middle” attack.) Although persistent interposi-
tion attacks give up some power — they typically cannot be
used to obtain a root shell — for stealth and ease of devel-
opment, they are powerful enough to accomplish the goals
of proﬁt-motivated cyber-criminals:
• Steal credit-card numbers or passwords. A persistent in-
terposition attack against a web server processing e-com-
merce requests can enable the theft of credit-card num-
bers (or passwords) of customers visiting the server.
• Redirect requests. A hacker can use a persistent interpo-
sition attack against a domain’s DNS server to redirect
(some or all) visitors to the domain’s web server to the
hacker’s web site. Alternatively, a DHCP server may be
attacked in a way that enables an attacker to redirect
clients to her name server, and subsequently, redirect all
client requests to the destinations of her choice.
• Impersonate a secure server. A persistent interposition
attack against a secure web server can allow an attacker
to steal the server’s private key, which would enable him
to subsequently impersonate the server.
• Suppress or alter emails. An adversary can use a persis-
tent interposition attack on a mail server to suppress or
alter emails delivered by it.
• Launch worms. An attacker could use complementary
attacks against a server and client to build a worm: com-
promised clients would infect servers and compromised
servers would infect clients.
The primary advantage of persistent interposition attacks
over conventional mimicry attacks is simplicity. Persistent
interposition attacks rely on techniques such as function-call
interposition that are already known in the hacker commu-
nity, thus making it possible for hackers of moderate skill to
convert typical code injection exploits into persistent inter-
position attacks with some engineering eﬀort. Traditional
mimicry attacks are more diﬃcult to construct because they
evade detection by executing a sequence of system calls that
accomplish the attacker’s goal without triggering the IDS.
Such sequences are often dozens of system-calls long[11] and
are deeply dependent on the application’s control ﬂow and
the IDS model of the application, necessitating automatic
tools for ﬁnding mimicry attacks[15]. Persistent interposi-
tion attacks side-step this problem by interposing on I/O
system-calls the application makes during its normal execu-
tion, obviating the need for automatic attack construction
tools.
157
Persistent interposition is well-suited for attacking long-
running event-driven applications that execute a request-
response loop, e.g., most network servers, as well as some
frequently targeted desktop applications such as browsers
and email readers. In addition, the “embed-and-wait” strat-
egy used in our attack can achieve more powerful end-goals
against weaker IDS: if the IDS doesn’t monitor system-call
arguments, then our attack code can simply interpose itself
on open and write operations, and when they are invoked,
modify the arguments to create (or overwrite) a ﬁle of at-
tacker’s choice.
We have implemented a proof-of-concept persistent inter-
position attack that uses the OpenSSL KEY ARG overﬂow
to compromise an SSL-enabled Apache web server[6]. The
interposed code then counts the number of pages served by
the server and, upon receiving a special command from the
attacker, returns this number in the web server’s response.
A more realistic attack could harvest credit card numbers or
user passwords and output them in response to the attacker
command. We have also examined several other applications
to verify that they could also host a persistent interposition
attack.
Previous Work in Mimicry Attacks
Prior mimicry attacks attempted to alter the control ﬂow
of their victims while generating system call sequences that
would seem benign to an IDS, but this turned out to be
quite complex. Typically, the attack code needs to make
a large number of system calls, e.g., Wagner and Soto [31]
found a sequence of 138 system calls that evaded the pH IDS
while attacking wuftpd, while Gao et al [11] showed that the
shortest possible mimicry attacks typically needed a few tens
of system calls.
Modern gray-box IDS that inspect a program’s run-time
stack [8, 10] pose additional challenges for mimicry attacks.
In particular, the attack code cannot call system calls since
that would save the attack code’s address on the stack, there-
by revealing execution of code from a writable section of
memory.
Instead, it has to jump to some location in the
application’s existing code that invokes a system call. How-
ever, this means that control won’t return back to the attack
code after this system call, and hence the attack can’t con-
tinue. To overcome this problem, Kruegel et al [20] devised
a technique to corrupt memory locations (and registers) in
a manner that ensures that control is returned back to the
attack code when the code following the system call is ex-
ecuted. They developed an elegant technique to automate
the identiﬁcation of the memory locations that need to be
corrupted, and the corresponding values. Their work showed
that regaining control-ﬂow is feasible, but didn’t address sev-
eral other issues that arise in constructing mimicry attacks
against real-world applications:
• For complex applications, how feasible is it to set up the
stack before each system call (invoked by the attack code)
so as to escape detection by a stack-inspecting IDS?
• Typical attacks need tens of system calls, and each call
requires many operations to (a) set up its arguments, (b)
set up the call stack, and (c) to modify memory loca-
tions needed for regaining control. Will the exploit code
needed to accomplish these steps be small enough to ﬁt
within the size limits imposed by typical code injection
vulnerabilities?
• Given that the technique of [20] successfully regains con-
trol only about 90% of the time, how feasible is it to
string together the tens of system calls needed in typi-
cal mimicry attacks? Will repeated memory corruptions
(needed for regaining control after each system call) cause
a program to crash before the attack is complete?
• How easy is it to extend the attack technique to work
against more powerful IDS, such as those that reason
about system-call arguments [19, 30, 13, 3]?
Persistent interposition attacks avoid these obstacles because
they do not attempt to maintain constant control over the
application’s execution.
Advantages of Persistent Interposition Attacks
As compared to the control-ﬂow hijack strategy employed
in previous mimicry attacks, we believe that our persistent
control-ﬂow interposition strategy is simpler, more reliable,
and stealthy, thus enabling us to develop a fully-working eva-
sion attack against real-world servers. Our technique ad-
dresses some of the key issues raised above in developing
practical mimicry attacks, e.g., restoring stack content after
an attack, and limiting the size of attack code. It side-steps
other issues by employing a diﬀerent attack strategy: rather
than eagerly attempting to control program behavior at ev-
ery point, we take the lazy approach of lodging the attack
at key places in the program where such interposition can
be done easily and reliably, and without a need for repeated
memory corruptions. With this strategy, the victim applica-
tion “cooperates” in the attack by invoking the attack code
at convenient points during the request processing cycle of
the victim application! Moreover, data needed by the attack
code is typically available at this point via parameters on
the stack, thus avoiding the error-prone guessing of absolute
memory locations of victim application’s data structures.
By inserting itself into the request-processing ﬂow of a
server, a persistent interposition attack provides an active
channel for the attacker to dynamically control and/or alter
the behavior of the attack code. For instance, an attacker can
interactively examine and/or modify the memory of victim
by sending appropriate “commands” embedded in legitimate-
looking requests to the server. Alternatively, the attacker
can upload new code that embodies additional attack capa-
bilities onto the victim. Note that the attacker is able to
control the contents of the victim’s inputs remotely, and its
outputs using the interposed attack code on the victim side.
This makes it possible for the attacker to employ techniques
such as those described in [9] for evading content-based IDS
by encoding his requests and responses in a manner that
blends it with normal traﬃc.
In summary, persistent interposition attacks are quite con-
venient for implementing application-layer attacks. They are
practical for hackers to implement using skills and tools they
already have, thus making them perhaps a more realistic and
immediate threat, as compared to prior mimicry attacks.
Paper Organization
Section 2 deﬁnes the class of Input-Output data oblivious
monitors. The design of persistent interposition attack is de-
scribed in Section 3, followed by its implementation and eval-
uation in Section 4. Implications of our attack on system-call
158
monitoring techniques is discussed in Section 5, followed by