tion in a reentering execution to disable the guard (here balA) before
reentering the contract’s drainA function to retransfer money that a
does not own.
For an example of a contract that does not satisfy the NW prop-
erty, but that is still safe, we give a contract with a simple locking
functionality (similar to the example in Figure 2).
uint lock ;
mapping ( address => uint ) bal ;
function drain ( address a) {
if ( lock == 1) { throw ; }
lock = 1;
a. call . value ( bal [ msg . sender ]) () ;
bal [ msg . sender ] = 0;
lock = 0;
1 contract Bank {
2
3
4
5
6
7
8
9
10
11
12 }
The locking ensures that whenever the function is reentered
an exception occurs and hence no further call can be performed.
}
32
Still since the lock needs to be released at the end of the execution,
clearly the NW property is violated.
Restricted write. The RW (restricted write) property requires that
all write accesses are restricted, meaning there is at least one address
that when initiating the call cannot reach the corresponding write
access.
This property needs to be questioned in its semantic definition
in that this definition explicitly requires that SSTORE instructions
are not reachable even though (as discussed before), the SSTORE
instruction is not the only way of manipulating storage.
So for example when analyzing the following contract, there
is no RW violation or warning produced for the Bob contract even
though the ping functions allows to set contract’s data filed containing
the owner to be set to an arbitrary value by anyone.
}
Lib . Data data ;
self . owner = value ;
Lib . write ( data , c);
function ping ( address c) {
struct Data { address owner ; }
function write ( Data storage self , address value ) {
1 library Lib {
2
3
4
5
6 }
7
8 contract Bob {
9
10
11
12
13
14 }
The given compliance pattern requires that the storage offset
specified in a SSTORE instruction needs to be determined by the
caller of the contract. This pattern might indeed be sufficient for
the semantic property only considering SSTORE instructions.
The violation pattern requires that the reachability of SSTORE
instructions as well as the offset given to them may not depend on
the caller of the contract.
}
However, in the following contract an unrestricted write is de-
tected:
}
flip () ;
test = ! test ;
bool test = false ;
function flipper () {
if ( msg . sender != 0)
}
function flip () internal {
1 contract Test {
2
3
4
5
6
7
8
9
10
11 }
This contract should be safe with respect to the semantic def-
inition since flip, the only function containing a write access is
an internal function, meaning that it can only be invoked within
the contract. Given that the only place where it is invoked (in the
flipper function), it is done with a restriction on the caller (msg.sender),
also this storage access is restricted. However, the contract is re-
ported to match the violation pattern. A reason for that could be
an unsoundness in the underlying dependency analysis.
Restricted transfer. The RT (restricted transfer property) excludes
that Ether transfers (via CALL) cannot be invoked by any user.
Again one could criticize that the property does not consider other
ways of transferring money (e.g., by CALLCODE). The following
contract, for example, is considered safe by this definition:
1 contract Bob {
2
3
function sendMoney ( address c) {
c. callcode . value (5) () ;
eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
}
4
5 }
The corresponding compliance pattern requires that all calls
transfer 0 Ether. Given that the property only considers CALL in-
structions, this pattern is probably sufficient.
There are two violation patterns for the RT property, the first one
requires that there is a CALL instruction transferring a non-zero
amount and whose reachability may be dependent on the caller. We
can give a counterexample similar to the one for the RW violation
pattern:
}
sendM () ;
msg . sender . send (1) ;
function sendMoney () {
if ( msg . sender != 1)
}
function sendM () internal {
1 contract Test {
2
3
4
5
6
7
8
9 }
Again, the tool does not detect that effectively the money transfer
is restricted since the internal function sendM can only be invoked in
a restricted fashion.
The second violation pattern for the RT property requires instead
of the transferred value to be non-zero, that the value is determined
by the input to the call while at the same point the input might not
affect the reachability of the CALL instruction.
We can again give a simple counterexample similar to the previ-
ous one:
sendM (x);
if ( msg . sender != 1)
function sendMoney ( uint x) {
}
function sendM ( uint y) internal {
1 contract Test {
2
3
4
5
6
7
8
9 }
This example is detected as insecure while having only restricted
msg . sender . send (y);
}
money transfers.
Handled exception. The HE property (Handled exception) is not
semantically defined, but intuitively shall ensure that exceptions
that occurred in function calls shall be handled. Due to the lack of
a formal definition, it is hard to argue to which extend the given
patterns really are sufficient, but we give here examples of prop-
er/problematic exception handling which are wrongly classified.
The compliance pattern requires that every call must be followed
by some branching instruction whose condition is determined by
the call’s return value. Clearly, the following contract is matched
by this pattern even though it does not perform a proper exception
handling.
function withdraw () {
mapping ( address => uint ) balances ;
uint successes ;
bool success = msg . sender . send ( balances [ msg . sender ]) ;
if ( success ) { successes ++; }
balances [ msg . sender ] = 0;
1 contract SimpleBank {
2
3
4
5
6
7
8
9
10 }
Even though this contract branches on the return value of the call,
this branching does not influence the critical instruction, namely
the following storage update that assumes a successful call.
}
33
Accepted for ACM CCS, 2020
The violation pattern for HE requires that all branching instruc-
tions following a CALL instruction do not have a condition that
depends on the outcome of the call. We give an example of a con-
tract matching this pattern that however implements a useful form
of exception handling:
function toInt ( bool b) returns ( uint n) {
}
else
if (b)
return 0;
return 1;
1 library Lib {
2
3
4
5
6
7
8 }
9
10 contract SimpleBank {
11
12
13
14
15
function withdraw () {
mapping ( address => uint ) balances ;
bool success = msg . sender . send ( balances [ msg . sender ]) ;
balances [ msg . sender ] = Lib . toInt ( success ) * balances [ msg .
sender ];
}
16
17 }
This contract uses the return value of the call to update the
callee’s balance after the call depending on that. Since the branching
on the return value is outsourced to the library function toInt, it can
not be captured by the corresponding pattern.
In general, it is hard to imagine how proper exception handling
should be generically defined, since this is a property which depends
in the end on the contract’s desired functionality.
Transaction ordering dependency. The TOD (Transaction or-
dering dependency) property is again not formally defined, but
requires that the order of other transactions shall not influence the
calls of the contract. More precisely, calls shall not depend on state
that can be altered by other transactions. The paper says that actu-
ally different types of dependency will be considered distinguishing
whether the amount to be transferred (TA), the receiver (TR) or
the reachability of the CALL as a whole are affected (TT). However,
it seems that TT is not implemented since not even the following
straight forward TT violating contract is detected by the online
tool:
}
counter = 10;
uint counter = 0;
function play () {
if ( counter > 0) {
function getReward () {
1 contract SimpleGame {
2
3
4
5
6
7
8
9
10
11
12
13 }
The compliance pattern for TOD requires that calls shall not
depend on the contract’s storage or balance. Again this property
does not consider that there are different ways of calling, e.g., using
CALLCODE.
msg . sender . send (10) ;
}
}
The following contract is considered secure:
1 contract Bob {
2
uint price ;
3
4
5
6
7
8
9
price = v;
}
function setPrice ( uint v) {
function sendMoney ( address c) {
c. callcode . value ( price ) () ;
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
}
10
11 }
This contract transfers an amount of money (price) that it reads
from the storage and that could have been modified by another
transaction before. Still, no warning about a TOD violation is trig-
gered by the online tool.
The violation pattern requires that there is a CALL which de-
pends on a read of a constant storage cell that can be written.
Consider the following example contract:
}
uint price = 5;
price = price ;
c. send ( price );
function sendMoney ( address c) {