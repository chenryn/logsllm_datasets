/Set up the testfxture
MockXMLElementChannelxmlElementChannel;
1906
---
## Page 1908
VersionResponder responder(& xmlElementChannel);
responder.setVersion("Swif","1.0");
//Fake incoming request stanza on the stanza channel
xmlElementChannel.onXMLElementReceived(XMLElement:fromString(
""
"");
//Verify the outcome
XMLElement response=xmlElementChannel.sentXMLElements[O];
ASSERT_EQUAL("iq",response.getTagNameO);
ASSERT_EQUAL("result",response.getAttribute("type");
ASSERT_EQUAL("id",response.getAttribute("version-1")
ASSERT_EQUAL("PI:EMAIL/RabbitHole",response.getAttrib
ute("to");
XMLElement queryElement=response.getElementByTagNameNS
"query","jabber:iq:version");
ASSERT(queryElement.is ValidO);
XMLElement
nameElementqueryElement.getElementByTagName("name");
ASSERT(nameElement.isValidO);
ASSERT_EQUAL("Swif",nameElement.getTextO);
1907
---
## Page 1909
XMLElement
versionElementqueryElement.getElementByTagName("version");
ASSERT(versionElement.is ValidO);
ASSERT_EQUAL("1.O",versionElement.getTextO);
这个测试的一个不足之处在于它看起来不如例7-3好看。在这个测试
中，精简性和可读性的降低还可以忍受。然而，假设现在我们想测
试这么一个例子一—用户并没有向版本号响应者提供版本号，所以
我们需要发送“未知版本"作为版本号。这个测试看起来将和例7-4完
全相同，除了调用setVersion的时候将不会传递"1.o"而是空白字符
串，并且将会与"Unknownversion"做比较。不用说，仅仅为了测试一
个小小的行为改变就会有许多重复的代码，我们的协议越复杂，情
况就越糟糕（从而需要越多的测试）。
result类型的节，以及标识符是否与请求匹配。这部分可以容
易地移到一个“通用的"响应者基类并进行单独测试。
第二个问题是我们需要分析XML的结构以提炼出我们需要测试的数
据。这里真正的问题在于，我们的测试实际上同时测了两个东西：
协议的逻辑（即，响应的内容）和响应的表示（即请求和响应如何
用XML表示）。
为了在我们的测试中把逻辑从表示中分离开来，我们让
VersionResponder工作在一个更高级的IQ数据结构之上，包含表示它
们所承载的载荷的高级Payload数据结构。使用这些抽象数据结构，
现在我们可以关注于测试VersionResponder的功能而不需要担心在
XML中如何实际表示IQ和Payload数据结构。这个测试如例7-5所示。
例7-5：测试VersionResponder的逻辑，VersionResponder所发送和接
收的节的实际的（XML）表示不再显式地出现在测试中，使得测试
不再随表示的变化而变化
void VersionResponderTest:testHandleIncomingRequestO
1908
---
## Page 1910
/Set up the test fxture
MockIQChannel iqChannel;
VersionResponder responder(& iqChannel);
responder.setVersion("Swift");
/Fake incoming request stanza on the stanza channel
iqChannel.onIQReceived(IQ(IQ:Get,new VersionPayloadO));
/Verify the outcome
ASSERT_EQUAL(1,iqChannel.sentIQs.sizeO);
const VersionPayload*payload=
iqChannel.sentIQs[O].getPayloadO)
ASSERT(payload);
ASSERT_EQUAL("Swift",payload->getNameO);
ASSERT_EQUAL("Unknown version",payload->getVersionO)
从VersionPayload结构到XML的转换现在可以被独立测试，如例7-6所
示。尽管这个测试还不是非常漂亮，但对于更重要的协议行为部分
来说，测试已经不再受到来自于数据表示部分的干扰了。
例7-6：测试从VersionPayload到XML的转换
void VersionPayloadSerializerTest:testSerializeO
/Set up the test fxture
VersionPayloadSerializer serializer;
1909
---
## Page 1911
VersionPayload payload;
payload.setVersion("Swif","1.0");
/Serialize a payload
//Verify the serialized element
ASSERT_EQUAL("jabber:iq:version",result.getNamespaceO);
XMLElement*nameElement=queryElement->
getElementsByTagName("name");
ASSERT(nameElement);
ASSERT_EQUAL("Swif",nameElement->getTextO);
XMLElement*versionElement=queryElement->
getElementsByTagName("version");
ASSERT(versionElement);
ASSERT_EQUAL("1.0",versionElement->getTextO);
在这一节中，我们讨论了如何测试一个简单的基于IQ的请求/响应协
议。在初次尝试中，我们从可能的最低层次来测试协议，分析在线
路上传输的实际数据。后续的版本在更高的、更结构化的层次来测
试协议的逻辑，直到对响应者逻辑的测试独立于在网络上传输的数
据的实际表示。尽管对于如此简单的一个协议来说，将XML解析和
序列化从实际数据结构中分离出来似乎有些过了，但它使得对从下
一节开始的更复杂（多级）协议的测试更加清晰明了。
11某些实现把响应者和发起者放到同一个类中。年轻人，别这样
做！
多级协议的单元测试
1910
---
## Page 1912
到目前为止，我们所讨论过的这类协议是非常简单的：一端发送请
求，另一端响应，仅此而已。尽管许多XMPP协议属于这一类，但也
有不少其他的协议是由多个这样的请求/响应周期所组成的。这些协
议由发送一个请求开始，然后基于对前次请求的响应采取后续的步
骤。本节的重点就是测试这一类型的协议。
除了个人到个人的对话之外，XMPP也充许用户加入“聊天室”与多人
同时交流。当一个用户想要加入这样的一个多人聊天的时候，IM客
户端需要检测服务器上当前可用的多人聊天室并向服务器提供这个
列表。获得这个列表需要一连串的服务发现（servicediscovery，在
XMPP世界里常常称为disco）请求。例如，假设Alice想获得
wonderland.lit服务器上的所有当前聊天室的列表。她首先通过向服
务器发送一个disco#items请求来获取她的服务器上的当前服务：
接着服务器响应它上面的所有服务的列表：
-!sb>
from="wonderland.lit"to="PI:EMAIL/RabbitHole">
1911
---
## Page 1913
现在Alice需要决定哪个服务提供聊天室。因此她发送一个disco#info
请求给每个服务，询问它们支持哪些协议：
第一个服务响应如下：
,Ps,=b>
from="pubsub.wonderland.lit” to="PI:EMAIL/RabbitHole">
这个服务似乎只支持PubSub协议（功能），这并不是Alice想要的。
不过，第二个服务响应了如下的功能列表：
from="rooms.wonderland.lit" to="PI:EMAIL/RabbitHole">
1912
---
## Page 1914
行了！既然找到多人聊天室（MUC）服务了，接下来她需要做的就
是询问房间列表，通过使用另一个disco#items请求：
这个请求将得到rooms.wonderland.lit服务器上的所有多人聊天室的列
表(此例中，一个茶聚会和一个讨论槌球的房间)：
from="rooms.wonderland.lit" to="PI:EMAIL/RabbitHole">
从这个例子中可以看到，许多节是来回传送的。如果你再考虑每一
步都可能导致响应实体的错误响应，那么问题就变得更复杂。因
此，对这个协议的测试包含多个不同的测试以决定我们的客户端是
否能处理服务器的每一种响应类型，不管是成功的还是不成功的。
幸运的是，因为我们在一个高的层次进行协议测试，为每一种场景
1913
---
## Page 1915
创建一个单独的测试可以做到非常精简和直接。例如，例7-7显示了