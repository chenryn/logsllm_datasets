### 198 Target Monitoring

**Function Call:**
```c
0x00003844 in compile_regex (options=0, oldims=0, brackets=0xbffff474, codeptr=0xbffff46c, ptrptr=0xbffff468, errorcodeptr=0xbffff470, lookbehind=0, skipbytes=0, firstbyteptr=0xbffff47c, reqbyteptr=0xbffff478, bcptr=0x0, cd=0xbffff424) at pcre_compile.c:2354
```

**Code Line:**
```c
*code = OP_KET;
```

If a tester is fuzzing this particular library and only using a simple method of attaching a debugger and waiting for crashes, they would miss two critical and exploitable bugs. However, if the tester uses Guard Malloc to monitor the program, both bugs would be detected. Additionally, the program is small enough that there is no noticeable performance slowdown when running with Guard Malloc. Therefore, it is difficult to think of a reason not to use this additional monitoring during fuzzing.

### 6.7.2 Valgrind

This real-world example confirms the findings from the test program in the previous section. Valgrind not only identifies the two vulnerabilities but also provides more detailed information than Guard Malloc.

**Valgrind Output:**
```sh
[cmiller@LinuxForensics pcre-6.2]$ valgrind ./pcredemo ‘[[**]]’ a
==12840== Invalid write of size 1
==12840==    at 0x804B5ED: compile_regex (pcre_compile.c:3557)
==12840==    by 0x804C50F: pcre_compile2 (pcre_compile.c:4921)
==12840==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==    by 0x804864E: main (pcredemo.c:76)
==12840==  Address 0x401F078 is 0 bytes after a block of size 80 alloc'd
==12840==    at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12840==    by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12840==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==    by 0x804864E: main (pcredemo.c:76)
==12840==
==12840== Invalid write of size 1
==12840==    at 0x804C545: pcre_compile2 (pcre_compile.c:4935)
==12840==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==    by 0x804864E: main (pcredemo.c:76)
==12840==  Address 0x401F079 is 1 byte after a block of size 80 alloc'd
==12840==    at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12840==    by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12840==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12840==    by 0x804864E: main (pcredemo.c:76)
```

Unlike Guard Malloc, Valgrind can continue past the first bug to find another related problem. A similar result is found for the other bug.

**Another Example:**
```sh
[Linux pcre-6.2]$ ./pcredemo ‘(?P)(?P>a){1}’ a
==12857== Invalid write of size 1
==12857==    at 0x804B5ED: compile_regex (pcre_compile.c:3557)
==12857==    by 0x804C50F: pcre_compile2 (pcre_compile.c:4921)
==12857==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==    by 0x804864E: main (pcredemo.c:76)
==12857==  Address 0x401F068 is 1 byte after a block of size 63 alloc'd
==12857==    at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12857==    by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12857==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==    by 0x804864E: main (pcredemo.c:76)
==12857==
==12857== Invalid write of size 1
==12857==    at 0x804C545: pcre_compile2 (pcre_compile.c:4935)
==12857==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==    by 0x804864E: main (pcredemo.c:76)
==12857==  Address 0x401F069 is 2 bytes after a block of size 63 alloc'd
==12857==    at 0x40053D0: malloc (vg_replace_malloc.c:149)
==12857==    by 0x804C40C: pcre_compile2 (pcre_compile.c:4877)
==12857==    by 0x804CA94: pcre_compile (pcre_compile.c:3846)
==12857==    by 0x804864E: main (pcredemo.c:76)
```

### 6.7.3 Insure++

To build the `pcredemo` program for use with Insure++, you need to tell the compiler to use Insure++. The following commands will build `pcredemo` for use with Insure++:

```sh
./configure CC=insure
make
insure -g -I. pcredemo.c -o pcredemo .libs/libpcre.a
```

After this, running `pcredemo` will bring up the Insure console, which will display any identified problems. Insure++ finds both vulnerabilities and correctly indicates where they can be found in the source code (Figure 6.10).

### 6.7.4 AddressSanitizer

To enable AddressSanitizer for the `pcredemo` program, add `-fsanitize=address` to your `CFLAGS` and `CXXFLAGS`, and to the `pcredemo` compile command:

```sh
./configure CFLAGS="-fsanitize=address" CXXFLAGS="-fsanitize=address"
make
gcc -fsanitize=address -g -I. pcredemo.c -o pcredemo .libs/libpcre.a
```

Once AddressSanitizer is enabled, you can run `pcredemo` normally. With inputs that trigger heap buffer overflows, AddressSanitizer catches the bug once it is triggered.

**Example:**
```sh
[attekett@Ubuntu ~]$ ./pcredemo ‘ab.d’ ABCDabcdABCD
Match succeeded at offset 4
0: abcd
No named substrings
[attekett@Ubuntu ~]$ ./pcredemo ‘[[**]]’ a
=================================================================
==5717==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800000bff8 at pc 0x00000040b9d1 bp 0x7ffd3bf5f480 sp 0x7ffd3bf5f470
WRITE of size 1 at 0x60800000bff8 thread T0
#0 0x40b9d0 in compile_regex /pcre-6.2/pcredemo+0x40b9d0)
#1 0x40f585 in pcre_compile2 (/pcre-6.2/pcredemo+0x40f585)
#2 0x40c73c in pcre_compile (/pcre-6.2/pcredemo+0x40c73c)
#3 0x40132f in main /pcre-6.2/pcredemo.c:76
#4 0x7fde41e2282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
#5 0x400fd8 in _start (/pcre-6.2/pcredemo+0x400fd8)
```

AddressSanitizer exits the program instantly when an issue is detected, so it does not detect the second (related) problem.

### 6.8 Summary

Fuzzing without monitoring for errors will not find vulnerabilities. It is important to understand the types of errors you can expect to find with fuzzing. We discussed some common security vulnerabilities and how to detect them. We then outlined various methods, including sending valid test cases between fuzzed inputs, monitoring system resources, and changing the way the application executes. The closer you monitor the target and the more sophisticated tools you use, the more likely you are to find hard-to-locate vulnerabilities.

### Chapter 7: Advanced Fuzzing

So far, we have discussed setting up fuzzing and the potential issues. One theme of the book is that intelligent, generation-based fuzzing is most effective but can take significant effort and time to set up. This chapter discusses advanced research topics and trends in fuzz testing. The first topic is automatically determining the structure of protocols, both network and file formats, to remove obstacles to generation-based fuzzing. Other topics include different approaches to utilizing information from the application itself to improve test-case generation. For example, by knowing which paths through a program a particular set of fuzzed inputs took, can we generate even better inputs? We then discuss trending tools for code coverage-guided fuzz testing and cloud fuzzing frameworks.

#### 7.1 Automatic Protocol Discovery

Generation of model-based fuzzers is time-consuming. Imagine if a tool could watch data being consumed by an application, automatically determine the type of each data, and insert appropriate smart fuzz tests into the messages. For example, consider the following data from a file or network protocol:

```plaintext
"\x01\x00\x0aGodisGood\n"
```

From this data, it is clear that `01` = type, `000a` = length, and `"GodisGood\n"` is the data. However, note that `\n` is `\x0a` in hex. Thus, it can be challenging for pre-fuzzing parsing code to automatically determine the types. There are multiple ways to handle this issue. For example, `tokAids` in GPF allows the tester to inform GPF how to tokenize stored sessions. A graphical tool could be constructed to allow for field tagging, making it easier for humans to perform pattern recognition than computers.

Some work has been done to automate this process. PolyGlot is one such tool. It watches as a program consumes an input and groups the input based on the assembly instructions used to read bytes from the data stream. By watching how these bytes are processed within the control flow graph of the program, individual elements (bytes, words, dwords) can be grouped into structures. The authors of the paper successfully used the tool to automatically reverse engineer several network protocols, including DNS, HTTP, IRC, SMB, and ICQ.

Another example of automated protocol discovery is included with the commercial beSTORM fuzzer. It examines valid test cases or inputs, automatically tries to find length-value pairs in binary data, and can decode protocols based on ASN.1. It tries many models and assigns percentages to how much of the structure it can account for in the actual data. For text-based inputs, it can break apart the data based on different separators (e.g., Tab, Comma) and user-defined separators. It has custom modules for inputs based on HTTP and XML and provides a graphical user interface to help the tester describe the protocol (i.e., specify the location of length fields).

#### 7.2 Automatic Generation of a Model-Based Fuzzer

As described in Chapter 5, there are fundamental differences between model-based fuzzing and sample-based fuzzing. Sample-based fuzzing tools rarely understand the type and semantics of the data elements, and some automation of this is possible. Understanding message sequences, data structures, and data syntax has been built into tools such as network analyzers. Could this information be used to generate smart model-based fuzzers? Such a tool, called Traffic Capture Fuzzer, was released by Codenomicon in 2009.

This section is structured based on information provided by Tuomo Untinen from Synopsys and describes the use of the current Defensics SDK as a framework for creating a model-based fuzzer from network capture samples such as PCAP recordings. This allows combining the best benefits from both model-based and sample-based approaches through the creation of a quick and simple behavioral model from the samples, resulting in more effective fuzz test cases for specific targets compared to dumb mutation tests with no understanding of the semantics or syntax of the tested interface. The tests can also reach areas that pure specification-based models would not, as captured samples could contain vendor-specific data and features that might not be available in publicly known protocol or file format specifications.

##### 7.2.1 Defensics SDK with Suite Wizard

The Suite Wizard is part of the Defensics SDK and reads a PCAP capture of the network traffic with Wireshark's TShark tool, creating a PDML model from the network capture. Wireshark dissectors are used to create the structural model for the protocol messages. If Wireshark does not recognize the protocol, the created model will be very simple. For proprietary protocols, a custom dissector for Wireshark can be created and used when creating the model.

Defensics SDK with Suite Wizard also creates sequences based on the network capture. This is done on the message level, so it can recognize TCP and UDP messages as Wireshark would. The same goes for any other message levels. Suite Wizard is also able to create stub Java or Python projects depending on the preferred programming language. Suite Wizard tries to recognize possible rule positions from field names such as length values or check-sums. It also tries to recognize length and count fields and marks a comment on the location of recognized fields. After this stub project for the fuzzer has been created, it is much easier to start editing the protocol fuzzer as needed.

##### 7.2.2 Example Project Created with Suite Wizard

The project will consist of four or five files, depending on the programming language and settings. For Java projects, Suite Wizard can create a `build.gradle` file to help build the Java project and create IDE integrations automatically (see Figure 7.1). The `README.md` file contains generic information about the project, how to run the new fuzzer, and how to pack it into a distributable form. This file is written in Markdown, which is used in modern wiki systems (see Figure 7.2).

The third file is the properties file, which is used when packing the new fuzzer into a distributable form. The properties file tells the packer where to find compiled class files or Python scripts, the SDK JAR file (the generic Defensics engine code), the SDK suite file (the fuzzer-specific code), and the required fuzzer resource files. The properties file also contains the fuzzer name and version (see Figure 7.3).

The fourth file is the actual model file. This model is generated based on the network capture file and contains comments where the Suite Wizard assumes there could be dynamic data such as those generated by length or count rules. Placing all the rules is the responsibility of the fuzzer developer (see Figure 7.4).

The fifth file is the Python or Java file. This file extends the `FuzzerBuilder` class, which is the main class for creating a new fuzzer with Defensics SDK. This file specifies which model files need to be loaded and what kind of settings are needed for the fuzzer. The class file includes the test sequence that was created according to the sequences seen in the network capture file (see Figure 7.5).

##### 7.2.3 Fuzzer Modeling

Defensics SDK uses a variant of Backus-Naur Form (BNF) for modeling. This is very close to ABNF, which is used in many RFCs, such as the HTTP specification. Everything done in ABNF can be done with Defensics BNF, and converting from ABNF is straightforward. There are minor changes in syntax. For example, the symbol in ABNF is `/` and in Defensics it is `|`. Strings and characters in ABNF are inside double quotes, but in Defensics, they are in single quotes. Binary values in ABNF are presented with `%xNN` and `NN` is the hexadecimal value of the byte. In Defensics BNF, these are presented with `0xNN`. Using RFCs where the protocol is defined in ABNF, converting to Defensics BNF is relatively simple.