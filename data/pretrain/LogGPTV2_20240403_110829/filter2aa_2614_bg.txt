付。在典型的DevOps流程中，开发工程师、IT运维工程师、质量工程
师等不同角色参与与协作，共同完成产品需求-设计-开发-部署的生命周
期管理，如图11-1所示。
●图11-1 DevOps模型中各角色协作关系
DevOps协作模式对于频繁交付的企业，面临持续版本迭代和快速
响应周期的压力时，既能使客户需求快速地传导到后端，提高工作效
率，又能通过自动化工具降低软件发布过程中的风险。但随着安全在软
件质量中逐渐被重视，各个团队协作往往会出现安全团队与其他团队协
作不畅、安全工作滞后、研发流程缺少安全控制环节等尴尬局面，于是
在23012年Gartner首次提出DevOpsSec的概念。
DevSecOps真正被业界关注是近几年自动化部署技术成熟之后才逐
步被推广开来，2017年在亚洲DevSecCon大会上，演讲嘉宾Shannong
Lietz提出“安全左移”的概念，其核心理念是DevSecOps，强调安全是整
个IT团队（包括开发、运维及安全团队）每个人的责任，通过管道化
流程、加强不同人员之间的协作，以工具、技术手段将重复性的安全
工作自动化地融入研发体系内，让安全属性嵌入整条IT流水线。在此
次大会上，Shannong 
Lietz给DevSecOps做了基本的定义，如图11-2所
示。
●图11-2 对Shannong Lietz在2017 DevSecCon大会上DevSecOps定义的关键点总结
与SDL所强调的系统性安全设计不同，DevSecOps更注重安全文化
建设和全流程的能力打通，通过工具化、平台化的管道流，集成各种安
全能力，达到多个团队链式协作的效果。在DevSecOps中，安全更接近
于当前业界提出的“原生安全”概念，是从软件生产、软件供应链的源
头，构建内置的安全能力。比如在原有的DevOps流程中，添加威胁建
模，引入代码质量检查，通过静态代码分析检查代码缺陷，使用Docker
容器构建部署安全能力等。
11.1.2 DevSecOps实施关键要点
在传统的协作模式中，安全通常是滞后的。一种情况是产品发布或
交付后，产品在线上发生了安全问题，再由开发人员回溯问题产生的原
因，完成问题整改；另一种情况是软件的编码开发已经结束，安全团队
才介入产品的发布流程，对软件产品做发布前的安全审查。这两种情况
中，无论是哪种，与其他团队的合作都是滞后的。但随着各行各业对安
全越来越的重视，面对诸多问题开发团队感到无从下手，开发团队的管
理层希望安全团队更早的介入研发流程，以帮助他们生产出高质量的软
件，这也是DevSecOps所期望达到的目的。
对于API来说，如果想生产出高质量的API服务能力，在DevSecOps
实施过程需要关注以下关键要点。
■ 
安全左移：DevSecOps致力将安全引入开发阶段，通过在API开
发早期引入安全环节来降低传统模式下安全工作滞后带来的返工成本。
在DevSecOps安全共同担责的文化下，鼓励开发工程师参与安全工作，
分析安全需求，熟悉安全缺陷用例，编写出可信任的代码；鼓励质量工
程师尽早参与安全质量管理过程，关注漏洞产生的原因、漏洞的数量、
漏洞危害等级以及漏洞修复情况，从整个生命周期的开发与维护的视角
关注安全质量与成本。
■ 安全自动化：DevSecOps关注整体流程的工具化和自动化，对于
安全工作来说，为了减少对研发流程的影响，可以利用API网关、微服
务、持续集成与部署（CI/CD）、容器化以及云原生技术，将安全工作
规范化、组件化、自动化，通过定点监控和审计来跟踪流程的执行和覆
盖情况。
■ 持续运营：DevSecOps并非解决所有安全问题的灵丹妙药，通常
在组织内的推进过程是循序渐进的，在推进过程中，逐步添加或调整安
全活动的数量与安全活动在流程中的位置，建立数字化运营指标，对
DevSecOps执行过程的数据进行采集、分析，直到监控的数据能表明当
前可以发现的漏洞数量足够少，有足够的安全能力能保障API的安全
性。同时，当内外部环境发生变化时，及时调整安全需求的输入，帮助
企业关注API安全工作的重点，获取最佳的投入产出比。
11.2 DevSecOps管道
为了减轻安全活动介入后对原有流程的影响，DevSecOps鼓励将安
全流程与现有的开发管理流程融合，将安全工作加入现有的开发平台和
工具中，比如在项目管理平台中导入安全等级定义、在需求管理平台中
导入安全需求、在持续集成平台中与安全测试能力对接、将安全测试结
果导入缺陷管理系统或工单管理系统中。
11.2.1 持续集成与持续安全
在DevOps模式下，研发组织借助DevOps平台，打通持续集成、持
续交付和基础架构的链路，通过DevOps管道的关键部分将自动化步骤
链接起来。当开发人员提交代码之后，系统自动化完成构建、检测、部
署，直至提交到生产环境。如果提交失败，系统能及时地回滚，保障应
用程序的一致性，如图11-3所示。
●图11-3 DevOps管道
在DevOps管道中，开发人员面向持续集成平台（CI），当代码提
交后，关键评审环节与自动化单元测试或集成测试同时进行，当最后都
确认没有问题，审核通过，合并到中央源代码存储库供持续发布阶段使
用。当代码合并到中央源代码时，将触发持续发布（CD）流程，质量
管理人员介入，同时自动启动安全测试。当最后都确认没有问题时将新
的代码打包到软件中，创建自动化发布需要的基础设施组件。
而在DevSecOps中提倡持续安全，安全在管道流中融入更深，基本
分布在持续集成、持续发布、基础设施运营中的每一个阶段。安全团队
会和DevOps团队一起，定义和实施安全控制要求，明确安全基线。
CI/CD持续运行，静态检测、动态扫描、运营监控，伴随着版本迭代持
续运转。理想状态下，大多数安全工作已经自动化，只有在应急或特殊
场景下才需要手工操作。
11.2.2 DevSecOps平台
DevSecOps管道中各个关键活动的串联，在流程上依赖于平台与工
具，在单点能力上依赖于SDL。一个典型的DevSecOps平台包含的功能
模块如图11-4所示。
●图11-4 DevSecOps平台组成结构
DevSecOps平台通常包含如下功能模块。
■ 流水线管理：主要为各个角色提供统一入口，包含任务编排与配
置、过程数据的统计度量、组织机构与用户的基础信息以及权限访问控
制等。
■ 工程管理：从项目的角度，管理需求和任务以及整体缺陷，包含
功能缺陷、安全缺陷、质量缺陷等。
■ 代码管理：主要为代码仓库的管理，管理代码的分支、代码的存
储、代码静态检测以及代码评审的协作流程等。
■ 构建管理：为持续集成地构建环境，管理编译选项配置、容器构
建参数配置等。通过编译与构建，生成代码制品。
■ 制品库管理：构建完成后生成的代码制品，统一存放的制品库，
并对代码制品进行持续检测，关注组件依赖与组件漏洞、组件许可协议
以及供应链的安全性。
■ 部署管理：管理自动化部署的各种环境，如应用所需要的环境、
主机环境、基础设置环境等。管理部署架构以及部署前的各项自动化测
试，比如功能测试、安全测试、性能测试等。
■ 运维管理：通过线上的周期性监控，及时发现线上问题，做出应
急响应。
每一个功能模块中，都涉及不同的工具，为平台提供能力支撑。常
用的工具如下。
■ 工程管理：主要有Jira、Confluence、禅道等。
■ 
代码管理：主要有SVN、GitLab、SonarQube、Fortify、
Coverity、Checkmarx等。
■ 构建管理：主要有Jenkins、Nexus、Hudson、Maven、JUnit等。
■ 
制品库管理：主要有Protecode 
SC、Dependency-Check、
Artifactory、Harbor等。
■ 
部署管理：主要有Kubernetes、Docker、OpenShift、
OpenSCAP、ZAP、AppScan等。
■ 
运维管理：主要有Zabbix、Prometheus、SkyWalking、Nessus、
ModSecurity等。
DevSecOps平台中，典型的工具流转关系如图11-5所示。
●图11-5 DevSecOps平台中工具流转关系
在图131-5的平台流水管道中，不同的角色在不同的阶段使用不同
的工具参与整个管道的能力构建，共同保障最终研发输出产物的安全质
量。比如，开发人员使用git客户端，从Git仓库获取代码，提交代码后
在平台上使用Maven进行编译。SonarQube根据安全规则对代码进行代
码安全检测，OpenSCAP用于运行环境的安全基线检测，SoapUI用于应
用层API服务或API接口的安全检测。通过平台工具链，以保障API从开
发到线上发布的过程安全。
11.3 DevSecOps API安全实践
如果企业内部想通过DevSecOps管道来创建更安全的API服务，那
么建议DevSecOps团队首先建立流水化的安全流程，在关键阶段设置卡
点，验证API安全性。在安全的CI/CD环境上，与API安全工具集成，自
动化基础架构的安全操作，加强过程监控和扫描，提高应急响应速度。
11.3.1 设置关键卡点
构建高安全性的API服务不是说追求百分百的安全，而是说在整个
管道流中设置关键卡点，当有安全问题发生时，能及时发现并处置。在
SDL中讨论了安全流程中的安全需求、安全架构、安全编码、安全测试
等关键活动，设置DevSecOps的关键卡点时，需要把单点的SDL能力根
据实际需要裁剪后融入DevSecOps的流程中。也可以分阶段、分步骤推
动安全左移工作，先在流程中嵌入动态检测工具和版本发布审核，等流
程运转比较顺畅时，再逐步添加静态检测、安全架构、安全需求等。切
忌一上来就将所有的安全活动都铺开，因为一方面DevSecOps流程的成
熟度很大程度依赖于所在企业的IT治理水平和API管理水平（比如API规
范覆盖情况），另一方面开发团队、质量团队、运维团队对安全的理解
也不一样，从情感上来说，运维团队是更靠近安全团队的，在其工作中
推进安全活动会比较顺利，而开发团队相对离安全团队比较远，所以推
进时要注意节奏的把握。
一般来说，首先推荐的关键卡点主要有落实自动化API安全测试、
使用API网关、接入Web应用防护墙。
1.落实自动化API安全测试
落实API安全测试的目的是为了自动化扫描每一个API。自动化API
安全测试与传统Web安全测试最大的区别在于不用像传统Web安全测试
那样关注页面，更多的是从请求输入与应答响应两部分去分析API应用
程序是否存在漏洞。API安全测试的常规内容主要包含API身份验证、
授权、输入验证、异常处理、数据保护、安全传输以及HTTP Header安
全性等。这些测试内容，可以借助自动化工具去实现，常用的工具有以
下三类。
■ 动态安全检测（Dynamic Application Security Testing，DAST），
其特点是在应用程序的动态运行状态下，模拟黑客攻击行为，分析应用
程序的响应，而确定应用程序是否存在漏洞。
■ 静态安全检测（Static Application Security Testing，SAST），其
特点是分析应用程序的源代码或二进制文件，通过语法、结构、过程、
接口等来发现应用程序的代码是否存在漏洞。
■ 交互式安全检测（Interactive Application Security Testing，